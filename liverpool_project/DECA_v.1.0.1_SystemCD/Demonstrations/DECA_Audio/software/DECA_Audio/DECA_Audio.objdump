
DECA_Audio.elf:     file format elf32-littlenios2
DECA_Audio.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01020240

Program Header:
    LOAD off    0x00001000 vaddr 0x01020000 paddr 0x01020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01020020 paddr 0x01020020 align 2**12
         filesz 0x00014818 memsz 0x00014818 flags r-x
    LOAD off    0x00015838 vaddr 0x01034838 paddr 0x01036324 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00017e10 vaddr 0x01037e10 paddr 0x01037e10 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01020000  01020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  01020020  01020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013c64  01020240  01020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000994  01033ea4  01033ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  01034838  01036324  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  01037e10  01037e10  00017e10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  01037f70  01037f70  00017324  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00017324  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e30  00000000  00000000  00017348  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027e2b  00000000  00000000  00018178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f0b  00000000  00000000  0003ffa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cc0c  00000000  00000000  00049eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026b4  00000000  00000000  00056abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000039bf  00000000  00000000  00059170  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b313  00000000  00000000  0005cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00077e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014e0  00000000  00000000  00077ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ca98  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007ca9b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007caa5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007caa6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007caa7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007caab  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007caaf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007cab3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007cabc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007cac5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0007cace  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  0007cad7  2**0
                  CONTENTS, READONLY
 29 .jdi          00003ee7  00000000  00000000  0007caf2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007dd5e  00000000  00000000  000809d9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01020000 l    d  .entry	00000000 .entry
01020020 l    d  .exceptions	00000000 .exceptions
01020240 l    d  .text	00000000 .text
01033ea4 l    d  .rodata	00000000 .rodata
01034838 l    d  .rwdata	00000000 .rwdata
01037e10 l    d  .bss	00000000 .bss
01037f70 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DECA_Audio_bsp//obj/HAL/src/crt0.o
01020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 AUDIO.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01021d98 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01034546 l     O .rodata	00000010 zeroes.4166
01034556 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
01034566 l     O .rodata	00000010 zeroes.4181
01034576 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01026364 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01027ee4 l     F .text	00000008 __fp_lock
01027eec l     F .text	00000008 __fp_unlock
01027f00 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01034838 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
01034c7c l     O .rwdata	00000020 lc_ctype_charset
01034c5c l     O .rwdata	00000020 lc_message_charset
01034c9c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010345a8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
010346cc l     O .rodata	00000010 zeroes.4110
010346dc l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0102c590 l     F .text	000000fc __sprint_r.part.0
010346fc l     O .rodata	00000010 blanks.4125
010346ec l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
010314ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010315cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010315f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010316f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010317ec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010318d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01031aac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01036314 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01031d38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01031e80 l     F .text	00000038 alt_dev_reg
01035284 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01032170 l     F .text	00000204 altera_avalon_jtag_uart_irq
01032374 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01032994 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01032d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01033218 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01033350 l     F .text	00000050 alt_get_errno
010333a0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01037e44 g     O .bss	00000004 alt_instruction_exception_handler
0102a9a0 g     F .text	00000074 _mprec_log10
0102aa8c g     F .text	0000008c __any_on
0102dee0 g     F .text	00000054 _isatty_r
010345b4 g     O .rodata	00000028 __mprec_tinytens
010319f4 g     F .text	00000078 alt_main
01021f2c g     F .text	000000b8 _puts_r
01037e70 g     O .bss	00000100 alt_irq
0102df34 g     F .text	0000005c _lseek_r
01020f28 g     F .text	00000060 ACK_check
01036324 g       *ABS*	00000000 __flash_rwdata_start
01020e9c g     F .text	0000008c ACK_single_check
01030014 g     F .text	00000084 .hidden __eqdf2
01037f70 g       *ABS*	00000000 __alt_heap_start
01021ef0 g     F .text	0000003c printf
0102e15c g     F .text	0000009c _wcrtomb_r
0102b258 g     F .text	0000005c __sseek
01028234 g     F .text	00000010 __sinit
0102dfec g     F .text	00000154 __swbuf_r
01028cac g     F .text	0000007c _setlocale_r
010280a0 g     F .text	00000064 __sfmoreglue
01031a8c g     F .text	00000020 __malloc_unlock
0102990c g     F .text	0000015c memmove
01020f88 g     F .text	000001fc OC_I2C_Write
0102821c g     F .text	00000018 _cleanup
01029b8c g     F .text	000000a8 _Balloc
01021940 g     F .text	0000002c LED_AllOff
01030098 g     F .text	000000e0 .hidden __gtdf2
01033760 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01020000 g     F .entry	0000001c __reset
01020020 g       *ABS*	00000000 __flash_exceptions_start
0102de88 g     F .text	00000058 _fstat_r
01037e28 g     O .bss	00000004 errno
0102b1d4 g     F .text	00000008 __seofread
0102b528 g     F .text	00001068 ___svfiprintf_internal_r
01037e30 g     O .bss	00000004 alt_argv
0103e2e4 g       *ABS*	00000000 _gp
01031d08 g     F .text	00000030 usleep
01021c00 g     F .text	00000060 show_menu
01035104 g     O .rwdata	00000180 alt_fd_list
01033780 g     F .text	00000090 alt_find_dev
010297d4 g     F .text	00000138 memcpy
010218e0 g     F .text	00000034 LED_Display
01020cbc g     F .text	0000014c oc_i2c_init_ex
01027ef4 g     F .text	0000000c _cleanup_r
010312d4 g     F .text	000000d0 .hidden __floatsidf
010332d8 g     F .text	00000078 alt_io_redirect
01030178 g     F .text	000000e0 .hidden __ltdf2
01033ea4 g       *ABS*	00000000 __DTOR_END__
01021fe4 g     F .text	00000014 puts
01033a64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0102b0b8 g     F .text	00000074 __fpclassifyd
0102a8fc g     F .text	000000a4 __ratio
0102da00 g     F .text	00000024 __vfiprintf_internal
01021c60 g     F .text	0000005c init_audio
01032570 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01021ec4 g     F .text	0000002c _printf_r
01021eb4 g     F .text	00000008 .hidden __udivsi3
01031748 g     F .text	000000a4 isatty
01034604 g     O .rodata	000000c8 __mprec_tens
01028d28 g     F .text	0000000c __locale_charset
010261f4 g     F .text	00000040 vsnprintf
010339d8 g     F .text	0000008c alt_icache_flush
01037e24 g     O .bss	00000004 __malloc_top_pad
010362ec g     O .rwdata	00000004 __mb_cur_max
01028d58 g     F .text	0000000c _localeconv_r
01029f8c g     F .text	0000003c __i2b
01028698 g     F .text	000004a4 __sfvwrite_r
0102b12c g     F .text	00000054 _sbrk_r
01021b00 g     F .text	00000090 myprintf_dword_array
0102df90 g     F .text	0000005c _read_r
0103630c g     O .rwdata	00000004 alt_max_fd
0102db98 g     F .text	00000100 _fclose_r
01027eb4 g     F .text	00000030 fflush
01037e20 g     O .bss	00000004 __malloc_max_sbrked_mem
0102eeac g     F .text	0000089c .hidden __adddf3
0102a6a4 g     F .text	0000011c __b2d
010202d8 g     F .text	000003d8 AUDIO_Loopback
0102e91c g     F .text	00000590 .hidden __umoddi3
01031920 g     F .text	000000d4 lseek
010362e4 g     O .rwdata	00000004 _global_impure_ptr
0102ab18 g     F .text	000005a0 _realloc_r
01037f70 g       *ABS*	00000000 __bss_end
01033128 g     F .text	000000f0 alt_iic_isr_register
0103365c g     F .text	00000104 alt_tick
0102e35c g     F .text	000005c0 .hidden __udivdi3
0102dcac g     F .text	00000184 _fputwc_r
010345dc g     O .rodata	00000028 __mprec_bigtens
01029d70 g     F .text	00000104 __s2b
010313a4 g     F .text	000000a4 .hidden __floatunsidf
0102a44c g     F .text	00000060 __mcmp
01028254 g     F .text	00000018 __fp_lock_all
010330dc g     F .text	0000004c alt_ic_irq_enabled
010214ec g     F .text	000001d8 OC_I2CL_Write
010335c4 g     F .text	00000098 alt_alarm_stop
01037e38 g     O .bss	00000004 alt_irq_active
01021184 g     F .text	00000064 ACK_judge_for_read
010200fc g     F .exceptions	000000d0 alt_irq_handler
010350dc g     O .rwdata	00000028 alt_dev_null
01020bb4 g     F .text	00000058 Write32_Data
01032d28 g     F .text	00000044 alt_dcache_flush_all
01029e74 g     F .text	00000068 __hi0bits
0103124c g     F .text	00000088 .hidden __fixdfsi
01036324 g       *ABS*	00000000 __ram_rwdata_end
01036304 g     O .rwdata	00000008 alt_dev_list
01031d88 g     F .text	000000f8 write
01034838 g       *ABS*	00000000 __ram_rodata_end
01031648 g     F .text	000000b0 fstat
01030178 g     F .text	000000e0 .hidden __ledf2
01021a0c g     F .text	0000006c myprintf
0102a1c4 g     F .text	00000140 __pow5mult
0102c6a4 g     F .text	0000135c ___vfiprintf_internal_r
01037e18 g     O .bss	00000004 __nlocale_changed
01021ebc g     F .text	00000008 .hidden __umodsi3
01037f70 g       *ABS*	00000000 end
01021914 g     F .text	0000002c LED_AllOn
010320ac g     F .text	000000c4 altera_avalon_jtag_uart_init
010201cc g     F .exceptions	00000074 alt_instruction_exception_entry
01033ea4 g       *ABS*	00000000 __CTOR_LIST__
0103d4c0 g       *ABS*	00000000 __alt_stack_pointer
01032a08 g     F .text	00000088 alt_avalon_timer_sc_init
01031448 g     F .text	00000064 .hidden __clzsi2
0103277c g     F .text	00000218 altera_avalon_jtag_uart_write
01028244 g     F .text	00000004 __sfp_lock_acquire
010296ec g     F .text	000000e8 memchr
010240e4 g     F .text	00001ffc ___vfprintf_internal_r
01021ff8 g     F .text	00000058 _sprintf_r
010283a8 g     F .text	000002f0 _free_r
01028d34 g     F .text	00000010 __locale_mb_cur_max
01033cdc g     F .text	00000194 __call_exitprocs
01037e14 g     O .bss	00000004 __mlocale_changed
010362f0 g     O .rwdata	00000004 __malloc_sbrk_base
01020240 g     F .text	0000004c _start
01037e3c g     O .bss	00000004 _alt_tick_rate
0102a304 g     F .text	00000148 __lshift
01037e40 g     O .bss	00000004 _alt_nticks
01031afc g     F .text	000000fc read
01031eec g     F .text	0000005c alt_sys_init
0102b360 g     F .text	000001c8 __ssprint_r
01033bc8 g     F .text	00000114 __register_exitproc
01029fc8 g     F .text	000001fc __multiply
0103241c g     F .text	00000068 altera_avalon_jtag_uart_close
01034838 g       *ABS*	00000000 __ram_rwdata_start
01033ea4 g       *ABS*	00000000 __ram_rodata_start
01037e48 g     O .bss	00000028 __malloc_current_mallinfo
0102a7c0 g     F .text	0000013c __d2b
01031f48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01033924 g     F .text	000000b4 alt_get_fd
01032bd0 g     F .text	00000158 alt_busy_sleep
0102da80 g     F .text	00000054 _close_r
01033b4c g     F .text	0000007c memcmp
01032008 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01037f70 g       *ABS*	00000000 __alt_stack_base
01032058 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01026234 g     F .text	00000130 __swsetup_r
01021b90 g     F .text	00000070 init
01020c64 g     F .text	00000058 oc_i2c_init
0102f748 g     F .text	000008cc .hidden __divdf3
01028104 g     F .text	00000118 __sfp
0102aa14 g     F .text	00000078 __copybits
01034cd4 g     O .rwdata	00000408 __malloc_av_
01028250 g     F .text	00000004 __sinit_lock_release
01026104 g     F .text	000000f0 _vsnprintf_r
01030258 g     F .text	00000724 .hidden __muldf3
0102b180 g     F .text	00000054 __sread
01033810 g     F .text	00000114 alt_find_file
01032dbc g     F .text	000000a4 alt_dev_llist_insert
01031a6c g     F .text	00000020 __malloc_lock
01031c58 g     F .text	000000b0 sbrk
01022154 g     F .text	00001f90 ___svfprintf_internal_r
01027c8c g     F .text	00000228 _fflush_r
0102028c g     F .text	0000004c TLV320AIC3254_Init
0102dad4 g     F .text	000000c4 _calloc_r
01037e10 g       *ABS*	00000000 __bss_start
01029a68 g     F .text	00000124 memset
01021cbc g     F .text	000000dc main
01037e34 g     O .bss	00000004 alt_envp
01037e1c g     O .bss	00000004 __malloc_max_total_mem
01031fa8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0102e140 g     F .text	0000001c __swbuf
0102b2b4 g     F .text	00000008 __sclose
0103d4c0 g       *ABS*	00000000 __alt_heap_limit
0102dc98 g     F .text	00000014 fclose
01026564 g     F .text	00001728 _dtoa_r
01028f44 g     F .text	000007a8 _malloc_r
0102e2d0 g     F .text	00000030 __ascii_wctomb
01036310 g     O .rwdata	00000004 alt_errno
01028b3c g     F .text	000000b8 _fwalk
01021e04 g     F .text	00000054 .hidden __divsi3
01020e08 g     F .text	00000094 oc_i2c_uninit
01028284 g     F .text	00000124 _malloc_trim_r
01033ea4 g       *ABS*	00000000 __CTOR_END__
010206b0 g     F .text	000003f4 AUDIO_Beep_Generator
0102b2bc g     F .text	000000a4 strcmp
01033ea4 g       *ABS*	00000000 __flash_rodata_start
01033ea4 g       *ABS*	00000000 __DTOR_LIST__
01030014 g     F .text	00000084 .hidden __nedf2
01031eb8 g     F .text	00000034 alt_irq_init
01031bf8 g     F .text	00000060 alt_release_fd
01022050 g     F .text	0000006c sprintf
0103470c g     O .rodata	00000100 .hidden __clz_tab
010219dc g     F .text	00000030 debug_output
01037e10 g     O .bss	00000004 _PathLocale
01033b00 g     F .text	00000014 atexit
0102da24 g     F .text	0000005c _write_r
01028d64 g     F .text	0000001c setlocale
010362e8 g     O .rwdata	00000004 _impure_ptr
01037e2c g     O .bss	00000004 alt_argc
01032ebc g     F .text	0000005c _do_dtors
01028d50 g     F .text	00000008 __locale_cjk_lang
01020020 g       .exceptions	00000000 alt_irq_entry
0102a644 g     F .text	00000060 __ulp
0102826c g     F .text	00000018 __fp_unlock_all
010362fc g     O .rwdata	00000008 alt_fs_list
01021a78 g     F .text	00000088 myprintf_hex_array
01020c0c g     F .text	00000058 Read32_Data
010211e8 g     F .text	000001cc OC_I2C_Read
01020020 g       *ABS*	00000000 __ram_exceptions_start
01028d80 g     F .text	0000000c localeconv
01020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
01032f48 g     F .text	00000050 alt_ic_isr_register
01036324 g       *ABS*	00000000 _edata
01037f70 g       *ABS*	00000000 _end
01020240 g       *ABS*	00000000 __ram_exceptions_end
01032484 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
01033038 g     F .text	000000a4 alt_ic_irq_disable
0102b1dc g     F .text	0000007c __swrite
010362f4 g     O .rwdata	00000004 __malloc_trim_threshold
010213b4 g     F .text	00000138 OC_I2C_Read_Continue
01028d44 g     F .text	0000000c __locale_msgcharset
01033b14 g     F .text	00000038 exit
0102196c g     F .text	00000070 LED_LightCount
01028bf4 g     F .text	000000b8 _fwalk_reent
0102a4ac g     F .text	00000198 __mdiff
01021e58 g     F .text	0000005c .hidden __modsi3
0103d4c0 g       *ABS*	00000000 __alt_data_end
01020020 g     F .exceptions	00000000 alt_exception
01028248 g     F .text	00000004 __sfp_lock_release
010216c4 g     F .text	0000021c OC_I2CL_Read
01033e70 g     F .text	00000034 _exit
01032a90 g     F .text	00000140 alt_alarm_start
01020aa4 g     F .text	00000110 aduio_wr_reg
01028d8c g     F .text	000001b8 __smakebuf_r
010220bc g     F .text	00000098 strlen
0103346c g     F .text	00000158 open
01030098 g     F .text	000000e0 .hidden __gedf2
010362f8 g     O .rwdata	00000004 __wctomb
0102c68c g     F .text	00000018 __sprint_r
01032f18 g     F .text	00000030 alt_icache_flush_all
01036318 g     O .rwdata	00000004 alt_priority_mask
01032f98 g     F .text	000000a0 alt_ic_irq_enable
010260e0 g     F .text	00000024 __vfprintf_internal
0102e300 g     F .text	0000005c _wctomb_r
0103097c g     F .text	000008d0 .hidden __subdf3
01029edc g     F .text	000000b0 __lo0bits
0103631c g     O .rwdata	00000008 alt_alarm_list
01032e60 g     F .text	0000005c _do_ctors
0102e1f8 g     F .text	000000d8 wcrtomb
010314fc g     F .text	000000d0 close
01031850 g     F .text	00000080 alt_load
0102de30 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0102824c g     F .text	00000004 __sinit_lock_acquire
01029c5c g     F .text	00000114 __multadd
010341c5 g     O .rodata	00000300 szMenu
01029c34 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 102000c:	00bffd16 	blt	zero,r2,1020004 <_gp+0xfffe1d20>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1020010:	004040b4 	movhi	at,258
    ori r1, r1, %lo(_start)
 1020014:	08409014 	ori	at,at,576
    jmp r1
 1020018:	0800683a 	jmp	at
 102001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1020000>

Disassembly of section .exceptions:

01020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 102007c:	10000326 	beq	r2,zero,102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1020080:	20000226 	beq	r4,zero,102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1020084:	10200fc0 	call	10200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1020088:	00000706 	br	10200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 102008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1020098:	10201cc0 	call	10201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 102009c:	1000021e 	bne	r2,zero,10200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10200f8:	ef80083a 	eret

010200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10200fc:	defff904 	addi	sp,sp,-28
 1020100:	dfc00615 	stw	ra,24(sp)
 1020104:	df000515 	stw	fp,20(sp)
 1020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 102010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1020110:	0005313a 	rdctl	r2,ipending
 1020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 102011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1020124:	00800044 	movi	r2,1
 1020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 102012c:	e0fffb17 	ldw	r3,-20(fp)
 1020130:	e0bffc17 	ldw	r2,-16(fp)
 1020134:	1884703a 	and	r2,r3,r2
 1020138:	10001426 	beq	r2,zero,102018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 102013c:	008040f4 	movhi	r2,259
 1020140:	109f9c04 	addi	r2,r2,32368
 1020144:	e0fffd17 	ldw	r3,-12(fp)
 1020148:	180690fa 	slli	r3,r3,3
 102014c:	10c5883a 	add	r2,r2,r3
 1020150:	10c00017 	ldw	r3,0(r2)
 1020154:	008040f4 	movhi	r2,259
 1020158:	109f9c04 	addi	r2,r2,32368
 102015c:	e13ffd17 	ldw	r4,-12(fp)
 1020160:	200890fa 	slli	r4,r4,3
 1020164:	1105883a 	add	r2,r2,r4
 1020168:	10800104 	addi	r2,r2,4
 102016c:	10800017 	ldw	r2,0(r2)
 1020170:	1009883a 	mov	r4,r2
 1020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 102017c:	0005313a 	rdctl	r2,ipending
 1020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1020184:	e0bfff17 	ldw	r2,-4(fp)
 1020188:	00000706 	br	10201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 102018c:	e0bffc17 	ldw	r2,-16(fp)
 1020190:	1085883a 	add	r2,r2,r2
 1020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1020198:	e0bffd17 	ldw	r2,-12(fp)
 102019c:	10800044 	addi	r2,r2,1
 10201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10201a4:	003fe106 	br	102012c <_gp+0xfffe1e48>

    active = alt_irq_pending ();
 10201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10201ac:	e0bffb17 	ldw	r2,-20(fp)
 10201b0:	103fdb1e 	bne	r2,zero,1020120 <_gp+0xfffe1e3c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10201b4:	0001883a 	nop
}
 10201b8:	e037883a 	mov	sp,fp
 10201bc:	dfc00117 	ldw	ra,4(sp)
 10201c0:	df000017 	ldw	fp,0(sp)
 10201c4:	dec00204 	addi	sp,sp,8
 10201c8:	f800283a 	ret

010201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10201cc:	defffb04 	addi	sp,sp,-20
 10201d0:	dfc00415 	stw	ra,16(sp)
 10201d4:	df000315 	stw	fp,12(sp)
 10201d8:	df000304 	addi	fp,sp,12
 10201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10201e0:	000531fa 	rdctl	r2,exception
 10201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10201e8:	e0bffd17 	ldw	r2,-12(fp)
 10201ec:	10801f0c 	andi	r2,r2,124
 10201f0:	1004d0ba 	srli	r2,r2,2
 10201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10201f8:	0005333a 	rdctl	r2,badaddr
 10201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1020200:	d0a6d817 	ldw	r2,-25760(gp)
 1020204:	10000726 	beq	r2,zero,1020224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1020208:	d0a6d817 	ldw	r2,-25760(gp)
 102020c:	e0fffd17 	ldw	r3,-12(fp)
 1020210:	1809883a 	mov	r4,r3
 1020214:	e17fff17 	ldw	r5,-4(fp)
 1020218:	e1bffe17 	ldw	r6,-8(fp)
 102021c:	103ee83a 	callr	r2
 1020220:	00000206 	br	102022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1020224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1020228:	0005883a 	mov	r2,zero
}
 102022c:	e037883a 	mov	sp,fp
 1020230:	dfc00117 	ldw	ra,4(sp)
 1020234:	df000017 	ldw	fp,0(sp)
 1020238:	dec00204 	addi	sp,sp,8
 102023c:	f800283a 	ret

Disassembly of section .text:

01020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1020240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1020244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1020248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 102024c:	00bffd16 	blt	zero,r2,1020244 <_gp+0xfffe1f60>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1020250:	06c040f4 	movhi	sp,259
    ori sp, sp, %lo(__alt_stack_pointer)
 1020254:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
 1020258:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 102025c:	d6b8b914 	ori	gp,gp,58084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1020260:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 1020264:	109f8414 	ori	r2,r2,32272

    movhi r3, %hi(__bss_end)
 1020268:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 102026c:	18dfdc14 	ori	r3,r3,32624

    beq r2, r3, 1f
 1020270:	10c00326 	beq	r2,r3,1020280 <_start+0x40>

0:
    stw zero, (r2)
 1020274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1020278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 102027c:	10fffd36 	bltu	r2,r3,1020274 <_gp+0xfffe1f90>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1020280:	10318500 	call	1031850 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1020284:	10319f40 	call	10319f4 <alt_main>

01020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1020288:	003fff06 	br	1020288 <_gp+0xfffe1fa4>

0102028c <TLV320AIC3254_Init>:


/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
bool TLV320AIC3254_Init(alt_u32 controller_base){
 102028c:	defffc04 	addi	sp,sp,-16
 1020290:	dfc00315 	stw	ra,12(sp)
 1020294:	df000215 	stw	fp,8(sp)
 1020298:	df000204 	addi	fp,sp,8
 102029c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;

	bSuccess = 	oc_i2c_init_ex(controller_base, 50*1000*1000, 400*1000); // ref clock:50MHz, i2c clk:400K
 10202a0:	e0bfff17 	ldw	r2,-4(fp)
 10202a4:	1009883a 	mov	r4,r2
 10202a8:	0140bef4 	movhi	r5,763
 10202ac:	297c2004 	addi	r5,r5,-3968
 10202b0:	018001b4 	movhi	r6,6
 10202b4:	3186a004 	addi	r6,r6,6784
 10202b8:	1020cbc0 	call	1020cbc <oc_i2c_init_ex>
 10202bc:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
 10202c0:	e0bffe17 	ldw	r2,-8(fp)

}
 10202c4:	e037883a 	mov	sp,fp
 10202c8:	dfc00117 	ldw	ra,4(sp)
 10202cc:	df000017 	ldw	fp,0(sp)
 10202d0:	dec00204 	addi	sp,sp,8
 10202d4:	f800283a 	ret

010202d8 <AUDIO_Loopback>:

bool AUDIO_Loopback(alt_u8 InputSource){
 10202d8:	defffc04 	addi	sp,sp,-16
 10202dc:	dfc00315 	stw	ra,12(sp)
 10202e0:	df000215 	stw	fp,8(sp)
 10202e4:	df000204 	addi	fp,sp,8
 10202e8:	2005883a 	mov	r2,r4
 10202ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 10202f0:	00800044 	movi	r2,1
 10202f4:	e0bffe15 	stw	r2,-8(fp)
    if (InputSource == LOOPBACK){
 10202f8:	e0bfff03 	ldbu	r2,-4(fp)
 10202fc:	1000db1e 	bne	r2,zero,102066c <AUDIO_Loopback+0x394>
    	 AUDIO_DEBUG(("[AUDIO] AUDIO_Loopback_Configuration...\r\n"));
 1020300:	010040f4 	movhi	r4,259
 1020304:	210fa904 	addi	r4,r4,16036
 1020308:	1021a0c0 	call	1021a0c <myprintf>
    	 //page0 reg configration
         if (bSuccess)
 102030c:	e0bffe17 	ldw	r2,-8(fp)
 1020310:	10000426 	beq	r2,zero,1020324 <AUDIO_Loopback+0x4c>
        	 bSuccess = aduio_wr_reg(0x00, 0x00);  // Initialize to Page 0
 1020314:	0009883a 	mov	r4,zero
 1020318:	000b883a 	mov	r5,zero
 102031c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020320:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020324:	e0bffe17 	ldw	r2,-8(fp)
 1020328:	10000426 	beq	r2,zero,102033c <AUDIO_Loopback+0x64>
        	 bSuccess = aduio_wr_reg(0x01, 0x01);  // Initialize the device through software reset
 102032c:	01000044 	movi	r4,1
 1020330:	01400044 	movi	r5,1
 1020334:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020338:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102033c:	e0bffe17 	ldw	r2,-8(fp)
 1020340:	10000426 	beq	r2,zero,1020354 <AUDIO_Loopback+0x7c>
        	 bSuccess = aduio_wr_reg(0x04, 0x00);  //MCLK pin is CODEC_CLKIN
 1020344:	01000104 	movi	r4,4
 1020348:	000b883a 	mov	r5,zero
 102034c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020350:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020354:	e0bffe17 	ldw	r2,-8(fp)
 1020358:	10000426 	beq	r2,zero,102036c <AUDIO_Loopback+0x94>
        	 bSuccess = aduio_wr_reg(0x0b, 0x81);  //NDAC divider powered up & NDAC = 1
 102035c:	010002c4 	movi	r4,11
 1020360:	01402044 	movi	r5,129
 1020364:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020368:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102036c:	e0bffe17 	ldw	r2,-8(fp)
 1020370:	10000426 	beq	r2,zero,1020384 <AUDIO_Loopback+0xac>
        	 bSuccess = aduio_wr_reg(0x0c, 0x82);  //MDAC divider powered up & MDAC = 2
 1020374:	01000304 	movi	r4,12
 1020378:	01402084 	movi	r5,130
 102037c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020380:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020384:	e0bffe17 	ldw	r2,-8(fp)
 1020388:	10000426 	beq	r2,zero,102039c <AUDIO_Loopback+0xc4>
        	 bSuccess = aduio_wr_reg(0x0d, 0x00);  //DOSR MSB DOSR=128
 102038c:	01000344 	movi	r4,13
 1020390:	000b883a 	mov	r5,zero
 1020394:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020398:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102039c:	e0bffe17 	ldw	r2,-8(fp)
 10203a0:	10000426 	beq	r2,zero,10203b4 <AUDIO_Loopback+0xdc>
        	 bSuccess = aduio_wr_reg(0x0e, 0x80);  //DOSR LSB DOSR=128
 10203a4:	01000384 	movi	r4,14
 10203a8:	01402004 	movi	r5,128
 10203ac:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10203b0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10203b4:	e0bffe17 	ldw	r2,-8(fp)
 10203b8:	10000426 	beq	r2,zero,10203cc <AUDIO_Loopback+0xf4>
        	 bSuccess = aduio_wr_reg(0x12, 0x81);  //NADC divider powered up & NADC=1
 10203bc:	01000484 	movi	r4,18
 10203c0:	01402044 	movi	r5,129
 10203c4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10203c8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10203cc:	e0bffe17 	ldw	r2,-8(fp)
 10203d0:	10000426 	beq	r2,zero,10203e4 <AUDIO_Loopback+0x10c>
        	 bSuccess = aduio_wr_reg(0x13, 0x82);  //MADC divider powered up & MADC=2
 10203d4:	010004c4 	movi	r4,19
 10203d8:	01402084 	movi	r5,130
 10203dc:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10203e0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10203e4:	e0bffe17 	ldw	r2,-8(fp)
 10203e8:	10000426 	beq	r2,zero,10203fc <AUDIO_Loopback+0x124>
        	 bSuccess = aduio_wr_reg(0x14, 0x80);  //AOSR = 128
 10203ec:	01000504 	movi	r4,20
 10203f0:	01402004 	movi	r5,128
 10203f4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10203f8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10203fc:	e0bffe17 	ldw	r2,-8(fp)
 1020400:	10000426 	beq	r2,zero,1020414 <AUDIO_Loopback+0x13c>
        	 bSuccess = aduio_wr_reg(0x1b, 0x0d);  //BCLK is output from the device & WCLK is output from the device & DOUT will be high impedance after data has been transferred
 1020404:	010006c4 	movi	r4,27
 1020408:	01400344 	movi	r5,13
 102040c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020410:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020414:	e0bffe17 	ldw	r2,-8(fp)
 1020418:	10000426 	beq	r2,zero,102042c <AUDIO_Loopback+0x154>
             bSuccess = aduio_wr_reg(0x1d, 0x17);  //Stereo ADC output is routed to Stereo DAC input&&Primary BCLK and Primary WCLK buffers are powered up when they are used in clock generation even when the codec is powered down & BDIV_CLKIN = ADC_MOD_CLK
 102041c:	01000744 	movi	r4,29
 1020420:	014005c4 	movi	r5,23
 1020424:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020428:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102042c:	e0bffe17 	ldw	r2,-8(fp)
 1020430:	10000426 	beq	r2,zero,1020444 <AUDIO_Loopback+0x16c>
        	 bSuccess = aduio_wr_reg(0x1e, 0x90);  //BCLK N divider powered up & BCLK N divider = 128
 1020434:	01000784 	movi	r4,30
 1020438:	01402404 	movi	r5,144
 102043c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020440:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020444:	e0bffe17 	ldw	r2,-8(fp)
 1020448:	10000426 	beq	r2,zero,102045c <AUDIO_Loopback+0x184>
        	 bSuccess = aduio_wr_reg(0x3c, 0x01);  //DAC Signal Processing Block PRB_P1
 102044c:	01000f04 	movi	r4,60
 1020450:	01400044 	movi	r5,1
 1020454:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020458:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102045c:	e0bffe17 	ldw	r2,-8(fp)
 1020460:	10000426 	beq	r2,zero,1020474 <AUDIO_Loopback+0x19c>
        	 bSuccess = aduio_wr_reg(0x3d, 0x01);  //ADC Singal Processing Block PRB_R1
 1020464:	01000f44 	movi	r4,61
 1020468:	01400044 	movi	r5,1
 102046c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020470:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020474:	e0bffe17 	ldw	r2,-8(fp)
 1020478:	10000426 	beq	r2,zero,102048c <AUDIO_Loopback+0x1b4>
        	 bSuccess = aduio_wr_reg(0x3f, 0xd4);  //Left DAC Channel Powered Up & Right DAC Channel Powered Up & Left DAC data Left Channel Audio Interface Data & Right DAC data Right Channel Audio Interface Data
 102047c:	01000fc4 	movi	r4,63
 1020480:	01403504 	movi	r5,212
 1020484:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020488:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102048c:	e0bffe17 	ldw	r2,-8(fp)
 1020490:	10000426 	beq	r2,zero,10204a4 <AUDIO_Loopback+0x1cc>
        	 bSuccess = aduio_wr_reg(0x40, 0x00);  //Left+Righ DAC Channel not muted
 1020494:	01001004 	movi	r4,64
 1020498:	000b883a 	mov	r5,zero
 102049c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10204a0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10204a4:	e0bffe17 	ldw	r2,-8(fp)
 10204a8:	10000426 	beq	r2,zero,10204bc <AUDIO_Loopback+0x1e4>
        	 bSuccess = aduio_wr_reg(0x41, 0xF0);  //Left DAC Channel Digital Volume Control=-7.5dB
 10204ac:	01001044 	movi	r4,65
 10204b0:	01403c04 	movi	r5,240
 10204b4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10204b8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10204bc:	e0bffe17 	ldw	r2,-8(fp)
 10204c0:	10000426 	beq	r2,zero,10204d4 <AUDIO_Loopback+0x1fc>
        	 bSuccess = aduio_wr_reg(0x42, 0xF0);  //Right DAC Channel Digital Volume Control=-7.5dB
 10204c4:	01001084 	movi	r4,66
 10204c8:	01403c04 	movi	r5,240
 10204cc:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10204d0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10204d4:	e0bffe17 	ldw	r2,-8(fp)
 10204d8:	10000426 	beq	r2,zero,10204ec <AUDIO_Loopback+0x214>
        	 bSuccess = aduio_wr_reg(0x51, 0xc2);  //Left+Right Channel ADC is powered up & ADC Volume Control Soft-Stepping disabled
 10204dc:	01001444 	movi	r4,81
 10204e0:	01403084 	movi	r5,194
 10204e4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10204e8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10204ec:	e0bffe17 	ldw	r2,-8(fp)
 10204f0:	10000426 	beq	r2,zero,1020504 <AUDIO_Loopback+0x22c>
        	 bSuccess = aduio_wr_reg(0x52, 0x00);  //Right ADC Channel Un-muted
 10204f4:	01001484 	movi	r4,82
 10204f8:	000b883a 	mov	r5,zero
 10204fc:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020500:	e0bffe15 	stw	r2,-8(fp)

         //page1 reg configration
         if (bSuccess)
 1020504:	e0bffe17 	ldw	r2,-8(fp)
 1020508:	10000426 	beq	r2,zero,102051c <AUDIO_Loopback+0x244>
        	 bSuccess = aduio_wr_reg(0x00, 0x01);  //page1
 102050c:	0009883a 	mov	r4,zero
 1020510:	01400044 	movi	r5,1
 1020514:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020518:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102051c:	e0bffe17 	ldw	r2,-8(fp)
 1020520:	10000426 	beq	r2,zero,1020534 <AUDIO_Loopback+0x25c>
        	 bSuccess = aduio_wr_reg(0x01, 0x08);  //Disabled weak connection of AVDD with DVDD
 1020524:	01000044 	movi	r4,1
 1020528:	01400204 	movi	r5,8
 102052c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020530:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020534:	e0bffe17 	ldw	r2,-8(fp)
 1020538:	10000426 	beq	r2,zero,102054c <AUDIO_Loopback+0x274>
        	 bSuccess = aduio_wr_reg(0x02, 0x01);  //Over Current detected for AVDD LDO
 102053c:	01000084 	movi	r4,2
 1020540:	01400044 	movi	r5,1
 1020544:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020548:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102054c:	e0bffe17 	ldw	r2,-8(fp)
 1020550:	10000426 	beq	r2,zero,1020564 <AUDIO_Loopback+0x28c>
        	 bSuccess = aduio_wr_reg(0x09, 0x0f);  //LOL+LOR is powered up & Left+Right Mixer Amplifier (MAL) is powered up
 1020554:	01000244 	movi	r4,9
 1020558:	014003c4 	movi	r5,15
 102055c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020560:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020564:	e0bffe17 	ldw	r2,-8(fp)
 1020568:	10000426 	beq	r2,zero,102057c <AUDIO_Loopback+0x2a4>
        	 bSuccess = aduio_wr_reg(0x0a, 0x40);  //Full Chip Common Mode is 0.75V
 102056c:	01000284 	movi	r4,10
 1020570:	01401004 	movi	r5,64
 1020574:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020578:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102057c:	e0bffe17 	ldw	r2,-8(fp)
 1020580:	10000426 	beq	r2,zero,1020594 <AUDIO_Loopback+0x2bc>
        	 bSuccess = aduio_wr_reg(0x0e, 0x08);  //Left Channel DAC reconstruction filter output is routed to LOL
 1020584:	01000384 	movi	r4,14
 1020588:	01400204 	movi	r5,8
 102058c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020590:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020594:	e0bffe17 	ldw	r2,-8(fp)
 1020598:	10000426 	beq	r2,zero,10205ac <AUDIO_Loopback+0x2d4>
        	 bSuccess = aduio_wr_reg(0x0f, 0x08);  //Right Channel DAC reconstruction filter output is routed to LOR
 102059c:	010003c4 	movi	r4,15
 10205a0:	01400204 	movi	r5,8
 10205a4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10205a8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10205ac:	e0bffe17 	ldw	r2,-8(fp)
 10205b0:	10000426 	beq	r2,zero,10205c4 <AUDIO_Loopback+0x2ec>
        	 bSuccess = aduio_wr_reg(0x12, 0x1A);  //LOL driver gain is 26dB
 10205b4:	01000484 	movi	r4,18
 10205b8:	01400684 	movi	r5,26
 10205bc:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10205c0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10205c4:	e0bffe17 	ldw	r2,-8(fp)
 10205c8:	10000426 	beq	r2,zero,10205dc <AUDIO_Loopback+0x304>
        	 bSuccess = aduio_wr_reg(0x13, 0x1A);  //LOR driver gain is 26dB
 10205cc:	010004c4 	movi	r4,19
 10205d0:	01400684 	movi	r5,26
 10205d4:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10205d8:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10205dc:	e0bffe17 	ldw	r2,-8(fp)
 10205e0:	10000426 	beq	r2,zero,10205f4 <AUDIO_Loopback+0x31c>
        	 bSuccess = aduio_wr_reg(0x18, 0x05);  //Mixer Amplifier Left Volume Control Volume Control = -2.3dB
 10205e4:	01000604 	movi	r4,24
 10205e8:	01400144 	movi	r5,5
 10205ec:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10205f0:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 10205f4:	e0bffe17 	ldw	r2,-8(fp)
 10205f8:	10000426 	beq	r2,zero,102060c <AUDIO_Loopback+0x334>
        	 bSuccess = aduio_wr_reg(0x19, 0x05);  //Mixer Amplifier Right Volume Control Volume Control = -2.3dB
 10205fc:	01000644 	movi	r4,25
 1020600:	01400144 	movi	r5,5
 1020604:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020608:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102060c:	e0bffe17 	ldw	r2,-8(fp)
 1020610:	10000426 	beq	r2,zero,1020624 <AUDIO_Loopback+0x34c>
        	 bSuccess = aduio_wr_reg(0x34, 0x30);  //IN2L is routed to Left MICPGA with 40k resistance
 1020614:	01000d04 	movi	r4,52
 1020618:	01400c04 	movi	r5,48
 102061c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020620:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020624:	e0bffe17 	ldw	r2,-8(fp)
 1020628:	10000426 	beq	r2,zero,102063c <AUDIO_Loopback+0x364>
        	 bSuccess = aduio_wr_reg(0x36, 0x31);  //CM is routed to Left MICPGA via CM2L with 10k resistance
 102062c:	01000d84 	movi	r4,54
 1020630:	01400c44 	movi	r5,49
 1020634:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020638:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 102063c:	e0bffe17 	ldw	r2,-8(fp)
 1020640:	10000426 	beq	r2,zero,1020654 <AUDIO_Loopback+0x37c>
        	 bSuccess = aduio_wr_reg(0x37, 0x30);  //IN2R is routed to Right MICPGA with 40k resistance
 1020644:	01000dc4 	movi	r4,55
 1020648:	01400c04 	movi	r5,48
 102064c:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020650:	e0bffe15 	stw	r2,-8(fp)
         if (bSuccess)
 1020654:	e0bffe17 	ldw	r2,-8(fp)
 1020658:	10000426 	beq	r2,zero,102066c <AUDIO_Loopback+0x394>
        	 bSuccess = aduio_wr_reg(0x39, 0x31);  //CM is routed to Right MICPGA via CM2R with 10k resistance
 102065c:	01000e44 	movi	r4,57
 1020660:	01400c44 	movi	r5,49
 1020664:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020668:	e0bffe15 	stw	r2,-8(fp)
    }
     AUDIO_DEBUG(("[AUDIO] AUDIO_Loopback_Configuration %s\r\n", bSuccess?"success":"fail"));
 102066c:	e0bffe17 	ldw	r2,-8(fp)
 1020670:	10000326 	beq	r2,zero,1020680 <AUDIO_Loopback+0x3a8>
 1020674:	008040f4 	movhi	r2,259
 1020678:	108fb404 	addi	r2,r2,16080
 102067c:	00000206 	br	1020688 <AUDIO_Loopback+0x3b0>
 1020680:	008040f4 	movhi	r2,259
 1020684:	108fb604 	addi	r2,r2,16088
 1020688:	010040f4 	movhi	r4,259
 102068c:	210fb804 	addi	r4,r4,16096
 1020690:	100b883a 	mov	r5,r2
 1020694:	1021a0c0 	call	1021a0c <myprintf>

    return bSuccess;
 1020698:	e0bffe17 	ldw	r2,-8(fp)
 }
 102069c:	e037883a 	mov	sp,fp
 10206a0:	dfc00117 	ldw	ra,4(sp)
 10206a4:	df000017 	ldw	fp,0(sp)
 10206a8:	dec00204 	addi	sp,sp,8
 10206ac:	f800283a 	ret

010206b0 <AUDIO_Beep_Generator>:

bool AUDIO_Beep_Generator(alt_u8 InputSource){
 10206b0:	defffc04 	addi	sp,sp,-16
 10206b4:	dfc00315 	stw	ra,12(sp)
 10206b8:	df000215 	stw	fp,8(sp)
 10206bc:	df000204 	addi	fp,sp,8
 10206c0:	2005883a 	mov	r2,r4
 10206c4:	e0bfff05 	stb	r2,-4(fp)
   bool bSuccess = TRUE;
 10206c8:	00800044 	movi	r2,1
 10206cc:	e0bffe15 	stw	r2,-8(fp)
   if (InputSource ==BEEP ){
 10206d0:	e0bfff03 	ldbu	r2,-4(fp)
 10206d4:	10800058 	cmpnei	r2,r2,1
 10206d8:	1000e11e 	bne	r2,zero,1020a60 <AUDIO_Beep_Generator+0x3b0>
	   	   AUDIO_DEBUG(("[AUDIO] AUDIO_Beep_Configuration...\r\n"));
 10206dc:	010040f4 	movhi	r4,259
 10206e0:	210fc304 	addi	r4,r4,16140
 10206e4:	1021a0c0 	call	1021a0c <myprintf>
	   	   if (bSuccess)
 10206e8:	e0bffe17 	ldw	r2,-8(fp)
 10206ec:	10000426 	beq	r2,zero,1020700 <AUDIO_Beep_Generator+0x50>
	   		   bSuccess = aduio_wr_reg(0x00, 0x00);  // Initialize to Page 0
 10206f0:	0009883a 	mov	r4,zero
 10206f4:	000b883a 	mov	r5,zero
 10206f8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10206fc:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020700:	e0bffe17 	ldw	r2,-8(fp)
 1020704:	10000426 	beq	r2,zero,1020718 <AUDIO_Beep_Generator+0x68>
	   		   bSuccess = aduio_wr_reg(0x01, 0x01);  //software reset
 1020708:	01000044 	movi	r4,1
 102070c:	01400044 	movi	r5,1
 1020710:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020714:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020718:	e0bffe17 	ldw	r2,-8(fp)
 102071c:	10000426 	beq	r2,zero,1020730 <AUDIO_Beep_Generator+0x80>
	   		   bSuccess = aduio_wr_reg(0x04, 0x00);  //MCLK PIN is CODEC_CLKIN
 1020720:	01000104 	movi	r4,4
 1020724:	000b883a 	mov	r5,zero
 1020728:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102072c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020730:	e0bffe17 	ldw	r2,-8(fp)
 1020734:	10000426 	beq	r2,zero,1020748 <AUDIO_Beep_Generator+0x98>
	   		   bSuccess = aduio_wr_reg(0x1B, 0x0D);  //BCLK is output from the device & WCLK is output from the device & DOUT will be high impedance after data has been transferred
 1020738:	010006c4 	movi	r4,27
 102073c:	01400344 	movi	r5,13
 1020740:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020744:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020748:	e0bffe17 	ldw	r2,-8(fp)
 102074c:	10000426 	beq	r2,zero,1020760 <AUDIO_Beep_Generator+0xb0>
	   		   bSuccess = aduio_wr_reg(0x0b, 0x81);  //NDAC divider power up / NDAC=1
 1020750:	010002c4 	movi	r4,11
 1020754:	01402044 	movi	r5,129
 1020758:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102075c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020760:	e0bffe17 	ldw	r2,-8(fp)
 1020764:	10000426 	beq	r2,zero,1020778 <AUDIO_Beep_Generator+0xc8>
	   		   bSuccess = aduio_wr_reg(0x0C, 0x82);  //MDAC divider power up / MDAC=2
 1020768:	01000304 	movi	r4,12
 102076c:	01402084 	movi	r5,130
 1020770:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020774:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020778:	e0bffe17 	ldw	r2,-8(fp)
 102077c:	10000426 	beq	r2,zero,1020790 <AUDIO_Beep_Generator+0xe0>
	   		   bSuccess = aduio_wr_reg(0x0D, 0x00);  //DOSR MSB
 1020780:	01000344 	movi	r4,13
 1020784:	000b883a 	mov	r5,zero
 1020788:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102078c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020790:	e0bffe17 	ldw	r2,-8(fp)
 1020794:	10000426 	beq	r2,zero,10207a8 <AUDIO_Beep_Generator+0xf8>
	   		   bSuccess = aduio_wr_reg(0x0E, 0x80);  //DOSR LSB  / DOSR=128
 1020798:	01000384 	movi	r4,14
 102079c:	01402004 	movi	r5,128
 10207a0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10207a4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10207a8:	e0bffe17 	ldw	r2,-8(fp)
 10207ac:	10000426 	beq	r2,zero,10207c0 <AUDIO_Beep_Generator+0x110>
	   		   bSuccess = aduio_wr_reg(0x1E, 0x90);  //BCLK N divider powered up & BCLK N divider = 128
 10207b0:	01000784 	movi	r4,30
 10207b4:	01402404 	movi	r5,144
 10207b8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10207bc:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10207c0:	e0bffe17 	ldw	r2,-8(fp)
 10207c4:	10000426 	beq	r2,zero,10207d8 <AUDIO_Beep_Generator+0x128>
	   		   bSuccess = aduio_wr_reg(0x3c, 0x19);  //Set the DAC Mode to PRB_P25
 10207c8:	01000f04 	movi	r4,60
 10207cc:	01400644 	movi	r5,25
 10207d0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10207d4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10207d8:	e0bffe17 	ldw	r2,-8(fp)
 10207dc:	10000426 	beq	r2,zero,10207f0 <AUDIO_Beep_Generator+0x140>
	   		   bSuccess = aduio_wr_reg(0x3f, 0xd4);  //Power up the Left and Right DAC
 10207e0:	01000fc4 	movi	r4,63
 10207e4:	01403504 	movi	r5,212
 10207e8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10207ec:	e0bffe15 	stw	r2,-8(fp)
    //****************************************************************************
	   	   if (bSuccess)
 10207f0:	e0bffe17 	ldw	r2,-8(fp)
 10207f4:	10000426 	beq	r2,zero,1020808 <AUDIO_Beep_Generator+0x158>
	   		   bSuccess = aduio_wr_reg(0x00, 0x01);  //page1
 10207f8:	0009883a 	mov	r4,zero
 10207fc:	01400044 	movi	r5,1
 1020800:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020804:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020808:	e0bffe17 	ldw	r2,-8(fp)
 102080c:	10000426 	beq	r2,zero,1020820 <AUDIO_Beep_Generator+0x170>
	   		   bSuccess = aduio_wr_reg(0x09, 0x0f);  //Power up LOL and LOR drivers
 1020810:	01000244 	movi	r4,9
 1020814:	014003c4 	movi	r5,15
 1020818:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102081c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020820:	e0bffe17 	ldw	r2,-8(fp)
 1020824:	10000426 	beq	r2,zero,1020838 <AUDIO_Beep_Generator+0x188>
	   		   bSuccess = aduio_wr_reg(0x0e, 0x08);  //Left DAC----LOL
 1020828:	01000384 	movi	r4,14
 102082c:	01400204 	movi	r5,8
 1020830:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020834:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020838:	e0bffe17 	ldw	r2,-8(fp)
 102083c:	10000426 	beq	r2,zero,1020850 <AUDIO_Beep_Generator+0x1a0>
	   		   bSuccess = aduio_wr_reg(0x0f, 0x08);  //Right DAC---LOR
 1020840:	010003c4 	movi	r4,15
 1020844:	01400204 	movi	r5,8
 1020848:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102084c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020850:	e0bffe17 	ldw	r2,-8(fp)
 1020854:	10000426 	beq	r2,zero,1020868 <AUDIO_Beep_Generator+0x1b8>
	   		   bSuccess = aduio_wr_reg(0x12, 0x08);  //LOL driver gain is 8dB
 1020858:	01000484 	movi	r4,18
 102085c:	01400204 	movi	r5,8
 1020860:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020864:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020868:	e0bffe17 	ldw	r2,-8(fp)
 102086c:	10000426 	beq	r2,zero,1020880 <AUDIO_Beep_Generator+0x1d0>
	   		   bSuccess = aduio_wr_reg(0x13, 0x08);  //LOR driver gain is 8dB
 1020870:	010004c4 	movi	r4,19
 1020874:	01400204 	movi	r5,8
 1020878:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102087c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020880:	e0bffe17 	ldw	r2,-8(fp)
 1020884:	10000426 	beq	r2,zero,1020898 <AUDIO_Beep_Generator+0x1e8>
	   		   bSuccess = aduio_wr_reg(0x01, 0x08);  //Disabled weak connection of AVDD with DVDD
 1020888:	01000044 	movi	r4,1
 102088c:	01400204 	movi	r5,8
 1020890:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020894:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020898:	e0bffe17 	ldw	r2,-8(fp)
 102089c:	10000426 	beq	r2,zero,10208b0 <AUDIO_Beep_Generator+0x200>
	   		   bSuccess = aduio_wr_reg(0x02, 0x01);  //Eabled Master Analog Power Control
 10208a0:	01000084 	movi	r4,2
 10208a4:	01400044 	movi	r5,1
 10208a8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10208ac:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10208b0:	e0bffe17 	ldw	r2,-8(fp)
 10208b4:	10000426 	beq	r2,zero,10208c8 <AUDIO_Beep_Generator+0x218>
	   		   bSuccess = aduio_wr_reg(0x7b, 0x01);   //Set the REF charding time to 40ms
 10208b8:	01001ec4 	movi	r4,123
 10208bc:	01400044 	movi	r5,1
 10208c0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10208c4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10208c8:	e0bffe17 	ldw	r2,-8(fp)
 10208cc:	10000426 	beq	r2,zero,10208e0 <AUDIO_Beep_Generator+0x230>
	   		   bSuccess = aduio_wr_reg(0x0a, 0x40);  //Full Chip Common Mode is 0.75V
 10208d0:	01000284 	movi	r4,10
 10208d4:	01401004 	movi	r5,64
 10208d8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10208dc:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10208e0:	e0bffe17 	ldw	r2,-8(fp)
 10208e4:	10000426 	beq	r2,zero,10208f8 <AUDIO_Beep_Generator+0x248>
	   		   bSuccess = aduio_wr_reg(0x00, 0x00);  //page0
 10208e8:	0009883a 	mov	r4,zero
 10208ec:	000b883a 	mov	r5,zero
 10208f0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10208f4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10208f8:	e0bffe17 	ldw	r2,-8(fp)
 10208fc:	10000426 	beq	r2,zero,1020910 <AUDIO_Beep_Generator+0x260>
	   		   bSuccess = aduio_wr_reg(0x40, 0x00);  //Unmute the DAC digital volume control
 1020900:	01001004 	movi	r4,64
 1020904:	000b883a 	mov	r5,zero
 1020908:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102090c:	e0bffe15 	stw	r2,-8(fp)
	   	   //DRC setting
	   	   if (bSuccess)
 1020910:	e0bffe17 	ldw	r2,-8(fp)
 1020914:	10000426 	beq	r2,zero,1020928 <AUDIO_Beep_Generator+0x278>
	   		   bSuccess = aduio_wr_reg(0x41, 0x00);  //Left DAC volume control  0.0db
 1020918:	01001044 	movi	r4,65
 102091c:	000b883a 	mov	r5,zero
 1020920:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020924:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020928:	e0bffe17 	ldw	r2,-8(fp)
 102092c:	10000426 	beq	r2,zero,1020940 <AUDIO_Beep_Generator+0x290>
	   		   bSuccess = aduio_wr_reg(0x42, 0x00);  //Right DAC volume control  0.0db
 1020930:	01001084 	movi	r4,66
 1020934:	000b883a 	mov	r5,zero
 1020938:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102093c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020940:	e0bffe17 	ldw	r2,-8(fp)
 1020944:	10000426 	beq	r2,zero,1020958 <AUDIO_Beep_Generator+0x2a8>
	   		   bSuccess = aduio_wr_reg(0x44, 0x7f);  //Enable DRC
 1020948:	01001104 	movi	r4,68
 102094c:	01401fc4 	movi	r5,127
 1020950:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020954:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020958:	e0bffe17 	ldw	r2,-8(fp)
 102095c:	10000426 	beq	r2,zero,1020970 <AUDIO_Beep_Generator+0x2c0>
	   		   bSuccess = aduio_wr_reg(0x45, 0x00);  //DRC Hold Disabled
 1020960:	01001144 	movi	r4,69
 1020964:	000b883a 	mov	r5,zero
 1020968:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102096c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020970:	e0bffe17 	ldw	r2,-8(fp)
 1020974:	10000426 	beq	r2,zero,1020988 <AUDIO_Beep_Generator+0x2d8>
	   		   bSuccess = aduio_wr_reg(0x46, 0xe2);  //
 1020978:	01001184 	movi	r4,70
 102097c:	01403884 	movi	r5,226
 1020980:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020984:	e0bffe15 	stw	r2,-8(fp)
	   	   //beep setting   ~2KHz~
	   	   if (bSuccess)
 1020988:	e0bffe17 	ldw	r2,-8(fp)
 102098c:	10000426 	beq	r2,zero,10209a0 <AUDIO_Beep_Generator+0x2f0>
	   		   bSuccess = aduio_wr_reg(0x49, 0xff);  //beep reg3
 1020990:	01001244 	movi	r4,73
 1020994:	01403fc4 	movi	r5,255
 1020998:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 102099c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10209a0:	e0bffe17 	ldw	r2,-8(fp)
 10209a4:	10000426 	beq	r2,zero,10209b8 <AUDIO_Beep_Generator+0x308>
	   		   bSuccess = aduio_wr_reg(0x4a, 0xff);  //beep reg4
 10209a8:	01001284 	movi	r4,74
 10209ac:	01403fc4 	movi	r5,255
 10209b0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10209b4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10209b8:	e0bffe17 	ldw	r2,-8(fp)
 10209bc:	10000426 	beq	r2,zero,10209d0 <AUDIO_Beep_Generator+0x320>
	   		   bSuccess = aduio_wr_reg(0x4b, 0xff);  //beep reg5
 10209c0:	010012c4 	movi	r4,75
 10209c4:	01403fc4 	movi	r5,255
 10209c8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10209cc:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10209d0:	e0bffe17 	ldw	r2,-8(fp)
 10209d4:	10000426 	beq	r2,zero,10209e8 <AUDIO_Beep_Generator+0x338>
	   		   bSuccess = aduio_wr_reg(0x4c, 0x21);  //beep reg6
 10209d8:	01001304 	movi	r4,76
 10209dc:	01400844 	movi	r5,33
 10209e0:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10209e4:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 10209e8:	e0bffe17 	ldw	r2,-8(fp)
 10209ec:	10000426 	beq	r2,zero,1020a00 <AUDIO_Beep_Generator+0x350>
	   		   bSuccess = aduio_wr_reg(0x4d, 0x21);  //beep reg7
 10209f0:	01001344 	movi	r4,77
 10209f4:	01400844 	movi	r5,33
 10209f8:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 10209fc:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020a00:	e0bffe17 	ldw	r2,-8(fp)
 1020a04:	10000426 	beq	r2,zero,1020a18 <AUDIO_Beep_Generator+0x368>
	   		   bSuccess = aduio_wr_reg(0x4e, 0x7b);  //beep reg8
 1020a08:	01001384 	movi	r4,78
 1020a0c:	01401ec4 	movi	r5,123
 1020a10:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020a14:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020a18:	e0bffe17 	ldw	r2,-8(fp)
 1020a1c:	10000426 	beq	r2,zero,1020a30 <AUDIO_Beep_Generator+0x380>
	   		   bSuccess = aduio_wr_reg(0x4f, 0xa3);  //beep reg9
 1020a20:	010013c4 	movi	r4,79
 1020a24:	014028c4 	movi	r5,163
 1020a28:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020a2c:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020a30:	e0bffe17 	ldw	r2,-8(fp)
 1020a34:	10000426 	beq	r2,zero,1020a48 <AUDIO_Beep_Generator+0x398>
	   		   bSuccess = aduio_wr_reg(0x48, 0x04);  //beep reg2
 1020a38:	01001204 	movi	r4,72
 1020a3c:	01400104 	movi	r5,4
 1020a40:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020a44:	e0bffe15 	stw	r2,-8(fp)
	   	   if (bSuccess)
 1020a48:	e0bffe17 	ldw	r2,-8(fp)
 1020a4c:	10000426 	beq	r2,zero,1020a60 <AUDIO_Beep_Generator+0x3b0>
	   		   bSuccess = aduio_wr_reg(0x47, 0x84);  //enable, beep generator
 1020a50:	010011c4 	movi	r4,71
 1020a54:	01402104 	movi	r5,132
 1020a58:	1020aa40 	call	1020aa4 <aduio_wr_reg>
 1020a5c:	e0bffe15 	stw	r2,-8(fp)
   }

    AUDIO_DEBUG(("[AUDIO] AUDIO_Beep_Configuration %s\r\n", bSuccess?"success":"fail"));
 1020a60:	e0bffe17 	ldw	r2,-8(fp)
 1020a64:	10000326 	beq	r2,zero,1020a74 <AUDIO_Beep_Generator+0x3c4>
 1020a68:	008040f4 	movhi	r2,259
 1020a6c:	108fb404 	addi	r2,r2,16080
 1020a70:	00000206 	br	1020a7c <AUDIO_Beep_Generator+0x3cc>
 1020a74:	008040f4 	movhi	r2,259
 1020a78:	108fb604 	addi	r2,r2,16088
 1020a7c:	010040f4 	movhi	r4,259
 1020a80:	210fcd04 	addi	r4,r4,16180
 1020a84:	100b883a 	mov	r5,r2
 1020a88:	1021a0c0 	call	1021a0c <myprintf>

    return bSuccess;
 1020a8c:	e0bffe17 	ldw	r2,-8(fp)
}
 1020a90:	e037883a 	mov	sp,fp
 1020a94:	dfc00117 	ldw	ra,4(sp)
 1020a98:	df000017 	ldw	fp,0(sp)
 1020a9c:	dec00204 	addi	sp,sp,8
 1020aa0:	f800283a 	ret

01020aa4 <aduio_wr_reg>:


bool aduio_wr_reg(alt_u8 reg_index, alt_u8 data8){
 1020aa4:	defff904 	addi	sp,sp,-28
 1020aa8:	dfc00615 	stw	ra,24(sp)
 1020aac:	df000515 	stw	fp,20(sp)
 1020ab0:	df000504 	addi	fp,sp,20
 1020ab4:	2007883a 	mov	r3,r4
 1020ab8:	2805883a 	mov	r2,r5
 1020abc:	e0fffe05 	stb	r3,-8(fp)
 1020ac0:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = TRUE;
 1020ac4:	00800044 	movi	r2,1
 1020ac8:	e0bffc15 	stw	r2,-16(fp)

	alt_u8 dataR;

    if (bSuccess)
 1020acc:	e0bffc17 	ldw	r2,-16(fp)
 1020ad0:	10000a26 	beq	r2,zero,1020afc <aduio_wr_reg+0x58>
        bSuccess =OC_I2C_Write(AUDIO_I2C_BASE, DEVICE_I2C_ADDR, reg_index, &data8, sizeof(data8));
 1020ad4:	e1bffe03 	ldbu	r6,-8(fp)
 1020ad8:	e0ffff04 	addi	r3,fp,-4
 1020adc:	00800044 	movi	r2,1
 1020ae0:	d8800015 	stw	r2,0(sp)
 1020ae4:	01004134 	movhi	r4,260
 1020ae8:	21040004 	addi	r4,r4,4096
 1020aec:	01400c04 	movi	r5,48
 1020af0:	180f883a 	mov	r7,r3
 1020af4:	1020f880 	call	1020f88 <OC_I2C_Write>
 1020af8:	e0bffc15 	stw	r2,-16(fp)

    usleep(50*1000);
 1020afc:	0130d414 	movui	r4,50000
 1020b00:	1031d080 	call	1031d08 <usleep>

    if (bSuccess)
 1020b04:	e0bffc17 	ldw	r2,-16(fp)
 1020b08:	10000a26 	beq	r2,zero,1020b34 <aduio_wr_reg+0x90>
    	bSuccess = OC_I2C_Read(AUDIO_I2C_BASE, DEVICE_I2C_ADDR,reg_index, &dataR, sizeof(dataR));
 1020b0c:	e1bffe03 	ldbu	r6,-8(fp)
 1020b10:	e0fffd04 	addi	r3,fp,-12
 1020b14:	00800044 	movi	r2,1
 1020b18:	d8800015 	stw	r2,0(sp)
 1020b1c:	01004134 	movhi	r4,260
 1020b20:	21040004 	addi	r4,r4,4096
 1020b24:	01400c04 	movi	r5,48
 1020b28:	180f883a 	mov	r7,r3
 1020b2c:	10211e80 	call	10211e8 <OC_I2C_Read>
 1020b30:	e0bffc15 	stw	r2,-16(fp)

	if (!bSuccess){
 1020b34:	e0bffc17 	ldw	r2,-16(fp)
 1020b38:	1000041e 	bne	r2,zero,1020b4c <aduio_wr_reg+0xa8>
				printf("AUDIO: failed to read page register\r\n");
 1020b3c:	010040f4 	movhi	r4,259
 1020b40:	210fd704 	addi	r4,r4,16220
 1020b44:	1021fe40 	call	1021fe4 <puts>
 1020b48:	00001406 	br	1020b9c <aduio_wr_reg+0xf8>
	}
	else{
		      if ((reg_index!=0x01)&&(reg_index!=0x02)&&(dataR !=data8))
 1020b4c:	e0bffe03 	ldbu	r2,-8(fp)
 1020b50:	10800060 	cmpeqi	r2,r2,1
 1020b54:	1000111e 	bne	r2,zero,1020b9c <aduio_wr_reg+0xf8>
 1020b58:	e0bffe03 	ldbu	r2,-8(fp)
 1020b5c:	108000a0 	cmpeqi	r2,r2,2
 1020b60:	10000e1e 	bne	r2,zero,1020b9c <aduio_wr_reg+0xf8>
 1020b64:	e0fffd03 	ldbu	r3,-12(fp)
 1020b68:	e0bfff03 	ldbu	r2,-4(fp)
 1020b6c:	18c03fcc 	andi	r3,r3,255
 1020b70:	10803fcc 	andi	r2,r2,255
 1020b74:	18800926 	beq	r3,r2,1020b9c <aduio_wr_reg+0xf8>
		      {
    	        bSuccess = FALSE;
 1020b78:	e03ffc15 	stw	zero,-16(fp)
    	        AUDIO_DEBUG(("[AUDIO] read audio reg[%02d] = %04Xh\r\n", reg_index, dataR ));
 1020b7c:	e0fffe03 	ldbu	r3,-8(fp)
 1020b80:	e0bffd03 	ldbu	r2,-12(fp)
 1020b84:	10803fcc 	andi	r2,r2,255
 1020b88:	010040f4 	movhi	r4,259
 1020b8c:	210fe104 	addi	r4,r4,16260
 1020b90:	180b883a 	mov	r5,r3
 1020b94:	100d883a 	mov	r6,r2
 1020b98:	1021a0c0 	call	1021a0c <myprintf>
              }
	     }

    return bSuccess;
 1020b9c:	e0bffc17 	ldw	r2,-16(fp)

}
 1020ba0:	e037883a 	mov	sp,fp
 1020ba4:	dfc00117 	ldw	ra,4(sp)
 1020ba8:	df000017 	ldw	fp,0(sp)
 1020bac:	dec00204 	addi	sp,sp,8
 1020bb0:	f800283a 	ret

01020bb4 <Write32_Data>:
#define SLEEP_TIME 15  //us
#define ACK_SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 1020bb4:	defffb04 	addi	sp,sp,-20
 1020bb8:	df000415 	stw	fp,16(sp)
 1020bbc:	df000404 	addi	fp,sp,16
 1020bc0:	e13ffd15 	stw	r4,-12(fp)
 1020bc4:	e17ffe15 	stw	r5,-8(fp)
 1020bc8:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 1020bcc:	e0bffe17 	ldw	r2,-8(fp)
 1020bd0:	1085883a 	add	r2,r2,r2
 1020bd4:	1085883a 	add	r2,r2,r2
 1020bd8:	1007883a 	mov	r3,r2
 1020bdc:	e0bffd17 	ldw	r2,-12(fp)
 1020be0:	1885883a 	add	r2,r3,r2
 1020be4:	1007883a 	mov	r3,r2
 1020be8:	e0bfff17 	ldw	r2,-4(fp)
 1020bec:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 1020bf0:	00800044 	movi	r2,1
 1020bf4:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 1020bf8:	e0bffc17 	ldw	r2,-16(fp)
}
 1020bfc:	e037883a 	mov	sp,fp
 1020c00:	df000017 	ldw	fp,0(sp)
 1020c04:	dec00104 	addi	sp,sp,4
 1020c08:	f800283a 	ret

01020c0c <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 1020c0c:	defffb04 	addi	sp,sp,-20
 1020c10:	df000415 	stw	fp,16(sp)
 1020c14:	df000404 	addi	fp,sp,16
 1020c18:	e13ffd15 	stw	r4,-12(fp)
 1020c1c:	e17ffe15 	stw	r5,-8(fp)
 1020c20:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 1020c24:	e0bffe17 	ldw	r2,-8(fp)
 1020c28:	1085883a 	add	r2,r2,r2
 1020c2c:	1085883a 	add	r2,r2,r2
 1020c30:	1007883a 	mov	r3,r2
 1020c34:	e0bffd17 	ldw	r2,-12(fp)
 1020c38:	1885883a 	add	r2,r3,r2
 1020c3c:	10c00037 	ldwio	r3,0(r2)
 1020c40:	e0bfff17 	ldw	r2,-4(fp)
 1020c44:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 1020c48:	00800044 	movi	r2,1
 1020c4c:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 1020c50:	e0bffc17 	ldw	r2,-16(fp)
}
 1020c54:	e037883a 	mov	sp,fp
 1020c58:	df000017 	ldw	fp,0(sp)
 1020c5c:	dec00104 	addi	sp,sp,4
 1020c60:	f800283a 	ret

01020c64 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
 1020c64:	defffa04 	addi	sp,sp,-24
 1020c68:	dfc00515 	stw	ra,20(sp)
 1020c6c:	df000415 	stw	fp,16(sp)
 1020c70:	df000404 	addi	fp,sp,16
 1020c74:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 1020c78:	0080bef4 	movhi	r2,763
 1020c7c:	10bc2004 	addi	r2,r2,-3968
 1020c80:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 1020c84:	008001b4 	movhi	r2,6
 1020c88:	1086a004 	addi	r2,r2,6784
 1020c8c:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 1020c90:	e13fff17 	ldw	r4,-4(fp)
 1020c94:	e17ffc17 	ldw	r5,-16(fp)
 1020c98:	e1bffd17 	ldw	r6,-12(fp)
 1020c9c:	1020cbc0 	call	1020cbc <oc_i2c_init_ex>
 1020ca0:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
 1020ca4:	e0bffe17 	ldw	r2,-8(fp)
}
 1020ca8:	e037883a 	mov	sp,fp
 1020cac:	dfc00117 	ldw	ra,4(sp)
 1020cb0:	df000017 	ldw	fp,0(sp)
 1020cb4:	dec00204 	addi	sp,sp,8
 1020cb8:	f800283a 	ret

01020cbc <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 1020cbc:	defff604 	addi	sp,sp,-40
 1020cc0:	dfc00915 	stw	ra,36(sp)
 1020cc4:	df000815 	stw	fp,32(sp)
 1020cc8:	df000804 	addi	fp,sp,32
 1020ccc:	e13ffd15 	stw	r4,-12(fp)
 1020cd0:	e17ffe15 	stw	r5,-8(fp)
 1020cd4:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 1020cd8:	00800044 	movi	r2,1
 1020cdc:	e0bff815 	stw	r2,-32(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 1020ce0:	00bfe004 	movi	r2,-128
 1020ce4:	e0bff905 	stb	r2,-28(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 1020ce8:	e0bfff17 	ldw	r2,-4(fp)
 1020cec:	10800164 	muli	r2,r2,5
 1020cf0:	e13ffe17 	ldw	r4,-8(fp)
 1020cf4:	100b883a 	mov	r5,r2
 1020cf8:	1021e040 	call	1021e04 <__divsi3>
 1020cfc:	10bfffc4 	addi	r2,r2,-1
 1020d00:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 1020d04:	e0bffa17 	ldw	r2,-24(fp)
 1020d08:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 1020d0c:	e0bffa17 	ldw	r2,-24(fp)
 1020d10:	1005d23a 	srai	r2,r2,8
 1020d14:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 1020d18:	e0bffd17 	ldw	r2,-12(fp)
 1020d1c:	e0fffb03 	ldbu	r3,-20(fp)
 1020d20:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 1020d24:	e0bffd17 	ldw	r2,-12(fp)
 1020d28:	10800104 	addi	r2,r2,4
 1020d2c:	1007883a 	mov	r3,r2
 1020d30:	e0bffb43 	ldbu	r2,-19(fp)
 1020d34:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 1020d38:	e0bffd17 	ldw	r2,-12(fp)
 1020d3c:	10800204 	addi	r2,r2,8
 1020d40:	1007883a 	mov	r3,r2
 1020d44:	e0bff903 	ldbu	r2,-28(fp)
 1020d48:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 1020d4c:	e0bff817 	ldw	r2,-32(fp)
 1020d50:	10000826 	beq	r2,zero,1020d74 <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
 1020d54:	e0bffd17 	ldw	r2,-12(fp)
 1020d58:	10800037 	ldwio	r2,0(r2)
 1020d5c:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 1020d60:	e0bffc17 	ldw	r2,-16(fp)
 1020d64:	10c03fcc 	andi	r3,r2,255
 1020d68:	e0bffb03 	ldbu	r2,-20(fp)
 1020d6c:	18800126 	beq	r3,r2,1020d74 <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
 1020d70:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 1020d74:	e0bff817 	ldw	r2,-32(fp)
 1020d78:	10000926 	beq	r2,zero,1020da0 <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
 1020d7c:	e0bffd17 	ldw	r2,-12(fp)
 1020d80:	10800104 	addi	r2,r2,4
 1020d84:	10800037 	ldwio	r2,0(r2)
 1020d88:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 1020d8c:	e0bffc17 	ldw	r2,-16(fp)
 1020d90:	10c03fcc 	andi	r3,r2,255
 1020d94:	e0bffb43 	ldbu	r2,-19(fp)
 1020d98:	18800126 	beq	r3,r2,1020da0 <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
 1020d9c:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check control
    if (bSuccess){
 1020da0:	e0bff817 	ldw	r2,-32(fp)
 1020da4:	10000926 	beq	r2,zero,1020dcc <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
 1020da8:	e0bffd17 	ldw	r2,-12(fp)
 1020dac:	10800204 	addi	r2,r2,8
 1020db0:	10800037 	ldwio	r2,0(r2)
 1020db4:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 1020db8:	e0bffc17 	ldw	r2,-16(fp)
 1020dbc:	10c03fcc 	andi	r3,r2,255
 1020dc0:	e0bff903 	ldbu	r2,-28(fp)
 1020dc4:	18800126 	beq	r3,r2,1020dcc <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
 1020dc8:	e03ff815 	stw	zero,-32(fp)
        }
    }

   if (bSuccess)
 1020dcc:	e0bff817 	ldw	r2,-32(fp)
 1020dd0:	10000426 	beq	r2,zero,1020de4 <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
 1020dd4:	010040f4 	movhi	r4,259
 1020dd8:	210feb04 	addi	r4,r4,16300
 1020ddc:	1021fe40 	call	1021fe4 <puts>
 1020de0:	00000306 	br	1020df0 <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 1020de4:	010040f4 	movhi	r4,259
 1020de8:	210ff104 	addi	r4,r4,16324
 1020dec:	1021fe40 	call	1021fe4 <puts>

   return bSuccess;
 1020df0:	e0bff817 	ldw	r2,-32(fp)

}
 1020df4:	e037883a 	mov	sp,fp
 1020df8:	dfc00117 	ldw	ra,4(sp)
 1020dfc:	df000017 	ldw	fp,0(sp)
 1020e00:	dec00204 	addi	sp,sp,8
 1020e04:	f800283a 	ret

01020e08 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 1020e08:	defffa04 	addi	sp,sp,-24
 1020e0c:	dfc00515 	stw	ra,20(sp)
 1020e10:	df000415 	stw	fp,16(sp)
 1020e14:	df000404 	addi	fp,sp,16
 1020e18:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 1020e1c:	00800044 	movi	r2,1
 1020e20:	e0bffc15 	stw	r2,-16(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 1020e24:	e03ffd05 	stb	zero,-12(fp)

    IOWR( i2c_base, 2, ControlValue);
 1020e28:	e0bfff17 	ldw	r2,-4(fp)
 1020e2c:	10800204 	addi	r2,r2,8
 1020e30:	1007883a 	mov	r3,r2
 1020e34:	e0bffd03 	ldbu	r2,-12(fp)
 1020e38:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
 1020e3c:	e0bfff17 	ldw	r2,-4(fp)
 1020e40:	10800204 	addi	r2,r2,8
 1020e44:	10800037 	ldwio	r2,0(r2)
 1020e48:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 1020e4c:	e0bffe17 	ldw	r2,-8(fp)
 1020e50:	10c03fcc 	andi	r3,r2,255
 1020e54:	e0bffd03 	ldbu	r2,-12(fp)
 1020e58:	18800126 	beq	r3,r2,1020e60 <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
 1020e5c:	e03ffc15 	stw	zero,-16(fp)
    }

   if (bSuccess)
 1020e60:	e0bffc17 	ldw	r2,-16(fp)
 1020e64:	10000426 	beq	r2,zero,1020e78 <oc_i2c_uninit+0x70>
       printf("\I2C core  is disabled! \r\n");
 1020e68:	010040f4 	movhi	r4,259
 1020e6c:	210ffc04 	addi	r4,r4,16368
 1020e70:	1021fe40 	call	1021fe4 <puts>
 1020e74:	00000306 	br	1020e84 <oc_i2c_uninit+0x7c>
   else
       printf("\I2C core is failed to disable! \r\n");
 1020e78:	010040f4 	movhi	r4,259
 1020e7c:	21100304 	addi	r4,r4,16396
 1020e80:	1021fe40 	call	1021fe4 <puts>

   return bSuccess;
 1020e84:	e0bffc17 	ldw	r2,-16(fp)

}
 1020e88:	e037883a 	mov	sp,fp
 1020e8c:	dfc00117 	ldw	ra,4(sp)
 1020e90:	df000017 	ldw	fp,0(sp)
 1020e94:	dec00204 	addi	sp,sp,8
 1020e98:	f800283a 	ret

01020e9c <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
 1020e9c:	defffb04 	addi	sp,sp,-20
 1020ea0:	dfc00415 	stw	ra,16(sp)
 1020ea4:	df000315 	stw	fp,12(sp)
 1020ea8:	df000304 	addi	fp,sp,12
 1020eac:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 1020eb0:	00800044 	movi	r2,1
 1020eb4:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 1020eb8:	010003c4 	movi	r4,15
 1020ebc:	1031d080 	call	1031d08 <usleep>
    read_data =IORD(i2c_base, 4);
 1020ec0:	e0bfff17 	ldw	r2,-4(fp)
 1020ec4:	10800404 	addi	r2,r2,16
 1020ec8:	10800037 	ldwio	r2,0(r2)
 1020ecc:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 1020ed0:	e0bffe17 	ldw	r2,-8(fp)
 1020ed4:	1080008c 	andi	r2,r2,2
 1020ed8:	10000126 	beq	r2,zero,1020ee0 <ACK_single_check+0x44>
            bSuccess = FALSE;
 1020edc:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
 1020ee0:	e0bffd17 	ldw	r2,-12(fp)
 1020ee4:	10000a26 	beq	r2,zero,1020f10 <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
 1020ee8:	010003c4 	movi	r4,15
 1020eec:	1031d080 	call	1031d08 <usleep>
            read_data =IORD(i2c_base, 4);
 1020ef0:	e0bfff17 	ldw	r2,-4(fp)
 1020ef4:	10800404 	addi	r2,r2,16
 1020ef8:	10800037 	ldwio	r2,0(r2)
 1020efc:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 1020f00:	e0bffe17 	ldw	r2,-8(fp)
 1020f04:	1080200c 	andi	r2,r2,128
 1020f08:	10000126 	beq	r2,zero,1020f10 <ACK_single_check+0x74>
                    bSuccess = FALSE;
 1020f0c:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
 1020f10:	e0bffd17 	ldw	r2,-12(fp)
}
 1020f14:	e037883a 	mov	sp,fp
 1020f18:	dfc00117 	ldw	ra,4(sp)
 1020f1c:	df000017 	ldw	fp,0(sp)
 1020f20:	dec00204 	addi	sp,sp,8
 1020f24:	f800283a 	ret

01020f28 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 1020f28:	defffb04 	addi	sp,sp,-20
 1020f2c:	dfc00415 	stw	ra,16(sp)
 1020f30:	df000315 	stw	fp,12(sp)
 1020f34:	df000304 	addi	fp,sp,12
 1020f38:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 1020f3c:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
 1020f40:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 1020f44:	00000306 	br	1020f54 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 1020f48:	e13fff17 	ldw	r4,-4(fp)
 1020f4c:	1020e9c0 	call	1020e9c <ACK_single_check>
 1020f50:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 1020f54:	e0bffd17 	ldw	r2,-12(fp)
 1020f58:	1000051e 	bne	r2,zero,1020f70 <ACK_check+0x48>
 1020f5c:	e0bffe17 	ldw	r2,-8(fp)
 1020f60:	10c00044 	addi	r3,r2,1
 1020f64:	e0fffe15 	stw	r3,-8(fp)
 1020f68:	10800290 	cmplti	r2,r2,10
 1020f6c:	103ff61e 	bne	r2,zero,1020f48 <_gp+0xfffe2c64>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 1020f70:	e0bffd17 	ldw	r2,-12(fp)
}
 1020f74:	e037883a 	mov	sp,fp
 1020f78:	dfc00117 	ldw	ra,4(sp)
 1020f7c:	df000017 	ldw	fp,0(sp)
 1020f80:	dec00204 	addi	sp,sp,8
 1020f84:	f800283a 	ret

01020f88 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 1020f88:	defff904 	addi	sp,sp,-28
 1020f8c:	dfc00615 	stw	ra,24(sp)
 1020f90:	df000515 	stw	fp,20(sp)
 1020f94:	df000504 	addi	fp,sp,20
 1020f98:	e13ffc15 	stw	r4,-16(fp)
 1020f9c:	2807883a 	mov	r3,r5
 1020fa0:	3005883a 	mov	r2,r6
 1020fa4:	e1ffff15 	stw	r7,-4(fp)
 1020fa8:	e0fffd05 	stb	r3,-12(fp)
 1020fac:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 1020fb0:	e0bffd03 	ldbu	r2,-12(fp)
 1020fb4:	e13ffc17 	ldw	r4,-16(fp)
 1020fb8:	014000c4 	movi	r5,3
 1020fbc:	100d883a 	mov	r6,r2
 1020fc0:	1020bb40 	call	1020bb4 <Write32_Data>
 1020fc4:	1000051e 	bne	r2,zero,1020fdc <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
 1020fc8:	010040f4 	movhi	r4,259
 1020fcc:	21100c04 	addi	r4,r4,16432
 1020fd0:	1021fe40 	call	1021fe4 <puts>
       return FALSE;
 1020fd4:	0005883a 	mov	r2,zero
 1020fd8:	00006506 	br	1021170 <OC_I2C_Write+0x1e8>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 1020fdc:	e13ffc17 	ldw	r4,-16(fp)
 1020fe0:	01400104 	movi	r5,4
 1020fe4:	01802404 	movi	r6,144
 1020fe8:	1020bb40 	call	1020bb4 <Write32_Data>
 1020fec:	1000051e 	bne	r2,zero,1021004 <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
 1020ff0:	010040f4 	movhi	r4,259
 1020ff4:	21101204 	addi	r4,r4,16456
 1020ff8:	1021fe40 	call	1021fe4 <puts>
       return FALSE;
 1020ffc:	0005883a 	mov	r2,zero
 1021000:	00005b06 	br	1021170 <OC_I2C_Write+0x1e8>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 1021004:	e13ffc17 	ldw	r4,-16(fp)
 1021008:	1020f280 	call	1020f28 <ACK_check>
 102100c:	1000051e 	bne	r2,zero,1021024 <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
 1021010:	010040f4 	movhi	r4,259
 1021014:	21101804 	addi	r4,r4,16480
 1021018:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 102101c:	0005883a 	mov	r2,zero
 1021020:	00005306 	br	1021170 <OC_I2C_Write+0x1e8>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 1021024:	e0bffe03 	ldbu	r2,-8(fp)
 1021028:	e13ffc17 	ldw	r4,-16(fp)
 102102c:	014000c4 	movi	r5,3
 1021030:	100d883a 	mov	r6,r2
 1021034:	1020bb40 	call	1020bb4 <Write32_Data>
 1021038:	1000051e 	bne	r2,zero,1021050 <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
 102103c:	010040f4 	movhi	r4,259
 1021040:	21101e04 	addi	r4,r4,16504
 1021044:	1021fe40 	call	1021fe4 <puts>
       return FALSE;
 1021048:	0005883a 	mov	r2,zero
 102104c:	00004806 	br	1021170 <OC_I2C_Write+0x1e8>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 1021050:	e13ffc17 	ldw	r4,-16(fp)
 1021054:	01400104 	movi	r5,4
 1021058:	01800404 	movi	r6,16
 102105c:	1020bb40 	call	1020bb4 <Write32_Data>
 1021060:	1000051e 	bne	r2,zero,1021078 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
 1021064:	010040f4 	movhi	r4,259
 1021068:	21102404 	addi	r4,r4,16528
 102106c:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 1021070:	0005883a 	mov	r2,zero
 1021074:	00003e06 	br	1021170 <OC_I2C_Write+0x1e8>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 1021078:	e13ffc17 	ldw	r4,-16(fp)
 102107c:	1020f280 	call	1020f28 <ACK_check>
 1021080:	1000051e 	bne	r2,zero,1021098 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
 1021084:	010040f4 	movhi	r4,259
 1021088:	21102a04 	addi	r4,r4,16552
 102108c:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 1021090:	0005883a 	mov	r2,zero
 1021094:	00003606 	br	1021170 <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1021098:	e03ffb15 	stw	zero,-20(fp)
 102109c:	00002406 	br	1021130 <OC_I2C_Write+0x1a8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 10210a0:	e0bffb17 	ldw	r2,-20(fp)
 10210a4:	e0ffff17 	ldw	r3,-4(fp)
 10210a8:	1885883a 	add	r2,r3,r2
 10210ac:	10800003 	ldbu	r2,0(r2)
 10210b0:	10803fcc 	andi	r2,r2,255
 10210b4:	e13ffc17 	ldw	r4,-16(fp)
 10210b8:	014000c4 	movi	r5,3
 10210bc:	100d883a 	mov	r6,r2
 10210c0:	1020bb40 	call	1020bb4 <Write32_Data>
 10210c4:	1000051e 	bne	r2,zero,10210dc <OC_I2C_Write+0x154>
              printf("OC_I2C_Write error[6]\r\n");
 10210c8:	010040f4 	movhi	r4,259
 10210cc:	21103004 	addi	r4,r4,16576
 10210d0:	1021fe40 	call	1021fe4 <puts>
              return FALSE;
 10210d4:	0005883a 	mov	r2,zero
 10210d8:	00002506 	br	1021170 <OC_I2C_Write+0x1e8>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 10210dc:	e13ffc17 	ldw	r4,-16(fp)
 10210e0:	01400104 	movi	r5,4
 10210e4:	01800404 	movi	r6,16
 10210e8:	1020bb40 	call	1020bb4 <Write32_Data>
 10210ec:	1000051e 	bne	r2,zero,1021104 <OC_I2C_Write+0x17c>
             printf("OC_I2C_Write error[7]\r\n");
 10210f0:	010040f4 	movhi	r4,259
 10210f4:	21103604 	addi	r4,r4,16600
 10210f8:	1021fe40 	call	1021fe4 <puts>
              return FALSE;
 10210fc:	0005883a 	mov	r2,zero
 1021100:	00001b06 	br	1021170 <OC_I2C_Write+0x1e8>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 1021104:	e13ffc17 	ldw	r4,-16(fp)
 1021108:	1020f280 	call	1020f28 <ACK_check>
 102110c:	1000051e 	bne	r2,zero,1021124 <OC_I2C_Write+0x19c>
              printf("OC_I2C_Write error[8]\r\n");
 1021110:	010040f4 	movhi	r4,259
 1021114:	21103c04 	addi	r4,r4,16624
 1021118:	1021fe40 	call	1021fe4 <puts>
              return FALSE;
 102111c:	0005883a 	mov	r2,zero
 1021120:	00001306 	br	1021170 <OC_I2C_Write+0x1e8>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1021124:	e0bffb17 	ldw	r2,-20(fp)
 1021128:	10800044 	addi	r2,r2,1
 102112c:	e0bffb15 	stw	r2,-20(fp)
 1021130:	e0fffb17 	ldw	r3,-20(fp)
 1021134:	e0800217 	ldw	r2,8(fp)
 1021138:	18bfd916 	blt	r3,r2,10210a0 <_gp+0xfffe2dbc>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 102113c:	e13ffc17 	ldw	r4,-16(fp)
 1021140:	01400104 	movi	r5,4
 1021144:	01801004 	movi	r6,64
 1021148:	1020bb40 	call	1020bb4 <Write32_Data>
 102114c:	1000051e 	bne	r2,zero,1021164 <OC_I2C_Write+0x1dc>
         printf("OC_I2C_Write error[9]\r\n");
 1021150:	010040f4 	movhi	r4,259
 1021154:	21104204 	addi	r4,r4,16648
 1021158:	1021fe40 	call	1021fe4 <puts>
         return FALSE;
 102115c:	0005883a 	mov	r2,zero
 1021160:	00000306 	br	1021170 <OC_I2C_Write+0x1e8>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 1021164:	010003c4 	movi	r4,15
 1021168:	1031d080 	call	1031d08 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 102116c:	00800044 	movi	r2,1

}
 1021170:	e037883a 	mov	sp,fp
 1021174:	dfc00117 	ldw	ra,4(sp)
 1021178:	df000017 	ldw	fp,0(sp)
 102117c:	dec00204 	addi	sp,sp,8
 1021180:	f800283a 	ret

01021184 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 1021184:	defffb04 	addi	sp,sp,-20
 1021188:	dfc00415 	stw	ra,16(sp)
 102118c:	df000315 	stw	fp,12(sp)
 1021190:	df000304 	addi	fp,sp,12
 1021194:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 1021198:	010003c4 	movi	r4,15
 102119c:	1031d080 	call	1031d08 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 10211a0:	e0bffe04 	addi	r2,fp,-8
 10211a4:	e13fff17 	ldw	r4,-4(fp)
 10211a8:	01400104 	movi	r5,4
 10211ac:	100d883a 	mov	r6,r2
 10211b0:	1020c0c0 	call	1020c0c <Read32_Data>
 10211b4:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 10211b8:	e0bffd17 	ldw	r2,-12(fp)
 10211bc:	10000426 	beq	r2,zero,10211d0 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 10211c0:	e0bffe17 	ldw	r2,-8(fp)
 10211c4:	1080008c 	andi	r2,r2,2
 10211c8:	10000126 	beq	r2,zero,10211d0 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 10211cc:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 10211d0:	e0bffd17 	ldw	r2,-12(fp)

}
 10211d4:	e037883a 	mov	sp,fp
 10211d8:	dfc00117 	ldw	ra,4(sp)
 10211dc:	df000017 	ldw	fp,0(sp)
 10211e0:	dec00204 	addi	sp,sp,8
 10211e4:	f800283a 	ret

010211e8 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 10211e8:	defff804 	addi	sp,sp,-32
 10211ec:	dfc00715 	stw	ra,28(sp)
 10211f0:	df000615 	stw	fp,24(sp)
 10211f4:	df000604 	addi	fp,sp,24
 10211f8:	e13ffc15 	stw	r4,-16(fp)
 10211fc:	2807883a 	mov	r3,r5
 1021200:	3005883a 	mov	r2,r6
 1021204:	e1ffff15 	stw	r7,-4(fp)
 1021208:	e0fffd05 	stb	r3,-12(fp)
 102120c:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 1021210:	e0bffc17 	ldw	r2,-16(fp)
 1021214:	10800304 	addi	r2,r2,12
 1021218:	1007883a 	mov	r3,r2
 102121c:	e0bffd03 	ldbu	r2,-12(fp)
 1021220:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 1021224:	e0bffc17 	ldw	r2,-16(fp)
 1021228:	10800404 	addi	r2,r2,16
 102122c:	1007883a 	mov	r3,r2
 1021230:	00802404 	movi	r2,144
 1021234:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 1021238:	e13ffc17 	ldw	r4,-16(fp)
 102123c:	1020f280 	call	1020f28 <ACK_check>
 1021240:	1000051e 	bne	r2,zero,1021258 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
 1021244:	010040f4 	movhi	r4,259
 1021248:	21104804 	addi	r4,r4,16672
 102124c:	1021fe40 	call	1021fe4 <puts>
       return FALSE;
 1021250:	0005883a 	mov	r2,zero
 1021254:	00005206 	br	10213a0 <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
 1021258:	e0bffc17 	ldw	r2,-16(fp)
 102125c:	10800304 	addi	r2,r2,12
 1021260:	1007883a 	mov	r3,r2
 1021264:	e0bffe03 	ldbu	r2,-8(fp)
 1021268:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 102126c:	e0bffc17 	ldw	r2,-16(fp)
 1021270:	10800404 	addi	r2,r2,16
 1021274:	1007883a 	mov	r3,r2
 1021278:	00800404 	movi	r2,16
 102127c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 1021280:	e13ffc17 	ldw	r4,-16(fp)
 1021284:	1020f280 	call	1020f28 <ACK_check>
 1021288:	1000051e 	bne	r2,zero,10212a0 <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
 102128c:	010040f4 	movhi	r4,259
 1021290:	21104e04 	addi	r4,r4,16696
 1021294:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 1021298:	0005883a 	mov	r2,zero
 102129c:	00004006 	br	10213a0 <OC_I2C_Read+0x1b8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 10212a0:	e0bffc17 	ldw	r2,-16(fp)
 10212a4:	10800304 	addi	r2,r2,12
 10212a8:	1007883a 	mov	r3,r2
 10212ac:	e0bffd03 	ldbu	r2,-12(fp)
 10212b0:	10800054 	ori	r2,r2,1
 10212b4:	10803fcc 	andi	r2,r2,255
 10212b8:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 10212bc:	e0bffc17 	ldw	r2,-16(fp)
 10212c0:	10800404 	addi	r2,r2,16
 10212c4:	1007883a 	mov	r3,r2
 10212c8:	00802404 	movi	r2,144
 10212cc:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 10212d0:	e13ffc17 	ldw	r4,-16(fp)
 10212d4:	1020f280 	call	1020f28 <ACK_check>
 10212d8:	1000051e 	bne	r2,zero,10212f0 <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
 10212dc:	010040f4 	movhi	r4,259
 10212e0:	21105404 	addi	r4,r4,16720
 10212e4:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 10212e8:	0005883a 	mov	r2,zero
 10212ec:	00002c06 	br	10213a0 <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
 10212f0:	e03ffa15 	stw	zero,-24(fp)
 10212f4:	00001f06 	br	1021374 <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 10212f8:	e0bffc17 	ldw	r2,-16(fp)
 10212fc:	10800404 	addi	r2,r2,16
 1021300:	1009883a 	mov	r4,r2
 1021304:	e0bffa17 	ldw	r2,-24(fp)
 1021308:	10c00044 	addi	r3,r2,1
 102130c:	e0800217 	ldw	r2,8(fp)
 1021310:	1880021e 	bne	r3,r2,102131c <OC_I2C_Read+0x134>
 1021314:	00800a04 	movi	r2,40
 1021318:	00000106 	br	1021320 <OC_I2C_Read+0x138>
 102131c:	00800804 	movi	r2,32
 1021320:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 1021324:	e13ffc17 	ldw	r4,-16(fp)
 1021328:	10211840 	call	1021184 <ACK_judge_for_read>
 102132c:	1000051e 	bne	r2,zero,1021344 <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
 1021330:	010040f4 	movhi	r4,259
 1021334:	21105a04 	addi	r4,r4,16744
 1021338:	1021fe40 	call	1021fe4 <puts>
            return FALSE;
 102133c:	0005883a 	mov	r2,zero
 1021340:	00001706 	br	10213a0 <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 1021344:	e0bffc17 	ldw	r2,-16(fp)
 1021348:	10800304 	addi	r2,r2,12
 102134c:	10800037 	ldwio	r2,0(r2)
 1021350:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 1021354:	e0bffa17 	ldw	r2,-24(fp)
 1021358:	e0ffff17 	ldw	r3,-4(fp)
 102135c:	1885883a 	add	r2,r3,r2
 1021360:	e0fffb17 	ldw	r3,-20(fp)
 1021364:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 1021368:	e0bffa17 	ldw	r2,-24(fp)
 102136c:	10800044 	addi	r2,r2,1
 1021370:	e0bffa15 	stw	r2,-24(fp)
 1021374:	e0fffa17 	ldw	r3,-24(fp)
 1021378:	e0800217 	ldw	r2,8(fp)
 102137c:	18bfde16 	blt	r3,r2,10212f8 <_gp+0xfffe3014>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 1021380:	e0bffc17 	ldw	r2,-16(fp)
 1021384:	10800404 	addi	r2,r2,16
 1021388:	1007883a 	mov	r3,r2
 102138c:	00801004 	movi	r2,64
 1021390:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 1021394:	010003c4 	movi	r4,15
 1021398:	1031d080 	call	1031d08 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 102139c:	00800044 	movi	r2,1

}
 10213a0:	e037883a 	mov	sp,fp
 10213a4:	dfc00117 	ldw	ra,4(sp)
 10213a8:	df000017 	ldw	fp,0(sp)
 10213ac:	dec00204 	addi	sp,sp,8
 10213b0:	f800283a 	ret

010213b4 <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 10213b4:	defff804 	addi	sp,sp,-32
 10213b8:	dfc00715 	stw	ra,28(sp)
 10213bc:	df000615 	stw	fp,24(sp)
 10213c0:	df000604 	addi	fp,sp,24
 10213c4:	e13ffc15 	stw	r4,-16(fp)
 10213c8:	2805883a 	mov	r2,r5
 10213cc:	e1bffe15 	stw	r6,-8(fp)
 10213d0:	e1ffff15 	stw	r7,-4(fp)
 10213d4:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 10213d8:	e0bffc17 	ldw	r2,-16(fp)
 10213dc:	10800304 	addi	r2,r2,12
 10213e0:	1007883a 	mov	r3,r2
 10213e4:	e0bffd03 	ldbu	r2,-12(fp)
 10213e8:	10800054 	ori	r2,r2,1
 10213ec:	10803fcc 	andi	r2,r2,255
 10213f0:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 10213f4:	e0bffc17 	ldw	r2,-16(fp)
 10213f8:	10800404 	addi	r2,r2,16
 10213fc:	1007883a 	mov	r3,r2
 1021400:	00802404 	movi	r2,144
 1021404:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 1021408:	e13ffc17 	ldw	r4,-16(fp)
 102140c:	1020f280 	call	1020f28 <ACK_check>
 1021410:	1000051e 	bne	r2,zero,1021428 <OC_I2C_Read_Continue+0x74>
        printf("OC_I2C_Read error[8]\r\n");
 1021414:	010040f4 	movhi	r4,259
 1021418:	21105404 	addi	r4,r4,16720
 102141c:	1021fe40 	call	1021fe4 <puts>
        return FALSE;
 1021420:	0005883a 	mov	r2,zero
 1021424:	00002c06 	br	10214d8 <OC_I2C_Read_Continue+0x124>
    }

    for(i=0;i<nReadLength;i++){
 1021428:	e03ffa15 	stw	zero,-24(fp)
 102142c:	00001f06 	br	10214ac <OC_I2C_Read_Continue+0xf8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 1021430:	e0bffc17 	ldw	r2,-16(fp)
 1021434:	10800404 	addi	r2,r2,16
 1021438:	1009883a 	mov	r4,r2
 102143c:	e0bffa17 	ldw	r2,-24(fp)
 1021440:	10c00044 	addi	r3,r2,1
 1021444:	e0bfff17 	ldw	r2,-4(fp)
 1021448:	1880021e 	bne	r3,r2,1021454 <OC_I2C_Read_Continue+0xa0>
 102144c:	00800a04 	movi	r2,40
 1021450:	00000106 	br	1021458 <OC_I2C_Read_Continue+0xa4>
 1021454:	00800804 	movi	r2,32
 1021458:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 102145c:	e13ffc17 	ldw	r4,-16(fp)
 1021460:	10211840 	call	1021184 <ACK_judge_for_read>
 1021464:	1000051e 	bne	r2,zero,102147c <OC_I2C_Read_Continue+0xc8>
            printf("OC_I2C_Read error[10]\r\n");
 1021468:	010040f4 	movhi	r4,259
 102146c:	21105a04 	addi	r4,r4,16744
 1021470:	1021fe40 	call	1021fe4 <puts>
            return FALSE;
 1021474:	0005883a 	mov	r2,zero
 1021478:	00001706 	br	10214d8 <OC_I2C_Read_Continue+0x124>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 102147c:	e0bffc17 	ldw	r2,-16(fp)
 1021480:	10800304 	addi	r2,r2,12
 1021484:	10800037 	ldwio	r2,0(r2)
 1021488:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 102148c:	e0bffa17 	ldw	r2,-24(fp)
 1021490:	e0fffe17 	ldw	r3,-8(fp)
 1021494:	1885883a 	add	r2,r3,r2
 1021498:	e0fffb17 	ldw	r3,-20(fp)
 102149c:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 10214a0:	e0bffa17 	ldw	r2,-24(fp)
 10214a4:	10800044 	addi	r2,r2,1
 10214a8:	e0bffa15 	stw	r2,-24(fp)
 10214ac:	e0fffa17 	ldw	r3,-24(fp)
 10214b0:	e0bfff17 	ldw	r2,-4(fp)
 10214b4:	18bfde16 	blt	r3,r2,1021430 <_gp+0xfffe314c>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 10214b8:	e0bffc17 	ldw	r2,-16(fp)
 10214bc:	10800404 	addi	r2,r2,16
 10214c0:	1007883a 	mov	r3,r2
 10214c4:	00801004 	movi	r2,64
 10214c8:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 10214cc:	010003c4 	movi	r4,15
 10214d0:	1031d080 	call	1031d08 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 10214d4:	00800044 	movi	r2,1

}
 10214d8:	e037883a 	mov	sp,fp
 10214dc:	dfc00117 	ldw	ra,4(sp)
 10214e0:	df000017 	ldw	fp,0(sp)
 10214e4:	dec00204 	addi	sp,sp,8
 10214e8:	f800283a 	ret

010214ec <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
 10214ec:	defff804 	addi	sp,sp,-32
 10214f0:	dfc00715 	stw	ra,28(sp)
 10214f4:	df000615 	stw	fp,24(sp)
 10214f8:	df000604 	addi	fp,sp,24
 10214fc:	e13ffc15 	stw	r4,-16(fp)
 1021500:	2805883a 	mov	r2,r5
 1021504:	e1bffe15 	stw	r6,-8(fp)
 1021508:	e1ffff15 	stw	r7,-4(fp)
 102150c:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 1021510:	e0bffe17 	ldw	r2,-8(fp)
 1021514:	1005d23a 	srai	r2,r2,8
 1021518:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 102151c:	e0bffe17 	ldw	r2,-8(fp)
 1021520:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 1021524:	e0bffd03 	ldbu	r2,-12(fp)
 1021528:	e13ffc17 	ldw	r4,-16(fp)
 102152c:	014000c4 	movi	r5,3
 1021530:	100d883a 	mov	r6,r2
 1021534:	1020bb40 	call	1020bb4 <Write32_Data>
 1021538:	1000021e 	bne	r2,zero,1021544 <OC_I2CL_Write+0x58>
       return FALSE;
 102153c:	0005883a 	mov	r2,zero
 1021540:	00005b06 	br	10216b0 <OC_I2CL_Write+0x1c4>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 1021544:	e13ffc17 	ldw	r4,-16(fp)
 1021548:	01400104 	movi	r5,4
 102154c:	01802404 	movi	r6,144
 1021550:	1020bb40 	call	1020bb4 <Write32_Data>
 1021554:	1000021e 	bne	r2,zero,1021560 <OC_I2CL_Write+0x74>
       return FALSE;
 1021558:	0005883a 	mov	r2,zero
 102155c:	00005406 	br	10216b0 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1021560:	e13ffc17 	ldw	r4,-16(fp)
 1021564:	1020f280 	call	1020f28 <ACK_check>
 1021568:	1000021e 	bne	r2,zero,1021574 <OC_I2CL_Write+0x88>
        return FALSE;
 102156c:	0005883a 	mov	r2,zero
 1021570:	00004f06 	br	10216b0 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 1021574:	e0bffb03 	ldbu	r2,-20(fp)
 1021578:	e13ffc17 	ldw	r4,-16(fp)
 102157c:	014000c4 	movi	r5,3
 1021580:	100d883a 	mov	r6,r2
 1021584:	1020bb40 	call	1020bb4 <Write32_Data>
 1021588:	1000021e 	bne	r2,zero,1021594 <OC_I2CL_Write+0xa8>
       return FALSE;
 102158c:	0005883a 	mov	r2,zero
 1021590:	00004706 	br	10216b0 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 1021594:	e13ffc17 	ldw	r4,-16(fp)
 1021598:	01400104 	movi	r5,4
 102159c:	01800404 	movi	r6,16
 10215a0:	1020bb40 	call	1020bb4 <Write32_Data>
 10215a4:	1000021e 	bne	r2,zero,10215b0 <OC_I2CL_Write+0xc4>
        return FALSE;
 10215a8:	0005883a 	mov	r2,zero
 10215ac:	00004006 	br	10216b0 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 10215b0:	e13ffc17 	ldw	r4,-16(fp)
 10215b4:	1020f280 	call	1020f28 <ACK_check>
 10215b8:	1000021e 	bne	r2,zero,10215c4 <OC_I2CL_Write+0xd8>
        return FALSE;
 10215bc:	0005883a 	mov	r2,zero
 10215c0:	00003b06 	br	10216b0 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 10215c4:	e0bffb43 	ldbu	r2,-19(fp)
 10215c8:	e13ffc17 	ldw	r4,-16(fp)
 10215cc:	014000c4 	movi	r5,3
 10215d0:	100d883a 	mov	r6,r2
 10215d4:	1020bb40 	call	1020bb4 <Write32_Data>
 10215d8:	1000021e 	bne	r2,zero,10215e4 <OC_I2CL_Write+0xf8>
       return FALSE;
 10215dc:	0005883a 	mov	r2,zero
 10215e0:	00003306 	br	10216b0 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 10215e4:	e13ffc17 	ldw	r4,-16(fp)
 10215e8:	01400104 	movi	r5,4
 10215ec:	01800404 	movi	r6,16
 10215f0:	1020bb40 	call	1020bb4 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 10215f4:	e13ffc17 	ldw	r4,-16(fp)
 10215f8:	1020f280 	call	1020f28 <ACK_check>
 10215fc:	1000021e 	bne	r2,zero,1021608 <OC_I2CL_Write+0x11c>
        return FALSE;
 1021600:	0005883a 	mov	r2,zero
 1021604:	00002a06 	br	10216b0 <OC_I2CL_Write+0x1c4>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1021608:	e03ffa15 	stw	zero,-24(fp)
 102160c:	00001b06 	br	102167c <OC_I2CL_Write+0x190>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 1021610:	e0bffa17 	ldw	r2,-24(fp)
 1021614:	e0ffff17 	ldw	r3,-4(fp)
 1021618:	1885883a 	add	r2,r3,r2
 102161c:	10800003 	ldbu	r2,0(r2)
 1021620:	10803fcc 	andi	r2,r2,255
 1021624:	e13ffc17 	ldw	r4,-16(fp)
 1021628:	014000c4 	movi	r5,3
 102162c:	100d883a 	mov	r6,r2
 1021630:	1020bb40 	call	1020bb4 <Write32_Data>
 1021634:	1000021e 	bne	r2,zero,1021640 <OC_I2CL_Write+0x154>
            return FALSE;
 1021638:	0005883a 	mov	r2,zero
 102163c:	00001c06 	br	10216b0 <OC_I2CL_Write+0x1c4>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 1021640:	e13ffc17 	ldw	r4,-16(fp)
 1021644:	01400104 	movi	r5,4
 1021648:	01800404 	movi	r6,16
 102164c:	1020bb40 	call	1020bb4 <Write32_Data>
 1021650:	1000021e 	bne	r2,zero,102165c <OC_I2CL_Write+0x170>
            return FALSE;
 1021654:	0005883a 	mov	r2,zero
 1021658:	00001506 	br	10216b0 <OC_I2CL_Write+0x1c4>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
 102165c:	e13ffc17 	ldw	r4,-16(fp)
 1021660:	1020f280 	call	1020f28 <ACK_check>
 1021664:	1000021e 	bne	r2,zero,1021670 <OC_I2CL_Write+0x184>
             return FALSE;
 1021668:	0005883a 	mov	r2,zero
 102166c:	00001006 	br	10216b0 <OC_I2CL_Write+0x1c4>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1021670:	e0bffa17 	ldw	r2,-24(fp)
 1021674:	10800044 	addi	r2,r2,1
 1021678:	e0bffa15 	stw	r2,-24(fp)
 102167c:	e0fffa17 	ldw	r3,-24(fp)
 1021680:	e0800217 	ldw	r2,8(fp)
 1021684:	18bfe216 	blt	r3,r2,1021610 <_gp+0xfffe332c>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 1021688:	e13ffc17 	ldw	r4,-16(fp)
 102168c:	01400104 	movi	r5,4
 1021690:	01801004 	movi	r6,64
 1021694:	1020bb40 	call	1020bb4 <Write32_Data>
 1021698:	1000021e 	bne	r2,zero,10216a4 <OC_I2CL_Write+0x1b8>
         return FALSE;
 102169c:	0005883a 	mov	r2,zero
 10216a0:	00000306 	br	10216b0 <OC_I2CL_Write+0x1c4>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 10216a4:	010003c4 	movi	r4,15
 10216a8:	1031d080 	call	1031d08 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 10216ac:	00800044 	movi	r2,1
}
 10216b0:	e037883a 	mov	sp,fp
 10216b4:	dfc00117 	ldw	ra,4(sp)
 10216b8:	df000017 	ldw	fp,0(sp)
 10216bc:	dec00204 	addi	sp,sp,8
 10216c0:	f800283a 	ret

010216c4 <OC_I2CL_Read>:


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address,int sub_address, alt_u8 *pData8){
 10216c4:	defff804 	addi	sp,sp,-32
 10216c8:	dfc00715 	stw	ra,28(sp)
 10216cc:	df000615 	stw	fp,24(sp)
 10216d0:	df000604 	addi	fp,sp,24
 10216d4:	e13ffc15 	stw	r4,-16(fp)
 10216d8:	2805883a 	mov	r2,r5
 10216dc:	e1bffe15 	stw	r6,-8(fp)
 10216e0:	e1ffff15 	stw	r7,-4(fp)
 10216e4:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
    alt_32 Data32;// = 0x0;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 10216e8:	e0bffe17 	ldw	r2,-8(fp)
 10216ec:	1005d23a 	srai	r2,r2,8
 10216f0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 10216f4:	e0bffe17 	ldw	r2,-8(fp)
 10216f8:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 10216fc:	e0bffd03 	ldbu	r2,-12(fp)
 1021700:	e13ffc17 	ldw	r4,-16(fp)
 1021704:	014000c4 	movi	r5,3
 1021708:	100d883a 	mov	r6,r2
 102170c:	1020bb40 	call	1020bb4 <Write32_Data>
 1021710:	1000021e 	bne	r2,zero,102171c <OC_I2CL_Read+0x58>
       return FALSE;
 1021714:	0005883a 	mov	r2,zero
 1021718:	00006c06 	br	10218cc <OC_I2CL_Read+0x208>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 102171c:	e13ffc17 	ldw	r4,-16(fp)
 1021720:	01400104 	movi	r5,4
 1021724:	01802404 	movi	r6,144
 1021728:	1020bb40 	call	1020bb4 <Write32_Data>
 102172c:	1000021e 	bne	r2,zero,1021738 <OC_I2CL_Read+0x74>
       return FALSE;
 1021730:	0005883a 	mov	r2,zero
 1021734:	00006506 	br	10218cc <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1021738:	e13ffc17 	ldw	r4,-16(fp)
 102173c:	1020f280 	call	1020f28 <ACK_check>
 1021740:	1000021e 	bne	r2,zero,102174c <OC_I2CL_Read+0x88>
        return FALSE;
 1021744:	0005883a 	mov	r2,zero
 1021748:	00006006 	br	10218cc <OC_I2CL_Read+0x208>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 102174c:	e0bffa03 	ldbu	r2,-24(fp)
 1021750:	e13ffc17 	ldw	r4,-16(fp)
 1021754:	014000c4 	movi	r5,3
 1021758:	100d883a 	mov	r6,r2
 102175c:	1020bb40 	call	1020bb4 <Write32_Data>
 1021760:	1000021e 	bne	r2,zero,102176c <OC_I2CL_Read+0xa8>
       return FALSE;
 1021764:	0005883a 	mov	r2,zero
 1021768:	00005806 	br	10218cc <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 102176c:	e13ffc17 	ldw	r4,-16(fp)
 1021770:	01400104 	movi	r5,4
 1021774:	01800404 	movi	r6,16
 1021778:	1020bb40 	call	1020bb4 <Write32_Data>
 102177c:	1000021e 	bne	r2,zero,1021788 <OC_I2CL_Read+0xc4>
        return FALSE;
 1021780:	0005883a 	mov	r2,zero
 1021784:	00005106 	br	10218cc <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1021788:	e13ffc17 	ldw	r4,-16(fp)
 102178c:	1020f280 	call	1020f28 <ACK_check>
 1021790:	1000021e 	bne	r2,zero,102179c <OC_I2CL_Read+0xd8>
        return FALSE;
 1021794:	0005883a 	mov	r2,zero
 1021798:	00004c06 	br	10218cc <OC_I2CL_Read+0x208>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 102179c:	e0bffa43 	ldbu	r2,-23(fp)
 10217a0:	e13ffc17 	ldw	r4,-16(fp)
 10217a4:	014000c4 	movi	r5,3
 10217a8:	100d883a 	mov	r6,r2
 10217ac:	1020bb40 	call	1020bb4 <Write32_Data>
 10217b0:	1000021e 	bne	r2,zero,10217bc <OC_I2CL_Read+0xf8>
       return FALSE;
 10217b4:	0005883a 	mov	r2,zero
 10217b8:	00004406 	br	10218cc <OC_I2CL_Read+0x208>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 10217bc:	e13ffc17 	ldw	r4,-16(fp)
 10217c0:	01400104 	movi	r5,4
 10217c4:	01800404 	movi	r6,16
 10217c8:	1020bb40 	call	1020bb4 <Write32_Data>
 10217cc:	1000021e 	bne	r2,zero,10217d8 <OC_I2CL_Read+0x114>
        return FALSE;
 10217d0:	0005883a 	mov	r2,zero
 10217d4:	00003d06 	br	10218cc <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 10217d8:	e13ffc17 	ldw	r4,-16(fp)
 10217dc:	1020f280 	call	1020f28 <ACK_check>
 10217e0:	1000021e 	bne	r2,zero,10217ec <OC_I2CL_Read+0x128>
        return FALSE;
 10217e4:	0005883a 	mov	r2,zero
 10217e8:	00003806 	br	10218cc <OC_I2CL_Read+0x208>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 10217ec:	e0bffd03 	ldbu	r2,-12(fp)
 10217f0:	10800054 	ori	r2,r2,1
 10217f4:	10803fcc 	andi	r2,r2,255
 10217f8:	e13ffc17 	ldw	r4,-16(fp)
 10217fc:	014000c4 	movi	r5,3
 1021800:	100d883a 	mov	r6,r2
 1021804:	1020bb40 	call	1020bb4 <Write32_Data>
 1021808:	1000021e 	bne	r2,zero,1021814 <OC_I2CL_Read+0x150>
         return FALSE;
 102180c:	0005883a 	mov	r2,zero
 1021810:	00002e06 	br	10218cc <OC_I2CL_Read+0x208>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 1021814:	e13ffc17 	ldw	r4,-16(fp)
 1021818:	01400104 	movi	r5,4
 102181c:	01802404 	movi	r6,144
 1021820:	1020bb40 	call	1020bb4 <Write32_Data>
 1021824:	1000021e 	bne	r2,zero,1021830 <OC_I2CL_Read+0x16c>
         return FALSE;
 1021828:	0005883a 	mov	r2,zero
 102182c:	00002706 	br	10218cc <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1021830:	e13ffc17 	ldw	r4,-16(fp)
 1021834:	1020f280 	call	1020f28 <ACK_check>
 1021838:	1000021e 	bne	r2,zero,1021844 <OC_I2CL_Read+0x180>
        return FALSE;
 102183c:	0005883a 	mov	r2,zero
 1021840:	00002206 	br	10218cc <OC_I2CL_Read+0x208>

       //read the rxr data


   //set the RD and ACK bit(bit5 and bit3)
    if (!Write32_Data( i2c_base, 4,0x28))
 1021844:	e13ffc17 	ldw	r4,-16(fp)
 1021848:	01400104 	movi	r5,4
 102184c:	01800a04 	movi	r6,40
 1021850:	1020bb40 	call	1020bb4 <Write32_Data>
 1021854:	1000021e 	bne	r2,zero,1021860 <OC_I2CL_Read+0x19c>
        return FALSE;
 1021858:	0005883a 	mov	r2,zero
 102185c:	00001b06 	br	10218cc <OC_I2CL_Read+0x208>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_judge_for_read( i2c_base))
 1021860:	e13ffc17 	ldw	r4,-16(fp)
 1021864:	10211840 	call	1021184 <ACK_judge_for_read>
 1021868:	1000021e 	bne	r2,zero,1021874 <OC_I2CL_Read+0x1b0>
        return FALSE;
 102186c:	0005883a 	mov	r2,zero
 1021870:	00001606 	br	10218cc <OC_I2CL_Read+0x208>

//    printf("\n read receive ACK-device address(read)! \n");
    if (!Read32_Data ( i2c_base, 3, &Data32))
 1021874:	e0bffb04 	addi	r2,fp,-20
 1021878:	e13ffc17 	ldw	r4,-16(fp)
 102187c:	014000c4 	movi	r5,3
 1021880:	100d883a 	mov	r6,r2
 1021884:	1020c0c0 	call	1020c0c <Read32_Data>
 1021888:	1000021e 	bne	r2,zero,1021894 <OC_I2CL_Read+0x1d0>
        return FALSE;
 102188c:	0005883a 	mov	r2,zero
 1021890:	00000e06 	br	10218cc <OC_I2CL_Read+0x208>

    *pData8 =  Data32 & 0xff;
 1021894:	e0bffb17 	ldw	r2,-20(fp)
 1021898:	1007883a 	mov	r3,r2
 102189c:	e0bfff17 	ldw	r2,-4(fp)
 10218a0:	10c00005 	stb	r3,0(r2)


   if (!Write32_Data( i2c_base, 4,0x40))
 10218a4:	e13ffc17 	ldw	r4,-16(fp)
 10218a8:	01400104 	movi	r5,4
 10218ac:	01801004 	movi	r6,64
 10218b0:	1020bb40 	call	1020bb4 <Write32_Data>
 10218b4:	1000021e 	bne	r2,zero,10218c0 <OC_I2CL_Read+0x1fc>
       return FALSE;
 10218b8:	0005883a 	mov	r2,zero
 10218bc:	00000306 	br	10218cc <OC_I2CL_Read+0x208>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 10218c0:	010003c4 	movi	r4,15
 10218c4:	1031d080 	call	1031d08 <usleep>

   return TRUE;
 10218c8:	00800044 	movi	r2,1

}
 10218cc:	e037883a 	mov	sp,fp
 10218d0:	dfc00117 	ldw	ra,4(sp)
 10218d4:	df000017 	ldw	fp,0(sp)
 10218d8:	dec00204 	addi	sp,sp,8
 10218dc:	f800283a 	ret

010218e0 <LED_Display>:
#define LED_INIT_MASK   (0x01 << 24)

#define LED_SET(mask)   IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, mask)


void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
 10218e0:	defffd04 	addi	sp,sp,-12
 10218e4:	df000215 	stw	fp,8(sp)
 10218e8:	df000204 	addi	fp,sp,8
 10218ec:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
 10218f0:	e0bfff17 	ldw	r2,-4(fp)
 10218f4:	e0bffe15 	stw	r2,-8(fp)
    LED_SET(ThisMask);  //0:ligh, 1:unlight
 10218f8:	e0fffe17 	ldw	r3,-8(fp)
 10218fc:	00801404 	movi	r2,80
 1021900:	10c00035 	stwio	r3,0(r2)
    
}
 1021904:	e037883a 	mov	sp,fp
 1021908:	df000017 	ldw	fp,0(sp)
 102190c:	dec00104 	addi	sp,sp,4
 1021910:	f800283a 	ret

01021914 <LED_AllOn>:


void LED_AllOn(void){
 1021914:	defffe04 	addi	sp,sp,-8
 1021918:	dfc00115 	stw	ra,4(sp)
 102191c:	df000015 	stw	fp,0(sp)
 1021920:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
 1021924:	013fffc4 	movi	r4,-1
 1021928:	10218e00 	call	10218e0 <LED_Display>
}
 102192c:	e037883a 	mov	sp,fp
 1021930:	dfc00117 	ldw	ra,4(sp)
 1021934:	df000017 	ldw	fp,0(sp)
 1021938:	dec00204 	addi	sp,sp,8
 102193c:	f800283a 	ret

01021940 <LED_AllOff>:

void LED_AllOff(void){
 1021940:	defffe04 	addi	sp,sp,-8
 1021944:	dfc00115 	stw	ra,4(sp)
 1021948:	df000015 	stw	fp,0(sp)
 102194c:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
 1021950:	0009883a 	mov	r4,zero
 1021954:	10218e00 	call	10218e0 <LED_Display>
}
 1021958:	e037883a 	mov	sp,fp
 102195c:	dfc00117 	ldw	ra,4(sp)
 1021960:	df000017 	ldw	fp,0(sp)
 1021964:	dec00204 	addi	sp,sp,8
 1021968:	f800283a 	ret

0102196c <LED_LightCount>:


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
 102196c:	defffb04 	addi	sp,sp,-20
 1021970:	dfc00415 	stw	ra,16(sp)
 1021974:	df000315 	stw	fp,12(sp)
 1021978:	df000304 	addi	fp,sp,12
 102197c:	2005883a 	mov	r2,r4
 1021980:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 Mask = 0;
 1021984:	e03ffd15 	stw	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
 1021988:	e03ffe15 	stw	zero,-8(fp)
 102198c:	00000906 	br	10219b4 <LED_LightCount+0x48>
        Mask <<= 1;
 1021990:	e0bffd17 	ldw	r2,-12(fp)
 1021994:	1085883a 	add	r2,r2,r2
 1021998:	e0bffd15 	stw	r2,-12(fp)
        Mask |= 0x01;
 102199c:	e0bffd17 	ldw	r2,-12(fp)
 10219a0:	10800054 	ori	r2,r2,1
 10219a4:	e0bffd15 	stw	r2,-12(fp)


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    alt_u32 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
 10219a8:	e0bffe17 	ldw	r2,-8(fp)
 10219ac:	10800044 	addi	r2,r2,1
 10219b0:	e0bffe15 	stw	r2,-8(fp)
 10219b4:	e0bfff03 	ldbu	r2,-4(fp)
 10219b8:	e0fffe17 	ldw	r3,-8(fp)
 10219bc:	18bff416 	blt	r3,r2,1021990 <_gp+0xfffe36ac>
        Mask <<= 1;
        Mask |= 0x01;
    }
    LED_Display(Mask);  //0:ligh, 1:unlight
 10219c0:	e13ffd17 	ldw	r4,-12(fp)
 10219c4:	10218e00 	call	10218e0 <LED_Display>
    
}
 10219c8:	e037883a 	mov	sp,fp
 10219cc:	dfc00117 	ldw	ra,4(sp)
 10219d0:	df000017 	ldw	fp,0(sp)
 10219d4:	dec00204 	addi	sp,sp,8
 10219d8:	f800283a 	ret

010219dc <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
 10219dc:	defffd04 	addi	sp,sp,-12
 10219e0:	dfc00215 	stw	ra,8(sp)
 10219e4:	df000115 	stw	fp,4(sp)
 10219e8:	df000104 	addi	fp,sp,4
 10219ec:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
 10219f0:	e13fff17 	ldw	r4,-4(fp)
 10219f4:	1021ef00 	call	1021ef0 <printf>
}
 10219f8:	e037883a 	mov	sp,fp
 10219fc:	dfc00117 	ldw	ra,4(sp)
 1021a00:	df000017 	ldw	fp,0(sp)
 1021a04:	dec00204 	addi	sp,sp,8
 1021a08:	f800283a 	ret

01021a0c <myprintf>:

#endif


int myprintf(char *format, ...){
 1021a0c:	deff7804 	addi	sp,sp,-544
 1021a10:	dfc08415 	stw	ra,528(sp)
 1021a14:	df008315 	stw	fp,524(sp)
 1021a18:	df008304 	addi	fp,sp,524
 1021a1c:	e1400215 	stw	r5,8(fp)
 1021a20:	e1800315 	stw	r6,12(fp)
 1021a24:	e1c00415 	stw	r7,16(fp)
 1021a28:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 1021a2c:	e0800204 	addi	r2,fp,8
 1021a30:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 1021a34:	e0bffe17 	ldw	r2,-8(fp)
 1021a38:	e0ff7e04 	addi	r3,fp,-520
 1021a3c:	1809883a 	mov	r4,r3
 1021a40:	01408004 	movi	r5,512
 1021a44:	e1bfff17 	ldw	r6,-4(fp)
 1021a48:	100f883a 	mov	r7,r2
 1021a4c:	10261f40 	call	10261f4 <vsnprintf>
 1021a50:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 1021a54:	e0bf7e04 	addi	r2,fp,-520
 1021a58:	1009883a 	mov	r4,r2
 1021a5c:	10219dc0 	call	10219dc <debug_output>

    return rc;    
 1021a60:	e0bf7d17 	ldw	r2,-524(fp)
}
 1021a64:	e037883a 	mov	sp,fp
 1021a68:	dfc00117 	ldw	ra,4(sp)
 1021a6c:	df000017 	ldw	fp,0(sp)
 1021a70:	dec00504 	addi	sp,sp,20
 1021a74:	f800283a 	ret

01021a78 <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
 1021a78:	defff704 	addi	sp,sp,-36
 1021a7c:	dfc00815 	stw	ra,32(sp)
 1021a80:	df000715 	stw	fp,28(sp)
 1021a84:	df000704 	addi	fp,sp,28
 1021a88:	e13ffe15 	stw	r4,-8(fp)
 1021a8c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 1021a90:	e03ff915 	stw	zero,-28(fp)
 1021a94:	00001106 	br	1021adc <myprintf_hex_array+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 1021a98:	e0bff917 	ldw	r2,-28(fp)
 1021a9c:	e0fffe17 	ldw	r3,-8(fp)
 1021aa0:	1885883a 	add	r2,r3,r2
 1021aa4:	10800003 	ldbu	r2,0(r2)
 1021aa8:	10803fcc 	andi	r2,r2,255
 1021aac:	e0fffa04 	addi	r3,fp,-24
 1021ab0:	1809883a 	mov	r4,r3
 1021ab4:	014040f4 	movhi	r5,259
 1021ab8:	29506004 	addi	r5,r5,16768
 1021abc:	100d883a 	mov	r6,r2
 1021ac0:	10220500 	call	1022050 <sprintf>
        DEBUG((szText));
 1021ac4:	e0bffa04 	addi	r2,fp,-24
 1021ac8:	1009883a 	mov	r4,r2
 1021acc:	1021a0c0 	call	1021a0c <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 1021ad0:	e0bff917 	ldw	r2,-28(fp)
 1021ad4:	10800044 	addi	r2,r2,1
 1021ad8:	e0bff915 	stw	r2,-28(fp)
 1021adc:	e0fff917 	ldw	r3,-28(fp)
 1021ae0:	e0bfff17 	ldw	r2,-4(fp)
 1021ae4:	18bfec16 	blt	r3,r2,1021a98 <_gp+0xfffe37b4>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 1021ae8:	e0bfff17 	ldw	r2,-4(fp)
}
 1021aec:	e037883a 	mov	sp,fp
 1021af0:	dfc00117 	ldw	ra,4(sp)
 1021af4:	df000017 	ldw	fp,0(sp)
 1021af8:	dec00204 	addi	sp,sp,8
 1021afc:	f800283a 	ret

01021b00 <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
 1021b00:	defff704 	addi	sp,sp,-36
 1021b04:	dfc00815 	stw	ra,32(sp)
 1021b08:	df000715 	stw	fp,28(sp)
 1021b0c:	df000704 	addi	fp,sp,28
 1021b10:	e13ffe15 	stw	r4,-8(fp)
 1021b14:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 1021b18:	e03ff915 	stw	zero,-28(fp)
 1021b1c:	00001306 	br	1021b6c <myprintf_dword_array+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 1021b20:	e0bff917 	ldw	r2,-28(fp)
 1021b24:	1085883a 	add	r2,r2,r2
 1021b28:	1085883a 	add	r2,r2,r2
 1021b2c:	1007883a 	mov	r3,r2
 1021b30:	e0bffe17 	ldw	r2,-8(fp)
 1021b34:	10c5883a 	add	r2,r2,r3
 1021b38:	10800017 	ldw	r2,0(r2)
 1021b3c:	e0fffa04 	addi	r3,fp,-24
 1021b40:	1809883a 	mov	r4,r3
 1021b44:	014040f4 	movhi	r5,259
 1021b48:	29506204 	addi	r5,r5,16776
 1021b4c:	100d883a 	mov	r6,r2
 1021b50:	10220500 	call	1022050 <sprintf>
        DEBUG((szText));
 1021b54:	e0bffa04 	addi	r2,fp,-24
 1021b58:	1009883a 	mov	r4,r2
 1021b5c:	1021a0c0 	call	1021a0c <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 1021b60:	e0bff917 	ldw	r2,-28(fp)
 1021b64:	10800044 	addi	r2,r2,1
 1021b68:	e0bff915 	stw	r2,-28(fp)
 1021b6c:	e0fff917 	ldw	r3,-28(fp)
 1021b70:	e0bfff17 	ldw	r2,-4(fp)
 1021b74:	18bfea16 	blt	r3,r2,1021b20 <_gp+0xfffe383c>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 1021b78:	e0bfff17 	ldw	r2,-4(fp)
}
 1021b7c:	e037883a 	mov	sp,fp
 1021b80:	dfc00117 	ldw	ra,4(sp)
 1021b84:	df000017 	ldw	fp,0(sp)
 1021b88:	dec00204 	addi	sp,sp,8
 1021b8c:	f800283a 	ret

01021b90 <init>:
}AUDIO_FUNC;
///////////////////////////////////////////////////////////////////////////////
//////////// Internal function prototype & data structure /////////////////////
///////////////////////////////////////////////////////////////////////////////

bool init(void){
 1021b90:	defffd04 	addi	sp,sp,-12
 1021b94:	dfc00215 	stw	ra,8(sp)
 1021b98:	df000115 	stw	fp,4(sp)
 1021b9c:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
 1021ba0:	00800044 	movi	r2,1
 1021ba4:	e0bfff15 	stw	r2,-4(fp)
    printf("Welcome Audio Demo\n");
 1021ba8:	010040f4 	movhi	r4,259
 1021bac:	21106404 	addi	r4,r4,16784
 1021bb0:	1021fe40 	call	1021fe4 <puts>
    bSuccess = oc_i2c_init_ex(AUDIO_I2C_BASE, 50*1000*1000, 400*1000); // ref clock:50MHz, i2c clk:400K
 1021bb4:	01004134 	movhi	r4,260
 1021bb8:	21040004 	addi	r4,r4,4096
 1021bbc:	0140bef4 	movhi	r5,763
 1021bc0:	297c2004 	addi	r5,r5,-3968
 1021bc4:	018001b4 	movhi	r6,6
 1021bc8:	3186a004 	addi	r6,r6,6784
 1021bcc:	1020cbc0 	call	1020cbc <oc_i2c_init_ex>
 1021bd0:	e0bfff15 	stw	r2,-4(fp)
    if (!bSuccess)
 1021bd4:	e0bfff17 	ldw	r2,-4(fp)
 1021bd8:	1000031e 	bne	r2,zero,1021be8 <init+0x58>
    		printf("AUDIO: failed to init i2c clock\r\n");
 1021bdc:	010040f4 	movhi	r4,259
 1021be0:	21106904 	addi	r4,r4,16804
 1021be4:	1021fe40 	call	1021fe4 <puts>
     return bSuccess;
 1021be8:	e0bfff17 	ldw	r2,-4(fp)

}
 1021bec:	e037883a 	mov	sp,fp
 1021bf0:	dfc00117 	ldw	ra,4(sp)
 1021bf4:	df000017 	ldw	fp,0(sp)
 1021bf8:	dec00204 	addi	sp,sp,8
 1021bfc:	f800283a 	ret

01021c00 <show_menu>:
    " Sample Rate---->192K\n",
    " Beep----------->2KHz\n",
    "\n\n"
};

void show_menu(void){
 1021c00:	defffd04 	addi	sp,sp,-12
 1021c04:	dfc00215 	stw	ra,8(sp)
 1021c08:	df000115 	stw	fp,4(sp)
 1021c0c:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 1021c10:	e03fff15 	stw	zero,-4(fp)
 1021c14:	00000a06 	br	1021c40 <show_menu+0x40>
        printf(szMenu[i]);
 1021c18:	e0bfff17 	ldw	r2,-4(fp)
 1021c1c:	100691fa 	slli	r3,r2,7
 1021c20:	008040f4 	movhi	r2,259
 1021c24:	10907144 	addi	r2,r2,16837
 1021c28:	1885883a 	add	r2,r3,r2
 1021c2c:	1009883a 	mov	r4,r2
 1021c30:	1021ef00 	call	1021ef0 <printf>
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 1021c34:	e0bfff17 	ldw	r2,-4(fp)
 1021c38:	10800044 	addi	r2,r2,1
 1021c3c:	e0bfff15 	stw	r2,-4(fp)
 1021c40:	e0bfff17 	ldw	r2,-4(fp)
 1021c44:	108001b0 	cmpltui	r2,r2,6
 1021c48:	103ff31e 	bne	r2,zero,1021c18 <_gp+0xfffe3934>
        printf(szMenu[i]);
}
 1021c4c:	e037883a 	mov	sp,fp
 1021c50:	dfc00117 	ldw	ra,4(sp)
 1021c54:	df000017 	ldw	fp,0(sp)
 1021c58:	dec00204 	addi	sp,sp,8
 1021c5c:	f800283a 	ret

01021c60 <init_audio>:


bool init_audio(AUDIO_FUNC audio_func){
 1021c60:	defffc04 	addi	sp,sp,-16
 1021c64:	dfc00315 	stw	ra,12(sp)
 1021c68:	df000215 	stw	fp,8(sp)
 1021c6c:	df000204 	addi	fp,sp,8
 1021c70:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 1021c74:	00800044 	movi	r2,1
 1021c78:	e0bffe15 	stw	r2,-8(fp)
   if (audio_func == LOOPBACK_PLAY){
 1021c7c:	e0bfff17 	ldw	r2,-4(fp)
 1021c80:	1000031e 	bne	r2,zero,1021c90 <init_audio+0x30>
	   AUDIO_Loopback(LOOPBACK);
 1021c84:	0009883a 	mov	r4,zero
 1021c88:	10202d80 	call	10202d8 <AUDIO_Loopback>
 1021c8c:	00000506 	br	1021ca4 <init_audio+0x44>
    }else if (audio_func == BEEP_PLAY){
 1021c90:	e0bfff17 	ldw	r2,-4(fp)
 1021c94:	10800058 	cmpnei	r2,r2,1
 1021c98:	1000021e 	bne	r2,zero,1021ca4 <init_audio+0x44>
       AUDIO_Beep_Generator(BEEP);
 1021c9c:	01000044 	movi	r4,1
 1021ca0:	10206b00 	call	10206b0 <AUDIO_Beep_Generator>
    }
    return bSuccess;
 1021ca4:	e0bffe17 	ldw	r2,-8(fp)
}
 1021ca8:	e037883a 	mov	sp,fp
 1021cac:	dfc00117 	ldw	ra,4(sp)
 1021cb0:	df000017 	ldw	fp,0(sp)
 1021cb4:	dec00204 	addi	sp,sp,8
 1021cb8:	f800283a 	ret

01021cbc <main>:


    
int main()
{
 1021cbc:	defffb04 	addi	sp,sp,-20
 1021cc0:	dfc00415 	stw	ra,16(sp)
 1021cc4:	df000315 	stw	fp,12(sp)
 1021cc8:	df000304 	addi	fp,sp,12
    int state=0;
 1021ccc:	e03fff15 	stw	zero,-4(fp)
    bool loopback_done=0;
 1021cd0:	e03ffd15 	stw	zero,-12(fp)
    bool beep_done=0;
 1021cd4:	e03ffe15 	stw	zero,-8(fp)
	show_menu();
 1021cd8:	1021c000 	call	1021c00 <show_menu>
    IOWR(AUDIO_RESET_N_BASE, 0, 0x01);
 1021cdc:	00c00044 	movi	r3,1
 1021ce0:	00800804 	movi	r2,32
 1021ce4:	10c00035 	stwio	r3,0(r2)
    IOWR(AUDIO_RESET_N_BASE, 0, 0x00);
 1021ce8:	0007883a 	mov	r3,zero
 1021cec:	00800804 	movi	r2,32
 1021cf0:	10c00035 	stwio	r3,0(r2)
    usleep(1000);
 1021cf4:	0100fa04 	movi	r4,1000
 1021cf8:	1031d080 	call	1031d08 <usleep>
    IOWR(AUDIO_RESET_N_BASE, 0, 0x01);
 1021cfc:	00c00044 	movi	r3,1
 1021d00:	00800804 	movi	r2,32
 1021d04:	10c00035 	stwio	r3,0(r2)
    usleep(1000);
 1021d08:	0100fa04 	movi	r4,1000
 1021d0c:	1031d080 	call	1031d08 <usleep>
    init();
 1021d10:	1021b900 	call	1021b90 <init>
    while(1)
    {
    	state=IORD_ALTERA_AVALON_PIO_DATA(SW_BASE)&0x01;
 1021d14:	00800c04 	movi	r2,48
 1021d18:	10800037 	ldwio	r2,0(r2)
 1021d1c:	1080004c 	andi	r2,r2,1
 1021d20:	e0bfff15 	stw	r2,-4(fp)
  	    usleep(1000);
 1021d24:	0100fa04 	movi	r4,1000
 1021d28:	1031d080 	call	1031d08 <usleep>
    	if((state==1)&&(loopback_done==0))
 1021d2c:	e0bfff17 	ldw	r2,-4(fp)
 1021d30:	10800058 	cmpnei	r2,r2,1
 1021d34:	10000b1e 	bne	r2,zero,1021d64 <main+0xa8>
 1021d38:	e0bffd17 	ldw	r2,-12(fp)
 1021d3c:	1000091e 	bne	r2,zero,1021d64 <main+0xa8>
    	{
    		printf("===LOOPBACK_PLAY Mode===\n");
 1021d40:	010040f4 	movhi	r4,259
 1021d44:	21113204 	addi	r4,r4,17608
 1021d48:	1021fe40 	call	1021fe4 <puts>
    	    init_audio(LOOPBACK_PLAY);
 1021d4c:	0009883a 	mov	r4,zero
 1021d50:	1021c600 	call	1021c60 <init_audio>
    	    loopback_done=1;
 1021d54:	00800044 	movi	r2,1
 1021d58:	e0bffd15 	stw	r2,-12(fp)
    	    beep_done=0;
 1021d5c:	e03ffe15 	stw	zero,-8(fp)
 1021d60:	00000c06 	br	1021d94 <main+0xd8>
    	}
    	else if((state==0)&&(beep_done==0))
 1021d64:	e0bfff17 	ldw	r2,-4(fp)
 1021d68:	10000a1e 	bne	r2,zero,1021d94 <main+0xd8>
 1021d6c:	e0bffe17 	ldw	r2,-8(fp)
 1021d70:	1000081e 	bne	r2,zero,1021d94 <main+0xd8>
    	{
    		printf("===  BEEP_PLAY   Mode===\n");
 1021d74:	010040f4 	movhi	r4,259
 1021d78:	21113904 	addi	r4,r4,17636
 1021d7c:	1021fe40 	call	1021fe4 <puts>
    	    init_audio(BEEP_PLAY);
 1021d80:	01000044 	movi	r4,1
 1021d84:	1021c600 	call	1021c60 <init_audio>
    	    beep_done=1;
 1021d88:	00800044 	movi	r2,1
 1021d8c:	e0bffe15 	stw	r2,-8(fp)
    	    loopback_done=0;
 1021d90:	e03ffd15 	stw	zero,-12(fp)
    	}
    }
 1021d94:	003fdf06 	br	1021d14 <_gp+0xfffe3a30>

01021d98 <udivmodsi4>:
 1021d98:	2900182e 	bgeu	r5,r4,1021dfc <udivmodsi4+0x64>
 1021d9c:	28001716 	blt	r5,zero,1021dfc <udivmodsi4+0x64>
 1021da0:	00800804 	movi	r2,32
 1021da4:	00c00044 	movi	r3,1
 1021da8:	00000206 	br	1021db4 <udivmodsi4+0x1c>
 1021dac:	10001126 	beq	r2,zero,1021df4 <udivmodsi4+0x5c>
 1021db0:	28000516 	blt	r5,zero,1021dc8 <udivmodsi4+0x30>
 1021db4:	294b883a 	add	r5,r5,r5
 1021db8:	10bfffc4 	addi	r2,r2,-1
 1021dbc:	18c7883a 	add	r3,r3,r3
 1021dc0:	293ffa36 	bltu	r5,r4,1021dac <_gp+0xfffe3ac8>
 1021dc4:	18000b26 	beq	r3,zero,1021df4 <udivmodsi4+0x5c>
 1021dc8:	0005883a 	mov	r2,zero
 1021dcc:	21400236 	bltu	r4,r5,1021dd8 <udivmodsi4+0x40>
 1021dd0:	2149c83a 	sub	r4,r4,r5
 1021dd4:	10c4b03a 	or	r2,r2,r3
 1021dd8:	1806d07a 	srli	r3,r3,1
 1021ddc:	280ad07a 	srli	r5,r5,1
 1021de0:	183ffa1e 	bne	r3,zero,1021dcc <_gp+0xfffe3ae8>
 1021de4:	3000011e 	bne	r6,zero,1021dec <udivmodsi4+0x54>
 1021de8:	f800283a 	ret
 1021dec:	2005883a 	mov	r2,r4
 1021df0:	f800283a 	ret
 1021df4:	0005883a 	mov	r2,zero
 1021df8:	003ffa06 	br	1021de4 <_gp+0xfffe3b00>
 1021dfc:	00c00044 	movi	r3,1
 1021e00:	003ff106 	br	1021dc8 <_gp+0xfffe3ae4>

01021e04 <__divsi3>:
 1021e04:	defffe04 	addi	sp,sp,-8
 1021e08:	dfc00115 	stw	ra,4(sp)
 1021e0c:	dc000015 	stw	r16,0(sp)
 1021e10:	20000b16 	blt	r4,zero,1021e40 <__divsi3+0x3c>
 1021e14:	0021883a 	mov	r16,zero
 1021e18:	28000c16 	blt	r5,zero,1021e4c <__divsi3+0x48>
 1021e1c:	000d883a 	mov	r6,zero
 1021e20:	1021d980 	call	1021d98 <udivmodsi4>
 1021e24:	0407c83a 	sub	r3,zero,r16
 1021e28:	1884f03a 	xor	r2,r3,r2
 1021e2c:	1405883a 	add	r2,r2,r16
 1021e30:	dfc00117 	ldw	ra,4(sp)
 1021e34:	dc000017 	ldw	r16,0(sp)
 1021e38:	dec00204 	addi	sp,sp,8
 1021e3c:	f800283a 	ret
 1021e40:	0109c83a 	sub	r4,zero,r4
 1021e44:	04000044 	movi	r16,1
 1021e48:	283ff40e 	bge	r5,zero,1021e1c <_gp+0xfffe3b38>
 1021e4c:	014bc83a 	sub	r5,zero,r5
 1021e50:	8400005c 	xori	r16,r16,1
 1021e54:	003ff106 	br	1021e1c <_gp+0xfffe3b38>

01021e58 <__modsi3>:
 1021e58:	defffd04 	addi	sp,sp,-12
 1021e5c:	dfc00215 	stw	ra,8(sp)
 1021e60:	dc400115 	stw	r17,4(sp)
 1021e64:	dc000015 	stw	r16,0(sp)
 1021e68:	20000c16 	blt	r4,zero,1021e9c <__modsi3+0x44>
 1021e6c:	0023883a 	mov	r17,zero
 1021e70:	0021883a 	mov	r16,zero
 1021e74:	28000d16 	blt	r5,zero,1021eac <__modsi3+0x54>
 1021e78:	01800044 	movi	r6,1
 1021e7c:	1021d980 	call	1021d98 <udivmodsi4>
 1021e80:	1404f03a 	xor	r2,r2,r16
 1021e84:	8885883a 	add	r2,r17,r2
 1021e88:	dfc00217 	ldw	ra,8(sp)
 1021e8c:	dc400117 	ldw	r17,4(sp)
 1021e90:	dc000017 	ldw	r16,0(sp)
 1021e94:	dec00304 	addi	sp,sp,12
 1021e98:	f800283a 	ret
 1021e9c:	0109c83a 	sub	r4,zero,r4
 1021ea0:	04400044 	movi	r17,1
 1021ea4:	043fffc4 	movi	r16,-1
 1021ea8:	283ff30e 	bge	r5,zero,1021e78 <_gp+0xfffe3b94>
 1021eac:	014bc83a 	sub	r5,zero,r5
 1021eb0:	003ff106 	br	1021e78 <_gp+0xfffe3b94>

01021eb4 <__udivsi3>:
 1021eb4:	000d883a 	mov	r6,zero
 1021eb8:	1021d981 	jmpi	1021d98 <udivmodsi4>

01021ebc <__umodsi3>:
 1021ebc:	01800044 	movi	r6,1
 1021ec0:	1021d981 	jmpi	1021d98 <udivmodsi4>

01021ec4 <_printf_r>:
 1021ec4:	defffd04 	addi	sp,sp,-12
 1021ec8:	dfc00015 	stw	ra,0(sp)
 1021ecc:	d9800115 	stw	r6,4(sp)
 1021ed0:	d9c00215 	stw	r7,8(sp)
 1021ed4:	280d883a 	mov	r6,r5
 1021ed8:	21400217 	ldw	r5,8(r4)
 1021edc:	d9c00104 	addi	r7,sp,4
 1021ee0:	10240e40 	call	10240e4 <___vfprintf_internal_r>
 1021ee4:	dfc00017 	ldw	ra,0(sp)
 1021ee8:	dec00304 	addi	sp,sp,12
 1021eec:	f800283a 	ret

01021ef0 <printf>:
 1021ef0:	defffc04 	addi	sp,sp,-16
 1021ef4:	dfc00015 	stw	ra,0(sp)
 1021ef8:	d9400115 	stw	r5,4(sp)
 1021efc:	d9800215 	stw	r6,8(sp)
 1021f00:	d9c00315 	stw	r7,12(sp)
 1021f04:	008040f4 	movhi	r2,259
 1021f08:	1098ba04 	addi	r2,r2,25320
 1021f0c:	10800017 	ldw	r2,0(r2)
 1021f10:	200b883a 	mov	r5,r4
 1021f14:	d9800104 	addi	r6,sp,4
 1021f18:	11000217 	ldw	r4,8(r2)
 1021f1c:	10260e00 	call	10260e0 <__vfprintf_internal>
 1021f20:	dfc00017 	ldw	ra,0(sp)
 1021f24:	dec00404 	addi	sp,sp,16
 1021f28:	f800283a 	ret

01021f2c <_puts_r>:
 1021f2c:	defff604 	addi	sp,sp,-40
 1021f30:	dc000715 	stw	r16,28(sp)
 1021f34:	2021883a 	mov	r16,r4
 1021f38:	2809883a 	mov	r4,r5
 1021f3c:	dc400815 	stw	r17,32(sp)
 1021f40:	dfc00915 	stw	ra,36(sp)
 1021f44:	2823883a 	mov	r17,r5
 1021f48:	10220bc0 	call	10220bc <strlen>
 1021f4c:	00c040f4 	movhi	r3,259
 1021f50:	18d8ba04 	addi	r3,r3,25320
 1021f54:	18c00017 	ldw	r3,0(r3)
 1021f58:	11000044 	addi	r4,r2,1
 1021f5c:	d8800115 	stw	r2,4(sp)
 1021f60:	18c00217 	ldw	r3,8(r3)
 1021f64:	014040f4 	movhi	r5,259
 1021f68:	29514004 	addi	r5,r5,17664
 1021f6c:	1880030b 	ldhu	r2,12(r3)
 1021f70:	d9400215 	stw	r5,8(sp)
 1021f74:	d9000615 	stw	r4,24(sp)
 1021f78:	01400044 	movi	r5,1
 1021f7c:	01000084 	movi	r4,2
 1021f80:	d9000515 	stw	r4,20(sp)
 1021f84:	dc400015 	stw	r17,0(sp)
 1021f88:	d9400315 	stw	r5,12(sp)
 1021f8c:	dec00415 	stw	sp,16(sp)
 1021f90:	1108000c 	andi	r4,r2,8192
 1021f94:	2000061e 	bne	r4,zero,1021fb0 <_puts_r+0x84>
 1021f98:	19401917 	ldw	r5,100(r3)
 1021f9c:	0137ffc4 	movi	r4,-8193
 1021fa0:	10880014 	ori	r2,r2,8192
 1021fa4:	2908703a 	and	r4,r5,r4
 1021fa8:	1880030d 	sth	r2,12(r3)
 1021fac:	19001915 	stw	r4,100(r3)
 1021fb0:	81400217 	ldw	r5,8(r16)
 1021fb4:	8009883a 	mov	r4,r16
 1021fb8:	d9800404 	addi	r6,sp,16
 1021fbc:	10286980 	call	1028698 <__sfvwrite_r>
 1021fc0:	1000061e 	bne	r2,zero,1021fdc <_puts_r+0xb0>
 1021fc4:	00800284 	movi	r2,10
 1021fc8:	dfc00917 	ldw	ra,36(sp)
 1021fcc:	dc400817 	ldw	r17,32(sp)
 1021fd0:	dc000717 	ldw	r16,28(sp)
 1021fd4:	dec00a04 	addi	sp,sp,40
 1021fd8:	f800283a 	ret
 1021fdc:	00bfffc4 	movi	r2,-1
 1021fe0:	003ff906 	br	1021fc8 <_gp+0xfffe3ce4>

01021fe4 <puts>:
 1021fe4:	008040f4 	movhi	r2,259
 1021fe8:	1098ba04 	addi	r2,r2,25320
 1021fec:	200b883a 	mov	r5,r4
 1021ff0:	11000017 	ldw	r4,0(r2)
 1021ff4:	1021f2c1 	jmpi	1021f2c <_puts_r>

01021ff8 <_sprintf_r>:
 1021ff8:	deffe404 	addi	sp,sp,-112
 1021ffc:	2807883a 	mov	r3,r5
 1022000:	dfc01a15 	stw	ra,104(sp)
 1022004:	d9c01b15 	stw	r7,108(sp)
 1022008:	00a00034 	movhi	r2,32768
 102200c:	10bfffc4 	addi	r2,r2,-1
 1022010:	02008204 	movi	r8,520
 1022014:	d8800215 	stw	r2,8(sp)
 1022018:	d8800515 	stw	r2,20(sp)
 102201c:	d80b883a 	mov	r5,sp
 1022020:	d9c01b04 	addi	r7,sp,108
 1022024:	00bfffc4 	movi	r2,-1
 1022028:	d8c00015 	stw	r3,0(sp)
 102202c:	d8c00415 	stw	r3,16(sp)
 1022030:	da00030d 	sth	r8,12(sp)
 1022034:	d880038d 	sth	r2,14(sp)
 1022038:	10221540 	call	1022154 <___svfprintf_internal_r>
 102203c:	d8c00017 	ldw	r3,0(sp)
 1022040:	18000005 	stb	zero,0(r3)
 1022044:	dfc01a17 	ldw	ra,104(sp)
 1022048:	dec01c04 	addi	sp,sp,112
 102204c:	f800283a 	ret

01022050 <sprintf>:
 1022050:	deffe304 	addi	sp,sp,-116
 1022054:	2007883a 	mov	r3,r4
 1022058:	dfc01a15 	stw	ra,104(sp)
 102205c:	d9801b15 	stw	r6,108(sp)
 1022060:	d9c01c15 	stw	r7,112(sp)
 1022064:	010040f4 	movhi	r4,259
 1022068:	2118ba04 	addi	r4,r4,25320
 102206c:	21000017 	ldw	r4,0(r4)
 1022070:	00a00034 	movhi	r2,32768
 1022074:	10bfffc4 	addi	r2,r2,-1
 1022078:	280d883a 	mov	r6,r5
 102207c:	02008204 	movi	r8,520
 1022080:	d8800215 	stw	r2,8(sp)
 1022084:	d8800515 	stw	r2,20(sp)
 1022088:	d80b883a 	mov	r5,sp
 102208c:	d9c01b04 	addi	r7,sp,108
 1022090:	00bfffc4 	movi	r2,-1
 1022094:	d8c00015 	stw	r3,0(sp)
 1022098:	d8c00415 	stw	r3,16(sp)
 102209c:	da00030d 	sth	r8,12(sp)
 10220a0:	d880038d 	sth	r2,14(sp)
 10220a4:	10221540 	call	1022154 <___svfprintf_internal_r>
 10220a8:	d8c00017 	ldw	r3,0(sp)
 10220ac:	18000005 	stb	zero,0(r3)
 10220b0:	dfc01a17 	ldw	ra,104(sp)
 10220b4:	dec01d04 	addi	sp,sp,116
 10220b8:	f800283a 	ret

010220bc <strlen>:
 10220bc:	208000cc 	andi	r2,r4,3
 10220c0:	10002026 	beq	r2,zero,1022144 <strlen+0x88>
 10220c4:	20800007 	ldb	r2,0(r4)
 10220c8:	10002026 	beq	r2,zero,102214c <strlen+0x90>
 10220cc:	2005883a 	mov	r2,r4
 10220d0:	00000206 	br	10220dc <strlen+0x20>
 10220d4:	10c00007 	ldb	r3,0(r2)
 10220d8:	18001826 	beq	r3,zero,102213c <strlen+0x80>
 10220dc:	10800044 	addi	r2,r2,1
 10220e0:	10c000cc 	andi	r3,r2,3
 10220e4:	183ffb1e 	bne	r3,zero,10220d4 <_gp+0xfffe3df0>
 10220e8:	10c00017 	ldw	r3,0(r2)
 10220ec:	01ffbff4 	movhi	r7,65279
 10220f0:	39ffbfc4 	addi	r7,r7,-257
 10220f4:	00ca303a 	nor	r5,zero,r3
 10220f8:	01a02074 	movhi	r6,32897
 10220fc:	19c7883a 	add	r3,r3,r7
 1022100:	31a02004 	addi	r6,r6,-32640
 1022104:	1946703a 	and	r3,r3,r5
 1022108:	1986703a 	and	r3,r3,r6
 102210c:	1800091e 	bne	r3,zero,1022134 <strlen+0x78>
 1022110:	10800104 	addi	r2,r2,4
 1022114:	10c00017 	ldw	r3,0(r2)
 1022118:	19cb883a 	add	r5,r3,r7
 102211c:	00c6303a 	nor	r3,zero,r3
 1022120:	28c6703a 	and	r3,r5,r3
 1022124:	1986703a 	and	r3,r3,r6
 1022128:	183ff926 	beq	r3,zero,1022110 <_gp+0xfffe3e2c>
 102212c:	00000106 	br	1022134 <strlen+0x78>
 1022130:	10800044 	addi	r2,r2,1
 1022134:	10c00007 	ldb	r3,0(r2)
 1022138:	183ffd1e 	bne	r3,zero,1022130 <_gp+0xfffe3e4c>
 102213c:	1105c83a 	sub	r2,r2,r4
 1022140:	f800283a 	ret
 1022144:	2005883a 	mov	r2,r4
 1022148:	003fe706 	br	10220e8 <_gp+0xfffe3e04>
 102214c:	0005883a 	mov	r2,zero
 1022150:	f800283a 	ret

01022154 <___svfprintf_internal_r>:
 1022154:	deffb504 	addi	sp,sp,-300
 1022158:	dfc04a15 	stw	ra,296(sp)
 102215c:	ddc04815 	stw	r23,288(sp)
 1022160:	d9002f15 	stw	r4,188(sp)
 1022164:	282f883a 	mov	r23,r5
 1022168:	d9802915 	stw	r6,164(sp)
 102216c:	d9c02d15 	stw	r7,180(sp)
 1022170:	df004915 	stw	fp,292(sp)
 1022174:	dd804715 	stw	r22,284(sp)
 1022178:	dd404615 	stw	r21,280(sp)
 102217c:	dd004515 	stw	r20,276(sp)
 1022180:	dcc04415 	stw	r19,272(sp)
 1022184:	dc804315 	stw	r18,268(sp)
 1022188:	dc404215 	stw	r17,264(sp)
 102218c:	dc004115 	stw	r16,260(sp)
 1022190:	1028d580 	call	1028d58 <_localeconv_r>
 1022194:	10800017 	ldw	r2,0(r2)
 1022198:	1009883a 	mov	r4,r2
 102219c:	d8803515 	stw	r2,212(sp)
 10221a0:	10220bc0 	call	10220bc <strlen>
 10221a4:	d8803915 	stw	r2,228(sp)
 10221a8:	b880030b 	ldhu	r2,12(r23)
 10221ac:	1080200c 	andi	r2,r2,128
 10221b0:	10000226 	beq	r2,zero,10221bc <___svfprintf_internal_r+0x68>
 10221b4:	b8800417 	ldw	r2,16(r23)
 10221b8:	10065d26 	beq	r2,zero,1023b30 <___svfprintf_internal_r+0x19dc>
 10221bc:	db001dc4 	addi	r12,sp,119
 10221c0:	dd801e04 	addi	r22,sp,120
 10221c4:	d8800404 	addi	r2,sp,16
 10221c8:	050040f4 	movhi	r20,259
 10221cc:	b317c83a 	sub	r11,r22,r12
 10221d0:	a5115184 	addi	r20,r20,17734
 10221d4:	db002815 	stw	r12,160(sp)
 10221d8:	d8801e15 	stw	r2,120(sp)
 10221dc:	d8002015 	stw	zero,128(sp)
 10221e0:	d8001f15 	stw	zero,124(sp)
 10221e4:	d8003315 	stw	zero,204(sp)
 10221e8:	d8003715 	stw	zero,220(sp)
 10221ec:	d8003815 	stw	zero,224(sp)
 10221f0:	d8003b15 	stw	zero,236(sp)
 10221f4:	d8003a15 	stw	zero,232(sp)
 10221f8:	d8003015 	stw	zero,192(sp)
 10221fc:	1011883a 	mov	r8,r2
 1022200:	dac03d15 	stw	r11,244(sp)
 1022204:	db002917 	ldw	r12,164(sp)
 1022208:	60800007 	ldb	r2,0(r12)
 102220c:	1000ab26 	beq	r2,zero,10224bc <___svfprintf_internal_r+0x368>
 1022210:	00c00944 	movi	r3,37
 1022214:	10c0a926 	beq	r2,r3,10224bc <___svfprintf_internal_r+0x368>
 1022218:	6021883a 	mov	r16,r12
 102221c:	00000106 	br	1022224 <___svfprintf_internal_r+0xd0>
 1022220:	10c08426 	beq	r2,r3,1022434 <___svfprintf_internal_r+0x2e0>
 1022224:	84000044 	addi	r16,r16,1
 1022228:	80800007 	ldb	r2,0(r16)
 102222c:	103ffc1e 	bne	r2,zero,1022220 <_gp+0xfffe3f3c>
 1022230:	dac02917 	ldw	r11,164(sp)
 1022234:	82e3c83a 	sub	r17,r16,r11
 1022238:	88000f26 	beq	r17,zero,1022278 <___svfprintf_internal_r+0x124>
 102223c:	d8c02017 	ldw	r3,128(sp)
 1022240:	d8801f17 	ldw	r2,124(sp)
 1022244:	dac02917 	ldw	r11,164(sp)
 1022248:	1c47883a 	add	r3,r3,r17
 102224c:	10800044 	addi	r2,r2,1
 1022250:	d8c02015 	stw	r3,128(sp)
 1022254:	42c00015 	stw	r11,0(r8)
 1022258:	44400115 	stw	r17,4(r8)
 102225c:	d8801f15 	stw	r2,124(sp)
 1022260:	00c001c4 	movi	r3,7
 1022264:	18807616 	blt	r3,r2,1022440 <___svfprintf_internal_r+0x2ec>
 1022268:	42000204 	addi	r8,r8,8
 102226c:	db003017 	ldw	r12,192(sp)
 1022270:	6459883a 	add	r12,r12,r17
 1022274:	db003015 	stw	r12,192(sp)
 1022278:	80800007 	ldb	r2,0(r16)
 102227c:	10007726 	beq	r2,zero,102245c <___svfprintf_internal_r+0x308>
 1022280:	80800044 	addi	r2,r16,1
 1022284:	84000047 	ldb	r16,1(r16)
 1022288:	d8002785 	stb	zero,158(sp)
 102228c:	000d883a 	mov	r6,zero
 1022290:	027fffc4 	movi	r9,-1
 1022294:	d8002e15 	stw	zero,184(sp)
 1022298:	0023883a 	mov	r17,zero
 102229c:	01001604 	movi	r4,88
 10222a0:	01400244 	movi	r5,9
 10222a4:	02800a84 	movi	r10,42
 10222a8:	01c01b04 	movi	r7,108
 10222ac:	10c00044 	addi	r3,r2,1
 10222b0:	80bff804 	addi	r2,r16,-32
 10222b4:	2082e436 	bltu	r4,r2,1022e48 <___svfprintf_internal_r+0xcf4>
 10222b8:	100490ba 	slli	r2,r2,2
 10222bc:	02c040b4 	movhi	r11,258
 10222c0:	5ac8b404 	addi	r11,r11,8912
 10222c4:	12c5883a 	add	r2,r2,r11
 10222c8:	10800017 	ldw	r2,0(r2)
 10222cc:	1000683a 	jmp	r2
 10222d0:	01022c00 	call	1022c0 <__alt_mem_onchip_memory2-0xf1dd40>
 10222d4:	01022e48 	cmpgei	r4,zero,2233
 10222d8:	01022e48 	cmpgei	r4,zero,2233
 10222dc:	01022d80 	call	1022d8 <__alt_mem_onchip_memory2-0xf1dd28>
 10222e0:	01022e48 	cmpgei	r4,zero,2233
 10222e4:	01022e48 	cmpgei	r4,zero,2233
 10222e8:	01022e48 	cmpgei	r4,zero,2233
 10222ec:	01022e48 	cmpgei	r4,zero,2233
 10222f0:	01022e48 	cmpgei	r4,zero,2233
 10222f4:	01022e48 	cmpgei	r4,zero,2233
 10222f8:	01022d44 	movi	r4,2229
 10222fc:	01022d70 	cmpltui	r4,zero,2229
 1022300:	01022e48 	cmpgei	r4,zero,2233
 1022304:	010224c4 	movi	r4,2195
 1022308:	010224d4 	movui	r4,2195
 102230c:	01022e48 	cmpgei	r4,zero,2233
 1022310:	01022514 	movui	r4,2196
 1022314:	01022524 	muli	r4,zero,2196
 1022318:	01022524 	muli	r4,zero,2196
 102231c:	01022524 	muli	r4,zero,2196
 1022320:	01022524 	muli	r4,zero,2196
 1022324:	01022524 	muli	r4,zero,2196
 1022328:	01022524 	muli	r4,zero,2196
 102232c:	01022524 	muli	r4,zero,2196
 1022330:	01022524 	muli	r4,zero,2196
 1022334:	01022524 	muli	r4,zero,2196
 1022338:	01022e48 	cmpgei	r4,zero,2233
 102233c:	01022e48 	cmpgei	r4,zero,2233
 1022340:	01022e48 	cmpgei	r4,zero,2233
 1022344:	01022e48 	cmpgei	r4,zero,2233
 1022348:	01022e48 	cmpgei	r4,zero,2233
 102234c:	01022e48 	cmpgei	r4,zero,2233
 1022350:	01022e48 	cmpgei	r4,zero,2233
 1022354:	01022e48 	cmpgei	r4,zero,2233
 1022358:	01022e48 	cmpgei	r4,zero,2233
 102235c:	01022e48 	cmpgei	r4,zero,2233
 1022360:	01022558 	cmpnei	r4,zero,2197
 1022364:	01022a44 	movi	r4,2217
 1022368:	01022e48 	cmpgei	r4,zero,2233
 102236c:	01022a44 	movi	r4,2217
 1022370:	01022e48 	cmpgei	r4,zero,2233
 1022374:	01022e48 	cmpgei	r4,zero,2233
 1022378:	01022e48 	cmpgei	r4,zero,2233
 102237c:	01022e48 	cmpgei	r4,zero,2233
 1022380:	01022b30 	cmpltui	r4,zero,2220
 1022384:	01022e48 	cmpgei	r4,zero,2233
 1022388:	01022e48 	cmpgei	r4,zero,2233
 102238c:	010229d8 	cmpnei	r4,zero,2215
 1022390:	01022e48 	cmpgei	r4,zero,2233
 1022394:	01022e48 	cmpgei	r4,zero,2233
 1022398:	01022e48 	cmpgei	r4,zero,2233
 102239c:	01022e48 	cmpgei	r4,zero,2233
 10223a0:	01022e48 	cmpgei	r4,zero,2233
 10223a4:	01022a14 	movui	r4,2216
 10223a8:	01022e48 	cmpgei	r4,zero,2233
 10223ac:	01022e48 	cmpgei	r4,zero,2233
 10223b0:	01022c20 	cmpeqi	r4,zero,2224
 10223b4:	01022e48 	cmpgei	r4,zero,2233
 10223b8:	01022e48 	cmpgei	r4,zero,2233
 10223bc:	01022e48 	cmpgei	r4,zero,2233
 10223c0:	01022e48 	cmpgei	r4,zero,2233
 10223c4:	01022e48 	cmpgei	r4,zero,2233
 10223c8:	01022e48 	cmpgei	r4,zero,2233
 10223cc:	01022e48 	cmpgei	r4,zero,2233
 10223d0:	01022e48 	cmpgei	r4,zero,2233
 10223d4:	01022e48 	cmpgei	r4,zero,2233
 10223d8:	01022e48 	cmpgei	r4,zero,2233
 10223dc:	01022d04 	movi	r4,2228
 10223e0:	01022b40 	call	1022b4 <__alt_mem_onchip_memory2-0xf1dd4c>
 10223e4:	01022a44 	movi	r4,2217
 10223e8:	01022a44 	movi	r4,2217
 10223ec:	01022a44 	movi	r4,2217
 10223f0:	01022ba8 	cmpgeui	r4,zero,2222
 10223f4:	01022b40 	call	1022b4 <__alt_mem_onchip_memory2-0xf1dd4c>
 10223f8:	01022e48 	cmpgei	r4,zero,2233
 10223fc:	01022e48 	cmpgei	r4,zero,2233
 1022400:	01022bb8 	rdprs	r4,zero,2222
 1022404:	01022e48 	cmpgei	r4,zero,2233
 1022408:	01022bcc 	andi	r4,zero,2223
 102240c:	01022e0c 	andi	r4,zero,2232
 1022410:	01022ae8 	cmpgeui	r4,zero,2219
 1022414:	01022cf4 	movhi	r4,2227
 1022418:	01022e48 	cmpgei	r4,zero,2233
 102241c:	01022c7c 	xorhi	r4,zero,2225
 1022420:	01022e48 	cmpgei	r4,zero,2233
 1022424:	01022dd0 	cmplti	r4,zero,2231
 1022428:	01022e48 	cmpgei	r4,zero,2233
 102242c:	01022e48 	cmpgei	r4,zero,2233
 1022430:	01022d90 	cmplti	r4,zero,2230
 1022434:	db002917 	ldw	r12,164(sp)
 1022438:	8323c83a 	sub	r17,r16,r12
 102243c:	003f7e06 	br	1022238 <_gp+0xfffe3f54>
 1022440:	d9002f17 	ldw	r4,188(sp)
 1022444:	b80b883a 	mov	r5,r23
 1022448:	b00d883a 	mov	r6,r22
 102244c:	102b3600 	call	102b360 <__ssprint_r>
 1022450:	1000081e 	bne	r2,zero,1022474 <___svfprintf_internal_r+0x320>
 1022454:	da000404 	addi	r8,sp,16
 1022458:	003f8406 	br	102226c <_gp+0xfffe3f88>
 102245c:	d8802017 	ldw	r2,128(sp)
 1022460:	10000426 	beq	r2,zero,1022474 <___svfprintf_internal_r+0x320>
 1022464:	d9002f17 	ldw	r4,188(sp)
 1022468:	b80b883a 	mov	r5,r23
 102246c:	d9801e04 	addi	r6,sp,120
 1022470:	102b3600 	call	102b360 <__ssprint_r>
 1022474:	b880030b 	ldhu	r2,12(r23)
 1022478:	1080100c 	andi	r2,r2,64
 102247c:	10000d1e 	bne	r2,zero,10224b4 <___svfprintf_internal_r+0x360>
 1022480:	d8803017 	ldw	r2,192(sp)
 1022484:	dfc04a17 	ldw	ra,296(sp)
 1022488:	df004917 	ldw	fp,292(sp)
 102248c:	ddc04817 	ldw	r23,288(sp)
 1022490:	dd804717 	ldw	r22,284(sp)
 1022494:	dd404617 	ldw	r21,280(sp)
 1022498:	dd004517 	ldw	r20,276(sp)
 102249c:	dcc04417 	ldw	r19,272(sp)
 10224a0:	dc804317 	ldw	r18,268(sp)
 10224a4:	dc404217 	ldw	r17,264(sp)
 10224a8:	dc004117 	ldw	r16,260(sp)
 10224ac:	dec04b04 	addi	sp,sp,300
 10224b0:	f800283a 	ret
 10224b4:	00bfffc4 	movi	r2,-1
 10224b8:	003ff206 	br	1022484 <_gp+0xfffe41a0>
 10224bc:	dc002917 	ldw	r16,164(sp)
 10224c0:	003f6d06 	br	1022278 <_gp+0xfffe3f94>
 10224c4:	1805883a 	mov	r2,r3
 10224c8:	8c400114 	ori	r17,r17,4
 10224cc:	1c000007 	ldb	r16,0(r3)
 10224d0:	003f7606 	br	10222ac <_gp+0xfffe3fc8>
 10224d4:	1c000007 	ldb	r16,0(r3)
 10224d8:	18800044 	addi	r2,r3,1
 10224dc:	8286e726 	beq	r16,r10,102407c <___svfprintf_internal_r+0x1f28>
 10224e0:	82fff404 	addi	r11,r16,-48
 10224e4:	1007883a 	mov	r3,r2
 10224e8:	0013883a 	mov	r9,zero
 10224ec:	2aff7036 	bltu	r5,r11,10222b0 <_gp+0xfffe3fcc>
 10224f0:	1c000007 	ldb	r16,0(r3)
 10224f4:	4a4002a4 	muli	r9,r9,10
 10224f8:	18c00044 	addi	r3,r3,1
 10224fc:	5a53883a 	add	r9,r11,r9
 1022500:	82fff404 	addi	r11,r16,-48
 1022504:	2afffa2e 	bgeu	r5,r11,10224f0 <_gp+0xfffe420c>
 1022508:	483f690e 	bge	r9,zero,10222b0 <_gp+0xfffe3fcc>
 102250c:	027fffc4 	movi	r9,-1
 1022510:	003f6706 	br	10222b0 <_gp+0xfffe3fcc>
 1022514:	8c402014 	ori	r17,r17,128
 1022518:	1805883a 	mov	r2,r3
 102251c:	1c000007 	ldb	r16,0(r3)
 1022520:	003f6206 	br	10222ac <_gp+0xfffe3fc8>
 1022524:	1805883a 	mov	r2,r3
 1022528:	d8002e15 	stw	zero,184(sp)
 102252c:	82fff404 	addi	r11,r16,-48
 1022530:	0019883a 	mov	r12,zero
 1022534:	14000007 	ldb	r16,0(r2)
 1022538:	630002a4 	muli	r12,r12,10
 102253c:	18c00044 	addi	r3,r3,1
 1022540:	1805883a 	mov	r2,r3
 1022544:	62d9883a 	add	r12,r12,r11
 1022548:	82fff404 	addi	r11,r16,-48
 102254c:	2afff92e 	bgeu	r5,r11,1022534 <_gp+0xfffe4250>
 1022550:	db002e15 	stw	r12,184(sp)
 1022554:	003f5606 	br	10222b0 <_gp+0xfffe3fcc>
 1022558:	8c400414 	ori	r17,r17,16
 102255c:	d8c02915 	stw	r3,164(sp)
 1022560:	d9802785 	stb	r6,158(sp)
 1022564:	8880080c 	andi	r2,r17,32
 1022568:	d8c02d17 	ldw	r3,180(sp)
 102256c:	10017926 	beq	r2,zero,1022b54 <___svfprintf_internal_r+0xa00>
 1022570:	db002d17 	ldw	r12,180(sp)
 1022574:	18800117 	ldw	r2,4(r3)
 1022578:	1cc00017 	ldw	r19,0(r3)
 102257c:	63000204 	addi	r12,r12,8
 1022580:	db002d15 	stw	r12,180(sp)
 1022584:	1039883a 	mov	fp,r2
 1022588:	10017d16 	blt	r2,zero,1022b80 <___svfprintf_internal_r+0xa2c>
 102258c:	dd402783 	ldbu	r21,158(sp)
 1022590:	da403215 	stw	r9,200(sp)
 1022594:	00800044 	movi	r2,1
 1022598:	9f06b03a 	or	r3,r19,fp
 102259c:	48000216 	blt	r9,zero,10225a8 <___svfprintf_internal_r+0x454>
 10225a0:	013fdfc4 	movi	r4,-129
 10225a4:	8922703a 	and	r17,r17,r4
 10225a8:	1802371e 	bne	r3,zero,1022e88 <___svfprintf_internal_r+0xd34>
 10225ac:	48034526 	beq	r9,zero,10232c4 <___svfprintf_internal_r+0x1170>
 10225b0:	10803fcc 	andi	r2,r2,255
 10225b4:	00c00044 	movi	r3,1
 10225b8:	10c25826 	beq	r2,r3,1022f1c <___svfprintf_internal_r+0xdc8>
 10225bc:	00c00084 	movi	r3,2
 10225c0:	10c2db26 	beq	r2,r3,1023130 <___svfprintf_internal_r+0xfdc>
 10225c4:	b007883a 	mov	r3,r22
 10225c8:	9808d0fa 	srli	r4,r19,3
 10225cc:	e00a977a 	slli	r5,fp,29
 10225d0:	e038d0fa 	srli	fp,fp,3
 10225d4:	9cc001cc 	andi	r19,r19,7
 10225d8:	98800c04 	addi	r2,r19,48
 10225dc:	18ffffc4 	addi	r3,r3,-1
 10225e0:	2926b03a 	or	r19,r5,r4
 10225e4:	18800005 	stb	r2,0(r3)
 10225e8:	9f08b03a 	or	r4,r19,fp
 10225ec:	203ff61e 	bne	r4,zero,10225c8 <_gp+0xfffe42e4>
 10225f0:	8900004c 	andi	r4,r17,1
 10225f4:	d8c03115 	stw	r3,196(sp)
 10225f8:	2002db26 	beq	r4,zero,1023168 <___svfprintf_internal_r+0x1014>
 10225fc:	10803fcc 	andi	r2,r2,255
 1022600:	1080201c 	xori	r2,r2,128
 1022604:	10bfe004 	addi	r2,r2,-128
 1022608:	01000c04 	movi	r4,48
 102260c:	11056626 	beq	r2,r4,1023ba8 <___svfprintf_internal_r+0x1a54>
 1022610:	dac03117 	ldw	r11,196(sp)
 1022614:	193fffc5 	stb	r4,-1(r3)
 1022618:	5affffc4 	addi	r11,r11,-1
 102261c:	dac03115 	stw	r11,196(sp)
 1022620:	b2e5c83a 	sub	r18,r22,r11
 1022624:	9005883a 	mov	r2,r18
 1022628:	9240010e 	bge	r18,r9,1022630 <___svfprintf_internal_r+0x4dc>
 102262c:	4805883a 	mov	r2,r9
 1022630:	d8802a15 	stw	r2,168(sp)
 1022634:	d8003415 	stw	zero,208(sp)
 1022638:	a8803fcc 	andi	r2,r21,255
 102263c:	1080201c 	xori	r2,r2,128
 1022640:	10bfe004 	addi	r2,r2,-128
 1022644:	10000326 	beq	r2,zero,1022654 <___svfprintf_internal_r+0x500>
 1022648:	d8c02a17 	ldw	r3,168(sp)
 102264c:	18c00044 	addi	r3,r3,1
 1022650:	d8c02a15 	stw	r3,168(sp)
 1022654:	8ac0008c 	andi	r11,r17,2
 1022658:	dac02b15 	stw	r11,172(sp)
 102265c:	58000326 	beq	r11,zero,102266c <___svfprintf_internal_r+0x518>
 1022660:	db002a17 	ldw	r12,168(sp)
 1022664:	63000084 	addi	r12,r12,2
 1022668:	db002a15 	stw	r12,168(sp)
 102266c:	88c0210c 	andi	r3,r17,132
 1022670:	d8c02c15 	stw	r3,176(sp)
 1022674:	1802021e 	bne	r3,zero,1022e80 <___svfprintf_internal_r+0xd2c>
 1022678:	dac02e17 	ldw	r11,184(sp)
 102267c:	db002a17 	ldw	r12,168(sp)
 1022680:	5b39c83a 	sub	fp,r11,r12
 1022684:	0701fe0e 	bge	zero,fp,1022e80 <___svfprintf_internal_r+0xd2c>
 1022688:	02400404 	movi	r9,16
 102268c:	d8c02017 	ldw	r3,128(sp)
 1022690:	d8801f17 	ldw	r2,124(sp)
 1022694:	4f057d0e 	bge	r9,fp,1023c8c <___svfprintf_internal_r+0x1b38>
 1022698:	014040f4 	movhi	r5,259
 102269c:	e009883a 	mov	r4,fp
 10226a0:	29515584 	addi	r5,r5,17750
 10226a4:	dc003c15 	stw	r16,240(sp)
 10226a8:	9039883a 	mov	fp,r18
 10226ac:	d9403615 	stw	r5,216(sp)
 10226b0:	8825883a 	mov	r18,r17
 10226b4:	482b883a 	mov	r21,r9
 10226b8:	04c001c4 	movi	r19,7
 10226bc:	dc002f17 	ldw	r16,188(sp)
 10226c0:	2023883a 	mov	r17,r4
 10226c4:	00000306 	br	10226d4 <___svfprintf_internal_r+0x580>
 10226c8:	8c7ffc04 	addi	r17,r17,-16
 10226cc:	42000204 	addi	r8,r8,8
 10226d0:	ac40130e 	bge	r21,r17,1022720 <___svfprintf_internal_r+0x5cc>
 10226d4:	02c040f4 	movhi	r11,259
 10226d8:	18c00404 	addi	r3,r3,16
 10226dc:	10800044 	addi	r2,r2,1
 10226e0:	5ad15584 	addi	r11,r11,17750
 10226e4:	42c00015 	stw	r11,0(r8)
 10226e8:	45400115 	stw	r21,4(r8)
 10226ec:	d8c02015 	stw	r3,128(sp)
 10226f0:	d8801f15 	stw	r2,124(sp)
 10226f4:	98bff40e 	bge	r19,r2,10226c8 <_gp+0xfffe43e4>
 10226f8:	8009883a 	mov	r4,r16
 10226fc:	b80b883a 	mov	r5,r23
 1022700:	b00d883a 	mov	r6,r22
 1022704:	102b3600 	call	102b360 <__ssprint_r>
 1022708:	103f5a1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102270c:	8c7ffc04 	addi	r17,r17,-16
 1022710:	d8c02017 	ldw	r3,128(sp)
 1022714:	d8801f17 	ldw	r2,124(sp)
 1022718:	da000404 	addi	r8,sp,16
 102271c:	ac7fed16 	blt	r21,r17,10226d4 <_gp+0xfffe43f0>
 1022720:	dc003c17 	ldw	r16,240(sp)
 1022724:	8809883a 	mov	r4,r17
 1022728:	9023883a 	mov	r17,r18
 102272c:	e025883a 	mov	r18,fp
 1022730:	2039883a 	mov	fp,r4
 1022734:	db003617 	ldw	r12,216(sp)
 1022738:	e0c7883a 	add	r3,fp,r3
 102273c:	10800044 	addi	r2,r2,1
 1022740:	43000015 	stw	r12,0(r8)
 1022744:	47000115 	stw	fp,4(r8)
 1022748:	d8c02015 	stw	r3,128(sp)
 102274c:	d8801f15 	stw	r2,124(sp)
 1022750:	010001c4 	movi	r4,7
 1022754:	20833516 	blt	r4,r2,102342c <___svfprintf_internal_r+0x12d8>
 1022758:	d8802787 	ldb	r2,158(sp)
 102275c:	42000204 	addi	r8,r8,8
 1022760:	10000c26 	beq	r2,zero,1022794 <___svfprintf_internal_r+0x640>
 1022764:	d8801f17 	ldw	r2,124(sp)
 1022768:	d9002784 	addi	r4,sp,158
 102276c:	18c00044 	addi	r3,r3,1
 1022770:	10800044 	addi	r2,r2,1
 1022774:	41000015 	stw	r4,0(r8)
 1022778:	01000044 	movi	r4,1
 102277c:	41000115 	stw	r4,4(r8)
 1022780:	d8c02015 	stw	r3,128(sp)
 1022784:	d8801f15 	stw	r2,124(sp)
 1022788:	010001c4 	movi	r4,7
 102278c:	2082df16 	blt	r4,r2,102330c <___svfprintf_internal_r+0x11b8>
 1022790:	42000204 	addi	r8,r8,8
 1022794:	dac02b17 	ldw	r11,172(sp)
 1022798:	58000c26 	beq	r11,zero,10227cc <___svfprintf_internal_r+0x678>
 102279c:	d8801f17 	ldw	r2,124(sp)
 10227a0:	d9002704 	addi	r4,sp,156
 10227a4:	18c00084 	addi	r3,r3,2
 10227a8:	10800044 	addi	r2,r2,1
 10227ac:	41000015 	stw	r4,0(r8)
 10227b0:	01000084 	movi	r4,2
 10227b4:	41000115 	stw	r4,4(r8)
 10227b8:	d8c02015 	stw	r3,128(sp)
 10227bc:	d8801f15 	stw	r2,124(sp)
 10227c0:	010001c4 	movi	r4,7
 10227c4:	2082d916 	blt	r4,r2,102332c <___svfprintf_internal_r+0x11d8>
 10227c8:	42000204 	addi	r8,r8,8
 10227cc:	db002c17 	ldw	r12,176(sp)
 10227d0:	00802004 	movi	r2,128
 10227d4:	60822026 	beq	r12,r2,1023058 <___svfprintf_internal_r+0xf04>
 10227d8:	db003217 	ldw	r12,200(sp)
 10227dc:	64abc83a 	sub	r21,r12,r18
 10227e0:	0540310e 	bge	zero,r21,10228a8 <___svfprintf_internal_r+0x754>
 10227e4:	07000404 	movi	fp,16
 10227e8:	d8801f17 	ldw	r2,124(sp)
 10227ec:	e544180e 	bge	fp,r21,1023850 <___svfprintf_internal_r+0x16fc>
 10227f0:	014040f4 	movhi	r5,259
 10227f4:	a809883a 	mov	r4,r21
 10227f8:	29515184 	addi	r5,r5,17734
 10227fc:	dc002c15 	stw	r16,176(sp)
 1022800:	902b883a 	mov	r21,r18
 1022804:	d9402b15 	stw	r5,172(sp)
 1022808:	8825883a 	mov	r18,r17
 102280c:	04c001c4 	movi	r19,7
 1022810:	dc002f17 	ldw	r16,188(sp)
 1022814:	2023883a 	mov	r17,r4
 1022818:	00000306 	br	1022828 <___svfprintf_internal_r+0x6d4>
 102281c:	8c7ffc04 	addi	r17,r17,-16
 1022820:	42000204 	addi	r8,r8,8
 1022824:	e440110e 	bge	fp,r17,102286c <___svfprintf_internal_r+0x718>
 1022828:	18c00404 	addi	r3,r3,16
 102282c:	10800044 	addi	r2,r2,1
 1022830:	45000015 	stw	r20,0(r8)
 1022834:	47000115 	stw	fp,4(r8)
 1022838:	d8c02015 	stw	r3,128(sp)
 102283c:	d8801f15 	stw	r2,124(sp)
 1022840:	98bff60e 	bge	r19,r2,102281c <_gp+0xfffe4538>
 1022844:	8009883a 	mov	r4,r16
 1022848:	b80b883a 	mov	r5,r23
 102284c:	b00d883a 	mov	r6,r22
 1022850:	102b3600 	call	102b360 <__ssprint_r>
 1022854:	103f071e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1022858:	8c7ffc04 	addi	r17,r17,-16
 102285c:	d8c02017 	ldw	r3,128(sp)
 1022860:	d8801f17 	ldw	r2,124(sp)
 1022864:	da000404 	addi	r8,sp,16
 1022868:	e47fef16 	blt	fp,r17,1022828 <_gp+0xfffe4544>
 102286c:	dc002c17 	ldw	r16,176(sp)
 1022870:	8809883a 	mov	r4,r17
 1022874:	9023883a 	mov	r17,r18
 1022878:	a825883a 	mov	r18,r21
 102287c:	202b883a 	mov	r21,r4
 1022880:	dac02b17 	ldw	r11,172(sp)
 1022884:	1d47883a 	add	r3,r3,r21
 1022888:	10800044 	addi	r2,r2,1
 102288c:	42c00015 	stw	r11,0(r8)
 1022890:	45400115 	stw	r21,4(r8)
 1022894:	d8c02015 	stw	r3,128(sp)
 1022898:	d8801f15 	stw	r2,124(sp)
 102289c:	010001c4 	movi	r4,7
 10228a0:	20829216 	blt	r4,r2,10232ec <___svfprintf_internal_r+0x1198>
 10228a4:	42000204 	addi	r8,r8,8
 10228a8:	8880400c 	andi	r2,r17,256
 10228ac:	1001a11e 	bne	r2,zero,1022f34 <___svfprintf_internal_r+0xde0>
 10228b0:	d8801f17 	ldw	r2,124(sp)
 10228b4:	db003117 	ldw	r12,196(sp)
 10228b8:	1c87883a 	add	r3,r3,r18
 10228bc:	10800044 	addi	r2,r2,1
 10228c0:	43000015 	stw	r12,0(r8)
 10228c4:	44800115 	stw	r18,4(r8)
 10228c8:	d8c02015 	stw	r3,128(sp)
 10228cc:	d8801f15 	stw	r2,124(sp)
 10228d0:	010001c4 	movi	r4,7
 10228d4:	20826d16 	blt	r4,r2,102328c <___svfprintf_internal_r+0x1138>
 10228d8:	42000204 	addi	r8,r8,8
 10228dc:	8c40010c 	andi	r17,r17,4
 10228e0:	88003226 	beq	r17,zero,10229ac <___svfprintf_internal_r+0x858>
 10228e4:	db002e17 	ldw	r12,184(sp)
 10228e8:	dac02a17 	ldw	r11,168(sp)
 10228ec:	62e1c83a 	sub	r16,r12,r11
 10228f0:	04002e0e 	bge	zero,r16,10229ac <___svfprintf_internal_r+0x858>
 10228f4:	04400404 	movi	r17,16
 10228f8:	d8801f17 	ldw	r2,124(sp)
 10228fc:	8c05240e 	bge	r17,r16,1023d90 <___svfprintf_internal_r+0x1c3c>
 1022900:	010040f4 	movhi	r4,259
 1022904:	21115584 	addi	r4,r4,17750
 1022908:	d9003615 	stw	r4,216(sp)
 102290c:	048001c4 	movi	r18,7
 1022910:	dcc02f17 	ldw	r19,188(sp)
 1022914:	00000306 	br	1022924 <___svfprintf_internal_r+0x7d0>
 1022918:	843ffc04 	addi	r16,r16,-16
 102291c:	42000204 	addi	r8,r8,8
 1022920:	8c00130e 	bge	r17,r16,1022970 <___svfprintf_internal_r+0x81c>
 1022924:	014040f4 	movhi	r5,259
 1022928:	18c00404 	addi	r3,r3,16
 102292c:	10800044 	addi	r2,r2,1
 1022930:	29515584 	addi	r5,r5,17750
 1022934:	41400015 	stw	r5,0(r8)
 1022938:	44400115 	stw	r17,4(r8)
 102293c:	d8c02015 	stw	r3,128(sp)
 1022940:	d8801f15 	stw	r2,124(sp)
 1022944:	90bff40e 	bge	r18,r2,1022918 <_gp+0xfffe4634>
 1022948:	9809883a 	mov	r4,r19
 102294c:	b80b883a 	mov	r5,r23
 1022950:	b00d883a 	mov	r6,r22
 1022954:	102b3600 	call	102b360 <__ssprint_r>
 1022958:	103ec61e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102295c:	843ffc04 	addi	r16,r16,-16
 1022960:	d8c02017 	ldw	r3,128(sp)
 1022964:	d8801f17 	ldw	r2,124(sp)
 1022968:	da000404 	addi	r8,sp,16
 102296c:	8c3fed16 	blt	r17,r16,1022924 <_gp+0xfffe4640>
 1022970:	dac03617 	ldw	r11,216(sp)
 1022974:	1c07883a 	add	r3,r3,r16
 1022978:	10800044 	addi	r2,r2,1
 102297c:	42c00015 	stw	r11,0(r8)
 1022980:	44000115 	stw	r16,4(r8)
 1022984:	d8c02015 	stw	r3,128(sp)
 1022988:	d8801f15 	stw	r2,124(sp)
 102298c:	010001c4 	movi	r4,7
 1022990:	2080060e 	bge	r4,r2,10229ac <___svfprintf_internal_r+0x858>
 1022994:	d9002f17 	ldw	r4,188(sp)
 1022998:	b80b883a 	mov	r5,r23
 102299c:	b00d883a 	mov	r6,r22
 10229a0:	102b3600 	call	102b360 <__ssprint_r>
 10229a4:	103eb31e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10229a8:	d8c02017 	ldw	r3,128(sp)
 10229ac:	d8802a17 	ldw	r2,168(sp)
 10229b0:	db002e17 	ldw	r12,184(sp)
 10229b4:	1300010e 	bge	r2,r12,10229bc <___svfprintf_internal_r+0x868>
 10229b8:	6005883a 	mov	r2,r12
 10229bc:	dac03017 	ldw	r11,192(sp)
 10229c0:	5897883a 	add	r11,r11,r2
 10229c4:	dac03015 	stw	r11,192(sp)
 10229c8:	1802381e 	bne	r3,zero,10232ac <___svfprintf_internal_r+0x1158>
 10229cc:	d8001f15 	stw	zero,124(sp)
 10229d0:	da000404 	addi	r8,sp,16
 10229d4:	003e0b06 	br	1022204 <_gp+0xfffe3f20>
 10229d8:	8c400414 	ori	r17,r17,16
 10229dc:	d8c02915 	stw	r3,164(sp)
 10229e0:	8880080c 	andi	r2,r17,32
 10229e4:	10010c26 	beq	r2,zero,1022e18 <___svfprintf_internal_r+0xcc4>
 10229e8:	db002d17 	ldw	r12,180(sp)
 10229ec:	0005883a 	mov	r2,zero
 10229f0:	64c00017 	ldw	r19,0(r12)
 10229f4:	67000117 	ldw	fp,4(r12)
 10229f8:	63000204 	addi	r12,r12,8
 10229fc:	db002d15 	stw	r12,180(sp)
 1022a00:	9f06b03a 	or	r3,r19,fp
 1022a04:	d8002785 	stb	zero,158(sp)
 1022a08:	da403215 	stw	r9,200(sp)
 1022a0c:	002b883a 	mov	r21,zero
 1022a10:	003ee206 	br	102259c <_gp+0xfffe42b8>
 1022a14:	8c400414 	ori	r17,r17,16
 1022a18:	d8c02915 	stw	r3,164(sp)
 1022a1c:	8880080c 	andi	r2,r17,32
 1022a20:	1000ee26 	beq	r2,zero,1022ddc <___svfprintf_internal_r+0xc88>
 1022a24:	dac02d17 	ldw	r11,180(sp)
 1022a28:	00800044 	movi	r2,1
 1022a2c:	5cc00017 	ldw	r19,0(r11)
 1022a30:	5f000117 	ldw	fp,4(r11)
 1022a34:	5ac00204 	addi	r11,r11,8
 1022a38:	dac02d15 	stw	r11,180(sp)
 1022a3c:	9f06b03a 	or	r3,r19,fp
 1022a40:	003ff006 	br	1022a04 <_gp+0xfffe4720>
 1022a44:	db002d17 	ldw	r12,180(sp)
 1022a48:	dac02d17 	ldw	r11,180(sp)
 1022a4c:	d8c02915 	stw	r3,164(sp)
 1022a50:	63000017 	ldw	r12,0(r12)
 1022a54:	5ac00117 	ldw	r11,4(r11)
 1022a58:	d9802785 	stb	r6,158(sp)
 1022a5c:	6009883a 	mov	r4,r12
 1022a60:	580b883a 	mov	r5,r11
 1022a64:	db003715 	stw	r12,220(sp)
 1022a68:	da004015 	stw	r8,256(sp)
 1022a6c:	da403f15 	stw	r9,252(sp)
 1022a70:	dac03815 	stw	r11,224(sp)
 1022a74:	102b0b80 	call	102b0b8 <__fpclassifyd>
 1022a78:	db002d17 	ldw	r12,180(sp)
 1022a7c:	04800044 	movi	r18,1
 1022a80:	da004017 	ldw	r8,256(sp)
 1022a84:	64c00204 	addi	r19,r12,8
 1022a88:	da403f17 	ldw	r9,252(sp)
 1022a8c:	d9003717 	ldw	r4,220(sp)
 1022a90:	d9403817 	ldw	r5,224(sp)
 1022a94:	14832c1e 	bne	r2,r18,1023748 <___svfprintf_internal_r+0x15f4>
 1022a98:	000d883a 	mov	r6,zero
 1022a9c:	000f883a 	mov	r7,zero
 1022aa0:	10301780 	call	1030178 <__ledf2>
 1022aa4:	da004017 	ldw	r8,256(sp)
 1022aa8:	1004c416 	blt	r2,zero,1023dbc <___svfprintf_internal_r+0x1c68>
 1022aac:	dd402783 	ldbu	r21,158(sp)
 1022ab0:	008011c4 	movi	r2,71
 1022ab4:	14041a0e 	bge	r2,r16,1023b20 <___svfprintf_internal_r+0x19cc>
 1022ab8:	00c040f4 	movhi	r3,259
 1022abc:	18d14204 	addi	r3,r3,17672
 1022ac0:	d8c03115 	stw	r3,196(sp)
 1022ac4:	02c000c4 	movi	r11,3
 1022ac8:	00bfdfc4 	movi	r2,-129
 1022acc:	dac02a15 	stw	r11,168(sp)
 1022ad0:	88a2703a 	and	r17,r17,r2
 1022ad4:	dcc02d15 	stw	r19,180(sp)
 1022ad8:	5825883a 	mov	r18,r11
 1022adc:	d8003215 	stw	zero,200(sp)
 1022ae0:	d8003415 	stw	zero,208(sp)
 1022ae4:	003ed406 	br	1022638 <_gp+0xfffe4354>
 1022ae8:	db002d17 	ldw	r12,180(sp)
 1022aec:	00800c04 	movi	r2,48
 1022af0:	d8802705 	stb	r2,156(sp)
 1022af4:	64c00017 	ldw	r19,0(r12)
 1022af8:	00801e04 	movi	r2,120
 1022afc:	d8802745 	stb	r2,157(sp)
 1022b00:	008040f4 	movhi	r2,259
 1022b04:	10914a04 	addi	r2,r2,17704
 1022b08:	63000104 	addi	r12,r12,4
 1022b0c:	d8c02915 	stw	r3,164(sp)
 1022b10:	d8803b15 	stw	r2,236(sp)
 1022b14:	0039883a 	mov	fp,zero
 1022b18:	8c400094 	ori	r17,r17,2
 1022b1c:	db002d15 	stw	r12,180(sp)
 1022b20:	00800084 	movi	r2,2
 1022b24:	04001e04 	movi	r16,120
 1022b28:	9807883a 	mov	r3,r19
 1022b2c:	003fb506 	br	1022a04 <_gp+0xfffe4720>
 1022b30:	8c400214 	ori	r17,r17,8
 1022b34:	1805883a 	mov	r2,r3
 1022b38:	1c000007 	ldb	r16,0(r3)
 1022b3c:	003ddb06 	br	10222ac <_gp+0xfffe3fc8>
 1022b40:	d8c02915 	stw	r3,164(sp)
 1022b44:	d9802785 	stb	r6,158(sp)
 1022b48:	8880080c 	andi	r2,r17,32
 1022b4c:	d8c02d17 	ldw	r3,180(sp)
 1022b50:	103e871e 	bne	r2,zero,1022570 <_gp+0xfffe428c>
 1022b54:	8880040c 	andi	r2,r17,16
 1022b58:	10027a1e 	bne	r2,zero,1023544 <___svfprintf_internal_r+0x13f0>
 1022b5c:	8880100c 	andi	r2,r17,64
 1022b60:	10027826 	beq	r2,zero,1023544 <___svfprintf_internal_r+0x13f0>
 1022b64:	1cc0000f 	ldh	r19,0(r3)
 1022b68:	db002d17 	ldw	r12,180(sp)
 1022b6c:	9839d7fa 	srai	fp,r19,31
 1022b70:	63000104 	addi	r12,r12,4
 1022b74:	db002d15 	stw	r12,180(sp)
 1022b78:	e005883a 	mov	r2,fp
 1022b7c:	103e830e 	bge	r2,zero,102258c <_gp+0xfffe42a8>
 1022b80:	04e7c83a 	sub	r19,zero,r19
 1022b84:	9804c03a 	cmpne	r2,r19,zero
 1022b88:	0739c83a 	sub	fp,zero,fp
 1022b8c:	e0b9c83a 	sub	fp,fp,r2
 1022b90:	05400b44 	movi	r21,45
 1022b94:	dd402785 	stb	r21,158(sp)
 1022b98:	da403215 	stw	r9,200(sp)
 1022b9c:	00800044 	movi	r2,1
 1022ba0:	9f06b03a 	or	r3,r19,fp
 1022ba4:	003e7d06 	br	102259c <_gp+0xfffe42b8>
 1022ba8:	8c401014 	ori	r17,r17,64
 1022bac:	1805883a 	mov	r2,r3
 1022bb0:	1c000007 	ldb	r16,0(r3)
 1022bb4:	003dbd06 	br	10222ac <_gp+0xfffe3fc8>
 1022bb8:	1c000007 	ldb	r16,0(r3)
 1022bbc:	81c37126 	beq	r16,r7,1023984 <___svfprintf_internal_r+0x1830>
 1022bc0:	8c400414 	ori	r17,r17,16
 1022bc4:	1805883a 	mov	r2,r3
 1022bc8:	003db806 	br	10222ac <_gp+0xfffe3fc8>
 1022bcc:	d8c02915 	stw	r3,164(sp)
 1022bd0:	d9802785 	stb	r6,158(sp)
 1022bd4:	8880080c 	andi	r2,r17,32
 1022bd8:	1002f026 	beq	r2,zero,102379c <___svfprintf_internal_r+0x1648>
 1022bdc:	db002d17 	ldw	r12,180(sp)
 1022be0:	dac03017 	ldw	r11,192(sp)
 1022be4:	60800017 	ldw	r2,0(r12)
 1022be8:	5807d7fa 	srai	r3,r11,31
 1022bec:	63000104 	addi	r12,r12,4
 1022bf0:	db002d15 	stw	r12,180(sp)
 1022bf4:	12c00015 	stw	r11,0(r2)
 1022bf8:	10c00115 	stw	r3,4(r2)
 1022bfc:	003d8106 	br	1022204 <_gp+0xfffe3f20>
 1022c00:	30803fcc 	andi	r2,r6,255
 1022c04:	1080201c 	xori	r2,r2,128
 1022c08:	10bfe004 	addi	r2,r2,-128
 1022c0c:	1002fd1e 	bne	r2,zero,1023804 <___svfprintf_internal_r+0x16b0>
 1022c10:	1805883a 	mov	r2,r3
 1022c14:	01800804 	movi	r6,32
 1022c18:	1c000007 	ldb	r16,0(r3)
 1022c1c:	003da306 	br	10222ac <_gp+0xfffe3fc8>
 1022c20:	030040f4 	movhi	r12,259
 1022c24:	63114504 	addi	r12,r12,17684
 1022c28:	d8c02915 	stw	r3,164(sp)
 1022c2c:	d9802785 	stb	r6,158(sp)
 1022c30:	db003b15 	stw	r12,236(sp)
 1022c34:	88c0080c 	andi	r3,r17,32
 1022c38:	d8802d17 	ldw	r2,180(sp)
 1022c3c:	18005c26 	beq	r3,zero,1022db0 <___svfprintf_internal_r+0xc5c>
 1022c40:	dac02d17 	ldw	r11,180(sp)
 1022c44:	14c00017 	ldw	r19,0(r2)
 1022c48:	17000117 	ldw	fp,4(r2)
 1022c4c:	5ac00204 	addi	r11,r11,8
 1022c50:	dac02d15 	stw	r11,180(sp)
 1022c54:	8880004c 	andi	r2,r17,1
 1022c58:	10022f26 	beq	r2,zero,1023518 <___svfprintf_internal_r+0x13c4>
 1022c5c:	9f06b03a 	or	r3,r19,fp
 1022c60:	1802eb26 	beq	r3,zero,1023810 <___svfprintf_internal_r+0x16bc>
 1022c64:	00800c04 	movi	r2,48
 1022c68:	d8802705 	stb	r2,156(sp)
 1022c6c:	dc002745 	stb	r16,157(sp)
 1022c70:	8c400094 	ori	r17,r17,2
 1022c74:	00800084 	movi	r2,2
 1022c78:	003f6206 	br	1022a04 <_gp+0xfffe4720>
 1022c7c:	dac02d17 	ldw	r11,180(sp)
 1022c80:	db002d17 	ldw	r12,180(sp)
 1022c84:	d8c02915 	stw	r3,164(sp)
 1022c88:	5ac00017 	ldw	r11,0(r11)
 1022c8c:	d8002785 	stb	zero,158(sp)
 1022c90:	64c00104 	addi	r19,r12,4
 1022c94:	dac03115 	stw	r11,196(sp)
 1022c98:	58042e26 	beq	r11,zero,1023d54 <___svfprintf_internal_r+0x1c00>
 1022c9c:	d9003117 	ldw	r4,196(sp)
 1022ca0:	4803c416 	blt	r9,zero,1023bb4 <___svfprintf_internal_r+0x1a60>
 1022ca4:	480d883a 	mov	r6,r9
 1022ca8:	000b883a 	mov	r5,zero
 1022cac:	da004015 	stw	r8,256(sp)
 1022cb0:	da403f15 	stw	r9,252(sp)
 1022cb4:	10296ec0 	call	10296ec <memchr>
 1022cb8:	da004017 	ldw	r8,256(sp)
 1022cbc:	da403f17 	ldw	r9,252(sp)
 1022cc0:	10048a26 	beq	r2,zero,1023eec <___svfprintf_internal_r+0x1d98>
 1022cc4:	d8c03117 	ldw	r3,196(sp)
 1022cc8:	10e5c83a 	sub	r18,r2,r3
 1022ccc:	4c80010e 	bge	r9,r18,1022cd4 <___svfprintf_internal_r+0xb80>
 1022cd0:	4825883a 	mov	r18,r9
 1022cd4:	9005883a 	mov	r2,r18
 1022cd8:	9003bb16 	blt	r18,zero,1023bc8 <___svfprintf_internal_r+0x1a74>
 1022cdc:	dd402783 	ldbu	r21,158(sp)
 1022ce0:	d8802a15 	stw	r2,168(sp)
 1022ce4:	dcc02d15 	stw	r19,180(sp)
 1022ce8:	d8003215 	stw	zero,200(sp)
 1022cec:	d8003415 	stw	zero,208(sp)
 1022cf0:	003e5106 	br	1022638 <_gp+0xfffe4354>
 1022cf4:	8c400814 	ori	r17,r17,32
 1022cf8:	1805883a 	mov	r2,r3
 1022cfc:	1c000007 	ldb	r16,0(r3)
 1022d00:	003d6a06 	br	10222ac <_gp+0xfffe3fc8>
 1022d04:	db002d17 	ldw	r12,180(sp)
 1022d08:	d8c02915 	stw	r3,164(sp)
 1022d0c:	dac01404 	addi	r11,sp,80
 1022d10:	60800017 	ldw	r2,0(r12)
 1022d14:	00c00044 	movi	r3,1
 1022d18:	63000104 	addi	r12,r12,4
 1022d1c:	d8801405 	stb	r2,80(sp)
 1022d20:	d8c02a15 	stw	r3,168(sp)
 1022d24:	d8002785 	stb	zero,158(sp)
 1022d28:	db002d15 	stw	r12,180(sp)
 1022d2c:	1825883a 	mov	r18,r3
 1022d30:	d8003215 	stw	zero,200(sp)
 1022d34:	d8003415 	stw	zero,208(sp)
 1022d38:	dac03115 	stw	r11,196(sp)
 1022d3c:	0005883a 	mov	r2,zero
 1022d40:	003e4406 	br	1022654 <_gp+0xfffe4370>
 1022d44:	dac02d17 	ldw	r11,180(sp)
 1022d48:	db002d17 	ldw	r12,180(sp)
 1022d4c:	5ac00017 	ldw	r11,0(r11)
 1022d50:	dac02e15 	stw	r11,184(sp)
 1022d54:	62c00104 	addi	r11,r12,4
 1022d58:	db002e17 	ldw	r12,184(sp)
 1022d5c:	60030316 	blt	r12,zero,102396c <___svfprintf_internal_r+0x1818>
 1022d60:	dac02d15 	stw	r11,180(sp)
 1022d64:	1805883a 	mov	r2,r3
 1022d68:	1c000007 	ldb	r16,0(r3)
 1022d6c:	003d4f06 	br	10222ac <_gp+0xfffe3fc8>
 1022d70:	1805883a 	mov	r2,r3
 1022d74:	01800ac4 	movi	r6,43
 1022d78:	1c000007 	ldb	r16,0(r3)
 1022d7c:	003d4b06 	br	10222ac <_gp+0xfffe3fc8>
 1022d80:	8c400054 	ori	r17,r17,1
 1022d84:	1805883a 	mov	r2,r3
 1022d88:	1c000007 	ldb	r16,0(r3)
 1022d8c:	003d4706 	br	10222ac <_gp+0xfffe3fc8>
 1022d90:	008040f4 	movhi	r2,259
 1022d94:	10914a04 	addi	r2,r2,17704
 1022d98:	d8c02915 	stw	r3,164(sp)
 1022d9c:	d8803b15 	stw	r2,236(sp)
 1022da0:	d9802785 	stb	r6,158(sp)
 1022da4:	88c0080c 	andi	r3,r17,32
 1022da8:	d8802d17 	ldw	r2,180(sp)
 1022dac:	183fa41e 	bne	r3,zero,1022c40 <_gp+0xfffe495c>
 1022db0:	88c0040c 	andi	r3,r17,16
 1022db4:	18028b26 	beq	r3,zero,10237e4 <___svfprintf_internal_r+0x1690>
 1022db8:	db002d17 	ldw	r12,180(sp)
 1022dbc:	14c00017 	ldw	r19,0(r2)
 1022dc0:	0039883a 	mov	fp,zero
 1022dc4:	63000104 	addi	r12,r12,4
 1022dc8:	db002d15 	stw	r12,180(sp)
 1022dcc:	003fa106 	br	1022c54 <_gp+0xfffe4970>
 1022dd0:	d8c02915 	stw	r3,164(sp)
 1022dd4:	8880080c 	andi	r2,r17,32
 1022dd8:	103f121e 	bne	r2,zero,1022a24 <_gp+0xfffe4740>
 1022ddc:	8880040c 	andi	r2,r17,16
 1022de0:	1001df1e 	bne	r2,zero,1023560 <___svfprintf_internal_r+0x140c>
 1022de4:	8880100c 	andi	r2,r17,64
 1022de8:	1001dd26 	beq	r2,zero,1023560 <___svfprintf_internal_r+0x140c>
 1022dec:	dac02d17 	ldw	r11,180(sp)
 1022df0:	0039883a 	mov	fp,zero
 1022df4:	00800044 	movi	r2,1
 1022df8:	5cc0000b 	ldhu	r19,0(r11)
 1022dfc:	5ac00104 	addi	r11,r11,4
 1022e00:	dac02d15 	stw	r11,180(sp)
 1022e04:	9807883a 	mov	r3,r19
 1022e08:	003efe06 	br	1022a04 <_gp+0xfffe4720>
 1022e0c:	d8c02915 	stw	r3,164(sp)
 1022e10:	8880080c 	andi	r2,r17,32
 1022e14:	103ef41e 	bne	r2,zero,10229e8 <_gp+0xfffe4704>
 1022e18:	8880040c 	andi	r2,r17,16
 1022e1c:	1001c11e 	bne	r2,zero,1023524 <___svfprintf_internal_r+0x13d0>
 1022e20:	8880100c 	andi	r2,r17,64
 1022e24:	1001bf26 	beq	r2,zero,1023524 <___svfprintf_internal_r+0x13d0>
 1022e28:	db002d17 	ldw	r12,180(sp)
 1022e2c:	0039883a 	mov	fp,zero
 1022e30:	0005883a 	mov	r2,zero
 1022e34:	64c0000b 	ldhu	r19,0(r12)
 1022e38:	63000104 	addi	r12,r12,4
 1022e3c:	db002d15 	stw	r12,180(sp)
 1022e40:	9807883a 	mov	r3,r19
 1022e44:	003eef06 	br	1022a04 <_gp+0xfffe4720>
 1022e48:	d8c02915 	stw	r3,164(sp)
 1022e4c:	d9802785 	stb	r6,158(sp)
 1022e50:	803d8226 	beq	r16,zero,102245c <_gp+0xfffe4178>
 1022e54:	02c00044 	movi	r11,1
 1022e58:	db001404 	addi	r12,sp,80
 1022e5c:	dac02a15 	stw	r11,168(sp)
 1022e60:	dc001405 	stb	r16,80(sp)
 1022e64:	d8002785 	stb	zero,158(sp)
 1022e68:	5825883a 	mov	r18,r11
 1022e6c:	d8003215 	stw	zero,200(sp)
 1022e70:	d8003415 	stw	zero,208(sp)
 1022e74:	db003115 	stw	r12,196(sp)
 1022e78:	0005883a 	mov	r2,zero
 1022e7c:	003df506 	br	1022654 <_gp+0xfffe4370>
 1022e80:	d8c02017 	ldw	r3,128(sp)
 1022e84:	003e3606 	br	1022760 <_gp+0xfffe447c>
 1022e88:	10803fcc 	andi	r2,r2,255
 1022e8c:	00c00044 	movi	r3,1
 1022e90:	10fdca1e 	bne	r2,r3,10225bc <_gp+0xfffe42d8>
 1022e94:	e000021e 	bne	fp,zero,1022ea0 <___svfprintf_internal_r+0xd4c>
 1022e98:	00800244 	movi	r2,9
 1022e9c:	14c01f2e 	bgeu	r2,r19,1022f1c <___svfprintf_internal_r+0xdc8>
 1022ea0:	dc002a15 	stw	r16,168(sp)
 1022ea4:	dc402b15 	stw	r17,172(sp)
 1022ea8:	9821883a 	mov	r16,r19
 1022eac:	e023883a 	mov	r17,fp
 1022eb0:	b025883a 	mov	r18,r22
 1022eb4:	4027883a 	mov	r19,r8
 1022eb8:	4839883a 	mov	fp,r9
 1022ebc:	8009883a 	mov	r4,r16
 1022ec0:	880b883a 	mov	r5,r17
 1022ec4:	01800284 	movi	r6,10
 1022ec8:	000f883a 	mov	r7,zero
 1022ecc:	102e91c0 	call	102e91c <__umoddi3>
 1022ed0:	10800c04 	addi	r2,r2,48
 1022ed4:	94bfffc4 	addi	r18,r18,-1
 1022ed8:	8009883a 	mov	r4,r16
 1022edc:	880b883a 	mov	r5,r17
 1022ee0:	01800284 	movi	r6,10
 1022ee4:	000f883a 	mov	r7,zero
 1022ee8:	90800005 	stb	r2,0(r18)
 1022eec:	102e35c0 	call	102e35c <__udivdi3>
 1022ef0:	1021883a 	mov	r16,r2
 1022ef4:	10c4b03a 	or	r2,r2,r3
 1022ef8:	1823883a 	mov	r17,r3
 1022efc:	103fef1e 	bne	r2,zero,1022ebc <_gp+0xfffe4bd8>
 1022f00:	dc803115 	stw	r18,196(sp)
 1022f04:	dc002a17 	ldw	r16,168(sp)
 1022f08:	9811883a 	mov	r8,r19
 1022f0c:	dc402b17 	ldw	r17,172(sp)
 1022f10:	e013883a 	mov	r9,fp
 1022f14:	b4a5c83a 	sub	r18,r22,r18
 1022f18:	003dc206 	br	1022624 <_gp+0xfffe4340>
 1022f1c:	9cc00c04 	addi	r19,r19,48
 1022f20:	db001dc4 	addi	r12,sp,119
 1022f24:	dcc01dc5 	stb	r19,119(sp)
 1022f28:	dc803d17 	ldw	r18,244(sp)
 1022f2c:	db003115 	stw	r12,196(sp)
 1022f30:	003dbc06 	br	1022624 <_gp+0xfffe4340>
 1022f34:	00801944 	movi	r2,101
 1022f38:	14008d0e 	bge	r2,r16,1023170 <___svfprintf_internal_r+0x101c>
 1022f3c:	d9003717 	ldw	r4,220(sp)
 1022f40:	d9403817 	ldw	r5,224(sp)
 1022f44:	000d883a 	mov	r6,zero
 1022f48:	000f883a 	mov	r7,zero
 1022f4c:	d8c03e15 	stw	r3,248(sp)
 1022f50:	da004015 	stw	r8,256(sp)
 1022f54:	10300140 	call	1030014 <__eqdf2>
 1022f58:	d8c03e17 	ldw	r3,248(sp)
 1022f5c:	da004017 	ldw	r8,256(sp)
 1022f60:	1000fd1e 	bne	r2,zero,1023358 <___svfprintf_internal_r+0x1204>
 1022f64:	d8801f17 	ldw	r2,124(sp)
 1022f68:	010040f4 	movhi	r4,259
 1022f6c:	21115104 	addi	r4,r4,17732
 1022f70:	18c00044 	addi	r3,r3,1
 1022f74:	10800044 	addi	r2,r2,1
 1022f78:	41000015 	stw	r4,0(r8)
 1022f7c:	01000044 	movi	r4,1
 1022f80:	41000115 	stw	r4,4(r8)
 1022f84:	d8c02015 	stw	r3,128(sp)
 1022f88:	d8801f15 	stw	r2,124(sp)
 1022f8c:	010001c4 	movi	r4,7
 1022f90:	20823316 	blt	r4,r2,1023860 <___svfprintf_internal_r+0x170c>
 1022f94:	42000204 	addi	r8,r8,8
 1022f98:	d8802617 	ldw	r2,152(sp)
 1022f9c:	dac03317 	ldw	r11,204(sp)
 1022fa0:	12c00216 	blt	r2,r11,1022fac <___svfprintf_internal_r+0xe58>
 1022fa4:	8880004c 	andi	r2,r17,1
 1022fa8:	103e4c26 	beq	r2,zero,10228dc <_gp+0xfffe45f8>
 1022fac:	db003917 	ldw	r12,228(sp)
 1022fb0:	d8801f17 	ldw	r2,124(sp)
 1022fb4:	dac03517 	ldw	r11,212(sp)
 1022fb8:	1b07883a 	add	r3,r3,r12
 1022fbc:	10800044 	addi	r2,r2,1
 1022fc0:	42c00015 	stw	r11,0(r8)
 1022fc4:	43000115 	stw	r12,4(r8)
 1022fc8:	d8c02015 	stw	r3,128(sp)
 1022fcc:	d8801f15 	stw	r2,124(sp)
 1022fd0:	010001c4 	movi	r4,7
 1022fd4:	20826f16 	blt	r4,r2,1023994 <___svfprintf_internal_r+0x1840>
 1022fd8:	42000204 	addi	r8,r8,8
 1022fdc:	db003317 	ldw	r12,204(sp)
 1022fe0:	643fffc4 	addi	r16,r12,-1
 1022fe4:	043e3d0e 	bge	zero,r16,10228dc <_gp+0xfffe45f8>
 1022fe8:	04800404 	movi	r18,16
 1022fec:	d8801f17 	ldw	r2,124(sp)
 1022ff0:	94009a0e 	bge	r18,r16,102325c <___svfprintf_internal_r+0x1108>
 1022ff4:	014040f4 	movhi	r5,259
 1022ff8:	29515184 	addi	r5,r5,17734
 1022ffc:	d9402b15 	stw	r5,172(sp)
 1023000:	054001c4 	movi	r21,7
 1023004:	dcc02f17 	ldw	r19,188(sp)
 1023008:	00000306 	br	1023018 <___svfprintf_internal_r+0xec4>
 102300c:	42000204 	addi	r8,r8,8
 1023010:	843ffc04 	addi	r16,r16,-16
 1023014:	9400940e 	bge	r18,r16,1023268 <___svfprintf_internal_r+0x1114>
 1023018:	18c00404 	addi	r3,r3,16
 102301c:	10800044 	addi	r2,r2,1
 1023020:	45000015 	stw	r20,0(r8)
 1023024:	44800115 	stw	r18,4(r8)
 1023028:	d8c02015 	stw	r3,128(sp)
 102302c:	d8801f15 	stw	r2,124(sp)
 1023030:	a8bff60e 	bge	r21,r2,102300c <_gp+0xfffe4d28>
 1023034:	9809883a 	mov	r4,r19
 1023038:	b80b883a 	mov	r5,r23
 102303c:	b00d883a 	mov	r6,r22
 1023040:	102b3600 	call	102b360 <__ssprint_r>
 1023044:	103d0b1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023048:	d8c02017 	ldw	r3,128(sp)
 102304c:	d8801f17 	ldw	r2,124(sp)
 1023050:	da000404 	addi	r8,sp,16
 1023054:	003fee06 	br	1023010 <_gp+0xfffe4d2c>
 1023058:	dac02e17 	ldw	r11,184(sp)
 102305c:	db002a17 	ldw	r12,168(sp)
 1023060:	5b2bc83a 	sub	r21,r11,r12
 1023064:	057ddc0e 	bge	zero,r21,10227d8 <_gp+0xfffe44f4>
 1023068:	07000404 	movi	fp,16
 102306c:	d8801f17 	ldw	r2,124(sp)
 1023070:	e5435d0e 	bge	fp,r21,1023de8 <___svfprintf_internal_r+0x1c94>
 1023074:	014040f4 	movhi	r5,259
 1023078:	a809883a 	mov	r4,r21
 102307c:	29515184 	addi	r5,r5,17734
 1023080:	dc002c15 	stw	r16,176(sp)
 1023084:	902b883a 	mov	r21,r18
 1023088:	d9402b15 	stw	r5,172(sp)
 102308c:	8825883a 	mov	r18,r17
 1023090:	04c001c4 	movi	r19,7
 1023094:	dc002f17 	ldw	r16,188(sp)
 1023098:	2023883a 	mov	r17,r4
 102309c:	00000306 	br	10230ac <___svfprintf_internal_r+0xf58>
 10230a0:	8c7ffc04 	addi	r17,r17,-16
 10230a4:	42000204 	addi	r8,r8,8
 10230a8:	e440110e 	bge	fp,r17,10230f0 <___svfprintf_internal_r+0xf9c>
 10230ac:	18c00404 	addi	r3,r3,16
 10230b0:	10800044 	addi	r2,r2,1
 10230b4:	45000015 	stw	r20,0(r8)
 10230b8:	47000115 	stw	fp,4(r8)
 10230bc:	d8c02015 	stw	r3,128(sp)
 10230c0:	d8801f15 	stw	r2,124(sp)
 10230c4:	98bff60e 	bge	r19,r2,10230a0 <_gp+0xfffe4dbc>
 10230c8:	8009883a 	mov	r4,r16
 10230cc:	b80b883a 	mov	r5,r23
 10230d0:	b00d883a 	mov	r6,r22
 10230d4:	102b3600 	call	102b360 <__ssprint_r>
 10230d8:	103ce61e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10230dc:	8c7ffc04 	addi	r17,r17,-16
 10230e0:	d8c02017 	ldw	r3,128(sp)
 10230e4:	d8801f17 	ldw	r2,124(sp)
 10230e8:	da000404 	addi	r8,sp,16
 10230ec:	e47fef16 	blt	fp,r17,10230ac <_gp+0xfffe4dc8>
 10230f0:	dc002c17 	ldw	r16,176(sp)
 10230f4:	8809883a 	mov	r4,r17
 10230f8:	9023883a 	mov	r17,r18
 10230fc:	a825883a 	mov	r18,r21
 1023100:	202b883a 	mov	r21,r4
 1023104:	dac02b17 	ldw	r11,172(sp)
 1023108:	1d47883a 	add	r3,r3,r21
 102310c:	10800044 	addi	r2,r2,1
 1023110:	42c00015 	stw	r11,0(r8)
 1023114:	45400115 	stw	r21,4(r8)
 1023118:	d8c02015 	stw	r3,128(sp)
 102311c:	d8801f15 	stw	r2,124(sp)
 1023120:	010001c4 	movi	r4,7
 1023124:	20818016 	blt	r4,r2,1023728 <___svfprintf_internal_r+0x15d4>
 1023128:	42000204 	addi	r8,r8,8
 102312c:	003daa06 	br	10227d8 <_gp+0xfffe44f4>
 1023130:	d9403b17 	ldw	r5,236(sp)
 1023134:	b007883a 	mov	r3,r22
 1023138:	988003cc 	andi	r2,r19,15
 102313c:	e008973a 	slli	r4,fp,28
 1023140:	2885883a 	add	r2,r5,r2
 1023144:	9826d13a 	srli	r19,r19,4
 1023148:	10800003 	ldbu	r2,0(r2)
 102314c:	e038d13a 	srli	fp,fp,4
 1023150:	18ffffc4 	addi	r3,r3,-1
 1023154:	24e6b03a 	or	r19,r4,r19
 1023158:	18800005 	stb	r2,0(r3)
 102315c:	9f04b03a 	or	r2,r19,fp
 1023160:	103ff51e 	bne	r2,zero,1023138 <_gp+0xfffe4e54>
 1023164:	d8c03115 	stw	r3,196(sp)
 1023168:	b0e5c83a 	sub	r18,r22,r3
 102316c:	003d2d06 	br	1022624 <_gp+0xfffe4340>
 1023170:	db003317 	ldw	r12,204(sp)
 1023174:	00800044 	movi	r2,1
 1023178:	18c00044 	addi	r3,r3,1
 102317c:	13014b0e 	bge	r2,r12,10236ac <___svfprintf_internal_r+0x1558>
 1023180:	dc001f17 	ldw	r16,124(sp)
 1023184:	dac03117 	ldw	r11,196(sp)
 1023188:	00800044 	movi	r2,1
 102318c:	84000044 	addi	r16,r16,1
 1023190:	40800115 	stw	r2,4(r8)
 1023194:	42c00015 	stw	r11,0(r8)
 1023198:	d8c02015 	stw	r3,128(sp)
 102319c:	dc001f15 	stw	r16,124(sp)
 10231a0:	008001c4 	movi	r2,7
 10231a4:	14014e16 	blt	r2,r16,10236e0 <___svfprintf_internal_r+0x158c>
 10231a8:	42000204 	addi	r8,r8,8
 10231ac:	db003917 	ldw	r12,228(sp)
 10231b0:	dac03517 	ldw	r11,212(sp)
 10231b4:	84000044 	addi	r16,r16,1
 10231b8:	1b07883a 	add	r3,r3,r12
 10231bc:	42c00015 	stw	r11,0(r8)
 10231c0:	43000115 	stw	r12,4(r8)
 10231c4:	d8c02015 	stw	r3,128(sp)
 10231c8:	dc001f15 	stw	r16,124(sp)
 10231cc:	008001c4 	movi	r2,7
 10231d0:	14014c16 	blt	r2,r16,1023704 <___svfprintf_internal_r+0x15b0>
 10231d4:	44800204 	addi	r18,r8,8
 10231d8:	d9003717 	ldw	r4,220(sp)
 10231dc:	d9403817 	ldw	r5,224(sp)
 10231e0:	000d883a 	mov	r6,zero
 10231e4:	000f883a 	mov	r7,zero
 10231e8:	d8c03e15 	stw	r3,248(sp)
 10231ec:	10300140 	call	1030014 <__eqdf2>
 10231f0:	d8c03e17 	ldw	r3,248(sp)
 10231f4:	db003317 	ldw	r12,204(sp)
 10231f8:	10009526 	beq	r2,zero,1023450 <___svfprintf_internal_r+0x12fc>
 10231fc:	dac03117 	ldw	r11,196(sp)
 1023200:	60bfffc4 	addi	r2,r12,-1
 1023204:	1887883a 	add	r3,r3,r2
 1023208:	59000044 	addi	r4,r11,1
 102320c:	84000044 	addi	r16,r16,1
 1023210:	90800115 	stw	r2,4(r18)
 1023214:	91000015 	stw	r4,0(r18)
 1023218:	d8c02015 	stw	r3,128(sp)
 102321c:	dc001f15 	stw	r16,124(sp)
 1023220:	008001c4 	movi	r2,7
 1023224:	1400b316 	blt	r2,r16,10234f4 <___svfprintf_internal_r+0x13a0>
 1023228:	94800204 	addi	r18,r18,8
 102322c:	dac03a17 	ldw	r11,232(sp)
 1023230:	dd4022c4 	addi	r21,sp,139
 1023234:	84000044 	addi	r16,r16,1
 1023238:	58c7883a 	add	r3,r11,r3
 102323c:	95400015 	stw	r21,0(r18)
 1023240:	92c00115 	stw	r11,4(r18)
 1023244:	d8c02015 	stw	r3,128(sp)
 1023248:	dc001f15 	stw	r16,124(sp)
 102324c:	008001c4 	movi	r2,7
 1023250:	14000e16 	blt	r2,r16,102328c <___svfprintf_internal_r+0x1138>
 1023254:	92000204 	addi	r8,r18,8
 1023258:	003da006 	br	10228dc <_gp+0xfffe45f8>
 102325c:	010040f4 	movhi	r4,259
 1023260:	21115184 	addi	r4,r4,17734
 1023264:	d9002b15 	stw	r4,172(sp)
 1023268:	dac02b17 	ldw	r11,172(sp)
 102326c:	1c07883a 	add	r3,r3,r16
 1023270:	44000115 	stw	r16,4(r8)
 1023274:	42c00015 	stw	r11,0(r8)
 1023278:	10800044 	addi	r2,r2,1
 102327c:	d8c02015 	stw	r3,128(sp)
 1023280:	d8801f15 	stw	r2,124(sp)
 1023284:	010001c4 	movi	r4,7
 1023288:	20bd930e 	bge	r4,r2,10228d8 <_gp+0xfffe45f4>
 102328c:	d9002f17 	ldw	r4,188(sp)
 1023290:	b80b883a 	mov	r5,r23
 1023294:	b00d883a 	mov	r6,r22
 1023298:	102b3600 	call	102b360 <__ssprint_r>
 102329c:	103c751e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10232a0:	d8c02017 	ldw	r3,128(sp)
 10232a4:	da000404 	addi	r8,sp,16
 10232a8:	003d8c06 	br	10228dc <_gp+0xfffe45f8>
 10232ac:	d9002f17 	ldw	r4,188(sp)
 10232b0:	b80b883a 	mov	r5,r23
 10232b4:	b00d883a 	mov	r6,r22
 10232b8:	102b3600 	call	102b360 <__ssprint_r>
 10232bc:	103dc326 	beq	r2,zero,10229cc <_gp+0xfffe46e8>
 10232c0:	003c6c06 	br	1022474 <_gp+0xfffe4190>
 10232c4:	10803fcc 	andi	r2,r2,255
 10232c8:	1000201e 	bne	r2,zero,102334c <___svfprintf_internal_r+0x11f8>
 10232cc:	8880004c 	andi	r2,r17,1
 10232d0:	10001e26 	beq	r2,zero,102334c <___svfprintf_internal_r+0x11f8>
 10232d4:	00800c04 	movi	r2,48
 10232d8:	d8c01dc4 	addi	r3,sp,119
 10232dc:	d8801dc5 	stb	r2,119(sp)
 10232e0:	dc803d17 	ldw	r18,244(sp)
 10232e4:	d8c03115 	stw	r3,196(sp)
 10232e8:	003cce06 	br	1022624 <_gp+0xfffe4340>
 10232ec:	d9002f17 	ldw	r4,188(sp)
 10232f0:	b80b883a 	mov	r5,r23
 10232f4:	b00d883a 	mov	r6,r22
 10232f8:	102b3600 	call	102b360 <__ssprint_r>
 10232fc:	103c5d1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023300:	d8c02017 	ldw	r3,128(sp)
 1023304:	da000404 	addi	r8,sp,16
 1023308:	003d6706 	br	10228a8 <_gp+0xfffe45c4>
 102330c:	d9002f17 	ldw	r4,188(sp)
 1023310:	b80b883a 	mov	r5,r23
 1023314:	b00d883a 	mov	r6,r22
 1023318:	102b3600 	call	102b360 <__ssprint_r>
 102331c:	103c551e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023320:	d8c02017 	ldw	r3,128(sp)
 1023324:	da000404 	addi	r8,sp,16
 1023328:	003d1a06 	br	1022794 <_gp+0xfffe44b0>
 102332c:	d9002f17 	ldw	r4,188(sp)
 1023330:	b80b883a 	mov	r5,r23
 1023334:	b00d883a 	mov	r6,r22
 1023338:	102b3600 	call	102b360 <__ssprint_r>
 102333c:	103c4d1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023340:	d8c02017 	ldw	r3,128(sp)
 1023344:	da000404 	addi	r8,sp,16
 1023348:	003d2006 	br	10227cc <_gp+0xfffe44e8>
 102334c:	0025883a 	mov	r18,zero
 1023350:	dd803115 	stw	r22,196(sp)
 1023354:	003cb306 	br	1022624 <_gp+0xfffe4340>
 1023358:	dc002617 	ldw	r16,152(sp)
 102335c:	0401480e 	bge	zero,r16,1023880 <___svfprintf_internal_r+0x172c>
 1023360:	db003117 	ldw	r12,196(sp)
 1023364:	dac03317 	ldw	r11,204(sp)
 1023368:	62e1883a 	add	r16,r12,r11
 102336c:	db003417 	ldw	r12,208(sp)
 1023370:	5825883a 	mov	r18,r11
 1023374:	62c0010e 	bge	r12,r11,102337c <___svfprintf_internal_r+0x1228>
 1023378:	6025883a 	mov	r18,r12
 102337c:	04800b0e 	bge	zero,r18,10233ac <___svfprintf_internal_r+0x1258>
 1023380:	d8801f17 	ldw	r2,124(sp)
 1023384:	dac03117 	ldw	r11,196(sp)
 1023388:	1c87883a 	add	r3,r3,r18
 102338c:	10800044 	addi	r2,r2,1
 1023390:	42c00015 	stw	r11,0(r8)
 1023394:	44800115 	stw	r18,4(r8)
 1023398:	d8c02015 	stw	r3,128(sp)
 102339c:	d8801f15 	stw	r2,124(sp)
 10233a0:	010001c4 	movi	r4,7
 10233a4:	20823f16 	blt	r4,r2,1023ca4 <___svfprintf_internal_r+0x1b50>
 10233a8:	42000204 	addi	r8,r8,8
 10233ac:	90023b16 	blt	r18,zero,1023c9c <___svfprintf_internal_r+0x1b48>
 10233b0:	db003417 	ldw	r12,208(sp)
 10233b4:	64a5c83a 	sub	r18,r12,r18
 10233b8:	0480780e 	bge	zero,r18,102359c <___svfprintf_internal_r+0x1448>
 10233bc:	05400404 	movi	r21,16
 10233c0:	d8801f17 	ldw	r2,124(sp)
 10233c4:	ac81140e 	bge	r21,r18,1023818 <___svfprintf_internal_r+0x16c4>
 10233c8:	014040f4 	movhi	r5,259
 10233cc:	29515184 	addi	r5,r5,17734
 10233d0:	d9402b15 	stw	r5,172(sp)
 10233d4:	070001c4 	movi	fp,7
 10233d8:	dcc02f17 	ldw	r19,188(sp)
 10233dc:	00000306 	br	10233ec <___svfprintf_internal_r+0x1298>
 10233e0:	42000204 	addi	r8,r8,8
 10233e4:	94bffc04 	addi	r18,r18,-16
 10233e8:	ac810e0e 	bge	r21,r18,1023824 <___svfprintf_internal_r+0x16d0>
 10233ec:	18c00404 	addi	r3,r3,16
 10233f0:	10800044 	addi	r2,r2,1
 10233f4:	45000015 	stw	r20,0(r8)
 10233f8:	45400115 	stw	r21,4(r8)
 10233fc:	d8c02015 	stw	r3,128(sp)
 1023400:	d8801f15 	stw	r2,124(sp)
 1023404:	e0bff60e 	bge	fp,r2,10233e0 <_gp+0xfffe50fc>
 1023408:	9809883a 	mov	r4,r19
 102340c:	b80b883a 	mov	r5,r23
 1023410:	b00d883a 	mov	r6,r22
 1023414:	102b3600 	call	102b360 <__ssprint_r>
 1023418:	103c161e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102341c:	d8c02017 	ldw	r3,128(sp)
 1023420:	d8801f17 	ldw	r2,124(sp)
 1023424:	da000404 	addi	r8,sp,16
 1023428:	003fee06 	br	10233e4 <_gp+0xfffe5100>
 102342c:	d9002f17 	ldw	r4,188(sp)
 1023430:	b80b883a 	mov	r5,r23
 1023434:	b00d883a 	mov	r6,r22
 1023438:	102b3600 	call	102b360 <__ssprint_r>
 102343c:	103c0d1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023440:	d8c02017 	ldw	r3,128(sp)
 1023444:	d8802787 	ldb	r2,158(sp)
 1023448:	da000404 	addi	r8,sp,16
 102344c:	003cc406 	br	1022760 <_gp+0xfffe447c>
 1023450:	657fffc4 	addi	r21,r12,-1
 1023454:	057f750e 	bge	zero,r21,102322c <_gp+0xfffe4f48>
 1023458:	07000404 	movi	fp,16
 102345c:	e542ef0e 	bge	fp,r21,102401c <___svfprintf_internal_r+0x1ec8>
 1023460:	010040f4 	movhi	r4,259
 1023464:	21115184 	addi	r4,r4,17734
 1023468:	d9002b15 	stw	r4,172(sp)
 102346c:	01c001c4 	movi	r7,7
 1023470:	dcc02f17 	ldw	r19,188(sp)
 1023474:	00000306 	br	1023484 <___svfprintf_internal_r+0x1330>
 1023478:	ad7ffc04 	addi	r21,r21,-16
 102347c:	94800204 	addi	r18,r18,8
 1023480:	e540130e 	bge	fp,r21,10234d0 <___svfprintf_internal_r+0x137c>
 1023484:	18c00404 	addi	r3,r3,16
 1023488:	84000044 	addi	r16,r16,1
 102348c:	95000015 	stw	r20,0(r18)
 1023490:	97000115 	stw	fp,4(r18)
 1023494:	d8c02015 	stw	r3,128(sp)
 1023498:	dc001f15 	stw	r16,124(sp)
 102349c:	3c3ff60e 	bge	r7,r16,1023478 <_gp+0xfffe5194>
 10234a0:	9809883a 	mov	r4,r19
 10234a4:	b80b883a 	mov	r5,r23
 10234a8:	b00d883a 	mov	r6,r22
 10234ac:	d9c03e15 	stw	r7,248(sp)
 10234b0:	102b3600 	call	102b360 <__ssprint_r>
 10234b4:	d9c03e17 	ldw	r7,248(sp)
 10234b8:	103bee1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10234bc:	ad7ffc04 	addi	r21,r21,-16
 10234c0:	d8c02017 	ldw	r3,128(sp)
 10234c4:	dc001f17 	ldw	r16,124(sp)
 10234c8:	dc800404 	addi	r18,sp,16
 10234cc:	e57fed16 	blt	fp,r21,1023484 <_gp+0xfffe51a0>
 10234d0:	dac02b17 	ldw	r11,172(sp)
 10234d4:	1d47883a 	add	r3,r3,r21
 10234d8:	84000044 	addi	r16,r16,1
 10234dc:	92c00015 	stw	r11,0(r18)
 10234e0:	95400115 	stw	r21,4(r18)
 10234e4:	d8c02015 	stw	r3,128(sp)
 10234e8:	dc001f15 	stw	r16,124(sp)
 10234ec:	008001c4 	movi	r2,7
 10234f0:	143f4d0e 	bge	r2,r16,1023228 <_gp+0xfffe4f44>
 10234f4:	d9002f17 	ldw	r4,188(sp)
 10234f8:	b80b883a 	mov	r5,r23
 10234fc:	b00d883a 	mov	r6,r22
 1023500:	102b3600 	call	102b360 <__ssprint_r>
 1023504:	103bdb1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023508:	d8c02017 	ldw	r3,128(sp)
 102350c:	dc001f17 	ldw	r16,124(sp)
 1023510:	dc800404 	addi	r18,sp,16
 1023514:	003f4506 	br	102322c <_gp+0xfffe4f48>
 1023518:	00800084 	movi	r2,2
 102351c:	9f06b03a 	or	r3,r19,fp
 1023520:	003d3806 	br	1022a04 <_gp+0xfffe4720>
 1023524:	dac02d17 	ldw	r11,180(sp)
 1023528:	0039883a 	mov	fp,zero
 102352c:	0005883a 	mov	r2,zero
 1023530:	5cc00017 	ldw	r19,0(r11)
 1023534:	5ac00104 	addi	r11,r11,4
 1023538:	dac02d15 	stw	r11,180(sp)
 102353c:	9807883a 	mov	r3,r19
 1023540:	003d3006 	br	1022a04 <_gp+0xfffe4720>
 1023544:	1cc00017 	ldw	r19,0(r3)
 1023548:	dac02d17 	ldw	r11,180(sp)
 102354c:	9839d7fa 	srai	fp,r19,31
 1023550:	5ac00104 	addi	r11,r11,4
 1023554:	dac02d15 	stw	r11,180(sp)
 1023558:	e005883a 	mov	r2,fp
 102355c:	003c0a06 	br	1022588 <_gp+0xfffe42a4>
 1023560:	db002d17 	ldw	r12,180(sp)
 1023564:	0039883a 	mov	fp,zero
 1023568:	00800044 	movi	r2,1
 102356c:	64c00017 	ldw	r19,0(r12)
 1023570:	63000104 	addi	r12,r12,4
 1023574:	db002d15 	stw	r12,180(sp)
 1023578:	9807883a 	mov	r3,r19
 102357c:	003d2106 	br	1022a04 <_gp+0xfffe4720>
 1023580:	d9002f17 	ldw	r4,188(sp)
 1023584:	b80b883a 	mov	r5,r23
 1023588:	b00d883a 	mov	r6,r22
 102358c:	102b3600 	call	102b360 <__ssprint_r>
 1023590:	103bb81e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023594:	d8c02017 	ldw	r3,128(sp)
 1023598:	da000404 	addi	r8,sp,16
 102359c:	db003117 	ldw	r12,196(sp)
 10235a0:	dac03417 	ldw	r11,208(sp)
 10235a4:	d8802617 	ldw	r2,152(sp)
 10235a8:	62e5883a 	add	r18,r12,r11
 10235ac:	db003317 	ldw	r12,204(sp)
 10235b0:	13000216 	blt	r2,r12,10235bc <___svfprintf_internal_r+0x1468>
 10235b4:	8900004c 	andi	r4,r17,1
 10235b8:	20000c26 	beq	r4,zero,10235ec <___svfprintf_internal_r+0x1498>
 10235bc:	dac03917 	ldw	r11,228(sp)
 10235c0:	d9001f17 	ldw	r4,124(sp)
 10235c4:	db003517 	ldw	r12,212(sp)
 10235c8:	1ac7883a 	add	r3,r3,r11
 10235cc:	21000044 	addi	r4,r4,1
 10235d0:	43000015 	stw	r12,0(r8)
 10235d4:	42c00115 	stw	r11,4(r8)
 10235d8:	d8c02015 	stw	r3,128(sp)
 10235dc:	d9001f15 	stw	r4,124(sp)
 10235e0:	014001c4 	movi	r5,7
 10235e4:	2901b716 	blt	r5,r4,1023cc4 <___svfprintf_internal_r+0x1b70>
 10235e8:	42000204 	addi	r8,r8,8
 10235ec:	dac03317 	ldw	r11,204(sp)
 10235f0:	8489c83a 	sub	r4,r16,r18
 10235f4:	5885c83a 	sub	r2,r11,r2
 10235f8:	1021883a 	mov	r16,r2
 10235fc:	2080010e 	bge	r4,r2,1023604 <___svfprintf_internal_r+0x14b0>
 1023600:	2021883a 	mov	r16,r4
 1023604:	04000a0e 	bge	zero,r16,1023630 <___svfprintf_internal_r+0x14dc>
 1023608:	d9001f17 	ldw	r4,124(sp)
 102360c:	1c07883a 	add	r3,r3,r16
 1023610:	44800015 	stw	r18,0(r8)
 1023614:	21000044 	addi	r4,r4,1
 1023618:	44000115 	stw	r16,4(r8)
 102361c:	d8c02015 	stw	r3,128(sp)
 1023620:	d9001f15 	stw	r4,124(sp)
 1023624:	014001c4 	movi	r5,7
 1023628:	2901bf16 	blt	r5,r4,1023d28 <___svfprintf_internal_r+0x1bd4>
 102362c:	42000204 	addi	r8,r8,8
 1023630:	8001bb16 	blt	r16,zero,1023d20 <___svfprintf_internal_r+0x1bcc>
 1023634:	1421c83a 	sub	r16,r2,r16
 1023638:	043ca80e 	bge	zero,r16,10228dc <_gp+0xfffe45f8>
 102363c:	04800404 	movi	r18,16
 1023640:	d8801f17 	ldw	r2,124(sp)
 1023644:	943f050e 	bge	r18,r16,102325c <_gp+0xfffe4f78>
 1023648:	014040f4 	movhi	r5,259
 102364c:	29515184 	addi	r5,r5,17734
 1023650:	d9402b15 	stw	r5,172(sp)
 1023654:	054001c4 	movi	r21,7
 1023658:	dcc02f17 	ldw	r19,188(sp)
 102365c:	00000306 	br	102366c <___svfprintf_internal_r+0x1518>
 1023660:	42000204 	addi	r8,r8,8
 1023664:	843ffc04 	addi	r16,r16,-16
 1023668:	943eff0e 	bge	r18,r16,1023268 <_gp+0xfffe4f84>
 102366c:	18c00404 	addi	r3,r3,16
 1023670:	10800044 	addi	r2,r2,1
 1023674:	45000015 	stw	r20,0(r8)
 1023678:	44800115 	stw	r18,4(r8)
 102367c:	d8c02015 	stw	r3,128(sp)
 1023680:	d8801f15 	stw	r2,124(sp)
 1023684:	a8bff60e 	bge	r21,r2,1023660 <_gp+0xfffe537c>
 1023688:	9809883a 	mov	r4,r19
 102368c:	b80b883a 	mov	r5,r23
 1023690:	b00d883a 	mov	r6,r22
 1023694:	102b3600 	call	102b360 <__ssprint_r>
 1023698:	103b761e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102369c:	d8c02017 	ldw	r3,128(sp)
 10236a0:	d8801f17 	ldw	r2,124(sp)
 10236a4:	da000404 	addi	r8,sp,16
 10236a8:	003fee06 	br	1023664 <_gp+0xfffe5380>
 10236ac:	8888703a 	and	r4,r17,r2
 10236b0:	203eb31e 	bne	r4,zero,1023180 <_gp+0xfffe4e9c>
 10236b4:	dc001f17 	ldw	r16,124(sp)
 10236b8:	db003117 	ldw	r12,196(sp)
 10236bc:	40800115 	stw	r2,4(r8)
 10236c0:	84000044 	addi	r16,r16,1
 10236c4:	43000015 	stw	r12,0(r8)
 10236c8:	d8c02015 	stw	r3,128(sp)
 10236cc:	dc001f15 	stw	r16,124(sp)
 10236d0:	008001c4 	movi	r2,7
 10236d4:	143f8716 	blt	r2,r16,10234f4 <_gp+0xfffe5210>
 10236d8:	44800204 	addi	r18,r8,8
 10236dc:	003ed306 	br	102322c <_gp+0xfffe4f48>
 10236e0:	d9002f17 	ldw	r4,188(sp)
 10236e4:	b80b883a 	mov	r5,r23
 10236e8:	b00d883a 	mov	r6,r22
 10236ec:	102b3600 	call	102b360 <__ssprint_r>
 10236f0:	103b601e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10236f4:	d8c02017 	ldw	r3,128(sp)
 10236f8:	dc001f17 	ldw	r16,124(sp)
 10236fc:	da000404 	addi	r8,sp,16
 1023700:	003eaa06 	br	10231ac <_gp+0xfffe4ec8>
 1023704:	d9002f17 	ldw	r4,188(sp)
 1023708:	b80b883a 	mov	r5,r23
 102370c:	b00d883a 	mov	r6,r22
 1023710:	102b3600 	call	102b360 <__ssprint_r>
 1023714:	103b571e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023718:	d8c02017 	ldw	r3,128(sp)
 102371c:	dc001f17 	ldw	r16,124(sp)
 1023720:	dc800404 	addi	r18,sp,16
 1023724:	003eac06 	br	10231d8 <_gp+0xfffe4ef4>
 1023728:	d9002f17 	ldw	r4,188(sp)
 102372c:	b80b883a 	mov	r5,r23
 1023730:	b00d883a 	mov	r6,r22
 1023734:	102b3600 	call	102b360 <__ssprint_r>
 1023738:	103b4e1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102373c:	d8c02017 	ldw	r3,128(sp)
 1023740:	da000404 	addi	r8,sp,16
 1023744:	003c2406 	br	10227d8 <_gp+0xfffe44f4>
 1023748:	da004015 	stw	r8,256(sp)
 102374c:	da403f15 	stw	r9,252(sp)
 1023750:	102b0b80 	call	102b0b8 <__fpclassifyd>
 1023754:	da004017 	ldw	r8,256(sp)
 1023758:	da403f17 	ldw	r9,252(sp)
 102375c:	1000951e 	bne	r2,zero,10239b4 <___svfprintf_internal_r+0x1860>
 1023760:	008011c4 	movi	r2,71
 1023764:	1400fb16 	blt	r2,r16,1023b54 <___svfprintf_internal_r+0x1a00>
 1023768:	030040f4 	movhi	r12,259
 102376c:	63114304 	addi	r12,r12,17676
 1023770:	db003115 	stw	r12,196(sp)
 1023774:	00c000c4 	movi	r3,3
 1023778:	00bfdfc4 	movi	r2,-129
 102377c:	d8c02a15 	stw	r3,168(sp)
 1023780:	88a2703a 	and	r17,r17,r2
 1023784:	dd402783 	ldbu	r21,158(sp)
 1023788:	dcc02d15 	stw	r19,180(sp)
 102378c:	1825883a 	mov	r18,r3
 1023790:	d8003215 	stw	zero,200(sp)
 1023794:	d8003415 	stw	zero,208(sp)
 1023798:	003ba706 	br	1022638 <_gp+0xfffe4354>
 102379c:	8880040c 	andi	r2,r17,16
 10237a0:	1000091e 	bne	r2,zero,10237c8 <___svfprintf_internal_r+0x1674>
 10237a4:	8c40100c 	andi	r17,r17,64
 10237a8:	88000726 	beq	r17,zero,10237c8 <___svfprintf_internal_r+0x1674>
 10237ac:	db002d17 	ldw	r12,180(sp)
 10237b0:	dac03017 	ldw	r11,192(sp)
 10237b4:	60800017 	ldw	r2,0(r12)
 10237b8:	63000104 	addi	r12,r12,4
 10237bc:	db002d15 	stw	r12,180(sp)
 10237c0:	12c0000d 	sth	r11,0(r2)
 10237c4:	003a8f06 	br	1022204 <_gp+0xfffe3f20>
 10237c8:	db002d17 	ldw	r12,180(sp)
 10237cc:	dac03017 	ldw	r11,192(sp)
 10237d0:	60800017 	ldw	r2,0(r12)
 10237d4:	63000104 	addi	r12,r12,4
 10237d8:	db002d15 	stw	r12,180(sp)
 10237dc:	12c00015 	stw	r11,0(r2)
 10237e0:	003a8806 	br	1022204 <_gp+0xfffe3f20>
 10237e4:	88c0100c 	andi	r3,r17,64
 10237e8:	1800e926 	beq	r3,zero,1023b90 <___svfprintf_internal_r+0x1a3c>
 10237ec:	dac02d17 	ldw	r11,180(sp)
 10237f0:	14c0000b 	ldhu	r19,0(r2)
 10237f4:	0039883a 	mov	fp,zero
 10237f8:	5ac00104 	addi	r11,r11,4
 10237fc:	dac02d15 	stw	r11,180(sp)
 1023800:	003d1406 	br	1022c54 <_gp+0xfffe4970>
 1023804:	1c000007 	ldb	r16,0(r3)
 1023808:	1805883a 	mov	r2,r3
 102380c:	003aa706 	br	10222ac <_gp+0xfffe3fc8>
 1023810:	00800084 	movi	r2,2
 1023814:	003c7b06 	br	1022a04 <_gp+0xfffe4720>
 1023818:	010040f4 	movhi	r4,259
 102381c:	21115184 	addi	r4,r4,17734
 1023820:	d9002b15 	stw	r4,172(sp)
 1023824:	dac02b17 	ldw	r11,172(sp)
 1023828:	1c87883a 	add	r3,r3,r18
 102382c:	10800044 	addi	r2,r2,1
 1023830:	42c00015 	stw	r11,0(r8)
 1023834:	44800115 	stw	r18,4(r8)
 1023838:	d8c02015 	stw	r3,128(sp)
 102383c:	d8801f15 	stw	r2,124(sp)
 1023840:	010001c4 	movi	r4,7
 1023844:	20bf4e16 	blt	r4,r2,1023580 <_gp+0xfffe529c>
 1023848:	42000204 	addi	r8,r8,8
 102384c:	003f5306 	br	102359c <_gp+0xfffe52b8>
 1023850:	010040f4 	movhi	r4,259
 1023854:	21115184 	addi	r4,r4,17734
 1023858:	d9002b15 	stw	r4,172(sp)
 102385c:	003c0806 	br	1022880 <_gp+0xfffe459c>
 1023860:	d9002f17 	ldw	r4,188(sp)
 1023864:	b80b883a 	mov	r5,r23
 1023868:	b00d883a 	mov	r6,r22
 102386c:	102b3600 	call	102b360 <__ssprint_r>
 1023870:	103b001e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023874:	d8c02017 	ldw	r3,128(sp)
 1023878:	da000404 	addi	r8,sp,16
 102387c:	003dc606 	br	1022f98 <_gp+0xfffe4cb4>
 1023880:	d8801f17 	ldw	r2,124(sp)
 1023884:	030040f4 	movhi	r12,259
 1023888:	01000044 	movi	r4,1
 102388c:	18c00044 	addi	r3,r3,1
 1023890:	10800044 	addi	r2,r2,1
 1023894:	63115104 	addi	r12,r12,17732
 1023898:	41000115 	stw	r4,4(r8)
 102389c:	43000015 	stw	r12,0(r8)
 10238a0:	d8c02015 	stw	r3,128(sp)
 10238a4:	d8801f15 	stw	r2,124(sp)
 10238a8:	010001c4 	movi	r4,7
 10238ac:	2080ad16 	blt	r4,r2,1023b64 <___svfprintf_internal_r+0x1a10>
 10238b0:	42000204 	addi	r8,r8,8
 10238b4:	8000041e 	bne	r16,zero,10238c8 <___svfprintf_internal_r+0x1774>
 10238b8:	dac03317 	ldw	r11,204(sp)
 10238bc:	5800021e 	bne	r11,zero,10238c8 <___svfprintf_internal_r+0x1774>
 10238c0:	8880004c 	andi	r2,r17,1
 10238c4:	103c0526 	beq	r2,zero,10228dc <_gp+0xfffe45f8>
 10238c8:	db003917 	ldw	r12,228(sp)
 10238cc:	d8801f17 	ldw	r2,124(sp)
 10238d0:	dac03517 	ldw	r11,212(sp)
 10238d4:	1b07883a 	add	r3,r3,r12
 10238d8:	10800044 	addi	r2,r2,1
 10238dc:	42c00015 	stw	r11,0(r8)
 10238e0:	43000115 	stw	r12,4(r8)
 10238e4:	d8c02015 	stw	r3,128(sp)
 10238e8:	d8801f15 	stw	r2,124(sp)
 10238ec:	010001c4 	movi	r4,7
 10238f0:	20818816 	blt	r4,r2,1023f14 <___svfprintf_internal_r+0x1dc0>
 10238f4:	42000204 	addi	r8,r8,8
 10238f8:	0421c83a 	sub	r16,zero,r16
 10238fc:	0400bc0e 	bge	zero,r16,1023bf0 <___svfprintf_internal_r+0x1a9c>
 1023900:	04800404 	movi	r18,16
 1023904:	9400f80e 	bge	r18,r16,1023ce8 <___svfprintf_internal_r+0x1b94>
 1023908:	010040f4 	movhi	r4,259
 102390c:	21115184 	addi	r4,r4,17734
 1023910:	d9002b15 	stw	r4,172(sp)
 1023914:	054001c4 	movi	r21,7
 1023918:	dcc02f17 	ldw	r19,188(sp)
 102391c:	00000306 	br	102392c <___svfprintf_internal_r+0x17d8>
 1023920:	42000204 	addi	r8,r8,8
 1023924:	843ffc04 	addi	r16,r16,-16
 1023928:	9400f20e 	bge	r18,r16,1023cf4 <___svfprintf_internal_r+0x1ba0>
 102392c:	18c00404 	addi	r3,r3,16
 1023930:	10800044 	addi	r2,r2,1
 1023934:	45000015 	stw	r20,0(r8)
 1023938:	44800115 	stw	r18,4(r8)
 102393c:	d8c02015 	stw	r3,128(sp)
 1023940:	d8801f15 	stw	r2,124(sp)
 1023944:	a8bff60e 	bge	r21,r2,1023920 <_gp+0xfffe563c>
 1023948:	9809883a 	mov	r4,r19
 102394c:	b80b883a 	mov	r5,r23
 1023950:	b00d883a 	mov	r6,r22
 1023954:	102b3600 	call	102b360 <__ssprint_r>
 1023958:	103ac61e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 102395c:	d8c02017 	ldw	r3,128(sp)
 1023960:	d8801f17 	ldw	r2,124(sp)
 1023964:	da000404 	addi	r8,sp,16
 1023968:	003fee06 	br	1023924 <_gp+0xfffe5640>
 102396c:	db002e17 	ldw	r12,184(sp)
 1023970:	1805883a 	mov	r2,r3
 1023974:	dac02d15 	stw	r11,180(sp)
 1023978:	0319c83a 	sub	r12,zero,r12
 102397c:	db002e15 	stw	r12,184(sp)
 1023980:	003ad106 	br	10224c8 <_gp+0xfffe41e4>
 1023984:	18800044 	addi	r2,r3,1
 1023988:	8c400814 	ori	r17,r17,32
 102398c:	1c000047 	ldb	r16,1(r3)
 1023990:	003a4606 	br	10222ac <_gp+0xfffe3fc8>
 1023994:	d9002f17 	ldw	r4,188(sp)
 1023998:	b80b883a 	mov	r5,r23
 102399c:	b00d883a 	mov	r6,r22
 10239a0:	102b3600 	call	102b360 <__ssprint_r>
 10239a4:	103ab31e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 10239a8:	d8c02017 	ldw	r3,128(sp)
 10239ac:	da000404 	addi	r8,sp,16
 10239b0:	003d8a06 	br	1022fdc <_gp+0xfffe4cf8>
 10239b4:	057ff7c4 	movi	r21,-33
 10239b8:	00bfffc4 	movi	r2,-1
 10239bc:	856a703a 	and	r21,r16,r21
 10239c0:	48807126 	beq	r9,r2,1023b88 <___svfprintf_internal_r+0x1a34>
 10239c4:	008011c4 	movi	r2,71
 10239c8:	a8814f26 	beq	r21,r2,1023f08 <___svfprintf_internal_r+0x1db4>
 10239cc:	db003817 	ldw	r12,224(sp)
 10239d0:	8ac04014 	ori	r11,r17,256
 10239d4:	dac02d15 	stw	r11,180(sp)
 10239d8:	60015816 	blt	r12,zero,1023f3c <___svfprintf_internal_r+0x1de8>
 10239dc:	dc803817 	ldw	r18,224(sp)
 10239e0:	d8002a05 	stb	zero,168(sp)
 10239e4:	00801984 	movi	r2,102
 10239e8:	80808c26 	beq	r16,r2,1023c1c <___svfprintf_internal_r+0x1ac8>
 10239ec:	00801184 	movi	r2,70
 10239f0:	80808a26 	beq	r16,r2,1023c1c <___svfprintf_internal_r+0x1ac8>
 10239f4:	00801144 	movi	r2,69
 10239f8:	a8815426 	beq	r21,r2,1023f4c <___svfprintf_internal_r+0x1df8>
 10239fc:	4839883a 	mov	fp,r9
 1023a00:	d8802604 	addi	r2,sp,152
 1023a04:	d8800115 	stw	r2,4(sp)
 1023a08:	d9002f17 	ldw	r4,188(sp)
 1023a0c:	d8802504 	addi	r2,sp,148
 1023a10:	d9403717 	ldw	r5,220(sp)
 1023a14:	d8800215 	stw	r2,8(sp)
 1023a18:	d8802104 	addi	r2,sp,132
 1023a1c:	df000015 	stw	fp,0(sp)
 1023a20:	d8800315 	stw	r2,12(sp)
 1023a24:	900d883a 	mov	r6,r18
 1023a28:	01c00084 	movi	r7,2
 1023a2c:	da004015 	stw	r8,256(sp)
 1023a30:	da403f15 	stw	r9,252(sp)
 1023a34:	10265640 	call	1026564 <_dtoa_r>
 1023a38:	d8803115 	stw	r2,196(sp)
 1023a3c:	008019c4 	movi	r2,103
 1023a40:	da004017 	ldw	r8,256(sp)
 1023a44:	da403f17 	ldw	r9,252(sp)
 1023a48:	80800226 	beq	r16,r2,1023a54 <___svfprintf_internal_r+0x1900>
 1023a4c:	008011c4 	movi	r2,71
 1023a50:	8080841e 	bne	r16,r2,1023c64 <___svfprintf_internal_r+0x1b10>
 1023a54:	8880004c 	andi	r2,r17,1
 1023a58:	10015126 	beq	r2,zero,1023fa0 <___svfprintf_internal_r+0x1e4c>
 1023a5c:	db003117 	ldw	r12,196(sp)
 1023a60:	6715883a 	add	r10,r12,fp
 1023a64:	d9003717 	ldw	r4,220(sp)
 1023a68:	900b883a 	mov	r5,r18
 1023a6c:	000d883a 	mov	r6,zero
 1023a70:	000f883a 	mov	r7,zero
 1023a74:	da004015 	stw	r8,256(sp)
 1023a78:	da403f15 	stw	r9,252(sp)
 1023a7c:	da803e15 	stw	r10,248(sp)
 1023a80:	10300140 	call	1030014 <__eqdf2>
 1023a84:	da004017 	ldw	r8,256(sp)
 1023a88:	da403f17 	ldw	r9,252(sp)
 1023a8c:	da803e17 	ldw	r10,248(sp)
 1023a90:	1000d926 	beq	r2,zero,1023df8 <___svfprintf_internal_r+0x1ca4>
 1023a94:	d8802117 	ldw	r2,132(sp)
 1023a98:	1280062e 	bgeu	r2,r10,1023ab4 <___svfprintf_internal_r+0x1960>
 1023a9c:	01000c04 	movi	r4,48
 1023aa0:	10c00044 	addi	r3,r2,1
 1023aa4:	d8c02115 	stw	r3,132(sp)
 1023aa8:	11000005 	stb	r4,0(r2)
 1023aac:	d8802117 	ldw	r2,132(sp)
 1023ab0:	12bffb36 	bltu	r2,r10,1023aa0 <_gp+0xfffe57bc>
 1023ab4:	db003117 	ldw	r12,196(sp)
 1023ab8:	1305c83a 	sub	r2,r2,r12
 1023abc:	d8803315 	stw	r2,204(sp)
 1023ac0:	008011c4 	movi	r2,71
 1023ac4:	a880b626 	beq	r21,r2,1023da0 <___svfprintf_internal_r+0x1c4c>
 1023ac8:	00801944 	movi	r2,101
 1023acc:	14017e0e 	bge	r2,r16,10240c8 <___svfprintf_internal_r+0x1f74>
 1023ad0:	00801984 	movi	r2,102
 1023ad4:	80812826 	beq	r16,r2,1023f78 <___svfprintf_internal_r+0x1e24>
 1023ad8:	db002617 	ldw	r12,152(sp)
 1023adc:	db003415 	stw	r12,208(sp)
 1023ae0:	db003417 	ldw	r12,208(sp)
 1023ae4:	dac03317 	ldw	r11,204(sp)
 1023ae8:	62c11a16 	blt	r12,r11,1023f54 <___svfprintf_internal_r+0x1e00>
 1023aec:	8c40004c 	andi	r17,r17,1
 1023af0:	88013d1e 	bne	r17,zero,1023fe8 <___svfprintf_internal_r+0x1e94>
 1023af4:	6005883a 	mov	r2,r12
 1023af8:	60012716 	blt	r12,zero,1023f98 <___svfprintf_internal_r+0x1e44>
 1023afc:	dc803417 	ldw	r18,208(sp)
 1023b00:	df002a07 	ldb	fp,168(sp)
 1023b04:	e000b01e 	bne	fp,zero,1023dc8 <___svfprintf_internal_r+0x1c74>
 1023b08:	dc402d17 	ldw	r17,180(sp)
 1023b0c:	dd402783 	ldbu	r21,158(sp)
 1023b10:	d8802a15 	stw	r2,168(sp)
 1023b14:	dcc02d15 	stw	r19,180(sp)
 1023b18:	d8003215 	stw	zero,200(sp)
 1023b1c:	003ac606 	br	1022638 <_gp+0xfffe4354>
 1023b20:	008040f4 	movhi	r2,259
 1023b24:	10914104 	addi	r2,r2,17668
 1023b28:	d8803115 	stw	r2,196(sp)
 1023b2c:	003be506 	br	1022ac4 <_gp+0xfffe47e0>
 1023b30:	d9002f17 	ldw	r4,188(sp)
 1023b34:	04001004 	movi	r16,64
 1023b38:	800b883a 	mov	r5,r16
 1023b3c:	1028f440 	call	1028f44 <_malloc_r>
 1023b40:	b8800015 	stw	r2,0(r23)
 1023b44:	b8800415 	stw	r2,16(r23)
 1023b48:	10016126 	beq	r2,zero,10240d0 <___svfprintf_internal_r+0x1f7c>
 1023b4c:	bc000515 	stw	r16,20(r23)
 1023b50:	00399a06 	br	10221bc <_gp+0xfffe3ed8>
 1023b54:	008040f4 	movhi	r2,259
 1023b58:	10914404 	addi	r2,r2,17680
 1023b5c:	d8803115 	stw	r2,196(sp)
 1023b60:	003f0406 	br	1023774 <_gp+0xfffe5490>
 1023b64:	d9002f17 	ldw	r4,188(sp)
 1023b68:	b80b883a 	mov	r5,r23
 1023b6c:	b00d883a 	mov	r6,r22
 1023b70:	102b3600 	call	102b360 <__ssprint_r>
 1023b74:	103a3f1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023b78:	dc002617 	ldw	r16,152(sp)
 1023b7c:	d8c02017 	ldw	r3,128(sp)
 1023b80:	da000404 	addi	r8,sp,16
 1023b84:	003f4b06 	br	10238b4 <_gp+0xfffe55d0>
 1023b88:	02400184 	movi	r9,6
 1023b8c:	003f8f06 	br	10239cc <_gp+0xfffe56e8>
 1023b90:	db002d17 	ldw	r12,180(sp)
 1023b94:	14c00017 	ldw	r19,0(r2)
 1023b98:	0039883a 	mov	fp,zero
 1023b9c:	63000104 	addi	r12,r12,4
 1023ba0:	db002d15 	stw	r12,180(sp)
 1023ba4:	003c2b06 	br	1022c54 <_gp+0xfffe4970>
 1023ba8:	d8c03117 	ldw	r3,196(sp)
 1023bac:	b0e5c83a 	sub	r18,r22,r3
 1023bb0:	003a9c06 	br	1022624 <_gp+0xfffe4340>
 1023bb4:	da004015 	stw	r8,256(sp)
 1023bb8:	10220bc0 	call	10220bc <strlen>
 1023bbc:	1025883a 	mov	r18,r2
 1023bc0:	da004017 	ldw	r8,256(sp)
 1023bc4:	903c450e 	bge	r18,zero,1022cdc <_gp+0xfffe49f8>
 1023bc8:	0005883a 	mov	r2,zero
 1023bcc:	003c4306 	br	1022cdc <_gp+0xfffe49f8>
 1023bd0:	d9002f17 	ldw	r4,188(sp)
 1023bd4:	b80b883a 	mov	r5,r23
 1023bd8:	b00d883a 	mov	r6,r22
 1023bdc:	102b3600 	call	102b360 <__ssprint_r>
 1023be0:	103a241e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023be4:	d8c02017 	ldw	r3,128(sp)
 1023be8:	d8801f17 	ldw	r2,124(sp)
 1023bec:	da000404 	addi	r8,sp,16
 1023bf0:	db003317 	ldw	r12,204(sp)
 1023bf4:	dac03117 	ldw	r11,196(sp)
 1023bf8:	10800044 	addi	r2,r2,1
 1023bfc:	60c7883a 	add	r3,r12,r3
 1023c00:	42c00015 	stw	r11,0(r8)
 1023c04:	43000115 	stw	r12,4(r8)
 1023c08:	d8c02015 	stw	r3,128(sp)
 1023c0c:	d8801f15 	stw	r2,124(sp)
 1023c10:	010001c4 	movi	r4,7
 1023c14:	20bb300e 	bge	r4,r2,10228d8 <_gp+0xfffe45f4>
 1023c18:	003d9c06 	br	102328c <_gp+0xfffe4fa8>
 1023c1c:	d8802604 	addi	r2,sp,152
 1023c20:	d8800115 	stw	r2,4(sp)
 1023c24:	d9002f17 	ldw	r4,188(sp)
 1023c28:	d8802504 	addi	r2,sp,148
 1023c2c:	d9403717 	ldw	r5,220(sp)
 1023c30:	d8800215 	stw	r2,8(sp)
 1023c34:	d8802104 	addi	r2,sp,132
 1023c38:	da400015 	stw	r9,0(sp)
 1023c3c:	d8800315 	stw	r2,12(sp)
 1023c40:	900d883a 	mov	r6,r18
 1023c44:	01c000c4 	movi	r7,3
 1023c48:	da004015 	stw	r8,256(sp)
 1023c4c:	da403f15 	stw	r9,252(sp)
 1023c50:	10265640 	call	1026564 <_dtoa_r>
 1023c54:	da403f17 	ldw	r9,252(sp)
 1023c58:	da004017 	ldw	r8,256(sp)
 1023c5c:	d8803115 	stw	r2,196(sp)
 1023c60:	4839883a 	mov	fp,r9
 1023c64:	dac03117 	ldw	r11,196(sp)
 1023c68:	00801184 	movi	r2,70
 1023c6c:	5f15883a 	add	r10,r11,fp
 1023c70:	a8bf7c1e 	bne	r21,r2,1023a64 <_gp+0xfffe5780>
 1023c74:	59000007 	ldb	r4,0(r11)
 1023c78:	00800c04 	movi	r2,48
 1023c7c:	2080ca26 	beq	r4,r2,1023fa8 <___svfprintf_internal_r+0x1e54>
 1023c80:	d8c02617 	ldw	r3,152(sp)
 1023c84:	50d5883a 	add	r10,r10,r3
 1023c88:	003f7606 	br	1023a64 <_gp+0xfffe5780>
 1023c8c:	010040f4 	movhi	r4,259
 1023c90:	21115584 	addi	r4,r4,17750
 1023c94:	d9003615 	stw	r4,216(sp)
 1023c98:	003aa606 	br	1022734 <_gp+0xfffe4450>
 1023c9c:	0025883a 	mov	r18,zero
 1023ca0:	003dc306 	br	10233b0 <_gp+0xfffe50cc>
 1023ca4:	d9002f17 	ldw	r4,188(sp)
 1023ca8:	b80b883a 	mov	r5,r23
 1023cac:	b00d883a 	mov	r6,r22
 1023cb0:	102b3600 	call	102b360 <__ssprint_r>
 1023cb4:	1039ef1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023cb8:	d8c02017 	ldw	r3,128(sp)
 1023cbc:	da000404 	addi	r8,sp,16
 1023cc0:	003dba06 	br	10233ac <_gp+0xfffe50c8>
 1023cc4:	d9002f17 	ldw	r4,188(sp)
 1023cc8:	b80b883a 	mov	r5,r23
 1023ccc:	b00d883a 	mov	r6,r22
 1023cd0:	102b3600 	call	102b360 <__ssprint_r>
 1023cd4:	1039e71e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023cd8:	d8802617 	ldw	r2,152(sp)
 1023cdc:	d8c02017 	ldw	r3,128(sp)
 1023ce0:	da000404 	addi	r8,sp,16
 1023ce4:	003e4106 	br	10235ec <_gp+0xfffe5308>
 1023ce8:	030040f4 	movhi	r12,259
 1023cec:	63115184 	addi	r12,r12,17734
 1023cf0:	db002b15 	stw	r12,172(sp)
 1023cf4:	dac02b17 	ldw	r11,172(sp)
 1023cf8:	1c07883a 	add	r3,r3,r16
 1023cfc:	10800044 	addi	r2,r2,1
 1023d00:	42c00015 	stw	r11,0(r8)
 1023d04:	44000115 	stw	r16,4(r8)
 1023d08:	d8c02015 	stw	r3,128(sp)
 1023d0c:	d8801f15 	stw	r2,124(sp)
 1023d10:	010001c4 	movi	r4,7
 1023d14:	20bfae16 	blt	r4,r2,1023bd0 <_gp+0xfffe58ec>
 1023d18:	42000204 	addi	r8,r8,8
 1023d1c:	003fb406 	br	1023bf0 <_gp+0xfffe590c>
 1023d20:	0021883a 	mov	r16,zero
 1023d24:	003e4306 	br	1023634 <_gp+0xfffe5350>
 1023d28:	d9002f17 	ldw	r4,188(sp)
 1023d2c:	b80b883a 	mov	r5,r23
 1023d30:	b00d883a 	mov	r6,r22
 1023d34:	102b3600 	call	102b360 <__ssprint_r>
 1023d38:	1039ce1e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023d3c:	d8802617 	ldw	r2,152(sp)
 1023d40:	db003317 	ldw	r12,204(sp)
 1023d44:	d8c02017 	ldw	r3,128(sp)
 1023d48:	da000404 	addi	r8,sp,16
 1023d4c:	6085c83a 	sub	r2,r12,r2
 1023d50:	003e3706 	br	1023630 <_gp+0xfffe534c>
 1023d54:	00800184 	movi	r2,6
 1023d58:	1240012e 	bgeu	r2,r9,1023d60 <___svfprintf_internal_r+0x1c0c>
 1023d5c:	1013883a 	mov	r9,r2
 1023d60:	4825883a 	mov	r18,r9
 1023d64:	4805883a 	mov	r2,r9
 1023d68:	4800a416 	blt	r9,zero,1023ffc <___svfprintf_internal_r+0x1ea8>
 1023d6c:	d8802a15 	stw	r2,168(sp)
 1023d70:	008040f4 	movhi	r2,259
 1023d74:	10914f04 	addi	r2,r2,17724
 1023d78:	d8803115 	stw	r2,196(sp)
 1023d7c:	dcc02d15 	stw	r19,180(sp)
 1023d80:	d8003215 	stw	zero,200(sp)
 1023d84:	d8003415 	stw	zero,208(sp)
 1023d88:	0005883a 	mov	r2,zero
 1023d8c:	003a3106 	br	1022654 <_gp+0xfffe4370>
 1023d90:	030040f4 	movhi	r12,259
 1023d94:	63115584 	addi	r12,r12,17750
 1023d98:	db003615 	stw	r12,216(sp)
 1023d9c:	003af406 	br	1022970 <_gp+0xfffe468c>
 1023da0:	d8c02617 	ldw	r3,152(sp)
 1023da4:	00bfff44 	movi	r2,-3
 1023da8:	18801516 	blt	r3,r2,1023e00 <___svfprintf_internal_r+0x1cac>
 1023dac:	48c01416 	blt	r9,r3,1023e00 <___svfprintf_internal_r+0x1cac>
 1023db0:	d8c03415 	stw	r3,208(sp)
 1023db4:	040019c4 	movi	r16,103
 1023db8:	003f4906 	br	1023ae0 <_gp+0xfffe57fc>
 1023dbc:	05400b44 	movi	r21,45
 1023dc0:	dd402785 	stb	r21,158(sp)
 1023dc4:	003b3a06 	br	1022ab0 <_gp+0xfffe47cc>
 1023dc8:	00c00b44 	movi	r3,45
 1023dcc:	d8802a15 	stw	r2,168(sp)
 1023dd0:	dc402d17 	ldw	r17,180(sp)
 1023dd4:	d8c02785 	stb	r3,158(sp)
 1023dd8:	dcc02d15 	stw	r19,180(sp)
 1023ddc:	d8003215 	stw	zero,200(sp)
 1023de0:	00800b44 	movi	r2,45
 1023de4:	003a1806 	br	1022648 <_gp+0xfffe4364>
 1023de8:	010040f4 	movhi	r4,259
 1023dec:	21115184 	addi	r4,r4,17734
 1023df0:	d9002b15 	stw	r4,172(sp)
 1023df4:	003cc306 	br	1023104 <_gp+0xfffe4e20>
 1023df8:	5005883a 	mov	r2,r10
 1023dfc:	003f2d06 	br	1023ab4 <_gp+0xfffe57d0>
 1023e00:	843fff84 	addi	r16,r16,-2
 1023e04:	1f3fffc4 	addi	fp,r3,-1
 1023e08:	df002615 	stw	fp,152(sp)
 1023e0c:	dc0022c5 	stb	r16,139(sp)
 1023e10:	e000a216 	blt	fp,zero,102409c <___svfprintf_internal_r+0x1f48>
 1023e14:	00800ac4 	movi	r2,43
 1023e18:	d8802305 	stb	r2,140(sp)
 1023e1c:	00800244 	movi	r2,9
 1023e20:	1700820e 	bge	r2,fp,102402c <___svfprintf_internal_r+0x1ed8>
 1023e24:	dd4022c4 	addi	r21,sp,139
 1023e28:	dc002b15 	stw	r16,172(sp)
 1023e2c:	8825883a 	mov	r18,r17
 1023e30:	a821883a 	mov	r16,r21
 1023e34:	4023883a 	mov	r17,r8
 1023e38:	e009883a 	mov	r4,fp
 1023e3c:	01400284 	movi	r5,10
 1023e40:	1021e580 	call	1021e58 <__modsi3>
 1023e44:	10800c04 	addi	r2,r2,48
 1023e48:	843fffc4 	addi	r16,r16,-1
 1023e4c:	e009883a 	mov	r4,fp
 1023e50:	01400284 	movi	r5,10
 1023e54:	80800005 	stb	r2,0(r16)
 1023e58:	1021e040 	call	1021e04 <__divsi3>
 1023e5c:	1039883a 	mov	fp,r2
 1023e60:	00800244 	movi	r2,9
 1023e64:	173ff416 	blt	r2,fp,1023e38 <_gp+0xfffe5b54>
 1023e68:	8811883a 	mov	r8,r17
 1023e6c:	e0800c04 	addi	r2,fp,48
 1023e70:	9023883a 	mov	r17,r18
 1023e74:	8025883a 	mov	r18,r16
 1023e78:	913fffc4 	addi	r4,r18,-1
 1023e7c:	90bfffc5 	stb	r2,-1(r18)
 1023e80:	dc002b17 	ldw	r16,172(sp)
 1023e84:	25408e2e 	bgeu	r4,r21,10240c0 <___svfprintf_internal_r+0x1f6c>
 1023e88:	d9402384 	addi	r5,sp,142
 1023e8c:	2c8bc83a 	sub	r5,r5,r18
 1023e90:	d8c02344 	addi	r3,sp,141
 1023e94:	a94b883a 	add	r5,r21,r5
 1023e98:	00000106 	br	1023ea0 <___svfprintf_internal_r+0x1d4c>
 1023e9c:	20800003 	ldbu	r2,0(r4)
 1023ea0:	18800005 	stb	r2,0(r3)
 1023ea4:	18c00044 	addi	r3,r3,1
 1023ea8:	21000044 	addi	r4,r4,1
 1023eac:	197ffb1e 	bne	r3,r5,1023e9c <_gp+0xfffe5bb8>
 1023eb0:	d8802304 	addi	r2,sp,140
 1023eb4:	1485c83a 	sub	r2,r2,r18
 1023eb8:	d8c02344 	addi	r3,sp,141
 1023ebc:	1885883a 	add	r2,r3,r2
 1023ec0:	dac03317 	ldw	r11,204(sp)
 1023ec4:	156bc83a 	sub	r21,r2,r21
 1023ec8:	dd403a15 	stw	r21,232(sp)
 1023ecc:	00800044 	movi	r2,1
 1023ed0:	5d65883a 	add	r18,r11,r21
 1023ed4:	12c0770e 	bge	r2,r11,10240b4 <___svfprintf_internal_r+0x1f60>
 1023ed8:	94800044 	addi	r18,r18,1
 1023edc:	9005883a 	mov	r2,r18
 1023ee0:	90007216 	blt	r18,zero,10240ac <___svfprintf_internal_r+0x1f58>
 1023ee4:	d8003415 	stw	zero,208(sp)
 1023ee8:	003f0506 	br	1023b00 <_gp+0xfffe581c>
 1023eec:	da402a15 	stw	r9,168(sp)
 1023ef0:	dd402783 	ldbu	r21,158(sp)
 1023ef4:	4825883a 	mov	r18,r9
 1023ef8:	dcc02d15 	stw	r19,180(sp)
 1023efc:	d8003215 	stw	zero,200(sp)
 1023f00:	d8003415 	stw	zero,208(sp)
 1023f04:	0039cc06 	br	1022638 <_gp+0xfffe4354>
 1023f08:	483eb01e 	bne	r9,zero,10239cc <_gp+0xfffe56e8>
 1023f0c:	9013883a 	mov	r9,r18
 1023f10:	003eae06 	br	10239cc <_gp+0xfffe56e8>
 1023f14:	d9002f17 	ldw	r4,188(sp)
 1023f18:	b80b883a 	mov	r5,r23
 1023f1c:	b00d883a 	mov	r6,r22
 1023f20:	102b3600 	call	102b360 <__ssprint_r>
 1023f24:	1039531e 	bne	r2,zero,1022474 <_gp+0xfffe4190>
 1023f28:	dc002617 	ldw	r16,152(sp)
 1023f2c:	d8c02017 	ldw	r3,128(sp)
 1023f30:	d8801f17 	ldw	r2,124(sp)
 1023f34:	da000404 	addi	r8,sp,16
 1023f38:	003e6f06 	br	10238f8 <_gp+0xfffe5614>
 1023f3c:	00c00b44 	movi	r3,45
 1023f40:	64a0003c 	xorhi	r18,r12,32768
 1023f44:	d8c02a05 	stb	r3,168(sp)
 1023f48:	003ea606 	br	10239e4 <_gp+0xfffe5700>
 1023f4c:	4f000044 	addi	fp,r9,1
 1023f50:	003eab06 	br	1023a00 <_gp+0xfffe571c>
 1023f54:	d8c03417 	ldw	r3,208(sp)
 1023f58:	00c0410e 	bge	zero,r3,1024060 <___svfprintf_internal_r+0x1f0c>
 1023f5c:	04800044 	movi	r18,1
 1023f60:	dac03317 	ldw	r11,204(sp)
 1023f64:	92e5883a 	add	r18,r18,r11
 1023f68:	9005883a 	mov	r2,r18
 1023f6c:	903ee40e 	bge	r18,zero,1023b00 <_gp+0xfffe581c>
 1023f70:	0005883a 	mov	r2,zero
 1023f74:	003ee206 	br	1023b00 <_gp+0xfffe581c>
 1023f78:	d8c02617 	ldw	r3,152(sp)
 1023f7c:	d8c03415 	stw	r3,208(sp)
 1023f80:	00c0310e 	bge	zero,r3,1024048 <___svfprintf_internal_r+0x1ef4>
 1023f84:	48001f1e 	bne	r9,zero,1024004 <___svfprintf_internal_r+0x1eb0>
 1023f88:	8c40004c 	andi	r17,r17,1
 1023f8c:	88001d1e 	bne	r17,zero,1024004 <___svfprintf_internal_r+0x1eb0>
 1023f90:	1805883a 	mov	r2,r3
 1023f94:	183ed90e 	bge	r3,zero,1023afc <_gp+0xfffe5818>
 1023f98:	0005883a 	mov	r2,zero
 1023f9c:	003ed706 	br	1023afc <_gp+0xfffe5818>
 1023fa0:	d8802117 	ldw	r2,132(sp)
 1023fa4:	003ec306 	br	1023ab4 <_gp+0xfffe57d0>
 1023fa8:	d9003717 	ldw	r4,220(sp)
 1023fac:	900b883a 	mov	r5,r18
 1023fb0:	000d883a 	mov	r6,zero
 1023fb4:	000f883a 	mov	r7,zero
 1023fb8:	da004015 	stw	r8,256(sp)
 1023fbc:	da403f15 	stw	r9,252(sp)
 1023fc0:	da803e15 	stw	r10,248(sp)
 1023fc4:	10300140 	call	1030014 <__eqdf2>
 1023fc8:	da004017 	ldw	r8,256(sp)
 1023fcc:	da403f17 	ldw	r9,252(sp)
 1023fd0:	da803e17 	ldw	r10,248(sp)
 1023fd4:	103f2a26 	beq	r2,zero,1023c80 <_gp+0xfffe599c>
 1023fd8:	00800044 	movi	r2,1
 1023fdc:	1707c83a 	sub	r3,r2,fp
 1023fe0:	d8c02615 	stw	r3,152(sp)
 1023fe4:	003f2706 	br	1023c84 <_gp+0xfffe59a0>
 1023fe8:	db003417 	ldw	r12,208(sp)
 1023fec:	64800044 	addi	r18,r12,1
 1023ff0:	9005883a 	mov	r2,r18
 1023ff4:	903ec20e 	bge	r18,zero,1023b00 <_gp+0xfffe581c>
 1023ff8:	003fdd06 	br	1023f70 <_gp+0xfffe5c8c>
 1023ffc:	0005883a 	mov	r2,zero
 1024000:	003f5a06 	br	1023d6c <_gp+0xfffe5a88>
 1024004:	dac03417 	ldw	r11,208(sp)
 1024008:	4a400044 	addi	r9,r9,1
 102400c:	5a65883a 	add	r18,r11,r9
 1024010:	9005883a 	mov	r2,r18
 1024014:	903eba0e 	bge	r18,zero,1023b00 <_gp+0xfffe581c>
 1024018:	003fd506 	br	1023f70 <_gp+0xfffe5c8c>
 102401c:	008040f4 	movhi	r2,259
 1024020:	10915184 	addi	r2,r2,17734
 1024024:	d8802b15 	stw	r2,172(sp)
 1024028:	003d2906 	br	10234d0 <_gp+0xfffe51ec>
 102402c:	00800c04 	movi	r2,48
 1024030:	e0c00c04 	addi	r3,fp,48
 1024034:	d8802345 	stb	r2,141(sp)
 1024038:	d8c02385 	stb	r3,142(sp)
 102403c:	d88023c4 	addi	r2,sp,143
 1024040:	dd4022c4 	addi	r21,sp,139
 1024044:	003f9e06 	br	1023ec0 <_gp+0xfffe5bdc>
 1024048:	4800081e 	bne	r9,zero,102406c <___svfprintf_internal_r+0x1f18>
 102404c:	8c40004c 	andi	r17,r17,1
 1024050:	8800061e 	bne	r17,zero,102406c <___svfprintf_internal_r+0x1f18>
 1024054:	00800044 	movi	r2,1
 1024058:	1025883a 	mov	r18,r2
 102405c:	003ea806 	br	1023b00 <_gp+0xfffe581c>
 1024060:	04800084 	movi	r18,2
 1024064:	90e5c83a 	sub	r18,r18,r3
 1024068:	003fbd06 	br	1023f60 <_gp+0xfffe5c7c>
 102406c:	4c800084 	addi	r18,r9,2
 1024070:	9005883a 	mov	r2,r18
 1024074:	903ea20e 	bge	r18,zero,1023b00 <_gp+0xfffe581c>
 1024078:	003fbd06 	br	1023f70 <_gp+0xfffe5c8c>
 102407c:	dac02d17 	ldw	r11,180(sp)
 1024080:	5a400017 	ldw	r9,0(r11)
 1024084:	5ac00104 	addi	r11,r11,4
 1024088:	dac02d15 	stw	r11,180(sp)
 102408c:	483e3f0e 	bge	r9,zero,102398c <_gp+0xfffe56a8>
 1024090:	027fffc4 	movi	r9,-1
 1024094:	1c000047 	ldb	r16,1(r3)
 1024098:	00388406 	br	10222ac <_gp+0xfffe3fc8>
 102409c:	00800b44 	movi	r2,45
 10240a0:	0739c83a 	sub	fp,zero,fp
 10240a4:	d8802305 	stb	r2,140(sp)
 10240a8:	003f5c06 	br	1023e1c <_gp+0xfffe5b38>
 10240ac:	0005883a 	mov	r2,zero
 10240b0:	003f8c06 	br	1023ee4 <_gp+0xfffe5c00>
 10240b4:	88a2703a 	and	r17,r17,r2
 10240b8:	883f8826 	beq	r17,zero,1023edc <_gp+0xfffe5bf8>
 10240bc:	003f8606 	br	1023ed8 <_gp+0xfffe5bf4>
 10240c0:	d8802344 	addi	r2,sp,141
 10240c4:	003f7e06 	br	1023ec0 <_gp+0xfffe5bdc>
 10240c8:	d8c02617 	ldw	r3,152(sp)
 10240cc:	003f4d06 	br	1023e04 <_gp+0xfffe5b20>
 10240d0:	dac02f17 	ldw	r11,188(sp)
 10240d4:	00800304 	movi	r2,12
 10240d8:	58800015 	stw	r2,0(r11)
 10240dc:	00bfffc4 	movi	r2,-1
 10240e0:	0038e806 	br	1022484 <_gp+0xfffe41a0>

010240e4 <___vfprintf_internal_r>:
 10240e4:	defeb604 	addi	sp,sp,-1320
 10240e8:	dfc14915 	stw	ra,1316(sp)
 10240ec:	ddc14715 	stw	r23,1308(sp)
 10240f0:	dd814615 	stw	r22,1304(sp)
 10240f4:	282f883a 	mov	r23,r5
 10240f8:	202d883a 	mov	r22,r4
 10240fc:	d9812a15 	stw	r6,1192(sp)
 1024100:	d9c12d15 	stw	r7,1204(sp)
 1024104:	df014815 	stw	fp,1312(sp)
 1024108:	dd414515 	stw	r21,1300(sp)
 102410c:	dd014415 	stw	r20,1296(sp)
 1024110:	dcc14315 	stw	r19,1292(sp)
 1024114:	dc814215 	stw	r18,1288(sp)
 1024118:	dc414115 	stw	r17,1284(sp)
 102411c:	dc014015 	stw	r16,1280(sp)
 1024120:	1028d580 	call	1028d58 <_localeconv_r>
 1024124:	10800017 	ldw	r2,0(r2)
 1024128:	1009883a 	mov	r4,r2
 102412c:	d8813515 	stw	r2,1236(sp)
 1024130:	10220bc0 	call	10220bc <strlen>
 1024134:	d8813815 	stw	r2,1248(sp)
 1024138:	b0000226 	beq	r22,zero,1024144 <___vfprintf_internal_r+0x60>
 102413c:	b0800e17 	ldw	r2,56(r22)
 1024140:	10010426 	beq	r2,zero,1024554 <___vfprintf_internal_r+0x470>
 1024144:	b8c0030b 	ldhu	r3,12(r23)
 1024148:	1908000c 	andi	r4,r3,8192
 102414c:	1805883a 	mov	r2,r3
 1024150:	2000071e 	bne	r4,zero,1024170 <___vfprintf_internal_r+0x8c>
 1024154:	b9001917 	ldw	r4,100(r23)
 1024158:	18880014 	ori	r2,r3,8192
 102415c:	00f7ffc4 	movi	r3,-8193
 1024160:	20c8703a 	and	r4,r4,r3
 1024164:	b880030d 	sth	r2,12(r23)
 1024168:	1007883a 	mov	r3,r2
 102416c:	b9001915 	stw	r4,100(r23)
 1024170:	1100020c 	andi	r4,r2,8
 1024174:	2000a726 	beq	r4,zero,1024414 <___vfprintf_internal_r+0x330>
 1024178:	b9000417 	ldw	r4,16(r23)
 102417c:	2000a526 	beq	r4,zero,1024414 <___vfprintf_internal_r+0x330>
 1024180:	1080068c 	andi	r2,r2,26
 1024184:	01000284 	movi	r4,10
 1024188:	1100ab26 	beq	r2,r4,1024438 <___vfprintf_internal_r+0x354>
 102418c:	dac10e04 	addi	r11,sp,1080
 1024190:	db010dc4 	addi	r12,sp,1079
 1024194:	d8800404 	addi	r2,sp,16
 1024198:	050040f4 	movhi	r20,259
 102419c:	dac12815 	stw	r11,1184(sp)
 10241a0:	5b17c83a 	sub	r11,r11,r12
 10241a4:	a5115984 	addi	r20,r20,17766
 10241a8:	db012915 	stw	r12,1188(sp)
 10241ac:	d8811e15 	stw	r2,1144(sp)
 10241b0:	d8012015 	stw	zero,1152(sp)
 10241b4:	d8011f15 	stw	zero,1148(sp)
 10241b8:	d8013315 	stw	zero,1228(sp)
 10241bc:	d8013715 	stw	zero,1244(sp)
 10241c0:	d8013915 	stw	zero,1252(sp)
 10241c4:	d8013b15 	stw	zero,1260(sp)
 10241c8:	d8013a15 	stw	zero,1256(sp)
 10241cc:	d8012f15 	stw	zero,1212(sp)
 10241d0:	1011883a 	mov	r8,r2
 10241d4:	dac13c15 	stw	r11,1264(sp)
 10241d8:	db012a17 	ldw	r12,1192(sp)
 10241dc:	60800007 	ldb	r2,0(r12)
 10241e0:	1000df26 	beq	r2,zero,1024560 <___vfprintf_internal_r+0x47c>
 10241e4:	00c00944 	movi	r3,37
 10241e8:	10c0dd26 	beq	r2,r3,1024560 <___vfprintf_internal_r+0x47c>
 10241ec:	6021883a 	mov	r16,r12
 10241f0:	00000106 	br	10241f8 <___vfprintf_internal_r+0x114>
 10241f4:	10c08426 	beq	r2,r3,1024408 <___vfprintf_internal_r+0x324>
 10241f8:	84000044 	addi	r16,r16,1
 10241fc:	80800007 	ldb	r2,0(r16)
 1024200:	103ffc1e 	bne	r2,zero,10241f4 <_gp+0xfffe5f10>
 1024204:	dac12a17 	ldw	r11,1192(sp)
 1024208:	82e3c83a 	sub	r17,r16,r11
 102420c:	88000f26 	beq	r17,zero,102424c <___vfprintf_internal_r+0x168>
 1024210:	d8c12017 	ldw	r3,1152(sp)
 1024214:	d8811f17 	ldw	r2,1148(sp)
 1024218:	dac12a17 	ldw	r11,1192(sp)
 102421c:	1c47883a 	add	r3,r3,r17
 1024220:	10800044 	addi	r2,r2,1
 1024224:	d8c12015 	stw	r3,1152(sp)
 1024228:	42c00015 	stw	r11,0(r8)
 102422c:	44400115 	stw	r17,4(r8)
 1024230:	d8811f15 	stw	r2,1148(sp)
 1024234:	00c001c4 	movi	r3,7
 1024238:	1880b416 	blt	r3,r2,102450c <___vfprintf_internal_r+0x428>
 102423c:	42000204 	addi	r8,r8,8
 1024240:	db012f17 	ldw	r12,1212(sp)
 1024244:	6459883a 	add	r12,r12,r17
 1024248:	db012f15 	stw	r12,1212(sp)
 102424c:	80800007 	ldb	r2,0(r16)
 1024250:	1000b526 	beq	r2,zero,1024528 <___vfprintf_internal_r+0x444>
 1024254:	80800044 	addi	r2,r16,1
 1024258:	84000047 	ldb	r16,1(r16)
 102425c:	d8012785 	stb	zero,1182(sp)
 1024260:	000d883a 	mov	r6,zero
 1024264:	027fffc4 	movi	r9,-1
 1024268:	d8012e15 	stw	zero,1208(sp)
 102426c:	0023883a 	mov	r17,zero
 1024270:	01001604 	movi	r4,88
 1024274:	01400244 	movi	r5,9
 1024278:	02800a84 	movi	r10,42
 102427c:	01c01b04 	movi	r7,108
 1024280:	10c00044 	addi	r3,r2,1
 1024284:	80bff804 	addi	r2,r16,-32
 1024288:	2082f236 	bltu	r4,r2,1024e54 <___vfprintf_internal_r+0xd70>
 102428c:	100490ba 	slli	r2,r2,2
 1024290:	02c040b4 	movhi	r11,258
 1024294:	5ad0a904 	addi	r11,r11,17060
 1024298:	12c5883a 	add	r2,r2,r11
 102429c:	10800017 	ldw	r2,0(r2)
 10242a0:	1000683a 	jmp	r2
 10242a4:	01024c9c 	xori	r4,zero,2354
 10242a8:	01024e54 	movui	r4,2361
 10242ac:	01024e54 	movui	r4,2361
 10242b0:	01024cbc 	xorhi	r4,zero,2354
 10242b4:	01024e54 	movui	r4,2361
 10242b8:	01024e54 	movui	r4,2361
 10242bc:	01024e54 	movui	r4,2361
 10242c0:	01024e54 	movui	r4,2361
 10242c4:	01024e54 	movui	r4,2361
 10242c8:	01024e54 	movui	r4,2361
 10242cc:	01024e18 	cmpnei	r4,zero,2360
 10242d0:	01024e44 	movi	r4,2361
 10242d4:	01024e54 	movui	r4,2361
 10242d8:	01024568 	cmpgeui	r4,zero,2325
 10242dc:	01024578 	rdprs	r4,zero,2325
 10242e0:	01024e54 	movui	r4,2361
 10242e4:	010245b8 	rdprs	r4,zero,2326
 10242e8:	01024aac 	andhi	r4,zero,2346
 10242ec:	01024aac 	andhi	r4,zero,2346
 10242f0:	01024aac 	andhi	r4,zero,2346
 10242f4:	01024aac 	andhi	r4,zero,2346
 10242f8:	01024aac 	andhi	r4,zero,2346
 10242fc:	01024aac 	andhi	r4,zero,2346
 1024300:	01024aac 	andhi	r4,zero,2346
 1024304:	01024aac 	andhi	r4,zero,2346
 1024308:	01024aac 	andhi	r4,zero,2346
 102430c:	01024e54 	movui	r4,2361
 1024310:	01024e54 	movui	r4,2361
 1024314:	01024e54 	movui	r4,2361
 1024318:	01024e54 	movui	r4,2361
 102431c:	01024e54 	movui	r4,2361
 1024320:	01024e54 	movui	r4,2361
 1024324:	01024e54 	movui	r4,2361
 1024328:	01024e54 	movui	r4,2361
 102432c:	01024e54 	movui	r4,2361
 1024330:	01024e54 	movui	r4,2361
 1024334:	01024ae0 	cmpeqi	r4,zero,2347
 1024338:	010245c8 	cmpgei	r4,zero,2327
 102433c:	01024e54 	movui	r4,2361
 1024340:	010245c8 	cmpgei	r4,zero,2327
 1024344:	01024e54 	movui	r4,2361
 1024348:	01024e54 	movui	r4,2361
 102434c:	01024e54 	movui	r4,2361
 1024350:	01024e54 	movui	r4,2361
 1024354:	0102466c 	andhi	r4,zero,2329
 1024358:	01024e54 	movui	r4,2361
 102435c:	01024e54 	movui	r4,2361
 1024360:	0102467c 	xorhi	r4,zero,2329
 1024364:	01024e54 	movui	r4,2361
 1024368:	01024e54 	movui	r4,2361
 102436c:	01024e54 	movui	r4,2361
 1024370:	01024e54 	movui	r4,2361
 1024374:	01024e54 	movui	r4,2361
 1024378:	01024a78 	rdprs	r4,zero,2345
 102437c:	01024e54 	movui	r4,2361
 1024380:	01024e54 	movui	r4,2361
 1024384:	01024b28 	cmpgeui	r4,zero,2348
 1024388:	01024e54 	movui	r4,2361
 102438c:	01024e54 	movui	r4,2361
 1024390:	01024e54 	movui	r4,2361
 1024394:	01024e54 	movui	r4,2361
 1024398:	01024e54 	movui	r4,2361
 102439c:	01024e54 	movui	r4,2361
 10243a0:	01024e54 	movui	r4,2361
 10243a4:	01024e54 	movui	r4,2361
 10243a8:	01024e54 	movui	r4,2361
 10243ac:	01024e54 	movui	r4,2361
 10243b0:	01024d1c 	xori	r4,zero,2356
 10243b4:	01024ccc 	andi	r4,zero,2355
 10243b8:	010245c8 	cmpgei	r4,zero,2327
 10243bc:	010245c8 	cmpgei	r4,zero,2327
 10243c0:	010245c8 	cmpgei	r4,zero,2327
 10243c4:	01024d0c 	andi	r4,zero,2356
 10243c8:	01024ccc 	andi	r4,zero,2355
 10243cc:	01024e54 	movui	r4,2361
 10243d0:	01024e54 	movui	r4,2361
 10243d4:	01024c14 	movui	r4,2352
 10243d8:	01024e54 	movui	r4,2361
 10243dc:	01024c28 	cmpgeui	r4,zero,2352
 10243e0:	01024c5c 	xori	r4,zero,2353
 10243e4:	01024d5c 	xori	r4,zero,2357
 10243e8:	01024b84 	movi	r4,2350
 10243ec:	01024e54 	movui	r4,2361
 10243f0:	01024da4 	muli	r4,zero,2358
 10243f4:	01024e54 	movui	r4,2361
 10243f8:	01024b94 	movui	r4,2350
 10243fc:	01024e54 	movui	r4,2361
 1024400:	01024e54 	movui	r4,2361
 1024404:	01024bd4 	movui	r4,2351
 1024408:	db012a17 	ldw	r12,1192(sp)
 102440c:	8323c83a 	sub	r17,r16,r12
 1024410:	003f7e06 	br	102420c <_gp+0xfffe5f28>
 1024414:	b009883a 	mov	r4,r22
 1024418:	b80b883a 	mov	r5,r23
 102441c:	10262340 	call	1026234 <__swsetup_r>
 1024420:	10002d1e 	bne	r2,zero,10244d8 <___vfprintf_internal_r+0x3f4>
 1024424:	b8c0030b 	ldhu	r3,12(r23)
 1024428:	01000284 	movi	r4,10
 102442c:	1805883a 	mov	r2,r3
 1024430:	1080068c 	andi	r2,r2,26
 1024434:	113f551e 	bne	r2,r4,102418c <_gp+0xfffe5ea8>
 1024438:	b880038b 	ldhu	r2,14(r23)
 102443c:	113fffcc 	andi	r4,r2,65535
 1024440:	2120001c 	xori	r4,r4,32768
 1024444:	21200004 	addi	r4,r4,-32768
 1024448:	203f5016 	blt	r4,zero,102418c <_gp+0xfffe5ea8>
 102444c:	bac01917 	ldw	r11,100(r23)
 1024450:	ba800717 	ldw	r10,28(r23)
 1024454:	ba400917 	ldw	r9,36(r23)
 1024458:	d9812a17 	ldw	r6,1192(sp)
 102445c:	d9c12d17 	ldw	r7,1204(sp)
 1024460:	02010004 	movi	r8,1024
 1024464:	18ffff4c 	andi	r3,r3,65533
 1024468:	d881078d 	sth	r2,1054(sp)
 102446c:	b009883a 	mov	r4,r22
 1024470:	d8800404 	addi	r2,sp,16
 1024474:	d9410404 	addi	r5,sp,1040
 1024478:	d8c1070d 	sth	r3,1052(sp)
 102447c:	dac11d15 	stw	r11,1140(sp)
 1024480:	da810b15 	stw	r10,1068(sp)
 1024484:	da410d15 	stw	r9,1076(sp)
 1024488:	d8810415 	stw	r2,1040(sp)
 102448c:	d8810815 	stw	r2,1056(sp)
 1024490:	da010615 	stw	r8,1048(sp)
 1024494:	da010915 	stw	r8,1060(sp)
 1024498:	d8010a15 	stw	zero,1064(sp)
 102449c:	10240e40 	call	10240e4 <___vfprintf_internal_r>
 10244a0:	1021883a 	mov	r16,r2
 10244a4:	10000416 	blt	r2,zero,10244b8 <___vfprintf_internal_r+0x3d4>
 10244a8:	b009883a 	mov	r4,r22
 10244ac:	d9410404 	addi	r5,sp,1040
 10244b0:	1027c8c0 	call	1027c8c <_fflush_r>
 10244b4:	1006ee1e 	bne	r2,zero,1026070 <___vfprintf_internal_r+0x1f8c>
 10244b8:	d881070b 	ldhu	r2,1052(sp)
 10244bc:	1080100c 	andi	r2,r2,64
 10244c0:	10000326 	beq	r2,zero,10244d0 <___vfprintf_internal_r+0x3ec>
 10244c4:	b880030b 	ldhu	r2,12(r23)
 10244c8:	10801014 	ori	r2,r2,64
 10244cc:	b880030d 	sth	r2,12(r23)
 10244d0:	8005883a 	mov	r2,r16
 10244d4:	00000106 	br	10244dc <___vfprintf_internal_r+0x3f8>
 10244d8:	00bfffc4 	movi	r2,-1
 10244dc:	dfc14917 	ldw	ra,1316(sp)
 10244e0:	df014817 	ldw	fp,1312(sp)
 10244e4:	ddc14717 	ldw	r23,1308(sp)
 10244e8:	dd814617 	ldw	r22,1304(sp)
 10244ec:	dd414517 	ldw	r21,1300(sp)
 10244f0:	dd014417 	ldw	r20,1296(sp)
 10244f4:	dcc14317 	ldw	r19,1292(sp)
 10244f8:	dc814217 	ldw	r18,1288(sp)
 10244fc:	dc414117 	ldw	r17,1284(sp)
 1024500:	dc014017 	ldw	r16,1280(sp)
 1024504:	dec14a04 	addi	sp,sp,1320
 1024508:	f800283a 	ret
 102450c:	b009883a 	mov	r4,r22
 1024510:	b80b883a 	mov	r5,r23
 1024514:	d9811e04 	addi	r6,sp,1144
 1024518:	102c68c0 	call	102c68c <__sprint_r>
 102451c:	1000081e 	bne	r2,zero,1024540 <___vfprintf_internal_r+0x45c>
 1024520:	da000404 	addi	r8,sp,16
 1024524:	003f4606 	br	1024240 <_gp+0xfffe5f5c>
 1024528:	d8812017 	ldw	r2,1152(sp)
 102452c:	10000426 	beq	r2,zero,1024540 <___vfprintf_internal_r+0x45c>
 1024530:	b009883a 	mov	r4,r22
 1024534:	b80b883a 	mov	r5,r23
 1024538:	d9811e04 	addi	r6,sp,1144
 102453c:	102c68c0 	call	102c68c <__sprint_r>
 1024540:	b880030b 	ldhu	r2,12(r23)
 1024544:	1080100c 	andi	r2,r2,64
 1024548:	103fe31e 	bne	r2,zero,10244d8 <_gp+0xfffe61f4>
 102454c:	d8812f17 	ldw	r2,1212(sp)
 1024550:	003fe206 	br	10244dc <_gp+0xfffe61f8>
 1024554:	b009883a 	mov	r4,r22
 1024558:	10282340 	call	1028234 <__sinit>
 102455c:	003ef906 	br	1024144 <_gp+0xfffe5e60>
 1024560:	dc012a17 	ldw	r16,1192(sp)
 1024564:	003f3906 	br	102424c <_gp+0xfffe5f68>
 1024568:	1805883a 	mov	r2,r3
 102456c:	8c400114 	ori	r17,r17,4
 1024570:	1c000007 	ldb	r16,0(r3)
 1024574:	003f4206 	br	1024280 <_gp+0xfffe5f9c>
 1024578:	1c000007 	ldb	r16,0(r3)
 102457c:	18800044 	addi	r2,r3,1
 1024580:	8286b326 	beq	r16,r10,1026050 <___vfprintf_internal_r+0x1f6c>
 1024584:	82fff404 	addi	r11,r16,-48
 1024588:	1007883a 	mov	r3,r2
 102458c:	0013883a 	mov	r9,zero
 1024590:	2aff3c36 	bltu	r5,r11,1024284 <_gp+0xfffe5fa0>
 1024594:	1c000007 	ldb	r16,0(r3)
 1024598:	4a4002a4 	muli	r9,r9,10
 102459c:	18c00044 	addi	r3,r3,1
 10245a0:	5a53883a 	add	r9,r11,r9
 10245a4:	82fff404 	addi	r11,r16,-48
 10245a8:	2afffa2e 	bgeu	r5,r11,1024594 <_gp+0xfffe62b0>
 10245ac:	483f350e 	bge	r9,zero,1024284 <_gp+0xfffe5fa0>
 10245b0:	027fffc4 	movi	r9,-1
 10245b4:	003f3306 	br	1024284 <_gp+0xfffe5fa0>
 10245b8:	8c402014 	ori	r17,r17,128
 10245bc:	1805883a 	mov	r2,r3
 10245c0:	1c000007 	ldb	r16,0(r3)
 10245c4:	003f2e06 	br	1024280 <_gp+0xfffe5f9c>
 10245c8:	db012d17 	ldw	r12,1204(sp)
 10245cc:	dac12d17 	ldw	r11,1204(sp)
 10245d0:	d8c12a15 	stw	r3,1192(sp)
 10245d4:	63000017 	ldw	r12,0(r12)
 10245d8:	5ac00117 	ldw	r11,4(r11)
 10245dc:	d9812785 	stb	r6,1182(sp)
 10245e0:	6009883a 	mov	r4,r12
 10245e4:	580b883a 	mov	r5,r11
 10245e8:	db013715 	stw	r12,1244(sp)
 10245ec:	da013f15 	stw	r8,1276(sp)
 10245f0:	da413e15 	stw	r9,1272(sp)
 10245f4:	dac13915 	stw	r11,1252(sp)
 10245f8:	102b0b80 	call	102b0b8 <__fpclassifyd>
 10245fc:	db012d17 	ldw	r12,1204(sp)
 1024600:	04800044 	movi	r18,1
 1024604:	da013f17 	ldw	r8,1276(sp)
 1024608:	64c00204 	addi	r19,r12,8
 102460c:	da413e17 	ldw	r9,1272(sp)
 1024610:	d9013717 	ldw	r4,1244(sp)
 1024614:	d9413917 	ldw	r5,1252(sp)
 1024618:	1484581e 	bne	r2,r18,102577c <___vfprintf_internal_r+0x1698>
 102461c:	000d883a 	mov	r6,zero
 1024620:	000f883a 	mov	r7,zero
 1024624:	10301780 	call	1030178 <__ledf2>
 1024628:	da013f17 	ldw	r8,1276(sp)
 102462c:	1005ef16 	blt	r2,zero,1025dec <___vfprintf_internal_r+0x1d08>
 1024630:	dd412783 	ldbu	r21,1182(sp)
 1024634:	008011c4 	movi	r2,71
 1024638:	14053b0e 	bge	r2,r16,1025b28 <___vfprintf_internal_r+0x1a44>
 102463c:	00c040f4 	movhi	r3,259
 1024640:	18d14204 	addi	r3,r3,17672
 1024644:	d8c13115 	stw	r3,1220(sp)
 1024648:	02c000c4 	movi	r11,3
 102464c:	00bfdfc4 	movi	r2,-129
 1024650:	dac12b15 	stw	r11,1196(sp)
 1024654:	88a2703a 	and	r17,r17,r2
 1024658:	dcc12d15 	stw	r19,1204(sp)
 102465c:	5825883a 	mov	r18,r11
 1024660:	d8013215 	stw	zero,1224(sp)
 1024664:	d8013415 	stw	zero,1232(sp)
 1024668:	00003206 	br	1024734 <___vfprintf_internal_r+0x650>
 102466c:	8c400214 	ori	r17,r17,8
 1024670:	1805883a 	mov	r2,r3
 1024674:	1c000007 	ldb	r16,0(r3)
 1024678:	003f0106 	br	1024280 <_gp+0xfffe5f9c>
 102467c:	8c400414 	ori	r17,r17,16
 1024680:	d8c12a15 	stw	r3,1192(sp)
 1024684:	88c0080c 	andi	r3,r17,32
 1024688:	d8812d17 	ldw	r2,1204(sp)
 102468c:	18017726 	beq	r3,zero,1024c6c <___vfprintf_internal_r+0xb88>
 1024690:	db012d17 	ldw	r12,1204(sp)
 1024694:	14c00017 	ldw	r19,0(r2)
 1024698:	17000117 	ldw	fp,4(r2)
 102469c:	63000204 	addi	r12,r12,8
 10246a0:	db012d15 	stw	r12,1204(sp)
 10246a4:	0005883a 	mov	r2,zero
 10246a8:	9f06b03a 	or	r3,r19,fp
 10246ac:	d8012785 	stb	zero,1182(sp)
 10246b0:	da413215 	stw	r9,1224(sp)
 10246b4:	002b883a 	mov	r21,zero
 10246b8:	48000216 	blt	r9,zero,10246c4 <___vfprintf_internal_r+0x5e0>
 10246bc:	013fdfc4 	movi	r4,-129
 10246c0:	8922703a 	and	r17,r17,r4
 10246c4:	1801ed1e 	bne	r3,zero,1024e7c <___vfprintf_internal_r+0xd98>
 10246c8:	4802e026 	beq	r9,zero,102524c <___vfprintf_internal_r+0x1168>
 10246cc:	10803fcc 	andi	r2,r2,255
 10246d0:	00c00044 	movi	r3,1
 10246d4:	10c20f26 	beq	r2,r3,1024f14 <___vfprintf_internal_r+0xe30>
 10246d8:	00c00084 	movi	r3,2
 10246dc:	10c2fd26 	beq	r2,r3,10252d4 <___vfprintf_internal_r+0x11f0>
 10246e0:	d8c10e04 	addi	r3,sp,1080
 10246e4:	9808d0fa 	srli	r4,r19,3
 10246e8:	e00a977a 	slli	r5,fp,29
 10246ec:	e038d0fa 	srli	fp,fp,3
 10246f0:	9cc001cc 	andi	r19,r19,7
 10246f4:	98800c04 	addi	r2,r19,48
 10246f8:	18ffffc4 	addi	r3,r3,-1
 10246fc:	2926b03a 	or	r19,r5,r4
 1024700:	18800005 	stb	r2,0(r3)
 1024704:	9f08b03a 	or	r4,r19,fp
 1024708:	203ff61e 	bne	r4,zero,10246e4 <_gp+0xfffe6400>
 102470c:	8900004c 	andi	r4,r17,1
 1024710:	d8c13115 	stw	r3,1220(sp)
 1024714:	2003791e 	bne	r4,zero,10254fc <___vfprintf_internal_r+0x1418>
 1024718:	dac12817 	ldw	r11,1184(sp)
 102471c:	58e5c83a 	sub	r18,r11,r3
 1024720:	9005883a 	mov	r2,r18
 1024724:	9240010e 	bge	r18,r9,102472c <___vfprintf_internal_r+0x648>
 1024728:	4805883a 	mov	r2,r9
 102472c:	d8812b15 	stw	r2,1196(sp)
 1024730:	d8013415 	stw	zero,1232(sp)
 1024734:	a8803fcc 	andi	r2,r21,255
 1024738:	1080201c 	xori	r2,r2,128
 102473c:	10bfe004 	addi	r2,r2,-128
 1024740:	10000326 	beq	r2,zero,1024750 <___vfprintf_internal_r+0x66c>
 1024744:	db012b17 	ldw	r12,1196(sp)
 1024748:	63000044 	addi	r12,r12,1
 102474c:	db012b15 	stw	r12,1196(sp)
 1024750:	88c0008c 	andi	r3,r17,2
 1024754:	d8c12c15 	stw	r3,1200(sp)
 1024758:	18000326 	beq	r3,zero,1024768 <___vfprintf_internal_r+0x684>
 102475c:	dac12b17 	ldw	r11,1196(sp)
 1024760:	5ac00084 	addi	r11,r11,2
 1024764:	dac12b15 	stw	r11,1196(sp)
 1024768:	8b00210c 	andi	r12,r17,132
 102476c:	db013015 	stw	r12,1216(sp)
 1024770:	6001c01e 	bne	r12,zero,1024e74 <___vfprintf_internal_r+0xd90>
 1024774:	dac12e17 	ldw	r11,1208(sp)
 1024778:	db012b17 	ldw	r12,1196(sp)
 102477c:	5b39c83a 	sub	fp,r11,r12
 1024780:	0701bc0e 	bge	zero,fp,1024e74 <___vfprintf_internal_r+0xd90>
 1024784:	02400404 	movi	r9,16
 1024788:	d8c12017 	ldw	r3,1152(sp)
 102478c:	d8811f17 	ldw	r2,1148(sp)
 1024790:	4f05220e 	bge	r9,fp,1025c1c <___vfprintf_internal_r+0x1b38>
 1024794:	014040f4 	movhi	r5,259
 1024798:	29515d84 	addi	r5,r5,17782
 102479c:	d9413615 	stw	r5,1240(sp)
 10247a0:	482b883a 	mov	r21,r9
 10247a4:	04c001c4 	movi	r19,7
 10247a8:	00000306 	br	10247b8 <___vfprintf_internal_r+0x6d4>
 10247ac:	e73ffc04 	addi	fp,fp,-16
 10247b0:	42000204 	addi	r8,r8,8
 10247b4:	af00130e 	bge	r21,fp,1024804 <___vfprintf_internal_r+0x720>
 10247b8:	02c040f4 	movhi	r11,259
 10247bc:	18c00404 	addi	r3,r3,16
 10247c0:	10800044 	addi	r2,r2,1
 10247c4:	5ad15d84 	addi	r11,r11,17782
 10247c8:	42c00015 	stw	r11,0(r8)
 10247cc:	45400115 	stw	r21,4(r8)
 10247d0:	d8c12015 	stw	r3,1152(sp)
 10247d4:	d8811f15 	stw	r2,1148(sp)
 10247d8:	98bff40e 	bge	r19,r2,10247ac <_gp+0xfffe64c8>
 10247dc:	b009883a 	mov	r4,r22
 10247e0:	b80b883a 	mov	r5,r23
 10247e4:	d9811e04 	addi	r6,sp,1144
 10247e8:	102c68c0 	call	102c68c <__sprint_r>
 10247ec:	103f541e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10247f0:	e73ffc04 	addi	fp,fp,-16
 10247f4:	d8c12017 	ldw	r3,1152(sp)
 10247f8:	d8811f17 	ldw	r2,1148(sp)
 10247fc:	da000404 	addi	r8,sp,16
 1024800:	af3fed16 	blt	r21,fp,10247b8 <_gp+0xfffe64d4>
 1024804:	db013617 	ldw	r12,1240(sp)
 1024808:	e0c7883a 	add	r3,fp,r3
 102480c:	10800044 	addi	r2,r2,1
 1024810:	43000015 	stw	r12,0(r8)
 1024814:	47000115 	stw	fp,4(r8)
 1024818:	d8c12015 	stw	r3,1152(sp)
 102481c:	d8811f15 	stw	r2,1148(sp)
 1024820:	010001c4 	movi	r4,7
 1024824:	2082f416 	blt	r4,r2,10253f8 <___vfprintf_internal_r+0x1314>
 1024828:	d8812787 	ldb	r2,1182(sp)
 102482c:	42000204 	addi	r8,r8,8
 1024830:	10000c26 	beq	r2,zero,1024864 <___vfprintf_internal_r+0x780>
 1024834:	d8811f17 	ldw	r2,1148(sp)
 1024838:	d9012784 	addi	r4,sp,1182
 102483c:	18c00044 	addi	r3,r3,1
 1024840:	10800044 	addi	r2,r2,1
 1024844:	41000015 	stw	r4,0(r8)
 1024848:	01000044 	movi	r4,1
 102484c:	41000115 	stw	r4,4(r8)
 1024850:	d8c12015 	stw	r3,1152(sp)
 1024854:	d8811f15 	stw	r2,1148(sp)
 1024858:	010001c4 	movi	r4,7
 102485c:	20828d16 	blt	r4,r2,1025294 <___vfprintf_internal_r+0x11b0>
 1024860:	42000204 	addi	r8,r8,8
 1024864:	dac12c17 	ldw	r11,1200(sp)
 1024868:	58000c26 	beq	r11,zero,102489c <___vfprintf_internal_r+0x7b8>
 102486c:	d8811f17 	ldw	r2,1148(sp)
 1024870:	d9012704 	addi	r4,sp,1180
 1024874:	18c00084 	addi	r3,r3,2
 1024878:	10800044 	addi	r2,r2,1
 102487c:	41000015 	stw	r4,0(r8)
 1024880:	01000084 	movi	r4,2
 1024884:	41000115 	stw	r4,4(r8)
 1024888:	d8c12015 	stw	r3,1152(sp)
 102488c:	d8811f15 	stw	r2,1148(sp)
 1024890:	010001c4 	movi	r4,7
 1024894:	20828716 	blt	r4,r2,10252b4 <___vfprintf_internal_r+0x11d0>
 1024898:	42000204 	addi	r8,r8,8
 102489c:	db013017 	ldw	r12,1216(sp)
 10248a0:	00802004 	movi	r2,128
 10248a4:	6081e926 	beq	r12,r2,102504c <___vfprintf_internal_r+0xf68>
 10248a8:	db013217 	ldw	r12,1224(sp)
 10248ac:	64abc83a 	sub	r21,r12,r18
 10248b0:	0540260e 	bge	zero,r21,102494c <___vfprintf_internal_r+0x868>
 10248b4:	07000404 	movi	fp,16
 10248b8:	d8811f17 	ldw	r2,1148(sp)
 10248bc:	e5443d0e 	bge	fp,r21,10259b4 <___vfprintf_internal_r+0x18d0>
 10248c0:	014040f4 	movhi	r5,259
 10248c4:	29515984 	addi	r5,r5,17766
 10248c8:	d9412c15 	stw	r5,1200(sp)
 10248cc:	04c001c4 	movi	r19,7
 10248d0:	00000306 	br	10248e0 <___vfprintf_internal_r+0x7fc>
 10248d4:	ad7ffc04 	addi	r21,r21,-16
 10248d8:	42000204 	addi	r8,r8,8
 10248dc:	e540110e 	bge	fp,r21,1024924 <___vfprintf_internal_r+0x840>
 10248e0:	18c00404 	addi	r3,r3,16
 10248e4:	10800044 	addi	r2,r2,1
 10248e8:	45000015 	stw	r20,0(r8)
 10248ec:	47000115 	stw	fp,4(r8)
 10248f0:	d8c12015 	stw	r3,1152(sp)
 10248f4:	d8811f15 	stw	r2,1148(sp)
 10248f8:	98bff60e 	bge	r19,r2,10248d4 <_gp+0xfffe65f0>
 10248fc:	b009883a 	mov	r4,r22
 1024900:	b80b883a 	mov	r5,r23
 1024904:	d9811e04 	addi	r6,sp,1144
 1024908:	102c68c0 	call	102c68c <__sprint_r>
 102490c:	103f0c1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1024910:	ad7ffc04 	addi	r21,r21,-16
 1024914:	d8c12017 	ldw	r3,1152(sp)
 1024918:	d8811f17 	ldw	r2,1148(sp)
 102491c:	da000404 	addi	r8,sp,16
 1024920:	e57fef16 	blt	fp,r21,10248e0 <_gp+0xfffe65fc>
 1024924:	dac12c17 	ldw	r11,1200(sp)
 1024928:	1d47883a 	add	r3,r3,r21
 102492c:	10800044 	addi	r2,r2,1
 1024930:	42c00015 	stw	r11,0(r8)
 1024934:	45400115 	stw	r21,4(r8)
 1024938:	d8c12015 	stw	r3,1152(sp)
 102493c:	d8811f15 	stw	r2,1148(sp)
 1024940:	010001c4 	movi	r4,7
 1024944:	20824b16 	blt	r4,r2,1025274 <___vfprintf_internal_r+0x1190>
 1024948:	42000204 	addi	r8,r8,8
 102494c:	8880400c 	andi	r2,r17,256
 1024950:	1001761e 	bne	r2,zero,1024f2c <___vfprintf_internal_r+0xe48>
 1024954:	d8811f17 	ldw	r2,1148(sp)
 1024958:	db013117 	ldw	r12,1220(sp)
 102495c:	1c87883a 	add	r3,r3,r18
 1024960:	10800044 	addi	r2,r2,1
 1024964:	43000015 	stw	r12,0(r8)
 1024968:	44800115 	stw	r18,4(r8)
 102496c:	d8c12015 	stw	r3,1152(sp)
 1024970:	d8811f15 	stw	r2,1148(sp)
 1024974:	010001c4 	movi	r4,7
 1024978:	20822616 	blt	r4,r2,1025214 <___vfprintf_internal_r+0x1130>
 102497c:	42000204 	addi	r8,r8,8
 1024980:	8c40010c 	andi	r17,r17,4
 1024984:	88003126 	beq	r17,zero,1024a4c <___vfprintf_internal_r+0x968>
 1024988:	db012e17 	ldw	r12,1208(sp)
 102498c:	dac12b17 	ldw	r11,1196(sp)
 1024990:	62e1c83a 	sub	r16,r12,r11
 1024994:	04002d0e 	bge	zero,r16,1024a4c <___vfprintf_internal_r+0x968>
 1024998:	04400404 	movi	r17,16
 102499c:	d8811f17 	ldw	r2,1148(sp)
 10249a0:	8c04df0e 	bge	r17,r16,1025d20 <___vfprintf_internal_r+0x1c3c>
 10249a4:	010040f4 	movhi	r4,259
 10249a8:	21115d84 	addi	r4,r4,17782
 10249ac:	d9013615 	stw	r4,1240(sp)
 10249b0:	048001c4 	movi	r18,7
 10249b4:	00000306 	br	10249c4 <___vfprintf_internal_r+0x8e0>
 10249b8:	843ffc04 	addi	r16,r16,-16
 10249bc:	42000204 	addi	r8,r8,8
 10249c0:	8c00130e 	bge	r17,r16,1024a10 <___vfprintf_internal_r+0x92c>
 10249c4:	014040f4 	movhi	r5,259
 10249c8:	18c00404 	addi	r3,r3,16
 10249cc:	10800044 	addi	r2,r2,1
 10249d0:	29515d84 	addi	r5,r5,17782
 10249d4:	41400015 	stw	r5,0(r8)
 10249d8:	44400115 	stw	r17,4(r8)
 10249dc:	d8c12015 	stw	r3,1152(sp)
 10249e0:	d8811f15 	stw	r2,1148(sp)
 10249e4:	90bff40e 	bge	r18,r2,10249b8 <_gp+0xfffe66d4>
 10249e8:	b009883a 	mov	r4,r22
 10249ec:	b80b883a 	mov	r5,r23
 10249f0:	d9811e04 	addi	r6,sp,1144
 10249f4:	102c68c0 	call	102c68c <__sprint_r>
 10249f8:	103ed11e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10249fc:	843ffc04 	addi	r16,r16,-16
 1024a00:	d8c12017 	ldw	r3,1152(sp)
 1024a04:	d8811f17 	ldw	r2,1148(sp)
 1024a08:	da000404 	addi	r8,sp,16
 1024a0c:	8c3fed16 	blt	r17,r16,10249c4 <_gp+0xfffe66e0>
 1024a10:	dac13617 	ldw	r11,1240(sp)
 1024a14:	1c07883a 	add	r3,r3,r16
 1024a18:	10800044 	addi	r2,r2,1
 1024a1c:	42c00015 	stw	r11,0(r8)
 1024a20:	44000115 	stw	r16,4(r8)
 1024a24:	d8c12015 	stw	r3,1152(sp)
 1024a28:	d8811f15 	stw	r2,1148(sp)
 1024a2c:	010001c4 	movi	r4,7
 1024a30:	2080060e 	bge	r4,r2,1024a4c <___vfprintf_internal_r+0x968>
 1024a34:	b009883a 	mov	r4,r22
 1024a38:	b80b883a 	mov	r5,r23
 1024a3c:	d9811e04 	addi	r6,sp,1144
 1024a40:	102c68c0 	call	102c68c <__sprint_r>
 1024a44:	103ebe1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1024a48:	d8c12017 	ldw	r3,1152(sp)
 1024a4c:	d8812b17 	ldw	r2,1196(sp)
 1024a50:	db012e17 	ldw	r12,1208(sp)
 1024a54:	1300010e 	bge	r2,r12,1024a5c <___vfprintf_internal_r+0x978>
 1024a58:	6005883a 	mov	r2,r12
 1024a5c:	dac12f17 	ldw	r11,1212(sp)
 1024a60:	5897883a 	add	r11,r11,r2
 1024a64:	dac12f15 	stw	r11,1212(sp)
 1024a68:	1801f21e 	bne	r3,zero,1025234 <___vfprintf_internal_r+0x1150>
 1024a6c:	d8011f15 	stw	zero,1148(sp)
 1024a70:	da000404 	addi	r8,sp,16
 1024a74:	003dd806 	br	10241d8 <_gp+0xfffe5ef4>
 1024a78:	8c400414 	ori	r17,r17,16
 1024a7c:	d8c12a15 	stw	r3,1192(sp)
 1024a80:	88c0080c 	andi	r3,r17,32
 1024a84:	d8812d17 	ldw	r2,1204(sp)
 1024a88:	18004626 	beq	r3,zero,1024ba4 <___vfprintf_internal_r+0xac0>
 1024a8c:	dac12d17 	ldw	r11,1204(sp)
 1024a90:	14c00017 	ldw	r19,0(r2)
 1024a94:	17000117 	ldw	fp,4(r2)
 1024a98:	5ac00204 	addi	r11,r11,8
 1024a9c:	dac12d15 	stw	r11,1204(sp)
 1024aa0:	00800044 	movi	r2,1
 1024aa4:	9f06b03a 	or	r3,r19,fp
 1024aa8:	003f0006 	br	10246ac <_gp+0xfffe63c8>
 1024aac:	1805883a 	mov	r2,r3
 1024ab0:	d8012e15 	stw	zero,1208(sp)
 1024ab4:	82fff404 	addi	r11,r16,-48
 1024ab8:	0019883a 	mov	r12,zero
 1024abc:	14000007 	ldb	r16,0(r2)
 1024ac0:	630002a4 	muli	r12,r12,10
 1024ac4:	18c00044 	addi	r3,r3,1
 1024ac8:	1805883a 	mov	r2,r3
 1024acc:	62d9883a 	add	r12,r12,r11
 1024ad0:	82fff404 	addi	r11,r16,-48
 1024ad4:	2afff92e 	bgeu	r5,r11,1024abc <_gp+0xfffe67d8>
 1024ad8:	db012e15 	stw	r12,1208(sp)
 1024adc:	003de906 	br	1024284 <_gp+0xfffe5fa0>
 1024ae0:	8c400414 	ori	r17,r17,16
 1024ae4:	d8c12a15 	stw	r3,1192(sp)
 1024ae8:	d9812785 	stb	r6,1182(sp)
 1024aec:	8880080c 	andi	r2,r17,32
 1024af0:	d8c12d17 	ldw	r3,1204(sp)
 1024af4:	10007a26 	beq	r2,zero,1024ce0 <___vfprintf_internal_r+0xbfc>
 1024af8:	db012d17 	ldw	r12,1204(sp)
 1024afc:	18800117 	ldw	r2,4(r3)
 1024b00:	1cc00017 	ldw	r19,0(r3)
 1024b04:	63000204 	addi	r12,r12,8
 1024b08:	db012d15 	stw	r12,1204(sp)
 1024b0c:	1039883a 	mov	fp,r2
 1024b10:	10031016 	blt	r2,zero,1025754 <___vfprintf_internal_r+0x1670>
 1024b14:	dd412783 	ldbu	r21,1182(sp)
 1024b18:	da413215 	stw	r9,1224(sp)
 1024b1c:	00800044 	movi	r2,1
 1024b20:	9f06b03a 	or	r3,r19,fp
 1024b24:	003ee406 	br	10246b8 <_gp+0xfffe63d4>
 1024b28:	030040f4 	movhi	r12,259
 1024b2c:	63114504 	addi	r12,r12,17684
 1024b30:	d8c12a15 	stw	r3,1192(sp)
 1024b34:	d9812785 	stb	r6,1182(sp)
 1024b38:	db013b15 	stw	r12,1260(sp)
 1024b3c:	88c0080c 	andi	r3,r17,32
 1024b40:	d8812d17 	ldw	r2,1204(sp)
 1024b44:	18002b26 	beq	r3,zero,1024bf4 <___vfprintf_internal_r+0xb10>
 1024b48:	dac12d17 	ldw	r11,1204(sp)
 1024b4c:	14c00017 	ldw	r19,0(r2)
 1024b50:	17000117 	ldw	fp,4(r2)
 1024b54:	5ac00204 	addi	r11,r11,8
 1024b58:	dac12d15 	stw	r11,1204(sp)
 1024b5c:	8880004c 	andi	r2,r17,1
 1024b60:	10025b26 	beq	r2,zero,10254d0 <___vfprintf_internal_r+0x13ec>
 1024b64:	9f06b03a 	or	r3,r19,fp
 1024b68:	18037026 	beq	r3,zero,102592c <___vfprintf_internal_r+0x1848>
 1024b6c:	00800c04 	movi	r2,48
 1024b70:	d8812705 	stb	r2,1180(sp)
 1024b74:	dc012745 	stb	r16,1181(sp)
 1024b78:	8c400094 	ori	r17,r17,2
 1024b7c:	00800084 	movi	r2,2
 1024b80:	003eca06 	br	10246ac <_gp+0xfffe63c8>
 1024b84:	8c400814 	ori	r17,r17,32
 1024b88:	1805883a 	mov	r2,r3
 1024b8c:	1c000007 	ldb	r16,0(r3)
 1024b90:	003dbb06 	br	1024280 <_gp+0xfffe5f9c>
 1024b94:	d8c12a15 	stw	r3,1192(sp)
 1024b98:	88c0080c 	andi	r3,r17,32
 1024b9c:	d8812d17 	ldw	r2,1204(sp)
 1024ba0:	183fba1e 	bne	r3,zero,1024a8c <_gp+0xfffe67a8>
 1024ba4:	88c0040c 	andi	r3,r17,16
 1024ba8:	18024c1e 	bne	r3,zero,10254dc <___vfprintf_internal_r+0x13f8>
 1024bac:	88c0100c 	andi	r3,r17,64
 1024bb0:	18024a26 	beq	r3,zero,10254dc <___vfprintf_internal_r+0x13f8>
 1024bb4:	dac12d17 	ldw	r11,1204(sp)
 1024bb8:	14c0000b 	ldhu	r19,0(r2)
 1024bbc:	0039883a 	mov	fp,zero
 1024bc0:	5ac00104 	addi	r11,r11,4
 1024bc4:	dac12d15 	stw	r11,1204(sp)
 1024bc8:	00800044 	movi	r2,1
 1024bcc:	9807883a 	mov	r3,r19
 1024bd0:	003eb606 	br	10246ac <_gp+0xfffe63c8>
 1024bd4:	008040f4 	movhi	r2,259
 1024bd8:	10914a04 	addi	r2,r2,17704
 1024bdc:	d8c12a15 	stw	r3,1192(sp)
 1024be0:	d8813b15 	stw	r2,1260(sp)
 1024be4:	d9812785 	stb	r6,1182(sp)
 1024be8:	88c0080c 	andi	r3,r17,32
 1024bec:	d8812d17 	ldw	r2,1204(sp)
 1024bf0:	183fd51e 	bne	r3,zero,1024b48 <_gp+0xfffe6864>
 1024bf4:	88c0040c 	andi	r3,r17,16
 1024bf8:	18034126 	beq	r3,zero,1025900 <___vfprintf_internal_r+0x181c>
 1024bfc:	db012d17 	ldw	r12,1204(sp)
 1024c00:	14c00017 	ldw	r19,0(r2)
 1024c04:	0039883a 	mov	fp,zero
 1024c08:	63000104 	addi	r12,r12,4
 1024c0c:	db012d15 	stw	r12,1204(sp)
 1024c10:	003fd206 	br	1024b5c <_gp+0xfffe6878>
 1024c14:	1c000007 	ldb	r16,0(r3)
 1024c18:	81c3d626 	beq	r16,r7,1025b74 <___vfprintf_internal_r+0x1a90>
 1024c1c:	8c400414 	ori	r17,r17,16
 1024c20:	1805883a 	mov	r2,r3
 1024c24:	003d9606 	br	1024280 <_gp+0xfffe5f9c>
 1024c28:	d8c12a15 	stw	r3,1192(sp)
 1024c2c:	d9812785 	stb	r6,1182(sp)
 1024c30:	8880080c 	andi	r2,r17,32
 1024c34:	10033f26 	beq	r2,zero,1025934 <___vfprintf_internal_r+0x1850>
 1024c38:	db012d17 	ldw	r12,1204(sp)
 1024c3c:	dac12f17 	ldw	r11,1212(sp)
 1024c40:	60800017 	ldw	r2,0(r12)
 1024c44:	5807d7fa 	srai	r3,r11,31
 1024c48:	63000104 	addi	r12,r12,4
 1024c4c:	db012d15 	stw	r12,1204(sp)
 1024c50:	12c00015 	stw	r11,0(r2)
 1024c54:	10c00115 	stw	r3,4(r2)
 1024c58:	003d5f06 	br	10241d8 <_gp+0xfffe5ef4>
 1024c5c:	d8c12a15 	stw	r3,1192(sp)
 1024c60:	88c0080c 	andi	r3,r17,32
 1024c64:	d8812d17 	ldw	r2,1204(sp)
 1024c68:	183e891e 	bne	r3,zero,1024690 <_gp+0xfffe63ac>
 1024c6c:	88c0040c 	andi	r3,r17,16
 1024c70:	1801ea1e 	bne	r3,zero,102541c <___vfprintf_internal_r+0x1338>
 1024c74:	88c0100c 	andi	r3,r17,64
 1024c78:	1801e826 	beq	r3,zero,102541c <___vfprintf_internal_r+0x1338>
 1024c7c:	db012d17 	ldw	r12,1204(sp)
 1024c80:	14c0000b 	ldhu	r19,0(r2)
 1024c84:	0039883a 	mov	fp,zero
 1024c88:	63000104 	addi	r12,r12,4
 1024c8c:	db012d15 	stw	r12,1204(sp)
 1024c90:	0005883a 	mov	r2,zero
 1024c94:	9807883a 	mov	r3,r19
 1024c98:	003e8406 	br	10246ac <_gp+0xfffe63c8>
 1024c9c:	30803fcc 	andi	r2,r6,255
 1024ca0:	1080201c 	xori	r2,r2,128
 1024ca4:	10bfe004 	addi	r2,r2,-128
 1024ca8:	10031d1e 	bne	r2,zero,1025920 <___vfprintf_internal_r+0x183c>
 1024cac:	1805883a 	mov	r2,r3
 1024cb0:	01800804 	movi	r6,32
 1024cb4:	1c000007 	ldb	r16,0(r3)
 1024cb8:	003d7106 	br	1024280 <_gp+0xfffe5f9c>
 1024cbc:	8c400054 	ori	r17,r17,1
 1024cc0:	1805883a 	mov	r2,r3
 1024cc4:	1c000007 	ldb	r16,0(r3)
 1024cc8:	003d6d06 	br	1024280 <_gp+0xfffe5f9c>
 1024ccc:	d8c12a15 	stw	r3,1192(sp)
 1024cd0:	d9812785 	stb	r6,1182(sp)
 1024cd4:	8880080c 	andi	r2,r17,32
 1024cd8:	d8c12d17 	ldw	r3,1204(sp)
 1024cdc:	103f861e 	bne	r2,zero,1024af8 <_gp+0xfffe6814>
 1024ce0:	8880040c 	andi	r2,r17,16
 1024ce4:	1001f31e 	bne	r2,zero,10254b4 <___vfprintf_internal_r+0x13d0>
 1024ce8:	8880100c 	andi	r2,r17,64
 1024cec:	1001f126 	beq	r2,zero,10254b4 <___vfprintf_internal_r+0x13d0>
 1024cf0:	1cc0000f 	ldh	r19,0(r3)
 1024cf4:	db012d17 	ldw	r12,1204(sp)
 1024cf8:	9839d7fa 	srai	fp,r19,31
 1024cfc:	63000104 	addi	r12,r12,4
 1024d00:	db012d15 	stw	r12,1204(sp)
 1024d04:	e005883a 	mov	r2,fp
 1024d08:	003f8106 	br	1024b10 <_gp+0xfffe682c>
 1024d0c:	8c401014 	ori	r17,r17,64
 1024d10:	1805883a 	mov	r2,r3
 1024d14:	1c000007 	ldb	r16,0(r3)
 1024d18:	003d5906 	br	1024280 <_gp+0xfffe5f9c>
 1024d1c:	db012d17 	ldw	r12,1204(sp)
 1024d20:	d8c12a15 	stw	r3,1192(sp)
 1024d24:	00c00044 	movi	r3,1
 1024d28:	60800017 	ldw	r2,0(r12)
 1024d2c:	63000104 	addi	r12,r12,4
 1024d30:	d8c12b15 	stw	r3,1196(sp)
 1024d34:	d8012785 	stb	zero,1182(sp)
 1024d38:	d8810405 	stb	r2,1040(sp)
 1024d3c:	db012d15 	stw	r12,1204(sp)
 1024d40:	dac10404 	addi	r11,sp,1040
 1024d44:	1825883a 	mov	r18,r3
 1024d48:	d8013215 	stw	zero,1224(sp)
 1024d4c:	d8013415 	stw	zero,1232(sp)
 1024d50:	dac13115 	stw	r11,1220(sp)
 1024d54:	0005883a 	mov	r2,zero
 1024d58:	003e7d06 	br	1024750 <_gp+0xfffe646c>
 1024d5c:	db012d17 	ldw	r12,1204(sp)
 1024d60:	00800c04 	movi	r2,48
 1024d64:	d8812705 	stb	r2,1180(sp)
 1024d68:	64c00017 	ldw	r19,0(r12)
 1024d6c:	00801e04 	movi	r2,120
 1024d70:	d8812745 	stb	r2,1181(sp)
 1024d74:	008040f4 	movhi	r2,259
 1024d78:	10914a04 	addi	r2,r2,17704
 1024d7c:	63000104 	addi	r12,r12,4
 1024d80:	d8c12a15 	stw	r3,1192(sp)
 1024d84:	d8813b15 	stw	r2,1260(sp)
 1024d88:	0039883a 	mov	fp,zero
 1024d8c:	8c400094 	ori	r17,r17,2
 1024d90:	db012d15 	stw	r12,1204(sp)
 1024d94:	00800084 	movi	r2,2
 1024d98:	04001e04 	movi	r16,120
 1024d9c:	9807883a 	mov	r3,r19
 1024da0:	003e4206 	br	10246ac <_gp+0xfffe63c8>
 1024da4:	dac12d17 	ldw	r11,1204(sp)
 1024da8:	db012d17 	ldw	r12,1204(sp)
 1024dac:	d8c12a15 	stw	r3,1192(sp)
 1024db0:	5ac00017 	ldw	r11,0(r11)
 1024db4:	d8012785 	stb	zero,1182(sp)
 1024db8:	64c00104 	addi	r19,r12,4
 1024dbc:	dac13115 	stw	r11,1220(sp)
 1024dc0:	5803e826 	beq	r11,zero,1025d64 <___vfprintf_internal_r+0x1c80>
 1024dc4:	d9013117 	ldw	r4,1220(sp)
 1024dc8:	48037a16 	blt	r9,zero,1025bb4 <___vfprintf_internal_r+0x1ad0>
 1024dcc:	480d883a 	mov	r6,r9
 1024dd0:	000b883a 	mov	r5,zero
 1024dd4:	da013f15 	stw	r8,1276(sp)
 1024dd8:	da413e15 	stw	r9,1272(sp)
 1024ddc:	10296ec0 	call	10296ec <memchr>
 1024de0:	da013f17 	ldw	r8,1276(sp)
 1024de4:	da413e17 	ldw	r9,1272(sp)
 1024de8:	10044426 	beq	r2,zero,1025efc <___vfprintf_internal_r+0x1e18>
 1024dec:	d8c13117 	ldw	r3,1220(sp)
 1024df0:	10e5c83a 	sub	r18,r2,r3
 1024df4:	4c834416 	blt	r9,r18,1025b08 <___vfprintf_internal_r+0x1a24>
 1024df8:	9005883a 	mov	r2,r18
 1024dfc:	90037216 	blt	r18,zero,1025bc8 <___vfprintf_internal_r+0x1ae4>
 1024e00:	dd412783 	ldbu	r21,1182(sp)
 1024e04:	d8812b15 	stw	r2,1196(sp)
 1024e08:	dcc12d15 	stw	r19,1204(sp)
 1024e0c:	d8013215 	stw	zero,1224(sp)
 1024e10:	d8013415 	stw	zero,1232(sp)
 1024e14:	003e4706 	br	1024734 <_gp+0xfffe6450>
 1024e18:	dac12d17 	ldw	r11,1204(sp)
 1024e1c:	db012d17 	ldw	r12,1204(sp)
 1024e20:	5ac00017 	ldw	r11,0(r11)
 1024e24:	dac12e15 	stw	r11,1208(sp)
 1024e28:	62c00104 	addi	r11,r12,4
 1024e2c:	db012e17 	ldw	r12,1208(sp)
 1024e30:	60034a16 	blt	r12,zero,1025b5c <___vfprintf_internal_r+0x1a78>
 1024e34:	dac12d15 	stw	r11,1204(sp)
 1024e38:	1805883a 	mov	r2,r3
 1024e3c:	1c000007 	ldb	r16,0(r3)
 1024e40:	003d0f06 	br	1024280 <_gp+0xfffe5f9c>
 1024e44:	1805883a 	mov	r2,r3
 1024e48:	01800ac4 	movi	r6,43
 1024e4c:	1c000007 	ldb	r16,0(r3)
 1024e50:	003d0b06 	br	1024280 <_gp+0xfffe5f9c>
 1024e54:	d8c12a15 	stw	r3,1192(sp)
 1024e58:	d9812785 	stb	r6,1182(sp)
 1024e5c:	803db226 	beq	r16,zero,1024528 <_gp+0xfffe6244>
 1024e60:	00c00044 	movi	r3,1
 1024e64:	d8c12b15 	stw	r3,1196(sp)
 1024e68:	dc010405 	stb	r16,1040(sp)
 1024e6c:	d8012785 	stb	zero,1182(sp)
 1024e70:	003fb306 	br	1024d40 <_gp+0xfffe6a5c>
 1024e74:	d8c12017 	ldw	r3,1152(sp)
 1024e78:	003e6d06 	br	1024830 <_gp+0xfffe654c>
 1024e7c:	10803fcc 	andi	r2,r2,255
 1024e80:	00c00044 	movi	r3,1
 1024e84:	10fe141e 	bne	r2,r3,10246d8 <_gp+0xfffe63f4>
 1024e88:	e000021e 	bne	fp,zero,1024e94 <___vfprintf_internal_r+0xdb0>
 1024e8c:	00800244 	movi	r2,9
 1024e90:	14c0202e 	bgeu	r2,r19,1024f14 <___vfprintf_internal_r+0xe30>
 1024e94:	dc012b15 	stw	r16,1196(sp)
 1024e98:	dc412c15 	stw	r17,1200(sp)
 1024e9c:	9821883a 	mov	r16,r19
 1024ea0:	e023883a 	mov	r17,fp
 1024ea4:	dc810e04 	addi	r18,sp,1080
 1024ea8:	4027883a 	mov	r19,r8
 1024eac:	4839883a 	mov	fp,r9
 1024eb0:	8009883a 	mov	r4,r16
 1024eb4:	880b883a 	mov	r5,r17
 1024eb8:	01800284 	movi	r6,10
 1024ebc:	000f883a 	mov	r7,zero
 1024ec0:	102e91c0 	call	102e91c <__umoddi3>
 1024ec4:	10800c04 	addi	r2,r2,48
 1024ec8:	94bfffc4 	addi	r18,r18,-1
 1024ecc:	8009883a 	mov	r4,r16
 1024ed0:	880b883a 	mov	r5,r17
 1024ed4:	01800284 	movi	r6,10
 1024ed8:	000f883a 	mov	r7,zero
 1024edc:	90800005 	stb	r2,0(r18)
 1024ee0:	102e35c0 	call	102e35c <__udivdi3>
 1024ee4:	1021883a 	mov	r16,r2
 1024ee8:	10c4b03a 	or	r2,r2,r3
 1024eec:	1823883a 	mov	r17,r3
 1024ef0:	103fef1e 	bne	r2,zero,1024eb0 <_gp+0xfffe6bcc>
 1024ef4:	dac12817 	ldw	r11,1184(sp)
 1024ef8:	dc813115 	stw	r18,1220(sp)
 1024efc:	dc012b17 	ldw	r16,1196(sp)
 1024f00:	9811883a 	mov	r8,r19
 1024f04:	dc412c17 	ldw	r17,1200(sp)
 1024f08:	e013883a 	mov	r9,fp
 1024f0c:	5ca5c83a 	sub	r18,r11,r18
 1024f10:	003e0306 	br	1024720 <_gp+0xfffe643c>
 1024f14:	9cc00c04 	addi	r19,r19,48
 1024f18:	d8c10dc4 	addi	r3,sp,1079
 1024f1c:	dcc10dc5 	stb	r19,1079(sp)
 1024f20:	dc813c17 	ldw	r18,1264(sp)
 1024f24:	d8c13115 	stw	r3,1220(sp)
 1024f28:	003dfd06 	br	1024720 <_gp+0xfffe643c>
 1024f2c:	00801944 	movi	r2,101
 1024f30:	1400710e 	bge	r2,r16,10250f8 <___vfprintf_internal_r+0x1014>
 1024f34:	d9013717 	ldw	r4,1244(sp)
 1024f38:	d9413917 	ldw	r5,1252(sp)
 1024f3c:	000d883a 	mov	r6,zero
 1024f40:	000f883a 	mov	r7,zero
 1024f44:	d8c13d15 	stw	r3,1268(sp)
 1024f48:	da013f15 	stw	r8,1276(sp)
 1024f4c:	10300140 	call	1030014 <__eqdf2>
 1024f50:	d8c13d17 	ldw	r3,1268(sp)
 1024f54:	da013f17 	ldw	r8,1276(sp)
 1024f58:	1000ef1e 	bne	r2,zero,1025318 <___vfprintf_internal_r+0x1234>
 1024f5c:	d8811f17 	ldw	r2,1148(sp)
 1024f60:	010040f4 	movhi	r4,259
 1024f64:	21115104 	addi	r4,r4,17732
 1024f68:	18c00044 	addi	r3,r3,1
 1024f6c:	10800044 	addi	r2,r2,1
 1024f70:	41000015 	stw	r4,0(r8)
 1024f74:	01000044 	movi	r4,1
 1024f78:	41000115 	stw	r4,4(r8)
 1024f7c:	d8c12015 	stw	r3,1152(sp)
 1024f80:	d8811f15 	stw	r2,1148(sp)
 1024f84:	010001c4 	movi	r4,7
 1024f88:	20828e16 	blt	r4,r2,10259c4 <___vfprintf_internal_r+0x18e0>
 1024f8c:	42000204 	addi	r8,r8,8
 1024f90:	d8812617 	ldw	r2,1176(sp)
 1024f94:	dac13317 	ldw	r11,1228(sp)
 1024f98:	12c00216 	blt	r2,r11,1024fa4 <___vfprintf_internal_r+0xec0>
 1024f9c:	8880004c 	andi	r2,r17,1
 1024fa0:	103e7726 	beq	r2,zero,1024980 <_gp+0xfffe669c>
 1024fa4:	db013817 	ldw	r12,1248(sp)
 1024fa8:	d8811f17 	ldw	r2,1148(sp)
 1024fac:	dac13517 	ldw	r11,1236(sp)
 1024fb0:	1b07883a 	add	r3,r3,r12
 1024fb4:	10800044 	addi	r2,r2,1
 1024fb8:	42c00015 	stw	r11,0(r8)
 1024fbc:	43000115 	stw	r12,4(r8)
 1024fc0:	d8c12015 	stw	r3,1152(sp)
 1024fc4:	d8811f15 	stw	r2,1148(sp)
 1024fc8:	010001c4 	movi	r4,7
 1024fcc:	2082ed16 	blt	r4,r2,1025b84 <___vfprintf_internal_r+0x1aa0>
 1024fd0:	42000204 	addi	r8,r8,8
 1024fd4:	db013317 	ldw	r12,1228(sp)
 1024fd8:	643fffc4 	addi	r16,r12,-1
 1024fdc:	043e680e 	bge	zero,r16,1024980 <_gp+0xfffe669c>
 1024fe0:	04800404 	movi	r18,16
 1024fe4:	d8811f17 	ldw	r2,1148(sp)
 1024fe8:	94007e0e 	bge	r18,r16,10251e4 <___vfprintf_internal_r+0x1100>
 1024fec:	014040f4 	movhi	r5,259
 1024ff0:	29515984 	addi	r5,r5,17766
 1024ff4:	d9412c15 	stw	r5,1200(sp)
 1024ff8:	054001c4 	movi	r21,7
 1024ffc:	00000306 	br	102500c <___vfprintf_internal_r+0xf28>
 1025000:	42000204 	addi	r8,r8,8
 1025004:	843ffc04 	addi	r16,r16,-16
 1025008:	9400790e 	bge	r18,r16,10251f0 <___vfprintf_internal_r+0x110c>
 102500c:	18c00404 	addi	r3,r3,16
 1025010:	10800044 	addi	r2,r2,1
 1025014:	45000015 	stw	r20,0(r8)
 1025018:	44800115 	stw	r18,4(r8)
 102501c:	d8c12015 	stw	r3,1152(sp)
 1025020:	d8811f15 	stw	r2,1148(sp)
 1025024:	a8bff60e 	bge	r21,r2,1025000 <_gp+0xfffe6d1c>
 1025028:	b009883a 	mov	r4,r22
 102502c:	b80b883a 	mov	r5,r23
 1025030:	d9811e04 	addi	r6,sp,1144
 1025034:	102c68c0 	call	102c68c <__sprint_r>
 1025038:	103d411e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 102503c:	d8c12017 	ldw	r3,1152(sp)
 1025040:	d8811f17 	ldw	r2,1148(sp)
 1025044:	da000404 	addi	r8,sp,16
 1025048:	003fee06 	br	1025004 <_gp+0xfffe6d20>
 102504c:	dac12e17 	ldw	r11,1208(sp)
 1025050:	db012b17 	ldw	r12,1196(sp)
 1025054:	5b2bc83a 	sub	r21,r11,r12
 1025058:	057e130e 	bge	zero,r21,10248a8 <_gp+0xfffe65c4>
 102505c:	07000404 	movi	fp,16
 1025060:	d8811f17 	ldw	r2,1148(sp)
 1025064:	e543640e 	bge	fp,r21,1025df8 <___vfprintf_internal_r+0x1d14>
 1025068:	014040f4 	movhi	r5,259
 102506c:	29515984 	addi	r5,r5,17766
 1025070:	d9412c15 	stw	r5,1200(sp)
 1025074:	04c001c4 	movi	r19,7
 1025078:	00000306 	br	1025088 <___vfprintf_internal_r+0xfa4>
 102507c:	ad7ffc04 	addi	r21,r21,-16
 1025080:	42000204 	addi	r8,r8,8
 1025084:	e540110e 	bge	fp,r21,10250cc <___vfprintf_internal_r+0xfe8>
 1025088:	18c00404 	addi	r3,r3,16
 102508c:	10800044 	addi	r2,r2,1
 1025090:	45000015 	stw	r20,0(r8)
 1025094:	47000115 	stw	fp,4(r8)
 1025098:	d8c12015 	stw	r3,1152(sp)
 102509c:	d8811f15 	stw	r2,1148(sp)
 10250a0:	98bff60e 	bge	r19,r2,102507c <_gp+0xfffe6d98>
 10250a4:	b009883a 	mov	r4,r22
 10250a8:	b80b883a 	mov	r5,r23
 10250ac:	d9811e04 	addi	r6,sp,1144
 10250b0:	102c68c0 	call	102c68c <__sprint_r>
 10250b4:	103d221e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10250b8:	ad7ffc04 	addi	r21,r21,-16
 10250bc:	d8c12017 	ldw	r3,1152(sp)
 10250c0:	d8811f17 	ldw	r2,1148(sp)
 10250c4:	da000404 	addi	r8,sp,16
 10250c8:	e57fef16 	blt	fp,r21,1025088 <_gp+0xfffe6da4>
 10250cc:	dac12c17 	ldw	r11,1200(sp)
 10250d0:	1d47883a 	add	r3,r3,r21
 10250d4:	10800044 	addi	r2,r2,1
 10250d8:	42c00015 	stw	r11,0(r8)
 10250dc:	45400115 	stw	r21,4(r8)
 10250e0:	d8c12015 	stw	r3,1152(sp)
 10250e4:	d8811f15 	stw	r2,1148(sp)
 10250e8:	010001c4 	movi	r4,7
 10250ec:	20819116 	blt	r4,r2,1025734 <___vfprintf_internal_r+0x1650>
 10250f0:	42000204 	addi	r8,r8,8
 10250f4:	003dec06 	br	10248a8 <_gp+0xfffe65c4>
 10250f8:	db013317 	ldw	r12,1228(sp)
 10250fc:	00800044 	movi	r2,1
 1025100:	18c00044 	addi	r3,r3,1
 1025104:	1301530e 	bge	r2,r12,1025654 <___vfprintf_internal_r+0x1570>
 1025108:	dc011f17 	ldw	r16,1148(sp)
 102510c:	dac13117 	ldw	r11,1220(sp)
 1025110:	00800044 	movi	r2,1
 1025114:	84000044 	addi	r16,r16,1
 1025118:	40800115 	stw	r2,4(r8)
 102511c:	42c00015 	stw	r11,0(r8)
 1025120:	d8c12015 	stw	r3,1152(sp)
 1025124:	dc011f15 	stw	r16,1148(sp)
 1025128:	008001c4 	movi	r2,7
 102512c:	14016b16 	blt	r2,r16,10256dc <___vfprintf_internal_r+0x15f8>
 1025130:	42000204 	addi	r8,r8,8
 1025134:	db013817 	ldw	r12,1248(sp)
 1025138:	dac13517 	ldw	r11,1236(sp)
 102513c:	84000044 	addi	r16,r16,1
 1025140:	1b07883a 	add	r3,r3,r12
 1025144:	42c00015 	stw	r11,0(r8)
 1025148:	43000115 	stw	r12,4(r8)
 102514c:	d8c12015 	stw	r3,1152(sp)
 1025150:	dc011f15 	stw	r16,1148(sp)
 1025154:	008001c4 	movi	r2,7
 1025158:	14016916 	blt	r2,r16,1025700 <___vfprintf_internal_r+0x161c>
 102515c:	44800204 	addi	r18,r8,8
 1025160:	d9013717 	ldw	r4,1244(sp)
 1025164:	d9413917 	ldw	r5,1252(sp)
 1025168:	000d883a 	mov	r6,zero
 102516c:	000f883a 	mov	r7,zero
 1025170:	d8c13d15 	stw	r3,1268(sp)
 1025174:	10300140 	call	1030014 <__eqdf2>
 1025178:	d8c13d17 	ldw	r3,1268(sp)
 102517c:	db013317 	ldw	r12,1228(sp)
 1025180:	1000ae26 	beq	r2,zero,102543c <___vfprintf_internal_r+0x1358>
 1025184:	dac13117 	ldw	r11,1220(sp)
 1025188:	60bfffc4 	addi	r2,r12,-1
 102518c:	1887883a 	add	r3,r3,r2
 1025190:	59000044 	addi	r4,r11,1
 1025194:	84000044 	addi	r16,r16,1
 1025198:	90800115 	stw	r2,4(r18)
 102519c:	91000015 	stw	r4,0(r18)
 10251a0:	d8c12015 	stw	r3,1152(sp)
 10251a4:	dc011f15 	stw	r16,1148(sp)
 10251a8:	008001c4 	movi	r2,7
 10251ac:	14014216 	blt	r2,r16,10256b8 <___vfprintf_internal_r+0x15d4>
 10251b0:	94800204 	addi	r18,r18,8
 10251b4:	dac13a17 	ldw	r11,1256(sp)
 10251b8:	dd4122c4 	addi	r21,sp,1163
 10251bc:	84000044 	addi	r16,r16,1
 10251c0:	58c7883a 	add	r3,r11,r3
 10251c4:	95400015 	stw	r21,0(r18)
 10251c8:	92c00115 	stw	r11,4(r18)
 10251cc:	d8c12015 	stw	r3,1152(sp)
 10251d0:	dc011f15 	stw	r16,1148(sp)
 10251d4:	008001c4 	movi	r2,7
 10251d8:	14000e16 	blt	r2,r16,1025214 <___vfprintf_internal_r+0x1130>
 10251dc:	92000204 	addi	r8,r18,8
 10251e0:	003de706 	br	1024980 <_gp+0xfffe669c>
 10251e4:	010040f4 	movhi	r4,259
 10251e8:	21115984 	addi	r4,r4,17766
 10251ec:	d9012c15 	stw	r4,1200(sp)
 10251f0:	dac12c17 	ldw	r11,1200(sp)
 10251f4:	1c07883a 	add	r3,r3,r16
 10251f8:	44000115 	stw	r16,4(r8)
 10251fc:	42c00015 	stw	r11,0(r8)
 1025200:	10800044 	addi	r2,r2,1
 1025204:	d8c12015 	stw	r3,1152(sp)
 1025208:	d8811f15 	stw	r2,1148(sp)
 102520c:	010001c4 	movi	r4,7
 1025210:	20bdda0e 	bge	r4,r2,102497c <_gp+0xfffe6698>
 1025214:	b009883a 	mov	r4,r22
 1025218:	b80b883a 	mov	r5,r23
 102521c:	d9811e04 	addi	r6,sp,1144
 1025220:	102c68c0 	call	102c68c <__sprint_r>
 1025224:	103cc61e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025228:	d8c12017 	ldw	r3,1152(sp)
 102522c:	da000404 	addi	r8,sp,16
 1025230:	003dd306 	br	1024980 <_gp+0xfffe669c>
 1025234:	b009883a 	mov	r4,r22
 1025238:	b80b883a 	mov	r5,r23
 102523c:	d9811e04 	addi	r6,sp,1144
 1025240:	102c68c0 	call	102c68c <__sprint_r>
 1025244:	103e0926 	beq	r2,zero,1024a6c <_gp+0xfffe6788>
 1025248:	003cbd06 	br	1024540 <_gp+0xfffe625c>
 102524c:	10803fcc 	andi	r2,r2,255
 1025250:	1000651e 	bne	r2,zero,10253e8 <___vfprintf_internal_r+0x1304>
 1025254:	8880004c 	andi	r2,r17,1
 1025258:	10013226 	beq	r2,zero,1025724 <___vfprintf_internal_r+0x1640>
 102525c:	00800c04 	movi	r2,48
 1025260:	d8c10dc4 	addi	r3,sp,1079
 1025264:	d8810dc5 	stb	r2,1079(sp)
 1025268:	dc813c17 	ldw	r18,1264(sp)
 102526c:	d8c13115 	stw	r3,1220(sp)
 1025270:	003d2b06 	br	1024720 <_gp+0xfffe643c>
 1025274:	b009883a 	mov	r4,r22
 1025278:	b80b883a 	mov	r5,r23
 102527c:	d9811e04 	addi	r6,sp,1144
 1025280:	102c68c0 	call	102c68c <__sprint_r>
 1025284:	103cae1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025288:	d8c12017 	ldw	r3,1152(sp)
 102528c:	da000404 	addi	r8,sp,16
 1025290:	003dae06 	br	102494c <_gp+0xfffe6668>
 1025294:	b009883a 	mov	r4,r22
 1025298:	b80b883a 	mov	r5,r23
 102529c:	d9811e04 	addi	r6,sp,1144
 10252a0:	102c68c0 	call	102c68c <__sprint_r>
 10252a4:	103ca61e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10252a8:	d8c12017 	ldw	r3,1152(sp)
 10252ac:	da000404 	addi	r8,sp,16
 10252b0:	003d6c06 	br	1024864 <_gp+0xfffe6580>
 10252b4:	b009883a 	mov	r4,r22
 10252b8:	b80b883a 	mov	r5,r23
 10252bc:	d9811e04 	addi	r6,sp,1144
 10252c0:	102c68c0 	call	102c68c <__sprint_r>
 10252c4:	103c9e1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10252c8:	d8c12017 	ldw	r3,1152(sp)
 10252cc:	da000404 	addi	r8,sp,16
 10252d0:	003d7206 	br	102489c <_gp+0xfffe65b8>
 10252d4:	d9413b17 	ldw	r5,1260(sp)
 10252d8:	d8c10e04 	addi	r3,sp,1080
 10252dc:	988003cc 	andi	r2,r19,15
 10252e0:	e008973a 	slli	r4,fp,28
 10252e4:	2885883a 	add	r2,r5,r2
 10252e8:	9826d13a 	srli	r19,r19,4
 10252ec:	10800003 	ldbu	r2,0(r2)
 10252f0:	e038d13a 	srli	fp,fp,4
 10252f4:	18ffffc4 	addi	r3,r3,-1
 10252f8:	24e6b03a 	or	r19,r4,r19
 10252fc:	18800005 	stb	r2,0(r3)
 1025300:	9f04b03a 	or	r2,r19,fp
 1025304:	103ff51e 	bne	r2,zero,10252dc <_gp+0xfffe6ff8>
 1025308:	db012817 	ldw	r12,1184(sp)
 102530c:	d8c13115 	stw	r3,1220(sp)
 1025310:	60e5c83a 	sub	r18,r12,r3
 1025314:	003d0206 	br	1024720 <_gp+0xfffe643c>
 1025318:	dc012617 	ldw	r16,1176(sp)
 102531c:	0401b10e 	bge	zero,r16,10259e4 <___vfprintf_internal_r+0x1900>
 1025320:	db013117 	ldw	r12,1220(sp)
 1025324:	dac13317 	ldw	r11,1228(sp)
 1025328:	62e1883a 	add	r16,r12,r11
 102532c:	db013417 	ldw	r12,1232(sp)
 1025330:	5825883a 	mov	r18,r11
 1025334:	62c0010e 	bge	r12,r11,102533c <___vfprintf_internal_r+0x1258>
 1025338:	6025883a 	mov	r18,r12
 102533c:	04800b0e 	bge	zero,r18,102536c <___vfprintf_internal_r+0x1288>
 1025340:	d8811f17 	ldw	r2,1148(sp)
 1025344:	dac13117 	ldw	r11,1220(sp)
 1025348:	1c87883a 	add	r3,r3,r18
 102534c:	10800044 	addi	r2,r2,1
 1025350:	42c00015 	stw	r11,0(r8)
 1025354:	44800115 	stw	r18,4(r8)
 1025358:	d8c12015 	stw	r3,1152(sp)
 102535c:	d8811f15 	stw	r2,1148(sp)
 1025360:	010001c4 	movi	r4,7
 1025364:	20824f16 	blt	r4,r2,1025ca4 <___vfprintf_internal_r+0x1bc0>
 1025368:	42000204 	addi	r8,r8,8
 102536c:	90024b16 	blt	r18,zero,1025c9c <___vfprintf_internal_r+0x1bb8>
 1025370:	db013417 	ldw	r12,1232(sp)
 1025374:	64a5c83a 	sub	r18,r12,r18
 1025378:	0480730e 	bge	zero,r18,1025548 <___vfprintf_internal_r+0x1464>
 102537c:	05400404 	movi	r21,16
 1025380:	d8811f17 	ldw	r2,1148(sp)
 1025384:	ac817d0e 	bge	r21,r18,102597c <___vfprintf_internal_r+0x1898>
 1025388:	014040f4 	movhi	r5,259
 102538c:	29515984 	addi	r5,r5,17766
 1025390:	d9412c15 	stw	r5,1200(sp)
 1025394:	070001c4 	movi	fp,7
 1025398:	00000306 	br	10253a8 <___vfprintf_internal_r+0x12c4>
 102539c:	42000204 	addi	r8,r8,8
 10253a0:	94bffc04 	addi	r18,r18,-16
 10253a4:	ac81780e 	bge	r21,r18,1025988 <___vfprintf_internal_r+0x18a4>
 10253a8:	18c00404 	addi	r3,r3,16
 10253ac:	10800044 	addi	r2,r2,1
 10253b0:	45000015 	stw	r20,0(r8)
 10253b4:	45400115 	stw	r21,4(r8)
 10253b8:	d8c12015 	stw	r3,1152(sp)
 10253bc:	d8811f15 	stw	r2,1148(sp)
 10253c0:	e0bff60e 	bge	fp,r2,102539c <_gp+0xfffe70b8>
 10253c4:	b009883a 	mov	r4,r22
 10253c8:	b80b883a 	mov	r5,r23
 10253cc:	d9811e04 	addi	r6,sp,1144
 10253d0:	102c68c0 	call	102c68c <__sprint_r>
 10253d4:	103c5a1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10253d8:	d8c12017 	ldw	r3,1152(sp)
 10253dc:	d8811f17 	ldw	r2,1148(sp)
 10253e0:	da000404 	addi	r8,sp,16
 10253e4:	003fee06 	br	10253a0 <_gp+0xfffe70bc>
 10253e8:	dac10e04 	addi	r11,sp,1080
 10253ec:	0025883a 	mov	r18,zero
 10253f0:	dac13115 	stw	r11,1220(sp)
 10253f4:	003cca06 	br	1024720 <_gp+0xfffe643c>
 10253f8:	b009883a 	mov	r4,r22
 10253fc:	b80b883a 	mov	r5,r23
 1025400:	d9811e04 	addi	r6,sp,1144
 1025404:	102c68c0 	call	102c68c <__sprint_r>
 1025408:	103c4d1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 102540c:	d8c12017 	ldw	r3,1152(sp)
 1025410:	d8812787 	ldb	r2,1182(sp)
 1025414:	da000404 	addi	r8,sp,16
 1025418:	003d0506 	br	1024830 <_gp+0xfffe654c>
 102541c:	dac12d17 	ldw	r11,1204(sp)
 1025420:	14c00017 	ldw	r19,0(r2)
 1025424:	0039883a 	mov	fp,zero
 1025428:	5ac00104 	addi	r11,r11,4
 102542c:	dac12d15 	stw	r11,1204(sp)
 1025430:	0005883a 	mov	r2,zero
 1025434:	9807883a 	mov	r3,r19
 1025438:	003c9c06 	br	10246ac <_gp+0xfffe63c8>
 102543c:	657fffc4 	addi	r21,r12,-1
 1025440:	057f5c0e 	bge	zero,r21,10251b4 <_gp+0xfffe6ed0>
 1025444:	07000404 	movi	fp,16
 1025448:	e5408f0e 	bge	fp,r21,1025688 <___vfprintf_internal_r+0x15a4>
 102544c:	010040f4 	movhi	r4,259
 1025450:	21115984 	addi	r4,r4,17766
 1025454:	d9012c15 	stw	r4,1200(sp)
 1025458:	01c001c4 	movi	r7,7
 102545c:	00000306 	br	102546c <___vfprintf_internal_r+0x1388>
 1025460:	94800204 	addi	r18,r18,8
 1025464:	ad7ffc04 	addi	r21,r21,-16
 1025468:	e5408a0e 	bge	fp,r21,1025694 <___vfprintf_internal_r+0x15b0>
 102546c:	18c00404 	addi	r3,r3,16
 1025470:	84000044 	addi	r16,r16,1
 1025474:	95000015 	stw	r20,0(r18)
 1025478:	97000115 	stw	fp,4(r18)
 102547c:	d8c12015 	stw	r3,1152(sp)
 1025480:	dc011f15 	stw	r16,1148(sp)
 1025484:	3c3ff60e 	bge	r7,r16,1025460 <_gp+0xfffe717c>
 1025488:	b009883a 	mov	r4,r22
 102548c:	b80b883a 	mov	r5,r23
 1025490:	d9811e04 	addi	r6,sp,1144
 1025494:	d9c13d15 	stw	r7,1268(sp)
 1025498:	102c68c0 	call	102c68c <__sprint_r>
 102549c:	d9c13d17 	ldw	r7,1268(sp)
 10254a0:	103c271e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10254a4:	d8c12017 	ldw	r3,1152(sp)
 10254a8:	dc011f17 	ldw	r16,1148(sp)
 10254ac:	dc800404 	addi	r18,sp,16
 10254b0:	003fec06 	br	1025464 <_gp+0xfffe7180>
 10254b4:	1cc00017 	ldw	r19,0(r3)
 10254b8:	dac12d17 	ldw	r11,1204(sp)
 10254bc:	9839d7fa 	srai	fp,r19,31
 10254c0:	5ac00104 	addi	r11,r11,4
 10254c4:	dac12d15 	stw	r11,1204(sp)
 10254c8:	e005883a 	mov	r2,fp
 10254cc:	003d9006 	br	1024b10 <_gp+0xfffe682c>
 10254d0:	00800084 	movi	r2,2
 10254d4:	9f06b03a 	or	r3,r19,fp
 10254d8:	003c7406 	br	10246ac <_gp+0xfffe63c8>
 10254dc:	db012d17 	ldw	r12,1204(sp)
 10254e0:	14c00017 	ldw	r19,0(r2)
 10254e4:	0039883a 	mov	fp,zero
 10254e8:	63000104 	addi	r12,r12,4
 10254ec:	db012d15 	stw	r12,1204(sp)
 10254f0:	00800044 	movi	r2,1
 10254f4:	9807883a 	mov	r3,r19
 10254f8:	003c6c06 	br	10246ac <_gp+0xfffe63c8>
 10254fc:	10803fcc 	andi	r2,r2,255
 1025500:	1080201c 	xori	r2,r2,128
 1025504:	10bfe004 	addi	r2,r2,-128
 1025508:	01000c04 	movi	r4,48
 102550c:	1101a526 	beq	r2,r4,1025ba4 <___vfprintf_internal_r+0x1ac0>
 1025510:	dac13117 	ldw	r11,1220(sp)
 1025514:	db012817 	ldw	r12,1184(sp)
 1025518:	193fffc5 	stb	r4,-1(r3)
 102551c:	5affffc4 	addi	r11,r11,-1
 1025520:	dac13115 	stw	r11,1220(sp)
 1025524:	62e5c83a 	sub	r18,r12,r11
 1025528:	003c7d06 	br	1024720 <_gp+0xfffe643c>
 102552c:	b009883a 	mov	r4,r22
 1025530:	b80b883a 	mov	r5,r23
 1025534:	d9811e04 	addi	r6,sp,1144
 1025538:	102c68c0 	call	102c68c <__sprint_r>
 102553c:	103c001e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025540:	d8c12017 	ldw	r3,1152(sp)
 1025544:	da000404 	addi	r8,sp,16
 1025548:	db013117 	ldw	r12,1220(sp)
 102554c:	dac13417 	ldw	r11,1232(sp)
 1025550:	d8812617 	ldw	r2,1176(sp)
 1025554:	62e5883a 	add	r18,r12,r11
 1025558:	db013317 	ldw	r12,1228(sp)
 102555c:	13000216 	blt	r2,r12,1025568 <___vfprintf_internal_r+0x1484>
 1025560:	8900004c 	andi	r4,r17,1
 1025564:	20000c26 	beq	r4,zero,1025598 <___vfprintf_internal_r+0x14b4>
 1025568:	dac13817 	ldw	r11,1248(sp)
 102556c:	d9011f17 	ldw	r4,1148(sp)
 1025570:	db013517 	ldw	r12,1236(sp)
 1025574:	1ac7883a 	add	r3,r3,r11
 1025578:	21000044 	addi	r4,r4,1
 102557c:	43000015 	stw	r12,0(r8)
 1025580:	42c00115 	stw	r11,4(r8)
 1025584:	d8c12015 	stw	r3,1152(sp)
 1025588:	d9011f15 	stw	r4,1148(sp)
 102558c:	014001c4 	movi	r5,7
 1025590:	2901cc16 	blt	r5,r4,1025cc4 <___vfprintf_internal_r+0x1be0>
 1025594:	42000204 	addi	r8,r8,8
 1025598:	dac13317 	ldw	r11,1228(sp)
 102559c:	8489c83a 	sub	r4,r16,r18
 10255a0:	5885c83a 	sub	r2,r11,r2
 10255a4:	1021883a 	mov	r16,r2
 10255a8:	2080010e 	bge	r4,r2,10255b0 <___vfprintf_internal_r+0x14cc>
 10255ac:	2021883a 	mov	r16,r4
 10255b0:	04000a0e 	bge	zero,r16,10255dc <___vfprintf_internal_r+0x14f8>
 10255b4:	d9011f17 	ldw	r4,1148(sp)
 10255b8:	1c07883a 	add	r3,r3,r16
 10255bc:	44800015 	stw	r18,0(r8)
 10255c0:	21000044 	addi	r4,r4,1
 10255c4:	44000115 	stw	r16,4(r8)
 10255c8:	d8c12015 	stw	r3,1152(sp)
 10255cc:	d9011f15 	stw	r4,1148(sp)
 10255d0:	014001c4 	movi	r5,7
 10255d4:	2901d616 	blt	r5,r4,1025d30 <___vfprintf_internal_r+0x1c4c>
 10255d8:	42000204 	addi	r8,r8,8
 10255dc:	8001df16 	blt	r16,zero,1025d5c <___vfprintf_internal_r+0x1c78>
 10255e0:	1421c83a 	sub	r16,r2,r16
 10255e4:	043ce60e 	bge	zero,r16,1024980 <_gp+0xfffe669c>
 10255e8:	04800404 	movi	r18,16
 10255ec:	d8811f17 	ldw	r2,1148(sp)
 10255f0:	943efc0e 	bge	r18,r16,10251e4 <_gp+0xfffe6f00>
 10255f4:	014040f4 	movhi	r5,259
 10255f8:	29515984 	addi	r5,r5,17766
 10255fc:	d9412c15 	stw	r5,1200(sp)
 1025600:	054001c4 	movi	r21,7
 1025604:	00000306 	br	1025614 <___vfprintf_internal_r+0x1530>
 1025608:	42000204 	addi	r8,r8,8
 102560c:	843ffc04 	addi	r16,r16,-16
 1025610:	943ef70e 	bge	r18,r16,10251f0 <_gp+0xfffe6f0c>
 1025614:	18c00404 	addi	r3,r3,16
 1025618:	10800044 	addi	r2,r2,1
 102561c:	45000015 	stw	r20,0(r8)
 1025620:	44800115 	stw	r18,4(r8)
 1025624:	d8c12015 	stw	r3,1152(sp)
 1025628:	d8811f15 	stw	r2,1148(sp)
 102562c:	a8bff60e 	bge	r21,r2,1025608 <_gp+0xfffe7324>
 1025630:	b009883a 	mov	r4,r22
 1025634:	b80b883a 	mov	r5,r23
 1025638:	d9811e04 	addi	r6,sp,1144
 102563c:	102c68c0 	call	102c68c <__sprint_r>
 1025640:	103bbf1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025644:	d8c12017 	ldw	r3,1152(sp)
 1025648:	d8811f17 	ldw	r2,1148(sp)
 102564c:	da000404 	addi	r8,sp,16
 1025650:	003fee06 	br	102560c <_gp+0xfffe7328>
 1025654:	8888703a 	and	r4,r17,r2
 1025658:	203eab1e 	bne	r4,zero,1025108 <_gp+0xfffe6e24>
 102565c:	dc011f17 	ldw	r16,1148(sp)
 1025660:	db013117 	ldw	r12,1220(sp)
 1025664:	40800115 	stw	r2,4(r8)
 1025668:	84000044 	addi	r16,r16,1
 102566c:	43000015 	stw	r12,0(r8)
 1025670:	d8c12015 	stw	r3,1152(sp)
 1025674:	dc011f15 	stw	r16,1148(sp)
 1025678:	008001c4 	movi	r2,7
 102567c:	14000e16 	blt	r2,r16,10256b8 <___vfprintf_internal_r+0x15d4>
 1025680:	44800204 	addi	r18,r8,8
 1025684:	003ecb06 	br	10251b4 <_gp+0xfffe6ed0>
 1025688:	008040f4 	movhi	r2,259
 102568c:	10915984 	addi	r2,r2,17766
 1025690:	d8812c15 	stw	r2,1200(sp)
 1025694:	dac12c17 	ldw	r11,1200(sp)
 1025698:	1d47883a 	add	r3,r3,r21
 102569c:	84000044 	addi	r16,r16,1
 10256a0:	92c00015 	stw	r11,0(r18)
 10256a4:	95400115 	stw	r21,4(r18)
 10256a8:	d8c12015 	stw	r3,1152(sp)
 10256ac:	dc011f15 	stw	r16,1148(sp)
 10256b0:	008001c4 	movi	r2,7
 10256b4:	143ebe0e 	bge	r2,r16,10251b0 <_gp+0xfffe6ecc>
 10256b8:	b009883a 	mov	r4,r22
 10256bc:	b80b883a 	mov	r5,r23
 10256c0:	d9811e04 	addi	r6,sp,1144
 10256c4:	102c68c0 	call	102c68c <__sprint_r>
 10256c8:	103b9d1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10256cc:	d8c12017 	ldw	r3,1152(sp)
 10256d0:	dc011f17 	ldw	r16,1148(sp)
 10256d4:	dc800404 	addi	r18,sp,16
 10256d8:	003eb606 	br	10251b4 <_gp+0xfffe6ed0>
 10256dc:	b009883a 	mov	r4,r22
 10256e0:	b80b883a 	mov	r5,r23
 10256e4:	d9811e04 	addi	r6,sp,1144
 10256e8:	102c68c0 	call	102c68c <__sprint_r>
 10256ec:	103b941e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10256f0:	d8c12017 	ldw	r3,1152(sp)
 10256f4:	dc011f17 	ldw	r16,1148(sp)
 10256f8:	da000404 	addi	r8,sp,16
 10256fc:	003e8d06 	br	1025134 <_gp+0xfffe6e50>
 1025700:	b009883a 	mov	r4,r22
 1025704:	b80b883a 	mov	r5,r23
 1025708:	d9811e04 	addi	r6,sp,1144
 102570c:	102c68c0 	call	102c68c <__sprint_r>
 1025710:	103b8b1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025714:	d8c12017 	ldw	r3,1152(sp)
 1025718:	dc011f17 	ldw	r16,1148(sp)
 102571c:	dc800404 	addi	r18,sp,16
 1025720:	003e8f06 	br	1025160 <_gp+0xfffe6e7c>
 1025724:	db010e04 	addi	r12,sp,1080
 1025728:	0025883a 	mov	r18,zero
 102572c:	db013115 	stw	r12,1220(sp)
 1025730:	003bfb06 	br	1024720 <_gp+0xfffe643c>
 1025734:	b009883a 	mov	r4,r22
 1025738:	b80b883a 	mov	r5,r23
 102573c:	d9811e04 	addi	r6,sp,1144
 1025740:	102c68c0 	call	102c68c <__sprint_r>
 1025744:	103b7e1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025748:	d8c12017 	ldw	r3,1152(sp)
 102574c:	da000404 	addi	r8,sp,16
 1025750:	003c5506 	br	10248a8 <_gp+0xfffe65c4>
 1025754:	04e7c83a 	sub	r19,zero,r19
 1025758:	9804c03a 	cmpne	r2,r19,zero
 102575c:	0739c83a 	sub	fp,zero,fp
 1025760:	e0b9c83a 	sub	fp,fp,r2
 1025764:	05400b44 	movi	r21,45
 1025768:	dd412785 	stb	r21,1182(sp)
 102576c:	da413215 	stw	r9,1224(sp)
 1025770:	00800044 	movi	r2,1
 1025774:	9f06b03a 	or	r3,r19,fp
 1025778:	003bcf06 	br	10246b8 <_gp+0xfffe63d4>
 102577c:	da013f15 	stw	r8,1276(sp)
 1025780:	da413e15 	stw	r9,1272(sp)
 1025784:	102b0b80 	call	102b0b8 <__fpclassifyd>
 1025788:	da013f17 	ldw	r8,1276(sp)
 102578c:	da413e17 	ldw	r9,1272(sp)
 1025790:	1000ce26 	beq	r2,zero,1025acc <___vfprintf_internal_r+0x19e8>
 1025794:	057ff7c4 	movi	r21,-33
 1025798:	00bfffc4 	movi	r2,-1
 102579c:	856a703a 	and	r21,r16,r21
 10257a0:	4881f026 	beq	r9,r2,1025f64 <___vfprintf_internal_r+0x1e80>
 10257a4:	008011c4 	movi	r2,71
 10257a8:	a881e526 	beq	r21,r2,1025f40 <___vfprintf_internal_r+0x1e5c>
 10257ac:	db013917 	ldw	r12,1252(sp)
 10257b0:	8ac04014 	ori	r11,r17,256
 10257b4:	dac12d15 	stw	r11,1204(sp)
 10257b8:	6001e416 	blt	r12,zero,1025f4c <___vfprintf_internal_r+0x1e68>
 10257bc:	dc813917 	ldw	r18,1252(sp)
 10257c0:	d8012b05 	stb	zero,1196(sp)
 10257c4:	00801984 	movi	r2,102
 10257c8:	80811826 	beq	r16,r2,1025c2c <___vfprintf_internal_r+0x1b48>
 10257cc:	00801184 	movi	r2,70
 10257d0:	80811626 	beq	r16,r2,1025c2c <___vfprintf_internal_r+0x1b48>
 10257d4:	00801144 	movi	r2,69
 10257d8:	a881e026 	beq	r21,r2,1025f5c <___vfprintf_internal_r+0x1e78>
 10257dc:	4839883a 	mov	fp,r9
 10257e0:	d8812604 	addi	r2,sp,1176
 10257e4:	d8800115 	stw	r2,4(sp)
 10257e8:	d9413717 	ldw	r5,1244(sp)
 10257ec:	d8812504 	addi	r2,sp,1172
 10257f0:	d8800215 	stw	r2,8(sp)
 10257f4:	d8812104 	addi	r2,sp,1156
 10257f8:	df000015 	stw	fp,0(sp)
 10257fc:	d8800315 	stw	r2,12(sp)
 1025800:	b009883a 	mov	r4,r22
 1025804:	900d883a 	mov	r6,r18
 1025808:	01c00084 	movi	r7,2
 102580c:	da013f15 	stw	r8,1276(sp)
 1025810:	da413e15 	stw	r9,1272(sp)
 1025814:	10265640 	call	1026564 <_dtoa_r>
 1025818:	d8813115 	stw	r2,1220(sp)
 102581c:	008019c4 	movi	r2,103
 1025820:	da013f17 	ldw	r8,1276(sp)
 1025824:	da413e17 	ldw	r9,1272(sp)
 1025828:	80800226 	beq	r16,r2,1025834 <___vfprintf_internal_r+0x1750>
 102582c:	008011c4 	movi	r2,71
 1025830:	8081101e 	bne	r16,r2,1025c74 <___vfprintf_internal_r+0x1b90>
 1025834:	8880004c 	andi	r2,r17,1
 1025838:	1001df26 	beq	r2,zero,1025fb8 <___vfprintf_internal_r+0x1ed4>
 102583c:	db013117 	ldw	r12,1220(sp)
 1025840:	6715883a 	add	r10,r12,fp
 1025844:	d9013717 	ldw	r4,1244(sp)
 1025848:	900b883a 	mov	r5,r18
 102584c:	000d883a 	mov	r6,zero
 1025850:	000f883a 	mov	r7,zero
 1025854:	da013f15 	stw	r8,1276(sp)
 1025858:	da413e15 	stw	r9,1272(sp)
 102585c:	da813d15 	stw	r10,1268(sp)
 1025860:	10300140 	call	1030014 <__eqdf2>
 1025864:	da013f17 	ldw	r8,1276(sp)
 1025868:	da413e17 	ldw	r9,1272(sp)
 102586c:	da813d17 	ldw	r10,1268(sp)
 1025870:	10016526 	beq	r2,zero,1025e08 <___vfprintf_internal_r+0x1d24>
 1025874:	d8812117 	ldw	r2,1156(sp)
 1025878:	1280062e 	bgeu	r2,r10,1025894 <___vfprintf_internal_r+0x17b0>
 102587c:	01000c04 	movi	r4,48
 1025880:	10c00044 	addi	r3,r2,1
 1025884:	d8c12115 	stw	r3,1156(sp)
 1025888:	11000005 	stb	r4,0(r2)
 102588c:	d8812117 	ldw	r2,1156(sp)
 1025890:	12bffb36 	bltu	r2,r10,1025880 <_gp+0xfffe759c>
 1025894:	db013117 	ldw	r12,1220(sp)
 1025898:	1305c83a 	sub	r2,r2,r12
 102589c:	d8813315 	stw	r2,1228(sp)
 10258a0:	008011c4 	movi	r2,71
 10258a4:	a8814a26 	beq	r21,r2,1025dd0 <___vfprintf_internal_r+0x1cec>
 10258a8:	00801944 	movi	r2,101
 10258ac:	14020a0e 	bge	r2,r16,10260d8 <___vfprintf_internal_r+0x1ff4>
 10258b0:	00801984 	movi	r2,102
 10258b4:	8081b626 	beq	r16,r2,1025f90 <___vfprintf_internal_r+0x1eac>
 10258b8:	db012617 	ldw	r12,1176(sp)
 10258bc:	db013415 	stw	r12,1232(sp)
 10258c0:	db013417 	ldw	r12,1232(sp)
 10258c4:	dac13317 	ldw	r11,1228(sp)
 10258c8:	62c1a816 	blt	r12,r11,1025f6c <___vfprintf_internal_r+0x1e88>
 10258cc:	8c40004c 	andi	r17,r17,1
 10258d0:	8801ca1e 	bne	r17,zero,1025ffc <___vfprintf_internal_r+0x1f18>
 10258d4:	6005883a 	mov	r2,r12
 10258d8:	6001b516 	blt	r12,zero,1025fb0 <___vfprintf_internal_r+0x1ecc>
 10258dc:	dc813417 	ldw	r18,1232(sp)
 10258e0:	df012b07 	ldb	fp,1196(sp)
 10258e4:	e001321e 	bne	fp,zero,1025db0 <___vfprintf_internal_r+0x1ccc>
 10258e8:	dc412d17 	ldw	r17,1204(sp)
 10258ec:	dd412783 	ldbu	r21,1182(sp)
 10258f0:	d8812b15 	stw	r2,1196(sp)
 10258f4:	dcc12d15 	stw	r19,1204(sp)
 10258f8:	d8013215 	stw	zero,1224(sp)
 10258fc:	003b8d06 	br	1024734 <_gp+0xfffe6450>
 1025900:	88c0100c 	andi	r3,r17,64
 1025904:	18008226 	beq	r3,zero,1025b10 <___vfprintf_internal_r+0x1a2c>
 1025908:	dac12d17 	ldw	r11,1204(sp)
 102590c:	14c0000b 	ldhu	r19,0(r2)
 1025910:	0039883a 	mov	fp,zero
 1025914:	5ac00104 	addi	r11,r11,4
 1025918:	dac12d15 	stw	r11,1204(sp)
 102591c:	003c8f06 	br	1024b5c <_gp+0xfffe6878>
 1025920:	1c000007 	ldb	r16,0(r3)
 1025924:	1805883a 	mov	r2,r3
 1025928:	003a5506 	br	1024280 <_gp+0xfffe5f9c>
 102592c:	00800084 	movi	r2,2
 1025930:	003b5e06 	br	10246ac <_gp+0xfffe63c8>
 1025934:	8880040c 	andi	r2,r17,16
 1025938:	1000091e 	bne	r2,zero,1025960 <___vfprintf_internal_r+0x187c>
 102593c:	8c40100c 	andi	r17,r17,64
 1025940:	88000726 	beq	r17,zero,1025960 <___vfprintf_internal_r+0x187c>
 1025944:	db012d17 	ldw	r12,1204(sp)
 1025948:	dac12f17 	ldw	r11,1212(sp)
 102594c:	60800017 	ldw	r2,0(r12)
 1025950:	63000104 	addi	r12,r12,4
 1025954:	db012d15 	stw	r12,1204(sp)
 1025958:	12c0000d 	sth	r11,0(r2)
 102595c:	003a1e06 	br	10241d8 <_gp+0xfffe5ef4>
 1025960:	db012d17 	ldw	r12,1204(sp)
 1025964:	dac12f17 	ldw	r11,1212(sp)
 1025968:	60800017 	ldw	r2,0(r12)
 102596c:	63000104 	addi	r12,r12,4
 1025970:	db012d15 	stw	r12,1204(sp)
 1025974:	12c00015 	stw	r11,0(r2)
 1025978:	003a1706 	br	10241d8 <_gp+0xfffe5ef4>
 102597c:	010040f4 	movhi	r4,259
 1025980:	21115984 	addi	r4,r4,17766
 1025984:	d9012c15 	stw	r4,1200(sp)
 1025988:	dac12c17 	ldw	r11,1200(sp)
 102598c:	1c87883a 	add	r3,r3,r18
 1025990:	10800044 	addi	r2,r2,1
 1025994:	42c00015 	stw	r11,0(r8)
 1025998:	44800115 	stw	r18,4(r8)
 102599c:	d8c12015 	stw	r3,1152(sp)
 10259a0:	d8811f15 	stw	r2,1148(sp)
 10259a4:	010001c4 	movi	r4,7
 10259a8:	20bee016 	blt	r4,r2,102552c <_gp+0xfffe7248>
 10259ac:	42000204 	addi	r8,r8,8
 10259b0:	003ee506 	br	1025548 <_gp+0xfffe7264>
 10259b4:	010040f4 	movhi	r4,259
 10259b8:	21115984 	addi	r4,r4,17766
 10259bc:	d9012c15 	stw	r4,1200(sp)
 10259c0:	003bd806 	br	1024924 <_gp+0xfffe6640>
 10259c4:	b009883a 	mov	r4,r22
 10259c8:	b80b883a 	mov	r5,r23
 10259cc:	d9811e04 	addi	r6,sp,1144
 10259d0:	102c68c0 	call	102c68c <__sprint_r>
 10259d4:	103ada1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 10259d8:	d8c12017 	ldw	r3,1152(sp)
 10259dc:	da000404 	addi	r8,sp,16
 10259e0:	003d6b06 	br	1024f90 <_gp+0xfffe6cac>
 10259e4:	d8811f17 	ldw	r2,1148(sp)
 10259e8:	030040f4 	movhi	r12,259
 10259ec:	01000044 	movi	r4,1
 10259f0:	18c00044 	addi	r3,r3,1
 10259f4:	10800044 	addi	r2,r2,1
 10259f8:	63115104 	addi	r12,r12,17732
 10259fc:	41000115 	stw	r4,4(r8)
 1025a00:	43000015 	stw	r12,0(r8)
 1025a04:	d8c12015 	stw	r3,1152(sp)
 1025a08:	d8811f15 	stw	r2,1148(sp)
 1025a0c:	010001c4 	movi	r4,7
 1025a10:	20804916 	blt	r4,r2,1025b38 <___vfprintf_internal_r+0x1a54>
 1025a14:	42000204 	addi	r8,r8,8
 1025a18:	8000041e 	bne	r16,zero,1025a2c <___vfprintf_internal_r+0x1948>
 1025a1c:	dac13317 	ldw	r11,1228(sp)
 1025a20:	5800021e 	bne	r11,zero,1025a2c <___vfprintf_internal_r+0x1948>
 1025a24:	8880004c 	andi	r2,r17,1
 1025a28:	103bd526 	beq	r2,zero,1024980 <_gp+0xfffe669c>
 1025a2c:	db013817 	ldw	r12,1248(sp)
 1025a30:	d8811f17 	ldw	r2,1148(sp)
 1025a34:	dac13517 	ldw	r11,1236(sp)
 1025a38:	1b07883a 	add	r3,r3,r12
 1025a3c:	10800044 	addi	r2,r2,1
 1025a40:	42c00015 	stw	r11,0(r8)
 1025a44:	43000115 	stw	r12,4(r8)
 1025a48:	d8c12015 	stw	r3,1152(sp)
 1025a4c:	d8811f15 	stw	r2,1148(sp)
 1025a50:	010001c4 	movi	r4,7
 1025a54:	20813016 	blt	r4,r2,1025f18 <___vfprintf_internal_r+0x1e34>
 1025a58:	42000204 	addi	r8,r8,8
 1025a5c:	0421c83a 	sub	r16,zero,r16
 1025a60:	0400630e 	bge	zero,r16,1025bf0 <___vfprintf_internal_r+0x1b0c>
 1025a64:	04800404 	movi	r18,16
 1025a68:	94009f0e 	bge	r18,r16,1025ce8 <___vfprintf_internal_r+0x1c04>
 1025a6c:	010040f4 	movhi	r4,259
 1025a70:	21115984 	addi	r4,r4,17766
 1025a74:	d9012c15 	stw	r4,1200(sp)
 1025a78:	054001c4 	movi	r21,7
 1025a7c:	00000306 	br	1025a8c <___vfprintf_internal_r+0x19a8>
 1025a80:	42000204 	addi	r8,r8,8
 1025a84:	843ffc04 	addi	r16,r16,-16
 1025a88:	94009a0e 	bge	r18,r16,1025cf4 <___vfprintf_internal_r+0x1c10>
 1025a8c:	18c00404 	addi	r3,r3,16
 1025a90:	10800044 	addi	r2,r2,1
 1025a94:	45000015 	stw	r20,0(r8)
 1025a98:	44800115 	stw	r18,4(r8)
 1025a9c:	d8c12015 	stw	r3,1152(sp)
 1025aa0:	d8811f15 	stw	r2,1148(sp)
 1025aa4:	a8bff60e 	bge	r21,r2,1025a80 <_gp+0xfffe779c>
 1025aa8:	b009883a 	mov	r4,r22
 1025aac:	b80b883a 	mov	r5,r23
 1025ab0:	d9811e04 	addi	r6,sp,1144
 1025ab4:	102c68c0 	call	102c68c <__sprint_r>
 1025ab8:	103aa11e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025abc:	d8c12017 	ldw	r3,1152(sp)
 1025ac0:	d8811f17 	ldw	r2,1148(sp)
 1025ac4:	da000404 	addi	r8,sp,16
 1025ac8:	003fee06 	br	1025a84 <_gp+0xfffe77a0>
 1025acc:	008011c4 	movi	r2,71
 1025ad0:	1400b316 	blt	r2,r16,1025da0 <___vfprintf_internal_r+0x1cbc>
 1025ad4:	030040f4 	movhi	r12,259
 1025ad8:	63114304 	addi	r12,r12,17676
 1025adc:	db013115 	stw	r12,1220(sp)
 1025ae0:	00c000c4 	movi	r3,3
 1025ae4:	00bfdfc4 	movi	r2,-129
 1025ae8:	d8c12b15 	stw	r3,1196(sp)
 1025aec:	88a2703a 	and	r17,r17,r2
 1025af0:	dd412783 	ldbu	r21,1182(sp)
 1025af4:	dcc12d15 	stw	r19,1204(sp)
 1025af8:	1825883a 	mov	r18,r3
 1025afc:	d8013215 	stw	zero,1224(sp)
 1025b00:	d8013415 	stw	zero,1232(sp)
 1025b04:	003b0b06 	br	1024734 <_gp+0xfffe6450>
 1025b08:	4825883a 	mov	r18,r9
 1025b0c:	003cba06 	br	1024df8 <_gp+0xfffe6b14>
 1025b10:	db012d17 	ldw	r12,1204(sp)
 1025b14:	14c00017 	ldw	r19,0(r2)
 1025b18:	0039883a 	mov	fp,zero
 1025b1c:	63000104 	addi	r12,r12,4
 1025b20:	db012d15 	stw	r12,1204(sp)
 1025b24:	003c0d06 	br	1024b5c <_gp+0xfffe6878>
 1025b28:	008040f4 	movhi	r2,259
 1025b2c:	10914104 	addi	r2,r2,17668
 1025b30:	d8813115 	stw	r2,1220(sp)
 1025b34:	003ac406 	br	1024648 <_gp+0xfffe6364>
 1025b38:	b009883a 	mov	r4,r22
 1025b3c:	b80b883a 	mov	r5,r23
 1025b40:	d9811e04 	addi	r6,sp,1144
 1025b44:	102c68c0 	call	102c68c <__sprint_r>
 1025b48:	103a7d1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025b4c:	dc012617 	ldw	r16,1176(sp)
 1025b50:	d8c12017 	ldw	r3,1152(sp)
 1025b54:	da000404 	addi	r8,sp,16
 1025b58:	003faf06 	br	1025a18 <_gp+0xfffe7734>
 1025b5c:	db012e17 	ldw	r12,1208(sp)
 1025b60:	1805883a 	mov	r2,r3
 1025b64:	dac12d15 	stw	r11,1204(sp)
 1025b68:	0319c83a 	sub	r12,zero,r12
 1025b6c:	db012e15 	stw	r12,1208(sp)
 1025b70:	003a7e06 	br	102456c <_gp+0xfffe6288>
 1025b74:	18800044 	addi	r2,r3,1
 1025b78:	8c400814 	ori	r17,r17,32
 1025b7c:	1c000047 	ldb	r16,1(r3)
 1025b80:	0039bf06 	br	1024280 <_gp+0xfffe5f9c>
 1025b84:	b009883a 	mov	r4,r22
 1025b88:	b80b883a 	mov	r5,r23
 1025b8c:	d9811e04 	addi	r6,sp,1144
 1025b90:	102c68c0 	call	102c68c <__sprint_r>
 1025b94:	103a6a1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025b98:	d8c12017 	ldw	r3,1152(sp)
 1025b9c:	da000404 	addi	r8,sp,16
 1025ba0:	003d0c06 	br	1024fd4 <_gp+0xfffe6cf0>
 1025ba4:	db012817 	ldw	r12,1184(sp)
 1025ba8:	d8c13117 	ldw	r3,1220(sp)
 1025bac:	60e5c83a 	sub	r18,r12,r3
 1025bb0:	003adb06 	br	1024720 <_gp+0xfffe643c>
 1025bb4:	da013f15 	stw	r8,1276(sp)
 1025bb8:	10220bc0 	call	10220bc <strlen>
 1025bbc:	1025883a 	mov	r18,r2
 1025bc0:	da013f17 	ldw	r8,1276(sp)
 1025bc4:	903c8e0e 	bge	r18,zero,1024e00 <_gp+0xfffe6b1c>
 1025bc8:	0005883a 	mov	r2,zero
 1025bcc:	003c8c06 	br	1024e00 <_gp+0xfffe6b1c>
 1025bd0:	b009883a 	mov	r4,r22
 1025bd4:	b80b883a 	mov	r5,r23
 1025bd8:	d9811e04 	addi	r6,sp,1144
 1025bdc:	102c68c0 	call	102c68c <__sprint_r>
 1025be0:	103a571e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025be4:	d8c12017 	ldw	r3,1152(sp)
 1025be8:	d8811f17 	ldw	r2,1148(sp)
 1025bec:	da000404 	addi	r8,sp,16
 1025bf0:	db013317 	ldw	r12,1228(sp)
 1025bf4:	dac13117 	ldw	r11,1220(sp)
 1025bf8:	10800044 	addi	r2,r2,1
 1025bfc:	60c7883a 	add	r3,r12,r3
 1025c00:	42c00015 	stw	r11,0(r8)
 1025c04:	43000115 	stw	r12,4(r8)
 1025c08:	d8c12015 	stw	r3,1152(sp)
 1025c0c:	d8811f15 	stw	r2,1148(sp)
 1025c10:	010001c4 	movi	r4,7
 1025c14:	20bb590e 	bge	r4,r2,102497c <_gp+0xfffe6698>
 1025c18:	003d7e06 	br	1025214 <_gp+0xfffe6f30>
 1025c1c:	010040f4 	movhi	r4,259
 1025c20:	21115d84 	addi	r4,r4,17782
 1025c24:	d9013615 	stw	r4,1240(sp)
 1025c28:	003af606 	br	1024804 <_gp+0xfffe6520>
 1025c2c:	d8812604 	addi	r2,sp,1176
 1025c30:	d8800115 	stw	r2,4(sp)
 1025c34:	d9413717 	ldw	r5,1244(sp)
 1025c38:	d8812504 	addi	r2,sp,1172
 1025c3c:	d8800215 	stw	r2,8(sp)
 1025c40:	d8812104 	addi	r2,sp,1156
 1025c44:	da400015 	stw	r9,0(sp)
 1025c48:	d8800315 	stw	r2,12(sp)
 1025c4c:	b009883a 	mov	r4,r22
 1025c50:	900d883a 	mov	r6,r18
 1025c54:	01c000c4 	movi	r7,3
 1025c58:	da013f15 	stw	r8,1276(sp)
 1025c5c:	da413e15 	stw	r9,1272(sp)
 1025c60:	10265640 	call	1026564 <_dtoa_r>
 1025c64:	da413e17 	ldw	r9,1272(sp)
 1025c68:	da013f17 	ldw	r8,1276(sp)
 1025c6c:	d8813115 	stw	r2,1220(sp)
 1025c70:	4839883a 	mov	fp,r9
 1025c74:	dac13117 	ldw	r11,1220(sp)
 1025c78:	00801184 	movi	r2,70
 1025c7c:	5f15883a 	add	r10,r11,fp
 1025c80:	a8bef01e 	bne	r21,r2,1025844 <_gp+0xfffe7560>
 1025c84:	59000007 	ldb	r4,0(r11)
 1025c88:	00800c04 	movi	r2,48
 1025c8c:	2080e026 	beq	r4,r2,1026010 <___vfprintf_internal_r+0x1f2c>
 1025c90:	d8c12617 	ldw	r3,1176(sp)
 1025c94:	50d5883a 	add	r10,r10,r3
 1025c98:	003eea06 	br	1025844 <_gp+0xfffe7560>
 1025c9c:	0025883a 	mov	r18,zero
 1025ca0:	003db306 	br	1025370 <_gp+0xfffe708c>
 1025ca4:	b009883a 	mov	r4,r22
 1025ca8:	b80b883a 	mov	r5,r23
 1025cac:	d9811e04 	addi	r6,sp,1144
 1025cb0:	102c68c0 	call	102c68c <__sprint_r>
 1025cb4:	103a221e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025cb8:	d8c12017 	ldw	r3,1152(sp)
 1025cbc:	da000404 	addi	r8,sp,16
 1025cc0:	003daa06 	br	102536c <_gp+0xfffe7088>
 1025cc4:	b009883a 	mov	r4,r22
 1025cc8:	b80b883a 	mov	r5,r23
 1025ccc:	d9811e04 	addi	r6,sp,1144
 1025cd0:	102c68c0 	call	102c68c <__sprint_r>
 1025cd4:	103a1a1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025cd8:	d8812617 	ldw	r2,1176(sp)
 1025cdc:	d8c12017 	ldw	r3,1152(sp)
 1025ce0:	da000404 	addi	r8,sp,16
 1025ce4:	003e2c06 	br	1025598 <_gp+0xfffe72b4>
 1025ce8:	030040f4 	movhi	r12,259
 1025cec:	63115984 	addi	r12,r12,17766
 1025cf0:	db012c15 	stw	r12,1200(sp)
 1025cf4:	dac12c17 	ldw	r11,1200(sp)
 1025cf8:	1c07883a 	add	r3,r3,r16
 1025cfc:	10800044 	addi	r2,r2,1
 1025d00:	42c00015 	stw	r11,0(r8)
 1025d04:	44000115 	stw	r16,4(r8)
 1025d08:	d8c12015 	stw	r3,1152(sp)
 1025d0c:	d8811f15 	stw	r2,1148(sp)
 1025d10:	010001c4 	movi	r4,7
 1025d14:	20bfae16 	blt	r4,r2,1025bd0 <_gp+0xfffe78ec>
 1025d18:	42000204 	addi	r8,r8,8
 1025d1c:	003fb406 	br	1025bf0 <_gp+0xfffe790c>
 1025d20:	030040f4 	movhi	r12,259
 1025d24:	63115d84 	addi	r12,r12,17782
 1025d28:	db013615 	stw	r12,1240(sp)
 1025d2c:	003b3806 	br	1024a10 <_gp+0xfffe672c>
 1025d30:	b009883a 	mov	r4,r22
 1025d34:	b80b883a 	mov	r5,r23
 1025d38:	d9811e04 	addi	r6,sp,1144
 1025d3c:	102c68c0 	call	102c68c <__sprint_r>
 1025d40:	1039ff1e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025d44:	d8812617 	ldw	r2,1176(sp)
 1025d48:	db013317 	ldw	r12,1228(sp)
 1025d4c:	d8c12017 	ldw	r3,1152(sp)
 1025d50:	da000404 	addi	r8,sp,16
 1025d54:	6085c83a 	sub	r2,r12,r2
 1025d58:	003e2006 	br	10255dc <_gp+0xfffe72f8>
 1025d5c:	0021883a 	mov	r16,zero
 1025d60:	003e1f06 	br	10255e0 <_gp+0xfffe72fc>
 1025d64:	00800184 	movi	r2,6
 1025d68:	1240012e 	bgeu	r2,r9,1025d70 <___vfprintf_internal_r+0x1c8c>
 1025d6c:	1013883a 	mov	r9,r2
 1025d70:	4825883a 	mov	r18,r9
 1025d74:	4805883a 	mov	r2,r9
 1025d78:	48009e16 	blt	r9,zero,1025ff4 <___vfprintf_internal_r+0x1f10>
 1025d7c:	d8812b15 	stw	r2,1196(sp)
 1025d80:	008040f4 	movhi	r2,259
 1025d84:	10914f04 	addi	r2,r2,17724
 1025d88:	d8813115 	stw	r2,1220(sp)
 1025d8c:	dcc12d15 	stw	r19,1204(sp)
 1025d90:	d8013215 	stw	zero,1224(sp)
 1025d94:	d8013415 	stw	zero,1232(sp)
 1025d98:	0005883a 	mov	r2,zero
 1025d9c:	003a6c06 	br	1024750 <_gp+0xfffe646c>
 1025da0:	008040f4 	movhi	r2,259
 1025da4:	10914404 	addi	r2,r2,17680
 1025da8:	d8813115 	stw	r2,1220(sp)
 1025dac:	003f4c06 	br	1025ae0 <_gp+0xfffe77fc>
 1025db0:	00c00b44 	movi	r3,45
 1025db4:	d8812b15 	stw	r2,1196(sp)
 1025db8:	dc412d17 	ldw	r17,1204(sp)
 1025dbc:	d8c12785 	stb	r3,1182(sp)
 1025dc0:	dcc12d15 	stw	r19,1204(sp)
 1025dc4:	d8013215 	stw	zero,1224(sp)
 1025dc8:	00800b44 	movi	r2,45
 1025dcc:	003a5d06 	br	1024744 <_gp+0xfffe6460>
 1025dd0:	d8c12617 	ldw	r3,1176(sp)
 1025dd4:	00bfff44 	movi	r2,-3
 1025dd8:	18800d16 	blt	r3,r2,1025e10 <___vfprintf_internal_r+0x1d2c>
 1025ddc:	48c00c16 	blt	r9,r3,1025e10 <___vfprintf_internal_r+0x1d2c>
 1025de0:	d8c13415 	stw	r3,1232(sp)
 1025de4:	040019c4 	movi	r16,103
 1025de8:	003eb506 	br	10258c0 <_gp+0xfffe75dc>
 1025dec:	05400b44 	movi	r21,45
 1025df0:	dd412785 	stb	r21,1182(sp)
 1025df4:	003a0f06 	br	1024634 <_gp+0xfffe6350>
 1025df8:	010040f4 	movhi	r4,259
 1025dfc:	21115984 	addi	r4,r4,17766
 1025e00:	d9012c15 	stw	r4,1200(sp)
 1025e04:	003cb106 	br	10250cc <_gp+0xfffe6de8>
 1025e08:	5005883a 	mov	r2,r10
 1025e0c:	003ea106 	br	1025894 <_gp+0xfffe75b0>
 1025e10:	843fff84 	addi	r16,r16,-2
 1025e14:	1f3fffc4 	addi	fp,r3,-1
 1025e18:	df012615 	stw	fp,1176(sp)
 1025e1c:	dc0122c5 	stb	r16,1163(sp)
 1025e20:	e0009516 	blt	fp,zero,1026078 <___vfprintf_internal_r+0x1f94>
 1025e24:	00800ac4 	movi	r2,43
 1025e28:	d8812305 	stb	r2,1164(sp)
 1025e2c:	00800244 	movi	r2,9
 1025e30:	1700690e 	bge	r2,fp,1025fd8 <___vfprintf_internal_r+0x1ef4>
 1025e34:	dd4122c4 	addi	r21,sp,1163
 1025e38:	dc012c15 	stw	r16,1200(sp)
 1025e3c:	8825883a 	mov	r18,r17
 1025e40:	a821883a 	mov	r16,r21
 1025e44:	4023883a 	mov	r17,r8
 1025e48:	e009883a 	mov	r4,fp
 1025e4c:	01400284 	movi	r5,10
 1025e50:	1021e580 	call	1021e58 <__modsi3>
 1025e54:	10800c04 	addi	r2,r2,48
 1025e58:	843fffc4 	addi	r16,r16,-1
 1025e5c:	e009883a 	mov	r4,fp
 1025e60:	01400284 	movi	r5,10
 1025e64:	80800005 	stb	r2,0(r16)
 1025e68:	1021e040 	call	1021e04 <__divsi3>
 1025e6c:	1039883a 	mov	fp,r2
 1025e70:	00800244 	movi	r2,9
 1025e74:	173ff416 	blt	r2,fp,1025e48 <_gp+0xfffe7b64>
 1025e78:	8811883a 	mov	r8,r17
 1025e7c:	e0800c04 	addi	r2,fp,48
 1025e80:	9023883a 	mov	r17,r18
 1025e84:	8025883a 	mov	r18,r16
 1025e88:	913fffc4 	addi	r4,r18,-1
 1025e8c:	90bfffc5 	stb	r2,-1(r18)
 1025e90:	dc012c17 	ldw	r16,1200(sp)
 1025e94:	25408e2e 	bgeu	r4,r21,10260d0 <___vfprintf_internal_r+0x1fec>
 1025e98:	d9412384 	addi	r5,sp,1166
 1025e9c:	2c8bc83a 	sub	r5,r5,r18
 1025ea0:	d8c12344 	addi	r3,sp,1165
 1025ea4:	a94b883a 	add	r5,r21,r5
 1025ea8:	00000106 	br	1025eb0 <___vfprintf_internal_r+0x1dcc>
 1025eac:	20800003 	ldbu	r2,0(r4)
 1025eb0:	18800005 	stb	r2,0(r3)
 1025eb4:	18c00044 	addi	r3,r3,1
 1025eb8:	21000044 	addi	r4,r4,1
 1025ebc:	197ffb1e 	bne	r3,r5,1025eac <_gp+0xfffe7bc8>
 1025ec0:	d8812304 	addi	r2,sp,1164
 1025ec4:	1485c83a 	sub	r2,r2,r18
 1025ec8:	d8c12344 	addi	r3,sp,1165
 1025ecc:	1885883a 	add	r2,r3,r2
 1025ed0:	dac13317 	ldw	r11,1228(sp)
 1025ed4:	156bc83a 	sub	r21,r2,r21
 1025ed8:	dd413a15 	stw	r21,1256(sp)
 1025edc:	00800044 	movi	r2,1
 1025ee0:	5d65883a 	add	r18,r11,r21
 1025ee4:	12c0770e 	bge	r2,r11,10260c4 <___vfprintf_internal_r+0x1fe0>
 1025ee8:	94800044 	addi	r18,r18,1
 1025eec:	9005883a 	mov	r2,r18
 1025ef0:	90007216 	blt	r18,zero,10260bc <___vfprintf_internal_r+0x1fd8>
 1025ef4:	d8013415 	stw	zero,1232(sp)
 1025ef8:	003e7906 	br	10258e0 <_gp+0xfffe75fc>
 1025efc:	da412b15 	stw	r9,1196(sp)
 1025f00:	dd412783 	ldbu	r21,1182(sp)
 1025f04:	4825883a 	mov	r18,r9
 1025f08:	dcc12d15 	stw	r19,1204(sp)
 1025f0c:	d8013215 	stw	zero,1224(sp)
 1025f10:	d8013415 	stw	zero,1232(sp)
 1025f14:	003a0706 	br	1024734 <_gp+0xfffe6450>
 1025f18:	b009883a 	mov	r4,r22
 1025f1c:	b80b883a 	mov	r5,r23
 1025f20:	d9811e04 	addi	r6,sp,1144
 1025f24:	102c68c0 	call	102c68c <__sprint_r>
 1025f28:	1039851e 	bne	r2,zero,1024540 <_gp+0xfffe625c>
 1025f2c:	dc012617 	ldw	r16,1176(sp)
 1025f30:	d8c12017 	ldw	r3,1152(sp)
 1025f34:	d8811f17 	ldw	r2,1148(sp)
 1025f38:	da000404 	addi	r8,sp,16
 1025f3c:	003ec706 	br	1025a5c <_gp+0xfffe7778>
 1025f40:	483e1a1e 	bne	r9,zero,10257ac <_gp+0xfffe74c8>
 1025f44:	9013883a 	mov	r9,r18
 1025f48:	003e1806 	br	10257ac <_gp+0xfffe74c8>
 1025f4c:	00c00b44 	movi	r3,45
 1025f50:	64a0003c 	xorhi	r18,r12,32768
 1025f54:	d8c12b05 	stb	r3,1196(sp)
 1025f58:	003e1a06 	br	10257c4 <_gp+0xfffe74e0>
 1025f5c:	4f000044 	addi	fp,r9,1
 1025f60:	003e1f06 	br	10257e0 <_gp+0xfffe74fc>
 1025f64:	02400184 	movi	r9,6
 1025f68:	003e1006 	br	10257ac <_gp+0xfffe74c8>
 1025f6c:	d8c13417 	ldw	r3,1232(sp)
 1025f70:	00c04b0e 	bge	zero,r3,10260a0 <___vfprintf_internal_r+0x1fbc>
 1025f74:	04800044 	movi	r18,1
 1025f78:	dac13317 	ldw	r11,1228(sp)
 1025f7c:	92e5883a 	add	r18,r18,r11
 1025f80:	9005883a 	mov	r2,r18
 1025f84:	903e560e 	bge	r18,zero,10258e0 <_gp+0xfffe75fc>
 1025f88:	0005883a 	mov	r2,zero
 1025f8c:	003e5406 	br	10258e0 <_gp+0xfffe75fc>
 1025f90:	d8c12617 	ldw	r3,1176(sp)
 1025f94:	d8c13415 	stw	r3,1232(sp)
 1025f98:	00c03b0e 	bge	zero,r3,1026088 <___vfprintf_internal_r+0x1fa4>
 1025f9c:	4800081e 	bne	r9,zero,1025fc0 <___vfprintf_internal_r+0x1edc>
 1025fa0:	8c40004c 	andi	r17,r17,1
 1025fa4:	8800061e 	bne	r17,zero,1025fc0 <___vfprintf_internal_r+0x1edc>
 1025fa8:	1805883a 	mov	r2,r3
 1025fac:	183e4b0e 	bge	r3,zero,10258dc <_gp+0xfffe75f8>
 1025fb0:	0005883a 	mov	r2,zero
 1025fb4:	003e4906 	br	10258dc <_gp+0xfffe75f8>
 1025fb8:	d8812117 	ldw	r2,1156(sp)
 1025fbc:	003e3506 	br	1025894 <_gp+0xfffe75b0>
 1025fc0:	dac13417 	ldw	r11,1232(sp)
 1025fc4:	4a400044 	addi	r9,r9,1
 1025fc8:	5a65883a 	add	r18,r11,r9
 1025fcc:	9005883a 	mov	r2,r18
 1025fd0:	903e430e 	bge	r18,zero,10258e0 <_gp+0xfffe75fc>
 1025fd4:	003fec06 	br	1025f88 <_gp+0xfffe7ca4>
 1025fd8:	00800c04 	movi	r2,48
 1025fdc:	e0c00c04 	addi	r3,fp,48
 1025fe0:	d8812345 	stb	r2,1165(sp)
 1025fe4:	d8c12385 	stb	r3,1166(sp)
 1025fe8:	d88123c4 	addi	r2,sp,1167
 1025fec:	dd4122c4 	addi	r21,sp,1163
 1025ff0:	003fb706 	br	1025ed0 <_gp+0xfffe7bec>
 1025ff4:	0005883a 	mov	r2,zero
 1025ff8:	003f6006 	br	1025d7c <_gp+0xfffe7a98>
 1025ffc:	db013417 	ldw	r12,1232(sp)
 1026000:	64800044 	addi	r18,r12,1
 1026004:	9005883a 	mov	r2,r18
 1026008:	903e350e 	bge	r18,zero,10258e0 <_gp+0xfffe75fc>
 102600c:	003fde06 	br	1025f88 <_gp+0xfffe7ca4>
 1026010:	d9013717 	ldw	r4,1244(sp)
 1026014:	900b883a 	mov	r5,r18
 1026018:	000d883a 	mov	r6,zero
 102601c:	000f883a 	mov	r7,zero
 1026020:	da013f15 	stw	r8,1276(sp)
 1026024:	da413e15 	stw	r9,1272(sp)
 1026028:	da813d15 	stw	r10,1268(sp)
 102602c:	10300140 	call	1030014 <__eqdf2>
 1026030:	da013f17 	ldw	r8,1276(sp)
 1026034:	da413e17 	ldw	r9,1272(sp)
 1026038:	da813d17 	ldw	r10,1268(sp)
 102603c:	103f1426 	beq	r2,zero,1025c90 <_gp+0xfffe79ac>
 1026040:	00800044 	movi	r2,1
 1026044:	1707c83a 	sub	r3,r2,fp
 1026048:	d8c12615 	stw	r3,1176(sp)
 102604c:	003f1106 	br	1025c94 <_gp+0xfffe79b0>
 1026050:	dac12d17 	ldw	r11,1204(sp)
 1026054:	5a400017 	ldw	r9,0(r11)
 1026058:	5ac00104 	addi	r11,r11,4
 102605c:	dac12d15 	stw	r11,1204(sp)
 1026060:	483ec60e 	bge	r9,zero,1025b7c <_gp+0xfffe7898>
 1026064:	027fffc4 	movi	r9,-1
 1026068:	1c000047 	ldb	r16,1(r3)
 102606c:	00388406 	br	1024280 <_gp+0xfffe5f9c>
 1026070:	043fffc4 	movi	r16,-1
 1026074:	00391006 	br	10244b8 <_gp+0xfffe61d4>
 1026078:	00800b44 	movi	r2,45
 102607c:	0739c83a 	sub	fp,zero,fp
 1026080:	d8812305 	stb	r2,1164(sp)
 1026084:	003f6906 	br	1025e2c <_gp+0xfffe7b48>
 1026088:	4800081e 	bne	r9,zero,10260ac <___vfprintf_internal_r+0x1fc8>
 102608c:	8c40004c 	andi	r17,r17,1
 1026090:	8800061e 	bne	r17,zero,10260ac <___vfprintf_internal_r+0x1fc8>
 1026094:	00800044 	movi	r2,1
 1026098:	1025883a 	mov	r18,r2
 102609c:	003e1006 	br	10258e0 <_gp+0xfffe75fc>
 10260a0:	04800084 	movi	r18,2
 10260a4:	90e5c83a 	sub	r18,r18,r3
 10260a8:	003fb306 	br	1025f78 <_gp+0xfffe7c94>
 10260ac:	4c800084 	addi	r18,r9,2
 10260b0:	9005883a 	mov	r2,r18
 10260b4:	903e0a0e 	bge	r18,zero,10258e0 <_gp+0xfffe75fc>
 10260b8:	003fb306 	br	1025f88 <_gp+0xfffe7ca4>
 10260bc:	0005883a 	mov	r2,zero
 10260c0:	003f8c06 	br	1025ef4 <_gp+0xfffe7c10>
 10260c4:	88a2703a 	and	r17,r17,r2
 10260c8:	883f8826 	beq	r17,zero,1025eec <_gp+0xfffe7c08>
 10260cc:	003f8606 	br	1025ee8 <_gp+0xfffe7c04>
 10260d0:	d8812344 	addi	r2,sp,1165
 10260d4:	003f7e06 	br	1025ed0 <_gp+0xfffe7bec>
 10260d8:	d8c12617 	ldw	r3,1176(sp)
 10260dc:	003f4d06 	br	1025e14 <_gp+0xfffe7b30>

010260e0 <__vfprintf_internal>:
 10260e0:	2007883a 	mov	r3,r4
 10260e4:	010040f4 	movhi	r4,259
 10260e8:	2118ba04 	addi	r4,r4,25320
 10260ec:	21000017 	ldw	r4,0(r4)
 10260f0:	2805883a 	mov	r2,r5
 10260f4:	300f883a 	mov	r7,r6
 10260f8:	180b883a 	mov	r5,r3
 10260fc:	100d883a 	mov	r6,r2
 1026100:	10240e41 	jmpi	10240e4 <___vfprintf_internal_r>

01026104 <_vsnprintf_r>:
 1026104:	3005883a 	mov	r2,r6
 1026108:	30003616 	blt	r6,zero,10261e4 <_vsnprintf_r+0xe0>
 102610c:	deffe404 	addi	sp,sp,-112
 1026110:	00c08204 	movi	r3,520
 1026114:	dc001a15 	stw	r16,104(sp)
 1026118:	dfc01b15 	stw	ra,108(sp)
 102611c:	d8c0030d 	sth	r3,12(sp)
 1026120:	d9400015 	stw	r5,0(sp)
 1026124:	d9400415 	stw	r5,16(sp)
 1026128:	380d883a 	mov	r6,r7
 102612c:	2021883a 	mov	r16,r4
 1026130:	10001326 	beq	r2,zero,1026180 <_vsnprintf_r+0x7c>
 1026134:	00c040f4 	movhi	r3,259
 1026138:	18d8ba04 	addi	r3,r3,25320
 102613c:	19000017 	ldw	r4,0(r3)
 1026140:	d9c01c17 	ldw	r7,112(sp)
 1026144:	10bfffc4 	addi	r2,r2,-1
 1026148:	d8800215 	stw	r2,8(sp)
 102614c:	d8800515 	stw	r2,20(sp)
 1026150:	d80b883a 	mov	r5,sp
 1026154:	00bfffc4 	movi	r2,-1
 1026158:	d880038d 	sth	r2,14(sp)
 102615c:	10221540 	call	1022154 <___svfprintf_internal_r>
 1026160:	00ffffc4 	movi	r3,-1
 1026164:	10c01c16 	blt	r2,r3,10261d8 <_vsnprintf_r+0xd4>
 1026168:	d8c00017 	ldw	r3,0(sp)
 102616c:	18000005 	stb	zero,0(r3)
 1026170:	dfc01b17 	ldw	ra,108(sp)
 1026174:	dc001a17 	ldw	r16,104(sp)
 1026178:	dec01c04 	addi	sp,sp,112
 102617c:	f800283a 	ret
 1026180:	008040f4 	movhi	r2,259
 1026184:	1098ba04 	addi	r2,r2,25320
 1026188:	11000017 	ldw	r4,0(r2)
 102618c:	d9c01c17 	ldw	r7,112(sp)
 1026190:	00bfffc4 	movi	r2,-1
 1026194:	d80b883a 	mov	r5,sp
 1026198:	d8000215 	stw	zero,8(sp)
 102619c:	d8000515 	stw	zero,20(sp)
 10261a0:	d880038d 	sth	r2,14(sp)
 10261a4:	10221540 	call	1022154 <___svfprintf_internal_r>
 10261a8:	00ffffc4 	movi	r3,-1
 10261ac:	10c00416 	blt	r2,r3,10261c0 <_vsnprintf_r+0xbc>
 10261b0:	dfc01b17 	ldw	ra,108(sp)
 10261b4:	dc001a17 	ldw	r16,104(sp)
 10261b8:	dec01c04 	addi	sp,sp,112
 10261bc:	f800283a 	ret
 10261c0:	00c022c4 	movi	r3,139
 10261c4:	80c00015 	stw	r3,0(r16)
 10261c8:	dfc01b17 	ldw	ra,108(sp)
 10261cc:	dc001a17 	ldw	r16,104(sp)
 10261d0:	dec01c04 	addi	sp,sp,112
 10261d4:	f800283a 	ret
 10261d8:	00c022c4 	movi	r3,139
 10261dc:	80c00015 	stw	r3,0(r16)
 10261e0:	003fe106 	br	1026168 <_gp+0xfffe7e84>
 10261e4:	008022c4 	movi	r2,139
 10261e8:	20800015 	stw	r2,0(r4)
 10261ec:	00bfffc4 	movi	r2,-1
 10261f0:	f800283a 	ret

010261f4 <vsnprintf>:
 10261f4:	008040f4 	movhi	r2,259
 10261f8:	1098ba04 	addi	r2,r2,25320
 10261fc:	2011883a 	mov	r8,r4
 1026200:	11000017 	ldw	r4,0(r2)
 1026204:	defffe04 	addi	sp,sp,-8
 1026208:	2807883a 	mov	r3,r5
 102620c:	3005883a 	mov	r2,r6
 1026210:	d9c00015 	stw	r7,0(sp)
 1026214:	400b883a 	mov	r5,r8
 1026218:	180d883a 	mov	r6,r3
 102621c:	100f883a 	mov	r7,r2
 1026220:	dfc00115 	stw	ra,4(sp)
 1026224:	10261040 	call	1026104 <_vsnprintf_r>
 1026228:	dfc00117 	ldw	ra,4(sp)
 102622c:	dec00204 	addi	sp,sp,8
 1026230:	f800283a 	ret

01026234 <__swsetup_r>:
 1026234:	008040f4 	movhi	r2,259
 1026238:	defffd04 	addi	sp,sp,-12
 102623c:	1098ba04 	addi	r2,r2,25320
 1026240:	dc400115 	stw	r17,4(sp)
 1026244:	2023883a 	mov	r17,r4
 1026248:	11000017 	ldw	r4,0(r2)
 102624c:	dc000015 	stw	r16,0(sp)
 1026250:	dfc00215 	stw	ra,8(sp)
 1026254:	2821883a 	mov	r16,r5
 1026258:	20000226 	beq	r4,zero,1026264 <__swsetup_r+0x30>
 102625c:	20c00e17 	ldw	r3,56(r4)
 1026260:	18002e26 	beq	r3,zero,102631c <__swsetup_r+0xe8>
 1026264:	8080030b 	ldhu	r2,12(r16)
 1026268:	10c0020c 	andi	r3,r2,8
 102626c:	100d883a 	mov	r6,r2
 1026270:	18000f26 	beq	r3,zero,10262b0 <__swsetup_r+0x7c>
 1026274:	80c00417 	ldw	r3,16(r16)
 1026278:	18001526 	beq	r3,zero,10262d0 <__swsetup_r+0x9c>
 102627c:	1100004c 	andi	r4,r2,1
 1026280:	20001c1e 	bne	r4,zero,10262f4 <__swsetup_r+0xc0>
 1026284:	1080008c 	andi	r2,r2,2
 1026288:	1000261e 	bne	r2,zero,1026324 <__swsetup_r+0xf0>
 102628c:	80800517 	ldw	r2,20(r16)
 1026290:	80800215 	stw	r2,8(r16)
 1026294:	18001c26 	beq	r3,zero,1026308 <__swsetup_r+0xd4>
 1026298:	0005883a 	mov	r2,zero
 102629c:	dfc00217 	ldw	ra,8(sp)
 10262a0:	dc400117 	ldw	r17,4(sp)
 10262a4:	dc000017 	ldw	r16,0(sp)
 10262a8:	dec00304 	addi	sp,sp,12
 10262ac:	f800283a 	ret
 10262b0:	3080040c 	andi	r2,r6,16
 10262b4:	10001726 	beq	r2,zero,1026314 <__swsetup_r+0xe0>
 10262b8:	3080010c 	andi	r2,r6,4
 10262bc:	10001b1e 	bne	r2,zero,102632c <__swsetup_r+0xf8>
 10262c0:	80c00417 	ldw	r3,16(r16)
 10262c4:	30800214 	ori	r2,r6,8
 10262c8:	8080030d 	sth	r2,12(r16)
 10262cc:	183feb1e 	bne	r3,zero,102627c <_gp+0xfffe7f98>
 10262d0:	1140a00c 	andi	r5,r2,640
 10262d4:	01008004 	movi	r4,512
 10262d8:	293fe826 	beq	r5,r4,102627c <_gp+0xfffe7f98>
 10262dc:	8809883a 	mov	r4,r17
 10262e0:	800b883a 	mov	r5,r16
 10262e4:	1028d8c0 	call	1028d8c <__smakebuf_r>
 10262e8:	8080030b 	ldhu	r2,12(r16)
 10262ec:	80c00417 	ldw	r3,16(r16)
 10262f0:	003fe206 	br	102627c <_gp+0xfffe7f98>
 10262f4:	80800517 	ldw	r2,20(r16)
 10262f8:	80000215 	stw	zero,8(r16)
 10262fc:	0085c83a 	sub	r2,zero,r2
 1026300:	80800615 	stw	r2,24(r16)
 1026304:	183fe41e 	bne	r3,zero,1026298 <_gp+0xfffe7fb4>
 1026308:	8080030b 	ldhu	r2,12(r16)
 102630c:	1080200c 	andi	r2,r2,128
 1026310:	103fe226 	beq	r2,zero,102629c <_gp+0xfffe7fb8>
 1026314:	00bfffc4 	movi	r2,-1
 1026318:	003fe006 	br	102629c <_gp+0xfffe7fb8>
 102631c:	10282340 	call	1028234 <__sinit>
 1026320:	003fd006 	br	1026264 <_gp+0xfffe7f80>
 1026324:	0005883a 	mov	r2,zero
 1026328:	003fd906 	br	1026290 <_gp+0xfffe7fac>
 102632c:	81400c17 	ldw	r5,48(r16)
 1026330:	28000626 	beq	r5,zero,102634c <__swsetup_r+0x118>
 1026334:	80801004 	addi	r2,r16,64
 1026338:	28800326 	beq	r5,r2,1026348 <__swsetup_r+0x114>
 102633c:	8809883a 	mov	r4,r17
 1026340:	10283a80 	call	10283a8 <_free_r>
 1026344:	8180030b 	ldhu	r6,12(r16)
 1026348:	80000c15 	stw	zero,48(r16)
 102634c:	80c00417 	ldw	r3,16(r16)
 1026350:	00bff6c4 	movi	r2,-37
 1026354:	118c703a 	and	r6,r2,r6
 1026358:	80000115 	stw	zero,4(r16)
 102635c:	80c00015 	stw	r3,0(r16)
 1026360:	003fd806 	br	10262c4 <_gp+0xfffe7fe0>

01026364 <quorem>:
 1026364:	defff704 	addi	sp,sp,-36
 1026368:	dc800215 	stw	r18,8(sp)
 102636c:	20800417 	ldw	r2,16(r4)
 1026370:	2c800417 	ldw	r18,16(r5)
 1026374:	dfc00815 	stw	ra,32(sp)
 1026378:	ddc00715 	stw	r23,28(sp)
 102637c:	dd800615 	stw	r22,24(sp)
 1026380:	dd400515 	stw	r21,20(sp)
 1026384:	dd000415 	stw	r20,16(sp)
 1026388:	dcc00315 	stw	r19,12(sp)
 102638c:	dc400115 	stw	r17,4(sp)
 1026390:	dc000015 	stw	r16,0(sp)
 1026394:	14807116 	blt	r2,r18,102655c <quorem+0x1f8>
 1026398:	94bfffc4 	addi	r18,r18,-1
 102639c:	94ad883a 	add	r22,r18,r18
 10263a0:	b5ad883a 	add	r22,r22,r22
 10263a4:	2c400504 	addi	r17,r5,20
 10263a8:	8da9883a 	add	r20,r17,r22
 10263ac:	25400504 	addi	r21,r4,20
 10263b0:	282f883a 	mov	r23,r5
 10263b4:	adad883a 	add	r22,r21,r22
 10263b8:	a1400017 	ldw	r5,0(r20)
 10263bc:	2021883a 	mov	r16,r4
 10263c0:	b1000017 	ldw	r4,0(r22)
 10263c4:	29400044 	addi	r5,r5,1
 10263c8:	1021eb40 	call	1021eb4 <__udivsi3>
 10263cc:	1027883a 	mov	r19,r2
 10263d0:	10002c26 	beq	r2,zero,1026484 <quorem+0x120>
 10263d4:	a813883a 	mov	r9,r21
 10263d8:	8811883a 	mov	r8,r17
 10263dc:	0009883a 	mov	r4,zero
 10263e0:	000d883a 	mov	r6,zero
 10263e4:	41c00017 	ldw	r7,0(r8)
 10263e8:	49400017 	ldw	r5,0(r9)
 10263ec:	42000104 	addi	r8,r8,4
 10263f0:	38bfffcc 	andi	r2,r7,65535
 10263f4:	14c5383a 	mul	r2,r2,r19
 10263f8:	380ed43a 	srli	r7,r7,16
 10263fc:	28ffffcc 	andi	r3,r5,65535
 1026400:	2085883a 	add	r2,r4,r2
 1026404:	1008d43a 	srli	r4,r2,16
 1026408:	3ccf383a 	mul	r7,r7,r19
 102640c:	198d883a 	add	r6,r3,r6
 1026410:	10ffffcc 	andi	r3,r2,65535
 1026414:	30c7c83a 	sub	r3,r6,r3
 1026418:	280ad43a 	srli	r5,r5,16
 102641c:	21c9883a 	add	r4,r4,r7
 1026420:	180dd43a 	srai	r6,r3,16
 1026424:	20bfffcc 	andi	r2,r4,65535
 1026428:	288bc83a 	sub	r5,r5,r2
 102642c:	298b883a 	add	r5,r5,r6
 1026430:	280e943a 	slli	r7,r5,16
 1026434:	18ffffcc 	andi	r3,r3,65535
 1026438:	2008d43a 	srli	r4,r4,16
 102643c:	38ceb03a 	or	r7,r7,r3
 1026440:	49c00015 	stw	r7,0(r9)
 1026444:	280dd43a 	srai	r6,r5,16
 1026448:	4a400104 	addi	r9,r9,4
 102644c:	a23fe52e 	bgeu	r20,r8,10263e4 <_gp+0xfffe8100>
 1026450:	b0800017 	ldw	r2,0(r22)
 1026454:	10000b1e 	bne	r2,zero,1026484 <quorem+0x120>
 1026458:	b0bfff04 	addi	r2,r22,-4
 102645c:	a880082e 	bgeu	r21,r2,1026480 <quorem+0x11c>
 1026460:	b0ffff17 	ldw	r3,-4(r22)
 1026464:	18000326 	beq	r3,zero,1026474 <quorem+0x110>
 1026468:	00000506 	br	1026480 <quorem+0x11c>
 102646c:	10c00017 	ldw	r3,0(r2)
 1026470:	1800031e 	bne	r3,zero,1026480 <quorem+0x11c>
 1026474:	10bfff04 	addi	r2,r2,-4
 1026478:	94bfffc4 	addi	r18,r18,-1
 102647c:	a8bffb36 	bltu	r21,r2,102646c <_gp+0xfffe8188>
 1026480:	84800415 	stw	r18,16(r16)
 1026484:	8009883a 	mov	r4,r16
 1026488:	b80b883a 	mov	r5,r23
 102648c:	102a44c0 	call	102a44c <__mcmp>
 1026490:	10002616 	blt	r2,zero,102652c <quorem+0x1c8>
 1026494:	9cc00044 	addi	r19,r19,1
 1026498:	a80d883a 	mov	r6,r21
 102649c:	000b883a 	mov	r5,zero
 10264a0:	31000017 	ldw	r4,0(r6)
 10264a4:	88800017 	ldw	r2,0(r17)
 10264a8:	31800104 	addi	r6,r6,4
 10264ac:	20ffffcc 	andi	r3,r4,65535
 10264b0:	194b883a 	add	r5,r3,r5
 10264b4:	10ffffcc 	andi	r3,r2,65535
 10264b8:	28c7c83a 	sub	r3,r5,r3
 10264bc:	1004d43a 	srli	r2,r2,16
 10264c0:	2008d43a 	srli	r4,r4,16
 10264c4:	180bd43a 	srai	r5,r3,16
 10264c8:	18ffffcc 	andi	r3,r3,65535
 10264cc:	2089c83a 	sub	r4,r4,r2
 10264d0:	2149883a 	add	r4,r4,r5
 10264d4:	2004943a 	slli	r2,r4,16
 10264d8:	8c400104 	addi	r17,r17,4
 10264dc:	200bd43a 	srai	r5,r4,16
 10264e0:	10c6b03a 	or	r3,r2,r3
 10264e4:	30ffff15 	stw	r3,-4(r6)
 10264e8:	a47fed2e 	bgeu	r20,r17,10264a0 <_gp+0xfffe81bc>
 10264ec:	9485883a 	add	r2,r18,r18
 10264f0:	1085883a 	add	r2,r2,r2
 10264f4:	a887883a 	add	r3,r21,r2
 10264f8:	18800017 	ldw	r2,0(r3)
 10264fc:	10000b1e 	bne	r2,zero,102652c <quorem+0x1c8>
 1026500:	18bfff04 	addi	r2,r3,-4
 1026504:	a880082e 	bgeu	r21,r2,1026528 <quorem+0x1c4>
 1026508:	18ffff17 	ldw	r3,-4(r3)
 102650c:	18000326 	beq	r3,zero,102651c <quorem+0x1b8>
 1026510:	00000506 	br	1026528 <quorem+0x1c4>
 1026514:	10c00017 	ldw	r3,0(r2)
 1026518:	1800031e 	bne	r3,zero,1026528 <quorem+0x1c4>
 102651c:	10bfff04 	addi	r2,r2,-4
 1026520:	94bfffc4 	addi	r18,r18,-1
 1026524:	a8bffb36 	bltu	r21,r2,1026514 <_gp+0xfffe8230>
 1026528:	84800415 	stw	r18,16(r16)
 102652c:	9805883a 	mov	r2,r19
 1026530:	dfc00817 	ldw	ra,32(sp)
 1026534:	ddc00717 	ldw	r23,28(sp)
 1026538:	dd800617 	ldw	r22,24(sp)
 102653c:	dd400517 	ldw	r21,20(sp)
 1026540:	dd000417 	ldw	r20,16(sp)
 1026544:	dcc00317 	ldw	r19,12(sp)
 1026548:	dc800217 	ldw	r18,8(sp)
 102654c:	dc400117 	ldw	r17,4(sp)
 1026550:	dc000017 	ldw	r16,0(sp)
 1026554:	dec00904 	addi	sp,sp,36
 1026558:	f800283a 	ret
 102655c:	0005883a 	mov	r2,zero
 1026560:	003ff306 	br	1026530 <_gp+0xfffe824c>

01026564 <_dtoa_r>:
 1026564:	20801017 	ldw	r2,64(r4)
 1026568:	deffde04 	addi	sp,sp,-136
 102656c:	dd401d15 	stw	r21,116(sp)
 1026570:	dcc01b15 	stw	r19,108(sp)
 1026574:	dc801a15 	stw	r18,104(sp)
 1026578:	dc401915 	stw	r17,100(sp)
 102657c:	dc001815 	stw	r16,96(sp)
 1026580:	dfc02115 	stw	ra,132(sp)
 1026584:	df002015 	stw	fp,128(sp)
 1026588:	ddc01f15 	stw	r23,124(sp)
 102658c:	dd801e15 	stw	r22,120(sp)
 1026590:	dd001c15 	stw	r20,112(sp)
 1026594:	d9c00315 	stw	r7,12(sp)
 1026598:	2021883a 	mov	r16,r4
 102659c:	302b883a 	mov	r21,r6
 10265a0:	2825883a 	mov	r18,r5
 10265a4:	dc402417 	ldw	r17,144(sp)
 10265a8:	3027883a 	mov	r19,r6
 10265ac:	10000826 	beq	r2,zero,10265d0 <_dtoa_r+0x6c>
 10265b0:	21801117 	ldw	r6,68(r4)
 10265b4:	00c00044 	movi	r3,1
 10265b8:	100b883a 	mov	r5,r2
 10265bc:	1986983a 	sll	r3,r3,r6
 10265c0:	11800115 	stw	r6,4(r2)
 10265c4:	10c00215 	stw	r3,8(r2)
 10265c8:	1029c340 	call	1029c34 <_Bfree>
 10265cc:	80001015 	stw	zero,64(r16)
 10265d0:	a8002d16 	blt	r21,zero,1026688 <_dtoa_r+0x124>
 10265d4:	88000015 	stw	zero,0(r17)
 10265d8:	a8dffc2c 	andhi	r3,r21,32752
 10265dc:	009ffc34 	movhi	r2,32752
 10265e0:	18801b26 	beq	r3,r2,1026650 <_dtoa_r+0xec>
 10265e4:	9009883a 	mov	r4,r18
 10265e8:	980b883a 	mov	r5,r19
 10265ec:	000d883a 	mov	r6,zero
 10265f0:	000f883a 	mov	r7,zero
 10265f4:	10300140 	call	1030014 <__eqdf2>
 10265f8:	10002a1e 	bne	r2,zero,10266a4 <_dtoa_r+0x140>
 10265fc:	d8c02317 	ldw	r3,140(sp)
 1026600:	d9002517 	ldw	r4,148(sp)
 1026604:	00800044 	movi	r2,1
 1026608:	18800015 	stw	r2,0(r3)
 102660c:	2001a226 	beq	r4,zero,1026c98 <_dtoa_r+0x734>
 1026610:	008040f4 	movhi	r2,259
 1026614:	10915144 	addi	r2,r2,17733
 1026618:	20800015 	stw	r2,0(r4)
 102661c:	10bfffc4 	addi	r2,r2,-1
 1026620:	dfc02117 	ldw	ra,132(sp)
 1026624:	df002017 	ldw	fp,128(sp)
 1026628:	ddc01f17 	ldw	r23,124(sp)
 102662c:	dd801e17 	ldw	r22,120(sp)
 1026630:	dd401d17 	ldw	r21,116(sp)
 1026634:	dd001c17 	ldw	r20,112(sp)
 1026638:	dcc01b17 	ldw	r19,108(sp)
 102663c:	dc801a17 	ldw	r18,104(sp)
 1026640:	dc401917 	ldw	r17,100(sp)
 1026644:	dc001817 	ldw	r16,96(sp)
 1026648:	dec02204 	addi	sp,sp,136
 102664c:	f800283a 	ret
 1026650:	d8c02317 	ldw	r3,140(sp)
 1026654:	0089c3c4 	movi	r2,9999
 1026658:	18800015 	stw	r2,0(r3)
 102665c:	90017c26 	beq	r18,zero,1026c50 <_dtoa_r+0x6ec>
 1026660:	008040f4 	movhi	r2,259
 1026664:	10916504 	addi	r2,r2,17812
 1026668:	d9002517 	ldw	r4,148(sp)
 102666c:	203fec26 	beq	r4,zero,1026620 <_gp+0xfffe833c>
 1026670:	10c000c7 	ldb	r3,3(r2)
 1026674:	18017d1e 	bne	r3,zero,1026c6c <_dtoa_r+0x708>
 1026678:	10c000c4 	addi	r3,r2,3
 102667c:	d9802517 	ldw	r6,148(sp)
 1026680:	30c00015 	stw	r3,0(r6)
 1026684:	003fe606 	br	1026620 <_gp+0xfffe833c>
 1026688:	04e00034 	movhi	r19,32768
 102668c:	9cffffc4 	addi	r19,r19,-1
 1026690:	00800044 	movi	r2,1
 1026694:	ace6703a 	and	r19,r21,r19
 1026698:	88800015 	stw	r2,0(r17)
 102669c:	982b883a 	mov	r21,r19
 10266a0:	003fcd06 	br	10265d8 <_gp+0xfffe82f4>
 10266a4:	d8800204 	addi	r2,sp,8
 10266a8:	a822d53a 	srli	r17,r21,20
 10266ac:	d8800015 	stw	r2,0(sp)
 10266b0:	8009883a 	mov	r4,r16
 10266b4:	900b883a 	mov	r5,r18
 10266b8:	980d883a 	mov	r6,r19
 10266bc:	d9c00104 	addi	r7,sp,4
 10266c0:	102a7c00 	call	102a7c0 <__d2b>
 10266c4:	1039883a 	mov	fp,r2
 10266c8:	88016a1e 	bne	r17,zero,1026c74 <_dtoa_r+0x710>
 10266cc:	dd000217 	ldw	r20,8(sp)
 10266d0:	dc400117 	ldw	r17,4(sp)
 10266d4:	00befbc4 	movi	r2,-1041
 10266d8:	a463883a 	add	r17,r20,r17
 10266dc:	8882ea16 	blt	r17,r2,1027288 <_dtoa_r+0xd24>
 10266e0:	00bf0384 	movi	r2,-1010
 10266e4:	1445c83a 	sub	r2,r2,r17
 10266e8:	89010484 	addi	r4,r17,1042
 10266ec:	a8aa983a 	sll	r21,r21,r2
 10266f0:	9108d83a 	srl	r4,r18,r4
 10266f4:	a908b03a 	or	r4,r21,r4
 10266f8:	10313a40 	call	10313a4 <__floatunsidf>
 10266fc:	017f8434 	movhi	r5,65040
 1026700:	01800044 	movi	r6,1
 1026704:	1009883a 	mov	r4,r2
 1026708:	194b883a 	add	r5,r3,r5
 102670c:	8c7fffc4 	addi	r17,r17,-1
 1026710:	d9800f15 	stw	r6,60(sp)
 1026714:	000d883a 	mov	r6,zero
 1026718:	01cffe34 	movhi	r7,16376
 102671c:	103097c0 	call	103097c <__subdf3>
 1026720:	0198dbf4 	movhi	r6,25455
 1026724:	01cff4f4 	movhi	r7,16339
 1026728:	1009883a 	mov	r4,r2
 102672c:	180b883a 	mov	r5,r3
 1026730:	3190d844 	addi	r6,r6,17249
 1026734:	39e1e9c4 	addi	r7,r7,-30809
 1026738:	10302580 	call	1030258 <__muldf3>
 102673c:	01a2d874 	movhi	r6,35681
 1026740:	01cff1f4 	movhi	r7,16327
 1026744:	180b883a 	mov	r5,r3
 1026748:	31b22cc4 	addi	r6,r6,-14157
 102674c:	39e28a04 	addi	r7,r7,-30168
 1026750:	1009883a 	mov	r4,r2
 1026754:	102eeac0 	call	102eeac <__adddf3>
 1026758:	8809883a 	mov	r4,r17
 102675c:	102d883a 	mov	r22,r2
 1026760:	182b883a 	mov	r21,r3
 1026764:	10312d40 	call	10312d4 <__floatsidf>
 1026768:	019427f4 	movhi	r6,20639
 102676c:	01cff4f4 	movhi	r7,16339
 1026770:	1009883a 	mov	r4,r2
 1026774:	180b883a 	mov	r5,r3
 1026778:	319e7ec4 	addi	r6,r6,31227
 102677c:	39d104c4 	addi	r7,r7,17427
 1026780:	10302580 	call	1030258 <__muldf3>
 1026784:	b009883a 	mov	r4,r22
 1026788:	a80b883a 	mov	r5,r21
 102678c:	100d883a 	mov	r6,r2
 1026790:	180f883a 	mov	r7,r3
 1026794:	102eeac0 	call	102eeac <__adddf3>
 1026798:	1009883a 	mov	r4,r2
 102679c:	180b883a 	mov	r5,r3
 10267a0:	102d883a 	mov	r22,r2
 10267a4:	182b883a 	mov	r21,r3
 10267a8:	103124c0 	call	103124c <__fixdfsi>
 10267ac:	b009883a 	mov	r4,r22
 10267b0:	a80b883a 	mov	r5,r21
 10267b4:	000d883a 	mov	r6,zero
 10267b8:	000f883a 	mov	r7,zero
 10267bc:	d8800515 	stw	r2,20(sp)
 10267c0:	10301780 	call	1030178 <__ledf2>
 10267c4:	10023116 	blt	r2,zero,102708c <_dtoa_r+0xb28>
 10267c8:	d8c00517 	ldw	r3,20(sp)
 10267cc:	00800584 	movi	r2,22
 10267d0:	10c21f36 	bltu	r2,r3,1027050 <_dtoa_r+0xaec>
 10267d4:	180490fa 	slli	r2,r3,3
 10267d8:	00c040f4 	movhi	r3,259
 10267dc:	18d18104 	addi	r3,r3,17924
 10267e0:	1885883a 	add	r2,r3,r2
 10267e4:	11000017 	ldw	r4,0(r2)
 10267e8:	11400117 	ldw	r5,4(r2)
 10267ec:	900d883a 	mov	r6,r18
 10267f0:	980f883a 	mov	r7,r19
 10267f4:	10300980 	call	1030098 <__gedf2>
 10267f8:	0082a70e 	bge	zero,r2,1027298 <_dtoa_r+0xd34>
 10267fc:	d9000517 	ldw	r4,20(sp)
 1026800:	d8000c15 	stw	zero,48(sp)
 1026804:	213fffc4 	addi	r4,r4,-1
 1026808:	d9000515 	stw	r4,20(sp)
 102680c:	a463c83a 	sub	r17,r20,r17
 1026810:	8dbfffc4 	addi	r22,r17,-1
 1026814:	b0021916 	blt	r22,zero,102707c <_dtoa_r+0xb18>
 1026818:	d8000815 	stw	zero,32(sp)
 102681c:	d8800517 	ldw	r2,20(sp)
 1026820:	10020e16 	blt	r2,zero,102705c <_dtoa_r+0xaf8>
 1026824:	b0ad883a 	add	r22,r22,r2
 1026828:	d8800a15 	stw	r2,40(sp)
 102682c:	d8000915 	stw	zero,36(sp)
 1026830:	d8c00317 	ldw	r3,12(sp)
 1026834:	00800244 	movi	r2,9
 1026838:	10c11a36 	bltu	r2,r3,1026ca4 <_dtoa_r+0x740>
 102683c:	00800144 	movi	r2,5
 1026840:	10c4fc0e 	bge	r2,r3,1027c34 <_dtoa_r+0x16d0>
 1026844:	18ffff04 	addi	r3,r3,-4
 1026848:	d8c00315 	stw	r3,12(sp)
 102684c:	0029883a 	mov	r20,zero
 1026850:	d9800317 	ldw	r6,12(sp)
 1026854:	008000c4 	movi	r2,3
 1026858:	3083bd26 	beq	r6,r2,1027750 <_dtoa_r+0x11ec>
 102685c:	1183670e 	bge	r2,r6,10275fc <_dtoa_r+0x1098>
 1026860:	d8c00317 	ldw	r3,12(sp)
 1026864:	00800104 	movi	r2,4
 1026868:	1882e726 	beq	r3,r2,1027408 <_dtoa_r+0xea4>
 102686c:	00800144 	movi	r2,5
 1026870:	1884f21e 	bne	r3,r2,1027c3c <_dtoa_r+0x16d8>
 1026874:	00800044 	movi	r2,1
 1026878:	d8800b15 	stw	r2,44(sp)
 102687c:	d8c02217 	ldw	r3,136(sp)
 1026880:	d9000517 	ldw	r4,20(sp)
 1026884:	1907883a 	add	r3,r3,r4
 1026888:	19800044 	addi	r6,r3,1
 102688c:	d8c00d15 	stw	r3,52(sp)
 1026890:	d9800615 	stw	r6,24(sp)
 1026894:	0183c30e 	bge	zero,r6,10277a4 <_dtoa_r+0x1240>
 1026898:	d9800617 	ldw	r6,24(sp)
 102689c:	3023883a 	mov	r17,r6
 10268a0:	80001115 	stw	zero,68(r16)
 10268a4:	008005c4 	movi	r2,23
 10268a8:	1184f62e 	bgeu	r2,r6,1027c84 <_dtoa_r+0x1720>
 10268ac:	00c00044 	movi	r3,1
 10268b0:	00800104 	movi	r2,4
 10268b4:	1085883a 	add	r2,r2,r2
 10268b8:	11000504 	addi	r4,r2,20
 10268bc:	180b883a 	mov	r5,r3
 10268c0:	18c00044 	addi	r3,r3,1
 10268c4:	313ffb2e 	bgeu	r6,r4,10268b4 <_gp+0xfffe85d0>
 10268c8:	81401115 	stw	r5,68(r16)
 10268cc:	8009883a 	mov	r4,r16
 10268d0:	1029b8c0 	call	1029b8c <_Balloc>
 10268d4:	d8800715 	stw	r2,28(sp)
 10268d8:	80801015 	stw	r2,64(r16)
 10268dc:	00800384 	movi	r2,14
 10268e0:	1440fd36 	bltu	r2,r17,1026cd8 <_dtoa_r+0x774>
 10268e4:	a000fc26 	beq	r20,zero,1026cd8 <_dtoa_r+0x774>
 10268e8:	d8800517 	ldw	r2,20(sp)
 10268ec:	0083b90e 	bge	zero,r2,10277d4 <_dtoa_r+0x1270>
 10268f0:	d8c00517 	ldw	r3,20(sp)
 10268f4:	108003cc 	andi	r2,r2,15
 10268f8:	100490fa 	slli	r2,r2,3
 10268fc:	182fd13a 	srai	r23,r3,4
 1026900:	00c040f4 	movhi	r3,259
 1026904:	18d18104 	addi	r3,r3,17924
 1026908:	1885883a 	add	r2,r3,r2
 102690c:	b8c0040c 	andi	r3,r23,16
 1026910:	12c00017 	ldw	r11,0(r2)
 1026914:	12800117 	ldw	r10,4(r2)
 1026918:	18039726 	beq	r3,zero,1027778 <_dtoa_r+0x1214>
 102691c:	008040f4 	movhi	r2,259
 1026920:	10917704 	addi	r2,r2,17884
 1026924:	11800817 	ldw	r6,32(r2)
 1026928:	11c00917 	ldw	r7,36(r2)
 102692c:	9009883a 	mov	r4,r18
 1026930:	980b883a 	mov	r5,r19
 1026934:	da801615 	stw	r10,88(sp)
 1026938:	dac01515 	stw	r11,84(sp)
 102693c:	102f7480 	call	102f748 <__divdf3>
 1026940:	da801617 	ldw	r10,88(sp)
 1026944:	dac01517 	ldw	r11,84(sp)
 1026948:	bdc003cc 	andi	r23,r23,15
 102694c:	044000c4 	movi	r17,3
 1026950:	d8800e15 	stw	r2,56(sp)
 1026954:	182b883a 	mov	r21,r3
 1026958:	b8001126 	beq	r23,zero,10269a0 <_dtoa_r+0x43c>
 102695c:	050040f4 	movhi	r20,259
 1026960:	a5117704 	addi	r20,r20,17884
 1026964:	5805883a 	mov	r2,r11
 1026968:	5007883a 	mov	r3,r10
 102696c:	b980004c 	andi	r6,r23,1
 1026970:	1009883a 	mov	r4,r2
 1026974:	b82fd07a 	srai	r23,r23,1
 1026978:	180b883a 	mov	r5,r3
 102697c:	30000426 	beq	r6,zero,1026990 <_dtoa_r+0x42c>
 1026980:	a1800017 	ldw	r6,0(r20)
 1026984:	a1c00117 	ldw	r7,4(r20)
 1026988:	8c400044 	addi	r17,r17,1
 102698c:	10302580 	call	1030258 <__muldf3>
 1026990:	a5000204 	addi	r20,r20,8
 1026994:	b83ff51e 	bne	r23,zero,102696c <_gp+0xfffe8688>
 1026998:	1017883a 	mov	r11,r2
 102699c:	1815883a 	mov	r10,r3
 10269a0:	d9000e17 	ldw	r4,56(sp)
 10269a4:	a80b883a 	mov	r5,r21
 10269a8:	580d883a 	mov	r6,r11
 10269ac:	500f883a 	mov	r7,r10
 10269b0:	102f7480 	call	102f748 <__divdf3>
 10269b4:	1029883a 	mov	r20,r2
 10269b8:	182b883a 	mov	r21,r3
 10269bc:	d9800c17 	ldw	r6,48(sp)
 10269c0:	30000626 	beq	r6,zero,10269dc <_dtoa_r+0x478>
 10269c4:	a009883a 	mov	r4,r20
 10269c8:	a80b883a 	mov	r5,r21
 10269cc:	000d883a 	mov	r6,zero
 10269d0:	01cffc34 	movhi	r7,16368
 10269d4:	10301780 	call	1030178 <__ledf2>
 10269d8:	10043216 	blt	r2,zero,1027aa4 <_dtoa_r+0x1540>
 10269dc:	8809883a 	mov	r4,r17
 10269e0:	10312d40 	call	10312d4 <__floatsidf>
 10269e4:	1009883a 	mov	r4,r2
 10269e8:	180b883a 	mov	r5,r3
 10269ec:	a00d883a 	mov	r6,r20
 10269f0:	a80f883a 	mov	r7,r21
 10269f4:	10302580 	call	1030258 <__muldf3>
 10269f8:	000d883a 	mov	r6,zero
 10269fc:	1009883a 	mov	r4,r2
 1026a00:	180b883a 	mov	r5,r3
 1026a04:	01d00734 	movhi	r7,16412
 1026a08:	102eeac0 	call	102eeac <__adddf3>
 1026a0c:	1023883a 	mov	r17,r2
 1026a10:	d9800617 	ldw	r6,24(sp)
 1026a14:	00bf3034 	movhi	r2,64704
 1026a18:	1885883a 	add	r2,r3,r2
 1026a1c:	d8800e15 	stw	r2,56(sp)
 1026a20:	30032e26 	beq	r6,zero,10276dc <_dtoa_r+0x1178>
 1026a24:	d8c00517 	ldw	r3,20(sp)
 1026a28:	da800617 	ldw	r10,24(sp)
 1026a2c:	d8c01215 	stw	r3,72(sp)
 1026a30:	d9000b17 	ldw	r4,44(sp)
 1026a34:	2003b026 	beq	r4,zero,10278f8 <_dtoa_r+0x1394>
 1026a38:	50bfffc4 	addi	r2,r10,-1
 1026a3c:	100490fa 	slli	r2,r2,3
 1026a40:	00c040f4 	movhi	r3,259
 1026a44:	18d18104 	addi	r3,r3,17924
 1026a48:	1885883a 	add	r2,r3,r2
 1026a4c:	11800017 	ldw	r6,0(r2)
 1026a50:	11c00117 	ldw	r7,4(r2)
 1026a54:	d8800717 	ldw	r2,28(sp)
 1026a58:	0009883a 	mov	r4,zero
 1026a5c:	014ff834 	movhi	r5,16352
 1026a60:	da801615 	stw	r10,88(sp)
 1026a64:	15c00044 	addi	r23,r2,1
 1026a68:	102f7480 	call	102f748 <__divdf3>
 1026a6c:	d9c00e17 	ldw	r7,56(sp)
 1026a70:	880d883a 	mov	r6,r17
 1026a74:	1009883a 	mov	r4,r2
 1026a78:	180b883a 	mov	r5,r3
 1026a7c:	103097c0 	call	103097c <__subdf3>
 1026a80:	a80b883a 	mov	r5,r21
 1026a84:	a009883a 	mov	r4,r20
 1026a88:	d8c01015 	stw	r3,64(sp)
 1026a8c:	d8800e15 	stw	r2,56(sp)
 1026a90:	103124c0 	call	103124c <__fixdfsi>
 1026a94:	1009883a 	mov	r4,r2
 1026a98:	d8801715 	stw	r2,92(sp)
 1026a9c:	10312d40 	call	10312d4 <__floatsidf>
 1026aa0:	a009883a 	mov	r4,r20
 1026aa4:	a80b883a 	mov	r5,r21
 1026aa8:	100d883a 	mov	r6,r2
 1026aac:	180f883a 	mov	r7,r3
 1026ab0:	103097c0 	call	103097c <__subdf3>
 1026ab4:	da001717 	ldw	r8,92(sp)
 1026ab8:	1829883a 	mov	r20,r3
 1026abc:	d8c00717 	ldw	r3,28(sp)
 1026ac0:	d9000e17 	ldw	r4,56(sp)
 1026ac4:	d9401017 	ldw	r5,64(sp)
 1026ac8:	42000c04 	addi	r8,r8,48
 1026acc:	1023883a 	mov	r17,r2
 1026ad0:	1a000005 	stb	r8,0(r3)
 1026ad4:	880d883a 	mov	r6,r17
 1026ad8:	a00f883a 	mov	r7,r20
 1026adc:	402b883a 	mov	r21,r8
 1026ae0:	10300980 	call	1030098 <__gedf2>
 1026ae4:	00844516 	blt	zero,r2,1027bfc <_dtoa_r+0x1698>
 1026ae8:	0009883a 	mov	r4,zero
 1026aec:	014ffc34 	movhi	r5,16368
 1026af0:	880d883a 	mov	r6,r17
 1026af4:	a00f883a 	mov	r7,r20
 1026af8:	103097c0 	call	103097c <__subdf3>
 1026afc:	d9000e17 	ldw	r4,56(sp)
 1026b00:	d9401017 	ldw	r5,64(sp)
 1026b04:	100d883a 	mov	r6,r2
 1026b08:	180f883a 	mov	r7,r3
 1026b0c:	10300980 	call	1030098 <__gedf2>
 1026b10:	da801617 	ldw	r10,88(sp)
 1026b14:	00843616 	blt	zero,r2,1027bf0 <_dtoa_r+0x168c>
 1026b18:	00800044 	movi	r2,1
 1026b1c:	12806e0e 	bge	r2,r10,1026cd8 <_dtoa_r+0x774>
 1026b20:	d9000717 	ldw	r4,28(sp)
 1026b24:	dd801315 	stw	r22,76(sp)
 1026b28:	dc001115 	stw	r16,68(sp)
 1026b2c:	2295883a 	add	r10,r4,r10
 1026b30:	dcc01415 	stw	r19,80(sp)
 1026b34:	502d883a 	mov	r22,r10
 1026b38:	dcc01017 	ldw	r19,64(sp)
 1026b3c:	b821883a 	mov	r16,r23
 1026b40:	dc801015 	stw	r18,64(sp)
 1026b44:	dc800e17 	ldw	r18,56(sp)
 1026b48:	00000906 	br	1026b70 <_dtoa_r+0x60c>
 1026b4c:	103097c0 	call	103097c <__subdf3>
 1026b50:	1009883a 	mov	r4,r2
 1026b54:	180b883a 	mov	r5,r3
 1026b58:	900d883a 	mov	r6,r18
 1026b5c:	980f883a 	mov	r7,r19
 1026b60:	10301780 	call	1030178 <__ledf2>
 1026b64:	10040e16 	blt	r2,zero,1027ba0 <_dtoa_r+0x163c>
 1026b68:	b821883a 	mov	r16,r23
 1026b6c:	bd841026 	beq	r23,r22,1027bb0 <_dtoa_r+0x164c>
 1026b70:	9009883a 	mov	r4,r18
 1026b74:	980b883a 	mov	r5,r19
 1026b78:	000d883a 	mov	r6,zero
 1026b7c:	01d00934 	movhi	r7,16420
 1026b80:	10302580 	call	1030258 <__muldf3>
 1026b84:	000d883a 	mov	r6,zero
 1026b88:	01d00934 	movhi	r7,16420
 1026b8c:	8809883a 	mov	r4,r17
 1026b90:	a00b883a 	mov	r5,r20
 1026b94:	1025883a 	mov	r18,r2
 1026b98:	1827883a 	mov	r19,r3
 1026b9c:	10302580 	call	1030258 <__muldf3>
 1026ba0:	180b883a 	mov	r5,r3
 1026ba4:	1009883a 	mov	r4,r2
 1026ba8:	1823883a 	mov	r17,r3
 1026bac:	1029883a 	mov	r20,r2
 1026bb0:	103124c0 	call	103124c <__fixdfsi>
 1026bb4:	1009883a 	mov	r4,r2
 1026bb8:	102b883a 	mov	r21,r2
 1026bbc:	10312d40 	call	10312d4 <__floatsidf>
 1026bc0:	a009883a 	mov	r4,r20
 1026bc4:	880b883a 	mov	r5,r17
 1026bc8:	100d883a 	mov	r6,r2
 1026bcc:	180f883a 	mov	r7,r3
 1026bd0:	103097c0 	call	103097c <__subdf3>
 1026bd4:	ad400c04 	addi	r21,r21,48
 1026bd8:	1009883a 	mov	r4,r2
 1026bdc:	180b883a 	mov	r5,r3
 1026be0:	900d883a 	mov	r6,r18
 1026be4:	980f883a 	mov	r7,r19
 1026be8:	85400005 	stb	r21,0(r16)
 1026bec:	1023883a 	mov	r17,r2
 1026bf0:	1829883a 	mov	r20,r3
 1026bf4:	10301780 	call	1030178 <__ledf2>
 1026bf8:	bdc00044 	addi	r23,r23,1
 1026bfc:	0009883a 	mov	r4,zero
 1026c00:	014ffc34 	movhi	r5,16368
 1026c04:	880d883a 	mov	r6,r17
 1026c08:	a00f883a 	mov	r7,r20
 1026c0c:	103fcf0e 	bge	r2,zero,1026b4c <_gp+0xfffe8868>
 1026c10:	d9801217 	ldw	r6,72(sp)
 1026c14:	dc001117 	ldw	r16,68(sp)
 1026c18:	d9800515 	stw	r6,20(sp)
 1026c1c:	8009883a 	mov	r4,r16
 1026c20:	e00b883a 	mov	r5,fp
 1026c24:	1029c340 	call	1029c34 <_Bfree>
 1026c28:	d8c00517 	ldw	r3,20(sp)
 1026c2c:	d9002317 	ldw	r4,140(sp)
 1026c30:	d9802517 	ldw	r6,148(sp)
 1026c34:	b8000005 	stb	zero,0(r23)
 1026c38:	18800044 	addi	r2,r3,1
 1026c3c:	20800015 	stw	r2,0(r4)
 1026c40:	30027226 	beq	r6,zero,102760c <_dtoa_r+0x10a8>
 1026c44:	35c00015 	stw	r23,0(r6)
 1026c48:	d8800717 	ldw	r2,28(sp)
 1026c4c:	003e7406 	br	1026620 <_gp+0xfffe833c>
 1026c50:	00800434 	movhi	r2,16
 1026c54:	10bfffc4 	addi	r2,r2,-1
 1026c58:	a8aa703a 	and	r21,r21,r2
 1026c5c:	a83e801e 	bne	r21,zero,1026660 <_gp+0xfffe837c>
 1026c60:	008040f4 	movhi	r2,259
 1026c64:	10916204 	addi	r2,r2,17800
 1026c68:	003e7f06 	br	1026668 <_gp+0xfffe8384>
 1026c6c:	10c00204 	addi	r3,r2,8
 1026c70:	003e8206 	br	102667c <_gp+0xfffe8398>
 1026c74:	01400434 	movhi	r5,16
 1026c78:	297fffc4 	addi	r5,r5,-1
 1026c7c:	994a703a 	and	r5,r19,r5
 1026c80:	9009883a 	mov	r4,r18
 1026c84:	8c7f0044 	addi	r17,r17,-1023
 1026c88:	294ffc34 	orhi	r5,r5,16368
 1026c8c:	dd000217 	ldw	r20,8(sp)
 1026c90:	d8000f15 	stw	zero,60(sp)
 1026c94:	003e9f06 	br	1026714 <_gp+0xfffe8430>
 1026c98:	008040f4 	movhi	r2,259
 1026c9c:	10915104 	addi	r2,r2,17732
 1026ca0:	003e5f06 	br	1026620 <_gp+0xfffe833c>
 1026ca4:	80001115 	stw	zero,68(r16)
 1026ca8:	8009883a 	mov	r4,r16
 1026cac:	000b883a 	mov	r5,zero
 1026cb0:	1029b8c0 	call	1029b8c <_Balloc>
 1026cb4:	01bfffc4 	movi	r6,-1
 1026cb8:	d8800715 	stw	r2,28(sp)
 1026cbc:	80801015 	stw	r2,64(r16)
 1026cc0:	00800044 	movi	r2,1
 1026cc4:	d9800615 	stw	r6,24(sp)
 1026cc8:	d8800b15 	stw	r2,44(sp)
 1026ccc:	d8002215 	stw	zero,136(sp)
 1026cd0:	d9800d15 	stw	r6,52(sp)
 1026cd4:	d8000315 	stw	zero,12(sp)
 1026cd8:	d8800117 	ldw	r2,4(sp)
 1026cdc:	10008e16 	blt	r2,zero,1026f18 <_dtoa_r+0x9b4>
 1026ce0:	d9000517 	ldw	r4,20(sp)
 1026ce4:	00c00384 	movi	r3,14
 1026ce8:	19008b16 	blt	r3,r4,1026f18 <_dtoa_r+0x9b4>
 1026cec:	200490fa 	slli	r2,r4,3
 1026cf0:	00c040f4 	movhi	r3,259
 1026cf4:	d9802217 	ldw	r6,136(sp)
 1026cf8:	18d18104 	addi	r3,r3,17924
 1026cfc:	1885883a 	add	r2,r3,r2
 1026d00:	14400017 	ldw	r17,0(r2)
 1026d04:	15000117 	ldw	r20,4(r2)
 1026d08:	3001c716 	blt	r6,zero,1027428 <_dtoa_r+0xec4>
 1026d0c:	880d883a 	mov	r6,r17
 1026d10:	a00f883a 	mov	r7,r20
 1026d14:	9009883a 	mov	r4,r18
 1026d18:	980b883a 	mov	r5,r19
 1026d1c:	102f7480 	call	102f748 <__divdf3>
 1026d20:	180b883a 	mov	r5,r3
 1026d24:	1009883a 	mov	r4,r2
 1026d28:	103124c0 	call	103124c <__fixdfsi>
 1026d2c:	1009883a 	mov	r4,r2
 1026d30:	102d883a 	mov	r22,r2
 1026d34:	10312d40 	call	10312d4 <__floatsidf>
 1026d38:	1009883a 	mov	r4,r2
 1026d3c:	180b883a 	mov	r5,r3
 1026d40:	880d883a 	mov	r6,r17
 1026d44:	a00f883a 	mov	r7,r20
 1026d48:	10302580 	call	1030258 <__muldf3>
 1026d4c:	9009883a 	mov	r4,r18
 1026d50:	980b883a 	mov	r5,r19
 1026d54:	100d883a 	mov	r6,r2
 1026d58:	180f883a 	mov	r7,r3
 1026d5c:	103097c0 	call	103097c <__subdf3>
 1026d60:	d9000717 	ldw	r4,28(sp)
 1026d64:	d9800617 	ldw	r6,24(sp)
 1026d68:	180b883a 	mov	r5,r3
 1026d6c:	b0c00c04 	addi	r3,r22,48
 1026d70:	20c00005 	stb	r3,0(r4)
 1026d74:	25c00044 	addi	r23,r4,1
 1026d78:	01000044 	movi	r4,1
 1026d7c:	1011883a 	mov	r8,r2
 1026d80:	2807883a 	mov	r3,r5
 1026d84:	31003d26 	beq	r6,r4,1026e7c <_dtoa_r+0x918>
 1026d88:	000d883a 	mov	r6,zero
 1026d8c:	01d00934 	movhi	r7,16420
 1026d90:	1009883a 	mov	r4,r2
 1026d94:	10302580 	call	1030258 <__muldf3>
 1026d98:	1009883a 	mov	r4,r2
 1026d9c:	180b883a 	mov	r5,r3
 1026da0:	000d883a 	mov	r6,zero
 1026da4:	000f883a 	mov	r7,zero
 1026da8:	1027883a 	mov	r19,r2
 1026dac:	182b883a 	mov	r21,r3
 1026db0:	10300140 	call	1030014 <__eqdf2>
 1026db4:	103f9926 	beq	r2,zero,1026c1c <_gp+0xfffe8938>
 1026db8:	d8c00617 	ldw	r3,24(sp)
 1026dbc:	d9000717 	ldw	r4,28(sp)
 1026dc0:	b825883a 	mov	r18,r23
 1026dc4:	18bfffc4 	addi	r2,r3,-1
 1026dc8:	20ad883a 	add	r22,r4,r2
 1026dcc:	dc000315 	stw	r16,12(sp)
 1026dd0:	00000a06 	br	1026dfc <_dtoa_r+0x898>
 1026dd4:	10302580 	call	1030258 <__muldf3>
 1026dd8:	1009883a 	mov	r4,r2
 1026ddc:	180b883a 	mov	r5,r3
 1026de0:	000d883a 	mov	r6,zero
 1026de4:	000f883a 	mov	r7,zero
 1026de8:	1027883a 	mov	r19,r2
 1026dec:	182b883a 	mov	r21,r3
 1026df0:	b825883a 	mov	r18,r23
 1026df4:	10300140 	call	1030014 <__eqdf2>
 1026df8:	10022626 	beq	r2,zero,1027694 <_dtoa_r+0x1130>
 1026dfc:	880d883a 	mov	r6,r17
 1026e00:	a00f883a 	mov	r7,r20
 1026e04:	9809883a 	mov	r4,r19
 1026e08:	a80b883a 	mov	r5,r21
 1026e0c:	102f7480 	call	102f748 <__divdf3>
 1026e10:	180b883a 	mov	r5,r3
 1026e14:	1009883a 	mov	r4,r2
 1026e18:	103124c0 	call	103124c <__fixdfsi>
 1026e1c:	1009883a 	mov	r4,r2
 1026e20:	1021883a 	mov	r16,r2
 1026e24:	10312d40 	call	10312d4 <__floatsidf>
 1026e28:	1009883a 	mov	r4,r2
 1026e2c:	180b883a 	mov	r5,r3
 1026e30:	880d883a 	mov	r6,r17
 1026e34:	a00f883a 	mov	r7,r20
 1026e38:	10302580 	call	1030258 <__muldf3>
 1026e3c:	9809883a 	mov	r4,r19
 1026e40:	a80b883a 	mov	r5,r21
 1026e44:	100d883a 	mov	r6,r2
 1026e48:	180f883a 	mov	r7,r3
 1026e4c:	103097c0 	call	103097c <__subdf3>
 1026e50:	82000c04 	addi	r8,r16,48
 1026e54:	92000005 	stb	r8,0(r18)
 1026e58:	1009883a 	mov	r4,r2
 1026e5c:	180b883a 	mov	r5,r3
 1026e60:	000d883a 	mov	r6,zero
 1026e64:	01d00934 	movhi	r7,16420
 1026e68:	1011883a 	mov	r8,r2
 1026e6c:	bdc00044 	addi	r23,r23,1
 1026e70:	95bfd81e 	bne	r18,r22,1026dd4 <_gp+0xfffe8af0>
 1026e74:	802d883a 	mov	r22,r16
 1026e78:	dc000317 	ldw	r16,12(sp)
 1026e7c:	4009883a 	mov	r4,r8
 1026e80:	180b883a 	mov	r5,r3
 1026e84:	400d883a 	mov	r6,r8
 1026e88:	180f883a 	mov	r7,r3
 1026e8c:	102eeac0 	call	102eeac <__adddf3>
 1026e90:	8809883a 	mov	r4,r17
 1026e94:	a00b883a 	mov	r5,r20
 1026e98:	100d883a 	mov	r6,r2
 1026e9c:	180f883a 	mov	r7,r3
 1026ea0:	1027883a 	mov	r19,r2
 1026ea4:	1825883a 	mov	r18,r3
 1026ea8:	10301780 	call	1030178 <__ledf2>
 1026eac:	10000816 	blt	r2,zero,1026ed0 <_dtoa_r+0x96c>
 1026eb0:	8809883a 	mov	r4,r17
 1026eb4:	a00b883a 	mov	r5,r20
 1026eb8:	980d883a 	mov	r6,r19
 1026ebc:	900f883a 	mov	r7,r18
 1026ec0:	10300140 	call	1030014 <__eqdf2>
 1026ec4:	103f551e 	bne	r2,zero,1026c1c <_gp+0xfffe8938>
 1026ec8:	b580004c 	andi	r22,r22,1
 1026ecc:	b03f5326 	beq	r22,zero,1026c1c <_gp+0xfffe8938>
 1026ed0:	bd7fffc3 	ldbu	r21,-1(r23)
 1026ed4:	b8bfffc4 	addi	r2,r23,-1
 1026ed8:	1007883a 	mov	r3,r2
 1026edc:	01400e44 	movi	r5,57
 1026ee0:	d9800717 	ldw	r6,28(sp)
 1026ee4:	00000506 	br	1026efc <_dtoa_r+0x998>
 1026ee8:	18ffffc4 	addi	r3,r3,-1
 1026eec:	30825e26 	beq	r6,r2,1027868 <_dtoa_r+0x1304>
 1026ef0:	1d400003 	ldbu	r21,0(r3)
 1026ef4:	102f883a 	mov	r23,r2
 1026ef8:	10bfffc4 	addi	r2,r2,-1
 1026efc:	a9003fcc 	andi	r4,r21,255
 1026f00:	2100201c 	xori	r4,r4,128
 1026f04:	213fe004 	addi	r4,r4,-128
 1026f08:	217ff726 	beq	r4,r5,1026ee8 <_gp+0xfffe8c04>
 1026f0c:	aa000044 	addi	r8,r21,1
 1026f10:	12000005 	stb	r8,0(r2)
 1026f14:	003f4106 	br	1026c1c <_gp+0xfffe8938>
 1026f18:	d8c00b17 	ldw	r3,44(sp)
 1026f1c:	18006726 	beq	r3,zero,10270bc <_dtoa_r+0xb58>
 1026f20:	d9000317 	ldw	r4,12(sp)
 1026f24:	00c00044 	movi	r3,1
 1026f28:	19016a0e 	bge	r3,r4,10274d4 <_dtoa_r+0xf70>
 1026f2c:	d8800617 	ldw	r2,24(sp)
 1026f30:	d8c00917 	ldw	r3,36(sp)
 1026f34:	157fffc4 	addi	r21,r2,-1
 1026f38:	1d420716 	blt	r3,r21,1027758 <_dtoa_r+0x11f4>
 1026f3c:	1d6bc83a 	sub	r21,r3,r21
 1026f40:	d8800617 	ldw	r2,24(sp)
 1026f44:	1002c716 	blt	r2,zero,1027a64 <_dtoa_r+0x1500>
 1026f48:	dd000817 	ldw	r20,32(sp)
 1026f4c:	d8800617 	ldw	r2,24(sp)
 1026f50:	d9800817 	ldw	r6,32(sp)
 1026f54:	8009883a 	mov	r4,r16
 1026f58:	01400044 	movi	r5,1
 1026f5c:	308d883a 	add	r6,r6,r2
 1026f60:	d9800815 	stw	r6,32(sp)
 1026f64:	b0ad883a 	add	r22,r22,r2
 1026f68:	1029f8c0 	call	1029f8c <__i2b>
 1026f6c:	1023883a 	mov	r17,r2
 1026f70:	a0000826 	beq	r20,zero,1026f94 <_dtoa_r+0xa30>
 1026f74:	0580070e 	bge	zero,r22,1026f94 <_dtoa_r+0xa30>
 1026f78:	b005883a 	mov	r2,r22
 1026f7c:	a5812016 	blt	r20,r22,1027400 <_dtoa_r+0xe9c>
 1026f80:	d8c00817 	ldw	r3,32(sp)
 1026f84:	a0a9c83a 	sub	r20,r20,r2
 1026f88:	b0adc83a 	sub	r22,r22,r2
 1026f8c:	1887c83a 	sub	r3,r3,r2
 1026f90:	d8c00815 	stw	r3,32(sp)
 1026f94:	d9000917 	ldw	r4,36(sp)
 1026f98:	0100140e 	bge	zero,r4,1026fec <_dtoa_r+0xa88>
 1026f9c:	d9800b17 	ldw	r6,44(sp)
 1026fa0:	3001e526 	beq	r6,zero,1027738 <_dtoa_r+0x11d4>
 1026fa4:	05400e0e 	bge	zero,r21,1026fe0 <_dtoa_r+0xa7c>
 1026fa8:	880b883a 	mov	r5,r17
 1026fac:	8009883a 	mov	r4,r16
 1026fb0:	a80d883a 	mov	r6,r21
 1026fb4:	102a1c40 	call	102a1c4 <__pow5mult>
 1026fb8:	e00d883a 	mov	r6,fp
 1026fbc:	8009883a 	mov	r4,r16
 1026fc0:	100b883a 	mov	r5,r2
 1026fc4:	1023883a 	mov	r17,r2
 1026fc8:	1029fc80 	call	1029fc8 <__multiply>
 1026fcc:	102f883a 	mov	r23,r2
 1026fd0:	e00b883a 	mov	r5,fp
 1026fd4:	8009883a 	mov	r4,r16
 1026fd8:	1029c340 	call	1029c34 <_Bfree>
 1026fdc:	b839883a 	mov	fp,r23
 1026fe0:	d8800917 	ldw	r2,36(sp)
 1026fe4:	154dc83a 	sub	r6,r2,r21
 1026fe8:	3001281e 	bne	r6,zero,102748c <_dtoa_r+0xf28>
 1026fec:	05c00044 	movi	r23,1
 1026ff0:	8009883a 	mov	r4,r16
 1026ff4:	b80b883a 	mov	r5,r23
 1026ff8:	1029f8c0 	call	1029f8c <__i2b>
 1026ffc:	d8c00a17 	ldw	r3,40(sp)
 1027000:	102b883a 	mov	r21,r2
 1027004:	00c0310e 	bge	zero,r3,10270cc <_dtoa_r+0xb68>
 1027008:	8009883a 	mov	r4,r16
 102700c:	100b883a 	mov	r5,r2
 1027010:	180d883a 	mov	r6,r3
 1027014:	102a1c40 	call	102a1c4 <__pow5mult>
 1027018:	d9000317 	ldw	r4,12(sp)
 102701c:	102b883a 	mov	r21,r2
 1027020:	b9011f0e 	bge	r23,r4,10274a0 <_dtoa_r+0xf3c>
 1027024:	0027883a 	mov	r19,zero
 1027028:	a8800417 	ldw	r2,16(r21)
 102702c:	10800104 	addi	r2,r2,4
 1027030:	1085883a 	add	r2,r2,r2
 1027034:	1085883a 	add	r2,r2,r2
 1027038:	a885883a 	add	r2,r21,r2
 102703c:	11000017 	ldw	r4,0(r2)
 1027040:	1029e740 	call	1029e74 <__hi0bits>
 1027044:	00c00804 	movi	r3,32
 1027048:	1885c83a 	sub	r2,r3,r2
 102704c:	00002506 	br	10270e4 <_dtoa_r+0xb80>
 1027050:	01800044 	movi	r6,1
 1027054:	d9800c15 	stw	r6,48(sp)
 1027058:	003dec06 	br	102680c <_gp+0xfffe8528>
 102705c:	d8c00817 	ldw	r3,32(sp)
 1027060:	d9000517 	ldw	r4,20(sp)
 1027064:	d8000a15 	stw	zero,40(sp)
 1027068:	1907c83a 	sub	r3,r3,r4
 102706c:	010dc83a 	sub	r6,zero,r4
 1027070:	d8c00815 	stw	r3,32(sp)
 1027074:	d9800915 	stw	r6,36(sp)
 1027078:	003ded06 	br	1026830 <_gp+0xfffe854c>
 102707c:	05adc83a 	sub	r22,zero,r22
 1027080:	dd800815 	stw	r22,32(sp)
 1027084:	002d883a 	mov	r22,zero
 1027088:	003de406 	br	102681c <_gp+0xfffe8538>
 102708c:	d9000517 	ldw	r4,20(sp)
 1027090:	10312d40 	call	10312d4 <__floatsidf>
 1027094:	1009883a 	mov	r4,r2
 1027098:	180b883a 	mov	r5,r3
 102709c:	b00d883a 	mov	r6,r22
 10270a0:	a80f883a 	mov	r7,r21
 10270a4:	10300140 	call	1030014 <__eqdf2>
 10270a8:	103dc726 	beq	r2,zero,10267c8 <_gp+0xfffe84e4>
 10270ac:	d8800517 	ldw	r2,20(sp)
 10270b0:	10bfffc4 	addi	r2,r2,-1
 10270b4:	d8800515 	stw	r2,20(sp)
 10270b8:	003dc306 	br	10267c8 <_gp+0xfffe84e4>
 10270bc:	dd400917 	ldw	r21,36(sp)
 10270c0:	dd000817 	ldw	r20,32(sp)
 10270c4:	0023883a 	mov	r17,zero
 10270c8:	003fa906 	br	1026f70 <_gp+0xfffe8c8c>
 10270cc:	d9800317 	ldw	r6,12(sp)
 10270d0:	b981670e 	bge	r23,r6,1027670 <_dtoa_r+0x110c>
 10270d4:	0027883a 	mov	r19,zero
 10270d8:	d8c00a17 	ldw	r3,40(sp)
 10270dc:	183fd21e 	bne	r3,zero,1027028 <_gp+0xfffe8d44>
 10270e0:	00800044 	movi	r2,1
 10270e4:	1585883a 	add	r2,r2,r22
 10270e8:	108007cc 	andi	r2,r2,31
 10270ec:	10005f26 	beq	r2,zero,102726c <_dtoa_r+0xd08>
 10270f0:	00c00804 	movi	r3,32
 10270f4:	1887c83a 	sub	r3,r3,r2
 10270f8:	01000104 	movi	r4,4
 10270fc:	20c2dd0e 	bge	r4,r3,1027c74 <_dtoa_r+0x1710>
 1027100:	d9000817 	ldw	r4,32(sp)
 1027104:	00c00704 	movi	r3,28
 1027108:	1885c83a 	sub	r2,r3,r2
 102710c:	2089883a 	add	r4,r4,r2
 1027110:	d9000815 	stw	r4,32(sp)
 1027114:	a0a9883a 	add	r20,r20,r2
 1027118:	b0ad883a 	add	r22,r22,r2
 102711c:	d8800817 	ldw	r2,32(sp)
 1027120:	0080050e 	bge	zero,r2,1027138 <_dtoa_r+0xbd4>
 1027124:	e00b883a 	mov	r5,fp
 1027128:	8009883a 	mov	r4,r16
 102712c:	100d883a 	mov	r6,r2
 1027130:	102a3040 	call	102a304 <__lshift>
 1027134:	1039883a 	mov	fp,r2
 1027138:	0580050e 	bge	zero,r22,1027150 <_dtoa_r+0xbec>
 102713c:	a80b883a 	mov	r5,r21
 1027140:	8009883a 	mov	r4,r16
 1027144:	b00d883a 	mov	r6,r22
 1027148:	102a3040 	call	102a304 <__lshift>
 102714c:	102b883a 	mov	r21,r2
 1027150:	d8c00c17 	ldw	r3,48(sp)
 1027154:	1801161e 	bne	r3,zero,10275b0 <_dtoa_r+0x104c>
 1027158:	d8c00617 	ldw	r3,24(sp)
 102715c:	00c12d0e 	bge	zero,r3,1027614 <_dtoa_r+0x10b0>
 1027160:	d8c00b17 	ldw	r3,44(sp)
 1027164:	1800571e 	bne	r3,zero,10272c4 <_dtoa_r+0xd60>
 1027168:	dc800717 	ldw	r18,28(sp)
 102716c:	dcc00617 	ldw	r19,24(sp)
 1027170:	9029883a 	mov	r20,r18
 1027174:	00000206 	br	1027180 <_dtoa_r+0xc1c>
 1027178:	1029c5c0 	call	1029c5c <__multadd>
 102717c:	1039883a 	mov	fp,r2
 1027180:	e009883a 	mov	r4,fp
 1027184:	a80b883a 	mov	r5,r21
 1027188:	10263640 	call	1026364 <quorem>
 102718c:	10800c04 	addi	r2,r2,48
 1027190:	90800005 	stb	r2,0(r18)
 1027194:	94800044 	addi	r18,r18,1
 1027198:	9507c83a 	sub	r3,r18,r20
 102719c:	8009883a 	mov	r4,r16
 10271a0:	e00b883a 	mov	r5,fp
 10271a4:	01800284 	movi	r6,10
 10271a8:	000f883a 	mov	r7,zero
 10271ac:	1cfff216 	blt	r3,r19,1027178 <_gp+0xfffe8e94>
 10271b0:	1011883a 	mov	r8,r2
 10271b4:	d8800617 	ldw	r2,24(sp)
 10271b8:	00822e0e 	bge	zero,r2,1027a74 <_dtoa_r+0x1510>
 10271bc:	d9000717 	ldw	r4,28(sp)
 10271c0:	0025883a 	mov	r18,zero
 10271c4:	20af883a 	add	r23,r4,r2
 10271c8:	e00b883a 	mov	r5,fp
 10271cc:	01800044 	movi	r6,1
 10271d0:	8009883a 	mov	r4,r16
 10271d4:	da001715 	stw	r8,92(sp)
 10271d8:	102a3040 	call	102a304 <__lshift>
 10271dc:	1009883a 	mov	r4,r2
 10271e0:	a80b883a 	mov	r5,r21
 10271e4:	1039883a 	mov	fp,r2
 10271e8:	102a44c0 	call	102a44c <__mcmp>
 10271ec:	da001717 	ldw	r8,92(sp)
 10271f0:	00816e0e 	bge	zero,r2,10277ac <_dtoa_r+0x1248>
 10271f4:	b93fffc3 	ldbu	r4,-1(r23)
 10271f8:	b8bfffc4 	addi	r2,r23,-1
 10271fc:	1007883a 	mov	r3,r2
 1027200:	01800e44 	movi	r6,57
 1027204:	d9c00717 	ldw	r7,28(sp)
 1027208:	00000506 	br	1027220 <_dtoa_r+0xcbc>
 102720c:	18ffffc4 	addi	r3,r3,-1
 1027210:	38811926 	beq	r7,r2,1027678 <_dtoa_r+0x1114>
 1027214:	19000003 	ldbu	r4,0(r3)
 1027218:	102f883a 	mov	r23,r2
 102721c:	10bfffc4 	addi	r2,r2,-1
 1027220:	21403fcc 	andi	r5,r4,255
 1027224:	2940201c 	xori	r5,r5,128
 1027228:	297fe004 	addi	r5,r5,-128
 102722c:	29bff726 	beq	r5,r6,102720c <_gp+0xfffe8f28>
 1027230:	21000044 	addi	r4,r4,1
 1027234:	11000005 	stb	r4,0(r2)
 1027238:	8009883a 	mov	r4,r16
 102723c:	a80b883a 	mov	r5,r21
 1027240:	1029c340 	call	1029c34 <_Bfree>
 1027244:	883e7526 	beq	r17,zero,1026c1c <_gp+0xfffe8938>
 1027248:	90000426 	beq	r18,zero,102725c <_dtoa_r+0xcf8>
 102724c:	94400326 	beq	r18,r17,102725c <_dtoa_r+0xcf8>
 1027250:	8009883a 	mov	r4,r16
 1027254:	900b883a 	mov	r5,r18
 1027258:	1029c340 	call	1029c34 <_Bfree>
 102725c:	8009883a 	mov	r4,r16
 1027260:	880b883a 	mov	r5,r17
 1027264:	1029c340 	call	1029c34 <_Bfree>
 1027268:	003e6c06 	br	1026c1c <_gp+0xfffe8938>
 102726c:	00800704 	movi	r2,28
 1027270:	d9800817 	ldw	r6,32(sp)
 1027274:	a0a9883a 	add	r20,r20,r2
 1027278:	b0ad883a 	add	r22,r22,r2
 102727c:	308d883a 	add	r6,r6,r2
 1027280:	d9800815 	stw	r6,32(sp)
 1027284:	003fa506 	br	102711c <_gp+0xfffe8e38>
 1027288:	013efb84 	movi	r4,-1042
 102728c:	246bc83a 	sub	r21,r4,r17
 1027290:	9548983a 	sll	r4,r18,r21
 1027294:	003d1806 	br	10266f8 <_gp+0xfffe8414>
 1027298:	d8000c15 	stw	zero,48(sp)
 102729c:	003d5b06 	br	102680c <_gp+0xfffe8528>
 10272a0:	880b883a 	mov	r5,r17
 10272a4:	8009883a 	mov	r4,r16
 10272a8:	01800284 	movi	r6,10
 10272ac:	000f883a 	mov	r7,zero
 10272b0:	1029c5c0 	call	1029c5c <__multadd>
 10272b4:	1023883a 	mov	r17,r2
 10272b8:	d8800d17 	ldw	r2,52(sp)
 10272bc:	0082550e 	bge	zero,r2,1027c14 <_dtoa_r+0x16b0>
 10272c0:	d8800615 	stw	r2,24(sp)
 10272c4:	0500050e 	bge	zero,r20,10272dc <_dtoa_r+0xd78>
 10272c8:	880b883a 	mov	r5,r17
 10272cc:	8009883a 	mov	r4,r16
 10272d0:	a00d883a 	mov	r6,r20
 10272d4:	102a3040 	call	102a304 <__lshift>
 10272d8:	1023883a 	mov	r17,r2
 10272dc:	98016a1e 	bne	r19,zero,1027888 <_dtoa_r+0x1324>
 10272e0:	8829883a 	mov	r20,r17
 10272e4:	d9000617 	ldw	r4,24(sp)
 10272e8:	dcc00717 	ldw	r19,28(sp)
 10272ec:	9480004c 	andi	r18,r18,1
 10272f0:	20bfffc4 	addi	r2,r4,-1
 10272f4:	9885883a 	add	r2,r19,r2
 10272f8:	d8800415 	stw	r2,16(sp)
 10272fc:	dc800615 	stw	r18,24(sp)
 1027300:	e009883a 	mov	r4,fp
 1027304:	a80b883a 	mov	r5,r21
 1027308:	10263640 	call	1026364 <quorem>
 102730c:	e009883a 	mov	r4,fp
 1027310:	880b883a 	mov	r5,r17
 1027314:	102f883a 	mov	r23,r2
 1027318:	102a44c0 	call	102a44c <__mcmp>
 102731c:	8009883a 	mov	r4,r16
 1027320:	a80b883a 	mov	r5,r21
 1027324:	a00d883a 	mov	r6,r20
 1027328:	102d883a 	mov	r22,r2
 102732c:	102a4ac0 	call	102a4ac <__mdiff>
 1027330:	1007883a 	mov	r3,r2
 1027334:	10800317 	ldw	r2,12(r2)
 1027338:	bc800c04 	addi	r18,r23,48
 102733c:	1000971e 	bne	r2,zero,102759c <_dtoa_r+0x1038>
 1027340:	180b883a 	mov	r5,r3
 1027344:	e009883a 	mov	r4,fp
 1027348:	d8c01515 	stw	r3,84(sp)
 102734c:	102a44c0 	call	102a44c <__mcmp>
 1027350:	d8c01517 	ldw	r3,84(sp)
 1027354:	8009883a 	mov	r4,r16
 1027358:	d8801515 	stw	r2,84(sp)
 102735c:	180b883a 	mov	r5,r3
 1027360:	1029c340 	call	1029c34 <_Bfree>
 1027364:	d8801517 	ldw	r2,84(sp)
 1027368:	1000041e 	bne	r2,zero,102737c <_dtoa_r+0xe18>
 102736c:	d9800317 	ldw	r6,12(sp)
 1027370:	3000021e 	bne	r6,zero,102737c <_dtoa_r+0xe18>
 1027374:	d8c00617 	ldw	r3,24(sp)
 1027378:	18007626 	beq	r3,zero,1027554 <_dtoa_r+0xff0>
 102737c:	b0005b16 	blt	r22,zero,10274ec <_dtoa_r+0xf88>
 1027380:	b000041e 	bne	r22,zero,1027394 <_dtoa_r+0xe30>
 1027384:	d9000317 	ldw	r4,12(sp)
 1027388:	2000021e 	bne	r4,zero,1027394 <_dtoa_r+0xe30>
 102738c:	d8c00617 	ldw	r3,24(sp)
 1027390:	18005626 	beq	r3,zero,10274ec <_dtoa_r+0xf88>
 1027394:	00814d16 	blt	zero,r2,10278cc <_dtoa_r+0x1368>
 1027398:	d8c00417 	ldw	r3,16(sp)
 102739c:	9d800044 	addi	r22,r19,1
 10273a0:	9c800005 	stb	r18,0(r19)
 10273a4:	b02f883a 	mov	r23,r22
 10273a8:	98c14c26 	beq	r19,r3,10278dc <_dtoa_r+0x1378>
 10273ac:	e00b883a 	mov	r5,fp
 10273b0:	8009883a 	mov	r4,r16
 10273b4:	01800284 	movi	r6,10
 10273b8:	000f883a 	mov	r7,zero
 10273bc:	1029c5c0 	call	1029c5c <__multadd>
 10273c0:	1039883a 	mov	fp,r2
 10273c4:	8d006d26 	beq	r17,r20,102757c <_dtoa_r+0x1018>
 10273c8:	880b883a 	mov	r5,r17
 10273cc:	01800284 	movi	r6,10
 10273d0:	000f883a 	mov	r7,zero
 10273d4:	8009883a 	mov	r4,r16
 10273d8:	1029c5c0 	call	1029c5c <__multadd>
 10273dc:	a00b883a 	mov	r5,r20
 10273e0:	8009883a 	mov	r4,r16
 10273e4:	01800284 	movi	r6,10
 10273e8:	000f883a 	mov	r7,zero
 10273ec:	1023883a 	mov	r17,r2
 10273f0:	1029c5c0 	call	1029c5c <__multadd>
 10273f4:	1029883a 	mov	r20,r2
 10273f8:	b027883a 	mov	r19,r22
 10273fc:	003fc006 	br	1027300 <_gp+0xfffe901c>
 1027400:	a005883a 	mov	r2,r20
 1027404:	003ede06 	br	1026f80 <_gp+0xfffe8c9c>
 1027408:	01000044 	movi	r4,1
 102740c:	d9000b15 	stw	r4,44(sp)
 1027410:	d9802217 	ldw	r6,136(sp)
 1027414:	0180dc0e 	bge	zero,r6,1027788 <_dtoa_r+0x1224>
 1027418:	3023883a 	mov	r17,r6
 102741c:	d9800d15 	stw	r6,52(sp)
 1027420:	d9800615 	stw	r6,24(sp)
 1027424:	003d1e06 	br	10268a0 <_gp+0xfffe85bc>
 1027428:	d8800617 	ldw	r2,24(sp)
 102742c:	00be3716 	blt	zero,r2,1026d0c <_gp+0xfffe8a28>
 1027430:	1000be1e 	bne	r2,zero,102772c <_dtoa_r+0x11c8>
 1027434:	8809883a 	mov	r4,r17
 1027438:	a00b883a 	mov	r5,r20
 102743c:	000d883a 	mov	r6,zero
 1027440:	01d00534 	movhi	r7,16404
 1027444:	10302580 	call	1030258 <__muldf3>
 1027448:	1009883a 	mov	r4,r2
 102744c:	180b883a 	mov	r5,r3
 1027450:	900d883a 	mov	r6,r18
 1027454:	980f883a 	mov	r7,r19
 1027458:	10300980 	call	1030098 <__gedf2>
 102745c:	002b883a 	mov	r21,zero
 1027460:	0023883a 	mov	r17,zero
 1027464:	10007a16 	blt	r2,zero,1027650 <_dtoa_r+0x10ec>
 1027468:	d9002217 	ldw	r4,136(sp)
 102746c:	ddc00717 	ldw	r23,28(sp)
 1027470:	0108303a 	nor	r4,zero,r4
 1027474:	d9000515 	stw	r4,20(sp)
 1027478:	8009883a 	mov	r4,r16
 102747c:	a80b883a 	mov	r5,r21
 1027480:	1029c340 	call	1029c34 <_Bfree>
 1027484:	883f751e 	bne	r17,zero,102725c <_gp+0xfffe8f78>
 1027488:	003de406 	br	1026c1c <_gp+0xfffe8938>
 102748c:	e00b883a 	mov	r5,fp
 1027490:	8009883a 	mov	r4,r16
 1027494:	102a1c40 	call	102a1c4 <__pow5mult>
 1027498:	1039883a 	mov	fp,r2
 102749c:	003ed306 	br	1026fec <_gp+0xfffe8d08>
 10274a0:	903ee01e 	bne	r18,zero,1027024 <_gp+0xfffe8d40>
 10274a4:	00800434 	movhi	r2,16
 10274a8:	10bfffc4 	addi	r2,r2,-1
 10274ac:	9884703a 	and	r2,r19,r2
 10274b0:	103f081e 	bne	r2,zero,10270d4 <_gp+0xfffe8df0>
 10274b4:	9cdffc2c 	andhi	r19,r19,32752
 10274b8:	983f0626 	beq	r19,zero,10270d4 <_gp+0xfffe8df0>
 10274bc:	d8800817 	ldw	r2,32(sp)
 10274c0:	b5800044 	addi	r22,r22,1
 10274c4:	04c00044 	movi	r19,1
 10274c8:	10800044 	addi	r2,r2,1
 10274cc:	d8800815 	stw	r2,32(sp)
 10274d0:	003f0106 	br	10270d8 <_gp+0xfffe8df4>
 10274d4:	d9800f17 	ldw	r6,60(sp)
 10274d8:	30016826 	beq	r6,zero,1027a7c <_dtoa_r+0x1518>
 10274dc:	10810cc4 	addi	r2,r2,1075
 10274e0:	dd400917 	ldw	r21,36(sp)
 10274e4:	dd000817 	ldw	r20,32(sp)
 10274e8:	003e9906 	br	1026f50 <_gp+0xfffe8c6c>
 10274ec:	9011883a 	mov	r8,r18
 10274f0:	4007883a 	mov	r3,r8
 10274f4:	e02d883a 	mov	r22,fp
 10274f8:	0080100e 	bge	zero,r2,102753c <_dtoa_r+0xfd8>
 10274fc:	01800044 	movi	r6,1
 1027500:	8009883a 	mov	r4,r16
 1027504:	e00b883a 	mov	r5,fp
 1027508:	da001515 	stw	r8,84(sp)
 102750c:	da001715 	stw	r8,92(sp)
 1027510:	102a3040 	call	102a304 <__lshift>
 1027514:	1009883a 	mov	r4,r2
 1027518:	a80b883a 	mov	r5,r21
 102751c:	102d883a 	mov	r22,r2
 1027520:	102a44c0 	call	102a44c <__mcmp>
 1027524:	d8c01517 	ldw	r3,84(sp)
 1027528:	da001717 	ldw	r8,92(sp)
 102752c:	0081a50e 	bge	zero,r2,1027bc4 <_dtoa_r+0x1660>
 1027530:	00800e44 	movi	r2,57
 1027534:	40817b26 	beq	r8,r2,1027b24 <_dtoa_r+0x15c0>
 1027538:	40c00044 	addi	r3,r8,1
 102753c:	8825883a 	mov	r18,r17
 1027540:	9dc00044 	addi	r23,r19,1
 1027544:	98c00005 	stb	r3,0(r19)
 1027548:	a023883a 	mov	r17,r20
 102754c:	b039883a 	mov	fp,r22
 1027550:	003f3906 	br	1027238 <_gp+0xfffe8f54>
 1027554:	00800e44 	movi	r2,57
 1027558:	9011883a 	mov	r8,r18
 102755c:	90817226 	beq	r18,r2,1027b28 <_dtoa_r+0x15c4>
 1027560:	0580010e 	bge	zero,r22,1027568 <_dtoa_r+0x1004>
 1027564:	ba000c44 	addi	r8,r23,49
 1027568:	8825883a 	mov	r18,r17
 102756c:	9dc00044 	addi	r23,r19,1
 1027570:	9a000005 	stb	r8,0(r19)
 1027574:	a023883a 	mov	r17,r20
 1027578:	003f2f06 	br	1027238 <_gp+0xfffe8f54>
 102757c:	880b883a 	mov	r5,r17
 1027580:	8009883a 	mov	r4,r16
 1027584:	01800284 	movi	r6,10
 1027588:	000f883a 	mov	r7,zero
 102758c:	1029c5c0 	call	1029c5c <__multadd>
 1027590:	1023883a 	mov	r17,r2
 1027594:	1029883a 	mov	r20,r2
 1027598:	003f9706 	br	10273f8 <_gp+0xfffe9114>
 102759c:	8009883a 	mov	r4,r16
 10275a0:	180b883a 	mov	r5,r3
 10275a4:	1029c340 	call	1029c34 <_Bfree>
 10275a8:	00800044 	movi	r2,1
 10275ac:	003f7306 	br	102737c <_gp+0xfffe9098>
 10275b0:	e009883a 	mov	r4,fp
 10275b4:	a80b883a 	mov	r5,r21
 10275b8:	102a44c0 	call	102a44c <__mcmp>
 10275bc:	103ee60e 	bge	r2,zero,1027158 <_gp+0xfffe8e74>
 10275c0:	8009883a 	mov	r4,r16
 10275c4:	e00b883a 	mov	r5,fp
 10275c8:	01800284 	movi	r6,10
 10275cc:	000f883a 	mov	r7,zero
 10275d0:	1029c5c0 	call	1029c5c <__multadd>
 10275d4:	d9000517 	ldw	r4,20(sp)
 10275d8:	d9800b17 	ldw	r6,44(sp)
 10275dc:	1039883a 	mov	fp,r2
 10275e0:	213fffc4 	addi	r4,r4,-1
 10275e4:	d9000515 	stw	r4,20(sp)
 10275e8:	303f2d1e 	bne	r6,zero,10272a0 <_gp+0xfffe8fbc>
 10275ec:	d9000d17 	ldw	r4,52(sp)
 10275f0:	0101780e 	bge	zero,r4,1027bd4 <_dtoa_r+0x1670>
 10275f4:	d9000615 	stw	r4,24(sp)
 10275f8:	003edb06 	br	1027168 <_gp+0xfffe8e84>
 10275fc:	00800084 	movi	r2,2
 1027600:	30818e1e 	bne	r6,r2,1027c3c <_dtoa_r+0x16d8>
 1027604:	d8000b15 	stw	zero,44(sp)
 1027608:	003f8106 	br	1027410 <_gp+0xfffe912c>
 102760c:	d8800717 	ldw	r2,28(sp)
 1027610:	003c0306 	br	1026620 <_gp+0xfffe833c>
 1027614:	d9000317 	ldw	r4,12(sp)
 1027618:	00800084 	movi	r2,2
 102761c:	113ed00e 	bge	r2,r4,1027160 <_gp+0xfffe8e7c>
 1027620:	d8c00617 	ldw	r3,24(sp)
 1027624:	183f901e 	bne	r3,zero,1027468 <_gp+0xfffe9184>
 1027628:	a80b883a 	mov	r5,r21
 102762c:	8009883a 	mov	r4,r16
 1027630:	01800144 	movi	r6,5
 1027634:	000f883a 	mov	r7,zero
 1027638:	1029c5c0 	call	1029c5c <__multadd>
 102763c:	e009883a 	mov	r4,fp
 1027640:	100b883a 	mov	r5,r2
 1027644:	102b883a 	mov	r21,r2
 1027648:	102a44c0 	call	102a44c <__mcmp>
 102764c:	00bf860e 	bge	zero,r2,1027468 <_gp+0xfffe9184>
 1027650:	d9800717 	ldw	r6,28(sp)
 1027654:	00800c44 	movi	r2,49
 1027658:	30800005 	stb	r2,0(r6)
 102765c:	d8800517 	ldw	r2,20(sp)
 1027660:	35c00044 	addi	r23,r6,1
 1027664:	10800044 	addi	r2,r2,1
 1027668:	d8800515 	stw	r2,20(sp)
 102766c:	003f8206 	br	1027478 <_gp+0xfffe9194>
 1027670:	903e981e 	bne	r18,zero,10270d4 <_gp+0xfffe8df0>
 1027674:	003f8b06 	br	10274a4 <_gp+0xfffe91c0>
 1027678:	d9800517 	ldw	r6,20(sp)
 102767c:	d8c00717 	ldw	r3,28(sp)
 1027680:	00800c44 	movi	r2,49
 1027684:	31800044 	addi	r6,r6,1
 1027688:	d9800515 	stw	r6,20(sp)
 102768c:	18800005 	stb	r2,0(r3)
 1027690:	003ee906 	br	1027238 <_gp+0xfffe8f54>
 1027694:	dc000317 	ldw	r16,12(sp)
 1027698:	003d6006 	br	1026c1c <_gp+0xfffe8938>
 102769c:	8809883a 	mov	r4,r17
 10276a0:	10312d40 	call	10312d4 <__floatsidf>
 10276a4:	a009883a 	mov	r4,r20
 10276a8:	a80b883a 	mov	r5,r21
 10276ac:	100d883a 	mov	r6,r2
 10276b0:	180f883a 	mov	r7,r3
 10276b4:	10302580 	call	1030258 <__muldf3>
 10276b8:	1009883a 	mov	r4,r2
 10276bc:	180b883a 	mov	r5,r3
 10276c0:	000d883a 	mov	r6,zero
 10276c4:	01d00734 	movhi	r7,16412
 10276c8:	102eeac0 	call	102eeac <__adddf3>
 10276cc:	1023883a 	mov	r17,r2
 10276d0:	00bf3034 	movhi	r2,64704
 10276d4:	1885883a 	add	r2,r3,r2
 10276d8:	d8800e15 	stw	r2,56(sp)
 10276dc:	a009883a 	mov	r4,r20
 10276e0:	a80b883a 	mov	r5,r21
 10276e4:	000d883a 	mov	r6,zero
 10276e8:	01d00534 	movhi	r7,16404
 10276ec:	103097c0 	call	103097c <__subdf3>
 10276f0:	d9c00e17 	ldw	r7,56(sp)
 10276f4:	1009883a 	mov	r4,r2
 10276f8:	180b883a 	mov	r5,r3
 10276fc:	880d883a 	mov	r6,r17
 1027700:	102b883a 	mov	r21,r2
 1027704:	1829883a 	mov	r20,r3
 1027708:	10300980 	call	1030098 <__gedf2>
 102770c:	00807716 	blt	zero,r2,10278ec <_dtoa_r+0x1388>
 1027710:	d8800e17 	ldw	r2,56(sp)
 1027714:	a809883a 	mov	r4,r21
 1027718:	a00b883a 	mov	r5,r20
 102771c:	11e0003c 	xorhi	r7,r2,32768
 1027720:	880d883a 	mov	r6,r17
 1027724:	10301780 	call	1030178 <__ledf2>
 1027728:	103d6b0e 	bge	r2,zero,1026cd8 <_gp+0xfffe89f4>
 102772c:	002b883a 	mov	r21,zero
 1027730:	0023883a 	mov	r17,zero
 1027734:	003f4c06 	br	1027468 <_gp+0xfffe9184>
 1027738:	d9800917 	ldw	r6,36(sp)
 102773c:	e00b883a 	mov	r5,fp
 1027740:	8009883a 	mov	r4,r16
 1027744:	102a1c40 	call	102a1c4 <__pow5mult>
 1027748:	1039883a 	mov	fp,r2
 102774c:	003e2706 	br	1026fec <_gp+0xfffe8d08>
 1027750:	d8000b15 	stw	zero,44(sp)
 1027754:	003c4906 	br	102687c <_gp+0xfffe8598>
 1027758:	d9000917 	ldw	r4,36(sp)
 102775c:	d9800a17 	ldw	r6,40(sp)
 1027760:	dd400915 	stw	r21,36(sp)
 1027764:	a905c83a 	sub	r2,r21,r4
 1027768:	308d883a 	add	r6,r6,r2
 102776c:	d9800a15 	stw	r6,40(sp)
 1027770:	002b883a 	mov	r21,zero
 1027774:	003df206 	br	1026f40 <_gp+0xfffe8c5c>
 1027778:	dc800e15 	stw	r18,56(sp)
 102777c:	982b883a 	mov	r21,r19
 1027780:	04400084 	movi	r17,2
 1027784:	003c7406 	br	1026958 <_gp+0xfffe8674>
 1027788:	04400044 	movi	r17,1
 102778c:	dc400d15 	stw	r17,52(sp)
 1027790:	dc400615 	stw	r17,24(sp)
 1027794:	dc402215 	stw	r17,136(sp)
 1027798:	80001115 	stw	zero,68(r16)
 102779c:	000b883a 	mov	r5,zero
 10277a0:	003c4a06 	br	10268cc <_gp+0xfffe85e8>
 10277a4:	3023883a 	mov	r17,r6
 10277a8:	003ffb06 	br	1027798 <_gp+0xfffe94b4>
 10277ac:	1000021e 	bne	r2,zero,10277b8 <_dtoa_r+0x1254>
 10277b0:	4200004c 	andi	r8,r8,1
 10277b4:	403e8f1e 	bne	r8,zero,10271f4 <_gp+0xfffe8f10>
 10277b8:	01000c04 	movi	r4,48
 10277bc:	00000106 	br	10277c4 <_dtoa_r+0x1260>
 10277c0:	102f883a 	mov	r23,r2
 10277c4:	b8bfffc4 	addi	r2,r23,-1
 10277c8:	10c00007 	ldb	r3,0(r2)
 10277cc:	193ffc26 	beq	r3,r4,10277c0 <_gp+0xfffe94dc>
 10277d0:	003e9906 	br	1027238 <_gp+0xfffe8f54>
 10277d4:	d9000517 	ldw	r4,20(sp)
 10277d8:	012fc83a 	sub	r23,zero,r4
 10277dc:	b800ad26 	beq	r23,zero,1027a94 <_dtoa_r+0x1530>
 10277e0:	b88003cc 	andi	r2,r23,15
 10277e4:	100490fa 	slli	r2,r2,3
 10277e8:	00c040f4 	movhi	r3,259
 10277ec:	18d18104 	addi	r3,r3,17924
 10277f0:	1885883a 	add	r2,r3,r2
 10277f4:	11800017 	ldw	r6,0(r2)
 10277f8:	11c00117 	ldw	r7,4(r2)
 10277fc:	b82fd13a 	srai	r23,r23,4
 1027800:	9009883a 	mov	r4,r18
 1027804:	980b883a 	mov	r5,r19
 1027808:	10302580 	call	1030258 <__muldf3>
 102780c:	1029883a 	mov	r20,r2
 1027810:	182b883a 	mov	r21,r3
 1027814:	b800f426 	beq	r23,zero,1027be8 <_dtoa_r+0x1684>
 1027818:	020040f4 	movhi	r8,259
 102781c:	42117704 	addi	r8,r8,17884
 1027820:	8029883a 	mov	r20,r16
 1027824:	04400084 	movi	r17,2
 1027828:	4021883a 	mov	r16,r8
 102782c:	b980004c 	andi	r6,r23,1
 1027830:	1009883a 	mov	r4,r2
 1027834:	b82fd07a 	srai	r23,r23,1
 1027838:	180b883a 	mov	r5,r3
 102783c:	30000426 	beq	r6,zero,1027850 <_dtoa_r+0x12ec>
 1027840:	81800017 	ldw	r6,0(r16)
 1027844:	81c00117 	ldw	r7,4(r16)
 1027848:	8c400044 	addi	r17,r17,1
 102784c:	10302580 	call	1030258 <__muldf3>
 1027850:	84000204 	addi	r16,r16,8
 1027854:	b83ff51e 	bne	r23,zero,102782c <_gp+0xfffe9548>
 1027858:	a021883a 	mov	r16,r20
 102785c:	182b883a 	mov	r21,r3
 1027860:	1029883a 	mov	r20,r2
 1027864:	003c5506 	br	10269bc <_gp+0xfffe86d8>
 1027868:	d9800517 	ldw	r6,20(sp)
 102786c:	d9000717 	ldw	r4,28(sp)
 1027870:	00c00c04 	movi	r3,48
 1027874:	31800044 	addi	r6,r6,1
 1027878:	d9800515 	stw	r6,20(sp)
 102787c:	20c00005 	stb	r3,0(r4)
 1027880:	02000c44 	movi	r8,49
 1027884:	003da206 	br	1026f10 <_gp+0xfffe8c2c>
 1027888:	89400117 	ldw	r5,4(r17)
 102788c:	8009883a 	mov	r4,r16
 1027890:	1029b8c0 	call	1029b8c <_Balloc>
 1027894:	89800417 	ldw	r6,16(r17)
 1027898:	11000304 	addi	r4,r2,12
 102789c:	89400304 	addi	r5,r17,12
 10278a0:	31800084 	addi	r6,r6,2
 10278a4:	318d883a 	add	r6,r6,r6
 10278a8:	318d883a 	add	r6,r6,r6
 10278ac:	1027883a 	mov	r19,r2
 10278b0:	10297d40 	call	10297d4 <memcpy>
 10278b4:	8009883a 	mov	r4,r16
 10278b8:	980b883a 	mov	r5,r19
 10278bc:	01800044 	movi	r6,1
 10278c0:	102a3040 	call	102a304 <__lshift>
 10278c4:	1029883a 	mov	r20,r2
 10278c8:	003e8606 	br	10272e4 <_gp+0xfffe9000>
 10278cc:	00800e44 	movi	r2,57
 10278d0:	90809526 	beq	r18,r2,1027b28 <_dtoa_r+0x15c4>
 10278d4:	92000044 	addi	r8,r18,1
 10278d8:	003f2306 	br	1027568 <_gp+0xfffe9284>
 10278dc:	9011883a 	mov	r8,r18
 10278e0:	8825883a 	mov	r18,r17
 10278e4:	a023883a 	mov	r17,r20
 10278e8:	003e3706 	br	10271c8 <_gp+0xfffe8ee4>
 10278ec:	002b883a 	mov	r21,zero
 10278f0:	0023883a 	mov	r17,zero
 10278f4:	003f5606 	br	1027650 <_gp+0xfffe936c>
 10278f8:	51bfffc4 	addi	r6,r10,-1
 10278fc:	300490fa 	slli	r2,r6,3
 1027900:	00c040f4 	movhi	r3,259
 1027904:	18d18104 	addi	r3,r3,17924
 1027908:	1885883a 	add	r2,r3,r2
 102790c:	d9c00e17 	ldw	r7,56(sp)
 1027910:	11000017 	ldw	r4,0(r2)
 1027914:	11400117 	ldw	r5,4(r2)
 1027918:	d8800717 	ldw	r2,28(sp)
 102791c:	d9801015 	stw	r6,64(sp)
 1027920:	880d883a 	mov	r6,r17
 1027924:	da801615 	stw	r10,88(sp)
 1027928:	15c00044 	addi	r23,r2,1
 102792c:	10302580 	call	1030258 <__muldf3>
 1027930:	a80b883a 	mov	r5,r21
 1027934:	a009883a 	mov	r4,r20
 1027938:	d8c01115 	stw	r3,68(sp)
 102793c:	d8800e15 	stw	r2,56(sp)
 1027940:	103124c0 	call	103124c <__fixdfsi>
 1027944:	1009883a 	mov	r4,r2
 1027948:	1023883a 	mov	r17,r2
 102794c:	10312d40 	call	10312d4 <__floatsidf>
 1027950:	a009883a 	mov	r4,r20
 1027954:	a80b883a 	mov	r5,r21
 1027958:	100d883a 	mov	r6,r2
 102795c:	180f883a 	mov	r7,r3
 1027960:	103097c0 	call	103097c <__subdf3>
 1027964:	1813883a 	mov	r9,r3
 1027968:	d8c00717 	ldw	r3,28(sp)
 102796c:	8c400c04 	addi	r17,r17,48
 1027970:	1011883a 	mov	r8,r2
 1027974:	1c400005 	stb	r17,0(r3)
 1027978:	da801617 	ldw	r10,88(sp)
 102797c:	00800044 	movi	r2,1
 1027980:	50802326 	beq	r10,r2,1027a10 <_dtoa_r+0x14ac>
 1027984:	d8800717 	ldw	r2,28(sp)
 1027988:	b82b883a 	mov	r21,r23
 102798c:	dc001315 	stw	r16,76(sp)
 1027990:	12a9883a 	add	r20,r2,r10
 1027994:	4807883a 	mov	r3,r9
 1027998:	4005883a 	mov	r2,r8
 102799c:	dc801415 	stw	r18,80(sp)
 10279a0:	000d883a 	mov	r6,zero
 10279a4:	01d00934 	movhi	r7,16420
 10279a8:	1009883a 	mov	r4,r2
 10279ac:	180b883a 	mov	r5,r3
 10279b0:	10302580 	call	1030258 <__muldf3>
 10279b4:	180b883a 	mov	r5,r3
 10279b8:	1009883a 	mov	r4,r2
 10279bc:	1821883a 	mov	r16,r3
 10279c0:	1025883a 	mov	r18,r2
 10279c4:	103124c0 	call	103124c <__fixdfsi>
 10279c8:	1009883a 	mov	r4,r2
 10279cc:	1023883a 	mov	r17,r2
 10279d0:	10312d40 	call	10312d4 <__floatsidf>
 10279d4:	9009883a 	mov	r4,r18
 10279d8:	800b883a 	mov	r5,r16
 10279dc:	100d883a 	mov	r6,r2
 10279e0:	180f883a 	mov	r7,r3
 10279e4:	8c400c04 	addi	r17,r17,48
 10279e8:	103097c0 	call	103097c <__subdf3>
 10279ec:	ad400044 	addi	r21,r21,1
 10279f0:	ac7fffc5 	stb	r17,-1(r21)
 10279f4:	ad3fea1e 	bne	r21,r20,10279a0 <_gp+0xfffe96bc>
 10279f8:	1813883a 	mov	r9,r3
 10279fc:	d8c01017 	ldw	r3,64(sp)
 1027a00:	dc001317 	ldw	r16,76(sp)
 1027a04:	dc801417 	ldw	r18,80(sp)
 1027a08:	1011883a 	mov	r8,r2
 1027a0c:	b8ef883a 	add	r23,r23,r3
 1027a10:	d9000e17 	ldw	r4,56(sp)
 1027a14:	d9401117 	ldw	r5,68(sp)
 1027a18:	000d883a 	mov	r6,zero
 1027a1c:	01cff834 	movhi	r7,16352
 1027a20:	da001715 	stw	r8,92(sp)
 1027a24:	da401515 	stw	r9,84(sp)
 1027a28:	102eeac0 	call	102eeac <__adddf3>
 1027a2c:	da001717 	ldw	r8,92(sp)
 1027a30:	da401517 	ldw	r9,84(sp)
 1027a34:	1009883a 	mov	r4,r2
 1027a38:	400d883a 	mov	r6,r8
 1027a3c:	480f883a 	mov	r7,r9
 1027a40:	180b883a 	mov	r5,r3
 1027a44:	10301780 	call	1030178 <__ledf2>
 1027a48:	da001717 	ldw	r8,92(sp)
 1027a4c:	da401517 	ldw	r9,84(sp)
 1027a50:	10003b0e 	bge	r2,zero,1027b40 <_dtoa_r+0x15dc>
 1027a54:	d9001217 	ldw	r4,72(sp)
 1027a58:	bd7fffc3 	ldbu	r21,-1(r23)
 1027a5c:	d9000515 	stw	r4,20(sp)
 1027a60:	003d1c06 	br	1026ed4 <_gp+0xfffe8bf0>
 1027a64:	d8c00817 	ldw	r3,32(sp)
 1027a68:	18a9c83a 	sub	r20,r3,r2
 1027a6c:	0005883a 	mov	r2,zero
 1027a70:	003d3706 	br	1026f50 <_gp+0xfffe8c6c>
 1027a74:	00800044 	movi	r2,1
 1027a78:	003dd006 	br	10271bc <_gp+0xfffe8ed8>
 1027a7c:	d8c00217 	ldw	r3,8(sp)
 1027a80:	00800d84 	movi	r2,54
 1027a84:	dd400917 	ldw	r21,36(sp)
 1027a88:	10c5c83a 	sub	r2,r2,r3
 1027a8c:	dd000817 	ldw	r20,32(sp)
 1027a90:	003d2f06 	br	1026f50 <_gp+0xfffe8c6c>
 1027a94:	9029883a 	mov	r20,r18
 1027a98:	982b883a 	mov	r21,r19
 1027a9c:	04400084 	movi	r17,2
 1027aa0:	003bc606 	br	10269bc <_gp+0xfffe86d8>
 1027aa4:	d8800617 	ldw	r2,24(sp)
 1027aa8:	103efc26 	beq	r2,zero,102769c <_gp+0xfffe93b8>
 1027aac:	d8c00d17 	ldw	r3,52(sp)
 1027ab0:	00fc890e 	bge	zero,r3,1026cd8 <_gp+0xfffe89f4>
 1027ab4:	a80b883a 	mov	r5,r21
 1027ab8:	a009883a 	mov	r4,r20
 1027abc:	000d883a 	mov	r6,zero
 1027ac0:	01d00934 	movhi	r7,16420
 1027ac4:	10302580 	call	1030258 <__muldf3>
 1027ac8:	89000044 	addi	r4,r17,1
 1027acc:	1029883a 	mov	r20,r2
 1027ad0:	182b883a 	mov	r21,r3
 1027ad4:	10312d40 	call	10312d4 <__floatsidf>
 1027ad8:	a009883a 	mov	r4,r20
 1027adc:	a80b883a 	mov	r5,r21
 1027ae0:	100d883a 	mov	r6,r2
 1027ae4:	180f883a 	mov	r7,r3
 1027ae8:	10302580 	call	1030258 <__muldf3>
 1027aec:	1009883a 	mov	r4,r2
 1027af0:	180b883a 	mov	r5,r3
 1027af4:	000d883a 	mov	r6,zero
 1027af8:	01d00734 	movhi	r7,16412
 1027afc:	102eeac0 	call	102eeac <__adddf3>
 1027b00:	d9000517 	ldw	r4,20(sp)
 1027b04:	1023883a 	mov	r17,r2
 1027b08:	00bf3034 	movhi	r2,64704
 1027b0c:	213fffc4 	addi	r4,r4,-1
 1027b10:	1885883a 	add	r2,r3,r2
 1027b14:	d9001215 	stw	r4,72(sp)
 1027b18:	d8800e15 	stw	r2,56(sp)
 1027b1c:	da800d17 	ldw	r10,52(sp)
 1027b20:	003bc306 	br	1026a30 <_gp+0xfffe874c>
 1027b24:	b039883a 	mov	fp,r22
 1027b28:	01000e44 	movi	r4,57
 1027b2c:	8825883a 	mov	r18,r17
 1027b30:	9dc00044 	addi	r23,r19,1
 1027b34:	99000005 	stb	r4,0(r19)
 1027b38:	a023883a 	mov	r17,r20
 1027b3c:	003dae06 	br	10271f8 <_gp+0xfffe8f14>
 1027b40:	d9800e17 	ldw	r6,56(sp)
 1027b44:	d9c01117 	ldw	r7,68(sp)
 1027b48:	0009883a 	mov	r4,zero
 1027b4c:	014ff834 	movhi	r5,16352
 1027b50:	da001715 	stw	r8,92(sp)
 1027b54:	da401515 	stw	r9,84(sp)
 1027b58:	103097c0 	call	103097c <__subdf3>
 1027b5c:	da001717 	ldw	r8,92(sp)
 1027b60:	da401517 	ldw	r9,84(sp)
 1027b64:	1009883a 	mov	r4,r2
 1027b68:	180b883a 	mov	r5,r3
 1027b6c:	400d883a 	mov	r6,r8
 1027b70:	480f883a 	mov	r7,r9
 1027b74:	10300980 	call	1030098 <__gedf2>
 1027b78:	00bc570e 	bge	zero,r2,1026cd8 <_gp+0xfffe89f4>
 1027b7c:	01000c04 	movi	r4,48
 1027b80:	00000106 	br	1027b88 <_dtoa_r+0x1624>
 1027b84:	102f883a 	mov	r23,r2
 1027b88:	b8bfffc4 	addi	r2,r23,-1
 1027b8c:	10c00007 	ldb	r3,0(r2)
 1027b90:	193ffc26 	beq	r3,r4,1027b84 <_gp+0xfffe98a0>
 1027b94:	d9801217 	ldw	r6,72(sp)
 1027b98:	d9800515 	stw	r6,20(sp)
 1027b9c:	003c1f06 	br	1026c1c <_gp+0xfffe8938>
 1027ba0:	d8801217 	ldw	r2,72(sp)
 1027ba4:	dc001117 	ldw	r16,68(sp)
 1027ba8:	d8800515 	stw	r2,20(sp)
 1027bac:	003cc906 	br	1026ed4 <_gp+0xfffe8bf0>
 1027bb0:	dd801317 	ldw	r22,76(sp)
 1027bb4:	dc001117 	ldw	r16,68(sp)
 1027bb8:	dcc01417 	ldw	r19,80(sp)
 1027bbc:	dc801017 	ldw	r18,64(sp)
 1027bc0:	003c4506 	br	1026cd8 <_gp+0xfffe89f4>
 1027bc4:	103e5d1e 	bne	r2,zero,102753c <_gp+0xfffe9258>
 1027bc8:	4080004c 	andi	r2,r8,1
 1027bcc:	103e5b26 	beq	r2,zero,102753c <_gp+0xfffe9258>
 1027bd0:	003e5706 	br	1027530 <_gp+0xfffe924c>
 1027bd4:	d8c00317 	ldw	r3,12(sp)
 1027bd8:	00800084 	movi	r2,2
 1027bdc:	10c00a16 	blt	r2,r3,1027c08 <_dtoa_r+0x16a4>
 1027be0:	d9000d17 	ldw	r4,52(sp)
 1027be4:	003e8306 	br	10275f4 <_gp+0xfffe9310>
 1027be8:	04400084 	movi	r17,2
 1027bec:	003b7306 	br	10269bc <_gp+0xfffe86d8>
 1027bf0:	d9801217 	ldw	r6,72(sp)
 1027bf4:	d9800515 	stw	r6,20(sp)
 1027bf8:	003cb606 	br	1026ed4 <_gp+0xfffe8bf0>
 1027bfc:	d9001217 	ldw	r4,72(sp)
 1027c00:	d9000515 	stw	r4,20(sp)
 1027c04:	003c0506 	br	1026c1c <_gp+0xfffe8938>
 1027c08:	d9800d17 	ldw	r6,52(sp)
 1027c0c:	d9800615 	stw	r6,24(sp)
 1027c10:	003e8306 	br	1027620 <_gp+0xfffe933c>
 1027c14:	d9800317 	ldw	r6,12(sp)
 1027c18:	00800084 	movi	r2,2
 1027c1c:	11800216 	blt	r2,r6,1027c28 <_dtoa_r+0x16c4>
 1027c20:	d8800d17 	ldw	r2,52(sp)
 1027c24:	003da606 	br	10272c0 <_gp+0xfffe8fdc>
 1027c28:	d8800d17 	ldw	r2,52(sp)
 1027c2c:	d8800615 	stw	r2,24(sp)
 1027c30:	003e7b06 	br	1027620 <_gp+0xfffe933c>
 1027c34:	05000044 	movi	r20,1
 1027c38:	003b0506 	br	1026850 <_gp+0xfffe856c>
 1027c3c:	8009883a 	mov	r4,r16
 1027c40:	80001115 	stw	zero,68(r16)
 1027c44:	000b883a 	mov	r5,zero
 1027c48:	1029b8c0 	call	1029b8c <_Balloc>
 1027c4c:	d8800715 	stw	r2,28(sp)
 1027c50:	d8c00717 	ldw	r3,28(sp)
 1027c54:	00bfffc4 	movi	r2,-1
 1027c58:	01000044 	movi	r4,1
 1027c5c:	d8800615 	stw	r2,24(sp)
 1027c60:	80c01015 	stw	r3,64(r16)
 1027c64:	d9000b15 	stw	r4,44(sp)
 1027c68:	d8002215 	stw	zero,136(sp)
 1027c6c:	d8800d15 	stw	r2,52(sp)
 1027c70:	003c1906 	br	1026cd8 <_gp+0xfffe89f4>
 1027c74:	193d2926 	beq	r3,r4,102711c <_gp+0xfffe8e38>
 1027c78:	00c00f04 	movi	r3,60
 1027c7c:	1885c83a 	sub	r2,r3,r2
 1027c80:	003d7b06 	br	1027270 <_gp+0xfffe8f8c>
 1027c84:	000b883a 	mov	r5,zero
 1027c88:	003b1006 	br	10268cc <_gp+0xfffe85e8>

01027c8c <_fflush_r>:
 1027c8c:	defffb04 	addi	sp,sp,-20
 1027c90:	dcc00315 	stw	r19,12(sp)
 1027c94:	dc000015 	stw	r16,0(sp)
 1027c98:	dfc00415 	stw	ra,16(sp)
 1027c9c:	dc800215 	stw	r18,8(sp)
 1027ca0:	dc400115 	stw	r17,4(sp)
 1027ca4:	2027883a 	mov	r19,r4
 1027ca8:	2821883a 	mov	r16,r5
 1027cac:	20000226 	beq	r4,zero,1027cb8 <_fflush_r+0x2c>
 1027cb0:	20800e17 	ldw	r2,56(r4)
 1027cb4:	10005326 	beq	r2,zero,1027e04 <_fflush_r+0x178>
 1027cb8:	8080030b 	ldhu	r2,12(r16)
 1027cbc:	10ffffcc 	andi	r3,r2,65535
 1027cc0:	18e0001c 	xori	r3,r3,32768
 1027cc4:	18e00004 	addi	r3,r3,-32768
 1027cc8:	18002c26 	beq	r3,zero,1027d7c <_fflush_r+0xf0>
 1027ccc:	10c0020c 	andi	r3,r2,8
 1027cd0:	1800321e 	bne	r3,zero,1027d9c <_fflush_r+0x110>
 1027cd4:	80c00117 	ldw	r3,4(r16)
 1027cd8:	10820014 	ori	r2,r2,2048
 1027cdc:	8080030d 	sth	r2,12(r16)
 1027ce0:	00c0570e 	bge	zero,r3,1027e40 <_fflush_r+0x1b4>
 1027ce4:	82000a17 	ldw	r8,40(r16)
 1027ce8:	40002426 	beq	r8,zero,1027d7c <_fflush_r+0xf0>
 1027cec:	9c400017 	ldw	r17,0(r19)
 1027cf0:	10c4000c 	andi	r3,r2,4096
 1027cf4:	98000015 	stw	zero,0(r19)
 1027cf8:	18004626 	beq	r3,zero,1027e14 <_fflush_r+0x188>
 1027cfc:	81801417 	ldw	r6,80(r16)
 1027d00:	10c0010c 	andi	r3,r2,4
 1027d04:	18000626 	beq	r3,zero,1027d20 <_fflush_r+0x94>
 1027d08:	80c00117 	ldw	r3,4(r16)
 1027d0c:	80800c17 	ldw	r2,48(r16)
 1027d10:	30cdc83a 	sub	r6,r6,r3
 1027d14:	10000226 	beq	r2,zero,1027d20 <_fflush_r+0x94>
 1027d18:	80800f17 	ldw	r2,60(r16)
 1027d1c:	308dc83a 	sub	r6,r6,r2
 1027d20:	81400717 	ldw	r5,28(r16)
 1027d24:	9809883a 	mov	r4,r19
 1027d28:	000f883a 	mov	r7,zero
 1027d2c:	403ee83a 	callr	r8
 1027d30:	00ffffc4 	movi	r3,-1
 1027d34:	10c04526 	beq	r2,r3,1027e4c <_fflush_r+0x1c0>
 1027d38:	80c0030b 	ldhu	r3,12(r16)
 1027d3c:	81000417 	ldw	r4,16(r16)
 1027d40:	80000115 	stw	zero,4(r16)
 1027d44:	197dffcc 	andi	r5,r3,63487
 1027d48:	8140030d 	sth	r5,12(r16)
 1027d4c:	81000015 	stw	r4,0(r16)
 1027d50:	18c4000c 	andi	r3,r3,4096
 1027d54:	18000126 	beq	r3,zero,1027d5c <_fflush_r+0xd0>
 1027d58:	80801415 	stw	r2,80(r16)
 1027d5c:	81400c17 	ldw	r5,48(r16)
 1027d60:	9c400015 	stw	r17,0(r19)
 1027d64:	28000526 	beq	r5,zero,1027d7c <_fflush_r+0xf0>
 1027d68:	80801004 	addi	r2,r16,64
 1027d6c:	28800226 	beq	r5,r2,1027d78 <_fflush_r+0xec>
 1027d70:	9809883a 	mov	r4,r19
 1027d74:	10283a80 	call	10283a8 <_free_r>
 1027d78:	80000c15 	stw	zero,48(r16)
 1027d7c:	0005883a 	mov	r2,zero
 1027d80:	dfc00417 	ldw	ra,16(sp)
 1027d84:	dcc00317 	ldw	r19,12(sp)
 1027d88:	dc800217 	ldw	r18,8(sp)
 1027d8c:	dc400117 	ldw	r17,4(sp)
 1027d90:	dc000017 	ldw	r16,0(sp)
 1027d94:	dec00504 	addi	sp,sp,20
 1027d98:	f800283a 	ret
 1027d9c:	84800417 	ldw	r18,16(r16)
 1027da0:	903ff626 	beq	r18,zero,1027d7c <_gp+0xfffe9a98>
 1027da4:	84400017 	ldw	r17,0(r16)
 1027da8:	108000cc 	andi	r2,r2,3
 1027dac:	84800015 	stw	r18,0(r16)
 1027db0:	8ca3c83a 	sub	r17,r17,r18
 1027db4:	10001526 	beq	r2,zero,1027e0c <_fflush_r+0x180>
 1027db8:	0005883a 	mov	r2,zero
 1027dbc:	80800215 	stw	r2,8(r16)
 1027dc0:	04400316 	blt	zero,r17,1027dd0 <_fflush_r+0x144>
 1027dc4:	003fed06 	br	1027d7c <_gp+0xfffe9a98>
 1027dc8:	90a5883a 	add	r18,r18,r2
 1027dcc:	047feb0e 	bge	zero,r17,1027d7c <_gp+0xfffe9a98>
 1027dd0:	80800917 	ldw	r2,36(r16)
 1027dd4:	81400717 	ldw	r5,28(r16)
 1027dd8:	880f883a 	mov	r7,r17
 1027ddc:	900d883a 	mov	r6,r18
 1027de0:	9809883a 	mov	r4,r19
 1027de4:	103ee83a 	callr	r2
 1027de8:	88a3c83a 	sub	r17,r17,r2
 1027dec:	00bff616 	blt	zero,r2,1027dc8 <_gp+0xfffe9ae4>
 1027df0:	80c0030b 	ldhu	r3,12(r16)
 1027df4:	00bfffc4 	movi	r2,-1
 1027df8:	18c01014 	ori	r3,r3,64
 1027dfc:	80c0030d 	sth	r3,12(r16)
 1027e00:	003fdf06 	br	1027d80 <_gp+0xfffe9a9c>
 1027e04:	10282340 	call	1028234 <__sinit>
 1027e08:	003fab06 	br	1027cb8 <_gp+0xfffe99d4>
 1027e0c:	80800517 	ldw	r2,20(r16)
 1027e10:	003fea06 	br	1027dbc <_gp+0xfffe9ad8>
 1027e14:	81400717 	ldw	r5,28(r16)
 1027e18:	000d883a 	mov	r6,zero
 1027e1c:	9809883a 	mov	r4,r19
 1027e20:	01c00044 	movi	r7,1
 1027e24:	403ee83a 	callr	r8
 1027e28:	100d883a 	mov	r6,r2
 1027e2c:	00bfffc4 	movi	r2,-1
 1027e30:	30801326 	beq	r6,r2,1027e80 <_fflush_r+0x1f4>
 1027e34:	8080030b 	ldhu	r2,12(r16)
 1027e38:	82000a17 	ldw	r8,40(r16)
 1027e3c:	003fb006 	br	1027d00 <_gp+0xfffe9a1c>
 1027e40:	80c00f17 	ldw	r3,60(r16)
 1027e44:	00ffa716 	blt	zero,r3,1027ce4 <_gp+0xfffe9a00>
 1027e48:	003fcc06 	br	1027d7c <_gp+0xfffe9a98>
 1027e4c:	98c00017 	ldw	r3,0(r19)
 1027e50:	183fb926 	beq	r3,zero,1027d38 <_gp+0xfffe9a54>
 1027e54:	01000744 	movi	r4,29
 1027e58:	19000226 	beq	r3,r4,1027e64 <_fflush_r+0x1d8>
 1027e5c:	01000584 	movi	r4,22
 1027e60:	1900101e 	bne	r3,r4,1027ea4 <_fflush_r+0x218>
 1027e64:	8080030b 	ldhu	r2,12(r16)
 1027e68:	80c00417 	ldw	r3,16(r16)
 1027e6c:	80000115 	stw	zero,4(r16)
 1027e70:	10bdffcc 	andi	r2,r2,63487
 1027e74:	8080030d 	sth	r2,12(r16)
 1027e78:	80c00015 	stw	r3,0(r16)
 1027e7c:	003fb706 	br	1027d5c <_gp+0xfffe9a78>
 1027e80:	98800017 	ldw	r2,0(r19)
 1027e84:	103feb26 	beq	r2,zero,1027e34 <_gp+0xfffe9b50>
 1027e88:	00c00744 	movi	r3,29
 1027e8c:	10c00226 	beq	r2,r3,1027e98 <_fflush_r+0x20c>
 1027e90:	00c00584 	movi	r3,22
 1027e94:	10ffd61e 	bne	r2,r3,1027df0 <_gp+0xfffe9b0c>
 1027e98:	9c400015 	stw	r17,0(r19)
 1027e9c:	0005883a 	mov	r2,zero
 1027ea0:	003fb706 	br	1027d80 <_gp+0xfffe9a9c>
 1027ea4:	80c0030b 	ldhu	r3,12(r16)
 1027ea8:	18c01014 	ori	r3,r3,64
 1027eac:	80c0030d 	sth	r3,12(r16)
 1027eb0:	003fb306 	br	1027d80 <_gp+0xfffe9a9c>

01027eb4 <fflush>:
 1027eb4:	20000526 	beq	r4,zero,1027ecc <fflush+0x18>
 1027eb8:	008040f4 	movhi	r2,259
 1027ebc:	1098ba04 	addi	r2,r2,25320
 1027ec0:	200b883a 	mov	r5,r4
 1027ec4:	11000017 	ldw	r4,0(r2)
 1027ec8:	1027c8c1 	jmpi	1027c8c <_fflush_r>
 1027ecc:	008040f4 	movhi	r2,259
 1027ed0:	1098b904 	addi	r2,r2,25316
 1027ed4:	11000017 	ldw	r4,0(r2)
 1027ed8:	014040b4 	movhi	r5,258
 1027edc:	295f2304 	addi	r5,r5,31884
 1027ee0:	1028bf41 	jmpi	1028bf4 <_fwalk_reent>

01027ee4 <__fp_lock>:
 1027ee4:	0005883a 	mov	r2,zero
 1027ee8:	f800283a 	ret

01027eec <__fp_unlock>:
 1027eec:	0005883a 	mov	r2,zero
 1027ef0:	f800283a 	ret

01027ef4 <_cleanup_r>:
 1027ef4:	014040f4 	movhi	r5,259
 1027ef8:	29772604 	addi	r5,r5,-9064
 1027efc:	1028b3c1 	jmpi	1028b3c <_fwalk>

01027f00 <__sinit.part.1>:
 1027f00:	defff604 	addi	sp,sp,-40
 1027f04:	00c040b4 	movhi	r3,258
 1027f08:	dfc00915 	stw	ra,36(sp)
 1027f0c:	df000815 	stw	fp,32(sp)
 1027f10:	ddc00715 	stw	r23,28(sp)
 1027f14:	dd800615 	stw	r22,24(sp)
 1027f18:	dd400515 	stw	r21,20(sp)
 1027f1c:	dd000415 	stw	r20,16(sp)
 1027f20:	dcc00315 	stw	r19,12(sp)
 1027f24:	dc800215 	stw	r18,8(sp)
 1027f28:	dc400115 	stw	r17,4(sp)
 1027f2c:	dc000015 	stw	r16,0(sp)
 1027f30:	18dfbd04 	addi	r3,r3,32500
 1027f34:	24000117 	ldw	r16,4(r4)
 1027f38:	20c00f15 	stw	r3,60(r4)
 1027f3c:	07000044 	movi	fp,1
 1027f40:	00c000c4 	movi	r3,3
 1027f44:	2080bb04 	addi	r2,r4,748
 1027f48:	20c0b915 	stw	r3,740(r4)
 1027f4c:	27000e15 	stw	fp,56(r4)
 1027f50:	2080ba15 	stw	r2,744(r4)
 1027f54:	2000b815 	stw	zero,736(r4)
 1027f58:	05c00204 	movi	r23,8
 1027f5c:	00800104 	movi	r2,4
 1027f60:	2025883a 	mov	r18,r4
 1027f64:	b80d883a 	mov	r6,r23
 1027f68:	81001704 	addi	r4,r16,92
 1027f6c:	000b883a 	mov	r5,zero
 1027f70:	80000015 	stw	zero,0(r16)
 1027f74:	80000115 	stw	zero,4(r16)
 1027f78:	80000215 	stw	zero,8(r16)
 1027f7c:	8080030d 	sth	r2,12(r16)
 1027f80:	80001915 	stw	zero,100(r16)
 1027f84:	8000038d 	sth	zero,14(r16)
 1027f88:	80000415 	stw	zero,16(r16)
 1027f8c:	80000515 	stw	zero,20(r16)
 1027f90:	80000615 	stw	zero,24(r16)
 1027f94:	1029a680 	call	1029a68 <memset>
 1027f98:	058040f4 	movhi	r22,259
 1027f9c:	94400217 	ldw	r17,8(r18)
 1027fa0:	054040f4 	movhi	r21,259
 1027fa4:	050040f4 	movhi	r20,259
 1027fa8:	04c040f4 	movhi	r19,259
 1027fac:	b5ac6004 	addi	r22,r22,-20096
 1027fb0:	ad6c7704 	addi	r21,r21,-20004
 1027fb4:	a52c9604 	addi	r20,r20,-19880
 1027fb8:	9cecad04 	addi	r19,r19,-19788
 1027fbc:	85800815 	stw	r22,32(r16)
 1027fc0:	85400915 	stw	r21,36(r16)
 1027fc4:	85000a15 	stw	r20,40(r16)
 1027fc8:	84c00b15 	stw	r19,44(r16)
 1027fcc:	84000715 	stw	r16,28(r16)
 1027fd0:	00800284 	movi	r2,10
 1027fd4:	89001704 	addi	r4,r17,92
 1027fd8:	b80d883a 	mov	r6,r23
 1027fdc:	000b883a 	mov	r5,zero
 1027fe0:	88000015 	stw	zero,0(r17)
 1027fe4:	88000115 	stw	zero,4(r17)
 1027fe8:	88000215 	stw	zero,8(r17)
 1027fec:	8880030d 	sth	r2,12(r17)
 1027ff0:	88001915 	stw	zero,100(r17)
 1027ff4:	8f00038d 	sth	fp,14(r17)
 1027ff8:	88000415 	stw	zero,16(r17)
 1027ffc:	88000515 	stw	zero,20(r17)
 1028000:	88000615 	stw	zero,24(r17)
 1028004:	1029a680 	call	1029a68 <memset>
 1028008:	94000317 	ldw	r16,12(r18)
 102800c:	00800484 	movi	r2,18
 1028010:	8c400715 	stw	r17,28(r17)
 1028014:	8d800815 	stw	r22,32(r17)
 1028018:	8d400915 	stw	r21,36(r17)
 102801c:	8d000a15 	stw	r20,40(r17)
 1028020:	8cc00b15 	stw	r19,44(r17)
 1028024:	8080030d 	sth	r2,12(r16)
 1028028:	00800084 	movi	r2,2
 102802c:	80000015 	stw	zero,0(r16)
 1028030:	80000115 	stw	zero,4(r16)
 1028034:	80000215 	stw	zero,8(r16)
 1028038:	80001915 	stw	zero,100(r16)
 102803c:	8080038d 	sth	r2,14(r16)
 1028040:	80000415 	stw	zero,16(r16)
 1028044:	80000515 	stw	zero,20(r16)
 1028048:	80000615 	stw	zero,24(r16)
 102804c:	81001704 	addi	r4,r16,92
 1028050:	000b883a 	mov	r5,zero
 1028054:	b80d883a 	mov	r6,r23
 1028058:	1029a680 	call	1029a68 <memset>
 102805c:	84000715 	stw	r16,28(r16)
 1028060:	85800815 	stw	r22,32(r16)
 1028064:	85400915 	stw	r21,36(r16)
 1028068:	85000a15 	stw	r20,40(r16)
 102806c:	84c00b15 	stw	r19,44(r16)
 1028070:	dfc00917 	ldw	ra,36(sp)
 1028074:	df000817 	ldw	fp,32(sp)
 1028078:	ddc00717 	ldw	r23,28(sp)
 102807c:	dd800617 	ldw	r22,24(sp)
 1028080:	dd400517 	ldw	r21,20(sp)
 1028084:	dd000417 	ldw	r20,16(sp)
 1028088:	dcc00317 	ldw	r19,12(sp)
 102808c:	dc800217 	ldw	r18,8(sp)
 1028090:	dc400117 	ldw	r17,4(sp)
 1028094:	dc000017 	ldw	r16,0(sp)
 1028098:	dec00a04 	addi	sp,sp,40
 102809c:	f800283a 	ret

010280a0 <__sfmoreglue>:
 10280a0:	defffc04 	addi	sp,sp,-16
 10280a4:	dc400115 	stw	r17,4(sp)
 10280a8:	2c401a24 	muli	r17,r5,104
 10280ac:	dc800215 	stw	r18,8(sp)
 10280b0:	2825883a 	mov	r18,r5
 10280b4:	89400304 	addi	r5,r17,12
 10280b8:	dc000015 	stw	r16,0(sp)
 10280bc:	dfc00315 	stw	ra,12(sp)
 10280c0:	1028f440 	call	1028f44 <_malloc_r>
 10280c4:	1021883a 	mov	r16,r2
 10280c8:	10000726 	beq	r2,zero,10280e8 <__sfmoreglue+0x48>
 10280cc:	11000304 	addi	r4,r2,12
 10280d0:	10000015 	stw	zero,0(r2)
 10280d4:	14800115 	stw	r18,4(r2)
 10280d8:	11000215 	stw	r4,8(r2)
 10280dc:	000b883a 	mov	r5,zero
 10280e0:	880d883a 	mov	r6,r17
 10280e4:	1029a680 	call	1029a68 <memset>
 10280e8:	8005883a 	mov	r2,r16
 10280ec:	dfc00317 	ldw	ra,12(sp)
 10280f0:	dc800217 	ldw	r18,8(sp)
 10280f4:	dc400117 	ldw	r17,4(sp)
 10280f8:	dc000017 	ldw	r16,0(sp)
 10280fc:	dec00404 	addi	sp,sp,16
 1028100:	f800283a 	ret

01028104 <__sfp>:
 1028104:	008040f4 	movhi	r2,259
 1028108:	defffb04 	addi	sp,sp,-20
 102810c:	1098b904 	addi	r2,r2,25316
 1028110:	dc800215 	stw	r18,8(sp)
 1028114:	14800017 	ldw	r18,0(r2)
 1028118:	dcc00315 	stw	r19,12(sp)
 102811c:	dfc00415 	stw	ra,16(sp)
 1028120:	90800e17 	ldw	r2,56(r18)
 1028124:	dc400115 	stw	r17,4(sp)
 1028128:	dc000015 	stw	r16,0(sp)
 102812c:	2027883a 	mov	r19,r4
 1028130:	1000021e 	bne	r2,zero,102813c <__sfp+0x38>
 1028134:	9009883a 	mov	r4,r18
 1028138:	1027f000 	call	1027f00 <__sinit.part.1>
 102813c:	9480b804 	addi	r18,r18,736
 1028140:	047fffc4 	movi	r17,-1
 1028144:	91400117 	ldw	r5,4(r18)
 1028148:	94000217 	ldw	r16,8(r18)
 102814c:	297fffc4 	addi	r5,r5,-1
 1028150:	28000a16 	blt	r5,zero,102817c <__sfp+0x78>
 1028154:	8080030f 	ldh	r2,12(r16)
 1028158:	10000c26 	beq	r2,zero,102818c <__sfp+0x88>
 102815c:	80c01d04 	addi	r3,r16,116
 1028160:	00000206 	br	102816c <__sfp+0x68>
 1028164:	18bfe60f 	ldh	r2,-104(r3)
 1028168:	10000826 	beq	r2,zero,102818c <__sfp+0x88>
 102816c:	297fffc4 	addi	r5,r5,-1
 1028170:	1c3ffd04 	addi	r16,r3,-12
 1028174:	18c01a04 	addi	r3,r3,104
 1028178:	2c7ffa1e 	bne	r5,r17,1028164 <_gp+0xfffe9e80>
 102817c:	90800017 	ldw	r2,0(r18)
 1028180:	10001d26 	beq	r2,zero,10281f8 <__sfp+0xf4>
 1028184:	1025883a 	mov	r18,r2
 1028188:	003fee06 	br	1028144 <_gp+0xfffe9e60>
 102818c:	00bfffc4 	movi	r2,-1
 1028190:	8080038d 	sth	r2,14(r16)
 1028194:	00800044 	movi	r2,1
 1028198:	8080030d 	sth	r2,12(r16)
 102819c:	80001915 	stw	zero,100(r16)
 10281a0:	80000015 	stw	zero,0(r16)
 10281a4:	80000215 	stw	zero,8(r16)
 10281a8:	80000115 	stw	zero,4(r16)
 10281ac:	80000415 	stw	zero,16(r16)
 10281b0:	80000515 	stw	zero,20(r16)
 10281b4:	80000615 	stw	zero,24(r16)
 10281b8:	81001704 	addi	r4,r16,92
 10281bc:	000b883a 	mov	r5,zero
 10281c0:	01800204 	movi	r6,8
 10281c4:	1029a680 	call	1029a68 <memset>
 10281c8:	8005883a 	mov	r2,r16
 10281cc:	80000c15 	stw	zero,48(r16)
 10281d0:	80000d15 	stw	zero,52(r16)
 10281d4:	80001115 	stw	zero,68(r16)
 10281d8:	80001215 	stw	zero,72(r16)
 10281dc:	dfc00417 	ldw	ra,16(sp)
 10281e0:	dcc00317 	ldw	r19,12(sp)
 10281e4:	dc800217 	ldw	r18,8(sp)
 10281e8:	dc400117 	ldw	r17,4(sp)
 10281ec:	dc000017 	ldw	r16,0(sp)
 10281f0:	dec00504 	addi	sp,sp,20
 10281f4:	f800283a 	ret
 10281f8:	9809883a 	mov	r4,r19
 10281fc:	01400104 	movi	r5,4
 1028200:	10280a00 	call	10280a0 <__sfmoreglue>
 1028204:	90800015 	stw	r2,0(r18)
 1028208:	103fde1e 	bne	r2,zero,1028184 <_gp+0xfffe9ea0>
 102820c:	00800304 	movi	r2,12
 1028210:	98800015 	stw	r2,0(r19)
 1028214:	0005883a 	mov	r2,zero
 1028218:	003ff006 	br	10281dc <_gp+0xfffe9ef8>

0102821c <_cleanup>:
 102821c:	008040f4 	movhi	r2,259
 1028220:	1098b904 	addi	r2,r2,25316
 1028224:	11000017 	ldw	r4,0(r2)
 1028228:	014040f4 	movhi	r5,259
 102822c:	29772604 	addi	r5,r5,-9064
 1028230:	1028b3c1 	jmpi	1028b3c <_fwalk>

01028234 <__sinit>:
 1028234:	20800e17 	ldw	r2,56(r4)
 1028238:	10000126 	beq	r2,zero,1028240 <__sinit+0xc>
 102823c:	f800283a 	ret
 1028240:	1027f001 	jmpi	1027f00 <__sinit.part.1>

01028244 <__sfp_lock_acquire>:
 1028244:	f800283a 	ret

01028248 <__sfp_lock_release>:
 1028248:	f800283a 	ret

0102824c <__sinit_lock_acquire>:
 102824c:	f800283a 	ret

01028250 <__sinit_lock_release>:
 1028250:	f800283a 	ret

01028254 <__fp_lock_all>:
 1028254:	008040f4 	movhi	r2,259
 1028258:	1098ba04 	addi	r2,r2,25320
 102825c:	11000017 	ldw	r4,0(r2)
 1028260:	014040b4 	movhi	r5,258
 1028264:	295fb904 	addi	r5,r5,32484
 1028268:	1028b3c1 	jmpi	1028b3c <_fwalk>

0102826c <__fp_unlock_all>:
 102826c:	008040f4 	movhi	r2,259
 1028270:	1098ba04 	addi	r2,r2,25320
 1028274:	11000017 	ldw	r4,0(r2)
 1028278:	014040b4 	movhi	r5,258
 102827c:	295fbb04 	addi	r5,r5,32492
 1028280:	1028b3c1 	jmpi	1028b3c <_fwalk>

01028284 <_malloc_trim_r>:
 1028284:	defffb04 	addi	sp,sp,-20
 1028288:	dcc00315 	stw	r19,12(sp)
 102828c:	04c040f4 	movhi	r19,259
 1028290:	dc800215 	stw	r18,8(sp)
 1028294:	dc400115 	stw	r17,4(sp)
 1028298:	dc000015 	stw	r16,0(sp)
 102829c:	dfc00415 	stw	ra,16(sp)
 10282a0:	2821883a 	mov	r16,r5
 10282a4:	9cd33504 	addi	r19,r19,19668
 10282a8:	2025883a 	mov	r18,r4
 10282ac:	1031a6c0 	call	1031a6c <__malloc_lock>
 10282b0:	98800217 	ldw	r2,8(r19)
 10282b4:	14400117 	ldw	r17,4(r2)
 10282b8:	00bfff04 	movi	r2,-4
 10282bc:	88a2703a 	and	r17,r17,r2
 10282c0:	8c21c83a 	sub	r16,r17,r16
 10282c4:	8403fbc4 	addi	r16,r16,4079
 10282c8:	8020d33a 	srli	r16,r16,12
 10282cc:	0083ffc4 	movi	r2,4095
 10282d0:	843fffc4 	addi	r16,r16,-1
 10282d4:	8020933a 	slli	r16,r16,12
 10282d8:	1400060e 	bge	r2,r16,10282f4 <_malloc_trim_r+0x70>
 10282dc:	9009883a 	mov	r4,r18
 10282e0:	000b883a 	mov	r5,zero
 10282e4:	102b12c0 	call	102b12c <_sbrk_r>
 10282e8:	98c00217 	ldw	r3,8(r19)
 10282ec:	1c47883a 	add	r3,r3,r17
 10282f0:	10c00a26 	beq	r2,r3,102831c <_malloc_trim_r+0x98>
 10282f4:	9009883a 	mov	r4,r18
 10282f8:	1031a8c0 	call	1031a8c <__malloc_unlock>
 10282fc:	0005883a 	mov	r2,zero
 1028300:	dfc00417 	ldw	ra,16(sp)
 1028304:	dcc00317 	ldw	r19,12(sp)
 1028308:	dc800217 	ldw	r18,8(sp)
 102830c:	dc400117 	ldw	r17,4(sp)
 1028310:	dc000017 	ldw	r16,0(sp)
 1028314:	dec00504 	addi	sp,sp,20
 1028318:	f800283a 	ret
 102831c:	9009883a 	mov	r4,r18
 1028320:	040bc83a 	sub	r5,zero,r16
 1028324:	102b12c0 	call	102b12c <_sbrk_r>
 1028328:	00ffffc4 	movi	r3,-1
 102832c:	10c00d26 	beq	r2,r3,1028364 <_malloc_trim_r+0xe0>
 1028330:	00c040f4 	movhi	r3,259
 1028334:	18df9204 	addi	r3,r3,32328
 1028338:	18800017 	ldw	r2,0(r3)
 102833c:	99000217 	ldw	r4,8(r19)
 1028340:	8c23c83a 	sub	r17,r17,r16
 1028344:	8c400054 	ori	r17,r17,1
 1028348:	1421c83a 	sub	r16,r2,r16
 102834c:	24400115 	stw	r17,4(r4)
 1028350:	9009883a 	mov	r4,r18
 1028354:	1c000015 	stw	r16,0(r3)
 1028358:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102835c:	00800044 	movi	r2,1
 1028360:	003fe706 	br	1028300 <_gp+0xfffea01c>
 1028364:	9009883a 	mov	r4,r18
 1028368:	000b883a 	mov	r5,zero
 102836c:	102b12c0 	call	102b12c <_sbrk_r>
 1028370:	99000217 	ldw	r4,8(r19)
 1028374:	014003c4 	movi	r5,15
 1028378:	1107c83a 	sub	r3,r2,r4
 102837c:	28ffdd0e 	bge	r5,r3,10282f4 <_gp+0xfffea010>
 1028380:	014040f4 	movhi	r5,259
 1028384:	2958bc04 	addi	r5,r5,25328
 1028388:	29400017 	ldw	r5,0(r5)
 102838c:	18c00054 	ori	r3,r3,1
 1028390:	20c00115 	stw	r3,4(r4)
 1028394:	00c040f4 	movhi	r3,259
 1028398:	1145c83a 	sub	r2,r2,r5
 102839c:	18df9204 	addi	r3,r3,32328
 10283a0:	18800015 	stw	r2,0(r3)
 10283a4:	003fd306 	br	10282f4 <_gp+0xfffea010>

010283a8 <_free_r>:
 10283a8:	28004c26 	beq	r5,zero,10284dc <_free_r+0x134>
 10283ac:	defffd04 	addi	sp,sp,-12
 10283b0:	dc400115 	stw	r17,4(sp)
 10283b4:	dc000015 	stw	r16,0(sp)
 10283b8:	2023883a 	mov	r17,r4
 10283bc:	2821883a 	mov	r16,r5
 10283c0:	dfc00215 	stw	ra,8(sp)
 10283c4:	1031a6c0 	call	1031a6c <__malloc_lock>
 10283c8:	813fff17 	ldw	r4,-4(r16)
 10283cc:	00bfff84 	movi	r2,-2
 10283d0:	024040f4 	movhi	r9,259
 10283d4:	81bffe04 	addi	r6,r16,-8
 10283d8:	2084703a 	and	r2,r4,r2
 10283dc:	4a533504 	addi	r9,r9,19668
 10283e0:	308b883a 	add	r5,r6,r2
 10283e4:	2a000117 	ldw	r8,4(r5)
 10283e8:	49c00217 	ldw	r7,8(r9)
 10283ec:	00ffff04 	movi	r3,-4
 10283f0:	40c6703a 	and	r3,r8,r3
 10283f4:	39405326 	beq	r7,r5,1028544 <_free_r+0x19c>
 10283f8:	28c00115 	stw	r3,4(r5)
 10283fc:	2100004c 	andi	r4,r4,1
 1028400:	2000091e 	bne	r4,zero,1028428 <_free_r+0x80>
 1028404:	81fffe17 	ldw	r7,-8(r16)
 1028408:	4a000204 	addi	r8,r9,8
 102840c:	31cdc83a 	sub	r6,r6,r7
 1028410:	31000217 	ldw	r4,8(r6)
 1028414:	11c5883a 	add	r2,r2,r7
 1028418:	22006126 	beq	r4,r8,10285a0 <_free_r+0x1f8>
 102841c:	31c00317 	ldw	r7,12(r6)
 1028420:	21c00315 	stw	r7,12(r4)
 1028424:	39000215 	stw	r4,8(r7)
 1028428:	28c9883a 	add	r4,r5,r3
 102842c:	21c00117 	ldw	r7,4(r4)
 1028430:	39c0004c 	andi	r7,r7,1
 1028434:	38000d1e 	bne	r7,zero,102846c <_free_r+0xc4>
 1028438:	29000217 	ldw	r4,8(r5)
 102843c:	10c5883a 	add	r2,r2,r3
 1028440:	00c040f4 	movhi	r3,259
 1028444:	18d33704 	addi	r3,r3,19676
 1028448:	20c07526 	beq	r4,r3,1028620 <_free_r+0x278>
 102844c:	29c00317 	ldw	r7,12(r5)
 1028450:	11400054 	ori	r5,r2,1
 1028454:	3087883a 	add	r3,r6,r2
 1028458:	21c00315 	stw	r7,12(r4)
 102845c:	39000215 	stw	r4,8(r7)
 1028460:	31400115 	stw	r5,4(r6)
 1028464:	18800015 	stw	r2,0(r3)
 1028468:	00000406 	br	102847c <_free_r+0xd4>
 102846c:	10c00054 	ori	r3,r2,1
 1028470:	30c00115 	stw	r3,4(r6)
 1028474:	3087883a 	add	r3,r6,r2
 1028478:	18800015 	stw	r2,0(r3)
 102847c:	00c07fc4 	movi	r3,511
 1028480:	18801736 	bltu	r3,r2,10284e0 <_free_r+0x138>
 1028484:	1004d0fa 	srli	r2,r2,3
 1028488:	01400044 	movi	r5,1
 102848c:	49000117 	ldw	r4,4(r9)
 1028490:	1087883a 	add	r3,r2,r2
 1028494:	18c7883a 	add	r3,r3,r3
 1028498:	1005d0ba 	srai	r2,r2,2
 102849c:	18c7883a 	add	r3,r3,r3
 10284a0:	1a47883a 	add	r3,r3,r9
 10284a4:	19c00217 	ldw	r7,8(r3)
 10284a8:	2884983a 	sll	r2,r5,r2
 10284ac:	30c00315 	stw	r3,12(r6)
 10284b0:	31c00215 	stw	r7,8(r6)
 10284b4:	1104b03a 	or	r2,r2,r4
 10284b8:	19800215 	stw	r6,8(r3)
 10284bc:	48800115 	stw	r2,4(r9)
 10284c0:	39800315 	stw	r6,12(r7)
 10284c4:	8809883a 	mov	r4,r17
 10284c8:	dfc00217 	ldw	ra,8(sp)
 10284cc:	dc400117 	ldw	r17,4(sp)
 10284d0:	dc000017 	ldw	r16,0(sp)
 10284d4:	dec00304 	addi	sp,sp,12
 10284d8:	1031a8c1 	jmpi	1031a8c <__malloc_unlock>
 10284dc:	f800283a 	ret
 10284e0:	1006d27a 	srli	r3,r2,9
 10284e4:	01000104 	movi	r4,4
 10284e8:	20c04036 	bltu	r4,r3,10285ec <_free_r+0x244>
 10284ec:	1006d1ba 	srli	r3,r2,6
 10284f0:	19400e04 	addi	r5,r3,56
 10284f4:	2947883a 	add	r3,r5,r5
 10284f8:	18c7883a 	add	r3,r3,r3
 10284fc:	18c7883a 	add	r3,r3,r3
 1028500:	1a49883a 	add	r4,r3,r9
 1028504:	20c00217 	ldw	r3,8(r4)
 1028508:	01c040f4 	movhi	r7,259
 102850c:	39d33504 	addi	r7,r7,19668
 1028510:	19003b26 	beq	r3,r4,1028600 <_free_r+0x258>
 1028514:	01ffff04 	movi	r7,-4
 1028518:	19400117 	ldw	r5,4(r3)
 102851c:	29ca703a 	and	r5,r5,r7
 1028520:	1140022e 	bgeu	r2,r5,102852c <_free_r+0x184>
 1028524:	18c00217 	ldw	r3,8(r3)
 1028528:	20fffb1e 	bne	r4,r3,1028518 <_gp+0xfffea234>
 102852c:	18800317 	ldw	r2,12(r3)
 1028530:	30800315 	stw	r2,12(r6)
 1028534:	30c00215 	stw	r3,8(r6)
 1028538:	11800215 	stw	r6,8(r2)
 102853c:	19800315 	stw	r6,12(r3)
 1028540:	003fe006 	br	10284c4 <_gp+0xfffea1e0>
 1028544:	2100004c 	andi	r4,r4,1
 1028548:	1885883a 	add	r2,r3,r2
 102854c:	2000071e 	bne	r4,zero,102856c <_free_r+0x1c4>
 1028550:	817ffe17 	ldw	r5,-8(r16)
 1028554:	314dc83a 	sub	r6,r6,r5
 1028558:	30c00317 	ldw	r3,12(r6)
 102855c:	31000217 	ldw	r4,8(r6)
 1028560:	1145883a 	add	r2,r2,r5
 1028564:	20c00315 	stw	r3,12(r4)
 1028568:	19000215 	stw	r4,8(r3)
 102856c:	10c00054 	ori	r3,r2,1
 1028570:	30c00115 	stw	r3,4(r6)
 1028574:	00c040f4 	movhi	r3,259
 1028578:	18d8bd04 	addi	r3,r3,25332
 102857c:	18c00017 	ldw	r3,0(r3)
 1028580:	49800215 	stw	r6,8(r9)
 1028584:	10ffcf36 	bltu	r2,r3,10284c4 <_gp+0xfffea1e0>
 1028588:	008040f4 	movhi	r2,259
 102858c:	109f8904 	addi	r2,r2,32292
 1028590:	11400017 	ldw	r5,0(r2)
 1028594:	8809883a 	mov	r4,r17
 1028598:	10282840 	call	1028284 <_malloc_trim_r>
 102859c:	003fc906 	br	10284c4 <_gp+0xfffea1e0>
 10285a0:	28c9883a 	add	r4,r5,r3
 10285a4:	21000117 	ldw	r4,4(r4)
 10285a8:	2100004c 	andi	r4,r4,1
 10285ac:	20000a1e 	bne	r4,zero,10285d8 <_free_r+0x230>
 10285b0:	29000317 	ldw	r4,12(r5)
 10285b4:	29400217 	ldw	r5,8(r5)
 10285b8:	10c5883a 	add	r2,r2,r3
 10285bc:	10c00054 	ori	r3,r2,1
 10285c0:	29000315 	stw	r4,12(r5)
 10285c4:	21400215 	stw	r5,8(r4)
 10285c8:	30c00115 	stw	r3,4(r6)
 10285cc:	308d883a 	add	r6,r6,r2
 10285d0:	30800015 	stw	r2,0(r6)
 10285d4:	003fbb06 	br	10284c4 <_gp+0xfffea1e0>
 10285d8:	10c00054 	ori	r3,r2,1
 10285dc:	30c00115 	stw	r3,4(r6)
 10285e0:	308d883a 	add	r6,r6,r2
 10285e4:	30800015 	stw	r2,0(r6)
 10285e8:	003fb606 	br	10284c4 <_gp+0xfffea1e0>
 10285ec:	01000504 	movi	r4,20
 10285f0:	20c01436 	bltu	r4,r3,1028644 <_free_r+0x29c>
 10285f4:	194016c4 	addi	r5,r3,91
 10285f8:	2947883a 	add	r3,r5,r5
 10285fc:	003fbe06 	br	10284f8 <_gp+0xfffea214>
 1028600:	280bd0ba 	srai	r5,r5,2
 1028604:	00800044 	movi	r2,1
 1028608:	39000117 	ldw	r4,4(r7)
 102860c:	114a983a 	sll	r5,r2,r5
 1028610:	1805883a 	mov	r2,r3
 1028614:	2908b03a 	or	r4,r5,r4
 1028618:	39000115 	stw	r4,4(r7)
 102861c:	003fc406 	br	1028530 <_gp+0xfffea24c>
 1028620:	49800515 	stw	r6,20(r9)
 1028624:	49800415 	stw	r6,16(r9)
 1028628:	10c00054 	ori	r3,r2,1
 102862c:	31000315 	stw	r4,12(r6)
 1028630:	31000215 	stw	r4,8(r6)
 1028634:	30c00115 	stw	r3,4(r6)
 1028638:	308d883a 	add	r6,r6,r2
 102863c:	30800015 	stw	r2,0(r6)
 1028640:	003fa006 	br	10284c4 <_gp+0xfffea1e0>
 1028644:	01001504 	movi	r4,84
 1028648:	20c00436 	bltu	r4,r3,102865c <_free_r+0x2b4>
 102864c:	1006d33a 	srli	r3,r2,12
 1028650:	19401b84 	addi	r5,r3,110
 1028654:	2947883a 	add	r3,r5,r5
 1028658:	003fa706 	br	10284f8 <_gp+0xfffea214>
 102865c:	01005504 	movi	r4,340
 1028660:	20c00436 	bltu	r4,r3,1028674 <_free_r+0x2cc>
 1028664:	1006d3fa 	srli	r3,r2,15
 1028668:	19401dc4 	addi	r5,r3,119
 102866c:	2947883a 	add	r3,r5,r5
 1028670:	003fa106 	br	10284f8 <_gp+0xfffea214>
 1028674:	01015504 	movi	r4,1364
 1028678:	20c00436 	bltu	r4,r3,102868c <_free_r+0x2e4>
 102867c:	1006d4ba 	srli	r3,r2,18
 1028680:	19401f04 	addi	r5,r3,124
 1028684:	2947883a 	add	r3,r5,r5
 1028688:	003f9b06 	br	10284f8 <_gp+0xfffea214>
 102868c:	00c03f04 	movi	r3,252
 1028690:	01401f84 	movi	r5,126
 1028694:	003f9806 	br	10284f8 <_gp+0xfffea214>

01028698 <__sfvwrite_r>:
 1028698:	30800217 	ldw	r2,8(r6)
 102869c:	10004526 	beq	r2,zero,10287b4 <__sfvwrite_r+0x11c>
 10286a0:	28c0030b 	ldhu	r3,12(r5)
 10286a4:	defff404 	addi	sp,sp,-48
 10286a8:	dd400715 	stw	r21,28(sp)
 10286ac:	dcc00515 	stw	r19,20(sp)
 10286b0:	dc000215 	stw	r16,8(sp)
 10286b4:	dfc00b15 	stw	ra,44(sp)
 10286b8:	df000a15 	stw	fp,40(sp)
 10286bc:	ddc00915 	stw	r23,36(sp)
 10286c0:	dd800815 	stw	r22,32(sp)
 10286c4:	dd000615 	stw	r20,24(sp)
 10286c8:	dc800415 	stw	r18,16(sp)
 10286cc:	dc400315 	stw	r17,12(sp)
 10286d0:	1880020c 	andi	r2,r3,8
 10286d4:	2821883a 	mov	r16,r5
 10286d8:	202b883a 	mov	r21,r4
 10286dc:	3027883a 	mov	r19,r6
 10286e0:	10002526 	beq	r2,zero,1028778 <__sfvwrite_r+0xe0>
 10286e4:	28800417 	ldw	r2,16(r5)
 10286e8:	10002326 	beq	r2,zero,1028778 <__sfvwrite_r+0xe0>
 10286ec:	1880008c 	andi	r2,r3,2
 10286f0:	9c400017 	ldw	r17,0(r19)
 10286f4:	10003126 	beq	r2,zero,10287bc <__sfvwrite_r+0x124>
 10286f8:	0029883a 	mov	r20,zero
 10286fc:	0025883a 	mov	r18,zero
 1028700:	05810004 	movi	r22,1024
 1028704:	a00d883a 	mov	r6,r20
 1028708:	a809883a 	mov	r4,r21
 102870c:	90002526 	beq	r18,zero,10287a4 <__sfvwrite_r+0x10c>
 1028710:	900f883a 	mov	r7,r18
 1028714:	81400717 	ldw	r5,28(r16)
 1028718:	b480012e 	bgeu	r22,r18,1028720 <__sfvwrite_r+0x88>
 102871c:	01c10004 	movi	r7,1024
 1028720:	80800917 	ldw	r2,36(r16)
 1028724:	103ee83a 	callr	r2
 1028728:	0080510e 	bge	zero,r2,1028870 <__sfvwrite_r+0x1d8>
 102872c:	98c00217 	ldw	r3,8(r19)
 1028730:	a0a9883a 	add	r20,r20,r2
 1028734:	90a5c83a 	sub	r18,r18,r2
 1028738:	1885c83a 	sub	r2,r3,r2
 102873c:	98800215 	stw	r2,8(r19)
 1028740:	103ff01e 	bne	r2,zero,1028704 <_gp+0xfffea420>
 1028744:	0005883a 	mov	r2,zero
 1028748:	dfc00b17 	ldw	ra,44(sp)
 102874c:	df000a17 	ldw	fp,40(sp)
 1028750:	ddc00917 	ldw	r23,36(sp)
 1028754:	dd800817 	ldw	r22,32(sp)
 1028758:	dd400717 	ldw	r21,28(sp)
 102875c:	dd000617 	ldw	r20,24(sp)
 1028760:	dcc00517 	ldw	r19,20(sp)
 1028764:	dc800417 	ldw	r18,16(sp)
 1028768:	dc400317 	ldw	r17,12(sp)
 102876c:	dc000217 	ldw	r16,8(sp)
 1028770:	dec00c04 	addi	sp,sp,48
 1028774:	f800283a 	ret
 1028778:	a809883a 	mov	r4,r21
 102877c:	800b883a 	mov	r5,r16
 1028780:	10262340 	call	1026234 <__swsetup_r>
 1028784:	80c0030b 	ldhu	r3,12(r16)
 1028788:	103fd826 	beq	r2,zero,10286ec <_gp+0xfffea408>
 102878c:	18c01014 	ori	r3,r3,64
 1028790:	80c0030d 	sth	r3,12(r16)
 1028794:	00c00244 	movi	r3,9
 1028798:	00bfffc4 	movi	r2,-1
 102879c:	a8c00015 	stw	r3,0(r21)
 10287a0:	003fe906 	br	1028748 <_gp+0xfffea464>
 10287a4:	8d000017 	ldw	r20,0(r17)
 10287a8:	8c800117 	ldw	r18,4(r17)
 10287ac:	8c400204 	addi	r17,r17,8
 10287b0:	003fd406 	br	1028704 <_gp+0xfffea420>
 10287b4:	0005883a 	mov	r2,zero
 10287b8:	f800283a 	ret
 10287bc:	1880004c 	andi	r2,r3,1
 10287c0:	1000301e 	bne	r2,zero,1028884 <__sfvwrite_r+0x1ec>
 10287c4:	002f883a 	mov	r23,zero
 10287c8:	0025883a 	mov	r18,zero
 10287cc:	90001c26 	beq	r18,zero,1028840 <__sfvwrite_r+0x1a8>
 10287d0:	1880800c 	andi	r2,r3,512
 10287d4:	85000217 	ldw	r20,8(r16)
 10287d8:	10006c26 	beq	r2,zero,102898c <__sfvwrite_r+0x2f4>
 10287dc:	a02d883a 	mov	r22,r20
 10287e0:	95008536 	bltu	r18,r20,10289f8 <__sfvwrite_r+0x360>
 10287e4:	1881200c 	andi	r2,r3,1152
 10287e8:	10009d1e 	bne	r2,zero,1028a60 <__sfvwrite_r+0x3c8>
 10287ec:	81000017 	ldw	r4,0(r16)
 10287f0:	a039883a 	mov	fp,r20
 10287f4:	9029883a 	mov	r20,r18
 10287f8:	b80b883a 	mov	r5,r23
 10287fc:	b00d883a 	mov	r6,r22
 1028800:	102990c0 	call	102990c <memmove>
 1028804:	80c00217 	ldw	r3,8(r16)
 1028808:	81000017 	ldw	r4,0(r16)
 102880c:	9005883a 	mov	r2,r18
 1028810:	1f39c83a 	sub	fp,r3,fp
 1028814:	258f883a 	add	r7,r4,r22
 1028818:	87000215 	stw	fp,8(r16)
 102881c:	81c00015 	stw	r7,0(r16)
 1028820:	98c00217 	ldw	r3,8(r19)
 1028824:	b8af883a 	add	r23,r23,r2
 1028828:	90a5c83a 	sub	r18,r18,r2
 102882c:	1d05c83a 	sub	r2,r3,r20
 1028830:	98800215 	stw	r2,8(r19)
 1028834:	103fc326 	beq	r2,zero,1028744 <_gp+0xfffea460>
 1028838:	80c0030b 	ldhu	r3,12(r16)
 102883c:	903fe41e 	bne	r18,zero,10287d0 <_gp+0xfffea4ec>
 1028840:	8dc00017 	ldw	r23,0(r17)
 1028844:	8c800117 	ldw	r18,4(r17)
 1028848:	8c400204 	addi	r17,r17,8
 102884c:	003fdf06 	br	10287cc <_gp+0xfffea4e8>
 1028850:	102ab180 	call	102ab18 <_realloc_r>
 1028854:	102d883a 	mov	r22,r2
 1028858:	1000a01e 	bne	r2,zero,1028adc <__sfvwrite_r+0x444>
 102885c:	81400417 	ldw	r5,16(r16)
 1028860:	a809883a 	mov	r4,r21
 1028864:	10283a80 	call	10283a8 <_free_r>
 1028868:	00800304 	movi	r2,12
 102886c:	a8800015 	stw	r2,0(r21)
 1028870:	80c0030b 	ldhu	r3,12(r16)
 1028874:	00bfffc4 	movi	r2,-1
 1028878:	18c01014 	ori	r3,r3,64
 102887c:	80c0030d 	sth	r3,12(r16)
 1028880:	003fb106 	br	1028748 <_gp+0xfffea464>
 1028884:	0029883a 	mov	r20,zero
 1028888:	0011883a 	mov	r8,zero
 102888c:	0039883a 	mov	fp,zero
 1028890:	0025883a 	mov	r18,zero
 1028894:	90001f26 	beq	r18,zero,1028914 <__sfvwrite_r+0x27c>
 1028898:	40006826 	beq	r8,zero,1028a3c <__sfvwrite_r+0x3a4>
 102889c:	a02f883a 	mov	r23,r20
 10288a0:	9500012e 	bgeu	r18,r20,10288a8 <__sfvwrite_r+0x210>
 10288a4:	902f883a 	mov	r23,r18
 10288a8:	81000017 	ldw	r4,0(r16)
 10288ac:	80800417 	ldw	r2,16(r16)
 10288b0:	b82d883a 	mov	r22,r23
 10288b4:	81800217 	ldw	r6,8(r16)
 10288b8:	81c00517 	ldw	r7,20(r16)
 10288bc:	1100022e 	bgeu	r2,r4,10288c8 <__sfvwrite_r+0x230>
 10288c0:	31c7883a 	add	r3,r6,r7
 10288c4:	1dc01816 	blt	r3,r23,1028928 <__sfvwrite_r+0x290>
 10288c8:	b9c03f16 	blt	r23,r7,10289c8 <__sfvwrite_r+0x330>
 10288cc:	80800917 	ldw	r2,36(r16)
 10288d0:	81400717 	ldw	r5,28(r16)
 10288d4:	a809883a 	mov	r4,r21
 10288d8:	da000115 	stw	r8,4(sp)
 10288dc:	e00d883a 	mov	r6,fp
 10288e0:	103ee83a 	callr	r2
 10288e4:	102d883a 	mov	r22,r2
 10288e8:	da000117 	ldw	r8,4(sp)
 10288ec:	00bfe00e 	bge	zero,r2,1028870 <_gp+0xfffea58c>
 10288f0:	a5a9c83a 	sub	r20,r20,r22
 10288f4:	a0001f26 	beq	r20,zero,1028974 <__sfvwrite_r+0x2dc>
 10288f8:	98800217 	ldw	r2,8(r19)
 10288fc:	e5b9883a 	add	fp,fp,r22
 1028900:	95a5c83a 	sub	r18,r18,r22
 1028904:	15adc83a 	sub	r22,r2,r22
 1028908:	9d800215 	stw	r22,8(r19)
 102890c:	b03f8d26 	beq	r22,zero,1028744 <_gp+0xfffea460>
 1028910:	903fe11e 	bne	r18,zero,1028898 <_gp+0xfffea5b4>
 1028914:	8f000017 	ldw	fp,0(r17)
 1028918:	8c800117 	ldw	r18,4(r17)
 102891c:	0011883a 	mov	r8,zero
 1028920:	8c400204 	addi	r17,r17,8
 1028924:	003fdb06 	br	1028894 <_gp+0xfffea5b0>
 1028928:	180d883a 	mov	r6,r3
 102892c:	e00b883a 	mov	r5,fp
 1028930:	da000115 	stw	r8,4(sp)
 1028934:	d8c00015 	stw	r3,0(sp)
 1028938:	102990c0 	call	102990c <memmove>
 102893c:	d8c00017 	ldw	r3,0(sp)
 1028940:	80800017 	ldw	r2,0(r16)
 1028944:	a809883a 	mov	r4,r21
 1028948:	800b883a 	mov	r5,r16
 102894c:	10c5883a 	add	r2,r2,r3
 1028950:	80800015 	stw	r2,0(r16)
 1028954:	d8c00015 	stw	r3,0(sp)
 1028958:	1027c8c0 	call	1027c8c <_fflush_r>
 102895c:	d8c00017 	ldw	r3,0(sp)
 1028960:	da000117 	ldw	r8,4(sp)
 1028964:	103fc21e 	bne	r2,zero,1028870 <_gp+0xfffea58c>
 1028968:	182d883a 	mov	r22,r3
 102896c:	a5a9c83a 	sub	r20,r20,r22
 1028970:	a03fe11e 	bne	r20,zero,10288f8 <_gp+0xfffea614>
 1028974:	a809883a 	mov	r4,r21
 1028978:	800b883a 	mov	r5,r16
 102897c:	1027c8c0 	call	1027c8c <_fflush_r>
 1028980:	103fbb1e 	bne	r2,zero,1028870 <_gp+0xfffea58c>
 1028984:	0011883a 	mov	r8,zero
 1028988:	003fdb06 	br	10288f8 <_gp+0xfffea614>
 102898c:	81000017 	ldw	r4,0(r16)
 1028990:	80800417 	ldw	r2,16(r16)
 1028994:	1100012e 	bgeu	r2,r4,102899c <__sfvwrite_r+0x304>
 1028998:	a4805a36 	bltu	r20,r18,1028b04 <__sfvwrite_r+0x46c>
 102899c:	81c00517 	ldw	r7,20(r16)
 10289a0:	91c01a36 	bltu	r18,r7,1028a0c <__sfvwrite_r+0x374>
 10289a4:	80800917 	ldw	r2,36(r16)
 10289a8:	81400717 	ldw	r5,28(r16)
 10289ac:	a809883a 	mov	r4,r21
 10289b0:	b80d883a 	mov	r6,r23
 10289b4:	103ee83a 	callr	r2
 10289b8:	1029883a 	mov	r20,r2
 10289bc:	00bfac0e 	bge	zero,r2,1028870 <_gp+0xfffea58c>
 10289c0:	a005883a 	mov	r2,r20
 10289c4:	003f9606 	br	1028820 <_gp+0xfffea53c>
 10289c8:	b80d883a 	mov	r6,r23
 10289cc:	e00b883a 	mov	r5,fp
 10289d0:	da000115 	stw	r8,4(sp)
 10289d4:	102990c0 	call	102990c <memmove>
 10289d8:	80800217 	ldw	r2,8(r16)
 10289dc:	80c00017 	ldw	r3,0(r16)
 10289e0:	da000117 	ldw	r8,4(sp)
 10289e4:	15c5c83a 	sub	r2,r2,r23
 10289e8:	1def883a 	add	r23,r3,r23
 10289ec:	80800215 	stw	r2,8(r16)
 10289f0:	85c00015 	stw	r23,0(r16)
 10289f4:	003fbe06 	br	10288f0 <_gp+0xfffea60c>
 10289f8:	81000017 	ldw	r4,0(r16)
 10289fc:	9039883a 	mov	fp,r18
 1028a00:	9029883a 	mov	r20,r18
 1028a04:	902d883a 	mov	r22,r18
 1028a08:	003f7b06 	br	10287f8 <_gp+0xfffea514>
 1028a0c:	b80b883a 	mov	r5,r23
 1028a10:	900d883a 	mov	r6,r18
 1028a14:	102990c0 	call	102990c <memmove>
 1028a18:	80c00217 	ldw	r3,8(r16)
 1028a1c:	80800017 	ldw	r2,0(r16)
 1028a20:	9029883a 	mov	r20,r18
 1028a24:	1c87c83a 	sub	r3,r3,r18
 1028a28:	1485883a 	add	r2,r2,r18
 1028a2c:	80800015 	stw	r2,0(r16)
 1028a30:	80c00215 	stw	r3,8(r16)
 1028a34:	9005883a 	mov	r2,r18
 1028a38:	003f7906 	br	1028820 <_gp+0xfffea53c>
 1028a3c:	e009883a 	mov	r4,fp
 1028a40:	01400284 	movi	r5,10
 1028a44:	900d883a 	mov	r6,r18
 1028a48:	10296ec0 	call	10296ec <memchr>
 1028a4c:	10003826 	beq	r2,zero,1028b30 <__sfvwrite_r+0x498>
 1028a50:	10800044 	addi	r2,r2,1
 1028a54:	1729c83a 	sub	r20,r2,fp
 1028a58:	02000044 	movi	r8,1
 1028a5c:	003f8f06 	br	102889c <_gp+0xfffea5b8>
 1028a60:	80800517 	ldw	r2,20(r16)
 1028a64:	81400417 	ldw	r5,16(r16)
 1028a68:	87000017 	ldw	fp,0(r16)
 1028a6c:	10a9883a 	add	r20,r2,r2
 1028a70:	a085883a 	add	r2,r20,r2
 1028a74:	1028d7fa 	srli	r20,r2,31
 1028a78:	e179c83a 	sub	fp,fp,r5
 1028a7c:	e1000044 	addi	r4,fp,1
 1028a80:	a085883a 	add	r2,r20,r2
 1028a84:	1029d07a 	srai	r20,r2,1
 1028a88:	2485883a 	add	r2,r4,r18
 1028a8c:	a00d883a 	mov	r6,r20
 1028a90:	a080022e 	bgeu	r20,r2,1028a9c <__sfvwrite_r+0x404>
 1028a94:	1029883a 	mov	r20,r2
 1028a98:	100d883a 	mov	r6,r2
 1028a9c:	18c1000c 	andi	r3,r3,1024
 1028aa0:	a809883a 	mov	r4,r21
 1028aa4:	183f6a26 	beq	r3,zero,1028850 <_gp+0xfffea56c>
 1028aa8:	300b883a 	mov	r5,r6
 1028aac:	1028f440 	call	1028f44 <_malloc_r>
 1028ab0:	102d883a 	mov	r22,r2
 1028ab4:	103f6c26 	beq	r2,zero,1028868 <_gp+0xfffea584>
 1028ab8:	81400417 	ldw	r5,16(r16)
 1028abc:	1009883a 	mov	r4,r2
 1028ac0:	e00d883a 	mov	r6,fp
 1028ac4:	10297d40 	call	10297d4 <memcpy>
 1028ac8:	8080030b 	ldhu	r2,12(r16)
 1028acc:	00fedfc4 	movi	r3,-1153
 1028ad0:	10c4703a 	and	r2,r2,r3
 1028ad4:	10802014 	ori	r2,r2,128
 1028ad8:	8080030d 	sth	r2,12(r16)
 1028adc:	b709883a 	add	r4,r22,fp
 1028ae0:	a707c83a 	sub	r3,r20,fp
 1028ae4:	85800415 	stw	r22,16(r16)
 1028ae8:	85000515 	stw	r20,20(r16)
 1028aec:	81000015 	stw	r4,0(r16)
 1028af0:	9039883a 	mov	fp,r18
 1028af4:	80c00215 	stw	r3,8(r16)
 1028af8:	9029883a 	mov	r20,r18
 1028afc:	902d883a 	mov	r22,r18
 1028b00:	003f3d06 	br	10287f8 <_gp+0xfffea514>
 1028b04:	b80b883a 	mov	r5,r23
 1028b08:	a00d883a 	mov	r6,r20
 1028b0c:	102990c0 	call	102990c <memmove>
 1028b10:	80800017 	ldw	r2,0(r16)
 1028b14:	a809883a 	mov	r4,r21
 1028b18:	800b883a 	mov	r5,r16
 1028b1c:	1505883a 	add	r2,r2,r20
 1028b20:	80800015 	stw	r2,0(r16)
 1028b24:	1027c8c0 	call	1027c8c <_fflush_r>
 1028b28:	103fa526 	beq	r2,zero,10289c0 <_gp+0xfffea6dc>
 1028b2c:	003f5006 	br	1028870 <_gp+0xfffea58c>
 1028b30:	95000044 	addi	r20,r18,1
 1028b34:	02000044 	movi	r8,1
 1028b38:	003f5806 	br	102889c <_gp+0xfffea5b8>

01028b3c <_fwalk>:
 1028b3c:	defff804 	addi	sp,sp,-32
 1028b40:	dd400515 	stw	r21,20(sp)
 1028b44:	2540b804 	addi	r21,r4,736
 1028b48:	dd800615 	stw	r22,24(sp)
 1028b4c:	dd000415 	stw	r20,16(sp)
 1028b50:	dfc00715 	stw	ra,28(sp)
 1028b54:	dcc00315 	stw	r19,12(sp)
 1028b58:	dc800215 	stw	r18,8(sp)
 1028b5c:	dc400115 	stw	r17,4(sp)
 1028b60:	dc000015 	stw	r16,0(sp)
 1028b64:	2829883a 	mov	r20,r5
 1028b68:	002d883a 	mov	r22,zero
 1028b6c:	10282440 	call	1028244 <__sfp_lock_acquire>
 1028b70:	a8001426 	beq	r21,zero,1028bc4 <_fwalk+0x88>
 1028b74:	04ffffc4 	movi	r19,-1
 1028b78:	ac400117 	ldw	r17,4(r21)
 1028b7c:	ac800217 	ldw	r18,8(r21)
 1028b80:	8c7fffc4 	addi	r17,r17,-1
 1028b84:	88000d16 	blt	r17,zero,1028bbc <_fwalk+0x80>
 1028b88:	94000304 	addi	r16,r18,12
 1028b8c:	94800384 	addi	r18,r18,14
 1028b90:	80c0000f 	ldh	r3,0(r16)
 1028b94:	8c7fffc4 	addi	r17,r17,-1
 1028b98:	813ffd04 	addi	r4,r16,-12
 1028b9c:	18000426 	beq	r3,zero,1028bb0 <_fwalk+0x74>
 1028ba0:	90c0000f 	ldh	r3,0(r18)
 1028ba4:	1cc00226 	beq	r3,r19,1028bb0 <_fwalk+0x74>
 1028ba8:	a03ee83a 	callr	r20
 1028bac:	b0acb03a 	or	r22,r22,r2
 1028bb0:	84001a04 	addi	r16,r16,104
 1028bb4:	94801a04 	addi	r18,r18,104
 1028bb8:	8cfff51e 	bne	r17,r19,1028b90 <_gp+0xfffea8ac>
 1028bbc:	ad400017 	ldw	r21,0(r21)
 1028bc0:	a83fed1e 	bne	r21,zero,1028b78 <_gp+0xfffea894>
 1028bc4:	10282480 	call	1028248 <__sfp_lock_release>
 1028bc8:	b005883a 	mov	r2,r22
 1028bcc:	dfc00717 	ldw	ra,28(sp)
 1028bd0:	dd800617 	ldw	r22,24(sp)
 1028bd4:	dd400517 	ldw	r21,20(sp)
 1028bd8:	dd000417 	ldw	r20,16(sp)
 1028bdc:	dcc00317 	ldw	r19,12(sp)
 1028be0:	dc800217 	ldw	r18,8(sp)
 1028be4:	dc400117 	ldw	r17,4(sp)
 1028be8:	dc000017 	ldw	r16,0(sp)
 1028bec:	dec00804 	addi	sp,sp,32
 1028bf0:	f800283a 	ret

01028bf4 <_fwalk_reent>:
 1028bf4:	defff804 	addi	sp,sp,-32
 1028bf8:	dd400515 	stw	r21,20(sp)
 1028bfc:	2540b804 	addi	r21,r4,736
 1028c00:	dd800615 	stw	r22,24(sp)
 1028c04:	dd000415 	stw	r20,16(sp)
 1028c08:	dcc00315 	stw	r19,12(sp)
 1028c0c:	dfc00715 	stw	ra,28(sp)
 1028c10:	dc800215 	stw	r18,8(sp)
 1028c14:	dc400115 	stw	r17,4(sp)
 1028c18:	dc000015 	stw	r16,0(sp)
 1028c1c:	2027883a 	mov	r19,r4
 1028c20:	2829883a 	mov	r20,r5
 1028c24:	002d883a 	mov	r22,zero
 1028c28:	10282440 	call	1028244 <__sfp_lock_acquire>
 1028c2c:	a8001326 	beq	r21,zero,1028c7c <_fwalk_reent+0x88>
 1028c30:	04bfffc4 	movi	r18,-1
 1028c34:	ac400117 	ldw	r17,4(r21)
 1028c38:	ac000217 	ldw	r16,8(r21)
 1028c3c:	8c7fffc4 	addi	r17,r17,-1
 1028c40:	88000c16 	blt	r17,zero,1028c74 <_fwalk_reent+0x80>
 1028c44:	84000304 	addi	r16,r16,12
 1028c48:	80c0000f 	ldh	r3,0(r16)
 1028c4c:	8c7fffc4 	addi	r17,r17,-1
 1028c50:	817ffd04 	addi	r5,r16,-12
 1028c54:	18000526 	beq	r3,zero,1028c6c <_fwalk_reent+0x78>
 1028c58:	80c0008f 	ldh	r3,2(r16)
 1028c5c:	9809883a 	mov	r4,r19
 1028c60:	1c800226 	beq	r3,r18,1028c6c <_fwalk_reent+0x78>
 1028c64:	a03ee83a 	callr	r20
 1028c68:	b0acb03a 	or	r22,r22,r2
 1028c6c:	84001a04 	addi	r16,r16,104
 1028c70:	8cbff51e 	bne	r17,r18,1028c48 <_gp+0xfffea964>
 1028c74:	ad400017 	ldw	r21,0(r21)
 1028c78:	a83fee1e 	bne	r21,zero,1028c34 <_gp+0xfffea950>
 1028c7c:	10282480 	call	1028248 <__sfp_lock_release>
 1028c80:	b005883a 	mov	r2,r22
 1028c84:	dfc00717 	ldw	ra,28(sp)
 1028c88:	dd800617 	ldw	r22,24(sp)
 1028c8c:	dd400517 	ldw	r21,20(sp)
 1028c90:	dd000417 	ldw	r20,16(sp)
 1028c94:	dcc00317 	ldw	r19,12(sp)
 1028c98:	dc800217 	ldw	r18,8(sp)
 1028c9c:	dc400117 	ldw	r17,4(sp)
 1028ca0:	dc000017 	ldw	r16,0(sp)
 1028ca4:	dec00804 	addi	sp,sp,32
 1028ca8:	f800283a 	ret

01028cac <_setlocale_r>:
 1028cac:	30001b26 	beq	r6,zero,1028d1c <_setlocale_r+0x70>
 1028cb0:	014040f4 	movhi	r5,259
 1028cb4:	defffe04 	addi	sp,sp,-8
 1028cb8:	29516704 	addi	r5,r5,17820
 1028cbc:	3009883a 	mov	r4,r6
 1028cc0:	dc000015 	stw	r16,0(sp)
 1028cc4:	dfc00115 	stw	ra,4(sp)
 1028cc8:	3021883a 	mov	r16,r6
 1028ccc:	102b2bc0 	call	102b2bc <strcmp>
 1028cd0:	1000061e 	bne	r2,zero,1028cec <_setlocale_r+0x40>
 1028cd4:	008040f4 	movhi	r2,259
 1028cd8:	10916604 	addi	r2,r2,17816
 1028cdc:	dfc00117 	ldw	ra,4(sp)
 1028ce0:	dc000017 	ldw	r16,0(sp)
 1028ce4:	dec00204 	addi	sp,sp,8
 1028ce8:	f800283a 	ret
 1028cec:	014040f4 	movhi	r5,259
 1028cf0:	29516604 	addi	r5,r5,17816
 1028cf4:	8009883a 	mov	r4,r16
 1028cf8:	102b2bc0 	call	102b2bc <strcmp>
 1028cfc:	103ff526 	beq	r2,zero,1028cd4 <_gp+0xfffea9f0>
 1028d00:	014040f4 	movhi	r5,259
 1028d04:	29514904 	addi	r5,r5,17700
 1028d08:	8009883a 	mov	r4,r16
 1028d0c:	102b2bc0 	call	102b2bc <strcmp>
 1028d10:	103ff026 	beq	r2,zero,1028cd4 <_gp+0xfffea9f0>
 1028d14:	0005883a 	mov	r2,zero
 1028d18:	003ff006 	br	1028cdc <_gp+0xfffea9f8>
 1028d1c:	008040f4 	movhi	r2,259
 1028d20:	10916604 	addi	r2,r2,17816
 1028d24:	f800283a 	ret

01028d28 <__locale_charset>:
 1028d28:	008040f4 	movhi	r2,259
 1028d2c:	10931f04 	addi	r2,r2,19580
 1028d30:	f800283a 	ret

01028d34 <__locale_mb_cur_max>:
 1028d34:	008040f4 	movhi	r2,259
 1028d38:	1098bb04 	addi	r2,r2,25324
 1028d3c:	10800017 	ldw	r2,0(r2)
 1028d40:	f800283a 	ret

01028d44 <__locale_msgcharset>:
 1028d44:	008040f4 	movhi	r2,259
 1028d48:	10931704 	addi	r2,r2,19548
 1028d4c:	f800283a 	ret

01028d50 <__locale_cjk_lang>:
 1028d50:	0005883a 	mov	r2,zero
 1028d54:	f800283a 	ret

01028d58 <_localeconv_r>:
 1028d58:	008040f4 	movhi	r2,259
 1028d5c:	10932704 	addi	r2,r2,19612
 1028d60:	f800283a 	ret

01028d64 <setlocale>:
 1028d64:	00c040f4 	movhi	r3,259
 1028d68:	18d8ba04 	addi	r3,r3,25320
 1028d6c:	2005883a 	mov	r2,r4
 1028d70:	19000017 	ldw	r4,0(r3)
 1028d74:	280d883a 	mov	r6,r5
 1028d78:	100b883a 	mov	r5,r2
 1028d7c:	1028cac1 	jmpi	1028cac <_setlocale_r>

01028d80 <localeconv>:
 1028d80:	008040f4 	movhi	r2,259
 1028d84:	10932704 	addi	r2,r2,19612
 1028d88:	f800283a 	ret

01028d8c <__smakebuf_r>:
 1028d8c:	2880030b 	ldhu	r2,12(r5)
 1028d90:	10c0008c 	andi	r3,r2,2
 1028d94:	1800401e 	bne	r3,zero,1028e98 <__smakebuf_r+0x10c>
 1028d98:	deffec04 	addi	sp,sp,-80
 1028d9c:	dc000f15 	stw	r16,60(sp)
 1028da0:	2821883a 	mov	r16,r5
 1028da4:	2940038f 	ldh	r5,14(r5)
 1028da8:	dc401015 	stw	r17,64(sp)
 1028dac:	dfc01315 	stw	ra,76(sp)
 1028db0:	dcc01215 	stw	r19,72(sp)
 1028db4:	dc801115 	stw	r18,68(sp)
 1028db8:	2023883a 	mov	r17,r4
 1028dbc:	28001b16 	blt	r5,zero,1028e2c <__smakebuf_r+0xa0>
 1028dc0:	d80d883a 	mov	r6,sp
 1028dc4:	102de880 	call	102de88 <_fstat_r>
 1028dc8:	10001716 	blt	r2,zero,1028e28 <__smakebuf_r+0x9c>
 1028dcc:	d8800117 	ldw	r2,4(sp)
 1028dd0:	00e00014 	movui	r3,32768
 1028dd4:	10bc000c 	andi	r2,r2,61440
 1028dd8:	10c03726 	beq	r2,r3,1028eb8 <__smakebuf_r+0x12c>
 1028ddc:	80c0030b 	ldhu	r3,12(r16)
 1028de0:	18c20014 	ori	r3,r3,2048
 1028de4:	80c0030d 	sth	r3,12(r16)
 1028de8:	00c80004 	movi	r3,8192
 1028dec:	10c03c1e 	bne	r2,r3,1028ee0 <__smakebuf_r+0x154>
 1028df0:	8140038f 	ldh	r5,14(r16)
 1028df4:	8809883a 	mov	r4,r17
 1028df8:	102dee00 	call	102dee0 <_isatty_r>
 1028dfc:	10004e26 	beq	r2,zero,1028f38 <__smakebuf_r+0x1ac>
 1028e00:	8080030b 	ldhu	r2,12(r16)
 1028e04:	04c00044 	movi	r19,1
 1028e08:	80c010c4 	addi	r3,r16,67
 1028e0c:	14c4b03a 	or	r2,r2,r19
 1028e10:	8080030d 	sth	r2,12(r16)
 1028e14:	80c00015 	stw	r3,0(r16)
 1028e18:	80c00415 	stw	r3,16(r16)
 1028e1c:	84c00515 	stw	r19,20(r16)
 1028e20:	04810004 	movi	r18,1024
 1028e24:	00000706 	br	1028e44 <__smakebuf_r+0xb8>
 1028e28:	8080030b 	ldhu	r2,12(r16)
 1028e2c:	10c0200c 	andi	r3,r2,128
 1028e30:	18001f1e 	bne	r3,zero,1028eb0 <__smakebuf_r+0x124>
 1028e34:	04810004 	movi	r18,1024
 1028e38:	10820014 	ori	r2,r2,2048
 1028e3c:	8080030d 	sth	r2,12(r16)
 1028e40:	0027883a 	mov	r19,zero
 1028e44:	8809883a 	mov	r4,r17
 1028e48:	900b883a 	mov	r5,r18
 1028e4c:	1028f440 	call	1028f44 <_malloc_r>
 1028e50:	10002e26 	beq	r2,zero,1028f0c <__smakebuf_r+0x180>
 1028e54:	80c0030b 	ldhu	r3,12(r16)
 1028e58:	010040b4 	movhi	r4,258
 1028e5c:	211fbd04 	addi	r4,r4,32500
 1028e60:	89000f15 	stw	r4,60(r17)
 1028e64:	18c02014 	ori	r3,r3,128
 1028e68:	80c0030d 	sth	r3,12(r16)
 1028e6c:	80800015 	stw	r2,0(r16)
 1028e70:	80800415 	stw	r2,16(r16)
 1028e74:	84800515 	stw	r18,20(r16)
 1028e78:	98001c1e 	bne	r19,zero,1028eec <__smakebuf_r+0x160>
 1028e7c:	dfc01317 	ldw	ra,76(sp)
 1028e80:	dcc01217 	ldw	r19,72(sp)
 1028e84:	dc801117 	ldw	r18,68(sp)
 1028e88:	dc401017 	ldw	r17,64(sp)
 1028e8c:	dc000f17 	ldw	r16,60(sp)
 1028e90:	dec01404 	addi	sp,sp,80
 1028e94:	f800283a 	ret
 1028e98:	288010c4 	addi	r2,r5,67
 1028e9c:	28800015 	stw	r2,0(r5)
 1028ea0:	28800415 	stw	r2,16(r5)
 1028ea4:	00800044 	movi	r2,1
 1028ea8:	28800515 	stw	r2,20(r5)
 1028eac:	f800283a 	ret
 1028eb0:	04801004 	movi	r18,64
 1028eb4:	003fe006 	br	1028e38 <_gp+0xfffeab54>
 1028eb8:	81000a17 	ldw	r4,40(r16)
 1028ebc:	00c040f4 	movhi	r3,259
 1028ec0:	18ec9604 	addi	r3,r3,-19880
 1028ec4:	20ffc51e 	bne	r4,r3,1028ddc <_gp+0xfffeaaf8>
 1028ec8:	80c0030b 	ldhu	r3,12(r16)
 1028ecc:	01010004 	movi	r4,1024
 1028ed0:	81001315 	stw	r4,76(r16)
 1028ed4:	1906b03a 	or	r3,r3,r4
 1028ed8:	80c0030d 	sth	r3,12(r16)
 1028edc:	003fc206 	br	1028de8 <_gp+0xfffeab04>
 1028ee0:	0027883a 	mov	r19,zero
 1028ee4:	04810004 	movi	r18,1024
 1028ee8:	003fd606 	br	1028e44 <_gp+0xfffeab60>
 1028eec:	8140038f 	ldh	r5,14(r16)
 1028ef0:	8809883a 	mov	r4,r17
 1028ef4:	102dee00 	call	102dee0 <_isatty_r>
 1028ef8:	103fe026 	beq	r2,zero,1028e7c <_gp+0xfffeab98>
 1028efc:	8080030b 	ldhu	r2,12(r16)
 1028f00:	10800054 	ori	r2,r2,1
 1028f04:	8080030d 	sth	r2,12(r16)
 1028f08:	003fdc06 	br	1028e7c <_gp+0xfffeab98>
 1028f0c:	8080030b 	ldhu	r2,12(r16)
 1028f10:	10c0800c 	andi	r3,r2,512
 1028f14:	183fd91e 	bne	r3,zero,1028e7c <_gp+0xfffeab98>
 1028f18:	10800094 	ori	r2,r2,2
 1028f1c:	80c010c4 	addi	r3,r16,67
 1028f20:	8080030d 	sth	r2,12(r16)
 1028f24:	00800044 	movi	r2,1
 1028f28:	80c00015 	stw	r3,0(r16)
 1028f2c:	80c00415 	stw	r3,16(r16)
 1028f30:	80800515 	stw	r2,20(r16)
 1028f34:	003fd106 	br	1028e7c <_gp+0xfffeab98>
 1028f38:	04c00044 	movi	r19,1
 1028f3c:	04810004 	movi	r18,1024
 1028f40:	003fc006 	br	1028e44 <_gp+0xfffeab60>

01028f44 <_malloc_r>:
 1028f44:	defff504 	addi	sp,sp,-44
 1028f48:	dc800315 	stw	r18,12(sp)
 1028f4c:	dfc00a15 	stw	ra,40(sp)
 1028f50:	df000915 	stw	fp,36(sp)
 1028f54:	ddc00815 	stw	r23,32(sp)
 1028f58:	dd800715 	stw	r22,28(sp)
 1028f5c:	dd400615 	stw	r21,24(sp)
 1028f60:	dd000515 	stw	r20,20(sp)
 1028f64:	dcc00415 	stw	r19,16(sp)
 1028f68:	dc400215 	stw	r17,8(sp)
 1028f6c:	dc000115 	stw	r16,4(sp)
 1028f70:	288002c4 	addi	r2,r5,11
 1028f74:	00c00584 	movi	r3,22
 1028f78:	2025883a 	mov	r18,r4
 1028f7c:	18802a2e 	bgeu	r3,r2,1029028 <_malloc_r+0xe4>
 1028f80:	047ffe04 	movi	r17,-8
 1028f84:	1462703a 	and	r17,r2,r17
 1028f88:	88009e16 	blt	r17,zero,1029204 <_malloc_r+0x2c0>
 1028f8c:	89409d36 	bltu	r17,r5,1029204 <_malloc_r+0x2c0>
 1028f90:	1031a6c0 	call	1031a6c <__malloc_lock>
 1028f94:	00807dc4 	movi	r2,503
 1028f98:	14402736 	bltu	r2,r17,1029038 <_malloc_r+0xf4>
 1028f9c:	8806d0fa 	srli	r3,r17,3
 1028fa0:	04c040f4 	movhi	r19,259
 1028fa4:	9cd33504 	addi	r19,r19,19668
 1028fa8:	18c5883a 	add	r2,r3,r3
 1028fac:	1085883a 	add	r2,r2,r2
 1028fb0:	1085883a 	add	r2,r2,r2
 1028fb4:	9885883a 	add	r2,r19,r2
 1028fb8:	14000317 	ldw	r16,12(r2)
 1028fbc:	80814a26 	beq	r16,r2,10294e8 <_malloc_r+0x5a4>
 1028fc0:	80c00117 	ldw	r3,4(r16)
 1028fc4:	81000317 	ldw	r4,12(r16)
 1028fc8:	00bfff04 	movi	r2,-4
 1028fcc:	1884703a 	and	r2,r3,r2
 1028fd0:	81400217 	ldw	r5,8(r16)
 1028fd4:	8085883a 	add	r2,r16,r2
 1028fd8:	10c00117 	ldw	r3,4(r2)
 1028fdc:	29000315 	stw	r4,12(r5)
 1028fe0:	21400215 	stw	r5,8(r4)
 1028fe4:	18c00054 	ori	r3,r3,1
 1028fe8:	10c00115 	stw	r3,4(r2)
 1028fec:	9009883a 	mov	r4,r18
 1028ff0:	1031a8c0 	call	1031a8c <__malloc_unlock>
 1028ff4:	80800204 	addi	r2,r16,8
 1028ff8:	dfc00a17 	ldw	ra,40(sp)
 1028ffc:	df000917 	ldw	fp,36(sp)
 1029000:	ddc00817 	ldw	r23,32(sp)
 1029004:	dd800717 	ldw	r22,28(sp)
 1029008:	dd400617 	ldw	r21,24(sp)
 102900c:	dd000517 	ldw	r20,20(sp)
 1029010:	dcc00417 	ldw	r19,16(sp)
 1029014:	dc800317 	ldw	r18,12(sp)
 1029018:	dc400217 	ldw	r17,8(sp)
 102901c:	dc000117 	ldw	r16,4(sp)
 1029020:	dec00b04 	addi	sp,sp,44
 1029024:	f800283a 	ret
 1029028:	04400404 	movi	r17,16
 102902c:	89407536 	bltu	r17,r5,1029204 <_malloc_r+0x2c0>
 1029030:	1031a6c0 	call	1031a6c <__malloc_lock>
 1029034:	003fd906 	br	1028f9c <_gp+0xfffeacb8>
 1029038:	8806d27a 	srli	r3,r17,9
 102903c:	18007526 	beq	r3,zero,1029214 <_malloc_r+0x2d0>
 1029040:	00800104 	movi	r2,4
 1029044:	10c0ef36 	bltu	r2,r3,1029404 <_malloc_r+0x4c0>
 1029048:	8806d1ba 	srli	r3,r17,6
 102904c:	19c00e04 	addi	r7,r3,56
 1029050:	39cb883a 	add	r5,r7,r7
 1029054:	04c040f4 	movhi	r19,259
 1029058:	294b883a 	add	r5,r5,r5
 102905c:	9cd33504 	addi	r19,r19,19668
 1029060:	294b883a 	add	r5,r5,r5
 1029064:	994b883a 	add	r5,r19,r5
 1029068:	2c000317 	ldw	r16,12(r5)
 102906c:	2c000e26 	beq	r5,r16,10290a8 <_malloc_r+0x164>
 1029070:	80800117 	ldw	r2,4(r16)
 1029074:	01bfff04 	movi	r6,-4
 1029078:	010003c4 	movi	r4,15
 102907c:	1184703a 	and	r2,r2,r6
 1029080:	1447c83a 	sub	r3,r2,r17
 1029084:	20c00716 	blt	r4,r3,10290a4 <_malloc_r+0x160>
 1029088:	1800650e 	bge	r3,zero,1029220 <_malloc_r+0x2dc>
 102908c:	84000317 	ldw	r16,12(r16)
 1029090:	2c000526 	beq	r5,r16,10290a8 <_malloc_r+0x164>
 1029094:	80800117 	ldw	r2,4(r16)
 1029098:	1184703a 	and	r2,r2,r6
 102909c:	1447c83a 	sub	r3,r2,r17
 10290a0:	20fff90e 	bge	r4,r3,1029088 <_gp+0xfffeada4>
 10290a4:	39ffffc4 	addi	r7,r7,-1
 10290a8:	38c00044 	addi	r3,r7,1
 10290ac:	018040f4 	movhi	r6,259
 10290b0:	9c000417 	ldw	r16,16(r19)
 10290b4:	31933504 	addi	r6,r6,19668
 10290b8:	32400204 	addi	r9,r6,8
 10290bc:	82410326 	beq	r16,r9,10294cc <_malloc_r+0x588>
 10290c0:	81000117 	ldw	r4,4(r16)
 10290c4:	00bfff04 	movi	r2,-4
 10290c8:	208e703a 	and	r7,r4,r2
 10290cc:	3c45c83a 	sub	r2,r7,r17
 10290d0:	010003c4 	movi	r4,15
 10290d4:	2080ee16 	blt	r4,r2,1029490 <_malloc_r+0x54c>
 10290d8:	32400515 	stw	r9,20(r6)
 10290dc:	32400415 	stw	r9,16(r6)
 10290e0:	1000510e 	bge	r2,zero,1029228 <_malloc_r+0x2e4>
 10290e4:	00807fc4 	movi	r2,511
 10290e8:	11c0ce36 	bltu	r2,r7,1029424 <_malloc_r+0x4e0>
 10290ec:	3808d0fa 	srli	r4,r7,3
 10290f0:	01c00044 	movi	r7,1
 10290f4:	30800117 	ldw	r2,4(r6)
 10290f8:	210b883a 	add	r5,r4,r4
 10290fc:	294b883a 	add	r5,r5,r5
 1029100:	2009d0ba 	srai	r4,r4,2
 1029104:	294b883a 	add	r5,r5,r5
 1029108:	298b883a 	add	r5,r5,r6
 102910c:	2a000217 	ldw	r8,8(r5)
 1029110:	3908983a 	sll	r4,r7,r4
 1029114:	81400315 	stw	r5,12(r16)
 1029118:	82000215 	stw	r8,8(r16)
 102911c:	2088b03a 	or	r4,r4,r2
 1029120:	2c000215 	stw	r16,8(r5)
 1029124:	31000115 	stw	r4,4(r6)
 1029128:	44000315 	stw	r16,12(r8)
 102912c:	1805d0ba 	srai	r2,r3,2
 1029130:	01400044 	movi	r5,1
 1029134:	288a983a 	sll	r5,r5,r2
 1029138:	21404336 	bltu	r4,r5,1029248 <_malloc_r+0x304>
 102913c:	2144703a 	and	r2,r4,r5
 1029140:	10000a1e 	bne	r2,zero,102916c <_malloc_r+0x228>
 1029144:	00bfff04 	movi	r2,-4
 1029148:	294b883a 	add	r5,r5,r5
 102914c:	1886703a 	and	r3,r3,r2
 1029150:	2144703a 	and	r2,r4,r5
 1029154:	18c00104 	addi	r3,r3,4
 1029158:	1000041e 	bne	r2,zero,102916c <_malloc_r+0x228>
 102915c:	294b883a 	add	r5,r5,r5
 1029160:	2144703a 	and	r2,r4,r5
 1029164:	18c00104 	addi	r3,r3,4
 1029168:	103ffc26 	beq	r2,zero,102915c <_gp+0xfffeae78>
 102916c:	023fff04 	movi	r8,-4
 1029170:	01c003c4 	movi	r7,15
 1029174:	18c5883a 	add	r2,r3,r3
 1029178:	1085883a 	add	r2,r2,r2
 102917c:	1085883a 	add	r2,r2,r2
 1029180:	9895883a 	add	r10,r19,r2
 1029184:	52c00304 	addi	r11,r10,12
 1029188:	1819883a 	mov	r12,r3
 102918c:	5c000017 	ldw	r16,0(r11)
 1029190:	59bffd04 	addi	r6,r11,-12
 1029194:	8180041e 	bne	r16,r6,10291a8 <_malloc_r+0x264>
 1029198:	0000ce06 	br	10294d4 <_malloc_r+0x590>
 102919c:	2000d70e 	bge	r4,zero,10294fc <_malloc_r+0x5b8>
 10291a0:	84000317 	ldw	r16,12(r16)
 10291a4:	8180cb26 	beq	r16,r6,10294d4 <_malloc_r+0x590>
 10291a8:	80800117 	ldw	r2,4(r16)
 10291ac:	1204703a 	and	r2,r2,r8
 10291b0:	1449c83a 	sub	r4,r2,r17
 10291b4:	393ff90e 	bge	r7,r4,102919c <_gp+0xfffeaeb8>
 10291b8:	80800317 	ldw	r2,12(r16)
 10291bc:	80c00217 	ldw	r3,8(r16)
 10291c0:	89400054 	ori	r5,r17,1
 10291c4:	81400115 	stw	r5,4(r16)
 10291c8:	18800315 	stw	r2,12(r3)
 10291cc:	10c00215 	stw	r3,8(r2)
 10291d0:	8463883a 	add	r17,r16,r17
 10291d4:	9c400515 	stw	r17,20(r19)
 10291d8:	9c400415 	stw	r17,16(r19)
 10291dc:	20800054 	ori	r2,r4,1
 10291e0:	88800115 	stw	r2,4(r17)
 10291e4:	8a400315 	stw	r9,12(r17)
 10291e8:	8a400215 	stw	r9,8(r17)
 10291ec:	8923883a 	add	r17,r17,r4
 10291f0:	89000015 	stw	r4,0(r17)
 10291f4:	9009883a 	mov	r4,r18
 10291f8:	1031a8c0 	call	1031a8c <__malloc_unlock>
 10291fc:	80800204 	addi	r2,r16,8
 1029200:	003f7d06 	br	1028ff8 <_gp+0xfffead14>
 1029204:	00800304 	movi	r2,12
 1029208:	90800015 	stw	r2,0(r18)
 102920c:	0005883a 	mov	r2,zero
 1029210:	003f7906 	br	1028ff8 <_gp+0xfffead14>
 1029214:	01401f84 	movi	r5,126
 1029218:	01c00fc4 	movi	r7,63
 102921c:	003f8d06 	br	1029054 <_gp+0xfffead70>
 1029220:	81000317 	ldw	r4,12(r16)
 1029224:	003f6a06 	br	1028fd0 <_gp+0xfffeacec>
 1029228:	81c5883a 	add	r2,r16,r7
 102922c:	10c00117 	ldw	r3,4(r2)
 1029230:	9009883a 	mov	r4,r18
 1029234:	18c00054 	ori	r3,r3,1
 1029238:	10c00115 	stw	r3,4(r2)
 102923c:	1031a8c0 	call	1031a8c <__malloc_unlock>
 1029240:	80800204 	addi	r2,r16,8
 1029244:	003f6c06 	br	1028ff8 <_gp+0xfffead14>
 1029248:	9c000217 	ldw	r16,8(r19)
 102924c:	00bfff04 	movi	r2,-4
 1029250:	85800117 	ldw	r22,4(r16)
 1029254:	b0ac703a 	and	r22,r22,r2
 1029258:	b4400336 	bltu	r22,r17,1029268 <_malloc_r+0x324>
 102925c:	b445c83a 	sub	r2,r22,r17
 1029260:	00c003c4 	movi	r3,15
 1029264:	18805d16 	blt	r3,r2,10293dc <_malloc_r+0x498>
 1029268:	05c040f4 	movhi	r23,259
 102926c:	008040f4 	movhi	r2,259
 1029270:	bdd8bc04 	addi	r23,r23,25328
 1029274:	109f8904 	addi	r2,r2,32292
 1029278:	15400017 	ldw	r21,0(r2)
 102927c:	b9000017 	ldw	r4,0(r23)
 1029280:	00ffffc4 	movi	r3,-1
 1029284:	858d883a 	add	r6,r16,r22
 1029288:	8d6b883a 	add	r21,r17,r21
 102928c:	20c0e426 	beq	r4,r3,1029620 <_malloc_r+0x6dc>
 1029290:	ad4403c4 	addi	r21,r21,4111
 1029294:	00fc0004 	movi	r3,-4096
 1029298:	a8ea703a 	and	r21,r21,r3
 102929c:	9009883a 	mov	r4,r18
 10292a0:	a80b883a 	mov	r5,r21
 10292a4:	d9800015 	stw	r6,0(sp)
 10292a8:	102b12c0 	call	102b12c <_sbrk_r>
 10292ac:	00ffffc4 	movi	r3,-1
 10292b0:	1029883a 	mov	r20,r2
 10292b4:	d9800017 	ldw	r6,0(sp)
 10292b8:	10c0a426 	beq	r2,r3,102954c <_malloc_r+0x608>
 10292bc:	1180a236 	bltu	r2,r6,1029548 <_malloc_r+0x604>
 10292c0:	070040f4 	movhi	fp,259
 10292c4:	e71f9204 	addi	fp,fp,32328
 10292c8:	e0c00017 	ldw	r3,0(fp)
 10292cc:	a8c7883a 	add	r3,r21,r3
 10292d0:	e0c00015 	stw	r3,0(fp)
 10292d4:	3500da26 	beq	r6,r20,1029640 <_malloc_r+0x6fc>
 10292d8:	b9000017 	ldw	r4,0(r23)
 10292dc:	00bfffc4 	movi	r2,-1
 10292e0:	2080e426 	beq	r4,r2,1029674 <_malloc_r+0x730>
 10292e4:	a185c83a 	sub	r2,r20,r6
 10292e8:	1885883a 	add	r2,r3,r2
 10292ec:	e0800015 	stw	r2,0(fp)
 10292f0:	a0c001cc 	andi	r3,r20,7
 10292f4:	1800b526 	beq	r3,zero,10295cc <_malloc_r+0x688>
 10292f8:	a0e9c83a 	sub	r20,r20,r3
 10292fc:	00840204 	movi	r2,4104
 1029300:	a5000204 	addi	r20,r20,8
 1029304:	10c7c83a 	sub	r3,r2,r3
 1029308:	a545883a 	add	r2,r20,r21
 102930c:	1083ffcc 	andi	r2,r2,4095
 1029310:	18abc83a 	sub	r21,r3,r2
 1029314:	9009883a 	mov	r4,r18
 1029318:	a80b883a 	mov	r5,r21
 102931c:	102b12c0 	call	102b12c <_sbrk_r>
 1029320:	00ffffc4 	movi	r3,-1
 1029324:	10c0d026 	beq	r2,r3,1029668 <_malloc_r+0x724>
 1029328:	1507c83a 	sub	r3,r2,r20
 102932c:	a8c7883a 	add	r3,r21,r3
 1029330:	18c00054 	ori	r3,r3,1
 1029334:	e0800017 	ldw	r2,0(fp)
 1029338:	9d000215 	stw	r20,8(r19)
 102933c:	a0c00115 	stw	r3,4(r20)
 1029340:	a887883a 	add	r3,r21,r2
 1029344:	e0c00015 	stw	r3,0(fp)
 1029348:	84c00e26 	beq	r16,r19,1029384 <_malloc_r+0x440>
 102934c:	018003c4 	movi	r6,15
 1029350:	3580a02e 	bgeu	r6,r22,10295d4 <_malloc_r+0x690>
 1029354:	81400117 	ldw	r5,4(r16)
 1029358:	013ffe04 	movi	r4,-8
 102935c:	b0bffd04 	addi	r2,r22,-12
 1029360:	1104703a 	and	r2,r2,r4
 1029364:	2900004c 	andi	r4,r5,1
 1029368:	1108b03a 	or	r4,r2,r4
 102936c:	81000115 	stw	r4,4(r16)
 1029370:	01400144 	movi	r5,5
 1029374:	8089883a 	add	r4,r16,r2
 1029378:	21400115 	stw	r5,4(r4)
 102937c:	21400215 	stw	r5,8(r4)
 1029380:	3080c036 	bltu	r6,r2,1029684 <_malloc_r+0x740>
 1029384:	008040f4 	movhi	r2,259
 1029388:	109f8804 	addi	r2,r2,32288
 102938c:	11000017 	ldw	r4,0(r2)
 1029390:	20c0012e 	bgeu	r4,r3,1029398 <_malloc_r+0x454>
 1029394:	10c00015 	stw	r3,0(r2)
 1029398:	008040f4 	movhi	r2,259
 102939c:	109f8704 	addi	r2,r2,32284
 10293a0:	11000017 	ldw	r4,0(r2)
 10293a4:	9c000217 	ldw	r16,8(r19)
 10293a8:	20c0012e 	bgeu	r4,r3,10293b0 <_malloc_r+0x46c>
 10293ac:	10c00015 	stw	r3,0(r2)
 10293b0:	80c00117 	ldw	r3,4(r16)
 10293b4:	00bfff04 	movi	r2,-4
 10293b8:	1886703a 	and	r3,r3,r2
 10293bc:	1c45c83a 	sub	r2,r3,r17
 10293c0:	1c400236 	bltu	r3,r17,10293cc <_malloc_r+0x488>
 10293c4:	00c003c4 	movi	r3,15
 10293c8:	18800416 	blt	r3,r2,10293dc <_malloc_r+0x498>
 10293cc:	9009883a 	mov	r4,r18
 10293d0:	1031a8c0 	call	1031a8c <__malloc_unlock>
 10293d4:	0005883a 	mov	r2,zero
 10293d8:	003f0706 	br	1028ff8 <_gp+0xfffead14>
 10293dc:	88c00054 	ori	r3,r17,1
 10293e0:	80c00115 	stw	r3,4(r16)
 10293e4:	8463883a 	add	r17,r16,r17
 10293e8:	10800054 	ori	r2,r2,1
 10293ec:	9c400215 	stw	r17,8(r19)
 10293f0:	88800115 	stw	r2,4(r17)
 10293f4:	9009883a 	mov	r4,r18
 10293f8:	1031a8c0 	call	1031a8c <__malloc_unlock>
 10293fc:	80800204 	addi	r2,r16,8
 1029400:	003efd06 	br	1028ff8 <_gp+0xfffead14>
 1029404:	00800504 	movi	r2,20
 1029408:	10c0482e 	bgeu	r2,r3,102952c <_malloc_r+0x5e8>
 102940c:	00801504 	movi	r2,84
 1029410:	10c06836 	bltu	r2,r3,10295b4 <_malloc_r+0x670>
 1029414:	8806d33a 	srli	r3,r17,12
 1029418:	19c01b84 	addi	r7,r3,110
 102941c:	39cb883a 	add	r5,r7,r7
 1029420:	003f0c06 	br	1029054 <_gp+0xfffead70>
 1029424:	3804d27a 	srli	r2,r7,9
 1029428:	01000104 	movi	r4,4
 102942c:	2080422e 	bgeu	r4,r2,1029538 <_malloc_r+0x5f4>
 1029430:	01000504 	movi	r4,20
 1029434:	20807c36 	bltu	r4,r2,1029628 <_malloc_r+0x6e4>
 1029438:	110016c4 	addi	r4,r2,91
 102943c:	210b883a 	add	r5,r4,r4
 1029440:	294b883a 	add	r5,r5,r5
 1029444:	294b883a 	add	r5,r5,r5
 1029448:	994b883a 	add	r5,r19,r5
 102944c:	28800217 	ldw	r2,8(r5)
 1029450:	020040f4 	movhi	r8,259
 1029454:	42133504 	addi	r8,r8,19668
 1029458:	11406326 	beq	r2,r5,10295e8 <_malloc_r+0x6a4>
 102945c:	01bfff04 	movi	r6,-4
 1029460:	11000117 	ldw	r4,4(r2)
 1029464:	2188703a 	and	r4,r4,r6
 1029468:	3900022e 	bgeu	r7,r4,1029474 <_malloc_r+0x530>
 102946c:	10800217 	ldw	r2,8(r2)
 1029470:	28bffb1e 	bne	r5,r2,1029460 <_gp+0xfffeb17c>
 1029474:	11800317 	ldw	r6,12(r2)
 1029478:	99000117 	ldw	r4,4(r19)
 102947c:	81800315 	stw	r6,12(r16)
 1029480:	80800215 	stw	r2,8(r16)
 1029484:	34000215 	stw	r16,8(r6)
 1029488:	14000315 	stw	r16,12(r2)
 102948c:	003f2706 	br	102912c <_gp+0xfffeae48>
 1029490:	88c00054 	ori	r3,r17,1
 1029494:	80c00115 	stw	r3,4(r16)
 1029498:	8463883a 	add	r17,r16,r17
 102949c:	34400515 	stw	r17,20(r6)
 10294a0:	34400415 	stw	r17,16(r6)
 10294a4:	10c00054 	ori	r3,r2,1
 10294a8:	8a400315 	stw	r9,12(r17)
 10294ac:	8a400215 	stw	r9,8(r17)
 10294b0:	88c00115 	stw	r3,4(r17)
 10294b4:	88a3883a 	add	r17,r17,r2
 10294b8:	88800015 	stw	r2,0(r17)
 10294bc:	9009883a 	mov	r4,r18
 10294c0:	1031a8c0 	call	1031a8c <__malloc_unlock>
 10294c4:	80800204 	addi	r2,r16,8
 10294c8:	003ecb06 	br	1028ff8 <_gp+0xfffead14>
 10294cc:	31000117 	ldw	r4,4(r6)
 10294d0:	003f1606 	br	102912c <_gp+0xfffeae48>
 10294d4:	63000044 	addi	r12,r12,1
 10294d8:	608000cc 	andi	r2,r12,3
 10294dc:	5ac00204 	addi	r11,r11,8
 10294e0:	103f2a1e 	bne	r2,zero,102918c <_gp+0xfffeaea8>
 10294e4:	00002106 	br	102956c <_malloc_r+0x628>
 10294e8:	80800204 	addi	r2,r16,8
 10294ec:	84000517 	ldw	r16,20(r16)
 10294f0:	143eb31e 	bne	r2,r16,1028fc0 <_gp+0xfffeacdc>
 10294f4:	18c00084 	addi	r3,r3,2
 10294f8:	003eec06 	br	10290ac <_gp+0xfffeadc8>
 10294fc:	8085883a 	add	r2,r16,r2
 1029500:	10c00117 	ldw	r3,4(r2)
 1029504:	81000317 	ldw	r4,12(r16)
 1029508:	81400217 	ldw	r5,8(r16)
 102950c:	18c00054 	ori	r3,r3,1
 1029510:	10c00115 	stw	r3,4(r2)
 1029514:	29000315 	stw	r4,12(r5)
 1029518:	21400215 	stw	r5,8(r4)
 102951c:	9009883a 	mov	r4,r18
 1029520:	1031a8c0 	call	1031a8c <__malloc_unlock>
 1029524:	80800204 	addi	r2,r16,8
 1029528:	003eb306 	br	1028ff8 <_gp+0xfffead14>
 102952c:	19c016c4 	addi	r7,r3,91
 1029530:	39cb883a 	add	r5,r7,r7
 1029534:	003ec706 	br	1029054 <_gp+0xfffead70>
 1029538:	3804d1ba 	srli	r2,r7,6
 102953c:	11000e04 	addi	r4,r2,56
 1029540:	210b883a 	add	r5,r4,r4
 1029544:	003fbe06 	br	1029440 <_gp+0xfffeb15c>
 1029548:	84ff5d26 	beq	r16,r19,10292c0 <_gp+0xfffeafdc>
 102954c:	9c000217 	ldw	r16,8(r19)
 1029550:	00bfff04 	movi	r2,-4
 1029554:	80c00117 	ldw	r3,4(r16)
 1029558:	1886703a 	and	r3,r3,r2
 102955c:	003f9706 	br	10293bc <_gp+0xfffeb0d8>
 1029560:	52800017 	ldw	r10,0(r10)
 1029564:	18ffffc4 	addi	r3,r3,-1
 1029568:	50805c1e 	bne	r10,r2,10296dc <_malloc_r+0x798>
 102956c:	190000cc 	andi	r4,r3,3
 1029570:	50bffe04 	addi	r2,r10,-8
 1029574:	203ffa1e 	bne	r4,zero,1029560 <_gp+0xfffeb27c>
 1029578:	98800117 	ldw	r2,4(r19)
 102957c:	0146303a 	nor	r3,zero,r5
 1029580:	1884703a 	and	r2,r3,r2
 1029584:	98800115 	stw	r2,4(r19)
 1029588:	294b883a 	add	r5,r5,r5
 102958c:	117f2e36 	bltu	r2,r5,1029248 <_gp+0xfffeaf64>
 1029590:	283f2d26 	beq	r5,zero,1029248 <_gp+0xfffeaf64>
 1029594:	1146703a 	and	r3,r2,r5
 1029598:	1800521e 	bne	r3,zero,10296e4 <_malloc_r+0x7a0>
 102959c:	6007883a 	mov	r3,r12
 10295a0:	294b883a 	add	r5,r5,r5
 10295a4:	1148703a 	and	r4,r2,r5
 10295a8:	18c00104 	addi	r3,r3,4
 10295ac:	203ffc26 	beq	r4,zero,10295a0 <_gp+0xfffeb2bc>
 10295b0:	003ef006 	br	1029174 <_gp+0xfffeae90>
 10295b4:	00805504 	movi	r2,340
 10295b8:	10c01336 	bltu	r2,r3,1029608 <_malloc_r+0x6c4>
 10295bc:	8806d3fa 	srli	r3,r17,15
 10295c0:	19c01dc4 	addi	r7,r3,119
 10295c4:	39cb883a 	add	r5,r7,r7
 10295c8:	003ea206 	br	1029054 <_gp+0xfffead70>
 10295cc:	00c40004 	movi	r3,4096
 10295d0:	003f4d06 	br	1029308 <_gp+0xfffeb024>
 10295d4:	00800044 	movi	r2,1
 10295d8:	a0800115 	stw	r2,4(r20)
 10295dc:	a021883a 	mov	r16,r20
 10295e0:	0007883a 	mov	r3,zero
 10295e4:	003f7506 	br	10293bc <_gp+0xfffeb0d8>
 10295e8:	200bd0ba 	srai	r5,r4,2
 10295ec:	01800044 	movi	r6,1
 10295f0:	41000117 	ldw	r4,4(r8)
 10295f4:	314a983a 	sll	r5,r6,r5
 10295f8:	100d883a 	mov	r6,r2
 10295fc:	2908b03a 	or	r4,r5,r4
 1029600:	41000115 	stw	r4,4(r8)
 1029604:	003f9d06 	br	102947c <_gp+0xfffeb198>
 1029608:	00815504 	movi	r2,1364
 102960c:	10c01336 	bltu	r2,r3,102965c <_malloc_r+0x718>
 1029610:	8806d4ba 	srli	r3,r17,18
 1029614:	19c01f04 	addi	r7,r3,124
 1029618:	39cb883a 	add	r5,r7,r7
 102961c:	003e8d06 	br	1029054 <_gp+0xfffead70>
 1029620:	ad400404 	addi	r21,r21,16
 1029624:	003f1d06 	br	102929c <_gp+0xfffeafb8>
 1029628:	01001504 	movi	r4,84
 102962c:	20801c36 	bltu	r4,r2,10296a0 <_malloc_r+0x75c>
 1029630:	3804d33a 	srli	r2,r7,12
 1029634:	11001b84 	addi	r4,r2,110
 1029638:	210b883a 	add	r5,r4,r4
 102963c:	003f8006 	br	1029440 <_gp+0xfffeb15c>
 1029640:	3083ffcc 	andi	r2,r6,4095
 1029644:	103f241e 	bne	r2,zero,10292d8 <_gp+0xfffeaff4>
 1029648:	99000217 	ldw	r4,8(r19)
 102964c:	ad85883a 	add	r2,r21,r22
 1029650:	10800054 	ori	r2,r2,1
 1029654:	20800115 	stw	r2,4(r4)
 1029658:	003f4a06 	br	1029384 <_gp+0xfffeb0a0>
 102965c:	01403f04 	movi	r5,252
 1029660:	01c01f84 	movi	r7,126
 1029664:	003e7b06 	br	1029054 <_gp+0xfffead70>
 1029668:	00c00044 	movi	r3,1
 102966c:	002b883a 	mov	r21,zero
 1029670:	003f3006 	br	1029334 <_gp+0xfffeb050>
 1029674:	008040f4 	movhi	r2,259
 1029678:	1098bc04 	addi	r2,r2,25328
 102967c:	15000015 	stw	r20,0(r2)
 1029680:	003f1b06 	br	10292f0 <_gp+0xfffeb00c>
 1029684:	9009883a 	mov	r4,r18
 1029688:	81400204 	addi	r5,r16,8
 102968c:	10283a80 	call	10283a8 <_free_r>
 1029690:	008040f4 	movhi	r2,259
 1029694:	109f9204 	addi	r2,r2,32328
 1029698:	10c00017 	ldw	r3,0(r2)
 102969c:	003f3906 	br	1029384 <_gp+0xfffeb0a0>
 10296a0:	01005504 	movi	r4,340
 10296a4:	20800436 	bltu	r4,r2,10296b8 <_malloc_r+0x774>
 10296a8:	3804d3fa 	srli	r2,r7,15
 10296ac:	11001dc4 	addi	r4,r2,119
 10296b0:	210b883a 	add	r5,r4,r4
 10296b4:	003f6206 	br	1029440 <_gp+0xfffeb15c>
 10296b8:	01015504 	movi	r4,1364
 10296bc:	20800436 	bltu	r4,r2,10296d0 <_malloc_r+0x78c>
 10296c0:	3804d4ba 	srli	r2,r7,18
 10296c4:	11001f04 	addi	r4,r2,124
 10296c8:	210b883a 	add	r5,r4,r4
 10296cc:	003f5c06 	br	1029440 <_gp+0xfffeb15c>
 10296d0:	01403f04 	movi	r5,252
 10296d4:	01001f84 	movi	r4,126
 10296d8:	003f5906 	br	1029440 <_gp+0xfffeb15c>
 10296dc:	98800117 	ldw	r2,4(r19)
 10296e0:	003fa906 	br	1029588 <_gp+0xfffeb2a4>
 10296e4:	6007883a 	mov	r3,r12
 10296e8:	003ea206 	br	1029174 <_gp+0xfffeae90>

010296ec <memchr>:
 10296ec:	208000cc 	andi	r2,r4,3
 10296f0:	280f883a 	mov	r7,r5
 10296f4:	10003526 	beq	r2,zero,10297cc <memchr+0xe0>
 10296f8:	30bfffc4 	addi	r2,r6,-1
 10296fc:	30001b26 	beq	r6,zero,102976c <memchr+0x80>
 1029700:	21800003 	ldbu	r6,0(r4)
 1029704:	28c03fcc 	andi	r3,r5,255
 1029708:	30c01a26 	beq	r6,r3,1029774 <memchr+0x88>
 102970c:	180d883a 	mov	r6,r3
 1029710:	00000406 	br	1029724 <memchr+0x38>
 1029714:	10001526 	beq	r2,zero,102976c <memchr+0x80>
 1029718:	20c00003 	ldbu	r3,0(r4)
 102971c:	10bfffc4 	addi	r2,r2,-1
 1029720:	19801426 	beq	r3,r6,1029774 <memchr+0x88>
 1029724:	21000044 	addi	r4,r4,1
 1029728:	20c000cc 	andi	r3,r4,3
 102972c:	183ff91e 	bne	r3,zero,1029714 <_gp+0xfffeb430>
 1029730:	024000c4 	movi	r9,3
 1029734:	48801136 	bltu	r9,r2,102977c <memchr+0x90>
 1029738:	10000c26 	beq	r2,zero,102976c <memchr+0x80>
 102973c:	20c00003 	ldbu	r3,0(r4)
 1029740:	29403fcc 	andi	r5,r5,255
 1029744:	19400b26 	beq	r3,r5,1029774 <memchr+0x88>
 1029748:	20c00044 	addi	r3,r4,1
 102974c:	2085883a 	add	r2,r4,r2
 1029750:	39803fcc 	andi	r6,r7,255
 1029754:	00000306 	br	1029764 <memchr+0x78>
 1029758:	18c00044 	addi	r3,r3,1
 102975c:	197fffc3 	ldbu	r5,-1(r3)
 1029760:	29800426 	beq	r5,r6,1029774 <memchr+0x88>
 1029764:	1809883a 	mov	r4,r3
 1029768:	18bffb1e 	bne	r3,r2,1029758 <_gp+0xfffeb474>
 102976c:	0005883a 	mov	r2,zero
 1029770:	f800283a 	ret
 1029774:	2005883a 	mov	r2,r4
 1029778:	f800283a 	ret
 102977c:	28c03fcc 	andi	r3,r5,255
 1029780:	1810923a 	slli	r8,r3,8
 1029784:	02ffbff4 	movhi	r11,65279
 1029788:	02a02074 	movhi	r10,32897
 102978c:	40c6b03a 	or	r3,r8,r3
 1029790:	1810943a 	slli	r8,r3,16
 1029794:	5affbfc4 	addi	r11,r11,-257
 1029798:	52a02004 	addi	r10,r10,-32640
 102979c:	40d0b03a 	or	r8,r8,r3
 10297a0:	20c00017 	ldw	r3,0(r4)
 10297a4:	40c6f03a 	xor	r3,r8,r3
 10297a8:	1acd883a 	add	r6,r3,r11
 10297ac:	00c6303a 	nor	r3,zero,r3
 10297b0:	30c6703a 	and	r3,r6,r3
 10297b4:	1a86703a 	and	r3,r3,r10
 10297b8:	183fdf1e 	bne	r3,zero,1029738 <_gp+0xfffeb454>
 10297bc:	10bfff04 	addi	r2,r2,-4
 10297c0:	21000104 	addi	r4,r4,4
 10297c4:	48bff636 	bltu	r9,r2,10297a0 <_gp+0xfffeb4bc>
 10297c8:	003fdb06 	br	1029738 <_gp+0xfffeb454>
 10297cc:	3005883a 	mov	r2,r6
 10297d0:	003fd706 	br	1029730 <_gp+0xfffeb44c>

010297d4 <memcpy>:
 10297d4:	deffff04 	addi	sp,sp,-4
 10297d8:	dc000015 	stw	r16,0(sp)
 10297dc:	00c003c4 	movi	r3,15
 10297e0:	2005883a 	mov	r2,r4
 10297e4:	1980432e 	bgeu	r3,r6,10298f4 <memcpy+0x120>
 10297e8:	2146b03a 	or	r3,r4,r5
 10297ec:	18c000cc 	andi	r3,r3,3
 10297f0:	1800421e 	bne	r3,zero,10298fc <memcpy+0x128>
 10297f4:	343ffc04 	addi	r16,r6,-16
 10297f8:	8020d13a 	srli	r16,r16,4
 10297fc:	28c00104 	addi	r3,r5,4
 1029800:	23400104 	addi	r13,r4,4
 1029804:	801e913a 	slli	r15,r16,4
 1029808:	2b000204 	addi	r12,r5,8
 102980c:	22c00204 	addi	r11,r4,8
 1029810:	7bc00504 	addi	r15,r15,20
 1029814:	2a800304 	addi	r10,r5,12
 1029818:	22400304 	addi	r9,r4,12
 102981c:	2bdf883a 	add	r15,r5,r15
 1029820:	2811883a 	mov	r8,r5
 1029824:	200f883a 	mov	r7,r4
 1029828:	41000017 	ldw	r4,0(r8)
 102982c:	39c00404 	addi	r7,r7,16
 1029830:	18c00404 	addi	r3,r3,16
 1029834:	393ffc15 	stw	r4,-16(r7)
 1029838:	1bbffc17 	ldw	r14,-16(r3)
 102983c:	6b400404 	addi	r13,r13,16
 1029840:	5ac00404 	addi	r11,r11,16
 1029844:	6bbffc15 	stw	r14,-16(r13)
 1029848:	63800017 	ldw	r14,0(r12)
 102984c:	4a400404 	addi	r9,r9,16
 1029850:	42000404 	addi	r8,r8,16
 1029854:	5bbffc15 	stw	r14,-16(r11)
 1029858:	53800017 	ldw	r14,0(r10)
 102985c:	63000404 	addi	r12,r12,16
 1029860:	52800404 	addi	r10,r10,16
 1029864:	4bbffc15 	stw	r14,-16(r9)
 1029868:	1bffef1e 	bne	r3,r15,1029828 <_gp+0xfffeb544>
 102986c:	81c00044 	addi	r7,r16,1
 1029870:	380e913a 	slli	r7,r7,4
 1029874:	310003cc 	andi	r4,r6,15
 1029878:	02c000c4 	movi	r11,3
 102987c:	11c7883a 	add	r3,r2,r7
 1029880:	29cb883a 	add	r5,r5,r7
 1029884:	59001f2e 	bgeu	r11,r4,1029904 <memcpy+0x130>
 1029888:	1813883a 	mov	r9,r3
 102988c:	2811883a 	mov	r8,r5
 1029890:	200f883a 	mov	r7,r4
 1029894:	42800017 	ldw	r10,0(r8)
 1029898:	4a400104 	addi	r9,r9,4
 102989c:	39ffff04 	addi	r7,r7,-4
 10298a0:	4abfff15 	stw	r10,-4(r9)
 10298a4:	42000104 	addi	r8,r8,4
 10298a8:	59fffa36 	bltu	r11,r7,1029894 <_gp+0xfffeb5b0>
 10298ac:	213fff04 	addi	r4,r4,-4
 10298b0:	2008d0ba 	srli	r4,r4,2
 10298b4:	318000cc 	andi	r6,r6,3
 10298b8:	21000044 	addi	r4,r4,1
 10298bc:	2109883a 	add	r4,r4,r4
 10298c0:	2109883a 	add	r4,r4,r4
 10298c4:	1907883a 	add	r3,r3,r4
 10298c8:	290b883a 	add	r5,r5,r4
 10298cc:	30000626 	beq	r6,zero,10298e8 <memcpy+0x114>
 10298d0:	198d883a 	add	r6,r3,r6
 10298d4:	29c00003 	ldbu	r7,0(r5)
 10298d8:	18c00044 	addi	r3,r3,1
 10298dc:	29400044 	addi	r5,r5,1
 10298e0:	19ffffc5 	stb	r7,-1(r3)
 10298e4:	19bffb1e 	bne	r3,r6,10298d4 <_gp+0xfffeb5f0>
 10298e8:	dc000017 	ldw	r16,0(sp)
 10298ec:	dec00104 	addi	sp,sp,4
 10298f0:	f800283a 	ret
 10298f4:	2007883a 	mov	r3,r4
 10298f8:	003ff406 	br	10298cc <_gp+0xfffeb5e8>
 10298fc:	2007883a 	mov	r3,r4
 1029900:	003ff306 	br	10298d0 <_gp+0xfffeb5ec>
 1029904:	200d883a 	mov	r6,r4
 1029908:	003ff006 	br	10298cc <_gp+0xfffeb5e8>

0102990c <memmove>:
 102990c:	2005883a 	mov	r2,r4
 1029910:	29000b2e 	bgeu	r5,r4,1029940 <memmove+0x34>
 1029914:	298f883a 	add	r7,r5,r6
 1029918:	21c0092e 	bgeu	r4,r7,1029940 <memmove+0x34>
 102991c:	2187883a 	add	r3,r4,r6
 1029920:	198bc83a 	sub	r5,r3,r6
 1029924:	30004b26 	beq	r6,zero,1029a54 <memmove+0x148>
 1029928:	39ffffc4 	addi	r7,r7,-1
 102992c:	39000003 	ldbu	r4,0(r7)
 1029930:	18ffffc4 	addi	r3,r3,-1
 1029934:	19000005 	stb	r4,0(r3)
 1029938:	197ffb1e 	bne	r3,r5,1029928 <_gp+0xfffeb644>
 102993c:	f800283a 	ret
 1029940:	00c003c4 	movi	r3,15
 1029944:	1980412e 	bgeu	r3,r6,1029a4c <memmove+0x140>
 1029948:	1146b03a 	or	r3,r2,r5
 102994c:	18c000cc 	andi	r3,r3,3
 1029950:	1800411e 	bne	r3,zero,1029a58 <memmove+0x14c>
 1029954:	33fffc04 	addi	r15,r6,-16
 1029958:	781ed13a 	srli	r15,r15,4
 102995c:	28c00104 	addi	r3,r5,4
 1029960:	13400104 	addi	r13,r2,4
 1029964:	781c913a 	slli	r14,r15,4
 1029968:	2b000204 	addi	r12,r5,8
 102996c:	12c00204 	addi	r11,r2,8
 1029970:	73800504 	addi	r14,r14,20
 1029974:	2a800304 	addi	r10,r5,12
 1029978:	12400304 	addi	r9,r2,12
 102997c:	2b9d883a 	add	r14,r5,r14
 1029980:	2811883a 	mov	r8,r5
 1029984:	100f883a 	mov	r7,r2
 1029988:	41000017 	ldw	r4,0(r8)
 102998c:	39c00404 	addi	r7,r7,16
 1029990:	18c00404 	addi	r3,r3,16
 1029994:	393ffc15 	stw	r4,-16(r7)
 1029998:	193ffc17 	ldw	r4,-16(r3)
 102999c:	6b400404 	addi	r13,r13,16
 10299a0:	5ac00404 	addi	r11,r11,16
 10299a4:	693ffc15 	stw	r4,-16(r13)
 10299a8:	61000017 	ldw	r4,0(r12)
 10299ac:	4a400404 	addi	r9,r9,16
 10299b0:	42000404 	addi	r8,r8,16
 10299b4:	593ffc15 	stw	r4,-16(r11)
 10299b8:	51000017 	ldw	r4,0(r10)
 10299bc:	63000404 	addi	r12,r12,16
 10299c0:	52800404 	addi	r10,r10,16
 10299c4:	493ffc15 	stw	r4,-16(r9)
 10299c8:	1bbfef1e 	bne	r3,r14,1029988 <_gp+0xfffeb6a4>
 10299cc:	79000044 	addi	r4,r15,1
 10299d0:	2008913a 	slli	r4,r4,4
 10299d4:	328003cc 	andi	r10,r6,15
 10299d8:	02c000c4 	movi	r11,3
 10299dc:	1107883a 	add	r3,r2,r4
 10299e0:	290b883a 	add	r5,r5,r4
 10299e4:	5a801e2e 	bgeu	r11,r10,1029a60 <memmove+0x154>
 10299e8:	1813883a 	mov	r9,r3
 10299ec:	2811883a 	mov	r8,r5
 10299f0:	500f883a 	mov	r7,r10
 10299f4:	41000017 	ldw	r4,0(r8)
 10299f8:	4a400104 	addi	r9,r9,4
 10299fc:	39ffff04 	addi	r7,r7,-4
 1029a00:	493fff15 	stw	r4,-4(r9)
 1029a04:	42000104 	addi	r8,r8,4
 1029a08:	59fffa36 	bltu	r11,r7,10299f4 <_gp+0xfffeb710>
 1029a0c:	513fff04 	addi	r4,r10,-4
 1029a10:	2008d0ba 	srli	r4,r4,2
 1029a14:	318000cc 	andi	r6,r6,3
 1029a18:	21000044 	addi	r4,r4,1
 1029a1c:	2109883a 	add	r4,r4,r4
 1029a20:	2109883a 	add	r4,r4,r4
 1029a24:	1907883a 	add	r3,r3,r4
 1029a28:	290b883a 	add	r5,r5,r4
 1029a2c:	30000926 	beq	r6,zero,1029a54 <memmove+0x148>
 1029a30:	198d883a 	add	r6,r3,r6
 1029a34:	29c00003 	ldbu	r7,0(r5)
 1029a38:	18c00044 	addi	r3,r3,1
 1029a3c:	29400044 	addi	r5,r5,1
 1029a40:	19ffffc5 	stb	r7,-1(r3)
 1029a44:	19bffb1e 	bne	r3,r6,1029a34 <_gp+0xfffeb750>
 1029a48:	f800283a 	ret
 1029a4c:	1007883a 	mov	r3,r2
 1029a50:	003ff606 	br	1029a2c <_gp+0xfffeb748>
 1029a54:	f800283a 	ret
 1029a58:	1007883a 	mov	r3,r2
 1029a5c:	003ff406 	br	1029a30 <_gp+0xfffeb74c>
 1029a60:	500d883a 	mov	r6,r10
 1029a64:	003ff106 	br	1029a2c <_gp+0xfffeb748>

01029a68 <memset>:
 1029a68:	20c000cc 	andi	r3,r4,3
 1029a6c:	2005883a 	mov	r2,r4
 1029a70:	18004326 	beq	r3,zero,1029b80 <memset+0x118>
 1029a74:	31ffffc4 	addi	r7,r6,-1
 1029a78:	30004026 	beq	r6,zero,1029b7c <memset+0x114>
 1029a7c:	2813883a 	mov	r9,r5
 1029a80:	200d883a 	mov	r6,r4
 1029a84:	2007883a 	mov	r3,r4
 1029a88:	00000406 	br	1029a9c <memset+0x34>
 1029a8c:	3a3fffc4 	addi	r8,r7,-1
 1029a90:	31800044 	addi	r6,r6,1
 1029a94:	38003926 	beq	r7,zero,1029b7c <memset+0x114>
 1029a98:	400f883a 	mov	r7,r8
 1029a9c:	18c00044 	addi	r3,r3,1
 1029aa0:	32400005 	stb	r9,0(r6)
 1029aa4:	1a0000cc 	andi	r8,r3,3
 1029aa8:	403ff81e 	bne	r8,zero,1029a8c <_gp+0xfffeb7a8>
 1029aac:	010000c4 	movi	r4,3
 1029ab0:	21c02d2e 	bgeu	r4,r7,1029b68 <memset+0x100>
 1029ab4:	29803fcc 	andi	r6,r5,255
 1029ab8:	3008923a 	slli	r4,r6,8
 1029abc:	218cb03a 	or	r6,r4,r6
 1029ac0:	3008943a 	slli	r4,r6,16
 1029ac4:	218cb03a 	or	r6,r4,r6
 1029ac8:	010003c4 	movi	r4,15
 1029acc:	21c0182e 	bgeu	r4,r7,1029b30 <memset+0xc8>
 1029ad0:	3b3ffc04 	addi	r12,r7,-16
 1029ad4:	6018d13a 	srli	r12,r12,4
 1029ad8:	1a000104 	addi	r8,r3,4
 1029adc:	1ac00204 	addi	r11,r3,8
 1029ae0:	6008913a 	slli	r4,r12,4
 1029ae4:	1a800304 	addi	r10,r3,12
 1029ae8:	1813883a 	mov	r9,r3
 1029aec:	21000504 	addi	r4,r4,20
 1029af0:	1909883a 	add	r4,r3,r4
 1029af4:	49800015 	stw	r6,0(r9)
 1029af8:	41800015 	stw	r6,0(r8)
 1029afc:	59800015 	stw	r6,0(r11)
 1029b00:	51800015 	stw	r6,0(r10)
 1029b04:	42000404 	addi	r8,r8,16
 1029b08:	4a400404 	addi	r9,r9,16
 1029b0c:	5ac00404 	addi	r11,r11,16
 1029b10:	52800404 	addi	r10,r10,16
 1029b14:	413ff71e 	bne	r8,r4,1029af4 <_gp+0xfffeb810>
 1029b18:	63000044 	addi	r12,r12,1
 1029b1c:	6018913a 	slli	r12,r12,4
 1029b20:	39c003cc 	andi	r7,r7,15
 1029b24:	010000c4 	movi	r4,3
 1029b28:	1b07883a 	add	r3,r3,r12
 1029b2c:	21c00e2e 	bgeu	r4,r7,1029b68 <memset+0x100>
 1029b30:	1813883a 	mov	r9,r3
 1029b34:	3811883a 	mov	r8,r7
 1029b38:	010000c4 	movi	r4,3
 1029b3c:	49800015 	stw	r6,0(r9)
 1029b40:	423fff04 	addi	r8,r8,-4
 1029b44:	4a400104 	addi	r9,r9,4
 1029b48:	223ffc36 	bltu	r4,r8,1029b3c <_gp+0xfffeb858>
 1029b4c:	393fff04 	addi	r4,r7,-4
 1029b50:	2008d0ba 	srli	r4,r4,2
 1029b54:	39c000cc 	andi	r7,r7,3
 1029b58:	21000044 	addi	r4,r4,1
 1029b5c:	2109883a 	add	r4,r4,r4
 1029b60:	2109883a 	add	r4,r4,r4
 1029b64:	1907883a 	add	r3,r3,r4
 1029b68:	38000426 	beq	r7,zero,1029b7c <memset+0x114>
 1029b6c:	19cf883a 	add	r7,r3,r7
 1029b70:	19400005 	stb	r5,0(r3)
 1029b74:	18c00044 	addi	r3,r3,1
 1029b78:	19fffd1e 	bne	r3,r7,1029b70 <_gp+0xfffeb88c>
 1029b7c:	f800283a 	ret
 1029b80:	2007883a 	mov	r3,r4
 1029b84:	300f883a 	mov	r7,r6
 1029b88:	003fc806 	br	1029aac <_gp+0xfffeb7c8>

01029b8c <_Balloc>:
 1029b8c:	20801317 	ldw	r2,76(r4)
 1029b90:	defffc04 	addi	sp,sp,-16
 1029b94:	dc400115 	stw	r17,4(sp)
 1029b98:	dc000015 	stw	r16,0(sp)
 1029b9c:	dfc00315 	stw	ra,12(sp)
 1029ba0:	dc800215 	stw	r18,8(sp)
 1029ba4:	2023883a 	mov	r17,r4
 1029ba8:	2821883a 	mov	r16,r5
 1029bac:	10000f26 	beq	r2,zero,1029bec <_Balloc+0x60>
 1029bb0:	8407883a 	add	r3,r16,r16
 1029bb4:	18c7883a 	add	r3,r3,r3
 1029bb8:	10c7883a 	add	r3,r2,r3
 1029bbc:	18800017 	ldw	r2,0(r3)
 1029bc0:	10001126 	beq	r2,zero,1029c08 <_Balloc+0x7c>
 1029bc4:	11000017 	ldw	r4,0(r2)
 1029bc8:	19000015 	stw	r4,0(r3)
 1029bcc:	10000415 	stw	zero,16(r2)
 1029bd0:	10000315 	stw	zero,12(r2)
 1029bd4:	dfc00317 	ldw	ra,12(sp)
 1029bd8:	dc800217 	ldw	r18,8(sp)
 1029bdc:	dc400117 	ldw	r17,4(sp)
 1029be0:	dc000017 	ldw	r16,0(sp)
 1029be4:	dec00404 	addi	sp,sp,16
 1029be8:	f800283a 	ret
 1029bec:	01400104 	movi	r5,4
 1029bf0:	01800844 	movi	r6,33
 1029bf4:	102dad40 	call	102dad4 <_calloc_r>
 1029bf8:	88801315 	stw	r2,76(r17)
 1029bfc:	103fec1e 	bne	r2,zero,1029bb0 <_gp+0xfffeb8cc>
 1029c00:	0005883a 	mov	r2,zero
 1029c04:	003ff306 	br	1029bd4 <_gp+0xfffeb8f0>
 1029c08:	01400044 	movi	r5,1
 1029c0c:	2c24983a 	sll	r18,r5,r16
 1029c10:	8809883a 	mov	r4,r17
 1029c14:	91800144 	addi	r6,r18,5
 1029c18:	318d883a 	add	r6,r6,r6
 1029c1c:	318d883a 	add	r6,r6,r6
 1029c20:	102dad40 	call	102dad4 <_calloc_r>
 1029c24:	103ff626 	beq	r2,zero,1029c00 <_gp+0xfffeb91c>
 1029c28:	14000115 	stw	r16,4(r2)
 1029c2c:	14800215 	stw	r18,8(r2)
 1029c30:	003fe606 	br	1029bcc <_gp+0xfffeb8e8>

01029c34 <_Bfree>:
 1029c34:	28000826 	beq	r5,zero,1029c58 <_Bfree+0x24>
 1029c38:	28c00117 	ldw	r3,4(r5)
 1029c3c:	20801317 	ldw	r2,76(r4)
 1029c40:	18c7883a 	add	r3,r3,r3
 1029c44:	18c7883a 	add	r3,r3,r3
 1029c48:	10c5883a 	add	r2,r2,r3
 1029c4c:	10c00017 	ldw	r3,0(r2)
 1029c50:	28c00015 	stw	r3,0(r5)
 1029c54:	11400015 	stw	r5,0(r2)
 1029c58:	f800283a 	ret

01029c5c <__multadd>:
 1029c5c:	defffa04 	addi	sp,sp,-24
 1029c60:	dc000115 	stw	r16,4(sp)
 1029c64:	2c000417 	ldw	r16,16(r5)
 1029c68:	dc800315 	stw	r18,12(sp)
 1029c6c:	dc400215 	stw	r17,8(sp)
 1029c70:	dfc00515 	stw	ra,20(sp)
 1029c74:	dcc00415 	stw	r19,16(sp)
 1029c78:	2823883a 	mov	r17,r5
 1029c7c:	2025883a 	mov	r18,r4
 1029c80:	2a400504 	addi	r9,r5,20
 1029c84:	0015883a 	mov	r10,zero
 1029c88:	4a000017 	ldw	r8,0(r9)
 1029c8c:	4a400104 	addi	r9,r9,4
 1029c90:	52800044 	addi	r10,r10,1
 1029c94:	40ffffcc 	andi	r3,r8,65535
 1029c98:	1987383a 	mul	r3,r3,r6
 1029c9c:	4010d43a 	srli	r8,r8,16
 1029ca0:	19cf883a 	add	r7,r3,r7
 1029ca4:	4191383a 	mul	r8,r8,r6
 1029ca8:	3816d43a 	srli	r11,r7,16
 1029cac:	38ffffcc 	andi	r3,r7,65535
 1029cb0:	5a0f883a 	add	r7,r11,r8
 1029cb4:	3810943a 	slli	r8,r7,16
 1029cb8:	380ed43a 	srli	r7,r7,16
 1029cbc:	40c7883a 	add	r3,r8,r3
 1029cc0:	48ffff15 	stw	r3,-4(r9)
 1029cc4:	543ff016 	blt	r10,r16,1029c88 <_gp+0xfffeb9a4>
 1029cc8:	38000926 	beq	r7,zero,1029cf0 <__multadd+0x94>
 1029ccc:	88800217 	ldw	r2,8(r17)
 1029cd0:	80800f0e 	bge	r16,r2,1029d10 <__multadd+0xb4>
 1029cd4:	80800144 	addi	r2,r16,5
 1029cd8:	1085883a 	add	r2,r2,r2
 1029cdc:	1085883a 	add	r2,r2,r2
 1029ce0:	8885883a 	add	r2,r17,r2
 1029ce4:	11c00015 	stw	r7,0(r2)
 1029ce8:	84000044 	addi	r16,r16,1
 1029cec:	8c000415 	stw	r16,16(r17)
 1029cf0:	8805883a 	mov	r2,r17
 1029cf4:	dfc00517 	ldw	ra,20(sp)
 1029cf8:	dcc00417 	ldw	r19,16(sp)
 1029cfc:	dc800317 	ldw	r18,12(sp)
 1029d00:	dc400217 	ldw	r17,8(sp)
 1029d04:	dc000117 	ldw	r16,4(sp)
 1029d08:	dec00604 	addi	sp,sp,24
 1029d0c:	f800283a 	ret
 1029d10:	89400117 	ldw	r5,4(r17)
 1029d14:	9009883a 	mov	r4,r18
 1029d18:	d9c00015 	stw	r7,0(sp)
 1029d1c:	29400044 	addi	r5,r5,1
 1029d20:	1029b8c0 	call	1029b8c <_Balloc>
 1029d24:	89800417 	ldw	r6,16(r17)
 1029d28:	89400304 	addi	r5,r17,12
 1029d2c:	11000304 	addi	r4,r2,12
 1029d30:	31800084 	addi	r6,r6,2
 1029d34:	318d883a 	add	r6,r6,r6
 1029d38:	318d883a 	add	r6,r6,r6
 1029d3c:	1027883a 	mov	r19,r2
 1029d40:	10297d40 	call	10297d4 <memcpy>
 1029d44:	89000117 	ldw	r4,4(r17)
 1029d48:	90c01317 	ldw	r3,76(r18)
 1029d4c:	d9c00017 	ldw	r7,0(sp)
 1029d50:	2109883a 	add	r4,r4,r4
 1029d54:	2109883a 	add	r4,r4,r4
 1029d58:	1907883a 	add	r3,r3,r4
 1029d5c:	18800017 	ldw	r2,0(r3)
 1029d60:	88800015 	stw	r2,0(r17)
 1029d64:	1c400015 	stw	r17,0(r3)
 1029d68:	9823883a 	mov	r17,r19
 1029d6c:	003fd906 	br	1029cd4 <_gp+0xfffeb9f0>

01029d70 <__s2b>:
 1029d70:	defff904 	addi	sp,sp,-28
 1029d74:	dc400115 	stw	r17,4(sp)
 1029d78:	dc000015 	stw	r16,0(sp)
 1029d7c:	2023883a 	mov	r17,r4
 1029d80:	2821883a 	mov	r16,r5
 1029d84:	39000204 	addi	r4,r7,8
 1029d88:	01400244 	movi	r5,9
 1029d8c:	dcc00315 	stw	r19,12(sp)
 1029d90:	dc800215 	stw	r18,8(sp)
 1029d94:	dfc00615 	stw	ra,24(sp)
 1029d98:	dd400515 	stw	r21,20(sp)
 1029d9c:	dd000415 	stw	r20,16(sp)
 1029da0:	3825883a 	mov	r18,r7
 1029da4:	3027883a 	mov	r19,r6
 1029da8:	1021e040 	call	1021e04 <__divsi3>
 1029dac:	00c00044 	movi	r3,1
 1029db0:	000b883a 	mov	r5,zero
 1029db4:	1880030e 	bge	r3,r2,1029dc4 <__s2b+0x54>
 1029db8:	18c7883a 	add	r3,r3,r3
 1029dbc:	29400044 	addi	r5,r5,1
 1029dc0:	18bffd16 	blt	r3,r2,1029db8 <_gp+0xfffebad4>
 1029dc4:	8809883a 	mov	r4,r17
 1029dc8:	1029b8c0 	call	1029b8c <_Balloc>
 1029dcc:	d8c00717 	ldw	r3,28(sp)
 1029dd0:	10c00515 	stw	r3,20(r2)
 1029dd4:	00c00044 	movi	r3,1
 1029dd8:	10c00415 	stw	r3,16(r2)
 1029ddc:	00c00244 	movi	r3,9
 1029de0:	1cc0210e 	bge	r3,r19,1029e68 <__s2b+0xf8>
 1029de4:	80eb883a 	add	r21,r16,r3
 1029de8:	a829883a 	mov	r20,r21
 1029dec:	84e1883a 	add	r16,r16,r19
 1029df0:	a1c00007 	ldb	r7,0(r20)
 1029df4:	8809883a 	mov	r4,r17
 1029df8:	a5000044 	addi	r20,r20,1
 1029dfc:	100b883a 	mov	r5,r2
 1029e00:	01800284 	movi	r6,10
 1029e04:	39fff404 	addi	r7,r7,-48
 1029e08:	1029c5c0 	call	1029c5c <__multadd>
 1029e0c:	a43ff81e 	bne	r20,r16,1029df0 <_gp+0xfffebb0c>
 1029e10:	ace1883a 	add	r16,r21,r19
 1029e14:	843ffe04 	addi	r16,r16,-8
 1029e18:	9c800a0e 	bge	r19,r18,1029e44 <__s2b+0xd4>
 1029e1c:	94e5c83a 	sub	r18,r18,r19
 1029e20:	84a5883a 	add	r18,r16,r18
 1029e24:	81c00007 	ldb	r7,0(r16)
 1029e28:	8809883a 	mov	r4,r17
 1029e2c:	84000044 	addi	r16,r16,1
 1029e30:	100b883a 	mov	r5,r2
 1029e34:	01800284 	movi	r6,10
 1029e38:	39fff404 	addi	r7,r7,-48
 1029e3c:	1029c5c0 	call	1029c5c <__multadd>
 1029e40:	84bff81e 	bne	r16,r18,1029e24 <_gp+0xfffebb40>
 1029e44:	dfc00617 	ldw	ra,24(sp)
 1029e48:	dd400517 	ldw	r21,20(sp)
 1029e4c:	dd000417 	ldw	r20,16(sp)
 1029e50:	dcc00317 	ldw	r19,12(sp)
 1029e54:	dc800217 	ldw	r18,8(sp)
 1029e58:	dc400117 	ldw	r17,4(sp)
 1029e5c:	dc000017 	ldw	r16,0(sp)
 1029e60:	dec00704 	addi	sp,sp,28
 1029e64:	f800283a 	ret
 1029e68:	84000284 	addi	r16,r16,10
 1029e6c:	1827883a 	mov	r19,r3
 1029e70:	003fe906 	br	1029e18 <_gp+0xfffebb34>

01029e74 <__hi0bits>:
 1029e74:	20bfffec 	andhi	r2,r4,65535
 1029e78:	1000141e 	bne	r2,zero,1029ecc <__hi0bits+0x58>
 1029e7c:	2008943a 	slli	r4,r4,16
 1029e80:	00800404 	movi	r2,16
 1029e84:	20ffc02c 	andhi	r3,r4,65280
 1029e88:	1800021e 	bne	r3,zero,1029e94 <__hi0bits+0x20>
 1029e8c:	2008923a 	slli	r4,r4,8
 1029e90:	10800204 	addi	r2,r2,8
 1029e94:	20fc002c 	andhi	r3,r4,61440
 1029e98:	1800021e 	bne	r3,zero,1029ea4 <__hi0bits+0x30>
 1029e9c:	2008913a 	slli	r4,r4,4
 1029ea0:	10800104 	addi	r2,r2,4
 1029ea4:	20f0002c 	andhi	r3,r4,49152
 1029ea8:	1800031e 	bne	r3,zero,1029eb8 <__hi0bits+0x44>
 1029eac:	2109883a 	add	r4,r4,r4
 1029eb0:	10800084 	addi	r2,r2,2
 1029eb4:	2109883a 	add	r4,r4,r4
 1029eb8:	20000316 	blt	r4,zero,1029ec8 <__hi0bits+0x54>
 1029ebc:	2110002c 	andhi	r4,r4,16384
 1029ec0:	2000041e 	bne	r4,zero,1029ed4 <__hi0bits+0x60>
 1029ec4:	00800804 	movi	r2,32
 1029ec8:	f800283a 	ret
 1029ecc:	0005883a 	mov	r2,zero
 1029ed0:	003fec06 	br	1029e84 <_gp+0xfffebba0>
 1029ed4:	10800044 	addi	r2,r2,1
 1029ed8:	f800283a 	ret

01029edc <__lo0bits>:
 1029edc:	20c00017 	ldw	r3,0(r4)
 1029ee0:	188001cc 	andi	r2,r3,7
 1029ee4:	10000826 	beq	r2,zero,1029f08 <__lo0bits+0x2c>
 1029ee8:	1880004c 	andi	r2,r3,1
 1029eec:	1000211e 	bne	r2,zero,1029f74 <__lo0bits+0x98>
 1029ef0:	1880008c 	andi	r2,r3,2
 1029ef4:	1000211e 	bne	r2,zero,1029f7c <__lo0bits+0xa0>
 1029ef8:	1806d0ba 	srli	r3,r3,2
 1029efc:	00800084 	movi	r2,2
 1029f00:	20c00015 	stw	r3,0(r4)
 1029f04:	f800283a 	ret
 1029f08:	18bfffcc 	andi	r2,r3,65535
 1029f0c:	10001326 	beq	r2,zero,1029f5c <__lo0bits+0x80>
 1029f10:	0005883a 	mov	r2,zero
 1029f14:	19403fcc 	andi	r5,r3,255
 1029f18:	2800021e 	bne	r5,zero,1029f24 <__lo0bits+0x48>
 1029f1c:	1806d23a 	srli	r3,r3,8
 1029f20:	10800204 	addi	r2,r2,8
 1029f24:	194003cc 	andi	r5,r3,15
 1029f28:	2800021e 	bne	r5,zero,1029f34 <__lo0bits+0x58>
 1029f2c:	1806d13a 	srli	r3,r3,4
 1029f30:	10800104 	addi	r2,r2,4
 1029f34:	194000cc 	andi	r5,r3,3
 1029f38:	2800021e 	bne	r5,zero,1029f44 <__lo0bits+0x68>
 1029f3c:	1806d0ba 	srli	r3,r3,2
 1029f40:	10800084 	addi	r2,r2,2
 1029f44:	1940004c 	andi	r5,r3,1
 1029f48:	2800081e 	bne	r5,zero,1029f6c <__lo0bits+0x90>
 1029f4c:	1806d07a 	srli	r3,r3,1
 1029f50:	1800051e 	bne	r3,zero,1029f68 <__lo0bits+0x8c>
 1029f54:	00800804 	movi	r2,32
 1029f58:	f800283a 	ret
 1029f5c:	1806d43a 	srli	r3,r3,16
 1029f60:	00800404 	movi	r2,16
 1029f64:	003feb06 	br	1029f14 <_gp+0xfffebc30>
 1029f68:	10800044 	addi	r2,r2,1
 1029f6c:	20c00015 	stw	r3,0(r4)
 1029f70:	f800283a 	ret
 1029f74:	0005883a 	mov	r2,zero
 1029f78:	f800283a 	ret
 1029f7c:	1806d07a 	srli	r3,r3,1
 1029f80:	00800044 	movi	r2,1
 1029f84:	20c00015 	stw	r3,0(r4)
 1029f88:	f800283a 	ret

01029f8c <__i2b>:
 1029f8c:	defffd04 	addi	sp,sp,-12
 1029f90:	dc000015 	stw	r16,0(sp)
 1029f94:	04000044 	movi	r16,1
 1029f98:	dc400115 	stw	r17,4(sp)
 1029f9c:	2823883a 	mov	r17,r5
 1029fa0:	800b883a 	mov	r5,r16
 1029fa4:	dfc00215 	stw	ra,8(sp)
 1029fa8:	1029b8c0 	call	1029b8c <_Balloc>
 1029fac:	14400515 	stw	r17,20(r2)
 1029fb0:	14000415 	stw	r16,16(r2)
 1029fb4:	dfc00217 	ldw	ra,8(sp)
 1029fb8:	dc400117 	ldw	r17,4(sp)
 1029fbc:	dc000017 	ldw	r16,0(sp)
 1029fc0:	dec00304 	addi	sp,sp,12
 1029fc4:	f800283a 	ret

01029fc8 <__multiply>:
 1029fc8:	defffa04 	addi	sp,sp,-24
 1029fcc:	dcc00315 	stw	r19,12(sp)
 1029fd0:	dc800215 	stw	r18,8(sp)
 1029fd4:	2cc00417 	ldw	r19,16(r5)
 1029fd8:	34800417 	ldw	r18,16(r6)
 1029fdc:	dd000415 	stw	r20,16(sp)
 1029fe0:	dc400115 	stw	r17,4(sp)
 1029fe4:	dfc00515 	stw	ra,20(sp)
 1029fe8:	dc000015 	stw	r16,0(sp)
 1029fec:	2829883a 	mov	r20,r5
 1029ff0:	3023883a 	mov	r17,r6
 1029ff4:	9c807016 	blt	r19,r18,102a1b8 <__multiply+0x1f0>
 1029ff8:	9005883a 	mov	r2,r18
 1029ffc:	9825883a 	mov	r18,r19
 102a000:	1027883a 	mov	r19,r2
 102a004:	a0800217 	ldw	r2,8(r20)
 102a008:	94e1883a 	add	r16,r18,r19
 102a00c:	a1400117 	ldw	r5,4(r20)
 102a010:	1400010e 	bge	r2,r16,102a018 <__multiply+0x50>
 102a014:	29400044 	addi	r5,r5,1
 102a018:	1029b8c0 	call	1029b8c <_Balloc>
 102a01c:	8417883a 	add	r11,r16,r16
 102a020:	13000504 	addi	r12,r2,20
 102a024:	5ad7883a 	add	r11,r11,r11
 102a028:	62d7883a 	add	r11,r12,r11
 102a02c:	6007883a 	mov	r3,r12
 102a030:	62c0032e 	bgeu	r12,r11,102a040 <__multiply+0x78>
 102a034:	18000015 	stw	zero,0(r3)
 102a038:	18c00104 	addi	r3,r3,4
 102a03c:	1afffd36 	bltu	r3,r11,102a034 <_gp+0xfffebd50>
 102a040:	9ce7883a 	add	r19,r19,r19
 102a044:	94a5883a 	add	r18,r18,r18
 102a048:	89800504 	addi	r6,r17,20
 102a04c:	9ce7883a 	add	r19,r19,r19
 102a050:	a3800504 	addi	r14,r20,20
 102a054:	94a5883a 	add	r18,r18,r18
 102a058:	34db883a 	add	r13,r6,r19
 102a05c:	7495883a 	add	r10,r14,r18
 102a060:	3340422e 	bgeu	r6,r13,102a16c <__multiply+0x1a4>
 102a064:	34400017 	ldw	r17,0(r6)
 102a068:	8cbfffcc 	andi	r18,r17,65535
 102a06c:	90001b26 	beq	r18,zero,102a0dc <__multiply+0x114>
 102a070:	6013883a 	mov	r9,r12
 102a074:	7023883a 	mov	r17,r14
 102a078:	0011883a 	mov	r8,zero
 102a07c:	88c00017 	ldw	r3,0(r17)
 102a080:	4bc00017 	ldw	r15,0(r9)
 102a084:	8c400104 	addi	r17,r17,4
 102a088:	19ffffcc 	andi	r7,r3,65535
 102a08c:	3c8f383a 	mul	r7,r7,r18
 102a090:	1808d43a 	srli	r4,r3,16
 102a094:	797fffcc 	andi	r5,r15,65535
 102a098:	29cb883a 	add	r5,r5,r7
 102a09c:	2a0b883a 	add	r5,r5,r8
 102a0a0:	2489383a 	mul	r4,r4,r18
 102a0a4:	7806d43a 	srli	r3,r15,16
 102a0a8:	2810d43a 	srli	r8,r5,16
 102a0ac:	297fffcc 	andi	r5,r5,65535
 102a0b0:	1907883a 	add	r3,r3,r4
 102a0b4:	1a07883a 	add	r3,r3,r8
 102a0b8:	1808943a 	slli	r4,r3,16
 102a0bc:	480f883a 	mov	r7,r9
 102a0c0:	1810d43a 	srli	r8,r3,16
 102a0c4:	214ab03a 	or	r5,r4,r5
 102a0c8:	49400015 	stw	r5,0(r9)
 102a0cc:	4a400104 	addi	r9,r9,4
 102a0d0:	8abfea36 	bltu	r17,r10,102a07c <_gp+0xfffebd98>
 102a0d4:	3a000115 	stw	r8,4(r7)
 102a0d8:	34400017 	ldw	r17,0(r6)
 102a0dc:	8822d43a 	srli	r17,r17,16
 102a0e0:	88001f26 	beq	r17,zero,102a160 <__multiply+0x198>
 102a0e4:	60c00017 	ldw	r3,0(r12)
 102a0e8:	7013883a 	mov	r9,r14
 102a0ec:	601f883a 	mov	r15,r12
 102a0f0:	1811883a 	mov	r8,r3
 102a0f4:	6027883a 	mov	r19,r12
 102a0f8:	000f883a 	mov	r7,zero
 102a0fc:	00000106 	br	102a104 <__multiply+0x13c>
 102a100:	9027883a 	mov	r19,r18
 102a104:	4940000b 	ldhu	r5,0(r9)
 102a108:	4010d43a 	srli	r8,r8,16
 102a10c:	193fffcc 	andi	r4,r3,65535
 102a110:	2c4b383a 	mul	r5,r5,r17
 102a114:	7bc00104 	addi	r15,r15,4
 102a118:	4a400104 	addi	r9,r9,4
 102a11c:	2a0b883a 	add	r5,r5,r8
 102a120:	29cb883a 	add	r5,r5,r7
 102a124:	2806943a 	slli	r3,r5,16
 102a128:	9c800104 	addi	r18,r19,4
 102a12c:	280ad43a 	srli	r5,r5,16
 102a130:	1908b03a 	or	r4,r3,r4
 102a134:	793fff15 	stw	r4,-4(r15)
 102a138:	48ffff17 	ldw	r3,-4(r9)
 102a13c:	92000017 	ldw	r8,0(r18)
 102a140:	1806d43a 	srli	r3,r3,16
 102a144:	413fffcc 	andi	r4,r8,65535
 102a148:	1c47383a 	mul	r3,r3,r17
 102a14c:	1907883a 	add	r3,r3,r4
 102a150:	1947883a 	add	r3,r3,r5
 102a154:	180ed43a 	srli	r7,r3,16
 102a158:	4abfe936 	bltu	r9,r10,102a100 <_gp+0xfffebe1c>
 102a15c:	98c00115 	stw	r3,4(r19)
 102a160:	31800104 	addi	r6,r6,4
 102a164:	63000104 	addi	r12,r12,4
 102a168:	337fbe36 	bltu	r6,r13,102a064 <_gp+0xfffebd80>
 102a16c:	0400090e 	bge	zero,r16,102a194 <__multiply+0x1cc>
 102a170:	58ffff17 	ldw	r3,-4(r11)
 102a174:	5affff04 	addi	r11,r11,-4
 102a178:	18000326 	beq	r3,zero,102a188 <__multiply+0x1c0>
 102a17c:	00000506 	br	102a194 <__multiply+0x1cc>
 102a180:	58c00017 	ldw	r3,0(r11)
 102a184:	1800031e 	bne	r3,zero,102a194 <__multiply+0x1cc>
 102a188:	843fffc4 	addi	r16,r16,-1
 102a18c:	5affff04 	addi	r11,r11,-4
 102a190:	803ffb1e 	bne	r16,zero,102a180 <_gp+0xfffebe9c>
 102a194:	14000415 	stw	r16,16(r2)
 102a198:	dfc00517 	ldw	ra,20(sp)
 102a19c:	dd000417 	ldw	r20,16(sp)
 102a1a0:	dcc00317 	ldw	r19,12(sp)
 102a1a4:	dc800217 	ldw	r18,8(sp)
 102a1a8:	dc400117 	ldw	r17,4(sp)
 102a1ac:	dc000017 	ldw	r16,0(sp)
 102a1b0:	dec00604 	addi	sp,sp,24
 102a1b4:	f800283a 	ret
 102a1b8:	3029883a 	mov	r20,r6
 102a1bc:	2823883a 	mov	r17,r5
 102a1c0:	003f9006 	br	102a004 <_gp+0xfffebd20>

0102a1c4 <__pow5mult>:
 102a1c4:	defffa04 	addi	sp,sp,-24
 102a1c8:	dcc00315 	stw	r19,12(sp)
 102a1cc:	dc800215 	stw	r18,8(sp)
 102a1d0:	dc000015 	stw	r16,0(sp)
 102a1d4:	dfc00515 	stw	ra,20(sp)
 102a1d8:	dd000415 	stw	r20,16(sp)
 102a1dc:	dc400115 	stw	r17,4(sp)
 102a1e0:	308000cc 	andi	r2,r6,3
 102a1e4:	3021883a 	mov	r16,r6
 102a1e8:	2027883a 	mov	r19,r4
 102a1ec:	2825883a 	mov	r18,r5
 102a1f0:	10002e1e 	bne	r2,zero,102a2ac <__pow5mult+0xe8>
 102a1f4:	8021d0ba 	srai	r16,r16,2
 102a1f8:	80001a26 	beq	r16,zero,102a264 <__pow5mult+0xa0>
 102a1fc:	9c401217 	ldw	r17,72(r19)
 102a200:	8800061e 	bne	r17,zero,102a21c <__pow5mult+0x58>
 102a204:	00003406 	br	102a2d8 <__pow5mult+0x114>
 102a208:	8021d07a 	srai	r16,r16,1
 102a20c:	80001526 	beq	r16,zero,102a264 <__pow5mult+0xa0>
 102a210:	88800017 	ldw	r2,0(r17)
 102a214:	10001c26 	beq	r2,zero,102a288 <__pow5mult+0xc4>
 102a218:	1023883a 	mov	r17,r2
 102a21c:	80c0004c 	andi	r3,r16,1
 102a220:	183ff926 	beq	r3,zero,102a208 <_gp+0xfffebf24>
 102a224:	900b883a 	mov	r5,r18
 102a228:	880d883a 	mov	r6,r17
 102a22c:	9809883a 	mov	r4,r19
 102a230:	1029fc80 	call	1029fc8 <__multiply>
 102a234:	90001b26 	beq	r18,zero,102a2a4 <__pow5mult+0xe0>
 102a238:	91c00117 	ldw	r7,4(r18)
 102a23c:	98c01317 	ldw	r3,76(r19)
 102a240:	8021d07a 	srai	r16,r16,1
 102a244:	39cf883a 	add	r7,r7,r7
 102a248:	39cf883a 	add	r7,r7,r7
 102a24c:	19c7883a 	add	r3,r3,r7
 102a250:	19000017 	ldw	r4,0(r3)
 102a254:	91000015 	stw	r4,0(r18)
 102a258:	1c800015 	stw	r18,0(r3)
 102a25c:	1025883a 	mov	r18,r2
 102a260:	803feb1e 	bne	r16,zero,102a210 <_gp+0xfffebf2c>
 102a264:	9005883a 	mov	r2,r18
 102a268:	dfc00517 	ldw	ra,20(sp)
 102a26c:	dd000417 	ldw	r20,16(sp)
 102a270:	dcc00317 	ldw	r19,12(sp)
 102a274:	dc800217 	ldw	r18,8(sp)
 102a278:	dc400117 	ldw	r17,4(sp)
 102a27c:	dc000017 	ldw	r16,0(sp)
 102a280:	dec00604 	addi	sp,sp,24
 102a284:	f800283a 	ret
 102a288:	9809883a 	mov	r4,r19
 102a28c:	880b883a 	mov	r5,r17
 102a290:	880d883a 	mov	r6,r17
 102a294:	1029fc80 	call	1029fc8 <__multiply>
 102a298:	88800015 	stw	r2,0(r17)
 102a29c:	10000015 	stw	zero,0(r2)
 102a2a0:	003fdd06 	br	102a218 <_gp+0xfffebf34>
 102a2a4:	1025883a 	mov	r18,r2
 102a2a8:	003fd706 	br	102a208 <_gp+0xfffebf24>
 102a2ac:	10bfffc4 	addi	r2,r2,-1
 102a2b0:	1085883a 	add	r2,r2,r2
 102a2b4:	00c040f4 	movhi	r3,259
 102a2b8:	18d16a04 	addi	r3,r3,17832
 102a2bc:	1085883a 	add	r2,r2,r2
 102a2c0:	1885883a 	add	r2,r3,r2
 102a2c4:	11800017 	ldw	r6,0(r2)
 102a2c8:	000f883a 	mov	r7,zero
 102a2cc:	1029c5c0 	call	1029c5c <__multadd>
 102a2d0:	1025883a 	mov	r18,r2
 102a2d4:	003fc706 	br	102a1f4 <_gp+0xfffebf10>
 102a2d8:	05000044 	movi	r20,1
 102a2dc:	9809883a 	mov	r4,r19
 102a2e0:	a00b883a 	mov	r5,r20
 102a2e4:	1029b8c0 	call	1029b8c <_Balloc>
 102a2e8:	1023883a 	mov	r17,r2
 102a2ec:	00809c44 	movi	r2,625
 102a2f0:	88800515 	stw	r2,20(r17)
 102a2f4:	8d000415 	stw	r20,16(r17)
 102a2f8:	9c401215 	stw	r17,72(r19)
 102a2fc:	88000015 	stw	zero,0(r17)
 102a300:	003fc606 	br	102a21c <_gp+0xfffebf38>

0102a304 <__lshift>:
 102a304:	defff904 	addi	sp,sp,-28
 102a308:	dd000415 	stw	r20,16(sp)
 102a30c:	dcc00315 	stw	r19,12(sp)
 102a310:	3029d17a 	srai	r20,r6,5
 102a314:	2cc00417 	ldw	r19,16(r5)
 102a318:	28800217 	ldw	r2,8(r5)
 102a31c:	dd400515 	stw	r21,20(sp)
 102a320:	a4e7883a 	add	r19,r20,r19
 102a324:	dc800215 	stw	r18,8(sp)
 102a328:	dc400115 	stw	r17,4(sp)
 102a32c:	dc000015 	stw	r16,0(sp)
 102a330:	dfc00615 	stw	ra,24(sp)
 102a334:	9c000044 	addi	r16,r19,1
 102a338:	2823883a 	mov	r17,r5
 102a33c:	302b883a 	mov	r21,r6
 102a340:	2025883a 	mov	r18,r4
 102a344:	29400117 	ldw	r5,4(r5)
 102a348:	1400030e 	bge	r2,r16,102a358 <__lshift+0x54>
 102a34c:	1085883a 	add	r2,r2,r2
 102a350:	29400044 	addi	r5,r5,1
 102a354:	143ffd16 	blt	r2,r16,102a34c <_gp+0xfffec068>
 102a358:	9009883a 	mov	r4,r18
 102a35c:	1029b8c0 	call	1029b8c <_Balloc>
 102a360:	11c00504 	addi	r7,r2,20
 102a364:	0500090e 	bge	zero,r20,102a38c <__lshift+0x88>
 102a368:	3811883a 	mov	r8,r7
 102a36c:	0007883a 	mov	r3,zero
 102a370:	40000015 	stw	zero,0(r8)
 102a374:	18c00044 	addi	r3,r3,1
 102a378:	42000104 	addi	r8,r8,4
 102a37c:	1d3ffc1e 	bne	r3,r20,102a370 <_gp+0xfffec08c>
 102a380:	18c7883a 	add	r3,r3,r3
 102a384:	18c7883a 	add	r3,r3,r3
 102a388:	38cf883a 	add	r7,r7,r3
 102a38c:	89000417 	ldw	r4,16(r17)
 102a390:	88c00504 	addi	r3,r17,20
 102a394:	a98007cc 	andi	r6,r21,31
 102a398:	2109883a 	add	r4,r4,r4
 102a39c:	2109883a 	add	r4,r4,r4
 102a3a0:	1909883a 	add	r4,r3,r4
 102a3a4:	30002326 	beq	r6,zero,102a434 <__lshift+0x130>
 102a3a8:	01400804 	movi	r5,32
 102a3ac:	298bc83a 	sub	r5,r5,r6
 102a3b0:	0013883a 	mov	r9,zero
 102a3b4:	1a000017 	ldw	r8,0(r3)
 102a3b8:	3815883a 	mov	r10,r7
 102a3bc:	39c00104 	addi	r7,r7,4
 102a3c0:	4190983a 	sll	r8,r8,r6
 102a3c4:	18c00104 	addi	r3,r3,4
 102a3c8:	4a10b03a 	or	r8,r9,r8
 102a3cc:	3a3fff15 	stw	r8,-4(r7)
 102a3d0:	1a3fff17 	ldw	r8,-4(r3)
 102a3d4:	4152d83a 	srl	r9,r8,r5
 102a3d8:	193ff636 	bltu	r3,r4,102a3b4 <_gp+0xfffec0d0>
 102a3dc:	52400115 	stw	r9,4(r10)
 102a3e0:	48000126 	beq	r9,zero,102a3e8 <__lshift+0xe4>
 102a3e4:	9c000084 	addi	r16,r19,2
 102a3e8:	89000117 	ldw	r4,4(r17)
 102a3ec:	90c01317 	ldw	r3,76(r18)
 102a3f0:	843fffc4 	addi	r16,r16,-1
 102a3f4:	2109883a 	add	r4,r4,r4
 102a3f8:	2109883a 	add	r4,r4,r4
 102a3fc:	1907883a 	add	r3,r3,r4
 102a400:	19000017 	ldw	r4,0(r3)
 102a404:	14000415 	stw	r16,16(r2)
 102a408:	89000015 	stw	r4,0(r17)
 102a40c:	1c400015 	stw	r17,0(r3)
 102a410:	dfc00617 	ldw	ra,24(sp)
 102a414:	dd400517 	ldw	r21,20(sp)
 102a418:	dd000417 	ldw	r20,16(sp)
 102a41c:	dcc00317 	ldw	r19,12(sp)
 102a420:	dc800217 	ldw	r18,8(sp)
 102a424:	dc400117 	ldw	r17,4(sp)
 102a428:	dc000017 	ldw	r16,0(sp)
 102a42c:	dec00704 	addi	sp,sp,28
 102a430:	f800283a 	ret
 102a434:	19400017 	ldw	r5,0(r3)
 102a438:	39c00104 	addi	r7,r7,4
 102a43c:	18c00104 	addi	r3,r3,4
 102a440:	397fff15 	stw	r5,-4(r7)
 102a444:	193ffb36 	bltu	r3,r4,102a434 <_gp+0xfffec150>
 102a448:	003fe706 	br	102a3e8 <_gp+0xfffec104>

0102a44c <__mcmp>:
 102a44c:	20800417 	ldw	r2,16(r4)
 102a450:	28c00417 	ldw	r3,16(r5)
 102a454:	10c5c83a 	sub	r2,r2,r3
 102a458:	1000111e 	bne	r2,zero,102a4a0 <__mcmp+0x54>
 102a45c:	18c7883a 	add	r3,r3,r3
 102a460:	18c7883a 	add	r3,r3,r3
 102a464:	21000504 	addi	r4,r4,20
 102a468:	29400504 	addi	r5,r5,20
 102a46c:	20c5883a 	add	r2,r4,r3
 102a470:	28cb883a 	add	r5,r5,r3
 102a474:	00000106 	br	102a47c <__mcmp+0x30>
 102a478:	20800a2e 	bgeu	r4,r2,102a4a4 <__mcmp+0x58>
 102a47c:	10bfff04 	addi	r2,r2,-4
 102a480:	297fff04 	addi	r5,r5,-4
 102a484:	11800017 	ldw	r6,0(r2)
 102a488:	28c00017 	ldw	r3,0(r5)
 102a48c:	30fffa26 	beq	r6,r3,102a478 <_gp+0xfffec194>
 102a490:	30c00236 	bltu	r6,r3,102a49c <__mcmp+0x50>
 102a494:	00800044 	movi	r2,1
 102a498:	f800283a 	ret
 102a49c:	00bfffc4 	movi	r2,-1
 102a4a0:	f800283a 	ret
 102a4a4:	0005883a 	mov	r2,zero
 102a4a8:	f800283a 	ret

0102a4ac <__mdiff>:
 102a4ac:	defffb04 	addi	sp,sp,-20
 102a4b0:	dc000015 	stw	r16,0(sp)
 102a4b4:	2821883a 	mov	r16,r5
 102a4b8:	dcc00315 	stw	r19,12(sp)
 102a4bc:	300b883a 	mov	r5,r6
 102a4c0:	2027883a 	mov	r19,r4
 102a4c4:	8009883a 	mov	r4,r16
 102a4c8:	dc800215 	stw	r18,8(sp)
 102a4cc:	dfc00415 	stw	ra,16(sp)
 102a4d0:	dc400115 	stw	r17,4(sp)
 102a4d4:	3025883a 	mov	r18,r6
 102a4d8:	102a44c0 	call	102a44c <__mcmp>
 102a4dc:	10005226 	beq	r2,zero,102a628 <__mdiff+0x17c>
 102a4e0:	10004c16 	blt	r2,zero,102a614 <__mdiff+0x168>
 102a4e4:	0023883a 	mov	r17,zero
 102a4e8:	81400117 	ldw	r5,4(r16)
 102a4ec:	9809883a 	mov	r4,r19
 102a4f0:	1029b8c0 	call	1029b8c <_Balloc>
 102a4f4:	83400417 	ldw	r13,16(r16)
 102a4f8:	93800417 	ldw	r14,16(r18)
 102a4fc:	81000504 	addi	r4,r16,20
 102a500:	6b59883a 	add	r12,r13,r13
 102a504:	739d883a 	add	r14,r14,r14
 102a508:	6319883a 	add	r12,r12,r12
 102a50c:	91800504 	addi	r6,r18,20
 102a510:	739d883a 	add	r14,r14,r14
 102a514:	14400315 	stw	r17,12(r2)
 102a518:	2319883a 	add	r12,r4,r12
 102a51c:	339d883a 	add	r14,r6,r14
 102a520:	12400504 	addi	r9,r2,20
 102a524:	0007883a 	mov	r3,zero
 102a528:	22000017 	ldw	r8,0(r4)
 102a52c:	32800017 	ldw	r10,0(r6)
 102a530:	4ac00104 	addi	r11,r9,4
 102a534:	41ffffcc 	andi	r7,r8,65535
 102a538:	38c7883a 	add	r3,r7,r3
 102a53c:	51ffffcc 	andi	r7,r10,65535
 102a540:	19cfc83a 	sub	r7,r3,r7
 102a544:	4010d43a 	srli	r8,r8,16
 102a548:	5014d43a 	srli	r10,r10,16
 102a54c:	3807d43a 	srai	r3,r7,16
 102a550:	39ffffcc 	andi	r7,r7,65535
 102a554:	4291c83a 	sub	r8,r8,r10
 102a558:	40c7883a 	add	r3,r8,r3
 102a55c:	1810943a 	slli	r8,r3,16
 102a560:	31800104 	addi	r6,r6,4
 102a564:	21000104 	addi	r4,r4,4
 102a568:	41ceb03a 	or	r7,r8,r7
 102a56c:	49c00015 	stw	r7,0(r9)
 102a570:	1807d43a 	srai	r3,r3,16
 102a574:	580b883a 	mov	r5,r11
 102a578:	5813883a 	mov	r9,r11
 102a57c:	33bfea36 	bltu	r6,r14,102a528 <_gp+0xfffec244>
 102a580:	2011883a 	mov	r8,r4
 102a584:	2300152e 	bgeu	r4,r12,102a5dc <__mdiff+0x130>
 102a588:	21400017 	ldw	r5,0(r4)
 102a58c:	4a400104 	addi	r9,r9,4
 102a590:	21000104 	addi	r4,r4,4
 102a594:	29ffffcc 	andi	r7,r5,65535
 102a598:	38c7883a 	add	r3,r7,r3
 102a59c:	280ad43a 	srli	r5,r5,16
 102a5a0:	180dd43a 	srai	r6,r3,16
 102a5a4:	19ffffcc 	andi	r7,r3,65535
 102a5a8:	3147883a 	add	r3,r6,r5
 102a5ac:	180a943a 	slli	r5,r3,16
 102a5b0:	1807d43a 	srai	r3,r3,16
 102a5b4:	29ceb03a 	or	r7,r5,r7
 102a5b8:	49ffff15 	stw	r7,-4(r9)
 102a5bc:	233ff236 	bltu	r4,r12,102a588 <_gp+0xfffec2a4>
 102a5c0:	0206303a 	nor	r3,zero,r8
 102a5c4:	1b07883a 	add	r3,r3,r12
 102a5c8:	1806d0ba 	srli	r3,r3,2
 102a5cc:	18c00044 	addi	r3,r3,1
 102a5d0:	18c7883a 	add	r3,r3,r3
 102a5d4:	18c7883a 	add	r3,r3,r3
 102a5d8:	58cb883a 	add	r5,r11,r3
 102a5dc:	28ffff04 	addi	r3,r5,-4
 102a5e0:	3800041e 	bne	r7,zero,102a5f4 <__mdiff+0x148>
 102a5e4:	18ffff04 	addi	r3,r3,-4
 102a5e8:	19000017 	ldw	r4,0(r3)
 102a5ec:	6b7fffc4 	addi	r13,r13,-1
 102a5f0:	203ffc26 	beq	r4,zero,102a5e4 <_gp+0xfffec300>
 102a5f4:	13400415 	stw	r13,16(r2)
 102a5f8:	dfc00417 	ldw	ra,16(sp)
 102a5fc:	dcc00317 	ldw	r19,12(sp)
 102a600:	dc800217 	ldw	r18,8(sp)
 102a604:	dc400117 	ldw	r17,4(sp)
 102a608:	dc000017 	ldw	r16,0(sp)
 102a60c:	dec00504 	addi	sp,sp,20
 102a610:	f800283a 	ret
 102a614:	8005883a 	mov	r2,r16
 102a618:	04400044 	movi	r17,1
 102a61c:	9021883a 	mov	r16,r18
 102a620:	1025883a 	mov	r18,r2
 102a624:	003fb006 	br	102a4e8 <_gp+0xfffec204>
 102a628:	9809883a 	mov	r4,r19
 102a62c:	000b883a 	mov	r5,zero
 102a630:	1029b8c0 	call	1029b8c <_Balloc>
 102a634:	00c00044 	movi	r3,1
 102a638:	10c00415 	stw	r3,16(r2)
 102a63c:	10000515 	stw	zero,20(r2)
 102a640:	003fed06 	br	102a5f8 <_gp+0xfffec314>

0102a644 <__ulp>:
 102a644:	295ffc2c 	andhi	r5,r5,32752
 102a648:	00bf3034 	movhi	r2,64704
 102a64c:	2887883a 	add	r3,r5,r2
 102a650:	00c0020e 	bge	zero,r3,102a65c <__ulp+0x18>
 102a654:	0005883a 	mov	r2,zero
 102a658:	f800283a 	ret
 102a65c:	00c7c83a 	sub	r3,zero,r3
 102a660:	180bd53a 	srai	r5,r3,20
 102a664:	008004c4 	movi	r2,19
 102a668:	11400a0e 	bge	r2,r5,102a694 <__ulp+0x50>
 102a66c:	00800c84 	movi	r2,50
 102a670:	0007883a 	mov	r3,zero
 102a674:	11400516 	blt	r2,r5,102a68c <__ulp+0x48>
 102a678:	00800cc4 	movi	r2,51
 102a67c:	114bc83a 	sub	r5,r2,r5
 102a680:	00800044 	movi	r2,1
 102a684:	1144983a 	sll	r2,r2,r5
 102a688:	f800283a 	ret
 102a68c:	00800044 	movi	r2,1
 102a690:	f800283a 	ret
 102a694:	00800234 	movhi	r2,8
 102a698:	1147d83a 	sra	r3,r2,r5
 102a69c:	0005883a 	mov	r2,zero
 102a6a0:	f800283a 	ret

0102a6a4 <__b2d>:
 102a6a4:	defffa04 	addi	sp,sp,-24
 102a6a8:	dc000015 	stw	r16,0(sp)
 102a6ac:	24000417 	ldw	r16,16(r4)
 102a6b0:	dc400115 	stw	r17,4(sp)
 102a6b4:	24400504 	addi	r17,r4,20
 102a6b8:	8421883a 	add	r16,r16,r16
 102a6bc:	8421883a 	add	r16,r16,r16
 102a6c0:	8c21883a 	add	r16,r17,r16
 102a6c4:	dc800215 	stw	r18,8(sp)
 102a6c8:	84bfff17 	ldw	r18,-4(r16)
 102a6cc:	dd000415 	stw	r20,16(sp)
 102a6d0:	dcc00315 	stw	r19,12(sp)
 102a6d4:	9009883a 	mov	r4,r18
 102a6d8:	2829883a 	mov	r20,r5
 102a6dc:	dfc00515 	stw	ra,20(sp)
 102a6e0:	1029e740 	call	1029e74 <__hi0bits>
 102a6e4:	00c00804 	movi	r3,32
 102a6e8:	1887c83a 	sub	r3,r3,r2
 102a6ec:	a0c00015 	stw	r3,0(r20)
 102a6f0:	00c00284 	movi	r3,10
 102a6f4:	84ffff04 	addi	r19,r16,-4
 102a6f8:	18801216 	blt	r3,r2,102a744 <__b2d+0xa0>
 102a6fc:	014002c4 	movi	r5,11
 102a700:	2889c83a 	sub	r4,r5,r2
 102a704:	9106d83a 	srl	r3,r18,r4
 102a708:	18cffc34 	orhi	r3,r3,16368
 102a70c:	8cc0282e 	bgeu	r17,r19,102a7b0 <__b2d+0x10c>
 102a710:	817ffe17 	ldw	r5,-8(r16)
 102a714:	290ad83a 	srl	r5,r5,r4
 102a718:	10800544 	addi	r2,r2,21
 102a71c:	9084983a 	sll	r2,r18,r2
 102a720:	2884b03a 	or	r2,r5,r2
 102a724:	dfc00517 	ldw	ra,20(sp)
 102a728:	dd000417 	ldw	r20,16(sp)
 102a72c:	dcc00317 	ldw	r19,12(sp)
 102a730:	dc800217 	ldw	r18,8(sp)
 102a734:	dc400117 	ldw	r17,4(sp)
 102a738:	dc000017 	ldw	r16,0(sp)
 102a73c:	dec00604 	addi	sp,sp,24
 102a740:	f800283a 	ret
 102a744:	113ffd44 	addi	r4,r2,-11
 102a748:	8cc00f2e 	bgeu	r17,r19,102a788 <__b2d+0xe4>
 102a74c:	81bffe04 	addi	r6,r16,-8
 102a750:	817ffe17 	ldw	r5,-8(r16)
 102a754:	20001326 	beq	r4,zero,102a7a4 <__b2d+0x100>
 102a758:	00c00ac4 	movi	r3,43
 102a75c:	1885c83a 	sub	r2,r3,r2
 102a760:	2886d83a 	srl	r3,r5,r2
 102a764:	9124983a 	sll	r18,r18,r4
 102a768:	90e4b03a 	or	r18,r18,r3
 102a76c:	90cffc34 	orhi	r3,r18,16368
 102a770:	8980112e 	bgeu	r17,r6,102a7b8 <__b2d+0x114>
 102a774:	81bffd17 	ldw	r6,-12(r16)
 102a778:	308cd83a 	srl	r6,r6,r2
 102a77c:	2904983a 	sll	r2,r5,r4
 102a780:	1184b03a 	or	r2,r2,r6
 102a784:	003fe706 	br	102a724 <_gp+0xfffec440>
 102a788:	20000526 	beq	r4,zero,102a7a0 <__b2d+0xfc>
 102a78c:	9124983a 	sll	r18,r18,r4
 102a790:	000d883a 	mov	r6,zero
 102a794:	000b883a 	mov	r5,zero
 102a798:	90cffc34 	orhi	r3,r18,16368
 102a79c:	003ff706 	br	102a77c <_gp+0xfffec498>
 102a7a0:	000b883a 	mov	r5,zero
 102a7a4:	90cffc34 	orhi	r3,r18,16368
 102a7a8:	2805883a 	mov	r2,r5
 102a7ac:	003fdd06 	br	102a724 <_gp+0xfffec440>
 102a7b0:	000b883a 	mov	r5,zero
 102a7b4:	003fd806 	br	102a718 <_gp+0xfffec434>
 102a7b8:	000d883a 	mov	r6,zero
 102a7bc:	003fef06 	br	102a77c <_gp+0xfffec498>

0102a7c0 <__d2b>:
 102a7c0:	defff704 	addi	sp,sp,-36
 102a7c4:	dc000215 	stw	r16,8(sp)
 102a7c8:	3021883a 	mov	r16,r6
 102a7cc:	dc400315 	stw	r17,12(sp)
 102a7d0:	8022907a 	slli	r17,r16,1
 102a7d4:	dd400715 	stw	r21,28(sp)
 102a7d8:	282b883a 	mov	r21,r5
 102a7dc:	01400044 	movi	r5,1
 102a7e0:	dd000615 	stw	r20,24(sp)
 102a7e4:	dcc00515 	stw	r19,20(sp)
 102a7e8:	dc800415 	stw	r18,16(sp)
 102a7ec:	dfc00815 	stw	ra,32(sp)
 102a7f0:	3829883a 	mov	r20,r7
 102a7f4:	dc800917 	ldw	r18,36(sp)
 102a7f8:	8822d57a 	srli	r17,r17,21
 102a7fc:	1029b8c0 	call	1029b8c <_Balloc>
 102a800:	1027883a 	mov	r19,r2
 102a804:	00800434 	movhi	r2,16
 102a808:	10bfffc4 	addi	r2,r2,-1
 102a80c:	808c703a 	and	r6,r16,r2
 102a810:	88000126 	beq	r17,zero,102a818 <__d2b+0x58>
 102a814:	31800434 	orhi	r6,r6,16
 102a818:	d9800015 	stw	r6,0(sp)
 102a81c:	a8001f26 	beq	r21,zero,102a89c <__d2b+0xdc>
 102a820:	d9000104 	addi	r4,sp,4
 102a824:	dd400115 	stw	r21,4(sp)
 102a828:	1029edc0 	call	1029edc <__lo0bits>
 102a82c:	d8c00017 	ldw	r3,0(sp)
 102a830:	1000291e 	bne	r2,zero,102a8d8 <__d2b+0x118>
 102a834:	d9000117 	ldw	r4,4(sp)
 102a838:	99000515 	stw	r4,20(r19)
 102a83c:	1820c03a 	cmpne	r16,r3,zero
 102a840:	84000044 	addi	r16,r16,1
 102a844:	98c00615 	stw	r3,24(r19)
 102a848:	9c000415 	stw	r16,16(r19)
 102a84c:	88001b1e 	bne	r17,zero,102a8bc <__d2b+0xfc>
 102a850:	800690ba 	slli	r3,r16,2
 102a854:	10bef384 	addi	r2,r2,-1074
 102a858:	a0800015 	stw	r2,0(r20)
 102a85c:	98c5883a 	add	r2,r19,r3
 102a860:	11000417 	ldw	r4,16(r2)
 102a864:	8020917a 	slli	r16,r16,5
 102a868:	1029e740 	call	1029e74 <__hi0bits>
 102a86c:	8085c83a 	sub	r2,r16,r2
 102a870:	90800015 	stw	r2,0(r18)
 102a874:	9805883a 	mov	r2,r19
 102a878:	dfc00817 	ldw	ra,32(sp)
 102a87c:	dd400717 	ldw	r21,28(sp)
 102a880:	dd000617 	ldw	r20,24(sp)
 102a884:	dcc00517 	ldw	r19,20(sp)
 102a888:	dc800417 	ldw	r18,16(sp)
 102a88c:	dc400317 	ldw	r17,12(sp)
 102a890:	dc000217 	ldw	r16,8(sp)
 102a894:	dec00904 	addi	sp,sp,36
 102a898:	f800283a 	ret
 102a89c:	d809883a 	mov	r4,sp
 102a8a0:	1029edc0 	call	1029edc <__lo0bits>
 102a8a4:	d8c00017 	ldw	r3,0(sp)
 102a8a8:	04000044 	movi	r16,1
 102a8ac:	9c000415 	stw	r16,16(r19)
 102a8b0:	98c00515 	stw	r3,20(r19)
 102a8b4:	10800804 	addi	r2,r2,32
 102a8b8:	883fe526 	beq	r17,zero,102a850 <_gp+0xfffec56c>
 102a8bc:	8c7ef344 	addi	r17,r17,-1075
 102a8c0:	88a3883a 	add	r17,r17,r2
 102a8c4:	00c00d44 	movi	r3,53
 102a8c8:	a4400015 	stw	r17,0(r20)
 102a8cc:	1885c83a 	sub	r2,r3,r2
 102a8d0:	90800015 	stw	r2,0(r18)
 102a8d4:	003fe706 	br	102a874 <_gp+0xfffec590>
 102a8d8:	01000804 	movi	r4,32
 102a8dc:	2089c83a 	sub	r4,r4,r2
 102a8e0:	1908983a 	sll	r4,r3,r4
 102a8e4:	d9400117 	ldw	r5,4(sp)
 102a8e8:	1886d83a 	srl	r3,r3,r2
 102a8ec:	2148b03a 	or	r4,r4,r5
 102a8f0:	99000515 	stw	r4,20(r19)
 102a8f4:	d8c00015 	stw	r3,0(sp)
 102a8f8:	003fd006 	br	102a83c <_gp+0xfffec558>

0102a8fc <__ratio>:
 102a8fc:	defff904 	addi	sp,sp,-28
 102a900:	dc400315 	stw	r17,12(sp)
 102a904:	2823883a 	mov	r17,r5
 102a908:	d9400104 	addi	r5,sp,4
 102a90c:	dfc00615 	stw	ra,24(sp)
 102a910:	dcc00515 	stw	r19,20(sp)
 102a914:	dc800415 	stw	r18,16(sp)
 102a918:	2027883a 	mov	r19,r4
 102a91c:	dc000215 	stw	r16,8(sp)
 102a920:	102a6a40 	call	102a6a4 <__b2d>
 102a924:	8809883a 	mov	r4,r17
 102a928:	d80b883a 	mov	r5,sp
 102a92c:	1025883a 	mov	r18,r2
 102a930:	1821883a 	mov	r16,r3
 102a934:	102a6a40 	call	102a6a4 <__b2d>
 102a938:	8a400417 	ldw	r9,16(r17)
 102a93c:	9a000417 	ldw	r8,16(r19)
 102a940:	100d883a 	mov	r6,r2
 102a944:	d8800017 	ldw	r2,0(sp)
 102a948:	4251c83a 	sub	r8,r8,r9
 102a94c:	4012917a 	slli	r9,r8,5
 102a950:	da000117 	ldw	r8,4(sp)
 102a954:	4091c83a 	sub	r8,r8,r2
 102a958:	4251883a 	add	r8,r8,r9
 102a95c:	02000d0e 	bge	zero,r8,102a994 <__ratio+0x98>
 102a960:	4010953a 	slli	r8,r8,20
 102a964:	4421883a 	add	r16,r8,r16
 102a968:	9009883a 	mov	r4,r18
 102a96c:	800b883a 	mov	r5,r16
 102a970:	180f883a 	mov	r7,r3
 102a974:	102f7480 	call	102f748 <__divdf3>
 102a978:	dfc00617 	ldw	ra,24(sp)
 102a97c:	dcc00517 	ldw	r19,20(sp)
 102a980:	dc800417 	ldw	r18,16(sp)
 102a984:	dc400317 	ldw	r17,12(sp)
 102a988:	dc000217 	ldw	r16,8(sp)
 102a98c:	dec00704 	addi	sp,sp,28
 102a990:	f800283a 	ret
 102a994:	4010953a 	slli	r8,r8,20
 102a998:	1a07c83a 	sub	r3,r3,r8
 102a99c:	003ff206 	br	102a968 <_gp+0xfffec684>

0102a9a0 <_mprec_log10>:
 102a9a0:	defffe04 	addi	sp,sp,-8
 102a9a4:	dc000015 	stw	r16,0(sp)
 102a9a8:	dfc00115 	stw	ra,4(sp)
 102a9ac:	008005c4 	movi	r2,23
 102a9b0:	2021883a 	mov	r16,r4
 102a9b4:	11000d0e 	bge	r2,r4,102a9ec <_mprec_log10+0x4c>
 102a9b8:	0005883a 	mov	r2,zero
 102a9bc:	00cffc34 	movhi	r3,16368
 102a9c0:	843fffc4 	addi	r16,r16,-1
 102a9c4:	1009883a 	mov	r4,r2
 102a9c8:	180b883a 	mov	r5,r3
 102a9cc:	000d883a 	mov	r6,zero
 102a9d0:	01d00934 	movhi	r7,16420
 102a9d4:	10302580 	call	1030258 <__muldf3>
 102a9d8:	803ff91e 	bne	r16,zero,102a9c0 <_gp+0xfffec6dc>
 102a9dc:	dfc00117 	ldw	ra,4(sp)
 102a9e0:	dc000017 	ldw	r16,0(sp)
 102a9e4:	dec00204 	addi	sp,sp,8
 102a9e8:	f800283a 	ret
 102a9ec:	202090fa 	slli	r16,r4,3
 102a9f0:	008040f4 	movhi	r2,259
 102a9f4:	10918104 	addi	r2,r2,17924
 102a9f8:	1421883a 	add	r16,r2,r16
 102a9fc:	80800017 	ldw	r2,0(r16)
 102aa00:	80c00117 	ldw	r3,4(r16)
 102aa04:	dfc00117 	ldw	ra,4(sp)
 102aa08:	dc000017 	ldw	r16,0(sp)
 102aa0c:	dec00204 	addi	sp,sp,8
 102aa10:	f800283a 	ret

0102aa14 <__copybits>:
 102aa14:	297fffc4 	addi	r5,r5,-1
 102aa18:	280fd17a 	srai	r7,r5,5
 102aa1c:	30c00417 	ldw	r3,16(r6)
 102aa20:	30800504 	addi	r2,r6,20
 102aa24:	39c00044 	addi	r7,r7,1
 102aa28:	18c7883a 	add	r3,r3,r3
 102aa2c:	39cf883a 	add	r7,r7,r7
 102aa30:	18c7883a 	add	r3,r3,r3
 102aa34:	39cf883a 	add	r7,r7,r7
 102aa38:	10c7883a 	add	r3,r2,r3
 102aa3c:	21cf883a 	add	r7,r4,r7
 102aa40:	10c00d2e 	bgeu	r2,r3,102aa78 <__copybits+0x64>
 102aa44:	200b883a 	mov	r5,r4
 102aa48:	12000017 	ldw	r8,0(r2)
 102aa4c:	29400104 	addi	r5,r5,4
 102aa50:	10800104 	addi	r2,r2,4
 102aa54:	2a3fff15 	stw	r8,-4(r5)
 102aa58:	10fffb36 	bltu	r2,r3,102aa48 <_gp+0xfffec764>
 102aa5c:	1985c83a 	sub	r2,r3,r6
 102aa60:	10bffac4 	addi	r2,r2,-21
 102aa64:	1004d0ba 	srli	r2,r2,2
 102aa68:	10800044 	addi	r2,r2,1
 102aa6c:	1085883a 	add	r2,r2,r2
 102aa70:	1085883a 	add	r2,r2,r2
 102aa74:	2089883a 	add	r4,r4,r2
 102aa78:	21c0032e 	bgeu	r4,r7,102aa88 <__copybits+0x74>
 102aa7c:	20000015 	stw	zero,0(r4)
 102aa80:	21000104 	addi	r4,r4,4
 102aa84:	21fffd36 	bltu	r4,r7,102aa7c <_gp+0xfffec798>
 102aa88:	f800283a 	ret

0102aa8c <__any_on>:
 102aa8c:	20c00417 	ldw	r3,16(r4)
 102aa90:	2805d17a 	srai	r2,r5,5
 102aa94:	21000504 	addi	r4,r4,20
 102aa98:	18800d0e 	bge	r3,r2,102aad0 <__any_on+0x44>
 102aa9c:	18c7883a 	add	r3,r3,r3
 102aaa0:	18c7883a 	add	r3,r3,r3
 102aaa4:	20c7883a 	add	r3,r4,r3
 102aaa8:	20c0192e 	bgeu	r4,r3,102ab10 <__any_on+0x84>
 102aaac:	18bfff17 	ldw	r2,-4(r3)
 102aab0:	18ffff04 	addi	r3,r3,-4
 102aab4:	1000041e 	bne	r2,zero,102aac8 <__any_on+0x3c>
 102aab8:	20c0142e 	bgeu	r4,r3,102ab0c <__any_on+0x80>
 102aabc:	18ffff04 	addi	r3,r3,-4
 102aac0:	19400017 	ldw	r5,0(r3)
 102aac4:	283ffc26 	beq	r5,zero,102aab8 <_gp+0xfffec7d4>
 102aac8:	00800044 	movi	r2,1
 102aacc:	f800283a 	ret
 102aad0:	10c00a0e 	bge	r2,r3,102aafc <__any_on+0x70>
 102aad4:	1085883a 	add	r2,r2,r2
 102aad8:	1085883a 	add	r2,r2,r2
 102aadc:	294007cc 	andi	r5,r5,31
 102aae0:	2087883a 	add	r3,r4,r2
 102aae4:	283ff026 	beq	r5,zero,102aaa8 <_gp+0xfffec7c4>
 102aae8:	19800017 	ldw	r6,0(r3)
 102aaec:	3144d83a 	srl	r2,r6,r5
 102aaf0:	114a983a 	sll	r5,r2,r5
 102aaf4:	29bff41e 	bne	r5,r6,102aac8 <_gp+0xfffec7e4>
 102aaf8:	003feb06 	br	102aaa8 <_gp+0xfffec7c4>
 102aafc:	1085883a 	add	r2,r2,r2
 102ab00:	1085883a 	add	r2,r2,r2
 102ab04:	2087883a 	add	r3,r4,r2
 102ab08:	003fe706 	br	102aaa8 <_gp+0xfffec7c4>
 102ab0c:	f800283a 	ret
 102ab10:	0005883a 	mov	r2,zero
 102ab14:	f800283a 	ret

0102ab18 <_realloc_r>:
 102ab18:	defff604 	addi	sp,sp,-40
 102ab1c:	dcc00315 	stw	r19,12(sp)
 102ab20:	dc400115 	stw	r17,4(sp)
 102ab24:	dfc00915 	stw	ra,36(sp)
 102ab28:	df000815 	stw	fp,32(sp)
 102ab2c:	ddc00715 	stw	r23,28(sp)
 102ab30:	dd800615 	stw	r22,24(sp)
 102ab34:	dd400515 	stw	r21,20(sp)
 102ab38:	dd000415 	stw	r20,16(sp)
 102ab3c:	dc800215 	stw	r18,8(sp)
 102ab40:	dc000015 	stw	r16,0(sp)
 102ab44:	2827883a 	mov	r19,r5
 102ab48:	3023883a 	mov	r17,r6
 102ab4c:	2800bf26 	beq	r5,zero,102ae4c <_realloc_r+0x334>
 102ab50:	2025883a 	mov	r18,r4
 102ab54:	1031a6c0 	call	1031a6c <__malloc_lock>
 102ab58:	98ffff17 	ldw	r3,-4(r19)
 102ab5c:	01bfff04 	movi	r6,-4
 102ab60:	890002c4 	addi	r4,r17,11
 102ab64:	01c00584 	movi	r7,22
 102ab68:	9d7ffe04 	addi	r21,r19,-8
 102ab6c:	19a0703a 	and	r16,r3,r6
 102ab70:	39003f2e 	bgeu	r7,r4,102ac70 <_realloc_r+0x158>
 102ab74:	053ffe04 	movi	r20,-8
 102ab78:	2528703a 	and	r20,r4,r20
 102ab7c:	a00f883a 	mov	r7,r20
 102ab80:	a0008216 	blt	r20,zero,102ad8c <_realloc_r+0x274>
 102ab84:	a4408136 	bltu	r20,r17,102ad8c <_realloc_r+0x274>
 102ab88:	81c03c0e 	bge	r16,r7,102ac7c <_realloc_r+0x164>
 102ab8c:	070040f4 	movhi	fp,259
 102ab90:	e7133504 	addi	fp,fp,19668
 102ab94:	e1000217 	ldw	r4,8(fp)
 102ab98:	ac05883a 	add	r2,r21,r16
 102ab9c:	2080bf26 	beq	r4,r2,102ae9c <_realloc_r+0x384>
 102aba0:	11000117 	ldw	r4,4(r2)
 102aba4:	023fff84 	movi	r8,-2
 102aba8:	2210703a 	and	r8,r4,r8
 102abac:	1211883a 	add	r8,r2,r8
 102abb0:	41400117 	ldw	r5,4(r8)
 102abb4:	2940004c 	andi	r5,r5,1
 102abb8:	28004a1e 	bne	r5,zero,102ace4 <_realloc_r+0x1cc>
 102abbc:	017fff04 	movi	r5,-4
 102abc0:	2148703a 	and	r4,r4,r5
 102abc4:	2409883a 	add	r4,r4,r16
 102abc8:	21c0ad0e 	bge	r4,r7,102ae80 <_realloc_r+0x368>
 102abcc:	18c0004c 	andi	r3,r3,1
 102abd0:	18007f1e 	bne	r3,zero,102add0 <_realloc_r+0x2b8>
 102abd4:	9dfffe17 	ldw	r23,-8(r19)
 102abd8:	adefc83a 	sub	r23,r21,r23
 102abdc:	bd800117 	ldw	r22,4(r23)
 102abe0:	b14a703a 	and	r5,r22,r5
 102abe4:	216d883a 	add	r22,r4,r5
 102abe8:	b1c04516 	blt	r22,r7,102ad00 <_realloc_r+0x1e8>
 102abec:	10c00317 	ldw	r3,12(r2)
 102abf0:	10800217 	ldw	r2,8(r2)
 102abf4:	81bfff04 	addi	r6,r16,-4
 102abf8:	bc400204 	addi	r17,r23,8
 102abfc:	10c00315 	stw	r3,12(r2)
 102ac00:	18800215 	stw	r2,8(r3)
 102ac04:	b9400217 	ldw	r5,8(r23)
 102ac08:	b8c00317 	ldw	r3,12(r23)
 102ac0c:	00800904 	movi	r2,36
 102ac10:	28c00315 	stw	r3,12(r5)
 102ac14:	19400215 	stw	r5,8(r3)
 102ac18:	1180ef36 	bltu	r2,r6,102afd8 <_realloc_r+0x4c0>
 102ac1c:	008004c4 	movi	r2,19
 102ac20:	1180da2e 	bgeu	r2,r6,102af8c <_realloc_r+0x474>
 102ac24:	98800017 	ldw	r2,0(r19)
 102ac28:	b8800215 	stw	r2,8(r23)
 102ac2c:	98800117 	ldw	r2,4(r19)
 102ac30:	b8800315 	stw	r2,12(r23)
 102ac34:	008006c4 	movi	r2,27
 102ac38:	1180fc2e 	bgeu	r2,r6,102b02c <_realloc_r+0x514>
 102ac3c:	98800217 	ldw	r2,8(r19)
 102ac40:	b8800415 	stw	r2,16(r23)
 102ac44:	98800317 	ldw	r2,12(r19)
 102ac48:	b8800515 	stw	r2,20(r23)
 102ac4c:	00800904 	movi	r2,36
 102ac50:	3080421e 	bne	r6,r2,102ad5c <_realloc_r+0x244>
 102ac54:	98800417 	ldw	r2,16(r19)
 102ac58:	9cc00604 	addi	r19,r19,24
 102ac5c:	b8c00804 	addi	r3,r23,32
 102ac60:	b8800615 	stw	r2,24(r23)
 102ac64:	98bfff17 	ldw	r2,-4(r19)
 102ac68:	b8800715 	stw	r2,28(r23)
 102ac6c:	00003d06 	br	102ad64 <_realloc_r+0x24c>
 102ac70:	01c00404 	movi	r7,16
 102ac74:	3829883a 	mov	r20,r7
 102ac78:	003fc206 	br	102ab84 <_gp+0xfffec8a0>
 102ac7c:	9823883a 	mov	r17,r19
 102ac80:	850fc83a 	sub	r7,r16,r20
 102ac84:	008003c4 	movi	r2,15
 102ac88:	18c0004c 	andi	r3,r3,1
 102ac8c:	11c04336 	bltu	r2,r7,102ad9c <_realloc_r+0x284>
 102ac90:	1c06b03a 	or	r3,r3,r16
 102ac94:	a8c00115 	stw	r3,4(r21)
 102ac98:	ac21883a 	add	r16,r21,r16
 102ac9c:	80c00117 	ldw	r3,4(r16)
 102aca0:	18c00054 	ori	r3,r3,1
 102aca4:	80c00115 	stw	r3,4(r16)
 102aca8:	9009883a 	mov	r4,r18
 102acac:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102acb0:	8805883a 	mov	r2,r17
 102acb4:	dfc00917 	ldw	ra,36(sp)
 102acb8:	df000817 	ldw	fp,32(sp)
 102acbc:	ddc00717 	ldw	r23,28(sp)
 102acc0:	dd800617 	ldw	r22,24(sp)
 102acc4:	dd400517 	ldw	r21,20(sp)
 102acc8:	dd000417 	ldw	r20,16(sp)
 102accc:	dcc00317 	ldw	r19,12(sp)
 102acd0:	dc800217 	ldw	r18,8(sp)
 102acd4:	dc400117 	ldw	r17,4(sp)
 102acd8:	dc000017 	ldw	r16,0(sp)
 102acdc:	dec00a04 	addi	sp,sp,40
 102ace0:	f800283a 	ret
 102ace4:	18c0004c 	andi	r3,r3,1
 102ace8:	1800391e 	bne	r3,zero,102add0 <_realloc_r+0x2b8>
 102acec:	9dfffe17 	ldw	r23,-8(r19)
 102acf0:	00bfff04 	movi	r2,-4
 102acf4:	adefc83a 	sub	r23,r21,r23
 102acf8:	b9400117 	ldw	r5,4(r23)
 102acfc:	288a703a 	and	r5,r5,r2
 102ad00:	2c2d883a 	add	r22,r5,r16
 102ad04:	b1c03216 	blt	r22,r7,102add0 <_realloc_r+0x2b8>
 102ad08:	b8800317 	ldw	r2,12(r23)
 102ad0c:	b8c00217 	ldw	r3,8(r23)
 102ad10:	81bfff04 	addi	r6,r16,-4
 102ad14:	01000904 	movi	r4,36
 102ad18:	18800315 	stw	r2,12(r3)
 102ad1c:	10c00215 	stw	r3,8(r2)
 102ad20:	bc400204 	addi	r17,r23,8
 102ad24:	2180ac36 	bltu	r4,r6,102afd8 <_realloc_r+0x4c0>
 102ad28:	008004c4 	movi	r2,19
 102ad2c:	1180972e 	bgeu	r2,r6,102af8c <_realloc_r+0x474>
 102ad30:	98800017 	ldw	r2,0(r19)
 102ad34:	b8800215 	stw	r2,8(r23)
 102ad38:	98800117 	ldw	r2,4(r19)
 102ad3c:	b8800315 	stw	r2,12(r23)
 102ad40:	008006c4 	movi	r2,27
 102ad44:	1180b92e 	bgeu	r2,r6,102b02c <_realloc_r+0x514>
 102ad48:	98800217 	ldw	r2,8(r19)
 102ad4c:	b8800415 	stw	r2,16(r23)
 102ad50:	98800317 	ldw	r2,12(r19)
 102ad54:	b8800515 	stw	r2,20(r23)
 102ad58:	313fbe26 	beq	r6,r4,102ac54 <_gp+0xfffec970>
 102ad5c:	b8c00604 	addi	r3,r23,24
 102ad60:	9cc00404 	addi	r19,r19,16
 102ad64:	98800017 	ldw	r2,0(r19)
 102ad68:	b021883a 	mov	r16,r22
 102ad6c:	b82b883a 	mov	r21,r23
 102ad70:	18800015 	stw	r2,0(r3)
 102ad74:	98800117 	ldw	r2,4(r19)
 102ad78:	18800115 	stw	r2,4(r3)
 102ad7c:	98800217 	ldw	r2,8(r19)
 102ad80:	18800215 	stw	r2,8(r3)
 102ad84:	b8c00117 	ldw	r3,4(r23)
 102ad88:	003fbd06 	br	102ac80 <_gp+0xfffec99c>
 102ad8c:	00800304 	movi	r2,12
 102ad90:	90800015 	stw	r2,0(r18)
 102ad94:	0005883a 	mov	r2,zero
 102ad98:	003fc606 	br	102acb4 <_gp+0xfffec9d0>
 102ad9c:	1d06b03a 	or	r3,r3,r20
 102ada0:	ad0b883a 	add	r5,r21,r20
 102ada4:	a8c00115 	stw	r3,4(r21)
 102ada8:	38800054 	ori	r2,r7,1
 102adac:	28800115 	stw	r2,4(r5)
 102adb0:	29cf883a 	add	r7,r5,r7
 102adb4:	38800117 	ldw	r2,4(r7)
 102adb8:	9009883a 	mov	r4,r18
 102adbc:	29400204 	addi	r5,r5,8
 102adc0:	10800054 	ori	r2,r2,1
 102adc4:	38800115 	stw	r2,4(r7)
 102adc8:	10283a80 	call	10283a8 <_free_r>
 102adcc:	003fb606 	br	102aca8 <_gp+0xfffec9c4>
 102add0:	880b883a 	mov	r5,r17
 102add4:	9009883a 	mov	r4,r18
 102add8:	1028f440 	call	1028f44 <_malloc_r>
 102addc:	1023883a 	mov	r17,r2
 102ade0:	1000aa26 	beq	r2,zero,102b08c <_realloc_r+0x574>
 102ade4:	98ffff17 	ldw	r3,-4(r19)
 102ade8:	113ffe04 	addi	r4,r2,-8
 102adec:	00bfff84 	movi	r2,-2
 102adf0:	1884703a 	and	r2,r3,r2
 102adf4:	a885883a 	add	r2,r21,r2
 102adf8:	20808626 	beq	r4,r2,102b014 <_realloc_r+0x4fc>
 102adfc:	81bfff04 	addi	r6,r16,-4
 102ae00:	00800904 	movi	r2,36
 102ae04:	11807036 	bltu	r2,r6,102afc8 <_realloc_r+0x4b0>
 102ae08:	00c004c4 	movi	r3,19
 102ae0c:	19805636 	bltu	r3,r6,102af68 <_realloc_r+0x450>
 102ae10:	8805883a 	mov	r2,r17
 102ae14:	9807883a 	mov	r3,r19
 102ae18:	19000017 	ldw	r4,0(r3)
 102ae1c:	11000015 	stw	r4,0(r2)
 102ae20:	19000117 	ldw	r4,4(r3)
 102ae24:	11000115 	stw	r4,4(r2)
 102ae28:	18c00217 	ldw	r3,8(r3)
 102ae2c:	10c00215 	stw	r3,8(r2)
 102ae30:	980b883a 	mov	r5,r19
 102ae34:	9009883a 	mov	r4,r18
 102ae38:	10283a80 	call	10283a8 <_free_r>
 102ae3c:	9009883a 	mov	r4,r18
 102ae40:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102ae44:	8805883a 	mov	r2,r17
 102ae48:	003f9a06 	br	102acb4 <_gp+0xfffec9d0>
 102ae4c:	300b883a 	mov	r5,r6
 102ae50:	dfc00917 	ldw	ra,36(sp)
 102ae54:	df000817 	ldw	fp,32(sp)
 102ae58:	ddc00717 	ldw	r23,28(sp)
 102ae5c:	dd800617 	ldw	r22,24(sp)
 102ae60:	dd400517 	ldw	r21,20(sp)
 102ae64:	dd000417 	ldw	r20,16(sp)
 102ae68:	dcc00317 	ldw	r19,12(sp)
 102ae6c:	dc800217 	ldw	r18,8(sp)
 102ae70:	dc400117 	ldw	r17,4(sp)
 102ae74:	dc000017 	ldw	r16,0(sp)
 102ae78:	dec00a04 	addi	sp,sp,40
 102ae7c:	1028f441 	jmpi	1028f44 <_malloc_r>
 102ae80:	11400317 	ldw	r5,12(r2)
 102ae84:	10800217 	ldw	r2,8(r2)
 102ae88:	9823883a 	mov	r17,r19
 102ae8c:	2021883a 	mov	r16,r4
 102ae90:	11400315 	stw	r5,12(r2)
 102ae94:	28800215 	stw	r2,8(r5)
 102ae98:	003f7906 	br	102ac80 <_gp+0xfffec99c>
 102ae9c:	21000117 	ldw	r4,4(r4)
 102aea0:	00bfff04 	movi	r2,-4
 102aea4:	a1800404 	addi	r6,r20,16
 102aea8:	2088703a 	and	r4,r4,r2
 102aeac:	2409883a 	add	r4,r4,r16
 102aeb0:	2180380e 	bge	r4,r6,102af94 <_realloc_r+0x47c>
 102aeb4:	18c0004c 	andi	r3,r3,1
 102aeb8:	183fc51e 	bne	r3,zero,102add0 <_gp+0xfffecaec>
 102aebc:	9dfffe17 	ldw	r23,-8(r19)
 102aec0:	adefc83a 	sub	r23,r21,r23
 102aec4:	b9400117 	ldw	r5,4(r23)
 102aec8:	288a703a 	and	r5,r5,r2
 102aecc:	216d883a 	add	r22,r4,r5
 102aed0:	b1bf8b16 	blt	r22,r6,102ad00 <_gp+0xfffeca1c>
 102aed4:	b8800317 	ldw	r2,12(r23)
 102aed8:	b8c00217 	ldw	r3,8(r23)
 102aedc:	81bfff04 	addi	r6,r16,-4
 102aee0:	01000904 	movi	r4,36
 102aee4:	18800315 	stw	r2,12(r3)
 102aee8:	10c00215 	stw	r3,8(r2)
 102aeec:	bc400204 	addi	r17,r23,8
 102aef0:	21805a36 	bltu	r4,r6,102b05c <_realloc_r+0x544>
 102aef4:	008004c4 	movi	r2,19
 102aef8:	1180562e 	bgeu	r2,r6,102b054 <_realloc_r+0x53c>
 102aefc:	98800017 	ldw	r2,0(r19)
 102af00:	b8800215 	stw	r2,8(r23)
 102af04:	98800117 	ldw	r2,4(r19)
 102af08:	b8800315 	stw	r2,12(r23)
 102af0c:	008006c4 	movi	r2,27
 102af10:	11805636 	bltu	r2,r6,102b06c <_realloc_r+0x554>
 102af14:	b8800404 	addi	r2,r23,16
 102af18:	9cc00204 	addi	r19,r19,8
 102af1c:	98c00017 	ldw	r3,0(r19)
 102af20:	10c00015 	stw	r3,0(r2)
 102af24:	98c00117 	ldw	r3,4(r19)
 102af28:	10c00115 	stw	r3,4(r2)
 102af2c:	98c00217 	ldw	r3,8(r19)
 102af30:	10c00215 	stw	r3,8(r2)
 102af34:	bd07883a 	add	r3,r23,r20
 102af38:	b505c83a 	sub	r2,r22,r20
 102af3c:	e0c00215 	stw	r3,8(fp)
 102af40:	10800054 	ori	r2,r2,1
 102af44:	18800115 	stw	r2,4(r3)
 102af48:	b8800117 	ldw	r2,4(r23)
 102af4c:	9009883a 	mov	r4,r18
 102af50:	1080004c 	andi	r2,r2,1
 102af54:	a0a8b03a 	or	r20,r20,r2
 102af58:	bd000115 	stw	r20,4(r23)
 102af5c:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102af60:	8805883a 	mov	r2,r17
 102af64:	003f5306 	br	102acb4 <_gp+0xfffec9d0>
 102af68:	98c00017 	ldw	r3,0(r19)
 102af6c:	88c00015 	stw	r3,0(r17)
 102af70:	98c00117 	ldw	r3,4(r19)
 102af74:	88c00115 	stw	r3,4(r17)
 102af78:	00c006c4 	movi	r3,27
 102af7c:	19801d36 	bltu	r3,r6,102aff4 <_realloc_r+0x4dc>
 102af80:	88800204 	addi	r2,r17,8
 102af84:	98c00204 	addi	r3,r19,8
 102af88:	003fa306 	br	102ae18 <_gp+0xfffecb34>
 102af8c:	8807883a 	mov	r3,r17
 102af90:	003f7406 	br	102ad64 <_gp+0xfffeca80>
 102af94:	ad2b883a 	add	r21,r21,r20
 102af98:	2505c83a 	sub	r2,r4,r20
 102af9c:	e5400215 	stw	r21,8(fp)
 102afa0:	10800054 	ori	r2,r2,1
 102afa4:	a8800115 	stw	r2,4(r21)
 102afa8:	98bfff17 	ldw	r2,-4(r19)
 102afac:	9009883a 	mov	r4,r18
 102afb0:	1080004c 	andi	r2,r2,1
 102afb4:	a0a8b03a 	or	r20,r20,r2
 102afb8:	9d3fff15 	stw	r20,-4(r19)
 102afbc:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102afc0:	9805883a 	mov	r2,r19
 102afc4:	003f3b06 	br	102acb4 <_gp+0xfffec9d0>
 102afc8:	8809883a 	mov	r4,r17
 102afcc:	980b883a 	mov	r5,r19
 102afd0:	102990c0 	call	102990c <memmove>
 102afd4:	003f9606 	br	102ae30 <_gp+0xfffecb4c>
 102afd8:	8809883a 	mov	r4,r17
 102afdc:	980b883a 	mov	r5,r19
 102afe0:	102990c0 	call	102990c <memmove>
 102afe4:	b8c00117 	ldw	r3,4(r23)
 102afe8:	b021883a 	mov	r16,r22
 102afec:	b82b883a 	mov	r21,r23
 102aff0:	003f2306 	br	102ac80 <_gp+0xfffec99c>
 102aff4:	98c00217 	ldw	r3,8(r19)
 102aff8:	88c00215 	stw	r3,8(r17)
 102affc:	98c00317 	ldw	r3,12(r19)
 102b000:	88c00315 	stw	r3,12(r17)
 102b004:	30800c26 	beq	r6,r2,102b038 <_realloc_r+0x520>
 102b008:	88800404 	addi	r2,r17,16
 102b00c:	98c00404 	addi	r3,r19,16
 102b010:	003f8106 	br	102ae18 <_gp+0xfffecb34>
 102b014:	893fff17 	ldw	r4,-4(r17)
 102b018:	00bfff04 	movi	r2,-4
 102b01c:	9823883a 	mov	r17,r19
 102b020:	2084703a 	and	r2,r4,r2
 102b024:	80a1883a 	add	r16,r16,r2
 102b028:	003f1506 	br	102ac80 <_gp+0xfffec99c>
 102b02c:	b8c00404 	addi	r3,r23,16
 102b030:	9cc00204 	addi	r19,r19,8
 102b034:	003f4b06 	br	102ad64 <_gp+0xfffeca80>
 102b038:	99000417 	ldw	r4,16(r19)
 102b03c:	88800604 	addi	r2,r17,24
 102b040:	98c00604 	addi	r3,r19,24
 102b044:	89000415 	stw	r4,16(r17)
 102b048:	99000517 	ldw	r4,20(r19)
 102b04c:	89000515 	stw	r4,20(r17)
 102b050:	003f7106 	br	102ae18 <_gp+0xfffecb34>
 102b054:	8805883a 	mov	r2,r17
 102b058:	003fb006 	br	102af1c <_gp+0xfffecc38>
 102b05c:	8809883a 	mov	r4,r17
 102b060:	980b883a 	mov	r5,r19
 102b064:	102990c0 	call	102990c <memmove>
 102b068:	003fb206 	br	102af34 <_gp+0xfffecc50>
 102b06c:	98800217 	ldw	r2,8(r19)
 102b070:	b8800415 	stw	r2,16(r23)
 102b074:	98800317 	ldw	r2,12(r19)
 102b078:	b8800515 	stw	r2,20(r23)
 102b07c:	31000726 	beq	r6,r4,102b09c <_realloc_r+0x584>
 102b080:	b8800604 	addi	r2,r23,24
 102b084:	9cc00404 	addi	r19,r19,16
 102b088:	003fa406 	br	102af1c <_gp+0xfffecc38>
 102b08c:	9009883a 	mov	r4,r18
 102b090:	1031a8c0 	call	1031a8c <__malloc_unlock>
 102b094:	0005883a 	mov	r2,zero
 102b098:	003f0606 	br	102acb4 <_gp+0xfffec9d0>
 102b09c:	98c00417 	ldw	r3,16(r19)
 102b0a0:	9cc00604 	addi	r19,r19,24
 102b0a4:	b8800804 	addi	r2,r23,32
 102b0a8:	b8c00615 	stw	r3,24(r23)
 102b0ac:	98ffff17 	ldw	r3,-4(r19)
 102b0b0:	b8c00715 	stw	r3,28(r23)
 102b0b4:	003f9906 	br	102af1c <_gp+0xfffecc38>

0102b0b8 <__fpclassifyd>:
 102b0b8:	00a00034 	movhi	r2,32768
 102b0bc:	10bfffc4 	addi	r2,r2,-1
 102b0c0:	2884703a 	and	r2,r5,r2
 102b0c4:	10000726 	beq	r2,zero,102b0e4 <__fpclassifyd+0x2c>
 102b0c8:	00fffc34 	movhi	r3,65520
 102b0cc:	019ff834 	movhi	r6,32736
 102b0d0:	28c7883a 	add	r3,r5,r3
 102b0d4:	31bfffc4 	addi	r6,r6,-1
 102b0d8:	30c00536 	bltu	r6,r3,102b0f0 <__fpclassifyd+0x38>
 102b0dc:	00800104 	movi	r2,4
 102b0e0:	f800283a 	ret
 102b0e4:	2000021e 	bne	r4,zero,102b0f0 <__fpclassifyd+0x38>
 102b0e8:	00800084 	movi	r2,2
 102b0ec:	f800283a 	ret
 102b0f0:	00dffc34 	movhi	r3,32752
 102b0f4:	019ff834 	movhi	r6,32736
 102b0f8:	28cb883a 	add	r5,r5,r3
 102b0fc:	31bfffc4 	addi	r6,r6,-1
 102b100:	317ff62e 	bgeu	r6,r5,102b0dc <_gp+0xfffecdf8>
 102b104:	01400434 	movhi	r5,16
 102b108:	297fffc4 	addi	r5,r5,-1
 102b10c:	28800236 	bltu	r5,r2,102b118 <__fpclassifyd+0x60>
 102b110:	008000c4 	movi	r2,3
 102b114:	f800283a 	ret
 102b118:	10c00226 	beq	r2,r3,102b124 <__fpclassifyd+0x6c>
 102b11c:	0005883a 	mov	r2,zero
 102b120:	f800283a 	ret
 102b124:	2005003a 	cmpeq	r2,r4,zero
 102b128:	f800283a 	ret

0102b12c <_sbrk_r>:
 102b12c:	defffd04 	addi	sp,sp,-12
 102b130:	dc000015 	stw	r16,0(sp)
 102b134:	040040f4 	movhi	r16,259
 102b138:	dc400115 	stw	r17,4(sp)
 102b13c:	841f8a04 	addi	r16,r16,32296
 102b140:	2023883a 	mov	r17,r4
 102b144:	2809883a 	mov	r4,r5
 102b148:	dfc00215 	stw	ra,8(sp)
 102b14c:	80000015 	stw	zero,0(r16)
 102b150:	1031c580 	call	1031c58 <sbrk>
 102b154:	00ffffc4 	movi	r3,-1
 102b158:	10c00526 	beq	r2,r3,102b170 <_sbrk_r+0x44>
 102b15c:	dfc00217 	ldw	ra,8(sp)
 102b160:	dc400117 	ldw	r17,4(sp)
 102b164:	dc000017 	ldw	r16,0(sp)
 102b168:	dec00304 	addi	sp,sp,12
 102b16c:	f800283a 	ret
 102b170:	80c00017 	ldw	r3,0(r16)
 102b174:	183ff926 	beq	r3,zero,102b15c <_gp+0xfffece78>
 102b178:	88c00015 	stw	r3,0(r17)
 102b17c:	003ff706 	br	102b15c <_gp+0xfffece78>

0102b180 <__sread>:
 102b180:	defffe04 	addi	sp,sp,-8
 102b184:	dc000015 	stw	r16,0(sp)
 102b188:	2821883a 	mov	r16,r5
 102b18c:	2940038f 	ldh	r5,14(r5)
 102b190:	dfc00115 	stw	ra,4(sp)
 102b194:	102df900 	call	102df90 <_read_r>
 102b198:	10000716 	blt	r2,zero,102b1b8 <__sread+0x38>
 102b19c:	80c01417 	ldw	r3,80(r16)
 102b1a0:	1887883a 	add	r3,r3,r2
 102b1a4:	80c01415 	stw	r3,80(r16)
 102b1a8:	dfc00117 	ldw	ra,4(sp)
 102b1ac:	dc000017 	ldw	r16,0(sp)
 102b1b0:	dec00204 	addi	sp,sp,8
 102b1b4:	f800283a 	ret
 102b1b8:	80c0030b 	ldhu	r3,12(r16)
 102b1bc:	18fbffcc 	andi	r3,r3,61439
 102b1c0:	80c0030d 	sth	r3,12(r16)
 102b1c4:	dfc00117 	ldw	ra,4(sp)
 102b1c8:	dc000017 	ldw	r16,0(sp)
 102b1cc:	dec00204 	addi	sp,sp,8
 102b1d0:	f800283a 	ret

0102b1d4 <__seofread>:
 102b1d4:	0005883a 	mov	r2,zero
 102b1d8:	f800283a 	ret

0102b1dc <__swrite>:
 102b1dc:	2880030b 	ldhu	r2,12(r5)
 102b1e0:	defffb04 	addi	sp,sp,-20
 102b1e4:	dcc00315 	stw	r19,12(sp)
 102b1e8:	dc800215 	stw	r18,8(sp)
 102b1ec:	dc400115 	stw	r17,4(sp)
 102b1f0:	dc000015 	stw	r16,0(sp)
 102b1f4:	dfc00415 	stw	ra,16(sp)
 102b1f8:	10c0400c 	andi	r3,r2,256
 102b1fc:	2821883a 	mov	r16,r5
 102b200:	2027883a 	mov	r19,r4
 102b204:	3025883a 	mov	r18,r6
 102b208:	3823883a 	mov	r17,r7
 102b20c:	18000526 	beq	r3,zero,102b224 <__swrite+0x48>
 102b210:	2940038f 	ldh	r5,14(r5)
 102b214:	000d883a 	mov	r6,zero
 102b218:	01c00084 	movi	r7,2
 102b21c:	102df340 	call	102df34 <_lseek_r>
 102b220:	8080030b 	ldhu	r2,12(r16)
 102b224:	8140038f 	ldh	r5,14(r16)
 102b228:	10bbffcc 	andi	r2,r2,61439
 102b22c:	9809883a 	mov	r4,r19
 102b230:	900d883a 	mov	r6,r18
 102b234:	880f883a 	mov	r7,r17
 102b238:	8080030d 	sth	r2,12(r16)
 102b23c:	dfc00417 	ldw	ra,16(sp)
 102b240:	dcc00317 	ldw	r19,12(sp)
 102b244:	dc800217 	ldw	r18,8(sp)
 102b248:	dc400117 	ldw	r17,4(sp)
 102b24c:	dc000017 	ldw	r16,0(sp)
 102b250:	dec00504 	addi	sp,sp,20
 102b254:	102da241 	jmpi	102da24 <_write_r>

0102b258 <__sseek>:
 102b258:	defffe04 	addi	sp,sp,-8
 102b25c:	dc000015 	stw	r16,0(sp)
 102b260:	2821883a 	mov	r16,r5
 102b264:	2940038f 	ldh	r5,14(r5)
 102b268:	dfc00115 	stw	ra,4(sp)
 102b26c:	102df340 	call	102df34 <_lseek_r>
 102b270:	00ffffc4 	movi	r3,-1
 102b274:	10c00826 	beq	r2,r3,102b298 <__sseek+0x40>
 102b278:	80c0030b 	ldhu	r3,12(r16)
 102b27c:	80801415 	stw	r2,80(r16)
 102b280:	18c40014 	ori	r3,r3,4096
 102b284:	80c0030d 	sth	r3,12(r16)
 102b288:	dfc00117 	ldw	ra,4(sp)
 102b28c:	dc000017 	ldw	r16,0(sp)
 102b290:	dec00204 	addi	sp,sp,8
 102b294:	f800283a 	ret
 102b298:	80c0030b 	ldhu	r3,12(r16)
 102b29c:	18fbffcc 	andi	r3,r3,61439
 102b2a0:	80c0030d 	sth	r3,12(r16)
 102b2a4:	dfc00117 	ldw	ra,4(sp)
 102b2a8:	dc000017 	ldw	r16,0(sp)
 102b2ac:	dec00204 	addi	sp,sp,8
 102b2b0:	f800283a 	ret

0102b2b4 <__sclose>:
 102b2b4:	2940038f 	ldh	r5,14(r5)
 102b2b8:	102da801 	jmpi	102da80 <_close_r>

0102b2bc <strcmp>:
 102b2bc:	2144b03a 	or	r2,r4,r5
 102b2c0:	108000cc 	andi	r2,r2,3
 102b2c4:	1000171e 	bne	r2,zero,102b324 <strcmp+0x68>
 102b2c8:	20800017 	ldw	r2,0(r4)
 102b2cc:	28c00017 	ldw	r3,0(r5)
 102b2d0:	10c0141e 	bne	r2,r3,102b324 <strcmp+0x68>
 102b2d4:	027fbff4 	movhi	r9,65279
 102b2d8:	4a7fbfc4 	addi	r9,r9,-257
 102b2dc:	0086303a 	nor	r3,zero,r2
 102b2e0:	02202074 	movhi	r8,32897
 102b2e4:	1245883a 	add	r2,r2,r9
 102b2e8:	42202004 	addi	r8,r8,-32640
 102b2ec:	10c4703a 	and	r2,r2,r3
 102b2f0:	1204703a 	and	r2,r2,r8
 102b2f4:	10000226 	beq	r2,zero,102b300 <strcmp+0x44>
 102b2f8:	00001706 	br	102b358 <strcmp+0x9c>
 102b2fc:	1000161e 	bne	r2,zero,102b358 <strcmp+0x9c>
 102b300:	21000104 	addi	r4,r4,4
 102b304:	20c00017 	ldw	r3,0(r4)
 102b308:	29400104 	addi	r5,r5,4
 102b30c:	29800017 	ldw	r6,0(r5)
 102b310:	1a4f883a 	add	r7,r3,r9
 102b314:	00c4303a 	nor	r2,zero,r3
 102b318:	3884703a 	and	r2,r7,r2
 102b31c:	1204703a 	and	r2,r2,r8
 102b320:	19bff626 	beq	r3,r6,102b2fc <_gp+0xfffed018>
 102b324:	20800007 	ldb	r2,0(r4)
 102b328:	1000051e 	bne	r2,zero,102b340 <strcmp+0x84>
 102b32c:	00000606 	br	102b348 <strcmp+0x8c>
 102b330:	21000044 	addi	r4,r4,1
 102b334:	20800007 	ldb	r2,0(r4)
 102b338:	29400044 	addi	r5,r5,1
 102b33c:	10000226 	beq	r2,zero,102b348 <strcmp+0x8c>
 102b340:	28c00007 	ldb	r3,0(r5)
 102b344:	10fffa26 	beq	r2,r3,102b330 <_gp+0xfffed04c>
 102b348:	20800003 	ldbu	r2,0(r4)
 102b34c:	28c00003 	ldbu	r3,0(r5)
 102b350:	10c5c83a 	sub	r2,r2,r3
 102b354:	f800283a 	ret
 102b358:	0005883a 	mov	r2,zero
 102b35c:	f800283a 	ret

0102b360 <__ssprint_r>:
 102b360:	30800217 	ldw	r2,8(r6)
 102b364:	defff604 	addi	sp,sp,-40
 102b368:	ddc00715 	stw	r23,28(sp)
 102b36c:	dcc00315 	stw	r19,12(sp)
 102b370:	dfc00915 	stw	ra,36(sp)
 102b374:	df000815 	stw	fp,32(sp)
 102b378:	dd800615 	stw	r22,24(sp)
 102b37c:	dd400515 	stw	r21,20(sp)
 102b380:	dd000415 	stw	r20,16(sp)
 102b384:	dc800215 	stw	r18,8(sp)
 102b388:	dc400115 	stw	r17,4(sp)
 102b38c:	dc000015 	stw	r16,0(sp)
 102b390:	3027883a 	mov	r19,r6
 102b394:	35c00017 	ldw	r23,0(r6)
 102b398:	10005526 	beq	r2,zero,102b4f0 <__ssprint_r+0x190>
 102b39c:	2029883a 	mov	r20,r4
 102b3a0:	29000017 	ldw	r4,0(r5)
 102b3a4:	2821883a 	mov	r16,r5
 102b3a8:	0039883a 	mov	fp,zero
 102b3ac:	0023883a 	mov	r17,zero
 102b3b0:	88003926 	beq	r17,zero,102b498 <__ssprint_r+0x138>
 102b3b4:	84800217 	ldw	r18,8(r16)
 102b3b8:	902d883a 	mov	r22,r18
 102b3bc:	8c803a36 	bltu	r17,r18,102b4a8 <__ssprint_r+0x148>
 102b3c0:	80c0030b 	ldhu	r3,12(r16)
 102b3c4:	1881200c 	andi	r2,r3,1152
 102b3c8:	10002626 	beq	r2,zero,102b464 <__ssprint_r+0x104>
 102b3cc:	80800517 	ldw	r2,20(r16)
 102b3d0:	81400417 	ldw	r5,16(r16)
 102b3d4:	89c00044 	addi	r7,r17,1
 102b3d8:	108d883a 	add	r6,r2,r2
 102b3dc:	3085883a 	add	r2,r6,r2
 102b3e0:	100cd7fa 	srli	r6,r2,31
 102b3e4:	216dc83a 	sub	r22,r4,r5
 102b3e8:	3d89883a 	add	r4,r7,r22
 102b3ec:	3085883a 	add	r2,r6,r2
 102b3f0:	1025d07a 	srai	r18,r2,1
 102b3f4:	900d883a 	mov	r6,r18
 102b3f8:	9100022e 	bgeu	r18,r4,102b404 <__ssprint_r+0xa4>
 102b3fc:	2025883a 	mov	r18,r4
 102b400:	200d883a 	mov	r6,r4
 102b404:	18c1000c 	andi	r3,r3,1024
 102b408:	a009883a 	mov	r4,r20
 102b40c:	18002926 	beq	r3,zero,102b4b4 <__ssprint_r+0x154>
 102b410:	300b883a 	mov	r5,r6
 102b414:	1028f440 	call	1028f44 <_malloc_r>
 102b418:	102b883a 	mov	r21,r2
 102b41c:	10002b26 	beq	r2,zero,102b4cc <__ssprint_r+0x16c>
 102b420:	81400417 	ldw	r5,16(r16)
 102b424:	1009883a 	mov	r4,r2
 102b428:	b00d883a 	mov	r6,r22
 102b42c:	10297d40 	call	10297d4 <memcpy>
 102b430:	8080030b 	ldhu	r2,12(r16)
 102b434:	00fedfc4 	movi	r3,-1153
 102b438:	10c4703a 	and	r2,r2,r3
 102b43c:	10802014 	ori	r2,r2,128
 102b440:	8080030d 	sth	r2,12(r16)
 102b444:	ad89883a 	add	r4,r21,r22
 102b448:	95adc83a 	sub	r22,r18,r22
 102b44c:	84800515 	stw	r18,20(r16)
 102b450:	85800215 	stw	r22,8(r16)
 102b454:	85400415 	stw	r21,16(r16)
 102b458:	81000015 	stw	r4,0(r16)
 102b45c:	8825883a 	mov	r18,r17
 102b460:	882d883a 	mov	r22,r17
 102b464:	e00b883a 	mov	r5,fp
 102b468:	b00d883a 	mov	r6,r22
 102b46c:	102990c0 	call	102990c <memmove>
 102b470:	80c00217 	ldw	r3,8(r16)
 102b474:	81000017 	ldw	r4,0(r16)
 102b478:	98800217 	ldw	r2,8(r19)
 102b47c:	1ca5c83a 	sub	r18,r3,r18
 102b480:	2589883a 	add	r4,r4,r22
 102b484:	84800215 	stw	r18,8(r16)
 102b488:	81000015 	stw	r4,0(r16)
 102b48c:	1463c83a 	sub	r17,r2,r17
 102b490:	9c400215 	stw	r17,8(r19)
 102b494:	88001626 	beq	r17,zero,102b4f0 <__ssprint_r+0x190>
 102b498:	bf000017 	ldw	fp,0(r23)
 102b49c:	bc400117 	ldw	r17,4(r23)
 102b4a0:	bdc00204 	addi	r23,r23,8
 102b4a4:	003fc206 	br	102b3b0 <_gp+0xfffed0cc>
 102b4a8:	8825883a 	mov	r18,r17
 102b4ac:	882d883a 	mov	r22,r17
 102b4b0:	003fec06 	br	102b464 <_gp+0xfffed180>
 102b4b4:	102ab180 	call	102ab18 <_realloc_r>
 102b4b8:	102b883a 	mov	r21,r2
 102b4bc:	103fe11e 	bne	r2,zero,102b444 <_gp+0xfffed160>
 102b4c0:	81400417 	ldw	r5,16(r16)
 102b4c4:	a009883a 	mov	r4,r20
 102b4c8:	10283a80 	call	10283a8 <_free_r>
 102b4cc:	80c0030b 	ldhu	r3,12(r16)
 102b4d0:	00800304 	movi	r2,12
 102b4d4:	a0800015 	stw	r2,0(r20)
 102b4d8:	18c01014 	ori	r3,r3,64
 102b4dc:	80c0030d 	sth	r3,12(r16)
 102b4e0:	00bfffc4 	movi	r2,-1
 102b4e4:	98000215 	stw	zero,8(r19)
 102b4e8:	98000115 	stw	zero,4(r19)
 102b4ec:	00000206 	br	102b4f8 <__ssprint_r+0x198>
 102b4f0:	98000115 	stw	zero,4(r19)
 102b4f4:	0005883a 	mov	r2,zero
 102b4f8:	dfc00917 	ldw	ra,36(sp)
 102b4fc:	df000817 	ldw	fp,32(sp)
 102b500:	ddc00717 	ldw	r23,28(sp)
 102b504:	dd800617 	ldw	r22,24(sp)
 102b508:	dd400517 	ldw	r21,20(sp)
 102b50c:	dd000417 	ldw	r20,16(sp)
 102b510:	dcc00317 	ldw	r19,12(sp)
 102b514:	dc800217 	ldw	r18,8(sp)
 102b518:	dc400117 	ldw	r17,4(sp)
 102b51c:	dc000017 	ldw	r16,0(sp)
 102b520:	dec00a04 	addi	sp,sp,40
 102b524:	f800283a 	ret

0102b528 <___svfiprintf_internal_r>:
 102b528:	2880030b 	ldhu	r2,12(r5)
 102b52c:	deffc904 	addi	sp,sp,-220
 102b530:	dd403215 	stw	r21,200(sp)
 102b534:	dfc03615 	stw	ra,216(sp)
 102b538:	df003515 	stw	fp,212(sp)
 102b53c:	ddc03415 	stw	r23,208(sp)
 102b540:	dd803315 	stw	r22,204(sp)
 102b544:	dd003115 	stw	r20,196(sp)
 102b548:	dcc03015 	stw	r19,192(sp)
 102b54c:	dc802f15 	stw	r18,188(sp)
 102b550:	dc402e15 	stw	r17,184(sp)
 102b554:	dc002d15 	stw	r16,180(sp)
 102b558:	d9402715 	stw	r5,156(sp)
 102b55c:	d9002915 	stw	r4,164(sp)
 102b560:	1080200c 	andi	r2,r2,128
 102b564:	d9c02315 	stw	r7,140(sp)
 102b568:	302b883a 	mov	r21,r6
 102b56c:	10000226 	beq	r2,zero,102b578 <___svfiprintf_internal_r+0x50>
 102b570:	28800417 	ldw	r2,16(r5)
 102b574:	1003ce26 	beq	r2,zero,102c4b0 <___svfiprintf_internal_r+0xf88>
 102b578:	dac01a04 	addi	r11,sp,104
 102b57c:	da8019c4 	addi	r10,sp,103
 102b580:	dc802917 	ldw	r18,164(sp)
 102b584:	dd002717 	ldw	r20,156(sp)
 102b588:	04c040f4 	movhi	r19,259
 102b58c:	dac01e15 	stw	r11,120(sp)
 102b590:	5a97c83a 	sub	r11,r11,r10
 102b594:	9cd1b304 	addi	r19,r19,18124
 102b598:	da801f15 	stw	r10,124(sp)
 102b59c:	dec01a15 	stw	sp,104(sp)
 102b5a0:	d8001c15 	stw	zero,112(sp)
 102b5a4:	d8001b15 	stw	zero,108(sp)
 102b5a8:	d8002a15 	stw	zero,168(sp)
 102b5ac:	d8002415 	stw	zero,144(sp)
 102b5b0:	d811883a 	mov	r8,sp
 102b5b4:	dac02b15 	stw	r11,172(sp)
 102b5b8:	a8800007 	ldb	r2,0(r21)
 102b5bc:	10026826 	beq	r2,zero,102bf60 <___svfiprintf_internal_r+0xa38>
 102b5c0:	01000944 	movi	r4,37
 102b5c4:	11026626 	beq	r2,r4,102bf60 <___svfiprintf_internal_r+0xa38>
 102b5c8:	a805883a 	mov	r2,r21
 102b5cc:	00000106 	br	102b5d4 <___svfiprintf_internal_r+0xac>
 102b5d0:	19000326 	beq	r3,r4,102b5e0 <___svfiprintf_internal_r+0xb8>
 102b5d4:	10800044 	addi	r2,r2,1
 102b5d8:	10c00007 	ldb	r3,0(r2)
 102b5dc:	183ffc1e 	bne	r3,zero,102b5d0 <_gp+0xfffed2ec>
 102b5e0:	1561c83a 	sub	r16,r2,r21
 102b5e4:	102d883a 	mov	r22,r2
 102b5e8:	80000e26 	beq	r16,zero,102b624 <___svfiprintf_internal_r+0xfc>
 102b5ec:	d8c01c17 	ldw	r3,112(sp)
 102b5f0:	d8801b17 	ldw	r2,108(sp)
 102b5f4:	45400015 	stw	r21,0(r8)
 102b5f8:	1c07883a 	add	r3,r3,r16
 102b5fc:	10800044 	addi	r2,r2,1
 102b600:	d8c01c15 	stw	r3,112(sp)
 102b604:	44000115 	stw	r16,4(r8)
 102b608:	d8801b15 	stw	r2,108(sp)
 102b60c:	00c001c4 	movi	r3,7
 102b610:	1882d616 	blt	r3,r2,102c16c <___svfiprintf_internal_r+0xc44>
 102b614:	42000204 	addi	r8,r8,8
 102b618:	da802417 	ldw	r10,144(sp)
 102b61c:	5415883a 	add	r10,r10,r16
 102b620:	da802415 	stw	r10,144(sp)
 102b624:	b0800007 	ldb	r2,0(r22)
 102b628:	10027326 	beq	r2,zero,102bff8 <___svfiprintf_internal_r+0xad0>
 102b62c:	b1000047 	ldb	r4,1(r22)
 102b630:	b5400044 	addi	r21,r22,1
 102b634:	d8001d85 	stb	zero,118(sp)
 102b638:	000d883a 	mov	r6,zero
 102b63c:	043fffc4 	movi	r16,-1
 102b640:	d8002115 	stw	zero,132(sp)
 102b644:	0023883a 	mov	r17,zero
 102b648:	00c01604 	movi	r3,88
 102b64c:	01400244 	movi	r5,9
 102b650:	02400a84 	movi	r9,42
 102b654:	01c01b04 	movi	r7,108
 102b658:	ad400044 	addi	r21,r21,1
 102b65c:	20bff804 	addi	r2,r4,-32
 102b660:	18819536 	bltu	r3,r2,102bcb8 <___svfiprintf_internal_r+0x790>
 102b664:	100490ba 	slli	r2,r2,2
 102b668:	02c040f4 	movhi	r11,259
 102b66c:	5aed9f04 	addi	r11,r11,-18820
 102b670:	12c5883a 	add	r2,r2,r11
 102b674:	10800017 	ldw	r2,0(r2)
 102b678:	1000683a 	jmp	r2
 102b67c:	0102bbb8 	rdprs	r4,zero,2798
 102b680:	0102bcb8 	rdprs	r4,zero,2802
 102b684:	0102bcb8 	rdprs	r4,zero,2802
 102b688:	0102bbac 	andhi	r4,zero,2798
 102b68c:	0102bcb8 	rdprs	r4,zero,2802
 102b690:	0102bcb8 	rdprs	r4,zero,2802
 102b694:	0102bcb8 	rdprs	r4,zero,2802
 102b698:	0102bcb8 	rdprs	r4,zero,2802
 102b69c:	0102bcb8 	rdprs	r4,zero,2802
 102b6a0:	0102bcb8 	rdprs	r4,zero,2802
 102b6a4:	0102b8dc 	xori	r4,zero,2787
 102b6a8:	0102bcec 	andhi	r4,zero,2803
 102b6ac:	0102bcb8 	rdprs	r4,zero,2802
 102b6b0:	0102b904 	movi	r4,2788
 102b6b4:	0102bcf8 	rdprs	r4,zero,2803
 102b6b8:	0102bcb8 	rdprs	r4,zero,2802
 102b6bc:	0102bce0 	cmpeqi	r4,zero,2803
 102b6c0:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6c4:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6c8:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6cc:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6d0:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6d4:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6d8:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6dc:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6e0:	0102bc80 	call	102bc8 <__alt_mem_onchip_memory2-0xf1d438>
 102b6e4:	0102bcb8 	rdprs	r4,zero,2802
 102b6e8:	0102bcb8 	rdprs	r4,zero,2802
 102b6ec:	0102bcb8 	rdprs	r4,zero,2802
 102b6f0:	0102bcb8 	rdprs	r4,zero,2802
 102b6f4:	0102bcb8 	rdprs	r4,zero,2802
 102b6f8:	0102bcb8 	rdprs	r4,zero,2802
 102b6fc:	0102bcb8 	rdprs	r4,zero,2802
 102b700:	0102bcb8 	rdprs	r4,zero,2802
 102b704:	0102bcb8 	rdprs	r4,zero,2802
 102b708:	0102bcb8 	rdprs	r4,zero,2802
 102b70c:	0102bc18 	cmpnei	r4,zero,2800
 102b710:	0102bcb8 	rdprs	r4,zero,2802
 102b714:	0102bcb8 	rdprs	r4,zero,2802
 102b718:	0102bcb8 	rdprs	r4,zero,2802
 102b71c:	0102bcb8 	rdprs	r4,zero,2802
 102b720:	0102bcb8 	rdprs	r4,zero,2802
 102b724:	0102bcb8 	rdprs	r4,zero,2802
 102b728:	0102bcb8 	rdprs	r4,zero,2802
 102b72c:	0102bcb8 	rdprs	r4,zero,2802
 102b730:	0102bcb8 	rdprs	r4,zero,2802
 102b734:	0102bcb8 	rdprs	r4,zero,2802
 102b738:	0102b8ac 	andhi	r4,zero,2786
 102b73c:	0102bcb8 	rdprs	r4,zero,2802
 102b740:	0102bcb8 	rdprs	r4,zero,2802
 102b744:	0102bcb8 	rdprs	r4,zero,2802
 102b748:	0102bcb8 	rdprs	r4,zero,2802
 102b74c:	0102bcb8 	rdprs	r4,zero,2802
 102b750:	0102b7e0 	cmpeqi	r4,zero,2783
 102b754:	0102bcb8 	rdprs	r4,zero,2802
 102b758:	0102bcb8 	rdprs	r4,zero,2802
 102b75c:	0102bb0c 	andi	r4,zero,2796
 102b760:	0102bcb8 	rdprs	r4,zero,2802
 102b764:	0102bcb8 	rdprs	r4,zero,2802
 102b768:	0102bcb8 	rdprs	r4,zero,2802
 102b76c:	0102bcb8 	rdprs	r4,zero,2802
 102b770:	0102bcb8 	rdprs	r4,zero,2802
 102b774:	0102bcb8 	rdprs	r4,zero,2802
 102b778:	0102bcb8 	rdprs	r4,zero,2802
 102b77c:	0102bcb8 	rdprs	r4,zero,2802
 102b780:	0102bcb8 	rdprs	r4,zero,2802
 102b784:	0102bcb8 	rdprs	r4,zero,2802
 102b788:	0102b9f8 	rdprs	r4,zero,2791
 102b78c:	0102b9b8 	rdprs	r4,zero,2790
 102b790:	0102bcb8 	rdprs	r4,zero,2802
 102b794:	0102bcb8 	rdprs	r4,zero,2802
 102b798:	0102bcb8 	rdprs	r4,zero,2802
 102b79c:	0102bb68 	cmpgeui	r4,zero,2797
 102b7a0:	0102b9b8 	rdprs	r4,zero,2790
 102b7a4:	0102bcb8 	rdprs	r4,zero,2802
 102b7a8:	0102bcb8 	rdprs	r4,zero,2802
 102b7ac:	0102bb54 	movui	r4,2797
 102b7b0:	0102bcb8 	rdprs	r4,zero,2802
 102b7b4:	0102bb74 	movhi	r4,2797
 102b7b8:	0102b8b0 	cmpltui	r4,zero,2786
 102b7bc:	0102b978 	rdprs	r4,zero,2789
 102b7c0:	0102b96c 	andhi	r4,zero,2789
 102b7c4:	0102bcb8 	rdprs	r4,zero,2802
 102b7c8:	0102b910 	cmplti	r4,zero,2788
 102b7cc:	0102bcb8 	rdprs	r4,zero,2802
 102b7d0:	0102b7e4 	muli	r4,zero,2783
 102b7d4:	0102bcb8 	rdprs	r4,zero,2802
 102b7d8:	0102bcb8 	rdprs	r4,zero,2802
 102b7dc:	0102bbd4 	movui	r4,2799
 102b7e0:	8c400414 	ori	r17,r17,16
 102b7e4:	88c0080c 	andi	r3,r17,32
 102b7e8:	d8802317 	ldw	r2,140(sp)
 102b7ec:	18029626 	beq	r3,zero,102c248 <___svfiprintf_internal_r+0xd20>
 102b7f0:	dac02317 	ldw	r11,140(sp)
 102b7f4:	12400017 	ldw	r9,0(r2)
 102b7f8:	12800117 	ldw	r10,4(r2)
 102b7fc:	5ac00204 	addi	r11,r11,8
 102b800:	dac02315 	stw	r11,140(sp)
 102b804:	00800044 	movi	r2,1
 102b808:	4a86b03a 	or	r3,r9,r10
 102b80c:	d8001d85 	stb	zero,118(sp)
 102b810:	8039883a 	mov	fp,r16
 102b814:	0017883a 	mov	r11,zero
 102b818:	80000216 	blt	r16,zero,102b824 <___svfiprintf_internal_r+0x2fc>
 102b81c:	013fdfc4 	movi	r4,-129
 102b820:	8922703a 	and	r17,r17,r4
 102b824:	1801d01e 	bne	r3,zero,102bf68 <___svfiprintf_internal_r+0xa40>
 102b828:	80024426 	beq	r16,zero,102c13c <___svfiprintf_internal_r+0xc14>
 102b82c:	10803fcc 	andi	r2,r2,255
 102b830:	00c00044 	movi	r3,1
 102b834:	10c2b326 	beq	r2,r3,102c304 <___svfiprintf_internal_r+0xddc>
 102b838:	00c00084 	movi	r3,2
 102b83c:	10c25b26 	beq	r2,r3,102c1ac <___svfiprintf_internal_r+0xc84>
 102b840:	d8c01a04 	addi	r3,sp,104
 102b844:	4808d0fa 	srli	r4,r9,3
 102b848:	500a977a 	slli	r5,r10,29
 102b84c:	5014d0fa 	srli	r10,r10,3
 102b850:	4a4001cc 	andi	r9,r9,7
 102b854:	48800c04 	addi	r2,r9,48
 102b858:	18ffffc4 	addi	r3,r3,-1
 102b85c:	2912b03a 	or	r9,r5,r4
 102b860:	18800005 	stb	r2,0(r3)
 102b864:	4a88b03a 	or	r4,r9,r10
 102b868:	203ff61e 	bne	r4,zero,102b844 <_gp+0xfffed560>
 102b86c:	8900004c 	andi	r4,r17,1
 102b870:	d8c02615 	stw	r3,152(sp)
 102b874:	2002951e 	bne	r4,zero,102c2cc <___svfiprintf_internal_r+0xda4>
 102b878:	da801e17 	ldw	r10,120(sp)
 102b87c:	50f9c83a 	sub	fp,r10,r3
 102b880:	df002015 	stw	fp,128(sp)
 102b884:	e400010e 	bge	fp,r16,102b88c <___svfiprintf_internal_r+0x364>
 102b888:	dc002015 	stw	r16,128(sp)
 102b88c:	5ac03fcc 	andi	r11,r11,255
 102b890:	5ac0201c 	xori	r11,r11,128
 102b894:	5affe004 	addi	r11,r11,-128
 102b898:	58006326 	beq	r11,zero,102ba28 <___svfiprintf_internal_r+0x500>
 102b89c:	d8c02017 	ldw	r3,128(sp)
 102b8a0:	18c00044 	addi	r3,r3,1
 102b8a4:	d8c02015 	stw	r3,128(sp)
 102b8a8:	00005f06 	br	102ba28 <___svfiprintf_internal_r+0x500>
 102b8ac:	8c400414 	ori	r17,r17,16
 102b8b0:	88c0080c 	andi	r3,r17,32
 102b8b4:	d8802317 	ldw	r2,140(sp)
 102b8b8:	18027826 	beq	r3,zero,102c29c <___svfiprintf_internal_r+0xd74>
 102b8bc:	dac02317 	ldw	r11,140(sp)
 102b8c0:	12400017 	ldw	r9,0(r2)
 102b8c4:	12800117 	ldw	r10,4(r2)
 102b8c8:	5ac00204 	addi	r11,r11,8
 102b8cc:	dac02315 	stw	r11,140(sp)
 102b8d0:	0005883a 	mov	r2,zero
 102b8d4:	4a86b03a 	or	r3,r9,r10
 102b8d8:	003fcc06 	br	102b80c <_gp+0xfffed528>
 102b8dc:	da802317 	ldw	r10,140(sp)
 102b8e0:	dac02317 	ldw	r11,140(sp)
 102b8e4:	52800017 	ldw	r10,0(r10)
 102b8e8:	58800104 	addi	r2,r11,4
 102b8ec:	da802115 	stw	r10,132(sp)
 102b8f0:	50028a0e 	bge	r10,zero,102c31c <___svfiprintf_internal_r+0xdf4>
 102b8f4:	da802117 	ldw	r10,132(sp)
 102b8f8:	d8802315 	stw	r2,140(sp)
 102b8fc:	0295c83a 	sub	r10,zero,r10
 102b900:	da802115 	stw	r10,132(sp)
 102b904:	8c400114 	ori	r17,r17,4
 102b908:	a9000007 	ldb	r4,0(r21)
 102b90c:	003f5206 	br	102b658 <_gp+0xfffed374>
 102b910:	da802317 	ldw	r10,140(sp)
 102b914:	dac02317 	ldw	r11,140(sp)
 102b918:	d8001d85 	stb	zero,118(sp)
 102b91c:	52800017 	ldw	r10,0(r10)
 102b920:	5dc00104 	addi	r23,r11,4
 102b924:	da802615 	stw	r10,152(sp)
 102b928:	5002eb26 	beq	r10,zero,102c4d8 <___svfiprintf_internal_r+0xfb0>
 102b92c:	d9002617 	ldw	r4,152(sp)
 102b930:	8002d716 	blt	r16,zero,102c490 <___svfiprintf_internal_r+0xf68>
 102b934:	000b883a 	mov	r5,zero
 102b938:	800d883a 	mov	r6,r16
 102b93c:	da002c15 	stw	r8,176(sp)
 102b940:	10296ec0 	call	10296ec <memchr>
 102b944:	da002c17 	ldw	r8,176(sp)
 102b948:	1002fb26 	beq	r2,zero,102c538 <___svfiprintf_internal_r+0x1010>
 102b94c:	d8c02617 	ldw	r3,152(sp)
 102b950:	10f9c83a 	sub	fp,r2,r3
 102b954:	8700010e 	bge	r16,fp,102b95c <___svfiprintf_internal_r+0x434>
 102b958:	8039883a 	mov	fp,r16
 102b95c:	dac01d83 	ldbu	r11,118(sp)
 102b960:	ddc02315 	stw	r23,140(sp)
 102b964:	0021883a 	mov	r16,zero
 102b968:	003fc506 	br	102b880 <_gp+0xfffed59c>
 102b96c:	8c400814 	ori	r17,r17,32
 102b970:	a9000007 	ldb	r4,0(r21)
 102b974:	003f3806 	br	102b658 <_gp+0xfffed374>
 102b978:	dac02317 	ldw	r11,140(sp)
 102b97c:	00800c04 	movi	r2,48
 102b980:	d8801d05 	stb	r2,116(sp)
 102b984:	5a400017 	ldw	r9,0(r11)
 102b988:	00801e04 	movi	r2,120
 102b98c:	d8801d45 	stb	r2,117(sp)
 102b990:	008040f4 	movhi	r2,259
 102b994:	10914a04 	addi	r2,r2,17704
 102b998:	5ac00104 	addi	r11,r11,4
 102b99c:	d8802a15 	stw	r2,168(sp)
 102b9a0:	0015883a 	mov	r10,zero
 102b9a4:	8c400094 	ori	r17,r17,2
 102b9a8:	dac02315 	stw	r11,140(sp)
 102b9ac:	00800084 	movi	r2,2
 102b9b0:	4807883a 	mov	r3,r9
 102b9b4:	003f9506 	br	102b80c <_gp+0xfffed528>
 102b9b8:	d9801d85 	stb	r6,118(sp)
 102b9bc:	8880080c 	andi	r2,r17,32
 102b9c0:	d8c02317 	ldw	r3,140(sp)
 102b9c4:	10009926 	beq	r2,zero,102bc2c <___svfiprintf_internal_r+0x704>
 102b9c8:	dac02317 	ldw	r11,140(sp)
 102b9cc:	18800117 	ldw	r2,4(r3)
 102b9d0:	1a400017 	ldw	r9,0(r3)
 102b9d4:	5ac00204 	addi	r11,r11,8
 102b9d8:	dac02315 	stw	r11,140(sp)
 102b9dc:	1015883a 	mov	r10,r2
 102b9e0:	10009d16 	blt	r2,zero,102bc58 <___svfiprintf_internal_r+0x730>
 102b9e4:	dac01d83 	ldbu	r11,118(sp)
 102b9e8:	8039883a 	mov	fp,r16
 102b9ec:	00800044 	movi	r2,1
 102b9f0:	4a86b03a 	or	r3,r9,r10
 102b9f4:	003f8806 	br	102b818 <_gp+0xfffed534>
 102b9f8:	dac02317 	ldw	r11,140(sp)
 102b9fc:	00c00044 	movi	r3,1
 102ba00:	da801004 	addi	r10,sp,64
 102ba04:	58800017 	ldw	r2,0(r11)
 102ba08:	5ac00104 	addi	r11,r11,4
 102ba0c:	d8c02015 	stw	r3,128(sp)
 102ba10:	d8001d85 	stb	zero,118(sp)
 102ba14:	d8801005 	stb	r2,64(sp)
 102ba18:	dac02315 	stw	r11,140(sp)
 102ba1c:	1839883a 	mov	fp,r3
 102ba20:	da802615 	stw	r10,152(sp)
 102ba24:	0021883a 	mov	r16,zero
 102ba28:	8a80008c 	andi	r10,r17,2
 102ba2c:	da802215 	stw	r10,136(sp)
 102ba30:	50000326 	beq	r10,zero,102ba40 <___svfiprintf_internal_r+0x518>
 102ba34:	dac02017 	ldw	r11,128(sp)
 102ba38:	5ac00084 	addi	r11,r11,2
 102ba3c:	dac02015 	stw	r11,128(sp)
 102ba40:	88c0210c 	andi	r3,r17,132
 102ba44:	d8c02515 	stw	r3,148(sp)
 102ba48:	1800bb1e 	bne	r3,zero,102bd38 <___svfiprintf_internal_r+0x810>
 102ba4c:	da802117 	ldw	r10,132(sp)
 102ba50:	dac02017 	ldw	r11,128(sp)
 102ba54:	52edc83a 	sub	r22,r10,r11
 102ba58:	0580b70e 	bge	zero,r22,102bd38 <___svfiprintf_internal_r+0x810>
 102ba5c:	02400404 	movi	r9,16
 102ba60:	d8c01c17 	ldw	r3,112(sp)
 102ba64:	d8801b17 	ldw	r2,108(sp)
 102ba68:	4d82a70e 	bge	r9,r22,102c508 <___svfiprintf_internal_r+0xfe0>
 102ba6c:	014040f4 	movhi	r5,259
 102ba70:	2951b704 	addi	r5,r5,18140
 102ba74:	d9402815 	stw	r5,160(sp)
 102ba78:	05c001c4 	movi	r23,7
 102ba7c:	00000306 	br	102ba8c <___svfiprintf_internal_r+0x564>
 102ba80:	b5bffc04 	addi	r22,r22,-16
 102ba84:	42000204 	addi	r8,r8,8
 102ba88:	4d80150e 	bge	r9,r22,102bae0 <___svfiprintf_internal_r+0x5b8>
 102ba8c:	028040f4 	movhi	r10,259
 102ba90:	18c00404 	addi	r3,r3,16
 102ba94:	10800044 	addi	r2,r2,1
 102ba98:	5291b704 	addi	r10,r10,18140
 102ba9c:	42800015 	stw	r10,0(r8)
 102baa0:	42400115 	stw	r9,4(r8)
 102baa4:	d8c01c15 	stw	r3,112(sp)
 102baa8:	d8801b15 	stw	r2,108(sp)
 102baac:	b8bff40e 	bge	r23,r2,102ba80 <_gp+0xfffed79c>
 102bab0:	9009883a 	mov	r4,r18
 102bab4:	a00b883a 	mov	r5,r20
 102bab8:	d9801a04 	addi	r6,sp,104
 102babc:	da402c15 	stw	r9,176(sp)
 102bac0:	102b3600 	call	102b360 <__ssprint_r>
 102bac4:	da402c17 	ldw	r9,176(sp)
 102bac8:	1001511e 	bne	r2,zero,102c010 <___svfiprintf_internal_r+0xae8>
 102bacc:	b5bffc04 	addi	r22,r22,-16
 102bad0:	d8c01c17 	ldw	r3,112(sp)
 102bad4:	d8801b17 	ldw	r2,108(sp)
 102bad8:	d811883a 	mov	r8,sp
 102badc:	4dbfeb16 	blt	r9,r22,102ba8c <_gp+0xfffed7a8>
 102bae0:	dac02817 	ldw	r11,160(sp)
 102bae4:	b0c7883a 	add	r3,r22,r3
 102bae8:	10800044 	addi	r2,r2,1
 102baec:	42c00015 	stw	r11,0(r8)
 102baf0:	45800115 	stw	r22,4(r8)
 102baf4:	d8c01c15 	stw	r3,112(sp)
 102baf8:	d8801b15 	stw	r2,108(sp)
 102bafc:	010001c4 	movi	r4,7
 102bb00:	2081dd16 	blt	r4,r2,102c278 <___svfiprintf_internal_r+0xd50>
 102bb04:	42000204 	addi	r8,r8,8
 102bb08:	00008d06 	br	102bd40 <___svfiprintf_internal_r+0x818>
 102bb0c:	00c040f4 	movhi	r3,259
 102bb10:	18d14504 	addi	r3,r3,17684
 102bb14:	d8c02a15 	stw	r3,168(sp)
 102bb18:	d9801d85 	stb	r6,118(sp)
 102bb1c:	88c0080c 	andi	r3,r17,32
 102bb20:	d8802317 	ldw	r2,140(sp)
 102bb24:	18003226 	beq	r3,zero,102bbf0 <___svfiprintf_internal_r+0x6c8>
 102bb28:	da802317 	ldw	r10,140(sp)
 102bb2c:	12400017 	ldw	r9,0(r2)
 102bb30:	52800204 	addi	r10,r10,8
 102bb34:	da802315 	stw	r10,140(sp)
 102bb38:	12800117 	ldw	r10,4(r2)
 102bb3c:	8880004c 	andi	r2,r17,1
 102bb40:	1001be26 	beq	r2,zero,102c23c <___svfiprintf_internal_r+0xd14>
 102bb44:	4a86b03a 	or	r3,r9,r10
 102bb48:	1802291e 	bne	r3,zero,102c3f0 <___svfiprintf_internal_r+0xec8>
 102bb4c:	00800084 	movi	r2,2
 102bb50:	003f2e06 	br	102b80c <_gp+0xfffed528>
 102bb54:	a9000007 	ldb	r4,0(r21)
 102bb58:	a805883a 	mov	r2,r21
 102bb5c:	21c22a26 	beq	r4,r7,102c408 <___svfiprintf_internal_r+0xee0>
 102bb60:	8c400414 	ori	r17,r17,16
 102bb64:	003ebc06 	br	102b658 <_gp+0xfffed374>
 102bb68:	8c401014 	ori	r17,r17,64
 102bb6c:	a9000007 	ldb	r4,0(r21)
 102bb70:	003eb906 	br	102b658 <_gp+0xfffed374>
 102bb74:	d9801d85 	stb	r6,118(sp)
 102bb78:	8880080c 	andi	r2,r17,32
 102bb7c:	1002131e 	bne	r2,zero,102c3cc <___svfiprintf_internal_r+0xea4>
 102bb80:	8880040c 	andi	r2,r17,16
 102bb84:	1002241e 	bne	r2,zero,102c418 <___svfiprintf_internal_r+0xef0>
 102bb88:	8c40100c 	andi	r17,r17,64
 102bb8c:	88022226 	beq	r17,zero,102c418 <___svfiprintf_internal_r+0xef0>
 102bb90:	dac02317 	ldw	r11,140(sp)
 102bb94:	da802417 	ldw	r10,144(sp)
 102bb98:	58800017 	ldw	r2,0(r11)
 102bb9c:	5ac00104 	addi	r11,r11,4
 102bba0:	dac02315 	stw	r11,140(sp)
 102bba4:	1280000d 	sth	r10,0(r2)
 102bba8:	003e8306 	br	102b5b8 <_gp+0xfffed2d4>
 102bbac:	8c400054 	ori	r17,r17,1
 102bbb0:	a9000007 	ldb	r4,0(r21)
 102bbb4:	003ea806 	br	102b658 <_gp+0xfffed374>
 102bbb8:	30803fcc 	andi	r2,r6,255
 102bbbc:	1080201c 	xori	r2,r2,128
 102bbc0:	10bfe004 	addi	r2,r2,-128
 102bbc4:	1001ff1e 	bne	r2,zero,102c3c4 <___svfiprintf_internal_r+0xe9c>
 102bbc8:	01800804 	movi	r6,32
 102bbcc:	a9000007 	ldb	r4,0(r21)
 102bbd0:	003ea106 	br	102b658 <_gp+0xfffed374>
 102bbd4:	02c040f4 	movhi	r11,259
 102bbd8:	5ad14a04 	addi	r11,r11,17704
 102bbdc:	dac02a15 	stw	r11,168(sp)
 102bbe0:	d9801d85 	stb	r6,118(sp)
 102bbe4:	88c0080c 	andi	r3,r17,32
 102bbe8:	d8802317 	ldw	r2,140(sp)
 102bbec:	183fce1e 	bne	r3,zero,102bb28 <_gp+0xfffed844>
 102bbf0:	88c0040c 	andi	r3,r17,16
 102bbf4:	1801ed1e 	bne	r3,zero,102c3ac <___svfiprintf_internal_r+0xe84>
 102bbf8:	88c0100c 	andi	r3,r17,64
 102bbfc:	18021a26 	beq	r3,zero,102c468 <___svfiprintf_internal_r+0xf40>
 102bc00:	da802317 	ldw	r10,140(sp)
 102bc04:	1240000b 	ldhu	r9,0(r2)
 102bc08:	52800104 	addi	r10,r10,4
 102bc0c:	da802315 	stw	r10,140(sp)
 102bc10:	0015883a 	mov	r10,zero
 102bc14:	003fc906 	br	102bb3c <_gp+0xfffed858>
 102bc18:	8c400414 	ori	r17,r17,16
 102bc1c:	d9801d85 	stb	r6,118(sp)
 102bc20:	8880080c 	andi	r2,r17,32
 102bc24:	d8c02317 	ldw	r3,140(sp)
 102bc28:	103f671e 	bne	r2,zero,102b9c8 <_gp+0xfffed6e4>
 102bc2c:	8880040c 	andi	r2,r17,16
 102bc30:	1001c71e 	bne	r2,zero,102c350 <___svfiprintf_internal_r+0xe28>
 102bc34:	8880100c 	andi	r2,r17,64
 102bc38:	1001c526 	beq	r2,zero,102c350 <___svfiprintf_internal_r+0xe28>
 102bc3c:	1a40000f 	ldh	r9,0(r3)
 102bc40:	dac02317 	ldw	r11,140(sp)
 102bc44:	4815d7fa 	srai	r10,r9,31
 102bc48:	5ac00104 	addi	r11,r11,4
 102bc4c:	dac02315 	stw	r11,140(sp)
 102bc50:	5005883a 	mov	r2,r10
 102bc54:	103f630e 	bge	r2,zero,102b9e4 <_gp+0xfffed700>
 102bc58:	0253c83a 	sub	r9,zero,r9
 102bc5c:	4804c03a 	cmpne	r2,r9,zero
 102bc60:	0295c83a 	sub	r10,zero,r10
 102bc64:	5095c83a 	sub	r10,r10,r2
 102bc68:	02c00b44 	movi	r11,45
 102bc6c:	dac01d85 	stb	r11,118(sp)
 102bc70:	8039883a 	mov	fp,r16
 102bc74:	00800044 	movi	r2,1
 102bc78:	4a86b03a 	or	r3,r9,r10
 102bc7c:	003ee606 	br	102b818 <_gp+0xfffed534>
 102bc80:	a815883a 	mov	r10,r21
 102bc84:	d8002115 	stw	zero,132(sp)
 102bc88:	20bff404 	addi	r2,r4,-48
 102bc8c:	51000007 	ldb	r4,0(r10)
 102bc90:	da802117 	ldw	r10,132(sp)
 102bc94:	ad400044 	addi	r21,r21,1
 102bc98:	52c002a4 	muli	r11,r10,10
 102bc9c:	a815883a 	mov	r10,r21
 102bca0:	5885883a 	add	r2,r11,r2
 102bca4:	d8802115 	stw	r2,132(sp)
 102bca8:	20bff404 	addi	r2,r4,-48
 102bcac:	28bff72e 	bgeu	r5,r2,102bc8c <_gp+0xfffed9a8>
 102bcb0:	20bff804 	addi	r2,r4,-32
 102bcb4:	18be6b2e 	bgeu	r3,r2,102b664 <_gp+0xfffed380>
 102bcb8:	d9801d85 	stb	r6,118(sp)
 102bcbc:	2000ce26 	beq	r4,zero,102bff8 <___svfiprintf_internal_r+0xad0>
 102bcc0:	02800044 	movi	r10,1
 102bcc4:	dac01004 	addi	r11,sp,64
 102bcc8:	da802015 	stw	r10,128(sp)
 102bccc:	d9001005 	stb	r4,64(sp)
 102bcd0:	d8001d85 	stb	zero,118(sp)
 102bcd4:	5039883a 	mov	fp,r10
 102bcd8:	dac02615 	stw	r11,152(sp)
 102bcdc:	003f5106 	br	102ba24 <_gp+0xfffed740>
 102bce0:	8c402014 	ori	r17,r17,128
 102bce4:	a9000007 	ldb	r4,0(r21)
 102bce8:	003e5b06 	br	102b658 <_gp+0xfffed374>
 102bcec:	01800ac4 	movi	r6,43
 102bcf0:	a9000007 	ldb	r4,0(r21)
 102bcf4:	003e5806 	br	102b658 <_gp+0xfffed374>
 102bcf8:	a9000007 	ldb	r4,0(r21)
 102bcfc:	aa800044 	addi	r10,r21,1
 102bd00:	22421426 	beq	r4,r9,102c554 <___svfiprintf_internal_r+0x102c>
 102bd04:	20bff404 	addi	r2,r4,-48
 102bd08:	502b883a 	mov	r21,r10
 102bd0c:	0021883a 	mov	r16,zero
 102bd10:	28be5236 	bltu	r5,r2,102b65c <_gp+0xfffed378>
 102bd14:	a9000007 	ldb	r4,0(r21)
 102bd18:	840002a4 	muli	r16,r16,10
 102bd1c:	ad400044 	addi	r21,r21,1
 102bd20:	1421883a 	add	r16,r2,r16
 102bd24:	20bff404 	addi	r2,r4,-48
 102bd28:	28bffa2e 	bgeu	r5,r2,102bd14 <_gp+0xfffeda30>
 102bd2c:	803e4b0e 	bge	r16,zero,102b65c <_gp+0xfffed378>
 102bd30:	043fffc4 	movi	r16,-1
 102bd34:	003e4906 	br	102b65c <_gp+0xfffed378>
 102bd38:	d8c01c17 	ldw	r3,112(sp)
 102bd3c:	d8801b17 	ldw	r2,108(sp)
 102bd40:	d9001d87 	ldb	r4,118(sp)
 102bd44:	20000b26 	beq	r4,zero,102bd74 <___svfiprintf_internal_r+0x84c>
 102bd48:	d9001d84 	addi	r4,sp,118
 102bd4c:	18c00044 	addi	r3,r3,1
 102bd50:	10800044 	addi	r2,r2,1
 102bd54:	41000015 	stw	r4,0(r8)
 102bd58:	01000044 	movi	r4,1
 102bd5c:	41000115 	stw	r4,4(r8)
 102bd60:	d8c01c15 	stw	r3,112(sp)
 102bd64:	d8801b15 	stw	r2,108(sp)
 102bd68:	010001c4 	movi	r4,7
 102bd6c:	20811e16 	blt	r4,r2,102c1e8 <___svfiprintf_internal_r+0xcc0>
 102bd70:	42000204 	addi	r8,r8,8
 102bd74:	da802217 	ldw	r10,136(sp)
 102bd78:	50000b26 	beq	r10,zero,102bda8 <___svfiprintf_internal_r+0x880>
 102bd7c:	d9001d04 	addi	r4,sp,116
 102bd80:	18c00084 	addi	r3,r3,2
 102bd84:	10800044 	addi	r2,r2,1
 102bd88:	41000015 	stw	r4,0(r8)
 102bd8c:	01000084 	movi	r4,2
 102bd90:	41000115 	stw	r4,4(r8)
 102bd94:	d8c01c15 	stw	r3,112(sp)
 102bd98:	d8801b15 	stw	r2,108(sp)
 102bd9c:	010001c4 	movi	r4,7
 102bda0:	20811a16 	blt	r4,r2,102c20c <___svfiprintf_internal_r+0xce4>
 102bda4:	42000204 	addi	r8,r8,8
 102bda8:	dac02517 	ldw	r11,148(sp)
 102bdac:	01002004 	movi	r4,128
 102bdb0:	5900a826 	beq	r11,r4,102c054 <___svfiprintf_internal_r+0xb2c>
 102bdb4:	8721c83a 	sub	r16,r16,fp
 102bdb8:	0400260e 	bge	zero,r16,102be54 <___svfiprintf_internal_r+0x92c>
 102bdbc:	01c00404 	movi	r7,16
 102bdc0:	3c01a50e 	bge	r7,r16,102c458 <___svfiprintf_internal_r+0xf30>
 102bdc4:	010040f4 	movhi	r4,259
 102bdc8:	2111b304 	addi	r4,r4,18124
 102bdcc:	d9002215 	stw	r4,136(sp)
 102bdd0:	382f883a 	mov	r23,r7
 102bdd4:	058001c4 	movi	r22,7
 102bdd8:	00000306 	br	102bde8 <___svfiprintf_internal_r+0x8c0>
 102bddc:	843ffc04 	addi	r16,r16,-16
 102bde0:	42000204 	addi	r8,r8,8
 102bde4:	bc00110e 	bge	r23,r16,102be2c <___svfiprintf_internal_r+0x904>
 102bde8:	18c00404 	addi	r3,r3,16
 102bdec:	10800044 	addi	r2,r2,1
 102bdf0:	44c00015 	stw	r19,0(r8)
 102bdf4:	45c00115 	stw	r23,4(r8)
 102bdf8:	d8c01c15 	stw	r3,112(sp)
 102bdfc:	d8801b15 	stw	r2,108(sp)
 102be00:	b0bff60e 	bge	r22,r2,102bddc <_gp+0xfffedaf8>
 102be04:	9009883a 	mov	r4,r18
 102be08:	a00b883a 	mov	r5,r20
 102be0c:	d9801a04 	addi	r6,sp,104
 102be10:	102b3600 	call	102b360 <__ssprint_r>
 102be14:	10007e1e 	bne	r2,zero,102c010 <___svfiprintf_internal_r+0xae8>
 102be18:	843ffc04 	addi	r16,r16,-16
 102be1c:	d8c01c17 	ldw	r3,112(sp)
 102be20:	d8801b17 	ldw	r2,108(sp)
 102be24:	d811883a 	mov	r8,sp
 102be28:	bc3fef16 	blt	r23,r16,102bde8 <_gp+0xfffedb04>
 102be2c:	da802217 	ldw	r10,136(sp)
 102be30:	1c07883a 	add	r3,r3,r16
 102be34:	10800044 	addi	r2,r2,1
 102be38:	42800015 	stw	r10,0(r8)
 102be3c:	44000115 	stw	r16,4(r8)
 102be40:	d8c01c15 	stw	r3,112(sp)
 102be44:	d8801b15 	stw	r2,108(sp)
 102be48:	010001c4 	movi	r4,7
 102be4c:	2080ce16 	blt	r4,r2,102c188 <___svfiprintf_internal_r+0xc60>
 102be50:	42000204 	addi	r8,r8,8
 102be54:	dac02617 	ldw	r11,152(sp)
 102be58:	e0c7883a 	add	r3,fp,r3
 102be5c:	10800044 	addi	r2,r2,1
 102be60:	42c00015 	stw	r11,0(r8)
 102be64:	47000115 	stw	fp,4(r8)
 102be68:	d8c01c15 	stw	r3,112(sp)
 102be6c:	d8801b15 	stw	r2,108(sp)
 102be70:	010001c4 	movi	r4,7
 102be74:	2080a316 	blt	r4,r2,102c104 <___svfiprintf_internal_r+0xbdc>
 102be78:	42000204 	addi	r8,r8,8
 102be7c:	8c40010c 	andi	r17,r17,4
 102be80:	88002b26 	beq	r17,zero,102bf30 <___svfiprintf_internal_r+0xa08>
 102be84:	da802117 	ldw	r10,132(sp)
 102be88:	dac02017 	ldw	r11,128(sp)
 102be8c:	52e1c83a 	sub	r16,r10,r11
 102be90:	0400270e 	bge	zero,r16,102bf30 <___svfiprintf_internal_r+0xa08>
 102be94:	04400404 	movi	r17,16
 102be98:	d8801b17 	ldw	r2,108(sp)
 102be9c:	8c019e0e 	bge	r17,r16,102c518 <___svfiprintf_internal_r+0xff0>
 102bea0:	014040f4 	movhi	r5,259
 102bea4:	2951b704 	addi	r5,r5,18140
 102bea8:	d9402815 	stw	r5,160(sp)
 102beac:	070001c4 	movi	fp,7
 102beb0:	00000306 	br	102bec0 <___svfiprintf_internal_r+0x998>
 102beb4:	843ffc04 	addi	r16,r16,-16
 102beb8:	42000204 	addi	r8,r8,8
 102bebc:	8c00130e 	bge	r17,r16,102bf0c <___svfiprintf_internal_r+0x9e4>
 102bec0:	028040f4 	movhi	r10,259
 102bec4:	18c00404 	addi	r3,r3,16
 102bec8:	10800044 	addi	r2,r2,1
 102becc:	5291b704 	addi	r10,r10,18140
 102bed0:	42800015 	stw	r10,0(r8)
 102bed4:	44400115 	stw	r17,4(r8)
 102bed8:	d8c01c15 	stw	r3,112(sp)
 102bedc:	d8801b15 	stw	r2,108(sp)
 102bee0:	e0bff40e 	bge	fp,r2,102beb4 <_gp+0xfffedbd0>
 102bee4:	9009883a 	mov	r4,r18
 102bee8:	a00b883a 	mov	r5,r20
 102beec:	d9801a04 	addi	r6,sp,104
 102bef0:	102b3600 	call	102b360 <__ssprint_r>
 102bef4:	1000461e 	bne	r2,zero,102c010 <___svfiprintf_internal_r+0xae8>
 102bef8:	843ffc04 	addi	r16,r16,-16
 102befc:	d8c01c17 	ldw	r3,112(sp)
 102bf00:	d8801b17 	ldw	r2,108(sp)
 102bf04:	d811883a 	mov	r8,sp
 102bf08:	8c3fed16 	blt	r17,r16,102bec0 <_gp+0xfffedbdc>
 102bf0c:	dac02817 	ldw	r11,160(sp)
 102bf10:	1c07883a 	add	r3,r3,r16
 102bf14:	10800044 	addi	r2,r2,1
 102bf18:	42c00015 	stw	r11,0(r8)
 102bf1c:	44000115 	stw	r16,4(r8)
 102bf20:	d8c01c15 	stw	r3,112(sp)
 102bf24:	d8801b15 	stw	r2,108(sp)
 102bf28:	010001c4 	movi	r4,7
 102bf2c:	2080fe16 	blt	r4,r2,102c328 <___svfiprintf_internal_r+0xe00>
 102bf30:	dd802017 	ldw	r22,128(sp)
 102bf34:	da802117 	ldw	r10,132(sp)
 102bf38:	b280010e 	bge	r22,r10,102bf40 <___svfiprintf_internal_r+0xa18>
 102bf3c:	502d883a 	mov	r22,r10
 102bf40:	dac02417 	ldw	r11,144(sp)
 102bf44:	5d97883a 	add	r11,r11,r22
 102bf48:	dac02415 	stw	r11,144(sp)
 102bf4c:	1800751e 	bne	r3,zero,102c124 <___svfiprintf_internal_r+0xbfc>
 102bf50:	a8800007 	ldb	r2,0(r21)
 102bf54:	d8001b15 	stw	zero,108(sp)
 102bf58:	d811883a 	mov	r8,sp
 102bf5c:	103d981e 	bne	r2,zero,102b5c0 <_gp+0xfffed2dc>
 102bf60:	a82d883a 	mov	r22,r21
 102bf64:	003daf06 	br	102b624 <_gp+0xfffed340>
 102bf68:	10803fcc 	andi	r2,r2,255
 102bf6c:	00c00044 	movi	r3,1
 102bf70:	10fe311e 	bne	r2,r3,102b838 <_gp+0xfffed554>
 102bf74:	5000e126 	beq	r10,zero,102c2fc <___svfiprintf_internal_r+0xdd4>
 102bf78:	dc402015 	stw	r17,128(sp)
 102bf7c:	dc002215 	stw	r16,136(sp)
 102bf80:	dd801a04 	addi	r22,sp,104
 102bf84:	402f883a 	mov	r23,r8
 102bf88:	5839883a 	mov	fp,r11
 102bf8c:	4821883a 	mov	r16,r9
 102bf90:	5023883a 	mov	r17,r10
 102bf94:	8009883a 	mov	r4,r16
 102bf98:	880b883a 	mov	r5,r17
 102bf9c:	01800284 	movi	r6,10
 102bfa0:	000f883a 	mov	r7,zero
 102bfa4:	102e91c0 	call	102e91c <__umoddi3>
 102bfa8:	10800c04 	addi	r2,r2,48
 102bfac:	b5bfffc4 	addi	r22,r22,-1
 102bfb0:	8009883a 	mov	r4,r16
 102bfb4:	880b883a 	mov	r5,r17
 102bfb8:	01800284 	movi	r6,10
 102bfbc:	000f883a 	mov	r7,zero
 102bfc0:	b0800005 	stb	r2,0(r22)
 102bfc4:	102e35c0 	call	102e35c <__udivdi3>
 102bfc8:	1021883a 	mov	r16,r2
 102bfcc:	10c4b03a 	or	r2,r2,r3
 102bfd0:	1823883a 	mov	r17,r3
 102bfd4:	103fef1e 	bne	r2,zero,102bf94 <_gp+0xfffedcb0>
 102bfd8:	da801e17 	ldw	r10,120(sp)
 102bfdc:	e017883a 	mov	r11,fp
 102bfe0:	b811883a 	mov	r8,r23
 102bfe4:	dc402017 	ldw	r17,128(sp)
 102bfe8:	dc002217 	ldw	r16,136(sp)
 102bfec:	dd802615 	stw	r22,152(sp)
 102bff0:	55b9c83a 	sub	fp,r10,r22
 102bff4:	003e2206 	br	102b880 <_gp+0xfffed59c>
 102bff8:	d8801c17 	ldw	r2,112(sp)
 102bffc:	10000426 	beq	r2,zero,102c010 <___svfiprintf_internal_r+0xae8>
 102c000:	d9002917 	ldw	r4,164(sp)
 102c004:	d9402717 	ldw	r5,156(sp)
 102c008:	d9801a04 	addi	r6,sp,104
 102c00c:	102b3600 	call	102b360 <__ssprint_r>
 102c010:	da802717 	ldw	r10,156(sp)
 102c014:	5080030b 	ldhu	r2,12(r10)
 102c018:	1080100c 	andi	r2,r2,64
 102c01c:	1000511e 	bne	r2,zero,102c164 <___svfiprintf_internal_r+0xc3c>
 102c020:	d8802417 	ldw	r2,144(sp)
 102c024:	dfc03617 	ldw	ra,216(sp)
 102c028:	df003517 	ldw	fp,212(sp)
 102c02c:	ddc03417 	ldw	r23,208(sp)
 102c030:	dd803317 	ldw	r22,204(sp)
 102c034:	dd403217 	ldw	r21,200(sp)
 102c038:	dd003117 	ldw	r20,196(sp)
 102c03c:	dcc03017 	ldw	r19,192(sp)
 102c040:	dc802f17 	ldw	r18,188(sp)
 102c044:	dc402e17 	ldw	r17,184(sp)
 102c048:	dc002d17 	ldw	r16,180(sp)
 102c04c:	dec03704 	addi	sp,sp,220
 102c050:	f800283a 	ret
 102c054:	da802117 	ldw	r10,132(sp)
 102c058:	dac02017 	ldw	r11,128(sp)
 102c05c:	52edc83a 	sub	r22,r10,r11
 102c060:	05bf540e 	bge	zero,r22,102bdb4 <_gp+0xfffedad0>
 102c064:	02400404 	movi	r9,16
 102c068:	4d812f0e 	bge	r9,r22,102c528 <___svfiprintf_internal_r+0x1000>
 102c06c:	014040f4 	movhi	r5,259
 102c070:	2951b304 	addi	r5,r5,18124
 102c074:	d9402215 	stw	r5,136(sp)
 102c078:	05c001c4 	movi	r23,7
 102c07c:	00000306 	br	102c08c <___svfiprintf_internal_r+0xb64>
 102c080:	b5bffc04 	addi	r22,r22,-16
 102c084:	42000204 	addi	r8,r8,8
 102c088:	4d80130e 	bge	r9,r22,102c0d8 <___svfiprintf_internal_r+0xbb0>
 102c08c:	18c00404 	addi	r3,r3,16
 102c090:	10800044 	addi	r2,r2,1
 102c094:	44c00015 	stw	r19,0(r8)
 102c098:	42400115 	stw	r9,4(r8)
 102c09c:	d8c01c15 	stw	r3,112(sp)
 102c0a0:	d8801b15 	stw	r2,108(sp)
 102c0a4:	b8bff60e 	bge	r23,r2,102c080 <_gp+0xfffedd9c>
 102c0a8:	9009883a 	mov	r4,r18
 102c0ac:	a00b883a 	mov	r5,r20
 102c0b0:	d9801a04 	addi	r6,sp,104
 102c0b4:	da402c15 	stw	r9,176(sp)
 102c0b8:	102b3600 	call	102b360 <__ssprint_r>
 102c0bc:	da402c17 	ldw	r9,176(sp)
 102c0c0:	103fd31e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c0c4:	b5bffc04 	addi	r22,r22,-16
 102c0c8:	d8c01c17 	ldw	r3,112(sp)
 102c0cc:	d8801b17 	ldw	r2,108(sp)
 102c0d0:	d811883a 	mov	r8,sp
 102c0d4:	4dbfed16 	blt	r9,r22,102c08c <_gp+0xfffedda8>
 102c0d8:	da802217 	ldw	r10,136(sp)
 102c0dc:	1d87883a 	add	r3,r3,r22
 102c0e0:	10800044 	addi	r2,r2,1
 102c0e4:	42800015 	stw	r10,0(r8)
 102c0e8:	45800115 	stw	r22,4(r8)
 102c0ec:	d8c01c15 	stw	r3,112(sp)
 102c0f0:	d8801b15 	stw	r2,108(sp)
 102c0f4:	010001c4 	movi	r4,7
 102c0f8:	2080ce16 	blt	r4,r2,102c434 <___svfiprintf_internal_r+0xf0c>
 102c0fc:	42000204 	addi	r8,r8,8
 102c100:	003f2c06 	br	102bdb4 <_gp+0xfffedad0>
 102c104:	9009883a 	mov	r4,r18
 102c108:	a00b883a 	mov	r5,r20
 102c10c:	d9801a04 	addi	r6,sp,104
 102c110:	102b3600 	call	102b360 <__ssprint_r>
 102c114:	103fbe1e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c118:	d8c01c17 	ldw	r3,112(sp)
 102c11c:	d811883a 	mov	r8,sp
 102c120:	003f5606 	br	102be7c <_gp+0xfffedb98>
 102c124:	9009883a 	mov	r4,r18
 102c128:	a00b883a 	mov	r5,r20
 102c12c:	d9801a04 	addi	r6,sp,104
 102c130:	102b3600 	call	102b360 <__ssprint_r>
 102c134:	103f8626 	beq	r2,zero,102bf50 <_gp+0xfffedc6c>
 102c138:	003fb506 	br	102c010 <_gp+0xfffedd2c>
 102c13c:	10803fcc 	andi	r2,r2,255
 102c140:	10003b1e 	bne	r2,zero,102c230 <___svfiprintf_internal_r+0xd08>
 102c144:	8880004c 	andi	r2,r17,1
 102c148:	10007e26 	beq	r2,zero,102c344 <___svfiprintf_internal_r+0xe1c>
 102c14c:	00800c04 	movi	r2,48
 102c150:	d8c019c4 	addi	r3,sp,103
 102c154:	d88019c5 	stb	r2,103(sp)
 102c158:	df002b17 	ldw	fp,172(sp)
 102c15c:	d8c02615 	stw	r3,152(sp)
 102c160:	003dc706 	br	102b880 <_gp+0xfffed59c>
 102c164:	00bfffc4 	movi	r2,-1
 102c168:	003fae06 	br	102c024 <_gp+0xfffedd40>
 102c16c:	9009883a 	mov	r4,r18
 102c170:	a00b883a 	mov	r5,r20
 102c174:	d9801a04 	addi	r6,sp,104
 102c178:	102b3600 	call	102b360 <__ssprint_r>
 102c17c:	103fa41e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c180:	d811883a 	mov	r8,sp
 102c184:	003d2406 	br	102b618 <_gp+0xfffed334>
 102c188:	9009883a 	mov	r4,r18
 102c18c:	a00b883a 	mov	r5,r20
 102c190:	d9801a04 	addi	r6,sp,104
 102c194:	102b3600 	call	102b360 <__ssprint_r>
 102c198:	103f9d1e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c19c:	d8c01c17 	ldw	r3,112(sp)
 102c1a0:	d8801b17 	ldw	r2,108(sp)
 102c1a4:	d811883a 	mov	r8,sp
 102c1a8:	003f2a06 	br	102be54 <_gp+0xfffedb70>
 102c1ac:	d9402a17 	ldw	r5,168(sp)
 102c1b0:	d8c01a04 	addi	r3,sp,104
 102c1b4:	488003cc 	andi	r2,r9,15
 102c1b8:	5008973a 	slli	r4,r10,28
 102c1bc:	2885883a 	add	r2,r5,r2
 102c1c0:	4812d13a 	srli	r9,r9,4
 102c1c4:	10800003 	ldbu	r2,0(r2)
 102c1c8:	5014d13a 	srli	r10,r10,4
 102c1cc:	18ffffc4 	addi	r3,r3,-1
 102c1d0:	2252b03a 	or	r9,r4,r9
 102c1d4:	18800005 	stb	r2,0(r3)
 102c1d8:	4a84b03a 	or	r2,r9,r10
 102c1dc:	103ff51e 	bne	r2,zero,102c1b4 <_gp+0xfffeded0>
 102c1e0:	d8c02615 	stw	r3,152(sp)
 102c1e4:	003da406 	br	102b878 <_gp+0xfffed594>
 102c1e8:	9009883a 	mov	r4,r18
 102c1ec:	a00b883a 	mov	r5,r20
 102c1f0:	d9801a04 	addi	r6,sp,104
 102c1f4:	102b3600 	call	102b360 <__ssprint_r>
 102c1f8:	103f851e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c1fc:	d8c01c17 	ldw	r3,112(sp)
 102c200:	d8801b17 	ldw	r2,108(sp)
 102c204:	d811883a 	mov	r8,sp
 102c208:	003eda06 	br	102bd74 <_gp+0xfffeda90>
 102c20c:	9009883a 	mov	r4,r18
 102c210:	a00b883a 	mov	r5,r20
 102c214:	d9801a04 	addi	r6,sp,104
 102c218:	102b3600 	call	102b360 <__ssprint_r>
 102c21c:	103f7c1e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c220:	d8c01c17 	ldw	r3,112(sp)
 102c224:	d8801b17 	ldw	r2,108(sp)
 102c228:	d811883a 	mov	r8,sp
 102c22c:	003ede06 	br	102bda8 <_gp+0xfffedac4>
 102c230:	da801a04 	addi	r10,sp,104
 102c234:	da802615 	stw	r10,152(sp)
 102c238:	003d9106 	br	102b880 <_gp+0xfffed59c>
 102c23c:	00800084 	movi	r2,2
 102c240:	4a86b03a 	or	r3,r9,r10
 102c244:	003d7106 	br	102b80c <_gp+0xfffed528>
 102c248:	88c0040c 	andi	r3,r17,16
 102c24c:	18004f1e 	bne	r3,zero,102c38c <___svfiprintf_internal_r+0xe64>
 102c250:	88c0100c 	andi	r3,r17,64
 102c254:	18004d26 	beq	r3,zero,102c38c <___svfiprintf_internal_r+0xe64>
 102c258:	dac02317 	ldw	r11,140(sp)
 102c25c:	1240000b 	ldhu	r9,0(r2)
 102c260:	0015883a 	mov	r10,zero
 102c264:	5ac00104 	addi	r11,r11,4
 102c268:	dac02315 	stw	r11,140(sp)
 102c26c:	00800044 	movi	r2,1
 102c270:	4807883a 	mov	r3,r9
 102c274:	003d6506 	br	102b80c <_gp+0xfffed528>
 102c278:	9009883a 	mov	r4,r18
 102c27c:	a00b883a 	mov	r5,r20
 102c280:	d9801a04 	addi	r6,sp,104
 102c284:	102b3600 	call	102b360 <__ssprint_r>
 102c288:	103f611e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c28c:	d8c01c17 	ldw	r3,112(sp)
 102c290:	d8801b17 	ldw	r2,108(sp)
 102c294:	d811883a 	mov	r8,sp
 102c298:	003ea906 	br	102bd40 <_gp+0xfffeda5c>
 102c29c:	88c0040c 	andi	r3,r17,16
 102c2a0:	1800321e 	bne	r3,zero,102c36c <___svfiprintf_internal_r+0xe44>
 102c2a4:	88c0100c 	andi	r3,r17,64
 102c2a8:	18003026 	beq	r3,zero,102c36c <___svfiprintf_internal_r+0xe44>
 102c2ac:	dac02317 	ldw	r11,140(sp)
 102c2b0:	1240000b 	ldhu	r9,0(r2)
 102c2b4:	0015883a 	mov	r10,zero
 102c2b8:	5ac00104 	addi	r11,r11,4
 102c2bc:	dac02315 	stw	r11,140(sp)
 102c2c0:	0005883a 	mov	r2,zero
 102c2c4:	4807883a 	mov	r3,r9
 102c2c8:	003d5006 	br	102b80c <_gp+0xfffed528>
 102c2cc:	10803fcc 	andi	r2,r2,255
 102c2d0:	1080201c 	xori	r2,r2,128
 102c2d4:	10bfe004 	addi	r2,r2,-128
 102c2d8:	01000c04 	movi	r4,48
 102c2dc:	11006826 	beq	r2,r4,102c480 <___svfiprintf_internal_r+0xf58>
 102c2e0:	da802617 	ldw	r10,152(sp)
 102c2e4:	d8801e17 	ldw	r2,120(sp)
 102c2e8:	193fffc5 	stb	r4,-1(r3)
 102c2ec:	52bfffc4 	addi	r10,r10,-1
 102c2f0:	da802615 	stw	r10,152(sp)
 102c2f4:	12b9c83a 	sub	fp,r2,r10
 102c2f8:	003d6106 	br	102b880 <_gp+0xfffed59c>
 102c2fc:	00800244 	movi	r2,9
 102c300:	127f1d36 	bltu	r2,r9,102bf78 <_gp+0xfffedc94>
 102c304:	4a400c04 	addi	r9,r9,48
 102c308:	d8c019c4 	addi	r3,sp,103
 102c30c:	da4019c5 	stb	r9,103(sp)
 102c310:	df002b17 	ldw	fp,172(sp)
 102c314:	d8c02615 	stw	r3,152(sp)
 102c318:	003d5906 	br	102b880 <_gp+0xfffed59c>
 102c31c:	d8802315 	stw	r2,140(sp)
 102c320:	a9000007 	ldb	r4,0(r21)
 102c324:	003ccc06 	br	102b658 <_gp+0xfffed374>
 102c328:	9009883a 	mov	r4,r18
 102c32c:	a00b883a 	mov	r5,r20
 102c330:	d9801a04 	addi	r6,sp,104
 102c334:	102b3600 	call	102b360 <__ssprint_r>
 102c338:	103f351e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c33c:	d8c01c17 	ldw	r3,112(sp)
 102c340:	003efb06 	br	102bf30 <_gp+0xfffedc4c>
 102c344:	d8c01a04 	addi	r3,sp,104
 102c348:	d8c02615 	stw	r3,152(sp)
 102c34c:	003d4c06 	br	102b880 <_gp+0xfffed59c>
 102c350:	da802317 	ldw	r10,140(sp)
 102c354:	1a400017 	ldw	r9,0(r3)
 102c358:	52800104 	addi	r10,r10,4
 102c35c:	da802315 	stw	r10,140(sp)
 102c360:	4815d7fa 	srai	r10,r9,31
 102c364:	5005883a 	mov	r2,r10
 102c368:	003d9d06 	br	102b9e0 <_gp+0xfffed6fc>
 102c36c:	da802317 	ldw	r10,140(sp)
 102c370:	12400017 	ldw	r9,0(r2)
 102c374:	0005883a 	mov	r2,zero
 102c378:	52800104 	addi	r10,r10,4
 102c37c:	da802315 	stw	r10,140(sp)
 102c380:	4807883a 	mov	r3,r9
 102c384:	0015883a 	mov	r10,zero
 102c388:	003d2006 	br	102b80c <_gp+0xfffed528>
 102c38c:	da802317 	ldw	r10,140(sp)
 102c390:	12400017 	ldw	r9,0(r2)
 102c394:	00800044 	movi	r2,1
 102c398:	52800104 	addi	r10,r10,4
 102c39c:	da802315 	stw	r10,140(sp)
 102c3a0:	4807883a 	mov	r3,r9
 102c3a4:	0015883a 	mov	r10,zero
 102c3a8:	003d1806 	br	102b80c <_gp+0xfffed528>
 102c3ac:	dac02317 	ldw	r11,140(sp)
 102c3b0:	12400017 	ldw	r9,0(r2)
 102c3b4:	0015883a 	mov	r10,zero
 102c3b8:	5ac00104 	addi	r11,r11,4
 102c3bc:	dac02315 	stw	r11,140(sp)
 102c3c0:	003dde06 	br	102bb3c <_gp+0xfffed858>
 102c3c4:	a9000007 	ldb	r4,0(r21)
 102c3c8:	003ca306 	br	102b658 <_gp+0xfffed374>
 102c3cc:	dac02317 	ldw	r11,140(sp)
 102c3d0:	da802417 	ldw	r10,144(sp)
 102c3d4:	58800017 	ldw	r2,0(r11)
 102c3d8:	5007d7fa 	srai	r3,r10,31
 102c3dc:	5ac00104 	addi	r11,r11,4
 102c3e0:	dac02315 	stw	r11,140(sp)
 102c3e4:	12800015 	stw	r10,0(r2)
 102c3e8:	10c00115 	stw	r3,4(r2)
 102c3ec:	003c7206 	br	102b5b8 <_gp+0xfffed2d4>
 102c3f0:	00800c04 	movi	r2,48
 102c3f4:	d8801d05 	stb	r2,116(sp)
 102c3f8:	d9001d45 	stb	r4,117(sp)
 102c3fc:	8c400094 	ori	r17,r17,2
 102c400:	00800084 	movi	r2,2
 102c404:	003d0106 	br	102b80c <_gp+0xfffed528>
 102c408:	ad400044 	addi	r21,r21,1
 102c40c:	8c400814 	ori	r17,r17,32
 102c410:	11000047 	ldb	r4,1(r2)
 102c414:	003c9006 	br	102b658 <_gp+0xfffed374>
 102c418:	dac02317 	ldw	r11,140(sp)
 102c41c:	da802417 	ldw	r10,144(sp)
 102c420:	58800017 	ldw	r2,0(r11)
 102c424:	5ac00104 	addi	r11,r11,4
 102c428:	dac02315 	stw	r11,140(sp)
 102c42c:	12800015 	stw	r10,0(r2)
 102c430:	003c6106 	br	102b5b8 <_gp+0xfffed2d4>
 102c434:	9009883a 	mov	r4,r18
 102c438:	a00b883a 	mov	r5,r20
 102c43c:	d9801a04 	addi	r6,sp,104
 102c440:	102b3600 	call	102b360 <__ssprint_r>
 102c444:	103ef21e 	bne	r2,zero,102c010 <_gp+0xfffedd2c>
 102c448:	d8c01c17 	ldw	r3,112(sp)
 102c44c:	d8801b17 	ldw	r2,108(sp)
 102c450:	d811883a 	mov	r8,sp
 102c454:	003e5706 	br	102bdb4 <_gp+0xfffedad0>
 102c458:	02c040f4 	movhi	r11,259
 102c45c:	5ad1b304 	addi	r11,r11,18124
 102c460:	dac02215 	stw	r11,136(sp)
 102c464:	003e7106 	br	102be2c <_gp+0xfffedb48>
 102c468:	dac02317 	ldw	r11,140(sp)
 102c46c:	12400017 	ldw	r9,0(r2)
 102c470:	0015883a 	mov	r10,zero
 102c474:	5ac00104 	addi	r11,r11,4
 102c478:	dac02315 	stw	r11,140(sp)
 102c47c:	003daf06 	br	102bb3c <_gp+0xfffed858>
 102c480:	da801e17 	ldw	r10,120(sp)
 102c484:	d8c02617 	ldw	r3,152(sp)
 102c488:	50f9c83a 	sub	fp,r10,r3
 102c48c:	003cfc06 	br	102b880 <_gp+0xfffed59c>
 102c490:	da002c15 	stw	r8,176(sp)
 102c494:	10220bc0 	call	10220bc <strlen>
 102c498:	1039883a 	mov	fp,r2
 102c49c:	dac01d83 	ldbu	r11,118(sp)
 102c4a0:	ddc02315 	stw	r23,140(sp)
 102c4a4:	0021883a 	mov	r16,zero
 102c4a8:	da002c17 	ldw	r8,176(sp)
 102c4ac:	003cf406 	br	102b880 <_gp+0xfffed59c>
 102c4b0:	04001004 	movi	r16,64
 102c4b4:	800b883a 	mov	r5,r16
 102c4b8:	1028f440 	call	1028f44 <_malloc_r>
 102c4bc:	da802717 	ldw	r10,156(sp)
 102c4c0:	50800015 	stw	r2,0(r10)
 102c4c4:	50800415 	stw	r2,16(r10)
 102c4c8:	10002c26 	beq	r2,zero,102c57c <___svfiprintf_internal_r+0x1054>
 102c4cc:	da802717 	ldw	r10,156(sp)
 102c4d0:	54000515 	stw	r16,20(r10)
 102c4d4:	003c2806 	br	102b578 <_gp+0xfffed294>
 102c4d8:	00800184 	movi	r2,6
 102c4dc:	1400012e 	bgeu	r2,r16,102c4e4 <___svfiprintf_internal_r+0xfbc>
 102c4e0:	1021883a 	mov	r16,r2
 102c4e4:	8039883a 	mov	fp,r16
 102c4e8:	802d883a 	mov	r22,r16
 102c4ec:	80001716 	blt	r16,zero,102c54c <___svfiprintf_internal_r+0x1024>
 102c4f0:	008040f4 	movhi	r2,259
 102c4f4:	10914f04 	addi	r2,r2,17724
 102c4f8:	dd802015 	stw	r22,128(sp)
 102c4fc:	ddc02315 	stw	r23,140(sp)
 102c500:	d8802615 	stw	r2,152(sp)
 102c504:	003d4706 	br	102ba24 <_gp+0xfffed740>
 102c508:	010040f4 	movhi	r4,259
 102c50c:	2111b704 	addi	r4,r4,18140
 102c510:	d9002815 	stw	r4,160(sp)
 102c514:	003d7206 	br	102bae0 <_gp+0xfffed7fc>
 102c518:	010040f4 	movhi	r4,259
 102c51c:	2111b704 	addi	r4,r4,18140
 102c520:	d9002815 	stw	r4,160(sp)
 102c524:	003e7906 	br	102bf0c <_gp+0xfffedc28>
 102c528:	010040f4 	movhi	r4,259
 102c52c:	2111b304 	addi	r4,r4,18124
 102c530:	d9002215 	stw	r4,136(sp)
 102c534:	003ee806 	br	102c0d8 <_gp+0xfffeddf4>
 102c538:	8039883a 	mov	fp,r16
 102c53c:	dac01d83 	ldbu	r11,118(sp)
 102c540:	ddc02315 	stw	r23,140(sp)
 102c544:	0021883a 	mov	r16,zero
 102c548:	003ccd06 	br	102b880 <_gp+0xfffed59c>
 102c54c:	002d883a 	mov	r22,zero
 102c550:	003fe706 	br	102c4f0 <_gp+0xfffee20c>
 102c554:	dac02317 	ldw	r11,140(sp)
 102c558:	a805883a 	mov	r2,r21
 102c55c:	502b883a 	mov	r21,r10
 102c560:	5c000017 	ldw	r16,0(r11)
 102c564:	59000104 	addi	r4,r11,4
 102c568:	d9002315 	stw	r4,140(sp)
 102c56c:	803fa80e 	bge	r16,zero,102c410 <_gp+0xfffee12c>
 102c570:	043fffc4 	movi	r16,-1
 102c574:	11000047 	ldb	r4,1(r2)
 102c578:	003c3706 	br	102b658 <_gp+0xfffed374>
 102c57c:	dac02917 	ldw	r11,164(sp)
 102c580:	00800304 	movi	r2,12
 102c584:	58800015 	stw	r2,0(r11)
 102c588:	00bfffc4 	movi	r2,-1
 102c58c:	003ea506 	br	102c024 <_gp+0xfffedd40>

0102c590 <__sprint_r.part.0>:
 102c590:	28801917 	ldw	r2,100(r5)
 102c594:	defff604 	addi	sp,sp,-40
 102c598:	dd400515 	stw	r21,20(sp)
 102c59c:	dcc00315 	stw	r19,12(sp)
 102c5a0:	dfc00915 	stw	ra,36(sp)
 102c5a4:	df000815 	stw	fp,32(sp)
 102c5a8:	ddc00715 	stw	r23,28(sp)
 102c5ac:	dd800615 	stw	r22,24(sp)
 102c5b0:	dd000415 	stw	r20,16(sp)
 102c5b4:	dc800215 	stw	r18,8(sp)
 102c5b8:	dc400115 	stw	r17,4(sp)
 102c5bc:	dc000015 	stw	r16,0(sp)
 102c5c0:	1088000c 	andi	r2,r2,8192
 102c5c4:	2827883a 	mov	r19,r5
 102c5c8:	302b883a 	mov	r21,r6
 102c5cc:	10002d26 	beq	r2,zero,102c684 <__sprint_r.part.0+0xf4>
 102c5d0:	30800217 	ldw	r2,8(r6)
 102c5d4:	35800017 	ldw	r22,0(r6)
 102c5d8:	10002826 	beq	r2,zero,102c67c <__sprint_r.part.0+0xec>
 102c5dc:	2029883a 	mov	r20,r4
 102c5e0:	b5c00104 	addi	r23,r22,4
 102c5e4:	04bfffc4 	movi	r18,-1
 102c5e8:	bc400017 	ldw	r17,0(r23)
 102c5ec:	b4000017 	ldw	r16,0(r22)
 102c5f0:	0039883a 	mov	fp,zero
 102c5f4:	8822d0ba 	srli	r17,r17,2
 102c5f8:	04400316 	blt	zero,r17,102c608 <__sprint_r.part.0+0x78>
 102c5fc:	00001706 	br	102c65c <__sprint_r.part.0+0xcc>
 102c600:	84000104 	addi	r16,r16,4
 102c604:	8f001526 	beq	r17,fp,102c65c <__sprint_r.part.0+0xcc>
 102c608:	81400017 	ldw	r5,0(r16)
 102c60c:	a009883a 	mov	r4,r20
 102c610:	980d883a 	mov	r6,r19
 102c614:	102dcac0 	call	102dcac <_fputwc_r>
 102c618:	e7000044 	addi	fp,fp,1
 102c61c:	14bff81e 	bne	r2,r18,102c600 <_gp+0xfffee31c>
 102c620:	9005883a 	mov	r2,r18
 102c624:	a8000215 	stw	zero,8(r21)
 102c628:	a8000115 	stw	zero,4(r21)
 102c62c:	dfc00917 	ldw	ra,36(sp)
 102c630:	df000817 	ldw	fp,32(sp)
 102c634:	ddc00717 	ldw	r23,28(sp)
 102c638:	dd800617 	ldw	r22,24(sp)
 102c63c:	dd400517 	ldw	r21,20(sp)
 102c640:	dd000417 	ldw	r20,16(sp)
 102c644:	dcc00317 	ldw	r19,12(sp)
 102c648:	dc800217 	ldw	r18,8(sp)
 102c64c:	dc400117 	ldw	r17,4(sp)
 102c650:	dc000017 	ldw	r16,0(sp)
 102c654:	dec00a04 	addi	sp,sp,40
 102c658:	f800283a 	ret
 102c65c:	a8c00217 	ldw	r3,8(r21)
 102c660:	8c63883a 	add	r17,r17,r17
 102c664:	8c63883a 	add	r17,r17,r17
 102c668:	1c45c83a 	sub	r2,r3,r17
 102c66c:	a8800215 	stw	r2,8(r21)
 102c670:	b5800204 	addi	r22,r22,8
 102c674:	bdc00204 	addi	r23,r23,8
 102c678:	103fdb1e 	bne	r2,zero,102c5e8 <_gp+0xfffee304>
 102c67c:	0005883a 	mov	r2,zero
 102c680:	003fe806 	br	102c624 <_gp+0xfffee340>
 102c684:	10286980 	call	1028698 <__sfvwrite_r>
 102c688:	003fe606 	br	102c624 <_gp+0xfffee340>

0102c68c <__sprint_r>:
 102c68c:	30c00217 	ldw	r3,8(r6)
 102c690:	18000126 	beq	r3,zero,102c698 <__sprint_r+0xc>
 102c694:	102c5901 	jmpi	102c590 <__sprint_r.part.0>
 102c698:	30000115 	stw	zero,4(r6)
 102c69c:	0005883a 	mov	r2,zero
 102c6a0:	f800283a 	ret

0102c6a4 <___vfiprintf_internal_r>:
 102c6a4:	defeca04 	addi	sp,sp,-1240
 102c6a8:	dd813215 	stw	r22,1224(sp)
 102c6ac:	dd013015 	stw	r20,1216(sp)
 102c6b0:	dfc13515 	stw	ra,1236(sp)
 102c6b4:	df013415 	stw	fp,1232(sp)
 102c6b8:	ddc13315 	stw	r23,1228(sp)
 102c6bc:	dd413115 	stw	r21,1220(sp)
 102c6c0:	dcc12f15 	stw	r19,1212(sp)
 102c6c4:	dc812e15 	stw	r18,1208(sp)
 102c6c8:	dc412d15 	stw	r17,1204(sp)
 102c6cc:	dc012c15 	stw	r16,1200(sp)
 102c6d0:	d9012015 	stw	r4,1152(sp)
 102c6d4:	d9c12115 	stw	r7,1156(sp)
 102c6d8:	2829883a 	mov	r20,r5
 102c6dc:	302d883a 	mov	r22,r6
 102c6e0:	20000226 	beq	r4,zero,102c6ec <___vfiprintf_internal_r+0x48>
 102c6e4:	20800e17 	ldw	r2,56(r4)
 102c6e8:	1001d326 	beq	r2,zero,102ce38 <___vfiprintf_internal_r+0x794>
 102c6ec:	a0c0030b 	ldhu	r3,12(r20)
 102c6f0:	1908000c 	andi	r4,r3,8192
 102c6f4:	1805883a 	mov	r2,r3
 102c6f8:	2000071e 	bne	r4,zero,102c718 <___vfiprintf_internal_r+0x74>
 102c6fc:	a1001917 	ldw	r4,100(r20)
 102c700:	18880014 	ori	r2,r3,8192
 102c704:	00f7ffc4 	movi	r3,-8193
 102c708:	20c8703a 	and	r4,r4,r3
 102c70c:	a080030d 	sth	r2,12(r20)
 102c710:	1007883a 	mov	r3,r2
 102c714:	a1001915 	stw	r4,100(r20)
 102c718:	1100020c 	andi	r4,r2,8
 102c71c:	20018926 	beq	r4,zero,102cd44 <___vfiprintf_internal_r+0x6a0>
 102c720:	a1000417 	ldw	r4,16(r20)
 102c724:	20018726 	beq	r4,zero,102cd44 <___vfiprintf_internal_r+0x6a0>
 102c728:	1080068c 	andi	r2,r2,26
 102c72c:	01000284 	movi	r4,10
 102c730:	11018d26 	beq	r2,r4,102cd68 <___vfiprintf_internal_r+0x6c4>
 102c734:	da810a04 	addi	r10,sp,1064
 102c738:	dac109c4 	addi	r11,sp,1063
 102c73c:	070040f4 	movhi	fp,259
 102c740:	05c040f4 	movhi	r23,259
 102c744:	da811e15 	stw	r10,1144(sp)
 102c748:	52d5c83a 	sub	r10,r10,r11
 102c74c:	e711bf04 	addi	fp,fp,18172
 102c750:	bdd1bb04 	addi	r23,r23,18156
 102c754:	dac11f15 	stw	r11,1148(sp)
 102c758:	dec11a15 	stw	sp,1128(sp)
 102c75c:	d8011c15 	stw	zero,1136(sp)
 102c760:	d8011b15 	stw	zero,1132(sp)
 102c764:	d8012615 	stw	zero,1176(sp)
 102c768:	d8012215 	stw	zero,1160(sp)
 102c76c:	da812715 	stw	r10,1180(sp)
 102c770:	d811883a 	mov	r8,sp
 102c774:	b021883a 	mov	r16,r22
 102c778:	80800007 	ldb	r2,0(r16)
 102c77c:	10039c26 	beq	r2,zero,102d5f0 <___vfiprintf_internal_r+0xf4c>
 102c780:	01000944 	movi	r4,37
 102c784:	11039a26 	beq	r2,r4,102d5f0 <___vfiprintf_internal_r+0xf4c>
 102c788:	8005883a 	mov	r2,r16
 102c78c:	00000106 	br	102c794 <___vfiprintf_internal_r+0xf0>
 102c790:	19000326 	beq	r3,r4,102c7a0 <___vfiprintf_internal_r+0xfc>
 102c794:	10800044 	addi	r2,r2,1
 102c798:	10c00007 	ldb	r3,0(r2)
 102c79c:	183ffc1e 	bne	r3,zero,102c790 <_gp+0xfffee4ac>
 102c7a0:	1425c83a 	sub	r18,r2,r16
 102c7a4:	1023883a 	mov	r17,r2
 102c7a8:	90001026 	beq	r18,zero,102c7ec <___vfiprintf_internal_r+0x148>
 102c7ac:	d8c11c17 	ldw	r3,1136(sp)
 102c7b0:	d8811b17 	ldw	r2,1132(sp)
 102c7b4:	44000015 	stw	r16,0(r8)
 102c7b8:	90c7883a 	add	r3,r18,r3
 102c7bc:	10800044 	addi	r2,r2,1
 102c7c0:	44800115 	stw	r18,4(r8)
 102c7c4:	d8c11c15 	stw	r3,1136(sp)
 102c7c8:	d8811b15 	stw	r2,1132(sp)
 102c7cc:	010001c4 	movi	r4,7
 102c7d0:	2080750e 	bge	r4,r2,102c9a8 <___vfiprintf_internal_r+0x304>
 102c7d4:	18039d1e 	bne	r3,zero,102d64c <___vfiprintf_internal_r+0xfa8>
 102c7d8:	dac12217 	ldw	r11,1160(sp)
 102c7dc:	d8011b15 	stw	zero,1132(sp)
 102c7e0:	d811883a 	mov	r8,sp
 102c7e4:	5c97883a 	add	r11,r11,r18
 102c7e8:	dac12215 	stw	r11,1160(sp)
 102c7ec:	88800007 	ldb	r2,0(r17)
 102c7f0:	1002e026 	beq	r2,zero,102d374 <___vfiprintf_internal_r+0xcd0>
 102c7f4:	88c00047 	ldb	r3,1(r17)
 102c7f8:	8c000044 	addi	r16,r17,1
 102c7fc:	d8011d85 	stb	zero,1142(sp)
 102c800:	000d883a 	mov	r6,zero
 102c804:	027fffc4 	movi	r9,-1
 102c808:	0027883a 	mov	r19,zero
 102c80c:	002b883a 	mov	r21,zero
 102c810:	01001604 	movi	r4,88
 102c814:	01400244 	movi	r5,9
 102c818:	03000a84 	movi	r12,42
 102c81c:	01c01b04 	movi	r7,108
 102c820:	84000044 	addi	r16,r16,1
 102c824:	18bff804 	addi	r2,r3,-32
 102c828:	20825f36 	bltu	r4,r2,102d1a8 <___vfiprintf_internal_r+0xb04>
 102c82c:	100490ba 	slli	r2,r2,2
 102c830:	028040f4 	movhi	r10,259
 102c834:	52b21104 	addi	r10,r10,-14268
 102c838:	1285883a 	add	r2,r2,r10
 102c83c:	10800017 	ldw	r2,0(r2)
 102c840:	1000683a 	jmp	r2
 102c844:	0102d018 	cmpnei	r4,zero,2880
 102c848:	0102d1a8 	cmpgeui	r4,zero,2886
 102c84c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c850:	0102d19c 	xori	r4,zero,2886
 102c854:	0102d1a8 	cmpgeui	r4,zero,2886
 102c858:	0102d1a8 	cmpgeui	r4,zero,2886
 102c85c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c860:	0102d1a8 	cmpgeui	r4,zero,2886
 102c864:	0102d1a8 	cmpgeui	r4,zero,2886
 102c868:	0102d1a8 	cmpgeui	r4,zero,2886
 102c86c:	0102d174 	movhi	r4,2885
 102c870:	0102d190 	cmplti	r4,zero,2886
 102c874:	0102d1a8 	cmpgeui	r4,zero,2886
 102c878:	0102ce48 	cmpgei	r4,zero,2873
 102c87c:	0102cfa8 	cmpgeui	r4,zero,2878
 102c880:	0102d1a8 	cmpgeui	r4,zero,2886
 102c884:	0102cf2c 	andhi	r4,zero,2876
 102c888:	0102cf38 	rdprs	r4,zero,2876
 102c88c:	0102cf38 	rdprs	r4,zero,2876
 102c890:	0102cf38 	rdprs	r4,zero,2876
 102c894:	0102cf38 	rdprs	r4,zero,2876
 102c898:	0102cf38 	rdprs	r4,zero,2876
 102c89c:	0102cf38 	rdprs	r4,zero,2876
 102c8a0:	0102cf38 	rdprs	r4,zero,2876
 102c8a4:	0102cf38 	rdprs	r4,zero,2876
 102c8a8:	0102cf38 	rdprs	r4,zero,2876
 102c8ac:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8b0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8b4:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8b8:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8bc:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8c0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8c4:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8c8:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8cc:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8d0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8d4:	0102cf64 	muli	r4,zero,2877
 102c8d8:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8dc:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8e0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8e4:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8e8:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8ec:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8f0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8f4:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8f8:	0102d1a8 	cmpgeui	r4,zero,2886
 102c8fc:	0102d1a8 	cmpgeui	r4,zero,2886
 102c900:	0102c9f8 	rdprs	r4,zero,2855
 102c904:	0102d1a8 	cmpgeui	r4,zero,2886
 102c908:	0102d1a8 	cmpgeui	r4,zero,2886
 102c90c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c910:	0102d1a8 	cmpgeui	r4,zero,2886
 102c914:	0102d1a8 	cmpgeui	r4,zero,2886
 102c918:	0102c9bc 	xorhi	r4,zero,2854
 102c91c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c920:	0102d1a8 	cmpgeui	r4,zero,2886
 102c924:	0102cea4 	muli	r4,zero,2874
 102c928:	0102d1a8 	cmpgeui	r4,zero,2886
 102c92c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c930:	0102d1a8 	cmpgeui	r4,zero,2886
 102c934:	0102d1a8 	cmpgeui	r4,zero,2886
 102c938:	0102d1a8 	cmpgeui	r4,zero,2886
 102c93c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c940:	0102d1a8 	cmpgeui	r4,zero,2886
 102c944:	0102d1a8 	cmpgeui	r4,zero,2886
 102c948:	0102d1a8 	cmpgeui	r4,zero,2886
 102c94c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c950:	0102cefc 	xorhi	r4,zero,2875
 102c954:	0102d094 	movui	r4,2882
 102c958:	0102d1a8 	cmpgeui	r4,zero,2886
 102c95c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c960:	0102d1a8 	cmpgeui	r4,zero,2886
 102c964:	0102d11c 	xori	r4,zero,2884
 102c968:	0102d094 	movui	r4,2882
 102c96c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c970:	0102d1a8 	cmpgeui	r4,zero,2886
 102c974:	0102d128 	cmpgeui	r4,zero,2884
 102c978:	0102d1a8 	cmpgeui	r4,zero,2886
 102c97c:	0102cfe8 	cmpgeui	r4,zero,2879
 102c980:	0102c9fc 	xorhi	r4,zero,2855
 102c984:	0102d0d0 	cmplti	r4,zero,2883
 102c988:	0102d110 	cmplti	r4,zero,2884
 102c98c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c990:	0102d034 	movhi	r4,2880
 102c994:	0102d1a8 	cmpgeui	r4,zero,2886
 102c998:	0102c9c0 	call	102c9c <__alt_mem_onchip_memory2-0xf1d364>
 102c99c:	0102d1a8 	cmpgeui	r4,zero,2886
 102c9a0:	0102d1a8 	cmpgeui	r4,zero,2886
 102c9a4:	0102d138 	rdprs	r4,zero,2884
 102c9a8:	42000204 	addi	r8,r8,8
 102c9ac:	dac12217 	ldw	r11,1160(sp)
 102c9b0:	5c97883a 	add	r11,r11,r18
 102c9b4:	dac12215 	stw	r11,1160(sp)
 102c9b8:	003f8c06 	br	102c7ec <_gp+0xfffee508>
 102c9bc:	ad400414 	ori	r21,r21,16
 102c9c0:	a880080c 	andi	r2,r21,32
 102c9c4:	10012f1e 	bne	r2,zero,102ce84 <___vfiprintf_internal_r+0x7e0>
 102c9c8:	a880040c 	andi	r2,r21,16
 102c9cc:	1001ff1e 	bne	r2,zero,102d1cc <___vfiprintf_internal_r+0xb28>
 102c9d0:	a880100c 	andi	r2,r21,64
 102c9d4:	1001fd26 	beq	r2,zero,102d1cc <___vfiprintf_internal_r+0xb28>
 102c9d8:	da812117 	ldw	r10,1156(sp)
 102c9dc:	002d883a 	mov	r22,zero
 102c9e0:	00800044 	movi	r2,1
 102c9e4:	5480000b 	ldhu	r18,0(r10)
 102c9e8:	52800104 	addi	r10,r10,4
 102c9ec:	da812115 	stw	r10,1156(sp)
 102c9f0:	9009883a 	mov	r4,r18
 102c9f4:	00000a06 	br	102ca20 <___vfiprintf_internal_r+0x37c>
 102c9f8:	ad400414 	ori	r21,r21,16
 102c9fc:	a880080c 	andi	r2,r21,32
 102ca00:	10011426 	beq	r2,zero,102ce54 <___vfiprintf_internal_r+0x7b0>
 102ca04:	da812117 	ldw	r10,1156(sp)
 102ca08:	0005883a 	mov	r2,zero
 102ca0c:	54800017 	ldw	r18,0(r10)
 102ca10:	55800117 	ldw	r22,4(r10)
 102ca14:	52800204 	addi	r10,r10,8
 102ca18:	da812115 	stw	r10,1156(sp)
 102ca1c:	9588b03a 	or	r4,r18,r22
 102ca20:	d8011d85 	stb	zero,1142(sp)
 102ca24:	4823883a 	mov	r17,r9
 102ca28:	0019883a 	mov	r12,zero
 102ca2c:	48000216 	blt	r9,zero,102ca38 <___vfiprintf_internal_r+0x394>
 102ca30:	00ffdfc4 	movi	r3,-129
 102ca34:	a8ea703a 	and	r21,r21,r3
 102ca38:	2002221e 	bne	r4,zero,102d2c4 <___vfiprintf_internal_r+0xc20>
 102ca3c:	4802c726 	beq	r9,zero,102d55c <___vfiprintf_internal_r+0xeb8>
 102ca40:	10803fcc 	andi	r2,r2,255
 102ca44:	00c00044 	movi	r3,1
 102ca48:	10c24426 	beq	r2,r3,102d35c <___vfiprintf_internal_r+0xcb8>
 102ca4c:	00c00084 	movi	r3,2
 102ca50:	10c2cc26 	beq	r2,r3,102d584 <___vfiprintf_internal_r+0xee0>
 102ca54:	d8c10a04 	addi	r3,sp,1064
 102ca58:	9008d0fa 	srli	r4,r18,3
 102ca5c:	b00a977a 	slli	r5,r22,29
 102ca60:	b02cd0fa 	srli	r22,r22,3
 102ca64:	948001cc 	andi	r18,r18,7
 102ca68:	90800c04 	addi	r2,r18,48
 102ca6c:	18ffffc4 	addi	r3,r3,-1
 102ca70:	2924b03a 	or	r18,r5,r4
 102ca74:	18800005 	stb	r2,0(r3)
 102ca78:	9588b03a 	or	r4,r18,r22
 102ca7c:	203ff61e 	bne	r4,zero,102ca58 <_gp+0xfffee774>
 102ca80:	a900004c 	andi	r4,r21,1
 102ca84:	d8c12415 	stw	r3,1168(sp)
 102ca88:	2002fb1e 	bne	r4,zero,102d678 <___vfiprintf_internal_r+0xfd4>
 102ca8c:	da811e17 	ldw	r10,1144(sp)
 102ca90:	50e3c83a 	sub	r17,r10,r3
 102ca94:	8825883a 	mov	r18,r17
 102ca98:	8a40010e 	bge	r17,r9,102caa0 <___vfiprintf_internal_r+0x3fc>
 102ca9c:	4825883a 	mov	r18,r9
 102caa0:	63003fcc 	andi	r12,r12,255
 102caa4:	6300201c 	xori	r12,r12,128
 102caa8:	633fe004 	addi	r12,r12,-128
 102caac:	60000126 	beq	r12,zero,102cab4 <___vfiprintf_internal_r+0x410>
 102cab0:	94800044 	addi	r18,r18,1
 102cab4:	ab80008c 	andi	r14,r21,2
 102cab8:	70000126 	beq	r14,zero,102cac0 <___vfiprintf_internal_r+0x41c>
 102cabc:	94800084 	addi	r18,r18,2
 102cac0:	ad80210c 	andi	r22,r21,132
 102cac4:	b001df1e 	bne	r22,zero,102d244 <___vfiprintf_internal_r+0xba0>
 102cac8:	9c8fc83a 	sub	r7,r19,r18
 102cacc:	01c1dd0e 	bge	zero,r7,102d244 <___vfiprintf_internal_r+0xba0>
 102cad0:	03000404 	movi	r12,16
 102cad4:	d8811c17 	ldw	r2,1136(sp)
 102cad8:	61c3920e 	bge	r12,r7,102d924 <___vfiprintf_internal_r+0x1280>
 102cadc:	028040f4 	movhi	r10,259
 102cae0:	5291bf04 	addi	r10,r10,18172
 102cae4:	dc012915 	stw	r16,1188(sp)
 102cae8:	d9811b17 	ldw	r6,1132(sp)
 102caec:	da812315 	stw	r10,1164(sp)
 102caf0:	00c001c4 	movi	r3,7
 102caf4:	da412515 	stw	r9,1172(sp)
 102caf8:	db812815 	stw	r14,1184(sp)
 102cafc:	3821883a 	mov	r16,r7
 102cb00:	00000506 	br	102cb18 <___vfiprintf_internal_r+0x474>
 102cb04:	31400084 	addi	r5,r6,2
 102cb08:	42000204 	addi	r8,r8,8
 102cb0c:	200d883a 	mov	r6,r4
 102cb10:	843ffc04 	addi	r16,r16,-16
 102cb14:	64000d0e 	bge	r12,r16,102cb4c <___vfiprintf_internal_r+0x4a8>
 102cb18:	10800404 	addi	r2,r2,16
 102cb1c:	31000044 	addi	r4,r6,1
 102cb20:	47000015 	stw	fp,0(r8)
 102cb24:	43000115 	stw	r12,4(r8)
 102cb28:	d8811c15 	stw	r2,1136(sp)
 102cb2c:	d9011b15 	stw	r4,1132(sp)
 102cb30:	193ff40e 	bge	r3,r4,102cb04 <_gp+0xfffee820>
 102cb34:	1001b51e 	bne	r2,zero,102d20c <___vfiprintf_internal_r+0xb68>
 102cb38:	843ffc04 	addi	r16,r16,-16
 102cb3c:	000d883a 	mov	r6,zero
 102cb40:	01400044 	movi	r5,1
 102cb44:	d811883a 	mov	r8,sp
 102cb48:	643ff316 	blt	r12,r16,102cb18 <_gp+0xfffee834>
 102cb4c:	800f883a 	mov	r7,r16
 102cb50:	da412517 	ldw	r9,1172(sp)
 102cb54:	db812817 	ldw	r14,1184(sp)
 102cb58:	dc012917 	ldw	r16,1188(sp)
 102cb5c:	dac12317 	ldw	r11,1164(sp)
 102cb60:	3887883a 	add	r3,r7,r2
 102cb64:	41c00115 	stw	r7,4(r8)
 102cb68:	42c00015 	stw	r11,0(r8)
 102cb6c:	d8c11c15 	stw	r3,1136(sp)
 102cb70:	d9411b15 	stw	r5,1132(sp)
 102cb74:	008001c4 	movi	r2,7
 102cb78:	11429316 	blt	r2,r5,102d5c8 <___vfiprintf_internal_r+0xf24>
 102cb7c:	d9011d87 	ldb	r4,1142(sp)
 102cb80:	42000204 	addi	r8,r8,8
 102cb84:	28800044 	addi	r2,r5,1
 102cb88:	2001b31e 	bne	r4,zero,102d258 <___vfiprintf_internal_r+0xbb4>
 102cb8c:	70000c26 	beq	r14,zero,102cbc0 <___vfiprintf_internal_r+0x51c>
 102cb90:	d9011d04 	addi	r4,sp,1140
 102cb94:	18c00084 	addi	r3,r3,2
 102cb98:	41000015 	stw	r4,0(r8)
 102cb9c:	01000084 	movi	r4,2
 102cba0:	41000115 	stw	r4,4(r8)
 102cba4:	d8c11c15 	stw	r3,1136(sp)
 102cba8:	d8811b15 	stw	r2,1132(sp)
 102cbac:	010001c4 	movi	r4,7
 102cbb0:	20826516 	blt	r4,r2,102d548 <___vfiprintf_internal_r+0xea4>
 102cbb4:	100b883a 	mov	r5,r2
 102cbb8:	42000204 	addi	r8,r8,8
 102cbbc:	10800044 	addi	r2,r2,1
 102cbc0:	01002004 	movi	r4,128
 102cbc4:	b1021a26 	beq	r22,r4,102d430 <___vfiprintf_internal_r+0xd8c>
 102cbc8:	4c6dc83a 	sub	r22,r9,r17
 102cbcc:	0580230e 	bge	zero,r22,102cc5c <___vfiprintf_internal_r+0x5b8>
 102cbd0:	01c00404 	movi	r7,16
 102cbd4:	3d83300e 	bge	r7,r22,102d898 <___vfiprintf_internal_r+0x11f4>
 102cbd8:	008040f4 	movhi	r2,259
 102cbdc:	1091bb04 	addi	r2,r2,18156
 102cbe0:	d8812315 	stw	r2,1164(sp)
 102cbe4:	030001c4 	movi	r12,7
 102cbe8:	00000506 	br	102cc00 <___vfiprintf_internal_r+0x55c>
 102cbec:	28800084 	addi	r2,r5,2
 102cbf0:	42000204 	addi	r8,r8,8
 102cbf4:	200b883a 	mov	r5,r4
 102cbf8:	b5bffc04 	addi	r22,r22,-16
 102cbfc:	3d800d0e 	bge	r7,r22,102cc34 <___vfiprintf_internal_r+0x590>
 102cc00:	18c00404 	addi	r3,r3,16
 102cc04:	29000044 	addi	r4,r5,1
 102cc08:	45c00015 	stw	r23,0(r8)
 102cc0c:	41c00115 	stw	r7,4(r8)
 102cc10:	d8c11c15 	stw	r3,1136(sp)
 102cc14:	d9011b15 	stw	r4,1132(sp)
 102cc18:	613ff40e 	bge	r12,r4,102cbec <_gp+0xfffee908>
 102cc1c:	18019b1e 	bne	r3,zero,102d28c <___vfiprintf_internal_r+0xbe8>
 102cc20:	b5bffc04 	addi	r22,r22,-16
 102cc24:	000b883a 	mov	r5,zero
 102cc28:	00800044 	movi	r2,1
 102cc2c:	d811883a 	mov	r8,sp
 102cc30:	3dbff316 	blt	r7,r22,102cc00 <_gp+0xfffee91c>
 102cc34:	da812317 	ldw	r10,1164(sp)
 102cc38:	1d87883a 	add	r3,r3,r22
 102cc3c:	45800115 	stw	r22,4(r8)
 102cc40:	42800015 	stw	r10,0(r8)
 102cc44:	d8c11c15 	stw	r3,1136(sp)
 102cc48:	d8811b15 	stw	r2,1132(sp)
 102cc4c:	010001c4 	movi	r4,7
 102cc50:	2081dd16 	blt	r4,r2,102d3c8 <___vfiprintf_internal_r+0xd24>
 102cc54:	42000204 	addi	r8,r8,8
 102cc58:	10800044 	addi	r2,r2,1
 102cc5c:	da812417 	ldw	r10,1168(sp)
 102cc60:	1c47883a 	add	r3,r3,r17
 102cc64:	44400115 	stw	r17,4(r8)
 102cc68:	42800015 	stw	r10,0(r8)
 102cc6c:	d8c11c15 	stw	r3,1136(sp)
 102cc70:	d8811b15 	stw	r2,1132(sp)
 102cc74:	010001c4 	movi	r4,7
 102cc78:	2081dc0e 	bge	r4,r2,102d3ec <___vfiprintf_internal_r+0xd48>
 102cc7c:	1802611e 	bne	r3,zero,102d604 <___vfiprintf_internal_r+0xf60>
 102cc80:	d8011b15 	stw	zero,1132(sp)
 102cc84:	aac0010c 	andi	r11,r21,4
 102cc88:	58002726 	beq	r11,zero,102cd28 <___vfiprintf_internal_r+0x684>
 102cc8c:	9ca3c83a 	sub	r17,r19,r18
 102cc90:	d811883a 	mov	r8,sp
 102cc94:	0443510e 	bge	zero,r17,102d9dc <___vfiprintf_internal_r+0x1338>
 102cc98:	01c00404 	movi	r7,16
 102cc9c:	3c43320e 	bge	r7,r17,102d968 <___vfiprintf_internal_r+0x12c4>
 102cca0:	008040f4 	movhi	r2,259
 102cca4:	1091bf04 	addi	r2,r2,18172
 102cca8:	d9011b17 	ldw	r4,1132(sp)
 102ccac:	d8812315 	stw	r2,1164(sp)
 102ccb0:	382d883a 	mov	r22,r7
 102ccb4:	054001c4 	movi	r21,7
 102ccb8:	00000506 	br	102ccd0 <___vfiprintf_internal_r+0x62c>
 102ccbc:	21400084 	addi	r5,r4,2
 102ccc0:	42000204 	addi	r8,r8,8
 102ccc4:	1009883a 	mov	r4,r2
 102ccc8:	8c7ffc04 	addi	r17,r17,-16
 102cccc:	b4400d0e 	bge	r22,r17,102cd04 <___vfiprintf_internal_r+0x660>
 102ccd0:	18c00404 	addi	r3,r3,16
 102ccd4:	20800044 	addi	r2,r4,1
 102ccd8:	47000015 	stw	fp,0(r8)
 102ccdc:	45800115 	stw	r22,4(r8)
 102cce0:	d8c11c15 	stw	r3,1136(sp)
 102cce4:	d8811b15 	stw	r2,1132(sp)
 102cce8:	a8bff40e 	bge	r21,r2,102ccbc <_gp+0xfffee9d8>
 102ccec:	1801ac1e 	bne	r3,zero,102d3a0 <___vfiprintf_internal_r+0xcfc>
 102ccf0:	8c7ffc04 	addi	r17,r17,-16
 102ccf4:	0009883a 	mov	r4,zero
 102ccf8:	01400044 	movi	r5,1
 102ccfc:	d811883a 	mov	r8,sp
 102cd00:	b47ff316 	blt	r22,r17,102ccd0 <_gp+0xfffee9ec>
 102cd04:	da812317 	ldw	r10,1164(sp)
 102cd08:	1c47883a 	add	r3,r3,r17
 102cd0c:	44400115 	stw	r17,4(r8)
 102cd10:	42800015 	stw	r10,0(r8)
 102cd14:	d8c11c15 	stw	r3,1136(sp)
 102cd18:	d9411b15 	stw	r5,1132(sp)
 102cd1c:	008001c4 	movi	r2,7
 102cd20:	1141b70e 	bge	r2,r5,102d400 <___vfiprintf_internal_r+0xd5c>
 102cd24:	1802cf1e 	bne	r3,zero,102d864 <___vfiprintf_internal_r+0x11c0>
 102cd28:	94c2ca16 	blt	r18,r19,102d854 <___vfiprintf_internal_r+0x11b0>
 102cd2c:	dac12217 	ldw	r11,1160(sp)
 102cd30:	5c97883a 	add	r11,r11,r18
 102cd34:	dac12215 	stw	r11,1160(sp)
 102cd38:	d8011b15 	stw	zero,1132(sp)
 102cd3c:	d811883a 	mov	r8,sp
 102cd40:	003e8d06 	br	102c778 <_gp+0xfffee494>
 102cd44:	d9012017 	ldw	r4,1152(sp)
 102cd48:	a00b883a 	mov	r5,r20
 102cd4c:	10262340 	call	1026234 <__swsetup_r>
 102cd50:	10002c1e 	bne	r2,zero,102ce04 <___vfiprintf_internal_r+0x760>
 102cd54:	a0c0030b 	ldhu	r3,12(r20)
 102cd58:	01000284 	movi	r4,10
 102cd5c:	1805883a 	mov	r2,r3
 102cd60:	1080068c 	andi	r2,r2,26
 102cd64:	113e731e 	bne	r2,r4,102c734 <_gp+0xfffee450>
 102cd68:	a080038b 	ldhu	r2,14(r20)
 102cd6c:	113fffcc 	andi	r4,r2,65535
 102cd70:	2120001c 	xori	r4,r4,32768
 102cd74:	21200004 	addi	r4,r4,-32768
 102cd78:	203e6e16 	blt	r4,zero,102c734 <_gp+0xfffee450>
 102cd7c:	a3001917 	ldw	r12,100(r20)
 102cd80:	a2c00717 	ldw	r11,28(r20)
 102cd84:	a2800917 	ldw	r10,36(r20)
 102cd88:	d9012017 	ldw	r4,1152(sp)
 102cd8c:	d9c12117 	ldw	r7,1156(sp)
 102cd90:	02410004 	movi	r9,1024
 102cd94:	18ffff4c 	andi	r3,r3,65533
 102cd98:	da4b883a 	add	r5,sp,r9
 102cd9c:	b00d883a 	mov	r6,r22
 102cda0:	d8c1030d 	sth	r3,1036(sp)
 102cda4:	db011915 	stw	r12,1124(sp)
 102cda8:	d881038d 	sth	r2,1038(sp)
 102cdac:	dac10715 	stw	r11,1052(sp)
 102cdb0:	da810915 	stw	r10,1060(sp)
 102cdb4:	dec10015 	stw	sp,1024(sp)
 102cdb8:	dec10415 	stw	sp,1040(sp)
 102cdbc:	da410215 	stw	r9,1032(sp)
 102cdc0:	da410515 	stw	r9,1044(sp)
 102cdc4:	d8010615 	stw	zero,1048(sp)
 102cdc8:	102c6a40 	call	102c6a4 <___vfiprintf_internal_r>
 102cdcc:	1021883a 	mov	r16,r2
 102cdd0:	10000416 	blt	r2,zero,102cde4 <___vfiprintf_internal_r+0x740>
 102cdd4:	d9012017 	ldw	r4,1152(sp)
 102cdd8:	d9410004 	addi	r5,sp,1024
 102cddc:	1027c8c0 	call	1027c8c <_fflush_r>
 102cde0:	1002fc1e 	bne	r2,zero,102d9d4 <___vfiprintf_internal_r+0x1330>
 102cde4:	d881030b 	ldhu	r2,1036(sp)
 102cde8:	1080100c 	andi	r2,r2,64
 102cdec:	10000326 	beq	r2,zero,102cdfc <___vfiprintf_internal_r+0x758>
 102cdf0:	a080030b 	ldhu	r2,12(r20)
 102cdf4:	10801014 	ori	r2,r2,64
 102cdf8:	a080030d 	sth	r2,12(r20)
 102cdfc:	8005883a 	mov	r2,r16
 102ce00:	00000106 	br	102ce08 <___vfiprintf_internal_r+0x764>
 102ce04:	00bfffc4 	movi	r2,-1
 102ce08:	dfc13517 	ldw	ra,1236(sp)
 102ce0c:	df013417 	ldw	fp,1232(sp)
 102ce10:	ddc13317 	ldw	r23,1228(sp)
 102ce14:	dd813217 	ldw	r22,1224(sp)
 102ce18:	dd413117 	ldw	r21,1220(sp)
 102ce1c:	dd013017 	ldw	r20,1216(sp)
 102ce20:	dcc12f17 	ldw	r19,1212(sp)
 102ce24:	dc812e17 	ldw	r18,1208(sp)
 102ce28:	dc412d17 	ldw	r17,1204(sp)
 102ce2c:	dc012c17 	ldw	r16,1200(sp)
 102ce30:	dec13604 	addi	sp,sp,1240
 102ce34:	f800283a 	ret
 102ce38:	10282340 	call	1028234 <__sinit>
 102ce3c:	003e2b06 	br	102c6ec <_gp+0xfffee408>
 102ce40:	04e7c83a 	sub	r19,zero,r19
 102ce44:	d8812115 	stw	r2,1156(sp)
 102ce48:	ad400114 	ori	r21,r21,4
 102ce4c:	80c00007 	ldb	r3,0(r16)
 102ce50:	003e7306 	br	102c820 <_gp+0xfffee53c>
 102ce54:	a880040c 	andi	r2,r21,16
 102ce58:	1000e41e 	bne	r2,zero,102d1ec <___vfiprintf_internal_r+0xb48>
 102ce5c:	a880100c 	andi	r2,r21,64
 102ce60:	1000e226 	beq	r2,zero,102d1ec <___vfiprintf_internal_r+0xb48>
 102ce64:	da812117 	ldw	r10,1156(sp)
 102ce68:	002d883a 	mov	r22,zero
 102ce6c:	0005883a 	mov	r2,zero
 102ce70:	5480000b 	ldhu	r18,0(r10)
 102ce74:	52800104 	addi	r10,r10,4
 102ce78:	da812115 	stw	r10,1156(sp)
 102ce7c:	9009883a 	mov	r4,r18
 102ce80:	003ee706 	br	102ca20 <_gp+0xfffee73c>
 102ce84:	da812117 	ldw	r10,1156(sp)
 102ce88:	00800044 	movi	r2,1
 102ce8c:	54800017 	ldw	r18,0(r10)
 102ce90:	55800117 	ldw	r22,4(r10)
 102ce94:	52800204 	addi	r10,r10,8
 102ce98:	da812115 	stw	r10,1156(sp)
 102ce9c:	9588b03a 	or	r4,r18,r22
 102cea0:	003edf06 	br	102ca20 <_gp+0xfffee73c>
 102cea4:	02c040f4 	movhi	r11,259
 102cea8:	5ad14504 	addi	r11,r11,17684
 102ceac:	d9811d85 	stb	r6,1142(sp)
 102ceb0:	dac12615 	stw	r11,1176(sp)
 102ceb4:	a900080c 	andi	r4,r21,32
 102ceb8:	d8812117 	ldw	r2,1156(sp)
 102cebc:	2000a526 	beq	r4,zero,102d154 <___vfiprintf_internal_r+0xab0>
 102cec0:	da812117 	ldw	r10,1156(sp)
 102cec4:	14800017 	ldw	r18,0(r2)
 102cec8:	15800117 	ldw	r22,4(r2)
 102cecc:	52800204 	addi	r10,r10,8
 102ced0:	da812115 	stw	r10,1156(sp)
 102ced4:	a880004c 	andi	r2,r21,1
 102ced8:	1001d926 	beq	r2,zero,102d640 <___vfiprintf_internal_r+0xf9c>
 102cedc:	9588b03a 	or	r4,r18,r22
 102cee0:	20024426 	beq	r4,zero,102d7f4 <___vfiprintf_internal_r+0x1150>
 102cee4:	00800c04 	movi	r2,48
 102cee8:	d8811d05 	stb	r2,1140(sp)
 102ceec:	d8c11d45 	stb	r3,1141(sp)
 102cef0:	ad400094 	ori	r21,r21,2
 102cef4:	00800084 	movi	r2,2
 102cef8:	003ec906 	br	102ca20 <_gp+0xfffee73c>
 102cefc:	da812117 	ldw	r10,1156(sp)
 102cf00:	04800044 	movi	r18,1
 102cf04:	dac10004 	addi	r11,sp,1024
 102cf08:	50800017 	ldw	r2,0(r10)
 102cf0c:	52800104 	addi	r10,r10,4
 102cf10:	d8011d85 	stb	zero,1142(sp)
 102cf14:	d8810005 	stb	r2,1024(sp)
 102cf18:	da812115 	stw	r10,1156(sp)
 102cf1c:	9023883a 	mov	r17,r18
 102cf20:	dac12415 	stw	r11,1168(sp)
 102cf24:	0013883a 	mov	r9,zero
 102cf28:	003ee206 	br	102cab4 <_gp+0xfffee7d0>
 102cf2c:	ad402014 	ori	r21,r21,128
 102cf30:	80c00007 	ldb	r3,0(r16)
 102cf34:	003e3a06 	br	102c820 <_gp+0xfffee53c>
 102cf38:	8015883a 	mov	r10,r16
 102cf3c:	0027883a 	mov	r19,zero
 102cf40:	18bff404 	addi	r2,r3,-48
 102cf44:	50c00007 	ldb	r3,0(r10)
 102cf48:	9cc002a4 	muli	r19,r19,10
 102cf4c:	84000044 	addi	r16,r16,1
 102cf50:	8015883a 	mov	r10,r16
 102cf54:	98a7883a 	add	r19,r19,r2
 102cf58:	18bff404 	addi	r2,r3,-48
 102cf5c:	28bff92e 	bgeu	r5,r2,102cf44 <_gp+0xfffeec60>
 102cf60:	003e3006 	br	102c824 <_gp+0xfffee540>
 102cf64:	ad400414 	ori	r21,r21,16
 102cf68:	d9811d85 	stb	r6,1142(sp)
 102cf6c:	a880080c 	andi	r2,r21,32
 102cf70:	d8c12117 	ldw	r3,1156(sp)
 102cf74:	10004b26 	beq	r2,zero,102d0a4 <___vfiprintf_internal_r+0xa00>
 102cf78:	da812117 	ldw	r10,1156(sp)
 102cf7c:	18800117 	ldw	r2,4(r3)
 102cf80:	1c800017 	ldw	r18,0(r3)
 102cf84:	52800204 	addi	r10,r10,8
 102cf88:	da812115 	stw	r10,1156(sp)
 102cf8c:	102d883a 	mov	r22,r2
 102cf90:	1001f116 	blt	r2,zero,102d758 <___vfiprintf_internal_r+0x10b4>
 102cf94:	db011d83 	ldbu	r12,1142(sp)
 102cf98:	4823883a 	mov	r17,r9
 102cf9c:	00800044 	movi	r2,1
 102cfa0:	9588b03a 	or	r4,r18,r22
 102cfa4:	003ea106 	br	102ca2c <_gp+0xfffee748>
 102cfa8:	80c00007 	ldb	r3,0(r16)
 102cfac:	82800044 	addi	r10,r16,1
 102cfb0:	1b027f26 	beq	r3,r12,102d9b0 <___vfiprintf_internal_r+0x130c>
 102cfb4:	18bff404 	addi	r2,r3,-48
 102cfb8:	5021883a 	mov	r16,r10
 102cfbc:	0013883a 	mov	r9,zero
 102cfc0:	28be1836 	bltu	r5,r2,102c824 <_gp+0xfffee540>
 102cfc4:	80c00007 	ldb	r3,0(r16)
 102cfc8:	4a4002a4 	muli	r9,r9,10
 102cfcc:	84000044 	addi	r16,r16,1
 102cfd0:	1253883a 	add	r9,r2,r9
 102cfd4:	18bff404 	addi	r2,r3,-48
 102cfd8:	28bffa2e 	bgeu	r5,r2,102cfc4 <_gp+0xfffeece0>
 102cfdc:	483e110e 	bge	r9,zero,102c824 <_gp+0xfffee540>
 102cfe0:	027fffc4 	movi	r9,-1
 102cfe4:	003e0f06 	br	102c824 <_gp+0xfffee540>
 102cfe8:	d9811d85 	stb	r6,1142(sp)
 102cfec:	a880080c 	andi	r2,r21,32
 102cff0:	1001ee26 	beq	r2,zero,102d7ac <___vfiprintf_internal_r+0x1108>
 102cff4:	da812117 	ldw	r10,1156(sp)
 102cff8:	dac12217 	ldw	r11,1160(sp)
 102cffc:	50800017 	ldw	r2,0(r10)
 102d000:	5807d7fa 	srai	r3,r11,31
 102d004:	52800104 	addi	r10,r10,4
 102d008:	da812115 	stw	r10,1156(sp)
 102d00c:	12c00015 	stw	r11,0(r2)
 102d010:	10c00115 	stw	r3,4(r2)
 102d014:	003dd806 	br	102c778 <_gp+0xfffee494>
 102d018:	30803fcc 	andi	r2,r6,255
 102d01c:	1080201c 	xori	r2,r2,128
 102d020:	10bfe004 	addi	r2,r2,-128
 102d024:	1001df1e 	bne	r2,zero,102d7a4 <___vfiprintf_internal_r+0x1100>
 102d028:	01800804 	movi	r6,32
 102d02c:	80c00007 	ldb	r3,0(r16)
 102d030:	003dfb06 	br	102c820 <_gp+0xfffee53c>
 102d034:	da812117 	ldw	r10,1156(sp)
 102d038:	dac12117 	ldw	r11,1156(sp)
 102d03c:	d8011d85 	stb	zero,1142(sp)
 102d040:	52800017 	ldw	r10,0(r10)
 102d044:	5d800104 	addi	r22,r11,4
 102d048:	da812415 	stw	r10,1168(sp)
 102d04c:	50023b26 	beq	r10,zero,102d93c <___vfiprintf_internal_r+0x1298>
 102d050:	d9012417 	ldw	r4,1168(sp)
 102d054:	48021f16 	blt	r9,zero,102d8d4 <___vfiprintf_internal_r+0x1230>
 102d058:	480d883a 	mov	r6,r9
 102d05c:	000b883a 	mov	r5,zero
 102d060:	da012a15 	stw	r8,1192(sp)
 102d064:	da412b15 	stw	r9,1196(sp)
 102d068:	10296ec0 	call	10296ec <memchr>
 102d06c:	da012a17 	ldw	r8,1192(sp)
 102d070:	da412b17 	ldw	r9,1196(sp)
 102d074:	10024726 	beq	r2,zero,102d994 <___vfiprintf_internal_r+0x12f0>
 102d078:	d8c12417 	ldw	r3,1168(sp)
 102d07c:	10e3c83a 	sub	r17,r2,r3
 102d080:	4c41f616 	blt	r9,r17,102d85c <___vfiprintf_internal_r+0x11b8>
 102d084:	db011d83 	ldbu	r12,1142(sp)
 102d088:	dd812115 	stw	r22,1156(sp)
 102d08c:	0013883a 	mov	r9,zero
 102d090:	003e8006 	br	102ca94 <_gp+0xfffee7b0>
 102d094:	d9811d85 	stb	r6,1142(sp)
 102d098:	a880080c 	andi	r2,r21,32
 102d09c:	d8c12117 	ldw	r3,1156(sp)
 102d0a0:	103fb51e 	bne	r2,zero,102cf78 <_gp+0xfffeec94>
 102d0a4:	a880040c 	andi	r2,r21,16
 102d0a8:	10015e1e 	bne	r2,zero,102d624 <___vfiprintf_internal_r+0xf80>
 102d0ac:	a880100c 	andi	r2,r21,64
 102d0b0:	10015c26 	beq	r2,zero,102d624 <___vfiprintf_internal_r+0xf80>
 102d0b4:	1c80000f 	ldh	r18,0(r3)
 102d0b8:	da812117 	ldw	r10,1156(sp)
 102d0bc:	902dd7fa 	srai	r22,r18,31
 102d0c0:	52800104 	addi	r10,r10,4
 102d0c4:	da812115 	stw	r10,1156(sp)
 102d0c8:	b005883a 	mov	r2,r22
 102d0cc:	003fb006 	br	102cf90 <_gp+0xfffeecac>
 102d0d0:	da812117 	ldw	r10,1156(sp)
 102d0d4:	00800c04 	movi	r2,48
 102d0d8:	02c040f4 	movhi	r11,259
 102d0dc:	54800017 	ldw	r18,0(r10)
 102d0e0:	d8811d05 	stb	r2,1140(sp)
 102d0e4:	52800104 	addi	r10,r10,4
 102d0e8:	00801e04 	movi	r2,120
 102d0ec:	5ad14a04 	addi	r11,r11,17704
 102d0f0:	d8811d45 	stb	r2,1141(sp)
 102d0f4:	002d883a 	mov	r22,zero
 102d0f8:	ad400094 	ori	r21,r21,2
 102d0fc:	da812115 	stw	r10,1156(sp)
 102d100:	dac12615 	stw	r11,1176(sp)
 102d104:	00800084 	movi	r2,2
 102d108:	9009883a 	mov	r4,r18
 102d10c:	003e4406 	br	102ca20 <_gp+0xfffee73c>
 102d110:	ad400814 	ori	r21,r21,32
 102d114:	80c00007 	ldb	r3,0(r16)
 102d118:	003dc106 	br	102c820 <_gp+0xfffee53c>
 102d11c:	ad401014 	ori	r21,r21,64
 102d120:	80c00007 	ldb	r3,0(r16)
 102d124:	003dbe06 	br	102c820 <_gp+0xfffee53c>
 102d128:	80c00007 	ldb	r3,0(r16)
 102d12c:	19c1de26 	beq	r3,r7,102d8a8 <___vfiprintf_internal_r+0x1204>
 102d130:	ad400414 	ori	r21,r21,16
 102d134:	003dba06 	br	102c820 <_gp+0xfffee53c>
 102d138:	008040f4 	movhi	r2,259
 102d13c:	10914a04 	addi	r2,r2,17704
 102d140:	d8812615 	stw	r2,1176(sp)
 102d144:	d9811d85 	stb	r6,1142(sp)
 102d148:	a900080c 	andi	r4,r21,32
 102d14c:	d8812117 	ldw	r2,1156(sp)
 102d150:	203f5b1e 	bne	r4,zero,102cec0 <_gp+0xfffeebdc>
 102d154:	a900040c 	andi	r4,r21,16
 102d158:	2001a826 	beq	r4,zero,102d7fc <___vfiprintf_internal_r+0x1158>
 102d15c:	dac12117 	ldw	r11,1156(sp)
 102d160:	14800017 	ldw	r18,0(r2)
 102d164:	002d883a 	mov	r22,zero
 102d168:	5ac00104 	addi	r11,r11,4
 102d16c:	dac12115 	stw	r11,1156(sp)
 102d170:	003f5806 	br	102ced4 <_gp+0xfffeebf0>
 102d174:	da812117 	ldw	r10,1156(sp)
 102d178:	54c00017 	ldw	r19,0(r10)
 102d17c:	50800104 	addi	r2,r10,4
 102d180:	983f2f16 	blt	r19,zero,102ce40 <_gp+0xfffeeb5c>
 102d184:	d8812115 	stw	r2,1156(sp)
 102d188:	80c00007 	ldb	r3,0(r16)
 102d18c:	003da406 	br	102c820 <_gp+0xfffee53c>
 102d190:	01800ac4 	movi	r6,43
 102d194:	80c00007 	ldb	r3,0(r16)
 102d198:	003da106 	br	102c820 <_gp+0xfffee53c>
 102d19c:	ad400054 	ori	r21,r21,1
 102d1a0:	80c00007 	ldb	r3,0(r16)
 102d1a4:	003d9e06 	br	102c820 <_gp+0xfffee53c>
 102d1a8:	d9811d85 	stb	r6,1142(sp)
 102d1ac:	18007126 	beq	r3,zero,102d374 <___vfiprintf_internal_r+0xcd0>
 102d1b0:	04800044 	movi	r18,1
 102d1b4:	d8c10005 	stb	r3,1024(sp)
 102d1b8:	d8c10004 	addi	r3,sp,1024
 102d1bc:	d8011d85 	stb	zero,1142(sp)
 102d1c0:	9023883a 	mov	r17,r18
 102d1c4:	d8c12415 	stw	r3,1168(sp)
 102d1c8:	003f5606 	br	102cf24 <_gp+0xfffeec40>
 102d1cc:	dac12117 	ldw	r11,1156(sp)
 102d1d0:	002d883a 	mov	r22,zero
 102d1d4:	00800044 	movi	r2,1
 102d1d8:	5c800017 	ldw	r18,0(r11)
 102d1dc:	5ac00104 	addi	r11,r11,4
 102d1e0:	dac12115 	stw	r11,1156(sp)
 102d1e4:	9009883a 	mov	r4,r18
 102d1e8:	003e0d06 	br	102ca20 <_gp+0xfffee73c>
 102d1ec:	dac12117 	ldw	r11,1156(sp)
 102d1f0:	002d883a 	mov	r22,zero
 102d1f4:	0005883a 	mov	r2,zero
 102d1f8:	5c800017 	ldw	r18,0(r11)
 102d1fc:	5ac00104 	addi	r11,r11,4
 102d200:	dac12115 	stw	r11,1156(sp)
 102d204:	9009883a 	mov	r4,r18
 102d208:	003e0506 	br	102ca20 <_gp+0xfffee73c>
 102d20c:	d9012017 	ldw	r4,1152(sp)
 102d210:	a00b883a 	mov	r5,r20
 102d214:	d9811a04 	addi	r6,sp,1128
 102d218:	d8c12a15 	stw	r3,1192(sp)
 102d21c:	db012b15 	stw	r12,1196(sp)
 102d220:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d224:	d8c12a17 	ldw	r3,1192(sp)
 102d228:	db012b17 	ldw	r12,1196(sp)
 102d22c:	1000571e 	bne	r2,zero,102d38c <___vfiprintf_internal_r+0xce8>
 102d230:	d9811b17 	ldw	r6,1132(sp)
 102d234:	d8811c17 	ldw	r2,1136(sp)
 102d238:	d811883a 	mov	r8,sp
 102d23c:	31400044 	addi	r5,r6,1
 102d240:	003e3306 	br	102cb10 <_gp+0xfffee82c>
 102d244:	d9411b17 	ldw	r5,1132(sp)
 102d248:	d8c11c17 	ldw	r3,1136(sp)
 102d24c:	28800044 	addi	r2,r5,1
 102d250:	d9011d87 	ldb	r4,1142(sp)
 102d254:	203e4d26 	beq	r4,zero,102cb8c <_gp+0xfffee8a8>
 102d258:	01000044 	movi	r4,1
 102d25c:	d9411d84 	addi	r5,sp,1142
 102d260:	1907883a 	add	r3,r3,r4
 102d264:	41400015 	stw	r5,0(r8)
 102d268:	41000115 	stw	r4,4(r8)
 102d26c:	d8c11c15 	stw	r3,1136(sp)
 102d270:	d8811b15 	stw	r2,1132(sp)
 102d274:	014001c4 	movi	r5,7
 102d278:	2880aa16 	blt	r5,r2,102d524 <___vfiprintf_internal_r+0xe80>
 102d27c:	100b883a 	mov	r5,r2
 102d280:	42000204 	addi	r8,r8,8
 102d284:	10800044 	addi	r2,r2,1
 102d288:	003e4006 	br	102cb8c <_gp+0xfffee8a8>
 102d28c:	d9012017 	ldw	r4,1152(sp)
 102d290:	a00b883a 	mov	r5,r20
 102d294:	d9811a04 	addi	r6,sp,1128
 102d298:	d9c12a15 	stw	r7,1192(sp)
 102d29c:	db012b15 	stw	r12,1196(sp)
 102d2a0:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d2a4:	d9c12a17 	ldw	r7,1192(sp)
 102d2a8:	db012b17 	ldw	r12,1196(sp)
 102d2ac:	1000371e 	bne	r2,zero,102d38c <___vfiprintf_internal_r+0xce8>
 102d2b0:	d9411b17 	ldw	r5,1132(sp)
 102d2b4:	d8c11c17 	ldw	r3,1136(sp)
 102d2b8:	d811883a 	mov	r8,sp
 102d2bc:	28800044 	addi	r2,r5,1
 102d2c0:	003e4d06 	br	102cbf8 <_gp+0xfffee914>
 102d2c4:	10803fcc 	andi	r2,r2,255
 102d2c8:	00c00044 	movi	r3,1
 102d2cc:	10fddf1e 	bne	r2,r3,102ca4c <_gp+0xfffee768>
 102d2d0:	b000021e 	bne	r22,zero,102d2dc <___vfiprintf_internal_r+0xc38>
 102d2d4:	00800244 	movi	r2,9
 102d2d8:	1480202e 	bgeu	r2,r18,102d35c <___vfiprintf_internal_r+0xcb8>
 102d2dc:	dc012515 	stw	r16,1172(sp)
 102d2e0:	dc410a04 	addi	r17,sp,1064
 102d2e4:	9021883a 	mov	r16,r18
 102d2e8:	da012415 	stw	r8,1168(sp)
 102d2ec:	b025883a 	mov	r18,r22
 102d2f0:	da412315 	stw	r9,1164(sp)
 102d2f4:	602d883a 	mov	r22,r12
 102d2f8:	8009883a 	mov	r4,r16
 102d2fc:	900b883a 	mov	r5,r18
 102d300:	01800284 	movi	r6,10
 102d304:	000f883a 	mov	r7,zero
 102d308:	102e91c0 	call	102e91c <__umoddi3>
 102d30c:	10800c04 	addi	r2,r2,48
 102d310:	8c7fffc4 	addi	r17,r17,-1
 102d314:	8009883a 	mov	r4,r16
 102d318:	900b883a 	mov	r5,r18
 102d31c:	01800284 	movi	r6,10
 102d320:	000f883a 	mov	r7,zero
 102d324:	88800005 	stb	r2,0(r17)
 102d328:	102e35c0 	call	102e35c <__udivdi3>
 102d32c:	1021883a 	mov	r16,r2
 102d330:	10c4b03a 	or	r2,r2,r3
 102d334:	1825883a 	mov	r18,r3
 102d338:	103fef1e 	bne	r2,zero,102d2f8 <_gp+0xfffef014>
 102d33c:	da811e17 	ldw	r10,1144(sp)
 102d340:	da012417 	ldw	r8,1168(sp)
 102d344:	da412317 	ldw	r9,1164(sp)
 102d348:	dc412415 	stw	r17,1168(sp)
 102d34c:	b019883a 	mov	r12,r22
 102d350:	dc012517 	ldw	r16,1172(sp)
 102d354:	5463c83a 	sub	r17,r10,r17
 102d358:	003dce06 	br	102ca94 <_gp+0xfffee7b0>
 102d35c:	94800c04 	addi	r18,r18,48
 102d360:	d8c109c4 	addi	r3,sp,1063
 102d364:	dc8109c5 	stb	r18,1063(sp)
 102d368:	dc412717 	ldw	r17,1180(sp)
 102d36c:	d8c12415 	stw	r3,1168(sp)
 102d370:	003dc806 	br	102ca94 <_gp+0xfffee7b0>
 102d374:	d8811c17 	ldw	r2,1136(sp)
 102d378:	10000426 	beq	r2,zero,102d38c <___vfiprintf_internal_r+0xce8>
 102d37c:	d9012017 	ldw	r4,1152(sp)
 102d380:	a00b883a 	mov	r5,r20
 102d384:	d9811a04 	addi	r6,sp,1128
 102d388:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d38c:	a080030b 	ldhu	r2,12(r20)
 102d390:	1080100c 	andi	r2,r2,64
 102d394:	103e9b1e 	bne	r2,zero,102ce04 <_gp+0xfffeeb20>
 102d398:	d8812217 	ldw	r2,1160(sp)
 102d39c:	003e9a06 	br	102ce08 <_gp+0xfffeeb24>
 102d3a0:	d9012017 	ldw	r4,1152(sp)
 102d3a4:	a00b883a 	mov	r5,r20
 102d3a8:	d9811a04 	addi	r6,sp,1128
 102d3ac:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d3b0:	103ff61e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d3b4:	d9011b17 	ldw	r4,1132(sp)
 102d3b8:	d8c11c17 	ldw	r3,1136(sp)
 102d3bc:	d811883a 	mov	r8,sp
 102d3c0:	21400044 	addi	r5,r4,1
 102d3c4:	003e4006 	br	102ccc8 <_gp+0xfffee9e4>
 102d3c8:	1800d61e 	bne	r3,zero,102d724 <___vfiprintf_internal_r+0x1080>
 102d3cc:	dac12417 	ldw	r11,1168(sp)
 102d3d0:	00800044 	movi	r2,1
 102d3d4:	dc400115 	stw	r17,4(sp)
 102d3d8:	dac00015 	stw	r11,0(sp)
 102d3dc:	dc411c15 	stw	r17,1136(sp)
 102d3e0:	d8811b15 	stw	r2,1132(sp)
 102d3e4:	8807883a 	mov	r3,r17
 102d3e8:	d811883a 	mov	r8,sp
 102d3ec:	42000204 	addi	r8,r8,8
 102d3f0:	aac0010c 	andi	r11,r21,4
 102d3f4:	58000226 	beq	r11,zero,102d400 <___vfiprintf_internal_r+0xd5c>
 102d3f8:	9ca3c83a 	sub	r17,r19,r18
 102d3fc:	047e2616 	blt	zero,r17,102cc98 <_gp+0xfffee9b4>
 102d400:	94c0010e 	bge	r18,r19,102d408 <___vfiprintf_internal_r+0xd64>
 102d404:	9825883a 	mov	r18,r19
 102d408:	da812217 	ldw	r10,1160(sp)
 102d40c:	5495883a 	add	r10,r10,r18
 102d410:	da812215 	stw	r10,1160(sp)
 102d414:	183e4826 	beq	r3,zero,102cd38 <_gp+0xfffeea54>
 102d418:	d9012017 	ldw	r4,1152(sp)
 102d41c:	a00b883a 	mov	r5,r20
 102d420:	d9811a04 	addi	r6,sp,1128
 102d424:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d428:	103e4326 	beq	r2,zero,102cd38 <_gp+0xfffeea54>
 102d42c:	003fd706 	br	102d38c <_gp+0xfffef0a8>
 102d430:	9cadc83a 	sub	r22,r19,r18
 102d434:	05bde40e 	bge	zero,r22,102cbc8 <_gp+0xfffee8e4>
 102d438:	03000404 	movi	r12,16
 102d43c:	6581500e 	bge	r12,r22,102d980 <___vfiprintf_internal_r+0x12dc>
 102d440:	008040f4 	movhi	r2,259
 102d444:	1091bb04 	addi	r2,r2,18156
 102d448:	d8812315 	stw	r2,1164(sp)
 102d44c:	8005883a 	mov	r2,r16
 102d450:	038001c4 	movi	r14,7
 102d454:	b021883a 	mov	r16,r22
 102d458:	da412515 	stw	r9,1172(sp)
 102d45c:	102d883a 	mov	r22,r2
 102d460:	00000506 	br	102d478 <___vfiprintf_internal_r+0xdd4>
 102d464:	29000084 	addi	r4,r5,2
 102d468:	42000204 	addi	r8,r8,8
 102d46c:	100b883a 	mov	r5,r2
 102d470:	843ffc04 	addi	r16,r16,-16
 102d474:	64000d0e 	bge	r12,r16,102d4ac <___vfiprintf_internal_r+0xe08>
 102d478:	18c00404 	addi	r3,r3,16
 102d47c:	28800044 	addi	r2,r5,1
 102d480:	45c00015 	stw	r23,0(r8)
 102d484:	43000115 	stw	r12,4(r8)
 102d488:	d8c11c15 	stw	r3,1136(sp)
 102d48c:	d8811b15 	stw	r2,1132(sp)
 102d490:	70bff40e 	bge	r14,r2,102d464 <_gp+0xfffef180>
 102d494:	1800151e 	bne	r3,zero,102d4ec <___vfiprintf_internal_r+0xe48>
 102d498:	843ffc04 	addi	r16,r16,-16
 102d49c:	000b883a 	mov	r5,zero
 102d4a0:	01000044 	movi	r4,1
 102d4a4:	d811883a 	mov	r8,sp
 102d4a8:	643ff316 	blt	r12,r16,102d478 <_gp+0xfffef194>
 102d4ac:	da412517 	ldw	r9,1172(sp)
 102d4b0:	b005883a 	mov	r2,r22
 102d4b4:	802d883a 	mov	r22,r16
 102d4b8:	1021883a 	mov	r16,r2
 102d4bc:	da812317 	ldw	r10,1164(sp)
 102d4c0:	1d87883a 	add	r3,r3,r22
 102d4c4:	45800115 	stw	r22,4(r8)
 102d4c8:	42800015 	stw	r10,0(r8)
 102d4cc:	d8c11c15 	stw	r3,1136(sp)
 102d4d0:	d9011b15 	stw	r4,1132(sp)
 102d4d4:	008001c4 	movi	r2,7
 102d4d8:	11008d16 	blt	r2,r4,102d710 <___vfiprintf_internal_r+0x106c>
 102d4dc:	42000204 	addi	r8,r8,8
 102d4e0:	20800044 	addi	r2,r4,1
 102d4e4:	200b883a 	mov	r5,r4
 102d4e8:	003db706 	br	102cbc8 <_gp+0xfffee8e4>
 102d4ec:	d9012017 	ldw	r4,1152(sp)
 102d4f0:	a00b883a 	mov	r5,r20
 102d4f4:	d9811a04 	addi	r6,sp,1128
 102d4f8:	db012b15 	stw	r12,1196(sp)
 102d4fc:	db812a15 	stw	r14,1192(sp)
 102d500:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d504:	db012b17 	ldw	r12,1196(sp)
 102d508:	db812a17 	ldw	r14,1192(sp)
 102d50c:	103f9f1e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d510:	d9411b17 	ldw	r5,1132(sp)
 102d514:	d8c11c17 	ldw	r3,1136(sp)
 102d518:	d811883a 	mov	r8,sp
 102d51c:	29000044 	addi	r4,r5,1
 102d520:	003fd306 	br	102d470 <_gp+0xfffef18c>
 102d524:	18006c1e 	bne	r3,zero,102d6d8 <___vfiprintf_internal_r+0x1034>
 102d528:	70004f26 	beq	r14,zero,102d668 <___vfiprintf_internal_r+0xfc4>
 102d52c:	d8811d04 	addi	r2,sp,1140
 102d530:	00c00084 	movi	r3,2
 102d534:	d8800015 	stw	r2,0(sp)
 102d538:	d8c00115 	stw	r3,4(sp)
 102d53c:	2005883a 	mov	r2,r4
 102d540:	d811883a 	mov	r8,sp
 102d544:	003d9b06 	br	102cbb4 <_gp+0xfffee8d0>
 102d548:	1800571e 	bne	r3,zero,102d6a8 <___vfiprintf_internal_r+0x1004>
 102d54c:	000b883a 	mov	r5,zero
 102d550:	00800044 	movi	r2,1
 102d554:	d811883a 	mov	r8,sp
 102d558:	003d9906 	br	102cbc0 <_gp+0xfffee8dc>
 102d55c:	10803fcc 	andi	r2,r2,255
 102d560:	1000251e 	bne	r2,zero,102d5f8 <___vfiprintf_internal_r+0xf54>
 102d564:	a880004c 	andi	r2,r21,1
 102d568:	10007826 	beq	r2,zero,102d74c <___vfiprintf_internal_r+0x10a8>
 102d56c:	00800c04 	movi	r2,48
 102d570:	d8c109c4 	addi	r3,sp,1063
 102d574:	d88109c5 	stb	r2,1063(sp)
 102d578:	dc412717 	ldw	r17,1180(sp)
 102d57c:	d8c12415 	stw	r3,1168(sp)
 102d580:	003d4406 	br	102ca94 <_gp+0xfffee7b0>
 102d584:	d9012617 	ldw	r4,1176(sp)
 102d588:	dc410a04 	addi	r17,sp,1064
 102d58c:	908003cc 	andi	r2,r18,15
 102d590:	b006973a 	slli	r3,r22,28
 102d594:	2085883a 	add	r2,r4,r2
 102d598:	9024d13a 	srli	r18,r18,4
 102d59c:	10800003 	ldbu	r2,0(r2)
 102d5a0:	b02cd13a 	srli	r22,r22,4
 102d5a4:	8c7fffc4 	addi	r17,r17,-1
 102d5a8:	1ca4b03a 	or	r18,r3,r18
 102d5ac:	88800005 	stb	r2,0(r17)
 102d5b0:	9584b03a 	or	r2,r18,r22
 102d5b4:	103ff51e 	bne	r2,zero,102d58c <_gp+0xfffef2a8>
 102d5b8:	dac11e17 	ldw	r11,1144(sp)
 102d5bc:	dc412415 	stw	r17,1168(sp)
 102d5c0:	5c63c83a 	sub	r17,r11,r17
 102d5c4:	003d3306 	br	102ca94 <_gp+0xfffee7b0>
 102d5c8:	1800941e 	bne	r3,zero,102d81c <___vfiprintf_internal_r+0x1178>
 102d5cc:	d8811d87 	ldb	r2,1142(sp)
 102d5d0:	10006b26 	beq	r2,zero,102d780 <___vfiprintf_internal_r+0x10dc>
 102d5d4:	00c00044 	movi	r3,1
 102d5d8:	d9011d84 	addi	r4,sp,1142
 102d5dc:	1805883a 	mov	r2,r3
 102d5e0:	d9000015 	stw	r4,0(sp)
 102d5e4:	d8c00115 	stw	r3,4(sp)
 102d5e8:	d811883a 	mov	r8,sp
 102d5ec:	003f2306 	br	102d27c <_gp+0xfffeef98>
 102d5f0:	8023883a 	mov	r17,r16
 102d5f4:	003c7d06 	br	102c7ec <_gp+0xfffee508>
 102d5f8:	da810a04 	addi	r10,sp,1064
 102d5fc:	da812415 	stw	r10,1168(sp)
 102d600:	003d2406 	br	102ca94 <_gp+0xfffee7b0>
 102d604:	d9012017 	ldw	r4,1152(sp)
 102d608:	a00b883a 	mov	r5,r20
 102d60c:	d9811a04 	addi	r6,sp,1128
 102d610:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d614:	103f5d1e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d618:	d8c11c17 	ldw	r3,1136(sp)
 102d61c:	d811883a 	mov	r8,sp
 102d620:	003f7306 	br	102d3f0 <_gp+0xfffef10c>
 102d624:	1c800017 	ldw	r18,0(r3)
 102d628:	dac12117 	ldw	r11,1156(sp)
 102d62c:	902dd7fa 	srai	r22,r18,31
 102d630:	5ac00104 	addi	r11,r11,4
 102d634:	dac12115 	stw	r11,1156(sp)
 102d638:	b005883a 	mov	r2,r22
 102d63c:	003e5406 	br	102cf90 <_gp+0xfffeecac>
 102d640:	00800084 	movi	r2,2
 102d644:	9588b03a 	or	r4,r18,r22
 102d648:	003cf506 	br	102ca20 <_gp+0xfffee73c>
 102d64c:	d9012017 	ldw	r4,1152(sp)
 102d650:	a00b883a 	mov	r5,r20
 102d654:	d9811a04 	addi	r6,sp,1128
 102d658:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d65c:	103f4b1e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d660:	d811883a 	mov	r8,sp
 102d664:	003cd106 	br	102c9ac <_gp+0xfffee6c8>
 102d668:	000b883a 	mov	r5,zero
 102d66c:	2005883a 	mov	r2,r4
 102d670:	d811883a 	mov	r8,sp
 102d674:	003d5206 	br	102cbc0 <_gp+0xfffee8dc>
 102d678:	10803fcc 	andi	r2,r2,255
 102d67c:	1080201c 	xori	r2,r2,128
 102d680:	10bfe004 	addi	r2,r2,-128
 102d684:	01000c04 	movi	r4,48
 102d688:	11008e26 	beq	r2,r4,102d8c4 <___vfiprintf_internal_r+0x1220>
 102d68c:	da812417 	ldw	r10,1168(sp)
 102d690:	dac11e17 	ldw	r11,1144(sp)
 102d694:	193fffc5 	stb	r4,-1(r3)
 102d698:	52bfffc4 	addi	r10,r10,-1
 102d69c:	da812415 	stw	r10,1168(sp)
 102d6a0:	5aa3c83a 	sub	r17,r11,r10
 102d6a4:	003cfb06 	br	102ca94 <_gp+0xfffee7b0>
 102d6a8:	d9012017 	ldw	r4,1152(sp)
 102d6ac:	a00b883a 	mov	r5,r20
 102d6b0:	d9811a04 	addi	r6,sp,1128
 102d6b4:	da412b15 	stw	r9,1196(sp)
 102d6b8:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d6bc:	da412b17 	ldw	r9,1196(sp)
 102d6c0:	103f321e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d6c4:	d9411b17 	ldw	r5,1132(sp)
 102d6c8:	d8c11c17 	ldw	r3,1136(sp)
 102d6cc:	d811883a 	mov	r8,sp
 102d6d0:	28800044 	addi	r2,r5,1
 102d6d4:	003d3a06 	br	102cbc0 <_gp+0xfffee8dc>
 102d6d8:	d9012017 	ldw	r4,1152(sp)
 102d6dc:	a00b883a 	mov	r5,r20
 102d6e0:	d9811a04 	addi	r6,sp,1128
 102d6e4:	da412b15 	stw	r9,1196(sp)
 102d6e8:	db812a15 	stw	r14,1192(sp)
 102d6ec:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d6f0:	da412b17 	ldw	r9,1196(sp)
 102d6f4:	db812a17 	ldw	r14,1192(sp)
 102d6f8:	103f241e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d6fc:	d9411b17 	ldw	r5,1132(sp)
 102d700:	d8c11c17 	ldw	r3,1136(sp)
 102d704:	d811883a 	mov	r8,sp
 102d708:	28800044 	addi	r2,r5,1
 102d70c:	003d1f06 	br	102cb8c <_gp+0xfffee8a8>
 102d710:	1800781e 	bne	r3,zero,102d8f4 <___vfiprintf_internal_r+0x1250>
 102d714:	000b883a 	mov	r5,zero
 102d718:	00800044 	movi	r2,1
 102d71c:	d811883a 	mov	r8,sp
 102d720:	003d2906 	br	102cbc8 <_gp+0xfffee8e4>
 102d724:	d9012017 	ldw	r4,1152(sp)
 102d728:	a00b883a 	mov	r5,r20
 102d72c:	d9811a04 	addi	r6,sp,1128
 102d730:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d734:	103f151e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d738:	d8811b17 	ldw	r2,1132(sp)
 102d73c:	d8c11c17 	ldw	r3,1136(sp)
 102d740:	d811883a 	mov	r8,sp
 102d744:	10800044 	addi	r2,r2,1
 102d748:	003d4406 	br	102cc5c <_gp+0xfffee978>
 102d74c:	dac10a04 	addi	r11,sp,1064
 102d750:	dac12415 	stw	r11,1168(sp)
 102d754:	003ccf06 	br	102ca94 <_gp+0xfffee7b0>
 102d758:	04a5c83a 	sub	r18,zero,r18
 102d75c:	9004c03a 	cmpne	r2,r18,zero
 102d760:	05adc83a 	sub	r22,zero,r22
 102d764:	b0adc83a 	sub	r22,r22,r2
 102d768:	03000b44 	movi	r12,45
 102d76c:	db011d85 	stb	r12,1142(sp)
 102d770:	4823883a 	mov	r17,r9
 102d774:	00800044 	movi	r2,1
 102d778:	9588b03a 	or	r4,r18,r22
 102d77c:	003cab06 	br	102ca2c <_gp+0xfffee748>
 102d780:	000b883a 	mov	r5,zero
 102d784:	00800044 	movi	r2,1
 102d788:	d811883a 	mov	r8,sp
 102d78c:	703d0c26 	beq	r14,zero,102cbc0 <_gp+0xfffee8dc>
 102d790:	00c00084 	movi	r3,2
 102d794:	d9011d04 	addi	r4,sp,1140
 102d798:	d9000015 	stw	r4,0(sp)
 102d79c:	d8c00115 	stw	r3,4(sp)
 102d7a0:	003d0406 	br	102cbb4 <_gp+0xfffee8d0>
 102d7a4:	80c00007 	ldb	r3,0(r16)
 102d7a8:	003c1d06 	br	102c820 <_gp+0xfffee53c>
 102d7ac:	a880040c 	andi	r2,r21,16
 102d7b0:	1000091e 	bne	r2,zero,102d7d8 <___vfiprintf_internal_r+0x1134>
 102d7b4:	aac0100c 	andi	r11,r21,64
 102d7b8:	58000726 	beq	r11,zero,102d7d8 <___vfiprintf_internal_r+0x1134>
 102d7bc:	da812117 	ldw	r10,1156(sp)
 102d7c0:	dac12217 	ldw	r11,1160(sp)
 102d7c4:	50800017 	ldw	r2,0(r10)
 102d7c8:	52800104 	addi	r10,r10,4
 102d7cc:	da812115 	stw	r10,1156(sp)
 102d7d0:	12c0000d 	sth	r11,0(r2)
 102d7d4:	003be806 	br	102c778 <_gp+0xfffee494>
 102d7d8:	da812117 	ldw	r10,1156(sp)
 102d7dc:	dac12217 	ldw	r11,1160(sp)
 102d7e0:	50800017 	ldw	r2,0(r10)
 102d7e4:	52800104 	addi	r10,r10,4
 102d7e8:	da812115 	stw	r10,1156(sp)
 102d7ec:	12c00015 	stw	r11,0(r2)
 102d7f0:	003be106 	br	102c778 <_gp+0xfffee494>
 102d7f4:	00800084 	movi	r2,2
 102d7f8:	003c8906 	br	102ca20 <_gp+0xfffee73c>
 102d7fc:	a900100c 	andi	r4,r21,64
 102d800:	20001f26 	beq	r4,zero,102d880 <___vfiprintf_internal_r+0x11dc>
 102d804:	da812117 	ldw	r10,1156(sp)
 102d808:	1480000b 	ldhu	r18,0(r2)
 102d80c:	002d883a 	mov	r22,zero
 102d810:	52800104 	addi	r10,r10,4
 102d814:	da812115 	stw	r10,1156(sp)
 102d818:	003dae06 	br	102ced4 <_gp+0xfffeebf0>
 102d81c:	d9012017 	ldw	r4,1152(sp)
 102d820:	a00b883a 	mov	r5,r20
 102d824:	d9811a04 	addi	r6,sp,1128
 102d828:	da412b15 	stw	r9,1196(sp)
 102d82c:	db812a15 	stw	r14,1192(sp)
 102d830:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d834:	da412b17 	ldw	r9,1196(sp)
 102d838:	db812a17 	ldw	r14,1192(sp)
 102d83c:	103ed31e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d840:	d9411b17 	ldw	r5,1132(sp)
 102d844:	d8c11c17 	ldw	r3,1136(sp)
 102d848:	d811883a 	mov	r8,sp
 102d84c:	28800044 	addi	r2,r5,1
 102d850:	003e7f06 	br	102d250 <_gp+0xfffeef6c>
 102d854:	9825883a 	mov	r18,r19
 102d858:	003d3406 	br	102cd2c <_gp+0xfffeea48>
 102d85c:	4823883a 	mov	r17,r9
 102d860:	003e0806 	br	102d084 <_gp+0xfffeeda0>
 102d864:	d9012017 	ldw	r4,1152(sp)
 102d868:	a00b883a 	mov	r5,r20
 102d86c:	d9811a04 	addi	r6,sp,1128
 102d870:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d874:	103ec51e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d878:	d8c11c17 	ldw	r3,1136(sp)
 102d87c:	003ee006 	br	102d400 <_gp+0xfffef11c>
 102d880:	dac12117 	ldw	r11,1156(sp)
 102d884:	14800017 	ldw	r18,0(r2)
 102d888:	002d883a 	mov	r22,zero
 102d88c:	5ac00104 	addi	r11,r11,4
 102d890:	dac12115 	stw	r11,1156(sp)
 102d894:	003d8f06 	br	102ced4 <_gp+0xfffeebf0>
 102d898:	02c040f4 	movhi	r11,259
 102d89c:	5ad1bb04 	addi	r11,r11,18156
 102d8a0:	dac12315 	stw	r11,1164(sp)
 102d8a4:	003ce306 	br	102cc34 <_gp+0xfffee950>
 102d8a8:	80c00043 	ldbu	r3,1(r16)
 102d8ac:	ad400814 	ori	r21,r21,32
 102d8b0:	84000044 	addi	r16,r16,1
 102d8b4:	18c03fcc 	andi	r3,r3,255
 102d8b8:	18c0201c 	xori	r3,r3,128
 102d8bc:	18ffe004 	addi	r3,r3,-128
 102d8c0:	003bd706 	br	102c820 <_gp+0xfffee53c>
 102d8c4:	dac11e17 	ldw	r11,1144(sp)
 102d8c8:	d8c12417 	ldw	r3,1168(sp)
 102d8cc:	58e3c83a 	sub	r17,r11,r3
 102d8d0:	003c7006 	br	102ca94 <_gp+0xfffee7b0>
 102d8d4:	da012a15 	stw	r8,1192(sp)
 102d8d8:	10220bc0 	call	10220bc <strlen>
 102d8dc:	1023883a 	mov	r17,r2
 102d8e0:	db011d83 	ldbu	r12,1142(sp)
 102d8e4:	dd812115 	stw	r22,1156(sp)
 102d8e8:	0013883a 	mov	r9,zero
 102d8ec:	da012a17 	ldw	r8,1192(sp)
 102d8f0:	003c6806 	br	102ca94 <_gp+0xfffee7b0>
 102d8f4:	d9012017 	ldw	r4,1152(sp)
 102d8f8:	a00b883a 	mov	r5,r20
 102d8fc:	d9811a04 	addi	r6,sp,1128
 102d900:	da412b15 	stw	r9,1196(sp)
 102d904:	102c5900 	call	102c590 <__sprint_r.part.0>
 102d908:	da412b17 	ldw	r9,1196(sp)
 102d90c:	103e9f1e 	bne	r2,zero,102d38c <_gp+0xfffef0a8>
 102d910:	d9411b17 	ldw	r5,1132(sp)
 102d914:	d8c11c17 	ldw	r3,1136(sp)
 102d918:	d811883a 	mov	r8,sp
 102d91c:	28800044 	addi	r2,r5,1
 102d920:	003ca906 	br	102cbc8 <_gp+0xfffee8e4>
 102d924:	d9411b17 	ldw	r5,1132(sp)
 102d928:	010040f4 	movhi	r4,259
 102d92c:	2111bf04 	addi	r4,r4,18172
 102d930:	d9012315 	stw	r4,1164(sp)
 102d934:	29400044 	addi	r5,r5,1
 102d938:	003c8806 	br	102cb5c <_gp+0xfffee878>
 102d93c:	00800184 	movi	r2,6
 102d940:	1240012e 	bgeu	r2,r9,102d948 <___vfiprintf_internal_r+0x12a4>
 102d944:	1013883a 	mov	r9,r2
 102d948:	4823883a 	mov	r17,r9
 102d94c:	4825883a 	mov	r18,r9
 102d950:	48001516 	blt	r9,zero,102d9a8 <___vfiprintf_internal_r+0x1304>
 102d954:	008040f4 	movhi	r2,259
 102d958:	10914f04 	addi	r2,r2,17724
 102d95c:	dd812115 	stw	r22,1156(sp)
 102d960:	d8812415 	stw	r2,1168(sp)
 102d964:	003d6f06 	br	102cf24 <_gp+0xfffeec40>
 102d968:	d9411b17 	ldw	r5,1132(sp)
 102d96c:	02c040f4 	movhi	r11,259
 102d970:	5ad1bf04 	addi	r11,r11,18172
 102d974:	dac12315 	stw	r11,1164(sp)
 102d978:	29400044 	addi	r5,r5,1
 102d97c:	003ce106 	br	102cd04 <_gp+0xfffeea20>
 102d980:	010040f4 	movhi	r4,259
 102d984:	2111bb04 	addi	r4,r4,18156
 102d988:	d9012315 	stw	r4,1164(sp)
 102d98c:	1009883a 	mov	r4,r2
 102d990:	003eca06 	br	102d4bc <_gp+0xfffef1d8>
 102d994:	4823883a 	mov	r17,r9
 102d998:	db011d83 	ldbu	r12,1142(sp)
 102d99c:	dd812115 	stw	r22,1156(sp)
 102d9a0:	0013883a 	mov	r9,zero
 102d9a4:	003c3b06 	br	102ca94 <_gp+0xfffee7b0>
 102d9a8:	0025883a 	mov	r18,zero
 102d9ac:	003fe906 	br	102d954 <_gp+0xfffef670>
 102d9b0:	dac12117 	ldw	r11,1156(sp)
 102d9b4:	8005883a 	mov	r2,r16
 102d9b8:	5021883a 	mov	r16,r10
 102d9bc:	5a400017 	ldw	r9,0(r11)
 102d9c0:	58c00104 	addi	r3,r11,4
 102d9c4:	d8c12115 	stw	r3,1156(sp)
 102d9c8:	48000a16 	blt	r9,zero,102d9f4 <___vfiprintf_internal_r+0x1350>
 102d9cc:	10c00047 	ldb	r3,1(r2)
 102d9d0:	003b9306 	br	102c820 <_gp+0xfffee53c>
 102d9d4:	043fffc4 	movi	r16,-1
 102d9d8:	003d0206 	br	102cde4 <_gp+0xfffeeb00>
 102d9dc:	94c0010e 	bge	r18,r19,102d9e4 <___vfiprintf_internal_r+0x1340>
 102d9e0:	9825883a 	mov	r18,r19
 102d9e4:	da812217 	ldw	r10,1160(sp)
 102d9e8:	5495883a 	add	r10,r10,r18
 102d9ec:	da812215 	stw	r10,1160(sp)
 102d9f0:	003cd106 	br	102cd38 <_gp+0xfffeea54>
 102d9f4:	027fffc4 	movi	r9,-1
 102d9f8:	10c00047 	ldb	r3,1(r2)
 102d9fc:	003b8806 	br	102c820 <_gp+0xfffee53c>

0102da00 <__vfiprintf_internal>:
 102da00:	2007883a 	mov	r3,r4
 102da04:	010040f4 	movhi	r4,259
 102da08:	2118ba04 	addi	r4,r4,25320
 102da0c:	21000017 	ldw	r4,0(r4)
 102da10:	2805883a 	mov	r2,r5
 102da14:	300f883a 	mov	r7,r6
 102da18:	180b883a 	mov	r5,r3
 102da1c:	100d883a 	mov	r6,r2
 102da20:	102c6a41 	jmpi	102c6a4 <___vfiprintf_internal_r>

0102da24 <_write_r>:
 102da24:	defffd04 	addi	sp,sp,-12
 102da28:	dc000015 	stw	r16,0(sp)
 102da2c:	040040f4 	movhi	r16,259
 102da30:	dc400115 	stw	r17,4(sp)
 102da34:	841f8a04 	addi	r16,r16,32296
 102da38:	2023883a 	mov	r17,r4
 102da3c:	2809883a 	mov	r4,r5
 102da40:	300b883a 	mov	r5,r6
 102da44:	380d883a 	mov	r6,r7
 102da48:	dfc00215 	stw	ra,8(sp)
 102da4c:	80000015 	stw	zero,0(r16)
 102da50:	1031d880 	call	1031d88 <write>
 102da54:	00ffffc4 	movi	r3,-1
 102da58:	10c00526 	beq	r2,r3,102da70 <_write_r+0x4c>
 102da5c:	dfc00217 	ldw	ra,8(sp)
 102da60:	dc400117 	ldw	r17,4(sp)
 102da64:	dc000017 	ldw	r16,0(sp)
 102da68:	dec00304 	addi	sp,sp,12
 102da6c:	f800283a 	ret
 102da70:	80c00017 	ldw	r3,0(r16)
 102da74:	183ff926 	beq	r3,zero,102da5c <_gp+0xfffef778>
 102da78:	88c00015 	stw	r3,0(r17)
 102da7c:	003ff706 	br	102da5c <_gp+0xfffef778>

0102da80 <_close_r>:
 102da80:	defffd04 	addi	sp,sp,-12
 102da84:	dc000015 	stw	r16,0(sp)
 102da88:	040040f4 	movhi	r16,259
 102da8c:	dc400115 	stw	r17,4(sp)
 102da90:	841f8a04 	addi	r16,r16,32296
 102da94:	2023883a 	mov	r17,r4
 102da98:	2809883a 	mov	r4,r5
 102da9c:	dfc00215 	stw	ra,8(sp)
 102daa0:	80000015 	stw	zero,0(r16)
 102daa4:	10314fc0 	call	10314fc <close>
 102daa8:	00ffffc4 	movi	r3,-1
 102daac:	10c00526 	beq	r2,r3,102dac4 <_close_r+0x44>
 102dab0:	dfc00217 	ldw	ra,8(sp)
 102dab4:	dc400117 	ldw	r17,4(sp)
 102dab8:	dc000017 	ldw	r16,0(sp)
 102dabc:	dec00304 	addi	sp,sp,12
 102dac0:	f800283a 	ret
 102dac4:	80c00017 	ldw	r3,0(r16)
 102dac8:	183ff926 	beq	r3,zero,102dab0 <_gp+0xfffef7cc>
 102dacc:	88c00015 	stw	r3,0(r17)
 102dad0:	003ff706 	br	102dab0 <_gp+0xfffef7cc>

0102dad4 <_calloc_r>:
 102dad4:	298b383a 	mul	r5,r5,r6
 102dad8:	defffe04 	addi	sp,sp,-8
 102dadc:	dc000015 	stw	r16,0(sp)
 102dae0:	dfc00115 	stw	ra,4(sp)
 102dae4:	1028f440 	call	1028f44 <_malloc_r>
 102dae8:	1021883a 	mov	r16,r2
 102daec:	10002826 	beq	r2,zero,102db90 <_calloc_r+0xbc>
 102daf0:	11bfff17 	ldw	r6,-4(r2)
 102daf4:	00bfff04 	movi	r2,-4
 102daf8:	00c00904 	movi	r3,36
 102dafc:	308c703a 	and	r6,r6,r2
 102db00:	308d883a 	add	r6,r6,r2
 102db04:	19801436 	bltu	r3,r6,102db58 <_calloc_r+0x84>
 102db08:	008004c4 	movi	r2,19
 102db0c:	11800936 	bltu	r2,r6,102db34 <_calloc_r+0x60>
 102db10:	8005883a 	mov	r2,r16
 102db14:	10000015 	stw	zero,0(r2)
 102db18:	10000115 	stw	zero,4(r2)
 102db1c:	10000215 	stw	zero,8(r2)
 102db20:	8005883a 	mov	r2,r16
 102db24:	dfc00117 	ldw	ra,4(sp)
 102db28:	dc000017 	ldw	r16,0(sp)
 102db2c:	dec00204 	addi	sp,sp,8
 102db30:	f800283a 	ret
 102db34:	80000015 	stw	zero,0(r16)
 102db38:	80000115 	stw	zero,4(r16)
 102db3c:	008006c4 	movi	r2,27
 102db40:	11800d2e 	bgeu	r2,r6,102db78 <_calloc_r+0xa4>
 102db44:	80000215 	stw	zero,8(r16)
 102db48:	80000315 	stw	zero,12(r16)
 102db4c:	30c00c26 	beq	r6,r3,102db80 <_calloc_r+0xac>
 102db50:	80800404 	addi	r2,r16,16
 102db54:	003fef06 	br	102db14 <_gp+0xfffef830>
 102db58:	8009883a 	mov	r4,r16
 102db5c:	000b883a 	mov	r5,zero
 102db60:	1029a680 	call	1029a68 <memset>
 102db64:	8005883a 	mov	r2,r16
 102db68:	dfc00117 	ldw	ra,4(sp)
 102db6c:	dc000017 	ldw	r16,0(sp)
 102db70:	dec00204 	addi	sp,sp,8
 102db74:	f800283a 	ret
 102db78:	80800204 	addi	r2,r16,8
 102db7c:	003fe506 	br	102db14 <_gp+0xfffef830>
 102db80:	80000415 	stw	zero,16(r16)
 102db84:	80800604 	addi	r2,r16,24
 102db88:	80000515 	stw	zero,20(r16)
 102db8c:	003fe106 	br	102db14 <_gp+0xfffef830>
 102db90:	0005883a 	mov	r2,zero
 102db94:	003fe306 	br	102db24 <_gp+0xfffef840>

0102db98 <_fclose_r>:
 102db98:	28003226 	beq	r5,zero,102dc64 <_fclose_r+0xcc>
 102db9c:	defffc04 	addi	sp,sp,-16
 102dba0:	dc400115 	stw	r17,4(sp)
 102dba4:	2023883a 	mov	r17,r4
 102dba8:	dc000015 	stw	r16,0(sp)
 102dbac:	dfc00315 	stw	ra,12(sp)
 102dbb0:	dc800215 	stw	r18,8(sp)
 102dbb4:	2821883a 	mov	r16,r5
 102dbb8:	10282440 	call	1028244 <__sfp_lock_acquire>
 102dbbc:	88000226 	beq	r17,zero,102dbc8 <_fclose_r+0x30>
 102dbc0:	88800e17 	ldw	r2,56(r17)
 102dbc4:	10002926 	beq	r2,zero,102dc6c <_fclose_r+0xd4>
 102dbc8:	8080030f 	ldh	r2,12(r16)
 102dbcc:	10002226 	beq	r2,zero,102dc58 <_fclose_r+0xc0>
 102dbd0:	8809883a 	mov	r4,r17
 102dbd4:	800b883a 	mov	r5,r16
 102dbd8:	1027c8c0 	call	1027c8c <_fflush_r>
 102dbdc:	1025883a 	mov	r18,r2
 102dbe0:	80800b17 	ldw	r2,44(r16)
 102dbe4:	10000426 	beq	r2,zero,102dbf8 <_fclose_r+0x60>
 102dbe8:	81400717 	ldw	r5,28(r16)
 102dbec:	8809883a 	mov	r4,r17
 102dbf0:	103ee83a 	callr	r2
 102dbf4:	10002616 	blt	r2,zero,102dc90 <_fclose_r+0xf8>
 102dbf8:	8080030b 	ldhu	r2,12(r16)
 102dbfc:	1080200c 	andi	r2,r2,128
 102dc00:	10001f1e 	bne	r2,zero,102dc80 <_fclose_r+0xe8>
 102dc04:	81400c17 	ldw	r5,48(r16)
 102dc08:	28000526 	beq	r5,zero,102dc20 <_fclose_r+0x88>
 102dc0c:	80801004 	addi	r2,r16,64
 102dc10:	28800226 	beq	r5,r2,102dc1c <_fclose_r+0x84>
 102dc14:	8809883a 	mov	r4,r17
 102dc18:	10283a80 	call	10283a8 <_free_r>
 102dc1c:	80000c15 	stw	zero,48(r16)
 102dc20:	81401117 	ldw	r5,68(r16)
 102dc24:	28000326 	beq	r5,zero,102dc34 <_fclose_r+0x9c>
 102dc28:	8809883a 	mov	r4,r17
 102dc2c:	10283a80 	call	10283a8 <_free_r>
 102dc30:	80001115 	stw	zero,68(r16)
 102dc34:	8000030d 	sth	zero,12(r16)
 102dc38:	10282480 	call	1028248 <__sfp_lock_release>
 102dc3c:	9005883a 	mov	r2,r18
 102dc40:	dfc00317 	ldw	ra,12(sp)
 102dc44:	dc800217 	ldw	r18,8(sp)
 102dc48:	dc400117 	ldw	r17,4(sp)
 102dc4c:	dc000017 	ldw	r16,0(sp)
 102dc50:	dec00404 	addi	sp,sp,16
 102dc54:	f800283a 	ret
 102dc58:	10282480 	call	1028248 <__sfp_lock_release>
 102dc5c:	0005883a 	mov	r2,zero
 102dc60:	003ff706 	br	102dc40 <_gp+0xfffef95c>
 102dc64:	0005883a 	mov	r2,zero
 102dc68:	f800283a 	ret
 102dc6c:	8809883a 	mov	r4,r17
 102dc70:	10282340 	call	1028234 <__sinit>
 102dc74:	8080030f 	ldh	r2,12(r16)
 102dc78:	103fd51e 	bne	r2,zero,102dbd0 <_gp+0xfffef8ec>
 102dc7c:	003ff606 	br	102dc58 <_gp+0xfffef974>
 102dc80:	81400417 	ldw	r5,16(r16)
 102dc84:	8809883a 	mov	r4,r17
 102dc88:	10283a80 	call	10283a8 <_free_r>
 102dc8c:	003fdd06 	br	102dc04 <_gp+0xfffef920>
 102dc90:	04bfffc4 	movi	r18,-1
 102dc94:	003fd806 	br	102dbf8 <_gp+0xfffef914>

0102dc98 <fclose>:
 102dc98:	008040f4 	movhi	r2,259
 102dc9c:	1098ba04 	addi	r2,r2,25320
 102dca0:	200b883a 	mov	r5,r4
 102dca4:	11000017 	ldw	r4,0(r2)
 102dca8:	102db981 	jmpi	102db98 <_fclose_r>

0102dcac <_fputwc_r>:
 102dcac:	3080030b 	ldhu	r2,12(r6)
 102dcb0:	defff804 	addi	sp,sp,-32
 102dcb4:	dcc00415 	stw	r19,16(sp)
 102dcb8:	dc800315 	stw	r18,12(sp)
 102dcbc:	dc000115 	stw	r16,4(sp)
 102dcc0:	dfc00715 	stw	ra,28(sp)
 102dcc4:	dd400615 	stw	r21,24(sp)
 102dcc8:	dd000515 	stw	r20,20(sp)
 102dccc:	dc400215 	stw	r17,8(sp)
 102dcd0:	10c8000c 	andi	r3,r2,8192
 102dcd4:	3021883a 	mov	r16,r6
 102dcd8:	2027883a 	mov	r19,r4
 102dcdc:	2825883a 	mov	r18,r5
 102dce0:	1800051e 	bne	r3,zero,102dcf8 <_fputwc_r+0x4c>
 102dce4:	30c01917 	ldw	r3,100(r6)
 102dce8:	10880014 	ori	r2,r2,8192
 102dcec:	3080030d 	sth	r2,12(r6)
 102dcf0:	18880014 	ori	r2,r3,8192
 102dcf4:	30801915 	stw	r2,100(r6)
 102dcf8:	1028d340 	call	1028d34 <__locale_mb_cur_max>
 102dcfc:	00c00044 	movi	r3,1
 102dd00:	10c03e26 	beq	r2,r3,102ddfc <_fputwc_r+0x150>
 102dd04:	9809883a 	mov	r4,r19
 102dd08:	d80b883a 	mov	r5,sp
 102dd0c:	900d883a 	mov	r6,r18
 102dd10:	81c01704 	addi	r7,r16,92
 102dd14:	102e15c0 	call	102e15c <_wcrtomb_r>
 102dd18:	1029883a 	mov	r20,r2
 102dd1c:	00bfffc4 	movi	r2,-1
 102dd20:	a0802026 	beq	r20,r2,102dda4 <_fputwc_r+0xf8>
 102dd24:	d9400003 	ldbu	r5,0(sp)
 102dd28:	a0001c26 	beq	r20,zero,102dd9c <_fputwc_r+0xf0>
 102dd2c:	0023883a 	mov	r17,zero
 102dd30:	05400284 	movi	r21,10
 102dd34:	00000906 	br	102dd5c <_fputwc_r+0xb0>
 102dd38:	80800017 	ldw	r2,0(r16)
 102dd3c:	11400005 	stb	r5,0(r2)
 102dd40:	80c00017 	ldw	r3,0(r16)
 102dd44:	18c00044 	addi	r3,r3,1
 102dd48:	80c00015 	stw	r3,0(r16)
 102dd4c:	8c400044 	addi	r17,r17,1
 102dd50:	dc45883a 	add	r2,sp,r17
 102dd54:	8d00112e 	bgeu	r17,r20,102dd9c <_fputwc_r+0xf0>
 102dd58:	11400003 	ldbu	r5,0(r2)
 102dd5c:	80c00217 	ldw	r3,8(r16)
 102dd60:	18ffffc4 	addi	r3,r3,-1
 102dd64:	80c00215 	stw	r3,8(r16)
 102dd68:	183ff30e 	bge	r3,zero,102dd38 <_gp+0xfffefa54>
 102dd6c:	80800617 	ldw	r2,24(r16)
 102dd70:	18801916 	blt	r3,r2,102ddd8 <_fputwc_r+0x12c>
 102dd74:	80800017 	ldw	r2,0(r16)
 102dd78:	11400005 	stb	r5,0(r2)
 102dd7c:	80800017 	ldw	r2,0(r16)
 102dd80:	10c00003 	ldbu	r3,0(r2)
 102dd84:	10800044 	addi	r2,r2,1
 102dd88:	1d402326 	beq	r3,r21,102de18 <_fputwc_r+0x16c>
 102dd8c:	80800015 	stw	r2,0(r16)
 102dd90:	8c400044 	addi	r17,r17,1
 102dd94:	dc45883a 	add	r2,sp,r17
 102dd98:	8d3fef36 	bltu	r17,r20,102dd58 <_gp+0xfffefa74>
 102dd9c:	9005883a 	mov	r2,r18
 102dda0:	00000406 	br	102ddb4 <_fputwc_r+0x108>
 102dda4:	80c0030b 	ldhu	r3,12(r16)
 102dda8:	a005883a 	mov	r2,r20
 102ddac:	18c01014 	ori	r3,r3,64
 102ddb0:	80c0030d 	sth	r3,12(r16)
 102ddb4:	dfc00717 	ldw	ra,28(sp)
 102ddb8:	dd400617 	ldw	r21,24(sp)
 102ddbc:	dd000517 	ldw	r20,20(sp)
 102ddc0:	dcc00417 	ldw	r19,16(sp)
 102ddc4:	dc800317 	ldw	r18,12(sp)
 102ddc8:	dc400217 	ldw	r17,8(sp)
 102ddcc:	dc000117 	ldw	r16,4(sp)
 102ddd0:	dec00804 	addi	sp,sp,32
 102ddd4:	f800283a 	ret
 102ddd8:	9809883a 	mov	r4,r19
 102dddc:	29403fcc 	andi	r5,r5,255
 102dde0:	800d883a 	mov	r6,r16
 102dde4:	102dfec0 	call	102dfec <__swbuf_r>
 102dde8:	10bfffe0 	cmpeqi	r2,r2,-1
 102ddec:	10803fcc 	andi	r2,r2,255
 102ddf0:	103fd626 	beq	r2,zero,102dd4c <_gp+0xfffefa68>
 102ddf4:	00bfffc4 	movi	r2,-1
 102ddf8:	003fee06 	br	102ddb4 <_gp+0xfffefad0>
 102ddfc:	90ffffc4 	addi	r3,r18,-1
 102de00:	01003f84 	movi	r4,254
 102de04:	20ffbf36 	bltu	r4,r3,102dd04 <_gp+0xfffefa20>
 102de08:	900b883a 	mov	r5,r18
 102de0c:	dc800005 	stb	r18,0(sp)
 102de10:	1029883a 	mov	r20,r2
 102de14:	003fc506 	br	102dd2c <_gp+0xfffefa48>
 102de18:	9809883a 	mov	r4,r19
 102de1c:	a80b883a 	mov	r5,r21
 102de20:	800d883a 	mov	r6,r16
 102de24:	102dfec0 	call	102dfec <__swbuf_r>
 102de28:	10bfffe0 	cmpeqi	r2,r2,-1
 102de2c:	003fef06 	br	102ddec <_gp+0xfffefb08>

0102de30 <fputwc>:
 102de30:	defffc04 	addi	sp,sp,-16
 102de34:	dc000115 	stw	r16,4(sp)
 102de38:	040040f4 	movhi	r16,259
 102de3c:	8418ba04 	addi	r16,r16,25320
 102de40:	dc400215 	stw	r17,8(sp)
 102de44:	2023883a 	mov	r17,r4
 102de48:	81000017 	ldw	r4,0(r16)
 102de4c:	dfc00315 	stw	ra,12(sp)
 102de50:	280d883a 	mov	r6,r5
 102de54:	20000626 	beq	r4,zero,102de70 <fputwc+0x40>
 102de58:	20800e17 	ldw	r2,56(r4)
 102de5c:	1000041e 	bne	r2,zero,102de70 <fputwc+0x40>
 102de60:	d9400015 	stw	r5,0(sp)
 102de64:	10282340 	call	1028234 <__sinit>
 102de68:	81000017 	ldw	r4,0(r16)
 102de6c:	d9800017 	ldw	r6,0(sp)
 102de70:	880b883a 	mov	r5,r17
 102de74:	dfc00317 	ldw	ra,12(sp)
 102de78:	dc400217 	ldw	r17,8(sp)
 102de7c:	dc000117 	ldw	r16,4(sp)
 102de80:	dec00404 	addi	sp,sp,16
 102de84:	102dcac1 	jmpi	102dcac <_fputwc_r>

0102de88 <_fstat_r>:
 102de88:	defffd04 	addi	sp,sp,-12
 102de8c:	dc000015 	stw	r16,0(sp)
 102de90:	040040f4 	movhi	r16,259
 102de94:	dc400115 	stw	r17,4(sp)
 102de98:	841f8a04 	addi	r16,r16,32296
 102de9c:	2023883a 	mov	r17,r4
 102dea0:	2809883a 	mov	r4,r5
 102dea4:	300b883a 	mov	r5,r6
 102dea8:	dfc00215 	stw	ra,8(sp)
 102deac:	80000015 	stw	zero,0(r16)
 102deb0:	10316480 	call	1031648 <fstat>
 102deb4:	00ffffc4 	movi	r3,-1
 102deb8:	10c00526 	beq	r2,r3,102ded0 <_fstat_r+0x48>
 102debc:	dfc00217 	ldw	ra,8(sp)
 102dec0:	dc400117 	ldw	r17,4(sp)
 102dec4:	dc000017 	ldw	r16,0(sp)
 102dec8:	dec00304 	addi	sp,sp,12
 102decc:	f800283a 	ret
 102ded0:	80c00017 	ldw	r3,0(r16)
 102ded4:	183ff926 	beq	r3,zero,102debc <_gp+0xfffefbd8>
 102ded8:	88c00015 	stw	r3,0(r17)
 102dedc:	003ff706 	br	102debc <_gp+0xfffefbd8>

0102dee0 <_isatty_r>:
 102dee0:	defffd04 	addi	sp,sp,-12
 102dee4:	dc000015 	stw	r16,0(sp)
 102dee8:	040040f4 	movhi	r16,259
 102deec:	dc400115 	stw	r17,4(sp)
 102def0:	841f8a04 	addi	r16,r16,32296
 102def4:	2023883a 	mov	r17,r4
 102def8:	2809883a 	mov	r4,r5
 102defc:	dfc00215 	stw	ra,8(sp)
 102df00:	80000015 	stw	zero,0(r16)
 102df04:	10317480 	call	1031748 <isatty>
 102df08:	00ffffc4 	movi	r3,-1
 102df0c:	10c00526 	beq	r2,r3,102df24 <_isatty_r+0x44>
 102df10:	dfc00217 	ldw	ra,8(sp)
 102df14:	dc400117 	ldw	r17,4(sp)
 102df18:	dc000017 	ldw	r16,0(sp)
 102df1c:	dec00304 	addi	sp,sp,12
 102df20:	f800283a 	ret
 102df24:	80c00017 	ldw	r3,0(r16)
 102df28:	183ff926 	beq	r3,zero,102df10 <_gp+0xfffefc2c>
 102df2c:	88c00015 	stw	r3,0(r17)
 102df30:	003ff706 	br	102df10 <_gp+0xfffefc2c>

0102df34 <_lseek_r>:
 102df34:	defffd04 	addi	sp,sp,-12
 102df38:	dc000015 	stw	r16,0(sp)
 102df3c:	040040f4 	movhi	r16,259
 102df40:	dc400115 	stw	r17,4(sp)
 102df44:	841f8a04 	addi	r16,r16,32296
 102df48:	2023883a 	mov	r17,r4
 102df4c:	2809883a 	mov	r4,r5
 102df50:	300b883a 	mov	r5,r6
 102df54:	380d883a 	mov	r6,r7
 102df58:	dfc00215 	stw	ra,8(sp)
 102df5c:	80000015 	stw	zero,0(r16)
 102df60:	10319200 	call	1031920 <lseek>
 102df64:	00ffffc4 	movi	r3,-1
 102df68:	10c00526 	beq	r2,r3,102df80 <_lseek_r+0x4c>
 102df6c:	dfc00217 	ldw	ra,8(sp)
 102df70:	dc400117 	ldw	r17,4(sp)
 102df74:	dc000017 	ldw	r16,0(sp)
 102df78:	dec00304 	addi	sp,sp,12
 102df7c:	f800283a 	ret
 102df80:	80c00017 	ldw	r3,0(r16)
 102df84:	183ff926 	beq	r3,zero,102df6c <_gp+0xfffefc88>
 102df88:	88c00015 	stw	r3,0(r17)
 102df8c:	003ff706 	br	102df6c <_gp+0xfffefc88>

0102df90 <_read_r>:
 102df90:	defffd04 	addi	sp,sp,-12
 102df94:	dc000015 	stw	r16,0(sp)
 102df98:	040040f4 	movhi	r16,259
 102df9c:	dc400115 	stw	r17,4(sp)
 102dfa0:	841f8a04 	addi	r16,r16,32296
 102dfa4:	2023883a 	mov	r17,r4
 102dfa8:	2809883a 	mov	r4,r5
 102dfac:	300b883a 	mov	r5,r6
 102dfb0:	380d883a 	mov	r6,r7
 102dfb4:	dfc00215 	stw	ra,8(sp)
 102dfb8:	80000015 	stw	zero,0(r16)
 102dfbc:	1031afc0 	call	1031afc <read>
 102dfc0:	00ffffc4 	movi	r3,-1
 102dfc4:	10c00526 	beq	r2,r3,102dfdc <_read_r+0x4c>
 102dfc8:	dfc00217 	ldw	ra,8(sp)
 102dfcc:	dc400117 	ldw	r17,4(sp)
 102dfd0:	dc000017 	ldw	r16,0(sp)
 102dfd4:	dec00304 	addi	sp,sp,12
 102dfd8:	f800283a 	ret
 102dfdc:	80c00017 	ldw	r3,0(r16)
 102dfe0:	183ff926 	beq	r3,zero,102dfc8 <_gp+0xfffefce4>
 102dfe4:	88c00015 	stw	r3,0(r17)
 102dfe8:	003ff706 	br	102dfc8 <_gp+0xfffefce4>

0102dfec <__swbuf_r>:
 102dfec:	defffc04 	addi	sp,sp,-16
 102dff0:	dc800215 	stw	r18,8(sp)
 102dff4:	dc400115 	stw	r17,4(sp)
 102dff8:	dc000015 	stw	r16,0(sp)
 102dffc:	dfc00315 	stw	ra,12(sp)
 102e000:	2025883a 	mov	r18,r4
 102e004:	2823883a 	mov	r17,r5
 102e008:	3021883a 	mov	r16,r6
 102e00c:	20000226 	beq	r4,zero,102e018 <__swbuf_r+0x2c>
 102e010:	20800e17 	ldw	r2,56(r4)
 102e014:	10004126 	beq	r2,zero,102e11c <__swbuf_r+0x130>
 102e018:	80c00617 	ldw	r3,24(r16)
 102e01c:	8180030b 	ldhu	r6,12(r16)
 102e020:	80c00215 	stw	r3,8(r16)
 102e024:	30c0020c 	andi	r3,r6,8
 102e028:	18003526 	beq	r3,zero,102e100 <__swbuf_r+0x114>
 102e02c:	80c00417 	ldw	r3,16(r16)
 102e030:	18003326 	beq	r3,zero,102e100 <__swbuf_r+0x114>
 102e034:	3088000c 	andi	r2,r6,8192
 102e038:	8c403fcc 	andi	r17,r17,255
 102e03c:	10001726 	beq	r2,zero,102e09c <__swbuf_r+0xb0>
 102e040:	80800017 	ldw	r2,0(r16)
 102e044:	81000517 	ldw	r4,20(r16)
 102e048:	10c7c83a 	sub	r3,r2,r3
 102e04c:	19001d0e 	bge	r3,r4,102e0c4 <__swbuf_r+0xd8>
 102e050:	18c00044 	addi	r3,r3,1
 102e054:	81400217 	ldw	r5,8(r16)
 102e058:	11000044 	addi	r4,r2,1
 102e05c:	81000015 	stw	r4,0(r16)
 102e060:	297fffc4 	addi	r5,r5,-1
 102e064:	81400215 	stw	r5,8(r16)
 102e068:	14400005 	stb	r17,0(r2)
 102e06c:	80800517 	ldw	r2,20(r16)
 102e070:	10c01d26 	beq	r2,r3,102e0e8 <__swbuf_r+0xfc>
 102e074:	8080030b 	ldhu	r2,12(r16)
 102e078:	1080004c 	andi	r2,r2,1
 102e07c:	1000181e 	bne	r2,zero,102e0e0 <__swbuf_r+0xf4>
 102e080:	8805883a 	mov	r2,r17
 102e084:	dfc00317 	ldw	ra,12(sp)
 102e088:	dc800217 	ldw	r18,8(sp)
 102e08c:	dc400117 	ldw	r17,4(sp)
 102e090:	dc000017 	ldw	r16,0(sp)
 102e094:	dec00404 	addi	sp,sp,16
 102e098:	f800283a 	ret
 102e09c:	81001917 	ldw	r4,100(r16)
 102e0a0:	00b7ffc4 	movi	r2,-8193
 102e0a4:	31880014 	ori	r6,r6,8192
 102e0a8:	2084703a 	and	r2,r4,r2
 102e0ac:	80801915 	stw	r2,100(r16)
 102e0b0:	80800017 	ldw	r2,0(r16)
 102e0b4:	81000517 	ldw	r4,20(r16)
 102e0b8:	8180030d 	sth	r6,12(r16)
 102e0bc:	10c7c83a 	sub	r3,r2,r3
 102e0c0:	193fe316 	blt	r3,r4,102e050 <_gp+0xfffefd6c>
 102e0c4:	9009883a 	mov	r4,r18
 102e0c8:	800b883a 	mov	r5,r16
 102e0cc:	1027c8c0 	call	1027c8c <_fflush_r>
 102e0d0:	1000091e 	bne	r2,zero,102e0f8 <__swbuf_r+0x10c>
 102e0d4:	80800017 	ldw	r2,0(r16)
 102e0d8:	00c00044 	movi	r3,1
 102e0dc:	003fdd06 	br	102e054 <_gp+0xfffefd70>
 102e0e0:	00800284 	movi	r2,10
 102e0e4:	88bfe61e 	bne	r17,r2,102e080 <_gp+0xfffefd9c>
 102e0e8:	9009883a 	mov	r4,r18
 102e0ec:	800b883a 	mov	r5,r16
 102e0f0:	1027c8c0 	call	1027c8c <_fflush_r>
 102e0f4:	103fe226 	beq	r2,zero,102e080 <_gp+0xfffefd9c>
 102e0f8:	00bfffc4 	movi	r2,-1
 102e0fc:	003fe106 	br	102e084 <_gp+0xfffefda0>
 102e100:	9009883a 	mov	r4,r18
 102e104:	800b883a 	mov	r5,r16
 102e108:	10262340 	call	1026234 <__swsetup_r>
 102e10c:	1000051e 	bne	r2,zero,102e124 <__swbuf_r+0x138>
 102e110:	8180030b 	ldhu	r6,12(r16)
 102e114:	80c00417 	ldw	r3,16(r16)
 102e118:	003fc606 	br	102e034 <_gp+0xfffefd50>
 102e11c:	10282340 	call	1028234 <__sinit>
 102e120:	003fbd06 	br	102e018 <_gp+0xfffefd34>
 102e124:	80c0030b 	ldhu	r3,12(r16)
 102e128:	00bfffc4 	movi	r2,-1
 102e12c:	18c01014 	ori	r3,r3,64
 102e130:	80c0030d 	sth	r3,12(r16)
 102e134:	00c00244 	movi	r3,9
 102e138:	90c00015 	stw	r3,0(r18)
 102e13c:	003fd106 	br	102e084 <_gp+0xfffefda0>

0102e140 <__swbuf>:
 102e140:	00c040f4 	movhi	r3,259
 102e144:	18d8ba04 	addi	r3,r3,25320
 102e148:	2005883a 	mov	r2,r4
 102e14c:	19000017 	ldw	r4,0(r3)
 102e150:	280d883a 	mov	r6,r5
 102e154:	100b883a 	mov	r5,r2
 102e158:	102dfec1 	jmpi	102dfec <__swbuf_r>

0102e15c <_wcrtomb_r>:
 102e15c:	defff604 	addi	sp,sp,-40
 102e160:	008040f4 	movhi	r2,259
 102e164:	dc800815 	stw	r18,32(sp)
 102e168:	dc400715 	stw	r17,28(sp)
 102e16c:	dc000615 	stw	r16,24(sp)
 102e170:	1098be04 	addi	r2,r2,25336
 102e174:	dfc00915 	stw	ra,36(sp)
 102e178:	2021883a 	mov	r16,r4
 102e17c:	3823883a 	mov	r17,r7
 102e180:	14800017 	ldw	r18,0(r2)
 102e184:	28001426 	beq	r5,zero,102e1d8 <_wcrtomb_r+0x7c>
 102e188:	d9400415 	stw	r5,16(sp)
 102e18c:	d9800515 	stw	r6,20(sp)
 102e190:	1028d280 	call	1028d28 <__locale_charset>
 102e194:	d9400417 	ldw	r5,16(sp)
 102e198:	d9800517 	ldw	r6,20(sp)
 102e19c:	8009883a 	mov	r4,r16
 102e1a0:	dc400015 	stw	r17,0(sp)
 102e1a4:	100f883a 	mov	r7,r2
 102e1a8:	903ee83a 	callr	r18
 102e1ac:	00ffffc4 	movi	r3,-1
 102e1b0:	10c0031e 	bne	r2,r3,102e1c0 <_wcrtomb_r+0x64>
 102e1b4:	88000015 	stw	zero,0(r17)
 102e1b8:	00c02284 	movi	r3,138
 102e1bc:	80c00015 	stw	r3,0(r16)
 102e1c0:	dfc00917 	ldw	ra,36(sp)
 102e1c4:	dc800817 	ldw	r18,32(sp)
 102e1c8:	dc400717 	ldw	r17,28(sp)
 102e1cc:	dc000617 	ldw	r16,24(sp)
 102e1d0:	dec00a04 	addi	sp,sp,40
 102e1d4:	f800283a 	ret
 102e1d8:	1028d280 	call	1028d28 <__locale_charset>
 102e1dc:	8009883a 	mov	r4,r16
 102e1e0:	dc400015 	stw	r17,0(sp)
 102e1e4:	d9400104 	addi	r5,sp,4
 102e1e8:	000d883a 	mov	r6,zero
 102e1ec:	100f883a 	mov	r7,r2
 102e1f0:	903ee83a 	callr	r18
 102e1f4:	003fed06 	br	102e1ac <_gp+0xfffefec8>

0102e1f8 <wcrtomb>:
 102e1f8:	defff504 	addi	sp,sp,-44
 102e1fc:	dc400515 	stw	r17,20(sp)
 102e200:	dc000415 	stw	r16,16(sp)
 102e204:	dfc00a15 	stw	ra,40(sp)
 102e208:	dd400915 	stw	r21,36(sp)
 102e20c:	dd000815 	stw	r20,32(sp)
 102e210:	dcc00715 	stw	r19,28(sp)
 102e214:	dc800615 	stw	r18,24(sp)
 102e218:	2021883a 	mov	r16,r4
 102e21c:	3023883a 	mov	r17,r6
 102e220:	20001d26 	beq	r4,zero,102e298 <wcrtomb+0xa0>
 102e224:	048040f4 	movhi	r18,259
 102e228:	9498ba04 	addi	r18,r18,25320
 102e22c:	008040f4 	movhi	r2,259
 102e230:	95400017 	ldw	r21,0(r18)
 102e234:	1098be04 	addi	r2,r2,25336
 102e238:	15000017 	ldw	r20,0(r2)
 102e23c:	2827883a 	mov	r19,r5
 102e240:	1028d280 	call	1028d28 <__locale_charset>
 102e244:	a809883a 	mov	r4,r21
 102e248:	dc400015 	stw	r17,0(sp)
 102e24c:	800b883a 	mov	r5,r16
 102e250:	980d883a 	mov	r6,r19
 102e254:	100f883a 	mov	r7,r2
 102e258:	a03ee83a 	callr	r20
 102e25c:	00ffffc4 	movi	r3,-1
 102e260:	10c0041e 	bne	r2,r3,102e274 <wcrtomb+0x7c>
 102e264:	90c00017 	ldw	r3,0(r18)
 102e268:	01002284 	movi	r4,138
 102e26c:	88000015 	stw	zero,0(r17)
 102e270:	19000015 	stw	r4,0(r3)
 102e274:	dfc00a17 	ldw	ra,40(sp)
 102e278:	dd400917 	ldw	r21,36(sp)
 102e27c:	dd000817 	ldw	r20,32(sp)
 102e280:	dcc00717 	ldw	r19,28(sp)
 102e284:	dc800617 	ldw	r18,24(sp)
 102e288:	dc400517 	ldw	r17,20(sp)
 102e28c:	dc000417 	ldw	r16,16(sp)
 102e290:	dec00b04 	addi	sp,sp,44
 102e294:	f800283a 	ret
 102e298:	048040f4 	movhi	r18,259
 102e29c:	9498ba04 	addi	r18,r18,25320
 102e2a0:	008040f4 	movhi	r2,259
 102e2a4:	94c00017 	ldw	r19,0(r18)
 102e2a8:	1098be04 	addi	r2,r2,25336
 102e2ac:	14000017 	ldw	r16,0(r2)
 102e2b0:	1028d280 	call	1028d28 <__locale_charset>
 102e2b4:	9809883a 	mov	r4,r19
 102e2b8:	dc400015 	stw	r17,0(sp)
 102e2bc:	d9400104 	addi	r5,sp,4
 102e2c0:	000d883a 	mov	r6,zero
 102e2c4:	100f883a 	mov	r7,r2
 102e2c8:	803ee83a 	callr	r16
 102e2cc:	003fe306 	br	102e25c <_gp+0xfffeff78>

0102e2d0 <__ascii_wctomb>:
 102e2d0:	28000526 	beq	r5,zero,102e2e8 <__ascii_wctomb+0x18>
 102e2d4:	00803fc4 	movi	r2,255
 102e2d8:	11800536 	bltu	r2,r6,102e2f0 <__ascii_wctomb+0x20>
 102e2dc:	29800005 	stb	r6,0(r5)
 102e2e0:	00800044 	movi	r2,1
 102e2e4:	f800283a 	ret
 102e2e8:	0005883a 	mov	r2,zero
 102e2ec:	f800283a 	ret
 102e2f0:	00802284 	movi	r2,138
 102e2f4:	20800015 	stw	r2,0(r4)
 102e2f8:	00bfffc4 	movi	r2,-1
 102e2fc:	f800283a 	ret

0102e300 <_wctomb_r>:
 102e300:	008040f4 	movhi	r2,259
 102e304:	defff904 	addi	sp,sp,-28
 102e308:	1098be04 	addi	r2,r2,25336
 102e30c:	dfc00615 	stw	ra,24(sp)
 102e310:	dc400515 	stw	r17,20(sp)
 102e314:	dc000415 	stw	r16,16(sp)
 102e318:	3823883a 	mov	r17,r7
 102e31c:	14000017 	ldw	r16,0(r2)
 102e320:	d9000115 	stw	r4,4(sp)
 102e324:	d9400215 	stw	r5,8(sp)
 102e328:	d9800315 	stw	r6,12(sp)
 102e32c:	1028d280 	call	1028d28 <__locale_charset>
 102e330:	d9000117 	ldw	r4,4(sp)
 102e334:	d9400217 	ldw	r5,8(sp)
 102e338:	d9800317 	ldw	r6,12(sp)
 102e33c:	dc400015 	stw	r17,0(sp)
 102e340:	100f883a 	mov	r7,r2
 102e344:	803ee83a 	callr	r16
 102e348:	dfc00617 	ldw	ra,24(sp)
 102e34c:	dc400517 	ldw	r17,20(sp)
 102e350:	dc000417 	ldw	r16,16(sp)
 102e354:	dec00704 	addi	sp,sp,28
 102e358:	f800283a 	ret

0102e35c <__udivdi3>:
 102e35c:	defff504 	addi	sp,sp,-44
 102e360:	dcc00415 	stw	r19,16(sp)
 102e364:	dc000115 	stw	r16,4(sp)
 102e368:	dfc00a15 	stw	ra,40(sp)
 102e36c:	df000915 	stw	fp,36(sp)
 102e370:	ddc00815 	stw	r23,32(sp)
 102e374:	dd800715 	stw	r22,28(sp)
 102e378:	dd400615 	stw	r21,24(sp)
 102e37c:	dd000515 	stw	r20,20(sp)
 102e380:	dc800315 	stw	r18,12(sp)
 102e384:	dc400215 	stw	r17,8(sp)
 102e388:	2027883a 	mov	r19,r4
 102e38c:	2821883a 	mov	r16,r5
 102e390:	3800421e 	bne	r7,zero,102e49c <__udivdi3+0x140>
 102e394:	3025883a 	mov	r18,r6
 102e398:	2023883a 	mov	r17,r4
 102e39c:	2980542e 	bgeu	r5,r6,102e4f0 <__udivdi3+0x194>
 102e3a0:	00bfffd4 	movui	r2,65535
 102e3a4:	282d883a 	mov	r22,r5
 102e3a8:	1180a836 	bltu	r2,r6,102e64c <__udivdi3+0x2f0>
 102e3ac:	00803fc4 	movi	r2,255
 102e3b0:	1181422e 	bgeu	r2,r6,102e8bc <__udivdi3+0x560>
 102e3b4:	00800204 	movi	r2,8
 102e3b8:	1007883a 	mov	r3,r2
 102e3bc:	3084d83a 	srl	r2,r6,r2
 102e3c0:	010040f4 	movhi	r4,259
 102e3c4:	2111c304 	addi	r4,r4,18188
 102e3c8:	2085883a 	add	r2,r4,r2
 102e3cc:	10800003 	ldbu	r2,0(r2)
 102e3d0:	10c7883a 	add	r3,r2,r3
 102e3d4:	00800804 	movi	r2,32
 102e3d8:	10c5c83a 	sub	r2,r2,r3
 102e3dc:	10000526 	beq	r2,zero,102e3f4 <__udivdi3+0x98>
 102e3e0:	80a0983a 	sll	r16,r16,r2
 102e3e4:	98c6d83a 	srl	r3,r19,r3
 102e3e8:	30a4983a 	sll	r18,r6,r2
 102e3ec:	98a2983a 	sll	r17,r19,r2
 102e3f0:	80ecb03a 	or	r22,r16,r3
 102e3f4:	902ad43a 	srli	r21,r18,16
 102e3f8:	b009883a 	mov	r4,r22
 102e3fc:	953fffcc 	andi	r20,r18,65535
 102e400:	a80b883a 	mov	r5,r21
 102e404:	1021ebc0 	call	1021ebc <__umodsi3>
 102e408:	b009883a 	mov	r4,r22
 102e40c:	a80b883a 	mov	r5,r21
 102e410:	1027883a 	mov	r19,r2
 102e414:	1021eb40 	call	1021eb4 <__udivsi3>
 102e418:	1021883a 	mov	r16,r2
 102e41c:	8806d43a 	srli	r3,r17,16
 102e420:	9804943a 	slli	r2,r19,16
 102e424:	8527383a 	mul	r19,r16,r20
 102e428:	10c4b03a 	or	r2,r2,r3
 102e42c:	14c0052e 	bgeu	r2,r19,102e444 <__udivdi3+0xe8>
 102e430:	1485883a 	add	r2,r2,r18
 102e434:	80ffffc4 	addi	r3,r16,-1
 102e438:	14800136 	bltu	r2,r18,102e440 <__udivdi3+0xe4>
 102e43c:	14c13436 	bltu	r2,r19,102e910 <__udivdi3+0x5b4>
 102e440:	1821883a 	mov	r16,r3
 102e444:	14e7c83a 	sub	r19,r2,r19
 102e448:	9809883a 	mov	r4,r19
 102e44c:	a80b883a 	mov	r5,r21
 102e450:	1021ebc0 	call	1021ebc <__umodsi3>
 102e454:	102d883a 	mov	r22,r2
 102e458:	9809883a 	mov	r4,r19
 102e45c:	a80b883a 	mov	r5,r21
 102e460:	1021eb40 	call	1021eb4 <__udivsi3>
 102e464:	b02c943a 	slli	r22,r22,16
 102e468:	1529383a 	mul	r20,r2,r20
 102e46c:	8c7fffcc 	andi	r17,r17,65535
 102e470:	b462b03a 	or	r17,r22,r17
 102e474:	8d00052e 	bgeu	r17,r20,102e48c <__udivdi3+0x130>
 102e478:	8ca3883a 	add	r17,r17,r18
 102e47c:	10ffffc4 	addi	r3,r2,-1
 102e480:	8c80f636 	bltu	r17,r18,102e85c <__udivdi3+0x500>
 102e484:	8d00f52e 	bgeu	r17,r20,102e85c <__udivdi3+0x500>
 102e488:	10bfff84 	addi	r2,r2,-2
 102e48c:	8020943a 	slli	r16,r16,16
 102e490:	0007883a 	mov	r3,zero
 102e494:	1404b03a 	or	r2,r2,r16
 102e498:	00005b06 	br	102e608 <__udivdi3+0x2ac>
 102e49c:	29c05836 	bltu	r5,r7,102e600 <__udivdi3+0x2a4>
 102e4a0:	00bfffd4 	movui	r2,65535
 102e4a4:	11c0642e 	bgeu	r2,r7,102e638 <__udivdi3+0x2dc>
 102e4a8:	00804034 	movhi	r2,256
 102e4ac:	10bfffc4 	addi	r2,r2,-1
 102e4b0:	11c0f32e 	bgeu	r2,r7,102e880 <__udivdi3+0x524>
 102e4b4:	00c00604 	movi	r3,24
 102e4b8:	180b883a 	mov	r5,r3
 102e4bc:	38c6d83a 	srl	r3,r7,r3
 102e4c0:	008040f4 	movhi	r2,259
 102e4c4:	1091c304 	addi	r2,r2,18188
 102e4c8:	10c7883a 	add	r3,r2,r3
 102e4cc:	18c00003 	ldbu	r3,0(r3)
 102e4d0:	01000804 	movi	r4,32
 102e4d4:	1947883a 	add	r3,r3,r5
 102e4d8:	20e5c83a 	sub	r18,r4,r3
 102e4dc:	9000661e 	bne	r18,zero,102e678 <__udivdi3+0x31c>
 102e4e0:	3c00f936 	bltu	r7,r16,102e8c8 <__udivdi3+0x56c>
 102e4e4:	9985403a 	cmpgeu	r2,r19,r6
 102e4e8:	0007883a 	mov	r3,zero
 102e4ec:	00004606 	br	102e608 <__udivdi3+0x2ac>
 102e4f0:	3000041e 	bne	r6,zero,102e504 <__udivdi3+0x1a8>
 102e4f4:	01000044 	movi	r4,1
 102e4f8:	000b883a 	mov	r5,zero
 102e4fc:	1021eb40 	call	1021eb4 <__udivsi3>
 102e500:	1025883a 	mov	r18,r2
 102e504:	00bfffd4 	movui	r2,65535
 102e508:	1480562e 	bgeu	r2,r18,102e664 <__udivdi3+0x308>
 102e50c:	00804034 	movhi	r2,256
 102e510:	10bfffc4 	addi	r2,r2,-1
 102e514:	1480e32e 	bgeu	r2,r18,102e8a4 <__udivdi3+0x548>
 102e518:	00800604 	movi	r2,24
 102e51c:	1007883a 	mov	r3,r2
 102e520:	9084d83a 	srl	r2,r18,r2
 102e524:	010040f4 	movhi	r4,259
 102e528:	2111c304 	addi	r4,r4,18188
 102e52c:	2085883a 	add	r2,r4,r2
 102e530:	10800003 	ldbu	r2,0(r2)
 102e534:	10c5883a 	add	r2,r2,r3
 102e538:	00c00804 	movi	r3,32
 102e53c:	1887c83a 	sub	r3,r3,r2
 102e540:	1800911e 	bne	r3,zero,102e788 <__udivdi3+0x42c>
 102e544:	9028d43a 	srli	r20,r18,16
 102e548:	84a1c83a 	sub	r16,r16,r18
 102e54c:	957fffcc 	andi	r21,r18,65535
 102e550:	00c00044 	movi	r3,1
 102e554:	8009883a 	mov	r4,r16
 102e558:	a00b883a 	mov	r5,r20
 102e55c:	d8c00015 	stw	r3,0(sp)
 102e560:	1021ebc0 	call	1021ebc <__umodsi3>
 102e564:	8009883a 	mov	r4,r16
 102e568:	a00b883a 	mov	r5,r20
 102e56c:	1027883a 	mov	r19,r2
 102e570:	1021eb40 	call	1021eb4 <__udivsi3>
 102e574:	1021883a 	mov	r16,r2
 102e578:	880cd43a 	srli	r6,r17,16
 102e57c:	9804943a 	slli	r2,r19,16
 102e580:	8567383a 	mul	r19,r16,r21
 102e584:	d8c00017 	ldw	r3,0(sp)
 102e588:	1188b03a 	or	r4,r2,r6
 102e58c:	24c0052e 	bgeu	r4,r19,102e5a4 <__udivdi3+0x248>
 102e590:	2489883a 	add	r4,r4,r18
 102e594:	80bfffc4 	addi	r2,r16,-1
 102e598:	24800136 	bltu	r4,r18,102e5a0 <__udivdi3+0x244>
 102e59c:	24c0d936 	bltu	r4,r19,102e904 <__udivdi3+0x5a8>
 102e5a0:	1021883a 	mov	r16,r2
 102e5a4:	24e7c83a 	sub	r19,r4,r19
 102e5a8:	9809883a 	mov	r4,r19
 102e5ac:	a00b883a 	mov	r5,r20
 102e5b0:	d8c00015 	stw	r3,0(sp)
 102e5b4:	1021ebc0 	call	1021ebc <__umodsi3>
 102e5b8:	102d883a 	mov	r22,r2
 102e5bc:	9809883a 	mov	r4,r19
 102e5c0:	a00b883a 	mov	r5,r20
 102e5c4:	1021eb40 	call	1021eb4 <__udivsi3>
 102e5c8:	b02c943a 	slli	r22,r22,16
 102e5cc:	156b383a 	mul	r21,r2,r21
 102e5d0:	8c7fffcc 	andi	r17,r17,65535
 102e5d4:	b462b03a 	or	r17,r22,r17
 102e5d8:	d8c00017 	ldw	r3,0(sp)
 102e5dc:	8d40052e 	bgeu	r17,r21,102e5f4 <__udivdi3+0x298>
 102e5e0:	8ca3883a 	add	r17,r17,r18
 102e5e4:	113fffc4 	addi	r4,r2,-1
 102e5e8:	8c809a36 	bltu	r17,r18,102e854 <__udivdi3+0x4f8>
 102e5ec:	8d40992e 	bgeu	r17,r21,102e854 <__udivdi3+0x4f8>
 102e5f0:	10bfff84 	addi	r2,r2,-2
 102e5f4:	8020943a 	slli	r16,r16,16
 102e5f8:	1404b03a 	or	r2,r2,r16
 102e5fc:	00000206 	br	102e608 <__udivdi3+0x2ac>
 102e600:	0007883a 	mov	r3,zero
 102e604:	0005883a 	mov	r2,zero
 102e608:	dfc00a17 	ldw	ra,40(sp)
 102e60c:	df000917 	ldw	fp,36(sp)
 102e610:	ddc00817 	ldw	r23,32(sp)
 102e614:	dd800717 	ldw	r22,28(sp)
 102e618:	dd400617 	ldw	r21,24(sp)
 102e61c:	dd000517 	ldw	r20,20(sp)
 102e620:	dcc00417 	ldw	r19,16(sp)
 102e624:	dc800317 	ldw	r18,12(sp)
 102e628:	dc400217 	ldw	r17,8(sp)
 102e62c:	dc000117 	ldw	r16,4(sp)
 102e630:	dec00b04 	addi	sp,sp,44
 102e634:	f800283a 	ret
 102e638:	00803fc4 	movi	r2,255
 102e63c:	11c0932e 	bgeu	r2,r7,102e88c <__udivdi3+0x530>
 102e640:	00c00204 	movi	r3,8
 102e644:	180b883a 	mov	r5,r3
 102e648:	003f9c06 	br	102e4bc <_gp+0xffff01d8>
 102e64c:	00804034 	movhi	r2,256
 102e650:	10bfffc4 	addi	r2,r2,-1
 102e654:	1180902e 	bgeu	r2,r6,102e898 <__udivdi3+0x53c>
 102e658:	00800604 	movi	r2,24
 102e65c:	1007883a 	mov	r3,r2
 102e660:	003f5606 	br	102e3bc <_gp+0xffff00d8>
 102e664:	00803fc4 	movi	r2,255
 102e668:	1480912e 	bgeu	r2,r18,102e8b0 <__udivdi3+0x554>
 102e66c:	00800204 	movi	r2,8
 102e670:	1007883a 	mov	r3,r2
 102e674:	003faa06 	br	102e520 <_gp+0xffff023c>
 102e678:	30eed83a 	srl	r23,r6,r3
 102e67c:	3c8e983a 	sll	r7,r7,r18
 102e680:	80f8d83a 	srl	fp,r16,r3
 102e684:	98c6d83a 	srl	r3,r19,r3
 102e688:	3deeb03a 	or	r23,r7,r23
 102e68c:	b828d43a 	srli	r20,r23,16
 102e690:	84a0983a 	sll	r16,r16,r18
 102e694:	e009883a 	mov	r4,fp
 102e698:	a00b883a 	mov	r5,r20
 102e69c:	80e2b03a 	or	r17,r16,r3
 102e6a0:	34aa983a 	sll	r21,r6,r18
 102e6a4:	1021ebc0 	call	1021ebc <__umodsi3>
 102e6a8:	e009883a 	mov	r4,fp
 102e6ac:	a00b883a 	mov	r5,r20
 102e6b0:	102d883a 	mov	r22,r2
 102e6b4:	1021eb40 	call	1021eb4 <__udivsi3>
 102e6b8:	1021883a 	mov	r16,r2
 102e6bc:	bf3fffcc 	andi	fp,r23,65535
 102e6c0:	b004943a 	slli	r2,r22,16
 102e6c4:	8808d43a 	srli	r4,r17,16
 102e6c8:	872d383a 	mul	r22,r16,fp
 102e6cc:	1104b03a 	or	r2,r2,r4
 102e6d0:	1580042e 	bgeu	r2,r22,102e6e4 <__udivdi3+0x388>
 102e6d4:	15c5883a 	add	r2,r2,r23
 102e6d8:	80ffffc4 	addi	r3,r16,-1
 102e6dc:	15c0812e 	bgeu	r2,r23,102e8e4 <__udivdi3+0x588>
 102e6e0:	1821883a 	mov	r16,r3
 102e6e4:	15adc83a 	sub	r22,r2,r22
 102e6e8:	b009883a 	mov	r4,r22
 102e6ec:	a00b883a 	mov	r5,r20
 102e6f0:	1021ebc0 	call	1021ebc <__umodsi3>
 102e6f4:	a00b883a 	mov	r5,r20
 102e6f8:	b009883a 	mov	r4,r22
 102e6fc:	d8800015 	stw	r2,0(sp)
 102e700:	1021eb40 	call	1021eb4 <__udivsi3>
 102e704:	d8c00017 	ldw	r3,0(sp)
 102e708:	170b383a 	mul	r5,r2,fp
 102e70c:	8c7fffcc 	andi	r17,r17,65535
 102e710:	1806943a 	slli	r3,r3,16
 102e714:	1c46b03a 	or	r3,r3,r17
 102e718:	1940042e 	bgeu	r3,r5,102e72c <__udivdi3+0x3d0>
 102e71c:	1dc7883a 	add	r3,r3,r23
 102e720:	113fffc4 	addi	r4,r2,-1
 102e724:	1dc06b2e 	bgeu	r3,r23,102e8d4 <__udivdi3+0x578>
 102e728:	2005883a 	mov	r2,r4
 102e72c:	8020943a 	slli	r16,r16,16
 102e730:	a9ffffcc 	andi	r7,r21,65535
 102e734:	a82ad43a 	srli	r21,r21,16
 102e738:	1404b03a 	or	r2,r2,r16
 102e73c:	113fffcc 	andi	r4,r2,65535
 102e740:	100cd43a 	srli	r6,r2,16
 102e744:	21d3383a 	mul	r9,r4,r7
 102e748:	2549383a 	mul	r4,r4,r21
 102e74c:	31cf383a 	mul	r7,r6,r7
 102e750:	4810d43a 	srli	r8,r9,16
 102e754:	1947c83a 	sub	r3,r3,r5
 102e758:	3909883a 	add	r4,r7,r4
 102e75c:	2209883a 	add	r4,r4,r8
 102e760:	354d383a 	mul	r6,r6,r21
 102e764:	21c0022e 	bgeu	r4,r7,102e770 <__udivdi3+0x414>
 102e768:	01400074 	movhi	r5,1
 102e76c:	314d883a 	add	r6,r6,r5
 102e770:	202ad43a 	srli	r21,r4,16
 102e774:	354d883a 	add	r6,r6,r21
 102e778:	19803f36 	bltu	r3,r6,102e878 <__udivdi3+0x51c>
 102e77c:	19803926 	beq	r3,r6,102e864 <__udivdi3+0x508>
 102e780:	0007883a 	mov	r3,zero
 102e784:	003fa006 	br	102e608 <_gp+0xffff0324>
 102e788:	90e4983a 	sll	r18,r18,r3
 102e78c:	80aad83a 	srl	r21,r16,r2
 102e790:	80e0983a 	sll	r16,r16,r3
 102e794:	9028d43a 	srli	r20,r18,16
 102e798:	9884d83a 	srl	r2,r19,r2
 102e79c:	a809883a 	mov	r4,r21
 102e7a0:	a00b883a 	mov	r5,r20
 102e7a4:	80acb03a 	or	r22,r16,r2
 102e7a8:	98e2983a 	sll	r17,r19,r3
 102e7ac:	1021ebc0 	call	1021ebc <__umodsi3>
 102e7b0:	a809883a 	mov	r4,r21
 102e7b4:	a00b883a 	mov	r5,r20
 102e7b8:	1021883a 	mov	r16,r2
 102e7bc:	1021eb40 	call	1021eb4 <__udivsi3>
 102e7c0:	957fffcc 	andi	r21,r18,65535
 102e7c4:	8020943a 	slli	r16,r16,16
 102e7c8:	b00ad43a 	srli	r5,r22,16
 102e7cc:	1567383a 	mul	r19,r2,r21
 102e7d0:	102f883a 	mov	r23,r2
 102e7d4:	8148b03a 	or	r4,r16,r5
 102e7d8:	24c0062e 	bgeu	r4,r19,102e7f4 <__udivdi3+0x498>
 102e7dc:	2489883a 	add	r4,r4,r18
 102e7e0:	10bfffc4 	addi	r2,r2,-1
 102e7e4:	24804536 	bltu	r4,r18,102e8fc <__udivdi3+0x5a0>
 102e7e8:	24c0442e 	bgeu	r4,r19,102e8fc <__udivdi3+0x5a0>
 102e7ec:	bdffff84 	addi	r23,r23,-2
 102e7f0:	2489883a 	add	r4,r4,r18
 102e7f4:	24e7c83a 	sub	r19,r4,r19
 102e7f8:	9809883a 	mov	r4,r19
 102e7fc:	a00b883a 	mov	r5,r20
 102e800:	1021ebc0 	call	1021ebc <__umodsi3>
 102e804:	1021883a 	mov	r16,r2
 102e808:	9809883a 	mov	r4,r19
 102e80c:	a00b883a 	mov	r5,r20
 102e810:	1021eb40 	call	1021eb4 <__udivsi3>
 102e814:	8020943a 	slli	r16,r16,16
 102e818:	1007883a 	mov	r3,r2
 102e81c:	1545383a 	mul	r2,r2,r21
 102e820:	b13fffcc 	andi	r4,r22,65535
 102e824:	8108b03a 	or	r4,r16,r4
 102e828:	2080062e 	bgeu	r4,r2,102e844 <__udivdi3+0x4e8>
 102e82c:	2489883a 	add	r4,r4,r18
 102e830:	197fffc4 	addi	r5,r3,-1
 102e834:	24802f36 	bltu	r4,r18,102e8f4 <__udivdi3+0x598>
 102e838:	20802e2e 	bgeu	r4,r2,102e8f4 <__udivdi3+0x598>
 102e83c:	18ffff84 	addi	r3,r3,-2
 102e840:	2489883a 	add	r4,r4,r18
 102e844:	b82e943a 	slli	r23,r23,16
 102e848:	20a1c83a 	sub	r16,r4,r2
 102e84c:	1dc6b03a 	or	r3,r3,r23
 102e850:	003f4006 	br	102e554 <_gp+0xffff0270>
 102e854:	2005883a 	mov	r2,r4
 102e858:	003f6606 	br	102e5f4 <_gp+0xffff0310>
 102e85c:	1805883a 	mov	r2,r3
 102e860:	003f0a06 	br	102e48c <_gp+0xffff01a8>
 102e864:	2006943a 	slli	r3,r4,16
 102e868:	9c88983a 	sll	r4,r19,r18
 102e86c:	4a7fffcc 	andi	r9,r9,65535
 102e870:	1a47883a 	add	r3,r3,r9
 102e874:	20ffc22e 	bgeu	r4,r3,102e780 <_gp+0xffff049c>
 102e878:	10bfffc4 	addi	r2,r2,-1
 102e87c:	003fc006 	br	102e780 <_gp+0xffff049c>
 102e880:	00c00404 	movi	r3,16
 102e884:	180b883a 	mov	r5,r3
 102e888:	003f0c06 	br	102e4bc <_gp+0xffff01d8>
 102e88c:	0007883a 	mov	r3,zero
 102e890:	000b883a 	mov	r5,zero
 102e894:	003f0906 	br	102e4bc <_gp+0xffff01d8>
 102e898:	00800404 	movi	r2,16
 102e89c:	1007883a 	mov	r3,r2
 102e8a0:	003ec606 	br	102e3bc <_gp+0xffff00d8>
 102e8a4:	00800404 	movi	r2,16
 102e8a8:	1007883a 	mov	r3,r2
 102e8ac:	003f1c06 	br	102e520 <_gp+0xffff023c>
 102e8b0:	0005883a 	mov	r2,zero
 102e8b4:	0007883a 	mov	r3,zero
 102e8b8:	003f1906 	br	102e520 <_gp+0xffff023c>
 102e8bc:	0005883a 	mov	r2,zero
 102e8c0:	0007883a 	mov	r3,zero
 102e8c4:	003ebd06 	br	102e3bc <_gp+0xffff00d8>
 102e8c8:	0007883a 	mov	r3,zero
 102e8cc:	00800044 	movi	r2,1
 102e8d0:	003f4d06 	br	102e608 <_gp+0xffff0324>
 102e8d4:	197f942e 	bgeu	r3,r5,102e728 <_gp+0xffff0444>
 102e8d8:	10bfff84 	addi	r2,r2,-2
 102e8dc:	1dc7883a 	add	r3,r3,r23
 102e8e0:	003f9206 	br	102e72c <_gp+0xffff0448>
 102e8e4:	15bf7e2e 	bgeu	r2,r22,102e6e0 <_gp+0xffff03fc>
 102e8e8:	843fff84 	addi	r16,r16,-2
 102e8ec:	15c5883a 	add	r2,r2,r23
 102e8f0:	003f7c06 	br	102e6e4 <_gp+0xffff0400>
 102e8f4:	2807883a 	mov	r3,r5
 102e8f8:	003fd206 	br	102e844 <_gp+0xffff0560>
 102e8fc:	102f883a 	mov	r23,r2
 102e900:	003fbc06 	br	102e7f4 <_gp+0xffff0510>
 102e904:	843fff84 	addi	r16,r16,-2
 102e908:	2489883a 	add	r4,r4,r18
 102e90c:	003f2506 	br	102e5a4 <_gp+0xffff02c0>
 102e910:	843fff84 	addi	r16,r16,-2
 102e914:	1485883a 	add	r2,r2,r18
 102e918:	003eca06 	br	102e444 <_gp+0xffff0160>

0102e91c <__umoddi3>:
 102e91c:	defff404 	addi	sp,sp,-48
 102e920:	ddc00915 	stw	r23,36(sp)
 102e924:	dc400315 	stw	r17,12(sp)
 102e928:	dc000215 	stw	r16,8(sp)
 102e92c:	dfc00b15 	stw	ra,44(sp)
 102e930:	df000a15 	stw	fp,40(sp)
 102e934:	dd800815 	stw	r22,32(sp)
 102e938:	dd400715 	stw	r21,28(sp)
 102e93c:	dd000615 	stw	r20,24(sp)
 102e940:	dcc00515 	stw	r19,20(sp)
 102e944:	dc800415 	stw	r18,16(sp)
 102e948:	2021883a 	mov	r16,r4
 102e94c:	2823883a 	mov	r17,r5
 102e950:	282f883a 	mov	r23,r5
 102e954:	3800381e 	bne	r7,zero,102ea38 <__umoddi3+0x11c>
 102e958:	3027883a 	mov	r19,r6
 102e95c:	2029883a 	mov	r20,r4
 102e960:	29804e2e 	bgeu	r5,r6,102ea9c <__umoddi3+0x180>
 102e964:	00bfffd4 	movui	r2,65535
 102e968:	11809c36 	bltu	r2,r6,102ebdc <__umoddi3+0x2c0>
 102e96c:	00803fc4 	movi	r2,255
 102e970:	11813b2e 	bgeu	r2,r6,102ee60 <__umoddi3+0x544>
 102e974:	01400204 	movi	r5,8
 102e978:	2805883a 	mov	r2,r5
 102e97c:	314ad83a 	srl	r5,r6,r5
 102e980:	00c040f4 	movhi	r3,259
 102e984:	18d1c304 	addi	r3,r3,18188
 102e988:	194b883a 	add	r5,r3,r5
 102e98c:	29000003 	ldbu	r4,0(r5)
 102e990:	2089883a 	add	r4,r4,r2
 102e994:	00800804 	movi	r2,32
 102e998:	1105c83a 	sub	r2,r2,r4
 102e99c:	1000ec26 	beq	r2,zero,102ed50 <__umoddi3+0x434>
 102e9a0:	88a2983a 	sll	r17,r17,r2
 102e9a4:	8108d83a 	srl	r4,r16,r4
 102e9a8:	30a6983a 	sll	r19,r6,r2
 102e9ac:	80a8983a 	sll	r20,r16,r2
 102e9b0:	1025883a 	mov	r18,r2
 102e9b4:	892eb03a 	or	r23,r17,r4
 102e9b8:	982cd43a 	srli	r22,r19,16
 102e9bc:	b809883a 	mov	r4,r23
 102e9c0:	9d7fffcc 	andi	r21,r19,65535
 102e9c4:	b00b883a 	mov	r5,r22
 102e9c8:	1021ebc0 	call	1021ebc <__umodsi3>
 102e9cc:	b809883a 	mov	r4,r23
 102e9d0:	b00b883a 	mov	r5,r22
 102e9d4:	1021883a 	mov	r16,r2
 102e9d8:	1021eb40 	call	1021eb4 <__udivsi3>
 102e9dc:	8020943a 	slli	r16,r16,16
 102e9e0:	a00cd43a 	srli	r6,r20,16
 102e9e4:	1545383a 	mul	r2,r2,r21
 102e9e8:	8188b03a 	or	r4,r16,r6
 102e9ec:	2080042e 	bgeu	r4,r2,102ea00 <__umoddi3+0xe4>
 102e9f0:	24c9883a 	add	r4,r4,r19
 102e9f4:	24c00236 	bltu	r4,r19,102ea00 <__umoddi3+0xe4>
 102e9f8:	2080012e 	bgeu	r4,r2,102ea00 <__umoddi3+0xe4>
 102e9fc:	24c9883a 	add	r4,r4,r19
 102ea00:	20a3c83a 	sub	r17,r4,r2
 102ea04:	8809883a 	mov	r4,r17
 102ea08:	b00b883a 	mov	r5,r22
 102ea0c:	1021ebc0 	call	1021ebc <__umodsi3>
 102ea10:	8809883a 	mov	r4,r17
 102ea14:	b00b883a 	mov	r5,r22
 102ea18:	1021883a 	mov	r16,r2
 102ea1c:	1021eb40 	call	1021eb4 <__udivsi3>
 102ea20:	8006943a 	slli	r3,r16,16
 102ea24:	1545383a 	mul	r2,r2,r21
 102ea28:	a13fffcc 	andi	r4,r20,65535
 102ea2c:	1906b03a 	or	r3,r3,r4
 102ea30:	1880532e 	bgeu	r3,r2,102eb80 <__umoddi3+0x264>
 102ea34:	00004e06 	br	102eb70 <__umoddi3+0x254>
 102ea38:	29c05536 	bltu	r5,r7,102eb90 <__umoddi3+0x274>
 102ea3c:	00bfffd4 	movui	r2,65535
 102ea40:	11c0612e 	bgeu	r2,r7,102ebc8 <__umoddi3+0x2ac>
 102ea44:	00804034 	movhi	r2,256
 102ea48:	10bfffc4 	addi	r2,r2,-1
 102ea4c:	11c0f82e 	bgeu	r2,r7,102ee30 <__umoddi3+0x514>
 102ea50:	01400604 	movi	r5,24
 102ea54:	282b883a 	mov	r21,r5
 102ea58:	394ad83a 	srl	r5,r7,r5
 102ea5c:	00c040f4 	movhi	r3,259
 102ea60:	18d1c304 	addi	r3,r3,18188
 102ea64:	194b883a 	add	r5,r3,r5
 102ea68:	28800003 	ldbu	r2,0(r5)
 102ea6c:	00c00804 	movi	r3,32
 102ea70:	156b883a 	add	r21,r2,r21
 102ea74:	1d69c83a 	sub	r20,r3,r21
 102ea78:	a000631e 	bne	r20,zero,102ec08 <__umoddi3+0x2ec>
 102ea7c:	3c400136 	bltu	r7,r17,102ea84 <__umoddi3+0x168>
 102ea80:	81810436 	bltu	r16,r6,102ee94 <__umoddi3+0x578>
 102ea84:	8185c83a 	sub	r2,r16,r6
 102ea88:	89e3c83a 	sub	r17,r17,r7
 102ea8c:	8087803a 	cmpltu	r3,r16,r2
 102ea90:	88efc83a 	sub	r23,r17,r3
 102ea94:	b807883a 	mov	r3,r23
 102ea98:	00003f06 	br	102eb98 <__umoddi3+0x27c>
 102ea9c:	3000041e 	bne	r6,zero,102eab0 <__umoddi3+0x194>
 102eaa0:	01000044 	movi	r4,1
 102eaa4:	000b883a 	mov	r5,zero
 102eaa8:	1021eb40 	call	1021eb4 <__udivsi3>
 102eaac:	1027883a 	mov	r19,r2
 102eab0:	00bfffd4 	movui	r2,65535
 102eab4:	14c04f2e 	bgeu	r2,r19,102ebf4 <__umoddi3+0x2d8>
 102eab8:	00804034 	movhi	r2,256
 102eabc:	10bfffc4 	addi	r2,r2,-1
 102eac0:	14c0e42e 	bgeu	r2,r19,102ee54 <__umoddi3+0x538>
 102eac4:	00800604 	movi	r2,24
 102eac8:	1007883a 	mov	r3,r2
 102eacc:	9884d83a 	srl	r2,r19,r2
 102ead0:	010040f4 	movhi	r4,259
 102ead4:	2111c304 	addi	r4,r4,18188
 102ead8:	2085883a 	add	r2,r4,r2
 102eadc:	11000003 	ldbu	r4,0(r2)
 102eae0:	00800804 	movi	r2,32
 102eae4:	20c7883a 	add	r3,r4,r3
 102eae8:	10c5c83a 	sub	r2,r2,r3
 102eaec:	10009a1e 	bne	r2,zero,102ed58 <__umoddi3+0x43c>
 102eaf0:	982cd43a 	srli	r22,r19,16
 102eaf4:	8ce3c83a 	sub	r17,r17,r19
 102eaf8:	9c3fffcc 	andi	r16,r19,65535
 102eafc:	0025883a 	mov	r18,zero
 102eb00:	8809883a 	mov	r4,r17
 102eb04:	b00b883a 	mov	r5,r22
 102eb08:	1021ebc0 	call	1021ebc <__umodsi3>
 102eb0c:	8809883a 	mov	r4,r17
 102eb10:	b00b883a 	mov	r5,r22
 102eb14:	102b883a 	mov	r21,r2
 102eb18:	1021eb40 	call	1021eb4 <__udivsi3>
 102eb1c:	a806943a 	slli	r3,r21,16
 102eb20:	a008d43a 	srli	r4,r20,16
 102eb24:	1405383a 	mul	r2,r2,r16
 102eb28:	190cb03a 	or	r6,r3,r4
 102eb2c:	3080032e 	bgeu	r6,r2,102eb3c <__umoddi3+0x220>
 102eb30:	34cd883a 	add	r6,r6,r19
 102eb34:	34c00136 	bltu	r6,r19,102eb3c <__umoddi3+0x220>
 102eb38:	3080d436 	bltu	r6,r2,102ee8c <__umoddi3+0x570>
 102eb3c:	30abc83a 	sub	r21,r6,r2
 102eb40:	a809883a 	mov	r4,r21
 102eb44:	b00b883a 	mov	r5,r22
 102eb48:	1021ebc0 	call	1021ebc <__umodsi3>
 102eb4c:	1023883a 	mov	r17,r2
 102eb50:	a809883a 	mov	r4,r21
 102eb54:	b00b883a 	mov	r5,r22
 102eb58:	1021eb40 	call	1021eb4 <__udivsi3>
 102eb5c:	8822943a 	slli	r17,r17,16
 102eb60:	1405383a 	mul	r2,r2,r16
 102eb64:	a13fffcc 	andi	r4,r20,65535
 102eb68:	8906b03a 	or	r3,r17,r4
 102eb6c:	1880042e 	bgeu	r3,r2,102eb80 <__umoddi3+0x264>
 102eb70:	1cc7883a 	add	r3,r3,r19
 102eb74:	1cc00236 	bltu	r3,r19,102eb80 <__umoddi3+0x264>
 102eb78:	1880012e 	bgeu	r3,r2,102eb80 <__umoddi3+0x264>
 102eb7c:	1cc7883a 	add	r3,r3,r19
 102eb80:	1887c83a 	sub	r3,r3,r2
 102eb84:	1c84d83a 	srl	r2,r3,r18
 102eb88:	0007883a 	mov	r3,zero
 102eb8c:	00000206 	br	102eb98 <__umoddi3+0x27c>
 102eb90:	2005883a 	mov	r2,r4
 102eb94:	2807883a 	mov	r3,r5
 102eb98:	dfc00b17 	ldw	ra,44(sp)
 102eb9c:	df000a17 	ldw	fp,40(sp)
 102eba0:	ddc00917 	ldw	r23,36(sp)
 102eba4:	dd800817 	ldw	r22,32(sp)
 102eba8:	dd400717 	ldw	r21,28(sp)
 102ebac:	dd000617 	ldw	r20,24(sp)
 102ebb0:	dcc00517 	ldw	r19,20(sp)
 102ebb4:	dc800417 	ldw	r18,16(sp)
 102ebb8:	dc400317 	ldw	r17,12(sp)
 102ebbc:	dc000217 	ldw	r16,8(sp)
 102ebc0:	dec00c04 	addi	sp,sp,48
 102ebc4:	f800283a 	ret
 102ebc8:	00803fc4 	movi	r2,255
 102ebcc:	11c0952e 	bgeu	r2,r7,102ee24 <__umoddi3+0x508>
 102ebd0:	01400204 	movi	r5,8
 102ebd4:	282b883a 	mov	r21,r5
 102ebd8:	003f9f06 	br	102ea58 <_gp+0xffff0774>
 102ebdc:	00804034 	movhi	r2,256
 102ebe0:	10bfffc4 	addi	r2,r2,-1
 102ebe4:	1180952e 	bgeu	r2,r6,102ee3c <__umoddi3+0x520>
 102ebe8:	01400604 	movi	r5,24
 102ebec:	2805883a 	mov	r2,r5
 102ebf0:	003f6206 	br	102e97c <_gp+0xffff0698>
 102ebf4:	00803fc4 	movi	r2,255
 102ebf8:	14c0932e 	bgeu	r2,r19,102ee48 <__umoddi3+0x52c>
 102ebfc:	00800204 	movi	r2,8
 102ec00:	1007883a 	mov	r3,r2
 102ec04:	003fb106 	br	102eacc <_gp+0xffff07e8>
 102ec08:	3548d83a 	srl	r4,r6,r21
 102ec0c:	3d0e983a 	sll	r7,r7,r20
 102ec10:	8d10983a 	sll	r8,r17,r20
 102ec14:	8d6cd83a 	srl	r22,r17,r21
 102ec18:	3922b03a 	or	r17,r7,r4
 102ec1c:	882ed43a 	srli	r23,r17,16
 102ec20:	8564d83a 	srl	r18,r16,r21
 102ec24:	b009883a 	mov	r4,r22
 102ec28:	b80b883a 	mov	r5,r23
 102ec2c:	44a4b03a 	or	r18,r8,r18
 102ec30:	3526983a 	sll	r19,r6,r20
 102ec34:	1021ebc0 	call	1021ebc <__umodsi3>
 102ec38:	b009883a 	mov	r4,r22
 102ec3c:	b80b883a 	mov	r5,r23
 102ec40:	1039883a 	mov	fp,r2
 102ec44:	1021eb40 	call	1021eb4 <__udivsi3>
 102ec48:	102d883a 	mov	r22,r2
 102ec4c:	8a3fffcc 	andi	r8,r17,65535
 102ec50:	e004943a 	slli	r2,fp,16
 102ec54:	900cd43a 	srli	r6,r18,16
 102ec58:	b239383a 	mul	fp,r22,r8
 102ec5c:	8520983a 	sll	r16,r16,r20
 102ec60:	118ab03a 	or	r5,r2,r6
 102ec64:	2f00042e 	bgeu	r5,fp,102ec78 <__umoddi3+0x35c>
 102ec68:	2c4b883a 	add	r5,r5,r17
 102ec6c:	b0bfffc4 	addi	r2,r22,-1
 102ec70:	2c40822e 	bgeu	r5,r17,102ee7c <__umoddi3+0x560>
 102ec74:	102d883a 	mov	r22,r2
 102ec78:	2f39c83a 	sub	fp,r5,fp
 102ec7c:	e009883a 	mov	r4,fp
 102ec80:	b80b883a 	mov	r5,r23
 102ec84:	da000115 	stw	r8,4(sp)
 102ec88:	1021ebc0 	call	1021ebc <__umodsi3>
 102ec8c:	e009883a 	mov	r4,fp
 102ec90:	b80b883a 	mov	r5,r23
 102ec94:	d8800015 	stw	r2,0(sp)
 102ec98:	1021eb40 	call	1021eb4 <__udivsi3>
 102ec9c:	d9800017 	ldw	r6,0(sp)
 102eca0:	da000117 	ldw	r8,4(sp)
 102eca4:	94bfffcc 	andi	r18,r18,65535
 102eca8:	300c943a 	slli	r6,r6,16
 102ecac:	1209383a 	mul	r4,r2,r8
 102ecb0:	3490b03a 	or	r8,r6,r18
 102ecb4:	4100042e 	bgeu	r8,r4,102ecc8 <__umoddi3+0x3ac>
 102ecb8:	4451883a 	add	r8,r8,r17
 102ecbc:	10ffffc4 	addi	r3,r2,-1
 102ecc0:	44406a2e 	bgeu	r8,r17,102ee6c <__umoddi3+0x550>
 102ecc4:	1805883a 	mov	r2,r3
 102ecc8:	b012943a 	slli	r9,r22,16
 102eccc:	9abfffcc 	andi	r10,r19,65535
 102ecd0:	980ed43a 	srli	r7,r19,16
 102ecd4:	124ab03a 	or	r5,r2,r9
 102ecd8:	2a7fffcc 	andi	r9,r5,65535
 102ecdc:	280ad43a 	srli	r5,r5,16
 102ece0:	4a8d383a 	mul	r6,r9,r10
 102ece4:	49d3383a 	mul	r9,r9,r7
 102ece8:	2a95383a 	mul	r10,r5,r10
 102ecec:	3004d43a 	srli	r2,r6,16
 102ecf0:	4111c83a 	sub	r8,r8,r4
 102ecf4:	5253883a 	add	r9,r10,r9
 102ecf8:	4893883a 	add	r9,r9,r2
 102ecfc:	29cb383a 	mul	r5,r5,r7
 102ed00:	4a80022e 	bgeu	r9,r10,102ed0c <__umoddi3+0x3f0>
 102ed04:	00800074 	movhi	r2,1
 102ed08:	288b883a 	add	r5,r5,r2
 102ed0c:	4808d43a 	srli	r4,r9,16
 102ed10:	4812943a 	slli	r9,r9,16
 102ed14:	31bfffcc 	andi	r6,r6,65535
 102ed18:	290b883a 	add	r5,r5,r4
 102ed1c:	498d883a 	add	r6,r9,r6
 102ed20:	41403a36 	bltu	r8,r5,102ee0c <__umoddi3+0x4f0>
 102ed24:	41405d26 	beq	r8,r5,102ee9c <__umoddi3+0x580>
 102ed28:	4149c83a 	sub	r4,r8,r5
 102ed2c:	300f883a 	mov	r7,r6
 102ed30:	81cfc83a 	sub	r7,r16,r7
 102ed34:	81c7803a 	cmpltu	r3,r16,r7
 102ed38:	20c7c83a 	sub	r3,r4,r3
 102ed3c:	1d44983a 	sll	r2,r3,r21
 102ed40:	3d0ed83a 	srl	r7,r7,r20
 102ed44:	1d06d83a 	srl	r3,r3,r20
 102ed48:	11c4b03a 	or	r2,r2,r7
 102ed4c:	003f9206 	br	102eb98 <_gp+0xffff08b4>
 102ed50:	0025883a 	mov	r18,zero
 102ed54:	003f1806 	br	102e9b8 <_gp+0xffff06d4>
 102ed58:	98a6983a 	sll	r19,r19,r2
 102ed5c:	88e8d83a 	srl	r20,r17,r3
 102ed60:	80c6d83a 	srl	r3,r16,r3
 102ed64:	982cd43a 	srli	r22,r19,16
 102ed68:	88a2983a 	sll	r17,r17,r2
 102ed6c:	a009883a 	mov	r4,r20
 102ed70:	b00b883a 	mov	r5,r22
 102ed74:	88eab03a 	or	r21,r17,r3
 102ed78:	1025883a 	mov	r18,r2
 102ed7c:	1021ebc0 	call	1021ebc <__umodsi3>
 102ed80:	a009883a 	mov	r4,r20
 102ed84:	b00b883a 	mov	r5,r22
 102ed88:	1023883a 	mov	r17,r2
 102ed8c:	1021eb40 	call	1021eb4 <__udivsi3>
 102ed90:	9f3fffcc 	andi	fp,r19,65535
 102ed94:	8822943a 	slli	r17,r17,16
 102ed98:	a80ad43a 	srli	r5,r21,16
 102ed9c:	1705383a 	mul	r2,r2,fp
 102eda0:	84a8983a 	sll	r20,r16,r18
 102eda4:	8948b03a 	or	r4,r17,r5
 102eda8:	2080042e 	bgeu	r4,r2,102edbc <__umoddi3+0x4a0>
 102edac:	24c9883a 	add	r4,r4,r19
 102edb0:	24c00236 	bltu	r4,r19,102edbc <__umoddi3+0x4a0>
 102edb4:	2080012e 	bgeu	r4,r2,102edbc <__umoddi3+0x4a0>
 102edb8:	24c9883a 	add	r4,r4,r19
 102edbc:	20afc83a 	sub	r23,r4,r2
 102edc0:	b809883a 	mov	r4,r23
 102edc4:	b00b883a 	mov	r5,r22
 102edc8:	1021ebc0 	call	1021ebc <__umodsi3>
 102edcc:	1023883a 	mov	r17,r2
 102edd0:	b809883a 	mov	r4,r23
 102edd4:	b00b883a 	mov	r5,r22
 102edd8:	1021eb40 	call	1021eb4 <__udivsi3>
 102eddc:	8822943a 	slli	r17,r17,16
 102ede0:	1705383a 	mul	r2,r2,fp
 102ede4:	a93fffcc 	andi	r4,r21,65535
 102ede8:	8908b03a 	or	r4,r17,r4
 102edec:	2080042e 	bgeu	r4,r2,102ee00 <__umoddi3+0x4e4>
 102edf0:	24c9883a 	add	r4,r4,r19
 102edf4:	24c00236 	bltu	r4,r19,102ee00 <__umoddi3+0x4e4>
 102edf8:	2080012e 	bgeu	r4,r2,102ee00 <__umoddi3+0x4e4>
 102edfc:	24c9883a 	add	r4,r4,r19
 102ee00:	20a3c83a 	sub	r17,r4,r2
 102ee04:	e021883a 	mov	r16,fp
 102ee08:	003f3d06 	br	102eb00 <_gp+0xffff081c>
 102ee0c:	34cfc83a 	sub	r7,r6,r19
 102ee10:	2c4bc83a 	sub	r5,r5,r17
 102ee14:	31cd803a 	cmpltu	r6,r6,r7
 102ee18:	298dc83a 	sub	r6,r5,r6
 102ee1c:	4189c83a 	sub	r4,r8,r6
 102ee20:	003fc306 	br	102ed30 <_gp+0xffff0a4c>
 102ee24:	000b883a 	mov	r5,zero
 102ee28:	002b883a 	mov	r21,zero
 102ee2c:	003f0a06 	br	102ea58 <_gp+0xffff0774>
 102ee30:	01400404 	movi	r5,16
 102ee34:	282b883a 	mov	r21,r5
 102ee38:	003f0706 	br	102ea58 <_gp+0xffff0774>
 102ee3c:	01400404 	movi	r5,16
 102ee40:	2805883a 	mov	r2,r5
 102ee44:	003ecd06 	br	102e97c <_gp+0xffff0698>
 102ee48:	0005883a 	mov	r2,zero
 102ee4c:	0007883a 	mov	r3,zero
 102ee50:	003f1e06 	br	102eacc <_gp+0xffff07e8>
 102ee54:	00800404 	movi	r2,16
 102ee58:	1007883a 	mov	r3,r2
 102ee5c:	003f1b06 	br	102eacc <_gp+0xffff07e8>
 102ee60:	000b883a 	mov	r5,zero
 102ee64:	0005883a 	mov	r2,zero
 102ee68:	003ec406 	br	102e97c <_gp+0xffff0698>
 102ee6c:	413f952e 	bgeu	r8,r4,102ecc4 <_gp+0xffff09e0>
 102ee70:	10bfff84 	addi	r2,r2,-2
 102ee74:	4451883a 	add	r8,r8,r17
 102ee78:	003f9306 	br	102ecc8 <_gp+0xffff09e4>
 102ee7c:	2f3f7d2e 	bgeu	r5,fp,102ec74 <_gp+0xffff0990>
 102ee80:	b5bfff84 	addi	r22,r22,-2
 102ee84:	2c4b883a 	add	r5,r5,r17
 102ee88:	003f7b06 	br	102ec78 <_gp+0xffff0994>
 102ee8c:	34cd883a 	add	r6,r6,r19
 102ee90:	003f2a06 	br	102eb3c <_gp+0xffff0858>
 102ee94:	8005883a 	mov	r2,r16
 102ee98:	003efe06 	br	102ea94 <_gp+0xffff07b0>
 102ee9c:	81bfdb36 	bltu	r16,r6,102ee0c <_gp+0xffff0b28>
 102eea0:	300f883a 	mov	r7,r6
 102eea4:	0009883a 	mov	r4,zero
 102eea8:	003fa106 	br	102ed30 <_gp+0xffff0a4c>

0102eeac <__adddf3>:
 102eeac:	02000434 	movhi	r8,16
 102eeb0:	423fffc4 	addi	r8,r8,-1
 102eeb4:	defffb04 	addi	sp,sp,-20
 102eeb8:	2a12703a 	and	r9,r5,r8
 102eebc:	2806d7fa 	srli	r3,r5,31
 102eec0:	3a10703a 	and	r8,r7,r8
 102eec4:	3804d53a 	srli	r2,r7,20
 102eec8:	3014d77a 	srli	r10,r6,29
 102eecc:	dc000015 	stw	r16,0(sp)
 102eed0:	481290fa 	slli	r9,r9,3
 102eed4:	2820d53a 	srli	r16,r5,20
 102eed8:	401090fa 	slli	r8,r8,3
 102eedc:	200ad77a 	srli	r5,r4,29
 102eee0:	380ed7fa 	srli	r7,r7,31
 102eee4:	dc800215 	stw	r18,8(sp)
 102eee8:	dc400115 	stw	r17,4(sp)
 102eeec:	dfc00415 	stw	ra,16(sp)
 102eef0:	dcc00315 	stw	r19,12(sp)
 102eef4:	1c803fcc 	andi	r18,r3,255
 102eef8:	8401ffcc 	andi	r16,r16,2047
 102eefc:	494ab03a 	or	r5,r9,r5
 102ef00:	202290fa 	slli	r17,r4,3
 102ef04:	1081ffcc 	andi	r2,r2,2047
 102ef08:	4290b03a 	or	r8,r8,r10
 102ef0c:	300c90fa 	slli	r6,r6,3
 102ef10:	91c07026 	beq	r18,r7,102f0d4 <__adddf3+0x228>
 102ef14:	8087c83a 	sub	r3,r16,r2
 102ef18:	00c0b30e 	bge	zero,r3,102f1e8 <__adddf3+0x33c>
 102ef1c:	10002a1e 	bne	r2,zero,102efc8 <__adddf3+0x11c>
 102ef20:	4184b03a 	or	r2,r8,r6
 102ef24:	1000991e 	bne	r2,zero,102f18c <__adddf3+0x2e0>
 102ef28:	888001cc 	andi	r2,r17,7
 102ef2c:	10005b26 	beq	r2,zero,102f09c <__adddf3+0x1f0>
 102ef30:	88c003cc 	andi	r3,r17,15
 102ef34:	00800104 	movi	r2,4
 102ef38:	18805826 	beq	r3,r2,102f09c <__adddf3+0x1f0>
 102ef3c:	89800104 	addi	r6,r17,4
 102ef40:	3463803a 	cmpltu	r17,r6,r17
 102ef44:	2c4b883a 	add	r5,r5,r17
 102ef48:	2880202c 	andhi	r2,r5,128
 102ef4c:	9007883a 	mov	r3,r18
 102ef50:	3023883a 	mov	r17,r6
 102ef54:	10005426 	beq	r2,zero,102f0a8 <__adddf3+0x1fc>
 102ef58:	84000044 	addi	r16,r16,1
 102ef5c:	0081ffc4 	movi	r2,2047
 102ef60:	8080c126 	beq	r16,r2,102f268 <__adddf3+0x3bc>
 102ef64:	013fe034 	movhi	r4,65408
 102ef68:	213fffc4 	addi	r4,r4,-1
 102ef6c:	290a703a 	and	r5,r5,r4
 102ef70:	2804977a 	slli	r2,r5,29
 102ef74:	280a927a 	slli	r5,r5,9
 102ef78:	8822d0fa 	srli	r17,r17,3
 102ef7c:	8401ffcc 	andi	r16,r16,2047
 102ef80:	2808d33a 	srli	r4,r5,12
 102ef84:	1444b03a 	or	r2,r2,r17
 102ef88:	8401ffcc 	andi	r16,r16,2047
 102ef8c:	800a953a 	slli	r5,r16,20
 102ef90:	18c03fcc 	andi	r3,r3,255
 102ef94:	04000434 	movhi	r16,16
 102ef98:	180697fa 	slli	r3,r3,31
 102ef9c:	843fffc4 	addi	r16,r16,-1
 102efa0:	2420703a 	and	r16,r4,r16
 102efa4:	8160b03a 	or	r16,r16,r5
 102efa8:	80c6b03a 	or	r3,r16,r3
 102efac:	dfc00417 	ldw	ra,16(sp)
 102efb0:	dcc00317 	ldw	r19,12(sp)
 102efb4:	dc800217 	ldw	r18,8(sp)
 102efb8:	dc400117 	ldw	r17,4(sp)
 102efbc:	dc000017 	ldw	r16,0(sp)
 102efc0:	dec00504 	addi	sp,sp,20
 102efc4:	f800283a 	ret
 102efc8:	0081ffc4 	movi	r2,2047
 102efcc:	80bfd626 	beq	r16,r2,102ef28 <_gp+0xffff0c44>
 102efd0:	42002034 	orhi	r8,r8,128
 102efd4:	00800e04 	movi	r2,56
 102efd8:	10c0a616 	blt	r2,r3,102f274 <__adddf3+0x3c8>
 102efdc:	008007c4 	movi	r2,31
 102efe0:	10c0c916 	blt	r2,r3,102f308 <__adddf3+0x45c>
 102efe4:	00800804 	movi	r2,32
 102efe8:	10c5c83a 	sub	r2,r2,r3
 102efec:	408e983a 	sll	r7,r8,r2
 102eff0:	30c8d83a 	srl	r4,r6,r3
 102eff4:	3084983a 	sll	r2,r6,r2
 102eff8:	40c6d83a 	srl	r3,r8,r3
 102effc:	390cb03a 	or	r6,r7,r4
 102f000:	1004c03a 	cmpne	r2,r2,zero
 102f004:	308cb03a 	or	r6,r6,r2
 102f008:	898dc83a 	sub	r6,r17,r6
 102f00c:	89a3803a 	cmpltu	r17,r17,r6
 102f010:	28cbc83a 	sub	r5,r5,r3
 102f014:	2c4bc83a 	sub	r5,r5,r17
 102f018:	3023883a 	mov	r17,r6
 102f01c:	2880202c 	andhi	r2,r5,128
 102f020:	10006d26 	beq	r2,zero,102f1d8 <__adddf3+0x32c>
 102f024:	04c02034 	movhi	r19,128
 102f028:	9cffffc4 	addi	r19,r19,-1
 102f02c:	2ce6703a 	and	r19,r5,r19
 102f030:	98007e26 	beq	r19,zero,102f22c <__adddf3+0x380>
 102f034:	9809883a 	mov	r4,r19
 102f038:	10314480 	call	1031448 <__clzsi2>
 102f03c:	10fffe04 	addi	r3,r2,-8
 102f040:	010007c4 	movi	r4,31
 102f044:	20c07f16 	blt	r4,r3,102f244 <__adddf3+0x398>
 102f048:	01400a04 	movi	r5,40
 102f04c:	2885c83a 	sub	r2,r5,r2
 102f050:	888ad83a 	srl	r5,r17,r2
 102f054:	98e6983a 	sll	r19,r19,r3
 102f058:	88e2983a 	sll	r17,r17,r3
 102f05c:	2ce6b03a 	or	r19,r5,r19
 102f060:	1c007c16 	blt	r3,r16,102f254 <__adddf3+0x3a8>
 102f064:	1c21c83a 	sub	r16,r3,r16
 102f068:	81400044 	addi	r5,r16,1
 102f06c:	00c007c4 	movi	r3,31
 102f070:	19409816 	blt	r3,r5,102f2d4 <__adddf3+0x428>
 102f074:	1c21c83a 	sub	r16,r3,r16
 102f078:	8c08983a 	sll	r4,r17,r16
 102f07c:	8946d83a 	srl	r3,r17,r5
 102f080:	9c20983a 	sll	r16,r19,r16
 102f084:	2008c03a 	cmpne	r4,r4,zero
 102f088:	994ad83a 	srl	r5,r19,r5
 102f08c:	1c06b03a 	or	r3,r3,r16
 102f090:	1922b03a 	or	r17,r3,r4
 102f094:	0021883a 	mov	r16,zero
 102f098:	003fa306 	br	102ef28 <_gp+0xffff0c44>
 102f09c:	2880202c 	andhi	r2,r5,128
 102f0a0:	9007883a 	mov	r3,r18
 102f0a4:	103fac1e 	bne	r2,zero,102ef58 <_gp+0xffff0c74>
 102f0a8:	2804977a 	slli	r2,r5,29
 102f0ac:	8822d0fa 	srli	r17,r17,3
 102f0b0:	0101ffc4 	movi	r4,2047
 102f0b4:	280ad0fa 	srli	r5,r5,3
 102f0b8:	1444b03a 	or	r2,r2,r17
 102f0bc:	81002c26 	beq	r16,r4,102f170 <__adddf3+0x2c4>
 102f0c0:	8120703a 	and	r16,r16,r4
 102f0c4:	01000434 	movhi	r4,16
 102f0c8:	213fffc4 	addi	r4,r4,-1
 102f0cc:	2908703a 	and	r4,r5,r4
 102f0d0:	003fad06 	br	102ef88 <_gp+0xffff0ca4>
 102f0d4:	8089c83a 	sub	r4,r16,r2
 102f0d8:	01006a0e 	bge	zero,r4,102f284 <__adddf3+0x3d8>
 102f0dc:	10003326 	beq	r2,zero,102f1ac <__adddf3+0x300>
 102f0e0:	0081ffc4 	movi	r2,2047
 102f0e4:	80bf9026 	beq	r16,r2,102ef28 <_gp+0xffff0c44>
 102f0e8:	42002034 	orhi	r8,r8,128
 102f0ec:	00800e04 	movi	r2,56
 102f0f0:	1100b116 	blt	r2,r4,102f3b8 <__adddf3+0x50c>
 102f0f4:	008007c4 	movi	r2,31
 102f0f8:	1100e216 	blt	r2,r4,102f484 <__adddf3+0x5d8>
 102f0fc:	00800804 	movi	r2,32
 102f100:	1105c83a 	sub	r2,r2,r4
 102f104:	4092983a 	sll	r9,r8,r2
 102f108:	310ed83a 	srl	r7,r6,r4
 102f10c:	3084983a 	sll	r2,r6,r2
 102f110:	4110d83a 	srl	r8,r8,r4
 102f114:	49ccb03a 	or	r6,r9,r7
 102f118:	1004c03a 	cmpne	r2,r2,zero
 102f11c:	308cb03a 	or	r6,r6,r2
 102f120:	344d883a 	add	r6,r6,r17
 102f124:	3463803a 	cmpltu	r17,r6,r17
 102f128:	414b883a 	add	r5,r8,r5
 102f12c:	2c4b883a 	add	r5,r5,r17
 102f130:	3023883a 	mov	r17,r6
 102f134:	2880202c 	andhi	r2,r5,128
 102f138:	10002726 	beq	r2,zero,102f1d8 <__adddf3+0x32c>
 102f13c:	84000044 	addi	r16,r16,1
 102f140:	0081ffc4 	movi	r2,2047
 102f144:	8080ae26 	beq	r16,r2,102f400 <__adddf3+0x554>
 102f148:	00bfe034 	movhi	r2,65408
 102f14c:	10bfffc4 	addi	r2,r2,-1
 102f150:	288a703a 	and	r5,r5,r2
 102f154:	880cd07a 	srli	r6,r17,1
 102f158:	280897fa 	slli	r4,r5,31
 102f15c:	88c0004c 	andi	r3,r17,1
 102f160:	30e2b03a 	or	r17,r6,r3
 102f164:	280ad07a 	srli	r5,r5,1
 102f168:	8922b03a 	or	r17,r17,r4
 102f16c:	003f6e06 	br	102ef28 <_gp+0xffff0c44>
 102f170:	1148b03a 	or	r4,r2,r5
 102f174:	20003c26 	beq	r4,zero,102f268 <__adddf3+0x3bc>
 102f178:	29000234 	orhi	r4,r5,8
 102f17c:	01400434 	movhi	r5,16
 102f180:	297fffc4 	addi	r5,r5,-1
 102f184:	2148703a 	and	r4,r4,r5
 102f188:	003f7f06 	br	102ef88 <_gp+0xffff0ca4>
 102f18c:	18ffffc4 	addi	r3,r3,-1
 102f190:	18004d1e 	bne	r3,zero,102f2c8 <__adddf3+0x41c>
 102f194:	898dc83a 	sub	r6,r17,r6
 102f198:	89a3803a 	cmpltu	r17,r17,r6
 102f19c:	2a0bc83a 	sub	r5,r5,r8
 102f1a0:	2c4bc83a 	sub	r5,r5,r17
 102f1a4:	3023883a 	mov	r17,r6
 102f1a8:	003f9c06 	br	102f01c <_gp+0xffff0d38>
 102f1ac:	4184b03a 	or	r2,r8,r6
 102f1b0:	103f5d26 	beq	r2,zero,102ef28 <_gp+0xffff0c44>
 102f1b4:	213fffc4 	addi	r4,r4,-1
 102f1b8:	203fd926 	beq	r4,zero,102f120 <_gp+0xffff0e3c>
 102f1bc:	0081ffc4 	movi	r2,2047
 102f1c0:	80bfca1e 	bne	r16,r2,102f0ec <_gp+0xffff0e08>
 102f1c4:	003f5806 	br	102ef28 <_gp+0xffff0c44>
 102f1c8:	10c8b03a 	or	r4,r2,r3
 102f1cc:	20008b26 	beq	r4,zero,102f3fc <__adddf3+0x550>
 102f1d0:	100b883a 	mov	r5,r2
 102f1d4:	1823883a 	mov	r17,r3
 102f1d8:	888001cc 	andi	r2,r17,7
 102f1dc:	103f541e 	bne	r2,zero,102ef30 <_gp+0xffff0c4c>
 102f1e0:	9007883a 	mov	r3,r18
 102f1e4:	003fb006 	br	102f0a8 <_gp+0xffff0dc4>
 102f1e8:	1800531e 	bne	r3,zero,102f338 <__adddf3+0x48c>
 102f1ec:	80800044 	addi	r2,r16,1
 102f1f0:	1081ffcc 	andi	r2,r2,2047
 102f1f4:	00c00044 	movi	r3,1
 102f1f8:	1880990e 	bge	r3,r2,102f460 <__adddf3+0x5b4>
 102f1fc:	8985c83a 	sub	r2,r17,r6
 102f200:	8887803a 	cmpltu	r3,r17,r2
 102f204:	2a27c83a 	sub	r19,r5,r8
 102f208:	98e7c83a 	sub	r19,r19,r3
 102f20c:	98c0202c 	andhi	r3,r19,128
 102f210:	18006226 	beq	r3,zero,102f39c <__adddf3+0x4f0>
 102f214:	3463c83a 	sub	r17,r6,r17
 102f218:	4151c83a 	sub	r8,r8,r5
 102f21c:	344d803a 	cmpltu	r6,r6,r17
 102f220:	41a7c83a 	sub	r19,r8,r6
 102f224:	3825883a 	mov	r18,r7
 102f228:	983f821e 	bne	r19,zero,102f034 <_gp+0xffff0d50>
 102f22c:	8809883a 	mov	r4,r17
 102f230:	10314480 	call	1031448 <__clzsi2>
 102f234:	10800804 	addi	r2,r2,32
 102f238:	10fffe04 	addi	r3,r2,-8
 102f23c:	010007c4 	movi	r4,31
 102f240:	20ff810e 	bge	r4,r3,102f048 <_gp+0xffff0d64>
 102f244:	14fff604 	addi	r19,r2,-40
 102f248:	8ce6983a 	sll	r19,r17,r19
 102f24c:	0023883a 	mov	r17,zero
 102f250:	1c3f840e 	bge	r3,r16,102f064 <_gp+0xffff0d80>
 102f254:	017fe034 	movhi	r5,65408
 102f258:	297fffc4 	addi	r5,r5,-1
 102f25c:	80e1c83a 	sub	r16,r16,r3
 102f260:	994a703a 	and	r5,r19,r5
 102f264:	003f3006 	br	102ef28 <_gp+0xffff0c44>
 102f268:	0009883a 	mov	r4,zero
 102f26c:	0005883a 	mov	r2,zero
 102f270:	003f4506 	br	102ef88 <_gp+0xffff0ca4>
 102f274:	418cb03a 	or	r6,r8,r6
 102f278:	300cc03a 	cmpne	r6,r6,zero
 102f27c:	0007883a 	mov	r3,zero
 102f280:	003f6106 	br	102f008 <_gp+0xffff0d24>
 102f284:	2000921e 	bne	r4,zero,102f4d0 <__adddf3+0x624>
 102f288:	80800044 	addi	r2,r16,1
 102f28c:	11c1ffcc 	andi	r7,r2,2047
 102f290:	01000044 	movi	r4,1
 102f294:	21c0610e 	bge	r4,r7,102f41c <__adddf3+0x570>
 102f298:	0101ffc4 	movi	r4,2047
 102f29c:	1100a326 	beq	r2,r4,102f52c <__adddf3+0x680>
 102f2a0:	344d883a 	add	r6,r6,r17
 102f2a4:	3463803a 	cmpltu	r17,r6,r17
 102f2a8:	414b883a 	add	r5,r8,r5
 102f2ac:	2c4b883a 	add	r5,r5,r17
 102f2b0:	282297fa 	slli	r17,r5,31
 102f2b4:	300cd07a 	srli	r6,r6,1
 102f2b8:	280ad07a 	srli	r5,r5,1
 102f2bc:	1021883a 	mov	r16,r2
 102f2c0:	89a2b03a 	or	r17,r17,r6
 102f2c4:	003f1806 	br	102ef28 <_gp+0xffff0c44>
 102f2c8:	0081ffc4 	movi	r2,2047
 102f2cc:	80bf411e 	bne	r16,r2,102efd4 <_gp+0xffff0cf0>
 102f2d0:	003f1506 	br	102ef28 <_gp+0xffff0c44>
 102f2d4:	80bff844 	addi	r2,r16,-31
 102f2d8:	00c00804 	movi	r3,32
 102f2dc:	9884d83a 	srl	r2,r19,r2
 102f2e0:	28c04a26 	beq	r5,r3,102f40c <__adddf3+0x560>
 102f2e4:	00c00fc4 	movi	r3,63
 102f2e8:	1c21c83a 	sub	r16,r3,r16
 102f2ec:	9c26983a 	sll	r19,r19,r16
 102f2f0:	9c62b03a 	or	r17,r19,r17
 102f2f4:	8822c03a 	cmpne	r17,r17,zero
 102f2f8:	88a2b03a 	or	r17,r17,r2
 102f2fc:	000b883a 	mov	r5,zero
 102f300:	0021883a 	mov	r16,zero
 102f304:	003fb406 	br	102f1d8 <_gp+0xffff0ef4>
 102f308:	18bff804 	addi	r2,r3,-32
 102f30c:	01000804 	movi	r4,32
 102f310:	4084d83a 	srl	r2,r8,r2
 102f314:	19003f26 	beq	r3,r4,102f414 <__adddf3+0x568>
 102f318:	01001004 	movi	r4,64
 102f31c:	20c7c83a 	sub	r3,r4,r3
 102f320:	40d0983a 	sll	r8,r8,r3
 102f324:	418cb03a 	or	r6,r8,r6
 102f328:	300cc03a 	cmpne	r6,r6,zero
 102f32c:	308cb03a 	or	r6,r6,r2
 102f330:	0007883a 	mov	r3,zero
 102f334:	003f3406 	br	102f008 <_gp+0xffff0d24>
 102f338:	80002326 	beq	r16,zero,102f3c8 <__adddf3+0x51c>
 102f33c:	0101ffc4 	movi	r4,2047
 102f340:	11005e26 	beq	r2,r4,102f4bc <__adddf3+0x610>
 102f344:	00c7c83a 	sub	r3,zero,r3
 102f348:	29402034 	orhi	r5,r5,128
 102f34c:	01000e04 	movi	r4,56
 102f350:	20c07216 	blt	r4,r3,102f51c <__adddf3+0x670>
 102f354:	010007c4 	movi	r4,31
 102f358:	20c0ce16 	blt	r4,r3,102f694 <__adddf3+0x7e8>
 102f35c:	01000804 	movi	r4,32
 102f360:	20c9c83a 	sub	r4,r4,r3
 102f364:	2914983a 	sll	r10,r5,r4
 102f368:	88d2d83a 	srl	r9,r17,r3
 102f36c:	8908983a 	sll	r4,r17,r4
 102f370:	28c6d83a 	srl	r3,r5,r3
 102f374:	5262b03a 	or	r17,r10,r9
 102f378:	2008c03a 	cmpne	r4,r4,zero
 102f37c:	8922b03a 	or	r17,r17,r4
 102f380:	3463c83a 	sub	r17,r6,r17
 102f384:	40c7c83a 	sub	r3,r8,r3
 102f388:	344d803a 	cmpltu	r6,r6,r17
 102f38c:	198bc83a 	sub	r5,r3,r6
 102f390:	1021883a 	mov	r16,r2
 102f394:	3825883a 	mov	r18,r7
 102f398:	003f2006 	br	102f01c <_gp+0xffff0d38>
 102f39c:	9886b03a 	or	r3,r19,r2
 102f3a0:	1800141e 	bne	r3,zero,102f3f4 <__adddf3+0x548>
 102f3a4:	0007883a 	mov	r3,zero
 102f3a8:	000b883a 	mov	r5,zero
 102f3ac:	0023883a 	mov	r17,zero
 102f3b0:	0021883a 	mov	r16,zero
 102f3b4:	003f3c06 	br	102f0a8 <_gp+0xffff0dc4>
 102f3b8:	418cb03a 	or	r6,r8,r6
 102f3bc:	300cc03a 	cmpne	r6,r6,zero
 102f3c0:	0011883a 	mov	r8,zero
 102f3c4:	003f5606 	br	102f120 <_gp+0xffff0e3c>
 102f3c8:	2c48b03a 	or	r4,r5,r17
 102f3cc:	20003b26 	beq	r4,zero,102f4bc <__adddf3+0x610>
 102f3d0:	00c6303a 	nor	r3,zero,r3
 102f3d4:	1800371e 	bne	r3,zero,102f4b4 <__adddf3+0x608>
 102f3d8:	3463c83a 	sub	r17,r6,r17
 102f3dc:	414bc83a 	sub	r5,r8,r5
 102f3e0:	344d803a 	cmpltu	r6,r6,r17
 102f3e4:	298bc83a 	sub	r5,r5,r6
 102f3e8:	1021883a 	mov	r16,r2
 102f3ec:	3825883a 	mov	r18,r7
 102f3f0:	003f0a06 	br	102f01c <_gp+0xffff0d38>
 102f3f4:	1023883a 	mov	r17,r2
 102f3f8:	003f0d06 	br	102f030 <_gp+0xffff0d4c>
 102f3fc:	0007883a 	mov	r3,zero
 102f400:	000b883a 	mov	r5,zero
 102f404:	0023883a 	mov	r17,zero
 102f408:	003f2706 	br	102f0a8 <_gp+0xffff0dc4>
 102f40c:	0027883a 	mov	r19,zero
 102f410:	003fb706 	br	102f2f0 <_gp+0xffff100c>
 102f414:	0011883a 	mov	r8,zero
 102f418:	003fc206 	br	102f324 <_gp+0xffff1040>
 102f41c:	2c44b03a 	or	r2,r5,r17
 102f420:	8000871e 	bne	r16,zero,102f640 <__adddf3+0x794>
 102f424:	1000b126 	beq	r2,zero,102f6ec <__adddf3+0x840>
 102f428:	4184b03a 	or	r2,r8,r6
 102f42c:	103ebe26 	beq	r2,zero,102ef28 <_gp+0xffff0c44>
 102f430:	3445883a 	add	r2,r6,r17
 102f434:	1463803a 	cmpltu	r17,r2,r17
 102f438:	414b883a 	add	r5,r8,r5
 102f43c:	2c4b883a 	add	r5,r5,r17
 102f440:	28c0202c 	andhi	r3,r5,128
 102f444:	1023883a 	mov	r17,r2
 102f448:	183f6326 	beq	r3,zero,102f1d8 <_gp+0xffff0ef4>
 102f44c:	00bfe034 	movhi	r2,65408
 102f450:	10bfffc4 	addi	r2,r2,-1
 102f454:	2021883a 	mov	r16,r4
 102f458:	288a703a 	and	r5,r5,r2
 102f45c:	003eb206 	br	102ef28 <_gp+0xffff0c44>
 102f460:	2c44b03a 	or	r2,r5,r17
 102f464:	8000251e 	bne	r16,zero,102f4fc <__adddf3+0x650>
 102f468:	10004b1e 	bne	r2,zero,102f598 <__adddf3+0x6ec>
 102f46c:	4184b03a 	or	r2,r8,r6
 102f470:	103fe226 	beq	r2,zero,102f3fc <_gp+0xffff1118>
 102f474:	400b883a 	mov	r5,r8
 102f478:	3023883a 	mov	r17,r6
 102f47c:	3825883a 	mov	r18,r7
 102f480:	003ea906 	br	102ef28 <_gp+0xffff0c44>
 102f484:	20bff804 	addi	r2,r4,-32
 102f488:	01c00804 	movi	r7,32
 102f48c:	4084d83a 	srl	r2,r8,r2
 102f490:	21c07e26 	beq	r4,r7,102f68c <__adddf3+0x7e0>
 102f494:	01c01004 	movi	r7,64
 102f498:	3909c83a 	sub	r4,r7,r4
 102f49c:	4110983a 	sll	r8,r8,r4
 102f4a0:	418cb03a 	or	r6,r8,r6
 102f4a4:	300cc03a 	cmpne	r6,r6,zero
 102f4a8:	308cb03a 	or	r6,r6,r2
 102f4ac:	0011883a 	mov	r8,zero
 102f4b0:	003f1b06 	br	102f120 <_gp+0xffff0e3c>
 102f4b4:	0101ffc4 	movi	r4,2047
 102f4b8:	113fa41e 	bne	r2,r4,102f34c <_gp+0xffff1068>
 102f4bc:	400b883a 	mov	r5,r8
 102f4c0:	3023883a 	mov	r17,r6
 102f4c4:	1021883a 	mov	r16,r2
 102f4c8:	3825883a 	mov	r18,r7
 102f4cc:	003e9606 	br	102ef28 <_gp+0xffff0c44>
 102f4d0:	80001a1e 	bne	r16,zero,102f53c <__adddf3+0x690>
 102f4d4:	2c4eb03a 	or	r7,r5,r17
 102f4d8:	38005526 	beq	r7,zero,102f630 <__adddf3+0x784>
 102f4dc:	0108303a 	nor	r4,zero,r4
 102f4e0:	2000511e 	bne	r4,zero,102f628 <__adddf3+0x77c>
 102f4e4:	89a3883a 	add	r17,r17,r6
 102f4e8:	414b883a 	add	r5,r8,r5
 102f4ec:	898d803a 	cmpltu	r6,r17,r6
 102f4f0:	298b883a 	add	r5,r5,r6
 102f4f4:	1021883a 	mov	r16,r2
 102f4f8:	003f0e06 	br	102f134 <_gp+0xffff0e50>
 102f4fc:	1000341e 	bne	r2,zero,102f5d0 <__adddf3+0x724>
 102f500:	4184b03a 	or	r2,r8,r6
 102f504:	10006f26 	beq	r2,zero,102f6c4 <__adddf3+0x818>
 102f508:	400b883a 	mov	r5,r8
 102f50c:	3023883a 	mov	r17,r6
 102f510:	3825883a 	mov	r18,r7
 102f514:	0401ffc4 	movi	r16,2047
 102f518:	003e8306 	br	102ef28 <_gp+0xffff0c44>
 102f51c:	2c62b03a 	or	r17,r5,r17
 102f520:	8822c03a 	cmpne	r17,r17,zero
 102f524:	0007883a 	mov	r3,zero
 102f528:	003f9506 	br	102f380 <_gp+0xffff109c>
 102f52c:	1021883a 	mov	r16,r2
 102f530:	000b883a 	mov	r5,zero
 102f534:	0023883a 	mov	r17,zero
 102f538:	003edb06 	br	102f0a8 <_gp+0xffff0dc4>
 102f53c:	01c1ffc4 	movi	r7,2047
 102f540:	11c03b26 	beq	r2,r7,102f630 <__adddf3+0x784>
 102f544:	0109c83a 	sub	r4,zero,r4
 102f548:	29402034 	orhi	r5,r5,128
 102f54c:	01c00e04 	movi	r7,56
 102f550:	39006216 	blt	r7,r4,102f6dc <__adddf3+0x830>
 102f554:	01c007c4 	movi	r7,31
 102f558:	39006b16 	blt	r7,r4,102f708 <__adddf3+0x85c>
 102f55c:	01c00804 	movi	r7,32
 102f560:	390fc83a 	sub	r7,r7,r4
 102f564:	29d4983a 	sll	r10,r5,r7
 102f568:	8912d83a 	srl	r9,r17,r4
 102f56c:	89ce983a 	sll	r7,r17,r7
 102f570:	2908d83a 	srl	r4,r5,r4
 102f574:	5262b03a 	or	r17,r10,r9
 102f578:	380ac03a 	cmpne	r5,r7,zero
 102f57c:	8962b03a 	or	r17,r17,r5
 102f580:	89a3883a 	add	r17,r17,r6
 102f584:	2211883a 	add	r8,r4,r8
 102f588:	898d803a 	cmpltu	r6,r17,r6
 102f58c:	418b883a 	add	r5,r8,r6
 102f590:	1021883a 	mov	r16,r2
 102f594:	003ee706 	br	102f134 <_gp+0xffff0e50>
 102f598:	4184b03a 	or	r2,r8,r6
 102f59c:	103e6226 	beq	r2,zero,102ef28 <_gp+0xffff0c44>
 102f5a0:	8987c83a 	sub	r3,r17,r6
 102f5a4:	88c9803a 	cmpltu	r4,r17,r3
 102f5a8:	2a05c83a 	sub	r2,r5,r8
 102f5ac:	1105c83a 	sub	r2,r2,r4
 102f5b0:	1100202c 	andhi	r4,r2,128
 102f5b4:	203f0426 	beq	r4,zero,102f1c8 <_gp+0xffff0ee4>
 102f5b8:	3463c83a 	sub	r17,r6,r17
 102f5bc:	414bc83a 	sub	r5,r8,r5
 102f5c0:	344d803a 	cmpltu	r6,r6,r17
 102f5c4:	298bc83a 	sub	r5,r5,r6
 102f5c8:	3825883a 	mov	r18,r7
 102f5cc:	003e5606 	br	102ef28 <_gp+0xffff0c44>
 102f5d0:	4184b03a 	or	r2,r8,r6
 102f5d4:	10002b26 	beq	r2,zero,102f684 <__adddf3+0x7d8>
 102f5d8:	2804d0fa 	srli	r2,r5,3
 102f5dc:	8822d0fa 	srli	r17,r17,3
 102f5e0:	280a977a 	slli	r5,r5,29
 102f5e4:	10c0022c 	andhi	r3,r2,8
 102f5e8:	2c62b03a 	or	r17,r5,r17
 102f5ec:	18000826 	beq	r3,zero,102f610 <__adddf3+0x764>
 102f5f0:	4008d0fa 	srli	r4,r8,3
 102f5f4:	20c0022c 	andhi	r3,r4,8
 102f5f8:	1800051e 	bne	r3,zero,102f610 <__adddf3+0x764>
 102f5fc:	300cd0fa 	srli	r6,r6,3
 102f600:	4010977a 	slli	r8,r8,29
 102f604:	2005883a 	mov	r2,r4
 102f608:	3825883a 	mov	r18,r7
 102f60c:	41a2b03a 	or	r17,r8,r6
 102f610:	880ad77a 	srli	r5,r17,29
 102f614:	100490fa 	slli	r2,r2,3
 102f618:	882290fa 	slli	r17,r17,3
 102f61c:	0401ffc4 	movi	r16,2047
 102f620:	288ab03a 	or	r5,r5,r2
 102f624:	003e4006 	br	102ef28 <_gp+0xffff0c44>
 102f628:	01c1ffc4 	movi	r7,2047
 102f62c:	11ffc71e 	bne	r2,r7,102f54c <_gp+0xffff1268>
 102f630:	400b883a 	mov	r5,r8
 102f634:	3023883a 	mov	r17,r6
 102f638:	1021883a 	mov	r16,r2
 102f63c:	003e3a06 	br	102ef28 <_gp+0xffff0c44>
 102f640:	10002d26 	beq	r2,zero,102f6f8 <__adddf3+0x84c>
 102f644:	4184b03a 	or	r2,r8,r6
 102f648:	10000e26 	beq	r2,zero,102f684 <__adddf3+0x7d8>
 102f64c:	2804d0fa 	srli	r2,r5,3
 102f650:	8822d0fa 	srli	r17,r17,3
 102f654:	280a977a 	slli	r5,r5,29
 102f658:	10c0022c 	andhi	r3,r2,8
 102f65c:	2c62b03a 	or	r17,r5,r17
 102f660:	183feb26 	beq	r3,zero,102f610 <_gp+0xffff132c>
 102f664:	4008d0fa 	srli	r4,r8,3
 102f668:	20c0022c 	andhi	r3,r4,8
 102f66c:	183fe81e 	bne	r3,zero,102f610 <_gp+0xffff132c>
 102f670:	300cd0fa 	srli	r6,r6,3
 102f674:	4010977a 	slli	r8,r8,29
 102f678:	2005883a 	mov	r2,r4
 102f67c:	41a2b03a 	or	r17,r8,r6
 102f680:	003fe306 	br	102f610 <_gp+0xffff132c>
 102f684:	0401ffc4 	movi	r16,2047
 102f688:	003e2706 	br	102ef28 <_gp+0xffff0c44>
 102f68c:	0011883a 	mov	r8,zero
 102f690:	003f8306 	br	102f4a0 <_gp+0xffff11bc>
 102f694:	193ff804 	addi	r4,r3,-32
 102f698:	02400804 	movi	r9,32
 102f69c:	2908d83a 	srl	r4,r5,r4
 102f6a0:	1a402526 	beq	r3,r9,102f738 <__adddf3+0x88c>
 102f6a4:	02401004 	movi	r9,64
 102f6a8:	48c7c83a 	sub	r3,r9,r3
 102f6ac:	28ca983a 	sll	r5,r5,r3
 102f6b0:	2c62b03a 	or	r17,r5,r17
 102f6b4:	8822c03a 	cmpne	r17,r17,zero
 102f6b8:	8922b03a 	or	r17,r17,r4
 102f6bc:	0007883a 	mov	r3,zero
 102f6c0:	003f2f06 	br	102f380 <_gp+0xffff109c>
 102f6c4:	01402034 	movhi	r5,128
 102f6c8:	0007883a 	mov	r3,zero
 102f6cc:	297fffc4 	addi	r5,r5,-1
 102f6d0:	047ffe04 	movi	r17,-8
 102f6d4:	0401ffc4 	movi	r16,2047
 102f6d8:	003e7306 	br	102f0a8 <_gp+0xffff0dc4>
 102f6dc:	2c62b03a 	or	r17,r5,r17
 102f6e0:	8822c03a 	cmpne	r17,r17,zero
 102f6e4:	0009883a 	mov	r4,zero
 102f6e8:	003fa506 	br	102f580 <_gp+0xffff129c>
 102f6ec:	400b883a 	mov	r5,r8
 102f6f0:	3023883a 	mov	r17,r6
 102f6f4:	003e0c06 	br	102ef28 <_gp+0xffff0c44>
 102f6f8:	400b883a 	mov	r5,r8
 102f6fc:	3023883a 	mov	r17,r6
 102f700:	0401ffc4 	movi	r16,2047
 102f704:	003e0806 	br	102ef28 <_gp+0xffff0c44>
 102f708:	21fff804 	addi	r7,r4,-32
 102f70c:	02400804 	movi	r9,32
 102f710:	29ced83a 	srl	r7,r5,r7
 102f714:	22400a26 	beq	r4,r9,102f740 <__adddf3+0x894>
 102f718:	02401004 	movi	r9,64
 102f71c:	4909c83a 	sub	r4,r9,r4
 102f720:	290a983a 	sll	r5,r5,r4
 102f724:	2c62b03a 	or	r17,r5,r17
 102f728:	8822c03a 	cmpne	r17,r17,zero
 102f72c:	89e2b03a 	or	r17,r17,r7
 102f730:	0009883a 	mov	r4,zero
 102f734:	003f9206 	br	102f580 <_gp+0xffff129c>
 102f738:	000b883a 	mov	r5,zero
 102f73c:	003fdc06 	br	102f6b0 <_gp+0xffff13cc>
 102f740:	000b883a 	mov	r5,zero
 102f744:	003ff706 	br	102f724 <_gp+0xffff1440>

0102f748 <__divdf3>:
 102f748:	defff204 	addi	sp,sp,-56
 102f74c:	dd000815 	stw	r20,32(sp)
 102f750:	2828d53a 	srli	r20,r5,20
 102f754:	dd800a15 	stw	r22,40(sp)
 102f758:	282cd7fa 	srli	r22,r5,31
 102f75c:	dc000415 	stw	r16,16(sp)
 102f760:	04000434 	movhi	r16,16
 102f764:	df000c15 	stw	fp,48(sp)
 102f768:	dcc00715 	stw	r19,28(sp)
 102f76c:	dc800615 	stw	r18,24(sp)
 102f770:	dc400515 	stw	r17,20(sp)
 102f774:	843fffc4 	addi	r16,r16,-1
 102f778:	dfc00d15 	stw	ra,52(sp)
 102f77c:	ddc00b15 	stw	r23,44(sp)
 102f780:	dd400915 	stw	r21,36(sp)
 102f784:	a501ffcc 	andi	r20,r20,2047
 102f788:	2025883a 	mov	r18,r4
 102f78c:	2027883a 	mov	r19,r4
 102f790:	2c22703a 	and	r17,r5,r16
 102f794:	b7003fcc 	andi	fp,r22,255
 102f798:	a0005e26 	beq	r20,zero,102f914 <__divdf3+0x1cc>
 102f79c:	0081ffc4 	movi	r2,2047
 102f7a0:	a0803526 	beq	r20,r2,102f878 <__divdf3+0x130>
 102f7a4:	8c000434 	orhi	r16,r17,16
 102f7a8:	2004d77a 	srli	r2,r4,29
 102f7ac:	802090fa 	slli	r16,r16,3
 102f7b0:	202690fa 	slli	r19,r4,3
 102f7b4:	a53f0044 	addi	r20,r20,-1023
 102f7b8:	80a2b03a 	or	r17,r16,r2
 102f7bc:	0025883a 	mov	r18,zero
 102f7c0:	0011883a 	mov	r8,zero
 102f7c4:	380ad53a 	srli	r5,r7,20
 102f7c8:	382ed7fa 	srli	r23,r7,31
 102f7cc:	04000434 	movhi	r16,16
 102f7d0:	843fffc4 	addi	r16,r16,-1
 102f7d4:	2941ffcc 	andi	r5,r5,2047
 102f7d8:	302b883a 	mov	r21,r6
 102f7dc:	3c20703a 	and	r16,r7,r16
 102f7e0:	ba403fcc 	andi	r9,r23,255
 102f7e4:	28006726 	beq	r5,zero,102f984 <__divdf3+0x23c>
 102f7e8:	0081ffc4 	movi	r2,2047
 102f7ec:	28805f26 	beq	r5,r2,102f96c <__divdf3+0x224>
 102f7f0:	84000434 	orhi	r16,r16,16
 102f7f4:	3004d77a 	srli	r2,r6,29
 102f7f8:	802090fa 	slli	r16,r16,3
 102f7fc:	302a90fa 	slli	r21,r6,3
 102f800:	297f0044 	addi	r5,r5,-1023
 102f804:	80a0b03a 	or	r16,r16,r2
 102f808:	000f883a 	mov	r7,zero
 102f80c:	3c86b03a 	or	r3,r7,r18
 102f810:	180690ba 	slli	r3,r3,2
 102f814:	008040f4 	movhi	r2,259
 102f818:	10be0e04 	addi	r2,r2,-1992
 102f81c:	1887883a 	add	r3,r3,r2
 102f820:	18c00017 	ldw	r3,0(r3)
 102f824:	b5c8f03a 	xor	r4,r22,r23
 102f828:	200d883a 	mov	r6,r4
 102f82c:	24803fcc 	andi	r18,r4,255
 102f830:	a169c83a 	sub	r20,r20,r5
 102f834:	1800683a 	jmp	r3
 102f838:	0102fa80 	call	102fa8 <__alt_mem_onchip_memory2-0xf1d058>
 102f83c:	0102f8b0 	cmpltui	r4,zero,3042
 102f840:	0102fa44 	movi	r4,3049
 102f844:	0102f894 	movui	r4,3042
 102f848:	0102fa44 	movi	r4,3049
 102f84c:	0102fa18 	cmpnei	r4,zero,3048
 102f850:	0102fa44 	movi	r4,3049
 102f854:	0102f894 	movui	r4,3042
 102f858:	0102f8b0 	cmpltui	r4,zero,3042
 102f85c:	0102f8b0 	cmpltui	r4,zero,3042
 102f860:	0102fa18 	cmpnei	r4,zero,3048
 102f864:	0102f894 	movui	r4,3042
 102f868:	0102f8a4 	muli	r4,zero,3042
 102f86c:	0102f8a4 	muli	r4,zero,3042
 102f870:	0102f8a4 	muli	r4,zero,3042
 102f874:	0102fa54 	movui	r4,3049
 102f878:	8904b03a 	or	r2,r17,r4
 102f87c:	1000631e 	bne	r2,zero,102fa0c <__divdf3+0x2c4>
 102f880:	04800204 	movi	r18,8
 102f884:	0023883a 	mov	r17,zero
 102f888:	0027883a 	mov	r19,zero
 102f88c:	02000084 	movi	r8,2
 102f890:	003fcc06 	br	102f7c4 <_gp+0xffff14e0>
 102f894:	8023883a 	mov	r17,r16
 102f898:	a827883a 	mov	r19,r21
 102f89c:	4839883a 	mov	fp,r9
 102f8a0:	3811883a 	mov	r8,r7
 102f8a4:	00800084 	movi	r2,2
 102f8a8:	40812a1e 	bne	r8,r2,102fd54 <__divdf3+0x60c>
 102f8ac:	e025883a 	mov	r18,fp
 102f8b0:	9180004c 	andi	r6,r18,1
 102f8b4:	0101ffc4 	movi	r4,2047
 102f8b8:	000b883a 	mov	r5,zero
 102f8bc:	0027883a 	mov	r19,zero
 102f8c0:	2008953a 	slli	r4,r4,20
 102f8c4:	30c03fcc 	andi	r3,r6,255
 102f8c8:	04000434 	movhi	r16,16
 102f8cc:	180697fa 	slli	r3,r3,31
 102f8d0:	843fffc4 	addi	r16,r16,-1
 102f8d4:	2c20703a 	and	r16,r5,r16
 102f8d8:	8120b03a 	or	r16,r16,r4
 102f8dc:	80c6b03a 	or	r3,r16,r3
 102f8e0:	9805883a 	mov	r2,r19
 102f8e4:	dfc00d17 	ldw	ra,52(sp)
 102f8e8:	df000c17 	ldw	fp,48(sp)
 102f8ec:	ddc00b17 	ldw	r23,44(sp)
 102f8f0:	dd800a17 	ldw	r22,40(sp)
 102f8f4:	dd400917 	ldw	r21,36(sp)
 102f8f8:	dd000817 	ldw	r20,32(sp)
 102f8fc:	dcc00717 	ldw	r19,28(sp)
 102f900:	dc800617 	ldw	r18,24(sp)
 102f904:	dc400517 	ldw	r17,20(sp)
 102f908:	dc000417 	ldw	r16,16(sp)
 102f90c:	dec00e04 	addi	sp,sp,56
 102f910:	f800283a 	ret
 102f914:	8904b03a 	or	r2,r17,r4
 102f918:	10003726 	beq	r2,zero,102f9f8 <__divdf3+0x2b0>
 102f91c:	88011c26 	beq	r17,zero,102fd90 <__divdf3+0x648>
 102f920:	8809883a 	mov	r4,r17
 102f924:	d9800315 	stw	r6,12(sp)
 102f928:	d9c00115 	stw	r7,4(sp)
 102f92c:	10314480 	call	1031448 <__clzsi2>
 102f930:	d9800317 	ldw	r6,12(sp)
 102f934:	d9c00117 	ldw	r7,4(sp)
 102f938:	1007883a 	mov	r3,r2
 102f93c:	01000a04 	movi	r4,40
 102f940:	1cfffe04 	addi	r19,r3,-8
 102f944:	20c9c83a 	sub	r4,r4,r3
 102f948:	8cca983a 	sll	r5,r17,r19
 102f94c:	9108d83a 	srl	r4,r18,r4
 102f950:	94e6983a 	sll	r19,r18,r19
 102f954:	2162b03a 	or	r17,r4,r5
 102f958:	053f0344 	movi	r20,-1011
 102f95c:	a0e9c83a 	sub	r20,r20,r3
 102f960:	0025883a 	mov	r18,zero
 102f964:	0011883a 	mov	r8,zero
 102f968:	003f9606 	br	102f7c4 <_gp+0xffff14e0>
 102f96c:	8184b03a 	or	r2,r16,r6
 102f970:	10001f1e 	bne	r2,zero,102f9f0 <__divdf3+0x2a8>
 102f974:	0021883a 	mov	r16,zero
 102f978:	002b883a 	mov	r21,zero
 102f97c:	01c00084 	movi	r7,2
 102f980:	003fa206 	br	102f80c <_gp+0xffff1528>
 102f984:	8184b03a 	or	r2,r16,r6
 102f988:	10001526 	beq	r2,zero,102f9e0 <__divdf3+0x298>
 102f98c:	80010c26 	beq	r16,zero,102fdc0 <__divdf3+0x678>
 102f990:	8009883a 	mov	r4,r16
 102f994:	d9800315 	stw	r6,12(sp)
 102f998:	da000215 	stw	r8,8(sp)
 102f99c:	da400015 	stw	r9,0(sp)
 102f9a0:	10314480 	call	1031448 <__clzsi2>
 102f9a4:	d9800317 	ldw	r6,12(sp)
 102f9a8:	da000217 	ldw	r8,8(sp)
 102f9ac:	da400017 	ldw	r9,0(sp)
 102f9b0:	1007883a 	mov	r3,r2
 102f9b4:	01000a04 	movi	r4,40
 102f9b8:	1d7ffe04 	addi	r21,r3,-8
 102f9bc:	20c9c83a 	sub	r4,r4,r3
 102f9c0:	8560983a 	sll	r16,r16,r21
 102f9c4:	3108d83a 	srl	r4,r6,r4
 102f9c8:	356a983a 	sll	r21,r6,r21
 102f9cc:	2420b03a 	or	r16,r4,r16
 102f9d0:	017f0344 	movi	r5,-1011
 102f9d4:	28cbc83a 	sub	r5,r5,r3
 102f9d8:	000f883a 	mov	r7,zero
 102f9dc:	003f8b06 	br	102f80c <_gp+0xffff1528>
 102f9e0:	0021883a 	mov	r16,zero
 102f9e4:	002b883a 	mov	r21,zero
 102f9e8:	01c00044 	movi	r7,1
 102f9ec:	003f8706 	br	102f80c <_gp+0xffff1528>
 102f9f0:	01c000c4 	movi	r7,3
 102f9f4:	003f8506 	br	102f80c <_gp+0xffff1528>
 102f9f8:	04800104 	movi	r18,4
 102f9fc:	0023883a 	mov	r17,zero
 102fa00:	0027883a 	mov	r19,zero
 102fa04:	02000044 	movi	r8,1
 102fa08:	003f6e06 	br	102f7c4 <_gp+0xffff14e0>
 102fa0c:	04800304 	movi	r18,12
 102fa10:	020000c4 	movi	r8,3
 102fa14:	003f6b06 	br	102f7c4 <_gp+0xffff14e0>
 102fa18:	01400434 	movhi	r5,16
 102fa1c:	000d883a 	mov	r6,zero
 102fa20:	297fffc4 	addi	r5,r5,-1
 102fa24:	04ffffc4 	movi	r19,-1
 102fa28:	0101ffc4 	movi	r4,2047
 102fa2c:	003fa406 	br	102f8c0 <_gp+0xffff15dc>
 102fa30:	043f0084 	movi	r16,-1022
 102fa34:	8521c83a 	sub	r16,r16,r20
 102fa38:	00800e04 	movi	r2,56
 102fa3c:	1401200e 	bge	r2,r16,102fec0 <__divdf3+0x778>
 102fa40:	9180004c 	andi	r6,r18,1
 102fa44:	0009883a 	mov	r4,zero
 102fa48:	000b883a 	mov	r5,zero
 102fa4c:	0027883a 	mov	r19,zero
 102fa50:	003f9b06 	br	102f8c0 <_gp+0xffff15dc>
 102fa54:	8880022c 	andhi	r2,r17,8
 102fa58:	1000c726 	beq	r2,zero,102fd78 <__divdf3+0x630>
 102fa5c:	8080022c 	andhi	r2,r16,8
 102fa60:	1000c51e 	bne	r2,zero,102fd78 <__divdf3+0x630>
 102fa64:	00800434 	movhi	r2,16
 102fa68:	81400234 	orhi	r5,r16,8
 102fa6c:	10bfffc4 	addi	r2,r2,-1
 102fa70:	b80d883a 	mov	r6,r23
 102fa74:	288a703a 	and	r5,r5,r2
 102fa78:	a827883a 	mov	r19,r21
 102fa7c:	003fea06 	br	102fa28 <_gp+0xffff1744>
 102fa80:	8440ea36 	bltu	r16,r17,102fe2c <__divdf3+0x6e4>
 102fa84:	8c00e826 	beq	r17,r16,102fe28 <__divdf3+0x6e0>
 102fa88:	a53fffc4 	addi	r20,r20,-1
 102fa8c:	882d883a 	mov	r22,r17
 102fa90:	000d883a 	mov	r6,zero
 102fa94:	a804d63a 	srli	r2,r21,24
 102fa98:	8020923a 	slli	r16,r16,8
 102fa9c:	b009883a 	mov	r4,r22
 102faa0:	d9800315 	stw	r6,12(sp)
 102faa4:	1420b03a 	or	r16,r2,r16
 102faa8:	802ed43a 	srli	r23,r16,16
 102faac:	873fffcc 	andi	fp,r16,65535
 102fab0:	a82a923a 	slli	r21,r21,8
 102fab4:	b80b883a 	mov	r5,r23
 102fab8:	1021eb40 	call	1021eb4 <__udivsi3>
 102fabc:	b009883a 	mov	r4,r22
 102fac0:	b80b883a 	mov	r5,r23
 102fac4:	1023883a 	mov	r17,r2
 102fac8:	1021ebc0 	call	1021ebc <__umodsi3>
 102facc:	1004943a 	slli	r2,r2,16
 102fad0:	9808d43a 	srli	r4,r19,16
 102fad4:	8f2d383a 	mul	r22,r17,fp
 102fad8:	d9800317 	ldw	r6,12(sp)
 102fadc:	1106b03a 	or	r3,r2,r4
 102fae0:	1d80062e 	bgeu	r3,r22,102fafc <__divdf3+0x3b4>
 102fae4:	1c07883a 	add	r3,r3,r16
 102fae8:	88bfffc4 	addi	r2,r17,-1
 102faec:	1c00dc36 	bltu	r3,r16,102fe60 <__divdf3+0x718>
 102faf0:	1d80db2e 	bgeu	r3,r22,102fe60 <__divdf3+0x718>
 102faf4:	8c7fff84 	addi	r17,r17,-2
 102faf8:	1c07883a 	add	r3,r3,r16
 102fafc:	1dadc83a 	sub	r22,r3,r22
 102fb00:	b009883a 	mov	r4,r22
 102fb04:	b80b883a 	mov	r5,r23
 102fb08:	d9800315 	stw	r6,12(sp)
 102fb0c:	1021eb40 	call	1021eb4 <__udivsi3>
 102fb10:	b009883a 	mov	r4,r22
 102fb14:	b80b883a 	mov	r5,r23
 102fb18:	d8800015 	stw	r2,0(sp)
 102fb1c:	1021ebc0 	call	1021ebc <__umodsi3>
 102fb20:	da400017 	ldw	r9,0(sp)
 102fb24:	1004943a 	slli	r2,r2,16
 102fb28:	9cffffcc 	andi	r19,r19,65535
 102fb2c:	4f07383a 	mul	r3,r9,fp
 102fb30:	14c8b03a 	or	r4,r2,r19
 102fb34:	d9800317 	ldw	r6,12(sp)
 102fb38:	20c0062e 	bgeu	r4,r3,102fb54 <__divdf3+0x40c>
 102fb3c:	2409883a 	add	r4,r4,r16
 102fb40:	48bfffc4 	addi	r2,r9,-1
 102fb44:	2400c436 	bltu	r4,r16,102fe58 <__divdf3+0x710>
 102fb48:	20c0c32e 	bgeu	r4,r3,102fe58 <__divdf3+0x710>
 102fb4c:	4a7fff84 	addi	r9,r9,-2
 102fb50:	2409883a 	add	r4,r4,r16
 102fb54:	8822943a 	slli	r17,r17,16
 102fb58:	a80ed43a 	srli	r7,r21,16
 102fb5c:	aa3fffcc 	andi	r8,r21,65535
 102fb60:	4c62b03a 	or	r17,r9,r17
 102fb64:	8816d43a 	srli	r11,r17,16
 102fb68:	897fffcc 	andi	r5,r17,65535
 102fb6c:	2a15383a 	mul	r10,r5,r8
 102fb70:	5a19383a 	mul	r12,r11,r8
 102fb74:	29cb383a 	mul	r5,r5,r7
 102fb78:	5012d43a 	srli	r9,r10,16
 102fb7c:	20c5c83a 	sub	r2,r4,r3
 102fb80:	614b883a 	add	r5,r12,r5
 102fb84:	2a4b883a 	add	r5,r5,r9
 102fb88:	59c7383a 	mul	r3,r11,r7
 102fb8c:	2b00022e 	bgeu	r5,r12,102fb98 <__divdf3+0x450>
 102fb90:	01000074 	movhi	r4,1
 102fb94:	1907883a 	add	r3,r3,r4
 102fb98:	2808d43a 	srli	r4,r5,16
 102fb9c:	280a943a 	slli	r5,r5,16
 102fba0:	54ffffcc 	andi	r19,r10,65535
 102fba4:	1907883a 	add	r3,r3,r4
 102fba8:	2ccb883a 	add	r5,r5,r19
 102fbac:	10c09336 	bltu	r2,r3,102fdfc <__divdf3+0x6b4>
 102fbb0:	10c0ad26 	beq	r2,r3,102fe68 <__divdf3+0x720>
 102fbb4:	10c7c83a 	sub	r3,r2,r3
 102fbb8:	3167c83a 	sub	r19,r6,r5
 102fbbc:	34ed803a 	cmpltu	r22,r6,r19
 102fbc0:	1dadc83a 	sub	r22,r3,r22
 102fbc4:	b400b226 	beq	r22,r16,102fe90 <__divdf3+0x748>
 102fbc8:	b009883a 	mov	r4,r22
 102fbcc:	b80b883a 	mov	r5,r23
 102fbd0:	d9c00115 	stw	r7,4(sp)
 102fbd4:	da000215 	stw	r8,8(sp)
 102fbd8:	1021eb40 	call	1021eb4 <__udivsi3>
 102fbdc:	b009883a 	mov	r4,r22
 102fbe0:	b80b883a 	mov	r5,r23
 102fbe4:	d8800315 	stw	r2,12(sp)
 102fbe8:	1021ebc0 	call	1021ebc <__umodsi3>
 102fbec:	d9800317 	ldw	r6,12(sp)
 102fbf0:	1004943a 	slli	r2,r2,16
 102fbf4:	9808d43a 	srli	r4,r19,16
 102fbf8:	372d383a 	mul	r22,r6,fp
 102fbfc:	d9c00117 	ldw	r7,4(sp)
 102fc00:	1106b03a 	or	r3,r2,r4
 102fc04:	da000217 	ldw	r8,8(sp)
 102fc08:	1d80062e 	bgeu	r3,r22,102fc24 <__divdf3+0x4dc>
 102fc0c:	1c07883a 	add	r3,r3,r16
 102fc10:	30bfffc4 	addi	r2,r6,-1
 102fc14:	1c00a036 	bltu	r3,r16,102fe98 <__divdf3+0x750>
 102fc18:	1d809f2e 	bgeu	r3,r22,102fe98 <__divdf3+0x750>
 102fc1c:	31bfff84 	addi	r6,r6,-2
 102fc20:	1c07883a 	add	r3,r3,r16
 102fc24:	1dadc83a 	sub	r22,r3,r22
 102fc28:	b009883a 	mov	r4,r22
 102fc2c:	b80b883a 	mov	r5,r23
 102fc30:	d9800315 	stw	r6,12(sp)
 102fc34:	d9c00115 	stw	r7,4(sp)
 102fc38:	da000215 	stw	r8,8(sp)
 102fc3c:	1021eb40 	call	1021eb4 <__udivsi3>
 102fc40:	b009883a 	mov	r4,r22
 102fc44:	b80b883a 	mov	r5,r23
 102fc48:	d8800015 	stw	r2,0(sp)
 102fc4c:	1021ebc0 	call	1021ebc <__umodsi3>
 102fc50:	da400017 	ldw	r9,0(sp)
 102fc54:	1004943a 	slli	r2,r2,16
 102fc58:	993fffcc 	andi	r4,r19,65535
 102fc5c:	4f39383a 	mul	fp,r9,fp
 102fc60:	1106b03a 	or	r3,r2,r4
 102fc64:	d9800317 	ldw	r6,12(sp)
 102fc68:	d9c00117 	ldw	r7,4(sp)
 102fc6c:	da000217 	ldw	r8,8(sp)
 102fc70:	1f00062e 	bgeu	r3,fp,102fc8c <__divdf3+0x544>
 102fc74:	1c07883a 	add	r3,r3,r16
 102fc78:	48bfffc4 	addi	r2,r9,-1
 102fc7c:	1c008836 	bltu	r3,r16,102fea0 <__divdf3+0x758>
 102fc80:	1f00872e 	bgeu	r3,fp,102fea0 <__divdf3+0x758>
 102fc84:	4a7fff84 	addi	r9,r9,-2
 102fc88:	1c07883a 	add	r3,r3,r16
 102fc8c:	3008943a 	slli	r4,r6,16
 102fc90:	1f07c83a 	sub	r3,r3,fp
 102fc94:	4926b03a 	or	r19,r9,r4
 102fc98:	993fffcc 	andi	r4,r19,65535
 102fc9c:	980cd43a 	srli	r6,r19,16
 102fca0:	220b383a 	mul	r5,r4,r8
 102fca4:	21c5383a 	mul	r2,r4,r7
 102fca8:	3211383a 	mul	r8,r6,r8
 102fcac:	2808d43a 	srli	r4,r5,16
 102fcb0:	31cf383a 	mul	r7,r6,r7
 102fcb4:	4085883a 	add	r2,r8,r2
 102fcb8:	1105883a 	add	r2,r2,r4
 102fcbc:	1200022e 	bgeu	r2,r8,102fcc8 <__divdf3+0x580>
 102fcc0:	01000074 	movhi	r4,1
 102fcc4:	390f883a 	add	r7,r7,r4
 102fcc8:	1008d43a 	srli	r4,r2,16
 102fccc:	1004943a 	slli	r2,r2,16
 102fcd0:	297fffcc 	andi	r5,r5,65535
 102fcd4:	390f883a 	add	r7,r7,r4
 102fcd8:	1145883a 	add	r2,r2,r5
 102fcdc:	19c06536 	bltu	r3,r7,102fe74 <__divdf3+0x72c>
 102fce0:	19c09f26 	beq	r3,r7,102ff60 <__divdf3+0x818>
 102fce4:	9cc00054 	ori	r19,r19,1
 102fce8:	a100ffc4 	addi	r4,r20,1023
 102fcec:	013f500e 	bge	zero,r4,102fa30 <_gp+0xffff174c>
 102fcf0:	988001cc 	andi	r2,r19,7
 102fcf4:	10000726 	beq	r2,zero,102fd14 <__divdf3+0x5cc>
 102fcf8:	98c003cc 	andi	r3,r19,15
 102fcfc:	00800104 	movi	r2,4
 102fd00:	18800426 	beq	r3,r2,102fd14 <__divdf3+0x5cc>
 102fd04:	9885883a 	add	r2,r19,r2
 102fd08:	14e1803a 	cmpltu	r16,r2,r19
 102fd0c:	8c23883a 	add	r17,r17,r16
 102fd10:	1027883a 	mov	r19,r2
 102fd14:	8880402c 	andhi	r2,r17,256
 102fd18:	10000426 	beq	r2,zero,102fd2c <__divdf3+0x5e4>
 102fd1c:	00bfc034 	movhi	r2,65280
 102fd20:	10bfffc4 	addi	r2,r2,-1
 102fd24:	a1010004 	addi	r4,r20,1024
 102fd28:	88a2703a 	and	r17,r17,r2
 102fd2c:	0081ff84 	movi	r2,2046
 102fd30:	113edf16 	blt	r2,r4,102f8b0 <_gp+0xffff15cc>
 102fd34:	9826d0fa 	srli	r19,r19,3
 102fd38:	8804977a 	slli	r2,r17,29
 102fd3c:	8820927a 	slli	r16,r17,9
 102fd40:	2101ffcc 	andi	r4,r4,2047
 102fd44:	14e6b03a 	or	r19,r2,r19
 102fd48:	800ad33a 	srli	r5,r16,12
 102fd4c:	9180004c 	andi	r6,r18,1
 102fd50:	003edb06 	br	102f8c0 <_gp+0xffff15dc>
 102fd54:	008000c4 	movi	r2,3
 102fd58:	4080a826 	beq	r8,r2,102fffc <__divdf3+0x8b4>
 102fd5c:	00800044 	movi	r2,1
 102fd60:	4080551e 	bne	r8,r2,102feb8 <__divdf3+0x770>
 102fd64:	e00d883a 	mov	r6,fp
 102fd68:	0009883a 	mov	r4,zero
 102fd6c:	000b883a 	mov	r5,zero
 102fd70:	0027883a 	mov	r19,zero
 102fd74:	003ed206 	br	102f8c0 <_gp+0xffff15dc>
 102fd78:	00800434 	movhi	r2,16
 102fd7c:	89400234 	orhi	r5,r17,8
 102fd80:	10bfffc4 	addi	r2,r2,-1
 102fd84:	b00d883a 	mov	r6,r22
 102fd88:	288a703a 	and	r5,r5,r2
 102fd8c:	003f2606 	br	102fa28 <_gp+0xffff1744>
 102fd90:	d9800315 	stw	r6,12(sp)
 102fd94:	d9c00115 	stw	r7,4(sp)
 102fd98:	10314480 	call	1031448 <__clzsi2>
 102fd9c:	10c00804 	addi	r3,r2,32
 102fda0:	010009c4 	movi	r4,39
 102fda4:	d9800317 	ldw	r6,12(sp)
 102fda8:	d9c00117 	ldw	r7,4(sp)
 102fdac:	20fee30e 	bge	r4,r3,102f93c <_gp+0xffff1658>
 102fdb0:	117ffe04 	addi	r5,r2,-8
 102fdb4:	9162983a 	sll	r17,r18,r5
 102fdb8:	0027883a 	mov	r19,zero
 102fdbc:	003ee606 	br	102f958 <_gp+0xffff1674>
 102fdc0:	3009883a 	mov	r4,r6
 102fdc4:	d9800315 	stw	r6,12(sp)
 102fdc8:	da000215 	stw	r8,8(sp)
 102fdcc:	da400015 	stw	r9,0(sp)
 102fdd0:	10314480 	call	1031448 <__clzsi2>
 102fdd4:	10c00804 	addi	r3,r2,32
 102fdd8:	010009c4 	movi	r4,39
 102fddc:	d9800317 	ldw	r6,12(sp)
 102fde0:	da000217 	ldw	r8,8(sp)
 102fde4:	da400017 	ldw	r9,0(sp)
 102fde8:	20fef20e 	bge	r4,r3,102f9b4 <_gp+0xffff16d0>
 102fdec:	10bffe04 	addi	r2,r2,-8
 102fdf0:	a8a0983a 	sll	r16,r21,r2
 102fdf4:	002b883a 	mov	r21,zero
 102fdf8:	003ef506 	br	102f9d0 <_gp+0xffff16ec>
 102fdfc:	354d883a 	add	r6,r6,r21
 102fe00:	3549803a 	cmpltu	r4,r6,r21
 102fe04:	2409883a 	add	r4,r4,r16
 102fe08:	2089883a 	add	r4,r4,r2
 102fe0c:	88bfffc4 	addi	r2,r17,-1
 102fe10:	81000c2e 	bgeu	r16,r4,102fe44 <__divdf3+0x6fc>
 102fe14:	20c04436 	bltu	r4,r3,102ff28 <__divdf3+0x7e0>
 102fe18:	19006f26 	beq	r3,r4,102ffd8 <__divdf3+0x890>
 102fe1c:	20c7c83a 	sub	r3,r4,r3
 102fe20:	1023883a 	mov	r17,r2
 102fe24:	003f6406 	br	102fbb8 <_gp+0xffff18d4>
 102fe28:	9d7f1736 	bltu	r19,r21,102fa88 <_gp+0xffff17a4>
 102fe2c:	9806d07a 	srli	r3,r19,1
 102fe30:	880497fa 	slli	r2,r17,31
 102fe34:	980c97fa 	slli	r6,r19,31
 102fe38:	882cd07a 	srli	r22,r17,1
 102fe3c:	18a6b03a 	or	r19,r3,r2
 102fe40:	003f1406 	br	102fa94 <_gp+0xffff17b0>
 102fe44:	243ff51e 	bne	r4,r16,102fe1c <_gp+0xffff1b38>
 102fe48:	357ff22e 	bgeu	r6,r21,102fe14 <_gp+0xffff1b30>
 102fe4c:	80c7c83a 	sub	r3,r16,r3
 102fe50:	1023883a 	mov	r17,r2
 102fe54:	003f5806 	br	102fbb8 <_gp+0xffff18d4>
 102fe58:	1013883a 	mov	r9,r2
 102fe5c:	003f3d06 	br	102fb54 <_gp+0xffff1870>
 102fe60:	1023883a 	mov	r17,r2
 102fe64:	003f2506 	br	102fafc <_gp+0xffff1818>
 102fe68:	317fe436 	bltu	r6,r5,102fdfc <_gp+0xffff1b18>
 102fe6c:	0007883a 	mov	r3,zero
 102fe70:	003f5106 	br	102fbb8 <_gp+0xffff18d4>
 102fe74:	1c07883a 	add	r3,r3,r16
 102fe78:	993fffc4 	addi	r4,r19,-1
 102fe7c:	1c000a2e 	bgeu	r3,r16,102fea8 <__divdf3+0x760>
 102fe80:	2027883a 	mov	r19,r4
 102fe84:	19ff971e 	bne	r3,r7,102fce4 <_gp+0xffff1a00>
 102fe88:	a8bf961e 	bne	r21,r2,102fce4 <_gp+0xffff1a00>
 102fe8c:	003f9606 	br	102fce8 <_gp+0xffff1a04>
 102fe90:	04ffffc4 	movi	r19,-1
 102fe94:	003f9406 	br	102fce8 <_gp+0xffff1a04>
 102fe98:	100d883a 	mov	r6,r2
 102fe9c:	003f6106 	br	102fc24 <_gp+0xffff1940>
 102fea0:	1013883a 	mov	r9,r2
 102fea4:	003f7906 	br	102fc8c <_gp+0xffff19a8>
 102fea8:	19c02636 	bltu	r3,r7,102ff44 <__divdf3+0x7fc>
 102feac:	38c04d26 	beq	r7,r3,102ffe4 <__divdf3+0x89c>
 102feb0:	2027883a 	mov	r19,r4
 102feb4:	003f8b06 	br	102fce4 <_gp+0xffff1a00>
 102feb8:	e025883a 	mov	r18,fp
 102febc:	003f8a06 	br	102fce8 <_gp+0xffff1a04>
 102fec0:	008007c4 	movi	r2,31
 102fec4:	14002a16 	blt	r2,r16,102ff70 <__divdf3+0x828>
 102fec8:	a5010784 	addi	r20,r20,1054
 102fecc:	8d04983a 	sll	r2,r17,r20
 102fed0:	9c06d83a 	srl	r3,r19,r16
 102fed4:	9d28983a 	sll	r20,r19,r20
 102fed8:	8c20d83a 	srl	r16,r17,r16
 102fedc:	1886b03a 	or	r3,r3,r2
 102fee0:	a004c03a 	cmpne	r2,r20,zero
 102fee4:	1884b03a 	or	r2,r3,r2
 102fee8:	10c001cc 	andi	r3,r2,7
 102feec:	18000726 	beq	r3,zero,102ff0c <__divdf3+0x7c4>
 102fef0:	110003cc 	andi	r4,r2,15
 102fef4:	00c00104 	movi	r3,4
 102fef8:	20c00426 	beq	r4,r3,102ff0c <__divdf3+0x7c4>
 102fefc:	10c00104 	addi	r3,r2,4
 102ff00:	1885803a 	cmpltu	r2,r3,r2
 102ff04:	80a1883a 	add	r16,r16,r2
 102ff08:	1805883a 	mov	r2,r3
 102ff0c:	80c0202c 	andhi	r3,r16,128
 102ff10:	18002d26 	beq	r3,zero,102ffc8 <__divdf3+0x880>
 102ff14:	9180004c 	andi	r6,r18,1
 102ff18:	01000044 	movi	r4,1
 102ff1c:	000b883a 	mov	r5,zero
 102ff20:	0027883a 	mov	r19,zero
 102ff24:	003e6606 	br	102f8c0 <_gp+0xffff15dc>
 102ff28:	354d883a 	add	r6,r6,r21
 102ff2c:	356d803a 	cmpltu	r22,r6,r21
 102ff30:	b42d883a 	add	r22,r22,r16
 102ff34:	b12d883a 	add	r22,r22,r4
 102ff38:	8c7fff84 	addi	r17,r17,-2
 102ff3c:	b0c7c83a 	sub	r3,r22,r3
 102ff40:	003f1d06 	br	102fbb8 <_gp+0xffff18d4>
 102ff44:	ad4b883a 	add	r5,r21,r21
 102ff48:	2d6b803a 	cmpltu	r21,r5,r21
 102ff4c:	ac2b883a 	add	r21,r21,r16
 102ff50:	1d47883a 	add	r3,r3,r21
 102ff54:	993fff84 	addi	r4,r19,-2
 102ff58:	282b883a 	mov	r21,r5
 102ff5c:	003fc806 	br	102fe80 <_gp+0xffff1b9c>
 102ff60:	103fc41e 	bne	r2,zero,102fe74 <_gp+0xffff1b90>
 102ff64:	002b883a 	mov	r21,zero
 102ff68:	a8bf5e1e 	bne	r21,r2,102fce4 <_gp+0xffff1a00>
 102ff6c:	003f5e06 	br	102fce8 <_gp+0xffff1a04>
 102ff70:	00bef884 	movi	r2,-1054
 102ff74:	1505c83a 	sub	r2,r2,r20
 102ff78:	00c00804 	movi	r3,32
 102ff7c:	8884d83a 	srl	r2,r17,r2
 102ff80:	80c01c26 	beq	r16,r3,102fff4 <__divdf3+0x8ac>
 102ff84:	a0c10f84 	addi	r3,r20,1086
 102ff88:	88c6983a 	sll	r3,r17,r3
 102ff8c:	1cc6b03a 	or	r3,r3,r19
 102ff90:	1806c03a 	cmpne	r3,r3,zero
 102ff94:	1884b03a 	or	r2,r3,r2
 102ff98:	140001cc 	andi	r16,r2,7
 102ff9c:	8000061e 	bne	r16,zero,102ffb8 <__divdf3+0x870>
 102ffa0:	000b883a 	mov	r5,zero
 102ffa4:	1004d0fa 	srli	r2,r2,3
 102ffa8:	9180004c 	andi	r6,r18,1
 102ffac:	0009883a 	mov	r4,zero
 102ffb0:	1426b03a 	or	r19,r2,r16
 102ffb4:	003e4206 	br	102f8c0 <_gp+0xffff15dc>
 102ffb8:	110003cc 	andi	r4,r2,15
 102ffbc:	00c00104 	movi	r3,4
 102ffc0:	0021883a 	mov	r16,zero
 102ffc4:	20ffcd1e 	bne	r4,r3,102fefc <_gp+0xffff1c18>
 102ffc8:	800a927a 	slli	r5,r16,9
 102ffcc:	8020977a 	slli	r16,r16,29
 102ffd0:	280ad33a 	srli	r5,r5,12
 102ffd4:	003ff306 	br	102ffa4 <_gp+0xffff1cc0>
 102ffd8:	317fd336 	bltu	r6,r5,102ff28 <_gp+0xffff1c44>
 102ffdc:	1023883a 	mov	r17,r2
 102ffe0:	003fa206 	br	102fe6c <_gp+0xffff1b88>
 102ffe4:	a8bfd736 	bltu	r21,r2,102ff44 <_gp+0xffff1c60>
 102ffe8:	2027883a 	mov	r19,r4
 102ffec:	a8bf3d1e 	bne	r21,r2,102fce4 <_gp+0xffff1a00>
 102fff0:	003f3d06 	br	102fce8 <_gp+0xffff1a04>
 102fff4:	0007883a 	mov	r3,zero
 102fff8:	003fe406 	br	102ff8c <_gp+0xffff1ca8>
 102fffc:	00800434 	movhi	r2,16
 1030000:	89400234 	orhi	r5,r17,8
 1030004:	10bfffc4 	addi	r2,r2,-1
 1030008:	e00d883a 	mov	r6,fp
 103000c:	288a703a 	and	r5,r5,r2
 1030010:	003e8506 	br	102fa28 <_gp+0xffff1744>

01030014 <__eqdf2>:
 1030014:	2804d53a 	srli	r2,r5,20
 1030018:	3806d53a 	srli	r3,r7,20
 103001c:	02000434 	movhi	r8,16
 1030020:	423fffc4 	addi	r8,r8,-1
 1030024:	1081ffcc 	andi	r2,r2,2047
 1030028:	0241ffc4 	movi	r9,2047
 103002c:	2a14703a 	and	r10,r5,r8
 1030030:	18c1ffcc 	andi	r3,r3,2047
 1030034:	3a10703a 	and	r8,r7,r8
 1030038:	280ad7fa 	srli	r5,r5,31
 103003c:	380ed7fa 	srli	r7,r7,31
 1030040:	12400f26 	beq	r2,r9,1030080 <__eqdf2+0x6c>
 1030044:	0241ffc4 	movi	r9,2047
 1030048:	1a400326 	beq	r3,r9,1030058 <__eqdf2+0x44>
 103004c:	10c00526 	beq	r2,r3,1030064 <__eqdf2+0x50>
 1030050:	00800044 	movi	r2,1
 1030054:	f800283a 	ret
 1030058:	4192b03a 	or	r9,r8,r6
 103005c:	483ffc1e 	bne	r9,zero,1030050 <_gp+0xffff1d6c>
 1030060:	10fffb1e 	bne	r2,r3,1030050 <_gp+0xffff1d6c>
 1030064:	523ffa1e 	bne	r10,r8,1030050 <_gp+0xffff1d6c>
 1030068:	21bff91e 	bne	r4,r6,1030050 <_gp+0xffff1d6c>
 103006c:	29c00826 	beq	r5,r7,1030090 <__eqdf2+0x7c>
 1030070:	103ff71e 	bne	r2,zero,1030050 <_gp+0xffff1d6c>
 1030074:	5104b03a 	or	r2,r10,r4
 1030078:	1004c03a 	cmpne	r2,r2,zero
 103007c:	f800283a 	ret
 1030080:	5112b03a 	or	r9,r10,r4
 1030084:	483fef26 	beq	r9,zero,1030044 <_gp+0xffff1d60>
 1030088:	00800044 	movi	r2,1
 103008c:	f800283a 	ret
 1030090:	0005883a 	mov	r2,zero
 1030094:	f800283a 	ret

01030098 <__gedf2>:
 1030098:	2804d53a 	srli	r2,r5,20
 103009c:	3806d53a 	srli	r3,r7,20
 10300a0:	02000434 	movhi	r8,16
 10300a4:	423fffc4 	addi	r8,r8,-1
 10300a8:	0241ffc4 	movi	r9,2047
 10300ac:	1081ffcc 	andi	r2,r2,2047
 10300b0:	2a14703a 	and	r10,r5,r8
 10300b4:	1a46703a 	and	r3,r3,r9
 10300b8:	3a10703a 	and	r8,r7,r8
 10300bc:	280ad7fa 	srli	r5,r5,31
 10300c0:	380ed7fa 	srli	r7,r7,31
 10300c4:	12400b26 	beq	r2,r9,10300f4 <__gedf2+0x5c>
 10300c8:	1a401626 	beq	r3,r9,1030124 <__gedf2+0x8c>
 10300cc:	10000c1e 	bne	r2,zero,1030100 <__gedf2+0x68>
 10300d0:	5112b03a 	or	r9,r10,r4
 10300d4:	4813003a 	cmpeq	r9,r9,zero
 10300d8:	4817883a 	mov	r11,r9
 10300dc:	18000c1e 	bne	r3,zero,1030110 <__gedf2+0x78>
 10300e0:	4198b03a 	or	r12,r8,r6
 10300e4:	60000a1e 	bne	r12,zero,1030110 <__gedf2+0x78>
 10300e8:	48001326 	beq	r9,zero,1030138 <__gedf2+0xa0>
 10300ec:	0005883a 	mov	r2,zero
 10300f0:	f800283a 	ret
 10300f4:	5112b03a 	or	r9,r10,r4
 10300f8:	4800191e 	bne	r9,zero,1030160 <__gedf2+0xc8>
 10300fc:	18800926 	beq	r3,r2,1030124 <__gedf2+0x8c>
 1030100:	18000b1e 	bne	r3,zero,1030130 <__gedf2+0x98>
 1030104:	4192b03a 	or	r9,r8,r6
 1030108:	0017883a 	mov	r11,zero
 103010c:	48000a26 	beq	r9,zero,1030138 <__gedf2+0xa0>
 1030110:	39c03fcc 	andi	r7,r7,255
 1030114:	58000726 	beq	r11,zero,1030134 <__gedf2+0x9c>
 1030118:	3800081e 	bne	r7,zero,103013c <__gedf2+0xa4>
 103011c:	00bfffc4 	movi	r2,-1
 1030120:	f800283a 	ret
 1030124:	4192b03a 	or	r9,r8,r6
 1030128:	48000d1e 	bne	r9,zero,1030160 <__gedf2+0xc8>
 103012c:	103fe826 	beq	r2,zero,10300d0 <_gp+0xffff1dec>
 1030130:	39c03fcc 	andi	r7,r7,255
 1030134:	29c00326 	beq	r5,r7,1030144 <__gedf2+0xac>
 1030138:	283ff81e 	bne	r5,zero,103011c <_gp+0xffff1e38>
 103013c:	00800044 	movi	r2,1
 1030140:	f800283a 	ret
 1030144:	18bffc16 	blt	r3,r2,1030138 <_gp+0xffff1e54>
 1030148:	10c00316 	blt	r2,r3,1030158 <__gedf2+0xc0>
 103014c:	42bffa36 	bltu	r8,r10,1030138 <_gp+0xffff1e54>
 1030150:	52000526 	beq	r10,r8,1030168 <__gedf2+0xd0>
 1030154:	523fe52e 	bgeu	r10,r8,10300ec <_gp+0xffff1e08>
 1030158:	283ff026 	beq	r5,zero,103011c <_gp+0xffff1e38>
 103015c:	003ff706 	br	103013c <_gp+0xffff1e58>
 1030160:	00bfff84 	movi	r2,-2
 1030164:	f800283a 	ret
 1030168:	313ff336 	bltu	r6,r4,1030138 <_gp+0xffff1e54>
 103016c:	21bfdf2e 	bgeu	r4,r6,10300ec <_gp+0xffff1e08>
 1030170:	283fea26 	beq	r5,zero,103011c <_gp+0xffff1e38>
 1030174:	003ff106 	br	103013c <_gp+0xffff1e58>

01030178 <__ledf2>:
 1030178:	2804d53a 	srli	r2,r5,20
 103017c:	3810d53a 	srli	r8,r7,20
 1030180:	00c00434 	movhi	r3,16
 1030184:	18ffffc4 	addi	r3,r3,-1
 1030188:	0241ffc4 	movi	r9,2047
 103018c:	1081ffcc 	andi	r2,r2,2047
 1030190:	28d4703a 	and	r10,r5,r3
 1030194:	4250703a 	and	r8,r8,r9
 1030198:	38c6703a 	and	r3,r7,r3
 103019c:	280ad7fa 	srli	r5,r5,31
 10301a0:	380ed7fa 	srli	r7,r7,31
 10301a4:	12400b26 	beq	r2,r9,10301d4 <__ledf2+0x5c>
 10301a8:	42401926 	beq	r8,r9,1030210 <__ledf2+0x98>
 10301ac:	10000c1e 	bne	r2,zero,10301e0 <__ledf2+0x68>
 10301b0:	5112b03a 	or	r9,r10,r4
 10301b4:	4813003a 	cmpeq	r9,r9,zero
 10301b8:	4817883a 	mov	r11,r9
 10301bc:	40000f26 	beq	r8,zero,10301fc <__ledf2+0x84>
 10301c0:	39c03fcc 	andi	r7,r7,255
 10301c4:	58001826 	beq	r11,zero,1030228 <__ledf2+0xb0>
 10301c8:	38000a1e 	bne	r7,zero,10301f4 <__ledf2+0x7c>
 10301cc:	00bfffc4 	movi	r2,-1
 10301d0:	f800283a 	ret
 10301d4:	5112b03a 	or	r9,r10,r4
 10301d8:	48000f1e 	bne	r9,zero,1030218 <__ledf2+0xa0>
 10301dc:	40800c26 	beq	r8,r2,1030210 <__ledf2+0x98>
 10301e0:	4000101e 	bne	r8,zero,1030224 <__ledf2+0xac>
 10301e4:	1992b03a 	or	r9,r3,r6
 10301e8:	0017883a 	mov	r11,zero
 10301ec:	483ff41e 	bne	r9,zero,10301c0 <_gp+0xffff1edc>
 10301f0:	283ff61e 	bne	r5,zero,10301cc <_gp+0xffff1ee8>
 10301f4:	00800044 	movi	r2,1
 10301f8:	f800283a 	ret
 10301fc:	1998b03a 	or	r12,r3,r6
 1030200:	603fef1e 	bne	r12,zero,10301c0 <_gp+0xffff1edc>
 1030204:	483ffa26 	beq	r9,zero,10301f0 <_gp+0xffff1f0c>
 1030208:	0005883a 	mov	r2,zero
 103020c:	f800283a 	ret
 1030210:	1992b03a 	or	r9,r3,r6
 1030214:	48000226 	beq	r9,zero,1030220 <__ledf2+0xa8>
 1030218:	00800084 	movi	r2,2
 103021c:	f800283a 	ret
 1030220:	103fe326 	beq	r2,zero,10301b0 <_gp+0xffff1ecc>
 1030224:	39c03fcc 	andi	r7,r7,255
 1030228:	29fff11e 	bne	r5,r7,10301f0 <_gp+0xffff1f0c>
 103022c:	40bff016 	blt	r8,r2,10301f0 <_gp+0xffff1f0c>
 1030230:	12000316 	blt	r2,r8,1030240 <__ledf2+0xc8>
 1030234:	1abfee36 	bltu	r3,r10,10301f0 <_gp+0xffff1f0c>
 1030238:	50c00326 	beq	r10,r3,1030248 <__ledf2+0xd0>
 103023c:	50fff22e 	bgeu	r10,r3,1030208 <_gp+0xffff1f24>
 1030240:	283fe226 	beq	r5,zero,10301cc <_gp+0xffff1ee8>
 1030244:	003feb06 	br	10301f4 <_gp+0xffff1f10>
 1030248:	313fe936 	bltu	r6,r4,10301f0 <_gp+0xffff1f0c>
 103024c:	21bfee2e 	bgeu	r4,r6,1030208 <_gp+0xffff1f24>
 1030250:	283fde26 	beq	r5,zero,10301cc <_gp+0xffff1ee8>
 1030254:	003fe706 	br	10301f4 <_gp+0xffff1f10>

01030258 <__muldf3>:
 1030258:	defff204 	addi	sp,sp,-56
 103025c:	2804d53a 	srli	r2,r5,20
 1030260:	dd800a15 	stw	r22,40(sp)
 1030264:	282cd7fa 	srli	r22,r5,31
 1030268:	dc000415 	stw	r16,16(sp)
 103026c:	04000434 	movhi	r16,16
 1030270:	df000c15 	stw	fp,48(sp)
 1030274:	dd000815 	stw	r20,32(sp)
 1030278:	dcc00715 	stw	r19,28(sp)
 103027c:	dc800615 	stw	r18,24(sp)
 1030280:	dc400515 	stw	r17,20(sp)
 1030284:	843fffc4 	addi	r16,r16,-1
 1030288:	dfc00d15 	stw	ra,52(sp)
 103028c:	ddc00b15 	stw	r23,44(sp)
 1030290:	dd400915 	stw	r21,36(sp)
 1030294:	1501ffcc 	andi	r20,r2,2047
 1030298:	2023883a 	mov	r17,r4
 103029c:	2025883a 	mov	r18,r4
 10302a0:	2c20703a 	and	r16,r5,r16
 10302a4:	b027883a 	mov	r19,r22
 10302a8:	b7003fcc 	andi	fp,r22,255
 10302ac:	a0005926 	beq	r20,zero,1030414 <__muldf3+0x1bc>
 10302b0:	0081ffc4 	movi	r2,2047
 10302b4:	a0803426 	beq	r20,r2,1030388 <__muldf3+0x130>
 10302b8:	84000434 	orhi	r16,r16,16
 10302bc:	2004d77a 	srli	r2,r4,29
 10302c0:	802090fa 	slli	r16,r16,3
 10302c4:	202490fa 	slli	r18,r4,3
 10302c8:	a53f0044 	addi	r20,r20,-1023
 10302cc:	80a0b03a 	or	r16,r16,r2
 10302d0:	002b883a 	mov	r21,zero
 10302d4:	0015883a 	mov	r10,zero
 10302d8:	3812d53a 	srli	r9,r7,20
 10302dc:	3806d7fa 	srli	r3,r7,31
 10302e0:	02000434 	movhi	r8,16
 10302e4:	423fffc4 	addi	r8,r8,-1
 10302e8:	4941ffcc 	andi	r5,r9,2047
 10302ec:	302f883a 	mov	r23,r6
 10302f0:	3a22703a 	and	r17,r7,r8
 10302f4:	1ac03fcc 	andi	r11,r3,255
 10302f8:	28006226 	beq	r5,zero,1030484 <__muldf3+0x22c>
 10302fc:	0081ffc4 	movi	r2,2047
 1030300:	28805a26 	beq	r5,r2,103046c <__muldf3+0x214>
 1030304:	8a000434 	orhi	r8,r17,16
 1030308:	3004d77a 	srli	r2,r6,29
 103030c:	401090fa 	slli	r8,r8,3
 1030310:	302e90fa 	slli	r23,r6,3
 1030314:	297f0044 	addi	r5,r5,-1023
 1030318:	40a2b03a 	or	r17,r8,r2
 103031c:	0013883a 	mov	r9,zero
 1030320:	4d4cb03a 	or	r6,r9,r21
 1030324:	300c90ba 	slli	r6,r6,2
 1030328:	020040f4 	movhi	r8,259
 103032c:	4200d204 	addi	r8,r8,840
 1030330:	320d883a 	add	r6,r6,r8
 1030334:	31800017 	ldw	r6,0(r6)
 1030338:	a14b883a 	add	r5,r20,r5
 103033c:	1dacf03a 	xor	r22,r3,r22
 1030340:	2b000044 	addi	r12,r5,1
 1030344:	3000683a 	jmp	r6
 1030348:	01030584 	movi	r4,3094
 103034c:	01030570 	cmpltui	r4,zero,3093
 1030350:	01030570 	cmpltui	r4,zero,3093
 1030354:	0103055c 	xori	r4,zero,3093
 1030358:	010303a4 	muli	r4,zero,3086
 103035c:	010303a4 	muli	r4,zero,3086
 1030360:	01030544 	movi	r4,3093
 1030364:	0103055c 	xori	r4,zero,3093
 1030368:	010303a4 	muli	r4,zero,3086
 103036c:	01030544 	movi	r4,3093
 1030370:	010303a4 	muli	r4,zero,3086
 1030374:	0103055c 	xori	r4,zero,3093
 1030378:	010303a8 	cmpgeui	r4,zero,3086
 103037c:	010303a8 	cmpgeui	r4,zero,3086
 1030380:	010303a8 	cmpgeui	r4,zero,3086
 1030384:	01030780 	call	103078 <__alt_mem_onchip_memory2-0xf1cf88>
 1030388:	8104b03a 	or	r2,r16,r4
 103038c:	10006a1e 	bne	r2,zero,1030538 <__muldf3+0x2e0>
 1030390:	05400204 	movi	r21,8
 1030394:	0021883a 	mov	r16,zero
 1030398:	0025883a 	mov	r18,zero
 103039c:	02800084 	movi	r10,2
 10303a0:	003fcd06 	br	10302d8 <_gp+0xffff1ff4>
 10303a4:	b039883a 	mov	fp,r22
 10303a8:	00800084 	movi	r2,2
 10303ac:	50804e1e 	bne	r10,r2,10304e8 <__muldf3+0x290>
 10303b0:	e4c0004c 	andi	r19,fp,1
 10303b4:	0101ffc4 	movi	r4,2047
 10303b8:	0021883a 	mov	r16,zero
 10303bc:	0025883a 	mov	r18,zero
 10303c0:	2008953a 	slli	r4,r4,20
 10303c4:	98c03fcc 	andi	r3,r19,255
 10303c8:	01400434 	movhi	r5,16
 10303cc:	297fffc4 	addi	r5,r5,-1
 10303d0:	180697fa 	slli	r3,r3,31
 10303d4:	8160703a 	and	r16,r16,r5
 10303d8:	8120b03a 	or	r16,r16,r4
 10303dc:	80c6b03a 	or	r3,r16,r3
 10303e0:	9005883a 	mov	r2,r18
 10303e4:	dfc00d17 	ldw	ra,52(sp)
 10303e8:	df000c17 	ldw	fp,48(sp)
 10303ec:	ddc00b17 	ldw	r23,44(sp)
 10303f0:	dd800a17 	ldw	r22,40(sp)
 10303f4:	dd400917 	ldw	r21,36(sp)
 10303f8:	dd000817 	ldw	r20,32(sp)
 10303fc:	dcc00717 	ldw	r19,28(sp)
 1030400:	dc800617 	ldw	r18,24(sp)
 1030404:	dc400517 	ldw	r17,20(sp)
 1030408:	dc000417 	ldw	r16,16(sp)
 103040c:	dec00e04 	addi	sp,sp,56
 1030410:	f800283a 	ret
 1030414:	8104b03a 	or	r2,r16,r4
 1030418:	10004226 	beq	r2,zero,1030524 <__muldf3+0x2cc>
 103041c:	8000f926 	beq	r16,zero,1030804 <__muldf3+0x5ac>
 1030420:	8009883a 	mov	r4,r16
 1030424:	d9800315 	stw	r6,12(sp)
 1030428:	d9c00015 	stw	r7,0(sp)
 103042c:	10314480 	call	1031448 <__clzsi2>
 1030430:	d9800317 	ldw	r6,12(sp)
 1030434:	d9c00017 	ldw	r7,0(sp)
 1030438:	1007883a 	mov	r3,r2
 103043c:	01000a04 	movi	r4,40
 1030440:	18bffe04 	addi	r2,r3,-8
 1030444:	20c9c83a 	sub	r4,r4,r3
 1030448:	80a0983a 	sll	r16,r16,r2
 103044c:	8908d83a 	srl	r4,r17,r4
 1030450:	88a4983a 	sll	r18,r17,r2
 1030454:	2420b03a 	or	r16,r4,r16
 1030458:	017f0344 	movi	r5,-1011
 103045c:	28e9c83a 	sub	r20,r5,r3
 1030460:	002b883a 	mov	r21,zero
 1030464:	0015883a 	mov	r10,zero
 1030468:	003f9b06 	br	10302d8 <_gp+0xffff1ff4>
 103046c:	8984b03a 	or	r2,r17,r6
 1030470:	10002a1e 	bne	r2,zero,103051c <__muldf3+0x2c4>
 1030474:	0023883a 	mov	r17,zero
 1030478:	002f883a 	mov	r23,zero
 103047c:	02400084 	movi	r9,2
 1030480:	003fa706 	br	1030320 <_gp+0xffff203c>
 1030484:	8984b03a 	or	r2,r17,r6
 1030488:	10002026 	beq	r2,zero,103050c <__muldf3+0x2b4>
 103048c:	8800cc26 	beq	r17,zero,10307c0 <__muldf3+0x568>
 1030490:	8809883a 	mov	r4,r17
 1030494:	d8c00215 	stw	r3,8(sp)
 1030498:	d9800315 	stw	r6,12(sp)
 103049c:	da800015 	stw	r10,0(sp)
 10304a0:	dac00115 	stw	r11,4(sp)
 10304a4:	10314480 	call	1031448 <__clzsi2>
 10304a8:	d8c00217 	ldw	r3,8(sp)
 10304ac:	d9800317 	ldw	r6,12(sp)
 10304b0:	da800017 	ldw	r10,0(sp)
 10304b4:	dac00117 	ldw	r11,4(sp)
 10304b8:	1009883a 	mov	r4,r2
 10304bc:	01400a04 	movi	r5,40
 10304c0:	25fffe04 	addi	r23,r4,-8
 10304c4:	290bc83a 	sub	r5,r5,r4
 10304c8:	8dd0983a 	sll	r8,r17,r23
 10304cc:	314ad83a 	srl	r5,r6,r5
 10304d0:	35ee983a 	sll	r23,r6,r23
 10304d4:	2a22b03a 	or	r17,r5,r8
 10304d8:	017f0344 	movi	r5,-1011
 10304dc:	290bc83a 	sub	r5,r5,r4
 10304e0:	0013883a 	mov	r9,zero
 10304e4:	003f8e06 	br	1030320 <_gp+0xffff203c>
 10304e8:	008000c4 	movi	r2,3
 10304ec:	50811d26 	beq	r10,r2,1030964 <__muldf3+0x70c>
 10304f0:	00800044 	movi	r2,1
 10304f4:	5080e01e 	bne	r10,r2,1030878 <__muldf3+0x620>
 10304f8:	e0a6703a 	and	r19,fp,r2
 10304fc:	0009883a 	mov	r4,zero
 1030500:	0021883a 	mov	r16,zero
 1030504:	0025883a 	mov	r18,zero
 1030508:	003fad06 	br	10303c0 <_gp+0xffff20dc>
 103050c:	0023883a 	mov	r17,zero
 1030510:	002f883a 	mov	r23,zero
 1030514:	02400044 	movi	r9,1
 1030518:	003f8106 	br	1030320 <_gp+0xffff203c>
 103051c:	024000c4 	movi	r9,3
 1030520:	003f7f06 	br	1030320 <_gp+0xffff203c>
 1030524:	05400104 	movi	r21,4
 1030528:	0021883a 	mov	r16,zero
 103052c:	0025883a 	mov	r18,zero
 1030530:	02800044 	movi	r10,1
 1030534:	003f6806 	br	10302d8 <_gp+0xffff1ff4>
 1030538:	05400304 	movi	r21,12
 103053c:	028000c4 	movi	r10,3
 1030540:	003f6506 	br	10302d8 <_gp+0xffff1ff4>
 1030544:	04000434 	movhi	r16,16
 1030548:	0027883a 	mov	r19,zero
 103054c:	843fffc4 	addi	r16,r16,-1
 1030550:	04bfffc4 	movi	r18,-1
 1030554:	0101ffc4 	movi	r4,2047
 1030558:	003f9906 	br	10303c0 <_gp+0xffff20dc>
 103055c:	8821883a 	mov	r16,r17
 1030560:	b825883a 	mov	r18,r23
 1030564:	5839883a 	mov	fp,r11
 1030568:	4815883a 	mov	r10,r9
 103056c:	003f8e06 	br	10303a8 <_gp+0xffff20c4>
 1030570:	8821883a 	mov	r16,r17
 1030574:	b825883a 	mov	r18,r23
 1030578:	b039883a 	mov	fp,r22
 103057c:	4815883a 	mov	r10,r9
 1030580:	003f8906 	br	10303a8 <_gp+0xffff20c4>
 1030584:	b80cd43a 	srli	r6,r23,16
 1030588:	9006d43a 	srli	r3,r18,16
 103058c:	90bfffcc 	andi	r2,r18,65535
 1030590:	bdffffcc 	andi	r23,r23,65535
 1030594:	b891383a 	mul	r8,r23,r2
 1030598:	b8c9383a 	mul	r4,r23,r3
 103059c:	309b383a 	mul	r13,r6,r2
 10305a0:	400ed43a 	srli	r7,r8,16
 10305a4:	30df383a 	mul	r15,r6,r3
 10305a8:	235b883a 	add	r13,r4,r13
 10305ac:	69db883a 	add	r13,r13,r7
 10305b0:	6900022e 	bgeu	r13,r4,10305bc <__muldf3+0x364>
 10305b4:	01000074 	movhi	r4,1
 10305b8:	791f883a 	add	r15,r15,r4
 10305bc:	8828d43a 	srli	r20,r17,16
 10305c0:	8c7fffcc 	andi	r17,r17,65535
 10305c4:	888f383a 	mul	r7,r17,r2
 10305c8:	88d3383a 	mul	r9,r17,r3
 10305cc:	a0a5383a 	mul	r18,r20,r2
 10305d0:	3816d43a 	srli	r11,r7,16
 10305d4:	6814943a 	slli	r10,r13,16
 10305d8:	4ca5883a 	add	r18,r9,r18
 10305dc:	423fffcc 	andi	r8,r8,65535
 10305e0:	92e5883a 	add	r18,r18,r11
 10305e4:	6808d43a 	srli	r4,r13,16
 10305e8:	5215883a 	add	r10,r10,r8
 10305ec:	a0c7383a 	mul	r3,r20,r3
 10305f0:	9240022e 	bgeu	r18,r9,10305fc <__muldf3+0x3a4>
 10305f4:	00800074 	movhi	r2,1
 10305f8:	1887883a 	add	r3,r3,r2
 10305fc:	802ad43a 	srli	r21,r16,16
 1030600:	80bfffcc 	andi	r2,r16,65535
 1030604:	b893383a 	mul	r9,r23,r2
 1030608:	3091383a 	mul	r8,r6,r2
 103060c:	bd6f383a 	mul	r23,r23,r21
 1030610:	9026943a 	slli	r19,r18,16
 1030614:	481ad43a 	srli	r13,r9,16
 1030618:	9024d43a 	srli	r18,r18,16
 103061c:	39ffffcc 	andi	r7,r7,65535
 1030620:	ba11883a 	add	r8,r23,r8
 1030624:	99e7883a 	add	r19,r19,r7
 1030628:	4351883a 	add	r8,r8,r13
 103062c:	1c97883a 	add	r11,r3,r18
 1030630:	354d383a 	mul	r6,r6,r21
 1030634:	9925883a 	add	r18,r19,r4
 1030638:	45c0022e 	bgeu	r8,r23,1030644 <__muldf3+0x3ec>
 103063c:	00c00074 	movhi	r3,1
 1030640:	30cd883a 	add	r6,r6,r3
 1030644:	8889383a 	mul	r4,r17,r2
 1030648:	8d63383a 	mul	r17,r17,r21
 103064c:	a085383a 	mul	r2,r20,r2
 1030650:	200ed43a 	srli	r7,r4,16
 1030654:	401cd43a 	srli	r14,r8,16
 1030658:	401a943a 	slli	r13,r8,16
 103065c:	8885883a 	add	r2,r17,r2
 1030660:	4a3fffcc 	andi	r8,r9,65535
 1030664:	11c5883a 	add	r2,r2,r7
 1030668:	339d883a 	add	r14,r6,r14
 103066c:	6a11883a 	add	r8,r13,r8
 1030670:	a561383a 	mul	r16,r20,r21
 1030674:	1440022e 	bgeu	r2,r17,1030680 <__muldf3+0x428>
 1030678:	00c00074 	movhi	r3,1
 103067c:	80e1883a 	add	r16,r16,r3
 1030680:	1006943a 	slli	r3,r2,16
 1030684:	213fffcc 	andi	r4,r4,65535
 1030688:	93db883a 	add	r13,r18,r15
 103068c:	1909883a 	add	r4,r3,r4
 1030690:	22c7883a 	add	r3,r4,r11
 1030694:	6cd3803a 	cmpltu	r9,r13,r19
 1030698:	6a09883a 	add	r4,r13,r8
 103069c:	1a5b883a 	add	r13,r3,r9
 10306a0:	2211803a 	cmpltu	r8,r4,r8
 10306a4:	734d883a 	add	r6,r14,r13
 10306a8:	100ed43a 	srli	r7,r2,16
 10306ac:	6a53803a 	cmpltu	r9,r13,r9
 10306b0:	3205883a 	add	r2,r6,r8
 10306b4:	1ac7803a 	cmpltu	r3,r3,r11
 10306b8:	1211803a 	cmpltu	r8,r2,r8
 10306bc:	48c6b03a 	or	r3,r9,r3
 10306c0:	338d803a 	cmpltu	r6,r6,r14
 10306c4:	19c7883a 	add	r3,r3,r7
 10306c8:	418cb03a 	or	r6,r8,r6
 10306cc:	1987883a 	add	r3,r3,r6
 10306d0:	2024927a 	slli	r18,r4,9
 10306d4:	1c07883a 	add	r3,r3,r16
 10306d8:	1806927a 	slli	r3,r3,9
 10306dc:	1020d5fa 	srli	r16,r2,23
 10306e0:	2008d5fa 	srli	r4,r4,23
 10306e4:	9294b03a 	or	r10,r18,r10
 10306e8:	1004927a 	slli	r2,r2,9
 10306ec:	5024c03a 	cmpne	r18,r10,zero
 10306f0:	1c20b03a 	or	r16,r3,r16
 10306f4:	9108b03a 	or	r4,r18,r4
 10306f8:	80c0402c 	andhi	r3,r16,256
 10306fc:	20a4b03a 	or	r18,r4,r2
 1030700:	18000726 	beq	r3,zero,1030720 <__muldf3+0x4c8>
 1030704:	9006d07a 	srli	r3,r18,1
 1030708:	800897fa 	slli	r4,r16,31
 103070c:	9080004c 	andi	r2,r18,1
 1030710:	8020d07a 	srli	r16,r16,1
 1030714:	10c4b03a 	or	r2,r2,r3
 1030718:	1124b03a 	or	r18,r2,r4
 103071c:	600b883a 	mov	r5,r12
 1030720:	2900ffc4 	addi	r4,r5,1023
 1030724:	01004b0e 	bge	zero,r4,1030854 <__muldf3+0x5fc>
 1030728:	908001cc 	andi	r2,r18,7
 103072c:	10000726 	beq	r2,zero,103074c <__muldf3+0x4f4>
 1030730:	90c003cc 	andi	r3,r18,15
 1030734:	00800104 	movi	r2,4
 1030738:	18800426 	beq	r3,r2,103074c <__muldf3+0x4f4>
 103073c:	9087883a 	add	r3,r18,r2
 1030740:	1c85803a 	cmpltu	r2,r3,r18
 1030744:	80a1883a 	add	r16,r16,r2
 1030748:	1825883a 	mov	r18,r3
 103074c:	8080402c 	andhi	r2,r16,256
 1030750:	10000426 	beq	r2,zero,1030764 <__muldf3+0x50c>
 1030754:	00bfc034 	movhi	r2,65280
 1030758:	10bfffc4 	addi	r2,r2,-1
 103075c:	29010004 	addi	r4,r5,1024
 1030760:	80a0703a 	and	r16,r16,r2
 1030764:	0081ff84 	movi	r2,2046
 1030768:	1100320e 	bge	r2,r4,1030834 <__muldf3+0x5dc>
 103076c:	b4c0004c 	andi	r19,r22,1
 1030770:	0101ffc4 	movi	r4,2047
 1030774:	0021883a 	mov	r16,zero
 1030778:	0025883a 	mov	r18,zero
 103077c:	003f1006 	br	10303c0 <_gp+0xffff20dc>
 1030780:	8080022c 	andhi	r2,r16,8
 1030784:	10000926 	beq	r2,zero,10307ac <__muldf3+0x554>
 1030788:	8880022c 	andhi	r2,r17,8
 103078c:	1000071e 	bne	r2,zero,10307ac <__muldf3+0x554>
 1030790:	00800434 	movhi	r2,16
 1030794:	8c000234 	orhi	r16,r17,8
 1030798:	10bfffc4 	addi	r2,r2,-1
 103079c:	1827883a 	mov	r19,r3
 10307a0:	80a0703a 	and	r16,r16,r2
 10307a4:	b825883a 	mov	r18,r23
 10307a8:	003f6a06 	br	1030554 <_gp+0xffff2270>
 10307ac:	00800434 	movhi	r2,16
 10307b0:	84000234 	orhi	r16,r16,8
 10307b4:	10bfffc4 	addi	r2,r2,-1
 10307b8:	80a0703a 	and	r16,r16,r2
 10307bc:	003f6506 	br	1030554 <_gp+0xffff2270>
 10307c0:	3009883a 	mov	r4,r6
 10307c4:	d8c00215 	stw	r3,8(sp)
 10307c8:	d9800315 	stw	r6,12(sp)
 10307cc:	da800015 	stw	r10,0(sp)
 10307d0:	dac00115 	stw	r11,4(sp)
 10307d4:	10314480 	call	1031448 <__clzsi2>
 10307d8:	11000804 	addi	r4,r2,32
 10307dc:	014009c4 	movi	r5,39
 10307e0:	d8c00217 	ldw	r3,8(sp)
 10307e4:	d9800317 	ldw	r6,12(sp)
 10307e8:	da800017 	ldw	r10,0(sp)
 10307ec:	dac00117 	ldw	r11,4(sp)
 10307f0:	293f320e 	bge	r5,r4,10304bc <_gp+0xffff21d8>
 10307f4:	10bffe04 	addi	r2,r2,-8
 10307f8:	b8a2983a 	sll	r17,r23,r2
 10307fc:	002f883a 	mov	r23,zero
 1030800:	003f3506 	br	10304d8 <_gp+0xffff21f4>
 1030804:	d9800315 	stw	r6,12(sp)
 1030808:	d9c00015 	stw	r7,0(sp)
 103080c:	10314480 	call	1031448 <__clzsi2>
 1030810:	10c00804 	addi	r3,r2,32
 1030814:	010009c4 	movi	r4,39
 1030818:	d9800317 	ldw	r6,12(sp)
 103081c:	d9c00017 	ldw	r7,0(sp)
 1030820:	20ff060e 	bge	r4,r3,103043c <_gp+0xffff2158>
 1030824:	10bffe04 	addi	r2,r2,-8
 1030828:	88a0983a 	sll	r16,r17,r2
 103082c:	0025883a 	mov	r18,zero
 1030830:	003f0906 	br	1030458 <_gp+0xffff2174>
 1030834:	9004d0fa 	srli	r2,r18,3
 1030838:	8024977a 	slli	r18,r16,29
 103083c:	8020927a 	slli	r16,r16,9
 1030840:	2101ffcc 	andi	r4,r4,2047
 1030844:	90a4b03a 	or	r18,r18,r2
 1030848:	8020d33a 	srli	r16,r16,12
 103084c:	b4c0004c 	andi	r19,r22,1
 1030850:	003edb06 	br	10303c0 <_gp+0xffff20dc>
 1030854:	00ff0084 	movi	r3,-1022
 1030858:	1947c83a 	sub	r3,r3,r5
 103085c:	00800e04 	movi	r2,56
 1030860:	10c0080e 	bge	r2,r3,1030884 <__muldf3+0x62c>
 1030864:	b4c0004c 	andi	r19,r22,1
 1030868:	0009883a 	mov	r4,zero
 103086c:	0021883a 	mov	r16,zero
 1030870:	0025883a 	mov	r18,zero
 1030874:	003ed206 	br	10303c0 <_gp+0xffff20dc>
 1030878:	600b883a 	mov	r5,r12
 103087c:	e02d883a 	mov	r22,fp
 1030880:	003fa706 	br	1030720 <_gp+0xffff243c>
 1030884:	008007c4 	movi	r2,31
 1030888:	10c01816 	blt	r2,r3,10308ec <__muldf3+0x694>
 103088c:	29410784 	addi	r5,r5,1054
 1030890:	8144983a 	sll	r2,r16,r5
 1030894:	90c8d83a 	srl	r4,r18,r3
 1030898:	914a983a 	sll	r5,r18,r5
 103089c:	80c6d83a 	srl	r3,r16,r3
 10308a0:	2088b03a 	or	r4,r4,r2
 10308a4:	2804c03a 	cmpne	r2,r5,zero
 10308a8:	2084b03a 	or	r2,r4,r2
 10308ac:	110001cc 	andi	r4,r2,7
 10308b0:	20000726 	beq	r4,zero,10308d0 <__muldf3+0x678>
 10308b4:	114003cc 	andi	r5,r2,15
 10308b8:	01000104 	movi	r4,4
 10308bc:	29000426 	beq	r5,r4,10308d0 <__muldf3+0x678>
 10308c0:	11000104 	addi	r4,r2,4
 10308c4:	2085803a 	cmpltu	r2,r4,r2
 10308c8:	1887883a 	add	r3,r3,r2
 10308cc:	2005883a 	mov	r2,r4
 10308d0:	1900202c 	andhi	r4,r3,128
 10308d4:	20001826 	beq	r4,zero,1030938 <__muldf3+0x6e0>
 10308d8:	b4c0004c 	andi	r19,r22,1
 10308dc:	01000044 	movi	r4,1
 10308e0:	0021883a 	mov	r16,zero
 10308e4:	0025883a 	mov	r18,zero
 10308e8:	003eb506 	br	10303c0 <_gp+0xffff20dc>
 10308ec:	00bef884 	movi	r2,-1054
 10308f0:	1145c83a 	sub	r2,r2,r5
 10308f4:	8088d83a 	srl	r4,r16,r2
 10308f8:	00800804 	movi	r2,32
 10308fc:	18801726 	beq	r3,r2,103095c <__muldf3+0x704>
 1030900:	28810f84 	addi	r2,r5,1086
 1030904:	8084983a 	sll	r2,r16,r2
 1030908:	1484b03a 	or	r2,r2,r18
 103090c:	1004c03a 	cmpne	r2,r2,zero
 1030910:	1104b03a 	or	r2,r2,r4
 1030914:	10c001cc 	andi	r3,r2,7
 1030918:	18000b1e 	bne	r3,zero,1030948 <__muldf3+0x6f0>
 103091c:	0021883a 	mov	r16,zero
 1030920:	1004d0fa 	srli	r2,r2,3
 1030924:	b4c0004c 	andi	r19,r22,1
 1030928:	0009883a 	mov	r4,zero
 103092c:	10e4b03a 	or	r18,r2,r3
 1030930:	003ea306 	br	10303c0 <_gp+0xffff20dc>
 1030934:	0007883a 	mov	r3,zero
 1030938:	1820927a 	slli	r16,r3,9
 103093c:	1806977a 	slli	r3,r3,29
 1030940:	8020d33a 	srli	r16,r16,12
 1030944:	003ff606 	br	1030920 <_gp+0xffff263c>
 1030948:	110003cc 	andi	r4,r2,15
 103094c:	00c00104 	movi	r3,4
 1030950:	20fff826 	beq	r4,r3,1030934 <_gp+0xffff2650>
 1030954:	0007883a 	mov	r3,zero
 1030958:	003fd906 	br	10308c0 <_gp+0xffff25dc>
 103095c:	0005883a 	mov	r2,zero
 1030960:	003fe906 	br	1030908 <_gp+0xffff2624>
 1030964:	00800434 	movhi	r2,16
 1030968:	84000234 	orhi	r16,r16,8
 103096c:	10bfffc4 	addi	r2,r2,-1
 1030970:	e4c0004c 	andi	r19,fp,1
 1030974:	80a0703a 	and	r16,r16,r2
 1030978:	003ef606 	br	1030554 <_gp+0xffff2270>

0103097c <__subdf3>:
 103097c:	00c00434 	movhi	r3,16
 1030980:	18ffffc4 	addi	r3,r3,-1
 1030984:	defffb04 	addi	sp,sp,-20
 1030988:	28d2703a 	and	r9,r5,r3
 103098c:	3814d53a 	srli	r10,r7,20
 1030990:	38c6703a 	and	r3,r7,r3
 1030994:	3004d77a 	srli	r2,r6,29
 1030998:	dc800215 	stw	r18,8(sp)
 103099c:	dc000015 	stw	r16,0(sp)
 10309a0:	2824d7fa 	srli	r18,r5,31
 10309a4:	2820d53a 	srli	r16,r5,20
 10309a8:	481290fa 	slli	r9,r9,3
 10309ac:	200ad77a 	srli	r5,r4,29
 10309b0:	180690fa 	slli	r3,r3,3
 10309b4:	dc400115 	stw	r17,4(sp)
 10309b8:	dfc00415 	stw	ra,16(sp)
 10309bc:	202290fa 	slli	r17,r4,3
 10309c0:	dcc00315 	stw	r19,12(sp)
 10309c4:	5281ffcc 	andi	r10,r10,2047
 10309c8:	0101ffc4 	movi	r4,2047
 10309cc:	9011883a 	mov	r8,r18
 10309d0:	8401ffcc 	andi	r16,r16,2047
 10309d4:	94803fcc 	andi	r18,r18,255
 10309d8:	494ab03a 	or	r5,r9,r5
 10309dc:	380ed7fa 	srli	r7,r7,31
 10309e0:	1886b03a 	or	r3,r3,r2
 10309e4:	300c90fa 	slli	r6,r6,3
 10309e8:	51009026 	beq	r10,r4,1030c2c <__subdf3+0x2b0>
 10309ec:	39c0005c 	xori	r7,r7,1
 10309f0:	8285c83a 	sub	r2,r16,r10
 10309f4:	91c06f26 	beq	r18,r7,1030bb4 <__subdf3+0x238>
 10309f8:	0080b10e 	bge	zero,r2,1030cc0 <__subdf3+0x344>
 10309fc:	50002a1e 	bne	r10,zero,1030aa8 <__subdf3+0x12c>
 1030a00:	1988b03a 	or	r4,r3,r6
 1030a04:	2000941e 	bne	r4,zero,1030c58 <__subdf3+0x2dc>
 1030a08:	888001cc 	andi	r2,r17,7
 1030a0c:	10005b26 	beq	r2,zero,1030b7c <__subdf3+0x200>
 1030a10:	88c003cc 	andi	r3,r17,15
 1030a14:	00800104 	movi	r2,4
 1030a18:	18805826 	beq	r3,r2,1030b7c <__subdf3+0x200>
 1030a1c:	88c00104 	addi	r3,r17,4
 1030a20:	1c63803a 	cmpltu	r17,r3,r17
 1030a24:	2c4b883a 	add	r5,r5,r17
 1030a28:	2880202c 	andhi	r2,r5,128
 1030a2c:	9200004c 	andi	r8,r18,1
 1030a30:	1823883a 	mov	r17,r3
 1030a34:	10005426 	beq	r2,zero,1030b88 <__subdf3+0x20c>
 1030a38:	84000044 	addi	r16,r16,1
 1030a3c:	0081ffc4 	movi	r2,2047
 1030a40:	8080bf26 	beq	r16,r2,1030d40 <__subdf3+0x3c4>
 1030a44:	013fe034 	movhi	r4,65408
 1030a48:	213fffc4 	addi	r4,r4,-1
 1030a4c:	290a703a 	and	r5,r5,r4
 1030a50:	2804977a 	slli	r2,r5,29
 1030a54:	280a927a 	slli	r5,r5,9
 1030a58:	8822d0fa 	srli	r17,r17,3
 1030a5c:	8401ffcc 	andi	r16,r16,2047
 1030a60:	2808d33a 	srli	r4,r5,12
 1030a64:	1444b03a 	or	r2,r2,r17
 1030a68:	8401ffcc 	andi	r16,r16,2047
 1030a6c:	800a953a 	slli	r5,r16,20
 1030a70:	40c03fcc 	andi	r3,r8,255
 1030a74:	04000434 	movhi	r16,16
 1030a78:	180697fa 	slli	r3,r3,31
 1030a7c:	843fffc4 	addi	r16,r16,-1
 1030a80:	2420703a 	and	r16,r4,r16
 1030a84:	8160b03a 	or	r16,r16,r5
 1030a88:	80c6b03a 	or	r3,r16,r3
 1030a8c:	dfc00417 	ldw	ra,16(sp)
 1030a90:	dcc00317 	ldw	r19,12(sp)
 1030a94:	dc800217 	ldw	r18,8(sp)
 1030a98:	dc400117 	ldw	r17,4(sp)
 1030a9c:	dc000017 	ldw	r16,0(sp)
 1030aa0:	dec00504 	addi	sp,sp,20
 1030aa4:	f800283a 	ret
 1030aa8:	0101ffc4 	movi	r4,2047
 1030aac:	813fd626 	beq	r16,r4,1030a08 <_gp+0xffff2724>
 1030ab0:	18c02034 	orhi	r3,r3,128
 1030ab4:	01000e04 	movi	r4,56
 1030ab8:	2080a416 	blt	r4,r2,1030d4c <__subdf3+0x3d0>
 1030abc:	010007c4 	movi	r4,31
 1030ac0:	2080c716 	blt	r4,r2,1030de0 <__subdf3+0x464>
 1030ac4:	01000804 	movi	r4,32
 1030ac8:	2089c83a 	sub	r4,r4,r2
 1030acc:	1910983a 	sll	r8,r3,r4
 1030ad0:	308ed83a 	srl	r7,r6,r2
 1030ad4:	3108983a 	sll	r4,r6,r4
 1030ad8:	1884d83a 	srl	r2,r3,r2
 1030adc:	41ccb03a 	or	r6,r8,r7
 1030ae0:	2008c03a 	cmpne	r4,r4,zero
 1030ae4:	310cb03a 	or	r6,r6,r4
 1030ae8:	898dc83a 	sub	r6,r17,r6
 1030aec:	89a3803a 	cmpltu	r17,r17,r6
 1030af0:	288bc83a 	sub	r5,r5,r2
 1030af4:	2c4bc83a 	sub	r5,r5,r17
 1030af8:	3023883a 	mov	r17,r6
 1030afc:	2880202c 	andhi	r2,r5,128
 1030b00:	10006b26 	beq	r2,zero,1030cb0 <__subdf3+0x334>
 1030b04:	04c02034 	movhi	r19,128
 1030b08:	9cffffc4 	addi	r19,r19,-1
 1030b0c:	2ce6703a 	and	r19,r5,r19
 1030b10:	98007c26 	beq	r19,zero,1030d04 <__subdf3+0x388>
 1030b14:	9809883a 	mov	r4,r19
 1030b18:	10314480 	call	1031448 <__clzsi2>
 1030b1c:	10fffe04 	addi	r3,r2,-8
 1030b20:	010007c4 	movi	r4,31
 1030b24:	20c07d16 	blt	r4,r3,1030d1c <__subdf3+0x3a0>
 1030b28:	01400a04 	movi	r5,40
 1030b2c:	2885c83a 	sub	r2,r5,r2
 1030b30:	888ad83a 	srl	r5,r17,r2
 1030b34:	98e6983a 	sll	r19,r19,r3
 1030b38:	88e2983a 	sll	r17,r17,r3
 1030b3c:	2ce6b03a 	or	r19,r5,r19
 1030b40:	1c007a16 	blt	r3,r16,1030d2c <__subdf3+0x3b0>
 1030b44:	1c21c83a 	sub	r16,r3,r16
 1030b48:	81400044 	addi	r5,r16,1
 1030b4c:	00c007c4 	movi	r3,31
 1030b50:	19409616 	blt	r3,r5,1030dac <__subdf3+0x430>
 1030b54:	1c21c83a 	sub	r16,r3,r16
 1030b58:	8c08983a 	sll	r4,r17,r16
 1030b5c:	8946d83a 	srl	r3,r17,r5
 1030b60:	9c20983a 	sll	r16,r19,r16
 1030b64:	2008c03a 	cmpne	r4,r4,zero
 1030b68:	994ad83a 	srl	r5,r19,r5
 1030b6c:	1c06b03a 	or	r3,r3,r16
 1030b70:	1922b03a 	or	r17,r3,r4
 1030b74:	0021883a 	mov	r16,zero
 1030b78:	003fa306 	br	1030a08 <_gp+0xffff2724>
 1030b7c:	2880202c 	andhi	r2,r5,128
 1030b80:	9200004c 	andi	r8,r18,1
 1030b84:	103fac1e 	bne	r2,zero,1030a38 <_gp+0xffff2754>
 1030b88:	2804977a 	slli	r2,r5,29
 1030b8c:	8822d0fa 	srli	r17,r17,3
 1030b90:	00c1ffc4 	movi	r3,2047
 1030b94:	280ad0fa 	srli	r5,r5,3
 1030b98:	1444b03a 	or	r2,r2,r17
 1030b9c:	80c02726 	beq	r16,r3,1030c3c <__subdf3+0x2c0>
 1030ba0:	01000434 	movhi	r4,16
 1030ba4:	213fffc4 	addi	r4,r4,-1
 1030ba8:	80e0703a 	and	r16,r16,r3
 1030bac:	2908703a 	and	r4,r5,r4
 1030bb0:	003fad06 	br	1030a68 <_gp+0xffff2784>
 1030bb4:	0080690e 	bge	zero,r2,1030d5c <__subdf3+0x3e0>
 1030bb8:	50002f26 	beq	r10,zero,1030c78 <__subdf3+0x2fc>
 1030bbc:	0101ffc4 	movi	r4,2047
 1030bc0:	813f9126 	beq	r16,r4,1030a08 <_gp+0xffff2724>
 1030bc4:	18c02034 	orhi	r3,r3,128
 1030bc8:	01000e04 	movi	r4,56
 1030bcc:	2080b00e 	bge	r4,r2,1030e90 <__subdf3+0x514>
 1030bd0:	198cb03a 	or	r6,r3,r6
 1030bd4:	300ec03a 	cmpne	r7,r6,zero
 1030bd8:	0005883a 	mov	r2,zero
 1030bdc:	3c4f883a 	add	r7,r7,r17
 1030be0:	3c63803a 	cmpltu	r17,r7,r17
 1030be4:	114b883a 	add	r5,r2,r5
 1030be8:	2c4b883a 	add	r5,r5,r17
 1030bec:	3823883a 	mov	r17,r7
 1030bf0:	2880202c 	andhi	r2,r5,128
 1030bf4:	10002e26 	beq	r2,zero,1030cb0 <__subdf3+0x334>
 1030bf8:	84000044 	addi	r16,r16,1
 1030bfc:	0081ffc4 	movi	r2,2047
 1030c00:	8080de26 	beq	r16,r2,1030f7c <__subdf3+0x600>
 1030c04:	00bfe034 	movhi	r2,65408
 1030c08:	10bfffc4 	addi	r2,r2,-1
 1030c0c:	288a703a 	and	r5,r5,r2
 1030c10:	880cd07a 	srli	r6,r17,1
 1030c14:	280897fa 	slli	r4,r5,31
 1030c18:	88c0004c 	andi	r3,r17,1
 1030c1c:	30e2b03a 	or	r17,r6,r3
 1030c20:	280ad07a 	srli	r5,r5,1
 1030c24:	8922b03a 	or	r17,r17,r4
 1030c28:	003f7706 	br	1030a08 <_gp+0xffff2724>
 1030c2c:	1984b03a 	or	r2,r3,r6
 1030c30:	103f6e26 	beq	r2,zero,10309ec <_gp+0xffff2708>
 1030c34:	39c03fcc 	andi	r7,r7,255
 1030c38:	003f6d06 	br	10309f0 <_gp+0xffff270c>
 1030c3c:	1146b03a 	or	r3,r2,r5
 1030c40:	18003f26 	beq	r3,zero,1030d40 <__subdf3+0x3c4>
 1030c44:	00c00434 	movhi	r3,16
 1030c48:	29000234 	orhi	r4,r5,8
 1030c4c:	18ffffc4 	addi	r3,r3,-1
 1030c50:	20c8703a 	and	r4,r4,r3
 1030c54:	003f8406 	br	1030a68 <_gp+0xffff2784>
 1030c58:	10bfffc4 	addi	r2,r2,-1
 1030c5c:	1000501e 	bne	r2,zero,1030da0 <__subdf3+0x424>
 1030c60:	898fc83a 	sub	r7,r17,r6
 1030c64:	89e3803a 	cmpltu	r17,r17,r7
 1030c68:	28cbc83a 	sub	r5,r5,r3
 1030c6c:	2c4bc83a 	sub	r5,r5,r17
 1030c70:	3823883a 	mov	r17,r7
 1030c74:	003fa106 	br	1030afc <_gp+0xffff2818>
 1030c78:	1988b03a 	or	r4,r3,r6
 1030c7c:	203f6226 	beq	r4,zero,1030a08 <_gp+0xffff2724>
 1030c80:	10bfffc4 	addi	r2,r2,-1
 1030c84:	10009b1e 	bne	r2,zero,1030ef4 <__subdf3+0x578>
 1030c88:	344d883a 	add	r6,r6,r17
 1030c8c:	3463803a 	cmpltu	r17,r6,r17
 1030c90:	194b883a 	add	r5,r3,r5
 1030c94:	2c4b883a 	add	r5,r5,r17
 1030c98:	3023883a 	mov	r17,r6
 1030c9c:	003fd406 	br	1030bf0 <_gp+0xffff290c>
 1030ca0:	1106b03a 	or	r3,r2,r4
 1030ca4:	1800b426 	beq	r3,zero,1030f78 <__subdf3+0x5fc>
 1030ca8:	100b883a 	mov	r5,r2
 1030cac:	2023883a 	mov	r17,r4
 1030cb0:	888001cc 	andi	r2,r17,7
 1030cb4:	103f561e 	bne	r2,zero,1030a10 <_gp+0xffff272c>
 1030cb8:	9200004c 	andi	r8,r18,1
 1030cbc:	003fb206 	br	1030b88 <_gp+0xffff28a4>
 1030cc0:	1000531e 	bne	r2,zero,1030e10 <__subdf3+0x494>
 1030cc4:	80800044 	addi	r2,r16,1
 1030cc8:	1081ffcc 	andi	r2,r2,2047
 1030ccc:	01000044 	movi	r4,1
 1030cd0:	2080a00e 	bge	r4,r2,1030f54 <__subdf3+0x5d8>
 1030cd4:	8985c83a 	sub	r2,r17,r6
 1030cd8:	8889803a 	cmpltu	r4,r17,r2
 1030cdc:	28e7c83a 	sub	r19,r5,r3
 1030ce0:	9927c83a 	sub	r19,r19,r4
 1030ce4:	9900202c 	andhi	r4,r19,128
 1030ce8:	20006226 	beq	r4,zero,1030e74 <__subdf3+0x4f8>
 1030cec:	3463c83a 	sub	r17,r6,r17
 1030cf0:	194bc83a 	sub	r5,r3,r5
 1030cf4:	344d803a 	cmpltu	r6,r6,r17
 1030cf8:	29a7c83a 	sub	r19,r5,r6
 1030cfc:	3825883a 	mov	r18,r7
 1030d00:	983f841e 	bne	r19,zero,1030b14 <_gp+0xffff2830>
 1030d04:	8809883a 	mov	r4,r17
 1030d08:	10314480 	call	1031448 <__clzsi2>
 1030d0c:	10800804 	addi	r2,r2,32
 1030d10:	10fffe04 	addi	r3,r2,-8
 1030d14:	010007c4 	movi	r4,31
 1030d18:	20ff830e 	bge	r4,r3,1030b28 <_gp+0xffff2844>
 1030d1c:	14fff604 	addi	r19,r2,-40
 1030d20:	8ce6983a 	sll	r19,r17,r19
 1030d24:	0023883a 	mov	r17,zero
 1030d28:	1c3f860e 	bge	r3,r16,1030b44 <_gp+0xffff2860>
 1030d2c:	017fe034 	movhi	r5,65408
 1030d30:	297fffc4 	addi	r5,r5,-1
 1030d34:	80e1c83a 	sub	r16,r16,r3
 1030d38:	994a703a 	and	r5,r19,r5
 1030d3c:	003f3206 	br	1030a08 <_gp+0xffff2724>
 1030d40:	0009883a 	mov	r4,zero
 1030d44:	0005883a 	mov	r2,zero
 1030d48:	003f4706 	br	1030a68 <_gp+0xffff2784>
 1030d4c:	198cb03a 	or	r6,r3,r6
 1030d50:	300cc03a 	cmpne	r6,r6,zero
 1030d54:	0005883a 	mov	r2,zero
 1030d58:	003f6306 	br	1030ae8 <_gp+0xffff2804>
 1030d5c:	10009d1e 	bne	r2,zero,1030fd4 <__subdf3+0x658>
 1030d60:	81c00044 	addi	r7,r16,1
 1030d64:	3881ffcc 	andi	r2,r7,2047
 1030d68:	02400044 	movi	r9,1
 1030d6c:	4880680e 	bge	r9,r2,1030f10 <__subdf3+0x594>
 1030d70:	0081ffc4 	movi	r2,2047
 1030d74:	3880ae26 	beq	r7,r2,1031030 <__subdf3+0x6b4>
 1030d78:	344d883a 	add	r6,r6,r17
 1030d7c:	3463803a 	cmpltu	r17,r6,r17
 1030d80:	194b883a 	add	r5,r3,r5
 1030d84:	2c4b883a 	add	r5,r5,r17
 1030d88:	282297fa 	slli	r17,r5,31
 1030d8c:	300cd07a 	srli	r6,r6,1
 1030d90:	280ad07a 	srli	r5,r5,1
 1030d94:	3821883a 	mov	r16,r7
 1030d98:	89a2b03a 	or	r17,r17,r6
 1030d9c:	003f1a06 	br	1030a08 <_gp+0xffff2724>
 1030da0:	0101ffc4 	movi	r4,2047
 1030da4:	813f431e 	bne	r16,r4,1030ab4 <_gp+0xffff27d0>
 1030da8:	003f1706 	br	1030a08 <_gp+0xffff2724>
 1030dac:	80bff844 	addi	r2,r16,-31
 1030db0:	00c00804 	movi	r3,32
 1030db4:	9884d83a 	srl	r2,r19,r2
 1030db8:	28c05126 	beq	r5,r3,1030f00 <__subdf3+0x584>
 1030dbc:	00c00fc4 	movi	r3,63
 1030dc0:	1c21c83a 	sub	r16,r3,r16
 1030dc4:	9c26983a 	sll	r19,r19,r16
 1030dc8:	9c62b03a 	or	r17,r19,r17
 1030dcc:	8822c03a 	cmpne	r17,r17,zero
 1030dd0:	88a2b03a 	or	r17,r17,r2
 1030dd4:	000b883a 	mov	r5,zero
 1030dd8:	0021883a 	mov	r16,zero
 1030ddc:	003fb406 	br	1030cb0 <_gp+0xffff29cc>
 1030de0:	113ff804 	addi	r4,r2,-32
 1030de4:	01c00804 	movi	r7,32
 1030de8:	1908d83a 	srl	r4,r3,r4
 1030dec:	11c04626 	beq	r2,r7,1030f08 <__subdf3+0x58c>
 1030df0:	01c01004 	movi	r7,64
 1030df4:	3885c83a 	sub	r2,r7,r2
 1030df8:	1884983a 	sll	r2,r3,r2
 1030dfc:	118cb03a 	or	r6,r2,r6
 1030e00:	300cc03a 	cmpne	r6,r6,zero
 1030e04:	310cb03a 	or	r6,r6,r4
 1030e08:	0005883a 	mov	r2,zero
 1030e0c:	003f3606 	br	1030ae8 <_gp+0xffff2804>
 1030e10:	80002b26 	beq	r16,zero,1030ec0 <__subdf3+0x544>
 1030e14:	0101ffc4 	movi	r4,2047
 1030e18:	51006926 	beq	r10,r4,1030fc0 <__subdf3+0x644>
 1030e1c:	0085c83a 	sub	r2,zero,r2
 1030e20:	29402034 	orhi	r5,r5,128
 1030e24:	01000e04 	movi	r4,56
 1030e28:	20807d16 	blt	r4,r2,1031020 <__subdf3+0x6a4>
 1030e2c:	010007c4 	movi	r4,31
 1030e30:	2080d916 	blt	r4,r2,1031198 <__subdf3+0x81c>
 1030e34:	01000804 	movi	r4,32
 1030e38:	2089c83a 	sub	r4,r4,r2
 1030e3c:	2912983a 	sll	r9,r5,r4
 1030e40:	8890d83a 	srl	r8,r17,r2
 1030e44:	8908983a 	sll	r4,r17,r4
 1030e48:	2884d83a 	srl	r2,r5,r2
 1030e4c:	4a22b03a 	or	r17,r9,r8
 1030e50:	2008c03a 	cmpne	r4,r4,zero
 1030e54:	8922b03a 	or	r17,r17,r4
 1030e58:	3463c83a 	sub	r17,r6,r17
 1030e5c:	1885c83a 	sub	r2,r3,r2
 1030e60:	344d803a 	cmpltu	r6,r6,r17
 1030e64:	118bc83a 	sub	r5,r2,r6
 1030e68:	5021883a 	mov	r16,r10
 1030e6c:	3825883a 	mov	r18,r7
 1030e70:	003f2206 	br	1030afc <_gp+0xffff2818>
 1030e74:	9886b03a 	or	r3,r19,r2
 1030e78:	18001c1e 	bne	r3,zero,1030eec <__subdf3+0x570>
 1030e7c:	0011883a 	mov	r8,zero
 1030e80:	000b883a 	mov	r5,zero
 1030e84:	0023883a 	mov	r17,zero
 1030e88:	0021883a 	mov	r16,zero
 1030e8c:	003f3e06 	br	1030b88 <_gp+0xffff28a4>
 1030e90:	010007c4 	movi	r4,31
 1030e94:	20803c16 	blt	r4,r2,1030f88 <__subdf3+0x60c>
 1030e98:	01000804 	movi	r4,32
 1030e9c:	2089c83a 	sub	r4,r4,r2
 1030ea0:	1912983a 	sll	r9,r3,r4
 1030ea4:	308ed83a 	srl	r7,r6,r2
 1030ea8:	3108983a 	sll	r4,r6,r4
 1030eac:	1884d83a 	srl	r2,r3,r2
 1030eb0:	49ceb03a 	or	r7,r9,r7
 1030eb4:	2008c03a 	cmpne	r4,r4,zero
 1030eb8:	390eb03a 	or	r7,r7,r4
 1030ebc:	003f4706 	br	1030bdc <_gp+0xffff28f8>
 1030ec0:	2c48b03a 	or	r4,r5,r17
 1030ec4:	20003e26 	beq	r4,zero,1030fc0 <__subdf3+0x644>
 1030ec8:	0084303a 	nor	r2,zero,r2
 1030ecc:	10003a1e 	bne	r2,zero,1030fb8 <__subdf3+0x63c>
 1030ed0:	3463c83a 	sub	r17,r6,r17
 1030ed4:	194bc83a 	sub	r5,r3,r5
 1030ed8:	344d803a 	cmpltu	r6,r6,r17
 1030edc:	298bc83a 	sub	r5,r5,r6
 1030ee0:	5021883a 	mov	r16,r10
 1030ee4:	3825883a 	mov	r18,r7
 1030ee8:	003f0406 	br	1030afc <_gp+0xffff2818>
 1030eec:	1023883a 	mov	r17,r2
 1030ef0:	003f0706 	br	1030b10 <_gp+0xffff282c>
 1030ef4:	0101ffc4 	movi	r4,2047
 1030ef8:	813f331e 	bne	r16,r4,1030bc8 <_gp+0xffff28e4>
 1030efc:	003ec206 	br	1030a08 <_gp+0xffff2724>
 1030f00:	0027883a 	mov	r19,zero
 1030f04:	003fb006 	br	1030dc8 <_gp+0xffff2ae4>
 1030f08:	0005883a 	mov	r2,zero
 1030f0c:	003fbb06 	br	1030dfc <_gp+0xffff2b18>
 1030f10:	2c44b03a 	or	r2,r5,r17
 1030f14:	80008b1e 	bne	r16,zero,1031144 <__subdf3+0x7c8>
 1030f18:	1000b526 	beq	r2,zero,10311f0 <__subdf3+0x874>
 1030f1c:	1984b03a 	or	r2,r3,r6
 1030f20:	103eb926 	beq	r2,zero,1030a08 <_gp+0xffff2724>
 1030f24:	3449883a 	add	r4,r6,r17
 1030f28:	2463803a 	cmpltu	r17,r4,r17
 1030f2c:	194b883a 	add	r5,r3,r5
 1030f30:	2c4b883a 	add	r5,r5,r17
 1030f34:	2880202c 	andhi	r2,r5,128
 1030f38:	2023883a 	mov	r17,r4
 1030f3c:	103f5c26 	beq	r2,zero,1030cb0 <_gp+0xffff29cc>
 1030f40:	00bfe034 	movhi	r2,65408
 1030f44:	10bfffc4 	addi	r2,r2,-1
 1030f48:	4821883a 	mov	r16,r9
 1030f4c:	288a703a 	and	r5,r5,r2
 1030f50:	003ead06 	br	1030a08 <_gp+0xffff2724>
 1030f54:	2c44b03a 	or	r2,r5,r17
 1030f58:	8000291e 	bne	r16,zero,1031000 <__subdf3+0x684>
 1030f5c:	10004f1e 	bne	r2,zero,103109c <__subdf3+0x720>
 1030f60:	1984b03a 	or	r2,r3,r6
 1030f64:	10000426 	beq	r2,zero,1030f78 <__subdf3+0x5fc>
 1030f68:	180b883a 	mov	r5,r3
 1030f6c:	3023883a 	mov	r17,r6
 1030f70:	3825883a 	mov	r18,r7
 1030f74:	003ea406 	br	1030a08 <_gp+0xffff2724>
 1030f78:	0011883a 	mov	r8,zero
 1030f7c:	000b883a 	mov	r5,zero
 1030f80:	0023883a 	mov	r17,zero
 1030f84:	003f0006 	br	1030b88 <_gp+0xffff28a4>
 1030f88:	11fff804 	addi	r7,r2,-32
 1030f8c:	19c8d83a 	srl	r4,r3,r7
 1030f90:	01c00804 	movi	r7,32
 1030f94:	11c07e26 	beq	r2,r7,1031190 <__subdf3+0x814>
 1030f98:	01c01004 	movi	r7,64
 1030f9c:	3885c83a 	sub	r2,r7,r2
 1030fa0:	1884983a 	sll	r2,r3,r2
 1030fa4:	118cb03a 	or	r6,r2,r6
 1030fa8:	300ec03a 	cmpne	r7,r6,zero
 1030fac:	390eb03a 	or	r7,r7,r4
 1030fb0:	0005883a 	mov	r2,zero
 1030fb4:	003f0906 	br	1030bdc <_gp+0xffff28f8>
 1030fb8:	0101ffc4 	movi	r4,2047
 1030fbc:	513f991e 	bne	r10,r4,1030e24 <_gp+0xffff2b40>
 1030fc0:	180b883a 	mov	r5,r3
 1030fc4:	3023883a 	mov	r17,r6
 1030fc8:	5021883a 	mov	r16,r10
 1030fcc:	3825883a 	mov	r18,r7
 1030fd0:	003e8d06 	br	1030a08 <_gp+0xffff2724>
 1030fd4:	80001a1e 	bne	r16,zero,1031040 <__subdf3+0x6c4>
 1030fd8:	2c48b03a 	or	r4,r5,r17
 1030fdc:	20005526 	beq	r4,zero,1031134 <__subdf3+0x7b8>
 1030fe0:	0084303a 	nor	r2,zero,r2
 1030fe4:	1000511e 	bne	r2,zero,103112c <__subdf3+0x7b0>
 1030fe8:	89a3883a 	add	r17,r17,r6
 1030fec:	194b883a 	add	r5,r3,r5
 1030ff0:	898d803a 	cmpltu	r6,r17,r6
 1030ff4:	298b883a 	add	r5,r5,r6
 1030ff8:	5021883a 	mov	r16,r10
 1030ffc:	003efc06 	br	1030bf0 <_gp+0xffff290c>
 1031000:	1000341e 	bne	r2,zero,10310d4 <__subdf3+0x758>
 1031004:	1984b03a 	or	r2,r3,r6
 1031008:	10006f26 	beq	r2,zero,10311c8 <__subdf3+0x84c>
 103100c:	180b883a 	mov	r5,r3
 1031010:	3023883a 	mov	r17,r6
 1031014:	3825883a 	mov	r18,r7
 1031018:	0401ffc4 	movi	r16,2047
 103101c:	003e7a06 	br	1030a08 <_gp+0xffff2724>
 1031020:	2c62b03a 	or	r17,r5,r17
 1031024:	8822c03a 	cmpne	r17,r17,zero
 1031028:	0005883a 	mov	r2,zero
 103102c:	003f8a06 	br	1030e58 <_gp+0xffff2b74>
 1031030:	3821883a 	mov	r16,r7
 1031034:	000b883a 	mov	r5,zero
 1031038:	0023883a 	mov	r17,zero
 103103c:	003ed206 	br	1030b88 <_gp+0xffff28a4>
 1031040:	0101ffc4 	movi	r4,2047
 1031044:	51003b26 	beq	r10,r4,1031134 <__subdf3+0x7b8>
 1031048:	0085c83a 	sub	r2,zero,r2
 103104c:	29402034 	orhi	r5,r5,128
 1031050:	01000e04 	movi	r4,56
 1031054:	20806216 	blt	r4,r2,10311e0 <__subdf3+0x864>
 1031058:	010007c4 	movi	r4,31
 103105c:	20806b16 	blt	r4,r2,103120c <__subdf3+0x890>
 1031060:	01000804 	movi	r4,32
 1031064:	2089c83a 	sub	r4,r4,r2
 1031068:	2912983a 	sll	r9,r5,r4
 103106c:	888ed83a 	srl	r7,r17,r2
 1031070:	8908983a 	sll	r4,r17,r4
 1031074:	2884d83a 	srl	r2,r5,r2
 1031078:	49e2b03a 	or	r17,r9,r7
 103107c:	2008c03a 	cmpne	r4,r4,zero
 1031080:	8922b03a 	or	r17,r17,r4
 1031084:	89a3883a 	add	r17,r17,r6
 1031088:	10c5883a 	add	r2,r2,r3
 103108c:	898d803a 	cmpltu	r6,r17,r6
 1031090:	118b883a 	add	r5,r2,r6
 1031094:	5021883a 	mov	r16,r10
 1031098:	003ed506 	br	1030bf0 <_gp+0xffff290c>
 103109c:	1984b03a 	or	r2,r3,r6
 10310a0:	103e5926 	beq	r2,zero,1030a08 <_gp+0xffff2724>
 10310a4:	8989c83a 	sub	r4,r17,r6
 10310a8:	8911803a 	cmpltu	r8,r17,r4
 10310ac:	28c5c83a 	sub	r2,r5,r3
 10310b0:	1205c83a 	sub	r2,r2,r8
 10310b4:	1200202c 	andhi	r8,r2,128
 10310b8:	403ef926 	beq	r8,zero,1030ca0 <_gp+0xffff29bc>
 10310bc:	3463c83a 	sub	r17,r6,r17
 10310c0:	194bc83a 	sub	r5,r3,r5
 10310c4:	344d803a 	cmpltu	r6,r6,r17
 10310c8:	298bc83a 	sub	r5,r5,r6
 10310cc:	3825883a 	mov	r18,r7
 10310d0:	003e4d06 	br	1030a08 <_gp+0xffff2724>
 10310d4:	1984b03a 	or	r2,r3,r6
 10310d8:	10002b26 	beq	r2,zero,1031188 <__subdf3+0x80c>
 10310dc:	2808d0fa 	srli	r4,r5,3
 10310e0:	8822d0fa 	srli	r17,r17,3
 10310e4:	280a977a 	slli	r5,r5,29
 10310e8:	2080022c 	andhi	r2,r4,8
 10310ec:	2c62b03a 	or	r17,r5,r17
 10310f0:	10000826 	beq	r2,zero,1031114 <__subdf3+0x798>
 10310f4:	1810d0fa 	srli	r8,r3,3
 10310f8:	4080022c 	andhi	r2,r8,8
 10310fc:	1000051e 	bne	r2,zero,1031114 <__subdf3+0x798>
 1031100:	300cd0fa 	srli	r6,r6,3
 1031104:	1804977a 	slli	r2,r3,29
 1031108:	4009883a 	mov	r4,r8
 103110c:	3825883a 	mov	r18,r7
 1031110:	11a2b03a 	or	r17,r2,r6
 1031114:	880ad77a 	srli	r5,r17,29
 1031118:	200890fa 	slli	r4,r4,3
 103111c:	882290fa 	slli	r17,r17,3
 1031120:	0401ffc4 	movi	r16,2047
 1031124:	290ab03a 	or	r5,r5,r4
 1031128:	003e3706 	br	1030a08 <_gp+0xffff2724>
 103112c:	0101ffc4 	movi	r4,2047
 1031130:	513fc71e 	bne	r10,r4,1031050 <_gp+0xffff2d6c>
 1031134:	180b883a 	mov	r5,r3
 1031138:	3023883a 	mov	r17,r6
 103113c:	5021883a 	mov	r16,r10
 1031140:	003e3106 	br	1030a08 <_gp+0xffff2724>
 1031144:	10002d26 	beq	r2,zero,10311fc <__subdf3+0x880>
 1031148:	1984b03a 	or	r2,r3,r6
 103114c:	10000e26 	beq	r2,zero,1031188 <__subdf3+0x80c>
 1031150:	2808d0fa 	srli	r4,r5,3
 1031154:	8822d0fa 	srli	r17,r17,3
 1031158:	280a977a 	slli	r5,r5,29
 103115c:	2080022c 	andhi	r2,r4,8
 1031160:	2c62b03a 	or	r17,r5,r17
 1031164:	103feb26 	beq	r2,zero,1031114 <_gp+0xffff2e30>
 1031168:	180ed0fa 	srli	r7,r3,3
 103116c:	3880022c 	andhi	r2,r7,8
 1031170:	103fe81e 	bne	r2,zero,1031114 <_gp+0xffff2e30>
 1031174:	300cd0fa 	srli	r6,r6,3
 1031178:	1804977a 	slli	r2,r3,29
 103117c:	3809883a 	mov	r4,r7
 1031180:	11a2b03a 	or	r17,r2,r6
 1031184:	003fe306 	br	1031114 <_gp+0xffff2e30>
 1031188:	0401ffc4 	movi	r16,2047
 103118c:	003e1e06 	br	1030a08 <_gp+0xffff2724>
 1031190:	0005883a 	mov	r2,zero
 1031194:	003f8306 	br	1030fa4 <_gp+0xffff2cc0>
 1031198:	113ff804 	addi	r4,r2,-32
 103119c:	02000804 	movi	r8,32
 10311a0:	2908d83a 	srl	r4,r5,r4
 10311a4:	12002526 	beq	r2,r8,103123c <__subdf3+0x8c0>
 10311a8:	02001004 	movi	r8,64
 10311ac:	4085c83a 	sub	r2,r8,r2
 10311b0:	288a983a 	sll	r5,r5,r2
 10311b4:	2c62b03a 	or	r17,r5,r17
 10311b8:	8822c03a 	cmpne	r17,r17,zero
 10311bc:	8922b03a 	or	r17,r17,r4
 10311c0:	0005883a 	mov	r2,zero
 10311c4:	003f2406 	br	1030e58 <_gp+0xffff2b74>
 10311c8:	01402034 	movhi	r5,128
 10311cc:	0011883a 	mov	r8,zero
 10311d0:	297fffc4 	addi	r5,r5,-1
 10311d4:	047ffe04 	movi	r17,-8
 10311d8:	0401ffc4 	movi	r16,2047
 10311dc:	003e6a06 	br	1030b88 <_gp+0xffff28a4>
 10311e0:	2c62b03a 	or	r17,r5,r17
 10311e4:	8822c03a 	cmpne	r17,r17,zero
 10311e8:	0005883a 	mov	r2,zero
 10311ec:	003fa506 	br	1031084 <_gp+0xffff2da0>
 10311f0:	180b883a 	mov	r5,r3
 10311f4:	3023883a 	mov	r17,r6
 10311f8:	003e0306 	br	1030a08 <_gp+0xffff2724>
 10311fc:	180b883a 	mov	r5,r3
 1031200:	3023883a 	mov	r17,r6
 1031204:	0401ffc4 	movi	r16,2047
 1031208:	003dff06 	br	1030a08 <_gp+0xffff2724>
 103120c:	113ff804 	addi	r4,r2,-32
 1031210:	01c00804 	movi	r7,32
 1031214:	2908d83a 	srl	r4,r5,r4
 1031218:	11c00a26 	beq	r2,r7,1031244 <__subdf3+0x8c8>
 103121c:	01c01004 	movi	r7,64
 1031220:	3885c83a 	sub	r2,r7,r2
 1031224:	288a983a 	sll	r5,r5,r2
 1031228:	2c62b03a 	or	r17,r5,r17
 103122c:	8822c03a 	cmpne	r17,r17,zero
 1031230:	8922b03a 	or	r17,r17,r4
 1031234:	0005883a 	mov	r2,zero
 1031238:	003f9206 	br	1031084 <_gp+0xffff2da0>
 103123c:	000b883a 	mov	r5,zero
 1031240:	003fdc06 	br	10311b4 <_gp+0xffff2ed0>
 1031244:	000b883a 	mov	r5,zero
 1031248:	003ff706 	br	1031228 <_gp+0xffff2f44>

0103124c <__fixdfsi>:
 103124c:	2806d53a 	srli	r3,r5,20
 1031250:	00800434 	movhi	r2,16
 1031254:	10bfffc4 	addi	r2,r2,-1
 1031258:	18c1ffcc 	andi	r3,r3,2047
 103125c:	0180ff84 	movi	r6,1022
 1031260:	2884703a 	and	r2,r5,r2
 1031264:	280ad7fa 	srli	r5,r5,31
 1031268:	30c0130e 	bge	r6,r3,10312b8 <__fixdfsi+0x6c>
 103126c:	01810744 	movi	r6,1053
 1031270:	30c00d16 	blt	r6,r3,10312a8 <__fixdfsi+0x5c>
 1031274:	01810cc4 	movi	r6,1075
 1031278:	30cdc83a 	sub	r6,r6,r3
 103127c:	01c007c4 	movi	r7,31
 1031280:	10800434 	orhi	r2,r2,16
 1031284:	39800e0e 	bge	r7,r6,10312c0 <__fixdfsi+0x74>
 1031288:	010104c4 	movi	r4,1043
 103128c:	20c7c83a 	sub	r3,r4,r3
 1031290:	10c6d83a 	srl	r3,r2,r3
 1031294:	29403fcc 	andi	r5,r5,255
 1031298:	0145c83a 	sub	r2,zero,r5
 103129c:	1884f03a 	xor	r2,r3,r2
 10312a0:	1145883a 	add	r2,r2,r5
 10312a4:	f800283a 	ret
 10312a8:	00a00034 	movhi	r2,32768
 10312ac:	10bfffc4 	addi	r2,r2,-1
 10312b0:	2885883a 	add	r2,r5,r2
 10312b4:	f800283a 	ret
 10312b8:	0005883a 	mov	r2,zero
 10312bc:	f800283a 	ret
 10312c0:	18fefb44 	addi	r3,r3,-1043
 10312c4:	2188d83a 	srl	r4,r4,r6
 10312c8:	10c6983a 	sll	r3,r2,r3
 10312cc:	20c6b03a 	or	r3,r4,r3
 10312d0:	003ff006 	br	1031294 <_gp+0xffff2fb0>

010312d4 <__floatsidf>:
 10312d4:	defffd04 	addi	sp,sp,-12
 10312d8:	dc400115 	stw	r17,4(sp)
 10312dc:	dfc00215 	stw	ra,8(sp)
 10312e0:	dc000015 	stw	r16,0(sp)
 10312e4:	2023883a 	mov	r17,r4
 10312e8:	20001426 	beq	r4,zero,103133c <__floatsidf+0x68>
 10312ec:	2020d7fa 	srli	r16,r4,31
 10312f0:	80000126 	beq	r16,zero,10312f8 <__floatsidf+0x24>
 10312f4:	0123c83a 	sub	r17,zero,r4
 10312f8:	8809883a 	mov	r4,r17
 10312fc:	10314480 	call	1031448 <__clzsi2>
 1031300:	01410784 	movi	r5,1054
 1031304:	00c00284 	movi	r3,10
 1031308:	288bc83a 	sub	r5,r5,r2
 103130c:	18801c16 	blt	r3,r2,1031380 <__floatsidf+0xac>
 1031310:	00c002c4 	movi	r3,11
 1031314:	1887c83a 	sub	r3,r3,r2
 1031318:	88c8d83a 	srl	r4,r17,r3
 103131c:	00c00434 	movhi	r3,16
 1031320:	18ffffc4 	addi	r3,r3,-1
 1031324:	10800544 	addi	r2,r2,21
 1031328:	20c8703a 	and	r4,r4,r3
 103132c:	8884983a 	sll	r2,r17,r2
 1031330:	28c1ffcc 	andi	r3,r5,2047
 1031334:	800d883a 	mov	r6,r16
 1031338:	00000406 	br	103134c <__floatsidf+0x78>
 103133c:	000d883a 	mov	r6,zero
 1031340:	0007883a 	mov	r3,zero
 1031344:	0009883a 	mov	r4,zero
 1031348:	0005883a 	mov	r2,zero
 103134c:	180a953a 	slli	r5,r3,20
 1031350:	31803fcc 	andi	r6,r6,255
 1031354:	00c00434 	movhi	r3,16
 1031358:	300c97fa 	slli	r6,r6,31
 103135c:	18ffffc4 	addi	r3,r3,-1
 1031360:	20c6703a 	and	r3,r4,r3
 1031364:	1946b03a 	or	r3,r3,r5
 1031368:	1986b03a 	or	r3,r3,r6
 103136c:	dfc00217 	ldw	ra,8(sp)
 1031370:	dc400117 	ldw	r17,4(sp)
 1031374:	dc000017 	ldw	r16,0(sp)
 1031378:	dec00304 	addi	sp,sp,12
 103137c:	f800283a 	ret
 1031380:	10fffd44 	addi	r3,r2,-11
 1031384:	88c8983a 	sll	r4,r17,r3
 1031388:	00800434 	movhi	r2,16
 103138c:	10bfffc4 	addi	r2,r2,-1
 1031390:	2088703a 	and	r4,r4,r2
 1031394:	28c1ffcc 	andi	r3,r5,2047
 1031398:	800d883a 	mov	r6,r16
 103139c:	0005883a 	mov	r2,zero
 10313a0:	003fea06 	br	103134c <_gp+0xffff3068>

010313a4 <__floatunsidf>:
 10313a4:	defffe04 	addi	sp,sp,-8
 10313a8:	dc000015 	stw	r16,0(sp)
 10313ac:	dfc00115 	stw	ra,4(sp)
 10313b0:	2021883a 	mov	r16,r4
 10313b4:	20001026 	beq	r4,zero,10313f8 <__floatunsidf+0x54>
 10313b8:	10314480 	call	1031448 <__clzsi2>
 10313bc:	01410784 	movi	r5,1054
 10313c0:	100d883a 	mov	r6,r2
 10313c4:	288bc83a 	sub	r5,r5,r2
 10313c8:	00800284 	movi	r2,10
 10313cc:	11801616 	blt	r2,r6,1031428 <__floatunsidf+0x84>
 10313d0:	008002c4 	movi	r2,11
 10313d4:	1185c83a 	sub	r2,r2,r6
 10313d8:	8084d83a 	srl	r2,r16,r2
 10313dc:	00c00434 	movhi	r3,16
 10313e0:	31c00544 	addi	r7,r6,21
 10313e4:	18ffffc4 	addi	r3,r3,-1
 10313e8:	81e0983a 	sll	r16,r16,r7
 10313ec:	10cc703a 	and	r6,r2,r3
 10313f0:	2941ffcc 	andi	r5,r5,2047
 10313f4:	00000206 	br	1031400 <__floatunsidf+0x5c>
 10313f8:	000b883a 	mov	r5,zero
 10313fc:	000d883a 	mov	r6,zero
 1031400:	280a953a 	slli	r5,r5,20
 1031404:	00c00434 	movhi	r3,16
 1031408:	18ffffc4 	addi	r3,r3,-1
 103140c:	30c6703a 	and	r3,r6,r3
 1031410:	8005883a 	mov	r2,r16
 1031414:	1946b03a 	or	r3,r3,r5
 1031418:	dfc00117 	ldw	ra,4(sp)
 103141c:	dc000017 	ldw	r16,0(sp)
 1031420:	dec00204 	addi	sp,sp,8
 1031424:	f800283a 	ret
 1031428:	31bffd44 	addi	r6,r6,-11
 103142c:	818c983a 	sll	r6,r16,r6
 1031430:	00800434 	movhi	r2,16
 1031434:	10bfffc4 	addi	r2,r2,-1
 1031438:	2941ffcc 	andi	r5,r5,2047
 103143c:	0021883a 	mov	r16,zero
 1031440:	308c703a 	and	r6,r6,r2
 1031444:	003fee06 	br	1031400 <_gp+0xffff311c>

01031448 <__clzsi2>:
 1031448:	00bfffd4 	movui	r2,65535
 103144c:	11000b36 	bltu	r2,r4,103147c <__clzsi2+0x34>
 1031450:	00803fc4 	movi	r2,255
 1031454:	1100122e 	bgeu	r2,r4,10314a0 <__clzsi2+0x58>
 1031458:	00c00204 	movi	r3,8
 103145c:	01400604 	movi	r5,24
 1031460:	20c8d83a 	srl	r4,r4,r3
 1031464:	008040f4 	movhi	r2,259
 1031468:	1091c304 	addi	r2,r2,18188
 103146c:	1109883a 	add	r4,r2,r4
 1031470:	20800003 	ldbu	r2,0(r4)
 1031474:	2885c83a 	sub	r2,r5,r2
 1031478:	f800283a 	ret
 103147c:	00804034 	movhi	r2,256
 1031480:	10bfffc4 	addi	r2,r2,-1
 1031484:	11000336 	bltu	r2,r4,1031494 <__clzsi2+0x4c>
 1031488:	00c00404 	movi	r3,16
 103148c:	180b883a 	mov	r5,r3
 1031490:	003ff306 	br	1031460 <_gp+0xffff317c>
 1031494:	00c00604 	movi	r3,24
 1031498:	01400204 	movi	r5,8
 103149c:	003ff006 	br	1031460 <_gp+0xffff317c>
 10314a0:	0007883a 	mov	r3,zero
 10314a4:	01400804 	movi	r5,32
 10314a8:	003fed06 	br	1031460 <_gp+0xffff317c>

010314ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10314ac:	defffe04 	addi	sp,sp,-8
 10314b0:	dfc00115 	stw	ra,4(sp)
 10314b4:	df000015 	stw	fp,0(sp)
 10314b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10314bc:	008040f4 	movhi	r2,259
 10314c0:	1098c404 	addi	r2,r2,25360
 10314c4:	10800017 	ldw	r2,0(r2)
 10314c8:	10000526 	beq	r2,zero,10314e0 <alt_get_errno+0x34>
 10314cc:	008040f4 	movhi	r2,259
 10314d0:	1098c404 	addi	r2,r2,25360
 10314d4:	10800017 	ldw	r2,0(r2)
 10314d8:	103ee83a 	callr	r2
 10314dc:	00000206 	br	10314e8 <alt_get_errno+0x3c>
 10314e0:	008040f4 	movhi	r2,259
 10314e4:	109f8a04 	addi	r2,r2,32296
}
 10314e8:	e037883a 	mov	sp,fp
 10314ec:	dfc00117 	ldw	ra,4(sp)
 10314f0:	df000017 	ldw	fp,0(sp)
 10314f4:	dec00204 	addi	sp,sp,8
 10314f8:	f800283a 	ret

010314fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10314fc:	defffb04 	addi	sp,sp,-20
 1031500:	dfc00415 	stw	ra,16(sp)
 1031504:	df000315 	stw	fp,12(sp)
 1031508:	df000304 	addi	fp,sp,12
 103150c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1031510:	e0bfff17 	ldw	r2,-4(fp)
 1031514:	10000616 	blt	r2,zero,1031530 <close+0x34>
 1031518:	e0bfff17 	ldw	r2,-4(fp)
 103151c:	10c00324 	muli	r3,r2,12
 1031520:	008040f4 	movhi	r2,259
 1031524:	10944104 	addi	r2,r2,20740
 1031528:	1885883a 	add	r2,r3,r2
 103152c:	00000106 	br	1031534 <close+0x38>
 1031530:	0005883a 	mov	r2,zero
 1031534:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1031538:	e0bffd17 	ldw	r2,-12(fp)
 103153c:	10001926 	beq	r2,zero,10315a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1031540:	e0bffd17 	ldw	r2,-12(fp)
 1031544:	10800017 	ldw	r2,0(r2)
 1031548:	10800417 	ldw	r2,16(r2)
 103154c:	10000626 	beq	r2,zero,1031568 <close+0x6c>
 1031550:	e0bffd17 	ldw	r2,-12(fp)
 1031554:	10800017 	ldw	r2,0(r2)
 1031558:	10800417 	ldw	r2,16(r2)
 103155c:	e13ffd17 	ldw	r4,-12(fp)
 1031560:	103ee83a 	callr	r2
 1031564:	00000106 	br	103156c <close+0x70>
 1031568:	0005883a 	mov	r2,zero
 103156c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1031570:	e13fff17 	ldw	r4,-4(fp)
 1031574:	1031bf80 	call	1031bf8 <alt_release_fd>
    if (rval < 0)
 1031578:	e0bffe17 	ldw	r2,-8(fp)
 103157c:	1000070e 	bge	r2,zero,103159c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1031580:	10314ac0 	call	10314ac <alt_get_errno>
 1031584:	1007883a 	mov	r3,r2
 1031588:	e0bffe17 	ldw	r2,-8(fp)
 103158c:	0085c83a 	sub	r2,zero,r2
 1031590:	18800015 	stw	r2,0(r3)
      return -1;
 1031594:	00bfffc4 	movi	r2,-1
 1031598:	00000706 	br	10315b8 <close+0xbc>
    }
    return 0;
 103159c:	0005883a 	mov	r2,zero
 10315a0:	00000506 	br	10315b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10315a4:	10314ac0 	call	10314ac <alt_get_errno>
 10315a8:	1007883a 	mov	r3,r2
 10315ac:	00801444 	movi	r2,81
 10315b0:	18800015 	stw	r2,0(r3)
    return -1;
 10315b4:	00bfffc4 	movi	r2,-1
  }
}
 10315b8:	e037883a 	mov	sp,fp
 10315bc:	dfc00117 	ldw	ra,4(sp)
 10315c0:	df000017 	ldw	fp,0(sp)
 10315c4:	dec00204 	addi	sp,sp,8
 10315c8:	f800283a 	ret

010315cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10315cc:	defffc04 	addi	sp,sp,-16
 10315d0:	df000315 	stw	fp,12(sp)
 10315d4:	df000304 	addi	fp,sp,12
 10315d8:	e13ffd15 	stw	r4,-12(fp)
 10315dc:	e17ffe15 	stw	r5,-8(fp)
 10315e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10315e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10315e8:	e037883a 	mov	sp,fp
 10315ec:	df000017 	ldw	fp,0(sp)
 10315f0:	dec00104 	addi	sp,sp,4
 10315f4:	f800283a 	ret

010315f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10315f8:	defffe04 	addi	sp,sp,-8
 10315fc:	dfc00115 	stw	ra,4(sp)
 1031600:	df000015 	stw	fp,0(sp)
 1031604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1031608:	008040f4 	movhi	r2,259
 103160c:	1098c404 	addi	r2,r2,25360
 1031610:	10800017 	ldw	r2,0(r2)
 1031614:	10000526 	beq	r2,zero,103162c <alt_get_errno+0x34>
 1031618:	008040f4 	movhi	r2,259
 103161c:	1098c404 	addi	r2,r2,25360
 1031620:	10800017 	ldw	r2,0(r2)
 1031624:	103ee83a 	callr	r2
 1031628:	00000206 	br	1031634 <alt_get_errno+0x3c>
 103162c:	008040f4 	movhi	r2,259
 1031630:	109f8a04 	addi	r2,r2,32296
}
 1031634:	e037883a 	mov	sp,fp
 1031638:	dfc00117 	ldw	ra,4(sp)
 103163c:	df000017 	ldw	fp,0(sp)
 1031640:	dec00204 	addi	sp,sp,8
 1031644:	f800283a 	ret

01031648 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1031648:	defffb04 	addi	sp,sp,-20
 103164c:	dfc00415 	stw	ra,16(sp)
 1031650:	df000315 	stw	fp,12(sp)
 1031654:	df000304 	addi	fp,sp,12
 1031658:	e13ffe15 	stw	r4,-8(fp)
 103165c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031660:	e0bffe17 	ldw	r2,-8(fp)
 1031664:	10000616 	blt	r2,zero,1031680 <fstat+0x38>
 1031668:	e0bffe17 	ldw	r2,-8(fp)
 103166c:	10c00324 	muli	r3,r2,12
 1031670:	008040f4 	movhi	r2,259
 1031674:	10944104 	addi	r2,r2,20740
 1031678:	1885883a 	add	r2,r3,r2
 103167c:	00000106 	br	1031684 <fstat+0x3c>
 1031680:	0005883a 	mov	r2,zero
 1031684:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1031688:	e0bffd17 	ldw	r2,-12(fp)
 103168c:	10001026 	beq	r2,zero,10316d0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1031690:	e0bffd17 	ldw	r2,-12(fp)
 1031694:	10800017 	ldw	r2,0(r2)
 1031698:	10800817 	ldw	r2,32(r2)
 103169c:	10000726 	beq	r2,zero,10316bc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 10316a0:	e0bffd17 	ldw	r2,-12(fp)
 10316a4:	10800017 	ldw	r2,0(r2)
 10316a8:	10800817 	ldw	r2,32(r2)
 10316ac:	e13ffd17 	ldw	r4,-12(fp)
 10316b0:	e17fff17 	ldw	r5,-4(fp)
 10316b4:	103ee83a 	callr	r2
 10316b8:	00000a06 	br	10316e4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10316bc:	e0bfff17 	ldw	r2,-4(fp)
 10316c0:	00c80004 	movi	r3,8192
 10316c4:	10c00115 	stw	r3,4(r2)
      return 0;
 10316c8:	0005883a 	mov	r2,zero
 10316cc:	00000506 	br	10316e4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10316d0:	10315f80 	call	10315f8 <alt_get_errno>
 10316d4:	1007883a 	mov	r3,r2
 10316d8:	00801444 	movi	r2,81
 10316dc:	18800015 	stw	r2,0(r3)
    return -1;
 10316e0:	00bfffc4 	movi	r2,-1
  }
}
 10316e4:	e037883a 	mov	sp,fp
 10316e8:	dfc00117 	ldw	ra,4(sp)
 10316ec:	df000017 	ldw	fp,0(sp)
 10316f0:	dec00204 	addi	sp,sp,8
 10316f4:	f800283a 	ret

010316f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10316f8:	defffe04 	addi	sp,sp,-8
 10316fc:	dfc00115 	stw	ra,4(sp)
 1031700:	df000015 	stw	fp,0(sp)
 1031704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1031708:	008040f4 	movhi	r2,259
 103170c:	1098c404 	addi	r2,r2,25360
 1031710:	10800017 	ldw	r2,0(r2)
 1031714:	10000526 	beq	r2,zero,103172c <alt_get_errno+0x34>
 1031718:	008040f4 	movhi	r2,259
 103171c:	1098c404 	addi	r2,r2,25360
 1031720:	10800017 	ldw	r2,0(r2)
 1031724:	103ee83a 	callr	r2
 1031728:	00000206 	br	1031734 <alt_get_errno+0x3c>
 103172c:	008040f4 	movhi	r2,259
 1031730:	109f8a04 	addi	r2,r2,32296
}
 1031734:	e037883a 	mov	sp,fp
 1031738:	dfc00117 	ldw	ra,4(sp)
 103173c:	df000017 	ldw	fp,0(sp)
 1031740:	dec00204 	addi	sp,sp,8
 1031744:	f800283a 	ret

01031748 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1031748:	deffed04 	addi	sp,sp,-76
 103174c:	dfc01215 	stw	ra,72(sp)
 1031750:	df001115 	stw	fp,68(sp)
 1031754:	df001104 	addi	fp,sp,68
 1031758:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 103175c:	e0bfff17 	ldw	r2,-4(fp)
 1031760:	10000616 	blt	r2,zero,103177c <isatty+0x34>
 1031764:	e0bfff17 	ldw	r2,-4(fp)
 1031768:	10c00324 	muli	r3,r2,12
 103176c:	008040f4 	movhi	r2,259
 1031770:	10944104 	addi	r2,r2,20740
 1031774:	1885883a 	add	r2,r3,r2
 1031778:	00000106 	br	1031780 <isatty+0x38>
 103177c:	0005883a 	mov	r2,zero
 1031780:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1031784:	e0bfef17 	ldw	r2,-68(fp)
 1031788:	10000e26 	beq	r2,zero,10317c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 103178c:	e0bfef17 	ldw	r2,-68(fp)
 1031790:	10800017 	ldw	r2,0(r2)
 1031794:	10800817 	ldw	r2,32(r2)
 1031798:	1000021e 	bne	r2,zero,10317a4 <isatty+0x5c>
    {
      return 1;
 103179c:	00800044 	movi	r2,1
 10317a0:	00000d06 	br	10317d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 10317a4:	e0bff004 	addi	r2,fp,-64
 10317a8:	e13fff17 	ldw	r4,-4(fp)
 10317ac:	100b883a 	mov	r5,r2
 10317b0:	10316480 	call	1031648 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 10317b4:	e0bff117 	ldw	r2,-60(fp)
 10317b8:	10880020 	cmpeqi	r2,r2,8192
 10317bc:	10803fcc 	andi	r2,r2,255
 10317c0:	00000506 	br	10317d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10317c4:	10316f80 	call	10316f8 <alt_get_errno>
 10317c8:	1007883a 	mov	r3,r2
 10317cc:	00801444 	movi	r2,81
 10317d0:	18800015 	stw	r2,0(r3)
    return 0;
 10317d4:	0005883a 	mov	r2,zero
  }
}
 10317d8:	e037883a 	mov	sp,fp
 10317dc:	dfc00117 	ldw	ra,4(sp)
 10317e0:	df000017 	ldw	fp,0(sp)
 10317e4:	dec00204 	addi	sp,sp,8
 10317e8:	f800283a 	ret

010317ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10317ec:	defffc04 	addi	sp,sp,-16
 10317f0:	df000315 	stw	fp,12(sp)
 10317f4:	df000304 	addi	fp,sp,12
 10317f8:	e13ffd15 	stw	r4,-12(fp)
 10317fc:	e17ffe15 	stw	r5,-8(fp)
 1031800:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1031804:	e0fffe17 	ldw	r3,-8(fp)
 1031808:	e0bffd17 	ldw	r2,-12(fp)
 103180c:	18800c26 	beq	r3,r2,1031840 <alt_load_section+0x54>
  {
    while( to != end )
 1031810:	00000806 	br	1031834 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1031814:	e0bffe17 	ldw	r2,-8(fp)
 1031818:	10c00104 	addi	r3,r2,4
 103181c:	e0fffe15 	stw	r3,-8(fp)
 1031820:	e0fffd17 	ldw	r3,-12(fp)
 1031824:	19000104 	addi	r4,r3,4
 1031828:	e13ffd15 	stw	r4,-12(fp)
 103182c:	18c00017 	ldw	r3,0(r3)
 1031830:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1031834:	e0fffe17 	ldw	r3,-8(fp)
 1031838:	e0bfff17 	ldw	r2,-4(fp)
 103183c:	18bff51e 	bne	r3,r2,1031814 <_gp+0xffff3530>
    {
      *to++ = *from++;
    }
  }
}
 1031840:	e037883a 	mov	sp,fp
 1031844:	df000017 	ldw	fp,0(sp)
 1031848:	dec00104 	addi	sp,sp,4
 103184c:	f800283a 	ret

01031850 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1031850:	defffe04 	addi	sp,sp,-8
 1031854:	dfc00115 	stw	ra,4(sp)
 1031858:	df000015 	stw	fp,0(sp)
 103185c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1031860:	010040f4 	movhi	r4,259
 1031864:	2118c904 	addi	r4,r4,25380
 1031868:	014040f4 	movhi	r5,259
 103186c:	29520e04 	addi	r5,r5,18488
 1031870:	018040f4 	movhi	r6,259
 1031874:	3198c904 	addi	r6,r6,25380
 1031878:	10317ec0 	call	10317ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 103187c:	010040b4 	movhi	r4,258
 1031880:	21000804 	addi	r4,r4,32
 1031884:	014040b4 	movhi	r5,258
 1031888:	29400804 	addi	r5,r5,32
 103188c:	018040b4 	movhi	r6,258
 1031890:	31809004 	addi	r6,r6,576
 1031894:	10317ec0 	call	10317ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1031898:	010040f4 	movhi	r4,259
 103189c:	210fa904 	addi	r4,r4,16036
 10318a0:	014040f4 	movhi	r5,259
 10318a4:	294fa904 	addi	r5,r5,16036
 10318a8:	018040f4 	movhi	r6,259
 10318ac:	31920e04 	addi	r6,r6,18488
 10318b0:	10317ec0 	call	10317ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10318b4:	1032d280 	call	1032d28 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10318b8:	1032f180 	call	1032f18 <alt_icache_flush_all>
}
 10318bc:	e037883a 	mov	sp,fp
 10318c0:	dfc00117 	ldw	ra,4(sp)
 10318c4:	df000017 	ldw	fp,0(sp)
 10318c8:	dec00204 	addi	sp,sp,8
 10318cc:	f800283a 	ret

010318d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10318d0:	defffe04 	addi	sp,sp,-8
 10318d4:	dfc00115 	stw	ra,4(sp)
 10318d8:	df000015 	stw	fp,0(sp)
 10318dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10318e0:	008040f4 	movhi	r2,259
 10318e4:	1098c404 	addi	r2,r2,25360
 10318e8:	10800017 	ldw	r2,0(r2)
 10318ec:	10000526 	beq	r2,zero,1031904 <alt_get_errno+0x34>
 10318f0:	008040f4 	movhi	r2,259
 10318f4:	1098c404 	addi	r2,r2,25360
 10318f8:	10800017 	ldw	r2,0(r2)
 10318fc:	103ee83a 	callr	r2
 1031900:	00000206 	br	103190c <alt_get_errno+0x3c>
 1031904:	008040f4 	movhi	r2,259
 1031908:	109f8a04 	addi	r2,r2,32296
}
 103190c:	e037883a 	mov	sp,fp
 1031910:	dfc00117 	ldw	ra,4(sp)
 1031914:	df000017 	ldw	fp,0(sp)
 1031918:	dec00204 	addi	sp,sp,8
 103191c:	f800283a 	ret

01031920 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1031920:	defff904 	addi	sp,sp,-28
 1031924:	dfc00615 	stw	ra,24(sp)
 1031928:	df000515 	stw	fp,20(sp)
 103192c:	df000504 	addi	fp,sp,20
 1031930:	e13ffd15 	stw	r4,-12(fp)
 1031934:	e17ffe15 	stw	r5,-8(fp)
 1031938:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 103193c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031940:	e0bffd17 	ldw	r2,-12(fp)
 1031944:	10000616 	blt	r2,zero,1031960 <lseek+0x40>
 1031948:	e0bffd17 	ldw	r2,-12(fp)
 103194c:	10c00324 	muli	r3,r2,12
 1031950:	008040f4 	movhi	r2,259
 1031954:	10944104 	addi	r2,r2,20740
 1031958:	1885883a 	add	r2,r3,r2
 103195c:	00000106 	br	1031964 <lseek+0x44>
 1031960:	0005883a 	mov	r2,zero
 1031964:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1031968:	e0bffc17 	ldw	r2,-16(fp)
 103196c:	10001026 	beq	r2,zero,10319b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1031970:	e0bffc17 	ldw	r2,-16(fp)
 1031974:	10800017 	ldw	r2,0(r2)
 1031978:	10800717 	ldw	r2,28(r2)
 103197c:	10000926 	beq	r2,zero,10319a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1031980:	e0bffc17 	ldw	r2,-16(fp)
 1031984:	10800017 	ldw	r2,0(r2)
 1031988:	10800717 	ldw	r2,28(r2)
 103198c:	e13ffc17 	ldw	r4,-16(fp)
 1031990:	e17ffe17 	ldw	r5,-8(fp)
 1031994:	e1bfff17 	ldw	r6,-4(fp)
 1031998:	103ee83a 	callr	r2
 103199c:	e0bffb15 	stw	r2,-20(fp)
 10319a0:	00000506 	br	10319b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10319a4:	00bfde84 	movi	r2,-134
 10319a8:	e0bffb15 	stw	r2,-20(fp)
 10319ac:	00000206 	br	10319b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 10319b0:	00bfebc4 	movi	r2,-81
 10319b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 10319b8:	e0bffb17 	ldw	r2,-20(fp)
 10319bc:	1000070e 	bge	r2,zero,10319dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 10319c0:	10318d00 	call	10318d0 <alt_get_errno>
 10319c4:	1007883a 	mov	r3,r2
 10319c8:	e0bffb17 	ldw	r2,-20(fp)
 10319cc:	0085c83a 	sub	r2,zero,r2
 10319d0:	18800015 	stw	r2,0(r3)
    rc = -1;
 10319d4:	00bfffc4 	movi	r2,-1
 10319d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 10319dc:	e0bffb17 	ldw	r2,-20(fp)
}
 10319e0:	e037883a 	mov	sp,fp
 10319e4:	dfc00117 	ldw	ra,4(sp)
 10319e8:	df000017 	ldw	fp,0(sp)
 10319ec:	dec00204 	addi	sp,sp,8
 10319f0:	f800283a 	ret

010319f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10319f4:	defffd04 	addi	sp,sp,-12
 10319f8:	dfc00215 	stw	ra,8(sp)
 10319fc:	df000115 	stw	fp,4(sp)
 1031a00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1031a04:	0009883a 	mov	r4,zero
 1031a08:	1031eb80 	call	1031eb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1031a0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1031a10:	1031eec0 	call	1031eec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1031a14:	010040f4 	movhi	r4,259
 1031a18:	21120604 	addi	r4,r4,18456
 1031a1c:	014040f4 	movhi	r5,259
 1031a20:	29520604 	addi	r5,r5,18456
 1031a24:	018040f4 	movhi	r6,259
 1031a28:	31920604 	addi	r6,r6,18456
 1031a2c:	10332d80 	call	10332d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1031a30:	1032e600 	call	1032e60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1031a34:	010040f4 	movhi	r4,259
 1031a38:	210baf04 	addi	r4,r4,11964
 1031a3c:	1033b000 	call	1033b00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1031a40:	d126d217 	ldw	r4,-25784(gp)
 1031a44:	d0e6d317 	ldw	r3,-25780(gp)
 1031a48:	d0a6d417 	ldw	r2,-25776(gp)
 1031a4c:	180b883a 	mov	r5,r3
 1031a50:	100d883a 	mov	r6,r2
 1031a54:	1021cbc0 	call	1021cbc <main>
 1031a58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1031a5c:	01000044 	movi	r4,1
 1031a60:	10314fc0 	call	10314fc <close>
  exit (result);
 1031a64:	e13fff17 	ldw	r4,-4(fp)
 1031a68:	1033b140 	call	1033b14 <exit>

01031a6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1031a6c:	defffe04 	addi	sp,sp,-8
 1031a70:	df000115 	stw	fp,4(sp)
 1031a74:	df000104 	addi	fp,sp,4
 1031a78:	e13fff15 	stw	r4,-4(fp)
}
 1031a7c:	e037883a 	mov	sp,fp
 1031a80:	df000017 	ldw	fp,0(sp)
 1031a84:	dec00104 	addi	sp,sp,4
 1031a88:	f800283a 	ret

01031a8c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1031a8c:	defffe04 	addi	sp,sp,-8
 1031a90:	df000115 	stw	fp,4(sp)
 1031a94:	df000104 	addi	fp,sp,4
 1031a98:	e13fff15 	stw	r4,-4(fp)
}
 1031a9c:	e037883a 	mov	sp,fp
 1031aa0:	df000017 	ldw	fp,0(sp)
 1031aa4:	dec00104 	addi	sp,sp,4
 1031aa8:	f800283a 	ret

01031aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1031aac:	defffe04 	addi	sp,sp,-8
 1031ab0:	dfc00115 	stw	ra,4(sp)
 1031ab4:	df000015 	stw	fp,0(sp)
 1031ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1031abc:	008040f4 	movhi	r2,259
 1031ac0:	1098c404 	addi	r2,r2,25360
 1031ac4:	10800017 	ldw	r2,0(r2)
 1031ac8:	10000526 	beq	r2,zero,1031ae0 <alt_get_errno+0x34>
 1031acc:	008040f4 	movhi	r2,259
 1031ad0:	1098c404 	addi	r2,r2,25360
 1031ad4:	10800017 	ldw	r2,0(r2)
 1031ad8:	103ee83a 	callr	r2
 1031adc:	00000206 	br	1031ae8 <alt_get_errno+0x3c>
 1031ae0:	008040f4 	movhi	r2,259
 1031ae4:	109f8a04 	addi	r2,r2,32296
}
 1031ae8:	e037883a 	mov	sp,fp
 1031aec:	dfc00117 	ldw	ra,4(sp)
 1031af0:	df000017 	ldw	fp,0(sp)
 1031af4:	dec00204 	addi	sp,sp,8
 1031af8:	f800283a 	ret

01031afc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1031afc:	defff904 	addi	sp,sp,-28
 1031b00:	dfc00615 	stw	ra,24(sp)
 1031b04:	df000515 	stw	fp,20(sp)
 1031b08:	df000504 	addi	fp,sp,20
 1031b0c:	e13ffd15 	stw	r4,-12(fp)
 1031b10:	e17ffe15 	stw	r5,-8(fp)
 1031b14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031b18:	e0bffd17 	ldw	r2,-12(fp)
 1031b1c:	10000616 	blt	r2,zero,1031b38 <read+0x3c>
 1031b20:	e0bffd17 	ldw	r2,-12(fp)
 1031b24:	10c00324 	muli	r3,r2,12
 1031b28:	008040f4 	movhi	r2,259
 1031b2c:	10944104 	addi	r2,r2,20740
 1031b30:	1885883a 	add	r2,r3,r2
 1031b34:	00000106 	br	1031b3c <read+0x40>
 1031b38:	0005883a 	mov	r2,zero
 1031b3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1031b40:	e0bffb17 	ldw	r2,-20(fp)
 1031b44:	10002226 	beq	r2,zero,1031bd0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1031b48:	e0bffb17 	ldw	r2,-20(fp)
 1031b4c:	10800217 	ldw	r2,8(r2)
 1031b50:	108000cc 	andi	r2,r2,3
 1031b54:	10800060 	cmpeqi	r2,r2,1
 1031b58:	1000181e 	bne	r2,zero,1031bbc <read+0xc0>
        (fd->dev->read))
 1031b5c:	e0bffb17 	ldw	r2,-20(fp)
 1031b60:	10800017 	ldw	r2,0(r2)
 1031b64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1031b68:	10001426 	beq	r2,zero,1031bbc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1031b6c:	e0bffb17 	ldw	r2,-20(fp)
 1031b70:	10800017 	ldw	r2,0(r2)
 1031b74:	10800517 	ldw	r2,20(r2)
 1031b78:	e0ffff17 	ldw	r3,-4(fp)
 1031b7c:	e13ffb17 	ldw	r4,-20(fp)
 1031b80:	e17ffe17 	ldw	r5,-8(fp)
 1031b84:	180d883a 	mov	r6,r3
 1031b88:	103ee83a 	callr	r2
 1031b8c:	e0bffc15 	stw	r2,-16(fp)
 1031b90:	e0bffc17 	ldw	r2,-16(fp)
 1031b94:	1000070e 	bge	r2,zero,1031bb4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1031b98:	1031aac0 	call	1031aac <alt_get_errno>
 1031b9c:	1007883a 	mov	r3,r2
 1031ba0:	e0bffc17 	ldw	r2,-16(fp)
 1031ba4:	0085c83a 	sub	r2,zero,r2
 1031ba8:	18800015 	stw	r2,0(r3)
          return -1;
 1031bac:	00bfffc4 	movi	r2,-1
 1031bb0:	00000c06 	br	1031be4 <read+0xe8>
        }
        return rval;
 1031bb4:	e0bffc17 	ldw	r2,-16(fp)
 1031bb8:	00000a06 	br	1031be4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1031bbc:	1031aac0 	call	1031aac <alt_get_errno>
 1031bc0:	1007883a 	mov	r3,r2
 1031bc4:	00800344 	movi	r2,13
 1031bc8:	18800015 	stw	r2,0(r3)
 1031bcc:	00000406 	br	1031be0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1031bd0:	1031aac0 	call	1031aac <alt_get_errno>
 1031bd4:	1007883a 	mov	r3,r2
 1031bd8:	00801444 	movi	r2,81
 1031bdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1031be0:	00bfffc4 	movi	r2,-1
}
 1031be4:	e037883a 	mov	sp,fp
 1031be8:	dfc00117 	ldw	ra,4(sp)
 1031bec:	df000017 	ldw	fp,0(sp)
 1031bf0:	dec00204 	addi	sp,sp,8
 1031bf4:	f800283a 	ret

01031bf8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1031bf8:	defffe04 	addi	sp,sp,-8
 1031bfc:	df000115 	stw	fp,4(sp)
 1031c00:	df000104 	addi	fp,sp,4
 1031c04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1031c08:	e0bfff17 	ldw	r2,-4(fp)
 1031c0c:	108000d0 	cmplti	r2,r2,3
 1031c10:	10000d1e 	bne	r2,zero,1031c48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1031c14:	008040f4 	movhi	r2,259
 1031c18:	10944104 	addi	r2,r2,20740
 1031c1c:	e0ffff17 	ldw	r3,-4(fp)
 1031c20:	18c00324 	muli	r3,r3,12
 1031c24:	10c5883a 	add	r2,r2,r3
 1031c28:	10800204 	addi	r2,r2,8
 1031c2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1031c30:	008040f4 	movhi	r2,259
 1031c34:	10944104 	addi	r2,r2,20740
 1031c38:	e0ffff17 	ldw	r3,-4(fp)
 1031c3c:	18c00324 	muli	r3,r3,12
 1031c40:	10c5883a 	add	r2,r2,r3
 1031c44:	10000015 	stw	zero,0(r2)
  }
}
 1031c48:	e037883a 	mov	sp,fp
 1031c4c:	df000017 	ldw	fp,0(sp)
 1031c50:	dec00104 	addi	sp,sp,4
 1031c54:	f800283a 	ret

01031c58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1031c58:	defff904 	addi	sp,sp,-28
 1031c5c:	df000615 	stw	fp,24(sp)
 1031c60:	df000604 	addi	fp,sp,24
 1031c64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1031c68:	0005303a 	rdctl	r2,status
 1031c6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1031c70:	e0fffc17 	ldw	r3,-16(fp)
 1031c74:	00bfff84 	movi	r2,-2
 1031c78:	1884703a 	and	r2,r3,r2
 1031c7c:	1001703a 	wrctl	status,r2
  
  return context;
 1031c80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1031c84:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1031c88:	d0a00c17 	ldw	r2,-32720(gp)
 1031c8c:	10c000c4 	addi	r3,r2,3
 1031c90:	00bfff04 	movi	r2,-4
 1031c94:	1884703a 	and	r2,r3,r2
 1031c98:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1031c9c:	d0e00c17 	ldw	r3,-32720(gp)
 1031ca0:	e0bfff17 	ldw	r2,-4(fp)
 1031ca4:	1887883a 	add	r3,r3,r2
 1031ca8:	00804134 	movhi	r2,260
 1031cac:	10b53004 	addi	r2,r2,-11072
 1031cb0:	10c0062e 	bgeu	r2,r3,1031ccc <sbrk+0x74>
 1031cb4:	e0bffa17 	ldw	r2,-24(fp)
 1031cb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1031cbc:	e0bffd17 	ldw	r2,-12(fp)
 1031cc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1031cc4:	00bfffc4 	movi	r2,-1
 1031cc8:	00000b06 	br	1031cf8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1031ccc:	d0a00c17 	ldw	r2,-32720(gp)
 1031cd0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 1031cd4:	d0e00c17 	ldw	r3,-32720(gp)
 1031cd8:	e0bfff17 	ldw	r2,-4(fp)
 1031cdc:	1885883a 	add	r2,r3,r2
 1031ce0:	d0a00c15 	stw	r2,-32720(gp)
 1031ce4:	e0bffa17 	ldw	r2,-24(fp)
 1031ce8:	e0bffe15 	stw	r2,-8(fp)
 1031cec:	e0bffe17 	ldw	r2,-8(fp)
 1031cf0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1031cf4:	e0bffb17 	ldw	r2,-20(fp)
} 
 1031cf8:	e037883a 	mov	sp,fp
 1031cfc:	df000017 	ldw	fp,0(sp)
 1031d00:	dec00104 	addi	sp,sp,4
 1031d04:	f800283a 	ret

01031d08 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1031d08:	defffd04 	addi	sp,sp,-12
 1031d0c:	dfc00215 	stw	ra,8(sp)
 1031d10:	df000115 	stw	fp,4(sp)
 1031d14:	df000104 	addi	fp,sp,4
 1031d18:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1031d1c:	e13fff17 	ldw	r4,-4(fp)
 1031d20:	1032bd00 	call	1032bd0 <alt_busy_sleep>
}
 1031d24:	e037883a 	mov	sp,fp
 1031d28:	dfc00117 	ldw	ra,4(sp)
 1031d2c:	df000017 	ldw	fp,0(sp)
 1031d30:	dec00204 	addi	sp,sp,8
 1031d34:	f800283a 	ret

01031d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1031d38:	defffe04 	addi	sp,sp,-8
 1031d3c:	dfc00115 	stw	ra,4(sp)
 1031d40:	df000015 	stw	fp,0(sp)
 1031d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1031d48:	008040f4 	movhi	r2,259
 1031d4c:	1098c404 	addi	r2,r2,25360
 1031d50:	10800017 	ldw	r2,0(r2)
 1031d54:	10000526 	beq	r2,zero,1031d6c <alt_get_errno+0x34>
 1031d58:	008040f4 	movhi	r2,259
 1031d5c:	1098c404 	addi	r2,r2,25360
 1031d60:	10800017 	ldw	r2,0(r2)
 1031d64:	103ee83a 	callr	r2
 1031d68:	00000206 	br	1031d74 <alt_get_errno+0x3c>
 1031d6c:	008040f4 	movhi	r2,259
 1031d70:	109f8a04 	addi	r2,r2,32296
}
 1031d74:	e037883a 	mov	sp,fp
 1031d78:	dfc00117 	ldw	ra,4(sp)
 1031d7c:	df000017 	ldw	fp,0(sp)
 1031d80:	dec00204 	addi	sp,sp,8
 1031d84:	f800283a 	ret

01031d88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1031d88:	defff904 	addi	sp,sp,-28
 1031d8c:	dfc00615 	stw	ra,24(sp)
 1031d90:	df000515 	stw	fp,20(sp)
 1031d94:	df000504 	addi	fp,sp,20
 1031d98:	e13ffd15 	stw	r4,-12(fp)
 1031d9c:	e17ffe15 	stw	r5,-8(fp)
 1031da0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031da4:	e0bffd17 	ldw	r2,-12(fp)
 1031da8:	10000616 	blt	r2,zero,1031dc4 <write+0x3c>
 1031dac:	e0bffd17 	ldw	r2,-12(fp)
 1031db0:	10c00324 	muli	r3,r2,12
 1031db4:	008040f4 	movhi	r2,259
 1031db8:	10944104 	addi	r2,r2,20740
 1031dbc:	1885883a 	add	r2,r3,r2
 1031dc0:	00000106 	br	1031dc8 <write+0x40>
 1031dc4:	0005883a 	mov	r2,zero
 1031dc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1031dcc:	e0bffb17 	ldw	r2,-20(fp)
 1031dd0:	10002126 	beq	r2,zero,1031e58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1031dd4:	e0bffb17 	ldw	r2,-20(fp)
 1031dd8:	10800217 	ldw	r2,8(r2)
 1031ddc:	108000cc 	andi	r2,r2,3
 1031de0:	10001826 	beq	r2,zero,1031e44 <write+0xbc>
 1031de4:	e0bffb17 	ldw	r2,-20(fp)
 1031de8:	10800017 	ldw	r2,0(r2)
 1031dec:	10800617 	ldw	r2,24(r2)
 1031df0:	10001426 	beq	r2,zero,1031e44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1031df4:	e0bffb17 	ldw	r2,-20(fp)
 1031df8:	10800017 	ldw	r2,0(r2)
 1031dfc:	10800617 	ldw	r2,24(r2)
 1031e00:	e0ffff17 	ldw	r3,-4(fp)
 1031e04:	e13ffb17 	ldw	r4,-20(fp)
 1031e08:	e17ffe17 	ldw	r5,-8(fp)
 1031e0c:	180d883a 	mov	r6,r3
 1031e10:	103ee83a 	callr	r2
 1031e14:	e0bffc15 	stw	r2,-16(fp)
 1031e18:	e0bffc17 	ldw	r2,-16(fp)
 1031e1c:	1000070e 	bge	r2,zero,1031e3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1031e20:	1031d380 	call	1031d38 <alt_get_errno>
 1031e24:	1007883a 	mov	r3,r2
 1031e28:	e0bffc17 	ldw	r2,-16(fp)
 1031e2c:	0085c83a 	sub	r2,zero,r2
 1031e30:	18800015 	stw	r2,0(r3)
        return -1;
 1031e34:	00bfffc4 	movi	r2,-1
 1031e38:	00000c06 	br	1031e6c <write+0xe4>
      }
      return rval;
 1031e3c:	e0bffc17 	ldw	r2,-16(fp)
 1031e40:	00000a06 	br	1031e6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1031e44:	1031d380 	call	1031d38 <alt_get_errno>
 1031e48:	1007883a 	mov	r3,r2
 1031e4c:	00800344 	movi	r2,13
 1031e50:	18800015 	stw	r2,0(r3)
 1031e54:	00000406 	br	1031e68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1031e58:	1031d380 	call	1031d38 <alt_get_errno>
 1031e5c:	1007883a 	mov	r3,r2
 1031e60:	00801444 	movi	r2,81
 1031e64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1031e68:	00bfffc4 	movi	r2,-1
}
 1031e6c:	e037883a 	mov	sp,fp
 1031e70:	dfc00117 	ldw	ra,4(sp)
 1031e74:	df000017 	ldw	fp,0(sp)
 1031e78:	dec00204 	addi	sp,sp,8
 1031e7c:	f800283a 	ret

01031e80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1031e80:	defffd04 	addi	sp,sp,-12
 1031e84:	dfc00215 	stw	ra,8(sp)
 1031e88:	df000115 	stw	fp,4(sp)
 1031e8c:	df000104 	addi	fp,sp,4
 1031e90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1031e94:	e13fff17 	ldw	r4,-4(fp)
 1031e98:	014040f4 	movhi	r5,259
 1031e9c:	2958c104 	addi	r5,r5,25348
 1031ea0:	1032dbc0 	call	1032dbc <alt_dev_llist_insert>
}
 1031ea4:	e037883a 	mov	sp,fp
 1031ea8:	dfc00117 	ldw	ra,4(sp)
 1031eac:	df000017 	ldw	fp,0(sp)
 1031eb0:	dec00204 	addi	sp,sp,8
 1031eb4:	f800283a 	ret

01031eb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1031eb8:	defffd04 	addi	sp,sp,-12
 1031ebc:	dfc00215 	stw	ra,8(sp)
 1031ec0:	df000115 	stw	fp,4(sp)
 1031ec4:	df000104 	addi	fp,sp,4
 1031ec8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 1031ecc:	10337600 	call	1033760 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1031ed0:	00800044 	movi	r2,1
 1031ed4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1031ed8:	e037883a 	mov	sp,fp
 1031edc:	dfc00117 	ldw	ra,4(sp)
 1031ee0:	df000017 	ldw	fp,0(sp)
 1031ee4:	dec00204 	addi	sp,sp,8
 1031ee8:	f800283a 	ret

01031eec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1031eec:	defffe04 	addi	sp,sp,-8
 1031ef0:	dfc00115 	stw	ra,4(sp)
 1031ef4:	df000015 	stw	fp,0(sp)
 1031ef8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 1031efc:	0009883a 	mov	r4,zero
 1031f00:	000b883a 	mov	r5,zero
 1031f04:	000d883a 	mov	r6,zero
 1031f08:	01c0fa04 	movi	r7,1000
 1031f0c:	1032a080 	call	1032a08 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1031f10:	010040f4 	movhi	r4,259
 1031f14:	2114ab04 	addi	r4,r4,21164
 1031f18:	000b883a 	mov	r5,zero
 1031f1c:	018000c4 	movi	r6,3
 1031f20:	10320ac0 	call	10320ac <altera_avalon_jtag_uart_init>
 1031f24:	010040f4 	movhi	r4,259
 1031f28:	2114a104 	addi	r4,r4,21124
 1031f2c:	1031e800 	call	1031e80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 1031f30:	0001883a 	nop
}
 1031f34:	e037883a 	mov	sp,fp
 1031f38:	dfc00117 	ldw	ra,4(sp)
 1031f3c:	df000017 	ldw	fp,0(sp)
 1031f40:	dec00204 	addi	sp,sp,8
 1031f44:	f800283a 	ret

01031f48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1031f48:	defffa04 	addi	sp,sp,-24
 1031f4c:	dfc00515 	stw	ra,20(sp)
 1031f50:	df000415 	stw	fp,16(sp)
 1031f54:	df000404 	addi	fp,sp,16
 1031f58:	e13ffd15 	stw	r4,-12(fp)
 1031f5c:	e17ffe15 	stw	r5,-8(fp)
 1031f60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1031f64:	e0bffd17 	ldw	r2,-12(fp)
 1031f68:	10800017 	ldw	r2,0(r2)
 1031f6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1031f70:	e0bffc17 	ldw	r2,-16(fp)
 1031f74:	10c00a04 	addi	r3,r2,40
 1031f78:	e0bffd17 	ldw	r2,-12(fp)
 1031f7c:	10800217 	ldw	r2,8(r2)
 1031f80:	1809883a 	mov	r4,r3
 1031f84:	e17ffe17 	ldw	r5,-8(fp)
 1031f88:	e1bfff17 	ldw	r6,-4(fp)
 1031f8c:	100f883a 	mov	r7,r2
 1031f90:	10325700 	call	1032570 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1031f94:	e037883a 	mov	sp,fp
 1031f98:	dfc00117 	ldw	ra,4(sp)
 1031f9c:	df000017 	ldw	fp,0(sp)
 1031fa0:	dec00204 	addi	sp,sp,8
 1031fa4:	f800283a 	ret

01031fa8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1031fa8:	defffa04 	addi	sp,sp,-24
 1031fac:	dfc00515 	stw	ra,20(sp)
 1031fb0:	df000415 	stw	fp,16(sp)
 1031fb4:	df000404 	addi	fp,sp,16
 1031fb8:	e13ffd15 	stw	r4,-12(fp)
 1031fbc:	e17ffe15 	stw	r5,-8(fp)
 1031fc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1031fc4:	e0bffd17 	ldw	r2,-12(fp)
 1031fc8:	10800017 	ldw	r2,0(r2)
 1031fcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1031fd0:	e0bffc17 	ldw	r2,-16(fp)
 1031fd4:	10c00a04 	addi	r3,r2,40
 1031fd8:	e0bffd17 	ldw	r2,-12(fp)
 1031fdc:	10800217 	ldw	r2,8(r2)
 1031fe0:	1809883a 	mov	r4,r3
 1031fe4:	e17ffe17 	ldw	r5,-8(fp)
 1031fe8:	e1bfff17 	ldw	r6,-4(fp)
 1031fec:	100f883a 	mov	r7,r2
 1031ff0:	103277c0 	call	103277c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1031ff4:	e037883a 	mov	sp,fp
 1031ff8:	dfc00117 	ldw	ra,4(sp)
 1031ffc:	df000017 	ldw	fp,0(sp)
 1032000:	dec00204 	addi	sp,sp,8
 1032004:	f800283a 	ret

01032008 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1032008:	defffc04 	addi	sp,sp,-16
 103200c:	dfc00315 	stw	ra,12(sp)
 1032010:	df000215 	stw	fp,8(sp)
 1032014:	df000204 	addi	fp,sp,8
 1032018:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 103201c:	e0bfff17 	ldw	r2,-4(fp)
 1032020:	10800017 	ldw	r2,0(r2)
 1032024:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1032028:	e0bffe17 	ldw	r2,-8(fp)
 103202c:	10c00a04 	addi	r3,r2,40
 1032030:	e0bfff17 	ldw	r2,-4(fp)
 1032034:	10800217 	ldw	r2,8(r2)
 1032038:	1809883a 	mov	r4,r3
 103203c:	100b883a 	mov	r5,r2
 1032040:	103241c0 	call	103241c <altera_avalon_jtag_uart_close>
}
 1032044:	e037883a 	mov	sp,fp
 1032048:	dfc00117 	ldw	ra,4(sp)
 103204c:	df000017 	ldw	fp,0(sp)
 1032050:	dec00204 	addi	sp,sp,8
 1032054:	f800283a 	ret

01032058 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1032058:	defffa04 	addi	sp,sp,-24
 103205c:	dfc00515 	stw	ra,20(sp)
 1032060:	df000415 	stw	fp,16(sp)
 1032064:	df000404 	addi	fp,sp,16
 1032068:	e13ffd15 	stw	r4,-12(fp)
 103206c:	e17ffe15 	stw	r5,-8(fp)
 1032070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1032074:	e0bffd17 	ldw	r2,-12(fp)
 1032078:	10800017 	ldw	r2,0(r2)
 103207c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1032080:	e0bffc17 	ldw	r2,-16(fp)
 1032084:	10800a04 	addi	r2,r2,40
 1032088:	1009883a 	mov	r4,r2
 103208c:	e17ffe17 	ldw	r5,-8(fp)
 1032090:	e1bfff17 	ldw	r6,-4(fp)
 1032094:	10324840 	call	1032484 <altera_avalon_jtag_uart_ioctl>
}
 1032098:	e037883a 	mov	sp,fp
 103209c:	dfc00117 	ldw	ra,4(sp)
 10320a0:	df000017 	ldw	fp,0(sp)
 10320a4:	dec00204 	addi	sp,sp,8
 10320a8:	f800283a 	ret

010320ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10320ac:	defffa04 	addi	sp,sp,-24
 10320b0:	dfc00515 	stw	ra,20(sp)
 10320b4:	df000415 	stw	fp,16(sp)
 10320b8:	df000404 	addi	fp,sp,16
 10320bc:	e13ffd15 	stw	r4,-12(fp)
 10320c0:	e17ffe15 	stw	r5,-8(fp)
 10320c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10320c8:	e0bffd17 	ldw	r2,-12(fp)
 10320cc:	00c00044 	movi	r3,1
 10320d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10320d4:	e0bffd17 	ldw	r2,-12(fp)
 10320d8:	10800017 	ldw	r2,0(r2)
 10320dc:	10800104 	addi	r2,r2,4
 10320e0:	1007883a 	mov	r3,r2
 10320e4:	e0bffd17 	ldw	r2,-12(fp)
 10320e8:	10800817 	ldw	r2,32(r2)
 10320ec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10320f0:	e0fffe17 	ldw	r3,-8(fp)
 10320f4:	e0bfff17 	ldw	r2,-4(fp)
 10320f8:	d8000015 	stw	zero,0(sp)
 10320fc:	1809883a 	mov	r4,r3
 1032100:	100b883a 	mov	r5,r2
 1032104:	018040f4 	movhi	r6,259
 1032108:	31885c04 	addi	r6,r6,8560
 103210c:	e1fffd17 	ldw	r7,-12(fp)
 1032110:	1032f480 	call	1032f48 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1032114:	e0bffd17 	ldw	r2,-12(fp)
 1032118:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 103211c:	e0bffd17 	ldw	r2,-12(fp)
 1032120:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1032124:	008040f4 	movhi	r2,259
 1032128:	109f8f04 	addi	r2,r2,32316
 103212c:	10800017 	ldw	r2,0(r2)
 1032130:	1809883a 	mov	r4,r3
 1032134:	100b883a 	mov	r5,r2
 1032138:	018040f4 	movhi	r6,259
 103213c:	3188dd04 	addi	r6,r6,9076
 1032140:	e1fffd17 	ldw	r7,-12(fp)
 1032144:	1032a900 	call	1032a90 <alt_alarm_start>
 1032148:	1000040e 	bge	r2,zero,103215c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 103214c:	e0fffd17 	ldw	r3,-12(fp)
 1032150:	00a00034 	movhi	r2,32768
 1032154:	10bfffc4 	addi	r2,r2,-1
 1032158:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 103215c:	e037883a 	mov	sp,fp
 1032160:	dfc00117 	ldw	ra,4(sp)
 1032164:	df000017 	ldw	fp,0(sp)
 1032168:	dec00204 	addi	sp,sp,8
 103216c:	f800283a 	ret

01032170 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1032170:	defff804 	addi	sp,sp,-32
 1032174:	df000715 	stw	fp,28(sp)
 1032178:	df000704 	addi	fp,sp,28
 103217c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1032180:	e0bfff17 	ldw	r2,-4(fp)
 1032184:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1032188:	e0bffb17 	ldw	r2,-20(fp)
 103218c:	10800017 	ldw	r2,0(r2)
 1032190:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1032194:	e0bffc17 	ldw	r2,-16(fp)
 1032198:	10800104 	addi	r2,r2,4
 103219c:	10800037 	ldwio	r2,0(r2)
 10321a0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10321a4:	e0bffd17 	ldw	r2,-12(fp)
 10321a8:	1080c00c 	andi	r2,r2,768
 10321ac:	1000011e 	bne	r2,zero,10321b4 <altera_avalon_jtag_uart_irq+0x44>
      break;
 10321b0:	00006c06 	br	1032364 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10321b4:	e0bffd17 	ldw	r2,-12(fp)
 10321b8:	1080400c 	andi	r2,r2,256
 10321bc:	10003426 	beq	r2,zero,1032290 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10321c0:	00800074 	movhi	r2,1
 10321c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10321c8:	e0bffb17 	ldw	r2,-20(fp)
 10321cc:	10800a17 	ldw	r2,40(r2)
 10321d0:	10800044 	addi	r2,r2,1
 10321d4:	1081ffcc 	andi	r2,r2,2047
 10321d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 10321dc:	e0bffb17 	ldw	r2,-20(fp)
 10321e0:	10c00b17 	ldw	r3,44(r2)
 10321e4:	e0bffe17 	ldw	r2,-8(fp)
 10321e8:	1880011e 	bne	r3,r2,10321f0 <altera_avalon_jtag_uart_irq+0x80>
          break;
 10321ec:	00001606 	br	1032248 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10321f0:	e0bffc17 	ldw	r2,-16(fp)
 10321f4:	10800037 	ldwio	r2,0(r2)
 10321f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10321fc:	e0bff917 	ldw	r2,-28(fp)
 1032200:	10a0000c 	andi	r2,r2,32768
 1032204:	1000011e 	bne	r2,zero,103220c <altera_avalon_jtag_uart_irq+0x9c>
          break;
 1032208:	00000f06 	br	1032248 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 103220c:	e0bffb17 	ldw	r2,-20(fp)
 1032210:	10800a17 	ldw	r2,40(r2)
 1032214:	e0fff917 	ldw	r3,-28(fp)
 1032218:	1809883a 	mov	r4,r3
 103221c:	e0fffb17 	ldw	r3,-20(fp)
 1032220:	1885883a 	add	r2,r3,r2
 1032224:	10800e04 	addi	r2,r2,56
 1032228:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 103222c:	e0bffb17 	ldw	r2,-20(fp)
 1032230:	10800a17 	ldw	r2,40(r2)
 1032234:	10800044 	addi	r2,r2,1
 1032238:	10c1ffcc 	andi	r3,r2,2047
 103223c:	e0bffb17 	ldw	r2,-20(fp)
 1032240:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1032244:	003fe006 	br	10321c8 <_gp+0xffff3ee4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1032248:	e0bff917 	ldw	r2,-28(fp)
 103224c:	10bfffec 	andhi	r2,r2,65535
 1032250:	10000f26 	beq	r2,zero,1032290 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1032254:	e0bffb17 	ldw	r2,-20(fp)
 1032258:	10c00817 	ldw	r3,32(r2)
 103225c:	00bfff84 	movi	r2,-2
 1032260:	1886703a 	and	r3,r3,r2
 1032264:	e0bffb17 	ldw	r2,-20(fp)
 1032268:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 103226c:	e0bffc17 	ldw	r2,-16(fp)
 1032270:	10800104 	addi	r2,r2,4
 1032274:	1007883a 	mov	r3,r2
 1032278:	e0bffb17 	ldw	r2,-20(fp)
 103227c:	10800817 	ldw	r2,32(r2)
 1032280:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1032284:	e0bffc17 	ldw	r2,-16(fp)
 1032288:	10800104 	addi	r2,r2,4
 103228c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1032290:	e0bffd17 	ldw	r2,-12(fp)
 1032294:	1080800c 	andi	r2,r2,512
 1032298:	10003126 	beq	r2,zero,1032360 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 103229c:	e0bffd17 	ldw	r2,-12(fp)
 10322a0:	1004d43a 	srli	r2,r2,16
 10322a4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10322a8:	00001406 	br	10322fc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10322ac:	e0bffc17 	ldw	r2,-16(fp)
 10322b0:	e0fffb17 	ldw	r3,-20(fp)
 10322b4:	18c00d17 	ldw	r3,52(r3)
 10322b8:	e13ffb17 	ldw	r4,-20(fp)
 10322bc:	20c7883a 	add	r3,r4,r3
 10322c0:	18c20e04 	addi	r3,r3,2104
 10322c4:	18c00003 	ldbu	r3,0(r3)
 10322c8:	18c03fcc 	andi	r3,r3,255
 10322cc:	18c0201c 	xori	r3,r3,128
 10322d0:	18ffe004 	addi	r3,r3,-128
 10322d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10322d8:	e0bffb17 	ldw	r2,-20(fp)
 10322dc:	10800d17 	ldw	r2,52(r2)
 10322e0:	10800044 	addi	r2,r2,1
 10322e4:	10c1ffcc 	andi	r3,r2,2047
 10322e8:	e0bffb17 	ldw	r2,-20(fp)
 10322ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10322f0:	e0bffa17 	ldw	r2,-24(fp)
 10322f4:	10bfffc4 	addi	r2,r2,-1
 10322f8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10322fc:	e0bffa17 	ldw	r2,-24(fp)
 1032300:	10000526 	beq	r2,zero,1032318 <altera_avalon_jtag_uart_irq+0x1a8>
 1032304:	e0bffb17 	ldw	r2,-20(fp)
 1032308:	10c00d17 	ldw	r3,52(r2)
 103230c:	e0bffb17 	ldw	r2,-20(fp)
 1032310:	10800c17 	ldw	r2,48(r2)
 1032314:	18bfe51e 	bne	r3,r2,10322ac <_gp+0xffff3fc8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1032318:	e0bffa17 	ldw	r2,-24(fp)
 103231c:	10001026 	beq	r2,zero,1032360 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1032320:	e0bffb17 	ldw	r2,-20(fp)
 1032324:	10c00817 	ldw	r3,32(r2)
 1032328:	00bfff44 	movi	r2,-3
 103232c:	1886703a 	and	r3,r3,r2
 1032330:	e0bffb17 	ldw	r2,-20(fp)
 1032334:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1032338:	e0bffb17 	ldw	r2,-20(fp)
 103233c:	10800017 	ldw	r2,0(r2)
 1032340:	10800104 	addi	r2,r2,4
 1032344:	1007883a 	mov	r3,r2
 1032348:	e0bffb17 	ldw	r2,-20(fp)
 103234c:	10800817 	ldw	r2,32(r2)
 1032350:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1032354:	e0bffc17 	ldw	r2,-16(fp)
 1032358:	10800104 	addi	r2,r2,4
 103235c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1032360:	003f8c06 	br	1032194 <_gp+0xffff3eb0>
}
 1032364:	e037883a 	mov	sp,fp
 1032368:	df000017 	ldw	fp,0(sp)
 103236c:	dec00104 	addi	sp,sp,4
 1032370:	f800283a 	ret

01032374 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1032374:	defff804 	addi	sp,sp,-32
 1032378:	df000715 	stw	fp,28(sp)
 103237c:	df000704 	addi	fp,sp,28
 1032380:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1032384:	e0bffb17 	ldw	r2,-20(fp)
 1032388:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 103238c:	e0bff917 	ldw	r2,-28(fp)
 1032390:	10800017 	ldw	r2,0(r2)
 1032394:	10800104 	addi	r2,r2,4
 1032398:	10800037 	ldwio	r2,0(r2)
 103239c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10323a0:	e0bffa17 	ldw	r2,-24(fp)
 10323a4:	1081000c 	andi	r2,r2,1024
 10323a8:	10000b26 	beq	r2,zero,10323d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10323ac:	e0bff917 	ldw	r2,-28(fp)
 10323b0:	10800017 	ldw	r2,0(r2)
 10323b4:	10800104 	addi	r2,r2,4
 10323b8:	1007883a 	mov	r3,r2
 10323bc:	e0bff917 	ldw	r2,-28(fp)
 10323c0:	10800817 	ldw	r2,32(r2)
 10323c4:	10810014 	ori	r2,r2,1024
 10323c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10323cc:	e0bff917 	ldw	r2,-28(fp)
 10323d0:	10000915 	stw	zero,36(r2)
 10323d4:	00000a06 	br	1032400 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10323d8:	e0bff917 	ldw	r2,-28(fp)
 10323dc:	10c00917 	ldw	r3,36(r2)
 10323e0:	00a00034 	movhi	r2,32768
 10323e4:	10bfff04 	addi	r2,r2,-4
 10323e8:	10c00536 	bltu	r2,r3,1032400 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10323ec:	e0bff917 	ldw	r2,-28(fp)
 10323f0:	10800917 	ldw	r2,36(r2)
 10323f4:	10c00044 	addi	r3,r2,1
 10323f8:	e0bff917 	ldw	r2,-28(fp)
 10323fc:	10c00915 	stw	r3,36(r2)
 1032400:	008040f4 	movhi	r2,259
 1032404:	109f8f04 	addi	r2,r2,32316
 1032408:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 103240c:	e037883a 	mov	sp,fp
 1032410:	df000017 	ldw	fp,0(sp)
 1032414:	dec00104 	addi	sp,sp,4
 1032418:	f800283a 	ret

0103241c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 103241c:	defffd04 	addi	sp,sp,-12
 1032420:	df000215 	stw	fp,8(sp)
 1032424:	df000204 	addi	fp,sp,8
 1032428:	e13ffe15 	stw	r4,-8(fp)
 103242c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1032430:	00000506 	br	1032448 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1032434:	e0bfff17 	ldw	r2,-4(fp)
 1032438:	1090000c 	andi	r2,r2,16384
 103243c:	10000226 	beq	r2,zero,1032448 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1032440:	00bffd44 	movi	r2,-11
 1032444:	00000b06 	br	1032474 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1032448:	e0bffe17 	ldw	r2,-8(fp)
 103244c:	10c00d17 	ldw	r3,52(r2)
 1032450:	e0bffe17 	ldw	r2,-8(fp)
 1032454:	10800c17 	ldw	r2,48(r2)
 1032458:	18800526 	beq	r3,r2,1032470 <altera_avalon_jtag_uart_close+0x54>
 103245c:	e0bffe17 	ldw	r2,-8(fp)
 1032460:	10c00917 	ldw	r3,36(r2)
 1032464:	e0bffe17 	ldw	r2,-8(fp)
 1032468:	10800117 	ldw	r2,4(r2)
 103246c:	18bff136 	bltu	r3,r2,1032434 <_gp+0xffff4150>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1032470:	0005883a 	mov	r2,zero
}
 1032474:	e037883a 	mov	sp,fp
 1032478:	df000017 	ldw	fp,0(sp)
 103247c:	dec00104 	addi	sp,sp,4
 1032480:	f800283a 	ret

01032484 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1032484:	defffa04 	addi	sp,sp,-24
 1032488:	df000515 	stw	fp,20(sp)
 103248c:	df000504 	addi	fp,sp,20
 1032490:	e13ffd15 	stw	r4,-12(fp)
 1032494:	e17ffe15 	stw	r5,-8(fp)
 1032498:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 103249c:	00bff9c4 	movi	r2,-25
 10324a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 10324a4:	e0bffe17 	ldw	r2,-8(fp)
 10324a8:	10da8060 	cmpeqi	r3,r2,27137
 10324ac:	1800031e 	bne	r3,zero,10324bc <altera_avalon_jtag_uart_ioctl+0x38>
 10324b0:	109a80a0 	cmpeqi	r2,r2,27138
 10324b4:	1000191e 	bne	r2,zero,103251c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 10324b8:	00002806 	br	103255c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10324bc:	e0bffd17 	ldw	r2,-12(fp)
 10324c0:	10c00117 	ldw	r3,4(r2)
 10324c4:	00a00034 	movhi	r2,32768
 10324c8:	10bfffc4 	addi	r2,r2,-1
 10324cc:	18801226 	beq	r3,r2,1032518 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 10324d0:	e0bfff17 	ldw	r2,-4(fp)
 10324d4:	10800017 	ldw	r2,0(r2)
 10324d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10324dc:	e0bffc17 	ldw	r2,-16(fp)
 10324e0:	10800090 	cmplti	r2,r2,2
 10324e4:	1000061e 	bne	r2,zero,1032500 <altera_avalon_jtag_uart_ioctl+0x7c>
 10324e8:	e0fffc17 	ldw	r3,-16(fp)
 10324ec:	00a00034 	movhi	r2,32768
 10324f0:	10bfffc4 	addi	r2,r2,-1
 10324f4:	18800226 	beq	r3,r2,1032500 <altera_avalon_jtag_uart_ioctl+0x7c>
 10324f8:	e0bffc17 	ldw	r2,-16(fp)
 10324fc:	00000206 	br	1032508 <altera_avalon_jtag_uart_ioctl+0x84>
 1032500:	00a00034 	movhi	r2,32768
 1032504:	10bfff84 	addi	r2,r2,-2
 1032508:	e0fffd17 	ldw	r3,-12(fp)
 103250c:	18800115 	stw	r2,4(r3)
      rc = 0;
 1032510:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1032514:	00001106 	br	103255c <altera_avalon_jtag_uart_ioctl+0xd8>
 1032518:	00001006 	br	103255c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 103251c:	e0bffd17 	ldw	r2,-12(fp)
 1032520:	10c00117 	ldw	r3,4(r2)
 1032524:	00a00034 	movhi	r2,32768
 1032528:	10bfffc4 	addi	r2,r2,-1
 103252c:	18800a26 	beq	r3,r2,1032558 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1032530:	e0bffd17 	ldw	r2,-12(fp)
 1032534:	10c00917 	ldw	r3,36(r2)
 1032538:	e0bffd17 	ldw	r2,-12(fp)
 103253c:	10800117 	ldw	r2,4(r2)
 1032540:	1885803a 	cmpltu	r2,r3,r2
 1032544:	10c03fcc 	andi	r3,r2,255
 1032548:	e0bfff17 	ldw	r2,-4(fp)
 103254c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1032550:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1032554:	00000006 	br	1032558 <altera_avalon_jtag_uart_ioctl+0xd4>
 1032558:	0001883a 	nop

  default:
    break;
  }

  return rc;
 103255c:	e0bffb17 	ldw	r2,-20(fp)
}
 1032560:	e037883a 	mov	sp,fp
 1032564:	df000017 	ldw	fp,0(sp)
 1032568:	dec00104 	addi	sp,sp,4
 103256c:	f800283a 	ret

01032570 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1032570:	defff304 	addi	sp,sp,-52
 1032574:	dfc00c15 	stw	ra,48(sp)
 1032578:	df000b15 	stw	fp,44(sp)
 103257c:	df000b04 	addi	fp,sp,44
 1032580:	e13ffc15 	stw	r4,-16(fp)
 1032584:	e17ffd15 	stw	r5,-12(fp)
 1032588:	e1bffe15 	stw	r6,-8(fp)
 103258c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1032590:	e0bffd17 	ldw	r2,-12(fp)
 1032594:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1032598:	00004906 	br	10326c0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 103259c:	e0bffc17 	ldw	r2,-16(fp)
 10325a0:	10800a17 	ldw	r2,40(r2)
 10325a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10325a8:	e0bffc17 	ldw	r2,-16(fp)
 10325ac:	10800b17 	ldw	r2,44(r2)
 10325b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 10325b4:	e0fff717 	ldw	r3,-36(fp)
 10325b8:	e0bff817 	ldw	r2,-32(fp)
 10325bc:	18800536 	bltu	r3,r2,10325d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10325c0:	e0fff717 	ldw	r3,-36(fp)
 10325c4:	e0bff817 	ldw	r2,-32(fp)
 10325c8:	1885c83a 	sub	r2,r3,r2
 10325cc:	e0bff615 	stw	r2,-40(fp)
 10325d0:	00000406 	br	10325e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10325d4:	00c20004 	movi	r3,2048
 10325d8:	e0bff817 	ldw	r2,-32(fp)
 10325dc:	1885c83a 	sub	r2,r3,r2
 10325e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10325e4:	e0bff617 	ldw	r2,-40(fp)
 10325e8:	1000011e 	bne	r2,zero,10325f0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 10325ec:	00001d06 	br	1032664 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 10325f0:	e0fffe17 	ldw	r3,-8(fp)
 10325f4:	e0bff617 	ldw	r2,-40(fp)
 10325f8:	1880022e 	bgeu	r3,r2,1032604 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10325fc:	e0bffe17 	ldw	r2,-8(fp)
 1032600:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1032604:	e0bff817 	ldw	r2,-32(fp)
 1032608:	10800e04 	addi	r2,r2,56
 103260c:	e0fffc17 	ldw	r3,-16(fp)
 1032610:	1885883a 	add	r2,r3,r2
 1032614:	e13ff517 	ldw	r4,-44(fp)
 1032618:	100b883a 	mov	r5,r2
 103261c:	e1bff617 	ldw	r6,-40(fp)
 1032620:	10297d40 	call	10297d4 <memcpy>
      ptr   += n;
 1032624:	e0fff517 	ldw	r3,-44(fp)
 1032628:	e0bff617 	ldw	r2,-40(fp)
 103262c:	1885883a 	add	r2,r3,r2
 1032630:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1032634:	e0fffe17 	ldw	r3,-8(fp)
 1032638:	e0bff617 	ldw	r2,-40(fp)
 103263c:	1885c83a 	sub	r2,r3,r2
 1032640:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1032644:	e0fff817 	ldw	r3,-32(fp)
 1032648:	e0bff617 	ldw	r2,-40(fp)
 103264c:	1885883a 	add	r2,r3,r2
 1032650:	10c1ffcc 	andi	r3,r2,2047
 1032654:	e0bffc17 	ldw	r2,-16(fp)
 1032658:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 103265c:	e0bffe17 	ldw	r2,-8(fp)
 1032660:	00bfce16 	blt	zero,r2,103259c <_gp+0xffff42b8>

    /* If we read any data then return it */
    if (ptr != buffer)
 1032664:	e0fff517 	ldw	r3,-44(fp)
 1032668:	e0bffd17 	ldw	r2,-12(fp)
 103266c:	18800126 	beq	r3,r2,1032674 <altera_avalon_jtag_uart_read+0x104>
      break;
 1032670:	00001506 	br	10326c8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1032674:	e0bfff17 	ldw	r2,-4(fp)
 1032678:	1090000c 	andi	r2,r2,16384
 103267c:	10000126 	beq	r2,zero,1032684 <altera_avalon_jtag_uart_read+0x114>
      break;
 1032680:	00001106 	br	10326c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1032684:	0001883a 	nop
 1032688:	e0bffc17 	ldw	r2,-16(fp)
 103268c:	10c00a17 	ldw	r3,40(r2)
 1032690:	e0bff717 	ldw	r2,-36(fp)
 1032694:	1880051e 	bne	r3,r2,10326ac <altera_avalon_jtag_uart_read+0x13c>
 1032698:	e0bffc17 	ldw	r2,-16(fp)
 103269c:	10c00917 	ldw	r3,36(r2)
 10326a0:	e0bffc17 	ldw	r2,-16(fp)
 10326a4:	10800117 	ldw	r2,4(r2)
 10326a8:	18bff736 	bltu	r3,r2,1032688 <_gp+0xffff43a4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10326ac:	e0bffc17 	ldw	r2,-16(fp)
 10326b0:	10c00a17 	ldw	r3,40(r2)
 10326b4:	e0bff717 	ldw	r2,-36(fp)
 10326b8:	1880011e 	bne	r3,r2,10326c0 <altera_avalon_jtag_uart_read+0x150>
      break;
 10326bc:	00000206 	br	10326c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10326c0:	e0bffe17 	ldw	r2,-8(fp)
 10326c4:	00bfb516 	blt	zero,r2,103259c <_gp+0xffff42b8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10326c8:	e0fff517 	ldw	r3,-44(fp)
 10326cc:	e0bffd17 	ldw	r2,-12(fp)
 10326d0:	18801826 	beq	r3,r2,1032734 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10326d4:	0005303a 	rdctl	r2,status
 10326d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10326dc:	e0fffa17 	ldw	r3,-24(fp)
 10326e0:	00bfff84 	movi	r2,-2
 10326e4:	1884703a 	and	r2,r3,r2
 10326e8:	1001703a 	wrctl	status,r2
  
  return context;
 10326ec:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10326f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10326f4:	e0bffc17 	ldw	r2,-16(fp)
 10326f8:	10800817 	ldw	r2,32(r2)
 10326fc:	10c00054 	ori	r3,r2,1
 1032700:	e0bffc17 	ldw	r2,-16(fp)
 1032704:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1032708:	e0bffc17 	ldw	r2,-16(fp)
 103270c:	10800017 	ldw	r2,0(r2)
 1032710:	10800104 	addi	r2,r2,4
 1032714:	1007883a 	mov	r3,r2
 1032718:	e0bffc17 	ldw	r2,-16(fp)
 103271c:	10800817 	ldw	r2,32(r2)
 1032720:	18800035 	stwio	r2,0(r3)
 1032724:	e0bff917 	ldw	r2,-28(fp)
 1032728:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 103272c:	e0bffb17 	ldw	r2,-20(fp)
 1032730:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1032734:	e0fff517 	ldw	r3,-44(fp)
 1032738:	e0bffd17 	ldw	r2,-12(fp)
 103273c:	18800426 	beq	r3,r2,1032750 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 1032740:	e0fff517 	ldw	r3,-44(fp)
 1032744:	e0bffd17 	ldw	r2,-12(fp)
 1032748:	1885c83a 	sub	r2,r3,r2
 103274c:	00000606 	br	1032768 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 1032750:	e0bfff17 	ldw	r2,-4(fp)
 1032754:	1090000c 	andi	r2,r2,16384
 1032758:	10000226 	beq	r2,zero,1032764 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 103275c:	00bffd44 	movi	r2,-11
 1032760:	00000106 	br	1032768 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 1032764:	00bffec4 	movi	r2,-5
}
 1032768:	e037883a 	mov	sp,fp
 103276c:	dfc00117 	ldw	ra,4(sp)
 1032770:	df000017 	ldw	fp,0(sp)
 1032774:	dec00204 	addi	sp,sp,8
 1032778:	f800283a 	ret

0103277c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 103277c:	defff304 	addi	sp,sp,-52
 1032780:	dfc00c15 	stw	ra,48(sp)
 1032784:	df000b15 	stw	fp,44(sp)
 1032788:	df000b04 	addi	fp,sp,44
 103278c:	e13ffc15 	stw	r4,-16(fp)
 1032790:	e17ffd15 	stw	r5,-12(fp)
 1032794:	e1bffe15 	stw	r6,-8(fp)
 1032798:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 103279c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10327a0:	e0bffd17 	ldw	r2,-12(fp)
 10327a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10327a8:	00003806 	br	103288c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10327ac:	e0bffc17 	ldw	r2,-16(fp)
 10327b0:	10800c17 	ldw	r2,48(r2)
 10327b4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 10327b8:	e0bffc17 	ldw	r2,-16(fp)
 10327bc:	10800d17 	ldw	r2,52(r2)
 10327c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10327c4:	e0fff817 	ldw	r3,-32(fp)
 10327c8:	e0bff517 	ldw	r2,-44(fp)
 10327cc:	1880062e 	bgeu	r3,r2,10327e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10327d0:	e0fff517 	ldw	r3,-44(fp)
 10327d4:	e0bff817 	ldw	r2,-32(fp)
 10327d8:	1885c83a 	sub	r2,r3,r2
 10327dc:	10bfffc4 	addi	r2,r2,-1
 10327e0:	e0bff615 	stw	r2,-40(fp)
 10327e4:	00000b06 	br	1032814 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10327e8:	e0bff517 	ldw	r2,-44(fp)
 10327ec:	10000526 	beq	r2,zero,1032804 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10327f0:	00c20004 	movi	r3,2048
 10327f4:	e0bff817 	ldw	r2,-32(fp)
 10327f8:	1885c83a 	sub	r2,r3,r2
 10327fc:	e0bff615 	stw	r2,-40(fp)
 1032800:	00000406 	br	1032814 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1032804:	00c1ffc4 	movi	r3,2047
 1032808:	e0bff817 	ldw	r2,-32(fp)
 103280c:	1885c83a 	sub	r2,r3,r2
 1032810:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1032814:	e0bff617 	ldw	r2,-40(fp)
 1032818:	1000011e 	bne	r2,zero,1032820 <altera_avalon_jtag_uart_write+0xa4>
        break;
 103281c:	00001d06 	br	1032894 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 1032820:	e0fffe17 	ldw	r3,-8(fp)
 1032824:	e0bff617 	ldw	r2,-40(fp)
 1032828:	1880022e 	bgeu	r3,r2,1032834 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 103282c:	e0bffe17 	ldw	r2,-8(fp)
 1032830:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1032834:	e0bff817 	ldw	r2,-32(fp)
 1032838:	10820e04 	addi	r2,r2,2104
 103283c:	e0fffc17 	ldw	r3,-16(fp)
 1032840:	1885883a 	add	r2,r3,r2
 1032844:	1009883a 	mov	r4,r2
 1032848:	e17ffd17 	ldw	r5,-12(fp)
 103284c:	e1bff617 	ldw	r6,-40(fp)
 1032850:	10297d40 	call	10297d4 <memcpy>
      ptr   += n;
 1032854:	e0fffd17 	ldw	r3,-12(fp)
 1032858:	e0bff617 	ldw	r2,-40(fp)
 103285c:	1885883a 	add	r2,r3,r2
 1032860:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1032864:	e0fffe17 	ldw	r3,-8(fp)
 1032868:	e0bff617 	ldw	r2,-40(fp)
 103286c:	1885c83a 	sub	r2,r3,r2
 1032870:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1032874:	e0fff817 	ldw	r3,-32(fp)
 1032878:	e0bff617 	ldw	r2,-40(fp)
 103287c:	1885883a 	add	r2,r3,r2
 1032880:	10c1ffcc 	andi	r3,r2,2047
 1032884:	e0bffc17 	ldw	r2,-16(fp)
 1032888:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 103288c:	e0bffe17 	ldw	r2,-8(fp)
 1032890:	00bfc616 	blt	zero,r2,10327ac <_gp+0xffff44c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032894:	0005303a 	rdctl	r2,status
 1032898:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 103289c:	e0fffa17 	ldw	r3,-24(fp)
 10328a0:	00bfff84 	movi	r2,-2
 10328a4:	1884703a 	and	r2,r3,r2
 10328a8:	1001703a 	wrctl	status,r2
  
  return context;
 10328ac:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10328b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10328b4:	e0bffc17 	ldw	r2,-16(fp)
 10328b8:	10800817 	ldw	r2,32(r2)
 10328bc:	10c00094 	ori	r3,r2,2
 10328c0:	e0bffc17 	ldw	r2,-16(fp)
 10328c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10328c8:	e0bffc17 	ldw	r2,-16(fp)
 10328cc:	10800017 	ldw	r2,0(r2)
 10328d0:	10800104 	addi	r2,r2,4
 10328d4:	1007883a 	mov	r3,r2
 10328d8:	e0bffc17 	ldw	r2,-16(fp)
 10328dc:	10800817 	ldw	r2,32(r2)
 10328e0:	18800035 	stwio	r2,0(r3)
 10328e4:	e0bff917 	ldw	r2,-28(fp)
 10328e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10328ec:	e0bffb17 	ldw	r2,-20(fp)
 10328f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10328f4:	e0bffe17 	ldw	r2,-8(fp)
 10328f8:	0080120e 	bge	zero,r2,1032944 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 10328fc:	e0bfff17 	ldw	r2,-4(fp)
 1032900:	1090000c 	andi	r2,r2,16384
 1032904:	10000126 	beq	r2,zero,103290c <altera_avalon_jtag_uart_write+0x190>
        break;
 1032908:	00001006 	br	103294c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 103290c:	0001883a 	nop
 1032910:	e0bffc17 	ldw	r2,-16(fp)
 1032914:	10c00d17 	ldw	r3,52(r2)
 1032918:	e0bff517 	ldw	r2,-44(fp)
 103291c:	1880051e 	bne	r3,r2,1032934 <altera_avalon_jtag_uart_write+0x1b8>
 1032920:	e0bffc17 	ldw	r2,-16(fp)
 1032924:	10c00917 	ldw	r3,36(r2)
 1032928:	e0bffc17 	ldw	r2,-16(fp)
 103292c:	10800117 	ldw	r2,4(r2)
 1032930:	18bff736 	bltu	r3,r2,1032910 <_gp+0xffff462c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1032934:	e0bffc17 	ldw	r2,-16(fp)
 1032938:	10800917 	ldw	r2,36(r2)
 103293c:	10000126 	beq	r2,zero,1032944 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 1032940:	00000206 	br	103294c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 1032944:	e0bffe17 	ldw	r2,-8(fp)
 1032948:	00bf9716 	blt	zero,r2,10327a8 <_gp+0xffff44c4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 103294c:	e0fffd17 	ldw	r3,-12(fp)
 1032950:	e0bff717 	ldw	r2,-36(fp)
 1032954:	18800426 	beq	r3,r2,1032968 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 1032958:	e0fffd17 	ldw	r3,-12(fp)
 103295c:	e0bff717 	ldw	r2,-36(fp)
 1032960:	1885c83a 	sub	r2,r3,r2
 1032964:	00000606 	br	1032980 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 1032968:	e0bfff17 	ldw	r2,-4(fp)
 103296c:	1090000c 	andi	r2,r2,16384
 1032970:	10000226 	beq	r2,zero,103297c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 1032974:	00bffd44 	movi	r2,-11
 1032978:	00000106 	br	1032980 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 103297c:	00bffec4 	movi	r2,-5
}
 1032980:	e037883a 	mov	sp,fp
 1032984:	dfc00117 	ldw	ra,4(sp)
 1032988:	df000017 	ldw	fp,0(sp)
 103298c:	dec00204 	addi	sp,sp,8
 1032990:	f800283a 	ret

01032994 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1032994:	defffa04 	addi	sp,sp,-24
 1032998:	dfc00515 	stw	ra,20(sp)
 103299c:	df000415 	stw	fp,16(sp)
 10329a0:	df000404 	addi	fp,sp,16
 10329a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10329a8:	0007883a 	mov	r3,zero
 10329ac:	e0bfff17 	ldw	r2,-4(fp)
 10329b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10329b4:	e0bfff17 	ldw	r2,-4(fp)
 10329b8:	10800104 	addi	r2,r2,4
 10329bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10329c0:	0005303a 	rdctl	r2,status
 10329c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10329c8:	e0fffd17 	ldw	r3,-12(fp)
 10329cc:	00bfff84 	movi	r2,-2
 10329d0:	1884703a 	and	r2,r3,r2
 10329d4:	1001703a 	wrctl	status,r2
  
  return context;
 10329d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10329dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10329e0:	103365c0 	call	103365c <alt_tick>
 10329e4:	e0bffc17 	ldw	r2,-16(fp)
 10329e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10329ec:	e0bffe17 	ldw	r2,-8(fp)
 10329f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10329f4:	e037883a 	mov	sp,fp
 10329f8:	dfc00117 	ldw	ra,4(sp)
 10329fc:	df000017 	ldw	fp,0(sp)
 1032a00:	dec00204 	addi	sp,sp,8
 1032a04:	f800283a 	ret

01032a08 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1032a08:	defff804 	addi	sp,sp,-32
 1032a0c:	dfc00715 	stw	ra,28(sp)
 1032a10:	df000615 	stw	fp,24(sp)
 1032a14:	df000604 	addi	fp,sp,24
 1032a18:	e13ffc15 	stw	r4,-16(fp)
 1032a1c:	e17ffd15 	stw	r5,-12(fp)
 1032a20:	e1bffe15 	stw	r6,-8(fp)
 1032a24:	e1ffff15 	stw	r7,-4(fp)
 1032a28:	e0bfff17 	ldw	r2,-4(fp)
 1032a2c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1032a30:	008040f4 	movhi	r2,259
 1032a34:	109f8f04 	addi	r2,r2,32316
 1032a38:	10800017 	ldw	r2,0(r2)
 1032a3c:	1000041e 	bne	r2,zero,1032a50 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 1032a40:	008040f4 	movhi	r2,259
 1032a44:	109f8f04 	addi	r2,r2,32316
 1032a48:	e0fffb17 	ldw	r3,-20(fp)
 1032a4c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1032a50:	e0bffc17 	ldw	r2,-16(fp)
 1032a54:	10800104 	addi	r2,r2,4
 1032a58:	00c001c4 	movi	r3,7
 1032a5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1032a60:	d8000015 	stw	zero,0(sp)
 1032a64:	e13ffd17 	ldw	r4,-12(fp)
 1032a68:	e17ffe17 	ldw	r5,-8(fp)
 1032a6c:	018040f4 	movhi	r6,259
 1032a70:	318a6504 	addi	r6,r6,10644
 1032a74:	e1fffc17 	ldw	r7,-16(fp)
 1032a78:	1032f480 	call	1032f48 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1032a7c:	e037883a 	mov	sp,fp
 1032a80:	dfc00117 	ldw	ra,4(sp)
 1032a84:	df000017 	ldw	fp,0(sp)
 1032a88:	dec00204 	addi	sp,sp,8
 1032a8c:	f800283a 	ret

01032a90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1032a90:	defff504 	addi	sp,sp,-44
 1032a94:	df000a15 	stw	fp,40(sp)
 1032a98:	df000a04 	addi	fp,sp,40
 1032a9c:	e13ffc15 	stw	r4,-16(fp)
 1032aa0:	e17ffd15 	stw	r5,-12(fp)
 1032aa4:	e1bffe15 	stw	r6,-8(fp)
 1032aa8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1032aac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1032ab0:	008040f4 	movhi	r2,259
 1032ab4:	109f8f04 	addi	r2,r2,32316
 1032ab8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1032abc:	10003f26 	beq	r2,zero,1032bbc <alt_alarm_start+0x12c>
  {
    if (alarm)
 1032ac0:	e0bffc17 	ldw	r2,-16(fp)
 1032ac4:	10003b26 	beq	r2,zero,1032bb4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 1032ac8:	e0bffc17 	ldw	r2,-16(fp)
 1032acc:	e0fffe17 	ldw	r3,-8(fp)
 1032ad0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1032ad4:	e0bffc17 	ldw	r2,-16(fp)
 1032ad8:	e0ffff17 	ldw	r3,-4(fp)
 1032adc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032ae0:	0005303a 	rdctl	r2,status
 1032ae4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032ae8:	e0fff817 	ldw	r3,-32(fp)
 1032aec:	00bfff84 	movi	r2,-2
 1032af0:	1884703a 	and	r2,r3,r2
 1032af4:	1001703a 	wrctl	status,r2
  
  return context;
 1032af8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1032afc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1032b00:	008040f4 	movhi	r2,259
 1032b04:	109f9004 	addi	r2,r2,32320
 1032b08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1032b0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1032b10:	e0fffd17 	ldw	r3,-12(fp)
 1032b14:	e0bff617 	ldw	r2,-40(fp)
 1032b18:	1885883a 	add	r2,r3,r2
 1032b1c:	10c00044 	addi	r3,r2,1
 1032b20:	e0bffc17 	ldw	r2,-16(fp)
 1032b24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1032b28:	e0bffc17 	ldw	r2,-16(fp)
 1032b2c:	10c00217 	ldw	r3,8(r2)
 1032b30:	e0bff617 	ldw	r2,-40(fp)
 1032b34:	1880042e 	bgeu	r3,r2,1032b48 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 1032b38:	e0bffc17 	ldw	r2,-16(fp)
 1032b3c:	00c00044 	movi	r3,1
 1032b40:	10c00405 	stb	r3,16(r2)
 1032b44:	00000206 	br	1032b50 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 1032b48:	e0bffc17 	ldw	r2,-16(fp)
 1032b4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1032b50:	e0fffc17 	ldw	r3,-16(fp)
 1032b54:	008040f4 	movhi	r2,259
 1032b58:	1098c704 	addi	r2,r2,25372
 1032b5c:	e0bff915 	stw	r2,-28(fp)
 1032b60:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1032b64:	e0bffa17 	ldw	r2,-24(fp)
 1032b68:	e0fff917 	ldw	r3,-28(fp)
 1032b6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1032b70:	e0bff917 	ldw	r2,-28(fp)
 1032b74:	10c00017 	ldw	r3,0(r2)
 1032b78:	e0bffa17 	ldw	r2,-24(fp)
 1032b7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1032b80:	e0bff917 	ldw	r2,-28(fp)
 1032b84:	10800017 	ldw	r2,0(r2)
 1032b88:	e0fffa17 	ldw	r3,-24(fp)
 1032b8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1032b90:	e0bff917 	ldw	r2,-28(fp)
 1032b94:	e0fffa17 	ldw	r3,-24(fp)
 1032b98:	10c00015 	stw	r3,0(r2)
 1032b9c:	e0bff717 	ldw	r2,-36(fp)
 1032ba0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032ba4:	e0bffb17 	ldw	r2,-20(fp)
 1032ba8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1032bac:	0005883a 	mov	r2,zero
 1032bb0:	00000306 	br	1032bc0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 1032bb4:	00bffa84 	movi	r2,-22
 1032bb8:	00000106 	br	1032bc0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 1032bbc:	00bfde84 	movi	r2,-134
  }
}
 1032bc0:	e037883a 	mov	sp,fp
 1032bc4:	df000017 	ldw	fp,0(sp)
 1032bc8:	dec00104 	addi	sp,sp,4
 1032bcc:	f800283a 	ret

01032bd0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1032bd0:	defffa04 	addi	sp,sp,-24
 1032bd4:	dfc00515 	stw	ra,20(sp)
 1032bd8:	df000415 	stw	fp,16(sp)
 1032bdc:	df000404 	addi	fp,sp,16
 1032be0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1032be4:	008000c4 	movi	r2,3
 1032be8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1032bec:	e0fffd17 	ldw	r3,-12(fp)
 1032bf0:	008003f4 	movhi	r2,15
 1032bf4:	10909004 	addi	r2,r2,16960
 1032bf8:	1885383a 	mul	r2,r3,r2
 1032bfc:	01017db4 	movhi	r4,1526
 1032c00:	21384004 	addi	r4,r4,-7936
 1032c04:	100b883a 	mov	r5,r2
 1032c08:	1021eb40 	call	1021eb4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1032c0c:	01200034 	movhi	r4,32768
 1032c10:	213fffc4 	addi	r4,r4,-1
 1032c14:	100b883a 	mov	r5,r2
 1032c18:	1021eb40 	call	1021eb4 <__udivsi3>
 1032c1c:	e13fff17 	ldw	r4,-4(fp)
 1032c20:	100b883a 	mov	r5,r2
 1032c24:	1021eb40 	call	1021eb4 <__udivsi3>
 1032c28:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1032c2c:	e0bffe17 	ldw	r2,-8(fp)
 1032c30:	10002a26 	beq	r2,zero,1032cdc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1032c34:	e03ffc15 	stw	zero,-16(fp)
 1032c38:	00001706 	br	1032c98 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1032c3c:	00a00034 	movhi	r2,32768
 1032c40:	10bfffc4 	addi	r2,r2,-1
 1032c44:	10bfffc4 	addi	r2,r2,-1
 1032c48:	103ffe1e 	bne	r2,zero,1032c44 <_gp+0xffff4960>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1032c4c:	e0fffd17 	ldw	r3,-12(fp)
 1032c50:	008003f4 	movhi	r2,15
 1032c54:	10909004 	addi	r2,r2,16960
 1032c58:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1032c5c:	01017db4 	movhi	r4,1526
 1032c60:	21384004 	addi	r4,r4,-7936
 1032c64:	100b883a 	mov	r5,r2
 1032c68:	1021eb40 	call	1021eb4 <__udivsi3>
 1032c6c:	01200034 	movhi	r4,32768
 1032c70:	213fffc4 	addi	r4,r4,-1
 1032c74:	100b883a 	mov	r5,r2
 1032c78:	1021eb40 	call	1021eb4 <__udivsi3>
 1032c7c:	1007883a 	mov	r3,r2
 1032c80:	e0bfff17 	ldw	r2,-4(fp)
 1032c84:	10c5c83a 	sub	r2,r2,r3
 1032c88:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1032c8c:	e0bffc17 	ldw	r2,-16(fp)
 1032c90:	10800044 	addi	r2,r2,1
 1032c94:	e0bffc15 	stw	r2,-16(fp)
 1032c98:	e0fffc17 	ldw	r3,-16(fp)
 1032c9c:	e0bffe17 	ldw	r2,-8(fp)
 1032ca0:	18bfe616 	blt	r3,r2,1032c3c <_gp+0xffff4958>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1032ca4:	e0fffd17 	ldw	r3,-12(fp)
 1032ca8:	008003f4 	movhi	r2,15
 1032cac:	10909004 	addi	r2,r2,16960
 1032cb0:	1885383a 	mul	r2,r3,r2
 1032cb4:	01017db4 	movhi	r4,1526
 1032cb8:	21384004 	addi	r4,r4,-7936
 1032cbc:	100b883a 	mov	r5,r2
 1032cc0:	1021eb40 	call	1021eb4 <__udivsi3>
 1032cc4:	1007883a 	mov	r3,r2
 1032cc8:	e0bfff17 	ldw	r2,-4(fp)
 1032ccc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1032cd0:	10bfffc4 	addi	r2,r2,-1
 1032cd4:	103ffe1e 	bne	r2,zero,1032cd0 <_gp+0xffff49ec>
 1032cd8:	00000d06 	br	1032d10 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1032cdc:	e0fffd17 	ldw	r3,-12(fp)
 1032ce0:	008003f4 	movhi	r2,15
 1032ce4:	10909004 	addi	r2,r2,16960
 1032ce8:	1885383a 	mul	r2,r3,r2
 1032cec:	01017db4 	movhi	r4,1526
 1032cf0:	21384004 	addi	r4,r4,-7936
 1032cf4:	100b883a 	mov	r5,r2
 1032cf8:	1021eb40 	call	1021eb4 <__udivsi3>
 1032cfc:	1007883a 	mov	r3,r2
 1032d00:	e0bfff17 	ldw	r2,-4(fp)
 1032d04:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1032d08:	10bfffc4 	addi	r2,r2,-1
 1032d0c:	00bffe16 	blt	zero,r2,1032d08 <_gp+0xffff4a24>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1032d10:	0005883a 	mov	r2,zero
}
 1032d14:	e037883a 	mov	sp,fp
 1032d18:	dfc00117 	ldw	ra,4(sp)
 1032d1c:	df000017 	ldw	fp,0(sp)
 1032d20:	dec00204 	addi	sp,sp,8
 1032d24:	f800283a 	ret

01032d28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1032d28:	defffe04 	addi	sp,sp,-8
 1032d2c:	df000115 	stw	fp,4(sp)
 1032d30:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1032d34:	e03fff15 	stw	zero,-4(fp)
 1032d38:	00000506 	br	1032d50 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1032d3c:	e0bfff17 	ldw	r2,-4(fp)
 1032d40:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1032d44:	e0bfff17 	ldw	r2,-4(fp)
 1032d48:	10800804 	addi	r2,r2,32
 1032d4c:	e0bfff15 	stw	r2,-4(fp)
 1032d50:	e0bfff17 	ldw	r2,-4(fp)
 1032d54:	10820030 	cmpltui	r2,r2,2048
 1032d58:	103ff81e 	bne	r2,zero,1032d3c <_gp+0xffff4a58>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1032d5c:	e037883a 	mov	sp,fp
 1032d60:	df000017 	ldw	fp,0(sp)
 1032d64:	dec00104 	addi	sp,sp,4
 1032d68:	f800283a 	ret

01032d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1032d6c:	defffe04 	addi	sp,sp,-8
 1032d70:	dfc00115 	stw	ra,4(sp)
 1032d74:	df000015 	stw	fp,0(sp)
 1032d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1032d7c:	008040f4 	movhi	r2,259
 1032d80:	1098c404 	addi	r2,r2,25360
 1032d84:	10800017 	ldw	r2,0(r2)
 1032d88:	10000526 	beq	r2,zero,1032da0 <alt_get_errno+0x34>
 1032d8c:	008040f4 	movhi	r2,259
 1032d90:	1098c404 	addi	r2,r2,25360
 1032d94:	10800017 	ldw	r2,0(r2)
 1032d98:	103ee83a 	callr	r2
 1032d9c:	00000206 	br	1032da8 <alt_get_errno+0x3c>
 1032da0:	008040f4 	movhi	r2,259
 1032da4:	109f8a04 	addi	r2,r2,32296
}
 1032da8:	e037883a 	mov	sp,fp
 1032dac:	dfc00117 	ldw	ra,4(sp)
 1032db0:	df000017 	ldw	fp,0(sp)
 1032db4:	dec00204 	addi	sp,sp,8
 1032db8:	f800283a 	ret

01032dbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1032dbc:	defffa04 	addi	sp,sp,-24
 1032dc0:	dfc00515 	stw	ra,20(sp)
 1032dc4:	df000415 	stw	fp,16(sp)
 1032dc8:	df000404 	addi	fp,sp,16
 1032dcc:	e13ffe15 	stw	r4,-8(fp)
 1032dd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1032dd4:	e0bffe17 	ldw	r2,-8(fp)
 1032dd8:	10000326 	beq	r2,zero,1032de8 <alt_dev_llist_insert+0x2c>
 1032ddc:	e0bffe17 	ldw	r2,-8(fp)
 1032de0:	10800217 	ldw	r2,8(r2)
 1032de4:	1000061e 	bne	r2,zero,1032e00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1032de8:	1032d6c0 	call	1032d6c <alt_get_errno>
 1032dec:	1007883a 	mov	r3,r2
 1032df0:	00800584 	movi	r2,22
 1032df4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1032df8:	00bffa84 	movi	r2,-22
 1032dfc:	00001306 	br	1032e4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1032e00:	e0bffe17 	ldw	r2,-8(fp)
 1032e04:	e0ffff17 	ldw	r3,-4(fp)
 1032e08:	e0fffc15 	stw	r3,-16(fp)
 1032e0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1032e10:	e0bffd17 	ldw	r2,-12(fp)
 1032e14:	e0fffc17 	ldw	r3,-16(fp)
 1032e18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1032e1c:	e0bffc17 	ldw	r2,-16(fp)
 1032e20:	10c00017 	ldw	r3,0(r2)
 1032e24:	e0bffd17 	ldw	r2,-12(fp)
 1032e28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1032e2c:	e0bffc17 	ldw	r2,-16(fp)
 1032e30:	10800017 	ldw	r2,0(r2)
 1032e34:	e0fffd17 	ldw	r3,-12(fp)
 1032e38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1032e3c:	e0bffc17 	ldw	r2,-16(fp)
 1032e40:	e0fffd17 	ldw	r3,-12(fp)
 1032e44:	10c00015 	stw	r3,0(r2)

  return 0;  
 1032e48:	0005883a 	mov	r2,zero
}
 1032e4c:	e037883a 	mov	sp,fp
 1032e50:	dfc00117 	ldw	ra,4(sp)
 1032e54:	df000017 	ldw	fp,0(sp)
 1032e58:	dec00204 	addi	sp,sp,8
 1032e5c:	f800283a 	ret

01032e60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1032e60:	defffd04 	addi	sp,sp,-12
 1032e64:	dfc00215 	stw	ra,8(sp)
 1032e68:	df000115 	stw	fp,4(sp)
 1032e6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1032e70:	008040f4 	movhi	r2,259
 1032e74:	108fa804 	addi	r2,r2,16032
 1032e78:	e0bfff15 	stw	r2,-4(fp)
 1032e7c:	00000606 	br	1032e98 <_do_ctors+0x38>
        (*ctor) (); 
 1032e80:	e0bfff17 	ldw	r2,-4(fp)
 1032e84:	10800017 	ldw	r2,0(r2)
 1032e88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1032e8c:	e0bfff17 	ldw	r2,-4(fp)
 1032e90:	10bfff04 	addi	r2,r2,-4
 1032e94:	e0bfff15 	stw	r2,-4(fp)
 1032e98:	e0ffff17 	ldw	r3,-4(fp)
 1032e9c:	008040f4 	movhi	r2,259
 1032ea0:	108fa904 	addi	r2,r2,16036
 1032ea4:	18bff62e 	bgeu	r3,r2,1032e80 <_gp+0xffff4b9c>
        (*ctor) (); 
}
 1032ea8:	e037883a 	mov	sp,fp
 1032eac:	dfc00117 	ldw	ra,4(sp)
 1032eb0:	df000017 	ldw	fp,0(sp)
 1032eb4:	dec00204 	addi	sp,sp,8
 1032eb8:	f800283a 	ret

01032ebc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1032ebc:	defffd04 	addi	sp,sp,-12
 1032ec0:	dfc00215 	stw	ra,8(sp)
 1032ec4:	df000115 	stw	fp,4(sp)
 1032ec8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1032ecc:	008040f4 	movhi	r2,259
 1032ed0:	108fa804 	addi	r2,r2,16032
 1032ed4:	e0bfff15 	stw	r2,-4(fp)
 1032ed8:	00000606 	br	1032ef4 <_do_dtors+0x38>
        (*dtor) (); 
 1032edc:	e0bfff17 	ldw	r2,-4(fp)
 1032ee0:	10800017 	ldw	r2,0(r2)
 1032ee4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1032ee8:	e0bfff17 	ldw	r2,-4(fp)
 1032eec:	10bfff04 	addi	r2,r2,-4
 1032ef0:	e0bfff15 	stw	r2,-4(fp)
 1032ef4:	e0ffff17 	ldw	r3,-4(fp)
 1032ef8:	008040f4 	movhi	r2,259
 1032efc:	108fa904 	addi	r2,r2,16036
 1032f00:	18bff62e 	bgeu	r3,r2,1032edc <_gp+0xffff4bf8>
        (*dtor) (); 
}
 1032f04:	e037883a 	mov	sp,fp
 1032f08:	dfc00117 	ldw	ra,4(sp)
 1032f0c:	df000017 	ldw	fp,0(sp)
 1032f10:	dec00204 	addi	sp,sp,8
 1032f14:	f800283a 	ret

01032f18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1032f18:	defffe04 	addi	sp,sp,-8
 1032f1c:	dfc00115 	stw	ra,4(sp)
 1032f20:	df000015 	stw	fp,0(sp)
 1032f24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1032f28:	0009883a 	mov	r4,zero
 1032f2c:	01440004 	movi	r5,4096
 1032f30:	10339d80 	call	10339d8 <alt_icache_flush>
#endif
}
 1032f34:	e037883a 	mov	sp,fp
 1032f38:	dfc00117 	ldw	ra,4(sp)
 1032f3c:	df000017 	ldw	fp,0(sp)
 1032f40:	dec00204 	addi	sp,sp,8
 1032f44:	f800283a 	ret

01032f48 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1032f48:	defff904 	addi	sp,sp,-28
 1032f4c:	dfc00615 	stw	ra,24(sp)
 1032f50:	df000515 	stw	fp,20(sp)
 1032f54:	df000504 	addi	fp,sp,20
 1032f58:	e13ffc15 	stw	r4,-16(fp)
 1032f5c:	e17ffd15 	stw	r5,-12(fp)
 1032f60:	e1bffe15 	stw	r6,-8(fp)
 1032f64:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1032f68:	e0800217 	ldw	r2,8(fp)
 1032f6c:	d8800015 	stw	r2,0(sp)
 1032f70:	e13ffc17 	ldw	r4,-16(fp)
 1032f74:	e17ffd17 	ldw	r5,-12(fp)
 1032f78:	e1bffe17 	ldw	r6,-8(fp)
 1032f7c:	e1ffff17 	ldw	r7,-4(fp)
 1032f80:	10331280 	call	1033128 <alt_iic_isr_register>
}  
 1032f84:	e037883a 	mov	sp,fp
 1032f88:	dfc00117 	ldw	ra,4(sp)
 1032f8c:	df000017 	ldw	fp,0(sp)
 1032f90:	dec00204 	addi	sp,sp,8
 1032f94:	f800283a 	ret

01032f98 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1032f98:	defff904 	addi	sp,sp,-28
 1032f9c:	df000615 	stw	fp,24(sp)
 1032fa0:	df000604 	addi	fp,sp,24
 1032fa4:	e13ffe15 	stw	r4,-8(fp)
 1032fa8:	e17fff15 	stw	r5,-4(fp)
 1032fac:	e0bfff17 	ldw	r2,-4(fp)
 1032fb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032fb4:	0005303a 	rdctl	r2,status
 1032fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032fbc:	e0fffb17 	ldw	r3,-20(fp)
 1032fc0:	00bfff84 	movi	r2,-2
 1032fc4:	1884703a 	and	r2,r3,r2
 1032fc8:	1001703a 	wrctl	status,r2
  
  return context;
 1032fcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1032fd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1032fd4:	e0bffa17 	ldw	r2,-24(fp)
 1032fd8:	00c00044 	movi	r3,1
 1032fdc:	1884983a 	sll	r2,r3,r2
 1032fe0:	1007883a 	mov	r3,r2
 1032fe4:	008040f4 	movhi	r2,259
 1032fe8:	109f8e04 	addi	r2,r2,32312
 1032fec:	10800017 	ldw	r2,0(r2)
 1032ff0:	1886b03a 	or	r3,r3,r2
 1032ff4:	008040f4 	movhi	r2,259
 1032ff8:	109f8e04 	addi	r2,r2,32312
 1032ffc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1033000:	008040f4 	movhi	r2,259
 1033004:	109f8e04 	addi	r2,r2,32312
 1033008:	10800017 	ldw	r2,0(r2)
 103300c:	100170fa 	wrctl	ienable,r2
 1033010:	e0bffc17 	ldw	r2,-16(fp)
 1033014:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1033018:	e0bffd17 	ldw	r2,-12(fp)
 103301c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1033020:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1033024:	0001883a 	nop
}
 1033028:	e037883a 	mov	sp,fp
 103302c:	df000017 	ldw	fp,0(sp)
 1033030:	dec00104 	addi	sp,sp,4
 1033034:	f800283a 	ret

01033038 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1033038:	defff904 	addi	sp,sp,-28
 103303c:	df000615 	stw	fp,24(sp)
 1033040:	df000604 	addi	fp,sp,24
 1033044:	e13ffe15 	stw	r4,-8(fp)
 1033048:	e17fff15 	stw	r5,-4(fp)
 103304c:	e0bfff17 	ldw	r2,-4(fp)
 1033050:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1033054:	0005303a 	rdctl	r2,status
 1033058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 103305c:	e0fffb17 	ldw	r3,-20(fp)
 1033060:	00bfff84 	movi	r2,-2
 1033064:	1884703a 	and	r2,r3,r2
 1033068:	1001703a 	wrctl	status,r2
  
  return context;
 103306c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1033070:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1033074:	e0bffa17 	ldw	r2,-24(fp)
 1033078:	00c00044 	movi	r3,1
 103307c:	1884983a 	sll	r2,r3,r2
 1033080:	0084303a 	nor	r2,zero,r2
 1033084:	1007883a 	mov	r3,r2
 1033088:	008040f4 	movhi	r2,259
 103308c:	109f8e04 	addi	r2,r2,32312
 1033090:	10800017 	ldw	r2,0(r2)
 1033094:	1886703a 	and	r3,r3,r2
 1033098:	008040f4 	movhi	r2,259
 103309c:	109f8e04 	addi	r2,r2,32312
 10330a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10330a4:	008040f4 	movhi	r2,259
 10330a8:	109f8e04 	addi	r2,r2,32312
 10330ac:	10800017 	ldw	r2,0(r2)
 10330b0:	100170fa 	wrctl	ienable,r2
 10330b4:	e0bffc17 	ldw	r2,-16(fp)
 10330b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10330bc:	e0bffd17 	ldw	r2,-12(fp)
 10330c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10330c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10330c8:	0001883a 	nop
}
 10330cc:	e037883a 	mov	sp,fp
 10330d0:	df000017 	ldw	fp,0(sp)
 10330d4:	dec00104 	addi	sp,sp,4
 10330d8:	f800283a 	ret

010330dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10330dc:	defffc04 	addi	sp,sp,-16
 10330e0:	df000315 	stw	fp,12(sp)
 10330e4:	df000304 	addi	fp,sp,12
 10330e8:	e13ffe15 	stw	r4,-8(fp)
 10330ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10330f0:	000530fa 	rdctl	r2,ienable
 10330f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10330f8:	e0bfff17 	ldw	r2,-4(fp)
 10330fc:	00c00044 	movi	r3,1
 1033100:	1884983a 	sll	r2,r3,r2
 1033104:	1007883a 	mov	r3,r2
 1033108:	e0bffd17 	ldw	r2,-12(fp)
 103310c:	1884703a 	and	r2,r3,r2
 1033110:	1004c03a 	cmpne	r2,r2,zero
 1033114:	10803fcc 	andi	r2,r2,255
}
 1033118:	e037883a 	mov	sp,fp
 103311c:	df000017 	ldw	fp,0(sp)
 1033120:	dec00104 	addi	sp,sp,4
 1033124:	f800283a 	ret

01033128 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1033128:	defff504 	addi	sp,sp,-44
 103312c:	dfc00a15 	stw	ra,40(sp)
 1033130:	df000915 	stw	fp,36(sp)
 1033134:	df000904 	addi	fp,sp,36
 1033138:	e13ffc15 	stw	r4,-16(fp)
 103313c:	e17ffd15 	stw	r5,-12(fp)
 1033140:	e1bffe15 	stw	r6,-8(fp)
 1033144:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1033148:	00bffa84 	movi	r2,-22
 103314c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1033150:	e0bffd17 	ldw	r2,-12(fp)
 1033154:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1033158:	e0bff817 	ldw	r2,-32(fp)
 103315c:	10800808 	cmpgei	r2,r2,32
 1033160:	1000271e 	bne	r2,zero,1033200 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1033164:	0005303a 	rdctl	r2,status
 1033168:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 103316c:	e0fffa17 	ldw	r3,-24(fp)
 1033170:	00bfff84 	movi	r2,-2
 1033174:	1884703a 	and	r2,r3,r2
 1033178:	1001703a 	wrctl	status,r2
  
  return context;
 103317c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1033180:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 1033184:	008040f4 	movhi	r2,259
 1033188:	109f9c04 	addi	r2,r2,32368
 103318c:	e0fff817 	ldw	r3,-32(fp)
 1033190:	180690fa 	slli	r3,r3,3
 1033194:	10c5883a 	add	r2,r2,r3
 1033198:	e0fffe17 	ldw	r3,-8(fp)
 103319c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 10331a0:	008040f4 	movhi	r2,259
 10331a4:	109f9c04 	addi	r2,r2,32368
 10331a8:	e0fff817 	ldw	r3,-32(fp)
 10331ac:	180690fa 	slli	r3,r3,3
 10331b0:	10c5883a 	add	r2,r2,r3
 10331b4:	10800104 	addi	r2,r2,4
 10331b8:	e0ffff17 	ldw	r3,-4(fp)
 10331bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10331c0:	e0bffe17 	ldw	r2,-8(fp)
 10331c4:	10000526 	beq	r2,zero,10331dc <alt_iic_isr_register+0xb4>
 10331c8:	e0bff817 	ldw	r2,-32(fp)
 10331cc:	e13ffc17 	ldw	r4,-16(fp)
 10331d0:	100b883a 	mov	r5,r2
 10331d4:	1032f980 	call	1032f98 <alt_ic_irq_enable>
 10331d8:	00000406 	br	10331ec <alt_iic_isr_register+0xc4>
 10331dc:	e0bff817 	ldw	r2,-32(fp)
 10331e0:	e13ffc17 	ldw	r4,-16(fp)
 10331e4:	100b883a 	mov	r5,r2
 10331e8:	10330380 	call	1033038 <alt_ic_irq_disable>
 10331ec:	e0bff715 	stw	r2,-36(fp)
 10331f0:	e0bff917 	ldw	r2,-28(fp)
 10331f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10331f8:	e0bffb17 	ldw	r2,-20(fp)
 10331fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1033200:	e0bff717 	ldw	r2,-36(fp)
}
 1033204:	e037883a 	mov	sp,fp
 1033208:	dfc00117 	ldw	ra,4(sp)
 103320c:	df000017 	ldw	fp,0(sp)
 1033210:	dec00204 	addi	sp,sp,8
 1033214:	f800283a 	ret

01033218 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1033218:	defff904 	addi	sp,sp,-28
 103321c:	dfc00615 	stw	ra,24(sp)
 1033220:	df000515 	stw	fp,20(sp)
 1033224:	df000504 	addi	fp,sp,20
 1033228:	e13ffc15 	stw	r4,-16(fp)
 103322c:	e17ffd15 	stw	r5,-12(fp)
 1033230:	e1bffe15 	stw	r6,-8(fp)
 1033234:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1033238:	e13ffd17 	ldw	r4,-12(fp)
 103323c:	e17ffe17 	ldw	r5,-8(fp)
 1033240:	e1bfff17 	ldw	r6,-4(fp)
 1033244:	103346c0 	call	103346c <open>
 1033248:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 103324c:	e0bffb17 	ldw	r2,-20(fp)
 1033250:	10001c16 	blt	r2,zero,10332c4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1033254:	008040f4 	movhi	r2,259
 1033258:	10944104 	addi	r2,r2,20740
 103325c:	e0fffb17 	ldw	r3,-20(fp)
 1033260:	18c00324 	muli	r3,r3,12
 1033264:	10c5883a 	add	r2,r2,r3
 1033268:	10c00017 	ldw	r3,0(r2)
 103326c:	e0bffc17 	ldw	r2,-16(fp)
 1033270:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1033274:	008040f4 	movhi	r2,259
 1033278:	10944104 	addi	r2,r2,20740
 103327c:	e0fffb17 	ldw	r3,-20(fp)
 1033280:	18c00324 	muli	r3,r3,12
 1033284:	10c5883a 	add	r2,r2,r3
 1033288:	10800104 	addi	r2,r2,4
 103328c:	10c00017 	ldw	r3,0(r2)
 1033290:	e0bffc17 	ldw	r2,-16(fp)
 1033294:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1033298:	008040f4 	movhi	r2,259
 103329c:	10944104 	addi	r2,r2,20740
 10332a0:	e0fffb17 	ldw	r3,-20(fp)
 10332a4:	18c00324 	muli	r3,r3,12
 10332a8:	10c5883a 	add	r2,r2,r3
 10332ac:	10800204 	addi	r2,r2,8
 10332b0:	10c00017 	ldw	r3,0(r2)
 10332b4:	e0bffc17 	ldw	r2,-16(fp)
 10332b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10332bc:	e13ffb17 	ldw	r4,-20(fp)
 10332c0:	1031bf80 	call	1031bf8 <alt_release_fd>
  }
} 
 10332c4:	e037883a 	mov	sp,fp
 10332c8:	dfc00117 	ldw	ra,4(sp)
 10332cc:	df000017 	ldw	fp,0(sp)
 10332d0:	dec00204 	addi	sp,sp,8
 10332d4:	f800283a 	ret

010332d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10332d8:	defffb04 	addi	sp,sp,-20
 10332dc:	dfc00415 	stw	ra,16(sp)
 10332e0:	df000315 	stw	fp,12(sp)
 10332e4:	df000304 	addi	fp,sp,12
 10332e8:	e13ffd15 	stw	r4,-12(fp)
 10332ec:	e17ffe15 	stw	r5,-8(fp)
 10332f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10332f4:	010040f4 	movhi	r4,259
 10332f8:	21144404 	addi	r4,r4,20752
 10332fc:	e17ffd17 	ldw	r5,-12(fp)
 1033300:	01800044 	movi	r6,1
 1033304:	01c07fc4 	movi	r7,511
 1033308:	10332180 	call	1033218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 103330c:	010040f4 	movhi	r4,259
 1033310:	21144104 	addi	r4,r4,20740
 1033314:	e17ffe17 	ldw	r5,-8(fp)
 1033318:	000d883a 	mov	r6,zero
 103331c:	01c07fc4 	movi	r7,511
 1033320:	10332180 	call	1033218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1033324:	010040f4 	movhi	r4,259
 1033328:	21144704 	addi	r4,r4,20764
 103332c:	e17fff17 	ldw	r5,-4(fp)
 1033330:	01800044 	movi	r6,1
 1033334:	01c07fc4 	movi	r7,511
 1033338:	10332180 	call	1033218 <alt_open_fd>
}  
 103333c:	e037883a 	mov	sp,fp
 1033340:	dfc00117 	ldw	ra,4(sp)
 1033344:	df000017 	ldw	fp,0(sp)
 1033348:	dec00204 	addi	sp,sp,8
 103334c:	f800283a 	ret

01033350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1033350:	defffe04 	addi	sp,sp,-8
 1033354:	dfc00115 	stw	ra,4(sp)
 1033358:	df000015 	stw	fp,0(sp)
 103335c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1033360:	008040f4 	movhi	r2,259
 1033364:	1098c404 	addi	r2,r2,25360
 1033368:	10800017 	ldw	r2,0(r2)
 103336c:	10000526 	beq	r2,zero,1033384 <alt_get_errno+0x34>
 1033370:	008040f4 	movhi	r2,259
 1033374:	1098c404 	addi	r2,r2,25360
 1033378:	10800017 	ldw	r2,0(r2)
 103337c:	103ee83a 	callr	r2
 1033380:	00000206 	br	103338c <alt_get_errno+0x3c>
 1033384:	008040f4 	movhi	r2,259
 1033388:	109f8a04 	addi	r2,r2,32296
}
 103338c:	e037883a 	mov	sp,fp
 1033390:	dfc00117 	ldw	ra,4(sp)
 1033394:	df000017 	ldw	fp,0(sp)
 1033398:	dec00204 	addi	sp,sp,8
 103339c:	f800283a 	ret

010333a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10333a0:	defffd04 	addi	sp,sp,-12
 10333a4:	df000215 	stw	fp,8(sp)
 10333a8:	df000204 	addi	fp,sp,8
 10333ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10333b0:	e0bfff17 	ldw	r2,-4(fp)
 10333b4:	10800217 	ldw	r2,8(r2)
 10333b8:	10d00034 	orhi	r3,r2,16384
 10333bc:	e0bfff17 	ldw	r2,-4(fp)
 10333c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10333c4:	e03ffe15 	stw	zero,-8(fp)
 10333c8:	00001d06 	br	1033440 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10333cc:	008040f4 	movhi	r2,259
 10333d0:	10944104 	addi	r2,r2,20740
 10333d4:	e0fffe17 	ldw	r3,-8(fp)
 10333d8:	18c00324 	muli	r3,r3,12
 10333dc:	10c5883a 	add	r2,r2,r3
 10333e0:	10c00017 	ldw	r3,0(r2)
 10333e4:	e0bfff17 	ldw	r2,-4(fp)
 10333e8:	10800017 	ldw	r2,0(r2)
 10333ec:	1880111e 	bne	r3,r2,1033434 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10333f0:	008040f4 	movhi	r2,259
 10333f4:	10944104 	addi	r2,r2,20740
 10333f8:	e0fffe17 	ldw	r3,-8(fp)
 10333fc:	18c00324 	muli	r3,r3,12
 1033400:	10c5883a 	add	r2,r2,r3
 1033404:	10800204 	addi	r2,r2,8
 1033408:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 103340c:	1000090e 	bge	r2,zero,1033434 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1033410:	e0bffe17 	ldw	r2,-8(fp)
 1033414:	10c00324 	muli	r3,r2,12
 1033418:	008040f4 	movhi	r2,259
 103341c:	10944104 	addi	r2,r2,20740
 1033420:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1033424:	e0bfff17 	ldw	r2,-4(fp)
 1033428:	18800226 	beq	r3,r2,1033434 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 103342c:	00bffcc4 	movi	r2,-13
 1033430:	00000a06 	br	103345c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1033434:	e0bffe17 	ldw	r2,-8(fp)
 1033438:	10800044 	addi	r2,r2,1
 103343c:	e0bffe15 	stw	r2,-8(fp)
 1033440:	008040f4 	movhi	r2,259
 1033444:	1098c304 	addi	r2,r2,25356
 1033448:	10800017 	ldw	r2,0(r2)
 103344c:	1007883a 	mov	r3,r2
 1033450:	e0bffe17 	ldw	r2,-8(fp)
 1033454:	18bfdd2e 	bgeu	r3,r2,10333cc <_gp+0xffff50e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1033458:	0005883a 	mov	r2,zero
}
 103345c:	e037883a 	mov	sp,fp
 1033460:	df000017 	ldw	fp,0(sp)
 1033464:	dec00104 	addi	sp,sp,4
 1033468:	f800283a 	ret

0103346c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 103346c:	defff604 	addi	sp,sp,-40
 1033470:	dfc00915 	stw	ra,36(sp)
 1033474:	df000815 	stw	fp,32(sp)
 1033478:	df000804 	addi	fp,sp,32
 103347c:	e13ffd15 	stw	r4,-12(fp)
 1033480:	e17ffe15 	stw	r5,-8(fp)
 1033484:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1033488:	00bfffc4 	movi	r2,-1
 103348c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1033490:	00bffb44 	movi	r2,-19
 1033494:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1033498:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 103349c:	e13ffd17 	ldw	r4,-12(fp)
 10334a0:	014040f4 	movhi	r5,259
 10334a4:	2958c104 	addi	r5,r5,25348
 10334a8:	10337800 	call	1033780 <alt_find_dev>
 10334ac:	e0bff815 	stw	r2,-32(fp)
 10334b0:	e0bff817 	ldw	r2,-32(fp)
 10334b4:	1000051e 	bne	r2,zero,10334cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10334b8:	e13ffd17 	ldw	r4,-12(fp)
 10334bc:	10338100 	call	1033810 <alt_find_file>
 10334c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 10334c4:	00800044 	movi	r2,1
 10334c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10334cc:	e0bff817 	ldw	r2,-32(fp)
 10334d0:	10002926 	beq	r2,zero,1033578 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10334d4:	e13ff817 	ldw	r4,-32(fp)
 10334d8:	10339240 	call	1033924 <alt_get_fd>
 10334dc:	e0bff915 	stw	r2,-28(fp)
 10334e0:	e0bff917 	ldw	r2,-28(fp)
 10334e4:	1000030e 	bge	r2,zero,10334f4 <open+0x88>
    {
      status = index;
 10334e8:	e0bff917 	ldw	r2,-28(fp)
 10334ec:	e0bffa15 	stw	r2,-24(fp)
 10334f0:	00002306 	br	1033580 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 10334f4:	e0bff917 	ldw	r2,-28(fp)
 10334f8:	10c00324 	muli	r3,r2,12
 10334fc:	008040f4 	movhi	r2,259
 1033500:	10944104 	addi	r2,r2,20740
 1033504:	1885883a 	add	r2,r3,r2
 1033508:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 103350c:	e0fffe17 	ldw	r3,-8(fp)
 1033510:	00900034 	movhi	r2,16384
 1033514:	10bfffc4 	addi	r2,r2,-1
 1033518:	1886703a 	and	r3,r3,r2
 103351c:	e0bffc17 	ldw	r2,-16(fp)
 1033520:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1033524:	e0bffb17 	ldw	r2,-20(fp)
 1033528:	1000051e 	bne	r2,zero,1033540 <open+0xd4>
 103352c:	e13ffc17 	ldw	r4,-16(fp)
 1033530:	10333a00 	call	10333a0 <alt_file_locked>
 1033534:	e0bffa15 	stw	r2,-24(fp)
 1033538:	e0bffa17 	ldw	r2,-24(fp)
 103353c:	10001016 	blt	r2,zero,1033580 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1033540:	e0bff817 	ldw	r2,-32(fp)
 1033544:	10800317 	ldw	r2,12(r2)
 1033548:	10000826 	beq	r2,zero,103356c <open+0x100>
 103354c:	e0bff817 	ldw	r2,-32(fp)
 1033550:	10800317 	ldw	r2,12(r2)
 1033554:	e13ffc17 	ldw	r4,-16(fp)
 1033558:	e17ffd17 	ldw	r5,-12(fp)
 103355c:	e1bffe17 	ldw	r6,-8(fp)
 1033560:	e1ffff17 	ldw	r7,-4(fp)
 1033564:	103ee83a 	callr	r2
 1033568:	00000106 	br	1033570 <open+0x104>
 103356c:	0005883a 	mov	r2,zero
 1033570:	e0bffa15 	stw	r2,-24(fp)
 1033574:	00000206 	br	1033580 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1033578:	00bffb44 	movi	r2,-19
 103357c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1033580:	e0bffa17 	ldw	r2,-24(fp)
 1033584:	1000090e 	bge	r2,zero,10335ac <open+0x140>
  {
    alt_release_fd (index);  
 1033588:	e13ff917 	ldw	r4,-28(fp)
 103358c:	1031bf80 	call	1031bf8 <alt_release_fd>
    ALT_ERRNO = -status;
 1033590:	10333500 	call	1033350 <alt_get_errno>
 1033594:	1007883a 	mov	r3,r2
 1033598:	e0bffa17 	ldw	r2,-24(fp)
 103359c:	0085c83a 	sub	r2,zero,r2
 10335a0:	18800015 	stw	r2,0(r3)
    return -1;
 10335a4:	00bfffc4 	movi	r2,-1
 10335a8:	00000106 	br	10335b0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 10335ac:	e0bff917 	ldw	r2,-28(fp)
}
 10335b0:	e037883a 	mov	sp,fp
 10335b4:	dfc00117 	ldw	ra,4(sp)
 10335b8:	df000017 	ldw	fp,0(sp)
 10335bc:	dec00204 	addi	sp,sp,8
 10335c0:	f800283a 	ret

010335c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10335c4:	defffa04 	addi	sp,sp,-24
 10335c8:	df000515 	stw	fp,20(sp)
 10335cc:	df000504 	addi	fp,sp,20
 10335d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10335d4:	0005303a 	rdctl	r2,status
 10335d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10335dc:	e0fffc17 	ldw	r3,-16(fp)
 10335e0:	00bfff84 	movi	r2,-2
 10335e4:	1884703a 	and	r2,r3,r2
 10335e8:	1001703a 	wrctl	status,r2
  
  return context;
 10335ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10335f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10335f4:	e0bfff17 	ldw	r2,-4(fp)
 10335f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10335fc:	e0bffd17 	ldw	r2,-12(fp)
 1033600:	10800017 	ldw	r2,0(r2)
 1033604:	e0fffd17 	ldw	r3,-12(fp)
 1033608:	18c00117 	ldw	r3,4(r3)
 103360c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1033610:	e0bffd17 	ldw	r2,-12(fp)
 1033614:	10800117 	ldw	r2,4(r2)
 1033618:	e0fffd17 	ldw	r3,-12(fp)
 103361c:	18c00017 	ldw	r3,0(r3)
 1033620:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1033624:	e0bffd17 	ldw	r2,-12(fp)
 1033628:	e0fffd17 	ldw	r3,-12(fp)
 103362c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1033630:	e0bffd17 	ldw	r2,-12(fp)
 1033634:	e0fffd17 	ldw	r3,-12(fp)
 1033638:	10c00015 	stw	r3,0(r2)
 103363c:	e0bffb17 	ldw	r2,-20(fp)
 1033640:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1033644:	e0bffe17 	ldw	r2,-8(fp)
 1033648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 103364c:	e037883a 	mov	sp,fp
 1033650:	df000017 	ldw	fp,0(sp)
 1033654:	dec00104 	addi	sp,sp,4
 1033658:	f800283a 	ret

0103365c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 103365c:	defffb04 	addi	sp,sp,-20
 1033660:	dfc00415 	stw	ra,16(sp)
 1033664:	df000315 	stw	fp,12(sp)
 1033668:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 103366c:	d0a00e17 	ldw	r2,-32712(gp)
 1033670:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1033674:	d0a6d717 	ldw	r2,-25764(gp)
 1033678:	10800044 	addi	r2,r2,1
 103367c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1033680:	00002e06 	br	103373c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1033684:	e0bffd17 	ldw	r2,-12(fp)
 1033688:	10800017 	ldw	r2,0(r2)
 103368c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1033690:	e0bffd17 	ldw	r2,-12(fp)
 1033694:	10800403 	ldbu	r2,16(r2)
 1033698:	10803fcc 	andi	r2,r2,255
 103369c:	10000426 	beq	r2,zero,10336b0 <alt_tick+0x54>
 10336a0:	d0a6d717 	ldw	r2,-25764(gp)
 10336a4:	1000021e 	bne	r2,zero,10336b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 10336a8:	e0bffd17 	ldw	r2,-12(fp)
 10336ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10336b0:	e0bffd17 	ldw	r2,-12(fp)
 10336b4:	10800217 	ldw	r2,8(r2)
 10336b8:	d0e6d717 	ldw	r3,-25764(gp)
 10336bc:	18801d36 	bltu	r3,r2,1033734 <alt_tick+0xd8>
 10336c0:	e0bffd17 	ldw	r2,-12(fp)
 10336c4:	10800403 	ldbu	r2,16(r2)
 10336c8:	10803fcc 	andi	r2,r2,255
 10336cc:	1000191e 	bne	r2,zero,1033734 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10336d0:	e0bffd17 	ldw	r2,-12(fp)
 10336d4:	10800317 	ldw	r2,12(r2)
 10336d8:	e0fffd17 	ldw	r3,-12(fp)
 10336dc:	18c00517 	ldw	r3,20(r3)
 10336e0:	1809883a 	mov	r4,r3
 10336e4:	103ee83a 	callr	r2
 10336e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10336ec:	e0bfff17 	ldw	r2,-4(fp)
 10336f0:	1000031e 	bne	r2,zero,1033700 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10336f4:	e13ffd17 	ldw	r4,-12(fp)
 10336f8:	10335c40 	call	10335c4 <alt_alarm_stop>
 10336fc:	00000d06 	br	1033734 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1033700:	e0bffd17 	ldw	r2,-12(fp)
 1033704:	10c00217 	ldw	r3,8(r2)
 1033708:	e0bfff17 	ldw	r2,-4(fp)
 103370c:	1887883a 	add	r3,r3,r2
 1033710:	e0bffd17 	ldw	r2,-12(fp)
 1033714:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1033718:	e0bffd17 	ldw	r2,-12(fp)
 103371c:	10c00217 	ldw	r3,8(r2)
 1033720:	d0a6d717 	ldw	r2,-25764(gp)
 1033724:	1880032e 	bgeu	r3,r2,1033734 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1033728:	e0bffd17 	ldw	r2,-12(fp)
 103372c:	00c00044 	movi	r3,1
 1033730:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1033734:	e0bffe17 	ldw	r2,-8(fp)
 1033738:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 103373c:	e0fffd17 	ldw	r3,-12(fp)
 1033740:	d0a00e04 	addi	r2,gp,-32712
 1033744:	18bfcf1e 	bne	r3,r2,1033684 <_gp+0xffff53a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1033748:	0001883a 	nop
}
 103374c:	e037883a 	mov	sp,fp
 1033750:	dfc00117 	ldw	ra,4(sp)
 1033754:	df000017 	ldw	fp,0(sp)
 1033758:	dec00204 	addi	sp,sp,8
 103375c:	f800283a 	ret

01033760 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1033760:	deffff04 	addi	sp,sp,-4
 1033764:	df000015 	stw	fp,0(sp)
 1033768:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 103376c:	000170fa 	wrctl	ienable,zero
}
 1033770:	e037883a 	mov	sp,fp
 1033774:	df000017 	ldw	fp,0(sp)
 1033778:	dec00104 	addi	sp,sp,4
 103377c:	f800283a 	ret

01033780 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1033780:	defffa04 	addi	sp,sp,-24
 1033784:	dfc00515 	stw	ra,20(sp)
 1033788:	df000415 	stw	fp,16(sp)
 103378c:	df000404 	addi	fp,sp,16
 1033790:	e13ffe15 	stw	r4,-8(fp)
 1033794:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1033798:	e0bfff17 	ldw	r2,-4(fp)
 103379c:	10800017 	ldw	r2,0(r2)
 10337a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10337a4:	e13ffe17 	ldw	r4,-8(fp)
 10337a8:	10220bc0 	call	10220bc <strlen>
 10337ac:	10800044 	addi	r2,r2,1
 10337b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10337b4:	00000d06 	br	10337ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10337b8:	e0bffc17 	ldw	r2,-16(fp)
 10337bc:	10c00217 	ldw	r3,8(r2)
 10337c0:	e0bffd17 	ldw	r2,-12(fp)
 10337c4:	1809883a 	mov	r4,r3
 10337c8:	e17ffe17 	ldw	r5,-8(fp)
 10337cc:	100d883a 	mov	r6,r2
 10337d0:	1033b4c0 	call	1033b4c <memcmp>
 10337d4:	1000021e 	bne	r2,zero,10337e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10337d8:	e0bffc17 	ldw	r2,-16(fp)
 10337dc:	00000706 	br	10337fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10337e0:	e0bffc17 	ldw	r2,-16(fp)
 10337e4:	10800017 	ldw	r2,0(r2)
 10337e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10337ec:	e0fffc17 	ldw	r3,-16(fp)
 10337f0:	e0bfff17 	ldw	r2,-4(fp)
 10337f4:	18bff01e 	bne	r3,r2,10337b8 <_gp+0xffff54d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10337f8:	0005883a 	mov	r2,zero
}
 10337fc:	e037883a 	mov	sp,fp
 1033800:	dfc00117 	ldw	ra,4(sp)
 1033804:	df000017 	ldw	fp,0(sp)
 1033808:	dec00204 	addi	sp,sp,8
 103380c:	f800283a 	ret

01033810 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1033810:	defffb04 	addi	sp,sp,-20
 1033814:	dfc00415 	stw	ra,16(sp)
 1033818:	df000315 	stw	fp,12(sp)
 103381c:	df000304 	addi	fp,sp,12
 1033820:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1033824:	008040f4 	movhi	r2,259
 1033828:	1098bf04 	addi	r2,r2,25340
 103382c:	10800017 	ldw	r2,0(r2)
 1033830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1033834:	00003106 	br	10338fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1033838:	e0bffd17 	ldw	r2,-12(fp)
 103383c:	10800217 	ldw	r2,8(r2)
 1033840:	1009883a 	mov	r4,r2
 1033844:	10220bc0 	call	10220bc <strlen>
 1033848:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 103384c:	e0bffd17 	ldw	r2,-12(fp)
 1033850:	10c00217 	ldw	r3,8(r2)
 1033854:	e0bffe17 	ldw	r2,-8(fp)
 1033858:	10bfffc4 	addi	r2,r2,-1
 103385c:	1885883a 	add	r2,r3,r2
 1033860:	10800003 	ldbu	r2,0(r2)
 1033864:	10803fcc 	andi	r2,r2,255
 1033868:	1080201c 	xori	r2,r2,128
 103386c:	10bfe004 	addi	r2,r2,-128
 1033870:	10800bd8 	cmpnei	r2,r2,47
 1033874:	1000031e 	bne	r2,zero,1033884 <alt_find_file+0x74>
    {
      len -= 1;
 1033878:	e0bffe17 	ldw	r2,-8(fp)
 103387c:	10bfffc4 	addi	r2,r2,-1
 1033880:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1033884:	e0bffe17 	ldw	r2,-8(fp)
 1033888:	e0ffff17 	ldw	r3,-4(fp)
 103388c:	1885883a 	add	r2,r3,r2
 1033890:	10800003 	ldbu	r2,0(r2)
 1033894:	10803fcc 	andi	r2,r2,255
 1033898:	1080201c 	xori	r2,r2,128
 103389c:	10bfe004 	addi	r2,r2,-128
 10338a0:	10800be0 	cmpeqi	r2,r2,47
 10338a4:	1000081e 	bne	r2,zero,10338c8 <alt_find_file+0xb8>
 10338a8:	e0bffe17 	ldw	r2,-8(fp)
 10338ac:	e0ffff17 	ldw	r3,-4(fp)
 10338b0:	1885883a 	add	r2,r3,r2
 10338b4:	10800003 	ldbu	r2,0(r2)
 10338b8:	10803fcc 	andi	r2,r2,255
 10338bc:	1080201c 	xori	r2,r2,128
 10338c0:	10bfe004 	addi	r2,r2,-128
 10338c4:	10000a1e 	bne	r2,zero,10338f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 10338c8:	e0bffd17 	ldw	r2,-12(fp)
 10338cc:	10c00217 	ldw	r3,8(r2)
 10338d0:	e0bffe17 	ldw	r2,-8(fp)
 10338d4:	1809883a 	mov	r4,r3
 10338d8:	e17fff17 	ldw	r5,-4(fp)
 10338dc:	100d883a 	mov	r6,r2
 10338e0:	1033b4c0 	call	1033b4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10338e4:	1000021e 	bne	r2,zero,10338f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10338e8:	e0bffd17 	ldw	r2,-12(fp)
 10338ec:	00000806 	br	1033910 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 10338f0:	e0bffd17 	ldw	r2,-12(fp)
 10338f4:	10800017 	ldw	r2,0(r2)
 10338f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10338fc:	e0fffd17 	ldw	r3,-12(fp)
 1033900:	008040f4 	movhi	r2,259
 1033904:	1098bf04 	addi	r2,r2,25340
 1033908:	18bfcb1e 	bne	r3,r2,1033838 <_gp+0xffff5554>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 103390c:	0005883a 	mov	r2,zero
}
 1033910:	e037883a 	mov	sp,fp
 1033914:	dfc00117 	ldw	ra,4(sp)
 1033918:	df000017 	ldw	fp,0(sp)
 103391c:	dec00204 	addi	sp,sp,8
 1033920:	f800283a 	ret

01033924 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1033924:	defffc04 	addi	sp,sp,-16
 1033928:	df000315 	stw	fp,12(sp)
 103392c:	df000304 	addi	fp,sp,12
 1033930:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1033934:	00bffa04 	movi	r2,-24
 1033938:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 103393c:	e03ffd15 	stw	zero,-12(fp)
 1033940:	00001d06 	br	10339b8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 1033944:	008040f4 	movhi	r2,259
 1033948:	10944104 	addi	r2,r2,20740
 103394c:	e0fffd17 	ldw	r3,-12(fp)
 1033950:	18c00324 	muli	r3,r3,12
 1033954:	10c5883a 	add	r2,r2,r3
 1033958:	10800017 	ldw	r2,0(r2)
 103395c:	1000131e 	bne	r2,zero,10339ac <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 1033960:	008040f4 	movhi	r2,259
 1033964:	10944104 	addi	r2,r2,20740
 1033968:	e0fffd17 	ldw	r3,-12(fp)
 103396c:	18c00324 	muli	r3,r3,12
 1033970:	10c5883a 	add	r2,r2,r3
 1033974:	e0ffff17 	ldw	r3,-4(fp)
 1033978:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 103397c:	008040f4 	movhi	r2,259
 1033980:	1098c304 	addi	r2,r2,25356
 1033984:	10c00017 	ldw	r3,0(r2)
 1033988:	e0bffd17 	ldw	r2,-12(fp)
 103398c:	1880040e 	bge	r3,r2,10339a0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 1033990:	008040f4 	movhi	r2,259
 1033994:	1098c304 	addi	r2,r2,25356
 1033998:	e0fffd17 	ldw	r3,-12(fp)
 103399c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 10339a0:	e0bffd17 	ldw	r2,-12(fp)
 10339a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10339a8:	00000606 	br	10339c4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10339ac:	e0bffd17 	ldw	r2,-12(fp)
 10339b0:	10800044 	addi	r2,r2,1
 10339b4:	e0bffd15 	stw	r2,-12(fp)
 10339b8:	e0bffd17 	ldw	r2,-12(fp)
 10339bc:	10800810 	cmplti	r2,r2,32
 10339c0:	103fe01e 	bne	r2,zero,1033944 <_gp+0xffff5660>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10339c4:	e0bffe17 	ldw	r2,-8(fp)
}
 10339c8:	e037883a 	mov	sp,fp
 10339cc:	df000017 	ldw	fp,0(sp)
 10339d0:	dec00104 	addi	sp,sp,4
 10339d4:	f800283a 	ret

010339d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10339d8:	defffb04 	addi	sp,sp,-20
 10339dc:	df000415 	stw	fp,16(sp)
 10339e0:	df000404 	addi	fp,sp,16
 10339e4:	e13ffe15 	stw	r4,-8(fp)
 10339e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10339ec:	e0bfff17 	ldw	r2,-4(fp)
 10339f0:	10840070 	cmpltui	r2,r2,4097
 10339f4:	1000021e 	bne	r2,zero,1033a00 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10339f8:	00840004 	movi	r2,4096
 10339fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1033a00:	e0fffe17 	ldw	r3,-8(fp)
 1033a04:	e0bfff17 	ldw	r2,-4(fp)
 1033a08:	1885883a 	add	r2,r3,r2
 1033a0c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1033a10:	e0bffe17 	ldw	r2,-8(fp)
 1033a14:	e0bffc15 	stw	r2,-16(fp)
 1033a18:	00000506 	br	1033a30 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1033a1c:	e0bffc17 	ldw	r2,-16(fp)
 1033a20:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1033a24:	e0bffc17 	ldw	r2,-16(fp)
 1033a28:	10800804 	addi	r2,r2,32
 1033a2c:	e0bffc15 	stw	r2,-16(fp)
 1033a30:	e0fffc17 	ldw	r3,-16(fp)
 1033a34:	e0bffd17 	ldw	r2,-12(fp)
 1033a38:	18bff836 	bltu	r3,r2,1033a1c <_gp+0xffff5738>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1033a3c:	e0bffe17 	ldw	r2,-8(fp)
 1033a40:	108007cc 	andi	r2,r2,31
 1033a44:	10000226 	beq	r2,zero,1033a50 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1033a48:	e0bffc17 	ldw	r2,-16(fp)
 1033a4c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1033a50:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1033a54:	e037883a 	mov	sp,fp
 1033a58:	df000017 	ldw	fp,0(sp)
 1033a5c:	dec00104 	addi	sp,sp,4
 1033a60:	f800283a 	ret

01033a64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1033a64:	defffe04 	addi	sp,sp,-8
 1033a68:	df000115 	stw	fp,4(sp)
 1033a6c:	df000104 	addi	fp,sp,4
 1033a70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1033a74:	e0bfff17 	ldw	r2,-4(fp)
 1033a78:	10bffe84 	addi	r2,r2,-6
 1033a7c:	10c00428 	cmpgeui	r3,r2,16
 1033a80:	18001a1e 	bne	r3,zero,1033aec <alt_exception_cause_generated_bad_addr+0x88>
 1033a84:	100690ba 	slli	r3,r2,2
 1033a88:	008040f4 	movhi	r2,259
 1033a8c:	108ea704 	addi	r2,r2,15004
 1033a90:	1885883a 	add	r2,r3,r2
 1033a94:	10800017 	ldw	r2,0(r2)
 1033a98:	1000683a 	jmp	r2
 1033a9c:	01033adc 	xori	r4,zero,3307
 1033aa0:	01033adc 	xori	r4,zero,3307
 1033aa4:	01033aec 	andhi	r4,zero,3307
 1033aa8:	01033aec 	andhi	r4,zero,3307
 1033aac:	01033aec 	andhi	r4,zero,3307
 1033ab0:	01033adc 	xori	r4,zero,3307
 1033ab4:	01033ae4 	muli	r4,zero,3307
 1033ab8:	01033aec 	andhi	r4,zero,3307
 1033abc:	01033adc 	xori	r4,zero,3307
 1033ac0:	01033adc 	xori	r4,zero,3307
 1033ac4:	01033aec 	andhi	r4,zero,3307
 1033ac8:	01033adc 	xori	r4,zero,3307
 1033acc:	01033ae4 	muli	r4,zero,3307
 1033ad0:	01033aec 	andhi	r4,zero,3307
 1033ad4:	01033aec 	andhi	r4,zero,3307
 1033ad8:	01033adc 	xori	r4,zero,3307
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1033adc:	00800044 	movi	r2,1
 1033ae0:	00000306 	br	1033af0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1033ae4:	0005883a 	mov	r2,zero
 1033ae8:	00000106 	br	1033af0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1033aec:	0005883a 	mov	r2,zero
  }
}
 1033af0:	e037883a 	mov	sp,fp
 1033af4:	df000017 	ldw	fp,0(sp)
 1033af8:	dec00104 	addi	sp,sp,4
 1033afc:	f800283a 	ret

01033b00 <atexit>:
 1033b00:	200b883a 	mov	r5,r4
 1033b04:	000d883a 	mov	r6,zero
 1033b08:	0009883a 	mov	r4,zero
 1033b0c:	000f883a 	mov	r7,zero
 1033b10:	1033bc81 	jmpi	1033bc8 <__register_exitproc>

01033b14 <exit>:
 1033b14:	defffe04 	addi	sp,sp,-8
 1033b18:	000b883a 	mov	r5,zero
 1033b1c:	dc000015 	stw	r16,0(sp)
 1033b20:	dfc00115 	stw	ra,4(sp)
 1033b24:	2021883a 	mov	r16,r4
 1033b28:	1033cdc0 	call	1033cdc <__call_exitprocs>
 1033b2c:	008040f4 	movhi	r2,259
 1033b30:	1098b904 	addi	r2,r2,25316
 1033b34:	11000017 	ldw	r4,0(r2)
 1033b38:	20800f17 	ldw	r2,60(r4)
 1033b3c:	10000126 	beq	r2,zero,1033b44 <exit+0x30>
 1033b40:	103ee83a 	callr	r2
 1033b44:	8009883a 	mov	r4,r16
 1033b48:	1033e700 	call	1033e70 <_exit>

01033b4c <memcmp>:
 1033b4c:	01c000c4 	movi	r7,3
 1033b50:	3980192e 	bgeu	r7,r6,1033bb8 <memcmp+0x6c>
 1033b54:	2144b03a 	or	r2,r4,r5
 1033b58:	11c4703a 	and	r2,r2,r7
 1033b5c:	10000f26 	beq	r2,zero,1033b9c <memcmp+0x50>
 1033b60:	20800003 	ldbu	r2,0(r4)
 1033b64:	28c00003 	ldbu	r3,0(r5)
 1033b68:	10c0151e 	bne	r2,r3,1033bc0 <memcmp+0x74>
 1033b6c:	31bfff84 	addi	r6,r6,-2
 1033b70:	01ffffc4 	movi	r7,-1
 1033b74:	00000406 	br	1033b88 <memcmp+0x3c>
 1033b78:	20800003 	ldbu	r2,0(r4)
 1033b7c:	28c00003 	ldbu	r3,0(r5)
 1033b80:	31bfffc4 	addi	r6,r6,-1
 1033b84:	10c00e1e 	bne	r2,r3,1033bc0 <memcmp+0x74>
 1033b88:	21000044 	addi	r4,r4,1
 1033b8c:	29400044 	addi	r5,r5,1
 1033b90:	31fff91e 	bne	r6,r7,1033b78 <_gp+0xffff5894>
 1033b94:	0005883a 	mov	r2,zero
 1033b98:	f800283a 	ret
 1033b9c:	20c00017 	ldw	r3,0(r4)
 1033ba0:	28800017 	ldw	r2,0(r5)
 1033ba4:	1880041e 	bne	r3,r2,1033bb8 <memcmp+0x6c>
 1033ba8:	31bfff04 	addi	r6,r6,-4
 1033bac:	21000104 	addi	r4,r4,4
 1033bb0:	29400104 	addi	r5,r5,4
 1033bb4:	39bff936 	bltu	r7,r6,1033b9c <_gp+0xffff58b8>
 1033bb8:	303fe91e 	bne	r6,zero,1033b60 <_gp+0xffff587c>
 1033bbc:	003ff506 	br	1033b94 <_gp+0xffff58b0>
 1033bc0:	10c5c83a 	sub	r2,r2,r3
 1033bc4:	f800283a 	ret

01033bc8 <__register_exitproc>:
 1033bc8:	008040f4 	movhi	r2,259
 1033bcc:	defffa04 	addi	sp,sp,-24
 1033bd0:	1098b904 	addi	r2,r2,25316
 1033bd4:	dc000315 	stw	r16,12(sp)
 1033bd8:	14000017 	ldw	r16,0(r2)
 1033bdc:	dc400415 	stw	r17,16(sp)
 1033be0:	dfc00515 	stw	ra,20(sp)
 1033be4:	80805217 	ldw	r2,328(r16)
 1033be8:	2023883a 	mov	r17,r4
 1033bec:	10003626 	beq	r2,zero,1033cc8 <__register_exitproc+0x100>
 1033bf0:	10c00117 	ldw	r3,4(r2)
 1033bf4:	010007c4 	movi	r4,31
 1033bf8:	20c00e16 	blt	r4,r3,1033c34 <__register_exitproc+0x6c>
 1033bfc:	1a400044 	addi	r9,r3,1
 1033c00:	8800211e 	bne	r17,zero,1033c88 <__register_exitproc+0xc0>
 1033c04:	18c00084 	addi	r3,r3,2
 1033c08:	18c7883a 	add	r3,r3,r3
 1033c0c:	18c7883a 	add	r3,r3,r3
 1033c10:	12400115 	stw	r9,4(r2)
 1033c14:	10c7883a 	add	r3,r2,r3
 1033c18:	19400015 	stw	r5,0(r3)
 1033c1c:	0005883a 	mov	r2,zero
 1033c20:	dfc00517 	ldw	ra,20(sp)
 1033c24:	dc400417 	ldw	r17,16(sp)
 1033c28:	dc000317 	ldw	r16,12(sp)
 1033c2c:	dec00604 	addi	sp,sp,24
 1033c30:	f800283a 	ret
 1033c34:	00800034 	movhi	r2,0
 1033c38:	10800004 	addi	r2,r2,0
 1033c3c:	10002526 	beq	r2,zero,1033cd4 <__register_exitproc+0x10c>
 1033c40:	01006404 	movi	r4,400
 1033c44:	d9400015 	stw	r5,0(sp)
 1033c48:	d9800115 	stw	r6,4(sp)
 1033c4c:	d9c00215 	stw	r7,8(sp)
 1033c50:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1020000>
 1033c54:	d9400017 	ldw	r5,0(sp)
 1033c58:	d9800117 	ldw	r6,4(sp)
 1033c5c:	d9c00217 	ldw	r7,8(sp)
 1033c60:	10001c26 	beq	r2,zero,1033cd4 <__register_exitproc+0x10c>
 1033c64:	80c05217 	ldw	r3,328(r16)
 1033c68:	10000115 	stw	zero,4(r2)
 1033c6c:	02400044 	movi	r9,1
 1033c70:	10c00015 	stw	r3,0(r2)
 1033c74:	80805215 	stw	r2,328(r16)
 1033c78:	10006215 	stw	zero,392(r2)
 1033c7c:	10006315 	stw	zero,396(r2)
 1033c80:	0007883a 	mov	r3,zero
 1033c84:	883fdf26 	beq	r17,zero,1033c04 <_gp+0xffff5920>
 1033c88:	18d1883a 	add	r8,r3,r3
 1033c8c:	4211883a 	add	r8,r8,r8
 1033c90:	1211883a 	add	r8,r2,r8
 1033c94:	41802215 	stw	r6,136(r8)
 1033c98:	01000044 	movi	r4,1
 1033c9c:	11806217 	ldw	r6,392(r2)
 1033ca0:	20c8983a 	sll	r4,r4,r3
 1033ca4:	310cb03a 	or	r6,r6,r4
 1033ca8:	11806215 	stw	r6,392(r2)
 1033cac:	41c04215 	stw	r7,264(r8)
 1033cb0:	01800084 	movi	r6,2
 1033cb4:	89bfd31e 	bne	r17,r6,1033c04 <_gp+0xffff5920>
 1033cb8:	11806317 	ldw	r6,396(r2)
 1033cbc:	3108b03a 	or	r4,r6,r4
 1033cc0:	11006315 	stw	r4,396(r2)
 1033cc4:	003fcf06 	br	1033c04 <_gp+0xffff5920>
 1033cc8:	80805304 	addi	r2,r16,332
 1033ccc:	80805215 	stw	r2,328(r16)
 1033cd0:	003fc706 	br	1033bf0 <_gp+0xffff590c>
 1033cd4:	00bfffc4 	movi	r2,-1
 1033cd8:	003fd106 	br	1033c20 <_gp+0xffff593c>

01033cdc <__call_exitprocs>:
 1033cdc:	008040f4 	movhi	r2,259
 1033ce0:	1098b904 	addi	r2,r2,25316
 1033ce4:	10800017 	ldw	r2,0(r2)
 1033ce8:	defff404 	addi	sp,sp,-48
 1033cec:	dd800815 	stw	r22,32(sp)
 1033cf0:	d8800015 	stw	r2,0(sp)
 1033cf4:	10805204 	addi	r2,r2,328
 1033cf8:	dd000615 	stw	r20,24(sp)
 1033cfc:	dc800415 	stw	r18,16(sp)
 1033d00:	dfc00b15 	stw	ra,44(sp)
 1033d04:	df000a15 	stw	fp,40(sp)
 1033d08:	ddc00915 	stw	r23,36(sp)
 1033d0c:	dd400715 	stw	r21,28(sp)
 1033d10:	dcc00515 	stw	r19,20(sp)
 1033d14:	dc400315 	stw	r17,12(sp)
 1033d18:	dc000215 	stw	r16,8(sp)
 1033d1c:	2025883a 	mov	r18,r4
 1033d20:	2829883a 	mov	r20,r5
 1033d24:	d8800115 	stw	r2,4(sp)
 1033d28:	05bfffc4 	movi	r22,-1
 1033d2c:	d8800017 	ldw	r2,0(sp)
 1033d30:	14c05217 	ldw	r19,328(r2)
 1033d34:	98001d26 	beq	r19,zero,1033dac <__call_exitprocs+0xd0>
 1033d38:	dd400117 	ldw	r21,4(sp)
 1033d3c:	98800117 	ldw	r2,4(r19)
 1033d40:	173fffc4 	addi	fp,r2,-1
 1033d44:	e0000d16 	blt	fp,zero,1033d7c <__call_exitprocs+0xa0>
 1033d48:	14000044 	addi	r16,r2,1
 1033d4c:	8421883a 	add	r16,r16,r16
 1033d50:	8421883a 	add	r16,r16,r16
 1033d54:	84402004 	addi	r17,r16,128
 1033d58:	9c63883a 	add	r17,r19,r17
 1033d5c:	9c21883a 	add	r16,r19,r16
 1033d60:	a0001e26 	beq	r20,zero,1033ddc <__call_exitprocs+0x100>
 1033d64:	80804017 	ldw	r2,256(r16)
 1033d68:	15001c26 	beq	r2,r20,1033ddc <__call_exitprocs+0x100>
 1033d6c:	e73fffc4 	addi	fp,fp,-1
 1033d70:	843fff04 	addi	r16,r16,-4
 1033d74:	8c7fff04 	addi	r17,r17,-4
 1033d78:	e5bff91e 	bne	fp,r22,1033d60 <_gp+0xffff5a7c>
 1033d7c:	00800034 	movhi	r2,0
 1033d80:	10800004 	addi	r2,r2,0
 1033d84:	10000926 	beq	r2,zero,1033dac <__call_exitprocs+0xd0>
 1033d88:	98800117 	ldw	r2,4(r19)
 1033d8c:	1000311e 	bne	r2,zero,1033e54 <__call_exitprocs+0x178>
 1033d90:	98800017 	ldw	r2,0(r19)
 1033d94:	10003426 	beq	r2,zero,1033e68 <__call_exitprocs+0x18c>
 1033d98:	9809883a 	mov	r4,r19
 1033d9c:	a8800015 	stw	r2,0(r21)
 1033da0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1020000>
 1033da4:	acc00017 	ldw	r19,0(r21)
 1033da8:	983fe41e 	bne	r19,zero,1033d3c <_gp+0xffff5a58>
 1033dac:	dfc00b17 	ldw	ra,44(sp)
 1033db0:	df000a17 	ldw	fp,40(sp)
 1033db4:	ddc00917 	ldw	r23,36(sp)
 1033db8:	dd800817 	ldw	r22,32(sp)
 1033dbc:	dd400717 	ldw	r21,28(sp)
 1033dc0:	dd000617 	ldw	r20,24(sp)
 1033dc4:	dcc00517 	ldw	r19,20(sp)
 1033dc8:	dc800417 	ldw	r18,16(sp)
 1033dcc:	dc400317 	ldw	r17,12(sp)
 1033dd0:	dc000217 	ldw	r16,8(sp)
 1033dd4:	dec00c04 	addi	sp,sp,48
 1033dd8:	f800283a 	ret
 1033ddc:	98800117 	ldw	r2,4(r19)
 1033de0:	80c00017 	ldw	r3,0(r16)
 1033de4:	10bfffc4 	addi	r2,r2,-1
 1033de8:	17001526 	beq	r2,fp,1033e40 <__call_exitprocs+0x164>
 1033dec:	80000015 	stw	zero,0(r16)
 1033df0:	183fde26 	beq	r3,zero,1033d6c <_gp+0xffff5a88>
 1033df4:	00800044 	movi	r2,1
 1033df8:	1708983a 	sll	r4,r2,fp
 1033dfc:	98806217 	ldw	r2,392(r19)
 1033e00:	9dc00117 	ldw	r23,4(r19)
 1033e04:	2084703a 	and	r2,r4,r2
 1033e08:	1000061e 	bne	r2,zero,1033e24 <__call_exitprocs+0x148>
 1033e0c:	183ee83a 	callr	r3
 1033e10:	98800117 	ldw	r2,4(r19)
 1033e14:	15ffc51e 	bne	r2,r23,1033d2c <_gp+0xffff5a48>
 1033e18:	a8800017 	ldw	r2,0(r21)
 1033e1c:	14ffd326 	beq	r2,r19,1033d6c <_gp+0xffff5a88>
 1033e20:	003fc206 	br	1033d2c <_gp+0xffff5a48>
 1033e24:	98806317 	ldw	r2,396(r19)
 1033e28:	2084703a 	and	r2,r4,r2
 1033e2c:	1000061e 	bne	r2,zero,1033e48 <__call_exitprocs+0x16c>
 1033e30:	89400017 	ldw	r5,0(r17)
 1033e34:	9009883a 	mov	r4,r18
 1033e38:	183ee83a 	callr	r3
 1033e3c:	003ff406 	br	1033e10 <_gp+0xffff5b2c>
 1033e40:	9f000115 	stw	fp,4(r19)
 1033e44:	003fea06 	br	1033df0 <_gp+0xffff5b0c>
 1033e48:	89000017 	ldw	r4,0(r17)
 1033e4c:	183ee83a 	callr	r3
 1033e50:	003fef06 	br	1033e10 <_gp+0xffff5b2c>
 1033e54:	98800017 	ldw	r2,0(r19)
 1033e58:	982b883a 	mov	r21,r19
 1033e5c:	1027883a 	mov	r19,r2
 1033e60:	983fb61e 	bne	r19,zero,1033d3c <_gp+0xffff5a58>
 1033e64:	003fd106 	br	1033dac <_gp+0xffff5ac8>
 1033e68:	0005883a 	mov	r2,zero
 1033e6c:	003ffa06 	br	1033e58 <_gp+0xffff5b74>

01033e70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1033e70:	defffd04 	addi	sp,sp,-12
 1033e74:	df000215 	stw	fp,8(sp)
 1033e78:	df000204 	addi	fp,sp,8
 1033e7c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1033e80:	0001883a 	nop
 1033e84:	e0bfff17 	ldw	r2,-4(fp)
 1033e88:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1033e8c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1033e90:	10000226 	beq	r2,zero,1033e9c <_exit+0x2c>
    ALT_SIM_FAIL();
 1033e94:	002af070 	cmpltui	zero,zero,43969
 1033e98:	00000106 	br	1033ea0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1033e9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1033ea0:	003fff06 	br	1033ea0 <_gp+0xffff5bbc>
