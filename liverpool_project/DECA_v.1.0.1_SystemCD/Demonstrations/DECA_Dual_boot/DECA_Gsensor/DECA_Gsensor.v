
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DECA_Gsensor(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// G-Sensor //////////   for SPI
	output		          		G_SENSOR_CS_n, //  OUTPUT : SPI is LOW
	input 		          		G_SENSOR_INT1,  
	input 		          		G_SENSOR_INT2,
	inout 		          		G_SENSOR_SCLK, //  OUTPUT  
	inout 		          		G_SENSOR_SDI,  //  OUTPUT  :data to G-SENSOR  
	inout 		          		G_SENSOR_SDO,  //  INPUT   :data from G-SENSOR  

	//////////// SW //////////
	input 		     [1:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [15:0] OUT_X ; 
wire [7:0] WHO_AM_I ;
wire [7:0] OUT_X_L  ;
wire [7:0] OUT_X_H  ;



wire  [16:0]  data_x ;
wire  [7:0]   led_out ;
wire          reset_n ; 
//=======================================================
//  Structural coding
//=======================================================
assign  reset_n = KEY [0]; 

//---G-Sensor for SPI Controller ----  


wire BYTE   ; 
wire DATA_RDY ; 
SPI_CTL spi(
 .DATA_RDY (DATA_RDY),
 .RESET_N (reset_n ), 
 .CLK_50  (MAX10_CLK1_50), 
.OUT_X   (OUT_X   ) ,
.WHO_AM_I(WHO_AM_I) ,
.OUT_X_L (OUT_X_L ),
.OUT_X_H (OUT_X_H ),
 
 .CS    (G_SENSOR_CS_n),
 .SCLK (G_SENSOR_SCLK ) ,
 .DIN  (G_SENSOR_SDI),
 .DO   (G_SENSOR_SDO),
 
 
 //--test
 .SYS_CLK (SYS_CLK)  ,  
 .ST  (ST),
.BIT_CNT  (BIT_CNT  ) ,
.WORD_CNT (WORD_CNT ),
 .RDATA (RDATA),
 .DIN_() 
 ); 

 
//OUT_X , is twoâ€™s complement left-justified.
//s_data_x , shift OUT_X to all positive number
wire  [16:0] s_data_x  ;  
assign s_data_x =  32768  +   OUT_X   ; 
assign data_x [11:0] = s_data_x[15:4]    ; 

//=== Signatape 

wire       SYS_CLK;
wire [7:0] ST  ;
wire [15:0]RDATA ;
wire [7:0]BIT_CNT ;
wire [7:0]WORD_CNT ;

TP  tp (
 .DATA_RDY (DATA_RDY), 
 .RESET_N (reset_n ), 
 .CLK_50  (MAX10_CLK1_50  ), 
 .SYS_CLK (SYS_CLK ),   
 .CS     (G_SENSOR_CS_n),
 .SCLK   (G_SENSOR_SCLK ) ,
 .DIN    (G_SENSOR_SDI),
 .DO     (G_SENSOR_SDO),
 .INT1   (G_SENSOR_INT1),
 .INT2   (G_SENSOR_INT2),
 
 
 //--test
 .ST   (ST   ) ,
 .BIT_CNT  (BIT_CNT  ) ,
 .WORD_CNT (WORD_CNT ),
 .RDATA(RDATA) ,
 .OUT_X   (OUT_X   ) ,
 .data_x ( data_x) ,
 .WHO_AM_I(WHO_AM_I) ,
 .OUT_X_L (OUT_X_L ),
 .OUT_X_H (OUT_X_H ),
 .s_data_x  (s_data_x   )
 
 );

 
 
//-----LED Processor----
led_driver u_led_driver	(
    .iRSTN    ( reset_n),
    .iCLK     ( MAX10_CLK1_50 ),
    .iDIG     ( data_x[10:1]),
    .iG_INT2  ( DATA_RDY ) ,// G_SENSOR_INT2 ) ,
    .oLED     ( led_out),
    .fine_tune( 0 )  );

//--LED Output--	 
wire [7:0] B  ; 
assign  B [7:0] = led_out [7:0] ; 
assign LED = 8'hff ^ { B[0] ,B[1] ,B[2] ,B[3] ,B[4] ,B[5] ,B[6] ,B[7]  }  ;

dual_boot dual_boot(
		               .clk_clk		    (MAX10_CLK1_50),       //   clk.clk
		               .reset_reset_n  (reset_n)              // reset.reset_n
			           );


endmodule
