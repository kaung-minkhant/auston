
DECA_GSensor_Nios.elf:     file format elf32-littlenios2
DECA_GSensor_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01020240

Program Header:
    LOAD off    0x00001000 vaddr 0x01020000 paddr 0x01020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01020020 paddr 0x01020020 align 2**12
         filesz 0x000141b8 memsz 0x000141b8 flags r-x
    LOAD off    0x000151d8 vaddr 0x010341d8 paddr 0x01035cc4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000177b0 vaddr 0x010377b0 paddr 0x010377b0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01020000  01020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  01020020  01020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013948  01020240  01020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000650  01033b88  01033b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  010341d8  01035cc4  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  010377b0  010377b0  000177b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  01037910  01037910  00016cc4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016cc4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e30  00000000  00000000  00016ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027f88  00000000  00000000  00017b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f01  00000000  00000000  0003faa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cb3c  00000000  00000000  000499a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000259c  00000000  00000000  000564e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000039d2  00000000  00000000  00058a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b8e7  00000000  00000000  0005c44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00077d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001560  00000000  00000000  00077d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c940  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007c943  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c94d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c94e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c94f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c953  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c957  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c95b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c964  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c96d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0007c976  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0007c97f  2**0
                  CONTENTS, READONLY
 29 .jdi          00003eee  00000000  00000000  0007c9a4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00068951  00000000  00000000  00080892  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01020000 l    d  .entry	00000000 .entry
01020020 l    d  .exceptions	00000000 .exceptions
01020240 l    d  .text	00000000 .text
01033b88 l    d  .rodata	00000000 .rodata
010341d8 l    d  .rwdata	00000000 .rwdata
010377b0 l    d  .bss	00000000 .bss
01037910 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DECA_GSensor_Nios_bsp//obj/HAL/src/crt0.o
01020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010217d4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01033fe6 l     O .rodata	00000010 zeroes.4166
01033ff6 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
01034006 l     O .rodata	00000010 zeroes.4181
01034016 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010271f4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01028d74 l     F .text	00000008 __fp_lock
01028d7c l     F .text	00000008 __fp_unlock
01028d90 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010341d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0103461c l     O .rwdata	00000020 lc_ctype_charset
010345fc l     O .rwdata	00000020 lc_message_charset
0103463c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01034048 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0103416c l     O .rodata	00000010 zeroes.4110
0103417c l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0102d420 l     F .text	000000fc __sprint_r.part.0
0103419c l     O .rodata	00000010 blanks.4125
0103418c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
01031190 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010312b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010312dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010313dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010314d0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010315b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01031790 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01035cb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01031a1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01031b64 l     F .text	00000038 alt_dev_reg
01034c24 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01031e54 l     F .text	00000204 altera_avalon_jtag_uart_irq
01032058 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01032678 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01032a50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01032efc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01033034 l     F .text	00000050 alt_get_errno
01033084 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
010377e4 g     O .bss	00000004 alt_instruction_exception_handler
0102b830 g     F .text	00000074 _mprec_log10
0102b91c g     F .text	0000008c __any_on
0102ed70 g     F .text	00000054 _isatty_r
01034054 g     O .rodata	00000028 __mprec_tinytens
010316d8 g     F .text	00000078 alt_main
01022dbc g     F .text	000000b8 _puts_r
01037810 g     O .bss	00000100 alt_irq
0102edc4 g     F .text	0000005c _lseek_r
01020600 g     F .text	00000060 ACK_check
01035cc4 g       *ABS*	00000000 __flash_rwdata_start
01020574 g     F .text	0000008c ACK_single_check
010305d8 g     F .text	00000084 .hidden __eqdf2
01037910 g       *ABS*	00000000 __alt_heap_start
01022d80 g     F .text	0000003c printf
0102efec g     F .text	0000009c _wcrtomb_r
0102c0e8 g     F .text	0000005c __sseek
010290c4 g     F .text	00000010 __sinit
0102ee7c g     F .text	00000154 __swbuf_r
01029b3c g     F .text	0000007c _setlocale_r
01028f30 g     F .text	00000064 __sfmoreglue
01031770 g     F .text	00000020 __malloc_unlock
0102a79c g     F .text	0000015c memmove
01020660 g     F .text	000001fc OC_I2C_Write
010290ac g     F .text	00000018 _cleanup
0102aa1c g     F .text	000000a8 _Balloc
0103065c g     F .text	000000e0 .hidden __gtdf2
01033444 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01020000 g     F .entry	0000001c __reset
01020020 g       *ABS*	00000000 __flash_exceptions_start
0102ed18 g     F .text	00000058 _fstat_r
010377c8 g     O .bss	00000004 errno
0102c064 g     F .text	00000008 __seofread
0102c3b8 g     F .text	00001068 ___svfiprintf_internal_r
010377d0 g     O .bss	00000004 alt_argv
0103dc84 g       *ABS*	00000000 _gp
010319ec g     F .text	00000030 usleep
01034aa4 g     O .rwdata	00000180 alt_fd_list
01033464 g     F .text	00000090 alt_find_dev
0102a664 g     F .text	00000138 memcpy
01020394 g     F .text	0000014c oc_i2c_init_ex
01028d84 g     F .text	0000000c _cleanup_r
01022978 g     F .text	000000d0 .hidden __floatsidf
01032fbc g     F .text	00000078 alt_io_redirect
0103073c g     F .text	000000e0 .hidden __ltdf2
01033b88 g       *ABS*	00000000 __DTOR_END__
01022e74 g     F .text	00000014 puts
01033748 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0102bf48 g     F .text	00000074 __fpclassifyd
0102b78c g     F .text	000000a4 __ratio
0102e890 g     F .text	00000024 __vfiprintf_internal
01032254 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01022d54 g     F .text	0000002c _printf_r
010218f0 g     F .text	00000008 .hidden __udivsi3
0103142c g     F .text	000000a4 isatty
010340a4 g     O .rodata	000000c8 __mprec_tens
01029bb8 g     F .text	0000000c __locale_charset
01027084 g     F .text	00000040 vsnprintf
010336bc g     F .text	0000008c alt_icache_flush
010377c4 g     O .bss	00000004 __malloc_top_pad
01035c8c g     O .rwdata	00000004 __mb_cur_max
01029be8 g     F .text	0000000c _localeconv_r
0102ae1c g     F .text	0000003c __i2b
01029528 g     F .text	000004a4 __sfvwrite_r
0102bfbc g     F .text	00000054 _sbrk_r
01021110 g     F .text	00000090 myprintf_dword_array
0102ee20 g     F .text	0000005c _read_r
01035cac g     O .rwdata	00000004 alt_max_fd
0102ea28 g     F .text	00000100 _fclose_r
01028d44 g     F .text	00000030 fflush
010377c0 g     O .bss	00000004 __malloc_max_sbrked_mem
01022a48 g     F .text	00000110 .hidden __extendsfdf2
0102fd3c g     F .text	0000089c .hidden __adddf3
0102b534 g     F .text	0000011c __b2d
0102f7ac g     F .text	00000590 .hidden __umoddi3
01031604 g     F .text	000000d4 lseek
01035c84 g     O .rwdata	00000004 _global_impure_ptr
010211a0 g     F .text	000000f8 LIS2DH12_wr_reg
0102b9a8 g     F .text	000005a0 _realloc_r
01037910 g       *ABS*	00000000 __bss_end
01032e0c g     F .text	000000f0 alt_iic_isr_register
01033340 g     F .text	00000104 alt_tick
0102f1ec g     F .text	000005c0 .hidden __udivdi3
0102eb3c g     F .text	00000184 _fputwc_r
0103407c g     O .rodata	00000028 __mprec_bigtens
0102ac00 g     F .text	00000104 __s2b
010310ec g     F .text	000000a4 .hidden __floatunsidf
0102b2dc g     F .text	00000060 __mcmp
010290e4 g     F .text	00000018 __fp_lock_all
01032dc0 g     F .text	0000004c alt_ic_irq_enabled
01020bc4 g     F .text	000001d8 OC_I2CL_Write
010332a8 g     F .text	00000098 alt_alarm_stop
010377d8 g     O .bss	00000004 alt_irq_active
0102085c g     F .text	00000064 ACK_judge_for_read
010200fc g     F .exceptions	000000d0 alt_irq_handler
01034a7c g     O .rwdata	00000028 alt_dev_null
0102028c g     F .text	00000058 Write32_Data
01032a0c g     F .text	00000044 alt_dcache_flush_all
0102ad04 g     F .text	00000068 __hi0bits
010228f0 g     F .text	00000088 .hidden __fixdfsi
01035cc4 g       *ABS*	00000000 __ram_rwdata_end
01035ca4 g     O .rwdata	00000008 alt_dev_list
01031a6c g     F .text	000000f8 write
010341d8 g       *ABS*	00000000 __ram_rodata_end
0103132c g     F .text	000000b0 fstat
0103073c g     F .text	000000e0 .hidden __ledf2
0102101c g     F .text	0000006c myprintf
0102b054 g     F .text	00000140 __pow5mult
0102d534 g     F .text	0000135c ___vfiprintf_internal_r
010377b8 g     O .bss	00000004 __nlocale_changed
010218f8 g     F .text	00000008 .hidden __umodsi3
01037910 g       *ABS*	00000000 end
01031d90 g     F .text	000000c4 altera_avalon_jtag_uart_init
010201cc g     F .exceptions	00000074 alt_instruction_exception_entry
01033b88 g       *ABS*	00000000 __CTOR_LIST__
0103d4c0 g       *ABS*	00000000 __alt_stack_pointer
010326ec g     F .text	00000088 alt_avalon_timer_sc_init
01022cf0 g     F .text	00000064 .hidden __clzsi2
01032460 g     F .text	00000218 altera_avalon_jtag_uart_write
010290d4 g     F .text	00000004 __sfp_lock_acquire
0102a57c g     F .text	000000e8 memchr
01024f74 g     F .text	00001ffc ___vfprintf_internal_r
01022e88 g     F .text	00000058 _sprintf_r
01029238 g     F .text	000002f0 _free_r
01029bc4 g     F .text	00000010 __locale_mb_cur_max
010339c0 g     F .text	00000194 __call_exitprocs
010377b4 g     O .bss	00000004 __mlocale_changed
01035c90 g     O .rwdata	00000004 __malloc_sbrk_base
01020240 g     F .text	0000004c _start
010377dc g     O .bss	00000004 _alt_tick_rate
0102b194 g     F .text	00000148 __lshift
010377e0 g     O .bss	00000004 _alt_nticks
010317e0 g     F .text	000000fc read
01031bd0 g     F .text	0000005c alt_sys_init
0102c1f0 g     F .text	000001c8 __ssprint_r
010338ac g     F .text	00000114 __register_exitproc
0102ae58 g     F .text	000001fc __multiply
01032100 g     F .text	00000068 altera_avalon_jtag_uart_close
010341d8 g       *ABS*	00000000 __ram_rwdata_start
01033b88 g       *ABS*	00000000 __ram_rodata_start
010377e8 g     O .bss	00000028 __malloc_current_mallinfo
0102b650 g     F .text	0000013c __d2b
01031c2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01033608 g     F .text	000000b4 alt_get_fd
010328b4 g     F .text	00000158 alt_busy_sleep
0102e910 g     F .text	00000054 _close_r
01033830 g     F .text	0000007c memcmp
01031cec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01037910 g       *ABS*	00000000 __alt_stack_base
01031d3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010270c4 g     F .text	00000130 __swsetup_r
0102033c g     F .text	00000058 oc_i2c_init
01021900 g     F .text	000008cc .hidden __divdf3
01028f94 g     F .text	00000118 __sfp
0102b8a4 g     F .text	00000078 __copybits
01034674 g     O .rwdata	00000408 __malloc_av_
010290e0 g     F .text	00000004 __sinit_lock_release
01026f94 g     F .text	000000f0 _vsnprintf_r
010221cc g     F .text	00000724 .hidden __muldf3
0102c010 g     F .text	00000054 __sread
010334f4 g     F .text	00000114 alt_find_file
01032aa0 g     F .text	000000a4 alt_dev_llist_insert
01031750 g     F .text	00000020 __malloc_lock
0103193c g     F .text	000000b0 sbrk
01022fe4 g     F .text	00001f90 ___svfprintf_internal_r
01028b1c g     F .text	00000228 _fflush_r
0102e964 g     F .text	000000c4 _calloc_r
010377b0 g       *ABS*	00000000 __bss_start
0102a8f8 g     F .text	00000124 memset
0102137c g     F .text	00000458 main
010377d4 g     O .bss	00000004 alt_envp
010377bc g     O .bss	00000004 __malloc_max_total_mem
01031c8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0102efd0 g     F .text	0000001c __swbuf
0102c144 g     F .text	00000008 __sclose
0103d4c0 g       *ABS*	00000000 __alt_heap_limit
0102eb28 g     F .text	00000014 fclose
01022b58 g     F .text	00000198 .hidden __truncdfsf2
010273f4 g     F .text	00001728 _dtoa_r
01029dd4 g     F .text	000007a8 _malloc_r
0102f160 g     F .text	00000030 __ascii_wctomb
01035cb0 g     O .rwdata	00000004 alt_errno
010299cc g     F .text	000000b8 _fwalk
01021840 g     F .text	00000054 .hidden __divsi3
010204e0 g     F .text	00000094 oc_i2c_uninit
01029114 g     F .text	00000124 _malloc_trim_r
01033b88 g       *ABS*	00000000 __CTOR_END__
0102c14c g     F .text	000000a4 strcmp
01033b88 g       *ABS*	00000000 __flash_rodata_start
01033b88 g       *ABS*	00000000 __DTOR_LIST__
010305d8 g     F .text	00000084 .hidden __nedf2
01031b9c g     F .text	00000034 alt_irq_init
010318dc g     F .text	00000060 alt_release_fd
01022ee0 g     F .text	0000006c sprintf
01033ea0 g     O .rodata	00000100 .hidden __clz_tab
01020fec g     F .text	00000030 debug_output
010377b0 g     O .bss	00000004 _PathLocale
010337e4 g     F .text	00000014 atexit
0102e8b4 g     F .text	0000005c _write_r
01029bf4 g     F .text	0000001c setlocale
01035c88 g     O .rwdata	00000004 _impure_ptr
010377cc g     O .bss	00000004 alt_argc
01021298 g     F .text	000000e4 LIS2DH12_Init
01032ba0 g     F .text	0000005c _do_dtors
01029be0 g     F .text	00000008 __locale_cjk_lang
01020020 g       .exceptions	00000000 alt_irq_entry
0102b4d4 g     F .text	00000060 __ulp
010290fc g     F .text	00000018 __fp_unlock_all
01035c9c g     O .rwdata	00000008 alt_fs_list
01021088 g     F .text	00000088 myprintf_hex_array
010202e4 g     F .text	00000058 Read32_Data
010208c0 g     F .text	000001cc OC_I2C_Read
01020020 g       *ABS*	00000000 __ram_exceptions_start
01029c10 g     F .text	0000000c localeconv
01020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
01032c2c g     F .text	00000050 alt_ic_isr_register
01035cc4 g       *ABS*	00000000 _edata
01037910 g       *ABS*	00000000 _end
01020240 g       *ABS*	00000000 __ram_exceptions_end
01032168 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
01032d1c g     F .text	000000a4 alt_ic_irq_disable
0102c06c g     F .text	0000007c __swrite
01035c94 g     O .rwdata	00000004 __malloc_trim_threshold
01020a8c g     F .text	00000138 OC_I2C_Read_Continue
01029bd4 g     F .text	0000000c __locale_msgcharset
010337f8 g     F .text	00000038 exit
01029a84 g     F .text	000000b8 _fwalk_reent
0102b33c g     F .text	00000198 __mdiff
01021894 g     F .text	0000005c .hidden __modsi3
0103d4c0 g       *ABS*	00000000 __alt_data_end
01020020 g     F .exceptions	00000000 alt_exception
010290d8 g     F .text	00000004 __sfp_lock_release
01020d9c g     F .text	00000250 OC_I2CL_Read
01033b54 g     F .text	00000034 _exit
01032774 g     F .text	00000140 alt_alarm_start
01029c1c g     F .text	000001b8 __smakebuf_r
01022f4c g     F .text	00000098 strlen
01033150 g     F .text	00000158 open
0103065c g     F .text	000000e0 .hidden __gedf2
01035c98 g     O .rwdata	00000004 __wctomb
0102d51c g     F .text	00000018 __sprint_r
01032bfc g     F .text	00000030 alt_icache_flush_all
01035cb8 g     O .rwdata	00000004 alt_priority_mask
01032c7c g     F .text	000000a0 alt_ic_irq_enable
01026f70 g     F .text	00000024 __vfprintf_internal
0102f190 g     F .text	0000005c _wctomb_r
0103081c g     F .text	000008d0 .hidden __subdf3
0102ad6c g     F .text	000000b0 __lo0bits
01035cbc g     O .rwdata	00000008 alt_alarm_list
01032b44 g     F .text	0000005c _do_ctors
0102f088 g     F .text	000000d8 wcrtomb
010311e0 g     F .text	000000d0 close
01031534 g     F .text	00000080 alt_load
0102ecc0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
010290dc g     F .text	00000004 __sinit_lock_acquire
0102aaec g     F .text	00000114 __multadd
0102aac4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 102000c:	00bffd16 	blt	zero,r2,1020004 <_gp+0xfffe2380>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1020010:	004040b4 	movhi	at,258
    ori r1, r1, %lo(_start)
 1020014:	08409014 	ori	at,at,576
    jmp r1
 1020018:	0800683a 	jmp	at
 102001c:	00000000 	call	0 <__reset-0x1020000>

Disassembly of section .exceptions:

01020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 102007c:	10000326 	beq	r2,zero,102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1020080:	20000226 	beq	r4,zero,102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1020084:	10200fc0 	call	10200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1020088:	00000706 	br	10200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 102008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1020098:	10201cc0 	call	10201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 102009c:	1000021e 	bne	r2,zero,10200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10200f8:	ef80083a 	eret

010200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10200fc:	defff904 	addi	sp,sp,-28
 1020100:	dfc00615 	stw	ra,24(sp)
 1020104:	df000515 	stw	fp,20(sp)
 1020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 102010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1020110:	0005313a 	rdctl	r2,ipending
 1020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 102011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1020124:	00800044 	movi	r2,1
 1020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 102012c:	e0fffb17 	ldw	r3,-20(fp)
 1020130:	e0bffc17 	ldw	r2,-16(fp)
 1020134:	1884703a 	and	r2,r3,r2
 1020138:	10001426 	beq	r2,zero,102018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 102013c:	008040f4 	movhi	r2,259
 1020140:	109e0404 	addi	r2,r2,30736
 1020144:	e0fffd17 	ldw	r3,-12(fp)
 1020148:	180690fa 	slli	r3,r3,3
 102014c:	10c5883a 	add	r2,r2,r3
 1020150:	10c00017 	ldw	r3,0(r2)
 1020154:	008040f4 	movhi	r2,259
 1020158:	109e0404 	addi	r2,r2,30736
 102015c:	e13ffd17 	ldw	r4,-12(fp)
 1020160:	200890fa 	slli	r4,r4,3
 1020164:	1105883a 	add	r2,r2,r4
 1020168:	10800104 	addi	r2,r2,4
 102016c:	10800017 	ldw	r2,0(r2)
 1020170:	1009883a 	mov	r4,r2
 1020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 102017c:	0005313a 	rdctl	r2,ipending
 1020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1020184:	e0bfff17 	ldw	r2,-4(fp)
 1020188:	00000706 	br	10201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 102018c:	e0bffc17 	ldw	r2,-16(fp)
 1020190:	1085883a 	add	r2,r2,r2
 1020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1020198:	e0bffd17 	ldw	r2,-12(fp)
 102019c:	10800044 	addi	r2,r2,1
 10201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10201a4:	003fe106 	br	102012c <_gp+0xfffe24a8>

    active = alt_irq_pending ();
 10201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10201ac:	e0bffb17 	ldw	r2,-20(fp)
 10201b0:	103fdb1e 	bne	r2,zero,1020120 <_gp+0xfffe249c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10201b4:	0001883a 	nop
}
 10201b8:	e037883a 	mov	sp,fp
 10201bc:	dfc00117 	ldw	ra,4(sp)
 10201c0:	df000017 	ldw	fp,0(sp)
 10201c4:	dec00204 	addi	sp,sp,8
 10201c8:	f800283a 	ret

010201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10201cc:	defffb04 	addi	sp,sp,-20
 10201d0:	dfc00415 	stw	ra,16(sp)
 10201d4:	df000315 	stw	fp,12(sp)
 10201d8:	df000304 	addi	fp,sp,12
 10201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10201e0:	000531fa 	rdctl	r2,exception
 10201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10201e8:	e0bffd17 	ldw	r2,-12(fp)
 10201ec:	10801f0c 	andi	r2,r2,124
 10201f0:	1004d0ba 	srli	r2,r2,2
 10201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10201f8:	0005333a 	rdctl	r2,badaddr
 10201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1020200:	d0a6d817 	ldw	r2,-25760(gp)
 1020204:	10000726 	beq	r2,zero,1020224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1020208:	d0a6d817 	ldw	r2,-25760(gp)
 102020c:	e0fffd17 	ldw	r3,-12(fp)
 1020210:	1809883a 	mov	r4,r3
 1020214:	e17fff17 	ldw	r5,-4(fp)
 1020218:	e1bffe17 	ldw	r6,-8(fp)
 102021c:	103ee83a 	callr	r2
 1020220:	00000206 	br	102022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1020224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1020228:	0005883a 	mov	r2,zero
}
 102022c:	e037883a 	mov	sp,fp
 1020230:	dfc00117 	ldw	ra,4(sp)
 1020234:	df000017 	ldw	fp,0(sp)
 1020238:	dec00204 	addi	sp,sp,8
 102023c:	f800283a 	ret

Disassembly of section .text:

01020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1020240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1020244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1020248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 102024c:	00bffd16 	blt	zero,r2,1020244 <_gp+0xfffe25c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1020250:	06c040f4 	movhi	sp,259
    ori sp, sp, %lo(__alt_stack_pointer)
 1020254:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
 1020258:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 102025c:	d6b72114 	ori	gp,gp,56452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1020260:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 1020264:	109dec14 	ori	r2,r2,30640

    movhi r3, %hi(__bss_end)
 1020268:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 102026c:	18de4414 	ori	r3,r3,30992

    beq r2, r3, 1f
 1020270:	10c00326 	beq	r2,r3,1020280 <_start+0x40>

0:
    stw zero, (r2)
 1020274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1020278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 102027c:	10fffd36 	bltu	r2,r3,1020274 <_gp+0xfffe25f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1020280:	10315340 	call	1031534 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1020284:	10316d80 	call	10316d8 <alt_main>

01020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1020288:	003fff06 	br	1020288 <_gp+0xfffe2604>

0102028c <Write32_Data>:
#define SLEEP_TIME 15  //us
#define ACK_SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 102028c:	defffb04 	addi	sp,sp,-20
 1020290:	df000415 	stw	fp,16(sp)
 1020294:	df000404 	addi	fp,sp,16
 1020298:	e13ffd15 	stw	r4,-12(fp)
 102029c:	e17ffe15 	stw	r5,-8(fp)
 10202a0:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 10202a4:	e0bffe17 	ldw	r2,-8(fp)
 10202a8:	1085883a 	add	r2,r2,r2
 10202ac:	1085883a 	add	r2,r2,r2
 10202b0:	1007883a 	mov	r3,r2
 10202b4:	e0bffd17 	ldw	r2,-12(fp)
 10202b8:	1885883a 	add	r2,r3,r2
 10202bc:	1007883a 	mov	r3,r2
 10202c0:	e0bfff17 	ldw	r2,-4(fp)
 10202c4:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 10202c8:	00800044 	movi	r2,1
 10202cc:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 10202d0:	e0bffc17 	ldw	r2,-16(fp)
}
 10202d4:	e037883a 	mov	sp,fp
 10202d8:	df000017 	ldw	fp,0(sp)
 10202dc:	dec00104 	addi	sp,sp,4
 10202e0:	f800283a 	ret

010202e4 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 10202e4:	defffb04 	addi	sp,sp,-20
 10202e8:	df000415 	stw	fp,16(sp)
 10202ec:	df000404 	addi	fp,sp,16
 10202f0:	e13ffd15 	stw	r4,-12(fp)
 10202f4:	e17ffe15 	stw	r5,-8(fp)
 10202f8:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 10202fc:	e0bffe17 	ldw	r2,-8(fp)
 1020300:	1085883a 	add	r2,r2,r2
 1020304:	1085883a 	add	r2,r2,r2
 1020308:	1007883a 	mov	r3,r2
 102030c:	e0bffd17 	ldw	r2,-12(fp)
 1020310:	1885883a 	add	r2,r3,r2
 1020314:	10c00037 	ldwio	r3,0(r2)
 1020318:	e0bfff17 	ldw	r2,-4(fp)
 102031c:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 1020320:	00800044 	movi	r2,1
 1020324:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 1020328:	e0bffc17 	ldw	r2,-16(fp)
}
 102032c:	e037883a 	mov	sp,fp
 1020330:	df000017 	ldw	fp,0(sp)
 1020334:	dec00104 	addi	sp,sp,4
 1020338:	f800283a 	ret

0102033c <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
 102033c:	defffa04 	addi	sp,sp,-24
 1020340:	dfc00515 	stw	ra,20(sp)
 1020344:	df000415 	stw	fp,16(sp)
 1020348:	df000404 	addi	fp,sp,16
 102034c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 1020350:	0080bef4 	movhi	r2,763
 1020354:	10bc2004 	addi	r2,r2,-3968
 1020358:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 102035c:	008001b4 	movhi	r2,6
 1020360:	1086a004 	addi	r2,r2,6784
 1020364:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 1020368:	e13fff17 	ldw	r4,-4(fp)
 102036c:	e17ffc17 	ldw	r5,-16(fp)
 1020370:	e1bffd17 	ldw	r6,-12(fp)
 1020374:	10203940 	call	1020394 <oc_i2c_init_ex>
 1020378:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
 102037c:	e0bffe17 	ldw	r2,-8(fp)
}
 1020380:	e037883a 	mov	sp,fp
 1020384:	dfc00117 	ldw	ra,4(sp)
 1020388:	df000017 	ldw	fp,0(sp)
 102038c:	dec00204 	addi	sp,sp,8
 1020390:	f800283a 	ret

01020394 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 1020394:	defff604 	addi	sp,sp,-40
 1020398:	dfc00915 	stw	ra,36(sp)
 102039c:	df000815 	stw	fp,32(sp)
 10203a0:	df000804 	addi	fp,sp,32
 10203a4:	e13ffd15 	stw	r4,-12(fp)
 10203a8:	e17ffe15 	stw	r5,-8(fp)
 10203ac:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 10203b0:	00800044 	movi	r2,1
 10203b4:	e0bff815 	stw	r2,-32(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 10203b8:	00bfe004 	movi	r2,-128
 10203bc:	e0bff905 	stb	r2,-28(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 10203c0:	e0bfff17 	ldw	r2,-4(fp)
 10203c4:	10800164 	muli	r2,r2,5
 10203c8:	e13ffe17 	ldw	r4,-8(fp)
 10203cc:	100b883a 	mov	r5,r2
 10203d0:	10218400 	call	1021840 <__divsi3>
 10203d4:	10bfffc4 	addi	r2,r2,-1
 10203d8:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 10203dc:	e0bffa17 	ldw	r2,-24(fp)
 10203e0:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 10203e4:	e0bffa17 	ldw	r2,-24(fp)
 10203e8:	1005d23a 	srai	r2,r2,8
 10203ec:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 10203f0:	e0bffd17 	ldw	r2,-12(fp)
 10203f4:	e0fffb03 	ldbu	r3,-20(fp)
 10203f8:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 10203fc:	e0bffd17 	ldw	r2,-12(fp)
 1020400:	10800104 	addi	r2,r2,4
 1020404:	1007883a 	mov	r3,r2
 1020408:	e0bffb43 	ldbu	r2,-19(fp)
 102040c:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 1020410:	e0bffd17 	ldw	r2,-12(fp)
 1020414:	10800204 	addi	r2,r2,8
 1020418:	1007883a 	mov	r3,r2
 102041c:	e0bff903 	ldbu	r2,-28(fp)
 1020420:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 1020424:	e0bff817 	ldw	r2,-32(fp)
 1020428:	10000826 	beq	r2,zero,102044c <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
 102042c:	e0bffd17 	ldw	r2,-12(fp)
 1020430:	10800037 	ldwio	r2,0(r2)
 1020434:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 1020438:	e0bffc17 	ldw	r2,-16(fp)
 102043c:	10c03fcc 	andi	r3,r2,255
 1020440:	e0bffb03 	ldbu	r2,-20(fp)
 1020444:	18800126 	beq	r3,r2,102044c <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
 1020448:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 102044c:	e0bff817 	ldw	r2,-32(fp)
 1020450:	10000926 	beq	r2,zero,1020478 <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
 1020454:	e0bffd17 	ldw	r2,-12(fp)
 1020458:	10800104 	addi	r2,r2,4
 102045c:	10800037 	ldwio	r2,0(r2)
 1020460:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 1020464:	e0bffc17 	ldw	r2,-16(fp)
 1020468:	10c03fcc 	andi	r3,r2,255
 102046c:	e0bffb43 	ldbu	r2,-19(fp)
 1020470:	18800126 	beq	r3,r2,1020478 <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
 1020474:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check control
    if (bSuccess){
 1020478:	e0bff817 	ldw	r2,-32(fp)
 102047c:	10000926 	beq	r2,zero,10204a4 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
 1020480:	e0bffd17 	ldw	r2,-12(fp)
 1020484:	10800204 	addi	r2,r2,8
 1020488:	10800037 	ldwio	r2,0(r2)
 102048c:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 1020490:	e0bffc17 	ldw	r2,-16(fp)
 1020494:	10c03fcc 	andi	r3,r2,255
 1020498:	e0bff903 	ldbu	r2,-28(fp)
 102049c:	18800126 	beq	r3,r2,10204a4 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
 10204a0:	e03ff815 	stw	zero,-32(fp)
        }
    }

   if (bSuccess)
 10204a4:	e0bff817 	ldw	r2,-32(fp)
 10204a8:	10000426 	beq	r2,zero,10204bc <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
 10204ac:	010040f4 	movhi	r4,259
 10204b0:	210ee204 	addi	r4,r4,15240
 10204b4:	1022e740 	call	1022e74 <puts>
 10204b8:	00000306 	br	10204c8 <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 10204bc:	010040f4 	movhi	r4,259
 10204c0:	210ee804 	addi	r4,r4,15264
 10204c4:	1022e740 	call	1022e74 <puts>

   return bSuccess;
 10204c8:	e0bff817 	ldw	r2,-32(fp)

}
 10204cc:	e037883a 	mov	sp,fp
 10204d0:	dfc00117 	ldw	ra,4(sp)
 10204d4:	df000017 	ldw	fp,0(sp)
 10204d8:	dec00204 	addi	sp,sp,8
 10204dc:	f800283a 	ret

010204e0 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 10204e0:	defffa04 	addi	sp,sp,-24
 10204e4:	dfc00515 	stw	ra,20(sp)
 10204e8:	df000415 	stw	fp,16(sp)
 10204ec:	df000404 	addi	fp,sp,16
 10204f0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 10204f4:	00800044 	movi	r2,1
 10204f8:	e0bffc15 	stw	r2,-16(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 10204fc:	e03ffd05 	stb	zero,-12(fp)

    IOWR( i2c_base, 2, ControlValue);
 1020500:	e0bfff17 	ldw	r2,-4(fp)
 1020504:	10800204 	addi	r2,r2,8
 1020508:	1007883a 	mov	r3,r2
 102050c:	e0bffd03 	ldbu	r2,-12(fp)
 1020510:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
 1020514:	e0bfff17 	ldw	r2,-4(fp)
 1020518:	10800204 	addi	r2,r2,8
 102051c:	10800037 	ldwio	r2,0(r2)
 1020520:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 1020524:	e0bffe17 	ldw	r2,-8(fp)
 1020528:	10c03fcc 	andi	r3,r2,255
 102052c:	e0bffd03 	ldbu	r2,-12(fp)
 1020530:	18800126 	beq	r3,r2,1020538 <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
 1020534:	e03ffc15 	stw	zero,-16(fp)
    }

   if (bSuccess)
 1020538:	e0bffc17 	ldw	r2,-16(fp)
 102053c:	10000426 	beq	r2,zero,1020550 <oc_i2c_uninit+0x70>
       printf("\I2C core  is disabled! \r\n");
 1020540:	010040f4 	movhi	r4,259
 1020544:	210ef304 	addi	r4,r4,15308
 1020548:	1022e740 	call	1022e74 <puts>
 102054c:	00000306 	br	102055c <oc_i2c_uninit+0x7c>
   else
       printf("\I2C core is failed to disable! \r\n");
 1020550:	010040f4 	movhi	r4,259
 1020554:	210efa04 	addi	r4,r4,15336
 1020558:	1022e740 	call	1022e74 <puts>

   return bSuccess;
 102055c:	e0bffc17 	ldw	r2,-16(fp)

}
 1020560:	e037883a 	mov	sp,fp
 1020564:	dfc00117 	ldw	ra,4(sp)
 1020568:	df000017 	ldw	fp,0(sp)
 102056c:	dec00204 	addi	sp,sp,8
 1020570:	f800283a 	ret

01020574 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
 1020574:	defffb04 	addi	sp,sp,-20
 1020578:	dfc00415 	stw	ra,16(sp)
 102057c:	df000315 	stw	fp,12(sp)
 1020580:	df000304 	addi	fp,sp,12
 1020584:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 1020588:	00800044 	movi	r2,1
 102058c:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 1020590:	010003c4 	movi	r4,15
 1020594:	10319ec0 	call	10319ec <usleep>
    read_data =IORD(i2c_base, 4);
 1020598:	e0bfff17 	ldw	r2,-4(fp)
 102059c:	10800404 	addi	r2,r2,16
 10205a0:	10800037 	ldwio	r2,0(r2)
 10205a4:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 10205a8:	e0bffe17 	ldw	r2,-8(fp)
 10205ac:	1080008c 	andi	r2,r2,2
 10205b0:	10000126 	beq	r2,zero,10205b8 <ACK_single_check+0x44>
            bSuccess = FALSE;
 10205b4:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
 10205b8:	e0bffd17 	ldw	r2,-12(fp)
 10205bc:	10000a26 	beq	r2,zero,10205e8 <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
 10205c0:	010003c4 	movi	r4,15
 10205c4:	10319ec0 	call	10319ec <usleep>
            read_data =IORD(i2c_base, 4);
 10205c8:	e0bfff17 	ldw	r2,-4(fp)
 10205cc:	10800404 	addi	r2,r2,16
 10205d0:	10800037 	ldwio	r2,0(r2)
 10205d4:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 10205d8:	e0bffe17 	ldw	r2,-8(fp)
 10205dc:	1080200c 	andi	r2,r2,128
 10205e0:	10000126 	beq	r2,zero,10205e8 <ACK_single_check+0x74>
                    bSuccess = FALSE;
 10205e4:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
 10205e8:	e0bffd17 	ldw	r2,-12(fp)
}
 10205ec:	e037883a 	mov	sp,fp
 10205f0:	dfc00117 	ldw	ra,4(sp)
 10205f4:	df000017 	ldw	fp,0(sp)
 10205f8:	dec00204 	addi	sp,sp,8
 10205fc:	f800283a 	ret

01020600 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 1020600:	defffb04 	addi	sp,sp,-20
 1020604:	dfc00415 	stw	ra,16(sp)
 1020608:	df000315 	stw	fp,12(sp)
 102060c:	df000304 	addi	fp,sp,12
 1020610:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 1020614:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
 1020618:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 102061c:	00000306 	br	102062c <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 1020620:	e13fff17 	ldw	r4,-4(fp)
 1020624:	10205740 	call	1020574 <ACK_single_check>
 1020628:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 102062c:	e0bffd17 	ldw	r2,-12(fp)
 1020630:	1000051e 	bne	r2,zero,1020648 <ACK_check+0x48>
 1020634:	e0bffe17 	ldw	r2,-8(fp)
 1020638:	10c00044 	addi	r3,r2,1
 102063c:	e0fffe15 	stw	r3,-8(fp)
 1020640:	10800290 	cmplti	r2,r2,10
 1020644:	103ff61e 	bne	r2,zero,1020620 <_gp+0xfffe299c>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 1020648:	e0bffd17 	ldw	r2,-12(fp)
}
 102064c:	e037883a 	mov	sp,fp
 1020650:	dfc00117 	ldw	ra,4(sp)
 1020654:	df000017 	ldw	fp,0(sp)
 1020658:	dec00204 	addi	sp,sp,8
 102065c:	f800283a 	ret

01020660 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 1020660:	defff904 	addi	sp,sp,-28
 1020664:	dfc00615 	stw	ra,24(sp)
 1020668:	df000515 	stw	fp,20(sp)
 102066c:	df000504 	addi	fp,sp,20
 1020670:	e13ffc15 	stw	r4,-16(fp)
 1020674:	2807883a 	mov	r3,r5
 1020678:	3005883a 	mov	r2,r6
 102067c:	e1ffff15 	stw	r7,-4(fp)
 1020680:	e0fffd05 	stb	r3,-12(fp)
 1020684:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 1020688:	e0bffd03 	ldbu	r2,-12(fp)
 102068c:	e13ffc17 	ldw	r4,-16(fp)
 1020690:	014000c4 	movi	r5,3
 1020694:	100d883a 	mov	r6,r2
 1020698:	102028c0 	call	102028c <Write32_Data>
 102069c:	1000051e 	bne	r2,zero,10206b4 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
 10206a0:	010040f4 	movhi	r4,259
 10206a4:	210f0304 	addi	r4,r4,15372
 10206a8:	1022e740 	call	1022e74 <puts>
       return FALSE;
 10206ac:	0005883a 	mov	r2,zero
 10206b0:	00006506 	br	1020848 <OC_I2C_Write+0x1e8>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 10206b4:	e13ffc17 	ldw	r4,-16(fp)
 10206b8:	01400104 	movi	r5,4
 10206bc:	01802404 	movi	r6,144
 10206c0:	102028c0 	call	102028c <Write32_Data>
 10206c4:	1000051e 	bne	r2,zero,10206dc <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
 10206c8:	010040f4 	movhi	r4,259
 10206cc:	210f0904 	addi	r4,r4,15396
 10206d0:	1022e740 	call	1022e74 <puts>
       return FALSE;
 10206d4:	0005883a 	mov	r2,zero
 10206d8:	00005b06 	br	1020848 <OC_I2C_Write+0x1e8>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 10206dc:	e13ffc17 	ldw	r4,-16(fp)
 10206e0:	10206000 	call	1020600 <ACK_check>
 10206e4:	1000051e 	bne	r2,zero,10206fc <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
 10206e8:	010040f4 	movhi	r4,259
 10206ec:	210f0f04 	addi	r4,r4,15420
 10206f0:	1022e740 	call	1022e74 <puts>
        return FALSE;
 10206f4:	0005883a 	mov	r2,zero
 10206f8:	00005306 	br	1020848 <OC_I2C_Write+0x1e8>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 10206fc:	e0bffe03 	ldbu	r2,-8(fp)
 1020700:	e13ffc17 	ldw	r4,-16(fp)
 1020704:	014000c4 	movi	r5,3
 1020708:	100d883a 	mov	r6,r2
 102070c:	102028c0 	call	102028c <Write32_Data>
 1020710:	1000051e 	bne	r2,zero,1020728 <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
 1020714:	010040f4 	movhi	r4,259
 1020718:	210f1504 	addi	r4,r4,15444
 102071c:	1022e740 	call	1022e74 <puts>
       return FALSE;
 1020720:	0005883a 	mov	r2,zero
 1020724:	00004806 	br	1020848 <OC_I2C_Write+0x1e8>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 1020728:	e13ffc17 	ldw	r4,-16(fp)
 102072c:	01400104 	movi	r5,4
 1020730:	01800404 	movi	r6,16
 1020734:	102028c0 	call	102028c <Write32_Data>
 1020738:	1000051e 	bne	r2,zero,1020750 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
 102073c:	010040f4 	movhi	r4,259
 1020740:	210f1b04 	addi	r4,r4,15468
 1020744:	1022e740 	call	1022e74 <puts>
        return FALSE;
 1020748:	0005883a 	mov	r2,zero
 102074c:	00003e06 	br	1020848 <OC_I2C_Write+0x1e8>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 1020750:	e13ffc17 	ldw	r4,-16(fp)
 1020754:	10206000 	call	1020600 <ACK_check>
 1020758:	1000051e 	bne	r2,zero,1020770 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
 102075c:	010040f4 	movhi	r4,259
 1020760:	210f2104 	addi	r4,r4,15492
 1020764:	1022e740 	call	1022e74 <puts>
        return FALSE;
 1020768:	0005883a 	mov	r2,zero
 102076c:	00003606 	br	1020848 <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1020770:	e03ffb15 	stw	zero,-20(fp)
 1020774:	00002406 	br	1020808 <OC_I2C_Write+0x1a8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 1020778:	e0bffb17 	ldw	r2,-20(fp)
 102077c:	e0ffff17 	ldw	r3,-4(fp)
 1020780:	1885883a 	add	r2,r3,r2
 1020784:	10800003 	ldbu	r2,0(r2)
 1020788:	10803fcc 	andi	r2,r2,255
 102078c:	e13ffc17 	ldw	r4,-16(fp)
 1020790:	014000c4 	movi	r5,3
 1020794:	100d883a 	mov	r6,r2
 1020798:	102028c0 	call	102028c <Write32_Data>
 102079c:	1000051e 	bne	r2,zero,10207b4 <OC_I2C_Write+0x154>
              printf("OC_I2C_Write error[6]\r\n");
 10207a0:	010040f4 	movhi	r4,259
 10207a4:	210f2704 	addi	r4,r4,15516
 10207a8:	1022e740 	call	1022e74 <puts>
              return FALSE;
 10207ac:	0005883a 	mov	r2,zero
 10207b0:	00002506 	br	1020848 <OC_I2C_Write+0x1e8>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 10207b4:	e13ffc17 	ldw	r4,-16(fp)
 10207b8:	01400104 	movi	r5,4
 10207bc:	01800404 	movi	r6,16
 10207c0:	102028c0 	call	102028c <Write32_Data>
 10207c4:	1000051e 	bne	r2,zero,10207dc <OC_I2C_Write+0x17c>
             printf("OC_I2C_Write error[7]\r\n");
 10207c8:	010040f4 	movhi	r4,259
 10207cc:	210f2d04 	addi	r4,r4,15540
 10207d0:	1022e740 	call	1022e74 <puts>
              return FALSE;
 10207d4:	0005883a 	mov	r2,zero
 10207d8:	00001b06 	br	1020848 <OC_I2C_Write+0x1e8>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 10207dc:	e13ffc17 	ldw	r4,-16(fp)
 10207e0:	10206000 	call	1020600 <ACK_check>
 10207e4:	1000051e 	bne	r2,zero,10207fc <OC_I2C_Write+0x19c>
              printf("OC_I2C_Write error[8]\r\n");
 10207e8:	010040f4 	movhi	r4,259
 10207ec:	210f3304 	addi	r4,r4,15564
 10207f0:	1022e740 	call	1022e74 <puts>
              return FALSE;
 10207f4:	0005883a 	mov	r2,zero
 10207f8:	00001306 	br	1020848 <OC_I2C_Write+0x1e8>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 10207fc:	e0bffb17 	ldw	r2,-20(fp)
 1020800:	10800044 	addi	r2,r2,1
 1020804:	e0bffb15 	stw	r2,-20(fp)
 1020808:	e0fffb17 	ldw	r3,-20(fp)
 102080c:	e0800217 	ldw	r2,8(fp)
 1020810:	18bfd916 	blt	r3,r2,1020778 <_gp+0xfffe2af4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 1020814:	e13ffc17 	ldw	r4,-16(fp)
 1020818:	01400104 	movi	r5,4
 102081c:	01801004 	movi	r6,64
 1020820:	102028c0 	call	102028c <Write32_Data>
 1020824:	1000051e 	bne	r2,zero,102083c <OC_I2C_Write+0x1dc>
         printf("OC_I2C_Write error[9]\r\n");
 1020828:	010040f4 	movhi	r4,259
 102082c:	210f3904 	addi	r4,r4,15588
 1020830:	1022e740 	call	1022e74 <puts>
         return FALSE;
 1020834:	0005883a 	mov	r2,zero
 1020838:	00000306 	br	1020848 <OC_I2C_Write+0x1e8>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 102083c:	010003c4 	movi	r4,15
 1020840:	10319ec0 	call	10319ec <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 1020844:	00800044 	movi	r2,1

}
 1020848:	e037883a 	mov	sp,fp
 102084c:	dfc00117 	ldw	ra,4(sp)
 1020850:	df000017 	ldw	fp,0(sp)
 1020854:	dec00204 	addi	sp,sp,8
 1020858:	f800283a 	ret

0102085c <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 102085c:	defffb04 	addi	sp,sp,-20
 1020860:	dfc00415 	stw	ra,16(sp)
 1020864:	df000315 	stw	fp,12(sp)
 1020868:	df000304 	addi	fp,sp,12
 102086c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 1020870:	010003c4 	movi	r4,15
 1020874:	10319ec0 	call	10319ec <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 1020878:	e0bffe04 	addi	r2,fp,-8
 102087c:	e13fff17 	ldw	r4,-4(fp)
 1020880:	01400104 	movi	r5,4
 1020884:	100d883a 	mov	r6,r2
 1020888:	10202e40 	call	10202e4 <Read32_Data>
 102088c:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 1020890:	e0bffd17 	ldw	r2,-12(fp)
 1020894:	10000426 	beq	r2,zero,10208a8 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 1020898:	e0bffe17 	ldw	r2,-8(fp)
 102089c:	1080008c 	andi	r2,r2,2
 10208a0:	10000126 	beq	r2,zero,10208a8 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 10208a4:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 10208a8:	e0bffd17 	ldw	r2,-12(fp)

}
 10208ac:	e037883a 	mov	sp,fp
 10208b0:	dfc00117 	ldw	ra,4(sp)
 10208b4:	df000017 	ldw	fp,0(sp)
 10208b8:	dec00204 	addi	sp,sp,8
 10208bc:	f800283a 	ret

010208c0 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 10208c0:	defff804 	addi	sp,sp,-32
 10208c4:	dfc00715 	stw	ra,28(sp)
 10208c8:	df000615 	stw	fp,24(sp)
 10208cc:	df000604 	addi	fp,sp,24
 10208d0:	e13ffc15 	stw	r4,-16(fp)
 10208d4:	2807883a 	mov	r3,r5
 10208d8:	3005883a 	mov	r2,r6
 10208dc:	e1ffff15 	stw	r7,-4(fp)
 10208e0:	e0fffd05 	stb	r3,-12(fp)
 10208e4:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 10208e8:	e0bffc17 	ldw	r2,-16(fp)
 10208ec:	10800304 	addi	r2,r2,12
 10208f0:	1007883a 	mov	r3,r2
 10208f4:	e0bffd03 	ldbu	r2,-12(fp)
 10208f8:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 10208fc:	e0bffc17 	ldw	r2,-16(fp)
 1020900:	10800404 	addi	r2,r2,16
 1020904:	1007883a 	mov	r3,r2
 1020908:	00802404 	movi	r2,144
 102090c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 1020910:	e13ffc17 	ldw	r4,-16(fp)
 1020914:	10206000 	call	1020600 <ACK_check>
 1020918:	1000051e 	bne	r2,zero,1020930 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
 102091c:	010040f4 	movhi	r4,259
 1020920:	210f3f04 	addi	r4,r4,15612
 1020924:	1022e740 	call	1022e74 <puts>
       return FALSE;
 1020928:	0005883a 	mov	r2,zero
 102092c:	00005206 	br	1020a78 <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
 1020930:	e0bffc17 	ldw	r2,-16(fp)
 1020934:	10800304 	addi	r2,r2,12
 1020938:	1007883a 	mov	r3,r2
 102093c:	e0bffe03 	ldbu	r2,-8(fp)
 1020940:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 1020944:	e0bffc17 	ldw	r2,-16(fp)
 1020948:	10800404 	addi	r2,r2,16
 102094c:	1007883a 	mov	r3,r2
 1020950:	00800404 	movi	r2,16
 1020954:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 1020958:	e13ffc17 	ldw	r4,-16(fp)
 102095c:	10206000 	call	1020600 <ACK_check>
 1020960:	1000051e 	bne	r2,zero,1020978 <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
 1020964:	010040f4 	movhi	r4,259
 1020968:	210f4504 	addi	r4,r4,15636
 102096c:	1022e740 	call	1022e74 <puts>
        return FALSE;
 1020970:	0005883a 	mov	r2,zero
 1020974:	00004006 	br	1020a78 <OC_I2C_Read+0x1b8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 1020978:	e0bffc17 	ldw	r2,-16(fp)
 102097c:	10800304 	addi	r2,r2,12
 1020980:	1007883a 	mov	r3,r2
 1020984:	e0bffd03 	ldbu	r2,-12(fp)
 1020988:	10800054 	ori	r2,r2,1
 102098c:	10803fcc 	andi	r2,r2,255
 1020990:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 1020994:	e0bffc17 	ldw	r2,-16(fp)
 1020998:	10800404 	addi	r2,r2,16
 102099c:	1007883a 	mov	r3,r2
 10209a0:	00802404 	movi	r2,144
 10209a4:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 10209a8:	e13ffc17 	ldw	r4,-16(fp)
 10209ac:	10206000 	call	1020600 <ACK_check>
 10209b0:	1000051e 	bne	r2,zero,10209c8 <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
 10209b4:	010040f4 	movhi	r4,259
 10209b8:	210f4b04 	addi	r4,r4,15660
 10209bc:	1022e740 	call	1022e74 <puts>
        return FALSE;
 10209c0:	0005883a 	mov	r2,zero
 10209c4:	00002c06 	br	1020a78 <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
 10209c8:	e03ffa15 	stw	zero,-24(fp)
 10209cc:	00001f06 	br	1020a4c <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 10209d0:	e0bffc17 	ldw	r2,-16(fp)
 10209d4:	10800404 	addi	r2,r2,16
 10209d8:	1009883a 	mov	r4,r2
 10209dc:	e0bffa17 	ldw	r2,-24(fp)
 10209e0:	10c00044 	addi	r3,r2,1
 10209e4:	e0800217 	ldw	r2,8(fp)
 10209e8:	1880021e 	bne	r3,r2,10209f4 <OC_I2C_Read+0x134>
 10209ec:	00800a04 	movi	r2,40
 10209f0:	00000106 	br	10209f8 <OC_I2C_Read+0x138>
 10209f4:	00800804 	movi	r2,32
 10209f8:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 10209fc:	e13ffc17 	ldw	r4,-16(fp)
 1020a00:	102085c0 	call	102085c <ACK_judge_for_read>
 1020a04:	1000051e 	bne	r2,zero,1020a1c <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
 1020a08:	010040f4 	movhi	r4,259
 1020a0c:	210f5104 	addi	r4,r4,15684
 1020a10:	1022e740 	call	1022e74 <puts>
            return FALSE;
 1020a14:	0005883a 	mov	r2,zero
 1020a18:	00001706 	br	1020a78 <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 1020a1c:	e0bffc17 	ldw	r2,-16(fp)
 1020a20:	10800304 	addi	r2,r2,12
 1020a24:	10800037 	ldwio	r2,0(r2)
 1020a28:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 1020a2c:	e0bffa17 	ldw	r2,-24(fp)
 1020a30:	e0ffff17 	ldw	r3,-4(fp)
 1020a34:	1885883a 	add	r2,r3,r2
 1020a38:	e0fffb17 	ldw	r3,-20(fp)
 1020a3c:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 1020a40:	e0bffa17 	ldw	r2,-24(fp)
 1020a44:	10800044 	addi	r2,r2,1
 1020a48:	e0bffa15 	stw	r2,-24(fp)
 1020a4c:	e0fffa17 	ldw	r3,-24(fp)
 1020a50:	e0800217 	ldw	r2,8(fp)
 1020a54:	18bfde16 	blt	r3,r2,10209d0 <_gp+0xfffe2d4c>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 1020a58:	e0bffc17 	ldw	r2,-16(fp)
 1020a5c:	10800404 	addi	r2,r2,16
 1020a60:	1007883a 	mov	r3,r2
 1020a64:	00801004 	movi	r2,64
 1020a68:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 1020a6c:	010003c4 	movi	r4,15
 1020a70:	10319ec0 	call	10319ec <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 1020a74:	00800044 	movi	r2,1

}
 1020a78:	e037883a 	mov	sp,fp
 1020a7c:	dfc00117 	ldw	ra,4(sp)
 1020a80:	df000017 	ldw	fp,0(sp)
 1020a84:	dec00204 	addi	sp,sp,8
 1020a88:	f800283a 	ret

01020a8c <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 1020a8c:	defff804 	addi	sp,sp,-32
 1020a90:	dfc00715 	stw	ra,28(sp)
 1020a94:	df000615 	stw	fp,24(sp)
 1020a98:	df000604 	addi	fp,sp,24
 1020a9c:	e13ffc15 	stw	r4,-16(fp)
 1020aa0:	2805883a 	mov	r2,r5
 1020aa4:	e1bffe15 	stw	r6,-8(fp)
 1020aa8:	e1ffff15 	stw	r7,-4(fp)
 1020aac:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 1020ab0:	e0bffc17 	ldw	r2,-16(fp)
 1020ab4:	10800304 	addi	r2,r2,12
 1020ab8:	1007883a 	mov	r3,r2
 1020abc:	e0bffd03 	ldbu	r2,-12(fp)
 1020ac0:	10800054 	ori	r2,r2,1
 1020ac4:	10803fcc 	andi	r2,r2,255
 1020ac8:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 1020acc:	e0bffc17 	ldw	r2,-16(fp)
 1020ad0:	10800404 	addi	r2,r2,16
 1020ad4:	1007883a 	mov	r3,r2
 1020ad8:	00802404 	movi	r2,144
 1020adc:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 1020ae0:	e13ffc17 	ldw	r4,-16(fp)
 1020ae4:	10206000 	call	1020600 <ACK_check>
 1020ae8:	1000051e 	bne	r2,zero,1020b00 <OC_I2C_Read_Continue+0x74>
        printf("OC_I2C_Read error[8]\r\n");
 1020aec:	010040f4 	movhi	r4,259
 1020af0:	210f4b04 	addi	r4,r4,15660
 1020af4:	1022e740 	call	1022e74 <puts>
        return FALSE;
 1020af8:	0005883a 	mov	r2,zero
 1020afc:	00002c06 	br	1020bb0 <OC_I2C_Read_Continue+0x124>
    }

    for(i=0;i<nReadLength;i++){
 1020b00:	e03ffa15 	stw	zero,-24(fp)
 1020b04:	00001f06 	br	1020b84 <OC_I2C_Read_Continue+0xf8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 1020b08:	e0bffc17 	ldw	r2,-16(fp)
 1020b0c:	10800404 	addi	r2,r2,16
 1020b10:	1009883a 	mov	r4,r2
 1020b14:	e0bffa17 	ldw	r2,-24(fp)
 1020b18:	10c00044 	addi	r3,r2,1
 1020b1c:	e0bfff17 	ldw	r2,-4(fp)
 1020b20:	1880021e 	bne	r3,r2,1020b2c <OC_I2C_Read_Continue+0xa0>
 1020b24:	00800a04 	movi	r2,40
 1020b28:	00000106 	br	1020b30 <OC_I2C_Read_Continue+0xa4>
 1020b2c:	00800804 	movi	r2,32
 1020b30:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 1020b34:	e13ffc17 	ldw	r4,-16(fp)
 1020b38:	102085c0 	call	102085c <ACK_judge_for_read>
 1020b3c:	1000051e 	bne	r2,zero,1020b54 <OC_I2C_Read_Continue+0xc8>
            printf("OC_I2C_Read error[10]\r\n");
 1020b40:	010040f4 	movhi	r4,259
 1020b44:	210f5104 	addi	r4,r4,15684
 1020b48:	1022e740 	call	1022e74 <puts>
            return FALSE;
 1020b4c:	0005883a 	mov	r2,zero
 1020b50:	00001706 	br	1020bb0 <OC_I2C_Read_Continue+0x124>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 1020b54:	e0bffc17 	ldw	r2,-16(fp)
 1020b58:	10800304 	addi	r2,r2,12
 1020b5c:	10800037 	ldwio	r2,0(r2)
 1020b60:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 1020b64:	e0bffa17 	ldw	r2,-24(fp)
 1020b68:	e0fffe17 	ldw	r3,-8(fp)
 1020b6c:	1885883a 	add	r2,r3,r2
 1020b70:	e0fffb17 	ldw	r3,-20(fp)
 1020b74:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 1020b78:	e0bffa17 	ldw	r2,-24(fp)
 1020b7c:	10800044 	addi	r2,r2,1
 1020b80:	e0bffa15 	stw	r2,-24(fp)
 1020b84:	e0fffa17 	ldw	r3,-24(fp)
 1020b88:	e0bfff17 	ldw	r2,-4(fp)
 1020b8c:	18bfde16 	blt	r3,r2,1020b08 <_gp+0xfffe2e84>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 1020b90:	e0bffc17 	ldw	r2,-16(fp)
 1020b94:	10800404 	addi	r2,r2,16
 1020b98:	1007883a 	mov	r3,r2
 1020b9c:	00801004 	movi	r2,64
 1020ba0:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 1020ba4:	010003c4 	movi	r4,15
 1020ba8:	10319ec0 	call	10319ec <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 1020bac:	00800044 	movi	r2,1

}
 1020bb0:	e037883a 	mov	sp,fp
 1020bb4:	dfc00117 	ldw	ra,4(sp)
 1020bb8:	df000017 	ldw	fp,0(sp)
 1020bbc:	dec00204 	addi	sp,sp,8
 1020bc0:	f800283a 	ret

01020bc4 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
 1020bc4:	defff804 	addi	sp,sp,-32
 1020bc8:	dfc00715 	stw	ra,28(sp)
 1020bcc:	df000615 	stw	fp,24(sp)
 1020bd0:	df000604 	addi	fp,sp,24
 1020bd4:	e13ffc15 	stw	r4,-16(fp)
 1020bd8:	2805883a 	mov	r2,r5
 1020bdc:	e1bffe15 	stw	r6,-8(fp)
 1020be0:	e1ffff15 	stw	r7,-4(fp)
 1020be4:	e0bffd05 	stb	r2,-12(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 1020be8:	e0bffe17 	ldw	r2,-8(fp)
 1020bec:	1005d23a 	srai	r2,r2,8
 1020bf0:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 1020bf4:	e0bffe17 	ldw	r2,-8(fp)
 1020bf8:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 1020bfc:	e0bffd03 	ldbu	r2,-12(fp)
 1020c00:	e13ffc17 	ldw	r4,-16(fp)
 1020c04:	014000c4 	movi	r5,3
 1020c08:	100d883a 	mov	r6,r2
 1020c0c:	102028c0 	call	102028c <Write32_Data>
 1020c10:	1000021e 	bne	r2,zero,1020c1c <OC_I2CL_Write+0x58>
       return FALSE;
 1020c14:	0005883a 	mov	r2,zero
 1020c18:	00005b06 	br	1020d88 <OC_I2CL_Write+0x1c4>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 1020c1c:	e13ffc17 	ldw	r4,-16(fp)
 1020c20:	01400104 	movi	r5,4
 1020c24:	01802404 	movi	r6,144
 1020c28:	102028c0 	call	102028c <Write32_Data>
 1020c2c:	1000021e 	bne	r2,zero,1020c38 <OC_I2CL_Write+0x74>
       return FALSE;
 1020c30:	0005883a 	mov	r2,zero
 1020c34:	00005406 	br	1020d88 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020c38:	e13ffc17 	ldw	r4,-16(fp)
 1020c3c:	10206000 	call	1020600 <ACK_check>
 1020c40:	1000021e 	bne	r2,zero,1020c4c <OC_I2CL_Write+0x88>
        return FALSE;
 1020c44:	0005883a 	mov	r2,zero
 1020c48:	00004f06 	br	1020d88 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 1020c4c:	e0bffb03 	ldbu	r2,-20(fp)
 1020c50:	e13ffc17 	ldw	r4,-16(fp)
 1020c54:	014000c4 	movi	r5,3
 1020c58:	100d883a 	mov	r6,r2
 1020c5c:	102028c0 	call	102028c <Write32_Data>
 1020c60:	1000021e 	bne	r2,zero,1020c6c <OC_I2CL_Write+0xa8>
       return FALSE;
 1020c64:	0005883a 	mov	r2,zero
 1020c68:	00004706 	br	1020d88 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 1020c6c:	e13ffc17 	ldw	r4,-16(fp)
 1020c70:	01400104 	movi	r5,4
 1020c74:	01800404 	movi	r6,16
 1020c78:	102028c0 	call	102028c <Write32_Data>
 1020c7c:	1000021e 	bne	r2,zero,1020c88 <OC_I2CL_Write+0xc4>
        return FALSE;
 1020c80:	0005883a 	mov	r2,zero
 1020c84:	00004006 	br	1020d88 <OC_I2CL_Write+0x1c4>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020c88:	e13ffc17 	ldw	r4,-16(fp)
 1020c8c:	10206000 	call	1020600 <ACK_check>
 1020c90:	1000021e 	bne	r2,zero,1020c9c <OC_I2CL_Write+0xd8>
        return FALSE;
 1020c94:	0005883a 	mov	r2,zero
 1020c98:	00003b06 	br	1020d88 <OC_I2CL_Write+0x1c4>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 1020c9c:	e0bffb43 	ldbu	r2,-19(fp)
 1020ca0:	e13ffc17 	ldw	r4,-16(fp)
 1020ca4:	014000c4 	movi	r5,3
 1020ca8:	100d883a 	mov	r6,r2
 1020cac:	102028c0 	call	102028c <Write32_Data>
 1020cb0:	1000021e 	bne	r2,zero,1020cbc <OC_I2CL_Write+0xf8>
       return FALSE;
 1020cb4:	0005883a 	mov	r2,zero
 1020cb8:	00003306 	br	1020d88 <OC_I2CL_Write+0x1c4>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 1020cbc:	e13ffc17 	ldw	r4,-16(fp)
 1020cc0:	01400104 	movi	r5,4
 1020cc4:	01800404 	movi	r6,16
 1020cc8:	102028c0 	call	102028c <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020ccc:	e13ffc17 	ldw	r4,-16(fp)
 1020cd0:	10206000 	call	1020600 <ACK_check>
 1020cd4:	1000021e 	bne	r2,zero,1020ce0 <OC_I2CL_Write+0x11c>
        return FALSE;
 1020cd8:	0005883a 	mov	r2,zero
 1020cdc:	00002a06 	br	1020d88 <OC_I2CL_Write+0x1c4>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1020ce0:	e03ffa15 	stw	zero,-24(fp)
 1020ce4:	00001b06 	br	1020d54 <OC_I2CL_Write+0x190>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 1020ce8:	e0bffa17 	ldw	r2,-24(fp)
 1020cec:	e0ffff17 	ldw	r3,-4(fp)
 1020cf0:	1885883a 	add	r2,r3,r2
 1020cf4:	10800003 	ldbu	r2,0(r2)
 1020cf8:	10803fcc 	andi	r2,r2,255
 1020cfc:	e13ffc17 	ldw	r4,-16(fp)
 1020d00:	014000c4 	movi	r5,3
 1020d04:	100d883a 	mov	r6,r2
 1020d08:	102028c0 	call	102028c <Write32_Data>
 1020d0c:	1000021e 	bne	r2,zero,1020d18 <OC_I2CL_Write+0x154>
            return FALSE;
 1020d10:	0005883a 	mov	r2,zero
 1020d14:	00001c06 	br	1020d88 <OC_I2CL_Write+0x1c4>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 1020d18:	e13ffc17 	ldw	r4,-16(fp)
 1020d1c:	01400104 	movi	r5,4
 1020d20:	01800404 	movi	r6,16
 1020d24:	102028c0 	call	102028c <Write32_Data>
 1020d28:	1000021e 	bne	r2,zero,1020d34 <OC_I2CL_Write+0x170>
            return FALSE;
 1020d2c:	0005883a 	mov	r2,zero
 1020d30:	00001506 	br	1020d88 <OC_I2CL_Write+0x1c4>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
 1020d34:	e13ffc17 	ldw	r4,-16(fp)
 1020d38:	10206000 	call	1020600 <ACK_check>
 1020d3c:	1000021e 	bne	r2,zero,1020d48 <OC_I2CL_Write+0x184>
             return FALSE;
 1020d40:	0005883a 	mov	r2,zero
 1020d44:	00001006 	br	1020d88 <OC_I2CL_Write+0x1c4>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
 1020d48:	e0bffa17 	ldw	r2,-24(fp)
 1020d4c:	10800044 	addi	r2,r2,1
 1020d50:	e0bffa15 	stw	r2,-24(fp)
 1020d54:	e0fffa17 	ldw	r3,-24(fp)
 1020d58:	e0800217 	ldw	r2,8(fp)
 1020d5c:	18bfe216 	blt	r3,r2,1020ce8 <_gp+0xfffe3064>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 1020d60:	e13ffc17 	ldw	r4,-16(fp)
 1020d64:	01400104 	movi	r5,4
 1020d68:	01801004 	movi	r6,64
 1020d6c:	102028c0 	call	102028c <Write32_Data>
 1020d70:	1000021e 	bne	r2,zero,1020d7c <OC_I2CL_Write+0x1b8>
         return FALSE;
 1020d74:	0005883a 	mov	r2,zero
 1020d78:	00000306 	br	1020d88 <OC_I2CL_Write+0x1c4>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 1020d7c:	010003c4 	movi	r4,15
 1020d80:	10319ec0 	call	10319ec <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 1020d84:	00800044 	movi	r2,1
}
 1020d88:	e037883a 	mov	sp,fp
 1020d8c:	dfc00117 	ldw	ra,4(sp)
 1020d90:	df000017 	ldw	fp,0(sp)
 1020d94:	dec00204 	addi	sp,sp,8
 1020d98:	f800283a 	ret

01020d9c <OC_I2CL_Read>:
   return TRUE;

}*/


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 1020d9c:	defff704 	addi	sp,sp,-36
 1020da0:	dfc00815 	stw	ra,32(sp)
 1020da4:	df000715 	stw	fp,28(sp)
 1020da8:	df000704 	addi	fp,sp,28
 1020dac:	e13ffc15 	stw	r4,-16(fp)
 1020db0:	2807883a 	mov	r3,r5
 1020db4:	3005883a 	mov	r2,r6
 1020db8:	e1ffff15 	stw	r7,-4(fp)
 1020dbc:	e0fffd05 	stb	r3,-12(fp)
 1020dc0:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 1020dc4:	e0bffe0b 	ldhu	r2,-8(fp)
 1020dc8:	1004d23a 	srli	r2,r2,8
 1020dcc:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 1020dd0:	e0bffe0b 	ldhu	r2,-8(fp)
 1020dd4:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 1020dd8:	e0bffd03 	ldbu	r2,-12(fp)
 1020ddc:	e13ffc17 	ldw	r4,-16(fp)
 1020de0:	014000c4 	movi	r5,3
 1020de4:	100d883a 	mov	r6,r2
 1020de8:	102028c0 	call	102028c <Write32_Data>
 1020dec:	1000021e 	bne	r2,zero,1020df8 <OC_I2CL_Read+0x5c>
       return FALSE;
 1020df0:	0005883a 	mov	r2,zero
 1020df4:	00007806 	br	1020fd8 <OC_I2CL_Read+0x23c>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 1020df8:	e13ffc17 	ldw	r4,-16(fp)
 1020dfc:	01400104 	movi	r5,4
 1020e00:	01802404 	movi	r6,144
 1020e04:	102028c0 	call	102028c <Write32_Data>
 1020e08:	1000021e 	bne	r2,zero,1020e14 <OC_I2CL_Read+0x78>
       return FALSE;
 1020e0c:	0005883a 	mov	r2,zero
 1020e10:	00007106 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020e14:	e13ffc17 	ldw	r4,-16(fp)
 1020e18:	10206000 	call	1020600 <ACK_check>
 1020e1c:	1000021e 	bne	r2,zero,1020e28 <OC_I2CL_Read+0x8c>
        return FALSE;
 1020e20:	0005883a 	mov	r2,zero
 1020e24:	00006c06 	br	1020fd8 <OC_I2CL_Read+0x23c>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 1020e28:	e0bffa03 	ldbu	r2,-24(fp)
 1020e2c:	e13ffc17 	ldw	r4,-16(fp)
 1020e30:	014000c4 	movi	r5,3
 1020e34:	100d883a 	mov	r6,r2
 1020e38:	102028c0 	call	102028c <Write32_Data>
 1020e3c:	1000021e 	bne	r2,zero,1020e48 <OC_I2CL_Read+0xac>
       return FALSE;
 1020e40:	0005883a 	mov	r2,zero
 1020e44:	00006406 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 1020e48:	e13ffc17 	ldw	r4,-16(fp)
 1020e4c:	01400104 	movi	r5,4
 1020e50:	01800404 	movi	r6,16
 1020e54:	102028c0 	call	102028c <Write32_Data>
 1020e58:	1000021e 	bne	r2,zero,1020e64 <OC_I2CL_Read+0xc8>
        return FALSE;
 1020e5c:	0005883a 	mov	r2,zero
 1020e60:	00005d06 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020e64:	e13ffc17 	ldw	r4,-16(fp)
 1020e68:	10206000 	call	1020600 <ACK_check>
 1020e6c:	1000021e 	bne	r2,zero,1020e78 <OC_I2CL_Read+0xdc>
        return FALSE;
 1020e70:	0005883a 	mov	r2,zero
 1020e74:	00005806 	br	1020fd8 <OC_I2CL_Read+0x23c>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 1020e78:	e0bffa43 	ldbu	r2,-23(fp)
 1020e7c:	e13ffc17 	ldw	r4,-16(fp)
 1020e80:	014000c4 	movi	r5,3
 1020e84:	100d883a 	mov	r6,r2
 1020e88:	102028c0 	call	102028c <Write32_Data>
 1020e8c:	1000021e 	bne	r2,zero,1020e98 <OC_I2CL_Read+0xfc>
       return FALSE;
 1020e90:	0005883a 	mov	r2,zero
 1020e94:	00005006 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 1020e98:	e13ffc17 	ldw	r4,-16(fp)
 1020e9c:	01400104 	movi	r5,4
 1020ea0:	01800404 	movi	r6,16
 1020ea4:	102028c0 	call	102028c <Write32_Data>
 1020ea8:	1000021e 	bne	r2,zero,1020eb4 <OC_I2CL_Read+0x118>
        return FALSE;
 1020eac:	0005883a 	mov	r2,zero
 1020eb0:	00004906 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020eb4:	e13ffc17 	ldw	r4,-16(fp)
 1020eb8:	10206000 	call	1020600 <ACK_check>
 1020ebc:	1000021e 	bne	r2,zero,1020ec8 <OC_I2CL_Read+0x12c>
        return FALSE;
 1020ec0:	0005883a 	mov	r2,zero
 1020ec4:	00004406 	br	1020fd8 <OC_I2CL_Read+0x23c>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 1020ec8:	e0bffd03 	ldbu	r2,-12(fp)
 1020ecc:	10800054 	ori	r2,r2,1
 1020ed0:	10803fcc 	andi	r2,r2,255
 1020ed4:	e13ffc17 	ldw	r4,-16(fp)
 1020ed8:	014000c4 	movi	r5,3
 1020edc:	100d883a 	mov	r6,r2
 1020ee0:	102028c0 	call	102028c <Write32_Data>
 1020ee4:	1000021e 	bne	r2,zero,1020ef0 <OC_I2CL_Read+0x154>
         return FALSE;
 1020ee8:	0005883a 	mov	r2,zero
 1020eec:	00003a06 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 1020ef0:	e13ffc17 	ldw	r4,-16(fp)
 1020ef4:	01400104 	movi	r5,4
 1020ef8:	01802404 	movi	r6,144
 1020efc:	102028c0 	call	102028c <Write32_Data>
 1020f00:	1000021e 	bne	r2,zero,1020f0c <OC_I2CL_Read+0x170>
         return FALSE;
 1020f04:	0005883a 	mov	r2,zero
 1020f08:	00003306 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
 1020f0c:	e13ffc17 	ldw	r4,-16(fp)
 1020f10:	10206000 	call	1020600 <ACK_check>
 1020f14:	1000021e 	bne	r2,zero,1020f20 <OC_I2CL_Read+0x184>
        return FALSE;
 1020f18:	0005883a 	mov	r2,zero
 1020f1c:	00002e06 	br	1020fd8 <OC_I2CL_Read+0x23c>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 1020f20:	e03ff915 	stw	zero,-28(fp)
 1020f24:	00001f06 	br	1020fa4 <OC_I2CL_Read+0x208>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 1020f28:	e0bffc17 	ldw	r2,-16(fp)
 1020f2c:	10800404 	addi	r2,r2,16
 1020f30:	1009883a 	mov	r4,r2
 1020f34:	e0bff917 	ldw	r2,-28(fp)
 1020f38:	10c00044 	addi	r3,r2,1
 1020f3c:	e0800217 	ldw	r2,8(fp)
 1020f40:	1880021e 	bne	r3,r2,1020f4c <OC_I2CL_Read+0x1b0>
 1020f44:	00800a04 	movi	r2,40
 1020f48:	00000106 	br	1020f50 <OC_I2CL_Read+0x1b4>
 1020f4c:	00800804 	movi	r2,32
 1020f50:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 1020f54:	e13ffc17 	ldw	r4,-16(fp)
 1020f58:	102085c0 	call	102085c <ACK_judge_for_read>
 1020f5c:	1000051e 	bne	r2,zero,1020f74 <OC_I2CL_Read+0x1d8>
            printf("OC_I2C_Read error[10]\r\n");
 1020f60:	010040f4 	movhi	r4,259
 1020f64:	210f5104 	addi	r4,r4,15684
 1020f68:	1022e740 	call	1022e74 <puts>
            return FALSE;
 1020f6c:	0005883a 	mov	r2,zero
 1020f70:	00001906 	br	1020fd8 <OC_I2CL_Read+0x23c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 1020f74:	e0bffc17 	ldw	r2,-16(fp)
 1020f78:	10800304 	addi	r2,r2,12
 1020f7c:	10800037 	ldwio	r2,0(r2)
 1020f80:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 1020f84:	e0bff917 	ldw	r2,-28(fp)
 1020f88:	e0ffff17 	ldw	r3,-4(fp)
 1020f8c:	1885883a 	add	r2,r3,r2
 1020f90:	e0fffb17 	ldw	r3,-20(fp)
 1020f94:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 1020f98:	e0bff917 	ldw	r2,-28(fp)
 1020f9c:	10800044 	addi	r2,r2,1
 1020fa0:	e0bff915 	stw	r2,-28(fp)
 1020fa4:	e0fff917 	ldw	r3,-28(fp)
 1020fa8:	e0800217 	ldw	r2,8(fp)
 1020fac:	18bfde16 	blt	r3,r2,1020f28 <_gp+0xfffe32a4>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
 1020fb0:	e13ffc17 	ldw	r4,-16(fp)
 1020fb4:	01400104 	movi	r5,4
 1020fb8:	01801004 	movi	r6,64
 1020fbc:	102028c0 	call	102028c <Write32_Data>
 1020fc0:	1000021e 	bne	r2,zero,1020fcc <OC_I2CL_Read+0x230>
       return FALSE;
 1020fc4:	0005883a 	mov	r2,zero
 1020fc8:	00000306 	br	1020fd8 <OC_I2CL_Read+0x23c>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 1020fcc:	010003c4 	movi	r4,15
 1020fd0:	10319ec0 	call	10319ec <usleep>

   return TRUE;
 1020fd4:	00800044 	movi	r2,1

}
 1020fd8:	e037883a 	mov	sp,fp
 1020fdc:	dfc00117 	ldw	ra,4(sp)
 1020fe0:	df000017 	ldw	fp,0(sp)
 1020fe4:	dec00204 	addi	sp,sp,8
 1020fe8:	f800283a 	ret

01020fec <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
 1020fec:	defffd04 	addi	sp,sp,-12
 1020ff0:	dfc00215 	stw	ra,8(sp)
 1020ff4:	df000115 	stw	fp,4(sp)
 1020ff8:	df000104 	addi	fp,sp,4
 1020ffc:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
 1021000:	e13fff17 	ldw	r4,-4(fp)
 1021004:	1022d800 	call	1022d80 <printf>
}
 1021008:	e037883a 	mov	sp,fp
 102100c:	dfc00117 	ldw	ra,4(sp)
 1021010:	df000017 	ldw	fp,0(sp)
 1021014:	dec00204 	addi	sp,sp,8
 1021018:	f800283a 	ret

0102101c <myprintf>:

#endif


int myprintf(char *format, ...){
 102101c:	deff7804 	addi	sp,sp,-544
 1021020:	dfc08415 	stw	ra,528(sp)
 1021024:	df008315 	stw	fp,524(sp)
 1021028:	df008304 	addi	fp,sp,524
 102102c:	e1400215 	stw	r5,8(fp)
 1021030:	e1800315 	stw	r6,12(fp)
 1021034:	e1c00415 	stw	r7,16(fp)
 1021038:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 102103c:	e0800204 	addi	r2,fp,8
 1021040:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 1021044:	e0bffe17 	ldw	r2,-8(fp)
 1021048:	e0ff7e04 	addi	r3,fp,-520
 102104c:	1809883a 	mov	r4,r3
 1021050:	01408004 	movi	r5,512
 1021054:	e1bfff17 	ldw	r6,-4(fp)
 1021058:	100f883a 	mov	r7,r2
 102105c:	10270840 	call	1027084 <vsnprintf>
 1021060:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 1021064:	e0bf7e04 	addi	r2,fp,-520
 1021068:	1009883a 	mov	r4,r2
 102106c:	1020fec0 	call	1020fec <debug_output>

    return rc;    
 1021070:	e0bf7d17 	ldw	r2,-524(fp)
}
 1021074:	e037883a 	mov	sp,fp
 1021078:	dfc00117 	ldw	ra,4(sp)
 102107c:	df000017 	ldw	fp,0(sp)
 1021080:	dec00504 	addi	sp,sp,20
 1021084:	f800283a 	ret

01021088 <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
 1021088:	defff704 	addi	sp,sp,-36
 102108c:	dfc00815 	stw	ra,32(sp)
 1021090:	df000715 	stw	fp,28(sp)
 1021094:	df000704 	addi	fp,sp,28
 1021098:	e13ffe15 	stw	r4,-8(fp)
 102109c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 10210a0:	e03ff915 	stw	zero,-28(fp)
 10210a4:	00001106 	br	10210ec <myprintf_hex_array+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 10210a8:	e0bff917 	ldw	r2,-28(fp)
 10210ac:	e0fffe17 	ldw	r3,-8(fp)
 10210b0:	1885883a 	add	r2,r3,r2
 10210b4:	10800003 	ldbu	r2,0(r2)
 10210b8:	10803fcc 	andi	r2,r2,255
 10210bc:	e0fffa04 	addi	r3,fp,-24
 10210c0:	1809883a 	mov	r4,r3
 10210c4:	014040f4 	movhi	r5,259
 10210c8:	294f5704 	addi	r5,r5,15708
 10210cc:	100d883a 	mov	r6,r2
 10210d0:	1022ee00 	call	1022ee0 <sprintf>
        DEBUG((szText));
 10210d4:	e0bffa04 	addi	r2,fp,-24
 10210d8:	1009883a 	mov	r4,r2
 10210dc:	102101c0 	call	102101c <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 10210e0:	e0bff917 	ldw	r2,-28(fp)
 10210e4:	10800044 	addi	r2,r2,1
 10210e8:	e0bff915 	stw	r2,-28(fp)
 10210ec:	e0fff917 	ldw	r3,-28(fp)
 10210f0:	e0bfff17 	ldw	r2,-4(fp)
 10210f4:	18bfec16 	blt	r3,r2,10210a8 <_gp+0xfffe3424>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 10210f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10210fc:	e037883a 	mov	sp,fp
 1021100:	dfc00117 	ldw	ra,4(sp)
 1021104:	df000017 	ldw	fp,0(sp)
 1021108:	dec00204 	addi	sp,sp,8
 102110c:	f800283a 	ret

01021110 <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
 1021110:	defff704 	addi	sp,sp,-36
 1021114:	dfc00815 	stw	ra,32(sp)
 1021118:	df000715 	stw	fp,28(sp)
 102111c:	df000704 	addi	fp,sp,28
 1021120:	e13ffe15 	stw	r4,-8(fp)
 1021124:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 1021128:	e03ff915 	stw	zero,-28(fp)
 102112c:	00001306 	br	102117c <myprintf_dword_array+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 1021130:	e0bff917 	ldw	r2,-28(fp)
 1021134:	1085883a 	add	r2,r2,r2
 1021138:	1085883a 	add	r2,r2,r2
 102113c:	1007883a 	mov	r3,r2
 1021140:	e0bffe17 	ldw	r2,-8(fp)
 1021144:	10c5883a 	add	r2,r2,r3
 1021148:	10800017 	ldw	r2,0(r2)
 102114c:	e0fffa04 	addi	r3,fp,-24
 1021150:	1809883a 	mov	r4,r3
 1021154:	014040f4 	movhi	r5,259
 1021158:	294f5904 	addi	r5,r5,15716
 102115c:	100d883a 	mov	r6,r2
 1021160:	1022ee00 	call	1022ee0 <sprintf>
        DEBUG((szText));
 1021164:	e0bffa04 	addi	r2,fp,-24
 1021168:	1009883a 	mov	r4,r2
 102116c:	102101c0 	call	102101c <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 1021170:	e0bff917 	ldw	r2,-28(fp)
 1021174:	10800044 	addi	r2,r2,1
 1021178:	e0bff915 	stw	r2,-28(fp)
 102117c:	e0fff917 	ldw	r3,-28(fp)
 1021180:	e0bfff17 	ldw	r2,-4(fp)
 1021184:	18bfea16 	blt	r3,r2,1021130 <_gp+0xfffe34ac>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 1021188:	e0bfff17 	ldw	r2,-4(fp)
}
 102118c:	e037883a 	mov	sp,fp
 1021190:	dfc00117 	ldw	ra,4(sp)
 1021194:	df000017 	ldw	fp,0(sp)
 1021198:	dec00204 	addi	sp,sp,8
 102119c:	f800283a 	ret

010211a0 <LIS2DH12_wr_reg>:
#define Gsensor_I2C_ADRESS   0x32    // 0011_00 + SA0 + bit 0----write(32h),read(33h)
#define LIS2DH12_DEBUG(x)    DEBUG(x)



bool LIS2DH12_wr_reg(alt_u8 reg_index, alt_u8 data8){
 10211a0:	defff904 	addi	sp,sp,-28
 10211a4:	dfc00615 	stw	ra,24(sp)
 10211a8:	df000515 	stw	fp,20(sp)
 10211ac:	df000504 	addi	fp,sp,20
 10211b0:	2007883a 	mov	r3,r4
 10211b4:	2805883a 	mov	r2,r5
 10211b8:	e0fffe05 	stb	r3,-8(fp)
 10211bc:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess = TRUE;
 10211c0:	00800044 	movi	r2,1
 10211c4:	e0bffc15 	stw	r2,-16(fp)
	alt_u8 dataR;
    if (bSuccess){
 10211c8:	e0bffc17 	ldw	r2,-16(fp)
 10211cc:	10000a26 	beq	r2,zero,10211f8 <LIS2DH12_wr_reg+0x58>
    	bSuccess = OC_I2C_Write(I2C_OPENCORES_0_BASE,Gsensor_I2C_ADRESS,reg_index,&data8, 1);}
 10211d0:	e1bffe03 	ldbu	r6,-8(fp)
 10211d4:	e0ffff04 	addi	r3,fp,-4
 10211d8:	00800044 	movi	r2,1
 10211dc:	d8800015 	stw	r2,0(sp)
 10211e0:	01004134 	movhi	r4,260
 10211e4:	21040004 	addi	r4,r4,4096
 10211e8:	01400c84 	movi	r5,50
 10211ec:	180f883a 	mov	r7,r3
 10211f0:	10206600 	call	1020660 <OC_I2C_Write>
 10211f4:	e0bffc15 	stw	r2,-16(fp)
    usleep(50*1000);
 10211f8:	0130d414 	movui	r4,50000
 10211fc:	10319ec0 	call	10319ec <usleep>
    if (bSuccess)
 1021200:	e0bffc17 	ldw	r2,-16(fp)
 1021204:	10000a26 	beq	r2,zero,1021230 <LIS2DH12_wr_reg+0x90>
    	bSuccess = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS,reg_index, &dataR, 1);
 1021208:	e1bffe03 	ldbu	r6,-8(fp)
 102120c:	e0fffd04 	addi	r3,fp,-12
 1021210:	00800044 	movi	r2,1
 1021214:	d8800015 	stw	r2,0(sp)
 1021218:	01004134 	movhi	r4,260
 102121c:	21040004 	addi	r4,r4,4096
 1021220:	01400c84 	movi	r5,50
 1021224:	180f883a 	mov	r7,r3
 1021228:	10208c00 	call	10208c0 <OC_I2C_Read>
 102122c:	e0bffc15 	stw	r2,-16(fp)
	if (!bSuccess){
 1021230:	e0bffc17 	ldw	r2,-16(fp)
 1021234:	1000041e 	bne	r2,zero,1021248 <LIS2DH12_wr_reg+0xa8>
				printf("LIS2DH12: failed to read page register\r\n");
 1021238:	010040f4 	movhi	r4,259
 102123c:	210f5b04 	addi	r4,r4,15724
 1021240:	1022e740 	call	1022e74 <puts>
 1021244:	00000e06 	br	1021280 <LIS2DH12_wr_reg+0xe0>
	}
	else{
		      if (dataR !=data8)
 1021248:	e0fffd03 	ldbu	r3,-12(fp)
 102124c:	e0bfff03 	ldbu	r2,-4(fp)
 1021250:	18c03fcc 	andi	r3,r3,255
 1021254:	10803fcc 	andi	r2,r2,255
 1021258:	18800926 	beq	r3,r2,1021280 <LIS2DH12_wr_reg+0xe0>
		      {
		    	bSuccess = FALSE;
 102125c:	e03ffc15 	stw	zero,-16(fp)
		    	LIS2DH12_DEBUG(("Read LIS2DH12 reg[%02xh] = %02Xh\r\n", reg_index, dataR ));
 1021260:	e0fffe03 	ldbu	r3,-8(fp)
 1021264:	e0bffd03 	ldbu	r2,-12(fp)
 1021268:	10803fcc 	andi	r2,r2,255
 102126c:	010040f4 	movhi	r4,259
 1021270:	210f6504 	addi	r4,r4,15764
 1021274:	180b883a 	mov	r5,r3
 1021278:	100d883a 	mov	r6,r2
 102127c:	102101c0 	call	102101c <myprintf>

              }
	     }

    return bSuccess;
 1021280:	e0bffc17 	ldw	r2,-16(fp)

}
 1021284:	e037883a 	mov	sp,fp
 1021288:	dfc00117 	ldw	ra,4(sp)
 102128c:	df000017 	ldw	fp,0(sp)
 1021290:	dec00204 	addi	sp,sp,8
 1021294:	f800283a 	ret

01021298 <LIS2DH12_Init>:

bool LIS2DH12_Init(void){
 1021298:	defffd04 	addi	sp,sp,-12
 102129c:	dfc00215 	stw	ra,8(sp)
 10212a0:	df000115 	stw	fp,4(sp)
 10212a4:	df000104 	addi	fp,sp,4
	 bool  bSuccess= TRUE;
 10212a8:	00800044 	movi	r2,1
 10212ac:	e0bfff15 	stw	r2,-4(fp)
	 LIS2DH12_DEBUG(("Gsensor_Configuration...\r\n"));
 10212b0:	010040f4 	movhi	r4,259
 10212b4:	210f6e04 	addi	r4,r4,15800
 10212b8:	102101c0 	call	102101c <myprintf>
	 bSuccess = oc_i2c_init_ex(I2C_OPENCORES_0_BASE, 50*1000*1000, 400*1000); // ref clock:50MHz, i2c clk:400K
 10212bc:	01004134 	movhi	r4,260
 10212c0:	21040004 	addi	r4,r4,4096
 10212c4:	0140bef4 	movhi	r5,763
 10212c8:	297c2004 	addi	r5,r5,-3968
 10212cc:	018001b4 	movhi	r6,6
 10212d0:	3186a004 	addi	r6,r6,6784
 10212d4:	10203940 	call	1020394 <oc_i2c_init_ex>
 10212d8:	e0bfff15 	stw	r2,-4(fp)
	 if (!bSuccess)
 10212dc:	e0bfff17 	ldw	r2,-4(fp)
 10212e0:	1000031e 	bne	r2,zero,10212f0 <LIS2DH12_Init+0x58>
	     printf("failed to init i2c clock\r\n");
 10212e4:	010040f4 	movhi	r4,259
 10212e8:	210f7504 	addi	r4,r4,15828
 10212ec:	1022e740 	call	1022e74 <puts>
	 if (bSuccess)
 10212f0:	e0bfff17 	ldw	r2,-4(fp)
 10212f4:	10000426 	beq	r2,zero,1021308 <LIS2DH12_Init+0x70>
		 bSuccess= LIS2DH12_wr_reg(CTRL_REG1,CTRL_REG1_value);
 10212f8:	01000804 	movi	r4,32
 10212fc:	014025c4 	movi	r5,151
 1021300:	10211a00 	call	10211a0 <LIS2DH12_wr_reg>
 1021304:	e0bfff15 	stw	r2,-4(fp)
	 if (bSuccess)
 1021308:	e0bfff17 	ldw	r2,-4(fp)
 102130c:	10000426 	beq	r2,zero,1021320 <LIS2DH12_Init+0x88>
		 bSuccess = LIS2DH12_wr_reg(TEMP_CFG_REG,TEMP_CFG_REG_value);
 1021310:	010007c4 	movi	r4,31
 1021314:	01403004 	movi	r5,192
 1021318:	10211a00 	call	10211a0 <LIS2DH12_wr_reg>
 102131c:	e0bfff15 	stw	r2,-4(fp)
	 if(bSuccess)
 1021320:	e0bfff17 	ldw	r2,-4(fp)
 1021324:	10000426 	beq	r2,zero,1021338 <LIS2DH12_Init+0xa0>
		 bSuccess =  LIS2DH12_wr_reg(CTRL_REG4,CTRL_REG4_value);
 1021328:	010008c4 	movi	r4,35
 102132c:	01402e04 	movi	r5,184
 1021330:	10211a00 	call	10211a0 <LIS2DH12_wr_reg>
 1021334:	e0bfff15 	stw	r2,-4(fp)

	 LIS2DH12_DEBUG(("Gsensor_Configuration  %s\r\n", bSuccess?"success":"fail"));
 1021338:	e0bfff17 	ldw	r2,-4(fp)
 102133c:	10000326 	beq	r2,zero,102134c <LIS2DH12_Init+0xb4>
 1021340:	008040f4 	movhi	r2,259
 1021344:	108f7c04 	addi	r2,r2,15856
 1021348:	00000206 	br	1021354 <LIS2DH12_Init+0xbc>
 102134c:	008040f4 	movhi	r2,259
 1021350:	108f7e04 	addi	r2,r2,15864
 1021354:	010040f4 	movhi	r4,259
 1021358:	210f8004 	addi	r4,r4,15872
 102135c:	100b883a 	mov	r5,r2
 1021360:	102101c0 	call	102101c <myprintf>

	 return bSuccess;
 1021364:	e0bfff17 	ldw	r2,-4(fp)
}
 1021368:	e037883a 	mov	sp,fp
 102136c:	dfc00117 	ldw	ra,4(sp)
 1021370:	df000017 	ldw	fp,0(sp)
 1021374:	dec00204 	addi	sp,sp,8
 1021378:	f800283a 	ret

0102137c <main>:


int main()
{
 102137c:	deffef04 	addi	sp,sp,-68
 1021380:	dfc01015 	stw	ra,64(sp)
 1021384:	df000f15 	stw	fp,60(sp)
 1021388:	dc000e15 	stw	r16,56(sp)
 102138c:	df000f04 	addi	fp,sp,60
   bool     bPass,bSuccess;
   alt_16   data_x,data_y,data_z,temp_data;
   alt_u8   temp_reg[2],data[6],status;
   alt_u16  nIndex=1;
 1021390:	00800044 	movi	r2,1
 1021394:	e0bff30d 	sth	r2,-52(fp)
   alt_16   x, y, z;
   int      i,j;
   float    temp;

   //Configuration Register
   printf("== Gsensor Demo ==\r\n");
 1021398:	010040f4 	movhi	r4,259
 102139c:	210f8704 	addi	r4,r4,15900
 10213a0:	1022e740 	call	1022e74 <puts>
   bSuccess=LIS2DH12_Init();
 10213a4:	10212980 	call	1021298 <LIS2DH12_Init>
 10213a8:	e0bff615 	stw	r2,-40(fp)
   usleep(2000);
 10213ac:	0101f404 	movi	r4,2000
 10213b0:	10319ec0 	call	10319ec <usleep>
   while(bSuccess){
 10213b4:	0000ff06 	br	10217b4 <main+0x438>
	    bPass = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS, STATUS_REG, &status, sizeof(status));
 10213b8:	e0fffe04 	addi	r3,fp,-8
 10213bc:	00800044 	movi	r2,1
 10213c0:	d8800015 	stw	r2,0(sp)
 10213c4:	01004134 	movhi	r4,260
 10213c8:	21040004 	addi	r4,r4,4096
 10213cc:	01400c84 	movi	r5,50
 10213d0:	018009c4 	movi	r6,39
 10213d4:	180f883a 	mov	r7,r3
 10213d8:	10208c00 	call	10208c0 <OC_I2C_Read>
 10213dc:	e0bff215 	stw	r2,-56(fp)
	    if (bPass){
 10213e0:	e0bff217 	ldw	r2,-56(fp)
 10213e4:	10000526 	beq	r2,zero,10213fc <main+0x80>
	    	if (!(status & 0x04))
 10213e8:	e0bffe03 	ldbu	r2,-8(fp)
 10213ec:	10803fcc 	andi	r2,r2,255
 10213f0:	1080010c 	andi	r2,r2,4
 10213f4:	1000021e 	bne	r2,zero,1021400 <main+0x84>
		    	continue;
 10213f8:	0000ee06 	br	10217b4 <main+0x438>
	    }else{
	    	continue;
 10213fc:	0000ed06 	br	10217b4 <main+0x438>
	    }
	   // Read Temperature
	    for(j=0; j<2;j++)
 1021400:	e03ff515 	stw	zero,-44(fp)
 1021404:	00001106 	br	102144c <main+0xd0>
    	bPass = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS,OUT_TEMP_L+j, &temp_reg[j], 1);
 1021408:	e0bff517 	ldw	r2,-44(fp)
 102140c:	10800304 	addi	r2,r2,12
 1021410:	11803fcc 	andi	r6,r2,255
 1021414:	e0fffc04 	addi	r3,fp,-16
 1021418:	e0bff517 	ldw	r2,-44(fp)
 102141c:	1887883a 	add	r3,r3,r2
 1021420:	00800044 	movi	r2,1
 1021424:	d8800015 	stw	r2,0(sp)
 1021428:	01004134 	movhi	r4,260
 102142c:	21040004 	addi	r4,r4,4096
 1021430:	01400c84 	movi	r5,50
 1021434:	180f883a 	mov	r7,r3
 1021438:	10208c00 	call	10208c0 <OC_I2C_Read>
 102143c:	e0bff215 	stw	r2,-56(fp)
		    	continue;
	    }else{
	    	continue;
	    }
	   // Read Temperature
	    for(j=0; j<2;j++)
 1021440:	e0bff517 	ldw	r2,-44(fp)
 1021444:	10800044 	addi	r2,r2,1
 1021448:	e0bff515 	stw	r2,-44(fp)
 102144c:	e0bff517 	ldw	r2,-44(fp)
 1021450:	10800090 	cmplti	r2,r2,2
 1021454:	103fec1e 	bne	r2,zero,1021408 <_gp+0xfffe3784>
    	bPass = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS,OUT_TEMP_L+j, &temp_reg[j], 1);
    	if(bPass){
 1021458:	e0bff217 	ldw	r2,-56(fp)
 102145c:	10002726 	beq	r2,zero,10214fc <main+0x180>
		      temp_data = ((temp_reg[1]<<8)|temp_reg[0]);
 1021460:	e0bffc43 	ldbu	r2,-15(fp)
 1021464:	10803fcc 	andi	r2,r2,255
 1021468:	1004923a 	slli	r2,r2,8
 102146c:	1007883a 	mov	r3,r2
 1021470:	e0bffc03 	ldbu	r2,-16(fp)
 1021474:	10803fcc 	andi	r2,r2,255
 1021478:	1884b03a 	or	r2,r3,r2
 102147c:	e0bff70d 	sth	r2,-36(fp)
	          temp = (float)(temp_data/256.0);
 1021480:	e0bff70f 	ldh	r2,-36(fp)
 1021484:	1009883a 	mov	r4,r2
 1021488:	10229780 	call	1022978 <__floatsidf>
 102148c:	100b883a 	mov	r5,r2
 1021490:	180d883a 	mov	r6,r3
 1021494:	2809883a 	mov	r4,r5
 1021498:	300b883a 	mov	r5,r6
 102149c:	000d883a 	mov	r6,zero
 10214a0:	01d01c34 	movhi	r7,16496
 10214a4:	10219000 	call	1021900 <__divdf3>
 10214a8:	1009883a 	mov	r4,r2
 10214ac:	180b883a 	mov	r5,r3
 10214b0:	2005883a 	mov	r2,r4
 10214b4:	2807883a 	mov	r3,r5
 10214b8:	1009883a 	mov	r4,r2
 10214bc:	180b883a 	mov	r5,r3
 10214c0:	1022b580 	call	1022b58 <__truncdfsf2>
 10214c4:	1007883a 	mov	r3,r2
 10214c8:	e0fff815 	stw	r3,-32(fp)
	          printf("[%d]Temperature: %.2f *C \n",nIndex, temp);
 10214cc:	e43ff30b 	ldhu	r16,-52(fp)
 10214d0:	e13ff817 	ldw	r4,-32(fp)
 10214d4:	1022a480 	call	1022a48 <__extendsfdf2>
 10214d8:	100f883a 	mov	r7,r2
 10214dc:	1811883a 	mov	r8,r3
 10214e0:	010040f4 	movhi	r4,259
 10214e4:	210f8c04 	addi	r4,r4,15920
 10214e8:	800b883a 	mov	r5,r16
 10214ec:	380d883a 	mov	r6,r7
 10214f0:	400f883a 	mov	r7,r8
 10214f4:	1022d800 	call	1022d80 <printf>
 10214f8:	00000306 	br	1021508 <main+0x18c>
    	}else{
    	   	      printf("Read Temperature failed!\n");}
 10214fc:	010040f4 	movhi	r4,259
 1021500:	210f9304 	addi	r4,r4,15948
 1021504:	1022e740 	call	1022e74 <puts>

        // Read X/Y/Z-axis
    	for(i=0; i<6;i++)
 1021508:	e03ff415 	stw	zero,-48(fp)
 102150c:	00001106 	br	1021554 <main+0x1d8>
    		bPass = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS,OUT_X_L+i,  &data[i], 1);
 1021510:	e0bff417 	ldw	r2,-48(fp)
 1021514:	10800a04 	addi	r2,r2,40
 1021518:	11803fcc 	andi	r6,r2,255
 102151c:	e0fffc84 	addi	r3,fp,-14
 1021520:	e0bff417 	ldw	r2,-48(fp)
 1021524:	1887883a 	add	r3,r3,r2
 1021528:	00800044 	movi	r2,1
 102152c:	d8800015 	stw	r2,0(sp)
 1021530:	01004134 	movhi	r4,260
 1021534:	21040004 	addi	r4,r4,4096
 1021538:	01400c84 	movi	r5,50
 102153c:	180f883a 	mov	r7,r3
 1021540:	10208c00 	call	10208c0 <OC_I2C_Read>
 1021544:	e0bff215 	stw	r2,-56(fp)
	          printf("[%d]Temperature: %.2f *C \n",nIndex, temp);
    	}else{
    	   	      printf("Read Temperature failed!\n");}

        // Read X/Y/Z-axis
    	for(i=0; i<6;i++)
 1021548:	e0bff417 	ldw	r2,-48(fp)
 102154c:	10800044 	addi	r2,r2,1
 1021550:	e0bff415 	stw	r2,-48(fp)
 1021554:	e0bff417 	ldw	r2,-48(fp)
 1021558:	10800190 	cmplti	r2,r2,6
 102155c:	103fec1e 	bne	r2,zero,1021510 <_gp+0xfffe388c>
    		bPass = OC_I2C_Read(I2C_OPENCORES_0_BASE, Gsensor_I2C_ADRESS,OUT_X_L+i,  &data[i], 1);
    	if(bPass){
 1021560:	e0bff217 	ldw	r2,-56(fp)
 1021564:	10008a26 	beq	r2,zero,1021790 <main+0x414>
		      data_x = ((data[1]<<8)|data[0]);
 1021568:	e0bffcc3 	ldbu	r2,-13(fp)
 102156c:	10803fcc 	andi	r2,r2,255
 1021570:	1004923a 	slli	r2,r2,8
 1021574:	1007883a 	mov	r3,r2
 1021578:	e0bffc83 	ldbu	r2,-14(fp)
 102157c:	10803fcc 	andi	r2,r2,255
 1021580:	1884b03a 	or	r2,r3,r2
 1021584:	e0bff90d 	sth	r2,-28(fp)
		      data_y = ((data[3]<<8)|data[2]);
 1021588:	e0bffd43 	ldbu	r2,-11(fp)
 102158c:	10803fcc 	andi	r2,r2,255
 1021590:	1004923a 	slli	r2,r2,8
 1021594:	1007883a 	mov	r3,r2
 1021598:	e0bffd03 	ldbu	r2,-12(fp)
 102159c:	10803fcc 	andi	r2,r2,255
 10215a0:	1884b03a 	or	r2,r3,r2
 10215a4:	e0bff98d 	sth	r2,-26(fp)
		      data_z = ((data[5]<<8)|data[4]);
 10215a8:	e0bffdc3 	ldbu	r2,-9(fp)
 10215ac:	10803fcc 	andi	r2,r2,255
 10215b0:	1004923a 	slli	r2,r2,8
 10215b4:	1007883a 	mov	r3,r2
 10215b8:	e0bffd83 	ldbu	r2,-10(fp)
 10215bc:	10803fcc 	andi	r2,r2,255
 10215c0:	1884b03a 	or	r2,r3,r2
 10215c4:	e0bffa0d 	sth	r2,-24(fp)
	          x = (float)(data_x/16.0)*12.0;
 10215c8:	e0bff90f 	ldh	r2,-28(fp)
 10215cc:	1009883a 	mov	r4,r2
 10215d0:	10229780 	call	1022978 <__floatsidf>
 10215d4:	100b883a 	mov	r5,r2
 10215d8:	180d883a 	mov	r6,r3
 10215dc:	2809883a 	mov	r4,r5
 10215e0:	300b883a 	mov	r5,r6
 10215e4:	000d883a 	mov	r6,zero
 10215e8:	01d00c34 	movhi	r7,16432
 10215ec:	10219000 	call	1021900 <__divdf3>
 10215f0:	1009883a 	mov	r4,r2
 10215f4:	180b883a 	mov	r5,r3
 10215f8:	2005883a 	mov	r2,r4
 10215fc:	2807883a 	mov	r3,r5
 1021600:	1009883a 	mov	r4,r2
 1021604:	180b883a 	mov	r5,r3
 1021608:	1022b580 	call	1022b58 <__truncdfsf2>
 102160c:	1007883a 	mov	r3,r2
 1021610:	1809883a 	mov	r4,r3
 1021614:	1022a480 	call	1022a48 <__extendsfdf2>
 1021618:	100b883a 	mov	r5,r2
 102161c:	180d883a 	mov	r6,r3
 1021620:	2809883a 	mov	r4,r5
 1021624:	300b883a 	mov	r5,r6
 1021628:	000d883a 	mov	r6,zero
 102162c:	01d00a34 	movhi	r7,16424
 1021630:	10221cc0 	call	10221cc <__muldf3>
 1021634:	1009883a 	mov	r4,r2
 1021638:	180b883a 	mov	r5,r3
 102163c:	2005883a 	mov	r2,r4
 1021640:	2807883a 	mov	r3,r5
 1021644:	1009883a 	mov	r4,r2
 1021648:	180b883a 	mov	r5,r3
 102164c:	10228f00 	call	10228f0 <__fixdfsi>
 1021650:	e0bffa8d 	sth	r2,-22(fp)
	          y = (float)(data_y/16.0)*12.0;
 1021654:	e0bff98f 	ldh	r2,-26(fp)
 1021658:	1009883a 	mov	r4,r2
 102165c:	10229780 	call	1022978 <__floatsidf>
 1021660:	100b883a 	mov	r5,r2
 1021664:	180d883a 	mov	r6,r3
 1021668:	2809883a 	mov	r4,r5
 102166c:	300b883a 	mov	r5,r6
 1021670:	000d883a 	mov	r6,zero
 1021674:	01d00c34 	movhi	r7,16432
 1021678:	10219000 	call	1021900 <__divdf3>
 102167c:	1009883a 	mov	r4,r2
 1021680:	180b883a 	mov	r5,r3
 1021684:	2005883a 	mov	r2,r4
 1021688:	2807883a 	mov	r3,r5
 102168c:	1009883a 	mov	r4,r2
 1021690:	180b883a 	mov	r5,r3
 1021694:	1022b580 	call	1022b58 <__truncdfsf2>
 1021698:	1007883a 	mov	r3,r2
 102169c:	1809883a 	mov	r4,r3
 10216a0:	1022a480 	call	1022a48 <__extendsfdf2>
 10216a4:	100b883a 	mov	r5,r2
 10216a8:	180d883a 	mov	r6,r3
 10216ac:	2809883a 	mov	r4,r5
 10216b0:	300b883a 	mov	r5,r6
 10216b4:	000d883a 	mov	r6,zero
 10216b8:	01d00a34 	movhi	r7,16424
 10216bc:	10221cc0 	call	10221cc <__muldf3>
 10216c0:	1009883a 	mov	r4,r2
 10216c4:	180b883a 	mov	r5,r3
 10216c8:	2005883a 	mov	r2,r4
 10216cc:	2807883a 	mov	r3,r5
 10216d0:	1009883a 	mov	r4,r2
 10216d4:	180b883a 	mov	r5,r3
 10216d8:	10228f00 	call	10228f0 <__fixdfsi>
 10216dc:	e0bffb0d 	sth	r2,-20(fp)
	          z = (float)(data_z/16.0)*12.0;
 10216e0:	e0bffa0f 	ldh	r2,-24(fp)
 10216e4:	1009883a 	mov	r4,r2
 10216e8:	10229780 	call	1022978 <__floatsidf>
 10216ec:	100b883a 	mov	r5,r2
 10216f0:	180d883a 	mov	r6,r3
 10216f4:	2809883a 	mov	r4,r5
 10216f8:	300b883a 	mov	r5,r6
 10216fc:	000d883a 	mov	r6,zero
 1021700:	01d00c34 	movhi	r7,16432
 1021704:	10219000 	call	1021900 <__divdf3>
 1021708:	1009883a 	mov	r4,r2
 102170c:	180b883a 	mov	r5,r3
 1021710:	2005883a 	mov	r2,r4
 1021714:	2807883a 	mov	r3,r5
 1021718:	1009883a 	mov	r4,r2
 102171c:	180b883a 	mov	r5,r3
 1021720:	1022b580 	call	1022b58 <__truncdfsf2>
 1021724:	1007883a 	mov	r3,r2
 1021728:	1809883a 	mov	r4,r3
 102172c:	1022a480 	call	1022a48 <__extendsfdf2>
 1021730:	100b883a 	mov	r5,r2
 1021734:	180d883a 	mov	r6,r3
 1021738:	2809883a 	mov	r4,r5
 102173c:	300b883a 	mov	r5,r6
 1021740:	000d883a 	mov	r6,zero
 1021744:	01d00a34 	movhi	r7,16424
 1021748:	10221cc0 	call	10221cc <__muldf3>
 102174c:	1009883a 	mov	r4,r2
 1021750:	180b883a 	mov	r5,r3
 1021754:	2005883a 	mov	r2,r4
 1021758:	2807883a 	mov	r3,r5
 102175c:	1009883a 	mov	r4,r2
 1021760:	180b883a 	mov	r5,r3
 1021764:	10228f00 	call	10228f0 <__fixdfsi>
 1021768:	e0bffb8d 	sth	r2,-18(fp)
		      printf("   X=%dmg, Y=%dmg, Z=%dmg \r\n", x, y, z);
 102176c:	e17ffa8f 	ldh	r5,-22(fp)
 1021770:	e0fffb0f 	ldh	r3,-20(fp)
 1021774:	e0bffb8f 	ldh	r2,-18(fp)
 1021778:	010040f4 	movhi	r4,259
 102177c:	210f9a04 	addi	r4,r4,15976
 1021780:	180d883a 	mov	r6,r3
 1021784:	100f883a 	mov	r7,r2
 1021788:	1022d800 	call	1022d80 <printf>
 102178c:	00000306 	br	102179c <main+0x420>
    	}else{
   	              printf("Read Gsensor failed!\n");}
 1021790:	010040f4 	movhi	r4,259
 1021794:	210fa204 	addi	r4,r4,16008
 1021798:	1022e740 	call	1022e74 <puts>

        usleep(1000*2000);
 102179c:	010007f4 	movhi	r4,31
 10217a0:	21212004 	addi	r4,r4,-31616
 10217a4:	10319ec0 	call	10319ec <usleep>
        nIndex++;
 10217a8:	e0bff30b 	ldhu	r2,-52(fp)
 10217ac:	10800044 	addi	r2,r2,1
 10217b0:	e0bff30d 	sth	r2,-52(fp)

   //Configuration Register
   printf("== Gsensor Demo ==\r\n");
   bSuccess=LIS2DH12_Init();
   usleep(2000);
   while(bSuccess){
 10217b4:	e0bff617 	ldw	r2,-40(fp)
 10217b8:	103eff1e 	bne	r2,zero,10213b8 <_gp+0xfffe3734>

        usleep(1000*2000);
        nIndex++;
    }

 }
 10217bc:	e6ffff04 	addi	sp,fp,-4
 10217c0:	dfc00217 	ldw	ra,8(sp)
 10217c4:	df000117 	ldw	fp,4(sp)
 10217c8:	dc000017 	ldw	r16,0(sp)
 10217cc:	dec00304 	addi	sp,sp,12
 10217d0:	f800283a 	ret

010217d4 <udivmodsi4>:
 10217d4:	2900182e 	bgeu	r5,r4,1021838 <udivmodsi4+0x64>
 10217d8:	28001716 	blt	r5,zero,1021838 <udivmodsi4+0x64>
 10217dc:	00800804 	movi	r2,32
 10217e0:	00c00044 	movi	r3,1
 10217e4:	00000206 	br	10217f0 <udivmodsi4+0x1c>
 10217e8:	10001126 	beq	r2,zero,1021830 <udivmodsi4+0x5c>
 10217ec:	28000516 	blt	r5,zero,1021804 <udivmodsi4+0x30>
 10217f0:	294b883a 	add	r5,r5,r5
 10217f4:	10bfffc4 	addi	r2,r2,-1
 10217f8:	18c7883a 	add	r3,r3,r3
 10217fc:	293ffa36 	bltu	r5,r4,10217e8 <_gp+0xfffe3b64>
 1021800:	18000b26 	beq	r3,zero,1021830 <udivmodsi4+0x5c>
 1021804:	0005883a 	mov	r2,zero
 1021808:	21400236 	bltu	r4,r5,1021814 <udivmodsi4+0x40>
 102180c:	2149c83a 	sub	r4,r4,r5
 1021810:	10c4b03a 	or	r2,r2,r3
 1021814:	1806d07a 	srli	r3,r3,1
 1021818:	280ad07a 	srli	r5,r5,1
 102181c:	183ffa1e 	bne	r3,zero,1021808 <_gp+0xfffe3b84>
 1021820:	3000011e 	bne	r6,zero,1021828 <udivmodsi4+0x54>
 1021824:	f800283a 	ret
 1021828:	2005883a 	mov	r2,r4
 102182c:	f800283a 	ret
 1021830:	0005883a 	mov	r2,zero
 1021834:	003ffa06 	br	1021820 <_gp+0xfffe3b9c>
 1021838:	00c00044 	movi	r3,1
 102183c:	003ff106 	br	1021804 <_gp+0xfffe3b80>

01021840 <__divsi3>:
 1021840:	defffe04 	addi	sp,sp,-8
 1021844:	dfc00115 	stw	ra,4(sp)
 1021848:	dc000015 	stw	r16,0(sp)
 102184c:	20000b16 	blt	r4,zero,102187c <__divsi3+0x3c>
 1021850:	0021883a 	mov	r16,zero
 1021854:	28000c16 	blt	r5,zero,1021888 <__divsi3+0x48>
 1021858:	000d883a 	mov	r6,zero
 102185c:	10217d40 	call	10217d4 <udivmodsi4>
 1021860:	0407c83a 	sub	r3,zero,r16
 1021864:	1884f03a 	xor	r2,r3,r2
 1021868:	1405883a 	add	r2,r2,r16
 102186c:	dfc00117 	ldw	ra,4(sp)
 1021870:	dc000017 	ldw	r16,0(sp)
 1021874:	dec00204 	addi	sp,sp,8
 1021878:	f800283a 	ret
 102187c:	0109c83a 	sub	r4,zero,r4
 1021880:	04000044 	movi	r16,1
 1021884:	283ff40e 	bge	r5,zero,1021858 <_gp+0xfffe3bd4>
 1021888:	014bc83a 	sub	r5,zero,r5
 102188c:	8400005c 	xori	r16,r16,1
 1021890:	003ff106 	br	1021858 <_gp+0xfffe3bd4>

01021894 <__modsi3>:
 1021894:	defffd04 	addi	sp,sp,-12
 1021898:	dfc00215 	stw	ra,8(sp)
 102189c:	dc400115 	stw	r17,4(sp)
 10218a0:	dc000015 	stw	r16,0(sp)
 10218a4:	20000c16 	blt	r4,zero,10218d8 <__modsi3+0x44>
 10218a8:	0023883a 	mov	r17,zero
 10218ac:	0021883a 	mov	r16,zero
 10218b0:	28000d16 	blt	r5,zero,10218e8 <__modsi3+0x54>
 10218b4:	01800044 	movi	r6,1
 10218b8:	10217d40 	call	10217d4 <udivmodsi4>
 10218bc:	1404f03a 	xor	r2,r2,r16
 10218c0:	8885883a 	add	r2,r17,r2
 10218c4:	dfc00217 	ldw	ra,8(sp)
 10218c8:	dc400117 	ldw	r17,4(sp)
 10218cc:	dc000017 	ldw	r16,0(sp)
 10218d0:	dec00304 	addi	sp,sp,12
 10218d4:	f800283a 	ret
 10218d8:	0109c83a 	sub	r4,zero,r4
 10218dc:	04400044 	movi	r17,1
 10218e0:	043fffc4 	movi	r16,-1
 10218e4:	283ff30e 	bge	r5,zero,10218b4 <_gp+0xfffe3c30>
 10218e8:	014bc83a 	sub	r5,zero,r5
 10218ec:	003ff106 	br	10218b4 <_gp+0xfffe3c30>

010218f0 <__udivsi3>:
 10218f0:	000d883a 	mov	r6,zero
 10218f4:	10217d41 	jmpi	10217d4 <udivmodsi4>

010218f8 <__umodsi3>:
 10218f8:	01800044 	movi	r6,1
 10218fc:	10217d41 	jmpi	10217d4 <udivmodsi4>

01021900 <__divdf3>:
 1021900:	defff204 	addi	sp,sp,-56
 1021904:	dd000815 	stw	r20,32(sp)
 1021908:	2828d53a 	srli	r20,r5,20
 102190c:	dd800a15 	stw	r22,40(sp)
 1021910:	282cd7fa 	srli	r22,r5,31
 1021914:	dc000415 	stw	r16,16(sp)
 1021918:	04000434 	movhi	r16,16
 102191c:	df000c15 	stw	fp,48(sp)
 1021920:	dcc00715 	stw	r19,28(sp)
 1021924:	dc800615 	stw	r18,24(sp)
 1021928:	dc400515 	stw	r17,20(sp)
 102192c:	843fffc4 	addi	r16,r16,-1
 1021930:	dfc00d15 	stw	ra,52(sp)
 1021934:	ddc00b15 	stw	r23,44(sp)
 1021938:	dd400915 	stw	r21,36(sp)
 102193c:	a501ffcc 	andi	r20,r20,2047
 1021940:	2025883a 	mov	r18,r4
 1021944:	2027883a 	mov	r19,r4
 1021948:	2c22703a 	and	r17,r5,r16
 102194c:	b7003fcc 	andi	fp,r22,255
 1021950:	a0005e26 	beq	r20,zero,1021acc <__divdf3+0x1cc>
 1021954:	0081ffc4 	movi	r2,2047
 1021958:	a0803526 	beq	r20,r2,1021a30 <__divdf3+0x130>
 102195c:	8c000434 	orhi	r16,r17,16
 1021960:	2004d77a 	srli	r2,r4,29
 1021964:	802090fa 	slli	r16,r16,3
 1021968:	202690fa 	slli	r19,r4,3
 102196c:	a53f0044 	addi	r20,r20,-1023
 1021970:	80a2b03a 	or	r17,r16,r2
 1021974:	0025883a 	mov	r18,zero
 1021978:	0011883a 	mov	r8,zero
 102197c:	380ad53a 	srli	r5,r7,20
 1021980:	382ed7fa 	srli	r23,r7,31
 1021984:	04000434 	movhi	r16,16
 1021988:	843fffc4 	addi	r16,r16,-1
 102198c:	2941ffcc 	andi	r5,r5,2047
 1021990:	302b883a 	mov	r21,r6
 1021994:	3c20703a 	and	r16,r7,r16
 1021998:	ba403fcc 	andi	r9,r23,255
 102199c:	28006726 	beq	r5,zero,1021b3c <__divdf3+0x23c>
 10219a0:	0081ffc4 	movi	r2,2047
 10219a4:	28805f26 	beq	r5,r2,1021b24 <__divdf3+0x224>
 10219a8:	84000434 	orhi	r16,r16,16
 10219ac:	3004d77a 	srli	r2,r6,29
 10219b0:	802090fa 	slli	r16,r16,3
 10219b4:	302a90fa 	slli	r21,r6,3
 10219b8:	297f0044 	addi	r5,r5,-1023
 10219bc:	80a0b03a 	or	r16,r16,r2
 10219c0:	000f883a 	mov	r7,zero
 10219c4:	3c86b03a 	or	r3,r7,r18
 10219c8:	180690ba 	slli	r3,r3,2
 10219cc:	008040b4 	movhi	r2,258
 10219d0:	10867c04 	addi	r2,r2,6640
 10219d4:	1887883a 	add	r3,r3,r2
 10219d8:	18c00017 	ldw	r3,0(r3)
 10219dc:	b5c8f03a 	xor	r4,r22,r23
 10219e0:	200d883a 	mov	r6,r4
 10219e4:	24803fcc 	andi	r18,r4,255
 10219e8:	a169c83a 	sub	r20,r20,r5
 10219ec:	1800683a 	jmp	r3
 10219f0:	01021c38 	rdprs	r4,zero,2160
 10219f4:	01021a68 	cmpgeui	r4,zero,2153
 10219f8:	01021bfc 	xorhi	r4,zero,2159
 10219fc:	01021a4c 	andi	r4,zero,2153
 1021a00:	01021bfc 	xorhi	r4,zero,2159
 1021a04:	01021bd0 	cmplti	r4,zero,2159
 1021a08:	01021bfc 	xorhi	r4,zero,2159
 1021a0c:	01021a4c 	andi	r4,zero,2153
 1021a10:	01021a68 	cmpgeui	r4,zero,2153
 1021a14:	01021a68 	cmpgeui	r4,zero,2153
 1021a18:	01021bd0 	cmplti	r4,zero,2159
 1021a1c:	01021a4c 	andi	r4,zero,2153
 1021a20:	01021a5c 	xori	r4,zero,2153
 1021a24:	01021a5c 	xori	r4,zero,2153
 1021a28:	01021a5c 	xori	r4,zero,2153
 1021a2c:	01021c0c 	andi	r4,zero,2160
 1021a30:	8904b03a 	or	r2,r17,r4
 1021a34:	1000631e 	bne	r2,zero,1021bc4 <__divdf3+0x2c4>
 1021a38:	04800204 	movi	r18,8
 1021a3c:	0023883a 	mov	r17,zero
 1021a40:	0027883a 	mov	r19,zero
 1021a44:	02000084 	movi	r8,2
 1021a48:	003fcc06 	br	102197c <_gp+0xfffe3cf8>
 1021a4c:	8023883a 	mov	r17,r16
 1021a50:	a827883a 	mov	r19,r21
 1021a54:	4839883a 	mov	fp,r9
 1021a58:	3811883a 	mov	r8,r7
 1021a5c:	00800084 	movi	r2,2
 1021a60:	40812a1e 	bne	r8,r2,1021f0c <__divdf3+0x60c>
 1021a64:	e025883a 	mov	r18,fp
 1021a68:	9180004c 	andi	r6,r18,1
 1021a6c:	0101ffc4 	movi	r4,2047
 1021a70:	000b883a 	mov	r5,zero
 1021a74:	0027883a 	mov	r19,zero
 1021a78:	2008953a 	slli	r4,r4,20
 1021a7c:	30c03fcc 	andi	r3,r6,255
 1021a80:	04000434 	movhi	r16,16
 1021a84:	180697fa 	slli	r3,r3,31
 1021a88:	843fffc4 	addi	r16,r16,-1
 1021a8c:	2c20703a 	and	r16,r5,r16
 1021a90:	8120b03a 	or	r16,r16,r4
 1021a94:	80c6b03a 	or	r3,r16,r3
 1021a98:	9805883a 	mov	r2,r19
 1021a9c:	dfc00d17 	ldw	ra,52(sp)
 1021aa0:	df000c17 	ldw	fp,48(sp)
 1021aa4:	ddc00b17 	ldw	r23,44(sp)
 1021aa8:	dd800a17 	ldw	r22,40(sp)
 1021aac:	dd400917 	ldw	r21,36(sp)
 1021ab0:	dd000817 	ldw	r20,32(sp)
 1021ab4:	dcc00717 	ldw	r19,28(sp)
 1021ab8:	dc800617 	ldw	r18,24(sp)
 1021abc:	dc400517 	ldw	r17,20(sp)
 1021ac0:	dc000417 	ldw	r16,16(sp)
 1021ac4:	dec00e04 	addi	sp,sp,56
 1021ac8:	f800283a 	ret
 1021acc:	8904b03a 	or	r2,r17,r4
 1021ad0:	10003726 	beq	r2,zero,1021bb0 <__divdf3+0x2b0>
 1021ad4:	88011c26 	beq	r17,zero,1021f48 <__divdf3+0x648>
 1021ad8:	8809883a 	mov	r4,r17
 1021adc:	d9800315 	stw	r6,12(sp)
 1021ae0:	d9c00115 	stw	r7,4(sp)
 1021ae4:	1022cf00 	call	1022cf0 <__clzsi2>
 1021ae8:	d9800317 	ldw	r6,12(sp)
 1021aec:	d9c00117 	ldw	r7,4(sp)
 1021af0:	1007883a 	mov	r3,r2
 1021af4:	01000a04 	movi	r4,40
 1021af8:	1cfffe04 	addi	r19,r3,-8
 1021afc:	20c9c83a 	sub	r4,r4,r3
 1021b00:	8cca983a 	sll	r5,r17,r19
 1021b04:	9108d83a 	srl	r4,r18,r4
 1021b08:	94e6983a 	sll	r19,r18,r19
 1021b0c:	2162b03a 	or	r17,r4,r5
 1021b10:	053f0344 	movi	r20,-1011
 1021b14:	a0e9c83a 	sub	r20,r20,r3
 1021b18:	0025883a 	mov	r18,zero
 1021b1c:	0011883a 	mov	r8,zero
 1021b20:	003f9606 	br	102197c <_gp+0xfffe3cf8>
 1021b24:	8184b03a 	or	r2,r16,r6
 1021b28:	10001f1e 	bne	r2,zero,1021ba8 <__divdf3+0x2a8>
 1021b2c:	0021883a 	mov	r16,zero
 1021b30:	002b883a 	mov	r21,zero
 1021b34:	01c00084 	movi	r7,2
 1021b38:	003fa206 	br	10219c4 <_gp+0xfffe3d40>
 1021b3c:	8184b03a 	or	r2,r16,r6
 1021b40:	10001526 	beq	r2,zero,1021b98 <__divdf3+0x298>
 1021b44:	80010c26 	beq	r16,zero,1021f78 <__divdf3+0x678>
 1021b48:	8009883a 	mov	r4,r16
 1021b4c:	d9800315 	stw	r6,12(sp)
 1021b50:	da000215 	stw	r8,8(sp)
 1021b54:	da400015 	stw	r9,0(sp)
 1021b58:	1022cf00 	call	1022cf0 <__clzsi2>
 1021b5c:	d9800317 	ldw	r6,12(sp)
 1021b60:	da000217 	ldw	r8,8(sp)
 1021b64:	da400017 	ldw	r9,0(sp)
 1021b68:	1007883a 	mov	r3,r2
 1021b6c:	01000a04 	movi	r4,40
 1021b70:	1d7ffe04 	addi	r21,r3,-8
 1021b74:	20c9c83a 	sub	r4,r4,r3
 1021b78:	8560983a 	sll	r16,r16,r21
 1021b7c:	3108d83a 	srl	r4,r6,r4
 1021b80:	356a983a 	sll	r21,r6,r21
 1021b84:	2420b03a 	or	r16,r4,r16
 1021b88:	017f0344 	movi	r5,-1011
 1021b8c:	28cbc83a 	sub	r5,r5,r3
 1021b90:	000f883a 	mov	r7,zero
 1021b94:	003f8b06 	br	10219c4 <_gp+0xfffe3d40>
 1021b98:	0021883a 	mov	r16,zero
 1021b9c:	002b883a 	mov	r21,zero
 1021ba0:	01c00044 	movi	r7,1
 1021ba4:	003f8706 	br	10219c4 <_gp+0xfffe3d40>
 1021ba8:	01c000c4 	movi	r7,3
 1021bac:	003f8506 	br	10219c4 <_gp+0xfffe3d40>
 1021bb0:	04800104 	movi	r18,4
 1021bb4:	0023883a 	mov	r17,zero
 1021bb8:	0027883a 	mov	r19,zero
 1021bbc:	02000044 	movi	r8,1
 1021bc0:	003f6e06 	br	102197c <_gp+0xfffe3cf8>
 1021bc4:	04800304 	movi	r18,12
 1021bc8:	020000c4 	movi	r8,3
 1021bcc:	003f6b06 	br	102197c <_gp+0xfffe3cf8>
 1021bd0:	01400434 	movhi	r5,16
 1021bd4:	000d883a 	mov	r6,zero
 1021bd8:	297fffc4 	addi	r5,r5,-1
 1021bdc:	04ffffc4 	movi	r19,-1
 1021be0:	0101ffc4 	movi	r4,2047
 1021be4:	003fa406 	br	1021a78 <_gp+0xfffe3df4>
 1021be8:	043f0084 	movi	r16,-1022
 1021bec:	8521c83a 	sub	r16,r16,r20
 1021bf0:	00800e04 	movi	r2,56
 1021bf4:	1401200e 	bge	r2,r16,1022078 <__divdf3+0x778>
 1021bf8:	9180004c 	andi	r6,r18,1
 1021bfc:	0009883a 	mov	r4,zero
 1021c00:	000b883a 	mov	r5,zero
 1021c04:	0027883a 	mov	r19,zero
 1021c08:	003f9b06 	br	1021a78 <_gp+0xfffe3df4>
 1021c0c:	8880022c 	andhi	r2,r17,8
 1021c10:	1000c726 	beq	r2,zero,1021f30 <__divdf3+0x630>
 1021c14:	8080022c 	andhi	r2,r16,8
 1021c18:	1000c51e 	bne	r2,zero,1021f30 <__divdf3+0x630>
 1021c1c:	00800434 	movhi	r2,16
 1021c20:	81400234 	orhi	r5,r16,8
 1021c24:	10bfffc4 	addi	r2,r2,-1
 1021c28:	b80d883a 	mov	r6,r23
 1021c2c:	288a703a 	and	r5,r5,r2
 1021c30:	a827883a 	mov	r19,r21
 1021c34:	003fea06 	br	1021be0 <_gp+0xfffe3f5c>
 1021c38:	8440ea36 	bltu	r16,r17,1021fe4 <__divdf3+0x6e4>
 1021c3c:	8c00e826 	beq	r17,r16,1021fe0 <__divdf3+0x6e0>
 1021c40:	a53fffc4 	addi	r20,r20,-1
 1021c44:	882d883a 	mov	r22,r17
 1021c48:	000d883a 	mov	r6,zero
 1021c4c:	a804d63a 	srli	r2,r21,24
 1021c50:	8020923a 	slli	r16,r16,8
 1021c54:	b009883a 	mov	r4,r22
 1021c58:	d9800315 	stw	r6,12(sp)
 1021c5c:	1420b03a 	or	r16,r2,r16
 1021c60:	802ed43a 	srli	r23,r16,16
 1021c64:	873fffcc 	andi	fp,r16,65535
 1021c68:	a82a923a 	slli	r21,r21,8
 1021c6c:	b80b883a 	mov	r5,r23
 1021c70:	10218f00 	call	10218f0 <__udivsi3>
 1021c74:	b009883a 	mov	r4,r22
 1021c78:	b80b883a 	mov	r5,r23
 1021c7c:	1023883a 	mov	r17,r2
 1021c80:	10218f80 	call	10218f8 <__umodsi3>
 1021c84:	1004943a 	slli	r2,r2,16
 1021c88:	9808d43a 	srli	r4,r19,16
 1021c8c:	8f2d383a 	mul	r22,r17,fp
 1021c90:	d9800317 	ldw	r6,12(sp)
 1021c94:	1106b03a 	or	r3,r2,r4
 1021c98:	1d80062e 	bgeu	r3,r22,1021cb4 <__divdf3+0x3b4>
 1021c9c:	1c07883a 	add	r3,r3,r16
 1021ca0:	88bfffc4 	addi	r2,r17,-1
 1021ca4:	1c00dc36 	bltu	r3,r16,1022018 <__divdf3+0x718>
 1021ca8:	1d80db2e 	bgeu	r3,r22,1022018 <__divdf3+0x718>
 1021cac:	8c7fff84 	addi	r17,r17,-2
 1021cb0:	1c07883a 	add	r3,r3,r16
 1021cb4:	1dadc83a 	sub	r22,r3,r22
 1021cb8:	b009883a 	mov	r4,r22
 1021cbc:	b80b883a 	mov	r5,r23
 1021cc0:	d9800315 	stw	r6,12(sp)
 1021cc4:	10218f00 	call	10218f0 <__udivsi3>
 1021cc8:	b009883a 	mov	r4,r22
 1021ccc:	b80b883a 	mov	r5,r23
 1021cd0:	d8800015 	stw	r2,0(sp)
 1021cd4:	10218f80 	call	10218f8 <__umodsi3>
 1021cd8:	da400017 	ldw	r9,0(sp)
 1021cdc:	1004943a 	slli	r2,r2,16
 1021ce0:	9cffffcc 	andi	r19,r19,65535
 1021ce4:	4f07383a 	mul	r3,r9,fp
 1021ce8:	14c8b03a 	or	r4,r2,r19
 1021cec:	d9800317 	ldw	r6,12(sp)
 1021cf0:	20c0062e 	bgeu	r4,r3,1021d0c <__divdf3+0x40c>
 1021cf4:	2409883a 	add	r4,r4,r16
 1021cf8:	48bfffc4 	addi	r2,r9,-1
 1021cfc:	2400c436 	bltu	r4,r16,1022010 <__divdf3+0x710>
 1021d00:	20c0c32e 	bgeu	r4,r3,1022010 <__divdf3+0x710>
 1021d04:	4a7fff84 	addi	r9,r9,-2
 1021d08:	2409883a 	add	r4,r4,r16
 1021d0c:	8822943a 	slli	r17,r17,16
 1021d10:	a80ed43a 	srli	r7,r21,16
 1021d14:	aa3fffcc 	andi	r8,r21,65535
 1021d18:	4c62b03a 	or	r17,r9,r17
 1021d1c:	8816d43a 	srli	r11,r17,16
 1021d20:	897fffcc 	andi	r5,r17,65535
 1021d24:	2a15383a 	mul	r10,r5,r8
 1021d28:	5a19383a 	mul	r12,r11,r8
 1021d2c:	29cb383a 	mul	r5,r5,r7
 1021d30:	5012d43a 	srli	r9,r10,16
 1021d34:	20c5c83a 	sub	r2,r4,r3
 1021d38:	614b883a 	add	r5,r12,r5
 1021d3c:	2a4b883a 	add	r5,r5,r9
 1021d40:	59c7383a 	mul	r3,r11,r7
 1021d44:	2b00022e 	bgeu	r5,r12,1021d50 <__divdf3+0x450>
 1021d48:	01000074 	movhi	r4,1
 1021d4c:	1907883a 	add	r3,r3,r4
 1021d50:	2808d43a 	srli	r4,r5,16
 1021d54:	280a943a 	slli	r5,r5,16
 1021d58:	54ffffcc 	andi	r19,r10,65535
 1021d5c:	1907883a 	add	r3,r3,r4
 1021d60:	2ccb883a 	add	r5,r5,r19
 1021d64:	10c09336 	bltu	r2,r3,1021fb4 <__divdf3+0x6b4>
 1021d68:	10c0ad26 	beq	r2,r3,1022020 <__divdf3+0x720>
 1021d6c:	10c7c83a 	sub	r3,r2,r3
 1021d70:	3167c83a 	sub	r19,r6,r5
 1021d74:	34ed803a 	cmpltu	r22,r6,r19
 1021d78:	1dadc83a 	sub	r22,r3,r22
 1021d7c:	b400b226 	beq	r22,r16,1022048 <__divdf3+0x748>
 1021d80:	b009883a 	mov	r4,r22
 1021d84:	b80b883a 	mov	r5,r23
 1021d88:	d9c00115 	stw	r7,4(sp)
 1021d8c:	da000215 	stw	r8,8(sp)
 1021d90:	10218f00 	call	10218f0 <__udivsi3>
 1021d94:	b009883a 	mov	r4,r22
 1021d98:	b80b883a 	mov	r5,r23
 1021d9c:	d8800315 	stw	r2,12(sp)
 1021da0:	10218f80 	call	10218f8 <__umodsi3>
 1021da4:	d9800317 	ldw	r6,12(sp)
 1021da8:	1004943a 	slli	r2,r2,16
 1021dac:	9808d43a 	srli	r4,r19,16
 1021db0:	372d383a 	mul	r22,r6,fp
 1021db4:	d9c00117 	ldw	r7,4(sp)
 1021db8:	1106b03a 	or	r3,r2,r4
 1021dbc:	da000217 	ldw	r8,8(sp)
 1021dc0:	1d80062e 	bgeu	r3,r22,1021ddc <__divdf3+0x4dc>
 1021dc4:	1c07883a 	add	r3,r3,r16
 1021dc8:	30bfffc4 	addi	r2,r6,-1
 1021dcc:	1c00a036 	bltu	r3,r16,1022050 <__divdf3+0x750>
 1021dd0:	1d809f2e 	bgeu	r3,r22,1022050 <__divdf3+0x750>
 1021dd4:	31bfff84 	addi	r6,r6,-2
 1021dd8:	1c07883a 	add	r3,r3,r16
 1021ddc:	1dadc83a 	sub	r22,r3,r22
 1021de0:	b009883a 	mov	r4,r22
 1021de4:	b80b883a 	mov	r5,r23
 1021de8:	d9800315 	stw	r6,12(sp)
 1021dec:	d9c00115 	stw	r7,4(sp)
 1021df0:	da000215 	stw	r8,8(sp)
 1021df4:	10218f00 	call	10218f0 <__udivsi3>
 1021df8:	b009883a 	mov	r4,r22
 1021dfc:	b80b883a 	mov	r5,r23
 1021e00:	d8800015 	stw	r2,0(sp)
 1021e04:	10218f80 	call	10218f8 <__umodsi3>
 1021e08:	da400017 	ldw	r9,0(sp)
 1021e0c:	1004943a 	slli	r2,r2,16
 1021e10:	993fffcc 	andi	r4,r19,65535
 1021e14:	4f39383a 	mul	fp,r9,fp
 1021e18:	1106b03a 	or	r3,r2,r4
 1021e1c:	d9800317 	ldw	r6,12(sp)
 1021e20:	d9c00117 	ldw	r7,4(sp)
 1021e24:	da000217 	ldw	r8,8(sp)
 1021e28:	1f00062e 	bgeu	r3,fp,1021e44 <__divdf3+0x544>
 1021e2c:	1c07883a 	add	r3,r3,r16
 1021e30:	48bfffc4 	addi	r2,r9,-1
 1021e34:	1c008836 	bltu	r3,r16,1022058 <__divdf3+0x758>
 1021e38:	1f00872e 	bgeu	r3,fp,1022058 <__divdf3+0x758>
 1021e3c:	4a7fff84 	addi	r9,r9,-2
 1021e40:	1c07883a 	add	r3,r3,r16
 1021e44:	3008943a 	slli	r4,r6,16
 1021e48:	1f07c83a 	sub	r3,r3,fp
 1021e4c:	4926b03a 	or	r19,r9,r4
 1021e50:	993fffcc 	andi	r4,r19,65535
 1021e54:	980cd43a 	srli	r6,r19,16
 1021e58:	220b383a 	mul	r5,r4,r8
 1021e5c:	21c5383a 	mul	r2,r4,r7
 1021e60:	3211383a 	mul	r8,r6,r8
 1021e64:	2808d43a 	srli	r4,r5,16
 1021e68:	31cf383a 	mul	r7,r6,r7
 1021e6c:	4085883a 	add	r2,r8,r2
 1021e70:	1105883a 	add	r2,r2,r4
 1021e74:	1200022e 	bgeu	r2,r8,1021e80 <__divdf3+0x580>
 1021e78:	01000074 	movhi	r4,1
 1021e7c:	390f883a 	add	r7,r7,r4
 1021e80:	1008d43a 	srli	r4,r2,16
 1021e84:	1004943a 	slli	r2,r2,16
 1021e88:	297fffcc 	andi	r5,r5,65535
 1021e8c:	390f883a 	add	r7,r7,r4
 1021e90:	1145883a 	add	r2,r2,r5
 1021e94:	19c06536 	bltu	r3,r7,102202c <__divdf3+0x72c>
 1021e98:	19c09f26 	beq	r3,r7,1022118 <__divdf3+0x818>
 1021e9c:	9cc00054 	ori	r19,r19,1
 1021ea0:	a100ffc4 	addi	r4,r20,1023
 1021ea4:	013f500e 	bge	zero,r4,1021be8 <_gp+0xfffe3f64>
 1021ea8:	988001cc 	andi	r2,r19,7
 1021eac:	10000726 	beq	r2,zero,1021ecc <__divdf3+0x5cc>
 1021eb0:	98c003cc 	andi	r3,r19,15
 1021eb4:	00800104 	movi	r2,4
 1021eb8:	18800426 	beq	r3,r2,1021ecc <__divdf3+0x5cc>
 1021ebc:	9885883a 	add	r2,r19,r2
 1021ec0:	14e1803a 	cmpltu	r16,r2,r19
 1021ec4:	8c23883a 	add	r17,r17,r16
 1021ec8:	1027883a 	mov	r19,r2
 1021ecc:	8880402c 	andhi	r2,r17,256
 1021ed0:	10000426 	beq	r2,zero,1021ee4 <__divdf3+0x5e4>
 1021ed4:	00bfc034 	movhi	r2,65280
 1021ed8:	10bfffc4 	addi	r2,r2,-1
 1021edc:	a1010004 	addi	r4,r20,1024
 1021ee0:	88a2703a 	and	r17,r17,r2
 1021ee4:	0081ff84 	movi	r2,2046
 1021ee8:	113edf16 	blt	r2,r4,1021a68 <_gp+0xfffe3de4>
 1021eec:	9826d0fa 	srli	r19,r19,3
 1021ef0:	8804977a 	slli	r2,r17,29
 1021ef4:	8820927a 	slli	r16,r17,9
 1021ef8:	2101ffcc 	andi	r4,r4,2047
 1021efc:	14e6b03a 	or	r19,r2,r19
 1021f00:	800ad33a 	srli	r5,r16,12
 1021f04:	9180004c 	andi	r6,r18,1
 1021f08:	003edb06 	br	1021a78 <_gp+0xfffe3df4>
 1021f0c:	008000c4 	movi	r2,3
 1021f10:	4080a826 	beq	r8,r2,10221b4 <__divdf3+0x8b4>
 1021f14:	00800044 	movi	r2,1
 1021f18:	4080551e 	bne	r8,r2,1022070 <__divdf3+0x770>
 1021f1c:	e00d883a 	mov	r6,fp
 1021f20:	0009883a 	mov	r4,zero
 1021f24:	000b883a 	mov	r5,zero
 1021f28:	0027883a 	mov	r19,zero
 1021f2c:	003ed206 	br	1021a78 <_gp+0xfffe3df4>
 1021f30:	00800434 	movhi	r2,16
 1021f34:	89400234 	orhi	r5,r17,8
 1021f38:	10bfffc4 	addi	r2,r2,-1
 1021f3c:	b00d883a 	mov	r6,r22
 1021f40:	288a703a 	and	r5,r5,r2
 1021f44:	003f2606 	br	1021be0 <_gp+0xfffe3f5c>
 1021f48:	d9800315 	stw	r6,12(sp)
 1021f4c:	d9c00115 	stw	r7,4(sp)
 1021f50:	1022cf00 	call	1022cf0 <__clzsi2>
 1021f54:	10c00804 	addi	r3,r2,32
 1021f58:	010009c4 	movi	r4,39
 1021f5c:	d9800317 	ldw	r6,12(sp)
 1021f60:	d9c00117 	ldw	r7,4(sp)
 1021f64:	20fee30e 	bge	r4,r3,1021af4 <_gp+0xfffe3e70>
 1021f68:	117ffe04 	addi	r5,r2,-8
 1021f6c:	9162983a 	sll	r17,r18,r5
 1021f70:	0027883a 	mov	r19,zero
 1021f74:	003ee606 	br	1021b10 <_gp+0xfffe3e8c>
 1021f78:	3009883a 	mov	r4,r6
 1021f7c:	d9800315 	stw	r6,12(sp)
 1021f80:	da000215 	stw	r8,8(sp)
 1021f84:	da400015 	stw	r9,0(sp)
 1021f88:	1022cf00 	call	1022cf0 <__clzsi2>
 1021f8c:	10c00804 	addi	r3,r2,32
 1021f90:	010009c4 	movi	r4,39
 1021f94:	d9800317 	ldw	r6,12(sp)
 1021f98:	da000217 	ldw	r8,8(sp)
 1021f9c:	da400017 	ldw	r9,0(sp)
 1021fa0:	20fef20e 	bge	r4,r3,1021b6c <_gp+0xfffe3ee8>
 1021fa4:	10bffe04 	addi	r2,r2,-8
 1021fa8:	a8a0983a 	sll	r16,r21,r2
 1021fac:	002b883a 	mov	r21,zero
 1021fb0:	003ef506 	br	1021b88 <_gp+0xfffe3f04>
 1021fb4:	354d883a 	add	r6,r6,r21
 1021fb8:	3549803a 	cmpltu	r4,r6,r21
 1021fbc:	2409883a 	add	r4,r4,r16
 1021fc0:	2089883a 	add	r4,r4,r2
 1021fc4:	88bfffc4 	addi	r2,r17,-1
 1021fc8:	81000c2e 	bgeu	r16,r4,1021ffc <__divdf3+0x6fc>
 1021fcc:	20c04436 	bltu	r4,r3,10220e0 <__divdf3+0x7e0>
 1021fd0:	19006f26 	beq	r3,r4,1022190 <__divdf3+0x890>
 1021fd4:	20c7c83a 	sub	r3,r4,r3
 1021fd8:	1023883a 	mov	r17,r2
 1021fdc:	003f6406 	br	1021d70 <_gp+0xfffe40ec>
 1021fe0:	9d7f1736 	bltu	r19,r21,1021c40 <_gp+0xfffe3fbc>
 1021fe4:	9806d07a 	srli	r3,r19,1
 1021fe8:	880497fa 	slli	r2,r17,31
 1021fec:	980c97fa 	slli	r6,r19,31
 1021ff0:	882cd07a 	srli	r22,r17,1
 1021ff4:	18a6b03a 	or	r19,r3,r2
 1021ff8:	003f1406 	br	1021c4c <_gp+0xfffe3fc8>
 1021ffc:	243ff51e 	bne	r4,r16,1021fd4 <_gp+0xfffe4350>
 1022000:	357ff22e 	bgeu	r6,r21,1021fcc <_gp+0xfffe4348>
 1022004:	80c7c83a 	sub	r3,r16,r3
 1022008:	1023883a 	mov	r17,r2
 102200c:	003f5806 	br	1021d70 <_gp+0xfffe40ec>
 1022010:	1013883a 	mov	r9,r2
 1022014:	003f3d06 	br	1021d0c <_gp+0xfffe4088>
 1022018:	1023883a 	mov	r17,r2
 102201c:	003f2506 	br	1021cb4 <_gp+0xfffe4030>
 1022020:	317fe436 	bltu	r6,r5,1021fb4 <_gp+0xfffe4330>
 1022024:	0007883a 	mov	r3,zero
 1022028:	003f5106 	br	1021d70 <_gp+0xfffe40ec>
 102202c:	1c07883a 	add	r3,r3,r16
 1022030:	993fffc4 	addi	r4,r19,-1
 1022034:	1c000a2e 	bgeu	r3,r16,1022060 <__divdf3+0x760>
 1022038:	2027883a 	mov	r19,r4
 102203c:	19ff971e 	bne	r3,r7,1021e9c <_gp+0xfffe4218>
 1022040:	a8bf961e 	bne	r21,r2,1021e9c <_gp+0xfffe4218>
 1022044:	003f9606 	br	1021ea0 <_gp+0xfffe421c>
 1022048:	04ffffc4 	movi	r19,-1
 102204c:	003f9406 	br	1021ea0 <_gp+0xfffe421c>
 1022050:	100d883a 	mov	r6,r2
 1022054:	003f6106 	br	1021ddc <_gp+0xfffe4158>
 1022058:	1013883a 	mov	r9,r2
 102205c:	003f7906 	br	1021e44 <_gp+0xfffe41c0>
 1022060:	19c02636 	bltu	r3,r7,10220fc <__divdf3+0x7fc>
 1022064:	38c04d26 	beq	r7,r3,102219c <__divdf3+0x89c>
 1022068:	2027883a 	mov	r19,r4
 102206c:	003f8b06 	br	1021e9c <_gp+0xfffe4218>
 1022070:	e025883a 	mov	r18,fp
 1022074:	003f8a06 	br	1021ea0 <_gp+0xfffe421c>
 1022078:	008007c4 	movi	r2,31
 102207c:	14002a16 	blt	r2,r16,1022128 <__divdf3+0x828>
 1022080:	a5010784 	addi	r20,r20,1054
 1022084:	8d04983a 	sll	r2,r17,r20
 1022088:	9c06d83a 	srl	r3,r19,r16
 102208c:	9d28983a 	sll	r20,r19,r20
 1022090:	8c20d83a 	srl	r16,r17,r16
 1022094:	1886b03a 	or	r3,r3,r2
 1022098:	a004c03a 	cmpne	r2,r20,zero
 102209c:	1884b03a 	or	r2,r3,r2
 10220a0:	10c001cc 	andi	r3,r2,7
 10220a4:	18000726 	beq	r3,zero,10220c4 <__divdf3+0x7c4>
 10220a8:	110003cc 	andi	r4,r2,15
 10220ac:	00c00104 	movi	r3,4
 10220b0:	20c00426 	beq	r4,r3,10220c4 <__divdf3+0x7c4>
 10220b4:	10c00104 	addi	r3,r2,4
 10220b8:	1885803a 	cmpltu	r2,r3,r2
 10220bc:	80a1883a 	add	r16,r16,r2
 10220c0:	1805883a 	mov	r2,r3
 10220c4:	80c0202c 	andhi	r3,r16,128
 10220c8:	18002d26 	beq	r3,zero,1022180 <__divdf3+0x880>
 10220cc:	9180004c 	andi	r6,r18,1
 10220d0:	01000044 	movi	r4,1
 10220d4:	000b883a 	mov	r5,zero
 10220d8:	0027883a 	mov	r19,zero
 10220dc:	003e6606 	br	1021a78 <_gp+0xfffe3df4>
 10220e0:	354d883a 	add	r6,r6,r21
 10220e4:	356d803a 	cmpltu	r22,r6,r21
 10220e8:	b42d883a 	add	r22,r22,r16
 10220ec:	b12d883a 	add	r22,r22,r4
 10220f0:	8c7fff84 	addi	r17,r17,-2
 10220f4:	b0c7c83a 	sub	r3,r22,r3
 10220f8:	003f1d06 	br	1021d70 <_gp+0xfffe40ec>
 10220fc:	ad4b883a 	add	r5,r21,r21
 1022100:	2d6b803a 	cmpltu	r21,r5,r21
 1022104:	ac2b883a 	add	r21,r21,r16
 1022108:	1d47883a 	add	r3,r3,r21
 102210c:	993fff84 	addi	r4,r19,-2
 1022110:	282b883a 	mov	r21,r5
 1022114:	003fc806 	br	1022038 <_gp+0xfffe43b4>
 1022118:	103fc41e 	bne	r2,zero,102202c <_gp+0xfffe43a8>
 102211c:	002b883a 	mov	r21,zero
 1022120:	a8bf5e1e 	bne	r21,r2,1021e9c <_gp+0xfffe4218>
 1022124:	003f5e06 	br	1021ea0 <_gp+0xfffe421c>
 1022128:	00bef884 	movi	r2,-1054
 102212c:	1505c83a 	sub	r2,r2,r20
 1022130:	00c00804 	movi	r3,32
 1022134:	8884d83a 	srl	r2,r17,r2
 1022138:	80c01c26 	beq	r16,r3,10221ac <__divdf3+0x8ac>
 102213c:	a0c10f84 	addi	r3,r20,1086
 1022140:	88c6983a 	sll	r3,r17,r3
 1022144:	1cc6b03a 	or	r3,r3,r19
 1022148:	1806c03a 	cmpne	r3,r3,zero
 102214c:	1884b03a 	or	r2,r3,r2
 1022150:	140001cc 	andi	r16,r2,7
 1022154:	8000061e 	bne	r16,zero,1022170 <__divdf3+0x870>
 1022158:	000b883a 	mov	r5,zero
 102215c:	1004d0fa 	srli	r2,r2,3
 1022160:	9180004c 	andi	r6,r18,1
 1022164:	0009883a 	mov	r4,zero
 1022168:	1426b03a 	or	r19,r2,r16
 102216c:	003e4206 	br	1021a78 <_gp+0xfffe3df4>
 1022170:	110003cc 	andi	r4,r2,15
 1022174:	00c00104 	movi	r3,4
 1022178:	0021883a 	mov	r16,zero
 102217c:	20ffcd1e 	bne	r4,r3,10220b4 <_gp+0xfffe4430>
 1022180:	800a927a 	slli	r5,r16,9
 1022184:	8020977a 	slli	r16,r16,29
 1022188:	280ad33a 	srli	r5,r5,12
 102218c:	003ff306 	br	102215c <_gp+0xfffe44d8>
 1022190:	317fd336 	bltu	r6,r5,10220e0 <_gp+0xfffe445c>
 1022194:	1023883a 	mov	r17,r2
 1022198:	003fa206 	br	1022024 <_gp+0xfffe43a0>
 102219c:	a8bfd736 	bltu	r21,r2,10220fc <_gp+0xfffe4478>
 10221a0:	2027883a 	mov	r19,r4
 10221a4:	a8bf3d1e 	bne	r21,r2,1021e9c <_gp+0xfffe4218>
 10221a8:	003f3d06 	br	1021ea0 <_gp+0xfffe421c>
 10221ac:	0007883a 	mov	r3,zero
 10221b0:	003fe406 	br	1022144 <_gp+0xfffe44c0>
 10221b4:	00800434 	movhi	r2,16
 10221b8:	89400234 	orhi	r5,r17,8
 10221bc:	10bfffc4 	addi	r2,r2,-1
 10221c0:	e00d883a 	mov	r6,fp
 10221c4:	288a703a 	and	r5,r5,r2
 10221c8:	003e8506 	br	1021be0 <_gp+0xfffe3f5c>

010221cc <__muldf3>:
 10221cc:	defff204 	addi	sp,sp,-56
 10221d0:	2804d53a 	srli	r2,r5,20
 10221d4:	dd800a15 	stw	r22,40(sp)
 10221d8:	282cd7fa 	srli	r22,r5,31
 10221dc:	dc000415 	stw	r16,16(sp)
 10221e0:	04000434 	movhi	r16,16
 10221e4:	df000c15 	stw	fp,48(sp)
 10221e8:	dd000815 	stw	r20,32(sp)
 10221ec:	dcc00715 	stw	r19,28(sp)
 10221f0:	dc800615 	stw	r18,24(sp)
 10221f4:	dc400515 	stw	r17,20(sp)
 10221f8:	843fffc4 	addi	r16,r16,-1
 10221fc:	dfc00d15 	stw	ra,52(sp)
 1022200:	ddc00b15 	stw	r23,44(sp)
 1022204:	dd400915 	stw	r21,36(sp)
 1022208:	1501ffcc 	andi	r20,r2,2047
 102220c:	2023883a 	mov	r17,r4
 1022210:	2025883a 	mov	r18,r4
 1022214:	2c20703a 	and	r16,r5,r16
 1022218:	b027883a 	mov	r19,r22
 102221c:	b7003fcc 	andi	fp,r22,255
 1022220:	a0005926 	beq	r20,zero,1022388 <__muldf3+0x1bc>
 1022224:	0081ffc4 	movi	r2,2047
 1022228:	a0803426 	beq	r20,r2,10222fc <__muldf3+0x130>
 102222c:	84000434 	orhi	r16,r16,16
 1022230:	2004d77a 	srli	r2,r4,29
 1022234:	802090fa 	slli	r16,r16,3
 1022238:	202490fa 	slli	r18,r4,3
 102223c:	a53f0044 	addi	r20,r20,-1023
 1022240:	80a0b03a 	or	r16,r16,r2
 1022244:	002b883a 	mov	r21,zero
 1022248:	0015883a 	mov	r10,zero
 102224c:	3812d53a 	srli	r9,r7,20
 1022250:	3806d7fa 	srli	r3,r7,31
 1022254:	02000434 	movhi	r8,16
 1022258:	423fffc4 	addi	r8,r8,-1
 102225c:	4941ffcc 	andi	r5,r9,2047
 1022260:	302f883a 	mov	r23,r6
 1022264:	3a22703a 	and	r17,r7,r8
 1022268:	1ac03fcc 	andi	r11,r3,255
 102226c:	28006226 	beq	r5,zero,10223f8 <__muldf3+0x22c>
 1022270:	0081ffc4 	movi	r2,2047
 1022274:	28805a26 	beq	r5,r2,10223e0 <__muldf3+0x214>
 1022278:	8a000434 	orhi	r8,r17,16
 102227c:	3004d77a 	srli	r2,r6,29
 1022280:	401090fa 	slli	r8,r8,3
 1022284:	302e90fa 	slli	r23,r6,3
 1022288:	297f0044 	addi	r5,r5,-1023
 102228c:	40a2b03a 	or	r17,r8,r2
 1022290:	0013883a 	mov	r9,zero
 1022294:	4d4cb03a 	or	r6,r9,r21
 1022298:	300c90ba 	slli	r6,r6,2
 102229c:	020040b4 	movhi	r8,258
 10222a0:	4208af04 	addi	r8,r8,8892
 10222a4:	320d883a 	add	r6,r6,r8
 10222a8:	31800017 	ldw	r6,0(r6)
 10222ac:	a14b883a 	add	r5,r20,r5
 10222b0:	1dacf03a 	xor	r22,r3,r22
 10222b4:	2b000044 	addi	r12,r5,1
 10222b8:	3000683a 	jmp	r6
 10222bc:	010224f8 	rdprs	r4,zero,2195
 10222c0:	010224e4 	muli	r4,zero,2195
 10222c4:	010224e4 	muli	r4,zero,2195
 10222c8:	010224d0 	cmplti	r4,zero,2195
 10222cc:	01022318 	cmpnei	r4,zero,2188
 10222d0:	01022318 	cmpnei	r4,zero,2188
 10222d4:	010224b8 	rdprs	r4,zero,2194
 10222d8:	010224d0 	cmplti	r4,zero,2195
 10222dc:	01022318 	cmpnei	r4,zero,2188
 10222e0:	010224b8 	rdprs	r4,zero,2194
 10222e4:	01022318 	cmpnei	r4,zero,2188
 10222e8:	010224d0 	cmplti	r4,zero,2195
 10222ec:	0102231c 	xori	r4,zero,2188
 10222f0:	0102231c 	xori	r4,zero,2188
 10222f4:	0102231c 	xori	r4,zero,2188
 10222f8:	010226f4 	movhi	r4,2203
 10222fc:	8104b03a 	or	r2,r16,r4
 1022300:	10006a1e 	bne	r2,zero,10224ac <__muldf3+0x2e0>
 1022304:	05400204 	movi	r21,8
 1022308:	0021883a 	mov	r16,zero
 102230c:	0025883a 	mov	r18,zero
 1022310:	02800084 	movi	r10,2
 1022314:	003fcd06 	br	102224c <_gp+0xfffe45c8>
 1022318:	b039883a 	mov	fp,r22
 102231c:	00800084 	movi	r2,2
 1022320:	50804e1e 	bne	r10,r2,102245c <__muldf3+0x290>
 1022324:	e4c0004c 	andi	r19,fp,1
 1022328:	0101ffc4 	movi	r4,2047
 102232c:	0021883a 	mov	r16,zero
 1022330:	0025883a 	mov	r18,zero
 1022334:	2008953a 	slli	r4,r4,20
 1022338:	98c03fcc 	andi	r3,r19,255
 102233c:	01400434 	movhi	r5,16
 1022340:	297fffc4 	addi	r5,r5,-1
 1022344:	180697fa 	slli	r3,r3,31
 1022348:	8160703a 	and	r16,r16,r5
 102234c:	8120b03a 	or	r16,r16,r4
 1022350:	80c6b03a 	or	r3,r16,r3
 1022354:	9005883a 	mov	r2,r18
 1022358:	dfc00d17 	ldw	ra,52(sp)
 102235c:	df000c17 	ldw	fp,48(sp)
 1022360:	ddc00b17 	ldw	r23,44(sp)
 1022364:	dd800a17 	ldw	r22,40(sp)
 1022368:	dd400917 	ldw	r21,36(sp)
 102236c:	dd000817 	ldw	r20,32(sp)
 1022370:	dcc00717 	ldw	r19,28(sp)
 1022374:	dc800617 	ldw	r18,24(sp)
 1022378:	dc400517 	ldw	r17,20(sp)
 102237c:	dc000417 	ldw	r16,16(sp)
 1022380:	dec00e04 	addi	sp,sp,56
 1022384:	f800283a 	ret
 1022388:	8104b03a 	or	r2,r16,r4
 102238c:	10004226 	beq	r2,zero,1022498 <__muldf3+0x2cc>
 1022390:	8000f926 	beq	r16,zero,1022778 <__muldf3+0x5ac>
 1022394:	8009883a 	mov	r4,r16
 1022398:	d9800315 	stw	r6,12(sp)
 102239c:	d9c00015 	stw	r7,0(sp)
 10223a0:	1022cf00 	call	1022cf0 <__clzsi2>
 10223a4:	d9800317 	ldw	r6,12(sp)
 10223a8:	d9c00017 	ldw	r7,0(sp)
 10223ac:	1007883a 	mov	r3,r2
 10223b0:	01000a04 	movi	r4,40
 10223b4:	18bffe04 	addi	r2,r3,-8
 10223b8:	20c9c83a 	sub	r4,r4,r3
 10223bc:	80a0983a 	sll	r16,r16,r2
 10223c0:	8908d83a 	srl	r4,r17,r4
 10223c4:	88a4983a 	sll	r18,r17,r2
 10223c8:	2420b03a 	or	r16,r4,r16
 10223cc:	017f0344 	movi	r5,-1011
 10223d0:	28e9c83a 	sub	r20,r5,r3
 10223d4:	002b883a 	mov	r21,zero
 10223d8:	0015883a 	mov	r10,zero
 10223dc:	003f9b06 	br	102224c <_gp+0xfffe45c8>
 10223e0:	8984b03a 	or	r2,r17,r6
 10223e4:	10002a1e 	bne	r2,zero,1022490 <__muldf3+0x2c4>
 10223e8:	0023883a 	mov	r17,zero
 10223ec:	002f883a 	mov	r23,zero
 10223f0:	02400084 	movi	r9,2
 10223f4:	003fa706 	br	1022294 <_gp+0xfffe4610>
 10223f8:	8984b03a 	or	r2,r17,r6
 10223fc:	10002026 	beq	r2,zero,1022480 <__muldf3+0x2b4>
 1022400:	8800cc26 	beq	r17,zero,1022734 <__muldf3+0x568>
 1022404:	8809883a 	mov	r4,r17
 1022408:	d8c00215 	stw	r3,8(sp)
 102240c:	d9800315 	stw	r6,12(sp)
 1022410:	da800015 	stw	r10,0(sp)
 1022414:	dac00115 	stw	r11,4(sp)
 1022418:	1022cf00 	call	1022cf0 <__clzsi2>
 102241c:	d8c00217 	ldw	r3,8(sp)
 1022420:	d9800317 	ldw	r6,12(sp)
 1022424:	da800017 	ldw	r10,0(sp)
 1022428:	dac00117 	ldw	r11,4(sp)
 102242c:	1009883a 	mov	r4,r2
 1022430:	01400a04 	movi	r5,40
 1022434:	25fffe04 	addi	r23,r4,-8
 1022438:	290bc83a 	sub	r5,r5,r4
 102243c:	8dd0983a 	sll	r8,r17,r23
 1022440:	314ad83a 	srl	r5,r6,r5
 1022444:	35ee983a 	sll	r23,r6,r23
 1022448:	2a22b03a 	or	r17,r5,r8
 102244c:	017f0344 	movi	r5,-1011
 1022450:	290bc83a 	sub	r5,r5,r4
 1022454:	0013883a 	mov	r9,zero
 1022458:	003f8e06 	br	1022294 <_gp+0xfffe4610>
 102245c:	008000c4 	movi	r2,3
 1022460:	50811d26 	beq	r10,r2,10228d8 <__muldf3+0x70c>
 1022464:	00800044 	movi	r2,1
 1022468:	5080e01e 	bne	r10,r2,10227ec <__muldf3+0x620>
 102246c:	e0a6703a 	and	r19,fp,r2
 1022470:	0009883a 	mov	r4,zero
 1022474:	0021883a 	mov	r16,zero
 1022478:	0025883a 	mov	r18,zero
 102247c:	003fad06 	br	1022334 <_gp+0xfffe46b0>
 1022480:	0023883a 	mov	r17,zero
 1022484:	002f883a 	mov	r23,zero
 1022488:	02400044 	movi	r9,1
 102248c:	003f8106 	br	1022294 <_gp+0xfffe4610>
 1022490:	024000c4 	movi	r9,3
 1022494:	003f7f06 	br	1022294 <_gp+0xfffe4610>
 1022498:	05400104 	movi	r21,4
 102249c:	0021883a 	mov	r16,zero
 10224a0:	0025883a 	mov	r18,zero
 10224a4:	02800044 	movi	r10,1
 10224a8:	003f6806 	br	102224c <_gp+0xfffe45c8>
 10224ac:	05400304 	movi	r21,12
 10224b0:	028000c4 	movi	r10,3
 10224b4:	003f6506 	br	102224c <_gp+0xfffe45c8>
 10224b8:	04000434 	movhi	r16,16
 10224bc:	0027883a 	mov	r19,zero
 10224c0:	843fffc4 	addi	r16,r16,-1
 10224c4:	04bfffc4 	movi	r18,-1
 10224c8:	0101ffc4 	movi	r4,2047
 10224cc:	003f9906 	br	1022334 <_gp+0xfffe46b0>
 10224d0:	8821883a 	mov	r16,r17
 10224d4:	b825883a 	mov	r18,r23
 10224d8:	5839883a 	mov	fp,r11
 10224dc:	4815883a 	mov	r10,r9
 10224e0:	003f8e06 	br	102231c <_gp+0xfffe4698>
 10224e4:	8821883a 	mov	r16,r17
 10224e8:	b825883a 	mov	r18,r23
 10224ec:	b039883a 	mov	fp,r22
 10224f0:	4815883a 	mov	r10,r9
 10224f4:	003f8906 	br	102231c <_gp+0xfffe4698>
 10224f8:	b80cd43a 	srli	r6,r23,16
 10224fc:	9006d43a 	srli	r3,r18,16
 1022500:	90bfffcc 	andi	r2,r18,65535
 1022504:	bdffffcc 	andi	r23,r23,65535
 1022508:	b891383a 	mul	r8,r23,r2
 102250c:	b8c9383a 	mul	r4,r23,r3
 1022510:	309b383a 	mul	r13,r6,r2
 1022514:	400ed43a 	srli	r7,r8,16
 1022518:	30df383a 	mul	r15,r6,r3
 102251c:	235b883a 	add	r13,r4,r13
 1022520:	69db883a 	add	r13,r13,r7
 1022524:	6900022e 	bgeu	r13,r4,1022530 <__muldf3+0x364>
 1022528:	01000074 	movhi	r4,1
 102252c:	791f883a 	add	r15,r15,r4
 1022530:	8828d43a 	srli	r20,r17,16
 1022534:	8c7fffcc 	andi	r17,r17,65535
 1022538:	888f383a 	mul	r7,r17,r2
 102253c:	88d3383a 	mul	r9,r17,r3
 1022540:	a0a5383a 	mul	r18,r20,r2
 1022544:	3816d43a 	srli	r11,r7,16
 1022548:	6814943a 	slli	r10,r13,16
 102254c:	4ca5883a 	add	r18,r9,r18
 1022550:	423fffcc 	andi	r8,r8,65535
 1022554:	92e5883a 	add	r18,r18,r11
 1022558:	6808d43a 	srli	r4,r13,16
 102255c:	5215883a 	add	r10,r10,r8
 1022560:	a0c7383a 	mul	r3,r20,r3
 1022564:	9240022e 	bgeu	r18,r9,1022570 <__muldf3+0x3a4>
 1022568:	00800074 	movhi	r2,1
 102256c:	1887883a 	add	r3,r3,r2
 1022570:	802ad43a 	srli	r21,r16,16
 1022574:	80bfffcc 	andi	r2,r16,65535
 1022578:	b893383a 	mul	r9,r23,r2
 102257c:	3091383a 	mul	r8,r6,r2
 1022580:	bd6f383a 	mul	r23,r23,r21
 1022584:	9026943a 	slli	r19,r18,16
 1022588:	481ad43a 	srli	r13,r9,16
 102258c:	9024d43a 	srli	r18,r18,16
 1022590:	39ffffcc 	andi	r7,r7,65535
 1022594:	ba11883a 	add	r8,r23,r8
 1022598:	99e7883a 	add	r19,r19,r7
 102259c:	4351883a 	add	r8,r8,r13
 10225a0:	1c97883a 	add	r11,r3,r18
 10225a4:	354d383a 	mul	r6,r6,r21
 10225a8:	9925883a 	add	r18,r19,r4
 10225ac:	45c0022e 	bgeu	r8,r23,10225b8 <__muldf3+0x3ec>
 10225b0:	00c00074 	movhi	r3,1
 10225b4:	30cd883a 	add	r6,r6,r3
 10225b8:	8889383a 	mul	r4,r17,r2
 10225bc:	8d63383a 	mul	r17,r17,r21
 10225c0:	a085383a 	mul	r2,r20,r2
 10225c4:	200ed43a 	srli	r7,r4,16
 10225c8:	401cd43a 	srli	r14,r8,16
 10225cc:	401a943a 	slli	r13,r8,16
 10225d0:	8885883a 	add	r2,r17,r2
 10225d4:	4a3fffcc 	andi	r8,r9,65535
 10225d8:	11c5883a 	add	r2,r2,r7
 10225dc:	339d883a 	add	r14,r6,r14
 10225e0:	6a11883a 	add	r8,r13,r8
 10225e4:	a561383a 	mul	r16,r20,r21
 10225e8:	1440022e 	bgeu	r2,r17,10225f4 <__muldf3+0x428>
 10225ec:	00c00074 	movhi	r3,1
 10225f0:	80e1883a 	add	r16,r16,r3
 10225f4:	1006943a 	slli	r3,r2,16
 10225f8:	213fffcc 	andi	r4,r4,65535
 10225fc:	93db883a 	add	r13,r18,r15
 1022600:	1909883a 	add	r4,r3,r4
 1022604:	22c7883a 	add	r3,r4,r11
 1022608:	6cd3803a 	cmpltu	r9,r13,r19
 102260c:	6a09883a 	add	r4,r13,r8
 1022610:	1a5b883a 	add	r13,r3,r9
 1022614:	2211803a 	cmpltu	r8,r4,r8
 1022618:	734d883a 	add	r6,r14,r13
 102261c:	100ed43a 	srli	r7,r2,16
 1022620:	6a53803a 	cmpltu	r9,r13,r9
 1022624:	3205883a 	add	r2,r6,r8
 1022628:	1ac7803a 	cmpltu	r3,r3,r11
 102262c:	1211803a 	cmpltu	r8,r2,r8
 1022630:	48c6b03a 	or	r3,r9,r3
 1022634:	338d803a 	cmpltu	r6,r6,r14
 1022638:	19c7883a 	add	r3,r3,r7
 102263c:	418cb03a 	or	r6,r8,r6
 1022640:	1987883a 	add	r3,r3,r6
 1022644:	2024927a 	slli	r18,r4,9
 1022648:	1c07883a 	add	r3,r3,r16
 102264c:	1806927a 	slli	r3,r3,9
 1022650:	1020d5fa 	srli	r16,r2,23
 1022654:	2008d5fa 	srli	r4,r4,23
 1022658:	9294b03a 	or	r10,r18,r10
 102265c:	1004927a 	slli	r2,r2,9
 1022660:	5024c03a 	cmpne	r18,r10,zero
 1022664:	1c20b03a 	or	r16,r3,r16
 1022668:	9108b03a 	or	r4,r18,r4
 102266c:	80c0402c 	andhi	r3,r16,256
 1022670:	20a4b03a 	or	r18,r4,r2
 1022674:	18000726 	beq	r3,zero,1022694 <__muldf3+0x4c8>
 1022678:	9006d07a 	srli	r3,r18,1
 102267c:	800897fa 	slli	r4,r16,31
 1022680:	9080004c 	andi	r2,r18,1
 1022684:	8020d07a 	srli	r16,r16,1
 1022688:	10c4b03a 	or	r2,r2,r3
 102268c:	1124b03a 	or	r18,r2,r4
 1022690:	600b883a 	mov	r5,r12
 1022694:	2900ffc4 	addi	r4,r5,1023
 1022698:	01004b0e 	bge	zero,r4,10227c8 <__muldf3+0x5fc>
 102269c:	908001cc 	andi	r2,r18,7
 10226a0:	10000726 	beq	r2,zero,10226c0 <__muldf3+0x4f4>
 10226a4:	90c003cc 	andi	r3,r18,15
 10226a8:	00800104 	movi	r2,4
 10226ac:	18800426 	beq	r3,r2,10226c0 <__muldf3+0x4f4>
 10226b0:	9087883a 	add	r3,r18,r2
 10226b4:	1c85803a 	cmpltu	r2,r3,r18
 10226b8:	80a1883a 	add	r16,r16,r2
 10226bc:	1825883a 	mov	r18,r3
 10226c0:	8080402c 	andhi	r2,r16,256
 10226c4:	10000426 	beq	r2,zero,10226d8 <__muldf3+0x50c>
 10226c8:	00bfc034 	movhi	r2,65280
 10226cc:	10bfffc4 	addi	r2,r2,-1
 10226d0:	29010004 	addi	r4,r5,1024
 10226d4:	80a0703a 	and	r16,r16,r2
 10226d8:	0081ff84 	movi	r2,2046
 10226dc:	1100320e 	bge	r2,r4,10227a8 <__muldf3+0x5dc>
 10226e0:	b4c0004c 	andi	r19,r22,1
 10226e4:	0101ffc4 	movi	r4,2047
 10226e8:	0021883a 	mov	r16,zero
 10226ec:	0025883a 	mov	r18,zero
 10226f0:	003f1006 	br	1022334 <_gp+0xfffe46b0>
 10226f4:	8080022c 	andhi	r2,r16,8
 10226f8:	10000926 	beq	r2,zero,1022720 <__muldf3+0x554>
 10226fc:	8880022c 	andhi	r2,r17,8
 1022700:	1000071e 	bne	r2,zero,1022720 <__muldf3+0x554>
 1022704:	00800434 	movhi	r2,16
 1022708:	8c000234 	orhi	r16,r17,8
 102270c:	10bfffc4 	addi	r2,r2,-1
 1022710:	1827883a 	mov	r19,r3
 1022714:	80a0703a 	and	r16,r16,r2
 1022718:	b825883a 	mov	r18,r23
 102271c:	003f6a06 	br	10224c8 <_gp+0xfffe4844>
 1022720:	00800434 	movhi	r2,16
 1022724:	84000234 	orhi	r16,r16,8
 1022728:	10bfffc4 	addi	r2,r2,-1
 102272c:	80a0703a 	and	r16,r16,r2
 1022730:	003f6506 	br	10224c8 <_gp+0xfffe4844>
 1022734:	3009883a 	mov	r4,r6
 1022738:	d8c00215 	stw	r3,8(sp)
 102273c:	d9800315 	stw	r6,12(sp)
 1022740:	da800015 	stw	r10,0(sp)
 1022744:	dac00115 	stw	r11,4(sp)
 1022748:	1022cf00 	call	1022cf0 <__clzsi2>
 102274c:	11000804 	addi	r4,r2,32
 1022750:	014009c4 	movi	r5,39
 1022754:	d8c00217 	ldw	r3,8(sp)
 1022758:	d9800317 	ldw	r6,12(sp)
 102275c:	da800017 	ldw	r10,0(sp)
 1022760:	dac00117 	ldw	r11,4(sp)
 1022764:	293f320e 	bge	r5,r4,1022430 <_gp+0xfffe47ac>
 1022768:	10bffe04 	addi	r2,r2,-8
 102276c:	b8a2983a 	sll	r17,r23,r2
 1022770:	002f883a 	mov	r23,zero
 1022774:	003f3506 	br	102244c <_gp+0xfffe47c8>
 1022778:	d9800315 	stw	r6,12(sp)
 102277c:	d9c00015 	stw	r7,0(sp)
 1022780:	1022cf00 	call	1022cf0 <__clzsi2>
 1022784:	10c00804 	addi	r3,r2,32
 1022788:	010009c4 	movi	r4,39
 102278c:	d9800317 	ldw	r6,12(sp)
 1022790:	d9c00017 	ldw	r7,0(sp)
 1022794:	20ff060e 	bge	r4,r3,10223b0 <_gp+0xfffe472c>
 1022798:	10bffe04 	addi	r2,r2,-8
 102279c:	88a0983a 	sll	r16,r17,r2
 10227a0:	0025883a 	mov	r18,zero
 10227a4:	003f0906 	br	10223cc <_gp+0xfffe4748>
 10227a8:	9004d0fa 	srli	r2,r18,3
 10227ac:	8024977a 	slli	r18,r16,29
 10227b0:	8020927a 	slli	r16,r16,9
 10227b4:	2101ffcc 	andi	r4,r4,2047
 10227b8:	90a4b03a 	or	r18,r18,r2
 10227bc:	8020d33a 	srli	r16,r16,12
 10227c0:	b4c0004c 	andi	r19,r22,1
 10227c4:	003edb06 	br	1022334 <_gp+0xfffe46b0>
 10227c8:	00ff0084 	movi	r3,-1022
 10227cc:	1947c83a 	sub	r3,r3,r5
 10227d0:	00800e04 	movi	r2,56
 10227d4:	10c0080e 	bge	r2,r3,10227f8 <__muldf3+0x62c>
 10227d8:	b4c0004c 	andi	r19,r22,1
 10227dc:	0009883a 	mov	r4,zero
 10227e0:	0021883a 	mov	r16,zero
 10227e4:	0025883a 	mov	r18,zero
 10227e8:	003ed206 	br	1022334 <_gp+0xfffe46b0>
 10227ec:	600b883a 	mov	r5,r12
 10227f0:	e02d883a 	mov	r22,fp
 10227f4:	003fa706 	br	1022694 <_gp+0xfffe4a10>
 10227f8:	008007c4 	movi	r2,31
 10227fc:	10c01816 	blt	r2,r3,1022860 <__muldf3+0x694>
 1022800:	29410784 	addi	r5,r5,1054
 1022804:	8144983a 	sll	r2,r16,r5
 1022808:	90c8d83a 	srl	r4,r18,r3
 102280c:	914a983a 	sll	r5,r18,r5
 1022810:	80c6d83a 	srl	r3,r16,r3
 1022814:	2088b03a 	or	r4,r4,r2
 1022818:	2804c03a 	cmpne	r2,r5,zero
 102281c:	2084b03a 	or	r2,r4,r2
 1022820:	110001cc 	andi	r4,r2,7
 1022824:	20000726 	beq	r4,zero,1022844 <__muldf3+0x678>
 1022828:	114003cc 	andi	r5,r2,15
 102282c:	01000104 	movi	r4,4
 1022830:	29000426 	beq	r5,r4,1022844 <__muldf3+0x678>
 1022834:	11000104 	addi	r4,r2,4
 1022838:	2085803a 	cmpltu	r2,r4,r2
 102283c:	1887883a 	add	r3,r3,r2
 1022840:	2005883a 	mov	r2,r4
 1022844:	1900202c 	andhi	r4,r3,128
 1022848:	20001826 	beq	r4,zero,10228ac <__muldf3+0x6e0>
 102284c:	b4c0004c 	andi	r19,r22,1
 1022850:	01000044 	movi	r4,1
 1022854:	0021883a 	mov	r16,zero
 1022858:	0025883a 	mov	r18,zero
 102285c:	003eb506 	br	1022334 <_gp+0xfffe46b0>
 1022860:	00bef884 	movi	r2,-1054
 1022864:	1145c83a 	sub	r2,r2,r5
 1022868:	8088d83a 	srl	r4,r16,r2
 102286c:	00800804 	movi	r2,32
 1022870:	18801726 	beq	r3,r2,10228d0 <__muldf3+0x704>
 1022874:	28810f84 	addi	r2,r5,1086
 1022878:	8084983a 	sll	r2,r16,r2
 102287c:	1484b03a 	or	r2,r2,r18
 1022880:	1004c03a 	cmpne	r2,r2,zero
 1022884:	1104b03a 	or	r2,r2,r4
 1022888:	10c001cc 	andi	r3,r2,7
 102288c:	18000b1e 	bne	r3,zero,10228bc <__muldf3+0x6f0>
 1022890:	0021883a 	mov	r16,zero
 1022894:	1004d0fa 	srli	r2,r2,3
 1022898:	b4c0004c 	andi	r19,r22,1
 102289c:	0009883a 	mov	r4,zero
 10228a0:	10e4b03a 	or	r18,r2,r3
 10228a4:	003ea306 	br	1022334 <_gp+0xfffe46b0>
 10228a8:	0007883a 	mov	r3,zero
 10228ac:	1820927a 	slli	r16,r3,9
 10228b0:	1806977a 	slli	r3,r3,29
 10228b4:	8020d33a 	srli	r16,r16,12
 10228b8:	003ff606 	br	1022894 <_gp+0xfffe4c10>
 10228bc:	110003cc 	andi	r4,r2,15
 10228c0:	00c00104 	movi	r3,4
 10228c4:	20fff826 	beq	r4,r3,10228a8 <_gp+0xfffe4c24>
 10228c8:	0007883a 	mov	r3,zero
 10228cc:	003fd906 	br	1022834 <_gp+0xfffe4bb0>
 10228d0:	0005883a 	mov	r2,zero
 10228d4:	003fe906 	br	102287c <_gp+0xfffe4bf8>
 10228d8:	00800434 	movhi	r2,16
 10228dc:	84000234 	orhi	r16,r16,8
 10228e0:	10bfffc4 	addi	r2,r2,-1
 10228e4:	e4c0004c 	andi	r19,fp,1
 10228e8:	80a0703a 	and	r16,r16,r2
 10228ec:	003ef606 	br	10224c8 <_gp+0xfffe4844>

010228f0 <__fixdfsi>:
 10228f0:	2806d53a 	srli	r3,r5,20
 10228f4:	00800434 	movhi	r2,16
 10228f8:	10bfffc4 	addi	r2,r2,-1
 10228fc:	18c1ffcc 	andi	r3,r3,2047
 1022900:	0180ff84 	movi	r6,1022
 1022904:	2884703a 	and	r2,r5,r2
 1022908:	280ad7fa 	srli	r5,r5,31
 102290c:	30c0130e 	bge	r6,r3,102295c <__fixdfsi+0x6c>
 1022910:	01810744 	movi	r6,1053
 1022914:	30c00d16 	blt	r6,r3,102294c <__fixdfsi+0x5c>
 1022918:	01810cc4 	movi	r6,1075
 102291c:	30cdc83a 	sub	r6,r6,r3
 1022920:	01c007c4 	movi	r7,31
 1022924:	10800434 	orhi	r2,r2,16
 1022928:	39800e0e 	bge	r7,r6,1022964 <__fixdfsi+0x74>
 102292c:	010104c4 	movi	r4,1043
 1022930:	20c7c83a 	sub	r3,r4,r3
 1022934:	10c6d83a 	srl	r3,r2,r3
 1022938:	29403fcc 	andi	r5,r5,255
 102293c:	0145c83a 	sub	r2,zero,r5
 1022940:	1884f03a 	xor	r2,r3,r2
 1022944:	1145883a 	add	r2,r2,r5
 1022948:	f800283a 	ret
 102294c:	00a00034 	movhi	r2,32768
 1022950:	10bfffc4 	addi	r2,r2,-1
 1022954:	2885883a 	add	r2,r5,r2
 1022958:	f800283a 	ret
 102295c:	0005883a 	mov	r2,zero
 1022960:	f800283a 	ret
 1022964:	18fefb44 	addi	r3,r3,-1043
 1022968:	2188d83a 	srl	r4,r4,r6
 102296c:	10c6983a 	sll	r3,r2,r3
 1022970:	20c6b03a 	or	r3,r4,r3
 1022974:	003ff006 	br	1022938 <_gp+0xfffe4cb4>

01022978 <__floatsidf>:
 1022978:	defffd04 	addi	sp,sp,-12
 102297c:	dc400115 	stw	r17,4(sp)
 1022980:	dfc00215 	stw	ra,8(sp)
 1022984:	dc000015 	stw	r16,0(sp)
 1022988:	2023883a 	mov	r17,r4
 102298c:	20001426 	beq	r4,zero,10229e0 <__floatsidf+0x68>
 1022990:	2020d7fa 	srli	r16,r4,31
 1022994:	80000126 	beq	r16,zero,102299c <__floatsidf+0x24>
 1022998:	0123c83a 	sub	r17,zero,r4
 102299c:	8809883a 	mov	r4,r17
 10229a0:	1022cf00 	call	1022cf0 <__clzsi2>
 10229a4:	01410784 	movi	r5,1054
 10229a8:	00c00284 	movi	r3,10
 10229ac:	288bc83a 	sub	r5,r5,r2
 10229b0:	18801c16 	blt	r3,r2,1022a24 <__floatsidf+0xac>
 10229b4:	00c002c4 	movi	r3,11
 10229b8:	1887c83a 	sub	r3,r3,r2
 10229bc:	88c8d83a 	srl	r4,r17,r3
 10229c0:	00c00434 	movhi	r3,16
 10229c4:	18ffffc4 	addi	r3,r3,-1
 10229c8:	10800544 	addi	r2,r2,21
 10229cc:	20c8703a 	and	r4,r4,r3
 10229d0:	8884983a 	sll	r2,r17,r2
 10229d4:	28c1ffcc 	andi	r3,r5,2047
 10229d8:	800d883a 	mov	r6,r16
 10229dc:	00000406 	br	10229f0 <__floatsidf+0x78>
 10229e0:	000d883a 	mov	r6,zero
 10229e4:	0007883a 	mov	r3,zero
 10229e8:	0009883a 	mov	r4,zero
 10229ec:	0005883a 	mov	r2,zero
 10229f0:	180a953a 	slli	r5,r3,20
 10229f4:	31803fcc 	andi	r6,r6,255
 10229f8:	00c00434 	movhi	r3,16
 10229fc:	300c97fa 	slli	r6,r6,31
 1022a00:	18ffffc4 	addi	r3,r3,-1
 1022a04:	20c6703a 	and	r3,r4,r3
 1022a08:	1946b03a 	or	r3,r3,r5
 1022a0c:	1986b03a 	or	r3,r3,r6
 1022a10:	dfc00217 	ldw	ra,8(sp)
 1022a14:	dc400117 	ldw	r17,4(sp)
 1022a18:	dc000017 	ldw	r16,0(sp)
 1022a1c:	dec00304 	addi	sp,sp,12
 1022a20:	f800283a 	ret
 1022a24:	10fffd44 	addi	r3,r2,-11
 1022a28:	88c8983a 	sll	r4,r17,r3
 1022a2c:	00800434 	movhi	r2,16
 1022a30:	10bfffc4 	addi	r2,r2,-1
 1022a34:	2088703a 	and	r4,r4,r2
 1022a38:	28c1ffcc 	andi	r3,r5,2047
 1022a3c:	800d883a 	mov	r6,r16
 1022a40:	0005883a 	mov	r2,zero
 1022a44:	003fea06 	br	10229f0 <_gp+0xfffe4d6c>

01022a48 <__extendsfdf2>:
 1022a48:	200ad5fa 	srli	r5,r4,23
 1022a4c:	defffd04 	addi	sp,sp,-12
 1022a50:	dc400115 	stw	r17,4(sp)
 1022a54:	29403fcc 	andi	r5,r5,255
 1022a58:	29800044 	addi	r6,r5,1
 1022a5c:	04402034 	movhi	r17,128
 1022a60:	dc000015 	stw	r16,0(sp)
 1022a64:	8c7fffc4 	addi	r17,r17,-1
 1022a68:	dfc00215 	stw	ra,8(sp)
 1022a6c:	31803fcc 	andi	r6,r6,255
 1022a70:	00800044 	movi	r2,1
 1022a74:	8922703a 	and	r17,r17,r4
 1022a78:	2020d7fa 	srli	r16,r4,31
 1022a7c:	1180110e 	bge	r2,r6,1022ac4 <__extendsfdf2+0x7c>
 1022a80:	880ed0fa 	srli	r7,r17,3
 1022a84:	8822977a 	slli	r17,r17,29
 1022a88:	2940e004 	addi	r5,r5,896
 1022a8c:	2941ffcc 	andi	r5,r5,2047
 1022a90:	280c953a 	slli	r6,r5,20
 1022a94:	01400434 	movhi	r5,16
 1022a98:	800697fa 	slli	r3,r16,31
 1022a9c:	297fffc4 	addi	r5,r5,-1
 1022aa0:	394a703a 	and	r5,r7,r5
 1022aa4:	298ab03a 	or	r5,r5,r6
 1022aa8:	8805883a 	mov	r2,r17
 1022aac:	28c6b03a 	or	r3,r5,r3
 1022ab0:	dfc00217 	ldw	ra,8(sp)
 1022ab4:	dc400117 	ldw	r17,4(sp)
 1022ab8:	dc000017 	ldw	r16,0(sp)
 1022abc:	dec00304 	addi	sp,sp,12
 1022ac0:	f800283a 	ret
 1022ac4:	2800111e 	bne	r5,zero,1022b0c <__extendsfdf2+0xc4>
 1022ac8:	88001c26 	beq	r17,zero,1022b3c <__extendsfdf2+0xf4>
 1022acc:	8809883a 	mov	r4,r17
 1022ad0:	1022cf00 	call	1022cf0 <__clzsi2>
 1022ad4:	00c00284 	movi	r3,10
 1022ad8:	18801b16 	blt	r3,r2,1022b48 <__extendsfdf2+0x100>
 1022adc:	01c002c4 	movi	r7,11
 1022ae0:	388fc83a 	sub	r7,r7,r2
 1022ae4:	10c00544 	addi	r3,r2,21
 1022ae8:	89ced83a 	srl	r7,r17,r7
 1022aec:	88e2983a 	sll	r17,r17,r3
 1022af0:	0180e244 	movi	r6,905
 1022af4:	308bc83a 	sub	r5,r6,r2
 1022af8:	01800434 	movhi	r6,16
 1022afc:	31bfffc4 	addi	r6,r6,-1
 1022b00:	398e703a 	and	r7,r7,r6
 1022b04:	2941ffcc 	andi	r5,r5,2047
 1022b08:	003fe006 	br	1022a8c <_gp+0xfffe4e08>
 1022b0c:	88000826 	beq	r17,zero,1022b30 <__extendsfdf2+0xe8>
 1022b10:	880ed0fa 	srli	r7,r17,3
 1022b14:	00800434 	movhi	r2,16
 1022b18:	10bfffc4 	addi	r2,r2,-1
 1022b1c:	39c00234 	orhi	r7,r7,8
 1022b20:	8822977a 	slli	r17,r17,29
 1022b24:	388e703a 	and	r7,r7,r2
 1022b28:	0141ffc4 	movi	r5,2047
 1022b2c:	003fd706 	br	1022a8c <_gp+0xfffe4e08>
 1022b30:	0141ffc4 	movi	r5,2047
 1022b34:	000f883a 	mov	r7,zero
 1022b38:	003fd406 	br	1022a8c <_gp+0xfffe4e08>
 1022b3c:	000b883a 	mov	r5,zero
 1022b40:	000f883a 	mov	r7,zero
 1022b44:	003fd106 	br	1022a8c <_gp+0xfffe4e08>
 1022b48:	11fffd44 	addi	r7,r2,-11
 1022b4c:	89ce983a 	sll	r7,r17,r7
 1022b50:	0023883a 	mov	r17,zero
 1022b54:	003fe606 	br	1022af0 <_gp+0xfffe4e6c>

01022b58 <__truncdfsf2>:
 1022b58:	2810d53a 	srli	r8,r5,20
 1022b5c:	01c00434 	movhi	r7,16
 1022b60:	39ffffc4 	addi	r7,r7,-1
 1022b64:	29ce703a 	and	r7,r5,r7
 1022b68:	380e90fa 	slli	r7,r7,3
 1022b6c:	4201ffcc 	andi	r8,r8,2047
 1022b70:	200cd77a 	srli	r6,r4,29
 1022b74:	42400044 	addi	r9,r8,1
 1022b78:	4a41ffcc 	andi	r9,r9,2047
 1022b7c:	00800044 	movi	r2,1
 1022b80:	398cb03a 	or	r6,r7,r6
 1022b84:	280ad7fa 	srli	r5,r5,31
 1022b88:	200e90fa 	slli	r7,r4,3
 1022b8c:	1240230e 	bge	r2,r9,1022c1c <__truncdfsf2+0xc4>
 1022b90:	40ff2004 	addi	r3,r8,-896
 1022b94:	00803f84 	movi	r2,254
 1022b98:	10c01516 	blt	r2,r3,1022bf0 <__truncdfsf2+0x98>
 1022b9c:	00c02d0e 	bge	zero,r3,1022c54 <__truncdfsf2+0xfc>
 1022ba0:	200891ba 	slli	r4,r4,6
 1022ba4:	300c90fa 	slli	r6,r6,3
 1022ba8:	380ed77a 	srli	r7,r7,29
 1022bac:	2008c03a 	cmpne	r4,r4,zero
 1022bb0:	310cb03a 	or	r6,r6,r4
 1022bb4:	31ccb03a 	or	r6,r6,r7
 1022bb8:	308001cc 	andi	r2,r6,7
 1022bbc:	10000426 	beq	r2,zero,1022bd0 <__truncdfsf2+0x78>
 1022bc0:	310003cc 	andi	r4,r6,15
 1022bc4:	00800104 	movi	r2,4
 1022bc8:	20800126 	beq	r4,r2,1022bd0 <__truncdfsf2+0x78>
 1022bcc:	31800104 	addi	r6,r6,4
 1022bd0:	3081002c 	andhi	r2,r6,1024
 1022bd4:	10002326 	beq	r2,zero,1022c64 <__truncdfsf2+0x10c>
 1022bd8:	18c00044 	addi	r3,r3,1
 1022bdc:	00803fc4 	movi	r2,255
 1022be0:	18800326 	beq	r3,r2,1022bf0 <__truncdfsf2+0x98>
 1022be4:	300c91ba 	slli	r6,r6,6
 1022be8:	300cd27a 	srli	r6,r6,9
 1022bec:	00000206 	br	1022bf8 <__truncdfsf2+0xa0>
 1022bf0:	00ffffc4 	movi	r3,-1
 1022bf4:	000d883a 	mov	r6,zero
 1022bf8:	18c03fcc 	andi	r3,r3,255
 1022bfc:	180895fa 	slli	r4,r3,23
 1022c00:	00c02034 	movhi	r3,128
 1022c04:	280a97fa 	slli	r5,r5,31
 1022c08:	18ffffc4 	addi	r3,r3,-1
 1022c0c:	30c6703a 	and	r3,r6,r3
 1022c10:	1906b03a 	or	r3,r3,r4
 1022c14:	1944b03a 	or	r2,r3,r5
 1022c18:	f800283a 	ret
 1022c1c:	4000071e 	bne	r8,zero,1022c3c <__truncdfsf2+0xe4>
 1022c20:	31ccb03a 	or	r6,r6,r7
 1022c24:	30000d1e 	bne	r6,zero,1022c5c <__truncdfsf2+0x104>
 1022c28:	0007883a 	mov	r3,zero
 1022c2c:	00802034 	movhi	r2,128
 1022c30:	10bfffc4 	addi	r2,r2,-1
 1022c34:	308c703a 	and	r6,r6,r2
 1022c38:	003fef06 	br	1022bf8 <_gp+0xfffe4f74>
 1022c3c:	31c8b03a 	or	r4,r6,r7
 1022c40:	203feb26 	beq	r4,zero,1022bf0 <_gp+0xfffe4f6c>
 1022c44:	300c90fa 	slli	r6,r6,3
 1022c48:	00c03fc4 	movi	r3,255
 1022c4c:	31808034 	orhi	r6,r6,512
 1022c50:	003fd906 	br	1022bb8 <_gp+0xfffe4f34>
 1022c54:	00bffa44 	movi	r2,-23
 1022c58:	1880090e 	bge	r3,r2,1022c80 <__truncdfsf2+0x128>
 1022c5c:	01800144 	movi	r6,5
 1022c60:	0007883a 	mov	r3,zero
 1022c64:	00803fc4 	movi	r2,255
 1022c68:	300cd0fa 	srli	r6,r6,3
 1022c6c:	18bfef1e 	bne	r3,r2,1022c2c <_gp+0xfffe4fa8>
 1022c70:	303fdf26 	beq	r6,zero,1022bf0 <_gp+0xfffe4f6c>
 1022c74:	31801034 	orhi	r6,r6,64
 1022c78:	00ffffc4 	movi	r3,-1
 1022c7c:	003feb06 	br	1022c2c <_gp+0xfffe4fa8>
 1022c80:	0080e784 	movi	r2,926
 1022c84:	1205c83a 	sub	r2,r2,r8
 1022c88:	00c007c4 	movi	r3,31
 1022c8c:	31802034 	orhi	r6,r6,128
 1022c90:	18800916 	blt	r3,r2,1022cb8 <__truncdfsf2+0x160>
 1022c94:	423f2084 	addi	r8,r8,-894
 1022c98:	3a06983a 	sll	r3,r7,r8
 1022c9c:	3210983a 	sll	r8,r6,r8
 1022ca0:	388ed83a 	srl	r7,r7,r2
 1022ca4:	180cc03a 	cmpne	r6,r3,zero
 1022ca8:	418cb03a 	or	r6,r8,r6
 1022cac:	31ccb03a 	or	r6,r6,r7
 1022cb0:	0007883a 	mov	r3,zero
 1022cb4:	003fc006 	br	1022bb8 <_gp+0xfffe4f34>
 1022cb8:	00c0df84 	movi	r3,894
 1022cbc:	1a07c83a 	sub	r3,r3,r8
 1022cc0:	01000804 	movi	r4,32
 1022cc4:	30c6d83a 	srl	r3,r6,r3
 1022cc8:	11000726 	beq	r2,r4,1022ce8 <__truncdfsf2+0x190>
 1022ccc:	423f2884 	addi	r8,r8,-862
 1022cd0:	3210983a 	sll	r8,r6,r8
 1022cd4:	41ceb03a 	or	r7,r8,r7
 1022cd8:	380ec03a 	cmpne	r7,r7,zero
 1022cdc:	38ccb03a 	or	r6,r7,r3
 1022ce0:	0007883a 	mov	r3,zero
 1022ce4:	003fb406 	br	1022bb8 <_gp+0xfffe4f34>
 1022ce8:	0011883a 	mov	r8,zero
 1022cec:	003ff906 	br	1022cd4 <_gp+0xfffe5050>

01022cf0 <__clzsi2>:
 1022cf0:	00bfffd4 	movui	r2,65535
 1022cf4:	11000b36 	bltu	r2,r4,1022d24 <__clzsi2+0x34>
 1022cf8:	00803fc4 	movi	r2,255
 1022cfc:	1100122e 	bgeu	r2,r4,1022d48 <__clzsi2+0x58>
 1022d00:	00c00204 	movi	r3,8
 1022d04:	01400604 	movi	r5,24
 1022d08:	20c8d83a 	srl	r4,r4,r3
 1022d0c:	008040f4 	movhi	r2,259
 1022d10:	108fa804 	addi	r2,r2,16032
 1022d14:	1109883a 	add	r4,r2,r4
 1022d18:	20800003 	ldbu	r2,0(r4)
 1022d1c:	2885c83a 	sub	r2,r5,r2
 1022d20:	f800283a 	ret
 1022d24:	00804034 	movhi	r2,256
 1022d28:	10bfffc4 	addi	r2,r2,-1
 1022d2c:	11000336 	bltu	r2,r4,1022d3c <__clzsi2+0x4c>
 1022d30:	00c00404 	movi	r3,16
 1022d34:	180b883a 	mov	r5,r3
 1022d38:	003ff306 	br	1022d08 <_gp+0xfffe5084>
 1022d3c:	00c00604 	movi	r3,24
 1022d40:	01400204 	movi	r5,8
 1022d44:	003ff006 	br	1022d08 <_gp+0xfffe5084>
 1022d48:	0007883a 	mov	r3,zero
 1022d4c:	01400804 	movi	r5,32
 1022d50:	003fed06 	br	1022d08 <_gp+0xfffe5084>

01022d54 <_printf_r>:
 1022d54:	defffd04 	addi	sp,sp,-12
 1022d58:	dfc00015 	stw	ra,0(sp)
 1022d5c:	d9800115 	stw	r6,4(sp)
 1022d60:	d9c00215 	stw	r7,8(sp)
 1022d64:	280d883a 	mov	r6,r5
 1022d68:	21400217 	ldw	r5,8(r4)
 1022d6c:	d9c00104 	addi	r7,sp,4
 1022d70:	1024f740 	call	1024f74 <___vfprintf_internal_r>
 1022d74:	dfc00017 	ldw	ra,0(sp)
 1022d78:	dec00304 	addi	sp,sp,12
 1022d7c:	f800283a 	ret

01022d80 <printf>:
 1022d80:	defffc04 	addi	sp,sp,-16
 1022d84:	dfc00015 	stw	ra,0(sp)
 1022d88:	d9400115 	stw	r5,4(sp)
 1022d8c:	d9800215 	stw	r6,8(sp)
 1022d90:	d9c00315 	stw	r7,12(sp)
 1022d94:	008040f4 	movhi	r2,259
 1022d98:	10972204 	addi	r2,r2,23688
 1022d9c:	10800017 	ldw	r2,0(r2)
 1022da0:	200b883a 	mov	r5,r4
 1022da4:	d9800104 	addi	r6,sp,4
 1022da8:	11000217 	ldw	r4,8(r2)
 1022dac:	1026f700 	call	1026f70 <__vfprintf_internal>
 1022db0:	dfc00017 	ldw	ra,0(sp)
 1022db4:	dec00404 	addi	sp,sp,16
 1022db8:	f800283a 	ret

01022dbc <_puts_r>:
 1022dbc:	defff604 	addi	sp,sp,-40
 1022dc0:	dc000715 	stw	r16,28(sp)
 1022dc4:	2021883a 	mov	r16,r4
 1022dc8:	2809883a 	mov	r4,r5
 1022dcc:	dc400815 	stw	r17,32(sp)
 1022dd0:	dfc00915 	stw	ra,36(sp)
 1022dd4:	2823883a 	mov	r17,r5
 1022dd8:	1022f4c0 	call	1022f4c <strlen>
 1022ddc:	00c040f4 	movhi	r3,259
 1022de0:	18d72204 	addi	r3,r3,23688
 1022de4:	18c00017 	ldw	r3,0(r3)
 1022de8:	11000044 	addi	r4,r2,1
 1022dec:	d8800115 	stw	r2,4(sp)
 1022df0:	18c00217 	ldw	r3,8(r3)
 1022df4:	014040f4 	movhi	r5,259
 1022df8:	294fe804 	addi	r5,r5,16288
 1022dfc:	1880030b 	ldhu	r2,12(r3)
 1022e00:	d9400215 	stw	r5,8(sp)
 1022e04:	d9000615 	stw	r4,24(sp)
 1022e08:	01400044 	movi	r5,1
 1022e0c:	01000084 	movi	r4,2
 1022e10:	d9000515 	stw	r4,20(sp)
 1022e14:	dc400015 	stw	r17,0(sp)
 1022e18:	d9400315 	stw	r5,12(sp)
 1022e1c:	dec00415 	stw	sp,16(sp)
 1022e20:	1108000c 	andi	r4,r2,8192
 1022e24:	2000061e 	bne	r4,zero,1022e40 <_puts_r+0x84>
 1022e28:	19401917 	ldw	r5,100(r3)
 1022e2c:	0137ffc4 	movi	r4,-8193
 1022e30:	10880014 	ori	r2,r2,8192
 1022e34:	2908703a 	and	r4,r5,r4
 1022e38:	1880030d 	sth	r2,12(r3)
 1022e3c:	19001915 	stw	r4,100(r3)
 1022e40:	81400217 	ldw	r5,8(r16)
 1022e44:	8009883a 	mov	r4,r16
 1022e48:	d9800404 	addi	r6,sp,16
 1022e4c:	10295280 	call	1029528 <__sfvwrite_r>
 1022e50:	1000061e 	bne	r2,zero,1022e6c <_puts_r+0xb0>
 1022e54:	00800284 	movi	r2,10
 1022e58:	dfc00917 	ldw	ra,36(sp)
 1022e5c:	dc400817 	ldw	r17,32(sp)
 1022e60:	dc000717 	ldw	r16,28(sp)
 1022e64:	dec00a04 	addi	sp,sp,40
 1022e68:	f800283a 	ret
 1022e6c:	00bfffc4 	movi	r2,-1
 1022e70:	003ff906 	br	1022e58 <_gp+0xfffe51d4>

01022e74 <puts>:
 1022e74:	008040f4 	movhi	r2,259
 1022e78:	10972204 	addi	r2,r2,23688
 1022e7c:	200b883a 	mov	r5,r4
 1022e80:	11000017 	ldw	r4,0(r2)
 1022e84:	1022dbc1 	jmpi	1022dbc <_puts_r>

01022e88 <_sprintf_r>:
 1022e88:	deffe404 	addi	sp,sp,-112
 1022e8c:	2807883a 	mov	r3,r5
 1022e90:	dfc01a15 	stw	ra,104(sp)
 1022e94:	d9c01b15 	stw	r7,108(sp)
 1022e98:	00a00034 	movhi	r2,32768
 1022e9c:	10bfffc4 	addi	r2,r2,-1
 1022ea0:	02008204 	movi	r8,520
 1022ea4:	d8800215 	stw	r2,8(sp)
 1022ea8:	d8800515 	stw	r2,20(sp)
 1022eac:	d80b883a 	mov	r5,sp
 1022eb0:	d9c01b04 	addi	r7,sp,108
 1022eb4:	00bfffc4 	movi	r2,-1
 1022eb8:	d8c00015 	stw	r3,0(sp)
 1022ebc:	d8c00415 	stw	r3,16(sp)
 1022ec0:	da00030d 	sth	r8,12(sp)
 1022ec4:	d880038d 	sth	r2,14(sp)
 1022ec8:	1022fe40 	call	1022fe4 <___svfprintf_internal_r>
 1022ecc:	d8c00017 	ldw	r3,0(sp)
 1022ed0:	18000005 	stb	zero,0(r3)
 1022ed4:	dfc01a17 	ldw	ra,104(sp)
 1022ed8:	dec01c04 	addi	sp,sp,112
 1022edc:	f800283a 	ret

01022ee0 <sprintf>:
 1022ee0:	deffe304 	addi	sp,sp,-116
 1022ee4:	2007883a 	mov	r3,r4
 1022ee8:	dfc01a15 	stw	ra,104(sp)
 1022eec:	d9801b15 	stw	r6,108(sp)
 1022ef0:	d9c01c15 	stw	r7,112(sp)
 1022ef4:	010040f4 	movhi	r4,259
 1022ef8:	21172204 	addi	r4,r4,23688
 1022efc:	21000017 	ldw	r4,0(r4)
 1022f00:	00a00034 	movhi	r2,32768
 1022f04:	10bfffc4 	addi	r2,r2,-1
 1022f08:	280d883a 	mov	r6,r5
 1022f0c:	02008204 	movi	r8,520
 1022f10:	d8800215 	stw	r2,8(sp)
 1022f14:	d8800515 	stw	r2,20(sp)
 1022f18:	d80b883a 	mov	r5,sp
 1022f1c:	d9c01b04 	addi	r7,sp,108
 1022f20:	00bfffc4 	movi	r2,-1
 1022f24:	d8c00015 	stw	r3,0(sp)
 1022f28:	d8c00415 	stw	r3,16(sp)
 1022f2c:	da00030d 	sth	r8,12(sp)
 1022f30:	d880038d 	sth	r2,14(sp)
 1022f34:	1022fe40 	call	1022fe4 <___svfprintf_internal_r>
 1022f38:	d8c00017 	ldw	r3,0(sp)
 1022f3c:	18000005 	stb	zero,0(r3)
 1022f40:	dfc01a17 	ldw	ra,104(sp)
 1022f44:	dec01d04 	addi	sp,sp,116
 1022f48:	f800283a 	ret

01022f4c <strlen>:
 1022f4c:	208000cc 	andi	r2,r4,3
 1022f50:	10002026 	beq	r2,zero,1022fd4 <strlen+0x88>
 1022f54:	20800007 	ldb	r2,0(r4)
 1022f58:	10002026 	beq	r2,zero,1022fdc <strlen+0x90>
 1022f5c:	2005883a 	mov	r2,r4
 1022f60:	00000206 	br	1022f6c <strlen+0x20>
 1022f64:	10c00007 	ldb	r3,0(r2)
 1022f68:	18001826 	beq	r3,zero,1022fcc <strlen+0x80>
 1022f6c:	10800044 	addi	r2,r2,1
 1022f70:	10c000cc 	andi	r3,r2,3
 1022f74:	183ffb1e 	bne	r3,zero,1022f64 <_gp+0xfffe52e0>
 1022f78:	10c00017 	ldw	r3,0(r2)
 1022f7c:	01ffbff4 	movhi	r7,65279
 1022f80:	39ffbfc4 	addi	r7,r7,-257
 1022f84:	00ca303a 	nor	r5,zero,r3
 1022f88:	01a02074 	movhi	r6,32897
 1022f8c:	19c7883a 	add	r3,r3,r7
 1022f90:	31a02004 	addi	r6,r6,-32640
 1022f94:	1946703a 	and	r3,r3,r5
 1022f98:	1986703a 	and	r3,r3,r6
 1022f9c:	1800091e 	bne	r3,zero,1022fc4 <strlen+0x78>
 1022fa0:	10800104 	addi	r2,r2,4
 1022fa4:	10c00017 	ldw	r3,0(r2)
 1022fa8:	19cb883a 	add	r5,r3,r7
 1022fac:	00c6303a 	nor	r3,zero,r3
 1022fb0:	28c6703a 	and	r3,r5,r3
 1022fb4:	1986703a 	and	r3,r3,r6
 1022fb8:	183ff926 	beq	r3,zero,1022fa0 <_gp+0xfffe531c>
 1022fbc:	00000106 	br	1022fc4 <strlen+0x78>
 1022fc0:	10800044 	addi	r2,r2,1
 1022fc4:	10c00007 	ldb	r3,0(r2)
 1022fc8:	183ffd1e 	bne	r3,zero,1022fc0 <_gp+0xfffe533c>
 1022fcc:	1105c83a 	sub	r2,r2,r4
 1022fd0:	f800283a 	ret
 1022fd4:	2005883a 	mov	r2,r4
 1022fd8:	003fe706 	br	1022f78 <_gp+0xfffe52f4>
 1022fdc:	0005883a 	mov	r2,zero
 1022fe0:	f800283a 	ret

01022fe4 <___svfprintf_internal_r>:
 1022fe4:	deffb504 	addi	sp,sp,-300
 1022fe8:	dfc04a15 	stw	ra,296(sp)
 1022fec:	ddc04815 	stw	r23,288(sp)
 1022ff0:	d9002f15 	stw	r4,188(sp)
 1022ff4:	282f883a 	mov	r23,r5
 1022ff8:	d9802915 	stw	r6,164(sp)
 1022ffc:	d9c02d15 	stw	r7,180(sp)
 1023000:	df004915 	stw	fp,292(sp)
 1023004:	dd804715 	stw	r22,284(sp)
 1023008:	dd404615 	stw	r21,280(sp)
 102300c:	dd004515 	stw	r20,276(sp)
 1023010:	dcc04415 	stw	r19,272(sp)
 1023014:	dc804315 	stw	r18,268(sp)
 1023018:	dc404215 	stw	r17,264(sp)
 102301c:	dc004115 	stw	r16,260(sp)
 1023020:	1029be80 	call	1029be8 <_localeconv_r>
 1023024:	10800017 	ldw	r2,0(r2)
 1023028:	1009883a 	mov	r4,r2
 102302c:	d8803515 	stw	r2,212(sp)
 1023030:	1022f4c0 	call	1022f4c <strlen>
 1023034:	d8803915 	stw	r2,228(sp)
 1023038:	b880030b 	ldhu	r2,12(r23)
 102303c:	1080200c 	andi	r2,r2,128
 1023040:	10000226 	beq	r2,zero,102304c <___svfprintf_internal_r+0x68>
 1023044:	b8800417 	ldw	r2,16(r23)
 1023048:	10065d26 	beq	r2,zero,10249c0 <___svfprintf_internal_r+0x19dc>
 102304c:	db001dc4 	addi	r12,sp,119
 1023050:	dd801e04 	addi	r22,sp,120
 1023054:	d8800404 	addi	r2,sp,16
 1023058:	050040f4 	movhi	r20,259
 102305c:	b317c83a 	sub	r11,r22,r12
 1023060:	a50ff984 	addi	r20,r20,16358
 1023064:	db002815 	stw	r12,160(sp)
 1023068:	d8801e15 	stw	r2,120(sp)
 102306c:	d8002015 	stw	zero,128(sp)
 1023070:	d8001f15 	stw	zero,124(sp)
 1023074:	d8003315 	stw	zero,204(sp)
 1023078:	d8003715 	stw	zero,220(sp)
 102307c:	d8003815 	stw	zero,224(sp)
 1023080:	d8003b15 	stw	zero,236(sp)
 1023084:	d8003a15 	stw	zero,232(sp)
 1023088:	d8003015 	stw	zero,192(sp)
 102308c:	1011883a 	mov	r8,r2
 1023090:	dac03d15 	stw	r11,244(sp)
 1023094:	db002917 	ldw	r12,164(sp)
 1023098:	60800007 	ldb	r2,0(r12)
 102309c:	1000ab26 	beq	r2,zero,102334c <___svfprintf_internal_r+0x368>
 10230a0:	00c00944 	movi	r3,37
 10230a4:	10c0a926 	beq	r2,r3,102334c <___svfprintf_internal_r+0x368>
 10230a8:	6021883a 	mov	r16,r12
 10230ac:	00000106 	br	10230b4 <___svfprintf_internal_r+0xd0>
 10230b0:	10c08426 	beq	r2,r3,10232c4 <___svfprintf_internal_r+0x2e0>
 10230b4:	84000044 	addi	r16,r16,1
 10230b8:	80800007 	ldb	r2,0(r16)
 10230bc:	103ffc1e 	bne	r2,zero,10230b0 <_gp+0xfffe542c>
 10230c0:	dac02917 	ldw	r11,164(sp)
 10230c4:	82e3c83a 	sub	r17,r16,r11
 10230c8:	88000f26 	beq	r17,zero,1023108 <___svfprintf_internal_r+0x124>
 10230cc:	d8c02017 	ldw	r3,128(sp)
 10230d0:	d8801f17 	ldw	r2,124(sp)
 10230d4:	dac02917 	ldw	r11,164(sp)
 10230d8:	1c47883a 	add	r3,r3,r17
 10230dc:	10800044 	addi	r2,r2,1
 10230e0:	d8c02015 	stw	r3,128(sp)
 10230e4:	42c00015 	stw	r11,0(r8)
 10230e8:	44400115 	stw	r17,4(r8)
 10230ec:	d8801f15 	stw	r2,124(sp)
 10230f0:	00c001c4 	movi	r3,7
 10230f4:	18807616 	blt	r3,r2,10232d0 <___svfprintf_internal_r+0x2ec>
 10230f8:	42000204 	addi	r8,r8,8
 10230fc:	db003017 	ldw	r12,192(sp)
 1023100:	6459883a 	add	r12,r12,r17
 1023104:	db003015 	stw	r12,192(sp)
 1023108:	80800007 	ldb	r2,0(r16)
 102310c:	10007726 	beq	r2,zero,10232ec <___svfprintf_internal_r+0x308>
 1023110:	80800044 	addi	r2,r16,1
 1023114:	84000047 	ldb	r16,1(r16)
 1023118:	d8002785 	stb	zero,158(sp)
 102311c:	000d883a 	mov	r6,zero
 1023120:	027fffc4 	movi	r9,-1
 1023124:	d8002e15 	stw	zero,184(sp)
 1023128:	0023883a 	mov	r17,zero
 102312c:	01001604 	movi	r4,88
 1023130:	01400244 	movi	r5,9
 1023134:	02800a84 	movi	r10,42
 1023138:	01c01b04 	movi	r7,108
 102313c:	10c00044 	addi	r3,r2,1
 1023140:	80bff804 	addi	r2,r16,-32
 1023144:	2082e436 	bltu	r4,r2,1023cd8 <___svfprintf_internal_r+0xcf4>
 1023148:	100490ba 	slli	r2,r2,2
 102314c:	02c040b4 	movhi	r11,258
 1023150:	5acc5804 	addi	r11,r11,12640
 1023154:	12c5883a 	add	r2,r2,r11
 1023158:	10800017 	ldw	r2,0(r2)
 102315c:	1000683a 	jmp	r2
 1023160:	01023a90 	cmplti	r4,zero,2282
 1023164:	01023cd8 	cmpnei	r4,zero,2291
 1023168:	01023cd8 	cmpnei	r4,zero,2291
 102316c:	01023c10 	cmplti	r4,zero,2288
 1023170:	01023cd8 	cmpnei	r4,zero,2291
 1023174:	01023cd8 	cmpnei	r4,zero,2291
 1023178:	01023cd8 	cmpnei	r4,zero,2291
 102317c:	01023cd8 	cmpnei	r4,zero,2291
 1023180:	01023cd8 	cmpnei	r4,zero,2291
 1023184:	01023cd8 	cmpnei	r4,zero,2291
 1023188:	01023bd4 	movui	r4,2287
 102318c:	01023c00 	call	1023c0 <__reset-0xf1dc40>
 1023190:	01023cd8 	cmpnei	r4,zero,2291
 1023194:	01023354 	movui	r4,2253
 1023198:	01023364 	muli	r4,zero,2253
 102319c:	01023cd8 	cmpnei	r4,zero,2291
 10231a0:	010233a4 	muli	r4,zero,2254
 10231a4:	010233b4 	movhi	r4,2254
 10231a8:	010233b4 	movhi	r4,2254
 10231ac:	010233b4 	movhi	r4,2254
 10231b0:	010233b4 	movhi	r4,2254
 10231b4:	010233b4 	movhi	r4,2254
 10231b8:	010233b4 	movhi	r4,2254
 10231bc:	010233b4 	movhi	r4,2254
 10231c0:	010233b4 	movhi	r4,2254
 10231c4:	010233b4 	movhi	r4,2254
 10231c8:	01023cd8 	cmpnei	r4,zero,2291
 10231cc:	01023cd8 	cmpnei	r4,zero,2291
 10231d0:	01023cd8 	cmpnei	r4,zero,2291
 10231d4:	01023cd8 	cmpnei	r4,zero,2291
 10231d8:	01023cd8 	cmpnei	r4,zero,2291
 10231dc:	01023cd8 	cmpnei	r4,zero,2291
 10231e0:	01023cd8 	cmpnei	r4,zero,2291
 10231e4:	01023cd8 	cmpnei	r4,zero,2291
 10231e8:	01023cd8 	cmpnei	r4,zero,2291
 10231ec:	01023cd8 	cmpnei	r4,zero,2291
 10231f0:	010233e8 	cmpgeui	r4,zero,2255
 10231f4:	010238d4 	movui	r4,2275
 10231f8:	01023cd8 	cmpnei	r4,zero,2291
 10231fc:	010238d4 	movui	r4,2275
 1023200:	01023cd8 	cmpnei	r4,zero,2291
 1023204:	01023cd8 	cmpnei	r4,zero,2291
 1023208:	01023cd8 	cmpnei	r4,zero,2291
 102320c:	01023cd8 	cmpnei	r4,zero,2291
 1023210:	010239c0 	call	10239c <__reset-0xf1dc64>
 1023214:	01023cd8 	cmpnei	r4,zero,2291
 1023218:	01023cd8 	cmpnei	r4,zero,2291
 102321c:	01023868 	cmpgeui	r4,zero,2273
 1023220:	01023cd8 	cmpnei	r4,zero,2291
 1023224:	01023cd8 	cmpnei	r4,zero,2291
 1023228:	01023cd8 	cmpnei	r4,zero,2291
 102322c:	01023cd8 	cmpnei	r4,zero,2291
 1023230:	01023cd8 	cmpnei	r4,zero,2291
 1023234:	010238a4 	muli	r4,zero,2274
 1023238:	01023cd8 	cmpnei	r4,zero,2291
 102323c:	01023cd8 	cmpnei	r4,zero,2291
 1023240:	01023ab0 	cmpltui	r4,zero,2282
 1023244:	01023cd8 	cmpnei	r4,zero,2291
 1023248:	01023cd8 	cmpnei	r4,zero,2291
 102324c:	01023cd8 	cmpnei	r4,zero,2291
 1023250:	01023cd8 	cmpnei	r4,zero,2291
 1023254:	01023cd8 	cmpnei	r4,zero,2291
 1023258:	01023cd8 	cmpnei	r4,zero,2291
 102325c:	01023cd8 	cmpnei	r4,zero,2291
 1023260:	01023cd8 	cmpnei	r4,zero,2291
 1023264:	01023cd8 	cmpnei	r4,zero,2291
 1023268:	01023cd8 	cmpnei	r4,zero,2291
 102326c:	01023b94 	movui	r4,2286
 1023270:	010239d0 	cmplti	r4,zero,2279
 1023274:	010238d4 	movui	r4,2275
 1023278:	010238d4 	movui	r4,2275
 102327c:	010238d4 	movui	r4,2275
 1023280:	01023a38 	rdprs	r4,zero,2280
 1023284:	010239d0 	cmplti	r4,zero,2279
 1023288:	01023cd8 	cmpnei	r4,zero,2291
 102328c:	01023cd8 	cmpnei	r4,zero,2291
 1023290:	01023a48 	cmpgei	r4,zero,2281
 1023294:	01023cd8 	cmpnei	r4,zero,2291
 1023298:	01023a5c 	xori	r4,zero,2281
 102329c:	01023c9c 	xori	r4,zero,2290
 10232a0:	01023978 	rdprs	r4,zero,2277
 10232a4:	01023b84 	movi	r4,2286
 10232a8:	01023cd8 	cmpnei	r4,zero,2291
 10232ac:	01023b0c 	andi	r4,zero,2284
 10232b0:	01023cd8 	cmpnei	r4,zero,2291
 10232b4:	01023c60 	cmpeqi	r4,zero,2289
 10232b8:	01023cd8 	cmpnei	r4,zero,2291
 10232bc:	01023cd8 	cmpnei	r4,zero,2291
 10232c0:	01023c20 	cmpeqi	r4,zero,2288
 10232c4:	db002917 	ldw	r12,164(sp)
 10232c8:	8323c83a 	sub	r17,r16,r12
 10232cc:	003f7e06 	br	10230c8 <_gp+0xfffe5444>
 10232d0:	d9002f17 	ldw	r4,188(sp)
 10232d4:	b80b883a 	mov	r5,r23
 10232d8:	b00d883a 	mov	r6,r22
 10232dc:	102c1f00 	call	102c1f0 <__ssprint_r>
 10232e0:	1000081e 	bne	r2,zero,1023304 <___svfprintf_internal_r+0x320>
 10232e4:	da000404 	addi	r8,sp,16
 10232e8:	003f8406 	br	10230fc <_gp+0xfffe5478>
 10232ec:	d8802017 	ldw	r2,128(sp)
 10232f0:	10000426 	beq	r2,zero,1023304 <___svfprintf_internal_r+0x320>
 10232f4:	d9002f17 	ldw	r4,188(sp)
 10232f8:	b80b883a 	mov	r5,r23
 10232fc:	d9801e04 	addi	r6,sp,120
 1023300:	102c1f00 	call	102c1f0 <__ssprint_r>
 1023304:	b880030b 	ldhu	r2,12(r23)
 1023308:	1080100c 	andi	r2,r2,64
 102330c:	10000d1e 	bne	r2,zero,1023344 <___svfprintf_internal_r+0x360>
 1023310:	d8803017 	ldw	r2,192(sp)
 1023314:	dfc04a17 	ldw	ra,296(sp)
 1023318:	df004917 	ldw	fp,292(sp)
 102331c:	ddc04817 	ldw	r23,288(sp)
 1023320:	dd804717 	ldw	r22,284(sp)
 1023324:	dd404617 	ldw	r21,280(sp)
 1023328:	dd004517 	ldw	r20,276(sp)
 102332c:	dcc04417 	ldw	r19,272(sp)
 1023330:	dc804317 	ldw	r18,268(sp)
 1023334:	dc404217 	ldw	r17,264(sp)
 1023338:	dc004117 	ldw	r16,260(sp)
 102333c:	dec04b04 	addi	sp,sp,300
 1023340:	f800283a 	ret
 1023344:	00bfffc4 	movi	r2,-1
 1023348:	003ff206 	br	1023314 <_gp+0xfffe5690>
 102334c:	dc002917 	ldw	r16,164(sp)
 1023350:	003f6d06 	br	1023108 <_gp+0xfffe5484>
 1023354:	1805883a 	mov	r2,r3
 1023358:	8c400114 	ori	r17,r17,4
 102335c:	1c000007 	ldb	r16,0(r3)
 1023360:	003f7606 	br	102313c <_gp+0xfffe54b8>
 1023364:	1c000007 	ldb	r16,0(r3)
 1023368:	18800044 	addi	r2,r3,1
 102336c:	8286e726 	beq	r16,r10,1024f0c <___svfprintf_internal_r+0x1f28>
 1023370:	82fff404 	addi	r11,r16,-48
 1023374:	1007883a 	mov	r3,r2
 1023378:	0013883a 	mov	r9,zero
 102337c:	2aff7036 	bltu	r5,r11,1023140 <_gp+0xfffe54bc>
 1023380:	1c000007 	ldb	r16,0(r3)
 1023384:	4a4002a4 	muli	r9,r9,10
 1023388:	18c00044 	addi	r3,r3,1
 102338c:	5a53883a 	add	r9,r11,r9
 1023390:	82fff404 	addi	r11,r16,-48
 1023394:	2afffa2e 	bgeu	r5,r11,1023380 <_gp+0xfffe56fc>
 1023398:	483f690e 	bge	r9,zero,1023140 <_gp+0xfffe54bc>
 102339c:	027fffc4 	movi	r9,-1
 10233a0:	003f6706 	br	1023140 <_gp+0xfffe54bc>
 10233a4:	8c402014 	ori	r17,r17,128
 10233a8:	1805883a 	mov	r2,r3
 10233ac:	1c000007 	ldb	r16,0(r3)
 10233b0:	003f6206 	br	102313c <_gp+0xfffe54b8>
 10233b4:	1805883a 	mov	r2,r3
 10233b8:	d8002e15 	stw	zero,184(sp)
 10233bc:	82fff404 	addi	r11,r16,-48
 10233c0:	0019883a 	mov	r12,zero
 10233c4:	14000007 	ldb	r16,0(r2)
 10233c8:	630002a4 	muli	r12,r12,10
 10233cc:	18c00044 	addi	r3,r3,1
 10233d0:	1805883a 	mov	r2,r3
 10233d4:	62d9883a 	add	r12,r12,r11
 10233d8:	82fff404 	addi	r11,r16,-48
 10233dc:	2afff92e 	bgeu	r5,r11,10233c4 <_gp+0xfffe5740>
 10233e0:	db002e15 	stw	r12,184(sp)
 10233e4:	003f5606 	br	1023140 <_gp+0xfffe54bc>
 10233e8:	8c400414 	ori	r17,r17,16
 10233ec:	d8c02915 	stw	r3,164(sp)
 10233f0:	d9802785 	stb	r6,158(sp)
 10233f4:	8880080c 	andi	r2,r17,32
 10233f8:	d8c02d17 	ldw	r3,180(sp)
 10233fc:	10017926 	beq	r2,zero,10239e4 <___svfprintf_internal_r+0xa00>
 1023400:	db002d17 	ldw	r12,180(sp)
 1023404:	18800117 	ldw	r2,4(r3)
 1023408:	1cc00017 	ldw	r19,0(r3)
 102340c:	63000204 	addi	r12,r12,8
 1023410:	db002d15 	stw	r12,180(sp)
 1023414:	1039883a 	mov	fp,r2
 1023418:	10017d16 	blt	r2,zero,1023a10 <___svfprintf_internal_r+0xa2c>
 102341c:	dd402783 	ldbu	r21,158(sp)
 1023420:	da403215 	stw	r9,200(sp)
 1023424:	00800044 	movi	r2,1
 1023428:	9f06b03a 	or	r3,r19,fp
 102342c:	48000216 	blt	r9,zero,1023438 <___svfprintf_internal_r+0x454>
 1023430:	013fdfc4 	movi	r4,-129
 1023434:	8922703a 	and	r17,r17,r4
 1023438:	1802371e 	bne	r3,zero,1023d18 <___svfprintf_internal_r+0xd34>
 102343c:	48034526 	beq	r9,zero,1024154 <___svfprintf_internal_r+0x1170>
 1023440:	10803fcc 	andi	r2,r2,255
 1023444:	00c00044 	movi	r3,1
 1023448:	10c25826 	beq	r2,r3,1023dac <___svfprintf_internal_r+0xdc8>
 102344c:	00c00084 	movi	r3,2
 1023450:	10c2db26 	beq	r2,r3,1023fc0 <___svfprintf_internal_r+0xfdc>
 1023454:	b007883a 	mov	r3,r22
 1023458:	9808d0fa 	srli	r4,r19,3
 102345c:	e00a977a 	slli	r5,fp,29
 1023460:	e038d0fa 	srli	fp,fp,3
 1023464:	9cc001cc 	andi	r19,r19,7
 1023468:	98800c04 	addi	r2,r19,48
 102346c:	18ffffc4 	addi	r3,r3,-1
 1023470:	2926b03a 	or	r19,r5,r4
 1023474:	18800005 	stb	r2,0(r3)
 1023478:	9f08b03a 	or	r4,r19,fp
 102347c:	203ff61e 	bne	r4,zero,1023458 <_gp+0xfffe57d4>
 1023480:	8900004c 	andi	r4,r17,1
 1023484:	d8c03115 	stw	r3,196(sp)
 1023488:	2002db26 	beq	r4,zero,1023ff8 <___svfprintf_internal_r+0x1014>
 102348c:	10803fcc 	andi	r2,r2,255
 1023490:	1080201c 	xori	r2,r2,128
 1023494:	10bfe004 	addi	r2,r2,-128
 1023498:	01000c04 	movi	r4,48
 102349c:	11056626 	beq	r2,r4,1024a38 <___svfprintf_internal_r+0x1a54>
 10234a0:	dac03117 	ldw	r11,196(sp)
 10234a4:	193fffc5 	stb	r4,-1(r3)
 10234a8:	5affffc4 	addi	r11,r11,-1
 10234ac:	dac03115 	stw	r11,196(sp)
 10234b0:	b2e5c83a 	sub	r18,r22,r11
 10234b4:	9005883a 	mov	r2,r18
 10234b8:	9240010e 	bge	r18,r9,10234c0 <___svfprintf_internal_r+0x4dc>
 10234bc:	4805883a 	mov	r2,r9
 10234c0:	d8802a15 	stw	r2,168(sp)
 10234c4:	d8003415 	stw	zero,208(sp)
 10234c8:	a8803fcc 	andi	r2,r21,255
 10234cc:	1080201c 	xori	r2,r2,128
 10234d0:	10bfe004 	addi	r2,r2,-128
 10234d4:	10000326 	beq	r2,zero,10234e4 <___svfprintf_internal_r+0x500>
 10234d8:	d8c02a17 	ldw	r3,168(sp)
 10234dc:	18c00044 	addi	r3,r3,1
 10234e0:	d8c02a15 	stw	r3,168(sp)
 10234e4:	8ac0008c 	andi	r11,r17,2
 10234e8:	dac02b15 	stw	r11,172(sp)
 10234ec:	58000326 	beq	r11,zero,10234fc <___svfprintf_internal_r+0x518>
 10234f0:	db002a17 	ldw	r12,168(sp)
 10234f4:	63000084 	addi	r12,r12,2
 10234f8:	db002a15 	stw	r12,168(sp)
 10234fc:	88c0210c 	andi	r3,r17,132
 1023500:	d8c02c15 	stw	r3,176(sp)
 1023504:	1802021e 	bne	r3,zero,1023d10 <___svfprintf_internal_r+0xd2c>
 1023508:	dac02e17 	ldw	r11,184(sp)
 102350c:	db002a17 	ldw	r12,168(sp)
 1023510:	5b39c83a 	sub	fp,r11,r12
 1023514:	0701fe0e 	bge	zero,fp,1023d10 <___svfprintf_internal_r+0xd2c>
 1023518:	02400404 	movi	r9,16
 102351c:	d8c02017 	ldw	r3,128(sp)
 1023520:	d8801f17 	ldw	r2,124(sp)
 1023524:	4f057d0e 	bge	r9,fp,1024b1c <___svfprintf_internal_r+0x1b38>
 1023528:	014040f4 	movhi	r5,259
 102352c:	e009883a 	mov	r4,fp
 1023530:	294ffd84 	addi	r5,r5,16374
 1023534:	dc003c15 	stw	r16,240(sp)
 1023538:	9039883a 	mov	fp,r18
 102353c:	d9403615 	stw	r5,216(sp)
 1023540:	8825883a 	mov	r18,r17
 1023544:	482b883a 	mov	r21,r9
 1023548:	04c001c4 	movi	r19,7
 102354c:	dc002f17 	ldw	r16,188(sp)
 1023550:	2023883a 	mov	r17,r4
 1023554:	00000306 	br	1023564 <___svfprintf_internal_r+0x580>
 1023558:	8c7ffc04 	addi	r17,r17,-16
 102355c:	42000204 	addi	r8,r8,8
 1023560:	ac40130e 	bge	r21,r17,10235b0 <___svfprintf_internal_r+0x5cc>
 1023564:	02c040f4 	movhi	r11,259
 1023568:	18c00404 	addi	r3,r3,16
 102356c:	10800044 	addi	r2,r2,1
 1023570:	5acffd84 	addi	r11,r11,16374
 1023574:	42c00015 	stw	r11,0(r8)
 1023578:	45400115 	stw	r21,4(r8)
 102357c:	d8c02015 	stw	r3,128(sp)
 1023580:	d8801f15 	stw	r2,124(sp)
 1023584:	98bff40e 	bge	r19,r2,1023558 <_gp+0xfffe58d4>
 1023588:	8009883a 	mov	r4,r16
 102358c:	b80b883a 	mov	r5,r23
 1023590:	b00d883a 	mov	r6,r22
 1023594:	102c1f00 	call	102c1f0 <__ssprint_r>
 1023598:	103f5a1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 102359c:	8c7ffc04 	addi	r17,r17,-16
 10235a0:	d8c02017 	ldw	r3,128(sp)
 10235a4:	d8801f17 	ldw	r2,124(sp)
 10235a8:	da000404 	addi	r8,sp,16
 10235ac:	ac7fed16 	blt	r21,r17,1023564 <_gp+0xfffe58e0>
 10235b0:	dc003c17 	ldw	r16,240(sp)
 10235b4:	8809883a 	mov	r4,r17
 10235b8:	9023883a 	mov	r17,r18
 10235bc:	e025883a 	mov	r18,fp
 10235c0:	2039883a 	mov	fp,r4
 10235c4:	db003617 	ldw	r12,216(sp)
 10235c8:	e0c7883a 	add	r3,fp,r3
 10235cc:	10800044 	addi	r2,r2,1
 10235d0:	43000015 	stw	r12,0(r8)
 10235d4:	47000115 	stw	fp,4(r8)
 10235d8:	d8c02015 	stw	r3,128(sp)
 10235dc:	d8801f15 	stw	r2,124(sp)
 10235e0:	010001c4 	movi	r4,7
 10235e4:	20833516 	blt	r4,r2,10242bc <___svfprintf_internal_r+0x12d8>
 10235e8:	d8802787 	ldb	r2,158(sp)
 10235ec:	42000204 	addi	r8,r8,8
 10235f0:	10000c26 	beq	r2,zero,1023624 <___svfprintf_internal_r+0x640>
 10235f4:	d8801f17 	ldw	r2,124(sp)
 10235f8:	d9002784 	addi	r4,sp,158
 10235fc:	18c00044 	addi	r3,r3,1
 1023600:	10800044 	addi	r2,r2,1
 1023604:	41000015 	stw	r4,0(r8)
 1023608:	01000044 	movi	r4,1
 102360c:	41000115 	stw	r4,4(r8)
 1023610:	d8c02015 	stw	r3,128(sp)
 1023614:	d8801f15 	stw	r2,124(sp)
 1023618:	010001c4 	movi	r4,7
 102361c:	2082df16 	blt	r4,r2,102419c <___svfprintf_internal_r+0x11b8>
 1023620:	42000204 	addi	r8,r8,8
 1023624:	dac02b17 	ldw	r11,172(sp)
 1023628:	58000c26 	beq	r11,zero,102365c <___svfprintf_internal_r+0x678>
 102362c:	d8801f17 	ldw	r2,124(sp)
 1023630:	d9002704 	addi	r4,sp,156
 1023634:	18c00084 	addi	r3,r3,2
 1023638:	10800044 	addi	r2,r2,1
 102363c:	41000015 	stw	r4,0(r8)
 1023640:	01000084 	movi	r4,2
 1023644:	41000115 	stw	r4,4(r8)
 1023648:	d8c02015 	stw	r3,128(sp)
 102364c:	d8801f15 	stw	r2,124(sp)
 1023650:	010001c4 	movi	r4,7
 1023654:	2082d916 	blt	r4,r2,10241bc <___svfprintf_internal_r+0x11d8>
 1023658:	42000204 	addi	r8,r8,8
 102365c:	db002c17 	ldw	r12,176(sp)
 1023660:	00802004 	movi	r2,128
 1023664:	60822026 	beq	r12,r2,1023ee8 <___svfprintf_internal_r+0xf04>
 1023668:	db003217 	ldw	r12,200(sp)
 102366c:	64abc83a 	sub	r21,r12,r18
 1023670:	0540310e 	bge	zero,r21,1023738 <___svfprintf_internal_r+0x754>
 1023674:	07000404 	movi	fp,16
 1023678:	d8801f17 	ldw	r2,124(sp)
 102367c:	e544180e 	bge	fp,r21,10246e0 <___svfprintf_internal_r+0x16fc>
 1023680:	014040f4 	movhi	r5,259
 1023684:	a809883a 	mov	r4,r21
 1023688:	294ff984 	addi	r5,r5,16358
 102368c:	dc002c15 	stw	r16,176(sp)
 1023690:	902b883a 	mov	r21,r18
 1023694:	d9402b15 	stw	r5,172(sp)
 1023698:	8825883a 	mov	r18,r17
 102369c:	04c001c4 	movi	r19,7
 10236a0:	dc002f17 	ldw	r16,188(sp)
 10236a4:	2023883a 	mov	r17,r4
 10236a8:	00000306 	br	10236b8 <___svfprintf_internal_r+0x6d4>
 10236ac:	8c7ffc04 	addi	r17,r17,-16
 10236b0:	42000204 	addi	r8,r8,8
 10236b4:	e440110e 	bge	fp,r17,10236fc <___svfprintf_internal_r+0x718>
 10236b8:	18c00404 	addi	r3,r3,16
 10236bc:	10800044 	addi	r2,r2,1
 10236c0:	45000015 	stw	r20,0(r8)
 10236c4:	47000115 	stw	fp,4(r8)
 10236c8:	d8c02015 	stw	r3,128(sp)
 10236cc:	d8801f15 	stw	r2,124(sp)
 10236d0:	98bff60e 	bge	r19,r2,10236ac <_gp+0xfffe5a28>
 10236d4:	8009883a 	mov	r4,r16
 10236d8:	b80b883a 	mov	r5,r23
 10236dc:	b00d883a 	mov	r6,r22
 10236e0:	102c1f00 	call	102c1f0 <__ssprint_r>
 10236e4:	103f071e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10236e8:	8c7ffc04 	addi	r17,r17,-16
 10236ec:	d8c02017 	ldw	r3,128(sp)
 10236f0:	d8801f17 	ldw	r2,124(sp)
 10236f4:	da000404 	addi	r8,sp,16
 10236f8:	e47fef16 	blt	fp,r17,10236b8 <_gp+0xfffe5a34>
 10236fc:	dc002c17 	ldw	r16,176(sp)
 1023700:	8809883a 	mov	r4,r17
 1023704:	9023883a 	mov	r17,r18
 1023708:	a825883a 	mov	r18,r21
 102370c:	202b883a 	mov	r21,r4
 1023710:	dac02b17 	ldw	r11,172(sp)
 1023714:	1d47883a 	add	r3,r3,r21
 1023718:	10800044 	addi	r2,r2,1
 102371c:	42c00015 	stw	r11,0(r8)
 1023720:	45400115 	stw	r21,4(r8)
 1023724:	d8c02015 	stw	r3,128(sp)
 1023728:	d8801f15 	stw	r2,124(sp)
 102372c:	010001c4 	movi	r4,7
 1023730:	20829216 	blt	r4,r2,102417c <___svfprintf_internal_r+0x1198>
 1023734:	42000204 	addi	r8,r8,8
 1023738:	8880400c 	andi	r2,r17,256
 102373c:	1001a11e 	bne	r2,zero,1023dc4 <___svfprintf_internal_r+0xde0>
 1023740:	d8801f17 	ldw	r2,124(sp)
 1023744:	db003117 	ldw	r12,196(sp)
 1023748:	1c87883a 	add	r3,r3,r18
 102374c:	10800044 	addi	r2,r2,1
 1023750:	43000015 	stw	r12,0(r8)
 1023754:	44800115 	stw	r18,4(r8)
 1023758:	d8c02015 	stw	r3,128(sp)
 102375c:	d8801f15 	stw	r2,124(sp)
 1023760:	010001c4 	movi	r4,7
 1023764:	20826d16 	blt	r4,r2,102411c <___svfprintf_internal_r+0x1138>
 1023768:	42000204 	addi	r8,r8,8
 102376c:	8c40010c 	andi	r17,r17,4
 1023770:	88003226 	beq	r17,zero,102383c <___svfprintf_internal_r+0x858>
 1023774:	db002e17 	ldw	r12,184(sp)
 1023778:	dac02a17 	ldw	r11,168(sp)
 102377c:	62e1c83a 	sub	r16,r12,r11
 1023780:	04002e0e 	bge	zero,r16,102383c <___svfprintf_internal_r+0x858>
 1023784:	04400404 	movi	r17,16
 1023788:	d8801f17 	ldw	r2,124(sp)
 102378c:	8c05240e 	bge	r17,r16,1024c20 <___svfprintf_internal_r+0x1c3c>
 1023790:	010040f4 	movhi	r4,259
 1023794:	210ffd84 	addi	r4,r4,16374
 1023798:	d9003615 	stw	r4,216(sp)
 102379c:	048001c4 	movi	r18,7
 10237a0:	dcc02f17 	ldw	r19,188(sp)
 10237a4:	00000306 	br	10237b4 <___svfprintf_internal_r+0x7d0>
 10237a8:	843ffc04 	addi	r16,r16,-16
 10237ac:	42000204 	addi	r8,r8,8
 10237b0:	8c00130e 	bge	r17,r16,1023800 <___svfprintf_internal_r+0x81c>
 10237b4:	014040f4 	movhi	r5,259
 10237b8:	18c00404 	addi	r3,r3,16
 10237bc:	10800044 	addi	r2,r2,1
 10237c0:	294ffd84 	addi	r5,r5,16374
 10237c4:	41400015 	stw	r5,0(r8)
 10237c8:	44400115 	stw	r17,4(r8)
 10237cc:	d8c02015 	stw	r3,128(sp)
 10237d0:	d8801f15 	stw	r2,124(sp)
 10237d4:	90bff40e 	bge	r18,r2,10237a8 <_gp+0xfffe5b24>
 10237d8:	9809883a 	mov	r4,r19
 10237dc:	b80b883a 	mov	r5,r23
 10237e0:	b00d883a 	mov	r6,r22
 10237e4:	102c1f00 	call	102c1f0 <__ssprint_r>
 10237e8:	103ec61e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10237ec:	843ffc04 	addi	r16,r16,-16
 10237f0:	d8c02017 	ldw	r3,128(sp)
 10237f4:	d8801f17 	ldw	r2,124(sp)
 10237f8:	da000404 	addi	r8,sp,16
 10237fc:	8c3fed16 	blt	r17,r16,10237b4 <_gp+0xfffe5b30>
 1023800:	dac03617 	ldw	r11,216(sp)
 1023804:	1c07883a 	add	r3,r3,r16
 1023808:	10800044 	addi	r2,r2,1
 102380c:	42c00015 	stw	r11,0(r8)
 1023810:	44000115 	stw	r16,4(r8)
 1023814:	d8c02015 	stw	r3,128(sp)
 1023818:	d8801f15 	stw	r2,124(sp)
 102381c:	010001c4 	movi	r4,7
 1023820:	2080060e 	bge	r4,r2,102383c <___svfprintf_internal_r+0x858>
 1023824:	d9002f17 	ldw	r4,188(sp)
 1023828:	b80b883a 	mov	r5,r23
 102382c:	b00d883a 	mov	r6,r22
 1023830:	102c1f00 	call	102c1f0 <__ssprint_r>
 1023834:	103eb31e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1023838:	d8c02017 	ldw	r3,128(sp)
 102383c:	d8802a17 	ldw	r2,168(sp)
 1023840:	db002e17 	ldw	r12,184(sp)
 1023844:	1300010e 	bge	r2,r12,102384c <___svfprintf_internal_r+0x868>
 1023848:	6005883a 	mov	r2,r12
 102384c:	dac03017 	ldw	r11,192(sp)
 1023850:	5897883a 	add	r11,r11,r2
 1023854:	dac03015 	stw	r11,192(sp)
 1023858:	1802381e 	bne	r3,zero,102413c <___svfprintf_internal_r+0x1158>
 102385c:	d8001f15 	stw	zero,124(sp)
 1023860:	da000404 	addi	r8,sp,16
 1023864:	003e0b06 	br	1023094 <_gp+0xfffe5410>
 1023868:	8c400414 	ori	r17,r17,16
 102386c:	d8c02915 	stw	r3,164(sp)
 1023870:	8880080c 	andi	r2,r17,32
 1023874:	10010c26 	beq	r2,zero,1023ca8 <___svfprintf_internal_r+0xcc4>
 1023878:	db002d17 	ldw	r12,180(sp)
 102387c:	0005883a 	mov	r2,zero
 1023880:	64c00017 	ldw	r19,0(r12)
 1023884:	67000117 	ldw	fp,4(r12)
 1023888:	63000204 	addi	r12,r12,8
 102388c:	db002d15 	stw	r12,180(sp)
 1023890:	9f06b03a 	or	r3,r19,fp
 1023894:	d8002785 	stb	zero,158(sp)
 1023898:	da403215 	stw	r9,200(sp)
 102389c:	002b883a 	mov	r21,zero
 10238a0:	003ee206 	br	102342c <_gp+0xfffe57a8>
 10238a4:	8c400414 	ori	r17,r17,16
 10238a8:	d8c02915 	stw	r3,164(sp)
 10238ac:	8880080c 	andi	r2,r17,32
 10238b0:	1000ee26 	beq	r2,zero,1023c6c <___svfprintf_internal_r+0xc88>
 10238b4:	dac02d17 	ldw	r11,180(sp)
 10238b8:	00800044 	movi	r2,1
 10238bc:	5cc00017 	ldw	r19,0(r11)
 10238c0:	5f000117 	ldw	fp,4(r11)
 10238c4:	5ac00204 	addi	r11,r11,8
 10238c8:	dac02d15 	stw	r11,180(sp)
 10238cc:	9f06b03a 	or	r3,r19,fp
 10238d0:	003ff006 	br	1023894 <_gp+0xfffe5c10>
 10238d4:	db002d17 	ldw	r12,180(sp)
 10238d8:	dac02d17 	ldw	r11,180(sp)
 10238dc:	d8c02915 	stw	r3,164(sp)
 10238e0:	63000017 	ldw	r12,0(r12)
 10238e4:	5ac00117 	ldw	r11,4(r11)
 10238e8:	d9802785 	stb	r6,158(sp)
 10238ec:	6009883a 	mov	r4,r12
 10238f0:	580b883a 	mov	r5,r11
 10238f4:	db003715 	stw	r12,220(sp)
 10238f8:	da004015 	stw	r8,256(sp)
 10238fc:	da403f15 	stw	r9,252(sp)
 1023900:	dac03815 	stw	r11,224(sp)
 1023904:	102bf480 	call	102bf48 <__fpclassifyd>
 1023908:	db002d17 	ldw	r12,180(sp)
 102390c:	04800044 	movi	r18,1
 1023910:	da004017 	ldw	r8,256(sp)
 1023914:	64c00204 	addi	r19,r12,8
 1023918:	da403f17 	ldw	r9,252(sp)
 102391c:	d9003717 	ldw	r4,220(sp)
 1023920:	d9403817 	ldw	r5,224(sp)
 1023924:	14832c1e 	bne	r2,r18,10245d8 <___svfprintf_internal_r+0x15f4>
 1023928:	000d883a 	mov	r6,zero
 102392c:	000f883a 	mov	r7,zero
 1023930:	103073c0 	call	103073c <__ledf2>
 1023934:	da004017 	ldw	r8,256(sp)
 1023938:	1004c416 	blt	r2,zero,1024c4c <___svfprintf_internal_r+0x1c68>
 102393c:	dd402783 	ldbu	r21,158(sp)
 1023940:	008011c4 	movi	r2,71
 1023944:	14041a0e 	bge	r2,r16,10249b0 <___svfprintf_internal_r+0x19cc>
 1023948:	00c040f4 	movhi	r3,259
 102394c:	18cfea04 	addi	r3,r3,16296
 1023950:	d8c03115 	stw	r3,196(sp)
 1023954:	02c000c4 	movi	r11,3
 1023958:	00bfdfc4 	movi	r2,-129
 102395c:	dac02a15 	stw	r11,168(sp)
 1023960:	88a2703a 	and	r17,r17,r2
 1023964:	dcc02d15 	stw	r19,180(sp)
 1023968:	5825883a 	mov	r18,r11
 102396c:	d8003215 	stw	zero,200(sp)
 1023970:	d8003415 	stw	zero,208(sp)
 1023974:	003ed406 	br	10234c8 <_gp+0xfffe5844>
 1023978:	db002d17 	ldw	r12,180(sp)
 102397c:	00800c04 	movi	r2,48
 1023980:	d8802705 	stb	r2,156(sp)
 1023984:	64c00017 	ldw	r19,0(r12)
 1023988:	00801e04 	movi	r2,120
 102398c:	d8802745 	stb	r2,157(sp)
 1023990:	008040f4 	movhi	r2,259
 1023994:	108ff204 	addi	r2,r2,16328
 1023998:	63000104 	addi	r12,r12,4
 102399c:	d8c02915 	stw	r3,164(sp)
 10239a0:	d8803b15 	stw	r2,236(sp)
 10239a4:	0039883a 	mov	fp,zero
 10239a8:	8c400094 	ori	r17,r17,2
 10239ac:	db002d15 	stw	r12,180(sp)
 10239b0:	00800084 	movi	r2,2
 10239b4:	04001e04 	movi	r16,120
 10239b8:	9807883a 	mov	r3,r19
 10239bc:	003fb506 	br	1023894 <_gp+0xfffe5c10>
 10239c0:	8c400214 	ori	r17,r17,8
 10239c4:	1805883a 	mov	r2,r3
 10239c8:	1c000007 	ldb	r16,0(r3)
 10239cc:	003ddb06 	br	102313c <_gp+0xfffe54b8>
 10239d0:	d8c02915 	stw	r3,164(sp)
 10239d4:	d9802785 	stb	r6,158(sp)
 10239d8:	8880080c 	andi	r2,r17,32
 10239dc:	d8c02d17 	ldw	r3,180(sp)
 10239e0:	103e871e 	bne	r2,zero,1023400 <_gp+0xfffe577c>
 10239e4:	8880040c 	andi	r2,r17,16
 10239e8:	10027a1e 	bne	r2,zero,10243d4 <___svfprintf_internal_r+0x13f0>
 10239ec:	8880100c 	andi	r2,r17,64
 10239f0:	10027826 	beq	r2,zero,10243d4 <___svfprintf_internal_r+0x13f0>
 10239f4:	1cc0000f 	ldh	r19,0(r3)
 10239f8:	db002d17 	ldw	r12,180(sp)
 10239fc:	9839d7fa 	srai	fp,r19,31
 1023a00:	63000104 	addi	r12,r12,4
 1023a04:	db002d15 	stw	r12,180(sp)
 1023a08:	e005883a 	mov	r2,fp
 1023a0c:	103e830e 	bge	r2,zero,102341c <_gp+0xfffe5798>
 1023a10:	04e7c83a 	sub	r19,zero,r19
 1023a14:	9804c03a 	cmpne	r2,r19,zero
 1023a18:	0739c83a 	sub	fp,zero,fp
 1023a1c:	e0b9c83a 	sub	fp,fp,r2
 1023a20:	05400b44 	movi	r21,45
 1023a24:	dd402785 	stb	r21,158(sp)
 1023a28:	da403215 	stw	r9,200(sp)
 1023a2c:	00800044 	movi	r2,1
 1023a30:	9f06b03a 	or	r3,r19,fp
 1023a34:	003e7d06 	br	102342c <_gp+0xfffe57a8>
 1023a38:	8c401014 	ori	r17,r17,64
 1023a3c:	1805883a 	mov	r2,r3
 1023a40:	1c000007 	ldb	r16,0(r3)
 1023a44:	003dbd06 	br	102313c <_gp+0xfffe54b8>
 1023a48:	1c000007 	ldb	r16,0(r3)
 1023a4c:	81c37126 	beq	r16,r7,1024814 <___svfprintf_internal_r+0x1830>
 1023a50:	8c400414 	ori	r17,r17,16
 1023a54:	1805883a 	mov	r2,r3
 1023a58:	003db806 	br	102313c <_gp+0xfffe54b8>
 1023a5c:	d8c02915 	stw	r3,164(sp)
 1023a60:	d9802785 	stb	r6,158(sp)
 1023a64:	8880080c 	andi	r2,r17,32
 1023a68:	1002f026 	beq	r2,zero,102462c <___svfprintf_internal_r+0x1648>
 1023a6c:	db002d17 	ldw	r12,180(sp)
 1023a70:	dac03017 	ldw	r11,192(sp)
 1023a74:	60800017 	ldw	r2,0(r12)
 1023a78:	5807d7fa 	srai	r3,r11,31
 1023a7c:	63000104 	addi	r12,r12,4
 1023a80:	db002d15 	stw	r12,180(sp)
 1023a84:	12c00015 	stw	r11,0(r2)
 1023a88:	10c00115 	stw	r3,4(r2)
 1023a8c:	003d8106 	br	1023094 <_gp+0xfffe5410>
 1023a90:	30803fcc 	andi	r2,r6,255
 1023a94:	1080201c 	xori	r2,r2,128
 1023a98:	10bfe004 	addi	r2,r2,-128
 1023a9c:	1002fd1e 	bne	r2,zero,1024694 <___svfprintf_internal_r+0x16b0>
 1023aa0:	1805883a 	mov	r2,r3
 1023aa4:	01800804 	movi	r6,32
 1023aa8:	1c000007 	ldb	r16,0(r3)
 1023aac:	003da306 	br	102313c <_gp+0xfffe54b8>
 1023ab0:	030040f4 	movhi	r12,259
 1023ab4:	630fed04 	addi	r12,r12,16308
 1023ab8:	d8c02915 	stw	r3,164(sp)
 1023abc:	d9802785 	stb	r6,158(sp)
 1023ac0:	db003b15 	stw	r12,236(sp)
 1023ac4:	88c0080c 	andi	r3,r17,32
 1023ac8:	d8802d17 	ldw	r2,180(sp)
 1023acc:	18005c26 	beq	r3,zero,1023c40 <___svfprintf_internal_r+0xc5c>
 1023ad0:	dac02d17 	ldw	r11,180(sp)
 1023ad4:	14c00017 	ldw	r19,0(r2)
 1023ad8:	17000117 	ldw	fp,4(r2)
 1023adc:	5ac00204 	addi	r11,r11,8
 1023ae0:	dac02d15 	stw	r11,180(sp)
 1023ae4:	8880004c 	andi	r2,r17,1
 1023ae8:	10022f26 	beq	r2,zero,10243a8 <___svfprintf_internal_r+0x13c4>
 1023aec:	9f06b03a 	or	r3,r19,fp
 1023af0:	1802eb26 	beq	r3,zero,10246a0 <___svfprintf_internal_r+0x16bc>
 1023af4:	00800c04 	movi	r2,48
 1023af8:	d8802705 	stb	r2,156(sp)
 1023afc:	dc002745 	stb	r16,157(sp)
 1023b00:	8c400094 	ori	r17,r17,2
 1023b04:	00800084 	movi	r2,2
 1023b08:	003f6206 	br	1023894 <_gp+0xfffe5c10>
 1023b0c:	dac02d17 	ldw	r11,180(sp)
 1023b10:	db002d17 	ldw	r12,180(sp)
 1023b14:	d8c02915 	stw	r3,164(sp)
 1023b18:	5ac00017 	ldw	r11,0(r11)
 1023b1c:	d8002785 	stb	zero,158(sp)
 1023b20:	64c00104 	addi	r19,r12,4
 1023b24:	dac03115 	stw	r11,196(sp)
 1023b28:	58042e26 	beq	r11,zero,1024be4 <___svfprintf_internal_r+0x1c00>
 1023b2c:	d9003117 	ldw	r4,196(sp)
 1023b30:	4803c416 	blt	r9,zero,1024a44 <___svfprintf_internal_r+0x1a60>
 1023b34:	480d883a 	mov	r6,r9
 1023b38:	000b883a 	mov	r5,zero
 1023b3c:	da004015 	stw	r8,256(sp)
 1023b40:	da403f15 	stw	r9,252(sp)
 1023b44:	102a57c0 	call	102a57c <memchr>
 1023b48:	da004017 	ldw	r8,256(sp)
 1023b4c:	da403f17 	ldw	r9,252(sp)
 1023b50:	10048a26 	beq	r2,zero,1024d7c <___svfprintf_internal_r+0x1d98>
 1023b54:	d8c03117 	ldw	r3,196(sp)
 1023b58:	10e5c83a 	sub	r18,r2,r3
 1023b5c:	4c80010e 	bge	r9,r18,1023b64 <___svfprintf_internal_r+0xb80>
 1023b60:	4825883a 	mov	r18,r9
 1023b64:	9005883a 	mov	r2,r18
 1023b68:	9003bb16 	blt	r18,zero,1024a58 <___svfprintf_internal_r+0x1a74>
 1023b6c:	dd402783 	ldbu	r21,158(sp)
 1023b70:	d8802a15 	stw	r2,168(sp)
 1023b74:	dcc02d15 	stw	r19,180(sp)
 1023b78:	d8003215 	stw	zero,200(sp)
 1023b7c:	d8003415 	stw	zero,208(sp)
 1023b80:	003e5106 	br	10234c8 <_gp+0xfffe5844>
 1023b84:	8c400814 	ori	r17,r17,32
 1023b88:	1805883a 	mov	r2,r3
 1023b8c:	1c000007 	ldb	r16,0(r3)
 1023b90:	003d6a06 	br	102313c <_gp+0xfffe54b8>
 1023b94:	db002d17 	ldw	r12,180(sp)
 1023b98:	d8c02915 	stw	r3,164(sp)
 1023b9c:	dac01404 	addi	r11,sp,80
 1023ba0:	60800017 	ldw	r2,0(r12)
 1023ba4:	00c00044 	movi	r3,1
 1023ba8:	63000104 	addi	r12,r12,4
 1023bac:	d8801405 	stb	r2,80(sp)
 1023bb0:	d8c02a15 	stw	r3,168(sp)
 1023bb4:	d8002785 	stb	zero,158(sp)
 1023bb8:	db002d15 	stw	r12,180(sp)
 1023bbc:	1825883a 	mov	r18,r3
 1023bc0:	d8003215 	stw	zero,200(sp)
 1023bc4:	d8003415 	stw	zero,208(sp)
 1023bc8:	dac03115 	stw	r11,196(sp)
 1023bcc:	0005883a 	mov	r2,zero
 1023bd0:	003e4406 	br	10234e4 <_gp+0xfffe5860>
 1023bd4:	dac02d17 	ldw	r11,180(sp)
 1023bd8:	db002d17 	ldw	r12,180(sp)
 1023bdc:	5ac00017 	ldw	r11,0(r11)
 1023be0:	dac02e15 	stw	r11,184(sp)
 1023be4:	62c00104 	addi	r11,r12,4
 1023be8:	db002e17 	ldw	r12,184(sp)
 1023bec:	60030316 	blt	r12,zero,10247fc <___svfprintf_internal_r+0x1818>
 1023bf0:	dac02d15 	stw	r11,180(sp)
 1023bf4:	1805883a 	mov	r2,r3
 1023bf8:	1c000007 	ldb	r16,0(r3)
 1023bfc:	003d4f06 	br	102313c <_gp+0xfffe54b8>
 1023c00:	1805883a 	mov	r2,r3
 1023c04:	01800ac4 	movi	r6,43
 1023c08:	1c000007 	ldb	r16,0(r3)
 1023c0c:	003d4b06 	br	102313c <_gp+0xfffe54b8>
 1023c10:	8c400054 	ori	r17,r17,1
 1023c14:	1805883a 	mov	r2,r3
 1023c18:	1c000007 	ldb	r16,0(r3)
 1023c1c:	003d4706 	br	102313c <_gp+0xfffe54b8>
 1023c20:	008040f4 	movhi	r2,259
 1023c24:	108ff204 	addi	r2,r2,16328
 1023c28:	d8c02915 	stw	r3,164(sp)
 1023c2c:	d8803b15 	stw	r2,236(sp)
 1023c30:	d9802785 	stb	r6,158(sp)
 1023c34:	88c0080c 	andi	r3,r17,32
 1023c38:	d8802d17 	ldw	r2,180(sp)
 1023c3c:	183fa41e 	bne	r3,zero,1023ad0 <_gp+0xfffe5e4c>
 1023c40:	88c0040c 	andi	r3,r17,16
 1023c44:	18028b26 	beq	r3,zero,1024674 <___svfprintf_internal_r+0x1690>
 1023c48:	db002d17 	ldw	r12,180(sp)
 1023c4c:	14c00017 	ldw	r19,0(r2)
 1023c50:	0039883a 	mov	fp,zero
 1023c54:	63000104 	addi	r12,r12,4
 1023c58:	db002d15 	stw	r12,180(sp)
 1023c5c:	003fa106 	br	1023ae4 <_gp+0xfffe5e60>
 1023c60:	d8c02915 	stw	r3,164(sp)
 1023c64:	8880080c 	andi	r2,r17,32
 1023c68:	103f121e 	bne	r2,zero,10238b4 <_gp+0xfffe5c30>
 1023c6c:	8880040c 	andi	r2,r17,16
 1023c70:	1001df1e 	bne	r2,zero,10243f0 <___svfprintf_internal_r+0x140c>
 1023c74:	8880100c 	andi	r2,r17,64
 1023c78:	1001dd26 	beq	r2,zero,10243f0 <___svfprintf_internal_r+0x140c>
 1023c7c:	dac02d17 	ldw	r11,180(sp)
 1023c80:	0039883a 	mov	fp,zero
 1023c84:	00800044 	movi	r2,1
 1023c88:	5cc0000b 	ldhu	r19,0(r11)
 1023c8c:	5ac00104 	addi	r11,r11,4
 1023c90:	dac02d15 	stw	r11,180(sp)
 1023c94:	9807883a 	mov	r3,r19
 1023c98:	003efe06 	br	1023894 <_gp+0xfffe5c10>
 1023c9c:	d8c02915 	stw	r3,164(sp)
 1023ca0:	8880080c 	andi	r2,r17,32
 1023ca4:	103ef41e 	bne	r2,zero,1023878 <_gp+0xfffe5bf4>
 1023ca8:	8880040c 	andi	r2,r17,16
 1023cac:	1001c11e 	bne	r2,zero,10243b4 <___svfprintf_internal_r+0x13d0>
 1023cb0:	8880100c 	andi	r2,r17,64
 1023cb4:	1001bf26 	beq	r2,zero,10243b4 <___svfprintf_internal_r+0x13d0>
 1023cb8:	db002d17 	ldw	r12,180(sp)
 1023cbc:	0039883a 	mov	fp,zero
 1023cc0:	0005883a 	mov	r2,zero
 1023cc4:	64c0000b 	ldhu	r19,0(r12)
 1023cc8:	63000104 	addi	r12,r12,4
 1023ccc:	db002d15 	stw	r12,180(sp)
 1023cd0:	9807883a 	mov	r3,r19
 1023cd4:	003eef06 	br	1023894 <_gp+0xfffe5c10>
 1023cd8:	d8c02915 	stw	r3,164(sp)
 1023cdc:	d9802785 	stb	r6,158(sp)
 1023ce0:	803d8226 	beq	r16,zero,10232ec <_gp+0xfffe5668>
 1023ce4:	02c00044 	movi	r11,1
 1023ce8:	db001404 	addi	r12,sp,80
 1023cec:	dac02a15 	stw	r11,168(sp)
 1023cf0:	dc001405 	stb	r16,80(sp)
 1023cf4:	d8002785 	stb	zero,158(sp)
 1023cf8:	5825883a 	mov	r18,r11
 1023cfc:	d8003215 	stw	zero,200(sp)
 1023d00:	d8003415 	stw	zero,208(sp)
 1023d04:	db003115 	stw	r12,196(sp)
 1023d08:	0005883a 	mov	r2,zero
 1023d0c:	003df506 	br	10234e4 <_gp+0xfffe5860>
 1023d10:	d8c02017 	ldw	r3,128(sp)
 1023d14:	003e3606 	br	10235f0 <_gp+0xfffe596c>
 1023d18:	10803fcc 	andi	r2,r2,255
 1023d1c:	00c00044 	movi	r3,1
 1023d20:	10fdca1e 	bne	r2,r3,102344c <_gp+0xfffe57c8>
 1023d24:	e000021e 	bne	fp,zero,1023d30 <___svfprintf_internal_r+0xd4c>
 1023d28:	00800244 	movi	r2,9
 1023d2c:	14c01f2e 	bgeu	r2,r19,1023dac <___svfprintf_internal_r+0xdc8>
 1023d30:	dc002a15 	stw	r16,168(sp)
 1023d34:	dc402b15 	stw	r17,172(sp)
 1023d38:	9821883a 	mov	r16,r19
 1023d3c:	e023883a 	mov	r17,fp
 1023d40:	b025883a 	mov	r18,r22
 1023d44:	4027883a 	mov	r19,r8
 1023d48:	4839883a 	mov	fp,r9
 1023d4c:	8009883a 	mov	r4,r16
 1023d50:	880b883a 	mov	r5,r17
 1023d54:	01800284 	movi	r6,10
 1023d58:	000f883a 	mov	r7,zero
 1023d5c:	102f7ac0 	call	102f7ac <__umoddi3>
 1023d60:	10800c04 	addi	r2,r2,48
 1023d64:	94bfffc4 	addi	r18,r18,-1
 1023d68:	8009883a 	mov	r4,r16
 1023d6c:	880b883a 	mov	r5,r17
 1023d70:	01800284 	movi	r6,10
 1023d74:	000f883a 	mov	r7,zero
 1023d78:	90800005 	stb	r2,0(r18)
 1023d7c:	102f1ec0 	call	102f1ec <__udivdi3>
 1023d80:	1021883a 	mov	r16,r2
 1023d84:	10c4b03a 	or	r2,r2,r3
 1023d88:	1823883a 	mov	r17,r3
 1023d8c:	103fef1e 	bne	r2,zero,1023d4c <_gp+0xfffe60c8>
 1023d90:	dc803115 	stw	r18,196(sp)
 1023d94:	dc002a17 	ldw	r16,168(sp)
 1023d98:	9811883a 	mov	r8,r19
 1023d9c:	dc402b17 	ldw	r17,172(sp)
 1023da0:	e013883a 	mov	r9,fp
 1023da4:	b4a5c83a 	sub	r18,r22,r18
 1023da8:	003dc206 	br	10234b4 <_gp+0xfffe5830>
 1023dac:	9cc00c04 	addi	r19,r19,48
 1023db0:	db001dc4 	addi	r12,sp,119
 1023db4:	dcc01dc5 	stb	r19,119(sp)
 1023db8:	dc803d17 	ldw	r18,244(sp)
 1023dbc:	db003115 	stw	r12,196(sp)
 1023dc0:	003dbc06 	br	10234b4 <_gp+0xfffe5830>
 1023dc4:	00801944 	movi	r2,101
 1023dc8:	14008d0e 	bge	r2,r16,1024000 <___svfprintf_internal_r+0x101c>
 1023dcc:	d9003717 	ldw	r4,220(sp)
 1023dd0:	d9403817 	ldw	r5,224(sp)
 1023dd4:	000d883a 	mov	r6,zero
 1023dd8:	000f883a 	mov	r7,zero
 1023ddc:	d8c03e15 	stw	r3,248(sp)
 1023de0:	da004015 	stw	r8,256(sp)
 1023de4:	10305d80 	call	10305d8 <__eqdf2>
 1023de8:	d8c03e17 	ldw	r3,248(sp)
 1023dec:	da004017 	ldw	r8,256(sp)
 1023df0:	1000fd1e 	bne	r2,zero,10241e8 <___svfprintf_internal_r+0x1204>
 1023df4:	d8801f17 	ldw	r2,124(sp)
 1023df8:	010040f4 	movhi	r4,259
 1023dfc:	210ff904 	addi	r4,r4,16356
 1023e00:	18c00044 	addi	r3,r3,1
 1023e04:	10800044 	addi	r2,r2,1
 1023e08:	41000015 	stw	r4,0(r8)
 1023e0c:	01000044 	movi	r4,1
 1023e10:	41000115 	stw	r4,4(r8)
 1023e14:	d8c02015 	stw	r3,128(sp)
 1023e18:	d8801f15 	stw	r2,124(sp)
 1023e1c:	010001c4 	movi	r4,7
 1023e20:	20823316 	blt	r4,r2,10246f0 <___svfprintf_internal_r+0x170c>
 1023e24:	42000204 	addi	r8,r8,8
 1023e28:	d8802617 	ldw	r2,152(sp)
 1023e2c:	dac03317 	ldw	r11,204(sp)
 1023e30:	12c00216 	blt	r2,r11,1023e3c <___svfprintf_internal_r+0xe58>
 1023e34:	8880004c 	andi	r2,r17,1
 1023e38:	103e4c26 	beq	r2,zero,102376c <_gp+0xfffe5ae8>
 1023e3c:	db003917 	ldw	r12,228(sp)
 1023e40:	d8801f17 	ldw	r2,124(sp)
 1023e44:	dac03517 	ldw	r11,212(sp)
 1023e48:	1b07883a 	add	r3,r3,r12
 1023e4c:	10800044 	addi	r2,r2,1
 1023e50:	42c00015 	stw	r11,0(r8)
 1023e54:	43000115 	stw	r12,4(r8)
 1023e58:	d8c02015 	stw	r3,128(sp)
 1023e5c:	d8801f15 	stw	r2,124(sp)
 1023e60:	010001c4 	movi	r4,7
 1023e64:	20826f16 	blt	r4,r2,1024824 <___svfprintf_internal_r+0x1840>
 1023e68:	42000204 	addi	r8,r8,8
 1023e6c:	db003317 	ldw	r12,204(sp)
 1023e70:	643fffc4 	addi	r16,r12,-1
 1023e74:	043e3d0e 	bge	zero,r16,102376c <_gp+0xfffe5ae8>
 1023e78:	04800404 	movi	r18,16
 1023e7c:	d8801f17 	ldw	r2,124(sp)
 1023e80:	94009a0e 	bge	r18,r16,10240ec <___svfprintf_internal_r+0x1108>
 1023e84:	014040f4 	movhi	r5,259
 1023e88:	294ff984 	addi	r5,r5,16358
 1023e8c:	d9402b15 	stw	r5,172(sp)
 1023e90:	054001c4 	movi	r21,7
 1023e94:	dcc02f17 	ldw	r19,188(sp)
 1023e98:	00000306 	br	1023ea8 <___svfprintf_internal_r+0xec4>
 1023e9c:	42000204 	addi	r8,r8,8
 1023ea0:	843ffc04 	addi	r16,r16,-16
 1023ea4:	9400940e 	bge	r18,r16,10240f8 <___svfprintf_internal_r+0x1114>
 1023ea8:	18c00404 	addi	r3,r3,16
 1023eac:	10800044 	addi	r2,r2,1
 1023eb0:	45000015 	stw	r20,0(r8)
 1023eb4:	44800115 	stw	r18,4(r8)
 1023eb8:	d8c02015 	stw	r3,128(sp)
 1023ebc:	d8801f15 	stw	r2,124(sp)
 1023ec0:	a8bff60e 	bge	r21,r2,1023e9c <_gp+0xfffe6218>
 1023ec4:	9809883a 	mov	r4,r19
 1023ec8:	b80b883a 	mov	r5,r23
 1023ecc:	b00d883a 	mov	r6,r22
 1023ed0:	102c1f00 	call	102c1f0 <__ssprint_r>
 1023ed4:	103d0b1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1023ed8:	d8c02017 	ldw	r3,128(sp)
 1023edc:	d8801f17 	ldw	r2,124(sp)
 1023ee0:	da000404 	addi	r8,sp,16
 1023ee4:	003fee06 	br	1023ea0 <_gp+0xfffe621c>
 1023ee8:	dac02e17 	ldw	r11,184(sp)
 1023eec:	db002a17 	ldw	r12,168(sp)
 1023ef0:	5b2bc83a 	sub	r21,r11,r12
 1023ef4:	057ddc0e 	bge	zero,r21,1023668 <_gp+0xfffe59e4>
 1023ef8:	07000404 	movi	fp,16
 1023efc:	d8801f17 	ldw	r2,124(sp)
 1023f00:	e5435d0e 	bge	fp,r21,1024c78 <___svfprintf_internal_r+0x1c94>
 1023f04:	014040f4 	movhi	r5,259
 1023f08:	a809883a 	mov	r4,r21
 1023f0c:	294ff984 	addi	r5,r5,16358
 1023f10:	dc002c15 	stw	r16,176(sp)
 1023f14:	902b883a 	mov	r21,r18
 1023f18:	d9402b15 	stw	r5,172(sp)
 1023f1c:	8825883a 	mov	r18,r17
 1023f20:	04c001c4 	movi	r19,7
 1023f24:	dc002f17 	ldw	r16,188(sp)
 1023f28:	2023883a 	mov	r17,r4
 1023f2c:	00000306 	br	1023f3c <___svfprintf_internal_r+0xf58>
 1023f30:	8c7ffc04 	addi	r17,r17,-16
 1023f34:	42000204 	addi	r8,r8,8
 1023f38:	e440110e 	bge	fp,r17,1023f80 <___svfprintf_internal_r+0xf9c>
 1023f3c:	18c00404 	addi	r3,r3,16
 1023f40:	10800044 	addi	r2,r2,1
 1023f44:	45000015 	stw	r20,0(r8)
 1023f48:	47000115 	stw	fp,4(r8)
 1023f4c:	d8c02015 	stw	r3,128(sp)
 1023f50:	d8801f15 	stw	r2,124(sp)
 1023f54:	98bff60e 	bge	r19,r2,1023f30 <_gp+0xfffe62ac>
 1023f58:	8009883a 	mov	r4,r16
 1023f5c:	b80b883a 	mov	r5,r23
 1023f60:	b00d883a 	mov	r6,r22
 1023f64:	102c1f00 	call	102c1f0 <__ssprint_r>
 1023f68:	103ce61e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1023f6c:	8c7ffc04 	addi	r17,r17,-16
 1023f70:	d8c02017 	ldw	r3,128(sp)
 1023f74:	d8801f17 	ldw	r2,124(sp)
 1023f78:	da000404 	addi	r8,sp,16
 1023f7c:	e47fef16 	blt	fp,r17,1023f3c <_gp+0xfffe62b8>
 1023f80:	dc002c17 	ldw	r16,176(sp)
 1023f84:	8809883a 	mov	r4,r17
 1023f88:	9023883a 	mov	r17,r18
 1023f8c:	a825883a 	mov	r18,r21
 1023f90:	202b883a 	mov	r21,r4
 1023f94:	dac02b17 	ldw	r11,172(sp)
 1023f98:	1d47883a 	add	r3,r3,r21
 1023f9c:	10800044 	addi	r2,r2,1
 1023fa0:	42c00015 	stw	r11,0(r8)
 1023fa4:	45400115 	stw	r21,4(r8)
 1023fa8:	d8c02015 	stw	r3,128(sp)
 1023fac:	d8801f15 	stw	r2,124(sp)
 1023fb0:	010001c4 	movi	r4,7
 1023fb4:	20818016 	blt	r4,r2,10245b8 <___svfprintf_internal_r+0x15d4>
 1023fb8:	42000204 	addi	r8,r8,8
 1023fbc:	003daa06 	br	1023668 <_gp+0xfffe59e4>
 1023fc0:	d9403b17 	ldw	r5,236(sp)
 1023fc4:	b007883a 	mov	r3,r22
 1023fc8:	988003cc 	andi	r2,r19,15
 1023fcc:	e008973a 	slli	r4,fp,28
 1023fd0:	2885883a 	add	r2,r5,r2
 1023fd4:	9826d13a 	srli	r19,r19,4
 1023fd8:	10800003 	ldbu	r2,0(r2)
 1023fdc:	e038d13a 	srli	fp,fp,4
 1023fe0:	18ffffc4 	addi	r3,r3,-1
 1023fe4:	24e6b03a 	or	r19,r4,r19
 1023fe8:	18800005 	stb	r2,0(r3)
 1023fec:	9f04b03a 	or	r2,r19,fp
 1023ff0:	103ff51e 	bne	r2,zero,1023fc8 <_gp+0xfffe6344>
 1023ff4:	d8c03115 	stw	r3,196(sp)
 1023ff8:	b0e5c83a 	sub	r18,r22,r3
 1023ffc:	003d2d06 	br	10234b4 <_gp+0xfffe5830>
 1024000:	db003317 	ldw	r12,204(sp)
 1024004:	00800044 	movi	r2,1
 1024008:	18c00044 	addi	r3,r3,1
 102400c:	13014b0e 	bge	r2,r12,102453c <___svfprintf_internal_r+0x1558>
 1024010:	dc001f17 	ldw	r16,124(sp)
 1024014:	dac03117 	ldw	r11,196(sp)
 1024018:	00800044 	movi	r2,1
 102401c:	84000044 	addi	r16,r16,1
 1024020:	40800115 	stw	r2,4(r8)
 1024024:	42c00015 	stw	r11,0(r8)
 1024028:	d8c02015 	stw	r3,128(sp)
 102402c:	dc001f15 	stw	r16,124(sp)
 1024030:	008001c4 	movi	r2,7
 1024034:	14014e16 	blt	r2,r16,1024570 <___svfprintf_internal_r+0x158c>
 1024038:	42000204 	addi	r8,r8,8
 102403c:	db003917 	ldw	r12,228(sp)
 1024040:	dac03517 	ldw	r11,212(sp)
 1024044:	84000044 	addi	r16,r16,1
 1024048:	1b07883a 	add	r3,r3,r12
 102404c:	42c00015 	stw	r11,0(r8)
 1024050:	43000115 	stw	r12,4(r8)
 1024054:	d8c02015 	stw	r3,128(sp)
 1024058:	dc001f15 	stw	r16,124(sp)
 102405c:	008001c4 	movi	r2,7
 1024060:	14014c16 	blt	r2,r16,1024594 <___svfprintf_internal_r+0x15b0>
 1024064:	44800204 	addi	r18,r8,8
 1024068:	d9003717 	ldw	r4,220(sp)
 102406c:	d9403817 	ldw	r5,224(sp)
 1024070:	000d883a 	mov	r6,zero
 1024074:	000f883a 	mov	r7,zero
 1024078:	d8c03e15 	stw	r3,248(sp)
 102407c:	10305d80 	call	10305d8 <__eqdf2>
 1024080:	d8c03e17 	ldw	r3,248(sp)
 1024084:	db003317 	ldw	r12,204(sp)
 1024088:	10009526 	beq	r2,zero,10242e0 <___svfprintf_internal_r+0x12fc>
 102408c:	dac03117 	ldw	r11,196(sp)
 1024090:	60bfffc4 	addi	r2,r12,-1
 1024094:	1887883a 	add	r3,r3,r2
 1024098:	59000044 	addi	r4,r11,1
 102409c:	84000044 	addi	r16,r16,1
 10240a0:	90800115 	stw	r2,4(r18)
 10240a4:	91000015 	stw	r4,0(r18)
 10240a8:	d8c02015 	stw	r3,128(sp)
 10240ac:	dc001f15 	stw	r16,124(sp)
 10240b0:	008001c4 	movi	r2,7
 10240b4:	1400b316 	blt	r2,r16,1024384 <___svfprintf_internal_r+0x13a0>
 10240b8:	94800204 	addi	r18,r18,8
 10240bc:	dac03a17 	ldw	r11,232(sp)
 10240c0:	dd4022c4 	addi	r21,sp,139
 10240c4:	84000044 	addi	r16,r16,1
 10240c8:	58c7883a 	add	r3,r11,r3
 10240cc:	95400015 	stw	r21,0(r18)
 10240d0:	92c00115 	stw	r11,4(r18)
 10240d4:	d8c02015 	stw	r3,128(sp)
 10240d8:	dc001f15 	stw	r16,124(sp)
 10240dc:	008001c4 	movi	r2,7
 10240e0:	14000e16 	blt	r2,r16,102411c <___svfprintf_internal_r+0x1138>
 10240e4:	92000204 	addi	r8,r18,8
 10240e8:	003da006 	br	102376c <_gp+0xfffe5ae8>
 10240ec:	010040f4 	movhi	r4,259
 10240f0:	210ff984 	addi	r4,r4,16358
 10240f4:	d9002b15 	stw	r4,172(sp)
 10240f8:	dac02b17 	ldw	r11,172(sp)
 10240fc:	1c07883a 	add	r3,r3,r16
 1024100:	44000115 	stw	r16,4(r8)
 1024104:	42c00015 	stw	r11,0(r8)
 1024108:	10800044 	addi	r2,r2,1
 102410c:	d8c02015 	stw	r3,128(sp)
 1024110:	d8801f15 	stw	r2,124(sp)
 1024114:	010001c4 	movi	r4,7
 1024118:	20bd930e 	bge	r4,r2,1023768 <_gp+0xfffe5ae4>
 102411c:	d9002f17 	ldw	r4,188(sp)
 1024120:	b80b883a 	mov	r5,r23
 1024124:	b00d883a 	mov	r6,r22
 1024128:	102c1f00 	call	102c1f0 <__ssprint_r>
 102412c:	103c751e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024130:	d8c02017 	ldw	r3,128(sp)
 1024134:	da000404 	addi	r8,sp,16
 1024138:	003d8c06 	br	102376c <_gp+0xfffe5ae8>
 102413c:	d9002f17 	ldw	r4,188(sp)
 1024140:	b80b883a 	mov	r5,r23
 1024144:	b00d883a 	mov	r6,r22
 1024148:	102c1f00 	call	102c1f0 <__ssprint_r>
 102414c:	103dc326 	beq	r2,zero,102385c <_gp+0xfffe5bd8>
 1024150:	003c6c06 	br	1023304 <_gp+0xfffe5680>
 1024154:	10803fcc 	andi	r2,r2,255
 1024158:	1000201e 	bne	r2,zero,10241dc <___svfprintf_internal_r+0x11f8>
 102415c:	8880004c 	andi	r2,r17,1
 1024160:	10001e26 	beq	r2,zero,10241dc <___svfprintf_internal_r+0x11f8>
 1024164:	00800c04 	movi	r2,48
 1024168:	d8c01dc4 	addi	r3,sp,119
 102416c:	d8801dc5 	stb	r2,119(sp)
 1024170:	dc803d17 	ldw	r18,244(sp)
 1024174:	d8c03115 	stw	r3,196(sp)
 1024178:	003cce06 	br	10234b4 <_gp+0xfffe5830>
 102417c:	d9002f17 	ldw	r4,188(sp)
 1024180:	b80b883a 	mov	r5,r23
 1024184:	b00d883a 	mov	r6,r22
 1024188:	102c1f00 	call	102c1f0 <__ssprint_r>
 102418c:	103c5d1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024190:	d8c02017 	ldw	r3,128(sp)
 1024194:	da000404 	addi	r8,sp,16
 1024198:	003d6706 	br	1023738 <_gp+0xfffe5ab4>
 102419c:	d9002f17 	ldw	r4,188(sp)
 10241a0:	b80b883a 	mov	r5,r23
 10241a4:	b00d883a 	mov	r6,r22
 10241a8:	102c1f00 	call	102c1f0 <__ssprint_r>
 10241ac:	103c551e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10241b0:	d8c02017 	ldw	r3,128(sp)
 10241b4:	da000404 	addi	r8,sp,16
 10241b8:	003d1a06 	br	1023624 <_gp+0xfffe59a0>
 10241bc:	d9002f17 	ldw	r4,188(sp)
 10241c0:	b80b883a 	mov	r5,r23
 10241c4:	b00d883a 	mov	r6,r22
 10241c8:	102c1f00 	call	102c1f0 <__ssprint_r>
 10241cc:	103c4d1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10241d0:	d8c02017 	ldw	r3,128(sp)
 10241d4:	da000404 	addi	r8,sp,16
 10241d8:	003d2006 	br	102365c <_gp+0xfffe59d8>
 10241dc:	0025883a 	mov	r18,zero
 10241e0:	dd803115 	stw	r22,196(sp)
 10241e4:	003cb306 	br	10234b4 <_gp+0xfffe5830>
 10241e8:	dc002617 	ldw	r16,152(sp)
 10241ec:	0401480e 	bge	zero,r16,1024710 <___svfprintf_internal_r+0x172c>
 10241f0:	db003117 	ldw	r12,196(sp)
 10241f4:	dac03317 	ldw	r11,204(sp)
 10241f8:	62e1883a 	add	r16,r12,r11
 10241fc:	db003417 	ldw	r12,208(sp)
 1024200:	5825883a 	mov	r18,r11
 1024204:	62c0010e 	bge	r12,r11,102420c <___svfprintf_internal_r+0x1228>
 1024208:	6025883a 	mov	r18,r12
 102420c:	04800b0e 	bge	zero,r18,102423c <___svfprintf_internal_r+0x1258>
 1024210:	d8801f17 	ldw	r2,124(sp)
 1024214:	dac03117 	ldw	r11,196(sp)
 1024218:	1c87883a 	add	r3,r3,r18
 102421c:	10800044 	addi	r2,r2,1
 1024220:	42c00015 	stw	r11,0(r8)
 1024224:	44800115 	stw	r18,4(r8)
 1024228:	d8c02015 	stw	r3,128(sp)
 102422c:	d8801f15 	stw	r2,124(sp)
 1024230:	010001c4 	movi	r4,7
 1024234:	20823f16 	blt	r4,r2,1024b34 <___svfprintf_internal_r+0x1b50>
 1024238:	42000204 	addi	r8,r8,8
 102423c:	90023b16 	blt	r18,zero,1024b2c <___svfprintf_internal_r+0x1b48>
 1024240:	db003417 	ldw	r12,208(sp)
 1024244:	64a5c83a 	sub	r18,r12,r18
 1024248:	0480780e 	bge	zero,r18,102442c <___svfprintf_internal_r+0x1448>
 102424c:	05400404 	movi	r21,16
 1024250:	d8801f17 	ldw	r2,124(sp)
 1024254:	ac81140e 	bge	r21,r18,10246a8 <___svfprintf_internal_r+0x16c4>
 1024258:	014040f4 	movhi	r5,259
 102425c:	294ff984 	addi	r5,r5,16358
 1024260:	d9402b15 	stw	r5,172(sp)
 1024264:	070001c4 	movi	fp,7
 1024268:	dcc02f17 	ldw	r19,188(sp)
 102426c:	00000306 	br	102427c <___svfprintf_internal_r+0x1298>
 1024270:	42000204 	addi	r8,r8,8
 1024274:	94bffc04 	addi	r18,r18,-16
 1024278:	ac810e0e 	bge	r21,r18,10246b4 <___svfprintf_internal_r+0x16d0>
 102427c:	18c00404 	addi	r3,r3,16
 1024280:	10800044 	addi	r2,r2,1
 1024284:	45000015 	stw	r20,0(r8)
 1024288:	45400115 	stw	r21,4(r8)
 102428c:	d8c02015 	stw	r3,128(sp)
 1024290:	d8801f15 	stw	r2,124(sp)
 1024294:	e0bff60e 	bge	fp,r2,1024270 <_gp+0xfffe65ec>
 1024298:	9809883a 	mov	r4,r19
 102429c:	b80b883a 	mov	r5,r23
 10242a0:	b00d883a 	mov	r6,r22
 10242a4:	102c1f00 	call	102c1f0 <__ssprint_r>
 10242a8:	103c161e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10242ac:	d8c02017 	ldw	r3,128(sp)
 10242b0:	d8801f17 	ldw	r2,124(sp)
 10242b4:	da000404 	addi	r8,sp,16
 10242b8:	003fee06 	br	1024274 <_gp+0xfffe65f0>
 10242bc:	d9002f17 	ldw	r4,188(sp)
 10242c0:	b80b883a 	mov	r5,r23
 10242c4:	b00d883a 	mov	r6,r22
 10242c8:	102c1f00 	call	102c1f0 <__ssprint_r>
 10242cc:	103c0d1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10242d0:	d8c02017 	ldw	r3,128(sp)
 10242d4:	d8802787 	ldb	r2,158(sp)
 10242d8:	da000404 	addi	r8,sp,16
 10242dc:	003cc406 	br	10235f0 <_gp+0xfffe596c>
 10242e0:	657fffc4 	addi	r21,r12,-1
 10242e4:	057f750e 	bge	zero,r21,10240bc <_gp+0xfffe6438>
 10242e8:	07000404 	movi	fp,16
 10242ec:	e542ef0e 	bge	fp,r21,1024eac <___svfprintf_internal_r+0x1ec8>
 10242f0:	010040f4 	movhi	r4,259
 10242f4:	210ff984 	addi	r4,r4,16358
 10242f8:	d9002b15 	stw	r4,172(sp)
 10242fc:	01c001c4 	movi	r7,7
 1024300:	dcc02f17 	ldw	r19,188(sp)
 1024304:	00000306 	br	1024314 <___svfprintf_internal_r+0x1330>
 1024308:	ad7ffc04 	addi	r21,r21,-16
 102430c:	94800204 	addi	r18,r18,8
 1024310:	e540130e 	bge	fp,r21,1024360 <___svfprintf_internal_r+0x137c>
 1024314:	18c00404 	addi	r3,r3,16
 1024318:	84000044 	addi	r16,r16,1
 102431c:	95000015 	stw	r20,0(r18)
 1024320:	97000115 	stw	fp,4(r18)
 1024324:	d8c02015 	stw	r3,128(sp)
 1024328:	dc001f15 	stw	r16,124(sp)
 102432c:	3c3ff60e 	bge	r7,r16,1024308 <_gp+0xfffe6684>
 1024330:	9809883a 	mov	r4,r19
 1024334:	b80b883a 	mov	r5,r23
 1024338:	b00d883a 	mov	r6,r22
 102433c:	d9c03e15 	stw	r7,248(sp)
 1024340:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024344:	d9c03e17 	ldw	r7,248(sp)
 1024348:	103bee1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 102434c:	ad7ffc04 	addi	r21,r21,-16
 1024350:	d8c02017 	ldw	r3,128(sp)
 1024354:	dc001f17 	ldw	r16,124(sp)
 1024358:	dc800404 	addi	r18,sp,16
 102435c:	e57fed16 	blt	fp,r21,1024314 <_gp+0xfffe6690>
 1024360:	dac02b17 	ldw	r11,172(sp)
 1024364:	1d47883a 	add	r3,r3,r21
 1024368:	84000044 	addi	r16,r16,1
 102436c:	92c00015 	stw	r11,0(r18)
 1024370:	95400115 	stw	r21,4(r18)
 1024374:	d8c02015 	stw	r3,128(sp)
 1024378:	dc001f15 	stw	r16,124(sp)
 102437c:	008001c4 	movi	r2,7
 1024380:	143f4d0e 	bge	r2,r16,10240b8 <_gp+0xfffe6434>
 1024384:	d9002f17 	ldw	r4,188(sp)
 1024388:	b80b883a 	mov	r5,r23
 102438c:	b00d883a 	mov	r6,r22
 1024390:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024394:	103bdb1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024398:	d8c02017 	ldw	r3,128(sp)
 102439c:	dc001f17 	ldw	r16,124(sp)
 10243a0:	dc800404 	addi	r18,sp,16
 10243a4:	003f4506 	br	10240bc <_gp+0xfffe6438>
 10243a8:	00800084 	movi	r2,2
 10243ac:	9f06b03a 	or	r3,r19,fp
 10243b0:	003d3806 	br	1023894 <_gp+0xfffe5c10>
 10243b4:	dac02d17 	ldw	r11,180(sp)
 10243b8:	0039883a 	mov	fp,zero
 10243bc:	0005883a 	mov	r2,zero
 10243c0:	5cc00017 	ldw	r19,0(r11)
 10243c4:	5ac00104 	addi	r11,r11,4
 10243c8:	dac02d15 	stw	r11,180(sp)
 10243cc:	9807883a 	mov	r3,r19
 10243d0:	003d3006 	br	1023894 <_gp+0xfffe5c10>
 10243d4:	1cc00017 	ldw	r19,0(r3)
 10243d8:	dac02d17 	ldw	r11,180(sp)
 10243dc:	9839d7fa 	srai	fp,r19,31
 10243e0:	5ac00104 	addi	r11,r11,4
 10243e4:	dac02d15 	stw	r11,180(sp)
 10243e8:	e005883a 	mov	r2,fp
 10243ec:	003c0a06 	br	1023418 <_gp+0xfffe5794>
 10243f0:	db002d17 	ldw	r12,180(sp)
 10243f4:	0039883a 	mov	fp,zero
 10243f8:	00800044 	movi	r2,1
 10243fc:	64c00017 	ldw	r19,0(r12)
 1024400:	63000104 	addi	r12,r12,4
 1024404:	db002d15 	stw	r12,180(sp)
 1024408:	9807883a 	mov	r3,r19
 102440c:	003d2106 	br	1023894 <_gp+0xfffe5c10>
 1024410:	d9002f17 	ldw	r4,188(sp)
 1024414:	b80b883a 	mov	r5,r23
 1024418:	b00d883a 	mov	r6,r22
 102441c:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024420:	103bb81e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024424:	d8c02017 	ldw	r3,128(sp)
 1024428:	da000404 	addi	r8,sp,16
 102442c:	db003117 	ldw	r12,196(sp)
 1024430:	dac03417 	ldw	r11,208(sp)
 1024434:	d8802617 	ldw	r2,152(sp)
 1024438:	62e5883a 	add	r18,r12,r11
 102443c:	db003317 	ldw	r12,204(sp)
 1024440:	13000216 	blt	r2,r12,102444c <___svfprintf_internal_r+0x1468>
 1024444:	8900004c 	andi	r4,r17,1
 1024448:	20000c26 	beq	r4,zero,102447c <___svfprintf_internal_r+0x1498>
 102444c:	dac03917 	ldw	r11,228(sp)
 1024450:	d9001f17 	ldw	r4,124(sp)
 1024454:	db003517 	ldw	r12,212(sp)
 1024458:	1ac7883a 	add	r3,r3,r11
 102445c:	21000044 	addi	r4,r4,1
 1024460:	43000015 	stw	r12,0(r8)
 1024464:	42c00115 	stw	r11,4(r8)
 1024468:	d8c02015 	stw	r3,128(sp)
 102446c:	d9001f15 	stw	r4,124(sp)
 1024470:	014001c4 	movi	r5,7
 1024474:	2901b716 	blt	r5,r4,1024b54 <___svfprintf_internal_r+0x1b70>
 1024478:	42000204 	addi	r8,r8,8
 102447c:	dac03317 	ldw	r11,204(sp)
 1024480:	8489c83a 	sub	r4,r16,r18
 1024484:	5885c83a 	sub	r2,r11,r2
 1024488:	1021883a 	mov	r16,r2
 102448c:	2080010e 	bge	r4,r2,1024494 <___svfprintf_internal_r+0x14b0>
 1024490:	2021883a 	mov	r16,r4
 1024494:	04000a0e 	bge	zero,r16,10244c0 <___svfprintf_internal_r+0x14dc>
 1024498:	d9001f17 	ldw	r4,124(sp)
 102449c:	1c07883a 	add	r3,r3,r16
 10244a0:	44800015 	stw	r18,0(r8)
 10244a4:	21000044 	addi	r4,r4,1
 10244a8:	44000115 	stw	r16,4(r8)
 10244ac:	d8c02015 	stw	r3,128(sp)
 10244b0:	d9001f15 	stw	r4,124(sp)
 10244b4:	014001c4 	movi	r5,7
 10244b8:	2901bf16 	blt	r5,r4,1024bb8 <___svfprintf_internal_r+0x1bd4>
 10244bc:	42000204 	addi	r8,r8,8
 10244c0:	8001bb16 	blt	r16,zero,1024bb0 <___svfprintf_internal_r+0x1bcc>
 10244c4:	1421c83a 	sub	r16,r2,r16
 10244c8:	043ca80e 	bge	zero,r16,102376c <_gp+0xfffe5ae8>
 10244cc:	04800404 	movi	r18,16
 10244d0:	d8801f17 	ldw	r2,124(sp)
 10244d4:	943f050e 	bge	r18,r16,10240ec <_gp+0xfffe6468>
 10244d8:	014040f4 	movhi	r5,259
 10244dc:	294ff984 	addi	r5,r5,16358
 10244e0:	d9402b15 	stw	r5,172(sp)
 10244e4:	054001c4 	movi	r21,7
 10244e8:	dcc02f17 	ldw	r19,188(sp)
 10244ec:	00000306 	br	10244fc <___svfprintf_internal_r+0x1518>
 10244f0:	42000204 	addi	r8,r8,8
 10244f4:	843ffc04 	addi	r16,r16,-16
 10244f8:	943eff0e 	bge	r18,r16,10240f8 <_gp+0xfffe6474>
 10244fc:	18c00404 	addi	r3,r3,16
 1024500:	10800044 	addi	r2,r2,1
 1024504:	45000015 	stw	r20,0(r8)
 1024508:	44800115 	stw	r18,4(r8)
 102450c:	d8c02015 	stw	r3,128(sp)
 1024510:	d8801f15 	stw	r2,124(sp)
 1024514:	a8bff60e 	bge	r21,r2,10244f0 <_gp+0xfffe686c>
 1024518:	9809883a 	mov	r4,r19
 102451c:	b80b883a 	mov	r5,r23
 1024520:	b00d883a 	mov	r6,r22
 1024524:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024528:	103b761e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 102452c:	d8c02017 	ldw	r3,128(sp)
 1024530:	d8801f17 	ldw	r2,124(sp)
 1024534:	da000404 	addi	r8,sp,16
 1024538:	003fee06 	br	10244f4 <_gp+0xfffe6870>
 102453c:	8888703a 	and	r4,r17,r2
 1024540:	203eb31e 	bne	r4,zero,1024010 <_gp+0xfffe638c>
 1024544:	dc001f17 	ldw	r16,124(sp)
 1024548:	db003117 	ldw	r12,196(sp)
 102454c:	40800115 	stw	r2,4(r8)
 1024550:	84000044 	addi	r16,r16,1
 1024554:	43000015 	stw	r12,0(r8)
 1024558:	d8c02015 	stw	r3,128(sp)
 102455c:	dc001f15 	stw	r16,124(sp)
 1024560:	008001c4 	movi	r2,7
 1024564:	143f8716 	blt	r2,r16,1024384 <_gp+0xfffe6700>
 1024568:	44800204 	addi	r18,r8,8
 102456c:	003ed306 	br	10240bc <_gp+0xfffe6438>
 1024570:	d9002f17 	ldw	r4,188(sp)
 1024574:	b80b883a 	mov	r5,r23
 1024578:	b00d883a 	mov	r6,r22
 102457c:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024580:	103b601e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024584:	d8c02017 	ldw	r3,128(sp)
 1024588:	dc001f17 	ldw	r16,124(sp)
 102458c:	da000404 	addi	r8,sp,16
 1024590:	003eaa06 	br	102403c <_gp+0xfffe63b8>
 1024594:	d9002f17 	ldw	r4,188(sp)
 1024598:	b80b883a 	mov	r5,r23
 102459c:	b00d883a 	mov	r6,r22
 10245a0:	102c1f00 	call	102c1f0 <__ssprint_r>
 10245a4:	103b571e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10245a8:	d8c02017 	ldw	r3,128(sp)
 10245ac:	dc001f17 	ldw	r16,124(sp)
 10245b0:	dc800404 	addi	r18,sp,16
 10245b4:	003eac06 	br	1024068 <_gp+0xfffe63e4>
 10245b8:	d9002f17 	ldw	r4,188(sp)
 10245bc:	b80b883a 	mov	r5,r23
 10245c0:	b00d883a 	mov	r6,r22
 10245c4:	102c1f00 	call	102c1f0 <__ssprint_r>
 10245c8:	103b4e1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10245cc:	d8c02017 	ldw	r3,128(sp)
 10245d0:	da000404 	addi	r8,sp,16
 10245d4:	003c2406 	br	1023668 <_gp+0xfffe59e4>
 10245d8:	da004015 	stw	r8,256(sp)
 10245dc:	da403f15 	stw	r9,252(sp)
 10245e0:	102bf480 	call	102bf48 <__fpclassifyd>
 10245e4:	da004017 	ldw	r8,256(sp)
 10245e8:	da403f17 	ldw	r9,252(sp)
 10245ec:	1000951e 	bne	r2,zero,1024844 <___svfprintf_internal_r+0x1860>
 10245f0:	008011c4 	movi	r2,71
 10245f4:	1400fb16 	blt	r2,r16,10249e4 <___svfprintf_internal_r+0x1a00>
 10245f8:	030040f4 	movhi	r12,259
 10245fc:	630feb04 	addi	r12,r12,16300
 1024600:	db003115 	stw	r12,196(sp)
 1024604:	00c000c4 	movi	r3,3
 1024608:	00bfdfc4 	movi	r2,-129
 102460c:	d8c02a15 	stw	r3,168(sp)
 1024610:	88a2703a 	and	r17,r17,r2
 1024614:	dd402783 	ldbu	r21,158(sp)
 1024618:	dcc02d15 	stw	r19,180(sp)
 102461c:	1825883a 	mov	r18,r3
 1024620:	d8003215 	stw	zero,200(sp)
 1024624:	d8003415 	stw	zero,208(sp)
 1024628:	003ba706 	br	10234c8 <_gp+0xfffe5844>
 102462c:	8880040c 	andi	r2,r17,16
 1024630:	1000091e 	bne	r2,zero,1024658 <___svfprintf_internal_r+0x1674>
 1024634:	8c40100c 	andi	r17,r17,64
 1024638:	88000726 	beq	r17,zero,1024658 <___svfprintf_internal_r+0x1674>
 102463c:	db002d17 	ldw	r12,180(sp)
 1024640:	dac03017 	ldw	r11,192(sp)
 1024644:	60800017 	ldw	r2,0(r12)
 1024648:	63000104 	addi	r12,r12,4
 102464c:	db002d15 	stw	r12,180(sp)
 1024650:	12c0000d 	sth	r11,0(r2)
 1024654:	003a8f06 	br	1023094 <_gp+0xfffe5410>
 1024658:	db002d17 	ldw	r12,180(sp)
 102465c:	dac03017 	ldw	r11,192(sp)
 1024660:	60800017 	ldw	r2,0(r12)
 1024664:	63000104 	addi	r12,r12,4
 1024668:	db002d15 	stw	r12,180(sp)
 102466c:	12c00015 	stw	r11,0(r2)
 1024670:	003a8806 	br	1023094 <_gp+0xfffe5410>
 1024674:	88c0100c 	andi	r3,r17,64
 1024678:	1800e926 	beq	r3,zero,1024a20 <___svfprintf_internal_r+0x1a3c>
 102467c:	dac02d17 	ldw	r11,180(sp)
 1024680:	14c0000b 	ldhu	r19,0(r2)
 1024684:	0039883a 	mov	fp,zero
 1024688:	5ac00104 	addi	r11,r11,4
 102468c:	dac02d15 	stw	r11,180(sp)
 1024690:	003d1406 	br	1023ae4 <_gp+0xfffe5e60>
 1024694:	1c000007 	ldb	r16,0(r3)
 1024698:	1805883a 	mov	r2,r3
 102469c:	003aa706 	br	102313c <_gp+0xfffe54b8>
 10246a0:	00800084 	movi	r2,2
 10246a4:	003c7b06 	br	1023894 <_gp+0xfffe5c10>
 10246a8:	010040f4 	movhi	r4,259
 10246ac:	210ff984 	addi	r4,r4,16358
 10246b0:	d9002b15 	stw	r4,172(sp)
 10246b4:	dac02b17 	ldw	r11,172(sp)
 10246b8:	1c87883a 	add	r3,r3,r18
 10246bc:	10800044 	addi	r2,r2,1
 10246c0:	42c00015 	stw	r11,0(r8)
 10246c4:	44800115 	stw	r18,4(r8)
 10246c8:	d8c02015 	stw	r3,128(sp)
 10246cc:	d8801f15 	stw	r2,124(sp)
 10246d0:	010001c4 	movi	r4,7
 10246d4:	20bf4e16 	blt	r4,r2,1024410 <_gp+0xfffe678c>
 10246d8:	42000204 	addi	r8,r8,8
 10246dc:	003f5306 	br	102442c <_gp+0xfffe67a8>
 10246e0:	010040f4 	movhi	r4,259
 10246e4:	210ff984 	addi	r4,r4,16358
 10246e8:	d9002b15 	stw	r4,172(sp)
 10246ec:	003c0806 	br	1023710 <_gp+0xfffe5a8c>
 10246f0:	d9002f17 	ldw	r4,188(sp)
 10246f4:	b80b883a 	mov	r5,r23
 10246f8:	b00d883a 	mov	r6,r22
 10246fc:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024700:	103b001e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024704:	d8c02017 	ldw	r3,128(sp)
 1024708:	da000404 	addi	r8,sp,16
 102470c:	003dc606 	br	1023e28 <_gp+0xfffe61a4>
 1024710:	d8801f17 	ldw	r2,124(sp)
 1024714:	030040f4 	movhi	r12,259
 1024718:	01000044 	movi	r4,1
 102471c:	18c00044 	addi	r3,r3,1
 1024720:	10800044 	addi	r2,r2,1
 1024724:	630ff904 	addi	r12,r12,16356
 1024728:	41000115 	stw	r4,4(r8)
 102472c:	43000015 	stw	r12,0(r8)
 1024730:	d8c02015 	stw	r3,128(sp)
 1024734:	d8801f15 	stw	r2,124(sp)
 1024738:	010001c4 	movi	r4,7
 102473c:	2080ad16 	blt	r4,r2,10249f4 <___svfprintf_internal_r+0x1a10>
 1024740:	42000204 	addi	r8,r8,8
 1024744:	8000041e 	bne	r16,zero,1024758 <___svfprintf_internal_r+0x1774>
 1024748:	dac03317 	ldw	r11,204(sp)
 102474c:	5800021e 	bne	r11,zero,1024758 <___svfprintf_internal_r+0x1774>
 1024750:	8880004c 	andi	r2,r17,1
 1024754:	103c0526 	beq	r2,zero,102376c <_gp+0xfffe5ae8>
 1024758:	db003917 	ldw	r12,228(sp)
 102475c:	d8801f17 	ldw	r2,124(sp)
 1024760:	dac03517 	ldw	r11,212(sp)
 1024764:	1b07883a 	add	r3,r3,r12
 1024768:	10800044 	addi	r2,r2,1
 102476c:	42c00015 	stw	r11,0(r8)
 1024770:	43000115 	stw	r12,4(r8)
 1024774:	d8c02015 	stw	r3,128(sp)
 1024778:	d8801f15 	stw	r2,124(sp)
 102477c:	010001c4 	movi	r4,7
 1024780:	20818816 	blt	r4,r2,1024da4 <___svfprintf_internal_r+0x1dc0>
 1024784:	42000204 	addi	r8,r8,8
 1024788:	0421c83a 	sub	r16,zero,r16
 102478c:	0400bc0e 	bge	zero,r16,1024a80 <___svfprintf_internal_r+0x1a9c>
 1024790:	04800404 	movi	r18,16
 1024794:	9400f80e 	bge	r18,r16,1024b78 <___svfprintf_internal_r+0x1b94>
 1024798:	010040f4 	movhi	r4,259
 102479c:	210ff984 	addi	r4,r4,16358
 10247a0:	d9002b15 	stw	r4,172(sp)
 10247a4:	054001c4 	movi	r21,7
 10247a8:	dcc02f17 	ldw	r19,188(sp)
 10247ac:	00000306 	br	10247bc <___svfprintf_internal_r+0x17d8>
 10247b0:	42000204 	addi	r8,r8,8
 10247b4:	843ffc04 	addi	r16,r16,-16
 10247b8:	9400f20e 	bge	r18,r16,1024b84 <___svfprintf_internal_r+0x1ba0>
 10247bc:	18c00404 	addi	r3,r3,16
 10247c0:	10800044 	addi	r2,r2,1
 10247c4:	45000015 	stw	r20,0(r8)
 10247c8:	44800115 	stw	r18,4(r8)
 10247cc:	d8c02015 	stw	r3,128(sp)
 10247d0:	d8801f15 	stw	r2,124(sp)
 10247d4:	a8bff60e 	bge	r21,r2,10247b0 <_gp+0xfffe6b2c>
 10247d8:	9809883a 	mov	r4,r19
 10247dc:	b80b883a 	mov	r5,r23
 10247e0:	b00d883a 	mov	r6,r22
 10247e4:	102c1f00 	call	102c1f0 <__ssprint_r>
 10247e8:	103ac61e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 10247ec:	d8c02017 	ldw	r3,128(sp)
 10247f0:	d8801f17 	ldw	r2,124(sp)
 10247f4:	da000404 	addi	r8,sp,16
 10247f8:	003fee06 	br	10247b4 <_gp+0xfffe6b30>
 10247fc:	db002e17 	ldw	r12,184(sp)
 1024800:	1805883a 	mov	r2,r3
 1024804:	dac02d15 	stw	r11,180(sp)
 1024808:	0319c83a 	sub	r12,zero,r12
 102480c:	db002e15 	stw	r12,184(sp)
 1024810:	003ad106 	br	1023358 <_gp+0xfffe56d4>
 1024814:	18800044 	addi	r2,r3,1
 1024818:	8c400814 	ori	r17,r17,32
 102481c:	1c000047 	ldb	r16,1(r3)
 1024820:	003a4606 	br	102313c <_gp+0xfffe54b8>
 1024824:	d9002f17 	ldw	r4,188(sp)
 1024828:	b80b883a 	mov	r5,r23
 102482c:	b00d883a 	mov	r6,r22
 1024830:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024834:	103ab31e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024838:	d8c02017 	ldw	r3,128(sp)
 102483c:	da000404 	addi	r8,sp,16
 1024840:	003d8a06 	br	1023e6c <_gp+0xfffe61e8>
 1024844:	057ff7c4 	movi	r21,-33
 1024848:	00bfffc4 	movi	r2,-1
 102484c:	856a703a 	and	r21,r16,r21
 1024850:	48807126 	beq	r9,r2,1024a18 <___svfprintf_internal_r+0x1a34>
 1024854:	008011c4 	movi	r2,71
 1024858:	a8814f26 	beq	r21,r2,1024d98 <___svfprintf_internal_r+0x1db4>
 102485c:	db003817 	ldw	r12,224(sp)
 1024860:	8ac04014 	ori	r11,r17,256
 1024864:	dac02d15 	stw	r11,180(sp)
 1024868:	60015816 	blt	r12,zero,1024dcc <___svfprintf_internal_r+0x1de8>
 102486c:	dc803817 	ldw	r18,224(sp)
 1024870:	d8002a05 	stb	zero,168(sp)
 1024874:	00801984 	movi	r2,102
 1024878:	80808c26 	beq	r16,r2,1024aac <___svfprintf_internal_r+0x1ac8>
 102487c:	00801184 	movi	r2,70
 1024880:	80808a26 	beq	r16,r2,1024aac <___svfprintf_internal_r+0x1ac8>
 1024884:	00801144 	movi	r2,69
 1024888:	a8815426 	beq	r21,r2,1024ddc <___svfprintf_internal_r+0x1df8>
 102488c:	4839883a 	mov	fp,r9
 1024890:	d8802604 	addi	r2,sp,152
 1024894:	d8800115 	stw	r2,4(sp)
 1024898:	d9002f17 	ldw	r4,188(sp)
 102489c:	d8802504 	addi	r2,sp,148
 10248a0:	d9403717 	ldw	r5,220(sp)
 10248a4:	d8800215 	stw	r2,8(sp)
 10248a8:	d8802104 	addi	r2,sp,132
 10248ac:	df000015 	stw	fp,0(sp)
 10248b0:	d8800315 	stw	r2,12(sp)
 10248b4:	900d883a 	mov	r6,r18
 10248b8:	01c00084 	movi	r7,2
 10248bc:	da004015 	stw	r8,256(sp)
 10248c0:	da403f15 	stw	r9,252(sp)
 10248c4:	10273f40 	call	10273f4 <_dtoa_r>
 10248c8:	d8803115 	stw	r2,196(sp)
 10248cc:	008019c4 	movi	r2,103
 10248d0:	da004017 	ldw	r8,256(sp)
 10248d4:	da403f17 	ldw	r9,252(sp)
 10248d8:	80800226 	beq	r16,r2,10248e4 <___svfprintf_internal_r+0x1900>
 10248dc:	008011c4 	movi	r2,71
 10248e0:	8080841e 	bne	r16,r2,1024af4 <___svfprintf_internal_r+0x1b10>
 10248e4:	8880004c 	andi	r2,r17,1
 10248e8:	10015126 	beq	r2,zero,1024e30 <___svfprintf_internal_r+0x1e4c>
 10248ec:	db003117 	ldw	r12,196(sp)
 10248f0:	6715883a 	add	r10,r12,fp
 10248f4:	d9003717 	ldw	r4,220(sp)
 10248f8:	900b883a 	mov	r5,r18
 10248fc:	000d883a 	mov	r6,zero
 1024900:	000f883a 	mov	r7,zero
 1024904:	da004015 	stw	r8,256(sp)
 1024908:	da403f15 	stw	r9,252(sp)
 102490c:	da803e15 	stw	r10,248(sp)
 1024910:	10305d80 	call	10305d8 <__eqdf2>
 1024914:	da004017 	ldw	r8,256(sp)
 1024918:	da403f17 	ldw	r9,252(sp)
 102491c:	da803e17 	ldw	r10,248(sp)
 1024920:	1000d926 	beq	r2,zero,1024c88 <___svfprintf_internal_r+0x1ca4>
 1024924:	d8802117 	ldw	r2,132(sp)
 1024928:	1280062e 	bgeu	r2,r10,1024944 <___svfprintf_internal_r+0x1960>
 102492c:	01000c04 	movi	r4,48
 1024930:	10c00044 	addi	r3,r2,1
 1024934:	d8c02115 	stw	r3,132(sp)
 1024938:	11000005 	stb	r4,0(r2)
 102493c:	d8802117 	ldw	r2,132(sp)
 1024940:	12bffb36 	bltu	r2,r10,1024930 <_gp+0xfffe6cac>
 1024944:	db003117 	ldw	r12,196(sp)
 1024948:	1305c83a 	sub	r2,r2,r12
 102494c:	d8803315 	stw	r2,204(sp)
 1024950:	008011c4 	movi	r2,71
 1024954:	a880b626 	beq	r21,r2,1024c30 <___svfprintf_internal_r+0x1c4c>
 1024958:	00801944 	movi	r2,101
 102495c:	14017e0e 	bge	r2,r16,1024f58 <___svfprintf_internal_r+0x1f74>
 1024960:	00801984 	movi	r2,102
 1024964:	80812826 	beq	r16,r2,1024e08 <___svfprintf_internal_r+0x1e24>
 1024968:	db002617 	ldw	r12,152(sp)
 102496c:	db003415 	stw	r12,208(sp)
 1024970:	db003417 	ldw	r12,208(sp)
 1024974:	dac03317 	ldw	r11,204(sp)
 1024978:	62c11a16 	blt	r12,r11,1024de4 <___svfprintf_internal_r+0x1e00>
 102497c:	8c40004c 	andi	r17,r17,1
 1024980:	88013d1e 	bne	r17,zero,1024e78 <___svfprintf_internal_r+0x1e94>
 1024984:	6005883a 	mov	r2,r12
 1024988:	60012716 	blt	r12,zero,1024e28 <___svfprintf_internal_r+0x1e44>
 102498c:	dc803417 	ldw	r18,208(sp)
 1024990:	df002a07 	ldb	fp,168(sp)
 1024994:	e000b01e 	bne	fp,zero,1024c58 <___svfprintf_internal_r+0x1c74>
 1024998:	dc402d17 	ldw	r17,180(sp)
 102499c:	dd402783 	ldbu	r21,158(sp)
 10249a0:	d8802a15 	stw	r2,168(sp)
 10249a4:	dcc02d15 	stw	r19,180(sp)
 10249a8:	d8003215 	stw	zero,200(sp)
 10249ac:	003ac606 	br	10234c8 <_gp+0xfffe5844>
 10249b0:	008040f4 	movhi	r2,259
 10249b4:	108fe904 	addi	r2,r2,16292
 10249b8:	d8803115 	stw	r2,196(sp)
 10249bc:	003be506 	br	1023954 <_gp+0xfffe5cd0>
 10249c0:	d9002f17 	ldw	r4,188(sp)
 10249c4:	04001004 	movi	r16,64
 10249c8:	800b883a 	mov	r5,r16
 10249cc:	1029dd40 	call	1029dd4 <_malloc_r>
 10249d0:	b8800015 	stw	r2,0(r23)
 10249d4:	b8800415 	stw	r2,16(r23)
 10249d8:	10016126 	beq	r2,zero,1024f60 <___svfprintf_internal_r+0x1f7c>
 10249dc:	bc000515 	stw	r16,20(r23)
 10249e0:	00399a06 	br	102304c <_gp+0xfffe53c8>
 10249e4:	008040f4 	movhi	r2,259
 10249e8:	108fec04 	addi	r2,r2,16304
 10249ec:	d8803115 	stw	r2,196(sp)
 10249f0:	003f0406 	br	1024604 <_gp+0xfffe6980>
 10249f4:	d9002f17 	ldw	r4,188(sp)
 10249f8:	b80b883a 	mov	r5,r23
 10249fc:	b00d883a 	mov	r6,r22
 1024a00:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024a04:	103a3f1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024a08:	dc002617 	ldw	r16,152(sp)
 1024a0c:	d8c02017 	ldw	r3,128(sp)
 1024a10:	da000404 	addi	r8,sp,16
 1024a14:	003f4b06 	br	1024744 <_gp+0xfffe6ac0>
 1024a18:	02400184 	movi	r9,6
 1024a1c:	003f8f06 	br	102485c <_gp+0xfffe6bd8>
 1024a20:	db002d17 	ldw	r12,180(sp)
 1024a24:	14c00017 	ldw	r19,0(r2)
 1024a28:	0039883a 	mov	fp,zero
 1024a2c:	63000104 	addi	r12,r12,4
 1024a30:	db002d15 	stw	r12,180(sp)
 1024a34:	003c2b06 	br	1023ae4 <_gp+0xfffe5e60>
 1024a38:	d8c03117 	ldw	r3,196(sp)
 1024a3c:	b0e5c83a 	sub	r18,r22,r3
 1024a40:	003a9c06 	br	10234b4 <_gp+0xfffe5830>
 1024a44:	da004015 	stw	r8,256(sp)
 1024a48:	1022f4c0 	call	1022f4c <strlen>
 1024a4c:	1025883a 	mov	r18,r2
 1024a50:	da004017 	ldw	r8,256(sp)
 1024a54:	903c450e 	bge	r18,zero,1023b6c <_gp+0xfffe5ee8>
 1024a58:	0005883a 	mov	r2,zero
 1024a5c:	003c4306 	br	1023b6c <_gp+0xfffe5ee8>
 1024a60:	d9002f17 	ldw	r4,188(sp)
 1024a64:	b80b883a 	mov	r5,r23
 1024a68:	b00d883a 	mov	r6,r22
 1024a6c:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024a70:	103a241e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024a74:	d8c02017 	ldw	r3,128(sp)
 1024a78:	d8801f17 	ldw	r2,124(sp)
 1024a7c:	da000404 	addi	r8,sp,16
 1024a80:	db003317 	ldw	r12,204(sp)
 1024a84:	dac03117 	ldw	r11,196(sp)
 1024a88:	10800044 	addi	r2,r2,1
 1024a8c:	60c7883a 	add	r3,r12,r3
 1024a90:	42c00015 	stw	r11,0(r8)
 1024a94:	43000115 	stw	r12,4(r8)
 1024a98:	d8c02015 	stw	r3,128(sp)
 1024a9c:	d8801f15 	stw	r2,124(sp)
 1024aa0:	010001c4 	movi	r4,7
 1024aa4:	20bb300e 	bge	r4,r2,1023768 <_gp+0xfffe5ae4>
 1024aa8:	003d9c06 	br	102411c <_gp+0xfffe6498>
 1024aac:	d8802604 	addi	r2,sp,152
 1024ab0:	d8800115 	stw	r2,4(sp)
 1024ab4:	d9002f17 	ldw	r4,188(sp)
 1024ab8:	d8802504 	addi	r2,sp,148
 1024abc:	d9403717 	ldw	r5,220(sp)
 1024ac0:	d8800215 	stw	r2,8(sp)
 1024ac4:	d8802104 	addi	r2,sp,132
 1024ac8:	da400015 	stw	r9,0(sp)
 1024acc:	d8800315 	stw	r2,12(sp)
 1024ad0:	900d883a 	mov	r6,r18
 1024ad4:	01c000c4 	movi	r7,3
 1024ad8:	da004015 	stw	r8,256(sp)
 1024adc:	da403f15 	stw	r9,252(sp)
 1024ae0:	10273f40 	call	10273f4 <_dtoa_r>
 1024ae4:	da403f17 	ldw	r9,252(sp)
 1024ae8:	da004017 	ldw	r8,256(sp)
 1024aec:	d8803115 	stw	r2,196(sp)
 1024af0:	4839883a 	mov	fp,r9
 1024af4:	dac03117 	ldw	r11,196(sp)
 1024af8:	00801184 	movi	r2,70
 1024afc:	5f15883a 	add	r10,r11,fp
 1024b00:	a8bf7c1e 	bne	r21,r2,10248f4 <_gp+0xfffe6c70>
 1024b04:	59000007 	ldb	r4,0(r11)
 1024b08:	00800c04 	movi	r2,48
 1024b0c:	2080ca26 	beq	r4,r2,1024e38 <___svfprintf_internal_r+0x1e54>
 1024b10:	d8c02617 	ldw	r3,152(sp)
 1024b14:	50d5883a 	add	r10,r10,r3
 1024b18:	003f7606 	br	10248f4 <_gp+0xfffe6c70>
 1024b1c:	010040f4 	movhi	r4,259
 1024b20:	210ffd84 	addi	r4,r4,16374
 1024b24:	d9003615 	stw	r4,216(sp)
 1024b28:	003aa606 	br	10235c4 <_gp+0xfffe5940>
 1024b2c:	0025883a 	mov	r18,zero
 1024b30:	003dc306 	br	1024240 <_gp+0xfffe65bc>
 1024b34:	d9002f17 	ldw	r4,188(sp)
 1024b38:	b80b883a 	mov	r5,r23
 1024b3c:	b00d883a 	mov	r6,r22
 1024b40:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024b44:	1039ef1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024b48:	d8c02017 	ldw	r3,128(sp)
 1024b4c:	da000404 	addi	r8,sp,16
 1024b50:	003dba06 	br	102423c <_gp+0xfffe65b8>
 1024b54:	d9002f17 	ldw	r4,188(sp)
 1024b58:	b80b883a 	mov	r5,r23
 1024b5c:	b00d883a 	mov	r6,r22
 1024b60:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024b64:	1039e71e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024b68:	d8802617 	ldw	r2,152(sp)
 1024b6c:	d8c02017 	ldw	r3,128(sp)
 1024b70:	da000404 	addi	r8,sp,16
 1024b74:	003e4106 	br	102447c <_gp+0xfffe67f8>
 1024b78:	030040f4 	movhi	r12,259
 1024b7c:	630ff984 	addi	r12,r12,16358
 1024b80:	db002b15 	stw	r12,172(sp)
 1024b84:	dac02b17 	ldw	r11,172(sp)
 1024b88:	1c07883a 	add	r3,r3,r16
 1024b8c:	10800044 	addi	r2,r2,1
 1024b90:	42c00015 	stw	r11,0(r8)
 1024b94:	44000115 	stw	r16,4(r8)
 1024b98:	d8c02015 	stw	r3,128(sp)
 1024b9c:	d8801f15 	stw	r2,124(sp)
 1024ba0:	010001c4 	movi	r4,7
 1024ba4:	20bfae16 	blt	r4,r2,1024a60 <_gp+0xfffe6ddc>
 1024ba8:	42000204 	addi	r8,r8,8
 1024bac:	003fb406 	br	1024a80 <_gp+0xfffe6dfc>
 1024bb0:	0021883a 	mov	r16,zero
 1024bb4:	003e4306 	br	10244c4 <_gp+0xfffe6840>
 1024bb8:	d9002f17 	ldw	r4,188(sp)
 1024bbc:	b80b883a 	mov	r5,r23
 1024bc0:	b00d883a 	mov	r6,r22
 1024bc4:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024bc8:	1039ce1e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024bcc:	d8802617 	ldw	r2,152(sp)
 1024bd0:	db003317 	ldw	r12,204(sp)
 1024bd4:	d8c02017 	ldw	r3,128(sp)
 1024bd8:	da000404 	addi	r8,sp,16
 1024bdc:	6085c83a 	sub	r2,r12,r2
 1024be0:	003e3706 	br	10244c0 <_gp+0xfffe683c>
 1024be4:	00800184 	movi	r2,6
 1024be8:	1240012e 	bgeu	r2,r9,1024bf0 <___svfprintf_internal_r+0x1c0c>
 1024bec:	1013883a 	mov	r9,r2
 1024bf0:	4825883a 	mov	r18,r9
 1024bf4:	4805883a 	mov	r2,r9
 1024bf8:	4800a416 	blt	r9,zero,1024e8c <___svfprintf_internal_r+0x1ea8>
 1024bfc:	d8802a15 	stw	r2,168(sp)
 1024c00:	008040f4 	movhi	r2,259
 1024c04:	108ff704 	addi	r2,r2,16348
 1024c08:	d8803115 	stw	r2,196(sp)
 1024c0c:	dcc02d15 	stw	r19,180(sp)
 1024c10:	d8003215 	stw	zero,200(sp)
 1024c14:	d8003415 	stw	zero,208(sp)
 1024c18:	0005883a 	mov	r2,zero
 1024c1c:	003a3106 	br	10234e4 <_gp+0xfffe5860>
 1024c20:	030040f4 	movhi	r12,259
 1024c24:	630ffd84 	addi	r12,r12,16374
 1024c28:	db003615 	stw	r12,216(sp)
 1024c2c:	003af406 	br	1023800 <_gp+0xfffe5b7c>
 1024c30:	d8c02617 	ldw	r3,152(sp)
 1024c34:	00bfff44 	movi	r2,-3
 1024c38:	18801516 	blt	r3,r2,1024c90 <___svfprintf_internal_r+0x1cac>
 1024c3c:	48c01416 	blt	r9,r3,1024c90 <___svfprintf_internal_r+0x1cac>
 1024c40:	d8c03415 	stw	r3,208(sp)
 1024c44:	040019c4 	movi	r16,103
 1024c48:	003f4906 	br	1024970 <_gp+0xfffe6cec>
 1024c4c:	05400b44 	movi	r21,45
 1024c50:	dd402785 	stb	r21,158(sp)
 1024c54:	003b3a06 	br	1023940 <_gp+0xfffe5cbc>
 1024c58:	00c00b44 	movi	r3,45
 1024c5c:	d8802a15 	stw	r2,168(sp)
 1024c60:	dc402d17 	ldw	r17,180(sp)
 1024c64:	d8c02785 	stb	r3,158(sp)
 1024c68:	dcc02d15 	stw	r19,180(sp)
 1024c6c:	d8003215 	stw	zero,200(sp)
 1024c70:	00800b44 	movi	r2,45
 1024c74:	003a1806 	br	10234d8 <_gp+0xfffe5854>
 1024c78:	010040f4 	movhi	r4,259
 1024c7c:	210ff984 	addi	r4,r4,16358
 1024c80:	d9002b15 	stw	r4,172(sp)
 1024c84:	003cc306 	br	1023f94 <_gp+0xfffe6310>
 1024c88:	5005883a 	mov	r2,r10
 1024c8c:	003f2d06 	br	1024944 <_gp+0xfffe6cc0>
 1024c90:	843fff84 	addi	r16,r16,-2
 1024c94:	1f3fffc4 	addi	fp,r3,-1
 1024c98:	df002615 	stw	fp,152(sp)
 1024c9c:	dc0022c5 	stb	r16,139(sp)
 1024ca0:	e000a216 	blt	fp,zero,1024f2c <___svfprintf_internal_r+0x1f48>
 1024ca4:	00800ac4 	movi	r2,43
 1024ca8:	d8802305 	stb	r2,140(sp)
 1024cac:	00800244 	movi	r2,9
 1024cb0:	1700820e 	bge	r2,fp,1024ebc <___svfprintf_internal_r+0x1ed8>
 1024cb4:	dd4022c4 	addi	r21,sp,139
 1024cb8:	dc002b15 	stw	r16,172(sp)
 1024cbc:	8825883a 	mov	r18,r17
 1024cc0:	a821883a 	mov	r16,r21
 1024cc4:	4023883a 	mov	r17,r8
 1024cc8:	e009883a 	mov	r4,fp
 1024ccc:	01400284 	movi	r5,10
 1024cd0:	10218940 	call	1021894 <__modsi3>
 1024cd4:	10800c04 	addi	r2,r2,48
 1024cd8:	843fffc4 	addi	r16,r16,-1
 1024cdc:	e009883a 	mov	r4,fp
 1024ce0:	01400284 	movi	r5,10
 1024ce4:	80800005 	stb	r2,0(r16)
 1024ce8:	10218400 	call	1021840 <__divsi3>
 1024cec:	1039883a 	mov	fp,r2
 1024cf0:	00800244 	movi	r2,9
 1024cf4:	173ff416 	blt	r2,fp,1024cc8 <_gp+0xfffe7044>
 1024cf8:	8811883a 	mov	r8,r17
 1024cfc:	e0800c04 	addi	r2,fp,48
 1024d00:	9023883a 	mov	r17,r18
 1024d04:	8025883a 	mov	r18,r16
 1024d08:	913fffc4 	addi	r4,r18,-1
 1024d0c:	90bfffc5 	stb	r2,-1(r18)
 1024d10:	dc002b17 	ldw	r16,172(sp)
 1024d14:	25408e2e 	bgeu	r4,r21,1024f50 <___svfprintf_internal_r+0x1f6c>
 1024d18:	d9402384 	addi	r5,sp,142
 1024d1c:	2c8bc83a 	sub	r5,r5,r18
 1024d20:	d8c02344 	addi	r3,sp,141
 1024d24:	a94b883a 	add	r5,r21,r5
 1024d28:	00000106 	br	1024d30 <___svfprintf_internal_r+0x1d4c>
 1024d2c:	20800003 	ldbu	r2,0(r4)
 1024d30:	18800005 	stb	r2,0(r3)
 1024d34:	18c00044 	addi	r3,r3,1
 1024d38:	21000044 	addi	r4,r4,1
 1024d3c:	197ffb1e 	bne	r3,r5,1024d2c <_gp+0xfffe70a8>
 1024d40:	d8802304 	addi	r2,sp,140
 1024d44:	1485c83a 	sub	r2,r2,r18
 1024d48:	d8c02344 	addi	r3,sp,141
 1024d4c:	1885883a 	add	r2,r3,r2
 1024d50:	dac03317 	ldw	r11,204(sp)
 1024d54:	156bc83a 	sub	r21,r2,r21
 1024d58:	dd403a15 	stw	r21,232(sp)
 1024d5c:	00800044 	movi	r2,1
 1024d60:	5d65883a 	add	r18,r11,r21
 1024d64:	12c0770e 	bge	r2,r11,1024f44 <___svfprintf_internal_r+0x1f60>
 1024d68:	94800044 	addi	r18,r18,1
 1024d6c:	9005883a 	mov	r2,r18
 1024d70:	90007216 	blt	r18,zero,1024f3c <___svfprintf_internal_r+0x1f58>
 1024d74:	d8003415 	stw	zero,208(sp)
 1024d78:	003f0506 	br	1024990 <_gp+0xfffe6d0c>
 1024d7c:	da402a15 	stw	r9,168(sp)
 1024d80:	dd402783 	ldbu	r21,158(sp)
 1024d84:	4825883a 	mov	r18,r9
 1024d88:	dcc02d15 	stw	r19,180(sp)
 1024d8c:	d8003215 	stw	zero,200(sp)
 1024d90:	d8003415 	stw	zero,208(sp)
 1024d94:	0039cc06 	br	10234c8 <_gp+0xfffe5844>
 1024d98:	483eb01e 	bne	r9,zero,102485c <_gp+0xfffe6bd8>
 1024d9c:	9013883a 	mov	r9,r18
 1024da0:	003eae06 	br	102485c <_gp+0xfffe6bd8>
 1024da4:	d9002f17 	ldw	r4,188(sp)
 1024da8:	b80b883a 	mov	r5,r23
 1024dac:	b00d883a 	mov	r6,r22
 1024db0:	102c1f00 	call	102c1f0 <__ssprint_r>
 1024db4:	1039531e 	bne	r2,zero,1023304 <_gp+0xfffe5680>
 1024db8:	dc002617 	ldw	r16,152(sp)
 1024dbc:	d8c02017 	ldw	r3,128(sp)
 1024dc0:	d8801f17 	ldw	r2,124(sp)
 1024dc4:	da000404 	addi	r8,sp,16
 1024dc8:	003e6f06 	br	1024788 <_gp+0xfffe6b04>
 1024dcc:	00c00b44 	movi	r3,45
 1024dd0:	64a0003c 	xorhi	r18,r12,32768
 1024dd4:	d8c02a05 	stb	r3,168(sp)
 1024dd8:	003ea606 	br	1024874 <_gp+0xfffe6bf0>
 1024ddc:	4f000044 	addi	fp,r9,1
 1024de0:	003eab06 	br	1024890 <_gp+0xfffe6c0c>
 1024de4:	d8c03417 	ldw	r3,208(sp)
 1024de8:	00c0410e 	bge	zero,r3,1024ef0 <___svfprintf_internal_r+0x1f0c>
 1024dec:	04800044 	movi	r18,1
 1024df0:	dac03317 	ldw	r11,204(sp)
 1024df4:	92e5883a 	add	r18,r18,r11
 1024df8:	9005883a 	mov	r2,r18
 1024dfc:	903ee40e 	bge	r18,zero,1024990 <_gp+0xfffe6d0c>
 1024e00:	0005883a 	mov	r2,zero
 1024e04:	003ee206 	br	1024990 <_gp+0xfffe6d0c>
 1024e08:	d8c02617 	ldw	r3,152(sp)
 1024e0c:	d8c03415 	stw	r3,208(sp)
 1024e10:	00c0310e 	bge	zero,r3,1024ed8 <___svfprintf_internal_r+0x1ef4>
 1024e14:	48001f1e 	bne	r9,zero,1024e94 <___svfprintf_internal_r+0x1eb0>
 1024e18:	8c40004c 	andi	r17,r17,1
 1024e1c:	88001d1e 	bne	r17,zero,1024e94 <___svfprintf_internal_r+0x1eb0>
 1024e20:	1805883a 	mov	r2,r3
 1024e24:	183ed90e 	bge	r3,zero,102498c <_gp+0xfffe6d08>
 1024e28:	0005883a 	mov	r2,zero
 1024e2c:	003ed706 	br	102498c <_gp+0xfffe6d08>
 1024e30:	d8802117 	ldw	r2,132(sp)
 1024e34:	003ec306 	br	1024944 <_gp+0xfffe6cc0>
 1024e38:	d9003717 	ldw	r4,220(sp)
 1024e3c:	900b883a 	mov	r5,r18
 1024e40:	000d883a 	mov	r6,zero
 1024e44:	000f883a 	mov	r7,zero
 1024e48:	da004015 	stw	r8,256(sp)
 1024e4c:	da403f15 	stw	r9,252(sp)
 1024e50:	da803e15 	stw	r10,248(sp)
 1024e54:	10305d80 	call	10305d8 <__eqdf2>
 1024e58:	da004017 	ldw	r8,256(sp)
 1024e5c:	da403f17 	ldw	r9,252(sp)
 1024e60:	da803e17 	ldw	r10,248(sp)
 1024e64:	103f2a26 	beq	r2,zero,1024b10 <_gp+0xfffe6e8c>
 1024e68:	00800044 	movi	r2,1
 1024e6c:	1707c83a 	sub	r3,r2,fp
 1024e70:	d8c02615 	stw	r3,152(sp)
 1024e74:	003f2706 	br	1024b14 <_gp+0xfffe6e90>
 1024e78:	db003417 	ldw	r12,208(sp)
 1024e7c:	64800044 	addi	r18,r12,1
 1024e80:	9005883a 	mov	r2,r18
 1024e84:	903ec20e 	bge	r18,zero,1024990 <_gp+0xfffe6d0c>
 1024e88:	003fdd06 	br	1024e00 <_gp+0xfffe717c>
 1024e8c:	0005883a 	mov	r2,zero
 1024e90:	003f5a06 	br	1024bfc <_gp+0xfffe6f78>
 1024e94:	dac03417 	ldw	r11,208(sp)
 1024e98:	4a400044 	addi	r9,r9,1
 1024e9c:	5a65883a 	add	r18,r11,r9
 1024ea0:	9005883a 	mov	r2,r18
 1024ea4:	903eba0e 	bge	r18,zero,1024990 <_gp+0xfffe6d0c>
 1024ea8:	003fd506 	br	1024e00 <_gp+0xfffe717c>
 1024eac:	008040f4 	movhi	r2,259
 1024eb0:	108ff984 	addi	r2,r2,16358
 1024eb4:	d8802b15 	stw	r2,172(sp)
 1024eb8:	003d2906 	br	1024360 <_gp+0xfffe66dc>
 1024ebc:	00800c04 	movi	r2,48
 1024ec0:	e0c00c04 	addi	r3,fp,48
 1024ec4:	d8802345 	stb	r2,141(sp)
 1024ec8:	d8c02385 	stb	r3,142(sp)
 1024ecc:	d88023c4 	addi	r2,sp,143
 1024ed0:	dd4022c4 	addi	r21,sp,139
 1024ed4:	003f9e06 	br	1024d50 <_gp+0xfffe70cc>
 1024ed8:	4800081e 	bne	r9,zero,1024efc <___svfprintf_internal_r+0x1f18>
 1024edc:	8c40004c 	andi	r17,r17,1
 1024ee0:	8800061e 	bne	r17,zero,1024efc <___svfprintf_internal_r+0x1f18>
 1024ee4:	00800044 	movi	r2,1
 1024ee8:	1025883a 	mov	r18,r2
 1024eec:	003ea806 	br	1024990 <_gp+0xfffe6d0c>
 1024ef0:	04800084 	movi	r18,2
 1024ef4:	90e5c83a 	sub	r18,r18,r3
 1024ef8:	003fbd06 	br	1024df0 <_gp+0xfffe716c>
 1024efc:	4c800084 	addi	r18,r9,2
 1024f00:	9005883a 	mov	r2,r18
 1024f04:	903ea20e 	bge	r18,zero,1024990 <_gp+0xfffe6d0c>
 1024f08:	003fbd06 	br	1024e00 <_gp+0xfffe717c>
 1024f0c:	dac02d17 	ldw	r11,180(sp)
 1024f10:	5a400017 	ldw	r9,0(r11)
 1024f14:	5ac00104 	addi	r11,r11,4
 1024f18:	dac02d15 	stw	r11,180(sp)
 1024f1c:	483e3f0e 	bge	r9,zero,102481c <_gp+0xfffe6b98>
 1024f20:	027fffc4 	movi	r9,-1
 1024f24:	1c000047 	ldb	r16,1(r3)
 1024f28:	00388406 	br	102313c <_gp+0xfffe54b8>
 1024f2c:	00800b44 	movi	r2,45
 1024f30:	0739c83a 	sub	fp,zero,fp
 1024f34:	d8802305 	stb	r2,140(sp)
 1024f38:	003f5c06 	br	1024cac <_gp+0xfffe7028>
 1024f3c:	0005883a 	mov	r2,zero
 1024f40:	003f8c06 	br	1024d74 <_gp+0xfffe70f0>
 1024f44:	88a2703a 	and	r17,r17,r2
 1024f48:	883f8826 	beq	r17,zero,1024d6c <_gp+0xfffe70e8>
 1024f4c:	003f8606 	br	1024d68 <_gp+0xfffe70e4>
 1024f50:	d8802344 	addi	r2,sp,141
 1024f54:	003f7e06 	br	1024d50 <_gp+0xfffe70cc>
 1024f58:	d8c02617 	ldw	r3,152(sp)
 1024f5c:	003f4d06 	br	1024c94 <_gp+0xfffe7010>
 1024f60:	dac02f17 	ldw	r11,188(sp)
 1024f64:	00800304 	movi	r2,12
 1024f68:	58800015 	stw	r2,0(r11)
 1024f6c:	00bfffc4 	movi	r2,-1
 1024f70:	0038e806 	br	1023314 <_gp+0xfffe5690>

01024f74 <___vfprintf_internal_r>:
 1024f74:	defeb604 	addi	sp,sp,-1320
 1024f78:	dfc14915 	stw	ra,1316(sp)
 1024f7c:	ddc14715 	stw	r23,1308(sp)
 1024f80:	dd814615 	stw	r22,1304(sp)
 1024f84:	282f883a 	mov	r23,r5
 1024f88:	202d883a 	mov	r22,r4
 1024f8c:	d9812a15 	stw	r6,1192(sp)
 1024f90:	d9c12d15 	stw	r7,1204(sp)
 1024f94:	df014815 	stw	fp,1312(sp)
 1024f98:	dd414515 	stw	r21,1300(sp)
 1024f9c:	dd014415 	stw	r20,1296(sp)
 1024fa0:	dcc14315 	stw	r19,1292(sp)
 1024fa4:	dc814215 	stw	r18,1288(sp)
 1024fa8:	dc414115 	stw	r17,1284(sp)
 1024fac:	dc014015 	stw	r16,1280(sp)
 1024fb0:	1029be80 	call	1029be8 <_localeconv_r>
 1024fb4:	10800017 	ldw	r2,0(r2)
 1024fb8:	1009883a 	mov	r4,r2
 1024fbc:	d8813515 	stw	r2,1236(sp)
 1024fc0:	1022f4c0 	call	1022f4c <strlen>
 1024fc4:	d8813815 	stw	r2,1248(sp)
 1024fc8:	b0000226 	beq	r22,zero,1024fd4 <___vfprintf_internal_r+0x60>
 1024fcc:	b0800e17 	ldw	r2,56(r22)
 1024fd0:	10010426 	beq	r2,zero,10253e4 <___vfprintf_internal_r+0x470>
 1024fd4:	b8c0030b 	ldhu	r3,12(r23)
 1024fd8:	1908000c 	andi	r4,r3,8192
 1024fdc:	1805883a 	mov	r2,r3
 1024fe0:	2000071e 	bne	r4,zero,1025000 <___vfprintf_internal_r+0x8c>
 1024fe4:	b9001917 	ldw	r4,100(r23)
 1024fe8:	18880014 	ori	r2,r3,8192
 1024fec:	00f7ffc4 	movi	r3,-8193
 1024ff0:	20c8703a 	and	r4,r4,r3
 1024ff4:	b880030d 	sth	r2,12(r23)
 1024ff8:	1007883a 	mov	r3,r2
 1024ffc:	b9001915 	stw	r4,100(r23)
 1025000:	1100020c 	andi	r4,r2,8
 1025004:	2000a726 	beq	r4,zero,10252a4 <___vfprintf_internal_r+0x330>
 1025008:	b9000417 	ldw	r4,16(r23)
 102500c:	2000a526 	beq	r4,zero,10252a4 <___vfprintf_internal_r+0x330>
 1025010:	1080068c 	andi	r2,r2,26
 1025014:	01000284 	movi	r4,10
 1025018:	1100ab26 	beq	r2,r4,10252c8 <___vfprintf_internal_r+0x354>
 102501c:	dac10e04 	addi	r11,sp,1080
 1025020:	db010dc4 	addi	r12,sp,1079
 1025024:	d8800404 	addi	r2,sp,16
 1025028:	050040f4 	movhi	r20,259
 102502c:	dac12815 	stw	r11,1184(sp)
 1025030:	5b17c83a 	sub	r11,r11,r12
 1025034:	a5100184 	addi	r20,r20,16390
 1025038:	db012915 	stw	r12,1188(sp)
 102503c:	d8811e15 	stw	r2,1144(sp)
 1025040:	d8012015 	stw	zero,1152(sp)
 1025044:	d8011f15 	stw	zero,1148(sp)
 1025048:	d8013315 	stw	zero,1228(sp)
 102504c:	d8013715 	stw	zero,1244(sp)
 1025050:	d8013915 	stw	zero,1252(sp)
 1025054:	d8013b15 	stw	zero,1260(sp)
 1025058:	d8013a15 	stw	zero,1256(sp)
 102505c:	d8012f15 	stw	zero,1212(sp)
 1025060:	1011883a 	mov	r8,r2
 1025064:	dac13c15 	stw	r11,1264(sp)
 1025068:	db012a17 	ldw	r12,1192(sp)
 102506c:	60800007 	ldb	r2,0(r12)
 1025070:	1000df26 	beq	r2,zero,10253f0 <___vfprintf_internal_r+0x47c>
 1025074:	00c00944 	movi	r3,37
 1025078:	10c0dd26 	beq	r2,r3,10253f0 <___vfprintf_internal_r+0x47c>
 102507c:	6021883a 	mov	r16,r12
 1025080:	00000106 	br	1025088 <___vfprintf_internal_r+0x114>
 1025084:	10c08426 	beq	r2,r3,1025298 <___vfprintf_internal_r+0x324>
 1025088:	84000044 	addi	r16,r16,1
 102508c:	80800007 	ldb	r2,0(r16)
 1025090:	103ffc1e 	bne	r2,zero,1025084 <_gp+0xfffe7400>
 1025094:	dac12a17 	ldw	r11,1192(sp)
 1025098:	82e3c83a 	sub	r17,r16,r11
 102509c:	88000f26 	beq	r17,zero,10250dc <___vfprintf_internal_r+0x168>
 10250a0:	d8c12017 	ldw	r3,1152(sp)
 10250a4:	d8811f17 	ldw	r2,1148(sp)
 10250a8:	dac12a17 	ldw	r11,1192(sp)
 10250ac:	1c47883a 	add	r3,r3,r17
 10250b0:	10800044 	addi	r2,r2,1
 10250b4:	d8c12015 	stw	r3,1152(sp)
 10250b8:	42c00015 	stw	r11,0(r8)
 10250bc:	44400115 	stw	r17,4(r8)
 10250c0:	d8811f15 	stw	r2,1148(sp)
 10250c4:	00c001c4 	movi	r3,7
 10250c8:	1880b416 	blt	r3,r2,102539c <___vfprintf_internal_r+0x428>
 10250cc:	42000204 	addi	r8,r8,8
 10250d0:	db012f17 	ldw	r12,1212(sp)
 10250d4:	6459883a 	add	r12,r12,r17
 10250d8:	db012f15 	stw	r12,1212(sp)
 10250dc:	80800007 	ldb	r2,0(r16)
 10250e0:	1000b526 	beq	r2,zero,10253b8 <___vfprintf_internal_r+0x444>
 10250e4:	80800044 	addi	r2,r16,1
 10250e8:	84000047 	ldb	r16,1(r16)
 10250ec:	d8012785 	stb	zero,1182(sp)
 10250f0:	000d883a 	mov	r6,zero
 10250f4:	027fffc4 	movi	r9,-1
 10250f8:	d8012e15 	stw	zero,1208(sp)
 10250fc:	0023883a 	mov	r17,zero
 1025100:	01001604 	movi	r4,88
 1025104:	01400244 	movi	r5,9
 1025108:	02800a84 	movi	r10,42
 102510c:	01c01b04 	movi	r7,108
 1025110:	10c00044 	addi	r3,r2,1
 1025114:	80bff804 	addi	r2,r16,-32
 1025118:	2082f236 	bltu	r4,r2,1025ce4 <___vfprintf_internal_r+0xd70>
 102511c:	100490ba 	slli	r2,r2,2
 1025120:	02c040b4 	movhi	r11,258
 1025124:	5ad44d04 	addi	r11,r11,20788
 1025128:	12c5883a 	add	r2,r2,r11
 102512c:	10800017 	ldw	r2,0(r2)
 1025130:	1000683a 	jmp	r2
 1025134:	01025b2c 	andhi	r4,zero,2412
 1025138:	01025ce4 	muli	r4,zero,2419
 102513c:	01025ce4 	muli	r4,zero,2419
 1025140:	01025b4c 	andi	r4,zero,2413
 1025144:	01025ce4 	muli	r4,zero,2419
 1025148:	01025ce4 	muli	r4,zero,2419
 102514c:	01025ce4 	muli	r4,zero,2419
 1025150:	01025ce4 	muli	r4,zero,2419
 1025154:	01025ce4 	muli	r4,zero,2419
 1025158:	01025ce4 	muli	r4,zero,2419
 102515c:	01025ca8 	cmpgeui	r4,zero,2418
 1025160:	01025cd4 	movui	r4,2419
 1025164:	01025ce4 	muli	r4,zero,2419
 1025168:	010253f8 	rdprs	r4,zero,2383
 102516c:	01025408 	cmpgei	r4,zero,2384
 1025170:	01025ce4 	muli	r4,zero,2419
 1025174:	01025448 	cmpgei	r4,zero,2385
 1025178:	0102593c 	xorhi	r4,zero,2404
 102517c:	0102593c 	xorhi	r4,zero,2404
 1025180:	0102593c 	xorhi	r4,zero,2404
 1025184:	0102593c 	xorhi	r4,zero,2404
 1025188:	0102593c 	xorhi	r4,zero,2404
 102518c:	0102593c 	xorhi	r4,zero,2404
 1025190:	0102593c 	xorhi	r4,zero,2404
 1025194:	0102593c 	xorhi	r4,zero,2404
 1025198:	0102593c 	xorhi	r4,zero,2404
 102519c:	01025ce4 	muli	r4,zero,2419
 10251a0:	01025ce4 	muli	r4,zero,2419
 10251a4:	01025ce4 	muli	r4,zero,2419
 10251a8:	01025ce4 	muli	r4,zero,2419
 10251ac:	01025ce4 	muli	r4,zero,2419
 10251b0:	01025ce4 	muli	r4,zero,2419
 10251b4:	01025ce4 	muli	r4,zero,2419
 10251b8:	01025ce4 	muli	r4,zero,2419
 10251bc:	01025ce4 	muli	r4,zero,2419
 10251c0:	01025ce4 	muli	r4,zero,2419
 10251c4:	01025970 	cmpltui	r4,zero,2405
 10251c8:	01025458 	cmpnei	r4,zero,2385
 10251cc:	01025ce4 	muli	r4,zero,2419
 10251d0:	01025458 	cmpnei	r4,zero,2385
 10251d4:	01025ce4 	muli	r4,zero,2419
 10251d8:	01025ce4 	muli	r4,zero,2419
 10251dc:	01025ce4 	muli	r4,zero,2419
 10251e0:	01025ce4 	muli	r4,zero,2419
 10251e4:	010254fc 	xorhi	r4,zero,2387
 10251e8:	01025ce4 	muli	r4,zero,2419
 10251ec:	01025ce4 	muli	r4,zero,2419
 10251f0:	0102550c 	andi	r4,zero,2388
 10251f4:	01025ce4 	muli	r4,zero,2419
 10251f8:	01025ce4 	muli	r4,zero,2419
 10251fc:	01025ce4 	muli	r4,zero,2419
 1025200:	01025ce4 	muli	r4,zero,2419
 1025204:	01025ce4 	muli	r4,zero,2419
 1025208:	01025908 	cmpgei	r4,zero,2404
 102520c:	01025ce4 	muli	r4,zero,2419
 1025210:	01025ce4 	muli	r4,zero,2419
 1025214:	010259b8 	rdprs	r4,zero,2406
 1025218:	01025ce4 	muli	r4,zero,2419
 102521c:	01025ce4 	muli	r4,zero,2419
 1025220:	01025ce4 	muli	r4,zero,2419
 1025224:	01025ce4 	muli	r4,zero,2419
 1025228:	01025ce4 	muli	r4,zero,2419
 102522c:	01025ce4 	muli	r4,zero,2419
 1025230:	01025ce4 	muli	r4,zero,2419
 1025234:	01025ce4 	muli	r4,zero,2419
 1025238:	01025ce4 	muli	r4,zero,2419
 102523c:	01025ce4 	muli	r4,zero,2419
 1025240:	01025bac 	andhi	r4,zero,2414
 1025244:	01025b5c 	xori	r4,zero,2413
 1025248:	01025458 	cmpnei	r4,zero,2385
 102524c:	01025458 	cmpnei	r4,zero,2385
 1025250:	01025458 	cmpnei	r4,zero,2385
 1025254:	01025b9c 	xori	r4,zero,2414
 1025258:	01025b5c 	xori	r4,zero,2413
 102525c:	01025ce4 	muli	r4,zero,2419
 1025260:	01025ce4 	muli	r4,zero,2419
 1025264:	01025aa4 	muli	r4,zero,2410
 1025268:	01025ce4 	muli	r4,zero,2419
 102526c:	01025ab8 	rdprs	r4,zero,2410
 1025270:	01025aec 	andhi	r4,zero,2411
 1025274:	01025bec 	andhi	r4,zero,2415
 1025278:	01025a14 	movui	r4,2408
 102527c:	01025ce4 	muli	r4,zero,2419
 1025280:	01025c34 	movhi	r4,2416
 1025284:	01025ce4 	muli	r4,zero,2419
 1025288:	01025a24 	muli	r4,zero,2408
 102528c:	01025ce4 	muli	r4,zero,2419
 1025290:	01025ce4 	muli	r4,zero,2419
 1025294:	01025a64 	muli	r4,zero,2409
 1025298:	db012a17 	ldw	r12,1192(sp)
 102529c:	8323c83a 	sub	r17,r16,r12
 10252a0:	003f7e06 	br	102509c <_gp+0xfffe7418>
 10252a4:	b009883a 	mov	r4,r22
 10252a8:	b80b883a 	mov	r5,r23
 10252ac:	10270c40 	call	10270c4 <__swsetup_r>
 10252b0:	10002d1e 	bne	r2,zero,1025368 <___vfprintf_internal_r+0x3f4>
 10252b4:	b8c0030b 	ldhu	r3,12(r23)
 10252b8:	01000284 	movi	r4,10
 10252bc:	1805883a 	mov	r2,r3
 10252c0:	1080068c 	andi	r2,r2,26
 10252c4:	113f551e 	bne	r2,r4,102501c <_gp+0xfffe7398>
 10252c8:	b880038b 	ldhu	r2,14(r23)
 10252cc:	113fffcc 	andi	r4,r2,65535
 10252d0:	2120001c 	xori	r4,r4,32768
 10252d4:	21200004 	addi	r4,r4,-32768
 10252d8:	203f5016 	blt	r4,zero,102501c <_gp+0xfffe7398>
 10252dc:	bac01917 	ldw	r11,100(r23)
 10252e0:	ba800717 	ldw	r10,28(r23)
 10252e4:	ba400917 	ldw	r9,36(r23)
 10252e8:	d9812a17 	ldw	r6,1192(sp)
 10252ec:	d9c12d17 	ldw	r7,1204(sp)
 10252f0:	02010004 	movi	r8,1024
 10252f4:	18ffff4c 	andi	r3,r3,65533
 10252f8:	d881078d 	sth	r2,1054(sp)
 10252fc:	b009883a 	mov	r4,r22
 1025300:	d8800404 	addi	r2,sp,16
 1025304:	d9410404 	addi	r5,sp,1040
 1025308:	d8c1070d 	sth	r3,1052(sp)
 102530c:	dac11d15 	stw	r11,1140(sp)
 1025310:	da810b15 	stw	r10,1068(sp)
 1025314:	da410d15 	stw	r9,1076(sp)
 1025318:	d8810415 	stw	r2,1040(sp)
 102531c:	d8810815 	stw	r2,1056(sp)
 1025320:	da010615 	stw	r8,1048(sp)
 1025324:	da010915 	stw	r8,1060(sp)
 1025328:	d8010a15 	stw	zero,1064(sp)
 102532c:	1024f740 	call	1024f74 <___vfprintf_internal_r>
 1025330:	1021883a 	mov	r16,r2
 1025334:	10000416 	blt	r2,zero,1025348 <___vfprintf_internal_r+0x3d4>
 1025338:	b009883a 	mov	r4,r22
 102533c:	d9410404 	addi	r5,sp,1040
 1025340:	1028b1c0 	call	1028b1c <_fflush_r>
 1025344:	1006ee1e 	bne	r2,zero,1026f00 <___vfprintf_internal_r+0x1f8c>
 1025348:	d881070b 	ldhu	r2,1052(sp)
 102534c:	1080100c 	andi	r2,r2,64
 1025350:	10000326 	beq	r2,zero,1025360 <___vfprintf_internal_r+0x3ec>
 1025354:	b880030b 	ldhu	r2,12(r23)
 1025358:	10801014 	ori	r2,r2,64
 102535c:	b880030d 	sth	r2,12(r23)
 1025360:	8005883a 	mov	r2,r16
 1025364:	00000106 	br	102536c <___vfprintf_internal_r+0x3f8>
 1025368:	00bfffc4 	movi	r2,-1
 102536c:	dfc14917 	ldw	ra,1316(sp)
 1025370:	df014817 	ldw	fp,1312(sp)
 1025374:	ddc14717 	ldw	r23,1308(sp)
 1025378:	dd814617 	ldw	r22,1304(sp)
 102537c:	dd414517 	ldw	r21,1300(sp)
 1025380:	dd014417 	ldw	r20,1296(sp)
 1025384:	dcc14317 	ldw	r19,1292(sp)
 1025388:	dc814217 	ldw	r18,1288(sp)
 102538c:	dc414117 	ldw	r17,1284(sp)
 1025390:	dc014017 	ldw	r16,1280(sp)
 1025394:	dec14a04 	addi	sp,sp,1320
 1025398:	f800283a 	ret
 102539c:	b009883a 	mov	r4,r22
 10253a0:	b80b883a 	mov	r5,r23
 10253a4:	d9811e04 	addi	r6,sp,1144
 10253a8:	102d51c0 	call	102d51c <__sprint_r>
 10253ac:	1000081e 	bne	r2,zero,10253d0 <___vfprintf_internal_r+0x45c>
 10253b0:	da000404 	addi	r8,sp,16
 10253b4:	003f4606 	br	10250d0 <_gp+0xfffe744c>
 10253b8:	d8812017 	ldw	r2,1152(sp)
 10253bc:	10000426 	beq	r2,zero,10253d0 <___vfprintf_internal_r+0x45c>
 10253c0:	b009883a 	mov	r4,r22
 10253c4:	b80b883a 	mov	r5,r23
 10253c8:	d9811e04 	addi	r6,sp,1144
 10253cc:	102d51c0 	call	102d51c <__sprint_r>
 10253d0:	b880030b 	ldhu	r2,12(r23)
 10253d4:	1080100c 	andi	r2,r2,64
 10253d8:	103fe31e 	bne	r2,zero,1025368 <_gp+0xfffe76e4>
 10253dc:	d8812f17 	ldw	r2,1212(sp)
 10253e0:	003fe206 	br	102536c <_gp+0xfffe76e8>
 10253e4:	b009883a 	mov	r4,r22
 10253e8:	10290c40 	call	10290c4 <__sinit>
 10253ec:	003ef906 	br	1024fd4 <_gp+0xfffe7350>
 10253f0:	dc012a17 	ldw	r16,1192(sp)
 10253f4:	003f3906 	br	10250dc <_gp+0xfffe7458>
 10253f8:	1805883a 	mov	r2,r3
 10253fc:	8c400114 	ori	r17,r17,4
 1025400:	1c000007 	ldb	r16,0(r3)
 1025404:	003f4206 	br	1025110 <_gp+0xfffe748c>
 1025408:	1c000007 	ldb	r16,0(r3)
 102540c:	18800044 	addi	r2,r3,1
 1025410:	8286b326 	beq	r16,r10,1026ee0 <___vfprintf_internal_r+0x1f6c>
 1025414:	82fff404 	addi	r11,r16,-48
 1025418:	1007883a 	mov	r3,r2
 102541c:	0013883a 	mov	r9,zero
 1025420:	2aff3c36 	bltu	r5,r11,1025114 <_gp+0xfffe7490>
 1025424:	1c000007 	ldb	r16,0(r3)
 1025428:	4a4002a4 	muli	r9,r9,10
 102542c:	18c00044 	addi	r3,r3,1
 1025430:	5a53883a 	add	r9,r11,r9
 1025434:	82fff404 	addi	r11,r16,-48
 1025438:	2afffa2e 	bgeu	r5,r11,1025424 <_gp+0xfffe77a0>
 102543c:	483f350e 	bge	r9,zero,1025114 <_gp+0xfffe7490>
 1025440:	027fffc4 	movi	r9,-1
 1025444:	003f3306 	br	1025114 <_gp+0xfffe7490>
 1025448:	8c402014 	ori	r17,r17,128
 102544c:	1805883a 	mov	r2,r3
 1025450:	1c000007 	ldb	r16,0(r3)
 1025454:	003f2e06 	br	1025110 <_gp+0xfffe748c>
 1025458:	db012d17 	ldw	r12,1204(sp)
 102545c:	dac12d17 	ldw	r11,1204(sp)
 1025460:	d8c12a15 	stw	r3,1192(sp)
 1025464:	63000017 	ldw	r12,0(r12)
 1025468:	5ac00117 	ldw	r11,4(r11)
 102546c:	d9812785 	stb	r6,1182(sp)
 1025470:	6009883a 	mov	r4,r12
 1025474:	580b883a 	mov	r5,r11
 1025478:	db013715 	stw	r12,1244(sp)
 102547c:	da013f15 	stw	r8,1276(sp)
 1025480:	da413e15 	stw	r9,1272(sp)
 1025484:	dac13915 	stw	r11,1252(sp)
 1025488:	102bf480 	call	102bf48 <__fpclassifyd>
 102548c:	db012d17 	ldw	r12,1204(sp)
 1025490:	04800044 	movi	r18,1
 1025494:	da013f17 	ldw	r8,1276(sp)
 1025498:	64c00204 	addi	r19,r12,8
 102549c:	da413e17 	ldw	r9,1272(sp)
 10254a0:	d9013717 	ldw	r4,1244(sp)
 10254a4:	d9413917 	ldw	r5,1252(sp)
 10254a8:	1484581e 	bne	r2,r18,102660c <___vfprintf_internal_r+0x1698>
 10254ac:	000d883a 	mov	r6,zero
 10254b0:	000f883a 	mov	r7,zero
 10254b4:	103073c0 	call	103073c <__ledf2>
 10254b8:	da013f17 	ldw	r8,1276(sp)
 10254bc:	1005ef16 	blt	r2,zero,1026c7c <___vfprintf_internal_r+0x1d08>
 10254c0:	dd412783 	ldbu	r21,1182(sp)
 10254c4:	008011c4 	movi	r2,71
 10254c8:	14053b0e 	bge	r2,r16,10269b8 <___vfprintf_internal_r+0x1a44>
 10254cc:	00c040f4 	movhi	r3,259
 10254d0:	18cfea04 	addi	r3,r3,16296
 10254d4:	d8c13115 	stw	r3,1220(sp)
 10254d8:	02c000c4 	movi	r11,3
 10254dc:	00bfdfc4 	movi	r2,-129
 10254e0:	dac12b15 	stw	r11,1196(sp)
 10254e4:	88a2703a 	and	r17,r17,r2
 10254e8:	dcc12d15 	stw	r19,1204(sp)
 10254ec:	5825883a 	mov	r18,r11
 10254f0:	d8013215 	stw	zero,1224(sp)
 10254f4:	d8013415 	stw	zero,1232(sp)
 10254f8:	00003206 	br	10255c4 <___vfprintf_internal_r+0x650>
 10254fc:	8c400214 	ori	r17,r17,8
 1025500:	1805883a 	mov	r2,r3
 1025504:	1c000007 	ldb	r16,0(r3)
 1025508:	003f0106 	br	1025110 <_gp+0xfffe748c>
 102550c:	8c400414 	ori	r17,r17,16
 1025510:	d8c12a15 	stw	r3,1192(sp)
 1025514:	88c0080c 	andi	r3,r17,32
 1025518:	d8812d17 	ldw	r2,1204(sp)
 102551c:	18017726 	beq	r3,zero,1025afc <___vfprintf_internal_r+0xb88>
 1025520:	db012d17 	ldw	r12,1204(sp)
 1025524:	14c00017 	ldw	r19,0(r2)
 1025528:	17000117 	ldw	fp,4(r2)
 102552c:	63000204 	addi	r12,r12,8
 1025530:	db012d15 	stw	r12,1204(sp)
 1025534:	0005883a 	mov	r2,zero
 1025538:	9f06b03a 	or	r3,r19,fp
 102553c:	d8012785 	stb	zero,1182(sp)
 1025540:	da413215 	stw	r9,1224(sp)
 1025544:	002b883a 	mov	r21,zero
 1025548:	48000216 	blt	r9,zero,1025554 <___vfprintf_internal_r+0x5e0>
 102554c:	013fdfc4 	movi	r4,-129
 1025550:	8922703a 	and	r17,r17,r4
 1025554:	1801ed1e 	bne	r3,zero,1025d0c <___vfprintf_internal_r+0xd98>
 1025558:	4802e026 	beq	r9,zero,10260dc <___vfprintf_internal_r+0x1168>
 102555c:	10803fcc 	andi	r2,r2,255
 1025560:	00c00044 	movi	r3,1
 1025564:	10c20f26 	beq	r2,r3,1025da4 <___vfprintf_internal_r+0xe30>
 1025568:	00c00084 	movi	r3,2
 102556c:	10c2fd26 	beq	r2,r3,1026164 <___vfprintf_internal_r+0x11f0>
 1025570:	d8c10e04 	addi	r3,sp,1080
 1025574:	9808d0fa 	srli	r4,r19,3
 1025578:	e00a977a 	slli	r5,fp,29
 102557c:	e038d0fa 	srli	fp,fp,3
 1025580:	9cc001cc 	andi	r19,r19,7
 1025584:	98800c04 	addi	r2,r19,48
 1025588:	18ffffc4 	addi	r3,r3,-1
 102558c:	2926b03a 	or	r19,r5,r4
 1025590:	18800005 	stb	r2,0(r3)
 1025594:	9f08b03a 	or	r4,r19,fp
 1025598:	203ff61e 	bne	r4,zero,1025574 <_gp+0xfffe78f0>
 102559c:	8900004c 	andi	r4,r17,1
 10255a0:	d8c13115 	stw	r3,1220(sp)
 10255a4:	2003791e 	bne	r4,zero,102638c <___vfprintf_internal_r+0x1418>
 10255a8:	dac12817 	ldw	r11,1184(sp)
 10255ac:	58e5c83a 	sub	r18,r11,r3
 10255b0:	9005883a 	mov	r2,r18
 10255b4:	9240010e 	bge	r18,r9,10255bc <___vfprintf_internal_r+0x648>
 10255b8:	4805883a 	mov	r2,r9
 10255bc:	d8812b15 	stw	r2,1196(sp)
 10255c0:	d8013415 	stw	zero,1232(sp)
 10255c4:	a8803fcc 	andi	r2,r21,255
 10255c8:	1080201c 	xori	r2,r2,128
 10255cc:	10bfe004 	addi	r2,r2,-128
 10255d0:	10000326 	beq	r2,zero,10255e0 <___vfprintf_internal_r+0x66c>
 10255d4:	db012b17 	ldw	r12,1196(sp)
 10255d8:	63000044 	addi	r12,r12,1
 10255dc:	db012b15 	stw	r12,1196(sp)
 10255e0:	88c0008c 	andi	r3,r17,2
 10255e4:	d8c12c15 	stw	r3,1200(sp)
 10255e8:	18000326 	beq	r3,zero,10255f8 <___vfprintf_internal_r+0x684>
 10255ec:	dac12b17 	ldw	r11,1196(sp)
 10255f0:	5ac00084 	addi	r11,r11,2
 10255f4:	dac12b15 	stw	r11,1196(sp)
 10255f8:	8b00210c 	andi	r12,r17,132
 10255fc:	db013015 	stw	r12,1216(sp)
 1025600:	6001c01e 	bne	r12,zero,1025d04 <___vfprintf_internal_r+0xd90>
 1025604:	dac12e17 	ldw	r11,1208(sp)
 1025608:	db012b17 	ldw	r12,1196(sp)
 102560c:	5b39c83a 	sub	fp,r11,r12
 1025610:	0701bc0e 	bge	zero,fp,1025d04 <___vfprintf_internal_r+0xd90>
 1025614:	02400404 	movi	r9,16
 1025618:	d8c12017 	ldw	r3,1152(sp)
 102561c:	d8811f17 	ldw	r2,1148(sp)
 1025620:	4f05220e 	bge	r9,fp,1026aac <___vfprintf_internal_r+0x1b38>
 1025624:	014040f4 	movhi	r5,259
 1025628:	29500584 	addi	r5,r5,16406
 102562c:	d9413615 	stw	r5,1240(sp)
 1025630:	482b883a 	mov	r21,r9
 1025634:	04c001c4 	movi	r19,7
 1025638:	00000306 	br	1025648 <___vfprintf_internal_r+0x6d4>
 102563c:	e73ffc04 	addi	fp,fp,-16
 1025640:	42000204 	addi	r8,r8,8
 1025644:	af00130e 	bge	r21,fp,1025694 <___vfprintf_internal_r+0x720>
 1025648:	02c040f4 	movhi	r11,259
 102564c:	18c00404 	addi	r3,r3,16
 1025650:	10800044 	addi	r2,r2,1
 1025654:	5ad00584 	addi	r11,r11,16406
 1025658:	42c00015 	stw	r11,0(r8)
 102565c:	45400115 	stw	r21,4(r8)
 1025660:	d8c12015 	stw	r3,1152(sp)
 1025664:	d8811f15 	stw	r2,1148(sp)
 1025668:	98bff40e 	bge	r19,r2,102563c <_gp+0xfffe79b8>
 102566c:	b009883a 	mov	r4,r22
 1025670:	b80b883a 	mov	r5,r23
 1025674:	d9811e04 	addi	r6,sp,1144
 1025678:	102d51c0 	call	102d51c <__sprint_r>
 102567c:	103f541e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1025680:	e73ffc04 	addi	fp,fp,-16
 1025684:	d8c12017 	ldw	r3,1152(sp)
 1025688:	d8811f17 	ldw	r2,1148(sp)
 102568c:	da000404 	addi	r8,sp,16
 1025690:	af3fed16 	blt	r21,fp,1025648 <_gp+0xfffe79c4>
 1025694:	db013617 	ldw	r12,1240(sp)
 1025698:	e0c7883a 	add	r3,fp,r3
 102569c:	10800044 	addi	r2,r2,1
 10256a0:	43000015 	stw	r12,0(r8)
 10256a4:	47000115 	stw	fp,4(r8)
 10256a8:	d8c12015 	stw	r3,1152(sp)
 10256ac:	d8811f15 	stw	r2,1148(sp)
 10256b0:	010001c4 	movi	r4,7
 10256b4:	2082f416 	blt	r4,r2,1026288 <___vfprintf_internal_r+0x1314>
 10256b8:	d8812787 	ldb	r2,1182(sp)
 10256bc:	42000204 	addi	r8,r8,8
 10256c0:	10000c26 	beq	r2,zero,10256f4 <___vfprintf_internal_r+0x780>
 10256c4:	d8811f17 	ldw	r2,1148(sp)
 10256c8:	d9012784 	addi	r4,sp,1182
 10256cc:	18c00044 	addi	r3,r3,1
 10256d0:	10800044 	addi	r2,r2,1
 10256d4:	41000015 	stw	r4,0(r8)
 10256d8:	01000044 	movi	r4,1
 10256dc:	41000115 	stw	r4,4(r8)
 10256e0:	d8c12015 	stw	r3,1152(sp)
 10256e4:	d8811f15 	stw	r2,1148(sp)
 10256e8:	010001c4 	movi	r4,7
 10256ec:	20828d16 	blt	r4,r2,1026124 <___vfprintf_internal_r+0x11b0>
 10256f0:	42000204 	addi	r8,r8,8
 10256f4:	dac12c17 	ldw	r11,1200(sp)
 10256f8:	58000c26 	beq	r11,zero,102572c <___vfprintf_internal_r+0x7b8>
 10256fc:	d8811f17 	ldw	r2,1148(sp)
 1025700:	d9012704 	addi	r4,sp,1180
 1025704:	18c00084 	addi	r3,r3,2
 1025708:	10800044 	addi	r2,r2,1
 102570c:	41000015 	stw	r4,0(r8)
 1025710:	01000084 	movi	r4,2
 1025714:	41000115 	stw	r4,4(r8)
 1025718:	d8c12015 	stw	r3,1152(sp)
 102571c:	d8811f15 	stw	r2,1148(sp)
 1025720:	010001c4 	movi	r4,7
 1025724:	20828716 	blt	r4,r2,1026144 <___vfprintf_internal_r+0x11d0>
 1025728:	42000204 	addi	r8,r8,8
 102572c:	db013017 	ldw	r12,1216(sp)
 1025730:	00802004 	movi	r2,128
 1025734:	6081e926 	beq	r12,r2,1025edc <___vfprintf_internal_r+0xf68>
 1025738:	db013217 	ldw	r12,1224(sp)
 102573c:	64abc83a 	sub	r21,r12,r18
 1025740:	0540260e 	bge	zero,r21,10257dc <___vfprintf_internal_r+0x868>
 1025744:	07000404 	movi	fp,16
 1025748:	d8811f17 	ldw	r2,1148(sp)
 102574c:	e5443d0e 	bge	fp,r21,1026844 <___vfprintf_internal_r+0x18d0>
 1025750:	014040f4 	movhi	r5,259
 1025754:	29500184 	addi	r5,r5,16390
 1025758:	d9412c15 	stw	r5,1200(sp)
 102575c:	04c001c4 	movi	r19,7
 1025760:	00000306 	br	1025770 <___vfprintf_internal_r+0x7fc>
 1025764:	ad7ffc04 	addi	r21,r21,-16
 1025768:	42000204 	addi	r8,r8,8
 102576c:	e540110e 	bge	fp,r21,10257b4 <___vfprintf_internal_r+0x840>
 1025770:	18c00404 	addi	r3,r3,16
 1025774:	10800044 	addi	r2,r2,1
 1025778:	45000015 	stw	r20,0(r8)
 102577c:	47000115 	stw	fp,4(r8)
 1025780:	d8c12015 	stw	r3,1152(sp)
 1025784:	d8811f15 	stw	r2,1148(sp)
 1025788:	98bff60e 	bge	r19,r2,1025764 <_gp+0xfffe7ae0>
 102578c:	b009883a 	mov	r4,r22
 1025790:	b80b883a 	mov	r5,r23
 1025794:	d9811e04 	addi	r6,sp,1144
 1025798:	102d51c0 	call	102d51c <__sprint_r>
 102579c:	103f0c1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10257a0:	ad7ffc04 	addi	r21,r21,-16
 10257a4:	d8c12017 	ldw	r3,1152(sp)
 10257a8:	d8811f17 	ldw	r2,1148(sp)
 10257ac:	da000404 	addi	r8,sp,16
 10257b0:	e57fef16 	blt	fp,r21,1025770 <_gp+0xfffe7aec>
 10257b4:	dac12c17 	ldw	r11,1200(sp)
 10257b8:	1d47883a 	add	r3,r3,r21
 10257bc:	10800044 	addi	r2,r2,1
 10257c0:	42c00015 	stw	r11,0(r8)
 10257c4:	45400115 	stw	r21,4(r8)
 10257c8:	d8c12015 	stw	r3,1152(sp)
 10257cc:	d8811f15 	stw	r2,1148(sp)
 10257d0:	010001c4 	movi	r4,7
 10257d4:	20824b16 	blt	r4,r2,1026104 <___vfprintf_internal_r+0x1190>
 10257d8:	42000204 	addi	r8,r8,8
 10257dc:	8880400c 	andi	r2,r17,256
 10257e0:	1001761e 	bne	r2,zero,1025dbc <___vfprintf_internal_r+0xe48>
 10257e4:	d8811f17 	ldw	r2,1148(sp)
 10257e8:	db013117 	ldw	r12,1220(sp)
 10257ec:	1c87883a 	add	r3,r3,r18
 10257f0:	10800044 	addi	r2,r2,1
 10257f4:	43000015 	stw	r12,0(r8)
 10257f8:	44800115 	stw	r18,4(r8)
 10257fc:	d8c12015 	stw	r3,1152(sp)
 1025800:	d8811f15 	stw	r2,1148(sp)
 1025804:	010001c4 	movi	r4,7
 1025808:	20822616 	blt	r4,r2,10260a4 <___vfprintf_internal_r+0x1130>
 102580c:	42000204 	addi	r8,r8,8
 1025810:	8c40010c 	andi	r17,r17,4
 1025814:	88003126 	beq	r17,zero,10258dc <___vfprintf_internal_r+0x968>
 1025818:	db012e17 	ldw	r12,1208(sp)
 102581c:	dac12b17 	ldw	r11,1196(sp)
 1025820:	62e1c83a 	sub	r16,r12,r11
 1025824:	04002d0e 	bge	zero,r16,10258dc <___vfprintf_internal_r+0x968>
 1025828:	04400404 	movi	r17,16
 102582c:	d8811f17 	ldw	r2,1148(sp)
 1025830:	8c04df0e 	bge	r17,r16,1026bb0 <___vfprintf_internal_r+0x1c3c>
 1025834:	010040f4 	movhi	r4,259
 1025838:	21100584 	addi	r4,r4,16406
 102583c:	d9013615 	stw	r4,1240(sp)
 1025840:	048001c4 	movi	r18,7
 1025844:	00000306 	br	1025854 <___vfprintf_internal_r+0x8e0>
 1025848:	843ffc04 	addi	r16,r16,-16
 102584c:	42000204 	addi	r8,r8,8
 1025850:	8c00130e 	bge	r17,r16,10258a0 <___vfprintf_internal_r+0x92c>
 1025854:	014040f4 	movhi	r5,259
 1025858:	18c00404 	addi	r3,r3,16
 102585c:	10800044 	addi	r2,r2,1
 1025860:	29500584 	addi	r5,r5,16406
 1025864:	41400015 	stw	r5,0(r8)
 1025868:	44400115 	stw	r17,4(r8)
 102586c:	d8c12015 	stw	r3,1152(sp)
 1025870:	d8811f15 	stw	r2,1148(sp)
 1025874:	90bff40e 	bge	r18,r2,1025848 <_gp+0xfffe7bc4>
 1025878:	b009883a 	mov	r4,r22
 102587c:	b80b883a 	mov	r5,r23
 1025880:	d9811e04 	addi	r6,sp,1144
 1025884:	102d51c0 	call	102d51c <__sprint_r>
 1025888:	103ed11e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 102588c:	843ffc04 	addi	r16,r16,-16
 1025890:	d8c12017 	ldw	r3,1152(sp)
 1025894:	d8811f17 	ldw	r2,1148(sp)
 1025898:	da000404 	addi	r8,sp,16
 102589c:	8c3fed16 	blt	r17,r16,1025854 <_gp+0xfffe7bd0>
 10258a0:	dac13617 	ldw	r11,1240(sp)
 10258a4:	1c07883a 	add	r3,r3,r16
 10258a8:	10800044 	addi	r2,r2,1
 10258ac:	42c00015 	stw	r11,0(r8)
 10258b0:	44000115 	stw	r16,4(r8)
 10258b4:	d8c12015 	stw	r3,1152(sp)
 10258b8:	d8811f15 	stw	r2,1148(sp)
 10258bc:	010001c4 	movi	r4,7
 10258c0:	2080060e 	bge	r4,r2,10258dc <___vfprintf_internal_r+0x968>
 10258c4:	b009883a 	mov	r4,r22
 10258c8:	b80b883a 	mov	r5,r23
 10258cc:	d9811e04 	addi	r6,sp,1144
 10258d0:	102d51c0 	call	102d51c <__sprint_r>
 10258d4:	103ebe1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10258d8:	d8c12017 	ldw	r3,1152(sp)
 10258dc:	d8812b17 	ldw	r2,1196(sp)
 10258e0:	db012e17 	ldw	r12,1208(sp)
 10258e4:	1300010e 	bge	r2,r12,10258ec <___vfprintf_internal_r+0x978>
 10258e8:	6005883a 	mov	r2,r12
 10258ec:	dac12f17 	ldw	r11,1212(sp)
 10258f0:	5897883a 	add	r11,r11,r2
 10258f4:	dac12f15 	stw	r11,1212(sp)
 10258f8:	1801f21e 	bne	r3,zero,10260c4 <___vfprintf_internal_r+0x1150>
 10258fc:	d8011f15 	stw	zero,1148(sp)
 1025900:	da000404 	addi	r8,sp,16
 1025904:	003dd806 	br	1025068 <_gp+0xfffe73e4>
 1025908:	8c400414 	ori	r17,r17,16
 102590c:	d8c12a15 	stw	r3,1192(sp)
 1025910:	88c0080c 	andi	r3,r17,32
 1025914:	d8812d17 	ldw	r2,1204(sp)
 1025918:	18004626 	beq	r3,zero,1025a34 <___vfprintf_internal_r+0xac0>
 102591c:	dac12d17 	ldw	r11,1204(sp)
 1025920:	14c00017 	ldw	r19,0(r2)
 1025924:	17000117 	ldw	fp,4(r2)
 1025928:	5ac00204 	addi	r11,r11,8
 102592c:	dac12d15 	stw	r11,1204(sp)
 1025930:	00800044 	movi	r2,1
 1025934:	9f06b03a 	or	r3,r19,fp
 1025938:	003f0006 	br	102553c <_gp+0xfffe78b8>
 102593c:	1805883a 	mov	r2,r3
 1025940:	d8012e15 	stw	zero,1208(sp)
 1025944:	82fff404 	addi	r11,r16,-48
 1025948:	0019883a 	mov	r12,zero
 102594c:	14000007 	ldb	r16,0(r2)
 1025950:	630002a4 	muli	r12,r12,10
 1025954:	18c00044 	addi	r3,r3,1
 1025958:	1805883a 	mov	r2,r3
 102595c:	62d9883a 	add	r12,r12,r11
 1025960:	82fff404 	addi	r11,r16,-48
 1025964:	2afff92e 	bgeu	r5,r11,102594c <_gp+0xfffe7cc8>
 1025968:	db012e15 	stw	r12,1208(sp)
 102596c:	003de906 	br	1025114 <_gp+0xfffe7490>
 1025970:	8c400414 	ori	r17,r17,16
 1025974:	d8c12a15 	stw	r3,1192(sp)
 1025978:	d9812785 	stb	r6,1182(sp)
 102597c:	8880080c 	andi	r2,r17,32
 1025980:	d8c12d17 	ldw	r3,1204(sp)
 1025984:	10007a26 	beq	r2,zero,1025b70 <___vfprintf_internal_r+0xbfc>
 1025988:	db012d17 	ldw	r12,1204(sp)
 102598c:	18800117 	ldw	r2,4(r3)
 1025990:	1cc00017 	ldw	r19,0(r3)
 1025994:	63000204 	addi	r12,r12,8
 1025998:	db012d15 	stw	r12,1204(sp)
 102599c:	1039883a 	mov	fp,r2
 10259a0:	10031016 	blt	r2,zero,10265e4 <___vfprintf_internal_r+0x1670>
 10259a4:	dd412783 	ldbu	r21,1182(sp)
 10259a8:	da413215 	stw	r9,1224(sp)
 10259ac:	00800044 	movi	r2,1
 10259b0:	9f06b03a 	or	r3,r19,fp
 10259b4:	003ee406 	br	1025548 <_gp+0xfffe78c4>
 10259b8:	030040f4 	movhi	r12,259
 10259bc:	630fed04 	addi	r12,r12,16308
 10259c0:	d8c12a15 	stw	r3,1192(sp)
 10259c4:	d9812785 	stb	r6,1182(sp)
 10259c8:	db013b15 	stw	r12,1260(sp)
 10259cc:	88c0080c 	andi	r3,r17,32
 10259d0:	d8812d17 	ldw	r2,1204(sp)
 10259d4:	18002b26 	beq	r3,zero,1025a84 <___vfprintf_internal_r+0xb10>
 10259d8:	dac12d17 	ldw	r11,1204(sp)
 10259dc:	14c00017 	ldw	r19,0(r2)
 10259e0:	17000117 	ldw	fp,4(r2)
 10259e4:	5ac00204 	addi	r11,r11,8
 10259e8:	dac12d15 	stw	r11,1204(sp)
 10259ec:	8880004c 	andi	r2,r17,1
 10259f0:	10025b26 	beq	r2,zero,1026360 <___vfprintf_internal_r+0x13ec>
 10259f4:	9f06b03a 	or	r3,r19,fp
 10259f8:	18037026 	beq	r3,zero,10267bc <___vfprintf_internal_r+0x1848>
 10259fc:	00800c04 	movi	r2,48
 1025a00:	d8812705 	stb	r2,1180(sp)
 1025a04:	dc012745 	stb	r16,1181(sp)
 1025a08:	8c400094 	ori	r17,r17,2
 1025a0c:	00800084 	movi	r2,2
 1025a10:	003eca06 	br	102553c <_gp+0xfffe78b8>
 1025a14:	8c400814 	ori	r17,r17,32
 1025a18:	1805883a 	mov	r2,r3
 1025a1c:	1c000007 	ldb	r16,0(r3)
 1025a20:	003dbb06 	br	1025110 <_gp+0xfffe748c>
 1025a24:	d8c12a15 	stw	r3,1192(sp)
 1025a28:	88c0080c 	andi	r3,r17,32
 1025a2c:	d8812d17 	ldw	r2,1204(sp)
 1025a30:	183fba1e 	bne	r3,zero,102591c <_gp+0xfffe7c98>
 1025a34:	88c0040c 	andi	r3,r17,16
 1025a38:	18024c1e 	bne	r3,zero,102636c <___vfprintf_internal_r+0x13f8>
 1025a3c:	88c0100c 	andi	r3,r17,64
 1025a40:	18024a26 	beq	r3,zero,102636c <___vfprintf_internal_r+0x13f8>
 1025a44:	dac12d17 	ldw	r11,1204(sp)
 1025a48:	14c0000b 	ldhu	r19,0(r2)
 1025a4c:	0039883a 	mov	fp,zero
 1025a50:	5ac00104 	addi	r11,r11,4
 1025a54:	dac12d15 	stw	r11,1204(sp)
 1025a58:	00800044 	movi	r2,1
 1025a5c:	9807883a 	mov	r3,r19
 1025a60:	003eb606 	br	102553c <_gp+0xfffe78b8>
 1025a64:	008040f4 	movhi	r2,259
 1025a68:	108ff204 	addi	r2,r2,16328
 1025a6c:	d8c12a15 	stw	r3,1192(sp)
 1025a70:	d8813b15 	stw	r2,1260(sp)
 1025a74:	d9812785 	stb	r6,1182(sp)
 1025a78:	88c0080c 	andi	r3,r17,32
 1025a7c:	d8812d17 	ldw	r2,1204(sp)
 1025a80:	183fd51e 	bne	r3,zero,10259d8 <_gp+0xfffe7d54>
 1025a84:	88c0040c 	andi	r3,r17,16
 1025a88:	18034126 	beq	r3,zero,1026790 <___vfprintf_internal_r+0x181c>
 1025a8c:	db012d17 	ldw	r12,1204(sp)
 1025a90:	14c00017 	ldw	r19,0(r2)
 1025a94:	0039883a 	mov	fp,zero
 1025a98:	63000104 	addi	r12,r12,4
 1025a9c:	db012d15 	stw	r12,1204(sp)
 1025aa0:	003fd206 	br	10259ec <_gp+0xfffe7d68>
 1025aa4:	1c000007 	ldb	r16,0(r3)
 1025aa8:	81c3d626 	beq	r16,r7,1026a04 <___vfprintf_internal_r+0x1a90>
 1025aac:	8c400414 	ori	r17,r17,16
 1025ab0:	1805883a 	mov	r2,r3
 1025ab4:	003d9606 	br	1025110 <_gp+0xfffe748c>
 1025ab8:	d8c12a15 	stw	r3,1192(sp)
 1025abc:	d9812785 	stb	r6,1182(sp)
 1025ac0:	8880080c 	andi	r2,r17,32
 1025ac4:	10033f26 	beq	r2,zero,10267c4 <___vfprintf_internal_r+0x1850>
 1025ac8:	db012d17 	ldw	r12,1204(sp)
 1025acc:	dac12f17 	ldw	r11,1212(sp)
 1025ad0:	60800017 	ldw	r2,0(r12)
 1025ad4:	5807d7fa 	srai	r3,r11,31
 1025ad8:	63000104 	addi	r12,r12,4
 1025adc:	db012d15 	stw	r12,1204(sp)
 1025ae0:	12c00015 	stw	r11,0(r2)
 1025ae4:	10c00115 	stw	r3,4(r2)
 1025ae8:	003d5f06 	br	1025068 <_gp+0xfffe73e4>
 1025aec:	d8c12a15 	stw	r3,1192(sp)
 1025af0:	88c0080c 	andi	r3,r17,32
 1025af4:	d8812d17 	ldw	r2,1204(sp)
 1025af8:	183e891e 	bne	r3,zero,1025520 <_gp+0xfffe789c>
 1025afc:	88c0040c 	andi	r3,r17,16
 1025b00:	1801ea1e 	bne	r3,zero,10262ac <___vfprintf_internal_r+0x1338>
 1025b04:	88c0100c 	andi	r3,r17,64
 1025b08:	1801e826 	beq	r3,zero,10262ac <___vfprintf_internal_r+0x1338>
 1025b0c:	db012d17 	ldw	r12,1204(sp)
 1025b10:	14c0000b 	ldhu	r19,0(r2)
 1025b14:	0039883a 	mov	fp,zero
 1025b18:	63000104 	addi	r12,r12,4
 1025b1c:	db012d15 	stw	r12,1204(sp)
 1025b20:	0005883a 	mov	r2,zero
 1025b24:	9807883a 	mov	r3,r19
 1025b28:	003e8406 	br	102553c <_gp+0xfffe78b8>
 1025b2c:	30803fcc 	andi	r2,r6,255
 1025b30:	1080201c 	xori	r2,r2,128
 1025b34:	10bfe004 	addi	r2,r2,-128
 1025b38:	10031d1e 	bne	r2,zero,10267b0 <___vfprintf_internal_r+0x183c>
 1025b3c:	1805883a 	mov	r2,r3
 1025b40:	01800804 	movi	r6,32
 1025b44:	1c000007 	ldb	r16,0(r3)
 1025b48:	003d7106 	br	1025110 <_gp+0xfffe748c>
 1025b4c:	8c400054 	ori	r17,r17,1
 1025b50:	1805883a 	mov	r2,r3
 1025b54:	1c000007 	ldb	r16,0(r3)
 1025b58:	003d6d06 	br	1025110 <_gp+0xfffe748c>
 1025b5c:	d8c12a15 	stw	r3,1192(sp)
 1025b60:	d9812785 	stb	r6,1182(sp)
 1025b64:	8880080c 	andi	r2,r17,32
 1025b68:	d8c12d17 	ldw	r3,1204(sp)
 1025b6c:	103f861e 	bne	r2,zero,1025988 <_gp+0xfffe7d04>
 1025b70:	8880040c 	andi	r2,r17,16
 1025b74:	1001f31e 	bne	r2,zero,1026344 <___vfprintf_internal_r+0x13d0>
 1025b78:	8880100c 	andi	r2,r17,64
 1025b7c:	1001f126 	beq	r2,zero,1026344 <___vfprintf_internal_r+0x13d0>
 1025b80:	1cc0000f 	ldh	r19,0(r3)
 1025b84:	db012d17 	ldw	r12,1204(sp)
 1025b88:	9839d7fa 	srai	fp,r19,31
 1025b8c:	63000104 	addi	r12,r12,4
 1025b90:	db012d15 	stw	r12,1204(sp)
 1025b94:	e005883a 	mov	r2,fp
 1025b98:	003f8106 	br	10259a0 <_gp+0xfffe7d1c>
 1025b9c:	8c401014 	ori	r17,r17,64
 1025ba0:	1805883a 	mov	r2,r3
 1025ba4:	1c000007 	ldb	r16,0(r3)
 1025ba8:	003d5906 	br	1025110 <_gp+0xfffe748c>
 1025bac:	db012d17 	ldw	r12,1204(sp)
 1025bb0:	d8c12a15 	stw	r3,1192(sp)
 1025bb4:	00c00044 	movi	r3,1
 1025bb8:	60800017 	ldw	r2,0(r12)
 1025bbc:	63000104 	addi	r12,r12,4
 1025bc0:	d8c12b15 	stw	r3,1196(sp)
 1025bc4:	d8012785 	stb	zero,1182(sp)
 1025bc8:	d8810405 	stb	r2,1040(sp)
 1025bcc:	db012d15 	stw	r12,1204(sp)
 1025bd0:	dac10404 	addi	r11,sp,1040
 1025bd4:	1825883a 	mov	r18,r3
 1025bd8:	d8013215 	stw	zero,1224(sp)
 1025bdc:	d8013415 	stw	zero,1232(sp)
 1025be0:	dac13115 	stw	r11,1220(sp)
 1025be4:	0005883a 	mov	r2,zero
 1025be8:	003e7d06 	br	10255e0 <_gp+0xfffe795c>
 1025bec:	db012d17 	ldw	r12,1204(sp)
 1025bf0:	00800c04 	movi	r2,48
 1025bf4:	d8812705 	stb	r2,1180(sp)
 1025bf8:	64c00017 	ldw	r19,0(r12)
 1025bfc:	00801e04 	movi	r2,120
 1025c00:	d8812745 	stb	r2,1181(sp)
 1025c04:	008040f4 	movhi	r2,259
 1025c08:	108ff204 	addi	r2,r2,16328
 1025c0c:	63000104 	addi	r12,r12,4
 1025c10:	d8c12a15 	stw	r3,1192(sp)
 1025c14:	d8813b15 	stw	r2,1260(sp)
 1025c18:	0039883a 	mov	fp,zero
 1025c1c:	8c400094 	ori	r17,r17,2
 1025c20:	db012d15 	stw	r12,1204(sp)
 1025c24:	00800084 	movi	r2,2
 1025c28:	04001e04 	movi	r16,120
 1025c2c:	9807883a 	mov	r3,r19
 1025c30:	003e4206 	br	102553c <_gp+0xfffe78b8>
 1025c34:	dac12d17 	ldw	r11,1204(sp)
 1025c38:	db012d17 	ldw	r12,1204(sp)
 1025c3c:	d8c12a15 	stw	r3,1192(sp)
 1025c40:	5ac00017 	ldw	r11,0(r11)
 1025c44:	d8012785 	stb	zero,1182(sp)
 1025c48:	64c00104 	addi	r19,r12,4
 1025c4c:	dac13115 	stw	r11,1220(sp)
 1025c50:	5803e826 	beq	r11,zero,1026bf4 <___vfprintf_internal_r+0x1c80>
 1025c54:	d9013117 	ldw	r4,1220(sp)
 1025c58:	48037a16 	blt	r9,zero,1026a44 <___vfprintf_internal_r+0x1ad0>
 1025c5c:	480d883a 	mov	r6,r9
 1025c60:	000b883a 	mov	r5,zero
 1025c64:	da013f15 	stw	r8,1276(sp)
 1025c68:	da413e15 	stw	r9,1272(sp)
 1025c6c:	102a57c0 	call	102a57c <memchr>
 1025c70:	da013f17 	ldw	r8,1276(sp)
 1025c74:	da413e17 	ldw	r9,1272(sp)
 1025c78:	10044426 	beq	r2,zero,1026d8c <___vfprintf_internal_r+0x1e18>
 1025c7c:	d8c13117 	ldw	r3,1220(sp)
 1025c80:	10e5c83a 	sub	r18,r2,r3
 1025c84:	4c834416 	blt	r9,r18,1026998 <___vfprintf_internal_r+0x1a24>
 1025c88:	9005883a 	mov	r2,r18
 1025c8c:	90037216 	blt	r18,zero,1026a58 <___vfprintf_internal_r+0x1ae4>
 1025c90:	dd412783 	ldbu	r21,1182(sp)
 1025c94:	d8812b15 	stw	r2,1196(sp)
 1025c98:	dcc12d15 	stw	r19,1204(sp)
 1025c9c:	d8013215 	stw	zero,1224(sp)
 1025ca0:	d8013415 	stw	zero,1232(sp)
 1025ca4:	003e4706 	br	10255c4 <_gp+0xfffe7940>
 1025ca8:	dac12d17 	ldw	r11,1204(sp)
 1025cac:	db012d17 	ldw	r12,1204(sp)
 1025cb0:	5ac00017 	ldw	r11,0(r11)
 1025cb4:	dac12e15 	stw	r11,1208(sp)
 1025cb8:	62c00104 	addi	r11,r12,4
 1025cbc:	db012e17 	ldw	r12,1208(sp)
 1025cc0:	60034a16 	blt	r12,zero,10269ec <___vfprintf_internal_r+0x1a78>
 1025cc4:	dac12d15 	stw	r11,1204(sp)
 1025cc8:	1805883a 	mov	r2,r3
 1025ccc:	1c000007 	ldb	r16,0(r3)
 1025cd0:	003d0f06 	br	1025110 <_gp+0xfffe748c>
 1025cd4:	1805883a 	mov	r2,r3
 1025cd8:	01800ac4 	movi	r6,43
 1025cdc:	1c000007 	ldb	r16,0(r3)
 1025ce0:	003d0b06 	br	1025110 <_gp+0xfffe748c>
 1025ce4:	d8c12a15 	stw	r3,1192(sp)
 1025ce8:	d9812785 	stb	r6,1182(sp)
 1025cec:	803db226 	beq	r16,zero,10253b8 <_gp+0xfffe7734>
 1025cf0:	00c00044 	movi	r3,1
 1025cf4:	d8c12b15 	stw	r3,1196(sp)
 1025cf8:	dc010405 	stb	r16,1040(sp)
 1025cfc:	d8012785 	stb	zero,1182(sp)
 1025d00:	003fb306 	br	1025bd0 <_gp+0xfffe7f4c>
 1025d04:	d8c12017 	ldw	r3,1152(sp)
 1025d08:	003e6d06 	br	10256c0 <_gp+0xfffe7a3c>
 1025d0c:	10803fcc 	andi	r2,r2,255
 1025d10:	00c00044 	movi	r3,1
 1025d14:	10fe141e 	bne	r2,r3,1025568 <_gp+0xfffe78e4>
 1025d18:	e000021e 	bne	fp,zero,1025d24 <___vfprintf_internal_r+0xdb0>
 1025d1c:	00800244 	movi	r2,9
 1025d20:	14c0202e 	bgeu	r2,r19,1025da4 <___vfprintf_internal_r+0xe30>
 1025d24:	dc012b15 	stw	r16,1196(sp)
 1025d28:	dc412c15 	stw	r17,1200(sp)
 1025d2c:	9821883a 	mov	r16,r19
 1025d30:	e023883a 	mov	r17,fp
 1025d34:	dc810e04 	addi	r18,sp,1080
 1025d38:	4027883a 	mov	r19,r8
 1025d3c:	4839883a 	mov	fp,r9
 1025d40:	8009883a 	mov	r4,r16
 1025d44:	880b883a 	mov	r5,r17
 1025d48:	01800284 	movi	r6,10
 1025d4c:	000f883a 	mov	r7,zero
 1025d50:	102f7ac0 	call	102f7ac <__umoddi3>
 1025d54:	10800c04 	addi	r2,r2,48
 1025d58:	94bfffc4 	addi	r18,r18,-1
 1025d5c:	8009883a 	mov	r4,r16
 1025d60:	880b883a 	mov	r5,r17
 1025d64:	01800284 	movi	r6,10
 1025d68:	000f883a 	mov	r7,zero
 1025d6c:	90800005 	stb	r2,0(r18)
 1025d70:	102f1ec0 	call	102f1ec <__udivdi3>
 1025d74:	1021883a 	mov	r16,r2
 1025d78:	10c4b03a 	or	r2,r2,r3
 1025d7c:	1823883a 	mov	r17,r3
 1025d80:	103fef1e 	bne	r2,zero,1025d40 <_gp+0xfffe80bc>
 1025d84:	dac12817 	ldw	r11,1184(sp)
 1025d88:	dc813115 	stw	r18,1220(sp)
 1025d8c:	dc012b17 	ldw	r16,1196(sp)
 1025d90:	9811883a 	mov	r8,r19
 1025d94:	dc412c17 	ldw	r17,1200(sp)
 1025d98:	e013883a 	mov	r9,fp
 1025d9c:	5ca5c83a 	sub	r18,r11,r18
 1025da0:	003e0306 	br	10255b0 <_gp+0xfffe792c>
 1025da4:	9cc00c04 	addi	r19,r19,48
 1025da8:	d8c10dc4 	addi	r3,sp,1079
 1025dac:	dcc10dc5 	stb	r19,1079(sp)
 1025db0:	dc813c17 	ldw	r18,1264(sp)
 1025db4:	d8c13115 	stw	r3,1220(sp)
 1025db8:	003dfd06 	br	10255b0 <_gp+0xfffe792c>
 1025dbc:	00801944 	movi	r2,101
 1025dc0:	1400710e 	bge	r2,r16,1025f88 <___vfprintf_internal_r+0x1014>
 1025dc4:	d9013717 	ldw	r4,1244(sp)
 1025dc8:	d9413917 	ldw	r5,1252(sp)
 1025dcc:	000d883a 	mov	r6,zero
 1025dd0:	000f883a 	mov	r7,zero
 1025dd4:	d8c13d15 	stw	r3,1268(sp)
 1025dd8:	da013f15 	stw	r8,1276(sp)
 1025ddc:	10305d80 	call	10305d8 <__eqdf2>
 1025de0:	d8c13d17 	ldw	r3,1268(sp)
 1025de4:	da013f17 	ldw	r8,1276(sp)
 1025de8:	1000ef1e 	bne	r2,zero,10261a8 <___vfprintf_internal_r+0x1234>
 1025dec:	d8811f17 	ldw	r2,1148(sp)
 1025df0:	010040f4 	movhi	r4,259
 1025df4:	210ff904 	addi	r4,r4,16356
 1025df8:	18c00044 	addi	r3,r3,1
 1025dfc:	10800044 	addi	r2,r2,1
 1025e00:	41000015 	stw	r4,0(r8)
 1025e04:	01000044 	movi	r4,1
 1025e08:	41000115 	stw	r4,4(r8)
 1025e0c:	d8c12015 	stw	r3,1152(sp)
 1025e10:	d8811f15 	stw	r2,1148(sp)
 1025e14:	010001c4 	movi	r4,7
 1025e18:	20828e16 	blt	r4,r2,1026854 <___vfprintf_internal_r+0x18e0>
 1025e1c:	42000204 	addi	r8,r8,8
 1025e20:	d8812617 	ldw	r2,1176(sp)
 1025e24:	dac13317 	ldw	r11,1228(sp)
 1025e28:	12c00216 	blt	r2,r11,1025e34 <___vfprintf_internal_r+0xec0>
 1025e2c:	8880004c 	andi	r2,r17,1
 1025e30:	103e7726 	beq	r2,zero,1025810 <_gp+0xfffe7b8c>
 1025e34:	db013817 	ldw	r12,1248(sp)
 1025e38:	d8811f17 	ldw	r2,1148(sp)
 1025e3c:	dac13517 	ldw	r11,1236(sp)
 1025e40:	1b07883a 	add	r3,r3,r12
 1025e44:	10800044 	addi	r2,r2,1
 1025e48:	42c00015 	stw	r11,0(r8)
 1025e4c:	43000115 	stw	r12,4(r8)
 1025e50:	d8c12015 	stw	r3,1152(sp)
 1025e54:	d8811f15 	stw	r2,1148(sp)
 1025e58:	010001c4 	movi	r4,7
 1025e5c:	2082ed16 	blt	r4,r2,1026a14 <___vfprintf_internal_r+0x1aa0>
 1025e60:	42000204 	addi	r8,r8,8
 1025e64:	db013317 	ldw	r12,1228(sp)
 1025e68:	643fffc4 	addi	r16,r12,-1
 1025e6c:	043e680e 	bge	zero,r16,1025810 <_gp+0xfffe7b8c>
 1025e70:	04800404 	movi	r18,16
 1025e74:	d8811f17 	ldw	r2,1148(sp)
 1025e78:	94007e0e 	bge	r18,r16,1026074 <___vfprintf_internal_r+0x1100>
 1025e7c:	014040f4 	movhi	r5,259
 1025e80:	29500184 	addi	r5,r5,16390
 1025e84:	d9412c15 	stw	r5,1200(sp)
 1025e88:	054001c4 	movi	r21,7
 1025e8c:	00000306 	br	1025e9c <___vfprintf_internal_r+0xf28>
 1025e90:	42000204 	addi	r8,r8,8
 1025e94:	843ffc04 	addi	r16,r16,-16
 1025e98:	9400790e 	bge	r18,r16,1026080 <___vfprintf_internal_r+0x110c>
 1025e9c:	18c00404 	addi	r3,r3,16
 1025ea0:	10800044 	addi	r2,r2,1
 1025ea4:	45000015 	stw	r20,0(r8)
 1025ea8:	44800115 	stw	r18,4(r8)
 1025eac:	d8c12015 	stw	r3,1152(sp)
 1025eb0:	d8811f15 	stw	r2,1148(sp)
 1025eb4:	a8bff60e 	bge	r21,r2,1025e90 <_gp+0xfffe820c>
 1025eb8:	b009883a 	mov	r4,r22
 1025ebc:	b80b883a 	mov	r5,r23
 1025ec0:	d9811e04 	addi	r6,sp,1144
 1025ec4:	102d51c0 	call	102d51c <__sprint_r>
 1025ec8:	103d411e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1025ecc:	d8c12017 	ldw	r3,1152(sp)
 1025ed0:	d8811f17 	ldw	r2,1148(sp)
 1025ed4:	da000404 	addi	r8,sp,16
 1025ed8:	003fee06 	br	1025e94 <_gp+0xfffe8210>
 1025edc:	dac12e17 	ldw	r11,1208(sp)
 1025ee0:	db012b17 	ldw	r12,1196(sp)
 1025ee4:	5b2bc83a 	sub	r21,r11,r12
 1025ee8:	057e130e 	bge	zero,r21,1025738 <_gp+0xfffe7ab4>
 1025eec:	07000404 	movi	fp,16
 1025ef0:	d8811f17 	ldw	r2,1148(sp)
 1025ef4:	e543640e 	bge	fp,r21,1026c88 <___vfprintf_internal_r+0x1d14>
 1025ef8:	014040f4 	movhi	r5,259
 1025efc:	29500184 	addi	r5,r5,16390
 1025f00:	d9412c15 	stw	r5,1200(sp)
 1025f04:	04c001c4 	movi	r19,7
 1025f08:	00000306 	br	1025f18 <___vfprintf_internal_r+0xfa4>
 1025f0c:	ad7ffc04 	addi	r21,r21,-16
 1025f10:	42000204 	addi	r8,r8,8
 1025f14:	e540110e 	bge	fp,r21,1025f5c <___vfprintf_internal_r+0xfe8>
 1025f18:	18c00404 	addi	r3,r3,16
 1025f1c:	10800044 	addi	r2,r2,1
 1025f20:	45000015 	stw	r20,0(r8)
 1025f24:	47000115 	stw	fp,4(r8)
 1025f28:	d8c12015 	stw	r3,1152(sp)
 1025f2c:	d8811f15 	stw	r2,1148(sp)
 1025f30:	98bff60e 	bge	r19,r2,1025f0c <_gp+0xfffe8288>
 1025f34:	b009883a 	mov	r4,r22
 1025f38:	b80b883a 	mov	r5,r23
 1025f3c:	d9811e04 	addi	r6,sp,1144
 1025f40:	102d51c0 	call	102d51c <__sprint_r>
 1025f44:	103d221e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1025f48:	ad7ffc04 	addi	r21,r21,-16
 1025f4c:	d8c12017 	ldw	r3,1152(sp)
 1025f50:	d8811f17 	ldw	r2,1148(sp)
 1025f54:	da000404 	addi	r8,sp,16
 1025f58:	e57fef16 	blt	fp,r21,1025f18 <_gp+0xfffe8294>
 1025f5c:	dac12c17 	ldw	r11,1200(sp)
 1025f60:	1d47883a 	add	r3,r3,r21
 1025f64:	10800044 	addi	r2,r2,1
 1025f68:	42c00015 	stw	r11,0(r8)
 1025f6c:	45400115 	stw	r21,4(r8)
 1025f70:	d8c12015 	stw	r3,1152(sp)
 1025f74:	d8811f15 	stw	r2,1148(sp)
 1025f78:	010001c4 	movi	r4,7
 1025f7c:	20819116 	blt	r4,r2,10265c4 <___vfprintf_internal_r+0x1650>
 1025f80:	42000204 	addi	r8,r8,8
 1025f84:	003dec06 	br	1025738 <_gp+0xfffe7ab4>
 1025f88:	db013317 	ldw	r12,1228(sp)
 1025f8c:	00800044 	movi	r2,1
 1025f90:	18c00044 	addi	r3,r3,1
 1025f94:	1301530e 	bge	r2,r12,10264e4 <___vfprintf_internal_r+0x1570>
 1025f98:	dc011f17 	ldw	r16,1148(sp)
 1025f9c:	dac13117 	ldw	r11,1220(sp)
 1025fa0:	00800044 	movi	r2,1
 1025fa4:	84000044 	addi	r16,r16,1
 1025fa8:	40800115 	stw	r2,4(r8)
 1025fac:	42c00015 	stw	r11,0(r8)
 1025fb0:	d8c12015 	stw	r3,1152(sp)
 1025fb4:	dc011f15 	stw	r16,1148(sp)
 1025fb8:	008001c4 	movi	r2,7
 1025fbc:	14016b16 	blt	r2,r16,102656c <___vfprintf_internal_r+0x15f8>
 1025fc0:	42000204 	addi	r8,r8,8
 1025fc4:	db013817 	ldw	r12,1248(sp)
 1025fc8:	dac13517 	ldw	r11,1236(sp)
 1025fcc:	84000044 	addi	r16,r16,1
 1025fd0:	1b07883a 	add	r3,r3,r12
 1025fd4:	42c00015 	stw	r11,0(r8)
 1025fd8:	43000115 	stw	r12,4(r8)
 1025fdc:	d8c12015 	stw	r3,1152(sp)
 1025fe0:	dc011f15 	stw	r16,1148(sp)
 1025fe4:	008001c4 	movi	r2,7
 1025fe8:	14016916 	blt	r2,r16,1026590 <___vfprintf_internal_r+0x161c>
 1025fec:	44800204 	addi	r18,r8,8
 1025ff0:	d9013717 	ldw	r4,1244(sp)
 1025ff4:	d9413917 	ldw	r5,1252(sp)
 1025ff8:	000d883a 	mov	r6,zero
 1025ffc:	000f883a 	mov	r7,zero
 1026000:	d8c13d15 	stw	r3,1268(sp)
 1026004:	10305d80 	call	10305d8 <__eqdf2>
 1026008:	d8c13d17 	ldw	r3,1268(sp)
 102600c:	db013317 	ldw	r12,1228(sp)
 1026010:	1000ae26 	beq	r2,zero,10262cc <___vfprintf_internal_r+0x1358>
 1026014:	dac13117 	ldw	r11,1220(sp)
 1026018:	60bfffc4 	addi	r2,r12,-1
 102601c:	1887883a 	add	r3,r3,r2
 1026020:	59000044 	addi	r4,r11,1
 1026024:	84000044 	addi	r16,r16,1
 1026028:	90800115 	stw	r2,4(r18)
 102602c:	91000015 	stw	r4,0(r18)
 1026030:	d8c12015 	stw	r3,1152(sp)
 1026034:	dc011f15 	stw	r16,1148(sp)
 1026038:	008001c4 	movi	r2,7
 102603c:	14014216 	blt	r2,r16,1026548 <___vfprintf_internal_r+0x15d4>
 1026040:	94800204 	addi	r18,r18,8
 1026044:	dac13a17 	ldw	r11,1256(sp)
 1026048:	dd4122c4 	addi	r21,sp,1163
 102604c:	84000044 	addi	r16,r16,1
 1026050:	58c7883a 	add	r3,r11,r3
 1026054:	95400015 	stw	r21,0(r18)
 1026058:	92c00115 	stw	r11,4(r18)
 102605c:	d8c12015 	stw	r3,1152(sp)
 1026060:	dc011f15 	stw	r16,1148(sp)
 1026064:	008001c4 	movi	r2,7
 1026068:	14000e16 	blt	r2,r16,10260a4 <___vfprintf_internal_r+0x1130>
 102606c:	92000204 	addi	r8,r18,8
 1026070:	003de706 	br	1025810 <_gp+0xfffe7b8c>
 1026074:	010040f4 	movhi	r4,259
 1026078:	21100184 	addi	r4,r4,16390
 102607c:	d9012c15 	stw	r4,1200(sp)
 1026080:	dac12c17 	ldw	r11,1200(sp)
 1026084:	1c07883a 	add	r3,r3,r16
 1026088:	44000115 	stw	r16,4(r8)
 102608c:	42c00015 	stw	r11,0(r8)
 1026090:	10800044 	addi	r2,r2,1
 1026094:	d8c12015 	stw	r3,1152(sp)
 1026098:	d8811f15 	stw	r2,1148(sp)
 102609c:	010001c4 	movi	r4,7
 10260a0:	20bdda0e 	bge	r4,r2,102580c <_gp+0xfffe7b88>
 10260a4:	b009883a 	mov	r4,r22
 10260a8:	b80b883a 	mov	r5,r23
 10260ac:	d9811e04 	addi	r6,sp,1144
 10260b0:	102d51c0 	call	102d51c <__sprint_r>
 10260b4:	103cc61e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10260b8:	d8c12017 	ldw	r3,1152(sp)
 10260bc:	da000404 	addi	r8,sp,16
 10260c0:	003dd306 	br	1025810 <_gp+0xfffe7b8c>
 10260c4:	b009883a 	mov	r4,r22
 10260c8:	b80b883a 	mov	r5,r23
 10260cc:	d9811e04 	addi	r6,sp,1144
 10260d0:	102d51c0 	call	102d51c <__sprint_r>
 10260d4:	103e0926 	beq	r2,zero,10258fc <_gp+0xfffe7c78>
 10260d8:	003cbd06 	br	10253d0 <_gp+0xfffe774c>
 10260dc:	10803fcc 	andi	r2,r2,255
 10260e0:	1000651e 	bne	r2,zero,1026278 <___vfprintf_internal_r+0x1304>
 10260e4:	8880004c 	andi	r2,r17,1
 10260e8:	10013226 	beq	r2,zero,10265b4 <___vfprintf_internal_r+0x1640>
 10260ec:	00800c04 	movi	r2,48
 10260f0:	d8c10dc4 	addi	r3,sp,1079
 10260f4:	d8810dc5 	stb	r2,1079(sp)
 10260f8:	dc813c17 	ldw	r18,1264(sp)
 10260fc:	d8c13115 	stw	r3,1220(sp)
 1026100:	003d2b06 	br	10255b0 <_gp+0xfffe792c>
 1026104:	b009883a 	mov	r4,r22
 1026108:	b80b883a 	mov	r5,r23
 102610c:	d9811e04 	addi	r6,sp,1144
 1026110:	102d51c0 	call	102d51c <__sprint_r>
 1026114:	103cae1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026118:	d8c12017 	ldw	r3,1152(sp)
 102611c:	da000404 	addi	r8,sp,16
 1026120:	003dae06 	br	10257dc <_gp+0xfffe7b58>
 1026124:	b009883a 	mov	r4,r22
 1026128:	b80b883a 	mov	r5,r23
 102612c:	d9811e04 	addi	r6,sp,1144
 1026130:	102d51c0 	call	102d51c <__sprint_r>
 1026134:	103ca61e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026138:	d8c12017 	ldw	r3,1152(sp)
 102613c:	da000404 	addi	r8,sp,16
 1026140:	003d6c06 	br	10256f4 <_gp+0xfffe7a70>
 1026144:	b009883a 	mov	r4,r22
 1026148:	b80b883a 	mov	r5,r23
 102614c:	d9811e04 	addi	r6,sp,1144
 1026150:	102d51c0 	call	102d51c <__sprint_r>
 1026154:	103c9e1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026158:	d8c12017 	ldw	r3,1152(sp)
 102615c:	da000404 	addi	r8,sp,16
 1026160:	003d7206 	br	102572c <_gp+0xfffe7aa8>
 1026164:	d9413b17 	ldw	r5,1260(sp)
 1026168:	d8c10e04 	addi	r3,sp,1080
 102616c:	988003cc 	andi	r2,r19,15
 1026170:	e008973a 	slli	r4,fp,28
 1026174:	2885883a 	add	r2,r5,r2
 1026178:	9826d13a 	srli	r19,r19,4
 102617c:	10800003 	ldbu	r2,0(r2)
 1026180:	e038d13a 	srli	fp,fp,4
 1026184:	18ffffc4 	addi	r3,r3,-1
 1026188:	24e6b03a 	or	r19,r4,r19
 102618c:	18800005 	stb	r2,0(r3)
 1026190:	9f04b03a 	or	r2,r19,fp
 1026194:	103ff51e 	bne	r2,zero,102616c <_gp+0xfffe84e8>
 1026198:	db012817 	ldw	r12,1184(sp)
 102619c:	d8c13115 	stw	r3,1220(sp)
 10261a0:	60e5c83a 	sub	r18,r12,r3
 10261a4:	003d0206 	br	10255b0 <_gp+0xfffe792c>
 10261a8:	dc012617 	ldw	r16,1176(sp)
 10261ac:	0401b10e 	bge	zero,r16,1026874 <___vfprintf_internal_r+0x1900>
 10261b0:	db013117 	ldw	r12,1220(sp)
 10261b4:	dac13317 	ldw	r11,1228(sp)
 10261b8:	62e1883a 	add	r16,r12,r11
 10261bc:	db013417 	ldw	r12,1232(sp)
 10261c0:	5825883a 	mov	r18,r11
 10261c4:	62c0010e 	bge	r12,r11,10261cc <___vfprintf_internal_r+0x1258>
 10261c8:	6025883a 	mov	r18,r12
 10261cc:	04800b0e 	bge	zero,r18,10261fc <___vfprintf_internal_r+0x1288>
 10261d0:	d8811f17 	ldw	r2,1148(sp)
 10261d4:	dac13117 	ldw	r11,1220(sp)
 10261d8:	1c87883a 	add	r3,r3,r18
 10261dc:	10800044 	addi	r2,r2,1
 10261e0:	42c00015 	stw	r11,0(r8)
 10261e4:	44800115 	stw	r18,4(r8)
 10261e8:	d8c12015 	stw	r3,1152(sp)
 10261ec:	d8811f15 	stw	r2,1148(sp)
 10261f0:	010001c4 	movi	r4,7
 10261f4:	20824f16 	blt	r4,r2,1026b34 <___vfprintf_internal_r+0x1bc0>
 10261f8:	42000204 	addi	r8,r8,8
 10261fc:	90024b16 	blt	r18,zero,1026b2c <___vfprintf_internal_r+0x1bb8>
 1026200:	db013417 	ldw	r12,1232(sp)
 1026204:	64a5c83a 	sub	r18,r12,r18
 1026208:	0480730e 	bge	zero,r18,10263d8 <___vfprintf_internal_r+0x1464>
 102620c:	05400404 	movi	r21,16
 1026210:	d8811f17 	ldw	r2,1148(sp)
 1026214:	ac817d0e 	bge	r21,r18,102680c <___vfprintf_internal_r+0x1898>
 1026218:	014040f4 	movhi	r5,259
 102621c:	29500184 	addi	r5,r5,16390
 1026220:	d9412c15 	stw	r5,1200(sp)
 1026224:	070001c4 	movi	fp,7
 1026228:	00000306 	br	1026238 <___vfprintf_internal_r+0x12c4>
 102622c:	42000204 	addi	r8,r8,8
 1026230:	94bffc04 	addi	r18,r18,-16
 1026234:	ac81780e 	bge	r21,r18,1026818 <___vfprintf_internal_r+0x18a4>
 1026238:	18c00404 	addi	r3,r3,16
 102623c:	10800044 	addi	r2,r2,1
 1026240:	45000015 	stw	r20,0(r8)
 1026244:	45400115 	stw	r21,4(r8)
 1026248:	d8c12015 	stw	r3,1152(sp)
 102624c:	d8811f15 	stw	r2,1148(sp)
 1026250:	e0bff60e 	bge	fp,r2,102622c <_gp+0xfffe85a8>
 1026254:	b009883a 	mov	r4,r22
 1026258:	b80b883a 	mov	r5,r23
 102625c:	d9811e04 	addi	r6,sp,1144
 1026260:	102d51c0 	call	102d51c <__sprint_r>
 1026264:	103c5a1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026268:	d8c12017 	ldw	r3,1152(sp)
 102626c:	d8811f17 	ldw	r2,1148(sp)
 1026270:	da000404 	addi	r8,sp,16
 1026274:	003fee06 	br	1026230 <_gp+0xfffe85ac>
 1026278:	dac10e04 	addi	r11,sp,1080
 102627c:	0025883a 	mov	r18,zero
 1026280:	dac13115 	stw	r11,1220(sp)
 1026284:	003cca06 	br	10255b0 <_gp+0xfffe792c>
 1026288:	b009883a 	mov	r4,r22
 102628c:	b80b883a 	mov	r5,r23
 1026290:	d9811e04 	addi	r6,sp,1144
 1026294:	102d51c0 	call	102d51c <__sprint_r>
 1026298:	103c4d1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 102629c:	d8c12017 	ldw	r3,1152(sp)
 10262a0:	d8812787 	ldb	r2,1182(sp)
 10262a4:	da000404 	addi	r8,sp,16
 10262a8:	003d0506 	br	10256c0 <_gp+0xfffe7a3c>
 10262ac:	dac12d17 	ldw	r11,1204(sp)
 10262b0:	14c00017 	ldw	r19,0(r2)
 10262b4:	0039883a 	mov	fp,zero
 10262b8:	5ac00104 	addi	r11,r11,4
 10262bc:	dac12d15 	stw	r11,1204(sp)
 10262c0:	0005883a 	mov	r2,zero
 10262c4:	9807883a 	mov	r3,r19
 10262c8:	003c9c06 	br	102553c <_gp+0xfffe78b8>
 10262cc:	657fffc4 	addi	r21,r12,-1
 10262d0:	057f5c0e 	bge	zero,r21,1026044 <_gp+0xfffe83c0>
 10262d4:	07000404 	movi	fp,16
 10262d8:	e5408f0e 	bge	fp,r21,1026518 <___vfprintf_internal_r+0x15a4>
 10262dc:	010040f4 	movhi	r4,259
 10262e0:	21100184 	addi	r4,r4,16390
 10262e4:	d9012c15 	stw	r4,1200(sp)
 10262e8:	01c001c4 	movi	r7,7
 10262ec:	00000306 	br	10262fc <___vfprintf_internal_r+0x1388>
 10262f0:	94800204 	addi	r18,r18,8
 10262f4:	ad7ffc04 	addi	r21,r21,-16
 10262f8:	e5408a0e 	bge	fp,r21,1026524 <___vfprintf_internal_r+0x15b0>
 10262fc:	18c00404 	addi	r3,r3,16
 1026300:	84000044 	addi	r16,r16,1
 1026304:	95000015 	stw	r20,0(r18)
 1026308:	97000115 	stw	fp,4(r18)
 102630c:	d8c12015 	stw	r3,1152(sp)
 1026310:	dc011f15 	stw	r16,1148(sp)
 1026314:	3c3ff60e 	bge	r7,r16,10262f0 <_gp+0xfffe866c>
 1026318:	b009883a 	mov	r4,r22
 102631c:	b80b883a 	mov	r5,r23
 1026320:	d9811e04 	addi	r6,sp,1144
 1026324:	d9c13d15 	stw	r7,1268(sp)
 1026328:	102d51c0 	call	102d51c <__sprint_r>
 102632c:	d9c13d17 	ldw	r7,1268(sp)
 1026330:	103c271e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026334:	d8c12017 	ldw	r3,1152(sp)
 1026338:	dc011f17 	ldw	r16,1148(sp)
 102633c:	dc800404 	addi	r18,sp,16
 1026340:	003fec06 	br	10262f4 <_gp+0xfffe8670>
 1026344:	1cc00017 	ldw	r19,0(r3)
 1026348:	dac12d17 	ldw	r11,1204(sp)
 102634c:	9839d7fa 	srai	fp,r19,31
 1026350:	5ac00104 	addi	r11,r11,4
 1026354:	dac12d15 	stw	r11,1204(sp)
 1026358:	e005883a 	mov	r2,fp
 102635c:	003d9006 	br	10259a0 <_gp+0xfffe7d1c>
 1026360:	00800084 	movi	r2,2
 1026364:	9f06b03a 	or	r3,r19,fp
 1026368:	003c7406 	br	102553c <_gp+0xfffe78b8>
 102636c:	db012d17 	ldw	r12,1204(sp)
 1026370:	14c00017 	ldw	r19,0(r2)
 1026374:	0039883a 	mov	fp,zero
 1026378:	63000104 	addi	r12,r12,4
 102637c:	db012d15 	stw	r12,1204(sp)
 1026380:	00800044 	movi	r2,1
 1026384:	9807883a 	mov	r3,r19
 1026388:	003c6c06 	br	102553c <_gp+0xfffe78b8>
 102638c:	10803fcc 	andi	r2,r2,255
 1026390:	1080201c 	xori	r2,r2,128
 1026394:	10bfe004 	addi	r2,r2,-128
 1026398:	01000c04 	movi	r4,48
 102639c:	1101a526 	beq	r2,r4,1026a34 <___vfprintf_internal_r+0x1ac0>
 10263a0:	dac13117 	ldw	r11,1220(sp)
 10263a4:	db012817 	ldw	r12,1184(sp)
 10263a8:	193fffc5 	stb	r4,-1(r3)
 10263ac:	5affffc4 	addi	r11,r11,-1
 10263b0:	dac13115 	stw	r11,1220(sp)
 10263b4:	62e5c83a 	sub	r18,r12,r11
 10263b8:	003c7d06 	br	10255b0 <_gp+0xfffe792c>
 10263bc:	b009883a 	mov	r4,r22
 10263c0:	b80b883a 	mov	r5,r23
 10263c4:	d9811e04 	addi	r6,sp,1144
 10263c8:	102d51c0 	call	102d51c <__sprint_r>
 10263cc:	103c001e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10263d0:	d8c12017 	ldw	r3,1152(sp)
 10263d4:	da000404 	addi	r8,sp,16
 10263d8:	db013117 	ldw	r12,1220(sp)
 10263dc:	dac13417 	ldw	r11,1232(sp)
 10263e0:	d8812617 	ldw	r2,1176(sp)
 10263e4:	62e5883a 	add	r18,r12,r11
 10263e8:	db013317 	ldw	r12,1228(sp)
 10263ec:	13000216 	blt	r2,r12,10263f8 <___vfprintf_internal_r+0x1484>
 10263f0:	8900004c 	andi	r4,r17,1
 10263f4:	20000c26 	beq	r4,zero,1026428 <___vfprintf_internal_r+0x14b4>
 10263f8:	dac13817 	ldw	r11,1248(sp)
 10263fc:	d9011f17 	ldw	r4,1148(sp)
 1026400:	db013517 	ldw	r12,1236(sp)
 1026404:	1ac7883a 	add	r3,r3,r11
 1026408:	21000044 	addi	r4,r4,1
 102640c:	43000015 	stw	r12,0(r8)
 1026410:	42c00115 	stw	r11,4(r8)
 1026414:	d8c12015 	stw	r3,1152(sp)
 1026418:	d9011f15 	stw	r4,1148(sp)
 102641c:	014001c4 	movi	r5,7
 1026420:	2901cc16 	blt	r5,r4,1026b54 <___vfprintf_internal_r+0x1be0>
 1026424:	42000204 	addi	r8,r8,8
 1026428:	dac13317 	ldw	r11,1228(sp)
 102642c:	8489c83a 	sub	r4,r16,r18
 1026430:	5885c83a 	sub	r2,r11,r2
 1026434:	1021883a 	mov	r16,r2
 1026438:	2080010e 	bge	r4,r2,1026440 <___vfprintf_internal_r+0x14cc>
 102643c:	2021883a 	mov	r16,r4
 1026440:	04000a0e 	bge	zero,r16,102646c <___vfprintf_internal_r+0x14f8>
 1026444:	d9011f17 	ldw	r4,1148(sp)
 1026448:	1c07883a 	add	r3,r3,r16
 102644c:	44800015 	stw	r18,0(r8)
 1026450:	21000044 	addi	r4,r4,1
 1026454:	44000115 	stw	r16,4(r8)
 1026458:	d8c12015 	stw	r3,1152(sp)
 102645c:	d9011f15 	stw	r4,1148(sp)
 1026460:	014001c4 	movi	r5,7
 1026464:	2901d616 	blt	r5,r4,1026bc0 <___vfprintf_internal_r+0x1c4c>
 1026468:	42000204 	addi	r8,r8,8
 102646c:	8001df16 	blt	r16,zero,1026bec <___vfprintf_internal_r+0x1c78>
 1026470:	1421c83a 	sub	r16,r2,r16
 1026474:	043ce60e 	bge	zero,r16,1025810 <_gp+0xfffe7b8c>
 1026478:	04800404 	movi	r18,16
 102647c:	d8811f17 	ldw	r2,1148(sp)
 1026480:	943efc0e 	bge	r18,r16,1026074 <_gp+0xfffe83f0>
 1026484:	014040f4 	movhi	r5,259
 1026488:	29500184 	addi	r5,r5,16390
 102648c:	d9412c15 	stw	r5,1200(sp)
 1026490:	054001c4 	movi	r21,7
 1026494:	00000306 	br	10264a4 <___vfprintf_internal_r+0x1530>
 1026498:	42000204 	addi	r8,r8,8
 102649c:	843ffc04 	addi	r16,r16,-16
 10264a0:	943ef70e 	bge	r18,r16,1026080 <_gp+0xfffe83fc>
 10264a4:	18c00404 	addi	r3,r3,16
 10264a8:	10800044 	addi	r2,r2,1
 10264ac:	45000015 	stw	r20,0(r8)
 10264b0:	44800115 	stw	r18,4(r8)
 10264b4:	d8c12015 	stw	r3,1152(sp)
 10264b8:	d8811f15 	stw	r2,1148(sp)
 10264bc:	a8bff60e 	bge	r21,r2,1026498 <_gp+0xfffe8814>
 10264c0:	b009883a 	mov	r4,r22
 10264c4:	b80b883a 	mov	r5,r23
 10264c8:	d9811e04 	addi	r6,sp,1144
 10264cc:	102d51c0 	call	102d51c <__sprint_r>
 10264d0:	103bbf1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10264d4:	d8c12017 	ldw	r3,1152(sp)
 10264d8:	d8811f17 	ldw	r2,1148(sp)
 10264dc:	da000404 	addi	r8,sp,16
 10264e0:	003fee06 	br	102649c <_gp+0xfffe8818>
 10264e4:	8888703a 	and	r4,r17,r2
 10264e8:	203eab1e 	bne	r4,zero,1025f98 <_gp+0xfffe8314>
 10264ec:	dc011f17 	ldw	r16,1148(sp)
 10264f0:	db013117 	ldw	r12,1220(sp)
 10264f4:	40800115 	stw	r2,4(r8)
 10264f8:	84000044 	addi	r16,r16,1
 10264fc:	43000015 	stw	r12,0(r8)
 1026500:	d8c12015 	stw	r3,1152(sp)
 1026504:	dc011f15 	stw	r16,1148(sp)
 1026508:	008001c4 	movi	r2,7
 102650c:	14000e16 	blt	r2,r16,1026548 <___vfprintf_internal_r+0x15d4>
 1026510:	44800204 	addi	r18,r8,8
 1026514:	003ecb06 	br	1026044 <_gp+0xfffe83c0>
 1026518:	008040f4 	movhi	r2,259
 102651c:	10900184 	addi	r2,r2,16390
 1026520:	d8812c15 	stw	r2,1200(sp)
 1026524:	dac12c17 	ldw	r11,1200(sp)
 1026528:	1d47883a 	add	r3,r3,r21
 102652c:	84000044 	addi	r16,r16,1
 1026530:	92c00015 	stw	r11,0(r18)
 1026534:	95400115 	stw	r21,4(r18)
 1026538:	d8c12015 	stw	r3,1152(sp)
 102653c:	dc011f15 	stw	r16,1148(sp)
 1026540:	008001c4 	movi	r2,7
 1026544:	143ebe0e 	bge	r2,r16,1026040 <_gp+0xfffe83bc>
 1026548:	b009883a 	mov	r4,r22
 102654c:	b80b883a 	mov	r5,r23
 1026550:	d9811e04 	addi	r6,sp,1144
 1026554:	102d51c0 	call	102d51c <__sprint_r>
 1026558:	103b9d1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 102655c:	d8c12017 	ldw	r3,1152(sp)
 1026560:	dc011f17 	ldw	r16,1148(sp)
 1026564:	dc800404 	addi	r18,sp,16
 1026568:	003eb606 	br	1026044 <_gp+0xfffe83c0>
 102656c:	b009883a 	mov	r4,r22
 1026570:	b80b883a 	mov	r5,r23
 1026574:	d9811e04 	addi	r6,sp,1144
 1026578:	102d51c0 	call	102d51c <__sprint_r>
 102657c:	103b941e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026580:	d8c12017 	ldw	r3,1152(sp)
 1026584:	dc011f17 	ldw	r16,1148(sp)
 1026588:	da000404 	addi	r8,sp,16
 102658c:	003e8d06 	br	1025fc4 <_gp+0xfffe8340>
 1026590:	b009883a 	mov	r4,r22
 1026594:	b80b883a 	mov	r5,r23
 1026598:	d9811e04 	addi	r6,sp,1144
 102659c:	102d51c0 	call	102d51c <__sprint_r>
 10265a0:	103b8b1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10265a4:	d8c12017 	ldw	r3,1152(sp)
 10265a8:	dc011f17 	ldw	r16,1148(sp)
 10265ac:	dc800404 	addi	r18,sp,16
 10265b0:	003e8f06 	br	1025ff0 <_gp+0xfffe836c>
 10265b4:	db010e04 	addi	r12,sp,1080
 10265b8:	0025883a 	mov	r18,zero
 10265bc:	db013115 	stw	r12,1220(sp)
 10265c0:	003bfb06 	br	10255b0 <_gp+0xfffe792c>
 10265c4:	b009883a 	mov	r4,r22
 10265c8:	b80b883a 	mov	r5,r23
 10265cc:	d9811e04 	addi	r6,sp,1144
 10265d0:	102d51c0 	call	102d51c <__sprint_r>
 10265d4:	103b7e1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10265d8:	d8c12017 	ldw	r3,1152(sp)
 10265dc:	da000404 	addi	r8,sp,16
 10265e0:	003c5506 	br	1025738 <_gp+0xfffe7ab4>
 10265e4:	04e7c83a 	sub	r19,zero,r19
 10265e8:	9804c03a 	cmpne	r2,r19,zero
 10265ec:	0739c83a 	sub	fp,zero,fp
 10265f0:	e0b9c83a 	sub	fp,fp,r2
 10265f4:	05400b44 	movi	r21,45
 10265f8:	dd412785 	stb	r21,1182(sp)
 10265fc:	da413215 	stw	r9,1224(sp)
 1026600:	00800044 	movi	r2,1
 1026604:	9f06b03a 	or	r3,r19,fp
 1026608:	003bcf06 	br	1025548 <_gp+0xfffe78c4>
 102660c:	da013f15 	stw	r8,1276(sp)
 1026610:	da413e15 	stw	r9,1272(sp)
 1026614:	102bf480 	call	102bf48 <__fpclassifyd>
 1026618:	da013f17 	ldw	r8,1276(sp)
 102661c:	da413e17 	ldw	r9,1272(sp)
 1026620:	1000ce26 	beq	r2,zero,102695c <___vfprintf_internal_r+0x19e8>
 1026624:	057ff7c4 	movi	r21,-33
 1026628:	00bfffc4 	movi	r2,-1
 102662c:	856a703a 	and	r21,r16,r21
 1026630:	4881f026 	beq	r9,r2,1026df4 <___vfprintf_internal_r+0x1e80>
 1026634:	008011c4 	movi	r2,71
 1026638:	a881e526 	beq	r21,r2,1026dd0 <___vfprintf_internal_r+0x1e5c>
 102663c:	db013917 	ldw	r12,1252(sp)
 1026640:	8ac04014 	ori	r11,r17,256
 1026644:	dac12d15 	stw	r11,1204(sp)
 1026648:	6001e416 	blt	r12,zero,1026ddc <___vfprintf_internal_r+0x1e68>
 102664c:	dc813917 	ldw	r18,1252(sp)
 1026650:	d8012b05 	stb	zero,1196(sp)
 1026654:	00801984 	movi	r2,102
 1026658:	80811826 	beq	r16,r2,1026abc <___vfprintf_internal_r+0x1b48>
 102665c:	00801184 	movi	r2,70
 1026660:	80811626 	beq	r16,r2,1026abc <___vfprintf_internal_r+0x1b48>
 1026664:	00801144 	movi	r2,69
 1026668:	a881e026 	beq	r21,r2,1026dec <___vfprintf_internal_r+0x1e78>
 102666c:	4839883a 	mov	fp,r9
 1026670:	d8812604 	addi	r2,sp,1176
 1026674:	d8800115 	stw	r2,4(sp)
 1026678:	d9413717 	ldw	r5,1244(sp)
 102667c:	d8812504 	addi	r2,sp,1172
 1026680:	d8800215 	stw	r2,8(sp)
 1026684:	d8812104 	addi	r2,sp,1156
 1026688:	df000015 	stw	fp,0(sp)
 102668c:	d8800315 	stw	r2,12(sp)
 1026690:	b009883a 	mov	r4,r22
 1026694:	900d883a 	mov	r6,r18
 1026698:	01c00084 	movi	r7,2
 102669c:	da013f15 	stw	r8,1276(sp)
 10266a0:	da413e15 	stw	r9,1272(sp)
 10266a4:	10273f40 	call	10273f4 <_dtoa_r>
 10266a8:	d8813115 	stw	r2,1220(sp)
 10266ac:	008019c4 	movi	r2,103
 10266b0:	da013f17 	ldw	r8,1276(sp)
 10266b4:	da413e17 	ldw	r9,1272(sp)
 10266b8:	80800226 	beq	r16,r2,10266c4 <___vfprintf_internal_r+0x1750>
 10266bc:	008011c4 	movi	r2,71
 10266c0:	8081101e 	bne	r16,r2,1026b04 <___vfprintf_internal_r+0x1b90>
 10266c4:	8880004c 	andi	r2,r17,1
 10266c8:	1001df26 	beq	r2,zero,1026e48 <___vfprintf_internal_r+0x1ed4>
 10266cc:	db013117 	ldw	r12,1220(sp)
 10266d0:	6715883a 	add	r10,r12,fp
 10266d4:	d9013717 	ldw	r4,1244(sp)
 10266d8:	900b883a 	mov	r5,r18
 10266dc:	000d883a 	mov	r6,zero
 10266e0:	000f883a 	mov	r7,zero
 10266e4:	da013f15 	stw	r8,1276(sp)
 10266e8:	da413e15 	stw	r9,1272(sp)
 10266ec:	da813d15 	stw	r10,1268(sp)
 10266f0:	10305d80 	call	10305d8 <__eqdf2>
 10266f4:	da013f17 	ldw	r8,1276(sp)
 10266f8:	da413e17 	ldw	r9,1272(sp)
 10266fc:	da813d17 	ldw	r10,1268(sp)
 1026700:	10016526 	beq	r2,zero,1026c98 <___vfprintf_internal_r+0x1d24>
 1026704:	d8812117 	ldw	r2,1156(sp)
 1026708:	1280062e 	bgeu	r2,r10,1026724 <___vfprintf_internal_r+0x17b0>
 102670c:	01000c04 	movi	r4,48
 1026710:	10c00044 	addi	r3,r2,1
 1026714:	d8c12115 	stw	r3,1156(sp)
 1026718:	11000005 	stb	r4,0(r2)
 102671c:	d8812117 	ldw	r2,1156(sp)
 1026720:	12bffb36 	bltu	r2,r10,1026710 <_gp+0xfffe8a8c>
 1026724:	db013117 	ldw	r12,1220(sp)
 1026728:	1305c83a 	sub	r2,r2,r12
 102672c:	d8813315 	stw	r2,1228(sp)
 1026730:	008011c4 	movi	r2,71
 1026734:	a8814a26 	beq	r21,r2,1026c60 <___vfprintf_internal_r+0x1cec>
 1026738:	00801944 	movi	r2,101
 102673c:	14020a0e 	bge	r2,r16,1026f68 <___vfprintf_internal_r+0x1ff4>
 1026740:	00801984 	movi	r2,102
 1026744:	8081b626 	beq	r16,r2,1026e20 <___vfprintf_internal_r+0x1eac>
 1026748:	db012617 	ldw	r12,1176(sp)
 102674c:	db013415 	stw	r12,1232(sp)
 1026750:	db013417 	ldw	r12,1232(sp)
 1026754:	dac13317 	ldw	r11,1228(sp)
 1026758:	62c1a816 	blt	r12,r11,1026dfc <___vfprintf_internal_r+0x1e88>
 102675c:	8c40004c 	andi	r17,r17,1
 1026760:	8801ca1e 	bne	r17,zero,1026e8c <___vfprintf_internal_r+0x1f18>
 1026764:	6005883a 	mov	r2,r12
 1026768:	6001b516 	blt	r12,zero,1026e40 <___vfprintf_internal_r+0x1ecc>
 102676c:	dc813417 	ldw	r18,1232(sp)
 1026770:	df012b07 	ldb	fp,1196(sp)
 1026774:	e001321e 	bne	fp,zero,1026c40 <___vfprintf_internal_r+0x1ccc>
 1026778:	dc412d17 	ldw	r17,1204(sp)
 102677c:	dd412783 	ldbu	r21,1182(sp)
 1026780:	d8812b15 	stw	r2,1196(sp)
 1026784:	dcc12d15 	stw	r19,1204(sp)
 1026788:	d8013215 	stw	zero,1224(sp)
 102678c:	003b8d06 	br	10255c4 <_gp+0xfffe7940>
 1026790:	88c0100c 	andi	r3,r17,64
 1026794:	18008226 	beq	r3,zero,10269a0 <___vfprintf_internal_r+0x1a2c>
 1026798:	dac12d17 	ldw	r11,1204(sp)
 102679c:	14c0000b 	ldhu	r19,0(r2)
 10267a0:	0039883a 	mov	fp,zero
 10267a4:	5ac00104 	addi	r11,r11,4
 10267a8:	dac12d15 	stw	r11,1204(sp)
 10267ac:	003c8f06 	br	10259ec <_gp+0xfffe7d68>
 10267b0:	1c000007 	ldb	r16,0(r3)
 10267b4:	1805883a 	mov	r2,r3
 10267b8:	003a5506 	br	1025110 <_gp+0xfffe748c>
 10267bc:	00800084 	movi	r2,2
 10267c0:	003b5e06 	br	102553c <_gp+0xfffe78b8>
 10267c4:	8880040c 	andi	r2,r17,16
 10267c8:	1000091e 	bne	r2,zero,10267f0 <___vfprintf_internal_r+0x187c>
 10267cc:	8c40100c 	andi	r17,r17,64
 10267d0:	88000726 	beq	r17,zero,10267f0 <___vfprintf_internal_r+0x187c>
 10267d4:	db012d17 	ldw	r12,1204(sp)
 10267d8:	dac12f17 	ldw	r11,1212(sp)
 10267dc:	60800017 	ldw	r2,0(r12)
 10267e0:	63000104 	addi	r12,r12,4
 10267e4:	db012d15 	stw	r12,1204(sp)
 10267e8:	12c0000d 	sth	r11,0(r2)
 10267ec:	003a1e06 	br	1025068 <_gp+0xfffe73e4>
 10267f0:	db012d17 	ldw	r12,1204(sp)
 10267f4:	dac12f17 	ldw	r11,1212(sp)
 10267f8:	60800017 	ldw	r2,0(r12)
 10267fc:	63000104 	addi	r12,r12,4
 1026800:	db012d15 	stw	r12,1204(sp)
 1026804:	12c00015 	stw	r11,0(r2)
 1026808:	003a1706 	br	1025068 <_gp+0xfffe73e4>
 102680c:	010040f4 	movhi	r4,259
 1026810:	21100184 	addi	r4,r4,16390
 1026814:	d9012c15 	stw	r4,1200(sp)
 1026818:	dac12c17 	ldw	r11,1200(sp)
 102681c:	1c87883a 	add	r3,r3,r18
 1026820:	10800044 	addi	r2,r2,1
 1026824:	42c00015 	stw	r11,0(r8)
 1026828:	44800115 	stw	r18,4(r8)
 102682c:	d8c12015 	stw	r3,1152(sp)
 1026830:	d8811f15 	stw	r2,1148(sp)
 1026834:	010001c4 	movi	r4,7
 1026838:	20bee016 	blt	r4,r2,10263bc <_gp+0xfffe8738>
 102683c:	42000204 	addi	r8,r8,8
 1026840:	003ee506 	br	10263d8 <_gp+0xfffe8754>
 1026844:	010040f4 	movhi	r4,259
 1026848:	21100184 	addi	r4,r4,16390
 102684c:	d9012c15 	stw	r4,1200(sp)
 1026850:	003bd806 	br	10257b4 <_gp+0xfffe7b30>
 1026854:	b009883a 	mov	r4,r22
 1026858:	b80b883a 	mov	r5,r23
 102685c:	d9811e04 	addi	r6,sp,1144
 1026860:	102d51c0 	call	102d51c <__sprint_r>
 1026864:	103ada1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026868:	d8c12017 	ldw	r3,1152(sp)
 102686c:	da000404 	addi	r8,sp,16
 1026870:	003d6b06 	br	1025e20 <_gp+0xfffe819c>
 1026874:	d8811f17 	ldw	r2,1148(sp)
 1026878:	030040f4 	movhi	r12,259
 102687c:	01000044 	movi	r4,1
 1026880:	18c00044 	addi	r3,r3,1
 1026884:	10800044 	addi	r2,r2,1
 1026888:	630ff904 	addi	r12,r12,16356
 102688c:	41000115 	stw	r4,4(r8)
 1026890:	43000015 	stw	r12,0(r8)
 1026894:	d8c12015 	stw	r3,1152(sp)
 1026898:	d8811f15 	stw	r2,1148(sp)
 102689c:	010001c4 	movi	r4,7
 10268a0:	20804916 	blt	r4,r2,10269c8 <___vfprintf_internal_r+0x1a54>
 10268a4:	42000204 	addi	r8,r8,8
 10268a8:	8000041e 	bne	r16,zero,10268bc <___vfprintf_internal_r+0x1948>
 10268ac:	dac13317 	ldw	r11,1228(sp)
 10268b0:	5800021e 	bne	r11,zero,10268bc <___vfprintf_internal_r+0x1948>
 10268b4:	8880004c 	andi	r2,r17,1
 10268b8:	103bd526 	beq	r2,zero,1025810 <_gp+0xfffe7b8c>
 10268bc:	db013817 	ldw	r12,1248(sp)
 10268c0:	d8811f17 	ldw	r2,1148(sp)
 10268c4:	dac13517 	ldw	r11,1236(sp)
 10268c8:	1b07883a 	add	r3,r3,r12
 10268cc:	10800044 	addi	r2,r2,1
 10268d0:	42c00015 	stw	r11,0(r8)
 10268d4:	43000115 	stw	r12,4(r8)
 10268d8:	d8c12015 	stw	r3,1152(sp)
 10268dc:	d8811f15 	stw	r2,1148(sp)
 10268e0:	010001c4 	movi	r4,7
 10268e4:	20813016 	blt	r4,r2,1026da8 <___vfprintf_internal_r+0x1e34>
 10268e8:	42000204 	addi	r8,r8,8
 10268ec:	0421c83a 	sub	r16,zero,r16
 10268f0:	0400630e 	bge	zero,r16,1026a80 <___vfprintf_internal_r+0x1b0c>
 10268f4:	04800404 	movi	r18,16
 10268f8:	94009f0e 	bge	r18,r16,1026b78 <___vfprintf_internal_r+0x1c04>
 10268fc:	010040f4 	movhi	r4,259
 1026900:	21100184 	addi	r4,r4,16390
 1026904:	d9012c15 	stw	r4,1200(sp)
 1026908:	054001c4 	movi	r21,7
 102690c:	00000306 	br	102691c <___vfprintf_internal_r+0x19a8>
 1026910:	42000204 	addi	r8,r8,8
 1026914:	843ffc04 	addi	r16,r16,-16
 1026918:	94009a0e 	bge	r18,r16,1026b84 <___vfprintf_internal_r+0x1c10>
 102691c:	18c00404 	addi	r3,r3,16
 1026920:	10800044 	addi	r2,r2,1
 1026924:	45000015 	stw	r20,0(r8)
 1026928:	44800115 	stw	r18,4(r8)
 102692c:	d8c12015 	stw	r3,1152(sp)
 1026930:	d8811f15 	stw	r2,1148(sp)
 1026934:	a8bff60e 	bge	r21,r2,1026910 <_gp+0xfffe8c8c>
 1026938:	b009883a 	mov	r4,r22
 102693c:	b80b883a 	mov	r5,r23
 1026940:	d9811e04 	addi	r6,sp,1144
 1026944:	102d51c0 	call	102d51c <__sprint_r>
 1026948:	103aa11e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 102694c:	d8c12017 	ldw	r3,1152(sp)
 1026950:	d8811f17 	ldw	r2,1148(sp)
 1026954:	da000404 	addi	r8,sp,16
 1026958:	003fee06 	br	1026914 <_gp+0xfffe8c90>
 102695c:	008011c4 	movi	r2,71
 1026960:	1400b316 	blt	r2,r16,1026c30 <___vfprintf_internal_r+0x1cbc>
 1026964:	030040f4 	movhi	r12,259
 1026968:	630feb04 	addi	r12,r12,16300
 102696c:	db013115 	stw	r12,1220(sp)
 1026970:	00c000c4 	movi	r3,3
 1026974:	00bfdfc4 	movi	r2,-129
 1026978:	d8c12b15 	stw	r3,1196(sp)
 102697c:	88a2703a 	and	r17,r17,r2
 1026980:	dd412783 	ldbu	r21,1182(sp)
 1026984:	dcc12d15 	stw	r19,1204(sp)
 1026988:	1825883a 	mov	r18,r3
 102698c:	d8013215 	stw	zero,1224(sp)
 1026990:	d8013415 	stw	zero,1232(sp)
 1026994:	003b0b06 	br	10255c4 <_gp+0xfffe7940>
 1026998:	4825883a 	mov	r18,r9
 102699c:	003cba06 	br	1025c88 <_gp+0xfffe8004>
 10269a0:	db012d17 	ldw	r12,1204(sp)
 10269a4:	14c00017 	ldw	r19,0(r2)
 10269a8:	0039883a 	mov	fp,zero
 10269ac:	63000104 	addi	r12,r12,4
 10269b0:	db012d15 	stw	r12,1204(sp)
 10269b4:	003c0d06 	br	10259ec <_gp+0xfffe7d68>
 10269b8:	008040f4 	movhi	r2,259
 10269bc:	108fe904 	addi	r2,r2,16292
 10269c0:	d8813115 	stw	r2,1220(sp)
 10269c4:	003ac406 	br	10254d8 <_gp+0xfffe7854>
 10269c8:	b009883a 	mov	r4,r22
 10269cc:	b80b883a 	mov	r5,r23
 10269d0:	d9811e04 	addi	r6,sp,1144
 10269d4:	102d51c0 	call	102d51c <__sprint_r>
 10269d8:	103a7d1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 10269dc:	dc012617 	ldw	r16,1176(sp)
 10269e0:	d8c12017 	ldw	r3,1152(sp)
 10269e4:	da000404 	addi	r8,sp,16
 10269e8:	003faf06 	br	10268a8 <_gp+0xfffe8c24>
 10269ec:	db012e17 	ldw	r12,1208(sp)
 10269f0:	1805883a 	mov	r2,r3
 10269f4:	dac12d15 	stw	r11,1204(sp)
 10269f8:	0319c83a 	sub	r12,zero,r12
 10269fc:	db012e15 	stw	r12,1208(sp)
 1026a00:	003a7e06 	br	10253fc <_gp+0xfffe7778>
 1026a04:	18800044 	addi	r2,r3,1
 1026a08:	8c400814 	ori	r17,r17,32
 1026a0c:	1c000047 	ldb	r16,1(r3)
 1026a10:	0039bf06 	br	1025110 <_gp+0xfffe748c>
 1026a14:	b009883a 	mov	r4,r22
 1026a18:	b80b883a 	mov	r5,r23
 1026a1c:	d9811e04 	addi	r6,sp,1144
 1026a20:	102d51c0 	call	102d51c <__sprint_r>
 1026a24:	103a6a1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026a28:	d8c12017 	ldw	r3,1152(sp)
 1026a2c:	da000404 	addi	r8,sp,16
 1026a30:	003d0c06 	br	1025e64 <_gp+0xfffe81e0>
 1026a34:	db012817 	ldw	r12,1184(sp)
 1026a38:	d8c13117 	ldw	r3,1220(sp)
 1026a3c:	60e5c83a 	sub	r18,r12,r3
 1026a40:	003adb06 	br	10255b0 <_gp+0xfffe792c>
 1026a44:	da013f15 	stw	r8,1276(sp)
 1026a48:	1022f4c0 	call	1022f4c <strlen>
 1026a4c:	1025883a 	mov	r18,r2
 1026a50:	da013f17 	ldw	r8,1276(sp)
 1026a54:	903c8e0e 	bge	r18,zero,1025c90 <_gp+0xfffe800c>
 1026a58:	0005883a 	mov	r2,zero
 1026a5c:	003c8c06 	br	1025c90 <_gp+0xfffe800c>
 1026a60:	b009883a 	mov	r4,r22
 1026a64:	b80b883a 	mov	r5,r23
 1026a68:	d9811e04 	addi	r6,sp,1144
 1026a6c:	102d51c0 	call	102d51c <__sprint_r>
 1026a70:	103a571e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026a74:	d8c12017 	ldw	r3,1152(sp)
 1026a78:	d8811f17 	ldw	r2,1148(sp)
 1026a7c:	da000404 	addi	r8,sp,16
 1026a80:	db013317 	ldw	r12,1228(sp)
 1026a84:	dac13117 	ldw	r11,1220(sp)
 1026a88:	10800044 	addi	r2,r2,1
 1026a8c:	60c7883a 	add	r3,r12,r3
 1026a90:	42c00015 	stw	r11,0(r8)
 1026a94:	43000115 	stw	r12,4(r8)
 1026a98:	d8c12015 	stw	r3,1152(sp)
 1026a9c:	d8811f15 	stw	r2,1148(sp)
 1026aa0:	010001c4 	movi	r4,7
 1026aa4:	20bb590e 	bge	r4,r2,102580c <_gp+0xfffe7b88>
 1026aa8:	003d7e06 	br	10260a4 <_gp+0xfffe8420>
 1026aac:	010040f4 	movhi	r4,259
 1026ab0:	21100584 	addi	r4,r4,16406
 1026ab4:	d9013615 	stw	r4,1240(sp)
 1026ab8:	003af606 	br	1025694 <_gp+0xfffe7a10>
 1026abc:	d8812604 	addi	r2,sp,1176
 1026ac0:	d8800115 	stw	r2,4(sp)
 1026ac4:	d9413717 	ldw	r5,1244(sp)
 1026ac8:	d8812504 	addi	r2,sp,1172
 1026acc:	d8800215 	stw	r2,8(sp)
 1026ad0:	d8812104 	addi	r2,sp,1156
 1026ad4:	da400015 	stw	r9,0(sp)
 1026ad8:	d8800315 	stw	r2,12(sp)
 1026adc:	b009883a 	mov	r4,r22
 1026ae0:	900d883a 	mov	r6,r18
 1026ae4:	01c000c4 	movi	r7,3
 1026ae8:	da013f15 	stw	r8,1276(sp)
 1026aec:	da413e15 	stw	r9,1272(sp)
 1026af0:	10273f40 	call	10273f4 <_dtoa_r>
 1026af4:	da413e17 	ldw	r9,1272(sp)
 1026af8:	da013f17 	ldw	r8,1276(sp)
 1026afc:	d8813115 	stw	r2,1220(sp)
 1026b00:	4839883a 	mov	fp,r9
 1026b04:	dac13117 	ldw	r11,1220(sp)
 1026b08:	00801184 	movi	r2,70
 1026b0c:	5f15883a 	add	r10,r11,fp
 1026b10:	a8bef01e 	bne	r21,r2,10266d4 <_gp+0xfffe8a50>
 1026b14:	59000007 	ldb	r4,0(r11)
 1026b18:	00800c04 	movi	r2,48
 1026b1c:	2080e026 	beq	r4,r2,1026ea0 <___vfprintf_internal_r+0x1f2c>
 1026b20:	d8c12617 	ldw	r3,1176(sp)
 1026b24:	50d5883a 	add	r10,r10,r3
 1026b28:	003eea06 	br	10266d4 <_gp+0xfffe8a50>
 1026b2c:	0025883a 	mov	r18,zero
 1026b30:	003db306 	br	1026200 <_gp+0xfffe857c>
 1026b34:	b009883a 	mov	r4,r22
 1026b38:	b80b883a 	mov	r5,r23
 1026b3c:	d9811e04 	addi	r6,sp,1144
 1026b40:	102d51c0 	call	102d51c <__sprint_r>
 1026b44:	103a221e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026b48:	d8c12017 	ldw	r3,1152(sp)
 1026b4c:	da000404 	addi	r8,sp,16
 1026b50:	003daa06 	br	10261fc <_gp+0xfffe8578>
 1026b54:	b009883a 	mov	r4,r22
 1026b58:	b80b883a 	mov	r5,r23
 1026b5c:	d9811e04 	addi	r6,sp,1144
 1026b60:	102d51c0 	call	102d51c <__sprint_r>
 1026b64:	103a1a1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026b68:	d8812617 	ldw	r2,1176(sp)
 1026b6c:	d8c12017 	ldw	r3,1152(sp)
 1026b70:	da000404 	addi	r8,sp,16
 1026b74:	003e2c06 	br	1026428 <_gp+0xfffe87a4>
 1026b78:	030040f4 	movhi	r12,259
 1026b7c:	63100184 	addi	r12,r12,16390
 1026b80:	db012c15 	stw	r12,1200(sp)
 1026b84:	dac12c17 	ldw	r11,1200(sp)
 1026b88:	1c07883a 	add	r3,r3,r16
 1026b8c:	10800044 	addi	r2,r2,1
 1026b90:	42c00015 	stw	r11,0(r8)
 1026b94:	44000115 	stw	r16,4(r8)
 1026b98:	d8c12015 	stw	r3,1152(sp)
 1026b9c:	d8811f15 	stw	r2,1148(sp)
 1026ba0:	010001c4 	movi	r4,7
 1026ba4:	20bfae16 	blt	r4,r2,1026a60 <_gp+0xfffe8ddc>
 1026ba8:	42000204 	addi	r8,r8,8
 1026bac:	003fb406 	br	1026a80 <_gp+0xfffe8dfc>
 1026bb0:	030040f4 	movhi	r12,259
 1026bb4:	63100584 	addi	r12,r12,16406
 1026bb8:	db013615 	stw	r12,1240(sp)
 1026bbc:	003b3806 	br	10258a0 <_gp+0xfffe7c1c>
 1026bc0:	b009883a 	mov	r4,r22
 1026bc4:	b80b883a 	mov	r5,r23
 1026bc8:	d9811e04 	addi	r6,sp,1144
 1026bcc:	102d51c0 	call	102d51c <__sprint_r>
 1026bd0:	1039ff1e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026bd4:	d8812617 	ldw	r2,1176(sp)
 1026bd8:	db013317 	ldw	r12,1228(sp)
 1026bdc:	d8c12017 	ldw	r3,1152(sp)
 1026be0:	da000404 	addi	r8,sp,16
 1026be4:	6085c83a 	sub	r2,r12,r2
 1026be8:	003e2006 	br	102646c <_gp+0xfffe87e8>
 1026bec:	0021883a 	mov	r16,zero
 1026bf0:	003e1f06 	br	1026470 <_gp+0xfffe87ec>
 1026bf4:	00800184 	movi	r2,6
 1026bf8:	1240012e 	bgeu	r2,r9,1026c00 <___vfprintf_internal_r+0x1c8c>
 1026bfc:	1013883a 	mov	r9,r2
 1026c00:	4825883a 	mov	r18,r9
 1026c04:	4805883a 	mov	r2,r9
 1026c08:	48009e16 	blt	r9,zero,1026e84 <___vfprintf_internal_r+0x1f10>
 1026c0c:	d8812b15 	stw	r2,1196(sp)
 1026c10:	008040f4 	movhi	r2,259
 1026c14:	108ff704 	addi	r2,r2,16348
 1026c18:	d8813115 	stw	r2,1220(sp)
 1026c1c:	dcc12d15 	stw	r19,1204(sp)
 1026c20:	d8013215 	stw	zero,1224(sp)
 1026c24:	d8013415 	stw	zero,1232(sp)
 1026c28:	0005883a 	mov	r2,zero
 1026c2c:	003a6c06 	br	10255e0 <_gp+0xfffe795c>
 1026c30:	008040f4 	movhi	r2,259
 1026c34:	108fec04 	addi	r2,r2,16304
 1026c38:	d8813115 	stw	r2,1220(sp)
 1026c3c:	003f4c06 	br	1026970 <_gp+0xfffe8cec>
 1026c40:	00c00b44 	movi	r3,45
 1026c44:	d8812b15 	stw	r2,1196(sp)
 1026c48:	dc412d17 	ldw	r17,1204(sp)
 1026c4c:	d8c12785 	stb	r3,1182(sp)
 1026c50:	dcc12d15 	stw	r19,1204(sp)
 1026c54:	d8013215 	stw	zero,1224(sp)
 1026c58:	00800b44 	movi	r2,45
 1026c5c:	003a5d06 	br	10255d4 <_gp+0xfffe7950>
 1026c60:	d8c12617 	ldw	r3,1176(sp)
 1026c64:	00bfff44 	movi	r2,-3
 1026c68:	18800d16 	blt	r3,r2,1026ca0 <___vfprintf_internal_r+0x1d2c>
 1026c6c:	48c00c16 	blt	r9,r3,1026ca0 <___vfprintf_internal_r+0x1d2c>
 1026c70:	d8c13415 	stw	r3,1232(sp)
 1026c74:	040019c4 	movi	r16,103
 1026c78:	003eb506 	br	1026750 <_gp+0xfffe8acc>
 1026c7c:	05400b44 	movi	r21,45
 1026c80:	dd412785 	stb	r21,1182(sp)
 1026c84:	003a0f06 	br	10254c4 <_gp+0xfffe7840>
 1026c88:	010040f4 	movhi	r4,259
 1026c8c:	21100184 	addi	r4,r4,16390
 1026c90:	d9012c15 	stw	r4,1200(sp)
 1026c94:	003cb106 	br	1025f5c <_gp+0xfffe82d8>
 1026c98:	5005883a 	mov	r2,r10
 1026c9c:	003ea106 	br	1026724 <_gp+0xfffe8aa0>
 1026ca0:	843fff84 	addi	r16,r16,-2
 1026ca4:	1f3fffc4 	addi	fp,r3,-1
 1026ca8:	df012615 	stw	fp,1176(sp)
 1026cac:	dc0122c5 	stb	r16,1163(sp)
 1026cb0:	e0009516 	blt	fp,zero,1026f08 <___vfprintf_internal_r+0x1f94>
 1026cb4:	00800ac4 	movi	r2,43
 1026cb8:	d8812305 	stb	r2,1164(sp)
 1026cbc:	00800244 	movi	r2,9
 1026cc0:	1700690e 	bge	r2,fp,1026e68 <___vfprintf_internal_r+0x1ef4>
 1026cc4:	dd4122c4 	addi	r21,sp,1163
 1026cc8:	dc012c15 	stw	r16,1200(sp)
 1026ccc:	8825883a 	mov	r18,r17
 1026cd0:	a821883a 	mov	r16,r21
 1026cd4:	4023883a 	mov	r17,r8
 1026cd8:	e009883a 	mov	r4,fp
 1026cdc:	01400284 	movi	r5,10
 1026ce0:	10218940 	call	1021894 <__modsi3>
 1026ce4:	10800c04 	addi	r2,r2,48
 1026ce8:	843fffc4 	addi	r16,r16,-1
 1026cec:	e009883a 	mov	r4,fp
 1026cf0:	01400284 	movi	r5,10
 1026cf4:	80800005 	stb	r2,0(r16)
 1026cf8:	10218400 	call	1021840 <__divsi3>
 1026cfc:	1039883a 	mov	fp,r2
 1026d00:	00800244 	movi	r2,9
 1026d04:	173ff416 	blt	r2,fp,1026cd8 <_gp+0xfffe9054>
 1026d08:	8811883a 	mov	r8,r17
 1026d0c:	e0800c04 	addi	r2,fp,48
 1026d10:	9023883a 	mov	r17,r18
 1026d14:	8025883a 	mov	r18,r16
 1026d18:	913fffc4 	addi	r4,r18,-1
 1026d1c:	90bfffc5 	stb	r2,-1(r18)
 1026d20:	dc012c17 	ldw	r16,1200(sp)
 1026d24:	25408e2e 	bgeu	r4,r21,1026f60 <___vfprintf_internal_r+0x1fec>
 1026d28:	d9412384 	addi	r5,sp,1166
 1026d2c:	2c8bc83a 	sub	r5,r5,r18
 1026d30:	d8c12344 	addi	r3,sp,1165
 1026d34:	a94b883a 	add	r5,r21,r5
 1026d38:	00000106 	br	1026d40 <___vfprintf_internal_r+0x1dcc>
 1026d3c:	20800003 	ldbu	r2,0(r4)
 1026d40:	18800005 	stb	r2,0(r3)
 1026d44:	18c00044 	addi	r3,r3,1
 1026d48:	21000044 	addi	r4,r4,1
 1026d4c:	197ffb1e 	bne	r3,r5,1026d3c <_gp+0xfffe90b8>
 1026d50:	d8812304 	addi	r2,sp,1164
 1026d54:	1485c83a 	sub	r2,r2,r18
 1026d58:	d8c12344 	addi	r3,sp,1165
 1026d5c:	1885883a 	add	r2,r3,r2
 1026d60:	dac13317 	ldw	r11,1228(sp)
 1026d64:	156bc83a 	sub	r21,r2,r21
 1026d68:	dd413a15 	stw	r21,1256(sp)
 1026d6c:	00800044 	movi	r2,1
 1026d70:	5d65883a 	add	r18,r11,r21
 1026d74:	12c0770e 	bge	r2,r11,1026f54 <___vfprintf_internal_r+0x1fe0>
 1026d78:	94800044 	addi	r18,r18,1
 1026d7c:	9005883a 	mov	r2,r18
 1026d80:	90007216 	blt	r18,zero,1026f4c <___vfprintf_internal_r+0x1fd8>
 1026d84:	d8013415 	stw	zero,1232(sp)
 1026d88:	003e7906 	br	1026770 <_gp+0xfffe8aec>
 1026d8c:	da412b15 	stw	r9,1196(sp)
 1026d90:	dd412783 	ldbu	r21,1182(sp)
 1026d94:	4825883a 	mov	r18,r9
 1026d98:	dcc12d15 	stw	r19,1204(sp)
 1026d9c:	d8013215 	stw	zero,1224(sp)
 1026da0:	d8013415 	stw	zero,1232(sp)
 1026da4:	003a0706 	br	10255c4 <_gp+0xfffe7940>
 1026da8:	b009883a 	mov	r4,r22
 1026dac:	b80b883a 	mov	r5,r23
 1026db0:	d9811e04 	addi	r6,sp,1144
 1026db4:	102d51c0 	call	102d51c <__sprint_r>
 1026db8:	1039851e 	bne	r2,zero,10253d0 <_gp+0xfffe774c>
 1026dbc:	dc012617 	ldw	r16,1176(sp)
 1026dc0:	d8c12017 	ldw	r3,1152(sp)
 1026dc4:	d8811f17 	ldw	r2,1148(sp)
 1026dc8:	da000404 	addi	r8,sp,16
 1026dcc:	003ec706 	br	10268ec <_gp+0xfffe8c68>
 1026dd0:	483e1a1e 	bne	r9,zero,102663c <_gp+0xfffe89b8>
 1026dd4:	9013883a 	mov	r9,r18
 1026dd8:	003e1806 	br	102663c <_gp+0xfffe89b8>
 1026ddc:	00c00b44 	movi	r3,45
 1026de0:	64a0003c 	xorhi	r18,r12,32768
 1026de4:	d8c12b05 	stb	r3,1196(sp)
 1026de8:	003e1a06 	br	1026654 <_gp+0xfffe89d0>
 1026dec:	4f000044 	addi	fp,r9,1
 1026df0:	003e1f06 	br	1026670 <_gp+0xfffe89ec>
 1026df4:	02400184 	movi	r9,6
 1026df8:	003e1006 	br	102663c <_gp+0xfffe89b8>
 1026dfc:	d8c13417 	ldw	r3,1232(sp)
 1026e00:	00c04b0e 	bge	zero,r3,1026f30 <___vfprintf_internal_r+0x1fbc>
 1026e04:	04800044 	movi	r18,1
 1026e08:	dac13317 	ldw	r11,1228(sp)
 1026e0c:	92e5883a 	add	r18,r18,r11
 1026e10:	9005883a 	mov	r2,r18
 1026e14:	903e560e 	bge	r18,zero,1026770 <_gp+0xfffe8aec>
 1026e18:	0005883a 	mov	r2,zero
 1026e1c:	003e5406 	br	1026770 <_gp+0xfffe8aec>
 1026e20:	d8c12617 	ldw	r3,1176(sp)
 1026e24:	d8c13415 	stw	r3,1232(sp)
 1026e28:	00c03b0e 	bge	zero,r3,1026f18 <___vfprintf_internal_r+0x1fa4>
 1026e2c:	4800081e 	bne	r9,zero,1026e50 <___vfprintf_internal_r+0x1edc>
 1026e30:	8c40004c 	andi	r17,r17,1
 1026e34:	8800061e 	bne	r17,zero,1026e50 <___vfprintf_internal_r+0x1edc>
 1026e38:	1805883a 	mov	r2,r3
 1026e3c:	183e4b0e 	bge	r3,zero,102676c <_gp+0xfffe8ae8>
 1026e40:	0005883a 	mov	r2,zero
 1026e44:	003e4906 	br	102676c <_gp+0xfffe8ae8>
 1026e48:	d8812117 	ldw	r2,1156(sp)
 1026e4c:	003e3506 	br	1026724 <_gp+0xfffe8aa0>
 1026e50:	dac13417 	ldw	r11,1232(sp)
 1026e54:	4a400044 	addi	r9,r9,1
 1026e58:	5a65883a 	add	r18,r11,r9
 1026e5c:	9005883a 	mov	r2,r18
 1026e60:	903e430e 	bge	r18,zero,1026770 <_gp+0xfffe8aec>
 1026e64:	003fec06 	br	1026e18 <_gp+0xfffe9194>
 1026e68:	00800c04 	movi	r2,48
 1026e6c:	e0c00c04 	addi	r3,fp,48
 1026e70:	d8812345 	stb	r2,1165(sp)
 1026e74:	d8c12385 	stb	r3,1166(sp)
 1026e78:	d88123c4 	addi	r2,sp,1167
 1026e7c:	dd4122c4 	addi	r21,sp,1163
 1026e80:	003fb706 	br	1026d60 <_gp+0xfffe90dc>
 1026e84:	0005883a 	mov	r2,zero
 1026e88:	003f6006 	br	1026c0c <_gp+0xfffe8f88>
 1026e8c:	db013417 	ldw	r12,1232(sp)
 1026e90:	64800044 	addi	r18,r12,1
 1026e94:	9005883a 	mov	r2,r18
 1026e98:	903e350e 	bge	r18,zero,1026770 <_gp+0xfffe8aec>
 1026e9c:	003fde06 	br	1026e18 <_gp+0xfffe9194>
 1026ea0:	d9013717 	ldw	r4,1244(sp)
 1026ea4:	900b883a 	mov	r5,r18
 1026ea8:	000d883a 	mov	r6,zero
 1026eac:	000f883a 	mov	r7,zero
 1026eb0:	da013f15 	stw	r8,1276(sp)
 1026eb4:	da413e15 	stw	r9,1272(sp)
 1026eb8:	da813d15 	stw	r10,1268(sp)
 1026ebc:	10305d80 	call	10305d8 <__eqdf2>
 1026ec0:	da013f17 	ldw	r8,1276(sp)
 1026ec4:	da413e17 	ldw	r9,1272(sp)
 1026ec8:	da813d17 	ldw	r10,1268(sp)
 1026ecc:	103f1426 	beq	r2,zero,1026b20 <_gp+0xfffe8e9c>
 1026ed0:	00800044 	movi	r2,1
 1026ed4:	1707c83a 	sub	r3,r2,fp
 1026ed8:	d8c12615 	stw	r3,1176(sp)
 1026edc:	003f1106 	br	1026b24 <_gp+0xfffe8ea0>
 1026ee0:	dac12d17 	ldw	r11,1204(sp)
 1026ee4:	5a400017 	ldw	r9,0(r11)
 1026ee8:	5ac00104 	addi	r11,r11,4
 1026eec:	dac12d15 	stw	r11,1204(sp)
 1026ef0:	483ec60e 	bge	r9,zero,1026a0c <_gp+0xfffe8d88>
 1026ef4:	027fffc4 	movi	r9,-1
 1026ef8:	1c000047 	ldb	r16,1(r3)
 1026efc:	00388406 	br	1025110 <_gp+0xfffe748c>
 1026f00:	043fffc4 	movi	r16,-1
 1026f04:	00391006 	br	1025348 <_gp+0xfffe76c4>
 1026f08:	00800b44 	movi	r2,45
 1026f0c:	0739c83a 	sub	fp,zero,fp
 1026f10:	d8812305 	stb	r2,1164(sp)
 1026f14:	003f6906 	br	1026cbc <_gp+0xfffe9038>
 1026f18:	4800081e 	bne	r9,zero,1026f3c <___vfprintf_internal_r+0x1fc8>
 1026f1c:	8c40004c 	andi	r17,r17,1
 1026f20:	8800061e 	bne	r17,zero,1026f3c <___vfprintf_internal_r+0x1fc8>
 1026f24:	00800044 	movi	r2,1
 1026f28:	1025883a 	mov	r18,r2
 1026f2c:	003e1006 	br	1026770 <_gp+0xfffe8aec>
 1026f30:	04800084 	movi	r18,2
 1026f34:	90e5c83a 	sub	r18,r18,r3
 1026f38:	003fb306 	br	1026e08 <_gp+0xfffe9184>
 1026f3c:	4c800084 	addi	r18,r9,2
 1026f40:	9005883a 	mov	r2,r18
 1026f44:	903e0a0e 	bge	r18,zero,1026770 <_gp+0xfffe8aec>
 1026f48:	003fb306 	br	1026e18 <_gp+0xfffe9194>
 1026f4c:	0005883a 	mov	r2,zero
 1026f50:	003f8c06 	br	1026d84 <_gp+0xfffe9100>
 1026f54:	88a2703a 	and	r17,r17,r2
 1026f58:	883f8826 	beq	r17,zero,1026d7c <_gp+0xfffe90f8>
 1026f5c:	003f8606 	br	1026d78 <_gp+0xfffe90f4>
 1026f60:	d8812344 	addi	r2,sp,1165
 1026f64:	003f7e06 	br	1026d60 <_gp+0xfffe90dc>
 1026f68:	d8c12617 	ldw	r3,1176(sp)
 1026f6c:	003f4d06 	br	1026ca4 <_gp+0xfffe9020>

01026f70 <__vfprintf_internal>:
 1026f70:	2007883a 	mov	r3,r4
 1026f74:	010040f4 	movhi	r4,259
 1026f78:	21172204 	addi	r4,r4,23688
 1026f7c:	21000017 	ldw	r4,0(r4)
 1026f80:	2805883a 	mov	r2,r5
 1026f84:	300f883a 	mov	r7,r6
 1026f88:	180b883a 	mov	r5,r3
 1026f8c:	100d883a 	mov	r6,r2
 1026f90:	1024f741 	jmpi	1024f74 <___vfprintf_internal_r>

01026f94 <_vsnprintf_r>:
 1026f94:	3005883a 	mov	r2,r6
 1026f98:	30003616 	blt	r6,zero,1027074 <_vsnprintf_r+0xe0>
 1026f9c:	deffe404 	addi	sp,sp,-112
 1026fa0:	00c08204 	movi	r3,520
 1026fa4:	dc001a15 	stw	r16,104(sp)
 1026fa8:	dfc01b15 	stw	ra,108(sp)
 1026fac:	d8c0030d 	sth	r3,12(sp)
 1026fb0:	d9400015 	stw	r5,0(sp)
 1026fb4:	d9400415 	stw	r5,16(sp)
 1026fb8:	380d883a 	mov	r6,r7
 1026fbc:	2021883a 	mov	r16,r4
 1026fc0:	10001326 	beq	r2,zero,1027010 <_vsnprintf_r+0x7c>
 1026fc4:	00c040f4 	movhi	r3,259
 1026fc8:	18d72204 	addi	r3,r3,23688
 1026fcc:	19000017 	ldw	r4,0(r3)
 1026fd0:	d9c01c17 	ldw	r7,112(sp)
 1026fd4:	10bfffc4 	addi	r2,r2,-1
 1026fd8:	d8800215 	stw	r2,8(sp)
 1026fdc:	d8800515 	stw	r2,20(sp)
 1026fe0:	d80b883a 	mov	r5,sp
 1026fe4:	00bfffc4 	movi	r2,-1
 1026fe8:	d880038d 	sth	r2,14(sp)
 1026fec:	1022fe40 	call	1022fe4 <___svfprintf_internal_r>
 1026ff0:	00ffffc4 	movi	r3,-1
 1026ff4:	10c01c16 	blt	r2,r3,1027068 <_vsnprintf_r+0xd4>
 1026ff8:	d8c00017 	ldw	r3,0(sp)
 1026ffc:	18000005 	stb	zero,0(r3)
 1027000:	dfc01b17 	ldw	ra,108(sp)
 1027004:	dc001a17 	ldw	r16,104(sp)
 1027008:	dec01c04 	addi	sp,sp,112
 102700c:	f800283a 	ret
 1027010:	008040f4 	movhi	r2,259
 1027014:	10972204 	addi	r2,r2,23688
 1027018:	11000017 	ldw	r4,0(r2)
 102701c:	d9c01c17 	ldw	r7,112(sp)
 1027020:	00bfffc4 	movi	r2,-1
 1027024:	d80b883a 	mov	r5,sp
 1027028:	d8000215 	stw	zero,8(sp)
 102702c:	d8000515 	stw	zero,20(sp)
 1027030:	d880038d 	sth	r2,14(sp)
 1027034:	1022fe40 	call	1022fe4 <___svfprintf_internal_r>
 1027038:	00ffffc4 	movi	r3,-1
 102703c:	10c00416 	blt	r2,r3,1027050 <_vsnprintf_r+0xbc>
 1027040:	dfc01b17 	ldw	ra,108(sp)
 1027044:	dc001a17 	ldw	r16,104(sp)
 1027048:	dec01c04 	addi	sp,sp,112
 102704c:	f800283a 	ret
 1027050:	00c022c4 	movi	r3,139
 1027054:	80c00015 	stw	r3,0(r16)
 1027058:	dfc01b17 	ldw	ra,108(sp)
 102705c:	dc001a17 	ldw	r16,104(sp)
 1027060:	dec01c04 	addi	sp,sp,112
 1027064:	f800283a 	ret
 1027068:	00c022c4 	movi	r3,139
 102706c:	80c00015 	stw	r3,0(r16)
 1027070:	003fe106 	br	1026ff8 <_gp+0xfffe9374>
 1027074:	008022c4 	movi	r2,139
 1027078:	20800015 	stw	r2,0(r4)
 102707c:	00bfffc4 	movi	r2,-1
 1027080:	f800283a 	ret

01027084 <vsnprintf>:
 1027084:	008040f4 	movhi	r2,259
 1027088:	10972204 	addi	r2,r2,23688
 102708c:	2011883a 	mov	r8,r4
 1027090:	11000017 	ldw	r4,0(r2)
 1027094:	defffe04 	addi	sp,sp,-8
 1027098:	2807883a 	mov	r3,r5
 102709c:	3005883a 	mov	r2,r6
 10270a0:	d9c00015 	stw	r7,0(sp)
 10270a4:	400b883a 	mov	r5,r8
 10270a8:	180d883a 	mov	r6,r3
 10270ac:	100f883a 	mov	r7,r2
 10270b0:	dfc00115 	stw	ra,4(sp)
 10270b4:	1026f940 	call	1026f94 <_vsnprintf_r>
 10270b8:	dfc00117 	ldw	ra,4(sp)
 10270bc:	dec00204 	addi	sp,sp,8
 10270c0:	f800283a 	ret

010270c4 <__swsetup_r>:
 10270c4:	008040f4 	movhi	r2,259
 10270c8:	defffd04 	addi	sp,sp,-12
 10270cc:	10972204 	addi	r2,r2,23688
 10270d0:	dc400115 	stw	r17,4(sp)
 10270d4:	2023883a 	mov	r17,r4
 10270d8:	11000017 	ldw	r4,0(r2)
 10270dc:	dc000015 	stw	r16,0(sp)
 10270e0:	dfc00215 	stw	ra,8(sp)
 10270e4:	2821883a 	mov	r16,r5
 10270e8:	20000226 	beq	r4,zero,10270f4 <__swsetup_r+0x30>
 10270ec:	20c00e17 	ldw	r3,56(r4)
 10270f0:	18002e26 	beq	r3,zero,10271ac <__swsetup_r+0xe8>
 10270f4:	8080030b 	ldhu	r2,12(r16)
 10270f8:	10c0020c 	andi	r3,r2,8
 10270fc:	100d883a 	mov	r6,r2
 1027100:	18000f26 	beq	r3,zero,1027140 <__swsetup_r+0x7c>
 1027104:	80c00417 	ldw	r3,16(r16)
 1027108:	18001526 	beq	r3,zero,1027160 <__swsetup_r+0x9c>
 102710c:	1100004c 	andi	r4,r2,1
 1027110:	20001c1e 	bne	r4,zero,1027184 <__swsetup_r+0xc0>
 1027114:	1080008c 	andi	r2,r2,2
 1027118:	1000261e 	bne	r2,zero,10271b4 <__swsetup_r+0xf0>
 102711c:	80800517 	ldw	r2,20(r16)
 1027120:	80800215 	stw	r2,8(r16)
 1027124:	18001c26 	beq	r3,zero,1027198 <__swsetup_r+0xd4>
 1027128:	0005883a 	mov	r2,zero
 102712c:	dfc00217 	ldw	ra,8(sp)
 1027130:	dc400117 	ldw	r17,4(sp)
 1027134:	dc000017 	ldw	r16,0(sp)
 1027138:	dec00304 	addi	sp,sp,12
 102713c:	f800283a 	ret
 1027140:	3080040c 	andi	r2,r6,16
 1027144:	10001726 	beq	r2,zero,10271a4 <__swsetup_r+0xe0>
 1027148:	3080010c 	andi	r2,r6,4
 102714c:	10001b1e 	bne	r2,zero,10271bc <__swsetup_r+0xf8>
 1027150:	80c00417 	ldw	r3,16(r16)
 1027154:	30800214 	ori	r2,r6,8
 1027158:	8080030d 	sth	r2,12(r16)
 102715c:	183feb1e 	bne	r3,zero,102710c <_gp+0xfffe9488>
 1027160:	1140a00c 	andi	r5,r2,640
 1027164:	01008004 	movi	r4,512
 1027168:	293fe826 	beq	r5,r4,102710c <_gp+0xfffe9488>
 102716c:	8809883a 	mov	r4,r17
 1027170:	800b883a 	mov	r5,r16
 1027174:	1029c1c0 	call	1029c1c <__smakebuf_r>
 1027178:	8080030b 	ldhu	r2,12(r16)
 102717c:	80c00417 	ldw	r3,16(r16)
 1027180:	003fe206 	br	102710c <_gp+0xfffe9488>
 1027184:	80800517 	ldw	r2,20(r16)
 1027188:	80000215 	stw	zero,8(r16)
 102718c:	0085c83a 	sub	r2,zero,r2
 1027190:	80800615 	stw	r2,24(r16)
 1027194:	183fe41e 	bne	r3,zero,1027128 <_gp+0xfffe94a4>
 1027198:	8080030b 	ldhu	r2,12(r16)
 102719c:	1080200c 	andi	r2,r2,128
 10271a0:	103fe226 	beq	r2,zero,102712c <_gp+0xfffe94a8>
 10271a4:	00bfffc4 	movi	r2,-1
 10271a8:	003fe006 	br	102712c <_gp+0xfffe94a8>
 10271ac:	10290c40 	call	10290c4 <__sinit>
 10271b0:	003fd006 	br	10270f4 <_gp+0xfffe9470>
 10271b4:	0005883a 	mov	r2,zero
 10271b8:	003fd906 	br	1027120 <_gp+0xfffe949c>
 10271bc:	81400c17 	ldw	r5,48(r16)
 10271c0:	28000626 	beq	r5,zero,10271dc <__swsetup_r+0x118>
 10271c4:	80801004 	addi	r2,r16,64
 10271c8:	28800326 	beq	r5,r2,10271d8 <__swsetup_r+0x114>
 10271cc:	8809883a 	mov	r4,r17
 10271d0:	10292380 	call	1029238 <_free_r>
 10271d4:	8180030b 	ldhu	r6,12(r16)
 10271d8:	80000c15 	stw	zero,48(r16)
 10271dc:	80c00417 	ldw	r3,16(r16)
 10271e0:	00bff6c4 	movi	r2,-37
 10271e4:	118c703a 	and	r6,r2,r6
 10271e8:	80000115 	stw	zero,4(r16)
 10271ec:	80c00015 	stw	r3,0(r16)
 10271f0:	003fd806 	br	1027154 <_gp+0xfffe94d0>

010271f4 <quorem>:
 10271f4:	defff704 	addi	sp,sp,-36
 10271f8:	dc800215 	stw	r18,8(sp)
 10271fc:	20800417 	ldw	r2,16(r4)
 1027200:	2c800417 	ldw	r18,16(r5)
 1027204:	dfc00815 	stw	ra,32(sp)
 1027208:	ddc00715 	stw	r23,28(sp)
 102720c:	dd800615 	stw	r22,24(sp)
 1027210:	dd400515 	stw	r21,20(sp)
 1027214:	dd000415 	stw	r20,16(sp)
 1027218:	dcc00315 	stw	r19,12(sp)
 102721c:	dc400115 	stw	r17,4(sp)
 1027220:	dc000015 	stw	r16,0(sp)
 1027224:	14807116 	blt	r2,r18,10273ec <quorem+0x1f8>
 1027228:	94bfffc4 	addi	r18,r18,-1
 102722c:	94ad883a 	add	r22,r18,r18
 1027230:	b5ad883a 	add	r22,r22,r22
 1027234:	2c400504 	addi	r17,r5,20
 1027238:	8da9883a 	add	r20,r17,r22
 102723c:	25400504 	addi	r21,r4,20
 1027240:	282f883a 	mov	r23,r5
 1027244:	adad883a 	add	r22,r21,r22
 1027248:	a1400017 	ldw	r5,0(r20)
 102724c:	2021883a 	mov	r16,r4
 1027250:	b1000017 	ldw	r4,0(r22)
 1027254:	29400044 	addi	r5,r5,1
 1027258:	10218f00 	call	10218f0 <__udivsi3>
 102725c:	1027883a 	mov	r19,r2
 1027260:	10002c26 	beq	r2,zero,1027314 <quorem+0x120>
 1027264:	a813883a 	mov	r9,r21
 1027268:	8811883a 	mov	r8,r17
 102726c:	0009883a 	mov	r4,zero
 1027270:	000d883a 	mov	r6,zero
 1027274:	41c00017 	ldw	r7,0(r8)
 1027278:	49400017 	ldw	r5,0(r9)
 102727c:	42000104 	addi	r8,r8,4
 1027280:	38bfffcc 	andi	r2,r7,65535
 1027284:	14c5383a 	mul	r2,r2,r19
 1027288:	380ed43a 	srli	r7,r7,16
 102728c:	28ffffcc 	andi	r3,r5,65535
 1027290:	2085883a 	add	r2,r4,r2
 1027294:	1008d43a 	srli	r4,r2,16
 1027298:	3ccf383a 	mul	r7,r7,r19
 102729c:	198d883a 	add	r6,r3,r6
 10272a0:	10ffffcc 	andi	r3,r2,65535
 10272a4:	30c7c83a 	sub	r3,r6,r3
 10272a8:	280ad43a 	srli	r5,r5,16
 10272ac:	21c9883a 	add	r4,r4,r7
 10272b0:	180dd43a 	srai	r6,r3,16
 10272b4:	20bfffcc 	andi	r2,r4,65535
 10272b8:	288bc83a 	sub	r5,r5,r2
 10272bc:	298b883a 	add	r5,r5,r6
 10272c0:	280e943a 	slli	r7,r5,16
 10272c4:	18ffffcc 	andi	r3,r3,65535
 10272c8:	2008d43a 	srli	r4,r4,16
 10272cc:	38ceb03a 	or	r7,r7,r3
 10272d0:	49c00015 	stw	r7,0(r9)
 10272d4:	280dd43a 	srai	r6,r5,16
 10272d8:	4a400104 	addi	r9,r9,4
 10272dc:	a23fe52e 	bgeu	r20,r8,1027274 <_gp+0xfffe95f0>
 10272e0:	b0800017 	ldw	r2,0(r22)
 10272e4:	10000b1e 	bne	r2,zero,1027314 <quorem+0x120>
 10272e8:	b0bfff04 	addi	r2,r22,-4
 10272ec:	a880082e 	bgeu	r21,r2,1027310 <quorem+0x11c>
 10272f0:	b0ffff17 	ldw	r3,-4(r22)
 10272f4:	18000326 	beq	r3,zero,1027304 <quorem+0x110>
 10272f8:	00000506 	br	1027310 <quorem+0x11c>
 10272fc:	10c00017 	ldw	r3,0(r2)
 1027300:	1800031e 	bne	r3,zero,1027310 <quorem+0x11c>
 1027304:	10bfff04 	addi	r2,r2,-4
 1027308:	94bfffc4 	addi	r18,r18,-1
 102730c:	a8bffb36 	bltu	r21,r2,10272fc <_gp+0xfffe9678>
 1027310:	84800415 	stw	r18,16(r16)
 1027314:	8009883a 	mov	r4,r16
 1027318:	b80b883a 	mov	r5,r23
 102731c:	102b2dc0 	call	102b2dc <__mcmp>
 1027320:	10002616 	blt	r2,zero,10273bc <quorem+0x1c8>
 1027324:	9cc00044 	addi	r19,r19,1
 1027328:	a80d883a 	mov	r6,r21
 102732c:	000b883a 	mov	r5,zero
 1027330:	31000017 	ldw	r4,0(r6)
 1027334:	88800017 	ldw	r2,0(r17)
 1027338:	31800104 	addi	r6,r6,4
 102733c:	20ffffcc 	andi	r3,r4,65535
 1027340:	194b883a 	add	r5,r3,r5
 1027344:	10ffffcc 	andi	r3,r2,65535
 1027348:	28c7c83a 	sub	r3,r5,r3
 102734c:	1004d43a 	srli	r2,r2,16
 1027350:	2008d43a 	srli	r4,r4,16
 1027354:	180bd43a 	srai	r5,r3,16
 1027358:	18ffffcc 	andi	r3,r3,65535
 102735c:	2089c83a 	sub	r4,r4,r2
 1027360:	2149883a 	add	r4,r4,r5
 1027364:	2004943a 	slli	r2,r4,16
 1027368:	8c400104 	addi	r17,r17,4
 102736c:	200bd43a 	srai	r5,r4,16
 1027370:	10c6b03a 	or	r3,r2,r3
 1027374:	30ffff15 	stw	r3,-4(r6)
 1027378:	a47fed2e 	bgeu	r20,r17,1027330 <_gp+0xfffe96ac>
 102737c:	9485883a 	add	r2,r18,r18
 1027380:	1085883a 	add	r2,r2,r2
 1027384:	a887883a 	add	r3,r21,r2
 1027388:	18800017 	ldw	r2,0(r3)
 102738c:	10000b1e 	bne	r2,zero,10273bc <quorem+0x1c8>
 1027390:	18bfff04 	addi	r2,r3,-4
 1027394:	a880082e 	bgeu	r21,r2,10273b8 <quorem+0x1c4>
 1027398:	18ffff17 	ldw	r3,-4(r3)
 102739c:	18000326 	beq	r3,zero,10273ac <quorem+0x1b8>
 10273a0:	00000506 	br	10273b8 <quorem+0x1c4>
 10273a4:	10c00017 	ldw	r3,0(r2)
 10273a8:	1800031e 	bne	r3,zero,10273b8 <quorem+0x1c4>
 10273ac:	10bfff04 	addi	r2,r2,-4
 10273b0:	94bfffc4 	addi	r18,r18,-1
 10273b4:	a8bffb36 	bltu	r21,r2,10273a4 <_gp+0xfffe9720>
 10273b8:	84800415 	stw	r18,16(r16)
 10273bc:	9805883a 	mov	r2,r19
 10273c0:	dfc00817 	ldw	ra,32(sp)
 10273c4:	ddc00717 	ldw	r23,28(sp)
 10273c8:	dd800617 	ldw	r22,24(sp)
 10273cc:	dd400517 	ldw	r21,20(sp)
 10273d0:	dd000417 	ldw	r20,16(sp)
 10273d4:	dcc00317 	ldw	r19,12(sp)
 10273d8:	dc800217 	ldw	r18,8(sp)
 10273dc:	dc400117 	ldw	r17,4(sp)
 10273e0:	dc000017 	ldw	r16,0(sp)
 10273e4:	dec00904 	addi	sp,sp,36
 10273e8:	f800283a 	ret
 10273ec:	0005883a 	mov	r2,zero
 10273f0:	003ff306 	br	10273c0 <_gp+0xfffe973c>

010273f4 <_dtoa_r>:
 10273f4:	20801017 	ldw	r2,64(r4)
 10273f8:	deffde04 	addi	sp,sp,-136
 10273fc:	dd401d15 	stw	r21,116(sp)
 1027400:	dcc01b15 	stw	r19,108(sp)
 1027404:	dc801a15 	stw	r18,104(sp)
 1027408:	dc401915 	stw	r17,100(sp)
 102740c:	dc001815 	stw	r16,96(sp)
 1027410:	dfc02115 	stw	ra,132(sp)
 1027414:	df002015 	stw	fp,128(sp)
 1027418:	ddc01f15 	stw	r23,124(sp)
 102741c:	dd801e15 	stw	r22,120(sp)
 1027420:	dd001c15 	stw	r20,112(sp)
 1027424:	d9c00315 	stw	r7,12(sp)
 1027428:	2021883a 	mov	r16,r4
 102742c:	302b883a 	mov	r21,r6
 1027430:	2825883a 	mov	r18,r5
 1027434:	dc402417 	ldw	r17,144(sp)
 1027438:	3027883a 	mov	r19,r6
 102743c:	10000826 	beq	r2,zero,1027460 <_dtoa_r+0x6c>
 1027440:	21801117 	ldw	r6,68(r4)
 1027444:	00c00044 	movi	r3,1
 1027448:	100b883a 	mov	r5,r2
 102744c:	1986983a 	sll	r3,r3,r6
 1027450:	11800115 	stw	r6,4(r2)
 1027454:	10c00215 	stw	r3,8(r2)
 1027458:	102aac40 	call	102aac4 <_Bfree>
 102745c:	80001015 	stw	zero,64(r16)
 1027460:	a8002d16 	blt	r21,zero,1027518 <_dtoa_r+0x124>
 1027464:	88000015 	stw	zero,0(r17)
 1027468:	a8dffc2c 	andhi	r3,r21,32752
 102746c:	009ffc34 	movhi	r2,32752
 1027470:	18801b26 	beq	r3,r2,10274e0 <_dtoa_r+0xec>
 1027474:	9009883a 	mov	r4,r18
 1027478:	980b883a 	mov	r5,r19
 102747c:	000d883a 	mov	r6,zero
 1027480:	000f883a 	mov	r7,zero
 1027484:	10305d80 	call	10305d8 <__eqdf2>
 1027488:	10002a1e 	bne	r2,zero,1027534 <_dtoa_r+0x140>
 102748c:	d8c02317 	ldw	r3,140(sp)
 1027490:	d9002517 	ldw	r4,148(sp)
 1027494:	00800044 	movi	r2,1
 1027498:	18800015 	stw	r2,0(r3)
 102749c:	2001a226 	beq	r4,zero,1027b28 <_dtoa_r+0x734>
 10274a0:	008040f4 	movhi	r2,259
 10274a4:	108ff944 	addi	r2,r2,16357
 10274a8:	20800015 	stw	r2,0(r4)
 10274ac:	10bfffc4 	addi	r2,r2,-1
 10274b0:	dfc02117 	ldw	ra,132(sp)
 10274b4:	df002017 	ldw	fp,128(sp)
 10274b8:	ddc01f17 	ldw	r23,124(sp)
 10274bc:	dd801e17 	ldw	r22,120(sp)
 10274c0:	dd401d17 	ldw	r21,116(sp)
 10274c4:	dd001c17 	ldw	r20,112(sp)
 10274c8:	dcc01b17 	ldw	r19,108(sp)
 10274cc:	dc801a17 	ldw	r18,104(sp)
 10274d0:	dc401917 	ldw	r17,100(sp)
 10274d4:	dc001817 	ldw	r16,96(sp)
 10274d8:	dec02204 	addi	sp,sp,136
 10274dc:	f800283a 	ret
 10274e0:	d8c02317 	ldw	r3,140(sp)
 10274e4:	0089c3c4 	movi	r2,9999
 10274e8:	18800015 	stw	r2,0(r3)
 10274ec:	90017c26 	beq	r18,zero,1027ae0 <_dtoa_r+0x6ec>
 10274f0:	008040f4 	movhi	r2,259
 10274f4:	10900d04 	addi	r2,r2,16436
 10274f8:	d9002517 	ldw	r4,148(sp)
 10274fc:	203fec26 	beq	r4,zero,10274b0 <_gp+0xfffe982c>
 1027500:	10c000c7 	ldb	r3,3(r2)
 1027504:	18017d1e 	bne	r3,zero,1027afc <_dtoa_r+0x708>
 1027508:	10c000c4 	addi	r3,r2,3
 102750c:	d9802517 	ldw	r6,148(sp)
 1027510:	30c00015 	stw	r3,0(r6)
 1027514:	003fe606 	br	10274b0 <_gp+0xfffe982c>
 1027518:	04e00034 	movhi	r19,32768
 102751c:	9cffffc4 	addi	r19,r19,-1
 1027520:	00800044 	movi	r2,1
 1027524:	ace6703a 	and	r19,r21,r19
 1027528:	88800015 	stw	r2,0(r17)
 102752c:	982b883a 	mov	r21,r19
 1027530:	003fcd06 	br	1027468 <_gp+0xfffe97e4>
 1027534:	d8800204 	addi	r2,sp,8
 1027538:	a822d53a 	srli	r17,r21,20
 102753c:	d8800015 	stw	r2,0(sp)
 1027540:	8009883a 	mov	r4,r16
 1027544:	900b883a 	mov	r5,r18
 1027548:	980d883a 	mov	r6,r19
 102754c:	d9c00104 	addi	r7,sp,4
 1027550:	102b6500 	call	102b650 <__d2b>
 1027554:	1039883a 	mov	fp,r2
 1027558:	88016a1e 	bne	r17,zero,1027b04 <_dtoa_r+0x710>
 102755c:	dd000217 	ldw	r20,8(sp)
 1027560:	dc400117 	ldw	r17,4(sp)
 1027564:	00befbc4 	movi	r2,-1041
 1027568:	a463883a 	add	r17,r20,r17
 102756c:	8882ea16 	blt	r17,r2,1028118 <_dtoa_r+0xd24>
 1027570:	00bf0384 	movi	r2,-1010
 1027574:	1445c83a 	sub	r2,r2,r17
 1027578:	89010484 	addi	r4,r17,1042
 102757c:	a8aa983a 	sll	r21,r21,r2
 1027580:	9108d83a 	srl	r4,r18,r4
 1027584:	a908b03a 	or	r4,r21,r4
 1027588:	10310ec0 	call	10310ec <__floatunsidf>
 102758c:	017f8434 	movhi	r5,65040
 1027590:	01800044 	movi	r6,1
 1027594:	1009883a 	mov	r4,r2
 1027598:	194b883a 	add	r5,r3,r5
 102759c:	8c7fffc4 	addi	r17,r17,-1
 10275a0:	d9800f15 	stw	r6,60(sp)
 10275a4:	000d883a 	mov	r6,zero
 10275a8:	01cffe34 	movhi	r7,16376
 10275ac:	103081c0 	call	103081c <__subdf3>
 10275b0:	0198dbf4 	movhi	r6,25455
 10275b4:	01cff4f4 	movhi	r7,16339
 10275b8:	1009883a 	mov	r4,r2
 10275bc:	180b883a 	mov	r5,r3
 10275c0:	3190d844 	addi	r6,r6,17249
 10275c4:	39e1e9c4 	addi	r7,r7,-30809
 10275c8:	10221cc0 	call	10221cc <__muldf3>
 10275cc:	01a2d874 	movhi	r6,35681
 10275d0:	01cff1f4 	movhi	r7,16327
 10275d4:	180b883a 	mov	r5,r3
 10275d8:	31b22cc4 	addi	r6,r6,-14157
 10275dc:	39e28a04 	addi	r7,r7,-30168
 10275e0:	1009883a 	mov	r4,r2
 10275e4:	102fd3c0 	call	102fd3c <__adddf3>
 10275e8:	8809883a 	mov	r4,r17
 10275ec:	102d883a 	mov	r22,r2
 10275f0:	182b883a 	mov	r21,r3
 10275f4:	10229780 	call	1022978 <__floatsidf>
 10275f8:	019427f4 	movhi	r6,20639
 10275fc:	01cff4f4 	movhi	r7,16339
 1027600:	1009883a 	mov	r4,r2
 1027604:	180b883a 	mov	r5,r3
 1027608:	319e7ec4 	addi	r6,r6,31227
 102760c:	39d104c4 	addi	r7,r7,17427
 1027610:	10221cc0 	call	10221cc <__muldf3>
 1027614:	b009883a 	mov	r4,r22
 1027618:	a80b883a 	mov	r5,r21
 102761c:	100d883a 	mov	r6,r2
 1027620:	180f883a 	mov	r7,r3
 1027624:	102fd3c0 	call	102fd3c <__adddf3>
 1027628:	1009883a 	mov	r4,r2
 102762c:	180b883a 	mov	r5,r3
 1027630:	102d883a 	mov	r22,r2
 1027634:	182b883a 	mov	r21,r3
 1027638:	10228f00 	call	10228f0 <__fixdfsi>
 102763c:	b009883a 	mov	r4,r22
 1027640:	a80b883a 	mov	r5,r21
 1027644:	000d883a 	mov	r6,zero
 1027648:	000f883a 	mov	r7,zero
 102764c:	d8800515 	stw	r2,20(sp)
 1027650:	103073c0 	call	103073c <__ledf2>
 1027654:	10023116 	blt	r2,zero,1027f1c <_dtoa_r+0xb28>
 1027658:	d8c00517 	ldw	r3,20(sp)
 102765c:	00800584 	movi	r2,22
 1027660:	10c21f36 	bltu	r2,r3,1027ee0 <_dtoa_r+0xaec>
 1027664:	180490fa 	slli	r2,r3,3
 1027668:	00c040f4 	movhi	r3,259
 102766c:	18d02904 	addi	r3,r3,16548
 1027670:	1885883a 	add	r2,r3,r2
 1027674:	11000017 	ldw	r4,0(r2)
 1027678:	11400117 	ldw	r5,4(r2)
 102767c:	900d883a 	mov	r6,r18
 1027680:	980f883a 	mov	r7,r19
 1027684:	103065c0 	call	103065c <__gedf2>
 1027688:	0082a70e 	bge	zero,r2,1028128 <_dtoa_r+0xd34>
 102768c:	d9000517 	ldw	r4,20(sp)
 1027690:	d8000c15 	stw	zero,48(sp)
 1027694:	213fffc4 	addi	r4,r4,-1
 1027698:	d9000515 	stw	r4,20(sp)
 102769c:	a463c83a 	sub	r17,r20,r17
 10276a0:	8dbfffc4 	addi	r22,r17,-1
 10276a4:	b0021916 	blt	r22,zero,1027f0c <_dtoa_r+0xb18>
 10276a8:	d8000815 	stw	zero,32(sp)
 10276ac:	d8800517 	ldw	r2,20(sp)
 10276b0:	10020e16 	blt	r2,zero,1027eec <_dtoa_r+0xaf8>
 10276b4:	b0ad883a 	add	r22,r22,r2
 10276b8:	d8800a15 	stw	r2,40(sp)
 10276bc:	d8000915 	stw	zero,36(sp)
 10276c0:	d8c00317 	ldw	r3,12(sp)
 10276c4:	00800244 	movi	r2,9
 10276c8:	10c11a36 	bltu	r2,r3,1027b34 <_dtoa_r+0x740>
 10276cc:	00800144 	movi	r2,5
 10276d0:	10c4fc0e 	bge	r2,r3,1028ac4 <_dtoa_r+0x16d0>
 10276d4:	18ffff04 	addi	r3,r3,-4
 10276d8:	d8c00315 	stw	r3,12(sp)
 10276dc:	0029883a 	mov	r20,zero
 10276e0:	d9800317 	ldw	r6,12(sp)
 10276e4:	008000c4 	movi	r2,3
 10276e8:	3083bd26 	beq	r6,r2,10285e0 <_dtoa_r+0x11ec>
 10276ec:	1183670e 	bge	r2,r6,102848c <_dtoa_r+0x1098>
 10276f0:	d8c00317 	ldw	r3,12(sp)
 10276f4:	00800104 	movi	r2,4
 10276f8:	1882e726 	beq	r3,r2,1028298 <_dtoa_r+0xea4>
 10276fc:	00800144 	movi	r2,5
 1027700:	1884f21e 	bne	r3,r2,1028acc <_dtoa_r+0x16d8>
 1027704:	00800044 	movi	r2,1
 1027708:	d8800b15 	stw	r2,44(sp)
 102770c:	d8c02217 	ldw	r3,136(sp)
 1027710:	d9000517 	ldw	r4,20(sp)
 1027714:	1907883a 	add	r3,r3,r4
 1027718:	19800044 	addi	r6,r3,1
 102771c:	d8c00d15 	stw	r3,52(sp)
 1027720:	d9800615 	stw	r6,24(sp)
 1027724:	0183c30e 	bge	zero,r6,1028634 <_dtoa_r+0x1240>
 1027728:	d9800617 	ldw	r6,24(sp)
 102772c:	3023883a 	mov	r17,r6
 1027730:	80001115 	stw	zero,68(r16)
 1027734:	008005c4 	movi	r2,23
 1027738:	1184f62e 	bgeu	r2,r6,1028b14 <_dtoa_r+0x1720>
 102773c:	00c00044 	movi	r3,1
 1027740:	00800104 	movi	r2,4
 1027744:	1085883a 	add	r2,r2,r2
 1027748:	11000504 	addi	r4,r2,20
 102774c:	180b883a 	mov	r5,r3
 1027750:	18c00044 	addi	r3,r3,1
 1027754:	313ffb2e 	bgeu	r6,r4,1027744 <_gp+0xfffe9ac0>
 1027758:	81401115 	stw	r5,68(r16)
 102775c:	8009883a 	mov	r4,r16
 1027760:	102aa1c0 	call	102aa1c <_Balloc>
 1027764:	d8800715 	stw	r2,28(sp)
 1027768:	80801015 	stw	r2,64(r16)
 102776c:	00800384 	movi	r2,14
 1027770:	1440fd36 	bltu	r2,r17,1027b68 <_dtoa_r+0x774>
 1027774:	a000fc26 	beq	r20,zero,1027b68 <_dtoa_r+0x774>
 1027778:	d8800517 	ldw	r2,20(sp)
 102777c:	0083b90e 	bge	zero,r2,1028664 <_dtoa_r+0x1270>
 1027780:	d8c00517 	ldw	r3,20(sp)
 1027784:	108003cc 	andi	r2,r2,15
 1027788:	100490fa 	slli	r2,r2,3
 102778c:	182fd13a 	srai	r23,r3,4
 1027790:	00c040f4 	movhi	r3,259
 1027794:	18d02904 	addi	r3,r3,16548
 1027798:	1885883a 	add	r2,r3,r2
 102779c:	b8c0040c 	andi	r3,r23,16
 10277a0:	12c00017 	ldw	r11,0(r2)
 10277a4:	12800117 	ldw	r10,4(r2)
 10277a8:	18039726 	beq	r3,zero,1028608 <_dtoa_r+0x1214>
 10277ac:	008040f4 	movhi	r2,259
 10277b0:	10901f04 	addi	r2,r2,16508
 10277b4:	11800817 	ldw	r6,32(r2)
 10277b8:	11c00917 	ldw	r7,36(r2)
 10277bc:	9009883a 	mov	r4,r18
 10277c0:	980b883a 	mov	r5,r19
 10277c4:	da801615 	stw	r10,88(sp)
 10277c8:	dac01515 	stw	r11,84(sp)
 10277cc:	10219000 	call	1021900 <__divdf3>
 10277d0:	da801617 	ldw	r10,88(sp)
 10277d4:	dac01517 	ldw	r11,84(sp)
 10277d8:	bdc003cc 	andi	r23,r23,15
 10277dc:	044000c4 	movi	r17,3
 10277e0:	d8800e15 	stw	r2,56(sp)
 10277e4:	182b883a 	mov	r21,r3
 10277e8:	b8001126 	beq	r23,zero,1027830 <_dtoa_r+0x43c>
 10277ec:	050040f4 	movhi	r20,259
 10277f0:	a5101f04 	addi	r20,r20,16508
 10277f4:	5805883a 	mov	r2,r11
 10277f8:	5007883a 	mov	r3,r10
 10277fc:	b980004c 	andi	r6,r23,1
 1027800:	1009883a 	mov	r4,r2
 1027804:	b82fd07a 	srai	r23,r23,1
 1027808:	180b883a 	mov	r5,r3
 102780c:	30000426 	beq	r6,zero,1027820 <_dtoa_r+0x42c>
 1027810:	a1800017 	ldw	r6,0(r20)
 1027814:	a1c00117 	ldw	r7,4(r20)
 1027818:	8c400044 	addi	r17,r17,1
 102781c:	10221cc0 	call	10221cc <__muldf3>
 1027820:	a5000204 	addi	r20,r20,8
 1027824:	b83ff51e 	bne	r23,zero,10277fc <_gp+0xfffe9b78>
 1027828:	1017883a 	mov	r11,r2
 102782c:	1815883a 	mov	r10,r3
 1027830:	d9000e17 	ldw	r4,56(sp)
 1027834:	a80b883a 	mov	r5,r21
 1027838:	580d883a 	mov	r6,r11
 102783c:	500f883a 	mov	r7,r10
 1027840:	10219000 	call	1021900 <__divdf3>
 1027844:	1029883a 	mov	r20,r2
 1027848:	182b883a 	mov	r21,r3
 102784c:	d9800c17 	ldw	r6,48(sp)
 1027850:	30000626 	beq	r6,zero,102786c <_dtoa_r+0x478>
 1027854:	a009883a 	mov	r4,r20
 1027858:	a80b883a 	mov	r5,r21
 102785c:	000d883a 	mov	r6,zero
 1027860:	01cffc34 	movhi	r7,16368
 1027864:	103073c0 	call	103073c <__ledf2>
 1027868:	10043216 	blt	r2,zero,1028934 <_dtoa_r+0x1540>
 102786c:	8809883a 	mov	r4,r17
 1027870:	10229780 	call	1022978 <__floatsidf>
 1027874:	1009883a 	mov	r4,r2
 1027878:	180b883a 	mov	r5,r3
 102787c:	a00d883a 	mov	r6,r20
 1027880:	a80f883a 	mov	r7,r21
 1027884:	10221cc0 	call	10221cc <__muldf3>
 1027888:	000d883a 	mov	r6,zero
 102788c:	1009883a 	mov	r4,r2
 1027890:	180b883a 	mov	r5,r3
 1027894:	01d00734 	movhi	r7,16412
 1027898:	102fd3c0 	call	102fd3c <__adddf3>
 102789c:	1023883a 	mov	r17,r2
 10278a0:	d9800617 	ldw	r6,24(sp)
 10278a4:	00bf3034 	movhi	r2,64704
 10278a8:	1885883a 	add	r2,r3,r2
 10278ac:	d8800e15 	stw	r2,56(sp)
 10278b0:	30032e26 	beq	r6,zero,102856c <_dtoa_r+0x1178>
 10278b4:	d8c00517 	ldw	r3,20(sp)
 10278b8:	da800617 	ldw	r10,24(sp)
 10278bc:	d8c01215 	stw	r3,72(sp)
 10278c0:	d9000b17 	ldw	r4,44(sp)
 10278c4:	2003b026 	beq	r4,zero,1028788 <_dtoa_r+0x1394>
 10278c8:	50bfffc4 	addi	r2,r10,-1
 10278cc:	100490fa 	slli	r2,r2,3
 10278d0:	00c040f4 	movhi	r3,259
 10278d4:	18d02904 	addi	r3,r3,16548
 10278d8:	1885883a 	add	r2,r3,r2
 10278dc:	11800017 	ldw	r6,0(r2)
 10278e0:	11c00117 	ldw	r7,4(r2)
 10278e4:	d8800717 	ldw	r2,28(sp)
 10278e8:	0009883a 	mov	r4,zero
 10278ec:	014ff834 	movhi	r5,16352
 10278f0:	da801615 	stw	r10,88(sp)
 10278f4:	15c00044 	addi	r23,r2,1
 10278f8:	10219000 	call	1021900 <__divdf3>
 10278fc:	d9c00e17 	ldw	r7,56(sp)
 1027900:	880d883a 	mov	r6,r17
 1027904:	1009883a 	mov	r4,r2
 1027908:	180b883a 	mov	r5,r3
 102790c:	103081c0 	call	103081c <__subdf3>
 1027910:	a80b883a 	mov	r5,r21
 1027914:	a009883a 	mov	r4,r20
 1027918:	d8c01015 	stw	r3,64(sp)
 102791c:	d8800e15 	stw	r2,56(sp)
 1027920:	10228f00 	call	10228f0 <__fixdfsi>
 1027924:	1009883a 	mov	r4,r2
 1027928:	d8801715 	stw	r2,92(sp)
 102792c:	10229780 	call	1022978 <__floatsidf>
 1027930:	a009883a 	mov	r4,r20
 1027934:	a80b883a 	mov	r5,r21
 1027938:	100d883a 	mov	r6,r2
 102793c:	180f883a 	mov	r7,r3
 1027940:	103081c0 	call	103081c <__subdf3>
 1027944:	da001717 	ldw	r8,92(sp)
 1027948:	1829883a 	mov	r20,r3
 102794c:	d8c00717 	ldw	r3,28(sp)
 1027950:	d9000e17 	ldw	r4,56(sp)
 1027954:	d9401017 	ldw	r5,64(sp)
 1027958:	42000c04 	addi	r8,r8,48
 102795c:	1023883a 	mov	r17,r2
 1027960:	1a000005 	stb	r8,0(r3)
 1027964:	880d883a 	mov	r6,r17
 1027968:	a00f883a 	mov	r7,r20
 102796c:	402b883a 	mov	r21,r8
 1027970:	103065c0 	call	103065c <__gedf2>
 1027974:	00844516 	blt	zero,r2,1028a8c <_dtoa_r+0x1698>
 1027978:	0009883a 	mov	r4,zero
 102797c:	014ffc34 	movhi	r5,16368
 1027980:	880d883a 	mov	r6,r17
 1027984:	a00f883a 	mov	r7,r20
 1027988:	103081c0 	call	103081c <__subdf3>
 102798c:	d9000e17 	ldw	r4,56(sp)
 1027990:	d9401017 	ldw	r5,64(sp)
 1027994:	100d883a 	mov	r6,r2
 1027998:	180f883a 	mov	r7,r3
 102799c:	103065c0 	call	103065c <__gedf2>
 10279a0:	da801617 	ldw	r10,88(sp)
 10279a4:	00843616 	blt	zero,r2,1028a80 <_dtoa_r+0x168c>
 10279a8:	00800044 	movi	r2,1
 10279ac:	12806e0e 	bge	r2,r10,1027b68 <_dtoa_r+0x774>
 10279b0:	d9000717 	ldw	r4,28(sp)
 10279b4:	dd801315 	stw	r22,76(sp)
 10279b8:	dc001115 	stw	r16,68(sp)
 10279bc:	2295883a 	add	r10,r4,r10
 10279c0:	dcc01415 	stw	r19,80(sp)
 10279c4:	502d883a 	mov	r22,r10
 10279c8:	dcc01017 	ldw	r19,64(sp)
 10279cc:	b821883a 	mov	r16,r23
 10279d0:	dc801015 	stw	r18,64(sp)
 10279d4:	dc800e17 	ldw	r18,56(sp)
 10279d8:	00000906 	br	1027a00 <_dtoa_r+0x60c>
 10279dc:	103081c0 	call	103081c <__subdf3>
 10279e0:	1009883a 	mov	r4,r2
 10279e4:	180b883a 	mov	r5,r3
 10279e8:	900d883a 	mov	r6,r18
 10279ec:	980f883a 	mov	r7,r19
 10279f0:	103073c0 	call	103073c <__ledf2>
 10279f4:	10040e16 	blt	r2,zero,1028a30 <_dtoa_r+0x163c>
 10279f8:	b821883a 	mov	r16,r23
 10279fc:	bd841026 	beq	r23,r22,1028a40 <_dtoa_r+0x164c>
 1027a00:	9009883a 	mov	r4,r18
 1027a04:	980b883a 	mov	r5,r19
 1027a08:	000d883a 	mov	r6,zero
 1027a0c:	01d00934 	movhi	r7,16420
 1027a10:	10221cc0 	call	10221cc <__muldf3>
 1027a14:	000d883a 	mov	r6,zero
 1027a18:	01d00934 	movhi	r7,16420
 1027a1c:	8809883a 	mov	r4,r17
 1027a20:	a00b883a 	mov	r5,r20
 1027a24:	1025883a 	mov	r18,r2
 1027a28:	1827883a 	mov	r19,r3
 1027a2c:	10221cc0 	call	10221cc <__muldf3>
 1027a30:	180b883a 	mov	r5,r3
 1027a34:	1009883a 	mov	r4,r2
 1027a38:	1823883a 	mov	r17,r3
 1027a3c:	1029883a 	mov	r20,r2
 1027a40:	10228f00 	call	10228f0 <__fixdfsi>
 1027a44:	1009883a 	mov	r4,r2
 1027a48:	102b883a 	mov	r21,r2
 1027a4c:	10229780 	call	1022978 <__floatsidf>
 1027a50:	a009883a 	mov	r4,r20
 1027a54:	880b883a 	mov	r5,r17
 1027a58:	100d883a 	mov	r6,r2
 1027a5c:	180f883a 	mov	r7,r3
 1027a60:	103081c0 	call	103081c <__subdf3>
 1027a64:	ad400c04 	addi	r21,r21,48
 1027a68:	1009883a 	mov	r4,r2
 1027a6c:	180b883a 	mov	r5,r3
 1027a70:	900d883a 	mov	r6,r18
 1027a74:	980f883a 	mov	r7,r19
 1027a78:	85400005 	stb	r21,0(r16)
 1027a7c:	1023883a 	mov	r17,r2
 1027a80:	1829883a 	mov	r20,r3
 1027a84:	103073c0 	call	103073c <__ledf2>
 1027a88:	bdc00044 	addi	r23,r23,1
 1027a8c:	0009883a 	mov	r4,zero
 1027a90:	014ffc34 	movhi	r5,16368
 1027a94:	880d883a 	mov	r6,r17
 1027a98:	a00f883a 	mov	r7,r20
 1027a9c:	103fcf0e 	bge	r2,zero,10279dc <_gp+0xfffe9d58>
 1027aa0:	d9801217 	ldw	r6,72(sp)
 1027aa4:	dc001117 	ldw	r16,68(sp)
 1027aa8:	d9800515 	stw	r6,20(sp)
 1027aac:	8009883a 	mov	r4,r16
 1027ab0:	e00b883a 	mov	r5,fp
 1027ab4:	102aac40 	call	102aac4 <_Bfree>
 1027ab8:	d8c00517 	ldw	r3,20(sp)
 1027abc:	d9002317 	ldw	r4,140(sp)
 1027ac0:	d9802517 	ldw	r6,148(sp)
 1027ac4:	b8000005 	stb	zero,0(r23)
 1027ac8:	18800044 	addi	r2,r3,1
 1027acc:	20800015 	stw	r2,0(r4)
 1027ad0:	30027226 	beq	r6,zero,102849c <_dtoa_r+0x10a8>
 1027ad4:	35c00015 	stw	r23,0(r6)
 1027ad8:	d8800717 	ldw	r2,28(sp)
 1027adc:	003e7406 	br	10274b0 <_gp+0xfffe982c>
 1027ae0:	00800434 	movhi	r2,16
 1027ae4:	10bfffc4 	addi	r2,r2,-1
 1027ae8:	a8aa703a 	and	r21,r21,r2
 1027aec:	a83e801e 	bne	r21,zero,10274f0 <_gp+0xfffe986c>
 1027af0:	008040f4 	movhi	r2,259
 1027af4:	10900a04 	addi	r2,r2,16424
 1027af8:	003e7f06 	br	10274f8 <_gp+0xfffe9874>
 1027afc:	10c00204 	addi	r3,r2,8
 1027b00:	003e8206 	br	102750c <_gp+0xfffe9888>
 1027b04:	01400434 	movhi	r5,16
 1027b08:	297fffc4 	addi	r5,r5,-1
 1027b0c:	994a703a 	and	r5,r19,r5
 1027b10:	9009883a 	mov	r4,r18
 1027b14:	8c7f0044 	addi	r17,r17,-1023
 1027b18:	294ffc34 	orhi	r5,r5,16368
 1027b1c:	dd000217 	ldw	r20,8(sp)
 1027b20:	d8000f15 	stw	zero,60(sp)
 1027b24:	003e9f06 	br	10275a4 <_gp+0xfffe9920>
 1027b28:	008040f4 	movhi	r2,259
 1027b2c:	108ff904 	addi	r2,r2,16356
 1027b30:	003e5f06 	br	10274b0 <_gp+0xfffe982c>
 1027b34:	80001115 	stw	zero,68(r16)
 1027b38:	8009883a 	mov	r4,r16
 1027b3c:	000b883a 	mov	r5,zero
 1027b40:	102aa1c0 	call	102aa1c <_Balloc>
 1027b44:	01bfffc4 	movi	r6,-1
 1027b48:	d8800715 	stw	r2,28(sp)
 1027b4c:	80801015 	stw	r2,64(r16)
 1027b50:	00800044 	movi	r2,1
 1027b54:	d9800615 	stw	r6,24(sp)
 1027b58:	d8800b15 	stw	r2,44(sp)
 1027b5c:	d8002215 	stw	zero,136(sp)
 1027b60:	d9800d15 	stw	r6,52(sp)
 1027b64:	d8000315 	stw	zero,12(sp)
 1027b68:	d8800117 	ldw	r2,4(sp)
 1027b6c:	10008e16 	blt	r2,zero,1027da8 <_dtoa_r+0x9b4>
 1027b70:	d9000517 	ldw	r4,20(sp)
 1027b74:	00c00384 	movi	r3,14
 1027b78:	19008b16 	blt	r3,r4,1027da8 <_dtoa_r+0x9b4>
 1027b7c:	200490fa 	slli	r2,r4,3
 1027b80:	00c040f4 	movhi	r3,259
 1027b84:	d9802217 	ldw	r6,136(sp)
 1027b88:	18d02904 	addi	r3,r3,16548
 1027b8c:	1885883a 	add	r2,r3,r2
 1027b90:	14400017 	ldw	r17,0(r2)
 1027b94:	15000117 	ldw	r20,4(r2)
 1027b98:	3001c716 	blt	r6,zero,10282b8 <_dtoa_r+0xec4>
 1027b9c:	880d883a 	mov	r6,r17
 1027ba0:	a00f883a 	mov	r7,r20
 1027ba4:	9009883a 	mov	r4,r18
 1027ba8:	980b883a 	mov	r5,r19
 1027bac:	10219000 	call	1021900 <__divdf3>
 1027bb0:	180b883a 	mov	r5,r3
 1027bb4:	1009883a 	mov	r4,r2
 1027bb8:	10228f00 	call	10228f0 <__fixdfsi>
 1027bbc:	1009883a 	mov	r4,r2
 1027bc0:	102d883a 	mov	r22,r2
 1027bc4:	10229780 	call	1022978 <__floatsidf>
 1027bc8:	1009883a 	mov	r4,r2
 1027bcc:	180b883a 	mov	r5,r3
 1027bd0:	880d883a 	mov	r6,r17
 1027bd4:	a00f883a 	mov	r7,r20
 1027bd8:	10221cc0 	call	10221cc <__muldf3>
 1027bdc:	9009883a 	mov	r4,r18
 1027be0:	980b883a 	mov	r5,r19
 1027be4:	100d883a 	mov	r6,r2
 1027be8:	180f883a 	mov	r7,r3
 1027bec:	103081c0 	call	103081c <__subdf3>
 1027bf0:	d9000717 	ldw	r4,28(sp)
 1027bf4:	d9800617 	ldw	r6,24(sp)
 1027bf8:	180b883a 	mov	r5,r3
 1027bfc:	b0c00c04 	addi	r3,r22,48
 1027c00:	20c00005 	stb	r3,0(r4)
 1027c04:	25c00044 	addi	r23,r4,1
 1027c08:	01000044 	movi	r4,1
 1027c0c:	1011883a 	mov	r8,r2
 1027c10:	2807883a 	mov	r3,r5
 1027c14:	31003d26 	beq	r6,r4,1027d0c <_dtoa_r+0x918>
 1027c18:	000d883a 	mov	r6,zero
 1027c1c:	01d00934 	movhi	r7,16420
 1027c20:	1009883a 	mov	r4,r2
 1027c24:	10221cc0 	call	10221cc <__muldf3>
 1027c28:	1009883a 	mov	r4,r2
 1027c2c:	180b883a 	mov	r5,r3
 1027c30:	000d883a 	mov	r6,zero
 1027c34:	000f883a 	mov	r7,zero
 1027c38:	1027883a 	mov	r19,r2
 1027c3c:	182b883a 	mov	r21,r3
 1027c40:	10305d80 	call	10305d8 <__eqdf2>
 1027c44:	103f9926 	beq	r2,zero,1027aac <_gp+0xfffe9e28>
 1027c48:	d8c00617 	ldw	r3,24(sp)
 1027c4c:	d9000717 	ldw	r4,28(sp)
 1027c50:	b825883a 	mov	r18,r23
 1027c54:	18bfffc4 	addi	r2,r3,-1
 1027c58:	20ad883a 	add	r22,r4,r2
 1027c5c:	dc000315 	stw	r16,12(sp)
 1027c60:	00000a06 	br	1027c8c <_dtoa_r+0x898>
 1027c64:	10221cc0 	call	10221cc <__muldf3>
 1027c68:	1009883a 	mov	r4,r2
 1027c6c:	180b883a 	mov	r5,r3
 1027c70:	000d883a 	mov	r6,zero
 1027c74:	000f883a 	mov	r7,zero
 1027c78:	1027883a 	mov	r19,r2
 1027c7c:	182b883a 	mov	r21,r3
 1027c80:	b825883a 	mov	r18,r23
 1027c84:	10305d80 	call	10305d8 <__eqdf2>
 1027c88:	10022626 	beq	r2,zero,1028524 <_dtoa_r+0x1130>
 1027c8c:	880d883a 	mov	r6,r17
 1027c90:	a00f883a 	mov	r7,r20
 1027c94:	9809883a 	mov	r4,r19
 1027c98:	a80b883a 	mov	r5,r21
 1027c9c:	10219000 	call	1021900 <__divdf3>
 1027ca0:	180b883a 	mov	r5,r3
 1027ca4:	1009883a 	mov	r4,r2
 1027ca8:	10228f00 	call	10228f0 <__fixdfsi>
 1027cac:	1009883a 	mov	r4,r2
 1027cb0:	1021883a 	mov	r16,r2
 1027cb4:	10229780 	call	1022978 <__floatsidf>
 1027cb8:	1009883a 	mov	r4,r2
 1027cbc:	180b883a 	mov	r5,r3
 1027cc0:	880d883a 	mov	r6,r17
 1027cc4:	a00f883a 	mov	r7,r20
 1027cc8:	10221cc0 	call	10221cc <__muldf3>
 1027ccc:	9809883a 	mov	r4,r19
 1027cd0:	a80b883a 	mov	r5,r21
 1027cd4:	100d883a 	mov	r6,r2
 1027cd8:	180f883a 	mov	r7,r3
 1027cdc:	103081c0 	call	103081c <__subdf3>
 1027ce0:	82000c04 	addi	r8,r16,48
 1027ce4:	92000005 	stb	r8,0(r18)
 1027ce8:	1009883a 	mov	r4,r2
 1027cec:	180b883a 	mov	r5,r3
 1027cf0:	000d883a 	mov	r6,zero
 1027cf4:	01d00934 	movhi	r7,16420
 1027cf8:	1011883a 	mov	r8,r2
 1027cfc:	bdc00044 	addi	r23,r23,1
 1027d00:	95bfd81e 	bne	r18,r22,1027c64 <_gp+0xfffe9fe0>
 1027d04:	802d883a 	mov	r22,r16
 1027d08:	dc000317 	ldw	r16,12(sp)
 1027d0c:	4009883a 	mov	r4,r8
 1027d10:	180b883a 	mov	r5,r3
 1027d14:	400d883a 	mov	r6,r8
 1027d18:	180f883a 	mov	r7,r3
 1027d1c:	102fd3c0 	call	102fd3c <__adddf3>
 1027d20:	8809883a 	mov	r4,r17
 1027d24:	a00b883a 	mov	r5,r20
 1027d28:	100d883a 	mov	r6,r2
 1027d2c:	180f883a 	mov	r7,r3
 1027d30:	1027883a 	mov	r19,r2
 1027d34:	1825883a 	mov	r18,r3
 1027d38:	103073c0 	call	103073c <__ledf2>
 1027d3c:	10000816 	blt	r2,zero,1027d60 <_dtoa_r+0x96c>
 1027d40:	8809883a 	mov	r4,r17
 1027d44:	a00b883a 	mov	r5,r20
 1027d48:	980d883a 	mov	r6,r19
 1027d4c:	900f883a 	mov	r7,r18
 1027d50:	10305d80 	call	10305d8 <__eqdf2>
 1027d54:	103f551e 	bne	r2,zero,1027aac <_gp+0xfffe9e28>
 1027d58:	b580004c 	andi	r22,r22,1
 1027d5c:	b03f5326 	beq	r22,zero,1027aac <_gp+0xfffe9e28>
 1027d60:	bd7fffc3 	ldbu	r21,-1(r23)
 1027d64:	b8bfffc4 	addi	r2,r23,-1
 1027d68:	1007883a 	mov	r3,r2
 1027d6c:	01400e44 	movi	r5,57
 1027d70:	d9800717 	ldw	r6,28(sp)
 1027d74:	00000506 	br	1027d8c <_dtoa_r+0x998>
 1027d78:	18ffffc4 	addi	r3,r3,-1
 1027d7c:	30825e26 	beq	r6,r2,10286f8 <_dtoa_r+0x1304>
 1027d80:	1d400003 	ldbu	r21,0(r3)
 1027d84:	102f883a 	mov	r23,r2
 1027d88:	10bfffc4 	addi	r2,r2,-1
 1027d8c:	a9003fcc 	andi	r4,r21,255
 1027d90:	2100201c 	xori	r4,r4,128
 1027d94:	213fe004 	addi	r4,r4,-128
 1027d98:	217ff726 	beq	r4,r5,1027d78 <_gp+0xfffea0f4>
 1027d9c:	aa000044 	addi	r8,r21,1
 1027da0:	12000005 	stb	r8,0(r2)
 1027da4:	003f4106 	br	1027aac <_gp+0xfffe9e28>
 1027da8:	d8c00b17 	ldw	r3,44(sp)
 1027dac:	18006726 	beq	r3,zero,1027f4c <_dtoa_r+0xb58>
 1027db0:	d9000317 	ldw	r4,12(sp)
 1027db4:	00c00044 	movi	r3,1
 1027db8:	19016a0e 	bge	r3,r4,1028364 <_dtoa_r+0xf70>
 1027dbc:	d8800617 	ldw	r2,24(sp)
 1027dc0:	d8c00917 	ldw	r3,36(sp)
 1027dc4:	157fffc4 	addi	r21,r2,-1
 1027dc8:	1d420716 	blt	r3,r21,10285e8 <_dtoa_r+0x11f4>
 1027dcc:	1d6bc83a 	sub	r21,r3,r21
 1027dd0:	d8800617 	ldw	r2,24(sp)
 1027dd4:	1002c716 	blt	r2,zero,10288f4 <_dtoa_r+0x1500>
 1027dd8:	dd000817 	ldw	r20,32(sp)
 1027ddc:	d8800617 	ldw	r2,24(sp)
 1027de0:	d9800817 	ldw	r6,32(sp)
 1027de4:	8009883a 	mov	r4,r16
 1027de8:	01400044 	movi	r5,1
 1027dec:	308d883a 	add	r6,r6,r2
 1027df0:	d9800815 	stw	r6,32(sp)
 1027df4:	b0ad883a 	add	r22,r22,r2
 1027df8:	102ae1c0 	call	102ae1c <__i2b>
 1027dfc:	1023883a 	mov	r17,r2
 1027e00:	a0000826 	beq	r20,zero,1027e24 <_dtoa_r+0xa30>
 1027e04:	0580070e 	bge	zero,r22,1027e24 <_dtoa_r+0xa30>
 1027e08:	b005883a 	mov	r2,r22
 1027e0c:	a5812016 	blt	r20,r22,1028290 <_dtoa_r+0xe9c>
 1027e10:	d8c00817 	ldw	r3,32(sp)
 1027e14:	a0a9c83a 	sub	r20,r20,r2
 1027e18:	b0adc83a 	sub	r22,r22,r2
 1027e1c:	1887c83a 	sub	r3,r3,r2
 1027e20:	d8c00815 	stw	r3,32(sp)
 1027e24:	d9000917 	ldw	r4,36(sp)
 1027e28:	0100140e 	bge	zero,r4,1027e7c <_dtoa_r+0xa88>
 1027e2c:	d9800b17 	ldw	r6,44(sp)
 1027e30:	3001e526 	beq	r6,zero,10285c8 <_dtoa_r+0x11d4>
 1027e34:	05400e0e 	bge	zero,r21,1027e70 <_dtoa_r+0xa7c>
 1027e38:	880b883a 	mov	r5,r17
 1027e3c:	8009883a 	mov	r4,r16
 1027e40:	a80d883a 	mov	r6,r21
 1027e44:	102b0540 	call	102b054 <__pow5mult>
 1027e48:	e00d883a 	mov	r6,fp
 1027e4c:	8009883a 	mov	r4,r16
 1027e50:	100b883a 	mov	r5,r2
 1027e54:	1023883a 	mov	r17,r2
 1027e58:	102ae580 	call	102ae58 <__multiply>
 1027e5c:	102f883a 	mov	r23,r2
 1027e60:	e00b883a 	mov	r5,fp
 1027e64:	8009883a 	mov	r4,r16
 1027e68:	102aac40 	call	102aac4 <_Bfree>
 1027e6c:	b839883a 	mov	fp,r23
 1027e70:	d8800917 	ldw	r2,36(sp)
 1027e74:	154dc83a 	sub	r6,r2,r21
 1027e78:	3001281e 	bne	r6,zero,102831c <_dtoa_r+0xf28>
 1027e7c:	05c00044 	movi	r23,1
 1027e80:	8009883a 	mov	r4,r16
 1027e84:	b80b883a 	mov	r5,r23
 1027e88:	102ae1c0 	call	102ae1c <__i2b>
 1027e8c:	d8c00a17 	ldw	r3,40(sp)
 1027e90:	102b883a 	mov	r21,r2
 1027e94:	00c0310e 	bge	zero,r3,1027f5c <_dtoa_r+0xb68>
 1027e98:	8009883a 	mov	r4,r16
 1027e9c:	100b883a 	mov	r5,r2
 1027ea0:	180d883a 	mov	r6,r3
 1027ea4:	102b0540 	call	102b054 <__pow5mult>
 1027ea8:	d9000317 	ldw	r4,12(sp)
 1027eac:	102b883a 	mov	r21,r2
 1027eb0:	b9011f0e 	bge	r23,r4,1028330 <_dtoa_r+0xf3c>
 1027eb4:	0027883a 	mov	r19,zero
 1027eb8:	a8800417 	ldw	r2,16(r21)
 1027ebc:	10800104 	addi	r2,r2,4
 1027ec0:	1085883a 	add	r2,r2,r2
 1027ec4:	1085883a 	add	r2,r2,r2
 1027ec8:	a885883a 	add	r2,r21,r2
 1027ecc:	11000017 	ldw	r4,0(r2)
 1027ed0:	102ad040 	call	102ad04 <__hi0bits>
 1027ed4:	00c00804 	movi	r3,32
 1027ed8:	1885c83a 	sub	r2,r3,r2
 1027edc:	00002506 	br	1027f74 <_dtoa_r+0xb80>
 1027ee0:	01800044 	movi	r6,1
 1027ee4:	d9800c15 	stw	r6,48(sp)
 1027ee8:	003dec06 	br	102769c <_gp+0xfffe9a18>
 1027eec:	d8c00817 	ldw	r3,32(sp)
 1027ef0:	d9000517 	ldw	r4,20(sp)
 1027ef4:	d8000a15 	stw	zero,40(sp)
 1027ef8:	1907c83a 	sub	r3,r3,r4
 1027efc:	010dc83a 	sub	r6,zero,r4
 1027f00:	d8c00815 	stw	r3,32(sp)
 1027f04:	d9800915 	stw	r6,36(sp)
 1027f08:	003ded06 	br	10276c0 <_gp+0xfffe9a3c>
 1027f0c:	05adc83a 	sub	r22,zero,r22
 1027f10:	dd800815 	stw	r22,32(sp)
 1027f14:	002d883a 	mov	r22,zero
 1027f18:	003de406 	br	10276ac <_gp+0xfffe9a28>
 1027f1c:	d9000517 	ldw	r4,20(sp)
 1027f20:	10229780 	call	1022978 <__floatsidf>
 1027f24:	1009883a 	mov	r4,r2
 1027f28:	180b883a 	mov	r5,r3
 1027f2c:	b00d883a 	mov	r6,r22
 1027f30:	a80f883a 	mov	r7,r21
 1027f34:	10305d80 	call	10305d8 <__eqdf2>
 1027f38:	103dc726 	beq	r2,zero,1027658 <_gp+0xfffe99d4>
 1027f3c:	d8800517 	ldw	r2,20(sp)
 1027f40:	10bfffc4 	addi	r2,r2,-1
 1027f44:	d8800515 	stw	r2,20(sp)
 1027f48:	003dc306 	br	1027658 <_gp+0xfffe99d4>
 1027f4c:	dd400917 	ldw	r21,36(sp)
 1027f50:	dd000817 	ldw	r20,32(sp)
 1027f54:	0023883a 	mov	r17,zero
 1027f58:	003fa906 	br	1027e00 <_gp+0xfffea17c>
 1027f5c:	d9800317 	ldw	r6,12(sp)
 1027f60:	b981670e 	bge	r23,r6,1028500 <_dtoa_r+0x110c>
 1027f64:	0027883a 	mov	r19,zero
 1027f68:	d8c00a17 	ldw	r3,40(sp)
 1027f6c:	183fd21e 	bne	r3,zero,1027eb8 <_gp+0xfffea234>
 1027f70:	00800044 	movi	r2,1
 1027f74:	1585883a 	add	r2,r2,r22
 1027f78:	108007cc 	andi	r2,r2,31
 1027f7c:	10005f26 	beq	r2,zero,10280fc <_dtoa_r+0xd08>
 1027f80:	00c00804 	movi	r3,32
 1027f84:	1887c83a 	sub	r3,r3,r2
 1027f88:	01000104 	movi	r4,4
 1027f8c:	20c2dd0e 	bge	r4,r3,1028b04 <_dtoa_r+0x1710>
 1027f90:	d9000817 	ldw	r4,32(sp)
 1027f94:	00c00704 	movi	r3,28
 1027f98:	1885c83a 	sub	r2,r3,r2
 1027f9c:	2089883a 	add	r4,r4,r2
 1027fa0:	d9000815 	stw	r4,32(sp)
 1027fa4:	a0a9883a 	add	r20,r20,r2
 1027fa8:	b0ad883a 	add	r22,r22,r2
 1027fac:	d8800817 	ldw	r2,32(sp)
 1027fb0:	0080050e 	bge	zero,r2,1027fc8 <_dtoa_r+0xbd4>
 1027fb4:	e00b883a 	mov	r5,fp
 1027fb8:	8009883a 	mov	r4,r16
 1027fbc:	100d883a 	mov	r6,r2
 1027fc0:	102b1940 	call	102b194 <__lshift>
 1027fc4:	1039883a 	mov	fp,r2
 1027fc8:	0580050e 	bge	zero,r22,1027fe0 <_dtoa_r+0xbec>
 1027fcc:	a80b883a 	mov	r5,r21
 1027fd0:	8009883a 	mov	r4,r16
 1027fd4:	b00d883a 	mov	r6,r22
 1027fd8:	102b1940 	call	102b194 <__lshift>
 1027fdc:	102b883a 	mov	r21,r2
 1027fe0:	d8c00c17 	ldw	r3,48(sp)
 1027fe4:	1801161e 	bne	r3,zero,1028440 <_dtoa_r+0x104c>
 1027fe8:	d8c00617 	ldw	r3,24(sp)
 1027fec:	00c12d0e 	bge	zero,r3,10284a4 <_dtoa_r+0x10b0>
 1027ff0:	d8c00b17 	ldw	r3,44(sp)
 1027ff4:	1800571e 	bne	r3,zero,1028154 <_dtoa_r+0xd60>
 1027ff8:	dc800717 	ldw	r18,28(sp)
 1027ffc:	dcc00617 	ldw	r19,24(sp)
 1028000:	9029883a 	mov	r20,r18
 1028004:	00000206 	br	1028010 <_dtoa_r+0xc1c>
 1028008:	102aaec0 	call	102aaec <__multadd>
 102800c:	1039883a 	mov	fp,r2
 1028010:	e009883a 	mov	r4,fp
 1028014:	a80b883a 	mov	r5,r21
 1028018:	10271f40 	call	10271f4 <quorem>
 102801c:	10800c04 	addi	r2,r2,48
 1028020:	90800005 	stb	r2,0(r18)
 1028024:	94800044 	addi	r18,r18,1
 1028028:	9507c83a 	sub	r3,r18,r20
 102802c:	8009883a 	mov	r4,r16
 1028030:	e00b883a 	mov	r5,fp
 1028034:	01800284 	movi	r6,10
 1028038:	000f883a 	mov	r7,zero
 102803c:	1cfff216 	blt	r3,r19,1028008 <_gp+0xfffea384>
 1028040:	1011883a 	mov	r8,r2
 1028044:	d8800617 	ldw	r2,24(sp)
 1028048:	00822e0e 	bge	zero,r2,1028904 <_dtoa_r+0x1510>
 102804c:	d9000717 	ldw	r4,28(sp)
 1028050:	0025883a 	mov	r18,zero
 1028054:	20af883a 	add	r23,r4,r2
 1028058:	e00b883a 	mov	r5,fp
 102805c:	01800044 	movi	r6,1
 1028060:	8009883a 	mov	r4,r16
 1028064:	da001715 	stw	r8,92(sp)
 1028068:	102b1940 	call	102b194 <__lshift>
 102806c:	1009883a 	mov	r4,r2
 1028070:	a80b883a 	mov	r5,r21
 1028074:	1039883a 	mov	fp,r2
 1028078:	102b2dc0 	call	102b2dc <__mcmp>
 102807c:	da001717 	ldw	r8,92(sp)
 1028080:	00816e0e 	bge	zero,r2,102863c <_dtoa_r+0x1248>
 1028084:	b93fffc3 	ldbu	r4,-1(r23)
 1028088:	b8bfffc4 	addi	r2,r23,-1
 102808c:	1007883a 	mov	r3,r2
 1028090:	01800e44 	movi	r6,57
 1028094:	d9c00717 	ldw	r7,28(sp)
 1028098:	00000506 	br	10280b0 <_dtoa_r+0xcbc>
 102809c:	18ffffc4 	addi	r3,r3,-1
 10280a0:	38811926 	beq	r7,r2,1028508 <_dtoa_r+0x1114>
 10280a4:	19000003 	ldbu	r4,0(r3)
 10280a8:	102f883a 	mov	r23,r2
 10280ac:	10bfffc4 	addi	r2,r2,-1
 10280b0:	21403fcc 	andi	r5,r4,255
 10280b4:	2940201c 	xori	r5,r5,128
 10280b8:	297fe004 	addi	r5,r5,-128
 10280bc:	29bff726 	beq	r5,r6,102809c <_gp+0xfffea418>
 10280c0:	21000044 	addi	r4,r4,1
 10280c4:	11000005 	stb	r4,0(r2)
 10280c8:	8009883a 	mov	r4,r16
 10280cc:	a80b883a 	mov	r5,r21
 10280d0:	102aac40 	call	102aac4 <_Bfree>
 10280d4:	883e7526 	beq	r17,zero,1027aac <_gp+0xfffe9e28>
 10280d8:	90000426 	beq	r18,zero,10280ec <_dtoa_r+0xcf8>
 10280dc:	94400326 	beq	r18,r17,10280ec <_dtoa_r+0xcf8>
 10280e0:	8009883a 	mov	r4,r16
 10280e4:	900b883a 	mov	r5,r18
 10280e8:	102aac40 	call	102aac4 <_Bfree>
 10280ec:	8009883a 	mov	r4,r16
 10280f0:	880b883a 	mov	r5,r17
 10280f4:	102aac40 	call	102aac4 <_Bfree>
 10280f8:	003e6c06 	br	1027aac <_gp+0xfffe9e28>
 10280fc:	00800704 	movi	r2,28
 1028100:	d9800817 	ldw	r6,32(sp)
 1028104:	a0a9883a 	add	r20,r20,r2
 1028108:	b0ad883a 	add	r22,r22,r2
 102810c:	308d883a 	add	r6,r6,r2
 1028110:	d9800815 	stw	r6,32(sp)
 1028114:	003fa506 	br	1027fac <_gp+0xfffea328>
 1028118:	013efb84 	movi	r4,-1042
 102811c:	246bc83a 	sub	r21,r4,r17
 1028120:	9548983a 	sll	r4,r18,r21
 1028124:	003d1806 	br	1027588 <_gp+0xfffe9904>
 1028128:	d8000c15 	stw	zero,48(sp)
 102812c:	003d5b06 	br	102769c <_gp+0xfffe9a18>
 1028130:	880b883a 	mov	r5,r17
 1028134:	8009883a 	mov	r4,r16
 1028138:	01800284 	movi	r6,10
 102813c:	000f883a 	mov	r7,zero
 1028140:	102aaec0 	call	102aaec <__multadd>
 1028144:	1023883a 	mov	r17,r2
 1028148:	d8800d17 	ldw	r2,52(sp)
 102814c:	0082550e 	bge	zero,r2,1028aa4 <_dtoa_r+0x16b0>
 1028150:	d8800615 	stw	r2,24(sp)
 1028154:	0500050e 	bge	zero,r20,102816c <_dtoa_r+0xd78>
 1028158:	880b883a 	mov	r5,r17
 102815c:	8009883a 	mov	r4,r16
 1028160:	a00d883a 	mov	r6,r20
 1028164:	102b1940 	call	102b194 <__lshift>
 1028168:	1023883a 	mov	r17,r2
 102816c:	98016a1e 	bne	r19,zero,1028718 <_dtoa_r+0x1324>
 1028170:	8829883a 	mov	r20,r17
 1028174:	d9000617 	ldw	r4,24(sp)
 1028178:	dcc00717 	ldw	r19,28(sp)
 102817c:	9480004c 	andi	r18,r18,1
 1028180:	20bfffc4 	addi	r2,r4,-1
 1028184:	9885883a 	add	r2,r19,r2
 1028188:	d8800415 	stw	r2,16(sp)
 102818c:	dc800615 	stw	r18,24(sp)
 1028190:	e009883a 	mov	r4,fp
 1028194:	a80b883a 	mov	r5,r21
 1028198:	10271f40 	call	10271f4 <quorem>
 102819c:	e009883a 	mov	r4,fp
 10281a0:	880b883a 	mov	r5,r17
 10281a4:	102f883a 	mov	r23,r2
 10281a8:	102b2dc0 	call	102b2dc <__mcmp>
 10281ac:	8009883a 	mov	r4,r16
 10281b0:	a80b883a 	mov	r5,r21
 10281b4:	a00d883a 	mov	r6,r20
 10281b8:	102d883a 	mov	r22,r2
 10281bc:	102b33c0 	call	102b33c <__mdiff>
 10281c0:	1007883a 	mov	r3,r2
 10281c4:	10800317 	ldw	r2,12(r2)
 10281c8:	bc800c04 	addi	r18,r23,48
 10281cc:	1000971e 	bne	r2,zero,102842c <_dtoa_r+0x1038>
 10281d0:	180b883a 	mov	r5,r3
 10281d4:	e009883a 	mov	r4,fp
 10281d8:	d8c01515 	stw	r3,84(sp)
 10281dc:	102b2dc0 	call	102b2dc <__mcmp>
 10281e0:	d8c01517 	ldw	r3,84(sp)
 10281e4:	8009883a 	mov	r4,r16
 10281e8:	d8801515 	stw	r2,84(sp)
 10281ec:	180b883a 	mov	r5,r3
 10281f0:	102aac40 	call	102aac4 <_Bfree>
 10281f4:	d8801517 	ldw	r2,84(sp)
 10281f8:	1000041e 	bne	r2,zero,102820c <_dtoa_r+0xe18>
 10281fc:	d9800317 	ldw	r6,12(sp)
 1028200:	3000021e 	bne	r6,zero,102820c <_dtoa_r+0xe18>
 1028204:	d8c00617 	ldw	r3,24(sp)
 1028208:	18007626 	beq	r3,zero,10283e4 <_dtoa_r+0xff0>
 102820c:	b0005b16 	blt	r22,zero,102837c <_dtoa_r+0xf88>
 1028210:	b000041e 	bne	r22,zero,1028224 <_dtoa_r+0xe30>
 1028214:	d9000317 	ldw	r4,12(sp)
 1028218:	2000021e 	bne	r4,zero,1028224 <_dtoa_r+0xe30>
 102821c:	d8c00617 	ldw	r3,24(sp)
 1028220:	18005626 	beq	r3,zero,102837c <_dtoa_r+0xf88>
 1028224:	00814d16 	blt	zero,r2,102875c <_dtoa_r+0x1368>
 1028228:	d8c00417 	ldw	r3,16(sp)
 102822c:	9d800044 	addi	r22,r19,1
 1028230:	9c800005 	stb	r18,0(r19)
 1028234:	b02f883a 	mov	r23,r22
 1028238:	98c14c26 	beq	r19,r3,102876c <_dtoa_r+0x1378>
 102823c:	e00b883a 	mov	r5,fp
 1028240:	8009883a 	mov	r4,r16
 1028244:	01800284 	movi	r6,10
 1028248:	000f883a 	mov	r7,zero
 102824c:	102aaec0 	call	102aaec <__multadd>
 1028250:	1039883a 	mov	fp,r2
 1028254:	8d006d26 	beq	r17,r20,102840c <_dtoa_r+0x1018>
 1028258:	880b883a 	mov	r5,r17
 102825c:	01800284 	movi	r6,10
 1028260:	000f883a 	mov	r7,zero
 1028264:	8009883a 	mov	r4,r16
 1028268:	102aaec0 	call	102aaec <__multadd>
 102826c:	a00b883a 	mov	r5,r20
 1028270:	8009883a 	mov	r4,r16
 1028274:	01800284 	movi	r6,10
 1028278:	000f883a 	mov	r7,zero
 102827c:	1023883a 	mov	r17,r2
 1028280:	102aaec0 	call	102aaec <__multadd>
 1028284:	1029883a 	mov	r20,r2
 1028288:	b027883a 	mov	r19,r22
 102828c:	003fc006 	br	1028190 <_gp+0xfffea50c>
 1028290:	a005883a 	mov	r2,r20
 1028294:	003ede06 	br	1027e10 <_gp+0xfffea18c>
 1028298:	01000044 	movi	r4,1
 102829c:	d9000b15 	stw	r4,44(sp)
 10282a0:	d9802217 	ldw	r6,136(sp)
 10282a4:	0180dc0e 	bge	zero,r6,1028618 <_dtoa_r+0x1224>
 10282a8:	3023883a 	mov	r17,r6
 10282ac:	d9800d15 	stw	r6,52(sp)
 10282b0:	d9800615 	stw	r6,24(sp)
 10282b4:	003d1e06 	br	1027730 <_gp+0xfffe9aac>
 10282b8:	d8800617 	ldw	r2,24(sp)
 10282bc:	00be3716 	blt	zero,r2,1027b9c <_gp+0xfffe9f18>
 10282c0:	1000be1e 	bne	r2,zero,10285bc <_dtoa_r+0x11c8>
 10282c4:	8809883a 	mov	r4,r17
 10282c8:	a00b883a 	mov	r5,r20
 10282cc:	000d883a 	mov	r6,zero
 10282d0:	01d00534 	movhi	r7,16404
 10282d4:	10221cc0 	call	10221cc <__muldf3>
 10282d8:	1009883a 	mov	r4,r2
 10282dc:	180b883a 	mov	r5,r3
 10282e0:	900d883a 	mov	r6,r18
 10282e4:	980f883a 	mov	r7,r19
 10282e8:	103065c0 	call	103065c <__gedf2>
 10282ec:	002b883a 	mov	r21,zero
 10282f0:	0023883a 	mov	r17,zero
 10282f4:	10007a16 	blt	r2,zero,10284e0 <_dtoa_r+0x10ec>
 10282f8:	d9002217 	ldw	r4,136(sp)
 10282fc:	ddc00717 	ldw	r23,28(sp)
 1028300:	0108303a 	nor	r4,zero,r4
 1028304:	d9000515 	stw	r4,20(sp)
 1028308:	8009883a 	mov	r4,r16
 102830c:	a80b883a 	mov	r5,r21
 1028310:	102aac40 	call	102aac4 <_Bfree>
 1028314:	883f751e 	bne	r17,zero,10280ec <_gp+0xfffea468>
 1028318:	003de406 	br	1027aac <_gp+0xfffe9e28>
 102831c:	e00b883a 	mov	r5,fp
 1028320:	8009883a 	mov	r4,r16
 1028324:	102b0540 	call	102b054 <__pow5mult>
 1028328:	1039883a 	mov	fp,r2
 102832c:	003ed306 	br	1027e7c <_gp+0xfffea1f8>
 1028330:	903ee01e 	bne	r18,zero,1027eb4 <_gp+0xfffea230>
 1028334:	00800434 	movhi	r2,16
 1028338:	10bfffc4 	addi	r2,r2,-1
 102833c:	9884703a 	and	r2,r19,r2
 1028340:	103f081e 	bne	r2,zero,1027f64 <_gp+0xfffea2e0>
 1028344:	9cdffc2c 	andhi	r19,r19,32752
 1028348:	983f0626 	beq	r19,zero,1027f64 <_gp+0xfffea2e0>
 102834c:	d8800817 	ldw	r2,32(sp)
 1028350:	b5800044 	addi	r22,r22,1
 1028354:	04c00044 	movi	r19,1
 1028358:	10800044 	addi	r2,r2,1
 102835c:	d8800815 	stw	r2,32(sp)
 1028360:	003f0106 	br	1027f68 <_gp+0xfffea2e4>
 1028364:	d9800f17 	ldw	r6,60(sp)
 1028368:	30016826 	beq	r6,zero,102890c <_dtoa_r+0x1518>
 102836c:	10810cc4 	addi	r2,r2,1075
 1028370:	dd400917 	ldw	r21,36(sp)
 1028374:	dd000817 	ldw	r20,32(sp)
 1028378:	003e9906 	br	1027de0 <_gp+0xfffea15c>
 102837c:	9011883a 	mov	r8,r18
 1028380:	4007883a 	mov	r3,r8
 1028384:	e02d883a 	mov	r22,fp
 1028388:	0080100e 	bge	zero,r2,10283cc <_dtoa_r+0xfd8>
 102838c:	01800044 	movi	r6,1
 1028390:	8009883a 	mov	r4,r16
 1028394:	e00b883a 	mov	r5,fp
 1028398:	da001515 	stw	r8,84(sp)
 102839c:	da001715 	stw	r8,92(sp)
 10283a0:	102b1940 	call	102b194 <__lshift>
 10283a4:	1009883a 	mov	r4,r2
 10283a8:	a80b883a 	mov	r5,r21
 10283ac:	102d883a 	mov	r22,r2
 10283b0:	102b2dc0 	call	102b2dc <__mcmp>
 10283b4:	d8c01517 	ldw	r3,84(sp)
 10283b8:	da001717 	ldw	r8,92(sp)
 10283bc:	0081a50e 	bge	zero,r2,1028a54 <_dtoa_r+0x1660>
 10283c0:	00800e44 	movi	r2,57
 10283c4:	40817b26 	beq	r8,r2,10289b4 <_dtoa_r+0x15c0>
 10283c8:	40c00044 	addi	r3,r8,1
 10283cc:	8825883a 	mov	r18,r17
 10283d0:	9dc00044 	addi	r23,r19,1
 10283d4:	98c00005 	stb	r3,0(r19)
 10283d8:	a023883a 	mov	r17,r20
 10283dc:	b039883a 	mov	fp,r22
 10283e0:	003f3906 	br	10280c8 <_gp+0xfffea444>
 10283e4:	00800e44 	movi	r2,57
 10283e8:	9011883a 	mov	r8,r18
 10283ec:	90817226 	beq	r18,r2,10289b8 <_dtoa_r+0x15c4>
 10283f0:	0580010e 	bge	zero,r22,10283f8 <_dtoa_r+0x1004>
 10283f4:	ba000c44 	addi	r8,r23,49
 10283f8:	8825883a 	mov	r18,r17
 10283fc:	9dc00044 	addi	r23,r19,1
 1028400:	9a000005 	stb	r8,0(r19)
 1028404:	a023883a 	mov	r17,r20
 1028408:	003f2f06 	br	10280c8 <_gp+0xfffea444>
 102840c:	880b883a 	mov	r5,r17
 1028410:	8009883a 	mov	r4,r16
 1028414:	01800284 	movi	r6,10
 1028418:	000f883a 	mov	r7,zero
 102841c:	102aaec0 	call	102aaec <__multadd>
 1028420:	1023883a 	mov	r17,r2
 1028424:	1029883a 	mov	r20,r2
 1028428:	003f9706 	br	1028288 <_gp+0xfffea604>
 102842c:	8009883a 	mov	r4,r16
 1028430:	180b883a 	mov	r5,r3
 1028434:	102aac40 	call	102aac4 <_Bfree>
 1028438:	00800044 	movi	r2,1
 102843c:	003f7306 	br	102820c <_gp+0xfffea588>
 1028440:	e009883a 	mov	r4,fp
 1028444:	a80b883a 	mov	r5,r21
 1028448:	102b2dc0 	call	102b2dc <__mcmp>
 102844c:	103ee60e 	bge	r2,zero,1027fe8 <_gp+0xfffea364>
 1028450:	8009883a 	mov	r4,r16
 1028454:	e00b883a 	mov	r5,fp
 1028458:	01800284 	movi	r6,10
 102845c:	000f883a 	mov	r7,zero
 1028460:	102aaec0 	call	102aaec <__multadd>
 1028464:	d9000517 	ldw	r4,20(sp)
 1028468:	d9800b17 	ldw	r6,44(sp)
 102846c:	1039883a 	mov	fp,r2
 1028470:	213fffc4 	addi	r4,r4,-1
 1028474:	d9000515 	stw	r4,20(sp)
 1028478:	303f2d1e 	bne	r6,zero,1028130 <_gp+0xfffea4ac>
 102847c:	d9000d17 	ldw	r4,52(sp)
 1028480:	0101780e 	bge	zero,r4,1028a64 <_dtoa_r+0x1670>
 1028484:	d9000615 	stw	r4,24(sp)
 1028488:	003edb06 	br	1027ff8 <_gp+0xfffea374>
 102848c:	00800084 	movi	r2,2
 1028490:	30818e1e 	bne	r6,r2,1028acc <_dtoa_r+0x16d8>
 1028494:	d8000b15 	stw	zero,44(sp)
 1028498:	003f8106 	br	10282a0 <_gp+0xfffea61c>
 102849c:	d8800717 	ldw	r2,28(sp)
 10284a0:	003c0306 	br	10274b0 <_gp+0xfffe982c>
 10284a4:	d9000317 	ldw	r4,12(sp)
 10284a8:	00800084 	movi	r2,2
 10284ac:	113ed00e 	bge	r2,r4,1027ff0 <_gp+0xfffea36c>
 10284b0:	d8c00617 	ldw	r3,24(sp)
 10284b4:	183f901e 	bne	r3,zero,10282f8 <_gp+0xfffea674>
 10284b8:	a80b883a 	mov	r5,r21
 10284bc:	8009883a 	mov	r4,r16
 10284c0:	01800144 	movi	r6,5
 10284c4:	000f883a 	mov	r7,zero
 10284c8:	102aaec0 	call	102aaec <__multadd>
 10284cc:	e009883a 	mov	r4,fp
 10284d0:	100b883a 	mov	r5,r2
 10284d4:	102b883a 	mov	r21,r2
 10284d8:	102b2dc0 	call	102b2dc <__mcmp>
 10284dc:	00bf860e 	bge	zero,r2,10282f8 <_gp+0xfffea674>
 10284e0:	d9800717 	ldw	r6,28(sp)
 10284e4:	00800c44 	movi	r2,49
 10284e8:	30800005 	stb	r2,0(r6)
 10284ec:	d8800517 	ldw	r2,20(sp)
 10284f0:	35c00044 	addi	r23,r6,1
 10284f4:	10800044 	addi	r2,r2,1
 10284f8:	d8800515 	stw	r2,20(sp)
 10284fc:	003f8206 	br	1028308 <_gp+0xfffea684>
 1028500:	903e981e 	bne	r18,zero,1027f64 <_gp+0xfffea2e0>
 1028504:	003f8b06 	br	1028334 <_gp+0xfffea6b0>
 1028508:	d9800517 	ldw	r6,20(sp)
 102850c:	d8c00717 	ldw	r3,28(sp)
 1028510:	00800c44 	movi	r2,49
 1028514:	31800044 	addi	r6,r6,1
 1028518:	d9800515 	stw	r6,20(sp)
 102851c:	18800005 	stb	r2,0(r3)
 1028520:	003ee906 	br	10280c8 <_gp+0xfffea444>
 1028524:	dc000317 	ldw	r16,12(sp)
 1028528:	003d6006 	br	1027aac <_gp+0xfffe9e28>
 102852c:	8809883a 	mov	r4,r17
 1028530:	10229780 	call	1022978 <__floatsidf>
 1028534:	a009883a 	mov	r4,r20
 1028538:	a80b883a 	mov	r5,r21
 102853c:	100d883a 	mov	r6,r2
 1028540:	180f883a 	mov	r7,r3
 1028544:	10221cc0 	call	10221cc <__muldf3>
 1028548:	1009883a 	mov	r4,r2
 102854c:	180b883a 	mov	r5,r3
 1028550:	000d883a 	mov	r6,zero
 1028554:	01d00734 	movhi	r7,16412
 1028558:	102fd3c0 	call	102fd3c <__adddf3>
 102855c:	1023883a 	mov	r17,r2
 1028560:	00bf3034 	movhi	r2,64704
 1028564:	1885883a 	add	r2,r3,r2
 1028568:	d8800e15 	stw	r2,56(sp)
 102856c:	a009883a 	mov	r4,r20
 1028570:	a80b883a 	mov	r5,r21
 1028574:	000d883a 	mov	r6,zero
 1028578:	01d00534 	movhi	r7,16404
 102857c:	103081c0 	call	103081c <__subdf3>
 1028580:	d9c00e17 	ldw	r7,56(sp)
 1028584:	1009883a 	mov	r4,r2
 1028588:	180b883a 	mov	r5,r3
 102858c:	880d883a 	mov	r6,r17
 1028590:	102b883a 	mov	r21,r2
 1028594:	1829883a 	mov	r20,r3
 1028598:	103065c0 	call	103065c <__gedf2>
 102859c:	00807716 	blt	zero,r2,102877c <_dtoa_r+0x1388>
 10285a0:	d8800e17 	ldw	r2,56(sp)
 10285a4:	a809883a 	mov	r4,r21
 10285a8:	a00b883a 	mov	r5,r20
 10285ac:	11e0003c 	xorhi	r7,r2,32768
 10285b0:	880d883a 	mov	r6,r17
 10285b4:	103073c0 	call	103073c <__ledf2>
 10285b8:	103d6b0e 	bge	r2,zero,1027b68 <_gp+0xfffe9ee4>
 10285bc:	002b883a 	mov	r21,zero
 10285c0:	0023883a 	mov	r17,zero
 10285c4:	003f4c06 	br	10282f8 <_gp+0xfffea674>
 10285c8:	d9800917 	ldw	r6,36(sp)
 10285cc:	e00b883a 	mov	r5,fp
 10285d0:	8009883a 	mov	r4,r16
 10285d4:	102b0540 	call	102b054 <__pow5mult>
 10285d8:	1039883a 	mov	fp,r2
 10285dc:	003e2706 	br	1027e7c <_gp+0xfffea1f8>
 10285e0:	d8000b15 	stw	zero,44(sp)
 10285e4:	003c4906 	br	102770c <_gp+0xfffe9a88>
 10285e8:	d9000917 	ldw	r4,36(sp)
 10285ec:	d9800a17 	ldw	r6,40(sp)
 10285f0:	dd400915 	stw	r21,36(sp)
 10285f4:	a905c83a 	sub	r2,r21,r4
 10285f8:	308d883a 	add	r6,r6,r2
 10285fc:	d9800a15 	stw	r6,40(sp)
 1028600:	002b883a 	mov	r21,zero
 1028604:	003df206 	br	1027dd0 <_gp+0xfffea14c>
 1028608:	dc800e15 	stw	r18,56(sp)
 102860c:	982b883a 	mov	r21,r19
 1028610:	04400084 	movi	r17,2
 1028614:	003c7406 	br	10277e8 <_gp+0xfffe9b64>
 1028618:	04400044 	movi	r17,1
 102861c:	dc400d15 	stw	r17,52(sp)
 1028620:	dc400615 	stw	r17,24(sp)
 1028624:	dc402215 	stw	r17,136(sp)
 1028628:	80001115 	stw	zero,68(r16)
 102862c:	000b883a 	mov	r5,zero
 1028630:	003c4a06 	br	102775c <_gp+0xfffe9ad8>
 1028634:	3023883a 	mov	r17,r6
 1028638:	003ffb06 	br	1028628 <_gp+0xfffea9a4>
 102863c:	1000021e 	bne	r2,zero,1028648 <_dtoa_r+0x1254>
 1028640:	4200004c 	andi	r8,r8,1
 1028644:	403e8f1e 	bne	r8,zero,1028084 <_gp+0xfffea400>
 1028648:	01000c04 	movi	r4,48
 102864c:	00000106 	br	1028654 <_dtoa_r+0x1260>
 1028650:	102f883a 	mov	r23,r2
 1028654:	b8bfffc4 	addi	r2,r23,-1
 1028658:	10c00007 	ldb	r3,0(r2)
 102865c:	193ffc26 	beq	r3,r4,1028650 <_gp+0xfffea9cc>
 1028660:	003e9906 	br	10280c8 <_gp+0xfffea444>
 1028664:	d9000517 	ldw	r4,20(sp)
 1028668:	012fc83a 	sub	r23,zero,r4
 102866c:	b800ad26 	beq	r23,zero,1028924 <_dtoa_r+0x1530>
 1028670:	b88003cc 	andi	r2,r23,15
 1028674:	100490fa 	slli	r2,r2,3
 1028678:	00c040f4 	movhi	r3,259
 102867c:	18d02904 	addi	r3,r3,16548
 1028680:	1885883a 	add	r2,r3,r2
 1028684:	11800017 	ldw	r6,0(r2)
 1028688:	11c00117 	ldw	r7,4(r2)
 102868c:	b82fd13a 	srai	r23,r23,4
 1028690:	9009883a 	mov	r4,r18
 1028694:	980b883a 	mov	r5,r19
 1028698:	10221cc0 	call	10221cc <__muldf3>
 102869c:	1029883a 	mov	r20,r2
 10286a0:	182b883a 	mov	r21,r3
 10286a4:	b800f426 	beq	r23,zero,1028a78 <_dtoa_r+0x1684>
 10286a8:	020040f4 	movhi	r8,259
 10286ac:	42101f04 	addi	r8,r8,16508
 10286b0:	8029883a 	mov	r20,r16
 10286b4:	04400084 	movi	r17,2
 10286b8:	4021883a 	mov	r16,r8
 10286bc:	b980004c 	andi	r6,r23,1
 10286c0:	1009883a 	mov	r4,r2
 10286c4:	b82fd07a 	srai	r23,r23,1
 10286c8:	180b883a 	mov	r5,r3
 10286cc:	30000426 	beq	r6,zero,10286e0 <_dtoa_r+0x12ec>
 10286d0:	81800017 	ldw	r6,0(r16)
 10286d4:	81c00117 	ldw	r7,4(r16)
 10286d8:	8c400044 	addi	r17,r17,1
 10286dc:	10221cc0 	call	10221cc <__muldf3>
 10286e0:	84000204 	addi	r16,r16,8
 10286e4:	b83ff51e 	bne	r23,zero,10286bc <_gp+0xfffeaa38>
 10286e8:	a021883a 	mov	r16,r20
 10286ec:	182b883a 	mov	r21,r3
 10286f0:	1029883a 	mov	r20,r2
 10286f4:	003c5506 	br	102784c <_gp+0xfffe9bc8>
 10286f8:	d9800517 	ldw	r6,20(sp)
 10286fc:	d9000717 	ldw	r4,28(sp)
 1028700:	00c00c04 	movi	r3,48
 1028704:	31800044 	addi	r6,r6,1
 1028708:	d9800515 	stw	r6,20(sp)
 102870c:	20c00005 	stb	r3,0(r4)
 1028710:	02000c44 	movi	r8,49
 1028714:	003da206 	br	1027da0 <_gp+0xfffea11c>
 1028718:	89400117 	ldw	r5,4(r17)
 102871c:	8009883a 	mov	r4,r16
 1028720:	102aa1c0 	call	102aa1c <_Balloc>
 1028724:	89800417 	ldw	r6,16(r17)
 1028728:	11000304 	addi	r4,r2,12
 102872c:	89400304 	addi	r5,r17,12
 1028730:	31800084 	addi	r6,r6,2
 1028734:	318d883a 	add	r6,r6,r6
 1028738:	318d883a 	add	r6,r6,r6
 102873c:	1027883a 	mov	r19,r2
 1028740:	102a6640 	call	102a664 <memcpy>
 1028744:	8009883a 	mov	r4,r16
 1028748:	980b883a 	mov	r5,r19
 102874c:	01800044 	movi	r6,1
 1028750:	102b1940 	call	102b194 <__lshift>
 1028754:	1029883a 	mov	r20,r2
 1028758:	003e8606 	br	1028174 <_gp+0xfffea4f0>
 102875c:	00800e44 	movi	r2,57
 1028760:	90809526 	beq	r18,r2,10289b8 <_dtoa_r+0x15c4>
 1028764:	92000044 	addi	r8,r18,1
 1028768:	003f2306 	br	10283f8 <_gp+0xfffea774>
 102876c:	9011883a 	mov	r8,r18
 1028770:	8825883a 	mov	r18,r17
 1028774:	a023883a 	mov	r17,r20
 1028778:	003e3706 	br	1028058 <_gp+0xfffea3d4>
 102877c:	002b883a 	mov	r21,zero
 1028780:	0023883a 	mov	r17,zero
 1028784:	003f5606 	br	10284e0 <_gp+0xfffea85c>
 1028788:	51bfffc4 	addi	r6,r10,-1
 102878c:	300490fa 	slli	r2,r6,3
 1028790:	00c040f4 	movhi	r3,259
 1028794:	18d02904 	addi	r3,r3,16548
 1028798:	1885883a 	add	r2,r3,r2
 102879c:	d9c00e17 	ldw	r7,56(sp)
 10287a0:	11000017 	ldw	r4,0(r2)
 10287a4:	11400117 	ldw	r5,4(r2)
 10287a8:	d8800717 	ldw	r2,28(sp)
 10287ac:	d9801015 	stw	r6,64(sp)
 10287b0:	880d883a 	mov	r6,r17
 10287b4:	da801615 	stw	r10,88(sp)
 10287b8:	15c00044 	addi	r23,r2,1
 10287bc:	10221cc0 	call	10221cc <__muldf3>
 10287c0:	a80b883a 	mov	r5,r21
 10287c4:	a009883a 	mov	r4,r20
 10287c8:	d8c01115 	stw	r3,68(sp)
 10287cc:	d8800e15 	stw	r2,56(sp)
 10287d0:	10228f00 	call	10228f0 <__fixdfsi>
 10287d4:	1009883a 	mov	r4,r2
 10287d8:	1023883a 	mov	r17,r2
 10287dc:	10229780 	call	1022978 <__floatsidf>
 10287e0:	a009883a 	mov	r4,r20
 10287e4:	a80b883a 	mov	r5,r21
 10287e8:	100d883a 	mov	r6,r2
 10287ec:	180f883a 	mov	r7,r3
 10287f0:	103081c0 	call	103081c <__subdf3>
 10287f4:	1813883a 	mov	r9,r3
 10287f8:	d8c00717 	ldw	r3,28(sp)
 10287fc:	8c400c04 	addi	r17,r17,48
 1028800:	1011883a 	mov	r8,r2
 1028804:	1c400005 	stb	r17,0(r3)
 1028808:	da801617 	ldw	r10,88(sp)
 102880c:	00800044 	movi	r2,1
 1028810:	50802326 	beq	r10,r2,10288a0 <_dtoa_r+0x14ac>
 1028814:	d8800717 	ldw	r2,28(sp)
 1028818:	b82b883a 	mov	r21,r23
 102881c:	dc001315 	stw	r16,76(sp)
 1028820:	12a9883a 	add	r20,r2,r10
 1028824:	4807883a 	mov	r3,r9
 1028828:	4005883a 	mov	r2,r8
 102882c:	dc801415 	stw	r18,80(sp)
 1028830:	000d883a 	mov	r6,zero
 1028834:	01d00934 	movhi	r7,16420
 1028838:	1009883a 	mov	r4,r2
 102883c:	180b883a 	mov	r5,r3
 1028840:	10221cc0 	call	10221cc <__muldf3>
 1028844:	180b883a 	mov	r5,r3
 1028848:	1009883a 	mov	r4,r2
 102884c:	1821883a 	mov	r16,r3
 1028850:	1025883a 	mov	r18,r2
 1028854:	10228f00 	call	10228f0 <__fixdfsi>
 1028858:	1009883a 	mov	r4,r2
 102885c:	1023883a 	mov	r17,r2
 1028860:	10229780 	call	1022978 <__floatsidf>
 1028864:	9009883a 	mov	r4,r18
 1028868:	800b883a 	mov	r5,r16
 102886c:	100d883a 	mov	r6,r2
 1028870:	180f883a 	mov	r7,r3
 1028874:	8c400c04 	addi	r17,r17,48
 1028878:	103081c0 	call	103081c <__subdf3>
 102887c:	ad400044 	addi	r21,r21,1
 1028880:	ac7fffc5 	stb	r17,-1(r21)
 1028884:	ad3fea1e 	bne	r21,r20,1028830 <_gp+0xfffeabac>
 1028888:	1813883a 	mov	r9,r3
 102888c:	d8c01017 	ldw	r3,64(sp)
 1028890:	dc001317 	ldw	r16,76(sp)
 1028894:	dc801417 	ldw	r18,80(sp)
 1028898:	1011883a 	mov	r8,r2
 102889c:	b8ef883a 	add	r23,r23,r3
 10288a0:	d9000e17 	ldw	r4,56(sp)
 10288a4:	d9401117 	ldw	r5,68(sp)
 10288a8:	000d883a 	mov	r6,zero
 10288ac:	01cff834 	movhi	r7,16352
 10288b0:	da001715 	stw	r8,92(sp)
 10288b4:	da401515 	stw	r9,84(sp)
 10288b8:	102fd3c0 	call	102fd3c <__adddf3>
 10288bc:	da001717 	ldw	r8,92(sp)
 10288c0:	da401517 	ldw	r9,84(sp)
 10288c4:	1009883a 	mov	r4,r2
 10288c8:	400d883a 	mov	r6,r8
 10288cc:	480f883a 	mov	r7,r9
 10288d0:	180b883a 	mov	r5,r3
 10288d4:	103073c0 	call	103073c <__ledf2>
 10288d8:	da001717 	ldw	r8,92(sp)
 10288dc:	da401517 	ldw	r9,84(sp)
 10288e0:	10003b0e 	bge	r2,zero,10289d0 <_dtoa_r+0x15dc>
 10288e4:	d9001217 	ldw	r4,72(sp)
 10288e8:	bd7fffc3 	ldbu	r21,-1(r23)
 10288ec:	d9000515 	stw	r4,20(sp)
 10288f0:	003d1c06 	br	1027d64 <_gp+0xfffea0e0>
 10288f4:	d8c00817 	ldw	r3,32(sp)
 10288f8:	18a9c83a 	sub	r20,r3,r2
 10288fc:	0005883a 	mov	r2,zero
 1028900:	003d3706 	br	1027de0 <_gp+0xfffea15c>
 1028904:	00800044 	movi	r2,1
 1028908:	003dd006 	br	102804c <_gp+0xfffea3c8>
 102890c:	d8c00217 	ldw	r3,8(sp)
 1028910:	00800d84 	movi	r2,54
 1028914:	dd400917 	ldw	r21,36(sp)
 1028918:	10c5c83a 	sub	r2,r2,r3
 102891c:	dd000817 	ldw	r20,32(sp)
 1028920:	003d2f06 	br	1027de0 <_gp+0xfffea15c>
 1028924:	9029883a 	mov	r20,r18
 1028928:	982b883a 	mov	r21,r19
 102892c:	04400084 	movi	r17,2
 1028930:	003bc606 	br	102784c <_gp+0xfffe9bc8>
 1028934:	d8800617 	ldw	r2,24(sp)
 1028938:	103efc26 	beq	r2,zero,102852c <_gp+0xfffea8a8>
 102893c:	d8c00d17 	ldw	r3,52(sp)
 1028940:	00fc890e 	bge	zero,r3,1027b68 <_gp+0xfffe9ee4>
 1028944:	a80b883a 	mov	r5,r21
 1028948:	a009883a 	mov	r4,r20
 102894c:	000d883a 	mov	r6,zero
 1028950:	01d00934 	movhi	r7,16420
 1028954:	10221cc0 	call	10221cc <__muldf3>
 1028958:	89000044 	addi	r4,r17,1
 102895c:	1029883a 	mov	r20,r2
 1028960:	182b883a 	mov	r21,r3
 1028964:	10229780 	call	1022978 <__floatsidf>
 1028968:	a009883a 	mov	r4,r20
 102896c:	a80b883a 	mov	r5,r21
 1028970:	100d883a 	mov	r6,r2
 1028974:	180f883a 	mov	r7,r3
 1028978:	10221cc0 	call	10221cc <__muldf3>
 102897c:	1009883a 	mov	r4,r2
 1028980:	180b883a 	mov	r5,r3
 1028984:	000d883a 	mov	r6,zero
 1028988:	01d00734 	movhi	r7,16412
 102898c:	102fd3c0 	call	102fd3c <__adddf3>
 1028990:	d9000517 	ldw	r4,20(sp)
 1028994:	1023883a 	mov	r17,r2
 1028998:	00bf3034 	movhi	r2,64704
 102899c:	213fffc4 	addi	r4,r4,-1
 10289a0:	1885883a 	add	r2,r3,r2
 10289a4:	d9001215 	stw	r4,72(sp)
 10289a8:	d8800e15 	stw	r2,56(sp)
 10289ac:	da800d17 	ldw	r10,52(sp)
 10289b0:	003bc306 	br	10278c0 <_gp+0xfffe9c3c>
 10289b4:	b039883a 	mov	fp,r22
 10289b8:	01000e44 	movi	r4,57
 10289bc:	8825883a 	mov	r18,r17
 10289c0:	9dc00044 	addi	r23,r19,1
 10289c4:	99000005 	stb	r4,0(r19)
 10289c8:	a023883a 	mov	r17,r20
 10289cc:	003dae06 	br	1028088 <_gp+0xfffea404>
 10289d0:	d9800e17 	ldw	r6,56(sp)
 10289d4:	d9c01117 	ldw	r7,68(sp)
 10289d8:	0009883a 	mov	r4,zero
 10289dc:	014ff834 	movhi	r5,16352
 10289e0:	da001715 	stw	r8,92(sp)
 10289e4:	da401515 	stw	r9,84(sp)
 10289e8:	103081c0 	call	103081c <__subdf3>
 10289ec:	da001717 	ldw	r8,92(sp)
 10289f0:	da401517 	ldw	r9,84(sp)
 10289f4:	1009883a 	mov	r4,r2
 10289f8:	180b883a 	mov	r5,r3
 10289fc:	400d883a 	mov	r6,r8
 1028a00:	480f883a 	mov	r7,r9
 1028a04:	103065c0 	call	103065c <__gedf2>
 1028a08:	00bc570e 	bge	zero,r2,1027b68 <_gp+0xfffe9ee4>
 1028a0c:	01000c04 	movi	r4,48
 1028a10:	00000106 	br	1028a18 <_dtoa_r+0x1624>
 1028a14:	102f883a 	mov	r23,r2
 1028a18:	b8bfffc4 	addi	r2,r23,-1
 1028a1c:	10c00007 	ldb	r3,0(r2)
 1028a20:	193ffc26 	beq	r3,r4,1028a14 <_gp+0xfffead90>
 1028a24:	d9801217 	ldw	r6,72(sp)
 1028a28:	d9800515 	stw	r6,20(sp)
 1028a2c:	003c1f06 	br	1027aac <_gp+0xfffe9e28>
 1028a30:	d8801217 	ldw	r2,72(sp)
 1028a34:	dc001117 	ldw	r16,68(sp)
 1028a38:	d8800515 	stw	r2,20(sp)
 1028a3c:	003cc906 	br	1027d64 <_gp+0xfffea0e0>
 1028a40:	dd801317 	ldw	r22,76(sp)
 1028a44:	dc001117 	ldw	r16,68(sp)
 1028a48:	dcc01417 	ldw	r19,80(sp)
 1028a4c:	dc801017 	ldw	r18,64(sp)
 1028a50:	003c4506 	br	1027b68 <_gp+0xfffe9ee4>
 1028a54:	103e5d1e 	bne	r2,zero,10283cc <_gp+0xfffea748>
 1028a58:	4080004c 	andi	r2,r8,1
 1028a5c:	103e5b26 	beq	r2,zero,10283cc <_gp+0xfffea748>
 1028a60:	003e5706 	br	10283c0 <_gp+0xfffea73c>
 1028a64:	d8c00317 	ldw	r3,12(sp)
 1028a68:	00800084 	movi	r2,2
 1028a6c:	10c00a16 	blt	r2,r3,1028a98 <_dtoa_r+0x16a4>
 1028a70:	d9000d17 	ldw	r4,52(sp)
 1028a74:	003e8306 	br	1028484 <_gp+0xfffea800>
 1028a78:	04400084 	movi	r17,2
 1028a7c:	003b7306 	br	102784c <_gp+0xfffe9bc8>
 1028a80:	d9801217 	ldw	r6,72(sp)
 1028a84:	d9800515 	stw	r6,20(sp)
 1028a88:	003cb606 	br	1027d64 <_gp+0xfffea0e0>
 1028a8c:	d9001217 	ldw	r4,72(sp)
 1028a90:	d9000515 	stw	r4,20(sp)
 1028a94:	003c0506 	br	1027aac <_gp+0xfffe9e28>
 1028a98:	d9800d17 	ldw	r6,52(sp)
 1028a9c:	d9800615 	stw	r6,24(sp)
 1028aa0:	003e8306 	br	10284b0 <_gp+0xfffea82c>
 1028aa4:	d9800317 	ldw	r6,12(sp)
 1028aa8:	00800084 	movi	r2,2
 1028aac:	11800216 	blt	r2,r6,1028ab8 <_dtoa_r+0x16c4>
 1028ab0:	d8800d17 	ldw	r2,52(sp)
 1028ab4:	003da606 	br	1028150 <_gp+0xfffea4cc>
 1028ab8:	d8800d17 	ldw	r2,52(sp)
 1028abc:	d8800615 	stw	r2,24(sp)
 1028ac0:	003e7b06 	br	10284b0 <_gp+0xfffea82c>
 1028ac4:	05000044 	movi	r20,1
 1028ac8:	003b0506 	br	10276e0 <_gp+0xfffe9a5c>
 1028acc:	8009883a 	mov	r4,r16
 1028ad0:	80001115 	stw	zero,68(r16)
 1028ad4:	000b883a 	mov	r5,zero
 1028ad8:	102aa1c0 	call	102aa1c <_Balloc>
 1028adc:	d8800715 	stw	r2,28(sp)
 1028ae0:	d8c00717 	ldw	r3,28(sp)
 1028ae4:	00bfffc4 	movi	r2,-1
 1028ae8:	01000044 	movi	r4,1
 1028aec:	d8800615 	stw	r2,24(sp)
 1028af0:	80c01015 	stw	r3,64(r16)
 1028af4:	d9000b15 	stw	r4,44(sp)
 1028af8:	d8002215 	stw	zero,136(sp)
 1028afc:	d8800d15 	stw	r2,52(sp)
 1028b00:	003c1906 	br	1027b68 <_gp+0xfffe9ee4>
 1028b04:	193d2926 	beq	r3,r4,1027fac <_gp+0xfffea328>
 1028b08:	00c00f04 	movi	r3,60
 1028b0c:	1885c83a 	sub	r2,r3,r2
 1028b10:	003d7b06 	br	1028100 <_gp+0xfffea47c>
 1028b14:	000b883a 	mov	r5,zero
 1028b18:	003b1006 	br	102775c <_gp+0xfffe9ad8>

01028b1c <_fflush_r>:
 1028b1c:	defffb04 	addi	sp,sp,-20
 1028b20:	dcc00315 	stw	r19,12(sp)
 1028b24:	dc000015 	stw	r16,0(sp)
 1028b28:	dfc00415 	stw	ra,16(sp)
 1028b2c:	dc800215 	stw	r18,8(sp)
 1028b30:	dc400115 	stw	r17,4(sp)
 1028b34:	2027883a 	mov	r19,r4
 1028b38:	2821883a 	mov	r16,r5
 1028b3c:	20000226 	beq	r4,zero,1028b48 <_fflush_r+0x2c>
 1028b40:	20800e17 	ldw	r2,56(r4)
 1028b44:	10005326 	beq	r2,zero,1028c94 <_fflush_r+0x178>
 1028b48:	8080030b 	ldhu	r2,12(r16)
 1028b4c:	10ffffcc 	andi	r3,r2,65535
 1028b50:	18e0001c 	xori	r3,r3,32768
 1028b54:	18e00004 	addi	r3,r3,-32768
 1028b58:	18002c26 	beq	r3,zero,1028c0c <_fflush_r+0xf0>
 1028b5c:	10c0020c 	andi	r3,r2,8
 1028b60:	1800321e 	bne	r3,zero,1028c2c <_fflush_r+0x110>
 1028b64:	80c00117 	ldw	r3,4(r16)
 1028b68:	10820014 	ori	r2,r2,2048
 1028b6c:	8080030d 	sth	r2,12(r16)
 1028b70:	00c0570e 	bge	zero,r3,1028cd0 <_fflush_r+0x1b4>
 1028b74:	82000a17 	ldw	r8,40(r16)
 1028b78:	40002426 	beq	r8,zero,1028c0c <_fflush_r+0xf0>
 1028b7c:	9c400017 	ldw	r17,0(r19)
 1028b80:	10c4000c 	andi	r3,r2,4096
 1028b84:	98000015 	stw	zero,0(r19)
 1028b88:	18004626 	beq	r3,zero,1028ca4 <_fflush_r+0x188>
 1028b8c:	81801417 	ldw	r6,80(r16)
 1028b90:	10c0010c 	andi	r3,r2,4
 1028b94:	18000626 	beq	r3,zero,1028bb0 <_fflush_r+0x94>
 1028b98:	80c00117 	ldw	r3,4(r16)
 1028b9c:	80800c17 	ldw	r2,48(r16)
 1028ba0:	30cdc83a 	sub	r6,r6,r3
 1028ba4:	10000226 	beq	r2,zero,1028bb0 <_fflush_r+0x94>
 1028ba8:	80800f17 	ldw	r2,60(r16)
 1028bac:	308dc83a 	sub	r6,r6,r2
 1028bb0:	81400717 	ldw	r5,28(r16)
 1028bb4:	9809883a 	mov	r4,r19
 1028bb8:	000f883a 	mov	r7,zero
 1028bbc:	403ee83a 	callr	r8
 1028bc0:	00ffffc4 	movi	r3,-1
 1028bc4:	10c04526 	beq	r2,r3,1028cdc <_fflush_r+0x1c0>
 1028bc8:	80c0030b 	ldhu	r3,12(r16)
 1028bcc:	81000417 	ldw	r4,16(r16)
 1028bd0:	80000115 	stw	zero,4(r16)
 1028bd4:	197dffcc 	andi	r5,r3,63487
 1028bd8:	8140030d 	sth	r5,12(r16)
 1028bdc:	81000015 	stw	r4,0(r16)
 1028be0:	18c4000c 	andi	r3,r3,4096
 1028be4:	18000126 	beq	r3,zero,1028bec <_fflush_r+0xd0>
 1028be8:	80801415 	stw	r2,80(r16)
 1028bec:	81400c17 	ldw	r5,48(r16)
 1028bf0:	9c400015 	stw	r17,0(r19)
 1028bf4:	28000526 	beq	r5,zero,1028c0c <_fflush_r+0xf0>
 1028bf8:	80801004 	addi	r2,r16,64
 1028bfc:	28800226 	beq	r5,r2,1028c08 <_fflush_r+0xec>
 1028c00:	9809883a 	mov	r4,r19
 1028c04:	10292380 	call	1029238 <_free_r>
 1028c08:	80000c15 	stw	zero,48(r16)
 1028c0c:	0005883a 	mov	r2,zero
 1028c10:	dfc00417 	ldw	ra,16(sp)
 1028c14:	dcc00317 	ldw	r19,12(sp)
 1028c18:	dc800217 	ldw	r18,8(sp)
 1028c1c:	dc400117 	ldw	r17,4(sp)
 1028c20:	dc000017 	ldw	r16,0(sp)
 1028c24:	dec00504 	addi	sp,sp,20
 1028c28:	f800283a 	ret
 1028c2c:	84800417 	ldw	r18,16(r16)
 1028c30:	903ff626 	beq	r18,zero,1028c0c <_gp+0xfffeaf88>
 1028c34:	84400017 	ldw	r17,0(r16)
 1028c38:	108000cc 	andi	r2,r2,3
 1028c3c:	84800015 	stw	r18,0(r16)
 1028c40:	8ca3c83a 	sub	r17,r17,r18
 1028c44:	10001526 	beq	r2,zero,1028c9c <_fflush_r+0x180>
 1028c48:	0005883a 	mov	r2,zero
 1028c4c:	80800215 	stw	r2,8(r16)
 1028c50:	04400316 	blt	zero,r17,1028c60 <_fflush_r+0x144>
 1028c54:	003fed06 	br	1028c0c <_gp+0xfffeaf88>
 1028c58:	90a5883a 	add	r18,r18,r2
 1028c5c:	047feb0e 	bge	zero,r17,1028c0c <_gp+0xfffeaf88>
 1028c60:	80800917 	ldw	r2,36(r16)
 1028c64:	81400717 	ldw	r5,28(r16)
 1028c68:	880f883a 	mov	r7,r17
 1028c6c:	900d883a 	mov	r6,r18
 1028c70:	9809883a 	mov	r4,r19
 1028c74:	103ee83a 	callr	r2
 1028c78:	88a3c83a 	sub	r17,r17,r2
 1028c7c:	00bff616 	blt	zero,r2,1028c58 <_gp+0xfffeafd4>
 1028c80:	80c0030b 	ldhu	r3,12(r16)
 1028c84:	00bfffc4 	movi	r2,-1
 1028c88:	18c01014 	ori	r3,r3,64
 1028c8c:	80c0030d 	sth	r3,12(r16)
 1028c90:	003fdf06 	br	1028c10 <_gp+0xfffeaf8c>
 1028c94:	10290c40 	call	10290c4 <__sinit>
 1028c98:	003fab06 	br	1028b48 <_gp+0xfffeaec4>
 1028c9c:	80800517 	ldw	r2,20(r16)
 1028ca0:	003fea06 	br	1028c4c <_gp+0xfffeafc8>
 1028ca4:	81400717 	ldw	r5,28(r16)
 1028ca8:	000d883a 	mov	r6,zero
 1028cac:	9809883a 	mov	r4,r19
 1028cb0:	01c00044 	movi	r7,1
 1028cb4:	403ee83a 	callr	r8
 1028cb8:	100d883a 	mov	r6,r2
 1028cbc:	00bfffc4 	movi	r2,-1
 1028cc0:	30801326 	beq	r6,r2,1028d10 <_fflush_r+0x1f4>
 1028cc4:	8080030b 	ldhu	r2,12(r16)
 1028cc8:	82000a17 	ldw	r8,40(r16)
 1028ccc:	003fb006 	br	1028b90 <_gp+0xfffeaf0c>
 1028cd0:	80c00f17 	ldw	r3,60(r16)
 1028cd4:	00ffa716 	blt	zero,r3,1028b74 <_gp+0xfffeaef0>
 1028cd8:	003fcc06 	br	1028c0c <_gp+0xfffeaf88>
 1028cdc:	98c00017 	ldw	r3,0(r19)
 1028ce0:	183fb926 	beq	r3,zero,1028bc8 <_gp+0xfffeaf44>
 1028ce4:	01000744 	movi	r4,29
 1028ce8:	19000226 	beq	r3,r4,1028cf4 <_fflush_r+0x1d8>
 1028cec:	01000584 	movi	r4,22
 1028cf0:	1900101e 	bne	r3,r4,1028d34 <_fflush_r+0x218>
 1028cf4:	8080030b 	ldhu	r2,12(r16)
 1028cf8:	80c00417 	ldw	r3,16(r16)
 1028cfc:	80000115 	stw	zero,4(r16)
 1028d00:	10bdffcc 	andi	r2,r2,63487
 1028d04:	8080030d 	sth	r2,12(r16)
 1028d08:	80c00015 	stw	r3,0(r16)
 1028d0c:	003fb706 	br	1028bec <_gp+0xfffeaf68>
 1028d10:	98800017 	ldw	r2,0(r19)
 1028d14:	103feb26 	beq	r2,zero,1028cc4 <_gp+0xfffeb040>
 1028d18:	00c00744 	movi	r3,29
 1028d1c:	10c00226 	beq	r2,r3,1028d28 <_fflush_r+0x20c>
 1028d20:	00c00584 	movi	r3,22
 1028d24:	10ffd61e 	bne	r2,r3,1028c80 <_gp+0xfffeaffc>
 1028d28:	9c400015 	stw	r17,0(r19)
 1028d2c:	0005883a 	mov	r2,zero
 1028d30:	003fb706 	br	1028c10 <_gp+0xfffeaf8c>
 1028d34:	80c0030b 	ldhu	r3,12(r16)
 1028d38:	18c01014 	ori	r3,r3,64
 1028d3c:	80c0030d 	sth	r3,12(r16)
 1028d40:	003fb306 	br	1028c10 <_gp+0xfffeaf8c>

01028d44 <fflush>:
 1028d44:	20000526 	beq	r4,zero,1028d5c <fflush+0x18>
 1028d48:	008040f4 	movhi	r2,259
 1028d4c:	10972204 	addi	r2,r2,23688
 1028d50:	200b883a 	mov	r5,r4
 1028d54:	11000017 	ldw	r4,0(r2)
 1028d58:	1028b1c1 	jmpi	1028b1c <_fflush_r>
 1028d5c:	008040f4 	movhi	r2,259
 1028d60:	10972104 	addi	r2,r2,23684
 1028d64:	11000017 	ldw	r4,0(r2)
 1028d68:	014040f4 	movhi	r5,259
 1028d6c:	2962c704 	addi	r5,r5,-29924
 1028d70:	1029a841 	jmpi	1029a84 <_fwalk_reent>

01028d74 <__fp_lock>:
 1028d74:	0005883a 	mov	r2,zero
 1028d78:	f800283a 	ret

01028d7c <__fp_unlock>:
 1028d7c:	0005883a 	mov	r2,zero
 1028d80:	f800283a 	ret

01028d84 <_cleanup_r>:
 1028d84:	014040f4 	movhi	r5,259
 1028d88:	297aca04 	addi	r5,r5,-5336
 1028d8c:	10299cc1 	jmpi	10299cc <_fwalk>

01028d90 <__sinit.part.1>:
 1028d90:	defff604 	addi	sp,sp,-40
 1028d94:	00c040f4 	movhi	r3,259
 1028d98:	dfc00915 	stw	ra,36(sp)
 1028d9c:	df000815 	stw	fp,32(sp)
 1028da0:	ddc00715 	stw	r23,28(sp)
 1028da4:	dd800615 	stw	r22,24(sp)
 1028da8:	dd400515 	stw	r21,20(sp)
 1028dac:	dd000415 	stw	r20,16(sp)
 1028db0:	dcc00315 	stw	r19,12(sp)
 1028db4:	dc800215 	stw	r18,8(sp)
 1028db8:	dc400115 	stw	r17,4(sp)
 1028dbc:	dc000015 	stw	r16,0(sp)
 1028dc0:	18e36104 	addi	r3,r3,-29308
 1028dc4:	24000117 	ldw	r16,4(r4)
 1028dc8:	20c00f15 	stw	r3,60(r4)
 1028dcc:	07000044 	movi	fp,1
 1028dd0:	00c000c4 	movi	r3,3
 1028dd4:	2080bb04 	addi	r2,r4,748
 1028dd8:	20c0b915 	stw	r3,740(r4)
 1028ddc:	27000e15 	stw	fp,56(r4)
 1028de0:	2080ba15 	stw	r2,744(r4)
 1028de4:	2000b815 	stw	zero,736(r4)
 1028de8:	05c00204 	movi	r23,8
 1028dec:	00800104 	movi	r2,4
 1028df0:	2025883a 	mov	r18,r4
 1028df4:	b80d883a 	mov	r6,r23
 1028df8:	81001704 	addi	r4,r16,92
 1028dfc:	000b883a 	mov	r5,zero
 1028e00:	80000015 	stw	zero,0(r16)
 1028e04:	80000115 	stw	zero,4(r16)
 1028e08:	80000215 	stw	zero,8(r16)
 1028e0c:	8080030d 	sth	r2,12(r16)
 1028e10:	80001915 	stw	zero,100(r16)
 1028e14:	8000038d 	sth	zero,14(r16)
 1028e18:	80000415 	stw	zero,16(r16)
 1028e1c:	80000515 	stw	zero,20(r16)
 1028e20:	80000615 	stw	zero,24(r16)
 1028e24:	102a8f80 	call	102a8f8 <memset>
 1028e28:	058040f4 	movhi	r22,259
 1028e2c:	94400217 	ldw	r17,8(r18)
 1028e30:	054040f4 	movhi	r21,259
 1028e34:	050040f4 	movhi	r20,259
 1028e38:	04c040f4 	movhi	r19,259
 1028e3c:	b5b00404 	addi	r22,r22,-16368
 1028e40:	ad701b04 	addi	r21,r21,-16276
 1028e44:	a5303a04 	addi	r20,r20,-16152
 1028e48:	9cf05104 	addi	r19,r19,-16060
 1028e4c:	85800815 	stw	r22,32(r16)
 1028e50:	85400915 	stw	r21,36(r16)
 1028e54:	85000a15 	stw	r20,40(r16)
 1028e58:	84c00b15 	stw	r19,44(r16)
 1028e5c:	84000715 	stw	r16,28(r16)
 1028e60:	00800284 	movi	r2,10
 1028e64:	89001704 	addi	r4,r17,92
 1028e68:	b80d883a 	mov	r6,r23
 1028e6c:	000b883a 	mov	r5,zero
 1028e70:	88000015 	stw	zero,0(r17)
 1028e74:	88000115 	stw	zero,4(r17)
 1028e78:	88000215 	stw	zero,8(r17)
 1028e7c:	8880030d 	sth	r2,12(r17)
 1028e80:	88001915 	stw	zero,100(r17)
 1028e84:	8f00038d 	sth	fp,14(r17)
 1028e88:	88000415 	stw	zero,16(r17)
 1028e8c:	88000515 	stw	zero,20(r17)
 1028e90:	88000615 	stw	zero,24(r17)
 1028e94:	102a8f80 	call	102a8f8 <memset>
 1028e98:	94000317 	ldw	r16,12(r18)
 1028e9c:	00800484 	movi	r2,18
 1028ea0:	8c400715 	stw	r17,28(r17)
 1028ea4:	8d800815 	stw	r22,32(r17)
 1028ea8:	8d400915 	stw	r21,36(r17)
 1028eac:	8d000a15 	stw	r20,40(r17)
 1028eb0:	8cc00b15 	stw	r19,44(r17)
 1028eb4:	8080030d 	sth	r2,12(r16)
 1028eb8:	00800084 	movi	r2,2
 1028ebc:	80000015 	stw	zero,0(r16)
 1028ec0:	80000115 	stw	zero,4(r16)
 1028ec4:	80000215 	stw	zero,8(r16)
 1028ec8:	80001915 	stw	zero,100(r16)
 1028ecc:	8080038d 	sth	r2,14(r16)
 1028ed0:	80000415 	stw	zero,16(r16)
 1028ed4:	80000515 	stw	zero,20(r16)
 1028ed8:	80000615 	stw	zero,24(r16)
 1028edc:	81001704 	addi	r4,r16,92
 1028ee0:	000b883a 	mov	r5,zero
 1028ee4:	b80d883a 	mov	r6,r23
 1028ee8:	102a8f80 	call	102a8f8 <memset>
 1028eec:	84000715 	stw	r16,28(r16)
 1028ef0:	85800815 	stw	r22,32(r16)
 1028ef4:	85400915 	stw	r21,36(r16)
 1028ef8:	85000a15 	stw	r20,40(r16)
 1028efc:	84c00b15 	stw	r19,44(r16)
 1028f00:	dfc00917 	ldw	ra,36(sp)
 1028f04:	df000817 	ldw	fp,32(sp)
 1028f08:	ddc00717 	ldw	r23,28(sp)
 1028f0c:	dd800617 	ldw	r22,24(sp)
 1028f10:	dd400517 	ldw	r21,20(sp)
 1028f14:	dd000417 	ldw	r20,16(sp)
 1028f18:	dcc00317 	ldw	r19,12(sp)
 1028f1c:	dc800217 	ldw	r18,8(sp)
 1028f20:	dc400117 	ldw	r17,4(sp)
 1028f24:	dc000017 	ldw	r16,0(sp)
 1028f28:	dec00a04 	addi	sp,sp,40
 1028f2c:	f800283a 	ret

01028f30 <__sfmoreglue>:
 1028f30:	defffc04 	addi	sp,sp,-16
 1028f34:	dc400115 	stw	r17,4(sp)
 1028f38:	2c401a24 	muli	r17,r5,104
 1028f3c:	dc800215 	stw	r18,8(sp)
 1028f40:	2825883a 	mov	r18,r5
 1028f44:	89400304 	addi	r5,r17,12
 1028f48:	dc000015 	stw	r16,0(sp)
 1028f4c:	dfc00315 	stw	ra,12(sp)
 1028f50:	1029dd40 	call	1029dd4 <_malloc_r>
 1028f54:	1021883a 	mov	r16,r2
 1028f58:	10000726 	beq	r2,zero,1028f78 <__sfmoreglue+0x48>
 1028f5c:	11000304 	addi	r4,r2,12
 1028f60:	10000015 	stw	zero,0(r2)
 1028f64:	14800115 	stw	r18,4(r2)
 1028f68:	11000215 	stw	r4,8(r2)
 1028f6c:	000b883a 	mov	r5,zero
 1028f70:	880d883a 	mov	r6,r17
 1028f74:	102a8f80 	call	102a8f8 <memset>
 1028f78:	8005883a 	mov	r2,r16
 1028f7c:	dfc00317 	ldw	ra,12(sp)
 1028f80:	dc800217 	ldw	r18,8(sp)
 1028f84:	dc400117 	ldw	r17,4(sp)
 1028f88:	dc000017 	ldw	r16,0(sp)
 1028f8c:	dec00404 	addi	sp,sp,16
 1028f90:	f800283a 	ret

01028f94 <__sfp>:
 1028f94:	008040f4 	movhi	r2,259
 1028f98:	defffb04 	addi	sp,sp,-20
 1028f9c:	10972104 	addi	r2,r2,23684
 1028fa0:	dc800215 	stw	r18,8(sp)
 1028fa4:	14800017 	ldw	r18,0(r2)
 1028fa8:	dcc00315 	stw	r19,12(sp)
 1028fac:	dfc00415 	stw	ra,16(sp)
 1028fb0:	90800e17 	ldw	r2,56(r18)
 1028fb4:	dc400115 	stw	r17,4(sp)
 1028fb8:	dc000015 	stw	r16,0(sp)
 1028fbc:	2027883a 	mov	r19,r4
 1028fc0:	1000021e 	bne	r2,zero,1028fcc <__sfp+0x38>
 1028fc4:	9009883a 	mov	r4,r18
 1028fc8:	1028d900 	call	1028d90 <__sinit.part.1>
 1028fcc:	9480b804 	addi	r18,r18,736
 1028fd0:	047fffc4 	movi	r17,-1
 1028fd4:	91400117 	ldw	r5,4(r18)
 1028fd8:	94000217 	ldw	r16,8(r18)
 1028fdc:	297fffc4 	addi	r5,r5,-1
 1028fe0:	28000a16 	blt	r5,zero,102900c <__sfp+0x78>
 1028fe4:	8080030f 	ldh	r2,12(r16)
 1028fe8:	10000c26 	beq	r2,zero,102901c <__sfp+0x88>
 1028fec:	80c01d04 	addi	r3,r16,116
 1028ff0:	00000206 	br	1028ffc <__sfp+0x68>
 1028ff4:	18bfe60f 	ldh	r2,-104(r3)
 1028ff8:	10000826 	beq	r2,zero,102901c <__sfp+0x88>
 1028ffc:	297fffc4 	addi	r5,r5,-1
 1029000:	1c3ffd04 	addi	r16,r3,-12
 1029004:	18c01a04 	addi	r3,r3,104
 1029008:	2c7ffa1e 	bne	r5,r17,1028ff4 <_gp+0xfffeb370>
 102900c:	90800017 	ldw	r2,0(r18)
 1029010:	10001d26 	beq	r2,zero,1029088 <__sfp+0xf4>
 1029014:	1025883a 	mov	r18,r2
 1029018:	003fee06 	br	1028fd4 <_gp+0xfffeb350>
 102901c:	00bfffc4 	movi	r2,-1
 1029020:	8080038d 	sth	r2,14(r16)
 1029024:	00800044 	movi	r2,1
 1029028:	8080030d 	sth	r2,12(r16)
 102902c:	80001915 	stw	zero,100(r16)
 1029030:	80000015 	stw	zero,0(r16)
 1029034:	80000215 	stw	zero,8(r16)
 1029038:	80000115 	stw	zero,4(r16)
 102903c:	80000415 	stw	zero,16(r16)
 1029040:	80000515 	stw	zero,20(r16)
 1029044:	80000615 	stw	zero,24(r16)
 1029048:	81001704 	addi	r4,r16,92
 102904c:	000b883a 	mov	r5,zero
 1029050:	01800204 	movi	r6,8
 1029054:	102a8f80 	call	102a8f8 <memset>
 1029058:	8005883a 	mov	r2,r16
 102905c:	80000c15 	stw	zero,48(r16)
 1029060:	80000d15 	stw	zero,52(r16)
 1029064:	80001115 	stw	zero,68(r16)
 1029068:	80001215 	stw	zero,72(r16)
 102906c:	dfc00417 	ldw	ra,16(sp)
 1029070:	dcc00317 	ldw	r19,12(sp)
 1029074:	dc800217 	ldw	r18,8(sp)
 1029078:	dc400117 	ldw	r17,4(sp)
 102907c:	dc000017 	ldw	r16,0(sp)
 1029080:	dec00504 	addi	sp,sp,20
 1029084:	f800283a 	ret
 1029088:	9809883a 	mov	r4,r19
 102908c:	01400104 	movi	r5,4
 1029090:	1028f300 	call	1028f30 <__sfmoreglue>
 1029094:	90800015 	stw	r2,0(r18)
 1029098:	103fde1e 	bne	r2,zero,1029014 <_gp+0xfffeb390>
 102909c:	00800304 	movi	r2,12
 10290a0:	98800015 	stw	r2,0(r19)
 10290a4:	0005883a 	mov	r2,zero
 10290a8:	003ff006 	br	102906c <_gp+0xfffeb3e8>

010290ac <_cleanup>:
 10290ac:	008040f4 	movhi	r2,259
 10290b0:	10972104 	addi	r2,r2,23684
 10290b4:	11000017 	ldw	r4,0(r2)
 10290b8:	014040f4 	movhi	r5,259
 10290bc:	297aca04 	addi	r5,r5,-5336
 10290c0:	10299cc1 	jmpi	10299cc <_fwalk>

010290c4 <__sinit>:
 10290c4:	20800e17 	ldw	r2,56(r4)
 10290c8:	10000126 	beq	r2,zero,10290d0 <__sinit+0xc>
 10290cc:	f800283a 	ret
 10290d0:	1028d901 	jmpi	1028d90 <__sinit.part.1>

010290d4 <__sfp_lock_acquire>:
 10290d4:	f800283a 	ret

010290d8 <__sfp_lock_release>:
 10290d8:	f800283a 	ret

010290dc <__sinit_lock_acquire>:
 10290dc:	f800283a 	ret

010290e0 <__sinit_lock_release>:
 10290e0:	f800283a 	ret

010290e4 <__fp_lock_all>:
 10290e4:	008040f4 	movhi	r2,259
 10290e8:	10972204 	addi	r2,r2,23688
 10290ec:	11000017 	ldw	r4,0(r2)
 10290f0:	014040f4 	movhi	r5,259
 10290f4:	29635d04 	addi	r5,r5,-29324
 10290f8:	10299cc1 	jmpi	10299cc <_fwalk>

010290fc <__fp_unlock_all>:
 10290fc:	008040f4 	movhi	r2,259
 1029100:	10972204 	addi	r2,r2,23688
 1029104:	11000017 	ldw	r4,0(r2)
 1029108:	014040f4 	movhi	r5,259
 102910c:	29635f04 	addi	r5,r5,-29316
 1029110:	10299cc1 	jmpi	10299cc <_fwalk>

01029114 <_malloc_trim_r>:
 1029114:	defffb04 	addi	sp,sp,-20
 1029118:	dcc00315 	stw	r19,12(sp)
 102911c:	04c040f4 	movhi	r19,259
 1029120:	dc800215 	stw	r18,8(sp)
 1029124:	dc400115 	stw	r17,4(sp)
 1029128:	dc000015 	stw	r16,0(sp)
 102912c:	dfc00415 	stw	ra,16(sp)
 1029130:	2821883a 	mov	r16,r5
 1029134:	9cd19d04 	addi	r19,r19,18036
 1029138:	2025883a 	mov	r18,r4
 102913c:	10317500 	call	1031750 <__malloc_lock>
 1029140:	98800217 	ldw	r2,8(r19)
 1029144:	14400117 	ldw	r17,4(r2)
 1029148:	00bfff04 	movi	r2,-4
 102914c:	88a2703a 	and	r17,r17,r2
 1029150:	8c21c83a 	sub	r16,r17,r16
 1029154:	8403fbc4 	addi	r16,r16,4079
 1029158:	8020d33a 	srli	r16,r16,12
 102915c:	0083ffc4 	movi	r2,4095
 1029160:	843fffc4 	addi	r16,r16,-1
 1029164:	8020933a 	slli	r16,r16,12
 1029168:	1400060e 	bge	r2,r16,1029184 <_malloc_trim_r+0x70>
 102916c:	9009883a 	mov	r4,r18
 1029170:	000b883a 	mov	r5,zero
 1029174:	102bfbc0 	call	102bfbc <_sbrk_r>
 1029178:	98c00217 	ldw	r3,8(r19)
 102917c:	1c47883a 	add	r3,r3,r17
 1029180:	10c00a26 	beq	r2,r3,10291ac <_malloc_trim_r+0x98>
 1029184:	9009883a 	mov	r4,r18
 1029188:	10317700 	call	1031770 <__malloc_unlock>
 102918c:	0005883a 	mov	r2,zero
 1029190:	dfc00417 	ldw	ra,16(sp)
 1029194:	dcc00317 	ldw	r19,12(sp)
 1029198:	dc800217 	ldw	r18,8(sp)
 102919c:	dc400117 	ldw	r17,4(sp)
 10291a0:	dc000017 	ldw	r16,0(sp)
 10291a4:	dec00504 	addi	sp,sp,20
 10291a8:	f800283a 	ret
 10291ac:	9009883a 	mov	r4,r18
 10291b0:	040bc83a 	sub	r5,zero,r16
 10291b4:	102bfbc0 	call	102bfbc <_sbrk_r>
 10291b8:	00ffffc4 	movi	r3,-1
 10291bc:	10c00d26 	beq	r2,r3,10291f4 <_malloc_trim_r+0xe0>
 10291c0:	00c040f4 	movhi	r3,259
 10291c4:	18ddfa04 	addi	r3,r3,30696
 10291c8:	18800017 	ldw	r2,0(r3)
 10291cc:	99000217 	ldw	r4,8(r19)
 10291d0:	8c23c83a 	sub	r17,r17,r16
 10291d4:	8c400054 	ori	r17,r17,1
 10291d8:	1421c83a 	sub	r16,r2,r16
 10291dc:	24400115 	stw	r17,4(r4)
 10291e0:	9009883a 	mov	r4,r18
 10291e4:	1c000015 	stw	r16,0(r3)
 10291e8:	10317700 	call	1031770 <__malloc_unlock>
 10291ec:	00800044 	movi	r2,1
 10291f0:	003fe706 	br	1029190 <_gp+0xfffeb50c>
 10291f4:	9009883a 	mov	r4,r18
 10291f8:	000b883a 	mov	r5,zero
 10291fc:	102bfbc0 	call	102bfbc <_sbrk_r>
 1029200:	99000217 	ldw	r4,8(r19)
 1029204:	014003c4 	movi	r5,15
 1029208:	1107c83a 	sub	r3,r2,r4
 102920c:	28ffdd0e 	bge	r5,r3,1029184 <_gp+0xfffeb500>
 1029210:	014040f4 	movhi	r5,259
 1029214:	29572404 	addi	r5,r5,23696
 1029218:	29400017 	ldw	r5,0(r5)
 102921c:	18c00054 	ori	r3,r3,1
 1029220:	20c00115 	stw	r3,4(r4)
 1029224:	00c040f4 	movhi	r3,259
 1029228:	1145c83a 	sub	r2,r2,r5
 102922c:	18ddfa04 	addi	r3,r3,30696
 1029230:	18800015 	stw	r2,0(r3)
 1029234:	003fd306 	br	1029184 <_gp+0xfffeb500>

01029238 <_free_r>:
 1029238:	28004c26 	beq	r5,zero,102936c <_free_r+0x134>
 102923c:	defffd04 	addi	sp,sp,-12
 1029240:	dc400115 	stw	r17,4(sp)
 1029244:	dc000015 	stw	r16,0(sp)
 1029248:	2023883a 	mov	r17,r4
 102924c:	2821883a 	mov	r16,r5
 1029250:	dfc00215 	stw	ra,8(sp)
 1029254:	10317500 	call	1031750 <__malloc_lock>
 1029258:	813fff17 	ldw	r4,-4(r16)
 102925c:	00bfff84 	movi	r2,-2
 1029260:	024040f4 	movhi	r9,259
 1029264:	81bffe04 	addi	r6,r16,-8
 1029268:	2084703a 	and	r2,r4,r2
 102926c:	4a519d04 	addi	r9,r9,18036
 1029270:	308b883a 	add	r5,r6,r2
 1029274:	2a000117 	ldw	r8,4(r5)
 1029278:	49c00217 	ldw	r7,8(r9)
 102927c:	00ffff04 	movi	r3,-4
 1029280:	40c6703a 	and	r3,r8,r3
 1029284:	39405326 	beq	r7,r5,10293d4 <_free_r+0x19c>
 1029288:	28c00115 	stw	r3,4(r5)
 102928c:	2100004c 	andi	r4,r4,1
 1029290:	2000091e 	bne	r4,zero,10292b8 <_free_r+0x80>
 1029294:	81fffe17 	ldw	r7,-8(r16)
 1029298:	4a000204 	addi	r8,r9,8
 102929c:	31cdc83a 	sub	r6,r6,r7
 10292a0:	31000217 	ldw	r4,8(r6)
 10292a4:	11c5883a 	add	r2,r2,r7
 10292a8:	22006126 	beq	r4,r8,1029430 <_free_r+0x1f8>
 10292ac:	31c00317 	ldw	r7,12(r6)
 10292b0:	21c00315 	stw	r7,12(r4)
 10292b4:	39000215 	stw	r4,8(r7)
 10292b8:	28c9883a 	add	r4,r5,r3
 10292bc:	21c00117 	ldw	r7,4(r4)
 10292c0:	39c0004c 	andi	r7,r7,1
 10292c4:	38000d1e 	bne	r7,zero,10292fc <_free_r+0xc4>
 10292c8:	29000217 	ldw	r4,8(r5)
 10292cc:	10c5883a 	add	r2,r2,r3
 10292d0:	00c040f4 	movhi	r3,259
 10292d4:	18d19f04 	addi	r3,r3,18044
 10292d8:	20c07526 	beq	r4,r3,10294b0 <_free_r+0x278>
 10292dc:	29c00317 	ldw	r7,12(r5)
 10292e0:	11400054 	ori	r5,r2,1
 10292e4:	3087883a 	add	r3,r6,r2
 10292e8:	21c00315 	stw	r7,12(r4)
 10292ec:	39000215 	stw	r4,8(r7)
 10292f0:	31400115 	stw	r5,4(r6)
 10292f4:	18800015 	stw	r2,0(r3)
 10292f8:	00000406 	br	102930c <_free_r+0xd4>
 10292fc:	10c00054 	ori	r3,r2,1
 1029300:	30c00115 	stw	r3,4(r6)
 1029304:	3087883a 	add	r3,r6,r2
 1029308:	18800015 	stw	r2,0(r3)
 102930c:	00c07fc4 	movi	r3,511
 1029310:	18801736 	bltu	r3,r2,1029370 <_free_r+0x138>
 1029314:	1004d0fa 	srli	r2,r2,3
 1029318:	01400044 	movi	r5,1
 102931c:	49000117 	ldw	r4,4(r9)
 1029320:	1087883a 	add	r3,r2,r2
 1029324:	18c7883a 	add	r3,r3,r3
 1029328:	1005d0ba 	srai	r2,r2,2
 102932c:	18c7883a 	add	r3,r3,r3
 1029330:	1a47883a 	add	r3,r3,r9
 1029334:	19c00217 	ldw	r7,8(r3)
 1029338:	2884983a 	sll	r2,r5,r2
 102933c:	30c00315 	stw	r3,12(r6)
 1029340:	31c00215 	stw	r7,8(r6)
 1029344:	1104b03a 	or	r2,r2,r4
 1029348:	19800215 	stw	r6,8(r3)
 102934c:	48800115 	stw	r2,4(r9)
 1029350:	39800315 	stw	r6,12(r7)
 1029354:	8809883a 	mov	r4,r17
 1029358:	dfc00217 	ldw	ra,8(sp)
 102935c:	dc400117 	ldw	r17,4(sp)
 1029360:	dc000017 	ldw	r16,0(sp)
 1029364:	dec00304 	addi	sp,sp,12
 1029368:	10317701 	jmpi	1031770 <__malloc_unlock>
 102936c:	f800283a 	ret
 1029370:	1006d27a 	srli	r3,r2,9
 1029374:	01000104 	movi	r4,4
 1029378:	20c04036 	bltu	r4,r3,102947c <_free_r+0x244>
 102937c:	1006d1ba 	srli	r3,r2,6
 1029380:	19400e04 	addi	r5,r3,56
 1029384:	2947883a 	add	r3,r5,r5
 1029388:	18c7883a 	add	r3,r3,r3
 102938c:	18c7883a 	add	r3,r3,r3
 1029390:	1a49883a 	add	r4,r3,r9
 1029394:	20c00217 	ldw	r3,8(r4)
 1029398:	01c040f4 	movhi	r7,259
 102939c:	39d19d04 	addi	r7,r7,18036
 10293a0:	19003b26 	beq	r3,r4,1029490 <_free_r+0x258>
 10293a4:	01ffff04 	movi	r7,-4
 10293a8:	19400117 	ldw	r5,4(r3)
 10293ac:	29ca703a 	and	r5,r5,r7
 10293b0:	1140022e 	bgeu	r2,r5,10293bc <_free_r+0x184>
 10293b4:	18c00217 	ldw	r3,8(r3)
 10293b8:	20fffb1e 	bne	r4,r3,10293a8 <_gp+0xfffeb724>
 10293bc:	18800317 	ldw	r2,12(r3)
 10293c0:	30800315 	stw	r2,12(r6)
 10293c4:	30c00215 	stw	r3,8(r6)
 10293c8:	11800215 	stw	r6,8(r2)
 10293cc:	19800315 	stw	r6,12(r3)
 10293d0:	003fe006 	br	1029354 <_gp+0xfffeb6d0>
 10293d4:	2100004c 	andi	r4,r4,1
 10293d8:	1885883a 	add	r2,r3,r2
 10293dc:	2000071e 	bne	r4,zero,10293fc <_free_r+0x1c4>
 10293e0:	817ffe17 	ldw	r5,-8(r16)
 10293e4:	314dc83a 	sub	r6,r6,r5
 10293e8:	30c00317 	ldw	r3,12(r6)
 10293ec:	31000217 	ldw	r4,8(r6)
 10293f0:	1145883a 	add	r2,r2,r5
 10293f4:	20c00315 	stw	r3,12(r4)
 10293f8:	19000215 	stw	r4,8(r3)
 10293fc:	10c00054 	ori	r3,r2,1
 1029400:	30c00115 	stw	r3,4(r6)
 1029404:	00c040f4 	movhi	r3,259
 1029408:	18d72504 	addi	r3,r3,23700
 102940c:	18c00017 	ldw	r3,0(r3)
 1029410:	49800215 	stw	r6,8(r9)
 1029414:	10ffcf36 	bltu	r2,r3,1029354 <_gp+0xfffeb6d0>
 1029418:	008040f4 	movhi	r2,259
 102941c:	109df104 	addi	r2,r2,30660
 1029420:	11400017 	ldw	r5,0(r2)
 1029424:	8809883a 	mov	r4,r17
 1029428:	10291140 	call	1029114 <_malloc_trim_r>
 102942c:	003fc906 	br	1029354 <_gp+0xfffeb6d0>
 1029430:	28c9883a 	add	r4,r5,r3
 1029434:	21000117 	ldw	r4,4(r4)
 1029438:	2100004c 	andi	r4,r4,1
 102943c:	20000a1e 	bne	r4,zero,1029468 <_free_r+0x230>
 1029440:	29000317 	ldw	r4,12(r5)
 1029444:	29400217 	ldw	r5,8(r5)
 1029448:	10c5883a 	add	r2,r2,r3
 102944c:	10c00054 	ori	r3,r2,1
 1029450:	29000315 	stw	r4,12(r5)
 1029454:	21400215 	stw	r5,8(r4)
 1029458:	30c00115 	stw	r3,4(r6)
 102945c:	308d883a 	add	r6,r6,r2
 1029460:	30800015 	stw	r2,0(r6)
 1029464:	003fbb06 	br	1029354 <_gp+0xfffeb6d0>
 1029468:	10c00054 	ori	r3,r2,1
 102946c:	30c00115 	stw	r3,4(r6)
 1029470:	308d883a 	add	r6,r6,r2
 1029474:	30800015 	stw	r2,0(r6)
 1029478:	003fb606 	br	1029354 <_gp+0xfffeb6d0>
 102947c:	01000504 	movi	r4,20
 1029480:	20c01436 	bltu	r4,r3,10294d4 <_free_r+0x29c>
 1029484:	194016c4 	addi	r5,r3,91
 1029488:	2947883a 	add	r3,r5,r5
 102948c:	003fbe06 	br	1029388 <_gp+0xfffeb704>
 1029490:	280bd0ba 	srai	r5,r5,2
 1029494:	00800044 	movi	r2,1
 1029498:	39000117 	ldw	r4,4(r7)
 102949c:	114a983a 	sll	r5,r2,r5
 10294a0:	1805883a 	mov	r2,r3
 10294a4:	2908b03a 	or	r4,r5,r4
 10294a8:	39000115 	stw	r4,4(r7)
 10294ac:	003fc406 	br	10293c0 <_gp+0xfffeb73c>
 10294b0:	49800515 	stw	r6,20(r9)
 10294b4:	49800415 	stw	r6,16(r9)
 10294b8:	10c00054 	ori	r3,r2,1
 10294bc:	31000315 	stw	r4,12(r6)
 10294c0:	31000215 	stw	r4,8(r6)
 10294c4:	30c00115 	stw	r3,4(r6)
 10294c8:	308d883a 	add	r6,r6,r2
 10294cc:	30800015 	stw	r2,0(r6)
 10294d0:	003fa006 	br	1029354 <_gp+0xfffeb6d0>
 10294d4:	01001504 	movi	r4,84
 10294d8:	20c00436 	bltu	r4,r3,10294ec <_free_r+0x2b4>
 10294dc:	1006d33a 	srli	r3,r2,12
 10294e0:	19401b84 	addi	r5,r3,110
 10294e4:	2947883a 	add	r3,r5,r5
 10294e8:	003fa706 	br	1029388 <_gp+0xfffeb704>
 10294ec:	01005504 	movi	r4,340
 10294f0:	20c00436 	bltu	r4,r3,1029504 <_free_r+0x2cc>
 10294f4:	1006d3fa 	srli	r3,r2,15
 10294f8:	19401dc4 	addi	r5,r3,119
 10294fc:	2947883a 	add	r3,r5,r5
 1029500:	003fa106 	br	1029388 <_gp+0xfffeb704>
 1029504:	01015504 	movi	r4,1364
 1029508:	20c00436 	bltu	r4,r3,102951c <_free_r+0x2e4>
 102950c:	1006d4ba 	srli	r3,r2,18
 1029510:	19401f04 	addi	r5,r3,124
 1029514:	2947883a 	add	r3,r5,r5
 1029518:	003f9b06 	br	1029388 <_gp+0xfffeb704>
 102951c:	00c03f04 	movi	r3,252
 1029520:	01401f84 	movi	r5,126
 1029524:	003f9806 	br	1029388 <_gp+0xfffeb704>

01029528 <__sfvwrite_r>:
 1029528:	30800217 	ldw	r2,8(r6)
 102952c:	10004526 	beq	r2,zero,1029644 <__sfvwrite_r+0x11c>
 1029530:	28c0030b 	ldhu	r3,12(r5)
 1029534:	defff404 	addi	sp,sp,-48
 1029538:	dd400715 	stw	r21,28(sp)
 102953c:	dcc00515 	stw	r19,20(sp)
 1029540:	dc000215 	stw	r16,8(sp)
 1029544:	dfc00b15 	stw	ra,44(sp)
 1029548:	df000a15 	stw	fp,40(sp)
 102954c:	ddc00915 	stw	r23,36(sp)
 1029550:	dd800815 	stw	r22,32(sp)
 1029554:	dd000615 	stw	r20,24(sp)
 1029558:	dc800415 	stw	r18,16(sp)
 102955c:	dc400315 	stw	r17,12(sp)
 1029560:	1880020c 	andi	r2,r3,8
 1029564:	2821883a 	mov	r16,r5
 1029568:	202b883a 	mov	r21,r4
 102956c:	3027883a 	mov	r19,r6
 1029570:	10002526 	beq	r2,zero,1029608 <__sfvwrite_r+0xe0>
 1029574:	28800417 	ldw	r2,16(r5)
 1029578:	10002326 	beq	r2,zero,1029608 <__sfvwrite_r+0xe0>
 102957c:	1880008c 	andi	r2,r3,2
 1029580:	9c400017 	ldw	r17,0(r19)
 1029584:	10003126 	beq	r2,zero,102964c <__sfvwrite_r+0x124>
 1029588:	0029883a 	mov	r20,zero
 102958c:	0025883a 	mov	r18,zero
 1029590:	05810004 	movi	r22,1024
 1029594:	a00d883a 	mov	r6,r20
 1029598:	a809883a 	mov	r4,r21
 102959c:	90002526 	beq	r18,zero,1029634 <__sfvwrite_r+0x10c>
 10295a0:	900f883a 	mov	r7,r18
 10295a4:	81400717 	ldw	r5,28(r16)
 10295a8:	b480012e 	bgeu	r22,r18,10295b0 <__sfvwrite_r+0x88>
 10295ac:	01c10004 	movi	r7,1024
 10295b0:	80800917 	ldw	r2,36(r16)
 10295b4:	103ee83a 	callr	r2
 10295b8:	0080510e 	bge	zero,r2,1029700 <__sfvwrite_r+0x1d8>
 10295bc:	98c00217 	ldw	r3,8(r19)
 10295c0:	a0a9883a 	add	r20,r20,r2
 10295c4:	90a5c83a 	sub	r18,r18,r2
 10295c8:	1885c83a 	sub	r2,r3,r2
 10295cc:	98800215 	stw	r2,8(r19)
 10295d0:	103ff01e 	bne	r2,zero,1029594 <_gp+0xfffeb910>
 10295d4:	0005883a 	mov	r2,zero
 10295d8:	dfc00b17 	ldw	ra,44(sp)
 10295dc:	df000a17 	ldw	fp,40(sp)
 10295e0:	ddc00917 	ldw	r23,36(sp)
 10295e4:	dd800817 	ldw	r22,32(sp)
 10295e8:	dd400717 	ldw	r21,28(sp)
 10295ec:	dd000617 	ldw	r20,24(sp)
 10295f0:	dcc00517 	ldw	r19,20(sp)
 10295f4:	dc800417 	ldw	r18,16(sp)
 10295f8:	dc400317 	ldw	r17,12(sp)
 10295fc:	dc000217 	ldw	r16,8(sp)
 1029600:	dec00c04 	addi	sp,sp,48
 1029604:	f800283a 	ret
 1029608:	a809883a 	mov	r4,r21
 102960c:	800b883a 	mov	r5,r16
 1029610:	10270c40 	call	10270c4 <__swsetup_r>
 1029614:	80c0030b 	ldhu	r3,12(r16)
 1029618:	103fd826 	beq	r2,zero,102957c <_gp+0xfffeb8f8>
 102961c:	18c01014 	ori	r3,r3,64
 1029620:	80c0030d 	sth	r3,12(r16)
 1029624:	00c00244 	movi	r3,9
 1029628:	00bfffc4 	movi	r2,-1
 102962c:	a8c00015 	stw	r3,0(r21)
 1029630:	003fe906 	br	10295d8 <_gp+0xfffeb954>
 1029634:	8d000017 	ldw	r20,0(r17)
 1029638:	8c800117 	ldw	r18,4(r17)
 102963c:	8c400204 	addi	r17,r17,8
 1029640:	003fd406 	br	1029594 <_gp+0xfffeb910>
 1029644:	0005883a 	mov	r2,zero
 1029648:	f800283a 	ret
 102964c:	1880004c 	andi	r2,r3,1
 1029650:	1000301e 	bne	r2,zero,1029714 <__sfvwrite_r+0x1ec>
 1029654:	002f883a 	mov	r23,zero
 1029658:	0025883a 	mov	r18,zero
 102965c:	90001c26 	beq	r18,zero,10296d0 <__sfvwrite_r+0x1a8>
 1029660:	1880800c 	andi	r2,r3,512
 1029664:	85000217 	ldw	r20,8(r16)
 1029668:	10006c26 	beq	r2,zero,102981c <__sfvwrite_r+0x2f4>
 102966c:	a02d883a 	mov	r22,r20
 1029670:	95008536 	bltu	r18,r20,1029888 <__sfvwrite_r+0x360>
 1029674:	1881200c 	andi	r2,r3,1152
 1029678:	10009d1e 	bne	r2,zero,10298f0 <__sfvwrite_r+0x3c8>
 102967c:	81000017 	ldw	r4,0(r16)
 1029680:	a039883a 	mov	fp,r20
 1029684:	9029883a 	mov	r20,r18
 1029688:	b80b883a 	mov	r5,r23
 102968c:	b00d883a 	mov	r6,r22
 1029690:	102a79c0 	call	102a79c <memmove>
 1029694:	80c00217 	ldw	r3,8(r16)
 1029698:	81000017 	ldw	r4,0(r16)
 102969c:	9005883a 	mov	r2,r18
 10296a0:	1f39c83a 	sub	fp,r3,fp
 10296a4:	258f883a 	add	r7,r4,r22
 10296a8:	87000215 	stw	fp,8(r16)
 10296ac:	81c00015 	stw	r7,0(r16)
 10296b0:	98c00217 	ldw	r3,8(r19)
 10296b4:	b8af883a 	add	r23,r23,r2
 10296b8:	90a5c83a 	sub	r18,r18,r2
 10296bc:	1d05c83a 	sub	r2,r3,r20
 10296c0:	98800215 	stw	r2,8(r19)
 10296c4:	103fc326 	beq	r2,zero,10295d4 <_gp+0xfffeb950>
 10296c8:	80c0030b 	ldhu	r3,12(r16)
 10296cc:	903fe41e 	bne	r18,zero,1029660 <_gp+0xfffeb9dc>
 10296d0:	8dc00017 	ldw	r23,0(r17)
 10296d4:	8c800117 	ldw	r18,4(r17)
 10296d8:	8c400204 	addi	r17,r17,8
 10296dc:	003fdf06 	br	102965c <_gp+0xfffeb9d8>
 10296e0:	102b9a80 	call	102b9a8 <_realloc_r>
 10296e4:	102d883a 	mov	r22,r2
 10296e8:	1000a01e 	bne	r2,zero,102996c <__sfvwrite_r+0x444>
 10296ec:	81400417 	ldw	r5,16(r16)
 10296f0:	a809883a 	mov	r4,r21
 10296f4:	10292380 	call	1029238 <_free_r>
 10296f8:	00800304 	movi	r2,12
 10296fc:	a8800015 	stw	r2,0(r21)
 1029700:	80c0030b 	ldhu	r3,12(r16)
 1029704:	00bfffc4 	movi	r2,-1
 1029708:	18c01014 	ori	r3,r3,64
 102970c:	80c0030d 	sth	r3,12(r16)
 1029710:	003fb106 	br	10295d8 <_gp+0xfffeb954>
 1029714:	0029883a 	mov	r20,zero
 1029718:	0011883a 	mov	r8,zero
 102971c:	0039883a 	mov	fp,zero
 1029720:	0025883a 	mov	r18,zero
 1029724:	90001f26 	beq	r18,zero,10297a4 <__sfvwrite_r+0x27c>
 1029728:	40006826 	beq	r8,zero,10298cc <__sfvwrite_r+0x3a4>
 102972c:	a02f883a 	mov	r23,r20
 1029730:	9500012e 	bgeu	r18,r20,1029738 <__sfvwrite_r+0x210>
 1029734:	902f883a 	mov	r23,r18
 1029738:	81000017 	ldw	r4,0(r16)
 102973c:	80800417 	ldw	r2,16(r16)
 1029740:	b82d883a 	mov	r22,r23
 1029744:	81800217 	ldw	r6,8(r16)
 1029748:	81c00517 	ldw	r7,20(r16)
 102974c:	1100022e 	bgeu	r2,r4,1029758 <__sfvwrite_r+0x230>
 1029750:	31c7883a 	add	r3,r6,r7
 1029754:	1dc01816 	blt	r3,r23,10297b8 <__sfvwrite_r+0x290>
 1029758:	b9c03f16 	blt	r23,r7,1029858 <__sfvwrite_r+0x330>
 102975c:	80800917 	ldw	r2,36(r16)
 1029760:	81400717 	ldw	r5,28(r16)
 1029764:	a809883a 	mov	r4,r21
 1029768:	da000115 	stw	r8,4(sp)
 102976c:	e00d883a 	mov	r6,fp
 1029770:	103ee83a 	callr	r2
 1029774:	102d883a 	mov	r22,r2
 1029778:	da000117 	ldw	r8,4(sp)
 102977c:	00bfe00e 	bge	zero,r2,1029700 <_gp+0xfffeba7c>
 1029780:	a5a9c83a 	sub	r20,r20,r22
 1029784:	a0001f26 	beq	r20,zero,1029804 <__sfvwrite_r+0x2dc>
 1029788:	98800217 	ldw	r2,8(r19)
 102978c:	e5b9883a 	add	fp,fp,r22
 1029790:	95a5c83a 	sub	r18,r18,r22
 1029794:	15adc83a 	sub	r22,r2,r22
 1029798:	9d800215 	stw	r22,8(r19)
 102979c:	b03f8d26 	beq	r22,zero,10295d4 <_gp+0xfffeb950>
 10297a0:	903fe11e 	bne	r18,zero,1029728 <_gp+0xfffebaa4>
 10297a4:	8f000017 	ldw	fp,0(r17)
 10297a8:	8c800117 	ldw	r18,4(r17)
 10297ac:	0011883a 	mov	r8,zero
 10297b0:	8c400204 	addi	r17,r17,8
 10297b4:	003fdb06 	br	1029724 <_gp+0xfffebaa0>
 10297b8:	180d883a 	mov	r6,r3
 10297bc:	e00b883a 	mov	r5,fp
 10297c0:	da000115 	stw	r8,4(sp)
 10297c4:	d8c00015 	stw	r3,0(sp)
 10297c8:	102a79c0 	call	102a79c <memmove>
 10297cc:	d8c00017 	ldw	r3,0(sp)
 10297d0:	80800017 	ldw	r2,0(r16)
 10297d4:	a809883a 	mov	r4,r21
 10297d8:	800b883a 	mov	r5,r16
 10297dc:	10c5883a 	add	r2,r2,r3
 10297e0:	80800015 	stw	r2,0(r16)
 10297e4:	d8c00015 	stw	r3,0(sp)
 10297e8:	1028b1c0 	call	1028b1c <_fflush_r>
 10297ec:	d8c00017 	ldw	r3,0(sp)
 10297f0:	da000117 	ldw	r8,4(sp)
 10297f4:	103fc21e 	bne	r2,zero,1029700 <_gp+0xfffeba7c>
 10297f8:	182d883a 	mov	r22,r3
 10297fc:	a5a9c83a 	sub	r20,r20,r22
 1029800:	a03fe11e 	bne	r20,zero,1029788 <_gp+0xfffebb04>
 1029804:	a809883a 	mov	r4,r21
 1029808:	800b883a 	mov	r5,r16
 102980c:	1028b1c0 	call	1028b1c <_fflush_r>
 1029810:	103fbb1e 	bne	r2,zero,1029700 <_gp+0xfffeba7c>
 1029814:	0011883a 	mov	r8,zero
 1029818:	003fdb06 	br	1029788 <_gp+0xfffebb04>
 102981c:	81000017 	ldw	r4,0(r16)
 1029820:	80800417 	ldw	r2,16(r16)
 1029824:	1100012e 	bgeu	r2,r4,102982c <__sfvwrite_r+0x304>
 1029828:	a4805a36 	bltu	r20,r18,1029994 <__sfvwrite_r+0x46c>
 102982c:	81c00517 	ldw	r7,20(r16)
 1029830:	91c01a36 	bltu	r18,r7,102989c <__sfvwrite_r+0x374>
 1029834:	80800917 	ldw	r2,36(r16)
 1029838:	81400717 	ldw	r5,28(r16)
 102983c:	a809883a 	mov	r4,r21
 1029840:	b80d883a 	mov	r6,r23
 1029844:	103ee83a 	callr	r2
 1029848:	1029883a 	mov	r20,r2
 102984c:	00bfac0e 	bge	zero,r2,1029700 <_gp+0xfffeba7c>
 1029850:	a005883a 	mov	r2,r20
 1029854:	003f9606 	br	10296b0 <_gp+0xfffeba2c>
 1029858:	b80d883a 	mov	r6,r23
 102985c:	e00b883a 	mov	r5,fp
 1029860:	da000115 	stw	r8,4(sp)
 1029864:	102a79c0 	call	102a79c <memmove>
 1029868:	80800217 	ldw	r2,8(r16)
 102986c:	80c00017 	ldw	r3,0(r16)
 1029870:	da000117 	ldw	r8,4(sp)
 1029874:	15c5c83a 	sub	r2,r2,r23
 1029878:	1def883a 	add	r23,r3,r23
 102987c:	80800215 	stw	r2,8(r16)
 1029880:	85c00015 	stw	r23,0(r16)
 1029884:	003fbe06 	br	1029780 <_gp+0xfffebafc>
 1029888:	81000017 	ldw	r4,0(r16)
 102988c:	9039883a 	mov	fp,r18
 1029890:	9029883a 	mov	r20,r18
 1029894:	902d883a 	mov	r22,r18
 1029898:	003f7b06 	br	1029688 <_gp+0xfffeba04>
 102989c:	b80b883a 	mov	r5,r23
 10298a0:	900d883a 	mov	r6,r18
 10298a4:	102a79c0 	call	102a79c <memmove>
 10298a8:	80c00217 	ldw	r3,8(r16)
 10298ac:	80800017 	ldw	r2,0(r16)
 10298b0:	9029883a 	mov	r20,r18
 10298b4:	1c87c83a 	sub	r3,r3,r18
 10298b8:	1485883a 	add	r2,r2,r18
 10298bc:	80800015 	stw	r2,0(r16)
 10298c0:	80c00215 	stw	r3,8(r16)
 10298c4:	9005883a 	mov	r2,r18
 10298c8:	003f7906 	br	10296b0 <_gp+0xfffeba2c>
 10298cc:	e009883a 	mov	r4,fp
 10298d0:	01400284 	movi	r5,10
 10298d4:	900d883a 	mov	r6,r18
 10298d8:	102a57c0 	call	102a57c <memchr>
 10298dc:	10003826 	beq	r2,zero,10299c0 <__sfvwrite_r+0x498>
 10298e0:	10800044 	addi	r2,r2,1
 10298e4:	1729c83a 	sub	r20,r2,fp
 10298e8:	02000044 	movi	r8,1
 10298ec:	003f8f06 	br	102972c <_gp+0xfffebaa8>
 10298f0:	80800517 	ldw	r2,20(r16)
 10298f4:	81400417 	ldw	r5,16(r16)
 10298f8:	87000017 	ldw	fp,0(r16)
 10298fc:	10a9883a 	add	r20,r2,r2
 1029900:	a085883a 	add	r2,r20,r2
 1029904:	1028d7fa 	srli	r20,r2,31
 1029908:	e179c83a 	sub	fp,fp,r5
 102990c:	e1000044 	addi	r4,fp,1
 1029910:	a085883a 	add	r2,r20,r2
 1029914:	1029d07a 	srai	r20,r2,1
 1029918:	2485883a 	add	r2,r4,r18
 102991c:	a00d883a 	mov	r6,r20
 1029920:	a080022e 	bgeu	r20,r2,102992c <__sfvwrite_r+0x404>
 1029924:	1029883a 	mov	r20,r2
 1029928:	100d883a 	mov	r6,r2
 102992c:	18c1000c 	andi	r3,r3,1024
 1029930:	a809883a 	mov	r4,r21
 1029934:	183f6a26 	beq	r3,zero,10296e0 <_gp+0xfffeba5c>
 1029938:	300b883a 	mov	r5,r6
 102993c:	1029dd40 	call	1029dd4 <_malloc_r>
 1029940:	102d883a 	mov	r22,r2
 1029944:	103f6c26 	beq	r2,zero,10296f8 <_gp+0xfffeba74>
 1029948:	81400417 	ldw	r5,16(r16)
 102994c:	1009883a 	mov	r4,r2
 1029950:	e00d883a 	mov	r6,fp
 1029954:	102a6640 	call	102a664 <memcpy>
 1029958:	8080030b 	ldhu	r2,12(r16)
 102995c:	00fedfc4 	movi	r3,-1153
 1029960:	10c4703a 	and	r2,r2,r3
 1029964:	10802014 	ori	r2,r2,128
 1029968:	8080030d 	sth	r2,12(r16)
 102996c:	b709883a 	add	r4,r22,fp
 1029970:	a707c83a 	sub	r3,r20,fp
 1029974:	85800415 	stw	r22,16(r16)
 1029978:	85000515 	stw	r20,20(r16)
 102997c:	81000015 	stw	r4,0(r16)
 1029980:	9039883a 	mov	fp,r18
 1029984:	80c00215 	stw	r3,8(r16)
 1029988:	9029883a 	mov	r20,r18
 102998c:	902d883a 	mov	r22,r18
 1029990:	003f3d06 	br	1029688 <_gp+0xfffeba04>
 1029994:	b80b883a 	mov	r5,r23
 1029998:	a00d883a 	mov	r6,r20
 102999c:	102a79c0 	call	102a79c <memmove>
 10299a0:	80800017 	ldw	r2,0(r16)
 10299a4:	a809883a 	mov	r4,r21
 10299a8:	800b883a 	mov	r5,r16
 10299ac:	1505883a 	add	r2,r2,r20
 10299b0:	80800015 	stw	r2,0(r16)
 10299b4:	1028b1c0 	call	1028b1c <_fflush_r>
 10299b8:	103fa526 	beq	r2,zero,1029850 <_gp+0xfffebbcc>
 10299bc:	003f5006 	br	1029700 <_gp+0xfffeba7c>
 10299c0:	95000044 	addi	r20,r18,1
 10299c4:	02000044 	movi	r8,1
 10299c8:	003f5806 	br	102972c <_gp+0xfffebaa8>

010299cc <_fwalk>:
 10299cc:	defff804 	addi	sp,sp,-32
 10299d0:	dd400515 	stw	r21,20(sp)
 10299d4:	2540b804 	addi	r21,r4,736
 10299d8:	dd800615 	stw	r22,24(sp)
 10299dc:	dd000415 	stw	r20,16(sp)
 10299e0:	dfc00715 	stw	ra,28(sp)
 10299e4:	dcc00315 	stw	r19,12(sp)
 10299e8:	dc800215 	stw	r18,8(sp)
 10299ec:	dc400115 	stw	r17,4(sp)
 10299f0:	dc000015 	stw	r16,0(sp)
 10299f4:	2829883a 	mov	r20,r5
 10299f8:	002d883a 	mov	r22,zero
 10299fc:	10290d40 	call	10290d4 <__sfp_lock_acquire>
 1029a00:	a8001426 	beq	r21,zero,1029a54 <_fwalk+0x88>
 1029a04:	04ffffc4 	movi	r19,-1
 1029a08:	ac400117 	ldw	r17,4(r21)
 1029a0c:	ac800217 	ldw	r18,8(r21)
 1029a10:	8c7fffc4 	addi	r17,r17,-1
 1029a14:	88000d16 	blt	r17,zero,1029a4c <_fwalk+0x80>
 1029a18:	94000304 	addi	r16,r18,12
 1029a1c:	94800384 	addi	r18,r18,14
 1029a20:	80c0000f 	ldh	r3,0(r16)
 1029a24:	8c7fffc4 	addi	r17,r17,-1
 1029a28:	813ffd04 	addi	r4,r16,-12
 1029a2c:	18000426 	beq	r3,zero,1029a40 <_fwalk+0x74>
 1029a30:	90c0000f 	ldh	r3,0(r18)
 1029a34:	1cc00226 	beq	r3,r19,1029a40 <_fwalk+0x74>
 1029a38:	a03ee83a 	callr	r20
 1029a3c:	b0acb03a 	or	r22,r22,r2
 1029a40:	84001a04 	addi	r16,r16,104
 1029a44:	94801a04 	addi	r18,r18,104
 1029a48:	8cfff51e 	bne	r17,r19,1029a20 <_gp+0xfffebd9c>
 1029a4c:	ad400017 	ldw	r21,0(r21)
 1029a50:	a83fed1e 	bne	r21,zero,1029a08 <_gp+0xfffebd84>
 1029a54:	10290d80 	call	10290d8 <__sfp_lock_release>
 1029a58:	b005883a 	mov	r2,r22
 1029a5c:	dfc00717 	ldw	ra,28(sp)
 1029a60:	dd800617 	ldw	r22,24(sp)
 1029a64:	dd400517 	ldw	r21,20(sp)
 1029a68:	dd000417 	ldw	r20,16(sp)
 1029a6c:	dcc00317 	ldw	r19,12(sp)
 1029a70:	dc800217 	ldw	r18,8(sp)
 1029a74:	dc400117 	ldw	r17,4(sp)
 1029a78:	dc000017 	ldw	r16,0(sp)
 1029a7c:	dec00804 	addi	sp,sp,32
 1029a80:	f800283a 	ret

01029a84 <_fwalk_reent>:
 1029a84:	defff804 	addi	sp,sp,-32
 1029a88:	dd400515 	stw	r21,20(sp)
 1029a8c:	2540b804 	addi	r21,r4,736
 1029a90:	dd800615 	stw	r22,24(sp)
 1029a94:	dd000415 	stw	r20,16(sp)
 1029a98:	dcc00315 	stw	r19,12(sp)
 1029a9c:	dfc00715 	stw	ra,28(sp)
 1029aa0:	dc800215 	stw	r18,8(sp)
 1029aa4:	dc400115 	stw	r17,4(sp)
 1029aa8:	dc000015 	stw	r16,0(sp)
 1029aac:	2027883a 	mov	r19,r4
 1029ab0:	2829883a 	mov	r20,r5
 1029ab4:	002d883a 	mov	r22,zero
 1029ab8:	10290d40 	call	10290d4 <__sfp_lock_acquire>
 1029abc:	a8001326 	beq	r21,zero,1029b0c <_fwalk_reent+0x88>
 1029ac0:	04bfffc4 	movi	r18,-1
 1029ac4:	ac400117 	ldw	r17,4(r21)
 1029ac8:	ac000217 	ldw	r16,8(r21)
 1029acc:	8c7fffc4 	addi	r17,r17,-1
 1029ad0:	88000c16 	blt	r17,zero,1029b04 <_fwalk_reent+0x80>
 1029ad4:	84000304 	addi	r16,r16,12
 1029ad8:	80c0000f 	ldh	r3,0(r16)
 1029adc:	8c7fffc4 	addi	r17,r17,-1
 1029ae0:	817ffd04 	addi	r5,r16,-12
 1029ae4:	18000526 	beq	r3,zero,1029afc <_fwalk_reent+0x78>
 1029ae8:	80c0008f 	ldh	r3,2(r16)
 1029aec:	9809883a 	mov	r4,r19
 1029af0:	1c800226 	beq	r3,r18,1029afc <_fwalk_reent+0x78>
 1029af4:	a03ee83a 	callr	r20
 1029af8:	b0acb03a 	or	r22,r22,r2
 1029afc:	84001a04 	addi	r16,r16,104
 1029b00:	8cbff51e 	bne	r17,r18,1029ad8 <_gp+0xfffebe54>
 1029b04:	ad400017 	ldw	r21,0(r21)
 1029b08:	a83fee1e 	bne	r21,zero,1029ac4 <_gp+0xfffebe40>
 1029b0c:	10290d80 	call	10290d8 <__sfp_lock_release>
 1029b10:	b005883a 	mov	r2,r22
 1029b14:	dfc00717 	ldw	ra,28(sp)
 1029b18:	dd800617 	ldw	r22,24(sp)
 1029b1c:	dd400517 	ldw	r21,20(sp)
 1029b20:	dd000417 	ldw	r20,16(sp)
 1029b24:	dcc00317 	ldw	r19,12(sp)
 1029b28:	dc800217 	ldw	r18,8(sp)
 1029b2c:	dc400117 	ldw	r17,4(sp)
 1029b30:	dc000017 	ldw	r16,0(sp)
 1029b34:	dec00804 	addi	sp,sp,32
 1029b38:	f800283a 	ret

01029b3c <_setlocale_r>:
 1029b3c:	30001b26 	beq	r6,zero,1029bac <_setlocale_r+0x70>
 1029b40:	014040f4 	movhi	r5,259
 1029b44:	defffe04 	addi	sp,sp,-8
 1029b48:	29500f04 	addi	r5,r5,16444
 1029b4c:	3009883a 	mov	r4,r6
 1029b50:	dc000015 	stw	r16,0(sp)
 1029b54:	dfc00115 	stw	ra,4(sp)
 1029b58:	3021883a 	mov	r16,r6
 1029b5c:	102c14c0 	call	102c14c <strcmp>
 1029b60:	1000061e 	bne	r2,zero,1029b7c <_setlocale_r+0x40>
 1029b64:	008040f4 	movhi	r2,259
 1029b68:	10900e04 	addi	r2,r2,16440
 1029b6c:	dfc00117 	ldw	ra,4(sp)
 1029b70:	dc000017 	ldw	r16,0(sp)
 1029b74:	dec00204 	addi	sp,sp,8
 1029b78:	f800283a 	ret
 1029b7c:	014040f4 	movhi	r5,259
 1029b80:	29500e04 	addi	r5,r5,16440
 1029b84:	8009883a 	mov	r4,r16
 1029b88:	102c14c0 	call	102c14c <strcmp>
 1029b8c:	103ff526 	beq	r2,zero,1029b64 <_gp+0xfffebee0>
 1029b90:	014040f4 	movhi	r5,259
 1029b94:	294ff104 	addi	r5,r5,16324
 1029b98:	8009883a 	mov	r4,r16
 1029b9c:	102c14c0 	call	102c14c <strcmp>
 1029ba0:	103ff026 	beq	r2,zero,1029b64 <_gp+0xfffebee0>
 1029ba4:	0005883a 	mov	r2,zero
 1029ba8:	003ff006 	br	1029b6c <_gp+0xfffebee8>
 1029bac:	008040f4 	movhi	r2,259
 1029bb0:	10900e04 	addi	r2,r2,16440
 1029bb4:	f800283a 	ret

01029bb8 <__locale_charset>:
 1029bb8:	008040f4 	movhi	r2,259
 1029bbc:	10918704 	addi	r2,r2,17948
 1029bc0:	f800283a 	ret

01029bc4 <__locale_mb_cur_max>:
 1029bc4:	008040f4 	movhi	r2,259
 1029bc8:	10972304 	addi	r2,r2,23692
 1029bcc:	10800017 	ldw	r2,0(r2)
 1029bd0:	f800283a 	ret

01029bd4 <__locale_msgcharset>:
 1029bd4:	008040f4 	movhi	r2,259
 1029bd8:	10917f04 	addi	r2,r2,17916
 1029bdc:	f800283a 	ret

01029be0 <__locale_cjk_lang>:
 1029be0:	0005883a 	mov	r2,zero
 1029be4:	f800283a 	ret

01029be8 <_localeconv_r>:
 1029be8:	008040f4 	movhi	r2,259
 1029bec:	10918f04 	addi	r2,r2,17980
 1029bf0:	f800283a 	ret

01029bf4 <setlocale>:
 1029bf4:	00c040f4 	movhi	r3,259
 1029bf8:	18d72204 	addi	r3,r3,23688
 1029bfc:	2005883a 	mov	r2,r4
 1029c00:	19000017 	ldw	r4,0(r3)
 1029c04:	280d883a 	mov	r6,r5
 1029c08:	100b883a 	mov	r5,r2
 1029c0c:	1029b3c1 	jmpi	1029b3c <_setlocale_r>

01029c10 <localeconv>:
 1029c10:	008040f4 	movhi	r2,259
 1029c14:	10918f04 	addi	r2,r2,17980
 1029c18:	f800283a 	ret

01029c1c <__smakebuf_r>:
 1029c1c:	2880030b 	ldhu	r2,12(r5)
 1029c20:	10c0008c 	andi	r3,r2,2
 1029c24:	1800401e 	bne	r3,zero,1029d28 <__smakebuf_r+0x10c>
 1029c28:	deffec04 	addi	sp,sp,-80
 1029c2c:	dc000f15 	stw	r16,60(sp)
 1029c30:	2821883a 	mov	r16,r5
 1029c34:	2940038f 	ldh	r5,14(r5)
 1029c38:	dc401015 	stw	r17,64(sp)
 1029c3c:	dfc01315 	stw	ra,76(sp)
 1029c40:	dcc01215 	stw	r19,72(sp)
 1029c44:	dc801115 	stw	r18,68(sp)
 1029c48:	2023883a 	mov	r17,r4
 1029c4c:	28001b16 	blt	r5,zero,1029cbc <__smakebuf_r+0xa0>
 1029c50:	d80d883a 	mov	r6,sp
 1029c54:	102ed180 	call	102ed18 <_fstat_r>
 1029c58:	10001716 	blt	r2,zero,1029cb8 <__smakebuf_r+0x9c>
 1029c5c:	d8800117 	ldw	r2,4(sp)
 1029c60:	00e00014 	movui	r3,32768
 1029c64:	10bc000c 	andi	r2,r2,61440
 1029c68:	10c03726 	beq	r2,r3,1029d48 <__smakebuf_r+0x12c>
 1029c6c:	80c0030b 	ldhu	r3,12(r16)
 1029c70:	18c20014 	ori	r3,r3,2048
 1029c74:	80c0030d 	sth	r3,12(r16)
 1029c78:	00c80004 	movi	r3,8192
 1029c7c:	10c03c1e 	bne	r2,r3,1029d70 <__smakebuf_r+0x154>
 1029c80:	8140038f 	ldh	r5,14(r16)
 1029c84:	8809883a 	mov	r4,r17
 1029c88:	102ed700 	call	102ed70 <_isatty_r>
 1029c8c:	10004e26 	beq	r2,zero,1029dc8 <__smakebuf_r+0x1ac>
 1029c90:	8080030b 	ldhu	r2,12(r16)
 1029c94:	04c00044 	movi	r19,1
 1029c98:	80c010c4 	addi	r3,r16,67
 1029c9c:	14c4b03a 	or	r2,r2,r19
 1029ca0:	8080030d 	sth	r2,12(r16)
 1029ca4:	80c00015 	stw	r3,0(r16)
 1029ca8:	80c00415 	stw	r3,16(r16)
 1029cac:	84c00515 	stw	r19,20(r16)
 1029cb0:	04810004 	movi	r18,1024
 1029cb4:	00000706 	br	1029cd4 <__smakebuf_r+0xb8>
 1029cb8:	8080030b 	ldhu	r2,12(r16)
 1029cbc:	10c0200c 	andi	r3,r2,128
 1029cc0:	18001f1e 	bne	r3,zero,1029d40 <__smakebuf_r+0x124>
 1029cc4:	04810004 	movi	r18,1024
 1029cc8:	10820014 	ori	r2,r2,2048
 1029ccc:	8080030d 	sth	r2,12(r16)
 1029cd0:	0027883a 	mov	r19,zero
 1029cd4:	8809883a 	mov	r4,r17
 1029cd8:	900b883a 	mov	r5,r18
 1029cdc:	1029dd40 	call	1029dd4 <_malloc_r>
 1029ce0:	10002e26 	beq	r2,zero,1029d9c <__smakebuf_r+0x180>
 1029ce4:	80c0030b 	ldhu	r3,12(r16)
 1029ce8:	010040f4 	movhi	r4,259
 1029cec:	21236104 	addi	r4,r4,-29308
 1029cf0:	89000f15 	stw	r4,60(r17)
 1029cf4:	18c02014 	ori	r3,r3,128
 1029cf8:	80c0030d 	sth	r3,12(r16)
 1029cfc:	80800015 	stw	r2,0(r16)
 1029d00:	80800415 	stw	r2,16(r16)
 1029d04:	84800515 	stw	r18,20(r16)
 1029d08:	98001c1e 	bne	r19,zero,1029d7c <__smakebuf_r+0x160>
 1029d0c:	dfc01317 	ldw	ra,76(sp)
 1029d10:	dcc01217 	ldw	r19,72(sp)
 1029d14:	dc801117 	ldw	r18,68(sp)
 1029d18:	dc401017 	ldw	r17,64(sp)
 1029d1c:	dc000f17 	ldw	r16,60(sp)
 1029d20:	dec01404 	addi	sp,sp,80
 1029d24:	f800283a 	ret
 1029d28:	288010c4 	addi	r2,r5,67
 1029d2c:	28800015 	stw	r2,0(r5)
 1029d30:	28800415 	stw	r2,16(r5)
 1029d34:	00800044 	movi	r2,1
 1029d38:	28800515 	stw	r2,20(r5)
 1029d3c:	f800283a 	ret
 1029d40:	04801004 	movi	r18,64
 1029d44:	003fe006 	br	1029cc8 <_gp+0xfffec044>
 1029d48:	81000a17 	ldw	r4,40(r16)
 1029d4c:	00c040f4 	movhi	r3,259
 1029d50:	18f03a04 	addi	r3,r3,-16152
 1029d54:	20ffc51e 	bne	r4,r3,1029c6c <_gp+0xfffebfe8>
 1029d58:	80c0030b 	ldhu	r3,12(r16)
 1029d5c:	01010004 	movi	r4,1024
 1029d60:	81001315 	stw	r4,76(r16)
 1029d64:	1906b03a 	or	r3,r3,r4
 1029d68:	80c0030d 	sth	r3,12(r16)
 1029d6c:	003fc206 	br	1029c78 <_gp+0xfffebff4>
 1029d70:	0027883a 	mov	r19,zero
 1029d74:	04810004 	movi	r18,1024
 1029d78:	003fd606 	br	1029cd4 <_gp+0xfffec050>
 1029d7c:	8140038f 	ldh	r5,14(r16)
 1029d80:	8809883a 	mov	r4,r17
 1029d84:	102ed700 	call	102ed70 <_isatty_r>
 1029d88:	103fe026 	beq	r2,zero,1029d0c <_gp+0xfffec088>
 1029d8c:	8080030b 	ldhu	r2,12(r16)
 1029d90:	10800054 	ori	r2,r2,1
 1029d94:	8080030d 	sth	r2,12(r16)
 1029d98:	003fdc06 	br	1029d0c <_gp+0xfffec088>
 1029d9c:	8080030b 	ldhu	r2,12(r16)
 1029da0:	10c0800c 	andi	r3,r2,512
 1029da4:	183fd91e 	bne	r3,zero,1029d0c <_gp+0xfffec088>
 1029da8:	10800094 	ori	r2,r2,2
 1029dac:	80c010c4 	addi	r3,r16,67
 1029db0:	8080030d 	sth	r2,12(r16)
 1029db4:	00800044 	movi	r2,1
 1029db8:	80c00015 	stw	r3,0(r16)
 1029dbc:	80c00415 	stw	r3,16(r16)
 1029dc0:	80800515 	stw	r2,20(r16)
 1029dc4:	003fd106 	br	1029d0c <_gp+0xfffec088>
 1029dc8:	04c00044 	movi	r19,1
 1029dcc:	04810004 	movi	r18,1024
 1029dd0:	003fc006 	br	1029cd4 <_gp+0xfffec050>

01029dd4 <_malloc_r>:
 1029dd4:	defff504 	addi	sp,sp,-44
 1029dd8:	dc800315 	stw	r18,12(sp)
 1029ddc:	dfc00a15 	stw	ra,40(sp)
 1029de0:	df000915 	stw	fp,36(sp)
 1029de4:	ddc00815 	stw	r23,32(sp)
 1029de8:	dd800715 	stw	r22,28(sp)
 1029dec:	dd400615 	stw	r21,24(sp)
 1029df0:	dd000515 	stw	r20,20(sp)
 1029df4:	dcc00415 	stw	r19,16(sp)
 1029df8:	dc400215 	stw	r17,8(sp)
 1029dfc:	dc000115 	stw	r16,4(sp)
 1029e00:	288002c4 	addi	r2,r5,11
 1029e04:	00c00584 	movi	r3,22
 1029e08:	2025883a 	mov	r18,r4
 1029e0c:	18802a2e 	bgeu	r3,r2,1029eb8 <_malloc_r+0xe4>
 1029e10:	047ffe04 	movi	r17,-8
 1029e14:	1462703a 	and	r17,r2,r17
 1029e18:	88009e16 	blt	r17,zero,102a094 <_malloc_r+0x2c0>
 1029e1c:	89409d36 	bltu	r17,r5,102a094 <_malloc_r+0x2c0>
 1029e20:	10317500 	call	1031750 <__malloc_lock>
 1029e24:	00807dc4 	movi	r2,503
 1029e28:	14402736 	bltu	r2,r17,1029ec8 <_malloc_r+0xf4>
 1029e2c:	8806d0fa 	srli	r3,r17,3
 1029e30:	04c040f4 	movhi	r19,259
 1029e34:	9cd19d04 	addi	r19,r19,18036
 1029e38:	18c5883a 	add	r2,r3,r3
 1029e3c:	1085883a 	add	r2,r2,r2
 1029e40:	1085883a 	add	r2,r2,r2
 1029e44:	9885883a 	add	r2,r19,r2
 1029e48:	14000317 	ldw	r16,12(r2)
 1029e4c:	80814a26 	beq	r16,r2,102a378 <_malloc_r+0x5a4>
 1029e50:	80c00117 	ldw	r3,4(r16)
 1029e54:	81000317 	ldw	r4,12(r16)
 1029e58:	00bfff04 	movi	r2,-4
 1029e5c:	1884703a 	and	r2,r3,r2
 1029e60:	81400217 	ldw	r5,8(r16)
 1029e64:	8085883a 	add	r2,r16,r2
 1029e68:	10c00117 	ldw	r3,4(r2)
 1029e6c:	29000315 	stw	r4,12(r5)
 1029e70:	21400215 	stw	r5,8(r4)
 1029e74:	18c00054 	ori	r3,r3,1
 1029e78:	10c00115 	stw	r3,4(r2)
 1029e7c:	9009883a 	mov	r4,r18
 1029e80:	10317700 	call	1031770 <__malloc_unlock>
 1029e84:	80800204 	addi	r2,r16,8
 1029e88:	dfc00a17 	ldw	ra,40(sp)
 1029e8c:	df000917 	ldw	fp,36(sp)
 1029e90:	ddc00817 	ldw	r23,32(sp)
 1029e94:	dd800717 	ldw	r22,28(sp)
 1029e98:	dd400617 	ldw	r21,24(sp)
 1029e9c:	dd000517 	ldw	r20,20(sp)
 1029ea0:	dcc00417 	ldw	r19,16(sp)
 1029ea4:	dc800317 	ldw	r18,12(sp)
 1029ea8:	dc400217 	ldw	r17,8(sp)
 1029eac:	dc000117 	ldw	r16,4(sp)
 1029eb0:	dec00b04 	addi	sp,sp,44
 1029eb4:	f800283a 	ret
 1029eb8:	04400404 	movi	r17,16
 1029ebc:	89407536 	bltu	r17,r5,102a094 <_malloc_r+0x2c0>
 1029ec0:	10317500 	call	1031750 <__malloc_lock>
 1029ec4:	003fd906 	br	1029e2c <_gp+0xfffec1a8>
 1029ec8:	8806d27a 	srli	r3,r17,9
 1029ecc:	18007526 	beq	r3,zero,102a0a4 <_malloc_r+0x2d0>
 1029ed0:	00800104 	movi	r2,4
 1029ed4:	10c0ef36 	bltu	r2,r3,102a294 <_malloc_r+0x4c0>
 1029ed8:	8806d1ba 	srli	r3,r17,6
 1029edc:	19c00e04 	addi	r7,r3,56
 1029ee0:	39cb883a 	add	r5,r7,r7
 1029ee4:	04c040f4 	movhi	r19,259
 1029ee8:	294b883a 	add	r5,r5,r5
 1029eec:	9cd19d04 	addi	r19,r19,18036
 1029ef0:	294b883a 	add	r5,r5,r5
 1029ef4:	994b883a 	add	r5,r19,r5
 1029ef8:	2c000317 	ldw	r16,12(r5)
 1029efc:	2c000e26 	beq	r5,r16,1029f38 <_malloc_r+0x164>
 1029f00:	80800117 	ldw	r2,4(r16)
 1029f04:	01bfff04 	movi	r6,-4
 1029f08:	010003c4 	movi	r4,15
 1029f0c:	1184703a 	and	r2,r2,r6
 1029f10:	1447c83a 	sub	r3,r2,r17
 1029f14:	20c00716 	blt	r4,r3,1029f34 <_malloc_r+0x160>
 1029f18:	1800650e 	bge	r3,zero,102a0b0 <_malloc_r+0x2dc>
 1029f1c:	84000317 	ldw	r16,12(r16)
 1029f20:	2c000526 	beq	r5,r16,1029f38 <_malloc_r+0x164>
 1029f24:	80800117 	ldw	r2,4(r16)
 1029f28:	1184703a 	and	r2,r2,r6
 1029f2c:	1447c83a 	sub	r3,r2,r17
 1029f30:	20fff90e 	bge	r4,r3,1029f18 <_gp+0xfffec294>
 1029f34:	39ffffc4 	addi	r7,r7,-1
 1029f38:	38c00044 	addi	r3,r7,1
 1029f3c:	018040f4 	movhi	r6,259
 1029f40:	9c000417 	ldw	r16,16(r19)
 1029f44:	31919d04 	addi	r6,r6,18036
 1029f48:	32400204 	addi	r9,r6,8
 1029f4c:	82410326 	beq	r16,r9,102a35c <_malloc_r+0x588>
 1029f50:	81000117 	ldw	r4,4(r16)
 1029f54:	00bfff04 	movi	r2,-4
 1029f58:	208e703a 	and	r7,r4,r2
 1029f5c:	3c45c83a 	sub	r2,r7,r17
 1029f60:	010003c4 	movi	r4,15
 1029f64:	2080ee16 	blt	r4,r2,102a320 <_malloc_r+0x54c>
 1029f68:	32400515 	stw	r9,20(r6)
 1029f6c:	32400415 	stw	r9,16(r6)
 1029f70:	1000510e 	bge	r2,zero,102a0b8 <_malloc_r+0x2e4>
 1029f74:	00807fc4 	movi	r2,511
 1029f78:	11c0ce36 	bltu	r2,r7,102a2b4 <_malloc_r+0x4e0>
 1029f7c:	3808d0fa 	srli	r4,r7,3
 1029f80:	01c00044 	movi	r7,1
 1029f84:	30800117 	ldw	r2,4(r6)
 1029f88:	210b883a 	add	r5,r4,r4
 1029f8c:	294b883a 	add	r5,r5,r5
 1029f90:	2009d0ba 	srai	r4,r4,2
 1029f94:	294b883a 	add	r5,r5,r5
 1029f98:	298b883a 	add	r5,r5,r6
 1029f9c:	2a000217 	ldw	r8,8(r5)
 1029fa0:	3908983a 	sll	r4,r7,r4
 1029fa4:	81400315 	stw	r5,12(r16)
 1029fa8:	82000215 	stw	r8,8(r16)
 1029fac:	2088b03a 	or	r4,r4,r2
 1029fb0:	2c000215 	stw	r16,8(r5)
 1029fb4:	31000115 	stw	r4,4(r6)
 1029fb8:	44000315 	stw	r16,12(r8)
 1029fbc:	1805d0ba 	srai	r2,r3,2
 1029fc0:	01400044 	movi	r5,1
 1029fc4:	288a983a 	sll	r5,r5,r2
 1029fc8:	21404336 	bltu	r4,r5,102a0d8 <_malloc_r+0x304>
 1029fcc:	2144703a 	and	r2,r4,r5
 1029fd0:	10000a1e 	bne	r2,zero,1029ffc <_malloc_r+0x228>
 1029fd4:	00bfff04 	movi	r2,-4
 1029fd8:	294b883a 	add	r5,r5,r5
 1029fdc:	1886703a 	and	r3,r3,r2
 1029fe0:	2144703a 	and	r2,r4,r5
 1029fe4:	18c00104 	addi	r3,r3,4
 1029fe8:	1000041e 	bne	r2,zero,1029ffc <_malloc_r+0x228>
 1029fec:	294b883a 	add	r5,r5,r5
 1029ff0:	2144703a 	and	r2,r4,r5
 1029ff4:	18c00104 	addi	r3,r3,4
 1029ff8:	103ffc26 	beq	r2,zero,1029fec <_gp+0xfffec368>
 1029ffc:	023fff04 	movi	r8,-4
 102a000:	01c003c4 	movi	r7,15
 102a004:	18c5883a 	add	r2,r3,r3
 102a008:	1085883a 	add	r2,r2,r2
 102a00c:	1085883a 	add	r2,r2,r2
 102a010:	9895883a 	add	r10,r19,r2
 102a014:	52c00304 	addi	r11,r10,12
 102a018:	1819883a 	mov	r12,r3
 102a01c:	5c000017 	ldw	r16,0(r11)
 102a020:	59bffd04 	addi	r6,r11,-12
 102a024:	8180041e 	bne	r16,r6,102a038 <_malloc_r+0x264>
 102a028:	0000ce06 	br	102a364 <_malloc_r+0x590>
 102a02c:	2000d70e 	bge	r4,zero,102a38c <_malloc_r+0x5b8>
 102a030:	84000317 	ldw	r16,12(r16)
 102a034:	8180cb26 	beq	r16,r6,102a364 <_malloc_r+0x590>
 102a038:	80800117 	ldw	r2,4(r16)
 102a03c:	1204703a 	and	r2,r2,r8
 102a040:	1449c83a 	sub	r4,r2,r17
 102a044:	393ff90e 	bge	r7,r4,102a02c <_gp+0xfffec3a8>
 102a048:	80800317 	ldw	r2,12(r16)
 102a04c:	80c00217 	ldw	r3,8(r16)
 102a050:	89400054 	ori	r5,r17,1
 102a054:	81400115 	stw	r5,4(r16)
 102a058:	18800315 	stw	r2,12(r3)
 102a05c:	10c00215 	stw	r3,8(r2)
 102a060:	8463883a 	add	r17,r16,r17
 102a064:	9c400515 	stw	r17,20(r19)
 102a068:	9c400415 	stw	r17,16(r19)
 102a06c:	20800054 	ori	r2,r4,1
 102a070:	88800115 	stw	r2,4(r17)
 102a074:	8a400315 	stw	r9,12(r17)
 102a078:	8a400215 	stw	r9,8(r17)
 102a07c:	8923883a 	add	r17,r17,r4
 102a080:	89000015 	stw	r4,0(r17)
 102a084:	9009883a 	mov	r4,r18
 102a088:	10317700 	call	1031770 <__malloc_unlock>
 102a08c:	80800204 	addi	r2,r16,8
 102a090:	003f7d06 	br	1029e88 <_gp+0xfffec204>
 102a094:	00800304 	movi	r2,12
 102a098:	90800015 	stw	r2,0(r18)
 102a09c:	0005883a 	mov	r2,zero
 102a0a0:	003f7906 	br	1029e88 <_gp+0xfffec204>
 102a0a4:	01401f84 	movi	r5,126
 102a0a8:	01c00fc4 	movi	r7,63
 102a0ac:	003f8d06 	br	1029ee4 <_gp+0xfffec260>
 102a0b0:	81000317 	ldw	r4,12(r16)
 102a0b4:	003f6a06 	br	1029e60 <_gp+0xfffec1dc>
 102a0b8:	81c5883a 	add	r2,r16,r7
 102a0bc:	10c00117 	ldw	r3,4(r2)
 102a0c0:	9009883a 	mov	r4,r18
 102a0c4:	18c00054 	ori	r3,r3,1
 102a0c8:	10c00115 	stw	r3,4(r2)
 102a0cc:	10317700 	call	1031770 <__malloc_unlock>
 102a0d0:	80800204 	addi	r2,r16,8
 102a0d4:	003f6c06 	br	1029e88 <_gp+0xfffec204>
 102a0d8:	9c000217 	ldw	r16,8(r19)
 102a0dc:	00bfff04 	movi	r2,-4
 102a0e0:	85800117 	ldw	r22,4(r16)
 102a0e4:	b0ac703a 	and	r22,r22,r2
 102a0e8:	b4400336 	bltu	r22,r17,102a0f8 <_malloc_r+0x324>
 102a0ec:	b445c83a 	sub	r2,r22,r17
 102a0f0:	00c003c4 	movi	r3,15
 102a0f4:	18805d16 	blt	r3,r2,102a26c <_malloc_r+0x498>
 102a0f8:	05c040f4 	movhi	r23,259
 102a0fc:	008040f4 	movhi	r2,259
 102a100:	bdd72404 	addi	r23,r23,23696
 102a104:	109df104 	addi	r2,r2,30660
 102a108:	15400017 	ldw	r21,0(r2)
 102a10c:	b9000017 	ldw	r4,0(r23)
 102a110:	00ffffc4 	movi	r3,-1
 102a114:	858d883a 	add	r6,r16,r22
 102a118:	8d6b883a 	add	r21,r17,r21
 102a11c:	20c0e426 	beq	r4,r3,102a4b0 <_malloc_r+0x6dc>
 102a120:	ad4403c4 	addi	r21,r21,4111
 102a124:	00fc0004 	movi	r3,-4096
 102a128:	a8ea703a 	and	r21,r21,r3
 102a12c:	9009883a 	mov	r4,r18
 102a130:	a80b883a 	mov	r5,r21
 102a134:	d9800015 	stw	r6,0(sp)
 102a138:	102bfbc0 	call	102bfbc <_sbrk_r>
 102a13c:	00ffffc4 	movi	r3,-1
 102a140:	1029883a 	mov	r20,r2
 102a144:	d9800017 	ldw	r6,0(sp)
 102a148:	10c0a426 	beq	r2,r3,102a3dc <_malloc_r+0x608>
 102a14c:	1180a236 	bltu	r2,r6,102a3d8 <_malloc_r+0x604>
 102a150:	070040f4 	movhi	fp,259
 102a154:	e71dfa04 	addi	fp,fp,30696
 102a158:	e0c00017 	ldw	r3,0(fp)
 102a15c:	a8c7883a 	add	r3,r21,r3
 102a160:	e0c00015 	stw	r3,0(fp)
 102a164:	3500da26 	beq	r6,r20,102a4d0 <_malloc_r+0x6fc>
 102a168:	b9000017 	ldw	r4,0(r23)
 102a16c:	00bfffc4 	movi	r2,-1
 102a170:	2080e426 	beq	r4,r2,102a504 <_malloc_r+0x730>
 102a174:	a185c83a 	sub	r2,r20,r6
 102a178:	1885883a 	add	r2,r3,r2
 102a17c:	e0800015 	stw	r2,0(fp)
 102a180:	a0c001cc 	andi	r3,r20,7
 102a184:	1800b526 	beq	r3,zero,102a45c <_malloc_r+0x688>
 102a188:	a0e9c83a 	sub	r20,r20,r3
 102a18c:	00840204 	movi	r2,4104
 102a190:	a5000204 	addi	r20,r20,8
 102a194:	10c7c83a 	sub	r3,r2,r3
 102a198:	a545883a 	add	r2,r20,r21
 102a19c:	1083ffcc 	andi	r2,r2,4095
 102a1a0:	18abc83a 	sub	r21,r3,r2
 102a1a4:	9009883a 	mov	r4,r18
 102a1a8:	a80b883a 	mov	r5,r21
 102a1ac:	102bfbc0 	call	102bfbc <_sbrk_r>
 102a1b0:	00ffffc4 	movi	r3,-1
 102a1b4:	10c0d026 	beq	r2,r3,102a4f8 <_malloc_r+0x724>
 102a1b8:	1507c83a 	sub	r3,r2,r20
 102a1bc:	a8c7883a 	add	r3,r21,r3
 102a1c0:	18c00054 	ori	r3,r3,1
 102a1c4:	e0800017 	ldw	r2,0(fp)
 102a1c8:	9d000215 	stw	r20,8(r19)
 102a1cc:	a0c00115 	stw	r3,4(r20)
 102a1d0:	a887883a 	add	r3,r21,r2
 102a1d4:	e0c00015 	stw	r3,0(fp)
 102a1d8:	84c00e26 	beq	r16,r19,102a214 <_malloc_r+0x440>
 102a1dc:	018003c4 	movi	r6,15
 102a1e0:	3580a02e 	bgeu	r6,r22,102a464 <_malloc_r+0x690>
 102a1e4:	81400117 	ldw	r5,4(r16)
 102a1e8:	013ffe04 	movi	r4,-8
 102a1ec:	b0bffd04 	addi	r2,r22,-12
 102a1f0:	1104703a 	and	r2,r2,r4
 102a1f4:	2900004c 	andi	r4,r5,1
 102a1f8:	1108b03a 	or	r4,r2,r4
 102a1fc:	81000115 	stw	r4,4(r16)
 102a200:	01400144 	movi	r5,5
 102a204:	8089883a 	add	r4,r16,r2
 102a208:	21400115 	stw	r5,4(r4)
 102a20c:	21400215 	stw	r5,8(r4)
 102a210:	3080c036 	bltu	r6,r2,102a514 <_malloc_r+0x740>
 102a214:	008040f4 	movhi	r2,259
 102a218:	109df004 	addi	r2,r2,30656
 102a21c:	11000017 	ldw	r4,0(r2)
 102a220:	20c0012e 	bgeu	r4,r3,102a228 <_malloc_r+0x454>
 102a224:	10c00015 	stw	r3,0(r2)
 102a228:	008040f4 	movhi	r2,259
 102a22c:	109def04 	addi	r2,r2,30652
 102a230:	11000017 	ldw	r4,0(r2)
 102a234:	9c000217 	ldw	r16,8(r19)
 102a238:	20c0012e 	bgeu	r4,r3,102a240 <_malloc_r+0x46c>
 102a23c:	10c00015 	stw	r3,0(r2)
 102a240:	80c00117 	ldw	r3,4(r16)
 102a244:	00bfff04 	movi	r2,-4
 102a248:	1886703a 	and	r3,r3,r2
 102a24c:	1c45c83a 	sub	r2,r3,r17
 102a250:	1c400236 	bltu	r3,r17,102a25c <_malloc_r+0x488>
 102a254:	00c003c4 	movi	r3,15
 102a258:	18800416 	blt	r3,r2,102a26c <_malloc_r+0x498>
 102a25c:	9009883a 	mov	r4,r18
 102a260:	10317700 	call	1031770 <__malloc_unlock>
 102a264:	0005883a 	mov	r2,zero
 102a268:	003f0706 	br	1029e88 <_gp+0xfffec204>
 102a26c:	88c00054 	ori	r3,r17,1
 102a270:	80c00115 	stw	r3,4(r16)
 102a274:	8463883a 	add	r17,r16,r17
 102a278:	10800054 	ori	r2,r2,1
 102a27c:	9c400215 	stw	r17,8(r19)
 102a280:	88800115 	stw	r2,4(r17)
 102a284:	9009883a 	mov	r4,r18
 102a288:	10317700 	call	1031770 <__malloc_unlock>
 102a28c:	80800204 	addi	r2,r16,8
 102a290:	003efd06 	br	1029e88 <_gp+0xfffec204>
 102a294:	00800504 	movi	r2,20
 102a298:	10c0482e 	bgeu	r2,r3,102a3bc <_malloc_r+0x5e8>
 102a29c:	00801504 	movi	r2,84
 102a2a0:	10c06836 	bltu	r2,r3,102a444 <_malloc_r+0x670>
 102a2a4:	8806d33a 	srli	r3,r17,12
 102a2a8:	19c01b84 	addi	r7,r3,110
 102a2ac:	39cb883a 	add	r5,r7,r7
 102a2b0:	003f0c06 	br	1029ee4 <_gp+0xfffec260>
 102a2b4:	3804d27a 	srli	r2,r7,9
 102a2b8:	01000104 	movi	r4,4
 102a2bc:	2080422e 	bgeu	r4,r2,102a3c8 <_malloc_r+0x5f4>
 102a2c0:	01000504 	movi	r4,20
 102a2c4:	20807c36 	bltu	r4,r2,102a4b8 <_malloc_r+0x6e4>
 102a2c8:	110016c4 	addi	r4,r2,91
 102a2cc:	210b883a 	add	r5,r4,r4
 102a2d0:	294b883a 	add	r5,r5,r5
 102a2d4:	294b883a 	add	r5,r5,r5
 102a2d8:	994b883a 	add	r5,r19,r5
 102a2dc:	28800217 	ldw	r2,8(r5)
 102a2e0:	020040f4 	movhi	r8,259
 102a2e4:	42119d04 	addi	r8,r8,18036
 102a2e8:	11406326 	beq	r2,r5,102a478 <_malloc_r+0x6a4>
 102a2ec:	01bfff04 	movi	r6,-4
 102a2f0:	11000117 	ldw	r4,4(r2)
 102a2f4:	2188703a 	and	r4,r4,r6
 102a2f8:	3900022e 	bgeu	r7,r4,102a304 <_malloc_r+0x530>
 102a2fc:	10800217 	ldw	r2,8(r2)
 102a300:	28bffb1e 	bne	r5,r2,102a2f0 <_gp+0xfffec66c>
 102a304:	11800317 	ldw	r6,12(r2)
 102a308:	99000117 	ldw	r4,4(r19)
 102a30c:	81800315 	stw	r6,12(r16)
 102a310:	80800215 	stw	r2,8(r16)
 102a314:	34000215 	stw	r16,8(r6)
 102a318:	14000315 	stw	r16,12(r2)
 102a31c:	003f2706 	br	1029fbc <_gp+0xfffec338>
 102a320:	88c00054 	ori	r3,r17,1
 102a324:	80c00115 	stw	r3,4(r16)
 102a328:	8463883a 	add	r17,r16,r17
 102a32c:	34400515 	stw	r17,20(r6)
 102a330:	34400415 	stw	r17,16(r6)
 102a334:	10c00054 	ori	r3,r2,1
 102a338:	8a400315 	stw	r9,12(r17)
 102a33c:	8a400215 	stw	r9,8(r17)
 102a340:	88c00115 	stw	r3,4(r17)
 102a344:	88a3883a 	add	r17,r17,r2
 102a348:	88800015 	stw	r2,0(r17)
 102a34c:	9009883a 	mov	r4,r18
 102a350:	10317700 	call	1031770 <__malloc_unlock>
 102a354:	80800204 	addi	r2,r16,8
 102a358:	003ecb06 	br	1029e88 <_gp+0xfffec204>
 102a35c:	31000117 	ldw	r4,4(r6)
 102a360:	003f1606 	br	1029fbc <_gp+0xfffec338>
 102a364:	63000044 	addi	r12,r12,1
 102a368:	608000cc 	andi	r2,r12,3
 102a36c:	5ac00204 	addi	r11,r11,8
 102a370:	103f2a1e 	bne	r2,zero,102a01c <_gp+0xfffec398>
 102a374:	00002106 	br	102a3fc <_malloc_r+0x628>
 102a378:	80800204 	addi	r2,r16,8
 102a37c:	84000517 	ldw	r16,20(r16)
 102a380:	143eb31e 	bne	r2,r16,1029e50 <_gp+0xfffec1cc>
 102a384:	18c00084 	addi	r3,r3,2
 102a388:	003eec06 	br	1029f3c <_gp+0xfffec2b8>
 102a38c:	8085883a 	add	r2,r16,r2
 102a390:	10c00117 	ldw	r3,4(r2)
 102a394:	81000317 	ldw	r4,12(r16)
 102a398:	81400217 	ldw	r5,8(r16)
 102a39c:	18c00054 	ori	r3,r3,1
 102a3a0:	10c00115 	stw	r3,4(r2)
 102a3a4:	29000315 	stw	r4,12(r5)
 102a3a8:	21400215 	stw	r5,8(r4)
 102a3ac:	9009883a 	mov	r4,r18
 102a3b0:	10317700 	call	1031770 <__malloc_unlock>
 102a3b4:	80800204 	addi	r2,r16,8
 102a3b8:	003eb306 	br	1029e88 <_gp+0xfffec204>
 102a3bc:	19c016c4 	addi	r7,r3,91
 102a3c0:	39cb883a 	add	r5,r7,r7
 102a3c4:	003ec706 	br	1029ee4 <_gp+0xfffec260>
 102a3c8:	3804d1ba 	srli	r2,r7,6
 102a3cc:	11000e04 	addi	r4,r2,56
 102a3d0:	210b883a 	add	r5,r4,r4
 102a3d4:	003fbe06 	br	102a2d0 <_gp+0xfffec64c>
 102a3d8:	84ff5d26 	beq	r16,r19,102a150 <_gp+0xfffec4cc>
 102a3dc:	9c000217 	ldw	r16,8(r19)
 102a3e0:	00bfff04 	movi	r2,-4
 102a3e4:	80c00117 	ldw	r3,4(r16)
 102a3e8:	1886703a 	and	r3,r3,r2
 102a3ec:	003f9706 	br	102a24c <_gp+0xfffec5c8>
 102a3f0:	52800017 	ldw	r10,0(r10)
 102a3f4:	18ffffc4 	addi	r3,r3,-1
 102a3f8:	50805c1e 	bne	r10,r2,102a56c <_malloc_r+0x798>
 102a3fc:	190000cc 	andi	r4,r3,3
 102a400:	50bffe04 	addi	r2,r10,-8
 102a404:	203ffa1e 	bne	r4,zero,102a3f0 <_gp+0xfffec76c>
 102a408:	98800117 	ldw	r2,4(r19)
 102a40c:	0146303a 	nor	r3,zero,r5
 102a410:	1884703a 	and	r2,r3,r2
 102a414:	98800115 	stw	r2,4(r19)
 102a418:	294b883a 	add	r5,r5,r5
 102a41c:	117f2e36 	bltu	r2,r5,102a0d8 <_gp+0xfffec454>
 102a420:	283f2d26 	beq	r5,zero,102a0d8 <_gp+0xfffec454>
 102a424:	1146703a 	and	r3,r2,r5
 102a428:	1800521e 	bne	r3,zero,102a574 <_malloc_r+0x7a0>
 102a42c:	6007883a 	mov	r3,r12
 102a430:	294b883a 	add	r5,r5,r5
 102a434:	1148703a 	and	r4,r2,r5
 102a438:	18c00104 	addi	r3,r3,4
 102a43c:	203ffc26 	beq	r4,zero,102a430 <_gp+0xfffec7ac>
 102a440:	003ef006 	br	102a004 <_gp+0xfffec380>
 102a444:	00805504 	movi	r2,340
 102a448:	10c01336 	bltu	r2,r3,102a498 <_malloc_r+0x6c4>
 102a44c:	8806d3fa 	srli	r3,r17,15
 102a450:	19c01dc4 	addi	r7,r3,119
 102a454:	39cb883a 	add	r5,r7,r7
 102a458:	003ea206 	br	1029ee4 <_gp+0xfffec260>
 102a45c:	00c40004 	movi	r3,4096
 102a460:	003f4d06 	br	102a198 <_gp+0xfffec514>
 102a464:	00800044 	movi	r2,1
 102a468:	a0800115 	stw	r2,4(r20)
 102a46c:	a021883a 	mov	r16,r20
 102a470:	0007883a 	mov	r3,zero
 102a474:	003f7506 	br	102a24c <_gp+0xfffec5c8>
 102a478:	200bd0ba 	srai	r5,r4,2
 102a47c:	01800044 	movi	r6,1
 102a480:	41000117 	ldw	r4,4(r8)
 102a484:	314a983a 	sll	r5,r6,r5
 102a488:	100d883a 	mov	r6,r2
 102a48c:	2908b03a 	or	r4,r5,r4
 102a490:	41000115 	stw	r4,4(r8)
 102a494:	003f9d06 	br	102a30c <_gp+0xfffec688>
 102a498:	00815504 	movi	r2,1364
 102a49c:	10c01336 	bltu	r2,r3,102a4ec <_malloc_r+0x718>
 102a4a0:	8806d4ba 	srli	r3,r17,18
 102a4a4:	19c01f04 	addi	r7,r3,124
 102a4a8:	39cb883a 	add	r5,r7,r7
 102a4ac:	003e8d06 	br	1029ee4 <_gp+0xfffec260>
 102a4b0:	ad400404 	addi	r21,r21,16
 102a4b4:	003f1d06 	br	102a12c <_gp+0xfffec4a8>
 102a4b8:	01001504 	movi	r4,84
 102a4bc:	20801c36 	bltu	r4,r2,102a530 <_malloc_r+0x75c>
 102a4c0:	3804d33a 	srli	r2,r7,12
 102a4c4:	11001b84 	addi	r4,r2,110
 102a4c8:	210b883a 	add	r5,r4,r4
 102a4cc:	003f8006 	br	102a2d0 <_gp+0xfffec64c>
 102a4d0:	3083ffcc 	andi	r2,r6,4095
 102a4d4:	103f241e 	bne	r2,zero,102a168 <_gp+0xfffec4e4>
 102a4d8:	99000217 	ldw	r4,8(r19)
 102a4dc:	ad85883a 	add	r2,r21,r22
 102a4e0:	10800054 	ori	r2,r2,1
 102a4e4:	20800115 	stw	r2,4(r4)
 102a4e8:	003f4a06 	br	102a214 <_gp+0xfffec590>
 102a4ec:	01403f04 	movi	r5,252
 102a4f0:	01c01f84 	movi	r7,126
 102a4f4:	003e7b06 	br	1029ee4 <_gp+0xfffec260>
 102a4f8:	00c00044 	movi	r3,1
 102a4fc:	002b883a 	mov	r21,zero
 102a500:	003f3006 	br	102a1c4 <_gp+0xfffec540>
 102a504:	008040f4 	movhi	r2,259
 102a508:	10972404 	addi	r2,r2,23696
 102a50c:	15000015 	stw	r20,0(r2)
 102a510:	003f1b06 	br	102a180 <_gp+0xfffec4fc>
 102a514:	9009883a 	mov	r4,r18
 102a518:	81400204 	addi	r5,r16,8
 102a51c:	10292380 	call	1029238 <_free_r>
 102a520:	008040f4 	movhi	r2,259
 102a524:	109dfa04 	addi	r2,r2,30696
 102a528:	10c00017 	ldw	r3,0(r2)
 102a52c:	003f3906 	br	102a214 <_gp+0xfffec590>
 102a530:	01005504 	movi	r4,340
 102a534:	20800436 	bltu	r4,r2,102a548 <_malloc_r+0x774>
 102a538:	3804d3fa 	srli	r2,r7,15
 102a53c:	11001dc4 	addi	r4,r2,119
 102a540:	210b883a 	add	r5,r4,r4
 102a544:	003f6206 	br	102a2d0 <_gp+0xfffec64c>
 102a548:	01015504 	movi	r4,1364
 102a54c:	20800436 	bltu	r4,r2,102a560 <_malloc_r+0x78c>
 102a550:	3804d4ba 	srli	r2,r7,18
 102a554:	11001f04 	addi	r4,r2,124
 102a558:	210b883a 	add	r5,r4,r4
 102a55c:	003f5c06 	br	102a2d0 <_gp+0xfffec64c>
 102a560:	01403f04 	movi	r5,252
 102a564:	01001f84 	movi	r4,126
 102a568:	003f5906 	br	102a2d0 <_gp+0xfffec64c>
 102a56c:	98800117 	ldw	r2,4(r19)
 102a570:	003fa906 	br	102a418 <_gp+0xfffec794>
 102a574:	6007883a 	mov	r3,r12
 102a578:	003ea206 	br	102a004 <_gp+0xfffec380>

0102a57c <memchr>:
 102a57c:	208000cc 	andi	r2,r4,3
 102a580:	280f883a 	mov	r7,r5
 102a584:	10003526 	beq	r2,zero,102a65c <memchr+0xe0>
 102a588:	30bfffc4 	addi	r2,r6,-1
 102a58c:	30001b26 	beq	r6,zero,102a5fc <memchr+0x80>
 102a590:	21800003 	ldbu	r6,0(r4)
 102a594:	28c03fcc 	andi	r3,r5,255
 102a598:	30c01a26 	beq	r6,r3,102a604 <memchr+0x88>
 102a59c:	180d883a 	mov	r6,r3
 102a5a0:	00000406 	br	102a5b4 <memchr+0x38>
 102a5a4:	10001526 	beq	r2,zero,102a5fc <memchr+0x80>
 102a5a8:	20c00003 	ldbu	r3,0(r4)
 102a5ac:	10bfffc4 	addi	r2,r2,-1
 102a5b0:	19801426 	beq	r3,r6,102a604 <memchr+0x88>
 102a5b4:	21000044 	addi	r4,r4,1
 102a5b8:	20c000cc 	andi	r3,r4,3
 102a5bc:	183ff91e 	bne	r3,zero,102a5a4 <_gp+0xfffec920>
 102a5c0:	024000c4 	movi	r9,3
 102a5c4:	48801136 	bltu	r9,r2,102a60c <memchr+0x90>
 102a5c8:	10000c26 	beq	r2,zero,102a5fc <memchr+0x80>
 102a5cc:	20c00003 	ldbu	r3,0(r4)
 102a5d0:	29403fcc 	andi	r5,r5,255
 102a5d4:	19400b26 	beq	r3,r5,102a604 <memchr+0x88>
 102a5d8:	20c00044 	addi	r3,r4,1
 102a5dc:	2085883a 	add	r2,r4,r2
 102a5e0:	39803fcc 	andi	r6,r7,255
 102a5e4:	00000306 	br	102a5f4 <memchr+0x78>
 102a5e8:	18c00044 	addi	r3,r3,1
 102a5ec:	197fffc3 	ldbu	r5,-1(r3)
 102a5f0:	29800426 	beq	r5,r6,102a604 <memchr+0x88>
 102a5f4:	1809883a 	mov	r4,r3
 102a5f8:	18bffb1e 	bne	r3,r2,102a5e8 <_gp+0xfffec964>
 102a5fc:	0005883a 	mov	r2,zero
 102a600:	f800283a 	ret
 102a604:	2005883a 	mov	r2,r4
 102a608:	f800283a 	ret
 102a60c:	28c03fcc 	andi	r3,r5,255
 102a610:	1810923a 	slli	r8,r3,8
 102a614:	02ffbff4 	movhi	r11,65279
 102a618:	02a02074 	movhi	r10,32897
 102a61c:	40c6b03a 	or	r3,r8,r3
 102a620:	1810943a 	slli	r8,r3,16
 102a624:	5affbfc4 	addi	r11,r11,-257
 102a628:	52a02004 	addi	r10,r10,-32640
 102a62c:	40d0b03a 	or	r8,r8,r3
 102a630:	20c00017 	ldw	r3,0(r4)
 102a634:	40c6f03a 	xor	r3,r8,r3
 102a638:	1acd883a 	add	r6,r3,r11
 102a63c:	00c6303a 	nor	r3,zero,r3
 102a640:	30c6703a 	and	r3,r6,r3
 102a644:	1a86703a 	and	r3,r3,r10
 102a648:	183fdf1e 	bne	r3,zero,102a5c8 <_gp+0xfffec944>
 102a64c:	10bfff04 	addi	r2,r2,-4
 102a650:	21000104 	addi	r4,r4,4
 102a654:	48bff636 	bltu	r9,r2,102a630 <_gp+0xfffec9ac>
 102a658:	003fdb06 	br	102a5c8 <_gp+0xfffec944>
 102a65c:	3005883a 	mov	r2,r6
 102a660:	003fd706 	br	102a5c0 <_gp+0xfffec93c>

0102a664 <memcpy>:
 102a664:	deffff04 	addi	sp,sp,-4
 102a668:	dc000015 	stw	r16,0(sp)
 102a66c:	00c003c4 	movi	r3,15
 102a670:	2005883a 	mov	r2,r4
 102a674:	1980432e 	bgeu	r3,r6,102a784 <memcpy+0x120>
 102a678:	2146b03a 	or	r3,r4,r5
 102a67c:	18c000cc 	andi	r3,r3,3
 102a680:	1800421e 	bne	r3,zero,102a78c <memcpy+0x128>
 102a684:	343ffc04 	addi	r16,r6,-16
 102a688:	8020d13a 	srli	r16,r16,4
 102a68c:	28c00104 	addi	r3,r5,4
 102a690:	23400104 	addi	r13,r4,4
 102a694:	801e913a 	slli	r15,r16,4
 102a698:	2b000204 	addi	r12,r5,8
 102a69c:	22c00204 	addi	r11,r4,8
 102a6a0:	7bc00504 	addi	r15,r15,20
 102a6a4:	2a800304 	addi	r10,r5,12
 102a6a8:	22400304 	addi	r9,r4,12
 102a6ac:	2bdf883a 	add	r15,r5,r15
 102a6b0:	2811883a 	mov	r8,r5
 102a6b4:	200f883a 	mov	r7,r4
 102a6b8:	41000017 	ldw	r4,0(r8)
 102a6bc:	39c00404 	addi	r7,r7,16
 102a6c0:	18c00404 	addi	r3,r3,16
 102a6c4:	393ffc15 	stw	r4,-16(r7)
 102a6c8:	1bbffc17 	ldw	r14,-16(r3)
 102a6cc:	6b400404 	addi	r13,r13,16
 102a6d0:	5ac00404 	addi	r11,r11,16
 102a6d4:	6bbffc15 	stw	r14,-16(r13)
 102a6d8:	63800017 	ldw	r14,0(r12)
 102a6dc:	4a400404 	addi	r9,r9,16
 102a6e0:	42000404 	addi	r8,r8,16
 102a6e4:	5bbffc15 	stw	r14,-16(r11)
 102a6e8:	53800017 	ldw	r14,0(r10)
 102a6ec:	63000404 	addi	r12,r12,16
 102a6f0:	52800404 	addi	r10,r10,16
 102a6f4:	4bbffc15 	stw	r14,-16(r9)
 102a6f8:	1bffef1e 	bne	r3,r15,102a6b8 <_gp+0xfffeca34>
 102a6fc:	81c00044 	addi	r7,r16,1
 102a700:	380e913a 	slli	r7,r7,4
 102a704:	310003cc 	andi	r4,r6,15
 102a708:	02c000c4 	movi	r11,3
 102a70c:	11c7883a 	add	r3,r2,r7
 102a710:	29cb883a 	add	r5,r5,r7
 102a714:	59001f2e 	bgeu	r11,r4,102a794 <memcpy+0x130>
 102a718:	1813883a 	mov	r9,r3
 102a71c:	2811883a 	mov	r8,r5
 102a720:	200f883a 	mov	r7,r4
 102a724:	42800017 	ldw	r10,0(r8)
 102a728:	4a400104 	addi	r9,r9,4
 102a72c:	39ffff04 	addi	r7,r7,-4
 102a730:	4abfff15 	stw	r10,-4(r9)
 102a734:	42000104 	addi	r8,r8,4
 102a738:	59fffa36 	bltu	r11,r7,102a724 <_gp+0xfffecaa0>
 102a73c:	213fff04 	addi	r4,r4,-4
 102a740:	2008d0ba 	srli	r4,r4,2
 102a744:	318000cc 	andi	r6,r6,3
 102a748:	21000044 	addi	r4,r4,1
 102a74c:	2109883a 	add	r4,r4,r4
 102a750:	2109883a 	add	r4,r4,r4
 102a754:	1907883a 	add	r3,r3,r4
 102a758:	290b883a 	add	r5,r5,r4
 102a75c:	30000626 	beq	r6,zero,102a778 <memcpy+0x114>
 102a760:	198d883a 	add	r6,r3,r6
 102a764:	29c00003 	ldbu	r7,0(r5)
 102a768:	18c00044 	addi	r3,r3,1
 102a76c:	29400044 	addi	r5,r5,1
 102a770:	19ffffc5 	stb	r7,-1(r3)
 102a774:	19bffb1e 	bne	r3,r6,102a764 <_gp+0xfffecae0>
 102a778:	dc000017 	ldw	r16,0(sp)
 102a77c:	dec00104 	addi	sp,sp,4
 102a780:	f800283a 	ret
 102a784:	2007883a 	mov	r3,r4
 102a788:	003ff406 	br	102a75c <_gp+0xfffecad8>
 102a78c:	2007883a 	mov	r3,r4
 102a790:	003ff306 	br	102a760 <_gp+0xfffecadc>
 102a794:	200d883a 	mov	r6,r4
 102a798:	003ff006 	br	102a75c <_gp+0xfffecad8>

0102a79c <memmove>:
 102a79c:	2005883a 	mov	r2,r4
 102a7a0:	29000b2e 	bgeu	r5,r4,102a7d0 <memmove+0x34>
 102a7a4:	298f883a 	add	r7,r5,r6
 102a7a8:	21c0092e 	bgeu	r4,r7,102a7d0 <memmove+0x34>
 102a7ac:	2187883a 	add	r3,r4,r6
 102a7b0:	198bc83a 	sub	r5,r3,r6
 102a7b4:	30004b26 	beq	r6,zero,102a8e4 <memmove+0x148>
 102a7b8:	39ffffc4 	addi	r7,r7,-1
 102a7bc:	39000003 	ldbu	r4,0(r7)
 102a7c0:	18ffffc4 	addi	r3,r3,-1
 102a7c4:	19000005 	stb	r4,0(r3)
 102a7c8:	197ffb1e 	bne	r3,r5,102a7b8 <_gp+0xfffecb34>
 102a7cc:	f800283a 	ret
 102a7d0:	00c003c4 	movi	r3,15
 102a7d4:	1980412e 	bgeu	r3,r6,102a8dc <memmove+0x140>
 102a7d8:	1146b03a 	or	r3,r2,r5
 102a7dc:	18c000cc 	andi	r3,r3,3
 102a7e0:	1800411e 	bne	r3,zero,102a8e8 <memmove+0x14c>
 102a7e4:	33fffc04 	addi	r15,r6,-16
 102a7e8:	781ed13a 	srli	r15,r15,4
 102a7ec:	28c00104 	addi	r3,r5,4
 102a7f0:	13400104 	addi	r13,r2,4
 102a7f4:	781c913a 	slli	r14,r15,4
 102a7f8:	2b000204 	addi	r12,r5,8
 102a7fc:	12c00204 	addi	r11,r2,8
 102a800:	73800504 	addi	r14,r14,20
 102a804:	2a800304 	addi	r10,r5,12
 102a808:	12400304 	addi	r9,r2,12
 102a80c:	2b9d883a 	add	r14,r5,r14
 102a810:	2811883a 	mov	r8,r5
 102a814:	100f883a 	mov	r7,r2
 102a818:	41000017 	ldw	r4,0(r8)
 102a81c:	39c00404 	addi	r7,r7,16
 102a820:	18c00404 	addi	r3,r3,16
 102a824:	393ffc15 	stw	r4,-16(r7)
 102a828:	193ffc17 	ldw	r4,-16(r3)
 102a82c:	6b400404 	addi	r13,r13,16
 102a830:	5ac00404 	addi	r11,r11,16
 102a834:	693ffc15 	stw	r4,-16(r13)
 102a838:	61000017 	ldw	r4,0(r12)
 102a83c:	4a400404 	addi	r9,r9,16
 102a840:	42000404 	addi	r8,r8,16
 102a844:	593ffc15 	stw	r4,-16(r11)
 102a848:	51000017 	ldw	r4,0(r10)
 102a84c:	63000404 	addi	r12,r12,16
 102a850:	52800404 	addi	r10,r10,16
 102a854:	493ffc15 	stw	r4,-16(r9)
 102a858:	1bbfef1e 	bne	r3,r14,102a818 <_gp+0xfffecb94>
 102a85c:	79000044 	addi	r4,r15,1
 102a860:	2008913a 	slli	r4,r4,4
 102a864:	328003cc 	andi	r10,r6,15
 102a868:	02c000c4 	movi	r11,3
 102a86c:	1107883a 	add	r3,r2,r4
 102a870:	290b883a 	add	r5,r5,r4
 102a874:	5a801e2e 	bgeu	r11,r10,102a8f0 <memmove+0x154>
 102a878:	1813883a 	mov	r9,r3
 102a87c:	2811883a 	mov	r8,r5
 102a880:	500f883a 	mov	r7,r10
 102a884:	41000017 	ldw	r4,0(r8)
 102a888:	4a400104 	addi	r9,r9,4
 102a88c:	39ffff04 	addi	r7,r7,-4
 102a890:	493fff15 	stw	r4,-4(r9)
 102a894:	42000104 	addi	r8,r8,4
 102a898:	59fffa36 	bltu	r11,r7,102a884 <_gp+0xfffecc00>
 102a89c:	513fff04 	addi	r4,r10,-4
 102a8a0:	2008d0ba 	srli	r4,r4,2
 102a8a4:	318000cc 	andi	r6,r6,3
 102a8a8:	21000044 	addi	r4,r4,1
 102a8ac:	2109883a 	add	r4,r4,r4
 102a8b0:	2109883a 	add	r4,r4,r4
 102a8b4:	1907883a 	add	r3,r3,r4
 102a8b8:	290b883a 	add	r5,r5,r4
 102a8bc:	30000926 	beq	r6,zero,102a8e4 <memmove+0x148>
 102a8c0:	198d883a 	add	r6,r3,r6
 102a8c4:	29c00003 	ldbu	r7,0(r5)
 102a8c8:	18c00044 	addi	r3,r3,1
 102a8cc:	29400044 	addi	r5,r5,1
 102a8d0:	19ffffc5 	stb	r7,-1(r3)
 102a8d4:	19bffb1e 	bne	r3,r6,102a8c4 <_gp+0xfffecc40>
 102a8d8:	f800283a 	ret
 102a8dc:	1007883a 	mov	r3,r2
 102a8e0:	003ff606 	br	102a8bc <_gp+0xfffecc38>
 102a8e4:	f800283a 	ret
 102a8e8:	1007883a 	mov	r3,r2
 102a8ec:	003ff406 	br	102a8c0 <_gp+0xfffecc3c>
 102a8f0:	500d883a 	mov	r6,r10
 102a8f4:	003ff106 	br	102a8bc <_gp+0xfffecc38>

0102a8f8 <memset>:
 102a8f8:	20c000cc 	andi	r3,r4,3
 102a8fc:	2005883a 	mov	r2,r4
 102a900:	18004326 	beq	r3,zero,102aa10 <memset+0x118>
 102a904:	31ffffc4 	addi	r7,r6,-1
 102a908:	30004026 	beq	r6,zero,102aa0c <memset+0x114>
 102a90c:	2813883a 	mov	r9,r5
 102a910:	200d883a 	mov	r6,r4
 102a914:	2007883a 	mov	r3,r4
 102a918:	00000406 	br	102a92c <memset+0x34>
 102a91c:	3a3fffc4 	addi	r8,r7,-1
 102a920:	31800044 	addi	r6,r6,1
 102a924:	38003926 	beq	r7,zero,102aa0c <memset+0x114>
 102a928:	400f883a 	mov	r7,r8
 102a92c:	18c00044 	addi	r3,r3,1
 102a930:	32400005 	stb	r9,0(r6)
 102a934:	1a0000cc 	andi	r8,r3,3
 102a938:	403ff81e 	bne	r8,zero,102a91c <_gp+0xfffecc98>
 102a93c:	010000c4 	movi	r4,3
 102a940:	21c02d2e 	bgeu	r4,r7,102a9f8 <memset+0x100>
 102a944:	29803fcc 	andi	r6,r5,255
 102a948:	3008923a 	slli	r4,r6,8
 102a94c:	218cb03a 	or	r6,r4,r6
 102a950:	3008943a 	slli	r4,r6,16
 102a954:	218cb03a 	or	r6,r4,r6
 102a958:	010003c4 	movi	r4,15
 102a95c:	21c0182e 	bgeu	r4,r7,102a9c0 <memset+0xc8>
 102a960:	3b3ffc04 	addi	r12,r7,-16
 102a964:	6018d13a 	srli	r12,r12,4
 102a968:	1a000104 	addi	r8,r3,4
 102a96c:	1ac00204 	addi	r11,r3,8
 102a970:	6008913a 	slli	r4,r12,4
 102a974:	1a800304 	addi	r10,r3,12
 102a978:	1813883a 	mov	r9,r3
 102a97c:	21000504 	addi	r4,r4,20
 102a980:	1909883a 	add	r4,r3,r4
 102a984:	49800015 	stw	r6,0(r9)
 102a988:	41800015 	stw	r6,0(r8)
 102a98c:	59800015 	stw	r6,0(r11)
 102a990:	51800015 	stw	r6,0(r10)
 102a994:	42000404 	addi	r8,r8,16
 102a998:	4a400404 	addi	r9,r9,16
 102a99c:	5ac00404 	addi	r11,r11,16
 102a9a0:	52800404 	addi	r10,r10,16
 102a9a4:	413ff71e 	bne	r8,r4,102a984 <_gp+0xfffecd00>
 102a9a8:	63000044 	addi	r12,r12,1
 102a9ac:	6018913a 	slli	r12,r12,4
 102a9b0:	39c003cc 	andi	r7,r7,15
 102a9b4:	010000c4 	movi	r4,3
 102a9b8:	1b07883a 	add	r3,r3,r12
 102a9bc:	21c00e2e 	bgeu	r4,r7,102a9f8 <memset+0x100>
 102a9c0:	1813883a 	mov	r9,r3
 102a9c4:	3811883a 	mov	r8,r7
 102a9c8:	010000c4 	movi	r4,3
 102a9cc:	49800015 	stw	r6,0(r9)
 102a9d0:	423fff04 	addi	r8,r8,-4
 102a9d4:	4a400104 	addi	r9,r9,4
 102a9d8:	223ffc36 	bltu	r4,r8,102a9cc <_gp+0xfffecd48>
 102a9dc:	393fff04 	addi	r4,r7,-4
 102a9e0:	2008d0ba 	srli	r4,r4,2
 102a9e4:	39c000cc 	andi	r7,r7,3
 102a9e8:	21000044 	addi	r4,r4,1
 102a9ec:	2109883a 	add	r4,r4,r4
 102a9f0:	2109883a 	add	r4,r4,r4
 102a9f4:	1907883a 	add	r3,r3,r4
 102a9f8:	38000426 	beq	r7,zero,102aa0c <memset+0x114>
 102a9fc:	19cf883a 	add	r7,r3,r7
 102aa00:	19400005 	stb	r5,0(r3)
 102aa04:	18c00044 	addi	r3,r3,1
 102aa08:	19fffd1e 	bne	r3,r7,102aa00 <_gp+0xfffecd7c>
 102aa0c:	f800283a 	ret
 102aa10:	2007883a 	mov	r3,r4
 102aa14:	300f883a 	mov	r7,r6
 102aa18:	003fc806 	br	102a93c <_gp+0xfffeccb8>

0102aa1c <_Balloc>:
 102aa1c:	20801317 	ldw	r2,76(r4)
 102aa20:	defffc04 	addi	sp,sp,-16
 102aa24:	dc400115 	stw	r17,4(sp)
 102aa28:	dc000015 	stw	r16,0(sp)
 102aa2c:	dfc00315 	stw	ra,12(sp)
 102aa30:	dc800215 	stw	r18,8(sp)
 102aa34:	2023883a 	mov	r17,r4
 102aa38:	2821883a 	mov	r16,r5
 102aa3c:	10000f26 	beq	r2,zero,102aa7c <_Balloc+0x60>
 102aa40:	8407883a 	add	r3,r16,r16
 102aa44:	18c7883a 	add	r3,r3,r3
 102aa48:	10c7883a 	add	r3,r2,r3
 102aa4c:	18800017 	ldw	r2,0(r3)
 102aa50:	10001126 	beq	r2,zero,102aa98 <_Balloc+0x7c>
 102aa54:	11000017 	ldw	r4,0(r2)
 102aa58:	19000015 	stw	r4,0(r3)
 102aa5c:	10000415 	stw	zero,16(r2)
 102aa60:	10000315 	stw	zero,12(r2)
 102aa64:	dfc00317 	ldw	ra,12(sp)
 102aa68:	dc800217 	ldw	r18,8(sp)
 102aa6c:	dc400117 	ldw	r17,4(sp)
 102aa70:	dc000017 	ldw	r16,0(sp)
 102aa74:	dec00404 	addi	sp,sp,16
 102aa78:	f800283a 	ret
 102aa7c:	01400104 	movi	r5,4
 102aa80:	01800844 	movi	r6,33
 102aa84:	102e9640 	call	102e964 <_calloc_r>
 102aa88:	88801315 	stw	r2,76(r17)
 102aa8c:	103fec1e 	bne	r2,zero,102aa40 <_gp+0xfffecdbc>
 102aa90:	0005883a 	mov	r2,zero
 102aa94:	003ff306 	br	102aa64 <_gp+0xfffecde0>
 102aa98:	01400044 	movi	r5,1
 102aa9c:	2c24983a 	sll	r18,r5,r16
 102aaa0:	8809883a 	mov	r4,r17
 102aaa4:	91800144 	addi	r6,r18,5
 102aaa8:	318d883a 	add	r6,r6,r6
 102aaac:	318d883a 	add	r6,r6,r6
 102aab0:	102e9640 	call	102e964 <_calloc_r>
 102aab4:	103ff626 	beq	r2,zero,102aa90 <_gp+0xfffece0c>
 102aab8:	14000115 	stw	r16,4(r2)
 102aabc:	14800215 	stw	r18,8(r2)
 102aac0:	003fe606 	br	102aa5c <_gp+0xfffecdd8>

0102aac4 <_Bfree>:
 102aac4:	28000826 	beq	r5,zero,102aae8 <_Bfree+0x24>
 102aac8:	28c00117 	ldw	r3,4(r5)
 102aacc:	20801317 	ldw	r2,76(r4)
 102aad0:	18c7883a 	add	r3,r3,r3
 102aad4:	18c7883a 	add	r3,r3,r3
 102aad8:	10c5883a 	add	r2,r2,r3
 102aadc:	10c00017 	ldw	r3,0(r2)
 102aae0:	28c00015 	stw	r3,0(r5)
 102aae4:	11400015 	stw	r5,0(r2)
 102aae8:	f800283a 	ret

0102aaec <__multadd>:
 102aaec:	defffa04 	addi	sp,sp,-24
 102aaf0:	dc000115 	stw	r16,4(sp)
 102aaf4:	2c000417 	ldw	r16,16(r5)
 102aaf8:	dc800315 	stw	r18,12(sp)
 102aafc:	dc400215 	stw	r17,8(sp)
 102ab00:	dfc00515 	stw	ra,20(sp)
 102ab04:	dcc00415 	stw	r19,16(sp)
 102ab08:	2823883a 	mov	r17,r5
 102ab0c:	2025883a 	mov	r18,r4
 102ab10:	2a400504 	addi	r9,r5,20
 102ab14:	0015883a 	mov	r10,zero
 102ab18:	4a000017 	ldw	r8,0(r9)
 102ab1c:	4a400104 	addi	r9,r9,4
 102ab20:	52800044 	addi	r10,r10,1
 102ab24:	40ffffcc 	andi	r3,r8,65535
 102ab28:	1987383a 	mul	r3,r3,r6
 102ab2c:	4010d43a 	srli	r8,r8,16
 102ab30:	19cf883a 	add	r7,r3,r7
 102ab34:	4191383a 	mul	r8,r8,r6
 102ab38:	3816d43a 	srli	r11,r7,16
 102ab3c:	38ffffcc 	andi	r3,r7,65535
 102ab40:	5a0f883a 	add	r7,r11,r8
 102ab44:	3810943a 	slli	r8,r7,16
 102ab48:	380ed43a 	srli	r7,r7,16
 102ab4c:	40c7883a 	add	r3,r8,r3
 102ab50:	48ffff15 	stw	r3,-4(r9)
 102ab54:	543ff016 	blt	r10,r16,102ab18 <_gp+0xfffece94>
 102ab58:	38000926 	beq	r7,zero,102ab80 <__multadd+0x94>
 102ab5c:	88800217 	ldw	r2,8(r17)
 102ab60:	80800f0e 	bge	r16,r2,102aba0 <__multadd+0xb4>
 102ab64:	80800144 	addi	r2,r16,5
 102ab68:	1085883a 	add	r2,r2,r2
 102ab6c:	1085883a 	add	r2,r2,r2
 102ab70:	8885883a 	add	r2,r17,r2
 102ab74:	11c00015 	stw	r7,0(r2)
 102ab78:	84000044 	addi	r16,r16,1
 102ab7c:	8c000415 	stw	r16,16(r17)
 102ab80:	8805883a 	mov	r2,r17
 102ab84:	dfc00517 	ldw	ra,20(sp)
 102ab88:	dcc00417 	ldw	r19,16(sp)
 102ab8c:	dc800317 	ldw	r18,12(sp)
 102ab90:	dc400217 	ldw	r17,8(sp)
 102ab94:	dc000117 	ldw	r16,4(sp)
 102ab98:	dec00604 	addi	sp,sp,24
 102ab9c:	f800283a 	ret
 102aba0:	89400117 	ldw	r5,4(r17)
 102aba4:	9009883a 	mov	r4,r18
 102aba8:	d9c00015 	stw	r7,0(sp)
 102abac:	29400044 	addi	r5,r5,1
 102abb0:	102aa1c0 	call	102aa1c <_Balloc>
 102abb4:	89800417 	ldw	r6,16(r17)
 102abb8:	89400304 	addi	r5,r17,12
 102abbc:	11000304 	addi	r4,r2,12
 102abc0:	31800084 	addi	r6,r6,2
 102abc4:	318d883a 	add	r6,r6,r6
 102abc8:	318d883a 	add	r6,r6,r6
 102abcc:	1027883a 	mov	r19,r2
 102abd0:	102a6640 	call	102a664 <memcpy>
 102abd4:	89000117 	ldw	r4,4(r17)
 102abd8:	90c01317 	ldw	r3,76(r18)
 102abdc:	d9c00017 	ldw	r7,0(sp)
 102abe0:	2109883a 	add	r4,r4,r4
 102abe4:	2109883a 	add	r4,r4,r4
 102abe8:	1907883a 	add	r3,r3,r4
 102abec:	18800017 	ldw	r2,0(r3)
 102abf0:	88800015 	stw	r2,0(r17)
 102abf4:	1c400015 	stw	r17,0(r3)
 102abf8:	9823883a 	mov	r17,r19
 102abfc:	003fd906 	br	102ab64 <_gp+0xfffecee0>

0102ac00 <__s2b>:
 102ac00:	defff904 	addi	sp,sp,-28
 102ac04:	dc400115 	stw	r17,4(sp)
 102ac08:	dc000015 	stw	r16,0(sp)
 102ac0c:	2023883a 	mov	r17,r4
 102ac10:	2821883a 	mov	r16,r5
 102ac14:	39000204 	addi	r4,r7,8
 102ac18:	01400244 	movi	r5,9
 102ac1c:	dcc00315 	stw	r19,12(sp)
 102ac20:	dc800215 	stw	r18,8(sp)
 102ac24:	dfc00615 	stw	ra,24(sp)
 102ac28:	dd400515 	stw	r21,20(sp)
 102ac2c:	dd000415 	stw	r20,16(sp)
 102ac30:	3825883a 	mov	r18,r7
 102ac34:	3027883a 	mov	r19,r6
 102ac38:	10218400 	call	1021840 <__divsi3>
 102ac3c:	00c00044 	movi	r3,1
 102ac40:	000b883a 	mov	r5,zero
 102ac44:	1880030e 	bge	r3,r2,102ac54 <__s2b+0x54>
 102ac48:	18c7883a 	add	r3,r3,r3
 102ac4c:	29400044 	addi	r5,r5,1
 102ac50:	18bffd16 	blt	r3,r2,102ac48 <_gp+0xfffecfc4>
 102ac54:	8809883a 	mov	r4,r17
 102ac58:	102aa1c0 	call	102aa1c <_Balloc>
 102ac5c:	d8c00717 	ldw	r3,28(sp)
 102ac60:	10c00515 	stw	r3,20(r2)
 102ac64:	00c00044 	movi	r3,1
 102ac68:	10c00415 	stw	r3,16(r2)
 102ac6c:	00c00244 	movi	r3,9
 102ac70:	1cc0210e 	bge	r3,r19,102acf8 <__s2b+0xf8>
 102ac74:	80eb883a 	add	r21,r16,r3
 102ac78:	a829883a 	mov	r20,r21
 102ac7c:	84e1883a 	add	r16,r16,r19
 102ac80:	a1c00007 	ldb	r7,0(r20)
 102ac84:	8809883a 	mov	r4,r17
 102ac88:	a5000044 	addi	r20,r20,1
 102ac8c:	100b883a 	mov	r5,r2
 102ac90:	01800284 	movi	r6,10
 102ac94:	39fff404 	addi	r7,r7,-48
 102ac98:	102aaec0 	call	102aaec <__multadd>
 102ac9c:	a43ff81e 	bne	r20,r16,102ac80 <_gp+0xfffecffc>
 102aca0:	ace1883a 	add	r16,r21,r19
 102aca4:	843ffe04 	addi	r16,r16,-8
 102aca8:	9c800a0e 	bge	r19,r18,102acd4 <__s2b+0xd4>
 102acac:	94e5c83a 	sub	r18,r18,r19
 102acb0:	84a5883a 	add	r18,r16,r18
 102acb4:	81c00007 	ldb	r7,0(r16)
 102acb8:	8809883a 	mov	r4,r17
 102acbc:	84000044 	addi	r16,r16,1
 102acc0:	100b883a 	mov	r5,r2
 102acc4:	01800284 	movi	r6,10
 102acc8:	39fff404 	addi	r7,r7,-48
 102accc:	102aaec0 	call	102aaec <__multadd>
 102acd0:	84bff81e 	bne	r16,r18,102acb4 <_gp+0xfffed030>
 102acd4:	dfc00617 	ldw	ra,24(sp)
 102acd8:	dd400517 	ldw	r21,20(sp)
 102acdc:	dd000417 	ldw	r20,16(sp)
 102ace0:	dcc00317 	ldw	r19,12(sp)
 102ace4:	dc800217 	ldw	r18,8(sp)
 102ace8:	dc400117 	ldw	r17,4(sp)
 102acec:	dc000017 	ldw	r16,0(sp)
 102acf0:	dec00704 	addi	sp,sp,28
 102acf4:	f800283a 	ret
 102acf8:	84000284 	addi	r16,r16,10
 102acfc:	1827883a 	mov	r19,r3
 102ad00:	003fe906 	br	102aca8 <_gp+0xfffed024>

0102ad04 <__hi0bits>:
 102ad04:	20bfffec 	andhi	r2,r4,65535
 102ad08:	1000141e 	bne	r2,zero,102ad5c <__hi0bits+0x58>
 102ad0c:	2008943a 	slli	r4,r4,16
 102ad10:	00800404 	movi	r2,16
 102ad14:	20ffc02c 	andhi	r3,r4,65280
 102ad18:	1800021e 	bne	r3,zero,102ad24 <__hi0bits+0x20>
 102ad1c:	2008923a 	slli	r4,r4,8
 102ad20:	10800204 	addi	r2,r2,8
 102ad24:	20fc002c 	andhi	r3,r4,61440
 102ad28:	1800021e 	bne	r3,zero,102ad34 <__hi0bits+0x30>
 102ad2c:	2008913a 	slli	r4,r4,4
 102ad30:	10800104 	addi	r2,r2,4
 102ad34:	20f0002c 	andhi	r3,r4,49152
 102ad38:	1800031e 	bne	r3,zero,102ad48 <__hi0bits+0x44>
 102ad3c:	2109883a 	add	r4,r4,r4
 102ad40:	10800084 	addi	r2,r2,2
 102ad44:	2109883a 	add	r4,r4,r4
 102ad48:	20000316 	blt	r4,zero,102ad58 <__hi0bits+0x54>
 102ad4c:	2110002c 	andhi	r4,r4,16384
 102ad50:	2000041e 	bne	r4,zero,102ad64 <__hi0bits+0x60>
 102ad54:	00800804 	movi	r2,32
 102ad58:	f800283a 	ret
 102ad5c:	0005883a 	mov	r2,zero
 102ad60:	003fec06 	br	102ad14 <_gp+0xfffed090>
 102ad64:	10800044 	addi	r2,r2,1
 102ad68:	f800283a 	ret

0102ad6c <__lo0bits>:
 102ad6c:	20c00017 	ldw	r3,0(r4)
 102ad70:	188001cc 	andi	r2,r3,7
 102ad74:	10000826 	beq	r2,zero,102ad98 <__lo0bits+0x2c>
 102ad78:	1880004c 	andi	r2,r3,1
 102ad7c:	1000211e 	bne	r2,zero,102ae04 <__lo0bits+0x98>
 102ad80:	1880008c 	andi	r2,r3,2
 102ad84:	1000211e 	bne	r2,zero,102ae0c <__lo0bits+0xa0>
 102ad88:	1806d0ba 	srli	r3,r3,2
 102ad8c:	00800084 	movi	r2,2
 102ad90:	20c00015 	stw	r3,0(r4)
 102ad94:	f800283a 	ret
 102ad98:	18bfffcc 	andi	r2,r3,65535
 102ad9c:	10001326 	beq	r2,zero,102adec <__lo0bits+0x80>
 102ada0:	0005883a 	mov	r2,zero
 102ada4:	19403fcc 	andi	r5,r3,255
 102ada8:	2800021e 	bne	r5,zero,102adb4 <__lo0bits+0x48>
 102adac:	1806d23a 	srli	r3,r3,8
 102adb0:	10800204 	addi	r2,r2,8
 102adb4:	194003cc 	andi	r5,r3,15
 102adb8:	2800021e 	bne	r5,zero,102adc4 <__lo0bits+0x58>
 102adbc:	1806d13a 	srli	r3,r3,4
 102adc0:	10800104 	addi	r2,r2,4
 102adc4:	194000cc 	andi	r5,r3,3
 102adc8:	2800021e 	bne	r5,zero,102add4 <__lo0bits+0x68>
 102adcc:	1806d0ba 	srli	r3,r3,2
 102add0:	10800084 	addi	r2,r2,2
 102add4:	1940004c 	andi	r5,r3,1
 102add8:	2800081e 	bne	r5,zero,102adfc <__lo0bits+0x90>
 102addc:	1806d07a 	srli	r3,r3,1
 102ade0:	1800051e 	bne	r3,zero,102adf8 <__lo0bits+0x8c>
 102ade4:	00800804 	movi	r2,32
 102ade8:	f800283a 	ret
 102adec:	1806d43a 	srli	r3,r3,16
 102adf0:	00800404 	movi	r2,16
 102adf4:	003feb06 	br	102ada4 <_gp+0xfffed120>
 102adf8:	10800044 	addi	r2,r2,1
 102adfc:	20c00015 	stw	r3,0(r4)
 102ae00:	f800283a 	ret
 102ae04:	0005883a 	mov	r2,zero
 102ae08:	f800283a 	ret
 102ae0c:	1806d07a 	srli	r3,r3,1
 102ae10:	00800044 	movi	r2,1
 102ae14:	20c00015 	stw	r3,0(r4)
 102ae18:	f800283a 	ret

0102ae1c <__i2b>:
 102ae1c:	defffd04 	addi	sp,sp,-12
 102ae20:	dc000015 	stw	r16,0(sp)
 102ae24:	04000044 	movi	r16,1
 102ae28:	dc400115 	stw	r17,4(sp)
 102ae2c:	2823883a 	mov	r17,r5
 102ae30:	800b883a 	mov	r5,r16
 102ae34:	dfc00215 	stw	ra,8(sp)
 102ae38:	102aa1c0 	call	102aa1c <_Balloc>
 102ae3c:	14400515 	stw	r17,20(r2)
 102ae40:	14000415 	stw	r16,16(r2)
 102ae44:	dfc00217 	ldw	ra,8(sp)
 102ae48:	dc400117 	ldw	r17,4(sp)
 102ae4c:	dc000017 	ldw	r16,0(sp)
 102ae50:	dec00304 	addi	sp,sp,12
 102ae54:	f800283a 	ret

0102ae58 <__multiply>:
 102ae58:	defffa04 	addi	sp,sp,-24
 102ae5c:	dcc00315 	stw	r19,12(sp)
 102ae60:	dc800215 	stw	r18,8(sp)
 102ae64:	2cc00417 	ldw	r19,16(r5)
 102ae68:	34800417 	ldw	r18,16(r6)
 102ae6c:	dd000415 	stw	r20,16(sp)
 102ae70:	dc400115 	stw	r17,4(sp)
 102ae74:	dfc00515 	stw	ra,20(sp)
 102ae78:	dc000015 	stw	r16,0(sp)
 102ae7c:	2829883a 	mov	r20,r5
 102ae80:	3023883a 	mov	r17,r6
 102ae84:	9c807016 	blt	r19,r18,102b048 <__multiply+0x1f0>
 102ae88:	9005883a 	mov	r2,r18
 102ae8c:	9825883a 	mov	r18,r19
 102ae90:	1027883a 	mov	r19,r2
 102ae94:	a0800217 	ldw	r2,8(r20)
 102ae98:	94e1883a 	add	r16,r18,r19
 102ae9c:	a1400117 	ldw	r5,4(r20)
 102aea0:	1400010e 	bge	r2,r16,102aea8 <__multiply+0x50>
 102aea4:	29400044 	addi	r5,r5,1
 102aea8:	102aa1c0 	call	102aa1c <_Balloc>
 102aeac:	8417883a 	add	r11,r16,r16
 102aeb0:	13000504 	addi	r12,r2,20
 102aeb4:	5ad7883a 	add	r11,r11,r11
 102aeb8:	62d7883a 	add	r11,r12,r11
 102aebc:	6007883a 	mov	r3,r12
 102aec0:	62c0032e 	bgeu	r12,r11,102aed0 <__multiply+0x78>
 102aec4:	18000015 	stw	zero,0(r3)
 102aec8:	18c00104 	addi	r3,r3,4
 102aecc:	1afffd36 	bltu	r3,r11,102aec4 <_gp+0xfffed240>
 102aed0:	9ce7883a 	add	r19,r19,r19
 102aed4:	94a5883a 	add	r18,r18,r18
 102aed8:	89800504 	addi	r6,r17,20
 102aedc:	9ce7883a 	add	r19,r19,r19
 102aee0:	a3800504 	addi	r14,r20,20
 102aee4:	94a5883a 	add	r18,r18,r18
 102aee8:	34db883a 	add	r13,r6,r19
 102aeec:	7495883a 	add	r10,r14,r18
 102aef0:	3340422e 	bgeu	r6,r13,102affc <__multiply+0x1a4>
 102aef4:	34400017 	ldw	r17,0(r6)
 102aef8:	8cbfffcc 	andi	r18,r17,65535
 102aefc:	90001b26 	beq	r18,zero,102af6c <__multiply+0x114>
 102af00:	6013883a 	mov	r9,r12
 102af04:	7023883a 	mov	r17,r14
 102af08:	0011883a 	mov	r8,zero
 102af0c:	88c00017 	ldw	r3,0(r17)
 102af10:	4bc00017 	ldw	r15,0(r9)
 102af14:	8c400104 	addi	r17,r17,4
 102af18:	19ffffcc 	andi	r7,r3,65535
 102af1c:	3c8f383a 	mul	r7,r7,r18
 102af20:	1808d43a 	srli	r4,r3,16
 102af24:	797fffcc 	andi	r5,r15,65535
 102af28:	29cb883a 	add	r5,r5,r7
 102af2c:	2a0b883a 	add	r5,r5,r8
 102af30:	2489383a 	mul	r4,r4,r18
 102af34:	7806d43a 	srli	r3,r15,16
 102af38:	2810d43a 	srli	r8,r5,16
 102af3c:	297fffcc 	andi	r5,r5,65535
 102af40:	1907883a 	add	r3,r3,r4
 102af44:	1a07883a 	add	r3,r3,r8
 102af48:	1808943a 	slli	r4,r3,16
 102af4c:	480f883a 	mov	r7,r9
 102af50:	1810d43a 	srli	r8,r3,16
 102af54:	214ab03a 	or	r5,r4,r5
 102af58:	49400015 	stw	r5,0(r9)
 102af5c:	4a400104 	addi	r9,r9,4
 102af60:	8abfea36 	bltu	r17,r10,102af0c <_gp+0xfffed288>
 102af64:	3a000115 	stw	r8,4(r7)
 102af68:	34400017 	ldw	r17,0(r6)
 102af6c:	8822d43a 	srli	r17,r17,16
 102af70:	88001f26 	beq	r17,zero,102aff0 <__multiply+0x198>
 102af74:	60c00017 	ldw	r3,0(r12)
 102af78:	7013883a 	mov	r9,r14
 102af7c:	601f883a 	mov	r15,r12
 102af80:	1811883a 	mov	r8,r3
 102af84:	6027883a 	mov	r19,r12
 102af88:	000f883a 	mov	r7,zero
 102af8c:	00000106 	br	102af94 <__multiply+0x13c>
 102af90:	9027883a 	mov	r19,r18
 102af94:	4940000b 	ldhu	r5,0(r9)
 102af98:	4010d43a 	srli	r8,r8,16
 102af9c:	193fffcc 	andi	r4,r3,65535
 102afa0:	2c4b383a 	mul	r5,r5,r17
 102afa4:	7bc00104 	addi	r15,r15,4
 102afa8:	4a400104 	addi	r9,r9,4
 102afac:	2a0b883a 	add	r5,r5,r8
 102afb0:	29cb883a 	add	r5,r5,r7
 102afb4:	2806943a 	slli	r3,r5,16
 102afb8:	9c800104 	addi	r18,r19,4
 102afbc:	280ad43a 	srli	r5,r5,16
 102afc0:	1908b03a 	or	r4,r3,r4
 102afc4:	793fff15 	stw	r4,-4(r15)
 102afc8:	48ffff17 	ldw	r3,-4(r9)
 102afcc:	92000017 	ldw	r8,0(r18)
 102afd0:	1806d43a 	srli	r3,r3,16
 102afd4:	413fffcc 	andi	r4,r8,65535
 102afd8:	1c47383a 	mul	r3,r3,r17
 102afdc:	1907883a 	add	r3,r3,r4
 102afe0:	1947883a 	add	r3,r3,r5
 102afe4:	180ed43a 	srli	r7,r3,16
 102afe8:	4abfe936 	bltu	r9,r10,102af90 <_gp+0xfffed30c>
 102afec:	98c00115 	stw	r3,4(r19)
 102aff0:	31800104 	addi	r6,r6,4
 102aff4:	63000104 	addi	r12,r12,4
 102aff8:	337fbe36 	bltu	r6,r13,102aef4 <_gp+0xfffed270>
 102affc:	0400090e 	bge	zero,r16,102b024 <__multiply+0x1cc>
 102b000:	58ffff17 	ldw	r3,-4(r11)
 102b004:	5affff04 	addi	r11,r11,-4
 102b008:	18000326 	beq	r3,zero,102b018 <__multiply+0x1c0>
 102b00c:	00000506 	br	102b024 <__multiply+0x1cc>
 102b010:	58c00017 	ldw	r3,0(r11)
 102b014:	1800031e 	bne	r3,zero,102b024 <__multiply+0x1cc>
 102b018:	843fffc4 	addi	r16,r16,-1
 102b01c:	5affff04 	addi	r11,r11,-4
 102b020:	803ffb1e 	bne	r16,zero,102b010 <_gp+0xfffed38c>
 102b024:	14000415 	stw	r16,16(r2)
 102b028:	dfc00517 	ldw	ra,20(sp)
 102b02c:	dd000417 	ldw	r20,16(sp)
 102b030:	dcc00317 	ldw	r19,12(sp)
 102b034:	dc800217 	ldw	r18,8(sp)
 102b038:	dc400117 	ldw	r17,4(sp)
 102b03c:	dc000017 	ldw	r16,0(sp)
 102b040:	dec00604 	addi	sp,sp,24
 102b044:	f800283a 	ret
 102b048:	3029883a 	mov	r20,r6
 102b04c:	2823883a 	mov	r17,r5
 102b050:	003f9006 	br	102ae94 <_gp+0xfffed210>

0102b054 <__pow5mult>:
 102b054:	defffa04 	addi	sp,sp,-24
 102b058:	dcc00315 	stw	r19,12(sp)
 102b05c:	dc800215 	stw	r18,8(sp)
 102b060:	dc000015 	stw	r16,0(sp)
 102b064:	dfc00515 	stw	ra,20(sp)
 102b068:	dd000415 	stw	r20,16(sp)
 102b06c:	dc400115 	stw	r17,4(sp)
 102b070:	308000cc 	andi	r2,r6,3
 102b074:	3021883a 	mov	r16,r6
 102b078:	2027883a 	mov	r19,r4
 102b07c:	2825883a 	mov	r18,r5
 102b080:	10002e1e 	bne	r2,zero,102b13c <__pow5mult+0xe8>
 102b084:	8021d0ba 	srai	r16,r16,2
 102b088:	80001a26 	beq	r16,zero,102b0f4 <__pow5mult+0xa0>
 102b08c:	9c401217 	ldw	r17,72(r19)
 102b090:	8800061e 	bne	r17,zero,102b0ac <__pow5mult+0x58>
 102b094:	00003406 	br	102b168 <__pow5mult+0x114>
 102b098:	8021d07a 	srai	r16,r16,1
 102b09c:	80001526 	beq	r16,zero,102b0f4 <__pow5mult+0xa0>
 102b0a0:	88800017 	ldw	r2,0(r17)
 102b0a4:	10001c26 	beq	r2,zero,102b118 <__pow5mult+0xc4>
 102b0a8:	1023883a 	mov	r17,r2
 102b0ac:	80c0004c 	andi	r3,r16,1
 102b0b0:	183ff926 	beq	r3,zero,102b098 <_gp+0xfffed414>
 102b0b4:	900b883a 	mov	r5,r18
 102b0b8:	880d883a 	mov	r6,r17
 102b0bc:	9809883a 	mov	r4,r19
 102b0c0:	102ae580 	call	102ae58 <__multiply>
 102b0c4:	90001b26 	beq	r18,zero,102b134 <__pow5mult+0xe0>
 102b0c8:	91c00117 	ldw	r7,4(r18)
 102b0cc:	98c01317 	ldw	r3,76(r19)
 102b0d0:	8021d07a 	srai	r16,r16,1
 102b0d4:	39cf883a 	add	r7,r7,r7
 102b0d8:	39cf883a 	add	r7,r7,r7
 102b0dc:	19c7883a 	add	r3,r3,r7
 102b0e0:	19000017 	ldw	r4,0(r3)
 102b0e4:	91000015 	stw	r4,0(r18)
 102b0e8:	1c800015 	stw	r18,0(r3)
 102b0ec:	1025883a 	mov	r18,r2
 102b0f0:	803feb1e 	bne	r16,zero,102b0a0 <_gp+0xfffed41c>
 102b0f4:	9005883a 	mov	r2,r18
 102b0f8:	dfc00517 	ldw	ra,20(sp)
 102b0fc:	dd000417 	ldw	r20,16(sp)
 102b100:	dcc00317 	ldw	r19,12(sp)
 102b104:	dc800217 	ldw	r18,8(sp)
 102b108:	dc400117 	ldw	r17,4(sp)
 102b10c:	dc000017 	ldw	r16,0(sp)
 102b110:	dec00604 	addi	sp,sp,24
 102b114:	f800283a 	ret
 102b118:	9809883a 	mov	r4,r19
 102b11c:	880b883a 	mov	r5,r17
 102b120:	880d883a 	mov	r6,r17
 102b124:	102ae580 	call	102ae58 <__multiply>
 102b128:	88800015 	stw	r2,0(r17)
 102b12c:	10000015 	stw	zero,0(r2)
 102b130:	003fdd06 	br	102b0a8 <_gp+0xfffed424>
 102b134:	1025883a 	mov	r18,r2
 102b138:	003fd706 	br	102b098 <_gp+0xfffed414>
 102b13c:	10bfffc4 	addi	r2,r2,-1
 102b140:	1085883a 	add	r2,r2,r2
 102b144:	00c040f4 	movhi	r3,259
 102b148:	18d01204 	addi	r3,r3,16456
 102b14c:	1085883a 	add	r2,r2,r2
 102b150:	1885883a 	add	r2,r3,r2
 102b154:	11800017 	ldw	r6,0(r2)
 102b158:	000f883a 	mov	r7,zero
 102b15c:	102aaec0 	call	102aaec <__multadd>
 102b160:	1025883a 	mov	r18,r2
 102b164:	003fc706 	br	102b084 <_gp+0xfffed400>
 102b168:	05000044 	movi	r20,1
 102b16c:	9809883a 	mov	r4,r19
 102b170:	a00b883a 	mov	r5,r20
 102b174:	102aa1c0 	call	102aa1c <_Balloc>
 102b178:	1023883a 	mov	r17,r2
 102b17c:	00809c44 	movi	r2,625
 102b180:	88800515 	stw	r2,20(r17)
 102b184:	8d000415 	stw	r20,16(r17)
 102b188:	9c401215 	stw	r17,72(r19)
 102b18c:	88000015 	stw	zero,0(r17)
 102b190:	003fc606 	br	102b0ac <_gp+0xfffed428>

0102b194 <__lshift>:
 102b194:	defff904 	addi	sp,sp,-28
 102b198:	dd000415 	stw	r20,16(sp)
 102b19c:	dcc00315 	stw	r19,12(sp)
 102b1a0:	3029d17a 	srai	r20,r6,5
 102b1a4:	2cc00417 	ldw	r19,16(r5)
 102b1a8:	28800217 	ldw	r2,8(r5)
 102b1ac:	dd400515 	stw	r21,20(sp)
 102b1b0:	a4e7883a 	add	r19,r20,r19
 102b1b4:	dc800215 	stw	r18,8(sp)
 102b1b8:	dc400115 	stw	r17,4(sp)
 102b1bc:	dc000015 	stw	r16,0(sp)
 102b1c0:	dfc00615 	stw	ra,24(sp)
 102b1c4:	9c000044 	addi	r16,r19,1
 102b1c8:	2823883a 	mov	r17,r5
 102b1cc:	302b883a 	mov	r21,r6
 102b1d0:	2025883a 	mov	r18,r4
 102b1d4:	29400117 	ldw	r5,4(r5)
 102b1d8:	1400030e 	bge	r2,r16,102b1e8 <__lshift+0x54>
 102b1dc:	1085883a 	add	r2,r2,r2
 102b1e0:	29400044 	addi	r5,r5,1
 102b1e4:	143ffd16 	blt	r2,r16,102b1dc <_gp+0xfffed558>
 102b1e8:	9009883a 	mov	r4,r18
 102b1ec:	102aa1c0 	call	102aa1c <_Balloc>
 102b1f0:	11c00504 	addi	r7,r2,20
 102b1f4:	0500090e 	bge	zero,r20,102b21c <__lshift+0x88>
 102b1f8:	3811883a 	mov	r8,r7
 102b1fc:	0007883a 	mov	r3,zero
 102b200:	40000015 	stw	zero,0(r8)
 102b204:	18c00044 	addi	r3,r3,1
 102b208:	42000104 	addi	r8,r8,4
 102b20c:	1d3ffc1e 	bne	r3,r20,102b200 <_gp+0xfffed57c>
 102b210:	18c7883a 	add	r3,r3,r3
 102b214:	18c7883a 	add	r3,r3,r3
 102b218:	38cf883a 	add	r7,r7,r3
 102b21c:	89000417 	ldw	r4,16(r17)
 102b220:	88c00504 	addi	r3,r17,20
 102b224:	a98007cc 	andi	r6,r21,31
 102b228:	2109883a 	add	r4,r4,r4
 102b22c:	2109883a 	add	r4,r4,r4
 102b230:	1909883a 	add	r4,r3,r4
 102b234:	30002326 	beq	r6,zero,102b2c4 <__lshift+0x130>
 102b238:	01400804 	movi	r5,32
 102b23c:	298bc83a 	sub	r5,r5,r6
 102b240:	0013883a 	mov	r9,zero
 102b244:	1a000017 	ldw	r8,0(r3)
 102b248:	3815883a 	mov	r10,r7
 102b24c:	39c00104 	addi	r7,r7,4
 102b250:	4190983a 	sll	r8,r8,r6
 102b254:	18c00104 	addi	r3,r3,4
 102b258:	4a10b03a 	or	r8,r9,r8
 102b25c:	3a3fff15 	stw	r8,-4(r7)
 102b260:	1a3fff17 	ldw	r8,-4(r3)
 102b264:	4152d83a 	srl	r9,r8,r5
 102b268:	193ff636 	bltu	r3,r4,102b244 <_gp+0xfffed5c0>
 102b26c:	52400115 	stw	r9,4(r10)
 102b270:	48000126 	beq	r9,zero,102b278 <__lshift+0xe4>
 102b274:	9c000084 	addi	r16,r19,2
 102b278:	89000117 	ldw	r4,4(r17)
 102b27c:	90c01317 	ldw	r3,76(r18)
 102b280:	843fffc4 	addi	r16,r16,-1
 102b284:	2109883a 	add	r4,r4,r4
 102b288:	2109883a 	add	r4,r4,r4
 102b28c:	1907883a 	add	r3,r3,r4
 102b290:	19000017 	ldw	r4,0(r3)
 102b294:	14000415 	stw	r16,16(r2)
 102b298:	89000015 	stw	r4,0(r17)
 102b29c:	1c400015 	stw	r17,0(r3)
 102b2a0:	dfc00617 	ldw	ra,24(sp)
 102b2a4:	dd400517 	ldw	r21,20(sp)
 102b2a8:	dd000417 	ldw	r20,16(sp)
 102b2ac:	dcc00317 	ldw	r19,12(sp)
 102b2b0:	dc800217 	ldw	r18,8(sp)
 102b2b4:	dc400117 	ldw	r17,4(sp)
 102b2b8:	dc000017 	ldw	r16,0(sp)
 102b2bc:	dec00704 	addi	sp,sp,28
 102b2c0:	f800283a 	ret
 102b2c4:	19400017 	ldw	r5,0(r3)
 102b2c8:	39c00104 	addi	r7,r7,4
 102b2cc:	18c00104 	addi	r3,r3,4
 102b2d0:	397fff15 	stw	r5,-4(r7)
 102b2d4:	193ffb36 	bltu	r3,r4,102b2c4 <_gp+0xfffed640>
 102b2d8:	003fe706 	br	102b278 <_gp+0xfffed5f4>

0102b2dc <__mcmp>:
 102b2dc:	20800417 	ldw	r2,16(r4)
 102b2e0:	28c00417 	ldw	r3,16(r5)
 102b2e4:	10c5c83a 	sub	r2,r2,r3
 102b2e8:	1000111e 	bne	r2,zero,102b330 <__mcmp+0x54>
 102b2ec:	18c7883a 	add	r3,r3,r3
 102b2f0:	18c7883a 	add	r3,r3,r3
 102b2f4:	21000504 	addi	r4,r4,20
 102b2f8:	29400504 	addi	r5,r5,20
 102b2fc:	20c5883a 	add	r2,r4,r3
 102b300:	28cb883a 	add	r5,r5,r3
 102b304:	00000106 	br	102b30c <__mcmp+0x30>
 102b308:	20800a2e 	bgeu	r4,r2,102b334 <__mcmp+0x58>
 102b30c:	10bfff04 	addi	r2,r2,-4
 102b310:	297fff04 	addi	r5,r5,-4
 102b314:	11800017 	ldw	r6,0(r2)
 102b318:	28c00017 	ldw	r3,0(r5)
 102b31c:	30fffa26 	beq	r6,r3,102b308 <_gp+0xfffed684>
 102b320:	30c00236 	bltu	r6,r3,102b32c <__mcmp+0x50>
 102b324:	00800044 	movi	r2,1
 102b328:	f800283a 	ret
 102b32c:	00bfffc4 	movi	r2,-1
 102b330:	f800283a 	ret
 102b334:	0005883a 	mov	r2,zero
 102b338:	f800283a 	ret

0102b33c <__mdiff>:
 102b33c:	defffb04 	addi	sp,sp,-20
 102b340:	dc000015 	stw	r16,0(sp)
 102b344:	2821883a 	mov	r16,r5
 102b348:	dcc00315 	stw	r19,12(sp)
 102b34c:	300b883a 	mov	r5,r6
 102b350:	2027883a 	mov	r19,r4
 102b354:	8009883a 	mov	r4,r16
 102b358:	dc800215 	stw	r18,8(sp)
 102b35c:	dfc00415 	stw	ra,16(sp)
 102b360:	dc400115 	stw	r17,4(sp)
 102b364:	3025883a 	mov	r18,r6
 102b368:	102b2dc0 	call	102b2dc <__mcmp>
 102b36c:	10005226 	beq	r2,zero,102b4b8 <__mdiff+0x17c>
 102b370:	10004c16 	blt	r2,zero,102b4a4 <__mdiff+0x168>
 102b374:	0023883a 	mov	r17,zero
 102b378:	81400117 	ldw	r5,4(r16)
 102b37c:	9809883a 	mov	r4,r19
 102b380:	102aa1c0 	call	102aa1c <_Balloc>
 102b384:	83400417 	ldw	r13,16(r16)
 102b388:	93800417 	ldw	r14,16(r18)
 102b38c:	81000504 	addi	r4,r16,20
 102b390:	6b59883a 	add	r12,r13,r13
 102b394:	739d883a 	add	r14,r14,r14
 102b398:	6319883a 	add	r12,r12,r12
 102b39c:	91800504 	addi	r6,r18,20
 102b3a0:	739d883a 	add	r14,r14,r14
 102b3a4:	14400315 	stw	r17,12(r2)
 102b3a8:	2319883a 	add	r12,r4,r12
 102b3ac:	339d883a 	add	r14,r6,r14
 102b3b0:	12400504 	addi	r9,r2,20
 102b3b4:	0007883a 	mov	r3,zero
 102b3b8:	22000017 	ldw	r8,0(r4)
 102b3bc:	32800017 	ldw	r10,0(r6)
 102b3c0:	4ac00104 	addi	r11,r9,4
 102b3c4:	41ffffcc 	andi	r7,r8,65535
 102b3c8:	38c7883a 	add	r3,r7,r3
 102b3cc:	51ffffcc 	andi	r7,r10,65535
 102b3d0:	19cfc83a 	sub	r7,r3,r7
 102b3d4:	4010d43a 	srli	r8,r8,16
 102b3d8:	5014d43a 	srli	r10,r10,16
 102b3dc:	3807d43a 	srai	r3,r7,16
 102b3e0:	39ffffcc 	andi	r7,r7,65535
 102b3e4:	4291c83a 	sub	r8,r8,r10
 102b3e8:	40c7883a 	add	r3,r8,r3
 102b3ec:	1810943a 	slli	r8,r3,16
 102b3f0:	31800104 	addi	r6,r6,4
 102b3f4:	21000104 	addi	r4,r4,4
 102b3f8:	41ceb03a 	or	r7,r8,r7
 102b3fc:	49c00015 	stw	r7,0(r9)
 102b400:	1807d43a 	srai	r3,r3,16
 102b404:	580b883a 	mov	r5,r11
 102b408:	5813883a 	mov	r9,r11
 102b40c:	33bfea36 	bltu	r6,r14,102b3b8 <_gp+0xfffed734>
 102b410:	2011883a 	mov	r8,r4
 102b414:	2300152e 	bgeu	r4,r12,102b46c <__mdiff+0x130>
 102b418:	21400017 	ldw	r5,0(r4)
 102b41c:	4a400104 	addi	r9,r9,4
 102b420:	21000104 	addi	r4,r4,4
 102b424:	29ffffcc 	andi	r7,r5,65535
 102b428:	38c7883a 	add	r3,r7,r3
 102b42c:	280ad43a 	srli	r5,r5,16
 102b430:	180dd43a 	srai	r6,r3,16
 102b434:	19ffffcc 	andi	r7,r3,65535
 102b438:	3147883a 	add	r3,r6,r5
 102b43c:	180a943a 	slli	r5,r3,16
 102b440:	1807d43a 	srai	r3,r3,16
 102b444:	29ceb03a 	or	r7,r5,r7
 102b448:	49ffff15 	stw	r7,-4(r9)
 102b44c:	233ff236 	bltu	r4,r12,102b418 <_gp+0xfffed794>
 102b450:	0206303a 	nor	r3,zero,r8
 102b454:	1b07883a 	add	r3,r3,r12
 102b458:	1806d0ba 	srli	r3,r3,2
 102b45c:	18c00044 	addi	r3,r3,1
 102b460:	18c7883a 	add	r3,r3,r3
 102b464:	18c7883a 	add	r3,r3,r3
 102b468:	58cb883a 	add	r5,r11,r3
 102b46c:	28ffff04 	addi	r3,r5,-4
 102b470:	3800041e 	bne	r7,zero,102b484 <__mdiff+0x148>
 102b474:	18ffff04 	addi	r3,r3,-4
 102b478:	19000017 	ldw	r4,0(r3)
 102b47c:	6b7fffc4 	addi	r13,r13,-1
 102b480:	203ffc26 	beq	r4,zero,102b474 <_gp+0xfffed7f0>
 102b484:	13400415 	stw	r13,16(r2)
 102b488:	dfc00417 	ldw	ra,16(sp)
 102b48c:	dcc00317 	ldw	r19,12(sp)
 102b490:	dc800217 	ldw	r18,8(sp)
 102b494:	dc400117 	ldw	r17,4(sp)
 102b498:	dc000017 	ldw	r16,0(sp)
 102b49c:	dec00504 	addi	sp,sp,20
 102b4a0:	f800283a 	ret
 102b4a4:	8005883a 	mov	r2,r16
 102b4a8:	04400044 	movi	r17,1
 102b4ac:	9021883a 	mov	r16,r18
 102b4b0:	1025883a 	mov	r18,r2
 102b4b4:	003fb006 	br	102b378 <_gp+0xfffed6f4>
 102b4b8:	9809883a 	mov	r4,r19
 102b4bc:	000b883a 	mov	r5,zero
 102b4c0:	102aa1c0 	call	102aa1c <_Balloc>
 102b4c4:	00c00044 	movi	r3,1
 102b4c8:	10c00415 	stw	r3,16(r2)
 102b4cc:	10000515 	stw	zero,20(r2)
 102b4d0:	003fed06 	br	102b488 <_gp+0xfffed804>

0102b4d4 <__ulp>:
 102b4d4:	295ffc2c 	andhi	r5,r5,32752
 102b4d8:	00bf3034 	movhi	r2,64704
 102b4dc:	2887883a 	add	r3,r5,r2
 102b4e0:	00c0020e 	bge	zero,r3,102b4ec <__ulp+0x18>
 102b4e4:	0005883a 	mov	r2,zero
 102b4e8:	f800283a 	ret
 102b4ec:	00c7c83a 	sub	r3,zero,r3
 102b4f0:	180bd53a 	srai	r5,r3,20
 102b4f4:	008004c4 	movi	r2,19
 102b4f8:	11400a0e 	bge	r2,r5,102b524 <__ulp+0x50>
 102b4fc:	00800c84 	movi	r2,50
 102b500:	0007883a 	mov	r3,zero
 102b504:	11400516 	blt	r2,r5,102b51c <__ulp+0x48>
 102b508:	00800cc4 	movi	r2,51
 102b50c:	114bc83a 	sub	r5,r2,r5
 102b510:	00800044 	movi	r2,1
 102b514:	1144983a 	sll	r2,r2,r5
 102b518:	f800283a 	ret
 102b51c:	00800044 	movi	r2,1
 102b520:	f800283a 	ret
 102b524:	00800234 	movhi	r2,8
 102b528:	1147d83a 	sra	r3,r2,r5
 102b52c:	0005883a 	mov	r2,zero
 102b530:	f800283a 	ret

0102b534 <__b2d>:
 102b534:	defffa04 	addi	sp,sp,-24
 102b538:	dc000015 	stw	r16,0(sp)
 102b53c:	24000417 	ldw	r16,16(r4)
 102b540:	dc400115 	stw	r17,4(sp)
 102b544:	24400504 	addi	r17,r4,20
 102b548:	8421883a 	add	r16,r16,r16
 102b54c:	8421883a 	add	r16,r16,r16
 102b550:	8c21883a 	add	r16,r17,r16
 102b554:	dc800215 	stw	r18,8(sp)
 102b558:	84bfff17 	ldw	r18,-4(r16)
 102b55c:	dd000415 	stw	r20,16(sp)
 102b560:	dcc00315 	stw	r19,12(sp)
 102b564:	9009883a 	mov	r4,r18
 102b568:	2829883a 	mov	r20,r5
 102b56c:	dfc00515 	stw	ra,20(sp)
 102b570:	102ad040 	call	102ad04 <__hi0bits>
 102b574:	00c00804 	movi	r3,32
 102b578:	1887c83a 	sub	r3,r3,r2
 102b57c:	a0c00015 	stw	r3,0(r20)
 102b580:	00c00284 	movi	r3,10
 102b584:	84ffff04 	addi	r19,r16,-4
 102b588:	18801216 	blt	r3,r2,102b5d4 <__b2d+0xa0>
 102b58c:	014002c4 	movi	r5,11
 102b590:	2889c83a 	sub	r4,r5,r2
 102b594:	9106d83a 	srl	r3,r18,r4
 102b598:	18cffc34 	orhi	r3,r3,16368
 102b59c:	8cc0282e 	bgeu	r17,r19,102b640 <__b2d+0x10c>
 102b5a0:	817ffe17 	ldw	r5,-8(r16)
 102b5a4:	290ad83a 	srl	r5,r5,r4
 102b5a8:	10800544 	addi	r2,r2,21
 102b5ac:	9084983a 	sll	r2,r18,r2
 102b5b0:	2884b03a 	or	r2,r5,r2
 102b5b4:	dfc00517 	ldw	ra,20(sp)
 102b5b8:	dd000417 	ldw	r20,16(sp)
 102b5bc:	dcc00317 	ldw	r19,12(sp)
 102b5c0:	dc800217 	ldw	r18,8(sp)
 102b5c4:	dc400117 	ldw	r17,4(sp)
 102b5c8:	dc000017 	ldw	r16,0(sp)
 102b5cc:	dec00604 	addi	sp,sp,24
 102b5d0:	f800283a 	ret
 102b5d4:	113ffd44 	addi	r4,r2,-11
 102b5d8:	8cc00f2e 	bgeu	r17,r19,102b618 <__b2d+0xe4>
 102b5dc:	81bffe04 	addi	r6,r16,-8
 102b5e0:	817ffe17 	ldw	r5,-8(r16)
 102b5e4:	20001326 	beq	r4,zero,102b634 <__b2d+0x100>
 102b5e8:	00c00ac4 	movi	r3,43
 102b5ec:	1885c83a 	sub	r2,r3,r2
 102b5f0:	2886d83a 	srl	r3,r5,r2
 102b5f4:	9124983a 	sll	r18,r18,r4
 102b5f8:	90e4b03a 	or	r18,r18,r3
 102b5fc:	90cffc34 	orhi	r3,r18,16368
 102b600:	8980112e 	bgeu	r17,r6,102b648 <__b2d+0x114>
 102b604:	81bffd17 	ldw	r6,-12(r16)
 102b608:	308cd83a 	srl	r6,r6,r2
 102b60c:	2904983a 	sll	r2,r5,r4
 102b610:	1184b03a 	or	r2,r2,r6
 102b614:	003fe706 	br	102b5b4 <_gp+0xfffed930>
 102b618:	20000526 	beq	r4,zero,102b630 <__b2d+0xfc>
 102b61c:	9124983a 	sll	r18,r18,r4
 102b620:	000d883a 	mov	r6,zero
 102b624:	000b883a 	mov	r5,zero
 102b628:	90cffc34 	orhi	r3,r18,16368
 102b62c:	003ff706 	br	102b60c <_gp+0xfffed988>
 102b630:	000b883a 	mov	r5,zero
 102b634:	90cffc34 	orhi	r3,r18,16368
 102b638:	2805883a 	mov	r2,r5
 102b63c:	003fdd06 	br	102b5b4 <_gp+0xfffed930>
 102b640:	000b883a 	mov	r5,zero
 102b644:	003fd806 	br	102b5a8 <_gp+0xfffed924>
 102b648:	000d883a 	mov	r6,zero
 102b64c:	003fef06 	br	102b60c <_gp+0xfffed988>

0102b650 <__d2b>:
 102b650:	defff704 	addi	sp,sp,-36
 102b654:	dc000215 	stw	r16,8(sp)
 102b658:	3021883a 	mov	r16,r6
 102b65c:	dc400315 	stw	r17,12(sp)
 102b660:	8022907a 	slli	r17,r16,1
 102b664:	dd400715 	stw	r21,28(sp)
 102b668:	282b883a 	mov	r21,r5
 102b66c:	01400044 	movi	r5,1
 102b670:	dd000615 	stw	r20,24(sp)
 102b674:	dcc00515 	stw	r19,20(sp)
 102b678:	dc800415 	stw	r18,16(sp)
 102b67c:	dfc00815 	stw	ra,32(sp)
 102b680:	3829883a 	mov	r20,r7
 102b684:	dc800917 	ldw	r18,36(sp)
 102b688:	8822d57a 	srli	r17,r17,21
 102b68c:	102aa1c0 	call	102aa1c <_Balloc>
 102b690:	1027883a 	mov	r19,r2
 102b694:	00800434 	movhi	r2,16
 102b698:	10bfffc4 	addi	r2,r2,-1
 102b69c:	808c703a 	and	r6,r16,r2
 102b6a0:	88000126 	beq	r17,zero,102b6a8 <__d2b+0x58>
 102b6a4:	31800434 	orhi	r6,r6,16
 102b6a8:	d9800015 	stw	r6,0(sp)
 102b6ac:	a8001f26 	beq	r21,zero,102b72c <__d2b+0xdc>
 102b6b0:	d9000104 	addi	r4,sp,4
 102b6b4:	dd400115 	stw	r21,4(sp)
 102b6b8:	102ad6c0 	call	102ad6c <__lo0bits>
 102b6bc:	d8c00017 	ldw	r3,0(sp)
 102b6c0:	1000291e 	bne	r2,zero,102b768 <__d2b+0x118>
 102b6c4:	d9000117 	ldw	r4,4(sp)
 102b6c8:	99000515 	stw	r4,20(r19)
 102b6cc:	1820c03a 	cmpne	r16,r3,zero
 102b6d0:	84000044 	addi	r16,r16,1
 102b6d4:	98c00615 	stw	r3,24(r19)
 102b6d8:	9c000415 	stw	r16,16(r19)
 102b6dc:	88001b1e 	bne	r17,zero,102b74c <__d2b+0xfc>
 102b6e0:	800690ba 	slli	r3,r16,2
 102b6e4:	10bef384 	addi	r2,r2,-1074
 102b6e8:	a0800015 	stw	r2,0(r20)
 102b6ec:	98c5883a 	add	r2,r19,r3
 102b6f0:	11000417 	ldw	r4,16(r2)
 102b6f4:	8020917a 	slli	r16,r16,5
 102b6f8:	102ad040 	call	102ad04 <__hi0bits>
 102b6fc:	8085c83a 	sub	r2,r16,r2
 102b700:	90800015 	stw	r2,0(r18)
 102b704:	9805883a 	mov	r2,r19
 102b708:	dfc00817 	ldw	ra,32(sp)
 102b70c:	dd400717 	ldw	r21,28(sp)
 102b710:	dd000617 	ldw	r20,24(sp)
 102b714:	dcc00517 	ldw	r19,20(sp)
 102b718:	dc800417 	ldw	r18,16(sp)
 102b71c:	dc400317 	ldw	r17,12(sp)
 102b720:	dc000217 	ldw	r16,8(sp)
 102b724:	dec00904 	addi	sp,sp,36
 102b728:	f800283a 	ret
 102b72c:	d809883a 	mov	r4,sp
 102b730:	102ad6c0 	call	102ad6c <__lo0bits>
 102b734:	d8c00017 	ldw	r3,0(sp)
 102b738:	04000044 	movi	r16,1
 102b73c:	9c000415 	stw	r16,16(r19)
 102b740:	98c00515 	stw	r3,20(r19)
 102b744:	10800804 	addi	r2,r2,32
 102b748:	883fe526 	beq	r17,zero,102b6e0 <_gp+0xfffeda5c>
 102b74c:	8c7ef344 	addi	r17,r17,-1075
 102b750:	88a3883a 	add	r17,r17,r2
 102b754:	00c00d44 	movi	r3,53
 102b758:	a4400015 	stw	r17,0(r20)
 102b75c:	1885c83a 	sub	r2,r3,r2
 102b760:	90800015 	stw	r2,0(r18)
 102b764:	003fe706 	br	102b704 <_gp+0xfffeda80>
 102b768:	01000804 	movi	r4,32
 102b76c:	2089c83a 	sub	r4,r4,r2
 102b770:	1908983a 	sll	r4,r3,r4
 102b774:	d9400117 	ldw	r5,4(sp)
 102b778:	1886d83a 	srl	r3,r3,r2
 102b77c:	2148b03a 	or	r4,r4,r5
 102b780:	99000515 	stw	r4,20(r19)
 102b784:	d8c00015 	stw	r3,0(sp)
 102b788:	003fd006 	br	102b6cc <_gp+0xfffeda48>

0102b78c <__ratio>:
 102b78c:	defff904 	addi	sp,sp,-28
 102b790:	dc400315 	stw	r17,12(sp)
 102b794:	2823883a 	mov	r17,r5
 102b798:	d9400104 	addi	r5,sp,4
 102b79c:	dfc00615 	stw	ra,24(sp)
 102b7a0:	dcc00515 	stw	r19,20(sp)
 102b7a4:	dc800415 	stw	r18,16(sp)
 102b7a8:	2027883a 	mov	r19,r4
 102b7ac:	dc000215 	stw	r16,8(sp)
 102b7b0:	102b5340 	call	102b534 <__b2d>
 102b7b4:	8809883a 	mov	r4,r17
 102b7b8:	d80b883a 	mov	r5,sp
 102b7bc:	1025883a 	mov	r18,r2
 102b7c0:	1821883a 	mov	r16,r3
 102b7c4:	102b5340 	call	102b534 <__b2d>
 102b7c8:	8a400417 	ldw	r9,16(r17)
 102b7cc:	9a000417 	ldw	r8,16(r19)
 102b7d0:	100d883a 	mov	r6,r2
 102b7d4:	d8800017 	ldw	r2,0(sp)
 102b7d8:	4251c83a 	sub	r8,r8,r9
 102b7dc:	4012917a 	slli	r9,r8,5
 102b7e0:	da000117 	ldw	r8,4(sp)
 102b7e4:	4091c83a 	sub	r8,r8,r2
 102b7e8:	4251883a 	add	r8,r8,r9
 102b7ec:	02000d0e 	bge	zero,r8,102b824 <__ratio+0x98>
 102b7f0:	4010953a 	slli	r8,r8,20
 102b7f4:	4421883a 	add	r16,r8,r16
 102b7f8:	9009883a 	mov	r4,r18
 102b7fc:	800b883a 	mov	r5,r16
 102b800:	180f883a 	mov	r7,r3
 102b804:	10219000 	call	1021900 <__divdf3>
 102b808:	dfc00617 	ldw	ra,24(sp)
 102b80c:	dcc00517 	ldw	r19,20(sp)
 102b810:	dc800417 	ldw	r18,16(sp)
 102b814:	dc400317 	ldw	r17,12(sp)
 102b818:	dc000217 	ldw	r16,8(sp)
 102b81c:	dec00704 	addi	sp,sp,28
 102b820:	f800283a 	ret
 102b824:	4010953a 	slli	r8,r8,20
 102b828:	1a07c83a 	sub	r3,r3,r8
 102b82c:	003ff206 	br	102b7f8 <_gp+0xfffedb74>

0102b830 <_mprec_log10>:
 102b830:	defffe04 	addi	sp,sp,-8
 102b834:	dc000015 	stw	r16,0(sp)
 102b838:	dfc00115 	stw	ra,4(sp)
 102b83c:	008005c4 	movi	r2,23
 102b840:	2021883a 	mov	r16,r4
 102b844:	11000d0e 	bge	r2,r4,102b87c <_mprec_log10+0x4c>
 102b848:	0005883a 	mov	r2,zero
 102b84c:	00cffc34 	movhi	r3,16368
 102b850:	843fffc4 	addi	r16,r16,-1
 102b854:	1009883a 	mov	r4,r2
 102b858:	180b883a 	mov	r5,r3
 102b85c:	000d883a 	mov	r6,zero
 102b860:	01d00934 	movhi	r7,16420
 102b864:	10221cc0 	call	10221cc <__muldf3>
 102b868:	803ff91e 	bne	r16,zero,102b850 <_gp+0xfffedbcc>
 102b86c:	dfc00117 	ldw	ra,4(sp)
 102b870:	dc000017 	ldw	r16,0(sp)
 102b874:	dec00204 	addi	sp,sp,8
 102b878:	f800283a 	ret
 102b87c:	202090fa 	slli	r16,r4,3
 102b880:	008040f4 	movhi	r2,259
 102b884:	10902904 	addi	r2,r2,16548
 102b888:	1421883a 	add	r16,r2,r16
 102b88c:	80800017 	ldw	r2,0(r16)
 102b890:	80c00117 	ldw	r3,4(r16)
 102b894:	dfc00117 	ldw	ra,4(sp)
 102b898:	dc000017 	ldw	r16,0(sp)
 102b89c:	dec00204 	addi	sp,sp,8
 102b8a0:	f800283a 	ret

0102b8a4 <__copybits>:
 102b8a4:	297fffc4 	addi	r5,r5,-1
 102b8a8:	280fd17a 	srai	r7,r5,5
 102b8ac:	30c00417 	ldw	r3,16(r6)
 102b8b0:	30800504 	addi	r2,r6,20
 102b8b4:	39c00044 	addi	r7,r7,1
 102b8b8:	18c7883a 	add	r3,r3,r3
 102b8bc:	39cf883a 	add	r7,r7,r7
 102b8c0:	18c7883a 	add	r3,r3,r3
 102b8c4:	39cf883a 	add	r7,r7,r7
 102b8c8:	10c7883a 	add	r3,r2,r3
 102b8cc:	21cf883a 	add	r7,r4,r7
 102b8d0:	10c00d2e 	bgeu	r2,r3,102b908 <__copybits+0x64>
 102b8d4:	200b883a 	mov	r5,r4
 102b8d8:	12000017 	ldw	r8,0(r2)
 102b8dc:	29400104 	addi	r5,r5,4
 102b8e0:	10800104 	addi	r2,r2,4
 102b8e4:	2a3fff15 	stw	r8,-4(r5)
 102b8e8:	10fffb36 	bltu	r2,r3,102b8d8 <_gp+0xfffedc54>
 102b8ec:	1985c83a 	sub	r2,r3,r6
 102b8f0:	10bffac4 	addi	r2,r2,-21
 102b8f4:	1004d0ba 	srli	r2,r2,2
 102b8f8:	10800044 	addi	r2,r2,1
 102b8fc:	1085883a 	add	r2,r2,r2
 102b900:	1085883a 	add	r2,r2,r2
 102b904:	2089883a 	add	r4,r4,r2
 102b908:	21c0032e 	bgeu	r4,r7,102b918 <__copybits+0x74>
 102b90c:	20000015 	stw	zero,0(r4)
 102b910:	21000104 	addi	r4,r4,4
 102b914:	21fffd36 	bltu	r4,r7,102b90c <_gp+0xfffedc88>
 102b918:	f800283a 	ret

0102b91c <__any_on>:
 102b91c:	20c00417 	ldw	r3,16(r4)
 102b920:	2805d17a 	srai	r2,r5,5
 102b924:	21000504 	addi	r4,r4,20
 102b928:	18800d0e 	bge	r3,r2,102b960 <__any_on+0x44>
 102b92c:	18c7883a 	add	r3,r3,r3
 102b930:	18c7883a 	add	r3,r3,r3
 102b934:	20c7883a 	add	r3,r4,r3
 102b938:	20c0192e 	bgeu	r4,r3,102b9a0 <__any_on+0x84>
 102b93c:	18bfff17 	ldw	r2,-4(r3)
 102b940:	18ffff04 	addi	r3,r3,-4
 102b944:	1000041e 	bne	r2,zero,102b958 <__any_on+0x3c>
 102b948:	20c0142e 	bgeu	r4,r3,102b99c <__any_on+0x80>
 102b94c:	18ffff04 	addi	r3,r3,-4
 102b950:	19400017 	ldw	r5,0(r3)
 102b954:	283ffc26 	beq	r5,zero,102b948 <_gp+0xfffedcc4>
 102b958:	00800044 	movi	r2,1
 102b95c:	f800283a 	ret
 102b960:	10c00a0e 	bge	r2,r3,102b98c <__any_on+0x70>
 102b964:	1085883a 	add	r2,r2,r2
 102b968:	1085883a 	add	r2,r2,r2
 102b96c:	294007cc 	andi	r5,r5,31
 102b970:	2087883a 	add	r3,r4,r2
 102b974:	283ff026 	beq	r5,zero,102b938 <_gp+0xfffedcb4>
 102b978:	19800017 	ldw	r6,0(r3)
 102b97c:	3144d83a 	srl	r2,r6,r5
 102b980:	114a983a 	sll	r5,r2,r5
 102b984:	29bff41e 	bne	r5,r6,102b958 <_gp+0xfffedcd4>
 102b988:	003feb06 	br	102b938 <_gp+0xfffedcb4>
 102b98c:	1085883a 	add	r2,r2,r2
 102b990:	1085883a 	add	r2,r2,r2
 102b994:	2087883a 	add	r3,r4,r2
 102b998:	003fe706 	br	102b938 <_gp+0xfffedcb4>
 102b99c:	f800283a 	ret
 102b9a0:	0005883a 	mov	r2,zero
 102b9a4:	f800283a 	ret

0102b9a8 <_realloc_r>:
 102b9a8:	defff604 	addi	sp,sp,-40
 102b9ac:	dcc00315 	stw	r19,12(sp)
 102b9b0:	dc400115 	stw	r17,4(sp)
 102b9b4:	dfc00915 	stw	ra,36(sp)
 102b9b8:	df000815 	stw	fp,32(sp)
 102b9bc:	ddc00715 	stw	r23,28(sp)
 102b9c0:	dd800615 	stw	r22,24(sp)
 102b9c4:	dd400515 	stw	r21,20(sp)
 102b9c8:	dd000415 	stw	r20,16(sp)
 102b9cc:	dc800215 	stw	r18,8(sp)
 102b9d0:	dc000015 	stw	r16,0(sp)
 102b9d4:	2827883a 	mov	r19,r5
 102b9d8:	3023883a 	mov	r17,r6
 102b9dc:	2800bf26 	beq	r5,zero,102bcdc <_realloc_r+0x334>
 102b9e0:	2025883a 	mov	r18,r4
 102b9e4:	10317500 	call	1031750 <__malloc_lock>
 102b9e8:	98ffff17 	ldw	r3,-4(r19)
 102b9ec:	01bfff04 	movi	r6,-4
 102b9f0:	890002c4 	addi	r4,r17,11
 102b9f4:	01c00584 	movi	r7,22
 102b9f8:	9d7ffe04 	addi	r21,r19,-8
 102b9fc:	19a0703a 	and	r16,r3,r6
 102ba00:	39003f2e 	bgeu	r7,r4,102bb00 <_realloc_r+0x158>
 102ba04:	053ffe04 	movi	r20,-8
 102ba08:	2528703a 	and	r20,r4,r20
 102ba0c:	a00f883a 	mov	r7,r20
 102ba10:	a0008216 	blt	r20,zero,102bc1c <_realloc_r+0x274>
 102ba14:	a4408136 	bltu	r20,r17,102bc1c <_realloc_r+0x274>
 102ba18:	81c03c0e 	bge	r16,r7,102bb0c <_realloc_r+0x164>
 102ba1c:	070040f4 	movhi	fp,259
 102ba20:	e7119d04 	addi	fp,fp,18036
 102ba24:	e1000217 	ldw	r4,8(fp)
 102ba28:	ac05883a 	add	r2,r21,r16
 102ba2c:	2080bf26 	beq	r4,r2,102bd2c <_realloc_r+0x384>
 102ba30:	11000117 	ldw	r4,4(r2)
 102ba34:	023fff84 	movi	r8,-2
 102ba38:	2210703a 	and	r8,r4,r8
 102ba3c:	1211883a 	add	r8,r2,r8
 102ba40:	41400117 	ldw	r5,4(r8)
 102ba44:	2940004c 	andi	r5,r5,1
 102ba48:	28004a1e 	bne	r5,zero,102bb74 <_realloc_r+0x1cc>
 102ba4c:	017fff04 	movi	r5,-4
 102ba50:	2148703a 	and	r4,r4,r5
 102ba54:	2409883a 	add	r4,r4,r16
 102ba58:	21c0ad0e 	bge	r4,r7,102bd10 <_realloc_r+0x368>
 102ba5c:	18c0004c 	andi	r3,r3,1
 102ba60:	18007f1e 	bne	r3,zero,102bc60 <_realloc_r+0x2b8>
 102ba64:	9dfffe17 	ldw	r23,-8(r19)
 102ba68:	adefc83a 	sub	r23,r21,r23
 102ba6c:	bd800117 	ldw	r22,4(r23)
 102ba70:	b14a703a 	and	r5,r22,r5
 102ba74:	216d883a 	add	r22,r4,r5
 102ba78:	b1c04516 	blt	r22,r7,102bb90 <_realloc_r+0x1e8>
 102ba7c:	10c00317 	ldw	r3,12(r2)
 102ba80:	10800217 	ldw	r2,8(r2)
 102ba84:	81bfff04 	addi	r6,r16,-4
 102ba88:	bc400204 	addi	r17,r23,8
 102ba8c:	10c00315 	stw	r3,12(r2)
 102ba90:	18800215 	stw	r2,8(r3)
 102ba94:	b9400217 	ldw	r5,8(r23)
 102ba98:	b8c00317 	ldw	r3,12(r23)
 102ba9c:	00800904 	movi	r2,36
 102baa0:	28c00315 	stw	r3,12(r5)
 102baa4:	19400215 	stw	r5,8(r3)
 102baa8:	1180ef36 	bltu	r2,r6,102be68 <_realloc_r+0x4c0>
 102baac:	008004c4 	movi	r2,19
 102bab0:	1180da2e 	bgeu	r2,r6,102be1c <_realloc_r+0x474>
 102bab4:	98800017 	ldw	r2,0(r19)
 102bab8:	b8800215 	stw	r2,8(r23)
 102babc:	98800117 	ldw	r2,4(r19)
 102bac0:	b8800315 	stw	r2,12(r23)
 102bac4:	008006c4 	movi	r2,27
 102bac8:	1180fc2e 	bgeu	r2,r6,102bebc <_realloc_r+0x514>
 102bacc:	98800217 	ldw	r2,8(r19)
 102bad0:	b8800415 	stw	r2,16(r23)
 102bad4:	98800317 	ldw	r2,12(r19)
 102bad8:	b8800515 	stw	r2,20(r23)
 102badc:	00800904 	movi	r2,36
 102bae0:	3080421e 	bne	r6,r2,102bbec <_realloc_r+0x244>
 102bae4:	98800417 	ldw	r2,16(r19)
 102bae8:	9cc00604 	addi	r19,r19,24
 102baec:	b8c00804 	addi	r3,r23,32
 102baf0:	b8800615 	stw	r2,24(r23)
 102baf4:	98bfff17 	ldw	r2,-4(r19)
 102baf8:	b8800715 	stw	r2,28(r23)
 102bafc:	00003d06 	br	102bbf4 <_realloc_r+0x24c>
 102bb00:	01c00404 	movi	r7,16
 102bb04:	3829883a 	mov	r20,r7
 102bb08:	003fc206 	br	102ba14 <_gp+0xfffedd90>
 102bb0c:	9823883a 	mov	r17,r19
 102bb10:	850fc83a 	sub	r7,r16,r20
 102bb14:	008003c4 	movi	r2,15
 102bb18:	18c0004c 	andi	r3,r3,1
 102bb1c:	11c04336 	bltu	r2,r7,102bc2c <_realloc_r+0x284>
 102bb20:	1c06b03a 	or	r3,r3,r16
 102bb24:	a8c00115 	stw	r3,4(r21)
 102bb28:	ac21883a 	add	r16,r21,r16
 102bb2c:	80c00117 	ldw	r3,4(r16)
 102bb30:	18c00054 	ori	r3,r3,1
 102bb34:	80c00115 	stw	r3,4(r16)
 102bb38:	9009883a 	mov	r4,r18
 102bb3c:	10317700 	call	1031770 <__malloc_unlock>
 102bb40:	8805883a 	mov	r2,r17
 102bb44:	dfc00917 	ldw	ra,36(sp)
 102bb48:	df000817 	ldw	fp,32(sp)
 102bb4c:	ddc00717 	ldw	r23,28(sp)
 102bb50:	dd800617 	ldw	r22,24(sp)
 102bb54:	dd400517 	ldw	r21,20(sp)
 102bb58:	dd000417 	ldw	r20,16(sp)
 102bb5c:	dcc00317 	ldw	r19,12(sp)
 102bb60:	dc800217 	ldw	r18,8(sp)
 102bb64:	dc400117 	ldw	r17,4(sp)
 102bb68:	dc000017 	ldw	r16,0(sp)
 102bb6c:	dec00a04 	addi	sp,sp,40
 102bb70:	f800283a 	ret
 102bb74:	18c0004c 	andi	r3,r3,1
 102bb78:	1800391e 	bne	r3,zero,102bc60 <_realloc_r+0x2b8>
 102bb7c:	9dfffe17 	ldw	r23,-8(r19)
 102bb80:	00bfff04 	movi	r2,-4
 102bb84:	adefc83a 	sub	r23,r21,r23
 102bb88:	b9400117 	ldw	r5,4(r23)
 102bb8c:	288a703a 	and	r5,r5,r2
 102bb90:	2c2d883a 	add	r22,r5,r16
 102bb94:	b1c03216 	blt	r22,r7,102bc60 <_realloc_r+0x2b8>
 102bb98:	b8800317 	ldw	r2,12(r23)
 102bb9c:	b8c00217 	ldw	r3,8(r23)
 102bba0:	81bfff04 	addi	r6,r16,-4
 102bba4:	01000904 	movi	r4,36
 102bba8:	18800315 	stw	r2,12(r3)
 102bbac:	10c00215 	stw	r3,8(r2)
 102bbb0:	bc400204 	addi	r17,r23,8
 102bbb4:	2180ac36 	bltu	r4,r6,102be68 <_realloc_r+0x4c0>
 102bbb8:	008004c4 	movi	r2,19
 102bbbc:	1180972e 	bgeu	r2,r6,102be1c <_realloc_r+0x474>
 102bbc0:	98800017 	ldw	r2,0(r19)
 102bbc4:	b8800215 	stw	r2,8(r23)
 102bbc8:	98800117 	ldw	r2,4(r19)
 102bbcc:	b8800315 	stw	r2,12(r23)
 102bbd0:	008006c4 	movi	r2,27
 102bbd4:	1180b92e 	bgeu	r2,r6,102bebc <_realloc_r+0x514>
 102bbd8:	98800217 	ldw	r2,8(r19)
 102bbdc:	b8800415 	stw	r2,16(r23)
 102bbe0:	98800317 	ldw	r2,12(r19)
 102bbe4:	b8800515 	stw	r2,20(r23)
 102bbe8:	313fbe26 	beq	r6,r4,102bae4 <_gp+0xfffede60>
 102bbec:	b8c00604 	addi	r3,r23,24
 102bbf0:	9cc00404 	addi	r19,r19,16
 102bbf4:	98800017 	ldw	r2,0(r19)
 102bbf8:	b021883a 	mov	r16,r22
 102bbfc:	b82b883a 	mov	r21,r23
 102bc00:	18800015 	stw	r2,0(r3)
 102bc04:	98800117 	ldw	r2,4(r19)
 102bc08:	18800115 	stw	r2,4(r3)
 102bc0c:	98800217 	ldw	r2,8(r19)
 102bc10:	18800215 	stw	r2,8(r3)
 102bc14:	b8c00117 	ldw	r3,4(r23)
 102bc18:	003fbd06 	br	102bb10 <_gp+0xfffede8c>
 102bc1c:	00800304 	movi	r2,12
 102bc20:	90800015 	stw	r2,0(r18)
 102bc24:	0005883a 	mov	r2,zero
 102bc28:	003fc606 	br	102bb44 <_gp+0xfffedec0>
 102bc2c:	1d06b03a 	or	r3,r3,r20
 102bc30:	ad0b883a 	add	r5,r21,r20
 102bc34:	a8c00115 	stw	r3,4(r21)
 102bc38:	38800054 	ori	r2,r7,1
 102bc3c:	28800115 	stw	r2,4(r5)
 102bc40:	29cf883a 	add	r7,r5,r7
 102bc44:	38800117 	ldw	r2,4(r7)
 102bc48:	9009883a 	mov	r4,r18
 102bc4c:	29400204 	addi	r5,r5,8
 102bc50:	10800054 	ori	r2,r2,1
 102bc54:	38800115 	stw	r2,4(r7)
 102bc58:	10292380 	call	1029238 <_free_r>
 102bc5c:	003fb606 	br	102bb38 <_gp+0xfffedeb4>
 102bc60:	880b883a 	mov	r5,r17
 102bc64:	9009883a 	mov	r4,r18
 102bc68:	1029dd40 	call	1029dd4 <_malloc_r>
 102bc6c:	1023883a 	mov	r17,r2
 102bc70:	1000aa26 	beq	r2,zero,102bf1c <_realloc_r+0x574>
 102bc74:	98ffff17 	ldw	r3,-4(r19)
 102bc78:	113ffe04 	addi	r4,r2,-8
 102bc7c:	00bfff84 	movi	r2,-2
 102bc80:	1884703a 	and	r2,r3,r2
 102bc84:	a885883a 	add	r2,r21,r2
 102bc88:	20808626 	beq	r4,r2,102bea4 <_realloc_r+0x4fc>
 102bc8c:	81bfff04 	addi	r6,r16,-4
 102bc90:	00800904 	movi	r2,36
 102bc94:	11807036 	bltu	r2,r6,102be58 <_realloc_r+0x4b0>
 102bc98:	00c004c4 	movi	r3,19
 102bc9c:	19805636 	bltu	r3,r6,102bdf8 <_realloc_r+0x450>
 102bca0:	8805883a 	mov	r2,r17
 102bca4:	9807883a 	mov	r3,r19
 102bca8:	19000017 	ldw	r4,0(r3)
 102bcac:	11000015 	stw	r4,0(r2)
 102bcb0:	19000117 	ldw	r4,4(r3)
 102bcb4:	11000115 	stw	r4,4(r2)
 102bcb8:	18c00217 	ldw	r3,8(r3)
 102bcbc:	10c00215 	stw	r3,8(r2)
 102bcc0:	980b883a 	mov	r5,r19
 102bcc4:	9009883a 	mov	r4,r18
 102bcc8:	10292380 	call	1029238 <_free_r>
 102bccc:	9009883a 	mov	r4,r18
 102bcd0:	10317700 	call	1031770 <__malloc_unlock>
 102bcd4:	8805883a 	mov	r2,r17
 102bcd8:	003f9a06 	br	102bb44 <_gp+0xfffedec0>
 102bcdc:	300b883a 	mov	r5,r6
 102bce0:	dfc00917 	ldw	ra,36(sp)
 102bce4:	df000817 	ldw	fp,32(sp)
 102bce8:	ddc00717 	ldw	r23,28(sp)
 102bcec:	dd800617 	ldw	r22,24(sp)
 102bcf0:	dd400517 	ldw	r21,20(sp)
 102bcf4:	dd000417 	ldw	r20,16(sp)
 102bcf8:	dcc00317 	ldw	r19,12(sp)
 102bcfc:	dc800217 	ldw	r18,8(sp)
 102bd00:	dc400117 	ldw	r17,4(sp)
 102bd04:	dc000017 	ldw	r16,0(sp)
 102bd08:	dec00a04 	addi	sp,sp,40
 102bd0c:	1029dd41 	jmpi	1029dd4 <_malloc_r>
 102bd10:	11400317 	ldw	r5,12(r2)
 102bd14:	10800217 	ldw	r2,8(r2)
 102bd18:	9823883a 	mov	r17,r19
 102bd1c:	2021883a 	mov	r16,r4
 102bd20:	11400315 	stw	r5,12(r2)
 102bd24:	28800215 	stw	r2,8(r5)
 102bd28:	003f7906 	br	102bb10 <_gp+0xfffede8c>
 102bd2c:	21000117 	ldw	r4,4(r4)
 102bd30:	00bfff04 	movi	r2,-4
 102bd34:	a1800404 	addi	r6,r20,16
 102bd38:	2088703a 	and	r4,r4,r2
 102bd3c:	2409883a 	add	r4,r4,r16
 102bd40:	2180380e 	bge	r4,r6,102be24 <_realloc_r+0x47c>
 102bd44:	18c0004c 	andi	r3,r3,1
 102bd48:	183fc51e 	bne	r3,zero,102bc60 <_gp+0xfffedfdc>
 102bd4c:	9dfffe17 	ldw	r23,-8(r19)
 102bd50:	adefc83a 	sub	r23,r21,r23
 102bd54:	b9400117 	ldw	r5,4(r23)
 102bd58:	288a703a 	and	r5,r5,r2
 102bd5c:	216d883a 	add	r22,r4,r5
 102bd60:	b1bf8b16 	blt	r22,r6,102bb90 <_gp+0xfffedf0c>
 102bd64:	b8800317 	ldw	r2,12(r23)
 102bd68:	b8c00217 	ldw	r3,8(r23)
 102bd6c:	81bfff04 	addi	r6,r16,-4
 102bd70:	01000904 	movi	r4,36
 102bd74:	18800315 	stw	r2,12(r3)
 102bd78:	10c00215 	stw	r3,8(r2)
 102bd7c:	bc400204 	addi	r17,r23,8
 102bd80:	21805a36 	bltu	r4,r6,102beec <_realloc_r+0x544>
 102bd84:	008004c4 	movi	r2,19
 102bd88:	1180562e 	bgeu	r2,r6,102bee4 <_realloc_r+0x53c>
 102bd8c:	98800017 	ldw	r2,0(r19)
 102bd90:	b8800215 	stw	r2,8(r23)
 102bd94:	98800117 	ldw	r2,4(r19)
 102bd98:	b8800315 	stw	r2,12(r23)
 102bd9c:	008006c4 	movi	r2,27
 102bda0:	11805636 	bltu	r2,r6,102befc <_realloc_r+0x554>
 102bda4:	b8800404 	addi	r2,r23,16
 102bda8:	9cc00204 	addi	r19,r19,8
 102bdac:	98c00017 	ldw	r3,0(r19)
 102bdb0:	10c00015 	stw	r3,0(r2)
 102bdb4:	98c00117 	ldw	r3,4(r19)
 102bdb8:	10c00115 	stw	r3,4(r2)
 102bdbc:	98c00217 	ldw	r3,8(r19)
 102bdc0:	10c00215 	stw	r3,8(r2)
 102bdc4:	bd07883a 	add	r3,r23,r20
 102bdc8:	b505c83a 	sub	r2,r22,r20
 102bdcc:	e0c00215 	stw	r3,8(fp)
 102bdd0:	10800054 	ori	r2,r2,1
 102bdd4:	18800115 	stw	r2,4(r3)
 102bdd8:	b8800117 	ldw	r2,4(r23)
 102bddc:	9009883a 	mov	r4,r18
 102bde0:	1080004c 	andi	r2,r2,1
 102bde4:	a0a8b03a 	or	r20,r20,r2
 102bde8:	bd000115 	stw	r20,4(r23)
 102bdec:	10317700 	call	1031770 <__malloc_unlock>
 102bdf0:	8805883a 	mov	r2,r17
 102bdf4:	003f5306 	br	102bb44 <_gp+0xfffedec0>
 102bdf8:	98c00017 	ldw	r3,0(r19)
 102bdfc:	88c00015 	stw	r3,0(r17)
 102be00:	98c00117 	ldw	r3,4(r19)
 102be04:	88c00115 	stw	r3,4(r17)
 102be08:	00c006c4 	movi	r3,27
 102be0c:	19801d36 	bltu	r3,r6,102be84 <_realloc_r+0x4dc>
 102be10:	88800204 	addi	r2,r17,8
 102be14:	98c00204 	addi	r3,r19,8
 102be18:	003fa306 	br	102bca8 <_gp+0xfffee024>
 102be1c:	8807883a 	mov	r3,r17
 102be20:	003f7406 	br	102bbf4 <_gp+0xfffedf70>
 102be24:	ad2b883a 	add	r21,r21,r20
 102be28:	2505c83a 	sub	r2,r4,r20
 102be2c:	e5400215 	stw	r21,8(fp)
 102be30:	10800054 	ori	r2,r2,1
 102be34:	a8800115 	stw	r2,4(r21)
 102be38:	98bfff17 	ldw	r2,-4(r19)
 102be3c:	9009883a 	mov	r4,r18
 102be40:	1080004c 	andi	r2,r2,1
 102be44:	a0a8b03a 	or	r20,r20,r2
 102be48:	9d3fff15 	stw	r20,-4(r19)
 102be4c:	10317700 	call	1031770 <__malloc_unlock>
 102be50:	9805883a 	mov	r2,r19
 102be54:	003f3b06 	br	102bb44 <_gp+0xfffedec0>
 102be58:	8809883a 	mov	r4,r17
 102be5c:	980b883a 	mov	r5,r19
 102be60:	102a79c0 	call	102a79c <memmove>
 102be64:	003f9606 	br	102bcc0 <_gp+0xfffee03c>
 102be68:	8809883a 	mov	r4,r17
 102be6c:	980b883a 	mov	r5,r19
 102be70:	102a79c0 	call	102a79c <memmove>
 102be74:	b8c00117 	ldw	r3,4(r23)
 102be78:	b021883a 	mov	r16,r22
 102be7c:	b82b883a 	mov	r21,r23
 102be80:	003f2306 	br	102bb10 <_gp+0xfffede8c>
 102be84:	98c00217 	ldw	r3,8(r19)
 102be88:	88c00215 	stw	r3,8(r17)
 102be8c:	98c00317 	ldw	r3,12(r19)
 102be90:	88c00315 	stw	r3,12(r17)
 102be94:	30800c26 	beq	r6,r2,102bec8 <_realloc_r+0x520>
 102be98:	88800404 	addi	r2,r17,16
 102be9c:	98c00404 	addi	r3,r19,16
 102bea0:	003f8106 	br	102bca8 <_gp+0xfffee024>
 102bea4:	893fff17 	ldw	r4,-4(r17)
 102bea8:	00bfff04 	movi	r2,-4
 102beac:	9823883a 	mov	r17,r19
 102beb0:	2084703a 	and	r2,r4,r2
 102beb4:	80a1883a 	add	r16,r16,r2
 102beb8:	003f1506 	br	102bb10 <_gp+0xfffede8c>
 102bebc:	b8c00404 	addi	r3,r23,16
 102bec0:	9cc00204 	addi	r19,r19,8
 102bec4:	003f4b06 	br	102bbf4 <_gp+0xfffedf70>
 102bec8:	99000417 	ldw	r4,16(r19)
 102becc:	88800604 	addi	r2,r17,24
 102bed0:	98c00604 	addi	r3,r19,24
 102bed4:	89000415 	stw	r4,16(r17)
 102bed8:	99000517 	ldw	r4,20(r19)
 102bedc:	89000515 	stw	r4,20(r17)
 102bee0:	003f7106 	br	102bca8 <_gp+0xfffee024>
 102bee4:	8805883a 	mov	r2,r17
 102bee8:	003fb006 	br	102bdac <_gp+0xfffee128>
 102beec:	8809883a 	mov	r4,r17
 102bef0:	980b883a 	mov	r5,r19
 102bef4:	102a79c0 	call	102a79c <memmove>
 102bef8:	003fb206 	br	102bdc4 <_gp+0xfffee140>
 102befc:	98800217 	ldw	r2,8(r19)
 102bf00:	b8800415 	stw	r2,16(r23)
 102bf04:	98800317 	ldw	r2,12(r19)
 102bf08:	b8800515 	stw	r2,20(r23)
 102bf0c:	31000726 	beq	r6,r4,102bf2c <_realloc_r+0x584>
 102bf10:	b8800604 	addi	r2,r23,24
 102bf14:	9cc00404 	addi	r19,r19,16
 102bf18:	003fa406 	br	102bdac <_gp+0xfffee128>
 102bf1c:	9009883a 	mov	r4,r18
 102bf20:	10317700 	call	1031770 <__malloc_unlock>
 102bf24:	0005883a 	mov	r2,zero
 102bf28:	003f0606 	br	102bb44 <_gp+0xfffedec0>
 102bf2c:	98c00417 	ldw	r3,16(r19)
 102bf30:	9cc00604 	addi	r19,r19,24
 102bf34:	b8800804 	addi	r2,r23,32
 102bf38:	b8c00615 	stw	r3,24(r23)
 102bf3c:	98ffff17 	ldw	r3,-4(r19)
 102bf40:	b8c00715 	stw	r3,28(r23)
 102bf44:	003f9906 	br	102bdac <_gp+0xfffee128>

0102bf48 <__fpclassifyd>:
 102bf48:	00a00034 	movhi	r2,32768
 102bf4c:	10bfffc4 	addi	r2,r2,-1
 102bf50:	2884703a 	and	r2,r5,r2
 102bf54:	10000726 	beq	r2,zero,102bf74 <__fpclassifyd+0x2c>
 102bf58:	00fffc34 	movhi	r3,65520
 102bf5c:	019ff834 	movhi	r6,32736
 102bf60:	28c7883a 	add	r3,r5,r3
 102bf64:	31bfffc4 	addi	r6,r6,-1
 102bf68:	30c00536 	bltu	r6,r3,102bf80 <__fpclassifyd+0x38>
 102bf6c:	00800104 	movi	r2,4
 102bf70:	f800283a 	ret
 102bf74:	2000021e 	bne	r4,zero,102bf80 <__fpclassifyd+0x38>
 102bf78:	00800084 	movi	r2,2
 102bf7c:	f800283a 	ret
 102bf80:	00dffc34 	movhi	r3,32752
 102bf84:	019ff834 	movhi	r6,32736
 102bf88:	28cb883a 	add	r5,r5,r3
 102bf8c:	31bfffc4 	addi	r6,r6,-1
 102bf90:	317ff62e 	bgeu	r6,r5,102bf6c <_gp+0xfffee2e8>
 102bf94:	01400434 	movhi	r5,16
 102bf98:	297fffc4 	addi	r5,r5,-1
 102bf9c:	28800236 	bltu	r5,r2,102bfa8 <__fpclassifyd+0x60>
 102bfa0:	008000c4 	movi	r2,3
 102bfa4:	f800283a 	ret
 102bfa8:	10c00226 	beq	r2,r3,102bfb4 <__fpclassifyd+0x6c>
 102bfac:	0005883a 	mov	r2,zero
 102bfb0:	f800283a 	ret
 102bfb4:	2005003a 	cmpeq	r2,r4,zero
 102bfb8:	f800283a 	ret

0102bfbc <_sbrk_r>:
 102bfbc:	defffd04 	addi	sp,sp,-12
 102bfc0:	dc000015 	stw	r16,0(sp)
 102bfc4:	040040f4 	movhi	r16,259
 102bfc8:	dc400115 	stw	r17,4(sp)
 102bfcc:	841df204 	addi	r16,r16,30664
 102bfd0:	2023883a 	mov	r17,r4
 102bfd4:	2809883a 	mov	r4,r5
 102bfd8:	dfc00215 	stw	ra,8(sp)
 102bfdc:	80000015 	stw	zero,0(r16)
 102bfe0:	103193c0 	call	103193c <sbrk>
 102bfe4:	00ffffc4 	movi	r3,-1
 102bfe8:	10c00526 	beq	r2,r3,102c000 <_sbrk_r+0x44>
 102bfec:	dfc00217 	ldw	ra,8(sp)
 102bff0:	dc400117 	ldw	r17,4(sp)
 102bff4:	dc000017 	ldw	r16,0(sp)
 102bff8:	dec00304 	addi	sp,sp,12
 102bffc:	f800283a 	ret
 102c000:	80c00017 	ldw	r3,0(r16)
 102c004:	183ff926 	beq	r3,zero,102bfec <_gp+0xfffee368>
 102c008:	88c00015 	stw	r3,0(r17)
 102c00c:	003ff706 	br	102bfec <_gp+0xfffee368>

0102c010 <__sread>:
 102c010:	defffe04 	addi	sp,sp,-8
 102c014:	dc000015 	stw	r16,0(sp)
 102c018:	2821883a 	mov	r16,r5
 102c01c:	2940038f 	ldh	r5,14(r5)
 102c020:	dfc00115 	stw	ra,4(sp)
 102c024:	102ee200 	call	102ee20 <_read_r>
 102c028:	10000716 	blt	r2,zero,102c048 <__sread+0x38>
 102c02c:	80c01417 	ldw	r3,80(r16)
 102c030:	1887883a 	add	r3,r3,r2
 102c034:	80c01415 	stw	r3,80(r16)
 102c038:	dfc00117 	ldw	ra,4(sp)
 102c03c:	dc000017 	ldw	r16,0(sp)
 102c040:	dec00204 	addi	sp,sp,8
 102c044:	f800283a 	ret
 102c048:	80c0030b 	ldhu	r3,12(r16)
 102c04c:	18fbffcc 	andi	r3,r3,61439
 102c050:	80c0030d 	sth	r3,12(r16)
 102c054:	dfc00117 	ldw	ra,4(sp)
 102c058:	dc000017 	ldw	r16,0(sp)
 102c05c:	dec00204 	addi	sp,sp,8
 102c060:	f800283a 	ret

0102c064 <__seofread>:
 102c064:	0005883a 	mov	r2,zero
 102c068:	f800283a 	ret

0102c06c <__swrite>:
 102c06c:	2880030b 	ldhu	r2,12(r5)
 102c070:	defffb04 	addi	sp,sp,-20
 102c074:	dcc00315 	stw	r19,12(sp)
 102c078:	dc800215 	stw	r18,8(sp)
 102c07c:	dc400115 	stw	r17,4(sp)
 102c080:	dc000015 	stw	r16,0(sp)
 102c084:	dfc00415 	stw	ra,16(sp)
 102c088:	10c0400c 	andi	r3,r2,256
 102c08c:	2821883a 	mov	r16,r5
 102c090:	2027883a 	mov	r19,r4
 102c094:	3025883a 	mov	r18,r6
 102c098:	3823883a 	mov	r17,r7
 102c09c:	18000526 	beq	r3,zero,102c0b4 <__swrite+0x48>
 102c0a0:	2940038f 	ldh	r5,14(r5)
 102c0a4:	000d883a 	mov	r6,zero
 102c0a8:	01c00084 	movi	r7,2
 102c0ac:	102edc40 	call	102edc4 <_lseek_r>
 102c0b0:	8080030b 	ldhu	r2,12(r16)
 102c0b4:	8140038f 	ldh	r5,14(r16)
 102c0b8:	10bbffcc 	andi	r2,r2,61439
 102c0bc:	9809883a 	mov	r4,r19
 102c0c0:	900d883a 	mov	r6,r18
 102c0c4:	880f883a 	mov	r7,r17
 102c0c8:	8080030d 	sth	r2,12(r16)
 102c0cc:	dfc00417 	ldw	ra,16(sp)
 102c0d0:	dcc00317 	ldw	r19,12(sp)
 102c0d4:	dc800217 	ldw	r18,8(sp)
 102c0d8:	dc400117 	ldw	r17,4(sp)
 102c0dc:	dc000017 	ldw	r16,0(sp)
 102c0e0:	dec00504 	addi	sp,sp,20
 102c0e4:	102e8b41 	jmpi	102e8b4 <_write_r>

0102c0e8 <__sseek>:
 102c0e8:	defffe04 	addi	sp,sp,-8
 102c0ec:	dc000015 	stw	r16,0(sp)
 102c0f0:	2821883a 	mov	r16,r5
 102c0f4:	2940038f 	ldh	r5,14(r5)
 102c0f8:	dfc00115 	stw	ra,4(sp)
 102c0fc:	102edc40 	call	102edc4 <_lseek_r>
 102c100:	00ffffc4 	movi	r3,-1
 102c104:	10c00826 	beq	r2,r3,102c128 <__sseek+0x40>
 102c108:	80c0030b 	ldhu	r3,12(r16)
 102c10c:	80801415 	stw	r2,80(r16)
 102c110:	18c40014 	ori	r3,r3,4096
 102c114:	80c0030d 	sth	r3,12(r16)
 102c118:	dfc00117 	ldw	ra,4(sp)
 102c11c:	dc000017 	ldw	r16,0(sp)
 102c120:	dec00204 	addi	sp,sp,8
 102c124:	f800283a 	ret
 102c128:	80c0030b 	ldhu	r3,12(r16)
 102c12c:	18fbffcc 	andi	r3,r3,61439
 102c130:	80c0030d 	sth	r3,12(r16)
 102c134:	dfc00117 	ldw	ra,4(sp)
 102c138:	dc000017 	ldw	r16,0(sp)
 102c13c:	dec00204 	addi	sp,sp,8
 102c140:	f800283a 	ret

0102c144 <__sclose>:
 102c144:	2940038f 	ldh	r5,14(r5)
 102c148:	102e9101 	jmpi	102e910 <_close_r>

0102c14c <strcmp>:
 102c14c:	2144b03a 	or	r2,r4,r5
 102c150:	108000cc 	andi	r2,r2,3
 102c154:	1000171e 	bne	r2,zero,102c1b4 <strcmp+0x68>
 102c158:	20800017 	ldw	r2,0(r4)
 102c15c:	28c00017 	ldw	r3,0(r5)
 102c160:	10c0141e 	bne	r2,r3,102c1b4 <strcmp+0x68>
 102c164:	027fbff4 	movhi	r9,65279
 102c168:	4a7fbfc4 	addi	r9,r9,-257
 102c16c:	0086303a 	nor	r3,zero,r2
 102c170:	02202074 	movhi	r8,32897
 102c174:	1245883a 	add	r2,r2,r9
 102c178:	42202004 	addi	r8,r8,-32640
 102c17c:	10c4703a 	and	r2,r2,r3
 102c180:	1204703a 	and	r2,r2,r8
 102c184:	10000226 	beq	r2,zero,102c190 <strcmp+0x44>
 102c188:	00001706 	br	102c1e8 <strcmp+0x9c>
 102c18c:	1000161e 	bne	r2,zero,102c1e8 <strcmp+0x9c>
 102c190:	21000104 	addi	r4,r4,4
 102c194:	20c00017 	ldw	r3,0(r4)
 102c198:	29400104 	addi	r5,r5,4
 102c19c:	29800017 	ldw	r6,0(r5)
 102c1a0:	1a4f883a 	add	r7,r3,r9
 102c1a4:	00c4303a 	nor	r2,zero,r3
 102c1a8:	3884703a 	and	r2,r7,r2
 102c1ac:	1204703a 	and	r2,r2,r8
 102c1b0:	19bff626 	beq	r3,r6,102c18c <_gp+0xfffee508>
 102c1b4:	20800007 	ldb	r2,0(r4)
 102c1b8:	1000051e 	bne	r2,zero,102c1d0 <strcmp+0x84>
 102c1bc:	00000606 	br	102c1d8 <strcmp+0x8c>
 102c1c0:	21000044 	addi	r4,r4,1
 102c1c4:	20800007 	ldb	r2,0(r4)
 102c1c8:	29400044 	addi	r5,r5,1
 102c1cc:	10000226 	beq	r2,zero,102c1d8 <strcmp+0x8c>
 102c1d0:	28c00007 	ldb	r3,0(r5)
 102c1d4:	10fffa26 	beq	r2,r3,102c1c0 <_gp+0xfffee53c>
 102c1d8:	20800003 	ldbu	r2,0(r4)
 102c1dc:	28c00003 	ldbu	r3,0(r5)
 102c1e0:	10c5c83a 	sub	r2,r2,r3
 102c1e4:	f800283a 	ret
 102c1e8:	0005883a 	mov	r2,zero
 102c1ec:	f800283a 	ret

0102c1f0 <__ssprint_r>:
 102c1f0:	30800217 	ldw	r2,8(r6)
 102c1f4:	defff604 	addi	sp,sp,-40
 102c1f8:	ddc00715 	stw	r23,28(sp)
 102c1fc:	dcc00315 	stw	r19,12(sp)
 102c200:	dfc00915 	stw	ra,36(sp)
 102c204:	df000815 	stw	fp,32(sp)
 102c208:	dd800615 	stw	r22,24(sp)
 102c20c:	dd400515 	stw	r21,20(sp)
 102c210:	dd000415 	stw	r20,16(sp)
 102c214:	dc800215 	stw	r18,8(sp)
 102c218:	dc400115 	stw	r17,4(sp)
 102c21c:	dc000015 	stw	r16,0(sp)
 102c220:	3027883a 	mov	r19,r6
 102c224:	35c00017 	ldw	r23,0(r6)
 102c228:	10005526 	beq	r2,zero,102c380 <__ssprint_r+0x190>
 102c22c:	2029883a 	mov	r20,r4
 102c230:	29000017 	ldw	r4,0(r5)
 102c234:	2821883a 	mov	r16,r5
 102c238:	0039883a 	mov	fp,zero
 102c23c:	0023883a 	mov	r17,zero
 102c240:	88003926 	beq	r17,zero,102c328 <__ssprint_r+0x138>
 102c244:	84800217 	ldw	r18,8(r16)
 102c248:	902d883a 	mov	r22,r18
 102c24c:	8c803a36 	bltu	r17,r18,102c338 <__ssprint_r+0x148>
 102c250:	80c0030b 	ldhu	r3,12(r16)
 102c254:	1881200c 	andi	r2,r3,1152
 102c258:	10002626 	beq	r2,zero,102c2f4 <__ssprint_r+0x104>
 102c25c:	80800517 	ldw	r2,20(r16)
 102c260:	81400417 	ldw	r5,16(r16)
 102c264:	89c00044 	addi	r7,r17,1
 102c268:	108d883a 	add	r6,r2,r2
 102c26c:	3085883a 	add	r2,r6,r2
 102c270:	100cd7fa 	srli	r6,r2,31
 102c274:	216dc83a 	sub	r22,r4,r5
 102c278:	3d89883a 	add	r4,r7,r22
 102c27c:	3085883a 	add	r2,r6,r2
 102c280:	1025d07a 	srai	r18,r2,1
 102c284:	900d883a 	mov	r6,r18
 102c288:	9100022e 	bgeu	r18,r4,102c294 <__ssprint_r+0xa4>
 102c28c:	2025883a 	mov	r18,r4
 102c290:	200d883a 	mov	r6,r4
 102c294:	18c1000c 	andi	r3,r3,1024
 102c298:	a009883a 	mov	r4,r20
 102c29c:	18002926 	beq	r3,zero,102c344 <__ssprint_r+0x154>
 102c2a0:	300b883a 	mov	r5,r6
 102c2a4:	1029dd40 	call	1029dd4 <_malloc_r>
 102c2a8:	102b883a 	mov	r21,r2
 102c2ac:	10002b26 	beq	r2,zero,102c35c <__ssprint_r+0x16c>
 102c2b0:	81400417 	ldw	r5,16(r16)
 102c2b4:	1009883a 	mov	r4,r2
 102c2b8:	b00d883a 	mov	r6,r22
 102c2bc:	102a6640 	call	102a664 <memcpy>
 102c2c0:	8080030b 	ldhu	r2,12(r16)
 102c2c4:	00fedfc4 	movi	r3,-1153
 102c2c8:	10c4703a 	and	r2,r2,r3
 102c2cc:	10802014 	ori	r2,r2,128
 102c2d0:	8080030d 	sth	r2,12(r16)
 102c2d4:	ad89883a 	add	r4,r21,r22
 102c2d8:	95adc83a 	sub	r22,r18,r22
 102c2dc:	84800515 	stw	r18,20(r16)
 102c2e0:	85800215 	stw	r22,8(r16)
 102c2e4:	85400415 	stw	r21,16(r16)
 102c2e8:	81000015 	stw	r4,0(r16)
 102c2ec:	8825883a 	mov	r18,r17
 102c2f0:	882d883a 	mov	r22,r17
 102c2f4:	e00b883a 	mov	r5,fp
 102c2f8:	b00d883a 	mov	r6,r22
 102c2fc:	102a79c0 	call	102a79c <memmove>
 102c300:	80c00217 	ldw	r3,8(r16)
 102c304:	81000017 	ldw	r4,0(r16)
 102c308:	98800217 	ldw	r2,8(r19)
 102c30c:	1ca5c83a 	sub	r18,r3,r18
 102c310:	2589883a 	add	r4,r4,r22
 102c314:	84800215 	stw	r18,8(r16)
 102c318:	81000015 	stw	r4,0(r16)
 102c31c:	1463c83a 	sub	r17,r2,r17
 102c320:	9c400215 	stw	r17,8(r19)
 102c324:	88001626 	beq	r17,zero,102c380 <__ssprint_r+0x190>
 102c328:	bf000017 	ldw	fp,0(r23)
 102c32c:	bc400117 	ldw	r17,4(r23)
 102c330:	bdc00204 	addi	r23,r23,8
 102c334:	003fc206 	br	102c240 <_gp+0xfffee5bc>
 102c338:	8825883a 	mov	r18,r17
 102c33c:	882d883a 	mov	r22,r17
 102c340:	003fec06 	br	102c2f4 <_gp+0xfffee670>
 102c344:	102b9a80 	call	102b9a8 <_realloc_r>
 102c348:	102b883a 	mov	r21,r2
 102c34c:	103fe11e 	bne	r2,zero,102c2d4 <_gp+0xfffee650>
 102c350:	81400417 	ldw	r5,16(r16)
 102c354:	a009883a 	mov	r4,r20
 102c358:	10292380 	call	1029238 <_free_r>
 102c35c:	80c0030b 	ldhu	r3,12(r16)
 102c360:	00800304 	movi	r2,12
 102c364:	a0800015 	stw	r2,0(r20)
 102c368:	18c01014 	ori	r3,r3,64
 102c36c:	80c0030d 	sth	r3,12(r16)
 102c370:	00bfffc4 	movi	r2,-1
 102c374:	98000215 	stw	zero,8(r19)
 102c378:	98000115 	stw	zero,4(r19)
 102c37c:	00000206 	br	102c388 <__ssprint_r+0x198>
 102c380:	98000115 	stw	zero,4(r19)
 102c384:	0005883a 	mov	r2,zero
 102c388:	dfc00917 	ldw	ra,36(sp)
 102c38c:	df000817 	ldw	fp,32(sp)
 102c390:	ddc00717 	ldw	r23,28(sp)
 102c394:	dd800617 	ldw	r22,24(sp)
 102c398:	dd400517 	ldw	r21,20(sp)
 102c39c:	dd000417 	ldw	r20,16(sp)
 102c3a0:	dcc00317 	ldw	r19,12(sp)
 102c3a4:	dc800217 	ldw	r18,8(sp)
 102c3a8:	dc400117 	ldw	r17,4(sp)
 102c3ac:	dc000017 	ldw	r16,0(sp)
 102c3b0:	dec00a04 	addi	sp,sp,40
 102c3b4:	f800283a 	ret

0102c3b8 <___svfiprintf_internal_r>:
 102c3b8:	2880030b 	ldhu	r2,12(r5)
 102c3bc:	deffc904 	addi	sp,sp,-220
 102c3c0:	dd403215 	stw	r21,200(sp)
 102c3c4:	dfc03615 	stw	ra,216(sp)
 102c3c8:	df003515 	stw	fp,212(sp)
 102c3cc:	ddc03415 	stw	r23,208(sp)
 102c3d0:	dd803315 	stw	r22,204(sp)
 102c3d4:	dd003115 	stw	r20,196(sp)
 102c3d8:	dcc03015 	stw	r19,192(sp)
 102c3dc:	dc802f15 	stw	r18,188(sp)
 102c3e0:	dc402e15 	stw	r17,184(sp)
 102c3e4:	dc002d15 	stw	r16,180(sp)
 102c3e8:	d9402715 	stw	r5,156(sp)
 102c3ec:	d9002915 	stw	r4,164(sp)
 102c3f0:	1080200c 	andi	r2,r2,128
 102c3f4:	d9c02315 	stw	r7,140(sp)
 102c3f8:	302b883a 	mov	r21,r6
 102c3fc:	10000226 	beq	r2,zero,102c408 <___svfiprintf_internal_r+0x50>
 102c400:	28800417 	ldw	r2,16(r5)
 102c404:	1003ce26 	beq	r2,zero,102d340 <___svfiprintf_internal_r+0xf88>
 102c408:	dac01a04 	addi	r11,sp,104
 102c40c:	da8019c4 	addi	r10,sp,103
 102c410:	dc802917 	ldw	r18,164(sp)
 102c414:	dd002717 	ldw	r20,156(sp)
 102c418:	04c040f4 	movhi	r19,259
 102c41c:	dac01e15 	stw	r11,120(sp)
 102c420:	5a97c83a 	sub	r11,r11,r10
 102c424:	9cd05b04 	addi	r19,r19,16748
 102c428:	da801f15 	stw	r10,124(sp)
 102c42c:	dec01a15 	stw	sp,104(sp)
 102c430:	d8001c15 	stw	zero,112(sp)
 102c434:	d8001b15 	stw	zero,108(sp)
 102c438:	d8002a15 	stw	zero,168(sp)
 102c43c:	d8002415 	stw	zero,144(sp)
 102c440:	d811883a 	mov	r8,sp
 102c444:	dac02b15 	stw	r11,172(sp)
 102c448:	a8800007 	ldb	r2,0(r21)
 102c44c:	10026826 	beq	r2,zero,102cdf0 <___svfiprintf_internal_r+0xa38>
 102c450:	01000944 	movi	r4,37
 102c454:	11026626 	beq	r2,r4,102cdf0 <___svfiprintf_internal_r+0xa38>
 102c458:	a805883a 	mov	r2,r21
 102c45c:	00000106 	br	102c464 <___svfiprintf_internal_r+0xac>
 102c460:	19000326 	beq	r3,r4,102c470 <___svfiprintf_internal_r+0xb8>
 102c464:	10800044 	addi	r2,r2,1
 102c468:	10c00007 	ldb	r3,0(r2)
 102c46c:	183ffc1e 	bne	r3,zero,102c460 <_gp+0xfffee7dc>
 102c470:	1561c83a 	sub	r16,r2,r21
 102c474:	102d883a 	mov	r22,r2
 102c478:	80000e26 	beq	r16,zero,102c4b4 <___svfiprintf_internal_r+0xfc>
 102c47c:	d8c01c17 	ldw	r3,112(sp)
 102c480:	d8801b17 	ldw	r2,108(sp)
 102c484:	45400015 	stw	r21,0(r8)
 102c488:	1c07883a 	add	r3,r3,r16
 102c48c:	10800044 	addi	r2,r2,1
 102c490:	d8c01c15 	stw	r3,112(sp)
 102c494:	44000115 	stw	r16,4(r8)
 102c498:	d8801b15 	stw	r2,108(sp)
 102c49c:	00c001c4 	movi	r3,7
 102c4a0:	1882d616 	blt	r3,r2,102cffc <___svfiprintf_internal_r+0xc44>
 102c4a4:	42000204 	addi	r8,r8,8
 102c4a8:	da802417 	ldw	r10,144(sp)
 102c4ac:	5415883a 	add	r10,r10,r16
 102c4b0:	da802415 	stw	r10,144(sp)
 102c4b4:	b0800007 	ldb	r2,0(r22)
 102c4b8:	10027326 	beq	r2,zero,102ce88 <___svfiprintf_internal_r+0xad0>
 102c4bc:	b1000047 	ldb	r4,1(r22)
 102c4c0:	b5400044 	addi	r21,r22,1
 102c4c4:	d8001d85 	stb	zero,118(sp)
 102c4c8:	000d883a 	mov	r6,zero
 102c4cc:	043fffc4 	movi	r16,-1
 102c4d0:	d8002115 	stw	zero,132(sp)
 102c4d4:	0023883a 	mov	r17,zero
 102c4d8:	00c01604 	movi	r3,88
 102c4dc:	01400244 	movi	r5,9
 102c4e0:	02400a84 	movi	r9,42
 102c4e4:	01c01b04 	movi	r7,108
 102c4e8:	ad400044 	addi	r21,r21,1
 102c4ec:	20bff804 	addi	r2,r4,-32
 102c4f0:	18819536 	bltu	r3,r2,102cb48 <___svfiprintf_internal_r+0x790>
 102c4f4:	100490ba 	slli	r2,r2,2
 102c4f8:	02c040f4 	movhi	r11,259
 102c4fc:	5af14304 	addi	r11,r11,-15092
 102c500:	12c5883a 	add	r2,r2,r11
 102c504:	10800017 	ldw	r2,0(r2)
 102c508:	1000683a 	jmp	r2
 102c50c:	0102ca48 	cmpgei	r4,zero,2857
 102c510:	0102cb48 	cmpgei	r4,zero,2861
 102c514:	0102cb48 	cmpgei	r4,zero,2861
 102c518:	0102ca3c 	xorhi	r4,zero,2856
 102c51c:	0102cb48 	cmpgei	r4,zero,2861
 102c520:	0102cb48 	cmpgei	r4,zero,2861
 102c524:	0102cb48 	cmpgei	r4,zero,2861
 102c528:	0102cb48 	cmpgei	r4,zero,2861
 102c52c:	0102cb48 	cmpgei	r4,zero,2861
 102c530:	0102cb48 	cmpgei	r4,zero,2861
 102c534:	0102c76c 	andhi	r4,zero,2845
 102c538:	0102cb7c 	xorhi	r4,zero,2861
 102c53c:	0102cb48 	cmpgei	r4,zero,2861
 102c540:	0102c794 	movui	r4,2846
 102c544:	0102cb88 	cmpgei	r4,zero,2862
 102c548:	0102cb48 	cmpgei	r4,zero,2861
 102c54c:	0102cb70 	cmpltui	r4,zero,2861
 102c550:	0102cb10 	cmplti	r4,zero,2860
 102c554:	0102cb10 	cmplti	r4,zero,2860
 102c558:	0102cb10 	cmplti	r4,zero,2860
 102c55c:	0102cb10 	cmplti	r4,zero,2860
 102c560:	0102cb10 	cmplti	r4,zero,2860
 102c564:	0102cb10 	cmplti	r4,zero,2860
 102c568:	0102cb10 	cmplti	r4,zero,2860
 102c56c:	0102cb10 	cmplti	r4,zero,2860
 102c570:	0102cb10 	cmplti	r4,zero,2860
 102c574:	0102cb48 	cmpgei	r4,zero,2861
 102c578:	0102cb48 	cmpgei	r4,zero,2861
 102c57c:	0102cb48 	cmpgei	r4,zero,2861
 102c580:	0102cb48 	cmpgei	r4,zero,2861
 102c584:	0102cb48 	cmpgei	r4,zero,2861
 102c588:	0102cb48 	cmpgei	r4,zero,2861
 102c58c:	0102cb48 	cmpgei	r4,zero,2861
 102c590:	0102cb48 	cmpgei	r4,zero,2861
 102c594:	0102cb48 	cmpgei	r4,zero,2861
 102c598:	0102cb48 	cmpgei	r4,zero,2861
 102c59c:	0102caa8 	cmpgeui	r4,zero,2858
 102c5a0:	0102cb48 	cmpgei	r4,zero,2861
 102c5a4:	0102cb48 	cmpgei	r4,zero,2861
 102c5a8:	0102cb48 	cmpgei	r4,zero,2861
 102c5ac:	0102cb48 	cmpgei	r4,zero,2861
 102c5b0:	0102cb48 	cmpgei	r4,zero,2861
 102c5b4:	0102cb48 	cmpgei	r4,zero,2861
 102c5b8:	0102cb48 	cmpgei	r4,zero,2861
 102c5bc:	0102cb48 	cmpgei	r4,zero,2861
 102c5c0:	0102cb48 	cmpgei	r4,zero,2861
 102c5c4:	0102cb48 	cmpgei	r4,zero,2861
 102c5c8:	0102c73c 	xorhi	r4,zero,2844
 102c5cc:	0102cb48 	cmpgei	r4,zero,2861
 102c5d0:	0102cb48 	cmpgei	r4,zero,2861
 102c5d4:	0102cb48 	cmpgei	r4,zero,2861
 102c5d8:	0102cb48 	cmpgei	r4,zero,2861
 102c5dc:	0102cb48 	cmpgei	r4,zero,2861
 102c5e0:	0102c670 	cmpltui	r4,zero,2841
 102c5e4:	0102cb48 	cmpgei	r4,zero,2861
 102c5e8:	0102cb48 	cmpgei	r4,zero,2861
 102c5ec:	0102c99c 	xori	r4,zero,2854
 102c5f0:	0102cb48 	cmpgei	r4,zero,2861
 102c5f4:	0102cb48 	cmpgei	r4,zero,2861
 102c5f8:	0102cb48 	cmpgei	r4,zero,2861
 102c5fc:	0102cb48 	cmpgei	r4,zero,2861
 102c600:	0102cb48 	cmpgei	r4,zero,2861
 102c604:	0102cb48 	cmpgei	r4,zero,2861
 102c608:	0102cb48 	cmpgei	r4,zero,2861
 102c60c:	0102cb48 	cmpgei	r4,zero,2861
 102c610:	0102cb48 	cmpgei	r4,zero,2861
 102c614:	0102cb48 	cmpgei	r4,zero,2861
 102c618:	0102c888 	cmpgei	r4,zero,2850
 102c61c:	0102c848 	cmpgei	r4,zero,2849
 102c620:	0102cb48 	cmpgei	r4,zero,2861
 102c624:	0102cb48 	cmpgei	r4,zero,2861
 102c628:	0102cb48 	cmpgei	r4,zero,2861
 102c62c:	0102c9f8 	rdprs	r4,zero,2855
 102c630:	0102c848 	cmpgei	r4,zero,2849
 102c634:	0102cb48 	cmpgei	r4,zero,2861
 102c638:	0102cb48 	cmpgei	r4,zero,2861
 102c63c:	0102c9e4 	muli	r4,zero,2855
 102c640:	0102cb48 	cmpgei	r4,zero,2861
 102c644:	0102ca04 	movi	r4,2856
 102c648:	0102c740 	call	102c74 <__reset-0xf1d38c>
 102c64c:	0102c808 	cmpgei	r4,zero,2848
 102c650:	0102c7fc 	xorhi	r4,zero,2847
 102c654:	0102cb48 	cmpgei	r4,zero,2861
 102c658:	0102c7a0 	cmpeqi	r4,zero,2846
 102c65c:	0102cb48 	cmpgei	r4,zero,2861
 102c660:	0102c674 	movhi	r4,2841
 102c664:	0102cb48 	cmpgei	r4,zero,2861
 102c668:	0102cb48 	cmpgei	r4,zero,2861
 102c66c:	0102ca64 	muli	r4,zero,2857
 102c670:	8c400414 	ori	r17,r17,16
 102c674:	88c0080c 	andi	r3,r17,32
 102c678:	d8802317 	ldw	r2,140(sp)
 102c67c:	18029626 	beq	r3,zero,102d0d8 <___svfiprintf_internal_r+0xd20>
 102c680:	dac02317 	ldw	r11,140(sp)
 102c684:	12400017 	ldw	r9,0(r2)
 102c688:	12800117 	ldw	r10,4(r2)
 102c68c:	5ac00204 	addi	r11,r11,8
 102c690:	dac02315 	stw	r11,140(sp)
 102c694:	00800044 	movi	r2,1
 102c698:	4a86b03a 	or	r3,r9,r10
 102c69c:	d8001d85 	stb	zero,118(sp)
 102c6a0:	8039883a 	mov	fp,r16
 102c6a4:	0017883a 	mov	r11,zero
 102c6a8:	80000216 	blt	r16,zero,102c6b4 <___svfiprintf_internal_r+0x2fc>
 102c6ac:	013fdfc4 	movi	r4,-129
 102c6b0:	8922703a 	and	r17,r17,r4
 102c6b4:	1801d01e 	bne	r3,zero,102cdf8 <___svfiprintf_internal_r+0xa40>
 102c6b8:	80024426 	beq	r16,zero,102cfcc <___svfiprintf_internal_r+0xc14>
 102c6bc:	10803fcc 	andi	r2,r2,255
 102c6c0:	00c00044 	movi	r3,1
 102c6c4:	10c2b326 	beq	r2,r3,102d194 <___svfiprintf_internal_r+0xddc>
 102c6c8:	00c00084 	movi	r3,2
 102c6cc:	10c25b26 	beq	r2,r3,102d03c <___svfiprintf_internal_r+0xc84>
 102c6d0:	d8c01a04 	addi	r3,sp,104
 102c6d4:	4808d0fa 	srli	r4,r9,3
 102c6d8:	500a977a 	slli	r5,r10,29
 102c6dc:	5014d0fa 	srli	r10,r10,3
 102c6e0:	4a4001cc 	andi	r9,r9,7
 102c6e4:	48800c04 	addi	r2,r9,48
 102c6e8:	18ffffc4 	addi	r3,r3,-1
 102c6ec:	2912b03a 	or	r9,r5,r4
 102c6f0:	18800005 	stb	r2,0(r3)
 102c6f4:	4a88b03a 	or	r4,r9,r10
 102c6f8:	203ff61e 	bne	r4,zero,102c6d4 <_gp+0xfffeea50>
 102c6fc:	8900004c 	andi	r4,r17,1
 102c700:	d8c02615 	stw	r3,152(sp)
 102c704:	2002951e 	bne	r4,zero,102d15c <___svfiprintf_internal_r+0xda4>
 102c708:	da801e17 	ldw	r10,120(sp)
 102c70c:	50f9c83a 	sub	fp,r10,r3
 102c710:	df002015 	stw	fp,128(sp)
 102c714:	e400010e 	bge	fp,r16,102c71c <___svfiprintf_internal_r+0x364>
 102c718:	dc002015 	stw	r16,128(sp)
 102c71c:	5ac03fcc 	andi	r11,r11,255
 102c720:	5ac0201c 	xori	r11,r11,128
 102c724:	5affe004 	addi	r11,r11,-128
 102c728:	58006326 	beq	r11,zero,102c8b8 <___svfiprintf_internal_r+0x500>
 102c72c:	d8c02017 	ldw	r3,128(sp)
 102c730:	18c00044 	addi	r3,r3,1
 102c734:	d8c02015 	stw	r3,128(sp)
 102c738:	00005f06 	br	102c8b8 <___svfiprintf_internal_r+0x500>
 102c73c:	8c400414 	ori	r17,r17,16
 102c740:	88c0080c 	andi	r3,r17,32
 102c744:	d8802317 	ldw	r2,140(sp)
 102c748:	18027826 	beq	r3,zero,102d12c <___svfiprintf_internal_r+0xd74>
 102c74c:	dac02317 	ldw	r11,140(sp)
 102c750:	12400017 	ldw	r9,0(r2)
 102c754:	12800117 	ldw	r10,4(r2)
 102c758:	5ac00204 	addi	r11,r11,8
 102c75c:	dac02315 	stw	r11,140(sp)
 102c760:	0005883a 	mov	r2,zero
 102c764:	4a86b03a 	or	r3,r9,r10
 102c768:	003fcc06 	br	102c69c <_gp+0xfffeea18>
 102c76c:	da802317 	ldw	r10,140(sp)
 102c770:	dac02317 	ldw	r11,140(sp)
 102c774:	52800017 	ldw	r10,0(r10)
 102c778:	58800104 	addi	r2,r11,4
 102c77c:	da802115 	stw	r10,132(sp)
 102c780:	50028a0e 	bge	r10,zero,102d1ac <___svfiprintf_internal_r+0xdf4>
 102c784:	da802117 	ldw	r10,132(sp)
 102c788:	d8802315 	stw	r2,140(sp)
 102c78c:	0295c83a 	sub	r10,zero,r10
 102c790:	da802115 	stw	r10,132(sp)
 102c794:	8c400114 	ori	r17,r17,4
 102c798:	a9000007 	ldb	r4,0(r21)
 102c79c:	003f5206 	br	102c4e8 <_gp+0xfffee864>
 102c7a0:	da802317 	ldw	r10,140(sp)
 102c7a4:	dac02317 	ldw	r11,140(sp)
 102c7a8:	d8001d85 	stb	zero,118(sp)
 102c7ac:	52800017 	ldw	r10,0(r10)
 102c7b0:	5dc00104 	addi	r23,r11,4
 102c7b4:	da802615 	stw	r10,152(sp)
 102c7b8:	5002eb26 	beq	r10,zero,102d368 <___svfiprintf_internal_r+0xfb0>
 102c7bc:	d9002617 	ldw	r4,152(sp)
 102c7c0:	8002d716 	blt	r16,zero,102d320 <___svfiprintf_internal_r+0xf68>
 102c7c4:	000b883a 	mov	r5,zero
 102c7c8:	800d883a 	mov	r6,r16
 102c7cc:	da002c15 	stw	r8,176(sp)
 102c7d0:	102a57c0 	call	102a57c <memchr>
 102c7d4:	da002c17 	ldw	r8,176(sp)
 102c7d8:	1002fb26 	beq	r2,zero,102d3c8 <___svfiprintf_internal_r+0x1010>
 102c7dc:	d8c02617 	ldw	r3,152(sp)
 102c7e0:	10f9c83a 	sub	fp,r2,r3
 102c7e4:	8700010e 	bge	r16,fp,102c7ec <___svfiprintf_internal_r+0x434>
 102c7e8:	8039883a 	mov	fp,r16
 102c7ec:	dac01d83 	ldbu	r11,118(sp)
 102c7f0:	ddc02315 	stw	r23,140(sp)
 102c7f4:	0021883a 	mov	r16,zero
 102c7f8:	003fc506 	br	102c710 <_gp+0xfffeea8c>
 102c7fc:	8c400814 	ori	r17,r17,32
 102c800:	a9000007 	ldb	r4,0(r21)
 102c804:	003f3806 	br	102c4e8 <_gp+0xfffee864>
 102c808:	dac02317 	ldw	r11,140(sp)
 102c80c:	00800c04 	movi	r2,48
 102c810:	d8801d05 	stb	r2,116(sp)
 102c814:	5a400017 	ldw	r9,0(r11)
 102c818:	00801e04 	movi	r2,120
 102c81c:	d8801d45 	stb	r2,117(sp)
 102c820:	008040f4 	movhi	r2,259
 102c824:	108ff204 	addi	r2,r2,16328
 102c828:	5ac00104 	addi	r11,r11,4
 102c82c:	d8802a15 	stw	r2,168(sp)
 102c830:	0015883a 	mov	r10,zero
 102c834:	8c400094 	ori	r17,r17,2
 102c838:	dac02315 	stw	r11,140(sp)
 102c83c:	00800084 	movi	r2,2
 102c840:	4807883a 	mov	r3,r9
 102c844:	003f9506 	br	102c69c <_gp+0xfffeea18>
 102c848:	d9801d85 	stb	r6,118(sp)
 102c84c:	8880080c 	andi	r2,r17,32
 102c850:	d8c02317 	ldw	r3,140(sp)
 102c854:	10009926 	beq	r2,zero,102cabc <___svfiprintf_internal_r+0x704>
 102c858:	dac02317 	ldw	r11,140(sp)
 102c85c:	18800117 	ldw	r2,4(r3)
 102c860:	1a400017 	ldw	r9,0(r3)
 102c864:	5ac00204 	addi	r11,r11,8
 102c868:	dac02315 	stw	r11,140(sp)
 102c86c:	1015883a 	mov	r10,r2
 102c870:	10009d16 	blt	r2,zero,102cae8 <___svfiprintf_internal_r+0x730>
 102c874:	dac01d83 	ldbu	r11,118(sp)
 102c878:	8039883a 	mov	fp,r16
 102c87c:	00800044 	movi	r2,1
 102c880:	4a86b03a 	or	r3,r9,r10
 102c884:	003f8806 	br	102c6a8 <_gp+0xfffeea24>
 102c888:	dac02317 	ldw	r11,140(sp)
 102c88c:	00c00044 	movi	r3,1
 102c890:	da801004 	addi	r10,sp,64
 102c894:	58800017 	ldw	r2,0(r11)
 102c898:	5ac00104 	addi	r11,r11,4
 102c89c:	d8c02015 	stw	r3,128(sp)
 102c8a0:	d8001d85 	stb	zero,118(sp)
 102c8a4:	d8801005 	stb	r2,64(sp)
 102c8a8:	dac02315 	stw	r11,140(sp)
 102c8ac:	1839883a 	mov	fp,r3
 102c8b0:	da802615 	stw	r10,152(sp)
 102c8b4:	0021883a 	mov	r16,zero
 102c8b8:	8a80008c 	andi	r10,r17,2
 102c8bc:	da802215 	stw	r10,136(sp)
 102c8c0:	50000326 	beq	r10,zero,102c8d0 <___svfiprintf_internal_r+0x518>
 102c8c4:	dac02017 	ldw	r11,128(sp)
 102c8c8:	5ac00084 	addi	r11,r11,2
 102c8cc:	dac02015 	stw	r11,128(sp)
 102c8d0:	88c0210c 	andi	r3,r17,132
 102c8d4:	d8c02515 	stw	r3,148(sp)
 102c8d8:	1800bb1e 	bne	r3,zero,102cbc8 <___svfiprintf_internal_r+0x810>
 102c8dc:	da802117 	ldw	r10,132(sp)
 102c8e0:	dac02017 	ldw	r11,128(sp)
 102c8e4:	52edc83a 	sub	r22,r10,r11
 102c8e8:	0580b70e 	bge	zero,r22,102cbc8 <___svfiprintf_internal_r+0x810>
 102c8ec:	02400404 	movi	r9,16
 102c8f0:	d8c01c17 	ldw	r3,112(sp)
 102c8f4:	d8801b17 	ldw	r2,108(sp)
 102c8f8:	4d82a70e 	bge	r9,r22,102d398 <___svfiprintf_internal_r+0xfe0>
 102c8fc:	014040f4 	movhi	r5,259
 102c900:	29505f04 	addi	r5,r5,16764
 102c904:	d9402815 	stw	r5,160(sp)
 102c908:	05c001c4 	movi	r23,7
 102c90c:	00000306 	br	102c91c <___svfiprintf_internal_r+0x564>
 102c910:	b5bffc04 	addi	r22,r22,-16
 102c914:	42000204 	addi	r8,r8,8
 102c918:	4d80150e 	bge	r9,r22,102c970 <___svfiprintf_internal_r+0x5b8>
 102c91c:	028040f4 	movhi	r10,259
 102c920:	18c00404 	addi	r3,r3,16
 102c924:	10800044 	addi	r2,r2,1
 102c928:	52905f04 	addi	r10,r10,16764
 102c92c:	42800015 	stw	r10,0(r8)
 102c930:	42400115 	stw	r9,4(r8)
 102c934:	d8c01c15 	stw	r3,112(sp)
 102c938:	d8801b15 	stw	r2,108(sp)
 102c93c:	b8bff40e 	bge	r23,r2,102c910 <_gp+0xfffeec8c>
 102c940:	9009883a 	mov	r4,r18
 102c944:	a00b883a 	mov	r5,r20
 102c948:	d9801a04 	addi	r6,sp,104
 102c94c:	da402c15 	stw	r9,176(sp)
 102c950:	102c1f00 	call	102c1f0 <__ssprint_r>
 102c954:	da402c17 	ldw	r9,176(sp)
 102c958:	1001511e 	bne	r2,zero,102cea0 <___svfiprintf_internal_r+0xae8>
 102c95c:	b5bffc04 	addi	r22,r22,-16
 102c960:	d8c01c17 	ldw	r3,112(sp)
 102c964:	d8801b17 	ldw	r2,108(sp)
 102c968:	d811883a 	mov	r8,sp
 102c96c:	4dbfeb16 	blt	r9,r22,102c91c <_gp+0xfffeec98>
 102c970:	dac02817 	ldw	r11,160(sp)
 102c974:	b0c7883a 	add	r3,r22,r3
 102c978:	10800044 	addi	r2,r2,1
 102c97c:	42c00015 	stw	r11,0(r8)
 102c980:	45800115 	stw	r22,4(r8)
 102c984:	d8c01c15 	stw	r3,112(sp)
 102c988:	d8801b15 	stw	r2,108(sp)
 102c98c:	010001c4 	movi	r4,7
 102c990:	2081dd16 	blt	r4,r2,102d108 <___svfiprintf_internal_r+0xd50>
 102c994:	42000204 	addi	r8,r8,8
 102c998:	00008d06 	br	102cbd0 <___svfiprintf_internal_r+0x818>
 102c99c:	00c040f4 	movhi	r3,259
 102c9a0:	18cfed04 	addi	r3,r3,16308
 102c9a4:	d8c02a15 	stw	r3,168(sp)
 102c9a8:	d9801d85 	stb	r6,118(sp)
 102c9ac:	88c0080c 	andi	r3,r17,32
 102c9b0:	d8802317 	ldw	r2,140(sp)
 102c9b4:	18003226 	beq	r3,zero,102ca80 <___svfiprintf_internal_r+0x6c8>
 102c9b8:	da802317 	ldw	r10,140(sp)
 102c9bc:	12400017 	ldw	r9,0(r2)
 102c9c0:	52800204 	addi	r10,r10,8
 102c9c4:	da802315 	stw	r10,140(sp)
 102c9c8:	12800117 	ldw	r10,4(r2)
 102c9cc:	8880004c 	andi	r2,r17,1
 102c9d0:	1001be26 	beq	r2,zero,102d0cc <___svfiprintf_internal_r+0xd14>
 102c9d4:	4a86b03a 	or	r3,r9,r10
 102c9d8:	1802291e 	bne	r3,zero,102d280 <___svfiprintf_internal_r+0xec8>
 102c9dc:	00800084 	movi	r2,2
 102c9e0:	003f2e06 	br	102c69c <_gp+0xfffeea18>
 102c9e4:	a9000007 	ldb	r4,0(r21)
 102c9e8:	a805883a 	mov	r2,r21
 102c9ec:	21c22a26 	beq	r4,r7,102d298 <___svfiprintf_internal_r+0xee0>
 102c9f0:	8c400414 	ori	r17,r17,16
 102c9f4:	003ebc06 	br	102c4e8 <_gp+0xfffee864>
 102c9f8:	8c401014 	ori	r17,r17,64
 102c9fc:	a9000007 	ldb	r4,0(r21)
 102ca00:	003eb906 	br	102c4e8 <_gp+0xfffee864>
 102ca04:	d9801d85 	stb	r6,118(sp)
 102ca08:	8880080c 	andi	r2,r17,32
 102ca0c:	1002131e 	bne	r2,zero,102d25c <___svfiprintf_internal_r+0xea4>
 102ca10:	8880040c 	andi	r2,r17,16
 102ca14:	1002241e 	bne	r2,zero,102d2a8 <___svfiprintf_internal_r+0xef0>
 102ca18:	8c40100c 	andi	r17,r17,64
 102ca1c:	88022226 	beq	r17,zero,102d2a8 <___svfiprintf_internal_r+0xef0>
 102ca20:	dac02317 	ldw	r11,140(sp)
 102ca24:	da802417 	ldw	r10,144(sp)
 102ca28:	58800017 	ldw	r2,0(r11)
 102ca2c:	5ac00104 	addi	r11,r11,4
 102ca30:	dac02315 	stw	r11,140(sp)
 102ca34:	1280000d 	sth	r10,0(r2)
 102ca38:	003e8306 	br	102c448 <_gp+0xfffee7c4>
 102ca3c:	8c400054 	ori	r17,r17,1
 102ca40:	a9000007 	ldb	r4,0(r21)
 102ca44:	003ea806 	br	102c4e8 <_gp+0xfffee864>
 102ca48:	30803fcc 	andi	r2,r6,255
 102ca4c:	1080201c 	xori	r2,r2,128
 102ca50:	10bfe004 	addi	r2,r2,-128
 102ca54:	1001ff1e 	bne	r2,zero,102d254 <___svfiprintf_internal_r+0xe9c>
 102ca58:	01800804 	movi	r6,32
 102ca5c:	a9000007 	ldb	r4,0(r21)
 102ca60:	003ea106 	br	102c4e8 <_gp+0xfffee864>
 102ca64:	02c040f4 	movhi	r11,259
 102ca68:	5acff204 	addi	r11,r11,16328
 102ca6c:	dac02a15 	stw	r11,168(sp)
 102ca70:	d9801d85 	stb	r6,118(sp)
 102ca74:	88c0080c 	andi	r3,r17,32
 102ca78:	d8802317 	ldw	r2,140(sp)
 102ca7c:	183fce1e 	bne	r3,zero,102c9b8 <_gp+0xfffeed34>
 102ca80:	88c0040c 	andi	r3,r17,16
 102ca84:	1801ed1e 	bne	r3,zero,102d23c <___svfiprintf_internal_r+0xe84>
 102ca88:	88c0100c 	andi	r3,r17,64
 102ca8c:	18021a26 	beq	r3,zero,102d2f8 <___svfiprintf_internal_r+0xf40>
 102ca90:	da802317 	ldw	r10,140(sp)
 102ca94:	1240000b 	ldhu	r9,0(r2)
 102ca98:	52800104 	addi	r10,r10,4
 102ca9c:	da802315 	stw	r10,140(sp)
 102caa0:	0015883a 	mov	r10,zero
 102caa4:	003fc906 	br	102c9cc <_gp+0xfffeed48>
 102caa8:	8c400414 	ori	r17,r17,16
 102caac:	d9801d85 	stb	r6,118(sp)
 102cab0:	8880080c 	andi	r2,r17,32
 102cab4:	d8c02317 	ldw	r3,140(sp)
 102cab8:	103f671e 	bne	r2,zero,102c858 <_gp+0xfffeebd4>
 102cabc:	8880040c 	andi	r2,r17,16
 102cac0:	1001c71e 	bne	r2,zero,102d1e0 <___svfiprintf_internal_r+0xe28>
 102cac4:	8880100c 	andi	r2,r17,64
 102cac8:	1001c526 	beq	r2,zero,102d1e0 <___svfiprintf_internal_r+0xe28>
 102cacc:	1a40000f 	ldh	r9,0(r3)
 102cad0:	dac02317 	ldw	r11,140(sp)
 102cad4:	4815d7fa 	srai	r10,r9,31
 102cad8:	5ac00104 	addi	r11,r11,4
 102cadc:	dac02315 	stw	r11,140(sp)
 102cae0:	5005883a 	mov	r2,r10
 102cae4:	103f630e 	bge	r2,zero,102c874 <_gp+0xfffeebf0>
 102cae8:	0253c83a 	sub	r9,zero,r9
 102caec:	4804c03a 	cmpne	r2,r9,zero
 102caf0:	0295c83a 	sub	r10,zero,r10
 102caf4:	5095c83a 	sub	r10,r10,r2
 102caf8:	02c00b44 	movi	r11,45
 102cafc:	dac01d85 	stb	r11,118(sp)
 102cb00:	8039883a 	mov	fp,r16
 102cb04:	00800044 	movi	r2,1
 102cb08:	4a86b03a 	or	r3,r9,r10
 102cb0c:	003ee606 	br	102c6a8 <_gp+0xfffeea24>
 102cb10:	a815883a 	mov	r10,r21
 102cb14:	d8002115 	stw	zero,132(sp)
 102cb18:	20bff404 	addi	r2,r4,-48
 102cb1c:	51000007 	ldb	r4,0(r10)
 102cb20:	da802117 	ldw	r10,132(sp)
 102cb24:	ad400044 	addi	r21,r21,1
 102cb28:	52c002a4 	muli	r11,r10,10
 102cb2c:	a815883a 	mov	r10,r21
 102cb30:	5885883a 	add	r2,r11,r2
 102cb34:	d8802115 	stw	r2,132(sp)
 102cb38:	20bff404 	addi	r2,r4,-48
 102cb3c:	28bff72e 	bgeu	r5,r2,102cb1c <_gp+0xfffeee98>
 102cb40:	20bff804 	addi	r2,r4,-32
 102cb44:	18be6b2e 	bgeu	r3,r2,102c4f4 <_gp+0xfffee870>
 102cb48:	d9801d85 	stb	r6,118(sp)
 102cb4c:	2000ce26 	beq	r4,zero,102ce88 <___svfiprintf_internal_r+0xad0>
 102cb50:	02800044 	movi	r10,1
 102cb54:	dac01004 	addi	r11,sp,64
 102cb58:	da802015 	stw	r10,128(sp)
 102cb5c:	d9001005 	stb	r4,64(sp)
 102cb60:	d8001d85 	stb	zero,118(sp)
 102cb64:	5039883a 	mov	fp,r10
 102cb68:	dac02615 	stw	r11,152(sp)
 102cb6c:	003f5106 	br	102c8b4 <_gp+0xfffeec30>
 102cb70:	8c402014 	ori	r17,r17,128
 102cb74:	a9000007 	ldb	r4,0(r21)
 102cb78:	003e5b06 	br	102c4e8 <_gp+0xfffee864>
 102cb7c:	01800ac4 	movi	r6,43
 102cb80:	a9000007 	ldb	r4,0(r21)
 102cb84:	003e5806 	br	102c4e8 <_gp+0xfffee864>
 102cb88:	a9000007 	ldb	r4,0(r21)
 102cb8c:	aa800044 	addi	r10,r21,1
 102cb90:	22421426 	beq	r4,r9,102d3e4 <___svfiprintf_internal_r+0x102c>
 102cb94:	20bff404 	addi	r2,r4,-48
 102cb98:	502b883a 	mov	r21,r10
 102cb9c:	0021883a 	mov	r16,zero
 102cba0:	28be5236 	bltu	r5,r2,102c4ec <_gp+0xfffee868>
 102cba4:	a9000007 	ldb	r4,0(r21)
 102cba8:	840002a4 	muli	r16,r16,10
 102cbac:	ad400044 	addi	r21,r21,1
 102cbb0:	1421883a 	add	r16,r2,r16
 102cbb4:	20bff404 	addi	r2,r4,-48
 102cbb8:	28bffa2e 	bgeu	r5,r2,102cba4 <_gp+0xfffeef20>
 102cbbc:	803e4b0e 	bge	r16,zero,102c4ec <_gp+0xfffee868>
 102cbc0:	043fffc4 	movi	r16,-1
 102cbc4:	003e4906 	br	102c4ec <_gp+0xfffee868>
 102cbc8:	d8c01c17 	ldw	r3,112(sp)
 102cbcc:	d8801b17 	ldw	r2,108(sp)
 102cbd0:	d9001d87 	ldb	r4,118(sp)
 102cbd4:	20000b26 	beq	r4,zero,102cc04 <___svfiprintf_internal_r+0x84c>
 102cbd8:	d9001d84 	addi	r4,sp,118
 102cbdc:	18c00044 	addi	r3,r3,1
 102cbe0:	10800044 	addi	r2,r2,1
 102cbe4:	41000015 	stw	r4,0(r8)
 102cbe8:	01000044 	movi	r4,1
 102cbec:	41000115 	stw	r4,4(r8)
 102cbf0:	d8c01c15 	stw	r3,112(sp)
 102cbf4:	d8801b15 	stw	r2,108(sp)
 102cbf8:	010001c4 	movi	r4,7
 102cbfc:	20811e16 	blt	r4,r2,102d078 <___svfiprintf_internal_r+0xcc0>
 102cc00:	42000204 	addi	r8,r8,8
 102cc04:	da802217 	ldw	r10,136(sp)
 102cc08:	50000b26 	beq	r10,zero,102cc38 <___svfiprintf_internal_r+0x880>
 102cc0c:	d9001d04 	addi	r4,sp,116
 102cc10:	18c00084 	addi	r3,r3,2
 102cc14:	10800044 	addi	r2,r2,1
 102cc18:	41000015 	stw	r4,0(r8)
 102cc1c:	01000084 	movi	r4,2
 102cc20:	41000115 	stw	r4,4(r8)
 102cc24:	d8c01c15 	stw	r3,112(sp)
 102cc28:	d8801b15 	stw	r2,108(sp)
 102cc2c:	010001c4 	movi	r4,7
 102cc30:	20811a16 	blt	r4,r2,102d09c <___svfiprintf_internal_r+0xce4>
 102cc34:	42000204 	addi	r8,r8,8
 102cc38:	dac02517 	ldw	r11,148(sp)
 102cc3c:	01002004 	movi	r4,128
 102cc40:	5900a826 	beq	r11,r4,102cee4 <___svfiprintf_internal_r+0xb2c>
 102cc44:	8721c83a 	sub	r16,r16,fp
 102cc48:	0400260e 	bge	zero,r16,102cce4 <___svfiprintf_internal_r+0x92c>
 102cc4c:	01c00404 	movi	r7,16
 102cc50:	3c01a50e 	bge	r7,r16,102d2e8 <___svfiprintf_internal_r+0xf30>
 102cc54:	010040f4 	movhi	r4,259
 102cc58:	21105b04 	addi	r4,r4,16748
 102cc5c:	d9002215 	stw	r4,136(sp)
 102cc60:	382f883a 	mov	r23,r7
 102cc64:	058001c4 	movi	r22,7
 102cc68:	00000306 	br	102cc78 <___svfiprintf_internal_r+0x8c0>
 102cc6c:	843ffc04 	addi	r16,r16,-16
 102cc70:	42000204 	addi	r8,r8,8
 102cc74:	bc00110e 	bge	r23,r16,102ccbc <___svfiprintf_internal_r+0x904>
 102cc78:	18c00404 	addi	r3,r3,16
 102cc7c:	10800044 	addi	r2,r2,1
 102cc80:	44c00015 	stw	r19,0(r8)
 102cc84:	45c00115 	stw	r23,4(r8)
 102cc88:	d8c01c15 	stw	r3,112(sp)
 102cc8c:	d8801b15 	stw	r2,108(sp)
 102cc90:	b0bff60e 	bge	r22,r2,102cc6c <_gp+0xfffeefe8>
 102cc94:	9009883a 	mov	r4,r18
 102cc98:	a00b883a 	mov	r5,r20
 102cc9c:	d9801a04 	addi	r6,sp,104
 102cca0:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cca4:	10007e1e 	bne	r2,zero,102cea0 <___svfiprintf_internal_r+0xae8>
 102cca8:	843ffc04 	addi	r16,r16,-16
 102ccac:	d8c01c17 	ldw	r3,112(sp)
 102ccb0:	d8801b17 	ldw	r2,108(sp)
 102ccb4:	d811883a 	mov	r8,sp
 102ccb8:	bc3fef16 	blt	r23,r16,102cc78 <_gp+0xfffeeff4>
 102ccbc:	da802217 	ldw	r10,136(sp)
 102ccc0:	1c07883a 	add	r3,r3,r16
 102ccc4:	10800044 	addi	r2,r2,1
 102ccc8:	42800015 	stw	r10,0(r8)
 102cccc:	44000115 	stw	r16,4(r8)
 102ccd0:	d8c01c15 	stw	r3,112(sp)
 102ccd4:	d8801b15 	stw	r2,108(sp)
 102ccd8:	010001c4 	movi	r4,7
 102ccdc:	2080ce16 	blt	r4,r2,102d018 <___svfiprintf_internal_r+0xc60>
 102cce0:	42000204 	addi	r8,r8,8
 102cce4:	dac02617 	ldw	r11,152(sp)
 102cce8:	e0c7883a 	add	r3,fp,r3
 102ccec:	10800044 	addi	r2,r2,1
 102ccf0:	42c00015 	stw	r11,0(r8)
 102ccf4:	47000115 	stw	fp,4(r8)
 102ccf8:	d8c01c15 	stw	r3,112(sp)
 102ccfc:	d8801b15 	stw	r2,108(sp)
 102cd00:	010001c4 	movi	r4,7
 102cd04:	2080a316 	blt	r4,r2,102cf94 <___svfiprintf_internal_r+0xbdc>
 102cd08:	42000204 	addi	r8,r8,8
 102cd0c:	8c40010c 	andi	r17,r17,4
 102cd10:	88002b26 	beq	r17,zero,102cdc0 <___svfiprintf_internal_r+0xa08>
 102cd14:	da802117 	ldw	r10,132(sp)
 102cd18:	dac02017 	ldw	r11,128(sp)
 102cd1c:	52e1c83a 	sub	r16,r10,r11
 102cd20:	0400270e 	bge	zero,r16,102cdc0 <___svfiprintf_internal_r+0xa08>
 102cd24:	04400404 	movi	r17,16
 102cd28:	d8801b17 	ldw	r2,108(sp)
 102cd2c:	8c019e0e 	bge	r17,r16,102d3a8 <___svfiprintf_internal_r+0xff0>
 102cd30:	014040f4 	movhi	r5,259
 102cd34:	29505f04 	addi	r5,r5,16764
 102cd38:	d9402815 	stw	r5,160(sp)
 102cd3c:	070001c4 	movi	fp,7
 102cd40:	00000306 	br	102cd50 <___svfiprintf_internal_r+0x998>
 102cd44:	843ffc04 	addi	r16,r16,-16
 102cd48:	42000204 	addi	r8,r8,8
 102cd4c:	8c00130e 	bge	r17,r16,102cd9c <___svfiprintf_internal_r+0x9e4>
 102cd50:	028040f4 	movhi	r10,259
 102cd54:	18c00404 	addi	r3,r3,16
 102cd58:	10800044 	addi	r2,r2,1
 102cd5c:	52905f04 	addi	r10,r10,16764
 102cd60:	42800015 	stw	r10,0(r8)
 102cd64:	44400115 	stw	r17,4(r8)
 102cd68:	d8c01c15 	stw	r3,112(sp)
 102cd6c:	d8801b15 	stw	r2,108(sp)
 102cd70:	e0bff40e 	bge	fp,r2,102cd44 <_gp+0xfffef0c0>
 102cd74:	9009883a 	mov	r4,r18
 102cd78:	a00b883a 	mov	r5,r20
 102cd7c:	d9801a04 	addi	r6,sp,104
 102cd80:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cd84:	1000461e 	bne	r2,zero,102cea0 <___svfiprintf_internal_r+0xae8>
 102cd88:	843ffc04 	addi	r16,r16,-16
 102cd8c:	d8c01c17 	ldw	r3,112(sp)
 102cd90:	d8801b17 	ldw	r2,108(sp)
 102cd94:	d811883a 	mov	r8,sp
 102cd98:	8c3fed16 	blt	r17,r16,102cd50 <_gp+0xfffef0cc>
 102cd9c:	dac02817 	ldw	r11,160(sp)
 102cda0:	1c07883a 	add	r3,r3,r16
 102cda4:	10800044 	addi	r2,r2,1
 102cda8:	42c00015 	stw	r11,0(r8)
 102cdac:	44000115 	stw	r16,4(r8)
 102cdb0:	d8c01c15 	stw	r3,112(sp)
 102cdb4:	d8801b15 	stw	r2,108(sp)
 102cdb8:	010001c4 	movi	r4,7
 102cdbc:	2080fe16 	blt	r4,r2,102d1b8 <___svfiprintf_internal_r+0xe00>
 102cdc0:	dd802017 	ldw	r22,128(sp)
 102cdc4:	da802117 	ldw	r10,132(sp)
 102cdc8:	b280010e 	bge	r22,r10,102cdd0 <___svfiprintf_internal_r+0xa18>
 102cdcc:	502d883a 	mov	r22,r10
 102cdd0:	dac02417 	ldw	r11,144(sp)
 102cdd4:	5d97883a 	add	r11,r11,r22
 102cdd8:	dac02415 	stw	r11,144(sp)
 102cddc:	1800751e 	bne	r3,zero,102cfb4 <___svfiprintf_internal_r+0xbfc>
 102cde0:	a8800007 	ldb	r2,0(r21)
 102cde4:	d8001b15 	stw	zero,108(sp)
 102cde8:	d811883a 	mov	r8,sp
 102cdec:	103d981e 	bne	r2,zero,102c450 <_gp+0xfffee7cc>
 102cdf0:	a82d883a 	mov	r22,r21
 102cdf4:	003daf06 	br	102c4b4 <_gp+0xfffee830>
 102cdf8:	10803fcc 	andi	r2,r2,255
 102cdfc:	00c00044 	movi	r3,1
 102ce00:	10fe311e 	bne	r2,r3,102c6c8 <_gp+0xfffeea44>
 102ce04:	5000e126 	beq	r10,zero,102d18c <___svfiprintf_internal_r+0xdd4>
 102ce08:	dc402015 	stw	r17,128(sp)
 102ce0c:	dc002215 	stw	r16,136(sp)
 102ce10:	dd801a04 	addi	r22,sp,104
 102ce14:	402f883a 	mov	r23,r8
 102ce18:	5839883a 	mov	fp,r11
 102ce1c:	4821883a 	mov	r16,r9
 102ce20:	5023883a 	mov	r17,r10
 102ce24:	8009883a 	mov	r4,r16
 102ce28:	880b883a 	mov	r5,r17
 102ce2c:	01800284 	movi	r6,10
 102ce30:	000f883a 	mov	r7,zero
 102ce34:	102f7ac0 	call	102f7ac <__umoddi3>
 102ce38:	10800c04 	addi	r2,r2,48
 102ce3c:	b5bfffc4 	addi	r22,r22,-1
 102ce40:	8009883a 	mov	r4,r16
 102ce44:	880b883a 	mov	r5,r17
 102ce48:	01800284 	movi	r6,10
 102ce4c:	000f883a 	mov	r7,zero
 102ce50:	b0800005 	stb	r2,0(r22)
 102ce54:	102f1ec0 	call	102f1ec <__udivdi3>
 102ce58:	1021883a 	mov	r16,r2
 102ce5c:	10c4b03a 	or	r2,r2,r3
 102ce60:	1823883a 	mov	r17,r3
 102ce64:	103fef1e 	bne	r2,zero,102ce24 <_gp+0xfffef1a0>
 102ce68:	da801e17 	ldw	r10,120(sp)
 102ce6c:	e017883a 	mov	r11,fp
 102ce70:	b811883a 	mov	r8,r23
 102ce74:	dc402017 	ldw	r17,128(sp)
 102ce78:	dc002217 	ldw	r16,136(sp)
 102ce7c:	dd802615 	stw	r22,152(sp)
 102ce80:	55b9c83a 	sub	fp,r10,r22
 102ce84:	003e2206 	br	102c710 <_gp+0xfffeea8c>
 102ce88:	d8801c17 	ldw	r2,112(sp)
 102ce8c:	10000426 	beq	r2,zero,102cea0 <___svfiprintf_internal_r+0xae8>
 102ce90:	d9002917 	ldw	r4,164(sp)
 102ce94:	d9402717 	ldw	r5,156(sp)
 102ce98:	d9801a04 	addi	r6,sp,104
 102ce9c:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cea0:	da802717 	ldw	r10,156(sp)
 102cea4:	5080030b 	ldhu	r2,12(r10)
 102cea8:	1080100c 	andi	r2,r2,64
 102ceac:	1000511e 	bne	r2,zero,102cff4 <___svfiprintf_internal_r+0xc3c>
 102ceb0:	d8802417 	ldw	r2,144(sp)
 102ceb4:	dfc03617 	ldw	ra,216(sp)
 102ceb8:	df003517 	ldw	fp,212(sp)
 102cebc:	ddc03417 	ldw	r23,208(sp)
 102cec0:	dd803317 	ldw	r22,204(sp)
 102cec4:	dd403217 	ldw	r21,200(sp)
 102cec8:	dd003117 	ldw	r20,196(sp)
 102cecc:	dcc03017 	ldw	r19,192(sp)
 102ced0:	dc802f17 	ldw	r18,188(sp)
 102ced4:	dc402e17 	ldw	r17,184(sp)
 102ced8:	dc002d17 	ldw	r16,180(sp)
 102cedc:	dec03704 	addi	sp,sp,220
 102cee0:	f800283a 	ret
 102cee4:	da802117 	ldw	r10,132(sp)
 102cee8:	dac02017 	ldw	r11,128(sp)
 102ceec:	52edc83a 	sub	r22,r10,r11
 102cef0:	05bf540e 	bge	zero,r22,102cc44 <_gp+0xfffeefc0>
 102cef4:	02400404 	movi	r9,16
 102cef8:	4d812f0e 	bge	r9,r22,102d3b8 <___svfiprintf_internal_r+0x1000>
 102cefc:	014040f4 	movhi	r5,259
 102cf00:	29505b04 	addi	r5,r5,16748
 102cf04:	d9402215 	stw	r5,136(sp)
 102cf08:	05c001c4 	movi	r23,7
 102cf0c:	00000306 	br	102cf1c <___svfiprintf_internal_r+0xb64>
 102cf10:	b5bffc04 	addi	r22,r22,-16
 102cf14:	42000204 	addi	r8,r8,8
 102cf18:	4d80130e 	bge	r9,r22,102cf68 <___svfiprintf_internal_r+0xbb0>
 102cf1c:	18c00404 	addi	r3,r3,16
 102cf20:	10800044 	addi	r2,r2,1
 102cf24:	44c00015 	stw	r19,0(r8)
 102cf28:	42400115 	stw	r9,4(r8)
 102cf2c:	d8c01c15 	stw	r3,112(sp)
 102cf30:	d8801b15 	stw	r2,108(sp)
 102cf34:	b8bff60e 	bge	r23,r2,102cf10 <_gp+0xfffef28c>
 102cf38:	9009883a 	mov	r4,r18
 102cf3c:	a00b883a 	mov	r5,r20
 102cf40:	d9801a04 	addi	r6,sp,104
 102cf44:	da402c15 	stw	r9,176(sp)
 102cf48:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cf4c:	da402c17 	ldw	r9,176(sp)
 102cf50:	103fd31e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102cf54:	b5bffc04 	addi	r22,r22,-16
 102cf58:	d8c01c17 	ldw	r3,112(sp)
 102cf5c:	d8801b17 	ldw	r2,108(sp)
 102cf60:	d811883a 	mov	r8,sp
 102cf64:	4dbfed16 	blt	r9,r22,102cf1c <_gp+0xfffef298>
 102cf68:	da802217 	ldw	r10,136(sp)
 102cf6c:	1d87883a 	add	r3,r3,r22
 102cf70:	10800044 	addi	r2,r2,1
 102cf74:	42800015 	stw	r10,0(r8)
 102cf78:	45800115 	stw	r22,4(r8)
 102cf7c:	d8c01c15 	stw	r3,112(sp)
 102cf80:	d8801b15 	stw	r2,108(sp)
 102cf84:	010001c4 	movi	r4,7
 102cf88:	2080ce16 	blt	r4,r2,102d2c4 <___svfiprintf_internal_r+0xf0c>
 102cf8c:	42000204 	addi	r8,r8,8
 102cf90:	003f2c06 	br	102cc44 <_gp+0xfffeefc0>
 102cf94:	9009883a 	mov	r4,r18
 102cf98:	a00b883a 	mov	r5,r20
 102cf9c:	d9801a04 	addi	r6,sp,104
 102cfa0:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cfa4:	103fbe1e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102cfa8:	d8c01c17 	ldw	r3,112(sp)
 102cfac:	d811883a 	mov	r8,sp
 102cfb0:	003f5606 	br	102cd0c <_gp+0xfffef088>
 102cfb4:	9009883a 	mov	r4,r18
 102cfb8:	a00b883a 	mov	r5,r20
 102cfbc:	d9801a04 	addi	r6,sp,104
 102cfc0:	102c1f00 	call	102c1f0 <__ssprint_r>
 102cfc4:	103f8626 	beq	r2,zero,102cde0 <_gp+0xfffef15c>
 102cfc8:	003fb506 	br	102cea0 <_gp+0xfffef21c>
 102cfcc:	10803fcc 	andi	r2,r2,255
 102cfd0:	10003b1e 	bne	r2,zero,102d0c0 <___svfiprintf_internal_r+0xd08>
 102cfd4:	8880004c 	andi	r2,r17,1
 102cfd8:	10007e26 	beq	r2,zero,102d1d4 <___svfiprintf_internal_r+0xe1c>
 102cfdc:	00800c04 	movi	r2,48
 102cfe0:	d8c019c4 	addi	r3,sp,103
 102cfe4:	d88019c5 	stb	r2,103(sp)
 102cfe8:	df002b17 	ldw	fp,172(sp)
 102cfec:	d8c02615 	stw	r3,152(sp)
 102cff0:	003dc706 	br	102c710 <_gp+0xfffeea8c>
 102cff4:	00bfffc4 	movi	r2,-1
 102cff8:	003fae06 	br	102ceb4 <_gp+0xfffef230>
 102cffc:	9009883a 	mov	r4,r18
 102d000:	a00b883a 	mov	r5,r20
 102d004:	d9801a04 	addi	r6,sp,104
 102d008:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d00c:	103fa41e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d010:	d811883a 	mov	r8,sp
 102d014:	003d2406 	br	102c4a8 <_gp+0xfffee824>
 102d018:	9009883a 	mov	r4,r18
 102d01c:	a00b883a 	mov	r5,r20
 102d020:	d9801a04 	addi	r6,sp,104
 102d024:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d028:	103f9d1e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d02c:	d8c01c17 	ldw	r3,112(sp)
 102d030:	d8801b17 	ldw	r2,108(sp)
 102d034:	d811883a 	mov	r8,sp
 102d038:	003f2a06 	br	102cce4 <_gp+0xfffef060>
 102d03c:	d9402a17 	ldw	r5,168(sp)
 102d040:	d8c01a04 	addi	r3,sp,104
 102d044:	488003cc 	andi	r2,r9,15
 102d048:	5008973a 	slli	r4,r10,28
 102d04c:	2885883a 	add	r2,r5,r2
 102d050:	4812d13a 	srli	r9,r9,4
 102d054:	10800003 	ldbu	r2,0(r2)
 102d058:	5014d13a 	srli	r10,r10,4
 102d05c:	18ffffc4 	addi	r3,r3,-1
 102d060:	2252b03a 	or	r9,r4,r9
 102d064:	18800005 	stb	r2,0(r3)
 102d068:	4a84b03a 	or	r2,r9,r10
 102d06c:	103ff51e 	bne	r2,zero,102d044 <_gp+0xfffef3c0>
 102d070:	d8c02615 	stw	r3,152(sp)
 102d074:	003da406 	br	102c708 <_gp+0xfffeea84>
 102d078:	9009883a 	mov	r4,r18
 102d07c:	a00b883a 	mov	r5,r20
 102d080:	d9801a04 	addi	r6,sp,104
 102d084:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d088:	103f851e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d08c:	d8c01c17 	ldw	r3,112(sp)
 102d090:	d8801b17 	ldw	r2,108(sp)
 102d094:	d811883a 	mov	r8,sp
 102d098:	003eda06 	br	102cc04 <_gp+0xfffeef80>
 102d09c:	9009883a 	mov	r4,r18
 102d0a0:	a00b883a 	mov	r5,r20
 102d0a4:	d9801a04 	addi	r6,sp,104
 102d0a8:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d0ac:	103f7c1e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d0b0:	d8c01c17 	ldw	r3,112(sp)
 102d0b4:	d8801b17 	ldw	r2,108(sp)
 102d0b8:	d811883a 	mov	r8,sp
 102d0bc:	003ede06 	br	102cc38 <_gp+0xfffeefb4>
 102d0c0:	da801a04 	addi	r10,sp,104
 102d0c4:	da802615 	stw	r10,152(sp)
 102d0c8:	003d9106 	br	102c710 <_gp+0xfffeea8c>
 102d0cc:	00800084 	movi	r2,2
 102d0d0:	4a86b03a 	or	r3,r9,r10
 102d0d4:	003d7106 	br	102c69c <_gp+0xfffeea18>
 102d0d8:	88c0040c 	andi	r3,r17,16
 102d0dc:	18004f1e 	bne	r3,zero,102d21c <___svfiprintf_internal_r+0xe64>
 102d0e0:	88c0100c 	andi	r3,r17,64
 102d0e4:	18004d26 	beq	r3,zero,102d21c <___svfiprintf_internal_r+0xe64>
 102d0e8:	dac02317 	ldw	r11,140(sp)
 102d0ec:	1240000b 	ldhu	r9,0(r2)
 102d0f0:	0015883a 	mov	r10,zero
 102d0f4:	5ac00104 	addi	r11,r11,4
 102d0f8:	dac02315 	stw	r11,140(sp)
 102d0fc:	00800044 	movi	r2,1
 102d100:	4807883a 	mov	r3,r9
 102d104:	003d6506 	br	102c69c <_gp+0xfffeea18>
 102d108:	9009883a 	mov	r4,r18
 102d10c:	a00b883a 	mov	r5,r20
 102d110:	d9801a04 	addi	r6,sp,104
 102d114:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d118:	103f611e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d11c:	d8c01c17 	ldw	r3,112(sp)
 102d120:	d8801b17 	ldw	r2,108(sp)
 102d124:	d811883a 	mov	r8,sp
 102d128:	003ea906 	br	102cbd0 <_gp+0xfffeef4c>
 102d12c:	88c0040c 	andi	r3,r17,16
 102d130:	1800321e 	bne	r3,zero,102d1fc <___svfiprintf_internal_r+0xe44>
 102d134:	88c0100c 	andi	r3,r17,64
 102d138:	18003026 	beq	r3,zero,102d1fc <___svfiprintf_internal_r+0xe44>
 102d13c:	dac02317 	ldw	r11,140(sp)
 102d140:	1240000b 	ldhu	r9,0(r2)
 102d144:	0015883a 	mov	r10,zero
 102d148:	5ac00104 	addi	r11,r11,4
 102d14c:	dac02315 	stw	r11,140(sp)
 102d150:	0005883a 	mov	r2,zero
 102d154:	4807883a 	mov	r3,r9
 102d158:	003d5006 	br	102c69c <_gp+0xfffeea18>
 102d15c:	10803fcc 	andi	r2,r2,255
 102d160:	1080201c 	xori	r2,r2,128
 102d164:	10bfe004 	addi	r2,r2,-128
 102d168:	01000c04 	movi	r4,48
 102d16c:	11006826 	beq	r2,r4,102d310 <___svfiprintf_internal_r+0xf58>
 102d170:	da802617 	ldw	r10,152(sp)
 102d174:	d8801e17 	ldw	r2,120(sp)
 102d178:	193fffc5 	stb	r4,-1(r3)
 102d17c:	52bfffc4 	addi	r10,r10,-1
 102d180:	da802615 	stw	r10,152(sp)
 102d184:	12b9c83a 	sub	fp,r2,r10
 102d188:	003d6106 	br	102c710 <_gp+0xfffeea8c>
 102d18c:	00800244 	movi	r2,9
 102d190:	127f1d36 	bltu	r2,r9,102ce08 <_gp+0xfffef184>
 102d194:	4a400c04 	addi	r9,r9,48
 102d198:	d8c019c4 	addi	r3,sp,103
 102d19c:	da4019c5 	stb	r9,103(sp)
 102d1a0:	df002b17 	ldw	fp,172(sp)
 102d1a4:	d8c02615 	stw	r3,152(sp)
 102d1a8:	003d5906 	br	102c710 <_gp+0xfffeea8c>
 102d1ac:	d8802315 	stw	r2,140(sp)
 102d1b0:	a9000007 	ldb	r4,0(r21)
 102d1b4:	003ccc06 	br	102c4e8 <_gp+0xfffee864>
 102d1b8:	9009883a 	mov	r4,r18
 102d1bc:	a00b883a 	mov	r5,r20
 102d1c0:	d9801a04 	addi	r6,sp,104
 102d1c4:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d1c8:	103f351e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d1cc:	d8c01c17 	ldw	r3,112(sp)
 102d1d0:	003efb06 	br	102cdc0 <_gp+0xfffef13c>
 102d1d4:	d8c01a04 	addi	r3,sp,104
 102d1d8:	d8c02615 	stw	r3,152(sp)
 102d1dc:	003d4c06 	br	102c710 <_gp+0xfffeea8c>
 102d1e0:	da802317 	ldw	r10,140(sp)
 102d1e4:	1a400017 	ldw	r9,0(r3)
 102d1e8:	52800104 	addi	r10,r10,4
 102d1ec:	da802315 	stw	r10,140(sp)
 102d1f0:	4815d7fa 	srai	r10,r9,31
 102d1f4:	5005883a 	mov	r2,r10
 102d1f8:	003d9d06 	br	102c870 <_gp+0xfffeebec>
 102d1fc:	da802317 	ldw	r10,140(sp)
 102d200:	12400017 	ldw	r9,0(r2)
 102d204:	0005883a 	mov	r2,zero
 102d208:	52800104 	addi	r10,r10,4
 102d20c:	da802315 	stw	r10,140(sp)
 102d210:	4807883a 	mov	r3,r9
 102d214:	0015883a 	mov	r10,zero
 102d218:	003d2006 	br	102c69c <_gp+0xfffeea18>
 102d21c:	da802317 	ldw	r10,140(sp)
 102d220:	12400017 	ldw	r9,0(r2)
 102d224:	00800044 	movi	r2,1
 102d228:	52800104 	addi	r10,r10,4
 102d22c:	da802315 	stw	r10,140(sp)
 102d230:	4807883a 	mov	r3,r9
 102d234:	0015883a 	mov	r10,zero
 102d238:	003d1806 	br	102c69c <_gp+0xfffeea18>
 102d23c:	dac02317 	ldw	r11,140(sp)
 102d240:	12400017 	ldw	r9,0(r2)
 102d244:	0015883a 	mov	r10,zero
 102d248:	5ac00104 	addi	r11,r11,4
 102d24c:	dac02315 	stw	r11,140(sp)
 102d250:	003dde06 	br	102c9cc <_gp+0xfffeed48>
 102d254:	a9000007 	ldb	r4,0(r21)
 102d258:	003ca306 	br	102c4e8 <_gp+0xfffee864>
 102d25c:	dac02317 	ldw	r11,140(sp)
 102d260:	da802417 	ldw	r10,144(sp)
 102d264:	58800017 	ldw	r2,0(r11)
 102d268:	5007d7fa 	srai	r3,r10,31
 102d26c:	5ac00104 	addi	r11,r11,4
 102d270:	dac02315 	stw	r11,140(sp)
 102d274:	12800015 	stw	r10,0(r2)
 102d278:	10c00115 	stw	r3,4(r2)
 102d27c:	003c7206 	br	102c448 <_gp+0xfffee7c4>
 102d280:	00800c04 	movi	r2,48
 102d284:	d8801d05 	stb	r2,116(sp)
 102d288:	d9001d45 	stb	r4,117(sp)
 102d28c:	8c400094 	ori	r17,r17,2
 102d290:	00800084 	movi	r2,2
 102d294:	003d0106 	br	102c69c <_gp+0xfffeea18>
 102d298:	ad400044 	addi	r21,r21,1
 102d29c:	8c400814 	ori	r17,r17,32
 102d2a0:	11000047 	ldb	r4,1(r2)
 102d2a4:	003c9006 	br	102c4e8 <_gp+0xfffee864>
 102d2a8:	dac02317 	ldw	r11,140(sp)
 102d2ac:	da802417 	ldw	r10,144(sp)
 102d2b0:	58800017 	ldw	r2,0(r11)
 102d2b4:	5ac00104 	addi	r11,r11,4
 102d2b8:	dac02315 	stw	r11,140(sp)
 102d2bc:	12800015 	stw	r10,0(r2)
 102d2c0:	003c6106 	br	102c448 <_gp+0xfffee7c4>
 102d2c4:	9009883a 	mov	r4,r18
 102d2c8:	a00b883a 	mov	r5,r20
 102d2cc:	d9801a04 	addi	r6,sp,104
 102d2d0:	102c1f00 	call	102c1f0 <__ssprint_r>
 102d2d4:	103ef21e 	bne	r2,zero,102cea0 <_gp+0xfffef21c>
 102d2d8:	d8c01c17 	ldw	r3,112(sp)
 102d2dc:	d8801b17 	ldw	r2,108(sp)
 102d2e0:	d811883a 	mov	r8,sp
 102d2e4:	003e5706 	br	102cc44 <_gp+0xfffeefc0>
 102d2e8:	02c040f4 	movhi	r11,259
 102d2ec:	5ad05b04 	addi	r11,r11,16748
 102d2f0:	dac02215 	stw	r11,136(sp)
 102d2f4:	003e7106 	br	102ccbc <_gp+0xfffef038>
 102d2f8:	dac02317 	ldw	r11,140(sp)
 102d2fc:	12400017 	ldw	r9,0(r2)
 102d300:	0015883a 	mov	r10,zero
 102d304:	5ac00104 	addi	r11,r11,4
 102d308:	dac02315 	stw	r11,140(sp)
 102d30c:	003daf06 	br	102c9cc <_gp+0xfffeed48>
 102d310:	da801e17 	ldw	r10,120(sp)
 102d314:	d8c02617 	ldw	r3,152(sp)
 102d318:	50f9c83a 	sub	fp,r10,r3
 102d31c:	003cfc06 	br	102c710 <_gp+0xfffeea8c>
 102d320:	da002c15 	stw	r8,176(sp)
 102d324:	1022f4c0 	call	1022f4c <strlen>
 102d328:	1039883a 	mov	fp,r2
 102d32c:	dac01d83 	ldbu	r11,118(sp)
 102d330:	ddc02315 	stw	r23,140(sp)
 102d334:	0021883a 	mov	r16,zero
 102d338:	da002c17 	ldw	r8,176(sp)
 102d33c:	003cf406 	br	102c710 <_gp+0xfffeea8c>
 102d340:	04001004 	movi	r16,64
 102d344:	800b883a 	mov	r5,r16
 102d348:	1029dd40 	call	1029dd4 <_malloc_r>
 102d34c:	da802717 	ldw	r10,156(sp)
 102d350:	50800015 	stw	r2,0(r10)
 102d354:	50800415 	stw	r2,16(r10)
 102d358:	10002c26 	beq	r2,zero,102d40c <___svfiprintf_internal_r+0x1054>
 102d35c:	da802717 	ldw	r10,156(sp)
 102d360:	54000515 	stw	r16,20(r10)
 102d364:	003c2806 	br	102c408 <_gp+0xfffee784>
 102d368:	00800184 	movi	r2,6
 102d36c:	1400012e 	bgeu	r2,r16,102d374 <___svfiprintf_internal_r+0xfbc>
 102d370:	1021883a 	mov	r16,r2
 102d374:	8039883a 	mov	fp,r16
 102d378:	802d883a 	mov	r22,r16
 102d37c:	80001716 	blt	r16,zero,102d3dc <___svfiprintf_internal_r+0x1024>
 102d380:	008040f4 	movhi	r2,259
 102d384:	108ff704 	addi	r2,r2,16348
 102d388:	dd802015 	stw	r22,128(sp)
 102d38c:	ddc02315 	stw	r23,140(sp)
 102d390:	d8802615 	stw	r2,152(sp)
 102d394:	003d4706 	br	102c8b4 <_gp+0xfffeec30>
 102d398:	010040f4 	movhi	r4,259
 102d39c:	21105f04 	addi	r4,r4,16764
 102d3a0:	d9002815 	stw	r4,160(sp)
 102d3a4:	003d7206 	br	102c970 <_gp+0xfffeecec>
 102d3a8:	010040f4 	movhi	r4,259
 102d3ac:	21105f04 	addi	r4,r4,16764
 102d3b0:	d9002815 	stw	r4,160(sp)
 102d3b4:	003e7906 	br	102cd9c <_gp+0xfffef118>
 102d3b8:	010040f4 	movhi	r4,259
 102d3bc:	21105b04 	addi	r4,r4,16748
 102d3c0:	d9002215 	stw	r4,136(sp)
 102d3c4:	003ee806 	br	102cf68 <_gp+0xfffef2e4>
 102d3c8:	8039883a 	mov	fp,r16
 102d3cc:	dac01d83 	ldbu	r11,118(sp)
 102d3d0:	ddc02315 	stw	r23,140(sp)
 102d3d4:	0021883a 	mov	r16,zero
 102d3d8:	003ccd06 	br	102c710 <_gp+0xfffeea8c>
 102d3dc:	002d883a 	mov	r22,zero
 102d3e0:	003fe706 	br	102d380 <_gp+0xfffef6fc>
 102d3e4:	dac02317 	ldw	r11,140(sp)
 102d3e8:	a805883a 	mov	r2,r21
 102d3ec:	502b883a 	mov	r21,r10
 102d3f0:	5c000017 	ldw	r16,0(r11)
 102d3f4:	59000104 	addi	r4,r11,4
 102d3f8:	d9002315 	stw	r4,140(sp)
 102d3fc:	803fa80e 	bge	r16,zero,102d2a0 <_gp+0xfffef61c>
 102d400:	043fffc4 	movi	r16,-1
 102d404:	11000047 	ldb	r4,1(r2)
 102d408:	003c3706 	br	102c4e8 <_gp+0xfffee864>
 102d40c:	dac02917 	ldw	r11,164(sp)
 102d410:	00800304 	movi	r2,12
 102d414:	58800015 	stw	r2,0(r11)
 102d418:	00bfffc4 	movi	r2,-1
 102d41c:	003ea506 	br	102ceb4 <_gp+0xfffef230>

0102d420 <__sprint_r.part.0>:
 102d420:	28801917 	ldw	r2,100(r5)
 102d424:	defff604 	addi	sp,sp,-40
 102d428:	dd400515 	stw	r21,20(sp)
 102d42c:	dcc00315 	stw	r19,12(sp)
 102d430:	dfc00915 	stw	ra,36(sp)
 102d434:	df000815 	stw	fp,32(sp)
 102d438:	ddc00715 	stw	r23,28(sp)
 102d43c:	dd800615 	stw	r22,24(sp)
 102d440:	dd000415 	stw	r20,16(sp)
 102d444:	dc800215 	stw	r18,8(sp)
 102d448:	dc400115 	stw	r17,4(sp)
 102d44c:	dc000015 	stw	r16,0(sp)
 102d450:	1088000c 	andi	r2,r2,8192
 102d454:	2827883a 	mov	r19,r5
 102d458:	302b883a 	mov	r21,r6
 102d45c:	10002d26 	beq	r2,zero,102d514 <__sprint_r.part.0+0xf4>
 102d460:	30800217 	ldw	r2,8(r6)
 102d464:	35800017 	ldw	r22,0(r6)
 102d468:	10002826 	beq	r2,zero,102d50c <__sprint_r.part.0+0xec>
 102d46c:	2029883a 	mov	r20,r4
 102d470:	b5c00104 	addi	r23,r22,4
 102d474:	04bfffc4 	movi	r18,-1
 102d478:	bc400017 	ldw	r17,0(r23)
 102d47c:	b4000017 	ldw	r16,0(r22)
 102d480:	0039883a 	mov	fp,zero
 102d484:	8822d0ba 	srli	r17,r17,2
 102d488:	04400316 	blt	zero,r17,102d498 <__sprint_r.part.0+0x78>
 102d48c:	00001706 	br	102d4ec <__sprint_r.part.0+0xcc>
 102d490:	84000104 	addi	r16,r16,4
 102d494:	8f001526 	beq	r17,fp,102d4ec <__sprint_r.part.0+0xcc>
 102d498:	81400017 	ldw	r5,0(r16)
 102d49c:	a009883a 	mov	r4,r20
 102d4a0:	980d883a 	mov	r6,r19
 102d4a4:	102eb3c0 	call	102eb3c <_fputwc_r>
 102d4a8:	e7000044 	addi	fp,fp,1
 102d4ac:	14bff81e 	bne	r2,r18,102d490 <_gp+0xfffef80c>
 102d4b0:	9005883a 	mov	r2,r18
 102d4b4:	a8000215 	stw	zero,8(r21)
 102d4b8:	a8000115 	stw	zero,4(r21)
 102d4bc:	dfc00917 	ldw	ra,36(sp)
 102d4c0:	df000817 	ldw	fp,32(sp)
 102d4c4:	ddc00717 	ldw	r23,28(sp)
 102d4c8:	dd800617 	ldw	r22,24(sp)
 102d4cc:	dd400517 	ldw	r21,20(sp)
 102d4d0:	dd000417 	ldw	r20,16(sp)
 102d4d4:	dcc00317 	ldw	r19,12(sp)
 102d4d8:	dc800217 	ldw	r18,8(sp)
 102d4dc:	dc400117 	ldw	r17,4(sp)
 102d4e0:	dc000017 	ldw	r16,0(sp)
 102d4e4:	dec00a04 	addi	sp,sp,40
 102d4e8:	f800283a 	ret
 102d4ec:	a8c00217 	ldw	r3,8(r21)
 102d4f0:	8c63883a 	add	r17,r17,r17
 102d4f4:	8c63883a 	add	r17,r17,r17
 102d4f8:	1c45c83a 	sub	r2,r3,r17
 102d4fc:	a8800215 	stw	r2,8(r21)
 102d500:	b5800204 	addi	r22,r22,8
 102d504:	bdc00204 	addi	r23,r23,8
 102d508:	103fdb1e 	bne	r2,zero,102d478 <_gp+0xfffef7f4>
 102d50c:	0005883a 	mov	r2,zero
 102d510:	003fe806 	br	102d4b4 <_gp+0xfffef830>
 102d514:	10295280 	call	1029528 <__sfvwrite_r>
 102d518:	003fe606 	br	102d4b4 <_gp+0xfffef830>

0102d51c <__sprint_r>:
 102d51c:	30c00217 	ldw	r3,8(r6)
 102d520:	18000126 	beq	r3,zero,102d528 <__sprint_r+0xc>
 102d524:	102d4201 	jmpi	102d420 <__sprint_r.part.0>
 102d528:	30000115 	stw	zero,4(r6)
 102d52c:	0005883a 	mov	r2,zero
 102d530:	f800283a 	ret

0102d534 <___vfiprintf_internal_r>:
 102d534:	defeca04 	addi	sp,sp,-1240
 102d538:	dd813215 	stw	r22,1224(sp)
 102d53c:	dd013015 	stw	r20,1216(sp)
 102d540:	dfc13515 	stw	ra,1236(sp)
 102d544:	df013415 	stw	fp,1232(sp)
 102d548:	ddc13315 	stw	r23,1228(sp)
 102d54c:	dd413115 	stw	r21,1220(sp)
 102d550:	dcc12f15 	stw	r19,1212(sp)
 102d554:	dc812e15 	stw	r18,1208(sp)
 102d558:	dc412d15 	stw	r17,1204(sp)
 102d55c:	dc012c15 	stw	r16,1200(sp)
 102d560:	d9012015 	stw	r4,1152(sp)
 102d564:	d9c12115 	stw	r7,1156(sp)
 102d568:	2829883a 	mov	r20,r5
 102d56c:	302d883a 	mov	r22,r6
 102d570:	20000226 	beq	r4,zero,102d57c <___vfiprintf_internal_r+0x48>
 102d574:	20800e17 	ldw	r2,56(r4)
 102d578:	1001d326 	beq	r2,zero,102dcc8 <___vfiprintf_internal_r+0x794>
 102d57c:	a0c0030b 	ldhu	r3,12(r20)
 102d580:	1908000c 	andi	r4,r3,8192
 102d584:	1805883a 	mov	r2,r3
 102d588:	2000071e 	bne	r4,zero,102d5a8 <___vfiprintf_internal_r+0x74>
 102d58c:	a1001917 	ldw	r4,100(r20)
 102d590:	18880014 	ori	r2,r3,8192
 102d594:	00f7ffc4 	movi	r3,-8193
 102d598:	20c8703a 	and	r4,r4,r3
 102d59c:	a080030d 	sth	r2,12(r20)
 102d5a0:	1007883a 	mov	r3,r2
 102d5a4:	a1001915 	stw	r4,100(r20)
 102d5a8:	1100020c 	andi	r4,r2,8
 102d5ac:	20018926 	beq	r4,zero,102dbd4 <___vfiprintf_internal_r+0x6a0>
 102d5b0:	a1000417 	ldw	r4,16(r20)
 102d5b4:	20018726 	beq	r4,zero,102dbd4 <___vfiprintf_internal_r+0x6a0>
 102d5b8:	1080068c 	andi	r2,r2,26
 102d5bc:	01000284 	movi	r4,10
 102d5c0:	11018d26 	beq	r2,r4,102dbf8 <___vfiprintf_internal_r+0x6c4>
 102d5c4:	da810a04 	addi	r10,sp,1064
 102d5c8:	dac109c4 	addi	r11,sp,1063
 102d5cc:	070040f4 	movhi	fp,259
 102d5d0:	05c040f4 	movhi	r23,259
 102d5d4:	da811e15 	stw	r10,1144(sp)
 102d5d8:	52d5c83a 	sub	r10,r10,r11
 102d5dc:	e7106704 	addi	fp,fp,16796
 102d5e0:	bdd06304 	addi	r23,r23,16780
 102d5e4:	dac11f15 	stw	r11,1148(sp)
 102d5e8:	dec11a15 	stw	sp,1128(sp)
 102d5ec:	d8011c15 	stw	zero,1136(sp)
 102d5f0:	d8011b15 	stw	zero,1132(sp)
 102d5f4:	d8012615 	stw	zero,1176(sp)
 102d5f8:	d8012215 	stw	zero,1160(sp)
 102d5fc:	da812715 	stw	r10,1180(sp)
 102d600:	d811883a 	mov	r8,sp
 102d604:	b021883a 	mov	r16,r22
 102d608:	80800007 	ldb	r2,0(r16)
 102d60c:	10039c26 	beq	r2,zero,102e480 <___vfiprintf_internal_r+0xf4c>
 102d610:	01000944 	movi	r4,37
 102d614:	11039a26 	beq	r2,r4,102e480 <___vfiprintf_internal_r+0xf4c>
 102d618:	8005883a 	mov	r2,r16
 102d61c:	00000106 	br	102d624 <___vfiprintf_internal_r+0xf0>
 102d620:	19000326 	beq	r3,r4,102d630 <___vfiprintf_internal_r+0xfc>
 102d624:	10800044 	addi	r2,r2,1
 102d628:	10c00007 	ldb	r3,0(r2)
 102d62c:	183ffc1e 	bne	r3,zero,102d620 <_gp+0xfffef99c>
 102d630:	1425c83a 	sub	r18,r2,r16
 102d634:	1023883a 	mov	r17,r2
 102d638:	90001026 	beq	r18,zero,102d67c <___vfiprintf_internal_r+0x148>
 102d63c:	d8c11c17 	ldw	r3,1136(sp)
 102d640:	d8811b17 	ldw	r2,1132(sp)
 102d644:	44000015 	stw	r16,0(r8)
 102d648:	90c7883a 	add	r3,r18,r3
 102d64c:	10800044 	addi	r2,r2,1
 102d650:	44800115 	stw	r18,4(r8)
 102d654:	d8c11c15 	stw	r3,1136(sp)
 102d658:	d8811b15 	stw	r2,1132(sp)
 102d65c:	010001c4 	movi	r4,7
 102d660:	2080750e 	bge	r4,r2,102d838 <___vfiprintf_internal_r+0x304>
 102d664:	18039d1e 	bne	r3,zero,102e4dc <___vfiprintf_internal_r+0xfa8>
 102d668:	dac12217 	ldw	r11,1160(sp)
 102d66c:	d8011b15 	stw	zero,1132(sp)
 102d670:	d811883a 	mov	r8,sp
 102d674:	5c97883a 	add	r11,r11,r18
 102d678:	dac12215 	stw	r11,1160(sp)
 102d67c:	88800007 	ldb	r2,0(r17)
 102d680:	1002e026 	beq	r2,zero,102e204 <___vfiprintf_internal_r+0xcd0>
 102d684:	88c00047 	ldb	r3,1(r17)
 102d688:	8c000044 	addi	r16,r17,1
 102d68c:	d8011d85 	stb	zero,1142(sp)
 102d690:	000d883a 	mov	r6,zero
 102d694:	027fffc4 	movi	r9,-1
 102d698:	0027883a 	mov	r19,zero
 102d69c:	002b883a 	mov	r21,zero
 102d6a0:	01001604 	movi	r4,88
 102d6a4:	01400244 	movi	r5,9
 102d6a8:	03000a84 	movi	r12,42
 102d6ac:	01c01b04 	movi	r7,108
 102d6b0:	84000044 	addi	r16,r16,1
 102d6b4:	18bff804 	addi	r2,r3,-32
 102d6b8:	20825f36 	bltu	r4,r2,102e038 <___vfiprintf_internal_r+0xb04>
 102d6bc:	100490ba 	slli	r2,r2,2
 102d6c0:	028040f4 	movhi	r10,259
 102d6c4:	52b5b504 	addi	r10,r10,-10540
 102d6c8:	1285883a 	add	r2,r2,r10
 102d6cc:	10800017 	ldw	r2,0(r2)
 102d6d0:	1000683a 	jmp	r2
 102d6d4:	0102dea8 	cmpgeui	r4,zero,2938
 102d6d8:	0102e038 	rdprs	r4,zero,2944
 102d6dc:	0102e038 	rdprs	r4,zero,2944
 102d6e0:	0102e02c 	andhi	r4,zero,2944
 102d6e4:	0102e038 	rdprs	r4,zero,2944
 102d6e8:	0102e038 	rdprs	r4,zero,2944
 102d6ec:	0102e038 	rdprs	r4,zero,2944
 102d6f0:	0102e038 	rdprs	r4,zero,2944
 102d6f4:	0102e038 	rdprs	r4,zero,2944
 102d6f8:	0102e038 	rdprs	r4,zero,2944
 102d6fc:	0102e004 	movi	r4,2944
 102d700:	0102e020 	cmpeqi	r4,zero,2944
 102d704:	0102e038 	rdprs	r4,zero,2944
 102d708:	0102dcd8 	cmpnei	r4,zero,2931
 102d70c:	0102de38 	rdprs	r4,zero,2936
 102d710:	0102e038 	rdprs	r4,zero,2944
 102d714:	0102ddbc 	xorhi	r4,zero,2934
 102d718:	0102ddc8 	cmpgei	r4,zero,2935
 102d71c:	0102ddc8 	cmpgei	r4,zero,2935
 102d720:	0102ddc8 	cmpgei	r4,zero,2935
 102d724:	0102ddc8 	cmpgei	r4,zero,2935
 102d728:	0102ddc8 	cmpgei	r4,zero,2935
 102d72c:	0102ddc8 	cmpgei	r4,zero,2935
 102d730:	0102ddc8 	cmpgei	r4,zero,2935
 102d734:	0102ddc8 	cmpgei	r4,zero,2935
 102d738:	0102ddc8 	cmpgei	r4,zero,2935
 102d73c:	0102e038 	rdprs	r4,zero,2944
 102d740:	0102e038 	rdprs	r4,zero,2944
 102d744:	0102e038 	rdprs	r4,zero,2944
 102d748:	0102e038 	rdprs	r4,zero,2944
 102d74c:	0102e038 	rdprs	r4,zero,2944
 102d750:	0102e038 	rdprs	r4,zero,2944
 102d754:	0102e038 	rdprs	r4,zero,2944
 102d758:	0102e038 	rdprs	r4,zero,2944
 102d75c:	0102e038 	rdprs	r4,zero,2944
 102d760:	0102e038 	rdprs	r4,zero,2944
 102d764:	0102ddf4 	movhi	r4,2935
 102d768:	0102e038 	rdprs	r4,zero,2944
 102d76c:	0102e038 	rdprs	r4,zero,2944
 102d770:	0102e038 	rdprs	r4,zero,2944
 102d774:	0102e038 	rdprs	r4,zero,2944
 102d778:	0102e038 	rdprs	r4,zero,2944
 102d77c:	0102e038 	rdprs	r4,zero,2944
 102d780:	0102e038 	rdprs	r4,zero,2944
 102d784:	0102e038 	rdprs	r4,zero,2944
 102d788:	0102e038 	rdprs	r4,zero,2944
 102d78c:	0102e038 	rdprs	r4,zero,2944
 102d790:	0102d888 	cmpgei	r4,zero,2914
 102d794:	0102e038 	rdprs	r4,zero,2944
 102d798:	0102e038 	rdprs	r4,zero,2944
 102d79c:	0102e038 	rdprs	r4,zero,2944
 102d7a0:	0102e038 	rdprs	r4,zero,2944
 102d7a4:	0102e038 	rdprs	r4,zero,2944
 102d7a8:	0102d84c 	andi	r4,zero,2913
 102d7ac:	0102e038 	rdprs	r4,zero,2944
 102d7b0:	0102e038 	rdprs	r4,zero,2944
 102d7b4:	0102dd34 	movhi	r4,2932
 102d7b8:	0102e038 	rdprs	r4,zero,2944
 102d7bc:	0102e038 	rdprs	r4,zero,2944
 102d7c0:	0102e038 	rdprs	r4,zero,2944
 102d7c4:	0102e038 	rdprs	r4,zero,2944
 102d7c8:	0102e038 	rdprs	r4,zero,2944
 102d7cc:	0102e038 	rdprs	r4,zero,2944
 102d7d0:	0102e038 	rdprs	r4,zero,2944
 102d7d4:	0102e038 	rdprs	r4,zero,2944
 102d7d8:	0102e038 	rdprs	r4,zero,2944
 102d7dc:	0102e038 	rdprs	r4,zero,2944
 102d7e0:	0102dd8c 	andi	r4,zero,2934
 102d7e4:	0102df24 	muli	r4,zero,2940
 102d7e8:	0102e038 	rdprs	r4,zero,2944
 102d7ec:	0102e038 	rdprs	r4,zero,2944
 102d7f0:	0102e038 	rdprs	r4,zero,2944
 102d7f4:	0102dfac 	andhi	r4,zero,2942
 102d7f8:	0102df24 	muli	r4,zero,2940
 102d7fc:	0102e038 	rdprs	r4,zero,2944
 102d800:	0102e038 	rdprs	r4,zero,2944
 102d804:	0102dfb8 	rdprs	r4,zero,2942
 102d808:	0102e038 	rdprs	r4,zero,2944
 102d80c:	0102de78 	rdprs	r4,zero,2937
 102d810:	0102d88c 	andi	r4,zero,2914
 102d814:	0102df60 	cmpeqi	r4,zero,2941
 102d818:	0102dfa0 	cmpeqi	r4,zero,2942
 102d81c:	0102e038 	rdprs	r4,zero,2944
 102d820:	0102dec4 	movi	r4,2939
 102d824:	0102e038 	rdprs	r4,zero,2944
 102d828:	0102d850 	cmplti	r4,zero,2913
 102d82c:	0102e038 	rdprs	r4,zero,2944
 102d830:	0102e038 	rdprs	r4,zero,2944
 102d834:	0102dfc8 	cmpgei	r4,zero,2943
 102d838:	42000204 	addi	r8,r8,8
 102d83c:	dac12217 	ldw	r11,1160(sp)
 102d840:	5c97883a 	add	r11,r11,r18
 102d844:	dac12215 	stw	r11,1160(sp)
 102d848:	003f8c06 	br	102d67c <_gp+0xfffef9f8>
 102d84c:	ad400414 	ori	r21,r21,16
 102d850:	a880080c 	andi	r2,r21,32
 102d854:	10012f1e 	bne	r2,zero,102dd14 <___vfiprintf_internal_r+0x7e0>
 102d858:	a880040c 	andi	r2,r21,16
 102d85c:	1001ff1e 	bne	r2,zero,102e05c <___vfiprintf_internal_r+0xb28>
 102d860:	a880100c 	andi	r2,r21,64
 102d864:	1001fd26 	beq	r2,zero,102e05c <___vfiprintf_internal_r+0xb28>
 102d868:	da812117 	ldw	r10,1156(sp)
 102d86c:	002d883a 	mov	r22,zero
 102d870:	00800044 	movi	r2,1
 102d874:	5480000b 	ldhu	r18,0(r10)
 102d878:	52800104 	addi	r10,r10,4
 102d87c:	da812115 	stw	r10,1156(sp)
 102d880:	9009883a 	mov	r4,r18
 102d884:	00000a06 	br	102d8b0 <___vfiprintf_internal_r+0x37c>
 102d888:	ad400414 	ori	r21,r21,16
 102d88c:	a880080c 	andi	r2,r21,32
 102d890:	10011426 	beq	r2,zero,102dce4 <___vfiprintf_internal_r+0x7b0>
 102d894:	da812117 	ldw	r10,1156(sp)
 102d898:	0005883a 	mov	r2,zero
 102d89c:	54800017 	ldw	r18,0(r10)
 102d8a0:	55800117 	ldw	r22,4(r10)
 102d8a4:	52800204 	addi	r10,r10,8
 102d8a8:	da812115 	stw	r10,1156(sp)
 102d8ac:	9588b03a 	or	r4,r18,r22
 102d8b0:	d8011d85 	stb	zero,1142(sp)
 102d8b4:	4823883a 	mov	r17,r9
 102d8b8:	0019883a 	mov	r12,zero
 102d8bc:	48000216 	blt	r9,zero,102d8c8 <___vfiprintf_internal_r+0x394>
 102d8c0:	00ffdfc4 	movi	r3,-129
 102d8c4:	a8ea703a 	and	r21,r21,r3
 102d8c8:	2002221e 	bne	r4,zero,102e154 <___vfiprintf_internal_r+0xc20>
 102d8cc:	4802c726 	beq	r9,zero,102e3ec <___vfiprintf_internal_r+0xeb8>
 102d8d0:	10803fcc 	andi	r2,r2,255
 102d8d4:	00c00044 	movi	r3,1
 102d8d8:	10c24426 	beq	r2,r3,102e1ec <___vfiprintf_internal_r+0xcb8>
 102d8dc:	00c00084 	movi	r3,2
 102d8e0:	10c2cc26 	beq	r2,r3,102e414 <___vfiprintf_internal_r+0xee0>
 102d8e4:	d8c10a04 	addi	r3,sp,1064
 102d8e8:	9008d0fa 	srli	r4,r18,3
 102d8ec:	b00a977a 	slli	r5,r22,29
 102d8f0:	b02cd0fa 	srli	r22,r22,3
 102d8f4:	948001cc 	andi	r18,r18,7
 102d8f8:	90800c04 	addi	r2,r18,48
 102d8fc:	18ffffc4 	addi	r3,r3,-1
 102d900:	2924b03a 	or	r18,r5,r4
 102d904:	18800005 	stb	r2,0(r3)
 102d908:	9588b03a 	or	r4,r18,r22
 102d90c:	203ff61e 	bne	r4,zero,102d8e8 <_gp+0xfffefc64>
 102d910:	a900004c 	andi	r4,r21,1
 102d914:	d8c12415 	stw	r3,1168(sp)
 102d918:	2002fb1e 	bne	r4,zero,102e508 <___vfiprintf_internal_r+0xfd4>
 102d91c:	da811e17 	ldw	r10,1144(sp)
 102d920:	50e3c83a 	sub	r17,r10,r3
 102d924:	8825883a 	mov	r18,r17
 102d928:	8a40010e 	bge	r17,r9,102d930 <___vfiprintf_internal_r+0x3fc>
 102d92c:	4825883a 	mov	r18,r9
 102d930:	63003fcc 	andi	r12,r12,255
 102d934:	6300201c 	xori	r12,r12,128
 102d938:	633fe004 	addi	r12,r12,-128
 102d93c:	60000126 	beq	r12,zero,102d944 <___vfiprintf_internal_r+0x410>
 102d940:	94800044 	addi	r18,r18,1
 102d944:	ab80008c 	andi	r14,r21,2
 102d948:	70000126 	beq	r14,zero,102d950 <___vfiprintf_internal_r+0x41c>
 102d94c:	94800084 	addi	r18,r18,2
 102d950:	ad80210c 	andi	r22,r21,132
 102d954:	b001df1e 	bne	r22,zero,102e0d4 <___vfiprintf_internal_r+0xba0>
 102d958:	9c8fc83a 	sub	r7,r19,r18
 102d95c:	01c1dd0e 	bge	zero,r7,102e0d4 <___vfiprintf_internal_r+0xba0>
 102d960:	03000404 	movi	r12,16
 102d964:	d8811c17 	ldw	r2,1136(sp)
 102d968:	61c3920e 	bge	r12,r7,102e7b4 <___vfiprintf_internal_r+0x1280>
 102d96c:	028040f4 	movhi	r10,259
 102d970:	52906704 	addi	r10,r10,16796
 102d974:	dc012915 	stw	r16,1188(sp)
 102d978:	d9811b17 	ldw	r6,1132(sp)
 102d97c:	da812315 	stw	r10,1164(sp)
 102d980:	00c001c4 	movi	r3,7
 102d984:	da412515 	stw	r9,1172(sp)
 102d988:	db812815 	stw	r14,1184(sp)
 102d98c:	3821883a 	mov	r16,r7
 102d990:	00000506 	br	102d9a8 <___vfiprintf_internal_r+0x474>
 102d994:	31400084 	addi	r5,r6,2
 102d998:	42000204 	addi	r8,r8,8
 102d99c:	200d883a 	mov	r6,r4
 102d9a0:	843ffc04 	addi	r16,r16,-16
 102d9a4:	64000d0e 	bge	r12,r16,102d9dc <___vfiprintf_internal_r+0x4a8>
 102d9a8:	10800404 	addi	r2,r2,16
 102d9ac:	31000044 	addi	r4,r6,1
 102d9b0:	47000015 	stw	fp,0(r8)
 102d9b4:	43000115 	stw	r12,4(r8)
 102d9b8:	d8811c15 	stw	r2,1136(sp)
 102d9bc:	d9011b15 	stw	r4,1132(sp)
 102d9c0:	193ff40e 	bge	r3,r4,102d994 <_gp+0xfffefd10>
 102d9c4:	1001b51e 	bne	r2,zero,102e09c <___vfiprintf_internal_r+0xb68>
 102d9c8:	843ffc04 	addi	r16,r16,-16
 102d9cc:	000d883a 	mov	r6,zero
 102d9d0:	01400044 	movi	r5,1
 102d9d4:	d811883a 	mov	r8,sp
 102d9d8:	643ff316 	blt	r12,r16,102d9a8 <_gp+0xfffefd24>
 102d9dc:	800f883a 	mov	r7,r16
 102d9e0:	da412517 	ldw	r9,1172(sp)
 102d9e4:	db812817 	ldw	r14,1184(sp)
 102d9e8:	dc012917 	ldw	r16,1188(sp)
 102d9ec:	dac12317 	ldw	r11,1164(sp)
 102d9f0:	3887883a 	add	r3,r7,r2
 102d9f4:	41c00115 	stw	r7,4(r8)
 102d9f8:	42c00015 	stw	r11,0(r8)
 102d9fc:	d8c11c15 	stw	r3,1136(sp)
 102da00:	d9411b15 	stw	r5,1132(sp)
 102da04:	008001c4 	movi	r2,7
 102da08:	11429316 	blt	r2,r5,102e458 <___vfiprintf_internal_r+0xf24>
 102da0c:	d9011d87 	ldb	r4,1142(sp)
 102da10:	42000204 	addi	r8,r8,8
 102da14:	28800044 	addi	r2,r5,1
 102da18:	2001b31e 	bne	r4,zero,102e0e8 <___vfiprintf_internal_r+0xbb4>
 102da1c:	70000c26 	beq	r14,zero,102da50 <___vfiprintf_internal_r+0x51c>
 102da20:	d9011d04 	addi	r4,sp,1140
 102da24:	18c00084 	addi	r3,r3,2
 102da28:	41000015 	stw	r4,0(r8)
 102da2c:	01000084 	movi	r4,2
 102da30:	41000115 	stw	r4,4(r8)
 102da34:	d8c11c15 	stw	r3,1136(sp)
 102da38:	d8811b15 	stw	r2,1132(sp)
 102da3c:	010001c4 	movi	r4,7
 102da40:	20826516 	blt	r4,r2,102e3d8 <___vfiprintf_internal_r+0xea4>
 102da44:	100b883a 	mov	r5,r2
 102da48:	42000204 	addi	r8,r8,8
 102da4c:	10800044 	addi	r2,r2,1
 102da50:	01002004 	movi	r4,128
 102da54:	b1021a26 	beq	r22,r4,102e2c0 <___vfiprintf_internal_r+0xd8c>
 102da58:	4c6dc83a 	sub	r22,r9,r17
 102da5c:	0580230e 	bge	zero,r22,102daec <___vfiprintf_internal_r+0x5b8>
 102da60:	01c00404 	movi	r7,16
 102da64:	3d83300e 	bge	r7,r22,102e728 <___vfiprintf_internal_r+0x11f4>
 102da68:	008040f4 	movhi	r2,259
 102da6c:	10906304 	addi	r2,r2,16780
 102da70:	d8812315 	stw	r2,1164(sp)
 102da74:	030001c4 	movi	r12,7
 102da78:	00000506 	br	102da90 <___vfiprintf_internal_r+0x55c>
 102da7c:	28800084 	addi	r2,r5,2
 102da80:	42000204 	addi	r8,r8,8
 102da84:	200b883a 	mov	r5,r4
 102da88:	b5bffc04 	addi	r22,r22,-16
 102da8c:	3d800d0e 	bge	r7,r22,102dac4 <___vfiprintf_internal_r+0x590>
 102da90:	18c00404 	addi	r3,r3,16
 102da94:	29000044 	addi	r4,r5,1
 102da98:	45c00015 	stw	r23,0(r8)
 102da9c:	41c00115 	stw	r7,4(r8)
 102daa0:	d8c11c15 	stw	r3,1136(sp)
 102daa4:	d9011b15 	stw	r4,1132(sp)
 102daa8:	613ff40e 	bge	r12,r4,102da7c <_gp+0xfffefdf8>
 102daac:	18019b1e 	bne	r3,zero,102e11c <___vfiprintf_internal_r+0xbe8>
 102dab0:	b5bffc04 	addi	r22,r22,-16
 102dab4:	000b883a 	mov	r5,zero
 102dab8:	00800044 	movi	r2,1
 102dabc:	d811883a 	mov	r8,sp
 102dac0:	3dbff316 	blt	r7,r22,102da90 <_gp+0xfffefe0c>
 102dac4:	da812317 	ldw	r10,1164(sp)
 102dac8:	1d87883a 	add	r3,r3,r22
 102dacc:	45800115 	stw	r22,4(r8)
 102dad0:	42800015 	stw	r10,0(r8)
 102dad4:	d8c11c15 	stw	r3,1136(sp)
 102dad8:	d8811b15 	stw	r2,1132(sp)
 102dadc:	010001c4 	movi	r4,7
 102dae0:	2081dd16 	blt	r4,r2,102e258 <___vfiprintf_internal_r+0xd24>
 102dae4:	42000204 	addi	r8,r8,8
 102dae8:	10800044 	addi	r2,r2,1
 102daec:	da812417 	ldw	r10,1168(sp)
 102daf0:	1c47883a 	add	r3,r3,r17
 102daf4:	44400115 	stw	r17,4(r8)
 102daf8:	42800015 	stw	r10,0(r8)
 102dafc:	d8c11c15 	stw	r3,1136(sp)
 102db00:	d8811b15 	stw	r2,1132(sp)
 102db04:	010001c4 	movi	r4,7
 102db08:	2081dc0e 	bge	r4,r2,102e27c <___vfiprintf_internal_r+0xd48>
 102db0c:	1802611e 	bne	r3,zero,102e494 <___vfiprintf_internal_r+0xf60>
 102db10:	d8011b15 	stw	zero,1132(sp)
 102db14:	aac0010c 	andi	r11,r21,4
 102db18:	58002726 	beq	r11,zero,102dbb8 <___vfiprintf_internal_r+0x684>
 102db1c:	9ca3c83a 	sub	r17,r19,r18
 102db20:	d811883a 	mov	r8,sp
 102db24:	0443510e 	bge	zero,r17,102e86c <___vfiprintf_internal_r+0x1338>
 102db28:	01c00404 	movi	r7,16
 102db2c:	3c43320e 	bge	r7,r17,102e7f8 <___vfiprintf_internal_r+0x12c4>
 102db30:	008040f4 	movhi	r2,259
 102db34:	10906704 	addi	r2,r2,16796
 102db38:	d9011b17 	ldw	r4,1132(sp)
 102db3c:	d8812315 	stw	r2,1164(sp)
 102db40:	382d883a 	mov	r22,r7
 102db44:	054001c4 	movi	r21,7
 102db48:	00000506 	br	102db60 <___vfiprintf_internal_r+0x62c>
 102db4c:	21400084 	addi	r5,r4,2
 102db50:	42000204 	addi	r8,r8,8
 102db54:	1009883a 	mov	r4,r2
 102db58:	8c7ffc04 	addi	r17,r17,-16
 102db5c:	b4400d0e 	bge	r22,r17,102db94 <___vfiprintf_internal_r+0x660>
 102db60:	18c00404 	addi	r3,r3,16
 102db64:	20800044 	addi	r2,r4,1
 102db68:	47000015 	stw	fp,0(r8)
 102db6c:	45800115 	stw	r22,4(r8)
 102db70:	d8c11c15 	stw	r3,1136(sp)
 102db74:	d8811b15 	stw	r2,1132(sp)
 102db78:	a8bff40e 	bge	r21,r2,102db4c <_gp+0xfffefec8>
 102db7c:	1801ac1e 	bne	r3,zero,102e230 <___vfiprintf_internal_r+0xcfc>
 102db80:	8c7ffc04 	addi	r17,r17,-16
 102db84:	0009883a 	mov	r4,zero
 102db88:	01400044 	movi	r5,1
 102db8c:	d811883a 	mov	r8,sp
 102db90:	b47ff316 	blt	r22,r17,102db60 <_gp+0xfffefedc>
 102db94:	da812317 	ldw	r10,1164(sp)
 102db98:	1c47883a 	add	r3,r3,r17
 102db9c:	44400115 	stw	r17,4(r8)
 102dba0:	42800015 	stw	r10,0(r8)
 102dba4:	d8c11c15 	stw	r3,1136(sp)
 102dba8:	d9411b15 	stw	r5,1132(sp)
 102dbac:	008001c4 	movi	r2,7
 102dbb0:	1141b70e 	bge	r2,r5,102e290 <___vfiprintf_internal_r+0xd5c>
 102dbb4:	1802cf1e 	bne	r3,zero,102e6f4 <___vfiprintf_internal_r+0x11c0>
 102dbb8:	94c2ca16 	blt	r18,r19,102e6e4 <___vfiprintf_internal_r+0x11b0>
 102dbbc:	dac12217 	ldw	r11,1160(sp)
 102dbc0:	5c97883a 	add	r11,r11,r18
 102dbc4:	dac12215 	stw	r11,1160(sp)
 102dbc8:	d8011b15 	stw	zero,1132(sp)
 102dbcc:	d811883a 	mov	r8,sp
 102dbd0:	003e8d06 	br	102d608 <_gp+0xfffef984>
 102dbd4:	d9012017 	ldw	r4,1152(sp)
 102dbd8:	a00b883a 	mov	r5,r20
 102dbdc:	10270c40 	call	10270c4 <__swsetup_r>
 102dbe0:	10002c1e 	bne	r2,zero,102dc94 <___vfiprintf_internal_r+0x760>
 102dbe4:	a0c0030b 	ldhu	r3,12(r20)
 102dbe8:	01000284 	movi	r4,10
 102dbec:	1805883a 	mov	r2,r3
 102dbf0:	1080068c 	andi	r2,r2,26
 102dbf4:	113e731e 	bne	r2,r4,102d5c4 <_gp+0xfffef940>
 102dbf8:	a080038b 	ldhu	r2,14(r20)
 102dbfc:	113fffcc 	andi	r4,r2,65535
 102dc00:	2120001c 	xori	r4,r4,32768
 102dc04:	21200004 	addi	r4,r4,-32768
 102dc08:	203e6e16 	blt	r4,zero,102d5c4 <_gp+0xfffef940>
 102dc0c:	a3001917 	ldw	r12,100(r20)
 102dc10:	a2c00717 	ldw	r11,28(r20)
 102dc14:	a2800917 	ldw	r10,36(r20)
 102dc18:	d9012017 	ldw	r4,1152(sp)
 102dc1c:	d9c12117 	ldw	r7,1156(sp)
 102dc20:	02410004 	movi	r9,1024
 102dc24:	18ffff4c 	andi	r3,r3,65533
 102dc28:	da4b883a 	add	r5,sp,r9
 102dc2c:	b00d883a 	mov	r6,r22
 102dc30:	d8c1030d 	sth	r3,1036(sp)
 102dc34:	db011915 	stw	r12,1124(sp)
 102dc38:	d881038d 	sth	r2,1038(sp)
 102dc3c:	dac10715 	stw	r11,1052(sp)
 102dc40:	da810915 	stw	r10,1060(sp)
 102dc44:	dec10015 	stw	sp,1024(sp)
 102dc48:	dec10415 	stw	sp,1040(sp)
 102dc4c:	da410215 	stw	r9,1032(sp)
 102dc50:	da410515 	stw	r9,1044(sp)
 102dc54:	d8010615 	stw	zero,1048(sp)
 102dc58:	102d5340 	call	102d534 <___vfiprintf_internal_r>
 102dc5c:	1021883a 	mov	r16,r2
 102dc60:	10000416 	blt	r2,zero,102dc74 <___vfiprintf_internal_r+0x740>
 102dc64:	d9012017 	ldw	r4,1152(sp)
 102dc68:	d9410004 	addi	r5,sp,1024
 102dc6c:	1028b1c0 	call	1028b1c <_fflush_r>
 102dc70:	1002fc1e 	bne	r2,zero,102e864 <___vfiprintf_internal_r+0x1330>
 102dc74:	d881030b 	ldhu	r2,1036(sp)
 102dc78:	1080100c 	andi	r2,r2,64
 102dc7c:	10000326 	beq	r2,zero,102dc8c <___vfiprintf_internal_r+0x758>
 102dc80:	a080030b 	ldhu	r2,12(r20)
 102dc84:	10801014 	ori	r2,r2,64
 102dc88:	a080030d 	sth	r2,12(r20)
 102dc8c:	8005883a 	mov	r2,r16
 102dc90:	00000106 	br	102dc98 <___vfiprintf_internal_r+0x764>
 102dc94:	00bfffc4 	movi	r2,-1
 102dc98:	dfc13517 	ldw	ra,1236(sp)
 102dc9c:	df013417 	ldw	fp,1232(sp)
 102dca0:	ddc13317 	ldw	r23,1228(sp)
 102dca4:	dd813217 	ldw	r22,1224(sp)
 102dca8:	dd413117 	ldw	r21,1220(sp)
 102dcac:	dd013017 	ldw	r20,1216(sp)
 102dcb0:	dcc12f17 	ldw	r19,1212(sp)
 102dcb4:	dc812e17 	ldw	r18,1208(sp)
 102dcb8:	dc412d17 	ldw	r17,1204(sp)
 102dcbc:	dc012c17 	ldw	r16,1200(sp)
 102dcc0:	dec13604 	addi	sp,sp,1240
 102dcc4:	f800283a 	ret
 102dcc8:	10290c40 	call	10290c4 <__sinit>
 102dccc:	003e2b06 	br	102d57c <_gp+0xfffef8f8>
 102dcd0:	04e7c83a 	sub	r19,zero,r19
 102dcd4:	d8812115 	stw	r2,1156(sp)
 102dcd8:	ad400114 	ori	r21,r21,4
 102dcdc:	80c00007 	ldb	r3,0(r16)
 102dce0:	003e7306 	br	102d6b0 <_gp+0xfffefa2c>
 102dce4:	a880040c 	andi	r2,r21,16
 102dce8:	1000e41e 	bne	r2,zero,102e07c <___vfiprintf_internal_r+0xb48>
 102dcec:	a880100c 	andi	r2,r21,64
 102dcf0:	1000e226 	beq	r2,zero,102e07c <___vfiprintf_internal_r+0xb48>
 102dcf4:	da812117 	ldw	r10,1156(sp)
 102dcf8:	002d883a 	mov	r22,zero
 102dcfc:	0005883a 	mov	r2,zero
 102dd00:	5480000b 	ldhu	r18,0(r10)
 102dd04:	52800104 	addi	r10,r10,4
 102dd08:	da812115 	stw	r10,1156(sp)
 102dd0c:	9009883a 	mov	r4,r18
 102dd10:	003ee706 	br	102d8b0 <_gp+0xfffefc2c>
 102dd14:	da812117 	ldw	r10,1156(sp)
 102dd18:	00800044 	movi	r2,1
 102dd1c:	54800017 	ldw	r18,0(r10)
 102dd20:	55800117 	ldw	r22,4(r10)
 102dd24:	52800204 	addi	r10,r10,8
 102dd28:	da812115 	stw	r10,1156(sp)
 102dd2c:	9588b03a 	or	r4,r18,r22
 102dd30:	003edf06 	br	102d8b0 <_gp+0xfffefc2c>
 102dd34:	02c040f4 	movhi	r11,259
 102dd38:	5acfed04 	addi	r11,r11,16308
 102dd3c:	d9811d85 	stb	r6,1142(sp)
 102dd40:	dac12615 	stw	r11,1176(sp)
 102dd44:	a900080c 	andi	r4,r21,32
 102dd48:	d8812117 	ldw	r2,1156(sp)
 102dd4c:	2000a526 	beq	r4,zero,102dfe4 <___vfiprintf_internal_r+0xab0>
 102dd50:	da812117 	ldw	r10,1156(sp)
 102dd54:	14800017 	ldw	r18,0(r2)
 102dd58:	15800117 	ldw	r22,4(r2)
 102dd5c:	52800204 	addi	r10,r10,8
 102dd60:	da812115 	stw	r10,1156(sp)
 102dd64:	a880004c 	andi	r2,r21,1
 102dd68:	1001d926 	beq	r2,zero,102e4d0 <___vfiprintf_internal_r+0xf9c>
 102dd6c:	9588b03a 	or	r4,r18,r22
 102dd70:	20024426 	beq	r4,zero,102e684 <___vfiprintf_internal_r+0x1150>
 102dd74:	00800c04 	movi	r2,48
 102dd78:	d8811d05 	stb	r2,1140(sp)
 102dd7c:	d8c11d45 	stb	r3,1141(sp)
 102dd80:	ad400094 	ori	r21,r21,2
 102dd84:	00800084 	movi	r2,2
 102dd88:	003ec906 	br	102d8b0 <_gp+0xfffefc2c>
 102dd8c:	da812117 	ldw	r10,1156(sp)
 102dd90:	04800044 	movi	r18,1
 102dd94:	dac10004 	addi	r11,sp,1024
 102dd98:	50800017 	ldw	r2,0(r10)
 102dd9c:	52800104 	addi	r10,r10,4
 102dda0:	d8011d85 	stb	zero,1142(sp)
 102dda4:	d8810005 	stb	r2,1024(sp)
 102dda8:	da812115 	stw	r10,1156(sp)
 102ddac:	9023883a 	mov	r17,r18
 102ddb0:	dac12415 	stw	r11,1168(sp)
 102ddb4:	0013883a 	mov	r9,zero
 102ddb8:	003ee206 	br	102d944 <_gp+0xfffefcc0>
 102ddbc:	ad402014 	ori	r21,r21,128
 102ddc0:	80c00007 	ldb	r3,0(r16)
 102ddc4:	003e3a06 	br	102d6b0 <_gp+0xfffefa2c>
 102ddc8:	8015883a 	mov	r10,r16
 102ddcc:	0027883a 	mov	r19,zero
 102ddd0:	18bff404 	addi	r2,r3,-48
 102ddd4:	50c00007 	ldb	r3,0(r10)
 102ddd8:	9cc002a4 	muli	r19,r19,10
 102dddc:	84000044 	addi	r16,r16,1
 102dde0:	8015883a 	mov	r10,r16
 102dde4:	98a7883a 	add	r19,r19,r2
 102dde8:	18bff404 	addi	r2,r3,-48
 102ddec:	28bff92e 	bgeu	r5,r2,102ddd4 <_gp+0xffff0150>
 102ddf0:	003e3006 	br	102d6b4 <_gp+0xfffefa30>
 102ddf4:	ad400414 	ori	r21,r21,16
 102ddf8:	d9811d85 	stb	r6,1142(sp)
 102ddfc:	a880080c 	andi	r2,r21,32
 102de00:	d8c12117 	ldw	r3,1156(sp)
 102de04:	10004b26 	beq	r2,zero,102df34 <___vfiprintf_internal_r+0xa00>
 102de08:	da812117 	ldw	r10,1156(sp)
 102de0c:	18800117 	ldw	r2,4(r3)
 102de10:	1c800017 	ldw	r18,0(r3)
 102de14:	52800204 	addi	r10,r10,8
 102de18:	da812115 	stw	r10,1156(sp)
 102de1c:	102d883a 	mov	r22,r2
 102de20:	1001f116 	blt	r2,zero,102e5e8 <___vfiprintf_internal_r+0x10b4>
 102de24:	db011d83 	ldbu	r12,1142(sp)
 102de28:	4823883a 	mov	r17,r9
 102de2c:	00800044 	movi	r2,1
 102de30:	9588b03a 	or	r4,r18,r22
 102de34:	003ea106 	br	102d8bc <_gp+0xfffefc38>
 102de38:	80c00007 	ldb	r3,0(r16)
 102de3c:	82800044 	addi	r10,r16,1
 102de40:	1b027f26 	beq	r3,r12,102e840 <___vfiprintf_internal_r+0x130c>
 102de44:	18bff404 	addi	r2,r3,-48
 102de48:	5021883a 	mov	r16,r10
 102de4c:	0013883a 	mov	r9,zero
 102de50:	28be1836 	bltu	r5,r2,102d6b4 <_gp+0xfffefa30>
 102de54:	80c00007 	ldb	r3,0(r16)
 102de58:	4a4002a4 	muli	r9,r9,10
 102de5c:	84000044 	addi	r16,r16,1
 102de60:	1253883a 	add	r9,r2,r9
 102de64:	18bff404 	addi	r2,r3,-48
 102de68:	28bffa2e 	bgeu	r5,r2,102de54 <_gp+0xffff01d0>
 102de6c:	483e110e 	bge	r9,zero,102d6b4 <_gp+0xfffefa30>
 102de70:	027fffc4 	movi	r9,-1
 102de74:	003e0f06 	br	102d6b4 <_gp+0xfffefa30>
 102de78:	d9811d85 	stb	r6,1142(sp)
 102de7c:	a880080c 	andi	r2,r21,32
 102de80:	1001ee26 	beq	r2,zero,102e63c <___vfiprintf_internal_r+0x1108>
 102de84:	da812117 	ldw	r10,1156(sp)
 102de88:	dac12217 	ldw	r11,1160(sp)
 102de8c:	50800017 	ldw	r2,0(r10)
 102de90:	5807d7fa 	srai	r3,r11,31
 102de94:	52800104 	addi	r10,r10,4
 102de98:	da812115 	stw	r10,1156(sp)
 102de9c:	12c00015 	stw	r11,0(r2)
 102dea0:	10c00115 	stw	r3,4(r2)
 102dea4:	003dd806 	br	102d608 <_gp+0xfffef984>
 102dea8:	30803fcc 	andi	r2,r6,255
 102deac:	1080201c 	xori	r2,r2,128
 102deb0:	10bfe004 	addi	r2,r2,-128
 102deb4:	1001df1e 	bne	r2,zero,102e634 <___vfiprintf_internal_r+0x1100>
 102deb8:	01800804 	movi	r6,32
 102debc:	80c00007 	ldb	r3,0(r16)
 102dec0:	003dfb06 	br	102d6b0 <_gp+0xfffefa2c>
 102dec4:	da812117 	ldw	r10,1156(sp)
 102dec8:	dac12117 	ldw	r11,1156(sp)
 102decc:	d8011d85 	stb	zero,1142(sp)
 102ded0:	52800017 	ldw	r10,0(r10)
 102ded4:	5d800104 	addi	r22,r11,4
 102ded8:	da812415 	stw	r10,1168(sp)
 102dedc:	50023b26 	beq	r10,zero,102e7cc <___vfiprintf_internal_r+0x1298>
 102dee0:	d9012417 	ldw	r4,1168(sp)
 102dee4:	48021f16 	blt	r9,zero,102e764 <___vfiprintf_internal_r+0x1230>
 102dee8:	480d883a 	mov	r6,r9
 102deec:	000b883a 	mov	r5,zero
 102def0:	da012a15 	stw	r8,1192(sp)
 102def4:	da412b15 	stw	r9,1196(sp)
 102def8:	102a57c0 	call	102a57c <memchr>
 102defc:	da012a17 	ldw	r8,1192(sp)
 102df00:	da412b17 	ldw	r9,1196(sp)
 102df04:	10024726 	beq	r2,zero,102e824 <___vfiprintf_internal_r+0x12f0>
 102df08:	d8c12417 	ldw	r3,1168(sp)
 102df0c:	10e3c83a 	sub	r17,r2,r3
 102df10:	4c41f616 	blt	r9,r17,102e6ec <___vfiprintf_internal_r+0x11b8>
 102df14:	db011d83 	ldbu	r12,1142(sp)
 102df18:	dd812115 	stw	r22,1156(sp)
 102df1c:	0013883a 	mov	r9,zero
 102df20:	003e8006 	br	102d924 <_gp+0xfffefca0>
 102df24:	d9811d85 	stb	r6,1142(sp)
 102df28:	a880080c 	andi	r2,r21,32
 102df2c:	d8c12117 	ldw	r3,1156(sp)
 102df30:	103fb51e 	bne	r2,zero,102de08 <_gp+0xffff0184>
 102df34:	a880040c 	andi	r2,r21,16
 102df38:	10015e1e 	bne	r2,zero,102e4b4 <___vfiprintf_internal_r+0xf80>
 102df3c:	a880100c 	andi	r2,r21,64
 102df40:	10015c26 	beq	r2,zero,102e4b4 <___vfiprintf_internal_r+0xf80>
 102df44:	1c80000f 	ldh	r18,0(r3)
 102df48:	da812117 	ldw	r10,1156(sp)
 102df4c:	902dd7fa 	srai	r22,r18,31
 102df50:	52800104 	addi	r10,r10,4
 102df54:	da812115 	stw	r10,1156(sp)
 102df58:	b005883a 	mov	r2,r22
 102df5c:	003fb006 	br	102de20 <_gp+0xffff019c>
 102df60:	da812117 	ldw	r10,1156(sp)
 102df64:	00800c04 	movi	r2,48
 102df68:	02c040f4 	movhi	r11,259
 102df6c:	54800017 	ldw	r18,0(r10)
 102df70:	d8811d05 	stb	r2,1140(sp)
 102df74:	52800104 	addi	r10,r10,4
 102df78:	00801e04 	movi	r2,120
 102df7c:	5acff204 	addi	r11,r11,16328
 102df80:	d8811d45 	stb	r2,1141(sp)
 102df84:	002d883a 	mov	r22,zero
 102df88:	ad400094 	ori	r21,r21,2
 102df8c:	da812115 	stw	r10,1156(sp)
 102df90:	dac12615 	stw	r11,1176(sp)
 102df94:	00800084 	movi	r2,2
 102df98:	9009883a 	mov	r4,r18
 102df9c:	003e4406 	br	102d8b0 <_gp+0xfffefc2c>
 102dfa0:	ad400814 	ori	r21,r21,32
 102dfa4:	80c00007 	ldb	r3,0(r16)
 102dfa8:	003dc106 	br	102d6b0 <_gp+0xfffefa2c>
 102dfac:	ad401014 	ori	r21,r21,64
 102dfb0:	80c00007 	ldb	r3,0(r16)
 102dfb4:	003dbe06 	br	102d6b0 <_gp+0xfffefa2c>
 102dfb8:	80c00007 	ldb	r3,0(r16)
 102dfbc:	19c1de26 	beq	r3,r7,102e738 <___vfiprintf_internal_r+0x1204>
 102dfc0:	ad400414 	ori	r21,r21,16
 102dfc4:	003dba06 	br	102d6b0 <_gp+0xfffefa2c>
 102dfc8:	008040f4 	movhi	r2,259
 102dfcc:	108ff204 	addi	r2,r2,16328
 102dfd0:	d8812615 	stw	r2,1176(sp)
 102dfd4:	d9811d85 	stb	r6,1142(sp)
 102dfd8:	a900080c 	andi	r4,r21,32
 102dfdc:	d8812117 	ldw	r2,1156(sp)
 102dfe0:	203f5b1e 	bne	r4,zero,102dd50 <_gp+0xffff00cc>
 102dfe4:	a900040c 	andi	r4,r21,16
 102dfe8:	2001a826 	beq	r4,zero,102e68c <___vfiprintf_internal_r+0x1158>
 102dfec:	dac12117 	ldw	r11,1156(sp)
 102dff0:	14800017 	ldw	r18,0(r2)
 102dff4:	002d883a 	mov	r22,zero
 102dff8:	5ac00104 	addi	r11,r11,4
 102dffc:	dac12115 	stw	r11,1156(sp)
 102e000:	003f5806 	br	102dd64 <_gp+0xffff00e0>
 102e004:	da812117 	ldw	r10,1156(sp)
 102e008:	54c00017 	ldw	r19,0(r10)
 102e00c:	50800104 	addi	r2,r10,4
 102e010:	983f2f16 	blt	r19,zero,102dcd0 <_gp+0xffff004c>
 102e014:	d8812115 	stw	r2,1156(sp)
 102e018:	80c00007 	ldb	r3,0(r16)
 102e01c:	003da406 	br	102d6b0 <_gp+0xfffefa2c>
 102e020:	01800ac4 	movi	r6,43
 102e024:	80c00007 	ldb	r3,0(r16)
 102e028:	003da106 	br	102d6b0 <_gp+0xfffefa2c>
 102e02c:	ad400054 	ori	r21,r21,1
 102e030:	80c00007 	ldb	r3,0(r16)
 102e034:	003d9e06 	br	102d6b0 <_gp+0xfffefa2c>
 102e038:	d9811d85 	stb	r6,1142(sp)
 102e03c:	18007126 	beq	r3,zero,102e204 <___vfiprintf_internal_r+0xcd0>
 102e040:	04800044 	movi	r18,1
 102e044:	d8c10005 	stb	r3,1024(sp)
 102e048:	d8c10004 	addi	r3,sp,1024
 102e04c:	d8011d85 	stb	zero,1142(sp)
 102e050:	9023883a 	mov	r17,r18
 102e054:	d8c12415 	stw	r3,1168(sp)
 102e058:	003f5606 	br	102ddb4 <_gp+0xffff0130>
 102e05c:	dac12117 	ldw	r11,1156(sp)
 102e060:	002d883a 	mov	r22,zero
 102e064:	00800044 	movi	r2,1
 102e068:	5c800017 	ldw	r18,0(r11)
 102e06c:	5ac00104 	addi	r11,r11,4
 102e070:	dac12115 	stw	r11,1156(sp)
 102e074:	9009883a 	mov	r4,r18
 102e078:	003e0d06 	br	102d8b0 <_gp+0xfffefc2c>
 102e07c:	dac12117 	ldw	r11,1156(sp)
 102e080:	002d883a 	mov	r22,zero
 102e084:	0005883a 	mov	r2,zero
 102e088:	5c800017 	ldw	r18,0(r11)
 102e08c:	5ac00104 	addi	r11,r11,4
 102e090:	dac12115 	stw	r11,1156(sp)
 102e094:	9009883a 	mov	r4,r18
 102e098:	003e0506 	br	102d8b0 <_gp+0xfffefc2c>
 102e09c:	d9012017 	ldw	r4,1152(sp)
 102e0a0:	a00b883a 	mov	r5,r20
 102e0a4:	d9811a04 	addi	r6,sp,1128
 102e0a8:	d8c12a15 	stw	r3,1192(sp)
 102e0ac:	db012b15 	stw	r12,1196(sp)
 102e0b0:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e0b4:	d8c12a17 	ldw	r3,1192(sp)
 102e0b8:	db012b17 	ldw	r12,1196(sp)
 102e0bc:	1000571e 	bne	r2,zero,102e21c <___vfiprintf_internal_r+0xce8>
 102e0c0:	d9811b17 	ldw	r6,1132(sp)
 102e0c4:	d8811c17 	ldw	r2,1136(sp)
 102e0c8:	d811883a 	mov	r8,sp
 102e0cc:	31400044 	addi	r5,r6,1
 102e0d0:	003e3306 	br	102d9a0 <_gp+0xfffefd1c>
 102e0d4:	d9411b17 	ldw	r5,1132(sp)
 102e0d8:	d8c11c17 	ldw	r3,1136(sp)
 102e0dc:	28800044 	addi	r2,r5,1
 102e0e0:	d9011d87 	ldb	r4,1142(sp)
 102e0e4:	203e4d26 	beq	r4,zero,102da1c <_gp+0xfffefd98>
 102e0e8:	01000044 	movi	r4,1
 102e0ec:	d9411d84 	addi	r5,sp,1142
 102e0f0:	1907883a 	add	r3,r3,r4
 102e0f4:	41400015 	stw	r5,0(r8)
 102e0f8:	41000115 	stw	r4,4(r8)
 102e0fc:	d8c11c15 	stw	r3,1136(sp)
 102e100:	d8811b15 	stw	r2,1132(sp)
 102e104:	014001c4 	movi	r5,7
 102e108:	2880aa16 	blt	r5,r2,102e3b4 <___vfiprintf_internal_r+0xe80>
 102e10c:	100b883a 	mov	r5,r2
 102e110:	42000204 	addi	r8,r8,8
 102e114:	10800044 	addi	r2,r2,1
 102e118:	003e4006 	br	102da1c <_gp+0xfffefd98>
 102e11c:	d9012017 	ldw	r4,1152(sp)
 102e120:	a00b883a 	mov	r5,r20
 102e124:	d9811a04 	addi	r6,sp,1128
 102e128:	d9c12a15 	stw	r7,1192(sp)
 102e12c:	db012b15 	stw	r12,1196(sp)
 102e130:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e134:	d9c12a17 	ldw	r7,1192(sp)
 102e138:	db012b17 	ldw	r12,1196(sp)
 102e13c:	1000371e 	bne	r2,zero,102e21c <___vfiprintf_internal_r+0xce8>
 102e140:	d9411b17 	ldw	r5,1132(sp)
 102e144:	d8c11c17 	ldw	r3,1136(sp)
 102e148:	d811883a 	mov	r8,sp
 102e14c:	28800044 	addi	r2,r5,1
 102e150:	003e4d06 	br	102da88 <_gp+0xfffefe04>
 102e154:	10803fcc 	andi	r2,r2,255
 102e158:	00c00044 	movi	r3,1
 102e15c:	10fddf1e 	bne	r2,r3,102d8dc <_gp+0xfffefc58>
 102e160:	b000021e 	bne	r22,zero,102e16c <___vfiprintf_internal_r+0xc38>
 102e164:	00800244 	movi	r2,9
 102e168:	1480202e 	bgeu	r2,r18,102e1ec <___vfiprintf_internal_r+0xcb8>
 102e16c:	dc012515 	stw	r16,1172(sp)
 102e170:	dc410a04 	addi	r17,sp,1064
 102e174:	9021883a 	mov	r16,r18
 102e178:	da012415 	stw	r8,1168(sp)
 102e17c:	b025883a 	mov	r18,r22
 102e180:	da412315 	stw	r9,1164(sp)
 102e184:	602d883a 	mov	r22,r12
 102e188:	8009883a 	mov	r4,r16
 102e18c:	900b883a 	mov	r5,r18
 102e190:	01800284 	movi	r6,10
 102e194:	000f883a 	mov	r7,zero
 102e198:	102f7ac0 	call	102f7ac <__umoddi3>
 102e19c:	10800c04 	addi	r2,r2,48
 102e1a0:	8c7fffc4 	addi	r17,r17,-1
 102e1a4:	8009883a 	mov	r4,r16
 102e1a8:	900b883a 	mov	r5,r18
 102e1ac:	01800284 	movi	r6,10
 102e1b0:	000f883a 	mov	r7,zero
 102e1b4:	88800005 	stb	r2,0(r17)
 102e1b8:	102f1ec0 	call	102f1ec <__udivdi3>
 102e1bc:	1021883a 	mov	r16,r2
 102e1c0:	10c4b03a 	or	r2,r2,r3
 102e1c4:	1825883a 	mov	r18,r3
 102e1c8:	103fef1e 	bne	r2,zero,102e188 <_gp+0xffff0504>
 102e1cc:	da811e17 	ldw	r10,1144(sp)
 102e1d0:	da012417 	ldw	r8,1168(sp)
 102e1d4:	da412317 	ldw	r9,1164(sp)
 102e1d8:	dc412415 	stw	r17,1168(sp)
 102e1dc:	b019883a 	mov	r12,r22
 102e1e0:	dc012517 	ldw	r16,1172(sp)
 102e1e4:	5463c83a 	sub	r17,r10,r17
 102e1e8:	003dce06 	br	102d924 <_gp+0xfffefca0>
 102e1ec:	94800c04 	addi	r18,r18,48
 102e1f0:	d8c109c4 	addi	r3,sp,1063
 102e1f4:	dc8109c5 	stb	r18,1063(sp)
 102e1f8:	dc412717 	ldw	r17,1180(sp)
 102e1fc:	d8c12415 	stw	r3,1168(sp)
 102e200:	003dc806 	br	102d924 <_gp+0xfffefca0>
 102e204:	d8811c17 	ldw	r2,1136(sp)
 102e208:	10000426 	beq	r2,zero,102e21c <___vfiprintf_internal_r+0xce8>
 102e20c:	d9012017 	ldw	r4,1152(sp)
 102e210:	a00b883a 	mov	r5,r20
 102e214:	d9811a04 	addi	r6,sp,1128
 102e218:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e21c:	a080030b 	ldhu	r2,12(r20)
 102e220:	1080100c 	andi	r2,r2,64
 102e224:	103e9b1e 	bne	r2,zero,102dc94 <_gp+0xffff0010>
 102e228:	d8812217 	ldw	r2,1160(sp)
 102e22c:	003e9a06 	br	102dc98 <_gp+0xffff0014>
 102e230:	d9012017 	ldw	r4,1152(sp)
 102e234:	a00b883a 	mov	r5,r20
 102e238:	d9811a04 	addi	r6,sp,1128
 102e23c:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e240:	103ff61e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e244:	d9011b17 	ldw	r4,1132(sp)
 102e248:	d8c11c17 	ldw	r3,1136(sp)
 102e24c:	d811883a 	mov	r8,sp
 102e250:	21400044 	addi	r5,r4,1
 102e254:	003e4006 	br	102db58 <_gp+0xfffefed4>
 102e258:	1800d61e 	bne	r3,zero,102e5b4 <___vfiprintf_internal_r+0x1080>
 102e25c:	dac12417 	ldw	r11,1168(sp)
 102e260:	00800044 	movi	r2,1
 102e264:	dc400115 	stw	r17,4(sp)
 102e268:	dac00015 	stw	r11,0(sp)
 102e26c:	dc411c15 	stw	r17,1136(sp)
 102e270:	d8811b15 	stw	r2,1132(sp)
 102e274:	8807883a 	mov	r3,r17
 102e278:	d811883a 	mov	r8,sp
 102e27c:	42000204 	addi	r8,r8,8
 102e280:	aac0010c 	andi	r11,r21,4
 102e284:	58000226 	beq	r11,zero,102e290 <___vfiprintf_internal_r+0xd5c>
 102e288:	9ca3c83a 	sub	r17,r19,r18
 102e28c:	047e2616 	blt	zero,r17,102db28 <_gp+0xfffefea4>
 102e290:	94c0010e 	bge	r18,r19,102e298 <___vfiprintf_internal_r+0xd64>
 102e294:	9825883a 	mov	r18,r19
 102e298:	da812217 	ldw	r10,1160(sp)
 102e29c:	5495883a 	add	r10,r10,r18
 102e2a0:	da812215 	stw	r10,1160(sp)
 102e2a4:	183e4826 	beq	r3,zero,102dbc8 <_gp+0xfffeff44>
 102e2a8:	d9012017 	ldw	r4,1152(sp)
 102e2ac:	a00b883a 	mov	r5,r20
 102e2b0:	d9811a04 	addi	r6,sp,1128
 102e2b4:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e2b8:	103e4326 	beq	r2,zero,102dbc8 <_gp+0xfffeff44>
 102e2bc:	003fd706 	br	102e21c <_gp+0xffff0598>
 102e2c0:	9cadc83a 	sub	r22,r19,r18
 102e2c4:	05bde40e 	bge	zero,r22,102da58 <_gp+0xfffefdd4>
 102e2c8:	03000404 	movi	r12,16
 102e2cc:	6581500e 	bge	r12,r22,102e810 <___vfiprintf_internal_r+0x12dc>
 102e2d0:	008040f4 	movhi	r2,259
 102e2d4:	10906304 	addi	r2,r2,16780
 102e2d8:	d8812315 	stw	r2,1164(sp)
 102e2dc:	8005883a 	mov	r2,r16
 102e2e0:	038001c4 	movi	r14,7
 102e2e4:	b021883a 	mov	r16,r22
 102e2e8:	da412515 	stw	r9,1172(sp)
 102e2ec:	102d883a 	mov	r22,r2
 102e2f0:	00000506 	br	102e308 <___vfiprintf_internal_r+0xdd4>
 102e2f4:	29000084 	addi	r4,r5,2
 102e2f8:	42000204 	addi	r8,r8,8
 102e2fc:	100b883a 	mov	r5,r2
 102e300:	843ffc04 	addi	r16,r16,-16
 102e304:	64000d0e 	bge	r12,r16,102e33c <___vfiprintf_internal_r+0xe08>
 102e308:	18c00404 	addi	r3,r3,16
 102e30c:	28800044 	addi	r2,r5,1
 102e310:	45c00015 	stw	r23,0(r8)
 102e314:	43000115 	stw	r12,4(r8)
 102e318:	d8c11c15 	stw	r3,1136(sp)
 102e31c:	d8811b15 	stw	r2,1132(sp)
 102e320:	70bff40e 	bge	r14,r2,102e2f4 <_gp+0xffff0670>
 102e324:	1800151e 	bne	r3,zero,102e37c <___vfiprintf_internal_r+0xe48>
 102e328:	843ffc04 	addi	r16,r16,-16
 102e32c:	000b883a 	mov	r5,zero
 102e330:	01000044 	movi	r4,1
 102e334:	d811883a 	mov	r8,sp
 102e338:	643ff316 	blt	r12,r16,102e308 <_gp+0xffff0684>
 102e33c:	da412517 	ldw	r9,1172(sp)
 102e340:	b005883a 	mov	r2,r22
 102e344:	802d883a 	mov	r22,r16
 102e348:	1021883a 	mov	r16,r2
 102e34c:	da812317 	ldw	r10,1164(sp)
 102e350:	1d87883a 	add	r3,r3,r22
 102e354:	45800115 	stw	r22,4(r8)
 102e358:	42800015 	stw	r10,0(r8)
 102e35c:	d8c11c15 	stw	r3,1136(sp)
 102e360:	d9011b15 	stw	r4,1132(sp)
 102e364:	008001c4 	movi	r2,7
 102e368:	11008d16 	blt	r2,r4,102e5a0 <___vfiprintf_internal_r+0x106c>
 102e36c:	42000204 	addi	r8,r8,8
 102e370:	20800044 	addi	r2,r4,1
 102e374:	200b883a 	mov	r5,r4
 102e378:	003db706 	br	102da58 <_gp+0xfffefdd4>
 102e37c:	d9012017 	ldw	r4,1152(sp)
 102e380:	a00b883a 	mov	r5,r20
 102e384:	d9811a04 	addi	r6,sp,1128
 102e388:	db012b15 	stw	r12,1196(sp)
 102e38c:	db812a15 	stw	r14,1192(sp)
 102e390:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e394:	db012b17 	ldw	r12,1196(sp)
 102e398:	db812a17 	ldw	r14,1192(sp)
 102e39c:	103f9f1e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e3a0:	d9411b17 	ldw	r5,1132(sp)
 102e3a4:	d8c11c17 	ldw	r3,1136(sp)
 102e3a8:	d811883a 	mov	r8,sp
 102e3ac:	29000044 	addi	r4,r5,1
 102e3b0:	003fd306 	br	102e300 <_gp+0xffff067c>
 102e3b4:	18006c1e 	bne	r3,zero,102e568 <___vfiprintf_internal_r+0x1034>
 102e3b8:	70004f26 	beq	r14,zero,102e4f8 <___vfiprintf_internal_r+0xfc4>
 102e3bc:	d8811d04 	addi	r2,sp,1140
 102e3c0:	00c00084 	movi	r3,2
 102e3c4:	d8800015 	stw	r2,0(sp)
 102e3c8:	d8c00115 	stw	r3,4(sp)
 102e3cc:	2005883a 	mov	r2,r4
 102e3d0:	d811883a 	mov	r8,sp
 102e3d4:	003d9b06 	br	102da44 <_gp+0xfffefdc0>
 102e3d8:	1800571e 	bne	r3,zero,102e538 <___vfiprintf_internal_r+0x1004>
 102e3dc:	000b883a 	mov	r5,zero
 102e3e0:	00800044 	movi	r2,1
 102e3e4:	d811883a 	mov	r8,sp
 102e3e8:	003d9906 	br	102da50 <_gp+0xfffefdcc>
 102e3ec:	10803fcc 	andi	r2,r2,255
 102e3f0:	1000251e 	bne	r2,zero,102e488 <___vfiprintf_internal_r+0xf54>
 102e3f4:	a880004c 	andi	r2,r21,1
 102e3f8:	10007826 	beq	r2,zero,102e5dc <___vfiprintf_internal_r+0x10a8>
 102e3fc:	00800c04 	movi	r2,48
 102e400:	d8c109c4 	addi	r3,sp,1063
 102e404:	d88109c5 	stb	r2,1063(sp)
 102e408:	dc412717 	ldw	r17,1180(sp)
 102e40c:	d8c12415 	stw	r3,1168(sp)
 102e410:	003d4406 	br	102d924 <_gp+0xfffefca0>
 102e414:	d9012617 	ldw	r4,1176(sp)
 102e418:	dc410a04 	addi	r17,sp,1064
 102e41c:	908003cc 	andi	r2,r18,15
 102e420:	b006973a 	slli	r3,r22,28
 102e424:	2085883a 	add	r2,r4,r2
 102e428:	9024d13a 	srli	r18,r18,4
 102e42c:	10800003 	ldbu	r2,0(r2)
 102e430:	b02cd13a 	srli	r22,r22,4
 102e434:	8c7fffc4 	addi	r17,r17,-1
 102e438:	1ca4b03a 	or	r18,r3,r18
 102e43c:	88800005 	stb	r2,0(r17)
 102e440:	9584b03a 	or	r2,r18,r22
 102e444:	103ff51e 	bne	r2,zero,102e41c <_gp+0xffff0798>
 102e448:	dac11e17 	ldw	r11,1144(sp)
 102e44c:	dc412415 	stw	r17,1168(sp)
 102e450:	5c63c83a 	sub	r17,r11,r17
 102e454:	003d3306 	br	102d924 <_gp+0xfffefca0>
 102e458:	1800941e 	bne	r3,zero,102e6ac <___vfiprintf_internal_r+0x1178>
 102e45c:	d8811d87 	ldb	r2,1142(sp)
 102e460:	10006b26 	beq	r2,zero,102e610 <___vfiprintf_internal_r+0x10dc>
 102e464:	00c00044 	movi	r3,1
 102e468:	d9011d84 	addi	r4,sp,1142
 102e46c:	1805883a 	mov	r2,r3
 102e470:	d9000015 	stw	r4,0(sp)
 102e474:	d8c00115 	stw	r3,4(sp)
 102e478:	d811883a 	mov	r8,sp
 102e47c:	003f2306 	br	102e10c <_gp+0xffff0488>
 102e480:	8023883a 	mov	r17,r16
 102e484:	003c7d06 	br	102d67c <_gp+0xfffef9f8>
 102e488:	da810a04 	addi	r10,sp,1064
 102e48c:	da812415 	stw	r10,1168(sp)
 102e490:	003d2406 	br	102d924 <_gp+0xfffefca0>
 102e494:	d9012017 	ldw	r4,1152(sp)
 102e498:	a00b883a 	mov	r5,r20
 102e49c:	d9811a04 	addi	r6,sp,1128
 102e4a0:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e4a4:	103f5d1e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e4a8:	d8c11c17 	ldw	r3,1136(sp)
 102e4ac:	d811883a 	mov	r8,sp
 102e4b0:	003f7306 	br	102e280 <_gp+0xffff05fc>
 102e4b4:	1c800017 	ldw	r18,0(r3)
 102e4b8:	dac12117 	ldw	r11,1156(sp)
 102e4bc:	902dd7fa 	srai	r22,r18,31
 102e4c0:	5ac00104 	addi	r11,r11,4
 102e4c4:	dac12115 	stw	r11,1156(sp)
 102e4c8:	b005883a 	mov	r2,r22
 102e4cc:	003e5406 	br	102de20 <_gp+0xffff019c>
 102e4d0:	00800084 	movi	r2,2
 102e4d4:	9588b03a 	or	r4,r18,r22
 102e4d8:	003cf506 	br	102d8b0 <_gp+0xfffefc2c>
 102e4dc:	d9012017 	ldw	r4,1152(sp)
 102e4e0:	a00b883a 	mov	r5,r20
 102e4e4:	d9811a04 	addi	r6,sp,1128
 102e4e8:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e4ec:	103f4b1e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e4f0:	d811883a 	mov	r8,sp
 102e4f4:	003cd106 	br	102d83c <_gp+0xfffefbb8>
 102e4f8:	000b883a 	mov	r5,zero
 102e4fc:	2005883a 	mov	r2,r4
 102e500:	d811883a 	mov	r8,sp
 102e504:	003d5206 	br	102da50 <_gp+0xfffefdcc>
 102e508:	10803fcc 	andi	r2,r2,255
 102e50c:	1080201c 	xori	r2,r2,128
 102e510:	10bfe004 	addi	r2,r2,-128
 102e514:	01000c04 	movi	r4,48
 102e518:	11008e26 	beq	r2,r4,102e754 <___vfiprintf_internal_r+0x1220>
 102e51c:	da812417 	ldw	r10,1168(sp)
 102e520:	dac11e17 	ldw	r11,1144(sp)
 102e524:	193fffc5 	stb	r4,-1(r3)
 102e528:	52bfffc4 	addi	r10,r10,-1
 102e52c:	da812415 	stw	r10,1168(sp)
 102e530:	5aa3c83a 	sub	r17,r11,r10
 102e534:	003cfb06 	br	102d924 <_gp+0xfffefca0>
 102e538:	d9012017 	ldw	r4,1152(sp)
 102e53c:	a00b883a 	mov	r5,r20
 102e540:	d9811a04 	addi	r6,sp,1128
 102e544:	da412b15 	stw	r9,1196(sp)
 102e548:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e54c:	da412b17 	ldw	r9,1196(sp)
 102e550:	103f321e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e554:	d9411b17 	ldw	r5,1132(sp)
 102e558:	d8c11c17 	ldw	r3,1136(sp)
 102e55c:	d811883a 	mov	r8,sp
 102e560:	28800044 	addi	r2,r5,1
 102e564:	003d3a06 	br	102da50 <_gp+0xfffefdcc>
 102e568:	d9012017 	ldw	r4,1152(sp)
 102e56c:	a00b883a 	mov	r5,r20
 102e570:	d9811a04 	addi	r6,sp,1128
 102e574:	da412b15 	stw	r9,1196(sp)
 102e578:	db812a15 	stw	r14,1192(sp)
 102e57c:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e580:	da412b17 	ldw	r9,1196(sp)
 102e584:	db812a17 	ldw	r14,1192(sp)
 102e588:	103f241e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e58c:	d9411b17 	ldw	r5,1132(sp)
 102e590:	d8c11c17 	ldw	r3,1136(sp)
 102e594:	d811883a 	mov	r8,sp
 102e598:	28800044 	addi	r2,r5,1
 102e59c:	003d1f06 	br	102da1c <_gp+0xfffefd98>
 102e5a0:	1800781e 	bne	r3,zero,102e784 <___vfiprintf_internal_r+0x1250>
 102e5a4:	000b883a 	mov	r5,zero
 102e5a8:	00800044 	movi	r2,1
 102e5ac:	d811883a 	mov	r8,sp
 102e5b0:	003d2906 	br	102da58 <_gp+0xfffefdd4>
 102e5b4:	d9012017 	ldw	r4,1152(sp)
 102e5b8:	a00b883a 	mov	r5,r20
 102e5bc:	d9811a04 	addi	r6,sp,1128
 102e5c0:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e5c4:	103f151e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e5c8:	d8811b17 	ldw	r2,1132(sp)
 102e5cc:	d8c11c17 	ldw	r3,1136(sp)
 102e5d0:	d811883a 	mov	r8,sp
 102e5d4:	10800044 	addi	r2,r2,1
 102e5d8:	003d4406 	br	102daec <_gp+0xfffefe68>
 102e5dc:	dac10a04 	addi	r11,sp,1064
 102e5e0:	dac12415 	stw	r11,1168(sp)
 102e5e4:	003ccf06 	br	102d924 <_gp+0xfffefca0>
 102e5e8:	04a5c83a 	sub	r18,zero,r18
 102e5ec:	9004c03a 	cmpne	r2,r18,zero
 102e5f0:	05adc83a 	sub	r22,zero,r22
 102e5f4:	b0adc83a 	sub	r22,r22,r2
 102e5f8:	03000b44 	movi	r12,45
 102e5fc:	db011d85 	stb	r12,1142(sp)
 102e600:	4823883a 	mov	r17,r9
 102e604:	00800044 	movi	r2,1
 102e608:	9588b03a 	or	r4,r18,r22
 102e60c:	003cab06 	br	102d8bc <_gp+0xfffefc38>
 102e610:	000b883a 	mov	r5,zero
 102e614:	00800044 	movi	r2,1
 102e618:	d811883a 	mov	r8,sp
 102e61c:	703d0c26 	beq	r14,zero,102da50 <_gp+0xfffefdcc>
 102e620:	00c00084 	movi	r3,2
 102e624:	d9011d04 	addi	r4,sp,1140
 102e628:	d9000015 	stw	r4,0(sp)
 102e62c:	d8c00115 	stw	r3,4(sp)
 102e630:	003d0406 	br	102da44 <_gp+0xfffefdc0>
 102e634:	80c00007 	ldb	r3,0(r16)
 102e638:	003c1d06 	br	102d6b0 <_gp+0xfffefa2c>
 102e63c:	a880040c 	andi	r2,r21,16
 102e640:	1000091e 	bne	r2,zero,102e668 <___vfiprintf_internal_r+0x1134>
 102e644:	aac0100c 	andi	r11,r21,64
 102e648:	58000726 	beq	r11,zero,102e668 <___vfiprintf_internal_r+0x1134>
 102e64c:	da812117 	ldw	r10,1156(sp)
 102e650:	dac12217 	ldw	r11,1160(sp)
 102e654:	50800017 	ldw	r2,0(r10)
 102e658:	52800104 	addi	r10,r10,4
 102e65c:	da812115 	stw	r10,1156(sp)
 102e660:	12c0000d 	sth	r11,0(r2)
 102e664:	003be806 	br	102d608 <_gp+0xfffef984>
 102e668:	da812117 	ldw	r10,1156(sp)
 102e66c:	dac12217 	ldw	r11,1160(sp)
 102e670:	50800017 	ldw	r2,0(r10)
 102e674:	52800104 	addi	r10,r10,4
 102e678:	da812115 	stw	r10,1156(sp)
 102e67c:	12c00015 	stw	r11,0(r2)
 102e680:	003be106 	br	102d608 <_gp+0xfffef984>
 102e684:	00800084 	movi	r2,2
 102e688:	003c8906 	br	102d8b0 <_gp+0xfffefc2c>
 102e68c:	a900100c 	andi	r4,r21,64
 102e690:	20001f26 	beq	r4,zero,102e710 <___vfiprintf_internal_r+0x11dc>
 102e694:	da812117 	ldw	r10,1156(sp)
 102e698:	1480000b 	ldhu	r18,0(r2)
 102e69c:	002d883a 	mov	r22,zero
 102e6a0:	52800104 	addi	r10,r10,4
 102e6a4:	da812115 	stw	r10,1156(sp)
 102e6a8:	003dae06 	br	102dd64 <_gp+0xffff00e0>
 102e6ac:	d9012017 	ldw	r4,1152(sp)
 102e6b0:	a00b883a 	mov	r5,r20
 102e6b4:	d9811a04 	addi	r6,sp,1128
 102e6b8:	da412b15 	stw	r9,1196(sp)
 102e6bc:	db812a15 	stw	r14,1192(sp)
 102e6c0:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e6c4:	da412b17 	ldw	r9,1196(sp)
 102e6c8:	db812a17 	ldw	r14,1192(sp)
 102e6cc:	103ed31e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e6d0:	d9411b17 	ldw	r5,1132(sp)
 102e6d4:	d8c11c17 	ldw	r3,1136(sp)
 102e6d8:	d811883a 	mov	r8,sp
 102e6dc:	28800044 	addi	r2,r5,1
 102e6e0:	003e7f06 	br	102e0e0 <_gp+0xffff045c>
 102e6e4:	9825883a 	mov	r18,r19
 102e6e8:	003d3406 	br	102dbbc <_gp+0xfffeff38>
 102e6ec:	4823883a 	mov	r17,r9
 102e6f0:	003e0806 	br	102df14 <_gp+0xffff0290>
 102e6f4:	d9012017 	ldw	r4,1152(sp)
 102e6f8:	a00b883a 	mov	r5,r20
 102e6fc:	d9811a04 	addi	r6,sp,1128
 102e700:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e704:	103ec51e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e708:	d8c11c17 	ldw	r3,1136(sp)
 102e70c:	003ee006 	br	102e290 <_gp+0xffff060c>
 102e710:	dac12117 	ldw	r11,1156(sp)
 102e714:	14800017 	ldw	r18,0(r2)
 102e718:	002d883a 	mov	r22,zero
 102e71c:	5ac00104 	addi	r11,r11,4
 102e720:	dac12115 	stw	r11,1156(sp)
 102e724:	003d8f06 	br	102dd64 <_gp+0xffff00e0>
 102e728:	02c040f4 	movhi	r11,259
 102e72c:	5ad06304 	addi	r11,r11,16780
 102e730:	dac12315 	stw	r11,1164(sp)
 102e734:	003ce306 	br	102dac4 <_gp+0xfffefe40>
 102e738:	80c00043 	ldbu	r3,1(r16)
 102e73c:	ad400814 	ori	r21,r21,32
 102e740:	84000044 	addi	r16,r16,1
 102e744:	18c03fcc 	andi	r3,r3,255
 102e748:	18c0201c 	xori	r3,r3,128
 102e74c:	18ffe004 	addi	r3,r3,-128
 102e750:	003bd706 	br	102d6b0 <_gp+0xfffefa2c>
 102e754:	dac11e17 	ldw	r11,1144(sp)
 102e758:	d8c12417 	ldw	r3,1168(sp)
 102e75c:	58e3c83a 	sub	r17,r11,r3
 102e760:	003c7006 	br	102d924 <_gp+0xfffefca0>
 102e764:	da012a15 	stw	r8,1192(sp)
 102e768:	1022f4c0 	call	1022f4c <strlen>
 102e76c:	1023883a 	mov	r17,r2
 102e770:	db011d83 	ldbu	r12,1142(sp)
 102e774:	dd812115 	stw	r22,1156(sp)
 102e778:	0013883a 	mov	r9,zero
 102e77c:	da012a17 	ldw	r8,1192(sp)
 102e780:	003c6806 	br	102d924 <_gp+0xfffefca0>
 102e784:	d9012017 	ldw	r4,1152(sp)
 102e788:	a00b883a 	mov	r5,r20
 102e78c:	d9811a04 	addi	r6,sp,1128
 102e790:	da412b15 	stw	r9,1196(sp)
 102e794:	102d4200 	call	102d420 <__sprint_r.part.0>
 102e798:	da412b17 	ldw	r9,1196(sp)
 102e79c:	103e9f1e 	bne	r2,zero,102e21c <_gp+0xffff0598>
 102e7a0:	d9411b17 	ldw	r5,1132(sp)
 102e7a4:	d8c11c17 	ldw	r3,1136(sp)
 102e7a8:	d811883a 	mov	r8,sp
 102e7ac:	28800044 	addi	r2,r5,1
 102e7b0:	003ca906 	br	102da58 <_gp+0xfffefdd4>
 102e7b4:	d9411b17 	ldw	r5,1132(sp)
 102e7b8:	010040f4 	movhi	r4,259
 102e7bc:	21106704 	addi	r4,r4,16796
 102e7c0:	d9012315 	stw	r4,1164(sp)
 102e7c4:	29400044 	addi	r5,r5,1
 102e7c8:	003c8806 	br	102d9ec <_gp+0xfffefd68>
 102e7cc:	00800184 	movi	r2,6
 102e7d0:	1240012e 	bgeu	r2,r9,102e7d8 <___vfiprintf_internal_r+0x12a4>
 102e7d4:	1013883a 	mov	r9,r2
 102e7d8:	4823883a 	mov	r17,r9
 102e7dc:	4825883a 	mov	r18,r9
 102e7e0:	48001516 	blt	r9,zero,102e838 <___vfiprintf_internal_r+0x1304>
 102e7e4:	008040f4 	movhi	r2,259
 102e7e8:	108ff704 	addi	r2,r2,16348
 102e7ec:	dd812115 	stw	r22,1156(sp)
 102e7f0:	d8812415 	stw	r2,1168(sp)
 102e7f4:	003d6f06 	br	102ddb4 <_gp+0xffff0130>
 102e7f8:	d9411b17 	ldw	r5,1132(sp)
 102e7fc:	02c040f4 	movhi	r11,259
 102e800:	5ad06704 	addi	r11,r11,16796
 102e804:	dac12315 	stw	r11,1164(sp)
 102e808:	29400044 	addi	r5,r5,1
 102e80c:	003ce106 	br	102db94 <_gp+0xfffeff10>
 102e810:	010040f4 	movhi	r4,259
 102e814:	21106304 	addi	r4,r4,16780
 102e818:	d9012315 	stw	r4,1164(sp)
 102e81c:	1009883a 	mov	r4,r2
 102e820:	003eca06 	br	102e34c <_gp+0xffff06c8>
 102e824:	4823883a 	mov	r17,r9
 102e828:	db011d83 	ldbu	r12,1142(sp)
 102e82c:	dd812115 	stw	r22,1156(sp)
 102e830:	0013883a 	mov	r9,zero
 102e834:	003c3b06 	br	102d924 <_gp+0xfffefca0>
 102e838:	0025883a 	mov	r18,zero
 102e83c:	003fe906 	br	102e7e4 <_gp+0xffff0b60>
 102e840:	dac12117 	ldw	r11,1156(sp)
 102e844:	8005883a 	mov	r2,r16
 102e848:	5021883a 	mov	r16,r10
 102e84c:	5a400017 	ldw	r9,0(r11)
 102e850:	58c00104 	addi	r3,r11,4
 102e854:	d8c12115 	stw	r3,1156(sp)
 102e858:	48000a16 	blt	r9,zero,102e884 <___vfiprintf_internal_r+0x1350>
 102e85c:	10c00047 	ldb	r3,1(r2)
 102e860:	003b9306 	br	102d6b0 <_gp+0xfffefa2c>
 102e864:	043fffc4 	movi	r16,-1
 102e868:	003d0206 	br	102dc74 <_gp+0xfffefff0>
 102e86c:	94c0010e 	bge	r18,r19,102e874 <___vfiprintf_internal_r+0x1340>
 102e870:	9825883a 	mov	r18,r19
 102e874:	da812217 	ldw	r10,1160(sp)
 102e878:	5495883a 	add	r10,r10,r18
 102e87c:	da812215 	stw	r10,1160(sp)
 102e880:	003cd106 	br	102dbc8 <_gp+0xfffeff44>
 102e884:	027fffc4 	movi	r9,-1
 102e888:	10c00047 	ldb	r3,1(r2)
 102e88c:	003b8806 	br	102d6b0 <_gp+0xfffefa2c>

0102e890 <__vfiprintf_internal>:
 102e890:	2007883a 	mov	r3,r4
 102e894:	010040f4 	movhi	r4,259
 102e898:	21172204 	addi	r4,r4,23688
 102e89c:	21000017 	ldw	r4,0(r4)
 102e8a0:	2805883a 	mov	r2,r5
 102e8a4:	300f883a 	mov	r7,r6
 102e8a8:	180b883a 	mov	r5,r3
 102e8ac:	100d883a 	mov	r6,r2
 102e8b0:	102d5341 	jmpi	102d534 <___vfiprintf_internal_r>

0102e8b4 <_write_r>:
 102e8b4:	defffd04 	addi	sp,sp,-12
 102e8b8:	dc000015 	stw	r16,0(sp)
 102e8bc:	040040f4 	movhi	r16,259
 102e8c0:	dc400115 	stw	r17,4(sp)
 102e8c4:	841df204 	addi	r16,r16,30664
 102e8c8:	2023883a 	mov	r17,r4
 102e8cc:	2809883a 	mov	r4,r5
 102e8d0:	300b883a 	mov	r5,r6
 102e8d4:	380d883a 	mov	r6,r7
 102e8d8:	dfc00215 	stw	ra,8(sp)
 102e8dc:	80000015 	stw	zero,0(r16)
 102e8e0:	1031a6c0 	call	1031a6c <write>
 102e8e4:	00ffffc4 	movi	r3,-1
 102e8e8:	10c00526 	beq	r2,r3,102e900 <_write_r+0x4c>
 102e8ec:	dfc00217 	ldw	ra,8(sp)
 102e8f0:	dc400117 	ldw	r17,4(sp)
 102e8f4:	dc000017 	ldw	r16,0(sp)
 102e8f8:	dec00304 	addi	sp,sp,12
 102e8fc:	f800283a 	ret
 102e900:	80c00017 	ldw	r3,0(r16)
 102e904:	183ff926 	beq	r3,zero,102e8ec <_gp+0xffff0c68>
 102e908:	88c00015 	stw	r3,0(r17)
 102e90c:	003ff706 	br	102e8ec <_gp+0xffff0c68>

0102e910 <_close_r>:
 102e910:	defffd04 	addi	sp,sp,-12
 102e914:	dc000015 	stw	r16,0(sp)
 102e918:	040040f4 	movhi	r16,259
 102e91c:	dc400115 	stw	r17,4(sp)
 102e920:	841df204 	addi	r16,r16,30664
 102e924:	2023883a 	mov	r17,r4
 102e928:	2809883a 	mov	r4,r5
 102e92c:	dfc00215 	stw	ra,8(sp)
 102e930:	80000015 	stw	zero,0(r16)
 102e934:	10311e00 	call	10311e0 <close>
 102e938:	00ffffc4 	movi	r3,-1
 102e93c:	10c00526 	beq	r2,r3,102e954 <_close_r+0x44>
 102e940:	dfc00217 	ldw	ra,8(sp)
 102e944:	dc400117 	ldw	r17,4(sp)
 102e948:	dc000017 	ldw	r16,0(sp)
 102e94c:	dec00304 	addi	sp,sp,12
 102e950:	f800283a 	ret
 102e954:	80c00017 	ldw	r3,0(r16)
 102e958:	183ff926 	beq	r3,zero,102e940 <_gp+0xffff0cbc>
 102e95c:	88c00015 	stw	r3,0(r17)
 102e960:	003ff706 	br	102e940 <_gp+0xffff0cbc>

0102e964 <_calloc_r>:
 102e964:	298b383a 	mul	r5,r5,r6
 102e968:	defffe04 	addi	sp,sp,-8
 102e96c:	dc000015 	stw	r16,0(sp)
 102e970:	dfc00115 	stw	ra,4(sp)
 102e974:	1029dd40 	call	1029dd4 <_malloc_r>
 102e978:	1021883a 	mov	r16,r2
 102e97c:	10002826 	beq	r2,zero,102ea20 <_calloc_r+0xbc>
 102e980:	11bfff17 	ldw	r6,-4(r2)
 102e984:	00bfff04 	movi	r2,-4
 102e988:	00c00904 	movi	r3,36
 102e98c:	308c703a 	and	r6,r6,r2
 102e990:	308d883a 	add	r6,r6,r2
 102e994:	19801436 	bltu	r3,r6,102e9e8 <_calloc_r+0x84>
 102e998:	008004c4 	movi	r2,19
 102e99c:	11800936 	bltu	r2,r6,102e9c4 <_calloc_r+0x60>
 102e9a0:	8005883a 	mov	r2,r16
 102e9a4:	10000015 	stw	zero,0(r2)
 102e9a8:	10000115 	stw	zero,4(r2)
 102e9ac:	10000215 	stw	zero,8(r2)
 102e9b0:	8005883a 	mov	r2,r16
 102e9b4:	dfc00117 	ldw	ra,4(sp)
 102e9b8:	dc000017 	ldw	r16,0(sp)
 102e9bc:	dec00204 	addi	sp,sp,8
 102e9c0:	f800283a 	ret
 102e9c4:	80000015 	stw	zero,0(r16)
 102e9c8:	80000115 	stw	zero,4(r16)
 102e9cc:	008006c4 	movi	r2,27
 102e9d0:	11800d2e 	bgeu	r2,r6,102ea08 <_calloc_r+0xa4>
 102e9d4:	80000215 	stw	zero,8(r16)
 102e9d8:	80000315 	stw	zero,12(r16)
 102e9dc:	30c00c26 	beq	r6,r3,102ea10 <_calloc_r+0xac>
 102e9e0:	80800404 	addi	r2,r16,16
 102e9e4:	003fef06 	br	102e9a4 <_gp+0xffff0d20>
 102e9e8:	8009883a 	mov	r4,r16
 102e9ec:	000b883a 	mov	r5,zero
 102e9f0:	102a8f80 	call	102a8f8 <memset>
 102e9f4:	8005883a 	mov	r2,r16
 102e9f8:	dfc00117 	ldw	ra,4(sp)
 102e9fc:	dc000017 	ldw	r16,0(sp)
 102ea00:	dec00204 	addi	sp,sp,8
 102ea04:	f800283a 	ret
 102ea08:	80800204 	addi	r2,r16,8
 102ea0c:	003fe506 	br	102e9a4 <_gp+0xffff0d20>
 102ea10:	80000415 	stw	zero,16(r16)
 102ea14:	80800604 	addi	r2,r16,24
 102ea18:	80000515 	stw	zero,20(r16)
 102ea1c:	003fe106 	br	102e9a4 <_gp+0xffff0d20>
 102ea20:	0005883a 	mov	r2,zero
 102ea24:	003fe306 	br	102e9b4 <_gp+0xffff0d30>

0102ea28 <_fclose_r>:
 102ea28:	28003226 	beq	r5,zero,102eaf4 <_fclose_r+0xcc>
 102ea2c:	defffc04 	addi	sp,sp,-16
 102ea30:	dc400115 	stw	r17,4(sp)
 102ea34:	2023883a 	mov	r17,r4
 102ea38:	dc000015 	stw	r16,0(sp)
 102ea3c:	dfc00315 	stw	ra,12(sp)
 102ea40:	dc800215 	stw	r18,8(sp)
 102ea44:	2821883a 	mov	r16,r5
 102ea48:	10290d40 	call	10290d4 <__sfp_lock_acquire>
 102ea4c:	88000226 	beq	r17,zero,102ea58 <_fclose_r+0x30>
 102ea50:	88800e17 	ldw	r2,56(r17)
 102ea54:	10002926 	beq	r2,zero,102eafc <_fclose_r+0xd4>
 102ea58:	8080030f 	ldh	r2,12(r16)
 102ea5c:	10002226 	beq	r2,zero,102eae8 <_fclose_r+0xc0>
 102ea60:	8809883a 	mov	r4,r17
 102ea64:	800b883a 	mov	r5,r16
 102ea68:	1028b1c0 	call	1028b1c <_fflush_r>
 102ea6c:	1025883a 	mov	r18,r2
 102ea70:	80800b17 	ldw	r2,44(r16)
 102ea74:	10000426 	beq	r2,zero,102ea88 <_fclose_r+0x60>
 102ea78:	81400717 	ldw	r5,28(r16)
 102ea7c:	8809883a 	mov	r4,r17
 102ea80:	103ee83a 	callr	r2
 102ea84:	10002616 	blt	r2,zero,102eb20 <_fclose_r+0xf8>
 102ea88:	8080030b 	ldhu	r2,12(r16)
 102ea8c:	1080200c 	andi	r2,r2,128
 102ea90:	10001f1e 	bne	r2,zero,102eb10 <_fclose_r+0xe8>
 102ea94:	81400c17 	ldw	r5,48(r16)
 102ea98:	28000526 	beq	r5,zero,102eab0 <_fclose_r+0x88>
 102ea9c:	80801004 	addi	r2,r16,64
 102eaa0:	28800226 	beq	r5,r2,102eaac <_fclose_r+0x84>
 102eaa4:	8809883a 	mov	r4,r17
 102eaa8:	10292380 	call	1029238 <_free_r>
 102eaac:	80000c15 	stw	zero,48(r16)
 102eab0:	81401117 	ldw	r5,68(r16)
 102eab4:	28000326 	beq	r5,zero,102eac4 <_fclose_r+0x9c>
 102eab8:	8809883a 	mov	r4,r17
 102eabc:	10292380 	call	1029238 <_free_r>
 102eac0:	80001115 	stw	zero,68(r16)
 102eac4:	8000030d 	sth	zero,12(r16)
 102eac8:	10290d80 	call	10290d8 <__sfp_lock_release>
 102eacc:	9005883a 	mov	r2,r18
 102ead0:	dfc00317 	ldw	ra,12(sp)
 102ead4:	dc800217 	ldw	r18,8(sp)
 102ead8:	dc400117 	ldw	r17,4(sp)
 102eadc:	dc000017 	ldw	r16,0(sp)
 102eae0:	dec00404 	addi	sp,sp,16
 102eae4:	f800283a 	ret
 102eae8:	10290d80 	call	10290d8 <__sfp_lock_release>
 102eaec:	0005883a 	mov	r2,zero
 102eaf0:	003ff706 	br	102ead0 <_gp+0xffff0e4c>
 102eaf4:	0005883a 	mov	r2,zero
 102eaf8:	f800283a 	ret
 102eafc:	8809883a 	mov	r4,r17
 102eb00:	10290c40 	call	10290c4 <__sinit>
 102eb04:	8080030f 	ldh	r2,12(r16)
 102eb08:	103fd51e 	bne	r2,zero,102ea60 <_gp+0xffff0ddc>
 102eb0c:	003ff606 	br	102eae8 <_gp+0xffff0e64>
 102eb10:	81400417 	ldw	r5,16(r16)
 102eb14:	8809883a 	mov	r4,r17
 102eb18:	10292380 	call	1029238 <_free_r>
 102eb1c:	003fdd06 	br	102ea94 <_gp+0xffff0e10>
 102eb20:	04bfffc4 	movi	r18,-1
 102eb24:	003fd806 	br	102ea88 <_gp+0xffff0e04>

0102eb28 <fclose>:
 102eb28:	008040f4 	movhi	r2,259
 102eb2c:	10972204 	addi	r2,r2,23688
 102eb30:	200b883a 	mov	r5,r4
 102eb34:	11000017 	ldw	r4,0(r2)
 102eb38:	102ea281 	jmpi	102ea28 <_fclose_r>

0102eb3c <_fputwc_r>:
 102eb3c:	3080030b 	ldhu	r2,12(r6)
 102eb40:	defff804 	addi	sp,sp,-32
 102eb44:	dcc00415 	stw	r19,16(sp)
 102eb48:	dc800315 	stw	r18,12(sp)
 102eb4c:	dc000115 	stw	r16,4(sp)
 102eb50:	dfc00715 	stw	ra,28(sp)
 102eb54:	dd400615 	stw	r21,24(sp)
 102eb58:	dd000515 	stw	r20,20(sp)
 102eb5c:	dc400215 	stw	r17,8(sp)
 102eb60:	10c8000c 	andi	r3,r2,8192
 102eb64:	3021883a 	mov	r16,r6
 102eb68:	2027883a 	mov	r19,r4
 102eb6c:	2825883a 	mov	r18,r5
 102eb70:	1800051e 	bne	r3,zero,102eb88 <_fputwc_r+0x4c>
 102eb74:	30c01917 	ldw	r3,100(r6)
 102eb78:	10880014 	ori	r2,r2,8192
 102eb7c:	3080030d 	sth	r2,12(r6)
 102eb80:	18880014 	ori	r2,r3,8192
 102eb84:	30801915 	stw	r2,100(r6)
 102eb88:	1029bc40 	call	1029bc4 <__locale_mb_cur_max>
 102eb8c:	00c00044 	movi	r3,1
 102eb90:	10c03e26 	beq	r2,r3,102ec8c <_fputwc_r+0x150>
 102eb94:	9809883a 	mov	r4,r19
 102eb98:	d80b883a 	mov	r5,sp
 102eb9c:	900d883a 	mov	r6,r18
 102eba0:	81c01704 	addi	r7,r16,92
 102eba4:	102efec0 	call	102efec <_wcrtomb_r>
 102eba8:	1029883a 	mov	r20,r2
 102ebac:	00bfffc4 	movi	r2,-1
 102ebb0:	a0802026 	beq	r20,r2,102ec34 <_fputwc_r+0xf8>
 102ebb4:	d9400003 	ldbu	r5,0(sp)
 102ebb8:	a0001c26 	beq	r20,zero,102ec2c <_fputwc_r+0xf0>
 102ebbc:	0023883a 	mov	r17,zero
 102ebc0:	05400284 	movi	r21,10
 102ebc4:	00000906 	br	102ebec <_fputwc_r+0xb0>
 102ebc8:	80800017 	ldw	r2,0(r16)
 102ebcc:	11400005 	stb	r5,0(r2)
 102ebd0:	80c00017 	ldw	r3,0(r16)
 102ebd4:	18c00044 	addi	r3,r3,1
 102ebd8:	80c00015 	stw	r3,0(r16)
 102ebdc:	8c400044 	addi	r17,r17,1
 102ebe0:	dc45883a 	add	r2,sp,r17
 102ebe4:	8d00112e 	bgeu	r17,r20,102ec2c <_fputwc_r+0xf0>
 102ebe8:	11400003 	ldbu	r5,0(r2)
 102ebec:	80c00217 	ldw	r3,8(r16)
 102ebf0:	18ffffc4 	addi	r3,r3,-1
 102ebf4:	80c00215 	stw	r3,8(r16)
 102ebf8:	183ff30e 	bge	r3,zero,102ebc8 <_gp+0xffff0f44>
 102ebfc:	80800617 	ldw	r2,24(r16)
 102ec00:	18801916 	blt	r3,r2,102ec68 <_fputwc_r+0x12c>
 102ec04:	80800017 	ldw	r2,0(r16)
 102ec08:	11400005 	stb	r5,0(r2)
 102ec0c:	80800017 	ldw	r2,0(r16)
 102ec10:	10c00003 	ldbu	r3,0(r2)
 102ec14:	10800044 	addi	r2,r2,1
 102ec18:	1d402326 	beq	r3,r21,102eca8 <_fputwc_r+0x16c>
 102ec1c:	80800015 	stw	r2,0(r16)
 102ec20:	8c400044 	addi	r17,r17,1
 102ec24:	dc45883a 	add	r2,sp,r17
 102ec28:	8d3fef36 	bltu	r17,r20,102ebe8 <_gp+0xffff0f64>
 102ec2c:	9005883a 	mov	r2,r18
 102ec30:	00000406 	br	102ec44 <_fputwc_r+0x108>
 102ec34:	80c0030b 	ldhu	r3,12(r16)
 102ec38:	a005883a 	mov	r2,r20
 102ec3c:	18c01014 	ori	r3,r3,64
 102ec40:	80c0030d 	sth	r3,12(r16)
 102ec44:	dfc00717 	ldw	ra,28(sp)
 102ec48:	dd400617 	ldw	r21,24(sp)
 102ec4c:	dd000517 	ldw	r20,20(sp)
 102ec50:	dcc00417 	ldw	r19,16(sp)
 102ec54:	dc800317 	ldw	r18,12(sp)
 102ec58:	dc400217 	ldw	r17,8(sp)
 102ec5c:	dc000117 	ldw	r16,4(sp)
 102ec60:	dec00804 	addi	sp,sp,32
 102ec64:	f800283a 	ret
 102ec68:	9809883a 	mov	r4,r19
 102ec6c:	29403fcc 	andi	r5,r5,255
 102ec70:	800d883a 	mov	r6,r16
 102ec74:	102ee7c0 	call	102ee7c <__swbuf_r>
 102ec78:	10bfffe0 	cmpeqi	r2,r2,-1
 102ec7c:	10803fcc 	andi	r2,r2,255
 102ec80:	103fd626 	beq	r2,zero,102ebdc <_gp+0xffff0f58>
 102ec84:	00bfffc4 	movi	r2,-1
 102ec88:	003fee06 	br	102ec44 <_gp+0xffff0fc0>
 102ec8c:	90ffffc4 	addi	r3,r18,-1
 102ec90:	01003f84 	movi	r4,254
 102ec94:	20ffbf36 	bltu	r4,r3,102eb94 <_gp+0xffff0f10>
 102ec98:	900b883a 	mov	r5,r18
 102ec9c:	dc800005 	stb	r18,0(sp)
 102eca0:	1029883a 	mov	r20,r2
 102eca4:	003fc506 	br	102ebbc <_gp+0xffff0f38>
 102eca8:	9809883a 	mov	r4,r19
 102ecac:	a80b883a 	mov	r5,r21
 102ecb0:	800d883a 	mov	r6,r16
 102ecb4:	102ee7c0 	call	102ee7c <__swbuf_r>
 102ecb8:	10bfffe0 	cmpeqi	r2,r2,-1
 102ecbc:	003fef06 	br	102ec7c <_gp+0xffff0ff8>

0102ecc0 <fputwc>:
 102ecc0:	defffc04 	addi	sp,sp,-16
 102ecc4:	dc000115 	stw	r16,4(sp)
 102ecc8:	040040f4 	movhi	r16,259
 102eccc:	84172204 	addi	r16,r16,23688
 102ecd0:	dc400215 	stw	r17,8(sp)
 102ecd4:	2023883a 	mov	r17,r4
 102ecd8:	81000017 	ldw	r4,0(r16)
 102ecdc:	dfc00315 	stw	ra,12(sp)
 102ece0:	280d883a 	mov	r6,r5
 102ece4:	20000626 	beq	r4,zero,102ed00 <fputwc+0x40>
 102ece8:	20800e17 	ldw	r2,56(r4)
 102ecec:	1000041e 	bne	r2,zero,102ed00 <fputwc+0x40>
 102ecf0:	d9400015 	stw	r5,0(sp)
 102ecf4:	10290c40 	call	10290c4 <__sinit>
 102ecf8:	81000017 	ldw	r4,0(r16)
 102ecfc:	d9800017 	ldw	r6,0(sp)
 102ed00:	880b883a 	mov	r5,r17
 102ed04:	dfc00317 	ldw	ra,12(sp)
 102ed08:	dc400217 	ldw	r17,8(sp)
 102ed0c:	dc000117 	ldw	r16,4(sp)
 102ed10:	dec00404 	addi	sp,sp,16
 102ed14:	102eb3c1 	jmpi	102eb3c <_fputwc_r>

0102ed18 <_fstat_r>:
 102ed18:	defffd04 	addi	sp,sp,-12
 102ed1c:	dc000015 	stw	r16,0(sp)
 102ed20:	040040f4 	movhi	r16,259
 102ed24:	dc400115 	stw	r17,4(sp)
 102ed28:	841df204 	addi	r16,r16,30664
 102ed2c:	2023883a 	mov	r17,r4
 102ed30:	2809883a 	mov	r4,r5
 102ed34:	300b883a 	mov	r5,r6
 102ed38:	dfc00215 	stw	ra,8(sp)
 102ed3c:	80000015 	stw	zero,0(r16)
 102ed40:	103132c0 	call	103132c <fstat>
 102ed44:	00ffffc4 	movi	r3,-1
 102ed48:	10c00526 	beq	r2,r3,102ed60 <_fstat_r+0x48>
 102ed4c:	dfc00217 	ldw	ra,8(sp)
 102ed50:	dc400117 	ldw	r17,4(sp)
 102ed54:	dc000017 	ldw	r16,0(sp)
 102ed58:	dec00304 	addi	sp,sp,12
 102ed5c:	f800283a 	ret
 102ed60:	80c00017 	ldw	r3,0(r16)
 102ed64:	183ff926 	beq	r3,zero,102ed4c <_gp+0xffff10c8>
 102ed68:	88c00015 	stw	r3,0(r17)
 102ed6c:	003ff706 	br	102ed4c <_gp+0xffff10c8>

0102ed70 <_isatty_r>:
 102ed70:	defffd04 	addi	sp,sp,-12
 102ed74:	dc000015 	stw	r16,0(sp)
 102ed78:	040040f4 	movhi	r16,259
 102ed7c:	dc400115 	stw	r17,4(sp)
 102ed80:	841df204 	addi	r16,r16,30664
 102ed84:	2023883a 	mov	r17,r4
 102ed88:	2809883a 	mov	r4,r5
 102ed8c:	dfc00215 	stw	ra,8(sp)
 102ed90:	80000015 	stw	zero,0(r16)
 102ed94:	103142c0 	call	103142c <isatty>
 102ed98:	00ffffc4 	movi	r3,-1
 102ed9c:	10c00526 	beq	r2,r3,102edb4 <_isatty_r+0x44>
 102eda0:	dfc00217 	ldw	ra,8(sp)
 102eda4:	dc400117 	ldw	r17,4(sp)
 102eda8:	dc000017 	ldw	r16,0(sp)
 102edac:	dec00304 	addi	sp,sp,12
 102edb0:	f800283a 	ret
 102edb4:	80c00017 	ldw	r3,0(r16)
 102edb8:	183ff926 	beq	r3,zero,102eda0 <_gp+0xffff111c>
 102edbc:	88c00015 	stw	r3,0(r17)
 102edc0:	003ff706 	br	102eda0 <_gp+0xffff111c>

0102edc4 <_lseek_r>:
 102edc4:	defffd04 	addi	sp,sp,-12
 102edc8:	dc000015 	stw	r16,0(sp)
 102edcc:	040040f4 	movhi	r16,259
 102edd0:	dc400115 	stw	r17,4(sp)
 102edd4:	841df204 	addi	r16,r16,30664
 102edd8:	2023883a 	mov	r17,r4
 102eddc:	2809883a 	mov	r4,r5
 102ede0:	300b883a 	mov	r5,r6
 102ede4:	380d883a 	mov	r6,r7
 102ede8:	dfc00215 	stw	ra,8(sp)
 102edec:	80000015 	stw	zero,0(r16)
 102edf0:	10316040 	call	1031604 <lseek>
 102edf4:	00ffffc4 	movi	r3,-1
 102edf8:	10c00526 	beq	r2,r3,102ee10 <_lseek_r+0x4c>
 102edfc:	dfc00217 	ldw	ra,8(sp)
 102ee00:	dc400117 	ldw	r17,4(sp)
 102ee04:	dc000017 	ldw	r16,0(sp)
 102ee08:	dec00304 	addi	sp,sp,12
 102ee0c:	f800283a 	ret
 102ee10:	80c00017 	ldw	r3,0(r16)
 102ee14:	183ff926 	beq	r3,zero,102edfc <_gp+0xffff1178>
 102ee18:	88c00015 	stw	r3,0(r17)
 102ee1c:	003ff706 	br	102edfc <_gp+0xffff1178>

0102ee20 <_read_r>:
 102ee20:	defffd04 	addi	sp,sp,-12
 102ee24:	dc000015 	stw	r16,0(sp)
 102ee28:	040040f4 	movhi	r16,259
 102ee2c:	dc400115 	stw	r17,4(sp)
 102ee30:	841df204 	addi	r16,r16,30664
 102ee34:	2023883a 	mov	r17,r4
 102ee38:	2809883a 	mov	r4,r5
 102ee3c:	300b883a 	mov	r5,r6
 102ee40:	380d883a 	mov	r6,r7
 102ee44:	dfc00215 	stw	ra,8(sp)
 102ee48:	80000015 	stw	zero,0(r16)
 102ee4c:	10317e00 	call	10317e0 <read>
 102ee50:	00ffffc4 	movi	r3,-1
 102ee54:	10c00526 	beq	r2,r3,102ee6c <_read_r+0x4c>
 102ee58:	dfc00217 	ldw	ra,8(sp)
 102ee5c:	dc400117 	ldw	r17,4(sp)
 102ee60:	dc000017 	ldw	r16,0(sp)
 102ee64:	dec00304 	addi	sp,sp,12
 102ee68:	f800283a 	ret
 102ee6c:	80c00017 	ldw	r3,0(r16)
 102ee70:	183ff926 	beq	r3,zero,102ee58 <_gp+0xffff11d4>
 102ee74:	88c00015 	stw	r3,0(r17)
 102ee78:	003ff706 	br	102ee58 <_gp+0xffff11d4>

0102ee7c <__swbuf_r>:
 102ee7c:	defffc04 	addi	sp,sp,-16
 102ee80:	dc800215 	stw	r18,8(sp)
 102ee84:	dc400115 	stw	r17,4(sp)
 102ee88:	dc000015 	stw	r16,0(sp)
 102ee8c:	dfc00315 	stw	ra,12(sp)
 102ee90:	2025883a 	mov	r18,r4
 102ee94:	2823883a 	mov	r17,r5
 102ee98:	3021883a 	mov	r16,r6
 102ee9c:	20000226 	beq	r4,zero,102eea8 <__swbuf_r+0x2c>
 102eea0:	20800e17 	ldw	r2,56(r4)
 102eea4:	10004126 	beq	r2,zero,102efac <__swbuf_r+0x130>
 102eea8:	80c00617 	ldw	r3,24(r16)
 102eeac:	8180030b 	ldhu	r6,12(r16)
 102eeb0:	80c00215 	stw	r3,8(r16)
 102eeb4:	30c0020c 	andi	r3,r6,8
 102eeb8:	18003526 	beq	r3,zero,102ef90 <__swbuf_r+0x114>
 102eebc:	80c00417 	ldw	r3,16(r16)
 102eec0:	18003326 	beq	r3,zero,102ef90 <__swbuf_r+0x114>
 102eec4:	3088000c 	andi	r2,r6,8192
 102eec8:	8c403fcc 	andi	r17,r17,255
 102eecc:	10001726 	beq	r2,zero,102ef2c <__swbuf_r+0xb0>
 102eed0:	80800017 	ldw	r2,0(r16)
 102eed4:	81000517 	ldw	r4,20(r16)
 102eed8:	10c7c83a 	sub	r3,r2,r3
 102eedc:	19001d0e 	bge	r3,r4,102ef54 <__swbuf_r+0xd8>
 102eee0:	18c00044 	addi	r3,r3,1
 102eee4:	81400217 	ldw	r5,8(r16)
 102eee8:	11000044 	addi	r4,r2,1
 102eeec:	81000015 	stw	r4,0(r16)
 102eef0:	297fffc4 	addi	r5,r5,-1
 102eef4:	81400215 	stw	r5,8(r16)
 102eef8:	14400005 	stb	r17,0(r2)
 102eefc:	80800517 	ldw	r2,20(r16)
 102ef00:	10c01d26 	beq	r2,r3,102ef78 <__swbuf_r+0xfc>
 102ef04:	8080030b 	ldhu	r2,12(r16)
 102ef08:	1080004c 	andi	r2,r2,1
 102ef0c:	1000181e 	bne	r2,zero,102ef70 <__swbuf_r+0xf4>
 102ef10:	8805883a 	mov	r2,r17
 102ef14:	dfc00317 	ldw	ra,12(sp)
 102ef18:	dc800217 	ldw	r18,8(sp)
 102ef1c:	dc400117 	ldw	r17,4(sp)
 102ef20:	dc000017 	ldw	r16,0(sp)
 102ef24:	dec00404 	addi	sp,sp,16
 102ef28:	f800283a 	ret
 102ef2c:	81001917 	ldw	r4,100(r16)
 102ef30:	00b7ffc4 	movi	r2,-8193
 102ef34:	31880014 	ori	r6,r6,8192
 102ef38:	2084703a 	and	r2,r4,r2
 102ef3c:	80801915 	stw	r2,100(r16)
 102ef40:	80800017 	ldw	r2,0(r16)
 102ef44:	81000517 	ldw	r4,20(r16)
 102ef48:	8180030d 	sth	r6,12(r16)
 102ef4c:	10c7c83a 	sub	r3,r2,r3
 102ef50:	193fe316 	blt	r3,r4,102eee0 <_gp+0xffff125c>
 102ef54:	9009883a 	mov	r4,r18
 102ef58:	800b883a 	mov	r5,r16
 102ef5c:	1028b1c0 	call	1028b1c <_fflush_r>
 102ef60:	1000091e 	bne	r2,zero,102ef88 <__swbuf_r+0x10c>
 102ef64:	80800017 	ldw	r2,0(r16)
 102ef68:	00c00044 	movi	r3,1
 102ef6c:	003fdd06 	br	102eee4 <_gp+0xffff1260>
 102ef70:	00800284 	movi	r2,10
 102ef74:	88bfe61e 	bne	r17,r2,102ef10 <_gp+0xffff128c>
 102ef78:	9009883a 	mov	r4,r18
 102ef7c:	800b883a 	mov	r5,r16
 102ef80:	1028b1c0 	call	1028b1c <_fflush_r>
 102ef84:	103fe226 	beq	r2,zero,102ef10 <_gp+0xffff128c>
 102ef88:	00bfffc4 	movi	r2,-1
 102ef8c:	003fe106 	br	102ef14 <_gp+0xffff1290>
 102ef90:	9009883a 	mov	r4,r18
 102ef94:	800b883a 	mov	r5,r16
 102ef98:	10270c40 	call	10270c4 <__swsetup_r>
 102ef9c:	1000051e 	bne	r2,zero,102efb4 <__swbuf_r+0x138>
 102efa0:	8180030b 	ldhu	r6,12(r16)
 102efa4:	80c00417 	ldw	r3,16(r16)
 102efa8:	003fc606 	br	102eec4 <_gp+0xffff1240>
 102efac:	10290c40 	call	10290c4 <__sinit>
 102efb0:	003fbd06 	br	102eea8 <_gp+0xffff1224>
 102efb4:	80c0030b 	ldhu	r3,12(r16)
 102efb8:	00bfffc4 	movi	r2,-1
 102efbc:	18c01014 	ori	r3,r3,64
 102efc0:	80c0030d 	sth	r3,12(r16)
 102efc4:	00c00244 	movi	r3,9
 102efc8:	90c00015 	stw	r3,0(r18)
 102efcc:	003fd106 	br	102ef14 <_gp+0xffff1290>

0102efd0 <__swbuf>:
 102efd0:	00c040f4 	movhi	r3,259
 102efd4:	18d72204 	addi	r3,r3,23688
 102efd8:	2005883a 	mov	r2,r4
 102efdc:	19000017 	ldw	r4,0(r3)
 102efe0:	280d883a 	mov	r6,r5
 102efe4:	100b883a 	mov	r5,r2
 102efe8:	102ee7c1 	jmpi	102ee7c <__swbuf_r>

0102efec <_wcrtomb_r>:
 102efec:	defff604 	addi	sp,sp,-40
 102eff0:	008040f4 	movhi	r2,259
 102eff4:	dc800815 	stw	r18,32(sp)
 102eff8:	dc400715 	stw	r17,28(sp)
 102effc:	dc000615 	stw	r16,24(sp)
 102f000:	10972604 	addi	r2,r2,23704
 102f004:	dfc00915 	stw	ra,36(sp)
 102f008:	2021883a 	mov	r16,r4
 102f00c:	3823883a 	mov	r17,r7
 102f010:	14800017 	ldw	r18,0(r2)
 102f014:	28001426 	beq	r5,zero,102f068 <_wcrtomb_r+0x7c>
 102f018:	d9400415 	stw	r5,16(sp)
 102f01c:	d9800515 	stw	r6,20(sp)
 102f020:	1029bb80 	call	1029bb8 <__locale_charset>
 102f024:	d9400417 	ldw	r5,16(sp)
 102f028:	d9800517 	ldw	r6,20(sp)
 102f02c:	8009883a 	mov	r4,r16
 102f030:	dc400015 	stw	r17,0(sp)
 102f034:	100f883a 	mov	r7,r2
 102f038:	903ee83a 	callr	r18
 102f03c:	00ffffc4 	movi	r3,-1
 102f040:	10c0031e 	bne	r2,r3,102f050 <_wcrtomb_r+0x64>
 102f044:	88000015 	stw	zero,0(r17)
 102f048:	00c02284 	movi	r3,138
 102f04c:	80c00015 	stw	r3,0(r16)
 102f050:	dfc00917 	ldw	ra,36(sp)
 102f054:	dc800817 	ldw	r18,32(sp)
 102f058:	dc400717 	ldw	r17,28(sp)
 102f05c:	dc000617 	ldw	r16,24(sp)
 102f060:	dec00a04 	addi	sp,sp,40
 102f064:	f800283a 	ret
 102f068:	1029bb80 	call	1029bb8 <__locale_charset>
 102f06c:	8009883a 	mov	r4,r16
 102f070:	dc400015 	stw	r17,0(sp)
 102f074:	d9400104 	addi	r5,sp,4
 102f078:	000d883a 	mov	r6,zero
 102f07c:	100f883a 	mov	r7,r2
 102f080:	903ee83a 	callr	r18
 102f084:	003fed06 	br	102f03c <_gp+0xffff13b8>

0102f088 <wcrtomb>:
 102f088:	defff504 	addi	sp,sp,-44
 102f08c:	dc400515 	stw	r17,20(sp)
 102f090:	dc000415 	stw	r16,16(sp)
 102f094:	dfc00a15 	stw	ra,40(sp)
 102f098:	dd400915 	stw	r21,36(sp)
 102f09c:	dd000815 	stw	r20,32(sp)
 102f0a0:	dcc00715 	stw	r19,28(sp)
 102f0a4:	dc800615 	stw	r18,24(sp)
 102f0a8:	2021883a 	mov	r16,r4
 102f0ac:	3023883a 	mov	r17,r6
 102f0b0:	20001d26 	beq	r4,zero,102f128 <wcrtomb+0xa0>
 102f0b4:	048040f4 	movhi	r18,259
 102f0b8:	94972204 	addi	r18,r18,23688
 102f0bc:	008040f4 	movhi	r2,259
 102f0c0:	95400017 	ldw	r21,0(r18)
 102f0c4:	10972604 	addi	r2,r2,23704
 102f0c8:	15000017 	ldw	r20,0(r2)
 102f0cc:	2827883a 	mov	r19,r5
 102f0d0:	1029bb80 	call	1029bb8 <__locale_charset>
 102f0d4:	a809883a 	mov	r4,r21
 102f0d8:	dc400015 	stw	r17,0(sp)
 102f0dc:	800b883a 	mov	r5,r16
 102f0e0:	980d883a 	mov	r6,r19
 102f0e4:	100f883a 	mov	r7,r2
 102f0e8:	a03ee83a 	callr	r20
 102f0ec:	00ffffc4 	movi	r3,-1
 102f0f0:	10c0041e 	bne	r2,r3,102f104 <wcrtomb+0x7c>
 102f0f4:	90c00017 	ldw	r3,0(r18)
 102f0f8:	01002284 	movi	r4,138
 102f0fc:	88000015 	stw	zero,0(r17)
 102f100:	19000015 	stw	r4,0(r3)
 102f104:	dfc00a17 	ldw	ra,40(sp)
 102f108:	dd400917 	ldw	r21,36(sp)
 102f10c:	dd000817 	ldw	r20,32(sp)
 102f110:	dcc00717 	ldw	r19,28(sp)
 102f114:	dc800617 	ldw	r18,24(sp)
 102f118:	dc400517 	ldw	r17,20(sp)
 102f11c:	dc000417 	ldw	r16,16(sp)
 102f120:	dec00b04 	addi	sp,sp,44
 102f124:	f800283a 	ret
 102f128:	048040f4 	movhi	r18,259
 102f12c:	94972204 	addi	r18,r18,23688
 102f130:	008040f4 	movhi	r2,259
 102f134:	94c00017 	ldw	r19,0(r18)
 102f138:	10972604 	addi	r2,r2,23704
 102f13c:	14000017 	ldw	r16,0(r2)
 102f140:	1029bb80 	call	1029bb8 <__locale_charset>
 102f144:	9809883a 	mov	r4,r19
 102f148:	dc400015 	stw	r17,0(sp)
 102f14c:	d9400104 	addi	r5,sp,4
 102f150:	000d883a 	mov	r6,zero
 102f154:	100f883a 	mov	r7,r2
 102f158:	803ee83a 	callr	r16
 102f15c:	003fe306 	br	102f0ec <_gp+0xffff1468>

0102f160 <__ascii_wctomb>:
 102f160:	28000526 	beq	r5,zero,102f178 <__ascii_wctomb+0x18>
 102f164:	00803fc4 	movi	r2,255
 102f168:	11800536 	bltu	r2,r6,102f180 <__ascii_wctomb+0x20>
 102f16c:	29800005 	stb	r6,0(r5)
 102f170:	00800044 	movi	r2,1
 102f174:	f800283a 	ret
 102f178:	0005883a 	mov	r2,zero
 102f17c:	f800283a 	ret
 102f180:	00802284 	movi	r2,138
 102f184:	20800015 	stw	r2,0(r4)
 102f188:	00bfffc4 	movi	r2,-1
 102f18c:	f800283a 	ret

0102f190 <_wctomb_r>:
 102f190:	008040f4 	movhi	r2,259
 102f194:	defff904 	addi	sp,sp,-28
 102f198:	10972604 	addi	r2,r2,23704
 102f19c:	dfc00615 	stw	ra,24(sp)
 102f1a0:	dc400515 	stw	r17,20(sp)
 102f1a4:	dc000415 	stw	r16,16(sp)
 102f1a8:	3823883a 	mov	r17,r7
 102f1ac:	14000017 	ldw	r16,0(r2)
 102f1b0:	d9000115 	stw	r4,4(sp)
 102f1b4:	d9400215 	stw	r5,8(sp)
 102f1b8:	d9800315 	stw	r6,12(sp)
 102f1bc:	1029bb80 	call	1029bb8 <__locale_charset>
 102f1c0:	d9000117 	ldw	r4,4(sp)
 102f1c4:	d9400217 	ldw	r5,8(sp)
 102f1c8:	d9800317 	ldw	r6,12(sp)
 102f1cc:	dc400015 	stw	r17,0(sp)
 102f1d0:	100f883a 	mov	r7,r2
 102f1d4:	803ee83a 	callr	r16
 102f1d8:	dfc00617 	ldw	ra,24(sp)
 102f1dc:	dc400517 	ldw	r17,20(sp)
 102f1e0:	dc000417 	ldw	r16,16(sp)
 102f1e4:	dec00704 	addi	sp,sp,28
 102f1e8:	f800283a 	ret

0102f1ec <__udivdi3>:
 102f1ec:	defff504 	addi	sp,sp,-44
 102f1f0:	dcc00415 	stw	r19,16(sp)
 102f1f4:	dc000115 	stw	r16,4(sp)
 102f1f8:	dfc00a15 	stw	ra,40(sp)
 102f1fc:	df000915 	stw	fp,36(sp)
 102f200:	ddc00815 	stw	r23,32(sp)
 102f204:	dd800715 	stw	r22,28(sp)
 102f208:	dd400615 	stw	r21,24(sp)
 102f20c:	dd000515 	stw	r20,20(sp)
 102f210:	dc800315 	stw	r18,12(sp)
 102f214:	dc400215 	stw	r17,8(sp)
 102f218:	2027883a 	mov	r19,r4
 102f21c:	2821883a 	mov	r16,r5
 102f220:	3800421e 	bne	r7,zero,102f32c <__udivdi3+0x140>
 102f224:	3025883a 	mov	r18,r6
 102f228:	2023883a 	mov	r17,r4
 102f22c:	2980542e 	bgeu	r5,r6,102f380 <__udivdi3+0x194>
 102f230:	00bfffd4 	movui	r2,65535
 102f234:	282d883a 	mov	r22,r5
 102f238:	1180a836 	bltu	r2,r6,102f4dc <__udivdi3+0x2f0>
 102f23c:	00803fc4 	movi	r2,255
 102f240:	1181422e 	bgeu	r2,r6,102f74c <__udivdi3+0x560>
 102f244:	00800204 	movi	r2,8
 102f248:	1007883a 	mov	r3,r2
 102f24c:	3084d83a 	srl	r2,r6,r2
 102f250:	010040f4 	movhi	r4,259
 102f254:	210fa804 	addi	r4,r4,16032
 102f258:	2085883a 	add	r2,r4,r2
 102f25c:	10800003 	ldbu	r2,0(r2)
 102f260:	10c7883a 	add	r3,r2,r3
 102f264:	00800804 	movi	r2,32
 102f268:	10c5c83a 	sub	r2,r2,r3
 102f26c:	10000526 	beq	r2,zero,102f284 <__udivdi3+0x98>
 102f270:	80a0983a 	sll	r16,r16,r2
 102f274:	98c6d83a 	srl	r3,r19,r3
 102f278:	30a4983a 	sll	r18,r6,r2
 102f27c:	98a2983a 	sll	r17,r19,r2
 102f280:	80ecb03a 	or	r22,r16,r3
 102f284:	902ad43a 	srli	r21,r18,16
 102f288:	b009883a 	mov	r4,r22
 102f28c:	953fffcc 	andi	r20,r18,65535
 102f290:	a80b883a 	mov	r5,r21
 102f294:	10218f80 	call	10218f8 <__umodsi3>
 102f298:	b009883a 	mov	r4,r22
 102f29c:	a80b883a 	mov	r5,r21
 102f2a0:	1027883a 	mov	r19,r2
 102f2a4:	10218f00 	call	10218f0 <__udivsi3>
 102f2a8:	1021883a 	mov	r16,r2
 102f2ac:	8806d43a 	srli	r3,r17,16
 102f2b0:	9804943a 	slli	r2,r19,16
 102f2b4:	8527383a 	mul	r19,r16,r20
 102f2b8:	10c4b03a 	or	r2,r2,r3
 102f2bc:	14c0052e 	bgeu	r2,r19,102f2d4 <__udivdi3+0xe8>
 102f2c0:	1485883a 	add	r2,r2,r18
 102f2c4:	80ffffc4 	addi	r3,r16,-1
 102f2c8:	14800136 	bltu	r2,r18,102f2d0 <__udivdi3+0xe4>
 102f2cc:	14c13436 	bltu	r2,r19,102f7a0 <__udivdi3+0x5b4>
 102f2d0:	1821883a 	mov	r16,r3
 102f2d4:	14e7c83a 	sub	r19,r2,r19
 102f2d8:	9809883a 	mov	r4,r19
 102f2dc:	a80b883a 	mov	r5,r21
 102f2e0:	10218f80 	call	10218f8 <__umodsi3>
 102f2e4:	102d883a 	mov	r22,r2
 102f2e8:	9809883a 	mov	r4,r19
 102f2ec:	a80b883a 	mov	r5,r21
 102f2f0:	10218f00 	call	10218f0 <__udivsi3>
 102f2f4:	b02c943a 	slli	r22,r22,16
 102f2f8:	1529383a 	mul	r20,r2,r20
 102f2fc:	8c7fffcc 	andi	r17,r17,65535
 102f300:	b462b03a 	or	r17,r22,r17
 102f304:	8d00052e 	bgeu	r17,r20,102f31c <__udivdi3+0x130>
 102f308:	8ca3883a 	add	r17,r17,r18
 102f30c:	10ffffc4 	addi	r3,r2,-1
 102f310:	8c80f636 	bltu	r17,r18,102f6ec <__udivdi3+0x500>
 102f314:	8d00f52e 	bgeu	r17,r20,102f6ec <__udivdi3+0x500>
 102f318:	10bfff84 	addi	r2,r2,-2
 102f31c:	8020943a 	slli	r16,r16,16
 102f320:	0007883a 	mov	r3,zero
 102f324:	1404b03a 	or	r2,r2,r16
 102f328:	00005b06 	br	102f498 <__udivdi3+0x2ac>
 102f32c:	29c05836 	bltu	r5,r7,102f490 <__udivdi3+0x2a4>
 102f330:	00bfffd4 	movui	r2,65535
 102f334:	11c0642e 	bgeu	r2,r7,102f4c8 <__udivdi3+0x2dc>
 102f338:	00804034 	movhi	r2,256
 102f33c:	10bfffc4 	addi	r2,r2,-1
 102f340:	11c0f32e 	bgeu	r2,r7,102f710 <__udivdi3+0x524>
 102f344:	00c00604 	movi	r3,24
 102f348:	180b883a 	mov	r5,r3
 102f34c:	38c6d83a 	srl	r3,r7,r3
 102f350:	008040f4 	movhi	r2,259
 102f354:	108fa804 	addi	r2,r2,16032
 102f358:	10c7883a 	add	r3,r2,r3
 102f35c:	18c00003 	ldbu	r3,0(r3)
 102f360:	01000804 	movi	r4,32
 102f364:	1947883a 	add	r3,r3,r5
 102f368:	20e5c83a 	sub	r18,r4,r3
 102f36c:	9000661e 	bne	r18,zero,102f508 <__udivdi3+0x31c>
 102f370:	3c00f936 	bltu	r7,r16,102f758 <__udivdi3+0x56c>
 102f374:	9985403a 	cmpgeu	r2,r19,r6
 102f378:	0007883a 	mov	r3,zero
 102f37c:	00004606 	br	102f498 <__udivdi3+0x2ac>
 102f380:	3000041e 	bne	r6,zero,102f394 <__udivdi3+0x1a8>
 102f384:	01000044 	movi	r4,1
 102f388:	000b883a 	mov	r5,zero
 102f38c:	10218f00 	call	10218f0 <__udivsi3>
 102f390:	1025883a 	mov	r18,r2
 102f394:	00bfffd4 	movui	r2,65535
 102f398:	1480562e 	bgeu	r2,r18,102f4f4 <__udivdi3+0x308>
 102f39c:	00804034 	movhi	r2,256
 102f3a0:	10bfffc4 	addi	r2,r2,-1
 102f3a4:	1480e32e 	bgeu	r2,r18,102f734 <__udivdi3+0x548>
 102f3a8:	00800604 	movi	r2,24
 102f3ac:	1007883a 	mov	r3,r2
 102f3b0:	9084d83a 	srl	r2,r18,r2
 102f3b4:	010040f4 	movhi	r4,259
 102f3b8:	210fa804 	addi	r4,r4,16032
 102f3bc:	2085883a 	add	r2,r4,r2
 102f3c0:	10800003 	ldbu	r2,0(r2)
 102f3c4:	10c5883a 	add	r2,r2,r3
 102f3c8:	00c00804 	movi	r3,32
 102f3cc:	1887c83a 	sub	r3,r3,r2
 102f3d0:	1800911e 	bne	r3,zero,102f618 <__udivdi3+0x42c>
 102f3d4:	9028d43a 	srli	r20,r18,16
 102f3d8:	84a1c83a 	sub	r16,r16,r18
 102f3dc:	957fffcc 	andi	r21,r18,65535
 102f3e0:	00c00044 	movi	r3,1
 102f3e4:	8009883a 	mov	r4,r16
 102f3e8:	a00b883a 	mov	r5,r20
 102f3ec:	d8c00015 	stw	r3,0(sp)
 102f3f0:	10218f80 	call	10218f8 <__umodsi3>
 102f3f4:	8009883a 	mov	r4,r16
 102f3f8:	a00b883a 	mov	r5,r20
 102f3fc:	1027883a 	mov	r19,r2
 102f400:	10218f00 	call	10218f0 <__udivsi3>
 102f404:	1021883a 	mov	r16,r2
 102f408:	880cd43a 	srli	r6,r17,16
 102f40c:	9804943a 	slli	r2,r19,16
 102f410:	8567383a 	mul	r19,r16,r21
 102f414:	d8c00017 	ldw	r3,0(sp)
 102f418:	1188b03a 	or	r4,r2,r6
 102f41c:	24c0052e 	bgeu	r4,r19,102f434 <__udivdi3+0x248>
 102f420:	2489883a 	add	r4,r4,r18
 102f424:	80bfffc4 	addi	r2,r16,-1
 102f428:	24800136 	bltu	r4,r18,102f430 <__udivdi3+0x244>
 102f42c:	24c0d936 	bltu	r4,r19,102f794 <__udivdi3+0x5a8>
 102f430:	1021883a 	mov	r16,r2
 102f434:	24e7c83a 	sub	r19,r4,r19
 102f438:	9809883a 	mov	r4,r19
 102f43c:	a00b883a 	mov	r5,r20
 102f440:	d8c00015 	stw	r3,0(sp)
 102f444:	10218f80 	call	10218f8 <__umodsi3>
 102f448:	102d883a 	mov	r22,r2
 102f44c:	9809883a 	mov	r4,r19
 102f450:	a00b883a 	mov	r5,r20
 102f454:	10218f00 	call	10218f0 <__udivsi3>
 102f458:	b02c943a 	slli	r22,r22,16
 102f45c:	156b383a 	mul	r21,r2,r21
 102f460:	8c7fffcc 	andi	r17,r17,65535
 102f464:	b462b03a 	or	r17,r22,r17
 102f468:	d8c00017 	ldw	r3,0(sp)
 102f46c:	8d40052e 	bgeu	r17,r21,102f484 <__udivdi3+0x298>
 102f470:	8ca3883a 	add	r17,r17,r18
 102f474:	113fffc4 	addi	r4,r2,-1
 102f478:	8c809a36 	bltu	r17,r18,102f6e4 <__udivdi3+0x4f8>
 102f47c:	8d40992e 	bgeu	r17,r21,102f6e4 <__udivdi3+0x4f8>
 102f480:	10bfff84 	addi	r2,r2,-2
 102f484:	8020943a 	slli	r16,r16,16
 102f488:	1404b03a 	or	r2,r2,r16
 102f48c:	00000206 	br	102f498 <__udivdi3+0x2ac>
 102f490:	0007883a 	mov	r3,zero
 102f494:	0005883a 	mov	r2,zero
 102f498:	dfc00a17 	ldw	ra,40(sp)
 102f49c:	df000917 	ldw	fp,36(sp)
 102f4a0:	ddc00817 	ldw	r23,32(sp)
 102f4a4:	dd800717 	ldw	r22,28(sp)
 102f4a8:	dd400617 	ldw	r21,24(sp)
 102f4ac:	dd000517 	ldw	r20,20(sp)
 102f4b0:	dcc00417 	ldw	r19,16(sp)
 102f4b4:	dc800317 	ldw	r18,12(sp)
 102f4b8:	dc400217 	ldw	r17,8(sp)
 102f4bc:	dc000117 	ldw	r16,4(sp)
 102f4c0:	dec00b04 	addi	sp,sp,44
 102f4c4:	f800283a 	ret
 102f4c8:	00803fc4 	movi	r2,255
 102f4cc:	11c0932e 	bgeu	r2,r7,102f71c <__udivdi3+0x530>
 102f4d0:	00c00204 	movi	r3,8
 102f4d4:	180b883a 	mov	r5,r3
 102f4d8:	003f9c06 	br	102f34c <_gp+0xffff16c8>
 102f4dc:	00804034 	movhi	r2,256
 102f4e0:	10bfffc4 	addi	r2,r2,-1
 102f4e4:	1180902e 	bgeu	r2,r6,102f728 <__udivdi3+0x53c>
 102f4e8:	00800604 	movi	r2,24
 102f4ec:	1007883a 	mov	r3,r2
 102f4f0:	003f5606 	br	102f24c <_gp+0xffff15c8>
 102f4f4:	00803fc4 	movi	r2,255
 102f4f8:	1480912e 	bgeu	r2,r18,102f740 <__udivdi3+0x554>
 102f4fc:	00800204 	movi	r2,8
 102f500:	1007883a 	mov	r3,r2
 102f504:	003faa06 	br	102f3b0 <_gp+0xffff172c>
 102f508:	30eed83a 	srl	r23,r6,r3
 102f50c:	3c8e983a 	sll	r7,r7,r18
 102f510:	80f8d83a 	srl	fp,r16,r3
 102f514:	98c6d83a 	srl	r3,r19,r3
 102f518:	3deeb03a 	or	r23,r7,r23
 102f51c:	b828d43a 	srli	r20,r23,16
 102f520:	84a0983a 	sll	r16,r16,r18
 102f524:	e009883a 	mov	r4,fp
 102f528:	a00b883a 	mov	r5,r20
 102f52c:	80e2b03a 	or	r17,r16,r3
 102f530:	34aa983a 	sll	r21,r6,r18
 102f534:	10218f80 	call	10218f8 <__umodsi3>
 102f538:	e009883a 	mov	r4,fp
 102f53c:	a00b883a 	mov	r5,r20
 102f540:	102d883a 	mov	r22,r2
 102f544:	10218f00 	call	10218f0 <__udivsi3>
 102f548:	1021883a 	mov	r16,r2
 102f54c:	bf3fffcc 	andi	fp,r23,65535
 102f550:	b004943a 	slli	r2,r22,16
 102f554:	8808d43a 	srli	r4,r17,16
 102f558:	872d383a 	mul	r22,r16,fp
 102f55c:	1104b03a 	or	r2,r2,r4
 102f560:	1580042e 	bgeu	r2,r22,102f574 <__udivdi3+0x388>
 102f564:	15c5883a 	add	r2,r2,r23
 102f568:	80ffffc4 	addi	r3,r16,-1
 102f56c:	15c0812e 	bgeu	r2,r23,102f774 <__udivdi3+0x588>
 102f570:	1821883a 	mov	r16,r3
 102f574:	15adc83a 	sub	r22,r2,r22
 102f578:	b009883a 	mov	r4,r22
 102f57c:	a00b883a 	mov	r5,r20
 102f580:	10218f80 	call	10218f8 <__umodsi3>
 102f584:	a00b883a 	mov	r5,r20
 102f588:	b009883a 	mov	r4,r22
 102f58c:	d8800015 	stw	r2,0(sp)
 102f590:	10218f00 	call	10218f0 <__udivsi3>
 102f594:	d8c00017 	ldw	r3,0(sp)
 102f598:	170b383a 	mul	r5,r2,fp
 102f59c:	8c7fffcc 	andi	r17,r17,65535
 102f5a0:	1806943a 	slli	r3,r3,16
 102f5a4:	1c46b03a 	or	r3,r3,r17
 102f5a8:	1940042e 	bgeu	r3,r5,102f5bc <__udivdi3+0x3d0>
 102f5ac:	1dc7883a 	add	r3,r3,r23
 102f5b0:	113fffc4 	addi	r4,r2,-1
 102f5b4:	1dc06b2e 	bgeu	r3,r23,102f764 <__udivdi3+0x578>
 102f5b8:	2005883a 	mov	r2,r4
 102f5bc:	8020943a 	slli	r16,r16,16
 102f5c0:	a9ffffcc 	andi	r7,r21,65535
 102f5c4:	a82ad43a 	srli	r21,r21,16
 102f5c8:	1404b03a 	or	r2,r2,r16
 102f5cc:	113fffcc 	andi	r4,r2,65535
 102f5d0:	100cd43a 	srli	r6,r2,16
 102f5d4:	21d3383a 	mul	r9,r4,r7
 102f5d8:	2549383a 	mul	r4,r4,r21
 102f5dc:	31cf383a 	mul	r7,r6,r7
 102f5e0:	4810d43a 	srli	r8,r9,16
 102f5e4:	1947c83a 	sub	r3,r3,r5
 102f5e8:	3909883a 	add	r4,r7,r4
 102f5ec:	2209883a 	add	r4,r4,r8
 102f5f0:	354d383a 	mul	r6,r6,r21
 102f5f4:	21c0022e 	bgeu	r4,r7,102f600 <__udivdi3+0x414>
 102f5f8:	01400074 	movhi	r5,1
 102f5fc:	314d883a 	add	r6,r6,r5
 102f600:	202ad43a 	srli	r21,r4,16
 102f604:	354d883a 	add	r6,r6,r21
 102f608:	19803f36 	bltu	r3,r6,102f708 <__udivdi3+0x51c>
 102f60c:	19803926 	beq	r3,r6,102f6f4 <__udivdi3+0x508>
 102f610:	0007883a 	mov	r3,zero
 102f614:	003fa006 	br	102f498 <_gp+0xffff1814>
 102f618:	90e4983a 	sll	r18,r18,r3
 102f61c:	80aad83a 	srl	r21,r16,r2
 102f620:	80e0983a 	sll	r16,r16,r3
 102f624:	9028d43a 	srli	r20,r18,16
 102f628:	9884d83a 	srl	r2,r19,r2
 102f62c:	a809883a 	mov	r4,r21
 102f630:	a00b883a 	mov	r5,r20
 102f634:	80acb03a 	or	r22,r16,r2
 102f638:	98e2983a 	sll	r17,r19,r3
 102f63c:	10218f80 	call	10218f8 <__umodsi3>
 102f640:	a809883a 	mov	r4,r21
 102f644:	a00b883a 	mov	r5,r20
 102f648:	1021883a 	mov	r16,r2
 102f64c:	10218f00 	call	10218f0 <__udivsi3>
 102f650:	957fffcc 	andi	r21,r18,65535
 102f654:	8020943a 	slli	r16,r16,16
 102f658:	b00ad43a 	srli	r5,r22,16
 102f65c:	1567383a 	mul	r19,r2,r21
 102f660:	102f883a 	mov	r23,r2
 102f664:	8148b03a 	or	r4,r16,r5
 102f668:	24c0062e 	bgeu	r4,r19,102f684 <__udivdi3+0x498>
 102f66c:	2489883a 	add	r4,r4,r18
 102f670:	10bfffc4 	addi	r2,r2,-1
 102f674:	24804536 	bltu	r4,r18,102f78c <__udivdi3+0x5a0>
 102f678:	24c0442e 	bgeu	r4,r19,102f78c <__udivdi3+0x5a0>
 102f67c:	bdffff84 	addi	r23,r23,-2
 102f680:	2489883a 	add	r4,r4,r18
 102f684:	24e7c83a 	sub	r19,r4,r19
 102f688:	9809883a 	mov	r4,r19
 102f68c:	a00b883a 	mov	r5,r20
 102f690:	10218f80 	call	10218f8 <__umodsi3>
 102f694:	1021883a 	mov	r16,r2
 102f698:	9809883a 	mov	r4,r19
 102f69c:	a00b883a 	mov	r5,r20
 102f6a0:	10218f00 	call	10218f0 <__udivsi3>
 102f6a4:	8020943a 	slli	r16,r16,16
 102f6a8:	1007883a 	mov	r3,r2
 102f6ac:	1545383a 	mul	r2,r2,r21
 102f6b0:	b13fffcc 	andi	r4,r22,65535
 102f6b4:	8108b03a 	or	r4,r16,r4
 102f6b8:	2080062e 	bgeu	r4,r2,102f6d4 <__udivdi3+0x4e8>
 102f6bc:	2489883a 	add	r4,r4,r18
 102f6c0:	197fffc4 	addi	r5,r3,-1
 102f6c4:	24802f36 	bltu	r4,r18,102f784 <__udivdi3+0x598>
 102f6c8:	20802e2e 	bgeu	r4,r2,102f784 <__udivdi3+0x598>
 102f6cc:	18ffff84 	addi	r3,r3,-2
 102f6d0:	2489883a 	add	r4,r4,r18
 102f6d4:	b82e943a 	slli	r23,r23,16
 102f6d8:	20a1c83a 	sub	r16,r4,r2
 102f6dc:	1dc6b03a 	or	r3,r3,r23
 102f6e0:	003f4006 	br	102f3e4 <_gp+0xffff1760>
 102f6e4:	2005883a 	mov	r2,r4
 102f6e8:	003f6606 	br	102f484 <_gp+0xffff1800>
 102f6ec:	1805883a 	mov	r2,r3
 102f6f0:	003f0a06 	br	102f31c <_gp+0xffff1698>
 102f6f4:	2006943a 	slli	r3,r4,16
 102f6f8:	9c88983a 	sll	r4,r19,r18
 102f6fc:	4a7fffcc 	andi	r9,r9,65535
 102f700:	1a47883a 	add	r3,r3,r9
 102f704:	20ffc22e 	bgeu	r4,r3,102f610 <_gp+0xffff198c>
 102f708:	10bfffc4 	addi	r2,r2,-1
 102f70c:	003fc006 	br	102f610 <_gp+0xffff198c>
 102f710:	00c00404 	movi	r3,16
 102f714:	180b883a 	mov	r5,r3
 102f718:	003f0c06 	br	102f34c <_gp+0xffff16c8>
 102f71c:	0007883a 	mov	r3,zero
 102f720:	000b883a 	mov	r5,zero
 102f724:	003f0906 	br	102f34c <_gp+0xffff16c8>
 102f728:	00800404 	movi	r2,16
 102f72c:	1007883a 	mov	r3,r2
 102f730:	003ec606 	br	102f24c <_gp+0xffff15c8>
 102f734:	00800404 	movi	r2,16
 102f738:	1007883a 	mov	r3,r2
 102f73c:	003f1c06 	br	102f3b0 <_gp+0xffff172c>
 102f740:	0005883a 	mov	r2,zero
 102f744:	0007883a 	mov	r3,zero
 102f748:	003f1906 	br	102f3b0 <_gp+0xffff172c>
 102f74c:	0005883a 	mov	r2,zero
 102f750:	0007883a 	mov	r3,zero
 102f754:	003ebd06 	br	102f24c <_gp+0xffff15c8>
 102f758:	0007883a 	mov	r3,zero
 102f75c:	00800044 	movi	r2,1
 102f760:	003f4d06 	br	102f498 <_gp+0xffff1814>
 102f764:	197f942e 	bgeu	r3,r5,102f5b8 <_gp+0xffff1934>
 102f768:	10bfff84 	addi	r2,r2,-2
 102f76c:	1dc7883a 	add	r3,r3,r23
 102f770:	003f9206 	br	102f5bc <_gp+0xffff1938>
 102f774:	15bf7e2e 	bgeu	r2,r22,102f570 <_gp+0xffff18ec>
 102f778:	843fff84 	addi	r16,r16,-2
 102f77c:	15c5883a 	add	r2,r2,r23
 102f780:	003f7c06 	br	102f574 <_gp+0xffff18f0>
 102f784:	2807883a 	mov	r3,r5
 102f788:	003fd206 	br	102f6d4 <_gp+0xffff1a50>
 102f78c:	102f883a 	mov	r23,r2
 102f790:	003fbc06 	br	102f684 <_gp+0xffff1a00>
 102f794:	843fff84 	addi	r16,r16,-2
 102f798:	2489883a 	add	r4,r4,r18
 102f79c:	003f2506 	br	102f434 <_gp+0xffff17b0>
 102f7a0:	843fff84 	addi	r16,r16,-2
 102f7a4:	1485883a 	add	r2,r2,r18
 102f7a8:	003eca06 	br	102f2d4 <_gp+0xffff1650>

0102f7ac <__umoddi3>:
 102f7ac:	defff404 	addi	sp,sp,-48
 102f7b0:	ddc00915 	stw	r23,36(sp)
 102f7b4:	dc400315 	stw	r17,12(sp)
 102f7b8:	dc000215 	stw	r16,8(sp)
 102f7bc:	dfc00b15 	stw	ra,44(sp)
 102f7c0:	df000a15 	stw	fp,40(sp)
 102f7c4:	dd800815 	stw	r22,32(sp)
 102f7c8:	dd400715 	stw	r21,28(sp)
 102f7cc:	dd000615 	stw	r20,24(sp)
 102f7d0:	dcc00515 	stw	r19,20(sp)
 102f7d4:	dc800415 	stw	r18,16(sp)
 102f7d8:	2021883a 	mov	r16,r4
 102f7dc:	2823883a 	mov	r17,r5
 102f7e0:	282f883a 	mov	r23,r5
 102f7e4:	3800381e 	bne	r7,zero,102f8c8 <__umoddi3+0x11c>
 102f7e8:	3027883a 	mov	r19,r6
 102f7ec:	2029883a 	mov	r20,r4
 102f7f0:	29804e2e 	bgeu	r5,r6,102f92c <__umoddi3+0x180>
 102f7f4:	00bfffd4 	movui	r2,65535
 102f7f8:	11809c36 	bltu	r2,r6,102fa6c <__umoddi3+0x2c0>
 102f7fc:	00803fc4 	movi	r2,255
 102f800:	11813b2e 	bgeu	r2,r6,102fcf0 <__umoddi3+0x544>
 102f804:	01400204 	movi	r5,8
 102f808:	2805883a 	mov	r2,r5
 102f80c:	314ad83a 	srl	r5,r6,r5
 102f810:	00c040f4 	movhi	r3,259
 102f814:	18cfa804 	addi	r3,r3,16032
 102f818:	194b883a 	add	r5,r3,r5
 102f81c:	29000003 	ldbu	r4,0(r5)
 102f820:	2089883a 	add	r4,r4,r2
 102f824:	00800804 	movi	r2,32
 102f828:	1105c83a 	sub	r2,r2,r4
 102f82c:	1000ec26 	beq	r2,zero,102fbe0 <__umoddi3+0x434>
 102f830:	88a2983a 	sll	r17,r17,r2
 102f834:	8108d83a 	srl	r4,r16,r4
 102f838:	30a6983a 	sll	r19,r6,r2
 102f83c:	80a8983a 	sll	r20,r16,r2
 102f840:	1025883a 	mov	r18,r2
 102f844:	892eb03a 	or	r23,r17,r4
 102f848:	982cd43a 	srli	r22,r19,16
 102f84c:	b809883a 	mov	r4,r23
 102f850:	9d7fffcc 	andi	r21,r19,65535
 102f854:	b00b883a 	mov	r5,r22
 102f858:	10218f80 	call	10218f8 <__umodsi3>
 102f85c:	b809883a 	mov	r4,r23
 102f860:	b00b883a 	mov	r5,r22
 102f864:	1021883a 	mov	r16,r2
 102f868:	10218f00 	call	10218f0 <__udivsi3>
 102f86c:	8020943a 	slli	r16,r16,16
 102f870:	a00cd43a 	srli	r6,r20,16
 102f874:	1545383a 	mul	r2,r2,r21
 102f878:	8188b03a 	or	r4,r16,r6
 102f87c:	2080042e 	bgeu	r4,r2,102f890 <__umoddi3+0xe4>
 102f880:	24c9883a 	add	r4,r4,r19
 102f884:	24c00236 	bltu	r4,r19,102f890 <__umoddi3+0xe4>
 102f888:	2080012e 	bgeu	r4,r2,102f890 <__umoddi3+0xe4>
 102f88c:	24c9883a 	add	r4,r4,r19
 102f890:	20a3c83a 	sub	r17,r4,r2
 102f894:	8809883a 	mov	r4,r17
 102f898:	b00b883a 	mov	r5,r22
 102f89c:	10218f80 	call	10218f8 <__umodsi3>
 102f8a0:	8809883a 	mov	r4,r17
 102f8a4:	b00b883a 	mov	r5,r22
 102f8a8:	1021883a 	mov	r16,r2
 102f8ac:	10218f00 	call	10218f0 <__udivsi3>
 102f8b0:	8006943a 	slli	r3,r16,16
 102f8b4:	1545383a 	mul	r2,r2,r21
 102f8b8:	a13fffcc 	andi	r4,r20,65535
 102f8bc:	1906b03a 	or	r3,r3,r4
 102f8c0:	1880532e 	bgeu	r3,r2,102fa10 <__umoddi3+0x264>
 102f8c4:	00004e06 	br	102fa00 <__umoddi3+0x254>
 102f8c8:	29c05536 	bltu	r5,r7,102fa20 <__umoddi3+0x274>
 102f8cc:	00bfffd4 	movui	r2,65535
 102f8d0:	11c0612e 	bgeu	r2,r7,102fa58 <__umoddi3+0x2ac>
 102f8d4:	00804034 	movhi	r2,256
 102f8d8:	10bfffc4 	addi	r2,r2,-1
 102f8dc:	11c0f82e 	bgeu	r2,r7,102fcc0 <__umoddi3+0x514>
 102f8e0:	01400604 	movi	r5,24
 102f8e4:	282b883a 	mov	r21,r5
 102f8e8:	394ad83a 	srl	r5,r7,r5
 102f8ec:	00c040f4 	movhi	r3,259
 102f8f0:	18cfa804 	addi	r3,r3,16032
 102f8f4:	194b883a 	add	r5,r3,r5
 102f8f8:	28800003 	ldbu	r2,0(r5)
 102f8fc:	00c00804 	movi	r3,32
 102f900:	156b883a 	add	r21,r2,r21
 102f904:	1d69c83a 	sub	r20,r3,r21
 102f908:	a000631e 	bne	r20,zero,102fa98 <__umoddi3+0x2ec>
 102f90c:	3c400136 	bltu	r7,r17,102f914 <__umoddi3+0x168>
 102f910:	81810436 	bltu	r16,r6,102fd24 <__umoddi3+0x578>
 102f914:	8185c83a 	sub	r2,r16,r6
 102f918:	89e3c83a 	sub	r17,r17,r7
 102f91c:	8087803a 	cmpltu	r3,r16,r2
 102f920:	88efc83a 	sub	r23,r17,r3
 102f924:	b807883a 	mov	r3,r23
 102f928:	00003f06 	br	102fa28 <__umoddi3+0x27c>
 102f92c:	3000041e 	bne	r6,zero,102f940 <__umoddi3+0x194>
 102f930:	01000044 	movi	r4,1
 102f934:	000b883a 	mov	r5,zero
 102f938:	10218f00 	call	10218f0 <__udivsi3>
 102f93c:	1027883a 	mov	r19,r2
 102f940:	00bfffd4 	movui	r2,65535
 102f944:	14c04f2e 	bgeu	r2,r19,102fa84 <__umoddi3+0x2d8>
 102f948:	00804034 	movhi	r2,256
 102f94c:	10bfffc4 	addi	r2,r2,-1
 102f950:	14c0e42e 	bgeu	r2,r19,102fce4 <__umoddi3+0x538>
 102f954:	00800604 	movi	r2,24
 102f958:	1007883a 	mov	r3,r2
 102f95c:	9884d83a 	srl	r2,r19,r2
 102f960:	010040f4 	movhi	r4,259
 102f964:	210fa804 	addi	r4,r4,16032
 102f968:	2085883a 	add	r2,r4,r2
 102f96c:	11000003 	ldbu	r4,0(r2)
 102f970:	00800804 	movi	r2,32
 102f974:	20c7883a 	add	r3,r4,r3
 102f978:	10c5c83a 	sub	r2,r2,r3
 102f97c:	10009a1e 	bne	r2,zero,102fbe8 <__umoddi3+0x43c>
 102f980:	982cd43a 	srli	r22,r19,16
 102f984:	8ce3c83a 	sub	r17,r17,r19
 102f988:	9c3fffcc 	andi	r16,r19,65535
 102f98c:	0025883a 	mov	r18,zero
 102f990:	8809883a 	mov	r4,r17
 102f994:	b00b883a 	mov	r5,r22
 102f998:	10218f80 	call	10218f8 <__umodsi3>
 102f99c:	8809883a 	mov	r4,r17
 102f9a0:	b00b883a 	mov	r5,r22
 102f9a4:	102b883a 	mov	r21,r2
 102f9a8:	10218f00 	call	10218f0 <__udivsi3>
 102f9ac:	a806943a 	slli	r3,r21,16
 102f9b0:	a008d43a 	srli	r4,r20,16
 102f9b4:	1405383a 	mul	r2,r2,r16
 102f9b8:	190cb03a 	or	r6,r3,r4
 102f9bc:	3080032e 	bgeu	r6,r2,102f9cc <__umoddi3+0x220>
 102f9c0:	34cd883a 	add	r6,r6,r19
 102f9c4:	34c00136 	bltu	r6,r19,102f9cc <__umoddi3+0x220>
 102f9c8:	3080d436 	bltu	r6,r2,102fd1c <__umoddi3+0x570>
 102f9cc:	30abc83a 	sub	r21,r6,r2
 102f9d0:	a809883a 	mov	r4,r21
 102f9d4:	b00b883a 	mov	r5,r22
 102f9d8:	10218f80 	call	10218f8 <__umodsi3>
 102f9dc:	1023883a 	mov	r17,r2
 102f9e0:	a809883a 	mov	r4,r21
 102f9e4:	b00b883a 	mov	r5,r22
 102f9e8:	10218f00 	call	10218f0 <__udivsi3>
 102f9ec:	8822943a 	slli	r17,r17,16
 102f9f0:	1405383a 	mul	r2,r2,r16
 102f9f4:	a13fffcc 	andi	r4,r20,65535
 102f9f8:	8906b03a 	or	r3,r17,r4
 102f9fc:	1880042e 	bgeu	r3,r2,102fa10 <__umoddi3+0x264>
 102fa00:	1cc7883a 	add	r3,r3,r19
 102fa04:	1cc00236 	bltu	r3,r19,102fa10 <__umoddi3+0x264>
 102fa08:	1880012e 	bgeu	r3,r2,102fa10 <__umoddi3+0x264>
 102fa0c:	1cc7883a 	add	r3,r3,r19
 102fa10:	1887c83a 	sub	r3,r3,r2
 102fa14:	1c84d83a 	srl	r2,r3,r18
 102fa18:	0007883a 	mov	r3,zero
 102fa1c:	00000206 	br	102fa28 <__umoddi3+0x27c>
 102fa20:	2005883a 	mov	r2,r4
 102fa24:	2807883a 	mov	r3,r5
 102fa28:	dfc00b17 	ldw	ra,44(sp)
 102fa2c:	df000a17 	ldw	fp,40(sp)
 102fa30:	ddc00917 	ldw	r23,36(sp)
 102fa34:	dd800817 	ldw	r22,32(sp)
 102fa38:	dd400717 	ldw	r21,28(sp)
 102fa3c:	dd000617 	ldw	r20,24(sp)
 102fa40:	dcc00517 	ldw	r19,20(sp)
 102fa44:	dc800417 	ldw	r18,16(sp)
 102fa48:	dc400317 	ldw	r17,12(sp)
 102fa4c:	dc000217 	ldw	r16,8(sp)
 102fa50:	dec00c04 	addi	sp,sp,48
 102fa54:	f800283a 	ret
 102fa58:	00803fc4 	movi	r2,255
 102fa5c:	11c0952e 	bgeu	r2,r7,102fcb4 <__umoddi3+0x508>
 102fa60:	01400204 	movi	r5,8
 102fa64:	282b883a 	mov	r21,r5
 102fa68:	003f9f06 	br	102f8e8 <_gp+0xffff1c64>
 102fa6c:	00804034 	movhi	r2,256
 102fa70:	10bfffc4 	addi	r2,r2,-1
 102fa74:	1180952e 	bgeu	r2,r6,102fccc <__umoddi3+0x520>
 102fa78:	01400604 	movi	r5,24
 102fa7c:	2805883a 	mov	r2,r5
 102fa80:	003f6206 	br	102f80c <_gp+0xffff1b88>
 102fa84:	00803fc4 	movi	r2,255
 102fa88:	14c0932e 	bgeu	r2,r19,102fcd8 <__umoddi3+0x52c>
 102fa8c:	00800204 	movi	r2,8
 102fa90:	1007883a 	mov	r3,r2
 102fa94:	003fb106 	br	102f95c <_gp+0xffff1cd8>
 102fa98:	3548d83a 	srl	r4,r6,r21
 102fa9c:	3d0e983a 	sll	r7,r7,r20
 102faa0:	8d10983a 	sll	r8,r17,r20
 102faa4:	8d6cd83a 	srl	r22,r17,r21
 102faa8:	3922b03a 	or	r17,r7,r4
 102faac:	882ed43a 	srli	r23,r17,16
 102fab0:	8564d83a 	srl	r18,r16,r21
 102fab4:	b009883a 	mov	r4,r22
 102fab8:	b80b883a 	mov	r5,r23
 102fabc:	44a4b03a 	or	r18,r8,r18
 102fac0:	3526983a 	sll	r19,r6,r20
 102fac4:	10218f80 	call	10218f8 <__umodsi3>
 102fac8:	b009883a 	mov	r4,r22
 102facc:	b80b883a 	mov	r5,r23
 102fad0:	1039883a 	mov	fp,r2
 102fad4:	10218f00 	call	10218f0 <__udivsi3>
 102fad8:	102d883a 	mov	r22,r2
 102fadc:	8a3fffcc 	andi	r8,r17,65535
 102fae0:	e004943a 	slli	r2,fp,16
 102fae4:	900cd43a 	srli	r6,r18,16
 102fae8:	b239383a 	mul	fp,r22,r8
 102faec:	8520983a 	sll	r16,r16,r20
 102faf0:	118ab03a 	or	r5,r2,r6
 102faf4:	2f00042e 	bgeu	r5,fp,102fb08 <__umoddi3+0x35c>
 102faf8:	2c4b883a 	add	r5,r5,r17
 102fafc:	b0bfffc4 	addi	r2,r22,-1
 102fb00:	2c40822e 	bgeu	r5,r17,102fd0c <__umoddi3+0x560>
 102fb04:	102d883a 	mov	r22,r2
 102fb08:	2f39c83a 	sub	fp,r5,fp
 102fb0c:	e009883a 	mov	r4,fp
 102fb10:	b80b883a 	mov	r5,r23
 102fb14:	da000115 	stw	r8,4(sp)
 102fb18:	10218f80 	call	10218f8 <__umodsi3>
 102fb1c:	e009883a 	mov	r4,fp
 102fb20:	b80b883a 	mov	r5,r23
 102fb24:	d8800015 	stw	r2,0(sp)
 102fb28:	10218f00 	call	10218f0 <__udivsi3>
 102fb2c:	d9800017 	ldw	r6,0(sp)
 102fb30:	da000117 	ldw	r8,4(sp)
 102fb34:	94bfffcc 	andi	r18,r18,65535
 102fb38:	300c943a 	slli	r6,r6,16
 102fb3c:	1209383a 	mul	r4,r2,r8
 102fb40:	3490b03a 	or	r8,r6,r18
 102fb44:	4100042e 	bgeu	r8,r4,102fb58 <__umoddi3+0x3ac>
 102fb48:	4451883a 	add	r8,r8,r17
 102fb4c:	10ffffc4 	addi	r3,r2,-1
 102fb50:	44406a2e 	bgeu	r8,r17,102fcfc <__umoddi3+0x550>
 102fb54:	1805883a 	mov	r2,r3
 102fb58:	b012943a 	slli	r9,r22,16
 102fb5c:	9abfffcc 	andi	r10,r19,65535
 102fb60:	980ed43a 	srli	r7,r19,16
 102fb64:	124ab03a 	or	r5,r2,r9
 102fb68:	2a7fffcc 	andi	r9,r5,65535
 102fb6c:	280ad43a 	srli	r5,r5,16
 102fb70:	4a8d383a 	mul	r6,r9,r10
 102fb74:	49d3383a 	mul	r9,r9,r7
 102fb78:	2a95383a 	mul	r10,r5,r10
 102fb7c:	3004d43a 	srli	r2,r6,16
 102fb80:	4111c83a 	sub	r8,r8,r4
 102fb84:	5253883a 	add	r9,r10,r9
 102fb88:	4893883a 	add	r9,r9,r2
 102fb8c:	29cb383a 	mul	r5,r5,r7
 102fb90:	4a80022e 	bgeu	r9,r10,102fb9c <__umoddi3+0x3f0>
 102fb94:	00800074 	movhi	r2,1
 102fb98:	288b883a 	add	r5,r5,r2
 102fb9c:	4808d43a 	srli	r4,r9,16
 102fba0:	4812943a 	slli	r9,r9,16
 102fba4:	31bfffcc 	andi	r6,r6,65535
 102fba8:	290b883a 	add	r5,r5,r4
 102fbac:	498d883a 	add	r6,r9,r6
 102fbb0:	41403a36 	bltu	r8,r5,102fc9c <__umoddi3+0x4f0>
 102fbb4:	41405d26 	beq	r8,r5,102fd2c <__umoddi3+0x580>
 102fbb8:	4149c83a 	sub	r4,r8,r5
 102fbbc:	300f883a 	mov	r7,r6
 102fbc0:	81cfc83a 	sub	r7,r16,r7
 102fbc4:	81c7803a 	cmpltu	r3,r16,r7
 102fbc8:	20c7c83a 	sub	r3,r4,r3
 102fbcc:	1d44983a 	sll	r2,r3,r21
 102fbd0:	3d0ed83a 	srl	r7,r7,r20
 102fbd4:	1d06d83a 	srl	r3,r3,r20
 102fbd8:	11c4b03a 	or	r2,r2,r7
 102fbdc:	003f9206 	br	102fa28 <_gp+0xffff1da4>
 102fbe0:	0025883a 	mov	r18,zero
 102fbe4:	003f1806 	br	102f848 <_gp+0xffff1bc4>
 102fbe8:	98a6983a 	sll	r19,r19,r2
 102fbec:	88e8d83a 	srl	r20,r17,r3
 102fbf0:	80c6d83a 	srl	r3,r16,r3
 102fbf4:	982cd43a 	srli	r22,r19,16
 102fbf8:	88a2983a 	sll	r17,r17,r2
 102fbfc:	a009883a 	mov	r4,r20
 102fc00:	b00b883a 	mov	r5,r22
 102fc04:	88eab03a 	or	r21,r17,r3
 102fc08:	1025883a 	mov	r18,r2
 102fc0c:	10218f80 	call	10218f8 <__umodsi3>
 102fc10:	a009883a 	mov	r4,r20
 102fc14:	b00b883a 	mov	r5,r22
 102fc18:	1023883a 	mov	r17,r2
 102fc1c:	10218f00 	call	10218f0 <__udivsi3>
 102fc20:	9f3fffcc 	andi	fp,r19,65535
 102fc24:	8822943a 	slli	r17,r17,16
 102fc28:	a80ad43a 	srli	r5,r21,16
 102fc2c:	1705383a 	mul	r2,r2,fp
 102fc30:	84a8983a 	sll	r20,r16,r18
 102fc34:	8948b03a 	or	r4,r17,r5
 102fc38:	2080042e 	bgeu	r4,r2,102fc4c <__umoddi3+0x4a0>
 102fc3c:	24c9883a 	add	r4,r4,r19
 102fc40:	24c00236 	bltu	r4,r19,102fc4c <__umoddi3+0x4a0>
 102fc44:	2080012e 	bgeu	r4,r2,102fc4c <__umoddi3+0x4a0>
 102fc48:	24c9883a 	add	r4,r4,r19
 102fc4c:	20afc83a 	sub	r23,r4,r2
 102fc50:	b809883a 	mov	r4,r23
 102fc54:	b00b883a 	mov	r5,r22
 102fc58:	10218f80 	call	10218f8 <__umodsi3>
 102fc5c:	1023883a 	mov	r17,r2
 102fc60:	b809883a 	mov	r4,r23
 102fc64:	b00b883a 	mov	r5,r22
 102fc68:	10218f00 	call	10218f0 <__udivsi3>
 102fc6c:	8822943a 	slli	r17,r17,16
 102fc70:	1705383a 	mul	r2,r2,fp
 102fc74:	a93fffcc 	andi	r4,r21,65535
 102fc78:	8908b03a 	or	r4,r17,r4
 102fc7c:	2080042e 	bgeu	r4,r2,102fc90 <__umoddi3+0x4e4>
 102fc80:	24c9883a 	add	r4,r4,r19
 102fc84:	24c00236 	bltu	r4,r19,102fc90 <__umoddi3+0x4e4>
 102fc88:	2080012e 	bgeu	r4,r2,102fc90 <__umoddi3+0x4e4>
 102fc8c:	24c9883a 	add	r4,r4,r19
 102fc90:	20a3c83a 	sub	r17,r4,r2
 102fc94:	e021883a 	mov	r16,fp
 102fc98:	003f3d06 	br	102f990 <_gp+0xffff1d0c>
 102fc9c:	34cfc83a 	sub	r7,r6,r19
 102fca0:	2c4bc83a 	sub	r5,r5,r17
 102fca4:	31cd803a 	cmpltu	r6,r6,r7
 102fca8:	298dc83a 	sub	r6,r5,r6
 102fcac:	4189c83a 	sub	r4,r8,r6
 102fcb0:	003fc306 	br	102fbc0 <_gp+0xffff1f3c>
 102fcb4:	000b883a 	mov	r5,zero
 102fcb8:	002b883a 	mov	r21,zero
 102fcbc:	003f0a06 	br	102f8e8 <_gp+0xffff1c64>
 102fcc0:	01400404 	movi	r5,16
 102fcc4:	282b883a 	mov	r21,r5
 102fcc8:	003f0706 	br	102f8e8 <_gp+0xffff1c64>
 102fccc:	01400404 	movi	r5,16
 102fcd0:	2805883a 	mov	r2,r5
 102fcd4:	003ecd06 	br	102f80c <_gp+0xffff1b88>
 102fcd8:	0005883a 	mov	r2,zero
 102fcdc:	0007883a 	mov	r3,zero
 102fce0:	003f1e06 	br	102f95c <_gp+0xffff1cd8>
 102fce4:	00800404 	movi	r2,16
 102fce8:	1007883a 	mov	r3,r2
 102fcec:	003f1b06 	br	102f95c <_gp+0xffff1cd8>
 102fcf0:	000b883a 	mov	r5,zero
 102fcf4:	0005883a 	mov	r2,zero
 102fcf8:	003ec406 	br	102f80c <_gp+0xffff1b88>
 102fcfc:	413f952e 	bgeu	r8,r4,102fb54 <_gp+0xffff1ed0>
 102fd00:	10bfff84 	addi	r2,r2,-2
 102fd04:	4451883a 	add	r8,r8,r17
 102fd08:	003f9306 	br	102fb58 <_gp+0xffff1ed4>
 102fd0c:	2f3f7d2e 	bgeu	r5,fp,102fb04 <_gp+0xffff1e80>
 102fd10:	b5bfff84 	addi	r22,r22,-2
 102fd14:	2c4b883a 	add	r5,r5,r17
 102fd18:	003f7b06 	br	102fb08 <_gp+0xffff1e84>
 102fd1c:	34cd883a 	add	r6,r6,r19
 102fd20:	003f2a06 	br	102f9cc <_gp+0xffff1d48>
 102fd24:	8005883a 	mov	r2,r16
 102fd28:	003efe06 	br	102f924 <_gp+0xffff1ca0>
 102fd2c:	81bfdb36 	bltu	r16,r6,102fc9c <_gp+0xffff2018>
 102fd30:	300f883a 	mov	r7,r6
 102fd34:	0009883a 	mov	r4,zero
 102fd38:	003fa106 	br	102fbc0 <_gp+0xffff1f3c>

0102fd3c <__adddf3>:
 102fd3c:	02000434 	movhi	r8,16
 102fd40:	423fffc4 	addi	r8,r8,-1
 102fd44:	defffb04 	addi	sp,sp,-20
 102fd48:	2a12703a 	and	r9,r5,r8
 102fd4c:	2806d7fa 	srli	r3,r5,31
 102fd50:	3a10703a 	and	r8,r7,r8
 102fd54:	3804d53a 	srli	r2,r7,20
 102fd58:	3014d77a 	srli	r10,r6,29
 102fd5c:	dc000015 	stw	r16,0(sp)
 102fd60:	481290fa 	slli	r9,r9,3
 102fd64:	2820d53a 	srli	r16,r5,20
 102fd68:	401090fa 	slli	r8,r8,3
 102fd6c:	200ad77a 	srli	r5,r4,29
 102fd70:	380ed7fa 	srli	r7,r7,31
 102fd74:	dc800215 	stw	r18,8(sp)
 102fd78:	dc400115 	stw	r17,4(sp)
 102fd7c:	dfc00415 	stw	ra,16(sp)
 102fd80:	dcc00315 	stw	r19,12(sp)
 102fd84:	1c803fcc 	andi	r18,r3,255
 102fd88:	8401ffcc 	andi	r16,r16,2047
 102fd8c:	494ab03a 	or	r5,r9,r5
 102fd90:	202290fa 	slli	r17,r4,3
 102fd94:	1081ffcc 	andi	r2,r2,2047
 102fd98:	4290b03a 	or	r8,r8,r10
 102fd9c:	300c90fa 	slli	r6,r6,3
 102fda0:	91c07026 	beq	r18,r7,102ff64 <__adddf3+0x228>
 102fda4:	8087c83a 	sub	r3,r16,r2
 102fda8:	00c0b30e 	bge	zero,r3,1030078 <__adddf3+0x33c>
 102fdac:	10002a1e 	bne	r2,zero,102fe58 <__adddf3+0x11c>
 102fdb0:	4184b03a 	or	r2,r8,r6
 102fdb4:	1000991e 	bne	r2,zero,103001c <__adddf3+0x2e0>
 102fdb8:	888001cc 	andi	r2,r17,7
 102fdbc:	10005b26 	beq	r2,zero,102ff2c <__adddf3+0x1f0>
 102fdc0:	88c003cc 	andi	r3,r17,15
 102fdc4:	00800104 	movi	r2,4
 102fdc8:	18805826 	beq	r3,r2,102ff2c <__adddf3+0x1f0>
 102fdcc:	89800104 	addi	r6,r17,4
 102fdd0:	3463803a 	cmpltu	r17,r6,r17
 102fdd4:	2c4b883a 	add	r5,r5,r17
 102fdd8:	2880202c 	andhi	r2,r5,128
 102fddc:	9007883a 	mov	r3,r18
 102fde0:	3023883a 	mov	r17,r6
 102fde4:	10005426 	beq	r2,zero,102ff38 <__adddf3+0x1fc>
 102fde8:	84000044 	addi	r16,r16,1
 102fdec:	0081ffc4 	movi	r2,2047
 102fdf0:	8080c126 	beq	r16,r2,10300f8 <__adddf3+0x3bc>
 102fdf4:	013fe034 	movhi	r4,65408
 102fdf8:	213fffc4 	addi	r4,r4,-1
 102fdfc:	290a703a 	and	r5,r5,r4
 102fe00:	2804977a 	slli	r2,r5,29
 102fe04:	280a927a 	slli	r5,r5,9
 102fe08:	8822d0fa 	srli	r17,r17,3
 102fe0c:	8401ffcc 	andi	r16,r16,2047
 102fe10:	2808d33a 	srli	r4,r5,12
 102fe14:	1444b03a 	or	r2,r2,r17
 102fe18:	8401ffcc 	andi	r16,r16,2047
 102fe1c:	800a953a 	slli	r5,r16,20
 102fe20:	18c03fcc 	andi	r3,r3,255
 102fe24:	04000434 	movhi	r16,16
 102fe28:	180697fa 	slli	r3,r3,31
 102fe2c:	843fffc4 	addi	r16,r16,-1
 102fe30:	2420703a 	and	r16,r4,r16
 102fe34:	8160b03a 	or	r16,r16,r5
 102fe38:	80c6b03a 	or	r3,r16,r3
 102fe3c:	dfc00417 	ldw	ra,16(sp)
 102fe40:	dcc00317 	ldw	r19,12(sp)
 102fe44:	dc800217 	ldw	r18,8(sp)
 102fe48:	dc400117 	ldw	r17,4(sp)
 102fe4c:	dc000017 	ldw	r16,0(sp)
 102fe50:	dec00504 	addi	sp,sp,20
 102fe54:	f800283a 	ret
 102fe58:	0081ffc4 	movi	r2,2047
 102fe5c:	80bfd626 	beq	r16,r2,102fdb8 <_gp+0xffff2134>
 102fe60:	42002034 	orhi	r8,r8,128
 102fe64:	00800e04 	movi	r2,56
 102fe68:	10c0a616 	blt	r2,r3,1030104 <__adddf3+0x3c8>
 102fe6c:	008007c4 	movi	r2,31
 102fe70:	10c0c916 	blt	r2,r3,1030198 <__adddf3+0x45c>
 102fe74:	00800804 	movi	r2,32
 102fe78:	10c5c83a 	sub	r2,r2,r3
 102fe7c:	408e983a 	sll	r7,r8,r2
 102fe80:	30c8d83a 	srl	r4,r6,r3
 102fe84:	3084983a 	sll	r2,r6,r2
 102fe88:	40c6d83a 	srl	r3,r8,r3
 102fe8c:	390cb03a 	or	r6,r7,r4
 102fe90:	1004c03a 	cmpne	r2,r2,zero
 102fe94:	308cb03a 	or	r6,r6,r2
 102fe98:	898dc83a 	sub	r6,r17,r6
 102fe9c:	89a3803a 	cmpltu	r17,r17,r6
 102fea0:	28cbc83a 	sub	r5,r5,r3
 102fea4:	2c4bc83a 	sub	r5,r5,r17
 102fea8:	3023883a 	mov	r17,r6
 102feac:	2880202c 	andhi	r2,r5,128
 102feb0:	10006d26 	beq	r2,zero,1030068 <__adddf3+0x32c>
 102feb4:	04c02034 	movhi	r19,128
 102feb8:	9cffffc4 	addi	r19,r19,-1
 102febc:	2ce6703a 	and	r19,r5,r19
 102fec0:	98007e26 	beq	r19,zero,10300bc <__adddf3+0x380>
 102fec4:	9809883a 	mov	r4,r19
 102fec8:	1022cf00 	call	1022cf0 <__clzsi2>
 102fecc:	10fffe04 	addi	r3,r2,-8
 102fed0:	010007c4 	movi	r4,31
 102fed4:	20c07f16 	blt	r4,r3,10300d4 <__adddf3+0x398>
 102fed8:	01400a04 	movi	r5,40
 102fedc:	2885c83a 	sub	r2,r5,r2
 102fee0:	888ad83a 	srl	r5,r17,r2
 102fee4:	98e6983a 	sll	r19,r19,r3
 102fee8:	88e2983a 	sll	r17,r17,r3
 102feec:	2ce6b03a 	or	r19,r5,r19
 102fef0:	1c007c16 	blt	r3,r16,10300e4 <__adddf3+0x3a8>
 102fef4:	1c21c83a 	sub	r16,r3,r16
 102fef8:	81400044 	addi	r5,r16,1
 102fefc:	00c007c4 	movi	r3,31
 102ff00:	19409816 	blt	r3,r5,1030164 <__adddf3+0x428>
 102ff04:	1c21c83a 	sub	r16,r3,r16
 102ff08:	8c08983a 	sll	r4,r17,r16
 102ff0c:	8946d83a 	srl	r3,r17,r5
 102ff10:	9c20983a 	sll	r16,r19,r16
 102ff14:	2008c03a 	cmpne	r4,r4,zero
 102ff18:	994ad83a 	srl	r5,r19,r5
 102ff1c:	1c06b03a 	or	r3,r3,r16
 102ff20:	1922b03a 	or	r17,r3,r4
 102ff24:	0021883a 	mov	r16,zero
 102ff28:	003fa306 	br	102fdb8 <_gp+0xffff2134>
 102ff2c:	2880202c 	andhi	r2,r5,128
 102ff30:	9007883a 	mov	r3,r18
 102ff34:	103fac1e 	bne	r2,zero,102fde8 <_gp+0xffff2164>
 102ff38:	2804977a 	slli	r2,r5,29
 102ff3c:	8822d0fa 	srli	r17,r17,3
 102ff40:	0101ffc4 	movi	r4,2047
 102ff44:	280ad0fa 	srli	r5,r5,3
 102ff48:	1444b03a 	or	r2,r2,r17
 102ff4c:	81002c26 	beq	r16,r4,1030000 <__adddf3+0x2c4>
 102ff50:	8120703a 	and	r16,r16,r4
 102ff54:	01000434 	movhi	r4,16
 102ff58:	213fffc4 	addi	r4,r4,-1
 102ff5c:	2908703a 	and	r4,r5,r4
 102ff60:	003fad06 	br	102fe18 <_gp+0xffff2194>
 102ff64:	8089c83a 	sub	r4,r16,r2
 102ff68:	01006a0e 	bge	zero,r4,1030114 <__adddf3+0x3d8>
 102ff6c:	10003326 	beq	r2,zero,103003c <__adddf3+0x300>
 102ff70:	0081ffc4 	movi	r2,2047
 102ff74:	80bf9026 	beq	r16,r2,102fdb8 <_gp+0xffff2134>
 102ff78:	42002034 	orhi	r8,r8,128
 102ff7c:	00800e04 	movi	r2,56
 102ff80:	1100b116 	blt	r2,r4,1030248 <__adddf3+0x50c>
 102ff84:	008007c4 	movi	r2,31
 102ff88:	1100e216 	blt	r2,r4,1030314 <__adddf3+0x5d8>
 102ff8c:	00800804 	movi	r2,32
 102ff90:	1105c83a 	sub	r2,r2,r4
 102ff94:	4092983a 	sll	r9,r8,r2
 102ff98:	310ed83a 	srl	r7,r6,r4
 102ff9c:	3084983a 	sll	r2,r6,r2
 102ffa0:	4110d83a 	srl	r8,r8,r4
 102ffa4:	49ccb03a 	or	r6,r9,r7
 102ffa8:	1004c03a 	cmpne	r2,r2,zero
 102ffac:	308cb03a 	or	r6,r6,r2
 102ffb0:	344d883a 	add	r6,r6,r17
 102ffb4:	3463803a 	cmpltu	r17,r6,r17
 102ffb8:	414b883a 	add	r5,r8,r5
 102ffbc:	2c4b883a 	add	r5,r5,r17
 102ffc0:	3023883a 	mov	r17,r6
 102ffc4:	2880202c 	andhi	r2,r5,128
 102ffc8:	10002726 	beq	r2,zero,1030068 <__adddf3+0x32c>
 102ffcc:	84000044 	addi	r16,r16,1
 102ffd0:	0081ffc4 	movi	r2,2047
 102ffd4:	8080ae26 	beq	r16,r2,1030290 <__adddf3+0x554>
 102ffd8:	00bfe034 	movhi	r2,65408
 102ffdc:	10bfffc4 	addi	r2,r2,-1
 102ffe0:	288a703a 	and	r5,r5,r2
 102ffe4:	880cd07a 	srli	r6,r17,1
 102ffe8:	280897fa 	slli	r4,r5,31
 102ffec:	88c0004c 	andi	r3,r17,1
 102fff0:	30e2b03a 	or	r17,r6,r3
 102fff4:	280ad07a 	srli	r5,r5,1
 102fff8:	8922b03a 	or	r17,r17,r4
 102fffc:	003f6e06 	br	102fdb8 <_gp+0xffff2134>
 1030000:	1148b03a 	or	r4,r2,r5
 1030004:	20003c26 	beq	r4,zero,10300f8 <__adddf3+0x3bc>
 1030008:	29000234 	orhi	r4,r5,8
 103000c:	01400434 	movhi	r5,16
 1030010:	297fffc4 	addi	r5,r5,-1
 1030014:	2148703a 	and	r4,r4,r5
 1030018:	003f7f06 	br	102fe18 <_gp+0xffff2194>
 103001c:	18ffffc4 	addi	r3,r3,-1
 1030020:	18004d1e 	bne	r3,zero,1030158 <__adddf3+0x41c>
 1030024:	898dc83a 	sub	r6,r17,r6
 1030028:	89a3803a 	cmpltu	r17,r17,r6
 103002c:	2a0bc83a 	sub	r5,r5,r8
 1030030:	2c4bc83a 	sub	r5,r5,r17
 1030034:	3023883a 	mov	r17,r6
 1030038:	003f9c06 	br	102feac <_gp+0xffff2228>
 103003c:	4184b03a 	or	r2,r8,r6
 1030040:	103f5d26 	beq	r2,zero,102fdb8 <_gp+0xffff2134>
 1030044:	213fffc4 	addi	r4,r4,-1
 1030048:	203fd926 	beq	r4,zero,102ffb0 <_gp+0xffff232c>
 103004c:	0081ffc4 	movi	r2,2047
 1030050:	80bfca1e 	bne	r16,r2,102ff7c <_gp+0xffff22f8>
 1030054:	003f5806 	br	102fdb8 <_gp+0xffff2134>
 1030058:	10c8b03a 	or	r4,r2,r3
 103005c:	20008b26 	beq	r4,zero,103028c <__adddf3+0x550>
 1030060:	100b883a 	mov	r5,r2
 1030064:	1823883a 	mov	r17,r3
 1030068:	888001cc 	andi	r2,r17,7
 103006c:	103f541e 	bne	r2,zero,102fdc0 <_gp+0xffff213c>
 1030070:	9007883a 	mov	r3,r18
 1030074:	003fb006 	br	102ff38 <_gp+0xffff22b4>
 1030078:	1800531e 	bne	r3,zero,10301c8 <__adddf3+0x48c>
 103007c:	80800044 	addi	r2,r16,1
 1030080:	1081ffcc 	andi	r2,r2,2047
 1030084:	00c00044 	movi	r3,1
 1030088:	1880990e 	bge	r3,r2,10302f0 <__adddf3+0x5b4>
 103008c:	8985c83a 	sub	r2,r17,r6
 1030090:	8887803a 	cmpltu	r3,r17,r2
 1030094:	2a27c83a 	sub	r19,r5,r8
 1030098:	98e7c83a 	sub	r19,r19,r3
 103009c:	98c0202c 	andhi	r3,r19,128
 10300a0:	18006226 	beq	r3,zero,103022c <__adddf3+0x4f0>
 10300a4:	3463c83a 	sub	r17,r6,r17
 10300a8:	4151c83a 	sub	r8,r8,r5
 10300ac:	344d803a 	cmpltu	r6,r6,r17
 10300b0:	41a7c83a 	sub	r19,r8,r6
 10300b4:	3825883a 	mov	r18,r7
 10300b8:	983f821e 	bne	r19,zero,102fec4 <_gp+0xffff2240>
 10300bc:	8809883a 	mov	r4,r17
 10300c0:	1022cf00 	call	1022cf0 <__clzsi2>
 10300c4:	10800804 	addi	r2,r2,32
 10300c8:	10fffe04 	addi	r3,r2,-8
 10300cc:	010007c4 	movi	r4,31
 10300d0:	20ff810e 	bge	r4,r3,102fed8 <_gp+0xffff2254>
 10300d4:	14fff604 	addi	r19,r2,-40
 10300d8:	8ce6983a 	sll	r19,r17,r19
 10300dc:	0023883a 	mov	r17,zero
 10300e0:	1c3f840e 	bge	r3,r16,102fef4 <_gp+0xffff2270>
 10300e4:	017fe034 	movhi	r5,65408
 10300e8:	297fffc4 	addi	r5,r5,-1
 10300ec:	80e1c83a 	sub	r16,r16,r3
 10300f0:	994a703a 	and	r5,r19,r5
 10300f4:	003f3006 	br	102fdb8 <_gp+0xffff2134>
 10300f8:	0009883a 	mov	r4,zero
 10300fc:	0005883a 	mov	r2,zero
 1030100:	003f4506 	br	102fe18 <_gp+0xffff2194>
 1030104:	418cb03a 	or	r6,r8,r6
 1030108:	300cc03a 	cmpne	r6,r6,zero
 103010c:	0007883a 	mov	r3,zero
 1030110:	003f6106 	br	102fe98 <_gp+0xffff2214>
 1030114:	2000921e 	bne	r4,zero,1030360 <__adddf3+0x624>
 1030118:	80800044 	addi	r2,r16,1
 103011c:	11c1ffcc 	andi	r7,r2,2047
 1030120:	01000044 	movi	r4,1
 1030124:	21c0610e 	bge	r4,r7,10302ac <__adddf3+0x570>
 1030128:	0101ffc4 	movi	r4,2047
 103012c:	1100a326 	beq	r2,r4,10303bc <__adddf3+0x680>
 1030130:	344d883a 	add	r6,r6,r17
 1030134:	3463803a 	cmpltu	r17,r6,r17
 1030138:	414b883a 	add	r5,r8,r5
 103013c:	2c4b883a 	add	r5,r5,r17
 1030140:	282297fa 	slli	r17,r5,31
 1030144:	300cd07a 	srli	r6,r6,1
 1030148:	280ad07a 	srli	r5,r5,1
 103014c:	1021883a 	mov	r16,r2
 1030150:	89a2b03a 	or	r17,r17,r6
 1030154:	003f1806 	br	102fdb8 <_gp+0xffff2134>
 1030158:	0081ffc4 	movi	r2,2047
 103015c:	80bf411e 	bne	r16,r2,102fe64 <_gp+0xffff21e0>
 1030160:	003f1506 	br	102fdb8 <_gp+0xffff2134>
 1030164:	80bff844 	addi	r2,r16,-31
 1030168:	00c00804 	movi	r3,32
 103016c:	9884d83a 	srl	r2,r19,r2
 1030170:	28c04a26 	beq	r5,r3,103029c <__adddf3+0x560>
 1030174:	00c00fc4 	movi	r3,63
 1030178:	1c21c83a 	sub	r16,r3,r16
 103017c:	9c26983a 	sll	r19,r19,r16
 1030180:	9c62b03a 	or	r17,r19,r17
 1030184:	8822c03a 	cmpne	r17,r17,zero
 1030188:	88a2b03a 	or	r17,r17,r2
 103018c:	000b883a 	mov	r5,zero
 1030190:	0021883a 	mov	r16,zero
 1030194:	003fb406 	br	1030068 <_gp+0xffff23e4>
 1030198:	18bff804 	addi	r2,r3,-32
 103019c:	01000804 	movi	r4,32
 10301a0:	4084d83a 	srl	r2,r8,r2
 10301a4:	19003f26 	beq	r3,r4,10302a4 <__adddf3+0x568>
 10301a8:	01001004 	movi	r4,64
 10301ac:	20c7c83a 	sub	r3,r4,r3
 10301b0:	40d0983a 	sll	r8,r8,r3
 10301b4:	418cb03a 	or	r6,r8,r6
 10301b8:	300cc03a 	cmpne	r6,r6,zero
 10301bc:	308cb03a 	or	r6,r6,r2
 10301c0:	0007883a 	mov	r3,zero
 10301c4:	003f3406 	br	102fe98 <_gp+0xffff2214>
 10301c8:	80002326 	beq	r16,zero,1030258 <__adddf3+0x51c>
 10301cc:	0101ffc4 	movi	r4,2047
 10301d0:	11005e26 	beq	r2,r4,103034c <__adddf3+0x610>
 10301d4:	00c7c83a 	sub	r3,zero,r3
 10301d8:	29402034 	orhi	r5,r5,128
 10301dc:	01000e04 	movi	r4,56
 10301e0:	20c07216 	blt	r4,r3,10303ac <__adddf3+0x670>
 10301e4:	010007c4 	movi	r4,31
 10301e8:	20c0ce16 	blt	r4,r3,1030524 <__adddf3+0x7e8>
 10301ec:	01000804 	movi	r4,32
 10301f0:	20c9c83a 	sub	r4,r4,r3
 10301f4:	2914983a 	sll	r10,r5,r4
 10301f8:	88d2d83a 	srl	r9,r17,r3
 10301fc:	8908983a 	sll	r4,r17,r4
 1030200:	28c6d83a 	srl	r3,r5,r3
 1030204:	5262b03a 	or	r17,r10,r9
 1030208:	2008c03a 	cmpne	r4,r4,zero
 103020c:	8922b03a 	or	r17,r17,r4
 1030210:	3463c83a 	sub	r17,r6,r17
 1030214:	40c7c83a 	sub	r3,r8,r3
 1030218:	344d803a 	cmpltu	r6,r6,r17
 103021c:	198bc83a 	sub	r5,r3,r6
 1030220:	1021883a 	mov	r16,r2
 1030224:	3825883a 	mov	r18,r7
 1030228:	003f2006 	br	102feac <_gp+0xffff2228>
 103022c:	9886b03a 	or	r3,r19,r2
 1030230:	1800141e 	bne	r3,zero,1030284 <__adddf3+0x548>
 1030234:	0007883a 	mov	r3,zero
 1030238:	000b883a 	mov	r5,zero
 103023c:	0023883a 	mov	r17,zero
 1030240:	0021883a 	mov	r16,zero
 1030244:	003f3c06 	br	102ff38 <_gp+0xffff22b4>
 1030248:	418cb03a 	or	r6,r8,r6
 103024c:	300cc03a 	cmpne	r6,r6,zero
 1030250:	0011883a 	mov	r8,zero
 1030254:	003f5606 	br	102ffb0 <_gp+0xffff232c>
 1030258:	2c48b03a 	or	r4,r5,r17
 103025c:	20003b26 	beq	r4,zero,103034c <__adddf3+0x610>
 1030260:	00c6303a 	nor	r3,zero,r3
 1030264:	1800371e 	bne	r3,zero,1030344 <__adddf3+0x608>
 1030268:	3463c83a 	sub	r17,r6,r17
 103026c:	414bc83a 	sub	r5,r8,r5
 1030270:	344d803a 	cmpltu	r6,r6,r17
 1030274:	298bc83a 	sub	r5,r5,r6
 1030278:	1021883a 	mov	r16,r2
 103027c:	3825883a 	mov	r18,r7
 1030280:	003f0a06 	br	102feac <_gp+0xffff2228>
 1030284:	1023883a 	mov	r17,r2
 1030288:	003f0d06 	br	102fec0 <_gp+0xffff223c>
 103028c:	0007883a 	mov	r3,zero
 1030290:	000b883a 	mov	r5,zero
 1030294:	0023883a 	mov	r17,zero
 1030298:	003f2706 	br	102ff38 <_gp+0xffff22b4>
 103029c:	0027883a 	mov	r19,zero
 10302a0:	003fb706 	br	1030180 <_gp+0xffff24fc>
 10302a4:	0011883a 	mov	r8,zero
 10302a8:	003fc206 	br	10301b4 <_gp+0xffff2530>
 10302ac:	2c44b03a 	or	r2,r5,r17
 10302b0:	8000871e 	bne	r16,zero,10304d0 <__adddf3+0x794>
 10302b4:	1000b126 	beq	r2,zero,103057c <__adddf3+0x840>
 10302b8:	4184b03a 	or	r2,r8,r6
 10302bc:	103ebe26 	beq	r2,zero,102fdb8 <_gp+0xffff2134>
 10302c0:	3445883a 	add	r2,r6,r17
 10302c4:	1463803a 	cmpltu	r17,r2,r17
 10302c8:	414b883a 	add	r5,r8,r5
 10302cc:	2c4b883a 	add	r5,r5,r17
 10302d0:	28c0202c 	andhi	r3,r5,128
 10302d4:	1023883a 	mov	r17,r2
 10302d8:	183f6326 	beq	r3,zero,1030068 <_gp+0xffff23e4>
 10302dc:	00bfe034 	movhi	r2,65408
 10302e0:	10bfffc4 	addi	r2,r2,-1
 10302e4:	2021883a 	mov	r16,r4
 10302e8:	288a703a 	and	r5,r5,r2
 10302ec:	003eb206 	br	102fdb8 <_gp+0xffff2134>
 10302f0:	2c44b03a 	or	r2,r5,r17
 10302f4:	8000251e 	bne	r16,zero,103038c <__adddf3+0x650>
 10302f8:	10004b1e 	bne	r2,zero,1030428 <__adddf3+0x6ec>
 10302fc:	4184b03a 	or	r2,r8,r6
 1030300:	103fe226 	beq	r2,zero,103028c <_gp+0xffff2608>
 1030304:	400b883a 	mov	r5,r8
 1030308:	3023883a 	mov	r17,r6
 103030c:	3825883a 	mov	r18,r7
 1030310:	003ea906 	br	102fdb8 <_gp+0xffff2134>
 1030314:	20bff804 	addi	r2,r4,-32
 1030318:	01c00804 	movi	r7,32
 103031c:	4084d83a 	srl	r2,r8,r2
 1030320:	21c07e26 	beq	r4,r7,103051c <__adddf3+0x7e0>
 1030324:	01c01004 	movi	r7,64
 1030328:	3909c83a 	sub	r4,r7,r4
 103032c:	4110983a 	sll	r8,r8,r4
 1030330:	418cb03a 	or	r6,r8,r6
 1030334:	300cc03a 	cmpne	r6,r6,zero
 1030338:	308cb03a 	or	r6,r6,r2
 103033c:	0011883a 	mov	r8,zero
 1030340:	003f1b06 	br	102ffb0 <_gp+0xffff232c>
 1030344:	0101ffc4 	movi	r4,2047
 1030348:	113fa41e 	bne	r2,r4,10301dc <_gp+0xffff2558>
 103034c:	400b883a 	mov	r5,r8
 1030350:	3023883a 	mov	r17,r6
 1030354:	1021883a 	mov	r16,r2
 1030358:	3825883a 	mov	r18,r7
 103035c:	003e9606 	br	102fdb8 <_gp+0xffff2134>
 1030360:	80001a1e 	bne	r16,zero,10303cc <__adddf3+0x690>
 1030364:	2c4eb03a 	or	r7,r5,r17
 1030368:	38005526 	beq	r7,zero,10304c0 <__adddf3+0x784>
 103036c:	0108303a 	nor	r4,zero,r4
 1030370:	2000511e 	bne	r4,zero,10304b8 <__adddf3+0x77c>
 1030374:	89a3883a 	add	r17,r17,r6
 1030378:	414b883a 	add	r5,r8,r5
 103037c:	898d803a 	cmpltu	r6,r17,r6
 1030380:	298b883a 	add	r5,r5,r6
 1030384:	1021883a 	mov	r16,r2
 1030388:	003f0e06 	br	102ffc4 <_gp+0xffff2340>
 103038c:	1000341e 	bne	r2,zero,1030460 <__adddf3+0x724>
 1030390:	4184b03a 	or	r2,r8,r6
 1030394:	10006f26 	beq	r2,zero,1030554 <__adddf3+0x818>
 1030398:	400b883a 	mov	r5,r8
 103039c:	3023883a 	mov	r17,r6
 10303a0:	3825883a 	mov	r18,r7
 10303a4:	0401ffc4 	movi	r16,2047
 10303a8:	003e8306 	br	102fdb8 <_gp+0xffff2134>
 10303ac:	2c62b03a 	or	r17,r5,r17
 10303b0:	8822c03a 	cmpne	r17,r17,zero
 10303b4:	0007883a 	mov	r3,zero
 10303b8:	003f9506 	br	1030210 <_gp+0xffff258c>
 10303bc:	1021883a 	mov	r16,r2
 10303c0:	000b883a 	mov	r5,zero
 10303c4:	0023883a 	mov	r17,zero
 10303c8:	003edb06 	br	102ff38 <_gp+0xffff22b4>
 10303cc:	01c1ffc4 	movi	r7,2047
 10303d0:	11c03b26 	beq	r2,r7,10304c0 <__adddf3+0x784>
 10303d4:	0109c83a 	sub	r4,zero,r4
 10303d8:	29402034 	orhi	r5,r5,128
 10303dc:	01c00e04 	movi	r7,56
 10303e0:	39006216 	blt	r7,r4,103056c <__adddf3+0x830>
 10303e4:	01c007c4 	movi	r7,31
 10303e8:	39006b16 	blt	r7,r4,1030598 <__adddf3+0x85c>
 10303ec:	01c00804 	movi	r7,32
 10303f0:	390fc83a 	sub	r7,r7,r4
 10303f4:	29d4983a 	sll	r10,r5,r7
 10303f8:	8912d83a 	srl	r9,r17,r4
 10303fc:	89ce983a 	sll	r7,r17,r7
 1030400:	2908d83a 	srl	r4,r5,r4
 1030404:	5262b03a 	or	r17,r10,r9
 1030408:	380ac03a 	cmpne	r5,r7,zero
 103040c:	8962b03a 	or	r17,r17,r5
 1030410:	89a3883a 	add	r17,r17,r6
 1030414:	2211883a 	add	r8,r4,r8
 1030418:	898d803a 	cmpltu	r6,r17,r6
 103041c:	418b883a 	add	r5,r8,r6
 1030420:	1021883a 	mov	r16,r2
 1030424:	003ee706 	br	102ffc4 <_gp+0xffff2340>
 1030428:	4184b03a 	or	r2,r8,r6
 103042c:	103e6226 	beq	r2,zero,102fdb8 <_gp+0xffff2134>
 1030430:	8987c83a 	sub	r3,r17,r6
 1030434:	88c9803a 	cmpltu	r4,r17,r3
 1030438:	2a05c83a 	sub	r2,r5,r8
 103043c:	1105c83a 	sub	r2,r2,r4
 1030440:	1100202c 	andhi	r4,r2,128
 1030444:	203f0426 	beq	r4,zero,1030058 <_gp+0xffff23d4>
 1030448:	3463c83a 	sub	r17,r6,r17
 103044c:	414bc83a 	sub	r5,r8,r5
 1030450:	344d803a 	cmpltu	r6,r6,r17
 1030454:	298bc83a 	sub	r5,r5,r6
 1030458:	3825883a 	mov	r18,r7
 103045c:	003e5606 	br	102fdb8 <_gp+0xffff2134>
 1030460:	4184b03a 	or	r2,r8,r6
 1030464:	10002b26 	beq	r2,zero,1030514 <__adddf3+0x7d8>
 1030468:	2804d0fa 	srli	r2,r5,3
 103046c:	8822d0fa 	srli	r17,r17,3
 1030470:	280a977a 	slli	r5,r5,29
 1030474:	10c0022c 	andhi	r3,r2,8
 1030478:	2c62b03a 	or	r17,r5,r17
 103047c:	18000826 	beq	r3,zero,10304a0 <__adddf3+0x764>
 1030480:	4008d0fa 	srli	r4,r8,3
 1030484:	20c0022c 	andhi	r3,r4,8
 1030488:	1800051e 	bne	r3,zero,10304a0 <__adddf3+0x764>
 103048c:	300cd0fa 	srli	r6,r6,3
 1030490:	4010977a 	slli	r8,r8,29
 1030494:	2005883a 	mov	r2,r4
 1030498:	3825883a 	mov	r18,r7
 103049c:	41a2b03a 	or	r17,r8,r6
 10304a0:	880ad77a 	srli	r5,r17,29
 10304a4:	100490fa 	slli	r2,r2,3
 10304a8:	882290fa 	slli	r17,r17,3
 10304ac:	0401ffc4 	movi	r16,2047
 10304b0:	288ab03a 	or	r5,r5,r2
 10304b4:	003e4006 	br	102fdb8 <_gp+0xffff2134>
 10304b8:	01c1ffc4 	movi	r7,2047
 10304bc:	11ffc71e 	bne	r2,r7,10303dc <_gp+0xffff2758>
 10304c0:	400b883a 	mov	r5,r8
 10304c4:	3023883a 	mov	r17,r6
 10304c8:	1021883a 	mov	r16,r2
 10304cc:	003e3a06 	br	102fdb8 <_gp+0xffff2134>
 10304d0:	10002d26 	beq	r2,zero,1030588 <__adddf3+0x84c>
 10304d4:	4184b03a 	or	r2,r8,r6
 10304d8:	10000e26 	beq	r2,zero,1030514 <__adddf3+0x7d8>
 10304dc:	2804d0fa 	srli	r2,r5,3
 10304e0:	8822d0fa 	srli	r17,r17,3
 10304e4:	280a977a 	slli	r5,r5,29
 10304e8:	10c0022c 	andhi	r3,r2,8
 10304ec:	2c62b03a 	or	r17,r5,r17
 10304f0:	183feb26 	beq	r3,zero,10304a0 <_gp+0xffff281c>
 10304f4:	4008d0fa 	srli	r4,r8,3
 10304f8:	20c0022c 	andhi	r3,r4,8
 10304fc:	183fe81e 	bne	r3,zero,10304a0 <_gp+0xffff281c>
 1030500:	300cd0fa 	srli	r6,r6,3
 1030504:	4010977a 	slli	r8,r8,29
 1030508:	2005883a 	mov	r2,r4
 103050c:	41a2b03a 	or	r17,r8,r6
 1030510:	003fe306 	br	10304a0 <_gp+0xffff281c>
 1030514:	0401ffc4 	movi	r16,2047
 1030518:	003e2706 	br	102fdb8 <_gp+0xffff2134>
 103051c:	0011883a 	mov	r8,zero
 1030520:	003f8306 	br	1030330 <_gp+0xffff26ac>
 1030524:	193ff804 	addi	r4,r3,-32
 1030528:	02400804 	movi	r9,32
 103052c:	2908d83a 	srl	r4,r5,r4
 1030530:	1a402526 	beq	r3,r9,10305c8 <__adddf3+0x88c>
 1030534:	02401004 	movi	r9,64
 1030538:	48c7c83a 	sub	r3,r9,r3
 103053c:	28ca983a 	sll	r5,r5,r3
 1030540:	2c62b03a 	or	r17,r5,r17
 1030544:	8822c03a 	cmpne	r17,r17,zero
 1030548:	8922b03a 	or	r17,r17,r4
 103054c:	0007883a 	mov	r3,zero
 1030550:	003f2f06 	br	1030210 <_gp+0xffff258c>
 1030554:	01402034 	movhi	r5,128
 1030558:	0007883a 	mov	r3,zero
 103055c:	297fffc4 	addi	r5,r5,-1
 1030560:	047ffe04 	movi	r17,-8
 1030564:	0401ffc4 	movi	r16,2047
 1030568:	003e7306 	br	102ff38 <_gp+0xffff22b4>
 103056c:	2c62b03a 	or	r17,r5,r17
 1030570:	8822c03a 	cmpne	r17,r17,zero
 1030574:	0009883a 	mov	r4,zero
 1030578:	003fa506 	br	1030410 <_gp+0xffff278c>
 103057c:	400b883a 	mov	r5,r8
 1030580:	3023883a 	mov	r17,r6
 1030584:	003e0c06 	br	102fdb8 <_gp+0xffff2134>
 1030588:	400b883a 	mov	r5,r8
 103058c:	3023883a 	mov	r17,r6
 1030590:	0401ffc4 	movi	r16,2047
 1030594:	003e0806 	br	102fdb8 <_gp+0xffff2134>
 1030598:	21fff804 	addi	r7,r4,-32
 103059c:	02400804 	movi	r9,32
 10305a0:	29ced83a 	srl	r7,r5,r7
 10305a4:	22400a26 	beq	r4,r9,10305d0 <__adddf3+0x894>
 10305a8:	02401004 	movi	r9,64
 10305ac:	4909c83a 	sub	r4,r9,r4
 10305b0:	290a983a 	sll	r5,r5,r4
 10305b4:	2c62b03a 	or	r17,r5,r17
 10305b8:	8822c03a 	cmpne	r17,r17,zero
 10305bc:	89e2b03a 	or	r17,r17,r7
 10305c0:	0009883a 	mov	r4,zero
 10305c4:	003f9206 	br	1030410 <_gp+0xffff278c>
 10305c8:	000b883a 	mov	r5,zero
 10305cc:	003fdc06 	br	1030540 <_gp+0xffff28bc>
 10305d0:	000b883a 	mov	r5,zero
 10305d4:	003ff706 	br	10305b4 <_gp+0xffff2930>

010305d8 <__eqdf2>:
 10305d8:	2804d53a 	srli	r2,r5,20
 10305dc:	3806d53a 	srli	r3,r7,20
 10305e0:	02000434 	movhi	r8,16
 10305e4:	423fffc4 	addi	r8,r8,-1
 10305e8:	1081ffcc 	andi	r2,r2,2047
 10305ec:	0241ffc4 	movi	r9,2047
 10305f0:	2a14703a 	and	r10,r5,r8
 10305f4:	18c1ffcc 	andi	r3,r3,2047
 10305f8:	3a10703a 	and	r8,r7,r8
 10305fc:	280ad7fa 	srli	r5,r5,31
 1030600:	380ed7fa 	srli	r7,r7,31
 1030604:	12400f26 	beq	r2,r9,1030644 <__eqdf2+0x6c>
 1030608:	0241ffc4 	movi	r9,2047
 103060c:	1a400326 	beq	r3,r9,103061c <__eqdf2+0x44>
 1030610:	10c00526 	beq	r2,r3,1030628 <__eqdf2+0x50>
 1030614:	00800044 	movi	r2,1
 1030618:	f800283a 	ret
 103061c:	4192b03a 	or	r9,r8,r6
 1030620:	483ffc1e 	bne	r9,zero,1030614 <_gp+0xffff2990>
 1030624:	10fffb1e 	bne	r2,r3,1030614 <_gp+0xffff2990>
 1030628:	523ffa1e 	bne	r10,r8,1030614 <_gp+0xffff2990>
 103062c:	21bff91e 	bne	r4,r6,1030614 <_gp+0xffff2990>
 1030630:	29c00826 	beq	r5,r7,1030654 <__eqdf2+0x7c>
 1030634:	103ff71e 	bne	r2,zero,1030614 <_gp+0xffff2990>
 1030638:	5104b03a 	or	r2,r10,r4
 103063c:	1004c03a 	cmpne	r2,r2,zero
 1030640:	f800283a 	ret
 1030644:	5112b03a 	or	r9,r10,r4
 1030648:	483fef26 	beq	r9,zero,1030608 <_gp+0xffff2984>
 103064c:	00800044 	movi	r2,1
 1030650:	f800283a 	ret
 1030654:	0005883a 	mov	r2,zero
 1030658:	f800283a 	ret

0103065c <__gedf2>:
 103065c:	2804d53a 	srli	r2,r5,20
 1030660:	3806d53a 	srli	r3,r7,20
 1030664:	02000434 	movhi	r8,16
 1030668:	423fffc4 	addi	r8,r8,-1
 103066c:	0241ffc4 	movi	r9,2047
 1030670:	1081ffcc 	andi	r2,r2,2047
 1030674:	2a14703a 	and	r10,r5,r8
 1030678:	1a46703a 	and	r3,r3,r9
 103067c:	3a10703a 	and	r8,r7,r8
 1030680:	280ad7fa 	srli	r5,r5,31
 1030684:	380ed7fa 	srli	r7,r7,31
 1030688:	12400b26 	beq	r2,r9,10306b8 <__gedf2+0x5c>
 103068c:	1a401626 	beq	r3,r9,10306e8 <__gedf2+0x8c>
 1030690:	10000c1e 	bne	r2,zero,10306c4 <__gedf2+0x68>
 1030694:	5112b03a 	or	r9,r10,r4
 1030698:	4813003a 	cmpeq	r9,r9,zero
 103069c:	4817883a 	mov	r11,r9
 10306a0:	18000c1e 	bne	r3,zero,10306d4 <__gedf2+0x78>
 10306a4:	4198b03a 	or	r12,r8,r6
 10306a8:	60000a1e 	bne	r12,zero,10306d4 <__gedf2+0x78>
 10306ac:	48001326 	beq	r9,zero,10306fc <__gedf2+0xa0>
 10306b0:	0005883a 	mov	r2,zero
 10306b4:	f800283a 	ret
 10306b8:	5112b03a 	or	r9,r10,r4
 10306bc:	4800191e 	bne	r9,zero,1030724 <__gedf2+0xc8>
 10306c0:	18800926 	beq	r3,r2,10306e8 <__gedf2+0x8c>
 10306c4:	18000b1e 	bne	r3,zero,10306f4 <__gedf2+0x98>
 10306c8:	4192b03a 	or	r9,r8,r6
 10306cc:	0017883a 	mov	r11,zero
 10306d0:	48000a26 	beq	r9,zero,10306fc <__gedf2+0xa0>
 10306d4:	39c03fcc 	andi	r7,r7,255
 10306d8:	58000726 	beq	r11,zero,10306f8 <__gedf2+0x9c>
 10306dc:	3800081e 	bne	r7,zero,1030700 <__gedf2+0xa4>
 10306e0:	00bfffc4 	movi	r2,-1
 10306e4:	f800283a 	ret
 10306e8:	4192b03a 	or	r9,r8,r6
 10306ec:	48000d1e 	bne	r9,zero,1030724 <__gedf2+0xc8>
 10306f0:	103fe826 	beq	r2,zero,1030694 <_gp+0xffff2a10>
 10306f4:	39c03fcc 	andi	r7,r7,255
 10306f8:	29c00326 	beq	r5,r7,1030708 <__gedf2+0xac>
 10306fc:	283ff81e 	bne	r5,zero,10306e0 <_gp+0xffff2a5c>
 1030700:	00800044 	movi	r2,1
 1030704:	f800283a 	ret
 1030708:	18bffc16 	blt	r3,r2,10306fc <_gp+0xffff2a78>
 103070c:	10c00316 	blt	r2,r3,103071c <__gedf2+0xc0>
 1030710:	42bffa36 	bltu	r8,r10,10306fc <_gp+0xffff2a78>
 1030714:	52000526 	beq	r10,r8,103072c <__gedf2+0xd0>
 1030718:	523fe52e 	bgeu	r10,r8,10306b0 <_gp+0xffff2a2c>
 103071c:	283ff026 	beq	r5,zero,10306e0 <_gp+0xffff2a5c>
 1030720:	003ff706 	br	1030700 <_gp+0xffff2a7c>
 1030724:	00bfff84 	movi	r2,-2
 1030728:	f800283a 	ret
 103072c:	313ff336 	bltu	r6,r4,10306fc <_gp+0xffff2a78>
 1030730:	21bfdf2e 	bgeu	r4,r6,10306b0 <_gp+0xffff2a2c>
 1030734:	283fea26 	beq	r5,zero,10306e0 <_gp+0xffff2a5c>
 1030738:	003ff106 	br	1030700 <_gp+0xffff2a7c>

0103073c <__ledf2>:
 103073c:	2804d53a 	srli	r2,r5,20
 1030740:	3810d53a 	srli	r8,r7,20
 1030744:	00c00434 	movhi	r3,16
 1030748:	18ffffc4 	addi	r3,r3,-1
 103074c:	0241ffc4 	movi	r9,2047
 1030750:	1081ffcc 	andi	r2,r2,2047
 1030754:	28d4703a 	and	r10,r5,r3
 1030758:	4250703a 	and	r8,r8,r9
 103075c:	38c6703a 	and	r3,r7,r3
 1030760:	280ad7fa 	srli	r5,r5,31
 1030764:	380ed7fa 	srli	r7,r7,31
 1030768:	12400b26 	beq	r2,r9,1030798 <__ledf2+0x5c>
 103076c:	42401926 	beq	r8,r9,10307d4 <__ledf2+0x98>
 1030770:	10000c1e 	bne	r2,zero,10307a4 <__ledf2+0x68>
 1030774:	5112b03a 	or	r9,r10,r4
 1030778:	4813003a 	cmpeq	r9,r9,zero
 103077c:	4817883a 	mov	r11,r9
 1030780:	40000f26 	beq	r8,zero,10307c0 <__ledf2+0x84>
 1030784:	39c03fcc 	andi	r7,r7,255
 1030788:	58001826 	beq	r11,zero,10307ec <__ledf2+0xb0>
 103078c:	38000a1e 	bne	r7,zero,10307b8 <__ledf2+0x7c>
 1030790:	00bfffc4 	movi	r2,-1
 1030794:	f800283a 	ret
 1030798:	5112b03a 	or	r9,r10,r4
 103079c:	48000f1e 	bne	r9,zero,10307dc <__ledf2+0xa0>
 10307a0:	40800c26 	beq	r8,r2,10307d4 <__ledf2+0x98>
 10307a4:	4000101e 	bne	r8,zero,10307e8 <__ledf2+0xac>
 10307a8:	1992b03a 	or	r9,r3,r6
 10307ac:	0017883a 	mov	r11,zero
 10307b0:	483ff41e 	bne	r9,zero,1030784 <_gp+0xffff2b00>
 10307b4:	283ff61e 	bne	r5,zero,1030790 <_gp+0xffff2b0c>
 10307b8:	00800044 	movi	r2,1
 10307bc:	f800283a 	ret
 10307c0:	1998b03a 	or	r12,r3,r6
 10307c4:	603fef1e 	bne	r12,zero,1030784 <_gp+0xffff2b00>
 10307c8:	483ffa26 	beq	r9,zero,10307b4 <_gp+0xffff2b30>
 10307cc:	0005883a 	mov	r2,zero
 10307d0:	f800283a 	ret
 10307d4:	1992b03a 	or	r9,r3,r6
 10307d8:	48000226 	beq	r9,zero,10307e4 <__ledf2+0xa8>
 10307dc:	00800084 	movi	r2,2
 10307e0:	f800283a 	ret
 10307e4:	103fe326 	beq	r2,zero,1030774 <_gp+0xffff2af0>
 10307e8:	39c03fcc 	andi	r7,r7,255
 10307ec:	29fff11e 	bne	r5,r7,10307b4 <_gp+0xffff2b30>
 10307f0:	40bff016 	blt	r8,r2,10307b4 <_gp+0xffff2b30>
 10307f4:	12000316 	blt	r2,r8,1030804 <__ledf2+0xc8>
 10307f8:	1abfee36 	bltu	r3,r10,10307b4 <_gp+0xffff2b30>
 10307fc:	50c00326 	beq	r10,r3,103080c <__ledf2+0xd0>
 1030800:	50fff22e 	bgeu	r10,r3,10307cc <_gp+0xffff2b48>
 1030804:	283fe226 	beq	r5,zero,1030790 <_gp+0xffff2b0c>
 1030808:	003feb06 	br	10307b8 <_gp+0xffff2b34>
 103080c:	313fe936 	bltu	r6,r4,10307b4 <_gp+0xffff2b30>
 1030810:	21bfee2e 	bgeu	r4,r6,10307cc <_gp+0xffff2b48>
 1030814:	283fde26 	beq	r5,zero,1030790 <_gp+0xffff2b0c>
 1030818:	003fe706 	br	10307b8 <_gp+0xffff2b34>

0103081c <__subdf3>:
 103081c:	00c00434 	movhi	r3,16
 1030820:	18ffffc4 	addi	r3,r3,-1
 1030824:	defffb04 	addi	sp,sp,-20
 1030828:	28d2703a 	and	r9,r5,r3
 103082c:	3814d53a 	srli	r10,r7,20
 1030830:	38c6703a 	and	r3,r7,r3
 1030834:	3004d77a 	srli	r2,r6,29
 1030838:	dc800215 	stw	r18,8(sp)
 103083c:	dc000015 	stw	r16,0(sp)
 1030840:	2824d7fa 	srli	r18,r5,31
 1030844:	2820d53a 	srli	r16,r5,20
 1030848:	481290fa 	slli	r9,r9,3
 103084c:	200ad77a 	srli	r5,r4,29
 1030850:	180690fa 	slli	r3,r3,3
 1030854:	dc400115 	stw	r17,4(sp)
 1030858:	dfc00415 	stw	ra,16(sp)
 103085c:	202290fa 	slli	r17,r4,3
 1030860:	dcc00315 	stw	r19,12(sp)
 1030864:	5281ffcc 	andi	r10,r10,2047
 1030868:	0101ffc4 	movi	r4,2047
 103086c:	9011883a 	mov	r8,r18
 1030870:	8401ffcc 	andi	r16,r16,2047
 1030874:	94803fcc 	andi	r18,r18,255
 1030878:	494ab03a 	or	r5,r9,r5
 103087c:	380ed7fa 	srli	r7,r7,31
 1030880:	1886b03a 	or	r3,r3,r2
 1030884:	300c90fa 	slli	r6,r6,3
 1030888:	51009026 	beq	r10,r4,1030acc <__subdf3+0x2b0>
 103088c:	39c0005c 	xori	r7,r7,1
 1030890:	8285c83a 	sub	r2,r16,r10
 1030894:	91c06f26 	beq	r18,r7,1030a54 <__subdf3+0x238>
 1030898:	0080b10e 	bge	zero,r2,1030b60 <__subdf3+0x344>
 103089c:	50002a1e 	bne	r10,zero,1030948 <__subdf3+0x12c>
 10308a0:	1988b03a 	or	r4,r3,r6
 10308a4:	2000941e 	bne	r4,zero,1030af8 <__subdf3+0x2dc>
 10308a8:	888001cc 	andi	r2,r17,7
 10308ac:	10005b26 	beq	r2,zero,1030a1c <__subdf3+0x200>
 10308b0:	88c003cc 	andi	r3,r17,15
 10308b4:	00800104 	movi	r2,4
 10308b8:	18805826 	beq	r3,r2,1030a1c <__subdf3+0x200>
 10308bc:	88c00104 	addi	r3,r17,4
 10308c0:	1c63803a 	cmpltu	r17,r3,r17
 10308c4:	2c4b883a 	add	r5,r5,r17
 10308c8:	2880202c 	andhi	r2,r5,128
 10308cc:	9200004c 	andi	r8,r18,1
 10308d0:	1823883a 	mov	r17,r3
 10308d4:	10005426 	beq	r2,zero,1030a28 <__subdf3+0x20c>
 10308d8:	84000044 	addi	r16,r16,1
 10308dc:	0081ffc4 	movi	r2,2047
 10308e0:	8080bf26 	beq	r16,r2,1030be0 <__subdf3+0x3c4>
 10308e4:	013fe034 	movhi	r4,65408
 10308e8:	213fffc4 	addi	r4,r4,-1
 10308ec:	290a703a 	and	r5,r5,r4
 10308f0:	2804977a 	slli	r2,r5,29
 10308f4:	280a927a 	slli	r5,r5,9
 10308f8:	8822d0fa 	srli	r17,r17,3
 10308fc:	8401ffcc 	andi	r16,r16,2047
 1030900:	2808d33a 	srli	r4,r5,12
 1030904:	1444b03a 	or	r2,r2,r17
 1030908:	8401ffcc 	andi	r16,r16,2047
 103090c:	800a953a 	slli	r5,r16,20
 1030910:	40c03fcc 	andi	r3,r8,255
 1030914:	04000434 	movhi	r16,16
 1030918:	180697fa 	slli	r3,r3,31
 103091c:	843fffc4 	addi	r16,r16,-1
 1030920:	2420703a 	and	r16,r4,r16
 1030924:	8160b03a 	or	r16,r16,r5
 1030928:	80c6b03a 	or	r3,r16,r3
 103092c:	dfc00417 	ldw	ra,16(sp)
 1030930:	dcc00317 	ldw	r19,12(sp)
 1030934:	dc800217 	ldw	r18,8(sp)
 1030938:	dc400117 	ldw	r17,4(sp)
 103093c:	dc000017 	ldw	r16,0(sp)
 1030940:	dec00504 	addi	sp,sp,20
 1030944:	f800283a 	ret
 1030948:	0101ffc4 	movi	r4,2047
 103094c:	813fd626 	beq	r16,r4,10308a8 <_gp+0xffff2c24>
 1030950:	18c02034 	orhi	r3,r3,128
 1030954:	01000e04 	movi	r4,56
 1030958:	2080a416 	blt	r4,r2,1030bec <__subdf3+0x3d0>
 103095c:	010007c4 	movi	r4,31
 1030960:	2080c716 	blt	r4,r2,1030c80 <__subdf3+0x464>
 1030964:	01000804 	movi	r4,32
 1030968:	2089c83a 	sub	r4,r4,r2
 103096c:	1910983a 	sll	r8,r3,r4
 1030970:	308ed83a 	srl	r7,r6,r2
 1030974:	3108983a 	sll	r4,r6,r4
 1030978:	1884d83a 	srl	r2,r3,r2
 103097c:	41ccb03a 	or	r6,r8,r7
 1030980:	2008c03a 	cmpne	r4,r4,zero
 1030984:	310cb03a 	or	r6,r6,r4
 1030988:	898dc83a 	sub	r6,r17,r6
 103098c:	89a3803a 	cmpltu	r17,r17,r6
 1030990:	288bc83a 	sub	r5,r5,r2
 1030994:	2c4bc83a 	sub	r5,r5,r17
 1030998:	3023883a 	mov	r17,r6
 103099c:	2880202c 	andhi	r2,r5,128
 10309a0:	10006b26 	beq	r2,zero,1030b50 <__subdf3+0x334>
 10309a4:	04c02034 	movhi	r19,128
 10309a8:	9cffffc4 	addi	r19,r19,-1
 10309ac:	2ce6703a 	and	r19,r5,r19
 10309b0:	98007c26 	beq	r19,zero,1030ba4 <__subdf3+0x388>
 10309b4:	9809883a 	mov	r4,r19
 10309b8:	1022cf00 	call	1022cf0 <__clzsi2>
 10309bc:	10fffe04 	addi	r3,r2,-8
 10309c0:	010007c4 	movi	r4,31
 10309c4:	20c07d16 	blt	r4,r3,1030bbc <__subdf3+0x3a0>
 10309c8:	01400a04 	movi	r5,40
 10309cc:	2885c83a 	sub	r2,r5,r2
 10309d0:	888ad83a 	srl	r5,r17,r2
 10309d4:	98e6983a 	sll	r19,r19,r3
 10309d8:	88e2983a 	sll	r17,r17,r3
 10309dc:	2ce6b03a 	or	r19,r5,r19
 10309e0:	1c007a16 	blt	r3,r16,1030bcc <__subdf3+0x3b0>
 10309e4:	1c21c83a 	sub	r16,r3,r16
 10309e8:	81400044 	addi	r5,r16,1
 10309ec:	00c007c4 	movi	r3,31
 10309f0:	19409616 	blt	r3,r5,1030c4c <__subdf3+0x430>
 10309f4:	1c21c83a 	sub	r16,r3,r16
 10309f8:	8c08983a 	sll	r4,r17,r16
 10309fc:	8946d83a 	srl	r3,r17,r5
 1030a00:	9c20983a 	sll	r16,r19,r16
 1030a04:	2008c03a 	cmpne	r4,r4,zero
 1030a08:	994ad83a 	srl	r5,r19,r5
 1030a0c:	1c06b03a 	or	r3,r3,r16
 1030a10:	1922b03a 	or	r17,r3,r4
 1030a14:	0021883a 	mov	r16,zero
 1030a18:	003fa306 	br	10308a8 <_gp+0xffff2c24>
 1030a1c:	2880202c 	andhi	r2,r5,128
 1030a20:	9200004c 	andi	r8,r18,1
 1030a24:	103fac1e 	bne	r2,zero,10308d8 <_gp+0xffff2c54>
 1030a28:	2804977a 	slli	r2,r5,29
 1030a2c:	8822d0fa 	srli	r17,r17,3
 1030a30:	00c1ffc4 	movi	r3,2047
 1030a34:	280ad0fa 	srli	r5,r5,3
 1030a38:	1444b03a 	or	r2,r2,r17
 1030a3c:	80c02726 	beq	r16,r3,1030adc <__subdf3+0x2c0>
 1030a40:	01000434 	movhi	r4,16
 1030a44:	213fffc4 	addi	r4,r4,-1
 1030a48:	80e0703a 	and	r16,r16,r3
 1030a4c:	2908703a 	and	r4,r5,r4
 1030a50:	003fad06 	br	1030908 <_gp+0xffff2c84>
 1030a54:	0080690e 	bge	zero,r2,1030bfc <__subdf3+0x3e0>
 1030a58:	50002f26 	beq	r10,zero,1030b18 <__subdf3+0x2fc>
 1030a5c:	0101ffc4 	movi	r4,2047
 1030a60:	813f9126 	beq	r16,r4,10308a8 <_gp+0xffff2c24>
 1030a64:	18c02034 	orhi	r3,r3,128
 1030a68:	01000e04 	movi	r4,56
 1030a6c:	2080b00e 	bge	r4,r2,1030d30 <__subdf3+0x514>
 1030a70:	198cb03a 	or	r6,r3,r6
 1030a74:	300ec03a 	cmpne	r7,r6,zero
 1030a78:	0005883a 	mov	r2,zero
 1030a7c:	3c4f883a 	add	r7,r7,r17
 1030a80:	3c63803a 	cmpltu	r17,r7,r17
 1030a84:	114b883a 	add	r5,r2,r5
 1030a88:	2c4b883a 	add	r5,r5,r17
 1030a8c:	3823883a 	mov	r17,r7
 1030a90:	2880202c 	andhi	r2,r5,128
 1030a94:	10002e26 	beq	r2,zero,1030b50 <__subdf3+0x334>
 1030a98:	84000044 	addi	r16,r16,1
 1030a9c:	0081ffc4 	movi	r2,2047
 1030aa0:	8080de26 	beq	r16,r2,1030e1c <__subdf3+0x600>
 1030aa4:	00bfe034 	movhi	r2,65408
 1030aa8:	10bfffc4 	addi	r2,r2,-1
 1030aac:	288a703a 	and	r5,r5,r2
 1030ab0:	880cd07a 	srli	r6,r17,1
 1030ab4:	280897fa 	slli	r4,r5,31
 1030ab8:	88c0004c 	andi	r3,r17,1
 1030abc:	30e2b03a 	or	r17,r6,r3
 1030ac0:	280ad07a 	srli	r5,r5,1
 1030ac4:	8922b03a 	or	r17,r17,r4
 1030ac8:	003f7706 	br	10308a8 <_gp+0xffff2c24>
 1030acc:	1984b03a 	or	r2,r3,r6
 1030ad0:	103f6e26 	beq	r2,zero,103088c <_gp+0xffff2c08>
 1030ad4:	39c03fcc 	andi	r7,r7,255
 1030ad8:	003f6d06 	br	1030890 <_gp+0xffff2c0c>
 1030adc:	1146b03a 	or	r3,r2,r5
 1030ae0:	18003f26 	beq	r3,zero,1030be0 <__subdf3+0x3c4>
 1030ae4:	00c00434 	movhi	r3,16
 1030ae8:	29000234 	orhi	r4,r5,8
 1030aec:	18ffffc4 	addi	r3,r3,-1
 1030af0:	20c8703a 	and	r4,r4,r3
 1030af4:	003f8406 	br	1030908 <_gp+0xffff2c84>
 1030af8:	10bfffc4 	addi	r2,r2,-1
 1030afc:	1000501e 	bne	r2,zero,1030c40 <__subdf3+0x424>
 1030b00:	898fc83a 	sub	r7,r17,r6
 1030b04:	89e3803a 	cmpltu	r17,r17,r7
 1030b08:	28cbc83a 	sub	r5,r5,r3
 1030b0c:	2c4bc83a 	sub	r5,r5,r17
 1030b10:	3823883a 	mov	r17,r7
 1030b14:	003fa106 	br	103099c <_gp+0xffff2d18>
 1030b18:	1988b03a 	or	r4,r3,r6
 1030b1c:	203f6226 	beq	r4,zero,10308a8 <_gp+0xffff2c24>
 1030b20:	10bfffc4 	addi	r2,r2,-1
 1030b24:	10009b1e 	bne	r2,zero,1030d94 <__subdf3+0x578>
 1030b28:	344d883a 	add	r6,r6,r17
 1030b2c:	3463803a 	cmpltu	r17,r6,r17
 1030b30:	194b883a 	add	r5,r3,r5
 1030b34:	2c4b883a 	add	r5,r5,r17
 1030b38:	3023883a 	mov	r17,r6
 1030b3c:	003fd406 	br	1030a90 <_gp+0xffff2e0c>
 1030b40:	1106b03a 	or	r3,r2,r4
 1030b44:	1800b426 	beq	r3,zero,1030e18 <__subdf3+0x5fc>
 1030b48:	100b883a 	mov	r5,r2
 1030b4c:	2023883a 	mov	r17,r4
 1030b50:	888001cc 	andi	r2,r17,7
 1030b54:	103f561e 	bne	r2,zero,10308b0 <_gp+0xffff2c2c>
 1030b58:	9200004c 	andi	r8,r18,1
 1030b5c:	003fb206 	br	1030a28 <_gp+0xffff2da4>
 1030b60:	1000531e 	bne	r2,zero,1030cb0 <__subdf3+0x494>
 1030b64:	80800044 	addi	r2,r16,1
 1030b68:	1081ffcc 	andi	r2,r2,2047
 1030b6c:	01000044 	movi	r4,1
 1030b70:	2080a00e 	bge	r4,r2,1030df4 <__subdf3+0x5d8>
 1030b74:	8985c83a 	sub	r2,r17,r6
 1030b78:	8889803a 	cmpltu	r4,r17,r2
 1030b7c:	28e7c83a 	sub	r19,r5,r3
 1030b80:	9927c83a 	sub	r19,r19,r4
 1030b84:	9900202c 	andhi	r4,r19,128
 1030b88:	20006226 	beq	r4,zero,1030d14 <__subdf3+0x4f8>
 1030b8c:	3463c83a 	sub	r17,r6,r17
 1030b90:	194bc83a 	sub	r5,r3,r5
 1030b94:	344d803a 	cmpltu	r6,r6,r17
 1030b98:	29a7c83a 	sub	r19,r5,r6
 1030b9c:	3825883a 	mov	r18,r7
 1030ba0:	983f841e 	bne	r19,zero,10309b4 <_gp+0xffff2d30>
 1030ba4:	8809883a 	mov	r4,r17
 1030ba8:	1022cf00 	call	1022cf0 <__clzsi2>
 1030bac:	10800804 	addi	r2,r2,32
 1030bb0:	10fffe04 	addi	r3,r2,-8
 1030bb4:	010007c4 	movi	r4,31
 1030bb8:	20ff830e 	bge	r4,r3,10309c8 <_gp+0xffff2d44>
 1030bbc:	14fff604 	addi	r19,r2,-40
 1030bc0:	8ce6983a 	sll	r19,r17,r19
 1030bc4:	0023883a 	mov	r17,zero
 1030bc8:	1c3f860e 	bge	r3,r16,10309e4 <_gp+0xffff2d60>
 1030bcc:	017fe034 	movhi	r5,65408
 1030bd0:	297fffc4 	addi	r5,r5,-1
 1030bd4:	80e1c83a 	sub	r16,r16,r3
 1030bd8:	994a703a 	and	r5,r19,r5
 1030bdc:	003f3206 	br	10308a8 <_gp+0xffff2c24>
 1030be0:	0009883a 	mov	r4,zero
 1030be4:	0005883a 	mov	r2,zero
 1030be8:	003f4706 	br	1030908 <_gp+0xffff2c84>
 1030bec:	198cb03a 	or	r6,r3,r6
 1030bf0:	300cc03a 	cmpne	r6,r6,zero
 1030bf4:	0005883a 	mov	r2,zero
 1030bf8:	003f6306 	br	1030988 <_gp+0xffff2d04>
 1030bfc:	10009d1e 	bne	r2,zero,1030e74 <__subdf3+0x658>
 1030c00:	81c00044 	addi	r7,r16,1
 1030c04:	3881ffcc 	andi	r2,r7,2047
 1030c08:	02400044 	movi	r9,1
 1030c0c:	4880680e 	bge	r9,r2,1030db0 <__subdf3+0x594>
 1030c10:	0081ffc4 	movi	r2,2047
 1030c14:	3880ae26 	beq	r7,r2,1030ed0 <__subdf3+0x6b4>
 1030c18:	344d883a 	add	r6,r6,r17
 1030c1c:	3463803a 	cmpltu	r17,r6,r17
 1030c20:	194b883a 	add	r5,r3,r5
 1030c24:	2c4b883a 	add	r5,r5,r17
 1030c28:	282297fa 	slli	r17,r5,31
 1030c2c:	300cd07a 	srli	r6,r6,1
 1030c30:	280ad07a 	srli	r5,r5,1
 1030c34:	3821883a 	mov	r16,r7
 1030c38:	89a2b03a 	or	r17,r17,r6
 1030c3c:	003f1a06 	br	10308a8 <_gp+0xffff2c24>
 1030c40:	0101ffc4 	movi	r4,2047
 1030c44:	813f431e 	bne	r16,r4,1030954 <_gp+0xffff2cd0>
 1030c48:	003f1706 	br	10308a8 <_gp+0xffff2c24>
 1030c4c:	80bff844 	addi	r2,r16,-31
 1030c50:	00c00804 	movi	r3,32
 1030c54:	9884d83a 	srl	r2,r19,r2
 1030c58:	28c05126 	beq	r5,r3,1030da0 <__subdf3+0x584>
 1030c5c:	00c00fc4 	movi	r3,63
 1030c60:	1c21c83a 	sub	r16,r3,r16
 1030c64:	9c26983a 	sll	r19,r19,r16
 1030c68:	9c62b03a 	or	r17,r19,r17
 1030c6c:	8822c03a 	cmpne	r17,r17,zero
 1030c70:	88a2b03a 	or	r17,r17,r2
 1030c74:	000b883a 	mov	r5,zero
 1030c78:	0021883a 	mov	r16,zero
 1030c7c:	003fb406 	br	1030b50 <_gp+0xffff2ecc>
 1030c80:	113ff804 	addi	r4,r2,-32
 1030c84:	01c00804 	movi	r7,32
 1030c88:	1908d83a 	srl	r4,r3,r4
 1030c8c:	11c04626 	beq	r2,r7,1030da8 <__subdf3+0x58c>
 1030c90:	01c01004 	movi	r7,64
 1030c94:	3885c83a 	sub	r2,r7,r2
 1030c98:	1884983a 	sll	r2,r3,r2
 1030c9c:	118cb03a 	or	r6,r2,r6
 1030ca0:	300cc03a 	cmpne	r6,r6,zero
 1030ca4:	310cb03a 	or	r6,r6,r4
 1030ca8:	0005883a 	mov	r2,zero
 1030cac:	003f3606 	br	1030988 <_gp+0xffff2d04>
 1030cb0:	80002b26 	beq	r16,zero,1030d60 <__subdf3+0x544>
 1030cb4:	0101ffc4 	movi	r4,2047
 1030cb8:	51006926 	beq	r10,r4,1030e60 <__subdf3+0x644>
 1030cbc:	0085c83a 	sub	r2,zero,r2
 1030cc0:	29402034 	orhi	r5,r5,128
 1030cc4:	01000e04 	movi	r4,56
 1030cc8:	20807d16 	blt	r4,r2,1030ec0 <__subdf3+0x6a4>
 1030ccc:	010007c4 	movi	r4,31
 1030cd0:	2080d916 	blt	r4,r2,1031038 <__subdf3+0x81c>
 1030cd4:	01000804 	movi	r4,32
 1030cd8:	2089c83a 	sub	r4,r4,r2
 1030cdc:	2912983a 	sll	r9,r5,r4
 1030ce0:	8890d83a 	srl	r8,r17,r2
 1030ce4:	8908983a 	sll	r4,r17,r4
 1030ce8:	2884d83a 	srl	r2,r5,r2
 1030cec:	4a22b03a 	or	r17,r9,r8
 1030cf0:	2008c03a 	cmpne	r4,r4,zero
 1030cf4:	8922b03a 	or	r17,r17,r4
 1030cf8:	3463c83a 	sub	r17,r6,r17
 1030cfc:	1885c83a 	sub	r2,r3,r2
 1030d00:	344d803a 	cmpltu	r6,r6,r17
 1030d04:	118bc83a 	sub	r5,r2,r6
 1030d08:	5021883a 	mov	r16,r10
 1030d0c:	3825883a 	mov	r18,r7
 1030d10:	003f2206 	br	103099c <_gp+0xffff2d18>
 1030d14:	9886b03a 	or	r3,r19,r2
 1030d18:	18001c1e 	bne	r3,zero,1030d8c <__subdf3+0x570>
 1030d1c:	0011883a 	mov	r8,zero
 1030d20:	000b883a 	mov	r5,zero
 1030d24:	0023883a 	mov	r17,zero
 1030d28:	0021883a 	mov	r16,zero
 1030d2c:	003f3e06 	br	1030a28 <_gp+0xffff2da4>
 1030d30:	010007c4 	movi	r4,31
 1030d34:	20803c16 	blt	r4,r2,1030e28 <__subdf3+0x60c>
 1030d38:	01000804 	movi	r4,32
 1030d3c:	2089c83a 	sub	r4,r4,r2
 1030d40:	1912983a 	sll	r9,r3,r4
 1030d44:	308ed83a 	srl	r7,r6,r2
 1030d48:	3108983a 	sll	r4,r6,r4
 1030d4c:	1884d83a 	srl	r2,r3,r2
 1030d50:	49ceb03a 	or	r7,r9,r7
 1030d54:	2008c03a 	cmpne	r4,r4,zero
 1030d58:	390eb03a 	or	r7,r7,r4
 1030d5c:	003f4706 	br	1030a7c <_gp+0xffff2df8>
 1030d60:	2c48b03a 	or	r4,r5,r17
 1030d64:	20003e26 	beq	r4,zero,1030e60 <__subdf3+0x644>
 1030d68:	0084303a 	nor	r2,zero,r2
 1030d6c:	10003a1e 	bne	r2,zero,1030e58 <__subdf3+0x63c>
 1030d70:	3463c83a 	sub	r17,r6,r17
 1030d74:	194bc83a 	sub	r5,r3,r5
 1030d78:	344d803a 	cmpltu	r6,r6,r17
 1030d7c:	298bc83a 	sub	r5,r5,r6
 1030d80:	5021883a 	mov	r16,r10
 1030d84:	3825883a 	mov	r18,r7
 1030d88:	003f0406 	br	103099c <_gp+0xffff2d18>
 1030d8c:	1023883a 	mov	r17,r2
 1030d90:	003f0706 	br	10309b0 <_gp+0xffff2d2c>
 1030d94:	0101ffc4 	movi	r4,2047
 1030d98:	813f331e 	bne	r16,r4,1030a68 <_gp+0xffff2de4>
 1030d9c:	003ec206 	br	10308a8 <_gp+0xffff2c24>
 1030da0:	0027883a 	mov	r19,zero
 1030da4:	003fb006 	br	1030c68 <_gp+0xffff2fe4>
 1030da8:	0005883a 	mov	r2,zero
 1030dac:	003fbb06 	br	1030c9c <_gp+0xffff3018>
 1030db0:	2c44b03a 	or	r2,r5,r17
 1030db4:	80008b1e 	bne	r16,zero,1030fe4 <__subdf3+0x7c8>
 1030db8:	1000b526 	beq	r2,zero,1031090 <__subdf3+0x874>
 1030dbc:	1984b03a 	or	r2,r3,r6
 1030dc0:	103eb926 	beq	r2,zero,10308a8 <_gp+0xffff2c24>
 1030dc4:	3449883a 	add	r4,r6,r17
 1030dc8:	2463803a 	cmpltu	r17,r4,r17
 1030dcc:	194b883a 	add	r5,r3,r5
 1030dd0:	2c4b883a 	add	r5,r5,r17
 1030dd4:	2880202c 	andhi	r2,r5,128
 1030dd8:	2023883a 	mov	r17,r4
 1030ddc:	103f5c26 	beq	r2,zero,1030b50 <_gp+0xffff2ecc>
 1030de0:	00bfe034 	movhi	r2,65408
 1030de4:	10bfffc4 	addi	r2,r2,-1
 1030de8:	4821883a 	mov	r16,r9
 1030dec:	288a703a 	and	r5,r5,r2
 1030df0:	003ead06 	br	10308a8 <_gp+0xffff2c24>
 1030df4:	2c44b03a 	or	r2,r5,r17
 1030df8:	8000291e 	bne	r16,zero,1030ea0 <__subdf3+0x684>
 1030dfc:	10004f1e 	bne	r2,zero,1030f3c <__subdf3+0x720>
 1030e00:	1984b03a 	or	r2,r3,r6
 1030e04:	10000426 	beq	r2,zero,1030e18 <__subdf3+0x5fc>
 1030e08:	180b883a 	mov	r5,r3
 1030e0c:	3023883a 	mov	r17,r6
 1030e10:	3825883a 	mov	r18,r7
 1030e14:	003ea406 	br	10308a8 <_gp+0xffff2c24>
 1030e18:	0011883a 	mov	r8,zero
 1030e1c:	000b883a 	mov	r5,zero
 1030e20:	0023883a 	mov	r17,zero
 1030e24:	003f0006 	br	1030a28 <_gp+0xffff2da4>
 1030e28:	11fff804 	addi	r7,r2,-32
 1030e2c:	19c8d83a 	srl	r4,r3,r7
 1030e30:	01c00804 	movi	r7,32
 1030e34:	11c07e26 	beq	r2,r7,1031030 <__subdf3+0x814>
 1030e38:	01c01004 	movi	r7,64
 1030e3c:	3885c83a 	sub	r2,r7,r2
 1030e40:	1884983a 	sll	r2,r3,r2
 1030e44:	118cb03a 	or	r6,r2,r6
 1030e48:	300ec03a 	cmpne	r7,r6,zero
 1030e4c:	390eb03a 	or	r7,r7,r4
 1030e50:	0005883a 	mov	r2,zero
 1030e54:	003f0906 	br	1030a7c <_gp+0xffff2df8>
 1030e58:	0101ffc4 	movi	r4,2047
 1030e5c:	513f991e 	bne	r10,r4,1030cc4 <_gp+0xffff3040>
 1030e60:	180b883a 	mov	r5,r3
 1030e64:	3023883a 	mov	r17,r6
 1030e68:	5021883a 	mov	r16,r10
 1030e6c:	3825883a 	mov	r18,r7
 1030e70:	003e8d06 	br	10308a8 <_gp+0xffff2c24>
 1030e74:	80001a1e 	bne	r16,zero,1030ee0 <__subdf3+0x6c4>
 1030e78:	2c48b03a 	or	r4,r5,r17
 1030e7c:	20005526 	beq	r4,zero,1030fd4 <__subdf3+0x7b8>
 1030e80:	0084303a 	nor	r2,zero,r2
 1030e84:	1000511e 	bne	r2,zero,1030fcc <__subdf3+0x7b0>
 1030e88:	89a3883a 	add	r17,r17,r6
 1030e8c:	194b883a 	add	r5,r3,r5
 1030e90:	898d803a 	cmpltu	r6,r17,r6
 1030e94:	298b883a 	add	r5,r5,r6
 1030e98:	5021883a 	mov	r16,r10
 1030e9c:	003efc06 	br	1030a90 <_gp+0xffff2e0c>
 1030ea0:	1000341e 	bne	r2,zero,1030f74 <__subdf3+0x758>
 1030ea4:	1984b03a 	or	r2,r3,r6
 1030ea8:	10006f26 	beq	r2,zero,1031068 <__subdf3+0x84c>
 1030eac:	180b883a 	mov	r5,r3
 1030eb0:	3023883a 	mov	r17,r6
 1030eb4:	3825883a 	mov	r18,r7
 1030eb8:	0401ffc4 	movi	r16,2047
 1030ebc:	003e7a06 	br	10308a8 <_gp+0xffff2c24>
 1030ec0:	2c62b03a 	or	r17,r5,r17
 1030ec4:	8822c03a 	cmpne	r17,r17,zero
 1030ec8:	0005883a 	mov	r2,zero
 1030ecc:	003f8a06 	br	1030cf8 <_gp+0xffff3074>
 1030ed0:	3821883a 	mov	r16,r7
 1030ed4:	000b883a 	mov	r5,zero
 1030ed8:	0023883a 	mov	r17,zero
 1030edc:	003ed206 	br	1030a28 <_gp+0xffff2da4>
 1030ee0:	0101ffc4 	movi	r4,2047
 1030ee4:	51003b26 	beq	r10,r4,1030fd4 <__subdf3+0x7b8>
 1030ee8:	0085c83a 	sub	r2,zero,r2
 1030eec:	29402034 	orhi	r5,r5,128
 1030ef0:	01000e04 	movi	r4,56
 1030ef4:	20806216 	blt	r4,r2,1031080 <__subdf3+0x864>
 1030ef8:	010007c4 	movi	r4,31
 1030efc:	20806b16 	blt	r4,r2,10310ac <__subdf3+0x890>
 1030f00:	01000804 	movi	r4,32
 1030f04:	2089c83a 	sub	r4,r4,r2
 1030f08:	2912983a 	sll	r9,r5,r4
 1030f0c:	888ed83a 	srl	r7,r17,r2
 1030f10:	8908983a 	sll	r4,r17,r4
 1030f14:	2884d83a 	srl	r2,r5,r2
 1030f18:	49e2b03a 	or	r17,r9,r7
 1030f1c:	2008c03a 	cmpne	r4,r4,zero
 1030f20:	8922b03a 	or	r17,r17,r4
 1030f24:	89a3883a 	add	r17,r17,r6
 1030f28:	10c5883a 	add	r2,r2,r3
 1030f2c:	898d803a 	cmpltu	r6,r17,r6
 1030f30:	118b883a 	add	r5,r2,r6
 1030f34:	5021883a 	mov	r16,r10
 1030f38:	003ed506 	br	1030a90 <_gp+0xffff2e0c>
 1030f3c:	1984b03a 	or	r2,r3,r6
 1030f40:	103e5926 	beq	r2,zero,10308a8 <_gp+0xffff2c24>
 1030f44:	8989c83a 	sub	r4,r17,r6
 1030f48:	8911803a 	cmpltu	r8,r17,r4
 1030f4c:	28c5c83a 	sub	r2,r5,r3
 1030f50:	1205c83a 	sub	r2,r2,r8
 1030f54:	1200202c 	andhi	r8,r2,128
 1030f58:	403ef926 	beq	r8,zero,1030b40 <_gp+0xffff2ebc>
 1030f5c:	3463c83a 	sub	r17,r6,r17
 1030f60:	194bc83a 	sub	r5,r3,r5
 1030f64:	344d803a 	cmpltu	r6,r6,r17
 1030f68:	298bc83a 	sub	r5,r5,r6
 1030f6c:	3825883a 	mov	r18,r7
 1030f70:	003e4d06 	br	10308a8 <_gp+0xffff2c24>
 1030f74:	1984b03a 	or	r2,r3,r6
 1030f78:	10002b26 	beq	r2,zero,1031028 <__subdf3+0x80c>
 1030f7c:	2808d0fa 	srli	r4,r5,3
 1030f80:	8822d0fa 	srli	r17,r17,3
 1030f84:	280a977a 	slli	r5,r5,29
 1030f88:	2080022c 	andhi	r2,r4,8
 1030f8c:	2c62b03a 	or	r17,r5,r17
 1030f90:	10000826 	beq	r2,zero,1030fb4 <__subdf3+0x798>
 1030f94:	1810d0fa 	srli	r8,r3,3
 1030f98:	4080022c 	andhi	r2,r8,8
 1030f9c:	1000051e 	bne	r2,zero,1030fb4 <__subdf3+0x798>
 1030fa0:	300cd0fa 	srli	r6,r6,3
 1030fa4:	1804977a 	slli	r2,r3,29
 1030fa8:	4009883a 	mov	r4,r8
 1030fac:	3825883a 	mov	r18,r7
 1030fb0:	11a2b03a 	or	r17,r2,r6
 1030fb4:	880ad77a 	srli	r5,r17,29
 1030fb8:	200890fa 	slli	r4,r4,3
 1030fbc:	882290fa 	slli	r17,r17,3
 1030fc0:	0401ffc4 	movi	r16,2047
 1030fc4:	290ab03a 	or	r5,r5,r4
 1030fc8:	003e3706 	br	10308a8 <_gp+0xffff2c24>
 1030fcc:	0101ffc4 	movi	r4,2047
 1030fd0:	513fc71e 	bne	r10,r4,1030ef0 <_gp+0xffff326c>
 1030fd4:	180b883a 	mov	r5,r3
 1030fd8:	3023883a 	mov	r17,r6
 1030fdc:	5021883a 	mov	r16,r10
 1030fe0:	003e3106 	br	10308a8 <_gp+0xffff2c24>
 1030fe4:	10002d26 	beq	r2,zero,103109c <__subdf3+0x880>
 1030fe8:	1984b03a 	or	r2,r3,r6
 1030fec:	10000e26 	beq	r2,zero,1031028 <__subdf3+0x80c>
 1030ff0:	2808d0fa 	srli	r4,r5,3
 1030ff4:	8822d0fa 	srli	r17,r17,3
 1030ff8:	280a977a 	slli	r5,r5,29
 1030ffc:	2080022c 	andhi	r2,r4,8
 1031000:	2c62b03a 	or	r17,r5,r17
 1031004:	103feb26 	beq	r2,zero,1030fb4 <_gp+0xffff3330>
 1031008:	180ed0fa 	srli	r7,r3,3
 103100c:	3880022c 	andhi	r2,r7,8
 1031010:	103fe81e 	bne	r2,zero,1030fb4 <_gp+0xffff3330>
 1031014:	300cd0fa 	srli	r6,r6,3
 1031018:	1804977a 	slli	r2,r3,29
 103101c:	3809883a 	mov	r4,r7
 1031020:	11a2b03a 	or	r17,r2,r6
 1031024:	003fe306 	br	1030fb4 <_gp+0xffff3330>
 1031028:	0401ffc4 	movi	r16,2047
 103102c:	003e1e06 	br	10308a8 <_gp+0xffff2c24>
 1031030:	0005883a 	mov	r2,zero
 1031034:	003f8306 	br	1030e44 <_gp+0xffff31c0>
 1031038:	113ff804 	addi	r4,r2,-32
 103103c:	02000804 	movi	r8,32
 1031040:	2908d83a 	srl	r4,r5,r4
 1031044:	12002526 	beq	r2,r8,10310dc <__subdf3+0x8c0>
 1031048:	02001004 	movi	r8,64
 103104c:	4085c83a 	sub	r2,r8,r2
 1031050:	288a983a 	sll	r5,r5,r2
 1031054:	2c62b03a 	or	r17,r5,r17
 1031058:	8822c03a 	cmpne	r17,r17,zero
 103105c:	8922b03a 	or	r17,r17,r4
 1031060:	0005883a 	mov	r2,zero
 1031064:	003f2406 	br	1030cf8 <_gp+0xffff3074>
 1031068:	01402034 	movhi	r5,128
 103106c:	0011883a 	mov	r8,zero
 1031070:	297fffc4 	addi	r5,r5,-1
 1031074:	047ffe04 	movi	r17,-8
 1031078:	0401ffc4 	movi	r16,2047
 103107c:	003e6a06 	br	1030a28 <_gp+0xffff2da4>
 1031080:	2c62b03a 	or	r17,r5,r17
 1031084:	8822c03a 	cmpne	r17,r17,zero
 1031088:	0005883a 	mov	r2,zero
 103108c:	003fa506 	br	1030f24 <_gp+0xffff32a0>
 1031090:	180b883a 	mov	r5,r3
 1031094:	3023883a 	mov	r17,r6
 1031098:	003e0306 	br	10308a8 <_gp+0xffff2c24>
 103109c:	180b883a 	mov	r5,r3
 10310a0:	3023883a 	mov	r17,r6
 10310a4:	0401ffc4 	movi	r16,2047
 10310a8:	003dff06 	br	10308a8 <_gp+0xffff2c24>
 10310ac:	113ff804 	addi	r4,r2,-32
 10310b0:	01c00804 	movi	r7,32
 10310b4:	2908d83a 	srl	r4,r5,r4
 10310b8:	11c00a26 	beq	r2,r7,10310e4 <__subdf3+0x8c8>
 10310bc:	01c01004 	movi	r7,64
 10310c0:	3885c83a 	sub	r2,r7,r2
 10310c4:	288a983a 	sll	r5,r5,r2
 10310c8:	2c62b03a 	or	r17,r5,r17
 10310cc:	8822c03a 	cmpne	r17,r17,zero
 10310d0:	8922b03a 	or	r17,r17,r4
 10310d4:	0005883a 	mov	r2,zero
 10310d8:	003f9206 	br	1030f24 <_gp+0xffff32a0>
 10310dc:	000b883a 	mov	r5,zero
 10310e0:	003fdc06 	br	1031054 <_gp+0xffff33d0>
 10310e4:	000b883a 	mov	r5,zero
 10310e8:	003ff706 	br	10310c8 <_gp+0xffff3444>

010310ec <__floatunsidf>:
 10310ec:	defffe04 	addi	sp,sp,-8
 10310f0:	dc000015 	stw	r16,0(sp)
 10310f4:	dfc00115 	stw	ra,4(sp)
 10310f8:	2021883a 	mov	r16,r4
 10310fc:	20001026 	beq	r4,zero,1031140 <__floatunsidf+0x54>
 1031100:	1022cf00 	call	1022cf0 <__clzsi2>
 1031104:	01410784 	movi	r5,1054
 1031108:	100d883a 	mov	r6,r2
 103110c:	288bc83a 	sub	r5,r5,r2
 1031110:	00800284 	movi	r2,10
 1031114:	11801616 	blt	r2,r6,1031170 <__floatunsidf+0x84>
 1031118:	008002c4 	movi	r2,11
 103111c:	1185c83a 	sub	r2,r2,r6
 1031120:	8084d83a 	srl	r2,r16,r2
 1031124:	00c00434 	movhi	r3,16
 1031128:	31c00544 	addi	r7,r6,21
 103112c:	18ffffc4 	addi	r3,r3,-1
 1031130:	81e0983a 	sll	r16,r16,r7
 1031134:	10cc703a 	and	r6,r2,r3
 1031138:	2941ffcc 	andi	r5,r5,2047
 103113c:	00000206 	br	1031148 <__floatunsidf+0x5c>
 1031140:	000b883a 	mov	r5,zero
 1031144:	000d883a 	mov	r6,zero
 1031148:	280a953a 	slli	r5,r5,20
 103114c:	00c00434 	movhi	r3,16
 1031150:	18ffffc4 	addi	r3,r3,-1
 1031154:	30c6703a 	and	r3,r6,r3
 1031158:	8005883a 	mov	r2,r16
 103115c:	1946b03a 	or	r3,r3,r5
 1031160:	dfc00117 	ldw	ra,4(sp)
 1031164:	dc000017 	ldw	r16,0(sp)
 1031168:	dec00204 	addi	sp,sp,8
 103116c:	f800283a 	ret
 1031170:	31bffd44 	addi	r6,r6,-11
 1031174:	818c983a 	sll	r6,r16,r6
 1031178:	00800434 	movhi	r2,16
 103117c:	10bfffc4 	addi	r2,r2,-1
 1031180:	2941ffcc 	andi	r5,r5,2047
 1031184:	0021883a 	mov	r16,zero
 1031188:	308c703a 	and	r6,r6,r2
 103118c:	003fee06 	br	1031148 <_gp+0xffff34c4>

01031190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1031190:	defffe04 	addi	sp,sp,-8
 1031194:	dfc00115 	stw	ra,4(sp)
 1031198:	df000015 	stw	fp,0(sp)
 103119c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10311a0:	008040f4 	movhi	r2,259
 10311a4:	10972c04 	addi	r2,r2,23728
 10311a8:	10800017 	ldw	r2,0(r2)
 10311ac:	10000526 	beq	r2,zero,10311c4 <alt_get_errno+0x34>
 10311b0:	008040f4 	movhi	r2,259
 10311b4:	10972c04 	addi	r2,r2,23728
 10311b8:	10800017 	ldw	r2,0(r2)
 10311bc:	103ee83a 	callr	r2
 10311c0:	00000206 	br	10311cc <alt_get_errno+0x3c>
 10311c4:	008040f4 	movhi	r2,259
 10311c8:	109df204 	addi	r2,r2,30664
}
 10311cc:	e037883a 	mov	sp,fp
 10311d0:	dfc00117 	ldw	ra,4(sp)
 10311d4:	df000017 	ldw	fp,0(sp)
 10311d8:	dec00204 	addi	sp,sp,8
 10311dc:	f800283a 	ret

010311e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10311e0:	defffb04 	addi	sp,sp,-20
 10311e4:	dfc00415 	stw	ra,16(sp)
 10311e8:	df000315 	stw	fp,12(sp)
 10311ec:	df000304 	addi	fp,sp,12
 10311f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10311f4:	e0bfff17 	ldw	r2,-4(fp)
 10311f8:	10000616 	blt	r2,zero,1031214 <close+0x34>
 10311fc:	e0bfff17 	ldw	r2,-4(fp)
 1031200:	10c00324 	muli	r3,r2,12
 1031204:	008040f4 	movhi	r2,259
 1031208:	1092a904 	addi	r2,r2,19108
 103120c:	1885883a 	add	r2,r3,r2
 1031210:	00000106 	br	1031218 <close+0x38>
 1031214:	0005883a 	mov	r2,zero
 1031218:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 103121c:	e0bffd17 	ldw	r2,-12(fp)
 1031220:	10001926 	beq	r2,zero,1031288 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1031224:	e0bffd17 	ldw	r2,-12(fp)
 1031228:	10800017 	ldw	r2,0(r2)
 103122c:	10800417 	ldw	r2,16(r2)
 1031230:	10000626 	beq	r2,zero,103124c <close+0x6c>
 1031234:	e0bffd17 	ldw	r2,-12(fp)
 1031238:	10800017 	ldw	r2,0(r2)
 103123c:	10800417 	ldw	r2,16(r2)
 1031240:	e13ffd17 	ldw	r4,-12(fp)
 1031244:	103ee83a 	callr	r2
 1031248:	00000106 	br	1031250 <close+0x70>
 103124c:	0005883a 	mov	r2,zero
 1031250:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1031254:	e13fff17 	ldw	r4,-4(fp)
 1031258:	10318dc0 	call	10318dc <alt_release_fd>
    if (rval < 0)
 103125c:	e0bffe17 	ldw	r2,-8(fp)
 1031260:	1000070e 	bge	r2,zero,1031280 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1031264:	10311900 	call	1031190 <alt_get_errno>
 1031268:	1007883a 	mov	r3,r2
 103126c:	e0bffe17 	ldw	r2,-8(fp)
 1031270:	0085c83a 	sub	r2,zero,r2
 1031274:	18800015 	stw	r2,0(r3)
      return -1;
 1031278:	00bfffc4 	movi	r2,-1
 103127c:	00000706 	br	103129c <close+0xbc>
    }
    return 0;
 1031280:	0005883a 	mov	r2,zero
 1031284:	00000506 	br	103129c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1031288:	10311900 	call	1031190 <alt_get_errno>
 103128c:	1007883a 	mov	r3,r2
 1031290:	00801444 	movi	r2,81
 1031294:	18800015 	stw	r2,0(r3)
    return -1;
 1031298:	00bfffc4 	movi	r2,-1
  }
}
 103129c:	e037883a 	mov	sp,fp
 10312a0:	dfc00117 	ldw	ra,4(sp)
 10312a4:	df000017 	ldw	fp,0(sp)
 10312a8:	dec00204 	addi	sp,sp,8
 10312ac:	f800283a 	ret

010312b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10312b0:	defffc04 	addi	sp,sp,-16
 10312b4:	df000315 	stw	fp,12(sp)
 10312b8:	df000304 	addi	fp,sp,12
 10312bc:	e13ffd15 	stw	r4,-12(fp)
 10312c0:	e17ffe15 	stw	r5,-8(fp)
 10312c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10312c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10312cc:	e037883a 	mov	sp,fp
 10312d0:	df000017 	ldw	fp,0(sp)
 10312d4:	dec00104 	addi	sp,sp,4
 10312d8:	f800283a 	ret

010312dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10312dc:	defffe04 	addi	sp,sp,-8
 10312e0:	dfc00115 	stw	ra,4(sp)
 10312e4:	df000015 	stw	fp,0(sp)
 10312e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10312ec:	008040f4 	movhi	r2,259
 10312f0:	10972c04 	addi	r2,r2,23728
 10312f4:	10800017 	ldw	r2,0(r2)
 10312f8:	10000526 	beq	r2,zero,1031310 <alt_get_errno+0x34>
 10312fc:	008040f4 	movhi	r2,259
 1031300:	10972c04 	addi	r2,r2,23728
 1031304:	10800017 	ldw	r2,0(r2)
 1031308:	103ee83a 	callr	r2
 103130c:	00000206 	br	1031318 <alt_get_errno+0x3c>
 1031310:	008040f4 	movhi	r2,259
 1031314:	109df204 	addi	r2,r2,30664
}
 1031318:	e037883a 	mov	sp,fp
 103131c:	dfc00117 	ldw	ra,4(sp)
 1031320:	df000017 	ldw	fp,0(sp)
 1031324:	dec00204 	addi	sp,sp,8
 1031328:	f800283a 	ret

0103132c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 103132c:	defffb04 	addi	sp,sp,-20
 1031330:	dfc00415 	stw	ra,16(sp)
 1031334:	df000315 	stw	fp,12(sp)
 1031338:	df000304 	addi	fp,sp,12
 103133c:	e13ffe15 	stw	r4,-8(fp)
 1031340:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031344:	e0bffe17 	ldw	r2,-8(fp)
 1031348:	10000616 	blt	r2,zero,1031364 <fstat+0x38>
 103134c:	e0bffe17 	ldw	r2,-8(fp)
 1031350:	10c00324 	muli	r3,r2,12
 1031354:	008040f4 	movhi	r2,259
 1031358:	1092a904 	addi	r2,r2,19108
 103135c:	1885883a 	add	r2,r3,r2
 1031360:	00000106 	br	1031368 <fstat+0x3c>
 1031364:	0005883a 	mov	r2,zero
 1031368:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 103136c:	e0bffd17 	ldw	r2,-12(fp)
 1031370:	10001026 	beq	r2,zero,10313b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1031374:	e0bffd17 	ldw	r2,-12(fp)
 1031378:	10800017 	ldw	r2,0(r2)
 103137c:	10800817 	ldw	r2,32(r2)
 1031380:	10000726 	beq	r2,zero,10313a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1031384:	e0bffd17 	ldw	r2,-12(fp)
 1031388:	10800017 	ldw	r2,0(r2)
 103138c:	10800817 	ldw	r2,32(r2)
 1031390:	e13ffd17 	ldw	r4,-12(fp)
 1031394:	e17fff17 	ldw	r5,-4(fp)
 1031398:	103ee83a 	callr	r2
 103139c:	00000a06 	br	10313c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10313a0:	e0bfff17 	ldw	r2,-4(fp)
 10313a4:	00c80004 	movi	r3,8192
 10313a8:	10c00115 	stw	r3,4(r2)
      return 0;
 10313ac:	0005883a 	mov	r2,zero
 10313b0:	00000506 	br	10313c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10313b4:	10312dc0 	call	10312dc <alt_get_errno>
 10313b8:	1007883a 	mov	r3,r2
 10313bc:	00801444 	movi	r2,81
 10313c0:	18800015 	stw	r2,0(r3)
    return -1;
 10313c4:	00bfffc4 	movi	r2,-1
  }
}
 10313c8:	e037883a 	mov	sp,fp
 10313cc:	dfc00117 	ldw	ra,4(sp)
 10313d0:	df000017 	ldw	fp,0(sp)
 10313d4:	dec00204 	addi	sp,sp,8
 10313d8:	f800283a 	ret

010313dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10313dc:	defffe04 	addi	sp,sp,-8
 10313e0:	dfc00115 	stw	ra,4(sp)
 10313e4:	df000015 	stw	fp,0(sp)
 10313e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10313ec:	008040f4 	movhi	r2,259
 10313f0:	10972c04 	addi	r2,r2,23728
 10313f4:	10800017 	ldw	r2,0(r2)
 10313f8:	10000526 	beq	r2,zero,1031410 <alt_get_errno+0x34>
 10313fc:	008040f4 	movhi	r2,259
 1031400:	10972c04 	addi	r2,r2,23728
 1031404:	10800017 	ldw	r2,0(r2)
 1031408:	103ee83a 	callr	r2
 103140c:	00000206 	br	1031418 <alt_get_errno+0x3c>
 1031410:	008040f4 	movhi	r2,259
 1031414:	109df204 	addi	r2,r2,30664
}
 1031418:	e037883a 	mov	sp,fp
 103141c:	dfc00117 	ldw	ra,4(sp)
 1031420:	df000017 	ldw	fp,0(sp)
 1031424:	dec00204 	addi	sp,sp,8
 1031428:	f800283a 	ret

0103142c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 103142c:	deffed04 	addi	sp,sp,-76
 1031430:	dfc01215 	stw	ra,72(sp)
 1031434:	df001115 	stw	fp,68(sp)
 1031438:	df001104 	addi	fp,sp,68
 103143c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031440:	e0bfff17 	ldw	r2,-4(fp)
 1031444:	10000616 	blt	r2,zero,1031460 <isatty+0x34>
 1031448:	e0bfff17 	ldw	r2,-4(fp)
 103144c:	10c00324 	muli	r3,r2,12
 1031450:	008040f4 	movhi	r2,259
 1031454:	1092a904 	addi	r2,r2,19108
 1031458:	1885883a 	add	r2,r3,r2
 103145c:	00000106 	br	1031464 <isatty+0x38>
 1031460:	0005883a 	mov	r2,zero
 1031464:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1031468:	e0bfef17 	ldw	r2,-68(fp)
 103146c:	10000e26 	beq	r2,zero,10314a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1031470:	e0bfef17 	ldw	r2,-68(fp)
 1031474:	10800017 	ldw	r2,0(r2)
 1031478:	10800817 	ldw	r2,32(r2)
 103147c:	1000021e 	bne	r2,zero,1031488 <isatty+0x5c>
    {
      return 1;
 1031480:	00800044 	movi	r2,1
 1031484:	00000d06 	br	10314bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1031488:	e0bff004 	addi	r2,fp,-64
 103148c:	e13fff17 	ldw	r4,-4(fp)
 1031490:	100b883a 	mov	r5,r2
 1031494:	103132c0 	call	103132c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1031498:	e0bff117 	ldw	r2,-60(fp)
 103149c:	10880020 	cmpeqi	r2,r2,8192
 10314a0:	10803fcc 	andi	r2,r2,255
 10314a4:	00000506 	br	10314bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10314a8:	10313dc0 	call	10313dc <alt_get_errno>
 10314ac:	1007883a 	mov	r3,r2
 10314b0:	00801444 	movi	r2,81
 10314b4:	18800015 	stw	r2,0(r3)
    return 0;
 10314b8:	0005883a 	mov	r2,zero
  }
}
 10314bc:	e037883a 	mov	sp,fp
 10314c0:	dfc00117 	ldw	ra,4(sp)
 10314c4:	df000017 	ldw	fp,0(sp)
 10314c8:	dec00204 	addi	sp,sp,8
 10314cc:	f800283a 	ret

010314d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10314d0:	defffc04 	addi	sp,sp,-16
 10314d4:	df000315 	stw	fp,12(sp)
 10314d8:	df000304 	addi	fp,sp,12
 10314dc:	e13ffd15 	stw	r4,-12(fp)
 10314e0:	e17ffe15 	stw	r5,-8(fp)
 10314e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10314e8:	e0fffe17 	ldw	r3,-8(fp)
 10314ec:	e0bffd17 	ldw	r2,-12(fp)
 10314f0:	18800c26 	beq	r3,r2,1031524 <alt_load_section+0x54>
  {
    while( to != end )
 10314f4:	00000806 	br	1031518 <alt_load_section+0x48>
    {
      *to++ = *from++;
 10314f8:	e0bffe17 	ldw	r2,-8(fp)
 10314fc:	10c00104 	addi	r3,r2,4
 1031500:	e0fffe15 	stw	r3,-8(fp)
 1031504:	e0fffd17 	ldw	r3,-12(fp)
 1031508:	19000104 	addi	r4,r3,4
 103150c:	e13ffd15 	stw	r4,-12(fp)
 1031510:	18c00017 	ldw	r3,0(r3)
 1031514:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1031518:	e0fffe17 	ldw	r3,-8(fp)
 103151c:	e0bfff17 	ldw	r2,-4(fp)
 1031520:	18bff51e 	bne	r3,r2,10314f8 <_gp+0xffff3874>
    {
      *to++ = *from++;
    }
  }
}
 1031524:	e037883a 	mov	sp,fp
 1031528:	df000017 	ldw	fp,0(sp)
 103152c:	dec00104 	addi	sp,sp,4
 1031530:	f800283a 	ret

01031534 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1031534:	defffe04 	addi	sp,sp,-8
 1031538:	dfc00115 	stw	ra,4(sp)
 103153c:	df000015 	stw	fp,0(sp)
 1031540:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1031544:	010040f4 	movhi	r4,259
 1031548:	21173104 	addi	r4,r4,23748
 103154c:	014040f4 	movhi	r5,259
 1031550:	29507604 	addi	r5,r5,16856
 1031554:	018040f4 	movhi	r6,259
 1031558:	31973104 	addi	r6,r6,23748
 103155c:	10314d00 	call	10314d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1031560:	010040b4 	movhi	r4,258
 1031564:	21000804 	addi	r4,r4,32
 1031568:	014040b4 	movhi	r5,258
 103156c:	29400804 	addi	r5,r5,32
 1031570:	018040b4 	movhi	r6,258
 1031574:	31809004 	addi	r6,r6,576
 1031578:	10314d00 	call	10314d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 103157c:	010040f4 	movhi	r4,259
 1031580:	210ee204 	addi	r4,r4,15240
 1031584:	014040f4 	movhi	r5,259
 1031588:	294ee204 	addi	r5,r5,15240
 103158c:	018040f4 	movhi	r6,259
 1031590:	31907604 	addi	r6,r6,16856
 1031594:	10314d00 	call	10314d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1031598:	1032a0c0 	call	1032a0c <alt_dcache_flush_all>
  alt_icache_flush_all();
 103159c:	1032bfc0 	call	1032bfc <alt_icache_flush_all>
}
 10315a0:	e037883a 	mov	sp,fp
 10315a4:	dfc00117 	ldw	ra,4(sp)
 10315a8:	df000017 	ldw	fp,0(sp)
 10315ac:	dec00204 	addi	sp,sp,8
 10315b0:	f800283a 	ret

010315b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10315b4:	defffe04 	addi	sp,sp,-8
 10315b8:	dfc00115 	stw	ra,4(sp)
 10315bc:	df000015 	stw	fp,0(sp)
 10315c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10315c4:	008040f4 	movhi	r2,259
 10315c8:	10972c04 	addi	r2,r2,23728
 10315cc:	10800017 	ldw	r2,0(r2)
 10315d0:	10000526 	beq	r2,zero,10315e8 <alt_get_errno+0x34>
 10315d4:	008040f4 	movhi	r2,259
 10315d8:	10972c04 	addi	r2,r2,23728
 10315dc:	10800017 	ldw	r2,0(r2)
 10315e0:	103ee83a 	callr	r2
 10315e4:	00000206 	br	10315f0 <alt_get_errno+0x3c>
 10315e8:	008040f4 	movhi	r2,259
 10315ec:	109df204 	addi	r2,r2,30664
}
 10315f0:	e037883a 	mov	sp,fp
 10315f4:	dfc00117 	ldw	ra,4(sp)
 10315f8:	df000017 	ldw	fp,0(sp)
 10315fc:	dec00204 	addi	sp,sp,8
 1031600:	f800283a 	ret

01031604 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1031604:	defff904 	addi	sp,sp,-28
 1031608:	dfc00615 	stw	ra,24(sp)
 103160c:	df000515 	stw	fp,20(sp)
 1031610:	df000504 	addi	fp,sp,20
 1031614:	e13ffd15 	stw	r4,-12(fp)
 1031618:	e17ffe15 	stw	r5,-8(fp)
 103161c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1031620:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031624:	e0bffd17 	ldw	r2,-12(fp)
 1031628:	10000616 	blt	r2,zero,1031644 <lseek+0x40>
 103162c:	e0bffd17 	ldw	r2,-12(fp)
 1031630:	10c00324 	muli	r3,r2,12
 1031634:	008040f4 	movhi	r2,259
 1031638:	1092a904 	addi	r2,r2,19108
 103163c:	1885883a 	add	r2,r3,r2
 1031640:	00000106 	br	1031648 <lseek+0x44>
 1031644:	0005883a 	mov	r2,zero
 1031648:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 103164c:	e0bffc17 	ldw	r2,-16(fp)
 1031650:	10001026 	beq	r2,zero,1031694 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1031654:	e0bffc17 	ldw	r2,-16(fp)
 1031658:	10800017 	ldw	r2,0(r2)
 103165c:	10800717 	ldw	r2,28(r2)
 1031660:	10000926 	beq	r2,zero,1031688 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1031664:	e0bffc17 	ldw	r2,-16(fp)
 1031668:	10800017 	ldw	r2,0(r2)
 103166c:	10800717 	ldw	r2,28(r2)
 1031670:	e13ffc17 	ldw	r4,-16(fp)
 1031674:	e17ffe17 	ldw	r5,-8(fp)
 1031678:	e1bfff17 	ldw	r6,-4(fp)
 103167c:	103ee83a 	callr	r2
 1031680:	e0bffb15 	stw	r2,-20(fp)
 1031684:	00000506 	br	103169c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1031688:	00bfde84 	movi	r2,-134
 103168c:	e0bffb15 	stw	r2,-20(fp)
 1031690:	00000206 	br	103169c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1031694:	00bfebc4 	movi	r2,-81
 1031698:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 103169c:	e0bffb17 	ldw	r2,-20(fp)
 10316a0:	1000070e 	bge	r2,zero,10316c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 10316a4:	10315b40 	call	10315b4 <alt_get_errno>
 10316a8:	1007883a 	mov	r3,r2
 10316ac:	e0bffb17 	ldw	r2,-20(fp)
 10316b0:	0085c83a 	sub	r2,zero,r2
 10316b4:	18800015 	stw	r2,0(r3)
    rc = -1;
 10316b8:	00bfffc4 	movi	r2,-1
 10316bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 10316c0:	e0bffb17 	ldw	r2,-20(fp)
}
 10316c4:	e037883a 	mov	sp,fp
 10316c8:	dfc00117 	ldw	ra,4(sp)
 10316cc:	df000017 	ldw	fp,0(sp)
 10316d0:	dec00204 	addi	sp,sp,8
 10316d4:	f800283a 	ret

010316d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10316d8:	defffd04 	addi	sp,sp,-12
 10316dc:	dfc00215 	stw	ra,8(sp)
 10316e0:	df000115 	stw	fp,4(sp)
 10316e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10316e8:	0009883a 	mov	r4,zero
 10316ec:	1031b9c0 	call	1031b9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10316f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10316f4:	1031bd00 	call	1031bd0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10316f8:	010040f4 	movhi	r4,259
 10316fc:	21106e04 	addi	r4,r4,16824
 1031700:	014040f4 	movhi	r5,259
 1031704:	29506e04 	addi	r5,r5,16824
 1031708:	018040f4 	movhi	r6,259
 103170c:	31906e04 	addi	r6,r6,16824
 1031710:	1032fbc0 	call	1032fbc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1031714:	1032b440 	call	1032b44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1031718:	010040f4 	movhi	r4,259
 103171c:	210ae804 	addi	r4,r4,11168
 1031720:	10337e40 	call	10337e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1031724:	d126d217 	ldw	r4,-25784(gp)
 1031728:	d0e6d317 	ldw	r3,-25780(gp)
 103172c:	d0a6d417 	ldw	r2,-25776(gp)
 1031730:	180b883a 	mov	r5,r3
 1031734:	100d883a 	mov	r6,r2
 1031738:	102137c0 	call	102137c <main>
 103173c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1031740:	01000044 	movi	r4,1
 1031744:	10311e00 	call	10311e0 <close>
  exit (result);
 1031748:	e13fff17 	ldw	r4,-4(fp)
 103174c:	10337f80 	call	10337f8 <exit>

01031750 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1031750:	defffe04 	addi	sp,sp,-8
 1031754:	df000115 	stw	fp,4(sp)
 1031758:	df000104 	addi	fp,sp,4
 103175c:	e13fff15 	stw	r4,-4(fp)
}
 1031760:	e037883a 	mov	sp,fp
 1031764:	df000017 	ldw	fp,0(sp)
 1031768:	dec00104 	addi	sp,sp,4
 103176c:	f800283a 	ret

01031770 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1031770:	defffe04 	addi	sp,sp,-8
 1031774:	df000115 	stw	fp,4(sp)
 1031778:	df000104 	addi	fp,sp,4
 103177c:	e13fff15 	stw	r4,-4(fp)
}
 1031780:	e037883a 	mov	sp,fp
 1031784:	df000017 	ldw	fp,0(sp)
 1031788:	dec00104 	addi	sp,sp,4
 103178c:	f800283a 	ret

01031790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1031790:	defffe04 	addi	sp,sp,-8
 1031794:	dfc00115 	stw	ra,4(sp)
 1031798:	df000015 	stw	fp,0(sp)
 103179c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10317a0:	008040f4 	movhi	r2,259
 10317a4:	10972c04 	addi	r2,r2,23728
 10317a8:	10800017 	ldw	r2,0(r2)
 10317ac:	10000526 	beq	r2,zero,10317c4 <alt_get_errno+0x34>
 10317b0:	008040f4 	movhi	r2,259
 10317b4:	10972c04 	addi	r2,r2,23728
 10317b8:	10800017 	ldw	r2,0(r2)
 10317bc:	103ee83a 	callr	r2
 10317c0:	00000206 	br	10317cc <alt_get_errno+0x3c>
 10317c4:	008040f4 	movhi	r2,259
 10317c8:	109df204 	addi	r2,r2,30664
}
 10317cc:	e037883a 	mov	sp,fp
 10317d0:	dfc00117 	ldw	ra,4(sp)
 10317d4:	df000017 	ldw	fp,0(sp)
 10317d8:	dec00204 	addi	sp,sp,8
 10317dc:	f800283a 	ret

010317e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10317e0:	defff904 	addi	sp,sp,-28
 10317e4:	dfc00615 	stw	ra,24(sp)
 10317e8:	df000515 	stw	fp,20(sp)
 10317ec:	df000504 	addi	fp,sp,20
 10317f0:	e13ffd15 	stw	r4,-12(fp)
 10317f4:	e17ffe15 	stw	r5,-8(fp)
 10317f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10317fc:	e0bffd17 	ldw	r2,-12(fp)
 1031800:	10000616 	blt	r2,zero,103181c <read+0x3c>
 1031804:	e0bffd17 	ldw	r2,-12(fp)
 1031808:	10c00324 	muli	r3,r2,12
 103180c:	008040f4 	movhi	r2,259
 1031810:	1092a904 	addi	r2,r2,19108
 1031814:	1885883a 	add	r2,r3,r2
 1031818:	00000106 	br	1031820 <read+0x40>
 103181c:	0005883a 	mov	r2,zero
 1031820:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1031824:	e0bffb17 	ldw	r2,-20(fp)
 1031828:	10002226 	beq	r2,zero,10318b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 103182c:	e0bffb17 	ldw	r2,-20(fp)
 1031830:	10800217 	ldw	r2,8(r2)
 1031834:	108000cc 	andi	r2,r2,3
 1031838:	10800060 	cmpeqi	r2,r2,1
 103183c:	1000181e 	bne	r2,zero,10318a0 <read+0xc0>
        (fd->dev->read))
 1031840:	e0bffb17 	ldw	r2,-20(fp)
 1031844:	10800017 	ldw	r2,0(r2)
 1031848:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 103184c:	10001426 	beq	r2,zero,10318a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1031850:	e0bffb17 	ldw	r2,-20(fp)
 1031854:	10800017 	ldw	r2,0(r2)
 1031858:	10800517 	ldw	r2,20(r2)
 103185c:	e0ffff17 	ldw	r3,-4(fp)
 1031860:	e13ffb17 	ldw	r4,-20(fp)
 1031864:	e17ffe17 	ldw	r5,-8(fp)
 1031868:	180d883a 	mov	r6,r3
 103186c:	103ee83a 	callr	r2
 1031870:	e0bffc15 	stw	r2,-16(fp)
 1031874:	e0bffc17 	ldw	r2,-16(fp)
 1031878:	1000070e 	bge	r2,zero,1031898 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 103187c:	10317900 	call	1031790 <alt_get_errno>
 1031880:	1007883a 	mov	r3,r2
 1031884:	e0bffc17 	ldw	r2,-16(fp)
 1031888:	0085c83a 	sub	r2,zero,r2
 103188c:	18800015 	stw	r2,0(r3)
          return -1;
 1031890:	00bfffc4 	movi	r2,-1
 1031894:	00000c06 	br	10318c8 <read+0xe8>
        }
        return rval;
 1031898:	e0bffc17 	ldw	r2,-16(fp)
 103189c:	00000a06 	br	10318c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10318a0:	10317900 	call	1031790 <alt_get_errno>
 10318a4:	1007883a 	mov	r3,r2
 10318a8:	00800344 	movi	r2,13
 10318ac:	18800015 	stw	r2,0(r3)
 10318b0:	00000406 	br	10318c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10318b4:	10317900 	call	1031790 <alt_get_errno>
 10318b8:	1007883a 	mov	r3,r2
 10318bc:	00801444 	movi	r2,81
 10318c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10318c4:	00bfffc4 	movi	r2,-1
}
 10318c8:	e037883a 	mov	sp,fp
 10318cc:	dfc00117 	ldw	ra,4(sp)
 10318d0:	df000017 	ldw	fp,0(sp)
 10318d4:	dec00204 	addi	sp,sp,8
 10318d8:	f800283a 	ret

010318dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10318dc:	defffe04 	addi	sp,sp,-8
 10318e0:	df000115 	stw	fp,4(sp)
 10318e4:	df000104 	addi	fp,sp,4
 10318e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10318ec:	e0bfff17 	ldw	r2,-4(fp)
 10318f0:	108000d0 	cmplti	r2,r2,3
 10318f4:	10000d1e 	bne	r2,zero,103192c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10318f8:	008040f4 	movhi	r2,259
 10318fc:	1092a904 	addi	r2,r2,19108
 1031900:	e0ffff17 	ldw	r3,-4(fp)
 1031904:	18c00324 	muli	r3,r3,12
 1031908:	10c5883a 	add	r2,r2,r3
 103190c:	10800204 	addi	r2,r2,8
 1031910:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1031914:	008040f4 	movhi	r2,259
 1031918:	1092a904 	addi	r2,r2,19108
 103191c:	e0ffff17 	ldw	r3,-4(fp)
 1031920:	18c00324 	muli	r3,r3,12
 1031924:	10c5883a 	add	r2,r2,r3
 1031928:	10000015 	stw	zero,0(r2)
  }
}
 103192c:	e037883a 	mov	sp,fp
 1031930:	df000017 	ldw	fp,0(sp)
 1031934:	dec00104 	addi	sp,sp,4
 1031938:	f800283a 	ret

0103193c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 103193c:	defff904 	addi	sp,sp,-28
 1031940:	df000615 	stw	fp,24(sp)
 1031944:	df000604 	addi	fp,sp,24
 1031948:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 103194c:	0005303a 	rdctl	r2,status
 1031950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1031954:	e0fffc17 	ldw	r3,-16(fp)
 1031958:	00bfff84 	movi	r2,-2
 103195c:	1884703a 	and	r2,r3,r2
 1031960:	1001703a 	wrctl	status,r2
  
  return context;
 1031964:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1031968:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 103196c:	d0a00c17 	ldw	r2,-32720(gp)
 1031970:	10c000c4 	addi	r3,r2,3
 1031974:	00bfff04 	movi	r2,-4
 1031978:	1884703a 	and	r2,r3,r2
 103197c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1031980:	d0e00c17 	ldw	r3,-32720(gp)
 1031984:	e0bfff17 	ldw	r2,-4(fp)
 1031988:	1887883a 	add	r3,r3,r2
 103198c:	00804134 	movhi	r2,260
 1031990:	10b53004 	addi	r2,r2,-11072
 1031994:	10c0062e 	bgeu	r2,r3,10319b0 <sbrk+0x74>
 1031998:	e0bffa17 	ldw	r2,-24(fp)
 103199c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10319a0:	e0bffd17 	ldw	r2,-12(fp)
 10319a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10319a8:	00bfffc4 	movi	r2,-1
 10319ac:	00000b06 	br	10319dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 10319b0:	d0a00c17 	ldw	r2,-32720(gp)
 10319b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 10319b8:	d0e00c17 	ldw	r3,-32720(gp)
 10319bc:	e0bfff17 	ldw	r2,-4(fp)
 10319c0:	1885883a 	add	r2,r3,r2
 10319c4:	d0a00c15 	stw	r2,-32720(gp)
 10319c8:	e0bffa17 	ldw	r2,-24(fp)
 10319cc:	e0bffe15 	stw	r2,-8(fp)
 10319d0:	e0bffe17 	ldw	r2,-8(fp)
 10319d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10319d8:	e0bffb17 	ldw	r2,-20(fp)
} 
 10319dc:	e037883a 	mov	sp,fp
 10319e0:	df000017 	ldw	fp,0(sp)
 10319e4:	dec00104 	addi	sp,sp,4
 10319e8:	f800283a 	ret

010319ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 10319ec:	defffd04 	addi	sp,sp,-12
 10319f0:	dfc00215 	stw	ra,8(sp)
 10319f4:	df000115 	stw	fp,4(sp)
 10319f8:	df000104 	addi	fp,sp,4
 10319fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1031a00:	e13fff17 	ldw	r4,-4(fp)
 1031a04:	10328b40 	call	10328b4 <alt_busy_sleep>
}
 1031a08:	e037883a 	mov	sp,fp
 1031a0c:	dfc00117 	ldw	ra,4(sp)
 1031a10:	df000017 	ldw	fp,0(sp)
 1031a14:	dec00204 	addi	sp,sp,8
 1031a18:	f800283a 	ret

01031a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1031a1c:	defffe04 	addi	sp,sp,-8
 1031a20:	dfc00115 	stw	ra,4(sp)
 1031a24:	df000015 	stw	fp,0(sp)
 1031a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1031a2c:	008040f4 	movhi	r2,259
 1031a30:	10972c04 	addi	r2,r2,23728
 1031a34:	10800017 	ldw	r2,0(r2)
 1031a38:	10000526 	beq	r2,zero,1031a50 <alt_get_errno+0x34>
 1031a3c:	008040f4 	movhi	r2,259
 1031a40:	10972c04 	addi	r2,r2,23728
 1031a44:	10800017 	ldw	r2,0(r2)
 1031a48:	103ee83a 	callr	r2
 1031a4c:	00000206 	br	1031a58 <alt_get_errno+0x3c>
 1031a50:	008040f4 	movhi	r2,259
 1031a54:	109df204 	addi	r2,r2,30664
}
 1031a58:	e037883a 	mov	sp,fp
 1031a5c:	dfc00117 	ldw	ra,4(sp)
 1031a60:	df000017 	ldw	fp,0(sp)
 1031a64:	dec00204 	addi	sp,sp,8
 1031a68:	f800283a 	ret

01031a6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1031a6c:	defff904 	addi	sp,sp,-28
 1031a70:	dfc00615 	stw	ra,24(sp)
 1031a74:	df000515 	stw	fp,20(sp)
 1031a78:	df000504 	addi	fp,sp,20
 1031a7c:	e13ffd15 	stw	r4,-12(fp)
 1031a80:	e17ffe15 	stw	r5,-8(fp)
 1031a84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1031a88:	e0bffd17 	ldw	r2,-12(fp)
 1031a8c:	10000616 	blt	r2,zero,1031aa8 <write+0x3c>
 1031a90:	e0bffd17 	ldw	r2,-12(fp)
 1031a94:	10c00324 	muli	r3,r2,12
 1031a98:	008040f4 	movhi	r2,259
 1031a9c:	1092a904 	addi	r2,r2,19108
 1031aa0:	1885883a 	add	r2,r3,r2
 1031aa4:	00000106 	br	1031aac <write+0x40>
 1031aa8:	0005883a 	mov	r2,zero
 1031aac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1031ab0:	e0bffb17 	ldw	r2,-20(fp)
 1031ab4:	10002126 	beq	r2,zero,1031b3c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1031ab8:	e0bffb17 	ldw	r2,-20(fp)
 1031abc:	10800217 	ldw	r2,8(r2)
 1031ac0:	108000cc 	andi	r2,r2,3
 1031ac4:	10001826 	beq	r2,zero,1031b28 <write+0xbc>
 1031ac8:	e0bffb17 	ldw	r2,-20(fp)
 1031acc:	10800017 	ldw	r2,0(r2)
 1031ad0:	10800617 	ldw	r2,24(r2)
 1031ad4:	10001426 	beq	r2,zero,1031b28 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1031ad8:	e0bffb17 	ldw	r2,-20(fp)
 1031adc:	10800017 	ldw	r2,0(r2)
 1031ae0:	10800617 	ldw	r2,24(r2)
 1031ae4:	e0ffff17 	ldw	r3,-4(fp)
 1031ae8:	e13ffb17 	ldw	r4,-20(fp)
 1031aec:	e17ffe17 	ldw	r5,-8(fp)
 1031af0:	180d883a 	mov	r6,r3
 1031af4:	103ee83a 	callr	r2
 1031af8:	e0bffc15 	stw	r2,-16(fp)
 1031afc:	e0bffc17 	ldw	r2,-16(fp)
 1031b00:	1000070e 	bge	r2,zero,1031b20 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1031b04:	1031a1c0 	call	1031a1c <alt_get_errno>
 1031b08:	1007883a 	mov	r3,r2
 1031b0c:	e0bffc17 	ldw	r2,-16(fp)
 1031b10:	0085c83a 	sub	r2,zero,r2
 1031b14:	18800015 	stw	r2,0(r3)
        return -1;
 1031b18:	00bfffc4 	movi	r2,-1
 1031b1c:	00000c06 	br	1031b50 <write+0xe4>
      }
      return rval;
 1031b20:	e0bffc17 	ldw	r2,-16(fp)
 1031b24:	00000a06 	br	1031b50 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1031b28:	1031a1c0 	call	1031a1c <alt_get_errno>
 1031b2c:	1007883a 	mov	r3,r2
 1031b30:	00800344 	movi	r2,13
 1031b34:	18800015 	stw	r2,0(r3)
 1031b38:	00000406 	br	1031b4c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1031b3c:	1031a1c0 	call	1031a1c <alt_get_errno>
 1031b40:	1007883a 	mov	r3,r2
 1031b44:	00801444 	movi	r2,81
 1031b48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1031b4c:	00bfffc4 	movi	r2,-1
}
 1031b50:	e037883a 	mov	sp,fp
 1031b54:	dfc00117 	ldw	ra,4(sp)
 1031b58:	df000017 	ldw	fp,0(sp)
 1031b5c:	dec00204 	addi	sp,sp,8
 1031b60:	f800283a 	ret

01031b64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1031b64:	defffd04 	addi	sp,sp,-12
 1031b68:	dfc00215 	stw	ra,8(sp)
 1031b6c:	df000115 	stw	fp,4(sp)
 1031b70:	df000104 	addi	fp,sp,4
 1031b74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1031b78:	e13fff17 	ldw	r4,-4(fp)
 1031b7c:	014040f4 	movhi	r5,259
 1031b80:	29572904 	addi	r5,r5,23716
 1031b84:	1032aa00 	call	1032aa0 <alt_dev_llist_insert>
}
 1031b88:	e037883a 	mov	sp,fp
 1031b8c:	dfc00117 	ldw	ra,4(sp)
 1031b90:	df000017 	ldw	fp,0(sp)
 1031b94:	dec00204 	addi	sp,sp,8
 1031b98:	f800283a 	ret

01031b9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1031b9c:	defffd04 	addi	sp,sp,-12
 1031ba0:	dfc00215 	stw	ra,8(sp)
 1031ba4:	df000115 	stw	fp,4(sp)
 1031ba8:	df000104 	addi	fp,sp,4
 1031bac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 1031bb0:	10334440 	call	1033444 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1031bb4:	00800044 	movi	r2,1
 1031bb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1031bbc:	e037883a 	mov	sp,fp
 1031bc0:	dfc00117 	ldw	ra,4(sp)
 1031bc4:	df000017 	ldw	fp,0(sp)
 1031bc8:	dec00204 	addi	sp,sp,8
 1031bcc:	f800283a 	ret

01031bd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1031bd0:	defffe04 	addi	sp,sp,-8
 1031bd4:	dfc00115 	stw	ra,4(sp)
 1031bd8:	df000015 	stw	fp,0(sp)
 1031bdc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 1031be0:	0009883a 	mov	r4,zero
 1031be4:	000b883a 	mov	r5,zero
 1031be8:	000d883a 	mov	r6,zero
 1031bec:	01c0fa04 	movi	r7,1000
 1031bf0:	10326ec0 	call	10326ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1031bf4:	010040f4 	movhi	r4,259
 1031bf8:	21131304 	addi	r4,r4,19532
 1031bfc:	000b883a 	mov	r5,zero
 1031c00:	018000c4 	movi	r6,3
 1031c04:	1031d900 	call	1031d90 <altera_avalon_jtag_uart_init>
 1031c08:	010040f4 	movhi	r4,259
 1031c0c:	21130904 	addi	r4,r4,19492
 1031c10:	1031b640 	call	1031b64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 1031c14:	0001883a 	nop
}
 1031c18:	e037883a 	mov	sp,fp
 1031c1c:	dfc00117 	ldw	ra,4(sp)
 1031c20:	df000017 	ldw	fp,0(sp)
 1031c24:	dec00204 	addi	sp,sp,8
 1031c28:	f800283a 	ret

01031c2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1031c2c:	defffa04 	addi	sp,sp,-24
 1031c30:	dfc00515 	stw	ra,20(sp)
 1031c34:	df000415 	stw	fp,16(sp)
 1031c38:	df000404 	addi	fp,sp,16
 1031c3c:	e13ffd15 	stw	r4,-12(fp)
 1031c40:	e17ffe15 	stw	r5,-8(fp)
 1031c44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1031c48:	e0bffd17 	ldw	r2,-12(fp)
 1031c4c:	10800017 	ldw	r2,0(r2)
 1031c50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1031c54:	e0bffc17 	ldw	r2,-16(fp)
 1031c58:	10c00a04 	addi	r3,r2,40
 1031c5c:	e0bffd17 	ldw	r2,-12(fp)
 1031c60:	10800217 	ldw	r2,8(r2)
 1031c64:	1809883a 	mov	r4,r3
 1031c68:	e17ffe17 	ldw	r5,-8(fp)
 1031c6c:	e1bfff17 	ldw	r6,-4(fp)
 1031c70:	100f883a 	mov	r7,r2
 1031c74:	10322540 	call	1032254 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1031c78:	e037883a 	mov	sp,fp
 1031c7c:	dfc00117 	ldw	ra,4(sp)
 1031c80:	df000017 	ldw	fp,0(sp)
 1031c84:	dec00204 	addi	sp,sp,8
 1031c88:	f800283a 	ret

01031c8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1031c8c:	defffa04 	addi	sp,sp,-24
 1031c90:	dfc00515 	stw	ra,20(sp)
 1031c94:	df000415 	stw	fp,16(sp)
 1031c98:	df000404 	addi	fp,sp,16
 1031c9c:	e13ffd15 	stw	r4,-12(fp)
 1031ca0:	e17ffe15 	stw	r5,-8(fp)
 1031ca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1031ca8:	e0bffd17 	ldw	r2,-12(fp)
 1031cac:	10800017 	ldw	r2,0(r2)
 1031cb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1031cb4:	e0bffc17 	ldw	r2,-16(fp)
 1031cb8:	10c00a04 	addi	r3,r2,40
 1031cbc:	e0bffd17 	ldw	r2,-12(fp)
 1031cc0:	10800217 	ldw	r2,8(r2)
 1031cc4:	1809883a 	mov	r4,r3
 1031cc8:	e17ffe17 	ldw	r5,-8(fp)
 1031ccc:	e1bfff17 	ldw	r6,-4(fp)
 1031cd0:	100f883a 	mov	r7,r2
 1031cd4:	10324600 	call	1032460 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1031cd8:	e037883a 	mov	sp,fp
 1031cdc:	dfc00117 	ldw	ra,4(sp)
 1031ce0:	df000017 	ldw	fp,0(sp)
 1031ce4:	dec00204 	addi	sp,sp,8
 1031ce8:	f800283a 	ret

01031cec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1031cec:	defffc04 	addi	sp,sp,-16
 1031cf0:	dfc00315 	stw	ra,12(sp)
 1031cf4:	df000215 	stw	fp,8(sp)
 1031cf8:	df000204 	addi	fp,sp,8
 1031cfc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1031d00:	e0bfff17 	ldw	r2,-4(fp)
 1031d04:	10800017 	ldw	r2,0(r2)
 1031d08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1031d0c:	e0bffe17 	ldw	r2,-8(fp)
 1031d10:	10c00a04 	addi	r3,r2,40
 1031d14:	e0bfff17 	ldw	r2,-4(fp)
 1031d18:	10800217 	ldw	r2,8(r2)
 1031d1c:	1809883a 	mov	r4,r3
 1031d20:	100b883a 	mov	r5,r2
 1031d24:	10321000 	call	1032100 <altera_avalon_jtag_uart_close>
}
 1031d28:	e037883a 	mov	sp,fp
 1031d2c:	dfc00117 	ldw	ra,4(sp)
 1031d30:	df000017 	ldw	fp,0(sp)
 1031d34:	dec00204 	addi	sp,sp,8
 1031d38:	f800283a 	ret

01031d3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1031d3c:	defffa04 	addi	sp,sp,-24
 1031d40:	dfc00515 	stw	ra,20(sp)
 1031d44:	df000415 	stw	fp,16(sp)
 1031d48:	df000404 	addi	fp,sp,16
 1031d4c:	e13ffd15 	stw	r4,-12(fp)
 1031d50:	e17ffe15 	stw	r5,-8(fp)
 1031d54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1031d58:	e0bffd17 	ldw	r2,-12(fp)
 1031d5c:	10800017 	ldw	r2,0(r2)
 1031d60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1031d64:	e0bffc17 	ldw	r2,-16(fp)
 1031d68:	10800a04 	addi	r2,r2,40
 1031d6c:	1009883a 	mov	r4,r2
 1031d70:	e17ffe17 	ldw	r5,-8(fp)
 1031d74:	e1bfff17 	ldw	r6,-4(fp)
 1031d78:	10321680 	call	1032168 <altera_avalon_jtag_uart_ioctl>
}
 1031d7c:	e037883a 	mov	sp,fp
 1031d80:	dfc00117 	ldw	ra,4(sp)
 1031d84:	df000017 	ldw	fp,0(sp)
 1031d88:	dec00204 	addi	sp,sp,8
 1031d8c:	f800283a 	ret

01031d90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1031d90:	defffa04 	addi	sp,sp,-24
 1031d94:	dfc00515 	stw	ra,20(sp)
 1031d98:	df000415 	stw	fp,16(sp)
 1031d9c:	df000404 	addi	fp,sp,16
 1031da0:	e13ffd15 	stw	r4,-12(fp)
 1031da4:	e17ffe15 	stw	r5,-8(fp)
 1031da8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1031dac:	e0bffd17 	ldw	r2,-12(fp)
 1031db0:	00c00044 	movi	r3,1
 1031db4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1031db8:	e0bffd17 	ldw	r2,-12(fp)
 1031dbc:	10800017 	ldw	r2,0(r2)
 1031dc0:	10800104 	addi	r2,r2,4
 1031dc4:	1007883a 	mov	r3,r2
 1031dc8:	e0bffd17 	ldw	r2,-12(fp)
 1031dcc:	10800817 	ldw	r2,32(r2)
 1031dd0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1031dd4:	e0fffe17 	ldw	r3,-8(fp)
 1031dd8:	e0bfff17 	ldw	r2,-4(fp)
 1031ddc:	d8000015 	stw	zero,0(sp)
 1031de0:	1809883a 	mov	r4,r3
 1031de4:	100b883a 	mov	r5,r2
 1031de8:	018040f4 	movhi	r6,259
 1031dec:	31879504 	addi	r6,r6,7764
 1031df0:	e1fffd17 	ldw	r7,-12(fp)
 1031df4:	1032c2c0 	call	1032c2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1031df8:	e0bffd17 	ldw	r2,-12(fp)
 1031dfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1031e00:	e0bffd17 	ldw	r2,-12(fp)
 1031e04:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1031e08:	008040f4 	movhi	r2,259
 1031e0c:	109df704 	addi	r2,r2,30684
 1031e10:	10800017 	ldw	r2,0(r2)
 1031e14:	1809883a 	mov	r4,r3
 1031e18:	100b883a 	mov	r5,r2
 1031e1c:	018040f4 	movhi	r6,259
 1031e20:	31881604 	addi	r6,r6,8280
 1031e24:	e1fffd17 	ldw	r7,-12(fp)
 1031e28:	10327740 	call	1032774 <alt_alarm_start>
 1031e2c:	1000040e 	bge	r2,zero,1031e40 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1031e30:	e0fffd17 	ldw	r3,-12(fp)
 1031e34:	00a00034 	movhi	r2,32768
 1031e38:	10bfffc4 	addi	r2,r2,-1
 1031e3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1031e40:	e037883a 	mov	sp,fp
 1031e44:	dfc00117 	ldw	ra,4(sp)
 1031e48:	df000017 	ldw	fp,0(sp)
 1031e4c:	dec00204 	addi	sp,sp,8
 1031e50:	f800283a 	ret

01031e54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1031e54:	defff804 	addi	sp,sp,-32
 1031e58:	df000715 	stw	fp,28(sp)
 1031e5c:	df000704 	addi	fp,sp,28
 1031e60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1031e64:	e0bfff17 	ldw	r2,-4(fp)
 1031e68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1031e6c:	e0bffb17 	ldw	r2,-20(fp)
 1031e70:	10800017 	ldw	r2,0(r2)
 1031e74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1031e78:	e0bffc17 	ldw	r2,-16(fp)
 1031e7c:	10800104 	addi	r2,r2,4
 1031e80:	10800037 	ldwio	r2,0(r2)
 1031e84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1031e88:	e0bffd17 	ldw	r2,-12(fp)
 1031e8c:	1080c00c 	andi	r2,r2,768
 1031e90:	1000011e 	bne	r2,zero,1031e98 <altera_avalon_jtag_uart_irq+0x44>
      break;
 1031e94:	00006c06 	br	1032048 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1031e98:	e0bffd17 	ldw	r2,-12(fp)
 1031e9c:	1080400c 	andi	r2,r2,256
 1031ea0:	10003426 	beq	r2,zero,1031f74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1031ea4:	00800074 	movhi	r2,1
 1031ea8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1031eac:	e0bffb17 	ldw	r2,-20(fp)
 1031eb0:	10800a17 	ldw	r2,40(r2)
 1031eb4:	10800044 	addi	r2,r2,1
 1031eb8:	1081ffcc 	andi	r2,r2,2047
 1031ebc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1031ec0:	e0bffb17 	ldw	r2,-20(fp)
 1031ec4:	10c00b17 	ldw	r3,44(r2)
 1031ec8:	e0bffe17 	ldw	r2,-8(fp)
 1031ecc:	1880011e 	bne	r3,r2,1031ed4 <altera_avalon_jtag_uart_irq+0x80>
          break;
 1031ed0:	00001606 	br	1031f2c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1031ed4:	e0bffc17 	ldw	r2,-16(fp)
 1031ed8:	10800037 	ldwio	r2,0(r2)
 1031edc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1031ee0:	e0bff917 	ldw	r2,-28(fp)
 1031ee4:	10a0000c 	andi	r2,r2,32768
 1031ee8:	1000011e 	bne	r2,zero,1031ef0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 1031eec:	00000f06 	br	1031f2c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1031ef0:	e0bffb17 	ldw	r2,-20(fp)
 1031ef4:	10800a17 	ldw	r2,40(r2)
 1031ef8:	e0fff917 	ldw	r3,-28(fp)
 1031efc:	1809883a 	mov	r4,r3
 1031f00:	e0fffb17 	ldw	r3,-20(fp)
 1031f04:	1885883a 	add	r2,r3,r2
 1031f08:	10800e04 	addi	r2,r2,56
 1031f0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1031f10:	e0bffb17 	ldw	r2,-20(fp)
 1031f14:	10800a17 	ldw	r2,40(r2)
 1031f18:	10800044 	addi	r2,r2,1
 1031f1c:	10c1ffcc 	andi	r3,r2,2047
 1031f20:	e0bffb17 	ldw	r2,-20(fp)
 1031f24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1031f28:	003fe006 	br	1031eac <_gp+0xffff4228>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1031f2c:	e0bff917 	ldw	r2,-28(fp)
 1031f30:	10bfffec 	andhi	r2,r2,65535
 1031f34:	10000f26 	beq	r2,zero,1031f74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1031f38:	e0bffb17 	ldw	r2,-20(fp)
 1031f3c:	10c00817 	ldw	r3,32(r2)
 1031f40:	00bfff84 	movi	r2,-2
 1031f44:	1886703a 	and	r3,r3,r2
 1031f48:	e0bffb17 	ldw	r2,-20(fp)
 1031f4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1031f50:	e0bffc17 	ldw	r2,-16(fp)
 1031f54:	10800104 	addi	r2,r2,4
 1031f58:	1007883a 	mov	r3,r2
 1031f5c:	e0bffb17 	ldw	r2,-20(fp)
 1031f60:	10800817 	ldw	r2,32(r2)
 1031f64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1031f68:	e0bffc17 	ldw	r2,-16(fp)
 1031f6c:	10800104 	addi	r2,r2,4
 1031f70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1031f74:	e0bffd17 	ldw	r2,-12(fp)
 1031f78:	1080800c 	andi	r2,r2,512
 1031f7c:	10003126 	beq	r2,zero,1032044 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1031f80:	e0bffd17 	ldw	r2,-12(fp)
 1031f84:	1004d43a 	srli	r2,r2,16
 1031f88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1031f8c:	00001406 	br	1031fe0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1031f90:	e0bffc17 	ldw	r2,-16(fp)
 1031f94:	e0fffb17 	ldw	r3,-20(fp)
 1031f98:	18c00d17 	ldw	r3,52(r3)
 1031f9c:	e13ffb17 	ldw	r4,-20(fp)
 1031fa0:	20c7883a 	add	r3,r4,r3
 1031fa4:	18c20e04 	addi	r3,r3,2104
 1031fa8:	18c00003 	ldbu	r3,0(r3)
 1031fac:	18c03fcc 	andi	r3,r3,255
 1031fb0:	18c0201c 	xori	r3,r3,128
 1031fb4:	18ffe004 	addi	r3,r3,-128
 1031fb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1031fbc:	e0bffb17 	ldw	r2,-20(fp)
 1031fc0:	10800d17 	ldw	r2,52(r2)
 1031fc4:	10800044 	addi	r2,r2,1
 1031fc8:	10c1ffcc 	andi	r3,r2,2047
 1031fcc:	e0bffb17 	ldw	r2,-20(fp)
 1031fd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1031fd4:	e0bffa17 	ldw	r2,-24(fp)
 1031fd8:	10bfffc4 	addi	r2,r2,-1
 1031fdc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1031fe0:	e0bffa17 	ldw	r2,-24(fp)
 1031fe4:	10000526 	beq	r2,zero,1031ffc <altera_avalon_jtag_uart_irq+0x1a8>
 1031fe8:	e0bffb17 	ldw	r2,-20(fp)
 1031fec:	10c00d17 	ldw	r3,52(r2)
 1031ff0:	e0bffb17 	ldw	r2,-20(fp)
 1031ff4:	10800c17 	ldw	r2,48(r2)
 1031ff8:	18bfe51e 	bne	r3,r2,1031f90 <_gp+0xffff430c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1031ffc:	e0bffa17 	ldw	r2,-24(fp)
 1032000:	10001026 	beq	r2,zero,1032044 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1032004:	e0bffb17 	ldw	r2,-20(fp)
 1032008:	10c00817 	ldw	r3,32(r2)
 103200c:	00bfff44 	movi	r2,-3
 1032010:	1886703a 	and	r3,r3,r2
 1032014:	e0bffb17 	ldw	r2,-20(fp)
 1032018:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 103201c:	e0bffb17 	ldw	r2,-20(fp)
 1032020:	10800017 	ldw	r2,0(r2)
 1032024:	10800104 	addi	r2,r2,4
 1032028:	1007883a 	mov	r3,r2
 103202c:	e0bffb17 	ldw	r2,-20(fp)
 1032030:	10800817 	ldw	r2,32(r2)
 1032034:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1032038:	e0bffc17 	ldw	r2,-16(fp)
 103203c:	10800104 	addi	r2,r2,4
 1032040:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1032044:	003f8c06 	br	1031e78 <_gp+0xffff41f4>
}
 1032048:	e037883a 	mov	sp,fp
 103204c:	df000017 	ldw	fp,0(sp)
 1032050:	dec00104 	addi	sp,sp,4
 1032054:	f800283a 	ret

01032058 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1032058:	defff804 	addi	sp,sp,-32
 103205c:	df000715 	stw	fp,28(sp)
 1032060:	df000704 	addi	fp,sp,28
 1032064:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1032068:	e0bffb17 	ldw	r2,-20(fp)
 103206c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1032070:	e0bff917 	ldw	r2,-28(fp)
 1032074:	10800017 	ldw	r2,0(r2)
 1032078:	10800104 	addi	r2,r2,4
 103207c:	10800037 	ldwio	r2,0(r2)
 1032080:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1032084:	e0bffa17 	ldw	r2,-24(fp)
 1032088:	1081000c 	andi	r2,r2,1024
 103208c:	10000b26 	beq	r2,zero,10320bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1032090:	e0bff917 	ldw	r2,-28(fp)
 1032094:	10800017 	ldw	r2,0(r2)
 1032098:	10800104 	addi	r2,r2,4
 103209c:	1007883a 	mov	r3,r2
 10320a0:	e0bff917 	ldw	r2,-28(fp)
 10320a4:	10800817 	ldw	r2,32(r2)
 10320a8:	10810014 	ori	r2,r2,1024
 10320ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10320b0:	e0bff917 	ldw	r2,-28(fp)
 10320b4:	10000915 	stw	zero,36(r2)
 10320b8:	00000a06 	br	10320e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10320bc:	e0bff917 	ldw	r2,-28(fp)
 10320c0:	10c00917 	ldw	r3,36(r2)
 10320c4:	00a00034 	movhi	r2,32768
 10320c8:	10bfff04 	addi	r2,r2,-4
 10320cc:	10c00536 	bltu	r2,r3,10320e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10320d0:	e0bff917 	ldw	r2,-28(fp)
 10320d4:	10800917 	ldw	r2,36(r2)
 10320d8:	10c00044 	addi	r3,r2,1
 10320dc:	e0bff917 	ldw	r2,-28(fp)
 10320e0:	10c00915 	stw	r3,36(r2)
 10320e4:	008040f4 	movhi	r2,259
 10320e8:	109df704 	addi	r2,r2,30684
 10320ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10320f0:	e037883a 	mov	sp,fp
 10320f4:	df000017 	ldw	fp,0(sp)
 10320f8:	dec00104 	addi	sp,sp,4
 10320fc:	f800283a 	ret

01032100 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1032100:	defffd04 	addi	sp,sp,-12
 1032104:	df000215 	stw	fp,8(sp)
 1032108:	df000204 	addi	fp,sp,8
 103210c:	e13ffe15 	stw	r4,-8(fp)
 1032110:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1032114:	00000506 	br	103212c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1032118:	e0bfff17 	ldw	r2,-4(fp)
 103211c:	1090000c 	andi	r2,r2,16384
 1032120:	10000226 	beq	r2,zero,103212c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1032124:	00bffd44 	movi	r2,-11
 1032128:	00000b06 	br	1032158 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 103212c:	e0bffe17 	ldw	r2,-8(fp)
 1032130:	10c00d17 	ldw	r3,52(r2)
 1032134:	e0bffe17 	ldw	r2,-8(fp)
 1032138:	10800c17 	ldw	r2,48(r2)
 103213c:	18800526 	beq	r3,r2,1032154 <altera_avalon_jtag_uart_close+0x54>
 1032140:	e0bffe17 	ldw	r2,-8(fp)
 1032144:	10c00917 	ldw	r3,36(r2)
 1032148:	e0bffe17 	ldw	r2,-8(fp)
 103214c:	10800117 	ldw	r2,4(r2)
 1032150:	18bff136 	bltu	r3,r2,1032118 <_gp+0xffff4494>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1032154:	0005883a 	mov	r2,zero
}
 1032158:	e037883a 	mov	sp,fp
 103215c:	df000017 	ldw	fp,0(sp)
 1032160:	dec00104 	addi	sp,sp,4
 1032164:	f800283a 	ret

01032168 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1032168:	defffa04 	addi	sp,sp,-24
 103216c:	df000515 	stw	fp,20(sp)
 1032170:	df000504 	addi	fp,sp,20
 1032174:	e13ffd15 	stw	r4,-12(fp)
 1032178:	e17ffe15 	stw	r5,-8(fp)
 103217c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1032180:	00bff9c4 	movi	r2,-25
 1032184:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1032188:	e0bffe17 	ldw	r2,-8(fp)
 103218c:	10da8060 	cmpeqi	r3,r2,27137
 1032190:	1800031e 	bne	r3,zero,10321a0 <altera_avalon_jtag_uart_ioctl+0x38>
 1032194:	109a80a0 	cmpeqi	r2,r2,27138
 1032198:	1000191e 	bne	r2,zero,1032200 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 103219c:	00002806 	br	1032240 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10321a0:	e0bffd17 	ldw	r2,-12(fp)
 10321a4:	10c00117 	ldw	r3,4(r2)
 10321a8:	00a00034 	movhi	r2,32768
 10321ac:	10bfffc4 	addi	r2,r2,-1
 10321b0:	18801226 	beq	r3,r2,10321fc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 10321b4:	e0bfff17 	ldw	r2,-4(fp)
 10321b8:	10800017 	ldw	r2,0(r2)
 10321bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10321c0:	e0bffc17 	ldw	r2,-16(fp)
 10321c4:	10800090 	cmplti	r2,r2,2
 10321c8:	1000061e 	bne	r2,zero,10321e4 <altera_avalon_jtag_uart_ioctl+0x7c>
 10321cc:	e0fffc17 	ldw	r3,-16(fp)
 10321d0:	00a00034 	movhi	r2,32768
 10321d4:	10bfffc4 	addi	r2,r2,-1
 10321d8:	18800226 	beq	r3,r2,10321e4 <altera_avalon_jtag_uart_ioctl+0x7c>
 10321dc:	e0bffc17 	ldw	r2,-16(fp)
 10321e0:	00000206 	br	10321ec <altera_avalon_jtag_uart_ioctl+0x84>
 10321e4:	00a00034 	movhi	r2,32768
 10321e8:	10bfff84 	addi	r2,r2,-2
 10321ec:	e0fffd17 	ldw	r3,-12(fp)
 10321f0:	18800115 	stw	r2,4(r3)
      rc = 0;
 10321f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10321f8:	00001106 	br	1032240 <altera_avalon_jtag_uart_ioctl+0xd8>
 10321fc:	00001006 	br	1032240 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1032200:	e0bffd17 	ldw	r2,-12(fp)
 1032204:	10c00117 	ldw	r3,4(r2)
 1032208:	00a00034 	movhi	r2,32768
 103220c:	10bfffc4 	addi	r2,r2,-1
 1032210:	18800a26 	beq	r3,r2,103223c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1032214:	e0bffd17 	ldw	r2,-12(fp)
 1032218:	10c00917 	ldw	r3,36(r2)
 103221c:	e0bffd17 	ldw	r2,-12(fp)
 1032220:	10800117 	ldw	r2,4(r2)
 1032224:	1885803a 	cmpltu	r2,r3,r2
 1032228:	10c03fcc 	andi	r3,r2,255
 103222c:	e0bfff17 	ldw	r2,-4(fp)
 1032230:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1032234:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1032238:	00000006 	br	103223c <altera_avalon_jtag_uart_ioctl+0xd4>
 103223c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1032240:	e0bffb17 	ldw	r2,-20(fp)
}
 1032244:	e037883a 	mov	sp,fp
 1032248:	df000017 	ldw	fp,0(sp)
 103224c:	dec00104 	addi	sp,sp,4
 1032250:	f800283a 	ret

01032254 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1032254:	defff304 	addi	sp,sp,-52
 1032258:	dfc00c15 	stw	ra,48(sp)
 103225c:	df000b15 	stw	fp,44(sp)
 1032260:	df000b04 	addi	fp,sp,44
 1032264:	e13ffc15 	stw	r4,-16(fp)
 1032268:	e17ffd15 	stw	r5,-12(fp)
 103226c:	e1bffe15 	stw	r6,-8(fp)
 1032270:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1032274:	e0bffd17 	ldw	r2,-12(fp)
 1032278:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 103227c:	00004906 	br	10323a4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1032280:	e0bffc17 	ldw	r2,-16(fp)
 1032284:	10800a17 	ldw	r2,40(r2)
 1032288:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 103228c:	e0bffc17 	ldw	r2,-16(fp)
 1032290:	10800b17 	ldw	r2,44(r2)
 1032294:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1032298:	e0fff717 	ldw	r3,-36(fp)
 103229c:	e0bff817 	ldw	r2,-32(fp)
 10322a0:	18800536 	bltu	r3,r2,10322b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10322a4:	e0fff717 	ldw	r3,-36(fp)
 10322a8:	e0bff817 	ldw	r2,-32(fp)
 10322ac:	1885c83a 	sub	r2,r3,r2
 10322b0:	e0bff615 	stw	r2,-40(fp)
 10322b4:	00000406 	br	10322c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10322b8:	00c20004 	movi	r3,2048
 10322bc:	e0bff817 	ldw	r2,-32(fp)
 10322c0:	1885c83a 	sub	r2,r3,r2
 10322c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10322c8:	e0bff617 	ldw	r2,-40(fp)
 10322cc:	1000011e 	bne	r2,zero,10322d4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 10322d0:	00001d06 	br	1032348 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 10322d4:	e0fffe17 	ldw	r3,-8(fp)
 10322d8:	e0bff617 	ldw	r2,-40(fp)
 10322dc:	1880022e 	bgeu	r3,r2,10322e8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10322e0:	e0bffe17 	ldw	r2,-8(fp)
 10322e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10322e8:	e0bff817 	ldw	r2,-32(fp)
 10322ec:	10800e04 	addi	r2,r2,56
 10322f0:	e0fffc17 	ldw	r3,-16(fp)
 10322f4:	1885883a 	add	r2,r3,r2
 10322f8:	e13ff517 	ldw	r4,-44(fp)
 10322fc:	100b883a 	mov	r5,r2
 1032300:	e1bff617 	ldw	r6,-40(fp)
 1032304:	102a6640 	call	102a664 <memcpy>
      ptr   += n;
 1032308:	e0fff517 	ldw	r3,-44(fp)
 103230c:	e0bff617 	ldw	r2,-40(fp)
 1032310:	1885883a 	add	r2,r3,r2
 1032314:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1032318:	e0fffe17 	ldw	r3,-8(fp)
 103231c:	e0bff617 	ldw	r2,-40(fp)
 1032320:	1885c83a 	sub	r2,r3,r2
 1032324:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1032328:	e0fff817 	ldw	r3,-32(fp)
 103232c:	e0bff617 	ldw	r2,-40(fp)
 1032330:	1885883a 	add	r2,r3,r2
 1032334:	10c1ffcc 	andi	r3,r2,2047
 1032338:	e0bffc17 	ldw	r2,-16(fp)
 103233c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1032340:	e0bffe17 	ldw	r2,-8(fp)
 1032344:	00bfce16 	blt	zero,r2,1032280 <_gp+0xffff45fc>

    /* If we read any data then return it */
    if (ptr != buffer)
 1032348:	e0fff517 	ldw	r3,-44(fp)
 103234c:	e0bffd17 	ldw	r2,-12(fp)
 1032350:	18800126 	beq	r3,r2,1032358 <altera_avalon_jtag_uart_read+0x104>
      break;
 1032354:	00001506 	br	10323ac <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1032358:	e0bfff17 	ldw	r2,-4(fp)
 103235c:	1090000c 	andi	r2,r2,16384
 1032360:	10000126 	beq	r2,zero,1032368 <altera_avalon_jtag_uart_read+0x114>
      break;
 1032364:	00001106 	br	10323ac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1032368:	0001883a 	nop
 103236c:	e0bffc17 	ldw	r2,-16(fp)
 1032370:	10c00a17 	ldw	r3,40(r2)
 1032374:	e0bff717 	ldw	r2,-36(fp)
 1032378:	1880051e 	bne	r3,r2,1032390 <altera_avalon_jtag_uart_read+0x13c>
 103237c:	e0bffc17 	ldw	r2,-16(fp)
 1032380:	10c00917 	ldw	r3,36(r2)
 1032384:	e0bffc17 	ldw	r2,-16(fp)
 1032388:	10800117 	ldw	r2,4(r2)
 103238c:	18bff736 	bltu	r3,r2,103236c <_gp+0xffff46e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1032390:	e0bffc17 	ldw	r2,-16(fp)
 1032394:	10c00a17 	ldw	r3,40(r2)
 1032398:	e0bff717 	ldw	r2,-36(fp)
 103239c:	1880011e 	bne	r3,r2,10323a4 <altera_avalon_jtag_uart_read+0x150>
      break;
 10323a0:	00000206 	br	10323ac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10323a4:	e0bffe17 	ldw	r2,-8(fp)
 10323a8:	00bfb516 	blt	zero,r2,1032280 <_gp+0xffff45fc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10323ac:	e0fff517 	ldw	r3,-44(fp)
 10323b0:	e0bffd17 	ldw	r2,-12(fp)
 10323b4:	18801826 	beq	r3,r2,1032418 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10323b8:	0005303a 	rdctl	r2,status
 10323bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10323c0:	e0fffa17 	ldw	r3,-24(fp)
 10323c4:	00bfff84 	movi	r2,-2
 10323c8:	1884703a 	and	r2,r3,r2
 10323cc:	1001703a 	wrctl	status,r2
  
  return context;
 10323d0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10323d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10323d8:	e0bffc17 	ldw	r2,-16(fp)
 10323dc:	10800817 	ldw	r2,32(r2)
 10323e0:	10c00054 	ori	r3,r2,1
 10323e4:	e0bffc17 	ldw	r2,-16(fp)
 10323e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10323ec:	e0bffc17 	ldw	r2,-16(fp)
 10323f0:	10800017 	ldw	r2,0(r2)
 10323f4:	10800104 	addi	r2,r2,4
 10323f8:	1007883a 	mov	r3,r2
 10323fc:	e0bffc17 	ldw	r2,-16(fp)
 1032400:	10800817 	ldw	r2,32(r2)
 1032404:	18800035 	stwio	r2,0(r3)
 1032408:	e0bff917 	ldw	r2,-28(fp)
 103240c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032410:	e0bffb17 	ldw	r2,-20(fp)
 1032414:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1032418:	e0fff517 	ldw	r3,-44(fp)
 103241c:	e0bffd17 	ldw	r2,-12(fp)
 1032420:	18800426 	beq	r3,r2,1032434 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 1032424:	e0fff517 	ldw	r3,-44(fp)
 1032428:	e0bffd17 	ldw	r2,-12(fp)
 103242c:	1885c83a 	sub	r2,r3,r2
 1032430:	00000606 	br	103244c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 1032434:	e0bfff17 	ldw	r2,-4(fp)
 1032438:	1090000c 	andi	r2,r2,16384
 103243c:	10000226 	beq	r2,zero,1032448 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 1032440:	00bffd44 	movi	r2,-11
 1032444:	00000106 	br	103244c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 1032448:	00bffec4 	movi	r2,-5
}
 103244c:	e037883a 	mov	sp,fp
 1032450:	dfc00117 	ldw	ra,4(sp)
 1032454:	df000017 	ldw	fp,0(sp)
 1032458:	dec00204 	addi	sp,sp,8
 103245c:	f800283a 	ret

01032460 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1032460:	defff304 	addi	sp,sp,-52
 1032464:	dfc00c15 	stw	ra,48(sp)
 1032468:	df000b15 	stw	fp,44(sp)
 103246c:	df000b04 	addi	fp,sp,44
 1032470:	e13ffc15 	stw	r4,-16(fp)
 1032474:	e17ffd15 	stw	r5,-12(fp)
 1032478:	e1bffe15 	stw	r6,-8(fp)
 103247c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1032480:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1032484:	e0bffd17 	ldw	r2,-12(fp)
 1032488:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 103248c:	00003806 	br	1032570 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1032490:	e0bffc17 	ldw	r2,-16(fp)
 1032494:	10800c17 	ldw	r2,48(r2)
 1032498:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 103249c:	e0bffc17 	ldw	r2,-16(fp)
 10324a0:	10800d17 	ldw	r2,52(r2)
 10324a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10324a8:	e0fff817 	ldw	r3,-32(fp)
 10324ac:	e0bff517 	ldw	r2,-44(fp)
 10324b0:	1880062e 	bgeu	r3,r2,10324cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10324b4:	e0fff517 	ldw	r3,-44(fp)
 10324b8:	e0bff817 	ldw	r2,-32(fp)
 10324bc:	1885c83a 	sub	r2,r3,r2
 10324c0:	10bfffc4 	addi	r2,r2,-1
 10324c4:	e0bff615 	stw	r2,-40(fp)
 10324c8:	00000b06 	br	10324f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10324cc:	e0bff517 	ldw	r2,-44(fp)
 10324d0:	10000526 	beq	r2,zero,10324e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10324d4:	00c20004 	movi	r3,2048
 10324d8:	e0bff817 	ldw	r2,-32(fp)
 10324dc:	1885c83a 	sub	r2,r3,r2
 10324e0:	e0bff615 	stw	r2,-40(fp)
 10324e4:	00000406 	br	10324f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10324e8:	00c1ffc4 	movi	r3,2047
 10324ec:	e0bff817 	ldw	r2,-32(fp)
 10324f0:	1885c83a 	sub	r2,r3,r2
 10324f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10324f8:	e0bff617 	ldw	r2,-40(fp)
 10324fc:	1000011e 	bne	r2,zero,1032504 <altera_avalon_jtag_uart_write+0xa4>
        break;
 1032500:	00001d06 	br	1032578 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 1032504:	e0fffe17 	ldw	r3,-8(fp)
 1032508:	e0bff617 	ldw	r2,-40(fp)
 103250c:	1880022e 	bgeu	r3,r2,1032518 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 1032510:	e0bffe17 	ldw	r2,-8(fp)
 1032514:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1032518:	e0bff817 	ldw	r2,-32(fp)
 103251c:	10820e04 	addi	r2,r2,2104
 1032520:	e0fffc17 	ldw	r3,-16(fp)
 1032524:	1885883a 	add	r2,r3,r2
 1032528:	1009883a 	mov	r4,r2
 103252c:	e17ffd17 	ldw	r5,-12(fp)
 1032530:	e1bff617 	ldw	r6,-40(fp)
 1032534:	102a6640 	call	102a664 <memcpy>
      ptr   += n;
 1032538:	e0fffd17 	ldw	r3,-12(fp)
 103253c:	e0bff617 	ldw	r2,-40(fp)
 1032540:	1885883a 	add	r2,r3,r2
 1032544:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1032548:	e0fffe17 	ldw	r3,-8(fp)
 103254c:	e0bff617 	ldw	r2,-40(fp)
 1032550:	1885c83a 	sub	r2,r3,r2
 1032554:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1032558:	e0fff817 	ldw	r3,-32(fp)
 103255c:	e0bff617 	ldw	r2,-40(fp)
 1032560:	1885883a 	add	r2,r3,r2
 1032564:	10c1ffcc 	andi	r3,r2,2047
 1032568:	e0bffc17 	ldw	r2,-16(fp)
 103256c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1032570:	e0bffe17 	ldw	r2,-8(fp)
 1032574:	00bfc616 	blt	zero,r2,1032490 <_gp+0xffff480c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032578:	0005303a 	rdctl	r2,status
 103257c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032580:	e0fffa17 	ldw	r3,-24(fp)
 1032584:	00bfff84 	movi	r2,-2
 1032588:	1884703a 	and	r2,r3,r2
 103258c:	1001703a 	wrctl	status,r2
  
  return context;
 1032590:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1032594:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1032598:	e0bffc17 	ldw	r2,-16(fp)
 103259c:	10800817 	ldw	r2,32(r2)
 10325a0:	10c00094 	ori	r3,r2,2
 10325a4:	e0bffc17 	ldw	r2,-16(fp)
 10325a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10325ac:	e0bffc17 	ldw	r2,-16(fp)
 10325b0:	10800017 	ldw	r2,0(r2)
 10325b4:	10800104 	addi	r2,r2,4
 10325b8:	1007883a 	mov	r3,r2
 10325bc:	e0bffc17 	ldw	r2,-16(fp)
 10325c0:	10800817 	ldw	r2,32(r2)
 10325c4:	18800035 	stwio	r2,0(r3)
 10325c8:	e0bff917 	ldw	r2,-28(fp)
 10325cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10325d0:	e0bffb17 	ldw	r2,-20(fp)
 10325d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10325d8:	e0bffe17 	ldw	r2,-8(fp)
 10325dc:	0080120e 	bge	zero,r2,1032628 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 10325e0:	e0bfff17 	ldw	r2,-4(fp)
 10325e4:	1090000c 	andi	r2,r2,16384
 10325e8:	10000126 	beq	r2,zero,10325f0 <altera_avalon_jtag_uart_write+0x190>
        break;
 10325ec:	00001006 	br	1032630 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10325f0:	0001883a 	nop
 10325f4:	e0bffc17 	ldw	r2,-16(fp)
 10325f8:	10c00d17 	ldw	r3,52(r2)
 10325fc:	e0bff517 	ldw	r2,-44(fp)
 1032600:	1880051e 	bne	r3,r2,1032618 <altera_avalon_jtag_uart_write+0x1b8>
 1032604:	e0bffc17 	ldw	r2,-16(fp)
 1032608:	10c00917 	ldw	r3,36(r2)
 103260c:	e0bffc17 	ldw	r2,-16(fp)
 1032610:	10800117 	ldw	r2,4(r2)
 1032614:	18bff736 	bltu	r3,r2,10325f4 <_gp+0xffff4970>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1032618:	e0bffc17 	ldw	r2,-16(fp)
 103261c:	10800917 	ldw	r2,36(r2)
 1032620:	10000126 	beq	r2,zero,1032628 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 1032624:	00000206 	br	1032630 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 1032628:	e0bffe17 	ldw	r2,-8(fp)
 103262c:	00bf9716 	blt	zero,r2,103248c <_gp+0xffff4808>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1032630:	e0fffd17 	ldw	r3,-12(fp)
 1032634:	e0bff717 	ldw	r2,-36(fp)
 1032638:	18800426 	beq	r3,r2,103264c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 103263c:	e0fffd17 	ldw	r3,-12(fp)
 1032640:	e0bff717 	ldw	r2,-36(fp)
 1032644:	1885c83a 	sub	r2,r3,r2
 1032648:	00000606 	br	1032664 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 103264c:	e0bfff17 	ldw	r2,-4(fp)
 1032650:	1090000c 	andi	r2,r2,16384
 1032654:	10000226 	beq	r2,zero,1032660 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 1032658:	00bffd44 	movi	r2,-11
 103265c:	00000106 	br	1032664 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1032660:	00bffec4 	movi	r2,-5
}
 1032664:	e037883a 	mov	sp,fp
 1032668:	dfc00117 	ldw	ra,4(sp)
 103266c:	df000017 	ldw	fp,0(sp)
 1032670:	dec00204 	addi	sp,sp,8
 1032674:	f800283a 	ret

01032678 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1032678:	defffa04 	addi	sp,sp,-24
 103267c:	dfc00515 	stw	ra,20(sp)
 1032680:	df000415 	stw	fp,16(sp)
 1032684:	df000404 	addi	fp,sp,16
 1032688:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 103268c:	0007883a 	mov	r3,zero
 1032690:	e0bfff17 	ldw	r2,-4(fp)
 1032694:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1032698:	e0bfff17 	ldw	r2,-4(fp)
 103269c:	10800104 	addi	r2,r2,4
 10326a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10326a4:	0005303a 	rdctl	r2,status
 10326a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10326ac:	e0fffd17 	ldw	r3,-12(fp)
 10326b0:	00bfff84 	movi	r2,-2
 10326b4:	1884703a 	and	r2,r3,r2
 10326b8:	1001703a 	wrctl	status,r2
  
  return context;
 10326bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10326c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10326c4:	10333400 	call	1033340 <alt_tick>
 10326c8:	e0bffc17 	ldw	r2,-16(fp)
 10326cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10326d0:	e0bffe17 	ldw	r2,-8(fp)
 10326d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10326d8:	e037883a 	mov	sp,fp
 10326dc:	dfc00117 	ldw	ra,4(sp)
 10326e0:	df000017 	ldw	fp,0(sp)
 10326e4:	dec00204 	addi	sp,sp,8
 10326e8:	f800283a 	ret

010326ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10326ec:	defff804 	addi	sp,sp,-32
 10326f0:	dfc00715 	stw	ra,28(sp)
 10326f4:	df000615 	stw	fp,24(sp)
 10326f8:	df000604 	addi	fp,sp,24
 10326fc:	e13ffc15 	stw	r4,-16(fp)
 1032700:	e17ffd15 	stw	r5,-12(fp)
 1032704:	e1bffe15 	stw	r6,-8(fp)
 1032708:	e1ffff15 	stw	r7,-4(fp)
 103270c:	e0bfff17 	ldw	r2,-4(fp)
 1032710:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1032714:	008040f4 	movhi	r2,259
 1032718:	109df704 	addi	r2,r2,30684
 103271c:	10800017 	ldw	r2,0(r2)
 1032720:	1000041e 	bne	r2,zero,1032734 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 1032724:	008040f4 	movhi	r2,259
 1032728:	109df704 	addi	r2,r2,30684
 103272c:	e0fffb17 	ldw	r3,-20(fp)
 1032730:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1032734:	e0bffc17 	ldw	r2,-16(fp)
 1032738:	10800104 	addi	r2,r2,4
 103273c:	00c001c4 	movi	r3,7
 1032740:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1032744:	d8000015 	stw	zero,0(sp)
 1032748:	e13ffd17 	ldw	r4,-12(fp)
 103274c:	e17ffe17 	ldw	r5,-8(fp)
 1032750:	018040f4 	movhi	r6,259
 1032754:	31899e04 	addi	r6,r6,9848
 1032758:	e1fffc17 	ldw	r7,-16(fp)
 103275c:	1032c2c0 	call	1032c2c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1032760:	e037883a 	mov	sp,fp
 1032764:	dfc00117 	ldw	ra,4(sp)
 1032768:	df000017 	ldw	fp,0(sp)
 103276c:	dec00204 	addi	sp,sp,8
 1032770:	f800283a 	ret

01032774 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1032774:	defff504 	addi	sp,sp,-44
 1032778:	df000a15 	stw	fp,40(sp)
 103277c:	df000a04 	addi	fp,sp,40
 1032780:	e13ffc15 	stw	r4,-16(fp)
 1032784:	e17ffd15 	stw	r5,-12(fp)
 1032788:	e1bffe15 	stw	r6,-8(fp)
 103278c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1032790:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1032794:	008040f4 	movhi	r2,259
 1032798:	109df704 	addi	r2,r2,30684
 103279c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10327a0:	10003f26 	beq	r2,zero,10328a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 10327a4:	e0bffc17 	ldw	r2,-16(fp)
 10327a8:	10003b26 	beq	r2,zero,1032898 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 10327ac:	e0bffc17 	ldw	r2,-16(fp)
 10327b0:	e0fffe17 	ldw	r3,-8(fp)
 10327b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 10327b8:	e0bffc17 	ldw	r2,-16(fp)
 10327bc:	e0ffff17 	ldw	r3,-4(fp)
 10327c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10327c4:	0005303a 	rdctl	r2,status
 10327c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10327cc:	e0fff817 	ldw	r3,-32(fp)
 10327d0:	00bfff84 	movi	r2,-2
 10327d4:	1884703a 	and	r2,r3,r2
 10327d8:	1001703a 	wrctl	status,r2
  
  return context;
 10327dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10327e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10327e4:	008040f4 	movhi	r2,259
 10327e8:	109df804 	addi	r2,r2,30688
 10327ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10327f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10327f4:	e0fffd17 	ldw	r3,-12(fp)
 10327f8:	e0bff617 	ldw	r2,-40(fp)
 10327fc:	1885883a 	add	r2,r3,r2
 1032800:	10c00044 	addi	r3,r2,1
 1032804:	e0bffc17 	ldw	r2,-16(fp)
 1032808:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 103280c:	e0bffc17 	ldw	r2,-16(fp)
 1032810:	10c00217 	ldw	r3,8(r2)
 1032814:	e0bff617 	ldw	r2,-40(fp)
 1032818:	1880042e 	bgeu	r3,r2,103282c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 103281c:	e0bffc17 	ldw	r2,-16(fp)
 1032820:	00c00044 	movi	r3,1
 1032824:	10c00405 	stb	r3,16(r2)
 1032828:	00000206 	br	1032834 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 103282c:	e0bffc17 	ldw	r2,-16(fp)
 1032830:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1032834:	e0fffc17 	ldw	r3,-16(fp)
 1032838:	008040f4 	movhi	r2,259
 103283c:	10972f04 	addi	r2,r2,23740
 1032840:	e0bff915 	stw	r2,-28(fp)
 1032844:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1032848:	e0bffa17 	ldw	r2,-24(fp)
 103284c:	e0fff917 	ldw	r3,-28(fp)
 1032850:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1032854:	e0bff917 	ldw	r2,-28(fp)
 1032858:	10c00017 	ldw	r3,0(r2)
 103285c:	e0bffa17 	ldw	r2,-24(fp)
 1032860:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1032864:	e0bff917 	ldw	r2,-28(fp)
 1032868:	10800017 	ldw	r2,0(r2)
 103286c:	e0fffa17 	ldw	r3,-24(fp)
 1032870:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1032874:	e0bff917 	ldw	r2,-28(fp)
 1032878:	e0fffa17 	ldw	r3,-24(fp)
 103287c:	10c00015 	stw	r3,0(r2)
 1032880:	e0bff717 	ldw	r2,-36(fp)
 1032884:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032888:	e0bffb17 	ldw	r2,-20(fp)
 103288c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1032890:	0005883a 	mov	r2,zero
 1032894:	00000306 	br	10328a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 1032898:	00bffa84 	movi	r2,-22
 103289c:	00000106 	br	10328a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 10328a0:	00bfde84 	movi	r2,-134
  }
}
 10328a4:	e037883a 	mov	sp,fp
 10328a8:	df000017 	ldw	fp,0(sp)
 10328ac:	dec00104 	addi	sp,sp,4
 10328b0:	f800283a 	ret

010328b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10328b4:	defffa04 	addi	sp,sp,-24
 10328b8:	dfc00515 	stw	ra,20(sp)
 10328bc:	df000415 	stw	fp,16(sp)
 10328c0:	df000404 	addi	fp,sp,16
 10328c4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 10328c8:	008000c4 	movi	r2,3
 10328cc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 10328d0:	e0fffd17 	ldw	r3,-12(fp)
 10328d4:	008003f4 	movhi	r2,15
 10328d8:	10909004 	addi	r2,r2,16960
 10328dc:	1885383a 	mul	r2,r3,r2
 10328e0:	01017db4 	movhi	r4,1526
 10328e4:	21384004 	addi	r4,r4,-7936
 10328e8:	100b883a 	mov	r5,r2
 10328ec:	10218f00 	call	10218f0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 10328f0:	01200034 	movhi	r4,32768
 10328f4:	213fffc4 	addi	r4,r4,-1
 10328f8:	100b883a 	mov	r5,r2
 10328fc:	10218f00 	call	10218f0 <__udivsi3>
 1032900:	e13fff17 	ldw	r4,-4(fp)
 1032904:	100b883a 	mov	r5,r2
 1032908:	10218f00 	call	10218f0 <__udivsi3>
 103290c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1032910:	e0bffe17 	ldw	r2,-8(fp)
 1032914:	10002a26 	beq	r2,zero,10329c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1032918:	e03ffc15 	stw	zero,-16(fp)
 103291c:	00001706 	br	103297c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1032920:	00a00034 	movhi	r2,32768
 1032924:	10bfffc4 	addi	r2,r2,-1
 1032928:	10bfffc4 	addi	r2,r2,-1
 103292c:	103ffe1e 	bne	r2,zero,1032928 <_gp+0xffff4ca4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1032930:	e0fffd17 	ldw	r3,-12(fp)
 1032934:	008003f4 	movhi	r2,15
 1032938:	10909004 	addi	r2,r2,16960
 103293c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1032940:	01017db4 	movhi	r4,1526
 1032944:	21384004 	addi	r4,r4,-7936
 1032948:	100b883a 	mov	r5,r2
 103294c:	10218f00 	call	10218f0 <__udivsi3>
 1032950:	01200034 	movhi	r4,32768
 1032954:	213fffc4 	addi	r4,r4,-1
 1032958:	100b883a 	mov	r5,r2
 103295c:	10218f00 	call	10218f0 <__udivsi3>
 1032960:	1007883a 	mov	r3,r2
 1032964:	e0bfff17 	ldw	r2,-4(fp)
 1032968:	10c5c83a 	sub	r2,r2,r3
 103296c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1032970:	e0bffc17 	ldw	r2,-16(fp)
 1032974:	10800044 	addi	r2,r2,1
 1032978:	e0bffc15 	stw	r2,-16(fp)
 103297c:	e0fffc17 	ldw	r3,-16(fp)
 1032980:	e0bffe17 	ldw	r2,-8(fp)
 1032984:	18bfe616 	blt	r3,r2,1032920 <_gp+0xffff4c9c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1032988:	e0fffd17 	ldw	r3,-12(fp)
 103298c:	008003f4 	movhi	r2,15
 1032990:	10909004 	addi	r2,r2,16960
 1032994:	1885383a 	mul	r2,r3,r2
 1032998:	01017db4 	movhi	r4,1526
 103299c:	21384004 	addi	r4,r4,-7936
 10329a0:	100b883a 	mov	r5,r2
 10329a4:	10218f00 	call	10218f0 <__udivsi3>
 10329a8:	1007883a 	mov	r3,r2
 10329ac:	e0bfff17 	ldw	r2,-4(fp)
 10329b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10329b4:	10bfffc4 	addi	r2,r2,-1
 10329b8:	103ffe1e 	bne	r2,zero,10329b4 <_gp+0xffff4d30>
 10329bc:	00000d06 	br	10329f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10329c0:	e0fffd17 	ldw	r3,-12(fp)
 10329c4:	008003f4 	movhi	r2,15
 10329c8:	10909004 	addi	r2,r2,16960
 10329cc:	1885383a 	mul	r2,r3,r2
 10329d0:	01017db4 	movhi	r4,1526
 10329d4:	21384004 	addi	r4,r4,-7936
 10329d8:	100b883a 	mov	r5,r2
 10329dc:	10218f00 	call	10218f0 <__udivsi3>
 10329e0:	1007883a 	mov	r3,r2
 10329e4:	e0bfff17 	ldw	r2,-4(fp)
 10329e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10329ec:	10bfffc4 	addi	r2,r2,-1
 10329f0:	00bffe16 	blt	zero,r2,10329ec <_gp+0xffff4d68>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 10329f4:	0005883a 	mov	r2,zero
}
 10329f8:	e037883a 	mov	sp,fp
 10329fc:	dfc00117 	ldw	ra,4(sp)
 1032a00:	df000017 	ldw	fp,0(sp)
 1032a04:	dec00204 	addi	sp,sp,8
 1032a08:	f800283a 	ret

01032a0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1032a0c:	defffe04 	addi	sp,sp,-8
 1032a10:	df000115 	stw	fp,4(sp)
 1032a14:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1032a18:	e03fff15 	stw	zero,-4(fp)
 1032a1c:	00000506 	br	1032a34 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1032a20:	e0bfff17 	ldw	r2,-4(fp)
 1032a24:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1032a28:	e0bfff17 	ldw	r2,-4(fp)
 1032a2c:	10800804 	addi	r2,r2,32
 1032a30:	e0bfff15 	stw	r2,-4(fp)
 1032a34:	e0bfff17 	ldw	r2,-4(fp)
 1032a38:	10820030 	cmpltui	r2,r2,2048
 1032a3c:	103ff81e 	bne	r2,zero,1032a20 <_gp+0xffff4d9c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1032a40:	e037883a 	mov	sp,fp
 1032a44:	df000017 	ldw	fp,0(sp)
 1032a48:	dec00104 	addi	sp,sp,4
 1032a4c:	f800283a 	ret

01032a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1032a50:	defffe04 	addi	sp,sp,-8
 1032a54:	dfc00115 	stw	ra,4(sp)
 1032a58:	df000015 	stw	fp,0(sp)
 1032a5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1032a60:	008040f4 	movhi	r2,259
 1032a64:	10972c04 	addi	r2,r2,23728
 1032a68:	10800017 	ldw	r2,0(r2)
 1032a6c:	10000526 	beq	r2,zero,1032a84 <alt_get_errno+0x34>
 1032a70:	008040f4 	movhi	r2,259
 1032a74:	10972c04 	addi	r2,r2,23728
 1032a78:	10800017 	ldw	r2,0(r2)
 1032a7c:	103ee83a 	callr	r2
 1032a80:	00000206 	br	1032a8c <alt_get_errno+0x3c>
 1032a84:	008040f4 	movhi	r2,259
 1032a88:	109df204 	addi	r2,r2,30664
}
 1032a8c:	e037883a 	mov	sp,fp
 1032a90:	dfc00117 	ldw	ra,4(sp)
 1032a94:	df000017 	ldw	fp,0(sp)
 1032a98:	dec00204 	addi	sp,sp,8
 1032a9c:	f800283a 	ret

01032aa0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1032aa0:	defffa04 	addi	sp,sp,-24
 1032aa4:	dfc00515 	stw	ra,20(sp)
 1032aa8:	df000415 	stw	fp,16(sp)
 1032aac:	df000404 	addi	fp,sp,16
 1032ab0:	e13ffe15 	stw	r4,-8(fp)
 1032ab4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1032ab8:	e0bffe17 	ldw	r2,-8(fp)
 1032abc:	10000326 	beq	r2,zero,1032acc <alt_dev_llist_insert+0x2c>
 1032ac0:	e0bffe17 	ldw	r2,-8(fp)
 1032ac4:	10800217 	ldw	r2,8(r2)
 1032ac8:	1000061e 	bne	r2,zero,1032ae4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1032acc:	1032a500 	call	1032a50 <alt_get_errno>
 1032ad0:	1007883a 	mov	r3,r2
 1032ad4:	00800584 	movi	r2,22
 1032ad8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1032adc:	00bffa84 	movi	r2,-22
 1032ae0:	00001306 	br	1032b30 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1032ae4:	e0bffe17 	ldw	r2,-8(fp)
 1032ae8:	e0ffff17 	ldw	r3,-4(fp)
 1032aec:	e0fffc15 	stw	r3,-16(fp)
 1032af0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1032af4:	e0bffd17 	ldw	r2,-12(fp)
 1032af8:	e0fffc17 	ldw	r3,-16(fp)
 1032afc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1032b00:	e0bffc17 	ldw	r2,-16(fp)
 1032b04:	10c00017 	ldw	r3,0(r2)
 1032b08:	e0bffd17 	ldw	r2,-12(fp)
 1032b0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1032b10:	e0bffc17 	ldw	r2,-16(fp)
 1032b14:	10800017 	ldw	r2,0(r2)
 1032b18:	e0fffd17 	ldw	r3,-12(fp)
 1032b1c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1032b20:	e0bffc17 	ldw	r2,-16(fp)
 1032b24:	e0fffd17 	ldw	r3,-12(fp)
 1032b28:	10c00015 	stw	r3,0(r2)

  return 0;  
 1032b2c:	0005883a 	mov	r2,zero
}
 1032b30:	e037883a 	mov	sp,fp
 1032b34:	dfc00117 	ldw	ra,4(sp)
 1032b38:	df000017 	ldw	fp,0(sp)
 1032b3c:	dec00204 	addi	sp,sp,8
 1032b40:	f800283a 	ret

01032b44 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1032b44:	defffd04 	addi	sp,sp,-12
 1032b48:	dfc00215 	stw	ra,8(sp)
 1032b4c:	df000115 	stw	fp,4(sp)
 1032b50:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1032b54:	008040f4 	movhi	r2,259
 1032b58:	108ee104 	addi	r2,r2,15236
 1032b5c:	e0bfff15 	stw	r2,-4(fp)
 1032b60:	00000606 	br	1032b7c <_do_ctors+0x38>
        (*ctor) (); 
 1032b64:	e0bfff17 	ldw	r2,-4(fp)
 1032b68:	10800017 	ldw	r2,0(r2)
 1032b6c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1032b70:	e0bfff17 	ldw	r2,-4(fp)
 1032b74:	10bfff04 	addi	r2,r2,-4
 1032b78:	e0bfff15 	stw	r2,-4(fp)
 1032b7c:	e0ffff17 	ldw	r3,-4(fp)
 1032b80:	008040f4 	movhi	r2,259
 1032b84:	108ee204 	addi	r2,r2,15240
 1032b88:	18bff62e 	bgeu	r3,r2,1032b64 <_gp+0xffff4ee0>
        (*ctor) (); 
}
 1032b8c:	e037883a 	mov	sp,fp
 1032b90:	dfc00117 	ldw	ra,4(sp)
 1032b94:	df000017 	ldw	fp,0(sp)
 1032b98:	dec00204 	addi	sp,sp,8
 1032b9c:	f800283a 	ret

01032ba0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1032ba0:	defffd04 	addi	sp,sp,-12
 1032ba4:	dfc00215 	stw	ra,8(sp)
 1032ba8:	df000115 	stw	fp,4(sp)
 1032bac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1032bb0:	008040f4 	movhi	r2,259
 1032bb4:	108ee104 	addi	r2,r2,15236
 1032bb8:	e0bfff15 	stw	r2,-4(fp)
 1032bbc:	00000606 	br	1032bd8 <_do_dtors+0x38>
        (*dtor) (); 
 1032bc0:	e0bfff17 	ldw	r2,-4(fp)
 1032bc4:	10800017 	ldw	r2,0(r2)
 1032bc8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1032bcc:	e0bfff17 	ldw	r2,-4(fp)
 1032bd0:	10bfff04 	addi	r2,r2,-4
 1032bd4:	e0bfff15 	stw	r2,-4(fp)
 1032bd8:	e0ffff17 	ldw	r3,-4(fp)
 1032bdc:	008040f4 	movhi	r2,259
 1032be0:	108ee204 	addi	r2,r2,15240
 1032be4:	18bff62e 	bgeu	r3,r2,1032bc0 <_gp+0xffff4f3c>
        (*dtor) (); 
}
 1032be8:	e037883a 	mov	sp,fp
 1032bec:	dfc00117 	ldw	ra,4(sp)
 1032bf0:	df000017 	ldw	fp,0(sp)
 1032bf4:	dec00204 	addi	sp,sp,8
 1032bf8:	f800283a 	ret

01032bfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1032bfc:	defffe04 	addi	sp,sp,-8
 1032c00:	dfc00115 	stw	ra,4(sp)
 1032c04:	df000015 	stw	fp,0(sp)
 1032c08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1032c0c:	0009883a 	mov	r4,zero
 1032c10:	01440004 	movi	r5,4096
 1032c14:	10336bc0 	call	10336bc <alt_icache_flush>
#endif
}
 1032c18:	e037883a 	mov	sp,fp
 1032c1c:	dfc00117 	ldw	ra,4(sp)
 1032c20:	df000017 	ldw	fp,0(sp)
 1032c24:	dec00204 	addi	sp,sp,8
 1032c28:	f800283a 	ret

01032c2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1032c2c:	defff904 	addi	sp,sp,-28
 1032c30:	dfc00615 	stw	ra,24(sp)
 1032c34:	df000515 	stw	fp,20(sp)
 1032c38:	df000504 	addi	fp,sp,20
 1032c3c:	e13ffc15 	stw	r4,-16(fp)
 1032c40:	e17ffd15 	stw	r5,-12(fp)
 1032c44:	e1bffe15 	stw	r6,-8(fp)
 1032c48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1032c4c:	e0800217 	ldw	r2,8(fp)
 1032c50:	d8800015 	stw	r2,0(sp)
 1032c54:	e13ffc17 	ldw	r4,-16(fp)
 1032c58:	e17ffd17 	ldw	r5,-12(fp)
 1032c5c:	e1bffe17 	ldw	r6,-8(fp)
 1032c60:	e1ffff17 	ldw	r7,-4(fp)
 1032c64:	1032e0c0 	call	1032e0c <alt_iic_isr_register>
}  
 1032c68:	e037883a 	mov	sp,fp
 1032c6c:	dfc00117 	ldw	ra,4(sp)
 1032c70:	df000017 	ldw	fp,0(sp)
 1032c74:	dec00204 	addi	sp,sp,8
 1032c78:	f800283a 	ret

01032c7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1032c7c:	defff904 	addi	sp,sp,-28
 1032c80:	df000615 	stw	fp,24(sp)
 1032c84:	df000604 	addi	fp,sp,24
 1032c88:	e13ffe15 	stw	r4,-8(fp)
 1032c8c:	e17fff15 	stw	r5,-4(fp)
 1032c90:	e0bfff17 	ldw	r2,-4(fp)
 1032c94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032c98:	0005303a 	rdctl	r2,status
 1032c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032ca0:	e0fffb17 	ldw	r3,-20(fp)
 1032ca4:	00bfff84 	movi	r2,-2
 1032ca8:	1884703a 	and	r2,r3,r2
 1032cac:	1001703a 	wrctl	status,r2
  
  return context;
 1032cb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1032cb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1032cb8:	e0bffa17 	ldw	r2,-24(fp)
 1032cbc:	00c00044 	movi	r3,1
 1032cc0:	1884983a 	sll	r2,r3,r2
 1032cc4:	1007883a 	mov	r3,r2
 1032cc8:	008040f4 	movhi	r2,259
 1032ccc:	109df604 	addi	r2,r2,30680
 1032cd0:	10800017 	ldw	r2,0(r2)
 1032cd4:	1886b03a 	or	r3,r3,r2
 1032cd8:	008040f4 	movhi	r2,259
 1032cdc:	109df604 	addi	r2,r2,30680
 1032ce0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1032ce4:	008040f4 	movhi	r2,259
 1032ce8:	109df604 	addi	r2,r2,30680
 1032cec:	10800017 	ldw	r2,0(r2)
 1032cf0:	100170fa 	wrctl	ienable,r2
 1032cf4:	e0bffc17 	ldw	r2,-16(fp)
 1032cf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032cfc:	e0bffd17 	ldw	r2,-12(fp)
 1032d00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1032d04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1032d08:	0001883a 	nop
}
 1032d0c:	e037883a 	mov	sp,fp
 1032d10:	df000017 	ldw	fp,0(sp)
 1032d14:	dec00104 	addi	sp,sp,4
 1032d18:	f800283a 	ret

01032d1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1032d1c:	defff904 	addi	sp,sp,-28
 1032d20:	df000615 	stw	fp,24(sp)
 1032d24:	df000604 	addi	fp,sp,24
 1032d28:	e13ffe15 	stw	r4,-8(fp)
 1032d2c:	e17fff15 	stw	r5,-4(fp)
 1032d30:	e0bfff17 	ldw	r2,-4(fp)
 1032d34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032d38:	0005303a 	rdctl	r2,status
 1032d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032d40:	e0fffb17 	ldw	r3,-20(fp)
 1032d44:	00bfff84 	movi	r2,-2
 1032d48:	1884703a 	and	r2,r3,r2
 1032d4c:	1001703a 	wrctl	status,r2
  
  return context;
 1032d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1032d54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1032d58:	e0bffa17 	ldw	r2,-24(fp)
 1032d5c:	00c00044 	movi	r3,1
 1032d60:	1884983a 	sll	r2,r3,r2
 1032d64:	0084303a 	nor	r2,zero,r2
 1032d68:	1007883a 	mov	r3,r2
 1032d6c:	008040f4 	movhi	r2,259
 1032d70:	109df604 	addi	r2,r2,30680
 1032d74:	10800017 	ldw	r2,0(r2)
 1032d78:	1886703a 	and	r3,r3,r2
 1032d7c:	008040f4 	movhi	r2,259
 1032d80:	109df604 	addi	r2,r2,30680
 1032d84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1032d88:	008040f4 	movhi	r2,259
 1032d8c:	109df604 	addi	r2,r2,30680
 1032d90:	10800017 	ldw	r2,0(r2)
 1032d94:	100170fa 	wrctl	ienable,r2
 1032d98:	e0bffc17 	ldw	r2,-16(fp)
 1032d9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032da0:	e0bffd17 	ldw	r2,-12(fp)
 1032da4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1032da8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1032dac:	0001883a 	nop
}
 1032db0:	e037883a 	mov	sp,fp
 1032db4:	df000017 	ldw	fp,0(sp)
 1032db8:	dec00104 	addi	sp,sp,4
 1032dbc:	f800283a 	ret

01032dc0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1032dc0:	defffc04 	addi	sp,sp,-16
 1032dc4:	df000315 	stw	fp,12(sp)
 1032dc8:	df000304 	addi	fp,sp,12
 1032dcc:	e13ffe15 	stw	r4,-8(fp)
 1032dd0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1032dd4:	000530fa 	rdctl	r2,ienable
 1032dd8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1032ddc:	e0bfff17 	ldw	r2,-4(fp)
 1032de0:	00c00044 	movi	r3,1
 1032de4:	1884983a 	sll	r2,r3,r2
 1032de8:	1007883a 	mov	r3,r2
 1032dec:	e0bffd17 	ldw	r2,-12(fp)
 1032df0:	1884703a 	and	r2,r3,r2
 1032df4:	1004c03a 	cmpne	r2,r2,zero
 1032df8:	10803fcc 	andi	r2,r2,255
}
 1032dfc:	e037883a 	mov	sp,fp
 1032e00:	df000017 	ldw	fp,0(sp)
 1032e04:	dec00104 	addi	sp,sp,4
 1032e08:	f800283a 	ret

01032e0c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1032e0c:	defff504 	addi	sp,sp,-44
 1032e10:	dfc00a15 	stw	ra,40(sp)
 1032e14:	df000915 	stw	fp,36(sp)
 1032e18:	df000904 	addi	fp,sp,36
 1032e1c:	e13ffc15 	stw	r4,-16(fp)
 1032e20:	e17ffd15 	stw	r5,-12(fp)
 1032e24:	e1bffe15 	stw	r6,-8(fp)
 1032e28:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1032e2c:	00bffa84 	movi	r2,-22
 1032e30:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1032e34:	e0bffd17 	ldw	r2,-12(fp)
 1032e38:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1032e3c:	e0bff817 	ldw	r2,-32(fp)
 1032e40:	10800808 	cmpgei	r2,r2,32
 1032e44:	1000271e 	bne	r2,zero,1032ee4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1032e48:	0005303a 	rdctl	r2,status
 1032e4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1032e50:	e0fffa17 	ldw	r3,-24(fp)
 1032e54:	00bfff84 	movi	r2,-2
 1032e58:	1884703a 	and	r2,r3,r2
 1032e5c:	1001703a 	wrctl	status,r2
  
  return context;
 1032e60:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1032e64:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 1032e68:	008040f4 	movhi	r2,259
 1032e6c:	109e0404 	addi	r2,r2,30736
 1032e70:	e0fff817 	ldw	r3,-32(fp)
 1032e74:	180690fa 	slli	r3,r3,3
 1032e78:	10c5883a 	add	r2,r2,r3
 1032e7c:	e0fffe17 	ldw	r3,-8(fp)
 1032e80:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1032e84:	008040f4 	movhi	r2,259
 1032e88:	109e0404 	addi	r2,r2,30736
 1032e8c:	e0fff817 	ldw	r3,-32(fp)
 1032e90:	180690fa 	slli	r3,r3,3
 1032e94:	10c5883a 	add	r2,r2,r3
 1032e98:	10800104 	addi	r2,r2,4
 1032e9c:	e0ffff17 	ldw	r3,-4(fp)
 1032ea0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1032ea4:	e0bffe17 	ldw	r2,-8(fp)
 1032ea8:	10000526 	beq	r2,zero,1032ec0 <alt_iic_isr_register+0xb4>
 1032eac:	e0bff817 	ldw	r2,-32(fp)
 1032eb0:	e13ffc17 	ldw	r4,-16(fp)
 1032eb4:	100b883a 	mov	r5,r2
 1032eb8:	1032c7c0 	call	1032c7c <alt_ic_irq_enable>
 1032ebc:	00000406 	br	1032ed0 <alt_iic_isr_register+0xc4>
 1032ec0:	e0bff817 	ldw	r2,-32(fp)
 1032ec4:	e13ffc17 	ldw	r4,-16(fp)
 1032ec8:	100b883a 	mov	r5,r2
 1032ecc:	1032d1c0 	call	1032d1c <alt_ic_irq_disable>
 1032ed0:	e0bff715 	stw	r2,-36(fp)
 1032ed4:	e0bff917 	ldw	r2,-28(fp)
 1032ed8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1032edc:	e0bffb17 	ldw	r2,-20(fp)
 1032ee0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1032ee4:	e0bff717 	ldw	r2,-36(fp)
}
 1032ee8:	e037883a 	mov	sp,fp
 1032eec:	dfc00117 	ldw	ra,4(sp)
 1032ef0:	df000017 	ldw	fp,0(sp)
 1032ef4:	dec00204 	addi	sp,sp,8
 1032ef8:	f800283a 	ret

01032efc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1032efc:	defff904 	addi	sp,sp,-28
 1032f00:	dfc00615 	stw	ra,24(sp)
 1032f04:	df000515 	stw	fp,20(sp)
 1032f08:	df000504 	addi	fp,sp,20
 1032f0c:	e13ffc15 	stw	r4,-16(fp)
 1032f10:	e17ffd15 	stw	r5,-12(fp)
 1032f14:	e1bffe15 	stw	r6,-8(fp)
 1032f18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1032f1c:	e13ffd17 	ldw	r4,-12(fp)
 1032f20:	e17ffe17 	ldw	r5,-8(fp)
 1032f24:	e1bfff17 	ldw	r6,-4(fp)
 1032f28:	10331500 	call	1033150 <open>
 1032f2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1032f30:	e0bffb17 	ldw	r2,-20(fp)
 1032f34:	10001c16 	blt	r2,zero,1032fa8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1032f38:	008040f4 	movhi	r2,259
 1032f3c:	1092a904 	addi	r2,r2,19108
 1032f40:	e0fffb17 	ldw	r3,-20(fp)
 1032f44:	18c00324 	muli	r3,r3,12
 1032f48:	10c5883a 	add	r2,r2,r3
 1032f4c:	10c00017 	ldw	r3,0(r2)
 1032f50:	e0bffc17 	ldw	r2,-16(fp)
 1032f54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1032f58:	008040f4 	movhi	r2,259
 1032f5c:	1092a904 	addi	r2,r2,19108
 1032f60:	e0fffb17 	ldw	r3,-20(fp)
 1032f64:	18c00324 	muli	r3,r3,12
 1032f68:	10c5883a 	add	r2,r2,r3
 1032f6c:	10800104 	addi	r2,r2,4
 1032f70:	10c00017 	ldw	r3,0(r2)
 1032f74:	e0bffc17 	ldw	r2,-16(fp)
 1032f78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1032f7c:	008040f4 	movhi	r2,259
 1032f80:	1092a904 	addi	r2,r2,19108
 1032f84:	e0fffb17 	ldw	r3,-20(fp)
 1032f88:	18c00324 	muli	r3,r3,12
 1032f8c:	10c5883a 	add	r2,r2,r3
 1032f90:	10800204 	addi	r2,r2,8
 1032f94:	10c00017 	ldw	r3,0(r2)
 1032f98:	e0bffc17 	ldw	r2,-16(fp)
 1032f9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1032fa0:	e13ffb17 	ldw	r4,-20(fp)
 1032fa4:	10318dc0 	call	10318dc <alt_release_fd>
  }
} 
 1032fa8:	e037883a 	mov	sp,fp
 1032fac:	dfc00117 	ldw	ra,4(sp)
 1032fb0:	df000017 	ldw	fp,0(sp)
 1032fb4:	dec00204 	addi	sp,sp,8
 1032fb8:	f800283a 	ret

01032fbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1032fbc:	defffb04 	addi	sp,sp,-20
 1032fc0:	dfc00415 	stw	ra,16(sp)
 1032fc4:	df000315 	stw	fp,12(sp)
 1032fc8:	df000304 	addi	fp,sp,12
 1032fcc:	e13ffd15 	stw	r4,-12(fp)
 1032fd0:	e17ffe15 	stw	r5,-8(fp)
 1032fd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1032fd8:	010040f4 	movhi	r4,259
 1032fdc:	2112ac04 	addi	r4,r4,19120
 1032fe0:	e17ffd17 	ldw	r5,-12(fp)
 1032fe4:	01800044 	movi	r6,1
 1032fe8:	01c07fc4 	movi	r7,511
 1032fec:	1032efc0 	call	1032efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1032ff0:	010040f4 	movhi	r4,259
 1032ff4:	2112a904 	addi	r4,r4,19108
 1032ff8:	e17ffe17 	ldw	r5,-8(fp)
 1032ffc:	000d883a 	mov	r6,zero
 1033000:	01c07fc4 	movi	r7,511
 1033004:	1032efc0 	call	1032efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1033008:	010040f4 	movhi	r4,259
 103300c:	2112af04 	addi	r4,r4,19132
 1033010:	e17fff17 	ldw	r5,-4(fp)
 1033014:	01800044 	movi	r6,1
 1033018:	01c07fc4 	movi	r7,511
 103301c:	1032efc0 	call	1032efc <alt_open_fd>
}  
 1033020:	e037883a 	mov	sp,fp
 1033024:	dfc00117 	ldw	ra,4(sp)
 1033028:	df000017 	ldw	fp,0(sp)
 103302c:	dec00204 	addi	sp,sp,8
 1033030:	f800283a 	ret

01033034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1033034:	defffe04 	addi	sp,sp,-8
 1033038:	dfc00115 	stw	ra,4(sp)
 103303c:	df000015 	stw	fp,0(sp)
 1033040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1033044:	008040f4 	movhi	r2,259
 1033048:	10972c04 	addi	r2,r2,23728
 103304c:	10800017 	ldw	r2,0(r2)
 1033050:	10000526 	beq	r2,zero,1033068 <alt_get_errno+0x34>
 1033054:	008040f4 	movhi	r2,259
 1033058:	10972c04 	addi	r2,r2,23728
 103305c:	10800017 	ldw	r2,0(r2)
 1033060:	103ee83a 	callr	r2
 1033064:	00000206 	br	1033070 <alt_get_errno+0x3c>
 1033068:	008040f4 	movhi	r2,259
 103306c:	109df204 	addi	r2,r2,30664
}
 1033070:	e037883a 	mov	sp,fp
 1033074:	dfc00117 	ldw	ra,4(sp)
 1033078:	df000017 	ldw	fp,0(sp)
 103307c:	dec00204 	addi	sp,sp,8
 1033080:	f800283a 	ret

01033084 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1033084:	defffd04 	addi	sp,sp,-12
 1033088:	df000215 	stw	fp,8(sp)
 103308c:	df000204 	addi	fp,sp,8
 1033090:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1033094:	e0bfff17 	ldw	r2,-4(fp)
 1033098:	10800217 	ldw	r2,8(r2)
 103309c:	10d00034 	orhi	r3,r2,16384
 10330a0:	e0bfff17 	ldw	r2,-4(fp)
 10330a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10330a8:	e03ffe15 	stw	zero,-8(fp)
 10330ac:	00001d06 	br	1033124 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10330b0:	008040f4 	movhi	r2,259
 10330b4:	1092a904 	addi	r2,r2,19108
 10330b8:	e0fffe17 	ldw	r3,-8(fp)
 10330bc:	18c00324 	muli	r3,r3,12
 10330c0:	10c5883a 	add	r2,r2,r3
 10330c4:	10c00017 	ldw	r3,0(r2)
 10330c8:	e0bfff17 	ldw	r2,-4(fp)
 10330cc:	10800017 	ldw	r2,0(r2)
 10330d0:	1880111e 	bne	r3,r2,1033118 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10330d4:	008040f4 	movhi	r2,259
 10330d8:	1092a904 	addi	r2,r2,19108
 10330dc:	e0fffe17 	ldw	r3,-8(fp)
 10330e0:	18c00324 	muli	r3,r3,12
 10330e4:	10c5883a 	add	r2,r2,r3
 10330e8:	10800204 	addi	r2,r2,8
 10330ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10330f0:	1000090e 	bge	r2,zero,1033118 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 10330f4:	e0bffe17 	ldw	r2,-8(fp)
 10330f8:	10c00324 	muli	r3,r2,12
 10330fc:	008040f4 	movhi	r2,259
 1033100:	1092a904 	addi	r2,r2,19108
 1033104:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1033108:	e0bfff17 	ldw	r2,-4(fp)
 103310c:	18800226 	beq	r3,r2,1033118 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1033110:	00bffcc4 	movi	r2,-13
 1033114:	00000a06 	br	1033140 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1033118:	e0bffe17 	ldw	r2,-8(fp)
 103311c:	10800044 	addi	r2,r2,1
 1033120:	e0bffe15 	stw	r2,-8(fp)
 1033124:	008040f4 	movhi	r2,259
 1033128:	10972b04 	addi	r2,r2,23724
 103312c:	10800017 	ldw	r2,0(r2)
 1033130:	1007883a 	mov	r3,r2
 1033134:	e0bffe17 	ldw	r2,-8(fp)
 1033138:	18bfdd2e 	bgeu	r3,r2,10330b0 <_gp+0xffff542c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 103313c:	0005883a 	mov	r2,zero
}
 1033140:	e037883a 	mov	sp,fp
 1033144:	df000017 	ldw	fp,0(sp)
 1033148:	dec00104 	addi	sp,sp,4
 103314c:	f800283a 	ret

01033150 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1033150:	defff604 	addi	sp,sp,-40
 1033154:	dfc00915 	stw	ra,36(sp)
 1033158:	df000815 	stw	fp,32(sp)
 103315c:	df000804 	addi	fp,sp,32
 1033160:	e13ffd15 	stw	r4,-12(fp)
 1033164:	e17ffe15 	stw	r5,-8(fp)
 1033168:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 103316c:	00bfffc4 	movi	r2,-1
 1033170:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1033174:	00bffb44 	movi	r2,-19
 1033178:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 103317c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1033180:	e13ffd17 	ldw	r4,-12(fp)
 1033184:	014040f4 	movhi	r5,259
 1033188:	29572904 	addi	r5,r5,23716
 103318c:	10334640 	call	1033464 <alt_find_dev>
 1033190:	e0bff815 	stw	r2,-32(fp)
 1033194:	e0bff817 	ldw	r2,-32(fp)
 1033198:	1000051e 	bne	r2,zero,10331b0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 103319c:	e13ffd17 	ldw	r4,-12(fp)
 10331a0:	10334f40 	call	10334f4 <alt_find_file>
 10331a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 10331a8:	00800044 	movi	r2,1
 10331ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10331b0:	e0bff817 	ldw	r2,-32(fp)
 10331b4:	10002926 	beq	r2,zero,103325c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10331b8:	e13ff817 	ldw	r4,-32(fp)
 10331bc:	10336080 	call	1033608 <alt_get_fd>
 10331c0:	e0bff915 	stw	r2,-28(fp)
 10331c4:	e0bff917 	ldw	r2,-28(fp)
 10331c8:	1000030e 	bge	r2,zero,10331d8 <open+0x88>
    {
      status = index;
 10331cc:	e0bff917 	ldw	r2,-28(fp)
 10331d0:	e0bffa15 	stw	r2,-24(fp)
 10331d4:	00002306 	br	1033264 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 10331d8:	e0bff917 	ldw	r2,-28(fp)
 10331dc:	10c00324 	muli	r3,r2,12
 10331e0:	008040f4 	movhi	r2,259
 10331e4:	1092a904 	addi	r2,r2,19108
 10331e8:	1885883a 	add	r2,r3,r2
 10331ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10331f0:	e0fffe17 	ldw	r3,-8(fp)
 10331f4:	00900034 	movhi	r2,16384
 10331f8:	10bfffc4 	addi	r2,r2,-1
 10331fc:	1886703a 	and	r3,r3,r2
 1033200:	e0bffc17 	ldw	r2,-16(fp)
 1033204:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1033208:	e0bffb17 	ldw	r2,-20(fp)
 103320c:	1000051e 	bne	r2,zero,1033224 <open+0xd4>
 1033210:	e13ffc17 	ldw	r4,-16(fp)
 1033214:	10330840 	call	1033084 <alt_file_locked>
 1033218:	e0bffa15 	stw	r2,-24(fp)
 103321c:	e0bffa17 	ldw	r2,-24(fp)
 1033220:	10001016 	blt	r2,zero,1033264 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1033224:	e0bff817 	ldw	r2,-32(fp)
 1033228:	10800317 	ldw	r2,12(r2)
 103322c:	10000826 	beq	r2,zero,1033250 <open+0x100>
 1033230:	e0bff817 	ldw	r2,-32(fp)
 1033234:	10800317 	ldw	r2,12(r2)
 1033238:	e13ffc17 	ldw	r4,-16(fp)
 103323c:	e17ffd17 	ldw	r5,-12(fp)
 1033240:	e1bffe17 	ldw	r6,-8(fp)
 1033244:	e1ffff17 	ldw	r7,-4(fp)
 1033248:	103ee83a 	callr	r2
 103324c:	00000106 	br	1033254 <open+0x104>
 1033250:	0005883a 	mov	r2,zero
 1033254:	e0bffa15 	stw	r2,-24(fp)
 1033258:	00000206 	br	1033264 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 103325c:	00bffb44 	movi	r2,-19
 1033260:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1033264:	e0bffa17 	ldw	r2,-24(fp)
 1033268:	1000090e 	bge	r2,zero,1033290 <open+0x140>
  {
    alt_release_fd (index);  
 103326c:	e13ff917 	ldw	r4,-28(fp)
 1033270:	10318dc0 	call	10318dc <alt_release_fd>
    ALT_ERRNO = -status;
 1033274:	10330340 	call	1033034 <alt_get_errno>
 1033278:	1007883a 	mov	r3,r2
 103327c:	e0bffa17 	ldw	r2,-24(fp)
 1033280:	0085c83a 	sub	r2,zero,r2
 1033284:	18800015 	stw	r2,0(r3)
    return -1;
 1033288:	00bfffc4 	movi	r2,-1
 103328c:	00000106 	br	1033294 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 1033290:	e0bff917 	ldw	r2,-28(fp)
}
 1033294:	e037883a 	mov	sp,fp
 1033298:	dfc00117 	ldw	ra,4(sp)
 103329c:	df000017 	ldw	fp,0(sp)
 10332a0:	dec00204 	addi	sp,sp,8
 10332a4:	f800283a 	ret

010332a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10332a8:	defffa04 	addi	sp,sp,-24
 10332ac:	df000515 	stw	fp,20(sp)
 10332b0:	df000504 	addi	fp,sp,20
 10332b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10332b8:	0005303a 	rdctl	r2,status
 10332bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10332c0:	e0fffc17 	ldw	r3,-16(fp)
 10332c4:	00bfff84 	movi	r2,-2
 10332c8:	1884703a 	and	r2,r3,r2
 10332cc:	1001703a 	wrctl	status,r2
  
  return context;
 10332d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10332d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10332d8:	e0bfff17 	ldw	r2,-4(fp)
 10332dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10332e0:	e0bffd17 	ldw	r2,-12(fp)
 10332e4:	10800017 	ldw	r2,0(r2)
 10332e8:	e0fffd17 	ldw	r3,-12(fp)
 10332ec:	18c00117 	ldw	r3,4(r3)
 10332f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10332f4:	e0bffd17 	ldw	r2,-12(fp)
 10332f8:	10800117 	ldw	r2,4(r2)
 10332fc:	e0fffd17 	ldw	r3,-12(fp)
 1033300:	18c00017 	ldw	r3,0(r3)
 1033304:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1033308:	e0bffd17 	ldw	r2,-12(fp)
 103330c:	e0fffd17 	ldw	r3,-12(fp)
 1033310:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1033314:	e0bffd17 	ldw	r2,-12(fp)
 1033318:	e0fffd17 	ldw	r3,-12(fp)
 103331c:	10c00015 	stw	r3,0(r2)
 1033320:	e0bffb17 	ldw	r2,-20(fp)
 1033324:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1033328:	e0bffe17 	ldw	r2,-8(fp)
 103332c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1033330:	e037883a 	mov	sp,fp
 1033334:	df000017 	ldw	fp,0(sp)
 1033338:	dec00104 	addi	sp,sp,4
 103333c:	f800283a 	ret

01033340 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1033340:	defffb04 	addi	sp,sp,-20
 1033344:	dfc00415 	stw	ra,16(sp)
 1033348:	df000315 	stw	fp,12(sp)
 103334c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1033350:	d0a00e17 	ldw	r2,-32712(gp)
 1033354:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1033358:	d0a6d717 	ldw	r2,-25764(gp)
 103335c:	10800044 	addi	r2,r2,1
 1033360:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1033364:	00002e06 	br	1033420 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1033368:	e0bffd17 	ldw	r2,-12(fp)
 103336c:	10800017 	ldw	r2,0(r2)
 1033370:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1033374:	e0bffd17 	ldw	r2,-12(fp)
 1033378:	10800403 	ldbu	r2,16(r2)
 103337c:	10803fcc 	andi	r2,r2,255
 1033380:	10000426 	beq	r2,zero,1033394 <alt_tick+0x54>
 1033384:	d0a6d717 	ldw	r2,-25764(gp)
 1033388:	1000021e 	bne	r2,zero,1033394 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 103338c:	e0bffd17 	ldw	r2,-12(fp)
 1033390:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1033394:	e0bffd17 	ldw	r2,-12(fp)
 1033398:	10800217 	ldw	r2,8(r2)
 103339c:	d0e6d717 	ldw	r3,-25764(gp)
 10333a0:	18801d36 	bltu	r3,r2,1033418 <alt_tick+0xd8>
 10333a4:	e0bffd17 	ldw	r2,-12(fp)
 10333a8:	10800403 	ldbu	r2,16(r2)
 10333ac:	10803fcc 	andi	r2,r2,255
 10333b0:	1000191e 	bne	r2,zero,1033418 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10333b4:	e0bffd17 	ldw	r2,-12(fp)
 10333b8:	10800317 	ldw	r2,12(r2)
 10333bc:	e0fffd17 	ldw	r3,-12(fp)
 10333c0:	18c00517 	ldw	r3,20(r3)
 10333c4:	1809883a 	mov	r4,r3
 10333c8:	103ee83a 	callr	r2
 10333cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10333d0:	e0bfff17 	ldw	r2,-4(fp)
 10333d4:	1000031e 	bne	r2,zero,10333e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10333d8:	e13ffd17 	ldw	r4,-12(fp)
 10333dc:	10332a80 	call	10332a8 <alt_alarm_stop>
 10333e0:	00000d06 	br	1033418 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10333e4:	e0bffd17 	ldw	r2,-12(fp)
 10333e8:	10c00217 	ldw	r3,8(r2)
 10333ec:	e0bfff17 	ldw	r2,-4(fp)
 10333f0:	1887883a 	add	r3,r3,r2
 10333f4:	e0bffd17 	ldw	r2,-12(fp)
 10333f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10333fc:	e0bffd17 	ldw	r2,-12(fp)
 1033400:	10c00217 	ldw	r3,8(r2)
 1033404:	d0a6d717 	ldw	r2,-25764(gp)
 1033408:	1880032e 	bgeu	r3,r2,1033418 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 103340c:	e0bffd17 	ldw	r2,-12(fp)
 1033410:	00c00044 	movi	r3,1
 1033414:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1033418:	e0bffe17 	ldw	r2,-8(fp)
 103341c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1033420:	e0fffd17 	ldw	r3,-12(fp)
 1033424:	d0a00e04 	addi	r2,gp,-32712
 1033428:	18bfcf1e 	bne	r3,r2,1033368 <_gp+0xffff56e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 103342c:	0001883a 	nop
}
 1033430:	e037883a 	mov	sp,fp
 1033434:	dfc00117 	ldw	ra,4(sp)
 1033438:	df000017 	ldw	fp,0(sp)
 103343c:	dec00204 	addi	sp,sp,8
 1033440:	f800283a 	ret

01033444 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1033444:	deffff04 	addi	sp,sp,-4
 1033448:	df000015 	stw	fp,0(sp)
 103344c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1033450:	000170fa 	wrctl	ienable,zero
}
 1033454:	e037883a 	mov	sp,fp
 1033458:	df000017 	ldw	fp,0(sp)
 103345c:	dec00104 	addi	sp,sp,4
 1033460:	f800283a 	ret

01033464 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1033464:	defffa04 	addi	sp,sp,-24
 1033468:	dfc00515 	stw	ra,20(sp)
 103346c:	df000415 	stw	fp,16(sp)
 1033470:	df000404 	addi	fp,sp,16
 1033474:	e13ffe15 	stw	r4,-8(fp)
 1033478:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 103347c:	e0bfff17 	ldw	r2,-4(fp)
 1033480:	10800017 	ldw	r2,0(r2)
 1033484:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1033488:	e13ffe17 	ldw	r4,-8(fp)
 103348c:	1022f4c0 	call	1022f4c <strlen>
 1033490:	10800044 	addi	r2,r2,1
 1033494:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1033498:	00000d06 	br	10334d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 103349c:	e0bffc17 	ldw	r2,-16(fp)
 10334a0:	10c00217 	ldw	r3,8(r2)
 10334a4:	e0bffd17 	ldw	r2,-12(fp)
 10334a8:	1809883a 	mov	r4,r3
 10334ac:	e17ffe17 	ldw	r5,-8(fp)
 10334b0:	100d883a 	mov	r6,r2
 10334b4:	10338300 	call	1033830 <memcmp>
 10334b8:	1000021e 	bne	r2,zero,10334c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10334bc:	e0bffc17 	ldw	r2,-16(fp)
 10334c0:	00000706 	br	10334e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10334c4:	e0bffc17 	ldw	r2,-16(fp)
 10334c8:	10800017 	ldw	r2,0(r2)
 10334cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10334d0:	e0fffc17 	ldw	r3,-16(fp)
 10334d4:	e0bfff17 	ldw	r2,-4(fp)
 10334d8:	18bff01e 	bne	r3,r2,103349c <_gp+0xffff5818>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10334dc:	0005883a 	mov	r2,zero
}
 10334e0:	e037883a 	mov	sp,fp
 10334e4:	dfc00117 	ldw	ra,4(sp)
 10334e8:	df000017 	ldw	fp,0(sp)
 10334ec:	dec00204 	addi	sp,sp,8
 10334f0:	f800283a 	ret

010334f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10334f4:	defffb04 	addi	sp,sp,-20
 10334f8:	dfc00415 	stw	ra,16(sp)
 10334fc:	df000315 	stw	fp,12(sp)
 1033500:	df000304 	addi	fp,sp,12
 1033504:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1033508:	008040f4 	movhi	r2,259
 103350c:	10972704 	addi	r2,r2,23708
 1033510:	10800017 	ldw	r2,0(r2)
 1033514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1033518:	00003106 	br	10335e0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 103351c:	e0bffd17 	ldw	r2,-12(fp)
 1033520:	10800217 	ldw	r2,8(r2)
 1033524:	1009883a 	mov	r4,r2
 1033528:	1022f4c0 	call	1022f4c <strlen>
 103352c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1033530:	e0bffd17 	ldw	r2,-12(fp)
 1033534:	10c00217 	ldw	r3,8(r2)
 1033538:	e0bffe17 	ldw	r2,-8(fp)
 103353c:	10bfffc4 	addi	r2,r2,-1
 1033540:	1885883a 	add	r2,r3,r2
 1033544:	10800003 	ldbu	r2,0(r2)
 1033548:	10803fcc 	andi	r2,r2,255
 103354c:	1080201c 	xori	r2,r2,128
 1033550:	10bfe004 	addi	r2,r2,-128
 1033554:	10800bd8 	cmpnei	r2,r2,47
 1033558:	1000031e 	bne	r2,zero,1033568 <alt_find_file+0x74>
    {
      len -= 1;
 103355c:	e0bffe17 	ldw	r2,-8(fp)
 1033560:	10bfffc4 	addi	r2,r2,-1
 1033564:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1033568:	e0bffe17 	ldw	r2,-8(fp)
 103356c:	e0ffff17 	ldw	r3,-4(fp)
 1033570:	1885883a 	add	r2,r3,r2
 1033574:	10800003 	ldbu	r2,0(r2)
 1033578:	10803fcc 	andi	r2,r2,255
 103357c:	1080201c 	xori	r2,r2,128
 1033580:	10bfe004 	addi	r2,r2,-128
 1033584:	10800be0 	cmpeqi	r2,r2,47
 1033588:	1000081e 	bne	r2,zero,10335ac <alt_find_file+0xb8>
 103358c:	e0bffe17 	ldw	r2,-8(fp)
 1033590:	e0ffff17 	ldw	r3,-4(fp)
 1033594:	1885883a 	add	r2,r3,r2
 1033598:	10800003 	ldbu	r2,0(r2)
 103359c:	10803fcc 	andi	r2,r2,255
 10335a0:	1080201c 	xori	r2,r2,128
 10335a4:	10bfe004 	addi	r2,r2,-128
 10335a8:	10000a1e 	bne	r2,zero,10335d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 10335ac:	e0bffd17 	ldw	r2,-12(fp)
 10335b0:	10c00217 	ldw	r3,8(r2)
 10335b4:	e0bffe17 	ldw	r2,-8(fp)
 10335b8:	1809883a 	mov	r4,r3
 10335bc:	e17fff17 	ldw	r5,-4(fp)
 10335c0:	100d883a 	mov	r6,r2
 10335c4:	10338300 	call	1033830 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10335c8:	1000021e 	bne	r2,zero,10335d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10335cc:	e0bffd17 	ldw	r2,-12(fp)
 10335d0:	00000806 	br	10335f4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 10335d4:	e0bffd17 	ldw	r2,-12(fp)
 10335d8:	10800017 	ldw	r2,0(r2)
 10335dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10335e0:	e0fffd17 	ldw	r3,-12(fp)
 10335e4:	008040f4 	movhi	r2,259
 10335e8:	10972704 	addi	r2,r2,23708
 10335ec:	18bfcb1e 	bne	r3,r2,103351c <_gp+0xffff5898>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10335f0:	0005883a 	mov	r2,zero
}
 10335f4:	e037883a 	mov	sp,fp
 10335f8:	dfc00117 	ldw	ra,4(sp)
 10335fc:	df000017 	ldw	fp,0(sp)
 1033600:	dec00204 	addi	sp,sp,8
 1033604:	f800283a 	ret

01033608 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1033608:	defffc04 	addi	sp,sp,-16
 103360c:	df000315 	stw	fp,12(sp)
 1033610:	df000304 	addi	fp,sp,12
 1033614:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1033618:	00bffa04 	movi	r2,-24
 103361c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1033620:	e03ffd15 	stw	zero,-12(fp)
 1033624:	00001d06 	br	103369c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 1033628:	008040f4 	movhi	r2,259
 103362c:	1092a904 	addi	r2,r2,19108
 1033630:	e0fffd17 	ldw	r3,-12(fp)
 1033634:	18c00324 	muli	r3,r3,12
 1033638:	10c5883a 	add	r2,r2,r3
 103363c:	10800017 	ldw	r2,0(r2)
 1033640:	1000131e 	bne	r2,zero,1033690 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 1033644:	008040f4 	movhi	r2,259
 1033648:	1092a904 	addi	r2,r2,19108
 103364c:	e0fffd17 	ldw	r3,-12(fp)
 1033650:	18c00324 	muli	r3,r3,12
 1033654:	10c5883a 	add	r2,r2,r3
 1033658:	e0ffff17 	ldw	r3,-4(fp)
 103365c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1033660:	008040f4 	movhi	r2,259
 1033664:	10972b04 	addi	r2,r2,23724
 1033668:	10c00017 	ldw	r3,0(r2)
 103366c:	e0bffd17 	ldw	r2,-12(fp)
 1033670:	1880040e 	bge	r3,r2,1033684 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 1033674:	008040f4 	movhi	r2,259
 1033678:	10972b04 	addi	r2,r2,23724
 103367c:	e0fffd17 	ldw	r3,-12(fp)
 1033680:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 1033684:	e0bffd17 	ldw	r2,-12(fp)
 1033688:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 103368c:	00000606 	br	10336a8 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1033690:	e0bffd17 	ldw	r2,-12(fp)
 1033694:	10800044 	addi	r2,r2,1
 1033698:	e0bffd15 	stw	r2,-12(fp)
 103369c:	e0bffd17 	ldw	r2,-12(fp)
 10336a0:	10800810 	cmplti	r2,r2,32
 10336a4:	103fe01e 	bne	r2,zero,1033628 <_gp+0xffff59a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10336a8:	e0bffe17 	ldw	r2,-8(fp)
}
 10336ac:	e037883a 	mov	sp,fp
 10336b0:	df000017 	ldw	fp,0(sp)
 10336b4:	dec00104 	addi	sp,sp,4
 10336b8:	f800283a 	ret

010336bc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10336bc:	defffb04 	addi	sp,sp,-20
 10336c0:	df000415 	stw	fp,16(sp)
 10336c4:	df000404 	addi	fp,sp,16
 10336c8:	e13ffe15 	stw	r4,-8(fp)
 10336cc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10336d0:	e0bfff17 	ldw	r2,-4(fp)
 10336d4:	10840070 	cmpltui	r2,r2,4097
 10336d8:	1000021e 	bne	r2,zero,10336e4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10336dc:	00840004 	movi	r2,4096
 10336e0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 10336e4:	e0fffe17 	ldw	r3,-8(fp)
 10336e8:	e0bfff17 	ldw	r2,-4(fp)
 10336ec:	1885883a 	add	r2,r3,r2
 10336f0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10336f4:	e0bffe17 	ldw	r2,-8(fp)
 10336f8:	e0bffc15 	stw	r2,-16(fp)
 10336fc:	00000506 	br	1033714 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1033700:	e0bffc17 	ldw	r2,-16(fp)
 1033704:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1033708:	e0bffc17 	ldw	r2,-16(fp)
 103370c:	10800804 	addi	r2,r2,32
 1033710:	e0bffc15 	stw	r2,-16(fp)
 1033714:	e0fffc17 	ldw	r3,-16(fp)
 1033718:	e0bffd17 	ldw	r2,-12(fp)
 103371c:	18bff836 	bltu	r3,r2,1033700 <_gp+0xffff5a7c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1033720:	e0bffe17 	ldw	r2,-8(fp)
 1033724:	108007cc 	andi	r2,r2,31
 1033728:	10000226 	beq	r2,zero,1033734 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 103372c:	e0bffc17 	ldw	r2,-16(fp)
 1033730:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1033734:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1033738:	e037883a 	mov	sp,fp
 103373c:	df000017 	ldw	fp,0(sp)
 1033740:	dec00104 	addi	sp,sp,4
 1033744:	f800283a 	ret

01033748 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1033748:	defffe04 	addi	sp,sp,-8
 103374c:	df000115 	stw	fp,4(sp)
 1033750:	df000104 	addi	fp,sp,4
 1033754:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1033758:	e0bfff17 	ldw	r2,-4(fp)
 103375c:	10bffe84 	addi	r2,r2,-6
 1033760:	10c00428 	cmpgeui	r3,r2,16
 1033764:	18001a1e 	bne	r3,zero,10337d0 <alt_exception_cause_generated_bad_addr+0x88>
 1033768:	100690ba 	slli	r3,r2,2
 103376c:	008040f4 	movhi	r2,259
 1033770:	108de004 	addi	r2,r2,14208
 1033774:	1885883a 	add	r2,r3,r2
 1033778:	10800017 	ldw	r2,0(r2)
 103377c:	1000683a 	jmp	r2
 1033780:	010337c0 	call	10337c <__reset-0xf1cc84>
 1033784:	010337c0 	call	10337c <__reset-0xf1cc84>
 1033788:	010337d0 	cmplti	r4,zero,3295
 103378c:	010337d0 	cmplti	r4,zero,3295
 1033790:	010337d0 	cmplti	r4,zero,3295
 1033794:	010337c0 	call	10337c <__reset-0xf1cc84>
 1033798:	010337c8 	cmpgei	r4,zero,3295
 103379c:	010337d0 	cmplti	r4,zero,3295
 10337a0:	010337c0 	call	10337c <__reset-0xf1cc84>
 10337a4:	010337c0 	call	10337c <__reset-0xf1cc84>
 10337a8:	010337d0 	cmplti	r4,zero,3295
 10337ac:	010337c0 	call	10337c <__reset-0xf1cc84>
 10337b0:	010337c8 	cmpgei	r4,zero,3295
 10337b4:	010337d0 	cmplti	r4,zero,3295
 10337b8:	010337d0 	cmplti	r4,zero,3295
 10337bc:	010337c0 	call	10337c <__reset-0xf1cc84>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 10337c0:	00800044 	movi	r2,1
 10337c4:	00000306 	br	10337d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 10337c8:	0005883a 	mov	r2,zero
 10337cc:	00000106 	br	10337d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 10337d0:	0005883a 	mov	r2,zero
  }
}
 10337d4:	e037883a 	mov	sp,fp
 10337d8:	df000017 	ldw	fp,0(sp)
 10337dc:	dec00104 	addi	sp,sp,4
 10337e0:	f800283a 	ret

010337e4 <atexit>:
 10337e4:	200b883a 	mov	r5,r4
 10337e8:	000d883a 	mov	r6,zero
 10337ec:	0009883a 	mov	r4,zero
 10337f0:	000f883a 	mov	r7,zero
 10337f4:	10338ac1 	jmpi	10338ac <__register_exitproc>

010337f8 <exit>:
 10337f8:	defffe04 	addi	sp,sp,-8
 10337fc:	000b883a 	mov	r5,zero
 1033800:	dc000015 	stw	r16,0(sp)
 1033804:	dfc00115 	stw	ra,4(sp)
 1033808:	2021883a 	mov	r16,r4
 103380c:	10339c00 	call	10339c0 <__call_exitprocs>
 1033810:	008040f4 	movhi	r2,259
 1033814:	10972104 	addi	r2,r2,23684
 1033818:	11000017 	ldw	r4,0(r2)
 103381c:	20800f17 	ldw	r2,60(r4)
 1033820:	10000126 	beq	r2,zero,1033828 <exit+0x30>
 1033824:	103ee83a 	callr	r2
 1033828:	8009883a 	mov	r4,r16
 103382c:	1033b540 	call	1033b54 <_exit>

01033830 <memcmp>:
 1033830:	01c000c4 	movi	r7,3
 1033834:	3980192e 	bgeu	r7,r6,103389c <memcmp+0x6c>
 1033838:	2144b03a 	or	r2,r4,r5
 103383c:	11c4703a 	and	r2,r2,r7
 1033840:	10000f26 	beq	r2,zero,1033880 <memcmp+0x50>
 1033844:	20800003 	ldbu	r2,0(r4)
 1033848:	28c00003 	ldbu	r3,0(r5)
 103384c:	10c0151e 	bne	r2,r3,10338a4 <memcmp+0x74>
 1033850:	31bfff84 	addi	r6,r6,-2
 1033854:	01ffffc4 	movi	r7,-1
 1033858:	00000406 	br	103386c <memcmp+0x3c>
 103385c:	20800003 	ldbu	r2,0(r4)
 1033860:	28c00003 	ldbu	r3,0(r5)
 1033864:	31bfffc4 	addi	r6,r6,-1
 1033868:	10c00e1e 	bne	r2,r3,10338a4 <memcmp+0x74>
 103386c:	21000044 	addi	r4,r4,1
 1033870:	29400044 	addi	r5,r5,1
 1033874:	31fff91e 	bne	r6,r7,103385c <_gp+0xffff5bd8>
 1033878:	0005883a 	mov	r2,zero
 103387c:	f800283a 	ret
 1033880:	20c00017 	ldw	r3,0(r4)
 1033884:	28800017 	ldw	r2,0(r5)
 1033888:	1880041e 	bne	r3,r2,103389c <memcmp+0x6c>
 103388c:	31bfff04 	addi	r6,r6,-4
 1033890:	21000104 	addi	r4,r4,4
 1033894:	29400104 	addi	r5,r5,4
 1033898:	39bff936 	bltu	r7,r6,1033880 <_gp+0xffff5bfc>
 103389c:	303fe91e 	bne	r6,zero,1033844 <_gp+0xffff5bc0>
 10338a0:	003ff506 	br	1033878 <_gp+0xffff5bf4>
 10338a4:	10c5c83a 	sub	r2,r2,r3
 10338a8:	f800283a 	ret

010338ac <__register_exitproc>:
 10338ac:	008040f4 	movhi	r2,259
 10338b0:	defffa04 	addi	sp,sp,-24
 10338b4:	10972104 	addi	r2,r2,23684
 10338b8:	dc000315 	stw	r16,12(sp)
 10338bc:	14000017 	ldw	r16,0(r2)
 10338c0:	dc400415 	stw	r17,16(sp)
 10338c4:	dfc00515 	stw	ra,20(sp)
 10338c8:	80805217 	ldw	r2,328(r16)
 10338cc:	2023883a 	mov	r17,r4
 10338d0:	10003626 	beq	r2,zero,10339ac <__register_exitproc+0x100>
 10338d4:	10c00117 	ldw	r3,4(r2)
 10338d8:	010007c4 	movi	r4,31
 10338dc:	20c00e16 	blt	r4,r3,1033918 <__register_exitproc+0x6c>
 10338e0:	1a400044 	addi	r9,r3,1
 10338e4:	8800211e 	bne	r17,zero,103396c <__register_exitproc+0xc0>
 10338e8:	18c00084 	addi	r3,r3,2
 10338ec:	18c7883a 	add	r3,r3,r3
 10338f0:	18c7883a 	add	r3,r3,r3
 10338f4:	12400115 	stw	r9,4(r2)
 10338f8:	10c7883a 	add	r3,r2,r3
 10338fc:	19400015 	stw	r5,0(r3)
 1033900:	0005883a 	mov	r2,zero
 1033904:	dfc00517 	ldw	ra,20(sp)
 1033908:	dc400417 	ldw	r17,16(sp)
 103390c:	dc000317 	ldw	r16,12(sp)
 1033910:	dec00604 	addi	sp,sp,24
 1033914:	f800283a 	ret
 1033918:	00800034 	movhi	r2,0
 103391c:	10800004 	addi	r2,r2,0
 1033920:	10002526 	beq	r2,zero,10339b8 <__register_exitproc+0x10c>
 1033924:	01006404 	movi	r4,400
 1033928:	d9400015 	stw	r5,0(sp)
 103392c:	d9800115 	stw	r6,4(sp)
 1033930:	d9c00215 	stw	r7,8(sp)
 1033934:	00000000 	call	0 <__reset-0x1020000>
 1033938:	d9400017 	ldw	r5,0(sp)
 103393c:	d9800117 	ldw	r6,4(sp)
 1033940:	d9c00217 	ldw	r7,8(sp)
 1033944:	10001c26 	beq	r2,zero,10339b8 <__register_exitproc+0x10c>
 1033948:	80c05217 	ldw	r3,328(r16)
 103394c:	10000115 	stw	zero,4(r2)
 1033950:	02400044 	movi	r9,1
 1033954:	10c00015 	stw	r3,0(r2)
 1033958:	80805215 	stw	r2,328(r16)
 103395c:	10006215 	stw	zero,392(r2)
 1033960:	10006315 	stw	zero,396(r2)
 1033964:	0007883a 	mov	r3,zero
 1033968:	883fdf26 	beq	r17,zero,10338e8 <_gp+0xffff5c64>
 103396c:	18d1883a 	add	r8,r3,r3
 1033970:	4211883a 	add	r8,r8,r8
 1033974:	1211883a 	add	r8,r2,r8
 1033978:	41802215 	stw	r6,136(r8)
 103397c:	01000044 	movi	r4,1
 1033980:	11806217 	ldw	r6,392(r2)
 1033984:	20c8983a 	sll	r4,r4,r3
 1033988:	310cb03a 	or	r6,r6,r4
 103398c:	11806215 	stw	r6,392(r2)
 1033990:	41c04215 	stw	r7,264(r8)
 1033994:	01800084 	movi	r6,2
 1033998:	89bfd31e 	bne	r17,r6,10338e8 <_gp+0xffff5c64>
 103399c:	11806317 	ldw	r6,396(r2)
 10339a0:	3108b03a 	or	r4,r6,r4
 10339a4:	11006315 	stw	r4,396(r2)
 10339a8:	003fcf06 	br	10338e8 <_gp+0xffff5c64>
 10339ac:	80805304 	addi	r2,r16,332
 10339b0:	80805215 	stw	r2,328(r16)
 10339b4:	003fc706 	br	10338d4 <_gp+0xffff5c50>
 10339b8:	00bfffc4 	movi	r2,-1
 10339bc:	003fd106 	br	1033904 <_gp+0xffff5c80>

010339c0 <__call_exitprocs>:
 10339c0:	008040f4 	movhi	r2,259
 10339c4:	10972104 	addi	r2,r2,23684
 10339c8:	10800017 	ldw	r2,0(r2)
 10339cc:	defff404 	addi	sp,sp,-48
 10339d0:	dd800815 	stw	r22,32(sp)
 10339d4:	d8800015 	stw	r2,0(sp)
 10339d8:	10805204 	addi	r2,r2,328
 10339dc:	dd000615 	stw	r20,24(sp)
 10339e0:	dc800415 	stw	r18,16(sp)
 10339e4:	dfc00b15 	stw	ra,44(sp)
 10339e8:	df000a15 	stw	fp,40(sp)
 10339ec:	ddc00915 	stw	r23,36(sp)
 10339f0:	dd400715 	stw	r21,28(sp)
 10339f4:	dcc00515 	stw	r19,20(sp)
 10339f8:	dc400315 	stw	r17,12(sp)
 10339fc:	dc000215 	stw	r16,8(sp)
 1033a00:	2025883a 	mov	r18,r4
 1033a04:	2829883a 	mov	r20,r5
 1033a08:	d8800115 	stw	r2,4(sp)
 1033a0c:	05bfffc4 	movi	r22,-1
 1033a10:	d8800017 	ldw	r2,0(sp)
 1033a14:	14c05217 	ldw	r19,328(r2)
 1033a18:	98001d26 	beq	r19,zero,1033a90 <__call_exitprocs+0xd0>
 1033a1c:	dd400117 	ldw	r21,4(sp)
 1033a20:	98800117 	ldw	r2,4(r19)
 1033a24:	173fffc4 	addi	fp,r2,-1
 1033a28:	e0000d16 	blt	fp,zero,1033a60 <__call_exitprocs+0xa0>
 1033a2c:	14000044 	addi	r16,r2,1
 1033a30:	8421883a 	add	r16,r16,r16
 1033a34:	8421883a 	add	r16,r16,r16
 1033a38:	84402004 	addi	r17,r16,128
 1033a3c:	9c63883a 	add	r17,r19,r17
 1033a40:	9c21883a 	add	r16,r19,r16
 1033a44:	a0001e26 	beq	r20,zero,1033ac0 <__call_exitprocs+0x100>
 1033a48:	80804017 	ldw	r2,256(r16)
 1033a4c:	15001c26 	beq	r2,r20,1033ac0 <__call_exitprocs+0x100>
 1033a50:	e73fffc4 	addi	fp,fp,-1
 1033a54:	843fff04 	addi	r16,r16,-4
 1033a58:	8c7fff04 	addi	r17,r17,-4
 1033a5c:	e5bff91e 	bne	fp,r22,1033a44 <_gp+0xffff5dc0>
 1033a60:	00800034 	movhi	r2,0
 1033a64:	10800004 	addi	r2,r2,0
 1033a68:	10000926 	beq	r2,zero,1033a90 <__call_exitprocs+0xd0>
 1033a6c:	98800117 	ldw	r2,4(r19)
 1033a70:	1000311e 	bne	r2,zero,1033b38 <__call_exitprocs+0x178>
 1033a74:	98800017 	ldw	r2,0(r19)
 1033a78:	10003426 	beq	r2,zero,1033b4c <__call_exitprocs+0x18c>
 1033a7c:	9809883a 	mov	r4,r19
 1033a80:	a8800015 	stw	r2,0(r21)
 1033a84:	00000000 	call	0 <__reset-0x1020000>
 1033a88:	acc00017 	ldw	r19,0(r21)
 1033a8c:	983fe41e 	bne	r19,zero,1033a20 <_gp+0xffff5d9c>
 1033a90:	dfc00b17 	ldw	ra,44(sp)
 1033a94:	df000a17 	ldw	fp,40(sp)
 1033a98:	ddc00917 	ldw	r23,36(sp)
 1033a9c:	dd800817 	ldw	r22,32(sp)
 1033aa0:	dd400717 	ldw	r21,28(sp)
 1033aa4:	dd000617 	ldw	r20,24(sp)
 1033aa8:	dcc00517 	ldw	r19,20(sp)
 1033aac:	dc800417 	ldw	r18,16(sp)
 1033ab0:	dc400317 	ldw	r17,12(sp)
 1033ab4:	dc000217 	ldw	r16,8(sp)
 1033ab8:	dec00c04 	addi	sp,sp,48
 1033abc:	f800283a 	ret
 1033ac0:	98800117 	ldw	r2,4(r19)
 1033ac4:	80c00017 	ldw	r3,0(r16)
 1033ac8:	10bfffc4 	addi	r2,r2,-1
 1033acc:	17001526 	beq	r2,fp,1033b24 <__call_exitprocs+0x164>
 1033ad0:	80000015 	stw	zero,0(r16)
 1033ad4:	183fde26 	beq	r3,zero,1033a50 <_gp+0xffff5dcc>
 1033ad8:	00800044 	movi	r2,1
 1033adc:	1708983a 	sll	r4,r2,fp
 1033ae0:	98806217 	ldw	r2,392(r19)
 1033ae4:	9dc00117 	ldw	r23,4(r19)
 1033ae8:	2084703a 	and	r2,r4,r2
 1033aec:	1000061e 	bne	r2,zero,1033b08 <__call_exitprocs+0x148>
 1033af0:	183ee83a 	callr	r3
 1033af4:	98800117 	ldw	r2,4(r19)
 1033af8:	15ffc51e 	bne	r2,r23,1033a10 <_gp+0xffff5d8c>
 1033afc:	a8800017 	ldw	r2,0(r21)
 1033b00:	14ffd326 	beq	r2,r19,1033a50 <_gp+0xffff5dcc>
 1033b04:	003fc206 	br	1033a10 <_gp+0xffff5d8c>
 1033b08:	98806317 	ldw	r2,396(r19)
 1033b0c:	2084703a 	and	r2,r4,r2
 1033b10:	1000061e 	bne	r2,zero,1033b2c <__call_exitprocs+0x16c>
 1033b14:	89400017 	ldw	r5,0(r17)
 1033b18:	9009883a 	mov	r4,r18
 1033b1c:	183ee83a 	callr	r3
 1033b20:	003ff406 	br	1033af4 <_gp+0xffff5e70>
 1033b24:	9f000115 	stw	fp,4(r19)
 1033b28:	003fea06 	br	1033ad4 <_gp+0xffff5e50>
 1033b2c:	89000017 	ldw	r4,0(r17)
 1033b30:	183ee83a 	callr	r3
 1033b34:	003fef06 	br	1033af4 <_gp+0xffff5e70>
 1033b38:	98800017 	ldw	r2,0(r19)
 1033b3c:	982b883a 	mov	r21,r19
 1033b40:	1027883a 	mov	r19,r2
 1033b44:	983fb61e 	bne	r19,zero,1033a20 <_gp+0xffff5d9c>
 1033b48:	003fd106 	br	1033a90 <_gp+0xffff5e0c>
 1033b4c:	0005883a 	mov	r2,zero
 1033b50:	003ffa06 	br	1033b3c <_gp+0xffff5eb8>

01033b54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1033b54:	defffd04 	addi	sp,sp,-12
 1033b58:	df000215 	stw	fp,8(sp)
 1033b5c:	df000204 	addi	fp,sp,8
 1033b60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1033b64:	0001883a 	nop
 1033b68:	e0bfff17 	ldw	r2,-4(fp)
 1033b6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1033b70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1033b74:	10000226 	beq	r2,zero,1033b80 <_exit+0x2c>
    ALT_SIM_FAIL();
 1033b78:	002af070 	cmpltui	zero,zero,43969
 1033b7c:	00000106 	br	1033b84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1033b80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1033b84:	003fff06 	br	1033b84 <_gp+0xffff5f00>
