
DECA_Power_Monitor_Nios.elf:     file format elf32-littlenios2
DECA_Power_Monitor_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01020240

Program Header:
    LOAD off    0x00001000 vaddr 0x01020000 paddr 0x01020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01020020 paddr 0x01020020 align 2**12
         filesz 0x00010c04 memsz 0x00010c04 flags r-x
    LOAD off    0x00011c24 vaddr 0x01030c24 paddr 0x01032710 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000141fc vaddr 0x010341fc paddr 0x010341fc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01020000  01020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  01020020  01020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000105b0  01020240  01020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000434  010307f0  010307f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  01030c24  01032710  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  010341fc  010341fc  000141fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0103435c  0103435c  00013710  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013710  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000db0  00000000  00000000  00013738  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000246d8  00000000  00000000  000144e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000094ac  00000000  00000000  00038bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b542  00000000  00000000  0004206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002398  00000000  00000000  0004d5b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003818  00000000  00000000  0004f948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000174cd  00000000  00000000  00053160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006a630  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001430  00000000  00000000  0006a690  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ef0e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006ef11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ef1b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ef1c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006ef1d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006ef21  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006ef25  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006ef29  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006ef32  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006ef3b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0006ef44  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000028  00000000  00000000  0006ef4d  2**0
                  CONTENTS, READONLY
 29 .jdi          00003ef4  00000000  00000000  0006ef75  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00075202  00000000  00000000  00072e69  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01020000 l    d  .entry	00000000 .entry
01020020 l    d  .exceptions	00000000 .exceptions
01020240 l    d  .text	00000000 .text
010307f0 l    d  .rodata	00000000 .rodata
01030c24 l    d  .rwdata	00000000 .rwdata
010341fc l    d  .bss	00000000 .bss
0103435c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DECA_Power_Monitor_Nios_bsp//obj/HAL/src/crt0.o
01020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01022aec l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01030a72 l     O .rodata	00000010 zeroes.4181
01030a82 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01024f34 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01026ab4 l     F .text	00000008 __fp_lock
01026abc l     F .text	00000008 __fp_unlock
01026ad0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01030c24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
01031068 l     O .rwdata	00000020 lc_ctype_charset
01031048 l     O .rwdata	00000020 lc_message_charset
01031088 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01030ab4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01029f30 l     F .text	000000fc __sprint_r.part.0
01030be8 l     O .rodata	00000010 blanks.4125
01030bd8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0102ddf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0102df18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0102df44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0102e044 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0102e138 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0102e21c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0102e3f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01032700 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0102e684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0102e7cc l     F .text	00000038 alt_dev_reg
01031670 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0102eabc l     F .text	00000204 altera_avalon_jtag_uart_irq
0102ecc0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0102f2e0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0102f6b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0102fb64 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0102fc9c l     F .text	00000050 alt_get_errno
0102fcec l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01034230 g     O .bss	00000004 alt_instruction_exception_handler
01029570 g     F .text	00000074 _mprec_log10
01020528 g     F .text	00000100 I2C_Read
0102965c g     F .text	0000008c __any_on
0102b880 g     F .text	00000054 _isatty_r
01030ac0 g     O .rodata	00000028 __mprec_tinytens
0102e340 g     F .text	00000078 alt_main
01022c80 g     F .text	000000b8 _puts_r
0103425c g     O .bss	00000100 alt_irq
0102b8d4 g     F .text	0000005c _lseek_r
01021178 g     F .text	0000009c I2CL_Read16
01032710 g       *ABS*	00000000 __flash_rwdata_start
0102d0e8 g     F .text	00000084 .hidden __eqdf2
0103435c g       *ABS*	00000000 __alt_heap_start
01022c44 g     F .text	0000003c printf
0102bafc g     F .text	0000009c _wcrtomb_r
01029e28 g     F .text	0000005c __sseek
01026e04 g     F .text	00000010 __sinit
0102b98c g     F .text	00000154 __swbuf_r
0102787c g     F .text	0000007c _setlocale_r
01026c70 g     F .text	00000064 __sfmoreglue
0102e3d8 g     F .text	00000020 __malloc_unlock
010284dc g     F .text	0000015c memmove
01026dec g     F .text	00000018 _cleanup
0102875c g     F .text	000000a8 _Balloc
0102d16c g     F .text	000000e0 .hidden __gtdf2
010300ac g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01021034 g     F .text	00000144 I2CL_MultipleWrite
010209dc g     F .text	00000130 i2c_write
01020000 g     F .entry	0000001c __reset
0102028c g     F .text	000000b4 I2C_setchannel
01020020 g       *ABS*	00000000 __flash_exceptions_start
0102b828 g     F .text	00000058 _fstat_r
01034214 g     O .bss	00000004 errno
01020628 g     F .text	0000015c I2C_Read16
01029da4 g     F .text	00000008 __seofread
0103421c g     O .bss	00000004 alt_argv
0103a6d0 g       *ABS*	00000000 _gp
0102e654 g     F .text	00000030 usleep
010314f0 g     O .rwdata	00000180 alt_fd_list
010300cc g     F .text	00000090 alt_find_dev
010283a4 g     F .text	00000138 memcpy
01026ac4 g     F .text	0000000c _cleanup_r
0102dc84 g     F .text	000000d0 .hidden __floatsidf
0102fc24 g     F .text	00000078 alt_io_redirect
0102d24c g     F .text	000000e0 .hidden __ltdf2
010307f0 g       *ABS*	00000000 __DTOR_END__
01022d38 g     F .text	00000014 puts
010303b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01029c88 g     F .text	00000074 __fpclassifyd
010294cc g     F .text	000000a4 __ratio
0102b3a0 g     F .text	00000024 __vfiprintf_internal
0102eebc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01022c18 g     F .text	0000002c _printf_r
01022c08 g     F .text	00000008 .hidden __udivsi3
0102e094 g     F .text	000000a4 isatty
01030b10 g     O .rodata	000000c8 __mprec_tens
010278f8 g     F .text	0000000c __locale_charset
01030324 g     F .text	0000008c alt_icache_flush
01020784 g     F .text	0000015c I2C_MultipleRead
01034210 g     O .bss	00000004 __malloc_top_pad
010326d8 g     O .rwdata	00000004 __mb_cur_max
01027928 g     F .text	0000000c _localeconv_r
01028b5c g     F .text	0000003c __i2b
01027268 g     F .text	000004a4 __sfvwrite_r
01029cfc g     F .text	00000054 _sbrk_r
0102b930 g     F .text	0000005c _read_r
010326f8 g     O .rwdata	00000004 alt_max_fd
0102b538 g     F .text	00000100 _fclose_r
01026a84 g     F .text	00000030 fflush
0103420c g     O .bss	00000004 __malloc_max_sbrked_mem
01020d70 g     F .text	00000138 I2CL_Read
010227e0 g     F .text	00000110 .hidden __extendsfdf2
0102c84c g     F .text	0000089c .hidden __adddf3
01029274 g     F .text	0000011c __b2d
0102c2bc g     F .text	00000590 .hidden __umoddi3
0102e26c g     F .text	000000d4 lseek
010326d0 g     O .rwdata	00000004 _global_impure_ptr
010296e8 g     F .text	000005a0 _realloc_r
0103435c g       *ABS*	00000000 __bss_end
0102fa74 g     F .text	000000f0 alt_iic_isr_register
0102ffa8 g     F .text	00000104 alt_tick
01020418 g     F .text	00000110 I2C_Write16
0102bcfc g     F .text	000005c0 .hidden __udivdi3
0102b64c g     F .text	00000184 _fputwc_r
01030ae8 g     O .rodata	00000028 __mprec_bigtens
01028940 g     F .text	00000104 __s2b
0102dd54 g     F .text	000000a4 .hidden __floatunsidf
0102901c g     F .text	00000060 __mcmp
01026e24 g     F .text	00000018 __fp_lock_all
0102fa28 g     F .text	0000004c alt_ic_irq_enabled
01020340 g     F .text	000000d8 I2C_Write
0102ff10 g     F .text	00000098 alt_alarm_stop
01034224 g     O .bss	00000004 alt_irq_active
010200fc g     F .exceptions	000000d0 alt_irq_handler
010314c8 g     O .rwdata	00000028 alt_dev_null
01021214 g     F .text	00000088 I2CL_Write16
010208e0 g     F .text	00000088 i2c_start
0102f674 g     F .text	00000044 alt_dcache_flush_all
01028a44 g     F .text	00000068 __hi0bits
0102dbfc g     F .text	00000088 .hidden __fixdfsi
01032710 g       *ABS*	00000000 __ram_rwdata_end
010326f0 g     O .rwdata	00000008 alt_dev_list
0102e6d4 g     F .text	000000f8 write
01030c24 g       *ABS*	00000000 __ram_rodata_end
0102df94 g     F .text	000000b0 fstat
0102d24c g     F .text	000000e0 .hidden __ledf2
01028d94 g     F .text	00000140 __pow5mult
0102a044 g     F .text	0000135c ___vfiprintf_internal_r
01034204 g     O .bss	00000004 __nlocale_changed
01022c10 g     F .text	00000008 .hidden __umodsi3
0103435c g       *ABS*	00000000 end
0102e9f8 g     F .text	000000c4 altera_avalon_jtag_uart_init
010201cc g     F .exceptions	00000074 alt_instruction_exception_entry
010307f0 g       *ABS*	00000000 __CTOR_LIST__
0103d4c0 g       *ABS*	00000000 __alt_stack_pointer
0102f354 g     F .text	00000088 alt_avalon_timer_sc_init
01022a88 g     F .text	00000064 .hidden __clzsi2
0102f0c8 g     F .text	00000218 altera_avalon_jtag_uart_write
01026e14 g     F .text	00000004 __sfp_lock_acquire
010282bc g     F .text	000000e8 memchr
01022de4 g     F .text	00001ffc ___vfprintf_internal_r
01026f78 g     F .text	000002f0 _free_r
01027904 g     F .text	00000010 __locale_mb_cur_max
01030628 g     F .text	00000194 __call_exitprocs
01034200 g     O .bss	00000004 __mlocale_changed
010326dc g     O .rwdata	00000004 __malloc_sbrk_base
01020240 g     F .text	0000004c _start
01034228 g     O .bss	00000004 _alt_tick_rate
01028ed4 g     F .text	00000148 __lshift
0103422c g     O .bss	00000004 _alt_nticks
0102e448 g     F .text	000000fc read
0102e838 g     F .text	0000005c alt_sys_init
01030514 g     F .text	00000114 __register_exitproc
01028b98 g     F .text	000001fc __multiply
0102ed68 g     F .text	00000068 altera_avalon_jtag_uart_close
01030c24 g       *ABS*	00000000 __ram_rwdata_start
010307f0 g       *ABS*	00000000 __ram_rodata_start
01034234 g     O .bss	00000028 __malloc_current_mallinfo
01029390 g     F .text	0000013c __d2b
0102e894 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01030270 g     F .text	000000b4 alt_get_fd
0102f51c g     F .text	00000158 alt_busy_sleep
0102b420 g     F .text	00000054 _close_r
01030498 g     F .text	0000007c memcmp
0102e954 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0103435c g       *ABS*	00000000 __alt_stack_base
0102e9a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01024e04 g     F .text	00000130 __swsetup_r
010217f0 g     F .text	000008cc .hidden __divdf3
01026cd4 g     F .text	00000118 __sfp
010295e4 g     F .text	00000078 __copybits
010310c0 g     O .rwdata	00000408 __malloc_av_
01026e20 g     F .text	00000004 __sinit_lock_release
01020968 g     F .text	00000074 i2c_stop
010220bc g     F .text	00000724 .hidden __muldf3
01029d50 g     F .text	00000054 __sread
0103015c g     F .text	00000114 alt_find_file
0102f708 g     F .text	000000a4 alt_dev_llist_insert
0102e3b8 g     F .text	00000020 __malloc_lock
0102e5a4 g     F .text	000000b0 sbrk
0102685c g     F .text	00000228 _fflush_r
0102b474 g     F .text	000000c4 _calloc_r
010341fc g       *ABS*	00000000 __bss_start
01028638 g     F .text	00000124 memset
0102129c g     F .text	00000444 main
01034220 g     O .bss	00000004 alt_envp
01034208 g     O .bss	00000004 __malloc_max_total_mem
0102e8f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01020b0c g     F .text	00000154 i2c_read
0102bae0 g     F .text	0000001c __swbuf
01029e84 g     F .text	00000008 __sclose
0103d4c0 g       *ABS*	00000000 __alt_heap_limit
0102b638 g     F .text	00000014 fclose
010228f0 g     F .text	00000198 .hidden __truncdfsf2
01025134 g     F .text	00001728 _dtoa_r
01027b14 g     F .text	000007a8 _malloc_r
0102bc70 g     F .text	00000030 __ascii_wctomb
010326fc g     O .rwdata	00000004 alt_errno
0102770c g     F .text	000000b8 _fwalk
01022b58 g     F .text	00000054 .hidden __divsi3
01026e54 g     F .text	00000124 _malloc_trim_r
010307f0 g       *ABS*	00000000 __CTOR_END__
01029e8c g     F .text	000000a4 strcmp
010307f0 g       *ABS*	00000000 __flash_rodata_start
010307f0 g       *ABS*	00000000 __DTOR_LIST__
0102d0e8 g     F .text	00000084 .hidden __nedf2
0102e804 g     F .text	00000034 alt_irq_init
0102e544 g     F .text	00000060 alt_release_fd
0103092c g     O .rodata	00000100 .hidden __clz_tab
010341fc g     O .bss	00000004 _PathLocale
0103044c g     F .text	00000014 atexit
0102b3c4 g     F .text	0000005c _write_r
01027934 g     F .text	0000001c setlocale
010326d4 g     O .rwdata	00000004 _impure_ptr
01034218 g     O .bss	00000004 alt_argc
0102f808 g     F .text	0000005c _do_dtors
01027920 g     F .text	00000008 __locale_cjk_lang
01020ea8 g     F .text	0000018c I2CL_MultipleRead
01020020 g       .exceptions	00000000 alt_irq_entry
01029214 g     F .text	00000060 __ulp
01026e3c g     F .text	00000018 __fp_unlock_all
010326e8 g     O .rwdata	00000008 alt_fs_list
01020020 g       *ABS*	00000000 __ram_exceptions_start
01027950 g     F .text	0000000c localeconv
01020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0102f894 g     F .text	00000050 alt_ic_isr_register
01032710 g       *ABS*	00000000 _edata
0103435c g       *ABS*	00000000 _end
01020240 g       *ABS*	00000000 __ram_exceptions_end
0102edd0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0102f984 g     F .text	000000a4 alt_ic_irq_disable
01029dac g     F .text	0000007c __swrite
010326e0 g     O .rwdata	00000004 __malloc_trim_threshold
01027914 g     F .text	0000000c __locale_msgcharset
01030460 g     F .text	00000038 exit
010277c4 g     F .text	000000b8 _fwalk_reent
010216e0 g     F .text	00000110 .hidden __floatunsisf
0102907c g     F .text	00000198 __mdiff
01022bac g     F .text	0000005c .hidden __modsi3
0103d4c0 g       *ABS*	00000000 __alt_data_end
01020020 g     F .exceptions	00000000 alt_exception
01026e18 g     F .text	00000004 __sfp_lock_release
010307bc g     F .text	00000034 _exit
0102f3dc g     F .text	00000140 alt_alarm_start
0102795c g     F .text	000001b8 __smakebuf_r
01022d4c g     F .text	00000098 strlen
0102fdb8 g     F .text	00000158 open
0102d16c g     F .text	000000e0 .hidden __gedf2
010326e4 g     O .rwdata	00000004 __wctomb
0102a02c g     F .text	00000018 __sprint_r
0102f864 g     F .text	00000030 alt_icache_flush_all
01032704 g     O .rwdata	00000004 alt_priority_mask
0102f8e4 g     F .text	000000a0 alt_ic_irq_enable
01024de0 g     F .text	00000024 __vfprintf_internal
0102bca0 g     F .text	0000005c _wctomb_r
0102d32c g     F .text	000008d0 .hidden __subdf3
01028aac g     F .text	000000b0 __lo0bits
01032708 g     O .rwdata	00000008 alt_alarm_list
0102f7ac g     F .text	0000005c _do_ctors
01020c60 g     F .text	00000110 I2CL_Write
0102bb98 g     F .text	000000d8 wcrtomb
0102de48 g     F .text	000000d0 close
0102e19c g     F .text	00000080 alt_load
0102b7d0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
01026e1c g     F .text	00000004 __sinit_lock_acquire
0102882c g     F .text	00000114 __multadd
01028804 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 102000c:	00bffd16 	blt	zero,r2,1020004 <__alt_data_end+0xfffe2b44>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1020010:	004040b4 	movhi	at,258
    ori r1, r1, %lo(_start)
 1020014:	08409014 	ori	at,at,576
    jmp r1
 1020018:	0800683a 	jmp	at
 102001c:	00000000 	call	0 <__reset-0x1020000>

Disassembly of section .exceptions:

01020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 102007c:	10000326 	beq	r2,zero,102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1020080:	20000226 	beq	r4,zero,102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1020084:	10200fc0 	call	10200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1020088:	00000706 	br	10200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 102008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1020098:	10201cc0 	call	10201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 102009c:	1000021e 	bne	r2,zero,10200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10200f8:	ef80083a 	eret

010200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10200fc:	defff904 	addi	sp,sp,-28
 1020100:	dfc00615 	stw	ra,24(sp)
 1020104:	df000515 	stw	fp,20(sp)
 1020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 102010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1020110:	0005313a 	rdctl	r2,ipending
 1020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 102011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1020124:	00800044 	movi	r2,1
 1020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 102012c:	e0fffb17 	ldw	r3,-20(fp)
 1020130:	e0bffc17 	ldw	r2,-16(fp)
 1020134:	1884703a 	and	r2,r3,r2
 1020138:	10001426 	beq	r2,zero,102018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 102013c:	008040f4 	movhi	r2,259
 1020140:	10909704 	addi	r2,r2,16988
 1020144:	e0fffd17 	ldw	r3,-12(fp)
 1020148:	180690fa 	slli	r3,r3,3
 102014c:	10c5883a 	add	r2,r2,r3
 1020150:	10c00017 	ldw	r3,0(r2)
 1020154:	008040f4 	movhi	r2,259
 1020158:	10909704 	addi	r2,r2,16988
 102015c:	e13ffd17 	ldw	r4,-12(fp)
 1020160:	200890fa 	slli	r4,r4,3
 1020164:	1105883a 	add	r2,r2,r4
 1020168:	10800104 	addi	r2,r2,4
 102016c:	10800017 	ldw	r2,0(r2)
 1020170:	1009883a 	mov	r4,r2
 1020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 102017c:	0005313a 	rdctl	r2,ipending
 1020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1020184:	e0bfff17 	ldw	r2,-4(fp)
 1020188:	00000706 	br	10201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 102018c:	e0bffc17 	ldw	r2,-16(fp)
 1020190:	1085883a 	add	r2,r2,r2
 1020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1020198:	e0bffd17 	ldw	r2,-12(fp)
 102019c:	10800044 	addi	r2,r2,1
 10201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10201a4:	003fe106 	br	102012c <__alt_data_end+0xfffe2c6c>

    active = alt_irq_pending ();
 10201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10201ac:	e0bffb17 	ldw	r2,-20(fp)
 10201b0:	103fdb1e 	bne	r2,zero,1020120 <__alt_data_end+0xfffe2c60>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10201b4:	0001883a 	nop
}
 10201b8:	e037883a 	mov	sp,fp
 10201bc:	dfc00117 	ldw	ra,4(sp)
 10201c0:	df000017 	ldw	fp,0(sp)
 10201c4:	dec00204 	addi	sp,sp,8
 10201c8:	f800283a 	ret

010201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10201cc:	defffb04 	addi	sp,sp,-20
 10201d0:	dfc00415 	stw	ra,16(sp)
 10201d4:	df000315 	stw	fp,12(sp)
 10201d8:	df000304 	addi	fp,sp,12
 10201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10201e0:	000531fa 	rdctl	r2,exception
 10201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10201e8:	e0bffd17 	ldw	r2,-12(fp)
 10201ec:	10801f0c 	andi	r2,r2,124
 10201f0:	1004d0ba 	srli	r2,r2,2
 10201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10201f8:	0005333a 	rdctl	r2,badaddr
 10201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1020200:	d0a6d817 	ldw	r2,-25760(gp)
 1020204:	10000726 	beq	r2,zero,1020224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1020208:	d0a6d817 	ldw	r2,-25760(gp)
 102020c:	e0fffd17 	ldw	r3,-12(fp)
 1020210:	1809883a 	mov	r4,r3
 1020214:	e17fff17 	ldw	r5,-4(fp)
 1020218:	e1bffe17 	ldw	r6,-8(fp)
 102021c:	103ee83a 	callr	r2
 1020220:	00000206 	br	102022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1020224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1020228:	0005883a 	mov	r2,zero
}
 102022c:	e037883a 	mov	sp,fp
 1020230:	dfc00117 	ldw	ra,4(sp)
 1020234:	df000017 	ldw	fp,0(sp)
 1020238:	dec00204 	addi	sp,sp,8
 102023c:	f800283a 	ret

Disassembly of section .text:

01020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1020240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1020244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1020248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 102024c:	00bffd16 	blt	zero,r2,1020244 <__alt_data_end+0xfffe2d84>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1020250:	06c040f4 	movhi	sp,259
    ori sp, sp, %lo(__alt_stack_pointer)
 1020254:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
 1020258:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 102025c:	d6a9b414 	ori	gp,gp,42704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1020260:	008040f4 	movhi	r2,259
    ori r2, r2, %lo(__bss_start)
 1020264:	10907f14 	ori	r2,r2,16892

    movhi r3, %hi(__bss_end)
 1020268:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 102026c:	18d0d714 	ori	r3,r3,17244

    beq r2, r3, 1f
 1020270:	10c00326 	beq	r2,r3,1020280 <_start+0x40>

0:
    stw zero, (r2)
 1020274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1020278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 102027c:	10fffd36 	bltu	r2,r3,1020274 <__alt_data_end+0xfffe2db4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1020280:	102e19c0 	call	102e19c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1020284:	102e3400 	call	102e340 <alt_main>

01020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1020288:	003fff06 	br	1020288 <__alt_data_end+0xfffe2dc8>

0102028c <I2C_setchannel>:
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);


bool I2C_setchannel(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 102028c:	defff804 	addi	sp,sp,-32
 1020290:	dfc00715 	stw	ra,28(sp)
 1020294:	df000615 	stw	fp,24(sp)
 1020298:	df000604 	addi	fp,sp,24
 102029c:	e13ffb15 	stw	r4,-20(fp)
 10202a0:	e17ffc15 	stw	r5,-16(fp)
 10202a4:	3009883a 	mov	r4,r6
 10202a8:	3807883a 	mov	r3,r7
 10202ac:	e0800217 	ldw	r2,8(fp)
 10202b0:	e13ffd05 	stb	r4,-12(fp)
 10202b4:	e0fffe05 	stb	r3,-8(fp)
 10202b8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 10202bc:	00800044 	movi	r2,1
 10202c0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // PCA9543APW set Channel

    i2c_start(clk_base, data_base);
 10202c4:	e13ffb17 	ldw	r4,-20(fp)
 10202c8:	e17ffc17 	ldw	r5,-16(fp)
 10202cc:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 10202d0:	e0bffd03 	ldbu	r2,-12(fp)
 10202d4:	10803fcc 	andi	r2,r2,255
 10202d8:	e13ffb17 	ldw	r4,-20(fp)
 10202dc:	e17ffc17 	ldw	r5,-16(fp)
 10202e0:	100d883a 	mov	r6,r2
 10202e4:	10209dc0 	call	10209dc <i2c_write>
 10202e8:	1000011e 	bne	r2,zero,10202f0 <I2C_setchannel+0x64>
        bSuccess = FALSE;
 10202ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 10202f0:	e0bffa17 	ldw	r2,-24(fp)
 10202f4:	10000726 	beq	r2,zero,1020314 <I2C_setchannel+0x88>
 10202f8:	e0bffe03 	ldbu	r2,-8(fp)
 10202fc:	e13ffb17 	ldw	r4,-20(fp)
 1020300:	e17ffc17 	ldw	r5,-16(fp)
 1020304:	100d883a 	mov	r6,r2
 1020308:	10209dc0 	call	10209dc <i2c_write>
 102030c:	1000011e 	bne	r2,zero,1020314 <I2C_setchannel+0x88>
        bSuccess = FALSE;
 1020310:	e03ffa15 	stw	zero,-24(fp)
    }            
//    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
//        bSuccess = FALSE;
//        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
//    }
    i2c_stop(clk_base, data_base);
 1020314:	e13ffb17 	ldw	r4,-20(fp)
 1020318:	e17ffc17 	ldw	r5,-16(fp)
 102031c:	10209680 	call	1020968 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 1020320:	0106d604 	movi	r4,7000
 1020324:	102e6540 	call	102e654 <usleep>
    
    return bSuccess;
 1020328:	e0bffa17 	ldw	r2,-24(fp)

    
}
 102032c:	e037883a 	mov	sp,fp
 1020330:	dfc00117 	ldw	ra,4(sp)
 1020334:	df000017 	ldw	fp,0(sp)
 1020338:	dec00204 	addi	sp,sp,8
 102033c:	f800283a 	ret

01020340 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 1020340:	defff804 	addi	sp,sp,-32
 1020344:	dfc00715 	stw	ra,28(sp)
 1020348:	df000615 	stw	fp,24(sp)
 102034c:	df000604 	addi	fp,sp,24
 1020350:	e13ffb15 	stw	r4,-20(fp)
 1020354:	e17ffc15 	stw	r5,-16(fp)
 1020358:	3009883a 	mov	r4,r6
 102035c:	3807883a 	mov	r3,r7
 1020360:	e0800217 	ldw	r2,8(fp)
 1020364:	e13ffd05 	stb	r4,-12(fp)
 1020368:	e0fffe05 	stb	r3,-8(fp)
 102036c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1020370:	00800044 	movi	r2,1
 1020374:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020378:	e13ffb17 	ldw	r4,-20(fp)
 102037c:	e17ffc17 	ldw	r5,-16(fp)
 1020380:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020384:	e0bffd03 	ldbu	r2,-12(fp)
 1020388:	10803fcc 	andi	r2,r2,255
 102038c:	e13ffb17 	ldw	r4,-20(fp)
 1020390:	e17ffc17 	ldw	r5,-16(fp)
 1020394:	100d883a 	mov	r6,r2
 1020398:	10209dc0 	call	10209dc <i2c_write>
 102039c:	1000011e 	bne	r2,zero,10203a4 <I2C_Write+0x64>
        bSuccess = FALSE;
 10203a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 10203a4:	e0bffa17 	ldw	r2,-24(fp)
 10203a8:	10000726 	beq	r2,zero,10203c8 <I2C_Write+0x88>
 10203ac:	e0bffe03 	ldbu	r2,-8(fp)
 10203b0:	e13ffb17 	ldw	r4,-20(fp)
 10203b4:	e17ffc17 	ldw	r5,-16(fp)
 10203b8:	100d883a 	mov	r6,r2
 10203bc:	10209dc0 	call	10209dc <i2c_write>
 10203c0:	1000011e 	bne	r2,zero,10203c8 <I2C_Write+0x88>
        bSuccess = FALSE;
 10203c4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 10203c8:	e0bffa17 	ldw	r2,-24(fp)
 10203cc:	10000726 	beq	r2,zero,10203ec <I2C_Write+0xac>
 10203d0:	e0bfff03 	ldbu	r2,-4(fp)
 10203d4:	e13ffb17 	ldw	r4,-20(fp)
 10203d8:	e17ffc17 	ldw	r5,-16(fp)
 10203dc:	100d883a 	mov	r6,r2
 10203e0:	10209dc0 	call	10209dc <i2c_write>
 10203e4:	1000011e 	bne	r2,zero,10203ec <I2C_Write+0xac>
        bSuccess = FALSE;
 10203e8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 10203ec:	e13ffb17 	ldw	r4,-20(fp)
 10203f0:	e17ffc17 	ldw	r5,-16(fp)
 10203f4:	10209680 	call	1020968 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 10203f8:	0106d604 	movi	r4,7000
 10203fc:	102e6540 	call	102e654 <usleep>
    
    return bSuccess;
 1020400:	e0bffa17 	ldw	r2,-24(fp)

    
}
 1020404:	e037883a 	mov	sp,fp
 1020408:	dfc00117 	ldw	ra,4(sp)
 102040c:	df000017 	ldw	fp,0(sp)
 1020410:	dec00204 	addi	sp,sp,8
 1020414:	f800283a 	ret

01020418 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 1020418:	defff704 	addi	sp,sp,-36
 102041c:	dfc00815 	stw	ra,32(sp)
 1020420:	df000715 	stw	fp,28(sp)
 1020424:	df000704 	addi	fp,sp,28
 1020428:	e13ffb15 	stw	r4,-20(fp)
 102042c:	e17ffc15 	stw	r5,-16(fp)
 1020430:	3009883a 	mov	r4,r6
 1020434:	3807883a 	mov	r3,r7
 1020438:	e0800217 	ldw	r2,8(fp)
 102043c:	e13ffd05 	stb	r4,-12(fp)
 1020440:	e0fffe05 	stb	r3,-8(fp)
 1020444:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 1020448:	00800044 	movi	r2,1
 102044c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 1020450:	e0bfff0b 	ldhu	r2,-4(fp)
 1020454:	1004d23a 	srli	r2,r2,8
 1020458:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 102045c:	e0bfff0b 	ldhu	r2,-4(fp)
 1020460:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020464:	e13ffb17 	ldw	r4,-20(fp)
 1020468:	e17ffc17 	ldw	r5,-16(fp)
 102046c:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020470:	e0bffd03 	ldbu	r2,-12(fp)
 1020474:	10803fcc 	andi	r2,r2,255
 1020478:	e13ffb17 	ldw	r4,-20(fp)
 102047c:	e17ffc17 	ldw	r5,-16(fp)
 1020480:	100d883a 	mov	r6,r2
 1020484:	10209dc0 	call	10209dc <i2c_write>
 1020488:	1000011e 	bne	r2,zero,1020490 <I2C_Write16+0x78>
        bSuccess = FALSE;
 102048c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 1020490:	e0bff917 	ldw	r2,-28(fp)
 1020494:	10000726 	beq	r2,zero,10204b4 <I2C_Write16+0x9c>
 1020498:	e0bffe03 	ldbu	r2,-8(fp)
 102049c:	e13ffb17 	ldw	r4,-20(fp)
 10204a0:	e17ffc17 	ldw	r5,-16(fp)
 10204a4:	100d883a 	mov	r6,r2
 10204a8:	10209dc0 	call	10209dc <i2c_write>
 10204ac:	1000011e 	bne	r2,zero,10204b4 <I2C_Write16+0x9c>
        bSuccess = FALSE;
 10204b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 10204b4:	e0bff917 	ldw	r2,-28(fp)
 10204b8:	10000726 	beq	r2,zero,10204d8 <I2C_Write16+0xc0>
 10204bc:	e0bffa03 	ldbu	r2,-24(fp)
 10204c0:	e13ffb17 	ldw	r4,-20(fp)
 10204c4:	e17ffc17 	ldw	r5,-16(fp)
 10204c8:	100d883a 	mov	r6,r2
 10204cc:	10209dc0 	call	10209dc <i2c_write>
 10204d0:	1000011e 	bne	r2,zero,10204d8 <I2C_Write16+0xc0>
        bSuccess = FALSE;
 10204d4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 10204d8:	e0bff917 	ldw	r2,-28(fp)
 10204dc:	10000726 	beq	r2,zero,10204fc <I2C_Write16+0xe4>
 10204e0:	e0bffa43 	ldbu	r2,-23(fp)
 10204e4:	e13ffb17 	ldw	r4,-20(fp)
 10204e8:	e17ffc17 	ldw	r5,-16(fp)
 10204ec:	100d883a 	mov	r6,r2
 10204f0:	10209dc0 	call	10209dc <i2c_write>
 10204f4:	1000011e 	bne	r2,zero,10204fc <I2C_Write16+0xe4>
        bSuccess = FALSE;
 10204f8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }    
    i2c_stop(clk_base, data_base);
 10204fc:	e13ffb17 	ldw	r4,-20(fp)
 1020500:	e17ffc17 	ldw	r5,-16(fp)
 1020504:	10209680 	call	1020968 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 1020508:	0106d604 	movi	r4,7000
 102050c:	102e6540 	call	102e654 <usleep>
    
    return bSuccess;
 1020510:	e0bff917 	ldw	r2,-28(fp)

    
}
 1020514:	e037883a 	mov	sp,fp
 1020518:	dfc00117 	ldw	ra,4(sp)
 102051c:	df000017 	ldw	fp,0(sp)
 1020520:	dec00204 	addi	sp,sp,8
 1020524:	f800283a 	ret

01020528 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 1020528:	defff904 	addi	sp,sp,-28
 102052c:	dfc00615 	stw	ra,24(sp)
 1020530:	df000515 	stw	fp,20(sp)
 1020534:	df000504 	addi	fp,sp,20
 1020538:	e13ffc15 	stw	r4,-16(fp)
 102053c:	e17ffd15 	stw	r5,-12(fp)
 1020540:	3007883a 	mov	r3,r6
 1020544:	3805883a 	mov	r2,r7
 1020548:	e0fffe05 	stb	r3,-8(fp)
 102054c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1020550:	00800044 	movi	r2,1
 1020554:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020558:	e13ffc17 	ldw	r4,-16(fp)
 102055c:	e17ffd17 	ldw	r5,-12(fp)
 1020560:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020564:	e0bffe03 	ldbu	r2,-8(fp)
 1020568:	10803fcc 	andi	r2,r2,255
 102056c:	e13ffc17 	ldw	r4,-16(fp)
 1020570:	e17ffd17 	ldw	r5,-12(fp)
 1020574:	100d883a 	mov	r6,r2
 1020578:	10209dc0 	call	10209dc <i2c_write>
 102057c:	1000011e 	bne	r2,zero,1020584 <I2C_Read+0x5c>
        bSuccess = FALSE;
 1020580:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 1020584:	e0bffb17 	ldw	r2,-20(fp)
 1020588:	10000726 	beq	r2,zero,10205a8 <I2C_Read+0x80>
 102058c:	e0bfff03 	ldbu	r2,-4(fp)
 1020590:	e13ffc17 	ldw	r4,-16(fp)
 1020594:	e17ffd17 	ldw	r5,-12(fp)
 1020598:	100d883a 	mov	r6,r2
 102059c:	10209dc0 	call	10209dc <i2c_write>
 10205a0:	1000011e 	bne	r2,zero,10205a8 <I2C_Read+0x80>
        bSuccess = FALSE;
 10205a4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 10205a8:	e13ffc17 	ldw	r4,-16(fp)
 10205ac:	e17ffd17 	ldw	r5,-12(fp)
 10205b0:	10208e00 	call	10208e0 <i2c_start>
    DeviceAddr |= 1; // Read
 10205b4:	e0bffe03 	ldbu	r2,-8(fp)
 10205b8:	10800054 	ori	r2,r2,1
 10205bc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 10205c0:	e0bffb17 	ldw	r2,-20(fp)
 10205c4:	10000826 	beq	r2,zero,10205e8 <I2C_Read+0xc0>
 10205c8:	e0bffe03 	ldbu	r2,-8(fp)
 10205cc:	10803fcc 	andi	r2,r2,255
 10205d0:	e13ffc17 	ldw	r4,-16(fp)
 10205d4:	e17ffd17 	ldw	r5,-12(fp)
 10205d8:	100d883a 	mov	r6,r2
 10205dc:	10209dc0 	call	10209dc <i2c_write>
 10205e0:	1000011e 	bne	r2,zero,10205e8 <I2C_Read+0xc0>
        bSuccess = FALSE;
 10205e4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 10205e8:	e0bffb17 	ldw	r2,-20(fp)
 10205ec:	10000526 	beq	r2,zero,1020604 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 10205f0:	e13ffc17 	ldw	r4,-16(fp)
 10205f4:	e17ffd17 	ldw	r5,-12(fp)
 10205f8:	e1800217 	ldw	r6,8(fp)
 10205fc:	000f883a 	mov	r7,zero
 1020600:	1020b0c0 	call	1020b0c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 1020604:	e13ffc17 	ldw	r4,-16(fp)
 1020608:	e17ffd17 	ldw	r5,-12(fp)
 102060c:	10209680 	call	1020968 <i2c_stop>
    
    return bSuccess;
 1020610:	e0bffb17 	ldw	r2,-20(fp)
}
 1020614:	e037883a 	mov	sp,fp
 1020618:	dfc00117 	ldw	ra,4(sp)
 102061c:	df000017 	ldw	fp,0(sp)
 1020620:	dec00204 	addi	sp,sp,8
 1020624:	f800283a 	ret

01020628 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 1020628:	defff804 	addi	sp,sp,-32
 102062c:	dfc00715 	stw	ra,28(sp)
 1020630:	df000615 	stw	fp,24(sp)
 1020634:	df000604 	addi	fp,sp,24
 1020638:	e13ffc15 	stw	r4,-16(fp)
 102063c:	e17ffd15 	stw	r5,-12(fp)
 1020640:	3007883a 	mov	r3,r6
 1020644:	3805883a 	mov	r2,r7
 1020648:	e0fffe05 	stb	r3,-8(fp)
 102064c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1020650:	00800044 	movi	r2,1
 1020654:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020658:	e13ffc17 	ldw	r4,-16(fp)
 102065c:	e17ffd17 	ldw	r5,-12(fp)
 1020660:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020664:	e0bffe03 	ldbu	r2,-8(fp)
 1020668:	10803fcc 	andi	r2,r2,255
 102066c:	e13ffc17 	ldw	r4,-16(fp)
 1020670:	e17ffd17 	ldw	r5,-12(fp)
 1020674:	100d883a 	mov	r6,r2
 1020678:	10209dc0 	call	10209dc <i2c_write>
 102067c:	1000011e 	bne	r2,zero,1020684 <I2C_Read16+0x5c>
        bSuccess = FALSE;
 1020680:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 1020684:	e0bffa17 	ldw	r2,-24(fp)
 1020688:	10000726 	beq	r2,zero,10206a8 <I2C_Read16+0x80>
 102068c:	e0bfff03 	ldbu	r2,-4(fp)
 1020690:	e13ffc17 	ldw	r4,-16(fp)
 1020694:	e17ffd17 	ldw	r5,-12(fp)
 1020698:	100d883a 	mov	r6,r2
 102069c:	10209dc0 	call	10209dc <i2c_write>
 10206a0:	1000011e 	bne	r2,zero,10206a8 <I2C_Read16+0x80>
        bSuccess = FALSE;
 10206a4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            

    usleep(15*1000); // Conversation time delay for Humidity/Temperature Sensor
 10206a8:	010ea604 	movi	r4,15000
 10206ac:	102e6540 	call	102e654 <usleep>

    i2c_start(clk_base, data_base);  // restart
 10206b0:	e13ffc17 	ldw	r4,-16(fp)
 10206b4:	e17ffd17 	ldw	r5,-12(fp)
 10206b8:	10208e00 	call	10208e0 <i2c_start>
    DeviceAddr |= 1; // Read
 10206bc:	e0bffe03 	ldbu	r2,-8(fp)
 10206c0:	10800054 	ori	r2,r2,1
 10206c4:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 10206c8:	e0bffa17 	ldw	r2,-24(fp)
 10206cc:	10000826 	beq	r2,zero,10206f0 <I2C_Read16+0xc8>
 10206d0:	e0bffe03 	ldbu	r2,-8(fp)
 10206d4:	10803fcc 	andi	r2,r2,255
 10206d8:	e13ffc17 	ldw	r4,-16(fp)
 10206dc:	e17ffd17 	ldw	r5,-12(fp)
 10206e0:	100d883a 	mov	r6,r2
 10206e4:	10209dc0 	call	10209dc <i2c_write>
 10206e8:	1000011e 	bne	r2,zero,10206f0 <I2C_Read16+0xc8>
        bSuccess = FALSE;
 10206ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 10206f0:	e0bffa17 	ldw	r2,-24(fp)
 10206f4:	10000626 	beq	r2,zero,1020710 <I2C_Read16+0xe8>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 10206f8:	e0bffb44 	addi	r2,fp,-19
 10206fc:	e13ffc17 	ldw	r4,-16(fp)
 1020700:	e17ffd17 	ldw	r5,-12(fp)
 1020704:	100d883a 	mov	r6,r2
 1020708:	01c00044 	movi	r7,1
 102070c:	1020b0c0 	call	1020b0c <i2c_read>
    }        
    if (bSuccess){
 1020710:	e0bffa17 	ldw	r2,-24(fp)
 1020714:	10000626 	beq	r2,zero,1020730 <I2C_Read16+0x108>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 1020718:	e0bffb04 	addi	r2,fp,-20
 102071c:	e13ffc17 	ldw	r4,-16(fp)
 1020720:	e17ffd17 	ldw	r5,-12(fp)
 1020724:	100d883a 	mov	r6,r2
 1020728:	000f883a 	mov	r7,zero
 102072c:	1020b0c0 	call	1020b0c <i2c_read>
    }        
    if (bSuccess)
 1020730:	e0bffa17 	ldw	r2,-24(fp)
 1020734:	10000a26 	beq	r2,zero,1020760 <I2C_Read16+0x138>
        *pControlData = (HighByte << 8) | LowByte;
 1020738:	e0bffb43 	ldbu	r2,-19(fp)
 102073c:	10803fcc 	andi	r2,r2,255
 1020740:	1004923a 	slli	r2,r2,8
 1020744:	1007883a 	mov	r3,r2
 1020748:	e0bffb03 	ldbu	r2,-20(fp)
 102074c:	10803fcc 	andi	r2,r2,255
 1020750:	1884b03a 	or	r2,r3,r2
 1020754:	1007883a 	mov	r3,r2
 1020758:	e0800217 	ldw	r2,8(fp)
 102075c:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 1020760:	e13ffc17 	ldw	r4,-16(fp)
 1020764:	e17ffd17 	ldw	r5,-12(fp)
 1020768:	10209680 	call	1020968 <i2c_stop>
    
    return bSuccess;
 102076c:	e0bffa17 	ldw	r2,-24(fp)
}
 1020770:	e037883a 	mov	sp,fp
 1020774:	dfc00117 	ldw	ra,4(sp)
 1020778:	df000017 	ldw	fp,0(sp)
 102077c:	dec00204 	addi	sp,sp,8
 1020780:	f800283a 	ret

01020784 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
 1020784:	defff704 	addi	sp,sp,-36
 1020788:	dfc00815 	stw	ra,32(sp)
 102078c:	df000715 	stw	fp,28(sp)
 1020790:	df000704 	addi	fp,sp,28
 1020794:	e13ffb15 	stw	r4,-20(fp)
 1020798:	e17ffc15 	stw	r5,-16(fp)
 102079c:	3009883a 	mov	r4,r6
 10207a0:	3807883a 	mov	r3,r7
 10207a4:	e0800317 	ldw	r2,12(fp)
 10207a8:	e13ffd05 	stb	r4,-12(fp)
 10207ac:	e0fffe05 	stb	r3,-8(fp)
 10207b0:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 10207b4:	00800044 	movi	r2,1
 10207b8:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 10207bc:	e13ffb17 	ldw	r4,-20(fp)
 10207c0:	e17ffc17 	ldw	r5,-16(fp)
 10207c4:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 10207c8:	e0bffd03 	ldbu	r2,-12(fp)
 10207cc:	10803fcc 	andi	r2,r2,255
 10207d0:	e13ffb17 	ldw	r4,-20(fp)
 10207d4:	e17ffc17 	ldw	r5,-16(fp)
 10207d8:	100d883a 	mov	r6,r2
 10207dc:	10209dc0 	call	10209dc <i2c_write>
 10207e0:	1000011e 	bne	r2,zero,10207e8 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
 10207e4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 10207e8:	e0bffa17 	ldw	r2,-24(fp)
 10207ec:	10000726 	beq	r2,zero,102080c <I2C_MultipleRead+0x88>
 10207f0:	e0bffe03 	ldbu	r2,-8(fp)
 10207f4:	e13ffb17 	ldw	r4,-20(fp)
 10207f8:	e17ffc17 	ldw	r5,-16(fp)
 10207fc:	100d883a 	mov	r6,r2
 1020800:	10209dc0 	call	10209dc <i2c_write>
 1020804:	1000011e 	bne	r2,zero,102080c <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
 1020808:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }

    usleep(15*1000); // Conversation time delay for Humidity/Temperature Sensor
 102080c:	010ea604 	movi	r4,15000
 1020810:	102e6540 	call	102e654 <usleep>

    if (bSuccess)        
 1020814:	e0bffa17 	ldw	r2,-24(fp)
 1020818:	10000326 	beq	r2,zero,1020828 <I2C_MultipleRead+0xa4>
    i2c_start(clk_base, data_base);  // restart
 102081c:	e13ffb17 	ldw	r4,-20(fp)
 1020820:	e17ffc17 	ldw	r5,-16(fp)
 1020824:	10208e00 	call	10208e0 <i2c_start>
    DeviceAddr |= 1; // Read
 1020828:	e0bffd03 	ldbu	r2,-12(fp)
 102082c:	10800054 	ori	r2,r2,1
 1020830:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 1020834:	e0bffa17 	ldw	r2,-24(fp)
 1020838:	10000826 	beq	r2,zero,102085c <I2C_MultipleRead+0xd8>
 102083c:	e0bffd03 	ldbu	r2,-12(fp)
 1020840:	10803fcc 	andi	r2,r2,255
 1020844:	e13ffb17 	ldw	r4,-20(fp)
 1020848:	e17ffc17 	ldw	r5,-16(fp)
 102084c:	100d883a 	mov	r6,r2
 1020850:	10209dc0 	call	10209dc <i2c_write>
 1020854:	1000011e 	bne	r2,zero,102085c <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
 1020858:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 102085c:	e0bffa17 	ldw	r2,-24(fp)
 1020860:	10001626 	beq	r2,zero,10208bc <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 1020864:	e03ff915 	stw	zero,-28(fp)
 1020868:	00000f06 	br	10208a8 <I2C_MultipleRead+0x124>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 102086c:	e0bff917 	ldw	r2,-28(fp)
 1020870:	e0c00217 	ldw	r3,8(fp)
 1020874:	188d883a 	add	r6,r3,r2
 1020878:	e0bfff0b 	ldhu	r2,-4(fp)
 102087c:	10ffffc4 	addi	r3,r2,-1
 1020880:	e0bff917 	ldw	r2,-28(fp)
 1020884:	1884c03a 	cmpne	r2,r3,r2
 1020888:	10803fcc 	andi	r2,r2,255
 102088c:	e13ffb17 	ldw	r4,-20(fp)
 1020890:	e17ffc17 	ldw	r5,-16(fp)
 1020894:	100f883a 	mov	r7,r2
 1020898:	1020b0c0 	call	1020b0c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 102089c:	e0bff917 	ldw	r2,-28(fp)
 10208a0:	10800044 	addi	r2,r2,1
 10208a4:	e0bff915 	stw	r2,-28(fp)
 10208a8:	e0bfff0b 	ldhu	r2,-4(fp)
 10208ac:	e0fff917 	ldw	r3,-28(fp)
 10208b0:	1880020e 	bge	r3,r2,10208bc <I2C_MultipleRead+0x138>
 10208b4:	e0bffa17 	ldw	r2,-24(fp)
 10208b8:	103fec1e 	bne	r2,zero,102086c <__alt_data_end+0xfffe33ac>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 10208bc:	e13ffb17 	ldw	r4,-20(fp)
 10208c0:	e17ffc17 	ldw	r5,-16(fp)
 10208c4:	10209680 	call	1020968 <i2c_stop>
    
    return bSuccess;    
 10208c8:	e0bffa17 	ldw	r2,-24(fp)
    
}
 10208cc:	e037883a 	mov	sp,fp
 10208d0:	dfc00117 	ldw	ra,4(sp)
 10208d4:	df000017 	ldw	fp,0(sp)
 10208d8:	dec00204 	addi	sp,sp,8
 10208dc:	f800283a 	ret

010208e0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 10208e0:	defffc04 	addi	sp,sp,-16
 10208e4:	dfc00315 	stw	ra,12(sp)
 10208e8:	df000215 	stw	fp,8(sp)
 10208ec:	df000204 	addi	fp,sp,8
 10208f0:	e13ffe15 	stw	r4,-8(fp)
 10208f4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 10208f8:	e0bfff17 	ldw	r2,-4(fp)
 10208fc:	10800104 	addi	r2,r2,4
 1020900:	1007883a 	mov	r3,r2
 1020904:	00800044 	movi	r2,1
 1020908:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 102090c:	e0bfff17 	ldw	r2,-4(fp)
 1020910:	00c00044 	movi	r3,1
 1020914:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 1020918:	e0bffe17 	ldw	r2,-8(fp)
 102091c:	00c00044 	movi	r3,1
 1020920:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 1020924:	01000084 	movi	r4,2
 1020928:	102e6540 	call	102e654 <usleep>
     
    SDA_LOW(data_base); // data low
 102092c:	e0bfff17 	ldw	r2,-4(fp)
 1020930:	0007883a 	mov	r3,zero
 1020934:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 1020938:	01000084 	movi	r4,2
 102093c:	102e6540 	call	102e654 <usleep>
    SCL_LOW(clk_base); // clock low
 1020940:	e0bffe17 	ldw	r2,-8(fp)
 1020944:	0007883a 	mov	r3,zero
 1020948:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 102094c:	01000084 	movi	r4,2
 1020950:	102e6540 	call	102e654 <usleep>
}
 1020954:	e037883a 	mov	sp,fp
 1020958:	dfc00117 	ldw	ra,4(sp)
 102095c:	df000017 	ldw	fp,0(sp)
 1020960:	dec00204 	addi	sp,sp,8
 1020964:	f800283a 	ret

01020968 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 1020968:	defffc04 	addi	sp,sp,-16
 102096c:	dfc00315 	stw	ra,12(sp)
 1020970:	df000215 	stw	fp,8(sp)
 1020974:	df000204 	addi	fp,sp,8
 1020978:	e13ffe15 	stw	r4,-8(fp)
 102097c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 1020980:	e0bfff17 	ldw	r2,-4(fp)
 1020984:	10800104 	addi	r2,r2,4
 1020988:	1007883a 	mov	r3,r2
 102098c:	00800044 	movi	r2,1
 1020990:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 1020994:	e0bfff17 	ldw	r2,-4(fp)
 1020998:	0007883a 	mov	r3,zero
 102099c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 10209a0:	e0bffe17 	ldw	r2,-8(fp)
 10209a4:	00c00044 	movi	r3,1
 10209a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 10209ac:	01000084 	movi	r4,2
 10209b0:	102e6540 	call	102e654 <usleep>
    SDA_HIGH(data_base); // data high
 10209b4:	e0bfff17 	ldw	r2,-4(fp)
 10209b8:	00c00044 	movi	r3,1
 10209bc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 10209c0:	01000084 	movi	r4,2
 10209c4:	102e6540 	call	102e654 <usleep>
    

    
}
 10209c8:	e037883a 	mov	sp,fp
 10209cc:	dfc00117 	ldw	ra,4(sp)
 10209d0:	df000017 	ldw	fp,0(sp)
 10209d4:	dec00204 	addi	sp,sp,8
 10209d8:	f800283a 	ret

010209dc <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 10209dc:	defff804 	addi	sp,sp,-32
 10209e0:	dfc00715 	stw	ra,28(sp)
 10209e4:	df000615 	stw	fp,24(sp)
 10209e8:	df000604 	addi	fp,sp,24
 10209ec:	e13ffd15 	stw	r4,-12(fp)
 10209f0:	e17ffe15 	stw	r5,-8(fp)
 10209f4:	3005883a 	mov	r2,r6
 10209f8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 10209fc:	00bfe004 	movi	r2,-128
 1020a00:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 1020a04:	e0bffe17 	ldw	r2,-8(fp)
 1020a08:	10800104 	addi	r2,r2,4
 1020a0c:	1007883a 	mov	r3,r2
 1020a10:	00800044 	movi	r2,1
 1020a14:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 1020a18:	e03ffb15 	stw	zero,-20(fp)
 1020a1c:	00001f06 	br	1020a9c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 1020a20:	e0bffd17 	ldw	r2,-12(fp)
 1020a24:	0007883a 	mov	r3,zero
 1020a28:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 1020a2c:	e0ffff03 	ldbu	r3,-4(fp)
 1020a30:	e0bffa03 	ldbu	r2,-24(fp)
 1020a34:	1884703a 	and	r2,r3,r2
 1020a38:	10803fcc 	andi	r2,r2,255
 1020a3c:	10000426 	beq	r2,zero,1020a50 <i2c_write+0x74>
            SDA_HIGH(data_base);
 1020a40:	e0bffe17 	ldw	r2,-8(fp)
 1020a44:	00c00044 	movi	r3,1
 1020a48:	10c00035 	stwio	r3,0(r2)
 1020a4c:	00000306 	br	1020a5c <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 1020a50:	e0bffe17 	ldw	r2,-8(fp)
 1020a54:	0007883a 	mov	r3,zero
 1020a58:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 1020a5c:	e0bffa03 	ldbu	r2,-24(fp)
 1020a60:	1004d07a 	srli	r2,r2,1
 1020a64:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 1020a68:	e0bffd17 	ldw	r2,-12(fp)
 1020a6c:	00c00044 	movi	r3,1
 1020a70:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 1020a74:	01000084 	movi	r4,2
 1020a78:	102e6540 	call	102e654 <usleep>
        SCL_LOW(clk_base);
 1020a7c:	e0bffd17 	ldw	r2,-12(fp)
 1020a80:	0007883a 	mov	r3,zero
 1020a84:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 1020a88:	01000084 	movi	r4,2
 1020a8c:	102e6540 	call	102e654 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 1020a90:	e0bffb17 	ldw	r2,-20(fp)
 1020a94:	10800044 	addi	r2,r2,1
 1020a98:	e0bffb15 	stw	r2,-20(fp)
 1020a9c:	e0bffb17 	ldw	r2,-20(fp)
 1020aa0:	10800210 	cmplti	r2,r2,8
 1020aa4:	103fde1e 	bne	r2,zero,1020a20 <__alt_data_end+0xfffe3560>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 1020aa8:	e0bffe17 	ldw	r2,-8(fp)
 1020aac:	10800104 	addi	r2,r2,4
 1020ab0:	0007883a 	mov	r3,zero
 1020ab4:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 1020ab8:	e0bffd17 	ldw	r2,-12(fp)
 1020abc:	00c00044 	movi	r3,1
 1020ac0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 1020ac4:	01000084 	movi	r4,2
 1020ac8:	102e6540 	call	102e654 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 1020acc:	e0bffe17 	ldw	r2,-8(fp)
 1020ad0:	10800037 	ldwio	r2,0(r2)
 1020ad4:	1005003a 	cmpeq	r2,r2,zero
 1020ad8:	10803fcc 	andi	r2,r2,255
 1020adc:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 1020ae0:	e0bffd17 	ldw	r2,-12(fp)
 1020ae4:	0007883a 	mov	r3,zero
 1020ae8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 1020aec:	01000084 	movi	r4,2
 1020af0:	102e6540 	call	102e654 <usleep>
    return bAck;
 1020af4:	e0bffc17 	ldw	r2,-16(fp)
}    
 1020af8:	e037883a 	mov	sp,fp
 1020afc:	dfc00117 	ldw	ra,4(sp)
 1020b00:	df000017 	ldw	fp,0(sp)
 1020b04:	dec00204 	addi	sp,sp,8
 1020b08:	f800283a 	ret

01020b0c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 1020b0c:	defff804 	addi	sp,sp,-32
 1020b10:	dfc00715 	stw	ra,28(sp)
 1020b14:	df000615 	stw	fp,24(sp)
 1020b18:	df000604 	addi	fp,sp,24
 1020b1c:	e13ffc15 	stw	r4,-16(fp)
 1020b20:	e17ffd15 	stw	r5,-12(fp)
 1020b24:	e1bffe15 	stw	r6,-8(fp)
 1020b28:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 1020b2c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 1020b30:	e0bffd17 	ldw	r2,-12(fp)
 1020b34:	10800104 	addi	r2,r2,4
 1020b38:	0007883a 	mov	r3,zero
 1020b3c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 1020b40:	e0bffc17 	ldw	r2,-16(fp)
 1020b44:	0007883a 	mov	r3,zero
 1020b48:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 1020b4c:	01000084 	movi	r4,2
 1020b50:	102e6540 	call	102e654 <usleep>

    for(i=0;i<8;i++){
 1020b54:	e03ffb15 	stw	zero,-20(fp)
 1020b58:	00001606 	br	1020bb4 <i2c_read+0xa8>
        Data <<= 1;
 1020b5c:	e0bffa03 	ldbu	r2,-24(fp)
 1020b60:	1085883a 	add	r2,r2,r2
 1020b64:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 1020b68:	e0bffc17 	ldw	r2,-16(fp)
 1020b6c:	00c00044 	movi	r3,1
 1020b70:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 1020b74:	01000084 	movi	r4,2
 1020b78:	102e6540 	call	102e654 <usleep>
        if (SDA_READ(data_base))  // read data   
 1020b7c:	e0bffd17 	ldw	r2,-12(fp)
 1020b80:	10800037 	ldwio	r2,0(r2)
 1020b84:	10000326 	beq	r2,zero,1020b94 <i2c_read+0x88>
            Data |= 0x01;
 1020b88:	e0bffa03 	ldbu	r2,-24(fp)
 1020b8c:	10800054 	ori	r2,r2,1
 1020b90:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 1020b94:	e0bffc17 	ldw	r2,-16(fp)
 1020b98:	0007883a 	mov	r3,zero
 1020b9c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 1020ba0:	01000084 	movi	r4,2
 1020ba4:	102e6540 	call	102e654 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 1020ba8:	e0bffb17 	ldw	r2,-20(fp)
 1020bac:	10800044 	addi	r2,r2,1
 1020bb0:	e0bffb15 	stw	r2,-20(fp)
 1020bb4:	e0bffb17 	ldw	r2,-20(fp)
 1020bb8:	10800210 	cmplti	r2,r2,8
 1020bbc:	103fe71e 	bne	r2,zero,1020b5c <__alt_data_end+0xfffe369c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 1020bc0:	e0bffc17 	ldw	r2,-16(fp)
 1020bc4:	0007883a 	mov	r3,zero
 1020bc8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 1020bcc:	e0bffd17 	ldw	r2,-12(fp)
 1020bd0:	10800104 	addi	r2,r2,4
 1020bd4:	1007883a 	mov	r3,r2
 1020bd8:	00800044 	movi	r2,1
 1020bdc:	18800035 	stwio	r2,0(r3)
    if (bAck)
 1020be0:	e0bfff17 	ldw	r2,-4(fp)
 1020be4:	10000426 	beq	r2,zero,1020bf8 <i2c_read+0xec>
        SDA_LOW(data_base);
 1020be8:	e0bffd17 	ldw	r2,-12(fp)
 1020bec:	0007883a 	mov	r3,zero
 1020bf0:	10c00035 	stwio	r3,0(r2)
 1020bf4:	00000306 	br	1020c04 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 1020bf8:	e0bffd17 	ldw	r2,-12(fp)
 1020bfc:	00c00044 	movi	r3,1
 1020c00:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 1020c04:	e0bffc17 	ldw	r2,-16(fp)
 1020c08:	00c00044 	movi	r3,1
 1020c0c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 1020c10:	01000084 	movi	r4,2
 1020c14:	102e6540 	call	102e654 <usleep>
    SCL_LOW(clk_base); // clock low
 1020c18:	e0bffc17 	ldw	r2,-16(fp)
 1020c1c:	0007883a 	mov	r3,zero
 1020c20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 1020c24:	01000084 	movi	r4,2
 1020c28:	102e6540 	call	102e654 <usleep>
    SDA_LOW(data_base);  // data low
 1020c2c:	e0bffd17 	ldw	r2,-12(fp)
 1020c30:	0007883a 	mov	r3,zero
 1020c34:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 1020c38:	01000084 	movi	r4,2
 1020c3c:	102e6540 	call	102e654 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 1020c40:	e0bffe17 	ldw	r2,-8(fp)
 1020c44:	e0fffa03 	ldbu	r3,-24(fp)
 1020c48:	10c00005 	stb	r3,0(r2)
}
 1020c4c:	e037883a 	mov	sp,fp
 1020c50:	dfc00117 	ldw	ra,4(sp)
 1020c54:	df000017 	ldw	fp,0(sp)
 1020c58:	dec00204 	addi	sp,sp,8
 1020c5c:	f800283a 	ret

01020c60 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 1020c60:	defff704 	addi	sp,sp,-36
 1020c64:	dfc00815 	stw	ra,32(sp)
 1020c68:	df000715 	stw	fp,28(sp)
 1020c6c:	df000704 	addi	fp,sp,28
 1020c70:	e13ffb15 	stw	r4,-20(fp)
 1020c74:	e17ffc15 	stw	r5,-16(fp)
 1020c78:	3009883a 	mov	r4,r6
 1020c7c:	3807883a 	mov	r3,r7
 1020c80:	e0800217 	ldw	r2,8(fp)
 1020c84:	e13ffd05 	stb	r4,-12(fp)
 1020c88:	e0fffe0d 	sth	r3,-8(fp)
 1020c8c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 1020c90:	00800044 	movi	r2,1
 1020c94:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 1020c98:	e0bffe0b 	ldhu	r2,-8(fp)
 1020c9c:	1004d23a 	srli	r2,r2,8
 1020ca0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 1020ca4:	e0bffe0b 	ldhu	r2,-8(fp)
 1020ca8:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020cac:	e13ffb17 	ldw	r4,-20(fp)
 1020cb0:	e17ffc17 	ldw	r5,-16(fp)
 1020cb4:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020cb8:	e0bffd03 	ldbu	r2,-12(fp)
 1020cbc:	10803fcc 	andi	r2,r2,255
 1020cc0:	e13ffb17 	ldw	r4,-20(fp)
 1020cc4:	e17ffc17 	ldw	r5,-16(fp)
 1020cc8:	100d883a 	mov	r6,r2
 1020ccc:	10209dc0 	call	10209dc <i2c_write>
 1020cd0:	1000011e 	bne	r2,zero,1020cd8 <I2CL_Write+0x78>
        bSuccess = FALSE;
 1020cd4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 1020cd8:	e0bff917 	ldw	r2,-28(fp)
 1020cdc:	10000726 	beq	r2,zero,1020cfc <I2CL_Write+0x9c>
 1020ce0:	e0bffa03 	ldbu	r2,-24(fp)
 1020ce4:	e13ffb17 	ldw	r4,-20(fp)
 1020ce8:	e17ffc17 	ldw	r5,-16(fp)
 1020cec:	100d883a 	mov	r6,r2
 1020cf0:	10209dc0 	call	10209dc <i2c_write>
 1020cf4:	1000011e 	bne	r2,zero,1020cfc <I2CL_Write+0x9c>
        bSuccess = FALSE;
 1020cf8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 1020cfc:	e0bff917 	ldw	r2,-28(fp)
 1020d00:	10000726 	beq	r2,zero,1020d20 <I2CL_Write+0xc0>
 1020d04:	e0bffa43 	ldbu	r2,-23(fp)
 1020d08:	e13ffb17 	ldw	r4,-20(fp)
 1020d0c:	e17ffc17 	ldw	r5,-16(fp)
 1020d10:	100d883a 	mov	r6,r2
 1020d14:	10209dc0 	call	10209dc <i2c_write>
 1020d18:	1000011e 	bne	r2,zero,1020d20 <I2CL_Write+0xc0>
        bSuccess = FALSE;
 1020d1c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 1020d20:	e0bff917 	ldw	r2,-28(fp)
 1020d24:	10000726 	beq	r2,zero,1020d44 <I2CL_Write+0xe4>
 1020d28:	e0bfff03 	ldbu	r2,-4(fp)
 1020d2c:	e13ffb17 	ldw	r4,-20(fp)
 1020d30:	e17ffc17 	ldw	r5,-16(fp)
 1020d34:	100d883a 	mov	r6,r2
 1020d38:	10209dc0 	call	10209dc <i2c_write>
 1020d3c:	1000011e 	bne	r2,zero,1020d44 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 1020d40:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 1020d44:	e13ffb17 	ldw	r4,-20(fp)
 1020d48:	e17ffc17 	ldw	r5,-16(fp)
 1020d4c:	10209680 	call	1020968 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 1020d50:	0106d604 	movi	r4,7000
 1020d54:	102e6540 	call	102e654 <usleep>
    
    return bSuccess;
 1020d58:	e0bff917 	ldw	r2,-28(fp)
    
}
 1020d5c:	e037883a 	mov	sp,fp
 1020d60:	dfc00117 	ldw	ra,4(sp)
 1020d64:	df000017 	ldw	fp,0(sp)
 1020d68:	dec00204 	addi	sp,sp,8
 1020d6c:	f800283a 	ret

01020d70 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 1020d70:	defff804 	addi	sp,sp,-32
 1020d74:	dfc00715 	stw	ra,28(sp)
 1020d78:	df000615 	stw	fp,24(sp)
 1020d7c:	df000604 	addi	fp,sp,24
 1020d80:	e13ffc15 	stw	r4,-16(fp)
 1020d84:	e17ffd15 	stw	r5,-12(fp)
 1020d88:	3007883a 	mov	r3,r6
 1020d8c:	3805883a 	mov	r2,r7
 1020d90:	e0fffe05 	stb	r3,-8(fp)
 1020d94:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 1020d98:	00800044 	movi	r2,1
 1020d9c:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 1020da0:	e0bfff0b 	ldhu	r2,-4(fp)
 1020da4:	1004d23a 	srli	r2,r2,8
 1020da8:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 1020dac:	e0bfff0b 	ldhu	r2,-4(fp)
 1020db0:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 1020db4:	e13ffc17 	ldw	r4,-16(fp)
 1020db8:	e17ffd17 	ldw	r5,-12(fp)
 1020dbc:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020dc0:	e0bffe03 	ldbu	r2,-8(fp)
 1020dc4:	10803fcc 	andi	r2,r2,255
 1020dc8:	e13ffc17 	ldw	r4,-16(fp)
 1020dcc:	e17ffd17 	ldw	r5,-12(fp)
 1020dd0:	100d883a 	mov	r6,r2
 1020dd4:	10209dc0 	call	10209dc <i2c_write>
 1020dd8:	1000011e 	bne	r2,zero,1020de0 <I2CL_Read+0x70>
        bSuccess = FALSE;
 1020ddc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 1020de0:	e0bffa17 	ldw	r2,-24(fp)
 1020de4:	10000726 	beq	r2,zero,1020e04 <I2CL_Read+0x94>
 1020de8:	e0bffb03 	ldbu	r2,-20(fp)
 1020dec:	e13ffc17 	ldw	r4,-16(fp)
 1020df0:	e17ffd17 	ldw	r5,-12(fp)
 1020df4:	100d883a 	mov	r6,r2
 1020df8:	10209dc0 	call	10209dc <i2c_write>
 1020dfc:	1000011e 	bne	r2,zero,1020e04 <I2CL_Read+0x94>
        bSuccess = FALSE;
 1020e00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 1020e04:	e0bffa17 	ldw	r2,-24(fp)
 1020e08:	10000726 	beq	r2,zero,1020e28 <I2CL_Read+0xb8>
 1020e0c:	e0bffb43 	ldbu	r2,-19(fp)
 1020e10:	e13ffc17 	ldw	r4,-16(fp)
 1020e14:	e17ffd17 	ldw	r5,-12(fp)
 1020e18:	100d883a 	mov	r6,r2
 1020e1c:	10209dc0 	call	10209dc <i2c_write>
 1020e20:	1000011e 	bne	r2,zero,1020e28 <I2CL_Read+0xb8>
        bSuccess = FALSE;
 1020e24:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 1020e28:	e13ffc17 	ldw	r4,-16(fp)
 1020e2c:	e17ffd17 	ldw	r5,-12(fp)
 1020e30:	10208e00 	call	10208e0 <i2c_start>
    DeviceAddr |= 1; // Read
 1020e34:	e0bffe03 	ldbu	r2,-8(fp)
 1020e38:	10800054 	ori	r2,r2,1
 1020e3c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 1020e40:	e0bffa17 	ldw	r2,-24(fp)
 1020e44:	10000826 	beq	r2,zero,1020e68 <I2CL_Read+0xf8>
 1020e48:	e0bffe03 	ldbu	r2,-8(fp)
 1020e4c:	10803fcc 	andi	r2,r2,255
 1020e50:	e13ffc17 	ldw	r4,-16(fp)
 1020e54:	e17ffd17 	ldw	r5,-12(fp)
 1020e58:	100d883a 	mov	r6,r2
 1020e5c:	10209dc0 	call	10209dc <i2c_write>
 1020e60:	1000011e 	bne	r2,zero,1020e68 <I2CL_Read+0xf8>
        bSuccess = FALSE;
 1020e64:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 1020e68:	e0bffa17 	ldw	r2,-24(fp)
 1020e6c:	10000526 	beq	r2,zero,1020e84 <I2CL_Read+0x114>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 1020e70:	e13ffc17 	ldw	r4,-16(fp)
 1020e74:	e17ffd17 	ldw	r5,-12(fp)
 1020e78:	e1800217 	ldw	r6,8(fp)
 1020e7c:	000f883a 	mov	r7,zero
 1020e80:	1020b0c0 	call	1020b0c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 1020e84:	e13ffc17 	ldw	r4,-16(fp)
 1020e88:	e17ffd17 	ldw	r5,-12(fp)
 1020e8c:	10209680 	call	1020968 <i2c_stop>
    
    return bSuccess;    
 1020e90:	e0bffa17 	ldw	r2,-24(fp)
}
 1020e94:	e037883a 	mov	sp,fp
 1020e98:	dfc00117 	ldw	ra,4(sp)
 1020e9c:	df000017 	ldw	fp,0(sp)
 1020ea0:	dec00204 	addi	sp,sp,8
 1020ea4:	f800283a 	ret

01020ea8 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 1020ea8:	defff604 	addi	sp,sp,-40
 1020eac:	dfc00915 	stw	ra,36(sp)
 1020eb0:	df000815 	stw	fp,32(sp)
 1020eb4:	df000804 	addi	fp,sp,32
 1020eb8:	e13ffb15 	stw	r4,-20(fp)
 1020ebc:	e17ffc15 	stw	r5,-16(fp)
 1020ec0:	3009883a 	mov	r4,r6
 1020ec4:	3807883a 	mov	r3,r7
 1020ec8:	e0800317 	ldw	r2,12(fp)
 1020ecc:	e13ffd05 	stb	r4,-12(fp)
 1020ed0:	e0fffe0d 	sth	r3,-8(fp)
 1020ed4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 1020ed8:	00800044 	movi	r2,1
 1020edc:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 1020ee0:	e0bffe0b 	ldhu	r2,-8(fp)
 1020ee4:	1004d23a 	srli	r2,r2,8
 1020ee8:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 1020eec:	e0bffe0b 	ldhu	r2,-8(fp)
 1020ef0:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 1020ef4:	e13ffb17 	ldw	r4,-20(fp)
 1020ef8:	e17ffc17 	ldw	r5,-16(fp)
 1020efc:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 1020f00:	e0bffd03 	ldbu	r2,-12(fp)
 1020f04:	10803fcc 	andi	r2,r2,255
 1020f08:	e13ffb17 	ldw	r4,-20(fp)
 1020f0c:	e17ffc17 	ldw	r5,-16(fp)
 1020f10:	100d883a 	mov	r6,r2
 1020f14:	10209dc0 	call	10209dc <i2c_write>
 1020f18:	1000011e 	bne	r2,zero,1020f20 <I2CL_MultipleRead+0x78>
        bSuccess = FALSE;
 1020f1c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 1020f20:	e0bff917 	ldw	r2,-28(fp)
 1020f24:	10000726 	beq	r2,zero,1020f44 <I2CL_MultipleRead+0x9c>
 1020f28:	e0bffa03 	ldbu	r2,-24(fp)
 1020f2c:	e13ffb17 	ldw	r4,-20(fp)
 1020f30:	e17ffc17 	ldw	r5,-16(fp)
 1020f34:	100d883a 	mov	r6,r2
 1020f38:	10209dc0 	call	10209dc <i2c_write>
 1020f3c:	1000011e 	bne	r2,zero,1020f44 <I2CL_MultipleRead+0x9c>
        bSuccess = FALSE;
 1020f40:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 1020f44:	e0bff917 	ldw	r2,-28(fp)
 1020f48:	10000726 	beq	r2,zero,1020f68 <I2CL_MultipleRead+0xc0>
 1020f4c:	e0bffa43 	ldbu	r2,-23(fp)
 1020f50:	e13ffb17 	ldw	r4,-20(fp)
 1020f54:	e17ffc17 	ldw	r5,-16(fp)
 1020f58:	100d883a 	mov	r6,r2
 1020f5c:	10209dc0 	call	10209dc <i2c_write>
 1020f60:	1000011e 	bne	r2,zero,1020f68 <I2CL_MultipleRead+0xc0>
        bSuccess = FALSE;
 1020f64:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }    
    if (bSuccess)        
 1020f68:	e0bff917 	ldw	r2,-28(fp)
 1020f6c:	10000326 	beq	r2,zero,1020f7c <I2CL_MultipleRead+0xd4>
        i2c_start(clk_base, data_base);  // restart
 1020f70:	e13ffb17 	ldw	r4,-20(fp)
 1020f74:	e17ffc17 	ldw	r5,-16(fp)
 1020f78:	10208e00 	call	10208e0 <i2c_start>
    DeviceAddr |= 1; // Read
 1020f7c:	e0bffd03 	ldbu	r2,-12(fp)
 1020f80:	10800054 	ori	r2,r2,1
 1020f84:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 1020f88:	e0bff917 	ldw	r2,-28(fp)
 1020f8c:	10000826 	beq	r2,zero,1020fb0 <I2CL_MultipleRead+0x108>
 1020f90:	e0bffd03 	ldbu	r2,-12(fp)
 1020f94:	10803fcc 	andi	r2,r2,255
 1020f98:	e13ffb17 	ldw	r4,-20(fp)
 1020f9c:	e17ffc17 	ldw	r5,-16(fp)
 1020fa0:	100d883a 	mov	r6,r2
 1020fa4:	10209dc0 	call	10209dc <i2c_write>
 1020fa8:	1000011e 	bne	r2,zero,1020fb0 <I2CL_MultipleRead+0x108>
        bSuccess = FALSE;
 1020fac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 1020fb0:	e0bff917 	ldw	r2,-28(fp)
 1020fb4:	10001626 	beq	r2,zero,1021010 <I2CL_MultipleRead+0x168>
        for(i=0;i<len && bSuccess;i++){
 1020fb8:	e03ff815 	stw	zero,-32(fp)
 1020fbc:	00000f06 	br	1020ffc <I2CL_MultipleRead+0x154>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 1020fc0:	e0bff817 	ldw	r2,-32(fp)
 1020fc4:	e0c00217 	ldw	r3,8(fp)
 1020fc8:	188d883a 	add	r6,r3,r2
 1020fcc:	e0bfff0b 	ldhu	r2,-4(fp)
 1020fd0:	10ffffc4 	addi	r3,r2,-1
 1020fd4:	e0bff817 	ldw	r2,-32(fp)
 1020fd8:	1884c03a 	cmpne	r2,r3,r2
 1020fdc:	10803fcc 	andi	r2,r2,255
 1020fe0:	e13ffb17 	ldw	r4,-20(fp)
 1020fe4:	e17ffc17 	ldw	r5,-16(fp)
 1020fe8:	100f883a 	mov	r7,r2
 1020fec:	1020b0c0 	call	1020b0c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 1020ff0:	e0bff817 	ldw	r2,-32(fp)
 1020ff4:	10800044 	addi	r2,r2,1
 1020ff8:	e0bff815 	stw	r2,-32(fp)
 1020ffc:	e0bfff0b 	ldhu	r2,-4(fp)
 1021000:	e0fff817 	ldw	r3,-32(fp)
 1021004:	1880020e 	bge	r3,r2,1021010 <I2CL_MultipleRead+0x168>
 1021008:	e0bff917 	ldw	r2,-28(fp)
 102100c:	103fec1e 	bne	r2,zero,1020fc0 <__alt_data_end+0xfffe3b00>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 1021010:	e13ffb17 	ldw	r4,-20(fp)
 1021014:	e17ffc17 	ldw	r5,-16(fp)
 1021018:	10209680 	call	1020968 <i2c_stop>
    
    return bSuccess;    
 102101c:	e0bff917 	ldw	r2,-28(fp)
    
} 
 1021020:	e037883a 	mov	sp,fp
 1021024:	dfc00117 	ldw	ra,4(sp)
 1021028:	df000017 	ldw	fp,0(sp)
 102102c:	dec00204 	addi	sp,sp,8
 1021030:	f800283a 	ret

01021034 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 1021034:	defff604 	addi	sp,sp,-40
 1021038:	dfc00915 	stw	ra,36(sp)
 102103c:	df000815 	stw	fp,32(sp)
 1021040:	df000804 	addi	fp,sp,32
 1021044:	e13ffb15 	stw	r4,-20(fp)
 1021048:	e17ffc15 	stw	r5,-16(fp)
 102104c:	3009883a 	mov	r4,r6
 1021050:	3807883a 	mov	r3,r7
 1021054:	e0800317 	ldw	r2,12(fp)
 1021058:	e13ffd05 	stb	r4,-12(fp)
 102105c:	e0fffe0d 	sth	r3,-8(fp)
 1021060:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 1021064:	00800044 	movi	r2,1
 1021068:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 102106c:	e0bffe0b 	ldhu	r2,-8(fp)
 1021070:	1004d23a 	srli	r2,r2,8
 1021074:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 1021078:	e0bffe0b 	ldhu	r2,-8(fp)
 102107c:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 1021080:	e13ffb17 	ldw	r4,-20(fp)
 1021084:	e17ffc17 	ldw	r5,-16(fp)
 1021088:	10208e00 	call	10208e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 102108c:	e0bffd03 	ldbu	r2,-12(fp)
 1021090:	10803fcc 	andi	r2,r2,255
 1021094:	e13ffb17 	ldw	r4,-20(fp)
 1021098:	e17ffc17 	ldw	r5,-16(fp)
 102109c:	100d883a 	mov	r6,r2
 10210a0:	10209dc0 	call	10209dc <i2c_write>
 10210a4:	1000011e 	bne	r2,zero,10210ac <I2CL_MultipleWrite+0x78>
        bSuccess = FALSE;
 10210a8:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 10210ac:	e0bff817 	ldw	r2,-32(fp)
 10210b0:	10000726 	beq	r2,zero,10210d0 <I2CL_MultipleWrite+0x9c>
 10210b4:	e0bffa03 	ldbu	r2,-24(fp)
 10210b8:	e13ffb17 	ldw	r4,-20(fp)
 10210bc:	e17ffc17 	ldw	r5,-16(fp)
 10210c0:	100d883a 	mov	r6,r2
 10210c4:	10209dc0 	call	10209dc <i2c_write>
 10210c8:	1000011e 	bne	r2,zero,10210d0 <I2CL_MultipleWrite+0x9c>
        bSuccess = FALSE;
 10210cc:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 10210d0:	e0bff817 	ldw	r2,-32(fp)
 10210d4:	10000726 	beq	r2,zero,10210f4 <I2CL_MultipleWrite+0xc0>
 10210d8:	e0bffa43 	ldbu	r2,-23(fp)
 10210dc:	e13ffb17 	ldw	r4,-20(fp)
 10210e0:	e17ffc17 	ldw	r5,-16(fp)
 10210e4:	100d883a 	mov	r6,r2
 10210e8:	10209dc0 	call	10209dc <i2c_write>
 10210ec:	1000011e 	bne	r2,zero,10210f4 <I2CL_MultipleWrite+0xc0>
        bSuccess = FALSE;
 10210f0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 10210f4:	e0bff817 	ldw	r2,-32(fp)
 10210f8:	10001426 	beq	r2,zero,102114c <I2CL_MultipleWrite+0x118>
        for(i=0;i<len && bSuccess;i++){
 10210fc:	e03ff915 	stw	zero,-28(fp)
 1021100:	00000d06 	br	1021138 <I2CL_MultipleWrite+0x104>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 1021104:	e0bff917 	ldw	r2,-28(fp)
 1021108:	e0c00217 	ldw	r3,8(fp)
 102110c:	1885883a 	add	r2,r3,r2
 1021110:	10800003 	ldbu	r2,0(r2)
 1021114:	10803fcc 	andi	r2,r2,255
 1021118:	e13ffb17 	ldw	r4,-20(fp)
 102111c:	e17ffc17 	ldw	r5,-16(fp)
 1021120:	100d883a 	mov	r6,r2
 1021124:	10209dc0 	call	10209dc <i2c_write>
 1021128:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 102112c:	e0bff917 	ldw	r2,-28(fp)
 1021130:	10800044 	addi	r2,r2,1
 1021134:	e0bff915 	stw	r2,-28(fp)
 1021138:	e0bfff0b 	ldhu	r2,-4(fp)
 102113c:	e0fff917 	ldw	r3,-28(fp)
 1021140:	1880020e 	bge	r3,r2,102114c <I2CL_MultipleWrite+0x118>
 1021144:	e0bff817 	ldw	r2,-32(fp)
 1021148:	103fee1e 	bne	r2,zero,1021104 <__alt_data_end+0xfffe3c44>
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 102114c:	e13ffb17 	ldw	r4,-20(fp)
 1021150:	e17ffc17 	ldw	r5,-16(fp)
 1021154:	10209680 	call	1020968 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 1021158:	0106d604 	movi	r4,7000
 102115c:	102e6540 	call	102e654 <usleep>
    
    return bSuccess;
 1021160:	e0bff817 	ldw	r2,-32(fp)
    
}
 1021164:	e037883a 	mov	sp,fp
 1021168:	dfc00117 	ldw	ra,4(sp)
 102116c:	df000017 	ldw	fp,0(sp)
 1021170:	dec00204 	addi	sp,sp,8
 1021174:	f800283a 	ret

01021178 <I2CL_Read16>:



bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 1021178:	defff604 	addi	sp,sp,-40
 102117c:	dfc00915 	stw	ra,36(sp)
 1021180:	df000815 	stw	fp,32(sp)
 1021184:	df000804 	addi	fp,sp,32
 1021188:	e13ffc15 	stw	r4,-16(fp)
 102118c:	e17ffd15 	stw	r5,-12(fp)
 1021190:	3007883a 	mov	r3,r6
 1021194:	3805883a 	mov	r2,r7
 1021198:	e0fffe05 	stb	r3,-8(fp)
 102119c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 10211a0:	e1bffe07 	ldb	r6,-8(fp)
 10211a4:	e0ffff0b 	ldhu	r3,-4(fp)
 10211a8:	e0bffb04 	addi	r2,fp,-20
 10211ac:	d8800015 	stw	r2,0(sp)
 10211b0:	00800084 	movi	r2,2
 10211b4:	d8800115 	stw	r2,4(sp)
 10211b8:	e13ffc17 	ldw	r4,-16(fp)
 10211bc:	e17ffd17 	ldw	r5,-12(fp)
 10211c0:	180f883a 	mov	r7,r3
 10211c4:	1020ea80 	call	1020ea8 <I2CL_MultipleRead>
 10211c8:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 10211cc:	e0bffa17 	ldw	r2,-24(fp)
 10211d0:	10000a26 	beq	r2,zero,10211fc <I2CL_Read16+0x84>
        *pControlData = (szData[0] << 8 ) | szData[1];
 10211d4:	e0bffb03 	ldbu	r2,-20(fp)
 10211d8:	10803fcc 	andi	r2,r2,255
 10211dc:	1004923a 	slli	r2,r2,8
 10211e0:	1007883a 	mov	r3,r2
 10211e4:	e0bffb43 	ldbu	r2,-19(fp)
 10211e8:	10803fcc 	andi	r2,r2,255
 10211ec:	1884b03a 	or	r2,r3,r2
 10211f0:	1007883a 	mov	r3,r2
 10211f4:	e0800217 	ldw	r2,8(fp)
 10211f8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 10211fc:	e0bffa17 	ldw	r2,-24(fp)
}
 1021200:	e037883a 	mov	sp,fp
 1021204:	dfc00117 	ldw	ra,4(sp)
 1021208:	df000017 	ldw	fp,0(sp)
 102120c:	dec00204 	addi	sp,sp,8
 1021210:	f800283a 	ret

01021214 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 1021214:	defff504 	addi	sp,sp,-44
 1021218:	dfc00a15 	stw	ra,40(sp)
 102121c:	df000915 	stw	fp,36(sp)
 1021220:	df000904 	addi	fp,sp,36
 1021224:	e13ffb15 	stw	r4,-20(fp)
 1021228:	e17ffc15 	stw	r5,-16(fp)
 102122c:	3009883a 	mov	r4,r6
 1021230:	3807883a 	mov	r3,r7
 1021234:	e0800217 	ldw	r2,8(fp)
 1021238:	e13ffd05 	stb	r4,-12(fp)
 102123c:	e0fffe0d 	sth	r3,-8(fp)
 1021240:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 1021244:	e0bfff0b 	ldhu	r2,-4(fp)
 1021248:	1004d23a 	srli	r2,r2,8
 102124c:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 1021250:	e0bfff0b 	ldhu	r2,-4(fp)
 1021254:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 1021258:	e1bffd07 	ldb	r6,-12(fp)
 102125c:	e0fffe0b 	ldhu	r3,-8(fp)
 1021260:	e0bffa04 	addi	r2,fp,-24
 1021264:	d8800015 	stw	r2,0(sp)
 1021268:	00800084 	movi	r2,2
 102126c:	d8800115 	stw	r2,4(sp)
 1021270:	e13ffb17 	ldw	r4,-20(fp)
 1021274:	e17ffc17 	ldw	r5,-16(fp)
 1021278:	180f883a 	mov	r7,r3
 102127c:	10210340 	call	1021034 <I2CL_MultipleWrite>
 1021280:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 1021284:	e0bff917 	ldw	r2,-28(fp)
}
 1021288:	e037883a 	mov	sp,fp
 102128c:	dfc00117 	ldw	ra,4(sp)
 1021290:	df000017 	ldw	fp,0(sp)
 1021294:	dec00204 	addi	sp,sp,8
 1021298:	f800283a 	ret

0102129c <main>:
//P_Current*0.1mA/1000=Current(A)
//P_Power*0.1mA*25/1000=Power


int main()
{
 102129c:	defff704 	addi	sp,sp,-36
 10212a0:	dfc00815 	stw	ra,32(sp)
 10212a4:	df000715 	stw	fp,28(sp)
 10212a8:	df000704 	addi	fp,sp,28
   bool bPass ;
   alt_u16 data;
   float Shunt_Voltage,Bus_Voltage,Current,Power;
   printf("==Power Monitor Test ==\r\n");
 10212ac:	010040f4 	movhi	r4,259
 10212b0:	2101fc04 	addi	r4,r4,2032
 10212b4:	1022d380 	call	1022d38 <puts>
   //Configuration Register
   bPass = I2C_Write16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Configuration,Configuration_Reg);
 10212b8:	0090c9c4 	movi	r2,17191
 10212bc:	d8800015 	stw	r2,0(sp)
 10212c0:	01000804 	movi	r4,32
 10212c4:	01400c04 	movi	r5,48
 10212c8:	01bfe004 	movi	r6,-128
 10212cc:	000f883a 	mov	r7,zero
 10212d0:	10204180 	call	1020418 <I2C_Write16>
 10212d4:	e0bffa15 	stw	r2,-24(fp)
   if(bPass){
 10212d8:	e0bffa17 	ldw	r2,-24(fp)
 10212dc:	10001226 	beq	r2,zero,1021328 <main+0x8c>
	         bPass = I2C_Write16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Calibration,Calibration_Reg);
 10212e0:	0090aac4 	movi	r2,17067
 10212e4:	d8800015 	stw	r2,0(sp)
 10212e8:	01000804 	movi	r4,32
 10212ec:	01400c04 	movi	r5,48
 10212f0:	01bfe004 	movi	r6,-128
 10212f4:	01c00144 	movi	r7,5
 10212f8:	10204180 	call	1020418 <I2C_Write16>
 10212fc:	e0bffa15 	stw	r2,-24(fp)
	         if(bPass){
 1021300:	e0bffa17 	ldw	r2,-24(fp)
 1021304:	10000426 	beq	r2,zero,1021318 <main+0x7c>
	          		 printf("Configuration ok! \n");
 1021308:	010040f4 	movhi	r4,259
 102130c:	21020304 	addi	r4,r4,2060
 1021310:	1022d380 	call	1022d38 <puts>
 1021314:	00000706 	br	1021334 <main+0x98>
	         }else{
	          		 printf("Configuration failed!  \n");
 1021318:	010040f4 	movhi	r4,259
 102131c:	21020804 	addi	r4,r4,2080
 1021320:	1022d380 	call	1022d38 <puts>
 1021324:	00000306 	br	1021334 <main+0x98>
	         }
   }else{
    		 printf("Configuration failed!  \n");
 1021328:	010040f4 	movhi	r4,259
 102132c:	21020804 	addi	r4,r4,2080
 1021330:	1022d380 	call	1022d38 <puts>
   }
   usleep(2000);
 1021334:	0101f404 	movi	r4,2000
 1021338:	102e6540 	call	102e654 <usleep>
   while(1){
	    printf("==== Power Monitor Test ====\r\n");
 102133c:	010040f4 	movhi	r4,259
 1021340:	21020e04 	addi	r4,r4,2104
 1021344:	1022d380 	call	1022d38 <puts>
        // Read Shunt_Voltage
    	bPass = I2C_Read16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Shunt_Voltage,&data);
 1021348:	e0bfff04 	addi	r2,fp,-4
 102134c:	d8800015 	stw	r2,0(sp)
 1021350:	01000804 	movi	r4,32
 1021354:	01400c04 	movi	r5,48
 1021358:	01bfe004 	movi	r6,-128
 102135c:	01c00044 	movi	r7,1
 1021360:	10206280 	call	1020628 <I2C_Read16>
 1021364:	e0bffa15 	stw	r2,-24(fp)
    	if(bPass){
 1021368:	e0bffa17 	ldw	r2,-24(fp)
 102136c:	10002b26 	beq	r2,zero,102141c <main+0x180>
    		      Shunt_Voltage = (float)data*2.5/1000;
 1021370:	e0bfff0b 	ldhu	r2,-4(fp)
 1021374:	10bfffcc 	andi	r2,r2,65535
 1021378:	1009883a 	mov	r4,r2
 102137c:	10216e00 	call	10216e0 <__floatunsisf>
 1021380:	1007883a 	mov	r3,r2
 1021384:	1809883a 	mov	r4,r3
 1021388:	10227e00 	call	10227e0 <__extendsfdf2>
 102138c:	100b883a 	mov	r5,r2
 1021390:	180d883a 	mov	r6,r3
 1021394:	2809883a 	mov	r4,r5
 1021398:	300b883a 	mov	r5,r6
 102139c:	000d883a 	mov	r6,zero
 10213a0:	01d00134 	movhi	r7,16388
 10213a4:	10220bc0 	call	10220bc <__muldf3>
 10213a8:	1009883a 	mov	r4,r2
 10213ac:	180b883a 	mov	r5,r3
 10213b0:	2005883a 	mov	r2,r4
 10213b4:	2807883a 	mov	r3,r5
 10213b8:	1009883a 	mov	r4,r2
 10213bc:	180b883a 	mov	r5,r3
 10213c0:	000d883a 	mov	r6,zero
 10213c4:	01d023f4 	movhi	r7,16527
 10213c8:	39d00004 	addi	r7,r7,16384
 10213cc:	10217f00 	call	10217f0 <__divdf3>
 10213d0:	1009883a 	mov	r4,r2
 10213d4:	180b883a 	mov	r5,r3
 10213d8:	2005883a 	mov	r2,r4
 10213dc:	2807883a 	mov	r3,r5
 10213e0:	1009883a 	mov	r4,r2
 10213e4:	180b883a 	mov	r5,r3
 10213e8:	10228f00 	call	10228f0 <__truncdfsf2>
 10213ec:	1007883a 	mov	r3,r2
 10213f0:	e0fffb15 	stw	r3,-20(fp)
    		      printf("Shunt_Voltage = %.3f mV \n",Shunt_Voltage);
 10213f4:	e13ffb17 	ldw	r4,-20(fp)
 10213f8:	10227e00 	call	10227e0 <__extendsfdf2>
 10213fc:	100d883a 	mov	r6,r2
 1021400:	180f883a 	mov	r7,r3
 1021404:	010040f4 	movhi	r4,259
 1021408:	21021604 	addi	r4,r4,2136
 102140c:	300b883a 	mov	r5,r6
 1021410:	380d883a 	mov	r6,r7
 1021414:	1022c440 	call	1022c44 <printf>
 1021418:	00000306 	br	1021428 <main+0x18c>
    	}else{
   	              printf("Read Shunt_Voltage failed!\n");
 102141c:	010040f4 	movhi	r4,259
 1021420:	21021d04 	addi	r4,r4,2164
 1021424:	1022d380 	call	1022d38 <puts>
    	}
    	// Read Bus_Voltage
    	bPass = I2C_Read16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Bus_Voltage,&data);
 1021428:	e0bfff04 	addi	r2,fp,-4
 102142c:	d8800015 	stw	r2,0(sp)
 1021430:	01000804 	movi	r4,32
 1021434:	01400c04 	movi	r5,48
 1021438:	01bfe004 	movi	r6,-128
 102143c:	01c00084 	movi	r7,2
 1021440:	10206280 	call	1020628 <I2C_Read16>
 1021444:	e0bffa15 	stw	r2,-24(fp)
    	if(bPass){
 1021448:	e0bffa17 	ldw	r2,-24(fp)
 102144c:	10002b26 	beq	r2,zero,10214fc <main+0x260>
        	      Bus_Voltage = (float)data*1.25/1000;
 1021450:	e0bfff0b 	ldhu	r2,-4(fp)
 1021454:	10bfffcc 	andi	r2,r2,65535
 1021458:	1009883a 	mov	r4,r2
 102145c:	10216e00 	call	10216e0 <__floatunsisf>
 1021460:	1007883a 	mov	r3,r2
 1021464:	1809883a 	mov	r4,r3
 1021468:	10227e00 	call	10227e0 <__extendsfdf2>
 102146c:	100b883a 	mov	r5,r2
 1021470:	180d883a 	mov	r6,r3
 1021474:	2809883a 	mov	r4,r5
 1021478:	300b883a 	mov	r5,r6
 102147c:	000d883a 	mov	r6,zero
 1021480:	01cffd34 	movhi	r7,16372
 1021484:	10220bc0 	call	10220bc <__muldf3>
 1021488:	1009883a 	mov	r4,r2
 102148c:	180b883a 	mov	r5,r3
 1021490:	2005883a 	mov	r2,r4
 1021494:	2807883a 	mov	r3,r5
 1021498:	1009883a 	mov	r4,r2
 102149c:	180b883a 	mov	r5,r3
 10214a0:	000d883a 	mov	r6,zero
 10214a4:	01d023f4 	movhi	r7,16527
 10214a8:	39d00004 	addi	r7,r7,16384
 10214ac:	10217f00 	call	10217f0 <__divdf3>
 10214b0:	1009883a 	mov	r4,r2
 10214b4:	180b883a 	mov	r5,r3
 10214b8:	2005883a 	mov	r2,r4
 10214bc:	2807883a 	mov	r3,r5
 10214c0:	1009883a 	mov	r4,r2
 10214c4:	180b883a 	mov	r5,r3
 10214c8:	10228f00 	call	10228f0 <__truncdfsf2>
 10214cc:	1007883a 	mov	r3,r2
 10214d0:	e0fffc15 	stw	r3,-16(fp)
        	      printf("Bus_Voltage   = %.3f V \n",Bus_Voltage);
 10214d4:	e13ffc17 	ldw	r4,-16(fp)
 10214d8:	10227e00 	call	10227e0 <__extendsfdf2>
 10214dc:	100d883a 	mov	r6,r2
 10214e0:	180f883a 	mov	r7,r3
 10214e4:	010040f4 	movhi	r4,259
 10214e8:	21022404 	addi	r4,r4,2192
 10214ec:	300b883a 	mov	r5,r6
 10214f0:	380d883a 	mov	r6,r7
 10214f4:	1022c440 	call	1022c44 <printf>
 10214f8:	00000306 	br	1021508 <main+0x26c>
    	}else{
    	      	  printf("Read Bus_Voltage failed!\n");
 10214fc:	010040f4 	movhi	r4,259
 1021500:	21022b04 	addi	r4,r4,2220
 1021504:	1022d380 	call	1022d38 <puts>
        }
    	//Read Current
    	bPass = I2C_Read16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Current,&data);
 1021508:	e0bfff04 	addi	r2,fp,-4
 102150c:	d8800015 	stw	r2,0(sp)
 1021510:	01000804 	movi	r4,32
 1021514:	01400c04 	movi	r5,48
 1021518:	01bfe004 	movi	r6,-128
 102151c:	01c00104 	movi	r7,4
 1021520:	10206280 	call	1020628 <I2C_Read16>
 1021524:	e0bffa15 	stw	r2,-24(fp)
    	if(bPass){
 1021528:	e0bffa17 	ldw	r2,-24(fp)
 102152c:	10002d26 	beq	r2,zero,10215e4 <main+0x348>
    	   		  Current = (float)data*0.1/1000;
 1021530:	e0bfff0b 	ldhu	r2,-4(fp)
 1021534:	10bfffcc 	andi	r2,r2,65535
 1021538:	1009883a 	mov	r4,r2
 102153c:	10216e00 	call	10216e0 <__floatunsisf>
 1021540:	1007883a 	mov	r3,r2
 1021544:	1809883a 	mov	r4,r3
 1021548:	10227e00 	call	10227e0 <__extendsfdf2>
 102154c:	100b883a 	mov	r5,r2
 1021550:	180d883a 	mov	r6,r3
 1021554:	2809883a 	mov	r4,r5
 1021558:	300b883a 	mov	r5,r6
 102155c:	01a666b4 	movhi	r6,39322
 1021560:	31a66684 	addi	r6,r6,-26214
 1021564:	01cfeeb4 	movhi	r7,16314
 1021568:	39e66644 	addi	r7,r7,-26215
 102156c:	10220bc0 	call	10220bc <__muldf3>
 1021570:	1009883a 	mov	r4,r2
 1021574:	180b883a 	mov	r5,r3
 1021578:	2005883a 	mov	r2,r4
 102157c:	2807883a 	mov	r3,r5
 1021580:	1009883a 	mov	r4,r2
 1021584:	180b883a 	mov	r5,r3
 1021588:	000d883a 	mov	r6,zero
 102158c:	01d023f4 	movhi	r7,16527
 1021590:	39d00004 	addi	r7,r7,16384
 1021594:	10217f00 	call	10217f0 <__divdf3>
 1021598:	1009883a 	mov	r4,r2
 102159c:	180b883a 	mov	r5,r3
 10215a0:	2005883a 	mov	r2,r4
 10215a4:	2807883a 	mov	r3,r5
 10215a8:	1009883a 	mov	r4,r2
 10215ac:	180b883a 	mov	r5,r3
 10215b0:	10228f00 	call	10228f0 <__truncdfsf2>
 10215b4:	1007883a 	mov	r3,r2
 10215b8:	e0fffd15 	stw	r3,-12(fp)
    	   		  printf("Current       = %.3f A \n",Current);
 10215bc:	e13ffd17 	ldw	r4,-12(fp)
 10215c0:	10227e00 	call	10227e0 <__extendsfdf2>
 10215c4:	100d883a 	mov	r6,r2
 10215c8:	180f883a 	mov	r7,r3
 10215cc:	010040f4 	movhi	r4,259
 10215d0:	21023204 	addi	r4,r4,2248
 10215d4:	300b883a 	mov	r5,r6
 10215d8:	380d883a 	mov	r6,r7
 10215dc:	1022c440 	call	1022c44 <printf>
 10215e0:	00000306 	br	10215f0 <main+0x354>
    	}else{
    	      	  printf("Read Current failed!\n");
 10215e4:	010040f4 	movhi	r4,259
 10215e8:	21023904 	addi	r4,r4,2276
 10215ec:	1022d380 	call	1022d38 <puts>
        }
    	//Read Power
    	bPass = I2C_Read16(PMONITOR_I2C_SCL_BASE,PMONITOR_I2C_SDA_BASE,Monitor_I2C_ADRESS,P_Power,&data);
 10215f0:	e0bfff04 	addi	r2,fp,-4
 10215f4:	d8800015 	stw	r2,0(sp)
 10215f8:	01000804 	movi	r4,32
 10215fc:	01400c04 	movi	r5,48
 1021600:	01bfe004 	movi	r6,-128
 1021604:	01c000c4 	movi	r7,3
 1021608:	10206280 	call	1020628 <I2C_Read16>
 102160c:	e0bffa15 	stw	r2,-24(fp)
    	if(bPass){
 1021610:	e0bffa17 	ldw	r2,-24(fp)
 1021614:	10002b26 	beq	r2,zero,10216c4 <main+0x428>
        	      Power = (float)data*2.5/1000;
 1021618:	e0bfff0b 	ldhu	r2,-4(fp)
 102161c:	10bfffcc 	andi	r2,r2,65535
 1021620:	1009883a 	mov	r4,r2
 1021624:	10216e00 	call	10216e0 <__floatunsisf>
 1021628:	1007883a 	mov	r3,r2
 102162c:	1809883a 	mov	r4,r3
 1021630:	10227e00 	call	10227e0 <__extendsfdf2>
 1021634:	100b883a 	mov	r5,r2
 1021638:	180d883a 	mov	r6,r3
 102163c:	2809883a 	mov	r4,r5
 1021640:	300b883a 	mov	r5,r6
 1021644:	000d883a 	mov	r6,zero
 1021648:	01d00134 	movhi	r7,16388
 102164c:	10220bc0 	call	10220bc <__muldf3>
 1021650:	1009883a 	mov	r4,r2
 1021654:	180b883a 	mov	r5,r3
 1021658:	2005883a 	mov	r2,r4
 102165c:	2807883a 	mov	r3,r5
 1021660:	1009883a 	mov	r4,r2
 1021664:	180b883a 	mov	r5,r3
 1021668:	000d883a 	mov	r6,zero
 102166c:	01d023f4 	movhi	r7,16527
 1021670:	39d00004 	addi	r7,r7,16384
 1021674:	10217f00 	call	10217f0 <__divdf3>
 1021678:	1009883a 	mov	r4,r2
 102167c:	180b883a 	mov	r5,r3
 1021680:	2005883a 	mov	r2,r4
 1021684:	2807883a 	mov	r3,r5
 1021688:	1009883a 	mov	r4,r2
 102168c:	180b883a 	mov	r5,r3
 1021690:	10228f00 	call	10228f0 <__truncdfsf2>
 1021694:	1007883a 	mov	r3,r2
 1021698:	e0fffe15 	stw	r3,-8(fp)
        	      printf("Power         = %.3f W \n",Power);
 102169c:	e13ffe17 	ldw	r4,-8(fp)
 10216a0:	10227e00 	call	10227e0 <__extendsfdf2>
 10216a4:	100d883a 	mov	r6,r2
 10216a8:	180f883a 	mov	r7,r3
 10216ac:	010040f4 	movhi	r4,259
 10216b0:	21023f04 	addi	r4,r4,2300
 10216b4:	300b883a 	mov	r5,r6
 10216b8:	380d883a 	mov	r6,r7
 10216bc:	1022c440 	call	1022c44 <printf>
 10216c0:	00000306 	br	10216d0 <main+0x434>
    	}else{
    	      	  printf("Read Power failed!\n");
 10216c4:	010040f4 	movhi	r4,259
 10216c8:	21024604 	addi	r4,r4,2328
 10216cc:	1022d380 	call	1022d38 <puts>
        }
        usleep(1000*2000);
 10216d0:	010007f4 	movhi	r4,31
 10216d4:	21212004 	addi	r4,r4,-31616
 10216d8:	102e6540 	call	102e654 <usleep>
    }
 10216dc:	003f1706 	br	102133c <__alt_data_end+0xfffe3e7c>

010216e0 <__floatunsisf>:
 10216e0:	defffe04 	addi	sp,sp,-8
 10216e4:	dc000015 	stw	r16,0(sp)
 10216e8:	dfc00115 	stw	ra,4(sp)
 10216ec:	2021883a 	mov	r16,r4
 10216f0:	20002626 	beq	r4,zero,102178c <__floatunsisf+0xac>
 10216f4:	1022a880 	call	1022a88 <__clzsi2>
 10216f8:	00c02784 	movi	r3,158
 10216fc:	1887c83a 	sub	r3,r3,r2
 1021700:	01002584 	movi	r4,150
 1021704:	20c00816 	blt	r4,r3,1021728 <__floatunsisf+0x48>
 1021708:	01000204 	movi	r4,8
 102170c:	2080340e 	bge	r4,r2,10217e0 <__floatunsisf+0x100>
 1021710:	10bffe04 	addi	r2,r2,-8
 1021714:	8088983a 	sll	r4,r16,r2
 1021718:	00802034 	movhi	r2,128
 102171c:	10bfffc4 	addi	r2,r2,-1
 1021720:	2088703a 	and	r4,r4,r2
 1021724:	00001b06 	br	1021794 <__floatunsisf+0xb4>
 1021728:	01002644 	movi	r4,153
 102172c:	20c02316 	blt	r4,r3,10217bc <__floatunsisf+0xdc>
 1021730:	01000144 	movi	r4,5
 1021734:	2080020e 	bge	r4,r2,1021740 <__floatunsisf+0x60>
 1021738:	113ffec4 	addi	r4,r2,-5
 102173c:	8120983a 	sll	r16,r16,r4
 1021740:	017f0034 	movhi	r5,64512
 1021744:	297fffc4 	addi	r5,r5,-1
 1021748:	810001cc 	andi	r4,r16,7
 102174c:	814a703a 	and	r5,r16,r5
 1021750:	20000426 	beq	r4,zero,1021764 <__floatunsisf+0x84>
 1021754:	840003cc 	andi	r16,r16,15
 1021758:	01000104 	movi	r4,4
 102175c:	81000126 	beq	r16,r4,1021764 <__floatunsisf+0x84>
 1021760:	290b883a 	add	r5,r5,r4
 1021764:	2901002c 	andhi	r4,r5,1024
 1021768:	20000526 	beq	r4,zero,1021780 <__floatunsisf+0xa0>
 102176c:	00c027c4 	movi	r3,159
 1021770:	1887c83a 	sub	r3,r3,r2
 1021774:	00bf0034 	movhi	r2,64512
 1021778:	10bfffc4 	addi	r2,r2,-1
 102177c:	288a703a 	and	r5,r5,r2
 1021780:	280891ba 	slli	r4,r5,6
 1021784:	2008d27a 	srli	r4,r4,9
 1021788:	00000206 	br	1021794 <__floatunsisf+0xb4>
 102178c:	0007883a 	mov	r3,zero
 1021790:	0009883a 	mov	r4,zero
 1021794:	18c03fcc 	andi	r3,r3,255
 1021798:	180695fa 	slli	r3,r3,23
 102179c:	00802034 	movhi	r2,128
 10217a0:	10bfffc4 	addi	r2,r2,-1
 10217a4:	2084703a 	and	r2,r4,r2
 10217a8:	10c4b03a 	or	r2,r2,r3
 10217ac:	dfc00117 	ldw	ra,4(sp)
 10217b0:	dc000017 	ldw	r16,0(sp)
 10217b4:	dec00204 	addi	sp,sp,8
 10217b8:	f800283a 	ret
 10217bc:	01400144 	movi	r5,5
 10217c0:	110006c4 	addi	r4,r2,27
 10217c4:	8108983a 	sll	r4,r16,r4
 10217c8:	288dc83a 	sub	r6,r5,r2
 10217cc:	81a0d83a 	srl	r16,r16,r6
 10217d0:	2008c03a 	cmpne	r4,r4,zero
 10217d4:	2420b03a 	or	r16,r4,r16
 10217d8:	28bfd90e 	bge	r5,r2,1021740 <__alt_data_end+0xfffe4280>
 10217dc:	003fd606 	br	1021738 <__alt_data_end+0xfffe4278>
 10217e0:	01402034 	movhi	r5,128
 10217e4:	297fffc4 	addi	r5,r5,-1
 10217e8:	8148703a 	and	r4,r16,r5
 10217ec:	003fe906 	br	1021794 <__alt_data_end+0xfffe42d4>

010217f0 <__divdf3>:
 10217f0:	defff204 	addi	sp,sp,-56
 10217f4:	dd000815 	stw	r20,32(sp)
 10217f8:	2828d53a 	srli	r20,r5,20
 10217fc:	dd800a15 	stw	r22,40(sp)
 1021800:	282cd7fa 	srli	r22,r5,31
 1021804:	dc000415 	stw	r16,16(sp)
 1021808:	04000434 	movhi	r16,16
 102180c:	df000c15 	stw	fp,48(sp)
 1021810:	dcc00715 	stw	r19,28(sp)
 1021814:	dc800615 	stw	r18,24(sp)
 1021818:	dc400515 	stw	r17,20(sp)
 102181c:	843fffc4 	addi	r16,r16,-1
 1021820:	dfc00d15 	stw	ra,52(sp)
 1021824:	ddc00b15 	stw	r23,44(sp)
 1021828:	dd400915 	stw	r21,36(sp)
 102182c:	a501ffcc 	andi	r20,r20,2047
 1021830:	2025883a 	mov	r18,r4
 1021834:	2027883a 	mov	r19,r4
 1021838:	2c22703a 	and	r17,r5,r16
 102183c:	b7003fcc 	andi	fp,r22,255
 1021840:	a0005e26 	beq	r20,zero,10219bc <__divdf3+0x1cc>
 1021844:	0081ffc4 	movi	r2,2047
 1021848:	a0803526 	beq	r20,r2,1021920 <__divdf3+0x130>
 102184c:	8c000434 	orhi	r16,r17,16
 1021850:	2004d77a 	srli	r2,r4,29
 1021854:	802090fa 	slli	r16,r16,3
 1021858:	202690fa 	slli	r19,r4,3
 102185c:	a53f0044 	addi	r20,r20,-1023
 1021860:	80a2b03a 	or	r17,r16,r2
 1021864:	0025883a 	mov	r18,zero
 1021868:	0011883a 	mov	r8,zero
 102186c:	380ad53a 	srli	r5,r7,20
 1021870:	382ed7fa 	srli	r23,r7,31
 1021874:	04000434 	movhi	r16,16
 1021878:	843fffc4 	addi	r16,r16,-1
 102187c:	2941ffcc 	andi	r5,r5,2047
 1021880:	302b883a 	mov	r21,r6
 1021884:	3c20703a 	and	r16,r7,r16
 1021888:	ba403fcc 	andi	r9,r23,255
 102188c:	28006726 	beq	r5,zero,1021a2c <__divdf3+0x23c>
 1021890:	0081ffc4 	movi	r2,2047
 1021894:	28805f26 	beq	r5,r2,1021a14 <__divdf3+0x224>
 1021898:	84000434 	orhi	r16,r16,16
 102189c:	3004d77a 	srli	r2,r6,29
 10218a0:	802090fa 	slli	r16,r16,3
 10218a4:	302a90fa 	slli	r21,r6,3
 10218a8:	297f0044 	addi	r5,r5,-1023
 10218ac:	80a0b03a 	or	r16,r16,r2
 10218b0:	000f883a 	mov	r7,zero
 10218b4:	3c86b03a 	or	r3,r7,r18
 10218b8:	180690ba 	slli	r3,r3,2
 10218bc:	008040b4 	movhi	r2,258
 10218c0:	10863804 	addi	r2,r2,6368
 10218c4:	1887883a 	add	r3,r3,r2
 10218c8:	18c00017 	ldw	r3,0(r3)
 10218cc:	b5c8f03a 	xor	r4,r22,r23
 10218d0:	200d883a 	mov	r6,r4
 10218d4:	24803fcc 	andi	r18,r4,255
 10218d8:	a169c83a 	sub	r20,r20,r5
 10218dc:	1800683a 	jmp	r3
 10218e0:	01021b28 	cmpgeui	r4,zero,2156
 10218e4:	01021958 	cmpnei	r4,zero,2149
 10218e8:	01021aec 	andhi	r4,zero,2155
 10218ec:	0102193c 	xorhi	r4,zero,2148
 10218f0:	01021aec 	andhi	r4,zero,2155
 10218f4:	01021ac0 	call	1021ac <__reset-0xf1de54>
 10218f8:	01021aec 	andhi	r4,zero,2155
 10218fc:	0102193c 	xorhi	r4,zero,2148
 1021900:	01021958 	cmpnei	r4,zero,2149
 1021904:	01021958 	cmpnei	r4,zero,2149
 1021908:	01021ac0 	call	1021ac <__reset-0xf1de54>
 102190c:	0102193c 	xorhi	r4,zero,2148
 1021910:	0102194c 	andi	r4,zero,2149
 1021914:	0102194c 	andi	r4,zero,2149
 1021918:	0102194c 	andi	r4,zero,2149
 102191c:	01021afc 	xorhi	r4,zero,2155
 1021920:	8904b03a 	or	r2,r17,r4
 1021924:	1000631e 	bne	r2,zero,1021ab4 <__divdf3+0x2c4>
 1021928:	04800204 	movi	r18,8
 102192c:	0023883a 	mov	r17,zero
 1021930:	0027883a 	mov	r19,zero
 1021934:	02000084 	movi	r8,2
 1021938:	003fcc06 	br	102186c <__alt_data_end+0xfffe43ac>
 102193c:	8023883a 	mov	r17,r16
 1021940:	a827883a 	mov	r19,r21
 1021944:	4839883a 	mov	fp,r9
 1021948:	3811883a 	mov	r8,r7
 102194c:	00800084 	movi	r2,2
 1021950:	40812a1e 	bne	r8,r2,1021dfc <__divdf3+0x60c>
 1021954:	e025883a 	mov	r18,fp
 1021958:	9180004c 	andi	r6,r18,1
 102195c:	0101ffc4 	movi	r4,2047
 1021960:	000b883a 	mov	r5,zero
 1021964:	0027883a 	mov	r19,zero
 1021968:	2008953a 	slli	r4,r4,20
 102196c:	30c03fcc 	andi	r3,r6,255
 1021970:	04000434 	movhi	r16,16
 1021974:	180697fa 	slli	r3,r3,31
 1021978:	843fffc4 	addi	r16,r16,-1
 102197c:	2c20703a 	and	r16,r5,r16
 1021980:	8120b03a 	or	r16,r16,r4
 1021984:	80c6b03a 	or	r3,r16,r3
 1021988:	9805883a 	mov	r2,r19
 102198c:	dfc00d17 	ldw	ra,52(sp)
 1021990:	df000c17 	ldw	fp,48(sp)
 1021994:	ddc00b17 	ldw	r23,44(sp)
 1021998:	dd800a17 	ldw	r22,40(sp)
 102199c:	dd400917 	ldw	r21,36(sp)
 10219a0:	dd000817 	ldw	r20,32(sp)
 10219a4:	dcc00717 	ldw	r19,28(sp)
 10219a8:	dc800617 	ldw	r18,24(sp)
 10219ac:	dc400517 	ldw	r17,20(sp)
 10219b0:	dc000417 	ldw	r16,16(sp)
 10219b4:	dec00e04 	addi	sp,sp,56
 10219b8:	f800283a 	ret
 10219bc:	8904b03a 	or	r2,r17,r4
 10219c0:	10003726 	beq	r2,zero,1021aa0 <__divdf3+0x2b0>
 10219c4:	88011c26 	beq	r17,zero,1021e38 <__divdf3+0x648>
 10219c8:	8809883a 	mov	r4,r17
 10219cc:	d9800315 	stw	r6,12(sp)
 10219d0:	d9c00115 	stw	r7,4(sp)
 10219d4:	1022a880 	call	1022a88 <__clzsi2>
 10219d8:	d9800317 	ldw	r6,12(sp)
 10219dc:	d9c00117 	ldw	r7,4(sp)
 10219e0:	1007883a 	mov	r3,r2
 10219e4:	01000a04 	movi	r4,40
 10219e8:	1cfffe04 	addi	r19,r3,-8
 10219ec:	20c9c83a 	sub	r4,r4,r3
 10219f0:	8cca983a 	sll	r5,r17,r19
 10219f4:	9108d83a 	srl	r4,r18,r4
 10219f8:	94e6983a 	sll	r19,r18,r19
 10219fc:	2162b03a 	or	r17,r4,r5
 1021a00:	053f0344 	movi	r20,-1011
 1021a04:	a0e9c83a 	sub	r20,r20,r3
 1021a08:	0025883a 	mov	r18,zero
 1021a0c:	0011883a 	mov	r8,zero
 1021a10:	003f9606 	br	102186c <__alt_data_end+0xfffe43ac>
 1021a14:	8184b03a 	or	r2,r16,r6
 1021a18:	10001f1e 	bne	r2,zero,1021a98 <__divdf3+0x2a8>
 1021a1c:	0021883a 	mov	r16,zero
 1021a20:	002b883a 	mov	r21,zero
 1021a24:	01c00084 	movi	r7,2
 1021a28:	003fa206 	br	10218b4 <__alt_data_end+0xfffe43f4>
 1021a2c:	8184b03a 	or	r2,r16,r6
 1021a30:	10001526 	beq	r2,zero,1021a88 <__divdf3+0x298>
 1021a34:	80010c26 	beq	r16,zero,1021e68 <__divdf3+0x678>
 1021a38:	8009883a 	mov	r4,r16
 1021a3c:	d9800315 	stw	r6,12(sp)
 1021a40:	da000215 	stw	r8,8(sp)
 1021a44:	da400015 	stw	r9,0(sp)
 1021a48:	1022a880 	call	1022a88 <__clzsi2>
 1021a4c:	d9800317 	ldw	r6,12(sp)
 1021a50:	da000217 	ldw	r8,8(sp)
 1021a54:	da400017 	ldw	r9,0(sp)
 1021a58:	1007883a 	mov	r3,r2
 1021a5c:	01000a04 	movi	r4,40
 1021a60:	1d7ffe04 	addi	r21,r3,-8
 1021a64:	20c9c83a 	sub	r4,r4,r3
 1021a68:	8560983a 	sll	r16,r16,r21
 1021a6c:	3108d83a 	srl	r4,r6,r4
 1021a70:	356a983a 	sll	r21,r6,r21
 1021a74:	2420b03a 	or	r16,r4,r16
 1021a78:	017f0344 	movi	r5,-1011
 1021a7c:	28cbc83a 	sub	r5,r5,r3
 1021a80:	000f883a 	mov	r7,zero
 1021a84:	003f8b06 	br	10218b4 <__alt_data_end+0xfffe43f4>
 1021a88:	0021883a 	mov	r16,zero
 1021a8c:	002b883a 	mov	r21,zero
 1021a90:	01c00044 	movi	r7,1
 1021a94:	003f8706 	br	10218b4 <__alt_data_end+0xfffe43f4>
 1021a98:	01c000c4 	movi	r7,3
 1021a9c:	003f8506 	br	10218b4 <__alt_data_end+0xfffe43f4>
 1021aa0:	04800104 	movi	r18,4
 1021aa4:	0023883a 	mov	r17,zero
 1021aa8:	0027883a 	mov	r19,zero
 1021aac:	02000044 	movi	r8,1
 1021ab0:	003f6e06 	br	102186c <__alt_data_end+0xfffe43ac>
 1021ab4:	04800304 	movi	r18,12
 1021ab8:	020000c4 	movi	r8,3
 1021abc:	003f6b06 	br	102186c <__alt_data_end+0xfffe43ac>
 1021ac0:	01400434 	movhi	r5,16
 1021ac4:	000d883a 	mov	r6,zero
 1021ac8:	297fffc4 	addi	r5,r5,-1
 1021acc:	04ffffc4 	movi	r19,-1
 1021ad0:	0101ffc4 	movi	r4,2047
 1021ad4:	003fa406 	br	1021968 <__alt_data_end+0xfffe44a8>
 1021ad8:	043f0084 	movi	r16,-1022
 1021adc:	8521c83a 	sub	r16,r16,r20
 1021ae0:	00800e04 	movi	r2,56
 1021ae4:	1401200e 	bge	r2,r16,1021f68 <__divdf3+0x778>
 1021ae8:	9180004c 	andi	r6,r18,1
 1021aec:	0009883a 	mov	r4,zero
 1021af0:	000b883a 	mov	r5,zero
 1021af4:	0027883a 	mov	r19,zero
 1021af8:	003f9b06 	br	1021968 <__alt_data_end+0xfffe44a8>
 1021afc:	8880022c 	andhi	r2,r17,8
 1021b00:	1000c726 	beq	r2,zero,1021e20 <__divdf3+0x630>
 1021b04:	8080022c 	andhi	r2,r16,8
 1021b08:	1000c51e 	bne	r2,zero,1021e20 <__divdf3+0x630>
 1021b0c:	00800434 	movhi	r2,16
 1021b10:	81400234 	orhi	r5,r16,8
 1021b14:	10bfffc4 	addi	r2,r2,-1
 1021b18:	b80d883a 	mov	r6,r23
 1021b1c:	288a703a 	and	r5,r5,r2
 1021b20:	a827883a 	mov	r19,r21
 1021b24:	003fea06 	br	1021ad0 <__alt_data_end+0xfffe4610>
 1021b28:	8440ea36 	bltu	r16,r17,1021ed4 <__divdf3+0x6e4>
 1021b2c:	8c00e826 	beq	r17,r16,1021ed0 <__divdf3+0x6e0>
 1021b30:	a53fffc4 	addi	r20,r20,-1
 1021b34:	882d883a 	mov	r22,r17
 1021b38:	000d883a 	mov	r6,zero
 1021b3c:	a804d63a 	srli	r2,r21,24
 1021b40:	8020923a 	slli	r16,r16,8
 1021b44:	b009883a 	mov	r4,r22
 1021b48:	d9800315 	stw	r6,12(sp)
 1021b4c:	1420b03a 	or	r16,r2,r16
 1021b50:	802ed43a 	srli	r23,r16,16
 1021b54:	873fffcc 	andi	fp,r16,65535
 1021b58:	a82a923a 	slli	r21,r21,8
 1021b5c:	b80b883a 	mov	r5,r23
 1021b60:	1022c080 	call	1022c08 <__udivsi3>
 1021b64:	b009883a 	mov	r4,r22
 1021b68:	b80b883a 	mov	r5,r23
 1021b6c:	1023883a 	mov	r17,r2
 1021b70:	1022c100 	call	1022c10 <__umodsi3>
 1021b74:	1004943a 	slli	r2,r2,16
 1021b78:	9808d43a 	srli	r4,r19,16
 1021b7c:	8f2d383a 	mul	r22,r17,fp
 1021b80:	d9800317 	ldw	r6,12(sp)
 1021b84:	1106b03a 	or	r3,r2,r4
 1021b88:	1d80062e 	bgeu	r3,r22,1021ba4 <__divdf3+0x3b4>
 1021b8c:	1c07883a 	add	r3,r3,r16
 1021b90:	88bfffc4 	addi	r2,r17,-1
 1021b94:	1c00dc36 	bltu	r3,r16,1021f08 <__divdf3+0x718>
 1021b98:	1d80db2e 	bgeu	r3,r22,1021f08 <__divdf3+0x718>
 1021b9c:	8c7fff84 	addi	r17,r17,-2
 1021ba0:	1c07883a 	add	r3,r3,r16
 1021ba4:	1dadc83a 	sub	r22,r3,r22
 1021ba8:	b009883a 	mov	r4,r22
 1021bac:	b80b883a 	mov	r5,r23
 1021bb0:	d9800315 	stw	r6,12(sp)
 1021bb4:	1022c080 	call	1022c08 <__udivsi3>
 1021bb8:	b009883a 	mov	r4,r22
 1021bbc:	b80b883a 	mov	r5,r23
 1021bc0:	d8800015 	stw	r2,0(sp)
 1021bc4:	1022c100 	call	1022c10 <__umodsi3>
 1021bc8:	da400017 	ldw	r9,0(sp)
 1021bcc:	1004943a 	slli	r2,r2,16
 1021bd0:	9cffffcc 	andi	r19,r19,65535
 1021bd4:	4f07383a 	mul	r3,r9,fp
 1021bd8:	14c8b03a 	or	r4,r2,r19
 1021bdc:	d9800317 	ldw	r6,12(sp)
 1021be0:	20c0062e 	bgeu	r4,r3,1021bfc <__divdf3+0x40c>
 1021be4:	2409883a 	add	r4,r4,r16
 1021be8:	48bfffc4 	addi	r2,r9,-1
 1021bec:	2400c436 	bltu	r4,r16,1021f00 <__divdf3+0x710>
 1021bf0:	20c0c32e 	bgeu	r4,r3,1021f00 <__divdf3+0x710>
 1021bf4:	4a7fff84 	addi	r9,r9,-2
 1021bf8:	2409883a 	add	r4,r4,r16
 1021bfc:	8822943a 	slli	r17,r17,16
 1021c00:	a80ed43a 	srli	r7,r21,16
 1021c04:	aa3fffcc 	andi	r8,r21,65535
 1021c08:	4c62b03a 	or	r17,r9,r17
 1021c0c:	8816d43a 	srli	r11,r17,16
 1021c10:	897fffcc 	andi	r5,r17,65535
 1021c14:	2a15383a 	mul	r10,r5,r8
 1021c18:	5a19383a 	mul	r12,r11,r8
 1021c1c:	29cb383a 	mul	r5,r5,r7
 1021c20:	5012d43a 	srli	r9,r10,16
 1021c24:	20c5c83a 	sub	r2,r4,r3
 1021c28:	614b883a 	add	r5,r12,r5
 1021c2c:	2a4b883a 	add	r5,r5,r9
 1021c30:	59c7383a 	mul	r3,r11,r7
 1021c34:	2b00022e 	bgeu	r5,r12,1021c40 <__divdf3+0x450>
 1021c38:	01000074 	movhi	r4,1
 1021c3c:	1907883a 	add	r3,r3,r4
 1021c40:	2808d43a 	srli	r4,r5,16
 1021c44:	280a943a 	slli	r5,r5,16
 1021c48:	54ffffcc 	andi	r19,r10,65535
 1021c4c:	1907883a 	add	r3,r3,r4
 1021c50:	2ccb883a 	add	r5,r5,r19
 1021c54:	10c09336 	bltu	r2,r3,1021ea4 <__divdf3+0x6b4>
 1021c58:	10c0ad26 	beq	r2,r3,1021f10 <__divdf3+0x720>
 1021c5c:	10c7c83a 	sub	r3,r2,r3
 1021c60:	3167c83a 	sub	r19,r6,r5
 1021c64:	34ed803a 	cmpltu	r22,r6,r19
 1021c68:	1dadc83a 	sub	r22,r3,r22
 1021c6c:	b400b226 	beq	r22,r16,1021f38 <__divdf3+0x748>
 1021c70:	b009883a 	mov	r4,r22
 1021c74:	b80b883a 	mov	r5,r23
 1021c78:	d9c00115 	stw	r7,4(sp)
 1021c7c:	da000215 	stw	r8,8(sp)
 1021c80:	1022c080 	call	1022c08 <__udivsi3>
 1021c84:	b009883a 	mov	r4,r22
 1021c88:	b80b883a 	mov	r5,r23
 1021c8c:	d8800315 	stw	r2,12(sp)
 1021c90:	1022c100 	call	1022c10 <__umodsi3>
 1021c94:	d9800317 	ldw	r6,12(sp)
 1021c98:	1004943a 	slli	r2,r2,16
 1021c9c:	9808d43a 	srli	r4,r19,16
 1021ca0:	372d383a 	mul	r22,r6,fp
 1021ca4:	d9c00117 	ldw	r7,4(sp)
 1021ca8:	1106b03a 	or	r3,r2,r4
 1021cac:	da000217 	ldw	r8,8(sp)
 1021cb0:	1d80062e 	bgeu	r3,r22,1021ccc <__divdf3+0x4dc>
 1021cb4:	1c07883a 	add	r3,r3,r16
 1021cb8:	30bfffc4 	addi	r2,r6,-1
 1021cbc:	1c00a036 	bltu	r3,r16,1021f40 <__divdf3+0x750>
 1021cc0:	1d809f2e 	bgeu	r3,r22,1021f40 <__divdf3+0x750>
 1021cc4:	31bfff84 	addi	r6,r6,-2
 1021cc8:	1c07883a 	add	r3,r3,r16
 1021ccc:	1dadc83a 	sub	r22,r3,r22
 1021cd0:	b009883a 	mov	r4,r22
 1021cd4:	b80b883a 	mov	r5,r23
 1021cd8:	d9800315 	stw	r6,12(sp)
 1021cdc:	d9c00115 	stw	r7,4(sp)
 1021ce0:	da000215 	stw	r8,8(sp)
 1021ce4:	1022c080 	call	1022c08 <__udivsi3>
 1021ce8:	b009883a 	mov	r4,r22
 1021cec:	b80b883a 	mov	r5,r23
 1021cf0:	d8800015 	stw	r2,0(sp)
 1021cf4:	1022c100 	call	1022c10 <__umodsi3>
 1021cf8:	da400017 	ldw	r9,0(sp)
 1021cfc:	1004943a 	slli	r2,r2,16
 1021d00:	993fffcc 	andi	r4,r19,65535
 1021d04:	4f39383a 	mul	fp,r9,fp
 1021d08:	1106b03a 	or	r3,r2,r4
 1021d0c:	d9800317 	ldw	r6,12(sp)
 1021d10:	d9c00117 	ldw	r7,4(sp)
 1021d14:	da000217 	ldw	r8,8(sp)
 1021d18:	1f00062e 	bgeu	r3,fp,1021d34 <__divdf3+0x544>
 1021d1c:	1c07883a 	add	r3,r3,r16
 1021d20:	48bfffc4 	addi	r2,r9,-1
 1021d24:	1c008836 	bltu	r3,r16,1021f48 <__divdf3+0x758>
 1021d28:	1f00872e 	bgeu	r3,fp,1021f48 <__divdf3+0x758>
 1021d2c:	4a7fff84 	addi	r9,r9,-2
 1021d30:	1c07883a 	add	r3,r3,r16
 1021d34:	3008943a 	slli	r4,r6,16
 1021d38:	1f07c83a 	sub	r3,r3,fp
 1021d3c:	4926b03a 	or	r19,r9,r4
 1021d40:	993fffcc 	andi	r4,r19,65535
 1021d44:	980cd43a 	srli	r6,r19,16
 1021d48:	220b383a 	mul	r5,r4,r8
 1021d4c:	21c5383a 	mul	r2,r4,r7
 1021d50:	3211383a 	mul	r8,r6,r8
 1021d54:	2808d43a 	srli	r4,r5,16
 1021d58:	31cf383a 	mul	r7,r6,r7
 1021d5c:	4085883a 	add	r2,r8,r2
 1021d60:	1105883a 	add	r2,r2,r4
 1021d64:	1200022e 	bgeu	r2,r8,1021d70 <__divdf3+0x580>
 1021d68:	01000074 	movhi	r4,1
 1021d6c:	390f883a 	add	r7,r7,r4
 1021d70:	1008d43a 	srli	r4,r2,16
 1021d74:	1004943a 	slli	r2,r2,16
 1021d78:	297fffcc 	andi	r5,r5,65535
 1021d7c:	390f883a 	add	r7,r7,r4
 1021d80:	1145883a 	add	r2,r2,r5
 1021d84:	19c06536 	bltu	r3,r7,1021f1c <__divdf3+0x72c>
 1021d88:	19c09f26 	beq	r3,r7,1022008 <__divdf3+0x818>
 1021d8c:	9cc00054 	ori	r19,r19,1
 1021d90:	a100ffc4 	addi	r4,r20,1023
 1021d94:	013f500e 	bge	zero,r4,1021ad8 <__alt_data_end+0xfffe4618>
 1021d98:	988001cc 	andi	r2,r19,7
 1021d9c:	10000726 	beq	r2,zero,1021dbc <__divdf3+0x5cc>
 1021da0:	98c003cc 	andi	r3,r19,15
 1021da4:	00800104 	movi	r2,4
 1021da8:	18800426 	beq	r3,r2,1021dbc <__divdf3+0x5cc>
 1021dac:	9885883a 	add	r2,r19,r2
 1021db0:	14e1803a 	cmpltu	r16,r2,r19
 1021db4:	8c23883a 	add	r17,r17,r16
 1021db8:	1027883a 	mov	r19,r2
 1021dbc:	8880402c 	andhi	r2,r17,256
 1021dc0:	10000426 	beq	r2,zero,1021dd4 <__divdf3+0x5e4>
 1021dc4:	00bfc034 	movhi	r2,65280
 1021dc8:	10bfffc4 	addi	r2,r2,-1
 1021dcc:	a1010004 	addi	r4,r20,1024
 1021dd0:	88a2703a 	and	r17,r17,r2
 1021dd4:	0081ff84 	movi	r2,2046
 1021dd8:	113edf16 	blt	r2,r4,1021958 <__alt_data_end+0xfffe4498>
 1021ddc:	9826d0fa 	srli	r19,r19,3
 1021de0:	8804977a 	slli	r2,r17,29
 1021de4:	8820927a 	slli	r16,r17,9
 1021de8:	2101ffcc 	andi	r4,r4,2047
 1021dec:	14e6b03a 	or	r19,r2,r19
 1021df0:	800ad33a 	srli	r5,r16,12
 1021df4:	9180004c 	andi	r6,r18,1
 1021df8:	003edb06 	br	1021968 <__alt_data_end+0xfffe44a8>
 1021dfc:	008000c4 	movi	r2,3
 1021e00:	4080a826 	beq	r8,r2,10220a4 <__divdf3+0x8b4>
 1021e04:	00800044 	movi	r2,1
 1021e08:	4080551e 	bne	r8,r2,1021f60 <__divdf3+0x770>
 1021e0c:	e00d883a 	mov	r6,fp
 1021e10:	0009883a 	mov	r4,zero
 1021e14:	000b883a 	mov	r5,zero
 1021e18:	0027883a 	mov	r19,zero
 1021e1c:	003ed206 	br	1021968 <__alt_data_end+0xfffe44a8>
 1021e20:	00800434 	movhi	r2,16
 1021e24:	89400234 	orhi	r5,r17,8
 1021e28:	10bfffc4 	addi	r2,r2,-1
 1021e2c:	b00d883a 	mov	r6,r22
 1021e30:	288a703a 	and	r5,r5,r2
 1021e34:	003f2606 	br	1021ad0 <__alt_data_end+0xfffe4610>
 1021e38:	d9800315 	stw	r6,12(sp)
 1021e3c:	d9c00115 	stw	r7,4(sp)
 1021e40:	1022a880 	call	1022a88 <__clzsi2>
 1021e44:	10c00804 	addi	r3,r2,32
 1021e48:	010009c4 	movi	r4,39
 1021e4c:	d9800317 	ldw	r6,12(sp)
 1021e50:	d9c00117 	ldw	r7,4(sp)
 1021e54:	20fee30e 	bge	r4,r3,10219e4 <__alt_data_end+0xfffe4524>
 1021e58:	117ffe04 	addi	r5,r2,-8
 1021e5c:	9162983a 	sll	r17,r18,r5
 1021e60:	0027883a 	mov	r19,zero
 1021e64:	003ee606 	br	1021a00 <__alt_data_end+0xfffe4540>
 1021e68:	3009883a 	mov	r4,r6
 1021e6c:	d9800315 	stw	r6,12(sp)
 1021e70:	da000215 	stw	r8,8(sp)
 1021e74:	da400015 	stw	r9,0(sp)
 1021e78:	1022a880 	call	1022a88 <__clzsi2>
 1021e7c:	10c00804 	addi	r3,r2,32
 1021e80:	010009c4 	movi	r4,39
 1021e84:	d9800317 	ldw	r6,12(sp)
 1021e88:	da000217 	ldw	r8,8(sp)
 1021e8c:	da400017 	ldw	r9,0(sp)
 1021e90:	20fef20e 	bge	r4,r3,1021a5c <__alt_data_end+0xfffe459c>
 1021e94:	10bffe04 	addi	r2,r2,-8
 1021e98:	a8a0983a 	sll	r16,r21,r2
 1021e9c:	002b883a 	mov	r21,zero
 1021ea0:	003ef506 	br	1021a78 <__alt_data_end+0xfffe45b8>
 1021ea4:	354d883a 	add	r6,r6,r21
 1021ea8:	3549803a 	cmpltu	r4,r6,r21
 1021eac:	2409883a 	add	r4,r4,r16
 1021eb0:	2089883a 	add	r4,r4,r2
 1021eb4:	88bfffc4 	addi	r2,r17,-1
 1021eb8:	81000c2e 	bgeu	r16,r4,1021eec <__divdf3+0x6fc>
 1021ebc:	20c04436 	bltu	r4,r3,1021fd0 <__divdf3+0x7e0>
 1021ec0:	19006f26 	beq	r3,r4,1022080 <__divdf3+0x890>
 1021ec4:	20c7c83a 	sub	r3,r4,r3
 1021ec8:	1023883a 	mov	r17,r2
 1021ecc:	003f6406 	br	1021c60 <__alt_data_end+0xfffe47a0>
 1021ed0:	9d7f1736 	bltu	r19,r21,1021b30 <__alt_data_end+0xfffe4670>
 1021ed4:	9806d07a 	srli	r3,r19,1
 1021ed8:	880497fa 	slli	r2,r17,31
 1021edc:	980c97fa 	slli	r6,r19,31
 1021ee0:	882cd07a 	srli	r22,r17,1
 1021ee4:	18a6b03a 	or	r19,r3,r2
 1021ee8:	003f1406 	br	1021b3c <__alt_data_end+0xfffe467c>
 1021eec:	243ff51e 	bne	r4,r16,1021ec4 <__alt_data_end+0xfffe4a04>
 1021ef0:	357ff22e 	bgeu	r6,r21,1021ebc <__alt_data_end+0xfffe49fc>
 1021ef4:	80c7c83a 	sub	r3,r16,r3
 1021ef8:	1023883a 	mov	r17,r2
 1021efc:	003f5806 	br	1021c60 <__alt_data_end+0xfffe47a0>
 1021f00:	1013883a 	mov	r9,r2
 1021f04:	003f3d06 	br	1021bfc <__alt_data_end+0xfffe473c>
 1021f08:	1023883a 	mov	r17,r2
 1021f0c:	003f2506 	br	1021ba4 <__alt_data_end+0xfffe46e4>
 1021f10:	317fe436 	bltu	r6,r5,1021ea4 <__alt_data_end+0xfffe49e4>
 1021f14:	0007883a 	mov	r3,zero
 1021f18:	003f5106 	br	1021c60 <__alt_data_end+0xfffe47a0>
 1021f1c:	1c07883a 	add	r3,r3,r16
 1021f20:	993fffc4 	addi	r4,r19,-1
 1021f24:	1c000a2e 	bgeu	r3,r16,1021f50 <__divdf3+0x760>
 1021f28:	2027883a 	mov	r19,r4
 1021f2c:	19ff971e 	bne	r3,r7,1021d8c <__alt_data_end+0xfffe48cc>
 1021f30:	a8bf961e 	bne	r21,r2,1021d8c <__alt_data_end+0xfffe48cc>
 1021f34:	003f9606 	br	1021d90 <__alt_data_end+0xfffe48d0>
 1021f38:	04ffffc4 	movi	r19,-1
 1021f3c:	003f9406 	br	1021d90 <__alt_data_end+0xfffe48d0>
 1021f40:	100d883a 	mov	r6,r2
 1021f44:	003f6106 	br	1021ccc <__alt_data_end+0xfffe480c>
 1021f48:	1013883a 	mov	r9,r2
 1021f4c:	003f7906 	br	1021d34 <__alt_data_end+0xfffe4874>
 1021f50:	19c02636 	bltu	r3,r7,1021fec <__divdf3+0x7fc>
 1021f54:	38c04d26 	beq	r7,r3,102208c <__divdf3+0x89c>
 1021f58:	2027883a 	mov	r19,r4
 1021f5c:	003f8b06 	br	1021d8c <__alt_data_end+0xfffe48cc>
 1021f60:	e025883a 	mov	r18,fp
 1021f64:	003f8a06 	br	1021d90 <__alt_data_end+0xfffe48d0>
 1021f68:	008007c4 	movi	r2,31
 1021f6c:	14002a16 	blt	r2,r16,1022018 <__divdf3+0x828>
 1021f70:	a5010784 	addi	r20,r20,1054
 1021f74:	8d04983a 	sll	r2,r17,r20
 1021f78:	9c06d83a 	srl	r3,r19,r16
 1021f7c:	9d28983a 	sll	r20,r19,r20
 1021f80:	8c20d83a 	srl	r16,r17,r16
 1021f84:	1886b03a 	or	r3,r3,r2
 1021f88:	a004c03a 	cmpne	r2,r20,zero
 1021f8c:	1884b03a 	or	r2,r3,r2
 1021f90:	10c001cc 	andi	r3,r2,7
 1021f94:	18000726 	beq	r3,zero,1021fb4 <__divdf3+0x7c4>
 1021f98:	110003cc 	andi	r4,r2,15
 1021f9c:	00c00104 	movi	r3,4
 1021fa0:	20c00426 	beq	r4,r3,1021fb4 <__divdf3+0x7c4>
 1021fa4:	10c00104 	addi	r3,r2,4
 1021fa8:	1885803a 	cmpltu	r2,r3,r2
 1021fac:	80a1883a 	add	r16,r16,r2
 1021fb0:	1805883a 	mov	r2,r3
 1021fb4:	80c0202c 	andhi	r3,r16,128
 1021fb8:	18002d26 	beq	r3,zero,1022070 <__divdf3+0x880>
 1021fbc:	9180004c 	andi	r6,r18,1
 1021fc0:	01000044 	movi	r4,1
 1021fc4:	000b883a 	mov	r5,zero
 1021fc8:	0027883a 	mov	r19,zero
 1021fcc:	003e6606 	br	1021968 <__alt_data_end+0xfffe44a8>
 1021fd0:	354d883a 	add	r6,r6,r21
 1021fd4:	356d803a 	cmpltu	r22,r6,r21
 1021fd8:	b42d883a 	add	r22,r22,r16
 1021fdc:	b12d883a 	add	r22,r22,r4
 1021fe0:	8c7fff84 	addi	r17,r17,-2
 1021fe4:	b0c7c83a 	sub	r3,r22,r3
 1021fe8:	003f1d06 	br	1021c60 <__alt_data_end+0xfffe47a0>
 1021fec:	ad4b883a 	add	r5,r21,r21
 1021ff0:	2d6b803a 	cmpltu	r21,r5,r21
 1021ff4:	ac2b883a 	add	r21,r21,r16
 1021ff8:	1d47883a 	add	r3,r3,r21
 1021ffc:	993fff84 	addi	r4,r19,-2
 1022000:	282b883a 	mov	r21,r5
 1022004:	003fc806 	br	1021f28 <__alt_data_end+0xfffe4a68>
 1022008:	103fc41e 	bne	r2,zero,1021f1c <__alt_data_end+0xfffe4a5c>
 102200c:	002b883a 	mov	r21,zero
 1022010:	a8bf5e1e 	bne	r21,r2,1021d8c <__alt_data_end+0xfffe48cc>
 1022014:	003f5e06 	br	1021d90 <__alt_data_end+0xfffe48d0>
 1022018:	00bef884 	movi	r2,-1054
 102201c:	1505c83a 	sub	r2,r2,r20
 1022020:	00c00804 	movi	r3,32
 1022024:	8884d83a 	srl	r2,r17,r2
 1022028:	80c01c26 	beq	r16,r3,102209c <__divdf3+0x8ac>
 102202c:	a0c10f84 	addi	r3,r20,1086
 1022030:	88c6983a 	sll	r3,r17,r3
 1022034:	1cc6b03a 	or	r3,r3,r19
 1022038:	1806c03a 	cmpne	r3,r3,zero
 102203c:	1884b03a 	or	r2,r3,r2
 1022040:	140001cc 	andi	r16,r2,7
 1022044:	8000061e 	bne	r16,zero,1022060 <__divdf3+0x870>
 1022048:	000b883a 	mov	r5,zero
 102204c:	1004d0fa 	srli	r2,r2,3
 1022050:	9180004c 	andi	r6,r18,1
 1022054:	0009883a 	mov	r4,zero
 1022058:	1426b03a 	or	r19,r2,r16
 102205c:	003e4206 	br	1021968 <__alt_data_end+0xfffe44a8>
 1022060:	110003cc 	andi	r4,r2,15
 1022064:	00c00104 	movi	r3,4
 1022068:	0021883a 	mov	r16,zero
 102206c:	20ffcd1e 	bne	r4,r3,1021fa4 <__alt_data_end+0xfffe4ae4>
 1022070:	800a927a 	slli	r5,r16,9
 1022074:	8020977a 	slli	r16,r16,29
 1022078:	280ad33a 	srli	r5,r5,12
 102207c:	003ff306 	br	102204c <__alt_data_end+0xfffe4b8c>
 1022080:	317fd336 	bltu	r6,r5,1021fd0 <__alt_data_end+0xfffe4b10>
 1022084:	1023883a 	mov	r17,r2
 1022088:	003fa206 	br	1021f14 <__alt_data_end+0xfffe4a54>
 102208c:	a8bfd736 	bltu	r21,r2,1021fec <__alt_data_end+0xfffe4b2c>
 1022090:	2027883a 	mov	r19,r4
 1022094:	a8bf3d1e 	bne	r21,r2,1021d8c <__alt_data_end+0xfffe48cc>
 1022098:	003f3d06 	br	1021d90 <__alt_data_end+0xfffe48d0>
 102209c:	0007883a 	mov	r3,zero
 10220a0:	003fe406 	br	1022034 <__alt_data_end+0xfffe4b74>
 10220a4:	00800434 	movhi	r2,16
 10220a8:	89400234 	orhi	r5,r17,8
 10220ac:	10bfffc4 	addi	r2,r2,-1
 10220b0:	e00d883a 	mov	r6,fp
 10220b4:	288a703a 	and	r5,r5,r2
 10220b8:	003e8506 	br	1021ad0 <__alt_data_end+0xfffe4610>

010220bc <__muldf3>:
 10220bc:	defff204 	addi	sp,sp,-56
 10220c0:	2804d53a 	srli	r2,r5,20
 10220c4:	dd800a15 	stw	r22,40(sp)
 10220c8:	282cd7fa 	srli	r22,r5,31
 10220cc:	dc000415 	stw	r16,16(sp)
 10220d0:	04000434 	movhi	r16,16
 10220d4:	df000c15 	stw	fp,48(sp)
 10220d8:	dd000815 	stw	r20,32(sp)
 10220dc:	dcc00715 	stw	r19,28(sp)
 10220e0:	dc800615 	stw	r18,24(sp)
 10220e4:	dc400515 	stw	r17,20(sp)
 10220e8:	843fffc4 	addi	r16,r16,-1
 10220ec:	dfc00d15 	stw	ra,52(sp)
 10220f0:	ddc00b15 	stw	r23,44(sp)
 10220f4:	dd400915 	stw	r21,36(sp)
 10220f8:	1501ffcc 	andi	r20,r2,2047
 10220fc:	2023883a 	mov	r17,r4
 1022100:	2025883a 	mov	r18,r4
 1022104:	2c20703a 	and	r16,r5,r16
 1022108:	b027883a 	mov	r19,r22
 102210c:	b7003fcc 	andi	fp,r22,255
 1022110:	a0005926 	beq	r20,zero,1022278 <__muldf3+0x1bc>
 1022114:	0081ffc4 	movi	r2,2047
 1022118:	a0803426 	beq	r20,r2,10221ec <__muldf3+0x130>
 102211c:	84000434 	orhi	r16,r16,16
 1022120:	2004d77a 	srli	r2,r4,29
 1022124:	802090fa 	slli	r16,r16,3
 1022128:	202490fa 	slli	r18,r4,3
 102212c:	a53f0044 	addi	r20,r20,-1023
 1022130:	80a0b03a 	or	r16,r16,r2
 1022134:	002b883a 	mov	r21,zero
 1022138:	0015883a 	mov	r10,zero
 102213c:	3812d53a 	srli	r9,r7,20
 1022140:	3806d7fa 	srli	r3,r7,31
 1022144:	02000434 	movhi	r8,16
 1022148:	423fffc4 	addi	r8,r8,-1
 102214c:	4941ffcc 	andi	r5,r9,2047
 1022150:	302f883a 	mov	r23,r6
 1022154:	3a22703a 	and	r17,r7,r8
 1022158:	1ac03fcc 	andi	r11,r3,255
 102215c:	28006226 	beq	r5,zero,10222e8 <__muldf3+0x22c>
 1022160:	0081ffc4 	movi	r2,2047
 1022164:	28805a26 	beq	r5,r2,10222d0 <__muldf3+0x214>
 1022168:	8a000434 	orhi	r8,r17,16
 102216c:	3004d77a 	srli	r2,r6,29
 1022170:	401090fa 	slli	r8,r8,3
 1022174:	302e90fa 	slli	r23,r6,3
 1022178:	297f0044 	addi	r5,r5,-1023
 102217c:	40a2b03a 	or	r17,r8,r2
 1022180:	0013883a 	mov	r9,zero
 1022184:	4d4cb03a 	or	r6,r9,r21
 1022188:	300c90ba 	slli	r6,r6,2
 102218c:	020040b4 	movhi	r8,258
 1022190:	42086b04 	addi	r8,r8,8620
 1022194:	320d883a 	add	r6,r6,r8
 1022198:	31800017 	ldw	r6,0(r6)
 102219c:	a14b883a 	add	r5,r20,r5
 10221a0:	1dacf03a 	xor	r22,r3,r22
 10221a4:	2b000044 	addi	r12,r5,1
 10221a8:	3000683a 	jmp	r6
 10221ac:	010223e8 	cmpgeui	r4,zero,2191
 10221b0:	010223d4 	movui	r4,2191
 10221b4:	010223d4 	movui	r4,2191
 10221b8:	010223c0 	call	10223c <__reset-0xf1ddc4>
 10221bc:	01022208 	cmpgei	r4,zero,2184
 10221c0:	01022208 	cmpgei	r4,zero,2184
 10221c4:	010223a8 	cmpgeui	r4,zero,2190
 10221c8:	010223c0 	call	10223c <__reset-0xf1ddc4>
 10221cc:	01022208 	cmpgei	r4,zero,2184
 10221d0:	010223a8 	cmpgeui	r4,zero,2190
 10221d4:	01022208 	cmpgei	r4,zero,2184
 10221d8:	010223c0 	call	10223c <__reset-0xf1ddc4>
 10221dc:	0102220c 	andi	r4,zero,2184
 10221e0:	0102220c 	andi	r4,zero,2184
 10221e4:	0102220c 	andi	r4,zero,2184
 10221e8:	010225e4 	muli	r4,zero,2199
 10221ec:	8104b03a 	or	r2,r16,r4
 10221f0:	10006a1e 	bne	r2,zero,102239c <__muldf3+0x2e0>
 10221f4:	05400204 	movi	r21,8
 10221f8:	0021883a 	mov	r16,zero
 10221fc:	0025883a 	mov	r18,zero
 1022200:	02800084 	movi	r10,2
 1022204:	003fcd06 	br	102213c <__alt_data_end+0xfffe4c7c>
 1022208:	b039883a 	mov	fp,r22
 102220c:	00800084 	movi	r2,2
 1022210:	50804e1e 	bne	r10,r2,102234c <__muldf3+0x290>
 1022214:	e4c0004c 	andi	r19,fp,1
 1022218:	0101ffc4 	movi	r4,2047
 102221c:	0021883a 	mov	r16,zero
 1022220:	0025883a 	mov	r18,zero
 1022224:	2008953a 	slli	r4,r4,20
 1022228:	98c03fcc 	andi	r3,r19,255
 102222c:	01400434 	movhi	r5,16
 1022230:	297fffc4 	addi	r5,r5,-1
 1022234:	180697fa 	slli	r3,r3,31
 1022238:	8160703a 	and	r16,r16,r5
 102223c:	8120b03a 	or	r16,r16,r4
 1022240:	80c6b03a 	or	r3,r16,r3
 1022244:	9005883a 	mov	r2,r18
 1022248:	dfc00d17 	ldw	ra,52(sp)
 102224c:	df000c17 	ldw	fp,48(sp)
 1022250:	ddc00b17 	ldw	r23,44(sp)
 1022254:	dd800a17 	ldw	r22,40(sp)
 1022258:	dd400917 	ldw	r21,36(sp)
 102225c:	dd000817 	ldw	r20,32(sp)
 1022260:	dcc00717 	ldw	r19,28(sp)
 1022264:	dc800617 	ldw	r18,24(sp)
 1022268:	dc400517 	ldw	r17,20(sp)
 102226c:	dc000417 	ldw	r16,16(sp)
 1022270:	dec00e04 	addi	sp,sp,56
 1022274:	f800283a 	ret
 1022278:	8104b03a 	or	r2,r16,r4
 102227c:	10004226 	beq	r2,zero,1022388 <__muldf3+0x2cc>
 1022280:	8000f926 	beq	r16,zero,1022668 <__muldf3+0x5ac>
 1022284:	8009883a 	mov	r4,r16
 1022288:	d9800315 	stw	r6,12(sp)
 102228c:	d9c00015 	stw	r7,0(sp)
 1022290:	1022a880 	call	1022a88 <__clzsi2>
 1022294:	d9800317 	ldw	r6,12(sp)
 1022298:	d9c00017 	ldw	r7,0(sp)
 102229c:	1007883a 	mov	r3,r2
 10222a0:	01000a04 	movi	r4,40
 10222a4:	18bffe04 	addi	r2,r3,-8
 10222a8:	20c9c83a 	sub	r4,r4,r3
 10222ac:	80a0983a 	sll	r16,r16,r2
 10222b0:	8908d83a 	srl	r4,r17,r4
 10222b4:	88a4983a 	sll	r18,r17,r2
 10222b8:	2420b03a 	or	r16,r4,r16
 10222bc:	017f0344 	movi	r5,-1011
 10222c0:	28e9c83a 	sub	r20,r5,r3
 10222c4:	002b883a 	mov	r21,zero
 10222c8:	0015883a 	mov	r10,zero
 10222cc:	003f9b06 	br	102213c <__alt_data_end+0xfffe4c7c>
 10222d0:	8984b03a 	or	r2,r17,r6
 10222d4:	10002a1e 	bne	r2,zero,1022380 <__muldf3+0x2c4>
 10222d8:	0023883a 	mov	r17,zero
 10222dc:	002f883a 	mov	r23,zero
 10222e0:	02400084 	movi	r9,2
 10222e4:	003fa706 	br	1022184 <__alt_data_end+0xfffe4cc4>
 10222e8:	8984b03a 	or	r2,r17,r6
 10222ec:	10002026 	beq	r2,zero,1022370 <__muldf3+0x2b4>
 10222f0:	8800cc26 	beq	r17,zero,1022624 <__muldf3+0x568>
 10222f4:	8809883a 	mov	r4,r17
 10222f8:	d8c00215 	stw	r3,8(sp)
 10222fc:	d9800315 	stw	r6,12(sp)
 1022300:	da800015 	stw	r10,0(sp)
 1022304:	dac00115 	stw	r11,4(sp)
 1022308:	1022a880 	call	1022a88 <__clzsi2>
 102230c:	d8c00217 	ldw	r3,8(sp)
 1022310:	d9800317 	ldw	r6,12(sp)
 1022314:	da800017 	ldw	r10,0(sp)
 1022318:	dac00117 	ldw	r11,4(sp)
 102231c:	1009883a 	mov	r4,r2
 1022320:	01400a04 	movi	r5,40
 1022324:	25fffe04 	addi	r23,r4,-8
 1022328:	290bc83a 	sub	r5,r5,r4
 102232c:	8dd0983a 	sll	r8,r17,r23
 1022330:	314ad83a 	srl	r5,r6,r5
 1022334:	35ee983a 	sll	r23,r6,r23
 1022338:	2a22b03a 	or	r17,r5,r8
 102233c:	017f0344 	movi	r5,-1011
 1022340:	290bc83a 	sub	r5,r5,r4
 1022344:	0013883a 	mov	r9,zero
 1022348:	003f8e06 	br	1022184 <__alt_data_end+0xfffe4cc4>
 102234c:	008000c4 	movi	r2,3
 1022350:	50811d26 	beq	r10,r2,10227c8 <__muldf3+0x70c>
 1022354:	00800044 	movi	r2,1
 1022358:	5080e01e 	bne	r10,r2,10226dc <__muldf3+0x620>
 102235c:	e0a6703a 	and	r19,fp,r2
 1022360:	0009883a 	mov	r4,zero
 1022364:	0021883a 	mov	r16,zero
 1022368:	0025883a 	mov	r18,zero
 102236c:	003fad06 	br	1022224 <__alt_data_end+0xfffe4d64>
 1022370:	0023883a 	mov	r17,zero
 1022374:	002f883a 	mov	r23,zero
 1022378:	02400044 	movi	r9,1
 102237c:	003f8106 	br	1022184 <__alt_data_end+0xfffe4cc4>
 1022380:	024000c4 	movi	r9,3
 1022384:	003f7f06 	br	1022184 <__alt_data_end+0xfffe4cc4>
 1022388:	05400104 	movi	r21,4
 102238c:	0021883a 	mov	r16,zero
 1022390:	0025883a 	mov	r18,zero
 1022394:	02800044 	movi	r10,1
 1022398:	003f6806 	br	102213c <__alt_data_end+0xfffe4c7c>
 102239c:	05400304 	movi	r21,12
 10223a0:	028000c4 	movi	r10,3
 10223a4:	003f6506 	br	102213c <__alt_data_end+0xfffe4c7c>
 10223a8:	04000434 	movhi	r16,16
 10223ac:	0027883a 	mov	r19,zero
 10223b0:	843fffc4 	addi	r16,r16,-1
 10223b4:	04bfffc4 	movi	r18,-1
 10223b8:	0101ffc4 	movi	r4,2047
 10223bc:	003f9906 	br	1022224 <__alt_data_end+0xfffe4d64>
 10223c0:	8821883a 	mov	r16,r17
 10223c4:	b825883a 	mov	r18,r23
 10223c8:	5839883a 	mov	fp,r11
 10223cc:	4815883a 	mov	r10,r9
 10223d0:	003f8e06 	br	102220c <__alt_data_end+0xfffe4d4c>
 10223d4:	8821883a 	mov	r16,r17
 10223d8:	b825883a 	mov	r18,r23
 10223dc:	b039883a 	mov	fp,r22
 10223e0:	4815883a 	mov	r10,r9
 10223e4:	003f8906 	br	102220c <__alt_data_end+0xfffe4d4c>
 10223e8:	b80cd43a 	srli	r6,r23,16
 10223ec:	9006d43a 	srli	r3,r18,16
 10223f0:	90bfffcc 	andi	r2,r18,65535
 10223f4:	bdffffcc 	andi	r23,r23,65535
 10223f8:	b891383a 	mul	r8,r23,r2
 10223fc:	b8c9383a 	mul	r4,r23,r3
 1022400:	309b383a 	mul	r13,r6,r2
 1022404:	400ed43a 	srli	r7,r8,16
 1022408:	30df383a 	mul	r15,r6,r3
 102240c:	235b883a 	add	r13,r4,r13
 1022410:	69db883a 	add	r13,r13,r7
 1022414:	6900022e 	bgeu	r13,r4,1022420 <__muldf3+0x364>
 1022418:	01000074 	movhi	r4,1
 102241c:	791f883a 	add	r15,r15,r4
 1022420:	8828d43a 	srli	r20,r17,16
 1022424:	8c7fffcc 	andi	r17,r17,65535
 1022428:	888f383a 	mul	r7,r17,r2
 102242c:	88d3383a 	mul	r9,r17,r3
 1022430:	a0a5383a 	mul	r18,r20,r2
 1022434:	3816d43a 	srli	r11,r7,16
 1022438:	6814943a 	slli	r10,r13,16
 102243c:	4ca5883a 	add	r18,r9,r18
 1022440:	423fffcc 	andi	r8,r8,65535
 1022444:	92e5883a 	add	r18,r18,r11
 1022448:	6808d43a 	srli	r4,r13,16
 102244c:	5215883a 	add	r10,r10,r8
 1022450:	a0c7383a 	mul	r3,r20,r3
 1022454:	9240022e 	bgeu	r18,r9,1022460 <__muldf3+0x3a4>
 1022458:	00800074 	movhi	r2,1
 102245c:	1887883a 	add	r3,r3,r2
 1022460:	802ad43a 	srli	r21,r16,16
 1022464:	80bfffcc 	andi	r2,r16,65535
 1022468:	b893383a 	mul	r9,r23,r2
 102246c:	3091383a 	mul	r8,r6,r2
 1022470:	bd6f383a 	mul	r23,r23,r21
 1022474:	9026943a 	slli	r19,r18,16
 1022478:	481ad43a 	srli	r13,r9,16
 102247c:	9024d43a 	srli	r18,r18,16
 1022480:	39ffffcc 	andi	r7,r7,65535
 1022484:	ba11883a 	add	r8,r23,r8
 1022488:	99e7883a 	add	r19,r19,r7
 102248c:	4351883a 	add	r8,r8,r13
 1022490:	1c97883a 	add	r11,r3,r18
 1022494:	354d383a 	mul	r6,r6,r21
 1022498:	9925883a 	add	r18,r19,r4
 102249c:	45c0022e 	bgeu	r8,r23,10224a8 <__muldf3+0x3ec>
 10224a0:	00c00074 	movhi	r3,1
 10224a4:	30cd883a 	add	r6,r6,r3
 10224a8:	8889383a 	mul	r4,r17,r2
 10224ac:	8d63383a 	mul	r17,r17,r21
 10224b0:	a085383a 	mul	r2,r20,r2
 10224b4:	200ed43a 	srli	r7,r4,16
 10224b8:	401cd43a 	srli	r14,r8,16
 10224bc:	401a943a 	slli	r13,r8,16
 10224c0:	8885883a 	add	r2,r17,r2
 10224c4:	4a3fffcc 	andi	r8,r9,65535
 10224c8:	11c5883a 	add	r2,r2,r7
 10224cc:	339d883a 	add	r14,r6,r14
 10224d0:	6a11883a 	add	r8,r13,r8
 10224d4:	a561383a 	mul	r16,r20,r21
 10224d8:	1440022e 	bgeu	r2,r17,10224e4 <__muldf3+0x428>
 10224dc:	00c00074 	movhi	r3,1
 10224e0:	80e1883a 	add	r16,r16,r3
 10224e4:	1006943a 	slli	r3,r2,16
 10224e8:	213fffcc 	andi	r4,r4,65535
 10224ec:	93db883a 	add	r13,r18,r15
 10224f0:	1909883a 	add	r4,r3,r4
 10224f4:	22c7883a 	add	r3,r4,r11
 10224f8:	6cd3803a 	cmpltu	r9,r13,r19
 10224fc:	6a09883a 	add	r4,r13,r8
 1022500:	1a5b883a 	add	r13,r3,r9
 1022504:	2211803a 	cmpltu	r8,r4,r8
 1022508:	734d883a 	add	r6,r14,r13
 102250c:	100ed43a 	srli	r7,r2,16
 1022510:	6a53803a 	cmpltu	r9,r13,r9
 1022514:	3205883a 	add	r2,r6,r8
 1022518:	1ac7803a 	cmpltu	r3,r3,r11
 102251c:	1211803a 	cmpltu	r8,r2,r8
 1022520:	48c6b03a 	or	r3,r9,r3
 1022524:	338d803a 	cmpltu	r6,r6,r14
 1022528:	19c7883a 	add	r3,r3,r7
 102252c:	418cb03a 	or	r6,r8,r6
 1022530:	1987883a 	add	r3,r3,r6
 1022534:	2024927a 	slli	r18,r4,9
 1022538:	1c07883a 	add	r3,r3,r16
 102253c:	1806927a 	slli	r3,r3,9
 1022540:	1020d5fa 	srli	r16,r2,23
 1022544:	2008d5fa 	srli	r4,r4,23
 1022548:	9294b03a 	or	r10,r18,r10
 102254c:	1004927a 	slli	r2,r2,9
 1022550:	5024c03a 	cmpne	r18,r10,zero
 1022554:	1c20b03a 	or	r16,r3,r16
 1022558:	9108b03a 	or	r4,r18,r4
 102255c:	80c0402c 	andhi	r3,r16,256
 1022560:	20a4b03a 	or	r18,r4,r2
 1022564:	18000726 	beq	r3,zero,1022584 <__muldf3+0x4c8>
 1022568:	9006d07a 	srli	r3,r18,1
 102256c:	800897fa 	slli	r4,r16,31
 1022570:	9080004c 	andi	r2,r18,1
 1022574:	8020d07a 	srli	r16,r16,1
 1022578:	10c4b03a 	or	r2,r2,r3
 102257c:	1124b03a 	or	r18,r2,r4
 1022580:	600b883a 	mov	r5,r12
 1022584:	2900ffc4 	addi	r4,r5,1023
 1022588:	01004b0e 	bge	zero,r4,10226b8 <__muldf3+0x5fc>
 102258c:	908001cc 	andi	r2,r18,7
 1022590:	10000726 	beq	r2,zero,10225b0 <__muldf3+0x4f4>
 1022594:	90c003cc 	andi	r3,r18,15
 1022598:	00800104 	movi	r2,4
 102259c:	18800426 	beq	r3,r2,10225b0 <__muldf3+0x4f4>
 10225a0:	9087883a 	add	r3,r18,r2
 10225a4:	1c85803a 	cmpltu	r2,r3,r18
 10225a8:	80a1883a 	add	r16,r16,r2
 10225ac:	1825883a 	mov	r18,r3
 10225b0:	8080402c 	andhi	r2,r16,256
 10225b4:	10000426 	beq	r2,zero,10225c8 <__muldf3+0x50c>
 10225b8:	00bfc034 	movhi	r2,65280
 10225bc:	10bfffc4 	addi	r2,r2,-1
 10225c0:	29010004 	addi	r4,r5,1024
 10225c4:	80a0703a 	and	r16,r16,r2
 10225c8:	0081ff84 	movi	r2,2046
 10225cc:	1100320e 	bge	r2,r4,1022698 <__muldf3+0x5dc>
 10225d0:	b4c0004c 	andi	r19,r22,1
 10225d4:	0101ffc4 	movi	r4,2047
 10225d8:	0021883a 	mov	r16,zero
 10225dc:	0025883a 	mov	r18,zero
 10225e0:	003f1006 	br	1022224 <__alt_data_end+0xfffe4d64>
 10225e4:	8080022c 	andhi	r2,r16,8
 10225e8:	10000926 	beq	r2,zero,1022610 <__muldf3+0x554>
 10225ec:	8880022c 	andhi	r2,r17,8
 10225f0:	1000071e 	bne	r2,zero,1022610 <__muldf3+0x554>
 10225f4:	00800434 	movhi	r2,16
 10225f8:	8c000234 	orhi	r16,r17,8
 10225fc:	10bfffc4 	addi	r2,r2,-1
 1022600:	1827883a 	mov	r19,r3
 1022604:	80a0703a 	and	r16,r16,r2
 1022608:	b825883a 	mov	r18,r23
 102260c:	003f6a06 	br	10223b8 <__alt_data_end+0xfffe4ef8>
 1022610:	00800434 	movhi	r2,16
 1022614:	84000234 	orhi	r16,r16,8
 1022618:	10bfffc4 	addi	r2,r2,-1
 102261c:	80a0703a 	and	r16,r16,r2
 1022620:	003f6506 	br	10223b8 <__alt_data_end+0xfffe4ef8>
 1022624:	3009883a 	mov	r4,r6
 1022628:	d8c00215 	stw	r3,8(sp)
 102262c:	d9800315 	stw	r6,12(sp)
 1022630:	da800015 	stw	r10,0(sp)
 1022634:	dac00115 	stw	r11,4(sp)
 1022638:	1022a880 	call	1022a88 <__clzsi2>
 102263c:	11000804 	addi	r4,r2,32
 1022640:	014009c4 	movi	r5,39
 1022644:	d8c00217 	ldw	r3,8(sp)
 1022648:	d9800317 	ldw	r6,12(sp)
 102264c:	da800017 	ldw	r10,0(sp)
 1022650:	dac00117 	ldw	r11,4(sp)
 1022654:	293f320e 	bge	r5,r4,1022320 <__alt_data_end+0xfffe4e60>
 1022658:	10bffe04 	addi	r2,r2,-8
 102265c:	b8a2983a 	sll	r17,r23,r2
 1022660:	002f883a 	mov	r23,zero
 1022664:	003f3506 	br	102233c <__alt_data_end+0xfffe4e7c>
 1022668:	d9800315 	stw	r6,12(sp)
 102266c:	d9c00015 	stw	r7,0(sp)
 1022670:	1022a880 	call	1022a88 <__clzsi2>
 1022674:	10c00804 	addi	r3,r2,32
 1022678:	010009c4 	movi	r4,39
 102267c:	d9800317 	ldw	r6,12(sp)
 1022680:	d9c00017 	ldw	r7,0(sp)
 1022684:	20ff060e 	bge	r4,r3,10222a0 <__alt_data_end+0xfffe4de0>
 1022688:	10bffe04 	addi	r2,r2,-8
 102268c:	88a0983a 	sll	r16,r17,r2
 1022690:	0025883a 	mov	r18,zero
 1022694:	003f0906 	br	10222bc <__alt_data_end+0xfffe4dfc>
 1022698:	9004d0fa 	srli	r2,r18,3
 102269c:	8024977a 	slli	r18,r16,29
 10226a0:	8020927a 	slli	r16,r16,9
 10226a4:	2101ffcc 	andi	r4,r4,2047
 10226a8:	90a4b03a 	or	r18,r18,r2
 10226ac:	8020d33a 	srli	r16,r16,12
 10226b0:	b4c0004c 	andi	r19,r22,1
 10226b4:	003edb06 	br	1022224 <__alt_data_end+0xfffe4d64>
 10226b8:	00ff0084 	movi	r3,-1022
 10226bc:	1947c83a 	sub	r3,r3,r5
 10226c0:	00800e04 	movi	r2,56
 10226c4:	10c0080e 	bge	r2,r3,10226e8 <__muldf3+0x62c>
 10226c8:	b4c0004c 	andi	r19,r22,1
 10226cc:	0009883a 	mov	r4,zero
 10226d0:	0021883a 	mov	r16,zero
 10226d4:	0025883a 	mov	r18,zero
 10226d8:	003ed206 	br	1022224 <__alt_data_end+0xfffe4d64>
 10226dc:	600b883a 	mov	r5,r12
 10226e0:	e02d883a 	mov	r22,fp
 10226e4:	003fa706 	br	1022584 <__alt_data_end+0xfffe50c4>
 10226e8:	008007c4 	movi	r2,31
 10226ec:	10c01816 	blt	r2,r3,1022750 <__muldf3+0x694>
 10226f0:	29410784 	addi	r5,r5,1054
 10226f4:	8144983a 	sll	r2,r16,r5
 10226f8:	90c8d83a 	srl	r4,r18,r3
 10226fc:	914a983a 	sll	r5,r18,r5
 1022700:	80c6d83a 	srl	r3,r16,r3
 1022704:	2088b03a 	or	r4,r4,r2
 1022708:	2804c03a 	cmpne	r2,r5,zero
 102270c:	2084b03a 	or	r2,r4,r2
 1022710:	110001cc 	andi	r4,r2,7
 1022714:	20000726 	beq	r4,zero,1022734 <__muldf3+0x678>
 1022718:	114003cc 	andi	r5,r2,15
 102271c:	01000104 	movi	r4,4
 1022720:	29000426 	beq	r5,r4,1022734 <__muldf3+0x678>
 1022724:	11000104 	addi	r4,r2,4
 1022728:	2085803a 	cmpltu	r2,r4,r2
 102272c:	1887883a 	add	r3,r3,r2
 1022730:	2005883a 	mov	r2,r4
 1022734:	1900202c 	andhi	r4,r3,128
 1022738:	20001826 	beq	r4,zero,102279c <__muldf3+0x6e0>
 102273c:	b4c0004c 	andi	r19,r22,1
 1022740:	01000044 	movi	r4,1
 1022744:	0021883a 	mov	r16,zero
 1022748:	0025883a 	mov	r18,zero
 102274c:	003eb506 	br	1022224 <__alt_data_end+0xfffe4d64>
 1022750:	00bef884 	movi	r2,-1054
 1022754:	1145c83a 	sub	r2,r2,r5
 1022758:	8088d83a 	srl	r4,r16,r2
 102275c:	00800804 	movi	r2,32
 1022760:	18801726 	beq	r3,r2,10227c0 <__muldf3+0x704>
 1022764:	28810f84 	addi	r2,r5,1086
 1022768:	8084983a 	sll	r2,r16,r2
 102276c:	1484b03a 	or	r2,r2,r18
 1022770:	1004c03a 	cmpne	r2,r2,zero
 1022774:	1104b03a 	or	r2,r2,r4
 1022778:	10c001cc 	andi	r3,r2,7
 102277c:	18000b1e 	bne	r3,zero,10227ac <__muldf3+0x6f0>
 1022780:	0021883a 	mov	r16,zero
 1022784:	1004d0fa 	srli	r2,r2,3
 1022788:	b4c0004c 	andi	r19,r22,1
 102278c:	0009883a 	mov	r4,zero
 1022790:	10e4b03a 	or	r18,r2,r3
 1022794:	003ea306 	br	1022224 <__alt_data_end+0xfffe4d64>
 1022798:	0007883a 	mov	r3,zero
 102279c:	1820927a 	slli	r16,r3,9
 10227a0:	1806977a 	slli	r3,r3,29
 10227a4:	8020d33a 	srli	r16,r16,12
 10227a8:	003ff606 	br	1022784 <__alt_data_end+0xfffe52c4>
 10227ac:	110003cc 	andi	r4,r2,15
 10227b0:	00c00104 	movi	r3,4
 10227b4:	20fff826 	beq	r4,r3,1022798 <__alt_data_end+0xfffe52d8>
 10227b8:	0007883a 	mov	r3,zero
 10227bc:	003fd906 	br	1022724 <__alt_data_end+0xfffe5264>
 10227c0:	0005883a 	mov	r2,zero
 10227c4:	003fe906 	br	102276c <__alt_data_end+0xfffe52ac>
 10227c8:	00800434 	movhi	r2,16
 10227cc:	84000234 	orhi	r16,r16,8
 10227d0:	10bfffc4 	addi	r2,r2,-1
 10227d4:	e4c0004c 	andi	r19,fp,1
 10227d8:	80a0703a 	and	r16,r16,r2
 10227dc:	003ef606 	br	10223b8 <__alt_data_end+0xfffe4ef8>

010227e0 <__extendsfdf2>:
 10227e0:	200ad5fa 	srli	r5,r4,23
 10227e4:	defffd04 	addi	sp,sp,-12
 10227e8:	dc400115 	stw	r17,4(sp)
 10227ec:	29403fcc 	andi	r5,r5,255
 10227f0:	29800044 	addi	r6,r5,1
 10227f4:	04402034 	movhi	r17,128
 10227f8:	dc000015 	stw	r16,0(sp)
 10227fc:	8c7fffc4 	addi	r17,r17,-1
 1022800:	dfc00215 	stw	ra,8(sp)
 1022804:	31803fcc 	andi	r6,r6,255
 1022808:	00800044 	movi	r2,1
 102280c:	8922703a 	and	r17,r17,r4
 1022810:	2020d7fa 	srli	r16,r4,31
 1022814:	1180110e 	bge	r2,r6,102285c <__extendsfdf2+0x7c>
 1022818:	880ed0fa 	srli	r7,r17,3
 102281c:	8822977a 	slli	r17,r17,29
 1022820:	2940e004 	addi	r5,r5,896
 1022824:	2941ffcc 	andi	r5,r5,2047
 1022828:	280c953a 	slli	r6,r5,20
 102282c:	01400434 	movhi	r5,16
 1022830:	800697fa 	slli	r3,r16,31
 1022834:	297fffc4 	addi	r5,r5,-1
 1022838:	394a703a 	and	r5,r7,r5
 102283c:	298ab03a 	or	r5,r5,r6
 1022840:	8805883a 	mov	r2,r17
 1022844:	28c6b03a 	or	r3,r5,r3
 1022848:	dfc00217 	ldw	ra,8(sp)
 102284c:	dc400117 	ldw	r17,4(sp)
 1022850:	dc000017 	ldw	r16,0(sp)
 1022854:	dec00304 	addi	sp,sp,12
 1022858:	f800283a 	ret
 102285c:	2800111e 	bne	r5,zero,10228a4 <__extendsfdf2+0xc4>
 1022860:	88001c26 	beq	r17,zero,10228d4 <__extendsfdf2+0xf4>
 1022864:	8809883a 	mov	r4,r17
 1022868:	1022a880 	call	1022a88 <__clzsi2>
 102286c:	00c00284 	movi	r3,10
 1022870:	18801b16 	blt	r3,r2,10228e0 <__extendsfdf2+0x100>
 1022874:	01c002c4 	movi	r7,11
 1022878:	388fc83a 	sub	r7,r7,r2
 102287c:	10c00544 	addi	r3,r2,21
 1022880:	89ced83a 	srl	r7,r17,r7
 1022884:	88e2983a 	sll	r17,r17,r3
 1022888:	0180e244 	movi	r6,905
 102288c:	308bc83a 	sub	r5,r6,r2
 1022890:	01800434 	movhi	r6,16
 1022894:	31bfffc4 	addi	r6,r6,-1
 1022898:	398e703a 	and	r7,r7,r6
 102289c:	2941ffcc 	andi	r5,r5,2047
 10228a0:	003fe006 	br	1022824 <__alt_data_end+0xfffe5364>
 10228a4:	88000826 	beq	r17,zero,10228c8 <__extendsfdf2+0xe8>
 10228a8:	880ed0fa 	srli	r7,r17,3
 10228ac:	00800434 	movhi	r2,16
 10228b0:	10bfffc4 	addi	r2,r2,-1
 10228b4:	39c00234 	orhi	r7,r7,8
 10228b8:	8822977a 	slli	r17,r17,29
 10228bc:	388e703a 	and	r7,r7,r2
 10228c0:	0141ffc4 	movi	r5,2047
 10228c4:	003fd706 	br	1022824 <__alt_data_end+0xfffe5364>
 10228c8:	0141ffc4 	movi	r5,2047
 10228cc:	000f883a 	mov	r7,zero
 10228d0:	003fd406 	br	1022824 <__alt_data_end+0xfffe5364>
 10228d4:	000b883a 	mov	r5,zero
 10228d8:	000f883a 	mov	r7,zero
 10228dc:	003fd106 	br	1022824 <__alt_data_end+0xfffe5364>
 10228e0:	11fffd44 	addi	r7,r2,-11
 10228e4:	89ce983a 	sll	r7,r17,r7
 10228e8:	0023883a 	mov	r17,zero
 10228ec:	003fe606 	br	1022888 <__alt_data_end+0xfffe53c8>

010228f0 <__truncdfsf2>:
 10228f0:	2810d53a 	srli	r8,r5,20
 10228f4:	01c00434 	movhi	r7,16
 10228f8:	39ffffc4 	addi	r7,r7,-1
 10228fc:	29ce703a 	and	r7,r5,r7
 1022900:	380e90fa 	slli	r7,r7,3
 1022904:	4201ffcc 	andi	r8,r8,2047
 1022908:	200cd77a 	srli	r6,r4,29
 102290c:	42400044 	addi	r9,r8,1
 1022910:	4a41ffcc 	andi	r9,r9,2047
 1022914:	00800044 	movi	r2,1
 1022918:	398cb03a 	or	r6,r7,r6
 102291c:	280ad7fa 	srli	r5,r5,31
 1022920:	200e90fa 	slli	r7,r4,3
 1022924:	1240230e 	bge	r2,r9,10229b4 <__truncdfsf2+0xc4>
 1022928:	40ff2004 	addi	r3,r8,-896
 102292c:	00803f84 	movi	r2,254
 1022930:	10c01516 	blt	r2,r3,1022988 <__truncdfsf2+0x98>
 1022934:	00c02d0e 	bge	zero,r3,10229ec <__truncdfsf2+0xfc>
 1022938:	200891ba 	slli	r4,r4,6
 102293c:	300c90fa 	slli	r6,r6,3
 1022940:	380ed77a 	srli	r7,r7,29
 1022944:	2008c03a 	cmpne	r4,r4,zero
 1022948:	310cb03a 	or	r6,r6,r4
 102294c:	31ccb03a 	or	r6,r6,r7
 1022950:	308001cc 	andi	r2,r6,7
 1022954:	10000426 	beq	r2,zero,1022968 <__truncdfsf2+0x78>
 1022958:	310003cc 	andi	r4,r6,15
 102295c:	00800104 	movi	r2,4
 1022960:	20800126 	beq	r4,r2,1022968 <__truncdfsf2+0x78>
 1022964:	31800104 	addi	r6,r6,4
 1022968:	3081002c 	andhi	r2,r6,1024
 102296c:	10002326 	beq	r2,zero,10229fc <__truncdfsf2+0x10c>
 1022970:	18c00044 	addi	r3,r3,1
 1022974:	00803fc4 	movi	r2,255
 1022978:	18800326 	beq	r3,r2,1022988 <__truncdfsf2+0x98>
 102297c:	300c91ba 	slli	r6,r6,6
 1022980:	300cd27a 	srli	r6,r6,9
 1022984:	00000206 	br	1022990 <__truncdfsf2+0xa0>
 1022988:	00ffffc4 	movi	r3,-1
 102298c:	000d883a 	mov	r6,zero
 1022990:	18c03fcc 	andi	r3,r3,255
 1022994:	180895fa 	slli	r4,r3,23
 1022998:	00c02034 	movhi	r3,128
 102299c:	280a97fa 	slli	r5,r5,31
 10229a0:	18ffffc4 	addi	r3,r3,-1
 10229a4:	30c6703a 	and	r3,r6,r3
 10229a8:	1906b03a 	or	r3,r3,r4
 10229ac:	1944b03a 	or	r2,r3,r5
 10229b0:	f800283a 	ret
 10229b4:	4000071e 	bne	r8,zero,10229d4 <__truncdfsf2+0xe4>
 10229b8:	31ccb03a 	or	r6,r6,r7
 10229bc:	30000d1e 	bne	r6,zero,10229f4 <__truncdfsf2+0x104>
 10229c0:	0007883a 	mov	r3,zero
 10229c4:	00802034 	movhi	r2,128
 10229c8:	10bfffc4 	addi	r2,r2,-1
 10229cc:	308c703a 	and	r6,r6,r2
 10229d0:	003fef06 	br	1022990 <__alt_data_end+0xfffe54d0>
 10229d4:	31c8b03a 	or	r4,r6,r7
 10229d8:	203feb26 	beq	r4,zero,1022988 <__alt_data_end+0xfffe54c8>
 10229dc:	300c90fa 	slli	r6,r6,3
 10229e0:	00c03fc4 	movi	r3,255
 10229e4:	31808034 	orhi	r6,r6,512
 10229e8:	003fd906 	br	1022950 <__alt_data_end+0xfffe5490>
 10229ec:	00bffa44 	movi	r2,-23
 10229f0:	1880090e 	bge	r3,r2,1022a18 <__truncdfsf2+0x128>
 10229f4:	01800144 	movi	r6,5
 10229f8:	0007883a 	mov	r3,zero
 10229fc:	00803fc4 	movi	r2,255
 1022a00:	300cd0fa 	srli	r6,r6,3
 1022a04:	18bfef1e 	bne	r3,r2,10229c4 <__alt_data_end+0xfffe5504>
 1022a08:	303fdf26 	beq	r6,zero,1022988 <__alt_data_end+0xfffe54c8>
 1022a0c:	31801034 	orhi	r6,r6,64
 1022a10:	00ffffc4 	movi	r3,-1
 1022a14:	003feb06 	br	10229c4 <__alt_data_end+0xfffe5504>
 1022a18:	0080e784 	movi	r2,926
 1022a1c:	1205c83a 	sub	r2,r2,r8
 1022a20:	00c007c4 	movi	r3,31
 1022a24:	31802034 	orhi	r6,r6,128
 1022a28:	18800916 	blt	r3,r2,1022a50 <__truncdfsf2+0x160>
 1022a2c:	423f2084 	addi	r8,r8,-894
 1022a30:	3a06983a 	sll	r3,r7,r8
 1022a34:	3210983a 	sll	r8,r6,r8
 1022a38:	388ed83a 	srl	r7,r7,r2
 1022a3c:	180cc03a 	cmpne	r6,r3,zero
 1022a40:	418cb03a 	or	r6,r8,r6
 1022a44:	31ccb03a 	or	r6,r6,r7
 1022a48:	0007883a 	mov	r3,zero
 1022a4c:	003fc006 	br	1022950 <__alt_data_end+0xfffe5490>
 1022a50:	00c0df84 	movi	r3,894
 1022a54:	1a07c83a 	sub	r3,r3,r8
 1022a58:	01000804 	movi	r4,32
 1022a5c:	30c6d83a 	srl	r3,r6,r3
 1022a60:	11000726 	beq	r2,r4,1022a80 <__truncdfsf2+0x190>
 1022a64:	423f2884 	addi	r8,r8,-862
 1022a68:	3210983a 	sll	r8,r6,r8
 1022a6c:	41ceb03a 	or	r7,r8,r7
 1022a70:	380ec03a 	cmpne	r7,r7,zero
 1022a74:	38ccb03a 	or	r6,r7,r3
 1022a78:	0007883a 	mov	r3,zero
 1022a7c:	003fb406 	br	1022950 <__alt_data_end+0xfffe5490>
 1022a80:	0011883a 	mov	r8,zero
 1022a84:	003ff906 	br	1022a6c <__alt_data_end+0xfffe55ac>

01022a88 <__clzsi2>:
 1022a88:	00bfffd4 	movui	r2,65535
 1022a8c:	11000b36 	bltu	r2,r4,1022abc <__clzsi2+0x34>
 1022a90:	00803fc4 	movi	r2,255
 1022a94:	1100122e 	bgeu	r2,r4,1022ae0 <__clzsi2+0x58>
 1022a98:	00c00204 	movi	r3,8
 1022a9c:	01400604 	movi	r5,24
 1022aa0:	20c8d83a 	srl	r4,r4,r3
 1022aa4:	008040f4 	movhi	r2,259
 1022aa8:	10824b04 	addi	r2,r2,2348
 1022aac:	1109883a 	add	r4,r2,r4
 1022ab0:	20800003 	ldbu	r2,0(r4)
 1022ab4:	2885c83a 	sub	r2,r5,r2
 1022ab8:	f800283a 	ret
 1022abc:	00804034 	movhi	r2,256
 1022ac0:	10bfffc4 	addi	r2,r2,-1
 1022ac4:	11000336 	bltu	r2,r4,1022ad4 <__clzsi2+0x4c>
 1022ac8:	00c00404 	movi	r3,16
 1022acc:	180b883a 	mov	r5,r3
 1022ad0:	003ff306 	br	1022aa0 <__alt_data_end+0xfffe55e0>
 1022ad4:	00c00604 	movi	r3,24
 1022ad8:	01400204 	movi	r5,8
 1022adc:	003ff006 	br	1022aa0 <__alt_data_end+0xfffe55e0>
 1022ae0:	0007883a 	mov	r3,zero
 1022ae4:	01400804 	movi	r5,32
 1022ae8:	003fed06 	br	1022aa0 <__alt_data_end+0xfffe55e0>

01022aec <udivmodsi4>:
 1022aec:	2900182e 	bgeu	r5,r4,1022b50 <udivmodsi4+0x64>
 1022af0:	28001716 	blt	r5,zero,1022b50 <udivmodsi4+0x64>
 1022af4:	00800804 	movi	r2,32
 1022af8:	00c00044 	movi	r3,1
 1022afc:	00000206 	br	1022b08 <udivmodsi4+0x1c>
 1022b00:	10001126 	beq	r2,zero,1022b48 <udivmodsi4+0x5c>
 1022b04:	28000516 	blt	r5,zero,1022b1c <udivmodsi4+0x30>
 1022b08:	294b883a 	add	r5,r5,r5
 1022b0c:	10bfffc4 	addi	r2,r2,-1
 1022b10:	18c7883a 	add	r3,r3,r3
 1022b14:	293ffa36 	bltu	r5,r4,1022b00 <__alt_data_end+0xfffe5640>
 1022b18:	18000b26 	beq	r3,zero,1022b48 <udivmodsi4+0x5c>
 1022b1c:	0005883a 	mov	r2,zero
 1022b20:	21400236 	bltu	r4,r5,1022b2c <udivmodsi4+0x40>
 1022b24:	2149c83a 	sub	r4,r4,r5
 1022b28:	10c4b03a 	or	r2,r2,r3
 1022b2c:	1806d07a 	srli	r3,r3,1
 1022b30:	280ad07a 	srli	r5,r5,1
 1022b34:	183ffa1e 	bne	r3,zero,1022b20 <__alt_data_end+0xfffe5660>
 1022b38:	3000011e 	bne	r6,zero,1022b40 <udivmodsi4+0x54>
 1022b3c:	f800283a 	ret
 1022b40:	2005883a 	mov	r2,r4
 1022b44:	f800283a 	ret
 1022b48:	0005883a 	mov	r2,zero
 1022b4c:	003ffa06 	br	1022b38 <__alt_data_end+0xfffe5678>
 1022b50:	00c00044 	movi	r3,1
 1022b54:	003ff106 	br	1022b1c <__alt_data_end+0xfffe565c>

01022b58 <__divsi3>:
 1022b58:	defffe04 	addi	sp,sp,-8
 1022b5c:	dfc00115 	stw	ra,4(sp)
 1022b60:	dc000015 	stw	r16,0(sp)
 1022b64:	20000b16 	blt	r4,zero,1022b94 <__divsi3+0x3c>
 1022b68:	0021883a 	mov	r16,zero
 1022b6c:	28000c16 	blt	r5,zero,1022ba0 <__divsi3+0x48>
 1022b70:	000d883a 	mov	r6,zero
 1022b74:	1022aec0 	call	1022aec <udivmodsi4>
 1022b78:	0407c83a 	sub	r3,zero,r16
 1022b7c:	1884f03a 	xor	r2,r3,r2
 1022b80:	1405883a 	add	r2,r2,r16
 1022b84:	dfc00117 	ldw	ra,4(sp)
 1022b88:	dc000017 	ldw	r16,0(sp)
 1022b8c:	dec00204 	addi	sp,sp,8
 1022b90:	f800283a 	ret
 1022b94:	0109c83a 	sub	r4,zero,r4
 1022b98:	04000044 	movi	r16,1
 1022b9c:	283ff40e 	bge	r5,zero,1022b70 <__alt_data_end+0xfffe56b0>
 1022ba0:	014bc83a 	sub	r5,zero,r5
 1022ba4:	8400005c 	xori	r16,r16,1
 1022ba8:	003ff106 	br	1022b70 <__alt_data_end+0xfffe56b0>

01022bac <__modsi3>:
 1022bac:	defffd04 	addi	sp,sp,-12
 1022bb0:	dfc00215 	stw	ra,8(sp)
 1022bb4:	dc400115 	stw	r17,4(sp)
 1022bb8:	dc000015 	stw	r16,0(sp)
 1022bbc:	20000c16 	blt	r4,zero,1022bf0 <__modsi3+0x44>
 1022bc0:	0023883a 	mov	r17,zero
 1022bc4:	0021883a 	mov	r16,zero
 1022bc8:	28000d16 	blt	r5,zero,1022c00 <__modsi3+0x54>
 1022bcc:	01800044 	movi	r6,1
 1022bd0:	1022aec0 	call	1022aec <udivmodsi4>
 1022bd4:	1404f03a 	xor	r2,r2,r16
 1022bd8:	8885883a 	add	r2,r17,r2
 1022bdc:	dfc00217 	ldw	ra,8(sp)
 1022be0:	dc400117 	ldw	r17,4(sp)
 1022be4:	dc000017 	ldw	r16,0(sp)
 1022be8:	dec00304 	addi	sp,sp,12
 1022bec:	f800283a 	ret
 1022bf0:	0109c83a 	sub	r4,zero,r4
 1022bf4:	04400044 	movi	r17,1
 1022bf8:	043fffc4 	movi	r16,-1
 1022bfc:	283ff30e 	bge	r5,zero,1022bcc <__alt_data_end+0xfffe570c>
 1022c00:	014bc83a 	sub	r5,zero,r5
 1022c04:	003ff106 	br	1022bcc <__alt_data_end+0xfffe570c>

01022c08 <__udivsi3>:
 1022c08:	000d883a 	mov	r6,zero
 1022c0c:	1022aec1 	jmpi	1022aec <udivmodsi4>

01022c10 <__umodsi3>:
 1022c10:	01800044 	movi	r6,1
 1022c14:	1022aec1 	jmpi	1022aec <udivmodsi4>

01022c18 <_printf_r>:
 1022c18:	defffd04 	addi	sp,sp,-12
 1022c1c:	dfc00015 	stw	ra,0(sp)
 1022c20:	d9800115 	stw	r6,4(sp)
 1022c24:	d9c00215 	stw	r7,8(sp)
 1022c28:	280d883a 	mov	r6,r5
 1022c2c:	21400217 	ldw	r5,8(r4)
 1022c30:	d9c00104 	addi	r7,sp,4
 1022c34:	1022de40 	call	1022de4 <___vfprintf_internal_r>
 1022c38:	dfc00017 	ldw	ra,0(sp)
 1022c3c:	dec00304 	addi	sp,sp,12
 1022c40:	f800283a 	ret

01022c44 <printf>:
 1022c44:	defffc04 	addi	sp,sp,-16
 1022c48:	dfc00015 	stw	ra,0(sp)
 1022c4c:	d9400115 	stw	r5,4(sp)
 1022c50:	d9800215 	stw	r6,8(sp)
 1022c54:	d9c00315 	stw	r7,12(sp)
 1022c58:	008040f4 	movhi	r2,259
 1022c5c:	1089b504 	addi	r2,r2,9940
 1022c60:	10800017 	ldw	r2,0(r2)
 1022c64:	200b883a 	mov	r5,r4
 1022c68:	d9800104 	addi	r6,sp,4
 1022c6c:	11000217 	ldw	r4,8(r2)
 1022c70:	1024de00 	call	1024de0 <__vfprintf_internal>
 1022c74:	dfc00017 	ldw	ra,0(sp)
 1022c78:	dec00404 	addi	sp,sp,16
 1022c7c:	f800283a 	ret

01022c80 <_puts_r>:
 1022c80:	defff604 	addi	sp,sp,-40
 1022c84:	dc000715 	stw	r16,28(sp)
 1022c88:	2021883a 	mov	r16,r4
 1022c8c:	2809883a 	mov	r4,r5
 1022c90:	dc400815 	stw	r17,32(sp)
 1022c94:	dfc00915 	stw	ra,36(sp)
 1022c98:	2823883a 	mov	r17,r5
 1022c9c:	1022d4c0 	call	1022d4c <strlen>
 1022ca0:	00c040f4 	movhi	r3,259
 1022ca4:	18c9b504 	addi	r3,r3,9940
 1022ca8:	18c00017 	ldw	r3,0(r3)
 1022cac:	11000044 	addi	r4,r2,1
 1022cb0:	d8800115 	stw	r2,4(sp)
 1022cb4:	18c00217 	ldw	r3,8(r3)
 1022cb8:	014040f4 	movhi	r5,259
 1022cbc:	29428b04 	addi	r5,r5,2604
 1022cc0:	1880030b 	ldhu	r2,12(r3)
 1022cc4:	d9400215 	stw	r5,8(sp)
 1022cc8:	d9000615 	stw	r4,24(sp)
 1022ccc:	01400044 	movi	r5,1
 1022cd0:	01000084 	movi	r4,2
 1022cd4:	d9000515 	stw	r4,20(sp)
 1022cd8:	dc400015 	stw	r17,0(sp)
 1022cdc:	d9400315 	stw	r5,12(sp)
 1022ce0:	dec00415 	stw	sp,16(sp)
 1022ce4:	1108000c 	andi	r4,r2,8192
 1022ce8:	2000061e 	bne	r4,zero,1022d04 <_puts_r+0x84>
 1022cec:	19401917 	ldw	r5,100(r3)
 1022cf0:	0137ffc4 	movi	r4,-8193
 1022cf4:	10880014 	ori	r2,r2,8192
 1022cf8:	2908703a 	and	r4,r5,r4
 1022cfc:	1880030d 	sth	r2,12(r3)
 1022d00:	19001915 	stw	r4,100(r3)
 1022d04:	81400217 	ldw	r5,8(r16)
 1022d08:	8009883a 	mov	r4,r16
 1022d0c:	d9800404 	addi	r6,sp,16
 1022d10:	10272680 	call	1027268 <__sfvwrite_r>
 1022d14:	1000061e 	bne	r2,zero,1022d30 <_puts_r+0xb0>
 1022d18:	00800284 	movi	r2,10
 1022d1c:	dfc00917 	ldw	ra,36(sp)
 1022d20:	dc400817 	ldw	r17,32(sp)
 1022d24:	dc000717 	ldw	r16,28(sp)
 1022d28:	dec00a04 	addi	sp,sp,40
 1022d2c:	f800283a 	ret
 1022d30:	00bfffc4 	movi	r2,-1
 1022d34:	003ff906 	br	1022d1c <__alt_data_end+0xfffe585c>

01022d38 <puts>:
 1022d38:	008040f4 	movhi	r2,259
 1022d3c:	1089b504 	addi	r2,r2,9940
 1022d40:	200b883a 	mov	r5,r4
 1022d44:	11000017 	ldw	r4,0(r2)
 1022d48:	1022c801 	jmpi	1022c80 <_puts_r>

01022d4c <strlen>:
 1022d4c:	208000cc 	andi	r2,r4,3
 1022d50:	10002026 	beq	r2,zero,1022dd4 <strlen+0x88>
 1022d54:	20800007 	ldb	r2,0(r4)
 1022d58:	10002026 	beq	r2,zero,1022ddc <strlen+0x90>
 1022d5c:	2005883a 	mov	r2,r4
 1022d60:	00000206 	br	1022d6c <strlen+0x20>
 1022d64:	10c00007 	ldb	r3,0(r2)
 1022d68:	18001826 	beq	r3,zero,1022dcc <strlen+0x80>
 1022d6c:	10800044 	addi	r2,r2,1
 1022d70:	10c000cc 	andi	r3,r2,3
 1022d74:	183ffb1e 	bne	r3,zero,1022d64 <__alt_data_end+0xfffe58a4>
 1022d78:	10c00017 	ldw	r3,0(r2)
 1022d7c:	01ffbff4 	movhi	r7,65279
 1022d80:	39ffbfc4 	addi	r7,r7,-257
 1022d84:	00ca303a 	nor	r5,zero,r3
 1022d88:	01a02074 	movhi	r6,32897
 1022d8c:	19c7883a 	add	r3,r3,r7
 1022d90:	31a02004 	addi	r6,r6,-32640
 1022d94:	1946703a 	and	r3,r3,r5
 1022d98:	1986703a 	and	r3,r3,r6
 1022d9c:	1800091e 	bne	r3,zero,1022dc4 <strlen+0x78>
 1022da0:	10800104 	addi	r2,r2,4
 1022da4:	10c00017 	ldw	r3,0(r2)
 1022da8:	19cb883a 	add	r5,r3,r7
 1022dac:	00c6303a 	nor	r3,zero,r3
 1022db0:	28c6703a 	and	r3,r5,r3
 1022db4:	1986703a 	and	r3,r3,r6
 1022db8:	183ff926 	beq	r3,zero,1022da0 <__alt_data_end+0xfffe58e0>
 1022dbc:	00000106 	br	1022dc4 <strlen+0x78>
 1022dc0:	10800044 	addi	r2,r2,1
 1022dc4:	10c00007 	ldb	r3,0(r2)
 1022dc8:	183ffd1e 	bne	r3,zero,1022dc0 <__alt_data_end+0xfffe5900>
 1022dcc:	1105c83a 	sub	r2,r2,r4
 1022dd0:	f800283a 	ret
 1022dd4:	2005883a 	mov	r2,r4
 1022dd8:	003fe706 	br	1022d78 <__alt_data_end+0xfffe58b8>
 1022ddc:	0005883a 	mov	r2,zero
 1022de0:	f800283a 	ret

01022de4 <___vfprintf_internal_r>:
 1022de4:	defeb604 	addi	sp,sp,-1320
 1022de8:	dfc14915 	stw	ra,1316(sp)
 1022dec:	ddc14715 	stw	r23,1308(sp)
 1022df0:	dd814615 	stw	r22,1304(sp)
 1022df4:	282f883a 	mov	r23,r5
 1022df8:	202d883a 	mov	r22,r4
 1022dfc:	d9812a15 	stw	r6,1192(sp)
 1022e00:	d9c12d15 	stw	r7,1204(sp)
 1022e04:	df014815 	stw	fp,1312(sp)
 1022e08:	dd414515 	stw	r21,1300(sp)
 1022e0c:	dd014415 	stw	r20,1296(sp)
 1022e10:	dcc14315 	stw	r19,1292(sp)
 1022e14:	dc814215 	stw	r18,1288(sp)
 1022e18:	dc414115 	stw	r17,1284(sp)
 1022e1c:	dc014015 	stw	r16,1280(sp)
 1022e20:	10279280 	call	1027928 <_localeconv_r>
 1022e24:	10800017 	ldw	r2,0(r2)
 1022e28:	1009883a 	mov	r4,r2
 1022e2c:	d8813515 	stw	r2,1236(sp)
 1022e30:	1022d4c0 	call	1022d4c <strlen>
 1022e34:	d8813815 	stw	r2,1248(sp)
 1022e38:	b0000226 	beq	r22,zero,1022e44 <___vfprintf_internal_r+0x60>
 1022e3c:	b0800e17 	ldw	r2,56(r22)
 1022e40:	10010426 	beq	r2,zero,1023254 <___vfprintf_internal_r+0x470>
 1022e44:	b8c0030b 	ldhu	r3,12(r23)
 1022e48:	1908000c 	andi	r4,r3,8192
 1022e4c:	1805883a 	mov	r2,r3
 1022e50:	2000071e 	bne	r4,zero,1022e70 <___vfprintf_internal_r+0x8c>
 1022e54:	b9001917 	ldw	r4,100(r23)
 1022e58:	18880014 	ori	r2,r3,8192
 1022e5c:	00f7ffc4 	movi	r3,-8193
 1022e60:	20c8703a 	and	r4,r4,r3
 1022e64:	b880030d 	sth	r2,12(r23)
 1022e68:	1007883a 	mov	r3,r2
 1022e6c:	b9001915 	stw	r4,100(r23)
 1022e70:	1100020c 	andi	r4,r2,8
 1022e74:	2000a726 	beq	r4,zero,1023114 <___vfprintf_internal_r+0x330>
 1022e78:	b9000417 	ldw	r4,16(r23)
 1022e7c:	2000a526 	beq	r4,zero,1023114 <___vfprintf_internal_r+0x330>
 1022e80:	1080068c 	andi	r2,r2,26
 1022e84:	01000284 	movi	r4,10
 1022e88:	1100ab26 	beq	r2,r4,1023138 <___vfprintf_internal_r+0x354>
 1022e8c:	dac10e04 	addi	r11,sp,1080
 1022e90:	db010dc4 	addi	r12,sp,1079
 1022e94:	d8800404 	addi	r2,sp,16
 1022e98:	050040f4 	movhi	r20,259
 1022e9c:	dac12815 	stw	r11,1184(sp)
 1022ea0:	5b17c83a 	sub	r11,r11,r12
 1022ea4:	a5029c84 	addi	r20,r20,2674
 1022ea8:	db012915 	stw	r12,1188(sp)
 1022eac:	d8811e15 	stw	r2,1144(sp)
 1022eb0:	d8012015 	stw	zero,1152(sp)
 1022eb4:	d8011f15 	stw	zero,1148(sp)
 1022eb8:	d8013315 	stw	zero,1228(sp)
 1022ebc:	d8013715 	stw	zero,1244(sp)
 1022ec0:	d8013915 	stw	zero,1252(sp)
 1022ec4:	d8013b15 	stw	zero,1260(sp)
 1022ec8:	d8013a15 	stw	zero,1256(sp)
 1022ecc:	d8012f15 	stw	zero,1212(sp)
 1022ed0:	1011883a 	mov	r8,r2
 1022ed4:	dac13c15 	stw	r11,1264(sp)
 1022ed8:	db012a17 	ldw	r12,1192(sp)
 1022edc:	60800007 	ldb	r2,0(r12)
 1022ee0:	1000df26 	beq	r2,zero,1023260 <___vfprintf_internal_r+0x47c>
 1022ee4:	00c00944 	movi	r3,37
 1022ee8:	10c0dd26 	beq	r2,r3,1023260 <___vfprintf_internal_r+0x47c>
 1022eec:	6021883a 	mov	r16,r12
 1022ef0:	00000106 	br	1022ef8 <___vfprintf_internal_r+0x114>
 1022ef4:	10c08426 	beq	r2,r3,1023108 <___vfprintf_internal_r+0x324>
 1022ef8:	84000044 	addi	r16,r16,1
 1022efc:	80800007 	ldb	r2,0(r16)
 1022f00:	103ffc1e 	bne	r2,zero,1022ef4 <__alt_data_end+0xfffe5a34>
 1022f04:	dac12a17 	ldw	r11,1192(sp)
 1022f08:	82e3c83a 	sub	r17,r16,r11
 1022f0c:	88000f26 	beq	r17,zero,1022f4c <___vfprintf_internal_r+0x168>
 1022f10:	d8c12017 	ldw	r3,1152(sp)
 1022f14:	d8811f17 	ldw	r2,1148(sp)
 1022f18:	dac12a17 	ldw	r11,1192(sp)
 1022f1c:	1c47883a 	add	r3,r3,r17
 1022f20:	10800044 	addi	r2,r2,1
 1022f24:	d8c12015 	stw	r3,1152(sp)
 1022f28:	42c00015 	stw	r11,0(r8)
 1022f2c:	44400115 	stw	r17,4(r8)
 1022f30:	d8811f15 	stw	r2,1148(sp)
 1022f34:	00c001c4 	movi	r3,7
 1022f38:	1880b416 	blt	r3,r2,102320c <___vfprintf_internal_r+0x428>
 1022f3c:	42000204 	addi	r8,r8,8
 1022f40:	db012f17 	ldw	r12,1212(sp)
 1022f44:	6459883a 	add	r12,r12,r17
 1022f48:	db012f15 	stw	r12,1212(sp)
 1022f4c:	80800007 	ldb	r2,0(r16)
 1022f50:	1000b526 	beq	r2,zero,1023228 <___vfprintf_internal_r+0x444>
 1022f54:	80800044 	addi	r2,r16,1
 1022f58:	84000047 	ldb	r16,1(r16)
 1022f5c:	d8012785 	stb	zero,1182(sp)
 1022f60:	000d883a 	mov	r6,zero
 1022f64:	027fffc4 	movi	r9,-1
 1022f68:	d8012e15 	stw	zero,1208(sp)
 1022f6c:	0023883a 	mov	r17,zero
 1022f70:	01001604 	movi	r4,88
 1022f74:	01400244 	movi	r5,9
 1022f78:	02800a84 	movi	r10,42
 1022f7c:	01c01b04 	movi	r7,108
 1022f80:	10c00044 	addi	r3,r2,1
 1022f84:	80bff804 	addi	r2,r16,-32
 1022f88:	2082f236 	bltu	r4,r2,1023b54 <___vfprintf_internal_r+0xd70>
 1022f8c:	100490ba 	slli	r2,r2,2
 1022f90:	02c040b4 	movhi	r11,258
 1022f94:	5acbe904 	addi	r11,r11,12196
 1022f98:	12c5883a 	add	r2,r2,r11
 1022f9c:	10800017 	ldw	r2,0(r2)
 1022fa0:	1000683a 	jmp	r2
 1022fa4:	0102399c 	xori	r4,zero,2278
 1022fa8:	01023b54 	movui	r4,2285
 1022fac:	01023b54 	movui	r4,2285
 1022fb0:	010239bc 	xorhi	r4,zero,2278
 1022fb4:	01023b54 	movui	r4,2285
 1022fb8:	01023b54 	movui	r4,2285
 1022fbc:	01023b54 	movui	r4,2285
 1022fc0:	01023b54 	movui	r4,2285
 1022fc4:	01023b54 	movui	r4,2285
 1022fc8:	01023b54 	movui	r4,2285
 1022fcc:	01023b18 	cmpnei	r4,zero,2284
 1022fd0:	01023b44 	movi	r4,2285
 1022fd4:	01023b54 	movui	r4,2285
 1022fd8:	01023268 	cmpgeui	r4,zero,2249
 1022fdc:	01023278 	rdprs	r4,zero,2249
 1022fe0:	01023b54 	movui	r4,2285
 1022fe4:	010232b8 	rdprs	r4,zero,2250
 1022fe8:	010237ac 	andhi	r4,zero,2270
 1022fec:	010237ac 	andhi	r4,zero,2270
 1022ff0:	010237ac 	andhi	r4,zero,2270
 1022ff4:	010237ac 	andhi	r4,zero,2270
 1022ff8:	010237ac 	andhi	r4,zero,2270
 1022ffc:	010237ac 	andhi	r4,zero,2270
 1023000:	010237ac 	andhi	r4,zero,2270
 1023004:	010237ac 	andhi	r4,zero,2270
 1023008:	010237ac 	andhi	r4,zero,2270
 102300c:	01023b54 	movui	r4,2285
 1023010:	01023b54 	movui	r4,2285
 1023014:	01023b54 	movui	r4,2285
 1023018:	01023b54 	movui	r4,2285
 102301c:	01023b54 	movui	r4,2285
 1023020:	01023b54 	movui	r4,2285
 1023024:	01023b54 	movui	r4,2285
 1023028:	01023b54 	movui	r4,2285
 102302c:	01023b54 	movui	r4,2285
 1023030:	01023b54 	movui	r4,2285
 1023034:	010237e0 	cmpeqi	r4,zero,2271
 1023038:	010232c8 	cmpgei	r4,zero,2251
 102303c:	01023b54 	movui	r4,2285
 1023040:	010232c8 	cmpgei	r4,zero,2251
 1023044:	01023b54 	movui	r4,2285
 1023048:	01023b54 	movui	r4,2285
 102304c:	01023b54 	movui	r4,2285
 1023050:	01023b54 	movui	r4,2285
 1023054:	0102336c 	andhi	r4,zero,2253
 1023058:	01023b54 	movui	r4,2285
 102305c:	01023b54 	movui	r4,2285
 1023060:	0102337c 	xorhi	r4,zero,2253
 1023064:	01023b54 	movui	r4,2285
 1023068:	01023b54 	movui	r4,2285
 102306c:	01023b54 	movui	r4,2285
 1023070:	01023b54 	movui	r4,2285
 1023074:	01023b54 	movui	r4,2285
 1023078:	01023778 	rdprs	r4,zero,2269
 102307c:	01023b54 	movui	r4,2285
 1023080:	01023b54 	movui	r4,2285
 1023084:	01023828 	cmpgeui	r4,zero,2272
 1023088:	01023b54 	movui	r4,2285
 102308c:	01023b54 	movui	r4,2285
 1023090:	01023b54 	movui	r4,2285
 1023094:	01023b54 	movui	r4,2285
 1023098:	01023b54 	movui	r4,2285
 102309c:	01023b54 	movui	r4,2285
 10230a0:	01023b54 	movui	r4,2285
 10230a4:	01023b54 	movui	r4,2285
 10230a8:	01023b54 	movui	r4,2285
 10230ac:	01023b54 	movui	r4,2285
 10230b0:	01023a1c 	xori	r4,zero,2280
 10230b4:	010239cc 	andi	r4,zero,2279
 10230b8:	010232c8 	cmpgei	r4,zero,2251
 10230bc:	010232c8 	cmpgei	r4,zero,2251
 10230c0:	010232c8 	cmpgei	r4,zero,2251
 10230c4:	01023a0c 	andi	r4,zero,2280
 10230c8:	010239cc 	andi	r4,zero,2279
 10230cc:	01023b54 	movui	r4,2285
 10230d0:	01023b54 	movui	r4,2285
 10230d4:	01023914 	movui	r4,2276
 10230d8:	01023b54 	movui	r4,2285
 10230dc:	01023928 	cmpgeui	r4,zero,2276
 10230e0:	0102395c 	xori	r4,zero,2277
 10230e4:	01023a5c 	xori	r4,zero,2281
 10230e8:	01023884 	movi	r4,2274
 10230ec:	01023b54 	movui	r4,2285
 10230f0:	01023aa4 	muli	r4,zero,2282
 10230f4:	01023b54 	movui	r4,2285
 10230f8:	01023894 	movui	r4,2274
 10230fc:	01023b54 	movui	r4,2285
 1023100:	01023b54 	movui	r4,2285
 1023104:	010238d4 	movui	r4,2275
 1023108:	db012a17 	ldw	r12,1192(sp)
 102310c:	8323c83a 	sub	r17,r16,r12
 1023110:	003f7e06 	br	1022f0c <__alt_data_end+0xfffe5a4c>
 1023114:	b009883a 	mov	r4,r22
 1023118:	b80b883a 	mov	r5,r23
 102311c:	1024e040 	call	1024e04 <__swsetup_r>
 1023120:	10002d1e 	bne	r2,zero,10231d8 <___vfprintf_internal_r+0x3f4>
 1023124:	b8c0030b 	ldhu	r3,12(r23)
 1023128:	01000284 	movi	r4,10
 102312c:	1805883a 	mov	r2,r3
 1023130:	1080068c 	andi	r2,r2,26
 1023134:	113f551e 	bne	r2,r4,1022e8c <__alt_data_end+0xfffe59cc>
 1023138:	b880038b 	ldhu	r2,14(r23)
 102313c:	113fffcc 	andi	r4,r2,65535
 1023140:	2120001c 	xori	r4,r4,32768
 1023144:	21200004 	addi	r4,r4,-32768
 1023148:	203f5016 	blt	r4,zero,1022e8c <__alt_data_end+0xfffe59cc>
 102314c:	bac01917 	ldw	r11,100(r23)
 1023150:	ba800717 	ldw	r10,28(r23)
 1023154:	ba400917 	ldw	r9,36(r23)
 1023158:	d9812a17 	ldw	r6,1192(sp)
 102315c:	d9c12d17 	ldw	r7,1204(sp)
 1023160:	02010004 	movi	r8,1024
 1023164:	18ffff4c 	andi	r3,r3,65533
 1023168:	d881078d 	sth	r2,1054(sp)
 102316c:	b009883a 	mov	r4,r22
 1023170:	d8800404 	addi	r2,sp,16
 1023174:	d9410404 	addi	r5,sp,1040
 1023178:	d8c1070d 	sth	r3,1052(sp)
 102317c:	dac11d15 	stw	r11,1140(sp)
 1023180:	da810b15 	stw	r10,1068(sp)
 1023184:	da410d15 	stw	r9,1076(sp)
 1023188:	d8810415 	stw	r2,1040(sp)
 102318c:	d8810815 	stw	r2,1056(sp)
 1023190:	da010615 	stw	r8,1048(sp)
 1023194:	da010915 	stw	r8,1060(sp)
 1023198:	d8010a15 	stw	zero,1064(sp)
 102319c:	1022de40 	call	1022de4 <___vfprintf_internal_r>
 10231a0:	1021883a 	mov	r16,r2
 10231a4:	10000416 	blt	r2,zero,10231b8 <___vfprintf_internal_r+0x3d4>
 10231a8:	b009883a 	mov	r4,r22
 10231ac:	d9410404 	addi	r5,sp,1040
 10231b0:	102685c0 	call	102685c <_fflush_r>
 10231b4:	1006ee1e 	bne	r2,zero,1024d70 <___vfprintf_internal_r+0x1f8c>
 10231b8:	d881070b 	ldhu	r2,1052(sp)
 10231bc:	1080100c 	andi	r2,r2,64
 10231c0:	10000326 	beq	r2,zero,10231d0 <___vfprintf_internal_r+0x3ec>
 10231c4:	b880030b 	ldhu	r2,12(r23)
 10231c8:	10801014 	ori	r2,r2,64
 10231cc:	b880030d 	sth	r2,12(r23)
 10231d0:	8005883a 	mov	r2,r16
 10231d4:	00000106 	br	10231dc <___vfprintf_internal_r+0x3f8>
 10231d8:	00bfffc4 	movi	r2,-1
 10231dc:	dfc14917 	ldw	ra,1316(sp)
 10231e0:	df014817 	ldw	fp,1312(sp)
 10231e4:	ddc14717 	ldw	r23,1308(sp)
 10231e8:	dd814617 	ldw	r22,1304(sp)
 10231ec:	dd414517 	ldw	r21,1300(sp)
 10231f0:	dd014417 	ldw	r20,1296(sp)
 10231f4:	dcc14317 	ldw	r19,1292(sp)
 10231f8:	dc814217 	ldw	r18,1288(sp)
 10231fc:	dc414117 	ldw	r17,1284(sp)
 1023200:	dc014017 	ldw	r16,1280(sp)
 1023204:	dec14a04 	addi	sp,sp,1320
 1023208:	f800283a 	ret
 102320c:	b009883a 	mov	r4,r22
 1023210:	b80b883a 	mov	r5,r23
 1023214:	d9811e04 	addi	r6,sp,1144
 1023218:	102a02c0 	call	102a02c <__sprint_r>
 102321c:	1000081e 	bne	r2,zero,1023240 <___vfprintf_internal_r+0x45c>
 1023220:	da000404 	addi	r8,sp,16
 1023224:	003f4606 	br	1022f40 <__alt_data_end+0xfffe5a80>
 1023228:	d8812017 	ldw	r2,1152(sp)
 102322c:	10000426 	beq	r2,zero,1023240 <___vfprintf_internal_r+0x45c>
 1023230:	b009883a 	mov	r4,r22
 1023234:	b80b883a 	mov	r5,r23
 1023238:	d9811e04 	addi	r6,sp,1144
 102323c:	102a02c0 	call	102a02c <__sprint_r>
 1023240:	b880030b 	ldhu	r2,12(r23)
 1023244:	1080100c 	andi	r2,r2,64
 1023248:	103fe31e 	bne	r2,zero,10231d8 <__alt_data_end+0xfffe5d18>
 102324c:	d8812f17 	ldw	r2,1212(sp)
 1023250:	003fe206 	br	10231dc <__alt_data_end+0xfffe5d1c>
 1023254:	b009883a 	mov	r4,r22
 1023258:	1026e040 	call	1026e04 <__sinit>
 102325c:	003ef906 	br	1022e44 <__alt_data_end+0xfffe5984>
 1023260:	dc012a17 	ldw	r16,1192(sp)
 1023264:	003f3906 	br	1022f4c <__alt_data_end+0xfffe5a8c>
 1023268:	1805883a 	mov	r2,r3
 102326c:	8c400114 	ori	r17,r17,4
 1023270:	1c000007 	ldb	r16,0(r3)
 1023274:	003f4206 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023278:	1c000007 	ldb	r16,0(r3)
 102327c:	18800044 	addi	r2,r3,1
 1023280:	8286b326 	beq	r16,r10,1024d50 <___vfprintf_internal_r+0x1f6c>
 1023284:	82fff404 	addi	r11,r16,-48
 1023288:	1007883a 	mov	r3,r2
 102328c:	0013883a 	mov	r9,zero
 1023290:	2aff3c36 	bltu	r5,r11,1022f84 <__alt_data_end+0xfffe5ac4>
 1023294:	1c000007 	ldb	r16,0(r3)
 1023298:	4a4002a4 	muli	r9,r9,10
 102329c:	18c00044 	addi	r3,r3,1
 10232a0:	5a53883a 	add	r9,r11,r9
 10232a4:	82fff404 	addi	r11,r16,-48
 10232a8:	2afffa2e 	bgeu	r5,r11,1023294 <__alt_data_end+0xfffe5dd4>
 10232ac:	483f350e 	bge	r9,zero,1022f84 <__alt_data_end+0xfffe5ac4>
 10232b0:	027fffc4 	movi	r9,-1
 10232b4:	003f3306 	br	1022f84 <__alt_data_end+0xfffe5ac4>
 10232b8:	8c402014 	ori	r17,r17,128
 10232bc:	1805883a 	mov	r2,r3
 10232c0:	1c000007 	ldb	r16,0(r3)
 10232c4:	003f2e06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 10232c8:	db012d17 	ldw	r12,1204(sp)
 10232cc:	dac12d17 	ldw	r11,1204(sp)
 10232d0:	d8c12a15 	stw	r3,1192(sp)
 10232d4:	63000017 	ldw	r12,0(r12)
 10232d8:	5ac00117 	ldw	r11,4(r11)
 10232dc:	d9812785 	stb	r6,1182(sp)
 10232e0:	6009883a 	mov	r4,r12
 10232e4:	580b883a 	mov	r5,r11
 10232e8:	db013715 	stw	r12,1244(sp)
 10232ec:	da013f15 	stw	r8,1276(sp)
 10232f0:	da413e15 	stw	r9,1272(sp)
 10232f4:	dac13915 	stw	r11,1252(sp)
 10232f8:	1029c880 	call	1029c88 <__fpclassifyd>
 10232fc:	db012d17 	ldw	r12,1204(sp)
 1023300:	04800044 	movi	r18,1
 1023304:	da013f17 	ldw	r8,1276(sp)
 1023308:	64c00204 	addi	r19,r12,8
 102330c:	da413e17 	ldw	r9,1272(sp)
 1023310:	d9013717 	ldw	r4,1244(sp)
 1023314:	d9413917 	ldw	r5,1252(sp)
 1023318:	1484581e 	bne	r2,r18,102447c <___vfprintf_internal_r+0x1698>
 102331c:	000d883a 	mov	r6,zero
 1023320:	000f883a 	mov	r7,zero
 1023324:	102d24c0 	call	102d24c <__ledf2>
 1023328:	da013f17 	ldw	r8,1276(sp)
 102332c:	1005ef16 	blt	r2,zero,1024aec <___vfprintf_internal_r+0x1d08>
 1023330:	dd412783 	ldbu	r21,1182(sp)
 1023334:	008011c4 	movi	r2,71
 1023338:	14053b0e 	bge	r2,r16,1024828 <___vfprintf_internal_r+0x1a44>
 102333c:	00c040f4 	movhi	r3,259
 1023340:	18c28d04 	addi	r3,r3,2612
 1023344:	d8c13115 	stw	r3,1220(sp)
 1023348:	02c000c4 	movi	r11,3
 102334c:	00bfdfc4 	movi	r2,-129
 1023350:	dac12b15 	stw	r11,1196(sp)
 1023354:	88a2703a 	and	r17,r17,r2
 1023358:	dcc12d15 	stw	r19,1204(sp)
 102335c:	5825883a 	mov	r18,r11
 1023360:	d8013215 	stw	zero,1224(sp)
 1023364:	d8013415 	stw	zero,1232(sp)
 1023368:	00003206 	br	1023434 <___vfprintf_internal_r+0x650>
 102336c:	8c400214 	ori	r17,r17,8
 1023370:	1805883a 	mov	r2,r3
 1023374:	1c000007 	ldb	r16,0(r3)
 1023378:	003f0106 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 102337c:	8c400414 	ori	r17,r17,16
 1023380:	d8c12a15 	stw	r3,1192(sp)
 1023384:	88c0080c 	andi	r3,r17,32
 1023388:	d8812d17 	ldw	r2,1204(sp)
 102338c:	18017726 	beq	r3,zero,102396c <___vfprintf_internal_r+0xb88>
 1023390:	db012d17 	ldw	r12,1204(sp)
 1023394:	14c00017 	ldw	r19,0(r2)
 1023398:	17000117 	ldw	fp,4(r2)
 102339c:	63000204 	addi	r12,r12,8
 10233a0:	db012d15 	stw	r12,1204(sp)
 10233a4:	0005883a 	mov	r2,zero
 10233a8:	9f06b03a 	or	r3,r19,fp
 10233ac:	d8012785 	stb	zero,1182(sp)
 10233b0:	da413215 	stw	r9,1224(sp)
 10233b4:	002b883a 	mov	r21,zero
 10233b8:	48000216 	blt	r9,zero,10233c4 <___vfprintf_internal_r+0x5e0>
 10233bc:	013fdfc4 	movi	r4,-129
 10233c0:	8922703a 	and	r17,r17,r4
 10233c4:	1801ed1e 	bne	r3,zero,1023b7c <___vfprintf_internal_r+0xd98>
 10233c8:	4802e026 	beq	r9,zero,1023f4c <___vfprintf_internal_r+0x1168>
 10233cc:	10803fcc 	andi	r2,r2,255
 10233d0:	00c00044 	movi	r3,1
 10233d4:	10c20f26 	beq	r2,r3,1023c14 <___vfprintf_internal_r+0xe30>
 10233d8:	00c00084 	movi	r3,2
 10233dc:	10c2fd26 	beq	r2,r3,1023fd4 <___vfprintf_internal_r+0x11f0>
 10233e0:	d8c10e04 	addi	r3,sp,1080
 10233e4:	9808d0fa 	srli	r4,r19,3
 10233e8:	e00a977a 	slli	r5,fp,29
 10233ec:	e038d0fa 	srli	fp,fp,3
 10233f0:	9cc001cc 	andi	r19,r19,7
 10233f4:	98800c04 	addi	r2,r19,48
 10233f8:	18ffffc4 	addi	r3,r3,-1
 10233fc:	2926b03a 	or	r19,r5,r4
 1023400:	18800005 	stb	r2,0(r3)
 1023404:	9f08b03a 	or	r4,r19,fp
 1023408:	203ff61e 	bne	r4,zero,10233e4 <__alt_data_end+0xfffe5f24>
 102340c:	8900004c 	andi	r4,r17,1
 1023410:	d8c13115 	stw	r3,1220(sp)
 1023414:	2003791e 	bne	r4,zero,10241fc <___vfprintf_internal_r+0x1418>
 1023418:	dac12817 	ldw	r11,1184(sp)
 102341c:	58e5c83a 	sub	r18,r11,r3
 1023420:	9005883a 	mov	r2,r18
 1023424:	9240010e 	bge	r18,r9,102342c <___vfprintf_internal_r+0x648>
 1023428:	4805883a 	mov	r2,r9
 102342c:	d8812b15 	stw	r2,1196(sp)
 1023430:	d8013415 	stw	zero,1232(sp)
 1023434:	a8803fcc 	andi	r2,r21,255
 1023438:	1080201c 	xori	r2,r2,128
 102343c:	10bfe004 	addi	r2,r2,-128
 1023440:	10000326 	beq	r2,zero,1023450 <___vfprintf_internal_r+0x66c>
 1023444:	db012b17 	ldw	r12,1196(sp)
 1023448:	63000044 	addi	r12,r12,1
 102344c:	db012b15 	stw	r12,1196(sp)
 1023450:	88c0008c 	andi	r3,r17,2
 1023454:	d8c12c15 	stw	r3,1200(sp)
 1023458:	18000326 	beq	r3,zero,1023468 <___vfprintf_internal_r+0x684>
 102345c:	dac12b17 	ldw	r11,1196(sp)
 1023460:	5ac00084 	addi	r11,r11,2
 1023464:	dac12b15 	stw	r11,1196(sp)
 1023468:	8b00210c 	andi	r12,r17,132
 102346c:	db013015 	stw	r12,1216(sp)
 1023470:	6001c01e 	bne	r12,zero,1023b74 <___vfprintf_internal_r+0xd90>
 1023474:	dac12e17 	ldw	r11,1208(sp)
 1023478:	db012b17 	ldw	r12,1196(sp)
 102347c:	5b39c83a 	sub	fp,r11,r12
 1023480:	0701bc0e 	bge	zero,fp,1023b74 <___vfprintf_internal_r+0xd90>
 1023484:	02400404 	movi	r9,16
 1023488:	d8c12017 	ldw	r3,1152(sp)
 102348c:	d8811f17 	ldw	r2,1148(sp)
 1023490:	4f05220e 	bge	r9,fp,102491c <___vfprintf_internal_r+0x1b38>
 1023494:	014040f4 	movhi	r5,259
 1023498:	2942a084 	addi	r5,r5,2690
 102349c:	d9413615 	stw	r5,1240(sp)
 10234a0:	482b883a 	mov	r21,r9
 10234a4:	04c001c4 	movi	r19,7
 10234a8:	00000306 	br	10234b8 <___vfprintf_internal_r+0x6d4>
 10234ac:	e73ffc04 	addi	fp,fp,-16
 10234b0:	42000204 	addi	r8,r8,8
 10234b4:	af00130e 	bge	r21,fp,1023504 <___vfprintf_internal_r+0x720>
 10234b8:	02c040f4 	movhi	r11,259
 10234bc:	18c00404 	addi	r3,r3,16
 10234c0:	10800044 	addi	r2,r2,1
 10234c4:	5ac2a084 	addi	r11,r11,2690
 10234c8:	42c00015 	stw	r11,0(r8)
 10234cc:	45400115 	stw	r21,4(r8)
 10234d0:	d8c12015 	stw	r3,1152(sp)
 10234d4:	d8811f15 	stw	r2,1148(sp)
 10234d8:	98bff40e 	bge	r19,r2,10234ac <__alt_data_end+0xfffe5fec>
 10234dc:	b009883a 	mov	r4,r22
 10234e0:	b80b883a 	mov	r5,r23
 10234e4:	d9811e04 	addi	r6,sp,1144
 10234e8:	102a02c0 	call	102a02c <__sprint_r>
 10234ec:	103f541e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10234f0:	e73ffc04 	addi	fp,fp,-16
 10234f4:	d8c12017 	ldw	r3,1152(sp)
 10234f8:	d8811f17 	ldw	r2,1148(sp)
 10234fc:	da000404 	addi	r8,sp,16
 1023500:	af3fed16 	blt	r21,fp,10234b8 <__alt_data_end+0xfffe5ff8>
 1023504:	db013617 	ldw	r12,1240(sp)
 1023508:	e0c7883a 	add	r3,fp,r3
 102350c:	10800044 	addi	r2,r2,1
 1023510:	43000015 	stw	r12,0(r8)
 1023514:	47000115 	stw	fp,4(r8)
 1023518:	d8c12015 	stw	r3,1152(sp)
 102351c:	d8811f15 	stw	r2,1148(sp)
 1023520:	010001c4 	movi	r4,7
 1023524:	2082f416 	blt	r4,r2,10240f8 <___vfprintf_internal_r+0x1314>
 1023528:	d8812787 	ldb	r2,1182(sp)
 102352c:	42000204 	addi	r8,r8,8
 1023530:	10000c26 	beq	r2,zero,1023564 <___vfprintf_internal_r+0x780>
 1023534:	d8811f17 	ldw	r2,1148(sp)
 1023538:	d9012784 	addi	r4,sp,1182
 102353c:	18c00044 	addi	r3,r3,1
 1023540:	10800044 	addi	r2,r2,1
 1023544:	41000015 	stw	r4,0(r8)
 1023548:	01000044 	movi	r4,1
 102354c:	41000115 	stw	r4,4(r8)
 1023550:	d8c12015 	stw	r3,1152(sp)
 1023554:	d8811f15 	stw	r2,1148(sp)
 1023558:	010001c4 	movi	r4,7
 102355c:	20828d16 	blt	r4,r2,1023f94 <___vfprintf_internal_r+0x11b0>
 1023560:	42000204 	addi	r8,r8,8
 1023564:	dac12c17 	ldw	r11,1200(sp)
 1023568:	58000c26 	beq	r11,zero,102359c <___vfprintf_internal_r+0x7b8>
 102356c:	d8811f17 	ldw	r2,1148(sp)
 1023570:	d9012704 	addi	r4,sp,1180
 1023574:	18c00084 	addi	r3,r3,2
 1023578:	10800044 	addi	r2,r2,1
 102357c:	41000015 	stw	r4,0(r8)
 1023580:	01000084 	movi	r4,2
 1023584:	41000115 	stw	r4,4(r8)
 1023588:	d8c12015 	stw	r3,1152(sp)
 102358c:	d8811f15 	stw	r2,1148(sp)
 1023590:	010001c4 	movi	r4,7
 1023594:	20828716 	blt	r4,r2,1023fb4 <___vfprintf_internal_r+0x11d0>
 1023598:	42000204 	addi	r8,r8,8
 102359c:	db013017 	ldw	r12,1216(sp)
 10235a0:	00802004 	movi	r2,128
 10235a4:	6081e926 	beq	r12,r2,1023d4c <___vfprintf_internal_r+0xf68>
 10235a8:	db013217 	ldw	r12,1224(sp)
 10235ac:	64abc83a 	sub	r21,r12,r18
 10235b0:	0540260e 	bge	zero,r21,102364c <___vfprintf_internal_r+0x868>
 10235b4:	07000404 	movi	fp,16
 10235b8:	d8811f17 	ldw	r2,1148(sp)
 10235bc:	e5443d0e 	bge	fp,r21,10246b4 <___vfprintf_internal_r+0x18d0>
 10235c0:	014040f4 	movhi	r5,259
 10235c4:	29429c84 	addi	r5,r5,2674
 10235c8:	d9412c15 	stw	r5,1200(sp)
 10235cc:	04c001c4 	movi	r19,7
 10235d0:	00000306 	br	10235e0 <___vfprintf_internal_r+0x7fc>
 10235d4:	ad7ffc04 	addi	r21,r21,-16
 10235d8:	42000204 	addi	r8,r8,8
 10235dc:	e540110e 	bge	fp,r21,1023624 <___vfprintf_internal_r+0x840>
 10235e0:	18c00404 	addi	r3,r3,16
 10235e4:	10800044 	addi	r2,r2,1
 10235e8:	45000015 	stw	r20,0(r8)
 10235ec:	47000115 	stw	fp,4(r8)
 10235f0:	d8c12015 	stw	r3,1152(sp)
 10235f4:	d8811f15 	stw	r2,1148(sp)
 10235f8:	98bff60e 	bge	r19,r2,10235d4 <__alt_data_end+0xfffe6114>
 10235fc:	b009883a 	mov	r4,r22
 1023600:	b80b883a 	mov	r5,r23
 1023604:	d9811e04 	addi	r6,sp,1144
 1023608:	102a02c0 	call	102a02c <__sprint_r>
 102360c:	103f0c1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023610:	ad7ffc04 	addi	r21,r21,-16
 1023614:	d8c12017 	ldw	r3,1152(sp)
 1023618:	d8811f17 	ldw	r2,1148(sp)
 102361c:	da000404 	addi	r8,sp,16
 1023620:	e57fef16 	blt	fp,r21,10235e0 <__alt_data_end+0xfffe6120>
 1023624:	dac12c17 	ldw	r11,1200(sp)
 1023628:	1d47883a 	add	r3,r3,r21
 102362c:	10800044 	addi	r2,r2,1
 1023630:	42c00015 	stw	r11,0(r8)
 1023634:	45400115 	stw	r21,4(r8)
 1023638:	d8c12015 	stw	r3,1152(sp)
 102363c:	d8811f15 	stw	r2,1148(sp)
 1023640:	010001c4 	movi	r4,7
 1023644:	20824b16 	blt	r4,r2,1023f74 <___vfprintf_internal_r+0x1190>
 1023648:	42000204 	addi	r8,r8,8
 102364c:	8880400c 	andi	r2,r17,256
 1023650:	1001761e 	bne	r2,zero,1023c2c <___vfprintf_internal_r+0xe48>
 1023654:	d8811f17 	ldw	r2,1148(sp)
 1023658:	db013117 	ldw	r12,1220(sp)
 102365c:	1c87883a 	add	r3,r3,r18
 1023660:	10800044 	addi	r2,r2,1
 1023664:	43000015 	stw	r12,0(r8)
 1023668:	44800115 	stw	r18,4(r8)
 102366c:	d8c12015 	stw	r3,1152(sp)
 1023670:	d8811f15 	stw	r2,1148(sp)
 1023674:	010001c4 	movi	r4,7
 1023678:	20822616 	blt	r4,r2,1023f14 <___vfprintf_internal_r+0x1130>
 102367c:	42000204 	addi	r8,r8,8
 1023680:	8c40010c 	andi	r17,r17,4
 1023684:	88003126 	beq	r17,zero,102374c <___vfprintf_internal_r+0x968>
 1023688:	db012e17 	ldw	r12,1208(sp)
 102368c:	dac12b17 	ldw	r11,1196(sp)
 1023690:	62e1c83a 	sub	r16,r12,r11
 1023694:	04002d0e 	bge	zero,r16,102374c <___vfprintf_internal_r+0x968>
 1023698:	04400404 	movi	r17,16
 102369c:	d8811f17 	ldw	r2,1148(sp)
 10236a0:	8c04df0e 	bge	r17,r16,1024a20 <___vfprintf_internal_r+0x1c3c>
 10236a4:	010040f4 	movhi	r4,259
 10236a8:	2102a084 	addi	r4,r4,2690
 10236ac:	d9013615 	stw	r4,1240(sp)
 10236b0:	048001c4 	movi	r18,7
 10236b4:	00000306 	br	10236c4 <___vfprintf_internal_r+0x8e0>
 10236b8:	843ffc04 	addi	r16,r16,-16
 10236bc:	42000204 	addi	r8,r8,8
 10236c0:	8c00130e 	bge	r17,r16,1023710 <___vfprintf_internal_r+0x92c>
 10236c4:	014040f4 	movhi	r5,259
 10236c8:	18c00404 	addi	r3,r3,16
 10236cc:	10800044 	addi	r2,r2,1
 10236d0:	2942a084 	addi	r5,r5,2690
 10236d4:	41400015 	stw	r5,0(r8)
 10236d8:	44400115 	stw	r17,4(r8)
 10236dc:	d8c12015 	stw	r3,1152(sp)
 10236e0:	d8811f15 	stw	r2,1148(sp)
 10236e4:	90bff40e 	bge	r18,r2,10236b8 <__alt_data_end+0xfffe61f8>
 10236e8:	b009883a 	mov	r4,r22
 10236ec:	b80b883a 	mov	r5,r23
 10236f0:	d9811e04 	addi	r6,sp,1144
 10236f4:	102a02c0 	call	102a02c <__sprint_r>
 10236f8:	103ed11e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10236fc:	843ffc04 	addi	r16,r16,-16
 1023700:	d8c12017 	ldw	r3,1152(sp)
 1023704:	d8811f17 	ldw	r2,1148(sp)
 1023708:	da000404 	addi	r8,sp,16
 102370c:	8c3fed16 	blt	r17,r16,10236c4 <__alt_data_end+0xfffe6204>
 1023710:	dac13617 	ldw	r11,1240(sp)
 1023714:	1c07883a 	add	r3,r3,r16
 1023718:	10800044 	addi	r2,r2,1
 102371c:	42c00015 	stw	r11,0(r8)
 1023720:	44000115 	stw	r16,4(r8)
 1023724:	d8c12015 	stw	r3,1152(sp)
 1023728:	d8811f15 	stw	r2,1148(sp)
 102372c:	010001c4 	movi	r4,7
 1023730:	2080060e 	bge	r4,r2,102374c <___vfprintf_internal_r+0x968>
 1023734:	b009883a 	mov	r4,r22
 1023738:	b80b883a 	mov	r5,r23
 102373c:	d9811e04 	addi	r6,sp,1144
 1023740:	102a02c0 	call	102a02c <__sprint_r>
 1023744:	103ebe1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023748:	d8c12017 	ldw	r3,1152(sp)
 102374c:	d8812b17 	ldw	r2,1196(sp)
 1023750:	db012e17 	ldw	r12,1208(sp)
 1023754:	1300010e 	bge	r2,r12,102375c <___vfprintf_internal_r+0x978>
 1023758:	6005883a 	mov	r2,r12
 102375c:	dac12f17 	ldw	r11,1212(sp)
 1023760:	5897883a 	add	r11,r11,r2
 1023764:	dac12f15 	stw	r11,1212(sp)
 1023768:	1801f21e 	bne	r3,zero,1023f34 <___vfprintf_internal_r+0x1150>
 102376c:	d8011f15 	stw	zero,1148(sp)
 1023770:	da000404 	addi	r8,sp,16
 1023774:	003dd806 	br	1022ed8 <__alt_data_end+0xfffe5a18>
 1023778:	8c400414 	ori	r17,r17,16
 102377c:	d8c12a15 	stw	r3,1192(sp)
 1023780:	88c0080c 	andi	r3,r17,32
 1023784:	d8812d17 	ldw	r2,1204(sp)
 1023788:	18004626 	beq	r3,zero,10238a4 <___vfprintf_internal_r+0xac0>
 102378c:	dac12d17 	ldw	r11,1204(sp)
 1023790:	14c00017 	ldw	r19,0(r2)
 1023794:	17000117 	ldw	fp,4(r2)
 1023798:	5ac00204 	addi	r11,r11,8
 102379c:	dac12d15 	stw	r11,1204(sp)
 10237a0:	00800044 	movi	r2,1
 10237a4:	9f06b03a 	or	r3,r19,fp
 10237a8:	003f0006 	br	10233ac <__alt_data_end+0xfffe5eec>
 10237ac:	1805883a 	mov	r2,r3
 10237b0:	d8012e15 	stw	zero,1208(sp)
 10237b4:	82fff404 	addi	r11,r16,-48
 10237b8:	0019883a 	mov	r12,zero
 10237bc:	14000007 	ldb	r16,0(r2)
 10237c0:	630002a4 	muli	r12,r12,10
 10237c4:	18c00044 	addi	r3,r3,1
 10237c8:	1805883a 	mov	r2,r3
 10237cc:	62d9883a 	add	r12,r12,r11
 10237d0:	82fff404 	addi	r11,r16,-48
 10237d4:	2afff92e 	bgeu	r5,r11,10237bc <__alt_data_end+0xfffe62fc>
 10237d8:	db012e15 	stw	r12,1208(sp)
 10237dc:	003de906 	br	1022f84 <__alt_data_end+0xfffe5ac4>
 10237e0:	8c400414 	ori	r17,r17,16
 10237e4:	d8c12a15 	stw	r3,1192(sp)
 10237e8:	d9812785 	stb	r6,1182(sp)
 10237ec:	8880080c 	andi	r2,r17,32
 10237f0:	d8c12d17 	ldw	r3,1204(sp)
 10237f4:	10007a26 	beq	r2,zero,10239e0 <___vfprintf_internal_r+0xbfc>
 10237f8:	db012d17 	ldw	r12,1204(sp)
 10237fc:	18800117 	ldw	r2,4(r3)
 1023800:	1cc00017 	ldw	r19,0(r3)
 1023804:	63000204 	addi	r12,r12,8
 1023808:	db012d15 	stw	r12,1204(sp)
 102380c:	1039883a 	mov	fp,r2
 1023810:	10031016 	blt	r2,zero,1024454 <___vfprintf_internal_r+0x1670>
 1023814:	dd412783 	ldbu	r21,1182(sp)
 1023818:	da413215 	stw	r9,1224(sp)
 102381c:	00800044 	movi	r2,1
 1023820:	9f06b03a 	or	r3,r19,fp
 1023824:	003ee406 	br	10233b8 <__alt_data_end+0xfffe5ef8>
 1023828:	030040f4 	movhi	r12,259
 102382c:	63029004 	addi	r12,r12,2624
 1023830:	d8c12a15 	stw	r3,1192(sp)
 1023834:	d9812785 	stb	r6,1182(sp)
 1023838:	db013b15 	stw	r12,1260(sp)
 102383c:	88c0080c 	andi	r3,r17,32
 1023840:	d8812d17 	ldw	r2,1204(sp)
 1023844:	18002b26 	beq	r3,zero,10238f4 <___vfprintf_internal_r+0xb10>
 1023848:	dac12d17 	ldw	r11,1204(sp)
 102384c:	14c00017 	ldw	r19,0(r2)
 1023850:	17000117 	ldw	fp,4(r2)
 1023854:	5ac00204 	addi	r11,r11,8
 1023858:	dac12d15 	stw	r11,1204(sp)
 102385c:	8880004c 	andi	r2,r17,1
 1023860:	10025b26 	beq	r2,zero,10241d0 <___vfprintf_internal_r+0x13ec>
 1023864:	9f06b03a 	or	r3,r19,fp
 1023868:	18037026 	beq	r3,zero,102462c <___vfprintf_internal_r+0x1848>
 102386c:	00800c04 	movi	r2,48
 1023870:	d8812705 	stb	r2,1180(sp)
 1023874:	dc012745 	stb	r16,1181(sp)
 1023878:	8c400094 	ori	r17,r17,2
 102387c:	00800084 	movi	r2,2
 1023880:	003eca06 	br	10233ac <__alt_data_end+0xfffe5eec>
 1023884:	8c400814 	ori	r17,r17,32
 1023888:	1805883a 	mov	r2,r3
 102388c:	1c000007 	ldb	r16,0(r3)
 1023890:	003dbb06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023894:	d8c12a15 	stw	r3,1192(sp)
 1023898:	88c0080c 	andi	r3,r17,32
 102389c:	d8812d17 	ldw	r2,1204(sp)
 10238a0:	183fba1e 	bne	r3,zero,102378c <__alt_data_end+0xfffe62cc>
 10238a4:	88c0040c 	andi	r3,r17,16
 10238a8:	18024c1e 	bne	r3,zero,10241dc <___vfprintf_internal_r+0x13f8>
 10238ac:	88c0100c 	andi	r3,r17,64
 10238b0:	18024a26 	beq	r3,zero,10241dc <___vfprintf_internal_r+0x13f8>
 10238b4:	dac12d17 	ldw	r11,1204(sp)
 10238b8:	14c0000b 	ldhu	r19,0(r2)
 10238bc:	0039883a 	mov	fp,zero
 10238c0:	5ac00104 	addi	r11,r11,4
 10238c4:	dac12d15 	stw	r11,1204(sp)
 10238c8:	00800044 	movi	r2,1
 10238cc:	9807883a 	mov	r3,r19
 10238d0:	003eb606 	br	10233ac <__alt_data_end+0xfffe5eec>
 10238d4:	008040f4 	movhi	r2,259
 10238d8:	10829504 	addi	r2,r2,2644
 10238dc:	d8c12a15 	stw	r3,1192(sp)
 10238e0:	d8813b15 	stw	r2,1260(sp)
 10238e4:	d9812785 	stb	r6,1182(sp)
 10238e8:	88c0080c 	andi	r3,r17,32
 10238ec:	d8812d17 	ldw	r2,1204(sp)
 10238f0:	183fd51e 	bne	r3,zero,1023848 <__alt_data_end+0xfffe6388>
 10238f4:	88c0040c 	andi	r3,r17,16
 10238f8:	18034126 	beq	r3,zero,1024600 <___vfprintf_internal_r+0x181c>
 10238fc:	db012d17 	ldw	r12,1204(sp)
 1023900:	14c00017 	ldw	r19,0(r2)
 1023904:	0039883a 	mov	fp,zero
 1023908:	63000104 	addi	r12,r12,4
 102390c:	db012d15 	stw	r12,1204(sp)
 1023910:	003fd206 	br	102385c <__alt_data_end+0xfffe639c>
 1023914:	1c000007 	ldb	r16,0(r3)
 1023918:	81c3d626 	beq	r16,r7,1024874 <___vfprintf_internal_r+0x1a90>
 102391c:	8c400414 	ori	r17,r17,16
 1023920:	1805883a 	mov	r2,r3
 1023924:	003d9606 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023928:	d8c12a15 	stw	r3,1192(sp)
 102392c:	d9812785 	stb	r6,1182(sp)
 1023930:	8880080c 	andi	r2,r17,32
 1023934:	10033f26 	beq	r2,zero,1024634 <___vfprintf_internal_r+0x1850>
 1023938:	db012d17 	ldw	r12,1204(sp)
 102393c:	dac12f17 	ldw	r11,1212(sp)
 1023940:	60800017 	ldw	r2,0(r12)
 1023944:	5807d7fa 	srai	r3,r11,31
 1023948:	63000104 	addi	r12,r12,4
 102394c:	db012d15 	stw	r12,1204(sp)
 1023950:	12c00015 	stw	r11,0(r2)
 1023954:	10c00115 	stw	r3,4(r2)
 1023958:	003d5f06 	br	1022ed8 <__alt_data_end+0xfffe5a18>
 102395c:	d8c12a15 	stw	r3,1192(sp)
 1023960:	88c0080c 	andi	r3,r17,32
 1023964:	d8812d17 	ldw	r2,1204(sp)
 1023968:	183e891e 	bne	r3,zero,1023390 <__alt_data_end+0xfffe5ed0>
 102396c:	88c0040c 	andi	r3,r17,16
 1023970:	1801ea1e 	bne	r3,zero,102411c <___vfprintf_internal_r+0x1338>
 1023974:	88c0100c 	andi	r3,r17,64
 1023978:	1801e826 	beq	r3,zero,102411c <___vfprintf_internal_r+0x1338>
 102397c:	db012d17 	ldw	r12,1204(sp)
 1023980:	14c0000b 	ldhu	r19,0(r2)
 1023984:	0039883a 	mov	fp,zero
 1023988:	63000104 	addi	r12,r12,4
 102398c:	db012d15 	stw	r12,1204(sp)
 1023990:	0005883a 	mov	r2,zero
 1023994:	9807883a 	mov	r3,r19
 1023998:	003e8406 	br	10233ac <__alt_data_end+0xfffe5eec>
 102399c:	30803fcc 	andi	r2,r6,255
 10239a0:	1080201c 	xori	r2,r2,128
 10239a4:	10bfe004 	addi	r2,r2,-128
 10239a8:	10031d1e 	bne	r2,zero,1024620 <___vfprintf_internal_r+0x183c>
 10239ac:	1805883a 	mov	r2,r3
 10239b0:	01800804 	movi	r6,32
 10239b4:	1c000007 	ldb	r16,0(r3)
 10239b8:	003d7106 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 10239bc:	8c400054 	ori	r17,r17,1
 10239c0:	1805883a 	mov	r2,r3
 10239c4:	1c000007 	ldb	r16,0(r3)
 10239c8:	003d6d06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 10239cc:	d8c12a15 	stw	r3,1192(sp)
 10239d0:	d9812785 	stb	r6,1182(sp)
 10239d4:	8880080c 	andi	r2,r17,32
 10239d8:	d8c12d17 	ldw	r3,1204(sp)
 10239dc:	103f861e 	bne	r2,zero,10237f8 <__alt_data_end+0xfffe6338>
 10239e0:	8880040c 	andi	r2,r17,16
 10239e4:	1001f31e 	bne	r2,zero,10241b4 <___vfprintf_internal_r+0x13d0>
 10239e8:	8880100c 	andi	r2,r17,64
 10239ec:	1001f126 	beq	r2,zero,10241b4 <___vfprintf_internal_r+0x13d0>
 10239f0:	1cc0000f 	ldh	r19,0(r3)
 10239f4:	db012d17 	ldw	r12,1204(sp)
 10239f8:	9839d7fa 	srai	fp,r19,31
 10239fc:	63000104 	addi	r12,r12,4
 1023a00:	db012d15 	stw	r12,1204(sp)
 1023a04:	e005883a 	mov	r2,fp
 1023a08:	003f8106 	br	1023810 <__alt_data_end+0xfffe6350>
 1023a0c:	8c401014 	ori	r17,r17,64
 1023a10:	1805883a 	mov	r2,r3
 1023a14:	1c000007 	ldb	r16,0(r3)
 1023a18:	003d5906 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023a1c:	db012d17 	ldw	r12,1204(sp)
 1023a20:	d8c12a15 	stw	r3,1192(sp)
 1023a24:	00c00044 	movi	r3,1
 1023a28:	60800017 	ldw	r2,0(r12)
 1023a2c:	63000104 	addi	r12,r12,4
 1023a30:	d8c12b15 	stw	r3,1196(sp)
 1023a34:	d8012785 	stb	zero,1182(sp)
 1023a38:	d8810405 	stb	r2,1040(sp)
 1023a3c:	db012d15 	stw	r12,1204(sp)
 1023a40:	dac10404 	addi	r11,sp,1040
 1023a44:	1825883a 	mov	r18,r3
 1023a48:	d8013215 	stw	zero,1224(sp)
 1023a4c:	d8013415 	stw	zero,1232(sp)
 1023a50:	dac13115 	stw	r11,1220(sp)
 1023a54:	0005883a 	mov	r2,zero
 1023a58:	003e7d06 	br	1023450 <__alt_data_end+0xfffe5f90>
 1023a5c:	db012d17 	ldw	r12,1204(sp)
 1023a60:	00800c04 	movi	r2,48
 1023a64:	d8812705 	stb	r2,1180(sp)
 1023a68:	64c00017 	ldw	r19,0(r12)
 1023a6c:	00801e04 	movi	r2,120
 1023a70:	d8812745 	stb	r2,1181(sp)
 1023a74:	008040f4 	movhi	r2,259
 1023a78:	10829504 	addi	r2,r2,2644
 1023a7c:	63000104 	addi	r12,r12,4
 1023a80:	d8c12a15 	stw	r3,1192(sp)
 1023a84:	d8813b15 	stw	r2,1260(sp)
 1023a88:	0039883a 	mov	fp,zero
 1023a8c:	8c400094 	ori	r17,r17,2
 1023a90:	db012d15 	stw	r12,1204(sp)
 1023a94:	00800084 	movi	r2,2
 1023a98:	04001e04 	movi	r16,120
 1023a9c:	9807883a 	mov	r3,r19
 1023aa0:	003e4206 	br	10233ac <__alt_data_end+0xfffe5eec>
 1023aa4:	dac12d17 	ldw	r11,1204(sp)
 1023aa8:	db012d17 	ldw	r12,1204(sp)
 1023aac:	d8c12a15 	stw	r3,1192(sp)
 1023ab0:	5ac00017 	ldw	r11,0(r11)
 1023ab4:	d8012785 	stb	zero,1182(sp)
 1023ab8:	64c00104 	addi	r19,r12,4
 1023abc:	dac13115 	stw	r11,1220(sp)
 1023ac0:	5803e826 	beq	r11,zero,1024a64 <___vfprintf_internal_r+0x1c80>
 1023ac4:	d9013117 	ldw	r4,1220(sp)
 1023ac8:	48037a16 	blt	r9,zero,10248b4 <___vfprintf_internal_r+0x1ad0>
 1023acc:	480d883a 	mov	r6,r9
 1023ad0:	000b883a 	mov	r5,zero
 1023ad4:	da013f15 	stw	r8,1276(sp)
 1023ad8:	da413e15 	stw	r9,1272(sp)
 1023adc:	10282bc0 	call	10282bc <memchr>
 1023ae0:	da013f17 	ldw	r8,1276(sp)
 1023ae4:	da413e17 	ldw	r9,1272(sp)
 1023ae8:	10044426 	beq	r2,zero,1024bfc <___vfprintf_internal_r+0x1e18>
 1023aec:	d8c13117 	ldw	r3,1220(sp)
 1023af0:	10e5c83a 	sub	r18,r2,r3
 1023af4:	4c834416 	blt	r9,r18,1024808 <___vfprintf_internal_r+0x1a24>
 1023af8:	9005883a 	mov	r2,r18
 1023afc:	90037216 	blt	r18,zero,10248c8 <___vfprintf_internal_r+0x1ae4>
 1023b00:	dd412783 	ldbu	r21,1182(sp)
 1023b04:	d8812b15 	stw	r2,1196(sp)
 1023b08:	dcc12d15 	stw	r19,1204(sp)
 1023b0c:	d8013215 	stw	zero,1224(sp)
 1023b10:	d8013415 	stw	zero,1232(sp)
 1023b14:	003e4706 	br	1023434 <__alt_data_end+0xfffe5f74>
 1023b18:	dac12d17 	ldw	r11,1204(sp)
 1023b1c:	db012d17 	ldw	r12,1204(sp)
 1023b20:	5ac00017 	ldw	r11,0(r11)
 1023b24:	dac12e15 	stw	r11,1208(sp)
 1023b28:	62c00104 	addi	r11,r12,4
 1023b2c:	db012e17 	ldw	r12,1208(sp)
 1023b30:	60034a16 	blt	r12,zero,102485c <___vfprintf_internal_r+0x1a78>
 1023b34:	dac12d15 	stw	r11,1204(sp)
 1023b38:	1805883a 	mov	r2,r3
 1023b3c:	1c000007 	ldb	r16,0(r3)
 1023b40:	003d0f06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023b44:	1805883a 	mov	r2,r3
 1023b48:	01800ac4 	movi	r6,43
 1023b4c:	1c000007 	ldb	r16,0(r3)
 1023b50:	003d0b06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1023b54:	d8c12a15 	stw	r3,1192(sp)
 1023b58:	d9812785 	stb	r6,1182(sp)
 1023b5c:	803db226 	beq	r16,zero,1023228 <__alt_data_end+0xfffe5d68>
 1023b60:	00c00044 	movi	r3,1
 1023b64:	d8c12b15 	stw	r3,1196(sp)
 1023b68:	dc010405 	stb	r16,1040(sp)
 1023b6c:	d8012785 	stb	zero,1182(sp)
 1023b70:	003fb306 	br	1023a40 <__alt_data_end+0xfffe6580>
 1023b74:	d8c12017 	ldw	r3,1152(sp)
 1023b78:	003e6d06 	br	1023530 <__alt_data_end+0xfffe6070>
 1023b7c:	10803fcc 	andi	r2,r2,255
 1023b80:	00c00044 	movi	r3,1
 1023b84:	10fe141e 	bne	r2,r3,10233d8 <__alt_data_end+0xfffe5f18>
 1023b88:	e000021e 	bne	fp,zero,1023b94 <___vfprintf_internal_r+0xdb0>
 1023b8c:	00800244 	movi	r2,9
 1023b90:	14c0202e 	bgeu	r2,r19,1023c14 <___vfprintf_internal_r+0xe30>
 1023b94:	dc012b15 	stw	r16,1196(sp)
 1023b98:	dc412c15 	stw	r17,1200(sp)
 1023b9c:	9821883a 	mov	r16,r19
 1023ba0:	e023883a 	mov	r17,fp
 1023ba4:	dc810e04 	addi	r18,sp,1080
 1023ba8:	4027883a 	mov	r19,r8
 1023bac:	4839883a 	mov	fp,r9
 1023bb0:	8009883a 	mov	r4,r16
 1023bb4:	880b883a 	mov	r5,r17
 1023bb8:	01800284 	movi	r6,10
 1023bbc:	000f883a 	mov	r7,zero
 1023bc0:	102c2bc0 	call	102c2bc <__umoddi3>
 1023bc4:	10800c04 	addi	r2,r2,48
 1023bc8:	94bfffc4 	addi	r18,r18,-1
 1023bcc:	8009883a 	mov	r4,r16
 1023bd0:	880b883a 	mov	r5,r17
 1023bd4:	01800284 	movi	r6,10
 1023bd8:	000f883a 	mov	r7,zero
 1023bdc:	90800005 	stb	r2,0(r18)
 1023be0:	102bcfc0 	call	102bcfc <__udivdi3>
 1023be4:	1021883a 	mov	r16,r2
 1023be8:	10c4b03a 	or	r2,r2,r3
 1023bec:	1823883a 	mov	r17,r3
 1023bf0:	103fef1e 	bne	r2,zero,1023bb0 <__alt_data_end+0xfffe66f0>
 1023bf4:	dac12817 	ldw	r11,1184(sp)
 1023bf8:	dc813115 	stw	r18,1220(sp)
 1023bfc:	dc012b17 	ldw	r16,1196(sp)
 1023c00:	9811883a 	mov	r8,r19
 1023c04:	dc412c17 	ldw	r17,1200(sp)
 1023c08:	e013883a 	mov	r9,fp
 1023c0c:	5ca5c83a 	sub	r18,r11,r18
 1023c10:	003e0306 	br	1023420 <__alt_data_end+0xfffe5f60>
 1023c14:	9cc00c04 	addi	r19,r19,48
 1023c18:	d8c10dc4 	addi	r3,sp,1079
 1023c1c:	dcc10dc5 	stb	r19,1079(sp)
 1023c20:	dc813c17 	ldw	r18,1264(sp)
 1023c24:	d8c13115 	stw	r3,1220(sp)
 1023c28:	003dfd06 	br	1023420 <__alt_data_end+0xfffe5f60>
 1023c2c:	00801944 	movi	r2,101
 1023c30:	1400710e 	bge	r2,r16,1023df8 <___vfprintf_internal_r+0x1014>
 1023c34:	d9013717 	ldw	r4,1244(sp)
 1023c38:	d9413917 	ldw	r5,1252(sp)
 1023c3c:	000d883a 	mov	r6,zero
 1023c40:	000f883a 	mov	r7,zero
 1023c44:	d8c13d15 	stw	r3,1268(sp)
 1023c48:	da013f15 	stw	r8,1276(sp)
 1023c4c:	102d0e80 	call	102d0e8 <__eqdf2>
 1023c50:	d8c13d17 	ldw	r3,1268(sp)
 1023c54:	da013f17 	ldw	r8,1276(sp)
 1023c58:	1000ef1e 	bne	r2,zero,1024018 <___vfprintf_internal_r+0x1234>
 1023c5c:	d8811f17 	ldw	r2,1148(sp)
 1023c60:	010040f4 	movhi	r4,259
 1023c64:	21029c04 	addi	r4,r4,2672
 1023c68:	18c00044 	addi	r3,r3,1
 1023c6c:	10800044 	addi	r2,r2,1
 1023c70:	41000015 	stw	r4,0(r8)
 1023c74:	01000044 	movi	r4,1
 1023c78:	41000115 	stw	r4,4(r8)
 1023c7c:	d8c12015 	stw	r3,1152(sp)
 1023c80:	d8811f15 	stw	r2,1148(sp)
 1023c84:	010001c4 	movi	r4,7
 1023c88:	20828e16 	blt	r4,r2,10246c4 <___vfprintf_internal_r+0x18e0>
 1023c8c:	42000204 	addi	r8,r8,8
 1023c90:	d8812617 	ldw	r2,1176(sp)
 1023c94:	dac13317 	ldw	r11,1228(sp)
 1023c98:	12c00216 	blt	r2,r11,1023ca4 <___vfprintf_internal_r+0xec0>
 1023c9c:	8880004c 	andi	r2,r17,1
 1023ca0:	103e7726 	beq	r2,zero,1023680 <__alt_data_end+0xfffe61c0>
 1023ca4:	db013817 	ldw	r12,1248(sp)
 1023ca8:	d8811f17 	ldw	r2,1148(sp)
 1023cac:	dac13517 	ldw	r11,1236(sp)
 1023cb0:	1b07883a 	add	r3,r3,r12
 1023cb4:	10800044 	addi	r2,r2,1
 1023cb8:	42c00015 	stw	r11,0(r8)
 1023cbc:	43000115 	stw	r12,4(r8)
 1023cc0:	d8c12015 	stw	r3,1152(sp)
 1023cc4:	d8811f15 	stw	r2,1148(sp)
 1023cc8:	010001c4 	movi	r4,7
 1023ccc:	2082ed16 	blt	r4,r2,1024884 <___vfprintf_internal_r+0x1aa0>
 1023cd0:	42000204 	addi	r8,r8,8
 1023cd4:	db013317 	ldw	r12,1228(sp)
 1023cd8:	643fffc4 	addi	r16,r12,-1
 1023cdc:	043e680e 	bge	zero,r16,1023680 <__alt_data_end+0xfffe61c0>
 1023ce0:	04800404 	movi	r18,16
 1023ce4:	d8811f17 	ldw	r2,1148(sp)
 1023ce8:	94007e0e 	bge	r18,r16,1023ee4 <___vfprintf_internal_r+0x1100>
 1023cec:	014040f4 	movhi	r5,259
 1023cf0:	29429c84 	addi	r5,r5,2674
 1023cf4:	d9412c15 	stw	r5,1200(sp)
 1023cf8:	054001c4 	movi	r21,7
 1023cfc:	00000306 	br	1023d0c <___vfprintf_internal_r+0xf28>
 1023d00:	42000204 	addi	r8,r8,8
 1023d04:	843ffc04 	addi	r16,r16,-16
 1023d08:	9400790e 	bge	r18,r16,1023ef0 <___vfprintf_internal_r+0x110c>
 1023d0c:	18c00404 	addi	r3,r3,16
 1023d10:	10800044 	addi	r2,r2,1
 1023d14:	45000015 	stw	r20,0(r8)
 1023d18:	44800115 	stw	r18,4(r8)
 1023d1c:	d8c12015 	stw	r3,1152(sp)
 1023d20:	d8811f15 	stw	r2,1148(sp)
 1023d24:	a8bff60e 	bge	r21,r2,1023d00 <__alt_data_end+0xfffe6840>
 1023d28:	b009883a 	mov	r4,r22
 1023d2c:	b80b883a 	mov	r5,r23
 1023d30:	d9811e04 	addi	r6,sp,1144
 1023d34:	102a02c0 	call	102a02c <__sprint_r>
 1023d38:	103d411e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023d3c:	d8c12017 	ldw	r3,1152(sp)
 1023d40:	d8811f17 	ldw	r2,1148(sp)
 1023d44:	da000404 	addi	r8,sp,16
 1023d48:	003fee06 	br	1023d04 <__alt_data_end+0xfffe6844>
 1023d4c:	dac12e17 	ldw	r11,1208(sp)
 1023d50:	db012b17 	ldw	r12,1196(sp)
 1023d54:	5b2bc83a 	sub	r21,r11,r12
 1023d58:	057e130e 	bge	zero,r21,10235a8 <__alt_data_end+0xfffe60e8>
 1023d5c:	07000404 	movi	fp,16
 1023d60:	d8811f17 	ldw	r2,1148(sp)
 1023d64:	e543640e 	bge	fp,r21,1024af8 <___vfprintf_internal_r+0x1d14>
 1023d68:	014040f4 	movhi	r5,259
 1023d6c:	29429c84 	addi	r5,r5,2674
 1023d70:	d9412c15 	stw	r5,1200(sp)
 1023d74:	04c001c4 	movi	r19,7
 1023d78:	00000306 	br	1023d88 <___vfprintf_internal_r+0xfa4>
 1023d7c:	ad7ffc04 	addi	r21,r21,-16
 1023d80:	42000204 	addi	r8,r8,8
 1023d84:	e540110e 	bge	fp,r21,1023dcc <___vfprintf_internal_r+0xfe8>
 1023d88:	18c00404 	addi	r3,r3,16
 1023d8c:	10800044 	addi	r2,r2,1
 1023d90:	45000015 	stw	r20,0(r8)
 1023d94:	47000115 	stw	fp,4(r8)
 1023d98:	d8c12015 	stw	r3,1152(sp)
 1023d9c:	d8811f15 	stw	r2,1148(sp)
 1023da0:	98bff60e 	bge	r19,r2,1023d7c <__alt_data_end+0xfffe68bc>
 1023da4:	b009883a 	mov	r4,r22
 1023da8:	b80b883a 	mov	r5,r23
 1023dac:	d9811e04 	addi	r6,sp,1144
 1023db0:	102a02c0 	call	102a02c <__sprint_r>
 1023db4:	103d221e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023db8:	ad7ffc04 	addi	r21,r21,-16
 1023dbc:	d8c12017 	ldw	r3,1152(sp)
 1023dc0:	d8811f17 	ldw	r2,1148(sp)
 1023dc4:	da000404 	addi	r8,sp,16
 1023dc8:	e57fef16 	blt	fp,r21,1023d88 <__alt_data_end+0xfffe68c8>
 1023dcc:	dac12c17 	ldw	r11,1200(sp)
 1023dd0:	1d47883a 	add	r3,r3,r21
 1023dd4:	10800044 	addi	r2,r2,1
 1023dd8:	42c00015 	stw	r11,0(r8)
 1023ddc:	45400115 	stw	r21,4(r8)
 1023de0:	d8c12015 	stw	r3,1152(sp)
 1023de4:	d8811f15 	stw	r2,1148(sp)
 1023de8:	010001c4 	movi	r4,7
 1023dec:	20819116 	blt	r4,r2,1024434 <___vfprintf_internal_r+0x1650>
 1023df0:	42000204 	addi	r8,r8,8
 1023df4:	003dec06 	br	10235a8 <__alt_data_end+0xfffe60e8>
 1023df8:	db013317 	ldw	r12,1228(sp)
 1023dfc:	00800044 	movi	r2,1
 1023e00:	18c00044 	addi	r3,r3,1
 1023e04:	1301530e 	bge	r2,r12,1024354 <___vfprintf_internal_r+0x1570>
 1023e08:	dc011f17 	ldw	r16,1148(sp)
 1023e0c:	dac13117 	ldw	r11,1220(sp)
 1023e10:	00800044 	movi	r2,1
 1023e14:	84000044 	addi	r16,r16,1
 1023e18:	40800115 	stw	r2,4(r8)
 1023e1c:	42c00015 	stw	r11,0(r8)
 1023e20:	d8c12015 	stw	r3,1152(sp)
 1023e24:	dc011f15 	stw	r16,1148(sp)
 1023e28:	008001c4 	movi	r2,7
 1023e2c:	14016b16 	blt	r2,r16,10243dc <___vfprintf_internal_r+0x15f8>
 1023e30:	42000204 	addi	r8,r8,8
 1023e34:	db013817 	ldw	r12,1248(sp)
 1023e38:	dac13517 	ldw	r11,1236(sp)
 1023e3c:	84000044 	addi	r16,r16,1
 1023e40:	1b07883a 	add	r3,r3,r12
 1023e44:	42c00015 	stw	r11,0(r8)
 1023e48:	43000115 	stw	r12,4(r8)
 1023e4c:	d8c12015 	stw	r3,1152(sp)
 1023e50:	dc011f15 	stw	r16,1148(sp)
 1023e54:	008001c4 	movi	r2,7
 1023e58:	14016916 	blt	r2,r16,1024400 <___vfprintf_internal_r+0x161c>
 1023e5c:	44800204 	addi	r18,r8,8
 1023e60:	d9013717 	ldw	r4,1244(sp)
 1023e64:	d9413917 	ldw	r5,1252(sp)
 1023e68:	000d883a 	mov	r6,zero
 1023e6c:	000f883a 	mov	r7,zero
 1023e70:	d8c13d15 	stw	r3,1268(sp)
 1023e74:	102d0e80 	call	102d0e8 <__eqdf2>
 1023e78:	d8c13d17 	ldw	r3,1268(sp)
 1023e7c:	db013317 	ldw	r12,1228(sp)
 1023e80:	1000ae26 	beq	r2,zero,102413c <___vfprintf_internal_r+0x1358>
 1023e84:	dac13117 	ldw	r11,1220(sp)
 1023e88:	60bfffc4 	addi	r2,r12,-1
 1023e8c:	1887883a 	add	r3,r3,r2
 1023e90:	59000044 	addi	r4,r11,1
 1023e94:	84000044 	addi	r16,r16,1
 1023e98:	90800115 	stw	r2,4(r18)
 1023e9c:	91000015 	stw	r4,0(r18)
 1023ea0:	d8c12015 	stw	r3,1152(sp)
 1023ea4:	dc011f15 	stw	r16,1148(sp)
 1023ea8:	008001c4 	movi	r2,7
 1023eac:	14014216 	blt	r2,r16,10243b8 <___vfprintf_internal_r+0x15d4>
 1023eb0:	94800204 	addi	r18,r18,8
 1023eb4:	dac13a17 	ldw	r11,1256(sp)
 1023eb8:	dd4122c4 	addi	r21,sp,1163
 1023ebc:	84000044 	addi	r16,r16,1
 1023ec0:	58c7883a 	add	r3,r11,r3
 1023ec4:	95400015 	stw	r21,0(r18)
 1023ec8:	92c00115 	stw	r11,4(r18)
 1023ecc:	d8c12015 	stw	r3,1152(sp)
 1023ed0:	dc011f15 	stw	r16,1148(sp)
 1023ed4:	008001c4 	movi	r2,7
 1023ed8:	14000e16 	blt	r2,r16,1023f14 <___vfprintf_internal_r+0x1130>
 1023edc:	92000204 	addi	r8,r18,8
 1023ee0:	003de706 	br	1023680 <__alt_data_end+0xfffe61c0>
 1023ee4:	010040f4 	movhi	r4,259
 1023ee8:	21029c84 	addi	r4,r4,2674
 1023eec:	d9012c15 	stw	r4,1200(sp)
 1023ef0:	dac12c17 	ldw	r11,1200(sp)
 1023ef4:	1c07883a 	add	r3,r3,r16
 1023ef8:	44000115 	stw	r16,4(r8)
 1023efc:	42c00015 	stw	r11,0(r8)
 1023f00:	10800044 	addi	r2,r2,1
 1023f04:	d8c12015 	stw	r3,1152(sp)
 1023f08:	d8811f15 	stw	r2,1148(sp)
 1023f0c:	010001c4 	movi	r4,7
 1023f10:	20bdda0e 	bge	r4,r2,102367c <__alt_data_end+0xfffe61bc>
 1023f14:	b009883a 	mov	r4,r22
 1023f18:	b80b883a 	mov	r5,r23
 1023f1c:	d9811e04 	addi	r6,sp,1144
 1023f20:	102a02c0 	call	102a02c <__sprint_r>
 1023f24:	103cc61e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023f28:	d8c12017 	ldw	r3,1152(sp)
 1023f2c:	da000404 	addi	r8,sp,16
 1023f30:	003dd306 	br	1023680 <__alt_data_end+0xfffe61c0>
 1023f34:	b009883a 	mov	r4,r22
 1023f38:	b80b883a 	mov	r5,r23
 1023f3c:	d9811e04 	addi	r6,sp,1144
 1023f40:	102a02c0 	call	102a02c <__sprint_r>
 1023f44:	103e0926 	beq	r2,zero,102376c <__alt_data_end+0xfffe62ac>
 1023f48:	003cbd06 	br	1023240 <__alt_data_end+0xfffe5d80>
 1023f4c:	10803fcc 	andi	r2,r2,255
 1023f50:	1000651e 	bne	r2,zero,10240e8 <___vfprintf_internal_r+0x1304>
 1023f54:	8880004c 	andi	r2,r17,1
 1023f58:	10013226 	beq	r2,zero,1024424 <___vfprintf_internal_r+0x1640>
 1023f5c:	00800c04 	movi	r2,48
 1023f60:	d8c10dc4 	addi	r3,sp,1079
 1023f64:	d8810dc5 	stb	r2,1079(sp)
 1023f68:	dc813c17 	ldw	r18,1264(sp)
 1023f6c:	d8c13115 	stw	r3,1220(sp)
 1023f70:	003d2b06 	br	1023420 <__alt_data_end+0xfffe5f60>
 1023f74:	b009883a 	mov	r4,r22
 1023f78:	b80b883a 	mov	r5,r23
 1023f7c:	d9811e04 	addi	r6,sp,1144
 1023f80:	102a02c0 	call	102a02c <__sprint_r>
 1023f84:	103cae1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023f88:	d8c12017 	ldw	r3,1152(sp)
 1023f8c:	da000404 	addi	r8,sp,16
 1023f90:	003dae06 	br	102364c <__alt_data_end+0xfffe618c>
 1023f94:	b009883a 	mov	r4,r22
 1023f98:	b80b883a 	mov	r5,r23
 1023f9c:	d9811e04 	addi	r6,sp,1144
 1023fa0:	102a02c0 	call	102a02c <__sprint_r>
 1023fa4:	103ca61e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023fa8:	d8c12017 	ldw	r3,1152(sp)
 1023fac:	da000404 	addi	r8,sp,16
 1023fb0:	003d6c06 	br	1023564 <__alt_data_end+0xfffe60a4>
 1023fb4:	b009883a 	mov	r4,r22
 1023fb8:	b80b883a 	mov	r5,r23
 1023fbc:	d9811e04 	addi	r6,sp,1144
 1023fc0:	102a02c0 	call	102a02c <__sprint_r>
 1023fc4:	103c9e1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1023fc8:	d8c12017 	ldw	r3,1152(sp)
 1023fcc:	da000404 	addi	r8,sp,16
 1023fd0:	003d7206 	br	102359c <__alt_data_end+0xfffe60dc>
 1023fd4:	d9413b17 	ldw	r5,1260(sp)
 1023fd8:	d8c10e04 	addi	r3,sp,1080
 1023fdc:	988003cc 	andi	r2,r19,15
 1023fe0:	e008973a 	slli	r4,fp,28
 1023fe4:	2885883a 	add	r2,r5,r2
 1023fe8:	9826d13a 	srli	r19,r19,4
 1023fec:	10800003 	ldbu	r2,0(r2)
 1023ff0:	e038d13a 	srli	fp,fp,4
 1023ff4:	18ffffc4 	addi	r3,r3,-1
 1023ff8:	24e6b03a 	or	r19,r4,r19
 1023ffc:	18800005 	stb	r2,0(r3)
 1024000:	9f04b03a 	or	r2,r19,fp
 1024004:	103ff51e 	bne	r2,zero,1023fdc <__alt_data_end+0xfffe6b1c>
 1024008:	db012817 	ldw	r12,1184(sp)
 102400c:	d8c13115 	stw	r3,1220(sp)
 1024010:	60e5c83a 	sub	r18,r12,r3
 1024014:	003d0206 	br	1023420 <__alt_data_end+0xfffe5f60>
 1024018:	dc012617 	ldw	r16,1176(sp)
 102401c:	0401b10e 	bge	zero,r16,10246e4 <___vfprintf_internal_r+0x1900>
 1024020:	db013117 	ldw	r12,1220(sp)
 1024024:	dac13317 	ldw	r11,1228(sp)
 1024028:	62e1883a 	add	r16,r12,r11
 102402c:	db013417 	ldw	r12,1232(sp)
 1024030:	5825883a 	mov	r18,r11
 1024034:	62c0010e 	bge	r12,r11,102403c <___vfprintf_internal_r+0x1258>
 1024038:	6025883a 	mov	r18,r12
 102403c:	04800b0e 	bge	zero,r18,102406c <___vfprintf_internal_r+0x1288>
 1024040:	d8811f17 	ldw	r2,1148(sp)
 1024044:	dac13117 	ldw	r11,1220(sp)
 1024048:	1c87883a 	add	r3,r3,r18
 102404c:	10800044 	addi	r2,r2,1
 1024050:	42c00015 	stw	r11,0(r8)
 1024054:	44800115 	stw	r18,4(r8)
 1024058:	d8c12015 	stw	r3,1152(sp)
 102405c:	d8811f15 	stw	r2,1148(sp)
 1024060:	010001c4 	movi	r4,7
 1024064:	20824f16 	blt	r4,r2,10249a4 <___vfprintf_internal_r+0x1bc0>
 1024068:	42000204 	addi	r8,r8,8
 102406c:	90024b16 	blt	r18,zero,102499c <___vfprintf_internal_r+0x1bb8>
 1024070:	db013417 	ldw	r12,1232(sp)
 1024074:	64a5c83a 	sub	r18,r12,r18
 1024078:	0480730e 	bge	zero,r18,1024248 <___vfprintf_internal_r+0x1464>
 102407c:	05400404 	movi	r21,16
 1024080:	d8811f17 	ldw	r2,1148(sp)
 1024084:	ac817d0e 	bge	r21,r18,102467c <___vfprintf_internal_r+0x1898>
 1024088:	014040f4 	movhi	r5,259
 102408c:	29429c84 	addi	r5,r5,2674
 1024090:	d9412c15 	stw	r5,1200(sp)
 1024094:	070001c4 	movi	fp,7
 1024098:	00000306 	br	10240a8 <___vfprintf_internal_r+0x12c4>
 102409c:	42000204 	addi	r8,r8,8
 10240a0:	94bffc04 	addi	r18,r18,-16
 10240a4:	ac81780e 	bge	r21,r18,1024688 <___vfprintf_internal_r+0x18a4>
 10240a8:	18c00404 	addi	r3,r3,16
 10240ac:	10800044 	addi	r2,r2,1
 10240b0:	45000015 	stw	r20,0(r8)
 10240b4:	45400115 	stw	r21,4(r8)
 10240b8:	d8c12015 	stw	r3,1152(sp)
 10240bc:	d8811f15 	stw	r2,1148(sp)
 10240c0:	e0bff60e 	bge	fp,r2,102409c <__alt_data_end+0xfffe6bdc>
 10240c4:	b009883a 	mov	r4,r22
 10240c8:	b80b883a 	mov	r5,r23
 10240cc:	d9811e04 	addi	r6,sp,1144
 10240d0:	102a02c0 	call	102a02c <__sprint_r>
 10240d4:	103c5a1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10240d8:	d8c12017 	ldw	r3,1152(sp)
 10240dc:	d8811f17 	ldw	r2,1148(sp)
 10240e0:	da000404 	addi	r8,sp,16
 10240e4:	003fee06 	br	10240a0 <__alt_data_end+0xfffe6be0>
 10240e8:	dac10e04 	addi	r11,sp,1080
 10240ec:	0025883a 	mov	r18,zero
 10240f0:	dac13115 	stw	r11,1220(sp)
 10240f4:	003cca06 	br	1023420 <__alt_data_end+0xfffe5f60>
 10240f8:	b009883a 	mov	r4,r22
 10240fc:	b80b883a 	mov	r5,r23
 1024100:	d9811e04 	addi	r6,sp,1144
 1024104:	102a02c0 	call	102a02c <__sprint_r>
 1024108:	103c4d1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 102410c:	d8c12017 	ldw	r3,1152(sp)
 1024110:	d8812787 	ldb	r2,1182(sp)
 1024114:	da000404 	addi	r8,sp,16
 1024118:	003d0506 	br	1023530 <__alt_data_end+0xfffe6070>
 102411c:	dac12d17 	ldw	r11,1204(sp)
 1024120:	14c00017 	ldw	r19,0(r2)
 1024124:	0039883a 	mov	fp,zero
 1024128:	5ac00104 	addi	r11,r11,4
 102412c:	dac12d15 	stw	r11,1204(sp)
 1024130:	0005883a 	mov	r2,zero
 1024134:	9807883a 	mov	r3,r19
 1024138:	003c9c06 	br	10233ac <__alt_data_end+0xfffe5eec>
 102413c:	657fffc4 	addi	r21,r12,-1
 1024140:	057f5c0e 	bge	zero,r21,1023eb4 <__alt_data_end+0xfffe69f4>
 1024144:	07000404 	movi	fp,16
 1024148:	e5408f0e 	bge	fp,r21,1024388 <___vfprintf_internal_r+0x15a4>
 102414c:	010040f4 	movhi	r4,259
 1024150:	21029c84 	addi	r4,r4,2674
 1024154:	d9012c15 	stw	r4,1200(sp)
 1024158:	01c001c4 	movi	r7,7
 102415c:	00000306 	br	102416c <___vfprintf_internal_r+0x1388>
 1024160:	94800204 	addi	r18,r18,8
 1024164:	ad7ffc04 	addi	r21,r21,-16
 1024168:	e5408a0e 	bge	fp,r21,1024394 <___vfprintf_internal_r+0x15b0>
 102416c:	18c00404 	addi	r3,r3,16
 1024170:	84000044 	addi	r16,r16,1
 1024174:	95000015 	stw	r20,0(r18)
 1024178:	97000115 	stw	fp,4(r18)
 102417c:	d8c12015 	stw	r3,1152(sp)
 1024180:	dc011f15 	stw	r16,1148(sp)
 1024184:	3c3ff60e 	bge	r7,r16,1024160 <__alt_data_end+0xfffe6ca0>
 1024188:	b009883a 	mov	r4,r22
 102418c:	b80b883a 	mov	r5,r23
 1024190:	d9811e04 	addi	r6,sp,1144
 1024194:	d9c13d15 	stw	r7,1268(sp)
 1024198:	102a02c0 	call	102a02c <__sprint_r>
 102419c:	d9c13d17 	ldw	r7,1268(sp)
 10241a0:	103c271e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10241a4:	d8c12017 	ldw	r3,1152(sp)
 10241a8:	dc011f17 	ldw	r16,1148(sp)
 10241ac:	dc800404 	addi	r18,sp,16
 10241b0:	003fec06 	br	1024164 <__alt_data_end+0xfffe6ca4>
 10241b4:	1cc00017 	ldw	r19,0(r3)
 10241b8:	dac12d17 	ldw	r11,1204(sp)
 10241bc:	9839d7fa 	srai	fp,r19,31
 10241c0:	5ac00104 	addi	r11,r11,4
 10241c4:	dac12d15 	stw	r11,1204(sp)
 10241c8:	e005883a 	mov	r2,fp
 10241cc:	003d9006 	br	1023810 <__alt_data_end+0xfffe6350>
 10241d0:	00800084 	movi	r2,2
 10241d4:	9f06b03a 	or	r3,r19,fp
 10241d8:	003c7406 	br	10233ac <__alt_data_end+0xfffe5eec>
 10241dc:	db012d17 	ldw	r12,1204(sp)
 10241e0:	14c00017 	ldw	r19,0(r2)
 10241e4:	0039883a 	mov	fp,zero
 10241e8:	63000104 	addi	r12,r12,4
 10241ec:	db012d15 	stw	r12,1204(sp)
 10241f0:	00800044 	movi	r2,1
 10241f4:	9807883a 	mov	r3,r19
 10241f8:	003c6c06 	br	10233ac <__alt_data_end+0xfffe5eec>
 10241fc:	10803fcc 	andi	r2,r2,255
 1024200:	1080201c 	xori	r2,r2,128
 1024204:	10bfe004 	addi	r2,r2,-128
 1024208:	01000c04 	movi	r4,48
 102420c:	1101a526 	beq	r2,r4,10248a4 <___vfprintf_internal_r+0x1ac0>
 1024210:	dac13117 	ldw	r11,1220(sp)
 1024214:	db012817 	ldw	r12,1184(sp)
 1024218:	193fffc5 	stb	r4,-1(r3)
 102421c:	5affffc4 	addi	r11,r11,-1
 1024220:	dac13115 	stw	r11,1220(sp)
 1024224:	62e5c83a 	sub	r18,r12,r11
 1024228:	003c7d06 	br	1023420 <__alt_data_end+0xfffe5f60>
 102422c:	b009883a 	mov	r4,r22
 1024230:	b80b883a 	mov	r5,r23
 1024234:	d9811e04 	addi	r6,sp,1144
 1024238:	102a02c0 	call	102a02c <__sprint_r>
 102423c:	103c001e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024240:	d8c12017 	ldw	r3,1152(sp)
 1024244:	da000404 	addi	r8,sp,16
 1024248:	db013117 	ldw	r12,1220(sp)
 102424c:	dac13417 	ldw	r11,1232(sp)
 1024250:	d8812617 	ldw	r2,1176(sp)
 1024254:	62e5883a 	add	r18,r12,r11
 1024258:	db013317 	ldw	r12,1228(sp)
 102425c:	13000216 	blt	r2,r12,1024268 <___vfprintf_internal_r+0x1484>
 1024260:	8900004c 	andi	r4,r17,1
 1024264:	20000c26 	beq	r4,zero,1024298 <___vfprintf_internal_r+0x14b4>
 1024268:	dac13817 	ldw	r11,1248(sp)
 102426c:	d9011f17 	ldw	r4,1148(sp)
 1024270:	db013517 	ldw	r12,1236(sp)
 1024274:	1ac7883a 	add	r3,r3,r11
 1024278:	21000044 	addi	r4,r4,1
 102427c:	43000015 	stw	r12,0(r8)
 1024280:	42c00115 	stw	r11,4(r8)
 1024284:	d8c12015 	stw	r3,1152(sp)
 1024288:	d9011f15 	stw	r4,1148(sp)
 102428c:	014001c4 	movi	r5,7
 1024290:	2901cc16 	blt	r5,r4,10249c4 <___vfprintf_internal_r+0x1be0>
 1024294:	42000204 	addi	r8,r8,8
 1024298:	dac13317 	ldw	r11,1228(sp)
 102429c:	8489c83a 	sub	r4,r16,r18
 10242a0:	5885c83a 	sub	r2,r11,r2
 10242a4:	1021883a 	mov	r16,r2
 10242a8:	2080010e 	bge	r4,r2,10242b0 <___vfprintf_internal_r+0x14cc>
 10242ac:	2021883a 	mov	r16,r4
 10242b0:	04000a0e 	bge	zero,r16,10242dc <___vfprintf_internal_r+0x14f8>
 10242b4:	d9011f17 	ldw	r4,1148(sp)
 10242b8:	1c07883a 	add	r3,r3,r16
 10242bc:	44800015 	stw	r18,0(r8)
 10242c0:	21000044 	addi	r4,r4,1
 10242c4:	44000115 	stw	r16,4(r8)
 10242c8:	d8c12015 	stw	r3,1152(sp)
 10242cc:	d9011f15 	stw	r4,1148(sp)
 10242d0:	014001c4 	movi	r5,7
 10242d4:	2901d616 	blt	r5,r4,1024a30 <___vfprintf_internal_r+0x1c4c>
 10242d8:	42000204 	addi	r8,r8,8
 10242dc:	8001df16 	blt	r16,zero,1024a5c <___vfprintf_internal_r+0x1c78>
 10242e0:	1421c83a 	sub	r16,r2,r16
 10242e4:	043ce60e 	bge	zero,r16,1023680 <__alt_data_end+0xfffe61c0>
 10242e8:	04800404 	movi	r18,16
 10242ec:	d8811f17 	ldw	r2,1148(sp)
 10242f0:	943efc0e 	bge	r18,r16,1023ee4 <__alt_data_end+0xfffe6a24>
 10242f4:	014040f4 	movhi	r5,259
 10242f8:	29429c84 	addi	r5,r5,2674
 10242fc:	d9412c15 	stw	r5,1200(sp)
 1024300:	054001c4 	movi	r21,7
 1024304:	00000306 	br	1024314 <___vfprintf_internal_r+0x1530>
 1024308:	42000204 	addi	r8,r8,8
 102430c:	843ffc04 	addi	r16,r16,-16
 1024310:	943ef70e 	bge	r18,r16,1023ef0 <__alt_data_end+0xfffe6a30>
 1024314:	18c00404 	addi	r3,r3,16
 1024318:	10800044 	addi	r2,r2,1
 102431c:	45000015 	stw	r20,0(r8)
 1024320:	44800115 	stw	r18,4(r8)
 1024324:	d8c12015 	stw	r3,1152(sp)
 1024328:	d8811f15 	stw	r2,1148(sp)
 102432c:	a8bff60e 	bge	r21,r2,1024308 <__alt_data_end+0xfffe6e48>
 1024330:	b009883a 	mov	r4,r22
 1024334:	b80b883a 	mov	r5,r23
 1024338:	d9811e04 	addi	r6,sp,1144
 102433c:	102a02c0 	call	102a02c <__sprint_r>
 1024340:	103bbf1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024344:	d8c12017 	ldw	r3,1152(sp)
 1024348:	d8811f17 	ldw	r2,1148(sp)
 102434c:	da000404 	addi	r8,sp,16
 1024350:	003fee06 	br	102430c <__alt_data_end+0xfffe6e4c>
 1024354:	8888703a 	and	r4,r17,r2
 1024358:	203eab1e 	bne	r4,zero,1023e08 <__alt_data_end+0xfffe6948>
 102435c:	dc011f17 	ldw	r16,1148(sp)
 1024360:	db013117 	ldw	r12,1220(sp)
 1024364:	40800115 	stw	r2,4(r8)
 1024368:	84000044 	addi	r16,r16,1
 102436c:	43000015 	stw	r12,0(r8)
 1024370:	d8c12015 	stw	r3,1152(sp)
 1024374:	dc011f15 	stw	r16,1148(sp)
 1024378:	008001c4 	movi	r2,7
 102437c:	14000e16 	blt	r2,r16,10243b8 <___vfprintf_internal_r+0x15d4>
 1024380:	44800204 	addi	r18,r8,8
 1024384:	003ecb06 	br	1023eb4 <__alt_data_end+0xfffe69f4>
 1024388:	008040f4 	movhi	r2,259
 102438c:	10829c84 	addi	r2,r2,2674
 1024390:	d8812c15 	stw	r2,1200(sp)
 1024394:	dac12c17 	ldw	r11,1200(sp)
 1024398:	1d47883a 	add	r3,r3,r21
 102439c:	84000044 	addi	r16,r16,1
 10243a0:	92c00015 	stw	r11,0(r18)
 10243a4:	95400115 	stw	r21,4(r18)
 10243a8:	d8c12015 	stw	r3,1152(sp)
 10243ac:	dc011f15 	stw	r16,1148(sp)
 10243b0:	008001c4 	movi	r2,7
 10243b4:	143ebe0e 	bge	r2,r16,1023eb0 <__alt_data_end+0xfffe69f0>
 10243b8:	b009883a 	mov	r4,r22
 10243bc:	b80b883a 	mov	r5,r23
 10243c0:	d9811e04 	addi	r6,sp,1144
 10243c4:	102a02c0 	call	102a02c <__sprint_r>
 10243c8:	103b9d1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10243cc:	d8c12017 	ldw	r3,1152(sp)
 10243d0:	dc011f17 	ldw	r16,1148(sp)
 10243d4:	dc800404 	addi	r18,sp,16
 10243d8:	003eb606 	br	1023eb4 <__alt_data_end+0xfffe69f4>
 10243dc:	b009883a 	mov	r4,r22
 10243e0:	b80b883a 	mov	r5,r23
 10243e4:	d9811e04 	addi	r6,sp,1144
 10243e8:	102a02c0 	call	102a02c <__sprint_r>
 10243ec:	103b941e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10243f0:	d8c12017 	ldw	r3,1152(sp)
 10243f4:	dc011f17 	ldw	r16,1148(sp)
 10243f8:	da000404 	addi	r8,sp,16
 10243fc:	003e8d06 	br	1023e34 <__alt_data_end+0xfffe6974>
 1024400:	b009883a 	mov	r4,r22
 1024404:	b80b883a 	mov	r5,r23
 1024408:	d9811e04 	addi	r6,sp,1144
 102440c:	102a02c0 	call	102a02c <__sprint_r>
 1024410:	103b8b1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024414:	d8c12017 	ldw	r3,1152(sp)
 1024418:	dc011f17 	ldw	r16,1148(sp)
 102441c:	dc800404 	addi	r18,sp,16
 1024420:	003e8f06 	br	1023e60 <__alt_data_end+0xfffe69a0>
 1024424:	db010e04 	addi	r12,sp,1080
 1024428:	0025883a 	mov	r18,zero
 102442c:	db013115 	stw	r12,1220(sp)
 1024430:	003bfb06 	br	1023420 <__alt_data_end+0xfffe5f60>
 1024434:	b009883a 	mov	r4,r22
 1024438:	b80b883a 	mov	r5,r23
 102443c:	d9811e04 	addi	r6,sp,1144
 1024440:	102a02c0 	call	102a02c <__sprint_r>
 1024444:	103b7e1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024448:	d8c12017 	ldw	r3,1152(sp)
 102444c:	da000404 	addi	r8,sp,16
 1024450:	003c5506 	br	10235a8 <__alt_data_end+0xfffe60e8>
 1024454:	04e7c83a 	sub	r19,zero,r19
 1024458:	9804c03a 	cmpne	r2,r19,zero
 102445c:	0739c83a 	sub	fp,zero,fp
 1024460:	e0b9c83a 	sub	fp,fp,r2
 1024464:	05400b44 	movi	r21,45
 1024468:	dd412785 	stb	r21,1182(sp)
 102446c:	da413215 	stw	r9,1224(sp)
 1024470:	00800044 	movi	r2,1
 1024474:	9f06b03a 	or	r3,r19,fp
 1024478:	003bcf06 	br	10233b8 <__alt_data_end+0xfffe5ef8>
 102447c:	da013f15 	stw	r8,1276(sp)
 1024480:	da413e15 	stw	r9,1272(sp)
 1024484:	1029c880 	call	1029c88 <__fpclassifyd>
 1024488:	da013f17 	ldw	r8,1276(sp)
 102448c:	da413e17 	ldw	r9,1272(sp)
 1024490:	1000ce26 	beq	r2,zero,10247cc <___vfprintf_internal_r+0x19e8>
 1024494:	057ff7c4 	movi	r21,-33
 1024498:	00bfffc4 	movi	r2,-1
 102449c:	856a703a 	and	r21,r16,r21
 10244a0:	4881f026 	beq	r9,r2,1024c64 <___vfprintf_internal_r+0x1e80>
 10244a4:	008011c4 	movi	r2,71
 10244a8:	a881e526 	beq	r21,r2,1024c40 <___vfprintf_internal_r+0x1e5c>
 10244ac:	db013917 	ldw	r12,1252(sp)
 10244b0:	8ac04014 	ori	r11,r17,256
 10244b4:	dac12d15 	stw	r11,1204(sp)
 10244b8:	6001e416 	blt	r12,zero,1024c4c <___vfprintf_internal_r+0x1e68>
 10244bc:	dc813917 	ldw	r18,1252(sp)
 10244c0:	d8012b05 	stb	zero,1196(sp)
 10244c4:	00801984 	movi	r2,102
 10244c8:	80811826 	beq	r16,r2,102492c <___vfprintf_internal_r+0x1b48>
 10244cc:	00801184 	movi	r2,70
 10244d0:	80811626 	beq	r16,r2,102492c <___vfprintf_internal_r+0x1b48>
 10244d4:	00801144 	movi	r2,69
 10244d8:	a881e026 	beq	r21,r2,1024c5c <___vfprintf_internal_r+0x1e78>
 10244dc:	4839883a 	mov	fp,r9
 10244e0:	d8812604 	addi	r2,sp,1176
 10244e4:	d8800115 	stw	r2,4(sp)
 10244e8:	d9413717 	ldw	r5,1244(sp)
 10244ec:	d8812504 	addi	r2,sp,1172
 10244f0:	d8800215 	stw	r2,8(sp)
 10244f4:	d8812104 	addi	r2,sp,1156
 10244f8:	df000015 	stw	fp,0(sp)
 10244fc:	d8800315 	stw	r2,12(sp)
 1024500:	b009883a 	mov	r4,r22
 1024504:	900d883a 	mov	r6,r18
 1024508:	01c00084 	movi	r7,2
 102450c:	da013f15 	stw	r8,1276(sp)
 1024510:	da413e15 	stw	r9,1272(sp)
 1024514:	10251340 	call	1025134 <_dtoa_r>
 1024518:	d8813115 	stw	r2,1220(sp)
 102451c:	008019c4 	movi	r2,103
 1024520:	da013f17 	ldw	r8,1276(sp)
 1024524:	da413e17 	ldw	r9,1272(sp)
 1024528:	80800226 	beq	r16,r2,1024534 <___vfprintf_internal_r+0x1750>
 102452c:	008011c4 	movi	r2,71
 1024530:	8081101e 	bne	r16,r2,1024974 <___vfprintf_internal_r+0x1b90>
 1024534:	8880004c 	andi	r2,r17,1
 1024538:	1001df26 	beq	r2,zero,1024cb8 <___vfprintf_internal_r+0x1ed4>
 102453c:	db013117 	ldw	r12,1220(sp)
 1024540:	6715883a 	add	r10,r12,fp
 1024544:	d9013717 	ldw	r4,1244(sp)
 1024548:	900b883a 	mov	r5,r18
 102454c:	000d883a 	mov	r6,zero
 1024550:	000f883a 	mov	r7,zero
 1024554:	da013f15 	stw	r8,1276(sp)
 1024558:	da413e15 	stw	r9,1272(sp)
 102455c:	da813d15 	stw	r10,1268(sp)
 1024560:	102d0e80 	call	102d0e8 <__eqdf2>
 1024564:	da013f17 	ldw	r8,1276(sp)
 1024568:	da413e17 	ldw	r9,1272(sp)
 102456c:	da813d17 	ldw	r10,1268(sp)
 1024570:	10016526 	beq	r2,zero,1024b08 <___vfprintf_internal_r+0x1d24>
 1024574:	d8812117 	ldw	r2,1156(sp)
 1024578:	1280062e 	bgeu	r2,r10,1024594 <___vfprintf_internal_r+0x17b0>
 102457c:	01000c04 	movi	r4,48
 1024580:	10c00044 	addi	r3,r2,1
 1024584:	d8c12115 	stw	r3,1156(sp)
 1024588:	11000005 	stb	r4,0(r2)
 102458c:	d8812117 	ldw	r2,1156(sp)
 1024590:	12bffb36 	bltu	r2,r10,1024580 <__alt_data_end+0xfffe70c0>
 1024594:	db013117 	ldw	r12,1220(sp)
 1024598:	1305c83a 	sub	r2,r2,r12
 102459c:	d8813315 	stw	r2,1228(sp)
 10245a0:	008011c4 	movi	r2,71
 10245a4:	a8814a26 	beq	r21,r2,1024ad0 <___vfprintf_internal_r+0x1cec>
 10245a8:	00801944 	movi	r2,101
 10245ac:	14020a0e 	bge	r2,r16,1024dd8 <___vfprintf_internal_r+0x1ff4>
 10245b0:	00801984 	movi	r2,102
 10245b4:	8081b626 	beq	r16,r2,1024c90 <___vfprintf_internal_r+0x1eac>
 10245b8:	db012617 	ldw	r12,1176(sp)
 10245bc:	db013415 	stw	r12,1232(sp)
 10245c0:	db013417 	ldw	r12,1232(sp)
 10245c4:	dac13317 	ldw	r11,1228(sp)
 10245c8:	62c1a816 	blt	r12,r11,1024c6c <___vfprintf_internal_r+0x1e88>
 10245cc:	8c40004c 	andi	r17,r17,1
 10245d0:	8801ca1e 	bne	r17,zero,1024cfc <___vfprintf_internal_r+0x1f18>
 10245d4:	6005883a 	mov	r2,r12
 10245d8:	6001b516 	blt	r12,zero,1024cb0 <___vfprintf_internal_r+0x1ecc>
 10245dc:	dc813417 	ldw	r18,1232(sp)
 10245e0:	df012b07 	ldb	fp,1196(sp)
 10245e4:	e001321e 	bne	fp,zero,1024ab0 <___vfprintf_internal_r+0x1ccc>
 10245e8:	dc412d17 	ldw	r17,1204(sp)
 10245ec:	dd412783 	ldbu	r21,1182(sp)
 10245f0:	d8812b15 	stw	r2,1196(sp)
 10245f4:	dcc12d15 	stw	r19,1204(sp)
 10245f8:	d8013215 	stw	zero,1224(sp)
 10245fc:	003b8d06 	br	1023434 <__alt_data_end+0xfffe5f74>
 1024600:	88c0100c 	andi	r3,r17,64
 1024604:	18008226 	beq	r3,zero,1024810 <___vfprintf_internal_r+0x1a2c>
 1024608:	dac12d17 	ldw	r11,1204(sp)
 102460c:	14c0000b 	ldhu	r19,0(r2)
 1024610:	0039883a 	mov	fp,zero
 1024614:	5ac00104 	addi	r11,r11,4
 1024618:	dac12d15 	stw	r11,1204(sp)
 102461c:	003c8f06 	br	102385c <__alt_data_end+0xfffe639c>
 1024620:	1c000007 	ldb	r16,0(r3)
 1024624:	1805883a 	mov	r2,r3
 1024628:	003a5506 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 102462c:	00800084 	movi	r2,2
 1024630:	003b5e06 	br	10233ac <__alt_data_end+0xfffe5eec>
 1024634:	8880040c 	andi	r2,r17,16
 1024638:	1000091e 	bne	r2,zero,1024660 <___vfprintf_internal_r+0x187c>
 102463c:	8c40100c 	andi	r17,r17,64
 1024640:	88000726 	beq	r17,zero,1024660 <___vfprintf_internal_r+0x187c>
 1024644:	db012d17 	ldw	r12,1204(sp)
 1024648:	dac12f17 	ldw	r11,1212(sp)
 102464c:	60800017 	ldw	r2,0(r12)
 1024650:	63000104 	addi	r12,r12,4
 1024654:	db012d15 	stw	r12,1204(sp)
 1024658:	12c0000d 	sth	r11,0(r2)
 102465c:	003a1e06 	br	1022ed8 <__alt_data_end+0xfffe5a18>
 1024660:	db012d17 	ldw	r12,1204(sp)
 1024664:	dac12f17 	ldw	r11,1212(sp)
 1024668:	60800017 	ldw	r2,0(r12)
 102466c:	63000104 	addi	r12,r12,4
 1024670:	db012d15 	stw	r12,1204(sp)
 1024674:	12c00015 	stw	r11,0(r2)
 1024678:	003a1706 	br	1022ed8 <__alt_data_end+0xfffe5a18>
 102467c:	010040f4 	movhi	r4,259
 1024680:	21029c84 	addi	r4,r4,2674
 1024684:	d9012c15 	stw	r4,1200(sp)
 1024688:	dac12c17 	ldw	r11,1200(sp)
 102468c:	1c87883a 	add	r3,r3,r18
 1024690:	10800044 	addi	r2,r2,1
 1024694:	42c00015 	stw	r11,0(r8)
 1024698:	44800115 	stw	r18,4(r8)
 102469c:	d8c12015 	stw	r3,1152(sp)
 10246a0:	d8811f15 	stw	r2,1148(sp)
 10246a4:	010001c4 	movi	r4,7
 10246a8:	20bee016 	blt	r4,r2,102422c <__alt_data_end+0xfffe6d6c>
 10246ac:	42000204 	addi	r8,r8,8
 10246b0:	003ee506 	br	1024248 <__alt_data_end+0xfffe6d88>
 10246b4:	010040f4 	movhi	r4,259
 10246b8:	21029c84 	addi	r4,r4,2674
 10246bc:	d9012c15 	stw	r4,1200(sp)
 10246c0:	003bd806 	br	1023624 <__alt_data_end+0xfffe6164>
 10246c4:	b009883a 	mov	r4,r22
 10246c8:	b80b883a 	mov	r5,r23
 10246cc:	d9811e04 	addi	r6,sp,1144
 10246d0:	102a02c0 	call	102a02c <__sprint_r>
 10246d4:	103ada1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10246d8:	d8c12017 	ldw	r3,1152(sp)
 10246dc:	da000404 	addi	r8,sp,16
 10246e0:	003d6b06 	br	1023c90 <__alt_data_end+0xfffe67d0>
 10246e4:	d8811f17 	ldw	r2,1148(sp)
 10246e8:	030040f4 	movhi	r12,259
 10246ec:	01000044 	movi	r4,1
 10246f0:	18c00044 	addi	r3,r3,1
 10246f4:	10800044 	addi	r2,r2,1
 10246f8:	63029c04 	addi	r12,r12,2672
 10246fc:	41000115 	stw	r4,4(r8)
 1024700:	43000015 	stw	r12,0(r8)
 1024704:	d8c12015 	stw	r3,1152(sp)
 1024708:	d8811f15 	stw	r2,1148(sp)
 102470c:	010001c4 	movi	r4,7
 1024710:	20804916 	blt	r4,r2,1024838 <___vfprintf_internal_r+0x1a54>
 1024714:	42000204 	addi	r8,r8,8
 1024718:	8000041e 	bne	r16,zero,102472c <___vfprintf_internal_r+0x1948>
 102471c:	dac13317 	ldw	r11,1228(sp)
 1024720:	5800021e 	bne	r11,zero,102472c <___vfprintf_internal_r+0x1948>
 1024724:	8880004c 	andi	r2,r17,1
 1024728:	103bd526 	beq	r2,zero,1023680 <__alt_data_end+0xfffe61c0>
 102472c:	db013817 	ldw	r12,1248(sp)
 1024730:	d8811f17 	ldw	r2,1148(sp)
 1024734:	dac13517 	ldw	r11,1236(sp)
 1024738:	1b07883a 	add	r3,r3,r12
 102473c:	10800044 	addi	r2,r2,1
 1024740:	42c00015 	stw	r11,0(r8)
 1024744:	43000115 	stw	r12,4(r8)
 1024748:	d8c12015 	stw	r3,1152(sp)
 102474c:	d8811f15 	stw	r2,1148(sp)
 1024750:	010001c4 	movi	r4,7
 1024754:	20813016 	blt	r4,r2,1024c18 <___vfprintf_internal_r+0x1e34>
 1024758:	42000204 	addi	r8,r8,8
 102475c:	0421c83a 	sub	r16,zero,r16
 1024760:	0400630e 	bge	zero,r16,10248f0 <___vfprintf_internal_r+0x1b0c>
 1024764:	04800404 	movi	r18,16
 1024768:	94009f0e 	bge	r18,r16,10249e8 <___vfprintf_internal_r+0x1c04>
 102476c:	010040f4 	movhi	r4,259
 1024770:	21029c84 	addi	r4,r4,2674
 1024774:	d9012c15 	stw	r4,1200(sp)
 1024778:	054001c4 	movi	r21,7
 102477c:	00000306 	br	102478c <___vfprintf_internal_r+0x19a8>
 1024780:	42000204 	addi	r8,r8,8
 1024784:	843ffc04 	addi	r16,r16,-16
 1024788:	94009a0e 	bge	r18,r16,10249f4 <___vfprintf_internal_r+0x1c10>
 102478c:	18c00404 	addi	r3,r3,16
 1024790:	10800044 	addi	r2,r2,1
 1024794:	45000015 	stw	r20,0(r8)
 1024798:	44800115 	stw	r18,4(r8)
 102479c:	d8c12015 	stw	r3,1152(sp)
 10247a0:	d8811f15 	stw	r2,1148(sp)
 10247a4:	a8bff60e 	bge	r21,r2,1024780 <__alt_data_end+0xfffe72c0>
 10247a8:	b009883a 	mov	r4,r22
 10247ac:	b80b883a 	mov	r5,r23
 10247b0:	d9811e04 	addi	r6,sp,1144
 10247b4:	102a02c0 	call	102a02c <__sprint_r>
 10247b8:	103aa11e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10247bc:	d8c12017 	ldw	r3,1152(sp)
 10247c0:	d8811f17 	ldw	r2,1148(sp)
 10247c4:	da000404 	addi	r8,sp,16
 10247c8:	003fee06 	br	1024784 <__alt_data_end+0xfffe72c4>
 10247cc:	008011c4 	movi	r2,71
 10247d0:	1400b316 	blt	r2,r16,1024aa0 <___vfprintf_internal_r+0x1cbc>
 10247d4:	030040f4 	movhi	r12,259
 10247d8:	63028e04 	addi	r12,r12,2616
 10247dc:	db013115 	stw	r12,1220(sp)
 10247e0:	00c000c4 	movi	r3,3
 10247e4:	00bfdfc4 	movi	r2,-129
 10247e8:	d8c12b15 	stw	r3,1196(sp)
 10247ec:	88a2703a 	and	r17,r17,r2
 10247f0:	dd412783 	ldbu	r21,1182(sp)
 10247f4:	dcc12d15 	stw	r19,1204(sp)
 10247f8:	1825883a 	mov	r18,r3
 10247fc:	d8013215 	stw	zero,1224(sp)
 1024800:	d8013415 	stw	zero,1232(sp)
 1024804:	003b0b06 	br	1023434 <__alt_data_end+0xfffe5f74>
 1024808:	4825883a 	mov	r18,r9
 102480c:	003cba06 	br	1023af8 <__alt_data_end+0xfffe6638>
 1024810:	db012d17 	ldw	r12,1204(sp)
 1024814:	14c00017 	ldw	r19,0(r2)
 1024818:	0039883a 	mov	fp,zero
 102481c:	63000104 	addi	r12,r12,4
 1024820:	db012d15 	stw	r12,1204(sp)
 1024824:	003c0d06 	br	102385c <__alt_data_end+0xfffe639c>
 1024828:	008040f4 	movhi	r2,259
 102482c:	10828c04 	addi	r2,r2,2608
 1024830:	d8813115 	stw	r2,1220(sp)
 1024834:	003ac406 	br	1023348 <__alt_data_end+0xfffe5e88>
 1024838:	b009883a 	mov	r4,r22
 102483c:	b80b883a 	mov	r5,r23
 1024840:	d9811e04 	addi	r6,sp,1144
 1024844:	102a02c0 	call	102a02c <__sprint_r>
 1024848:	103a7d1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 102484c:	dc012617 	ldw	r16,1176(sp)
 1024850:	d8c12017 	ldw	r3,1152(sp)
 1024854:	da000404 	addi	r8,sp,16
 1024858:	003faf06 	br	1024718 <__alt_data_end+0xfffe7258>
 102485c:	db012e17 	ldw	r12,1208(sp)
 1024860:	1805883a 	mov	r2,r3
 1024864:	dac12d15 	stw	r11,1204(sp)
 1024868:	0319c83a 	sub	r12,zero,r12
 102486c:	db012e15 	stw	r12,1208(sp)
 1024870:	003a7e06 	br	102326c <__alt_data_end+0xfffe5dac>
 1024874:	18800044 	addi	r2,r3,1
 1024878:	8c400814 	ori	r17,r17,32
 102487c:	1c000047 	ldb	r16,1(r3)
 1024880:	0039bf06 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1024884:	b009883a 	mov	r4,r22
 1024888:	b80b883a 	mov	r5,r23
 102488c:	d9811e04 	addi	r6,sp,1144
 1024890:	102a02c0 	call	102a02c <__sprint_r>
 1024894:	103a6a1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024898:	d8c12017 	ldw	r3,1152(sp)
 102489c:	da000404 	addi	r8,sp,16
 10248a0:	003d0c06 	br	1023cd4 <__alt_data_end+0xfffe6814>
 10248a4:	db012817 	ldw	r12,1184(sp)
 10248a8:	d8c13117 	ldw	r3,1220(sp)
 10248ac:	60e5c83a 	sub	r18,r12,r3
 10248b0:	003adb06 	br	1023420 <__alt_data_end+0xfffe5f60>
 10248b4:	da013f15 	stw	r8,1276(sp)
 10248b8:	1022d4c0 	call	1022d4c <strlen>
 10248bc:	1025883a 	mov	r18,r2
 10248c0:	da013f17 	ldw	r8,1276(sp)
 10248c4:	903c8e0e 	bge	r18,zero,1023b00 <__alt_data_end+0xfffe6640>
 10248c8:	0005883a 	mov	r2,zero
 10248cc:	003c8c06 	br	1023b00 <__alt_data_end+0xfffe6640>
 10248d0:	b009883a 	mov	r4,r22
 10248d4:	b80b883a 	mov	r5,r23
 10248d8:	d9811e04 	addi	r6,sp,1144
 10248dc:	102a02c0 	call	102a02c <__sprint_r>
 10248e0:	103a571e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10248e4:	d8c12017 	ldw	r3,1152(sp)
 10248e8:	d8811f17 	ldw	r2,1148(sp)
 10248ec:	da000404 	addi	r8,sp,16
 10248f0:	db013317 	ldw	r12,1228(sp)
 10248f4:	dac13117 	ldw	r11,1220(sp)
 10248f8:	10800044 	addi	r2,r2,1
 10248fc:	60c7883a 	add	r3,r12,r3
 1024900:	42c00015 	stw	r11,0(r8)
 1024904:	43000115 	stw	r12,4(r8)
 1024908:	d8c12015 	stw	r3,1152(sp)
 102490c:	d8811f15 	stw	r2,1148(sp)
 1024910:	010001c4 	movi	r4,7
 1024914:	20bb590e 	bge	r4,r2,102367c <__alt_data_end+0xfffe61bc>
 1024918:	003d7e06 	br	1023f14 <__alt_data_end+0xfffe6a54>
 102491c:	010040f4 	movhi	r4,259
 1024920:	2102a084 	addi	r4,r4,2690
 1024924:	d9013615 	stw	r4,1240(sp)
 1024928:	003af606 	br	1023504 <__alt_data_end+0xfffe6044>
 102492c:	d8812604 	addi	r2,sp,1176
 1024930:	d8800115 	stw	r2,4(sp)
 1024934:	d9413717 	ldw	r5,1244(sp)
 1024938:	d8812504 	addi	r2,sp,1172
 102493c:	d8800215 	stw	r2,8(sp)
 1024940:	d8812104 	addi	r2,sp,1156
 1024944:	da400015 	stw	r9,0(sp)
 1024948:	d8800315 	stw	r2,12(sp)
 102494c:	b009883a 	mov	r4,r22
 1024950:	900d883a 	mov	r6,r18
 1024954:	01c000c4 	movi	r7,3
 1024958:	da013f15 	stw	r8,1276(sp)
 102495c:	da413e15 	stw	r9,1272(sp)
 1024960:	10251340 	call	1025134 <_dtoa_r>
 1024964:	da413e17 	ldw	r9,1272(sp)
 1024968:	da013f17 	ldw	r8,1276(sp)
 102496c:	d8813115 	stw	r2,1220(sp)
 1024970:	4839883a 	mov	fp,r9
 1024974:	dac13117 	ldw	r11,1220(sp)
 1024978:	00801184 	movi	r2,70
 102497c:	5f15883a 	add	r10,r11,fp
 1024980:	a8bef01e 	bne	r21,r2,1024544 <__alt_data_end+0xfffe7084>
 1024984:	59000007 	ldb	r4,0(r11)
 1024988:	00800c04 	movi	r2,48
 102498c:	2080e026 	beq	r4,r2,1024d10 <___vfprintf_internal_r+0x1f2c>
 1024990:	d8c12617 	ldw	r3,1176(sp)
 1024994:	50d5883a 	add	r10,r10,r3
 1024998:	003eea06 	br	1024544 <__alt_data_end+0xfffe7084>
 102499c:	0025883a 	mov	r18,zero
 10249a0:	003db306 	br	1024070 <__alt_data_end+0xfffe6bb0>
 10249a4:	b009883a 	mov	r4,r22
 10249a8:	b80b883a 	mov	r5,r23
 10249ac:	d9811e04 	addi	r6,sp,1144
 10249b0:	102a02c0 	call	102a02c <__sprint_r>
 10249b4:	103a221e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10249b8:	d8c12017 	ldw	r3,1152(sp)
 10249bc:	da000404 	addi	r8,sp,16
 10249c0:	003daa06 	br	102406c <__alt_data_end+0xfffe6bac>
 10249c4:	b009883a 	mov	r4,r22
 10249c8:	b80b883a 	mov	r5,r23
 10249cc:	d9811e04 	addi	r6,sp,1144
 10249d0:	102a02c0 	call	102a02c <__sprint_r>
 10249d4:	103a1a1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 10249d8:	d8812617 	ldw	r2,1176(sp)
 10249dc:	d8c12017 	ldw	r3,1152(sp)
 10249e0:	da000404 	addi	r8,sp,16
 10249e4:	003e2c06 	br	1024298 <__alt_data_end+0xfffe6dd8>
 10249e8:	030040f4 	movhi	r12,259
 10249ec:	63029c84 	addi	r12,r12,2674
 10249f0:	db012c15 	stw	r12,1200(sp)
 10249f4:	dac12c17 	ldw	r11,1200(sp)
 10249f8:	1c07883a 	add	r3,r3,r16
 10249fc:	10800044 	addi	r2,r2,1
 1024a00:	42c00015 	stw	r11,0(r8)
 1024a04:	44000115 	stw	r16,4(r8)
 1024a08:	d8c12015 	stw	r3,1152(sp)
 1024a0c:	d8811f15 	stw	r2,1148(sp)
 1024a10:	010001c4 	movi	r4,7
 1024a14:	20bfae16 	blt	r4,r2,10248d0 <__alt_data_end+0xfffe7410>
 1024a18:	42000204 	addi	r8,r8,8
 1024a1c:	003fb406 	br	10248f0 <__alt_data_end+0xfffe7430>
 1024a20:	030040f4 	movhi	r12,259
 1024a24:	6302a084 	addi	r12,r12,2690
 1024a28:	db013615 	stw	r12,1240(sp)
 1024a2c:	003b3806 	br	1023710 <__alt_data_end+0xfffe6250>
 1024a30:	b009883a 	mov	r4,r22
 1024a34:	b80b883a 	mov	r5,r23
 1024a38:	d9811e04 	addi	r6,sp,1144
 1024a3c:	102a02c0 	call	102a02c <__sprint_r>
 1024a40:	1039ff1e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024a44:	d8812617 	ldw	r2,1176(sp)
 1024a48:	db013317 	ldw	r12,1228(sp)
 1024a4c:	d8c12017 	ldw	r3,1152(sp)
 1024a50:	da000404 	addi	r8,sp,16
 1024a54:	6085c83a 	sub	r2,r12,r2
 1024a58:	003e2006 	br	10242dc <__alt_data_end+0xfffe6e1c>
 1024a5c:	0021883a 	mov	r16,zero
 1024a60:	003e1f06 	br	10242e0 <__alt_data_end+0xfffe6e20>
 1024a64:	00800184 	movi	r2,6
 1024a68:	1240012e 	bgeu	r2,r9,1024a70 <___vfprintf_internal_r+0x1c8c>
 1024a6c:	1013883a 	mov	r9,r2
 1024a70:	4825883a 	mov	r18,r9
 1024a74:	4805883a 	mov	r2,r9
 1024a78:	48009e16 	blt	r9,zero,1024cf4 <___vfprintf_internal_r+0x1f10>
 1024a7c:	d8812b15 	stw	r2,1196(sp)
 1024a80:	008040f4 	movhi	r2,259
 1024a84:	10829a04 	addi	r2,r2,2664
 1024a88:	d8813115 	stw	r2,1220(sp)
 1024a8c:	dcc12d15 	stw	r19,1204(sp)
 1024a90:	d8013215 	stw	zero,1224(sp)
 1024a94:	d8013415 	stw	zero,1232(sp)
 1024a98:	0005883a 	mov	r2,zero
 1024a9c:	003a6c06 	br	1023450 <__alt_data_end+0xfffe5f90>
 1024aa0:	008040f4 	movhi	r2,259
 1024aa4:	10828f04 	addi	r2,r2,2620
 1024aa8:	d8813115 	stw	r2,1220(sp)
 1024aac:	003f4c06 	br	10247e0 <__alt_data_end+0xfffe7320>
 1024ab0:	00c00b44 	movi	r3,45
 1024ab4:	d8812b15 	stw	r2,1196(sp)
 1024ab8:	dc412d17 	ldw	r17,1204(sp)
 1024abc:	d8c12785 	stb	r3,1182(sp)
 1024ac0:	dcc12d15 	stw	r19,1204(sp)
 1024ac4:	d8013215 	stw	zero,1224(sp)
 1024ac8:	00800b44 	movi	r2,45
 1024acc:	003a5d06 	br	1023444 <__alt_data_end+0xfffe5f84>
 1024ad0:	d8c12617 	ldw	r3,1176(sp)
 1024ad4:	00bfff44 	movi	r2,-3
 1024ad8:	18800d16 	blt	r3,r2,1024b10 <___vfprintf_internal_r+0x1d2c>
 1024adc:	48c00c16 	blt	r9,r3,1024b10 <___vfprintf_internal_r+0x1d2c>
 1024ae0:	d8c13415 	stw	r3,1232(sp)
 1024ae4:	040019c4 	movi	r16,103
 1024ae8:	003eb506 	br	10245c0 <__alt_data_end+0xfffe7100>
 1024aec:	05400b44 	movi	r21,45
 1024af0:	dd412785 	stb	r21,1182(sp)
 1024af4:	003a0f06 	br	1023334 <__alt_data_end+0xfffe5e74>
 1024af8:	010040f4 	movhi	r4,259
 1024afc:	21029c84 	addi	r4,r4,2674
 1024b00:	d9012c15 	stw	r4,1200(sp)
 1024b04:	003cb106 	br	1023dcc <__alt_data_end+0xfffe690c>
 1024b08:	5005883a 	mov	r2,r10
 1024b0c:	003ea106 	br	1024594 <__alt_data_end+0xfffe70d4>
 1024b10:	843fff84 	addi	r16,r16,-2
 1024b14:	1f3fffc4 	addi	fp,r3,-1
 1024b18:	df012615 	stw	fp,1176(sp)
 1024b1c:	dc0122c5 	stb	r16,1163(sp)
 1024b20:	e0009516 	blt	fp,zero,1024d78 <___vfprintf_internal_r+0x1f94>
 1024b24:	00800ac4 	movi	r2,43
 1024b28:	d8812305 	stb	r2,1164(sp)
 1024b2c:	00800244 	movi	r2,9
 1024b30:	1700690e 	bge	r2,fp,1024cd8 <___vfprintf_internal_r+0x1ef4>
 1024b34:	dd4122c4 	addi	r21,sp,1163
 1024b38:	dc012c15 	stw	r16,1200(sp)
 1024b3c:	8825883a 	mov	r18,r17
 1024b40:	a821883a 	mov	r16,r21
 1024b44:	4023883a 	mov	r17,r8
 1024b48:	e009883a 	mov	r4,fp
 1024b4c:	01400284 	movi	r5,10
 1024b50:	1022bac0 	call	1022bac <__modsi3>
 1024b54:	10800c04 	addi	r2,r2,48
 1024b58:	843fffc4 	addi	r16,r16,-1
 1024b5c:	e009883a 	mov	r4,fp
 1024b60:	01400284 	movi	r5,10
 1024b64:	80800005 	stb	r2,0(r16)
 1024b68:	1022b580 	call	1022b58 <__divsi3>
 1024b6c:	1039883a 	mov	fp,r2
 1024b70:	00800244 	movi	r2,9
 1024b74:	173ff416 	blt	r2,fp,1024b48 <__alt_data_end+0xfffe7688>
 1024b78:	8811883a 	mov	r8,r17
 1024b7c:	e0800c04 	addi	r2,fp,48
 1024b80:	9023883a 	mov	r17,r18
 1024b84:	8025883a 	mov	r18,r16
 1024b88:	913fffc4 	addi	r4,r18,-1
 1024b8c:	90bfffc5 	stb	r2,-1(r18)
 1024b90:	dc012c17 	ldw	r16,1200(sp)
 1024b94:	25408e2e 	bgeu	r4,r21,1024dd0 <___vfprintf_internal_r+0x1fec>
 1024b98:	d9412384 	addi	r5,sp,1166
 1024b9c:	2c8bc83a 	sub	r5,r5,r18
 1024ba0:	d8c12344 	addi	r3,sp,1165
 1024ba4:	a94b883a 	add	r5,r21,r5
 1024ba8:	00000106 	br	1024bb0 <___vfprintf_internal_r+0x1dcc>
 1024bac:	20800003 	ldbu	r2,0(r4)
 1024bb0:	18800005 	stb	r2,0(r3)
 1024bb4:	18c00044 	addi	r3,r3,1
 1024bb8:	21000044 	addi	r4,r4,1
 1024bbc:	197ffb1e 	bne	r3,r5,1024bac <__alt_data_end+0xfffe76ec>
 1024bc0:	d8812304 	addi	r2,sp,1164
 1024bc4:	1485c83a 	sub	r2,r2,r18
 1024bc8:	d8c12344 	addi	r3,sp,1165
 1024bcc:	1885883a 	add	r2,r3,r2
 1024bd0:	dac13317 	ldw	r11,1228(sp)
 1024bd4:	156bc83a 	sub	r21,r2,r21
 1024bd8:	dd413a15 	stw	r21,1256(sp)
 1024bdc:	00800044 	movi	r2,1
 1024be0:	5d65883a 	add	r18,r11,r21
 1024be4:	12c0770e 	bge	r2,r11,1024dc4 <___vfprintf_internal_r+0x1fe0>
 1024be8:	94800044 	addi	r18,r18,1
 1024bec:	9005883a 	mov	r2,r18
 1024bf0:	90007216 	blt	r18,zero,1024dbc <___vfprintf_internal_r+0x1fd8>
 1024bf4:	d8013415 	stw	zero,1232(sp)
 1024bf8:	003e7906 	br	10245e0 <__alt_data_end+0xfffe7120>
 1024bfc:	da412b15 	stw	r9,1196(sp)
 1024c00:	dd412783 	ldbu	r21,1182(sp)
 1024c04:	4825883a 	mov	r18,r9
 1024c08:	dcc12d15 	stw	r19,1204(sp)
 1024c0c:	d8013215 	stw	zero,1224(sp)
 1024c10:	d8013415 	stw	zero,1232(sp)
 1024c14:	003a0706 	br	1023434 <__alt_data_end+0xfffe5f74>
 1024c18:	b009883a 	mov	r4,r22
 1024c1c:	b80b883a 	mov	r5,r23
 1024c20:	d9811e04 	addi	r6,sp,1144
 1024c24:	102a02c0 	call	102a02c <__sprint_r>
 1024c28:	1039851e 	bne	r2,zero,1023240 <__alt_data_end+0xfffe5d80>
 1024c2c:	dc012617 	ldw	r16,1176(sp)
 1024c30:	d8c12017 	ldw	r3,1152(sp)
 1024c34:	d8811f17 	ldw	r2,1148(sp)
 1024c38:	da000404 	addi	r8,sp,16
 1024c3c:	003ec706 	br	102475c <__alt_data_end+0xfffe729c>
 1024c40:	483e1a1e 	bne	r9,zero,10244ac <__alt_data_end+0xfffe6fec>
 1024c44:	9013883a 	mov	r9,r18
 1024c48:	003e1806 	br	10244ac <__alt_data_end+0xfffe6fec>
 1024c4c:	00c00b44 	movi	r3,45
 1024c50:	64a0003c 	xorhi	r18,r12,32768
 1024c54:	d8c12b05 	stb	r3,1196(sp)
 1024c58:	003e1a06 	br	10244c4 <__alt_data_end+0xfffe7004>
 1024c5c:	4f000044 	addi	fp,r9,1
 1024c60:	003e1f06 	br	10244e0 <__alt_data_end+0xfffe7020>
 1024c64:	02400184 	movi	r9,6
 1024c68:	003e1006 	br	10244ac <__alt_data_end+0xfffe6fec>
 1024c6c:	d8c13417 	ldw	r3,1232(sp)
 1024c70:	00c04b0e 	bge	zero,r3,1024da0 <___vfprintf_internal_r+0x1fbc>
 1024c74:	04800044 	movi	r18,1
 1024c78:	dac13317 	ldw	r11,1228(sp)
 1024c7c:	92e5883a 	add	r18,r18,r11
 1024c80:	9005883a 	mov	r2,r18
 1024c84:	903e560e 	bge	r18,zero,10245e0 <__alt_data_end+0xfffe7120>
 1024c88:	0005883a 	mov	r2,zero
 1024c8c:	003e5406 	br	10245e0 <__alt_data_end+0xfffe7120>
 1024c90:	d8c12617 	ldw	r3,1176(sp)
 1024c94:	d8c13415 	stw	r3,1232(sp)
 1024c98:	00c03b0e 	bge	zero,r3,1024d88 <___vfprintf_internal_r+0x1fa4>
 1024c9c:	4800081e 	bne	r9,zero,1024cc0 <___vfprintf_internal_r+0x1edc>
 1024ca0:	8c40004c 	andi	r17,r17,1
 1024ca4:	8800061e 	bne	r17,zero,1024cc0 <___vfprintf_internal_r+0x1edc>
 1024ca8:	1805883a 	mov	r2,r3
 1024cac:	183e4b0e 	bge	r3,zero,10245dc <__alt_data_end+0xfffe711c>
 1024cb0:	0005883a 	mov	r2,zero
 1024cb4:	003e4906 	br	10245dc <__alt_data_end+0xfffe711c>
 1024cb8:	d8812117 	ldw	r2,1156(sp)
 1024cbc:	003e3506 	br	1024594 <__alt_data_end+0xfffe70d4>
 1024cc0:	dac13417 	ldw	r11,1232(sp)
 1024cc4:	4a400044 	addi	r9,r9,1
 1024cc8:	5a65883a 	add	r18,r11,r9
 1024ccc:	9005883a 	mov	r2,r18
 1024cd0:	903e430e 	bge	r18,zero,10245e0 <__alt_data_end+0xfffe7120>
 1024cd4:	003fec06 	br	1024c88 <__alt_data_end+0xfffe77c8>
 1024cd8:	00800c04 	movi	r2,48
 1024cdc:	e0c00c04 	addi	r3,fp,48
 1024ce0:	d8812345 	stb	r2,1165(sp)
 1024ce4:	d8c12385 	stb	r3,1166(sp)
 1024ce8:	d88123c4 	addi	r2,sp,1167
 1024cec:	dd4122c4 	addi	r21,sp,1163
 1024cf0:	003fb706 	br	1024bd0 <__alt_data_end+0xfffe7710>
 1024cf4:	0005883a 	mov	r2,zero
 1024cf8:	003f6006 	br	1024a7c <__alt_data_end+0xfffe75bc>
 1024cfc:	db013417 	ldw	r12,1232(sp)
 1024d00:	64800044 	addi	r18,r12,1
 1024d04:	9005883a 	mov	r2,r18
 1024d08:	903e350e 	bge	r18,zero,10245e0 <__alt_data_end+0xfffe7120>
 1024d0c:	003fde06 	br	1024c88 <__alt_data_end+0xfffe77c8>
 1024d10:	d9013717 	ldw	r4,1244(sp)
 1024d14:	900b883a 	mov	r5,r18
 1024d18:	000d883a 	mov	r6,zero
 1024d1c:	000f883a 	mov	r7,zero
 1024d20:	da013f15 	stw	r8,1276(sp)
 1024d24:	da413e15 	stw	r9,1272(sp)
 1024d28:	da813d15 	stw	r10,1268(sp)
 1024d2c:	102d0e80 	call	102d0e8 <__eqdf2>
 1024d30:	da013f17 	ldw	r8,1276(sp)
 1024d34:	da413e17 	ldw	r9,1272(sp)
 1024d38:	da813d17 	ldw	r10,1268(sp)
 1024d3c:	103f1426 	beq	r2,zero,1024990 <__alt_data_end+0xfffe74d0>
 1024d40:	00800044 	movi	r2,1
 1024d44:	1707c83a 	sub	r3,r2,fp
 1024d48:	d8c12615 	stw	r3,1176(sp)
 1024d4c:	003f1106 	br	1024994 <__alt_data_end+0xfffe74d4>
 1024d50:	dac12d17 	ldw	r11,1204(sp)
 1024d54:	5a400017 	ldw	r9,0(r11)
 1024d58:	5ac00104 	addi	r11,r11,4
 1024d5c:	dac12d15 	stw	r11,1204(sp)
 1024d60:	483ec60e 	bge	r9,zero,102487c <__alt_data_end+0xfffe73bc>
 1024d64:	027fffc4 	movi	r9,-1
 1024d68:	1c000047 	ldb	r16,1(r3)
 1024d6c:	00388406 	br	1022f80 <__alt_data_end+0xfffe5ac0>
 1024d70:	043fffc4 	movi	r16,-1
 1024d74:	00391006 	br	10231b8 <__alt_data_end+0xfffe5cf8>
 1024d78:	00800b44 	movi	r2,45
 1024d7c:	0739c83a 	sub	fp,zero,fp
 1024d80:	d8812305 	stb	r2,1164(sp)
 1024d84:	003f6906 	br	1024b2c <__alt_data_end+0xfffe766c>
 1024d88:	4800081e 	bne	r9,zero,1024dac <___vfprintf_internal_r+0x1fc8>
 1024d8c:	8c40004c 	andi	r17,r17,1
 1024d90:	8800061e 	bne	r17,zero,1024dac <___vfprintf_internal_r+0x1fc8>
 1024d94:	00800044 	movi	r2,1
 1024d98:	1025883a 	mov	r18,r2
 1024d9c:	003e1006 	br	10245e0 <__alt_data_end+0xfffe7120>
 1024da0:	04800084 	movi	r18,2
 1024da4:	90e5c83a 	sub	r18,r18,r3
 1024da8:	003fb306 	br	1024c78 <__alt_data_end+0xfffe77b8>
 1024dac:	4c800084 	addi	r18,r9,2
 1024db0:	9005883a 	mov	r2,r18
 1024db4:	903e0a0e 	bge	r18,zero,10245e0 <__alt_data_end+0xfffe7120>
 1024db8:	003fb306 	br	1024c88 <__alt_data_end+0xfffe77c8>
 1024dbc:	0005883a 	mov	r2,zero
 1024dc0:	003f8c06 	br	1024bf4 <__alt_data_end+0xfffe7734>
 1024dc4:	88a2703a 	and	r17,r17,r2
 1024dc8:	883f8826 	beq	r17,zero,1024bec <__alt_data_end+0xfffe772c>
 1024dcc:	003f8606 	br	1024be8 <__alt_data_end+0xfffe7728>
 1024dd0:	d8812344 	addi	r2,sp,1165
 1024dd4:	003f7e06 	br	1024bd0 <__alt_data_end+0xfffe7710>
 1024dd8:	d8c12617 	ldw	r3,1176(sp)
 1024ddc:	003f4d06 	br	1024b14 <__alt_data_end+0xfffe7654>

01024de0 <__vfprintf_internal>:
 1024de0:	2007883a 	mov	r3,r4
 1024de4:	010040f4 	movhi	r4,259
 1024de8:	2109b504 	addi	r4,r4,9940
 1024dec:	21000017 	ldw	r4,0(r4)
 1024df0:	2805883a 	mov	r2,r5
 1024df4:	300f883a 	mov	r7,r6
 1024df8:	180b883a 	mov	r5,r3
 1024dfc:	100d883a 	mov	r6,r2
 1024e00:	1022de41 	jmpi	1022de4 <___vfprintf_internal_r>

01024e04 <__swsetup_r>:
 1024e04:	008040f4 	movhi	r2,259
 1024e08:	defffd04 	addi	sp,sp,-12
 1024e0c:	1089b504 	addi	r2,r2,9940
 1024e10:	dc400115 	stw	r17,4(sp)
 1024e14:	2023883a 	mov	r17,r4
 1024e18:	11000017 	ldw	r4,0(r2)
 1024e1c:	dc000015 	stw	r16,0(sp)
 1024e20:	dfc00215 	stw	ra,8(sp)
 1024e24:	2821883a 	mov	r16,r5
 1024e28:	20000226 	beq	r4,zero,1024e34 <__swsetup_r+0x30>
 1024e2c:	20c00e17 	ldw	r3,56(r4)
 1024e30:	18002e26 	beq	r3,zero,1024eec <__swsetup_r+0xe8>
 1024e34:	8080030b 	ldhu	r2,12(r16)
 1024e38:	10c0020c 	andi	r3,r2,8
 1024e3c:	100d883a 	mov	r6,r2
 1024e40:	18000f26 	beq	r3,zero,1024e80 <__swsetup_r+0x7c>
 1024e44:	80c00417 	ldw	r3,16(r16)
 1024e48:	18001526 	beq	r3,zero,1024ea0 <__swsetup_r+0x9c>
 1024e4c:	1100004c 	andi	r4,r2,1
 1024e50:	20001c1e 	bne	r4,zero,1024ec4 <__swsetup_r+0xc0>
 1024e54:	1080008c 	andi	r2,r2,2
 1024e58:	1000261e 	bne	r2,zero,1024ef4 <__swsetup_r+0xf0>
 1024e5c:	80800517 	ldw	r2,20(r16)
 1024e60:	80800215 	stw	r2,8(r16)
 1024e64:	18001c26 	beq	r3,zero,1024ed8 <__swsetup_r+0xd4>
 1024e68:	0005883a 	mov	r2,zero
 1024e6c:	dfc00217 	ldw	ra,8(sp)
 1024e70:	dc400117 	ldw	r17,4(sp)
 1024e74:	dc000017 	ldw	r16,0(sp)
 1024e78:	dec00304 	addi	sp,sp,12
 1024e7c:	f800283a 	ret
 1024e80:	3080040c 	andi	r2,r6,16
 1024e84:	10001726 	beq	r2,zero,1024ee4 <__swsetup_r+0xe0>
 1024e88:	3080010c 	andi	r2,r6,4
 1024e8c:	10001b1e 	bne	r2,zero,1024efc <__swsetup_r+0xf8>
 1024e90:	80c00417 	ldw	r3,16(r16)
 1024e94:	30800214 	ori	r2,r6,8
 1024e98:	8080030d 	sth	r2,12(r16)
 1024e9c:	183feb1e 	bne	r3,zero,1024e4c <__alt_data_end+0xfffe798c>
 1024ea0:	1140a00c 	andi	r5,r2,640
 1024ea4:	01008004 	movi	r4,512
 1024ea8:	293fe826 	beq	r5,r4,1024e4c <__alt_data_end+0xfffe798c>
 1024eac:	8809883a 	mov	r4,r17
 1024eb0:	800b883a 	mov	r5,r16
 1024eb4:	102795c0 	call	102795c <__smakebuf_r>
 1024eb8:	8080030b 	ldhu	r2,12(r16)
 1024ebc:	80c00417 	ldw	r3,16(r16)
 1024ec0:	003fe206 	br	1024e4c <__alt_data_end+0xfffe798c>
 1024ec4:	80800517 	ldw	r2,20(r16)
 1024ec8:	80000215 	stw	zero,8(r16)
 1024ecc:	0085c83a 	sub	r2,zero,r2
 1024ed0:	80800615 	stw	r2,24(r16)
 1024ed4:	183fe41e 	bne	r3,zero,1024e68 <__alt_data_end+0xfffe79a8>
 1024ed8:	8080030b 	ldhu	r2,12(r16)
 1024edc:	1080200c 	andi	r2,r2,128
 1024ee0:	103fe226 	beq	r2,zero,1024e6c <__alt_data_end+0xfffe79ac>
 1024ee4:	00bfffc4 	movi	r2,-1
 1024ee8:	003fe006 	br	1024e6c <__alt_data_end+0xfffe79ac>
 1024eec:	1026e040 	call	1026e04 <__sinit>
 1024ef0:	003fd006 	br	1024e34 <__alt_data_end+0xfffe7974>
 1024ef4:	0005883a 	mov	r2,zero
 1024ef8:	003fd906 	br	1024e60 <__alt_data_end+0xfffe79a0>
 1024efc:	81400c17 	ldw	r5,48(r16)
 1024f00:	28000626 	beq	r5,zero,1024f1c <__swsetup_r+0x118>
 1024f04:	80801004 	addi	r2,r16,64
 1024f08:	28800326 	beq	r5,r2,1024f18 <__swsetup_r+0x114>
 1024f0c:	8809883a 	mov	r4,r17
 1024f10:	1026f780 	call	1026f78 <_free_r>
 1024f14:	8180030b 	ldhu	r6,12(r16)
 1024f18:	80000c15 	stw	zero,48(r16)
 1024f1c:	80c00417 	ldw	r3,16(r16)
 1024f20:	00bff6c4 	movi	r2,-37
 1024f24:	118c703a 	and	r6,r2,r6
 1024f28:	80000115 	stw	zero,4(r16)
 1024f2c:	80c00015 	stw	r3,0(r16)
 1024f30:	003fd806 	br	1024e94 <__alt_data_end+0xfffe79d4>

01024f34 <quorem>:
 1024f34:	defff704 	addi	sp,sp,-36
 1024f38:	dc800215 	stw	r18,8(sp)
 1024f3c:	20800417 	ldw	r2,16(r4)
 1024f40:	2c800417 	ldw	r18,16(r5)
 1024f44:	dfc00815 	stw	ra,32(sp)
 1024f48:	ddc00715 	stw	r23,28(sp)
 1024f4c:	dd800615 	stw	r22,24(sp)
 1024f50:	dd400515 	stw	r21,20(sp)
 1024f54:	dd000415 	stw	r20,16(sp)
 1024f58:	dcc00315 	stw	r19,12(sp)
 1024f5c:	dc400115 	stw	r17,4(sp)
 1024f60:	dc000015 	stw	r16,0(sp)
 1024f64:	14807116 	blt	r2,r18,102512c <quorem+0x1f8>
 1024f68:	94bfffc4 	addi	r18,r18,-1
 1024f6c:	94ad883a 	add	r22,r18,r18
 1024f70:	b5ad883a 	add	r22,r22,r22
 1024f74:	2c400504 	addi	r17,r5,20
 1024f78:	8da9883a 	add	r20,r17,r22
 1024f7c:	25400504 	addi	r21,r4,20
 1024f80:	282f883a 	mov	r23,r5
 1024f84:	adad883a 	add	r22,r21,r22
 1024f88:	a1400017 	ldw	r5,0(r20)
 1024f8c:	2021883a 	mov	r16,r4
 1024f90:	b1000017 	ldw	r4,0(r22)
 1024f94:	29400044 	addi	r5,r5,1
 1024f98:	1022c080 	call	1022c08 <__udivsi3>
 1024f9c:	1027883a 	mov	r19,r2
 1024fa0:	10002c26 	beq	r2,zero,1025054 <quorem+0x120>
 1024fa4:	a813883a 	mov	r9,r21
 1024fa8:	8811883a 	mov	r8,r17
 1024fac:	0009883a 	mov	r4,zero
 1024fb0:	000d883a 	mov	r6,zero
 1024fb4:	41c00017 	ldw	r7,0(r8)
 1024fb8:	49400017 	ldw	r5,0(r9)
 1024fbc:	42000104 	addi	r8,r8,4
 1024fc0:	38bfffcc 	andi	r2,r7,65535
 1024fc4:	14c5383a 	mul	r2,r2,r19
 1024fc8:	380ed43a 	srli	r7,r7,16
 1024fcc:	28ffffcc 	andi	r3,r5,65535
 1024fd0:	2085883a 	add	r2,r4,r2
 1024fd4:	1008d43a 	srli	r4,r2,16
 1024fd8:	3ccf383a 	mul	r7,r7,r19
 1024fdc:	198d883a 	add	r6,r3,r6
 1024fe0:	10ffffcc 	andi	r3,r2,65535
 1024fe4:	30c7c83a 	sub	r3,r6,r3
 1024fe8:	280ad43a 	srli	r5,r5,16
 1024fec:	21c9883a 	add	r4,r4,r7
 1024ff0:	180dd43a 	srai	r6,r3,16
 1024ff4:	20bfffcc 	andi	r2,r4,65535
 1024ff8:	288bc83a 	sub	r5,r5,r2
 1024ffc:	298b883a 	add	r5,r5,r6
 1025000:	280e943a 	slli	r7,r5,16
 1025004:	18ffffcc 	andi	r3,r3,65535
 1025008:	2008d43a 	srli	r4,r4,16
 102500c:	38ceb03a 	or	r7,r7,r3
 1025010:	49c00015 	stw	r7,0(r9)
 1025014:	280dd43a 	srai	r6,r5,16
 1025018:	4a400104 	addi	r9,r9,4
 102501c:	a23fe52e 	bgeu	r20,r8,1024fb4 <__alt_data_end+0xfffe7af4>
 1025020:	b0800017 	ldw	r2,0(r22)
 1025024:	10000b1e 	bne	r2,zero,1025054 <quorem+0x120>
 1025028:	b0bfff04 	addi	r2,r22,-4
 102502c:	a880082e 	bgeu	r21,r2,1025050 <quorem+0x11c>
 1025030:	b0ffff17 	ldw	r3,-4(r22)
 1025034:	18000326 	beq	r3,zero,1025044 <quorem+0x110>
 1025038:	00000506 	br	1025050 <quorem+0x11c>
 102503c:	10c00017 	ldw	r3,0(r2)
 1025040:	1800031e 	bne	r3,zero,1025050 <quorem+0x11c>
 1025044:	10bfff04 	addi	r2,r2,-4
 1025048:	94bfffc4 	addi	r18,r18,-1
 102504c:	a8bffb36 	bltu	r21,r2,102503c <__alt_data_end+0xfffe7b7c>
 1025050:	84800415 	stw	r18,16(r16)
 1025054:	8009883a 	mov	r4,r16
 1025058:	b80b883a 	mov	r5,r23
 102505c:	102901c0 	call	102901c <__mcmp>
 1025060:	10002616 	blt	r2,zero,10250fc <quorem+0x1c8>
 1025064:	9cc00044 	addi	r19,r19,1
 1025068:	a80d883a 	mov	r6,r21
 102506c:	000b883a 	mov	r5,zero
 1025070:	31000017 	ldw	r4,0(r6)
 1025074:	88800017 	ldw	r2,0(r17)
 1025078:	31800104 	addi	r6,r6,4
 102507c:	20ffffcc 	andi	r3,r4,65535
 1025080:	194b883a 	add	r5,r3,r5
 1025084:	10ffffcc 	andi	r3,r2,65535
 1025088:	28c7c83a 	sub	r3,r5,r3
 102508c:	1004d43a 	srli	r2,r2,16
 1025090:	2008d43a 	srli	r4,r4,16
 1025094:	180bd43a 	srai	r5,r3,16
 1025098:	18ffffcc 	andi	r3,r3,65535
 102509c:	2089c83a 	sub	r4,r4,r2
 10250a0:	2149883a 	add	r4,r4,r5
 10250a4:	2004943a 	slli	r2,r4,16
 10250a8:	8c400104 	addi	r17,r17,4
 10250ac:	200bd43a 	srai	r5,r4,16
 10250b0:	10c6b03a 	or	r3,r2,r3
 10250b4:	30ffff15 	stw	r3,-4(r6)
 10250b8:	a47fed2e 	bgeu	r20,r17,1025070 <__alt_data_end+0xfffe7bb0>
 10250bc:	9485883a 	add	r2,r18,r18
 10250c0:	1085883a 	add	r2,r2,r2
 10250c4:	a887883a 	add	r3,r21,r2
 10250c8:	18800017 	ldw	r2,0(r3)
 10250cc:	10000b1e 	bne	r2,zero,10250fc <quorem+0x1c8>
 10250d0:	18bfff04 	addi	r2,r3,-4
 10250d4:	a880082e 	bgeu	r21,r2,10250f8 <quorem+0x1c4>
 10250d8:	18ffff17 	ldw	r3,-4(r3)
 10250dc:	18000326 	beq	r3,zero,10250ec <quorem+0x1b8>
 10250e0:	00000506 	br	10250f8 <quorem+0x1c4>
 10250e4:	10c00017 	ldw	r3,0(r2)
 10250e8:	1800031e 	bne	r3,zero,10250f8 <quorem+0x1c4>
 10250ec:	10bfff04 	addi	r2,r2,-4
 10250f0:	94bfffc4 	addi	r18,r18,-1
 10250f4:	a8bffb36 	bltu	r21,r2,10250e4 <__alt_data_end+0xfffe7c24>
 10250f8:	84800415 	stw	r18,16(r16)
 10250fc:	9805883a 	mov	r2,r19
 1025100:	dfc00817 	ldw	ra,32(sp)
 1025104:	ddc00717 	ldw	r23,28(sp)
 1025108:	dd800617 	ldw	r22,24(sp)
 102510c:	dd400517 	ldw	r21,20(sp)
 1025110:	dd000417 	ldw	r20,16(sp)
 1025114:	dcc00317 	ldw	r19,12(sp)
 1025118:	dc800217 	ldw	r18,8(sp)
 102511c:	dc400117 	ldw	r17,4(sp)
 1025120:	dc000017 	ldw	r16,0(sp)
 1025124:	dec00904 	addi	sp,sp,36
 1025128:	f800283a 	ret
 102512c:	0005883a 	mov	r2,zero
 1025130:	003ff306 	br	1025100 <__alt_data_end+0xfffe7c40>

01025134 <_dtoa_r>:
 1025134:	20801017 	ldw	r2,64(r4)
 1025138:	deffde04 	addi	sp,sp,-136
 102513c:	dd401d15 	stw	r21,116(sp)
 1025140:	dcc01b15 	stw	r19,108(sp)
 1025144:	dc801a15 	stw	r18,104(sp)
 1025148:	dc401915 	stw	r17,100(sp)
 102514c:	dc001815 	stw	r16,96(sp)
 1025150:	dfc02115 	stw	ra,132(sp)
 1025154:	df002015 	stw	fp,128(sp)
 1025158:	ddc01f15 	stw	r23,124(sp)
 102515c:	dd801e15 	stw	r22,120(sp)
 1025160:	dd001c15 	stw	r20,112(sp)
 1025164:	d9c00315 	stw	r7,12(sp)
 1025168:	2021883a 	mov	r16,r4
 102516c:	302b883a 	mov	r21,r6
 1025170:	2825883a 	mov	r18,r5
 1025174:	dc402417 	ldw	r17,144(sp)
 1025178:	3027883a 	mov	r19,r6
 102517c:	10000826 	beq	r2,zero,10251a0 <_dtoa_r+0x6c>
 1025180:	21801117 	ldw	r6,68(r4)
 1025184:	00c00044 	movi	r3,1
 1025188:	100b883a 	mov	r5,r2
 102518c:	1986983a 	sll	r3,r3,r6
 1025190:	11800115 	stw	r6,4(r2)
 1025194:	10c00215 	stw	r3,8(r2)
 1025198:	10288040 	call	1028804 <_Bfree>
 102519c:	80001015 	stw	zero,64(r16)
 10251a0:	a8002d16 	blt	r21,zero,1025258 <_dtoa_r+0x124>
 10251a4:	88000015 	stw	zero,0(r17)
 10251a8:	a8dffc2c 	andhi	r3,r21,32752
 10251ac:	009ffc34 	movhi	r2,32752
 10251b0:	18801b26 	beq	r3,r2,1025220 <_dtoa_r+0xec>
 10251b4:	9009883a 	mov	r4,r18
 10251b8:	980b883a 	mov	r5,r19
 10251bc:	000d883a 	mov	r6,zero
 10251c0:	000f883a 	mov	r7,zero
 10251c4:	102d0e80 	call	102d0e8 <__eqdf2>
 10251c8:	10002a1e 	bne	r2,zero,1025274 <_dtoa_r+0x140>
 10251cc:	d8c02317 	ldw	r3,140(sp)
 10251d0:	d9002517 	ldw	r4,148(sp)
 10251d4:	00800044 	movi	r2,1
 10251d8:	18800015 	stw	r2,0(r3)
 10251dc:	2001a226 	beq	r4,zero,1025868 <_dtoa_r+0x734>
 10251e0:	008040f4 	movhi	r2,259
 10251e4:	10829c44 	addi	r2,r2,2673
 10251e8:	20800015 	stw	r2,0(r4)
 10251ec:	10bfffc4 	addi	r2,r2,-1
 10251f0:	dfc02117 	ldw	ra,132(sp)
 10251f4:	df002017 	ldw	fp,128(sp)
 10251f8:	ddc01f17 	ldw	r23,124(sp)
 10251fc:	dd801e17 	ldw	r22,120(sp)
 1025200:	dd401d17 	ldw	r21,116(sp)
 1025204:	dd001c17 	ldw	r20,112(sp)
 1025208:	dcc01b17 	ldw	r19,108(sp)
 102520c:	dc801a17 	ldw	r18,104(sp)
 1025210:	dc401917 	ldw	r17,100(sp)
 1025214:	dc001817 	ldw	r16,96(sp)
 1025218:	dec02204 	addi	sp,sp,136
 102521c:	f800283a 	ret
 1025220:	d8c02317 	ldw	r3,140(sp)
 1025224:	0089c3c4 	movi	r2,9999
 1025228:	18800015 	stw	r2,0(r3)
 102522c:	90017c26 	beq	r18,zero,1025820 <_dtoa_r+0x6ec>
 1025230:	008040f4 	movhi	r2,259
 1025234:	1082a804 	addi	r2,r2,2720
 1025238:	d9002517 	ldw	r4,148(sp)
 102523c:	203fec26 	beq	r4,zero,10251f0 <__alt_data_end+0xfffe7d30>
 1025240:	10c000c7 	ldb	r3,3(r2)
 1025244:	18017d1e 	bne	r3,zero,102583c <_dtoa_r+0x708>
 1025248:	10c000c4 	addi	r3,r2,3
 102524c:	d9802517 	ldw	r6,148(sp)
 1025250:	30c00015 	stw	r3,0(r6)
 1025254:	003fe606 	br	10251f0 <__alt_data_end+0xfffe7d30>
 1025258:	04e00034 	movhi	r19,32768
 102525c:	9cffffc4 	addi	r19,r19,-1
 1025260:	00800044 	movi	r2,1
 1025264:	ace6703a 	and	r19,r21,r19
 1025268:	88800015 	stw	r2,0(r17)
 102526c:	982b883a 	mov	r21,r19
 1025270:	003fcd06 	br	10251a8 <__alt_data_end+0xfffe7ce8>
 1025274:	d8800204 	addi	r2,sp,8
 1025278:	a822d53a 	srli	r17,r21,20
 102527c:	d8800015 	stw	r2,0(sp)
 1025280:	8009883a 	mov	r4,r16
 1025284:	900b883a 	mov	r5,r18
 1025288:	980d883a 	mov	r6,r19
 102528c:	d9c00104 	addi	r7,sp,4
 1025290:	10293900 	call	1029390 <__d2b>
 1025294:	1039883a 	mov	fp,r2
 1025298:	88016a1e 	bne	r17,zero,1025844 <_dtoa_r+0x710>
 102529c:	dd000217 	ldw	r20,8(sp)
 10252a0:	dc400117 	ldw	r17,4(sp)
 10252a4:	00befbc4 	movi	r2,-1041
 10252a8:	a463883a 	add	r17,r20,r17
 10252ac:	8882ea16 	blt	r17,r2,1025e58 <_dtoa_r+0xd24>
 10252b0:	00bf0384 	movi	r2,-1010
 10252b4:	1445c83a 	sub	r2,r2,r17
 10252b8:	89010484 	addi	r4,r17,1042
 10252bc:	a8aa983a 	sll	r21,r21,r2
 10252c0:	9108d83a 	srl	r4,r18,r4
 10252c4:	a908b03a 	or	r4,r21,r4
 10252c8:	102dd540 	call	102dd54 <__floatunsidf>
 10252cc:	017f8434 	movhi	r5,65040
 10252d0:	01800044 	movi	r6,1
 10252d4:	1009883a 	mov	r4,r2
 10252d8:	194b883a 	add	r5,r3,r5
 10252dc:	8c7fffc4 	addi	r17,r17,-1
 10252e0:	d9800f15 	stw	r6,60(sp)
 10252e4:	000d883a 	mov	r6,zero
 10252e8:	01cffe34 	movhi	r7,16376
 10252ec:	102d32c0 	call	102d32c <__subdf3>
 10252f0:	0198dbf4 	movhi	r6,25455
 10252f4:	01cff4f4 	movhi	r7,16339
 10252f8:	1009883a 	mov	r4,r2
 10252fc:	180b883a 	mov	r5,r3
 1025300:	3190d844 	addi	r6,r6,17249
 1025304:	39e1e9c4 	addi	r7,r7,-30809
 1025308:	10220bc0 	call	10220bc <__muldf3>
 102530c:	01a2d874 	movhi	r6,35681
 1025310:	01cff1f4 	movhi	r7,16327
 1025314:	180b883a 	mov	r5,r3
 1025318:	31b22cc4 	addi	r6,r6,-14157
 102531c:	39e28a04 	addi	r7,r7,-30168
 1025320:	1009883a 	mov	r4,r2
 1025324:	102c84c0 	call	102c84c <__adddf3>
 1025328:	8809883a 	mov	r4,r17
 102532c:	102d883a 	mov	r22,r2
 1025330:	182b883a 	mov	r21,r3
 1025334:	102dc840 	call	102dc84 <__floatsidf>
 1025338:	019427f4 	movhi	r6,20639
 102533c:	01cff4f4 	movhi	r7,16339
 1025340:	1009883a 	mov	r4,r2
 1025344:	180b883a 	mov	r5,r3
 1025348:	319e7ec4 	addi	r6,r6,31227
 102534c:	39d104c4 	addi	r7,r7,17427
 1025350:	10220bc0 	call	10220bc <__muldf3>
 1025354:	b009883a 	mov	r4,r22
 1025358:	a80b883a 	mov	r5,r21
 102535c:	100d883a 	mov	r6,r2
 1025360:	180f883a 	mov	r7,r3
 1025364:	102c84c0 	call	102c84c <__adddf3>
 1025368:	1009883a 	mov	r4,r2
 102536c:	180b883a 	mov	r5,r3
 1025370:	102d883a 	mov	r22,r2
 1025374:	182b883a 	mov	r21,r3
 1025378:	102dbfc0 	call	102dbfc <__fixdfsi>
 102537c:	b009883a 	mov	r4,r22
 1025380:	a80b883a 	mov	r5,r21
 1025384:	000d883a 	mov	r6,zero
 1025388:	000f883a 	mov	r7,zero
 102538c:	d8800515 	stw	r2,20(sp)
 1025390:	102d24c0 	call	102d24c <__ledf2>
 1025394:	10023116 	blt	r2,zero,1025c5c <_dtoa_r+0xb28>
 1025398:	d8c00517 	ldw	r3,20(sp)
 102539c:	00800584 	movi	r2,22
 10253a0:	10c21f36 	bltu	r2,r3,1025c20 <_dtoa_r+0xaec>
 10253a4:	180490fa 	slli	r2,r3,3
 10253a8:	00c040f4 	movhi	r3,259
 10253ac:	18c2c404 	addi	r3,r3,2832
 10253b0:	1885883a 	add	r2,r3,r2
 10253b4:	11000017 	ldw	r4,0(r2)
 10253b8:	11400117 	ldw	r5,4(r2)
 10253bc:	900d883a 	mov	r6,r18
 10253c0:	980f883a 	mov	r7,r19
 10253c4:	102d16c0 	call	102d16c <__gedf2>
 10253c8:	0082a70e 	bge	zero,r2,1025e68 <_dtoa_r+0xd34>
 10253cc:	d9000517 	ldw	r4,20(sp)
 10253d0:	d8000c15 	stw	zero,48(sp)
 10253d4:	213fffc4 	addi	r4,r4,-1
 10253d8:	d9000515 	stw	r4,20(sp)
 10253dc:	a463c83a 	sub	r17,r20,r17
 10253e0:	8dbfffc4 	addi	r22,r17,-1
 10253e4:	b0021916 	blt	r22,zero,1025c4c <_dtoa_r+0xb18>
 10253e8:	d8000815 	stw	zero,32(sp)
 10253ec:	d8800517 	ldw	r2,20(sp)
 10253f0:	10020e16 	blt	r2,zero,1025c2c <_dtoa_r+0xaf8>
 10253f4:	b0ad883a 	add	r22,r22,r2
 10253f8:	d8800a15 	stw	r2,40(sp)
 10253fc:	d8000915 	stw	zero,36(sp)
 1025400:	d8c00317 	ldw	r3,12(sp)
 1025404:	00800244 	movi	r2,9
 1025408:	10c11a36 	bltu	r2,r3,1025874 <_dtoa_r+0x740>
 102540c:	00800144 	movi	r2,5
 1025410:	10c4fc0e 	bge	r2,r3,1026804 <_dtoa_r+0x16d0>
 1025414:	18ffff04 	addi	r3,r3,-4
 1025418:	d8c00315 	stw	r3,12(sp)
 102541c:	0029883a 	mov	r20,zero
 1025420:	d9800317 	ldw	r6,12(sp)
 1025424:	008000c4 	movi	r2,3
 1025428:	3083bd26 	beq	r6,r2,1026320 <_dtoa_r+0x11ec>
 102542c:	1183670e 	bge	r2,r6,10261cc <_dtoa_r+0x1098>
 1025430:	d8c00317 	ldw	r3,12(sp)
 1025434:	00800104 	movi	r2,4
 1025438:	1882e726 	beq	r3,r2,1025fd8 <_dtoa_r+0xea4>
 102543c:	00800144 	movi	r2,5
 1025440:	1884f21e 	bne	r3,r2,102680c <_dtoa_r+0x16d8>
 1025444:	00800044 	movi	r2,1
 1025448:	d8800b15 	stw	r2,44(sp)
 102544c:	d8c02217 	ldw	r3,136(sp)
 1025450:	d9000517 	ldw	r4,20(sp)
 1025454:	1907883a 	add	r3,r3,r4
 1025458:	19800044 	addi	r6,r3,1
 102545c:	d8c00d15 	stw	r3,52(sp)
 1025460:	d9800615 	stw	r6,24(sp)
 1025464:	0183c30e 	bge	zero,r6,1026374 <_dtoa_r+0x1240>
 1025468:	d9800617 	ldw	r6,24(sp)
 102546c:	3023883a 	mov	r17,r6
 1025470:	80001115 	stw	zero,68(r16)
 1025474:	008005c4 	movi	r2,23
 1025478:	1184f62e 	bgeu	r2,r6,1026854 <_dtoa_r+0x1720>
 102547c:	00c00044 	movi	r3,1
 1025480:	00800104 	movi	r2,4
 1025484:	1085883a 	add	r2,r2,r2
 1025488:	11000504 	addi	r4,r2,20
 102548c:	180b883a 	mov	r5,r3
 1025490:	18c00044 	addi	r3,r3,1
 1025494:	313ffb2e 	bgeu	r6,r4,1025484 <__alt_data_end+0xfffe7fc4>
 1025498:	81401115 	stw	r5,68(r16)
 102549c:	8009883a 	mov	r4,r16
 10254a0:	102875c0 	call	102875c <_Balloc>
 10254a4:	d8800715 	stw	r2,28(sp)
 10254a8:	80801015 	stw	r2,64(r16)
 10254ac:	00800384 	movi	r2,14
 10254b0:	1440fd36 	bltu	r2,r17,10258a8 <_dtoa_r+0x774>
 10254b4:	a000fc26 	beq	r20,zero,10258a8 <_dtoa_r+0x774>
 10254b8:	d8800517 	ldw	r2,20(sp)
 10254bc:	0083b90e 	bge	zero,r2,10263a4 <_dtoa_r+0x1270>
 10254c0:	d8c00517 	ldw	r3,20(sp)
 10254c4:	108003cc 	andi	r2,r2,15
 10254c8:	100490fa 	slli	r2,r2,3
 10254cc:	182fd13a 	srai	r23,r3,4
 10254d0:	00c040f4 	movhi	r3,259
 10254d4:	18c2c404 	addi	r3,r3,2832
 10254d8:	1885883a 	add	r2,r3,r2
 10254dc:	b8c0040c 	andi	r3,r23,16
 10254e0:	12c00017 	ldw	r11,0(r2)
 10254e4:	12800117 	ldw	r10,4(r2)
 10254e8:	18039726 	beq	r3,zero,1026348 <_dtoa_r+0x1214>
 10254ec:	008040f4 	movhi	r2,259
 10254f0:	1082ba04 	addi	r2,r2,2792
 10254f4:	11800817 	ldw	r6,32(r2)
 10254f8:	11c00917 	ldw	r7,36(r2)
 10254fc:	9009883a 	mov	r4,r18
 1025500:	980b883a 	mov	r5,r19
 1025504:	da801615 	stw	r10,88(sp)
 1025508:	dac01515 	stw	r11,84(sp)
 102550c:	10217f00 	call	10217f0 <__divdf3>
 1025510:	da801617 	ldw	r10,88(sp)
 1025514:	dac01517 	ldw	r11,84(sp)
 1025518:	bdc003cc 	andi	r23,r23,15
 102551c:	044000c4 	movi	r17,3
 1025520:	d8800e15 	stw	r2,56(sp)
 1025524:	182b883a 	mov	r21,r3
 1025528:	b8001126 	beq	r23,zero,1025570 <_dtoa_r+0x43c>
 102552c:	050040f4 	movhi	r20,259
 1025530:	a502ba04 	addi	r20,r20,2792
 1025534:	5805883a 	mov	r2,r11
 1025538:	5007883a 	mov	r3,r10
 102553c:	b980004c 	andi	r6,r23,1
 1025540:	1009883a 	mov	r4,r2
 1025544:	b82fd07a 	srai	r23,r23,1
 1025548:	180b883a 	mov	r5,r3
 102554c:	30000426 	beq	r6,zero,1025560 <_dtoa_r+0x42c>
 1025550:	a1800017 	ldw	r6,0(r20)
 1025554:	a1c00117 	ldw	r7,4(r20)
 1025558:	8c400044 	addi	r17,r17,1
 102555c:	10220bc0 	call	10220bc <__muldf3>
 1025560:	a5000204 	addi	r20,r20,8
 1025564:	b83ff51e 	bne	r23,zero,102553c <__alt_data_end+0xfffe807c>
 1025568:	1017883a 	mov	r11,r2
 102556c:	1815883a 	mov	r10,r3
 1025570:	d9000e17 	ldw	r4,56(sp)
 1025574:	a80b883a 	mov	r5,r21
 1025578:	580d883a 	mov	r6,r11
 102557c:	500f883a 	mov	r7,r10
 1025580:	10217f00 	call	10217f0 <__divdf3>
 1025584:	1029883a 	mov	r20,r2
 1025588:	182b883a 	mov	r21,r3
 102558c:	d9800c17 	ldw	r6,48(sp)
 1025590:	30000626 	beq	r6,zero,10255ac <_dtoa_r+0x478>
 1025594:	a009883a 	mov	r4,r20
 1025598:	a80b883a 	mov	r5,r21
 102559c:	000d883a 	mov	r6,zero
 10255a0:	01cffc34 	movhi	r7,16368
 10255a4:	102d24c0 	call	102d24c <__ledf2>
 10255a8:	10043216 	blt	r2,zero,1026674 <_dtoa_r+0x1540>
 10255ac:	8809883a 	mov	r4,r17
 10255b0:	102dc840 	call	102dc84 <__floatsidf>
 10255b4:	1009883a 	mov	r4,r2
 10255b8:	180b883a 	mov	r5,r3
 10255bc:	a00d883a 	mov	r6,r20
 10255c0:	a80f883a 	mov	r7,r21
 10255c4:	10220bc0 	call	10220bc <__muldf3>
 10255c8:	000d883a 	mov	r6,zero
 10255cc:	1009883a 	mov	r4,r2
 10255d0:	180b883a 	mov	r5,r3
 10255d4:	01d00734 	movhi	r7,16412
 10255d8:	102c84c0 	call	102c84c <__adddf3>
 10255dc:	1023883a 	mov	r17,r2
 10255e0:	d9800617 	ldw	r6,24(sp)
 10255e4:	00bf3034 	movhi	r2,64704
 10255e8:	1885883a 	add	r2,r3,r2
 10255ec:	d8800e15 	stw	r2,56(sp)
 10255f0:	30032e26 	beq	r6,zero,10262ac <_dtoa_r+0x1178>
 10255f4:	d8c00517 	ldw	r3,20(sp)
 10255f8:	da800617 	ldw	r10,24(sp)
 10255fc:	d8c01215 	stw	r3,72(sp)
 1025600:	d9000b17 	ldw	r4,44(sp)
 1025604:	2003b026 	beq	r4,zero,10264c8 <_dtoa_r+0x1394>
 1025608:	50bfffc4 	addi	r2,r10,-1
 102560c:	100490fa 	slli	r2,r2,3
 1025610:	00c040f4 	movhi	r3,259
 1025614:	18c2c404 	addi	r3,r3,2832
 1025618:	1885883a 	add	r2,r3,r2
 102561c:	11800017 	ldw	r6,0(r2)
 1025620:	11c00117 	ldw	r7,4(r2)
 1025624:	d8800717 	ldw	r2,28(sp)
 1025628:	0009883a 	mov	r4,zero
 102562c:	014ff834 	movhi	r5,16352
 1025630:	da801615 	stw	r10,88(sp)
 1025634:	15c00044 	addi	r23,r2,1
 1025638:	10217f00 	call	10217f0 <__divdf3>
 102563c:	d9c00e17 	ldw	r7,56(sp)
 1025640:	880d883a 	mov	r6,r17
 1025644:	1009883a 	mov	r4,r2
 1025648:	180b883a 	mov	r5,r3
 102564c:	102d32c0 	call	102d32c <__subdf3>
 1025650:	a80b883a 	mov	r5,r21
 1025654:	a009883a 	mov	r4,r20
 1025658:	d8c01015 	stw	r3,64(sp)
 102565c:	d8800e15 	stw	r2,56(sp)
 1025660:	102dbfc0 	call	102dbfc <__fixdfsi>
 1025664:	1009883a 	mov	r4,r2
 1025668:	d8801715 	stw	r2,92(sp)
 102566c:	102dc840 	call	102dc84 <__floatsidf>
 1025670:	a009883a 	mov	r4,r20
 1025674:	a80b883a 	mov	r5,r21
 1025678:	100d883a 	mov	r6,r2
 102567c:	180f883a 	mov	r7,r3
 1025680:	102d32c0 	call	102d32c <__subdf3>
 1025684:	da001717 	ldw	r8,92(sp)
 1025688:	1829883a 	mov	r20,r3
 102568c:	d8c00717 	ldw	r3,28(sp)
 1025690:	d9000e17 	ldw	r4,56(sp)
 1025694:	d9401017 	ldw	r5,64(sp)
 1025698:	42000c04 	addi	r8,r8,48
 102569c:	1023883a 	mov	r17,r2
 10256a0:	1a000005 	stb	r8,0(r3)
 10256a4:	880d883a 	mov	r6,r17
 10256a8:	a00f883a 	mov	r7,r20
 10256ac:	402b883a 	mov	r21,r8
 10256b0:	102d16c0 	call	102d16c <__gedf2>
 10256b4:	00844516 	blt	zero,r2,10267cc <_dtoa_r+0x1698>
 10256b8:	0009883a 	mov	r4,zero
 10256bc:	014ffc34 	movhi	r5,16368
 10256c0:	880d883a 	mov	r6,r17
 10256c4:	a00f883a 	mov	r7,r20
 10256c8:	102d32c0 	call	102d32c <__subdf3>
 10256cc:	d9000e17 	ldw	r4,56(sp)
 10256d0:	d9401017 	ldw	r5,64(sp)
 10256d4:	100d883a 	mov	r6,r2
 10256d8:	180f883a 	mov	r7,r3
 10256dc:	102d16c0 	call	102d16c <__gedf2>
 10256e0:	da801617 	ldw	r10,88(sp)
 10256e4:	00843616 	blt	zero,r2,10267c0 <_dtoa_r+0x168c>
 10256e8:	00800044 	movi	r2,1
 10256ec:	12806e0e 	bge	r2,r10,10258a8 <_dtoa_r+0x774>
 10256f0:	d9000717 	ldw	r4,28(sp)
 10256f4:	dd801315 	stw	r22,76(sp)
 10256f8:	dc001115 	stw	r16,68(sp)
 10256fc:	2295883a 	add	r10,r4,r10
 1025700:	dcc01415 	stw	r19,80(sp)
 1025704:	502d883a 	mov	r22,r10
 1025708:	dcc01017 	ldw	r19,64(sp)
 102570c:	b821883a 	mov	r16,r23
 1025710:	dc801015 	stw	r18,64(sp)
 1025714:	dc800e17 	ldw	r18,56(sp)
 1025718:	00000906 	br	1025740 <_dtoa_r+0x60c>
 102571c:	102d32c0 	call	102d32c <__subdf3>
 1025720:	1009883a 	mov	r4,r2
 1025724:	180b883a 	mov	r5,r3
 1025728:	900d883a 	mov	r6,r18
 102572c:	980f883a 	mov	r7,r19
 1025730:	102d24c0 	call	102d24c <__ledf2>
 1025734:	10040e16 	blt	r2,zero,1026770 <_dtoa_r+0x163c>
 1025738:	b821883a 	mov	r16,r23
 102573c:	bd841026 	beq	r23,r22,1026780 <_dtoa_r+0x164c>
 1025740:	9009883a 	mov	r4,r18
 1025744:	980b883a 	mov	r5,r19
 1025748:	000d883a 	mov	r6,zero
 102574c:	01d00934 	movhi	r7,16420
 1025750:	10220bc0 	call	10220bc <__muldf3>
 1025754:	000d883a 	mov	r6,zero
 1025758:	01d00934 	movhi	r7,16420
 102575c:	8809883a 	mov	r4,r17
 1025760:	a00b883a 	mov	r5,r20
 1025764:	1025883a 	mov	r18,r2
 1025768:	1827883a 	mov	r19,r3
 102576c:	10220bc0 	call	10220bc <__muldf3>
 1025770:	180b883a 	mov	r5,r3
 1025774:	1009883a 	mov	r4,r2
 1025778:	1823883a 	mov	r17,r3
 102577c:	1029883a 	mov	r20,r2
 1025780:	102dbfc0 	call	102dbfc <__fixdfsi>
 1025784:	1009883a 	mov	r4,r2
 1025788:	102b883a 	mov	r21,r2
 102578c:	102dc840 	call	102dc84 <__floatsidf>
 1025790:	a009883a 	mov	r4,r20
 1025794:	880b883a 	mov	r5,r17
 1025798:	100d883a 	mov	r6,r2
 102579c:	180f883a 	mov	r7,r3
 10257a0:	102d32c0 	call	102d32c <__subdf3>
 10257a4:	ad400c04 	addi	r21,r21,48
 10257a8:	1009883a 	mov	r4,r2
 10257ac:	180b883a 	mov	r5,r3
 10257b0:	900d883a 	mov	r6,r18
 10257b4:	980f883a 	mov	r7,r19
 10257b8:	85400005 	stb	r21,0(r16)
 10257bc:	1023883a 	mov	r17,r2
 10257c0:	1829883a 	mov	r20,r3
 10257c4:	102d24c0 	call	102d24c <__ledf2>
 10257c8:	bdc00044 	addi	r23,r23,1
 10257cc:	0009883a 	mov	r4,zero
 10257d0:	014ffc34 	movhi	r5,16368
 10257d4:	880d883a 	mov	r6,r17
 10257d8:	a00f883a 	mov	r7,r20
 10257dc:	103fcf0e 	bge	r2,zero,102571c <__alt_data_end+0xfffe825c>
 10257e0:	d9801217 	ldw	r6,72(sp)
 10257e4:	dc001117 	ldw	r16,68(sp)
 10257e8:	d9800515 	stw	r6,20(sp)
 10257ec:	8009883a 	mov	r4,r16
 10257f0:	e00b883a 	mov	r5,fp
 10257f4:	10288040 	call	1028804 <_Bfree>
 10257f8:	d8c00517 	ldw	r3,20(sp)
 10257fc:	d9002317 	ldw	r4,140(sp)
 1025800:	d9802517 	ldw	r6,148(sp)
 1025804:	b8000005 	stb	zero,0(r23)
 1025808:	18800044 	addi	r2,r3,1
 102580c:	20800015 	stw	r2,0(r4)
 1025810:	30027226 	beq	r6,zero,10261dc <_dtoa_r+0x10a8>
 1025814:	35c00015 	stw	r23,0(r6)
 1025818:	d8800717 	ldw	r2,28(sp)
 102581c:	003e7406 	br	10251f0 <__alt_data_end+0xfffe7d30>
 1025820:	00800434 	movhi	r2,16
 1025824:	10bfffc4 	addi	r2,r2,-1
 1025828:	a8aa703a 	and	r21,r21,r2
 102582c:	a83e801e 	bne	r21,zero,1025230 <__alt_data_end+0xfffe7d70>
 1025830:	008040f4 	movhi	r2,259
 1025834:	1082a504 	addi	r2,r2,2708
 1025838:	003e7f06 	br	1025238 <__alt_data_end+0xfffe7d78>
 102583c:	10c00204 	addi	r3,r2,8
 1025840:	003e8206 	br	102524c <__alt_data_end+0xfffe7d8c>
 1025844:	01400434 	movhi	r5,16
 1025848:	297fffc4 	addi	r5,r5,-1
 102584c:	994a703a 	and	r5,r19,r5
 1025850:	9009883a 	mov	r4,r18
 1025854:	8c7f0044 	addi	r17,r17,-1023
 1025858:	294ffc34 	orhi	r5,r5,16368
 102585c:	dd000217 	ldw	r20,8(sp)
 1025860:	d8000f15 	stw	zero,60(sp)
 1025864:	003e9f06 	br	10252e4 <__alt_data_end+0xfffe7e24>
 1025868:	008040f4 	movhi	r2,259
 102586c:	10829c04 	addi	r2,r2,2672
 1025870:	003e5f06 	br	10251f0 <__alt_data_end+0xfffe7d30>
 1025874:	80001115 	stw	zero,68(r16)
 1025878:	8009883a 	mov	r4,r16
 102587c:	000b883a 	mov	r5,zero
 1025880:	102875c0 	call	102875c <_Balloc>
 1025884:	01bfffc4 	movi	r6,-1
 1025888:	d8800715 	stw	r2,28(sp)
 102588c:	80801015 	stw	r2,64(r16)
 1025890:	00800044 	movi	r2,1
 1025894:	d9800615 	stw	r6,24(sp)
 1025898:	d8800b15 	stw	r2,44(sp)
 102589c:	d8002215 	stw	zero,136(sp)
 10258a0:	d9800d15 	stw	r6,52(sp)
 10258a4:	d8000315 	stw	zero,12(sp)
 10258a8:	d8800117 	ldw	r2,4(sp)
 10258ac:	10008e16 	blt	r2,zero,1025ae8 <_dtoa_r+0x9b4>
 10258b0:	d9000517 	ldw	r4,20(sp)
 10258b4:	00c00384 	movi	r3,14
 10258b8:	19008b16 	blt	r3,r4,1025ae8 <_dtoa_r+0x9b4>
 10258bc:	200490fa 	slli	r2,r4,3
 10258c0:	00c040f4 	movhi	r3,259
 10258c4:	d9802217 	ldw	r6,136(sp)
 10258c8:	18c2c404 	addi	r3,r3,2832
 10258cc:	1885883a 	add	r2,r3,r2
 10258d0:	14400017 	ldw	r17,0(r2)
 10258d4:	15000117 	ldw	r20,4(r2)
 10258d8:	3001c716 	blt	r6,zero,1025ff8 <_dtoa_r+0xec4>
 10258dc:	880d883a 	mov	r6,r17
 10258e0:	a00f883a 	mov	r7,r20
 10258e4:	9009883a 	mov	r4,r18
 10258e8:	980b883a 	mov	r5,r19
 10258ec:	10217f00 	call	10217f0 <__divdf3>
 10258f0:	180b883a 	mov	r5,r3
 10258f4:	1009883a 	mov	r4,r2
 10258f8:	102dbfc0 	call	102dbfc <__fixdfsi>
 10258fc:	1009883a 	mov	r4,r2
 1025900:	102d883a 	mov	r22,r2
 1025904:	102dc840 	call	102dc84 <__floatsidf>
 1025908:	1009883a 	mov	r4,r2
 102590c:	180b883a 	mov	r5,r3
 1025910:	880d883a 	mov	r6,r17
 1025914:	a00f883a 	mov	r7,r20
 1025918:	10220bc0 	call	10220bc <__muldf3>
 102591c:	9009883a 	mov	r4,r18
 1025920:	980b883a 	mov	r5,r19
 1025924:	100d883a 	mov	r6,r2
 1025928:	180f883a 	mov	r7,r3
 102592c:	102d32c0 	call	102d32c <__subdf3>
 1025930:	d9000717 	ldw	r4,28(sp)
 1025934:	d9800617 	ldw	r6,24(sp)
 1025938:	180b883a 	mov	r5,r3
 102593c:	b0c00c04 	addi	r3,r22,48
 1025940:	20c00005 	stb	r3,0(r4)
 1025944:	25c00044 	addi	r23,r4,1
 1025948:	01000044 	movi	r4,1
 102594c:	1011883a 	mov	r8,r2
 1025950:	2807883a 	mov	r3,r5
 1025954:	31003d26 	beq	r6,r4,1025a4c <_dtoa_r+0x918>
 1025958:	000d883a 	mov	r6,zero
 102595c:	01d00934 	movhi	r7,16420
 1025960:	1009883a 	mov	r4,r2
 1025964:	10220bc0 	call	10220bc <__muldf3>
 1025968:	1009883a 	mov	r4,r2
 102596c:	180b883a 	mov	r5,r3
 1025970:	000d883a 	mov	r6,zero
 1025974:	000f883a 	mov	r7,zero
 1025978:	1027883a 	mov	r19,r2
 102597c:	182b883a 	mov	r21,r3
 1025980:	102d0e80 	call	102d0e8 <__eqdf2>
 1025984:	103f9926 	beq	r2,zero,10257ec <__alt_data_end+0xfffe832c>
 1025988:	d8c00617 	ldw	r3,24(sp)
 102598c:	d9000717 	ldw	r4,28(sp)
 1025990:	b825883a 	mov	r18,r23
 1025994:	18bfffc4 	addi	r2,r3,-1
 1025998:	20ad883a 	add	r22,r4,r2
 102599c:	dc000315 	stw	r16,12(sp)
 10259a0:	00000a06 	br	10259cc <_dtoa_r+0x898>
 10259a4:	10220bc0 	call	10220bc <__muldf3>
 10259a8:	1009883a 	mov	r4,r2
 10259ac:	180b883a 	mov	r5,r3
 10259b0:	000d883a 	mov	r6,zero
 10259b4:	000f883a 	mov	r7,zero
 10259b8:	1027883a 	mov	r19,r2
 10259bc:	182b883a 	mov	r21,r3
 10259c0:	b825883a 	mov	r18,r23
 10259c4:	102d0e80 	call	102d0e8 <__eqdf2>
 10259c8:	10022626 	beq	r2,zero,1026264 <_dtoa_r+0x1130>
 10259cc:	880d883a 	mov	r6,r17
 10259d0:	a00f883a 	mov	r7,r20
 10259d4:	9809883a 	mov	r4,r19
 10259d8:	a80b883a 	mov	r5,r21
 10259dc:	10217f00 	call	10217f0 <__divdf3>
 10259e0:	180b883a 	mov	r5,r3
 10259e4:	1009883a 	mov	r4,r2
 10259e8:	102dbfc0 	call	102dbfc <__fixdfsi>
 10259ec:	1009883a 	mov	r4,r2
 10259f0:	1021883a 	mov	r16,r2
 10259f4:	102dc840 	call	102dc84 <__floatsidf>
 10259f8:	1009883a 	mov	r4,r2
 10259fc:	180b883a 	mov	r5,r3
 1025a00:	880d883a 	mov	r6,r17
 1025a04:	a00f883a 	mov	r7,r20
 1025a08:	10220bc0 	call	10220bc <__muldf3>
 1025a0c:	9809883a 	mov	r4,r19
 1025a10:	a80b883a 	mov	r5,r21
 1025a14:	100d883a 	mov	r6,r2
 1025a18:	180f883a 	mov	r7,r3
 1025a1c:	102d32c0 	call	102d32c <__subdf3>
 1025a20:	82000c04 	addi	r8,r16,48
 1025a24:	92000005 	stb	r8,0(r18)
 1025a28:	1009883a 	mov	r4,r2
 1025a2c:	180b883a 	mov	r5,r3
 1025a30:	000d883a 	mov	r6,zero
 1025a34:	01d00934 	movhi	r7,16420
 1025a38:	1011883a 	mov	r8,r2
 1025a3c:	bdc00044 	addi	r23,r23,1
 1025a40:	95bfd81e 	bne	r18,r22,10259a4 <__alt_data_end+0xfffe84e4>
 1025a44:	802d883a 	mov	r22,r16
 1025a48:	dc000317 	ldw	r16,12(sp)
 1025a4c:	4009883a 	mov	r4,r8
 1025a50:	180b883a 	mov	r5,r3
 1025a54:	400d883a 	mov	r6,r8
 1025a58:	180f883a 	mov	r7,r3
 1025a5c:	102c84c0 	call	102c84c <__adddf3>
 1025a60:	8809883a 	mov	r4,r17
 1025a64:	a00b883a 	mov	r5,r20
 1025a68:	100d883a 	mov	r6,r2
 1025a6c:	180f883a 	mov	r7,r3
 1025a70:	1027883a 	mov	r19,r2
 1025a74:	1825883a 	mov	r18,r3
 1025a78:	102d24c0 	call	102d24c <__ledf2>
 1025a7c:	10000816 	blt	r2,zero,1025aa0 <_dtoa_r+0x96c>
 1025a80:	8809883a 	mov	r4,r17
 1025a84:	a00b883a 	mov	r5,r20
 1025a88:	980d883a 	mov	r6,r19
 1025a8c:	900f883a 	mov	r7,r18
 1025a90:	102d0e80 	call	102d0e8 <__eqdf2>
 1025a94:	103f551e 	bne	r2,zero,10257ec <__alt_data_end+0xfffe832c>
 1025a98:	b580004c 	andi	r22,r22,1
 1025a9c:	b03f5326 	beq	r22,zero,10257ec <__alt_data_end+0xfffe832c>
 1025aa0:	bd7fffc3 	ldbu	r21,-1(r23)
 1025aa4:	b8bfffc4 	addi	r2,r23,-1
 1025aa8:	1007883a 	mov	r3,r2
 1025aac:	01400e44 	movi	r5,57
 1025ab0:	d9800717 	ldw	r6,28(sp)
 1025ab4:	00000506 	br	1025acc <_dtoa_r+0x998>
 1025ab8:	18ffffc4 	addi	r3,r3,-1
 1025abc:	30825e26 	beq	r6,r2,1026438 <_dtoa_r+0x1304>
 1025ac0:	1d400003 	ldbu	r21,0(r3)
 1025ac4:	102f883a 	mov	r23,r2
 1025ac8:	10bfffc4 	addi	r2,r2,-1
 1025acc:	a9003fcc 	andi	r4,r21,255
 1025ad0:	2100201c 	xori	r4,r4,128
 1025ad4:	213fe004 	addi	r4,r4,-128
 1025ad8:	217ff726 	beq	r4,r5,1025ab8 <__alt_data_end+0xfffe85f8>
 1025adc:	aa000044 	addi	r8,r21,1
 1025ae0:	12000005 	stb	r8,0(r2)
 1025ae4:	003f4106 	br	10257ec <__alt_data_end+0xfffe832c>
 1025ae8:	d8c00b17 	ldw	r3,44(sp)
 1025aec:	18006726 	beq	r3,zero,1025c8c <_dtoa_r+0xb58>
 1025af0:	d9000317 	ldw	r4,12(sp)
 1025af4:	00c00044 	movi	r3,1
 1025af8:	19016a0e 	bge	r3,r4,10260a4 <_dtoa_r+0xf70>
 1025afc:	d8800617 	ldw	r2,24(sp)
 1025b00:	d8c00917 	ldw	r3,36(sp)
 1025b04:	157fffc4 	addi	r21,r2,-1
 1025b08:	1d420716 	blt	r3,r21,1026328 <_dtoa_r+0x11f4>
 1025b0c:	1d6bc83a 	sub	r21,r3,r21
 1025b10:	d8800617 	ldw	r2,24(sp)
 1025b14:	1002c716 	blt	r2,zero,1026634 <_dtoa_r+0x1500>
 1025b18:	dd000817 	ldw	r20,32(sp)
 1025b1c:	d8800617 	ldw	r2,24(sp)
 1025b20:	d9800817 	ldw	r6,32(sp)
 1025b24:	8009883a 	mov	r4,r16
 1025b28:	01400044 	movi	r5,1
 1025b2c:	308d883a 	add	r6,r6,r2
 1025b30:	d9800815 	stw	r6,32(sp)
 1025b34:	b0ad883a 	add	r22,r22,r2
 1025b38:	1028b5c0 	call	1028b5c <__i2b>
 1025b3c:	1023883a 	mov	r17,r2
 1025b40:	a0000826 	beq	r20,zero,1025b64 <_dtoa_r+0xa30>
 1025b44:	0580070e 	bge	zero,r22,1025b64 <_dtoa_r+0xa30>
 1025b48:	b005883a 	mov	r2,r22
 1025b4c:	a5812016 	blt	r20,r22,1025fd0 <_dtoa_r+0xe9c>
 1025b50:	d8c00817 	ldw	r3,32(sp)
 1025b54:	a0a9c83a 	sub	r20,r20,r2
 1025b58:	b0adc83a 	sub	r22,r22,r2
 1025b5c:	1887c83a 	sub	r3,r3,r2
 1025b60:	d8c00815 	stw	r3,32(sp)
 1025b64:	d9000917 	ldw	r4,36(sp)
 1025b68:	0100140e 	bge	zero,r4,1025bbc <_dtoa_r+0xa88>
 1025b6c:	d9800b17 	ldw	r6,44(sp)
 1025b70:	3001e526 	beq	r6,zero,1026308 <_dtoa_r+0x11d4>
 1025b74:	05400e0e 	bge	zero,r21,1025bb0 <_dtoa_r+0xa7c>
 1025b78:	880b883a 	mov	r5,r17
 1025b7c:	8009883a 	mov	r4,r16
 1025b80:	a80d883a 	mov	r6,r21
 1025b84:	1028d940 	call	1028d94 <__pow5mult>
 1025b88:	e00d883a 	mov	r6,fp
 1025b8c:	8009883a 	mov	r4,r16
 1025b90:	100b883a 	mov	r5,r2
 1025b94:	1023883a 	mov	r17,r2
 1025b98:	1028b980 	call	1028b98 <__multiply>
 1025b9c:	102f883a 	mov	r23,r2
 1025ba0:	e00b883a 	mov	r5,fp
 1025ba4:	8009883a 	mov	r4,r16
 1025ba8:	10288040 	call	1028804 <_Bfree>
 1025bac:	b839883a 	mov	fp,r23
 1025bb0:	d8800917 	ldw	r2,36(sp)
 1025bb4:	154dc83a 	sub	r6,r2,r21
 1025bb8:	3001281e 	bne	r6,zero,102605c <_dtoa_r+0xf28>
 1025bbc:	05c00044 	movi	r23,1
 1025bc0:	8009883a 	mov	r4,r16
 1025bc4:	b80b883a 	mov	r5,r23
 1025bc8:	1028b5c0 	call	1028b5c <__i2b>
 1025bcc:	d8c00a17 	ldw	r3,40(sp)
 1025bd0:	102b883a 	mov	r21,r2
 1025bd4:	00c0310e 	bge	zero,r3,1025c9c <_dtoa_r+0xb68>
 1025bd8:	8009883a 	mov	r4,r16
 1025bdc:	100b883a 	mov	r5,r2
 1025be0:	180d883a 	mov	r6,r3
 1025be4:	1028d940 	call	1028d94 <__pow5mult>
 1025be8:	d9000317 	ldw	r4,12(sp)
 1025bec:	102b883a 	mov	r21,r2
 1025bf0:	b9011f0e 	bge	r23,r4,1026070 <_dtoa_r+0xf3c>
 1025bf4:	0027883a 	mov	r19,zero
 1025bf8:	a8800417 	ldw	r2,16(r21)
 1025bfc:	10800104 	addi	r2,r2,4
 1025c00:	1085883a 	add	r2,r2,r2
 1025c04:	1085883a 	add	r2,r2,r2
 1025c08:	a885883a 	add	r2,r21,r2
 1025c0c:	11000017 	ldw	r4,0(r2)
 1025c10:	1028a440 	call	1028a44 <__hi0bits>
 1025c14:	00c00804 	movi	r3,32
 1025c18:	1885c83a 	sub	r2,r3,r2
 1025c1c:	00002506 	br	1025cb4 <_dtoa_r+0xb80>
 1025c20:	01800044 	movi	r6,1
 1025c24:	d9800c15 	stw	r6,48(sp)
 1025c28:	003dec06 	br	10253dc <__alt_data_end+0xfffe7f1c>
 1025c2c:	d8c00817 	ldw	r3,32(sp)
 1025c30:	d9000517 	ldw	r4,20(sp)
 1025c34:	d8000a15 	stw	zero,40(sp)
 1025c38:	1907c83a 	sub	r3,r3,r4
 1025c3c:	010dc83a 	sub	r6,zero,r4
 1025c40:	d8c00815 	stw	r3,32(sp)
 1025c44:	d9800915 	stw	r6,36(sp)
 1025c48:	003ded06 	br	1025400 <__alt_data_end+0xfffe7f40>
 1025c4c:	05adc83a 	sub	r22,zero,r22
 1025c50:	dd800815 	stw	r22,32(sp)
 1025c54:	002d883a 	mov	r22,zero
 1025c58:	003de406 	br	10253ec <__alt_data_end+0xfffe7f2c>
 1025c5c:	d9000517 	ldw	r4,20(sp)
 1025c60:	102dc840 	call	102dc84 <__floatsidf>
 1025c64:	1009883a 	mov	r4,r2
 1025c68:	180b883a 	mov	r5,r3
 1025c6c:	b00d883a 	mov	r6,r22
 1025c70:	a80f883a 	mov	r7,r21
 1025c74:	102d0e80 	call	102d0e8 <__eqdf2>
 1025c78:	103dc726 	beq	r2,zero,1025398 <__alt_data_end+0xfffe7ed8>
 1025c7c:	d8800517 	ldw	r2,20(sp)
 1025c80:	10bfffc4 	addi	r2,r2,-1
 1025c84:	d8800515 	stw	r2,20(sp)
 1025c88:	003dc306 	br	1025398 <__alt_data_end+0xfffe7ed8>
 1025c8c:	dd400917 	ldw	r21,36(sp)
 1025c90:	dd000817 	ldw	r20,32(sp)
 1025c94:	0023883a 	mov	r17,zero
 1025c98:	003fa906 	br	1025b40 <__alt_data_end+0xfffe8680>
 1025c9c:	d9800317 	ldw	r6,12(sp)
 1025ca0:	b981670e 	bge	r23,r6,1026240 <_dtoa_r+0x110c>
 1025ca4:	0027883a 	mov	r19,zero
 1025ca8:	d8c00a17 	ldw	r3,40(sp)
 1025cac:	183fd21e 	bne	r3,zero,1025bf8 <__alt_data_end+0xfffe8738>
 1025cb0:	00800044 	movi	r2,1
 1025cb4:	1585883a 	add	r2,r2,r22
 1025cb8:	108007cc 	andi	r2,r2,31
 1025cbc:	10005f26 	beq	r2,zero,1025e3c <_dtoa_r+0xd08>
 1025cc0:	00c00804 	movi	r3,32
 1025cc4:	1887c83a 	sub	r3,r3,r2
 1025cc8:	01000104 	movi	r4,4
 1025ccc:	20c2dd0e 	bge	r4,r3,1026844 <_dtoa_r+0x1710>
 1025cd0:	d9000817 	ldw	r4,32(sp)
 1025cd4:	00c00704 	movi	r3,28
 1025cd8:	1885c83a 	sub	r2,r3,r2
 1025cdc:	2089883a 	add	r4,r4,r2
 1025ce0:	d9000815 	stw	r4,32(sp)
 1025ce4:	a0a9883a 	add	r20,r20,r2
 1025ce8:	b0ad883a 	add	r22,r22,r2
 1025cec:	d8800817 	ldw	r2,32(sp)
 1025cf0:	0080050e 	bge	zero,r2,1025d08 <_dtoa_r+0xbd4>
 1025cf4:	e00b883a 	mov	r5,fp
 1025cf8:	8009883a 	mov	r4,r16
 1025cfc:	100d883a 	mov	r6,r2
 1025d00:	1028ed40 	call	1028ed4 <__lshift>
 1025d04:	1039883a 	mov	fp,r2
 1025d08:	0580050e 	bge	zero,r22,1025d20 <_dtoa_r+0xbec>
 1025d0c:	a80b883a 	mov	r5,r21
 1025d10:	8009883a 	mov	r4,r16
 1025d14:	b00d883a 	mov	r6,r22
 1025d18:	1028ed40 	call	1028ed4 <__lshift>
 1025d1c:	102b883a 	mov	r21,r2
 1025d20:	d8c00c17 	ldw	r3,48(sp)
 1025d24:	1801161e 	bne	r3,zero,1026180 <_dtoa_r+0x104c>
 1025d28:	d8c00617 	ldw	r3,24(sp)
 1025d2c:	00c12d0e 	bge	zero,r3,10261e4 <_dtoa_r+0x10b0>
 1025d30:	d8c00b17 	ldw	r3,44(sp)
 1025d34:	1800571e 	bne	r3,zero,1025e94 <_dtoa_r+0xd60>
 1025d38:	dc800717 	ldw	r18,28(sp)
 1025d3c:	dcc00617 	ldw	r19,24(sp)
 1025d40:	9029883a 	mov	r20,r18
 1025d44:	00000206 	br	1025d50 <_dtoa_r+0xc1c>
 1025d48:	102882c0 	call	102882c <__multadd>
 1025d4c:	1039883a 	mov	fp,r2
 1025d50:	e009883a 	mov	r4,fp
 1025d54:	a80b883a 	mov	r5,r21
 1025d58:	1024f340 	call	1024f34 <quorem>
 1025d5c:	10800c04 	addi	r2,r2,48
 1025d60:	90800005 	stb	r2,0(r18)
 1025d64:	94800044 	addi	r18,r18,1
 1025d68:	9507c83a 	sub	r3,r18,r20
 1025d6c:	8009883a 	mov	r4,r16
 1025d70:	e00b883a 	mov	r5,fp
 1025d74:	01800284 	movi	r6,10
 1025d78:	000f883a 	mov	r7,zero
 1025d7c:	1cfff216 	blt	r3,r19,1025d48 <__alt_data_end+0xfffe8888>
 1025d80:	1011883a 	mov	r8,r2
 1025d84:	d8800617 	ldw	r2,24(sp)
 1025d88:	00822e0e 	bge	zero,r2,1026644 <_dtoa_r+0x1510>
 1025d8c:	d9000717 	ldw	r4,28(sp)
 1025d90:	0025883a 	mov	r18,zero
 1025d94:	20af883a 	add	r23,r4,r2
 1025d98:	e00b883a 	mov	r5,fp
 1025d9c:	01800044 	movi	r6,1
 1025da0:	8009883a 	mov	r4,r16
 1025da4:	da001715 	stw	r8,92(sp)
 1025da8:	1028ed40 	call	1028ed4 <__lshift>
 1025dac:	1009883a 	mov	r4,r2
 1025db0:	a80b883a 	mov	r5,r21
 1025db4:	1039883a 	mov	fp,r2
 1025db8:	102901c0 	call	102901c <__mcmp>
 1025dbc:	da001717 	ldw	r8,92(sp)
 1025dc0:	00816e0e 	bge	zero,r2,102637c <_dtoa_r+0x1248>
 1025dc4:	b93fffc3 	ldbu	r4,-1(r23)
 1025dc8:	b8bfffc4 	addi	r2,r23,-1
 1025dcc:	1007883a 	mov	r3,r2
 1025dd0:	01800e44 	movi	r6,57
 1025dd4:	d9c00717 	ldw	r7,28(sp)
 1025dd8:	00000506 	br	1025df0 <_dtoa_r+0xcbc>
 1025ddc:	18ffffc4 	addi	r3,r3,-1
 1025de0:	38811926 	beq	r7,r2,1026248 <_dtoa_r+0x1114>
 1025de4:	19000003 	ldbu	r4,0(r3)
 1025de8:	102f883a 	mov	r23,r2
 1025dec:	10bfffc4 	addi	r2,r2,-1
 1025df0:	21403fcc 	andi	r5,r4,255
 1025df4:	2940201c 	xori	r5,r5,128
 1025df8:	297fe004 	addi	r5,r5,-128
 1025dfc:	29bff726 	beq	r5,r6,1025ddc <__alt_data_end+0xfffe891c>
 1025e00:	21000044 	addi	r4,r4,1
 1025e04:	11000005 	stb	r4,0(r2)
 1025e08:	8009883a 	mov	r4,r16
 1025e0c:	a80b883a 	mov	r5,r21
 1025e10:	10288040 	call	1028804 <_Bfree>
 1025e14:	883e7526 	beq	r17,zero,10257ec <__alt_data_end+0xfffe832c>
 1025e18:	90000426 	beq	r18,zero,1025e2c <_dtoa_r+0xcf8>
 1025e1c:	94400326 	beq	r18,r17,1025e2c <_dtoa_r+0xcf8>
 1025e20:	8009883a 	mov	r4,r16
 1025e24:	900b883a 	mov	r5,r18
 1025e28:	10288040 	call	1028804 <_Bfree>
 1025e2c:	8009883a 	mov	r4,r16
 1025e30:	880b883a 	mov	r5,r17
 1025e34:	10288040 	call	1028804 <_Bfree>
 1025e38:	003e6c06 	br	10257ec <__alt_data_end+0xfffe832c>
 1025e3c:	00800704 	movi	r2,28
 1025e40:	d9800817 	ldw	r6,32(sp)
 1025e44:	a0a9883a 	add	r20,r20,r2
 1025e48:	b0ad883a 	add	r22,r22,r2
 1025e4c:	308d883a 	add	r6,r6,r2
 1025e50:	d9800815 	stw	r6,32(sp)
 1025e54:	003fa506 	br	1025cec <__alt_data_end+0xfffe882c>
 1025e58:	013efb84 	movi	r4,-1042
 1025e5c:	246bc83a 	sub	r21,r4,r17
 1025e60:	9548983a 	sll	r4,r18,r21
 1025e64:	003d1806 	br	10252c8 <__alt_data_end+0xfffe7e08>
 1025e68:	d8000c15 	stw	zero,48(sp)
 1025e6c:	003d5b06 	br	10253dc <__alt_data_end+0xfffe7f1c>
 1025e70:	880b883a 	mov	r5,r17
 1025e74:	8009883a 	mov	r4,r16
 1025e78:	01800284 	movi	r6,10
 1025e7c:	000f883a 	mov	r7,zero
 1025e80:	102882c0 	call	102882c <__multadd>
 1025e84:	1023883a 	mov	r17,r2
 1025e88:	d8800d17 	ldw	r2,52(sp)
 1025e8c:	0082550e 	bge	zero,r2,10267e4 <_dtoa_r+0x16b0>
 1025e90:	d8800615 	stw	r2,24(sp)
 1025e94:	0500050e 	bge	zero,r20,1025eac <_dtoa_r+0xd78>
 1025e98:	880b883a 	mov	r5,r17
 1025e9c:	8009883a 	mov	r4,r16
 1025ea0:	a00d883a 	mov	r6,r20
 1025ea4:	1028ed40 	call	1028ed4 <__lshift>
 1025ea8:	1023883a 	mov	r17,r2
 1025eac:	98016a1e 	bne	r19,zero,1026458 <_dtoa_r+0x1324>
 1025eb0:	8829883a 	mov	r20,r17
 1025eb4:	d9000617 	ldw	r4,24(sp)
 1025eb8:	dcc00717 	ldw	r19,28(sp)
 1025ebc:	9480004c 	andi	r18,r18,1
 1025ec0:	20bfffc4 	addi	r2,r4,-1
 1025ec4:	9885883a 	add	r2,r19,r2
 1025ec8:	d8800415 	stw	r2,16(sp)
 1025ecc:	dc800615 	stw	r18,24(sp)
 1025ed0:	e009883a 	mov	r4,fp
 1025ed4:	a80b883a 	mov	r5,r21
 1025ed8:	1024f340 	call	1024f34 <quorem>
 1025edc:	e009883a 	mov	r4,fp
 1025ee0:	880b883a 	mov	r5,r17
 1025ee4:	102f883a 	mov	r23,r2
 1025ee8:	102901c0 	call	102901c <__mcmp>
 1025eec:	8009883a 	mov	r4,r16
 1025ef0:	a80b883a 	mov	r5,r21
 1025ef4:	a00d883a 	mov	r6,r20
 1025ef8:	102d883a 	mov	r22,r2
 1025efc:	102907c0 	call	102907c <__mdiff>
 1025f00:	1007883a 	mov	r3,r2
 1025f04:	10800317 	ldw	r2,12(r2)
 1025f08:	bc800c04 	addi	r18,r23,48
 1025f0c:	1000971e 	bne	r2,zero,102616c <_dtoa_r+0x1038>
 1025f10:	180b883a 	mov	r5,r3
 1025f14:	e009883a 	mov	r4,fp
 1025f18:	d8c01515 	stw	r3,84(sp)
 1025f1c:	102901c0 	call	102901c <__mcmp>
 1025f20:	d8c01517 	ldw	r3,84(sp)
 1025f24:	8009883a 	mov	r4,r16
 1025f28:	d8801515 	stw	r2,84(sp)
 1025f2c:	180b883a 	mov	r5,r3
 1025f30:	10288040 	call	1028804 <_Bfree>
 1025f34:	d8801517 	ldw	r2,84(sp)
 1025f38:	1000041e 	bne	r2,zero,1025f4c <_dtoa_r+0xe18>
 1025f3c:	d9800317 	ldw	r6,12(sp)
 1025f40:	3000021e 	bne	r6,zero,1025f4c <_dtoa_r+0xe18>
 1025f44:	d8c00617 	ldw	r3,24(sp)
 1025f48:	18007626 	beq	r3,zero,1026124 <_dtoa_r+0xff0>
 1025f4c:	b0005b16 	blt	r22,zero,10260bc <_dtoa_r+0xf88>
 1025f50:	b000041e 	bne	r22,zero,1025f64 <_dtoa_r+0xe30>
 1025f54:	d9000317 	ldw	r4,12(sp)
 1025f58:	2000021e 	bne	r4,zero,1025f64 <_dtoa_r+0xe30>
 1025f5c:	d8c00617 	ldw	r3,24(sp)
 1025f60:	18005626 	beq	r3,zero,10260bc <_dtoa_r+0xf88>
 1025f64:	00814d16 	blt	zero,r2,102649c <_dtoa_r+0x1368>
 1025f68:	d8c00417 	ldw	r3,16(sp)
 1025f6c:	9d800044 	addi	r22,r19,1
 1025f70:	9c800005 	stb	r18,0(r19)
 1025f74:	b02f883a 	mov	r23,r22
 1025f78:	98c14c26 	beq	r19,r3,10264ac <_dtoa_r+0x1378>
 1025f7c:	e00b883a 	mov	r5,fp
 1025f80:	8009883a 	mov	r4,r16
 1025f84:	01800284 	movi	r6,10
 1025f88:	000f883a 	mov	r7,zero
 1025f8c:	102882c0 	call	102882c <__multadd>
 1025f90:	1039883a 	mov	fp,r2
 1025f94:	8d006d26 	beq	r17,r20,102614c <_dtoa_r+0x1018>
 1025f98:	880b883a 	mov	r5,r17
 1025f9c:	01800284 	movi	r6,10
 1025fa0:	000f883a 	mov	r7,zero
 1025fa4:	8009883a 	mov	r4,r16
 1025fa8:	102882c0 	call	102882c <__multadd>
 1025fac:	a00b883a 	mov	r5,r20
 1025fb0:	8009883a 	mov	r4,r16
 1025fb4:	01800284 	movi	r6,10
 1025fb8:	000f883a 	mov	r7,zero
 1025fbc:	1023883a 	mov	r17,r2
 1025fc0:	102882c0 	call	102882c <__multadd>
 1025fc4:	1029883a 	mov	r20,r2
 1025fc8:	b027883a 	mov	r19,r22
 1025fcc:	003fc006 	br	1025ed0 <__alt_data_end+0xfffe8a10>
 1025fd0:	a005883a 	mov	r2,r20
 1025fd4:	003ede06 	br	1025b50 <__alt_data_end+0xfffe8690>
 1025fd8:	01000044 	movi	r4,1
 1025fdc:	d9000b15 	stw	r4,44(sp)
 1025fe0:	d9802217 	ldw	r6,136(sp)
 1025fe4:	0180dc0e 	bge	zero,r6,1026358 <_dtoa_r+0x1224>
 1025fe8:	3023883a 	mov	r17,r6
 1025fec:	d9800d15 	stw	r6,52(sp)
 1025ff0:	d9800615 	stw	r6,24(sp)
 1025ff4:	003d1e06 	br	1025470 <__alt_data_end+0xfffe7fb0>
 1025ff8:	d8800617 	ldw	r2,24(sp)
 1025ffc:	00be3716 	blt	zero,r2,10258dc <__alt_data_end+0xfffe841c>
 1026000:	1000be1e 	bne	r2,zero,10262fc <_dtoa_r+0x11c8>
 1026004:	8809883a 	mov	r4,r17
 1026008:	a00b883a 	mov	r5,r20
 102600c:	000d883a 	mov	r6,zero
 1026010:	01d00534 	movhi	r7,16404
 1026014:	10220bc0 	call	10220bc <__muldf3>
 1026018:	1009883a 	mov	r4,r2
 102601c:	180b883a 	mov	r5,r3
 1026020:	900d883a 	mov	r6,r18
 1026024:	980f883a 	mov	r7,r19
 1026028:	102d16c0 	call	102d16c <__gedf2>
 102602c:	002b883a 	mov	r21,zero
 1026030:	0023883a 	mov	r17,zero
 1026034:	10007a16 	blt	r2,zero,1026220 <_dtoa_r+0x10ec>
 1026038:	d9002217 	ldw	r4,136(sp)
 102603c:	ddc00717 	ldw	r23,28(sp)
 1026040:	0108303a 	nor	r4,zero,r4
 1026044:	d9000515 	stw	r4,20(sp)
 1026048:	8009883a 	mov	r4,r16
 102604c:	a80b883a 	mov	r5,r21
 1026050:	10288040 	call	1028804 <_Bfree>
 1026054:	883f751e 	bne	r17,zero,1025e2c <__alt_data_end+0xfffe896c>
 1026058:	003de406 	br	10257ec <__alt_data_end+0xfffe832c>
 102605c:	e00b883a 	mov	r5,fp
 1026060:	8009883a 	mov	r4,r16
 1026064:	1028d940 	call	1028d94 <__pow5mult>
 1026068:	1039883a 	mov	fp,r2
 102606c:	003ed306 	br	1025bbc <__alt_data_end+0xfffe86fc>
 1026070:	903ee01e 	bne	r18,zero,1025bf4 <__alt_data_end+0xfffe8734>
 1026074:	00800434 	movhi	r2,16
 1026078:	10bfffc4 	addi	r2,r2,-1
 102607c:	9884703a 	and	r2,r19,r2
 1026080:	103f081e 	bne	r2,zero,1025ca4 <__alt_data_end+0xfffe87e4>
 1026084:	9cdffc2c 	andhi	r19,r19,32752
 1026088:	983f0626 	beq	r19,zero,1025ca4 <__alt_data_end+0xfffe87e4>
 102608c:	d8800817 	ldw	r2,32(sp)
 1026090:	b5800044 	addi	r22,r22,1
 1026094:	04c00044 	movi	r19,1
 1026098:	10800044 	addi	r2,r2,1
 102609c:	d8800815 	stw	r2,32(sp)
 10260a0:	003f0106 	br	1025ca8 <__alt_data_end+0xfffe87e8>
 10260a4:	d9800f17 	ldw	r6,60(sp)
 10260a8:	30016826 	beq	r6,zero,102664c <_dtoa_r+0x1518>
 10260ac:	10810cc4 	addi	r2,r2,1075
 10260b0:	dd400917 	ldw	r21,36(sp)
 10260b4:	dd000817 	ldw	r20,32(sp)
 10260b8:	003e9906 	br	1025b20 <__alt_data_end+0xfffe8660>
 10260bc:	9011883a 	mov	r8,r18
 10260c0:	4007883a 	mov	r3,r8
 10260c4:	e02d883a 	mov	r22,fp
 10260c8:	0080100e 	bge	zero,r2,102610c <_dtoa_r+0xfd8>
 10260cc:	01800044 	movi	r6,1
 10260d0:	8009883a 	mov	r4,r16
 10260d4:	e00b883a 	mov	r5,fp
 10260d8:	da001515 	stw	r8,84(sp)
 10260dc:	da001715 	stw	r8,92(sp)
 10260e0:	1028ed40 	call	1028ed4 <__lshift>
 10260e4:	1009883a 	mov	r4,r2
 10260e8:	a80b883a 	mov	r5,r21
 10260ec:	102d883a 	mov	r22,r2
 10260f0:	102901c0 	call	102901c <__mcmp>
 10260f4:	d8c01517 	ldw	r3,84(sp)
 10260f8:	da001717 	ldw	r8,92(sp)
 10260fc:	0081a50e 	bge	zero,r2,1026794 <_dtoa_r+0x1660>
 1026100:	00800e44 	movi	r2,57
 1026104:	40817b26 	beq	r8,r2,10266f4 <_dtoa_r+0x15c0>
 1026108:	40c00044 	addi	r3,r8,1
 102610c:	8825883a 	mov	r18,r17
 1026110:	9dc00044 	addi	r23,r19,1
 1026114:	98c00005 	stb	r3,0(r19)
 1026118:	a023883a 	mov	r17,r20
 102611c:	b039883a 	mov	fp,r22
 1026120:	003f3906 	br	1025e08 <__alt_data_end+0xfffe8948>
 1026124:	00800e44 	movi	r2,57
 1026128:	9011883a 	mov	r8,r18
 102612c:	90817226 	beq	r18,r2,10266f8 <_dtoa_r+0x15c4>
 1026130:	0580010e 	bge	zero,r22,1026138 <_dtoa_r+0x1004>
 1026134:	ba000c44 	addi	r8,r23,49
 1026138:	8825883a 	mov	r18,r17
 102613c:	9dc00044 	addi	r23,r19,1
 1026140:	9a000005 	stb	r8,0(r19)
 1026144:	a023883a 	mov	r17,r20
 1026148:	003f2f06 	br	1025e08 <__alt_data_end+0xfffe8948>
 102614c:	880b883a 	mov	r5,r17
 1026150:	8009883a 	mov	r4,r16
 1026154:	01800284 	movi	r6,10
 1026158:	000f883a 	mov	r7,zero
 102615c:	102882c0 	call	102882c <__multadd>
 1026160:	1023883a 	mov	r17,r2
 1026164:	1029883a 	mov	r20,r2
 1026168:	003f9706 	br	1025fc8 <__alt_data_end+0xfffe8b08>
 102616c:	8009883a 	mov	r4,r16
 1026170:	180b883a 	mov	r5,r3
 1026174:	10288040 	call	1028804 <_Bfree>
 1026178:	00800044 	movi	r2,1
 102617c:	003f7306 	br	1025f4c <__alt_data_end+0xfffe8a8c>
 1026180:	e009883a 	mov	r4,fp
 1026184:	a80b883a 	mov	r5,r21
 1026188:	102901c0 	call	102901c <__mcmp>
 102618c:	103ee60e 	bge	r2,zero,1025d28 <__alt_data_end+0xfffe8868>
 1026190:	8009883a 	mov	r4,r16
 1026194:	e00b883a 	mov	r5,fp
 1026198:	01800284 	movi	r6,10
 102619c:	000f883a 	mov	r7,zero
 10261a0:	102882c0 	call	102882c <__multadd>
 10261a4:	d9000517 	ldw	r4,20(sp)
 10261a8:	d9800b17 	ldw	r6,44(sp)
 10261ac:	1039883a 	mov	fp,r2
 10261b0:	213fffc4 	addi	r4,r4,-1
 10261b4:	d9000515 	stw	r4,20(sp)
 10261b8:	303f2d1e 	bne	r6,zero,1025e70 <__alt_data_end+0xfffe89b0>
 10261bc:	d9000d17 	ldw	r4,52(sp)
 10261c0:	0101780e 	bge	zero,r4,10267a4 <_dtoa_r+0x1670>
 10261c4:	d9000615 	stw	r4,24(sp)
 10261c8:	003edb06 	br	1025d38 <__alt_data_end+0xfffe8878>
 10261cc:	00800084 	movi	r2,2
 10261d0:	30818e1e 	bne	r6,r2,102680c <_dtoa_r+0x16d8>
 10261d4:	d8000b15 	stw	zero,44(sp)
 10261d8:	003f8106 	br	1025fe0 <__alt_data_end+0xfffe8b20>
 10261dc:	d8800717 	ldw	r2,28(sp)
 10261e0:	003c0306 	br	10251f0 <__alt_data_end+0xfffe7d30>
 10261e4:	d9000317 	ldw	r4,12(sp)
 10261e8:	00800084 	movi	r2,2
 10261ec:	113ed00e 	bge	r2,r4,1025d30 <__alt_data_end+0xfffe8870>
 10261f0:	d8c00617 	ldw	r3,24(sp)
 10261f4:	183f901e 	bne	r3,zero,1026038 <__alt_data_end+0xfffe8b78>
 10261f8:	a80b883a 	mov	r5,r21
 10261fc:	8009883a 	mov	r4,r16
 1026200:	01800144 	movi	r6,5
 1026204:	000f883a 	mov	r7,zero
 1026208:	102882c0 	call	102882c <__multadd>
 102620c:	e009883a 	mov	r4,fp
 1026210:	100b883a 	mov	r5,r2
 1026214:	102b883a 	mov	r21,r2
 1026218:	102901c0 	call	102901c <__mcmp>
 102621c:	00bf860e 	bge	zero,r2,1026038 <__alt_data_end+0xfffe8b78>
 1026220:	d9800717 	ldw	r6,28(sp)
 1026224:	00800c44 	movi	r2,49
 1026228:	30800005 	stb	r2,0(r6)
 102622c:	d8800517 	ldw	r2,20(sp)
 1026230:	35c00044 	addi	r23,r6,1
 1026234:	10800044 	addi	r2,r2,1
 1026238:	d8800515 	stw	r2,20(sp)
 102623c:	003f8206 	br	1026048 <__alt_data_end+0xfffe8b88>
 1026240:	903e981e 	bne	r18,zero,1025ca4 <__alt_data_end+0xfffe87e4>
 1026244:	003f8b06 	br	1026074 <__alt_data_end+0xfffe8bb4>
 1026248:	d9800517 	ldw	r6,20(sp)
 102624c:	d8c00717 	ldw	r3,28(sp)
 1026250:	00800c44 	movi	r2,49
 1026254:	31800044 	addi	r6,r6,1
 1026258:	d9800515 	stw	r6,20(sp)
 102625c:	18800005 	stb	r2,0(r3)
 1026260:	003ee906 	br	1025e08 <__alt_data_end+0xfffe8948>
 1026264:	dc000317 	ldw	r16,12(sp)
 1026268:	003d6006 	br	10257ec <__alt_data_end+0xfffe832c>
 102626c:	8809883a 	mov	r4,r17
 1026270:	102dc840 	call	102dc84 <__floatsidf>
 1026274:	a009883a 	mov	r4,r20
 1026278:	a80b883a 	mov	r5,r21
 102627c:	100d883a 	mov	r6,r2
 1026280:	180f883a 	mov	r7,r3
 1026284:	10220bc0 	call	10220bc <__muldf3>
 1026288:	1009883a 	mov	r4,r2
 102628c:	180b883a 	mov	r5,r3
 1026290:	000d883a 	mov	r6,zero
 1026294:	01d00734 	movhi	r7,16412
 1026298:	102c84c0 	call	102c84c <__adddf3>
 102629c:	1023883a 	mov	r17,r2
 10262a0:	00bf3034 	movhi	r2,64704
 10262a4:	1885883a 	add	r2,r3,r2
 10262a8:	d8800e15 	stw	r2,56(sp)
 10262ac:	a009883a 	mov	r4,r20
 10262b0:	a80b883a 	mov	r5,r21
 10262b4:	000d883a 	mov	r6,zero
 10262b8:	01d00534 	movhi	r7,16404
 10262bc:	102d32c0 	call	102d32c <__subdf3>
 10262c0:	d9c00e17 	ldw	r7,56(sp)
 10262c4:	1009883a 	mov	r4,r2
 10262c8:	180b883a 	mov	r5,r3
 10262cc:	880d883a 	mov	r6,r17
 10262d0:	102b883a 	mov	r21,r2
 10262d4:	1829883a 	mov	r20,r3
 10262d8:	102d16c0 	call	102d16c <__gedf2>
 10262dc:	00807716 	blt	zero,r2,10264bc <_dtoa_r+0x1388>
 10262e0:	d8800e17 	ldw	r2,56(sp)
 10262e4:	a809883a 	mov	r4,r21
 10262e8:	a00b883a 	mov	r5,r20
 10262ec:	11e0003c 	xorhi	r7,r2,32768
 10262f0:	880d883a 	mov	r6,r17
 10262f4:	102d24c0 	call	102d24c <__ledf2>
 10262f8:	103d6b0e 	bge	r2,zero,10258a8 <__alt_data_end+0xfffe83e8>
 10262fc:	002b883a 	mov	r21,zero
 1026300:	0023883a 	mov	r17,zero
 1026304:	003f4c06 	br	1026038 <__alt_data_end+0xfffe8b78>
 1026308:	d9800917 	ldw	r6,36(sp)
 102630c:	e00b883a 	mov	r5,fp
 1026310:	8009883a 	mov	r4,r16
 1026314:	1028d940 	call	1028d94 <__pow5mult>
 1026318:	1039883a 	mov	fp,r2
 102631c:	003e2706 	br	1025bbc <__alt_data_end+0xfffe86fc>
 1026320:	d8000b15 	stw	zero,44(sp)
 1026324:	003c4906 	br	102544c <__alt_data_end+0xfffe7f8c>
 1026328:	d9000917 	ldw	r4,36(sp)
 102632c:	d9800a17 	ldw	r6,40(sp)
 1026330:	dd400915 	stw	r21,36(sp)
 1026334:	a905c83a 	sub	r2,r21,r4
 1026338:	308d883a 	add	r6,r6,r2
 102633c:	d9800a15 	stw	r6,40(sp)
 1026340:	002b883a 	mov	r21,zero
 1026344:	003df206 	br	1025b10 <__alt_data_end+0xfffe8650>
 1026348:	dc800e15 	stw	r18,56(sp)
 102634c:	982b883a 	mov	r21,r19
 1026350:	04400084 	movi	r17,2
 1026354:	003c7406 	br	1025528 <__alt_data_end+0xfffe8068>
 1026358:	04400044 	movi	r17,1
 102635c:	dc400d15 	stw	r17,52(sp)
 1026360:	dc400615 	stw	r17,24(sp)
 1026364:	dc402215 	stw	r17,136(sp)
 1026368:	80001115 	stw	zero,68(r16)
 102636c:	000b883a 	mov	r5,zero
 1026370:	003c4a06 	br	102549c <__alt_data_end+0xfffe7fdc>
 1026374:	3023883a 	mov	r17,r6
 1026378:	003ffb06 	br	1026368 <__alt_data_end+0xfffe8ea8>
 102637c:	1000021e 	bne	r2,zero,1026388 <_dtoa_r+0x1254>
 1026380:	4200004c 	andi	r8,r8,1
 1026384:	403e8f1e 	bne	r8,zero,1025dc4 <__alt_data_end+0xfffe8904>
 1026388:	01000c04 	movi	r4,48
 102638c:	00000106 	br	1026394 <_dtoa_r+0x1260>
 1026390:	102f883a 	mov	r23,r2
 1026394:	b8bfffc4 	addi	r2,r23,-1
 1026398:	10c00007 	ldb	r3,0(r2)
 102639c:	193ffc26 	beq	r3,r4,1026390 <__alt_data_end+0xfffe8ed0>
 10263a0:	003e9906 	br	1025e08 <__alt_data_end+0xfffe8948>
 10263a4:	d9000517 	ldw	r4,20(sp)
 10263a8:	012fc83a 	sub	r23,zero,r4
 10263ac:	b800ad26 	beq	r23,zero,1026664 <_dtoa_r+0x1530>
 10263b0:	b88003cc 	andi	r2,r23,15
 10263b4:	100490fa 	slli	r2,r2,3
 10263b8:	00c040f4 	movhi	r3,259
 10263bc:	18c2c404 	addi	r3,r3,2832
 10263c0:	1885883a 	add	r2,r3,r2
 10263c4:	11800017 	ldw	r6,0(r2)
 10263c8:	11c00117 	ldw	r7,4(r2)
 10263cc:	b82fd13a 	srai	r23,r23,4
 10263d0:	9009883a 	mov	r4,r18
 10263d4:	980b883a 	mov	r5,r19
 10263d8:	10220bc0 	call	10220bc <__muldf3>
 10263dc:	1029883a 	mov	r20,r2
 10263e0:	182b883a 	mov	r21,r3
 10263e4:	b800f426 	beq	r23,zero,10267b8 <_dtoa_r+0x1684>
 10263e8:	020040f4 	movhi	r8,259
 10263ec:	4202ba04 	addi	r8,r8,2792
 10263f0:	8029883a 	mov	r20,r16
 10263f4:	04400084 	movi	r17,2
 10263f8:	4021883a 	mov	r16,r8
 10263fc:	b980004c 	andi	r6,r23,1
 1026400:	1009883a 	mov	r4,r2
 1026404:	b82fd07a 	srai	r23,r23,1
 1026408:	180b883a 	mov	r5,r3
 102640c:	30000426 	beq	r6,zero,1026420 <_dtoa_r+0x12ec>
 1026410:	81800017 	ldw	r6,0(r16)
 1026414:	81c00117 	ldw	r7,4(r16)
 1026418:	8c400044 	addi	r17,r17,1
 102641c:	10220bc0 	call	10220bc <__muldf3>
 1026420:	84000204 	addi	r16,r16,8
 1026424:	b83ff51e 	bne	r23,zero,10263fc <__alt_data_end+0xfffe8f3c>
 1026428:	a021883a 	mov	r16,r20
 102642c:	182b883a 	mov	r21,r3
 1026430:	1029883a 	mov	r20,r2
 1026434:	003c5506 	br	102558c <__alt_data_end+0xfffe80cc>
 1026438:	d9800517 	ldw	r6,20(sp)
 102643c:	d9000717 	ldw	r4,28(sp)
 1026440:	00c00c04 	movi	r3,48
 1026444:	31800044 	addi	r6,r6,1
 1026448:	d9800515 	stw	r6,20(sp)
 102644c:	20c00005 	stb	r3,0(r4)
 1026450:	02000c44 	movi	r8,49
 1026454:	003da206 	br	1025ae0 <__alt_data_end+0xfffe8620>
 1026458:	89400117 	ldw	r5,4(r17)
 102645c:	8009883a 	mov	r4,r16
 1026460:	102875c0 	call	102875c <_Balloc>
 1026464:	89800417 	ldw	r6,16(r17)
 1026468:	11000304 	addi	r4,r2,12
 102646c:	89400304 	addi	r5,r17,12
 1026470:	31800084 	addi	r6,r6,2
 1026474:	318d883a 	add	r6,r6,r6
 1026478:	318d883a 	add	r6,r6,r6
 102647c:	1027883a 	mov	r19,r2
 1026480:	10283a40 	call	10283a4 <memcpy>
 1026484:	8009883a 	mov	r4,r16
 1026488:	980b883a 	mov	r5,r19
 102648c:	01800044 	movi	r6,1
 1026490:	1028ed40 	call	1028ed4 <__lshift>
 1026494:	1029883a 	mov	r20,r2
 1026498:	003e8606 	br	1025eb4 <__alt_data_end+0xfffe89f4>
 102649c:	00800e44 	movi	r2,57
 10264a0:	90809526 	beq	r18,r2,10266f8 <_dtoa_r+0x15c4>
 10264a4:	92000044 	addi	r8,r18,1
 10264a8:	003f2306 	br	1026138 <__alt_data_end+0xfffe8c78>
 10264ac:	9011883a 	mov	r8,r18
 10264b0:	8825883a 	mov	r18,r17
 10264b4:	a023883a 	mov	r17,r20
 10264b8:	003e3706 	br	1025d98 <__alt_data_end+0xfffe88d8>
 10264bc:	002b883a 	mov	r21,zero
 10264c0:	0023883a 	mov	r17,zero
 10264c4:	003f5606 	br	1026220 <__alt_data_end+0xfffe8d60>
 10264c8:	51bfffc4 	addi	r6,r10,-1
 10264cc:	300490fa 	slli	r2,r6,3
 10264d0:	00c040f4 	movhi	r3,259
 10264d4:	18c2c404 	addi	r3,r3,2832
 10264d8:	1885883a 	add	r2,r3,r2
 10264dc:	d9c00e17 	ldw	r7,56(sp)
 10264e0:	11000017 	ldw	r4,0(r2)
 10264e4:	11400117 	ldw	r5,4(r2)
 10264e8:	d8800717 	ldw	r2,28(sp)
 10264ec:	d9801015 	stw	r6,64(sp)
 10264f0:	880d883a 	mov	r6,r17
 10264f4:	da801615 	stw	r10,88(sp)
 10264f8:	15c00044 	addi	r23,r2,1
 10264fc:	10220bc0 	call	10220bc <__muldf3>
 1026500:	a80b883a 	mov	r5,r21
 1026504:	a009883a 	mov	r4,r20
 1026508:	d8c01115 	stw	r3,68(sp)
 102650c:	d8800e15 	stw	r2,56(sp)
 1026510:	102dbfc0 	call	102dbfc <__fixdfsi>
 1026514:	1009883a 	mov	r4,r2
 1026518:	1023883a 	mov	r17,r2
 102651c:	102dc840 	call	102dc84 <__floatsidf>
 1026520:	a009883a 	mov	r4,r20
 1026524:	a80b883a 	mov	r5,r21
 1026528:	100d883a 	mov	r6,r2
 102652c:	180f883a 	mov	r7,r3
 1026530:	102d32c0 	call	102d32c <__subdf3>
 1026534:	1813883a 	mov	r9,r3
 1026538:	d8c00717 	ldw	r3,28(sp)
 102653c:	8c400c04 	addi	r17,r17,48
 1026540:	1011883a 	mov	r8,r2
 1026544:	1c400005 	stb	r17,0(r3)
 1026548:	da801617 	ldw	r10,88(sp)
 102654c:	00800044 	movi	r2,1
 1026550:	50802326 	beq	r10,r2,10265e0 <_dtoa_r+0x14ac>
 1026554:	d8800717 	ldw	r2,28(sp)
 1026558:	b82b883a 	mov	r21,r23
 102655c:	dc001315 	stw	r16,76(sp)
 1026560:	12a9883a 	add	r20,r2,r10
 1026564:	4807883a 	mov	r3,r9
 1026568:	4005883a 	mov	r2,r8
 102656c:	dc801415 	stw	r18,80(sp)
 1026570:	000d883a 	mov	r6,zero
 1026574:	01d00934 	movhi	r7,16420
 1026578:	1009883a 	mov	r4,r2
 102657c:	180b883a 	mov	r5,r3
 1026580:	10220bc0 	call	10220bc <__muldf3>
 1026584:	180b883a 	mov	r5,r3
 1026588:	1009883a 	mov	r4,r2
 102658c:	1821883a 	mov	r16,r3
 1026590:	1025883a 	mov	r18,r2
 1026594:	102dbfc0 	call	102dbfc <__fixdfsi>
 1026598:	1009883a 	mov	r4,r2
 102659c:	1023883a 	mov	r17,r2
 10265a0:	102dc840 	call	102dc84 <__floatsidf>
 10265a4:	9009883a 	mov	r4,r18
 10265a8:	800b883a 	mov	r5,r16
 10265ac:	100d883a 	mov	r6,r2
 10265b0:	180f883a 	mov	r7,r3
 10265b4:	8c400c04 	addi	r17,r17,48
 10265b8:	102d32c0 	call	102d32c <__subdf3>
 10265bc:	ad400044 	addi	r21,r21,1
 10265c0:	ac7fffc5 	stb	r17,-1(r21)
 10265c4:	ad3fea1e 	bne	r21,r20,1026570 <__alt_data_end+0xfffe90b0>
 10265c8:	1813883a 	mov	r9,r3
 10265cc:	d8c01017 	ldw	r3,64(sp)
 10265d0:	dc001317 	ldw	r16,76(sp)
 10265d4:	dc801417 	ldw	r18,80(sp)
 10265d8:	1011883a 	mov	r8,r2
 10265dc:	b8ef883a 	add	r23,r23,r3
 10265e0:	d9000e17 	ldw	r4,56(sp)
 10265e4:	d9401117 	ldw	r5,68(sp)
 10265e8:	000d883a 	mov	r6,zero
 10265ec:	01cff834 	movhi	r7,16352
 10265f0:	da001715 	stw	r8,92(sp)
 10265f4:	da401515 	stw	r9,84(sp)
 10265f8:	102c84c0 	call	102c84c <__adddf3>
 10265fc:	da001717 	ldw	r8,92(sp)
 1026600:	da401517 	ldw	r9,84(sp)
 1026604:	1009883a 	mov	r4,r2
 1026608:	400d883a 	mov	r6,r8
 102660c:	480f883a 	mov	r7,r9
 1026610:	180b883a 	mov	r5,r3
 1026614:	102d24c0 	call	102d24c <__ledf2>
 1026618:	da001717 	ldw	r8,92(sp)
 102661c:	da401517 	ldw	r9,84(sp)
 1026620:	10003b0e 	bge	r2,zero,1026710 <_dtoa_r+0x15dc>
 1026624:	d9001217 	ldw	r4,72(sp)
 1026628:	bd7fffc3 	ldbu	r21,-1(r23)
 102662c:	d9000515 	stw	r4,20(sp)
 1026630:	003d1c06 	br	1025aa4 <__alt_data_end+0xfffe85e4>
 1026634:	d8c00817 	ldw	r3,32(sp)
 1026638:	18a9c83a 	sub	r20,r3,r2
 102663c:	0005883a 	mov	r2,zero
 1026640:	003d3706 	br	1025b20 <__alt_data_end+0xfffe8660>
 1026644:	00800044 	movi	r2,1
 1026648:	003dd006 	br	1025d8c <__alt_data_end+0xfffe88cc>
 102664c:	d8c00217 	ldw	r3,8(sp)
 1026650:	00800d84 	movi	r2,54
 1026654:	dd400917 	ldw	r21,36(sp)
 1026658:	10c5c83a 	sub	r2,r2,r3
 102665c:	dd000817 	ldw	r20,32(sp)
 1026660:	003d2f06 	br	1025b20 <__alt_data_end+0xfffe8660>
 1026664:	9029883a 	mov	r20,r18
 1026668:	982b883a 	mov	r21,r19
 102666c:	04400084 	movi	r17,2
 1026670:	003bc606 	br	102558c <__alt_data_end+0xfffe80cc>
 1026674:	d8800617 	ldw	r2,24(sp)
 1026678:	103efc26 	beq	r2,zero,102626c <__alt_data_end+0xfffe8dac>
 102667c:	d8c00d17 	ldw	r3,52(sp)
 1026680:	00fc890e 	bge	zero,r3,10258a8 <__alt_data_end+0xfffe83e8>
 1026684:	a80b883a 	mov	r5,r21
 1026688:	a009883a 	mov	r4,r20
 102668c:	000d883a 	mov	r6,zero
 1026690:	01d00934 	movhi	r7,16420
 1026694:	10220bc0 	call	10220bc <__muldf3>
 1026698:	89000044 	addi	r4,r17,1
 102669c:	1029883a 	mov	r20,r2
 10266a0:	182b883a 	mov	r21,r3
 10266a4:	102dc840 	call	102dc84 <__floatsidf>
 10266a8:	a009883a 	mov	r4,r20
 10266ac:	a80b883a 	mov	r5,r21
 10266b0:	100d883a 	mov	r6,r2
 10266b4:	180f883a 	mov	r7,r3
 10266b8:	10220bc0 	call	10220bc <__muldf3>
 10266bc:	1009883a 	mov	r4,r2
 10266c0:	180b883a 	mov	r5,r3
 10266c4:	000d883a 	mov	r6,zero
 10266c8:	01d00734 	movhi	r7,16412
 10266cc:	102c84c0 	call	102c84c <__adddf3>
 10266d0:	d9000517 	ldw	r4,20(sp)
 10266d4:	1023883a 	mov	r17,r2
 10266d8:	00bf3034 	movhi	r2,64704
 10266dc:	213fffc4 	addi	r4,r4,-1
 10266e0:	1885883a 	add	r2,r3,r2
 10266e4:	d9001215 	stw	r4,72(sp)
 10266e8:	d8800e15 	stw	r2,56(sp)
 10266ec:	da800d17 	ldw	r10,52(sp)
 10266f0:	003bc306 	br	1025600 <__alt_data_end+0xfffe8140>
 10266f4:	b039883a 	mov	fp,r22
 10266f8:	01000e44 	movi	r4,57
 10266fc:	8825883a 	mov	r18,r17
 1026700:	9dc00044 	addi	r23,r19,1
 1026704:	99000005 	stb	r4,0(r19)
 1026708:	a023883a 	mov	r17,r20
 102670c:	003dae06 	br	1025dc8 <__alt_data_end+0xfffe8908>
 1026710:	d9800e17 	ldw	r6,56(sp)
 1026714:	d9c01117 	ldw	r7,68(sp)
 1026718:	0009883a 	mov	r4,zero
 102671c:	014ff834 	movhi	r5,16352
 1026720:	da001715 	stw	r8,92(sp)
 1026724:	da401515 	stw	r9,84(sp)
 1026728:	102d32c0 	call	102d32c <__subdf3>
 102672c:	da001717 	ldw	r8,92(sp)
 1026730:	da401517 	ldw	r9,84(sp)
 1026734:	1009883a 	mov	r4,r2
 1026738:	180b883a 	mov	r5,r3
 102673c:	400d883a 	mov	r6,r8
 1026740:	480f883a 	mov	r7,r9
 1026744:	102d16c0 	call	102d16c <__gedf2>
 1026748:	00bc570e 	bge	zero,r2,10258a8 <__alt_data_end+0xfffe83e8>
 102674c:	01000c04 	movi	r4,48
 1026750:	00000106 	br	1026758 <_dtoa_r+0x1624>
 1026754:	102f883a 	mov	r23,r2
 1026758:	b8bfffc4 	addi	r2,r23,-1
 102675c:	10c00007 	ldb	r3,0(r2)
 1026760:	193ffc26 	beq	r3,r4,1026754 <__alt_data_end+0xfffe9294>
 1026764:	d9801217 	ldw	r6,72(sp)
 1026768:	d9800515 	stw	r6,20(sp)
 102676c:	003c1f06 	br	10257ec <__alt_data_end+0xfffe832c>
 1026770:	d8801217 	ldw	r2,72(sp)
 1026774:	dc001117 	ldw	r16,68(sp)
 1026778:	d8800515 	stw	r2,20(sp)
 102677c:	003cc906 	br	1025aa4 <__alt_data_end+0xfffe85e4>
 1026780:	dd801317 	ldw	r22,76(sp)
 1026784:	dc001117 	ldw	r16,68(sp)
 1026788:	dcc01417 	ldw	r19,80(sp)
 102678c:	dc801017 	ldw	r18,64(sp)
 1026790:	003c4506 	br	10258a8 <__alt_data_end+0xfffe83e8>
 1026794:	103e5d1e 	bne	r2,zero,102610c <__alt_data_end+0xfffe8c4c>
 1026798:	4080004c 	andi	r2,r8,1
 102679c:	103e5b26 	beq	r2,zero,102610c <__alt_data_end+0xfffe8c4c>
 10267a0:	003e5706 	br	1026100 <__alt_data_end+0xfffe8c40>
 10267a4:	d8c00317 	ldw	r3,12(sp)
 10267a8:	00800084 	movi	r2,2
 10267ac:	10c00a16 	blt	r2,r3,10267d8 <_dtoa_r+0x16a4>
 10267b0:	d9000d17 	ldw	r4,52(sp)
 10267b4:	003e8306 	br	10261c4 <__alt_data_end+0xfffe8d04>
 10267b8:	04400084 	movi	r17,2
 10267bc:	003b7306 	br	102558c <__alt_data_end+0xfffe80cc>
 10267c0:	d9801217 	ldw	r6,72(sp)
 10267c4:	d9800515 	stw	r6,20(sp)
 10267c8:	003cb606 	br	1025aa4 <__alt_data_end+0xfffe85e4>
 10267cc:	d9001217 	ldw	r4,72(sp)
 10267d0:	d9000515 	stw	r4,20(sp)
 10267d4:	003c0506 	br	10257ec <__alt_data_end+0xfffe832c>
 10267d8:	d9800d17 	ldw	r6,52(sp)
 10267dc:	d9800615 	stw	r6,24(sp)
 10267e0:	003e8306 	br	10261f0 <__alt_data_end+0xfffe8d30>
 10267e4:	d9800317 	ldw	r6,12(sp)
 10267e8:	00800084 	movi	r2,2
 10267ec:	11800216 	blt	r2,r6,10267f8 <_dtoa_r+0x16c4>
 10267f0:	d8800d17 	ldw	r2,52(sp)
 10267f4:	003da606 	br	1025e90 <__alt_data_end+0xfffe89d0>
 10267f8:	d8800d17 	ldw	r2,52(sp)
 10267fc:	d8800615 	stw	r2,24(sp)
 1026800:	003e7b06 	br	10261f0 <__alt_data_end+0xfffe8d30>
 1026804:	05000044 	movi	r20,1
 1026808:	003b0506 	br	1025420 <__alt_data_end+0xfffe7f60>
 102680c:	8009883a 	mov	r4,r16
 1026810:	80001115 	stw	zero,68(r16)
 1026814:	000b883a 	mov	r5,zero
 1026818:	102875c0 	call	102875c <_Balloc>
 102681c:	d8800715 	stw	r2,28(sp)
 1026820:	d8c00717 	ldw	r3,28(sp)
 1026824:	00bfffc4 	movi	r2,-1
 1026828:	01000044 	movi	r4,1
 102682c:	d8800615 	stw	r2,24(sp)
 1026830:	80c01015 	stw	r3,64(r16)
 1026834:	d9000b15 	stw	r4,44(sp)
 1026838:	d8002215 	stw	zero,136(sp)
 102683c:	d8800d15 	stw	r2,52(sp)
 1026840:	003c1906 	br	10258a8 <__alt_data_end+0xfffe83e8>
 1026844:	193d2926 	beq	r3,r4,1025cec <__alt_data_end+0xfffe882c>
 1026848:	00c00f04 	movi	r3,60
 102684c:	1885c83a 	sub	r2,r3,r2
 1026850:	003d7b06 	br	1025e40 <__alt_data_end+0xfffe8980>
 1026854:	000b883a 	mov	r5,zero
 1026858:	003b1006 	br	102549c <__alt_data_end+0xfffe7fdc>

0102685c <_fflush_r>:
 102685c:	defffb04 	addi	sp,sp,-20
 1026860:	dcc00315 	stw	r19,12(sp)
 1026864:	dc000015 	stw	r16,0(sp)
 1026868:	dfc00415 	stw	ra,16(sp)
 102686c:	dc800215 	stw	r18,8(sp)
 1026870:	dc400115 	stw	r17,4(sp)
 1026874:	2027883a 	mov	r19,r4
 1026878:	2821883a 	mov	r16,r5
 102687c:	20000226 	beq	r4,zero,1026888 <_fflush_r+0x2c>
 1026880:	20800e17 	ldw	r2,56(r4)
 1026884:	10005326 	beq	r2,zero,10269d4 <_fflush_r+0x178>
 1026888:	8080030b 	ldhu	r2,12(r16)
 102688c:	10ffffcc 	andi	r3,r2,65535
 1026890:	18e0001c 	xori	r3,r3,32768
 1026894:	18e00004 	addi	r3,r3,-32768
 1026898:	18002c26 	beq	r3,zero,102694c <_fflush_r+0xf0>
 102689c:	10c0020c 	andi	r3,r2,8
 10268a0:	1800321e 	bne	r3,zero,102696c <_fflush_r+0x110>
 10268a4:	80c00117 	ldw	r3,4(r16)
 10268a8:	10820014 	ori	r2,r2,2048
 10268ac:	8080030d 	sth	r2,12(r16)
 10268b0:	00c0570e 	bge	zero,r3,1026a10 <_fflush_r+0x1b4>
 10268b4:	82000a17 	ldw	r8,40(r16)
 10268b8:	40002426 	beq	r8,zero,102694c <_fflush_r+0xf0>
 10268bc:	9c400017 	ldw	r17,0(r19)
 10268c0:	10c4000c 	andi	r3,r2,4096
 10268c4:	98000015 	stw	zero,0(r19)
 10268c8:	18004626 	beq	r3,zero,10269e4 <_fflush_r+0x188>
 10268cc:	81801417 	ldw	r6,80(r16)
 10268d0:	10c0010c 	andi	r3,r2,4
 10268d4:	18000626 	beq	r3,zero,10268f0 <_fflush_r+0x94>
 10268d8:	80c00117 	ldw	r3,4(r16)
 10268dc:	80800c17 	ldw	r2,48(r16)
 10268e0:	30cdc83a 	sub	r6,r6,r3
 10268e4:	10000226 	beq	r2,zero,10268f0 <_fflush_r+0x94>
 10268e8:	80800f17 	ldw	r2,60(r16)
 10268ec:	308dc83a 	sub	r6,r6,r2
 10268f0:	81400717 	ldw	r5,28(r16)
 10268f4:	9809883a 	mov	r4,r19
 10268f8:	000f883a 	mov	r7,zero
 10268fc:	403ee83a 	callr	r8
 1026900:	00ffffc4 	movi	r3,-1
 1026904:	10c04526 	beq	r2,r3,1026a1c <_fflush_r+0x1c0>
 1026908:	80c0030b 	ldhu	r3,12(r16)
 102690c:	81000417 	ldw	r4,16(r16)
 1026910:	80000115 	stw	zero,4(r16)
 1026914:	197dffcc 	andi	r5,r3,63487
 1026918:	8140030d 	sth	r5,12(r16)
 102691c:	81000015 	stw	r4,0(r16)
 1026920:	18c4000c 	andi	r3,r3,4096
 1026924:	18000126 	beq	r3,zero,102692c <_fflush_r+0xd0>
 1026928:	80801415 	stw	r2,80(r16)
 102692c:	81400c17 	ldw	r5,48(r16)
 1026930:	9c400015 	stw	r17,0(r19)
 1026934:	28000526 	beq	r5,zero,102694c <_fflush_r+0xf0>
 1026938:	80801004 	addi	r2,r16,64
 102693c:	28800226 	beq	r5,r2,1026948 <_fflush_r+0xec>
 1026940:	9809883a 	mov	r4,r19
 1026944:	1026f780 	call	1026f78 <_free_r>
 1026948:	80000c15 	stw	zero,48(r16)
 102694c:	0005883a 	mov	r2,zero
 1026950:	dfc00417 	ldw	ra,16(sp)
 1026954:	dcc00317 	ldw	r19,12(sp)
 1026958:	dc800217 	ldw	r18,8(sp)
 102695c:	dc400117 	ldw	r17,4(sp)
 1026960:	dc000017 	ldw	r16,0(sp)
 1026964:	dec00504 	addi	sp,sp,20
 1026968:	f800283a 	ret
 102696c:	84800417 	ldw	r18,16(r16)
 1026970:	903ff626 	beq	r18,zero,102694c <__alt_data_end+0xfffe948c>
 1026974:	84400017 	ldw	r17,0(r16)
 1026978:	108000cc 	andi	r2,r2,3
 102697c:	84800015 	stw	r18,0(r16)
 1026980:	8ca3c83a 	sub	r17,r17,r18
 1026984:	10001526 	beq	r2,zero,10269dc <_fflush_r+0x180>
 1026988:	0005883a 	mov	r2,zero
 102698c:	80800215 	stw	r2,8(r16)
 1026990:	04400316 	blt	zero,r17,10269a0 <_fflush_r+0x144>
 1026994:	003fed06 	br	102694c <__alt_data_end+0xfffe948c>
 1026998:	90a5883a 	add	r18,r18,r2
 102699c:	047feb0e 	bge	zero,r17,102694c <__alt_data_end+0xfffe948c>
 10269a0:	80800917 	ldw	r2,36(r16)
 10269a4:	81400717 	ldw	r5,28(r16)
 10269a8:	880f883a 	mov	r7,r17
 10269ac:	900d883a 	mov	r6,r18
 10269b0:	9809883a 	mov	r4,r19
 10269b4:	103ee83a 	callr	r2
 10269b8:	88a3c83a 	sub	r17,r17,r2
 10269bc:	00bff616 	blt	zero,r2,1026998 <__alt_data_end+0xfffe94d8>
 10269c0:	80c0030b 	ldhu	r3,12(r16)
 10269c4:	00bfffc4 	movi	r2,-1
 10269c8:	18c01014 	ori	r3,r3,64
 10269cc:	80c0030d 	sth	r3,12(r16)
 10269d0:	003fdf06 	br	1026950 <__alt_data_end+0xfffe9490>
 10269d4:	1026e040 	call	1026e04 <__sinit>
 10269d8:	003fab06 	br	1026888 <__alt_data_end+0xfffe93c8>
 10269dc:	80800517 	ldw	r2,20(r16)
 10269e0:	003fea06 	br	102698c <__alt_data_end+0xfffe94cc>
 10269e4:	81400717 	ldw	r5,28(r16)
 10269e8:	000d883a 	mov	r6,zero
 10269ec:	9809883a 	mov	r4,r19
 10269f0:	01c00044 	movi	r7,1
 10269f4:	403ee83a 	callr	r8
 10269f8:	100d883a 	mov	r6,r2
 10269fc:	00bfffc4 	movi	r2,-1
 1026a00:	30801326 	beq	r6,r2,1026a50 <_fflush_r+0x1f4>
 1026a04:	8080030b 	ldhu	r2,12(r16)
 1026a08:	82000a17 	ldw	r8,40(r16)
 1026a0c:	003fb006 	br	10268d0 <__alt_data_end+0xfffe9410>
 1026a10:	80c00f17 	ldw	r3,60(r16)
 1026a14:	00ffa716 	blt	zero,r3,10268b4 <__alt_data_end+0xfffe93f4>
 1026a18:	003fcc06 	br	102694c <__alt_data_end+0xfffe948c>
 1026a1c:	98c00017 	ldw	r3,0(r19)
 1026a20:	183fb926 	beq	r3,zero,1026908 <__alt_data_end+0xfffe9448>
 1026a24:	01000744 	movi	r4,29
 1026a28:	19000226 	beq	r3,r4,1026a34 <_fflush_r+0x1d8>
 1026a2c:	01000584 	movi	r4,22
 1026a30:	1900101e 	bne	r3,r4,1026a74 <_fflush_r+0x218>
 1026a34:	8080030b 	ldhu	r2,12(r16)
 1026a38:	80c00417 	ldw	r3,16(r16)
 1026a3c:	80000115 	stw	zero,4(r16)
 1026a40:	10bdffcc 	andi	r2,r2,63487
 1026a44:	8080030d 	sth	r2,12(r16)
 1026a48:	80c00015 	stw	r3,0(r16)
 1026a4c:	003fb706 	br	102692c <__alt_data_end+0xfffe946c>
 1026a50:	98800017 	ldw	r2,0(r19)
 1026a54:	103feb26 	beq	r2,zero,1026a04 <__alt_data_end+0xfffe9544>
 1026a58:	00c00744 	movi	r3,29
 1026a5c:	10c00226 	beq	r2,r3,1026a68 <_fflush_r+0x20c>
 1026a60:	00c00584 	movi	r3,22
 1026a64:	10ffd61e 	bne	r2,r3,10269c0 <__alt_data_end+0xfffe9500>
 1026a68:	9c400015 	stw	r17,0(r19)
 1026a6c:	0005883a 	mov	r2,zero
 1026a70:	003fb706 	br	1026950 <__alt_data_end+0xfffe9490>
 1026a74:	80c0030b 	ldhu	r3,12(r16)
 1026a78:	18c01014 	ori	r3,r3,64
 1026a7c:	80c0030d 	sth	r3,12(r16)
 1026a80:	003fb306 	br	1026950 <__alt_data_end+0xfffe9490>

01026a84 <fflush>:
 1026a84:	20000526 	beq	r4,zero,1026a9c <fflush+0x18>
 1026a88:	008040f4 	movhi	r2,259
 1026a8c:	1089b504 	addi	r2,r2,9940
 1026a90:	200b883a 	mov	r5,r4
 1026a94:	11000017 	ldw	r4,0(r2)
 1026a98:	102685c1 	jmpi	102685c <_fflush_r>
 1026a9c:	008040f4 	movhi	r2,259
 1026aa0:	1089b404 	addi	r2,r2,9936
 1026aa4:	11000017 	ldw	r4,0(r2)
 1026aa8:	014040b4 	movhi	r5,258
 1026aac:	295a1704 	addi	r5,r5,26716
 1026ab0:	10277c41 	jmpi	10277c4 <_fwalk_reent>

01026ab4 <__fp_lock>:
 1026ab4:	0005883a 	mov	r2,zero
 1026ab8:	f800283a 	ret

01026abc <__fp_unlock>:
 1026abc:	0005883a 	mov	r2,zero
 1026ac0:	f800283a 	ret

01026ac4 <_cleanup_r>:
 1026ac4:	014040f4 	movhi	r5,259
 1026ac8:	296d8e04 	addi	r5,r5,-18888
 1026acc:	102770c1 	jmpi	102770c <_fwalk>

01026ad0 <__sinit.part.1>:
 1026ad0:	defff604 	addi	sp,sp,-40
 1026ad4:	00c040b4 	movhi	r3,258
 1026ad8:	dfc00915 	stw	ra,36(sp)
 1026adc:	df000815 	stw	fp,32(sp)
 1026ae0:	ddc00715 	stw	r23,28(sp)
 1026ae4:	dd800615 	stw	r22,24(sp)
 1026ae8:	dd400515 	stw	r21,20(sp)
 1026aec:	dd000415 	stw	r20,16(sp)
 1026af0:	dcc00315 	stw	r19,12(sp)
 1026af4:	dc800215 	stw	r18,8(sp)
 1026af8:	dc400115 	stw	r17,4(sp)
 1026afc:	dc000015 	stw	r16,0(sp)
 1026b00:	18dab104 	addi	r3,r3,27332
 1026b04:	24000117 	ldw	r16,4(r4)
 1026b08:	20c00f15 	stw	r3,60(r4)
 1026b0c:	07000044 	movi	fp,1
 1026b10:	00c000c4 	movi	r3,3
 1026b14:	2080bb04 	addi	r2,r4,748
 1026b18:	20c0b915 	stw	r3,740(r4)
 1026b1c:	27000e15 	stw	fp,56(r4)
 1026b20:	2080ba15 	stw	r2,744(r4)
 1026b24:	2000b815 	stw	zero,736(r4)
 1026b28:	05c00204 	movi	r23,8
 1026b2c:	00800104 	movi	r2,4
 1026b30:	2025883a 	mov	r18,r4
 1026b34:	b80d883a 	mov	r6,r23
 1026b38:	81001704 	addi	r4,r16,92
 1026b3c:	000b883a 	mov	r5,zero
 1026b40:	80000015 	stw	zero,0(r16)
 1026b44:	80000115 	stw	zero,4(r16)
 1026b48:	80000215 	stw	zero,8(r16)
 1026b4c:	8080030d 	sth	r2,12(r16)
 1026b50:	80001915 	stw	zero,100(r16)
 1026b54:	8000038d 	sth	zero,14(r16)
 1026b58:	80000415 	stw	zero,16(r16)
 1026b5c:	80000515 	stw	zero,20(r16)
 1026b60:	80000615 	stw	zero,24(r16)
 1026b64:	10286380 	call	1028638 <memset>
 1026b68:	058040f4 	movhi	r22,259
 1026b6c:	94400217 	ldw	r17,8(r18)
 1026b70:	054040f4 	movhi	r21,259
 1026b74:	050040f4 	movhi	r20,259
 1026b78:	04c040f4 	movhi	r19,259
 1026b7c:	b5a75404 	addi	r22,r22,-25264
 1026b80:	ad676b04 	addi	r21,r21,-25172
 1026b84:	a5278a04 	addi	r20,r20,-25048
 1026b88:	9ce7a104 	addi	r19,r19,-24956
 1026b8c:	85800815 	stw	r22,32(r16)
 1026b90:	85400915 	stw	r21,36(r16)
 1026b94:	85000a15 	stw	r20,40(r16)
 1026b98:	84c00b15 	stw	r19,44(r16)
 1026b9c:	84000715 	stw	r16,28(r16)
 1026ba0:	00800284 	movi	r2,10
 1026ba4:	89001704 	addi	r4,r17,92
 1026ba8:	b80d883a 	mov	r6,r23
 1026bac:	000b883a 	mov	r5,zero
 1026bb0:	88000015 	stw	zero,0(r17)
 1026bb4:	88000115 	stw	zero,4(r17)
 1026bb8:	88000215 	stw	zero,8(r17)
 1026bbc:	8880030d 	sth	r2,12(r17)
 1026bc0:	88001915 	stw	zero,100(r17)
 1026bc4:	8f00038d 	sth	fp,14(r17)
 1026bc8:	88000415 	stw	zero,16(r17)
 1026bcc:	88000515 	stw	zero,20(r17)
 1026bd0:	88000615 	stw	zero,24(r17)
 1026bd4:	10286380 	call	1028638 <memset>
 1026bd8:	94000317 	ldw	r16,12(r18)
 1026bdc:	00800484 	movi	r2,18
 1026be0:	8c400715 	stw	r17,28(r17)
 1026be4:	8d800815 	stw	r22,32(r17)
 1026be8:	8d400915 	stw	r21,36(r17)
 1026bec:	8d000a15 	stw	r20,40(r17)
 1026bf0:	8cc00b15 	stw	r19,44(r17)
 1026bf4:	8080030d 	sth	r2,12(r16)
 1026bf8:	00800084 	movi	r2,2
 1026bfc:	80000015 	stw	zero,0(r16)
 1026c00:	80000115 	stw	zero,4(r16)
 1026c04:	80000215 	stw	zero,8(r16)
 1026c08:	80001915 	stw	zero,100(r16)
 1026c0c:	8080038d 	sth	r2,14(r16)
 1026c10:	80000415 	stw	zero,16(r16)
 1026c14:	80000515 	stw	zero,20(r16)
 1026c18:	80000615 	stw	zero,24(r16)
 1026c1c:	81001704 	addi	r4,r16,92
 1026c20:	000b883a 	mov	r5,zero
 1026c24:	b80d883a 	mov	r6,r23
 1026c28:	10286380 	call	1028638 <memset>
 1026c2c:	84000715 	stw	r16,28(r16)
 1026c30:	85800815 	stw	r22,32(r16)
 1026c34:	85400915 	stw	r21,36(r16)
 1026c38:	85000a15 	stw	r20,40(r16)
 1026c3c:	84c00b15 	stw	r19,44(r16)
 1026c40:	dfc00917 	ldw	ra,36(sp)
 1026c44:	df000817 	ldw	fp,32(sp)
 1026c48:	ddc00717 	ldw	r23,28(sp)
 1026c4c:	dd800617 	ldw	r22,24(sp)
 1026c50:	dd400517 	ldw	r21,20(sp)
 1026c54:	dd000417 	ldw	r20,16(sp)
 1026c58:	dcc00317 	ldw	r19,12(sp)
 1026c5c:	dc800217 	ldw	r18,8(sp)
 1026c60:	dc400117 	ldw	r17,4(sp)
 1026c64:	dc000017 	ldw	r16,0(sp)
 1026c68:	dec00a04 	addi	sp,sp,40
 1026c6c:	f800283a 	ret

01026c70 <__sfmoreglue>:
 1026c70:	defffc04 	addi	sp,sp,-16
 1026c74:	dc400115 	stw	r17,4(sp)
 1026c78:	2c401a24 	muli	r17,r5,104
 1026c7c:	dc800215 	stw	r18,8(sp)
 1026c80:	2825883a 	mov	r18,r5
 1026c84:	89400304 	addi	r5,r17,12
 1026c88:	dc000015 	stw	r16,0(sp)
 1026c8c:	dfc00315 	stw	ra,12(sp)
 1026c90:	1027b140 	call	1027b14 <_malloc_r>
 1026c94:	1021883a 	mov	r16,r2
 1026c98:	10000726 	beq	r2,zero,1026cb8 <__sfmoreglue+0x48>
 1026c9c:	11000304 	addi	r4,r2,12
 1026ca0:	10000015 	stw	zero,0(r2)
 1026ca4:	14800115 	stw	r18,4(r2)
 1026ca8:	11000215 	stw	r4,8(r2)
 1026cac:	000b883a 	mov	r5,zero
 1026cb0:	880d883a 	mov	r6,r17
 1026cb4:	10286380 	call	1028638 <memset>
 1026cb8:	8005883a 	mov	r2,r16
 1026cbc:	dfc00317 	ldw	ra,12(sp)
 1026cc0:	dc800217 	ldw	r18,8(sp)
 1026cc4:	dc400117 	ldw	r17,4(sp)
 1026cc8:	dc000017 	ldw	r16,0(sp)
 1026ccc:	dec00404 	addi	sp,sp,16
 1026cd0:	f800283a 	ret

01026cd4 <__sfp>:
 1026cd4:	008040f4 	movhi	r2,259
 1026cd8:	defffb04 	addi	sp,sp,-20
 1026cdc:	1089b404 	addi	r2,r2,9936
 1026ce0:	dc800215 	stw	r18,8(sp)
 1026ce4:	14800017 	ldw	r18,0(r2)
 1026ce8:	dcc00315 	stw	r19,12(sp)
 1026cec:	dfc00415 	stw	ra,16(sp)
 1026cf0:	90800e17 	ldw	r2,56(r18)
 1026cf4:	dc400115 	stw	r17,4(sp)
 1026cf8:	dc000015 	stw	r16,0(sp)
 1026cfc:	2027883a 	mov	r19,r4
 1026d00:	1000021e 	bne	r2,zero,1026d0c <__sfp+0x38>
 1026d04:	9009883a 	mov	r4,r18
 1026d08:	1026ad00 	call	1026ad0 <__sinit.part.1>
 1026d0c:	9480b804 	addi	r18,r18,736
 1026d10:	047fffc4 	movi	r17,-1
 1026d14:	91400117 	ldw	r5,4(r18)
 1026d18:	94000217 	ldw	r16,8(r18)
 1026d1c:	297fffc4 	addi	r5,r5,-1
 1026d20:	28000a16 	blt	r5,zero,1026d4c <__sfp+0x78>
 1026d24:	8080030f 	ldh	r2,12(r16)
 1026d28:	10000c26 	beq	r2,zero,1026d5c <__sfp+0x88>
 1026d2c:	80c01d04 	addi	r3,r16,116
 1026d30:	00000206 	br	1026d3c <__sfp+0x68>
 1026d34:	18bfe60f 	ldh	r2,-104(r3)
 1026d38:	10000826 	beq	r2,zero,1026d5c <__sfp+0x88>
 1026d3c:	297fffc4 	addi	r5,r5,-1
 1026d40:	1c3ffd04 	addi	r16,r3,-12
 1026d44:	18c01a04 	addi	r3,r3,104
 1026d48:	2c7ffa1e 	bne	r5,r17,1026d34 <__alt_data_end+0xfffe9874>
 1026d4c:	90800017 	ldw	r2,0(r18)
 1026d50:	10001d26 	beq	r2,zero,1026dc8 <__sfp+0xf4>
 1026d54:	1025883a 	mov	r18,r2
 1026d58:	003fee06 	br	1026d14 <__alt_data_end+0xfffe9854>
 1026d5c:	00bfffc4 	movi	r2,-1
 1026d60:	8080038d 	sth	r2,14(r16)
 1026d64:	00800044 	movi	r2,1
 1026d68:	8080030d 	sth	r2,12(r16)
 1026d6c:	80001915 	stw	zero,100(r16)
 1026d70:	80000015 	stw	zero,0(r16)
 1026d74:	80000215 	stw	zero,8(r16)
 1026d78:	80000115 	stw	zero,4(r16)
 1026d7c:	80000415 	stw	zero,16(r16)
 1026d80:	80000515 	stw	zero,20(r16)
 1026d84:	80000615 	stw	zero,24(r16)
 1026d88:	81001704 	addi	r4,r16,92
 1026d8c:	000b883a 	mov	r5,zero
 1026d90:	01800204 	movi	r6,8
 1026d94:	10286380 	call	1028638 <memset>
 1026d98:	8005883a 	mov	r2,r16
 1026d9c:	80000c15 	stw	zero,48(r16)
 1026da0:	80000d15 	stw	zero,52(r16)
 1026da4:	80001115 	stw	zero,68(r16)
 1026da8:	80001215 	stw	zero,72(r16)
 1026dac:	dfc00417 	ldw	ra,16(sp)
 1026db0:	dcc00317 	ldw	r19,12(sp)
 1026db4:	dc800217 	ldw	r18,8(sp)
 1026db8:	dc400117 	ldw	r17,4(sp)
 1026dbc:	dc000017 	ldw	r16,0(sp)
 1026dc0:	dec00504 	addi	sp,sp,20
 1026dc4:	f800283a 	ret
 1026dc8:	9809883a 	mov	r4,r19
 1026dcc:	01400104 	movi	r5,4
 1026dd0:	1026c700 	call	1026c70 <__sfmoreglue>
 1026dd4:	90800015 	stw	r2,0(r18)
 1026dd8:	103fde1e 	bne	r2,zero,1026d54 <__alt_data_end+0xfffe9894>
 1026ddc:	00800304 	movi	r2,12
 1026de0:	98800015 	stw	r2,0(r19)
 1026de4:	0005883a 	mov	r2,zero
 1026de8:	003ff006 	br	1026dac <__alt_data_end+0xfffe98ec>

01026dec <_cleanup>:
 1026dec:	008040f4 	movhi	r2,259
 1026df0:	1089b404 	addi	r2,r2,9936
 1026df4:	11000017 	ldw	r4,0(r2)
 1026df8:	014040f4 	movhi	r5,259
 1026dfc:	296d8e04 	addi	r5,r5,-18888
 1026e00:	102770c1 	jmpi	102770c <_fwalk>

01026e04 <__sinit>:
 1026e04:	20800e17 	ldw	r2,56(r4)
 1026e08:	10000126 	beq	r2,zero,1026e10 <__sinit+0xc>
 1026e0c:	f800283a 	ret
 1026e10:	1026ad01 	jmpi	1026ad0 <__sinit.part.1>

01026e14 <__sfp_lock_acquire>:
 1026e14:	f800283a 	ret

01026e18 <__sfp_lock_release>:
 1026e18:	f800283a 	ret

01026e1c <__sinit_lock_acquire>:
 1026e1c:	f800283a 	ret

01026e20 <__sinit_lock_release>:
 1026e20:	f800283a 	ret

01026e24 <__fp_lock_all>:
 1026e24:	008040f4 	movhi	r2,259
 1026e28:	1089b504 	addi	r2,r2,9940
 1026e2c:	11000017 	ldw	r4,0(r2)
 1026e30:	014040b4 	movhi	r5,258
 1026e34:	295aad04 	addi	r5,r5,27316
 1026e38:	102770c1 	jmpi	102770c <_fwalk>

01026e3c <__fp_unlock_all>:
 1026e3c:	008040f4 	movhi	r2,259
 1026e40:	1089b504 	addi	r2,r2,9940
 1026e44:	11000017 	ldw	r4,0(r2)
 1026e48:	014040b4 	movhi	r5,258
 1026e4c:	295aaf04 	addi	r5,r5,27324
 1026e50:	102770c1 	jmpi	102770c <_fwalk>

01026e54 <_malloc_trim_r>:
 1026e54:	defffb04 	addi	sp,sp,-20
 1026e58:	dcc00315 	stw	r19,12(sp)
 1026e5c:	04c040f4 	movhi	r19,259
 1026e60:	dc800215 	stw	r18,8(sp)
 1026e64:	dc400115 	stw	r17,4(sp)
 1026e68:	dc000015 	stw	r16,0(sp)
 1026e6c:	dfc00415 	stw	ra,16(sp)
 1026e70:	2821883a 	mov	r16,r5
 1026e74:	9cc43004 	addi	r19,r19,4288
 1026e78:	2025883a 	mov	r18,r4
 1026e7c:	102e3b80 	call	102e3b8 <__malloc_lock>
 1026e80:	98800217 	ldw	r2,8(r19)
 1026e84:	14400117 	ldw	r17,4(r2)
 1026e88:	00bfff04 	movi	r2,-4
 1026e8c:	88a2703a 	and	r17,r17,r2
 1026e90:	8c21c83a 	sub	r16,r17,r16
 1026e94:	8403fbc4 	addi	r16,r16,4079
 1026e98:	8020d33a 	srli	r16,r16,12
 1026e9c:	0083ffc4 	movi	r2,4095
 1026ea0:	843fffc4 	addi	r16,r16,-1
 1026ea4:	8020933a 	slli	r16,r16,12
 1026ea8:	1400060e 	bge	r2,r16,1026ec4 <_malloc_trim_r+0x70>
 1026eac:	9009883a 	mov	r4,r18
 1026eb0:	000b883a 	mov	r5,zero
 1026eb4:	1029cfc0 	call	1029cfc <_sbrk_r>
 1026eb8:	98c00217 	ldw	r3,8(r19)
 1026ebc:	1c47883a 	add	r3,r3,r17
 1026ec0:	10c00a26 	beq	r2,r3,1026eec <_malloc_trim_r+0x98>
 1026ec4:	9009883a 	mov	r4,r18
 1026ec8:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1026ecc:	0005883a 	mov	r2,zero
 1026ed0:	dfc00417 	ldw	ra,16(sp)
 1026ed4:	dcc00317 	ldw	r19,12(sp)
 1026ed8:	dc800217 	ldw	r18,8(sp)
 1026edc:	dc400117 	ldw	r17,4(sp)
 1026ee0:	dc000017 	ldw	r16,0(sp)
 1026ee4:	dec00504 	addi	sp,sp,20
 1026ee8:	f800283a 	ret
 1026eec:	9009883a 	mov	r4,r18
 1026ef0:	040bc83a 	sub	r5,zero,r16
 1026ef4:	1029cfc0 	call	1029cfc <_sbrk_r>
 1026ef8:	00ffffc4 	movi	r3,-1
 1026efc:	10c00d26 	beq	r2,r3,1026f34 <_malloc_trim_r+0xe0>
 1026f00:	00c040f4 	movhi	r3,259
 1026f04:	18d08d04 	addi	r3,r3,16948
 1026f08:	18800017 	ldw	r2,0(r3)
 1026f0c:	99000217 	ldw	r4,8(r19)
 1026f10:	8c23c83a 	sub	r17,r17,r16
 1026f14:	8c400054 	ori	r17,r17,1
 1026f18:	1421c83a 	sub	r16,r2,r16
 1026f1c:	24400115 	stw	r17,4(r4)
 1026f20:	9009883a 	mov	r4,r18
 1026f24:	1c000015 	stw	r16,0(r3)
 1026f28:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1026f2c:	00800044 	movi	r2,1
 1026f30:	003fe706 	br	1026ed0 <__alt_data_end+0xfffe9a10>
 1026f34:	9009883a 	mov	r4,r18
 1026f38:	000b883a 	mov	r5,zero
 1026f3c:	1029cfc0 	call	1029cfc <_sbrk_r>
 1026f40:	99000217 	ldw	r4,8(r19)
 1026f44:	014003c4 	movi	r5,15
 1026f48:	1107c83a 	sub	r3,r2,r4
 1026f4c:	28ffdd0e 	bge	r5,r3,1026ec4 <__alt_data_end+0xfffe9a04>
 1026f50:	014040f4 	movhi	r5,259
 1026f54:	2949b704 	addi	r5,r5,9948
 1026f58:	29400017 	ldw	r5,0(r5)
 1026f5c:	18c00054 	ori	r3,r3,1
 1026f60:	20c00115 	stw	r3,4(r4)
 1026f64:	00c040f4 	movhi	r3,259
 1026f68:	1145c83a 	sub	r2,r2,r5
 1026f6c:	18d08d04 	addi	r3,r3,16948
 1026f70:	18800015 	stw	r2,0(r3)
 1026f74:	003fd306 	br	1026ec4 <__alt_data_end+0xfffe9a04>

01026f78 <_free_r>:
 1026f78:	28004c26 	beq	r5,zero,10270ac <_free_r+0x134>
 1026f7c:	defffd04 	addi	sp,sp,-12
 1026f80:	dc400115 	stw	r17,4(sp)
 1026f84:	dc000015 	stw	r16,0(sp)
 1026f88:	2023883a 	mov	r17,r4
 1026f8c:	2821883a 	mov	r16,r5
 1026f90:	dfc00215 	stw	ra,8(sp)
 1026f94:	102e3b80 	call	102e3b8 <__malloc_lock>
 1026f98:	813fff17 	ldw	r4,-4(r16)
 1026f9c:	00bfff84 	movi	r2,-2
 1026fa0:	024040f4 	movhi	r9,259
 1026fa4:	81bffe04 	addi	r6,r16,-8
 1026fa8:	2084703a 	and	r2,r4,r2
 1026fac:	4a443004 	addi	r9,r9,4288
 1026fb0:	308b883a 	add	r5,r6,r2
 1026fb4:	2a000117 	ldw	r8,4(r5)
 1026fb8:	49c00217 	ldw	r7,8(r9)
 1026fbc:	00ffff04 	movi	r3,-4
 1026fc0:	40c6703a 	and	r3,r8,r3
 1026fc4:	39405326 	beq	r7,r5,1027114 <_free_r+0x19c>
 1026fc8:	28c00115 	stw	r3,4(r5)
 1026fcc:	2100004c 	andi	r4,r4,1
 1026fd0:	2000091e 	bne	r4,zero,1026ff8 <_free_r+0x80>
 1026fd4:	81fffe17 	ldw	r7,-8(r16)
 1026fd8:	4a000204 	addi	r8,r9,8
 1026fdc:	31cdc83a 	sub	r6,r6,r7
 1026fe0:	31000217 	ldw	r4,8(r6)
 1026fe4:	11c5883a 	add	r2,r2,r7
 1026fe8:	22006126 	beq	r4,r8,1027170 <_free_r+0x1f8>
 1026fec:	31c00317 	ldw	r7,12(r6)
 1026ff0:	21c00315 	stw	r7,12(r4)
 1026ff4:	39000215 	stw	r4,8(r7)
 1026ff8:	28c9883a 	add	r4,r5,r3
 1026ffc:	21c00117 	ldw	r7,4(r4)
 1027000:	39c0004c 	andi	r7,r7,1
 1027004:	38000d1e 	bne	r7,zero,102703c <_free_r+0xc4>
 1027008:	29000217 	ldw	r4,8(r5)
 102700c:	10c5883a 	add	r2,r2,r3
 1027010:	00c040f4 	movhi	r3,259
 1027014:	18c43204 	addi	r3,r3,4296
 1027018:	20c07526 	beq	r4,r3,10271f0 <_free_r+0x278>
 102701c:	29c00317 	ldw	r7,12(r5)
 1027020:	11400054 	ori	r5,r2,1
 1027024:	3087883a 	add	r3,r6,r2
 1027028:	21c00315 	stw	r7,12(r4)
 102702c:	39000215 	stw	r4,8(r7)
 1027030:	31400115 	stw	r5,4(r6)
 1027034:	18800015 	stw	r2,0(r3)
 1027038:	00000406 	br	102704c <_free_r+0xd4>
 102703c:	10c00054 	ori	r3,r2,1
 1027040:	30c00115 	stw	r3,4(r6)
 1027044:	3087883a 	add	r3,r6,r2
 1027048:	18800015 	stw	r2,0(r3)
 102704c:	00c07fc4 	movi	r3,511
 1027050:	18801736 	bltu	r3,r2,10270b0 <_free_r+0x138>
 1027054:	1004d0fa 	srli	r2,r2,3
 1027058:	01400044 	movi	r5,1
 102705c:	49000117 	ldw	r4,4(r9)
 1027060:	1087883a 	add	r3,r2,r2
 1027064:	18c7883a 	add	r3,r3,r3
 1027068:	1005d0ba 	srai	r2,r2,2
 102706c:	18c7883a 	add	r3,r3,r3
 1027070:	1a47883a 	add	r3,r3,r9
 1027074:	19c00217 	ldw	r7,8(r3)
 1027078:	2884983a 	sll	r2,r5,r2
 102707c:	30c00315 	stw	r3,12(r6)
 1027080:	31c00215 	stw	r7,8(r6)
 1027084:	1104b03a 	or	r2,r2,r4
 1027088:	19800215 	stw	r6,8(r3)
 102708c:	48800115 	stw	r2,4(r9)
 1027090:	39800315 	stw	r6,12(r7)
 1027094:	8809883a 	mov	r4,r17
 1027098:	dfc00217 	ldw	ra,8(sp)
 102709c:	dc400117 	ldw	r17,4(sp)
 10270a0:	dc000017 	ldw	r16,0(sp)
 10270a4:	dec00304 	addi	sp,sp,12
 10270a8:	102e3d81 	jmpi	102e3d8 <__malloc_unlock>
 10270ac:	f800283a 	ret
 10270b0:	1006d27a 	srli	r3,r2,9
 10270b4:	01000104 	movi	r4,4
 10270b8:	20c04036 	bltu	r4,r3,10271bc <_free_r+0x244>
 10270bc:	1006d1ba 	srli	r3,r2,6
 10270c0:	19400e04 	addi	r5,r3,56
 10270c4:	2947883a 	add	r3,r5,r5
 10270c8:	18c7883a 	add	r3,r3,r3
 10270cc:	18c7883a 	add	r3,r3,r3
 10270d0:	1a49883a 	add	r4,r3,r9
 10270d4:	20c00217 	ldw	r3,8(r4)
 10270d8:	01c040f4 	movhi	r7,259
 10270dc:	39c43004 	addi	r7,r7,4288
 10270e0:	19003b26 	beq	r3,r4,10271d0 <_free_r+0x258>
 10270e4:	01ffff04 	movi	r7,-4
 10270e8:	19400117 	ldw	r5,4(r3)
 10270ec:	29ca703a 	and	r5,r5,r7
 10270f0:	1140022e 	bgeu	r2,r5,10270fc <_free_r+0x184>
 10270f4:	18c00217 	ldw	r3,8(r3)
 10270f8:	20fffb1e 	bne	r4,r3,10270e8 <__alt_data_end+0xfffe9c28>
 10270fc:	18800317 	ldw	r2,12(r3)
 1027100:	30800315 	stw	r2,12(r6)
 1027104:	30c00215 	stw	r3,8(r6)
 1027108:	11800215 	stw	r6,8(r2)
 102710c:	19800315 	stw	r6,12(r3)
 1027110:	003fe006 	br	1027094 <__alt_data_end+0xfffe9bd4>
 1027114:	2100004c 	andi	r4,r4,1
 1027118:	1885883a 	add	r2,r3,r2
 102711c:	2000071e 	bne	r4,zero,102713c <_free_r+0x1c4>
 1027120:	817ffe17 	ldw	r5,-8(r16)
 1027124:	314dc83a 	sub	r6,r6,r5
 1027128:	30c00317 	ldw	r3,12(r6)
 102712c:	31000217 	ldw	r4,8(r6)
 1027130:	1145883a 	add	r2,r2,r5
 1027134:	20c00315 	stw	r3,12(r4)
 1027138:	19000215 	stw	r4,8(r3)
 102713c:	10c00054 	ori	r3,r2,1
 1027140:	30c00115 	stw	r3,4(r6)
 1027144:	00c040f4 	movhi	r3,259
 1027148:	18c9b804 	addi	r3,r3,9952
 102714c:	18c00017 	ldw	r3,0(r3)
 1027150:	49800215 	stw	r6,8(r9)
 1027154:	10ffcf36 	bltu	r2,r3,1027094 <__alt_data_end+0xfffe9bd4>
 1027158:	008040f4 	movhi	r2,259
 102715c:	10908404 	addi	r2,r2,16912
 1027160:	11400017 	ldw	r5,0(r2)
 1027164:	8809883a 	mov	r4,r17
 1027168:	1026e540 	call	1026e54 <_malloc_trim_r>
 102716c:	003fc906 	br	1027094 <__alt_data_end+0xfffe9bd4>
 1027170:	28c9883a 	add	r4,r5,r3
 1027174:	21000117 	ldw	r4,4(r4)
 1027178:	2100004c 	andi	r4,r4,1
 102717c:	20000a1e 	bne	r4,zero,10271a8 <_free_r+0x230>
 1027180:	29000317 	ldw	r4,12(r5)
 1027184:	29400217 	ldw	r5,8(r5)
 1027188:	10c5883a 	add	r2,r2,r3
 102718c:	10c00054 	ori	r3,r2,1
 1027190:	29000315 	stw	r4,12(r5)
 1027194:	21400215 	stw	r5,8(r4)
 1027198:	30c00115 	stw	r3,4(r6)
 102719c:	308d883a 	add	r6,r6,r2
 10271a0:	30800015 	stw	r2,0(r6)
 10271a4:	003fbb06 	br	1027094 <__alt_data_end+0xfffe9bd4>
 10271a8:	10c00054 	ori	r3,r2,1
 10271ac:	30c00115 	stw	r3,4(r6)
 10271b0:	308d883a 	add	r6,r6,r2
 10271b4:	30800015 	stw	r2,0(r6)
 10271b8:	003fb606 	br	1027094 <__alt_data_end+0xfffe9bd4>
 10271bc:	01000504 	movi	r4,20
 10271c0:	20c01436 	bltu	r4,r3,1027214 <_free_r+0x29c>
 10271c4:	194016c4 	addi	r5,r3,91
 10271c8:	2947883a 	add	r3,r5,r5
 10271cc:	003fbe06 	br	10270c8 <__alt_data_end+0xfffe9c08>
 10271d0:	280bd0ba 	srai	r5,r5,2
 10271d4:	00800044 	movi	r2,1
 10271d8:	39000117 	ldw	r4,4(r7)
 10271dc:	114a983a 	sll	r5,r2,r5
 10271e0:	1805883a 	mov	r2,r3
 10271e4:	2908b03a 	or	r4,r5,r4
 10271e8:	39000115 	stw	r4,4(r7)
 10271ec:	003fc406 	br	1027100 <__alt_data_end+0xfffe9c40>
 10271f0:	49800515 	stw	r6,20(r9)
 10271f4:	49800415 	stw	r6,16(r9)
 10271f8:	10c00054 	ori	r3,r2,1
 10271fc:	31000315 	stw	r4,12(r6)
 1027200:	31000215 	stw	r4,8(r6)
 1027204:	30c00115 	stw	r3,4(r6)
 1027208:	308d883a 	add	r6,r6,r2
 102720c:	30800015 	stw	r2,0(r6)
 1027210:	003fa006 	br	1027094 <__alt_data_end+0xfffe9bd4>
 1027214:	01001504 	movi	r4,84
 1027218:	20c00436 	bltu	r4,r3,102722c <_free_r+0x2b4>
 102721c:	1006d33a 	srli	r3,r2,12
 1027220:	19401b84 	addi	r5,r3,110
 1027224:	2947883a 	add	r3,r5,r5
 1027228:	003fa706 	br	10270c8 <__alt_data_end+0xfffe9c08>
 102722c:	01005504 	movi	r4,340
 1027230:	20c00436 	bltu	r4,r3,1027244 <_free_r+0x2cc>
 1027234:	1006d3fa 	srli	r3,r2,15
 1027238:	19401dc4 	addi	r5,r3,119
 102723c:	2947883a 	add	r3,r5,r5
 1027240:	003fa106 	br	10270c8 <__alt_data_end+0xfffe9c08>
 1027244:	01015504 	movi	r4,1364
 1027248:	20c00436 	bltu	r4,r3,102725c <_free_r+0x2e4>
 102724c:	1006d4ba 	srli	r3,r2,18
 1027250:	19401f04 	addi	r5,r3,124
 1027254:	2947883a 	add	r3,r5,r5
 1027258:	003f9b06 	br	10270c8 <__alt_data_end+0xfffe9c08>
 102725c:	00c03f04 	movi	r3,252
 1027260:	01401f84 	movi	r5,126
 1027264:	003f9806 	br	10270c8 <__alt_data_end+0xfffe9c08>

01027268 <__sfvwrite_r>:
 1027268:	30800217 	ldw	r2,8(r6)
 102726c:	10004526 	beq	r2,zero,1027384 <__sfvwrite_r+0x11c>
 1027270:	28c0030b 	ldhu	r3,12(r5)
 1027274:	defff404 	addi	sp,sp,-48
 1027278:	dd400715 	stw	r21,28(sp)
 102727c:	dcc00515 	stw	r19,20(sp)
 1027280:	dc000215 	stw	r16,8(sp)
 1027284:	dfc00b15 	stw	ra,44(sp)
 1027288:	df000a15 	stw	fp,40(sp)
 102728c:	ddc00915 	stw	r23,36(sp)
 1027290:	dd800815 	stw	r22,32(sp)
 1027294:	dd000615 	stw	r20,24(sp)
 1027298:	dc800415 	stw	r18,16(sp)
 102729c:	dc400315 	stw	r17,12(sp)
 10272a0:	1880020c 	andi	r2,r3,8
 10272a4:	2821883a 	mov	r16,r5
 10272a8:	202b883a 	mov	r21,r4
 10272ac:	3027883a 	mov	r19,r6
 10272b0:	10002526 	beq	r2,zero,1027348 <__sfvwrite_r+0xe0>
 10272b4:	28800417 	ldw	r2,16(r5)
 10272b8:	10002326 	beq	r2,zero,1027348 <__sfvwrite_r+0xe0>
 10272bc:	1880008c 	andi	r2,r3,2
 10272c0:	9c400017 	ldw	r17,0(r19)
 10272c4:	10003126 	beq	r2,zero,102738c <__sfvwrite_r+0x124>
 10272c8:	0029883a 	mov	r20,zero
 10272cc:	0025883a 	mov	r18,zero
 10272d0:	05810004 	movi	r22,1024
 10272d4:	a00d883a 	mov	r6,r20
 10272d8:	a809883a 	mov	r4,r21
 10272dc:	90002526 	beq	r18,zero,1027374 <__sfvwrite_r+0x10c>
 10272e0:	900f883a 	mov	r7,r18
 10272e4:	81400717 	ldw	r5,28(r16)
 10272e8:	b480012e 	bgeu	r22,r18,10272f0 <__sfvwrite_r+0x88>
 10272ec:	01c10004 	movi	r7,1024
 10272f0:	80800917 	ldw	r2,36(r16)
 10272f4:	103ee83a 	callr	r2
 10272f8:	0080510e 	bge	zero,r2,1027440 <__sfvwrite_r+0x1d8>
 10272fc:	98c00217 	ldw	r3,8(r19)
 1027300:	a0a9883a 	add	r20,r20,r2
 1027304:	90a5c83a 	sub	r18,r18,r2
 1027308:	1885c83a 	sub	r2,r3,r2
 102730c:	98800215 	stw	r2,8(r19)
 1027310:	103ff01e 	bne	r2,zero,10272d4 <__alt_data_end+0xfffe9e14>
 1027314:	0005883a 	mov	r2,zero
 1027318:	dfc00b17 	ldw	ra,44(sp)
 102731c:	df000a17 	ldw	fp,40(sp)
 1027320:	ddc00917 	ldw	r23,36(sp)
 1027324:	dd800817 	ldw	r22,32(sp)
 1027328:	dd400717 	ldw	r21,28(sp)
 102732c:	dd000617 	ldw	r20,24(sp)
 1027330:	dcc00517 	ldw	r19,20(sp)
 1027334:	dc800417 	ldw	r18,16(sp)
 1027338:	dc400317 	ldw	r17,12(sp)
 102733c:	dc000217 	ldw	r16,8(sp)
 1027340:	dec00c04 	addi	sp,sp,48
 1027344:	f800283a 	ret
 1027348:	a809883a 	mov	r4,r21
 102734c:	800b883a 	mov	r5,r16
 1027350:	1024e040 	call	1024e04 <__swsetup_r>
 1027354:	80c0030b 	ldhu	r3,12(r16)
 1027358:	103fd826 	beq	r2,zero,10272bc <__alt_data_end+0xfffe9dfc>
 102735c:	18c01014 	ori	r3,r3,64
 1027360:	80c0030d 	sth	r3,12(r16)
 1027364:	00c00244 	movi	r3,9
 1027368:	00bfffc4 	movi	r2,-1
 102736c:	a8c00015 	stw	r3,0(r21)
 1027370:	003fe906 	br	1027318 <__alt_data_end+0xfffe9e58>
 1027374:	8d000017 	ldw	r20,0(r17)
 1027378:	8c800117 	ldw	r18,4(r17)
 102737c:	8c400204 	addi	r17,r17,8
 1027380:	003fd406 	br	10272d4 <__alt_data_end+0xfffe9e14>
 1027384:	0005883a 	mov	r2,zero
 1027388:	f800283a 	ret
 102738c:	1880004c 	andi	r2,r3,1
 1027390:	1000301e 	bne	r2,zero,1027454 <__sfvwrite_r+0x1ec>
 1027394:	002f883a 	mov	r23,zero
 1027398:	0025883a 	mov	r18,zero
 102739c:	90001c26 	beq	r18,zero,1027410 <__sfvwrite_r+0x1a8>
 10273a0:	1880800c 	andi	r2,r3,512
 10273a4:	85000217 	ldw	r20,8(r16)
 10273a8:	10006c26 	beq	r2,zero,102755c <__sfvwrite_r+0x2f4>
 10273ac:	a02d883a 	mov	r22,r20
 10273b0:	95008536 	bltu	r18,r20,10275c8 <__sfvwrite_r+0x360>
 10273b4:	1881200c 	andi	r2,r3,1152
 10273b8:	10009d1e 	bne	r2,zero,1027630 <__sfvwrite_r+0x3c8>
 10273bc:	81000017 	ldw	r4,0(r16)
 10273c0:	a039883a 	mov	fp,r20
 10273c4:	9029883a 	mov	r20,r18
 10273c8:	b80b883a 	mov	r5,r23
 10273cc:	b00d883a 	mov	r6,r22
 10273d0:	10284dc0 	call	10284dc <memmove>
 10273d4:	80c00217 	ldw	r3,8(r16)
 10273d8:	81000017 	ldw	r4,0(r16)
 10273dc:	9005883a 	mov	r2,r18
 10273e0:	1f39c83a 	sub	fp,r3,fp
 10273e4:	258f883a 	add	r7,r4,r22
 10273e8:	87000215 	stw	fp,8(r16)
 10273ec:	81c00015 	stw	r7,0(r16)
 10273f0:	98c00217 	ldw	r3,8(r19)
 10273f4:	b8af883a 	add	r23,r23,r2
 10273f8:	90a5c83a 	sub	r18,r18,r2
 10273fc:	1d05c83a 	sub	r2,r3,r20
 1027400:	98800215 	stw	r2,8(r19)
 1027404:	103fc326 	beq	r2,zero,1027314 <__alt_data_end+0xfffe9e54>
 1027408:	80c0030b 	ldhu	r3,12(r16)
 102740c:	903fe41e 	bne	r18,zero,10273a0 <__alt_data_end+0xfffe9ee0>
 1027410:	8dc00017 	ldw	r23,0(r17)
 1027414:	8c800117 	ldw	r18,4(r17)
 1027418:	8c400204 	addi	r17,r17,8
 102741c:	003fdf06 	br	102739c <__alt_data_end+0xfffe9edc>
 1027420:	10296e80 	call	10296e8 <_realloc_r>
 1027424:	102d883a 	mov	r22,r2
 1027428:	1000a01e 	bne	r2,zero,10276ac <__sfvwrite_r+0x444>
 102742c:	81400417 	ldw	r5,16(r16)
 1027430:	a809883a 	mov	r4,r21
 1027434:	1026f780 	call	1026f78 <_free_r>
 1027438:	00800304 	movi	r2,12
 102743c:	a8800015 	stw	r2,0(r21)
 1027440:	80c0030b 	ldhu	r3,12(r16)
 1027444:	00bfffc4 	movi	r2,-1
 1027448:	18c01014 	ori	r3,r3,64
 102744c:	80c0030d 	sth	r3,12(r16)
 1027450:	003fb106 	br	1027318 <__alt_data_end+0xfffe9e58>
 1027454:	0029883a 	mov	r20,zero
 1027458:	0011883a 	mov	r8,zero
 102745c:	0039883a 	mov	fp,zero
 1027460:	0025883a 	mov	r18,zero
 1027464:	90001f26 	beq	r18,zero,10274e4 <__sfvwrite_r+0x27c>
 1027468:	40006826 	beq	r8,zero,102760c <__sfvwrite_r+0x3a4>
 102746c:	a02f883a 	mov	r23,r20
 1027470:	9500012e 	bgeu	r18,r20,1027478 <__sfvwrite_r+0x210>
 1027474:	902f883a 	mov	r23,r18
 1027478:	81000017 	ldw	r4,0(r16)
 102747c:	80800417 	ldw	r2,16(r16)
 1027480:	b82d883a 	mov	r22,r23
 1027484:	81800217 	ldw	r6,8(r16)
 1027488:	81c00517 	ldw	r7,20(r16)
 102748c:	1100022e 	bgeu	r2,r4,1027498 <__sfvwrite_r+0x230>
 1027490:	31c7883a 	add	r3,r6,r7
 1027494:	1dc01816 	blt	r3,r23,10274f8 <__sfvwrite_r+0x290>
 1027498:	b9c03f16 	blt	r23,r7,1027598 <__sfvwrite_r+0x330>
 102749c:	80800917 	ldw	r2,36(r16)
 10274a0:	81400717 	ldw	r5,28(r16)
 10274a4:	a809883a 	mov	r4,r21
 10274a8:	da000115 	stw	r8,4(sp)
 10274ac:	e00d883a 	mov	r6,fp
 10274b0:	103ee83a 	callr	r2
 10274b4:	102d883a 	mov	r22,r2
 10274b8:	da000117 	ldw	r8,4(sp)
 10274bc:	00bfe00e 	bge	zero,r2,1027440 <__alt_data_end+0xfffe9f80>
 10274c0:	a5a9c83a 	sub	r20,r20,r22
 10274c4:	a0001f26 	beq	r20,zero,1027544 <__sfvwrite_r+0x2dc>
 10274c8:	98800217 	ldw	r2,8(r19)
 10274cc:	e5b9883a 	add	fp,fp,r22
 10274d0:	95a5c83a 	sub	r18,r18,r22
 10274d4:	15adc83a 	sub	r22,r2,r22
 10274d8:	9d800215 	stw	r22,8(r19)
 10274dc:	b03f8d26 	beq	r22,zero,1027314 <__alt_data_end+0xfffe9e54>
 10274e0:	903fe11e 	bne	r18,zero,1027468 <__alt_data_end+0xfffe9fa8>
 10274e4:	8f000017 	ldw	fp,0(r17)
 10274e8:	8c800117 	ldw	r18,4(r17)
 10274ec:	0011883a 	mov	r8,zero
 10274f0:	8c400204 	addi	r17,r17,8
 10274f4:	003fdb06 	br	1027464 <__alt_data_end+0xfffe9fa4>
 10274f8:	180d883a 	mov	r6,r3
 10274fc:	e00b883a 	mov	r5,fp
 1027500:	da000115 	stw	r8,4(sp)
 1027504:	d8c00015 	stw	r3,0(sp)
 1027508:	10284dc0 	call	10284dc <memmove>
 102750c:	d8c00017 	ldw	r3,0(sp)
 1027510:	80800017 	ldw	r2,0(r16)
 1027514:	a809883a 	mov	r4,r21
 1027518:	800b883a 	mov	r5,r16
 102751c:	10c5883a 	add	r2,r2,r3
 1027520:	80800015 	stw	r2,0(r16)
 1027524:	d8c00015 	stw	r3,0(sp)
 1027528:	102685c0 	call	102685c <_fflush_r>
 102752c:	d8c00017 	ldw	r3,0(sp)
 1027530:	da000117 	ldw	r8,4(sp)
 1027534:	103fc21e 	bne	r2,zero,1027440 <__alt_data_end+0xfffe9f80>
 1027538:	182d883a 	mov	r22,r3
 102753c:	a5a9c83a 	sub	r20,r20,r22
 1027540:	a03fe11e 	bne	r20,zero,10274c8 <__alt_data_end+0xfffea008>
 1027544:	a809883a 	mov	r4,r21
 1027548:	800b883a 	mov	r5,r16
 102754c:	102685c0 	call	102685c <_fflush_r>
 1027550:	103fbb1e 	bne	r2,zero,1027440 <__alt_data_end+0xfffe9f80>
 1027554:	0011883a 	mov	r8,zero
 1027558:	003fdb06 	br	10274c8 <__alt_data_end+0xfffea008>
 102755c:	81000017 	ldw	r4,0(r16)
 1027560:	80800417 	ldw	r2,16(r16)
 1027564:	1100012e 	bgeu	r2,r4,102756c <__sfvwrite_r+0x304>
 1027568:	a4805a36 	bltu	r20,r18,10276d4 <__sfvwrite_r+0x46c>
 102756c:	81c00517 	ldw	r7,20(r16)
 1027570:	91c01a36 	bltu	r18,r7,10275dc <__sfvwrite_r+0x374>
 1027574:	80800917 	ldw	r2,36(r16)
 1027578:	81400717 	ldw	r5,28(r16)
 102757c:	a809883a 	mov	r4,r21
 1027580:	b80d883a 	mov	r6,r23
 1027584:	103ee83a 	callr	r2
 1027588:	1029883a 	mov	r20,r2
 102758c:	00bfac0e 	bge	zero,r2,1027440 <__alt_data_end+0xfffe9f80>
 1027590:	a005883a 	mov	r2,r20
 1027594:	003f9606 	br	10273f0 <__alt_data_end+0xfffe9f30>
 1027598:	b80d883a 	mov	r6,r23
 102759c:	e00b883a 	mov	r5,fp
 10275a0:	da000115 	stw	r8,4(sp)
 10275a4:	10284dc0 	call	10284dc <memmove>
 10275a8:	80800217 	ldw	r2,8(r16)
 10275ac:	80c00017 	ldw	r3,0(r16)
 10275b0:	da000117 	ldw	r8,4(sp)
 10275b4:	15c5c83a 	sub	r2,r2,r23
 10275b8:	1def883a 	add	r23,r3,r23
 10275bc:	80800215 	stw	r2,8(r16)
 10275c0:	85c00015 	stw	r23,0(r16)
 10275c4:	003fbe06 	br	10274c0 <__alt_data_end+0xfffea000>
 10275c8:	81000017 	ldw	r4,0(r16)
 10275cc:	9039883a 	mov	fp,r18
 10275d0:	9029883a 	mov	r20,r18
 10275d4:	902d883a 	mov	r22,r18
 10275d8:	003f7b06 	br	10273c8 <__alt_data_end+0xfffe9f08>
 10275dc:	b80b883a 	mov	r5,r23
 10275e0:	900d883a 	mov	r6,r18
 10275e4:	10284dc0 	call	10284dc <memmove>
 10275e8:	80c00217 	ldw	r3,8(r16)
 10275ec:	80800017 	ldw	r2,0(r16)
 10275f0:	9029883a 	mov	r20,r18
 10275f4:	1c87c83a 	sub	r3,r3,r18
 10275f8:	1485883a 	add	r2,r2,r18
 10275fc:	80800015 	stw	r2,0(r16)
 1027600:	80c00215 	stw	r3,8(r16)
 1027604:	9005883a 	mov	r2,r18
 1027608:	003f7906 	br	10273f0 <__alt_data_end+0xfffe9f30>
 102760c:	e009883a 	mov	r4,fp
 1027610:	01400284 	movi	r5,10
 1027614:	900d883a 	mov	r6,r18
 1027618:	10282bc0 	call	10282bc <memchr>
 102761c:	10003826 	beq	r2,zero,1027700 <__sfvwrite_r+0x498>
 1027620:	10800044 	addi	r2,r2,1
 1027624:	1729c83a 	sub	r20,r2,fp
 1027628:	02000044 	movi	r8,1
 102762c:	003f8f06 	br	102746c <__alt_data_end+0xfffe9fac>
 1027630:	80800517 	ldw	r2,20(r16)
 1027634:	81400417 	ldw	r5,16(r16)
 1027638:	87000017 	ldw	fp,0(r16)
 102763c:	10a9883a 	add	r20,r2,r2
 1027640:	a085883a 	add	r2,r20,r2
 1027644:	1028d7fa 	srli	r20,r2,31
 1027648:	e179c83a 	sub	fp,fp,r5
 102764c:	e1000044 	addi	r4,fp,1
 1027650:	a085883a 	add	r2,r20,r2
 1027654:	1029d07a 	srai	r20,r2,1
 1027658:	2485883a 	add	r2,r4,r18
 102765c:	a00d883a 	mov	r6,r20
 1027660:	a080022e 	bgeu	r20,r2,102766c <__sfvwrite_r+0x404>
 1027664:	1029883a 	mov	r20,r2
 1027668:	100d883a 	mov	r6,r2
 102766c:	18c1000c 	andi	r3,r3,1024
 1027670:	a809883a 	mov	r4,r21
 1027674:	183f6a26 	beq	r3,zero,1027420 <__alt_data_end+0xfffe9f60>
 1027678:	300b883a 	mov	r5,r6
 102767c:	1027b140 	call	1027b14 <_malloc_r>
 1027680:	102d883a 	mov	r22,r2
 1027684:	103f6c26 	beq	r2,zero,1027438 <__alt_data_end+0xfffe9f78>
 1027688:	81400417 	ldw	r5,16(r16)
 102768c:	1009883a 	mov	r4,r2
 1027690:	e00d883a 	mov	r6,fp
 1027694:	10283a40 	call	10283a4 <memcpy>
 1027698:	8080030b 	ldhu	r2,12(r16)
 102769c:	00fedfc4 	movi	r3,-1153
 10276a0:	10c4703a 	and	r2,r2,r3
 10276a4:	10802014 	ori	r2,r2,128
 10276a8:	8080030d 	sth	r2,12(r16)
 10276ac:	b709883a 	add	r4,r22,fp
 10276b0:	a707c83a 	sub	r3,r20,fp
 10276b4:	85800415 	stw	r22,16(r16)
 10276b8:	85000515 	stw	r20,20(r16)
 10276bc:	81000015 	stw	r4,0(r16)
 10276c0:	9039883a 	mov	fp,r18
 10276c4:	80c00215 	stw	r3,8(r16)
 10276c8:	9029883a 	mov	r20,r18
 10276cc:	902d883a 	mov	r22,r18
 10276d0:	003f3d06 	br	10273c8 <__alt_data_end+0xfffe9f08>
 10276d4:	b80b883a 	mov	r5,r23
 10276d8:	a00d883a 	mov	r6,r20
 10276dc:	10284dc0 	call	10284dc <memmove>
 10276e0:	80800017 	ldw	r2,0(r16)
 10276e4:	a809883a 	mov	r4,r21
 10276e8:	800b883a 	mov	r5,r16
 10276ec:	1505883a 	add	r2,r2,r20
 10276f0:	80800015 	stw	r2,0(r16)
 10276f4:	102685c0 	call	102685c <_fflush_r>
 10276f8:	103fa526 	beq	r2,zero,1027590 <__alt_data_end+0xfffea0d0>
 10276fc:	003f5006 	br	1027440 <__alt_data_end+0xfffe9f80>
 1027700:	95000044 	addi	r20,r18,1
 1027704:	02000044 	movi	r8,1
 1027708:	003f5806 	br	102746c <__alt_data_end+0xfffe9fac>

0102770c <_fwalk>:
 102770c:	defff804 	addi	sp,sp,-32
 1027710:	dd400515 	stw	r21,20(sp)
 1027714:	2540b804 	addi	r21,r4,736
 1027718:	dd800615 	stw	r22,24(sp)
 102771c:	dd000415 	stw	r20,16(sp)
 1027720:	dfc00715 	stw	ra,28(sp)
 1027724:	dcc00315 	stw	r19,12(sp)
 1027728:	dc800215 	stw	r18,8(sp)
 102772c:	dc400115 	stw	r17,4(sp)
 1027730:	dc000015 	stw	r16,0(sp)
 1027734:	2829883a 	mov	r20,r5
 1027738:	002d883a 	mov	r22,zero
 102773c:	1026e140 	call	1026e14 <__sfp_lock_acquire>
 1027740:	a8001426 	beq	r21,zero,1027794 <_fwalk+0x88>
 1027744:	04ffffc4 	movi	r19,-1
 1027748:	ac400117 	ldw	r17,4(r21)
 102774c:	ac800217 	ldw	r18,8(r21)
 1027750:	8c7fffc4 	addi	r17,r17,-1
 1027754:	88000d16 	blt	r17,zero,102778c <_fwalk+0x80>
 1027758:	94000304 	addi	r16,r18,12
 102775c:	94800384 	addi	r18,r18,14
 1027760:	80c0000f 	ldh	r3,0(r16)
 1027764:	8c7fffc4 	addi	r17,r17,-1
 1027768:	813ffd04 	addi	r4,r16,-12
 102776c:	18000426 	beq	r3,zero,1027780 <_fwalk+0x74>
 1027770:	90c0000f 	ldh	r3,0(r18)
 1027774:	1cc00226 	beq	r3,r19,1027780 <_fwalk+0x74>
 1027778:	a03ee83a 	callr	r20
 102777c:	b0acb03a 	or	r22,r22,r2
 1027780:	84001a04 	addi	r16,r16,104
 1027784:	94801a04 	addi	r18,r18,104
 1027788:	8cfff51e 	bne	r17,r19,1027760 <__alt_data_end+0xfffea2a0>
 102778c:	ad400017 	ldw	r21,0(r21)
 1027790:	a83fed1e 	bne	r21,zero,1027748 <__alt_data_end+0xfffea288>
 1027794:	1026e180 	call	1026e18 <__sfp_lock_release>
 1027798:	b005883a 	mov	r2,r22
 102779c:	dfc00717 	ldw	ra,28(sp)
 10277a0:	dd800617 	ldw	r22,24(sp)
 10277a4:	dd400517 	ldw	r21,20(sp)
 10277a8:	dd000417 	ldw	r20,16(sp)
 10277ac:	dcc00317 	ldw	r19,12(sp)
 10277b0:	dc800217 	ldw	r18,8(sp)
 10277b4:	dc400117 	ldw	r17,4(sp)
 10277b8:	dc000017 	ldw	r16,0(sp)
 10277bc:	dec00804 	addi	sp,sp,32
 10277c0:	f800283a 	ret

010277c4 <_fwalk_reent>:
 10277c4:	defff804 	addi	sp,sp,-32
 10277c8:	dd400515 	stw	r21,20(sp)
 10277cc:	2540b804 	addi	r21,r4,736
 10277d0:	dd800615 	stw	r22,24(sp)
 10277d4:	dd000415 	stw	r20,16(sp)
 10277d8:	dcc00315 	stw	r19,12(sp)
 10277dc:	dfc00715 	stw	ra,28(sp)
 10277e0:	dc800215 	stw	r18,8(sp)
 10277e4:	dc400115 	stw	r17,4(sp)
 10277e8:	dc000015 	stw	r16,0(sp)
 10277ec:	2027883a 	mov	r19,r4
 10277f0:	2829883a 	mov	r20,r5
 10277f4:	002d883a 	mov	r22,zero
 10277f8:	1026e140 	call	1026e14 <__sfp_lock_acquire>
 10277fc:	a8001326 	beq	r21,zero,102784c <_fwalk_reent+0x88>
 1027800:	04bfffc4 	movi	r18,-1
 1027804:	ac400117 	ldw	r17,4(r21)
 1027808:	ac000217 	ldw	r16,8(r21)
 102780c:	8c7fffc4 	addi	r17,r17,-1
 1027810:	88000c16 	blt	r17,zero,1027844 <_fwalk_reent+0x80>
 1027814:	84000304 	addi	r16,r16,12
 1027818:	80c0000f 	ldh	r3,0(r16)
 102781c:	8c7fffc4 	addi	r17,r17,-1
 1027820:	817ffd04 	addi	r5,r16,-12
 1027824:	18000526 	beq	r3,zero,102783c <_fwalk_reent+0x78>
 1027828:	80c0008f 	ldh	r3,2(r16)
 102782c:	9809883a 	mov	r4,r19
 1027830:	1c800226 	beq	r3,r18,102783c <_fwalk_reent+0x78>
 1027834:	a03ee83a 	callr	r20
 1027838:	b0acb03a 	or	r22,r22,r2
 102783c:	84001a04 	addi	r16,r16,104
 1027840:	8cbff51e 	bne	r17,r18,1027818 <__alt_data_end+0xfffea358>
 1027844:	ad400017 	ldw	r21,0(r21)
 1027848:	a83fee1e 	bne	r21,zero,1027804 <__alt_data_end+0xfffea344>
 102784c:	1026e180 	call	1026e18 <__sfp_lock_release>
 1027850:	b005883a 	mov	r2,r22
 1027854:	dfc00717 	ldw	ra,28(sp)
 1027858:	dd800617 	ldw	r22,24(sp)
 102785c:	dd400517 	ldw	r21,20(sp)
 1027860:	dd000417 	ldw	r20,16(sp)
 1027864:	dcc00317 	ldw	r19,12(sp)
 1027868:	dc800217 	ldw	r18,8(sp)
 102786c:	dc400117 	ldw	r17,4(sp)
 1027870:	dc000017 	ldw	r16,0(sp)
 1027874:	dec00804 	addi	sp,sp,32
 1027878:	f800283a 	ret

0102787c <_setlocale_r>:
 102787c:	30001b26 	beq	r6,zero,10278ec <_setlocale_r+0x70>
 1027880:	014040f4 	movhi	r5,259
 1027884:	defffe04 	addi	sp,sp,-8
 1027888:	2942aa04 	addi	r5,r5,2728
 102788c:	3009883a 	mov	r4,r6
 1027890:	dc000015 	stw	r16,0(sp)
 1027894:	dfc00115 	stw	ra,4(sp)
 1027898:	3021883a 	mov	r16,r6
 102789c:	1029e8c0 	call	1029e8c <strcmp>
 10278a0:	1000061e 	bne	r2,zero,10278bc <_setlocale_r+0x40>
 10278a4:	008040f4 	movhi	r2,259
 10278a8:	1082a904 	addi	r2,r2,2724
 10278ac:	dfc00117 	ldw	ra,4(sp)
 10278b0:	dc000017 	ldw	r16,0(sp)
 10278b4:	dec00204 	addi	sp,sp,8
 10278b8:	f800283a 	ret
 10278bc:	014040f4 	movhi	r5,259
 10278c0:	2942a904 	addi	r5,r5,2724
 10278c4:	8009883a 	mov	r4,r16
 10278c8:	1029e8c0 	call	1029e8c <strcmp>
 10278cc:	103ff526 	beq	r2,zero,10278a4 <__alt_data_end+0xfffea3e4>
 10278d0:	014040f4 	movhi	r5,259
 10278d4:	29429404 	addi	r5,r5,2640
 10278d8:	8009883a 	mov	r4,r16
 10278dc:	1029e8c0 	call	1029e8c <strcmp>
 10278e0:	103ff026 	beq	r2,zero,10278a4 <__alt_data_end+0xfffea3e4>
 10278e4:	0005883a 	mov	r2,zero
 10278e8:	003ff006 	br	10278ac <__alt_data_end+0xfffea3ec>
 10278ec:	008040f4 	movhi	r2,259
 10278f0:	1082a904 	addi	r2,r2,2724
 10278f4:	f800283a 	ret

010278f8 <__locale_charset>:
 10278f8:	008040f4 	movhi	r2,259
 10278fc:	10841a04 	addi	r2,r2,4200
 1027900:	f800283a 	ret

01027904 <__locale_mb_cur_max>:
 1027904:	008040f4 	movhi	r2,259
 1027908:	1089b604 	addi	r2,r2,9944
 102790c:	10800017 	ldw	r2,0(r2)
 1027910:	f800283a 	ret

01027914 <__locale_msgcharset>:
 1027914:	008040f4 	movhi	r2,259
 1027918:	10841204 	addi	r2,r2,4168
 102791c:	f800283a 	ret

01027920 <__locale_cjk_lang>:
 1027920:	0005883a 	mov	r2,zero
 1027924:	f800283a 	ret

01027928 <_localeconv_r>:
 1027928:	008040f4 	movhi	r2,259
 102792c:	10842204 	addi	r2,r2,4232
 1027930:	f800283a 	ret

01027934 <setlocale>:
 1027934:	00c040f4 	movhi	r3,259
 1027938:	18c9b504 	addi	r3,r3,9940
 102793c:	2005883a 	mov	r2,r4
 1027940:	19000017 	ldw	r4,0(r3)
 1027944:	280d883a 	mov	r6,r5
 1027948:	100b883a 	mov	r5,r2
 102794c:	102787c1 	jmpi	102787c <_setlocale_r>

01027950 <localeconv>:
 1027950:	008040f4 	movhi	r2,259
 1027954:	10842204 	addi	r2,r2,4232
 1027958:	f800283a 	ret

0102795c <__smakebuf_r>:
 102795c:	2880030b 	ldhu	r2,12(r5)
 1027960:	10c0008c 	andi	r3,r2,2
 1027964:	1800401e 	bne	r3,zero,1027a68 <__smakebuf_r+0x10c>
 1027968:	deffec04 	addi	sp,sp,-80
 102796c:	dc000f15 	stw	r16,60(sp)
 1027970:	2821883a 	mov	r16,r5
 1027974:	2940038f 	ldh	r5,14(r5)
 1027978:	dc401015 	stw	r17,64(sp)
 102797c:	dfc01315 	stw	ra,76(sp)
 1027980:	dcc01215 	stw	r19,72(sp)
 1027984:	dc801115 	stw	r18,68(sp)
 1027988:	2023883a 	mov	r17,r4
 102798c:	28001b16 	blt	r5,zero,10279fc <__smakebuf_r+0xa0>
 1027990:	d80d883a 	mov	r6,sp
 1027994:	102b8280 	call	102b828 <_fstat_r>
 1027998:	10001716 	blt	r2,zero,10279f8 <__smakebuf_r+0x9c>
 102799c:	d8800117 	ldw	r2,4(sp)
 10279a0:	00e00014 	movui	r3,32768
 10279a4:	10bc000c 	andi	r2,r2,61440
 10279a8:	10c03726 	beq	r2,r3,1027a88 <__smakebuf_r+0x12c>
 10279ac:	80c0030b 	ldhu	r3,12(r16)
 10279b0:	18c20014 	ori	r3,r3,2048
 10279b4:	80c0030d 	sth	r3,12(r16)
 10279b8:	00c80004 	movi	r3,8192
 10279bc:	10c03c1e 	bne	r2,r3,1027ab0 <__smakebuf_r+0x154>
 10279c0:	8140038f 	ldh	r5,14(r16)
 10279c4:	8809883a 	mov	r4,r17
 10279c8:	102b8800 	call	102b880 <_isatty_r>
 10279cc:	10004e26 	beq	r2,zero,1027b08 <__smakebuf_r+0x1ac>
 10279d0:	8080030b 	ldhu	r2,12(r16)
 10279d4:	04c00044 	movi	r19,1
 10279d8:	80c010c4 	addi	r3,r16,67
 10279dc:	14c4b03a 	or	r2,r2,r19
 10279e0:	8080030d 	sth	r2,12(r16)
 10279e4:	80c00015 	stw	r3,0(r16)
 10279e8:	80c00415 	stw	r3,16(r16)
 10279ec:	84c00515 	stw	r19,20(r16)
 10279f0:	04810004 	movi	r18,1024
 10279f4:	00000706 	br	1027a14 <__smakebuf_r+0xb8>
 10279f8:	8080030b 	ldhu	r2,12(r16)
 10279fc:	10c0200c 	andi	r3,r2,128
 1027a00:	18001f1e 	bne	r3,zero,1027a80 <__smakebuf_r+0x124>
 1027a04:	04810004 	movi	r18,1024
 1027a08:	10820014 	ori	r2,r2,2048
 1027a0c:	8080030d 	sth	r2,12(r16)
 1027a10:	0027883a 	mov	r19,zero
 1027a14:	8809883a 	mov	r4,r17
 1027a18:	900b883a 	mov	r5,r18
 1027a1c:	1027b140 	call	1027b14 <_malloc_r>
 1027a20:	10002e26 	beq	r2,zero,1027adc <__smakebuf_r+0x180>
 1027a24:	80c0030b 	ldhu	r3,12(r16)
 1027a28:	010040b4 	movhi	r4,258
 1027a2c:	211ab104 	addi	r4,r4,27332
 1027a30:	89000f15 	stw	r4,60(r17)
 1027a34:	18c02014 	ori	r3,r3,128
 1027a38:	80c0030d 	sth	r3,12(r16)
 1027a3c:	80800015 	stw	r2,0(r16)
 1027a40:	80800415 	stw	r2,16(r16)
 1027a44:	84800515 	stw	r18,20(r16)
 1027a48:	98001c1e 	bne	r19,zero,1027abc <__smakebuf_r+0x160>
 1027a4c:	dfc01317 	ldw	ra,76(sp)
 1027a50:	dcc01217 	ldw	r19,72(sp)
 1027a54:	dc801117 	ldw	r18,68(sp)
 1027a58:	dc401017 	ldw	r17,64(sp)
 1027a5c:	dc000f17 	ldw	r16,60(sp)
 1027a60:	dec01404 	addi	sp,sp,80
 1027a64:	f800283a 	ret
 1027a68:	288010c4 	addi	r2,r5,67
 1027a6c:	28800015 	stw	r2,0(r5)
 1027a70:	28800415 	stw	r2,16(r5)
 1027a74:	00800044 	movi	r2,1
 1027a78:	28800515 	stw	r2,20(r5)
 1027a7c:	f800283a 	ret
 1027a80:	04801004 	movi	r18,64
 1027a84:	003fe006 	br	1027a08 <__alt_data_end+0xfffea548>
 1027a88:	81000a17 	ldw	r4,40(r16)
 1027a8c:	00c040f4 	movhi	r3,259
 1027a90:	18e78a04 	addi	r3,r3,-25048
 1027a94:	20ffc51e 	bne	r4,r3,10279ac <__alt_data_end+0xfffea4ec>
 1027a98:	80c0030b 	ldhu	r3,12(r16)
 1027a9c:	01010004 	movi	r4,1024
 1027aa0:	81001315 	stw	r4,76(r16)
 1027aa4:	1906b03a 	or	r3,r3,r4
 1027aa8:	80c0030d 	sth	r3,12(r16)
 1027aac:	003fc206 	br	10279b8 <__alt_data_end+0xfffea4f8>
 1027ab0:	0027883a 	mov	r19,zero
 1027ab4:	04810004 	movi	r18,1024
 1027ab8:	003fd606 	br	1027a14 <__alt_data_end+0xfffea554>
 1027abc:	8140038f 	ldh	r5,14(r16)
 1027ac0:	8809883a 	mov	r4,r17
 1027ac4:	102b8800 	call	102b880 <_isatty_r>
 1027ac8:	103fe026 	beq	r2,zero,1027a4c <__alt_data_end+0xfffea58c>
 1027acc:	8080030b 	ldhu	r2,12(r16)
 1027ad0:	10800054 	ori	r2,r2,1
 1027ad4:	8080030d 	sth	r2,12(r16)
 1027ad8:	003fdc06 	br	1027a4c <__alt_data_end+0xfffea58c>
 1027adc:	8080030b 	ldhu	r2,12(r16)
 1027ae0:	10c0800c 	andi	r3,r2,512
 1027ae4:	183fd91e 	bne	r3,zero,1027a4c <__alt_data_end+0xfffea58c>
 1027ae8:	10800094 	ori	r2,r2,2
 1027aec:	80c010c4 	addi	r3,r16,67
 1027af0:	8080030d 	sth	r2,12(r16)
 1027af4:	00800044 	movi	r2,1
 1027af8:	80c00015 	stw	r3,0(r16)
 1027afc:	80c00415 	stw	r3,16(r16)
 1027b00:	80800515 	stw	r2,20(r16)
 1027b04:	003fd106 	br	1027a4c <__alt_data_end+0xfffea58c>
 1027b08:	04c00044 	movi	r19,1
 1027b0c:	04810004 	movi	r18,1024
 1027b10:	003fc006 	br	1027a14 <__alt_data_end+0xfffea554>

01027b14 <_malloc_r>:
 1027b14:	defff504 	addi	sp,sp,-44
 1027b18:	dc800315 	stw	r18,12(sp)
 1027b1c:	dfc00a15 	stw	ra,40(sp)
 1027b20:	df000915 	stw	fp,36(sp)
 1027b24:	ddc00815 	stw	r23,32(sp)
 1027b28:	dd800715 	stw	r22,28(sp)
 1027b2c:	dd400615 	stw	r21,24(sp)
 1027b30:	dd000515 	stw	r20,20(sp)
 1027b34:	dcc00415 	stw	r19,16(sp)
 1027b38:	dc400215 	stw	r17,8(sp)
 1027b3c:	dc000115 	stw	r16,4(sp)
 1027b40:	288002c4 	addi	r2,r5,11
 1027b44:	00c00584 	movi	r3,22
 1027b48:	2025883a 	mov	r18,r4
 1027b4c:	18802a2e 	bgeu	r3,r2,1027bf8 <_malloc_r+0xe4>
 1027b50:	047ffe04 	movi	r17,-8
 1027b54:	1462703a 	and	r17,r2,r17
 1027b58:	88009e16 	blt	r17,zero,1027dd4 <_malloc_r+0x2c0>
 1027b5c:	89409d36 	bltu	r17,r5,1027dd4 <_malloc_r+0x2c0>
 1027b60:	102e3b80 	call	102e3b8 <__malloc_lock>
 1027b64:	00807dc4 	movi	r2,503
 1027b68:	14402736 	bltu	r2,r17,1027c08 <_malloc_r+0xf4>
 1027b6c:	8806d0fa 	srli	r3,r17,3
 1027b70:	04c040f4 	movhi	r19,259
 1027b74:	9cc43004 	addi	r19,r19,4288
 1027b78:	18c5883a 	add	r2,r3,r3
 1027b7c:	1085883a 	add	r2,r2,r2
 1027b80:	1085883a 	add	r2,r2,r2
 1027b84:	9885883a 	add	r2,r19,r2
 1027b88:	14000317 	ldw	r16,12(r2)
 1027b8c:	80814a26 	beq	r16,r2,10280b8 <_malloc_r+0x5a4>
 1027b90:	80c00117 	ldw	r3,4(r16)
 1027b94:	81000317 	ldw	r4,12(r16)
 1027b98:	00bfff04 	movi	r2,-4
 1027b9c:	1884703a 	and	r2,r3,r2
 1027ba0:	81400217 	ldw	r5,8(r16)
 1027ba4:	8085883a 	add	r2,r16,r2
 1027ba8:	10c00117 	ldw	r3,4(r2)
 1027bac:	29000315 	stw	r4,12(r5)
 1027bb0:	21400215 	stw	r5,8(r4)
 1027bb4:	18c00054 	ori	r3,r3,1
 1027bb8:	10c00115 	stw	r3,4(r2)
 1027bbc:	9009883a 	mov	r4,r18
 1027bc0:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1027bc4:	80800204 	addi	r2,r16,8
 1027bc8:	dfc00a17 	ldw	ra,40(sp)
 1027bcc:	df000917 	ldw	fp,36(sp)
 1027bd0:	ddc00817 	ldw	r23,32(sp)
 1027bd4:	dd800717 	ldw	r22,28(sp)
 1027bd8:	dd400617 	ldw	r21,24(sp)
 1027bdc:	dd000517 	ldw	r20,20(sp)
 1027be0:	dcc00417 	ldw	r19,16(sp)
 1027be4:	dc800317 	ldw	r18,12(sp)
 1027be8:	dc400217 	ldw	r17,8(sp)
 1027bec:	dc000117 	ldw	r16,4(sp)
 1027bf0:	dec00b04 	addi	sp,sp,44
 1027bf4:	f800283a 	ret
 1027bf8:	04400404 	movi	r17,16
 1027bfc:	89407536 	bltu	r17,r5,1027dd4 <_malloc_r+0x2c0>
 1027c00:	102e3b80 	call	102e3b8 <__malloc_lock>
 1027c04:	003fd906 	br	1027b6c <__alt_data_end+0xfffea6ac>
 1027c08:	8806d27a 	srli	r3,r17,9
 1027c0c:	18007526 	beq	r3,zero,1027de4 <_malloc_r+0x2d0>
 1027c10:	00800104 	movi	r2,4
 1027c14:	10c0ef36 	bltu	r2,r3,1027fd4 <_malloc_r+0x4c0>
 1027c18:	8806d1ba 	srli	r3,r17,6
 1027c1c:	19c00e04 	addi	r7,r3,56
 1027c20:	39cb883a 	add	r5,r7,r7
 1027c24:	04c040f4 	movhi	r19,259
 1027c28:	294b883a 	add	r5,r5,r5
 1027c2c:	9cc43004 	addi	r19,r19,4288
 1027c30:	294b883a 	add	r5,r5,r5
 1027c34:	994b883a 	add	r5,r19,r5
 1027c38:	2c000317 	ldw	r16,12(r5)
 1027c3c:	2c000e26 	beq	r5,r16,1027c78 <_malloc_r+0x164>
 1027c40:	80800117 	ldw	r2,4(r16)
 1027c44:	01bfff04 	movi	r6,-4
 1027c48:	010003c4 	movi	r4,15
 1027c4c:	1184703a 	and	r2,r2,r6
 1027c50:	1447c83a 	sub	r3,r2,r17
 1027c54:	20c00716 	blt	r4,r3,1027c74 <_malloc_r+0x160>
 1027c58:	1800650e 	bge	r3,zero,1027df0 <_malloc_r+0x2dc>
 1027c5c:	84000317 	ldw	r16,12(r16)
 1027c60:	2c000526 	beq	r5,r16,1027c78 <_malloc_r+0x164>
 1027c64:	80800117 	ldw	r2,4(r16)
 1027c68:	1184703a 	and	r2,r2,r6
 1027c6c:	1447c83a 	sub	r3,r2,r17
 1027c70:	20fff90e 	bge	r4,r3,1027c58 <__alt_data_end+0xfffea798>
 1027c74:	39ffffc4 	addi	r7,r7,-1
 1027c78:	38c00044 	addi	r3,r7,1
 1027c7c:	018040f4 	movhi	r6,259
 1027c80:	9c000417 	ldw	r16,16(r19)
 1027c84:	31843004 	addi	r6,r6,4288
 1027c88:	32400204 	addi	r9,r6,8
 1027c8c:	82410326 	beq	r16,r9,102809c <_malloc_r+0x588>
 1027c90:	81000117 	ldw	r4,4(r16)
 1027c94:	00bfff04 	movi	r2,-4
 1027c98:	208e703a 	and	r7,r4,r2
 1027c9c:	3c45c83a 	sub	r2,r7,r17
 1027ca0:	010003c4 	movi	r4,15
 1027ca4:	2080ee16 	blt	r4,r2,1028060 <_malloc_r+0x54c>
 1027ca8:	32400515 	stw	r9,20(r6)
 1027cac:	32400415 	stw	r9,16(r6)
 1027cb0:	1000510e 	bge	r2,zero,1027df8 <_malloc_r+0x2e4>
 1027cb4:	00807fc4 	movi	r2,511
 1027cb8:	11c0ce36 	bltu	r2,r7,1027ff4 <_malloc_r+0x4e0>
 1027cbc:	3808d0fa 	srli	r4,r7,3
 1027cc0:	01c00044 	movi	r7,1
 1027cc4:	30800117 	ldw	r2,4(r6)
 1027cc8:	210b883a 	add	r5,r4,r4
 1027ccc:	294b883a 	add	r5,r5,r5
 1027cd0:	2009d0ba 	srai	r4,r4,2
 1027cd4:	294b883a 	add	r5,r5,r5
 1027cd8:	298b883a 	add	r5,r5,r6
 1027cdc:	2a000217 	ldw	r8,8(r5)
 1027ce0:	3908983a 	sll	r4,r7,r4
 1027ce4:	81400315 	stw	r5,12(r16)
 1027ce8:	82000215 	stw	r8,8(r16)
 1027cec:	2088b03a 	or	r4,r4,r2
 1027cf0:	2c000215 	stw	r16,8(r5)
 1027cf4:	31000115 	stw	r4,4(r6)
 1027cf8:	44000315 	stw	r16,12(r8)
 1027cfc:	1805d0ba 	srai	r2,r3,2
 1027d00:	01400044 	movi	r5,1
 1027d04:	288a983a 	sll	r5,r5,r2
 1027d08:	21404336 	bltu	r4,r5,1027e18 <_malloc_r+0x304>
 1027d0c:	2144703a 	and	r2,r4,r5
 1027d10:	10000a1e 	bne	r2,zero,1027d3c <_malloc_r+0x228>
 1027d14:	00bfff04 	movi	r2,-4
 1027d18:	294b883a 	add	r5,r5,r5
 1027d1c:	1886703a 	and	r3,r3,r2
 1027d20:	2144703a 	and	r2,r4,r5
 1027d24:	18c00104 	addi	r3,r3,4
 1027d28:	1000041e 	bne	r2,zero,1027d3c <_malloc_r+0x228>
 1027d2c:	294b883a 	add	r5,r5,r5
 1027d30:	2144703a 	and	r2,r4,r5
 1027d34:	18c00104 	addi	r3,r3,4
 1027d38:	103ffc26 	beq	r2,zero,1027d2c <__alt_data_end+0xfffea86c>
 1027d3c:	023fff04 	movi	r8,-4
 1027d40:	01c003c4 	movi	r7,15
 1027d44:	18c5883a 	add	r2,r3,r3
 1027d48:	1085883a 	add	r2,r2,r2
 1027d4c:	1085883a 	add	r2,r2,r2
 1027d50:	9895883a 	add	r10,r19,r2
 1027d54:	52c00304 	addi	r11,r10,12
 1027d58:	1819883a 	mov	r12,r3
 1027d5c:	5c000017 	ldw	r16,0(r11)
 1027d60:	59bffd04 	addi	r6,r11,-12
 1027d64:	8180041e 	bne	r16,r6,1027d78 <_malloc_r+0x264>
 1027d68:	0000ce06 	br	10280a4 <_malloc_r+0x590>
 1027d6c:	2000d70e 	bge	r4,zero,10280cc <_malloc_r+0x5b8>
 1027d70:	84000317 	ldw	r16,12(r16)
 1027d74:	8180cb26 	beq	r16,r6,10280a4 <_malloc_r+0x590>
 1027d78:	80800117 	ldw	r2,4(r16)
 1027d7c:	1204703a 	and	r2,r2,r8
 1027d80:	1449c83a 	sub	r4,r2,r17
 1027d84:	393ff90e 	bge	r7,r4,1027d6c <__alt_data_end+0xfffea8ac>
 1027d88:	80800317 	ldw	r2,12(r16)
 1027d8c:	80c00217 	ldw	r3,8(r16)
 1027d90:	89400054 	ori	r5,r17,1
 1027d94:	81400115 	stw	r5,4(r16)
 1027d98:	18800315 	stw	r2,12(r3)
 1027d9c:	10c00215 	stw	r3,8(r2)
 1027da0:	8463883a 	add	r17,r16,r17
 1027da4:	9c400515 	stw	r17,20(r19)
 1027da8:	9c400415 	stw	r17,16(r19)
 1027dac:	20800054 	ori	r2,r4,1
 1027db0:	88800115 	stw	r2,4(r17)
 1027db4:	8a400315 	stw	r9,12(r17)
 1027db8:	8a400215 	stw	r9,8(r17)
 1027dbc:	8923883a 	add	r17,r17,r4
 1027dc0:	89000015 	stw	r4,0(r17)
 1027dc4:	9009883a 	mov	r4,r18
 1027dc8:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1027dcc:	80800204 	addi	r2,r16,8
 1027dd0:	003f7d06 	br	1027bc8 <__alt_data_end+0xfffea708>
 1027dd4:	00800304 	movi	r2,12
 1027dd8:	90800015 	stw	r2,0(r18)
 1027ddc:	0005883a 	mov	r2,zero
 1027de0:	003f7906 	br	1027bc8 <__alt_data_end+0xfffea708>
 1027de4:	01401f84 	movi	r5,126
 1027de8:	01c00fc4 	movi	r7,63
 1027dec:	003f8d06 	br	1027c24 <__alt_data_end+0xfffea764>
 1027df0:	81000317 	ldw	r4,12(r16)
 1027df4:	003f6a06 	br	1027ba0 <__alt_data_end+0xfffea6e0>
 1027df8:	81c5883a 	add	r2,r16,r7
 1027dfc:	10c00117 	ldw	r3,4(r2)
 1027e00:	9009883a 	mov	r4,r18
 1027e04:	18c00054 	ori	r3,r3,1
 1027e08:	10c00115 	stw	r3,4(r2)
 1027e0c:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1027e10:	80800204 	addi	r2,r16,8
 1027e14:	003f6c06 	br	1027bc8 <__alt_data_end+0xfffea708>
 1027e18:	9c000217 	ldw	r16,8(r19)
 1027e1c:	00bfff04 	movi	r2,-4
 1027e20:	85800117 	ldw	r22,4(r16)
 1027e24:	b0ac703a 	and	r22,r22,r2
 1027e28:	b4400336 	bltu	r22,r17,1027e38 <_malloc_r+0x324>
 1027e2c:	b445c83a 	sub	r2,r22,r17
 1027e30:	00c003c4 	movi	r3,15
 1027e34:	18805d16 	blt	r3,r2,1027fac <_malloc_r+0x498>
 1027e38:	05c040f4 	movhi	r23,259
 1027e3c:	008040f4 	movhi	r2,259
 1027e40:	bdc9b704 	addi	r23,r23,9948
 1027e44:	10908404 	addi	r2,r2,16912
 1027e48:	15400017 	ldw	r21,0(r2)
 1027e4c:	b9000017 	ldw	r4,0(r23)
 1027e50:	00ffffc4 	movi	r3,-1
 1027e54:	858d883a 	add	r6,r16,r22
 1027e58:	8d6b883a 	add	r21,r17,r21
 1027e5c:	20c0e426 	beq	r4,r3,10281f0 <_malloc_r+0x6dc>
 1027e60:	ad4403c4 	addi	r21,r21,4111
 1027e64:	00fc0004 	movi	r3,-4096
 1027e68:	a8ea703a 	and	r21,r21,r3
 1027e6c:	9009883a 	mov	r4,r18
 1027e70:	a80b883a 	mov	r5,r21
 1027e74:	d9800015 	stw	r6,0(sp)
 1027e78:	1029cfc0 	call	1029cfc <_sbrk_r>
 1027e7c:	00ffffc4 	movi	r3,-1
 1027e80:	1029883a 	mov	r20,r2
 1027e84:	d9800017 	ldw	r6,0(sp)
 1027e88:	10c0a426 	beq	r2,r3,102811c <_malloc_r+0x608>
 1027e8c:	1180a236 	bltu	r2,r6,1028118 <_malloc_r+0x604>
 1027e90:	070040f4 	movhi	fp,259
 1027e94:	e7108d04 	addi	fp,fp,16948
 1027e98:	e0c00017 	ldw	r3,0(fp)
 1027e9c:	a8c7883a 	add	r3,r21,r3
 1027ea0:	e0c00015 	stw	r3,0(fp)
 1027ea4:	3500da26 	beq	r6,r20,1028210 <_malloc_r+0x6fc>
 1027ea8:	b9000017 	ldw	r4,0(r23)
 1027eac:	00bfffc4 	movi	r2,-1
 1027eb0:	2080e426 	beq	r4,r2,1028244 <_malloc_r+0x730>
 1027eb4:	a185c83a 	sub	r2,r20,r6
 1027eb8:	1885883a 	add	r2,r3,r2
 1027ebc:	e0800015 	stw	r2,0(fp)
 1027ec0:	a0c001cc 	andi	r3,r20,7
 1027ec4:	1800b526 	beq	r3,zero,102819c <_malloc_r+0x688>
 1027ec8:	a0e9c83a 	sub	r20,r20,r3
 1027ecc:	00840204 	movi	r2,4104
 1027ed0:	a5000204 	addi	r20,r20,8
 1027ed4:	10c7c83a 	sub	r3,r2,r3
 1027ed8:	a545883a 	add	r2,r20,r21
 1027edc:	1083ffcc 	andi	r2,r2,4095
 1027ee0:	18abc83a 	sub	r21,r3,r2
 1027ee4:	9009883a 	mov	r4,r18
 1027ee8:	a80b883a 	mov	r5,r21
 1027eec:	1029cfc0 	call	1029cfc <_sbrk_r>
 1027ef0:	00ffffc4 	movi	r3,-1
 1027ef4:	10c0d026 	beq	r2,r3,1028238 <_malloc_r+0x724>
 1027ef8:	1507c83a 	sub	r3,r2,r20
 1027efc:	a8c7883a 	add	r3,r21,r3
 1027f00:	18c00054 	ori	r3,r3,1
 1027f04:	e0800017 	ldw	r2,0(fp)
 1027f08:	9d000215 	stw	r20,8(r19)
 1027f0c:	a0c00115 	stw	r3,4(r20)
 1027f10:	a887883a 	add	r3,r21,r2
 1027f14:	e0c00015 	stw	r3,0(fp)
 1027f18:	84c00e26 	beq	r16,r19,1027f54 <_malloc_r+0x440>
 1027f1c:	018003c4 	movi	r6,15
 1027f20:	3580a02e 	bgeu	r6,r22,10281a4 <_malloc_r+0x690>
 1027f24:	81400117 	ldw	r5,4(r16)
 1027f28:	013ffe04 	movi	r4,-8
 1027f2c:	b0bffd04 	addi	r2,r22,-12
 1027f30:	1104703a 	and	r2,r2,r4
 1027f34:	2900004c 	andi	r4,r5,1
 1027f38:	1108b03a 	or	r4,r2,r4
 1027f3c:	81000115 	stw	r4,4(r16)
 1027f40:	01400144 	movi	r5,5
 1027f44:	8089883a 	add	r4,r16,r2
 1027f48:	21400115 	stw	r5,4(r4)
 1027f4c:	21400215 	stw	r5,8(r4)
 1027f50:	3080c036 	bltu	r6,r2,1028254 <_malloc_r+0x740>
 1027f54:	008040f4 	movhi	r2,259
 1027f58:	10908304 	addi	r2,r2,16908
 1027f5c:	11000017 	ldw	r4,0(r2)
 1027f60:	20c0012e 	bgeu	r4,r3,1027f68 <_malloc_r+0x454>
 1027f64:	10c00015 	stw	r3,0(r2)
 1027f68:	008040f4 	movhi	r2,259
 1027f6c:	10908204 	addi	r2,r2,16904
 1027f70:	11000017 	ldw	r4,0(r2)
 1027f74:	9c000217 	ldw	r16,8(r19)
 1027f78:	20c0012e 	bgeu	r4,r3,1027f80 <_malloc_r+0x46c>
 1027f7c:	10c00015 	stw	r3,0(r2)
 1027f80:	80c00117 	ldw	r3,4(r16)
 1027f84:	00bfff04 	movi	r2,-4
 1027f88:	1886703a 	and	r3,r3,r2
 1027f8c:	1c45c83a 	sub	r2,r3,r17
 1027f90:	1c400236 	bltu	r3,r17,1027f9c <_malloc_r+0x488>
 1027f94:	00c003c4 	movi	r3,15
 1027f98:	18800416 	blt	r3,r2,1027fac <_malloc_r+0x498>
 1027f9c:	9009883a 	mov	r4,r18
 1027fa0:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1027fa4:	0005883a 	mov	r2,zero
 1027fa8:	003f0706 	br	1027bc8 <__alt_data_end+0xfffea708>
 1027fac:	88c00054 	ori	r3,r17,1
 1027fb0:	80c00115 	stw	r3,4(r16)
 1027fb4:	8463883a 	add	r17,r16,r17
 1027fb8:	10800054 	ori	r2,r2,1
 1027fbc:	9c400215 	stw	r17,8(r19)
 1027fc0:	88800115 	stw	r2,4(r17)
 1027fc4:	9009883a 	mov	r4,r18
 1027fc8:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1027fcc:	80800204 	addi	r2,r16,8
 1027fd0:	003efd06 	br	1027bc8 <__alt_data_end+0xfffea708>
 1027fd4:	00800504 	movi	r2,20
 1027fd8:	10c0482e 	bgeu	r2,r3,10280fc <_malloc_r+0x5e8>
 1027fdc:	00801504 	movi	r2,84
 1027fe0:	10c06836 	bltu	r2,r3,1028184 <_malloc_r+0x670>
 1027fe4:	8806d33a 	srli	r3,r17,12
 1027fe8:	19c01b84 	addi	r7,r3,110
 1027fec:	39cb883a 	add	r5,r7,r7
 1027ff0:	003f0c06 	br	1027c24 <__alt_data_end+0xfffea764>
 1027ff4:	3804d27a 	srli	r2,r7,9
 1027ff8:	01000104 	movi	r4,4
 1027ffc:	2080422e 	bgeu	r4,r2,1028108 <_malloc_r+0x5f4>
 1028000:	01000504 	movi	r4,20
 1028004:	20807c36 	bltu	r4,r2,10281f8 <_malloc_r+0x6e4>
 1028008:	110016c4 	addi	r4,r2,91
 102800c:	210b883a 	add	r5,r4,r4
 1028010:	294b883a 	add	r5,r5,r5
 1028014:	294b883a 	add	r5,r5,r5
 1028018:	994b883a 	add	r5,r19,r5
 102801c:	28800217 	ldw	r2,8(r5)
 1028020:	020040f4 	movhi	r8,259
 1028024:	42043004 	addi	r8,r8,4288
 1028028:	11406326 	beq	r2,r5,10281b8 <_malloc_r+0x6a4>
 102802c:	01bfff04 	movi	r6,-4
 1028030:	11000117 	ldw	r4,4(r2)
 1028034:	2188703a 	and	r4,r4,r6
 1028038:	3900022e 	bgeu	r7,r4,1028044 <_malloc_r+0x530>
 102803c:	10800217 	ldw	r2,8(r2)
 1028040:	28bffb1e 	bne	r5,r2,1028030 <__alt_data_end+0xfffeab70>
 1028044:	11800317 	ldw	r6,12(r2)
 1028048:	99000117 	ldw	r4,4(r19)
 102804c:	81800315 	stw	r6,12(r16)
 1028050:	80800215 	stw	r2,8(r16)
 1028054:	34000215 	stw	r16,8(r6)
 1028058:	14000315 	stw	r16,12(r2)
 102805c:	003f2706 	br	1027cfc <__alt_data_end+0xfffea83c>
 1028060:	88c00054 	ori	r3,r17,1
 1028064:	80c00115 	stw	r3,4(r16)
 1028068:	8463883a 	add	r17,r16,r17
 102806c:	34400515 	stw	r17,20(r6)
 1028070:	34400415 	stw	r17,16(r6)
 1028074:	10c00054 	ori	r3,r2,1
 1028078:	8a400315 	stw	r9,12(r17)
 102807c:	8a400215 	stw	r9,8(r17)
 1028080:	88c00115 	stw	r3,4(r17)
 1028084:	88a3883a 	add	r17,r17,r2
 1028088:	88800015 	stw	r2,0(r17)
 102808c:	9009883a 	mov	r4,r18
 1028090:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1028094:	80800204 	addi	r2,r16,8
 1028098:	003ecb06 	br	1027bc8 <__alt_data_end+0xfffea708>
 102809c:	31000117 	ldw	r4,4(r6)
 10280a0:	003f1606 	br	1027cfc <__alt_data_end+0xfffea83c>
 10280a4:	63000044 	addi	r12,r12,1
 10280a8:	608000cc 	andi	r2,r12,3
 10280ac:	5ac00204 	addi	r11,r11,8
 10280b0:	103f2a1e 	bne	r2,zero,1027d5c <__alt_data_end+0xfffea89c>
 10280b4:	00002106 	br	102813c <_malloc_r+0x628>
 10280b8:	80800204 	addi	r2,r16,8
 10280bc:	84000517 	ldw	r16,20(r16)
 10280c0:	143eb31e 	bne	r2,r16,1027b90 <__alt_data_end+0xfffea6d0>
 10280c4:	18c00084 	addi	r3,r3,2
 10280c8:	003eec06 	br	1027c7c <__alt_data_end+0xfffea7bc>
 10280cc:	8085883a 	add	r2,r16,r2
 10280d0:	10c00117 	ldw	r3,4(r2)
 10280d4:	81000317 	ldw	r4,12(r16)
 10280d8:	81400217 	ldw	r5,8(r16)
 10280dc:	18c00054 	ori	r3,r3,1
 10280e0:	10c00115 	stw	r3,4(r2)
 10280e4:	29000315 	stw	r4,12(r5)
 10280e8:	21400215 	stw	r5,8(r4)
 10280ec:	9009883a 	mov	r4,r18
 10280f0:	102e3d80 	call	102e3d8 <__malloc_unlock>
 10280f4:	80800204 	addi	r2,r16,8
 10280f8:	003eb306 	br	1027bc8 <__alt_data_end+0xfffea708>
 10280fc:	19c016c4 	addi	r7,r3,91
 1028100:	39cb883a 	add	r5,r7,r7
 1028104:	003ec706 	br	1027c24 <__alt_data_end+0xfffea764>
 1028108:	3804d1ba 	srli	r2,r7,6
 102810c:	11000e04 	addi	r4,r2,56
 1028110:	210b883a 	add	r5,r4,r4
 1028114:	003fbe06 	br	1028010 <__alt_data_end+0xfffeab50>
 1028118:	84ff5d26 	beq	r16,r19,1027e90 <__alt_data_end+0xfffea9d0>
 102811c:	9c000217 	ldw	r16,8(r19)
 1028120:	00bfff04 	movi	r2,-4
 1028124:	80c00117 	ldw	r3,4(r16)
 1028128:	1886703a 	and	r3,r3,r2
 102812c:	003f9706 	br	1027f8c <__alt_data_end+0xfffeaacc>
 1028130:	52800017 	ldw	r10,0(r10)
 1028134:	18ffffc4 	addi	r3,r3,-1
 1028138:	50805c1e 	bne	r10,r2,10282ac <_malloc_r+0x798>
 102813c:	190000cc 	andi	r4,r3,3
 1028140:	50bffe04 	addi	r2,r10,-8
 1028144:	203ffa1e 	bne	r4,zero,1028130 <__alt_data_end+0xfffeac70>
 1028148:	98800117 	ldw	r2,4(r19)
 102814c:	0146303a 	nor	r3,zero,r5
 1028150:	1884703a 	and	r2,r3,r2
 1028154:	98800115 	stw	r2,4(r19)
 1028158:	294b883a 	add	r5,r5,r5
 102815c:	117f2e36 	bltu	r2,r5,1027e18 <__alt_data_end+0xfffea958>
 1028160:	283f2d26 	beq	r5,zero,1027e18 <__alt_data_end+0xfffea958>
 1028164:	1146703a 	and	r3,r2,r5
 1028168:	1800521e 	bne	r3,zero,10282b4 <_malloc_r+0x7a0>
 102816c:	6007883a 	mov	r3,r12
 1028170:	294b883a 	add	r5,r5,r5
 1028174:	1148703a 	and	r4,r2,r5
 1028178:	18c00104 	addi	r3,r3,4
 102817c:	203ffc26 	beq	r4,zero,1028170 <__alt_data_end+0xfffeacb0>
 1028180:	003ef006 	br	1027d44 <__alt_data_end+0xfffea884>
 1028184:	00805504 	movi	r2,340
 1028188:	10c01336 	bltu	r2,r3,10281d8 <_malloc_r+0x6c4>
 102818c:	8806d3fa 	srli	r3,r17,15
 1028190:	19c01dc4 	addi	r7,r3,119
 1028194:	39cb883a 	add	r5,r7,r7
 1028198:	003ea206 	br	1027c24 <__alt_data_end+0xfffea764>
 102819c:	00c40004 	movi	r3,4096
 10281a0:	003f4d06 	br	1027ed8 <__alt_data_end+0xfffeaa18>
 10281a4:	00800044 	movi	r2,1
 10281a8:	a0800115 	stw	r2,4(r20)
 10281ac:	a021883a 	mov	r16,r20
 10281b0:	0007883a 	mov	r3,zero
 10281b4:	003f7506 	br	1027f8c <__alt_data_end+0xfffeaacc>
 10281b8:	200bd0ba 	srai	r5,r4,2
 10281bc:	01800044 	movi	r6,1
 10281c0:	41000117 	ldw	r4,4(r8)
 10281c4:	314a983a 	sll	r5,r6,r5
 10281c8:	100d883a 	mov	r6,r2
 10281cc:	2908b03a 	or	r4,r5,r4
 10281d0:	41000115 	stw	r4,4(r8)
 10281d4:	003f9d06 	br	102804c <__alt_data_end+0xfffeab8c>
 10281d8:	00815504 	movi	r2,1364
 10281dc:	10c01336 	bltu	r2,r3,102822c <_malloc_r+0x718>
 10281e0:	8806d4ba 	srli	r3,r17,18
 10281e4:	19c01f04 	addi	r7,r3,124
 10281e8:	39cb883a 	add	r5,r7,r7
 10281ec:	003e8d06 	br	1027c24 <__alt_data_end+0xfffea764>
 10281f0:	ad400404 	addi	r21,r21,16
 10281f4:	003f1d06 	br	1027e6c <__alt_data_end+0xfffea9ac>
 10281f8:	01001504 	movi	r4,84
 10281fc:	20801c36 	bltu	r4,r2,1028270 <_malloc_r+0x75c>
 1028200:	3804d33a 	srli	r2,r7,12
 1028204:	11001b84 	addi	r4,r2,110
 1028208:	210b883a 	add	r5,r4,r4
 102820c:	003f8006 	br	1028010 <__alt_data_end+0xfffeab50>
 1028210:	3083ffcc 	andi	r2,r6,4095
 1028214:	103f241e 	bne	r2,zero,1027ea8 <__alt_data_end+0xfffea9e8>
 1028218:	99000217 	ldw	r4,8(r19)
 102821c:	ad85883a 	add	r2,r21,r22
 1028220:	10800054 	ori	r2,r2,1
 1028224:	20800115 	stw	r2,4(r4)
 1028228:	003f4a06 	br	1027f54 <__alt_data_end+0xfffeaa94>
 102822c:	01403f04 	movi	r5,252
 1028230:	01c01f84 	movi	r7,126
 1028234:	003e7b06 	br	1027c24 <__alt_data_end+0xfffea764>
 1028238:	00c00044 	movi	r3,1
 102823c:	002b883a 	mov	r21,zero
 1028240:	003f3006 	br	1027f04 <__alt_data_end+0xfffeaa44>
 1028244:	008040f4 	movhi	r2,259
 1028248:	1089b704 	addi	r2,r2,9948
 102824c:	15000015 	stw	r20,0(r2)
 1028250:	003f1b06 	br	1027ec0 <__alt_data_end+0xfffeaa00>
 1028254:	9009883a 	mov	r4,r18
 1028258:	81400204 	addi	r5,r16,8
 102825c:	1026f780 	call	1026f78 <_free_r>
 1028260:	008040f4 	movhi	r2,259
 1028264:	10908d04 	addi	r2,r2,16948
 1028268:	10c00017 	ldw	r3,0(r2)
 102826c:	003f3906 	br	1027f54 <__alt_data_end+0xfffeaa94>
 1028270:	01005504 	movi	r4,340
 1028274:	20800436 	bltu	r4,r2,1028288 <_malloc_r+0x774>
 1028278:	3804d3fa 	srli	r2,r7,15
 102827c:	11001dc4 	addi	r4,r2,119
 1028280:	210b883a 	add	r5,r4,r4
 1028284:	003f6206 	br	1028010 <__alt_data_end+0xfffeab50>
 1028288:	01015504 	movi	r4,1364
 102828c:	20800436 	bltu	r4,r2,10282a0 <_malloc_r+0x78c>
 1028290:	3804d4ba 	srli	r2,r7,18
 1028294:	11001f04 	addi	r4,r2,124
 1028298:	210b883a 	add	r5,r4,r4
 102829c:	003f5c06 	br	1028010 <__alt_data_end+0xfffeab50>
 10282a0:	01403f04 	movi	r5,252
 10282a4:	01001f84 	movi	r4,126
 10282a8:	003f5906 	br	1028010 <__alt_data_end+0xfffeab50>
 10282ac:	98800117 	ldw	r2,4(r19)
 10282b0:	003fa906 	br	1028158 <__alt_data_end+0xfffeac98>
 10282b4:	6007883a 	mov	r3,r12
 10282b8:	003ea206 	br	1027d44 <__alt_data_end+0xfffea884>

010282bc <memchr>:
 10282bc:	208000cc 	andi	r2,r4,3
 10282c0:	280f883a 	mov	r7,r5
 10282c4:	10003526 	beq	r2,zero,102839c <memchr+0xe0>
 10282c8:	30bfffc4 	addi	r2,r6,-1
 10282cc:	30001b26 	beq	r6,zero,102833c <memchr+0x80>
 10282d0:	21800003 	ldbu	r6,0(r4)
 10282d4:	28c03fcc 	andi	r3,r5,255
 10282d8:	30c01a26 	beq	r6,r3,1028344 <memchr+0x88>
 10282dc:	180d883a 	mov	r6,r3
 10282e0:	00000406 	br	10282f4 <memchr+0x38>
 10282e4:	10001526 	beq	r2,zero,102833c <memchr+0x80>
 10282e8:	20c00003 	ldbu	r3,0(r4)
 10282ec:	10bfffc4 	addi	r2,r2,-1
 10282f0:	19801426 	beq	r3,r6,1028344 <memchr+0x88>
 10282f4:	21000044 	addi	r4,r4,1
 10282f8:	20c000cc 	andi	r3,r4,3
 10282fc:	183ff91e 	bne	r3,zero,10282e4 <__alt_data_end+0xfffeae24>
 1028300:	024000c4 	movi	r9,3
 1028304:	48801136 	bltu	r9,r2,102834c <memchr+0x90>
 1028308:	10000c26 	beq	r2,zero,102833c <memchr+0x80>
 102830c:	20c00003 	ldbu	r3,0(r4)
 1028310:	29403fcc 	andi	r5,r5,255
 1028314:	19400b26 	beq	r3,r5,1028344 <memchr+0x88>
 1028318:	20c00044 	addi	r3,r4,1
 102831c:	2085883a 	add	r2,r4,r2
 1028320:	39803fcc 	andi	r6,r7,255
 1028324:	00000306 	br	1028334 <memchr+0x78>
 1028328:	18c00044 	addi	r3,r3,1
 102832c:	197fffc3 	ldbu	r5,-1(r3)
 1028330:	29800426 	beq	r5,r6,1028344 <memchr+0x88>
 1028334:	1809883a 	mov	r4,r3
 1028338:	18bffb1e 	bne	r3,r2,1028328 <__alt_data_end+0xfffeae68>
 102833c:	0005883a 	mov	r2,zero
 1028340:	f800283a 	ret
 1028344:	2005883a 	mov	r2,r4
 1028348:	f800283a 	ret
 102834c:	28c03fcc 	andi	r3,r5,255
 1028350:	1810923a 	slli	r8,r3,8
 1028354:	02ffbff4 	movhi	r11,65279
 1028358:	02a02074 	movhi	r10,32897
 102835c:	40c6b03a 	or	r3,r8,r3
 1028360:	1810943a 	slli	r8,r3,16
 1028364:	5affbfc4 	addi	r11,r11,-257
 1028368:	52a02004 	addi	r10,r10,-32640
 102836c:	40d0b03a 	or	r8,r8,r3
 1028370:	20c00017 	ldw	r3,0(r4)
 1028374:	40c6f03a 	xor	r3,r8,r3
 1028378:	1acd883a 	add	r6,r3,r11
 102837c:	00c6303a 	nor	r3,zero,r3
 1028380:	30c6703a 	and	r3,r6,r3
 1028384:	1a86703a 	and	r3,r3,r10
 1028388:	183fdf1e 	bne	r3,zero,1028308 <__alt_data_end+0xfffeae48>
 102838c:	10bfff04 	addi	r2,r2,-4
 1028390:	21000104 	addi	r4,r4,4
 1028394:	48bff636 	bltu	r9,r2,1028370 <__alt_data_end+0xfffeaeb0>
 1028398:	003fdb06 	br	1028308 <__alt_data_end+0xfffeae48>
 102839c:	3005883a 	mov	r2,r6
 10283a0:	003fd706 	br	1028300 <__alt_data_end+0xfffeae40>

010283a4 <memcpy>:
 10283a4:	deffff04 	addi	sp,sp,-4
 10283a8:	dc000015 	stw	r16,0(sp)
 10283ac:	00c003c4 	movi	r3,15
 10283b0:	2005883a 	mov	r2,r4
 10283b4:	1980432e 	bgeu	r3,r6,10284c4 <memcpy+0x120>
 10283b8:	2146b03a 	or	r3,r4,r5
 10283bc:	18c000cc 	andi	r3,r3,3
 10283c0:	1800421e 	bne	r3,zero,10284cc <memcpy+0x128>
 10283c4:	343ffc04 	addi	r16,r6,-16
 10283c8:	8020d13a 	srli	r16,r16,4
 10283cc:	28c00104 	addi	r3,r5,4
 10283d0:	23400104 	addi	r13,r4,4
 10283d4:	801e913a 	slli	r15,r16,4
 10283d8:	2b000204 	addi	r12,r5,8
 10283dc:	22c00204 	addi	r11,r4,8
 10283e0:	7bc00504 	addi	r15,r15,20
 10283e4:	2a800304 	addi	r10,r5,12
 10283e8:	22400304 	addi	r9,r4,12
 10283ec:	2bdf883a 	add	r15,r5,r15
 10283f0:	2811883a 	mov	r8,r5
 10283f4:	200f883a 	mov	r7,r4
 10283f8:	41000017 	ldw	r4,0(r8)
 10283fc:	39c00404 	addi	r7,r7,16
 1028400:	18c00404 	addi	r3,r3,16
 1028404:	393ffc15 	stw	r4,-16(r7)
 1028408:	1bbffc17 	ldw	r14,-16(r3)
 102840c:	6b400404 	addi	r13,r13,16
 1028410:	5ac00404 	addi	r11,r11,16
 1028414:	6bbffc15 	stw	r14,-16(r13)
 1028418:	63800017 	ldw	r14,0(r12)
 102841c:	4a400404 	addi	r9,r9,16
 1028420:	42000404 	addi	r8,r8,16
 1028424:	5bbffc15 	stw	r14,-16(r11)
 1028428:	53800017 	ldw	r14,0(r10)
 102842c:	63000404 	addi	r12,r12,16
 1028430:	52800404 	addi	r10,r10,16
 1028434:	4bbffc15 	stw	r14,-16(r9)
 1028438:	1bffef1e 	bne	r3,r15,10283f8 <__alt_data_end+0xfffeaf38>
 102843c:	81c00044 	addi	r7,r16,1
 1028440:	380e913a 	slli	r7,r7,4
 1028444:	310003cc 	andi	r4,r6,15
 1028448:	02c000c4 	movi	r11,3
 102844c:	11c7883a 	add	r3,r2,r7
 1028450:	29cb883a 	add	r5,r5,r7
 1028454:	59001f2e 	bgeu	r11,r4,10284d4 <memcpy+0x130>
 1028458:	1813883a 	mov	r9,r3
 102845c:	2811883a 	mov	r8,r5
 1028460:	200f883a 	mov	r7,r4
 1028464:	42800017 	ldw	r10,0(r8)
 1028468:	4a400104 	addi	r9,r9,4
 102846c:	39ffff04 	addi	r7,r7,-4
 1028470:	4abfff15 	stw	r10,-4(r9)
 1028474:	42000104 	addi	r8,r8,4
 1028478:	59fffa36 	bltu	r11,r7,1028464 <__alt_data_end+0xfffeafa4>
 102847c:	213fff04 	addi	r4,r4,-4
 1028480:	2008d0ba 	srli	r4,r4,2
 1028484:	318000cc 	andi	r6,r6,3
 1028488:	21000044 	addi	r4,r4,1
 102848c:	2109883a 	add	r4,r4,r4
 1028490:	2109883a 	add	r4,r4,r4
 1028494:	1907883a 	add	r3,r3,r4
 1028498:	290b883a 	add	r5,r5,r4
 102849c:	30000626 	beq	r6,zero,10284b8 <memcpy+0x114>
 10284a0:	198d883a 	add	r6,r3,r6
 10284a4:	29c00003 	ldbu	r7,0(r5)
 10284a8:	18c00044 	addi	r3,r3,1
 10284ac:	29400044 	addi	r5,r5,1
 10284b0:	19ffffc5 	stb	r7,-1(r3)
 10284b4:	19bffb1e 	bne	r3,r6,10284a4 <__alt_data_end+0xfffeafe4>
 10284b8:	dc000017 	ldw	r16,0(sp)
 10284bc:	dec00104 	addi	sp,sp,4
 10284c0:	f800283a 	ret
 10284c4:	2007883a 	mov	r3,r4
 10284c8:	003ff406 	br	102849c <__alt_data_end+0xfffeafdc>
 10284cc:	2007883a 	mov	r3,r4
 10284d0:	003ff306 	br	10284a0 <__alt_data_end+0xfffeafe0>
 10284d4:	200d883a 	mov	r6,r4
 10284d8:	003ff006 	br	102849c <__alt_data_end+0xfffeafdc>

010284dc <memmove>:
 10284dc:	2005883a 	mov	r2,r4
 10284e0:	29000b2e 	bgeu	r5,r4,1028510 <memmove+0x34>
 10284e4:	298f883a 	add	r7,r5,r6
 10284e8:	21c0092e 	bgeu	r4,r7,1028510 <memmove+0x34>
 10284ec:	2187883a 	add	r3,r4,r6
 10284f0:	198bc83a 	sub	r5,r3,r6
 10284f4:	30004b26 	beq	r6,zero,1028624 <memmove+0x148>
 10284f8:	39ffffc4 	addi	r7,r7,-1
 10284fc:	39000003 	ldbu	r4,0(r7)
 1028500:	18ffffc4 	addi	r3,r3,-1
 1028504:	19000005 	stb	r4,0(r3)
 1028508:	197ffb1e 	bne	r3,r5,10284f8 <__alt_data_end+0xfffeb038>
 102850c:	f800283a 	ret
 1028510:	00c003c4 	movi	r3,15
 1028514:	1980412e 	bgeu	r3,r6,102861c <memmove+0x140>
 1028518:	1146b03a 	or	r3,r2,r5
 102851c:	18c000cc 	andi	r3,r3,3
 1028520:	1800411e 	bne	r3,zero,1028628 <memmove+0x14c>
 1028524:	33fffc04 	addi	r15,r6,-16
 1028528:	781ed13a 	srli	r15,r15,4
 102852c:	28c00104 	addi	r3,r5,4
 1028530:	13400104 	addi	r13,r2,4
 1028534:	781c913a 	slli	r14,r15,4
 1028538:	2b000204 	addi	r12,r5,8
 102853c:	12c00204 	addi	r11,r2,8
 1028540:	73800504 	addi	r14,r14,20
 1028544:	2a800304 	addi	r10,r5,12
 1028548:	12400304 	addi	r9,r2,12
 102854c:	2b9d883a 	add	r14,r5,r14
 1028550:	2811883a 	mov	r8,r5
 1028554:	100f883a 	mov	r7,r2
 1028558:	41000017 	ldw	r4,0(r8)
 102855c:	39c00404 	addi	r7,r7,16
 1028560:	18c00404 	addi	r3,r3,16
 1028564:	393ffc15 	stw	r4,-16(r7)
 1028568:	193ffc17 	ldw	r4,-16(r3)
 102856c:	6b400404 	addi	r13,r13,16
 1028570:	5ac00404 	addi	r11,r11,16
 1028574:	693ffc15 	stw	r4,-16(r13)
 1028578:	61000017 	ldw	r4,0(r12)
 102857c:	4a400404 	addi	r9,r9,16
 1028580:	42000404 	addi	r8,r8,16
 1028584:	593ffc15 	stw	r4,-16(r11)
 1028588:	51000017 	ldw	r4,0(r10)
 102858c:	63000404 	addi	r12,r12,16
 1028590:	52800404 	addi	r10,r10,16
 1028594:	493ffc15 	stw	r4,-16(r9)
 1028598:	1bbfef1e 	bne	r3,r14,1028558 <__alt_data_end+0xfffeb098>
 102859c:	79000044 	addi	r4,r15,1
 10285a0:	2008913a 	slli	r4,r4,4
 10285a4:	328003cc 	andi	r10,r6,15
 10285a8:	02c000c4 	movi	r11,3
 10285ac:	1107883a 	add	r3,r2,r4
 10285b0:	290b883a 	add	r5,r5,r4
 10285b4:	5a801e2e 	bgeu	r11,r10,1028630 <memmove+0x154>
 10285b8:	1813883a 	mov	r9,r3
 10285bc:	2811883a 	mov	r8,r5
 10285c0:	500f883a 	mov	r7,r10
 10285c4:	41000017 	ldw	r4,0(r8)
 10285c8:	4a400104 	addi	r9,r9,4
 10285cc:	39ffff04 	addi	r7,r7,-4
 10285d0:	493fff15 	stw	r4,-4(r9)
 10285d4:	42000104 	addi	r8,r8,4
 10285d8:	59fffa36 	bltu	r11,r7,10285c4 <__alt_data_end+0xfffeb104>
 10285dc:	513fff04 	addi	r4,r10,-4
 10285e0:	2008d0ba 	srli	r4,r4,2
 10285e4:	318000cc 	andi	r6,r6,3
 10285e8:	21000044 	addi	r4,r4,1
 10285ec:	2109883a 	add	r4,r4,r4
 10285f0:	2109883a 	add	r4,r4,r4
 10285f4:	1907883a 	add	r3,r3,r4
 10285f8:	290b883a 	add	r5,r5,r4
 10285fc:	30000926 	beq	r6,zero,1028624 <memmove+0x148>
 1028600:	198d883a 	add	r6,r3,r6
 1028604:	29c00003 	ldbu	r7,0(r5)
 1028608:	18c00044 	addi	r3,r3,1
 102860c:	29400044 	addi	r5,r5,1
 1028610:	19ffffc5 	stb	r7,-1(r3)
 1028614:	19bffb1e 	bne	r3,r6,1028604 <__alt_data_end+0xfffeb144>
 1028618:	f800283a 	ret
 102861c:	1007883a 	mov	r3,r2
 1028620:	003ff606 	br	10285fc <__alt_data_end+0xfffeb13c>
 1028624:	f800283a 	ret
 1028628:	1007883a 	mov	r3,r2
 102862c:	003ff406 	br	1028600 <__alt_data_end+0xfffeb140>
 1028630:	500d883a 	mov	r6,r10
 1028634:	003ff106 	br	10285fc <__alt_data_end+0xfffeb13c>

01028638 <memset>:
 1028638:	20c000cc 	andi	r3,r4,3
 102863c:	2005883a 	mov	r2,r4
 1028640:	18004326 	beq	r3,zero,1028750 <memset+0x118>
 1028644:	31ffffc4 	addi	r7,r6,-1
 1028648:	30004026 	beq	r6,zero,102874c <memset+0x114>
 102864c:	2813883a 	mov	r9,r5
 1028650:	200d883a 	mov	r6,r4
 1028654:	2007883a 	mov	r3,r4
 1028658:	00000406 	br	102866c <memset+0x34>
 102865c:	3a3fffc4 	addi	r8,r7,-1
 1028660:	31800044 	addi	r6,r6,1
 1028664:	38003926 	beq	r7,zero,102874c <memset+0x114>
 1028668:	400f883a 	mov	r7,r8
 102866c:	18c00044 	addi	r3,r3,1
 1028670:	32400005 	stb	r9,0(r6)
 1028674:	1a0000cc 	andi	r8,r3,3
 1028678:	403ff81e 	bne	r8,zero,102865c <__alt_data_end+0xfffeb19c>
 102867c:	010000c4 	movi	r4,3
 1028680:	21c02d2e 	bgeu	r4,r7,1028738 <memset+0x100>
 1028684:	29803fcc 	andi	r6,r5,255
 1028688:	3008923a 	slli	r4,r6,8
 102868c:	218cb03a 	or	r6,r4,r6
 1028690:	3008943a 	slli	r4,r6,16
 1028694:	218cb03a 	or	r6,r4,r6
 1028698:	010003c4 	movi	r4,15
 102869c:	21c0182e 	bgeu	r4,r7,1028700 <memset+0xc8>
 10286a0:	3b3ffc04 	addi	r12,r7,-16
 10286a4:	6018d13a 	srli	r12,r12,4
 10286a8:	1a000104 	addi	r8,r3,4
 10286ac:	1ac00204 	addi	r11,r3,8
 10286b0:	6008913a 	slli	r4,r12,4
 10286b4:	1a800304 	addi	r10,r3,12
 10286b8:	1813883a 	mov	r9,r3
 10286bc:	21000504 	addi	r4,r4,20
 10286c0:	1909883a 	add	r4,r3,r4
 10286c4:	49800015 	stw	r6,0(r9)
 10286c8:	41800015 	stw	r6,0(r8)
 10286cc:	59800015 	stw	r6,0(r11)
 10286d0:	51800015 	stw	r6,0(r10)
 10286d4:	42000404 	addi	r8,r8,16
 10286d8:	4a400404 	addi	r9,r9,16
 10286dc:	5ac00404 	addi	r11,r11,16
 10286e0:	52800404 	addi	r10,r10,16
 10286e4:	413ff71e 	bne	r8,r4,10286c4 <__alt_data_end+0xfffeb204>
 10286e8:	63000044 	addi	r12,r12,1
 10286ec:	6018913a 	slli	r12,r12,4
 10286f0:	39c003cc 	andi	r7,r7,15
 10286f4:	010000c4 	movi	r4,3
 10286f8:	1b07883a 	add	r3,r3,r12
 10286fc:	21c00e2e 	bgeu	r4,r7,1028738 <memset+0x100>
 1028700:	1813883a 	mov	r9,r3
 1028704:	3811883a 	mov	r8,r7
 1028708:	010000c4 	movi	r4,3
 102870c:	49800015 	stw	r6,0(r9)
 1028710:	423fff04 	addi	r8,r8,-4
 1028714:	4a400104 	addi	r9,r9,4
 1028718:	223ffc36 	bltu	r4,r8,102870c <__alt_data_end+0xfffeb24c>
 102871c:	393fff04 	addi	r4,r7,-4
 1028720:	2008d0ba 	srli	r4,r4,2
 1028724:	39c000cc 	andi	r7,r7,3
 1028728:	21000044 	addi	r4,r4,1
 102872c:	2109883a 	add	r4,r4,r4
 1028730:	2109883a 	add	r4,r4,r4
 1028734:	1907883a 	add	r3,r3,r4
 1028738:	38000426 	beq	r7,zero,102874c <memset+0x114>
 102873c:	19cf883a 	add	r7,r3,r7
 1028740:	19400005 	stb	r5,0(r3)
 1028744:	18c00044 	addi	r3,r3,1
 1028748:	19fffd1e 	bne	r3,r7,1028740 <__alt_data_end+0xfffeb280>
 102874c:	f800283a 	ret
 1028750:	2007883a 	mov	r3,r4
 1028754:	300f883a 	mov	r7,r6
 1028758:	003fc806 	br	102867c <__alt_data_end+0xfffeb1bc>

0102875c <_Balloc>:
 102875c:	20801317 	ldw	r2,76(r4)
 1028760:	defffc04 	addi	sp,sp,-16
 1028764:	dc400115 	stw	r17,4(sp)
 1028768:	dc000015 	stw	r16,0(sp)
 102876c:	dfc00315 	stw	ra,12(sp)
 1028770:	dc800215 	stw	r18,8(sp)
 1028774:	2023883a 	mov	r17,r4
 1028778:	2821883a 	mov	r16,r5
 102877c:	10000f26 	beq	r2,zero,10287bc <_Balloc+0x60>
 1028780:	8407883a 	add	r3,r16,r16
 1028784:	18c7883a 	add	r3,r3,r3
 1028788:	10c7883a 	add	r3,r2,r3
 102878c:	18800017 	ldw	r2,0(r3)
 1028790:	10001126 	beq	r2,zero,10287d8 <_Balloc+0x7c>
 1028794:	11000017 	ldw	r4,0(r2)
 1028798:	19000015 	stw	r4,0(r3)
 102879c:	10000415 	stw	zero,16(r2)
 10287a0:	10000315 	stw	zero,12(r2)
 10287a4:	dfc00317 	ldw	ra,12(sp)
 10287a8:	dc800217 	ldw	r18,8(sp)
 10287ac:	dc400117 	ldw	r17,4(sp)
 10287b0:	dc000017 	ldw	r16,0(sp)
 10287b4:	dec00404 	addi	sp,sp,16
 10287b8:	f800283a 	ret
 10287bc:	01400104 	movi	r5,4
 10287c0:	01800844 	movi	r6,33
 10287c4:	102b4740 	call	102b474 <_calloc_r>
 10287c8:	88801315 	stw	r2,76(r17)
 10287cc:	103fec1e 	bne	r2,zero,1028780 <__alt_data_end+0xfffeb2c0>
 10287d0:	0005883a 	mov	r2,zero
 10287d4:	003ff306 	br	10287a4 <__alt_data_end+0xfffeb2e4>
 10287d8:	01400044 	movi	r5,1
 10287dc:	2c24983a 	sll	r18,r5,r16
 10287e0:	8809883a 	mov	r4,r17
 10287e4:	91800144 	addi	r6,r18,5
 10287e8:	318d883a 	add	r6,r6,r6
 10287ec:	318d883a 	add	r6,r6,r6
 10287f0:	102b4740 	call	102b474 <_calloc_r>
 10287f4:	103ff626 	beq	r2,zero,10287d0 <__alt_data_end+0xfffeb310>
 10287f8:	14000115 	stw	r16,4(r2)
 10287fc:	14800215 	stw	r18,8(r2)
 1028800:	003fe606 	br	102879c <__alt_data_end+0xfffeb2dc>

01028804 <_Bfree>:
 1028804:	28000826 	beq	r5,zero,1028828 <_Bfree+0x24>
 1028808:	28c00117 	ldw	r3,4(r5)
 102880c:	20801317 	ldw	r2,76(r4)
 1028810:	18c7883a 	add	r3,r3,r3
 1028814:	18c7883a 	add	r3,r3,r3
 1028818:	10c5883a 	add	r2,r2,r3
 102881c:	10c00017 	ldw	r3,0(r2)
 1028820:	28c00015 	stw	r3,0(r5)
 1028824:	11400015 	stw	r5,0(r2)
 1028828:	f800283a 	ret

0102882c <__multadd>:
 102882c:	defffa04 	addi	sp,sp,-24
 1028830:	dc000115 	stw	r16,4(sp)
 1028834:	2c000417 	ldw	r16,16(r5)
 1028838:	dc800315 	stw	r18,12(sp)
 102883c:	dc400215 	stw	r17,8(sp)
 1028840:	dfc00515 	stw	ra,20(sp)
 1028844:	dcc00415 	stw	r19,16(sp)
 1028848:	2823883a 	mov	r17,r5
 102884c:	2025883a 	mov	r18,r4
 1028850:	2a400504 	addi	r9,r5,20
 1028854:	0015883a 	mov	r10,zero
 1028858:	4a000017 	ldw	r8,0(r9)
 102885c:	4a400104 	addi	r9,r9,4
 1028860:	52800044 	addi	r10,r10,1
 1028864:	40ffffcc 	andi	r3,r8,65535
 1028868:	1987383a 	mul	r3,r3,r6
 102886c:	4010d43a 	srli	r8,r8,16
 1028870:	19cf883a 	add	r7,r3,r7
 1028874:	4191383a 	mul	r8,r8,r6
 1028878:	3816d43a 	srli	r11,r7,16
 102887c:	38ffffcc 	andi	r3,r7,65535
 1028880:	5a0f883a 	add	r7,r11,r8
 1028884:	3810943a 	slli	r8,r7,16
 1028888:	380ed43a 	srli	r7,r7,16
 102888c:	40c7883a 	add	r3,r8,r3
 1028890:	48ffff15 	stw	r3,-4(r9)
 1028894:	543ff016 	blt	r10,r16,1028858 <__alt_data_end+0xfffeb398>
 1028898:	38000926 	beq	r7,zero,10288c0 <__multadd+0x94>
 102889c:	88800217 	ldw	r2,8(r17)
 10288a0:	80800f0e 	bge	r16,r2,10288e0 <__multadd+0xb4>
 10288a4:	80800144 	addi	r2,r16,5
 10288a8:	1085883a 	add	r2,r2,r2
 10288ac:	1085883a 	add	r2,r2,r2
 10288b0:	8885883a 	add	r2,r17,r2
 10288b4:	11c00015 	stw	r7,0(r2)
 10288b8:	84000044 	addi	r16,r16,1
 10288bc:	8c000415 	stw	r16,16(r17)
 10288c0:	8805883a 	mov	r2,r17
 10288c4:	dfc00517 	ldw	ra,20(sp)
 10288c8:	dcc00417 	ldw	r19,16(sp)
 10288cc:	dc800317 	ldw	r18,12(sp)
 10288d0:	dc400217 	ldw	r17,8(sp)
 10288d4:	dc000117 	ldw	r16,4(sp)
 10288d8:	dec00604 	addi	sp,sp,24
 10288dc:	f800283a 	ret
 10288e0:	89400117 	ldw	r5,4(r17)
 10288e4:	9009883a 	mov	r4,r18
 10288e8:	d9c00015 	stw	r7,0(sp)
 10288ec:	29400044 	addi	r5,r5,1
 10288f0:	102875c0 	call	102875c <_Balloc>
 10288f4:	89800417 	ldw	r6,16(r17)
 10288f8:	89400304 	addi	r5,r17,12
 10288fc:	11000304 	addi	r4,r2,12
 1028900:	31800084 	addi	r6,r6,2
 1028904:	318d883a 	add	r6,r6,r6
 1028908:	318d883a 	add	r6,r6,r6
 102890c:	1027883a 	mov	r19,r2
 1028910:	10283a40 	call	10283a4 <memcpy>
 1028914:	89000117 	ldw	r4,4(r17)
 1028918:	90c01317 	ldw	r3,76(r18)
 102891c:	d9c00017 	ldw	r7,0(sp)
 1028920:	2109883a 	add	r4,r4,r4
 1028924:	2109883a 	add	r4,r4,r4
 1028928:	1907883a 	add	r3,r3,r4
 102892c:	18800017 	ldw	r2,0(r3)
 1028930:	88800015 	stw	r2,0(r17)
 1028934:	1c400015 	stw	r17,0(r3)
 1028938:	9823883a 	mov	r17,r19
 102893c:	003fd906 	br	10288a4 <__alt_data_end+0xfffeb3e4>

01028940 <__s2b>:
 1028940:	defff904 	addi	sp,sp,-28
 1028944:	dc400115 	stw	r17,4(sp)
 1028948:	dc000015 	stw	r16,0(sp)
 102894c:	2023883a 	mov	r17,r4
 1028950:	2821883a 	mov	r16,r5
 1028954:	39000204 	addi	r4,r7,8
 1028958:	01400244 	movi	r5,9
 102895c:	dcc00315 	stw	r19,12(sp)
 1028960:	dc800215 	stw	r18,8(sp)
 1028964:	dfc00615 	stw	ra,24(sp)
 1028968:	dd400515 	stw	r21,20(sp)
 102896c:	dd000415 	stw	r20,16(sp)
 1028970:	3825883a 	mov	r18,r7
 1028974:	3027883a 	mov	r19,r6
 1028978:	1022b580 	call	1022b58 <__divsi3>
 102897c:	00c00044 	movi	r3,1
 1028980:	000b883a 	mov	r5,zero
 1028984:	1880030e 	bge	r3,r2,1028994 <__s2b+0x54>
 1028988:	18c7883a 	add	r3,r3,r3
 102898c:	29400044 	addi	r5,r5,1
 1028990:	18bffd16 	blt	r3,r2,1028988 <__alt_data_end+0xfffeb4c8>
 1028994:	8809883a 	mov	r4,r17
 1028998:	102875c0 	call	102875c <_Balloc>
 102899c:	d8c00717 	ldw	r3,28(sp)
 10289a0:	10c00515 	stw	r3,20(r2)
 10289a4:	00c00044 	movi	r3,1
 10289a8:	10c00415 	stw	r3,16(r2)
 10289ac:	00c00244 	movi	r3,9
 10289b0:	1cc0210e 	bge	r3,r19,1028a38 <__s2b+0xf8>
 10289b4:	80eb883a 	add	r21,r16,r3
 10289b8:	a829883a 	mov	r20,r21
 10289bc:	84e1883a 	add	r16,r16,r19
 10289c0:	a1c00007 	ldb	r7,0(r20)
 10289c4:	8809883a 	mov	r4,r17
 10289c8:	a5000044 	addi	r20,r20,1
 10289cc:	100b883a 	mov	r5,r2
 10289d0:	01800284 	movi	r6,10
 10289d4:	39fff404 	addi	r7,r7,-48
 10289d8:	102882c0 	call	102882c <__multadd>
 10289dc:	a43ff81e 	bne	r20,r16,10289c0 <__alt_data_end+0xfffeb500>
 10289e0:	ace1883a 	add	r16,r21,r19
 10289e4:	843ffe04 	addi	r16,r16,-8
 10289e8:	9c800a0e 	bge	r19,r18,1028a14 <__s2b+0xd4>
 10289ec:	94e5c83a 	sub	r18,r18,r19
 10289f0:	84a5883a 	add	r18,r16,r18
 10289f4:	81c00007 	ldb	r7,0(r16)
 10289f8:	8809883a 	mov	r4,r17
 10289fc:	84000044 	addi	r16,r16,1
 1028a00:	100b883a 	mov	r5,r2
 1028a04:	01800284 	movi	r6,10
 1028a08:	39fff404 	addi	r7,r7,-48
 1028a0c:	102882c0 	call	102882c <__multadd>
 1028a10:	84bff81e 	bne	r16,r18,10289f4 <__alt_data_end+0xfffeb534>
 1028a14:	dfc00617 	ldw	ra,24(sp)
 1028a18:	dd400517 	ldw	r21,20(sp)
 1028a1c:	dd000417 	ldw	r20,16(sp)
 1028a20:	dcc00317 	ldw	r19,12(sp)
 1028a24:	dc800217 	ldw	r18,8(sp)
 1028a28:	dc400117 	ldw	r17,4(sp)
 1028a2c:	dc000017 	ldw	r16,0(sp)
 1028a30:	dec00704 	addi	sp,sp,28
 1028a34:	f800283a 	ret
 1028a38:	84000284 	addi	r16,r16,10
 1028a3c:	1827883a 	mov	r19,r3
 1028a40:	003fe906 	br	10289e8 <__alt_data_end+0xfffeb528>

01028a44 <__hi0bits>:
 1028a44:	20bfffec 	andhi	r2,r4,65535
 1028a48:	1000141e 	bne	r2,zero,1028a9c <__hi0bits+0x58>
 1028a4c:	2008943a 	slli	r4,r4,16
 1028a50:	00800404 	movi	r2,16
 1028a54:	20ffc02c 	andhi	r3,r4,65280
 1028a58:	1800021e 	bne	r3,zero,1028a64 <__hi0bits+0x20>
 1028a5c:	2008923a 	slli	r4,r4,8
 1028a60:	10800204 	addi	r2,r2,8
 1028a64:	20fc002c 	andhi	r3,r4,61440
 1028a68:	1800021e 	bne	r3,zero,1028a74 <__hi0bits+0x30>
 1028a6c:	2008913a 	slli	r4,r4,4
 1028a70:	10800104 	addi	r2,r2,4
 1028a74:	20f0002c 	andhi	r3,r4,49152
 1028a78:	1800031e 	bne	r3,zero,1028a88 <__hi0bits+0x44>
 1028a7c:	2109883a 	add	r4,r4,r4
 1028a80:	10800084 	addi	r2,r2,2
 1028a84:	2109883a 	add	r4,r4,r4
 1028a88:	20000316 	blt	r4,zero,1028a98 <__hi0bits+0x54>
 1028a8c:	2110002c 	andhi	r4,r4,16384
 1028a90:	2000041e 	bne	r4,zero,1028aa4 <__hi0bits+0x60>
 1028a94:	00800804 	movi	r2,32
 1028a98:	f800283a 	ret
 1028a9c:	0005883a 	mov	r2,zero
 1028aa0:	003fec06 	br	1028a54 <__alt_data_end+0xfffeb594>
 1028aa4:	10800044 	addi	r2,r2,1
 1028aa8:	f800283a 	ret

01028aac <__lo0bits>:
 1028aac:	20c00017 	ldw	r3,0(r4)
 1028ab0:	188001cc 	andi	r2,r3,7
 1028ab4:	10000826 	beq	r2,zero,1028ad8 <__lo0bits+0x2c>
 1028ab8:	1880004c 	andi	r2,r3,1
 1028abc:	1000211e 	bne	r2,zero,1028b44 <__lo0bits+0x98>
 1028ac0:	1880008c 	andi	r2,r3,2
 1028ac4:	1000211e 	bne	r2,zero,1028b4c <__lo0bits+0xa0>
 1028ac8:	1806d0ba 	srli	r3,r3,2
 1028acc:	00800084 	movi	r2,2
 1028ad0:	20c00015 	stw	r3,0(r4)
 1028ad4:	f800283a 	ret
 1028ad8:	18bfffcc 	andi	r2,r3,65535
 1028adc:	10001326 	beq	r2,zero,1028b2c <__lo0bits+0x80>
 1028ae0:	0005883a 	mov	r2,zero
 1028ae4:	19403fcc 	andi	r5,r3,255
 1028ae8:	2800021e 	bne	r5,zero,1028af4 <__lo0bits+0x48>
 1028aec:	1806d23a 	srli	r3,r3,8
 1028af0:	10800204 	addi	r2,r2,8
 1028af4:	194003cc 	andi	r5,r3,15
 1028af8:	2800021e 	bne	r5,zero,1028b04 <__lo0bits+0x58>
 1028afc:	1806d13a 	srli	r3,r3,4
 1028b00:	10800104 	addi	r2,r2,4
 1028b04:	194000cc 	andi	r5,r3,3
 1028b08:	2800021e 	bne	r5,zero,1028b14 <__lo0bits+0x68>
 1028b0c:	1806d0ba 	srli	r3,r3,2
 1028b10:	10800084 	addi	r2,r2,2
 1028b14:	1940004c 	andi	r5,r3,1
 1028b18:	2800081e 	bne	r5,zero,1028b3c <__lo0bits+0x90>
 1028b1c:	1806d07a 	srli	r3,r3,1
 1028b20:	1800051e 	bne	r3,zero,1028b38 <__lo0bits+0x8c>
 1028b24:	00800804 	movi	r2,32
 1028b28:	f800283a 	ret
 1028b2c:	1806d43a 	srli	r3,r3,16
 1028b30:	00800404 	movi	r2,16
 1028b34:	003feb06 	br	1028ae4 <__alt_data_end+0xfffeb624>
 1028b38:	10800044 	addi	r2,r2,1
 1028b3c:	20c00015 	stw	r3,0(r4)
 1028b40:	f800283a 	ret
 1028b44:	0005883a 	mov	r2,zero
 1028b48:	f800283a 	ret
 1028b4c:	1806d07a 	srli	r3,r3,1
 1028b50:	00800044 	movi	r2,1
 1028b54:	20c00015 	stw	r3,0(r4)
 1028b58:	f800283a 	ret

01028b5c <__i2b>:
 1028b5c:	defffd04 	addi	sp,sp,-12
 1028b60:	dc000015 	stw	r16,0(sp)
 1028b64:	04000044 	movi	r16,1
 1028b68:	dc400115 	stw	r17,4(sp)
 1028b6c:	2823883a 	mov	r17,r5
 1028b70:	800b883a 	mov	r5,r16
 1028b74:	dfc00215 	stw	ra,8(sp)
 1028b78:	102875c0 	call	102875c <_Balloc>
 1028b7c:	14400515 	stw	r17,20(r2)
 1028b80:	14000415 	stw	r16,16(r2)
 1028b84:	dfc00217 	ldw	ra,8(sp)
 1028b88:	dc400117 	ldw	r17,4(sp)
 1028b8c:	dc000017 	ldw	r16,0(sp)
 1028b90:	dec00304 	addi	sp,sp,12
 1028b94:	f800283a 	ret

01028b98 <__multiply>:
 1028b98:	defffa04 	addi	sp,sp,-24
 1028b9c:	dcc00315 	stw	r19,12(sp)
 1028ba0:	dc800215 	stw	r18,8(sp)
 1028ba4:	2cc00417 	ldw	r19,16(r5)
 1028ba8:	34800417 	ldw	r18,16(r6)
 1028bac:	dd000415 	stw	r20,16(sp)
 1028bb0:	dc400115 	stw	r17,4(sp)
 1028bb4:	dfc00515 	stw	ra,20(sp)
 1028bb8:	dc000015 	stw	r16,0(sp)
 1028bbc:	2829883a 	mov	r20,r5
 1028bc0:	3023883a 	mov	r17,r6
 1028bc4:	9c807016 	blt	r19,r18,1028d88 <__multiply+0x1f0>
 1028bc8:	9005883a 	mov	r2,r18
 1028bcc:	9825883a 	mov	r18,r19
 1028bd0:	1027883a 	mov	r19,r2
 1028bd4:	a0800217 	ldw	r2,8(r20)
 1028bd8:	94e1883a 	add	r16,r18,r19
 1028bdc:	a1400117 	ldw	r5,4(r20)
 1028be0:	1400010e 	bge	r2,r16,1028be8 <__multiply+0x50>
 1028be4:	29400044 	addi	r5,r5,1
 1028be8:	102875c0 	call	102875c <_Balloc>
 1028bec:	8417883a 	add	r11,r16,r16
 1028bf0:	13000504 	addi	r12,r2,20
 1028bf4:	5ad7883a 	add	r11,r11,r11
 1028bf8:	62d7883a 	add	r11,r12,r11
 1028bfc:	6007883a 	mov	r3,r12
 1028c00:	62c0032e 	bgeu	r12,r11,1028c10 <__multiply+0x78>
 1028c04:	18000015 	stw	zero,0(r3)
 1028c08:	18c00104 	addi	r3,r3,4
 1028c0c:	1afffd36 	bltu	r3,r11,1028c04 <__alt_data_end+0xfffeb744>
 1028c10:	9ce7883a 	add	r19,r19,r19
 1028c14:	94a5883a 	add	r18,r18,r18
 1028c18:	89800504 	addi	r6,r17,20
 1028c1c:	9ce7883a 	add	r19,r19,r19
 1028c20:	a3800504 	addi	r14,r20,20
 1028c24:	94a5883a 	add	r18,r18,r18
 1028c28:	34db883a 	add	r13,r6,r19
 1028c2c:	7495883a 	add	r10,r14,r18
 1028c30:	3340422e 	bgeu	r6,r13,1028d3c <__multiply+0x1a4>
 1028c34:	34400017 	ldw	r17,0(r6)
 1028c38:	8cbfffcc 	andi	r18,r17,65535
 1028c3c:	90001b26 	beq	r18,zero,1028cac <__multiply+0x114>
 1028c40:	6013883a 	mov	r9,r12
 1028c44:	7023883a 	mov	r17,r14
 1028c48:	0011883a 	mov	r8,zero
 1028c4c:	88c00017 	ldw	r3,0(r17)
 1028c50:	4bc00017 	ldw	r15,0(r9)
 1028c54:	8c400104 	addi	r17,r17,4
 1028c58:	19ffffcc 	andi	r7,r3,65535
 1028c5c:	3c8f383a 	mul	r7,r7,r18
 1028c60:	1808d43a 	srli	r4,r3,16
 1028c64:	797fffcc 	andi	r5,r15,65535
 1028c68:	29cb883a 	add	r5,r5,r7
 1028c6c:	2a0b883a 	add	r5,r5,r8
 1028c70:	2489383a 	mul	r4,r4,r18
 1028c74:	7806d43a 	srli	r3,r15,16
 1028c78:	2810d43a 	srli	r8,r5,16
 1028c7c:	297fffcc 	andi	r5,r5,65535
 1028c80:	1907883a 	add	r3,r3,r4
 1028c84:	1a07883a 	add	r3,r3,r8
 1028c88:	1808943a 	slli	r4,r3,16
 1028c8c:	480f883a 	mov	r7,r9
 1028c90:	1810d43a 	srli	r8,r3,16
 1028c94:	214ab03a 	or	r5,r4,r5
 1028c98:	49400015 	stw	r5,0(r9)
 1028c9c:	4a400104 	addi	r9,r9,4
 1028ca0:	8abfea36 	bltu	r17,r10,1028c4c <__alt_data_end+0xfffeb78c>
 1028ca4:	3a000115 	stw	r8,4(r7)
 1028ca8:	34400017 	ldw	r17,0(r6)
 1028cac:	8822d43a 	srli	r17,r17,16
 1028cb0:	88001f26 	beq	r17,zero,1028d30 <__multiply+0x198>
 1028cb4:	60c00017 	ldw	r3,0(r12)
 1028cb8:	7013883a 	mov	r9,r14
 1028cbc:	601f883a 	mov	r15,r12
 1028cc0:	1811883a 	mov	r8,r3
 1028cc4:	6027883a 	mov	r19,r12
 1028cc8:	000f883a 	mov	r7,zero
 1028ccc:	00000106 	br	1028cd4 <__multiply+0x13c>
 1028cd0:	9027883a 	mov	r19,r18
 1028cd4:	4940000b 	ldhu	r5,0(r9)
 1028cd8:	4010d43a 	srli	r8,r8,16
 1028cdc:	193fffcc 	andi	r4,r3,65535
 1028ce0:	2c4b383a 	mul	r5,r5,r17
 1028ce4:	7bc00104 	addi	r15,r15,4
 1028ce8:	4a400104 	addi	r9,r9,4
 1028cec:	2a0b883a 	add	r5,r5,r8
 1028cf0:	29cb883a 	add	r5,r5,r7
 1028cf4:	2806943a 	slli	r3,r5,16
 1028cf8:	9c800104 	addi	r18,r19,4
 1028cfc:	280ad43a 	srli	r5,r5,16
 1028d00:	1908b03a 	or	r4,r3,r4
 1028d04:	793fff15 	stw	r4,-4(r15)
 1028d08:	48ffff17 	ldw	r3,-4(r9)
 1028d0c:	92000017 	ldw	r8,0(r18)
 1028d10:	1806d43a 	srli	r3,r3,16
 1028d14:	413fffcc 	andi	r4,r8,65535
 1028d18:	1c47383a 	mul	r3,r3,r17
 1028d1c:	1907883a 	add	r3,r3,r4
 1028d20:	1947883a 	add	r3,r3,r5
 1028d24:	180ed43a 	srli	r7,r3,16
 1028d28:	4abfe936 	bltu	r9,r10,1028cd0 <__alt_data_end+0xfffeb810>
 1028d2c:	98c00115 	stw	r3,4(r19)
 1028d30:	31800104 	addi	r6,r6,4
 1028d34:	63000104 	addi	r12,r12,4
 1028d38:	337fbe36 	bltu	r6,r13,1028c34 <__alt_data_end+0xfffeb774>
 1028d3c:	0400090e 	bge	zero,r16,1028d64 <__multiply+0x1cc>
 1028d40:	58ffff17 	ldw	r3,-4(r11)
 1028d44:	5affff04 	addi	r11,r11,-4
 1028d48:	18000326 	beq	r3,zero,1028d58 <__multiply+0x1c0>
 1028d4c:	00000506 	br	1028d64 <__multiply+0x1cc>
 1028d50:	58c00017 	ldw	r3,0(r11)
 1028d54:	1800031e 	bne	r3,zero,1028d64 <__multiply+0x1cc>
 1028d58:	843fffc4 	addi	r16,r16,-1
 1028d5c:	5affff04 	addi	r11,r11,-4
 1028d60:	803ffb1e 	bne	r16,zero,1028d50 <__alt_data_end+0xfffeb890>
 1028d64:	14000415 	stw	r16,16(r2)
 1028d68:	dfc00517 	ldw	ra,20(sp)
 1028d6c:	dd000417 	ldw	r20,16(sp)
 1028d70:	dcc00317 	ldw	r19,12(sp)
 1028d74:	dc800217 	ldw	r18,8(sp)
 1028d78:	dc400117 	ldw	r17,4(sp)
 1028d7c:	dc000017 	ldw	r16,0(sp)
 1028d80:	dec00604 	addi	sp,sp,24
 1028d84:	f800283a 	ret
 1028d88:	3029883a 	mov	r20,r6
 1028d8c:	2823883a 	mov	r17,r5
 1028d90:	003f9006 	br	1028bd4 <__alt_data_end+0xfffeb714>

01028d94 <__pow5mult>:
 1028d94:	defffa04 	addi	sp,sp,-24
 1028d98:	dcc00315 	stw	r19,12(sp)
 1028d9c:	dc800215 	stw	r18,8(sp)
 1028da0:	dc000015 	stw	r16,0(sp)
 1028da4:	dfc00515 	stw	ra,20(sp)
 1028da8:	dd000415 	stw	r20,16(sp)
 1028dac:	dc400115 	stw	r17,4(sp)
 1028db0:	308000cc 	andi	r2,r6,3
 1028db4:	3021883a 	mov	r16,r6
 1028db8:	2027883a 	mov	r19,r4
 1028dbc:	2825883a 	mov	r18,r5
 1028dc0:	10002e1e 	bne	r2,zero,1028e7c <__pow5mult+0xe8>
 1028dc4:	8021d0ba 	srai	r16,r16,2
 1028dc8:	80001a26 	beq	r16,zero,1028e34 <__pow5mult+0xa0>
 1028dcc:	9c401217 	ldw	r17,72(r19)
 1028dd0:	8800061e 	bne	r17,zero,1028dec <__pow5mult+0x58>
 1028dd4:	00003406 	br	1028ea8 <__pow5mult+0x114>
 1028dd8:	8021d07a 	srai	r16,r16,1
 1028ddc:	80001526 	beq	r16,zero,1028e34 <__pow5mult+0xa0>
 1028de0:	88800017 	ldw	r2,0(r17)
 1028de4:	10001c26 	beq	r2,zero,1028e58 <__pow5mult+0xc4>
 1028de8:	1023883a 	mov	r17,r2
 1028dec:	80c0004c 	andi	r3,r16,1
 1028df0:	183ff926 	beq	r3,zero,1028dd8 <__alt_data_end+0xfffeb918>
 1028df4:	900b883a 	mov	r5,r18
 1028df8:	880d883a 	mov	r6,r17
 1028dfc:	9809883a 	mov	r4,r19
 1028e00:	1028b980 	call	1028b98 <__multiply>
 1028e04:	90001b26 	beq	r18,zero,1028e74 <__pow5mult+0xe0>
 1028e08:	91c00117 	ldw	r7,4(r18)
 1028e0c:	98c01317 	ldw	r3,76(r19)
 1028e10:	8021d07a 	srai	r16,r16,1
 1028e14:	39cf883a 	add	r7,r7,r7
 1028e18:	39cf883a 	add	r7,r7,r7
 1028e1c:	19c7883a 	add	r3,r3,r7
 1028e20:	19000017 	ldw	r4,0(r3)
 1028e24:	91000015 	stw	r4,0(r18)
 1028e28:	1c800015 	stw	r18,0(r3)
 1028e2c:	1025883a 	mov	r18,r2
 1028e30:	803feb1e 	bne	r16,zero,1028de0 <__alt_data_end+0xfffeb920>
 1028e34:	9005883a 	mov	r2,r18
 1028e38:	dfc00517 	ldw	ra,20(sp)
 1028e3c:	dd000417 	ldw	r20,16(sp)
 1028e40:	dcc00317 	ldw	r19,12(sp)
 1028e44:	dc800217 	ldw	r18,8(sp)
 1028e48:	dc400117 	ldw	r17,4(sp)
 1028e4c:	dc000017 	ldw	r16,0(sp)
 1028e50:	dec00604 	addi	sp,sp,24
 1028e54:	f800283a 	ret
 1028e58:	9809883a 	mov	r4,r19
 1028e5c:	880b883a 	mov	r5,r17
 1028e60:	880d883a 	mov	r6,r17
 1028e64:	1028b980 	call	1028b98 <__multiply>
 1028e68:	88800015 	stw	r2,0(r17)
 1028e6c:	10000015 	stw	zero,0(r2)
 1028e70:	003fdd06 	br	1028de8 <__alt_data_end+0xfffeb928>
 1028e74:	1025883a 	mov	r18,r2
 1028e78:	003fd706 	br	1028dd8 <__alt_data_end+0xfffeb918>
 1028e7c:	10bfffc4 	addi	r2,r2,-1
 1028e80:	1085883a 	add	r2,r2,r2
 1028e84:	00c040f4 	movhi	r3,259
 1028e88:	18c2ad04 	addi	r3,r3,2740
 1028e8c:	1085883a 	add	r2,r2,r2
 1028e90:	1885883a 	add	r2,r3,r2
 1028e94:	11800017 	ldw	r6,0(r2)
 1028e98:	000f883a 	mov	r7,zero
 1028e9c:	102882c0 	call	102882c <__multadd>
 1028ea0:	1025883a 	mov	r18,r2
 1028ea4:	003fc706 	br	1028dc4 <__alt_data_end+0xfffeb904>
 1028ea8:	05000044 	movi	r20,1
 1028eac:	9809883a 	mov	r4,r19
 1028eb0:	a00b883a 	mov	r5,r20
 1028eb4:	102875c0 	call	102875c <_Balloc>
 1028eb8:	1023883a 	mov	r17,r2
 1028ebc:	00809c44 	movi	r2,625
 1028ec0:	88800515 	stw	r2,20(r17)
 1028ec4:	8d000415 	stw	r20,16(r17)
 1028ec8:	9c401215 	stw	r17,72(r19)
 1028ecc:	88000015 	stw	zero,0(r17)
 1028ed0:	003fc606 	br	1028dec <__alt_data_end+0xfffeb92c>

01028ed4 <__lshift>:
 1028ed4:	defff904 	addi	sp,sp,-28
 1028ed8:	dd000415 	stw	r20,16(sp)
 1028edc:	dcc00315 	stw	r19,12(sp)
 1028ee0:	3029d17a 	srai	r20,r6,5
 1028ee4:	2cc00417 	ldw	r19,16(r5)
 1028ee8:	28800217 	ldw	r2,8(r5)
 1028eec:	dd400515 	stw	r21,20(sp)
 1028ef0:	a4e7883a 	add	r19,r20,r19
 1028ef4:	dc800215 	stw	r18,8(sp)
 1028ef8:	dc400115 	stw	r17,4(sp)
 1028efc:	dc000015 	stw	r16,0(sp)
 1028f00:	dfc00615 	stw	ra,24(sp)
 1028f04:	9c000044 	addi	r16,r19,1
 1028f08:	2823883a 	mov	r17,r5
 1028f0c:	302b883a 	mov	r21,r6
 1028f10:	2025883a 	mov	r18,r4
 1028f14:	29400117 	ldw	r5,4(r5)
 1028f18:	1400030e 	bge	r2,r16,1028f28 <__lshift+0x54>
 1028f1c:	1085883a 	add	r2,r2,r2
 1028f20:	29400044 	addi	r5,r5,1
 1028f24:	143ffd16 	blt	r2,r16,1028f1c <__alt_data_end+0xfffeba5c>
 1028f28:	9009883a 	mov	r4,r18
 1028f2c:	102875c0 	call	102875c <_Balloc>
 1028f30:	11c00504 	addi	r7,r2,20
 1028f34:	0500090e 	bge	zero,r20,1028f5c <__lshift+0x88>
 1028f38:	3811883a 	mov	r8,r7
 1028f3c:	0007883a 	mov	r3,zero
 1028f40:	40000015 	stw	zero,0(r8)
 1028f44:	18c00044 	addi	r3,r3,1
 1028f48:	42000104 	addi	r8,r8,4
 1028f4c:	1d3ffc1e 	bne	r3,r20,1028f40 <__alt_data_end+0xfffeba80>
 1028f50:	18c7883a 	add	r3,r3,r3
 1028f54:	18c7883a 	add	r3,r3,r3
 1028f58:	38cf883a 	add	r7,r7,r3
 1028f5c:	89000417 	ldw	r4,16(r17)
 1028f60:	88c00504 	addi	r3,r17,20
 1028f64:	a98007cc 	andi	r6,r21,31
 1028f68:	2109883a 	add	r4,r4,r4
 1028f6c:	2109883a 	add	r4,r4,r4
 1028f70:	1909883a 	add	r4,r3,r4
 1028f74:	30002326 	beq	r6,zero,1029004 <__lshift+0x130>
 1028f78:	01400804 	movi	r5,32
 1028f7c:	298bc83a 	sub	r5,r5,r6
 1028f80:	0013883a 	mov	r9,zero
 1028f84:	1a000017 	ldw	r8,0(r3)
 1028f88:	3815883a 	mov	r10,r7
 1028f8c:	39c00104 	addi	r7,r7,4
 1028f90:	4190983a 	sll	r8,r8,r6
 1028f94:	18c00104 	addi	r3,r3,4
 1028f98:	4a10b03a 	or	r8,r9,r8
 1028f9c:	3a3fff15 	stw	r8,-4(r7)
 1028fa0:	1a3fff17 	ldw	r8,-4(r3)
 1028fa4:	4152d83a 	srl	r9,r8,r5
 1028fa8:	193ff636 	bltu	r3,r4,1028f84 <__alt_data_end+0xfffebac4>
 1028fac:	52400115 	stw	r9,4(r10)
 1028fb0:	48000126 	beq	r9,zero,1028fb8 <__lshift+0xe4>
 1028fb4:	9c000084 	addi	r16,r19,2
 1028fb8:	89000117 	ldw	r4,4(r17)
 1028fbc:	90c01317 	ldw	r3,76(r18)
 1028fc0:	843fffc4 	addi	r16,r16,-1
 1028fc4:	2109883a 	add	r4,r4,r4
 1028fc8:	2109883a 	add	r4,r4,r4
 1028fcc:	1907883a 	add	r3,r3,r4
 1028fd0:	19000017 	ldw	r4,0(r3)
 1028fd4:	14000415 	stw	r16,16(r2)
 1028fd8:	89000015 	stw	r4,0(r17)
 1028fdc:	1c400015 	stw	r17,0(r3)
 1028fe0:	dfc00617 	ldw	ra,24(sp)
 1028fe4:	dd400517 	ldw	r21,20(sp)
 1028fe8:	dd000417 	ldw	r20,16(sp)
 1028fec:	dcc00317 	ldw	r19,12(sp)
 1028ff0:	dc800217 	ldw	r18,8(sp)
 1028ff4:	dc400117 	ldw	r17,4(sp)
 1028ff8:	dc000017 	ldw	r16,0(sp)
 1028ffc:	dec00704 	addi	sp,sp,28
 1029000:	f800283a 	ret
 1029004:	19400017 	ldw	r5,0(r3)
 1029008:	39c00104 	addi	r7,r7,4
 102900c:	18c00104 	addi	r3,r3,4
 1029010:	397fff15 	stw	r5,-4(r7)
 1029014:	193ffb36 	bltu	r3,r4,1029004 <__alt_data_end+0xfffebb44>
 1029018:	003fe706 	br	1028fb8 <__alt_data_end+0xfffebaf8>

0102901c <__mcmp>:
 102901c:	20800417 	ldw	r2,16(r4)
 1029020:	28c00417 	ldw	r3,16(r5)
 1029024:	10c5c83a 	sub	r2,r2,r3
 1029028:	1000111e 	bne	r2,zero,1029070 <__mcmp+0x54>
 102902c:	18c7883a 	add	r3,r3,r3
 1029030:	18c7883a 	add	r3,r3,r3
 1029034:	21000504 	addi	r4,r4,20
 1029038:	29400504 	addi	r5,r5,20
 102903c:	20c5883a 	add	r2,r4,r3
 1029040:	28cb883a 	add	r5,r5,r3
 1029044:	00000106 	br	102904c <__mcmp+0x30>
 1029048:	20800a2e 	bgeu	r4,r2,1029074 <__mcmp+0x58>
 102904c:	10bfff04 	addi	r2,r2,-4
 1029050:	297fff04 	addi	r5,r5,-4
 1029054:	11800017 	ldw	r6,0(r2)
 1029058:	28c00017 	ldw	r3,0(r5)
 102905c:	30fffa26 	beq	r6,r3,1029048 <__alt_data_end+0xfffebb88>
 1029060:	30c00236 	bltu	r6,r3,102906c <__mcmp+0x50>
 1029064:	00800044 	movi	r2,1
 1029068:	f800283a 	ret
 102906c:	00bfffc4 	movi	r2,-1
 1029070:	f800283a 	ret
 1029074:	0005883a 	mov	r2,zero
 1029078:	f800283a 	ret

0102907c <__mdiff>:
 102907c:	defffb04 	addi	sp,sp,-20
 1029080:	dc000015 	stw	r16,0(sp)
 1029084:	2821883a 	mov	r16,r5
 1029088:	dcc00315 	stw	r19,12(sp)
 102908c:	300b883a 	mov	r5,r6
 1029090:	2027883a 	mov	r19,r4
 1029094:	8009883a 	mov	r4,r16
 1029098:	dc800215 	stw	r18,8(sp)
 102909c:	dfc00415 	stw	ra,16(sp)
 10290a0:	dc400115 	stw	r17,4(sp)
 10290a4:	3025883a 	mov	r18,r6
 10290a8:	102901c0 	call	102901c <__mcmp>
 10290ac:	10005226 	beq	r2,zero,10291f8 <__mdiff+0x17c>
 10290b0:	10004c16 	blt	r2,zero,10291e4 <__mdiff+0x168>
 10290b4:	0023883a 	mov	r17,zero
 10290b8:	81400117 	ldw	r5,4(r16)
 10290bc:	9809883a 	mov	r4,r19
 10290c0:	102875c0 	call	102875c <_Balloc>
 10290c4:	83400417 	ldw	r13,16(r16)
 10290c8:	93800417 	ldw	r14,16(r18)
 10290cc:	81000504 	addi	r4,r16,20
 10290d0:	6b59883a 	add	r12,r13,r13
 10290d4:	739d883a 	add	r14,r14,r14
 10290d8:	6319883a 	add	r12,r12,r12
 10290dc:	91800504 	addi	r6,r18,20
 10290e0:	739d883a 	add	r14,r14,r14
 10290e4:	14400315 	stw	r17,12(r2)
 10290e8:	2319883a 	add	r12,r4,r12
 10290ec:	339d883a 	add	r14,r6,r14
 10290f0:	12400504 	addi	r9,r2,20
 10290f4:	0007883a 	mov	r3,zero
 10290f8:	22000017 	ldw	r8,0(r4)
 10290fc:	32800017 	ldw	r10,0(r6)
 1029100:	4ac00104 	addi	r11,r9,4
 1029104:	41ffffcc 	andi	r7,r8,65535
 1029108:	38c7883a 	add	r3,r7,r3
 102910c:	51ffffcc 	andi	r7,r10,65535
 1029110:	19cfc83a 	sub	r7,r3,r7
 1029114:	4010d43a 	srli	r8,r8,16
 1029118:	5014d43a 	srli	r10,r10,16
 102911c:	3807d43a 	srai	r3,r7,16
 1029120:	39ffffcc 	andi	r7,r7,65535
 1029124:	4291c83a 	sub	r8,r8,r10
 1029128:	40c7883a 	add	r3,r8,r3
 102912c:	1810943a 	slli	r8,r3,16
 1029130:	31800104 	addi	r6,r6,4
 1029134:	21000104 	addi	r4,r4,4
 1029138:	41ceb03a 	or	r7,r8,r7
 102913c:	49c00015 	stw	r7,0(r9)
 1029140:	1807d43a 	srai	r3,r3,16
 1029144:	580b883a 	mov	r5,r11
 1029148:	5813883a 	mov	r9,r11
 102914c:	33bfea36 	bltu	r6,r14,10290f8 <__alt_data_end+0xfffebc38>
 1029150:	2011883a 	mov	r8,r4
 1029154:	2300152e 	bgeu	r4,r12,10291ac <__mdiff+0x130>
 1029158:	21400017 	ldw	r5,0(r4)
 102915c:	4a400104 	addi	r9,r9,4
 1029160:	21000104 	addi	r4,r4,4
 1029164:	29ffffcc 	andi	r7,r5,65535
 1029168:	38c7883a 	add	r3,r7,r3
 102916c:	280ad43a 	srli	r5,r5,16
 1029170:	180dd43a 	srai	r6,r3,16
 1029174:	19ffffcc 	andi	r7,r3,65535
 1029178:	3147883a 	add	r3,r6,r5
 102917c:	180a943a 	slli	r5,r3,16
 1029180:	1807d43a 	srai	r3,r3,16
 1029184:	29ceb03a 	or	r7,r5,r7
 1029188:	49ffff15 	stw	r7,-4(r9)
 102918c:	233ff236 	bltu	r4,r12,1029158 <__alt_data_end+0xfffebc98>
 1029190:	0206303a 	nor	r3,zero,r8
 1029194:	1b07883a 	add	r3,r3,r12
 1029198:	1806d0ba 	srli	r3,r3,2
 102919c:	18c00044 	addi	r3,r3,1
 10291a0:	18c7883a 	add	r3,r3,r3
 10291a4:	18c7883a 	add	r3,r3,r3
 10291a8:	58cb883a 	add	r5,r11,r3
 10291ac:	28ffff04 	addi	r3,r5,-4
 10291b0:	3800041e 	bne	r7,zero,10291c4 <__mdiff+0x148>
 10291b4:	18ffff04 	addi	r3,r3,-4
 10291b8:	19000017 	ldw	r4,0(r3)
 10291bc:	6b7fffc4 	addi	r13,r13,-1
 10291c0:	203ffc26 	beq	r4,zero,10291b4 <__alt_data_end+0xfffebcf4>
 10291c4:	13400415 	stw	r13,16(r2)
 10291c8:	dfc00417 	ldw	ra,16(sp)
 10291cc:	dcc00317 	ldw	r19,12(sp)
 10291d0:	dc800217 	ldw	r18,8(sp)
 10291d4:	dc400117 	ldw	r17,4(sp)
 10291d8:	dc000017 	ldw	r16,0(sp)
 10291dc:	dec00504 	addi	sp,sp,20
 10291e0:	f800283a 	ret
 10291e4:	8005883a 	mov	r2,r16
 10291e8:	04400044 	movi	r17,1
 10291ec:	9021883a 	mov	r16,r18
 10291f0:	1025883a 	mov	r18,r2
 10291f4:	003fb006 	br	10290b8 <__alt_data_end+0xfffebbf8>
 10291f8:	9809883a 	mov	r4,r19
 10291fc:	000b883a 	mov	r5,zero
 1029200:	102875c0 	call	102875c <_Balloc>
 1029204:	00c00044 	movi	r3,1
 1029208:	10c00415 	stw	r3,16(r2)
 102920c:	10000515 	stw	zero,20(r2)
 1029210:	003fed06 	br	10291c8 <__alt_data_end+0xfffebd08>

01029214 <__ulp>:
 1029214:	295ffc2c 	andhi	r5,r5,32752
 1029218:	00bf3034 	movhi	r2,64704
 102921c:	2887883a 	add	r3,r5,r2
 1029220:	00c0020e 	bge	zero,r3,102922c <__ulp+0x18>
 1029224:	0005883a 	mov	r2,zero
 1029228:	f800283a 	ret
 102922c:	00c7c83a 	sub	r3,zero,r3
 1029230:	180bd53a 	srai	r5,r3,20
 1029234:	008004c4 	movi	r2,19
 1029238:	11400a0e 	bge	r2,r5,1029264 <__ulp+0x50>
 102923c:	00800c84 	movi	r2,50
 1029240:	0007883a 	mov	r3,zero
 1029244:	11400516 	blt	r2,r5,102925c <__ulp+0x48>
 1029248:	00800cc4 	movi	r2,51
 102924c:	114bc83a 	sub	r5,r2,r5
 1029250:	00800044 	movi	r2,1
 1029254:	1144983a 	sll	r2,r2,r5
 1029258:	f800283a 	ret
 102925c:	00800044 	movi	r2,1
 1029260:	f800283a 	ret
 1029264:	00800234 	movhi	r2,8
 1029268:	1147d83a 	sra	r3,r2,r5
 102926c:	0005883a 	mov	r2,zero
 1029270:	f800283a 	ret

01029274 <__b2d>:
 1029274:	defffa04 	addi	sp,sp,-24
 1029278:	dc000015 	stw	r16,0(sp)
 102927c:	24000417 	ldw	r16,16(r4)
 1029280:	dc400115 	stw	r17,4(sp)
 1029284:	24400504 	addi	r17,r4,20
 1029288:	8421883a 	add	r16,r16,r16
 102928c:	8421883a 	add	r16,r16,r16
 1029290:	8c21883a 	add	r16,r17,r16
 1029294:	dc800215 	stw	r18,8(sp)
 1029298:	84bfff17 	ldw	r18,-4(r16)
 102929c:	dd000415 	stw	r20,16(sp)
 10292a0:	dcc00315 	stw	r19,12(sp)
 10292a4:	9009883a 	mov	r4,r18
 10292a8:	2829883a 	mov	r20,r5
 10292ac:	dfc00515 	stw	ra,20(sp)
 10292b0:	1028a440 	call	1028a44 <__hi0bits>
 10292b4:	00c00804 	movi	r3,32
 10292b8:	1887c83a 	sub	r3,r3,r2
 10292bc:	a0c00015 	stw	r3,0(r20)
 10292c0:	00c00284 	movi	r3,10
 10292c4:	84ffff04 	addi	r19,r16,-4
 10292c8:	18801216 	blt	r3,r2,1029314 <__b2d+0xa0>
 10292cc:	014002c4 	movi	r5,11
 10292d0:	2889c83a 	sub	r4,r5,r2
 10292d4:	9106d83a 	srl	r3,r18,r4
 10292d8:	18cffc34 	orhi	r3,r3,16368
 10292dc:	8cc0282e 	bgeu	r17,r19,1029380 <__b2d+0x10c>
 10292e0:	817ffe17 	ldw	r5,-8(r16)
 10292e4:	290ad83a 	srl	r5,r5,r4
 10292e8:	10800544 	addi	r2,r2,21
 10292ec:	9084983a 	sll	r2,r18,r2
 10292f0:	2884b03a 	or	r2,r5,r2
 10292f4:	dfc00517 	ldw	ra,20(sp)
 10292f8:	dd000417 	ldw	r20,16(sp)
 10292fc:	dcc00317 	ldw	r19,12(sp)
 1029300:	dc800217 	ldw	r18,8(sp)
 1029304:	dc400117 	ldw	r17,4(sp)
 1029308:	dc000017 	ldw	r16,0(sp)
 102930c:	dec00604 	addi	sp,sp,24
 1029310:	f800283a 	ret
 1029314:	113ffd44 	addi	r4,r2,-11
 1029318:	8cc00f2e 	bgeu	r17,r19,1029358 <__b2d+0xe4>
 102931c:	81bffe04 	addi	r6,r16,-8
 1029320:	817ffe17 	ldw	r5,-8(r16)
 1029324:	20001326 	beq	r4,zero,1029374 <__b2d+0x100>
 1029328:	00c00ac4 	movi	r3,43
 102932c:	1885c83a 	sub	r2,r3,r2
 1029330:	2886d83a 	srl	r3,r5,r2
 1029334:	9124983a 	sll	r18,r18,r4
 1029338:	90e4b03a 	or	r18,r18,r3
 102933c:	90cffc34 	orhi	r3,r18,16368
 1029340:	8980112e 	bgeu	r17,r6,1029388 <__b2d+0x114>
 1029344:	81bffd17 	ldw	r6,-12(r16)
 1029348:	308cd83a 	srl	r6,r6,r2
 102934c:	2904983a 	sll	r2,r5,r4
 1029350:	1184b03a 	or	r2,r2,r6
 1029354:	003fe706 	br	10292f4 <__alt_data_end+0xfffebe34>
 1029358:	20000526 	beq	r4,zero,1029370 <__b2d+0xfc>
 102935c:	9124983a 	sll	r18,r18,r4
 1029360:	000d883a 	mov	r6,zero
 1029364:	000b883a 	mov	r5,zero
 1029368:	90cffc34 	orhi	r3,r18,16368
 102936c:	003ff706 	br	102934c <__alt_data_end+0xfffebe8c>
 1029370:	000b883a 	mov	r5,zero
 1029374:	90cffc34 	orhi	r3,r18,16368
 1029378:	2805883a 	mov	r2,r5
 102937c:	003fdd06 	br	10292f4 <__alt_data_end+0xfffebe34>
 1029380:	000b883a 	mov	r5,zero
 1029384:	003fd806 	br	10292e8 <__alt_data_end+0xfffebe28>
 1029388:	000d883a 	mov	r6,zero
 102938c:	003fef06 	br	102934c <__alt_data_end+0xfffebe8c>

01029390 <__d2b>:
 1029390:	defff704 	addi	sp,sp,-36
 1029394:	dc000215 	stw	r16,8(sp)
 1029398:	3021883a 	mov	r16,r6
 102939c:	dc400315 	stw	r17,12(sp)
 10293a0:	8022907a 	slli	r17,r16,1
 10293a4:	dd400715 	stw	r21,28(sp)
 10293a8:	282b883a 	mov	r21,r5
 10293ac:	01400044 	movi	r5,1
 10293b0:	dd000615 	stw	r20,24(sp)
 10293b4:	dcc00515 	stw	r19,20(sp)
 10293b8:	dc800415 	stw	r18,16(sp)
 10293bc:	dfc00815 	stw	ra,32(sp)
 10293c0:	3829883a 	mov	r20,r7
 10293c4:	dc800917 	ldw	r18,36(sp)
 10293c8:	8822d57a 	srli	r17,r17,21
 10293cc:	102875c0 	call	102875c <_Balloc>
 10293d0:	1027883a 	mov	r19,r2
 10293d4:	00800434 	movhi	r2,16
 10293d8:	10bfffc4 	addi	r2,r2,-1
 10293dc:	808c703a 	and	r6,r16,r2
 10293e0:	88000126 	beq	r17,zero,10293e8 <__d2b+0x58>
 10293e4:	31800434 	orhi	r6,r6,16
 10293e8:	d9800015 	stw	r6,0(sp)
 10293ec:	a8001f26 	beq	r21,zero,102946c <__d2b+0xdc>
 10293f0:	d9000104 	addi	r4,sp,4
 10293f4:	dd400115 	stw	r21,4(sp)
 10293f8:	1028aac0 	call	1028aac <__lo0bits>
 10293fc:	d8c00017 	ldw	r3,0(sp)
 1029400:	1000291e 	bne	r2,zero,10294a8 <__d2b+0x118>
 1029404:	d9000117 	ldw	r4,4(sp)
 1029408:	99000515 	stw	r4,20(r19)
 102940c:	1820c03a 	cmpne	r16,r3,zero
 1029410:	84000044 	addi	r16,r16,1
 1029414:	98c00615 	stw	r3,24(r19)
 1029418:	9c000415 	stw	r16,16(r19)
 102941c:	88001b1e 	bne	r17,zero,102948c <__d2b+0xfc>
 1029420:	800690ba 	slli	r3,r16,2
 1029424:	10bef384 	addi	r2,r2,-1074
 1029428:	a0800015 	stw	r2,0(r20)
 102942c:	98c5883a 	add	r2,r19,r3
 1029430:	11000417 	ldw	r4,16(r2)
 1029434:	8020917a 	slli	r16,r16,5
 1029438:	1028a440 	call	1028a44 <__hi0bits>
 102943c:	8085c83a 	sub	r2,r16,r2
 1029440:	90800015 	stw	r2,0(r18)
 1029444:	9805883a 	mov	r2,r19
 1029448:	dfc00817 	ldw	ra,32(sp)
 102944c:	dd400717 	ldw	r21,28(sp)
 1029450:	dd000617 	ldw	r20,24(sp)
 1029454:	dcc00517 	ldw	r19,20(sp)
 1029458:	dc800417 	ldw	r18,16(sp)
 102945c:	dc400317 	ldw	r17,12(sp)
 1029460:	dc000217 	ldw	r16,8(sp)
 1029464:	dec00904 	addi	sp,sp,36
 1029468:	f800283a 	ret
 102946c:	d809883a 	mov	r4,sp
 1029470:	1028aac0 	call	1028aac <__lo0bits>
 1029474:	d8c00017 	ldw	r3,0(sp)
 1029478:	04000044 	movi	r16,1
 102947c:	9c000415 	stw	r16,16(r19)
 1029480:	98c00515 	stw	r3,20(r19)
 1029484:	10800804 	addi	r2,r2,32
 1029488:	883fe526 	beq	r17,zero,1029420 <__alt_data_end+0xfffebf60>
 102948c:	8c7ef344 	addi	r17,r17,-1075
 1029490:	88a3883a 	add	r17,r17,r2
 1029494:	00c00d44 	movi	r3,53
 1029498:	a4400015 	stw	r17,0(r20)
 102949c:	1885c83a 	sub	r2,r3,r2
 10294a0:	90800015 	stw	r2,0(r18)
 10294a4:	003fe706 	br	1029444 <__alt_data_end+0xfffebf84>
 10294a8:	01000804 	movi	r4,32
 10294ac:	2089c83a 	sub	r4,r4,r2
 10294b0:	1908983a 	sll	r4,r3,r4
 10294b4:	d9400117 	ldw	r5,4(sp)
 10294b8:	1886d83a 	srl	r3,r3,r2
 10294bc:	2148b03a 	or	r4,r4,r5
 10294c0:	99000515 	stw	r4,20(r19)
 10294c4:	d8c00015 	stw	r3,0(sp)
 10294c8:	003fd006 	br	102940c <__alt_data_end+0xfffebf4c>

010294cc <__ratio>:
 10294cc:	defff904 	addi	sp,sp,-28
 10294d0:	dc400315 	stw	r17,12(sp)
 10294d4:	2823883a 	mov	r17,r5
 10294d8:	d9400104 	addi	r5,sp,4
 10294dc:	dfc00615 	stw	ra,24(sp)
 10294e0:	dcc00515 	stw	r19,20(sp)
 10294e4:	dc800415 	stw	r18,16(sp)
 10294e8:	2027883a 	mov	r19,r4
 10294ec:	dc000215 	stw	r16,8(sp)
 10294f0:	10292740 	call	1029274 <__b2d>
 10294f4:	8809883a 	mov	r4,r17
 10294f8:	d80b883a 	mov	r5,sp
 10294fc:	1025883a 	mov	r18,r2
 1029500:	1821883a 	mov	r16,r3
 1029504:	10292740 	call	1029274 <__b2d>
 1029508:	8a400417 	ldw	r9,16(r17)
 102950c:	9a000417 	ldw	r8,16(r19)
 1029510:	100d883a 	mov	r6,r2
 1029514:	d8800017 	ldw	r2,0(sp)
 1029518:	4251c83a 	sub	r8,r8,r9
 102951c:	4012917a 	slli	r9,r8,5
 1029520:	da000117 	ldw	r8,4(sp)
 1029524:	4091c83a 	sub	r8,r8,r2
 1029528:	4251883a 	add	r8,r8,r9
 102952c:	02000d0e 	bge	zero,r8,1029564 <__ratio+0x98>
 1029530:	4010953a 	slli	r8,r8,20
 1029534:	4421883a 	add	r16,r8,r16
 1029538:	9009883a 	mov	r4,r18
 102953c:	800b883a 	mov	r5,r16
 1029540:	180f883a 	mov	r7,r3
 1029544:	10217f00 	call	10217f0 <__divdf3>
 1029548:	dfc00617 	ldw	ra,24(sp)
 102954c:	dcc00517 	ldw	r19,20(sp)
 1029550:	dc800417 	ldw	r18,16(sp)
 1029554:	dc400317 	ldw	r17,12(sp)
 1029558:	dc000217 	ldw	r16,8(sp)
 102955c:	dec00704 	addi	sp,sp,28
 1029560:	f800283a 	ret
 1029564:	4010953a 	slli	r8,r8,20
 1029568:	1a07c83a 	sub	r3,r3,r8
 102956c:	003ff206 	br	1029538 <__alt_data_end+0xfffec078>

01029570 <_mprec_log10>:
 1029570:	defffe04 	addi	sp,sp,-8
 1029574:	dc000015 	stw	r16,0(sp)
 1029578:	dfc00115 	stw	ra,4(sp)
 102957c:	008005c4 	movi	r2,23
 1029580:	2021883a 	mov	r16,r4
 1029584:	11000d0e 	bge	r2,r4,10295bc <_mprec_log10+0x4c>
 1029588:	0005883a 	mov	r2,zero
 102958c:	00cffc34 	movhi	r3,16368
 1029590:	843fffc4 	addi	r16,r16,-1
 1029594:	1009883a 	mov	r4,r2
 1029598:	180b883a 	mov	r5,r3
 102959c:	000d883a 	mov	r6,zero
 10295a0:	01d00934 	movhi	r7,16420
 10295a4:	10220bc0 	call	10220bc <__muldf3>
 10295a8:	803ff91e 	bne	r16,zero,1029590 <__alt_data_end+0xfffec0d0>
 10295ac:	dfc00117 	ldw	ra,4(sp)
 10295b0:	dc000017 	ldw	r16,0(sp)
 10295b4:	dec00204 	addi	sp,sp,8
 10295b8:	f800283a 	ret
 10295bc:	202090fa 	slli	r16,r4,3
 10295c0:	008040f4 	movhi	r2,259
 10295c4:	1082c404 	addi	r2,r2,2832
 10295c8:	1421883a 	add	r16,r2,r16
 10295cc:	80800017 	ldw	r2,0(r16)
 10295d0:	80c00117 	ldw	r3,4(r16)
 10295d4:	dfc00117 	ldw	ra,4(sp)
 10295d8:	dc000017 	ldw	r16,0(sp)
 10295dc:	dec00204 	addi	sp,sp,8
 10295e0:	f800283a 	ret

010295e4 <__copybits>:
 10295e4:	297fffc4 	addi	r5,r5,-1
 10295e8:	280fd17a 	srai	r7,r5,5
 10295ec:	30c00417 	ldw	r3,16(r6)
 10295f0:	30800504 	addi	r2,r6,20
 10295f4:	39c00044 	addi	r7,r7,1
 10295f8:	18c7883a 	add	r3,r3,r3
 10295fc:	39cf883a 	add	r7,r7,r7
 1029600:	18c7883a 	add	r3,r3,r3
 1029604:	39cf883a 	add	r7,r7,r7
 1029608:	10c7883a 	add	r3,r2,r3
 102960c:	21cf883a 	add	r7,r4,r7
 1029610:	10c00d2e 	bgeu	r2,r3,1029648 <__copybits+0x64>
 1029614:	200b883a 	mov	r5,r4
 1029618:	12000017 	ldw	r8,0(r2)
 102961c:	29400104 	addi	r5,r5,4
 1029620:	10800104 	addi	r2,r2,4
 1029624:	2a3fff15 	stw	r8,-4(r5)
 1029628:	10fffb36 	bltu	r2,r3,1029618 <__alt_data_end+0xfffec158>
 102962c:	1985c83a 	sub	r2,r3,r6
 1029630:	10bffac4 	addi	r2,r2,-21
 1029634:	1004d0ba 	srli	r2,r2,2
 1029638:	10800044 	addi	r2,r2,1
 102963c:	1085883a 	add	r2,r2,r2
 1029640:	1085883a 	add	r2,r2,r2
 1029644:	2089883a 	add	r4,r4,r2
 1029648:	21c0032e 	bgeu	r4,r7,1029658 <__copybits+0x74>
 102964c:	20000015 	stw	zero,0(r4)
 1029650:	21000104 	addi	r4,r4,4
 1029654:	21fffd36 	bltu	r4,r7,102964c <__alt_data_end+0xfffec18c>
 1029658:	f800283a 	ret

0102965c <__any_on>:
 102965c:	20c00417 	ldw	r3,16(r4)
 1029660:	2805d17a 	srai	r2,r5,5
 1029664:	21000504 	addi	r4,r4,20
 1029668:	18800d0e 	bge	r3,r2,10296a0 <__any_on+0x44>
 102966c:	18c7883a 	add	r3,r3,r3
 1029670:	18c7883a 	add	r3,r3,r3
 1029674:	20c7883a 	add	r3,r4,r3
 1029678:	20c0192e 	bgeu	r4,r3,10296e0 <__any_on+0x84>
 102967c:	18bfff17 	ldw	r2,-4(r3)
 1029680:	18ffff04 	addi	r3,r3,-4
 1029684:	1000041e 	bne	r2,zero,1029698 <__any_on+0x3c>
 1029688:	20c0142e 	bgeu	r4,r3,10296dc <__any_on+0x80>
 102968c:	18ffff04 	addi	r3,r3,-4
 1029690:	19400017 	ldw	r5,0(r3)
 1029694:	283ffc26 	beq	r5,zero,1029688 <__alt_data_end+0xfffec1c8>
 1029698:	00800044 	movi	r2,1
 102969c:	f800283a 	ret
 10296a0:	10c00a0e 	bge	r2,r3,10296cc <__any_on+0x70>
 10296a4:	1085883a 	add	r2,r2,r2
 10296a8:	1085883a 	add	r2,r2,r2
 10296ac:	294007cc 	andi	r5,r5,31
 10296b0:	2087883a 	add	r3,r4,r2
 10296b4:	283ff026 	beq	r5,zero,1029678 <__alt_data_end+0xfffec1b8>
 10296b8:	19800017 	ldw	r6,0(r3)
 10296bc:	3144d83a 	srl	r2,r6,r5
 10296c0:	114a983a 	sll	r5,r2,r5
 10296c4:	29bff41e 	bne	r5,r6,1029698 <__alt_data_end+0xfffec1d8>
 10296c8:	003feb06 	br	1029678 <__alt_data_end+0xfffec1b8>
 10296cc:	1085883a 	add	r2,r2,r2
 10296d0:	1085883a 	add	r2,r2,r2
 10296d4:	2087883a 	add	r3,r4,r2
 10296d8:	003fe706 	br	1029678 <__alt_data_end+0xfffec1b8>
 10296dc:	f800283a 	ret
 10296e0:	0005883a 	mov	r2,zero
 10296e4:	f800283a 	ret

010296e8 <_realloc_r>:
 10296e8:	defff604 	addi	sp,sp,-40
 10296ec:	dcc00315 	stw	r19,12(sp)
 10296f0:	dc400115 	stw	r17,4(sp)
 10296f4:	dfc00915 	stw	ra,36(sp)
 10296f8:	df000815 	stw	fp,32(sp)
 10296fc:	ddc00715 	stw	r23,28(sp)
 1029700:	dd800615 	stw	r22,24(sp)
 1029704:	dd400515 	stw	r21,20(sp)
 1029708:	dd000415 	stw	r20,16(sp)
 102970c:	dc800215 	stw	r18,8(sp)
 1029710:	dc000015 	stw	r16,0(sp)
 1029714:	2827883a 	mov	r19,r5
 1029718:	3023883a 	mov	r17,r6
 102971c:	2800bf26 	beq	r5,zero,1029a1c <_realloc_r+0x334>
 1029720:	2025883a 	mov	r18,r4
 1029724:	102e3b80 	call	102e3b8 <__malloc_lock>
 1029728:	98ffff17 	ldw	r3,-4(r19)
 102972c:	01bfff04 	movi	r6,-4
 1029730:	890002c4 	addi	r4,r17,11
 1029734:	01c00584 	movi	r7,22
 1029738:	9d7ffe04 	addi	r21,r19,-8
 102973c:	19a0703a 	and	r16,r3,r6
 1029740:	39003f2e 	bgeu	r7,r4,1029840 <_realloc_r+0x158>
 1029744:	053ffe04 	movi	r20,-8
 1029748:	2528703a 	and	r20,r4,r20
 102974c:	a00f883a 	mov	r7,r20
 1029750:	a0008216 	blt	r20,zero,102995c <_realloc_r+0x274>
 1029754:	a4408136 	bltu	r20,r17,102995c <_realloc_r+0x274>
 1029758:	81c03c0e 	bge	r16,r7,102984c <_realloc_r+0x164>
 102975c:	070040f4 	movhi	fp,259
 1029760:	e7043004 	addi	fp,fp,4288
 1029764:	e1000217 	ldw	r4,8(fp)
 1029768:	ac05883a 	add	r2,r21,r16
 102976c:	2080bf26 	beq	r4,r2,1029a6c <_realloc_r+0x384>
 1029770:	11000117 	ldw	r4,4(r2)
 1029774:	023fff84 	movi	r8,-2
 1029778:	2210703a 	and	r8,r4,r8
 102977c:	1211883a 	add	r8,r2,r8
 1029780:	41400117 	ldw	r5,4(r8)
 1029784:	2940004c 	andi	r5,r5,1
 1029788:	28004a1e 	bne	r5,zero,10298b4 <_realloc_r+0x1cc>
 102978c:	017fff04 	movi	r5,-4
 1029790:	2148703a 	and	r4,r4,r5
 1029794:	2409883a 	add	r4,r4,r16
 1029798:	21c0ad0e 	bge	r4,r7,1029a50 <_realloc_r+0x368>
 102979c:	18c0004c 	andi	r3,r3,1
 10297a0:	18007f1e 	bne	r3,zero,10299a0 <_realloc_r+0x2b8>
 10297a4:	9dfffe17 	ldw	r23,-8(r19)
 10297a8:	adefc83a 	sub	r23,r21,r23
 10297ac:	bd800117 	ldw	r22,4(r23)
 10297b0:	b14a703a 	and	r5,r22,r5
 10297b4:	216d883a 	add	r22,r4,r5
 10297b8:	b1c04516 	blt	r22,r7,10298d0 <_realloc_r+0x1e8>
 10297bc:	10c00317 	ldw	r3,12(r2)
 10297c0:	10800217 	ldw	r2,8(r2)
 10297c4:	81bfff04 	addi	r6,r16,-4
 10297c8:	bc400204 	addi	r17,r23,8
 10297cc:	10c00315 	stw	r3,12(r2)
 10297d0:	18800215 	stw	r2,8(r3)
 10297d4:	b9400217 	ldw	r5,8(r23)
 10297d8:	b8c00317 	ldw	r3,12(r23)
 10297dc:	00800904 	movi	r2,36
 10297e0:	28c00315 	stw	r3,12(r5)
 10297e4:	19400215 	stw	r5,8(r3)
 10297e8:	1180ef36 	bltu	r2,r6,1029ba8 <_realloc_r+0x4c0>
 10297ec:	008004c4 	movi	r2,19
 10297f0:	1180da2e 	bgeu	r2,r6,1029b5c <_realloc_r+0x474>
 10297f4:	98800017 	ldw	r2,0(r19)
 10297f8:	b8800215 	stw	r2,8(r23)
 10297fc:	98800117 	ldw	r2,4(r19)
 1029800:	b8800315 	stw	r2,12(r23)
 1029804:	008006c4 	movi	r2,27
 1029808:	1180fc2e 	bgeu	r2,r6,1029bfc <_realloc_r+0x514>
 102980c:	98800217 	ldw	r2,8(r19)
 1029810:	b8800415 	stw	r2,16(r23)
 1029814:	98800317 	ldw	r2,12(r19)
 1029818:	b8800515 	stw	r2,20(r23)
 102981c:	00800904 	movi	r2,36
 1029820:	3080421e 	bne	r6,r2,102992c <_realloc_r+0x244>
 1029824:	98800417 	ldw	r2,16(r19)
 1029828:	9cc00604 	addi	r19,r19,24
 102982c:	b8c00804 	addi	r3,r23,32
 1029830:	b8800615 	stw	r2,24(r23)
 1029834:	98bfff17 	ldw	r2,-4(r19)
 1029838:	b8800715 	stw	r2,28(r23)
 102983c:	00003d06 	br	1029934 <_realloc_r+0x24c>
 1029840:	01c00404 	movi	r7,16
 1029844:	3829883a 	mov	r20,r7
 1029848:	003fc206 	br	1029754 <__alt_data_end+0xfffec294>
 102984c:	9823883a 	mov	r17,r19
 1029850:	850fc83a 	sub	r7,r16,r20
 1029854:	008003c4 	movi	r2,15
 1029858:	18c0004c 	andi	r3,r3,1
 102985c:	11c04336 	bltu	r2,r7,102996c <_realloc_r+0x284>
 1029860:	1c06b03a 	or	r3,r3,r16
 1029864:	a8c00115 	stw	r3,4(r21)
 1029868:	ac21883a 	add	r16,r21,r16
 102986c:	80c00117 	ldw	r3,4(r16)
 1029870:	18c00054 	ori	r3,r3,1
 1029874:	80c00115 	stw	r3,4(r16)
 1029878:	9009883a 	mov	r4,r18
 102987c:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1029880:	8805883a 	mov	r2,r17
 1029884:	dfc00917 	ldw	ra,36(sp)
 1029888:	df000817 	ldw	fp,32(sp)
 102988c:	ddc00717 	ldw	r23,28(sp)
 1029890:	dd800617 	ldw	r22,24(sp)
 1029894:	dd400517 	ldw	r21,20(sp)
 1029898:	dd000417 	ldw	r20,16(sp)
 102989c:	dcc00317 	ldw	r19,12(sp)
 10298a0:	dc800217 	ldw	r18,8(sp)
 10298a4:	dc400117 	ldw	r17,4(sp)
 10298a8:	dc000017 	ldw	r16,0(sp)
 10298ac:	dec00a04 	addi	sp,sp,40
 10298b0:	f800283a 	ret
 10298b4:	18c0004c 	andi	r3,r3,1
 10298b8:	1800391e 	bne	r3,zero,10299a0 <_realloc_r+0x2b8>
 10298bc:	9dfffe17 	ldw	r23,-8(r19)
 10298c0:	00bfff04 	movi	r2,-4
 10298c4:	adefc83a 	sub	r23,r21,r23
 10298c8:	b9400117 	ldw	r5,4(r23)
 10298cc:	288a703a 	and	r5,r5,r2
 10298d0:	2c2d883a 	add	r22,r5,r16
 10298d4:	b1c03216 	blt	r22,r7,10299a0 <_realloc_r+0x2b8>
 10298d8:	b8800317 	ldw	r2,12(r23)
 10298dc:	b8c00217 	ldw	r3,8(r23)
 10298e0:	81bfff04 	addi	r6,r16,-4
 10298e4:	01000904 	movi	r4,36
 10298e8:	18800315 	stw	r2,12(r3)
 10298ec:	10c00215 	stw	r3,8(r2)
 10298f0:	bc400204 	addi	r17,r23,8
 10298f4:	2180ac36 	bltu	r4,r6,1029ba8 <_realloc_r+0x4c0>
 10298f8:	008004c4 	movi	r2,19
 10298fc:	1180972e 	bgeu	r2,r6,1029b5c <_realloc_r+0x474>
 1029900:	98800017 	ldw	r2,0(r19)
 1029904:	b8800215 	stw	r2,8(r23)
 1029908:	98800117 	ldw	r2,4(r19)
 102990c:	b8800315 	stw	r2,12(r23)
 1029910:	008006c4 	movi	r2,27
 1029914:	1180b92e 	bgeu	r2,r6,1029bfc <_realloc_r+0x514>
 1029918:	98800217 	ldw	r2,8(r19)
 102991c:	b8800415 	stw	r2,16(r23)
 1029920:	98800317 	ldw	r2,12(r19)
 1029924:	b8800515 	stw	r2,20(r23)
 1029928:	313fbe26 	beq	r6,r4,1029824 <__alt_data_end+0xfffec364>
 102992c:	b8c00604 	addi	r3,r23,24
 1029930:	9cc00404 	addi	r19,r19,16
 1029934:	98800017 	ldw	r2,0(r19)
 1029938:	b021883a 	mov	r16,r22
 102993c:	b82b883a 	mov	r21,r23
 1029940:	18800015 	stw	r2,0(r3)
 1029944:	98800117 	ldw	r2,4(r19)
 1029948:	18800115 	stw	r2,4(r3)
 102994c:	98800217 	ldw	r2,8(r19)
 1029950:	18800215 	stw	r2,8(r3)
 1029954:	b8c00117 	ldw	r3,4(r23)
 1029958:	003fbd06 	br	1029850 <__alt_data_end+0xfffec390>
 102995c:	00800304 	movi	r2,12
 1029960:	90800015 	stw	r2,0(r18)
 1029964:	0005883a 	mov	r2,zero
 1029968:	003fc606 	br	1029884 <__alt_data_end+0xfffec3c4>
 102996c:	1d06b03a 	or	r3,r3,r20
 1029970:	ad0b883a 	add	r5,r21,r20
 1029974:	a8c00115 	stw	r3,4(r21)
 1029978:	38800054 	ori	r2,r7,1
 102997c:	28800115 	stw	r2,4(r5)
 1029980:	29cf883a 	add	r7,r5,r7
 1029984:	38800117 	ldw	r2,4(r7)
 1029988:	9009883a 	mov	r4,r18
 102998c:	29400204 	addi	r5,r5,8
 1029990:	10800054 	ori	r2,r2,1
 1029994:	38800115 	stw	r2,4(r7)
 1029998:	1026f780 	call	1026f78 <_free_r>
 102999c:	003fb606 	br	1029878 <__alt_data_end+0xfffec3b8>
 10299a0:	880b883a 	mov	r5,r17
 10299a4:	9009883a 	mov	r4,r18
 10299a8:	1027b140 	call	1027b14 <_malloc_r>
 10299ac:	1023883a 	mov	r17,r2
 10299b0:	1000aa26 	beq	r2,zero,1029c5c <_realloc_r+0x574>
 10299b4:	98ffff17 	ldw	r3,-4(r19)
 10299b8:	113ffe04 	addi	r4,r2,-8
 10299bc:	00bfff84 	movi	r2,-2
 10299c0:	1884703a 	and	r2,r3,r2
 10299c4:	a885883a 	add	r2,r21,r2
 10299c8:	20808626 	beq	r4,r2,1029be4 <_realloc_r+0x4fc>
 10299cc:	81bfff04 	addi	r6,r16,-4
 10299d0:	00800904 	movi	r2,36
 10299d4:	11807036 	bltu	r2,r6,1029b98 <_realloc_r+0x4b0>
 10299d8:	00c004c4 	movi	r3,19
 10299dc:	19805636 	bltu	r3,r6,1029b38 <_realloc_r+0x450>
 10299e0:	8805883a 	mov	r2,r17
 10299e4:	9807883a 	mov	r3,r19
 10299e8:	19000017 	ldw	r4,0(r3)
 10299ec:	11000015 	stw	r4,0(r2)
 10299f0:	19000117 	ldw	r4,4(r3)
 10299f4:	11000115 	stw	r4,4(r2)
 10299f8:	18c00217 	ldw	r3,8(r3)
 10299fc:	10c00215 	stw	r3,8(r2)
 1029a00:	980b883a 	mov	r5,r19
 1029a04:	9009883a 	mov	r4,r18
 1029a08:	1026f780 	call	1026f78 <_free_r>
 1029a0c:	9009883a 	mov	r4,r18
 1029a10:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1029a14:	8805883a 	mov	r2,r17
 1029a18:	003f9a06 	br	1029884 <__alt_data_end+0xfffec3c4>
 1029a1c:	300b883a 	mov	r5,r6
 1029a20:	dfc00917 	ldw	ra,36(sp)
 1029a24:	df000817 	ldw	fp,32(sp)
 1029a28:	ddc00717 	ldw	r23,28(sp)
 1029a2c:	dd800617 	ldw	r22,24(sp)
 1029a30:	dd400517 	ldw	r21,20(sp)
 1029a34:	dd000417 	ldw	r20,16(sp)
 1029a38:	dcc00317 	ldw	r19,12(sp)
 1029a3c:	dc800217 	ldw	r18,8(sp)
 1029a40:	dc400117 	ldw	r17,4(sp)
 1029a44:	dc000017 	ldw	r16,0(sp)
 1029a48:	dec00a04 	addi	sp,sp,40
 1029a4c:	1027b141 	jmpi	1027b14 <_malloc_r>
 1029a50:	11400317 	ldw	r5,12(r2)
 1029a54:	10800217 	ldw	r2,8(r2)
 1029a58:	9823883a 	mov	r17,r19
 1029a5c:	2021883a 	mov	r16,r4
 1029a60:	11400315 	stw	r5,12(r2)
 1029a64:	28800215 	stw	r2,8(r5)
 1029a68:	003f7906 	br	1029850 <__alt_data_end+0xfffec390>
 1029a6c:	21000117 	ldw	r4,4(r4)
 1029a70:	00bfff04 	movi	r2,-4
 1029a74:	a1800404 	addi	r6,r20,16
 1029a78:	2088703a 	and	r4,r4,r2
 1029a7c:	2409883a 	add	r4,r4,r16
 1029a80:	2180380e 	bge	r4,r6,1029b64 <_realloc_r+0x47c>
 1029a84:	18c0004c 	andi	r3,r3,1
 1029a88:	183fc51e 	bne	r3,zero,10299a0 <__alt_data_end+0xfffec4e0>
 1029a8c:	9dfffe17 	ldw	r23,-8(r19)
 1029a90:	adefc83a 	sub	r23,r21,r23
 1029a94:	b9400117 	ldw	r5,4(r23)
 1029a98:	288a703a 	and	r5,r5,r2
 1029a9c:	216d883a 	add	r22,r4,r5
 1029aa0:	b1bf8b16 	blt	r22,r6,10298d0 <__alt_data_end+0xfffec410>
 1029aa4:	b8800317 	ldw	r2,12(r23)
 1029aa8:	b8c00217 	ldw	r3,8(r23)
 1029aac:	81bfff04 	addi	r6,r16,-4
 1029ab0:	01000904 	movi	r4,36
 1029ab4:	18800315 	stw	r2,12(r3)
 1029ab8:	10c00215 	stw	r3,8(r2)
 1029abc:	bc400204 	addi	r17,r23,8
 1029ac0:	21805a36 	bltu	r4,r6,1029c2c <_realloc_r+0x544>
 1029ac4:	008004c4 	movi	r2,19
 1029ac8:	1180562e 	bgeu	r2,r6,1029c24 <_realloc_r+0x53c>
 1029acc:	98800017 	ldw	r2,0(r19)
 1029ad0:	b8800215 	stw	r2,8(r23)
 1029ad4:	98800117 	ldw	r2,4(r19)
 1029ad8:	b8800315 	stw	r2,12(r23)
 1029adc:	008006c4 	movi	r2,27
 1029ae0:	11805636 	bltu	r2,r6,1029c3c <_realloc_r+0x554>
 1029ae4:	b8800404 	addi	r2,r23,16
 1029ae8:	9cc00204 	addi	r19,r19,8
 1029aec:	98c00017 	ldw	r3,0(r19)
 1029af0:	10c00015 	stw	r3,0(r2)
 1029af4:	98c00117 	ldw	r3,4(r19)
 1029af8:	10c00115 	stw	r3,4(r2)
 1029afc:	98c00217 	ldw	r3,8(r19)
 1029b00:	10c00215 	stw	r3,8(r2)
 1029b04:	bd07883a 	add	r3,r23,r20
 1029b08:	b505c83a 	sub	r2,r22,r20
 1029b0c:	e0c00215 	stw	r3,8(fp)
 1029b10:	10800054 	ori	r2,r2,1
 1029b14:	18800115 	stw	r2,4(r3)
 1029b18:	b8800117 	ldw	r2,4(r23)
 1029b1c:	9009883a 	mov	r4,r18
 1029b20:	1080004c 	andi	r2,r2,1
 1029b24:	a0a8b03a 	or	r20,r20,r2
 1029b28:	bd000115 	stw	r20,4(r23)
 1029b2c:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1029b30:	8805883a 	mov	r2,r17
 1029b34:	003f5306 	br	1029884 <__alt_data_end+0xfffec3c4>
 1029b38:	98c00017 	ldw	r3,0(r19)
 1029b3c:	88c00015 	stw	r3,0(r17)
 1029b40:	98c00117 	ldw	r3,4(r19)
 1029b44:	88c00115 	stw	r3,4(r17)
 1029b48:	00c006c4 	movi	r3,27
 1029b4c:	19801d36 	bltu	r3,r6,1029bc4 <_realloc_r+0x4dc>
 1029b50:	88800204 	addi	r2,r17,8
 1029b54:	98c00204 	addi	r3,r19,8
 1029b58:	003fa306 	br	10299e8 <__alt_data_end+0xfffec528>
 1029b5c:	8807883a 	mov	r3,r17
 1029b60:	003f7406 	br	1029934 <__alt_data_end+0xfffec474>
 1029b64:	ad2b883a 	add	r21,r21,r20
 1029b68:	2505c83a 	sub	r2,r4,r20
 1029b6c:	e5400215 	stw	r21,8(fp)
 1029b70:	10800054 	ori	r2,r2,1
 1029b74:	a8800115 	stw	r2,4(r21)
 1029b78:	98bfff17 	ldw	r2,-4(r19)
 1029b7c:	9009883a 	mov	r4,r18
 1029b80:	1080004c 	andi	r2,r2,1
 1029b84:	a0a8b03a 	or	r20,r20,r2
 1029b88:	9d3fff15 	stw	r20,-4(r19)
 1029b8c:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1029b90:	9805883a 	mov	r2,r19
 1029b94:	003f3b06 	br	1029884 <__alt_data_end+0xfffec3c4>
 1029b98:	8809883a 	mov	r4,r17
 1029b9c:	980b883a 	mov	r5,r19
 1029ba0:	10284dc0 	call	10284dc <memmove>
 1029ba4:	003f9606 	br	1029a00 <__alt_data_end+0xfffec540>
 1029ba8:	8809883a 	mov	r4,r17
 1029bac:	980b883a 	mov	r5,r19
 1029bb0:	10284dc0 	call	10284dc <memmove>
 1029bb4:	b8c00117 	ldw	r3,4(r23)
 1029bb8:	b021883a 	mov	r16,r22
 1029bbc:	b82b883a 	mov	r21,r23
 1029bc0:	003f2306 	br	1029850 <__alt_data_end+0xfffec390>
 1029bc4:	98c00217 	ldw	r3,8(r19)
 1029bc8:	88c00215 	stw	r3,8(r17)
 1029bcc:	98c00317 	ldw	r3,12(r19)
 1029bd0:	88c00315 	stw	r3,12(r17)
 1029bd4:	30800c26 	beq	r6,r2,1029c08 <_realloc_r+0x520>
 1029bd8:	88800404 	addi	r2,r17,16
 1029bdc:	98c00404 	addi	r3,r19,16
 1029be0:	003f8106 	br	10299e8 <__alt_data_end+0xfffec528>
 1029be4:	893fff17 	ldw	r4,-4(r17)
 1029be8:	00bfff04 	movi	r2,-4
 1029bec:	9823883a 	mov	r17,r19
 1029bf0:	2084703a 	and	r2,r4,r2
 1029bf4:	80a1883a 	add	r16,r16,r2
 1029bf8:	003f1506 	br	1029850 <__alt_data_end+0xfffec390>
 1029bfc:	b8c00404 	addi	r3,r23,16
 1029c00:	9cc00204 	addi	r19,r19,8
 1029c04:	003f4b06 	br	1029934 <__alt_data_end+0xfffec474>
 1029c08:	99000417 	ldw	r4,16(r19)
 1029c0c:	88800604 	addi	r2,r17,24
 1029c10:	98c00604 	addi	r3,r19,24
 1029c14:	89000415 	stw	r4,16(r17)
 1029c18:	99000517 	ldw	r4,20(r19)
 1029c1c:	89000515 	stw	r4,20(r17)
 1029c20:	003f7106 	br	10299e8 <__alt_data_end+0xfffec528>
 1029c24:	8805883a 	mov	r2,r17
 1029c28:	003fb006 	br	1029aec <__alt_data_end+0xfffec62c>
 1029c2c:	8809883a 	mov	r4,r17
 1029c30:	980b883a 	mov	r5,r19
 1029c34:	10284dc0 	call	10284dc <memmove>
 1029c38:	003fb206 	br	1029b04 <__alt_data_end+0xfffec644>
 1029c3c:	98800217 	ldw	r2,8(r19)
 1029c40:	b8800415 	stw	r2,16(r23)
 1029c44:	98800317 	ldw	r2,12(r19)
 1029c48:	b8800515 	stw	r2,20(r23)
 1029c4c:	31000726 	beq	r6,r4,1029c6c <_realloc_r+0x584>
 1029c50:	b8800604 	addi	r2,r23,24
 1029c54:	9cc00404 	addi	r19,r19,16
 1029c58:	003fa406 	br	1029aec <__alt_data_end+0xfffec62c>
 1029c5c:	9009883a 	mov	r4,r18
 1029c60:	102e3d80 	call	102e3d8 <__malloc_unlock>
 1029c64:	0005883a 	mov	r2,zero
 1029c68:	003f0606 	br	1029884 <__alt_data_end+0xfffec3c4>
 1029c6c:	98c00417 	ldw	r3,16(r19)
 1029c70:	9cc00604 	addi	r19,r19,24
 1029c74:	b8800804 	addi	r2,r23,32
 1029c78:	b8c00615 	stw	r3,24(r23)
 1029c7c:	98ffff17 	ldw	r3,-4(r19)
 1029c80:	b8c00715 	stw	r3,28(r23)
 1029c84:	003f9906 	br	1029aec <__alt_data_end+0xfffec62c>

01029c88 <__fpclassifyd>:
 1029c88:	00a00034 	movhi	r2,32768
 1029c8c:	10bfffc4 	addi	r2,r2,-1
 1029c90:	2884703a 	and	r2,r5,r2
 1029c94:	10000726 	beq	r2,zero,1029cb4 <__fpclassifyd+0x2c>
 1029c98:	00fffc34 	movhi	r3,65520
 1029c9c:	019ff834 	movhi	r6,32736
 1029ca0:	28c7883a 	add	r3,r5,r3
 1029ca4:	31bfffc4 	addi	r6,r6,-1
 1029ca8:	30c00536 	bltu	r6,r3,1029cc0 <__fpclassifyd+0x38>
 1029cac:	00800104 	movi	r2,4
 1029cb0:	f800283a 	ret
 1029cb4:	2000021e 	bne	r4,zero,1029cc0 <__fpclassifyd+0x38>
 1029cb8:	00800084 	movi	r2,2
 1029cbc:	f800283a 	ret
 1029cc0:	00dffc34 	movhi	r3,32752
 1029cc4:	019ff834 	movhi	r6,32736
 1029cc8:	28cb883a 	add	r5,r5,r3
 1029ccc:	31bfffc4 	addi	r6,r6,-1
 1029cd0:	317ff62e 	bgeu	r6,r5,1029cac <__alt_data_end+0xfffec7ec>
 1029cd4:	01400434 	movhi	r5,16
 1029cd8:	297fffc4 	addi	r5,r5,-1
 1029cdc:	28800236 	bltu	r5,r2,1029ce8 <__fpclassifyd+0x60>
 1029ce0:	008000c4 	movi	r2,3
 1029ce4:	f800283a 	ret
 1029ce8:	10c00226 	beq	r2,r3,1029cf4 <__fpclassifyd+0x6c>
 1029cec:	0005883a 	mov	r2,zero
 1029cf0:	f800283a 	ret
 1029cf4:	2005003a 	cmpeq	r2,r4,zero
 1029cf8:	f800283a 	ret

01029cfc <_sbrk_r>:
 1029cfc:	defffd04 	addi	sp,sp,-12
 1029d00:	dc000015 	stw	r16,0(sp)
 1029d04:	040040f4 	movhi	r16,259
 1029d08:	dc400115 	stw	r17,4(sp)
 1029d0c:	84108504 	addi	r16,r16,16916
 1029d10:	2023883a 	mov	r17,r4
 1029d14:	2809883a 	mov	r4,r5
 1029d18:	dfc00215 	stw	ra,8(sp)
 1029d1c:	80000015 	stw	zero,0(r16)
 1029d20:	102e5a40 	call	102e5a4 <sbrk>
 1029d24:	00ffffc4 	movi	r3,-1
 1029d28:	10c00526 	beq	r2,r3,1029d40 <_sbrk_r+0x44>
 1029d2c:	dfc00217 	ldw	ra,8(sp)
 1029d30:	dc400117 	ldw	r17,4(sp)
 1029d34:	dc000017 	ldw	r16,0(sp)
 1029d38:	dec00304 	addi	sp,sp,12
 1029d3c:	f800283a 	ret
 1029d40:	80c00017 	ldw	r3,0(r16)
 1029d44:	183ff926 	beq	r3,zero,1029d2c <__alt_data_end+0xfffec86c>
 1029d48:	88c00015 	stw	r3,0(r17)
 1029d4c:	003ff706 	br	1029d2c <__alt_data_end+0xfffec86c>

01029d50 <__sread>:
 1029d50:	defffe04 	addi	sp,sp,-8
 1029d54:	dc000015 	stw	r16,0(sp)
 1029d58:	2821883a 	mov	r16,r5
 1029d5c:	2940038f 	ldh	r5,14(r5)
 1029d60:	dfc00115 	stw	ra,4(sp)
 1029d64:	102b9300 	call	102b930 <_read_r>
 1029d68:	10000716 	blt	r2,zero,1029d88 <__sread+0x38>
 1029d6c:	80c01417 	ldw	r3,80(r16)
 1029d70:	1887883a 	add	r3,r3,r2
 1029d74:	80c01415 	stw	r3,80(r16)
 1029d78:	dfc00117 	ldw	ra,4(sp)
 1029d7c:	dc000017 	ldw	r16,0(sp)
 1029d80:	dec00204 	addi	sp,sp,8
 1029d84:	f800283a 	ret
 1029d88:	80c0030b 	ldhu	r3,12(r16)
 1029d8c:	18fbffcc 	andi	r3,r3,61439
 1029d90:	80c0030d 	sth	r3,12(r16)
 1029d94:	dfc00117 	ldw	ra,4(sp)
 1029d98:	dc000017 	ldw	r16,0(sp)
 1029d9c:	dec00204 	addi	sp,sp,8
 1029da0:	f800283a 	ret

01029da4 <__seofread>:
 1029da4:	0005883a 	mov	r2,zero
 1029da8:	f800283a 	ret

01029dac <__swrite>:
 1029dac:	2880030b 	ldhu	r2,12(r5)
 1029db0:	defffb04 	addi	sp,sp,-20
 1029db4:	dcc00315 	stw	r19,12(sp)
 1029db8:	dc800215 	stw	r18,8(sp)
 1029dbc:	dc400115 	stw	r17,4(sp)
 1029dc0:	dc000015 	stw	r16,0(sp)
 1029dc4:	dfc00415 	stw	ra,16(sp)
 1029dc8:	10c0400c 	andi	r3,r2,256
 1029dcc:	2821883a 	mov	r16,r5
 1029dd0:	2027883a 	mov	r19,r4
 1029dd4:	3025883a 	mov	r18,r6
 1029dd8:	3823883a 	mov	r17,r7
 1029ddc:	18000526 	beq	r3,zero,1029df4 <__swrite+0x48>
 1029de0:	2940038f 	ldh	r5,14(r5)
 1029de4:	000d883a 	mov	r6,zero
 1029de8:	01c00084 	movi	r7,2
 1029dec:	102b8d40 	call	102b8d4 <_lseek_r>
 1029df0:	8080030b 	ldhu	r2,12(r16)
 1029df4:	8140038f 	ldh	r5,14(r16)
 1029df8:	10bbffcc 	andi	r2,r2,61439
 1029dfc:	9809883a 	mov	r4,r19
 1029e00:	900d883a 	mov	r6,r18
 1029e04:	880f883a 	mov	r7,r17
 1029e08:	8080030d 	sth	r2,12(r16)
 1029e0c:	dfc00417 	ldw	ra,16(sp)
 1029e10:	dcc00317 	ldw	r19,12(sp)
 1029e14:	dc800217 	ldw	r18,8(sp)
 1029e18:	dc400117 	ldw	r17,4(sp)
 1029e1c:	dc000017 	ldw	r16,0(sp)
 1029e20:	dec00504 	addi	sp,sp,20
 1029e24:	102b3c41 	jmpi	102b3c4 <_write_r>

01029e28 <__sseek>:
 1029e28:	defffe04 	addi	sp,sp,-8
 1029e2c:	dc000015 	stw	r16,0(sp)
 1029e30:	2821883a 	mov	r16,r5
 1029e34:	2940038f 	ldh	r5,14(r5)
 1029e38:	dfc00115 	stw	ra,4(sp)
 1029e3c:	102b8d40 	call	102b8d4 <_lseek_r>
 1029e40:	00ffffc4 	movi	r3,-1
 1029e44:	10c00826 	beq	r2,r3,1029e68 <__sseek+0x40>
 1029e48:	80c0030b 	ldhu	r3,12(r16)
 1029e4c:	80801415 	stw	r2,80(r16)
 1029e50:	18c40014 	ori	r3,r3,4096
 1029e54:	80c0030d 	sth	r3,12(r16)
 1029e58:	dfc00117 	ldw	ra,4(sp)
 1029e5c:	dc000017 	ldw	r16,0(sp)
 1029e60:	dec00204 	addi	sp,sp,8
 1029e64:	f800283a 	ret
 1029e68:	80c0030b 	ldhu	r3,12(r16)
 1029e6c:	18fbffcc 	andi	r3,r3,61439
 1029e70:	80c0030d 	sth	r3,12(r16)
 1029e74:	dfc00117 	ldw	ra,4(sp)
 1029e78:	dc000017 	ldw	r16,0(sp)
 1029e7c:	dec00204 	addi	sp,sp,8
 1029e80:	f800283a 	ret

01029e84 <__sclose>:
 1029e84:	2940038f 	ldh	r5,14(r5)
 1029e88:	102b4201 	jmpi	102b420 <_close_r>

01029e8c <strcmp>:
 1029e8c:	2144b03a 	or	r2,r4,r5
 1029e90:	108000cc 	andi	r2,r2,3
 1029e94:	1000171e 	bne	r2,zero,1029ef4 <strcmp+0x68>
 1029e98:	20800017 	ldw	r2,0(r4)
 1029e9c:	28c00017 	ldw	r3,0(r5)
 1029ea0:	10c0141e 	bne	r2,r3,1029ef4 <strcmp+0x68>
 1029ea4:	027fbff4 	movhi	r9,65279
 1029ea8:	4a7fbfc4 	addi	r9,r9,-257
 1029eac:	0086303a 	nor	r3,zero,r2
 1029eb0:	02202074 	movhi	r8,32897
 1029eb4:	1245883a 	add	r2,r2,r9
 1029eb8:	42202004 	addi	r8,r8,-32640
 1029ebc:	10c4703a 	and	r2,r2,r3
 1029ec0:	1204703a 	and	r2,r2,r8
 1029ec4:	10000226 	beq	r2,zero,1029ed0 <strcmp+0x44>
 1029ec8:	00001706 	br	1029f28 <strcmp+0x9c>
 1029ecc:	1000161e 	bne	r2,zero,1029f28 <strcmp+0x9c>
 1029ed0:	21000104 	addi	r4,r4,4
 1029ed4:	20c00017 	ldw	r3,0(r4)
 1029ed8:	29400104 	addi	r5,r5,4
 1029edc:	29800017 	ldw	r6,0(r5)
 1029ee0:	1a4f883a 	add	r7,r3,r9
 1029ee4:	00c4303a 	nor	r2,zero,r3
 1029ee8:	3884703a 	and	r2,r7,r2
 1029eec:	1204703a 	and	r2,r2,r8
 1029ef0:	19bff626 	beq	r3,r6,1029ecc <__alt_data_end+0xfffeca0c>
 1029ef4:	20800007 	ldb	r2,0(r4)
 1029ef8:	1000051e 	bne	r2,zero,1029f10 <strcmp+0x84>
 1029efc:	00000606 	br	1029f18 <strcmp+0x8c>
 1029f00:	21000044 	addi	r4,r4,1
 1029f04:	20800007 	ldb	r2,0(r4)
 1029f08:	29400044 	addi	r5,r5,1
 1029f0c:	10000226 	beq	r2,zero,1029f18 <strcmp+0x8c>
 1029f10:	28c00007 	ldb	r3,0(r5)
 1029f14:	10fffa26 	beq	r2,r3,1029f00 <__alt_data_end+0xfffeca40>
 1029f18:	20800003 	ldbu	r2,0(r4)
 1029f1c:	28c00003 	ldbu	r3,0(r5)
 1029f20:	10c5c83a 	sub	r2,r2,r3
 1029f24:	f800283a 	ret
 1029f28:	0005883a 	mov	r2,zero
 1029f2c:	f800283a 	ret

01029f30 <__sprint_r.part.0>:
 1029f30:	28801917 	ldw	r2,100(r5)
 1029f34:	defff604 	addi	sp,sp,-40
 1029f38:	dd400515 	stw	r21,20(sp)
 1029f3c:	dcc00315 	stw	r19,12(sp)
 1029f40:	dfc00915 	stw	ra,36(sp)
 1029f44:	df000815 	stw	fp,32(sp)
 1029f48:	ddc00715 	stw	r23,28(sp)
 1029f4c:	dd800615 	stw	r22,24(sp)
 1029f50:	dd000415 	stw	r20,16(sp)
 1029f54:	dc800215 	stw	r18,8(sp)
 1029f58:	dc400115 	stw	r17,4(sp)
 1029f5c:	dc000015 	stw	r16,0(sp)
 1029f60:	1088000c 	andi	r2,r2,8192
 1029f64:	2827883a 	mov	r19,r5
 1029f68:	302b883a 	mov	r21,r6
 1029f6c:	10002d26 	beq	r2,zero,102a024 <__sprint_r.part.0+0xf4>
 1029f70:	30800217 	ldw	r2,8(r6)
 1029f74:	35800017 	ldw	r22,0(r6)
 1029f78:	10002826 	beq	r2,zero,102a01c <__sprint_r.part.0+0xec>
 1029f7c:	2029883a 	mov	r20,r4
 1029f80:	b5c00104 	addi	r23,r22,4
 1029f84:	04bfffc4 	movi	r18,-1
 1029f88:	bc400017 	ldw	r17,0(r23)
 1029f8c:	b4000017 	ldw	r16,0(r22)
 1029f90:	0039883a 	mov	fp,zero
 1029f94:	8822d0ba 	srli	r17,r17,2
 1029f98:	04400316 	blt	zero,r17,1029fa8 <__sprint_r.part.0+0x78>
 1029f9c:	00001706 	br	1029ffc <__sprint_r.part.0+0xcc>
 1029fa0:	84000104 	addi	r16,r16,4
 1029fa4:	8f001526 	beq	r17,fp,1029ffc <__sprint_r.part.0+0xcc>
 1029fa8:	81400017 	ldw	r5,0(r16)
 1029fac:	a009883a 	mov	r4,r20
 1029fb0:	980d883a 	mov	r6,r19
 1029fb4:	102b64c0 	call	102b64c <_fputwc_r>
 1029fb8:	e7000044 	addi	fp,fp,1
 1029fbc:	14bff81e 	bne	r2,r18,1029fa0 <__alt_data_end+0xfffecae0>
 1029fc0:	9005883a 	mov	r2,r18
 1029fc4:	a8000215 	stw	zero,8(r21)
 1029fc8:	a8000115 	stw	zero,4(r21)
 1029fcc:	dfc00917 	ldw	ra,36(sp)
 1029fd0:	df000817 	ldw	fp,32(sp)
 1029fd4:	ddc00717 	ldw	r23,28(sp)
 1029fd8:	dd800617 	ldw	r22,24(sp)
 1029fdc:	dd400517 	ldw	r21,20(sp)
 1029fe0:	dd000417 	ldw	r20,16(sp)
 1029fe4:	dcc00317 	ldw	r19,12(sp)
 1029fe8:	dc800217 	ldw	r18,8(sp)
 1029fec:	dc400117 	ldw	r17,4(sp)
 1029ff0:	dc000017 	ldw	r16,0(sp)
 1029ff4:	dec00a04 	addi	sp,sp,40
 1029ff8:	f800283a 	ret
 1029ffc:	a8c00217 	ldw	r3,8(r21)
 102a000:	8c63883a 	add	r17,r17,r17
 102a004:	8c63883a 	add	r17,r17,r17
 102a008:	1c45c83a 	sub	r2,r3,r17
 102a00c:	a8800215 	stw	r2,8(r21)
 102a010:	b5800204 	addi	r22,r22,8
 102a014:	bdc00204 	addi	r23,r23,8
 102a018:	103fdb1e 	bne	r2,zero,1029f88 <__alt_data_end+0xfffecac8>
 102a01c:	0005883a 	mov	r2,zero
 102a020:	003fe806 	br	1029fc4 <__alt_data_end+0xfffecb04>
 102a024:	10272680 	call	1027268 <__sfvwrite_r>
 102a028:	003fe606 	br	1029fc4 <__alt_data_end+0xfffecb04>

0102a02c <__sprint_r>:
 102a02c:	30c00217 	ldw	r3,8(r6)
 102a030:	18000126 	beq	r3,zero,102a038 <__sprint_r+0xc>
 102a034:	1029f301 	jmpi	1029f30 <__sprint_r.part.0>
 102a038:	30000115 	stw	zero,4(r6)
 102a03c:	0005883a 	mov	r2,zero
 102a040:	f800283a 	ret

0102a044 <___vfiprintf_internal_r>:
 102a044:	defeca04 	addi	sp,sp,-1240
 102a048:	dd813215 	stw	r22,1224(sp)
 102a04c:	dd013015 	stw	r20,1216(sp)
 102a050:	dfc13515 	stw	ra,1236(sp)
 102a054:	df013415 	stw	fp,1232(sp)
 102a058:	ddc13315 	stw	r23,1228(sp)
 102a05c:	dd413115 	stw	r21,1220(sp)
 102a060:	dcc12f15 	stw	r19,1212(sp)
 102a064:	dc812e15 	stw	r18,1208(sp)
 102a068:	dc412d15 	stw	r17,1204(sp)
 102a06c:	dc012c15 	stw	r16,1200(sp)
 102a070:	d9012015 	stw	r4,1152(sp)
 102a074:	d9c12115 	stw	r7,1156(sp)
 102a078:	2829883a 	mov	r20,r5
 102a07c:	302d883a 	mov	r22,r6
 102a080:	20000226 	beq	r4,zero,102a08c <___vfiprintf_internal_r+0x48>
 102a084:	20800e17 	ldw	r2,56(r4)
 102a088:	1001d326 	beq	r2,zero,102a7d8 <___vfiprintf_internal_r+0x794>
 102a08c:	a0c0030b 	ldhu	r3,12(r20)
 102a090:	1908000c 	andi	r4,r3,8192
 102a094:	1805883a 	mov	r2,r3
 102a098:	2000071e 	bne	r4,zero,102a0b8 <___vfiprintf_internal_r+0x74>
 102a09c:	a1001917 	ldw	r4,100(r20)
 102a0a0:	18880014 	ori	r2,r3,8192
 102a0a4:	00f7ffc4 	movi	r3,-8193
 102a0a8:	20c8703a 	and	r4,r4,r3
 102a0ac:	a080030d 	sth	r2,12(r20)
 102a0b0:	1007883a 	mov	r3,r2
 102a0b4:	a1001915 	stw	r4,100(r20)
 102a0b8:	1100020c 	andi	r4,r2,8
 102a0bc:	20018926 	beq	r4,zero,102a6e4 <___vfiprintf_internal_r+0x6a0>
 102a0c0:	a1000417 	ldw	r4,16(r20)
 102a0c4:	20018726 	beq	r4,zero,102a6e4 <___vfiprintf_internal_r+0x6a0>
 102a0c8:	1080068c 	andi	r2,r2,26
 102a0cc:	01000284 	movi	r4,10
 102a0d0:	11018d26 	beq	r2,r4,102a708 <___vfiprintf_internal_r+0x6c4>
 102a0d4:	da810a04 	addi	r10,sp,1064
 102a0d8:	dac109c4 	addi	r11,sp,1063
 102a0dc:	070040f4 	movhi	fp,259
 102a0e0:	05c040f4 	movhi	r23,259
 102a0e4:	da811e15 	stw	r10,1144(sp)
 102a0e8:	52d5c83a 	sub	r10,r10,r11
 102a0ec:	e702fa04 	addi	fp,fp,3048
 102a0f0:	bdc2f604 	addi	r23,r23,3032
 102a0f4:	dac11f15 	stw	r11,1148(sp)
 102a0f8:	dec11a15 	stw	sp,1128(sp)
 102a0fc:	d8011c15 	stw	zero,1136(sp)
 102a100:	d8011b15 	stw	zero,1132(sp)
 102a104:	d8012615 	stw	zero,1176(sp)
 102a108:	d8012215 	stw	zero,1160(sp)
 102a10c:	da812715 	stw	r10,1180(sp)
 102a110:	d811883a 	mov	r8,sp
 102a114:	b021883a 	mov	r16,r22
 102a118:	80800007 	ldb	r2,0(r16)
 102a11c:	10039c26 	beq	r2,zero,102af90 <___vfiprintf_internal_r+0xf4c>
 102a120:	01000944 	movi	r4,37
 102a124:	11039a26 	beq	r2,r4,102af90 <___vfiprintf_internal_r+0xf4c>
 102a128:	8005883a 	mov	r2,r16
 102a12c:	00000106 	br	102a134 <___vfiprintf_internal_r+0xf0>
 102a130:	19000326 	beq	r3,r4,102a140 <___vfiprintf_internal_r+0xfc>
 102a134:	10800044 	addi	r2,r2,1
 102a138:	10c00007 	ldb	r3,0(r2)
 102a13c:	183ffc1e 	bne	r3,zero,102a130 <__alt_data_end+0xfffecc70>
 102a140:	1425c83a 	sub	r18,r2,r16
 102a144:	1023883a 	mov	r17,r2
 102a148:	90001026 	beq	r18,zero,102a18c <___vfiprintf_internal_r+0x148>
 102a14c:	d8c11c17 	ldw	r3,1136(sp)
 102a150:	d8811b17 	ldw	r2,1132(sp)
 102a154:	44000015 	stw	r16,0(r8)
 102a158:	90c7883a 	add	r3,r18,r3
 102a15c:	10800044 	addi	r2,r2,1
 102a160:	44800115 	stw	r18,4(r8)
 102a164:	d8c11c15 	stw	r3,1136(sp)
 102a168:	d8811b15 	stw	r2,1132(sp)
 102a16c:	010001c4 	movi	r4,7
 102a170:	2080750e 	bge	r4,r2,102a348 <___vfiprintf_internal_r+0x304>
 102a174:	18039d1e 	bne	r3,zero,102afec <___vfiprintf_internal_r+0xfa8>
 102a178:	dac12217 	ldw	r11,1160(sp)
 102a17c:	d8011b15 	stw	zero,1132(sp)
 102a180:	d811883a 	mov	r8,sp
 102a184:	5c97883a 	add	r11,r11,r18
 102a188:	dac12215 	stw	r11,1160(sp)
 102a18c:	88800007 	ldb	r2,0(r17)
 102a190:	1002e026 	beq	r2,zero,102ad14 <___vfiprintf_internal_r+0xcd0>
 102a194:	88c00047 	ldb	r3,1(r17)
 102a198:	8c000044 	addi	r16,r17,1
 102a19c:	d8011d85 	stb	zero,1142(sp)
 102a1a0:	000d883a 	mov	r6,zero
 102a1a4:	027fffc4 	movi	r9,-1
 102a1a8:	0027883a 	mov	r19,zero
 102a1ac:	002b883a 	mov	r21,zero
 102a1b0:	01001604 	movi	r4,88
 102a1b4:	01400244 	movi	r5,9
 102a1b8:	03000a84 	movi	r12,42
 102a1bc:	01c01b04 	movi	r7,108
 102a1c0:	84000044 	addi	r16,r16,1
 102a1c4:	18bff804 	addi	r2,r3,-32
 102a1c8:	20825f36 	bltu	r4,r2,102ab48 <___vfiprintf_internal_r+0xb04>
 102a1cc:	100490ba 	slli	r2,r2,2
 102a1d0:	028040f4 	movhi	r10,259
 102a1d4:	52a87904 	addi	r10,r10,-24092
 102a1d8:	1285883a 	add	r2,r2,r10
 102a1dc:	10800017 	ldw	r2,0(r2)
 102a1e0:	1000683a 	jmp	r2
 102a1e4:	0102a9b8 	rdprs	r4,zero,2726
 102a1e8:	0102ab48 	cmpgei	r4,zero,2733
 102a1ec:	0102ab48 	cmpgei	r4,zero,2733
 102a1f0:	0102ab3c 	xorhi	r4,zero,2732
 102a1f4:	0102ab48 	cmpgei	r4,zero,2733
 102a1f8:	0102ab48 	cmpgei	r4,zero,2733
 102a1fc:	0102ab48 	cmpgei	r4,zero,2733
 102a200:	0102ab48 	cmpgei	r4,zero,2733
 102a204:	0102ab48 	cmpgei	r4,zero,2733
 102a208:	0102ab48 	cmpgei	r4,zero,2733
 102a20c:	0102ab14 	movui	r4,2732
 102a210:	0102ab30 	cmpltui	r4,zero,2732
 102a214:	0102ab48 	cmpgei	r4,zero,2733
 102a218:	0102a7e8 	cmpgeui	r4,zero,2719
 102a21c:	0102a948 	cmpgei	r4,zero,2725
 102a220:	0102ab48 	cmpgei	r4,zero,2733
 102a224:	0102a8cc 	andi	r4,zero,2723
 102a228:	0102a8d8 	cmpnei	r4,zero,2723
 102a22c:	0102a8d8 	cmpnei	r4,zero,2723
 102a230:	0102a8d8 	cmpnei	r4,zero,2723
 102a234:	0102a8d8 	cmpnei	r4,zero,2723
 102a238:	0102a8d8 	cmpnei	r4,zero,2723
 102a23c:	0102a8d8 	cmpnei	r4,zero,2723
 102a240:	0102a8d8 	cmpnei	r4,zero,2723
 102a244:	0102a8d8 	cmpnei	r4,zero,2723
 102a248:	0102a8d8 	cmpnei	r4,zero,2723
 102a24c:	0102ab48 	cmpgei	r4,zero,2733
 102a250:	0102ab48 	cmpgei	r4,zero,2733
 102a254:	0102ab48 	cmpgei	r4,zero,2733
 102a258:	0102ab48 	cmpgei	r4,zero,2733
 102a25c:	0102ab48 	cmpgei	r4,zero,2733
 102a260:	0102ab48 	cmpgei	r4,zero,2733
 102a264:	0102ab48 	cmpgei	r4,zero,2733
 102a268:	0102ab48 	cmpgei	r4,zero,2733
 102a26c:	0102ab48 	cmpgei	r4,zero,2733
 102a270:	0102ab48 	cmpgei	r4,zero,2733
 102a274:	0102a904 	movi	r4,2724
 102a278:	0102ab48 	cmpgei	r4,zero,2733
 102a27c:	0102ab48 	cmpgei	r4,zero,2733
 102a280:	0102ab48 	cmpgei	r4,zero,2733
 102a284:	0102ab48 	cmpgei	r4,zero,2733
 102a288:	0102ab48 	cmpgei	r4,zero,2733
 102a28c:	0102ab48 	cmpgei	r4,zero,2733
 102a290:	0102ab48 	cmpgei	r4,zero,2733
 102a294:	0102ab48 	cmpgei	r4,zero,2733
 102a298:	0102ab48 	cmpgei	r4,zero,2733
 102a29c:	0102ab48 	cmpgei	r4,zero,2733
 102a2a0:	0102a398 	cmpnei	r4,zero,2702
 102a2a4:	0102ab48 	cmpgei	r4,zero,2733
 102a2a8:	0102ab48 	cmpgei	r4,zero,2733
 102a2ac:	0102ab48 	cmpgei	r4,zero,2733
 102a2b0:	0102ab48 	cmpgei	r4,zero,2733
 102a2b4:	0102ab48 	cmpgei	r4,zero,2733
 102a2b8:	0102a35c 	xori	r4,zero,2701
 102a2bc:	0102ab48 	cmpgei	r4,zero,2733
 102a2c0:	0102ab48 	cmpgei	r4,zero,2733
 102a2c4:	0102a844 	movi	r4,2721
 102a2c8:	0102ab48 	cmpgei	r4,zero,2733
 102a2cc:	0102ab48 	cmpgei	r4,zero,2733
 102a2d0:	0102ab48 	cmpgei	r4,zero,2733
 102a2d4:	0102ab48 	cmpgei	r4,zero,2733
 102a2d8:	0102ab48 	cmpgei	r4,zero,2733
 102a2dc:	0102ab48 	cmpgei	r4,zero,2733
 102a2e0:	0102ab48 	cmpgei	r4,zero,2733
 102a2e4:	0102ab48 	cmpgei	r4,zero,2733
 102a2e8:	0102ab48 	cmpgei	r4,zero,2733
 102a2ec:	0102ab48 	cmpgei	r4,zero,2733
 102a2f0:	0102a89c 	xori	r4,zero,2722
 102a2f4:	0102aa34 	movhi	r4,2728
 102a2f8:	0102ab48 	cmpgei	r4,zero,2733
 102a2fc:	0102ab48 	cmpgei	r4,zero,2733
 102a300:	0102ab48 	cmpgei	r4,zero,2733
 102a304:	0102aabc 	xorhi	r4,zero,2730
 102a308:	0102aa34 	movhi	r4,2728
 102a30c:	0102ab48 	cmpgei	r4,zero,2733
 102a310:	0102ab48 	cmpgei	r4,zero,2733
 102a314:	0102aac8 	cmpgei	r4,zero,2731
 102a318:	0102ab48 	cmpgei	r4,zero,2733
 102a31c:	0102a988 	cmpgei	r4,zero,2726
 102a320:	0102a39c 	xori	r4,zero,2702
 102a324:	0102aa70 	cmpltui	r4,zero,2729
 102a328:	0102aab0 	cmpltui	r4,zero,2730
 102a32c:	0102ab48 	cmpgei	r4,zero,2733
 102a330:	0102a9d4 	movui	r4,2727
 102a334:	0102ab48 	cmpgei	r4,zero,2733
 102a338:	0102a360 	cmpeqi	r4,zero,2701
 102a33c:	0102ab48 	cmpgei	r4,zero,2733
 102a340:	0102ab48 	cmpgei	r4,zero,2733
 102a344:	0102aad8 	cmpnei	r4,zero,2731
 102a348:	42000204 	addi	r8,r8,8
 102a34c:	dac12217 	ldw	r11,1160(sp)
 102a350:	5c97883a 	add	r11,r11,r18
 102a354:	dac12215 	stw	r11,1160(sp)
 102a358:	003f8c06 	br	102a18c <__alt_data_end+0xfffecccc>
 102a35c:	ad400414 	ori	r21,r21,16
 102a360:	a880080c 	andi	r2,r21,32
 102a364:	10012f1e 	bne	r2,zero,102a824 <___vfiprintf_internal_r+0x7e0>
 102a368:	a880040c 	andi	r2,r21,16
 102a36c:	1001ff1e 	bne	r2,zero,102ab6c <___vfiprintf_internal_r+0xb28>
 102a370:	a880100c 	andi	r2,r21,64
 102a374:	1001fd26 	beq	r2,zero,102ab6c <___vfiprintf_internal_r+0xb28>
 102a378:	da812117 	ldw	r10,1156(sp)
 102a37c:	002d883a 	mov	r22,zero
 102a380:	00800044 	movi	r2,1
 102a384:	5480000b 	ldhu	r18,0(r10)
 102a388:	52800104 	addi	r10,r10,4
 102a38c:	da812115 	stw	r10,1156(sp)
 102a390:	9009883a 	mov	r4,r18
 102a394:	00000a06 	br	102a3c0 <___vfiprintf_internal_r+0x37c>
 102a398:	ad400414 	ori	r21,r21,16
 102a39c:	a880080c 	andi	r2,r21,32
 102a3a0:	10011426 	beq	r2,zero,102a7f4 <___vfiprintf_internal_r+0x7b0>
 102a3a4:	da812117 	ldw	r10,1156(sp)
 102a3a8:	0005883a 	mov	r2,zero
 102a3ac:	54800017 	ldw	r18,0(r10)
 102a3b0:	55800117 	ldw	r22,4(r10)
 102a3b4:	52800204 	addi	r10,r10,8
 102a3b8:	da812115 	stw	r10,1156(sp)
 102a3bc:	9588b03a 	or	r4,r18,r22
 102a3c0:	d8011d85 	stb	zero,1142(sp)
 102a3c4:	4823883a 	mov	r17,r9
 102a3c8:	0019883a 	mov	r12,zero
 102a3cc:	48000216 	blt	r9,zero,102a3d8 <___vfiprintf_internal_r+0x394>
 102a3d0:	00ffdfc4 	movi	r3,-129
 102a3d4:	a8ea703a 	and	r21,r21,r3
 102a3d8:	2002221e 	bne	r4,zero,102ac64 <___vfiprintf_internal_r+0xc20>
 102a3dc:	4802c726 	beq	r9,zero,102aefc <___vfiprintf_internal_r+0xeb8>
 102a3e0:	10803fcc 	andi	r2,r2,255
 102a3e4:	00c00044 	movi	r3,1
 102a3e8:	10c24426 	beq	r2,r3,102acfc <___vfiprintf_internal_r+0xcb8>
 102a3ec:	00c00084 	movi	r3,2
 102a3f0:	10c2cc26 	beq	r2,r3,102af24 <___vfiprintf_internal_r+0xee0>
 102a3f4:	d8c10a04 	addi	r3,sp,1064
 102a3f8:	9008d0fa 	srli	r4,r18,3
 102a3fc:	b00a977a 	slli	r5,r22,29
 102a400:	b02cd0fa 	srli	r22,r22,3
 102a404:	948001cc 	andi	r18,r18,7
 102a408:	90800c04 	addi	r2,r18,48
 102a40c:	18ffffc4 	addi	r3,r3,-1
 102a410:	2924b03a 	or	r18,r5,r4
 102a414:	18800005 	stb	r2,0(r3)
 102a418:	9588b03a 	or	r4,r18,r22
 102a41c:	203ff61e 	bne	r4,zero,102a3f8 <__alt_data_end+0xfffecf38>
 102a420:	a900004c 	andi	r4,r21,1
 102a424:	d8c12415 	stw	r3,1168(sp)
 102a428:	2002fb1e 	bne	r4,zero,102b018 <___vfiprintf_internal_r+0xfd4>
 102a42c:	da811e17 	ldw	r10,1144(sp)
 102a430:	50e3c83a 	sub	r17,r10,r3
 102a434:	8825883a 	mov	r18,r17
 102a438:	8a40010e 	bge	r17,r9,102a440 <___vfiprintf_internal_r+0x3fc>
 102a43c:	4825883a 	mov	r18,r9
 102a440:	63003fcc 	andi	r12,r12,255
 102a444:	6300201c 	xori	r12,r12,128
 102a448:	633fe004 	addi	r12,r12,-128
 102a44c:	60000126 	beq	r12,zero,102a454 <___vfiprintf_internal_r+0x410>
 102a450:	94800044 	addi	r18,r18,1
 102a454:	ab80008c 	andi	r14,r21,2
 102a458:	70000126 	beq	r14,zero,102a460 <___vfiprintf_internal_r+0x41c>
 102a45c:	94800084 	addi	r18,r18,2
 102a460:	ad80210c 	andi	r22,r21,132
 102a464:	b001df1e 	bne	r22,zero,102abe4 <___vfiprintf_internal_r+0xba0>
 102a468:	9c8fc83a 	sub	r7,r19,r18
 102a46c:	01c1dd0e 	bge	zero,r7,102abe4 <___vfiprintf_internal_r+0xba0>
 102a470:	03000404 	movi	r12,16
 102a474:	d8811c17 	ldw	r2,1136(sp)
 102a478:	61c3920e 	bge	r12,r7,102b2c4 <___vfiprintf_internal_r+0x1280>
 102a47c:	028040f4 	movhi	r10,259
 102a480:	5282fa04 	addi	r10,r10,3048
 102a484:	dc012915 	stw	r16,1188(sp)
 102a488:	d9811b17 	ldw	r6,1132(sp)
 102a48c:	da812315 	stw	r10,1164(sp)
 102a490:	00c001c4 	movi	r3,7
 102a494:	da412515 	stw	r9,1172(sp)
 102a498:	db812815 	stw	r14,1184(sp)
 102a49c:	3821883a 	mov	r16,r7
 102a4a0:	00000506 	br	102a4b8 <___vfiprintf_internal_r+0x474>
 102a4a4:	31400084 	addi	r5,r6,2
 102a4a8:	42000204 	addi	r8,r8,8
 102a4ac:	200d883a 	mov	r6,r4
 102a4b0:	843ffc04 	addi	r16,r16,-16
 102a4b4:	64000d0e 	bge	r12,r16,102a4ec <___vfiprintf_internal_r+0x4a8>
 102a4b8:	10800404 	addi	r2,r2,16
 102a4bc:	31000044 	addi	r4,r6,1
 102a4c0:	47000015 	stw	fp,0(r8)
 102a4c4:	43000115 	stw	r12,4(r8)
 102a4c8:	d8811c15 	stw	r2,1136(sp)
 102a4cc:	d9011b15 	stw	r4,1132(sp)
 102a4d0:	193ff40e 	bge	r3,r4,102a4a4 <__alt_data_end+0xfffecfe4>
 102a4d4:	1001b51e 	bne	r2,zero,102abac <___vfiprintf_internal_r+0xb68>
 102a4d8:	843ffc04 	addi	r16,r16,-16
 102a4dc:	000d883a 	mov	r6,zero
 102a4e0:	01400044 	movi	r5,1
 102a4e4:	d811883a 	mov	r8,sp
 102a4e8:	643ff316 	blt	r12,r16,102a4b8 <__alt_data_end+0xfffecff8>
 102a4ec:	800f883a 	mov	r7,r16
 102a4f0:	da412517 	ldw	r9,1172(sp)
 102a4f4:	db812817 	ldw	r14,1184(sp)
 102a4f8:	dc012917 	ldw	r16,1188(sp)
 102a4fc:	dac12317 	ldw	r11,1164(sp)
 102a500:	3887883a 	add	r3,r7,r2
 102a504:	41c00115 	stw	r7,4(r8)
 102a508:	42c00015 	stw	r11,0(r8)
 102a50c:	d8c11c15 	stw	r3,1136(sp)
 102a510:	d9411b15 	stw	r5,1132(sp)
 102a514:	008001c4 	movi	r2,7
 102a518:	11429316 	blt	r2,r5,102af68 <___vfiprintf_internal_r+0xf24>
 102a51c:	d9011d87 	ldb	r4,1142(sp)
 102a520:	42000204 	addi	r8,r8,8
 102a524:	28800044 	addi	r2,r5,1
 102a528:	2001b31e 	bne	r4,zero,102abf8 <___vfiprintf_internal_r+0xbb4>
 102a52c:	70000c26 	beq	r14,zero,102a560 <___vfiprintf_internal_r+0x51c>
 102a530:	d9011d04 	addi	r4,sp,1140
 102a534:	18c00084 	addi	r3,r3,2
 102a538:	41000015 	stw	r4,0(r8)
 102a53c:	01000084 	movi	r4,2
 102a540:	41000115 	stw	r4,4(r8)
 102a544:	d8c11c15 	stw	r3,1136(sp)
 102a548:	d8811b15 	stw	r2,1132(sp)
 102a54c:	010001c4 	movi	r4,7
 102a550:	20826516 	blt	r4,r2,102aee8 <___vfiprintf_internal_r+0xea4>
 102a554:	100b883a 	mov	r5,r2
 102a558:	42000204 	addi	r8,r8,8
 102a55c:	10800044 	addi	r2,r2,1
 102a560:	01002004 	movi	r4,128
 102a564:	b1021a26 	beq	r22,r4,102add0 <___vfiprintf_internal_r+0xd8c>
 102a568:	4c6dc83a 	sub	r22,r9,r17
 102a56c:	0580230e 	bge	zero,r22,102a5fc <___vfiprintf_internal_r+0x5b8>
 102a570:	01c00404 	movi	r7,16
 102a574:	3d83300e 	bge	r7,r22,102b238 <___vfiprintf_internal_r+0x11f4>
 102a578:	008040f4 	movhi	r2,259
 102a57c:	1082f604 	addi	r2,r2,3032
 102a580:	d8812315 	stw	r2,1164(sp)
 102a584:	030001c4 	movi	r12,7
 102a588:	00000506 	br	102a5a0 <___vfiprintf_internal_r+0x55c>
 102a58c:	28800084 	addi	r2,r5,2
 102a590:	42000204 	addi	r8,r8,8
 102a594:	200b883a 	mov	r5,r4
 102a598:	b5bffc04 	addi	r22,r22,-16
 102a59c:	3d800d0e 	bge	r7,r22,102a5d4 <___vfiprintf_internal_r+0x590>
 102a5a0:	18c00404 	addi	r3,r3,16
 102a5a4:	29000044 	addi	r4,r5,1
 102a5a8:	45c00015 	stw	r23,0(r8)
 102a5ac:	41c00115 	stw	r7,4(r8)
 102a5b0:	d8c11c15 	stw	r3,1136(sp)
 102a5b4:	d9011b15 	stw	r4,1132(sp)
 102a5b8:	613ff40e 	bge	r12,r4,102a58c <__alt_data_end+0xfffed0cc>
 102a5bc:	18019b1e 	bne	r3,zero,102ac2c <___vfiprintf_internal_r+0xbe8>
 102a5c0:	b5bffc04 	addi	r22,r22,-16
 102a5c4:	000b883a 	mov	r5,zero
 102a5c8:	00800044 	movi	r2,1
 102a5cc:	d811883a 	mov	r8,sp
 102a5d0:	3dbff316 	blt	r7,r22,102a5a0 <__alt_data_end+0xfffed0e0>
 102a5d4:	da812317 	ldw	r10,1164(sp)
 102a5d8:	1d87883a 	add	r3,r3,r22
 102a5dc:	45800115 	stw	r22,4(r8)
 102a5e0:	42800015 	stw	r10,0(r8)
 102a5e4:	d8c11c15 	stw	r3,1136(sp)
 102a5e8:	d8811b15 	stw	r2,1132(sp)
 102a5ec:	010001c4 	movi	r4,7
 102a5f0:	2081dd16 	blt	r4,r2,102ad68 <___vfiprintf_internal_r+0xd24>
 102a5f4:	42000204 	addi	r8,r8,8
 102a5f8:	10800044 	addi	r2,r2,1
 102a5fc:	da812417 	ldw	r10,1168(sp)
 102a600:	1c47883a 	add	r3,r3,r17
 102a604:	44400115 	stw	r17,4(r8)
 102a608:	42800015 	stw	r10,0(r8)
 102a60c:	d8c11c15 	stw	r3,1136(sp)
 102a610:	d8811b15 	stw	r2,1132(sp)
 102a614:	010001c4 	movi	r4,7
 102a618:	2081dc0e 	bge	r4,r2,102ad8c <___vfiprintf_internal_r+0xd48>
 102a61c:	1802611e 	bne	r3,zero,102afa4 <___vfiprintf_internal_r+0xf60>
 102a620:	d8011b15 	stw	zero,1132(sp)
 102a624:	aac0010c 	andi	r11,r21,4
 102a628:	58002726 	beq	r11,zero,102a6c8 <___vfiprintf_internal_r+0x684>
 102a62c:	9ca3c83a 	sub	r17,r19,r18
 102a630:	d811883a 	mov	r8,sp
 102a634:	0443510e 	bge	zero,r17,102b37c <___vfiprintf_internal_r+0x1338>
 102a638:	01c00404 	movi	r7,16
 102a63c:	3c43320e 	bge	r7,r17,102b308 <___vfiprintf_internal_r+0x12c4>
 102a640:	008040f4 	movhi	r2,259
 102a644:	1082fa04 	addi	r2,r2,3048
 102a648:	d9011b17 	ldw	r4,1132(sp)
 102a64c:	d8812315 	stw	r2,1164(sp)
 102a650:	382d883a 	mov	r22,r7
 102a654:	054001c4 	movi	r21,7
 102a658:	00000506 	br	102a670 <___vfiprintf_internal_r+0x62c>
 102a65c:	21400084 	addi	r5,r4,2
 102a660:	42000204 	addi	r8,r8,8
 102a664:	1009883a 	mov	r4,r2
 102a668:	8c7ffc04 	addi	r17,r17,-16
 102a66c:	b4400d0e 	bge	r22,r17,102a6a4 <___vfiprintf_internal_r+0x660>
 102a670:	18c00404 	addi	r3,r3,16
 102a674:	20800044 	addi	r2,r4,1
 102a678:	47000015 	stw	fp,0(r8)
 102a67c:	45800115 	stw	r22,4(r8)
 102a680:	d8c11c15 	stw	r3,1136(sp)
 102a684:	d8811b15 	stw	r2,1132(sp)
 102a688:	a8bff40e 	bge	r21,r2,102a65c <__alt_data_end+0xfffed19c>
 102a68c:	1801ac1e 	bne	r3,zero,102ad40 <___vfiprintf_internal_r+0xcfc>
 102a690:	8c7ffc04 	addi	r17,r17,-16
 102a694:	0009883a 	mov	r4,zero
 102a698:	01400044 	movi	r5,1
 102a69c:	d811883a 	mov	r8,sp
 102a6a0:	b47ff316 	blt	r22,r17,102a670 <__alt_data_end+0xfffed1b0>
 102a6a4:	da812317 	ldw	r10,1164(sp)
 102a6a8:	1c47883a 	add	r3,r3,r17
 102a6ac:	44400115 	stw	r17,4(r8)
 102a6b0:	42800015 	stw	r10,0(r8)
 102a6b4:	d8c11c15 	stw	r3,1136(sp)
 102a6b8:	d9411b15 	stw	r5,1132(sp)
 102a6bc:	008001c4 	movi	r2,7
 102a6c0:	1141b70e 	bge	r2,r5,102ada0 <___vfiprintf_internal_r+0xd5c>
 102a6c4:	1802cf1e 	bne	r3,zero,102b204 <___vfiprintf_internal_r+0x11c0>
 102a6c8:	94c2ca16 	blt	r18,r19,102b1f4 <___vfiprintf_internal_r+0x11b0>
 102a6cc:	dac12217 	ldw	r11,1160(sp)
 102a6d0:	5c97883a 	add	r11,r11,r18
 102a6d4:	dac12215 	stw	r11,1160(sp)
 102a6d8:	d8011b15 	stw	zero,1132(sp)
 102a6dc:	d811883a 	mov	r8,sp
 102a6e0:	003e8d06 	br	102a118 <__alt_data_end+0xfffecc58>
 102a6e4:	d9012017 	ldw	r4,1152(sp)
 102a6e8:	a00b883a 	mov	r5,r20
 102a6ec:	1024e040 	call	1024e04 <__swsetup_r>
 102a6f0:	10002c1e 	bne	r2,zero,102a7a4 <___vfiprintf_internal_r+0x760>
 102a6f4:	a0c0030b 	ldhu	r3,12(r20)
 102a6f8:	01000284 	movi	r4,10
 102a6fc:	1805883a 	mov	r2,r3
 102a700:	1080068c 	andi	r2,r2,26
 102a704:	113e731e 	bne	r2,r4,102a0d4 <__alt_data_end+0xfffecc14>
 102a708:	a080038b 	ldhu	r2,14(r20)
 102a70c:	113fffcc 	andi	r4,r2,65535
 102a710:	2120001c 	xori	r4,r4,32768
 102a714:	21200004 	addi	r4,r4,-32768
 102a718:	203e6e16 	blt	r4,zero,102a0d4 <__alt_data_end+0xfffecc14>
 102a71c:	a3001917 	ldw	r12,100(r20)
 102a720:	a2c00717 	ldw	r11,28(r20)
 102a724:	a2800917 	ldw	r10,36(r20)
 102a728:	d9012017 	ldw	r4,1152(sp)
 102a72c:	d9c12117 	ldw	r7,1156(sp)
 102a730:	02410004 	movi	r9,1024
 102a734:	18ffff4c 	andi	r3,r3,65533
 102a738:	da4b883a 	add	r5,sp,r9
 102a73c:	b00d883a 	mov	r6,r22
 102a740:	d8c1030d 	sth	r3,1036(sp)
 102a744:	db011915 	stw	r12,1124(sp)
 102a748:	d881038d 	sth	r2,1038(sp)
 102a74c:	dac10715 	stw	r11,1052(sp)
 102a750:	da810915 	stw	r10,1060(sp)
 102a754:	dec10015 	stw	sp,1024(sp)
 102a758:	dec10415 	stw	sp,1040(sp)
 102a75c:	da410215 	stw	r9,1032(sp)
 102a760:	da410515 	stw	r9,1044(sp)
 102a764:	d8010615 	stw	zero,1048(sp)
 102a768:	102a0440 	call	102a044 <___vfiprintf_internal_r>
 102a76c:	1021883a 	mov	r16,r2
 102a770:	10000416 	blt	r2,zero,102a784 <___vfiprintf_internal_r+0x740>
 102a774:	d9012017 	ldw	r4,1152(sp)
 102a778:	d9410004 	addi	r5,sp,1024
 102a77c:	102685c0 	call	102685c <_fflush_r>
 102a780:	1002fc1e 	bne	r2,zero,102b374 <___vfiprintf_internal_r+0x1330>
 102a784:	d881030b 	ldhu	r2,1036(sp)
 102a788:	1080100c 	andi	r2,r2,64
 102a78c:	10000326 	beq	r2,zero,102a79c <___vfiprintf_internal_r+0x758>
 102a790:	a080030b 	ldhu	r2,12(r20)
 102a794:	10801014 	ori	r2,r2,64
 102a798:	a080030d 	sth	r2,12(r20)
 102a79c:	8005883a 	mov	r2,r16
 102a7a0:	00000106 	br	102a7a8 <___vfiprintf_internal_r+0x764>
 102a7a4:	00bfffc4 	movi	r2,-1
 102a7a8:	dfc13517 	ldw	ra,1236(sp)
 102a7ac:	df013417 	ldw	fp,1232(sp)
 102a7b0:	ddc13317 	ldw	r23,1228(sp)
 102a7b4:	dd813217 	ldw	r22,1224(sp)
 102a7b8:	dd413117 	ldw	r21,1220(sp)
 102a7bc:	dd013017 	ldw	r20,1216(sp)
 102a7c0:	dcc12f17 	ldw	r19,1212(sp)
 102a7c4:	dc812e17 	ldw	r18,1208(sp)
 102a7c8:	dc412d17 	ldw	r17,1204(sp)
 102a7cc:	dc012c17 	ldw	r16,1200(sp)
 102a7d0:	dec13604 	addi	sp,sp,1240
 102a7d4:	f800283a 	ret
 102a7d8:	1026e040 	call	1026e04 <__sinit>
 102a7dc:	003e2b06 	br	102a08c <__alt_data_end+0xfffecbcc>
 102a7e0:	04e7c83a 	sub	r19,zero,r19
 102a7e4:	d8812115 	stw	r2,1156(sp)
 102a7e8:	ad400114 	ori	r21,r21,4
 102a7ec:	80c00007 	ldb	r3,0(r16)
 102a7f0:	003e7306 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102a7f4:	a880040c 	andi	r2,r21,16
 102a7f8:	1000e41e 	bne	r2,zero,102ab8c <___vfiprintf_internal_r+0xb48>
 102a7fc:	a880100c 	andi	r2,r21,64
 102a800:	1000e226 	beq	r2,zero,102ab8c <___vfiprintf_internal_r+0xb48>
 102a804:	da812117 	ldw	r10,1156(sp)
 102a808:	002d883a 	mov	r22,zero
 102a80c:	0005883a 	mov	r2,zero
 102a810:	5480000b 	ldhu	r18,0(r10)
 102a814:	52800104 	addi	r10,r10,4
 102a818:	da812115 	stw	r10,1156(sp)
 102a81c:	9009883a 	mov	r4,r18
 102a820:	003ee706 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102a824:	da812117 	ldw	r10,1156(sp)
 102a828:	00800044 	movi	r2,1
 102a82c:	54800017 	ldw	r18,0(r10)
 102a830:	55800117 	ldw	r22,4(r10)
 102a834:	52800204 	addi	r10,r10,8
 102a838:	da812115 	stw	r10,1156(sp)
 102a83c:	9588b03a 	or	r4,r18,r22
 102a840:	003edf06 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102a844:	02c040f4 	movhi	r11,259
 102a848:	5ac29004 	addi	r11,r11,2624
 102a84c:	d9811d85 	stb	r6,1142(sp)
 102a850:	dac12615 	stw	r11,1176(sp)
 102a854:	a900080c 	andi	r4,r21,32
 102a858:	d8812117 	ldw	r2,1156(sp)
 102a85c:	2000a526 	beq	r4,zero,102aaf4 <___vfiprintf_internal_r+0xab0>
 102a860:	da812117 	ldw	r10,1156(sp)
 102a864:	14800017 	ldw	r18,0(r2)
 102a868:	15800117 	ldw	r22,4(r2)
 102a86c:	52800204 	addi	r10,r10,8
 102a870:	da812115 	stw	r10,1156(sp)
 102a874:	a880004c 	andi	r2,r21,1
 102a878:	1001d926 	beq	r2,zero,102afe0 <___vfiprintf_internal_r+0xf9c>
 102a87c:	9588b03a 	or	r4,r18,r22
 102a880:	20024426 	beq	r4,zero,102b194 <___vfiprintf_internal_r+0x1150>
 102a884:	00800c04 	movi	r2,48
 102a888:	d8811d05 	stb	r2,1140(sp)
 102a88c:	d8c11d45 	stb	r3,1141(sp)
 102a890:	ad400094 	ori	r21,r21,2
 102a894:	00800084 	movi	r2,2
 102a898:	003ec906 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102a89c:	da812117 	ldw	r10,1156(sp)
 102a8a0:	04800044 	movi	r18,1
 102a8a4:	dac10004 	addi	r11,sp,1024
 102a8a8:	50800017 	ldw	r2,0(r10)
 102a8ac:	52800104 	addi	r10,r10,4
 102a8b0:	d8011d85 	stb	zero,1142(sp)
 102a8b4:	d8810005 	stb	r2,1024(sp)
 102a8b8:	da812115 	stw	r10,1156(sp)
 102a8bc:	9023883a 	mov	r17,r18
 102a8c0:	dac12415 	stw	r11,1168(sp)
 102a8c4:	0013883a 	mov	r9,zero
 102a8c8:	003ee206 	br	102a454 <__alt_data_end+0xfffecf94>
 102a8cc:	ad402014 	ori	r21,r21,128
 102a8d0:	80c00007 	ldb	r3,0(r16)
 102a8d4:	003e3a06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102a8d8:	8015883a 	mov	r10,r16
 102a8dc:	0027883a 	mov	r19,zero
 102a8e0:	18bff404 	addi	r2,r3,-48
 102a8e4:	50c00007 	ldb	r3,0(r10)
 102a8e8:	9cc002a4 	muli	r19,r19,10
 102a8ec:	84000044 	addi	r16,r16,1
 102a8f0:	8015883a 	mov	r10,r16
 102a8f4:	98a7883a 	add	r19,r19,r2
 102a8f8:	18bff404 	addi	r2,r3,-48
 102a8fc:	28bff92e 	bgeu	r5,r2,102a8e4 <__alt_data_end+0xfffed424>
 102a900:	003e3006 	br	102a1c4 <__alt_data_end+0xfffecd04>
 102a904:	ad400414 	ori	r21,r21,16
 102a908:	d9811d85 	stb	r6,1142(sp)
 102a90c:	a880080c 	andi	r2,r21,32
 102a910:	d8c12117 	ldw	r3,1156(sp)
 102a914:	10004b26 	beq	r2,zero,102aa44 <___vfiprintf_internal_r+0xa00>
 102a918:	da812117 	ldw	r10,1156(sp)
 102a91c:	18800117 	ldw	r2,4(r3)
 102a920:	1c800017 	ldw	r18,0(r3)
 102a924:	52800204 	addi	r10,r10,8
 102a928:	da812115 	stw	r10,1156(sp)
 102a92c:	102d883a 	mov	r22,r2
 102a930:	1001f116 	blt	r2,zero,102b0f8 <___vfiprintf_internal_r+0x10b4>
 102a934:	db011d83 	ldbu	r12,1142(sp)
 102a938:	4823883a 	mov	r17,r9
 102a93c:	00800044 	movi	r2,1
 102a940:	9588b03a 	or	r4,r18,r22
 102a944:	003ea106 	br	102a3cc <__alt_data_end+0xfffecf0c>
 102a948:	80c00007 	ldb	r3,0(r16)
 102a94c:	82800044 	addi	r10,r16,1
 102a950:	1b027f26 	beq	r3,r12,102b350 <___vfiprintf_internal_r+0x130c>
 102a954:	18bff404 	addi	r2,r3,-48
 102a958:	5021883a 	mov	r16,r10
 102a95c:	0013883a 	mov	r9,zero
 102a960:	28be1836 	bltu	r5,r2,102a1c4 <__alt_data_end+0xfffecd04>
 102a964:	80c00007 	ldb	r3,0(r16)
 102a968:	4a4002a4 	muli	r9,r9,10
 102a96c:	84000044 	addi	r16,r16,1
 102a970:	1253883a 	add	r9,r2,r9
 102a974:	18bff404 	addi	r2,r3,-48
 102a978:	28bffa2e 	bgeu	r5,r2,102a964 <__alt_data_end+0xfffed4a4>
 102a97c:	483e110e 	bge	r9,zero,102a1c4 <__alt_data_end+0xfffecd04>
 102a980:	027fffc4 	movi	r9,-1
 102a984:	003e0f06 	br	102a1c4 <__alt_data_end+0xfffecd04>
 102a988:	d9811d85 	stb	r6,1142(sp)
 102a98c:	a880080c 	andi	r2,r21,32
 102a990:	1001ee26 	beq	r2,zero,102b14c <___vfiprintf_internal_r+0x1108>
 102a994:	da812117 	ldw	r10,1156(sp)
 102a998:	dac12217 	ldw	r11,1160(sp)
 102a99c:	50800017 	ldw	r2,0(r10)
 102a9a0:	5807d7fa 	srai	r3,r11,31
 102a9a4:	52800104 	addi	r10,r10,4
 102a9a8:	da812115 	stw	r10,1156(sp)
 102a9ac:	12c00015 	stw	r11,0(r2)
 102a9b0:	10c00115 	stw	r3,4(r2)
 102a9b4:	003dd806 	br	102a118 <__alt_data_end+0xfffecc58>
 102a9b8:	30803fcc 	andi	r2,r6,255
 102a9bc:	1080201c 	xori	r2,r2,128
 102a9c0:	10bfe004 	addi	r2,r2,-128
 102a9c4:	1001df1e 	bne	r2,zero,102b144 <___vfiprintf_internal_r+0x1100>
 102a9c8:	01800804 	movi	r6,32
 102a9cc:	80c00007 	ldb	r3,0(r16)
 102a9d0:	003dfb06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102a9d4:	da812117 	ldw	r10,1156(sp)
 102a9d8:	dac12117 	ldw	r11,1156(sp)
 102a9dc:	d8011d85 	stb	zero,1142(sp)
 102a9e0:	52800017 	ldw	r10,0(r10)
 102a9e4:	5d800104 	addi	r22,r11,4
 102a9e8:	da812415 	stw	r10,1168(sp)
 102a9ec:	50023b26 	beq	r10,zero,102b2dc <___vfiprintf_internal_r+0x1298>
 102a9f0:	d9012417 	ldw	r4,1168(sp)
 102a9f4:	48021f16 	blt	r9,zero,102b274 <___vfiprintf_internal_r+0x1230>
 102a9f8:	480d883a 	mov	r6,r9
 102a9fc:	000b883a 	mov	r5,zero
 102aa00:	da012a15 	stw	r8,1192(sp)
 102aa04:	da412b15 	stw	r9,1196(sp)
 102aa08:	10282bc0 	call	10282bc <memchr>
 102aa0c:	da012a17 	ldw	r8,1192(sp)
 102aa10:	da412b17 	ldw	r9,1196(sp)
 102aa14:	10024726 	beq	r2,zero,102b334 <___vfiprintf_internal_r+0x12f0>
 102aa18:	d8c12417 	ldw	r3,1168(sp)
 102aa1c:	10e3c83a 	sub	r17,r2,r3
 102aa20:	4c41f616 	blt	r9,r17,102b1fc <___vfiprintf_internal_r+0x11b8>
 102aa24:	db011d83 	ldbu	r12,1142(sp)
 102aa28:	dd812115 	stw	r22,1156(sp)
 102aa2c:	0013883a 	mov	r9,zero
 102aa30:	003e8006 	br	102a434 <__alt_data_end+0xfffecf74>
 102aa34:	d9811d85 	stb	r6,1142(sp)
 102aa38:	a880080c 	andi	r2,r21,32
 102aa3c:	d8c12117 	ldw	r3,1156(sp)
 102aa40:	103fb51e 	bne	r2,zero,102a918 <__alt_data_end+0xfffed458>
 102aa44:	a880040c 	andi	r2,r21,16
 102aa48:	10015e1e 	bne	r2,zero,102afc4 <___vfiprintf_internal_r+0xf80>
 102aa4c:	a880100c 	andi	r2,r21,64
 102aa50:	10015c26 	beq	r2,zero,102afc4 <___vfiprintf_internal_r+0xf80>
 102aa54:	1c80000f 	ldh	r18,0(r3)
 102aa58:	da812117 	ldw	r10,1156(sp)
 102aa5c:	902dd7fa 	srai	r22,r18,31
 102aa60:	52800104 	addi	r10,r10,4
 102aa64:	da812115 	stw	r10,1156(sp)
 102aa68:	b005883a 	mov	r2,r22
 102aa6c:	003fb006 	br	102a930 <__alt_data_end+0xfffed470>
 102aa70:	da812117 	ldw	r10,1156(sp)
 102aa74:	00800c04 	movi	r2,48
 102aa78:	02c040f4 	movhi	r11,259
 102aa7c:	54800017 	ldw	r18,0(r10)
 102aa80:	d8811d05 	stb	r2,1140(sp)
 102aa84:	52800104 	addi	r10,r10,4
 102aa88:	00801e04 	movi	r2,120
 102aa8c:	5ac29504 	addi	r11,r11,2644
 102aa90:	d8811d45 	stb	r2,1141(sp)
 102aa94:	002d883a 	mov	r22,zero
 102aa98:	ad400094 	ori	r21,r21,2
 102aa9c:	da812115 	stw	r10,1156(sp)
 102aaa0:	dac12615 	stw	r11,1176(sp)
 102aaa4:	00800084 	movi	r2,2
 102aaa8:	9009883a 	mov	r4,r18
 102aaac:	003e4406 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102aab0:	ad400814 	ori	r21,r21,32
 102aab4:	80c00007 	ldb	r3,0(r16)
 102aab8:	003dc106 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102aabc:	ad401014 	ori	r21,r21,64
 102aac0:	80c00007 	ldb	r3,0(r16)
 102aac4:	003dbe06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102aac8:	80c00007 	ldb	r3,0(r16)
 102aacc:	19c1de26 	beq	r3,r7,102b248 <___vfiprintf_internal_r+0x1204>
 102aad0:	ad400414 	ori	r21,r21,16
 102aad4:	003dba06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102aad8:	008040f4 	movhi	r2,259
 102aadc:	10829504 	addi	r2,r2,2644
 102aae0:	d8812615 	stw	r2,1176(sp)
 102aae4:	d9811d85 	stb	r6,1142(sp)
 102aae8:	a900080c 	andi	r4,r21,32
 102aaec:	d8812117 	ldw	r2,1156(sp)
 102aaf0:	203f5b1e 	bne	r4,zero,102a860 <__alt_data_end+0xfffed3a0>
 102aaf4:	a900040c 	andi	r4,r21,16
 102aaf8:	2001a826 	beq	r4,zero,102b19c <___vfiprintf_internal_r+0x1158>
 102aafc:	dac12117 	ldw	r11,1156(sp)
 102ab00:	14800017 	ldw	r18,0(r2)
 102ab04:	002d883a 	mov	r22,zero
 102ab08:	5ac00104 	addi	r11,r11,4
 102ab0c:	dac12115 	stw	r11,1156(sp)
 102ab10:	003f5806 	br	102a874 <__alt_data_end+0xfffed3b4>
 102ab14:	da812117 	ldw	r10,1156(sp)
 102ab18:	54c00017 	ldw	r19,0(r10)
 102ab1c:	50800104 	addi	r2,r10,4
 102ab20:	983f2f16 	blt	r19,zero,102a7e0 <__alt_data_end+0xfffed320>
 102ab24:	d8812115 	stw	r2,1156(sp)
 102ab28:	80c00007 	ldb	r3,0(r16)
 102ab2c:	003da406 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102ab30:	01800ac4 	movi	r6,43
 102ab34:	80c00007 	ldb	r3,0(r16)
 102ab38:	003da106 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102ab3c:	ad400054 	ori	r21,r21,1
 102ab40:	80c00007 	ldb	r3,0(r16)
 102ab44:	003d9e06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102ab48:	d9811d85 	stb	r6,1142(sp)
 102ab4c:	18007126 	beq	r3,zero,102ad14 <___vfiprintf_internal_r+0xcd0>
 102ab50:	04800044 	movi	r18,1
 102ab54:	d8c10005 	stb	r3,1024(sp)
 102ab58:	d8c10004 	addi	r3,sp,1024
 102ab5c:	d8011d85 	stb	zero,1142(sp)
 102ab60:	9023883a 	mov	r17,r18
 102ab64:	d8c12415 	stw	r3,1168(sp)
 102ab68:	003f5606 	br	102a8c4 <__alt_data_end+0xfffed404>
 102ab6c:	dac12117 	ldw	r11,1156(sp)
 102ab70:	002d883a 	mov	r22,zero
 102ab74:	00800044 	movi	r2,1
 102ab78:	5c800017 	ldw	r18,0(r11)
 102ab7c:	5ac00104 	addi	r11,r11,4
 102ab80:	dac12115 	stw	r11,1156(sp)
 102ab84:	9009883a 	mov	r4,r18
 102ab88:	003e0d06 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102ab8c:	dac12117 	ldw	r11,1156(sp)
 102ab90:	002d883a 	mov	r22,zero
 102ab94:	0005883a 	mov	r2,zero
 102ab98:	5c800017 	ldw	r18,0(r11)
 102ab9c:	5ac00104 	addi	r11,r11,4
 102aba0:	dac12115 	stw	r11,1156(sp)
 102aba4:	9009883a 	mov	r4,r18
 102aba8:	003e0506 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102abac:	d9012017 	ldw	r4,1152(sp)
 102abb0:	a00b883a 	mov	r5,r20
 102abb4:	d9811a04 	addi	r6,sp,1128
 102abb8:	d8c12a15 	stw	r3,1192(sp)
 102abbc:	db012b15 	stw	r12,1196(sp)
 102abc0:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102abc4:	d8c12a17 	ldw	r3,1192(sp)
 102abc8:	db012b17 	ldw	r12,1196(sp)
 102abcc:	1000571e 	bne	r2,zero,102ad2c <___vfiprintf_internal_r+0xce8>
 102abd0:	d9811b17 	ldw	r6,1132(sp)
 102abd4:	d8811c17 	ldw	r2,1136(sp)
 102abd8:	d811883a 	mov	r8,sp
 102abdc:	31400044 	addi	r5,r6,1
 102abe0:	003e3306 	br	102a4b0 <__alt_data_end+0xfffecff0>
 102abe4:	d9411b17 	ldw	r5,1132(sp)
 102abe8:	d8c11c17 	ldw	r3,1136(sp)
 102abec:	28800044 	addi	r2,r5,1
 102abf0:	d9011d87 	ldb	r4,1142(sp)
 102abf4:	203e4d26 	beq	r4,zero,102a52c <__alt_data_end+0xfffed06c>
 102abf8:	01000044 	movi	r4,1
 102abfc:	d9411d84 	addi	r5,sp,1142
 102ac00:	1907883a 	add	r3,r3,r4
 102ac04:	41400015 	stw	r5,0(r8)
 102ac08:	41000115 	stw	r4,4(r8)
 102ac0c:	d8c11c15 	stw	r3,1136(sp)
 102ac10:	d8811b15 	stw	r2,1132(sp)
 102ac14:	014001c4 	movi	r5,7
 102ac18:	2880aa16 	blt	r5,r2,102aec4 <___vfiprintf_internal_r+0xe80>
 102ac1c:	100b883a 	mov	r5,r2
 102ac20:	42000204 	addi	r8,r8,8
 102ac24:	10800044 	addi	r2,r2,1
 102ac28:	003e4006 	br	102a52c <__alt_data_end+0xfffed06c>
 102ac2c:	d9012017 	ldw	r4,1152(sp)
 102ac30:	a00b883a 	mov	r5,r20
 102ac34:	d9811a04 	addi	r6,sp,1128
 102ac38:	d9c12a15 	stw	r7,1192(sp)
 102ac3c:	db012b15 	stw	r12,1196(sp)
 102ac40:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102ac44:	d9c12a17 	ldw	r7,1192(sp)
 102ac48:	db012b17 	ldw	r12,1196(sp)
 102ac4c:	1000371e 	bne	r2,zero,102ad2c <___vfiprintf_internal_r+0xce8>
 102ac50:	d9411b17 	ldw	r5,1132(sp)
 102ac54:	d8c11c17 	ldw	r3,1136(sp)
 102ac58:	d811883a 	mov	r8,sp
 102ac5c:	28800044 	addi	r2,r5,1
 102ac60:	003e4d06 	br	102a598 <__alt_data_end+0xfffed0d8>
 102ac64:	10803fcc 	andi	r2,r2,255
 102ac68:	00c00044 	movi	r3,1
 102ac6c:	10fddf1e 	bne	r2,r3,102a3ec <__alt_data_end+0xfffecf2c>
 102ac70:	b000021e 	bne	r22,zero,102ac7c <___vfiprintf_internal_r+0xc38>
 102ac74:	00800244 	movi	r2,9
 102ac78:	1480202e 	bgeu	r2,r18,102acfc <___vfiprintf_internal_r+0xcb8>
 102ac7c:	dc012515 	stw	r16,1172(sp)
 102ac80:	dc410a04 	addi	r17,sp,1064
 102ac84:	9021883a 	mov	r16,r18
 102ac88:	da012415 	stw	r8,1168(sp)
 102ac8c:	b025883a 	mov	r18,r22
 102ac90:	da412315 	stw	r9,1164(sp)
 102ac94:	602d883a 	mov	r22,r12
 102ac98:	8009883a 	mov	r4,r16
 102ac9c:	900b883a 	mov	r5,r18
 102aca0:	01800284 	movi	r6,10
 102aca4:	000f883a 	mov	r7,zero
 102aca8:	102c2bc0 	call	102c2bc <__umoddi3>
 102acac:	10800c04 	addi	r2,r2,48
 102acb0:	8c7fffc4 	addi	r17,r17,-1
 102acb4:	8009883a 	mov	r4,r16
 102acb8:	900b883a 	mov	r5,r18
 102acbc:	01800284 	movi	r6,10
 102acc0:	000f883a 	mov	r7,zero
 102acc4:	88800005 	stb	r2,0(r17)
 102acc8:	102bcfc0 	call	102bcfc <__udivdi3>
 102accc:	1021883a 	mov	r16,r2
 102acd0:	10c4b03a 	or	r2,r2,r3
 102acd4:	1825883a 	mov	r18,r3
 102acd8:	103fef1e 	bne	r2,zero,102ac98 <__alt_data_end+0xfffed7d8>
 102acdc:	da811e17 	ldw	r10,1144(sp)
 102ace0:	da012417 	ldw	r8,1168(sp)
 102ace4:	da412317 	ldw	r9,1164(sp)
 102ace8:	dc412415 	stw	r17,1168(sp)
 102acec:	b019883a 	mov	r12,r22
 102acf0:	dc012517 	ldw	r16,1172(sp)
 102acf4:	5463c83a 	sub	r17,r10,r17
 102acf8:	003dce06 	br	102a434 <__alt_data_end+0xfffecf74>
 102acfc:	94800c04 	addi	r18,r18,48
 102ad00:	d8c109c4 	addi	r3,sp,1063
 102ad04:	dc8109c5 	stb	r18,1063(sp)
 102ad08:	dc412717 	ldw	r17,1180(sp)
 102ad0c:	d8c12415 	stw	r3,1168(sp)
 102ad10:	003dc806 	br	102a434 <__alt_data_end+0xfffecf74>
 102ad14:	d8811c17 	ldw	r2,1136(sp)
 102ad18:	10000426 	beq	r2,zero,102ad2c <___vfiprintf_internal_r+0xce8>
 102ad1c:	d9012017 	ldw	r4,1152(sp)
 102ad20:	a00b883a 	mov	r5,r20
 102ad24:	d9811a04 	addi	r6,sp,1128
 102ad28:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102ad2c:	a080030b 	ldhu	r2,12(r20)
 102ad30:	1080100c 	andi	r2,r2,64
 102ad34:	103e9b1e 	bne	r2,zero,102a7a4 <__alt_data_end+0xfffed2e4>
 102ad38:	d8812217 	ldw	r2,1160(sp)
 102ad3c:	003e9a06 	br	102a7a8 <__alt_data_end+0xfffed2e8>
 102ad40:	d9012017 	ldw	r4,1152(sp)
 102ad44:	a00b883a 	mov	r5,r20
 102ad48:	d9811a04 	addi	r6,sp,1128
 102ad4c:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102ad50:	103ff61e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102ad54:	d9011b17 	ldw	r4,1132(sp)
 102ad58:	d8c11c17 	ldw	r3,1136(sp)
 102ad5c:	d811883a 	mov	r8,sp
 102ad60:	21400044 	addi	r5,r4,1
 102ad64:	003e4006 	br	102a668 <__alt_data_end+0xfffed1a8>
 102ad68:	1800d61e 	bne	r3,zero,102b0c4 <___vfiprintf_internal_r+0x1080>
 102ad6c:	dac12417 	ldw	r11,1168(sp)
 102ad70:	00800044 	movi	r2,1
 102ad74:	dc400115 	stw	r17,4(sp)
 102ad78:	dac00015 	stw	r11,0(sp)
 102ad7c:	dc411c15 	stw	r17,1136(sp)
 102ad80:	d8811b15 	stw	r2,1132(sp)
 102ad84:	8807883a 	mov	r3,r17
 102ad88:	d811883a 	mov	r8,sp
 102ad8c:	42000204 	addi	r8,r8,8
 102ad90:	aac0010c 	andi	r11,r21,4
 102ad94:	58000226 	beq	r11,zero,102ada0 <___vfiprintf_internal_r+0xd5c>
 102ad98:	9ca3c83a 	sub	r17,r19,r18
 102ad9c:	047e2616 	blt	zero,r17,102a638 <__alt_data_end+0xfffed178>
 102ada0:	94c0010e 	bge	r18,r19,102ada8 <___vfiprintf_internal_r+0xd64>
 102ada4:	9825883a 	mov	r18,r19
 102ada8:	da812217 	ldw	r10,1160(sp)
 102adac:	5495883a 	add	r10,r10,r18
 102adb0:	da812215 	stw	r10,1160(sp)
 102adb4:	183e4826 	beq	r3,zero,102a6d8 <__alt_data_end+0xfffed218>
 102adb8:	d9012017 	ldw	r4,1152(sp)
 102adbc:	a00b883a 	mov	r5,r20
 102adc0:	d9811a04 	addi	r6,sp,1128
 102adc4:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102adc8:	103e4326 	beq	r2,zero,102a6d8 <__alt_data_end+0xfffed218>
 102adcc:	003fd706 	br	102ad2c <__alt_data_end+0xfffed86c>
 102add0:	9cadc83a 	sub	r22,r19,r18
 102add4:	05bde40e 	bge	zero,r22,102a568 <__alt_data_end+0xfffed0a8>
 102add8:	03000404 	movi	r12,16
 102addc:	6581500e 	bge	r12,r22,102b320 <___vfiprintf_internal_r+0x12dc>
 102ade0:	008040f4 	movhi	r2,259
 102ade4:	1082f604 	addi	r2,r2,3032
 102ade8:	d8812315 	stw	r2,1164(sp)
 102adec:	8005883a 	mov	r2,r16
 102adf0:	038001c4 	movi	r14,7
 102adf4:	b021883a 	mov	r16,r22
 102adf8:	da412515 	stw	r9,1172(sp)
 102adfc:	102d883a 	mov	r22,r2
 102ae00:	00000506 	br	102ae18 <___vfiprintf_internal_r+0xdd4>
 102ae04:	29000084 	addi	r4,r5,2
 102ae08:	42000204 	addi	r8,r8,8
 102ae0c:	100b883a 	mov	r5,r2
 102ae10:	843ffc04 	addi	r16,r16,-16
 102ae14:	64000d0e 	bge	r12,r16,102ae4c <___vfiprintf_internal_r+0xe08>
 102ae18:	18c00404 	addi	r3,r3,16
 102ae1c:	28800044 	addi	r2,r5,1
 102ae20:	45c00015 	stw	r23,0(r8)
 102ae24:	43000115 	stw	r12,4(r8)
 102ae28:	d8c11c15 	stw	r3,1136(sp)
 102ae2c:	d8811b15 	stw	r2,1132(sp)
 102ae30:	70bff40e 	bge	r14,r2,102ae04 <__alt_data_end+0xfffed944>
 102ae34:	1800151e 	bne	r3,zero,102ae8c <___vfiprintf_internal_r+0xe48>
 102ae38:	843ffc04 	addi	r16,r16,-16
 102ae3c:	000b883a 	mov	r5,zero
 102ae40:	01000044 	movi	r4,1
 102ae44:	d811883a 	mov	r8,sp
 102ae48:	643ff316 	blt	r12,r16,102ae18 <__alt_data_end+0xfffed958>
 102ae4c:	da412517 	ldw	r9,1172(sp)
 102ae50:	b005883a 	mov	r2,r22
 102ae54:	802d883a 	mov	r22,r16
 102ae58:	1021883a 	mov	r16,r2
 102ae5c:	da812317 	ldw	r10,1164(sp)
 102ae60:	1d87883a 	add	r3,r3,r22
 102ae64:	45800115 	stw	r22,4(r8)
 102ae68:	42800015 	stw	r10,0(r8)
 102ae6c:	d8c11c15 	stw	r3,1136(sp)
 102ae70:	d9011b15 	stw	r4,1132(sp)
 102ae74:	008001c4 	movi	r2,7
 102ae78:	11008d16 	blt	r2,r4,102b0b0 <___vfiprintf_internal_r+0x106c>
 102ae7c:	42000204 	addi	r8,r8,8
 102ae80:	20800044 	addi	r2,r4,1
 102ae84:	200b883a 	mov	r5,r4
 102ae88:	003db706 	br	102a568 <__alt_data_end+0xfffed0a8>
 102ae8c:	d9012017 	ldw	r4,1152(sp)
 102ae90:	a00b883a 	mov	r5,r20
 102ae94:	d9811a04 	addi	r6,sp,1128
 102ae98:	db012b15 	stw	r12,1196(sp)
 102ae9c:	db812a15 	stw	r14,1192(sp)
 102aea0:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102aea4:	db012b17 	ldw	r12,1196(sp)
 102aea8:	db812a17 	ldw	r14,1192(sp)
 102aeac:	103f9f1e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102aeb0:	d9411b17 	ldw	r5,1132(sp)
 102aeb4:	d8c11c17 	ldw	r3,1136(sp)
 102aeb8:	d811883a 	mov	r8,sp
 102aebc:	29000044 	addi	r4,r5,1
 102aec0:	003fd306 	br	102ae10 <__alt_data_end+0xfffed950>
 102aec4:	18006c1e 	bne	r3,zero,102b078 <___vfiprintf_internal_r+0x1034>
 102aec8:	70004f26 	beq	r14,zero,102b008 <___vfiprintf_internal_r+0xfc4>
 102aecc:	d8811d04 	addi	r2,sp,1140
 102aed0:	00c00084 	movi	r3,2
 102aed4:	d8800015 	stw	r2,0(sp)
 102aed8:	d8c00115 	stw	r3,4(sp)
 102aedc:	2005883a 	mov	r2,r4
 102aee0:	d811883a 	mov	r8,sp
 102aee4:	003d9b06 	br	102a554 <__alt_data_end+0xfffed094>
 102aee8:	1800571e 	bne	r3,zero,102b048 <___vfiprintf_internal_r+0x1004>
 102aeec:	000b883a 	mov	r5,zero
 102aef0:	00800044 	movi	r2,1
 102aef4:	d811883a 	mov	r8,sp
 102aef8:	003d9906 	br	102a560 <__alt_data_end+0xfffed0a0>
 102aefc:	10803fcc 	andi	r2,r2,255
 102af00:	1000251e 	bne	r2,zero,102af98 <___vfiprintf_internal_r+0xf54>
 102af04:	a880004c 	andi	r2,r21,1
 102af08:	10007826 	beq	r2,zero,102b0ec <___vfiprintf_internal_r+0x10a8>
 102af0c:	00800c04 	movi	r2,48
 102af10:	d8c109c4 	addi	r3,sp,1063
 102af14:	d88109c5 	stb	r2,1063(sp)
 102af18:	dc412717 	ldw	r17,1180(sp)
 102af1c:	d8c12415 	stw	r3,1168(sp)
 102af20:	003d4406 	br	102a434 <__alt_data_end+0xfffecf74>
 102af24:	d9012617 	ldw	r4,1176(sp)
 102af28:	dc410a04 	addi	r17,sp,1064
 102af2c:	908003cc 	andi	r2,r18,15
 102af30:	b006973a 	slli	r3,r22,28
 102af34:	2085883a 	add	r2,r4,r2
 102af38:	9024d13a 	srli	r18,r18,4
 102af3c:	10800003 	ldbu	r2,0(r2)
 102af40:	b02cd13a 	srli	r22,r22,4
 102af44:	8c7fffc4 	addi	r17,r17,-1
 102af48:	1ca4b03a 	or	r18,r3,r18
 102af4c:	88800005 	stb	r2,0(r17)
 102af50:	9584b03a 	or	r2,r18,r22
 102af54:	103ff51e 	bne	r2,zero,102af2c <__alt_data_end+0xfffeda6c>
 102af58:	dac11e17 	ldw	r11,1144(sp)
 102af5c:	dc412415 	stw	r17,1168(sp)
 102af60:	5c63c83a 	sub	r17,r11,r17
 102af64:	003d3306 	br	102a434 <__alt_data_end+0xfffecf74>
 102af68:	1800941e 	bne	r3,zero,102b1bc <___vfiprintf_internal_r+0x1178>
 102af6c:	d8811d87 	ldb	r2,1142(sp)
 102af70:	10006b26 	beq	r2,zero,102b120 <___vfiprintf_internal_r+0x10dc>
 102af74:	00c00044 	movi	r3,1
 102af78:	d9011d84 	addi	r4,sp,1142
 102af7c:	1805883a 	mov	r2,r3
 102af80:	d9000015 	stw	r4,0(sp)
 102af84:	d8c00115 	stw	r3,4(sp)
 102af88:	d811883a 	mov	r8,sp
 102af8c:	003f2306 	br	102ac1c <__alt_data_end+0xfffed75c>
 102af90:	8023883a 	mov	r17,r16
 102af94:	003c7d06 	br	102a18c <__alt_data_end+0xfffecccc>
 102af98:	da810a04 	addi	r10,sp,1064
 102af9c:	da812415 	stw	r10,1168(sp)
 102afa0:	003d2406 	br	102a434 <__alt_data_end+0xfffecf74>
 102afa4:	d9012017 	ldw	r4,1152(sp)
 102afa8:	a00b883a 	mov	r5,r20
 102afac:	d9811a04 	addi	r6,sp,1128
 102afb0:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102afb4:	103f5d1e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102afb8:	d8c11c17 	ldw	r3,1136(sp)
 102afbc:	d811883a 	mov	r8,sp
 102afc0:	003f7306 	br	102ad90 <__alt_data_end+0xfffed8d0>
 102afc4:	1c800017 	ldw	r18,0(r3)
 102afc8:	dac12117 	ldw	r11,1156(sp)
 102afcc:	902dd7fa 	srai	r22,r18,31
 102afd0:	5ac00104 	addi	r11,r11,4
 102afd4:	dac12115 	stw	r11,1156(sp)
 102afd8:	b005883a 	mov	r2,r22
 102afdc:	003e5406 	br	102a930 <__alt_data_end+0xfffed470>
 102afe0:	00800084 	movi	r2,2
 102afe4:	9588b03a 	or	r4,r18,r22
 102afe8:	003cf506 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102afec:	d9012017 	ldw	r4,1152(sp)
 102aff0:	a00b883a 	mov	r5,r20
 102aff4:	d9811a04 	addi	r6,sp,1128
 102aff8:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102affc:	103f4b1e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b000:	d811883a 	mov	r8,sp
 102b004:	003cd106 	br	102a34c <__alt_data_end+0xfffece8c>
 102b008:	000b883a 	mov	r5,zero
 102b00c:	2005883a 	mov	r2,r4
 102b010:	d811883a 	mov	r8,sp
 102b014:	003d5206 	br	102a560 <__alt_data_end+0xfffed0a0>
 102b018:	10803fcc 	andi	r2,r2,255
 102b01c:	1080201c 	xori	r2,r2,128
 102b020:	10bfe004 	addi	r2,r2,-128
 102b024:	01000c04 	movi	r4,48
 102b028:	11008e26 	beq	r2,r4,102b264 <___vfiprintf_internal_r+0x1220>
 102b02c:	da812417 	ldw	r10,1168(sp)
 102b030:	dac11e17 	ldw	r11,1144(sp)
 102b034:	193fffc5 	stb	r4,-1(r3)
 102b038:	52bfffc4 	addi	r10,r10,-1
 102b03c:	da812415 	stw	r10,1168(sp)
 102b040:	5aa3c83a 	sub	r17,r11,r10
 102b044:	003cfb06 	br	102a434 <__alt_data_end+0xfffecf74>
 102b048:	d9012017 	ldw	r4,1152(sp)
 102b04c:	a00b883a 	mov	r5,r20
 102b050:	d9811a04 	addi	r6,sp,1128
 102b054:	da412b15 	stw	r9,1196(sp)
 102b058:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b05c:	da412b17 	ldw	r9,1196(sp)
 102b060:	103f321e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b064:	d9411b17 	ldw	r5,1132(sp)
 102b068:	d8c11c17 	ldw	r3,1136(sp)
 102b06c:	d811883a 	mov	r8,sp
 102b070:	28800044 	addi	r2,r5,1
 102b074:	003d3a06 	br	102a560 <__alt_data_end+0xfffed0a0>
 102b078:	d9012017 	ldw	r4,1152(sp)
 102b07c:	a00b883a 	mov	r5,r20
 102b080:	d9811a04 	addi	r6,sp,1128
 102b084:	da412b15 	stw	r9,1196(sp)
 102b088:	db812a15 	stw	r14,1192(sp)
 102b08c:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b090:	da412b17 	ldw	r9,1196(sp)
 102b094:	db812a17 	ldw	r14,1192(sp)
 102b098:	103f241e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b09c:	d9411b17 	ldw	r5,1132(sp)
 102b0a0:	d8c11c17 	ldw	r3,1136(sp)
 102b0a4:	d811883a 	mov	r8,sp
 102b0a8:	28800044 	addi	r2,r5,1
 102b0ac:	003d1f06 	br	102a52c <__alt_data_end+0xfffed06c>
 102b0b0:	1800781e 	bne	r3,zero,102b294 <___vfiprintf_internal_r+0x1250>
 102b0b4:	000b883a 	mov	r5,zero
 102b0b8:	00800044 	movi	r2,1
 102b0bc:	d811883a 	mov	r8,sp
 102b0c0:	003d2906 	br	102a568 <__alt_data_end+0xfffed0a8>
 102b0c4:	d9012017 	ldw	r4,1152(sp)
 102b0c8:	a00b883a 	mov	r5,r20
 102b0cc:	d9811a04 	addi	r6,sp,1128
 102b0d0:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b0d4:	103f151e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b0d8:	d8811b17 	ldw	r2,1132(sp)
 102b0dc:	d8c11c17 	ldw	r3,1136(sp)
 102b0e0:	d811883a 	mov	r8,sp
 102b0e4:	10800044 	addi	r2,r2,1
 102b0e8:	003d4406 	br	102a5fc <__alt_data_end+0xfffed13c>
 102b0ec:	dac10a04 	addi	r11,sp,1064
 102b0f0:	dac12415 	stw	r11,1168(sp)
 102b0f4:	003ccf06 	br	102a434 <__alt_data_end+0xfffecf74>
 102b0f8:	04a5c83a 	sub	r18,zero,r18
 102b0fc:	9004c03a 	cmpne	r2,r18,zero
 102b100:	05adc83a 	sub	r22,zero,r22
 102b104:	b0adc83a 	sub	r22,r22,r2
 102b108:	03000b44 	movi	r12,45
 102b10c:	db011d85 	stb	r12,1142(sp)
 102b110:	4823883a 	mov	r17,r9
 102b114:	00800044 	movi	r2,1
 102b118:	9588b03a 	or	r4,r18,r22
 102b11c:	003cab06 	br	102a3cc <__alt_data_end+0xfffecf0c>
 102b120:	000b883a 	mov	r5,zero
 102b124:	00800044 	movi	r2,1
 102b128:	d811883a 	mov	r8,sp
 102b12c:	703d0c26 	beq	r14,zero,102a560 <__alt_data_end+0xfffed0a0>
 102b130:	00c00084 	movi	r3,2
 102b134:	d9011d04 	addi	r4,sp,1140
 102b138:	d9000015 	stw	r4,0(sp)
 102b13c:	d8c00115 	stw	r3,4(sp)
 102b140:	003d0406 	br	102a554 <__alt_data_end+0xfffed094>
 102b144:	80c00007 	ldb	r3,0(r16)
 102b148:	003c1d06 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102b14c:	a880040c 	andi	r2,r21,16
 102b150:	1000091e 	bne	r2,zero,102b178 <___vfiprintf_internal_r+0x1134>
 102b154:	aac0100c 	andi	r11,r21,64
 102b158:	58000726 	beq	r11,zero,102b178 <___vfiprintf_internal_r+0x1134>
 102b15c:	da812117 	ldw	r10,1156(sp)
 102b160:	dac12217 	ldw	r11,1160(sp)
 102b164:	50800017 	ldw	r2,0(r10)
 102b168:	52800104 	addi	r10,r10,4
 102b16c:	da812115 	stw	r10,1156(sp)
 102b170:	12c0000d 	sth	r11,0(r2)
 102b174:	003be806 	br	102a118 <__alt_data_end+0xfffecc58>
 102b178:	da812117 	ldw	r10,1156(sp)
 102b17c:	dac12217 	ldw	r11,1160(sp)
 102b180:	50800017 	ldw	r2,0(r10)
 102b184:	52800104 	addi	r10,r10,4
 102b188:	da812115 	stw	r10,1156(sp)
 102b18c:	12c00015 	stw	r11,0(r2)
 102b190:	003be106 	br	102a118 <__alt_data_end+0xfffecc58>
 102b194:	00800084 	movi	r2,2
 102b198:	003c8906 	br	102a3c0 <__alt_data_end+0xfffecf00>
 102b19c:	a900100c 	andi	r4,r21,64
 102b1a0:	20001f26 	beq	r4,zero,102b220 <___vfiprintf_internal_r+0x11dc>
 102b1a4:	da812117 	ldw	r10,1156(sp)
 102b1a8:	1480000b 	ldhu	r18,0(r2)
 102b1ac:	002d883a 	mov	r22,zero
 102b1b0:	52800104 	addi	r10,r10,4
 102b1b4:	da812115 	stw	r10,1156(sp)
 102b1b8:	003dae06 	br	102a874 <__alt_data_end+0xfffed3b4>
 102b1bc:	d9012017 	ldw	r4,1152(sp)
 102b1c0:	a00b883a 	mov	r5,r20
 102b1c4:	d9811a04 	addi	r6,sp,1128
 102b1c8:	da412b15 	stw	r9,1196(sp)
 102b1cc:	db812a15 	stw	r14,1192(sp)
 102b1d0:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b1d4:	da412b17 	ldw	r9,1196(sp)
 102b1d8:	db812a17 	ldw	r14,1192(sp)
 102b1dc:	103ed31e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b1e0:	d9411b17 	ldw	r5,1132(sp)
 102b1e4:	d8c11c17 	ldw	r3,1136(sp)
 102b1e8:	d811883a 	mov	r8,sp
 102b1ec:	28800044 	addi	r2,r5,1
 102b1f0:	003e7f06 	br	102abf0 <__alt_data_end+0xfffed730>
 102b1f4:	9825883a 	mov	r18,r19
 102b1f8:	003d3406 	br	102a6cc <__alt_data_end+0xfffed20c>
 102b1fc:	4823883a 	mov	r17,r9
 102b200:	003e0806 	br	102aa24 <__alt_data_end+0xfffed564>
 102b204:	d9012017 	ldw	r4,1152(sp)
 102b208:	a00b883a 	mov	r5,r20
 102b20c:	d9811a04 	addi	r6,sp,1128
 102b210:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b214:	103ec51e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b218:	d8c11c17 	ldw	r3,1136(sp)
 102b21c:	003ee006 	br	102ada0 <__alt_data_end+0xfffed8e0>
 102b220:	dac12117 	ldw	r11,1156(sp)
 102b224:	14800017 	ldw	r18,0(r2)
 102b228:	002d883a 	mov	r22,zero
 102b22c:	5ac00104 	addi	r11,r11,4
 102b230:	dac12115 	stw	r11,1156(sp)
 102b234:	003d8f06 	br	102a874 <__alt_data_end+0xfffed3b4>
 102b238:	02c040f4 	movhi	r11,259
 102b23c:	5ac2f604 	addi	r11,r11,3032
 102b240:	dac12315 	stw	r11,1164(sp)
 102b244:	003ce306 	br	102a5d4 <__alt_data_end+0xfffed114>
 102b248:	80c00043 	ldbu	r3,1(r16)
 102b24c:	ad400814 	ori	r21,r21,32
 102b250:	84000044 	addi	r16,r16,1
 102b254:	18c03fcc 	andi	r3,r3,255
 102b258:	18c0201c 	xori	r3,r3,128
 102b25c:	18ffe004 	addi	r3,r3,-128
 102b260:	003bd706 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102b264:	dac11e17 	ldw	r11,1144(sp)
 102b268:	d8c12417 	ldw	r3,1168(sp)
 102b26c:	58e3c83a 	sub	r17,r11,r3
 102b270:	003c7006 	br	102a434 <__alt_data_end+0xfffecf74>
 102b274:	da012a15 	stw	r8,1192(sp)
 102b278:	1022d4c0 	call	1022d4c <strlen>
 102b27c:	1023883a 	mov	r17,r2
 102b280:	db011d83 	ldbu	r12,1142(sp)
 102b284:	dd812115 	stw	r22,1156(sp)
 102b288:	0013883a 	mov	r9,zero
 102b28c:	da012a17 	ldw	r8,1192(sp)
 102b290:	003c6806 	br	102a434 <__alt_data_end+0xfffecf74>
 102b294:	d9012017 	ldw	r4,1152(sp)
 102b298:	a00b883a 	mov	r5,r20
 102b29c:	d9811a04 	addi	r6,sp,1128
 102b2a0:	da412b15 	stw	r9,1196(sp)
 102b2a4:	1029f300 	call	1029f30 <__sprint_r.part.0>
 102b2a8:	da412b17 	ldw	r9,1196(sp)
 102b2ac:	103e9f1e 	bne	r2,zero,102ad2c <__alt_data_end+0xfffed86c>
 102b2b0:	d9411b17 	ldw	r5,1132(sp)
 102b2b4:	d8c11c17 	ldw	r3,1136(sp)
 102b2b8:	d811883a 	mov	r8,sp
 102b2bc:	28800044 	addi	r2,r5,1
 102b2c0:	003ca906 	br	102a568 <__alt_data_end+0xfffed0a8>
 102b2c4:	d9411b17 	ldw	r5,1132(sp)
 102b2c8:	010040f4 	movhi	r4,259
 102b2cc:	2102fa04 	addi	r4,r4,3048
 102b2d0:	d9012315 	stw	r4,1164(sp)
 102b2d4:	29400044 	addi	r5,r5,1
 102b2d8:	003c8806 	br	102a4fc <__alt_data_end+0xfffed03c>
 102b2dc:	00800184 	movi	r2,6
 102b2e0:	1240012e 	bgeu	r2,r9,102b2e8 <___vfiprintf_internal_r+0x12a4>
 102b2e4:	1013883a 	mov	r9,r2
 102b2e8:	4823883a 	mov	r17,r9
 102b2ec:	4825883a 	mov	r18,r9
 102b2f0:	48001516 	blt	r9,zero,102b348 <___vfiprintf_internal_r+0x1304>
 102b2f4:	008040f4 	movhi	r2,259
 102b2f8:	10829a04 	addi	r2,r2,2664
 102b2fc:	dd812115 	stw	r22,1156(sp)
 102b300:	d8812415 	stw	r2,1168(sp)
 102b304:	003d6f06 	br	102a8c4 <__alt_data_end+0xfffed404>
 102b308:	d9411b17 	ldw	r5,1132(sp)
 102b30c:	02c040f4 	movhi	r11,259
 102b310:	5ac2fa04 	addi	r11,r11,3048
 102b314:	dac12315 	stw	r11,1164(sp)
 102b318:	29400044 	addi	r5,r5,1
 102b31c:	003ce106 	br	102a6a4 <__alt_data_end+0xfffed1e4>
 102b320:	010040f4 	movhi	r4,259
 102b324:	2102f604 	addi	r4,r4,3032
 102b328:	d9012315 	stw	r4,1164(sp)
 102b32c:	1009883a 	mov	r4,r2
 102b330:	003eca06 	br	102ae5c <__alt_data_end+0xfffed99c>
 102b334:	4823883a 	mov	r17,r9
 102b338:	db011d83 	ldbu	r12,1142(sp)
 102b33c:	dd812115 	stw	r22,1156(sp)
 102b340:	0013883a 	mov	r9,zero
 102b344:	003c3b06 	br	102a434 <__alt_data_end+0xfffecf74>
 102b348:	0025883a 	mov	r18,zero
 102b34c:	003fe906 	br	102b2f4 <__alt_data_end+0xfffede34>
 102b350:	dac12117 	ldw	r11,1156(sp)
 102b354:	8005883a 	mov	r2,r16
 102b358:	5021883a 	mov	r16,r10
 102b35c:	5a400017 	ldw	r9,0(r11)
 102b360:	58c00104 	addi	r3,r11,4
 102b364:	d8c12115 	stw	r3,1156(sp)
 102b368:	48000a16 	blt	r9,zero,102b394 <___vfiprintf_internal_r+0x1350>
 102b36c:	10c00047 	ldb	r3,1(r2)
 102b370:	003b9306 	br	102a1c0 <__alt_data_end+0xfffecd00>
 102b374:	043fffc4 	movi	r16,-1
 102b378:	003d0206 	br	102a784 <__alt_data_end+0xfffed2c4>
 102b37c:	94c0010e 	bge	r18,r19,102b384 <___vfiprintf_internal_r+0x1340>
 102b380:	9825883a 	mov	r18,r19
 102b384:	da812217 	ldw	r10,1160(sp)
 102b388:	5495883a 	add	r10,r10,r18
 102b38c:	da812215 	stw	r10,1160(sp)
 102b390:	003cd106 	br	102a6d8 <__alt_data_end+0xfffed218>
 102b394:	027fffc4 	movi	r9,-1
 102b398:	10c00047 	ldb	r3,1(r2)
 102b39c:	003b8806 	br	102a1c0 <__alt_data_end+0xfffecd00>

0102b3a0 <__vfiprintf_internal>:
 102b3a0:	2007883a 	mov	r3,r4
 102b3a4:	010040f4 	movhi	r4,259
 102b3a8:	2109b504 	addi	r4,r4,9940
 102b3ac:	21000017 	ldw	r4,0(r4)
 102b3b0:	2805883a 	mov	r2,r5
 102b3b4:	300f883a 	mov	r7,r6
 102b3b8:	180b883a 	mov	r5,r3
 102b3bc:	100d883a 	mov	r6,r2
 102b3c0:	102a0441 	jmpi	102a044 <___vfiprintf_internal_r>

0102b3c4 <_write_r>:
 102b3c4:	defffd04 	addi	sp,sp,-12
 102b3c8:	dc000015 	stw	r16,0(sp)
 102b3cc:	040040f4 	movhi	r16,259
 102b3d0:	dc400115 	stw	r17,4(sp)
 102b3d4:	84108504 	addi	r16,r16,16916
 102b3d8:	2023883a 	mov	r17,r4
 102b3dc:	2809883a 	mov	r4,r5
 102b3e0:	300b883a 	mov	r5,r6
 102b3e4:	380d883a 	mov	r6,r7
 102b3e8:	dfc00215 	stw	ra,8(sp)
 102b3ec:	80000015 	stw	zero,0(r16)
 102b3f0:	102e6d40 	call	102e6d4 <write>
 102b3f4:	00ffffc4 	movi	r3,-1
 102b3f8:	10c00526 	beq	r2,r3,102b410 <_write_r+0x4c>
 102b3fc:	dfc00217 	ldw	ra,8(sp)
 102b400:	dc400117 	ldw	r17,4(sp)
 102b404:	dc000017 	ldw	r16,0(sp)
 102b408:	dec00304 	addi	sp,sp,12
 102b40c:	f800283a 	ret
 102b410:	80c00017 	ldw	r3,0(r16)
 102b414:	183ff926 	beq	r3,zero,102b3fc <__alt_data_end+0xfffedf3c>
 102b418:	88c00015 	stw	r3,0(r17)
 102b41c:	003ff706 	br	102b3fc <__alt_data_end+0xfffedf3c>

0102b420 <_close_r>:
 102b420:	defffd04 	addi	sp,sp,-12
 102b424:	dc000015 	stw	r16,0(sp)
 102b428:	040040f4 	movhi	r16,259
 102b42c:	dc400115 	stw	r17,4(sp)
 102b430:	84108504 	addi	r16,r16,16916
 102b434:	2023883a 	mov	r17,r4
 102b438:	2809883a 	mov	r4,r5
 102b43c:	dfc00215 	stw	ra,8(sp)
 102b440:	80000015 	stw	zero,0(r16)
 102b444:	102de480 	call	102de48 <close>
 102b448:	00ffffc4 	movi	r3,-1
 102b44c:	10c00526 	beq	r2,r3,102b464 <_close_r+0x44>
 102b450:	dfc00217 	ldw	ra,8(sp)
 102b454:	dc400117 	ldw	r17,4(sp)
 102b458:	dc000017 	ldw	r16,0(sp)
 102b45c:	dec00304 	addi	sp,sp,12
 102b460:	f800283a 	ret
 102b464:	80c00017 	ldw	r3,0(r16)
 102b468:	183ff926 	beq	r3,zero,102b450 <__alt_data_end+0xfffedf90>
 102b46c:	88c00015 	stw	r3,0(r17)
 102b470:	003ff706 	br	102b450 <__alt_data_end+0xfffedf90>

0102b474 <_calloc_r>:
 102b474:	298b383a 	mul	r5,r5,r6
 102b478:	defffe04 	addi	sp,sp,-8
 102b47c:	dc000015 	stw	r16,0(sp)
 102b480:	dfc00115 	stw	ra,4(sp)
 102b484:	1027b140 	call	1027b14 <_malloc_r>
 102b488:	1021883a 	mov	r16,r2
 102b48c:	10002826 	beq	r2,zero,102b530 <_calloc_r+0xbc>
 102b490:	11bfff17 	ldw	r6,-4(r2)
 102b494:	00bfff04 	movi	r2,-4
 102b498:	00c00904 	movi	r3,36
 102b49c:	308c703a 	and	r6,r6,r2
 102b4a0:	308d883a 	add	r6,r6,r2
 102b4a4:	19801436 	bltu	r3,r6,102b4f8 <_calloc_r+0x84>
 102b4a8:	008004c4 	movi	r2,19
 102b4ac:	11800936 	bltu	r2,r6,102b4d4 <_calloc_r+0x60>
 102b4b0:	8005883a 	mov	r2,r16
 102b4b4:	10000015 	stw	zero,0(r2)
 102b4b8:	10000115 	stw	zero,4(r2)
 102b4bc:	10000215 	stw	zero,8(r2)
 102b4c0:	8005883a 	mov	r2,r16
 102b4c4:	dfc00117 	ldw	ra,4(sp)
 102b4c8:	dc000017 	ldw	r16,0(sp)
 102b4cc:	dec00204 	addi	sp,sp,8
 102b4d0:	f800283a 	ret
 102b4d4:	80000015 	stw	zero,0(r16)
 102b4d8:	80000115 	stw	zero,4(r16)
 102b4dc:	008006c4 	movi	r2,27
 102b4e0:	11800d2e 	bgeu	r2,r6,102b518 <_calloc_r+0xa4>
 102b4e4:	80000215 	stw	zero,8(r16)
 102b4e8:	80000315 	stw	zero,12(r16)
 102b4ec:	30c00c26 	beq	r6,r3,102b520 <_calloc_r+0xac>
 102b4f0:	80800404 	addi	r2,r16,16
 102b4f4:	003fef06 	br	102b4b4 <__alt_data_end+0xfffedff4>
 102b4f8:	8009883a 	mov	r4,r16
 102b4fc:	000b883a 	mov	r5,zero
 102b500:	10286380 	call	1028638 <memset>
 102b504:	8005883a 	mov	r2,r16
 102b508:	dfc00117 	ldw	ra,4(sp)
 102b50c:	dc000017 	ldw	r16,0(sp)
 102b510:	dec00204 	addi	sp,sp,8
 102b514:	f800283a 	ret
 102b518:	80800204 	addi	r2,r16,8
 102b51c:	003fe506 	br	102b4b4 <__alt_data_end+0xfffedff4>
 102b520:	80000415 	stw	zero,16(r16)
 102b524:	80800604 	addi	r2,r16,24
 102b528:	80000515 	stw	zero,20(r16)
 102b52c:	003fe106 	br	102b4b4 <__alt_data_end+0xfffedff4>
 102b530:	0005883a 	mov	r2,zero
 102b534:	003fe306 	br	102b4c4 <__alt_data_end+0xfffee004>

0102b538 <_fclose_r>:
 102b538:	28003226 	beq	r5,zero,102b604 <_fclose_r+0xcc>
 102b53c:	defffc04 	addi	sp,sp,-16
 102b540:	dc400115 	stw	r17,4(sp)
 102b544:	2023883a 	mov	r17,r4
 102b548:	dc000015 	stw	r16,0(sp)
 102b54c:	dfc00315 	stw	ra,12(sp)
 102b550:	dc800215 	stw	r18,8(sp)
 102b554:	2821883a 	mov	r16,r5
 102b558:	1026e140 	call	1026e14 <__sfp_lock_acquire>
 102b55c:	88000226 	beq	r17,zero,102b568 <_fclose_r+0x30>
 102b560:	88800e17 	ldw	r2,56(r17)
 102b564:	10002926 	beq	r2,zero,102b60c <_fclose_r+0xd4>
 102b568:	8080030f 	ldh	r2,12(r16)
 102b56c:	10002226 	beq	r2,zero,102b5f8 <_fclose_r+0xc0>
 102b570:	8809883a 	mov	r4,r17
 102b574:	800b883a 	mov	r5,r16
 102b578:	102685c0 	call	102685c <_fflush_r>
 102b57c:	1025883a 	mov	r18,r2
 102b580:	80800b17 	ldw	r2,44(r16)
 102b584:	10000426 	beq	r2,zero,102b598 <_fclose_r+0x60>
 102b588:	81400717 	ldw	r5,28(r16)
 102b58c:	8809883a 	mov	r4,r17
 102b590:	103ee83a 	callr	r2
 102b594:	10002616 	blt	r2,zero,102b630 <_fclose_r+0xf8>
 102b598:	8080030b 	ldhu	r2,12(r16)
 102b59c:	1080200c 	andi	r2,r2,128
 102b5a0:	10001f1e 	bne	r2,zero,102b620 <_fclose_r+0xe8>
 102b5a4:	81400c17 	ldw	r5,48(r16)
 102b5a8:	28000526 	beq	r5,zero,102b5c0 <_fclose_r+0x88>
 102b5ac:	80801004 	addi	r2,r16,64
 102b5b0:	28800226 	beq	r5,r2,102b5bc <_fclose_r+0x84>
 102b5b4:	8809883a 	mov	r4,r17
 102b5b8:	1026f780 	call	1026f78 <_free_r>
 102b5bc:	80000c15 	stw	zero,48(r16)
 102b5c0:	81401117 	ldw	r5,68(r16)
 102b5c4:	28000326 	beq	r5,zero,102b5d4 <_fclose_r+0x9c>
 102b5c8:	8809883a 	mov	r4,r17
 102b5cc:	1026f780 	call	1026f78 <_free_r>
 102b5d0:	80001115 	stw	zero,68(r16)
 102b5d4:	8000030d 	sth	zero,12(r16)
 102b5d8:	1026e180 	call	1026e18 <__sfp_lock_release>
 102b5dc:	9005883a 	mov	r2,r18
 102b5e0:	dfc00317 	ldw	ra,12(sp)
 102b5e4:	dc800217 	ldw	r18,8(sp)
 102b5e8:	dc400117 	ldw	r17,4(sp)
 102b5ec:	dc000017 	ldw	r16,0(sp)
 102b5f0:	dec00404 	addi	sp,sp,16
 102b5f4:	f800283a 	ret
 102b5f8:	1026e180 	call	1026e18 <__sfp_lock_release>
 102b5fc:	0005883a 	mov	r2,zero
 102b600:	003ff706 	br	102b5e0 <__alt_data_end+0xfffee120>
 102b604:	0005883a 	mov	r2,zero
 102b608:	f800283a 	ret
 102b60c:	8809883a 	mov	r4,r17
 102b610:	1026e040 	call	1026e04 <__sinit>
 102b614:	8080030f 	ldh	r2,12(r16)
 102b618:	103fd51e 	bne	r2,zero,102b570 <__alt_data_end+0xfffee0b0>
 102b61c:	003ff606 	br	102b5f8 <__alt_data_end+0xfffee138>
 102b620:	81400417 	ldw	r5,16(r16)
 102b624:	8809883a 	mov	r4,r17
 102b628:	1026f780 	call	1026f78 <_free_r>
 102b62c:	003fdd06 	br	102b5a4 <__alt_data_end+0xfffee0e4>
 102b630:	04bfffc4 	movi	r18,-1
 102b634:	003fd806 	br	102b598 <__alt_data_end+0xfffee0d8>

0102b638 <fclose>:
 102b638:	008040f4 	movhi	r2,259
 102b63c:	1089b504 	addi	r2,r2,9940
 102b640:	200b883a 	mov	r5,r4
 102b644:	11000017 	ldw	r4,0(r2)
 102b648:	102b5381 	jmpi	102b538 <_fclose_r>

0102b64c <_fputwc_r>:
 102b64c:	3080030b 	ldhu	r2,12(r6)
 102b650:	defff804 	addi	sp,sp,-32
 102b654:	dcc00415 	stw	r19,16(sp)
 102b658:	dc800315 	stw	r18,12(sp)
 102b65c:	dc000115 	stw	r16,4(sp)
 102b660:	dfc00715 	stw	ra,28(sp)
 102b664:	dd400615 	stw	r21,24(sp)
 102b668:	dd000515 	stw	r20,20(sp)
 102b66c:	dc400215 	stw	r17,8(sp)
 102b670:	10c8000c 	andi	r3,r2,8192
 102b674:	3021883a 	mov	r16,r6
 102b678:	2027883a 	mov	r19,r4
 102b67c:	2825883a 	mov	r18,r5
 102b680:	1800051e 	bne	r3,zero,102b698 <_fputwc_r+0x4c>
 102b684:	30c01917 	ldw	r3,100(r6)
 102b688:	10880014 	ori	r2,r2,8192
 102b68c:	3080030d 	sth	r2,12(r6)
 102b690:	18880014 	ori	r2,r3,8192
 102b694:	30801915 	stw	r2,100(r6)
 102b698:	10279040 	call	1027904 <__locale_mb_cur_max>
 102b69c:	00c00044 	movi	r3,1
 102b6a0:	10c03e26 	beq	r2,r3,102b79c <_fputwc_r+0x150>
 102b6a4:	9809883a 	mov	r4,r19
 102b6a8:	d80b883a 	mov	r5,sp
 102b6ac:	900d883a 	mov	r6,r18
 102b6b0:	81c01704 	addi	r7,r16,92
 102b6b4:	102bafc0 	call	102bafc <_wcrtomb_r>
 102b6b8:	1029883a 	mov	r20,r2
 102b6bc:	00bfffc4 	movi	r2,-1
 102b6c0:	a0802026 	beq	r20,r2,102b744 <_fputwc_r+0xf8>
 102b6c4:	d9400003 	ldbu	r5,0(sp)
 102b6c8:	a0001c26 	beq	r20,zero,102b73c <_fputwc_r+0xf0>
 102b6cc:	0023883a 	mov	r17,zero
 102b6d0:	05400284 	movi	r21,10
 102b6d4:	00000906 	br	102b6fc <_fputwc_r+0xb0>
 102b6d8:	80800017 	ldw	r2,0(r16)
 102b6dc:	11400005 	stb	r5,0(r2)
 102b6e0:	80c00017 	ldw	r3,0(r16)
 102b6e4:	18c00044 	addi	r3,r3,1
 102b6e8:	80c00015 	stw	r3,0(r16)
 102b6ec:	8c400044 	addi	r17,r17,1
 102b6f0:	dc45883a 	add	r2,sp,r17
 102b6f4:	8d00112e 	bgeu	r17,r20,102b73c <_fputwc_r+0xf0>
 102b6f8:	11400003 	ldbu	r5,0(r2)
 102b6fc:	80c00217 	ldw	r3,8(r16)
 102b700:	18ffffc4 	addi	r3,r3,-1
 102b704:	80c00215 	stw	r3,8(r16)
 102b708:	183ff30e 	bge	r3,zero,102b6d8 <__alt_data_end+0xfffee218>
 102b70c:	80800617 	ldw	r2,24(r16)
 102b710:	18801916 	blt	r3,r2,102b778 <_fputwc_r+0x12c>
 102b714:	80800017 	ldw	r2,0(r16)
 102b718:	11400005 	stb	r5,0(r2)
 102b71c:	80800017 	ldw	r2,0(r16)
 102b720:	10c00003 	ldbu	r3,0(r2)
 102b724:	10800044 	addi	r2,r2,1
 102b728:	1d402326 	beq	r3,r21,102b7b8 <_fputwc_r+0x16c>
 102b72c:	80800015 	stw	r2,0(r16)
 102b730:	8c400044 	addi	r17,r17,1
 102b734:	dc45883a 	add	r2,sp,r17
 102b738:	8d3fef36 	bltu	r17,r20,102b6f8 <__alt_data_end+0xfffee238>
 102b73c:	9005883a 	mov	r2,r18
 102b740:	00000406 	br	102b754 <_fputwc_r+0x108>
 102b744:	80c0030b 	ldhu	r3,12(r16)
 102b748:	a005883a 	mov	r2,r20
 102b74c:	18c01014 	ori	r3,r3,64
 102b750:	80c0030d 	sth	r3,12(r16)
 102b754:	dfc00717 	ldw	ra,28(sp)
 102b758:	dd400617 	ldw	r21,24(sp)
 102b75c:	dd000517 	ldw	r20,20(sp)
 102b760:	dcc00417 	ldw	r19,16(sp)
 102b764:	dc800317 	ldw	r18,12(sp)
 102b768:	dc400217 	ldw	r17,8(sp)
 102b76c:	dc000117 	ldw	r16,4(sp)
 102b770:	dec00804 	addi	sp,sp,32
 102b774:	f800283a 	ret
 102b778:	9809883a 	mov	r4,r19
 102b77c:	29403fcc 	andi	r5,r5,255
 102b780:	800d883a 	mov	r6,r16
 102b784:	102b98c0 	call	102b98c <__swbuf_r>
 102b788:	10bfffe0 	cmpeqi	r2,r2,-1
 102b78c:	10803fcc 	andi	r2,r2,255
 102b790:	103fd626 	beq	r2,zero,102b6ec <__alt_data_end+0xfffee22c>
 102b794:	00bfffc4 	movi	r2,-1
 102b798:	003fee06 	br	102b754 <__alt_data_end+0xfffee294>
 102b79c:	90ffffc4 	addi	r3,r18,-1
 102b7a0:	01003f84 	movi	r4,254
 102b7a4:	20ffbf36 	bltu	r4,r3,102b6a4 <__alt_data_end+0xfffee1e4>
 102b7a8:	900b883a 	mov	r5,r18
 102b7ac:	dc800005 	stb	r18,0(sp)
 102b7b0:	1029883a 	mov	r20,r2
 102b7b4:	003fc506 	br	102b6cc <__alt_data_end+0xfffee20c>
 102b7b8:	9809883a 	mov	r4,r19
 102b7bc:	a80b883a 	mov	r5,r21
 102b7c0:	800d883a 	mov	r6,r16
 102b7c4:	102b98c0 	call	102b98c <__swbuf_r>
 102b7c8:	10bfffe0 	cmpeqi	r2,r2,-1
 102b7cc:	003fef06 	br	102b78c <__alt_data_end+0xfffee2cc>

0102b7d0 <fputwc>:
 102b7d0:	defffc04 	addi	sp,sp,-16
 102b7d4:	dc000115 	stw	r16,4(sp)
 102b7d8:	040040f4 	movhi	r16,259
 102b7dc:	8409b504 	addi	r16,r16,9940
 102b7e0:	dc400215 	stw	r17,8(sp)
 102b7e4:	2023883a 	mov	r17,r4
 102b7e8:	81000017 	ldw	r4,0(r16)
 102b7ec:	dfc00315 	stw	ra,12(sp)
 102b7f0:	280d883a 	mov	r6,r5
 102b7f4:	20000626 	beq	r4,zero,102b810 <fputwc+0x40>
 102b7f8:	20800e17 	ldw	r2,56(r4)
 102b7fc:	1000041e 	bne	r2,zero,102b810 <fputwc+0x40>
 102b800:	d9400015 	stw	r5,0(sp)
 102b804:	1026e040 	call	1026e04 <__sinit>
 102b808:	81000017 	ldw	r4,0(r16)
 102b80c:	d9800017 	ldw	r6,0(sp)
 102b810:	880b883a 	mov	r5,r17
 102b814:	dfc00317 	ldw	ra,12(sp)
 102b818:	dc400217 	ldw	r17,8(sp)
 102b81c:	dc000117 	ldw	r16,4(sp)
 102b820:	dec00404 	addi	sp,sp,16
 102b824:	102b64c1 	jmpi	102b64c <_fputwc_r>

0102b828 <_fstat_r>:
 102b828:	defffd04 	addi	sp,sp,-12
 102b82c:	dc000015 	stw	r16,0(sp)
 102b830:	040040f4 	movhi	r16,259
 102b834:	dc400115 	stw	r17,4(sp)
 102b838:	84108504 	addi	r16,r16,16916
 102b83c:	2023883a 	mov	r17,r4
 102b840:	2809883a 	mov	r4,r5
 102b844:	300b883a 	mov	r5,r6
 102b848:	dfc00215 	stw	ra,8(sp)
 102b84c:	80000015 	stw	zero,0(r16)
 102b850:	102df940 	call	102df94 <fstat>
 102b854:	00ffffc4 	movi	r3,-1
 102b858:	10c00526 	beq	r2,r3,102b870 <_fstat_r+0x48>
 102b85c:	dfc00217 	ldw	ra,8(sp)
 102b860:	dc400117 	ldw	r17,4(sp)
 102b864:	dc000017 	ldw	r16,0(sp)
 102b868:	dec00304 	addi	sp,sp,12
 102b86c:	f800283a 	ret
 102b870:	80c00017 	ldw	r3,0(r16)
 102b874:	183ff926 	beq	r3,zero,102b85c <__alt_data_end+0xfffee39c>
 102b878:	88c00015 	stw	r3,0(r17)
 102b87c:	003ff706 	br	102b85c <__alt_data_end+0xfffee39c>

0102b880 <_isatty_r>:
 102b880:	defffd04 	addi	sp,sp,-12
 102b884:	dc000015 	stw	r16,0(sp)
 102b888:	040040f4 	movhi	r16,259
 102b88c:	dc400115 	stw	r17,4(sp)
 102b890:	84108504 	addi	r16,r16,16916
 102b894:	2023883a 	mov	r17,r4
 102b898:	2809883a 	mov	r4,r5
 102b89c:	dfc00215 	stw	ra,8(sp)
 102b8a0:	80000015 	stw	zero,0(r16)
 102b8a4:	102e0940 	call	102e094 <isatty>
 102b8a8:	00ffffc4 	movi	r3,-1
 102b8ac:	10c00526 	beq	r2,r3,102b8c4 <_isatty_r+0x44>
 102b8b0:	dfc00217 	ldw	ra,8(sp)
 102b8b4:	dc400117 	ldw	r17,4(sp)
 102b8b8:	dc000017 	ldw	r16,0(sp)
 102b8bc:	dec00304 	addi	sp,sp,12
 102b8c0:	f800283a 	ret
 102b8c4:	80c00017 	ldw	r3,0(r16)
 102b8c8:	183ff926 	beq	r3,zero,102b8b0 <__alt_data_end+0xfffee3f0>
 102b8cc:	88c00015 	stw	r3,0(r17)
 102b8d0:	003ff706 	br	102b8b0 <__alt_data_end+0xfffee3f0>

0102b8d4 <_lseek_r>:
 102b8d4:	defffd04 	addi	sp,sp,-12
 102b8d8:	dc000015 	stw	r16,0(sp)
 102b8dc:	040040f4 	movhi	r16,259
 102b8e0:	dc400115 	stw	r17,4(sp)
 102b8e4:	84108504 	addi	r16,r16,16916
 102b8e8:	2023883a 	mov	r17,r4
 102b8ec:	2809883a 	mov	r4,r5
 102b8f0:	300b883a 	mov	r5,r6
 102b8f4:	380d883a 	mov	r6,r7
 102b8f8:	dfc00215 	stw	ra,8(sp)
 102b8fc:	80000015 	stw	zero,0(r16)
 102b900:	102e26c0 	call	102e26c <lseek>
 102b904:	00ffffc4 	movi	r3,-1
 102b908:	10c00526 	beq	r2,r3,102b920 <_lseek_r+0x4c>
 102b90c:	dfc00217 	ldw	ra,8(sp)
 102b910:	dc400117 	ldw	r17,4(sp)
 102b914:	dc000017 	ldw	r16,0(sp)
 102b918:	dec00304 	addi	sp,sp,12
 102b91c:	f800283a 	ret
 102b920:	80c00017 	ldw	r3,0(r16)
 102b924:	183ff926 	beq	r3,zero,102b90c <__alt_data_end+0xfffee44c>
 102b928:	88c00015 	stw	r3,0(r17)
 102b92c:	003ff706 	br	102b90c <__alt_data_end+0xfffee44c>

0102b930 <_read_r>:
 102b930:	defffd04 	addi	sp,sp,-12
 102b934:	dc000015 	stw	r16,0(sp)
 102b938:	040040f4 	movhi	r16,259
 102b93c:	dc400115 	stw	r17,4(sp)
 102b940:	84108504 	addi	r16,r16,16916
 102b944:	2023883a 	mov	r17,r4
 102b948:	2809883a 	mov	r4,r5
 102b94c:	300b883a 	mov	r5,r6
 102b950:	380d883a 	mov	r6,r7
 102b954:	dfc00215 	stw	ra,8(sp)
 102b958:	80000015 	stw	zero,0(r16)
 102b95c:	102e4480 	call	102e448 <read>
 102b960:	00ffffc4 	movi	r3,-1
 102b964:	10c00526 	beq	r2,r3,102b97c <_read_r+0x4c>
 102b968:	dfc00217 	ldw	ra,8(sp)
 102b96c:	dc400117 	ldw	r17,4(sp)
 102b970:	dc000017 	ldw	r16,0(sp)
 102b974:	dec00304 	addi	sp,sp,12
 102b978:	f800283a 	ret
 102b97c:	80c00017 	ldw	r3,0(r16)
 102b980:	183ff926 	beq	r3,zero,102b968 <__alt_data_end+0xfffee4a8>
 102b984:	88c00015 	stw	r3,0(r17)
 102b988:	003ff706 	br	102b968 <__alt_data_end+0xfffee4a8>

0102b98c <__swbuf_r>:
 102b98c:	defffc04 	addi	sp,sp,-16
 102b990:	dc800215 	stw	r18,8(sp)
 102b994:	dc400115 	stw	r17,4(sp)
 102b998:	dc000015 	stw	r16,0(sp)
 102b99c:	dfc00315 	stw	ra,12(sp)
 102b9a0:	2025883a 	mov	r18,r4
 102b9a4:	2823883a 	mov	r17,r5
 102b9a8:	3021883a 	mov	r16,r6
 102b9ac:	20000226 	beq	r4,zero,102b9b8 <__swbuf_r+0x2c>
 102b9b0:	20800e17 	ldw	r2,56(r4)
 102b9b4:	10004126 	beq	r2,zero,102babc <__swbuf_r+0x130>
 102b9b8:	80c00617 	ldw	r3,24(r16)
 102b9bc:	8180030b 	ldhu	r6,12(r16)
 102b9c0:	80c00215 	stw	r3,8(r16)
 102b9c4:	30c0020c 	andi	r3,r6,8
 102b9c8:	18003526 	beq	r3,zero,102baa0 <__swbuf_r+0x114>
 102b9cc:	80c00417 	ldw	r3,16(r16)
 102b9d0:	18003326 	beq	r3,zero,102baa0 <__swbuf_r+0x114>
 102b9d4:	3088000c 	andi	r2,r6,8192
 102b9d8:	8c403fcc 	andi	r17,r17,255
 102b9dc:	10001726 	beq	r2,zero,102ba3c <__swbuf_r+0xb0>
 102b9e0:	80800017 	ldw	r2,0(r16)
 102b9e4:	81000517 	ldw	r4,20(r16)
 102b9e8:	10c7c83a 	sub	r3,r2,r3
 102b9ec:	19001d0e 	bge	r3,r4,102ba64 <__swbuf_r+0xd8>
 102b9f0:	18c00044 	addi	r3,r3,1
 102b9f4:	81400217 	ldw	r5,8(r16)
 102b9f8:	11000044 	addi	r4,r2,1
 102b9fc:	81000015 	stw	r4,0(r16)
 102ba00:	297fffc4 	addi	r5,r5,-1
 102ba04:	81400215 	stw	r5,8(r16)
 102ba08:	14400005 	stb	r17,0(r2)
 102ba0c:	80800517 	ldw	r2,20(r16)
 102ba10:	10c01d26 	beq	r2,r3,102ba88 <__swbuf_r+0xfc>
 102ba14:	8080030b 	ldhu	r2,12(r16)
 102ba18:	1080004c 	andi	r2,r2,1
 102ba1c:	1000181e 	bne	r2,zero,102ba80 <__swbuf_r+0xf4>
 102ba20:	8805883a 	mov	r2,r17
 102ba24:	dfc00317 	ldw	ra,12(sp)
 102ba28:	dc800217 	ldw	r18,8(sp)
 102ba2c:	dc400117 	ldw	r17,4(sp)
 102ba30:	dc000017 	ldw	r16,0(sp)
 102ba34:	dec00404 	addi	sp,sp,16
 102ba38:	f800283a 	ret
 102ba3c:	81001917 	ldw	r4,100(r16)
 102ba40:	00b7ffc4 	movi	r2,-8193
 102ba44:	31880014 	ori	r6,r6,8192
 102ba48:	2084703a 	and	r2,r4,r2
 102ba4c:	80801915 	stw	r2,100(r16)
 102ba50:	80800017 	ldw	r2,0(r16)
 102ba54:	81000517 	ldw	r4,20(r16)
 102ba58:	8180030d 	sth	r6,12(r16)
 102ba5c:	10c7c83a 	sub	r3,r2,r3
 102ba60:	193fe316 	blt	r3,r4,102b9f0 <__alt_data_end+0xfffee530>
 102ba64:	9009883a 	mov	r4,r18
 102ba68:	800b883a 	mov	r5,r16
 102ba6c:	102685c0 	call	102685c <_fflush_r>
 102ba70:	1000091e 	bne	r2,zero,102ba98 <__swbuf_r+0x10c>
 102ba74:	80800017 	ldw	r2,0(r16)
 102ba78:	00c00044 	movi	r3,1
 102ba7c:	003fdd06 	br	102b9f4 <__alt_data_end+0xfffee534>
 102ba80:	00800284 	movi	r2,10
 102ba84:	88bfe61e 	bne	r17,r2,102ba20 <__alt_data_end+0xfffee560>
 102ba88:	9009883a 	mov	r4,r18
 102ba8c:	800b883a 	mov	r5,r16
 102ba90:	102685c0 	call	102685c <_fflush_r>
 102ba94:	103fe226 	beq	r2,zero,102ba20 <__alt_data_end+0xfffee560>
 102ba98:	00bfffc4 	movi	r2,-1
 102ba9c:	003fe106 	br	102ba24 <__alt_data_end+0xfffee564>
 102baa0:	9009883a 	mov	r4,r18
 102baa4:	800b883a 	mov	r5,r16
 102baa8:	1024e040 	call	1024e04 <__swsetup_r>
 102baac:	1000051e 	bne	r2,zero,102bac4 <__swbuf_r+0x138>
 102bab0:	8180030b 	ldhu	r6,12(r16)
 102bab4:	80c00417 	ldw	r3,16(r16)
 102bab8:	003fc606 	br	102b9d4 <__alt_data_end+0xfffee514>
 102babc:	1026e040 	call	1026e04 <__sinit>
 102bac0:	003fbd06 	br	102b9b8 <__alt_data_end+0xfffee4f8>
 102bac4:	80c0030b 	ldhu	r3,12(r16)
 102bac8:	00bfffc4 	movi	r2,-1
 102bacc:	18c01014 	ori	r3,r3,64
 102bad0:	80c0030d 	sth	r3,12(r16)
 102bad4:	00c00244 	movi	r3,9
 102bad8:	90c00015 	stw	r3,0(r18)
 102badc:	003fd106 	br	102ba24 <__alt_data_end+0xfffee564>

0102bae0 <__swbuf>:
 102bae0:	00c040f4 	movhi	r3,259
 102bae4:	18c9b504 	addi	r3,r3,9940
 102bae8:	2005883a 	mov	r2,r4
 102baec:	19000017 	ldw	r4,0(r3)
 102baf0:	280d883a 	mov	r6,r5
 102baf4:	100b883a 	mov	r5,r2
 102baf8:	102b98c1 	jmpi	102b98c <__swbuf_r>

0102bafc <_wcrtomb_r>:
 102bafc:	defff604 	addi	sp,sp,-40
 102bb00:	008040f4 	movhi	r2,259
 102bb04:	dc800815 	stw	r18,32(sp)
 102bb08:	dc400715 	stw	r17,28(sp)
 102bb0c:	dc000615 	stw	r16,24(sp)
 102bb10:	1089b904 	addi	r2,r2,9956
 102bb14:	dfc00915 	stw	ra,36(sp)
 102bb18:	2021883a 	mov	r16,r4
 102bb1c:	3823883a 	mov	r17,r7
 102bb20:	14800017 	ldw	r18,0(r2)
 102bb24:	28001426 	beq	r5,zero,102bb78 <_wcrtomb_r+0x7c>
 102bb28:	d9400415 	stw	r5,16(sp)
 102bb2c:	d9800515 	stw	r6,20(sp)
 102bb30:	10278f80 	call	10278f8 <__locale_charset>
 102bb34:	d9400417 	ldw	r5,16(sp)
 102bb38:	d9800517 	ldw	r6,20(sp)
 102bb3c:	8009883a 	mov	r4,r16
 102bb40:	dc400015 	stw	r17,0(sp)
 102bb44:	100f883a 	mov	r7,r2
 102bb48:	903ee83a 	callr	r18
 102bb4c:	00ffffc4 	movi	r3,-1
 102bb50:	10c0031e 	bne	r2,r3,102bb60 <_wcrtomb_r+0x64>
 102bb54:	88000015 	stw	zero,0(r17)
 102bb58:	00c02284 	movi	r3,138
 102bb5c:	80c00015 	stw	r3,0(r16)
 102bb60:	dfc00917 	ldw	ra,36(sp)
 102bb64:	dc800817 	ldw	r18,32(sp)
 102bb68:	dc400717 	ldw	r17,28(sp)
 102bb6c:	dc000617 	ldw	r16,24(sp)
 102bb70:	dec00a04 	addi	sp,sp,40
 102bb74:	f800283a 	ret
 102bb78:	10278f80 	call	10278f8 <__locale_charset>
 102bb7c:	8009883a 	mov	r4,r16
 102bb80:	dc400015 	stw	r17,0(sp)
 102bb84:	d9400104 	addi	r5,sp,4
 102bb88:	000d883a 	mov	r6,zero
 102bb8c:	100f883a 	mov	r7,r2
 102bb90:	903ee83a 	callr	r18
 102bb94:	003fed06 	br	102bb4c <__alt_data_end+0xfffee68c>

0102bb98 <wcrtomb>:
 102bb98:	defff504 	addi	sp,sp,-44
 102bb9c:	dc400515 	stw	r17,20(sp)
 102bba0:	dc000415 	stw	r16,16(sp)
 102bba4:	dfc00a15 	stw	ra,40(sp)
 102bba8:	dd400915 	stw	r21,36(sp)
 102bbac:	dd000815 	stw	r20,32(sp)
 102bbb0:	dcc00715 	stw	r19,28(sp)
 102bbb4:	dc800615 	stw	r18,24(sp)
 102bbb8:	2021883a 	mov	r16,r4
 102bbbc:	3023883a 	mov	r17,r6
 102bbc0:	20001d26 	beq	r4,zero,102bc38 <wcrtomb+0xa0>
 102bbc4:	048040f4 	movhi	r18,259
 102bbc8:	9489b504 	addi	r18,r18,9940
 102bbcc:	008040f4 	movhi	r2,259
 102bbd0:	95400017 	ldw	r21,0(r18)
 102bbd4:	1089b904 	addi	r2,r2,9956
 102bbd8:	15000017 	ldw	r20,0(r2)
 102bbdc:	2827883a 	mov	r19,r5
 102bbe0:	10278f80 	call	10278f8 <__locale_charset>
 102bbe4:	a809883a 	mov	r4,r21
 102bbe8:	dc400015 	stw	r17,0(sp)
 102bbec:	800b883a 	mov	r5,r16
 102bbf0:	980d883a 	mov	r6,r19
 102bbf4:	100f883a 	mov	r7,r2
 102bbf8:	a03ee83a 	callr	r20
 102bbfc:	00ffffc4 	movi	r3,-1
 102bc00:	10c0041e 	bne	r2,r3,102bc14 <wcrtomb+0x7c>
 102bc04:	90c00017 	ldw	r3,0(r18)
 102bc08:	01002284 	movi	r4,138
 102bc0c:	88000015 	stw	zero,0(r17)
 102bc10:	19000015 	stw	r4,0(r3)
 102bc14:	dfc00a17 	ldw	ra,40(sp)
 102bc18:	dd400917 	ldw	r21,36(sp)
 102bc1c:	dd000817 	ldw	r20,32(sp)
 102bc20:	dcc00717 	ldw	r19,28(sp)
 102bc24:	dc800617 	ldw	r18,24(sp)
 102bc28:	dc400517 	ldw	r17,20(sp)
 102bc2c:	dc000417 	ldw	r16,16(sp)
 102bc30:	dec00b04 	addi	sp,sp,44
 102bc34:	f800283a 	ret
 102bc38:	048040f4 	movhi	r18,259
 102bc3c:	9489b504 	addi	r18,r18,9940
 102bc40:	008040f4 	movhi	r2,259
 102bc44:	94c00017 	ldw	r19,0(r18)
 102bc48:	1089b904 	addi	r2,r2,9956
 102bc4c:	14000017 	ldw	r16,0(r2)
 102bc50:	10278f80 	call	10278f8 <__locale_charset>
 102bc54:	9809883a 	mov	r4,r19
 102bc58:	dc400015 	stw	r17,0(sp)
 102bc5c:	d9400104 	addi	r5,sp,4
 102bc60:	000d883a 	mov	r6,zero
 102bc64:	100f883a 	mov	r7,r2
 102bc68:	803ee83a 	callr	r16
 102bc6c:	003fe306 	br	102bbfc <__alt_data_end+0xfffee73c>

0102bc70 <__ascii_wctomb>:
 102bc70:	28000526 	beq	r5,zero,102bc88 <__ascii_wctomb+0x18>
 102bc74:	00803fc4 	movi	r2,255
 102bc78:	11800536 	bltu	r2,r6,102bc90 <__ascii_wctomb+0x20>
 102bc7c:	29800005 	stb	r6,0(r5)
 102bc80:	00800044 	movi	r2,1
 102bc84:	f800283a 	ret
 102bc88:	0005883a 	mov	r2,zero
 102bc8c:	f800283a 	ret
 102bc90:	00802284 	movi	r2,138
 102bc94:	20800015 	stw	r2,0(r4)
 102bc98:	00bfffc4 	movi	r2,-1
 102bc9c:	f800283a 	ret

0102bca0 <_wctomb_r>:
 102bca0:	008040f4 	movhi	r2,259
 102bca4:	defff904 	addi	sp,sp,-28
 102bca8:	1089b904 	addi	r2,r2,9956
 102bcac:	dfc00615 	stw	ra,24(sp)
 102bcb0:	dc400515 	stw	r17,20(sp)
 102bcb4:	dc000415 	stw	r16,16(sp)
 102bcb8:	3823883a 	mov	r17,r7
 102bcbc:	14000017 	ldw	r16,0(r2)
 102bcc0:	d9000115 	stw	r4,4(sp)
 102bcc4:	d9400215 	stw	r5,8(sp)
 102bcc8:	d9800315 	stw	r6,12(sp)
 102bccc:	10278f80 	call	10278f8 <__locale_charset>
 102bcd0:	d9000117 	ldw	r4,4(sp)
 102bcd4:	d9400217 	ldw	r5,8(sp)
 102bcd8:	d9800317 	ldw	r6,12(sp)
 102bcdc:	dc400015 	stw	r17,0(sp)
 102bce0:	100f883a 	mov	r7,r2
 102bce4:	803ee83a 	callr	r16
 102bce8:	dfc00617 	ldw	ra,24(sp)
 102bcec:	dc400517 	ldw	r17,20(sp)
 102bcf0:	dc000417 	ldw	r16,16(sp)
 102bcf4:	dec00704 	addi	sp,sp,28
 102bcf8:	f800283a 	ret

0102bcfc <__udivdi3>:
 102bcfc:	defff504 	addi	sp,sp,-44
 102bd00:	dcc00415 	stw	r19,16(sp)
 102bd04:	dc000115 	stw	r16,4(sp)
 102bd08:	dfc00a15 	stw	ra,40(sp)
 102bd0c:	df000915 	stw	fp,36(sp)
 102bd10:	ddc00815 	stw	r23,32(sp)
 102bd14:	dd800715 	stw	r22,28(sp)
 102bd18:	dd400615 	stw	r21,24(sp)
 102bd1c:	dd000515 	stw	r20,20(sp)
 102bd20:	dc800315 	stw	r18,12(sp)
 102bd24:	dc400215 	stw	r17,8(sp)
 102bd28:	2027883a 	mov	r19,r4
 102bd2c:	2821883a 	mov	r16,r5
 102bd30:	3800421e 	bne	r7,zero,102be3c <__udivdi3+0x140>
 102bd34:	3025883a 	mov	r18,r6
 102bd38:	2023883a 	mov	r17,r4
 102bd3c:	2980542e 	bgeu	r5,r6,102be90 <__udivdi3+0x194>
 102bd40:	00bfffd4 	movui	r2,65535
 102bd44:	282d883a 	mov	r22,r5
 102bd48:	1180a836 	bltu	r2,r6,102bfec <__udivdi3+0x2f0>
 102bd4c:	00803fc4 	movi	r2,255
 102bd50:	1181422e 	bgeu	r2,r6,102c25c <__udivdi3+0x560>
 102bd54:	00800204 	movi	r2,8
 102bd58:	1007883a 	mov	r3,r2
 102bd5c:	3084d83a 	srl	r2,r6,r2
 102bd60:	010040f4 	movhi	r4,259
 102bd64:	21024b04 	addi	r4,r4,2348
 102bd68:	2085883a 	add	r2,r4,r2
 102bd6c:	10800003 	ldbu	r2,0(r2)
 102bd70:	10c7883a 	add	r3,r2,r3
 102bd74:	00800804 	movi	r2,32
 102bd78:	10c5c83a 	sub	r2,r2,r3
 102bd7c:	10000526 	beq	r2,zero,102bd94 <__udivdi3+0x98>
 102bd80:	80a0983a 	sll	r16,r16,r2
 102bd84:	98c6d83a 	srl	r3,r19,r3
 102bd88:	30a4983a 	sll	r18,r6,r2
 102bd8c:	98a2983a 	sll	r17,r19,r2
 102bd90:	80ecb03a 	or	r22,r16,r3
 102bd94:	902ad43a 	srli	r21,r18,16
 102bd98:	b009883a 	mov	r4,r22
 102bd9c:	953fffcc 	andi	r20,r18,65535
 102bda0:	a80b883a 	mov	r5,r21
 102bda4:	1022c100 	call	1022c10 <__umodsi3>
 102bda8:	b009883a 	mov	r4,r22
 102bdac:	a80b883a 	mov	r5,r21
 102bdb0:	1027883a 	mov	r19,r2
 102bdb4:	1022c080 	call	1022c08 <__udivsi3>
 102bdb8:	1021883a 	mov	r16,r2
 102bdbc:	8806d43a 	srli	r3,r17,16
 102bdc0:	9804943a 	slli	r2,r19,16
 102bdc4:	8527383a 	mul	r19,r16,r20
 102bdc8:	10c4b03a 	or	r2,r2,r3
 102bdcc:	14c0052e 	bgeu	r2,r19,102bde4 <__udivdi3+0xe8>
 102bdd0:	1485883a 	add	r2,r2,r18
 102bdd4:	80ffffc4 	addi	r3,r16,-1
 102bdd8:	14800136 	bltu	r2,r18,102bde0 <__udivdi3+0xe4>
 102bddc:	14c13436 	bltu	r2,r19,102c2b0 <__udivdi3+0x5b4>
 102bde0:	1821883a 	mov	r16,r3
 102bde4:	14e7c83a 	sub	r19,r2,r19
 102bde8:	9809883a 	mov	r4,r19
 102bdec:	a80b883a 	mov	r5,r21
 102bdf0:	1022c100 	call	1022c10 <__umodsi3>
 102bdf4:	102d883a 	mov	r22,r2
 102bdf8:	9809883a 	mov	r4,r19
 102bdfc:	a80b883a 	mov	r5,r21
 102be00:	1022c080 	call	1022c08 <__udivsi3>
 102be04:	b02c943a 	slli	r22,r22,16
 102be08:	1529383a 	mul	r20,r2,r20
 102be0c:	8c7fffcc 	andi	r17,r17,65535
 102be10:	b462b03a 	or	r17,r22,r17
 102be14:	8d00052e 	bgeu	r17,r20,102be2c <__udivdi3+0x130>
 102be18:	8ca3883a 	add	r17,r17,r18
 102be1c:	10ffffc4 	addi	r3,r2,-1
 102be20:	8c80f636 	bltu	r17,r18,102c1fc <__udivdi3+0x500>
 102be24:	8d00f52e 	bgeu	r17,r20,102c1fc <__udivdi3+0x500>
 102be28:	10bfff84 	addi	r2,r2,-2
 102be2c:	8020943a 	slli	r16,r16,16
 102be30:	0007883a 	mov	r3,zero
 102be34:	1404b03a 	or	r2,r2,r16
 102be38:	00005b06 	br	102bfa8 <__udivdi3+0x2ac>
 102be3c:	29c05836 	bltu	r5,r7,102bfa0 <__udivdi3+0x2a4>
 102be40:	00bfffd4 	movui	r2,65535
 102be44:	11c0642e 	bgeu	r2,r7,102bfd8 <__udivdi3+0x2dc>
 102be48:	00804034 	movhi	r2,256
 102be4c:	10bfffc4 	addi	r2,r2,-1
 102be50:	11c0f32e 	bgeu	r2,r7,102c220 <__udivdi3+0x524>
 102be54:	00c00604 	movi	r3,24
 102be58:	180b883a 	mov	r5,r3
 102be5c:	38c6d83a 	srl	r3,r7,r3
 102be60:	008040f4 	movhi	r2,259
 102be64:	10824b04 	addi	r2,r2,2348
 102be68:	10c7883a 	add	r3,r2,r3
 102be6c:	18c00003 	ldbu	r3,0(r3)
 102be70:	01000804 	movi	r4,32
 102be74:	1947883a 	add	r3,r3,r5
 102be78:	20e5c83a 	sub	r18,r4,r3
 102be7c:	9000661e 	bne	r18,zero,102c018 <__udivdi3+0x31c>
 102be80:	3c00f936 	bltu	r7,r16,102c268 <__udivdi3+0x56c>
 102be84:	9985403a 	cmpgeu	r2,r19,r6
 102be88:	0007883a 	mov	r3,zero
 102be8c:	00004606 	br	102bfa8 <__udivdi3+0x2ac>
 102be90:	3000041e 	bne	r6,zero,102bea4 <__udivdi3+0x1a8>
 102be94:	01000044 	movi	r4,1
 102be98:	000b883a 	mov	r5,zero
 102be9c:	1022c080 	call	1022c08 <__udivsi3>
 102bea0:	1025883a 	mov	r18,r2
 102bea4:	00bfffd4 	movui	r2,65535
 102bea8:	1480562e 	bgeu	r2,r18,102c004 <__udivdi3+0x308>
 102beac:	00804034 	movhi	r2,256
 102beb0:	10bfffc4 	addi	r2,r2,-1
 102beb4:	1480e32e 	bgeu	r2,r18,102c244 <__udivdi3+0x548>
 102beb8:	00800604 	movi	r2,24
 102bebc:	1007883a 	mov	r3,r2
 102bec0:	9084d83a 	srl	r2,r18,r2
 102bec4:	010040f4 	movhi	r4,259
 102bec8:	21024b04 	addi	r4,r4,2348
 102becc:	2085883a 	add	r2,r4,r2
 102bed0:	10800003 	ldbu	r2,0(r2)
 102bed4:	10c5883a 	add	r2,r2,r3
 102bed8:	00c00804 	movi	r3,32
 102bedc:	1887c83a 	sub	r3,r3,r2
 102bee0:	1800911e 	bne	r3,zero,102c128 <__udivdi3+0x42c>
 102bee4:	9028d43a 	srli	r20,r18,16
 102bee8:	84a1c83a 	sub	r16,r16,r18
 102beec:	957fffcc 	andi	r21,r18,65535
 102bef0:	00c00044 	movi	r3,1
 102bef4:	8009883a 	mov	r4,r16
 102bef8:	a00b883a 	mov	r5,r20
 102befc:	d8c00015 	stw	r3,0(sp)
 102bf00:	1022c100 	call	1022c10 <__umodsi3>
 102bf04:	8009883a 	mov	r4,r16
 102bf08:	a00b883a 	mov	r5,r20
 102bf0c:	1027883a 	mov	r19,r2
 102bf10:	1022c080 	call	1022c08 <__udivsi3>
 102bf14:	1021883a 	mov	r16,r2
 102bf18:	880cd43a 	srli	r6,r17,16
 102bf1c:	9804943a 	slli	r2,r19,16
 102bf20:	8567383a 	mul	r19,r16,r21
 102bf24:	d8c00017 	ldw	r3,0(sp)
 102bf28:	1188b03a 	or	r4,r2,r6
 102bf2c:	24c0052e 	bgeu	r4,r19,102bf44 <__udivdi3+0x248>
 102bf30:	2489883a 	add	r4,r4,r18
 102bf34:	80bfffc4 	addi	r2,r16,-1
 102bf38:	24800136 	bltu	r4,r18,102bf40 <__udivdi3+0x244>
 102bf3c:	24c0d936 	bltu	r4,r19,102c2a4 <__udivdi3+0x5a8>
 102bf40:	1021883a 	mov	r16,r2
 102bf44:	24e7c83a 	sub	r19,r4,r19
 102bf48:	9809883a 	mov	r4,r19
 102bf4c:	a00b883a 	mov	r5,r20
 102bf50:	d8c00015 	stw	r3,0(sp)
 102bf54:	1022c100 	call	1022c10 <__umodsi3>
 102bf58:	102d883a 	mov	r22,r2
 102bf5c:	9809883a 	mov	r4,r19
 102bf60:	a00b883a 	mov	r5,r20
 102bf64:	1022c080 	call	1022c08 <__udivsi3>
 102bf68:	b02c943a 	slli	r22,r22,16
 102bf6c:	156b383a 	mul	r21,r2,r21
 102bf70:	8c7fffcc 	andi	r17,r17,65535
 102bf74:	b462b03a 	or	r17,r22,r17
 102bf78:	d8c00017 	ldw	r3,0(sp)
 102bf7c:	8d40052e 	bgeu	r17,r21,102bf94 <__udivdi3+0x298>
 102bf80:	8ca3883a 	add	r17,r17,r18
 102bf84:	113fffc4 	addi	r4,r2,-1
 102bf88:	8c809a36 	bltu	r17,r18,102c1f4 <__udivdi3+0x4f8>
 102bf8c:	8d40992e 	bgeu	r17,r21,102c1f4 <__udivdi3+0x4f8>
 102bf90:	10bfff84 	addi	r2,r2,-2
 102bf94:	8020943a 	slli	r16,r16,16
 102bf98:	1404b03a 	or	r2,r2,r16
 102bf9c:	00000206 	br	102bfa8 <__udivdi3+0x2ac>
 102bfa0:	0007883a 	mov	r3,zero
 102bfa4:	0005883a 	mov	r2,zero
 102bfa8:	dfc00a17 	ldw	ra,40(sp)
 102bfac:	df000917 	ldw	fp,36(sp)
 102bfb0:	ddc00817 	ldw	r23,32(sp)
 102bfb4:	dd800717 	ldw	r22,28(sp)
 102bfb8:	dd400617 	ldw	r21,24(sp)
 102bfbc:	dd000517 	ldw	r20,20(sp)
 102bfc0:	dcc00417 	ldw	r19,16(sp)
 102bfc4:	dc800317 	ldw	r18,12(sp)
 102bfc8:	dc400217 	ldw	r17,8(sp)
 102bfcc:	dc000117 	ldw	r16,4(sp)
 102bfd0:	dec00b04 	addi	sp,sp,44
 102bfd4:	f800283a 	ret
 102bfd8:	00803fc4 	movi	r2,255
 102bfdc:	11c0932e 	bgeu	r2,r7,102c22c <__udivdi3+0x530>
 102bfe0:	00c00204 	movi	r3,8
 102bfe4:	180b883a 	mov	r5,r3
 102bfe8:	003f9c06 	br	102be5c <__alt_data_end+0xfffee99c>
 102bfec:	00804034 	movhi	r2,256
 102bff0:	10bfffc4 	addi	r2,r2,-1
 102bff4:	1180902e 	bgeu	r2,r6,102c238 <__udivdi3+0x53c>
 102bff8:	00800604 	movi	r2,24
 102bffc:	1007883a 	mov	r3,r2
 102c000:	003f5606 	br	102bd5c <__alt_data_end+0xfffee89c>
 102c004:	00803fc4 	movi	r2,255
 102c008:	1480912e 	bgeu	r2,r18,102c250 <__udivdi3+0x554>
 102c00c:	00800204 	movi	r2,8
 102c010:	1007883a 	mov	r3,r2
 102c014:	003faa06 	br	102bec0 <__alt_data_end+0xfffeea00>
 102c018:	30eed83a 	srl	r23,r6,r3
 102c01c:	3c8e983a 	sll	r7,r7,r18
 102c020:	80f8d83a 	srl	fp,r16,r3
 102c024:	98c6d83a 	srl	r3,r19,r3
 102c028:	3deeb03a 	or	r23,r7,r23
 102c02c:	b828d43a 	srli	r20,r23,16
 102c030:	84a0983a 	sll	r16,r16,r18
 102c034:	e009883a 	mov	r4,fp
 102c038:	a00b883a 	mov	r5,r20
 102c03c:	80e2b03a 	or	r17,r16,r3
 102c040:	34aa983a 	sll	r21,r6,r18
 102c044:	1022c100 	call	1022c10 <__umodsi3>
 102c048:	e009883a 	mov	r4,fp
 102c04c:	a00b883a 	mov	r5,r20
 102c050:	102d883a 	mov	r22,r2
 102c054:	1022c080 	call	1022c08 <__udivsi3>
 102c058:	1021883a 	mov	r16,r2
 102c05c:	bf3fffcc 	andi	fp,r23,65535
 102c060:	b004943a 	slli	r2,r22,16
 102c064:	8808d43a 	srli	r4,r17,16
 102c068:	872d383a 	mul	r22,r16,fp
 102c06c:	1104b03a 	or	r2,r2,r4
 102c070:	1580042e 	bgeu	r2,r22,102c084 <__udivdi3+0x388>
 102c074:	15c5883a 	add	r2,r2,r23
 102c078:	80ffffc4 	addi	r3,r16,-1
 102c07c:	15c0812e 	bgeu	r2,r23,102c284 <__udivdi3+0x588>
 102c080:	1821883a 	mov	r16,r3
 102c084:	15adc83a 	sub	r22,r2,r22
 102c088:	b009883a 	mov	r4,r22
 102c08c:	a00b883a 	mov	r5,r20
 102c090:	1022c100 	call	1022c10 <__umodsi3>
 102c094:	a00b883a 	mov	r5,r20
 102c098:	b009883a 	mov	r4,r22
 102c09c:	d8800015 	stw	r2,0(sp)
 102c0a0:	1022c080 	call	1022c08 <__udivsi3>
 102c0a4:	d8c00017 	ldw	r3,0(sp)
 102c0a8:	170b383a 	mul	r5,r2,fp
 102c0ac:	8c7fffcc 	andi	r17,r17,65535
 102c0b0:	1806943a 	slli	r3,r3,16
 102c0b4:	1c46b03a 	or	r3,r3,r17
 102c0b8:	1940042e 	bgeu	r3,r5,102c0cc <__udivdi3+0x3d0>
 102c0bc:	1dc7883a 	add	r3,r3,r23
 102c0c0:	113fffc4 	addi	r4,r2,-1
 102c0c4:	1dc06b2e 	bgeu	r3,r23,102c274 <__udivdi3+0x578>
 102c0c8:	2005883a 	mov	r2,r4
 102c0cc:	8020943a 	slli	r16,r16,16
 102c0d0:	a9ffffcc 	andi	r7,r21,65535
 102c0d4:	a82ad43a 	srli	r21,r21,16
 102c0d8:	1404b03a 	or	r2,r2,r16
 102c0dc:	113fffcc 	andi	r4,r2,65535
 102c0e0:	100cd43a 	srli	r6,r2,16
 102c0e4:	21d3383a 	mul	r9,r4,r7
 102c0e8:	2549383a 	mul	r4,r4,r21
 102c0ec:	31cf383a 	mul	r7,r6,r7
 102c0f0:	4810d43a 	srli	r8,r9,16
 102c0f4:	1947c83a 	sub	r3,r3,r5
 102c0f8:	3909883a 	add	r4,r7,r4
 102c0fc:	2209883a 	add	r4,r4,r8
 102c100:	354d383a 	mul	r6,r6,r21
 102c104:	21c0022e 	bgeu	r4,r7,102c110 <__udivdi3+0x414>
 102c108:	01400074 	movhi	r5,1
 102c10c:	314d883a 	add	r6,r6,r5
 102c110:	202ad43a 	srli	r21,r4,16
 102c114:	354d883a 	add	r6,r6,r21
 102c118:	19803f36 	bltu	r3,r6,102c218 <__udivdi3+0x51c>
 102c11c:	19803926 	beq	r3,r6,102c204 <__udivdi3+0x508>
 102c120:	0007883a 	mov	r3,zero
 102c124:	003fa006 	br	102bfa8 <__alt_data_end+0xfffeeae8>
 102c128:	90e4983a 	sll	r18,r18,r3
 102c12c:	80aad83a 	srl	r21,r16,r2
 102c130:	80e0983a 	sll	r16,r16,r3
 102c134:	9028d43a 	srli	r20,r18,16
 102c138:	9884d83a 	srl	r2,r19,r2
 102c13c:	a809883a 	mov	r4,r21
 102c140:	a00b883a 	mov	r5,r20
 102c144:	80acb03a 	or	r22,r16,r2
 102c148:	98e2983a 	sll	r17,r19,r3
 102c14c:	1022c100 	call	1022c10 <__umodsi3>
 102c150:	a809883a 	mov	r4,r21
 102c154:	a00b883a 	mov	r5,r20
 102c158:	1021883a 	mov	r16,r2
 102c15c:	1022c080 	call	1022c08 <__udivsi3>
 102c160:	957fffcc 	andi	r21,r18,65535
 102c164:	8020943a 	slli	r16,r16,16
 102c168:	b00ad43a 	srli	r5,r22,16
 102c16c:	1567383a 	mul	r19,r2,r21
 102c170:	102f883a 	mov	r23,r2
 102c174:	8148b03a 	or	r4,r16,r5
 102c178:	24c0062e 	bgeu	r4,r19,102c194 <__udivdi3+0x498>
 102c17c:	2489883a 	add	r4,r4,r18
 102c180:	10bfffc4 	addi	r2,r2,-1
 102c184:	24804536 	bltu	r4,r18,102c29c <__udivdi3+0x5a0>
 102c188:	24c0442e 	bgeu	r4,r19,102c29c <__udivdi3+0x5a0>
 102c18c:	bdffff84 	addi	r23,r23,-2
 102c190:	2489883a 	add	r4,r4,r18
 102c194:	24e7c83a 	sub	r19,r4,r19
 102c198:	9809883a 	mov	r4,r19
 102c19c:	a00b883a 	mov	r5,r20
 102c1a0:	1022c100 	call	1022c10 <__umodsi3>
 102c1a4:	1021883a 	mov	r16,r2
 102c1a8:	9809883a 	mov	r4,r19
 102c1ac:	a00b883a 	mov	r5,r20
 102c1b0:	1022c080 	call	1022c08 <__udivsi3>
 102c1b4:	8020943a 	slli	r16,r16,16
 102c1b8:	1007883a 	mov	r3,r2
 102c1bc:	1545383a 	mul	r2,r2,r21
 102c1c0:	b13fffcc 	andi	r4,r22,65535
 102c1c4:	8108b03a 	or	r4,r16,r4
 102c1c8:	2080062e 	bgeu	r4,r2,102c1e4 <__udivdi3+0x4e8>
 102c1cc:	2489883a 	add	r4,r4,r18
 102c1d0:	197fffc4 	addi	r5,r3,-1
 102c1d4:	24802f36 	bltu	r4,r18,102c294 <__udivdi3+0x598>
 102c1d8:	20802e2e 	bgeu	r4,r2,102c294 <__udivdi3+0x598>
 102c1dc:	18ffff84 	addi	r3,r3,-2
 102c1e0:	2489883a 	add	r4,r4,r18
 102c1e4:	b82e943a 	slli	r23,r23,16
 102c1e8:	20a1c83a 	sub	r16,r4,r2
 102c1ec:	1dc6b03a 	or	r3,r3,r23
 102c1f0:	003f4006 	br	102bef4 <__alt_data_end+0xfffeea34>
 102c1f4:	2005883a 	mov	r2,r4
 102c1f8:	003f6606 	br	102bf94 <__alt_data_end+0xfffeead4>
 102c1fc:	1805883a 	mov	r2,r3
 102c200:	003f0a06 	br	102be2c <__alt_data_end+0xfffee96c>
 102c204:	2006943a 	slli	r3,r4,16
 102c208:	9c88983a 	sll	r4,r19,r18
 102c20c:	4a7fffcc 	andi	r9,r9,65535
 102c210:	1a47883a 	add	r3,r3,r9
 102c214:	20ffc22e 	bgeu	r4,r3,102c120 <__alt_data_end+0xfffeec60>
 102c218:	10bfffc4 	addi	r2,r2,-1
 102c21c:	003fc006 	br	102c120 <__alt_data_end+0xfffeec60>
 102c220:	00c00404 	movi	r3,16
 102c224:	180b883a 	mov	r5,r3
 102c228:	003f0c06 	br	102be5c <__alt_data_end+0xfffee99c>
 102c22c:	0007883a 	mov	r3,zero
 102c230:	000b883a 	mov	r5,zero
 102c234:	003f0906 	br	102be5c <__alt_data_end+0xfffee99c>
 102c238:	00800404 	movi	r2,16
 102c23c:	1007883a 	mov	r3,r2
 102c240:	003ec606 	br	102bd5c <__alt_data_end+0xfffee89c>
 102c244:	00800404 	movi	r2,16
 102c248:	1007883a 	mov	r3,r2
 102c24c:	003f1c06 	br	102bec0 <__alt_data_end+0xfffeea00>
 102c250:	0005883a 	mov	r2,zero
 102c254:	0007883a 	mov	r3,zero
 102c258:	003f1906 	br	102bec0 <__alt_data_end+0xfffeea00>
 102c25c:	0005883a 	mov	r2,zero
 102c260:	0007883a 	mov	r3,zero
 102c264:	003ebd06 	br	102bd5c <__alt_data_end+0xfffee89c>
 102c268:	0007883a 	mov	r3,zero
 102c26c:	00800044 	movi	r2,1
 102c270:	003f4d06 	br	102bfa8 <__alt_data_end+0xfffeeae8>
 102c274:	197f942e 	bgeu	r3,r5,102c0c8 <__alt_data_end+0xfffeec08>
 102c278:	10bfff84 	addi	r2,r2,-2
 102c27c:	1dc7883a 	add	r3,r3,r23
 102c280:	003f9206 	br	102c0cc <__alt_data_end+0xfffeec0c>
 102c284:	15bf7e2e 	bgeu	r2,r22,102c080 <__alt_data_end+0xfffeebc0>
 102c288:	843fff84 	addi	r16,r16,-2
 102c28c:	15c5883a 	add	r2,r2,r23
 102c290:	003f7c06 	br	102c084 <__alt_data_end+0xfffeebc4>
 102c294:	2807883a 	mov	r3,r5
 102c298:	003fd206 	br	102c1e4 <__alt_data_end+0xfffeed24>
 102c29c:	102f883a 	mov	r23,r2
 102c2a0:	003fbc06 	br	102c194 <__alt_data_end+0xfffeecd4>
 102c2a4:	843fff84 	addi	r16,r16,-2
 102c2a8:	2489883a 	add	r4,r4,r18
 102c2ac:	003f2506 	br	102bf44 <__alt_data_end+0xfffeea84>
 102c2b0:	843fff84 	addi	r16,r16,-2
 102c2b4:	1485883a 	add	r2,r2,r18
 102c2b8:	003eca06 	br	102bde4 <__alt_data_end+0xfffee924>

0102c2bc <__umoddi3>:
 102c2bc:	defff404 	addi	sp,sp,-48
 102c2c0:	ddc00915 	stw	r23,36(sp)
 102c2c4:	dc400315 	stw	r17,12(sp)
 102c2c8:	dc000215 	stw	r16,8(sp)
 102c2cc:	dfc00b15 	stw	ra,44(sp)
 102c2d0:	df000a15 	stw	fp,40(sp)
 102c2d4:	dd800815 	stw	r22,32(sp)
 102c2d8:	dd400715 	stw	r21,28(sp)
 102c2dc:	dd000615 	stw	r20,24(sp)
 102c2e0:	dcc00515 	stw	r19,20(sp)
 102c2e4:	dc800415 	stw	r18,16(sp)
 102c2e8:	2021883a 	mov	r16,r4
 102c2ec:	2823883a 	mov	r17,r5
 102c2f0:	282f883a 	mov	r23,r5
 102c2f4:	3800381e 	bne	r7,zero,102c3d8 <__umoddi3+0x11c>
 102c2f8:	3027883a 	mov	r19,r6
 102c2fc:	2029883a 	mov	r20,r4
 102c300:	29804e2e 	bgeu	r5,r6,102c43c <__umoddi3+0x180>
 102c304:	00bfffd4 	movui	r2,65535
 102c308:	11809c36 	bltu	r2,r6,102c57c <__umoddi3+0x2c0>
 102c30c:	00803fc4 	movi	r2,255
 102c310:	11813b2e 	bgeu	r2,r6,102c800 <__umoddi3+0x544>
 102c314:	01400204 	movi	r5,8
 102c318:	2805883a 	mov	r2,r5
 102c31c:	314ad83a 	srl	r5,r6,r5
 102c320:	00c040f4 	movhi	r3,259
 102c324:	18c24b04 	addi	r3,r3,2348
 102c328:	194b883a 	add	r5,r3,r5
 102c32c:	29000003 	ldbu	r4,0(r5)
 102c330:	2089883a 	add	r4,r4,r2
 102c334:	00800804 	movi	r2,32
 102c338:	1105c83a 	sub	r2,r2,r4
 102c33c:	1000ec26 	beq	r2,zero,102c6f0 <__umoddi3+0x434>
 102c340:	88a2983a 	sll	r17,r17,r2
 102c344:	8108d83a 	srl	r4,r16,r4
 102c348:	30a6983a 	sll	r19,r6,r2
 102c34c:	80a8983a 	sll	r20,r16,r2
 102c350:	1025883a 	mov	r18,r2
 102c354:	892eb03a 	or	r23,r17,r4
 102c358:	982cd43a 	srli	r22,r19,16
 102c35c:	b809883a 	mov	r4,r23
 102c360:	9d7fffcc 	andi	r21,r19,65535
 102c364:	b00b883a 	mov	r5,r22
 102c368:	1022c100 	call	1022c10 <__umodsi3>
 102c36c:	b809883a 	mov	r4,r23
 102c370:	b00b883a 	mov	r5,r22
 102c374:	1021883a 	mov	r16,r2
 102c378:	1022c080 	call	1022c08 <__udivsi3>
 102c37c:	8020943a 	slli	r16,r16,16
 102c380:	a00cd43a 	srli	r6,r20,16
 102c384:	1545383a 	mul	r2,r2,r21
 102c388:	8188b03a 	or	r4,r16,r6
 102c38c:	2080042e 	bgeu	r4,r2,102c3a0 <__umoddi3+0xe4>
 102c390:	24c9883a 	add	r4,r4,r19
 102c394:	24c00236 	bltu	r4,r19,102c3a0 <__umoddi3+0xe4>
 102c398:	2080012e 	bgeu	r4,r2,102c3a0 <__umoddi3+0xe4>
 102c39c:	24c9883a 	add	r4,r4,r19
 102c3a0:	20a3c83a 	sub	r17,r4,r2
 102c3a4:	8809883a 	mov	r4,r17
 102c3a8:	b00b883a 	mov	r5,r22
 102c3ac:	1022c100 	call	1022c10 <__umodsi3>
 102c3b0:	8809883a 	mov	r4,r17
 102c3b4:	b00b883a 	mov	r5,r22
 102c3b8:	1021883a 	mov	r16,r2
 102c3bc:	1022c080 	call	1022c08 <__udivsi3>
 102c3c0:	8006943a 	slli	r3,r16,16
 102c3c4:	1545383a 	mul	r2,r2,r21
 102c3c8:	a13fffcc 	andi	r4,r20,65535
 102c3cc:	1906b03a 	or	r3,r3,r4
 102c3d0:	1880532e 	bgeu	r3,r2,102c520 <__umoddi3+0x264>
 102c3d4:	00004e06 	br	102c510 <__umoddi3+0x254>
 102c3d8:	29c05536 	bltu	r5,r7,102c530 <__umoddi3+0x274>
 102c3dc:	00bfffd4 	movui	r2,65535
 102c3e0:	11c0612e 	bgeu	r2,r7,102c568 <__umoddi3+0x2ac>
 102c3e4:	00804034 	movhi	r2,256
 102c3e8:	10bfffc4 	addi	r2,r2,-1
 102c3ec:	11c0f82e 	bgeu	r2,r7,102c7d0 <__umoddi3+0x514>
 102c3f0:	01400604 	movi	r5,24
 102c3f4:	282b883a 	mov	r21,r5
 102c3f8:	394ad83a 	srl	r5,r7,r5
 102c3fc:	00c040f4 	movhi	r3,259
 102c400:	18c24b04 	addi	r3,r3,2348
 102c404:	194b883a 	add	r5,r3,r5
 102c408:	28800003 	ldbu	r2,0(r5)
 102c40c:	00c00804 	movi	r3,32
 102c410:	156b883a 	add	r21,r2,r21
 102c414:	1d69c83a 	sub	r20,r3,r21
 102c418:	a000631e 	bne	r20,zero,102c5a8 <__umoddi3+0x2ec>
 102c41c:	3c400136 	bltu	r7,r17,102c424 <__umoddi3+0x168>
 102c420:	81810436 	bltu	r16,r6,102c834 <__umoddi3+0x578>
 102c424:	8185c83a 	sub	r2,r16,r6
 102c428:	89e3c83a 	sub	r17,r17,r7
 102c42c:	8087803a 	cmpltu	r3,r16,r2
 102c430:	88efc83a 	sub	r23,r17,r3
 102c434:	b807883a 	mov	r3,r23
 102c438:	00003f06 	br	102c538 <__umoddi3+0x27c>
 102c43c:	3000041e 	bne	r6,zero,102c450 <__umoddi3+0x194>
 102c440:	01000044 	movi	r4,1
 102c444:	000b883a 	mov	r5,zero
 102c448:	1022c080 	call	1022c08 <__udivsi3>
 102c44c:	1027883a 	mov	r19,r2
 102c450:	00bfffd4 	movui	r2,65535
 102c454:	14c04f2e 	bgeu	r2,r19,102c594 <__umoddi3+0x2d8>
 102c458:	00804034 	movhi	r2,256
 102c45c:	10bfffc4 	addi	r2,r2,-1
 102c460:	14c0e42e 	bgeu	r2,r19,102c7f4 <__umoddi3+0x538>
 102c464:	00800604 	movi	r2,24
 102c468:	1007883a 	mov	r3,r2
 102c46c:	9884d83a 	srl	r2,r19,r2
 102c470:	010040f4 	movhi	r4,259
 102c474:	21024b04 	addi	r4,r4,2348
 102c478:	2085883a 	add	r2,r4,r2
 102c47c:	11000003 	ldbu	r4,0(r2)
 102c480:	00800804 	movi	r2,32
 102c484:	20c7883a 	add	r3,r4,r3
 102c488:	10c5c83a 	sub	r2,r2,r3
 102c48c:	10009a1e 	bne	r2,zero,102c6f8 <__umoddi3+0x43c>
 102c490:	982cd43a 	srli	r22,r19,16
 102c494:	8ce3c83a 	sub	r17,r17,r19
 102c498:	9c3fffcc 	andi	r16,r19,65535
 102c49c:	0025883a 	mov	r18,zero
 102c4a0:	8809883a 	mov	r4,r17
 102c4a4:	b00b883a 	mov	r5,r22
 102c4a8:	1022c100 	call	1022c10 <__umodsi3>
 102c4ac:	8809883a 	mov	r4,r17
 102c4b0:	b00b883a 	mov	r5,r22
 102c4b4:	102b883a 	mov	r21,r2
 102c4b8:	1022c080 	call	1022c08 <__udivsi3>
 102c4bc:	a806943a 	slli	r3,r21,16
 102c4c0:	a008d43a 	srli	r4,r20,16
 102c4c4:	1405383a 	mul	r2,r2,r16
 102c4c8:	190cb03a 	or	r6,r3,r4
 102c4cc:	3080032e 	bgeu	r6,r2,102c4dc <__umoddi3+0x220>
 102c4d0:	34cd883a 	add	r6,r6,r19
 102c4d4:	34c00136 	bltu	r6,r19,102c4dc <__umoddi3+0x220>
 102c4d8:	3080d436 	bltu	r6,r2,102c82c <__umoddi3+0x570>
 102c4dc:	30abc83a 	sub	r21,r6,r2
 102c4e0:	a809883a 	mov	r4,r21
 102c4e4:	b00b883a 	mov	r5,r22
 102c4e8:	1022c100 	call	1022c10 <__umodsi3>
 102c4ec:	1023883a 	mov	r17,r2
 102c4f0:	a809883a 	mov	r4,r21
 102c4f4:	b00b883a 	mov	r5,r22
 102c4f8:	1022c080 	call	1022c08 <__udivsi3>
 102c4fc:	8822943a 	slli	r17,r17,16
 102c500:	1405383a 	mul	r2,r2,r16
 102c504:	a13fffcc 	andi	r4,r20,65535
 102c508:	8906b03a 	or	r3,r17,r4
 102c50c:	1880042e 	bgeu	r3,r2,102c520 <__umoddi3+0x264>
 102c510:	1cc7883a 	add	r3,r3,r19
 102c514:	1cc00236 	bltu	r3,r19,102c520 <__umoddi3+0x264>
 102c518:	1880012e 	bgeu	r3,r2,102c520 <__umoddi3+0x264>
 102c51c:	1cc7883a 	add	r3,r3,r19
 102c520:	1887c83a 	sub	r3,r3,r2
 102c524:	1c84d83a 	srl	r2,r3,r18
 102c528:	0007883a 	mov	r3,zero
 102c52c:	00000206 	br	102c538 <__umoddi3+0x27c>
 102c530:	2005883a 	mov	r2,r4
 102c534:	2807883a 	mov	r3,r5
 102c538:	dfc00b17 	ldw	ra,44(sp)
 102c53c:	df000a17 	ldw	fp,40(sp)
 102c540:	ddc00917 	ldw	r23,36(sp)
 102c544:	dd800817 	ldw	r22,32(sp)
 102c548:	dd400717 	ldw	r21,28(sp)
 102c54c:	dd000617 	ldw	r20,24(sp)
 102c550:	dcc00517 	ldw	r19,20(sp)
 102c554:	dc800417 	ldw	r18,16(sp)
 102c558:	dc400317 	ldw	r17,12(sp)
 102c55c:	dc000217 	ldw	r16,8(sp)
 102c560:	dec00c04 	addi	sp,sp,48
 102c564:	f800283a 	ret
 102c568:	00803fc4 	movi	r2,255
 102c56c:	11c0952e 	bgeu	r2,r7,102c7c4 <__umoddi3+0x508>
 102c570:	01400204 	movi	r5,8
 102c574:	282b883a 	mov	r21,r5
 102c578:	003f9f06 	br	102c3f8 <__alt_data_end+0xfffeef38>
 102c57c:	00804034 	movhi	r2,256
 102c580:	10bfffc4 	addi	r2,r2,-1
 102c584:	1180952e 	bgeu	r2,r6,102c7dc <__umoddi3+0x520>
 102c588:	01400604 	movi	r5,24
 102c58c:	2805883a 	mov	r2,r5
 102c590:	003f6206 	br	102c31c <__alt_data_end+0xfffeee5c>
 102c594:	00803fc4 	movi	r2,255
 102c598:	14c0932e 	bgeu	r2,r19,102c7e8 <__umoddi3+0x52c>
 102c59c:	00800204 	movi	r2,8
 102c5a0:	1007883a 	mov	r3,r2
 102c5a4:	003fb106 	br	102c46c <__alt_data_end+0xfffeefac>
 102c5a8:	3548d83a 	srl	r4,r6,r21
 102c5ac:	3d0e983a 	sll	r7,r7,r20
 102c5b0:	8d10983a 	sll	r8,r17,r20
 102c5b4:	8d6cd83a 	srl	r22,r17,r21
 102c5b8:	3922b03a 	or	r17,r7,r4
 102c5bc:	882ed43a 	srli	r23,r17,16
 102c5c0:	8564d83a 	srl	r18,r16,r21
 102c5c4:	b009883a 	mov	r4,r22
 102c5c8:	b80b883a 	mov	r5,r23
 102c5cc:	44a4b03a 	or	r18,r8,r18
 102c5d0:	3526983a 	sll	r19,r6,r20
 102c5d4:	1022c100 	call	1022c10 <__umodsi3>
 102c5d8:	b009883a 	mov	r4,r22
 102c5dc:	b80b883a 	mov	r5,r23
 102c5e0:	1039883a 	mov	fp,r2
 102c5e4:	1022c080 	call	1022c08 <__udivsi3>
 102c5e8:	102d883a 	mov	r22,r2
 102c5ec:	8a3fffcc 	andi	r8,r17,65535
 102c5f0:	e004943a 	slli	r2,fp,16
 102c5f4:	900cd43a 	srli	r6,r18,16
 102c5f8:	b239383a 	mul	fp,r22,r8
 102c5fc:	8520983a 	sll	r16,r16,r20
 102c600:	118ab03a 	or	r5,r2,r6
 102c604:	2f00042e 	bgeu	r5,fp,102c618 <__umoddi3+0x35c>
 102c608:	2c4b883a 	add	r5,r5,r17
 102c60c:	b0bfffc4 	addi	r2,r22,-1
 102c610:	2c40822e 	bgeu	r5,r17,102c81c <__umoddi3+0x560>
 102c614:	102d883a 	mov	r22,r2
 102c618:	2f39c83a 	sub	fp,r5,fp
 102c61c:	e009883a 	mov	r4,fp
 102c620:	b80b883a 	mov	r5,r23
 102c624:	da000115 	stw	r8,4(sp)
 102c628:	1022c100 	call	1022c10 <__umodsi3>
 102c62c:	e009883a 	mov	r4,fp
 102c630:	b80b883a 	mov	r5,r23
 102c634:	d8800015 	stw	r2,0(sp)
 102c638:	1022c080 	call	1022c08 <__udivsi3>
 102c63c:	d9800017 	ldw	r6,0(sp)
 102c640:	da000117 	ldw	r8,4(sp)
 102c644:	94bfffcc 	andi	r18,r18,65535
 102c648:	300c943a 	slli	r6,r6,16
 102c64c:	1209383a 	mul	r4,r2,r8
 102c650:	3490b03a 	or	r8,r6,r18
 102c654:	4100042e 	bgeu	r8,r4,102c668 <__umoddi3+0x3ac>
 102c658:	4451883a 	add	r8,r8,r17
 102c65c:	10ffffc4 	addi	r3,r2,-1
 102c660:	44406a2e 	bgeu	r8,r17,102c80c <__umoddi3+0x550>
 102c664:	1805883a 	mov	r2,r3
 102c668:	b012943a 	slli	r9,r22,16
 102c66c:	9abfffcc 	andi	r10,r19,65535
 102c670:	980ed43a 	srli	r7,r19,16
 102c674:	124ab03a 	or	r5,r2,r9
 102c678:	2a7fffcc 	andi	r9,r5,65535
 102c67c:	280ad43a 	srli	r5,r5,16
 102c680:	4a8d383a 	mul	r6,r9,r10
 102c684:	49d3383a 	mul	r9,r9,r7
 102c688:	2a95383a 	mul	r10,r5,r10
 102c68c:	3004d43a 	srli	r2,r6,16
 102c690:	4111c83a 	sub	r8,r8,r4
 102c694:	5253883a 	add	r9,r10,r9
 102c698:	4893883a 	add	r9,r9,r2
 102c69c:	29cb383a 	mul	r5,r5,r7
 102c6a0:	4a80022e 	bgeu	r9,r10,102c6ac <__umoddi3+0x3f0>
 102c6a4:	00800074 	movhi	r2,1
 102c6a8:	288b883a 	add	r5,r5,r2
 102c6ac:	4808d43a 	srli	r4,r9,16
 102c6b0:	4812943a 	slli	r9,r9,16
 102c6b4:	31bfffcc 	andi	r6,r6,65535
 102c6b8:	290b883a 	add	r5,r5,r4
 102c6bc:	498d883a 	add	r6,r9,r6
 102c6c0:	41403a36 	bltu	r8,r5,102c7ac <__umoddi3+0x4f0>
 102c6c4:	41405d26 	beq	r8,r5,102c83c <__umoddi3+0x580>
 102c6c8:	4149c83a 	sub	r4,r8,r5
 102c6cc:	300f883a 	mov	r7,r6
 102c6d0:	81cfc83a 	sub	r7,r16,r7
 102c6d4:	81c7803a 	cmpltu	r3,r16,r7
 102c6d8:	20c7c83a 	sub	r3,r4,r3
 102c6dc:	1d44983a 	sll	r2,r3,r21
 102c6e0:	3d0ed83a 	srl	r7,r7,r20
 102c6e4:	1d06d83a 	srl	r3,r3,r20
 102c6e8:	11c4b03a 	or	r2,r2,r7
 102c6ec:	003f9206 	br	102c538 <__alt_data_end+0xfffef078>
 102c6f0:	0025883a 	mov	r18,zero
 102c6f4:	003f1806 	br	102c358 <__alt_data_end+0xfffeee98>
 102c6f8:	98a6983a 	sll	r19,r19,r2
 102c6fc:	88e8d83a 	srl	r20,r17,r3
 102c700:	80c6d83a 	srl	r3,r16,r3
 102c704:	982cd43a 	srli	r22,r19,16
 102c708:	88a2983a 	sll	r17,r17,r2
 102c70c:	a009883a 	mov	r4,r20
 102c710:	b00b883a 	mov	r5,r22
 102c714:	88eab03a 	or	r21,r17,r3
 102c718:	1025883a 	mov	r18,r2
 102c71c:	1022c100 	call	1022c10 <__umodsi3>
 102c720:	a009883a 	mov	r4,r20
 102c724:	b00b883a 	mov	r5,r22
 102c728:	1023883a 	mov	r17,r2
 102c72c:	1022c080 	call	1022c08 <__udivsi3>
 102c730:	9f3fffcc 	andi	fp,r19,65535
 102c734:	8822943a 	slli	r17,r17,16
 102c738:	a80ad43a 	srli	r5,r21,16
 102c73c:	1705383a 	mul	r2,r2,fp
 102c740:	84a8983a 	sll	r20,r16,r18
 102c744:	8948b03a 	or	r4,r17,r5
 102c748:	2080042e 	bgeu	r4,r2,102c75c <__umoddi3+0x4a0>
 102c74c:	24c9883a 	add	r4,r4,r19
 102c750:	24c00236 	bltu	r4,r19,102c75c <__umoddi3+0x4a0>
 102c754:	2080012e 	bgeu	r4,r2,102c75c <__umoddi3+0x4a0>
 102c758:	24c9883a 	add	r4,r4,r19
 102c75c:	20afc83a 	sub	r23,r4,r2
 102c760:	b809883a 	mov	r4,r23
 102c764:	b00b883a 	mov	r5,r22
 102c768:	1022c100 	call	1022c10 <__umodsi3>
 102c76c:	1023883a 	mov	r17,r2
 102c770:	b809883a 	mov	r4,r23
 102c774:	b00b883a 	mov	r5,r22
 102c778:	1022c080 	call	1022c08 <__udivsi3>
 102c77c:	8822943a 	slli	r17,r17,16
 102c780:	1705383a 	mul	r2,r2,fp
 102c784:	a93fffcc 	andi	r4,r21,65535
 102c788:	8908b03a 	or	r4,r17,r4
 102c78c:	2080042e 	bgeu	r4,r2,102c7a0 <__umoddi3+0x4e4>
 102c790:	24c9883a 	add	r4,r4,r19
 102c794:	24c00236 	bltu	r4,r19,102c7a0 <__umoddi3+0x4e4>
 102c798:	2080012e 	bgeu	r4,r2,102c7a0 <__umoddi3+0x4e4>
 102c79c:	24c9883a 	add	r4,r4,r19
 102c7a0:	20a3c83a 	sub	r17,r4,r2
 102c7a4:	e021883a 	mov	r16,fp
 102c7a8:	003f3d06 	br	102c4a0 <__alt_data_end+0xfffeefe0>
 102c7ac:	34cfc83a 	sub	r7,r6,r19
 102c7b0:	2c4bc83a 	sub	r5,r5,r17
 102c7b4:	31cd803a 	cmpltu	r6,r6,r7
 102c7b8:	298dc83a 	sub	r6,r5,r6
 102c7bc:	4189c83a 	sub	r4,r8,r6
 102c7c0:	003fc306 	br	102c6d0 <__alt_data_end+0xfffef210>
 102c7c4:	000b883a 	mov	r5,zero
 102c7c8:	002b883a 	mov	r21,zero
 102c7cc:	003f0a06 	br	102c3f8 <__alt_data_end+0xfffeef38>
 102c7d0:	01400404 	movi	r5,16
 102c7d4:	282b883a 	mov	r21,r5
 102c7d8:	003f0706 	br	102c3f8 <__alt_data_end+0xfffeef38>
 102c7dc:	01400404 	movi	r5,16
 102c7e0:	2805883a 	mov	r2,r5
 102c7e4:	003ecd06 	br	102c31c <__alt_data_end+0xfffeee5c>
 102c7e8:	0005883a 	mov	r2,zero
 102c7ec:	0007883a 	mov	r3,zero
 102c7f0:	003f1e06 	br	102c46c <__alt_data_end+0xfffeefac>
 102c7f4:	00800404 	movi	r2,16
 102c7f8:	1007883a 	mov	r3,r2
 102c7fc:	003f1b06 	br	102c46c <__alt_data_end+0xfffeefac>
 102c800:	000b883a 	mov	r5,zero
 102c804:	0005883a 	mov	r2,zero
 102c808:	003ec406 	br	102c31c <__alt_data_end+0xfffeee5c>
 102c80c:	413f952e 	bgeu	r8,r4,102c664 <__alt_data_end+0xfffef1a4>
 102c810:	10bfff84 	addi	r2,r2,-2
 102c814:	4451883a 	add	r8,r8,r17
 102c818:	003f9306 	br	102c668 <__alt_data_end+0xfffef1a8>
 102c81c:	2f3f7d2e 	bgeu	r5,fp,102c614 <__alt_data_end+0xfffef154>
 102c820:	b5bfff84 	addi	r22,r22,-2
 102c824:	2c4b883a 	add	r5,r5,r17
 102c828:	003f7b06 	br	102c618 <__alt_data_end+0xfffef158>
 102c82c:	34cd883a 	add	r6,r6,r19
 102c830:	003f2a06 	br	102c4dc <__alt_data_end+0xfffef01c>
 102c834:	8005883a 	mov	r2,r16
 102c838:	003efe06 	br	102c434 <__alt_data_end+0xfffeef74>
 102c83c:	81bfdb36 	bltu	r16,r6,102c7ac <__alt_data_end+0xfffef2ec>
 102c840:	300f883a 	mov	r7,r6
 102c844:	0009883a 	mov	r4,zero
 102c848:	003fa106 	br	102c6d0 <__alt_data_end+0xfffef210>

0102c84c <__adddf3>:
 102c84c:	02000434 	movhi	r8,16
 102c850:	423fffc4 	addi	r8,r8,-1
 102c854:	defffb04 	addi	sp,sp,-20
 102c858:	2a12703a 	and	r9,r5,r8
 102c85c:	2806d7fa 	srli	r3,r5,31
 102c860:	3a10703a 	and	r8,r7,r8
 102c864:	3804d53a 	srli	r2,r7,20
 102c868:	3014d77a 	srli	r10,r6,29
 102c86c:	dc000015 	stw	r16,0(sp)
 102c870:	481290fa 	slli	r9,r9,3
 102c874:	2820d53a 	srli	r16,r5,20
 102c878:	401090fa 	slli	r8,r8,3
 102c87c:	200ad77a 	srli	r5,r4,29
 102c880:	380ed7fa 	srli	r7,r7,31
 102c884:	dc800215 	stw	r18,8(sp)
 102c888:	dc400115 	stw	r17,4(sp)
 102c88c:	dfc00415 	stw	ra,16(sp)
 102c890:	dcc00315 	stw	r19,12(sp)
 102c894:	1c803fcc 	andi	r18,r3,255
 102c898:	8401ffcc 	andi	r16,r16,2047
 102c89c:	494ab03a 	or	r5,r9,r5
 102c8a0:	202290fa 	slli	r17,r4,3
 102c8a4:	1081ffcc 	andi	r2,r2,2047
 102c8a8:	4290b03a 	or	r8,r8,r10
 102c8ac:	300c90fa 	slli	r6,r6,3
 102c8b0:	91c07026 	beq	r18,r7,102ca74 <__adddf3+0x228>
 102c8b4:	8087c83a 	sub	r3,r16,r2
 102c8b8:	00c0b30e 	bge	zero,r3,102cb88 <__adddf3+0x33c>
 102c8bc:	10002a1e 	bne	r2,zero,102c968 <__adddf3+0x11c>
 102c8c0:	4184b03a 	or	r2,r8,r6
 102c8c4:	1000991e 	bne	r2,zero,102cb2c <__adddf3+0x2e0>
 102c8c8:	888001cc 	andi	r2,r17,7
 102c8cc:	10005b26 	beq	r2,zero,102ca3c <__adddf3+0x1f0>
 102c8d0:	88c003cc 	andi	r3,r17,15
 102c8d4:	00800104 	movi	r2,4
 102c8d8:	18805826 	beq	r3,r2,102ca3c <__adddf3+0x1f0>
 102c8dc:	89800104 	addi	r6,r17,4
 102c8e0:	3463803a 	cmpltu	r17,r6,r17
 102c8e4:	2c4b883a 	add	r5,r5,r17
 102c8e8:	2880202c 	andhi	r2,r5,128
 102c8ec:	9007883a 	mov	r3,r18
 102c8f0:	3023883a 	mov	r17,r6
 102c8f4:	10005426 	beq	r2,zero,102ca48 <__adddf3+0x1fc>
 102c8f8:	84000044 	addi	r16,r16,1
 102c8fc:	0081ffc4 	movi	r2,2047
 102c900:	8080c126 	beq	r16,r2,102cc08 <__adddf3+0x3bc>
 102c904:	013fe034 	movhi	r4,65408
 102c908:	213fffc4 	addi	r4,r4,-1
 102c90c:	290a703a 	and	r5,r5,r4
 102c910:	2804977a 	slli	r2,r5,29
 102c914:	280a927a 	slli	r5,r5,9
 102c918:	8822d0fa 	srli	r17,r17,3
 102c91c:	8401ffcc 	andi	r16,r16,2047
 102c920:	2808d33a 	srli	r4,r5,12
 102c924:	1444b03a 	or	r2,r2,r17
 102c928:	8401ffcc 	andi	r16,r16,2047
 102c92c:	800a953a 	slli	r5,r16,20
 102c930:	18c03fcc 	andi	r3,r3,255
 102c934:	04000434 	movhi	r16,16
 102c938:	180697fa 	slli	r3,r3,31
 102c93c:	843fffc4 	addi	r16,r16,-1
 102c940:	2420703a 	and	r16,r4,r16
 102c944:	8160b03a 	or	r16,r16,r5
 102c948:	80c6b03a 	or	r3,r16,r3
 102c94c:	dfc00417 	ldw	ra,16(sp)
 102c950:	dcc00317 	ldw	r19,12(sp)
 102c954:	dc800217 	ldw	r18,8(sp)
 102c958:	dc400117 	ldw	r17,4(sp)
 102c95c:	dc000017 	ldw	r16,0(sp)
 102c960:	dec00504 	addi	sp,sp,20
 102c964:	f800283a 	ret
 102c968:	0081ffc4 	movi	r2,2047
 102c96c:	80bfd626 	beq	r16,r2,102c8c8 <__alt_data_end+0xfffef408>
 102c970:	42002034 	orhi	r8,r8,128
 102c974:	00800e04 	movi	r2,56
 102c978:	10c0a616 	blt	r2,r3,102cc14 <__adddf3+0x3c8>
 102c97c:	008007c4 	movi	r2,31
 102c980:	10c0c916 	blt	r2,r3,102cca8 <__adddf3+0x45c>
 102c984:	00800804 	movi	r2,32
 102c988:	10c5c83a 	sub	r2,r2,r3
 102c98c:	408e983a 	sll	r7,r8,r2
 102c990:	30c8d83a 	srl	r4,r6,r3
 102c994:	3084983a 	sll	r2,r6,r2
 102c998:	40c6d83a 	srl	r3,r8,r3
 102c99c:	390cb03a 	or	r6,r7,r4
 102c9a0:	1004c03a 	cmpne	r2,r2,zero
 102c9a4:	308cb03a 	or	r6,r6,r2
 102c9a8:	898dc83a 	sub	r6,r17,r6
 102c9ac:	89a3803a 	cmpltu	r17,r17,r6
 102c9b0:	28cbc83a 	sub	r5,r5,r3
 102c9b4:	2c4bc83a 	sub	r5,r5,r17
 102c9b8:	3023883a 	mov	r17,r6
 102c9bc:	2880202c 	andhi	r2,r5,128
 102c9c0:	10006d26 	beq	r2,zero,102cb78 <__adddf3+0x32c>
 102c9c4:	04c02034 	movhi	r19,128
 102c9c8:	9cffffc4 	addi	r19,r19,-1
 102c9cc:	2ce6703a 	and	r19,r5,r19
 102c9d0:	98007e26 	beq	r19,zero,102cbcc <__adddf3+0x380>
 102c9d4:	9809883a 	mov	r4,r19
 102c9d8:	1022a880 	call	1022a88 <__clzsi2>
 102c9dc:	10fffe04 	addi	r3,r2,-8
 102c9e0:	010007c4 	movi	r4,31
 102c9e4:	20c07f16 	blt	r4,r3,102cbe4 <__adddf3+0x398>
 102c9e8:	01400a04 	movi	r5,40
 102c9ec:	2885c83a 	sub	r2,r5,r2
 102c9f0:	888ad83a 	srl	r5,r17,r2
 102c9f4:	98e6983a 	sll	r19,r19,r3
 102c9f8:	88e2983a 	sll	r17,r17,r3
 102c9fc:	2ce6b03a 	or	r19,r5,r19
 102ca00:	1c007c16 	blt	r3,r16,102cbf4 <__adddf3+0x3a8>
 102ca04:	1c21c83a 	sub	r16,r3,r16
 102ca08:	81400044 	addi	r5,r16,1
 102ca0c:	00c007c4 	movi	r3,31
 102ca10:	19409816 	blt	r3,r5,102cc74 <__adddf3+0x428>
 102ca14:	1c21c83a 	sub	r16,r3,r16
 102ca18:	8c08983a 	sll	r4,r17,r16
 102ca1c:	8946d83a 	srl	r3,r17,r5
 102ca20:	9c20983a 	sll	r16,r19,r16
 102ca24:	2008c03a 	cmpne	r4,r4,zero
 102ca28:	994ad83a 	srl	r5,r19,r5
 102ca2c:	1c06b03a 	or	r3,r3,r16
 102ca30:	1922b03a 	or	r17,r3,r4
 102ca34:	0021883a 	mov	r16,zero
 102ca38:	003fa306 	br	102c8c8 <__alt_data_end+0xfffef408>
 102ca3c:	2880202c 	andhi	r2,r5,128
 102ca40:	9007883a 	mov	r3,r18
 102ca44:	103fac1e 	bne	r2,zero,102c8f8 <__alt_data_end+0xfffef438>
 102ca48:	2804977a 	slli	r2,r5,29
 102ca4c:	8822d0fa 	srli	r17,r17,3
 102ca50:	0101ffc4 	movi	r4,2047
 102ca54:	280ad0fa 	srli	r5,r5,3
 102ca58:	1444b03a 	or	r2,r2,r17
 102ca5c:	81002c26 	beq	r16,r4,102cb10 <__adddf3+0x2c4>
 102ca60:	8120703a 	and	r16,r16,r4
 102ca64:	01000434 	movhi	r4,16
 102ca68:	213fffc4 	addi	r4,r4,-1
 102ca6c:	2908703a 	and	r4,r5,r4
 102ca70:	003fad06 	br	102c928 <__alt_data_end+0xfffef468>
 102ca74:	8089c83a 	sub	r4,r16,r2
 102ca78:	01006a0e 	bge	zero,r4,102cc24 <__adddf3+0x3d8>
 102ca7c:	10003326 	beq	r2,zero,102cb4c <__adddf3+0x300>
 102ca80:	0081ffc4 	movi	r2,2047
 102ca84:	80bf9026 	beq	r16,r2,102c8c8 <__alt_data_end+0xfffef408>
 102ca88:	42002034 	orhi	r8,r8,128
 102ca8c:	00800e04 	movi	r2,56
 102ca90:	1100b116 	blt	r2,r4,102cd58 <__adddf3+0x50c>
 102ca94:	008007c4 	movi	r2,31
 102ca98:	1100e216 	blt	r2,r4,102ce24 <__adddf3+0x5d8>
 102ca9c:	00800804 	movi	r2,32
 102caa0:	1105c83a 	sub	r2,r2,r4
 102caa4:	4092983a 	sll	r9,r8,r2
 102caa8:	310ed83a 	srl	r7,r6,r4
 102caac:	3084983a 	sll	r2,r6,r2
 102cab0:	4110d83a 	srl	r8,r8,r4
 102cab4:	49ccb03a 	or	r6,r9,r7
 102cab8:	1004c03a 	cmpne	r2,r2,zero
 102cabc:	308cb03a 	or	r6,r6,r2
 102cac0:	344d883a 	add	r6,r6,r17
 102cac4:	3463803a 	cmpltu	r17,r6,r17
 102cac8:	414b883a 	add	r5,r8,r5
 102cacc:	2c4b883a 	add	r5,r5,r17
 102cad0:	3023883a 	mov	r17,r6
 102cad4:	2880202c 	andhi	r2,r5,128
 102cad8:	10002726 	beq	r2,zero,102cb78 <__adddf3+0x32c>
 102cadc:	84000044 	addi	r16,r16,1
 102cae0:	0081ffc4 	movi	r2,2047
 102cae4:	8080ae26 	beq	r16,r2,102cda0 <__adddf3+0x554>
 102cae8:	00bfe034 	movhi	r2,65408
 102caec:	10bfffc4 	addi	r2,r2,-1
 102caf0:	288a703a 	and	r5,r5,r2
 102caf4:	880cd07a 	srli	r6,r17,1
 102caf8:	280897fa 	slli	r4,r5,31
 102cafc:	88c0004c 	andi	r3,r17,1
 102cb00:	30e2b03a 	or	r17,r6,r3
 102cb04:	280ad07a 	srli	r5,r5,1
 102cb08:	8922b03a 	or	r17,r17,r4
 102cb0c:	003f6e06 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cb10:	1148b03a 	or	r4,r2,r5
 102cb14:	20003c26 	beq	r4,zero,102cc08 <__adddf3+0x3bc>
 102cb18:	29000234 	orhi	r4,r5,8
 102cb1c:	01400434 	movhi	r5,16
 102cb20:	297fffc4 	addi	r5,r5,-1
 102cb24:	2148703a 	and	r4,r4,r5
 102cb28:	003f7f06 	br	102c928 <__alt_data_end+0xfffef468>
 102cb2c:	18ffffc4 	addi	r3,r3,-1
 102cb30:	18004d1e 	bne	r3,zero,102cc68 <__adddf3+0x41c>
 102cb34:	898dc83a 	sub	r6,r17,r6
 102cb38:	89a3803a 	cmpltu	r17,r17,r6
 102cb3c:	2a0bc83a 	sub	r5,r5,r8
 102cb40:	2c4bc83a 	sub	r5,r5,r17
 102cb44:	3023883a 	mov	r17,r6
 102cb48:	003f9c06 	br	102c9bc <__alt_data_end+0xfffef4fc>
 102cb4c:	4184b03a 	or	r2,r8,r6
 102cb50:	103f5d26 	beq	r2,zero,102c8c8 <__alt_data_end+0xfffef408>
 102cb54:	213fffc4 	addi	r4,r4,-1
 102cb58:	203fd926 	beq	r4,zero,102cac0 <__alt_data_end+0xfffef600>
 102cb5c:	0081ffc4 	movi	r2,2047
 102cb60:	80bfca1e 	bne	r16,r2,102ca8c <__alt_data_end+0xfffef5cc>
 102cb64:	003f5806 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cb68:	10c8b03a 	or	r4,r2,r3
 102cb6c:	20008b26 	beq	r4,zero,102cd9c <__adddf3+0x550>
 102cb70:	100b883a 	mov	r5,r2
 102cb74:	1823883a 	mov	r17,r3
 102cb78:	888001cc 	andi	r2,r17,7
 102cb7c:	103f541e 	bne	r2,zero,102c8d0 <__alt_data_end+0xfffef410>
 102cb80:	9007883a 	mov	r3,r18
 102cb84:	003fb006 	br	102ca48 <__alt_data_end+0xfffef588>
 102cb88:	1800531e 	bne	r3,zero,102ccd8 <__adddf3+0x48c>
 102cb8c:	80800044 	addi	r2,r16,1
 102cb90:	1081ffcc 	andi	r2,r2,2047
 102cb94:	00c00044 	movi	r3,1
 102cb98:	1880990e 	bge	r3,r2,102ce00 <__adddf3+0x5b4>
 102cb9c:	8985c83a 	sub	r2,r17,r6
 102cba0:	8887803a 	cmpltu	r3,r17,r2
 102cba4:	2a27c83a 	sub	r19,r5,r8
 102cba8:	98e7c83a 	sub	r19,r19,r3
 102cbac:	98c0202c 	andhi	r3,r19,128
 102cbb0:	18006226 	beq	r3,zero,102cd3c <__adddf3+0x4f0>
 102cbb4:	3463c83a 	sub	r17,r6,r17
 102cbb8:	4151c83a 	sub	r8,r8,r5
 102cbbc:	344d803a 	cmpltu	r6,r6,r17
 102cbc0:	41a7c83a 	sub	r19,r8,r6
 102cbc4:	3825883a 	mov	r18,r7
 102cbc8:	983f821e 	bne	r19,zero,102c9d4 <__alt_data_end+0xfffef514>
 102cbcc:	8809883a 	mov	r4,r17
 102cbd0:	1022a880 	call	1022a88 <__clzsi2>
 102cbd4:	10800804 	addi	r2,r2,32
 102cbd8:	10fffe04 	addi	r3,r2,-8
 102cbdc:	010007c4 	movi	r4,31
 102cbe0:	20ff810e 	bge	r4,r3,102c9e8 <__alt_data_end+0xfffef528>
 102cbe4:	14fff604 	addi	r19,r2,-40
 102cbe8:	8ce6983a 	sll	r19,r17,r19
 102cbec:	0023883a 	mov	r17,zero
 102cbf0:	1c3f840e 	bge	r3,r16,102ca04 <__alt_data_end+0xfffef544>
 102cbf4:	017fe034 	movhi	r5,65408
 102cbf8:	297fffc4 	addi	r5,r5,-1
 102cbfc:	80e1c83a 	sub	r16,r16,r3
 102cc00:	994a703a 	and	r5,r19,r5
 102cc04:	003f3006 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cc08:	0009883a 	mov	r4,zero
 102cc0c:	0005883a 	mov	r2,zero
 102cc10:	003f4506 	br	102c928 <__alt_data_end+0xfffef468>
 102cc14:	418cb03a 	or	r6,r8,r6
 102cc18:	300cc03a 	cmpne	r6,r6,zero
 102cc1c:	0007883a 	mov	r3,zero
 102cc20:	003f6106 	br	102c9a8 <__alt_data_end+0xfffef4e8>
 102cc24:	2000921e 	bne	r4,zero,102ce70 <__adddf3+0x624>
 102cc28:	80800044 	addi	r2,r16,1
 102cc2c:	11c1ffcc 	andi	r7,r2,2047
 102cc30:	01000044 	movi	r4,1
 102cc34:	21c0610e 	bge	r4,r7,102cdbc <__adddf3+0x570>
 102cc38:	0101ffc4 	movi	r4,2047
 102cc3c:	1100a326 	beq	r2,r4,102cecc <__adddf3+0x680>
 102cc40:	344d883a 	add	r6,r6,r17
 102cc44:	3463803a 	cmpltu	r17,r6,r17
 102cc48:	414b883a 	add	r5,r8,r5
 102cc4c:	2c4b883a 	add	r5,r5,r17
 102cc50:	282297fa 	slli	r17,r5,31
 102cc54:	300cd07a 	srli	r6,r6,1
 102cc58:	280ad07a 	srli	r5,r5,1
 102cc5c:	1021883a 	mov	r16,r2
 102cc60:	89a2b03a 	or	r17,r17,r6
 102cc64:	003f1806 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cc68:	0081ffc4 	movi	r2,2047
 102cc6c:	80bf411e 	bne	r16,r2,102c974 <__alt_data_end+0xfffef4b4>
 102cc70:	003f1506 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cc74:	80bff844 	addi	r2,r16,-31
 102cc78:	00c00804 	movi	r3,32
 102cc7c:	9884d83a 	srl	r2,r19,r2
 102cc80:	28c04a26 	beq	r5,r3,102cdac <__adddf3+0x560>
 102cc84:	00c00fc4 	movi	r3,63
 102cc88:	1c21c83a 	sub	r16,r3,r16
 102cc8c:	9c26983a 	sll	r19,r19,r16
 102cc90:	9c62b03a 	or	r17,r19,r17
 102cc94:	8822c03a 	cmpne	r17,r17,zero
 102cc98:	88a2b03a 	or	r17,r17,r2
 102cc9c:	000b883a 	mov	r5,zero
 102cca0:	0021883a 	mov	r16,zero
 102cca4:	003fb406 	br	102cb78 <__alt_data_end+0xfffef6b8>
 102cca8:	18bff804 	addi	r2,r3,-32
 102ccac:	01000804 	movi	r4,32
 102ccb0:	4084d83a 	srl	r2,r8,r2
 102ccb4:	19003f26 	beq	r3,r4,102cdb4 <__adddf3+0x568>
 102ccb8:	01001004 	movi	r4,64
 102ccbc:	20c7c83a 	sub	r3,r4,r3
 102ccc0:	40d0983a 	sll	r8,r8,r3
 102ccc4:	418cb03a 	or	r6,r8,r6
 102ccc8:	300cc03a 	cmpne	r6,r6,zero
 102cccc:	308cb03a 	or	r6,r6,r2
 102ccd0:	0007883a 	mov	r3,zero
 102ccd4:	003f3406 	br	102c9a8 <__alt_data_end+0xfffef4e8>
 102ccd8:	80002326 	beq	r16,zero,102cd68 <__adddf3+0x51c>
 102ccdc:	0101ffc4 	movi	r4,2047
 102cce0:	11005e26 	beq	r2,r4,102ce5c <__adddf3+0x610>
 102cce4:	00c7c83a 	sub	r3,zero,r3
 102cce8:	29402034 	orhi	r5,r5,128
 102ccec:	01000e04 	movi	r4,56
 102ccf0:	20c07216 	blt	r4,r3,102cebc <__adddf3+0x670>
 102ccf4:	010007c4 	movi	r4,31
 102ccf8:	20c0ce16 	blt	r4,r3,102d034 <__adddf3+0x7e8>
 102ccfc:	01000804 	movi	r4,32
 102cd00:	20c9c83a 	sub	r4,r4,r3
 102cd04:	2914983a 	sll	r10,r5,r4
 102cd08:	88d2d83a 	srl	r9,r17,r3
 102cd0c:	8908983a 	sll	r4,r17,r4
 102cd10:	28c6d83a 	srl	r3,r5,r3
 102cd14:	5262b03a 	or	r17,r10,r9
 102cd18:	2008c03a 	cmpne	r4,r4,zero
 102cd1c:	8922b03a 	or	r17,r17,r4
 102cd20:	3463c83a 	sub	r17,r6,r17
 102cd24:	40c7c83a 	sub	r3,r8,r3
 102cd28:	344d803a 	cmpltu	r6,r6,r17
 102cd2c:	198bc83a 	sub	r5,r3,r6
 102cd30:	1021883a 	mov	r16,r2
 102cd34:	3825883a 	mov	r18,r7
 102cd38:	003f2006 	br	102c9bc <__alt_data_end+0xfffef4fc>
 102cd3c:	9886b03a 	or	r3,r19,r2
 102cd40:	1800141e 	bne	r3,zero,102cd94 <__adddf3+0x548>
 102cd44:	0007883a 	mov	r3,zero
 102cd48:	000b883a 	mov	r5,zero
 102cd4c:	0023883a 	mov	r17,zero
 102cd50:	0021883a 	mov	r16,zero
 102cd54:	003f3c06 	br	102ca48 <__alt_data_end+0xfffef588>
 102cd58:	418cb03a 	or	r6,r8,r6
 102cd5c:	300cc03a 	cmpne	r6,r6,zero
 102cd60:	0011883a 	mov	r8,zero
 102cd64:	003f5606 	br	102cac0 <__alt_data_end+0xfffef600>
 102cd68:	2c48b03a 	or	r4,r5,r17
 102cd6c:	20003b26 	beq	r4,zero,102ce5c <__adddf3+0x610>
 102cd70:	00c6303a 	nor	r3,zero,r3
 102cd74:	1800371e 	bne	r3,zero,102ce54 <__adddf3+0x608>
 102cd78:	3463c83a 	sub	r17,r6,r17
 102cd7c:	414bc83a 	sub	r5,r8,r5
 102cd80:	344d803a 	cmpltu	r6,r6,r17
 102cd84:	298bc83a 	sub	r5,r5,r6
 102cd88:	1021883a 	mov	r16,r2
 102cd8c:	3825883a 	mov	r18,r7
 102cd90:	003f0a06 	br	102c9bc <__alt_data_end+0xfffef4fc>
 102cd94:	1023883a 	mov	r17,r2
 102cd98:	003f0d06 	br	102c9d0 <__alt_data_end+0xfffef510>
 102cd9c:	0007883a 	mov	r3,zero
 102cda0:	000b883a 	mov	r5,zero
 102cda4:	0023883a 	mov	r17,zero
 102cda8:	003f2706 	br	102ca48 <__alt_data_end+0xfffef588>
 102cdac:	0027883a 	mov	r19,zero
 102cdb0:	003fb706 	br	102cc90 <__alt_data_end+0xfffef7d0>
 102cdb4:	0011883a 	mov	r8,zero
 102cdb8:	003fc206 	br	102ccc4 <__alt_data_end+0xfffef804>
 102cdbc:	2c44b03a 	or	r2,r5,r17
 102cdc0:	8000871e 	bne	r16,zero,102cfe0 <__adddf3+0x794>
 102cdc4:	1000b126 	beq	r2,zero,102d08c <__adddf3+0x840>
 102cdc8:	4184b03a 	or	r2,r8,r6
 102cdcc:	103ebe26 	beq	r2,zero,102c8c8 <__alt_data_end+0xfffef408>
 102cdd0:	3445883a 	add	r2,r6,r17
 102cdd4:	1463803a 	cmpltu	r17,r2,r17
 102cdd8:	414b883a 	add	r5,r8,r5
 102cddc:	2c4b883a 	add	r5,r5,r17
 102cde0:	28c0202c 	andhi	r3,r5,128
 102cde4:	1023883a 	mov	r17,r2
 102cde8:	183f6326 	beq	r3,zero,102cb78 <__alt_data_end+0xfffef6b8>
 102cdec:	00bfe034 	movhi	r2,65408
 102cdf0:	10bfffc4 	addi	r2,r2,-1
 102cdf4:	2021883a 	mov	r16,r4
 102cdf8:	288a703a 	and	r5,r5,r2
 102cdfc:	003eb206 	br	102c8c8 <__alt_data_end+0xfffef408>
 102ce00:	2c44b03a 	or	r2,r5,r17
 102ce04:	8000251e 	bne	r16,zero,102ce9c <__adddf3+0x650>
 102ce08:	10004b1e 	bne	r2,zero,102cf38 <__adddf3+0x6ec>
 102ce0c:	4184b03a 	or	r2,r8,r6
 102ce10:	103fe226 	beq	r2,zero,102cd9c <__alt_data_end+0xfffef8dc>
 102ce14:	400b883a 	mov	r5,r8
 102ce18:	3023883a 	mov	r17,r6
 102ce1c:	3825883a 	mov	r18,r7
 102ce20:	003ea906 	br	102c8c8 <__alt_data_end+0xfffef408>
 102ce24:	20bff804 	addi	r2,r4,-32
 102ce28:	01c00804 	movi	r7,32
 102ce2c:	4084d83a 	srl	r2,r8,r2
 102ce30:	21c07e26 	beq	r4,r7,102d02c <__adddf3+0x7e0>
 102ce34:	01c01004 	movi	r7,64
 102ce38:	3909c83a 	sub	r4,r7,r4
 102ce3c:	4110983a 	sll	r8,r8,r4
 102ce40:	418cb03a 	or	r6,r8,r6
 102ce44:	300cc03a 	cmpne	r6,r6,zero
 102ce48:	308cb03a 	or	r6,r6,r2
 102ce4c:	0011883a 	mov	r8,zero
 102ce50:	003f1b06 	br	102cac0 <__alt_data_end+0xfffef600>
 102ce54:	0101ffc4 	movi	r4,2047
 102ce58:	113fa41e 	bne	r2,r4,102ccec <__alt_data_end+0xfffef82c>
 102ce5c:	400b883a 	mov	r5,r8
 102ce60:	3023883a 	mov	r17,r6
 102ce64:	1021883a 	mov	r16,r2
 102ce68:	3825883a 	mov	r18,r7
 102ce6c:	003e9606 	br	102c8c8 <__alt_data_end+0xfffef408>
 102ce70:	80001a1e 	bne	r16,zero,102cedc <__adddf3+0x690>
 102ce74:	2c4eb03a 	or	r7,r5,r17
 102ce78:	38005526 	beq	r7,zero,102cfd0 <__adddf3+0x784>
 102ce7c:	0108303a 	nor	r4,zero,r4
 102ce80:	2000511e 	bne	r4,zero,102cfc8 <__adddf3+0x77c>
 102ce84:	89a3883a 	add	r17,r17,r6
 102ce88:	414b883a 	add	r5,r8,r5
 102ce8c:	898d803a 	cmpltu	r6,r17,r6
 102ce90:	298b883a 	add	r5,r5,r6
 102ce94:	1021883a 	mov	r16,r2
 102ce98:	003f0e06 	br	102cad4 <__alt_data_end+0xfffef614>
 102ce9c:	1000341e 	bne	r2,zero,102cf70 <__adddf3+0x724>
 102cea0:	4184b03a 	or	r2,r8,r6
 102cea4:	10006f26 	beq	r2,zero,102d064 <__adddf3+0x818>
 102cea8:	400b883a 	mov	r5,r8
 102ceac:	3023883a 	mov	r17,r6
 102ceb0:	3825883a 	mov	r18,r7
 102ceb4:	0401ffc4 	movi	r16,2047
 102ceb8:	003e8306 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cebc:	2c62b03a 	or	r17,r5,r17
 102cec0:	8822c03a 	cmpne	r17,r17,zero
 102cec4:	0007883a 	mov	r3,zero
 102cec8:	003f9506 	br	102cd20 <__alt_data_end+0xfffef860>
 102cecc:	1021883a 	mov	r16,r2
 102ced0:	000b883a 	mov	r5,zero
 102ced4:	0023883a 	mov	r17,zero
 102ced8:	003edb06 	br	102ca48 <__alt_data_end+0xfffef588>
 102cedc:	01c1ffc4 	movi	r7,2047
 102cee0:	11c03b26 	beq	r2,r7,102cfd0 <__adddf3+0x784>
 102cee4:	0109c83a 	sub	r4,zero,r4
 102cee8:	29402034 	orhi	r5,r5,128
 102ceec:	01c00e04 	movi	r7,56
 102cef0:	39006216 	blt	r7,r4,102d07c <__adddf3+0x830>
 102cef4:	01c007c4 	movi	r7,31
 102cef8:	39006b16 	blt	r7,r4,102d0a8 <__adddf3+0x85c>
 102cefc:	01c00804 	movi	r7,32
 102cf00:	390fc83a 	sub	r7,r7,r4
 102cf04:	29d4983a 	sll	r10,r5,r7
 102cf08:	8912d83a 	srl	r9,r17,r4
 102cf0c:	89ce983a 	sll	r7,r17,r7
 102cf10:	2908d83a 	srl	r4,r5,r4
 102cf14:	5262b03a 	or	r17,r10,r9
 102cf18:	380ac03a 	cmpne	r5,r7,zero
 102cf1c:	8962b03a 	or	r17,r17,r5
 102cf20:	89a3883a 	add	r17,r17,r6
 102cf24:	2211883a 	add	r8,r4,r8
 102cf28:	898d803a 	cmpltu	r6,r17,r6
 102cf2c:	418b883a 	add	r5,r8,r6
 102cf30:	1021883a 	mov	r16,r2
 102cf34:	003ee706 	br	102cad4 <__alt_data_end+0xfffef614>
 102cf38:	4184b03a 	or	r2,r8,r6
 102cf3c:	103e6226 	beq	r2,zero,102c8c8 <__alt_data_end+0xfffef408>
 102cf40:	8987c83a 	sub	r3,r17,r6
 102cf44:	88c9803a 	cmpltu	r4,r17,r3
 102cf48:	2a05c83a 	sub	r2,r5,r8
 102cf4c:	1105c83a 	sub	r2,r2,r4
 102cf50:	1100202c 	andhi	r4,r2,128
 102cf54:	203f0426 	beq	r4,zero,102cb68 <__alt_data_end+0xfffef6a8>
 102cf58:	3463c83a 	sub	r17,r6,r17
 102cf5c:	414bc83a 	sub	r5,r8,r5
 102cf60:	344d803a 	cmpltu	r6,r6,r17
 102cf64:	298bc83a 	sub	r5,r5,r6
 102cf68:	3825883a 	mov	r18,r7
 102cf6c:	003e5606 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cf70:	4184b03a 	or	r2,r8,r6
 102cf74:	10002b26 	beq	r2,zero,102d024 <__adddf3+0x7d8>
 102cf78:	2804d0fa 	srli	r2,r5,3
 102cf7c:	8822d0fa 	srli	r17,r17,3
 102cf80:	280a977a 	slli	r5,r5,29
 102cf84:	10c0022c 	andhi	r3,r2,8
 102cf88:	2c62b03a 	or	r17,r5,r17
 102cf8c:	18000826 	beq	r3,zero,102cfb0 <__adddf3+0x764>
 102cf90:	4008d0fa 	srli	r4,r8,3
 102cf94:	20c0022c 	andhi	r3,r4,8
 102cf98:	1800051e 	bne	r3,zero,102cfb0 <__adddf3+0x764>
 102cf9c:	300cd0fa 	srli	r6,r6,3
 102cfa0:	4010977a 	slli	r8,r8,29
 102cfa4:	2005883a 	mov	r2,r4
 102cfa8:	3825883a 	mov	r18,r7
 102cfac:	41a2b03a 	or	r17,r8,r6
 102cfb0:	880ad77a 	srli	r5,r17,29
 102cfb4:	100490fa 	slli	r2,r2,3
 102cfb8:	882290fa 	slli	r17,r17,3
 102cfbc:	0401ffc4 	movi	r16,2047
 102cfc0:	288ab03a 	or	r5,r5,r2
 102cfc4:	003e4006 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cfc8:	01c1ffc4 	movi	r7,2047
 102cfcc:	11ffc71e 	bne	r2,r7,102ceec <__alt_data_end+0xfffefa2c>
 102cfd0:	400b883a 	mov	r5,r8
 102cfd4:	3023883a 	mov	r17,r6
 102cfd8:	1021883a 	mov	r16,r2
 102cfdc:	003e3a06 	br	102c8c8 <__alt_data_end+0xfffef408>
 102cfe0:	10002d26 	beq	r2,zero,102d098 <__adddf3+0x84c>
 102cfe4:	4184b03a 	or	r2,r8,r6
 102cfe8:	10000e26 	beq	r2,zero,102d024 <__adddf3+0x7d8>
 102cfec:	2804d0fa 	srli	r2,r5,3
 102cff0:	8822d0fa 	srli	r17,r17,3
 102cff4:	280a977a 	slli	r5,r5,29
 102cff8:	10c0022c 	andhi	r3,r2,8
 102cffc:	2c62b03a 	or	r17,r5,r17
 102d000:	183feb26 	beq	r3,zero,102cfb0 <__alt_data_end+0xfffefaf0>
 102d004:	4008d0fa 	srli	r4,r8,3
 102d008:	20c0022c 	andhi	r3,r4,8
 102d00c:	183fe81e 	bne	r3,zero,102cfb0 <__alt_data_end+0xfffefaf0>
 102d010:	300cd0fa 	srli	r6,r6,3
 102d014:	4010977a 	slli	r8,r8,29
 102d018:	2005883a 	mov	r2,r4
 102d01c:	41a2b03a 	or	r17,r8,r6
 102d020:	003fe306 	br	102cfb0 <__alt_data_end+0xfffefaf0>
 102d024:	0401ffc4 	movi	r16,2047
 102d028:	003e2706 	br	102c8c8 <__alt_data_end+0xfffef408>
 102d02c:	0011883a 	mov	r8,zero
 102d030:	003f8306 	br	102ce40 <__alt_data_end+0xfffef980>
 102d034:	193ff804 	addi	r4,r3,-32
 102d038:	02400804 	movi	r9,32
 102d03c:	2908d83a 	srl	r4,r5,r4
 102d040:	1a402526 	beq	r3,r9,102d0d8 <__adddf3+0x88c>
 102d044:	02401004 	movi	r9,64
 102d048:	48c7c83a 	sub	r3,r9,r3
 102d04c:	28ca983a 	sll	r5,r5,r3
 102d050:	2c62b03a 	or	r17,r5,r17
 102d054:	8822c03a 	cmpne	r17,r17,zero
 102d058:	8922b03a 	or	r17,r17,r4
 102d05c:	0007883a 	mov	r3,zero
 102d060:	003f2f06 	br	102cd20 <__alt_data_end+0xfffef860>
 102d064:	01402034 	movhi	r5,128
 102d068:	0007883a 	mov	r3,zero
 102d06c:	297fffc4 	addi	r5,r5,-1
 102d070:	047ffe04 	movi	r17,-8
 102d074:	0401ffc4 	movi	r16,2047
 102d078:	003e7306 	br	102ca48 <__alt_data_end+0xfffef588>
 102d07c:	2c62b03a 	or	r17,r5,r17
 102d080:	8822c03a 	cmpne	r17,r17,zero
 102d084:	0009883a 	mov	r4,zero
 102d088:	003fa506 	br	102cf20 <__alt_data_end+0xfffefa60>
 102d08c:	400b883a 	mov	r5,r8
 102d090:	3023883a 	mov	r17,r6
 102d094:	003e0c06 	br	102c8c8 <__alt_data_end+0xfffef408>
 102d098:	400b883a 	mov	r5,r8
 102d09c:	3023883a 	mov	r17,r6
 102d0a0:	0401ffc4 	movi	r16,2047
 102d0a4:	003e0806 	br	102c8c8 <__alt_data_end+0xfffef408>
 102d0a8:	21fff804 	addi	r7,r4,-32
 102d0ac:	02400804 	movi	r9,32
 102d0b0:	29ced83a 	srl	r7,r5,r7
 102d0b4:	22400a26 	beq	r4,r9,102d0e0 <__adddf3+0x894>
 102d0b8:	02401004 	movi	r9,64
 102d0bc:	4909c83a 	sub	r4,r9,r4
 102d0c0:	290a983a 	sll	r5,r5,r4
 102d0c4:	2c62b03a 	or	r17,r5,r17
 102d0c8:	8822c03a 	cmpne	r17,r17,zero
 102d0cc:	89e2b03a 	or	r17,r17,r7
 102d0d0:	0009883a 	mov	r4,zero
 102d0d4:	003f9206 	br	102cf20 <__alt_data_end+0xfffefa60>
 102d0d8:	000b883a 	mov	r5,zero
 102d0dc:	003fdc06 	br	102d050 <__alt_data_end+0xfffefb90>
 102d0e0:	000b883a 	mov	r5,zero
 102d0e4:	003ff706 	br	102d0c4 <__alt_data_end+0xfffefc04>

0102d0e8 <__eqdf2>:
 102d0e8:	2804d53a 	srli	r2,r5,20
 102d0ec:	3806d53a 	srli	r3,r7,20
 102d0f0:	02000434 	movhi	r8,16
 102d0f4:	423fffc4 	addi	r8,r8,-1
 102d0f8:	1081ffcc 	andi	r2,r2,2047
 102d0fc:	0241ffc4 	movi	r9,2047
 102d100:	2a14703a 	and	r10,r5,r8
 102d104:	18c1ffcc 	andi	r3,r3,2047
 102d108:	3a10703a 	and	r8,r7,r8
 102d10c:	280ad7fa 	srli	r5,r5,31
 102d110:	380ed7fa 	srli	r7,r7,31
 102d114:	12400f26 	beq	r2,r9,102d154 <__eqdf2+0x6c>
 102d118:	0241ffc4 	movi	r9,2047
 102d11c:	1a400326 	beq	r3,r9,102d12c <__eqdf2+0x44>
 102d120:	10c00526 	beq	r2,r3,102d138 <__eqdf2+0x50>
 102d124:	00800044 	movi	r2,1
 102d128:	f800283a 	ret
 102d12c:	4192b03a 	or	r9,r8,r6
 102d130:	483ffc1e 	bne	r9,zero,102d124 <__alt_data_end+0xfffefc64>
 102d134:	10fffb1e 	bne	r2,r3,102d124 <__alt_data_end+0xfffefc64>
 102d138:	523ffa1e 	bne	r10,r8,102d124 <__alt_data_end+0xfffefc64>
 102d13c:	21bff91e 	bne	r4,r6,102d124 <__alt_data_end+0xfffefc64>
 102d140:	29c00826 	beq	r5,r7,102d164 <__eqdf2+0x7c>
 102d144:	103ff71e 	bne	r2,zero,102d124 <__alt_data_end+0xfffefc64>
 102d148:	5104b03a 	or	r2,r10,r4
 102d14c:	1004c03a 	cmpne	r2,r2,zero
 102d150:	f800283a 	ret
 102d154:	5112b03a 	or	r9,r10,r4
 102d158:	483fef26 	beq	r9,zero,102d118 <__alt_data_end+0xfffefc58>
 102d15c:	00800044 	movi	r2,1
 102d160:	f800283a 	ret
 102d164:	0005883a 	mov	r2,zero
 102d168:	f800283a 	ret

0102d16c <__gedf2>:
 102d16c:	2804d53a 	srli	r2,r5,20
 102d170:	3806d53a 	srli	r3,r7,20
 102d174:	02000434 	movhi	r8,16
 102d178:	423fffc4 	addi	r8,r8,-1
 102d17c:	0241ffc4 	movi	r9,2047
 102d180:	1081ffcc 	andi	r2,r2,2047
 102d184:	2a14703a 	and	r10,r5,r8
 102d188:	1a46703a 	and	r3,r3,r9
 102d18c:	3a10703a 	and	r8,r7,r8
 102d190:	280ad7fa 	srli	r5,r5,31
 102d194:	380ed7fa 	srli	r7,r7,31
 102d198:	12400b26 	beq	r2,r9,102d1c8 <__gedf2+0x5c>
 102d19c:	1a401626 	beq	r3,r9,102d1f8 <__gedf2+0x8c>
 102d1a0:	10000c1e 	bne	r2,zero,102d1d4 <__gedf2+0x68>
 102d1a4:	5112b03a 	or	r9,r10,r4
 102d1a8:	4813003a 	cmpeq	r9,r9,zero
 102d1ac:	4817883a 	mov	r11,r9
 102d1b0:	18000c1e 	bne	r3,zero,102d1e4 <__gedf2+0x78>
 102d1b4:	4198b03a 	or	r12,r8,r6
 102d1b8:	60000a1e 	bne	r12,zero,102d1e4 <__gedf2+0x78>
 102d1bc:	48001326 	beq	r9,zero,102d20c <__gedf2+0xa0>
 102d1c0:	0005883a 	mov	r2,zero
 102d1c4:	f800283a 	ret
 102d1c8:	5112b03a 	or	r9,r10,r4
 102d1cc:	4800191e 	bne	r9,zero,102d234 <__gedf2+0xc8>
 102d1d0:	18800926 	beq	r3,r2,102d1f8 <__gedf2+0x8c>
 102d1d4:	18000b1e 	bne	r3,zero,102d204 <__gedf2+0x98>
 102d1d8:	4192b03a 	or	r9,r8,r6
 102d1dc:	0017883a 	mov	r11,zero
 102d1e0:	48000a26 	beq	r9,zero,102d20c <__gedf2+0xa0>
 102d1e4:	39c03fcc 	andi	r7,r7,255
 102d1e8:	58000726 	beq	r11,zero,102d208 <__gedf2+0x9c>
 102d1ec:	3800081e 	bne	r7,zero,102d210 <__gedf2+0xa4>
 102d1f0:	00bfffc4 	movi	r2,-1
 102d1f4:	f800283a 	ret
 102d1f8:	4192b03a 	or	r9,r8,r6
 102d1fc:	48000d1e 	bne	r9,zero,102d234 <__gedf2+0xc8>
 102d200:	103fe826 	beq	r2,zero,102d1a4 <__alt_data_end+0xfffefce4>
 102d204:	39c03fcc 	andi	r7,r7,255
 102d208:	29c00326 	beq	r5,r7,102d218 <__gedf2+0xac>
 102d20c:	283ff81e 	bne	r5,zero,102d1f0 <__alt_data_end+0xfffefd30>
 102d210:	00800044 	movi	r2,1
 102d214:	f800283a 	ret
 102d218:	18bffc16 	blt	r3,r2,102d20c <__alt_data_end+0xfffefd4c>
 102d21c:	10c00316 	blt	r2,r3,102d22c <__gedf2+0xc0>
 102d220:	42bffa36 	bltu	r8,r10,102d20c <__alt_data_end+0xfffefd4c>
 102d224:	52000526 	beq	r10,r8,102d23c <__gedf2+0xd0>
 102d228:	523fe52e 	bgeu	r10,r8,102d1c0 <__alt_data_end+0xfffefd00>
 102d22c:	283ff026 	beq	r5,zero,102d1f0 <__alt_data_end+0xfffefd30>
 102d230:	003ff706 	br	102d210 <__alt_data_end+0xfffefd50>
 102d234:	00bfff84 	movi	r2,-2
 102d238:	f800283a 	ret
 102d23c:	313ff336 	bltu	r6,r4,102d20c <__alt_data_end+0xfffefd4c>
 102d240:	21bfdf2e 	bgeu	r4,r6,102d1c0 <__alt_data_end+0xfffefd00>
 102d244:	283fea26 	beq	r5,zero,102d1f0 <__alt_data_end+0xfffefd30>
 102d248:	003ff106 	br	102d210 <__alt_data_end+0xfffefd50>

0102d24c <__ledf2>:
 102d24c:	2804d53a 	srli	r2,r5,20
 102d250:	3810d53a 	srli	r8,r7,20
 102d254:	00c00434 	movhi	r3,16
 102d258:	18ffffc4 	addi	r3,r3,-1
 102d25c:	0241ffc4 	movi	r9,2047
 102d260:	1081ffcc 	andi	r2,r2,2047
 102d264:	28d4703a 	and	r10,r5,r3
 102d268:	4250703a 	and	r8,r8,r9
 102d26c:	38c6703a 	and	r3,r7,r3
 102d270:	280ad7fa 	srli	r5,r5,31
 102d274:	380ed7fa 	srli	r7,r7,31
 102d278:	12400b26 	beq	r2,r9,102d2a8 <__ledf2+0x5c>
 102d27c:	42401926 	beq	r8,r9,102d2e4 <__ledf2+0x98>
 102d280:	10000c1e 	bne	r2,zero,102d2b4 <__ledf2+0x68>
 102d284:	5112b03a 	or	r9,r10,r4
 102d288:	4813003a 	cmpeq	r9,r9,zero
 102d28c:	4817883a 	mov	r11,r9
 102d290:	40000f26 	beq	r8,zero,102d2d0 <__ledf2+0x84>
 102d294:	39c03fcc 	andi	r7,r7,255
 102d298:	58001826 	beq	r11,zero,102d2fc <__ledf2+0xb0>
 102d29c:	38000a1e 	bne	r7,zero,102d2c8 <__ledf2+0x7c>
 102d2a0:	00bfffc4 	movi	r2,-1
 102d2a4:	f800283a 	ret
 102d2a8:	5112b03a 	or	r9,r10,r4
 102d2ac:	48000f1e 	bne	r9,zero,102d2ec <__ledf2+0xa0>
 102d2b0:	40800c26 	beq	r8,r2,102d2e4 <__ledf2+0x98>
 102d2b4:	4000101e 	bne	r8,zero,102d2f8 <__ledf2+0xac>
 102d2b8:	1992b03a 	or	r9,r3,r6
 102d2bc:	0017883a 	mov	r11,zero
 102d2c0:	483ff41e 	bne	r9,zero,102d294 <__alt_data_end+0xfffefdd4>
 102d2c4:	283ff61e 	bne	r5,zero,102d2a0 <__alt_data_end+0xfffefde0>
 102d2c8:	00800044 	movi	r2,1
 102d2cc:	f800283a 	ret
 102d2d0:	1998b03a 	or	r12,r3,r6
 102d2d4:	603fef1e 	bne	r12,zero,102d294 <__alt_data_end+0xfffefdd4>
 102d2d8:	483ffa26 	beq	r9,zero,102d2c4 <__alt_data_end+0xfffefe04>
 102d2dc:	0005883a 	mov	r2,zero
 102d2e0:	f800283a 	ret
 102d2e4:	1992b03a 	or	r9,r3,r6
 102d2e8:	48000226 	beq	r9,zero,102d2f4 <__ledf2+0xa8>
 102d2ec:	00800084 	movi	r2,2
 102d2f0:	f800283a 	ret
 102d2f4:	103fe326 	beq	r2,zero,102d284 <__alt_data_end+0xfffefdc4>
 102d2f8:	39c03fcc 	andi	r7,r7,255
 102d2fc:	29fff11e 	bne	r5,r7,102d2c4 <__alt_data_end+0xfffefe04>
 102d300:	40bff016 	blt	r8,r2,102d2c4 <__alt_data_end+0xfffefe04>
 102d304:	12000316 	blt	r2,r8,102d314 <__ledf2+0xc8>
 102d308:	1abfee36 	bltu	r3,r10,102d2c4 <__alt_data_end+0xfffefe04>
 102d30c:	50c00326 	beq	r10,r3,102d31c <__ledf2+0xd0>
 102d310:	50fff22e 	bgeu	r10,r3,102d2dc <__alt_data_end+0xfffefe1c>
 102d314:	283fe226 	beq	r5,zero,102d2a0 <__alt_data_end+0xfffefde0>
 102d318:	003feb06 	br	102d2c8 <__alt_data_end+0xfffefe08>
 102d31c:	313fe936 	bltu	r6,r4,102d2c4 <__alt_data_end+0xfffefe04>
 102d320:	21bfee2e 	bgeu	r4,r6,102d2dc <__alt_data_end+0xfffefe1c>
 102d324:	283fde26 	beq	r5,zero,102d2a0 <__alt_data_end+0xfffefde0>
 102d328:	003fe706 	br	102d2c8 <__alt_data_end+0xfffefe08>

0102d32c <__subdf3>:
 102d32c:	00c00434 	movhi	r3,16
 102d330:	18ffffc4 	addi	r3,r3,-1
 102d334:	defffb04 	addi	sp,sp,-20
 102d338:	28d2703a 	and	r9,r5,r3
 102d33c:	3814d53a 	srli	r10,r7,20
 102d340:	38c6703a 	and	r3,r7,r3
 102d344:	3004d77a 	srli	r2,r6,29
 102d348:	dc800215 	stw	r18,8(sp)
 102d34c:	dc000015 	stw	r16,0(sp)
 102d350:	2824d7fa 	srli	r18,r5,31
 102d354:	2820d53a 	srli	r16,r5,20
 102d358:	481290fa 	slli	r9,r9,3
 102d35c:	200ad77a 	srli	r5,r4,29
 102d360:	180690fa 	slli	r3,r3,3
 102d364:	dc400115 	stw	r17,4(sp)
 102d368:	dfc00415 	stw	ra,16(sp)
 102d36c:	202290fa 	slli	r17,r4,3
 102d370:	dcc00315 	stw	r19,12(sp)
 102d374:	5281ffcc 	andi	r10,r10,2047
 102d378:	0101ffc4 	movi	r4,2047
 102d37c:	9011883a 	mov	r8,r18
 102d380:	8401ffcc 	andi	r16,r16,2047
 102d384:	94803fcc 	andi	r18,r18,255
 102d388:	494ab03a 	or	r5,r9,r5
 102d38c:	380ed7fa 	srli	r7,r7,31
 102d390:	1886b03a 	or	r3,r3,r2
 102d394:	300c90fa 	slli	r6,r6,3
 102d398:	51009026 	beq	r10,r4,102d5dc <__subdf3+0x2b0>
 102d39c:	39c0005c 	xori	r7,r7,1
 102d3a0:	8285c83a 	sub	r2,r16,r10
 102d3a4:	91c06f26 	beq	r18,r7,102d564 <__subdf3+0x238>
 102d3a8:	0080b10e 	bge	zero,r2,102d670 <__subdf3+0x344>
 102d3ac:	50002a1e 	bne	r10,zero,102d458 <__subdf3+0x12c>
 102d3b0:	1988b03a 	or	r4,r3,r6
 102d3b4:	2000941e 	bne	r4,zero,102d608 <__subdf3+0x2dc>
 102d3b8:	888001cc 	andi	r2,r17,7
 102d3bc:	10005b26 	beq	r2,zero,102d52c <__subdf3+0x200>
 102d3c0:	88c003cc 	andi	r3,r17,15
 102d3c4:	00800104 	movi	r2,4
 102d3c8:	18805826 	beq	r3,r2,102d52c <__subdf3+0x200>
 102d3cc:	88c00104 	addi	r3,r17,4
 102d3d0:	1c63803a 	cmpltu	r17,r3,r17
 102d3d4:	2c4b883a 	add	r5,r5,r17
 102d3d8:	2880202c 	andhi	r2,r5,128
 102d3dc:	9200004c 	andi	r8,r18,1
 102d3e0:	1823883a 	mov	r17,r3
 102d3e4:	10005426 	beq	r2,zero,102d538 <__subdf3+0x20c>
 102d3e8:	84000044 	addi	r16,r16,1
 102d3ec:	0081ffc4 	movi	r2,2047
 102d3f0:	8080bf26 	beq	r16,r2,102d6f0 <__subdf3+0x3c4>
 102d3f4:	013fe034 	movhi	r4,65408
 102d3f8:	213fffc4 	addi	r4,r4,-1
 102d3fc:	290a703a 	and	r5,r5,r4
 102d400:	2804977a 	slli	r2,r5,29
 102d404:	280a927a 	slli	r5,r5,9
 102d408:	8822d0fa 	srli	r17,r17,3
 102d40c:	8401ffcc 	andi	r16,r16,2047
 102d410:	2808d33a 	srli	r4,r5,12
 102d414:	1444b03a 	or	r2,r2,r17
 102d418:	8401ffcc 	andi	r16,r16,2047
 102d41c:	800a953a 	slli	r5,r16,20
 102d420:	40c03fcc 	andi	r3,r8,255
 102d424:	04000434 	movhi	r16,16
 102d428:	180697fa 	slli	r3,r3,31
 102d42c:	843fffc4 	addi	r16,r16,-1
 102d430:	2420703a 	and	r16,r4,r16
 102d434:	8160b03a 	or	r16,r16,r5
 102d438:	80c6b03a 	or	r3,r16,r3
 102d43c:	dfc00417 	ldw	ra,16(sp)
 102d440:	dcc00317 	ldw	r19,12(sp)
 102d444:	dc800217 	ldw	r18,8(sp)
 102d448:	dc400117 	ldw	r17,4(sp)
 102d44c:	dc000017 	ldw	r16,0(sp)
 102d450:	dec00504 	addi	sp,sp,20
 102d454:	f800283a 	ret
 102d458:	0101ffc4 	movi	r4,2047
 102d45c:	813fd626 	beq	r16,r4,102d3b8 <__alt_data_end+0xfffefef8>
 102d460:	18c02034 	orhi	r3,r3,128
 102d464:	01000e04 	movi	r4,56
 102d468:	2080a416 	blt	r4,r2,102d6fc <__subdf3+0x3d0>
 102d46c:	010007c4 	movi	r4,31
 102d470:	2080c716 	blt	r4,r2,102d790 <__subdf3+0x464>
 102d474:	01000804 	movi	r4,32
 102d478:	2089c83a 	sub	r4,r4,r2
 102d47c:	1910983a 	sll	r8,r3,r4
 102d480:	308ed83a 	srl	r7,r6,r2
 102d484:	3108983a 	sll	r4,r6,r4
 102d488:	1884d83a 	srl	r2,r3,r2
 102d48c:	41ccb03a 	or	r6,r8,r7
 102d490:	2008c03a 	cmpne	r4,r4,zero
 102d494:	310cb03a 	or	r6,r6,r4
 102d498:	898dc83a 	sub	r6,r17,r6
 102d49c:	89a3803a 	cmpltu	r17,r17,r6
 102d4a0:	288bc83a 	sub	r5,r5,r2
 102d4a4:	2c4bc83a 	sub	r5,r5,r17
 102d4a8:	3023883a 	mov	r17,r6
 102d4ac:	2880202c 	andhi	r2,r5,128
 102d4b0:	10006b26 	beq	r2,zero,102d660 <__subdf3+0x334>
 102d4b4:	04c02034 	movhi	r19,128
 102d4b8:	9cffffc4 	addi	r19,r19,-1
 102d4bc:	2ce6703a 	and	r19,r5,r19
 102d4c0:	98007c26 	beq	r19,zero,102d6b4 <__subdf3+0x388>
 102d4c4:	9809883a 	mov	r4,r19
 102d4c8:	1022a880 	call	1022a88 <__clzsi2>
 102d4cc:	10fffe04 	addi	r3,r2,-8
 102d4d0:	010007c4 	movi	r4,31
 102d4d4:	20c07d16 	blt	r4,r3,102d6cc <__subdf3+0x3a0>
 102d4d8:	01400a04 	movi	r5,40
 102d4dc:	2885c83a 	sub	r2,r5,r2
 102d4e0:	888ad83a 	srl	r5,r17,r2
 102d4e4:	98e6983a 	sll	r19,r19,r3
 102d4e8:	88e2983a 	sll	r17,r17,r3
 102d4ec:	2ce6b03a 	or	r19,r5,r19
 102d4f0:	1c007a16 	blt	r3,r16,102d6dc <__subdf3+0x3b0>
 102d4f4:	1c21c83a 	sub	r16,r3,r16
 102d4f8:	81400044 	addi	r5,r16,1
 102d4fc:	00c007c4 	movi	r3,31
 102d500:	19409616 	blt	r3,r5,102d75c <__subdf3+0x430>
 102d504:	1c21c83a 	sub	r16,r3,r16
 102d508:	8c08983a 	sll	r4,r17,r16
 102d50c:	8946d83a 	srl	r3,r17,r5
 102d510:	9c20983a 	sll	r16,r19,r16
 102d514:	2008c03a 	cmpne	r4,r4,zero
 102d518:	994ad83a 	srl	r5,r19,r5
 102d51c:	1c06b03a 	or	r3,r3,r16
 102d520:	1922b03a 	or	r17,r3,r4
 102d524:	0021883a 	mov	r16,zero
 102d528:	003fa306 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d52c:	2880202c 	andhi	r2,r5,128
 102d530:	9200004c 	andi	r8,r18,1
 102d534:	103fac1e 	bne	r2,zero,102d3e8 <__alt_data_end+0xfffeff28>
 102d538:	2804977a 	slli	r2,r5,29
 102d53c:	8822d0fa 	srli	r17,r17,3
 102d540:	00c1ffc4 	movi	r3,2047
 102d544:	280ad0fa 	srli	r5,r5,3
 102d548:	1444b03a 	or	r2,r2,r17
 102d54c:	80c02726 	beq	r16,r3,102d5ec <__subdf3+0x2c0>
 102d550:	01000434 	movhi	r4,16
 102d554:	213fffc4 	addi	r4,r4,-1
 102d558:	80e0703a 	and	r16,r16,r3
 102d55c:	2908703a 	and	r4,r5,r4
 102d560:	003fad06 	br	102d418 <__alt_data_end+0xfffeff58>
 102d564:	0080690e 	bge	zero,r2,102d70c <__subdf3+0x3e0>
 102d568:	50002f26 	beq	r10,zero,102d628 <__subdf3+0x2fc>
 102d56c:	0101ffc4 	movi	r4,2047
 102d570:	813f9126 	beq	r16,r4,102d3b8 <__alt_data_end+0xfffefef8>
 102d574:	18c02034 	orhi	r3,r3,128
 102d578:	01000e04 	movi	r4,56
 102d57c:	2080b00e 	bge	r4,r2,102d840 <__subdf3+0x514>
 102d580:	198cb03a 	or	r6,r3,r6
 102d584:	300ec03a 	cmpne	r7,r6,zero
 102d588:	0005883a 	mov	r2,zero
 102d58c:	3c4f883a 	add	r7,r7,r17
 102d590:	3c63803a 	cmpltu	r17,r7,r17
 102d594:	114b883a 	add	r5,r2,r5
 102d598:	2c4b883a 	add	r5,r5,r17
 102d59c:	3823883a 	mov	r17,r7
 102d5a0:	2880202c 	andhi	r2,r5,128
 102d5a4:	10002e26 	beq	r2,zero,102d660 <__subdf3+0x334>
 102d5a8:	84000044 	addi	r16,r16,1
 102d5ac:	0081ffc4 	movi	r2,2047
 102d5b0:	8080de26 	beq	r16,r2,102d92c <__subdf3+0x600>
 102d5b4:	00bfe034 	movhi	r2,65408
 102d5b8:	10bfffc4 	addi	r2,r2,-1
 102d5bc:	288a703a 	and	r5,r5,r2
 102d5c0:	880cd07a 	srli	r6,r17,1
 102d5c4:	280897fa 	slli	r4,r5,31
 102d5c8:	88c0004c 	andi	r3,r17,1
 102d5cc:	30e2b03a 	or	r17,r6,r3
 102d5d0:	280ad07a 	srli	r5,r5,1
 102d5d4:	8922b03a 	or	r17,r17,r4
 102d5d8:	003f7706 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d5dc:	1984b03a 	or	r2,r3,r6
 102d5e0:	103f6e26 	beq	r2,zero,102d39c <__alt_data_end+0xfffefedc>
 102d5e4:	39c03fcc 	andi	r7,r7,255
 102d5e8:	003f6d06 	br	102d3a0 <__alt_data_end+0xfffefee0>
 102d5ec:	1146b03a 	or	r3,r2,r5
 102d5f0:	18003f26 	beq	r3,zero,102d6f0 <__subdf3+0x3c4>
 102d5f4:	00c00434 	movhi	r3,16
 102d5f8:	29000234 	orhi	r4,r5,8
 102d5fc:	18ffffc4 	addi	r3,r3,-1
 102d600:	20c8703a 	and	r4,r4,r3
 102d604:	003f8406 	br	102d418 <__alt_data_end+0xfffeff58>
 102d608:	10bfffc4 	addi	r2,r2,-1
 102d60c:	1000501e 	bne	r2,zero,102d750 <__subdf3+0x424>
 102d610:	898fc83a 	sub	r7,r17,r6
 102d614:	89e3803a 	cmpltu	r17,r17,r7
 102d618:	28cbc83a 	sub	r5,r5,r3
 102d61c:	2c4bc83a 	sub	r5,r5,r17
 102d620:	3823883a 	mov	r17,r7
 102d624:	003fa106 	br	102d4ac <__alt_data_end+0xfffeffec>
 102d628:	1988b03a 	or	r4,r3,r6
 102d62c:	203f6226 	beq	r4,zero,102d3b8 <__alt_data_end+0xfffefef8>
 102d630:	10bfffc4 	addi	r2,r2,-1
 102d634:	10009b1e 	bne	r2,zero,102d8a4 <__subdf3+0x578>
 102d638:	344d883a 	add	r6,r6,r17
 102d63c:	3463803a 	cmpltu	r17,r6,r17
 102d640:	194b883a 	add	r5,r3,r5
 102d644:	2c4b883a 	add	r5,r5,r17
 102d648:	3023883a 	mov	r17,r6
 102d64c:	003fd406 	br	102d5a0 <__alt_data_end+0xffff00e0>
 102d650:	1106b03a 	or	r3,r2,r4
 102d654:	1800b426 	beq	r3,zero,102d928 <__subdf3+0x5fc>
 102d658:	100b883a 	mov	r5,r2
 102d65c:	2023883a 	mov	r17,r4
 102d660:	888001cc 	andi	r2,r17,7
 102d664:	103f561e 	bne	r2,zero,102d3c0 <__alt_data_end+0xfffeff00>
 102d668:	9200004c 	andi	r8,r18,1
 102d66c:	003fb206 	br	102d538 <__alt_data_end+0xffff0078>
 102d670:	1000531e 	bne	r2,zero,102d7c0 <__subdf3+0x494>
 102d674:	80800044 	addi	r2,r16,1
 102d678:	1081ffcc 	andi	r2,r2,2047
 102d67c:	01000044 	movi	r4,1
 102d680:	2080a00e 	bge	r4,r2,102d904 <__subdf3+0x5d8>
 102d684:	8985c83a 	sub	r2,r17,r6
 102d688:	8889803a 	cmpltu	r4,r17,r2
 102d68c:	28e7c83a 	sub	r19,r5,r3
 102d690:	9927c83a 	sub	r19,r19,r4
 102d694:	9900202c 	andhi	r4,r19,128
 102d698:	20006226 	beq	r4,zero,102d824 <__subdf3+0x4f8>
 102d69c:	3463c83a 	sub	r17,r6,r17
 102d6a0:	194bc83a 	sub	r5,r3,r5
 102d6a4:	344d803a 	cmpltu	r6,r6,r17
 102d6a8:	29a7c83a 	sub	r19,r5,r6
 102d6ac:	3825883a 	mov	r18,r7
 102d6b0:	983f841e 	bne	r19,zero,102d4c4 <__alt_data_end+0xffff0004>
 102d6b4:	8809883a 	mov	r4,r17
 102d6b8:	1022a880 	call	1022a88 <__clzsi2>
 102d6bc:	10800804 	addi	r2,r2,32
 102d6c0:	10fffe04 	addi	r3,r2,-8
 102d6c4:	010007c4 	movi	r4,31
 102d6c8:	20ff830e 	bge	r4,r3,102d4d8 <__alt_data_end+0xffff0018>
 102d6cc:	14fff604 	addi	r19,r2,-40
 102d6d0:	8ce6983a 	sll	r19,r17,r19
 102d6d4:	0023883a 	mov	r17,zero
 102d6d8:	1c3f860e 	bge	r3,r16,102d4f4 <__alt_data_end+0xffff0034>
 102d6dc:	017fe034 	movhi	r5,65408
 102d6e0:	297fffc4 	addi	r5,r5,-1
 102d6e4:	80e1c83a 	sub	r16,r16,r3
 102d6e8:	994a703a 	and	r5,r19,r5
 102d6ec:	003f3206 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d6f0:	0009883a 	mov	r4,zero
 102d6f4:	0005883a 	mov	r2,zero
 102d6f8:	003f4706 	br	102d418 <__alt_data_end+0xfffeff58>
 102d6fc:	198cb03a 	or	r6,r3,r6
 102d700:	300cc03a 	cmpne	r6,r6,zero
 102d704:	0005883a 	mov	r2,zero
 102d708:	003f6306 	br	102d498 <__alt_data_end+0xfffeffd8>
 102d70c:	10009d1e 	bne	r2,zero,102d984 <__subdf3+0x658>
 102d710:	81c00044 	addi	r7,r16,1
 102d714:	3881ffcc 	andi	r2,r7,2047
 102d718:	02400044 	movi	r9,1
 102d71c:	4880680e 	bge	r9,r2,102d8c0 <__subdf3+0x594>
 102d720:	0081ffc4 	movi	r2,2047
 102d724:	3880ae26 	beq	r7,r2,102d9e0 <__subdf3+0x6b4>
 102d728:	344d883a 	add	r6,r6,r17
 102d72c:	3463803a 	cmpltu	r17,r6,r17
 102d730:	194b883a 	add	r5,r3,r5
 102d734:	2c4b883a 	add	r5,r5,r17
 102d738:	282297fa 	slli	r17,r5,31
 102d73c:	300cd07a 	srli	r6,r6,1
 102d740:	280ad07a 	srli	r5,r5,1
 102d744:	3821883a 	mov	r16,r7
 102d748:	89a2b03a 	or	r17,r17,r6
 102d74c:	003f1a06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d750:	0101ffc4 	movi	r4,2047
 102d754:	813f431e 	bne	r16,r4,102d464 <__alt_data_end+0xfffeffa4>
 102d758:	003f1706 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d75c:	80bff844 	addi	r2,r16,-31
 102d760:	00c00804 	movi	r3,32
 102d764:	9884d83a 	srl	r2,r19,r2
 102d768:	28c05126 	beq	r5,r3,102d8b0 <__subdf3+0x584>
 102d76c:	00c00fc4 	movi	r3,63
 102d770:	1c21c83a 	sub	r16,r3,r16
 102d774:	9c26983a 	sll	r19,r19,r16
 102d778:	9c62b03a 	or	r17,r19,r17
 102d77c:	8822c03a 	cmpne	r17,r17,zero
 102d780:	88a2b03a 	or	r17,r17,r2
 102d784:	000b883a 	mov	r5,zero
 102d788:	0021883a 	mov	r16,zero
 102d78c:	003fb406 	br	102d660 <__alt_data_end+0xffff01a0>
 102d790:	113ff804 	addi	r4,r2,-32
 102d794:	01c00804 	movi	r7,32
 102d798:	1908d83a 	srl	r4,r3,r4
 102d79c:	11c04626 	beq	r2,r7,102d8b8 <__subdf3+0x58c>
 102d7a0:	01c01004 	movi	r7,64
 102d7a4:	3885c83a 	sub	r2,r7,r2
 102d7a8:	1884983a 	sll	r2,r3,r2
 102d7ac:	118cb03a 	or	r6,r2,r6
 102d7b0:	300cc03a 	cmpne	r6,r6,zero
 102d7b4:	310cb03a 	or	r6,r6,r4
 102d7b8:	0005883a 	mov	r2,zero
 102d7bc:	003f3606 	br	102d498 <__alt_data_end+0xfffeffd8>
 102d7c0:	80002b26 	beq	r16,zero,102d870 <__subdf3+0x544>
 102d7c4:	0101ffc4 	movi	r4,2047
 102d7c8:	51006926 	beq	r10,r4,102d970 <__subdf3+0x644>
 102d7cc:	0085c83a 	sub	r2,zero,r2
 102d7d0:	29402034 	orhi	r5,r5,128
 102d7d4:	01000e04 	movi	r4,56
 102d7d8:	20807d16 	blt	r4,r2,102d9d0 <__subdf3+0x6a4>
 102d7dc:	010007c4 	movi	r4,31
 102d7e0:	2080d916 	blt	r4,r2,102db48 <__subdf3+0x81c>
 102d7e4:	01000804 	movi	r4,32
 102d7e8:	2089c83a 	sub	r4,r4,r2
 102d7ec:	2912983a 	sll	r9,r5,r4
 102d7f0:	8890d83a 	srl	r8,r17,r2
 102d7f4:	8908983a 	sll	r4,r17,r4
 102d7f8:	2884d83a 	srl	r2,r5,r2
 102d7fc:	4a22b03a 	or	r17,r9,r8
 102d800:	2008c03a 	cmpne	r4,r4,zero
 102d804:	8922b03a 	or	r17,r17,r4
 102d808:	3463c83a 	sub	r17,r6,r17
 102d80c:	1885c83a 	sub	r2,r3,r2
 102d810:	344d803a 	cmpltu	r6,r6,r17
 102d814:	118bc83a 	sub	r5,r2,r6
 102d818:	5021883a 	mov	r16,r10
 102d81c:	3825883a 	mov	r18,r7
 102d820:	003f2206 	br	102d4ac <__alt_data_end+0xfffeffec>
 102d824:	9886b03a 	or	r3,r19,r2
 102d828:	18001c1e 	bne	r3,zero,102d89c <__subdf3+0x570>
 102d82c:	0011883a 	mov	r8,zero
 102d830:	000b883a 	mov	r5,zero
 102d834:	0023883a 	mov	r17,zero
 102d838:	0021883a 	mov	r16,zero
 102d83c:	003f3e06 	br	102d538 <__alt_data_end+0xffff0078>
 102d840:	010007c4 	movi	r4,31
 102d844:	20803c16 	blt	r4,r2,102d938 <__subdf3+0x60c>
 102d848:	01000804 	movi	r4,32
 102d84c:	2089c83a 	sub	r4,r4,r2
 102d850:	1912983a 	sll	r9,r3,r4
 102d854:	308ed83a 	srl	r7,r6,r2
 102d858:	3108983a 	sll	r4,r6,r4
 102d85c:	1884d83a 	srl	r2,r3,r2
 102d860:	49ceb03a 	or	r7,r9,r7
 102d864:	2008c03a 	cmpne	r4,r4,zero
 102d868:	390eb03a 	or	r7,r7,r4
 102d86c:	003f4706 	br	102d58c <__alt_data_end+0xffff00cc>
 102d870:	2c48b03a 	or	r4,r5,r17
 102d874:	20003e26 	beq	r4,zero,102d970 <__subdf3+0x644>
 102d878:	0084303a 	nor	r2,zero,r2
 102d87c:	10003a1e 	bne	r2,zero,102d968 <__subdf3+0x63c>
 102d880:	3463c83a 	sub	r17,r6,r17
 102d884:	194bc83a 	sub	r5,r3,r5
 102d888:	344d803a 	cmpltu	r6,r6,r17
 102d88c:	298bc83a 	sub	r5,r5,r6
 102d890:	5021883a 	mov	r16,r10
 102d894:	3825883a 	mov	r18,r7
 102d898:	003f0406 	br	102d4ac <__alt_data_end+0xfffeffec>
 102d89c:	1023883a 	mov	r17,r2
 102d8a0:	003f0706 	br	102d4c0 <__alt_data_end+0xffff0000>
 102d8a4:	0101ffc4 	movi	r4,2047
 102d8a8:	813f331e 	bne	r16,r4,102d578 <__alt_data_end+0xffff00b8>
 102d8ac:	003ec206 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d8b0:	0027883a 	mov	r19,zero
 102d8b4:	003fb006 	br	102d778 <__alt_data_end+0xffff02b8>
 102d8b8:	0005883a 	mov	r2,zero
 102d8bc:	003fbb06 	br	102d7ac <__alt_data_end+0xffff02ec>
 102d8c0:	2c44b03a 	or	r2,r5,r17
 102d8c4:	80008b1e 	bne	r16,zero,102daf4 <__subdf3+0x7c8>
 102d8c8:	1000b526 	beq	r2,zero,102dba0 <__subdf3+0x874>
 102d8cc:	1984b03a 	or	r2,r3,r6
 102d8d0:	103eb926 	beq	r2,zero,102d3b8 <__alt_data_end+0xfffefef8>
 102d8d4:	3449883a 	add	r4,r6,r17
 102d8d8:	2463803a 	cmpltu	r17,r4,r17
 102d8dc:	194b883a 	add	r5,r3,r5
 102d8e0:	2c4b883a 	add	r5,r5,r17
 102d8e4:	2880202c 	andhi	r2,r5,128
 102d8e8:	2023883a 	mov	r17,r4
 102d8ec:	103f5c26 	beq	r2,zero,102d660 <__alt_data_end+0xffff01a0>
 102d8f0:	00bfe034 	movhi	r2,65408
 102d8f4:	10bfffc4 	addi	r2,r2,-1
 102d8f8:	4821883a 	mov	r16,r9
 102d8fc:	288a703a 	and	r5,r5,r2
 102d900:	003ead06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d904:	2c44b03a 	or	r2,r5,r17
 102d908:	8000291e 	bne	r16,zero,102d9b0 <__subdf3+0x684>
 102d90c:	10004f1e 	bne	r2,zero,102da4c <__subdf3+0x720>
 102d910:	1984b03a 	or	r2,r3,r6
 102d914:	10000426 	beq	r2,zero,102d928 <__subdf3+0x5fc>
 102d918:	180b883a 	mov	r5,r3
 102d91c:	3023883a 	mov	r17,r6
 102d920:	3825883a 	mov	r18,r7
 102d924:	003ea406 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d928:	0011883a 	mov	r8,zero
 102d92c:	000b883a 	mov	r5,zero
 102d930:	0023883a 	mov	r17,zero
 102d934:	003f0006 	br	102d538 <__alt_data_end+0xffff0078>
 102d938:	11fff804 	addi	r7,r2,-32
 102d93c:	19c8d83a 	srl	r4,r3,r7
 102d940:	01c00804 	movi	r7,32
 102d944:	11c07e26 	beq	r2,r7,102db40 <__subdf3+0x814>
 102d948:	01c01004 	movi	r7,64
 102d94c:	3885c83a 	sub	r2,r7,r2
 102d950:	1884983a 	sll	r2,r3,r2
 102d954:	118cb03a 	or	r6,r2,r6
 102d958:	300ec03a 	cmpne	r7,r6,zero
 102d95c:	390eb03a 	or	r7,r7,r4
 102d960:	0005883a 	mov	r2,zero
 102d964:	003f0906 	br	102d58c <__alt_data_end+0xffff00cc>
 102d968:	0101ffc4 	movi	r4,2047
 102d96c:	513f991e 	bne	r10,r4,102d7d4 <__alt_data_end+0xffff0314>
 102d970:	180b883a 	mov	r5,r3
 102d974:	3023883a 	mov	r17,r6
 102d978:	5021883a 	mov	r16,r10
 102d97c:	3825883a 	mov	r18,r7
 102d980:	003e8d06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d984:	80001a1e 	bne	r16,zero,102d9f0 <__subdf3+0x6c4>
 102d988:	2c48b03a 	or	r4,r5,r17
 102d98c:	20005526 	beq	r4,zero,102dae4 <__subdf3+0x7b8>
 102d990:	0084303a 	nor	r2,zero,r2
 102d994:	1000511e 	bne	r2,zero,102dadc <__subdf3+0x7b0>
 102d998:	89a3883a 	add	r17,r17,r6
 102d99c:	194b883a 	add	r5,r3,r5
 102d9a0:	898d803a 	cmpltu	r6,r17,r6
 102d9a4:	298b883a 	add	r5,r5,r6
 102d9a8:	5021883a 	mov	r16,r10
 102d9ac:	003efc06 	br	102d5a0 <__alt_data_end+0xffff00e0>
 102d9b0:	1000341e 	bne	r2,zero,102da84 <__subdf3+0x758>
 102d9b4:	1984b03a 	or	r2,r3,r6
 102d9b8:	10006f26 	beq	r2,zero,102db78 <__subdf3+0x84c>
 102d9bc:	180b883a 	mov	r5,r3
 102d9c0:	3023883a 	mov	r17,r6
 102d9c4:	3825883a 	mov	r18,r7
 102d9c8:	0401ffc4 	movi	r16,2047
 102d9cc:	003e7a06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102d9d0:	2c62b03a 	or	r17,r5,r17
 102d9d4:	8822c03a 	cmpne	r17,r17,zero
 102d9d8:	0005883a 	mov	r2,zero
 102d9dc:	003f8a06 	br	102d808 <__alt_data_end+0xffff0348>
 102d9e0:	3821883a 	mov	r16,r7
 102d9e4:	000b883a 	mov	r5,zero
 102d9e8:	0023883a 	mov	r17,zero
 102d9ec:	003ed206 	br	102d538 <__alt_data_end+0xffff0078>
 102d9f0:	0101ffc4 	movi	r4,2047
 102d9f4:	51003b26 	beq	r10,r4,102dae4 <__subdf3+0x7b8>
 102d9f8:	0085c83a 	sub	r2,zero,r2
 102d9fc:	29402034 	orhi	r5,r5,128
 102da00:	01000e04 	movi	r4,56
 102da04:	20806216 	blt	r4,r2,102db90 <__subdf3+0x864>
 102da08:	010007c4 	movi	r4,31
 102da0c:	20806b16 	blt	r4,r2,102dbbc <__subdf3+0x890>
 102da10:	01000804 	movi	r4,32
 102da14:	2089c83a 	sub	r4,r4,r2
 102da18:	2912983a 	sll	r9,r5,r4
 102da1c:	888ed83a 	srl	r7,r17,r2
 102da20:	8908983a 	sll	r4,r17,r4
 102da24:	2884d83a 	srl	r2,r5,r2
 102da28:	49e2b03a 	or	r17,r9,r7
 102da2c:	2008c03a 	cmpne	r4,r4,zero
 102da30:	8922b03a 	or	r17,r17,r4
 102da34:	89a3883a 	add	r17,r17,r6
 102da38:	10c5883a 	add	r2,r2,r3
 102da3c:	898d803a 	cmpltu	r6,r17,r6
 102da40:	118b883a 	add	r5,r2,r6
 102da44:	5021883a 	mov	r16,r10
 102da48:	003ed506 	br	102d5a0 <__alt_data_end+0xffff00e0>
 102da4c:	1984b03a 	or	r2,r3,r6
 102da50:	103e5926 	beq	r2,zero,102d3b8 <__alt_data_end+0xfffefef8>
 102da54:	8989c83a 	sub	r4,r17,r6
 102da58:	8911803a 	cmpltu	r8,r17,r4
 102da5c:	28c5c83a 	sub	r2,r5,r3
 102da60:	1205c83a 	sub	r2,r2,r8
 102da64:	1200202c 	andhi	r8,r2,128
 102da68:	403ef926 	beq	r8,zero,102d650 <__alt_data_end+0xffff0190>
 102da6c:	3463c83a 	sub	r17,r6,r17
 102da70:	194bc83a 	sub	r5,r3,r5
 102da74:	344d803a 	cmpltu	r6,r6,r17
 102da78:	298bc83a 	sub	r5,r5,r6
 102da7c:	3825883a 	mov	r18,r7
 102da80:	003e4d06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102da84:	1984b03a 	or	r2,r3,r6
 102da88:	10002b26 	beq	r2,zero,102db38 <__subdf3+0x80c>
 102da8c:	2808d0fa 	srli	r4,r5,3
 102da90:	8822d0fa 	srli	r17,r17,3
 102da94:	280a977a 	slli	r5,r5,29
 102da98:	2080022c 	andhi	r2,r4,8
 102da9c:	2c62b03a 	or	r17,r5,r17
 102daa0:	10000826 	beq	r2,zero,102dac4 <__subdf3+0x798>
 102daa4:	1810d0fa 	srli	r8,r3,3
 102daa8:	4080022c 	andhi	r2,r8,8
 102daac:	1000051e 	bne	r2,zero,102dac4 <__subdf3+0x798>
 102dab0:	300cd0fa 	srli	r6,r6,3
 102dab4:	1804977a 	slli	r2,r3,29
 102dab8:	4009883a 	mov	r4,r8
 102dabc:	3825883a 	mov	r18,r7
 102dac0:	11a2b03a 	or	r17,r2,r6
 102dac4:	880ad77a 	srli	r5,r17,29
 102dac8:	200890fa 	slli	r4,r4,3
 102dacc:	882290fa 	slli	r17,r17,3
 102dad0:	0401ffc4 	movi	r16,2047
 102dad4:	290ab03a 	or	r5,r5,r4
 102dad8:	003e3706 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102dadc:	0101ffc4 	movi	r4,2047
 102dae0:	513fc71e 	bne	r10,r4,102da00 <__alt_data_end+0xffff0540>
 102dae4:	180b883a 	mov	r5,r3
 102dae8:	3023883a 	mov	r17,r6
 102daec:	5021883a 	mov	r16,r10
 102daf0:	003e3106 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102daf4:	10002d26 	beq	r2,zero,102dbac <__subdf3+0x880>
 102daf8:	1984b03a 	or	r2,r3,r6
 102dafc:	10000e26 	beq	r2,zero,102db38 <__subdf3+0x80c>
 102db00:	2808d0fa 	srli	r4,r5,3
 102db04:	8822d0fa 	srli	r17,r17,3
 102db08:	280a977a 	slli	r5,r5,29
 102db0c:	2080022c 	andhi	r2,r4,8
 102db10:	2c62b03a 	or	r17,r5,r17
 102db14:	103feb26 	beq	r2,zero,102dac4 <__alt_data_end+0xffff0604>
 102db18:	180ed0fa 	srli	r7,r3,3
 102db1c:	3880022c 	andhi	r2,r7,8
 102db20:	103fe81e 	bne	r2,zero,102dac4 <__alt_data_end+0xffff0604>
 102db24:	300cd0fa 	srli	r6,r6,3
 102db28:	1804977a 	slli	r2,r3,29
 102db2c:	3809883a 	mov	r4,r7
 102db30:	11a2b03a 	or	r17,r2,r6
 102db34:	003fe306 	br	102dac4 <__alt_data_end+0xffff0604>
 102db38:	0401ffc4 	movi	r16,2047
 102db3c:	003e1e06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102db40:	0005883a 	mov	r2,zero
 102db44:	003f8306 	br	102d954 <__alt_data_end+0xffff0494>
 102db48:	113ff804 	addi	r4,r2,-32
 102db4c:	02000804 	movi	r8,32
 102db50:	2908d83a 	srl	r4,r5,r4
 102db54:	12002526 	beq	r2,r8,102dbec <__subdf3+0x8c0>
 102db58:	02001004 	movi	r8,64
 102db5c:	4085c83a 	sub	r2,r8,r2
 102db60:	288a983a 	sll	r5,r5,r2
 102db64:	2c62b03a 	or	r17,r5,r17
 102db68:	8822c03a 	cmpne	r17,r17,zero
 102db6c:	8922b03a 	or	r17,r17,r4
 102db70:	0005883a 	mov	r2,zero
 102db74:	003f2406 	br	102d808 <__alt_data_end+0xffff0348>
 102db78:	01402034 	movhi	r5,128
 102db7c:	0011883a 	mov	r8,zero
 102db80:	297fffc4 	addi	r5,r5,-1
 102db84:	047ffe04 	movi	r17,-8
 102db88:	0401ffc4 	movi	r16,2047
 102db8c:	003e6a06 	br	102d538 <__alt_data_end+0xffff0078>
 102db90:	2c62b03a 	or	r17,r5,r17
 102db94:	8822c03a 	cmpne	r17,r17,zero
 102db98:	0005883a 	mov	r2,zero
 102db9c:	003fa506 	br	102da34 <__alt_data_end+0xffff0574>
 102dba0:	180b883a 	mov	r5,r3
 102dba4:	3023883a 	mov	r17,r6
 102dba8:	003e0306 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102dbac:	180b883a 	mov	r5,r3
 102dbb0:	3023883a 	mov	r17,r6
 102dbb4:	0401ffc4 	movi	r16,2047
 102dbb8:	003dff06 	br	102d3b8 <__alt_data_end+0xfffefef8>
 102dbbc:	113ff804 	addi	r4,r2,-32
 102dbc0:	01c00804 	movi	r7,32
 102dbc4:	2908d83a 	srl	r4,r5,r4
 102dbc8:	11c00a26 	beq	r2,r7,102dbf4 <__subdf3+0x8c8>
 102dbcc:	01c01004 	movi	r7,64
 102dbd0:	3885c83a 	sub	r2,r7,r2
 102dbd4:	288a983a 	sll	r5,r5,r2
 102dbd8:	2c62b03a 	or	r17,r5,r17
 102dbdc:	8822c03a 	cmpne	r17,r17,zero
 102dbe0:	8922b03a 	or	r17,r17,r4
 102dbe4:	0005883a 	mov	r2,zero
 102dbe8:	003f9206 	br	102da34 <__alt_data_end+0xffff0574>
 102dbec:	000b883a 	mov	r5,zero
 102dbf0:	003fdc06 	br	102db64 <__alt_data_end+0xffff06a4>
 102dbf4:	000b883a 	mov	r5,zero
 102dbf8:	003ff706 	br	102dbd8 <__alt_data_end+0xffff0718>

0102dbfc <__fixdfsi>:
 102dbfc:	2806d53a 	srli	r3,r5,20
 102dc00:	00800434 	movhi	r2,16
 102dc04:	10bfffc4 	addi	r2,r2,-1
 102dc08:	18c1ffcc 	andi	r3,r3,2047
 102dc0c:	0180ff84 	movi	r6,1022
 102dc10:	2884703a 	and	r2,r5,r2
 102dc14:	280ad7fa 	srli	r5,r5,31
 102dc18:	30c0130e 	bge	r6,r3,102dc68 <__fixdfsi+0x6c>
 102dc1c:	01810744 	movi	r6,1053
 102dc20:	30c00d16 	blt	r6,r3,102dc58 <__fixdfsi+0x5c>
 102dc24:	01810cc4 	movi	r6,1075
 102dc28:	30cdc83a 	sub	r6,r6,r3
 102dc2c:	01c007c4 	movi	r7,31
 102dc30:	10800434 	orhi	r2,r2,16
 102dc34:	39800e0e 	bge	r7,r6,102dc70 <__fixdfsi+0x74>
 102dc38:	010104c4 	movi	r4,1043
 102dc3c:	20c7c83a 	sub	r3,r4,r3
 102dc40:	10c6d83a 	srl	r3,r2,r3
 102dc44:	29403fcc 	andi	r5,r5,255
 102dc48:	0145c83a 	sub	r2,zero,r5
 102dc4c:	1884f03a 	xor	r2,r3,r2
 102dc50:	1145883a 	add	r2,r2,r5
 102dc54:	f800283a 	ret
 102dc58:	00a00034 	movhi	r2,32768
 102dc5c:	10bfffc4 	addi	r2,r2,-1
 102dc60:	2885883a 	add	r2,r5,r2
 102dc64:	f800283a 	ret
 102dc68:	0005883a 	mov	r2,zero
 102dc6c:	f800283a 	ret
 102dc70:	18fefb44 	addi	r3,r3,-1043
 102dc74:	2188d83a 	srl	r4,r4,r6
 102dc78:	10c6983a 	sll	r3,r2,r3
 102dc7c:	20c6b03a 	or	r3,r4,r3
 102dc80:	003ff006 	br	102dc44 <__alt_data_end+0xffff0784>

0102dc84 <__floatsidf>:
 102dc84:	defffd04 	addi	sp,sp,-12
 102dc88:	dc400115 	stw	r17,4(sp)
 102dc8c:	dfc00215 	stw	ra,8(sp)
 102dc90:	dc000015 	stw	r16,0(sp)
 102dc94:	2023883a 	mov	r17,r4
 102dc98:	20001426 	beq	r4,zero,102dcec <__floatsidf+0x68>
 102dc9c:	2020d7fa 	srli	r16,r4,31
 102dca0:	80000126 	beq	r16,zero,102dca8 <__floatsidf+0x24>
 102dca4:	0123c83a 	sub	r17,zero,r4
 102dca8:	8809883a 	mov	r4,r17
 102dcac:	1022a880 	call	1022a88 <__clzsi2>
 102dcb0:	01410784 	movi	r5,1054
 102dcb4:	00c00284 	movi	r3,10
 102dcb8:	288bc83a 	sub	r5,r5,r2
 102dcbc:	18801c16 	blt	r3,r2,102dd30 <__floatsidf+0xac>
 102dcc0:	00c002c4 	movi	r3,11
 102dcc4:	1887c83a 	sub	r3,r3,r2
 102dcc8:	88c8d83a 	srl	r4,r17,r3
 102dccc:	00c00434 	movhi	r3,16
 102dcd0:	18ffffc4 	addi	r3,r3,-1
 102dcd4:	10800544 	addi	r2,r2,21
 102dcd8:	20c8703a 	and	r4,r4,r3
 102dcdc:	8884983a 	sll	r2,r17,r2
 102dce0:	28c1ffcc 	andi	r3,r5,2047
 102dce4:	800d883a 	mov	r6,r16
 102dce8:	00000406 	br	102dcfc <__floatsidf+0x78>
 102dcec:	000d883a 	mov	r6,zero
 102dcf0:	0007883a 	mov	r3,zero
 102dcf4:	0009883a 	mov	r4,zero
 102dcf8:	0005883a 	mov	r2,zero
 102dcfc:	180a953a 	slli	r5,r3,20
 102dd00:	31803fcc 	andi	r6,r6,255
 102dd04:	00c00434 	movhi	r3,16
 102dd08:	300c97fa 	slli	r6,r6,31
 102dd0c:	18ffffc4 	addi	r3,r3,-1
 102dd10:	20c6703a 	and	r3,r4,r3
 102dd14:	1946b03a 	or	r3,r3,r5
 102dd18:	1986b03a 	or	r3,r3,r6
 102dd1c:	dfc00217 	ldw	ra,8(sp)
 102dd20:	dc400117 	ldw	r17,4(sp)
 102dd24:	dc000017 	ldw	r16,0(sp)
 102dd28:	dec00304 	addi	sp,sp,12
 102dd2c:	f800283a 	ret
 102dd30:	10fffd44 	addi	r3,r2,-11
 102dd34:	88c8983a 	sll	r4,r17,r3
 102dd38:	00800434 	movhi	r2,16
 102dd3c:	10bfffc4 	addi	r2,r2,-1
 102dd40:	2088703a 	and	r4,r4,r2
 102dd44:	28c1ffcc 	andi	r3,r5,2047
 102dd48:	800d883a 	mov	r6,r16
 102dd4c:	0005883a 	mov	r2,zero
 102dd50:	003fea06 	br	102dcfc <__alt_data_end+0xffff083c>

0102dd54 <__floatunsidf>:
 102dd54:	defffe04 	addi	sp,sp,-8
 102dd58:	dc000015 	stw	r16,0(sp)
 102dd5c:	dfc00115 	stw	ra,4(sp)
 102dd60:	2021883a 	mov	r16,r4
 102dd64:	20001026 	beq	r4,zero,102dda8 <__floatunsidf+0x54>
 102dd68:	1022a880 	call	1022a88 <__clzsi2>
 102dd6c:	01410784 	movi	r5,1054
 102dd70:	100d883a 	mov	r6,r2
 102dd74:	288bc83a 	sub	r5,r5,r2
 102dd78:	00800284 	movi	r2,10
 102dd7c:	11801616 	blt	r2,r6,102ddd8 <__floatunsidf+0x84>
 102dd80:	008002c4 	movi	r2,11
 102dd84:	1185c83a 	sub	r2,r2,r6
 102dd88:	8084d83a 	srl	r2,r16,r2
 102dd8c:	00c00434 	movhi	r3,16
 102dd90:	31c00544 	addi	r7,r6,21
 102dd94:	18ffffc4 	addi	r3,r3,-1
 102dd98:	81e0983a 	sll	r16,r16,r7
 102dd9c:	10cc703a 	and	r6,r2,r3
 102dda0:	2941ffcc 	andi	r5,r5,2047
 102dda4:	00000206 	br	102ddb0 <__floatunsidf+0x5c>
 102dda8:	000b883a 	mov	r5,zero
 102ddac:	000d883a 	mov	r6,zero
 102ddb0:	280a953a 	slli	r5,r5,20
 102ddb4:	00c00434 	movhi	r3,16
 102ddb8:	18ffffc4 	addi	r3,r3,-1
 102ddbc:	30c6703a 	and	r3,r6,r3
 102ddc0:	8005883a 	mov	r2,r16
 102ddc4:	1946b03a 	or	r3,r3,r5
 102ddc8:	dfc00117 	ldw	ra,4(sp)
 102ddcc:	dc000017 	ldw	r16,0(sp)
 102ddd0:	dec00204 	addi	sp,sp,8
 102ddd4:	f800283a 	ret
 102ddd8:	31bffd44 	addi	r6,r6,-11
 102dddc:	818c983a 	sll	r6,r16,r6
 102dde0:	00800434 	movhi	r2,16
 102dde4:	10bfffc4 	addi	r2,r2,-1
 102dde8:	2941ffcc 	andi	r5,r5,2047
 102ddec:	0021883a 	mov	r16,zero
 102ddf0:	308c703a 	and	r6,r6,r2
 102ddf4:	003fee06 	br	102ddb0 <__alt_data_end+0xffff08f0>

0102ddf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102ddf8:	defffe04 	addi	sp,sp,-8
 102ddfc:	dfc00115 	stw	ra,4(sp)
 102de00:	df000015 	stw	fp,0(sp)
 102de04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102de08:	008040f4 	movhi	r2,259
 102de0c:	1089bf04 	addi	r2,r2,9980
 102de10:	10800017 	ldw	r2,0(r2)
 102de14:	10000526 	beq	r2,zero,102de2c <alt_get_errno+0x34>
 102de18:	008040f4 	movhi	r2,259
 102de1c:	1089bf04 	addi	r2,r2,9980
 102de20:	10800017 	ldw	r2,0(r2)
 102de24:	103ee83a 	callr	r2
 102de28:	00000206 	br	102de34 <alt_get_errno+0x3c>
 102de2c:	008040f4 	movhi	r2,259
 102de30:	10908504 	addi	r2,r2,16916
}
 102de34:	e037883a 	mov	sp,fp
 102de38:	dfc00117 	ldw	ra,4(sp)
 102de3c:	df000017 	ldw	fp,0(sp)
 102de40:	dec00204 	addi	sp,sp,8
 102de44:	f800283a 	ret

0102de48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 102de48:	defffb04 	addi	sp,sp,-20
 102de4c:	dfc00415 	stw	ra,16(sp)
 102de50:	df000315 	stw	fp,12(sp)
 102de54:	df000304 	addi	fp,sp,12
 102de58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 102de5c:	e0bfff17 	ldw	r2,-4(fp)
 102de60:	10000616 	blt	r2,zero,102de7c <close+0x34>
 102de64:	e0bfff17 	ldw	r2,-4(fp)
 102de68:	10c00324 	muli	r3,r2,12
 102de6c:	008040f4 	movhi	r2,259
 102de70:	10853c04 	addi	r2,r2,5360
 102de74:	1885883a 	add	r2,r3,r2
 102de78:	00000106 	br	102de80 <close+0x38>
 102de7c:	0005883a 	mov	r2,zero
 102de80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 102de84:	e0bffd17 	ldw	r2,-12(fp)
 102de88:	10001926 	beq	r2,zero,102def0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 102de8c:	e0bffd17 	ldw	r2,-12(fp)
 102de90:	10800017 	ldw	r2,0(r2)
 102de94:	10800417 	ldw	r2,16(r2)
 102de98:	10000626 	beq	r2,zero,102deb4 <close+0x6c>
 102de9c:	e0bffd17 	ldw	r2,-12(fp)
 102dea0:	10800017 	ldw	r2,0(r2)
 102dea4:	10800417 	ldw	r2,16(r2)
 102dea8:	e13ffd17 	ldw	r4,-12(fp)
 102deac:	103ee83a 	callr	r2
 102deb0:	00000106 	br	102deb8 <close+0x70>
 102deb4:	0005883a 	mov	r2,zero
 102deb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 102debc:	e13fff17 	ldw	r4,-4(fp)
 102dec0:	102e5440 	call	102e544 <alt_release_fd>
    if (rval < 0)
 102dec4:	e0bffe17 	ldw	r2,-8(fp)
 102dec8:	1000070e 	bge	r2,zero,102dee8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 102decc:	102ddf80 	call	102ddf8 <alt_get_errno>
 102ded0:	1007883a 	mov	r3,r2
 102ded4:	e0bffe17 	ldw	r2,-8(fp)
 102ded8:	0085c83a 	sub	r2,zero,r2
 102dedc:	18800015 	stw	r2,0(r3)
      return -1;
 102dee0:	00bfffc4 	movi	r2,-1
 102dee4:	00000706 	br	102df04 <close+0xbc>
    }
    return 0;
 102dee8:	0005883a 	mov	r2,zero
 102deec:	00000506 	br	102df04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 102def0:	102ddf80 	call	102ddf8 <alt_get_errno>
 102def4:	1007883a 	mov	r3,r2
 102def8:	00801444 	movi	r2,81
 102defc:	18800015 	stw	r2,0(r3)
    return -1;
 102df00:	00bfffc4 	movi	r2,-1
  }
}
 102df04:	e037883a 	mov	sp,fp
 102df08:	dfc00117 	ldw	ra,4(sp)
 102df0c:	df000017 	ldw	fp,0(sp)
 102df10:	dec00204 	addi	sp,sp,8
 102df14:	f800283a 	ret

0102df18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 102df18:	defffc04 	addi	sp,sp,-16
 102df1c:	df000315 	stw	fp,12(sp)
 102df20:	df000304 	addi	fp,sp,12
 102df24:	e13ffd15 	stw	r4,-12(fp)
 102df28:	e17ffe15 	stw	r5,-8(fp)
 102df2c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 102df30:	e0bfff17 	ldw	r2,-4(fp)
}
 102df34:	e037883a 	mov	sp,fp
 102df38:	df000017 	ldw	fp,0(sp)
 102df3c:	dec00104 	addi	sp,sp,4
 102df40:	f800283a 	ret

0102df44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102df44:	defffe04 	addi	sp,sp,-8
 102df48:	dfc00115 	stw	ra,4(sp)
 102df4c:	df000015 	stw	fp,0(sp)
 102df50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102df54:	008040f4 	movhi	r2,259
 102df58:	1089bf04 	addi	r2,r2,9980
 102df5c:	10800017 	ldw	r2,0(r2)
 102df60:	10000526 	beq	r2,zero,102df78 <alt_get_errno+0x34>
 102df64:	008040f4 	movhi	r2,259
 102df68:	1089bf04 	addi	r2,r2,9980
 102df6c:	10800017 	ldw	r2,0(r2)
 102df70:	103ee83a 	callr	r2
 102df74:	00000206 	br	102df80 <alt_get_errno+0x3c>
 102df78:	008040f4 	movhi	r2,259
 102df7c:	10908504 	addi	r2,r2,16916
}
 102df80:	e037883a 	mov	sp,fp
 102df84:	dfc00117 	ldw	ra,4(sp)
 102df88:	df000017 	ldw	fp,0(sp)
 102df8c:	dec00204 	addi	sp,sp,8
 102df90:	f800283a 	ret

0102df94 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 102df94:	defffb04 	addi	sp,sp,-20
 102df98:	dfc00415 	stw	ra,16(sp)
 102df9c:	df000315 	stw	fp,12(sp)
 102dfa0:	df000304 	addi	fp,sp,12
 102dfa4:	e13ffe15 	stw	r4,-8(fp)
 102dfa8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102dfac:	e0bffe17 	ldw	r2,-8(fp)
 102dfb0:	10000616 	blt	r2,zero,102dfcc <fstat+0x38>
 102dfb4:	e0bffe17 	ldw	r2,-8(fp)
 102dfb8:	10c00324 	muli	r3,r2,12
 102dfbc:	008040f4 	movhi	r2,259
 102dfc0:	10853c04 	addi	r2,r2,5360
 102dfc4:	1885883a 	add	r2,r3,r2
 102dfc8:	00000106 	br	102dfd0 <fstat+0x3c>
 102dfcc:	0005883a 	mov	r2,zero
 102dfd0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 102dfd4:	e0bffd17 	ldw	r2,-12(fp)
 102dfd8:	10001026 	beq	r2,zero,102e01c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 102dfdc:	e0bffd17 	ldw	r2,-12(fp)
 102dfe0:	10800017 	ldw	r2,0(r2)
 102dfe4:	10800817 	ldw	r2,32(r2)
 102dfe8:	10000726 	beq	r2,zero,102e008 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 102dfec:	e0bffd17 	ldw	r2,-12(fp)
 102dff0:	10800017 	ldw	r2,0(r2)
 102dff4:	10800817 	ldw	r2,32(r2)
 102dff8:	e13ffd17 	ldw	r4,-12(fp)
 102dffc:	e17fff17 	ldw	r5,-4(fp)
 102e000:	103ee83a 	callr	r2
 102e004:	00000a06 	br	102e030 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 102e008:	e0bfff17 	ldw	r2,-4(fp)
 102e00c:	00c80004 	movi	r3,8192
 102e010:	10c00115 	stw	r3,4(r2)
      return 0;
 102e014:	0005883a 	mov	r2,zero
 102e018:	00000506 	br	102e030 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 102e01c:	102df440 	call	102df44 <alt_get_errno>
 102e020:	1007883a 	mov	r3,r2
 102e024:	00801444 	movi	r2,81
 102e028:	18800015 	stw	r2,0(r3)
    return -1;
 102e02c:	00bfffc4 	movi	r2,-1
  }
}
 102e030:	e037883a 	mov	sp,fp
 102e034:	dfc00117 	ldw	ra,4(sp)
 102e038:	df000017 	ldw	fp,0(sp)
 102e03c:	dec00204 	addi	sp,sp,8
 102e040:	f800283a 	ret

0102e044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102e044:	defffe04 	addi	sp,sp,-8
 102e048:	dfc00115 	stw	ra,4(sp)
 102e04c:	df000015 	stw	fp,0(sp)
 102e050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102e054:	008040f4 	movhi	r2,259
 102e058:	1089bf04 	addi	r2,r2,9980
 102e05c:	10800017 	ldw	r2,0(r2)
 102e060:	10000526 	beq	r2,zero,102e078 <alt_get_errno+0x34>
 102e064:	008040f4 	movhi	r2,259
 102e068:	1089bf04 	addi	r2,r2,9980
 102e06c:	10800017 	ldw	r2,0(r2)
 102e070:	103ee83a 	callr	r2
 102e074:	00000206 	br	102e080 <alt_get_errno+0x3c>
 102e078:	008040f4 	movhi	r2,259
 102e07c:	10908504 	addi	r2,r2,16916
}
 102e080:	e037883a 	mov	sp,fp
 102e084:	dfc00117 	ldw	ra,4(sp)
 102e088:	df000017 	ldw	fp,0(sp)
 102e08c:	dec00204 	addi	sp,sp,8
 102e090:	f800283a 	ret

0102e094 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 102e094:	deffed04 	addi	sp,sp,-76
 102e098:	dfc01215 	stw	ra,72(sp)
 102e09c:	df001115 	stw	fp,68(sp)
 102e0a0:	df001104 	addi	fp,sp,68
 102e0a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102e0a8:	e0bfff17 	ldw	r2,-4(fp)
 102e0ac:	10000616 	blt	r2,zero,102e0c8 <isatty+0x34>
 102e0b0:	e0bfff17 	ldw	r2,-4(fp)
 102e0b4:	10c00324 	muli	r3,r2,12
 102e0b8:	008040f4 	movhi	r2,259
 102e0bc:	10853c04 	addi	r2,r2,5360
 102e0c0:	1885883a 	add	r2,r3,r2
 102e0c4:	00000106 	br	102e0cc <isatty+0x38>
 102e0c8:	0005883a 	mov	r2,zero
 102e0cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 102e0d0:	e0bfef17 	ldw	r2,-68(fp)
 102e0d4:	10000e26 	beq	r2,zero,102e110 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 102e0d8:	e0bfef17 	ldw	r2,-68(fp)
 102e0dc:	10800017 	ldw	r2,0(r2)
 102e0e0:	10800817 	ldw	r2,32(r2)
 102e0e4:	1000021e 	bne	r2,zero,102e0f0 <isatty+0x5c>
    {
      return 1;
 102e0e8:	00800044 	movi	r2,1
 102e0ec:	00000d06 	br	102e124 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 102e0f0:	e0bff004 	addi	r2,fp,-64
 102e0f4:	e13fff17 	ldw	r4,-4(fp)
 102e0f8:	100b883a 	mov	r5,r2
 102e0fc:	102df940 	call	102df94 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 102e100:	e0bff117 	ldw	r2,-60(fp)
 102e104:	10880020 	cmpeqi	r2,r2,8192
 102e108:	10803fcc 	andi	r2,r2,255
 102e10c:	00000506 	br	102e124 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 102e110:	102e0440 	call	102e044 <alt_get_errno>
 102e114:	1007883a 	mov	r3,r2
 102e118:	00801444 	movi	r2,81
 102e11c:	18800015 	stw	r2,0(r3)
    return 0;
 102e120:	0005883a 	mov	r2,zero
  }
}
 102e124:	e037883a 	mov	sp,fp
 102e128:	dfc00117 	ldw	ra,4(sp)
 102e12c:	df000017 	ldw	fp,0(sp)
 102e130:	dec00204 	addi	sp,sp,8
 102e134:	f800283a 	ret

0102e138 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 102e138:	defffc04 	addi	sp,sp,-16
 102e13c:	df000315 	stw	fp,12(sp)
 102e140:	df000304 	addi	fp,sp,12
 102e144:	e13ffd15 	stw	r4,-12(fp)
 102e148:	e17ffe15 	stw	r5,-8(fp)
 102e14c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 102e150:	e0fffe17 	ldw	r3,-8(fp)
 102e154:	e0bffd17 	ldw	r2,-12(fp)
 102e158:	18800c26 	beq	r3,r2,102e18c <alt_load_section+0x54>
  {
    while( to != end )
 102e15c:	00000806 	br	102e180 <alt_load_section+0x48>
    {
      *to++ = *from++;
 102e160:	e0bffe17 	ldw	r2,-8(fp)
 102e164:	10c00104 	addi	r3,r2,4
 102e168:	e0fffe15 	stw	r3,-8(fp)
 102e16c:	e0fffd17 	ldw	r3,-12(fp)
 102e170:	19000104 	addi	r4,r3,4
 102e174:	e13ffd15 	stw	r4,-12(fp)
 102e178:	18c00017 	ldw	r3,0(r3)
 102e17c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 102e180:	e0fffe17 	ldw	r3,-8(fp)
 102e184:	e0bfff17 	ldw	r2,-4(fp)
 102e188:	18bff51e 	bne	r3,r2,102e160 <__alt_data_end+0xffff0ca0>
    {
      *to++ = *from++;
    }
  }
}
 102e18c:	e037883a 	mov	sp,fp
 102e190:	df000017 	ldw	fp,0(sp)
 102e194:	dec00104 	addi	sp,sp,4
 102e198:	f800283a 	ret

0102e19c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 102e19c:	defffe04 	addi	sp,sp,-8
 102e1a0:	dfc00115 	stw	ra,4(sp)
 102e1a4:	df000015 	stw	fp,0(sp)
 102e1a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 102e1ac:	010040f4 	movhi	r4,259
 102e1b0:	2109c404 	addi	r4,r4,10000
 102e1b4:	014040f4 	movhi	r5,259
 102e1b8:	29430904 	addi	r5,r5,3108
 102e1bc:	018040f4 	movhi	r6,259
 102e1c0:	3189c404 	addi	r6,r6,10000
 102e1c4:	102e1380 	call	102e138 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 102e1c8:	010040b4 	movhi	r4,258
 102e1cc:	21000804 	addi	r4,r4,32
 102e1d0:	014040b4 	movhi	r5,258
 102e1d4:	29400804 	addi	r5,r5,32
 102e1d8:	018040b4 	movhi	r6,258
 102e1dc:	31809004 	addi	r6,r6,576
 102e1e0:	102e1380 	call	102e138 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 102e1e4:	010040f4 	movhi	r4,259
 102e1e8:	2101fc04 	addi	r4,r4,2032
 102e1ec:	014040f4 	movhi	r5,259
 102e1f0:	2941fc04 	addi	r5,r5,2032
 102e1f4:	018040f4 	movhi	r6,259
 102e1f8:	31830904 	addi	r6,r6,3108
 102e1fc:	102e1380 	call	102e138 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 102e200:	102f6740 	call	102f674 <alt_dcache_flush_all>
  alt_icache_flush_all();
 102e204:	102f8640 	call	102f864 <alt_icache_flush_all>
}
 102e208:	e037883a 	mov	sp,fp
 102e20c:	dfc00117 	ldw	ra,4(sp)
 102e210:	df000017 	ldw	fp,0(sp)
 102e214:	dec00204 	addi	sp,sp,8
 102e218:	f800283a 	ret

0102e21c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102e21c:	defffe04 	addi	sp,sp,-8
 102e220:	dfc00115 	stw	ra,4(sp)
 102e224:	df000015 	stw	fp,0(sp)
 102e228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102e22c:	008040f4 	movhi	r2,259
 102e230:	1089bf04 	addi	r2,r2,9980
 102e234:	10800017 	ldw	r2,0(r2)
 102e238:	10000526 	beq	r2,zero,102e250 <alt_get_errno+0x34>
 102e23c:	008040f4 	movhi	r2,259
 102e240:	1089bf04 	addi	r2,r2,9980
 102e244:	10800017 	ldw	r2,0(r2)
 102e248:	103ee83a 	callr	r2
 102e24c:	00000206 	br	102e258 <alt_get_errno+0x3c>
 102e250:	008040f4 	movhi	r2,259
 102e254:	10908504 	addi	r2,r2,16916
}
 102e258:	e037883a 	mov	sp,fp
 102e25c:	dfc00117 	ldw	ra,4(sp)
 102e260:	df000017 	ldw	fp,0(sp)
 102e264:	dec00204 	addi	sp,sp,8
 102e268:	f800283a 	ret

0102e26c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 102e26c:	defff904 	addi	sp,sp,-28
 102e270:	dfc00615 	stw	ra,24(sp)
 102e274:	df000515 	stw	fp,20(sp)
 102e278:	df000504 	addi	fp,sp,20
 102e27c:	e13ffd15 	stw	r4,-12(fp)
 102e280:	e17ffe15 	stw	r5,-8(fp)
 102e284:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 102e288:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102e28c:	e0bffd17 	ldw	r2,-12(fp)
 102e290:	10000616 	blt	r2,zero,102e2ac <lseek+0x40>
 102e294:	e0bffd17 	ldw	r2,-12(fp)
 102e298:	10c00324 	muli	r3,r2,12
 102e29c:	008040f4 	movhi	r2,259
 102e2a0:	10853c04 	addi	r2,r2,5360
 102e2a4:	1885883a 	add	r2,r3,r2
 102e2a8:	00000106 	br	102e2b0 <lseek+0x44>
 102e2ac:	0005883a 	mov	r2,zero
 102e2b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 102e2b4:	e0bffc17 	ldw	r2,-16(fp)
 102e2b8:	10001026 	beq	r2,zero,102e2fc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 102e2bc:	e0bffc17 	ldw	r2,-16(fp)
 102e2c0:	10800017 	ldw	r2,0(r2)
 102e2c4:	10800717 	ldw	r2,28(r2)
 102e2c8:	10000926 	beq	r2,zero,102e2f0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 102e2cc:	e0bffc17 	ldw	r2,-16(fp)
 102e2d0:	10800017 	ldw	r2,0(r2)
 102e2d4:	10800717 	ldw	r2,28(r2)
 102e2d8:	e13ffc17 	ldw	r4,-16(fp)
 102e2dc:	e17ffe17 	ldw	r5,-8(fp)
 102e2e0:	e1bfff17 	ldw	r6,-4(fp)
 102e2e4:	103ee83a 	callr	r2
 102e2e8:	e0bffb15 	stw	r2,-20(fp)
 102e2ec:	00000506 	br	102e304 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 102e2f0:	00bfde84 	movi	r2,-134
 102e2f4:	e0bffb15 	stw	r2,-20(fp)
 102e2f8:	00000206 	br	102e304 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 102e2fc:	00bfebc4 	movi	r2,-81
 102e300:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 102e304:	e0bffb17 	ldw	r2,-20(fp)
 102e308:	1000070e 	bge	r2,zero,102e328 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 102e30c:	102e21c0 	call	102e21c <alt_get_errno>
 102e310:	1007883a 	mov	r3,r2
 102e314:	e0bffb17 	ldw	r2,-20(fp)
 102e318:	0085c83a 	sub	r2,zero,r2
 102e31c:	18800015 	stw	r2,0(r3)
    rc = -1;
 102e320:	00bfffc4 	movi	r2,-1
 102e324:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 102e328:	e0bffb17 	ldw	r2,-20(fp)
}
 102e32c:	e037883a 	mov	sp,fp
 102e330:	dfc00117 	ldw	ra,4(sp)
 102e334:	df000017 	ldw	fp,0(sp)
 102e338:	dec00204 	addi	sp,sp,8
 102e33c:	f800283a 	ret

0102e340 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 102e340:	defffd04 	addi	sp,sp,-12
 102e344:	dfc00215 	stw	ra,8(sp)
 102e348:	df000115 	stw	fp,4(sp)
 102e34c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 102e350:	0009883a 	mov	r4,zero
 102e354:	102e8040 	call	102e804 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 102e358:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 102e35c:	102e8380 	call	102e838 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 102e360:	010040f4 	movhi	r4,259
 102e364:	21030104 	addi	r4,r4,3076
 102e368:	014040f4 	movhi	r5,259
 102e36c:	29430104 	addi	r5,r5,3076
 102e370:	018040f4 	movhi	r6,259
 102e374:	31830104 	addi	r6,r6,3076
 102e378:	102fc240 	call	102fc24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 102e37c:	102f7ac0 	call	102f7ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 102e380:	010040f4 	movhi	r4,259
 102e384:	213e0204 	addi	r4,r4,-2040
 102e388:	103044c0 	call	103044c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 102e38c:	d126d217 	ldw	r4,-25784(gp)
 102e390:	d0e6d317 	ldw	r3,-25780(gp)
 102e394:	d0a6d417 	ldw	r2,-25776(gp)
 102e398:	180b883a 	mov	r5,r3
 102e39c:	100d883a 	mov	r6,r2
 102e3a0:	102129c0 	call	102129c <main>
 102e3a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 102e3a8:	01000044 	movi	r4,1
 102e3ac:	102de480 	call	102de48 <close>
  exit (result);
 102e3b0:	e13fff17 	ldw	r4,-4(fp)
 102e3b4:	10304600 	call	1030460 <exit>

0102e3b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 102e3b8:	defffe04 	addi	sp,sp,-8
 102e3bc:	df000115 	stw	fp,4(sp)
 102e3c0:	df000104 	addi	fp,sp,4
 102e3c4:	e13fff15 	stw	r4,-4(fp)
}
 102e3c8:	e037883a 	mov	sp,fp
 102e3cc:	df000017 	ldw	fp,0(sp)
 102e3d0:	dec00104 	addi	sp,sp,4
 102e3d4:	f800283a 	ret

0102e3d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 102e3d8:	defffe04 	addi	sp,sp,-8
 102e3dc:	df000115 	stw	fp,4(sp)
 102e3e0:	df000104 	addi	fp,sp,4
 102e3e4:	e13fff15 	stw	r4,-4(fp)
}
 102e3e8:	e037883a 	mov	sp,fp
 102e3ec:	df000017 	ldw	fp,0(sp)
 102e3f0:	dec00104 	addi	sp,sp,4
 102e3f4:	f800283a 	ret

0102e3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102e3f8:	defffe04 	addi	sp,sp,-8
 102e3fc:	dfc00115 	stw	ra,4(sp)
 102e400:	df000015 	stw	fp,0(sp)
 102e404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102e408:	008040f4 	movhi	r2,259
 102e40c:	1089bf04 	addi	r2,r2,9980
 102e410:	10800017 	ldw	r2,0(r2)
 102e414:	10000526 	beq	r2,zero,102e42c <alt_get_errno+0x34>
 102e418:	008040f4 	movhi	r2,259
 102e41c:	1089bf04 	addi	r2,r2,9980
 102e420:	10800017 	ldw	r2,0(r2)
 102e424:	103ee83a 	callr	r2
 102e428:	00000206 	br	102e434 <alt_get_errno+0x3c>
 102e42c:	008040f4 	movhi	r2,259
 102e430:	10908504 	addi	r2,r2,16916
}
 102e434:	e037883a 	mov	sp,fp
 102e438:	dfc00117 	ldw	ra,4(sp)
 102e43c:	df000017 	ldw	fp,0(sp)
 102e440:	dec00204 	addi	sp,sp,8
 102e444:	f800283a 	ret

0102e448 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 102e448:	defff904 	addi	sp,sp,-28
 102e44c:	dfc00615 	stw	ra,24(sp)
 102e450:	df000515 	stw	fp,20(sp)
 102e454:	df000504 	addi	fp,sp,20
 102e458:	e13ffd15 	stw	r4,-12(fp)
 102e45c:	e17ffe15 	stw	r5,-8(fp)
 102e460:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102e464:	e0bffd17 	ldw	r2,-12(fp)
 102e468:	10000616 	blt	r2,zero,102e484 <read+0x3c>
 102e46c:	e0bffd17 	ldw	r2,-12(fp)
 102e470:	10c00324 	muli	r3,r2,12
 102e474:	008040f4 	movhi	r2,259
 102e478:	10853c04 	addi	r2,r2,5360
 102e47c:	1885883a 	add	r2,r3,r2
 102e480:	00000106 	br	102e488 <read+0x40>
 102e484:	0005883a 	mov	r2,zero
 102e488:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 102e48c:	e0bffb17 	ldw	r2,-20(fp)
 102e490:	10002226 	beq	r2,zero,102e51c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 102e494:	e0bffb17 	ldw	r2,-20(fp)
 102e498:	10800217 	ldw	r2,8(r2)
 102e49c:	108000cc 	andi	r2,r2,3
 102e4a0:	10800060 	cmpeqi	r2,r2,1
 102e4a4:	1000181e 	bne	r2,zero,102e508 <read+0xc0>
        (fd->dev->read))
 102e4a8:	e0bffb17 	ldw	r2,-20(fp)
 102e4ac:	10800017 	ldw	r2,0(r2)
 102e4b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 102e4b4:	10001426 	beq	r2,zero,102e508 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 102e4b8:	e0bffb17 	ldw	r2,-20(fp)
 102e4bc:	10800017 	ldw	r2,0(r2)
 102e4c0:	10800517 	ldw	r2,20(r2)
 102e4c4:	e0ffff17 	ldw	r3,-4(fp)
 102e4c8:	e13ffb17 	ldw	r4,-20(fp)
 102e4cc:	e17ffe17 	ldw	r5,-8(fp)
 102e4d0:	180d883a 	mov	r6,r3
 102e4d4:	103ee83a 	callr	r2
 102e4d8:	e0bffc15 	stw	r2,-16(fp)
 102e4dc:	e0bffc17 	ldw	r2,-16(fp)
 102e4e0:	1000070e 	bge	r2,zero,102e500 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 102e4e4:	102e3f80 	call	102e3f8 <alt_get_errno>
 102e4e8:	1007883a 	mov	r3,r2
 102e4ec:	e0bffc17 	ldw	r2,-16(fp)
 102e4f0:	0085c83a 	sub	r2,zero,r2
 102e4f4:	18800015 	stw	r2,0(r3)
          return -1;
 102e4f8:	00bfffc4 	movi	r2,-1
 102e4fc:	00000c06 	br	102e530 <read+0xe8>
        }
        return rval;
 102e500:	e0bffc17 	ldw	r2,-16(fp)
 102e504:	00000a06 	br	102e530 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 102e508:	102e3f80 	call	102e3f8 <alt_get_errno>
 102e50c:	1007883a 	mov	r3,r2
 102e510:	00800344 	movi	r2,13
 102e514:	18800015 	stw	r2,0(r3)
 102e518:	00000406 	br	102e52c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 102e51c:	102e3f80 	call	102e3f8 <alt_get_errno>
 102e520:	1007883a 	mov	r3,r2
 102e524:	00801444 	movi	r2,81
 102e528:	18800015 	stw	r2,0(r3)
  }
  return -1;
 102e52c:	00bfffc4 	movi	r2,-1
}
 102e530:	e037883a 	mov	sp,fp
 102e534:	dfc00117 	ldw	ra,4(sp)
 102e538:	df000017 	ldw	fp,0(sp)
 102e53c:	dec00204 	addi	sp,sp,8
 102e540:	f800283a 	ret

0102e544 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 102e544:	defffe04 	addi	sp,sp,-8
 102e548:	df000115 	stw	fp,4(sp)
 102e54c:	df000104 	addi	fp,sp,4
 102e550:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 102e554:	e0bfff17 	ldw	r2,-4(fp)
 102e558:	108000d0 	cmplti	r2,r2,3
 102e55c:	10000d1e 	bne	r2,zero,102e594 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 102e560:	008040f4 	movhi	r2,259
 102e564:	10853c04 	addi	r2,r2,5360
 102e568:	e0ffff17 	ldw	r3,-4(fp)
 102e56c:	18c00324 	muli	r3,r3,12
 102e570:	10c5883a 	add	r2,r2,r3
 102e574:	10800204 	addi	r2,r2,8
 102e578:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 102e57c:	008040f4 	movhi	r2,259
 102e580:	10853c04 	addi	r2,r2,5360
 102e584:	e0ffff17 	ldw	r3,-4(fp)
 102e588:	18c00324 	muli	r3,r3,12
 102e58c:	10c5883a 	add	r2,r2,r3
 102e590:	10000015 	stw	zero,0(r2)
  }
}
 102e594:	e037883a 	mov	sp,fp
 102e598:	df000017 	ldw	fp,0(sp)
 102e59c:	dec00104 	addi	sp,sp,4
 102e5a0:	f800283a 	ret

0102e5a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 102e5a4:	defff904 	addi	sp,sp,-28
 102e5a8:	df000615 	stw	fp,24(sp)
 102e5ac:	df000604 	addi	fp,sp,24
 102e5b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102e5b4:	0005303a 	rdctl	r2,status
 102e5b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102e5bc:	e0fffc17 	ldw	r3,-16(fp)
 102e5c0:	00bfff84 	movi	r2,-2
 102e5c4:	1884703a 	and	r2,r3,r2
 102e5c8:	1001703a 	wrctl	status,r2
  
  return context;
 102e5cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 102e5d0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 102e5d4:	d0a00c17 	ldw	r2,-32720(gp)
 102e5d8:	10c000c4 	addi	r3,r2,3
 102e5dc:	00bfff04 	movi	r2,-4
 102e5e0:	1884703a 	and	r2,r3,r2
 102e5e4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 102e5e8:	d0e00c17 	ldw	r3,-32720(gp)
 102e5ec:	e0bfff17 	ldw	r2,-4(fp)
 102e5f0:	1887883a 	add	r3,r3,r2
 102e5f4:	00804134 	movhi	r2,260
 102e5f8:	10b53004 	addi	r2,r2,-11072
 102e5fc:	10c0062e 	bgeu	r2,r3,102e618 <sbrk+0x74>
 102e600:	e0bffa17 	ldw	r2,-24(fp)
 102e604:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102e608:	e0bffd17 	ldw	r2,-12(fp)
 102e60c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 102e610:	00bfffc4 	movi	r2,-1
 102e614:	00000b06 	br	102e644 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 102e618:	d0a00c17 	ldw	r2,-32720(gp)
 102e61c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 102e620:	d0e00c17 	ldw	r3,-32720(gp)
 102e624:	e0bfff17 	ldw	r2,-4(fp)
 102e628:	1885883a 	add	r2,r3,r2
 102e62c:	d0a00c15 	stw	r2,-32720(gp)
 102e630:	e0bffa17 	ldw	r2,-24(fp)
 102e634:	e0bffe15 	stw	r2,-8(fp)
 102e638:	e0bffe17 	ldw	r2,-8(fp)
 102e63c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 102e640:	e0bffb17 	ldw	r2,-20(fp)
} 
 102e644:	e037883a 	mov	sp,fp
 102e648:	df000017 	ldw	fp,0(sp)
 102e64c:	dec00104 	addi	sp,sp,4
 102e650:	f800283a 	ret

0102e654 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 102e654:	defffd04 	addi	sp,sp,-12
 102e658:	dfc00215 	stw	ra,8(sp)
 102e65c:	df000115 	stw	fp,4(sp)
 102e660:	df000104 	addi	fp,sp,4
 102e664:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 102e668:	e13fff17 	ldw	r4,-4(fp)
 102e66c:	102f51c0 	call	102f51c <alt_busy_sleep>
}
 102e670:	e037883a 	mov	sp,fp
 102e674:	dfc00117 	ldw	ra,4(sp)
 102e678:	df000017 	ldw	fp,0(sp)
 102e67c:	dec00204 	addi	sp,sp,8
 102e680:	f800283a 	ret

0102e684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102e684:	defffe04 	addi	sp,sp,-8
 102e688:	dfc00115 	stw	ra,4(sp)
 102e68c:	df000015 	stw	fp,0(sp)
 102e690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102e694:	008040f4 	movhi	r2,259
 102e698:	1089bf04 	addi	r2,r2,9980
 102e69c:	10800017 	ldw	r2,0(r2)
 102e6a0:	10000526 	beq	r2,zero,102e6b8 <alt_get_errno+0x34>
 102e6a4:	008040f4 	movhi	r2,259
 102e6a8:	1089bf04 	addi	r2,r2,9980
 102e6ac:	10800017 	ldw	r2,0(r2)
 102e6b0:	103ee83a 	callr	r2
 102e6b4:	00000206 	br	102e6c0 <alt_get_errno+0x3c>
 102e6b8:	008040f4 	movhi	r2,259
 102e6bc:	10908504 	addi	r2,r2,16916
}
 102e6c0:	e037883a 	mov	sp,fp
 102e6c4:	dfc00117 	ldw	ra,4(sp)
 102e6c8:	df000017 	ldw	fp,0(sp)
 102e6cc:	dec00204 	addi	sp,sp,8
 102e6d0:	f800283a 	ret

0102e6d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 102e6d4:	defff904 	addi	sp,sp,-28
 102e6d8:	dfc00615 	stw	ra,24(sp)
 102e6dc:	df000515 	stw	fp,20(sp)
 102e6e0:	df000504 	addi	fp,sp,20
 102e6e4:	e13ffd15 	stw	r4,-12(fp)
 102e6e8:	e17ffe15 	stw	r5,-8(fp)
 102e6ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102e6f0:	e0bffd17 	ldw	r2,-12(fp)
 102e6f4:	10000616 	blt	r2,zero,102e710 <write+0x3c>
 102e6f8:	e0bffd17 	ldw	r2,-12(fp)
 102e6fc:	10c00324 	muli	r3,r2,12
 102e700:	008040f4 	movhi	r2,259
 102e704:	10853c04 	addi	r2,r2,5360
 102e708:	1885883a 	add	r2,r3,r2
 102e70c:	00000106 	br	102e714 <write+0x40>
 102e710:	0005883a 	mov	r2,zero
 102e714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 102e718:	e0bffb17 	ldw	r2,-20(fp)
 102e71c:	10002126 	beq	r2,zero,102e7a4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 102e720:	e0bffb17 	ldw	r2,-20(fp)
 102e724:	10800217 	ldw	r2,8(r2)
 102e728:	108000cc 	andi	r2,r2,3
 102e72c:	10001826 	beq	r2,zero,102e790 <write+0xbc>
 102e730:	e0bffb17 	ldw	r2,-20(fp)
 102e734:	10800017 	ldw	r2,0(r2)
 102e738:	10800617 	ldw	r2,24(r2)
 102e73c:	10001426 	beq	r2,zero,102e790 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 102e740:	e0bffb17 	ldw	r2,-20(fp)
 102e744:	10800017 	ldw	r2,0(r2)
 102e748:	10800617 	ldw	r2,24(r2)
 102e74c:	e0ffff17 	ldw	r3,-4(fp)
 102e750:	e13ffb17 	ldw	r4,-20(fp)
 102e754:	e17ffe17 	ldw	r5,-8(fp)
 102e758:	180d883a 	mov	r6,r3
 102e75c:	103ee83a 	callr	r2
 102e760:	e0bffc15 	stw	r2,-16(fp)
 102e764:	e0bffc17 	ldw	r2,-16(fp)
 102e768:	1000070e 	bge	r2,zero,102e788 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 102e76c:	102e6840 	call	102e684 <alt_get_errno>
 102e770:	1007883a 	mov	r3,r2
 102e774:	e0bffc17 	ldw	r2,-16(fp)
 102e778:	0085c83a 	sub	r2,zero,r2
 102e77c:	18800015 	stw	r2,0(r3)
        return -1;
 102e780:	00bfffc4 	movi	r2,-1
 102e784:	00000c06 	br	102e7b8 <write+0xe4>
      }
      return rval;
 102e788:	e0bffc17 	ldw	r2,-16(fp)
 102e78c:	00000a06 	br	102e7b8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 102e790:	102e6840 	call	102e684 <alt_get_errno>
 102e794:	1007883a 	mov	r3,r2
 102e798:	00800344 	movi	r2,13
 102e79c:	18800015 	stw	r2,0(r3)
 102e7a0:	00000406 	br	102e7b4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 102e7a4:	102e6840 	call	102e684 <alt_get_errno>
 102e7a8:	1007883a 	mov	r3,r2
 102e7ac:	00801444 	movi	r2,81
 102e7b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 102e7b4:	00bfffc4 	movi	r2,-1
}
 102e7b8:	e037883a 	mov	sp,fp
 102e7bc:	dfc00117 	ldw	ra,4(sp)
 102e7c0:	df000017 	ldw	fp,0(sp)
 102e7c4:	dec00204 	addi	sp,sp,8
 102e7c8:	f800283a 	ret

0102e7cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 102e7cc:	defffd04 	addi	sp,sp,-12
 102e7d0:	dfc00215 	stw	ra,8(sp)
 102e7d4:	df000115 	stw	fp,4(sp)
 102e7d8:	df000104 	addi	fp,sp,4
 102e7dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 102e7e0:	e13fff17 	ldw	r4,-4(fp)
 102e7e4:	014040f4 	movhi	r5,259
 102e7e8:	2949bc04 	addi	r5,r5,9968
 102e7ec:	102f7080 	call	102f708 <alt_dev_llist_insert>
}
 102e7f0:	e037883a 	mov	sp,fp
 102e7f4:	dfc00117 	ldw	ra,4(sp)
 102e7f8:	df000017 	ldw	fp,0(sp)
 102e7fc:	dec00204 	addi	sp,sp,8
 102e800:	f800283a 	ret

0102e804 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 102e804:	defffd04 	addi	sp,sp,-12
 102e808:	dfc00215 	stw	ra,8(sp)
 102e80c:	df000115 	stw	fp,4(sp)
 102e810:	df000104 	addi	fp,sp,4
 102e814:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 102e818:	10300ac0 	call	10300ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 102e81c:	00800044 	movi	r2,1
 102e820:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 102e824:	e037883a 	mov	sp,fp
 102e828:	dfc00117 	ldw	ra,4(sp)
 102e82c:	df000017 	ldw	fp,0(sp)
 102e830:	dec00204 	addi	sp,sp,8
 102e834:	f800283a 	ret

0102e838 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 102e838:	defffe04 	addi	sp,sp,-8
 102e83c:	dfc00115 	stw	ra,4(sp)
 102e840:	df000015 	stw	fp,0(sp)
 102e844:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 102e848:	0009883a 	mov	r4,zero
 102e84c:	000b883a 	mov	r5,zero
 102e850:	000d883a 	mov	r6,zero
 102e854:	01c0fa04 	movi	r7,1000
 102e858:	102f3540 	call	102f354 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 102e85c:	010040f4 	movhi	r4,259
 102e860:	2105a604 	addi	r4,r4,5784
 102e864:	000b883a 	mov	r5,zero
 102e868:	018000c4 	movi	r6,3
 102e86c:	102e9f80 	call	102e9f8 <altera_avalon_jtag_uart_init>
 102e870:	010040f4 	movhi	r4,259
 102e874:	21059c04 	addi	r4,r4,5744
 102e878:	102e7cc0 	call	102e7cc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 102e87c:	0001883a 	nop
}
 102e880:	e037883a 	mov	sp,fp
 102e884:	dfc00117 	ldw	ra,4(sp)
 102e888:	df000017 	ldw	fp,0(sp)
 102e88c:	dec00204 	addi	sp,sp,8
 102e890:	f800283a 	ret

0102e894 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 102e894:	defffa04 	addi	sp,sp,-24
 102e898:	dfc00515 	stw	ra,20(sp)
 102e89c:	df000415 	stw	fp,16(sp)
 102e8a0:	df000404 	addi	fp,sp,16
 102e8a4:	e13ffd15 	stw	r4,-12(fp)
 102e8a8:	e17ffe15 	stw	r5,-8(fp)
 102e8ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 102e8b0:	e0bffd17 	ldw	r2,-12(fp)
 102e8b4:	10800017 	ldw	r2,0(r2)
 102e8b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 102e8bc:	e0bffc17 	ldw	r2,-16(fp)
 102e8c0:	10c00a04 	addi	r3,r2,40
 102e8c4:	e0bffd17 	ldw	r2,-12(fp)
 102e8c8:	10800217 	ldw	r2,8(r2)
 102e8cc:	1809883a 	mov	r4,r3
 102e8d0:	e17ffe17 	ldw	r5,-8(fp)
 102e8d4:	e1bfff17 	ldw	r6,-4(fp)
 102e8d8:	100f883a 	mov	r7,r2
 102e8dc:	102eebc0 	call	102eebc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 102e8e0:	e037883a 	mov	sp,fp
 102e8e4:	dfc00117 	ldw	ra,4(sp)
 102e8e8:	df000017 	ldw	fp,0(sp)
 102e8ec:	dec00204 	addi	sp,sp,8
 102e8f0:	f800283a 	ret

0102e8f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 102e8f4:	defffa04 	addi	sp,sp,-24
 102e8f8:	dfc00515 	stw	ra,20(sp)
 102e8fc:	df000415 	stw	fp,16(sp)
 102e900:	df000404 	addi	fp,sp,16
 102e904:	e13ffd15 	stw	r4,-12(fp)
 102e908:	e17ffe15 	stw	r5,-8(fp)
 102e90c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 102e910:	e0bffd17 	ldw	r2,-12(fp)
 102e914:	10800017 	ldw	r2,0(r2)
 102e918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 102e91c:	e0bffc17 	ldw	r2,-16(fp)
 102e920:	10c00a04 	addi	r3,r2,40
 102e924:	e0bffd17 	ldw	r2,-12(fp)
 102e928:	10800217 	ldw	r2,8(r2)
 102e92c:	1809883a 	mov	r4,r3
 102e930:	e17ffe17 	ldw	r5,-8(fp)
 102e934:	e1bfff17 	ldw	r6,-4(fp)
 102e938:	100f883a 	mov	r7,r2
 102e93c:	102f0c80 	call	102f0c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 102e940:	e037883a 	mov	sp,fp
 102e944:	dfc00117 	ldw	ra,4(sp)
 102e948:	df000017 	ldw	fp,0(sp)
 102e94c:	dec00204 	addi	sp,sp,8
 102e950:	f800283a 	ret

0102e954 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 102e954:	defffc04 	addi	sp,sp,-16
 102e958:	dfc00315 	stw	ra,12(sp)
 102e95c:	df000215 	stw	fp,8(sp)
 102e960:	df000204 	addi	fp,sp,8
 102e964:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 102e968:	e0bfff17 	ldw	r2,-4(fp)
 102e96c:	10800017 	ldw	r2,0(r2)
 102e970:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 102e974:	e0bffe17 	ldw	r2,-8(fp)
 102e978:	10c00a04 	addi	r3,r2,40
 102e97c:	e0bfff17 	ldw	r2,-4(fp)
 102e980:	10800217 	ldw	r2,8(r2)
 102e984:	1809883a 	mov	r4,r3
 102e988:	100b883a 	mov	r5,r2
 102e98c:	102ed680 	call	102ed68 <altera_avalon_jtag_uart_close>
}
 102e990:	e037883a 	mov	sp,fp
 102e994:	dfc00117 	ldw	ra,4(sp)
 102e998:	df000017 	ldw	fp,0(sp)
 102e99c:	dec00204 	addi	sp,sp,8
 102e9a0:	f800283a 	ret

0102e9a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 102e9a4:	defffa04 	addi	sp,sp,-24
 102e9a8:	dfc00515 	stw	ra,20(sp)
 102e9ac:	df000415 	stw	fp,16(sp)
 102e9b0:	df000404 	addi	fp,sp,16
 102e9b4:	e13ffd15 	stw	r4,-12(fp)
 102e9b8:	e17ffe15 	stw	r5,-8(fp)
 102e9bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 102e9c0:	e0bffd17 	ldw	r2,-12(fp)
 102e9c4:	10800017 	ldw	r2,0(r2)
 102e9c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 102e9cc:	e0bffc17 	ldw	r2,-16(fp)
 102e9d0:	10800a04 	addi	r2,r2,40
 102e9d4:	1009883a 	mov	r4,r2
 102e9d8:	e17ffe17 	ldw	r5,-8(fp)
 102e9dc:	e1bfff17 	ldw	r6,-4(fp)
 102e9e0:	102edd00 	call	102edd0 <altera_avalon_jtag_uart_ioctl>
}
 102e9e4:	e037883a 	mov	sp,fp
 102e9e8:	dfc00117 	ldw	ra,4(sp)
 102e9ec:	df000017 	ldw	fp,0(sp)
 102e9f0:	dec00204 	addi	sp,sp,8
 102e9f4:	f800283a 	ret

0102e9f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 102e9f8:	defffa04 	addi	sp,sp,-24
 102e9fc:	dfc00515 	stw	ra,20(sp)
 102ea00:	df000415 	stw	fp,16(sp)
 102ea04:	df000404 	addi	fp,sp,16
 102ea08:	e13ffd15 	stw	r4,-12(fp)
 102ea0c:	e17ffe15 	stw	r5,-8(fp)
 102ea10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 102ea14:	e0bffd17 	ldw	r2,-12(fp)
 102ea18:	00c00044 	movi	r3,1
 102ea1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 102ea20:	e0bffd17 	ldw	r2,-12(fp)
 102ea24:	10800017 	ldw	r2,0(r2)
 102ea28:	10800104 	addi	r2,r2,4
 102ea2c:	1007883a 	mov	r3,r2
 102ea30:	e0bffd17 	ldw	r2,-12(fp)
 102ea34:	10800817 	ldw	r2,32(r2)
 102ea38:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 102ea3c:	e0fffe17 	ldw	r3,-8(fp)
 102ea40:	e0bfff17 	ldw	r2,-4(fp)
 102ea44:	d8000015 	stw	zero,0(sp)
 102ea48:	1809883a 	mov	r4,r3
 102ea4c:	100b883a 	mov	r5,r2
 102ea50:	018040f4 	movhi	r6,259
 102ea54:	31baaf04 	addi	r6,r6,-5444
 102ea58:	e1fffd17 	ldw	r7,-12(fp)
 102ea5c:	102f8940 	call	102f894 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 102ea60:	e0bffd17 	ldw	r2,-12(fp)
 102ea64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 102ea68:	e0bffd17 	ldw	r2,-12(fp)
 102ea6c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 102ea70:	008040f4 	movhi	r2,259
 102ea74:	10908a04 	addi	r2,r2,16936
 102ea78:	10800017 	ldw	r2,0(r2)
 102ea7c:	1809883a 	mov	r4,r3
 102ea80:	100b883a 	mov	r5,r2
 102ea84:	018040f4 	movhi	r6,259
 102ea88:	31bb3004 	addi	r6,r6,-4928
 102ea8c:	e1fffd17 	ldw	r7,-12(fp)
 102ea90:	102f3dc0 	call	102f3dc <alt_alarm_start>
 102ea94:	1000040e 	bge	r2,zero,102eaa8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 102ea98:	e0fffd17 	ldw	r3,-12(fp)
 102ea9c:	00a00034 	movhi	r2,32768
 102eaa0:	10bfffc4 	addi	r2,r2,-1
 102eaa4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 102eaa8:	e037883a 	mov	sp,fp
 102eaac:	dfc00117 	ldw	ra,4(sp)
 102eab0:	df000017 	ldw	fp,0(sp)
 102eab4:	dec00204 	addi	sp,sp,8
 102eab8:	f800283a 	ret

0102eabc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 102eabc:	defff804 	addi	sp,sp,-32
 102eac0:	df000715 	stw	fp,28(sp)
 102eac4:	df000704 	addi	fp,sp,28
 102eac8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 102eacc:	e0bfff17 	ldw	r2,-4(fp)
 102ead0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 102ead4:	e0bffb17 	ldw	r2,-20(fp)
 102ead8:	10800017 	ldw	r2,0(r2)
 102eadc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 102eae0:	e0bffc17 	ldw	r2,-16(fp)
 102eae4:	10800104 	addi	r2,r2,4
 102eae8:	10800037 	ldwio	r2,0(r2)
 102eaec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 102eaf0:	e0bffd17 	ldw	r2,-12(fp)
 102eaf4:	1080c00c 	andi	r2,r2,768
 102eaf8:	1000011e 	bne	r2,zero,102eb00 <altera_avalon_jtag_uart_irq+0x44>
      break;
 102eafc:	00006c06 	br	102ecb0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 102eb00:	e0bffd17 	ldw	r2,-12(fp)
 102eb04:	1080400c 	andi	r2,r2,256
 102eb08:	10003426 	beq	r2,zero,102ebdc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 102eb0c:	00800074 	movhi	r2,1
 102eb10:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102eb14:	e0bffb17 	ldw	r2,-20(fp)
 102eb18:	10800a17 	ldw	r2,40(r2)
 102eb1c:	10800044 	addi	r2,r2,1
 102eb20:	1081ffcc 	andi	r2,r2,2047
 102eb24:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 102eb28:	e0bffb17 	ldw	r2,-20(fp)
 102eb2c:	10c00b17 	ldw	r3,44(r2)
 102eb30:	e0bffe17 	ldw	r2,-8(fp)
 102eb34:	1880011e 	bne	r3,r2,102eb3c <altera_avalon_jtag_uart_irq+0x80>
          break;
 102eb38:	00001606 	br	102eb94 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 102eb3c:	e0bffc17 	ldw	r2,-16(fp)
 102eb40:	10800037 	ldwio	r2,0(r2)
 102eb44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 102eb48:	e0bff917 	ldw	r2,-28(fp)
 102eb4c:	10a0000c 	andi	r2,r2,32768
 102eb50:	1000011e 	bne	r2,zero,102eb58 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 102eb54:	00000f06 	br	102eb94 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 102eb58:	e0bffb17 	ldw	r2,-20(fp)
 102eb5c:	10800a17 	ldw	r2,40(r2)
 102eb60:	e0fff917 	ldw	r3,-28(fp)
 102eb64:	1809883a 	mov	r4,r3
 102eb68:	e0fffb17 	ldw	r3,-20(fp)
 102eb6c:	1885883a 	add	r2,r3,r2
 102eb70:	10800e04 	addi	r2,r2,56
 102eb74:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102eb78:	e0bffb17 	ldw	r2,-20(fp)
 102eb7c:	10800a17 	ldw	r2,40(r2)
 102eb80:	10800044 	addi	r2,r2,1
 102eb84:	10c1ffcc 	andi	r3,r2,2047
 102eb88:	e0bffb17 	ldw	r2,-20(fp)
 102eb8c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 102eb90:	003fe006 	br	102eb14 <__alt_data_end+0xffff1654>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 102eb94:	e0bff917 	ldw	r2,-28(fp)
 102eb98:	10bfffec 	andhi	r2,r2,65535
 102eb9c:	10000f26 	beq	r2,zero,102ebdc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 102eba0:	e0bffb17 	ldw	r2,-20(fp)
 102eba4:	10c00817 	ldw	r3,32(r2)
 102eba8:	00bfff84 	movi	r2,-2
 102ebac:	1886703a 	and	r3,r3,r2
 102ebb0:	e0bffb17 	ldw	r2,-20(fp)
 102ebb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 102ebb8:	e0bffc17 	ldw	r2,-16(fp)
 102ebbc:	10800104 	addi	r2,r2,4
 102ebc0:	1007883a 	mov	r3,r2
 102ebc4:	e0bffb17 	ldw	r2,-20(fp)
 102ebc8:	10800817 	ldw	r2,32(r2)
 102ebcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 102ebd0:	e0bffc17 	ldw	r2,-16(fp)
 102ebd4:	10800104 	addi	r2,r2,4
 102ebd8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 102ebdc:	e0bffd17 	ldw	r2,-12(fp)
 102ebe0:	1080800c 	andi	r2,r2,512
 102ebe4:	10003126 	beq	r2,zero,102ecac <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 102ebe8:	e0bffd17 	ldw	r2,-12(fp)
 102ebec:	1004d43a 	srli	r2,r2,16
 102ebf0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 102ebf4:	00001406 	br	102ec48 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 102ebf8:	e0bffc17 	ldw	r2,-16(fp)
 102ebfc:	e0fffb17 	ldw	r3,-20(fp)
 102ec00:	18c00d17 	ldw	r3,52(r3)
 102ec04:	e13ffb17 	ldw	r4,-20(fp)
 102ec08:	20c7883a 	add	r3,r4,r3
 102ec0c:	18c20e04 	addi	r3,r3,2104
 102ec10:	18c00003 	ldbu	r3,0(r3)
 102ec14:	18c03fcc 	andi	r3,r3,255
 102ec18:	18c0201c 	xori	r3,r3,128
 102ec1c:	18ffe004 	addi	r3,r3,-128
 102ec20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102ec24:	e0bffb17 	ldw	r2,-20(fp)
 102ec28:	10800d17 	ldw	r2,52(r2)
 102ec2c:	10800044 	addi	r2,r2,1
 102ec30:	10c1ffcc 	andi	r3,r2,2047
 102ec34:	e0bffb17 	ldw	r2,-20(fp)
 102ec38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 102ec3c:	e0bffa17 	ldw	r2,-24(fp)
 102ec40:	10bfffc4 	addi	r2,r2,-1
 102ec44:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 102ec48:	e0bffa17 	ldw	r2,-24(fp)
 102ec4c:	10000526 	beq	r2,zero,102ec64 <altera_avalon_jtag_uart_irq+0x1a8>
 102ec50:	e0bffb17 	ldw	r2,-20(fp)
 102ec54:	10c00d17 	ldw	r3,52(r2)
 102ec58:	e0bffb17 	ldw	r2,-20(fp)
 102ec5c:	10800c17 	ldw	r2,48(r2)
 102ec60:	18bfe51e 	bne	r3,r2,102ebf8 <__alt_data_end+0xffff1738>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 102ec64:	e0bffa17 	ldw	r2,-24(fp)
 102ec68:	10001026 	beq	r2,zero,102ecac <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 102ec6c:	e0bffb17 	ldw	r2,-20(fp)
 102ec70:	10c00817 	ldw	r3,32(r2)
 102ec74:	00bfff44 	movi	r2,-3
 102ec78:	1886703a 	and	r3,r3,r2
 102ec7c:	e0bffb17 	ldw	r2,-20(fp)
 102ec80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 102ec84:	e0bffb17 	ldw	r2,-20(fp)
 102ec88:	10800017 	ldw	r2,0(r2)
 102ec8c:	10800104 	addi	r2,r2,4
 102ec90:	1007883a 	mov	r3,r2
 102ec94:	e0bffb17 	ldw	r2,-20(fp)
 102ec98:	10800817 	ldw	r2,32(r2)
 102ec9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 102eca0:	e0bffc17 	ldw	r2,-16(fp)
 102eca4:	10800104 	addi	r2,r2,4
 102eca8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 102ecac:	003f8c06 	br	102eae0 <__alt_data_end+0xffff1620>
}
 102ecb0:	e037883a 	mov	sp,fp
 102ecb4:	df000017 	ldw	fp,0(sp)
 102ecb8:	dec00104 	addi	sp,sp,4
 102ecbc:	f800283a 	ret

0102ecc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 102ecc0:	defff804 	addi	sp,sp,-32
 102ecc4:	df000715 	stw	fp,28(sp)
 102ecc8:	df000704 	addi	fp,sp,28
 102eccc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 102ecd0:	e0bffb17 	ldw	r2,-20(fp)
 102ecd4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 102ecd8:	e0bff917 	ldw	r2,-28(fp)
 102ecdc:	10800017 	ldw	r2,0(r2)
 102ece0:	10800104 	addi	r2,r2,4
 102ece4:	10800037 	ldwio	r2,0(r2)
 102ece8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 102ecec:	e0bffa17 	ldw	r2,-24(fp)
 102ecf0:	1081000c 	andi	r2,r2,1024
 102ecf4:	10000b26 	beq	r2,zero,102ed24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 102ecf8:	e0bff917 	ldw	r2,-28(fp)
 102ecfc:	10800017 	ldw	r2,0(r2)
 102ed00:	10800104 	addi	r2,r2,4
 102ed04:	1007883a 	mov	r3,r2
 102ed08:	e0bff917 	ldw	r2,-28(fp)
 102ed0c:	10800817 	ldw	r2,32(r2)
 102ed10:	10810014 	ori	r2,r2,1024
 102ed14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 102ed18:	e0bff917 	ldw	r2,-28(fp)
 102ed1c:	10000915 	stw	zero,36(r2)
 102ed20:	00000a06 	br	102ed4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 102ed24:	e0bff917 	ldw	r2,-28(fp)
 102ed28:	10c00917 	ldw	r3,36(r2)
 102ed2c:	00a00034 	movhi	r2,32768
 102ed30:	10bfff04 	addi	r2,r2,-4
 102ed34:	10c00536 	bltu	r2,r3,102ed4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 102ed38:	e0bff917 	ldw	r2,-28(fp)
 102ed3c:	10800917 	ldw	r2,36(r2)
 102ed40:	10c00044 	addi	r3,r2,1
 102ed44:	e0bff917 	ldw	r2,-28(fp)
 102ed48:	10c00915 	stw	r3,36(r2)
 102ed4c:	008040f4 	movhi	r2,259
 102ed50:	10908a04 	addi	r2,r2,16936
 102ed54:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 102ed58:	e037883a 	mov	sp,fp
 102ed5c:	df000017 	ldw	fp,0(sp)
 102ed60:	dec00104 	addi	sp,sp,4
 102ed64:	f800283a 	ret

0102ed68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 102ed68:	defffd04 	addi	sp,sp,-12
 102ed6c:	df000215 	stw	fp,8(sp)
 102ed70:	df000204 	addi	fp,sp,8
 102ed74:	e13ffe15 	stw	r4,-8(fp)
 102ed78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 102ed7c:	00000506 	br	102ed94 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 102ed80:	e0bfff17 	ldw	r2,-4(fp)
 102ed84:	1090000c 	andi	r2,r2,16384
 102ed88:	10000226 	beq	r2,zero,102ed94 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 102ed8c:	00bffd44 	movi	r2,-11
 102ed90:	00000b06 	br	102edc0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 102ed94:	e0bffe17 	ldw	r2,-8(fp)
 102ed98:	10c00d17 	ldw	r3,52(r2)
 102ed9c:	e0bffe17 	ldw	r2,-8(fp)
 102eda0:	10800c17 	ldw	r2,48(r2)
 102eda4:	18800526 	beq	r3,r2,102edbc <altera_avalon_jtag_uart_close+0x54>
 102eda8:	e0bffe17 	ldw	r2,-8(fp)
 102edac:	10c00917 	ldw	r3,36(r2)
 102edb0:	e0bffe17 	ldw	r2,-8(fp)
 102edb4:	10800117 	ldw	r2,4(r2)
 102edb8:	18bff136 	bltu	r3,r2,102ed80 <__alt_data_end+0xffff18c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 102edbc:	0005883a 	mov	r2,zero
}
 102edc0:	e037883a 	mov	sp,fp
 102edc4:	df000017 	ldw	fp,0(sp)
 102edc8:	dec00104 	addi	sp,sp,4
 102edcc:	f800283a 	ret

0102edd0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 102edd0:	defffa04 	addi	sp,sp,-24
 102edd4:	df000515 	stw	fp,20(sp)
 102edd8:	df000504 	addi	fp,sp,20
 102eddc:	e13ffd15 	stw	r4,-12(fp)
 102ede0:	e17ffe15 	stw	r5,-8(fp)
 102ede4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 102ede8:	00bff9c4 	movi	r2,-25
 102edec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 102edf0:	e0bffe17 	ldw	r2,-8(fp)
 102edf4:	10da8060 	cmpeqi	r3,r2,27137
 102edf8:	1800031e 	bne	r3,zero,102ee08 <altera_avalon_jtag_uart_ioctl+0x38>
 102edfc:	109a80a0 	cmpeqi	r2,r2,27138
 102ee00:	1000191e 	bne	r2,zero,102ee68 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 102ee04:	00002806 	br	102eea8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 102ee08:	e0bffd17 	ldw	r2,-12(fp)
 102ee0c:	10c00117 	ldw	r3,4(r2)
 102ee10:	00a00034 	movhi	r2,32768
 102ee14:	10bfffc4 	addi	r2,r2,-1
 102ee18:	18801226 	beq	r3,r2,102ee64 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 102ee1c:	e0bfff17 	ldw	r2,-4(fp)
 102ee20:	10800017 	ldw	r2,0(r2)
 102ee24:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 102ee28:	e0bffc17 	ldw	r2,-16(fp)
 102ee2c:	10800090 	cmplti	r2,r2,2
 102ee30:	1000061e 	bne	r2,zero,102ee4c <altera_avalon_jtag_uart_ioctl+0x7c>
 102ee34:	e0fffc17 	ldw	r3,-16(fp)
 102ee38:	00a00034 	movhi	r2,32768
 102ee3c:	10bfffc4 	addi	r2,r2,-1
 102ee40:	18800226 	beq	r3,r2,102ee4c <altera_avalon_jtag_uart_ioctl+0x7c>
 102ee44:	e0bffc17 	ldw	r2,-16(fp)
 102ee48:	00000206 	br	102ee54 <altera_avalon_jtag_uart_ioctl+0x84>
 102ee4c:	00a00034 	movhi	r2,32768
 102ee50:	10bfff84 	addi	r2,r2,-2
 102ee54:	e0fffd17 	ldw	r3,-12(fp)
 102ee58:	18800115 	stw	r2,4(r3)
      rc = 0;
 102ee5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 102ee60:	00001106 	br	102eea8 <altera_avalon_jtag_uart_ioctl+0xd8>
 102ee64:	00001006 	br	102eea8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 102ee68:	e0bffd17 	ldw	r2,-12(fp)
 102ee6c:	10c00117 	ldw	r3,4(r2)
 102ee70:	00a00034 	movhi	r2,32768
 102ee74:	10bfffc4 	addi	r2,r2,-1
 102ee78:	18800a26 	beq	r3,r2,102eea4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 102ee7c:	e0bffd17 	ldw	r2,-12(fp)
 102ee80:	10c00917 	ldw	r3,36(r2)
 102ee84:	e0bffd17 	ldw	r2,-12(fp)
 102ee88:	10800117 	ldw	r2,4(r2)
 102ee8c:	1885803a 	cmpltu	r2,r3,r2
 102ee90:	10c03fcc 	andi	r3,r2,255
 102ee94:	e0bfff17 	ldw	r2,-4(fp)
 102ee98:	10c00015 	stw	r3,0(r2)
      rc = 0;
 102ee9c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 102eea0:	00000006 	br	102eea4 <altera_avalon_jtag_uart_ioctl+0xd4>
 102eea4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 102eea8:	e0bffb17 	ldw	r2,-20(fp)
}
 102eeac:	e037883a 	mov	sp,fp
 102eeb0:	df000017 	ldw	fp,0(sp)
 102eeb4:	dec00104 	addi	sp,sp,4
 102eeb8:	f800283a 	ret

0102eebc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 102eebc:	defff304 	addi	sp,sp,-52
 102eec0:	dfc00c15 	stw	ra,48(sp)
 102eec4:	df000b15 	stw	fp,44(sp)
 102eec8:	df000b04 	addi	fp,sp,44
 102eecc:	e13ffc15 	stw	r4,-16(fp)
 102eed0:	e17ffd15 	stw	r5,-12(fp)
 102eed4:	e1bffe15 	stw	r6,-8(fp)
 102eed8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 102eedc:	e0bffd17 	ldw	r2,-12(fp)
 102eee0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 102eee4:	00004906 	br	102f00c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 102eee8:	e0bffc17 	ldw	r2,-16(fp)
 102eeec:	10800a17 	ldw	r2,40(r2)
 102eef0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 102eef4:	e0bffc17 	ldw	r2,-16(fp)
 102eef8:	10800b17 	ldw	r2,44(r2)
 102eefc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 102ef00:	e0fff717 	ldw	r3,-36(fp)
 102ef04:	e0bff817 	ldw	r2,-32(fp)
 102ef08:	18800536 	bltu	r3,r2,102ef20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 102ef0c:	e0fff717 	ldw	r3,-36(fp)
 102ef10:	e0bff817 	ldw	r2,-32(fp)
 102ef14:	1885c83a 	sub	r2,r3,r2
 102ef18:	e0bff615 	stw	r2,-40(fp)
 102ef1c:	00000406 	br	102ef30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 102ef20:	00c20004 	movi	r3,2048
 102ef24:	e0bff817 	ldw	r2,-32(fp)
 102ef28:	1885c83a 	sub	r2,r3,r2
 102ef2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 102ef30:	e0bff617 	ldw	r2,-40(fp)
 102ef34:	1000011e 	bne	r2,zero,102ef3c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 102ef38:	00001d06 	br	102efb0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 102ef3c:	e0fffe17 	ldw	r3,-8(fp)
 102ef40:	e0bff617 	ldw	r2,-40(fp)
 102ef44:	1880022e 	bgeu	r3,r2,102ef50 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 102ef48:	e0bffe17 	ldw	r2,-8(fp)
 102ef4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 102ef50:	e0bff817 	ldw	r2,-32(fp)
 102ef54:	10800e04 	addi	r2,r2,56
 102ef58:	e0fffc17 	ldw	r3,-16(fp)
 102ef5c:	1885883a 	add	r2,r3,r2
 102ef60:	e13ff517 	ldw	r4,-44(fp)
 102ef64:	100b883a 	mov	r5,r2
 102ef68:	e1bff617 	ldw	r6,-40(fp)
 102ef6c:	10283a40 	call	10283a4 <memcpy>
      ptr   += n;
 102ef70:	e0fff517 	ldw	r3,-44(fp)
 102ef74:	e0bff617 	ldw	r2,-40(fp)
 102ef78:	1885883a 	add	r2,r3,r2
 102ef7c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 102ef80:	e0fffe17 	ldw	r3,-8(fp)
 102ef84:	e0bff617 	ldw	r2,-40(fp)
 102ef88:	1885c83a 	sub	r2,r3,r2
 102ef8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102ef90:	e0fff817 	ldw	r3,-32(fp)
 102ef94:	e0bff617 	ldw	r2,-40(fp)
 102ef98:	1885883a 	add	r2,r3,r2
 102ef9c:	10c1ffcc 	andi	r3,r2,2047
 102efa0:	e0bffc17 	ldw	r2,-16(fp)
 102efa4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 102efa8:	e0bffe17 	ldw	r2,-8(fp)
 102efac:	00bfce16 	blt	zero,r2,102eee8 <__alt_data_end+0xffff1a28>

    /* If we read any data then return it */
    if (ptr != buffer)
 102efb0:	e0fff517 	ldw	r3,-44(fp)
 102efb4:	e0bffd17 	ldw	r2,-12(fp)
 102efb8:	18800126 	beq	r3,r2,102efc0 <altera_avalon_jtag_uart_read+0x104>
      break;
 102efbc:	00001506 	br	102f014 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 102efc0:	e0bfff17 	ldw	r2,-4(fp)
 102efc4:	1090000c 	andi	r2,r2,16384
 102efc8:	10000126 	beq	r2,zero,102efd0 <altera_avalon_jtag_uart_read+0x114>
      break;
 102efcc:	00001106 	br	102f014 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 102efd0:	0001883a 	nop
 102efd4:	e0bffc17 	ldw	r2,-16(fp)
 102efd8:	10c00a17 	ldw	r3,40(r2)
 102efdc:	e0bff717 	ldw	r2,-36(fp)
 102efe0:	1880051e 	bne	r3,r2,102eff8 <altera_avalon_jtag_uart_read+0x13c>
 102efe4:	e0bffc17 	ldw	r2,-16(fp)
 102efe8:	10c00917 	ldw	r3,36(r2)
 102efec:	e0bffc17 	ldw	r2,-16(fp)
 102eff0:	10800117 	ldw	r2,4(r2)
 102eff4:	18bff736 	bltu	r3,r2,102efd4 <__alt_data_end+0xffff1b14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 102eff8:	e0bffc17 	ldw	r2,-16(fp)
 102effc:	10c00a17 	ldw	r3,40(r2)
 102f000:	e0bff717 	ldw	r2,-36(fp)
 102f004:	1880011e 	bne	r3,r2,102f00c <altera_avalon_jtag_uart_read+0x150>
      break;
 102f008:	00000206 	br	102f014 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 102f00c:	e0bffe17 	ldw	r2,-8(fp)
 102f010:	00bfb516 	blt	zero,r2,102eee8 <__alt_data_end+0xffff1a28>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 102f014:	e0fff517 	ldw	r3,-44(fp)
 102f018:	e0bffd17 	ldw	r2,-12(fp)
 102f01c:	18801826 	beq	r3,r2,102f080 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f020:	0005303a 	rdctl	r2,status
 102f024:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f028:	e0fffa17 	ldw	r3,-24(fp)
 102f02c:	00bfff84 	movi	r2,-2
 102f030:	1884703a 	and	r2,r3,r2
 102f034:	1001703a 	wrctl	status,r2
  
  return context;
 102f038:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 102f03c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 102f040:	e0bffc17 	ldw	r2,-16(fp)
 102f044:	10800817 	ldw	r2,32(r2)
 102f048:	10c00054 	ori	r3,r2,1
 102f04c:	e0bffc17 	ldw	r2,-16(fp)
 102f050:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 102f054:	e0bffc17 	ldw	r2,-16(fp)
 102f058:	10800017 	ldw	r2,0(r2)
 102f05c:	10800104 	addi	r2,r2,4
 102f060:	1007883a 	mov	r3,r2
 102f064:	e0bffc17 	ldw	r2,-16(fp)
 102f068:	10800817 	ldw	r2,32(r2)
 102f06c:	18800035 	stwio	r2,0(r3)
 102f070:	e0bff917 	ldw	r2,-28(fp)
 102f074:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102f078:	e0bffb17 	ldw	r2,-20(fp)
 102f07c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 102f080:	e0fff517 	ldw	r3,-44(fp)
 102f084:	e0bffd17 	ldw	r2,-12(fp)
 102f088:	18800426 	beq	r3,r2,102f09c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 102f08c:	e0fff517 	ldw	r3,-44(fp)
 102f090:	e0bffd17 	ldw	r2,-12(fp)
 102f094:	1885c83a 	sub	r2,r3,r2
 102f098:	00000606 	br	102f0b4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 102f09c:	e0bfff17 	ldw	r2,-4(fp)
 102f0a0:	1090000c 	andi	r2,r2,16384
 102f0a4:	10000226 	beq	r2,zero,102f0b0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 102f0a8:	00bffd44 	movi	r2,-11
 102f0ac:	00000106 	br	102f0b4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 102f0b0:	00bffec4 	movi	r2,-5
}
 102f0b4:	e037883a 	mov	sp,fp
 102f0b8:	dfc00117 	ldw	ra,4(sp)
 102f0bc:	df000017 	ldw	fp,0(sp)
 102f0c0:	dec00204 	addi	sp,sp,8
 102f0c4:	f800283a 	ret

0102f0c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 102f0c8:	defff304 	addi	sp,sp,-52
 102f0cc:	dfc00c15 	stw	ra,48(sp)
 102f0d0:	df000b15 	stw	fp,44(sp)
 102f0d4:	df000b04 	addi	fp,sp,44
 102f0d8:	e13ffc15 	stw	r4,-16(fp)
 102f0dc:	e17ffd15 	stw	r5,-12(fp)
 102f0e0:	e1bffe15 	stw	r6,-8(fp)
 102f0e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 102f0e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 102f0ec:	e0bffd17 	ldw	r2,-12(fp)
 102f0f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 102f0f4:	00003806 	br	102f1d8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 102f0f8:	e0bffc17 	ldw	r2,-16(fp)
 102f0fc:	10800c17 	ldw	r2,48(r2)
 102f100:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 102f104:	e0bffc17 	ldw	r2,-16(fp)
 102f108:	10800d17 	ldw	r2,52(r2)
 102f10c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 102f110:	e0fff817 	ldw	r3,-32(fp)
 102f114:	e0bff517 	ldw	r2,-44(fp)
 102f118:	1880062e 	bgeu	r3,r2,102f134 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 102f11c:	e0fff517 	ldw	r3,-44(fp)
 102f120:	e0bff817 	ldw	r2,-32(fp)
 102f124:	1885c83a 	sub	r2,r3,r2
 102f128:	10bfffc4 	addi	r2,r2,-1
 102f12c:	e0bff615 	stw	r2,-40(fp)
 102f130:	00000b06 	br	102f160 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 102f134:	e0bff517 	ldw	r2,-44(fp)
 102f138:	10000526 	beq	r2,zero,102f150 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 102f13c:	00c20004 	movi	r3,2048
 102f140:	e0bff817 	ldw	r2,-32(fp)
 102f144:	1885c83a 	sub	r2,r3,r2
 102f148:	e0bff615 	stw	r2,-40(fp)
 102f14c:	00000406 	br	102f160 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 102f150:	00c1ffc4 	movi	r3,2047
 102f154:	e0bff817 	ldw	r2,-32(fp)
 102f158:	1885c83a 	sub	r2,r3,r2
 102f15c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 102f160:	e0bff617 	ldw	r2,-40(fp)
 102f164:	1000011e 	bne	r2,zero,102f16c <altera_avalon_jtag_uart_write+0xa4>
        break;
 102f168:	00001d06 	br	102f1e0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 102f16c:	e0fffe17 	ldw	r3,-8(fp)
 102f170:	e0bff617 	ldw	r2,-40(fp)
 102f174:	1880022e 	bgeu	r3,r2,102f180 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 102f178:	e0bffe17 	ldw	r2,-8(fp)
 102f17c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 102f180:	e0bff817 	ldw	r2,-32(fp)
 102f184:	10820e04 	addi	r2,r2,2104
 102f188:	e0fffc17 	ldw	r3,-16(fp)
 102f18c:	1885883a 	add	r2,r3,r2
 102f190:	1009883a 	mov	r4,r2
 102f194:	e17ffd17 	ldw	r5,-12(fp)
 102f198:	e1bff617 	ldw	r6,-40(fp)
 102f19c:	10283a40 	call	10283a4 <memcpy>
      ptr   += n;
 102f1a0:	e0fffd17 	ldw	r3,-12(fp)
 102f1a4:	e0bff617 	ldw	r2,-40(fp)
 102f1a8:	1885883a 	add	r2,r3,r2
 102f1ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 102f1b0:	e0fffe17 	ldw	r3,-8(fp)
 102f1b4:	e0bff617 	ldw	r2,-40(fp)
 102f1b8:	1885c83a 	sub	r2,r3,r2
 102f1bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102f1c0:	e0fff817 	ldw	r3,-32(fp)
 102f1c4:	e0bff617 	ldw	r2,-40(fp)
 102f1c8:	1885883a 	add	r2,r3,r2
 102f1cc:	10c1ffcc 	andi	r3,r2,2047
 102f1d0:	e0bffc17 	ldw	r2,-16(fp)
 102f1d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 102f1d8:	e0bffe17 	ldw	r2,-8(fp)
 102f1dc:	00bfc616 	blt	zero,r2,102f0f8 <__alt_data_end+0xffff1c38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f1e0:	0005303a 	rdctl	r2,status
 102f1e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f1e8:	e0fffa17 	ldw	r3,-24(fp)
 102f1ec:	00bfff84 	movi	r2,-2
 102f1f0:	1884703a 	and	r2,r3,r2
 102f1f4:	1001703a 	wrctl	status,r2
  
  return context;
 102f1f8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 102f1fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 102f200:	e0bffc17 	ldw	r2,-16(fp)
 102f204:	10800817 	ldw	r2,32(r2)
 102f208:	10c00094 	ori	r3,r2,2
 102f20c:	e0bffc17 	ldw	r2,-16(fp)
 102f210:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 102f214:	e0bffc17 	ldw	r2,-16(fp)
 102f218:	10800017 	ldw	r2,0(r2)
 102f21c:	10800104 	addi	r2,r2,4
 102f220:	1007883a 	mov	r3,r2
 102f224:	e0bffc17 	ldw	r2,-16(fp)
 102f228:	10800817 	ldw	r2,32(r2)
 102f22c:	18800035 	stwio	r2,0(r3)
 102f230:	e0bff917 	ldw	r2,-28(fp)
 102f234:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102f238:	e0bffb17 	ldw	r2,-20(fp)
 102f23c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 102f240:	e0bffe17 	ldw	r2,-8(fp)
 102f244:	0080120e 	bge	zero,r2,102f290 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 102f248:	e0bfff17 	ldw	r2,-4(fp)
 102f24c:	1090000c 	andi	r2,r2,16384
 102f250:	10000126 	beq	r2,zero,102f258 <altera_avalon_jtag_uart_write+0x190>
        break;
 102f254:	00001006 	br	102f298 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 102f258:	0001883a 	nop
 102f25c:	e0bffc17 	ldw	r2,-16(fp)
 102f260:	10c00d17 	ldw	r3,52(r2)
 102f264:	e0bff517 	ldw	r2,-44(fp)
 102f268:	1880051e 	bne	r3,r2,102f280 <altera_avalon_jtag_uart_write+0x1b8>
 102f26c:	e0bffc17 	ldw	r2,-16(fp)
 102f270:	10c00917 	ldw	r3,36(r2)
 102f274:	e0bffc17 	ldw	r2,-16(fp)
 102f278:	10800117 	ldw	r2,4(r2)
 102f27c:	18bff736 	bltu	r3,r2,102f25c <__alt_data_end+0xffff1d9c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 102f280:	e0bffc17 	ldw	r2,-16(fp)
 102f284:	10800917 	ldw	r2,36(r2)
 102f288:	10000126 	beq	r2,zero,102f290 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 102f28c:	00000206 	br	102f298 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 102f290:	e0bffe17 	ldw	r2,-8(fp)
 102f294:	00bf9716 	blt	zero,r2,102f0f4 <__alt_data_end+0xffff1c34>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 102f298:	e0fffd17 	ldw	r3,-12(fp)
 102f29c:	e0bff717 	ldw	r2,-36(fp)
 102f2a0:	18800426 	beq	r3,r2,102f2b4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 102f2a4:	e0fffd17 	ldw	r3,-12(fp)
 102f2a8:	e0bff717 	ldw	r2,-36(fp)
 102f2ac:	1885c83a 	sub	r2,r3,r2
 102f2b0:	00000606 	br	102f2cc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 102f2b4:	e0bfff17 	ldw	r2,-4(fp)
 102f2b8:	1090000c 	andi	r2,r2,16384
 102f2bc:	10000226 	beq	r2,zero,102f2c8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 102f2c0:	00bffd44 	movi	r2,-11
 102f2c4:	00000106 	br	102f2cc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 102f2c8:	00bffec4 	movi	r2,-5
}
 102f2cc:	e037883a 	mov	sp,fp
 102f2d0:	dfc00117 	ldw	ra,4(sp)
 102f2d4:	df000017 	ldw	fp,0(sp)
 102f2d8:	dec00204 	addi	sp,sp,8
 102f2dc:	f800283a 	ret

0102f2e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 102f2e0:	defffa04 	addi	sp,sp,-24
 102f2e4:	dfc00515 	stw	ra,20(sp)
 102f2e8:	df000415 	stw	fp,16(sp)
 102f2ec:	df000404 	addi	fp,sp,16
 102f2f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 102f2f4:	0007883a 	mov	r3,zero
 102f2f8:	e0bfff17 	ldw	r2,-4(fp)
 102f2fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 102f300:	e0bfff17 	ldw	r2,-4(fp)
 102f304:	10800104 	addi	r2,r2,4
 102f308:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f30c:	0005303a 	rdctl	r2,status
 102f310:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f314:	e0fffd17 	ldw	r3,-12(fp)
 102f318:	00bfff84 	movi	r2,-2
 102f31c:	1884703a 	and	r2,r3,r2
 102f320:	1001703a 	wrctl	status,r2
  
  return context;
 102f324:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 102f328:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 102f32c:	102ffa80 	call	102ffa8 <alt_tick>
 102f330:	e0bffc17 	ldw	r2,-16(fp)
 102f334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102f338:	e0bffe17 	ldw	r2,-8(fp)
 102f33c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 102f340:	e037883a 	mov	sp,fp
 102f344:	dfc00117 	ldw	ra,4(sp)
 102f348:	df000017 	ldw	fp,0(sp)
 102f34c:	dec00204 	addi	sp,sp,8
 102f350:	f800283a 	ret

0102f354 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 102f354:	defff804 	addi	sp,sp,-32
 102f358:	dfc00715 	stw	ra,28(sp)
 102f35c:	df000615 	stw	fp,24(sp)
 102f360:	df000604 	addi	fp,sp,24
 102f364:	e13ffc15 	stw	r4,-16(fp)
 102f368:	e17ffd15 	stw	r5,-12(fp)
 102f36c:	e1bffe15 	stw	r6,-8(fp)
 102f370:	e1ffff15 	stw	r7,-4(fp)
 102f374:	e0bfff17 	ldw	r2,-4(fp)
 102f378:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 102f37c:	008040f4 	movhi	r2,259
 102f380:	10908a04 	addi	r2,r2,16936
 102f384:	10800017 	ldw	r2,0(r2)
 102f388:	1000041e 	bne	r2,zero,102f39c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 102f38c:	008040f4 	movhi	r2,259
 102f390:	10908a04 	addi	r2,r2,16936
 102f394:	e0fffb17 	ldw	r3,-20(fp)
 102f398:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 102f39c:	e0bffc17 	ldw	r2,-16(fp)
 102f3a0:	10800104 	addi	r2,r2,4
 102f3a4:	00c001c4 	movi	r3,7
 102f3a8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 102f3ac:	d8000015 	stw	zero,0(sp)
 102f3b0:	e13ffd17 	ldw	r4,-12(fp)
 102f3b4:	e17ffe17 	ldw	r5,-8(fp)
 102f3b8:	018040f4 	movhi	r6,259
 102f3bc:	31bcb804 	addi	r6,r6,-3360
 102f3c0:	e1fffc17 	ldw	r7,-16(fp)
 102f3c4:	102f8940 	call	102f894 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 102f3c8:	e037883a 	mov	sp,fp
 102f3cc:	dfc00117 	ldw	ra,4(sp)
 102f3d0:	df000017 	ldw	fp,0(sp)
 102f3d4:	dec00204 	addi	sp,sp,8
 102f3d8:	f800283a 	ret

0102f3dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 102f3dc:	defff504 	addi	sp,sp,-44
 102f3e0:	df000a15 	stw	fp,40(sp)
 102f3e4:	df000a04 	addi	fp,sp,40
 102f3e8:	e13ffc15 	stw	r4,-16(fp)
 102f3ec:	e17ffd15 	stw	r5,-12(fp)
 102f3f0:	e1bffe15 	stw	r6,-8(fp)
 102f3f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 102f3f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 102f3fc:	008040f4 	movhi	r2,259
 102f400:	10908a04 	addi	r2,r2,16936
 102f404:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 102f408:	10003f26 	beq	r2,zero,102f508 <alt_alarm_start+0x12c>
  {
    if (alarm)
 102f40c:	e0bffc17 	ldw	r2,-16(fp)
 102f410:	10003b26 	beq	r2,zero,102f500 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 102f414:	e0bffc17 	ldw	r2,-16(fp)
 102f418:	e0fffe17 	ldw	r3,-8(fp)
 102f41c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 102f420:	e0bffc17 	ldw	r2,-16(fp)
 102f424:	e0ffff17 	ldw	r3,-4(fp)
 102f428:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f42c:	0005303a 	rdctl	r2,status
 102f430:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f434:	e0fff817 	ldw	r3,-32(fp)
 102f438:	00bfff84 	movi	r2,-2
 102f43c:	1884703a 	and	r2,r3,r2
 102f440:	1001703a 	wrctl	status,r2
  
  return context;
 102f444:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 102f448:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 102f44c:	008040f4 	movhi	r2,259
 102f450:	10908b04 	addi	r2,r2,16940
 102f454:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 102f458:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 102f45c:	e0fffd17 	ldw	r3,-12(fp)
 102f460:	e0bff617 	ldw	r2,-40(fp)
 102f464:	1885883a 	add	r2,r3,r2
 102f468:	10c00044 	addi	r3,r2,1
 102f46c:	e0bffc17 	ldw	r2,-16(fp)
 102f470:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 102f474:	e0bffc17 	ldw	r2,-16(fp)
 102f478:	10c00217 	ldw	r3,8(r2)
 102f47c:	e0bff617 	ldw	r2,-40(fp)
 102f480:	1880042e 	bgeu	r3,r2,102f494 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 102f484:	e0bffc17 	ldw	r2,-16(fp)
 102f488:	00c00044 	movi	r3,1
 102f48c:	10c00405 	stb	r3,16(r2)
 102f490:	00000206 	br	102f49c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 102f494:	e0bffc17 	ldw	r2,-16(fp)
 102f498:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 102f49c:	e0fffc17 	ldw	r3,-16(fp)
 102f4a0:	008040f4 	movhi	r2,259
 102f4a4:	1089c204 	addi	r2,r2,9992
 102f4a8:	e0bff915 	stw	r2,-28(fp)
 102f4ac:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 102f4b0:	e0bffa17 	ldw	r2,-24(fp)
 102f4b4:	e0fff917 	ldw	r3,-28(fp)
 102f4b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 102f4bc:	e0bff917 	ldw	r2,-28(fp)
 102f4c0:	10c00017 	ldw	r3,0(r2)
 102f4c4:	e0bffa17 	ldw	r2,-24(fp)
 102f4c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 102f4cc:	e0bff917 	ldw	r2,-28(fp)
 102f4d0:	10800017 	ldw	r2,0(r2)
 102f4d4:	e0fffa17 	ldw	r3,-24(fp)
 102f4d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 102f4dc:	e0bff917 	ldw	r2,-28(fp)
 102f4e0:	e0fffa17 	ldw	r3,-24(fp)
 102f4e4:	10c00015 	stw	r3,0(r2)
 102f4e8:	e0bff717 	ldw	r2,-36(fp)
 102f4ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102f4f0:	e0bffb17 	ldw	r2,-20(fp)
 102f4f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 102f4f8:	0005883a 	mov	r2,zero
 102f4fc:	00000306 	br	102f50c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 102f500:	00bffa84 	movi	r2,-22
 102f504:	00000106 	br	102f50c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 102f508:	00bfde84 	movi	r2,-134
  }
}
 102f50c:	e037883a 	mov	sp,fp
 102f510:	df000017 	ldw	fp,0(sp)
 102f514:	dec00104 	addi	sp,sp,4
 102f518:	f800283a 	ret

0102f51c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 102f51c:	defffa04 	addi	sp,sp,-24
 102f520:	dfc00515 	stw	ra,20(sp)
 102f524:	df000415 	stw	fp,16(sp)
 102f528:	df000404 	addi	fp,sp,16
 102f52c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 102f530:	008000c4 	movi	r2,3
 102f534:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 102f538:	e0fffd17 	ldw	r3,-12(fp)
 102f53c:	008003f4 	movhi	r2,15
 102f540:	10909004 	addi	r2,r2,16960
 102f544:	1885383a 	mul	r2,r3,r2
 102f548:	01017db4 	movhi	r4,1526
 102f54c:	21384004 	addi	r4,r4,-7936
 102f550:	100b883a 	mov	r5,r2
 102f554:	1022c080 	call	1022c08 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 102f558:	01200034 	movhi	r4,32768
 102f55c:	213fffc4 	addi	r4,r4,-1
 102f560:	100b883a 	mov	r5,r2
 102f564:	1022c080 	call	1022c08 <__udivsi3>
 102f568:	e13fff17 	ldw	r4,-4(fp)
 102f56c:	100b883a 	mov	r5,r2
 102f570:	1022c080 	call	1022c08 <__udivsi3>
 102f574:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 102f578:	e0bffe17 	ldw	r2,-8(fp)
 102f57c:	10002a26 	beq	r2,zero,102f628 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 102f580:	e03ffc15 	stw	zero,-16(fp)
 102f584:	00001706 	br	102f5e4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 102f588:	00a00034 	movhi	r2,32768
 102f58c:	10bfffc4 	addi	r2,r2,-1
 102f590:	10bfffc4 	addi	r2,r2,-1
 102f594:	103ffe1e 	bne	r2,zero,102f590 <__alt_data_end+0xffff20d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 102f598:	e0fffd17 	ldw	r3,-12(fp)
 102f59c:	008003f4 	movhi	r2,15
 102f5a0:	10909004 	addi	r2,r2,16960
 102f5a4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 102f5a8:	01017db4 	movhi	r4,1526
 102f5ac:	21384004 	addi	r4,r4,-7936
 102f5b0:	100b883a 	mov	r5,r2
 102f5b4:	1022c080 	call	1022c08 <__udivsi3>
 102f5b8:	01200034 	movhi	r4,32768
 102f5bc:	213fffc4 	addi	r4,r4,-1
 102f5c0:	100b883a 	mov	r5,r2
 102f5c4:	1022c080 	call	1022c08 <__udivsi3>
 102f5c8:	1007883a 	mov	r3,r2
 102f5cc:	e0bfff17 	ldw	r2,-4(fp)
 102f5d0:	10c5c83a 	sub	r2,r2,r3
 102f5d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 102f5d8:	e0bffc17 	ldw	r2,-16(fp)
 102f5dc:	10800044 	addi	r2,r2,1
 102f5e0:	e0bffc15 	stw	r2,-16(fp)
 102f5e4:	e0fffc17 	ldw	r3,-16(fp)
 102f5e8:	e0bffe17 	ldw	r2,-8(fp)
 102f5ec:	18bfe616 	blt	r3,r2,102f588 <__alt_data_end+0xffff20c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 102f5f0:	e0fffd17 	ldw	r3,-12(fp)
 102f5f4:	008003f4 	movhi	r2,15
 102f5f8:	10909004 	addi	r2,r2,16960
 102f5fc:	1885383a 	mul	r2,r3,r2
 102f600:	01017db4 	movhi	r4,1526
 102f604:	21384004 	addi	r4,r4,-7936
 102f608:	100b883a 	mov	r5,r2
 102f60c:	1022c080 	call	1022c08 <__udivsi3>
 102f610:	1007883a 	mov	r3,r2
 102f614:	e0bfff17 	ldw	r2,-4(fp)
 102f618:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 102f61c:	10bfffc4 	addi	r2,r2,-1
 102f620:	103ffe1e 	bne	r2,zero,102f61c <__alt_data_end+0xffff215c>
 102f624:	00000d06 	br	102f65c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 102f628:	e0fffd17 	ldw	r3,-12(fp)
 102f62c:	008003f4 	movhi	r2,15
 102f630:	10909004 	addi	r2,r2,16960
 102f634:	1885383a 	mul	r2,r3,r2
 102f638:	01017db4 	movhi	r4,1526
 102f63c:	21384004 	addi	r4,r4,-7936
 102f640:	100b883a 	mov	r5,r2
 102f644:	1022c080 	call	1022c08 <__udivsi3>
 102f648:	1007883a 	mov	r3,r2
 102f64c:	e0bfff17 	ldw	r2,-4(fp)
 102f650:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 102f654:	10bfffc4 	addi	r2,r2,-1
 102f658:	00bffe16 	blt	zero,r2,102f654 <__alt_data_end+0xffff2194>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 102f65c:	0005883a 	mov	r2,zero
}
 102f660:	e037883a 	mov	sp,fp
 102f664:	dfc00117 	ldw	ra,4(sp)
 102f668:	df000017 	ldw	fp,0(sp)
 102f66c:	dec00204 	addi	sp,sp,8
 102f670:	f800283a 	ret

0102f674 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 102f674:	defffe04 	addi	sp,sp,-8
 102f678:	df000115 	stw	fp,4(sp)
 102f67c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 102f680:	e03fff15 	stw	zero,-4(fp)
 102f684:	00000506 	br	102f69c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 102f688:	e0bfff17 	ldw	r2,-4(fp)
 102f68c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 102f690:	e0bfff17 	ldw	r2,-4(fp)
 102f694:	10800804 	addi	r2,r2,32
 102f698:	e0bfff15 	stw	r2,-4(fp)
 102f69c:	e0bfff17 	ldw	r2,-4(fp)
 102f6a0:	10820030 	cmpltui	r2,r2,2048
 102f6a4:	103ff81e 	bne	r2,zero,102f688 <__alt_data_end+0xffff21c8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 102f6a8:	e037883a 	mov	sp,fp
 102f6ac:	df000017 	ldw	fp,0(sp)
 102f6b0:	dec00104 	addi	sp,sp,4
 102f6b4:	f800283a 	ret

0102f6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102f6b8:	defffe04 	addi	sp,sp,-8
 102f6bc:	dfc00115 	stw	ra,4(sp)
 102f6c0:	df000015 	stw	fp,0(sp)
 102f6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102f6c8:	008040f4 	movhi	r2,259
 102f6cc:	1089bf04 	addi	r2,r2,9980
 102f6d0:	10800017 	ldw	r2,0(r2)
 102f6d4:	10000526 	beq	r2,zero,102f6ec <alt_get_errno+0x34>
 102f6d8:	008040f4 	movhi	r2,259
 102f6dc:	1089bf04 	addi	r2,r2,9980
 102f6e0:	10800017 	ldw	r2,0(r2)
 102f6e4:	103ee83a 	callr	r2
 102f6e8:	00000206 	br	102f6f4 <alt_get_errno+0x3c>
 102f6ec:	008040f4 	movhi	r2,259
 102f6f0:	10908504 	addi	r2,r2,16916
}
 102f6f4:	e037883a 	mov	sp,fp
 102f6f8:	dfc00117 	ldw	ra,4(sp)
 102f6fc:	df000017 	ldw	fp,0(sp)
 102f700:	dec00204 	addi	sp,sp,8
 102f704:	f800283a 	ret

0102f708 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 102f708:	defffa04 	addi	sp,sp,-24
 102f70c:	dfc00515 	stw	ra,20(sp)
 102f710:	df000415 	stw	fp,16(sp)
 102f714:	df000404 	addi	fp,sp,16
 102f718:	e13ffe15 	stw	r4,-8(fp)
 102f71c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 102f720:	e0bffe17 	ldw	r2,-8(fp)
 102f724:	10000326 	beq	r2,zero,102f734 <alt_dev_llist_insert+0x2c>
 102f728:	e0bffe17 	ldw	r2,-8(fp)
 102f72c:	10800217 	ldw	r2,8(r2)
 102f730:	1000061e 	bne	r2,zero,102f74c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 102f734:	102f6b80 	call	102f6b8 <alt_get_errno>
 102f738:	1007883a 	mov	r3,r2
 102f73c:	00800584 	movi	r2,22
 102f740:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 102f744:	00bffa84 	movi	r2,-22
 102f748:	00001306 	br	102f798 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 102f74c:	e0bffe17 	ldw	r2,-8(fp)
 102f750:	e0ffff17 	ldw	r3,-4(fp)
 102f754:	e0fffc15 	stw	r3,-16(fp)
 102f758:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 102f75c:	e0bffd17 	ldw	r2,-12(fp)
 102f760:	e0fffc17 	ldw	r3,-16(fp)
 102f764:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 102f768:	e0bffc17 	ldw	r2,-16(fp)
 102f76c:	10c00017 	ldw	r3,0(r2)
 102f770:	e0bffd17 	ldw	r2,-12(fp)
 102f774:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 102f778:	e0bffc17 	ldw	r2,-16(fp)
 102f77c:	10800017 	ldw	r2,0(r2)
 102f780:	e0fffd17 	ldw	r3,-12(fp)
 102f784:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 102f788:	e0bffc17 	ldw	r2,-16(fp)
 102f78c:	e0fffd17 	ldw	r3,-12(fp)
 102f790:	10c00015 	stw	r3,0(r2)

  return 0;  
 102f794:	0005883a 	mov	r2,zero
}
 102f798:	e037883a 	mov	sp,fp
 102f79c:	dfc00117 	ldw	ra,4(sp)
 102f7a0:	df000017 	ldw	fp,0(sp)
 102f7a4:	dec00204 	addi	sp,sp,8
 102f7a8:	f800283a 	ret

0102f7ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 102f7ac:	defffd04 	addi	sp,sp,-12
 102f7b0:	dfc00215 	stw	ra,8(sp)
 102f7b4:	df000115 	stw	fp,4(sp)
 102f7b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 102f7bc:	008040f4 	movhi	r2,259
 102f7c0:	1081fb04 	addi	r2,r2,2028
 102f7c4:	e0bfff15 	stw	r2,-4(fp)
 102f7c8:	00000606 	br	102f7e4 <_do_ctors+0x38>
        (*ctor) (); 
 102f7cc:	e0bfff17 	ldw	r2,-4(fp)
 102f7d0:	10800017 	ldw	r2,0(r2)
 102f7d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 102f7d8:	e0bfff17 	ldw	r2,-4(fp)
 102f7dc:	10bfff04 	addi	r2,r2,-4
 102f7e0:	e0bfff15 	stw	r2,-4(fp)
 102f7e4:	e0ffff17 	ldw	r3,-4(fp)
 102f7e8:	008040f4 	movhi	r2,259
 102f7ec:	1081fc04 	addi	r2,r2,2032
 102f7f0:	18bff62e 	bgeu	r3,r2,102f7cc <__alt_data_end+0xffff230c>
        (*ctor) (); 
}
 102f7f4:	e037883a 	mov	sp,fp
 102f7f8:	dfc00117 	ldw	ra,4(sp)
 102f7fc:	df000017 	ldw	fp,0(sp)
 102f800:	dec00204 	addi	sp,sp,8
 102f804:	f800283a 	ret

0102f808 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 102f808:	defffd04 	addi	sp,sp,-12
 102f80c:	dfc00215 	stw	ra,8(sp)
 102f810:	df000115 	stw	fp,4(sp)
 102f814:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102f818:	008040f4 	movhi	r2,259
 102f81c:	1081fb04 	addi	r2,r2,2028
 102f820:	e0bfff15 	stw	r2,-4(fp)
 102f824:	00000606 	br	102f840 <_do_dtors+0x38>
        (*dtor) (); 
 102f828:	e0bfff17 	ldw	r2,-4(fp)
 102f82c:	10800017 	ldw	r2,0(r2)
 102f830:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102f834:	e0bfff17 	ldw	r2,-4(fp)
 102f838:	10bfff04 	addi	r2,r2,-4
 102f83c:	e0bfff15 	stw	r2,-4(fp)
 102f840:	e0ffff17 	ldw	r3,-4(fp)
 102f844:	008040f4 	movhi	r2,259
 102f848:	1081fc04 	addi	r2,r2,2032
 102f84c:	18bff62e 	bgeu	r3,r2,102f828 <__alt_data_end+0xffff2368>
        (*dtor) (); 
}
 102f850:	e037883a 	mov	sp,fp
 102f854:	dfc00117 	ldw	ra,4(sp)
 102f858:	df000017 	ldw	fp,0(sp)
 102f85c:	dec00204 	addi	sp,sp,8
 102f860:	f800283a 	ret

0102f864 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 102f864:	defffe04 	addi	sp,sp,-8
 102f868:	dfc00115 	stw	ra,4(sp)
 102f86c:	df000015 	stw	fp,0(sp)
 102f870:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 102f874:	0009883a 	mov	r4,zero
 102f878:	01440004 	movi	r5,4096
 102f87c:	10303240 	call	1030324 <alt_icache_flush>
#endif
}
 102f880:	e037883a 	mov	sp,fp
 102f884:	dfc00117 	ldw	ra,4(sp)
 102f888:	df000017 	ldw	fp,0(sp)
 102f88c:	dec00204 	addi	sp,sp,8
 102f890:	f800283a 	ret

0102f894 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 102f894:	defff904 	addi	sp,sp,-28
 102f898:	dfc00615 	stw	ra,24(sp)
 102f89c:	df000515 	stw	fp,20(sp)
 102f8a0:	df000504 	addi	fp,sp,20
 102f8a4:	e13ffc15 	stw	r4,-16(fp)
 102f8a8:	e17ffd15 	stw	r5,-12(fp)
 102f8ac:	e1bffe15 	stw	r6,-8(fp)
 102f8b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 102f8b4:	e0800217 	ldw	r2,8(fp)
 102f8b8:	d8800015 	stw	r2,0(sp)
 102f8bc:	e13ffc17 	ldw	r4,-16(fp)
 102f8c0:	e17ffd17 	ldw	r5,-12(fp)
 102f8c4:	e1bffe17 	ldw	r6,-8(fp)
 102f8c8:	e1ffff17 	ldw	r7,-4(fp)
 102f8cc:	102fa740 	call	102fa74 <alt_iic_isr_register>
}  
 102f8d0:	e037883a 	mov	sp,fp
 102f8d4:	dfc00117 	ldw	ra,4(sp)
 102f8d8:	df000017 	ldw	fp,0(sp)
 102f8dc:	dec00204 	addi	sp,sp,8
 102f8e0:	f800283a 	ret

0102f8e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 102f8e4:	defff904 	addi	sp,sp,-28
 102f8e8:	df000615 	stw	fp,24(sp)
 102f8ec:	df000604 	addi	fp,sp,24
 102f8f0:	e13ffe15 	stw	r4,-8(fp)
 102f8f4:	e17fff15 	stw	r5,-4(fp)
 102f8f8:	e0bfff17 	ldw	r2,-4(fp)
 102f8fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f900:	0005303a 	rdctl	r2,status
 102f904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f908:	e0fffb17 	ldw	r3,-20(fp)
 102f90c:	00bfff84 	movi	r2,-2
 102f910:	1884703a 	and	r2,r3,r2
 102f914:	1001703a 	wrctl	status,r2
  
  return context;
 102f918:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 102f91c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 102f920:	e0bffa17 	ldw	r2,-24(fp)
 102f924:	00c00044 	movi	r3,1
 102f928:	1884983a 	sll	r2,r3,r2
 102f92c:	1007883a 	mov	r3,r2
 102f930:	008040f4 	movhi	r2,259
 102f934:	10908904 	addi	r2,r2,16932
 102f938:	10800017 	ldw	r2,0(r2)
 102f93c:	1886b03a 	or	r3,r3,r2
 102f940:	008040f4 	movhi	r2,259
 102f944:	10908904 	addi	r2,r2,16932
 102f948:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 102f94c:	008040f4 	movhi	r2,259
 102f950:	10908904 	addi	r2,r2,16932
 102f954:	10800017 	ldw	r2,0(r2)
 102f958:	100170fa 	wrctl	ienable,r2
 102f95c:	e0bffc17 	ldw	r2,-16(fp)
 102f960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102f964:	e0bffd17 	ldw	r2,-12(fp)
 102f968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 102f96c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 102f970:	0001883a 	nop
}
 102f974:	e037883a 	mov	sp,fp
 102f978:	df000017 	ldw	fp,0(sp)
 102f97c:	dec00104 	addi	sp,sp,4
 102f980:	f800283a 	ret

0102f984 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 102f984:	defff904 	addi	sp,sp,-28
 102f988:	df000615 	stw	fp,24(sp)
 102f98c:	df000604 	addi	fp,sp,24
 102f990:	e13ffe15 	stw	r4,-8(fp)
 102f994:	e17fff15 	stw	r5,-4(fp)
 102f998:	e0bfff17 	ldw	r2,-4(fp)
 102f99c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102f9a0:	0005303a 	rdctl	r2,status
 102f9a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102f9a8:	e0fffb17 	ldw	r3,-20(fp)
 102f9ac:	00bfff84 	movi	r2,-2
 102f9b0:	1884703a 	and	r2,r3,r2
 102f9b4:	1001703a 	wrctl	status,r2
  
  return context;
 102f9b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 102f9bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 102f9c0:	e0bffa17 	ldw	r2,-24(fp)
 102f9c4:	00c00044 	movi	r3,1
 102f9c8:	1884983a 	sll	r2,r3,r2
 102f9cc:	0084303a 	nor	r2,zero,r2
 102f9d0:	1007883a 	mov	r3,r2
 102f9d4:	008040f4 	movhi	r2,259
 102f9d8:	10908904 	addi	r2,r2,16932
 102f9dc:	10800017 	ldw	r2,0(r2)
 102f9e0:	1886703a 	and	r3,r3,r2
 102f9e4:	008040f4 	movhi	r2,259
 102f9e8:	10908904 	addi	r2,r2,16932
 102f9ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 102f9f0:	008040f4 	movhi	r2,259
 102f9f4:	10908904 	addi	r2,r2,16932
 102f9f8:	10800017 	ldw	r2,0(r2)
 102f9fc:	100170fa 	wrctl	ienable,r2
 102fa00:	e0bffc17 	ldw	r2,-16(fp)
 102fa04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102fa08:	e0bffd17 	ldw	r2,-12(fp)
 102fa0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 102fa10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 102fa14:	0001883a 	nop
}
 102fa18:	e037883a 	mov	sp,fp
 102fa1c:	df000017 	ldw	fp,0(sp)
 102fa20:	dec00104 	addi	sp,sp,4
 102fa24:	f800283a 	ret

0102fa28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 102fa28:	defffc04 	addi	sp,sp,-16
 102fa2c:	df000315 	stw	fp,12(sp)
 102fa30:	df000304 	addi	fp,sp,12
 102fa34:	e13ffe15 	stw	r4,-8(fp)
 102fa38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 102fa3c:	000530fa 	rdctl	r2,ienable
 102fa40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 102fa44:	e0bfff17 	ldw	r2,-4(fp)
 102fa48:	00c00044 	movi	r3,1
 102fa4c:	1884983a 	sll	r2,r3,r2
 102fa50:	1007883a 	mov	r3,r2
 102fa54:	e0bffd17 	ldw	r2,-12(fp)
 102fa58:	1884703a 	and	r2,r3,r2
 102fa5c:	1004c03a 	cmpne	r2,r2,zero
 102fa60:	10803fcc 	andi	r2,r2,255
}
 102fa64:	e037883a 	mov	sp,fp
 102fa68:	df000017 	ldw	fp,0(sp)
 102fa6c:	dec00104 	addi	sp,sp,4
 102fa70:	f800283a 	ret

0102fa74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 102fa74:	defff504 	addi	sp,sp,-44
 102fa78:	dfc00a15 	stw	ra,40(sp)
 102fa7c:	df000915 	stw	fp,36(sp)
 102fa80:	df000904 	addi	fp,sp,36
 102fa84:	e13ffc15 	stw	r4,-16(fp)
 102fa88:	e17ffd15 	stw	r5,-12(fp)
 102fa8c:	e1bffe15 	stw	r6,-8(fp)
 102fa90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 102fa94:	00bffa84 	movi	r2,-22
 102fa98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 102fa9c:	e0bffd17 	ldw	r2,-12(fp)
 102faa0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 102faa4:	e0bff817 	ldw	r2,-32(fp)
 102faa8:	10800808 	cmpgei	r2,r2,32
 102faac:	1000271e 	bne	r2,zero,102fb4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102fab0:	0005303a 	rdctl	r2,status
 102fab4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102fab8:	e0fffa17 	ldw	r3,-24(fp)
 102fabc:	00bfff84 	movi	r2,-2
 102fac0:	1884703a 	and	r2,r3,r2
 102fac4:	1001703a 	wrctl	status,r2
  
  return context;
 102fac8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 102facc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 102fad0:	008040f4 	movhi	r2,259
 102fad4:	10909704 	addi	r2,r2,16988
 102fad8:	e0fff817 	ldw	r3,-32(fp)
 102fadc:	180690fa 	slli	r3,r3,3
 102fae0:	10c5883a 	add	r2,r2,r3
 102fae4:	e0fffe17 	ldw	r3,-8(fp)
 102fae8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 102faec:	008040f4 	movhi	r2,259
 102faf0:	10909704 	addi	r2,r2,16988
 102faf4:	e0fff817 	ldw	r3,-32(fp)
 102faf8:	180690fa 	slli	r3,r3,3
 102fafc:	10c5883a 	add	r2,r2,r3
 102fb00:	10800104 	addi	r2,r2,4
 102fb04:	e0ffff17 	ldw	r3,-4(fp)
 102fb08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 102fb0c:	e0bffe17 	ldw	r2,-8(fp)
 102fb10:	10000526 	beq	r2,zero,102fb28 <alt_iic_isr_register+0xb4>
 102fb14:	e0bff817 	ldw	r2,-32(fp)
 102fb18:	e13ffc17 	ldw	r4,-16(fp)
 102fb1c:	100b883a 	mov	r5,r2
 102fb20:	102f8e40 	call	102f8e4 <alt_ic_irq_enable>
 102fb24:	00000406 	br	102fb38 <alt_iic_isr_register+0xc4>
 102fb28:	e0bff817 	ldw	r2,-32(fp)
 102fb2c:	e13ffc17 	ldw	r4,-16(fp)
 102fb30:	100b883a 	mov	r5,r2
 102fb34:	102f9840 	call	102f984 <alt_ic_irq_disable>
 102fb38:	e0bff715 	stw	r2,-36(fp)
 102fb3c:	e0bff917 	ldw	r2,-28(fp)
 102fb40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102fb44:	e0bffb17 	ldw	r2,-20(fp)
 102fb48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 102fb4c:	e0bff717 	ldw	r2,-36(fp)
}
 102fb50:	e037883a 	mov	sp,fp
 102fb54:	dfc00117 	ldw	ra,4(sp)
 102fb58:	df000017 	ldw	fp,0(sp)
 102fb5c:	dec00204 	addi	sp,sp,8
 102fb60:	f800283a 	ret

0102fb64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 102fb64:	defff904 	addi	sp,sp,-28
 102fb68:	dfc00615 	stw	ra,24(sp)
 102fb6c:	df000515 	stw	fp,20(sp)
 102fb70:	df000504 	addi	fp,sp,20
 102fb74:	e13ffc15 	stw	r4,-16(fp)
 102fb78:	e17ffd15 	stw	r5,-12(fp)
 102fb7c:	e1bffe15 	stw	r6,-8(fp)
 102fb80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 102fb84:	e13ffd17 	ldw	r4,-12(fp)
 102fb88:	e17ffe17 	ldw	r5,-8(fp)
 102fb8c:	e1bfff17 	ldw	r6,-4(fp)
 102fb90:	102fdb80 	call	102fdb8 <open>
 102fb94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 102fb98:	e0bffb17 	ldw	r2,-20(fp)
 102fb9c:	10001c16 	blt	r2,zero,102fc10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 102fba0:	008040f4 	movhi	r2,259
 102fba4:	10853c04 	addi	r2,r2,5360
 102fba8:	e0fffb17 	ldw	r3,-20(fp)
 102fbac:	18c00324 	muli	r3,r3,12
 102fbb0:	10c5883a 	add	r2,r2,r3
 102fbb4:	10c00017 	ldw	r3,0(r2)
 102fbb8:	e0bffc17 	ldw	r2,-16(fp)
 102fbbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 102fbc0:	008040f4 	movhi	r2,259
 102fbc4:	10853c04 	addi	r2,r2,5360
 102fbc8:	e0fffb17 	ldw	r3,-20(fp)
 102fbcc:	18c00324 	muli	r3,r3,12
 102fbd0:	10c5883a 	add	r2,r2,r3
 102fbd4:	10800104 	addi	r2,r2,4
 102fbd8:	10c00017 	ldw	r3,0(r2)
 102fbdc:	e0bffc17 	ldw	r2,-16(fp)
 102fbe0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 102fbe4:	008040f4 	movhi	r2,259
 102fbe8:	10853c04 	addi	r2,r2,5360
 102fbec:	e0fffb17 	ldw	r3,-20(fp)
 102fbf0:	18c00324 	muli	r3,r3,12
 102fbf4:	10c5883a 	add	r2,r2,r3
 102fbf8:	10800204 	addi	r2,r2,8
 102fbfc:	10c00017 	ldw	r3,0(r2)
 102fc00:	e0bffc17 	ldw	r2,-16(fp)
 102fc04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 102fc08:	e13ffb17 	ldw	r4,-20(fp)
 102fc0c:	102e5440 	call	102e544 <alt_release_fd>
  }
} 
 102fc10:	e037883a 	mov	sp,fp
 102fc14:	dfc00117 	ldw	ra,4(sp)
 102fc18:	df000017 	ldw	fp,0(sp)
 102fc1c:	dec00204 	addi	sp,sp,8
 102fc20:	f800283a 	ret

0102fc24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 102fc24:	defffb04 	addi	sp,sp,-20
 102fc28:	dfc00415 	stw	ra,16(sp)
 102fc2c:	df000315 	stw	fp,12(sp)
 102fc30:	df000304 	addi	fp,sp,12
 102fc34:	e13ffd15 	stw	r4,-12(fp)
 102fc38:	e17ffe15 	stw	r5,-8(fp)
 102fc3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 102fc40:	010040f4 	movhi	r4,259
 102fc44:	21053f04 	addi	r4,r4,5372
 102fc48:	e17ffd17 	ldw	r5,-12(fp)
 102fc4c:	01800044 	movi	r6,1
 102fc50:	01c07fc4 	movi	r7,511
 102fc54:	102fb640 	call	102fb64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 102fc58:	010040f4 	movhi	r4,259
 102fc5c:	21053c04 	addi	r4,r4,5360
 102fc60:	e17ffe17 	ldw	r5,-8(fp)
 102fc64:	000d883a 	mov	r6,zero
 102fc68:	01c07fc4 	movi	r7,511
 102fc6c:	102fb640 	call	102fb64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 102fc70:	010040f4 	movhi	r4,259
 102fc74:	21054204 	addi	r4,r4,5384
 102fc78:	e17fff17 	ldw	r5,-4(fp)
 102fc7c:	01800044 	movi	r6,1
 102fc80:	01c07fc4 	movi	r7,511
 102fc84:	102fb640 	call	102fb64 <alt_open_fd>
}  
 102fc88:	e037883a 	mov	sp,fp
 102fc8c:	dfc00117 	ldw	ra,4(sp)
 102fc90:	df000017 	ldw	fp,0(sp)
 102fc94:	dec00204 	addi	sp,sp,8
 102fc98:	f800283a 	ret

0102fc9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102fc9c:	defffe04 	addi	sp,sp,-8
 102fca0:	dfc00115 	stw	ra,4(sp)
 102fca4:	df000015 	stw	fp,0(sp)
 102fca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102fcac:	008040f4 	movhi	r2,259
 102fcb0:	1089bf04 	addi	r2,r2,9980
 102fcb4:	10800017 	ldw	r2,0(r2)
 102fcb8:	10000526 	beq	r2,zero,102fcd0 <alt_get_errno+0x34>
 102fcbc:	008040f4 	movhi	r2,259
 102fcc0:	1089bf04 	addi	r2,r2,9980
 102fcc4:	10800017 	ldw	r2,0(r2)
 102fcc8:	103ee83a 	callr	r2
 102fccc:	00000206 	br	102fcd8 <alt_get_errno+0x3c>
 102fcd0:	008040f4 	movhi	r2,259
 102fcd4:	10908504 	addi	r2,r2,16916
}
 102fcd8:	e037883a 	mov	sp,fp
 102fcdc:	dfc00117 	ldw	ra,4(sp)
 102fce0:	df000017 	ldw	fp,0(sp)
 102fce4:	dec00204 	addi	sp,sp,8
 102fce8:	f800283a 	ret

0102fcec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 102fcec:	defffd04 	addi	sp,sp,-12
 102fcf0:	df000215 	stw	fp,8(sp)
 102fcf4:	df000204 	addi	fp,sp,8
 102fcf8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 102fcfc:	e0bfff17 	ldw	r2,-4(fp)
 102fd00:	10800217 	ldw	r2,8(r2)
 102fd04:	10d00034 	orhi	r3,r2,16384
 102fd08:	e0bfff17 	ldw	r2,-4(fp)
 102fd0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 102fd10:	e03ffe15 	stw	zero,-8(fp)
 102fd14:	00001d06 	br	102fd8c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 102fd18:	008040f4 	movhi	r2,259
 102fd1c:	10853c04 	addi	r2,r2,5360
 102fd20:	e0fffe17 	ldw	r3,-8(fp)
 102fd24:	18c00324 	muli	r3,r3,12
 102fd28:	10c5883a 	add	r2,r2,r3
 102fd2c:	10c00017 	ldw	r3,0(r2)
 102fd30:	e0bfff17 	ldw	r2,-4(fp)
 102fd34:	10800017 	ldw	r2,0(r2)
 102fd38:	1880111e 	bne	r3,r2,102fd80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 102fd3c:	008040f4 	movhi	r2,259
 102fd40:	10853c04 	addi	r2,r2,5360
 102fd44:	e0fffe17 	ldw	r3,-8(fp)
 102fd48:	18c00324 	muli	r3,r3,12
 102fd4c:	10c5883a 	add	r2,r2,r3
 102fd50:	10800204 	addi	r2,r2,8
 102fd54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 102fd58:	1000090e 	bge	r2,zero,102fd80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 102fd5c:	e0bffe17 	ldw	r2,-8(fp)
 102fd60:	10c00324 	muli	r3,r2,12
 102fd64:	008040f4 	movhi	r2,259
 102fd68:	10853c04 	addi	r2,r2,5360
 102fd6c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 102fd70:	e0bfff17 	ldw	r2,-4(fp)
 102fd74:	18800226 	beq	r3,r2,102fd80 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 102fd78:	00bffcc4 	movi	r2,-13
 102fd7c:	00000a06 	br	102fda8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 102fd80:	e0bffe17 	ldw	r2,-8(fp)
 102fd84:	10800044 	addi	r2,r2,1
 102fd88:	e0bffe15 	stw	r2,-8(fp)
 102fd8c:	008040f4 	movhi	r2,259
 102fd90:	1089be04 	addi	r2,r2,9976
 102fd94:	10800017 	ldw	r2,0(r2)
 102fd98:	1007883a 	mov	r3,r2
 102fd9c:	e0bffe17 	ldw	r2,-8(fp)
 102fda0:	18bfdd2e 	bgeu	r3,r2,102fd18 <__alt_data_end+0xffff2858>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 102fda4:	0005883a 	mov	r2,zero
}
 102fda8:	e037883a 	mov	sp,fp
 102fdac:	df000017 	ldw	fp,0(sp)
 102fdb0:	dec00104 	addi	sp,sp,4
 102fdb4:	f800283a 	ret

0102fdb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 102fdb8:	defff604 	addi	sp,sp,-40
 102fdbc:	dfc00915 	stw	ra,36(sp)
 102fdc0:	df000815 	stw	fp,32(sp)
 102fdc4:	df000804 	addi	fp,sp,32
 102fdc8:	e13ffd15 	stw	r4,-12(fp)
 102fdcc:	e17ffe15 	stw	r5,-8(fp)
 102fdd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 102fdd4:	00bfffc4 	movi	r2,-1
 102fdd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 102fddc:	00bffb44 	movi	r2,-19
 102fde0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 102fde4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 102fde8:	e13ffd17 	ldw	r4,-12(fp)
 102fdec:	014040f4 	movhi	r5,259
 102fdf0:	2949bc04 	addi	r5,r5,9968
 102fdf4:	10300cc0 	call	10300cc <alt_find_dev>
 102fdf8:	e0bff815 	stw	r2,-32(fp)
 102fdfc:	e0bff817 	ldw	r2,-32(fp)
 102fe00:	1000051e 	bne	r2,zero,102fe18 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 102fe04:	e13ffd17 	ldw	r4,-12(fp)
 102fe08:	103015c0 	call	103015c <alt_find_file>
 102fe0c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 102fe10:	00800044 	movi	r2,1
 102fe14:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 102fe18:	e0bff817 	ldw	r2,-32(fp)
 102fe1c:	10002926 	beq	r2,zero,102fec4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 102fe20:	e13ff817 	ldw	r4,-32(fp)
 102fe24:	10302700 	call	1030270 <alt_get_fd>
 102fe28:	e0bff915 	stw	r2,-28(fp)
 102fe2c:	e0bff917 	ldw	r2,-28(fp)
 102fe30:	1000030e 	bge	r2,zero,102fe40 <open+0x88>
    {
      status = index;
 102fe34:	e0bff917 	ldw	r2,-28(fp)
 102fe38:	e0bffa15 	stw	r2,-24(fp)
 102fe3c:	00002306 	br	102fecc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 102fe40:	e0bff917 	ldw	r2,-28(fp)
 102fe44:	10c00324 	muli	r3,r2,12
 102fe48:	008040f4 	movhi	r2,259
 102fe4c:	10853c04 	addi	r2,r2,5360
 102fe50:	1885883a 	add	r2,r3,r2
 102fe54:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 102fe58:	e0fffe17 	ldw	r3,-8(fp)
 102fe5c:	00900034 	movhi	r2,16384
 102fe60:	10bfffc4 	addi	r2,r2,-1
 102fe64:	1886703a 	and	r3,r3,r2
 102fe68:	e0bffc17 	ldw	r2,-16(fp)
 102fe6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 102fe70:	e0bffb17 	ldw	r2,-20(fp)
 102fe74:	1000051e 	bne	r2,zero,102fe8c <open+0xd4>
 102fe78:	e13ffc17 	ldw	r4,-16(fp)
 102fe7c:	102fcec0 	call	102fcec <alt_file_locked>
 102fe80:	e0bffa15 	stw	r2,-24(fp)
 102fe84:	e0bffa17 	ldw	r2,-24(fp)
 102fe88:	10001016 	blt	r2,zero,102fecc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 102fe8c:	e0bff817 	ldw	r2,-32(fp)
 102fe90:	10800317 	ldw	r2,12(r2)
 102fe94:	10000826 	beq	r2,zero,102feb8 <open+0x100>
 102fe98:	e0bff817 	ldw	r2,-32(fp)
 102fe9c:	10800317 	ldw	r2,12(r2)
 102fea0:	e13ffc17 	ldw	r4,-16(fp)
 102fea4:	e17ffd17 	ldw	r5,-12(fp)
 102fea8:	e1bffe17 	ldw	r6,-8(fp)
 102feac:	e1ffff17 	ldw	r7,-4(fp)
 102feb0:	103ee83a 	callr	r2
 102feb4:	00000106 	br	102febc <open+0x104>
 102feb8:	0005883a 	mov	r2,zero
 102febc:	e0bffa15 	stw	r2,-24(fp)
 102fec0:	00000206 	br	102fecc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 102fec4:	00bffb44 	movi	r2,-19
 102fec8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 102fecc:	e0bffa17 	ldw	r2,-24(fp)
 102fed0:	1000090e 	bge	r2,zero,102fef8 <open+0x140>
  {
    alt_release_fd (index);  
 102fed4:	e13ff917 	ldw	r4,-28(fp)
 102fed8:	102e5440 	call	102e544 <alt_release_fd>
    ALT_ERRNO = -status;
 102fedc:	102fc9c0 	call	102fc9c <alt_get_errno>
 102fee0:	1007883a 	mov	r3,r2
 102fee4:	e0bffa17 	ldw	r2,-24(fp)
 102fee8:	0085c83a 	sub	r2,zero,r2
 102feec:	18800015 	stw	r2,0(r3)
    return -1;
 102fef0:	00bfffc4 	movi	r2,-1
 102fef4:	00000106 	br	102fefc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 102fef8:	e0bff917 	ldw	r2,-28(fp)
}
 102fefc:	e037883a 	mov	sp,fp
 102ff00:	dfc00117 	ldw	ra,4(sp)
 102ff04:	df000017 	ldw	fp,0(sp)
 102ff08:	dec00204 	addi	sp,sp,8
 102ff0c:	f800283a 	ret

0102ff10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 102ff10:	defffa04 	addi	sp,sp,-24
 102ff14:	df000515 	stw	fp,20(sp)
 102ff18:	df000504 	addi	fp,sp,20
 102ff1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102ff20:	0005303a 	rdctl	r2,status
 102ff24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102ff28:	e0fffc17 	ldw	r3,-16(fp)
 102ff2c:	00bfff84 	movi	r2,-2
 102ff30:	1884703a 	and	r2,r3,r2
 102ff34:	1001703a 	wrctl	status,r2
  
  return context;
 102ff38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 102ff3c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 102ff40:	e0bfff17 	ldw	r2,-4(fp)
 102ff44:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 102ff48:	e0bffd17 	ldw	r2,-12(fp)
 102ff4c:	10800017 	ldw	r2,0(r2)
 102ff50:	e0fffd17 	ldw	r3,-12(fp)
 102ff54:	18c00117 	ldw	r3,4(r3)
 102ff58:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 102ff5c:	e0bffd17 	ldw	r2,-12(fp)
 102ff60:	10800117 	ldw	r2,4(r2)
 102ff64:	e0fffd17 	ldw	r3,-12(fp)
 102ff68:	18c00017 	ldw	r3,0(r3)
 102ff6c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 102ff70:	e0bffd17 	ldw	r2,-12(fp)
 102ff74:	e0fffd17 	ldw	r3,-12(fp)
 102ff78:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 102ff7c:	e0bffd17 	ldw	r2,-12(fp)
 102ff80:	e0fffd17 	ldw	r3,-12(fp)
 102ff84:	10c00015 	stw	r3,0(r2)
 102ff88:	e0bffb17 	ldw	r2,-20(fp)
 102ff8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102ff90:	e0bffe17 	ldw	r2,-8(fp)
 102ff94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 102ff98:	e037883a 	mov	sp,fp
 102ff9c:	df000017 	ldw	fp,0(sp)
 102ffa0:	dec00104 	addi	sp,sp,4
 102ffa4:	f800283a 	ret

0102ffa8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 102ffa8:	defffb04 	addi	sp,sp,-20
 102ffac:	dfc00415 	stw	ra,16(sp)
 102ffb0:	df000315 	stw	fp,12(sp)
 102ffb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 102ffb8:	d0a00e17 	ldw	r2,-32712(gp)
 102ffbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 102ffc0:	d0a6d717 	ldw	r2,-25764(gp)
 102ffc4:	10800044 	addi	r2,r2,1
 102ffc8:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 102ffcc:	00002e06 	br	1030088 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 102ffd0:	e0bffd17 	ldw	r2,-12(fp)
 102ffd4:	10800017 	ldw	r2,0(r2)
 102ffd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 102ffdc:	e0bffd17 	ldw	r2,-12(fp)
 102ffe0:	10800403 	ldbu	r2,16(r2)
 102ffe4:	10803fcc 	andi	r2,r2,255
 102ffe8:	10000426 	beq	r2,zero,102fffc <alt_tick+0x54>
 102ffec:	d0a6d717 	ldw	r2,-25764(gp)
 102fff0:	1000021e 	bne	r2,zero,102fffc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 102fff4:	e0bffd17 	ldw	r2,-12(fp)
 102fff8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 102fffc:	e0bffd17 	ldw	r2,-12(fp)
 1030000:	10800217 	ldw	r2,8(r2)
 1030004:	d0e6d717 	ldw	r3,-25764(gp)
 1030008:	18801d36 	bltu	r3,r2,1030080 <alt_tick+0xd8>
 103000c:	e0bffd17 	ldw	r2,-12(fp)
 1030010:	10800403 	ldbu	r2,16(r2)
 1030014:	10803fcc 	andi	r2,r2,255
 1030018:	1000191e 	bne	r2,zero,1030080 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 103001c:	e0bffd17 	ldw	r2,-12(fp)
 1030020:	10800317 	ldw	r2,12(r2)
 1030024:	e0fffd17 	ldw	r3,-12(fp)
 1030028:	18c00517 	ldw	r3,20(r3)
 103002c:	1809883a 	mov	r4,r3
 1030030:	103ee83a 	callr	r2
 1030034:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1030038:	e0bfff17 	ldw	r2,-4(fp)
 103003c:	1000031e 	bne	r2,zero,103004c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1030040:	e13ffd17 	ldw	r4,-12(fp)
 1030044:	102ff100 	call	102ff10 <alt_alarm_stop>
 1030048:	00000d06 	br	1030080 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 103004c:	e0bffd17 	ldw	r2,-12(fp)
 1030050:	10c00217 	ldw	r3,8(r2)
 1030054:	e0bfff17 	ldw	r2,-4(fp)
 1030058:	1887883a 	add	r3,r3,r2
 103005c:	e0bffd17 	ldw	r2,-12(fp)
 1030060:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1030064:	e0bffd17 	ldw	r2,-12(fp)
 1030068:	10c00217 	ldw	r3,8(r2)
 103006c:	d0a6d717 	ldw	r2,-25764(gp)
 1030070:	1880032e 	bgeu	r3,r2,1030080 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1030074:	e0bffd17 	ldw	r2,-12(fp)
 1030078:	00c00044 	movi	r3,1
 103007c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1030080:	e0bffe17 	ldw	r2,-8(fp)
 1030084:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1030088:	e0fffd17 	ldw	r3,-12(fp)
 103008c:	d0a00e04 	addi	r2,gp,-32712
 1030090:	18bfcf1e 	bne	r3,r2,102ffd0 <__alt_data_end+0xffff2b10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1030094:	0001883a 	nop
}
 1030098:	e037883a 	mov	sp,fp
 103009c:	dfc00117 	ldw	ra,4(sp)
 10300a0:	df000017 	ldw	fp,0(sp)
 10300a4:	dec00204 	addi	sp,sp,8
 10300a8:	f800283a 	ret

010300ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 10300ac:	deffff04 	addi	sp,sp,-4
 10300b0:	df000015 	stw	fp,0(sp)
 10300b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10300b8:	000170fa 	wrctl	ienable,zero
}
 10300bc:	e037883a 	mov	sp,fp
 10300c0:	df000017 	ldw	fp,0(sp)
 10300c4:	dec00104 	addi	sp,sp,4
 10300c8:	f800283a 	ret

010300cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10300cc:	defffa04 	addi	sp,sp,-24
 10300d0:	dfc00515 	stw	ra,20(sp)
 10300d4:	df000415 	stw	fp,16(sp)
 10300d8:	df000404 	addi	fp,sp,16
 10300dc:	e13ffe15 	stw	r4,-8(fp)
 10300e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10300e4:	e0bfff17 	ldw	r2,-4(fp)
 10300e8:	10800017 	ldw	r2,0(r2)
 10300ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10300f0:	e13ffe17 	ldw	r4,-8(fp)
 10300f4:	1022d4c0 	call	1022d4c <strlen>
 10300f8:	10800044 	addi	r2,r2,1
 10300fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1030100:	00000d06 	br	1030138 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1030104:	e0bffc17 	ldw	r2,-16(fp)
 1030108:	10c00217 	ldw	r3,8(r2)
 103010c:	e0bffd17 	ldw	r2,-12(fp)
 1030110:	1809883a 	mov	r4,r3
 1030114:	e17ffe17 	ldw	r5,-8(fp)
 1030118:	100d883a 	mov	r6,r2
 103011c:	10304980 	call	1030498 <memcmp>
 1030120:	1000021e 	bne	r2,zero,103012c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1030124:	e0bffc17 	ldw	r2,-16(fp)
 1030128:	00000706 	br	1030148 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 103012c:	e0bffc17 	ldw	r2,-16(fp)
 1030130:	10800017 	ldw	r2,0(r2)
 1030134:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1030138:	e0fffc17 	ldw	r3,-16(fp)
 103013c:	e0bfff17 	ldw	r2,-4(fp)
 1030140:	18bff01e 	bne	r3,r2,1030104 <__alt_data_end+0xffff2c44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1030144:	0005883a 	mov	r2,zero
}
 1030148:	e037883a 	mov	sp,fp
 103014c:	dfc00117 	ldw	ra,4(sp)
 1030150:	df000017 	ldw	fp,0(sp)
 1030154:	dec00204 	addi	sp,sp,8
 1030158:	f800283a 	ret

0103015c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 103015c:	defffb04 	addi	sp,sp,-20
 1030160:	dfc00415 	stw	ra,16(sp)
 1030164:	df000315 	stw	fp,12(sp)
 1030168:	df000304 	addi	fp,sp,12
 103016c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1030170:	008040f4 	movhi	r2,259
 1030174:	1089ba04 	addi	r2,r2,9960
 1030178:	10800017 	ldw	r2,0(r2)
 103017c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1030180:	00003106 	br	1030248 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1030184:	e0bffd17 	ldw	r2,-12(fp)
 1030188:	10800217 	ldw	r2,8(r2)
 103018c:	1009883a 	mov	r4,r2
 1030190:	1022d4c0 	call	1022d4c <strlen>
 1030194:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1030198:	e0bffd17 	ldw	r2,-12(fp)
 103019c:	10c00217 	ldw	r3,8(r2)
 10301a0:	e0bffe17 	ldw	r2,-8(fp)
 10301a4:	10bfffc4 	addi	r2,r2,-1
 10301a8:	1885883a 	add	r2,r3,r2
 10301ac:	10800003 	ldbu	r2,0(r2)
 10301b0:	10803fcc 	andi	r2,r2,255
 10301b4:	1080201c 	xori	r2,r2,128
 10301b8:	10bfe004 	addi	r2,r2,-128
 10301bc:	10800bd8 	cmpnei	r2,r2,47
 10301c0:	1000031e 	bne	r2,zero,10301d0 <alt_find_file+0x74>
    {
      len -= 1;
 10301c4:	e0bffe17 	ldw	r2,-8(fp)
 10301c8:	10bfffc4 	addi	r2,r2,-1
 10301cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10301d0:	e0bffe17 	ldw	r2,-8(fp)
 10301d4:	e0ffff17 	ldw	r3,-4(fp)
 10301d8:	1885883a 	add	r2,r3,r2
 10301dc:	10800003 	ldbu	r2,0(r2)
 10301e0:	10803fcc 	andi	r2,r2,255
 10301e4:	1080201c 	xori	r2,r2,128
 10301e8:	10bfe004 	addi	r2,r2,-128
 10301ec:	10800be0 	cmpeqi	r2,r2,47
 10301f0:	1000081e 	bne	r2,zero,1030214 <alt_find_file+0xb8>
 10301f4:	e0bffe17 	ldw	r2,-8(fp)
 10301f8:	e0ffff17 	ldw	r3,-4(fp)
 10301fc:	1885883a 	add	r2,r3,r2
 1030200:	10800003 	ldbu	r2,0(r2)
 1030204:	10803fcc 	andi	r2,r2,255
 1030208:	1080201c 	xori	r2,r2,128
 103020c:	10bfe004 	addi	r2,r2,-128
 1030210:	10000a1e 	bne	r2,zero,103023c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 1030214:	e0bffd17 	ldw	r2,-12(fp)
 1030218:	10c00217 	ldw	r3,8(r2)
 103021c:	e0bffe17 	ldw	r2,-8(fp)
 1030220:	1809883a 	mov	r4,r3
 1030224:	e17fff17 	ldw	r5,-4(fp)
 1030228:	100d883a 	mov	r6,r2
 103022c:	10304980 	call	1030498 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1030230:	1000021e 	bne	r2,zero,103023c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1030234:	e0bffd17 	ldw	r2,-12(fp)
 1030238:	00000806 	br	103025c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 103023c:	e0bffd17 	ldw	r2,-12(fp)
 1030240:	10800017 	ldw	r2,0(r2)
 1030244:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1030248:	e0fffd17 	ldw	r3,-12(fp)
 103024c:	008040f4 	movhi	r2,259
 1030250:	1089ba04 	addi	r2,r2,9960
 1030254:	18bfcb1e 	bne	r3,r2,1030184 <__alt_data_end+0xffff2cc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1030258:	0005883a 	mov	r2,zero
}
 103025c:	e037883a 	mov	sp,fp
 1030260:	dfc00117 	ldw	ra,4(sp)
 1030264:	df000017 	ldw	fp,0(sp)
 1030268:	dec00204 	addi	sp,sp,8
 103026c:	f800283a 	ret

01030270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1030270:	defffc04 	addi	sp,sp,-16
 1030274:	df000315 	stw	fp,12(sp)
 1030278:	df000304 	addi	fp,sp,12
 103027c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1030280:	00bffa04 	movi	r2,-24
 1030284:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1030288:	e03ffd15 	stw	zero,-12(fp)
 103028c:	00001d06 	br	1030304 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 1030290:	008040f4 	movhi	r2,259
 1030294:	10853c04 	addi	r2,r2,5360
 1030298:	e0fffd17 	ldw	r3,-12(fp)
 103029c:	18c00324 	muli	r3,r3,12
 10302a0:	10c5883a 	add	r2,r2,r3
 10302a4:	10800017 	ldw	r2,0(r2)
 10302a8:	1000131e 	bne	r2,zero,10302f8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 10302ac:	008040f4 	movhi	r2,259
 10302b0:	10853c04 	addi	r2,r2,5360
 10302b4:	e0fffd17 	ldw	r3,-12(fp)
 10302b8:	18c00324 	muli	r3,r3,12
 10302bc:	10c5883a 	add	r2,r2,r3
 10302c0:	e0ffff17 	ldw	r3,-4(fp)
 10302c4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 10302c8:	008040f4 	movhi	r2,259
 10302cc:	1089be04 	addi	r2,r2,9976
 10302d0:	10c00017 	ldw	r3,0(r2)
 10302d4:	e0bffd17 	ldw	r2,-12(fp)
 10302d8:	1880040e 	bge	r3,r2,10302ec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 10302dc:	008040f4 	movhi	r2,259
 10302e0:	1089be04 	addi	r2,r2,9976
 10302e4:	e0fffd17 	ldw	r3,-12(fp)
 10302e8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 10302ec:	e0bffd17 	ldw	r2,-12(fp)
 10302f0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10302f4:	00000606 	br	1030310 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10302f8:	e0bffd17 	ldw	r2,-12(fp)
 10302fc:	10800044 	addi	r2,r2,1
 1030300:	e0bffd15 	stw	r2,-12(fp)
 1030304:	e0bffd17 	ldw	r2,-12(fp)
 1030308:	10800810 	cmplti	r2,r2,32
 103030c:	103fe01e 	bne	r2,zero,1030290 <__alt_data_end+0xffff2dd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1030310:	e0bffe17 	ldw	r2,-8(fp)
}
 1030314:	e037883a 	mov	sp,fp
 1030318:	df000017 	ldw	fp,0(sp)
 103031c:	dec00104 	addi	sp,sp,4
 1030320:	f800283a 	ret

01030324 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1030324:	defffb04 	addi	sp,sp,-20
 1030328:	df000415 	stw	fp,16(sp)
 103032c:	df000404 	addi	fp,sp,16
 1030330:	e13ffe15 	stw	r4,-8(fp)
 1030334:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1030338:	e0bfff17 	ldw	r2,-4(fp)
 103033c:	10840070 	cmpltui	r2,r2,4097
 1030340:	1000021e 	bne	r2,zero,103034c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1030344:	00840004 	movi	r2,4096
 1030348:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 103034c:	e0fffe17 	ldw	r3,-8(fp)
 1030350:	e0bfff17 	ldw	r2,-4(fp)
 1030354:	1885883a 	add	r2,r3,r2
 1030358:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 103035c:	e0bffe17 	ldw	r2,-8(fp)
 1030360:	e0bffc15 	stw	r2,-16(fp)
 1030364:	00000506 	br	103037c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1030368:	e0bffc17 	ldw	r2,-16(fp)
 103036c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1030370:	e0bffc17 	ldw	r2,-16(fp)
 1030374:	10800804 	addi	r2,r2,32
 1030378:	e0bffc15 	stw	r2,-16(fp)
 103037c:	e0fffc17 	ldw	r3,-16(fp)
 1030380:	e0bffd17 	ldw	r2,-12(fp)
 1030384:	18bff836 	bltu	r3,r2,1030368 <__alt_data_end+0xffff2ea8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1030388:	e0bffe17 	ldw	r2,-8(fp)
 103038c:	108007cc 	andi	r2,r2,31
 1030390:	10000226 	beq	r2,zero,103039c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1030394:	e0bffc17 	ldw	r2,-16(fp)
 1030398:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 103039c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10303a0:	e037883a 	mov	sp,fp
 10303a4:	df000017 	ldw	fp,0(sp)
 10303a8:	dec00104 	addi	sp,sp,4
 10303ac:	f800283a 	ret

010303b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10303b0:	defffe04 	addi	sp,sp,-8
 10303b4:	df000115 	stw	fp,4(sp)
 10303b8:	df000104 	addi	fp,sp,4
 10303bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10303c0:	e0bfff17 	ldw	r2,-4(fp)
 10303c4:	10bffe84 	addi	r2,r2,-6
 10303c8:	10c00428 	cmpgeui	r3,r2,16
 10303cc:	18001a1e 	bne	r3,zero,1030438 <alt_exception_cause_generated_bad_addr+0x88>
 10303d0:	100690ba 	slli	r3,r2,2
 10303d4:	008040f4 	movhi	r2,259
 10303d8:	1080fa04 	addi	r2,r2,1000
 10303dc:	1885883a 	add	r2,r3,r2
 10303e0:	10800017 	ldw	r2,0(r2)
 10303e4:	1000683a 	jmp	r2
 10303e8:	01030428 	cmpgeui	r4,zero,3088
 10303ec:	01030428 	cmpgeui	r4,zero,3088
 10303f0:	01030438 	rdprs	r4,zero,3088
 10303f4:	01030438 	rdprs	r4,zero,3088
 10303f8:	01030438 	rdprs	r4,zero,3088
 10303fc:	01030428 	cmpgeui	r4,zero,3088
 1030400:	01030430 	cmpltui	r4,zero,3088
 1030404:	01030438 	rdprs	r4,zero,3088
 1030408:	01030428 	cmpgeui	r4,zero,3088
 103040c:	01030428 	cmpgeui	r4,zero,3088
 1030410:	01030438 	rdprs	r4,zero,3088
 1030414:	01030428 	cmpgeui	r4,zero,3088
 1030418:	01030430 	cmpltui	r4,zero,3088
 103041c:	01030438 	rdprs	r4,zero,3088
 1030420:	01030438 	rdprs	r4,zero,3088
 1030424:	01030428 	cmpgeui	r4,zero,3088
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1030428:	00800044 	movi	r2,1
 103042c:	00000306 	br	103043c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1030430:	0005883a 	mov	r2,zero
 1030434:	00000106 	br	103043c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1030438:	0005883a 	mov	r2,zero
  }
}
 103043c:	e037883a 	mov	sp,fp
 1030440:	df000017 	ldw	fp,0(sp)
 1030444:	dec00104 	addi	sp,sp,4
 1030448:	f800283a 	ret

0103044c <atexit>:
 103044c:	200b883a 	mov	r5,r4
 1030450:	000d883a 	mov	r6,zero
 1030454:	0009883a 	mov	r4,zero
 1030458:	000f883a 	mov	r7,zero
 103045c:	10305141 	jmpi	1030514 <__register_exitproc>

01030460 <exit>:
 1030460:	defffe04 	addi	sp,sp,-8
 1030464:	000b883a 	mov	r5,zero
 1030468:	dc000015 	stw	r16,0(sp)
 103046c:	dfc00115 	stw	ra,4(sp)
 1030470:	2021883a 	mov	r16,r4
 1030474:	10306280 	call	1030628 <__call_exitprocs>
 1030478:	008040f4 	movhi	r2,259
 103047c:	1089b404 	addi	r2,r2,9936
 1030480:	11000017 	ldw	r4,0(r2)
 1030484:	20800f17 	ldw	r2,60(r4)
 1030488:	10000126 	beq	r2,zero,1030490 <exit+0x30>
 103048c:	103ee83a 	callr	r2
 1030490:	8009883a 	mov	r4,r16
 1030494:	10307bc0 	call	10307bc <_exit>

01030498 <memcmp>:
 1030498:	01c000c4 	movi	r7,3
 103049c:	3980192e 	bgeu	r7,r6,1030504 <memcmp+0x6c>
 10304a0:	2144b03a 	or	r2,r4,r5
 10304a4:	11c4703a 	and	r2,r2,r7
 10304a8:	10000f26 	beq	r2,zero,10304e8 <memcmp+0x50>
 10304ac:	20800003 	ldbu	r2,0(r4)
 10304b0:	28c00003 	ldbu	r3,0(r5)
 10304b4:	10c0151e 	bne	r2,r3,103050c <memcmp+0x74>
 10304b8:	31bfff84 	addi	r6,r6,-2
 10304bc:	01ffffc4 	movi	r7,-1
 10304c0:	00000406 	br	10304d4 <memcmp+0x3c>
 10304c4:	20800003 	ldbu	r2,0(r4)
 10304c8:	28c00003 	ldbu	r3,0(r5)
 10304cc:	31bfffc4 	addi	r6,r6,-1
 10304d0:	10c00e1e 	bne	r2,r3,103050c <memcmp+0x74>
 10304d4:	21000044 	addi	r4,r4,1
 10304d8:	29400044 	addi	r5,r5,1
 10304dc:	31fff91e 	bne	r6,r7,10304c4 <__alt_data_end+0xffff3004>
 10304e0:	0005883a 	mov	r2,zero
 10304e4:	f800283a 	ret
 10304e8:	20c00017 	ldw	r3,0(r4)
 10304ec:	28800017 	ldw	r2,0(r5)
 10304f0:	1880041e 	bne	r3,r2,1030504 <memcmp+0x6c>
 10304f4:	31bfff04 	addi	r6,r6,-4
 10304f8:	21000104 	addi	r4,r4,4
 10304fc:	29400104 	addi	r5,r5,4
 1030500:	39bff936 	bltu	r7,r6,10304e8 <__alt_data_end+0xffff3028>
 1030504:	303fe91e 	bne	r6,zero,10304ac <__alt_data_end+0xffff2fec>
 1030508:	003ff506 	br	10304e0 <__alt_data_end+0xffff3020>
 103050c:	10c5c83a 	sub	r2,r2,r3
 1030510:	f800283a 	ret

01030514 <__register_exitproc>:
 1030514:	008040f4 	movhi	r2,259
 1030518:	defffa04 	addi	sp,sp,-24
 103051c:	1089b404 	addi	r2,r2,9936
 1030520:	dc000315 	stw	r16,12(sp)
 1030524:	14000017 	ldw	r16,0(r2)
 1030528:	dc400415 	stw	r17,16(sp)
 103052c:	dfc00515 	stw	ra,20(sp)
 1030530:	80805217 	ldw	r2,328(r16)
 1030534:	2023883a 	mov	r17,r4
 1030538:	10003626 	beq	r2,zero,1030614 <__register_exitproc+0x100>
 103053c:	10c00117 	ldw	r3,4(r2)
 1030540:	010007c4 	movi	r4,31
 1030544:	20c00e16 	blt	r4,r3,1030580 <__register_exitproc+0x6c>
 1030548:	1a400044 	addi	r9,r3,1
 103054c:	8800211e 	bne	r17,zero,10305d4 <__register_exitproc+0xc0>
 1030550:	18c00084 	addi	r3,r3,2
 1030554:	18c7883a 	add	r3,r3,r3
 1030558:	18c7883a 	add	r3,r3,r3
 103055c:	12400115 	stw	r9,4(r2)
 1030560:	10c7883a 	add	r3,r2,r3
 1030564:	19400015 	stw	r5,0(r3)
 1030568:	0005883a 	mov	r2,zero
 103056c:	dfc00517 	ldw	ra,20(sp)
 1030570:	dc400417 	ldw	r17,16(sp)
 1030574:	dc000317 	ldw	r16,12(sp)
 1030578:	dec00604 	addi	sp,sp,24
 103057c:	f800283a 	ret
 1030580:	00800034 	movhi	r2,0
 1030584:	10800004 	addi	r2,r2,0
 1030588:	10002526 	beq	r2,zero,1030620 <__register_exitproc+0x10c>
 103058c:	01006404 	movi	r4,400
 1030590:	d9400015 	stw	r5,0(sp)
 1030594:	d9800115 	stw	r6,4(sp)
 1030598:	d9c00215 	stw	r7,8(sp)
 103059c:	00000000 	call	0 <__reset-0x1020000>
 10305a0:	d9400017 	ldw	r5,0(sp)
 10305a4:	d9800117 	ldw	r6,4(sp)
 10305a8:	d9c00217 	ldw	r7,8(sp)
 10305ac:	10001c26 	beq	r2,zero,1030620 <__register_exitproc+0x10c>
 10305b0:	80c05217 	ldw	r3,328(r16)
 10305b4:	10000115 	stw	zero,4(r2)
 10305b8:	02400044 	movi	r9,1
 10305bc:	10c00015 	stw	r3,0(r2)
 10305c0:	80805215 	stw	r2,328(r16)
 10305c4:	10006215 	stw	zero,392(r2)
 10305c8:	10006315 	stw	zero,396(r2)
 10305cc:	0007883a 	mov	r3,zero
 10305d0:	883fdf26 	beq	r17,zero,1030550 <__alt_data_end+0xffff3090>
 10305d4:	18d1883a 	add	r8,r3,r3
 10305d8:	4211883a 	add	r8,r8,r8
 10305dc:	1211883a 	add	r8,r2,r8
 10305e0:	41802215 	stw	r6,136(r8)
 10305e4:	01000044 	movi	r4,1
 10305e8:	11806217 	ldw	r6,392(r2)
 10305ec:	20c8983a 	sll	r4,r4,r3
 10305f0:	310cb03a 	or	r6,r6,r4
 10305f4:	11806215 	stw	r6,392(r2)
 10305f8:	41c04215 	stw	r7,264(r8)
 10305fc:	01800084 	movi	r6,2
 1030600:	89bfd31e 	bne	r17,r6,1030550 <__alt_data_end+0xffff3090>
 1030604:	11806317 	ldw	r6,396(r2)
 1030608:	3108b03a 	or	r4,r6,r4
 103060c:	11006315 	stw	r4,396(r2)
 1030610:	003fcf06 	br	1030550 <__alt_data_end+0xffff3090>
 1030614:	80805304 	addi	r2,r16,332
 1030618:	80805215 	stw	r2,328(r16)
 103061c:	003fc706 	br	103053c <__alt_data_end+0xffff307c>
 1030620:	00bfffc4 	movi	r2,-1
 1030624:	003fd106 	br	103056c <__alt_data_end+0xffff30ac>

01030628 <__call_exitprocs>:
 1030628:	008040f4 	movhi	r2,259
 103062c:	1089b404 	addi	r2,r2,9936
 1030630:	10800017 	ldw	r2,0(r2)
 1030634:	defff404 	addi	sp,sp,-48
 1030638:	dd800815 	stw	r22,32(sp)
 103063c:	d8800015 	stw	r2,0(sp)
 1030640:	10805204 	addi	r2,r2,328
 1030644:	dd000615 	stw	r20,24(sp)
 1030648:	dc800415 	stw	r18,16(sp)
 103064c:	dfc00b15 	stw	ra,44(sp)
 1030650:	df000a15 	stw	fp,40(sp)
 1030654:	ddc00915 	stw	r23,36(sp)
 1030658:	dd400715 	stw	r21,28(sp)
 103065c:	dcc00515 	stw	r19,20(sp)
 1030660:	dc400315 	stw	r17,12(sp)
 1030664:	dc000215 	stw	r16,8(sp)
 1030668:	2025883a 	mov	r18,r4
 103066c:	2829883a 	mov	r20,r5
 1030670:	d8800115 	stw	r2,4(sp)
 1030674:	05bfffc4 	movi	r22,-1
 1030678:	d8800017 	ldw	r2,0(sp)
 103067c:	14c05217 	ldw	r19,328(r2)
 1030680:	98001d26 	beq	r19,zero,10306f8 <__call_exitprocs+0xd0>
 1030684:	dd400117 	ldw	r21,4(sp)
 1030688:	98800117 	ldw	r2,4(r19)
 103068c:	173fffc4 	addi	fp,r2,-1
 1030690:	e0000d16 	blt	fp,zero,10306c8 <__call_exitprocs+0xa0>
 1030694:	14000044 	addi	r16,r2,1
 1030698:	8421883a 	add	r16,r16,r16
 103069c:	8421883a 	add	r16,r16,r16
 10306a0:	84402004 	addi	r17,r16,128
 10306a4:	9c63883a 	add	r17,r19,r17
 10306a8:	9c21883a 	add	r16,r19,r16
 10306ac:	a0001e26 	beq	r20,zero,1030728 <__call_exitprocs+0x100>
 10306b0:	80804017 	ldw	r2,256(r16)
 10306b4:	15001c26 	beq	r2,r20,1030728 <__call_exitprocs+0x100>
 10306b8:	e73fffc4 	addi	fp,fp,-1
 10306bc:	843fff04 	addi	r16,r16,-4
 10306c0:	8c7fff04 	addi	r17,r17,-4
 10306c4:	e5bff91e 	bne	fp,r22,10306ac <__alt_data_end+0xffff31ec>
 10306c8:	00800034 	movhi	r2,0
 10306cc:	10800004 	addi	r2,r2,0
 10306d0:	10000926 	beq	r2,zero,10306f8 <__call_exitprocs+0xd0>
 10306d4:	98800117 	ldw	r2,4(r19)
 10306d8:	1000311e 	bne	r2,zero,10307a0 <__call_exitprocs+0x178>
 10306dc:	98800017 	ldw	r2,0(r19)
 10306e0:	10003426 	beq	r2,zero,10307b4 <__call_exitprocs+0x18c>
 10306e4:	9809883a 	mov	r4,r19
 10306e8:	a8800015 	stw	r2,0(r21)
 10306ec:	00000000 	call	0 <__reset-0x1020000>
 10306f0:	acc00017 	ldw	r19,0(r21)
 10306f4:	983fe41e 	bne	r19,zero,1030688 <__alt_data_end+0xffff31c8>
 10306f8:	dfc00b17 	ldw	ra,44(sp)
 10306fc:	df000a17 	ldw	fp,40(sp)
 1030700:	ddc00917 	ldw	r23,36(sp)
 1030704:	dd800817 	ldw	r22,32(sp)
 1030708:	dd400717 	ldw	r21,28(sp)
 103070c:	dd000617 	ldw	r20,24(sp)
 1030710:	dcc00517 	ldw	r19,20(sp)
 1030714:	dc800417 	ldw	r18,16(sp)
 1030718:	dc400317 	ldw	r17,12(sp)
 103071c:	dc000217 	ldw	r16,8(sp)
 1030720:	dec00c04 	addi	sp,sp,48
 1030724:	f800283a 	ret
 1030728:	98800117 	ldw	r2,4(r19)
 103072c:	80c00017 	ldw	r3,0(r16)
 1030730:	10bfffc4 	addi	r2,r2,-1
 1030734:	17001526 	beq	r2,fp,103078c <__call_exitprocs+0x164>
 1030738:	80000015 	stw	zero,0(r16)
 103073c:	183fde26 	beq	r3,zero,10306b8 <__alt_data_end+0xffff31f8>
 1030740:	00800044 	movi	r2,1
 1030744:	1708983a 	sll	r4,r2,fp
 1030748:	98806217 	ldw	r2,392(r19)
 103074c:	9dc00117 	ldw	r23,4(r19)
 1030750:	2084703a 	and	r2,r4,r2
 1030754:	1000061e 	bne	r2,zero,1030770 <__call_exitprocs+0x148>
 1030758:	183ee83a 	callr	r3
 103075c:	98800117 	ldw	r2,4(r19)
 1030760:	15ffc51e 	bne	r2,r23,1030678 <__alt_data_end+0xffff31b8>
 1030764:	a8800017 	ldw	r2,0(r21)
 1030768:	14ffd326 	beq	r2,r19,10306b8 <__alt_data_end+0xffff31f8>
 103076c:	003fc206 	br	1030678 <__alt_data_end+0xffff31b8>
 1030770:	98806317 	ldw	r2,396(r19)
 1030774:	2084703a 	and	r2,r4,r2
 1030778:	1000061e 	bne	r2,zero,1030794 <__call_exitprocs+0x16c>
 103077c:	89400017 	ldw	r5,0(r17)
 1030780:	9009883a 	mov	r4,r18
 1030784:	183ee83a 	callr	r3
 1030788:	003ff406 	br	103075c <__alt_data_end+0xffff329c>
 103078c:	9f000115 	stw	fp,4(r19)
 1030790:	003fea06 	br	103073c <__alt_data_end+0xffff327c>
 1030794:	89000017 	ldw	r4,0(r17)
 1030798:	183ee83a 	callr	r3
 103079c:	003fef06 	br	103075c <__alt_data_end+0xffff329c>
 10307a0:	98800017 	ldw	r2,0(r19)
 10307a4:	982b883a 	mov	r21,r19
 10307a8:	1027883a 	mov	r19,r2
 10307ac:	983fb61e 	bne	r19,zero,1030688 <__alt_data_end+0xffff31c8>
 10307b0:	003fd106 	br	10306f8 <__alt_data_end+0xffff3238>
 10307b4:	0005883a 	mov	r2,zero
 10307b8:	003ffa06 	br	10307a4 <__alt_data_end+0xffff32e4>

010307bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10307bc:	defffd04 	addi	sp,sp,-12
 10307c0:	df000215 	stw	fp,8(sp)
 10307c4:	df000204 	addi	fp,sp,8
 10307c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10307cc:	0001883a 	nop
 10307d0:	e0bfff17 	ldw	r2,-4(fp)
 10307d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10307d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10307dc:	10000226 	beq	r2,zero,10307e8 <_exit+0x2c>
    ALT_SIM_FAIL();
 10307e0:	002af070 	cmpltui	zero,zero,43969
 10307e4:	00000106 	br	10307ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10307e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10307ec:	003fff06 	br	10307ec <__alt_data_end+0xffff332c>
