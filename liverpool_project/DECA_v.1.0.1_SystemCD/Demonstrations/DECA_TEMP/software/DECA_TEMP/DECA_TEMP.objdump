
DECA_TEMP.elf:     file format elf32-littlenios2
DECA_TEMP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01040240

Program Header:
    LOAD off    0x00001000 vaddr 0x01040000 paddr 0x01040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01040020 paddr 0x01040020 align 2**12
         filesz 0x0000fa70 memsz 0x0000fa70 flags r-x
    LOAD off    0x00010a90 vaddr 0x0104fa90 paddr 0x0105157c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013068 vaddr 0x01053068 paddr 0x01053068 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01040000  01040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  01040020  01040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f4f4  01040240  01040240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000035c  0104f734  0104f734  00010734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0104fa90  0105157c  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  01053068  01053068  00013068  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  010531c8  010531c8  0001257c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001257c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  000125a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023e1d  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009317  00000000  00000000  0003714d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b19d  00000000  00000000  00040464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002140  00000000  00000000  0004b604  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036ad  00000000  00000000  0004d744  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000179bc  00000000  00000000  00050df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000687b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001458  00000000  00000000  00068810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cec7  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006ceca  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ced4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ced5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006ced6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006ceda  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006cede  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006cee2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006ceeb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006cef4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0006cefd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0006cf06  2**0
                  CONTENTS, READONLY
 29 .jdi          00003ee6  00000000  00000000  0006cf37  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005a07c  00000000  00000000  00070e1d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01040000 l    d  .entry	00000000 .entry
01040020 l    d  .exceptions	00000000 .exceptions
01040240 l    d  .text	00000000 .text
0104f734 l    d  .rodata	00000000 .rodata
0104fa90 l    d  .rwdata	00000000 .rwdata
01053068 l    d  .bss	00000000 .bss
010531c8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DECA_TEMP_bsp//obj/HAL/src/crt0.o
01040288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0104f8de l     O .rodata	00000010 zeroes.4181
0104f8ee l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01042d5c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010448dc l     F .text	00000008 __fp_lock
010448e4 l     F .text	00000008 __fp_unlock
010448f8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0104fa90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0104fed4 l     O .rwdata	00000020 lc_ctype_charset
0104feb4 l     O .rwdata	00000020 lc_message_charset
0104fef4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0104f920 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01047d58 l     F .text	000000fc __sprint_r.part.0
0104fa54 l     O .rodata	00000010 blanks.4125
0104fa44 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0104a674 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0104cd3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0104ce5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0104ce88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0104cf88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0104d07c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0104d160 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0104d33c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0105156c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0104d5c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0104d710 l     F .text	00000038 alt_dev_reg
010504dc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0104da00 l     F .text	00000204 altera_avalon_jtag_uart_irq
0104dc04 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0104e224 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0104e5fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0104eaa8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0104ebe0 l     F .text	00000050 alt_get_errno
0104ec30 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0105309c g     O .bss	00000004 alt_instruction_exception_handler
01047398 g     F .text	00000074 _mprec_log10
01047484 g     F .text	0000008c __any_on
010496a8 g     F .text	00000054 _isatty_r
0104f92c g     O .rodata	00000028 __mprec_tinytens
0104d284 g     F .text	00000078 alt_main
01040aa8 g     F .text	000000b8 _puts_r
010530c8 g     O .bss	00000100 alt_irq
010496fc g     F .text	0000005c _lseek_r
0105157c g       *ABS*	00000000 __flash_rwdata_start
0104b908 g     F .text	00000084 .hidden __eqdf2
010531c8 g       *ABS*	00000000 __alt_heap_start
01040a6c g     F .text	0000003c printf
01049924 g     F .text	0000009c _wcrtomb_r
01047c50 g     F .text	0000005c __sseek
01044c2c g     F .text	00000010 __sinit
010497b4 g     F .text	00000154 __swbuf_r
010456a4 g     F .text	0000007c _setlocale_r
01044a98 g     F .text	00000064 __sfmoreglue
0104d31c g     F .text	00000020 __malloc_unlock
01046304 g     F .text	0000015c memmove
01044c14 g     F .text	00000018 _cleanup
01046584 g     F .text	000000a8 _Balloc
0104b98c g     F .text	000000e0 .hidden __gtdf2
0104eff0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01040000 g     F .entry	0000001c __reset
01040020 g       *ABS*	00000000 __flash_exceptions_start
01049650 g     F .text	00000058 _fstat_r
01053080 g     O .bss	00000004 errno
01047bcc g     F .text	00000008 __seofread
01053088 g     O .bss	00000004 alt_argv
0105953c g       *ABS*	00000000 _gp
0104d598 g     F .text	00000030 usleep
0105035c g     O .rwdata	00000180 alt_fd_list
0104f010 g     F .text	00000090 alt_find_dev
010461cc g     F .text	00000138 memcpy
010448ec g     F .text	0000000c _cleanup_r
0104cbc8 g     F .text	000000d0 .hidden __floatsidf
0104eb68 g     F .text	00000078 alt_io_redirect
0104ba6c g     F .text	000000e0 .hidden __ltdf2
0104f734 g       *ABS*	00000000 __DTOR_END__
01040b60 g     F .text	00000014 puts
0104f2f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01047ab0 g     F .text	00000074 __fpclassifyd
010472f4 g     F .text	000000a4 __ratio
010491c8 g     F .text	00000024 __vfiprintf_internal
0104de00 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01040a40 g     F .text	0000002c _printf_r
0104a790 g     F .text	00000008 .hidden __udivsi3
0104cfd8 g     F .text	000000a4 isatty
0104f97c g     O .rodata	000000c8 __mprec_tens
01045720 g     F .text	0000000c __locale_charset
0104f268 g     F .text	0000008c alt_icache_flush
0105307c g     O .bss	00000004 __malloc_top_pad
01051544 g     O .rwdata	00000004 __mb_cur_max
01045750 g     F .text	0000000c _localeconv_r
01046984 g     F .text	0000003c __i2b
01045090 g     F .text	000004a4 __sfvwrite_r
01047b24 g     F .text	00000054 _sbrk_r
01049758 g     F .text	0000005c _read_r
01051564 g     O .rwdata	00000004 alt_max_fd
01049360 g     F .text	00000100 _fclose_r
010448ac g     F .text	00000030 fflush
01053078 g     O .bss	00000004 __malloc_max_sbrked_mem
010408cc g     F .text	00000110 .hidden __extendsfdf2
0104a7a0 g     F .text	0000089c .hidden __adddf3
0104709c g     F .text	0000011c __b2d
0104a0e4 g     F .text	00000590 .hidden __umoddi3
0104d1b0 g     F .text	000000d4 lseek
0105153c g     O .rwdata	00000004 _global_impure_ptr
01047510 g     F .text	000005a0 _realloc_r
010531c8 g       *ABS*	00000000 __bss_end
0104e9b8 g     F .text	000000f0 alt_iic_isr_register
0104eeec g     F .text	00000104 alt_tick
01049b24 g     F .text	000005c0 .hidden __udivdi3
01049474 g     F .text	00000184 _fputwc_r
0104f954 g     O .rodata	00000028 __mprec_bigtens
01046768 g     F .text	00000104 __s2b
0104cc98 g     F .text	000000a4 .hidden __floatunsidf
01046e44 g     F .text	00000060 __mcmp
01044c4c g     F .text	00000018 __fp_lock_all
0104e96c g     F .text	0000004c alt_ic_irq_enabled
0104ee54 g     F .text	00000098 alt_alarm_stop
01053090 g     O .bss	00000004 alt_irq_active
010400fc g     F .exceptions	000000d0 alt_irq_handler
01050334 g     O .rwdata	00000028 alt_dev_null
0104e5b8 g     F .text	00000044 alt_dcache_flush_all
0104686c g     F .text	00000068 __hi0bits
0104cb40 g     F .text	00000088 .hidden __fixdfsi
0105157c g       *ABS*	00000000 __ram_rwdata_end
0105155c g     O .rwdata	00000008 alt_dev_list
0104d618 g     F .text	000000f8 write
0104fa90 g       *ABS*	00000000 __ram_rodata_end
0104ced8 g     F .text	000000b0 fstat
0104ba6c g     F .text	000000e0 .hidden __ledf2
01046bbc g     F .text	00000140 __pow5mult
01047e6c g     F .text	0000135c ___vfiprintf_internal_r
01053070 g     O .bss	00000004 __nlocale_changed
0104a798 g     F .text	00000008 .hidden __umodsi3
010531c8 g       *ABS*	00000000 end
0104d93c g     F .text	000000c4 altera_avalon_jtag_uart_init
010401cc g     F .exceptions	00000074 alt_instruction_exception_entry
0104f734 g       *ABS*	00000000 __CTOR_LIST__
01060000 g       *ABS*	00000000 __alt_stack_pointer
0104e298 g     F .text	00000088 alt_avalon_timer_sc_init
010409dc g     F .text	00000064 .hidden __clzsi2
0104e00c g     F .text	00000218 altera_avalon_jtag_uart_write
01044c3c g     F .text	00000004 __sfp_lock_acquire
010460e4 g     F .text	000000e8 memchr
01040c0c g     F .text	00001ffc ___vfprintf_internal_r
01044da0 g     F .text	000002f0 _free_r
0104572c g     F .text	00000010 __locale_mb_cur_max
0104f56c g     F .text	00000194 __call_exitprocs
0105306c g     O .bss	00000004 __mlocale_changed
01051548 g     O .rwdata	00000004 __malloc_sbrk_base
01040240 g     F .text	0000004c _start
01053094 g     O .bss	00000004 _alt_tick_rate
01046cfc g     F .text	00000148 __lshift
01053098 g     O .bss	00000004 _alt_nticks
0104d38c g     F .text	000000fc read
0104d77c g     F .text	0000005c alt_sys_init
0104f458 g     F .text	00000114 __register_exitproc
010469c0 g     F .text	000001fc __multiply
0104dcac g     F .text	00000068 altera_avalon_jtag_uart_close
0104fa90 g       *ABS*	00000000 __ram_rwdata_start
0104f734 g       *ABS*	00000000 __ram_rodata_start
010530a0 g     O .bss	00000028 __malloc_current_mallinfo
010471b8 g     F .text	0000013c __d2b
0104d7d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0104f1b4 g     F .text	000000b4 alt_get_fd
0104e460 g     F .text	00000158 alt_busy_sleep
01049248 g     F .text	00000054 _close_r
0104f3dc g     F .text	0000007c memcmp
0104d898 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
010531c8 g       *ABS*	00000000 __alt_stack_base
0104d8e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01042c2c g     F .text	00000130 __swsetup_r
0104b03c g     F .text	000008cc .hidden __divdf3
01044afc g     F .text	00000118 __sfp
0104740c g     F .text	00000078 __copybits
0104ff2c g     O .rwdata	00000408 __malloc_av_
01044c48 g     F .text	00000004 __sinit_lock_release
0104bb4c g     F .text	00000724 .hidden __muldf3
01047b78 g     F .text	00000054 __sread
0104f0a0 g     F .text	00000114 alt_find_file
0104e64c g     F .text	000000a4 alt_dev_llist_insert
0104d2fc g     F .text	00000020 __malloc_lock
0104d4e8 g     F .text	000000b0 sbrk
01044684 g     F .text	00000228 _fflush_r
0104929c g     F .text	000000c4 _calloc_r
01053068 g       *ABS*	00000000 __bss_start
01046460 g     F .text	00000124 memset
0104028c g     F .text	0000010c main
0105308c g     O .bss	00000004 alt_envp
01053074 g     O .bss	00000004 __malloc_max_total_mem
0104d838 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01049908 g     F .text	0000001c __swbuf
01047cac g     F .text	00000008 __sclose
01060000 g       *ABS*	00000000 __alt_heap_limit
01049460 g     F .text	00000014 fclose
01042f5c g     F .text	00001728 _dtoa_r
0104593c g     F .text	000007a8 _malloc_r
01049a98 g     F .text	00000030 __ascii_wctomb
01051568 g     O .rwdata	00000004 alt_errno
01045534 g     F .text	000000b8 _fwalk
0104a6e0 g     F .text	00000054 .hidden __divsi3
01044c7c g     F .text	00000124 _malloc_trim_r
0104f734 g       *ABS*	00000000 __CTOR_END__
01040398 g     F .text	00000424 .hidden __mulsf3
01047cb4 g     F .text	000000a4 strcmp
0104f734 g       *ABS*	00000000 __flash_rodata_start
0104f734 g       *ABS*	00000000 __DTOR_LIST__
0104b908 g     F .text	00000084 .hidden __nedf2
0104d748 g     F .text	00000034 alt_irq_init
0104d488 g     F .text	00000060 alt_release_fd
0104f798 g     O .rodata	00000100 .hidden __clz_tab
01053068 g     O .bss	00000004 _PathLocale
0104f390 g     F .text	00000014 atexit
010491ec g     F .text	0000005c _write_r
0104575c g     F .text	0000001c setlocale
01051540 g     O .rwdata	00000004 _impure_ptr
01053084 g     O .bss	00000004 alt_argc
0104e74c g     F .text	0000005c _do_dtors
01045748 g     F .text	00000008 __locale_cjk_lang
01040020 g       .exceptions	00000000 alt_irq_entry
0104703c g     F .text	00000060 __ulp
01044c64 g     F .text	00000018 __fp_unlock_all
01051554 g     O .rwdata	00000008 alt_fs_list
01040020 g       *ABS*	00000000 __ram_exceptions_start
01045778 g     F .text	0000000c localeconv
01040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0104e7d8 g     F .text	00000050 alt_ic_isr_register
0105157c g       *ABS*	00000000 _edata
010531c8 g       *ABS*	00000000 _end
01040240 g       *ABS*	00000000 __ram_exceptions_end
0104dd14 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0104e8c8 g     F .text	000000a4 alt_ic_irq_disable
01047bd4 g     F .text	0000007c __swrite
0105154c g     O .rwdata	00000004 __malloc_trim_threshold
0104573c g     F .text	0000000c __locale_msgcharset
0104f3a4 g     F .text	00000038 exit
010455ec g     F .text	000000b8 _fwalk_reent
010407bc g     F .text	00000110 .hidden __floatunsisf
01046ea4 g     F .text	00000198 __mdiff
0104a734 g     F .text	0000005c .hidden __modsi3
01060000 g       *ABS*	00000000 __alt_data_end
01040020 g     F .exceptions	00000000 alt_exception
01044c40 g     F .text	00000004 __sfp_lock_release
0104f700 g     F .text	00000034 _exit
0104e320 g     F .text	00000140 alt_alarm_start
01045784 g     F .text	000001b8 __smakebuf_r
01040b74 g     F .text	00000098 strlen
0104ecfc g     F .text	00000158 open
0104b98c g     F .text	000000e0 .hidden __gedf2
01051550 g     O .rwdata	00000004 __wctomb
01047e54 g     F .text	00000018 __sprint_r
0104e7a8 g     F .text	00000030 alt_icache_flush_all
01051570 g     O .rwdata	00000004 alt_priority_mask
0104e828 g     F .text	000000a0 alt_ic_irq_enable
01042c08 g     F .text	00000024 __vfprintf_internal
01049ac8 g     F .text	0000005c _wctomb_r
0104c270 g     F .text	000008d0 .hidden __subdf3
010468d4 g     F .text	000000b0 __lo0bits
01051574 g     O .rwdata	00000008 alt_alarm_list
0104e6f0 g     F .text	0000005c _do_ctors
010499c0 g     F .text	000000d8 wcrtomb
0104cd8c g     F .text	000000d0 close
0104d0e0 g     F .text	00000080 alt_load
010495f8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
01044c44 g     F .text	00000004 __sinit_lock_acquire
01046654 g     F .text	00000114 __multadd
0104662c g     F .text	00000028 _Bfree



Disassembly of section .entry:

01040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 104000c:	00bffd16 	blt	zero,r2,1040004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1040010:	00404134 	movhi	at,260
    ori r1, r1, %lo(_start)
 1040014:	08409014 	ori	at,at,576
    jmp r1
 1040018:	0800683a 	jmp	at
 104001c:	00000000 	call	0 <__reset-0x1040000>

Disassembly of section .exceptions:

01040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 104002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 104003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 104004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 104005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 104006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 104007c:	10000326 	beq	r2,zero,104008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1040080:	20000226 	beq	r4,zero,104008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1040084:	10400fc0 	call	10400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1040088:	00000706 	br	10400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 104008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1040098:	10401cc0 	call	10401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 104009c:	1000021e 	bne	r2,zero,10400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10400f8:	ef80083a 	eret

010400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10400fc:	defff904 	addi	sp,sp,-28
 1040100:	dfc00615 	stw	ra,24(sp)
 1040104:	df000515 	stw	fp,20(sp)
 1040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 104010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1040110:	0005313a 	rdctl	r2,ipending
 1040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 104011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1040124:	00800044 	movi	r2,1
 1040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104012c:	e0fffb17 	ldw	r3,-20(fp)
 1040130:	e0bffc17 	ldw	r2,-16(fp)
 1040134:	1884703a 	and	r2,r3,r2
 1040138:	10001426 	beq	r2,zero,104018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 104013c:	00804174 	movhi	r2,261
 1040140:	108c3204 	addi	r2,r2,12488
 1040144:	e0fffd17 	ldw	r3,-12(fp)
 1040148:	180690fa 	slli	r3,r3,3
 104014c:	10c5883a 	add	r2,r2,r3
 1040150:	10c00017 	ldw	r3,0(r2)
 1040154:	00804174 	movhi	r2,261
 1040158:	108c3204 	addi	r2,r2,12488
 104015c:	e13ffd17 	ldw	r4,-12(fp)
 1040160:	200890fa 	slli	r4,r4,3
 1040164:	1105883a 	add	r2,r2,r4
 1040168:	10800104 	addi	r2,r2,4
 104016c:	10800017 	ldw	r2,0(r2)
 1040170:	1009883a 	mov	r4,r2
 1040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 104017c:	0005313a 	rdctl	r2,ipending
 1040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1040184:	e0bfff17 	ldw	r2,-4(fp)
 1040188:	00000706 	br	10401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 104018c:	e0bffc17 	ldw	r2,-16(fp)
 1040190:	1085883a 	add	r2,r2,r2
 1040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1040198:	e0bffd17 	ldw	r2,-12(fp)
 104019c:	10800044 	addi	r2,r2,1
 10401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10401a4:	003fe106 	br	104012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 10401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10401ac:	e0bffb17 	ldw	r2,-20(fp)
 10401b0:	103fdb1e 	bne	r2,zero,1040120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10401b4:	0001883a 	nop
}
 10401b8:	e037883a 	mov	sp,fp
 10401bc:	dfc00117 	ldw	ra,4(sp)
 10401c0:	df000017 	ldw	fp,0(sp)
 10401c4:	dec00204 	addi	sp,sp,8
 10401c8:	f800283a 	ret

010401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10401cc:	defffb04 	addi	sp,sp,-20
 10401d0:	dfc00415 	stw	ra,16(sp)
 10401d4:	df000315 	stw	fp,12(sp)
 10401d8:	df000304 	addi	fp,sp,12
 10401dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10401e0:	000531fa 	rdctl	r2,exception
 10401e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10401e8:	e0bffd17 	ldw	r2,-12(fp)
 10401ec:	10801f0c 	andi	r2,r2,124
 10401f0:	1004d0ba 	srli	r2,r2,2
 10401f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10401f8:	0005333a 	rdctl	r2,badaddr
 10401fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1040200:	d0a6d817 	ldw	r2,-25760(gp)
 1040204:	10000726 	beq	r2,zero,1040224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1040208:	d0a6d817 	ldw	r2,-25760(gp)
 104020c:	e0fffd17 	ldw	r3,-12(fp)
 1040210:	1809883a 	mov	r4,r3
 1040214:	e17fff17 	ldw	r5,-4(fp)
 1040218:	e1bffe17 	ldw	r6,-8(fp)
 104021c:	103ee83a 	callr	r2
 1040220:	00000206 	br	104022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1040224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1040228:	0005883a 	mov	r2,zero
}
 104022c:	e037883a 	mov	sp,fp
 1040230:	dfc00117 	ldw	ra,4(sp)
 1040234:	df000017 	ldw	fp,0(sp)
 1040238:	dec00204 	addi	sp,sp,8
 104023c:	f800283a 	ret

Disassembly of section .text:

01040240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1040240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1040244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 1040248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 104024c:	00bffd16 	blt	zero,r2,1040244 <__alt_data_end+0xfffe0244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1040250:	06c041b4 	movhi	sp,262
    ori sp, sp, %lo(__alt_stack_pointer)
 1040254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 1040258:	06804174 	movhi	gp,261
    ori gp, gp, %lo(_gp)
 104025c:	d6a54f14 	ori	gp,gp,38204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1040260:	00804174 	movhi	r2,261
    ori r2, r2, %lo(__bss_start)
 1040264:	108c1a14 	ori	r2,r2,12392

    movhi r3, %hi(__bss_end)
 1040268:	00c04174 	movhi	r3,261
    ori r3, r3, %lo(__bss_end)
 104026c:	18cc7214 	ori	r3,r3,12744

    beq r2, r3, 1f
 1040270:	10c00326 	beq	r2,r3,1040280 <_start+0x40>

0:
    stw zero, (r2)
 1040274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1040278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 104027c:	10fffd36 	bltu	r2,r3,1040274 <__alt_data_end+0xfffe0274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1040280:	104d0e00 	call	104d0e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1040284:	104d2840 	call	104d284 <alt_main>

01040288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1040288:	003fff06 	br	1040288 <__alt_data_end+0xfffe0288>

0104028c <main>:
#define WRITE_MODE       1
#define READ_STATUS      2
#define READ_DATA	     3

int main()
{
 104028c:	defffb04 	addi	sp,sp,-20
 1040290:	dfc00415 	stw	ra,16(sp)
 1040294:	df000315 	stw	fp,12(sp)
 1040298:	df000304 	addi	fp,sp,12
	alt_u16 data_id,data_temp,temp_result;
	float temp_value;
	printf ("======== DECA Temperature Sensor Test ========\n\n");
 104029c:	01004174 	movhi	r4,261
 10402a0:	213dcd04 	addi	r4,r4,-2252
 10402a4:	1040b600 	call	1040b60 <puts>

	IOWR(TEMP_CONTROLLER_BASE, WRITE_MODE, 0xffff);  //set shutdown
 10402a8:	00ffffd4 	movui	r3,65535
 10402ac:	00800d04 	movi	r2,52
 10402b0:	10c00035 	stwio	r3,0(r2)
    while(!IORD(TEMP_CONTROLLER_BASE, READ_STATUS) ); //write over
 10402b4:	0001883a 	nop
 10402b8:	00800e04 	movi	r2,56
 10402bc:	10800037 	ldwio	r2,0(r2)
 10402c0:	103ffd26 	beq	r2,zero,10402b8 <__alt_data_end+0xfffe02b8>

	IOWR(TEMP_CONTROLLER_BASE, WRITE_MODE, 0x00);  //set Conversion Mode
 10402c4:	0007883a 	mov	r3,zero
 10402c8:	00800d04 	movi	r2,52
 10402cc:	10c00035 	stwio	r3,0(r2)
    while(!IORD(TEMP_CONTROLLER_BASE, READ_STATUS) ); //write over
 10402d0:	0001883a 	nop
 10402d4:	00800e04 	movi	r2,56
 10402d8:	10800037 	ldwio	r2,0(r2)
 10402dc:	103ffd26 	beq	r2,zero,10402d4 <__alt_data_end+0xfffe02d4>
    data_id = IORD(TEMP_CONTROLLER_BASE, READ_DATA); //manufacturer's/DeviceID information
 10402e0:	00800f04 	movi	r2,60
 10402e4:	10800037 	ldwio	r2,0(r2)
 10402e8:	e0bffd0d 	sth	r2,-12(fp)
    if(data_id!=0x800f)
 10402ec:	e0fffd0b 	ldhu	r3,-12(fp)
 10402f0:	00a003d4 	movui	r2,32783
 10402f4:	18800526 	beq	r3,r2,104030c <main+0x80>
     printf("READ ID Fail! ID: 0x%x\n",data_id);
 10402f8:	e0bffd0b 	ldhu	r2,-12(fp)
 10402fc:	01004174 	movhi	r4,261
 1040300:	213dd904 	addi	r4,r4,-2204
 1040304:	100b883a 	mov	r5,r2
 1040308:	1040a6c0 	call	1040a6c <printf>

    while(1){

    	IOWR(TEMP_CONTROLLER_BASE, WRITE_MODE, 0x00);  //set Conversion Mode
 104030c:	0007883a 	mov	r3,zero
 1040310:	00800d04 	movi	r2,52
 1040314:	10c00035 	stwio	r3,0(r2)
        while(!IORD(TEMP_CONTROLLER_BASE, READ_STATUS) ); //write over
 1040318:	0001883a 	nop
 104031c:	00800e04 	movi	r2,56
 1040320:	10800037 	ldwio	r2,0(r2)
 1040324:	103ffd26 	beq	r2,zero,104031c <__alt_data_end+0xfffe031c>

        data_temp = IORD(TEMP_CONTROLLER_BASE, READ_DATA);
 1040328:	00800f04 	movi	r2,60
 104032c:	10800037 	ldwio	r2,0(r2)
 1040330:	e0bffd8d 	sth	r2,-10(fp)
       // printf("read data : 0x%x\n",data_temp);
        temp_result=data_temp>>2;
 1040334:	e0bffd8b 	ldhu	r2,-10(fp)
 1040338:	1004d0ba 	srli	r2,r2,2
 104033c:	e0bffe0d 	sth	r2,-8(fp)
        temp_value=(float)temp_result* 0.03125;
 1040340:	e0bffe0b 	ldhu	r2,-8(fp)
 1040344:	1009883a 	mov	r4,r2
 1040348:	10407bc0 	call	10407bc <__floatunsisf>
 104034c:	1007883a 	mov	r3,r2
 1040350:	1809883a 	mov	r4,r3
 1040354:	014f4034 	movhi	r5,15616
 1040358:	10403980 	call	1040398 <__mulsf3>
 104035c:	1007883a 	mov	r3,r2
 1040360:	e0ffff15 	stw	r3,-4(fp)
        printf("Board temperature: %.2f*C \n",temp_value);
 1040364:	e13fff17 	ldw	r4,-4(fp)
 1040368:	10408cc0 	call	10408cc <__extendsfdf2>
 104036c:	100d883a 	mov	r6,r2
 1040370:	180f883a 	mov	r7,r3
 1040374:	01004174 	movhi	r4,261
 1040378:	213ddf04 	addi	r4,r4,-2180
 104037c:	300b883a 	mov	r5,r6
 1040380:	380d883a 	mov	r6,r7
 1040384:	1040a6c0 	call	1040a6c <printf>
        usleep(300*1000);
 1040388:	01000174 	movhi	r4,5
 104038c:	2124f804 	addi	r4,r4,-27680
 1040390:	104d5980 	call	104d598 <usleep>
    }
 1040394:	003fdd06 	br	104030c <__alt_data_end+0xfffe030c>

01040398 <__mulsf3>:
 1040398:	defff504 	addi	sp,sp,-44
 104039c:	dc400215 	stw	r17,8(sp)
 10403a0:	2022d5fa 	srli	r17,r4,23
 10403a4:	dd400615 	stw	r21,24(sp)
 10403a8:	202ad7fa 	srli	r21,r4,31
 10403ac:	dc000115 	stw	r16,4(sp)
 10403b0:	04002034 	movhi	r16,128
 10403b4:	df000915 	stw	fp,36(sp)
 10403b8:	dd000515 	stw	r20,20(sp)
 10403bc:	843fffc4 	addi	r16,r16,-1
 10403c0:	dfc00a15 	stw	ra,40(sp)
 10403c4:	ddc00815 	stw	r23,32(sp)
 10403c8:	dd800715 	stw	r22,28(sp)
 10403cc:	dcc00415 	stw	r19,16(sp)
 10403d0:	dc800315 	stw	r18,12(sp)
 10403d4:	8c403fcc 	andi	r17,r17,255
 10403d8:	8120703a 	and	r16,r16,r4
 10403dc:	a829883a 	mov	r20,r21
 10403e0:	af003fcc 	andi	fp,r21,255
 10403e4:	88005026 	beq	r17,zero,1040528 <__mulsf3+0x190>
 10403e8:	00803fc4 	movi	r2,255
 10403ec:	88802f26 	beq	r17,r2,10404ac <__mulsf3+0x114>
 10403f0:	84002034 	orhi	r16,r16,128
 10403f4:	802090fa 	slli	r16,r16,3
 10403f8:	8c7fe044 	addi	r17,r17,-127
 10403fc:	0025883a 	mov	r18,zero
 1040400:	002f883a 	mov	r23,zero
 1040404:	2804d5fa 	srli	r2,r5,23
 1040408:	282cd7fa 	srli	r22,r5,31
 104040c:	01002034 	movhi	r4,128
 1040410:	213fffc4 	addi	r4,r4,-1
 1040414:	10803fcc 	andi	r2,r2,255
 1040418:	2166703a 	and	r19,r4,r5
 104041c:	b1803fcc 	andi	r6,r22,255
 1040420:	10004926 	beq	r2,zero,1040548 <__mulsf3+0x1b0>
 1040424:	00c03fc4 	movi	r3,255
 1040428:	10c04326 	beq	r2,r3,1040538 <__mulsf3+0x1a0>
 104042c:	99402034 	orhi	r5,r19,128
 1040430:	282690fa 	slli	r19,r5,3
 1040434:	10bfe044 	addi	r2,r2,-127
 1040438:	000b883a 	mov	r5,zero
 104043c:	8885883a 	add	r2,r17,r2
 1040440:	2c86b03a 	or	r3,r5,r18
 1040444:	010003c4 	movi	r4,15
 1040448:	adaaf03a 	xor	r21,r21,r22
 104044c:	12000044 	addi	r8,r2,1
 1040450:	20c06536 	bltu	r4,r3,10405e8 <__mulsf3+0x250>
 1040454:	180690ba 	slli	r3,r3,2
 1040458:	01004134 	movhi	r4,260
 104045c:	21011b04 	addi	r4,r4,1132
 1040460:	1907883a 	add	r3,r3,r4
 1040464:	18c00017 	ldw	r3,0(r3)
 1040468:	1800683a 	jmp	r3
 104046c:	010405e8 	cmpgeui	r4,zero,4119
 1040470:	010406b4 	movhi	r4,4122
 1040474:	010406b4 	movhi	r4,4122
 1040478:	010406c4 	movi	r4,4123
 104047c:	010404bc 	xorhi	r4,zero,4114
 1040480:	010404bc 	xorhi	r4,zero,4114
 1040484:	010405d4 	movui	r4,4119
 1040488:	010406c4 	movi	r4,4123
 104048c:	010404bc 	xorhi	r4,zero,4114
 1040490:	010405d4 	movui	r4,4119
 1040494:	010404bc 	xorhi	r4,zero,4114
 1040498:	010406c4 	movi	r4,4123
 104049c:	010404c0 	call	10404c <__reset-0xf3bfb4>
 10404a0:	010404c0 	call	10404c <__reset-0xf3bfb4>
 10404a4:	010404c0 	call	10404c <__reset-0xf3bfb4>
 10404a8:	010406d4 	movui	r4,4123
 10404ac:	8000311e 	bne	r16,zero,1040574 <__mulsf3+0x1dc>
 10404b0:	04800204 	movi	r18,8
 10404b4:	05c00084 	movi	r23,2
 10404b8:	003fd206 	br	1040404 <__alt_data_end+0xfffe0404>
 10404bc:	a839883a 	mov	fp,r21
 10404c0:	00800084 	movi	r2,2
 10404c4:	b880231e 	bne	r23,r2,1040554 <__mulsf3+0x1bc>
 10404c8:	e500004c 	andi	r20,fp,1
 10404cc:	00ffffc4 	movi	r3,-1
 10404d0:	0009883a 	mov	r4,zero
 10404d4:	18c03fcc 	andi	r3,r3,255
 10404d8:	180695fa 	slli	r3,r3,23
 10404dc:	a0803fcc 	andi	r2,r20,255
 10404e0:	04002034 	movhi	r16,128
 10404e4:	100497fa 	slli	r2,r2,31
 10404e8:	843fffc4 	addi	r16,r16,-1
 10404ec:	2420703a 	and	r16,r4,r16
 10404f0:	80e0b03a 	or	r16,r16,r3
 10404f4:	8084b03a 	or	r2,r16,r2
 10404f8:	dfc00a17 	ldw	ra,40(sp)
 10404fc:	df000917 	ldw	fp,36(sp)
 1040500:	ddc00817 	ldw	r23,32(sp)
 1040504:	dd800717 	ldw	r22,28(sp)
 1040508:	dd400617 	ldw	r21,24(sp)
 104050c:	dd000517 	ldw	r20,20(sp)
 1040510:	dcc00417 	ldw	r19,16(sp)
 1040514:	dc800317 	ldw	r18,12(sp)
 1040518:	dc400217 	ldw	r17,8(sp)
 104051c:	dc000117 	ldw	r16,4(sp)
 1040520:	dec00b04 	addi	sp,sp,44
 1040524:	f800283a 	ret
 1040528:	8000151e 	bne	r16,zero,1040580 <__mulsf3+0x1e8>
 104052c:	04800104 	movi	r18,4
 1040530:	05c00044 	movi	r23,1
 1040534:	003fb306 	br	1040404 <__alt_data_end+0xfffe0404>
 1040538:	980b003a 	cmpeq	r5,r19,zero
 104053c:	00c000c4 	movi	r3,3
 1040540:	194bc83a 	sub	r5,r3,r5
 1040544:	003fbd06 	br	104043c <__alt_data_end+0xfffe043c>
 1040548:	9800181e 	bne	r19,zero,10405ac <__mulsf3+0x214>
 104054c:	01400044 	movi	r5,1
 1040550:	003fba06 	br	104043c <__alt_data_end+0xfffe043c>
 1040554:	008000c4 	movi	r2,3
 1040558:	b8809226 	beq	r23,r2,10407a4 <__mulsf3+0x40c>
 104055c:	00800044 	movi	r2,1
 1040560:	b880771e 	bne	r23,r2,1040740 <__mulsf3+0x3a8>
 1040564:	e0a8703a 	and	r20,fp,r2
 1040568:	0007883a 	mov	r3,zero
 104056c:	0009883a 	mov	r4,zero
 1040570:	003fd806 	br	10404d4 <__alt_data_end+0xfffe04d4>
 1040574:	04800304 	movi	r18,12
 1040578:	05c000c4 	movi	r23,3
 104057c:	003fa106 	br	1040404 <__alt_data_end+0xfffe0404>
 1040580:	8009883a 	mov	r4,r16
 1040584:	d9400015 	stw	r5,0(sp)
 1040588:	10409dc0 	call	10409dc <__clzsi2>
 104058c:	10fffec4 	addi	r3,r2,-5
 1040590:	047fe284 	movi	r17,-118
 1040594:	80e0983a 	sll	r16,r16,r3
 1040598:	88a3c83a 	sub	r17,r17,r2
 104059c:	0025883a 	mov	r18,zero
 10405a0:	002f883a 	mov	r23,zero
 10405a4:	d9400017 	ldw	r5,0(sp)
 10405a8:	003f9606 	br	1040404 <__alt_data_end+0xfffe0404>
 10405ac:	9809883a 	mov	r4,r19
 10405b0:	d9800015 	stw	r6,0(sp)
 10405b4:	10409dc0 	call	10409dc <__clzsi2>
 10405b8:	10fffec4 	addi	r3,r2,-5
 10405bc:	98e6983a 	sll	r19,r19,r3
 10405c0:	00ffe284 	movi	r3,-118
 10405c4:	1885c83a 	sub	r2,r3,r2
 10405c8:	000b883a 	mov	r5,zero
 10405cc:	d9800017 	ldw	r6,0(sp)
 10405d0:	003f9a06 	br	104043c <__alt_data_end+0xfffe043c>
 10405d4:	01002034 	movhi	r4,128
 10405d8:	0029883a 	mov	r20,zero
 10405dc:	213fffc4 	addi	r4,r4,-1
 10405e0:	00ffffc4 	movi	r3,-1
 10405e4:	003fbb06 	br	10404d4 <__alt_data_end+0xfffe04d4>
 10405e8:	8006d43a 	srli	r3,r16,16
 10405ec:	9812d43a 	srli	r9,r19,16
 10405f0:	843fffcc 	andi	r16,r16,65535
 10405f4:	997fffcc 	andi	r5,r19,65535
 10405f8:	2c0f383a 	mul	r7,r5,r16
 10405fc:	28cb383a 	mul	r5,r5,r3
 1040600:	4c21383a 	mul	r16,r9,r16
 1040604:	380cd43a 	srli	r6,r7,16
 1040608:	48d3383a 	mul	r9,r9,r3
 104060c:	2c21883a 	add	r16,r5,r16
 1040610:	8187883a 	add	r3,r16,r6
 1040614:	1940022e 	bgeu	r3,r5,1040620 <__mulsf3+0x288>
 1040618:	01000074 	movhi	r4,1
 104061c:	4913883a 	add	r9,r9,r4
 1040620:	1808943a 	slli	r4,r3,16
 1040624:	39ffffcc 	andi	r7,r7,65535
 1040628:	1806d43a 	srli	r3,r3,16
 104062c:	21c9883a 	add	r4,r4,r7
 1040630:	202091ba 	slli	r16,r4,6
 1040634:	48c7883a 	add	r3,r9,r3
 1040638:	2008d6ba 	srli	r4,r4,26
 104063c:	180691ba 	slli	r3,r3,6
 1040640:	8020c03a 	cmpne	r16,r16,zero
 1040644:	8120b03a 	or	r16,r16,r4
 1040648:	80e0b03a 	or	r16,r16,r3
 104064c:	80c2002c 	andhi	r3,r16,2048
 1040650:	18000426 	beq	r3,zero,1040664 <__mulsf3+0x2cc>
 1040654:	8006d07a 	srli	r3,r16,1
 1040658:	8400004c 	andi	r16,r16,1
 104065c:	4005883a 	mov	r2,r8
 1040660:	80e0b03a 	or	r16,r16,r3
 1040664:	10c01fc4 	addi	r3,r2,127
 1040668:	00c02d0e 	bge	zero,r3,1040720 <__mulsf3+0x388>
 104066c:	810001cc 	andi	r4,r16,7
 1040670:	20000426 	beq	r4,zero,1040684 <__mulsf3+0x2ec>
 1040674:	814003cc 	andi	r5,r16,15
 1040678:	01000104 	movi	r4,4
 104067c:	29000126 	beq	r5,r4,1040684 <__mulsf3+0x2ec>
 1040680:	8121883a 	add	r16,r16,r4
 1040684:	8102002c 	andhi	r4,r16,2048
 1040688:	20000426 	beq	r4,zero,104069c <__mulsf3+0x304>
 104068c:	10c02004 	addi	r3,r2,128
 1040690:	00be0034 	movhi	r2,63488
 1040694:	10bfffc4 	addi	r2,r2,-1
 1040698:	80a0703a 	and	r16,r16,r2
 104069c:	00803f84 	movi	r2,254
 10406a0:	10c01b0e 	bge	r2,r3,1040710 <__mulsf3+0x378>
 10406a4:	ad00004c 	andi	r20,r21,1
 10406a8:	00ffffc4 	movi	r3,-1
 10406ac:	0009883a 	mov	r4,zero
 10406b0:	003f8806 	br	10404d4 <__alt_data_end+0xfffe04d4>
 10406b4:	9821883a 	mov	r16,r19
 10406b8:	a839883a 	mov	fp,r21
 10406bc:	282f883a 	mov	r23,r5
 10406c0:	003f7f06 	br	10404c0 <__alt_data_end+0xfffe04c0>
 10406c4:	9821883a 	mov	r16,r19
 10406c8:	3039883a 	mov	fp,r6
 10406cc:	282f883a 	mov	r23,r5
 10406d0:	003f7b06 	br	10404c0 <__alt_data_end+0xfffe04c0>
 10406d4:	8080102c 	andhi	r2,r16,64
 10406d8:	10000826 	beq	r2,zero,10406fc <__mulsf3+0x364>
 10406dc:	9880102c 	andhi	r2,r19,64
 10406e0:	1000061e 	bne	r2,zero,10406fc <__mulsf3+0x364>
 10406e4:	00802034 	movhi	r2,128
 10406e8:	99001034 	orhi	r4,r19,64
 10406ec:	10bfffc4 	addi	r2,r2,-1
 10406f0:	b029883a 	mov	r20,r22
 10406f4:	2088703a 	and	r4,r4,r2
 10406f8:	003fb906 	br	10405e0 <__alt_data_end+0xfffe05e0>
 10406fc:	00802034 	movhi	r2,128
 1040700:	81001034 	orhi	r4,r16,64
 1040704:	10bfffc4 	addi	r2,r2,-1
 1040708:	2088703a 	and	r4,r4,r2
 104070c:	003fb406 	br	10405e0 <__alt_data_end+0xfffe05e0>
 1040710:	802091ba 	slli	r16,r16,6
 1040714:	ad00004c 	andi	r20,r21,1
 1040718:	8008d27a 	srli	r4,r16,9
 104071c:	003f6d06 	br	10404d4 <__alt_data_end+0xfffe04d4>
 1040720:	00ffe084 	movi	r3,-126
 1040724:	1887c83a 	sub	r3,r3,r2
 1040728:	010006c4 	movi	r4,27
 104072c:	20c0070e 	bge	r4,r3,104074c <__mulsf3+0x3b4>
 1040730:	ad00004c 	andi	r20,r21,1
 1040734:	0007883a 	mov	r3,zero
 1040738:	0009883a 	mov	r4,zero
 104073c:	003f6506 	br	10404d4 <__alt_data_end+0xfffe04d4>
 1040740:	4005883a 	mov	r2,r8
 1040744:	e02b883a 	mov	r21,fp
 1040748:	003fc606 	br	1040664 <__alt_data_end+0xfffe0664>
 104074c:	10802784 	addi	r2,r2,158
 1040750:	8084983a 	sll	r2,r16,r2
 1040754:	80e0d83a 	srl	r16,r16,r3
 1040758:	1004c03a 	cmpne	r2,r2,zero
 104075c:	1404b03a 	or	r2,r2,r16
 1040760:	10c001cc 	andi	r3,r2,7
 1040764:	18000426 	beq	r3,zero,1040778 <__mulsf3+0x3e0>
 1040768:	110003cc 	andi	r4,r2,15
 104076c:	00c00104 	movi	r3,4
 1040770:	20c00126 	beq	r4,r3,1040778 <__mulsf3+0x3e0>
 1040774:	10c5883a 	add	r2,r2,r3
 1040778:	10c1002c 	andhi	r3,r2,1024
 104077c:	18000426 	beq	r3,zero,1040790 <__mulsf3+0x3f8>
 1040780:	ad00004c 	andi	r20,r21,1
 1040784:	00c00044 	movi	r3,1
 1040788:	0009883a 	mov	r4,zero
 104078c:	003f5106 	br	10404d4 <__alt_data_end+0xfffe04d4>
 1040790:	100491ba 	slli	r2,r2,6
 1040794:	ad00004c 	andi	r20,r21,1
 1040798:	0007883a 	mov	r3,zero
 104079c:	1008d27a 	srli	r4,r2,9
 10407a0:	003f4c06 	br	10404d4 <__alt_data_end+0xfffe04d4>
 10407a4:	00802034 	movhi	r2,128
 10407a8:	81001034 	orhi	r4,r16,64
 10407ac:	10bfffc4 	addi	r2,r2,-1
 10407b0:	e500004c 	andi	r20,fp,1
 10407b4:	2088703a 	and	r4,r4,r2
 10407b8:	003f8906 	br	10405e0 <__alt_data_end+0xfffe05e0>

010407bc <__floatunsisf>:
 10407bc:	defffe04 	addi	sp,sp,-8
 10407c0:	dc000015 	stw	r16,0(sp)
 10407c4:	dfc00115 	stw	ra,4(sp)
 10407c8:	2021883a 	mov	r16,r4
 10407cc:	20002626 	beq	r4,zero,1040868 <__floatunsisf+0xac>
 10407d0:	10409dc0 	call	10409dc <__clzsi2>
 10407d4:	00c02784 	movi	r3,158
 10407d8:	1887c83a 	sub	r3,r3,r2
 10407dc:	01002584 	movi	r4,150
 10407e0:	20c00816 	blt	r4,r3,1040804 <__floatunsisf+0x48>
 10407e4:	01000204 	movi	r4,8
 10407e8:	2080340e 	bge	r4,r2,10408bc <__floatunsisf+0x100>
 10407ec:	10bffe04 	addi	r2,r2,-8
 10407f0:	8088983a 	sll	r4,r16,r2
 10407f4:	00802034 	movhi	r2,128
 10407f8:	10bfffc4 	addi	r2,r2,-1
 10407fc:	2088703a 	and	r4,r4,r2
 1040800:	00001b06 	br	1040870 <__floatunsisf+0xb4>
 1040804:	01002644 	movi	r4,153
 1040808:	20c02316 	blt	r4,r3,1040898 <__floatunsisf+0xdc>
 104080c:	01000144 	movi	r4,5
 1040810:	2080020e 	bge	r4,r2,104081c <__floatunsisf+0x60>
 1040814:	113ffec4 	addi	r4,r2,-5
 1040818:	8120983a 	sll	r16,r16,r4
 104081c:	017f0034 	movhi	r5,64512
 1040820:	297fffc4 	addi	r5,r5,-1
 1040824:	810001cc 	andi	r4,r16,7
 1040828:	814a703a 	and	r5,r16,r5
 104082c:	20000426 	beq	r4,zero,1040840 <__floatunsisf+0x84>
 1040830:	840003cc 	andi	r16,r16,15
 1040834:	01000104 	movi	r4,4
 1040838:	81000126 	beq	r16,r4,1040840 <__floatunsisf+0x84>
 104083c:	290b883a 	add	r5,r5,r4
 1040840:	2901002c 	andhi	r4,r5,1024
 1040844:	20000526 	beq	r4,zero,104085c <__floatunsisf+0xa0>
 1040848:	00c027c4 	movi	r3,159
 104084c:	1887c83a 	sub	r3,r3,r2
 1040850:	00bf0034 	movhi	r2,64512
 1040854:	10bfffc4 	addi	r2,r2,-1
 1040858:	288a703a 	and	r5,r5,r2
 104085c:	280891ba 	slli	r4,r5,6
 1040860:	2008d27a 	srli	r4,r4,9
 1040864:	00000206 	br	1040870 <__floatunsisf+0xb4>
 1040868:	0007883a 	mov	r3,zero
 104086c:	0009883a 	mov	r4,zero
 1040870:	18c03fcc 	andi	r3,r3,255
 1040874:	180695fa 	slli	r3,r3,23
 1040878:	00802034 	movhi	r2,128
 104087c:	10bfffc4 	addi	r2,r2,-1
 1040880:	2084703a 	and	r2,r4,r2
 1040884:	10c4b03a 	or	r2,r2,r3
 1040888:	dfc00117 	ldw	ra,4(sp)
 104088c:	dc000017 	ldw	r16,0(sp)
 1040890:	dec00204 	addi	sp,sp,8
 1040894:	f800283a 	ret
 1040898:	01400144 	movi	r5,5
 104089c:	110006c4 	addi	r4,r2,27
 10408a0:	8108983a 	sll	r4,r16,r4
 10408a4:	288dc83a 	sub	r6,r5,r2
 10408a8:	81a0d83a 	srl	r16,r16,r6
 10408ac:	2008c03a 	cmpne	r4,r4,zero
 10408b0:	2420b03a 	or	r16,r4,r16
 10408b4:	28bfd90e 	bge	r5,r2,104081c <__alt_data_end+0xfffe081c>
 10408b8:	003fd606 	br	1040814 <__alt_data_end+0xfffe0814>
 10408bc:	01402034 	movhi	r5,128
 10408c0:	297fffc4 	addi	r5,r5,-1
 10408c4:	8148703a 	and	r4,r16,r5
 10408c8:	003fe906 	br	1040870 <__alt_data_end+0xfffe0870>

010408cc <__extendsfdf2>:
 10408cc:	200ad5fa 	srli	r5,r4,23
 10408d0:	defffd04 	addi	sp,sp,-12
 10408d4:	dc400115 	stw	r17,4(sp)
 10408d8:	29403fcc 	andi	r5,r5,255
 10408dc:	29800044 	addi	r6,r5,1
 10408e0:	04402034 	movhi	r17,128
 10408e4:	dc000015 	stw	r16,0(sp)
 10408e8:	8c7fffc4 	addi	r17,r17,-1
 10408ec:	dfc00215 	stw	ra,8(sp)
 10408f0:	31803fcc 	andi	r6,r6,255
 10408f4:	00800044 	movi	r2,1
 10408f8:	8922703a 	and	r17,r17,r4
 10408fc:	2020d7fa 	srli	r16,r4,31
 1040900:	1180110e 	bge	r2,r6,1040948 <__extendsfdf2+0x7c>
 1040904:	880ed0fa 	srli	r7,r17,3
 1040908:	8822977a 	slli	r17,r17,29
 104090c:	2940e004 	addi	r5,r5,896
 1040910:	2941ffcc 	andi	r5,r5,2047
 1040914:	280c953a 	slli	r6,r5,20
 1040918:	01400434 	movhi	r5,16
 104091c:	800697fa 	slli	r3,r16,31
 1040920:	297fffc4 	addi	r5,r5,-1
 1040924:	394a703a 	and	r5,r7,r5
 1040928:	298ab03a 	or	r5,r5,r6
 104092c:	8805883a 	mov	r2,r17
 1040930:	28c6b03a 	or	r3,r5,r3
 1040934:	dfc00217 	ldw	ra,8(sp)
 1040938:	dc400117 	ldw	r17,4(sp)
 104093c:	dc000017 	ldw	r16,0(sp)
 1040940:	dec00304 	addi	sp,sp,12
 1040944:	f800283a 	ret
 1040948:	2800111e 	bne	r5,zero,1040990 <__extendsfdf2+0xc4>
 104094c:	88001c26 	beq	r17,zero,10409c0 <__extendsfdf2+0xf4>
 1040950:	8809883a 	mov	r4,r17
 1040954:	10409dc0 	call	10409dc <__clzsi2>
 1040958:	00c00284 	movi	r3,10
 104095c:	18801b16 	blt	r3,r2,10409cc <__extendsfdf2+0x100>
 1040960:	01c002c4 	movi	r7,11
 1040964:	388fc83a 	sub	r7,r7,r2
 1040968:	10c00544 	addi	r3,r2,21
 104096c:	89ced83a 	srl	r7,r17,r7
 1040970:	88e2983a 	sll	r17,r17,r3
 1040974:	0180e244 	movi	r6,905
 1040978:	308bc83a 	sub	r5,r6,r2
 104097c:	01800434 	movhi	r6,16
 1040980:	31bfffc4 	addi	r6,r6,-1
 1040984:	398e703a 	and	r7,r7,r6
 1040988:	2941ffcc 	andi	r5,r5,2047
 104098c:	003fe006 	br	1040910 <__alt_data_end+0xfffe0910>
 1040990:	88000826 	beq	r17,zero,10409b4 <__extendsfdf2+0xe8>
 1040994:	880ed0fa 	srli	r7,r17,3
 1040998:	00800434 	movhi	r2,16
 104099c:	10bfffc4 	addi	r2,r2,-1
 10409a0:	39c00234 	orhi	r7,r7,8
 10409a4:	8822977a 	slli	r17,r17,29
 10409a8:	388e703a 	and	r7,r7,r2
 10409ac:	0141ffc4 	movi	r5,2047
 10409b0:	003fd706 	br	1040910 <__alt_data_end+0xfffe0910>
 10409b4:	0141ffc4 	movi	r5,2047
 10409b8:	000f883a 	mov	r7,zero
 10409bc:	003fd406 	br	1040910 <__alt_data_end+0xfffe0910>
 10409c0:	000b883a 	mov	r5,zero
 10409c4:	000f883a 	mov	r7,zero
 10409c8:	003fd106 	br	1040910 <__alt_data_end+0xfffe0910>
 10409cc:	11fffd44 	addi	r7,r2,-11
 10409d0:	89ce983a 	sll	r7,r17,r7
 10409d4:	0023883a 	mov	r17,zero
 10409d8:	003fe606 	br	1040974 <__alt_data_end+0xfffe0974>

010409dc <__clzsi2>:
 10409dc:	00bfffd4 	movui	r2,65535
 10409e0:	11000b36 	bltu	r2,r4,1040a10 <__clzsi2+0x34>
 10409e4:	00803fc4 	movi	r2,255
 10409e8:	1100122e 	bgeu	r2,r4,1040a34 <__clzsi2+0x58>
 10409ec:	00c00204 	movi	r3,8
 10409f0:	01400604 	movi	r5,24
 10409f4:	20c8d83a 	srl	r4,r4,r3
 10409f8:	00804174 	movhi	r2,261
 10409fc:	10bde604 	addi	r2,r2,-2152
 1040a00:	1109883a 	add	r4,r2,r4
 1040a04:	20800003 	ldbu	r2,0(r4)
 1040a08:	2885c83a 	sub	r2,r5,r2
 1040a0c:	f800283a 	ret
 1040a10:	00804034 	movhi	r2,256
 1040a14:	10bfffc4 	addi	r2,r2,-1
 1040a18:	11000336 	bltu	r2,r4,1040a28 <__clzsi2+0x4c>
 1040a1c:	00c00404 	movi	r3,16
 1040a20:	180b883a 	mov	r5,r3
 1040a24:	003ff306 	br	10409f4 <__alt_data_end+0xfffe09f4>
 1040a28:	00c00604 	movi	r3,24
 1040a2c:	01400204 	movi	r5,8
 1040a30:	003ff006 	br	10409f4 <__alt_data_end+0xfffe09f4>
 1040a34:	0007883a 	mov	r3,zero
 1040a38:	01400804 	movi	r5,32
 1040a3c:	003fed06 	br	10409f4 <__alt_data_end+0xfffe09f4>

01040a40 <_printf_r>:
 1040a40:	defffd04 	addi	sp,sp,-12
 1040a44:	dfc00015 	stw	ra,0(sp)
 1040a48:	d9800115 	stw	r6,4(sp)
 1040a4c:	d9c00215 	stw	r7,8(sp)
 1040a50:	280d883a 	mov	r6,r5
 1040a54:	21400217 	ldw	r5,8(r4)
 1040a58:	d9c00104 	addi	r7,sp,4
 1040a5c:	1040c0c0 	call	1040c0c <___vfprintf_internal_r>
 1040a60:	dfc00017 	ldw	ra,0(sp)
 1040a64:	dec00304 	addi	sp,sp,12
 1040a68:	f800283a 	ret

01040a6c <printf>:
 1040a6c:	defffc04 	addi	sp,sp,-16
 1040a70:	dfc00015 	stw	ra,0(sp)
 1040a74:	d9400115 	stw	r5,4(sp)
 1040a78:	d9800215 	stw	r6,8(sp)
 1040a7c:	d9c00315 	stw	r7,12(sp)
 1040a80:	00804174 	movhi	r2,261
 1040a84:	10855004 	addi	r2,r2,5440
 1040a88:	10800017 	ldw	r2,0(r2)
 1040a8c:	200b883a 	mov	r5,r4
 1040a90:	d9800104 	addi	r6,sp,4
 1040a94:	11000217 	ldw	r4,8(r2)
 1040a98:	1042c080 	call	1042c08 <__vfprintf_internal>
 1040a9c:	dfc00017 	ldw	ra,0(sp)
 1040aa0:	dec00404 	addi	sp,sp,16
 1040aa4:	f800283a 	ret

01040aa8 <_puts_r>:
 1040aa8:	defff604 	addi	sp,sp,-40
 1040aac:	dc000715 	stw	r16,28(sp)
 1040ab0:	2021883a 	mov	r16,r4
 1040ab4:	2809883a 	mov	r4,r5
 1040ab8:	dc400815 	stw	r17,32(sp)
 1040abc:	dfc00915 	stw	ra,36(sp)
 1040ac0:	2823883a 	mov	r17,r5
 1040ac4:	1040b740 	call	1040b74 <strlen>
 1040ac8:	00c04174 	movhi	r3,261
 1040acc:	18c55004 	addi	r3,r3,5440
 1040ad0:	18c00017 	ldw	r3,0(r3)
 1040ad4:	11000044 	addi	r4,r2,1
 1040ad8:	d8800115 	stw	r2,4(sp)
 1040adc:	18c00217 	ldw	r3,8(r3)
 1040ae0:	01404174 	movhi	r5,261
 1040ae4:	297e2604 	addi	r5,r5,-1896
 1040ae8:	1880030b 	ldhu	r2,12(r3)
 1040aec:	d9400215 	stw	r5,8(sp)
 1040af0:	d9000615 	stw	r4,24(sp)
 1040af4:	01400044 	movi	r5,1
 1040af8:	01000084 	movi	r4,2
 1040afc:	d9000515 	stw	r4,20(sp)
 1040b00:	dc400015 	stw	r17,0(sp)
 1040b04:	d9400315 	stw	r5,12(sp)
 1040b08:	dec00415 	stw	sp,16(sp)
 1040b0c:	1108000c 	andi	r4,r2,8192
 1040b10:	2000061e 	bne	r4,zero,1040b2c <_puts_r+0x84>
 1040b14:	19401917 	ldw	r5,100(r3)
 1040b18:	0137ffc4 	movi	r4,-8193
 1040b1c:	10880014 	ori	r2,r2,8192
 1040b20:	2908703a 	and	r4,r5,r4
 1040b24:	1880030d 	sth	r2,12(r3)
 1040b28:	19001915 	stw	r4,100(r3)
 1040b2c:	81400217 	ldw	r5,8(r16)
 1040b30:	8009883a 	mov	r4,r16
 1040b34:	d9800404 	addi	r6,sp,16
 1040b38:	10450900 	call	1045090 <__sfvwrite_r>
 1040b3c:	1000061e 	bne	r2,zero,1040b58 <_puts_r+0xb0>
 1040b40:	00800284 	movi	r2,10
 1040b44:	dfc00917 	ldw	ra,36(sp)
 1040b48:	dc400817 	ldw	r17,32(sp)
 1040b4c:	dc000717 	ldw	r16,28(sp)
 1040b50:	dec00a04 	addi	sp,sp,40
 1040b54:	f800283a 	ret
 1040b58:	00bfffc4 	movi	r2,-1
 1040b5c:	003ff906 	br	1040b44 <__alt_data_end+0xfffe0b44>

01040b60 <puts>:
 1040b60:	00804174 	movhi	r2,261
 1040b64:	10855004 	addi	r2,r2,5440
 1040b68:	200b883a 	mov	r5,r4
 1040b6c:	11000017 	ldw	r4,0(r2)
 1040b70:	1040aa81 	jmpi	1040aa8 <_puts_r>

01040b74 <strlen>:
 1040b74:	208000cc 	andi	r2,r4,3
 1040b78:	10002026 	beq	r2,zero,1040bfc <strlen+0x88>
 1040b7c:	20800007 	ldb	r2,0(r4)
 1040b80:	10002026 	beq	r2,zero,1040c04 <strlen+0x90>
 1040b84:	2005883a 	mov	r2,r4
 1040b88:	00000206 	br	1040b94 <strlen+0x20>
 1040b8c:	10c00007 	ldb	r3,0(r2)
 1040b90:	18001826 	beq	r3,zero,1040bf4 <strlen+0x80>
 1040b94:	10800044 	addi	r2,r2,1
 1040b98:	10c000cc 	andi	r3,r2,3
 1040b9c:	183ffb1e 	bne	r3,zero,1040b8c <__alt_data_end+0xfffe0b8c>
 1040ba0:	10c00017 	ldw	r3,0(r2)
 1040ba4:	01ffbff4 	movhi	r7,65279
 1040ba8:	39ffbfc4 	addi	r7,r7,-257
 1040bac:	00ca303a 	nor	r5,zero,r3
 1040bb0:	01a02074 	movhi	r6,32897
 1040bb4:	19c7883a 	add	r3,r3,r7
 1040bb8:	31a02004 	addi	r6,r6,-32640
 1040bbc:	1946703a 	and	r3,r3,r5
 1040bc0:	1986703a 	and	r3,r3,r6
 1040bc4:	1800091e 	bne	r3,zero,1040bec <strlen+0x78>
 1040bc8:	10800104 	addi	r2,r2,4
 1040bcc:	10c00017 	ldw	r3,0(r2)
 1040bd0:	19cb883a 	add	r5,r3,r7
 1040bd4:	00c6303a 	nor	r3,zero,r3
 1040bd8:	28c6703a 	and	r3,r5,r3
 1040bdc:	1986703a 	and	r3,r3,r6
 1040be0:	183ff926 	beq	r3,zero,1040bc8 <__alt_data_end+0xfffe0bc8>
 1040be4:	00000106 	br	1040bec <strlen+0x78>
 1040be8:	10800044 	addi	r2,r2,1
 1040bec:	10c00007 	ldb	r3,0(r2)
 1040bf0:	183ffd1e 	bne	r3,zero,1040be8 <__alt_data_end+0xfffe0be8>
 1040bf4:	1105c83a 	sub	r2,r2,r4
 1040bf8:	f800283a 	ret
 1040bfc:	2005883a 	mov	r2,r4
 1040c00:	003fe706 	br	1040ba0 <__alt_data_end+0xfffe0ba0>
 1040c04:	0005883a 	mov	r2,zero
 1040c08:	f800283a 	ret

01040c0c <___vfprintf_internal_r>:
 1040c0c:	defeb604 	addi	sp,sp,-1320
 1040c10:	dfc14915 	stw	ra,1316(sp)
 1040c14:	ddc14715 	stw	r23,1308(sp)
 1040c18:	dd814615 	stw	r22,1304(sp)
 1040c1c:	282f883a 	mov	r23,r5
 1040c20:	202d883a 	mov	r22,r4
 1040c24:	d9812a15 	stw	r6,1192(sp)
 1040c28:	d9c12d15 	stw	r7,1204(sp)
 1040c2c:	df014815 	stw	fp,1312(sp)
 1040c30:	dd414515 	stw	r21,1300(sp)
 1040c34:	dd014415 	stw	r20,1296(sp)
 1040c38:	dcc14315 	stw	r19,1292(sp)
 1040c3c:	dc814215 	stw	r18,1288(sp)
 1040c40:	dc414115 	stw	r17,1284(sp)
 1040c44:	dc014015 	stw	r16,1280(sp)
 1040c48:	10457500 	call	1045750 <_localeconv_r>
 1040c4c:	10800017 	ldw	r2,0(r2)
 1040c50:	1009883a 	mov	r4,r2
 1040c54:	d8813515 	stw	r2,1236(sp)
 1040c58:	1040b740 	call	1040b74 <strlen>
 1040c5c:	d8813815 	stw	r2,1248(sp)
 1040c60:	b0000226 	beq	r22,zero,1040c6c <___vfprintf_internal_r+0x60>
 1040c64:	b0800e17 	ldw	r2,56(r22)
 1040c68:	10010426 	beq	r2,zero,104107c <___vfprintf_internal_r+0x470>
 1040c6c:	b8c0030b 	ldhu	r3,12(r23)
 1040c70:	1908000c 	andi	r4,r3,8192
 1040c74:	1805883a 	mov	r2,r3
 1040c78:	2000071e 	bne	r4,zero,1040c98 <___vfprintf_internal_r+0x8c>
 1040c7c:	b9001917 	ldw	r4,100(r23)
 1040c80:	18880014 	ori	r2,r3,8192
 1040c84:	00f7ffc4 	movi	r3,-8193
 1040c88:	20c8703a 	and	r4,r4,r3
 1040c8c:	b880030d 	sth	r2,12(r23)
 1040c90:	1007883a 	mov	r3,r2
 1040c94:	b9001915 	stw	r4,100(r23)
 1040c98:	1100020c 	andi	r4,r2,8
 1040c9c:	2000a726 	beq	r4,zero,1040f3c <___vfprintf_internal_r+0x330>
 1040ca0:	b9000417 	ldw	r4,16(r23)
 1040ca4:	2000a526 	beq	r4,zero,1040f3c <___vfprintf_internal_r+0x330>
 1040ca8:	1080068c 	andi	r2,r2,26
 1040cac:	01000284 	movi	r4,10
 1040cb0:	1100ab26 	beq	r2,r4,1040f60 <___vfprintf_internal_r+0x354>
 1040cb4:	dac10e04 	addi	r11,sp,1080
 1040cb8:	db010dc4 	addi	r12,sp,1079
 1040cbc:	d8800404 	addi	r2,sp,16
 1040cc0:	05004174 	movhi	r20,261
 1040cc4:	dac12815 	stw	r11,1184(sp)
 1040cc8:	5b17c83a 	sub	r11,r11,r12
 1040ccc:	a53e3784 	addi	r20,r20,-1826
 1040cd0:	db012915 	stw	r12,1188(sp)
 1040cd4:	d8811e15 	stw	r2,1144(sp)
 1040cd8:	d8012015 	stw	zero,1152(sp)
 1040cdc:	d8011f15 	stw	zero,1148(sp)
 1040ce0:	d8013315 	stw	zero,1228(sp)
 1040ce4:	d8013715 	stw	zero,1244(sp)
 1040ce8:	d8013915 	stw	zero,1252(sp)
 1040cec:	d8013b15 	stw	zero,1260(sp)
 1040cf0:	d8013a15 	stw	zero,1256(sp)
 1040cf4:	d8012f15 	stw	zero,1212(sp)
 1040cf8:	1011883a 	mov	r8,r2
 1040cfc:	dac13c15 	stw	r11,1264(sp)
 1040d00:	db012a17 	ldw	r12,1192(sp)
 1040d04:	60800007 	ldb	r2,0(r12)
 1040d08:	1000df26 	beq	r2,zero,1041088 <___vfprintf_internal_r+0x47c>
 1040d0c:	00c00944 	movi	r3,37
 1040d10:	10c0dd26 	beq	r2,r3,1041088 <___vfprintf_internal_r+0x47c>
 1040d14:	6021883a 	mov	r16,r12
 1040d18:	00000106 	br	1040d20 <___vfprintf_internal_r+0x114>
 1040d1c:	10c08426 	beq	r2,r3,1040f30 <___vfprintf_internal_r+0x324>
 1040d20:	84000044 	addi	r16,r16,1
 1040d24:	80800007 	ldb	r2,0(r16)
 1040d28:	103ffc1e 	bne	r2,zero,1040d1c <__alt_data_end+0xfffe0d1c>
 1040d2c:	dac12a17 	ldw	r11,1192(sp)
 1040d30:	82e3c83a 	sub	r17,r16,r11
 1040d34:	88000f26 	beq	r17,zero,1040d74 <___vfprintf_internal_r+0x168>
 1040d38:	d8c12017 	ldw	r3,1152(sp)
 1040d3c:	d8811f17 	ldw	r2,1148(sp)
 1040d40:	dac12a17 	ldw	r11,1192(sp)
 1040d44:	1c47883a 	add	r3,r3,r17
 1040d48:	10800044 	addi	r2,r2,1
 1040d4c:	d8c12015 	stw	r3,1152(sp)
 1040d50:	42c00015 	stw	r11,0(r8)
 1040d54:	44400115 	stw	r17,4(r8)
 1040d58:	d8811f15 	stw	r2,1148(sp)
 1040d5c:	00c001c4 	movi	r3,7
 1040d60:	1880b416 	blt	r3,r2,1041034 <___vfprintf_internal_r+0x428>
 1040d64:	42000204 	addi	r8,r8,8
 1040d68:	db012f17 	ldw	r12,1212(sp)
 1040d6c:	6459883a 	add	r12,r12,r17
 1040d70:	db012f15 	stw	r12,1212(sp)
 1040d74:	80800007 	ldb	r2,0(r16)
 1040d78:	1000b526 	beq	r2,zero,1041050 <___vfprintf_internal_r+0x444>
 1040d7c:	80800044 	addi	r2,r16,1
 1040d80:	84000047 	ldb	r16,1(r16)
 1040d84:	d8012785 	stb	zero,1182(sp)
 1040d88:	000d883a 	mov	r6,zero
 1040d8c:	027fffc4 	movi	r9,-1
 1040d90:	d8012e15 	stw	zero,1208(sp)
 1040d94:	0023883a 	mov	r17,zero
 1040d98:	01001604 	movi	r4,88
 1040d9c:	01400244 	movi	r5,9
 1040da0:	02800a84 	movi	r10,42
 1040da4:	01c01b04 	movi	r7,108
 1040da8:	10c00044 	addi	r3,r2,1
 1040dac:	80bff804 	addi	r2,r16,-32
 1040db0:	2082f236 	bltu	r4,r2,104197c <___vfprintf_internal_r+0xd70>
 1040db4:	100490ba 	slli	r2,r2,2
 1040db8:	02c04134 	movhi	r11,260
 1040dbc:	5ac37304 	addi	r11,r11,3532
 1040dc0:	12c5883a 	add	r2,r2,r11
 1040dc4:	10800017 	ldw	r2,0(r2)
 1040dc8:	1000683a 	jmp	r2
 1040dcc:	010417c4 	movi	r4,4191
 1040dd0:	0104197c 	xorhi	r4,zero,4197
 1040dd4:	0104197c 	xorhi	r4,zero,4197
 1040dd8:	010417e4 	muli	r4,zero,4191
 1040ddc:	0104197c 	xorhi	r4,zero,4197
 1040de0:	0104197c 	xorhi	r4,zero,4197
 1040de4:	0104197c 	xorhi	r4,zero,4197
 1040de8:	0104197c 	xorhi	r4,zero,4197
 1040dec:	0104197c 	xorhi	r4,zero,4197
 1040df0:	0104197c 	xorhi	r4,zero,4197
 1040df4:	01041940 	call	104194 <__reset-0xf3be6c>
 1040df8:	0104196c 	andhi	r4,zero,4197
 1040dfc:	0104197c 	xorhi	r4,zero,4197
 1040e00:	01041090 	cmplti	r4,zero,4162
 1040e04:	010410a0 	cmpeqi	r4,zero,4162
 1040e08:	0104197c 	xorhi	r4,zero,4197
 1040e0c:	010410e0 	cmpeqi	r4,zero,4163
 1040e10:	010415d4 	movui	r4,4183
 1040e14:	010415d4 	movui	r4,4183
 1040e18:	010415d4 	movui	r4,4183
 1040e1c:	010415d4 	movui	r4,4183
 1040e20:	010415d4 	movui	r4,4183
 1040e24:	010415d4 	movui	r4,4183
 1040e28:	010415d4 	movui	r4,4183
 1040e2c:	010415d4 	movui	r4,4183
 1040e30:	010415d4 	movui	r4,4183
 1040e34:	0104197c 	xorhi	r4,zero,4197
 1040e38:	0104197c 	xorhi	r4,zero,4197
 1040e3c:	0104197c 	xorhi	r4,zero,4197
 1040e40:	0104197c 	xorhi	r4,zero,4197
 1040e44:	0104197c 	xorhi	r4,zero,4197
 1040e48:	0104197c 	xorhi	r4,zero,4197
 1040e4c:	0104197c 	xorhi	r4,zero,4197
 1040e50:	0104197c 	xorhi	r4,zero,4197
 1040e54:	0104197c 	xorhi	r4,zero,4197
 1040e58:	0104197c 	xorhi	r4,zero,4197
 1040e5c:	01041608 	cmpgei	r4,zero,4184
 1040e60:	010410f0 	cmpltui	r4,zero,4163
 1040e64:	0104197c 	xorhi	r4,zero,4197
 1040e68:	010410f0 	cmpltui	r4,zero,4163
 1040e6c:	0104197c 	xorhi	r4,zero,4197
 1040e70:	0104197c 	xorhi	r4,zero,4197
 1040e74:	0104197c 	xorhi	r4,zero,4197
 1040e78:	0104197c 	xorhi	r4,zero,4197
 1040e7c:	01041194 	movui	r4,4166
 1040e80:	0104197c 	xorhi	r4,zero,4197
 1040e84:	0104197c 	xorhi	r4,zero,4197
 1040e88:	010411a4 	muli	r4,zero,4166
 1040e8c:	0104197c 	xorhi	r4,zero,4197
 1040e90:	0104197c 	xorhi	r4,zero,4197
 1040e94:	0104197c 	xorhi	r4,zero,4197
 1040e98:	0104197c 	xorhi	r4,zero,4197
 1040e9c:	0104197c 	xorhi	r4,zero,4197
 1040ea0:	010415a0 	cmpeqi	r4,zero,4182
 1040ea4:	0104197c 	xorhi	r4,zero,4197
 1040ea8:	0104197c 	xorhi	r4,zero,4197
 1040eac:	01041650 	cmplti	r4,zero,4185
 1040eb0:	0104197c 	xorhi	r4,zero,4197
 1040eb4:	0104197c 	xorhi	r4,zero,4197
 1040eb8:	0104197c 	xorhi	r4,zero,4197
 1040ebc:	0104197c 	xorhi	r4,zero,4197
 1040ec0:	0104197c 	xorhi	r4,zero,4197
 1040ec4:	0104197c 	xorhi	r4,zero,4197
 1040ec8:	0104197c 	xorhi	r4,zero,4197
 1040ecc:	0104197c 	xorhi	r4,zero,4197
 1040ed0:	0104197c 	xorhi	r4,zero,4197
 1040ed4:	0104197c 	xorhi	r4,zero,4197
 1040ed8:	01041844 	movi	r4,4193
 1040edc:	010417f4 	movhi	r4,4191
 1040ee0:	010410f0 	cmpltui	r4,zero,4163
 1040ee4:	010410f0 	cmpltui	r4,zero,4163
 1040ee8:	010410f0 	cmpltui	r4,zero,4163
 1040eec:	01041834 	movhi	r4,4192
 1040ef0:	010417f4 	movhi	r4,4191
 1040ef4:	0104197c 	xorhi	r4,zero,4197
 1040ef8:	0104197c 	xorhi	r4,zero,4197
 1040efc:	0104173c 	xorhi	r4,zero,4188
 1040f00:	0104197c 	xorhi	r4,zero,4197
 1040f04:	01041750 	cmplti	r4,zero,4189
 1040f08:	01041784 	movi	r4,4190
 1040f0c:	01041884 	movi	r4,4194
 1040f10:	010416ac 	andhi	r4,zero,4186
 1040f14:	0104197c 	xorhi	r4,zero,4197
 1040f18:	010418cc 	andi	r4,zero,4195
 1040f1c:	0104197c 	xorhi	r4,zero,4197
 1040f20:	010416bc 	xorhi	r4,zero,4186
 1040f24:	0104197c 	xorhi	r4,zero,4197
 1040f28:	0104197c 	xorhi	r4,zero,4197
 1040f2c:	010416fc 	xorhi	r4,zero,4187
 1040f30:	db012a17 	ldw	r12,1192(sp)
 1040f34:	8323c83a 	sub	r17,r16,r12
 1040f38:	003f7e06 	br	1040d34 <__alt_data_end+0xfffe0d34>
 1040f3c:	b009883a 	mov	r4,r22
 1040f40:	b80b883a 	mov	r5,r23
 1040f44:	1042c2c0 	call	1042c2c <__swsetup_r>
 1040f48:	10002d1e 	bne	r2,zero,1041000 <___vfprintf_internal_r+0x3f4>
 1040f4c:	b8c0030b 	ldhu	r3,12(r23)
 1040f50:	01000284 	movi	r4,10
 1040f54:	1805883a 	mov	r2,r3
 1040f58:	1080068c 	andi	r2,r2,26
 1040f5c:	113f551e 	bne	r2,r4,1040cb4 <__alt_data_end+0xfffe0cb4>
 1040f60:	b880038b 	ldhu	r2,14(r23)
 1040f64:	113fffcc 	andi	r4,r2,65535
 1040f68:	2120001c 	xori	r4,r4,32768
 1040f6c:	21200004 	addi	r4,r4,-32768
 1040f70:	203f5016 	blt	r4,zero,1040cb4 <__alt_data_end+0xfffe0cb4>
 1040f74:	bac01917 	ldw	r11,100(r23)
 1040f78:	ba800717 	ldw	r10,28(r23)
 1040f7c:	ba400917 	ldw	r9,36(r23)
 1040f80:	d9812a17 	ldw	r6,1192(sp)
 1040f84:	d9c12d17 	ldw	r7,1204(sp)
 1040f88:	02010004 	movi	r8,1024
 1040f8c:	18ffff4c 	andi	r3,r3,65533
 1040f90:	d881078d 	sth	r2,1054(sp)
 1040f94:	b009883a 	mov	r4,r22
 1040f98:	d8800404 	addi	r2,sp,16
 1040f9c:	d9410404 	addi	r5,sp,1040
 1040fa0:	d8c1070d 	sth	r3,1052(sp)
 1040fa4:	dac11d15 	stw	r11,1140(sp)
 1040fa8:	da810b15 	stw	r10,1068(sp)
 1040fac:	da410d15 	stw	r9,1076(sp)
 1040fb0:	d8810415 	stw	r2,1040(sp)
 1040fb4:	d8810815 	stw	r2,1056(sp)
 1040fb8:	da010615 	stw	r8,1048(sp)
 1040fbc:	da010915 	stw	r8,1060(sp)
 1040fc0:	d8010a15 	stw	zero,1064(sp)
 1040fc4:	1040c0c0 	call	1040c0c <___vfprintf_internal_r>
 1040fc8:	1021883a 	mov	r16,r2
 1040fcc:	10000416 	blt	r2,zero,1040fe0 <___vfprintf_internal_r+0x3d4>
 1040fd0:	b009883a 	mov	r4,r22
 1040fd4:	d9410404 	addi	r5,sp,1040
 1040fd8:	10446840 	call	1044684 <_fflush_r>
 1040fdc:	1006ee1e 	bne	r2,zero,1042b98 <___vfprintf_internal_r+0x1f8c>
 1040fe0:	d881070b 	ldhu	r2,1052(sp)
 1040fe4:	1080100c 	andi	r2,r2,64
 1040fe8:	10000326 	beq	r2,zero,1040ff8 <___vfprintf_internal_r+0x3ec>
 1040fec:	b880030b 	ldhu	r2,12(r23)
 1040ff0:	10801014 	ori	r2,r2,64
 1040ff4:	b880030d 	sth	r2,12(r23)
 1040ff8:	8005883a 	mov	r2,r16
 1040ffc:	00000106 	br	1041004 <___vfprintf_internal_r+0x3f8>
 1041000:	00bfffc4 	movi	r2,-1
 1041004:	dfc14917 	ldw	ra,1316(sp)
 1041008:	df014817 	ldw	fp,1312(sp)
 104100c:	ddc14717 	ldw	r23,1308(sp)
 1041010:	dd814617 	ldw	r22,1304(sp)
 1041014:	dd414517 	ldw	r21,1300(sp)
 1041018:	dd014417 	ldw	r20,1296(sp)
 104101c:	dcc14317 	ldw	r19,1292(sp)
 1041020:	dc814217 	ldw	r18,1288(sp)
 1041024:	dc414117 	ldw	r17,1284(sp)
 1041028:	dc014017 	ldw	r16,1280(sp)
 104102c:	dec14a04 	addi	sp,sp,1320
 1041030:	f800283a 	ret
 1041034:	b009883a 	mov	r4,r22
 1041038:	b80b883a 	mov	r5,r23
 104103c:	d9811e04 	addi	r6,sp,1144
 1041040:	1047e540 	call	1047e54 <__sprint_r>
 1041044:	1000081e 	bne	r2,zero,1041068 <___vfprintf_internal_r+0x45c>
 1041048:	da000404 	addi	r8,sp,16
 104104c:	003f4606 	br	1040d68 <__alt_data_end+0xfffe0d68>
 1041050:	d8812017 	ldw	r2,1152(sp)
 1041054:	10000426 	beq	r2,zero,1041068 <___vfprintf_internal_r+0x45c>
 1041058:	b009883a 	mov	r4,r22
 104105c:	b80b883a 	mov	r5,r23
 1041060:	d9811e04 	addi	r6,sp,1144
 1041064:	1047e540 	call	1047e54 <__sprint_r>
 1041068:	b880030b 	ldhu	r2,12(r23)
 104106c:	1080100c 	andi	r2,r2,64
 1041070:	103fe31e 	bne	r2,zero,1041000 <__alt_data_end+0xfffe1000>
 1041074:	d8812f17 	ldw	r2,1212(sp)
 1041078:	003fe206 	br	1041004 <__alt_data_end+0xfffe1004>
 104107c:	b009883a 	mov	r4,r22
 1041080:	1044c2c0 	call	1044c2c <__sinit>
 1041084:	003ef906 	br	1040c6c <__alt_data_end+0xfffe0c6c>
 1041088:	dc012a17 	ldw	r16,1192(sp)
 104108c:	003f3906 	br	1040d74 <__alt_data_end+0xfffe0d74>
 1041090:	1805883a 	mov	r2,r3
 1041094:	8c400114 	ori	r17,r17,4
 1041098:	1c000007 	ldb	r16,0(r3)
 104109c:	003f4206 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10410a0:	1c000007 	ldb	r16,0(r3)
 10410a4:	18800044 	addi	r2,r3,1
 10410a8:	8286b326 	beq	r16,r10,1042b78 <___vfprintf_internal_r+0x1f6c>
 10410ac:	82fff404 	addi	r11,r16,-48
 10410b0:	1007883a 	mov	r3,r2
 10410b4:	0013883a 	mov	r9,zero
 10410b8:	2aff3c36 	bltu	r5,r11,1040dac <__alt_data_end+0xfffe0dac>
 10410bc:	1c000007 	ldb	r16,0(r3)
 10410c0:	4a4002a4 	muli	r9,r9,10
 10410c4:	18c00044 	addi	r3,r3,1
 10410c8:	5a53883a 	add	r9,r11,r9
 10410cc:	82fff404 	addi	r11,r16,-48
 10410d0:	2afffa2e 	bgeu	r5,r11,10410bc <__alt_data_end+0xfffe10bc>
 10410d4:	483f350e 	bge	r9,zero,1040dac <__alt_data_end+0xfffe0dac>
 10410d8:	027fffc4 	movi	r9,-1
 10410dc:	003f3306 	br	1040dac <__alt_data_end+0xfffe0dac>
 10410e0:	8c402014 	ori	r17,r17,128
 10410e4:	1805883a 	mov	r2,r3
 10410e8:	1c000007 	ldb	r16,0(r3)
 10410ec:	003f2e06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10410f0:	db012d17 	ldw	r12,1204(sp)
 10410f4:	dac12d17 	ldw	r11,1204(sp)
 10410f8:	d8c12a15 	stw	r3,1192(sp)
 10410fc:	63000017 	ldw	r12,0(r12)
 1041100:	5ac00117 	ldw	r11,4(r11)
 1041104:	d9812785 	stb	r6,1182(sp)
 1041108:	6009883a 	mov	r4,r12
 104110c:	580b883a 	mov	r5,r11
 1041110:	db013715 	stw	r12,1244(sp)
 1041114:	da013f15 	stw	r8,1276(sp)
 1041118:	da413e15 	stw	r9,1272(sp)
 104111c:	dac13915 	stw	r11,1252(sp)
 1041120:	1047ab00 	call	1047ab0 <__fpclassifyd>
 1041124:	db012d17 	ldw	r12,1204(sp)
 1041128:	04800044 	movi	r18,1
 104112c:	da013f17 	ldw	r8,1276(sp)
 1041130:	64c00204 	addi	r19,r12,8
 1041134:	da413e17 	ldw	r9,1272(sp)
 1041138:	d9013717 	ldw	r4,1244(sp)
 104113c:	d9413917 	ldw	r5,1252(sp)
 1041140:	1484581e 	bne	r2,r18,10422a4 <___vfprintf_internal_r+0x1698>
 1041144:	000d883a 	mov	r6,zero
 1041148:	000f883a 	mov	r7,zero
 104114c:	104ba6c0 	call	104ba6c <__ledf2>
 1041150:	da013f17 	ldw	r8,1276(sp)
 1041154:	1005ef16 	blt	r2,zero,1042914 <___vfprintf_internal_r+0x1d08>
 1041158:	dd412783 	ldbu	r21,1182(sp)
 104115c:	008011c4 	movi	r2,71
 1041160:	14053b0e 	bge	r2,r16,1042650 <___vfprintf_internal_r+0x1a44>
 1041164:	00c04174 	movhi	r3,261
 1041168:	18fe2804 	addi	r3,r3,-1888
 104116c:	d8c13115 	stw	r3,1220(sp)
 1041170:	02c000c4 	movi	r11,3
 1041174:	00bfdfc4 	movi	r2,-129
 1041178:	dac12b15 	stw	r11,1196(sp)
 104117c:	88a2703a 	and	r17,r17,r2
 1041180:	dcc12d15 	stw	r19,1204(sp)
 1041184:	5825883a 	mov	r18,r11
 1041188:	d8013215 	stw	zero,1224(sp)
 104118c:	d8013415 	stw	zero,1232(sp)
 1041190:	00003206 	br	104125c <___vfprintf_internal_r+0x650>
 1041194:	8c400214 	ori	r17,r17,8
 1041198:	1805883a 	mov	r2,r3
 104119c:	1c000007 	ldb	r16,0(r3)
 10411a0:	003f0106 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10411a4:	8c400414 	ori	r17,r17,16
 10411a8:	d8c12a15 	stw	r3,1192(sp)
 10411ac:	88c0080c 	andi	r3,r17,32
 10411b0:	d8812d17 	ldw	r2,1204(sp)
 10411b4:	18017726 	beq	r3,zero,1041794 <___vfprintf_internal_r+0xb88>
 10411b8:	db012d17 	ldw	r12,1204(sp)
 10411bc:	14c00017 	ldw	r19,0(r2)
 10411c0:	17000117 	ldw	fp,4(r2)
 10411c4:	63000204 	addi	r12,r12,8
 10411c8:	db012d15 	stw	r12,1204(sp)
 10411cc:	0005883a 	mov	r2,zero
 10411d0:	9f06b03a 	or	r3,r19,fp
 10411d4:	d8012785 	stb	zero,1182(sp)
 10411d8:	da413215 	stw	r9,1224(sp)
 10411dc:	002b883a 	mov	r21,zero
 10411e0:	48000216 	blt	r9,zero,10411ec <___vfprintf_internal_r+0x5e0>
 10411e4:	013fdfc4 	movi	r4,-129
 10411e8:	8922703a 	and	r17,r17,r4
 10411ec:	1801ed1e 	bne	r3,zero,10419a4 <___vfprintf_internal_r+0xd98>
 10411f0:	4802e026 	beq	r9,zero,1041d74 <___vfprintf_internal_r+0x1168>
 10411f4:	10803fcc 	andi	r2,r2,255
 10411f8:	00c00044 	movi	r3,1
 10411fc:	10c20f26 	beq	r2,r3,1041a3c <___vfprintf_internal_r+0xe30>
 1041200:	00c00084 	movi	r3,2
 1041204:	10c2fd26 	beq	r2,r3,1041dfc <___vfprintf_internal_r+0x11f0>
 1041208:	d8c10e04 	addi	r3,sp,1080
 104120c:	9808d0fa 	srli	r4,r19,3
 1041210:	e00a977a 	slli	r5,fp,29
 1041214:	e038d0fa 	srli	fp,fp,3
 1041218:	9cc001cc 	andi	r19,r19,7
 104121c:	98800c04 	addi	r2,r19,48
 1041220:	18ffffc4 	addi	r3,r3,-1
 1041224:	2926b03a 	or	r19,r5,r4
 1041228:	18800005 	stb	r2,0(r3)
 104122c:	9f08b03a 	or	r4,r19,fp
 1041230:	203ff61e 	bne	r4,zero,104120c <__alt_data_end+0xfffe120c>
 1041234:	8900004c 	andi	r4,r17,1
 1041238:	d8c13115 	stw	r3,1220(sp)
 104123c:	2003791e 	bne	r4,zero,1042024 <___vfprintf_internal_r+0x1418>
 1041240:	dac12817 	ldw	r11,1184(sp)
 1041244:	58e5c83a 	sub	r18,r11,r3
 1041248:	9005883a 	mov	r2,r18
 104124c:	9240010e 	bge	r18,r9,1041254 <___vfprintf_internal_r+0x648>
 1041250:	4805883a 	mov	r2,r9
 1041254:	d8812b15 	stw	r2,1196(sp)
 1041258:	d8013415 	stw	zero,1232(sp)
 104125c:	a8803fcc 	andi	r2,r21,255
 1041260:	1080201c 	xori	r2,r2,128
 1041264:	10bfe004 	addi	r2,r2,-128
 1041268:	10000326 	beq	r2,zero,1041278 <___vfprintf_internal_r+0x66c>
 104126c:	db012b17 	ldw	r12,1196(sp)
 1041270:	63000044 	addi	r12,r12,1
 1041274:	db012b15 	stw	r12,1196(sp)
 1041278:	88c0008c 	andi	r3,r17,2
 104127c:	d8c12c15 	stw	r3,1200(sp)
 1041280:	18000326 	beq	r3,zero,1041290 <___vfprintf_internal_r+0x684>
 1041284:	dac12b17 	ldw	r11,1196(sp)
 1041288:	5ac00084 	addi	r11,r11,2
 104128c:	dac12b15 	stw	r11,1196(sp)
 1041290:	8b00210c 	andi	r12,r17,132
 1041294:	db013015 	stw	r12,1216(sp)
 1041298:	6001c01e 	bne	r12,zero,104199c <___vfprintf_internal_r+0xd90>
 104129c:	dac12e17 	ldw	r11,1208(sp)
 10412a0:	db012b17 	ldw	r12,1196(sp)
 10412a4:	5b39c83a 	sub	fp,r11,r12
 10412a8:	0701bc0e 	bge	zero,fp,104199c <___vfprintf_internal_r+0xd90>
 10412ac:	02400404 	movi	r9,16
 10412b0:	d8c12017 	ldw	r3,1152(sp)
 10412b4:	d8811f17 	ldw	r2,1148(sp)
 10412b8:	4f05220e 	bge	r9,fp,1042744 <___vfprintf_internal_r+0x1b38>
 10412bc:	01404174 	movhi	r5,261
 10412c0:	297e3b84 	addi	r5,r5,-1810
 10412c4:	d9413615 	stw	r5,1240(sp)
 10412c8:	482b883a 	mov	r21,r9
 10412cc:	04c001c4 	movi	r19,7
 10412d0:	00000306 	br	10412e0 <___vfprintf_internal_r+0x6d4>
 10412d4:	e73ffc04 	addi	fp,fp,-16
 10412d8:	42000204 	addi	r8,r8,8
 10412dc:	af00130e 	bge	r21,fp,104132c <___vfprintf_internal_r+0x720>
 10412e0:	02c04174 	movhi	r11,261
 10412e4:	18c00404 	addi	r3,r3,16
 10412e8:	10800044 	addi	r2,r2,1
 10412ec:	5afe3b84 	addi	r11,r11,-1810
 10412f0:	42c00015 	stw	r11,0(r8)
 10412f4:	45400115 	stw	r21,4(r8)
 10412f8:	d8c12015 	stw	r3,1152(sp)
 10412fc:	d8811f15 	stw	r2,1148(sp)
 1041300:	98bff40e 	bge	r19,r2,10412d4 <__alt_data_end+0xfffe12d4>
 1041304:	b009883a 	mov	r4,r22
 1041308:	b80b883a 	mov	r5,r23
 104130c:	d9811e04 	addi	r6,sp,1144
 1041310:	1047e540 	call	1047e54 <__sprint_r>
 1041314:	103f541e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041318:	e73ffc04 	addi	fp,fp,-16
 104131c:	d8c12017 	ldw	r3,1152(sp)
 1041320:	d8811f17 	ldw	r2,1148(sp)
 1041324:	da000404 	addi	r8,sp,16
 1041328:	af3fed16 	blt	r21,fp,10412e0 <__alt_data_end+0xfffe12e0>
 104132c:	db013617 	ldw	r12,1240(sp)
 1041330:	e0c7883a 	add	r3,fp,r3
 1041334:	10800044 	addi	r2,r2,1
 1041338:	43000015 	stw	r12,0(r8)
 104133c:	47000115 	stw	fp,4(r8)
 1041340:	d8c12015 	stw	r3,1152(sp)
 1041344:	d8811f15 	stw	r2,1148(sp)
 1041348:	010001c4 	movi	r4,7
 104134c:	2082f416 	blt	r4,r2,1041f20 <___vfprintf_internal_r+0x1314>
 1041350:	d8812787 	ldb	r2,1182(sp)
 1041354:	42000204 	addi	r8,r8,8
 1041358:	10000c26 	beq	r2,zero,104138c <___vfprintf_internal_r+0x780>
 104135c:	d8811f17 	ldw	r2,1148(sp)
 1041360:	d9012784 	addi	r4,sp,1182
 1041364:	18c00044 	addi	r3,r3,1
 1041368:	10800044 	addi	r2,r2,1
 104136c:	41000015 	stw	r4,0(r8)
 1041370:	01000044 	movi	r4,1
 1041374:	41000115 	stw	r4,4(r8)
 1041378:	d8c12015 	stw	r3,1152(sp)
 104137c:	d8811f15 	stw	r2,1148(sp)
 1041380:	010001c4 	movi	r4,7
 1041384:	20828d16 	blt	r4,r2,1041dbc <___vfprintf_internal_r+0x11b0>
 1041388:	42000204 	addi	r8,r8,8
 104138c:	dac12c17 	ldw	r11,1200(sp)
 1041390:	58000c26 	beq	r11,zero,10413c4 <___vfprintf_internal_r+0x7b8>
 1041394:	d8811f17 	ldw	r2,1148(sp)
 1041398:	d9012704 	addi	r4,sp,1180
 104139c:	18c00084 	addi	r3,r3,2
 10413a0:	10800044 	addi	r2,r2,1
 10413a4:	41000015 	stw	r4,0(r8)
 10413a8:	01000084 	movi	r4,2
 10413ac:	41000115 	stw	r4,4(r8)
 10413b0:	d8c12015 	stw	r3,1152(sp)
 10413b4:	d8811f15 	stw	r2,1148(sp)
 10413b8:	010001c4 	movi	r4,7
 10413bc:	20828716 	blt	r4,r2,1041ddc <___vfprintf_internal_r+0x11d0>
 10413c0:	42000204 	addi	r8,r8,8
 10413c4:	db013017 	ldw	r12,1216(sp)
 10413c8:	00802004 	movi	r2,128
 10413cc:	6081e926 	beq	r12,r2,1041b74 <___vfprintf_internal_r+0xf68>
 10413d0:	db013217 	ldw	r12,1224(sp)
 10413d4:	64abc83a 	sub	r21,r12,r18
 10413d8:	0540260e 	bge	zero,r21,1041474 <___vfprintf_internal_r+0x868>
 10413dc:	07000404 	movi	fp,16
 10413e0:	d8811f17 	ldw	r2,1148(sp)
 10413e4:	e5443d0e 	bge	fp,r21,10424dc <___vfprintf_internal_r+0x18d0>
 10413e8:	01404174 	movhi	r5,261
 10413ec:	297e3784 	addi	r5,r5,-1826
 10413f0:	d9412c15 	stw	r5,1200(sp)
 10413f4:	04c001c4 	movi	r19,7
 10413f8:	00000306 	br	1041408 <___vfprintf_internal_r+0x7fc>
 10413fc:	ad7ffc04 	addi	r21,r21,-16
 1041400:	42000204 	addi	r8,r8,8
 1041404:	e540110e 	bge	fp,r21,104144c <___vfprintf_internal_r+0x840>
 1041408:	18c00404 	addi	r3,r3,16
 104140c:	10800044 	addi	r2,r2,1
 1041410:	45000015 	stw	r20,0(r8)
 1041414:	47000115 	stw	fp,4(r8)
 1041418:	d8c12015 	stw	r3,1152(sp)
 104141c:	d8811f15 	stw	r2,1148(sp)
 1041420:	98bff60e 	bge	r19,r2,10413fc <__alt_data_end+0xfffe13fc>
 1041424:	b009883a 	mov	r4,r22
 1041428:	b80b883a 	mov	r5,r23
 104142c:	d9811e04 	addi	r6,sp,1144
 1041430:	1047e540 	call	1047e54 <__sprint_r>
 1041434:	103f0c1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041438:	ad7ffc04 	addi	r21,r21,-16
 104143c:	d8c12017 	ldw	r3,1152(sp)
 1041440:	d8811f17 	ldw	r2,1148(sp)
 1041444:	da000404 	addi	r8,sp,16
 1041448:	e57fef16 	blt	fp,r21,1041408 <__alt_data_end+0xfffe1408>
 104144c:	dac12c17 	ldw	r11,1200(sp)
 1041450:	1d47883a 	add	r3,r3,r21
 1041454:	10800044 	addi	r2,r2,1
 1041458:	42c00015 	stw	r11,0(r8)
 104145c:	45400115 	stw	r21,4(r8)
 1041460:	d8c12015 	stw	r3,1152(sp)
 1041464:	d8811f15 	stw	r2,1148(sp)
 1041468:	010001c4 	movi	r4,7
 104146c:	20824b16 	blt	r4,r2,1041d9c <___vfprintf_internal_r+0x1190>
 1041470:	42000204 	addi	r8,r8,8
 1041474:	8880400c 	andi	r2,r17,256
 1041478:	1001761e 	bne	r2,zero,1041a54 <___vfprintf_internal_r+0xe48>
 104147c:	d8811f17 	ldw	r2,1148(sp)
 1041480:	db013117 	ldw	r12,1220(sp)
 1041484:	1c87883a 	add	r3,r3,r18
 1041488:	10800044 	addi	r2,r2,1
 104148c:	43000015 	stw	r12,0(r8)
 1041490:	44800115 	stw	r18,4(r8)
 1041494:	d8c12015 	stw	r3,1152(sp)
 1041498:	d8811f15 	stw	r2,1148(sp)
 104149c:	010001c4 	movi	r4,7
 10414a0:	20822616 	blt	r4,r2,1041d3c <___vfprintf_internal_r+0x1130>
 10414a4:	42000204 	addi	r8,r8,8
 10414a8:	8c40010c 	andi	r17,r17,4
 10414ac:	88003126 	beq	r17,zero,1041574 <___vfprintf_internal_r+0x968>
 10414b0:	db012e17 	ldw	r12,1208(sp)
 10414b4:	dac12b17 	ldw	r11,1196(sp)
 10414b8:	62e1c83a 	sub	r16,r12,r11
 10414bc:	04002d0e 	bge	zero,r16,1041574 <___vfprintf_internal_r+0x968>
 10414c0:	04400404 	movi	r17,16
 10414c4:	d8811f17 	ldw	r2,1148(sp)
 10414c8:	8c04df0e 	bge	r17,r16,1042848 <___vfprintf_internal_r+0x1c3c>
 10414cc:	01004174 	movhi	r4,261
 10414d0:	213e3b84 	addi	r4,r4,-1810
 10414d4:	d9013615 	stw	r4,1240(sp)
 10414d8:	048001c4 	movi	r18,7
 10414dc:	00000306 	br	10414ec <___vfprintf_internal_r+0x8e0>
 10414e0:	843ffc04 	addi	r16,r16,-16
 10414e4:	42000204 	addi	r8,r8,8
 10414e8:	8c00130e 	bge	r17,r16,1041538 <___vfprintf_internal_r+0x92c>
 10414ec:	01404174 	movhi	r5,261
 10414f0:	18c00404 	addi	r3,r3,16
 10414f4:	10800044 	addi	r2,r2,1
 10414f8:	297e3b84 	addi	r5,r5,-1810
 10414fc:	41400015 	stw	r5,0(r8)
 1041500:	44400115 	stw	r17,4(r8)
 1041504:	d8c12015 	stw	r3,1152(sp)
 1041508:	d8811f15 	stw	r2,1148(sp)
 104150c:	90bff40e 	bge	r18,r2,10414e0 <__alt_data_end+0xfffe14e0>
 1041510:	b009883a 	mov	r4,r22
 1041514:	b80b883a 	mov	r5,r23
 1041518:	d9811e04 	addi	r6,sp,1144
 104151c:	1047e540 	call	1047e54 <__sprint_r>
 1041520:	103ed11e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041524:	843ffc04 	addi	r16,r16,-16
 1041528:	d8c12017 	ldw	r3,1152(sp)
 104152c:	d8811f17 	ldw	r2,1148(sp)
 1041530:	da000404 	addi	r8,sp,16
 1041534:	8c3fed16 	blt	r17,r16,10414ec <__alt_data_end+0xfffe14ec>
 1041538:	dac13617 	ldw	r11,1240(sp)
 104153c:	1c07883a 	add	r3,r3,r16
 1041540:	10800044 	addi	r2,r2,1
 1041544:	42c00015 	stw	r11,0(r8)
 1041548:	44000115 	stw	r16,4(r8)
 104154c:	d8c12015 	stw	r3,1152(sp)
 1041550:	d8811f15 	stw	r2,1148(sp)
 1041554:	010001c4 	movi	r4,7
 1041558:	2080060e 	bge	r4,r2,1041574 <___vfprintf_internal_r+0x968>
 104155c:	b009883a 	mov	r4,r22
 1041560:	b80b883a 	mov	r5,r23
 1041564:	d9811e04 	addi	r6,sp,1144
 1041568:	1047e540 	call	1047e54 <__sprint_r>
 104156c:	103ebe1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041570:	d8c12017 	ldw	r3,1152(sp)
 1041574:	d8812b17 	ldw	r2,1196(sp)
 1041578:	db012e17 	ldw	r12,1208(sp)
 104157c:	1300010e 	bge	r2,r12,1041584 <___vfprintf_internal_r+0x978>
 1041580:	6005883a 	mov	r2,r12
 1041584:	dac12f17 	ldw	r11,1212(sp)
 1041588:	5897883a 	add	r11,r11,r2
 104158c:	dac12f15 	stw	r11,1212(sp)
 1041590:	1801f21e 	bne	r3,zero,1041d5c <___vfprintf_internal_r+0x1150>
 1041594:	d8011f15 	stw	zero,1148(sp)
 1041598:	da000404 	addi	r8,sp,16
 104159c:	003dd806 	br	1040d00 <__alt_data_end+0xfffe0d00>
 10415a0:	8c400414 	ori	r17,r17,16
 10415a4:	d8c12a15 	stw	r3,1192(sp)
 10415a8:	88c0080c 	andi	r3,r17,32
 10415ac:	d8812d17 	ldw	r2,1204(sp)
 10415b0:	18004626 	beq	r3,zero,10416cc <___vfprintf_internal_r+0xac0>
 10415b4:	dac12d17 	ldw	r11,1204(sp)
 10415b8:	14c00017 	ldw	r19,0(r2)
 10415bc:	17000117 	ldw	fp,4(r2)
 10415c0:	5ac00204 	addi	r11,r11,8
 10415c4:	dac12d15 	stw	r11,1204(sp)
 10415c8:	00800044 	movi	r2,1
 10415cc:	9f06b03a 	or	r3,r19,fp
 10415d0:	003f0006 	br	10411d4 <__alt_data_end+0xfffe11d4>
 10415d4:	1805883a 	mov	r2,r3
 10415d8:	d8012e15 	stw	zero,1208(sp)
 10415dc:	82fff404 	addi	r11,r16,-48
 10415e0:	0019883a 	mov	r12,zero
 10415e4:	14000007 	ldb	r16,0(r2)
 10415e8:	630002a4 	muli	r12,r12,10
 10415ec:	18c00044 	addi	r3,r3,1
 10415f0:	1805883a 	mov	r2,r3
 10415f4:	62d9883a 	add	r12,r12,r11
 10415f8:	82fff404 	addi	r11,r16,-48
 10415fc:	2afff92e 	bgeu	r5,r11,10415e4 <__alt_data_end+0xfffe15e4>
 1041600:	db012e15 	stw	r12,1208(sp)
 1041604:	003de906 	br	1040dac <__alt_data_end+0xfffe0dac>
 1041608:	8c400414 	ori	r17,r17,16
 104160c:	d8c12a15 	stw	r3,1192(sp)
 1041610:	d9812785 	stb	r6,1182(sp)
 1041614:	8880080c 	andi	r2,r17,32
 1041618:	d8c12d17 	ldw	r3,1204(sp)
 104161c:	10007a26 	beq	r2,zero,1041808 <___vfprintf_internal_r+0xbfc>
 1041620:	db012d17 	ldw	r12,1204(sp)
 1041624:	18800117 	ldw	r2,4(r3)
 1041628:	1cc00017 	ldw	r19,0(r3)
 104162c:	63000204 	addi	r12,r12,8
 1041630:	db012d15 	stw	r12,1204(sp)
 1041634:	1039883a 	mov	fp,r2
 1041638:	10031016 	blt	r2,zero,104227c <___vfprintf_internal_r+0x1670>
 104163c:	dd412783 	ldbu	r21,1182(sp)
 1041640:	da413215 	stw	r9,1224(sp)
 1041644:	00800044 	movi	r2,1
 1041648:	9f06b03a 	or	r3,r19,fp
 104164c:	003ee406 	br	10411e0 <__alt_data_end+0xfffe11e0>
 1041650:	03004174 	movhi	r12,261
 1041654:	633e2b04 	addi	r12,r12,-1876
 1041658:	d8c12a15 	stw	r3,1192(sp)
 104165c:	d9812785 	stb	r6,1182(sp)
 1041660:	db013b15 	stw	r12,1260(sp)
 1041664:	88c0080c 	andi	r3,r17,32
 1041668:	d8812d17 	ldw	r2,1204(sp)
 104166c:	18002b26 	beq	r3,zero,104171c <___vfprintf_internal_r+0xb10>
 1041670:	dac12d17 	ldw	r11,1204(sp)
 1041674:	14c00017 	ldw	r19,0(r2)
 1041678:	17000117 	ldw	fp,4(r2)
 104167c:	5ac00204 	addi	r11,r11,8
 1041680:	dac12d15 	stw	r11,1204(sp)
 1041684:	8880004c 	andi	r2,r17,1
 1041688:	10025b26 	beq	r2,zero,1041ff8 <___vfprintf_internal_r+0x13ec>
 104168c:	9f06b03a 	or	r3,r19,fp
 1041690:	18037026 	beq	r3,zero,1042454 <___vfprintf_internal_r+0x1848>
 1041694:	00800c04 	movi	r2,48
 1041698:	d8812705 	stb	r2,1180(sp)
 104169c:	dc012745 	stb	r16,1181(sp)
 10416a0:	8c400094 	ori	r17,r17,2
 10416a4:	00800084 	movi	r2,2
 10416a8:	003eca06 	br	10411d4 <__alt_data_end+0xfffe11d4>
 10416ac:	8c400814 	ori	r17,r17,32
 10416b0:	1805883a 	mov	r2,r3
 10416b4:	1c000007 	ldb	r16,0(r3)
 10416b8:	003dbb06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10416bc:	d8c12a15 	stw	r3,1192(sp)
 10416c0:	88c0080c 	andi	r3,r17,32
 10416c4:	d8812d17 	ldw	r2,1204(sp)
 10416c8:	183fba1e 	bne	r3,zero,10415b4 <__alt_data_end+0xfffe15b4>
 10416cc:	88c0040c 	andi	r3,r17,16
 10416d0:	18024c1e 	bne	r3,zero,1042004 <___vfprintf_internal_r+0x13f8>
 10416d4:	88c0100c 	andi	r3,r17,64
 10416d8:	18024a26 	beq	r3,zero,1042004 <___vfprintf_internal_r+0x13f8>
 10416dc:	dac12d17 	ldw	r11,1204(sp)
 10416e0:	14c0000b 	ldhu	r19,0(r2)
 10416e4:	0039883a 	mov	fp,zero
 10416e8:	5ac00104 	addi	r11,r11,4
 10416ec:	dac12d15 	stw	r11,1204(sp)
 10416f0:	00800044 	movi	r2,1
 10416f4:	9807883a 	mov	r3,r19
 10416f8:	003eb606 	br	10411d4 <__alt_data_end+0xfffe11d4>
 10416fc:	00804174 	movhi	r2,261
 1041700:	10be3004 	addi	r2,r2,-1856
 1041704:	d8c12a15 	stw	r3,1192(sp)
 1041708:	d8813b15 	stw	r2,1260(sp)
 104170c:	d9812785 	stb	r6,1182(sp)
 1041710:	88c0080c 	andi	r3,r17,32
 1041714:	d8812d17 	ldw	r2,1204(sp)
 1041718:	183fd51e 	bne	r3,zero,1041670 <__alt_data_end+0xfffe1670>
 104171c:	88c0040c 	andi	r3,r17,16
 1041720:	18034126 	beq	r3,zero,1042428 <___vfprintf_internal_r+0x181c>
 1041724:	db012d17 	ldw	r12,1204(sp)
 1041728:	14c00017 	ldw	r19,0(r2)
 104172c:	0039883a 	mov	fp,zero
 1041730:	63000104 	addi	r12,r12,4
 1041734:	db012d15 	stw	r12,1204(sp)
 1041738:	003fd206 	br	1041684 <__alt_data_end+0xfffe1684>
 104173c:	1c000007 	ldb	r16,0(r3)
 1041740:	81c3d626 	beq	r16,r7,104269c <___vfprintf_internal_r+0x1a90>
 1041744:	8c400414 	ori	r17,r17,16
 1041748:	1805883a 	mov	r2,r3
 104174c:	003d9606 	br	1040da8 <__alt_data_end+0xfffe0da8>
 1041750:	d8c12a15 	stw	r3,1192(sp)
 1041754:	d9812785 	stb	r6,1182(sp)
 1041758:	8880080c 	andi	r2,r17,32
 104175c:	10033f26 	beq	r2,zero,104245c <___vfprintf_internal_r+0x1850>
 1041760:	db012d17 	ldw	r12,1204(sp)
 1041764:	dac12f17 	ldw	r11,1212(sp)
 1041768:	60800017 	ldw	r2,0(r12)
 104176c:	5807d7fa 	srai	r3,r11,31
 1041770:	63000104 	addi	r12,r12,4
 1041774:	db012d15 	stw	r12,1204(sp)
 1041778:	12c00015 	stw	r11,0(r2)
 104177c:	10c00115 	stw	r3,4(r2)
 1041780:	003d5f06 	br	1040d00 <__alt_data_end+0xfffe0d00>
 1041784:	d8c12a15 	stw	r3,1192(sp)
 1041788:	88c0080c 	andi	r3,r17,32
 104178c:	d8812d17 	ldw	r2,1204(sp)
 1041790:	183e891e 	bne	r3,zero,10411b8 <__alt_data_end+0xfffe11b8>
 1041794:	88c0040c 	andi	r3,r17,16
 1041798:	1801ea1e 	bne	r3,zero,1041f44 <___vfprintf_internal_r+0x1338>
 104179c:	88c0100c 	andi	r3,r17,64
 10417a0:	1801e826 	beq	r3,zero,1041f44 <___vfprintf_internal_r+0x1338>
 10417a4:	db012d17 	ldw	r12,1204(sp)
 10417a8:	14c0000b 	ldhu	r19,0(r2)
 10417ac:	0039883a 	mov	fp,zero
 10417b0:	63000104 	addi	r12,r12,4
 10417b4:	db012d15 	stw	r12,1204(sp)
 10417b8:	0005883a 	mov	r2,zero
 10417bc:	9807883a 	mov	r3,r19
 10417c0:	003e8406 	br	10411d4 <__alt_data_end+0xfffe11d4>
 10417c4:	30803fcc 	andi	r2,r6,255
 10417c8:	1080201c 	xori	r2,r2,128
 10417cc:	10bfe004 	addi	r2,r2,-128
 10417d0:	10031d1e 	bne	r2,zero,1042448 <___vfprintf_internal_r+0x183c>
 10417d4:	1805883a 	mov	r2,r3
 10417d8:	01800804 	movi	r6,32
 10417dc:	1c000007 	ldb	r16,0(r3)
 10417e0:	003d7106 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10417e4:	8c400054 	ori	r17,r17,1
 10417e8:	1805883a 	mov	r2,r3
 10417ec:	1c000007 	ldb	r16,0(r3)
 10417f0:	003d6d06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10417f4:	d8c12a15 	stw	r3,1192(sp)
 10417f8:	d9812785 	stb	r6,1182(sp)
 10417fc:	8880080c 	andi	r2,r17,32
 1041800:	d8c12d17 	ldw	r3,1204(sp)
 1041804:	103f861e 	bne	r2,zero,1041620 <__alt_data_end+0xfffe1620>
 1041808:	8880040c 	andi	r2,r17,16
 104180c:	1001f31e 	bne	r2,zero,1041fdc <___vfprintf_internal_r+0x13d0>
 1041810:	8880100c 	andi	r2,r17,64
 1041814:	1001f126 	beq	r2,zero,1041fdc <___vfprintf_internal_r+0x13d0>
 1041818:	1cc0000f 	ldh	r19,0(r3)
 104181c:	db012d17 	ldw	r12,1204(sp)
 1041820:	9839d7fa 	srai	fp,r19,31
 1041824:	63000104 	addi	r12,r12,4
 1041828:	db012d15 	stw	r12,1204(sp)
 104182c:	e005883a 	mov	r2,fp
 1041830:	003f8106 	br	1041638 <__alt_data_end+0xfffe1638>
 1041834:	8c401014 	ori	r17,r17,64
 1041838:	1805883a 	mov	r2,r3
 104183c:	1c000007 	ldb	r16,0(r3)
 1041840:	003d5906 	br	1040da8 <__alt_data_end+0xfffe0da8>
 1041844:	db012d17 	ldw	r12,1204(sp)
 1041848:	d8c12a15 	stw	r3,1192(sp)
 104184c:	00c00044 	movi	r3,1
 1041850:	60800017 	ldw	r2,0(r12)
 1041854:	63000104 	addi	r12,r12,4
 1041858:	d8c12b15 	stw	r3,1196(sp)
 104185c:	d8012785 	stb	zero,1182(sp)
 1041860:	d8810405 	stb	r2,1040(sp)
 1041864:	db012d15 	stw	r12,1204(sp)
 1041868:	dac10404 	addi	r11,sp,1040
 104186c:	1825883a 	mov	r18,r3
 1041870:	d8013215 	stw	zero,1224(sp)
 1041874:	d8013415 	stw	zero,1232(sp)
 1041878:	dac13115 	stw	r11,1220(sp)
 104187c:	0005883a 	mov	r2,zero
 1041880:	003e7d06 	br	1041278 <__alt_data_end+0xfffe1278>
 1041884:	db012d17 	ldw	r12,1204(sp)
 1041888:	00800c04 	movi	r2,48
 104188c:	d8812705 	stb	r2,1180(sp)
 1041890:	64c00017 	ldw	r19,0(r12)
 1041894:	00801e04 	movi	r2,120
 1041898:	d8812745 	stb	r2,1181(sp)
 104189c:	00804174 	movhi	r2,261
 10418a0:	10be3004 	addi	r2,r2,-1856
 10418a4:	63000104 	addi	r12,r12,4
 10418a8:	d8c12a15 	stw	r3,1192(sp)
 10418ac:	d8813b15 	stw	r2,1260(sp)
 10418b0:	0039883a 	mov	fp,zero
 10418b4:	8c400094 	ori	r17,r17,2
 10418b8:	db012d15 	stw	r12,1204(sp)
 10418bc:	00800084 	movi	r2,2
 10418c0:	04001e04 	movi	r16,120
 10418c4:	9807883a 	mov	r3,r19
 10418c8:	003e4206 	br	10411d4 <__alt_data_end+0xfffe11d4>
 10418cc:	dac12d17 	ldw	r11,1204(sp)
 10418d0:	db012d17 	ldw	r12,1204(sp)
 10418d4:	d8c12a15 	stw	r3,1192(sp)
 10418d8:	5ac00017 	ldw	r11,0(r11)
 10418dc:	d8012785 	stb	zero,1182(sp)
 10418e0:	64c00104 	addi	r19,r12,4
 10418e4:	dac13115 	stw	r11,1220(sp)
 10418e8:	5803e826 	beq	r11,zero,104288c <___vfprintf_internal_r+0x1c80>
 10418ec:	d9013117 	ldw	r4,1220(sp)
 10418f0:	48037a16 	blt	r9,zero,10426dc <___vfprintf_internal_r+0x1ad0>
 10418f4:	480d883a 	mov	r6,r9
 10418f8:	000b883a 	mov	r5,zero
 10418fc:	da013f15 	stw	r8,1276(sp)
 1041900:	da413e15 	stw	r9,1272(sp)
 1041904:	10460e40 	call	10460e4 <memchr>
 1041908:	da013f17 	ldw	r8,1276(sp)
 104190c:	da413e17 	ldw	r9,1272(sp)
 1041910:	10044426 	beq	r2,zero,1042a24 <___vfprintf_internal_r+0x1e18>
 1041914:	d8c13117 	ldw	r3,1220(sp)
 1041918:	10e5c83a 	sub	r18,r2,r3
 104191c:	4c834416 	blt	r9,r18,1042630 <___vfprintf_internal_r+0x1a24>
 1041920:	9005883a 	mov	r2,r18
 1041924:	90037216 	blt	r18,zero,10426f0 <___vfprintf_internal_r+0x1ae4>
 1041928:	dd412783 	ldbu	r21,1182(sp)
 104192c:	d8812b15 	stw	r2,1196(sp)
 1041930:	dcc12d15 	stw	r19,1204(sp)
 1041934:	d8013215 	stw	zero,1224(sp)
 1041938:	d8013415 	stw	zero,1232(sp)
 104193c:	003e4706 	br	104125c <__alt_data_end+0xfffe125c>
 1041940:	dac12d17 	ldw	r11,1204(sp)
 1041944:	db012d17 	ldw	r12,1204(sp)
 1041948:	5ac00017 	ldw	r11,0(r11)
 104194c:	dac12e15 	stw	r11,1208(sp)
 1041950:	62c00104 	addi	r11,r12,4
 1041954:	db012e17 	ldw	r12,1208(sp)
 1041958:	60034a16 	blt	r12,zero,1042684 <___vfprintf_internal_r+0x1a78>
 104195c:	dac12d15 	stw	r11,1204(sp)
 1041960:	1805883a 	mov	r2,r3
 1041964:	1c000007 	ldb	r16,0(r3)
 1041968:	003d0f06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 104196c:	1805883a 	mov	r2,r3
 1041970:	01800ac4 	movi	r6,43
 1041974:	1c000007 	ldb	r16,0(r3)
 1041978:	003d0b06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 104197c:	d8c12a15 	stw	r3,1192(sp)
 1041980:	d9812785 	stb	r6,1182(sp)
 1041984:	803db226 	beq	r16,zero,1041050 <__alt_data_end+0xfffe1050>
 1041988:	00c00044 	movi	r3,1
 104198c:	d8c12b15 	stw	r3,1196(sp)
 1041990:	dc010405 	stb	r16,1040(sp)
 1041994:	d8012785 	stb	zero,1182(sp)
 1041998:	003fb306 	br	1041868 <__alt_data_end+0xfffe1868>
 104199c:	d8c12017 	ldw	r3,1152(sp)
 10419a0:	003e6d06 	br	1041358 <__alt_data_end+0xfffe1358>
 10419a4:	10803fcc 	andi	r2,r2,255
 10419a8:	00c00044 	movi	r3,1
 10419ac:	10fe141e 	bne	r2,r3,1041200 <__alt_data_end+0xfffe1200>
 10419b0:	e000021e 	bne	fp,zero,10419bc <___vfprintf_internal_r+0xdb0>
 10419b4:	00800244 	movi	r2,9
 10419b8:	14c0202e 	bgeu	r2,r19,1041a3c <___vfprintf_internal_r+0xe30>
 10419bc:	dc012b15 	stw	r16,1196(sp)
 10419c0:	dc412c15 	stw	r17,1200(sp)
 10419c4:	9821883a 	mov	r16,r19
 10419c8:	e023883a 	mov	r17,fp
 10419cc:	dc810e04 	addi	r18,sp,1080
 10419d0:	4027883a 	mov	r19,r8
 10419d4:	4839883a 	mov	fp,r9
 10419d8:	8009883a 	mov	r4,r16
 10419dc:	880b883a 	mov	r5,r17
 10419e0:	01800284 	movi	r6,10
 10419e4:	000f883a 	mov	r7,zero
 10419e8:	104a0e40 	call	104a0e4 <__umoddi3>
 10419ec:	10800c04 	addi	r2,r2,48
 10419f0:	94bfffc4 	addi	r18,r18,-1
 10419f4:	8009883a 	mov	r4,r16
 10419f8:	880b883a 	mov	r5,r17
 10419fc:	01800284 	movi	r6,10
 1041a00:	000f883a 	mov	r7,zero
 1041a04:	90800005 	stb	r2,0(r18)
 1041a08:	1049b240 	call	1049b24 <__udivdi3>
 1041a0c:	1021883a 	mov	r16,r2
 1041a10:	10c4b03a 	or	r2,r2,r3
 1041a14:	1823883a 	mov	r17,r3
 1041a18:	103fef1e 	bne	r2,zero,10419d8 <__alt_data_end+0xfffe19d8>
 1041a1c:	dac12817 	ldw	r11,1184(sp)
 1041a20:	dc813115 	stw	r18,1220(sp)
 1041a24:	dc012b17 	ldw	r16,1196(sp)
 1041a28:	9811883a 	mov	r8,r19
 1041a2c:	dc412c17 	ldw	r17,1200(sp)
 1041a30:	e013883a 	mov	r9,fp
 1041a34:	5ca5c83a 	sub	r18,r11,r18
 1041a38:	003e0306 	br	1041248 <__alt_data_end+0xfffe1248>
 1041a3c:	9cc00c04 	addi	r19,r19,48
 1041a40:	d8c10dc4 	addi	r3,sp,1079
 1041a44:	dcc10dc5 	stb	r19,1079(sp)
 1041a48:	dc813c17 	ldw	r18,1264(sp)
 1041a4c:	d8c13115 	stw	r3,1220(sp)
 1041a50:	003dfd06 	br	1041248 <__alt_data_end+0xfffe1248>
 1041a54:	00801944 	movi	r2,101
 1041a58:	1400710e 	bge	r2,r16,1041c20 <___vfprintf_internal_r+0x1014>
 1041a5c:	d9013717 	ldw	r4,1244(sp)
 1041a60:	d9413917 	ldw	r5,1252(sp)
 1041a64:	000d883a 	mov	r6,zero
 1041a68:	000f883a 	mov	r7,zero
 1041a6c:	d8c13d15 	stw	r3,1268(sp)
 1041a70:	da013f15 	stw	r8,1276(sp)
 1041a74:	104b9080 	call	104b908 <__eqdf2>
 1041a78:	d8c13d17 	ldw	r3,1268(sp)
 1041a7c:	da013f17 	ldw	r8,1276(sp)
 1041a80:	1000ef1e 	bne	r2,zero,1041e40 <___vfprintf_internal_r+0x1234>
 1041a84:	d8811f17 	ldw	r2,1148(sp)
 1041a88:	01004174 	movhi	r4,261
 1041a8c:	213e3704 	addi	r4,r4,-1828
 1041a90:	18c00044 	addi	r3,r3,1
 1041a94:	10800044 	addi	r2,r2,1
 1041a98:	41000015 	stw	r4,0(r8)
 1041a9c:	01000044 	movi	r4,1
 1041aa0:	41000115 	stw	r4,4(r8)
 1041aa4:	d8c12015 	stw	r3,1152(sp)
 1041aa8:	d8811f15 	stw	r2,1148(sp)
 1041aac:	010001c4 	movi	r4,7
 1041ab0:	20828e16 	blt	r4,r2,10424ec <___vfprintf_internal_r+0x18e0>
 1041ab4:	42000204 	addi	r8,r8,8
 1041ab8:	d8812617 	ldw	r2,1176(sp)
 1041abc:	dac13317 	ldw	r11,1228(sp)
 1041ac0:	12c00216 	blt	r2,r11,1041acc <___vfprintf_internal_r+0xec0>
 1041ac4:	8880004c 	andi	r2,r17,1
 1041ac8:	103e7726 	beq	r2,zero,10414a8 <__alt_data_end+0xfffe14a8>
 1041acc:	db013817 	ldw	r12,1248(sp)
 1041ad0:	d8811f17 	ldw	r2,1148(sp)
 1041ad4:	dac13517 	ldw	r11,1236(sp)
 1041ad8:	1b07883a 	add	r3,r3,r12
 1041adc:	10800044 	addi	r2,r2,1
 1041ae0:	42c00015 	stw	r11,0(r8)
 1041ae4:	43000115 	stw	r12,4(r8)
 1041ae8:	d8c12015 	stw	r3,1152(sp)
 1041aec:	d8811f15 	stw	r2,1148(sp)
 1041af0:	010001c4 	movi	r4,7
 1041af4:	2082ed16 	blt	r4,r2,10426ac <___vfprintf_internal_r+0x1aa0>
 1041af8:	42000204 	addi	r8,r8,8
 1041afc:	db013317 	ldw	r12,1228(sp)
 1041b00:	643fffc4 	addi	r16,r12,-1
 1041b04:	043e680e 	bge	zero,r16,10414a8 <__alt_data_end+0xfffe14a8>
 1041b08:	04800404 	movi	r18,16
 1041b0c:	d8811f17 	ldw	r2,1148(sp)
 1041b10:	94007e0e 	bge	r18,r16,1041d0c <___vfprintf_internal_r+0x1100>
 1041b14:	01404174 	movhi	r5,261
 1041b18:	297e3784 	addi	r5,r5,-1826
 1041b1c:	d9412c15 	stw	r5,1200(sp)
 1041b20:	054001c4 	movi	r21,7
 1041b24:	00000306 	br	1041b34 <___vfprintf_internal_r+0xf28>
 1041b28:	42000204 	addi	r8,r8,8
 1041b2c:	843ffc04 	addi	r16,r16,-16
 1041b30:	9400790e 	bge	r18,r16,1041d18 <___vfprintf_internal_r+0x110c>
 1041b34:	18c00404 	addi	r3,r3,16
 1041b38:	10800044 	addi	r2,r2,1
 1041b3c:	45000015 	stw	r20,0(r8)
 1041b40:	44800115 	stw	r18,4(r8)
 1041b44:	d8c12015 	stw	r3,1152(sp)
 1041b48:	d8811f15 	stw	r2,1148(sp)
 1041b4c:	a8bff60e 	bge	r21,r2,1041b28 <__alt_data_end+0xfffe1b28>
 1041b50:	b009883a 	mov	r4,r22
 1041b54:	b80b883a 	mov	r5,r23
 1041b58:	d9811e04 	addi	r6,sp,1144
 1041b5c:	1047e540 	call	1047e54 <__sprint_r>
 1041b60:	103d411e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041b64:	d8c12017 	ldw	r3,1152(sp)
 1041b68:	d8811f17 	ldw	r2,1148(sp)
 1041b6c:	da000404 	addi	r8,sp,16
 1041b70:	003fee06 	br	1041b2c <__alt_data_end+0xfffe1b2c>
 1041b74:	dac12e17 	ldw	r11,1208(sp)
 1041b78:	db012b17 	ldw	r12,1196(sp)
 1041b7c:	5b2bc83a 	sub	r21,r11,r12
 1041b80:	057e130e 	bge	zero,r21,10413d0 <__alt_data_end+0xfffe13d0>
 1041b84:	07000404 	movi	fp,16
 1041b88:	d8811f17 	ldw	r2,1148(sp)
 1041b8c:	e543640e 	bge	fp,r21,1042920 <___vfprintf_internal_r+0x1d14>
 1041b90:	01404174 	movhi	r5,261
 1041b94:	297e3784 	addi	r5,r5,-1826
 1041b98:	d9412c15 	stw	r5,1200(sp)
 1041b9c:	04c001c4 	movi	r19,7
 1041ba0:	00000306 	br	1041bb0 <___vfprintf_internal_r+0xfa4>
 1041ba4:	ad7ffc04 	addi	r21,r21,-16
 1041ba8:	42000204 	addi	r8,r8,8
 1041bac:	e540110e 	bge	fp,r21,1041bf4 <___vfprintf_internal_r+0xfe8>
 1041bb0:	18c00404 	addi	r3,r3,16
 1041bb4:	10800044 	addi	r2,r2,1
 1041bb8:	45000015 	stw	r20,0(r8)
 1041bbc:	47000115 	stw	fp,4(r8)
 1041bc0:	d8c12015 	stw	r3,1152(sp)
 1041bc4:	d8811f15 	stw	r2,1148(sp)
 1041bc8:	98bff60e 	bge	r19,r2,1041ba4 <__alt_data_end+0xfffe1ba4>
 1041bcc:	b009883a 	mov	r4,r22
 1041bd0:	b80b883a 	mov	r5,r23
 1041bd4:	d9811e04 	addi	r6,sp,1144
 1041bd8:	1047e540 	call	1047e54 <__sprint_r>
 1041bdc:	103d221e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041be0:	ad7ffc04 	addi	r21,r21,-16
 1041be4:	d8c12017 	ldw	r3,1152(sp)
 1041be8:	d8811f17 	ldw	r2,1148(sp)
 1041bec:	da000404 	addi	r8,sp,16
 1041bf0:	e57fef16 	blt	fp,r21,1041bb0 <__alt_data_end+0xfffe1bb0>
 1041bf4:	dac12c17 	ldw	r11,1200(sp)
 1041bf8:	1d47883a 	add	r3,r3,r21
 1041bfc:	10800044 	addi	r2,r2,1
 1041c00:	42c00015 	stw	r11,0(r8)
 1041c04:	45400115 	stw	r21,4(r8)
 1041c08:	d8c12015 	stw	r3,1152(sp)
 1041c0c:	d8811f15 	stw	r2,1148(sp)
 1041c10:	010001c4 	movi	r4,7
 1041c14:	20819116 	blt	r4,r2,104225c <___vfprintf_internal_r+0x1650>
 1041c18:	42000204 	addi	r8,r8,8
 1041c1c:	003dec06 	br	10413d0 <__alt_data_end+0xfffe13d0>
 1041c20:	db013317 	ldw	r12,1228(sp)
 1041c24:	00800044 	movi	r2,1
 1041c28:	18c00044 	addi	r3,r3,1
 1041c2c:	1301530e 	bge	r2,r12,104217c <___vfprintf_internal_r+0x1570>
 1041c30:	dc011f17 	ldw	r16,1148(sp)
 1041c34:	dac13117 	ldw	r11,1220(sp)
 1041c38:	00800044 	movi	r2,1
 1041c3c:	84000044 	addi	r16,r16,1
 1041c40:	40800115 	stw	r2,4(r8)
 1041c44:	42c00015 	stw	r11,0(r8)
 1041c48:	d8c12015 	stw	r3,1152(sp)
 1041c4c:	dc011f15 	stw	r16,1148(sp)
 1041c50:	008001c4 	movi	r2,7
 1041c54:	14016b16 	blt	r2,r16,1042204 <___vfprintf_internal_r+0x15f8>
 1041c58:	42000204 	addi	r8,r8,8
 1041c5c:	db013817 	ldw	r12,1248(sp)
 1041c60:	dac13517 	ldw	r11,1236(sp)
 1041c64:	84000044 	addi	r16,r16,1
 1041c68:	1b07883a 	add	r3,r3,r12
 1041c6c:	42c00015 	stw	r11,0(r8)
 1041c70:	43000115 	stw	r12,4(r8)
 1041c74:	d8c12015 	stw	r3,1152(sp)
 1041c78:	dc011f15 	stw	r16,1148(sp)
 1041c7c:	008001c4 	movi	r2,7
 1041c80:	14016916 	blt	r2,r16,1042228 <___vfprintf_internal_r+0x161c>
 1041c84:	44800204 	addi	r18,r8,8
 1041c88:	d9013717 	ldw	r4,1244(sp)
 1041c8c:	d9413917 	ldw	r5,1252(sp)
 1041c90:	000d883a 	mov	r6,zero
 1041c94:	000f883a 	mov	r7,zero
 1041c98:	d8c13d15 	stw	r3,1268(sp)
 1041c9c:	104b9080 	call	104b908 <__eqdf2>
 1041ca0:	d8c13d17 	ldw	r3,1268(sp)
 1041ca4:	db013317 	ldw	r12,1228(sp)
 1041ca8:	1000ae26 	beq	r2,zero,1041f64 <___vfprintf_internal_r+0x1358>
 1041cac:	dac13117 	ldw	r11,1220(sp)
 1041cb0:	60bfffc4 	addi	r2,r12,-1
 1041cb4:	1887883a 	add	r3,r3,r2
 1041cb8:	59000044 	addi	r4,r11,1
 1041cbc:	84000044 	addi	r16,r16,1
 1041cc0:	90800115 	stw	r2,4(r18)
 1041cc4:	91000015 	stw	r4,0(r18)
 1041cc8:	d8c12015 	stw	r3,1152(sp)
 1041ccc:	dc011f15 	stw	r16,1148(sp)
 1041cd0:	008001c4 	movi	r2,7
 1041cd4:	14014216 	blt	r2,r16,10421e0 <___vfprintf_internal_r+0x15d4>
 1041cd8:	94800204 	addi	r18,r18,8
 1041cdc:	dac13a17 	ldw	r11,1256(sp)
 1041ce0:	dd4122c4 	addi	r21,sp,1163
 1041ce4:	84000044 	addi	r16,r16,1
 1041ce8:	58c7883a 	add	r3,r11,r3
 1041cec:	95400015 	stw	r21,0(r18)
 1041cf0:	92c00115 	stw	r11,4(r18)
 1041cf4:	d8c12015 	stw	r3,1152(sp)
 1041cf8:	dc011f15 	stw	r16,1148(sp)
 1041cfc:	008001c4 	movi	r2,7
 1041d00:	14000e16 	blt	r2,r16,1041d3c <___vfprintf_internal_r+0x1130>
 1041d04:	92000204 	addi	r8,r18,8
 1041d08:	003de706 	br	10414a8 <__alt_data_end+0xfffe14a8>
 1041d0c:	01004174 	movhi	r4,261
 1041d10:	213e3784 	addi	r4,r4,-1826
 1041d14:	d9012c15 	stw	r4,1200(sp)
 1041d18:	dac12c17 	ldw	r11,1200(sp)
 1041d1c:	1c07883a 	add	r3,r3,r16
 1041d20:	44000115 	stw	r16,4(r8)
 1041d24:	42c00015 	stw	r11,0(r8)
 1041d28:	10800044 	addi	r2,r2,1
 1041d2c:	d8c12015 	stw	r3,1152(sp)
 1041d30:	d8811f15 	stw	r2,1148(sp)
 1041d34:	010001c4 	movi	r4,7
 1041d38:	20bdda0e 	bge	r4,r2,10414a4 <__alt_data_end+0xfffe14a4>
 1041d3c:	b009883a 	mov	r4,r22
 1041d40:	b80b883a 	mov	r5,r23
 1041d44:	d9811e04 	addi	r6,sp,1144
 1041d48:	1047e540 	call	1047e54 <__sprint_r>
 1041d4c:	103cc61e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041d50:	d8c12017 	ldw	r3,1152(sp)
 1041d54:	da000404 	addi	r8,sp,16
 1041d58:	003dd306 	br	10414a8 <__alt_data_end+0xfffe14a8>
 1041d5c:	b009883a 	mov	r4,r22
 1041d60:	b80b883a 	mov	r5,r23
 1041d64:	d9811e04 	addi	r6,sp,1144
 1041d68:	1047e540 	call	1047e54 <__sprint_r>
 1041d6c:	103e0926 	beq	r2,zero,1041594 <__alt_data_end+0xfffe1594>
 1041d70:	003cbd06 	br	1041068 <__alt_data_end+0xfffe1068>
 1041d74:	10803fcc 	andi	r2,r2,255
 1041d78:	1000651e 	bne	r2,zero,1041f10 <___vfprintf_internal_r+0x1304>
 1041d7c:	8880004c 	andi	r2,r17,1
 1041d80:	10013226 	beq	r2,zero,104224c <___vfprintf_internal_r+0x1640>
 1041d84:	00800c04 	movi	r2,48
 1041d88:	d8c10dc4 	addi	r3,sp,1079
 1041d8c:	d8810dc5 	stb	r2,1079(sp)
 1041d90:	dc813c17 	ldw	r18,1264(sp)
 1041d94:	d8c13115 	stw	r3,1220(sp)
 1041d98:	003d2b06 	br	1041248 <__alt_data_end+0xfffe1248>
 1041d9c:	b009883a 	mov	r4,r22
 1041da0:	b80b883a 	mov	r5,r23
 1041da4:	d9811e04 	addi	r6,sp,1144
 1041da8:	1047e540 	call	1047e54 <__sprint_r>
 1041dac:	103cae1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041db0:	d8c12017 	ldw	r3,1152(sp)
 1041db4:	da000404 	addi	r8,sp,16
 1041db8:	003dae06 	br	1041474 <__alt_data_end+0xfffe1474>
 1041dbc:	b009883a 	mov	r4,r22
 1041dc0:	b80b883a 	mov	r5,r23
 1041dc4:	d9811e04 	addi	r6,sp,1144
 1041dc8:	1047e540 	call	1047e54 <__sprint_r>
 1041dcc:	103ca61e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041dd0:	d8c12017 	ldw	r3,1152(sp)
 1041dd4:	da000404 	addi	r8,sp,16
 1041dd8:	003d6c06 	br	104138c <__alt_data_end+0xfffe138c>
 1041ddc:	b009883a 	mov	r4,r22
 1041de0:	b80b883a 	mov	r5,r23
 1041de4:	d9811e04 	addi	r6,sp,1144
 1041de8:	1047e540 	call	1047e54 <__sprint_r>
 1041dec:	103c9e1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041df0:	d8c12017 	ldw	r3,1152(sp)
 1041df4:	da000404 	addi	r8,sp,16
 1041df8:	003d7206 	br	10413c4 <__alt_data_end+0xfffe13c4>
 1041dfc:	d9413b17 	ldw	r5,1260(sp)
 1041e00:	d8c10e04 	addi	r3,sp,1080
 1041e04:	988003cc 	andi	r2,r19,15
 1041e08:	e008973a 	slli	r4,fp,28
 1041e0c:	2885883a 	add	r2,r5,r2
 1041e10:	9826d13a 	srli	r19,r19,4
 1041e14:	10800003 	ldbu	r2,0(r2)
 1041e18:	e038d13a 	srli	fp,fp,4
 1041e1c:	18ffffc4 	addi	r3,r3,-1
 1041e20:	24e6b03a 	or	r19,r4,r19
 1041e24:	18800005 	stb	r2,0(r3)
 1041e28:	9f04b03a 	or	r2,r19,fp
 1041e2c:	103ff51e 	bne	r2,zero,1041e04 <__alt_data_end+0xfffe1e04>
 1041e30:	db012817 	ldw	r12,1184(sp)
 1041e34:	d8c13115 	stw	r3,1220(sp)
 1041e38:	60e5c83a 	sub	r18,r12,r3
 1041e3c:	003d0206 	br	1041248 <__alt_data_end+0xfffe1248>
 1041e40:	dc012617 	ldw	r16,1176(sp)
 1041e44:	0401b10e 	bge	zero,r16,104250c <___vfprintf_internal_r+0x1900>
 1041e48:	db013117 	ldw	r12,1220(sp)
 1041e4c:	dac13317 	ldw	r11,1228(sp)
 1041e50:	62e1883a 	add	r16,r12,r11
 1041e54:	db013417 	ldw	r12,1232(sp)
 1041e58:	5825883a 	mov	r18,r11
 1041e5c:	62c0010e 	bge	r12,r11,1041e64 <___vfprintf_internal_r+0x1258>
 1041e60:	6025883a 	mov	r18,r12
 1041e64:	04800b0e 	bge	zero,r18,1041e94 <___vfprintf_internal_r+0x1288>
 1041e68:	d8811f17 	ldw	r2,1148(sp)
 1041e6c:	dac13117 	ldw	r11,1220(sp)
 1041e70:	1c87883a 	add	r3,r3,r18
 1041e74:	10800044 	addi	r2,r2,1
 1041e78:	42c00015 	stw	r11,0(r8)
 1041e7c:	44800115 	stw	r18,4(r8)
 1041e80:	d8c12015 	stw	r3,1152(sp)
 1041e84:	d8811f15 	stw	r2,1148(sp)
 1041e88:	010001c4 	movi	r4,7
 1041e8c:	20824f16 	blt	r4,r2,10427cc <___vfprintf_internal_r+0x1bc0>
 1041e90:	42000204 	addi	r8,r8,8
 1041e94:	90024b16 	blt	r18,zero,10427c4 <___vfprintf_internal_r+0x1bb8>
 1041e98:	db013417 	ldw	r12,1232(sp)
 1041e9c:	64a5c83a 	sub	r18,r12,r18
 1041ea0:	0480730e 	bge	zero,r18,1042070 <___vfprintf_internal_r+0x1464>
 1041ea4:	05400404 	movi	r21,16
 1041ea8:	d8811f17 	ldw	r2,1148(sp)
 1041eac:	ac817d0e 	bge	r21,r18,10424a4 <___vfprintf_internal_r+0x1898>
 1041eb0:	01404174 	movhi	r5,261
 1041eb4:	297e3784 	addi	r5,r5,-1826
 1041eb8:	d9412c15 	stw	r5,1200(sp)
 1041ebc:	070001c4 	movi	fp,7
 1041ec0:	00000306 	br	1041ed0 <___vfprintf_internal_r+0x12c4>
 1041ec4:	42000204 	addi	r8,r8,8
 1041ec8:	94bffc04 	addi	r18,r18,-16
 1041ecc:	ac81780e 	bge	r21,r18,10424b0 <___vfprintf_internal_r+0x18a4>
 1041ed0:	18c00404 	addi	r3,r3,16
 1041ed4:	10800044 	addi	r2,r2,1
 1041ed8:	45000015 	stw	r20,0(r8)
 1041edc:	45400115 	stw	r21,4(r8)
 1041ee0:	d8c12015 	stw	r3,1152(sp)
 1041ee4:	d8811f15 	stw	r2,1148(sp)
 1041ee8:	e0bff60e 	bge	fp,r2,1041ec4 <__alt_data_end+0xfffe1ec4>
 1041eec:	b009883a 	mov	r4,r22
 1041ef0:	b80b883a 	mov	r5,r23
 1041ef4:	d9811e04 	addi	r6,sp,1144
 1041ef8:	1047e540 	call	1047e54 <__sprint_r>
 1041efc:	103c5a1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041f00:	d8c12017 	ldw	r3,1152(sp)
 1041f04:	d8811f17 	ldw	r2,1148(sp)
 1041f08:	da000404 	addi	r8,sp,16
 1041f0c:	003fee06 	br	1041ec8 <__alt_data_end+0xfffe1ec8>
 1041f10:	dac10e04 	addi	r11,sp,1080
 1041f14:	0025883a 	mov	r18,zero
 1041f18:	dac13115 	stw	r11,1220(sp)
 1041f1c:	003cca06 	br	1041248 <__alt_data_end+0xfffe1248>
 1041f20:	b009883a 	mov	r4,r22
 1041f24:	b80b883a 	mov	r5,r23
 1041f28:	d9811e04 	addi	r6,sp,1144
 1041f2c:	1047e540 	call	1047e54 <__sprint_r>
 1041f30:	103c4d1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041f34:	d8c12017 	ldw	r3,1152(sp)
 1041f38:	d8812787 	ldb	r2,1182(sp)
 1041f3c:	da000404 	addi	r8,sp,16
 1041f40:	003d0506 	br	1041358 <__alt_data_end+0xfffe1358>
 1041f44:	dac12d17 	ldw	r11,1204(sp)
 1041f48:	14c00017 	ldw	r19,0(r2)
 1041f4c:	0039883a 	mov	fp,zero
 1041f50:	5ac00104 	addi	r11,r11,4
 1041f54:	dac12d15 	stw	r11,1204(sp)
 1041f58:	0005883a 	mov	r2,zero
 1041f5c:	9807883a 	mov	r3,r19
 1041f60:	003c9c06 	br	10411d4 <__alt_data_end+0xfffe11d4>
 1041f64:	657fffc4 	addi	r21,r12,-1
 1041f68:	057f5c0e 	bge	zero,r21,1041cdc <__alt_data_end+0xfffe1cdc>
 1041f6c:	07000404 	movi	fp,16
 1041f70:	e5408f0e 	bge	fp,r21,10421b0 <___vfprintf_internal_r+0x15a4>
 1041f74:	01004174 	movhi	r4,261
 1041f78:	213e3784 	addi	r4,r4,-1826
 1041f7c:	d9012c15 	stw	r4,1200(sp)
 1041f80:	01c001c4 	movi	r7,7
 1041f84:	00000306 	br	1041f94 <___vfprintf_internal_r+0x1388>
 1041f88:	94800204 	addi	r18,r18,8
 1041f8c:	ad7ffc04 	addi	r21,r21,-16
 1041f90:	e5408a0e 	bge	fp,r21,10421bc <___vfprintf_internal_r+0x15b0>
 1041f94:	18c00404 	addi	r3,r3,16
 1041f98:	84000044 	addi	r16,r16,1
 1041f9c:	95000015 	stw	r20,0(r18)
 1041fa0:	97000115 	stw	fp,4(r18)
 1041fa4:	d8c12015 	stw	r3,1152(sp)
 1041fa8:	dc011f15 	stw	r16,1148(sp)
 1041fac:	3c3ff60e 	bge	r7,r16,1041f88 <__alt_data_end+0xfffe1f88>
 1041fb0:	b009883a 	mov	r4,r22
 1041fb4:	b80b883a 	mov	r5,r23
 1041fb8:	d9811e04 	addi	r6,sp,1144
 1041fbc:	d9c13d15 	stw	r7,1268(sp)
 1041fc0:	1047e540 	call	1047e54 <__sprint_r>
 1041fc4:	d9c13d17 	ldw	r7,1268(sp)
 1041fc8:	103c271e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1041fcc:	d8c12017 	ldw	r3,1152(sp)
 1041fd0:	dc011f17 	ldw	r16,1148(sp)
 1041fd4:	dc800404 	addi	r18,sp,16
 1041fd8:	003fec06 	br	1041f8c <__alt_data_end+0xfffe1f8c>
 1041fdc:	1cc00017 	ldw	r19,0(r3)
 1041fe0:	dac12d17 	ldw	r11,1204(sp)
 1041fe4:	9839d7fa 	srai	fp,r19,31
 1041fe8:	5ac00104 	addi	r11,r11,4
 1041fec:	dac12d15 	stw	r11,1204(sp)
 1041ff0:	e005883a 	mov	r2,fp
 1041ff4:	003d9006 	br	1041638 <__alt_data_end+0xfffe1638>
 1041ff8:	00800084 	movi	r2,2
 1041ffc:	9f06b03a 	or	r3,r19,fp
 1042000:	003c7406 	br	10411d4 <__alt_data_end+0xfffe11d4>
 1042004:	db012d17 	ldw	r12,1204(sp)
 1042008:	14c00017 	ldw	r19,0(r2)
 104200c:	0039883a 	mov	fp,zero
 1042010:	63000104 	addi	r12,r12,4
 1042014:	db012d15 	stw	r12,1204(sp)
 1042018:	00800044 	movi	r2,1
 104201c:	9807883a 	mov	r3,r19
 1042020:	003c6c06 	br	10411d4 <__alt_data_end+0xfffe11d4>
 1042024:	10803fcc 	andi	r2,r2,255
 1042028:	1080201c 	xori	r2,r2,128
 104202c:	10bfe004 	addi	r2,r2,-128
 1042030:	01000c04 	movi	r4,48
 1042034:	1101a526 	beq	r2,r4,10426cc <___vfprintf_internal_r+0x1ac0>
 1042038:	dac13117 	ldw	r11,1220(sp)
 104203c:	db012817 	ldw	r12,1184(sp)
 1042040:	193fffc5 	stb	r4,-1(r3)
 1042044:	5affffc4 	addi	r11,r11,-1
 1042048:	dac13115 	stw	r11,1220(sp)
 104204c:	62e5c83a 	sub	r18,r12,r11
 1042050:	003c7d06 	br	1041248 <__alt_data_end+0xfffe1248>
 1042054:	b009883a 	mov	r4,r22
 1042058:	b80b883a 	mov	r5,r23
 104205c:	d9811e04 	addi	r6,sp,1144
 1042060:	1047e540 	call	1047e54 <__sprint_r>
 1042064:	103c001e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042068:	d8c12017 	ldw	r3,1152(sp)
 104206c:	da000404 	addi	r8,sp,16
 1042070:	db013117 	ldw	r12,1220(sp)
 1042074:	dac13417 	ldw	r11,1232(sp)
 1042078:	d8812617 	ldw	r2,1176(sp)
 104207c:	62e5883a 	add	r18,r12,r11
 1042080:	db013317 	ldw	r12,1228(sp)
 1042084:	13000216 	blt	r2,r12,1042090 <___vfprintf_internal_r+0x1484>
 1042088:	8900004c 	andi	r4,r17,1
 104208c:	20000c26 	beq	r4,zero,10420c0 <___vfprintf_internal_r+0x14b4>
 1042090:	dac13817 	ldw	r11,1248(sp)
 1042094:	d9011f17 	ldw	r4,1148(sp)
 1042098:	db013517 	ldw	r12,1236(sp)
 104209c:	1ac7883a 	add	r3,r3,r11
 10420a0:	21000044 	addi	r4,r4,1
 10420a4:	43000015 	stw	r12,0(r8)
 10420a8:	42c00115 	stw	r11,4(r8)
 10420ac:	d8c12015 	stw	r3,1152(sp)
 10420b0:	d9011f15 	stw	r4,1148(sp)
 10420b4:	014001c4 	movi	r5,7
 10420b8:	2901cc16 	blt	r5,r4,10427ec <___vfprintf_internal_r+0x1be0>
 10420bc:	42000204 	addi	r8,r8,8
 10420c0:	dac13317 	ldw	r11,1228(sp)
 10420c4:	8489c83a 	sub	r4,r16,r18
 10420c8:	5885c83a 	sub	r2,r11,r2
 10420cc:	1021883a 	mov	r16,r2
 10420d0:	2080010e 	bge	r4,r2,10420d8 <___vfprintf_internal_r+0x14cc>
 10420d4:	2021883a 	mov	r16,r4
 10420d8:	04000a0e 	bge	zero,r16,1042104 <___vfprintf_internal_r+0x14f8>
 10420dc:	d9011f17 	ldw	r4,1148(sp)
 10420e0:	1c07883a 	add	r3,r3,r16
 10420e4:	44800015 	stw	r18,0(r8)
 10420e8:	21000044 	addi	r4,r4,1
 10420ec:	44000115 	stw	r16,4(r8)
 10420f0:	d8c12015 	stw	r3,1152(sp)
 10420f4:	d9011f15 	stw	r4,1148(sp)
 10420f8:	014001c4 	movi	r5,7
 10420fc:	2901d616 	blt	r5,r4,1042858 <___vfprintf_internal_r+0x1c4c>
 1042100:	42000204 	addi	r8,r8,8
 1042104:	8001df16 	blt	r16,zero,1042884 <___vfprintf_internal_r+0x1c78>
 1042108:	1421c83a 	sub	r16,r2,r16
 104210c:	043ce60e 	bge	zero,r16,10414a8 <__alt_data_end+0xfffe14a8>
 1042110:	04800404 	movi	r18,16
 1042114:	d8811f17 	ldw	r2,1148(sp)
 1042118:	943efc0e 	bge	r18,r16,1041d0c <__alt_data_end+0xfffe1d0c>
 104211c:	01404174 	movhi	r5,261
 1042120:	297e3784 	addi	r5,r5,-1826
 1042124:	d9412c15 	stw	r5,1200(sp)
 1042128:	054001c4 	movi	r21,7
 104212c:	00000306 	br	104213c <___vfprintf_internal_r+0x1530>
 1042130:	42000204 	addi	r8,r8,8
 1042134:	843ffc04 	addi	r16,r16,-16
 1042138:	943ef70e 	bge	r18,r16,1041d18 <__alt_data_end+0xfffe1d18>
 104213c:	18c00404 	addi	r3,r3,16
 1042140:	10800044 	addi	r2,r2,1
 1042144:	45000015 	stw	r20,0(r8)
 1042148:	44800115 	stw	r18,4(r8)
 104214c:	d8c12015 	stw	r3,1152(sp)
 1042150:	d8811f15 	stw	r2,1148(sp)
 1042154:	a8bff60e 	bge	r21,r2,1042130 <__alt_data_end+0xfffe2130>
 1042158:	b009883a 	mov	r4,r22
 104215c:	b80b883a 	mov	r5,r23
 1042160:	d9811e04 	addi	r6,sp,1144
 1042164:	1047e540 	call	1047e54 <__sprint_r>
 1042168:	103bbf1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 104216c:	d8c12017 	ldw	r3,1152(sp)
 1042170:	d8811f17 	ldw	r2,1148(sp)
 1042174:	da000404 	addi	r8,sp,16
 1042178:	003fee06 	br	1042134 <__alt_data_end+0xfffe2134>
 104217c:	8888703a 	and	r4,r17,r2
 1042180:	203eab1e 	bne	r4,zero,1041c30 <__alt_data_end+0xfffe1c30>
 1042184:	dc011f17 	ldw	r16,1148(sp)
 1042188:	db013117 	ldw	r12,1220(sp)
 104218c:	40800115 	stw	r2,4(r8)
 1042190:	84000044 	addi	r16,r16,1
 1042194:	43000015 	stw	r12,0(r8)
 1042198:	d8c12015 	stw	r3,1152(sp)
 104219c:	dc011f15 	stw	r16,1148(sp)
 10421a0:	008001c4 	movi	r2,7
 10421a4:	14000e16 	blt	r2,r16,10421e0 <___vfprintf_internal_r+0x15d4>
 10421a8:	44800204 	addi	r18,r8,8
 10421ac:	003ecb06 	br	1041cdc <__alt_data_end+0xfffe1cdc>
 10421b0:	00804174 	movhi	r2,261
 10421b4:	10be3784 	addi	r2,r2,-1826
 10421b8:	d8812c15 	stw	r2,1200(sp)
 10421bc:	dac12c17 	ldw	r11,1200(sp)
 10421c0:	1d47883a 	add	r3,r3,r21
 10421c4:	84000044 	addi	r16,r16,1
 10421c8:	92c00015 	stw	r11,0(r18)
 10421cc:	95400115 	stw	r21,4(r18)
 10421d0:	d8c12015 	stw	r3,1152(sp)
 10421d4:	dc011f15 	stw	r16,1148(sp)
 10421d8:	008001c4 	movi	r2,7
 10421dc:	143ebe0e 	bge	r2,r16,1041cd8 <__alt_data_end+0xfffe1cd8>
 10421e0:	b009883a 	mov	r4,r22
 10421e4:	b80b883a 	mov	r5,r23
 10421e8:	d9811e04 	addi	r6,sp,1144
 10421ec:	1047e540 	call	1047e54 <__sprint_r>
 10421f0:	103b9d1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 10421f4:	d8c12017 	ldw	r3,1152(sp)
 10421f8:	dc011f17 	ldw	r16,1148(sp)
 10421fc:	dc800404 	addi	r18,sp,16
 1042200:	003eb606 	br	1041cdc <__alt_data_end+0xfffe1cdc>
 1042204:	b009883a 	mov	r4,r22
 1042208:	b80b883a 	mov	r5,r23
 104220c:	d9811e04 	addi	r6,sp,1144
 1042210:	1047e540 	call	1047e54 <__sprint_r>
 1042214:	103b941e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042218:	d8c12017 	ldw	r3,1152(sp)
 104221c:	dc011f17 	ldw	r16,1148(sp)
 1042220:	da000404 	addi	r8,sp,16
 1042224:	003e8d06 	br	1041c5c <__alt_data_end+0xfffe1c5c>
 1042228:	b009883a 	mov	r4,r22
 104222c:	b80b883a 	mov	r5,r23
 1042230:	d9811e04 	addi	r6,sp,1144
 1042234:	1047e540 	call	1047e54 <__sprint_r>
 1042238:	103b8b1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 104223c:	d8c12017 	ldw	r3,1152(sp)
 1042240:	dc011f17 	ldw	r16,1148(sp)
 1042244:	dc800404 	addi	r18,sp,16
 1042248:	003e8f06 	br	1041c88 <__alt_data_end+0xfffe1c88>
 104224c:	db010e04 	addi	r12,sp,1080
 1042250:	0025883a 	mov	r18,zero
 1042254:	db013115 	stw	r12,1220(sp)
 1042258:	003bfb06 	br	1041248 <__alt_data_end+0xfffe1248>
 104225c:	b009883a 	mov	r4,r22
 1042260:	b80b883a 	mov	r5,r23
 1042264:	d9811e04 	addi	r6,sp,1144
 1042268:	1047e540 	call	1047e54 <__sprint_r>
 104226c:	103b7e1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042270:	d8c12017 	ldw	r3,1152(sp)
 1042274:	da000404 	addi	r8,sp,16
 1042278:	003c5506 	br	10413d0 <__alt_data_end+0xfffe13d0>
 104227c:	04e7c83a 	sub	r19,zero,r19
 1042280:	9804c03a 	cmpne	r2,r19,zero
 1042284:	0739c83a 	sub	fp,zero,fp
 1042288:	e0b9c83a 	sub	fp,fp,r2
 104228c:	05400b44 	movi	r21,45
 1042290:	dd412785 	stb	r21,1182(sp)
 1042294:	da413215 	stw	r9,1224(sp)
 1042298:	00800044 	movi	r2,1
 104229c:	9f06b03a 	or	r3,r19,fp
 10422a0:	003bcf06 	br	10411e0 <__alt_data_end+0xfffe11e0>
 10422a4:	da013f15 	stw	r8,1276(sp)
 10422a8:	da413e15 	stw	r9,1272(sp)
 10422ac:	1047ab00 	call	1047ab0 <__fpclassifyd>
 10422b0:	da013f17 	ldw	r8,1276(sp)
 10422b4:	da413e17 	ldw	r9,1272(sp)
 10422b8:	1000ce26 	beq	r2,zero,10425f4 <___vfprintf_internal_r+0x19e8>
 10422bc:	057ff7c4 	movi	r21,-33
 10422c0:	00bfffc4 	movi	r2,-1
 10422c4:	856a703a 	and	r21,r16,r21
 10422c8:	4881f026 	beq	r9,r2,1042a8c <___vfprintf_internal_r+0x1e80>
 10422cc:	008011c4 	movi	r2,71
 10422d0:	a881e526 	beq	r21,r2,1042a68 <___vfprintf_internal_r+0x1e5c>
 10422d4:	db013917 	ldw	r12,1252(sp)
 10422d8:	8ac04014 	ori	r11,r17,256
 10422dc:	dac12d15 	stw	r11,1204(sp)
 10422e0:	6001e416 	blt	r12,zero,1042a74 <___vfprintf_internal_r+0x1e68>
 10422e4:	dc813917 	ldw	r18,1252(sp)
 10422e8:	d8012b05 	stb	zero,1196(sp)
 10422ec:	00801984 	movi	r2,102
 10422f0:	80811826 	beq	r16,r2,1042754 <___vfprintf_internal_r+0x1b48>
 10422f4:	00801184 	movi	r2,70
 10422f8:	80811626 	beq	r16,r2,1042754 <___vfprintf_internal_r+0x1b48>
 10422fc:	00801144 	movi	r2,69
 1042300:	a881e026 	beq	r21,r2,1042a84 <___vfprintf_internal_r+0x1e78>
 1042304:	4839883a 	mov	fp,r9
 1042308:	d8812604 	addi	r2,sp,1176
 104230c:	d8800115 	stw	r2,4(sp)
 1042310:	d9413717 	ldw	r5,1244(sp)
 1042314:	d8812504 	addi	r2,sp,1172
 1042318:	d8800215 	stw	r2,8(sp)
 104231c:	d8812104 	addi	r2,sp,1156
 1042320:	df000015 	stw	fp,0(sp)
 1042324:	d8800315 	stw	r2,12(sp)
 1042328:	b009883a 	mov	r4,r22
 104232c:	900d883a 	mov	r6,r18
 1042330:	01c00084 	movi	r7,2
 1042334:	da013f15 	stw	r8,1276(sp)
 1042338:	da413e15 	stw	r9,1272(sp)
 104233c:	1042f5c0 	call	1042f5c <_dtoa_r>
 1042340:	d8813115 	stw	r2,1220(sp)
 1042344:	008019c4 	movi	r2,103
 1042348:	da013f17 	ldw	r8,1276(sp)
 104234c:	da413e17 	ldw	r9,1272(sp)
 1042350:	80800226 	beq	r16,r2,104235c <___vfprintf_internal_r+0x1750>
 1042354:	008011c4 	movi	r2,71
 1042358:	8081101e 	bne	r16,r2,104279c <___vfprintf_internal_r+0x1b90>
 104235c:	8880004c 	andi	r2,r17,1
 1042360:	1001df26 	beq	r2,zero,1042ae0 <___vfprintf_internal_r+0x1ed4>
 1042364:	db013117 	ldw	r12,1220(sp)
 1042368:	6715883a 	add	r10,r12,fp
 104236c:	d9013717 	ldw	r4,1244(sp)
 1042370:	900b883a 	mov	r5,r18
 1042374:	000d883a 	mov	r6,zero
 1042378:	000f883a 	mov	r7,zero
 104237c:	da013f15 	stw	r8,1276(sp)
 1042380:	da413e15 	stw	r9,1272(sp)
 1042384:	da813d15 	stw	r10,1268(sp)
 1042388:	104b9080 	call	104b908 <__eqdf2>
 104238c:	da013f17 	ldw	r8,1276(sp)
 1042390:	da413e17 	ldw	r9,1272(sp)
 1042394:	da813d17 	ldw	r10,1268(sp)
 1042398:	10016526 	beq	r2,zero,1042930 <___vfprintf_internal_r+0x1d24>
 104239c:	d8812117 	ldw	r2,1156(sp)
 10423a0:	1280062e 	bgeu	r2,r10,10423bc <___vfprintf_internal_r+0x17b0>
 10423a4:	01000c04 	movi	r4,48
 10423a8:	10c00044 	addi	r3,r2,1
 10423ac:	d8c12115 	stw	r3,1156(sp)
 10423b0:	11000005 	stb	r4,0(r2)
 10423b4:	d8812117 	ldw	r2,1156(sp)
 10423b8:	12bffb36 	bltu	r2,r10,10423a8 <__alt_data_end+0xfffe23a8>
 10423bc:	db013117 	ldw	r12,1220(sp)
 10423c0:	1305c83a 	sub	r2,r2,r12
 10423c4:	d8813315 	stw	r2,1228(sp)
 10423c8:	008011c4 	movi	r2,71
 10423cc:	a8814a26 	beq	r21,r2,10428f8 <___vfprintf_internal_r+0x1cec>
 10423d0:	00801944 	movi	r2,101
 10423d4:	14020a0e 	bge	r2,r16,1042c00 <___vfprintf_internal_r+0x1ff4>
 10423d8:	00801984 	movi	r2,102
 10423dc:	8081b626 	beq	r16,r2,1042ab8 <___vfprintf_internal_r+0x1eac>
 10423e0:	db012617 	ldw	r12,1176(sp)
 10423e4:	db013415 	stw	r12,1232(sp)
 10423e8:	db013417 	ldw	r12,1232(sp)
 10423ec:	dac13317 	ldw	r11,1228(sp)
 10423f0:	62c1a816 	blt	r12,r11,1042a94 <___vfprintf_internal_r+0x1e88>
 10423f4:	8c40004c 	andi	r17,r17,1
 10423f8:	8801ca1e 	bne	r17,zero,1042b24 <___vfprintf_internal_r+0x1f18>
 10423fc:	6005883a 	mov	r2,r12
 1042400:	6001b516 	blt	r12,zero,1042ad8 <___vfprintf_internal_r+0x1ecc>
 1042404:	dc813417 	ldw	r18,1232(sp)
 1042408:	df012b07 	ldb	fp,1196(sp)
 104240c:	e001321e 	bne	fp,zero,10428d8 <___vfprintf_internal_r+0x1ccc>
 1042410:	dc412d17 	ldw	r17,1204(sp)
 1042414:	dd412783 	ldbu	r21,1182(sp)
 1042418:	d8812b15 	stw	r2,1196(sp)
 104241c:	dcc12d15 	stw	r19,1204(sp)
 1042420:	d8013215 	stw	zero,1224(sp)
 1042424:	003b8d06 	br	104125c <__alt_data_end+0xfffe125c>
 1042428:	88c0100c 	andi	r3,r17,64
 104242c:	18008226 	beq	r3,zero,1042638 <___vfprintf_internal_r+0x1a2c>
 1042430:	dac12d17 	ldw	r11,1204(sp)
 1042434:	14c0000b 	ldhu	r19,0(r2)
 1042438:	0039883a 	mov	fp,zero
 104243c:	5ac00104 	addi	r11,r11,4
 1042440:	dac12d15 	stw	r11,1204(sp)
 1042444:	003c8f06 	br	1041684 <__alt_data_end+0xfffe1684>
 1042448:	1c000007 	ldb	r16,0(r3)
 104244c:	1805883a 	mov	r2,r3
 1042450:	003a5506 	br	1040da8 <__alt_data_end+0xfffe0da8>
 1042454:	00800084 	movi	r2,2
 1042458:	003b5e06 	br	10411d4 <__alt_data_end+0xfffe11d4>
 104245c:	8880040c 	andi	r2,r17,16
 1042460:	1000091e 	bne	r2,zero,1042488 <___vfprintf_internal_r+0x187c>
 1042464:	8c40100c 	andi	r17,r17,64
 1042468:	88000726 	beq	r17,zero,1042488 <___vfprintf_internal_r+0x187c>
 104246c:	db012d17 	ldw	r12,1204(sp)
 1042470:	dac12f17 	ldw	r11,1212(sp)
 1042474:	60800017 	ldw	r2,0(r12)
 1042478:	63000104 	addi	r12,r12,4
 104247c:	db012d15 	stw	r12,1204(sp)
 1042480:	12c0000d 	sth	r11,0(r2)
 1042484:	003a1e06 	br	1040d00 <__alt_data_end+0xfffe0d00>
 1042488:	db012d17 	ldw	r12,1204(sp)
 104248c:	dac12f17 	ldw	r11,1212(sp)
 1042490:	60800017 	ldw	r2,0(r12)
 1042494:	63000104 	addi	r12,r12,4
 1042498:	db012d15 	stw	r12,1204(sp)
 104249c:	12c00015 	stw	r11,0(r2)
 10424a0:	003a1706 	br	1040d00 <__alt_data_end+0xfffe0d00>
 10424a4:	01004174 	movhi	r4,261
 10424a8:	213e3784 	addi	r4,r4,-1826
 10424ac:	d9012c15 	stw	r4,1200(sp)
 10424b0:	dac12c17 	ldw	r11,1200(sp)
 10424b4:	1c87883a 	add	r3,r3,r18
 10424b8:	10800044 	addi	r2,r2,1
 10424bc:	42c00015 	stw	r11,0(r8)
 10424c0:	44800115 	stw	r18,4(r8)
 10424c4:	d8c12015 	stw	r3,1152(sp)
 10424c8:	d8811f15 	stw	r2,1148(sp)
 10424cc:	010001c4 	movi	r4,7
 10424d0:	20bee016 	blt	r4,r2,1042054 <__alt_data_end+0xfffe2054>
 10424d4:	42000204 	addi	r8,r8,8
 10424d8:	003ee506 	br	1042070 <__alt_data_end+0xfffe2070>
 10424dc:	01004174 	movhi	r4,261
 10424e0:	213e3784 	addi	r4,r4,-1826
 10424e4:	d9012c15 	stw	r4,1200(sp)
 10424e8:	003bd806 	br	104144c <__alt_data_end+0xfffe144c>
 10424ec:	b009883a 	mov	r4,r22
 10424f0:	b80b883a 	mov	r5,r23
 10424f4:	d9811e04 	addi	r6,sp,1144
 10424f8:	1047e540 	call	1047e54 <__sprint_r>
 10424fc:	103ada1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042500:	d8c12017 	ldw	r3,1152(sp)
 1042504:	da000404 	addi	r8,sp,16
 1042508:	003d6b06 	br	1041ab8 <__alt_data_end+0xfffe1ab8>
 104250c:	d8811f17 	ldw	r2,1148(sp)
 1042510:	03004174 	movhi	r12,261
 1042514:	01000044 	movi	r4,1
 1042518:	18c00044 	addi	r3,r3,1
 104251c:	10800044 	addi	r2,r2,1
 1042520:	633e3704 	addi	r12,r12,-1828
 1042524:	41000115 	stw	r4,4(r8)
 1042528:	43000015 	stw	r12,0(r8)
 104252c:	d8c12015 	stw	r3,1152(sp)
 1042530:	d8811f15 	stw	r2,1148(sp)
 1042534:	010001c4 	movi	r4,7
 1042538:	20804916 	blt	r4,r2,1042660 <___vfprintf_internal_r+0x1a54>
 104253c:	42000204 	addi	r8,r8,8
 1042540:	8000041e 	bne	r16,zero,1042554 <___vfprintf_internal_r+0x1948>
 1042544:	dac13317 	ldw	r11,1228(sp)
 1042548:	5800021e 	bne	r11,zero,1042554 <___vfprintf_internal_r+0x1948>
 104254c:	8880004c 	andi	r2,r17,1
 1042550:	103bd526 	beq	r2,zero,10414a8 <__alt_data_end+0xfffe14a8>
 1042554:	db013817 	ldw	r12,1248(sp)
 1042558:	d8811f17 	ldw	r2,1148(sp)
 104255c:	dac13517 	ldw	r11,1236(sp)
 1042560:	1b07883a 	add	r3,r3,r12
 1042564:	10800044 	addi	r2,r2,1
 1042568:	42c00015 	stw	r11,0(r8)
 104256c:	43000115 	stw	r12,4(r8)
 1042570:	d8c12015 	stw	r3,1152(sp)
 1042574:	d8811f15 	stw	r2,1148(sp)
 1042578:	010001c4 	movi	r4,7
 104257c:	20813016 	blt	r4,r2,1042a40 <___vfprintf_internal_r+0x1e34>
 1042580:	42000204 	addi	r8,r8,8
 1042584:	0421c83a 	sub	r16,zero,r16
 1042588:	0400630e 	bge	zero,r16,1042718 <___vfprintf_internal_r+0x1b0c>
 104258c:	04800404 	movi	r18,16
 1042590:	94009f0e 	bge	r18,r16,1042810 <___vfprintf_internal_r+0x1c04>
 1042594:	01004174 	movhi	r4,261
 1042598:	213e3784 	addi	r4,r4,-1826
 104259c:	d9012c15 	stw	r4,1200(sp)
 10425a0:	054001c4 	movi	r21,7
 10425a4:	00000306 	br	10425b4 <___vfprintf_internal_r+0x19a8>
 10425a8:	42000204 	addi	r8,r8,8
 10425ac:	843ffc04 	addi	r16,r16,-16
 10425b0:	94009a0e 	bge	r18,r16,104281c <___vfprintf_internal_r+0x1c10>
 10425b4:	18c00404 	addi	r3,r3,16
 10425b8:	10800044 	addi	r2,r2,1
 10425bc:	45000015 	stw	r20,0(r8)
 10425c0:	44800115 	stw	r18,4(r8)
 10425c4:	d8c12015 	stw	r3,1152(sp)
 10425c8:	d8811f15 	stw	r2,1148(sp)
 10425cc:	a8bff60e 	bge	r21,r2,10425a8 <__alt_data_end+0xfffe25a8>
 10425d0:	b009883a 	mov	r4,r22
 10425d4:	b80b883a 	mov	r5,r23
 10425d8:	d9811e04 	addi	r6,sp,1144
 10425dc:	1047e540 	call	1047e54 <__sprint_r>
 10425e0:	103aa11e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 10425e4:	d8c12017 	ldw	r3,1152(sp)
 10425e8:	d8811f17 	ldw	r2,1148(sp)
 10425ec:	da000404 	addi	r8,sp,16
 10425f0:	003fee06 	br	10425ac <__alt_data_end+0xfffe25ac>
 10425f4:	008011c4 	movi	r2,71
 10425f8:	1400b316 	blt	r2,r16,10428c8 <___vfprintf_internal_r+0x1cbc>
 10425fc:	03004174 	movhi	r12,261
 1042600:	633e2904 	addi	r12,r12,-1884
 1042604:	db013115 	stw	r12,1220(sp)
 1042608:	00c000c4 	movi	r3,3
 104260c:	00bfdfc4 	movi	r2,-129
 1042610:	d8c12b15 	stw	r3,1196(sp)
 1042614:	88a2703a 	and	r17,r17,r2
 1042618:	dd412783 	ldbu	r21,1182(sp)
 104261c:	dcc12d15 	stw	r19,1204(sp)
 1042620:	1825883a 	mov	r18,r3
 1042624:	d8013215 	stw	zero,1224(sp)
 1042628:	d8013415 	stw	zero,1232(sp)
 104262c:	003b0b06 	br	104125c <__alt_data_end+0xfffe125c>
 1042630:	4825883a 	mov	r18,r9
 1042634:	003cba06 	br	1041920 <__alt_data_end+0xfffe1920>
 1042638:	db012d17 	ldw	r12,1204(sp)
 104263c:	14c00017 	ldw	r19,0(r2)
 1042640:	0039883a 	mov	fp,zero
 1042644:	63000104 	addi	r12,r12,4
 1042648:	db012d15 	stw	r12,1204(sp)
 104264c:	003c0d06 	br	1041684 <__alt_data_end+0xfffe1684>
 1042650:	00804174 	movhi	r2,261
 1042654:	10be2704 	addi	r2,r2,-1892
 1042658:	d8813115 	stw	r2,1220(sp)
 104265c:	003ac406 	br	1041170 <__alt_data_end+0xfffe1170>
 1042660:	b009883a 	mov	r4,r22
 1042664:	b80b883a 	mov	r5,r23
 1042668:	d9811e04 	addi	r6,sp,1144
 104266c:	1047e540 	call	1047e54 <__sprint_r>
 1042670:	103a7d1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042674:	dc012617 	ldw	r16,1176(sp)
 1042678:	d8c12017 	ldw	r3,1152(sp)
 104267c:	da000404 	addi	r8,sp,16
 1042680:	003faf06 	br	1042540 <__alt_data_end+0xfffe2540>
 1042684:	db012e17 	ldw	r12,1208(sp)
 1042688:	1805883a 	mov	r2,r3
 104268c:	dac12d15 	stw	r11,1204(sp)
 1042690:	0319c83a 	sub	r12,zero,r12
 1042694:	db012e15 	stw	r12,1208(sp)
 1042698:	003a7e06 	br	1041094 <__alt_data_end+0xfffe1094>
 104269c:	18800044 	addi	r2,r3,1
 10426a0:	8c400814 	ori	r17,r17,32
 10426a4:	1c000047 	ldb	r16,1(r3)
 10426a8:	0039bf06 	br	1040da8 <__alt_data_end+0xfffe0da8>
 10426ac:	b009883a 	mov	r4,r22
 10426b0:	b80b883a 	mov	r5,r23
 10426b4:	d9811e04 	addi	r6,sp,1144
 10426b8:	1047e540 	call	1047e54 <__sprint_r>
 10426bc:	103a6a1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 10426c0:	d8c12017 	ldw	r3,1152(sp)
 10426c4:	da000404 	addi	r8,sp,16
 10426c8:	003d0c06 	br	1041afc <__alt_data_end+0xfffe1afc>
 10426cc:	db012817 	ldw	r12,1184(sp)
 10426d0:	d8c13117 	ldw	r3,1220(sp)
 10426d4:	60e5c83a 	sub	r18,r12,r3
 10426d8:	003adb06 	br	1041248 <__alt_data_end+0xfffe1248>
 10426dc:	da013f15 	stw	r8,1276(sp)
 10426e0:	1040b740 	call	1040b74 <strlen>
 10426e4:	1025883a 	mov	r18,r2
 10426e8:	da013f17 	ldw	r8,1276(sp)
 10426ec:	903c8e0e 	bge	r18,zero,1041928 <__alt_data_end+0xfffe1928>
 10426f0:	0005883a 	mov	r2,zero
 10426f4:	003c8c06 	br	1041928 <__alt_data_end+0xfffe1928>
 10426f8:	b009883a 	mov	r4,r22
 10426fc:	b80b883a 	mov	r5,r23
 1042700:	d9811e04 	addi	r6,sp,1144
 1042704:	1047e540 	call	1047e54 <__sprint_r>
 1042708:	103a571e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 104270c:	d8c12017 	ldw	r3,1152(sp)
 1042710:	d8811f17 	ldw	r2,1148(sp)
 1042714:	da000404 	addi	r8,sp,16
 1042718:	db013317 	ldw	r12,1228(sp)
 104271c:	dac13117 	ldw	r11,1220(sp)
 1042720:	10800044 	addi	r2,r2,1
 1042724:	60c7883a 	add	r3,r12,r3
 1042728:	42c00015 	stw	r11,0(r8)
 104272c:	43000115 	stw	r12,4(r8)
 1042730:	d8c12015 	stw	r3,1152(sp)
 1042734:	d8811f15 	stw	r2,1148(sp)
 1042738:	010001c4 	movi	r4,7
 104273c:	20bb590e 	bge	r4,r2,10414a4 <__alt_data_end+0xfffe14a4>
 1042740:	003d7e06 	br	1041d3c <__alt_data_end+0xfffe1d3c>
 1042744:	01004174 	movhi	r4,261
 1042748:	213e3b84 	addi	r4,r4,-1810
 104274c:	d9013615 	stw	r4,1240(sp)
 1042750:	003af606 	br	104132c <__alt_data_end+0xfffe132c>
 1042754:	d8812604 	addi	r2,sp,1176
 1042758:	d8800115 	stw	r2,4(sp)
 104275c:	d9413717 	ldw	r5,1244(sp)
 1042760:	d8812504 	addi	r2,sp,1172
 1042764:	d8800215 	stw	r2,8(sp)
 1042768:	d8812104 	addi	r2,sp,1156
 104276c:	da400015 	stw	r9,0(sp)
 1042770:	d8800315 	stw	r2,12(sp)
 1042774:	b009883a 	mov	r4,r22
 1042778:	900d883a 	mov	r6,r18
 104277c:	01c000c4 	movi	r7,3
 1042780:	da013f15 	stw	r8,1276(sp)
 1042784:	da413e15 	stw	r9,1272(sp)
 1042788:	1042f5c0 	call	1042f5c <_dtoa_r>
 104278c:	da413e17 	ldw	r9,1272(sp)
 1042790:	da013f17 	ldw	r8,1276(sp)
 1042794:	d8813115 	stw	r2,1220(sp)
 1042798:	4839883a 	mov	fp,r9
 104279c:	dac13117 	ldw	r11,1220(sp)
 10427a0:	00801184 	movi	r2,70
 10427a4:	5f15883a 	add	r10,r11,fp
 10427a8:	a8bef01e 	bne	r21,r2,104236c <__alt_data_end+0xfffe236c>
 10427ac:	59000007 	ldb	r4,0(r11)
 10427b0:	00800c04 	movi	r2,48
 10427b4:	2080e026 	beq	r4,r2,1042b38 <___vfprintf_internal_r+0x1f2c>
 10427b8:	d8c12617 	ldw	r3,1176(sp)
 10427bc:	50d5883a 	add	r10,r10,r3
 10427c0:	003eea06 	br	104236c <__alt_data_end+0xfffe236c>
 10427c4:	0025883a 	mov	r18,zero
 10427c8:	003db306 	br	1041e98 <__alt_data_end+0xfffe1e98>
 10427cc:	b009883a 	mov	r4,r22
 10427d0:	b80b883a 	mov	r5,r23
 10427d4:	d9811e04 	addi	r6,sp,1144
 10427d8:	1047e540 	call	1047e54 <__sprint_r>
 10427dc:	103a221e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 10427e0:	d8c12017 	ldw	r3,1152(sp)
 10427e4:	da000404 	addi	r8,sp,16
 10427e8:	003daa06 	br	1041e94 <__alt_data_end+0xfffe1e94>
 10427ec:	b009883a 	mov	r4,r22
 10427f0:	b80b883a 	mov	r5,r23
 10427f4:	d9811e04 	addi	r6,sp,1144
 10427f8:	1047e540 	call	1047e54 <__sprint_r>
 10427fc:	103a1a1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042800:	d8812617 	ldw	r2,1176(sp)
 1042804:	d8c12017 	ldw	r3,1152(sp)
 1042808:	da000404 	addi	r8,sp,16
 104280c:	003e2c06 	br	10420c0 <__alt_data_end+0xfffe20c0>
 1042810:	03004174 	movhi	r12,261
 1042814:	633e3784 	addi	r12,r12,-1826
 1042818:	db012c15 	stw	r12,1200(sp)
 104281c:	dac12c17 	ldw	r11,1200(sp)
 1042820:	1c07883a 	add	r3,r3,r16
 1042824:	10800044 	addi	r2,r2,1
 1042828:	42c00015 	stw	r11,0(r8)
 104282c:	44000115 	stw	r16,4(r8)
 1042830:	d8c12015 	stw	r3,1152(sp)
 1042834:	d8811f15 	stw	r2,1148(sp)
 1042838:	010001c4 	movi	r4,7
 104283c:	20bfae16 	blt	r4,r2,10426f8 <__alt_data_end+0xfffe26f8>
 1042840:	42000204 	addi	r8,r8,8
 1042844:	003fb406 	br	1042718 <__alt_data_end+0xfffe2718>
 1042848:	03004174 	movhi	r12,261
 104284c:	633e3b84 	addi	r12,r12,-1810
 1042850:	db013615 	stw	r12,1240(sp)
 1042854:	003b3806 	br	1041538 <__alt_data_end+0xfffe1538>
 1042858:	b009883a 	mov	r4,r22
 104285c:	b80b883a 	mov	r5,r23
 1042860:	d9811e04 	addi	r6,sp,1144
 1042864:	1047e540 	call	1047e54 <__sprint_r>
 1042868:	1039ff1e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 104286c:	d8812617 	ldw	r2,1176(sp)
 1042870:	db013317 	ldw	r12,1228(sp)
 1042874:	d8c12017 	ldw	r3,1152(sp)
 1042878:	da000404 	addi	r8,sp,16
 104287c:	6085c83a 	sub	r2,r12,r2
 1042880:	003e2006 	br	1042104 <__alt_data_end+0xfffe2104>
 1042884:	0021883a 	mov	r16,zero
 1042888:	003e1f06 	br	1042108 <__alt_data_end+0xfffe2108>
 104288c:	00800184 	movi	r2,6
 1042890:	1240012e 	bgeu	r2,r9,1042898 <___vfprintf_internal_r+0x1c8c>
 1042894:	1013883a 	mov	r9,r2
 1042898:	4825883a 	mov	r18,r9
 104289c:	4805883a 	mov	r2,r9
 10428a0:	48009e16 	blt	r9,zero,1042b1c <___vfprintf_internal_r+0x1f10>
 10428a4:	d8812b15 	stw	r2,1196(sp)
 10428a8:	00804174 	movhi	r2,261
 10428ac:	10be3504 	addi	r2,r2,-1836
 10428b0:	d8813115 	stw	r2,1220(sp)
 10428b4:	dcc12d15 	stw	r19,1204(sp)
 10428b8:	d8013215 	stw	zero,1224(sp)
 10428bc:	d8013415 	stw	zero,1232(sp)
 10428c0:	0005883a 	mov	r2,zero
 10428c4:	003a6c06 	br	1041278 <__alt_data_end+0xfffe1278>
 10428c8:	00804174 	movhi	r2,261
 10428cc:	10be2a04 	addi	r2,r2,-1880
 10428d0:	d8813115 	stw	r2,1220(sp)
 10428d4:	003f4c06 	br	1042608 <__alt_data_end+0xfffe2608>
 10428d8:	00c00b44 	movi	r3,45
 10428dc:	d8812b15 	stw	r2,1196(sp)
 10428e0:	dc412d17 	ldw	r17,1204(sp)
 10428e4:	d8c12785 	stb	r3,1182(sp)
 10428e8:	dcc12d15 	stw	r19,1204(sp)
 10428ec:	d8013215 	stw	zero,1224(sp)
 10428f0:	00800b44 	movi	r2,45
 10428f4:	003a5d06 	br	104126c <__alt_data_end+0xfffe126c>
 10428f8:	d8c12617 	ldw	r3,1176(sp)
 10428fc:	00bfff44 	movi	r2,-3
 1042900:	18800d16 	blt	r3,r2,1042938 <___vfprintf_internal_r+0x1d2c>
 1042904:	48c00c16 	blt	r9,r3,1042938 <___vfprintf_internal_r+0x1d2c>
 1042908:	d8c13415 	stw	r3,1232(sp)
 104290c:	040019c4 	movi	r16,103
 1042910:	003eb506 	br	10423e8 <__alt_data_end+0xfffe23e8>
 1042914:	05400b44 	movi	r21,45
 1042918:	dd412785 	stb	r21,1182(sp)
 104291c:	003a0f06 	br	104115c <__alt_data_end+0xfffe115c>
 1042920:	01004174 	movhi	r4,261
 1042924:	213e3784 	addi	r4,r4,-1826
 1042928:	d9012c15 	stw	r4,1200(sp)
 104292c:	003cb106 	br	1041bf4 <__alt_data_end+0xfffe1bf4>
 1042930:	5005883a 	mov	r2,r10
 1042934:	003ea106 	br	10423bc <__alt_data_end+0xfffe23bc>
 1042938:	843fff84 	addi	r16,r16,-2
 104293c:	1f3fffc4 	addi	fp,r3,-1
 1042940:	df012615 	stw	fp,1176(sp)
 1042944:	dc0122c5 	stb	r16,1163(sp)
 1042948:	e0009516 	blt	fp,zero,1042ba0 <___vfprintf_internal_r+0x1f94>
 104294c:	00800ac4 	movi	r2,43
 1042950:	d8812305 	stb	r2,1164(sp)
 1042954:	00800244 	movi	r2,9
 1042958:	1700690e 	bge	r2,fp,1042b00 <___vfprintf_internal_r+0x1ef4>
 104295c:	dd4122c4 	addi	r21,sp,1163
 1042960:	dc012c15 	stw	r16,1200(sp)
 1042964:	8825883a 	mov	r18,r17
 1042968:	a821883a 	mov	r16,r21
 104296c:	4023883a 	mov	r17,r8
 1042970:	e009883a 	mov	r4,fp
 1042974:	01400284 	movi	r5,10
 1042978:	104a7340 	call	104a734 <__modsi3>
 104297c:	10800c04 	addi	r2,r2,48
 1042980:	843fffc4 	addi	r16,r16,-1
 1042984:	e009883a 	mov	r4,fp
 1042988:	01400284 	movi	r5,10
 104298c:	80800005 	stb	r2,0(r16)
 1042990:	104a6e00 	call	104a6e0 <__divsi3>
 1042994:	1039883a 	mov	fp,r2
 1042998:	00800244 	movi	r2,9
 104299c:	173ff416 	blt	r2,fp,1042970 <__alt_data_end+0xfffe2970>
 10429a0:	8811883a 	mov	r8,r17
 10429a4:	e0800c04 	addi	r2,fp,48
 10429a8:	9023883a 	mov	r17,r18
 10429ac:	8025883a 	mov	r18,r16
 10429b0:	913fffc4 	addi	r4,r18,-1
 10429b4:	90bfffc5 	stb	r2,-1(r18)
 10429b8:	dc012c17 	ldw	r16,1200(sp)
 10429bc:	25408e2e 	bgeu	r4,r21,1042bf8 <___vfprintf_internal_r+0x1fec>
 10429c0:	d9412384 	addi	r5,sp,1166
 10429c4:	2c8bc83a 	sub	r5,r5,r18
 10429c8:	d8c12344 	addi	r3,sp,1165
 10429cc:	a94b883a 	add	r5,r21,r5
 10429d0:	00000106 	br	10429d8 <___vfprintf_internal_r+0x1dcc>
 10429d4:	20800003 	ldbu	r2,0(r4)
 10429d8:	18800005 	stb	r2,0(r3)
 10429dc:	18c00044 	addi	r3,r3,1
 10429e0:	21000044 	addi	r4,r4,1
 10429e4:	197ffb1e 	bne	r3,r5,10429d4 <__alt_data_end+0xfffe29d4>
 10429e8:	d8812304 	addi	r2,sp,1164
 10429ec:	1485c83a 	sub	r2,r2,r18
 10429f0:	d8c12344 	addi	r3,sp,1165
 10429f4:	1885883a 	add	r2,r3,r2
 10429f8:	dac13317 	ldw	r11,1228(sp)
 10429fc:	156bc83a 	sub	r21,r2,r21
 1042a00:	dd413a15 	stw	r21,1256(sp)
 1042a04:	00800044 	movi	r2,1
 1042a08:	5d65883a 	add	r18,r11,r21
 1042a0c:	12c0770e 	bge	r2,r11,1042bec <___vfprintf_internal_r+0x1fe0>
 1042a10:	94800044 	addi	r18,r18,1
 1042a14:	9005883a 	mov	r2,r18
 1042a18:	90007216 	blt	r18,zero,1042be4 <___vfprintf_internal_r+0x1fd8>
 1042a1c:	d8013415 	stw	zero,1232(sp)
 1042a20:	003e7906 	br	1042408 <__alt_data_end+0xfffe2408>
 1042a24:	da412b15 	stw	r9,1196(sp)
 1042a28:	dd412783 	ldbu	r21,1182(sp)
 1042a2c:	4825883a 	mov	r18,r9
 1042a30:	dcc12d15 	stw	r19,1204(sp)
 1042a34:	d8013215 	stw	zero,1224(sp)
 1042a38:	d8013415 	stw	zero,1232(sp)
 1042a3c:	003a0706 	br	104125c <__alt_data_end+0xfffe125c>
 1042a40:	b009883a 	mov	r4,r22
 1042a44:	b80b883a 	mov	r5,r23
 1042a48:	d9811e04 	addi	r6,sp,1144
 1042a4c:	1047e540 	call	1047e54 <__sprint_r>
 1042a50:	1039851e 	bne	r2,zero,1041068 <__alt_data_end+0xfffe1068>
 1042a54:	dc012617 	ldw	r16,1176(sp)
 1042a58:	d8c12017 	ldw	r3,1152(sp)
 1042a5c:	d8811f17 	ldw	r2,1148(sp)
 1042a60:	da000404 	addi	r8,sp,16
 1042a64:	003ec706 	br	1042584 <__alt_data_end+0xfffe2584>
 1042a68:	483e1a1e 	bne	r9,zero,10422d4 <__alt_data_end+0xfffe22d4>
 1042a6c:	9013883a 	mov	r9,r18
 1042a70:	003e1806 	br	10422d4 <__alt_data_end+0xfffe22d4>
 1042a74:	00c00b44 	movi	r3,45
 1042a78:	64a0003c 	xorhi	r18,r12,32768
 1042a7c:	d8c12b05 	stb	r3,1196(sp)
 1042a80:	003e1a06 	br	10422ec <__alt_data_end+0xfffe22ec>
 1042a84:	4f000044 	addi	fp,r9,1
 1042a88:	003e1f06 	br	1042308 <__alt_data_end+0xfffe2308>
 1042a8c:	02400184 	movi	r9,6
 1042a90:	003e1006 	br	10422d4 <__alt_data_end+0xfffe22d4>
 1042a94:	d8c13417 	ldw	r3,1232(sp)
 1042a98:	00c04b0e 	bge	zero,r3,1042bc8 <___vfprintf_internal_r+0x1fbc>
 1042a9c:	04800044 	movi	r18,1
 1042aa0:	dac13317 	ldw	r11,1228(sp)
 1042aa4:	92e5883a 	add	r18,r18,r11
 1042aa8:	9005883a 	mov	r2,r18
 1042aac:	903e560e 	bge	r18,zero,1042408 <__alt_data_end+0xfffe2408>
 1042ab0:	0005883a 	mov	r2,zero
 1042ab4:	003e5406 	br	1042408 <__alt_data_end+0xfffe2408>
 1042ab8:	d8c12617 	ldw	r3,1176(sp)
 1042abc:	d8c13415 	stw	r3,1232(sp)
 1042ac0:	00c03b0e 	bge	zero,r3,1042bb0 <___vfprintf_internal_r+0x1fa4>
 1042ac4:	4800081e 	bne	r9,zero,1042ae8 <___vfprintf_internal_r+0x1edc>
 1042ac8:	8c40004c 	andi	r17,r17,1
 1042acc:	8800061e 	bne	r17,zero,1042ae8 <___vfprintf_internal_r+0x1edc>
 1042ad0:	1805883a 	mov	r2,r3
 1042ad4:	183e4b0e 	bge	r3,zero,1042404 <__alt_data_end+0xfffe2404>
 1042ad8:	0005883a 	mov	r2,zero
 1042adc:	003e4906 	br	1042404 <__alt_data_end+0xfffe2404>
 1042ae0:	d8812117 	ldw	r2,1156(sp)
 1042ae4:	003e3506 	br	10423bc <__alt_data_end+0xfffe23bc>
 1042ae8:	dac13417 	ldw	r11,1232(sp)
 1042aec:	4a400044 	addi	r9,r9,1
 1042af0:	5a65883a 	add	r18,r11,r9
 1042af4:	9005883a 	mov	r2,r18
 1042af8:	903e430e 	bge	r18,zero,1042408 <__alt_data_end+0xfffe2408>
 1042afc:	003fec06 	br	1042ab0 <__alt_data_end+0xfffe2ab0>
 1042b00:	00800c04 	movi	r2,48
 1042b04:	e0c00c04 	addi	r3,fp,48
 1042b08:	d8812345 	stb	r2,1165(sp)
 1042b0c:	d8c12385 	stb	r3,1166(sp)
 1042b10:	d88123c4 	addi	r2,sp,1167
 1042b14:	dd4122c4 	addi	r21,sp,1163
 1042b18:	003fb706 	br	10429f8 <__alt_data_end+0xfffe29f8>
 1042b1c:	0005883a 	mov	r2,zero
 1042b20:	003f6006 	br	10428a4 <__alt_data_end+0xfffe28a4>
 1042b24:	db013417 	ldw	r12,1232(sp)
 1042b28:	64800044 	addi	r18,r12,1
 1042b2c:	9005883a 	mov	r2,r18
 1042b30:	903e350e 	bge	r18,zero,1042408 <__alt_data_end+0xfffe2408>
 1042b34:	003fde06 	br	1042ab0 <__alt_data_end+0xfffe2ab0>
 1042b38:	d9013717 	ldw	r4,1244(sp)
 1042b3c:	900b883a 	mov	r5,r18
 1042b40:	000d883a 	mov	r6,zero
 1042b44:	000f883a 	mov	r7,zero
 1042b48:	da013f15 	stw	r8,1276(sp)
 1042b4c:	da413e15 	stw	r9,1272(sp)
 1042b50:	da813d15 	stw	r10,1268(sp)
 1042b54:	104b9080 	call	104b908 <__eqdf2>
 1042b58:	da013f17 	ldw	r8,1276(sp)
 1042b5c:	da413e17 	ldw	r9,1272(sp)
 1042b60:	da813d17 	ldw	r10,1268(sp)
 1042b64:	103f1426 	beq	r2,zero,10427b8 <__alt_data_end+0xfffe27b8>
 1042b68:	00800044 	movi	r2,1
 1042b6c:	1707c83a 	sub	r3,r2,fp
 1042b70:	d8c12615 	stw	r3,1176(sp)
 1042b74:	003f1106 	br	10427bc <__alt_data_end+0xfffe27bc>
 1042b78:	dac12d17 	ldw	r11,1204(sp)
 1042b7c:	5a400017 	ldw	r9,0(r11)
 1042b80:	5ac00104 	addi	r11,r11,4
 1042b84:	dac12d15 	stw	r11,1204(sp)
 1042b88:	483ec60e 	bge	r9,zero,10426a4 <__alt_data_end+0xfffe26a4>
 1042b8c:	027fffc4 	movi	r9,-1
 1042b90:	1c000047 	ldb	r16,1(r3)
 1042b94:	00388406 	br	1040da8 <__alt_data_end+0xfffe0da8>
 1042b98:	043fffc4 	movi	r16,-1
 1042b9c:	00391006 	br	1040fe0 <__alt_data_end+0xfffe0fe0>
 1042ba0:	00800b44 	movi	r2,45
 1042ba4:	0739c83a 	sub	fp,zero,fp
 1042ba8:	d8812305 	stb	r2,1164(sp)
 1042bac:	003f6906 	br	1042954 <__alt_data_end+0xfffe2954>
 1042bb0:	4800081e 	bne	r9,zero,1042bd4 <___vfprintf_internal_r+0x1fc8>
 1042bb4:	8c40004c 	andi	r17,r17,1
 1042bb8:	8800061e 	bne	r17,zero,1042bd4 <___vfprintf_internal_r+0x1fc8>
 1042bbc:	00800044 	movi	r2,1
 1042bc0:	1025883a 	mov	r18,r2
 1042bc4:	003e1006 	br	1042408 <__alt_data_end+0xfffe2408>
 1042bc8:	04800084 	movi	r18,2
 1042bcc:	90e5c83a 	sub	r18,r18,r3
 1042bd0:	003fb306 	br	1042aa0 <__alt_data_end+0xfffe2aa0>
 1042bd4:	4c800084 	addi	r18,r9,2
 1042bd8:	9005883a 	mov	r2,r18
 1042bdc:	903e0a0e 	bge	r18,zero,1042408 <__alt_data_end+0xfffe2408>
 1042be0:	003fb306 	br	1042ab0 <__alt_data_end+0xfffe2ab0>
 1042be4:	0005883a 	mov	r2,zero
 1042be8:	003f8c06 	br	1042a1c <__alt_data_end+0xfffe2a1c>
 1042bec:	88a2703a 	and	r17,r17,r2
 1042bf0:	883f8826 	beq	r17,zero,1042a14 <__alt_data_end+0xfffe2a14>
 1042bf4:	003f8606 	br	1042a10 <__alt_data_end+0xfffe2a10>
 1042bf8:	d8812344 	addi	r2,sp,1165
 1042bfc:	003f7e06 	br	10429f8 <__alt_data_end+0xfffe29f8>
 1042c00:	d8c12617 	ldw	r3,1176(sp)
 1042c04:	003f4d06 	br	104293c <__alt_data_end+0xfffe293c>

01042c08 <__vfprintf_internal>:
 1042c08:	2007883a 	mov	r3,r4
 1042c0c:	01004174 	movhi	r4,261
 1042c10:	21055004 	addi	r4,r4,5440
 1042c14:	21000017 	ldw	r4,0(r4)
 1042c18:	2805883a 	mov	r2,r5
 1042c1c:	300f883a 	mov	r7,r6
 1042c20:	180b883a 	mov	r5,r3
 1042c24:	100d883a 	mov	r6,r2
 1042c28:	1040c0c1 	jmpi	1040c0c <___vfprintf_internal_r>

01042c2c <__swsetup_r>:
 1042c2c:	00804174 	movhi	r2,261
 1042c30:	defffd04 	addi	sp,sp,-12
 1042c34:	10855004 	addi	r2,r2,5440
 1042c38:	dc400115 	stw	r17,4(sp)
 1042c3c:	2023883a 	mov	r17,r4
 1042c40:	11000017 	ldw	r4,0(r2)
 1042c44:	dc000015 	stw	r16,0(sp)
 1042c48:	dfc00215 	stw	ra,8(sp)
 1042c4c:	2821883a 	mov	r16,r5
 1042c50:	20000226 	beq	r4,zero,1042c5c <__swsetup_r+0x30>
 1042c54:	20c00e17 	ldw	r3,56(r4)
 1042c58:	18002e26 	beq	r3,zero,1042d14 <__swsetup_r+0xe8>
 1042c5c:	8080030b 	ldhu	r2,12(r16)
 1042c60:	10c0020c 	andi	r3,r2,8
 1042c64:	100d883a 	mov	r6,r2
 1042c68:	18000f26 	beq	r3,zero,1042ca8 <__swsetup_r+0x7c>
 1042c6c:	80c00417 	ldw	r3,16(r16)
 1042c70:	18001526 	beq	r3,zero,1042cc8 <__swsetup_r+0x9c>
 1042c74:	1100004c 	andi	r4,r2,1
 1042c78:	20001c1e 	bne	r4,zero,1042cec <__swsetup_r+0xc0>
 1042c7c:	1080008c 	andi	r2,r2,2
 1042c80:	1000261e 	bne	r2,zero,1042d1c <__swsetup_r+0xf0>
 1042c84:	80800517 	ldw	r2,20(r16)
 1042c88:	80800215 	stw	r2,8(r16)
 1042c8c:	18001c26 	beq	r3,zero,1042d00 <__swsetup_r+0xd4>
 1042c90:	0005883a 	mov	r2,zero
 1042c94:	dfc00217 	ldw	ra,8(sp)
 1042c98:	dc400117 	ldw	r17,4(sp)
 1042c9c:	dc000017 	ldw	r16,0(sp)
 1042ca0:	dec00304 	addi	sp,sp,12
 1042ca4:	f800283a 	ret
 1042ca8:	3080040c 	andi	r2,r6,16
 1042cac:	10001726 	beq	r2,zero,1042d0c <__swsetup_r+0xe0>
 1042cb0:	3080010c 	andi	r2,r6,4
 1042cb4:	10001b1e 	bne	r2,zero,1042d24 <__swsetup_r+0xf8>
 1042cb8:	80c00417 	ldw	r3,16(r16)
 1042cbc:	30800214 	ori	r2,r6,8
 1042cc0:	8080030d 	sth	r2,12(r16)
 1042cc4:	183feb1e 	bne	r3,zero,1042c74 <__alt_data_end+0xfffe2c74>
 1042cc8:	1140a00c 	andi	r5,r2,640
 1042ccc:	01008004 	movi	r4,512
 1042cd0:	293fe826 	beq	r5,r4,1042c74 <__alt_data_end+0xfffe2c74>
 1042cd4:	8809883a 	mov	r4,r17
 1042cd8:	800b883a 	mov	r5,r16
 1042cdc:	10457840 	call	1045784 <__smakebuf_r>
 1042ce0:	8080030b 	ldhu	r2,12(r16)
 1042ce4:	80c00417 	ldw	r3,16(r16)
 1042ce8:	003fe206 	br	1042c74 <__alt_data_end+0xfffe2c74>
 1042cec:	80800517 	ldw	r2,20(r16)
 1042cf0:	80000215 	stw	zero,8(r16)
 1042cf4:	0085c83a 	sub	r2,zero,r2
 1042cf8:	80800615 	stw	r2,24(r16)
 1042cfc:	183fe41e 	bne	r3,zero,1042c90 <__alt_data_end+0xfffe2c90>
 1042d00:	8080030b 	ldhu	r2,12(r16)
 1042d04:	1080200c 	andi	r2,r2,128
 1042d08:	103fe226 	beq	r2,zero,1042c94 <__alt_data_end+0xfffe2c94>
 1042d0c:	00bfffc4 	movi	r2,-1
 1042d10:	003fe006 	br	1042c94 <__alt_data_end+0xfffe2c94>
 1042d14:	1044c2c0 	call	1044c2c <__sinit>
 1042d18:	003fd006 	br	1042c5c <__alt_data_end+0xfffe2c5c>
 1042d1c:	0005883a 	mov	r2,zero
 1042d20:	003fd906 	br	1042c88 <__alt_data_end+0xfffe2c88>
 1042d24:	81400c17 	ldw	r5,48(r16)
 1042d28:	28000626 	beq	r5,zero,1042d44 <__swsetup_r+0x118>
 1042d2c:	80801004 	addi	r2,r16,64
 1042d30:	28800326 	beq	r5,r2,1042d40 <__swsetup_r+0x114>
 1042d34:	8809883a 	mov	r4,r17
 1042d38:	1044da00 	call	1044da0 <_free_r>
 1042d3c:	8180030b 	ldhu	r6,12(r16)
 1042d40:	80000c15 	stw	zero,48(r16)
 1042d44:	80c00417 	ldw	r3,16(r16)
 1042d48:	00bff6c4 	movi	r2,-37
 1042d4c:	118c703a 	and	r6,r2,r6
 1042d50:	80000115 	stw	zero,4(r16)
 1042d54:	80c00015 	stw	r3,0(r16)
 1042d58:	003fd806 	br	1042cbc <__alt_data_end+0xfffe2cbc>

01042d5c <quorem>:
 1042d5c:	defff704 	addi	sp,sp,-36
 1042d60:	dc800215 	stw	r18,8(sp)
 1042d64:	20800417 	ldw	r2,16(r4)
 1042d68:	2c800417 	ldw	r18,16(r5)
 1042d6c:	dfc00815 	stw	ra,32(sp)
 1042d70:	ddc00715 	stw	r23,28(sp)
 1042d74:	dd800615 	stw	r22,24(sp)
 1042d78:	dd400515 	stw	r21,20(sp)
 1042d7c:	dd000415 	stw	r20,16(sp)
 1042d80:	dcc00315 	stw	r19,12(sp)
 1042d84:	dc400115 	stw	r17,4(sp)
 1042d88:	dc000015 	stw	r16,0(sp)
 1042d8c:	14807116 	blt	r2,r18,1042f54 <quorem+0x1f8>
 1042d90:	94bfffc4 	addi	r18,r18,-1
 1042d94:	94ad883a 	add	r22,r18,r18
 1042d98:	b5ad883a 	add	r22,r22,r22
 1042d9c:	2c400504 	addi	r17,r5,20
 1042da0:	8da9883a 	add	r20,r17,r22
 1042da4:	25400504 	addi	r21,r4,20
 1042da8:	282f883a 	mov	r23,r5
 1042dac:	adad883a 	add	r22,r21,r22
 1042db0:	a1400017 	ldw	r5,0(r20)
 1042db4:	2021883a 	mov	r16,r4
 1042db8:	b1000017 	ldw	r4,0(r22)
 1042dbc:	29400044 	addi	r5,r5,1
 1042dc0:	104a7900 	call	104a790 <__udivsi3>
 1042dc4:	1027883a 	mov	r19,r2
 1042dc8:	10002c26 	beq	r2,zero,1042e7c <quorem+0x120>
 1042dcc:	a813883a 	mov	r9,r21
 1042dd0:	8811883a 	mov	r8,r17
 1042dd4:	0009883a 	mov	r4,zero
 1042dd8:	000d883a 	mov	r6,zero
 1042ddc:	41c00017 	ldw	r7,0(r8)
 1042de0:	49400017 	ldw	r5,0(r9)
 1042de4:	42000104 	addi	r8,r8,4
 1042de8:	38bfffcc 	andi	r2,r7,65535
 1042dec:	14c5383a 	mul	r2,r2,r19
 1042df0:	380ed43a 	srli	r7,r7,16
 1042df4:	28ffffcc 	andi	r3,r5,65535
 1042df8:	2085883a 	add	r2,r4,r2
 1042dfc:	1008d43a 	srli	r4,r2,16
 1042e00:	3ccf383a 	mul	r7,r7,r19
 1042e04:	198d883a 	add	r6,r3,r6
 1042e08:	10ffffcc 	andi	r3,r2,65535
 1042e0c:	30c7c83a 	sub	r3,r6,r3
 1042e10:	280ad43a 	srli	r5,r5,16
 1042e14:	21c9883a 	add	r4,r4,r7
 1042e18:	180dd43a 	srai	r6,r3,16
 1042e1c:	20bfffcc 	andi	r2,r4,65535
 1042e20:	288bc83a 	sub	r5,r5,r2
 1042e24:	298b883a 	add	r5,r5,r6
 1042e28:	280e943a 	slli	r7,r5,16
 1042e2c:	18ffffcc 	andi	r3,r3,65535
 1042e30:	2008d43a 	srli	r4,r4,16
 1042e34:	38ceb03a 	or	r7,r7,r3
 1042e38:	49c00015 	stw	r7,0(r9)
 1042e3c:	280dd43a 	srai	r6,r5,16
 1042e40:	4a400104 	addi	r9,r9,4
 1042e44:	a23fe52e 	bgeu	r20,r8,1042ddc <__alt_data_end+0xfffe2ddc>
 1042e48:	b0800017 	ldw	r2,0(r22)
 1042e4c:	10000b1e 	bne	r2,zero,1042e7c <quorem+0x120>
 1042e50:	b0bfff04 	addi	r2,r22,-4
 1042e54:	a880082e 	bgeu	r21,r2,1042e78 <quorem+0x11c>
 1042e58:	b0ffff17 	ldw	r3,-4(r22)
 1042e5c:	18000326 	beq	r3,zero,1042e6c <quorem+0x110>
 1042e60:	00000506 	br	1042e78 <quorem+0x11c>
 1042e64:	10c00017 	ldw	r3,0(r2)
 1042e68:	1800031e 	bne	r3,zero,1042e78 <quorem+0x11c>
 1042e6c:	10bfff04 	addi	r2,r2,-4
 1042e70:	94bfffc4 	addi	r18,r18,-1
 1042e74:	a8bffb36 	bltu	r21,r2,1042e64 <__alt_data_end+0xfffe2e64>
 1042e78:	84800415 	stw	r18,16(r16)
 1042e7c:	8009883a 	mov	r4,r16
 1042e80:	b80b883a 	mov	r5,r23
 1042e84:	1046e440 	call	1046e44 <__mcmp>
 1042e88:	10002616 	blt	r2,zero,1042f24 <quorem+0x1c8>
 1042e8c:	9cc00044 	addi	r19,r19,1
 1042e90:	a80d883a 	mov	r6,r21
 1042e94:	000b883a 	mov	r5,zero
 1042e98:	31000017 	ldw	r4,0(r6)
 1042e9c:	88800017 	ldw	r2,0(r17)
 1042ea0:	31800104 	addi	r6,r6,4
 1042ea4:	20ffffcc 	andi	r3,r4,65535
 1042ea8:	194b883a 	add	r5,r3,r5
 1042eac:	10ffffcc 	andi	r3,r2,65535
 1042eb0:	28c7c83a 	sub	r3,r5,r3
 1042eb4:	1004d43a 	srli	r2,r2,16
 1042eb8:	2008d43a 	srli	r4,r4,16
 1042ebc:	180bd43a 	srai	r5,r3,16
 1042ec0:	18ffffcc 	andi	r3,r3,65535
 1042ec4:	2089c83a 	sub	r4,r4,r2
 1042ec8:	2149883a 	add	r4,r4,r5
 1042ecc:	2004943a 	slli	r2,r4,16
 1042ed0:	8c400104 	addi	r17,r17,4
 1042ed4:	200bd43a 	srai	r5,r4,16
 1042ed8:	10c6b03a 	or	r3,r2,r3
 1042edc:	30ffff15 	stw	r3,-4(r6)
 1042ee0:	a47fed2e 	bgeu	r20,r17,1042e98 <__alt_data_end+0xfffe2e98>
 1042ee4:	9485883a 	add	r2,r18,r18
 1042ee8:	1085883a 	add	r2,r2,r2
 1042eec:	a887883a 	add	r3,r21,r2
 1042ef0:	18800017 	ldw	r2,0(r3)
 1042ef4:	10000b1e 	bne	r2,zero,1042f24 <quorem+0x1c8>
 1042ef8:	18bfff04 	addi	r2,r3,-4
 1042efc:	a880082e 	bgeu	r21,r2,1042f20 <quorem+0x1c4>
 1042f00:	18ffff17 	ldw	r3,-4(r3)
 1042f04:	18000326 	beq	r3,zero,1042f14 <quorem+0x1b8>
 1042f08:	00000506 	br	1042f20 <quorem+0x1c4>
 1042f0c:	10c00017 	ldw	r3,0(r2)
 1042f10:	1800031e 	bne	r3,zero,1042f20 <quorem+0x1c4>
 1042f14:	10bfff04 	addi	r2,r2,-4
 1042f18:	94bfffc4 	addi	r18,r18,-1
 1042f1c:	a8bffb36 	bltu	r21,r2,1042f0c <__alt_data_end+0xfffe2f0c>
 1042f20:	84800415 	stw	r18,16(r16)
 1042f24:	9805883a 	mov	r2,r19
 1042f28:	dfc00817 	ldw	ra,32(sp)
 1042f2c:	ddc00717 	ldw	r23,28(sp)
 1042f30:	dd800617 	ldw	r22,24(sp)
 1042f34:	dd400517 	ldw	r21,20(sp)
 1042f38:	dd000417 	ldw	r20,16(sp)
 1042f3c:	dcc00317 	ldw	r19,12(sp)
 1042f40:	dc800217 	ldw	r18,8(sp)
 1042f44:	dc400117 	ldw	r17,4(sp)
 1042f48:	dc000017 	ldw	r16,0(sp)
 1042f4c:	dec00904 	addi	sp,sp,36
 1042f50:	f800283a 	ret
 1042f54:	0005883a 	mov	r2,zero
 1042f58:	003ff306 	br	1042f28 <__alt_data_end+0xfffe2f28>

01042f5c <_dtoa_r>:
 1042f5c:	20801017 	ldw	r2,64(r4)
 1042f60:	deffde04 	addi	sp,sp,-136
 1042f64:	dd401d15 	stw	r21,116(sp)
 1042f68:	dcc01b15 	stw	r19,108(sp)
 1042f6c:	dc801a15 	stw	r18,104(sp)
 1042f70:	dc401915 	stw	r17,100(sp)
 1042f74:	dc001815 	stw	r16,96(sp)
 1042f78:	dfc02115 	stw	ra,132(sp)
 1042f7c:	df002015 	stw	fp,128(sp)
 1042f80:	ddc01f15 	stw	r23,124(sp)
 1042f84:	dd801e15 	stw	r22,120(sp)
 1042f88:	dd001c15 	stw	r20,112(sp)
 1042f8c:	d9c00315 	stw	r7,12(sp)
 1042f90:	2021883a 	mov	r16,r4
 1042f94:	302b883a 	mov	r21,r6
 1042f98:	2825883a 	mov	r18,r5
 1042f9c:	dc402417 	ldw	r17,144(sp)
 1042fa0:	3027883a 	mov	r19,r6
 1042fa4:	10000826 	beq	r2,zero,1042fc8 <_dtoa_r+0x6c>
 1042fa8:	21801117 	ldw	r6,68(r4)
 1042fac:	00c00044 	movi	r3,1
 1042fb0:	100b883a 	mov	r5,r2
 1042fb4:	1986983a 	sll	r3,r3,r6
 1042fb8:	11800115 	stw	r6,4(r2)
 1042fbc:	10c00215 	stw	r3,8(r2)
 1042fc0:	104662c0 	call	104662c <_Bfree>
 1042fc4:	80001015 	stw	zero,64(r16)
 1042fc8:	a8002d16 	blt	r21,zero,1043080 <_dtoa_r+0x124>
 1042fcc:	88000015 	stw	zero,0(r17)
 1042fd0:	a8dffc2c 	andhi	r3,r21,32752
 1042fd4:	009ffc34 	movhi	r2,32752
 1042fd8:	18801b26 	beq	r3,r2,1043048 <_dtoa_r+0xec>
 1042fdc:	9009883a 	mov	r4,r18
 1042fe0:	980b883a 	mov	r5,r19
 1042fe4:	000d883a 	mov	r6,zero
 1042fe8:	000f883a 	mov	r7,zero
 1042fec:	104b9080 	call	104b908 <__eqdf2>
 1042ff0:	10002a1e 	bne	r2,zero,104309c <_dtoa_r+0x140>
 1042ff4:	d8c02317 	ldw	r3,140(sp)
 1042ff8:	d9002517 	ldw	r4,148(sp)
 1042ffc:	00800044 	movi	r2,1
 1043000:	18800015 	stw	r2,0(r3)
 1043004:	2001a226 	beq	r4,zero,1043690 <_dtoa_r+0x734>
 1043008:	00804174 	movhi	r2,261
 104300c:	10be3744 	addi	r2,r2,-1827
 1043010:	20800015 	stw	r2,0(r4)
 1043014:	10bfffc4 	addi	r2,r2,-1
 1043018:	dfc02117 	ldw	ra,132(sp)
 104301c:	df002017 	ldw	fp,128(sp)
 1043020:	ddc01f17 	ldw	r23,124(sp)
 1043024:	dd801e17 	ldw	r22,120(sp)
 1043028:	dd401d17 	ldw	r21,116(sp)
 104302c:	dd001c17 	ldw	r20,112(sp)
 1043030:	dcc01b17 	ldw	r19,108(sp)
 1043034:	dc801a17 	ldw	r18,104(sp)
 1043038:	dc401917 	ldw	r17,100(sp)
 104303c:	dc001817 	ldw	r16,96(sp)
 1043040:	dec02204 	addi	sp,sp,136
 1043044:	f800283a 	ret
 1043048:	d8c02317 	ldw	r3,140(sp)
 104304c:	0089c3c4 	movi	r2,9999
 1043050:	18800015 	stw	r2,0(r3)
 1043054:	90017c26 	beq	r18,zero,1043648 <_dtoa_r+0x6ec>
 1043058:	00804174 	movhi	r2,261
 104305c:	10be4304 	addi	r2,r2,-1780
 1043060:	d9002517 	ldw	r4,148(sp)
 1043064:	203fec26 	beq	r4,zero,1043018 <__alt_data_end+0xfffe3018>
 1043068:	10c000c7 	ldb	r3,3(r2)
 104306c:	18017d1e 	bne	r3,zero,1043664 <_dtoa_r+0x708>
 1043070:	10c000c4 	addi	r3,r2,3
 1043074:	d9802517 	ldw	r6,148(sp)
 1043078:	30c00015 	stw	r3,0(r6)
 104307c:	003fe606 	br	1043018 <__alt_data_end+0xfffe3018>
 1043080:	04e00034 	movhi	r19,32768
 1043084:	9cffffc4 	addi	r19,r19,-1
 1043088:	00800044 	movi	r2,1
 104308c:	ace6703a 	and	r19,r21,r19
 1043090:	88800015 	stw	r2,0(r17)
 1043094:	982b883a 	mov	r21,r19
 1043098:	003fcd06 	br	1042fd0 <__alt_data_end+0xfffe2fd0>
 104309c:	d8800204 	addi	r2,sp,8
 10430a0:	a822d53a 	srli	r17,r21,20
 10430a4:	d8800015 	stw	r2,0(sp)
 10430a8:	8009883a 	mov	r4,r16
 10430ac:	900b883a 	mov	r5,r18
 10430b0:	980d883a 	mov	r6,r19
 10430b4:	d9c00104 	addi	r7,sp,4
 10430b8:	10471b80 	call	10471b8 <__d2b>
 10430bc:	1039883a 	mov	fp,r2
 10430c0:	88016a1e 	bne	r17,zero,104366c <_dtoa_r+0x710>
 10430c4:	dd000217 	ldw	r20,8(sp)
 10430c8:	dc400117 	ldw	r17,4(sp)
 10430cc:	00befbc4 	movi	r2,-1041
 10430d0:	a463883a 	add	r17,r20,r17
 10430d4:	8882ea16 	blt	r17,r2,1043c80 <_dtoa_r+0xd24>
 10430d8:	00bf0384 	movi	r2,-1010
 10430dc:	1445c83a 	sub	r2,r2,r17
 10430e0:	89010484 	addi	r4,r17,1042
 10430e4:	a8aa983a 	sll	r21,r21,r2
 10430e8:	9108d83a 	srl	r4,r18,r4
 10430ec:	a908b03a 	or	r4,r21,r4
 10430f0:	104cc980 	call	104cc98 <__floatunsidf>
 10430f4:	017f8434 	movhi	r5,65040
 10430f8:	01800044 	movi	r6,1
 10430fc:	1009883a 	mov	r4,r2
 1043100:	194b883a 	add	r5,r3,r5
 1043104:	8c7fffc4 	addi	r17,r17,-1
 1043108:	d9800f15 	stw	r6,60(sp)
 104310c:	000d883a 	mov	r6,zero
 1043110:	01cffe34 	movhi	r7,16376
 1043114:	104c2700 	call	104c270 <__subdf3>
 1043118:	0198dbf4 	movhi	r6,25455
 104311c:	01cff4f4 	movhi	r7,16339
 1043120:	1009883a 	mov	r4,r2
 1043124:	180b883a 	mov	r5,r3
 1043128:	3190d844 	addi	r6,r6,17249
 104312c:	39e1e9c4 	addi	r7,r7,-30809
 1043130:	104bb4c0 	call	104bb4c <__muldf3>
 1043134:	01a2d874 	movhi	r6,35681
 1043138:	01cff1f4 	movhi	r7,16327
 104313c:	180b883a 	mov	r5,r3
 1043140:	31b22cc4 	addi	r6,r6,-14157
 1043144:	39e28a04 	addi	r7,r7,-30168
 1043148:	1009883a 	mov	r4,r2
 104314c:	104a7a00 	call	104a7a0 <__adddf3>
 1043150:	8809883a 	mov	r4,r17
 1043154:	102d883a 	mov	r22,r2
 1043158:	182b883a 	mov	r21,r3
 104315c:	104cbc80 	call	104cbc8 <__floatsidf>
 1043160:	019427f4 	movhi	r6,20639
 1043164:	01cff4f4 	movhi	r7,16339
 1043168:	1009883a 	mov	r4,r2
 104316c:	180b883a 	mov	r5,r3
 1043170:	319e7ec4 	addi	r6,r6,31227
 1043174:	39d104c4 	addi	r7,r7,17427
 1043178:	104bb4c0 	call	104bb4c <__muldf3>
 104317c:	b009883a 	mov	r4,r22
 1043180:	a80b883a 	mov	r5,r21
 1043184:	100d883a 	mov	r6,r2
 1043188:	180f883a 	mov	r7,r3
 104318c:	104a7a00 	call	104a7a0 <__adddf3>
 1043190:	1009883a 	mov	r4,r2
 1043194:	180b883a 	mov	r5,r3
 1043198:	102d883a 	mov	r22,r2
 104319c:	182b883a 	mov	r21,r3
 10431a0:	104cb400 	call	104cb40 <__fixdfsi>
 10431a4:	b009883a 	mov	r4,r22
 10431a8:	a80b883a 	mov	r5,r21
 10431ac:	000d883a 	mov	r6,zero
 10431b0:	000f883a 	mov	r7,zero
 10431b4:	d8800515 	stw	r2,20(sp)
 10431b8:	104ba6c0 	call	104ba6c <__ledf2>
 10431bc:	10023116 	blt	r2,zero,1043a84 <_dtoa_r+0xb28>
 10431c0:	d8c00517 	ldw	r3,20(sp)
 10431c4:	00800584 	movi	r2,22
 10431c8:	10c21f36 	bltu	r2,r3,1043a48 <_dtoa_r+0xaec>
 10431cc:	180490fa 	slli	r2,r3,3
 10431d0:	00c04174 	movhi	r3,261
 10431d4:	18fe5f04 	addi	r3,r3,-1668
 10431d8:	1885883a 	add	r2,r3,r2
 10431dc:	11000017 	ldw	r4,0(r2)
 10431e0:	11400117 	ldw	r5,4(r2)
 10431e4:	900d883a 	mov	r6,r18
 10431e8:	980f883a 	mov	r7,r19
 10431ec:	104b98c0 	call	104b98c <__gedf2>
 10431f0:	0082a70e 	bge	zero,r2,1043c90 <_dtoa_r+0xd34>
 10431f4:	d9000517 	ldw	r4,20(sp)
 10431f8:	d8000c15 	stw	zero,48(sp)
 10431fc:	213fffc4 	addi	r4,r4,-1
 1043200:	d9000515 	stw	r4,20(sp)
 1043204:	a463c83a 	sub	r17,r20,r17
 1043208:	8dbfffc4 	addi	r22,r17,-1
 104320c:	b0021916 	blt	r22,zero,1043a74 <_dtoa_r+0xb18>
 1043210:	d8000815 	stw	zero,32(sp)
 1043214:	d8800517 	ldw	r2,20(sp)
 1043218:	10020e16 	blt	r2,zero,1043a54 <_dtoa_r+0xaf8>
 104321c:	b0ad883a 	add	r22,r22,r2
 1043220:	d8800a15 	stw	r2,40(sp)
 1043224:	d8000915 	stw	zero,36(sp)
 1043228:	d8c00317 	ldw	r3,12(sp)
 104322c:	00800244 	movi	r2,9
 1043230:	10c11a36 	bltu	r2,r3,104369c <_dtoa_r+0x740>
 1043234:	00800144 	movi	r2,5
 1043238:	10c4fc0e 	bge	r2,r3,104462c <_dtoa_r+0x16d0>
 104323c:	18ffff04 	addi	r3,r3,-4
 1043240:	d8c00315 	stw	r3,12(sp)
 1043244:	0029883a 	mov	r20,zero
 1043248:	d9800317 	ldw	r6,12(sp)
 104324c:	008000c4 	movi	r2,3
 1043250:	3083bd26 	beq	r6,r2,1044148 <_dtoa_r+0x11ec>
 1043254:	1183670e 	bge	r2,r6,1043ff4 <_dtoa_r+0x1098>
 1043258:	d8c00317 	ldw	r3,12(sp)
 104325c:	00800104 	movi	r2,4
 1043260:	1882e726 	beq	r3,r2,1043e00 <_dtoa_r+0xea4>
 1043264:	00800144 	movi	r2,5
 1043268:	1884f21e 	bne	r3,r2,1044634 <_dtoa_r+0x16d8>
 104326c:	00800044 	movi	r2,1
 1043270:	d8800b15 	stw	r2,44(sp)
 1043274:	d8c02217 	ldw	r3,136(sp)
 1043278:	d9000517 	ldw	r4,20(sp)
 104327c:	1907883a 	add	r3,r3,r4
 1043280:	19800044 	addi	r6,r3,1
 1043284:	d8c00d15 	stw	r3,52(sp)
 1043288:	d9800615 	stw	r6,24(sp)
 104328c:	0183c30e 	bge	zero,r6,104419c <_dtoa_r+0x1240>
 1043290:	d9800617 	ldw	r6,24(sp)
 1043294:	3023883a 	mov	r17,r6
 1043298:	80001115 	stw	zero,68(r16)
 104329c:	008005c4 	movi	r2,23
 10432a0:	1184f62e 	bgeu	r2,r6,104467c <_dtoa_r+0x1720>
 10432a4:	00c00044 	movi	r3,1
 10432a8:	00800104 	movi	r2,4
 10432ac:	1085883a 	add	r2,r2,r2
 10432b0:	11000504 	addi	r4,r2,20
 10432b4:	180b883a 	mov	r5,r3
 10432b8:	18c00044 	addi	r3,r3,1
 10432bc:	313ffb2e 	bgeu	r6,r4,10432ac <__alt_data_end+0xfffe32ac>
 10432c0:	81401115 	stw	r5,68(r16)
 10432c4:	8009883a 	mov	r4,r16
 10432c8:	10465840 	call	1046584 <_Balloc>
 10432cc:	d8800715 	stw	r2,28(sp)
 10432d0:	80801015 	stw	r2,64(r16)
 10432d4:	00800384 	movi	r2,14
 10432d8:	1440fd36 	bltu	r2,r17,10436d0 <_dtoa_r+0x774>
 10432dc:	a000fc26 	beq	r20,zero,10436d0 <_dtoa_r+0x774>
 10432e0:	d8800517 	ldw	r2,20(sp)
 10432e4:	0083b90e 	bge	zero,r2,10441cc <_dtoa_r+0x1270>
 10432e8:	d8c00517 	ldw	r3,20(sp)
 10432ec:	108003cc 	andi	r2,r2,15
 10432f0:	100490fa 	slli	r2,r2,3
 10432f4:	182fd13a 	srai	r23,r3,4
 10432f8:	00c04174 	movhi	r3,261
 10432fc:	18fe5f04 	addi	r3,r3,-1668
 1043300:	1885883a 	add	r2,r3,r2
 1043304:	b8c0040c 	andi	r3,r23,16
 1043308:	12c00017 	ldw	r11,0(r2)
 104330c:	12800117 	ldw	r10,4(r2)
 1043310:	18039726 	beq	r3,zero,1044170 <_dtoa_r+0x1214>
 1043314:	00804174 	movhi	r2,261
 1043318:	10be5504 	addi	r2,r2,-1708
 104331c:	11800817 	ldw	r6,32(r2)
 1043320:	11c00917 	ldw	r7,36(r2)
 1043324:	9009883a 	mov	r4,r18
 1043328:	980b883a 	mov	r5,r19
 104332c:	da801615 	stw	r10,88(sp)
 1043330:	dac01515 	stw	r11,84(sp)
 1043334:	104b03c0 	call	104b03c <__divdf3>
 1043338:	da801617 	ldw	r10,88(sp)
 104333c:	dac01517 	ldw	r11,84(sp)
 1043340:	bdc003cc 	andi	r23,r23,15
 1043344:	044000c4 	movi	r17,3
 1043348:	d8800e15 	stw	r2,56(sp)
 104334c:	182b883a 	mov	r21,r3
 1043350:	b8001126 	beq	r23,zero,1043398 <_dtoa_r+0x43c>
 1043354:	05004174 	movhi	r20,261
 1043358:	a53e5504 	addi	r20,r20,-1708
 104335c:	5805883a 	mov	r2,r11
 1043360:	5007883a 	mov	r3,r10
 1043364:	b980004c 	andi	r6,r23,1
 1043368:	1009883a 	mov	r4,r2
 104336c:	b82fd07a 	srai	r23,r23,1
 1043370:	180b883a 	mov	r5,r3
 1043374:	30000426 	beq	r6,zero,1043388 <_dtoa_r+0x42c>
 1043378:	a1800017 	ldw	r6,0(r20)
 104337c:	a1c00117 	ldw	r7,4(r20)
 1043380:	8c400044 	addi	r17,r17,1
 1043384:	104bb4c0 	call	104bb4c <__muldf3>
 1043388:	a5000204 	addi	r20,r20,8
 104338c:	b83ff51e 	bne	r23,zero,1043364 <__alt_data_end+0xfffe3364>
 1043390:	1017883a 	mov	r11,r2
 1043394:	1815883a 	mov	r10,r3
 1043398:	d9000e17 	ldw	r4,56(sp)
 104339c:	a80b883a 	mov	r5,r21
 10433a0:	580d883a 	mov	r6,r11
 10433a4:	500f883a 	mov	r7,r10
 10433a8:	104b03c0 	call	104b03c <__divdf3>
 10433ac:	1029883a 	mov	r20,r2
 10433b0:	182b883a 	mov	r21,r3
 10433b4:	d9800c17 	ldw	r6,48(sp)
 10433b8:	30000626 	beq	r6,zero,10433d4 <_dtoa_r+0x478>
 10433bc:	a009883a 	mov	r4,r20
 10433c0:	a80b883a 	mov	r5,r21
 10433c4:	000d883a 	mov	r6,zero
 10433c8:	01cffc34 	movhi	r7,16368
 10433cc:	104ba6c0 	call	104ba6c <__ledf2>
 10433d0:	10043216 	blt	r2,zero,104449c <_dtoa_r+0x1540>
 10433d4:	8809883a 	mov	r4,r17
 10433d8:	104cbc80 	call	104cbc8 <__floatsidf>
 10433dc:	1009883a 	mov	r4,r2
 10433e0:	180b883a 	mov	r5,r3
 10433e4:	a00d883a 	mov	r6,r20
 10433e8:	a80f883a 	mov	r7,r21
 10433ec:	104bb4c0 	call	104bb4c <__muldf3>
 10433f0:	000d883a 	mov	r6,zero
 10433f4:	1009883a 	mov	r4,r2
 10433f8:	180b883a 	mov	r5,r3
 10433fc:	01d00734 	movhi	r7,16412
 1043400:	104a7a00 	call	104a7a0 <__adddf3>
 1043404:	1023883a 	mov	r17,r2
 1043408:	d9800617 	ldw	r6,24(sp)
 104340c:	00bf3034 	movhi	r2,64704
 1043410:	1885883a 	add	r2,r3,r2
 1043414:	d8800e15 	stw	r2,56(sp)
 1043418:	30032e26 	beq	r6,zero,10440d4 <_dtoa_r+0x1178>
 104341c:	d8c00517 	ldw	r3,20(sp)
 1043420:	da800617 	ldw	r10,24(sp)
 1043424:	d8c01215 	stw	r3,72(sp)
 1043428:	d9000b17 	ldw	r4,44(sp)
 104342c:	2003b026 	beq	r4,zero,10442f0 <_dtoa_r+0x1394>
 1043430:	50bfffc4 	addi	r2,r10,-1
 1043434:	100490fa 	slli	r2,r2,3
 1043438:	00c04174 	movhi	r3,261
 104343c:	18fe5f04 	addi	r3,r3,-1668
 1043440:	1885883a 	add	r2,r3,r2
 1043444:	11800017 	ldw	r6,0(r2)
 1043448:	11c00117 	ldw	r7,4(r2)
 104344c:	d8800717 	ldw	r2,28(sp)
 1043450:	0009883a 	mov	r4,zero
 1043454:	014ff834 	movhi	r5,16352
 1043458:	da801615 	stw	r10,88(sp)
 104345c:	15c00044 	addi	r23,r2,1
 1043460:	104b03c0 	call	104b03c <__divdf3>
 1043464:	d9c00e17 	ldw	r7,56(sp)
 1043468:	880d883a 	mov	r6,r17
 104346c:	1009883a 	mov	r4,r2
 1043470:	180b883a 	mov	r5,r3
 1043474:	104c2700 	call	104c270 <__subdf3>
 1043478:	a80b883a 	mov	r5,r21
 104347c:	a009883a 	mov	r4,r20
 1043480:	d8c01015 	stw	r3,64(sp)
 1043484:	d8800e15 	stw	r2,56(sp)
 1043488:	104cb400 	call	104cb40 <__fixdfsi>
 104348c:	1009883a 	mov	r4,r2
 1043490:	d8801715 	stw	r2,92(sp)
 1043494:	104cbc80 	call	104cbc8 <__floatsidf>
 1043498:	a009883a 	mov	r4,r20
 104349c:	a80b883a 	mov	r5,r21
 10434a0:	100d883a 	mov	r6,r2
 10434a4:	180f883a 	mov	r7,r3
 10434a8:	104c2700 	call	104c270 <__subdf3>
 10434ac:	da001717 	ldw	r8,92(sp)
 10434b0:	1829883a 	mov	r20,r3
 10434b4:	d8c00717 	ldw	r3,28(sp)
 10434b8:	d9000e17 	ldw	r4,56(sp)
 10434bc:	d9401017 	ldw	r5,64(sp)
 10434c0:	42000c04 	addi	r8,r8,48
 10434c4:	1023883a 	mov	r17,r2
 10434c8:	1a000005 	stb	r8,0(r3)
 10434cc:	880d883a 	mov	r6,r17
 10434d0:	a00f883a 	mov	r7,r20
 10434d4:	402b883a 	mov	r21,r8
 10434d8:	104b98c0 	call	104b98c <__gedf2>
 10434dc:	00844516 	blt	zero,r2,10445f4 <_dtoa_r+0x1698>
 10434e0:	0009883a 	mov	r4,zero
 10434e4:	014ffc34 	movhi	r5,16368
 10434e8:	880d883a 	mov	r6,r17
 10434ec:	a00f883a 	mov	r7,r20
 10434f0:	104c2700 	call	104c270 <__subdf3>
 10434f4:	d9000e17 	ldw	r4,56(sp)
 10434f8:	d9401017 	ldw	r5,64(sp)
 10434fc:	100d883a 	mov	r6,r2
 1043500:	180f883a 	mov	r7,r3
 1043504:	104b98c0 	call	104b98c <__gedf2>
 1043508:	da801617 	ldw	r10,88(sp)
 104350c:	00843616 	blt	zero,r2,10445e8 <_dtoa_r+0x168c>
 1043510:	00800044 	movi	r2,1
 1043514:	12806e0e 	bge	r2,r10,10436d0 <_dtoa_r+0x774>
 1043518:	d9000717 	ldw	r4,28(sp)
 104351c:	dd801315 	stw	r22,76(sp)
 1043520:	dc001115 	stw	r16,68(sp)
 1043524:	2295883a 	add	r10,r4,r10
 1043528:	dcc01415 	stw	r19,80(sp)
 104352c:	502d883a 	mov	r22,r10
 1043530:	dcc01017 	ldw	r19,64(sp)
 1043534:	b821883a 	mov	r16,r23
 1043538:	dc801015 	stw	r18,64(sp)
 104353c:	dc800e17 	ldw	r18,56(sp)
 1043540:	00000906 	br	1043568 <_dtoa_r+0x60c>
 1043544:	104c2700 	call	104c270 <__subdf3>
 1043548:	1009883a 	mov	r4,r2
 104354c:	180b883a 	mov	r5,r3
 1043550:	900d883a 	mov	r6,r18
 1043554:	980f883a 	mov	r7,r19
 1043558:	104ba6c0 	call	104ba6c <__ledf2>
 104355c:	10040e16 	blt	r2,zero,1044598 <_dtoa_r+0x163c>
 1043560:	b821883a 	mov	r16,r23
 1043564:	bd841026 	beq	r23,r22,10445a8 <_dtoa_r+0x164c>
 1043568:	9009883a 	mov	r4,r18
 104356c:	980b883a 	mov	r5,r19
 1043570:	000d883a 	mov	r6,zero
 1043574:	01d00934 	movhi	r7,16420
 1043578:	104bb4c0 	call	104bb4c <__muldf3>
 104357c:	000d883a 	mov	r6,zero
 1043580:	01d00934 	movhi	r7,16420
 1043584:	8809883a 	mov	r4,r17
 1043588:	a00b883a 	mov	r5,r20
 104358c:	1025883a 	mov	r18,r2
 1043590:	1827883a 	mov	r19,r3
 1043594:	104bb4c0 	call	104bb4c <__muldf3>
 1043598:	180b883a 	mov	r5,r3
 104359c:	1009883a 	mov	r4,r2
 10435a0:	1823883a 	mov	r17,r3
 10435a4:	1029883a 	mov	r20,r2
 10435a8:	104cb400 	call	104cb40 <__fixdfsi>
 10435ac:	1009883a 	mov	r4,r2
 10435b0:	102b883a 	mov	r21,r2
 10435b4:	104cbc80 	call	104cbc8 <__floatsidf>
 10435b8:	a009883a 	mov	r4,r20
 10435bc:	880b883a 	mov	r5,r17
 10435c0:	100d883a 	mov	r6,r2
 10435c4:	180f883a 	mov	r7,r3
 10435c8:	104c2700 	call	104c270 <__subdf3>
 10435cc:	ad400c04 	addi	r21,r21,48
 10435d0:	1009883a 	mov	r4,r2
 10435d4:	180b883a 	mov	r5,r3
 10435d8:	900d883a 	mov	r6,r18
 10435dc:	980f883a 	mov	r7,r19
 10435e0:	85400005 	stb	r21,0(r16)
 10435e4:	1023883a 	mov	r17,r2
 10435e8:	1829883a 	mov	r20,r3
 10435ec:	104ba6c0 	call	104ba6c <__ledf2>
 10435f0:	bdc00044 	addi	r23,r23,1
 10435f4:	0009883a 	mov	r4,zero
 10435f8:	014ffc34 	movhi	r5,16368
 10435fc:	880d883a 	mov	r6,r17
 1043600:	a00f883a 	mov	r7,r20
 1043604:	103fcf0e 	bge	r2,zero,1043544 <__alt_data_end+0xfffe3544>
 1043608:	d9801217 	ldw	r6,72(sp)
 104360c:	dc001117 	ldw	r16,68(sp)
 1043610:	d9800515 	stw	r6,20(sp)
 1043614:	8009883a 	mov	r4,r16
 1043618:	e00b883a 	mov	r5,fp
 104361c:	104662c0 	call	104662c <_Bfree>
 1043620:	d8c00517 	ldw	r3,20(sp)
 1043624:	d9002317 	ldw	r4,140(sp)
 1043628:	d9802517 	ldw	r6,148(sp)
 104362c:	b8000005 	stb	zero,0(r23)
 1043630:	18800044 	addi	r2,r3,1
 1043634:	20800015 	stw	r2,0(r4)
 1043638:	30027226 	beq	r6,zero,1044004 <_dtoa_r+0x10a8>
 104363c:	35c00015 	stw	r23,0(r6)
 1043640:	d8800717 	ldw	r2,28(sp)
 1043644:	003e7406 	br	1043018 <__alt_data_end+0xfffe3018>
 1043648:	00800434 	movhi	r2,16
 104364c:	10bfffc4 	addi	r2,r2,-1
 1043650:	a8aa703a 	and	r21,r21,r2
 1043654:	a83e801e 	bne	r21,zero,1043058 <__alt_data_end+0xfffe3058>
 1043658:	00804174 	movhi	r2,261
 104365c:	10be4004 	addi	r2,r2,-1792
 1043660:	003e7f06 	br	1043060 <__alt_data_end+0xfffe3060>
 1043664:	10c00204 	addi	r3,r2,8
 1043668:	003e8206 	br	1043074 <__alt_data_end+0xfffe3074>
 104366c:	01400434 	movhi	r5,16
 1043670:	297fffc4 	addi	r5,r5,-1
 1043674:	994a703a 	and	r5,r19,r5
 1043678:	9009883a 	mov	r4,r18
 104367c:	8c7f0044 	addi	r17,r17,-1023
 1043680:	294ffc34 	orhi	r5,r5,16368
 1043684:	dd000217 	ldw	r20,8(sp)
 1043688:	d8000f15 	stw	zero,60(sp)
 104368c:	003e9f06 	br	104310c <__alt_data_end+0xfffe310c>
 1043690:	00804174 	movhi	r2,261
 1043694:	10be3704 	addi	r2,r2,-1828
 1043698:	003e5f06 	br	1043018 <__alt_data_end+0xfffe3018>
 104369c:	80001115 	stw	zero,68(r16)
 10436a0:	8009883a 	mov	r4,r16
 10436a4:	000b883a 	mov	r5,zero
 10436a8:	10465840 	call	1046584 <_Balloc>
 10436ac:	01bfffc4 	movi	r6,-1
 10436b0:	d8800715 	stw	r2,28(sp)
 10436b4:	80801015 	stw	r2,64(r16)
 10436b8:	00800044 	movi	r2,1
 10436bc:	d9800615 	stw	r6,24(sp)
 10436c0:	d8800b15 	stw	r2,44(sp)
 10436c4:	d8002215 	stw	zero,136(sp)
 10436c8:	d9800d15 	stw	r6,52(sp)
 10436cc:	d8000315 	stw	zero,12(sp)
 10436d0:	d8800117 	ldw	r2,4(sp)
 10436d4:	10008e16 	blt	r2,zero,1043910 <_dtoa_r+0x9b4>
 10436d8:	d9000517 	ldw	r4,20(sp)
 10436dc:	00c00384 	movi	r3,14
 10436e0:	19008b16 	blt	r3,r4,1043910 <_dtoa_r+0x9b4>
 10436e4:	200490fa 	slli	r2,r4,3
 10436e8:	00c04174 	movhi	r3,261
 10436ec:	d9802217 	ldw	r6,136(sp)
 10436f0:	18fe5f04 	addi	r3,r3,-1668
 10436f4:	1885883a 	add	r2,r3,r2
 10436f8:	14400017 	ldw	r17,0(r2)
 10436fc:	15000117 	ldw	r20,4(r2)
 1043700:	3001c716 	blt	r6,zero,1043e20 <_dtoa_r+0xec4>
 1043704:	880d883a 	mov	r6,r17
 1043708:	a00f883a 	mov	r7,r20
 104370c:	9009883a 	mov	r4,r18
 1043710:	980b883a 	mov	r5,r19
 1043714:	104b03c0 	call	104b03c <__divdf3>
 1043718:	180b883a 	mov	r5,r3
 104371c:	1009883a 	mov	r4,r2
 1043720:	104cb400 	call	104cb40 <__fixdfsi>
 1043724:	1009883a 	mov	r4,r2
 1043728:	102d883a 	mov	r22,r2
 104372c:	104cbc80 	call	104cbc8 <__floatsidf>
 1043730:	1009883a 	mov	r4,r2
 1043734:	180b883a 	mov	r5,r3
 1043738:	880d883a 	mov	r6,r17
 104373c:	a00f883a 	mov	r7,r20
 1043740:	104bb4c0 	call	104bb4c <__muldf3>
 1043744:	9009883a 	mov	r4,r18
 1043748:	980b883a 	mov	r5,r19
 104374c:	100d883a 	mov	r6,r2
 1043750:	180f883a 	mov	r7,r3
 1043754:	104c2700 	call	104c270 <__subdf3>
 1043758:	d9000717 	ldw	r4,28(sp)
 104375c:	d9800617 	ldw	r6,24(sp)
 1043760:	180b883a 	mov	r5,r3
 1043764:	b0c00c04 	addi	r3,r22,48
 1043768:	20c00005 	stb	r3,0(r4)
 104376c:	25c00044 	addi	r23,r4,1
 1043770:	01000044 	movi	r4,1
 1043774:	1011883a 	mov	r8,r2
 1043778:	2807883a 	mov	r3,r5
 104377c:	31003d26 	beq	r6,r4,1043874 <_dtoa_r+0x918>
 1043780:	000d883a 	mov	r6,zero
 1043784:	01d00934 	movhi	r7,16420
 1043788:	1009883a 	mov	r4,r2
 104378c:	104bb4c0 	call	104bb4c <__muldf3>
 1043790:	1009883a 	mov	r4,r2
 1043794:	180b883a 	mov	r5,r3
 1043798:	000d883a 	mov	r6,zero
 104379c:	000f883a 	mov	r7,zero
 10437a0:	1027883a 	mov	r19,r2
 10437a4:	182b883a 	mov	r21,r3
 10437a8:	104b9080 	call	104b908 <__eqdf2>
 10437ac:	103f9926 	beq	r2,zero,1043614 <__alt_data_end+0xfffe3614>
 10437b0:	d8c00617 	ldw	r3,24(sp)
 10437b4:	d9000717 	ldw	r4,28(sp)
 10437b8:	b825883a 	mov	r18,r23
 10437bc:	18bfffc4 	addi	r2,r3,-1
 10437c0:	20ad883a 	add	r22,r4,r2
 10437c4:	dc000315 	stw	r16,12(sp)
 10437c8:	00000a06 	br	10437f4 <_dtoa_r+0x898>
 10437cc:	104bb4c0 	call	104bb4c <__muldf3>
 10437d0:	1009883a 	mov	r4,r2
 10437d4:	180b883a 	mov	r5,r3
 10437d8:	000d883a 	mov	r6,zero
 10437dc:	000f883a 	mov	r7,zero
 10437e0:	1027883a 	mov	r19,r2
 10437e4:	182b883a 	mov	r21,r3
 10437e8:	b825883a 	mov	r18,r23
 10437ec:	104b9080 	call	104b908 <__eqdf2>
 10437f0:	10022626 	beq	r2,zero,104408c <_dtoa_r+0x1130>
 10437f4:	880d883a 	mov	r6,r17
 10437f8:	a00f883a 	mov	r7,r20
 10437fc:	9809883a 	mov	r4,r19
 1043800:	a80b883a 	mov	r5,r21
 1043804:	104b03c0 	call	104b03c <__divdf3>
 1043808:	180b883a 	mov	r5,r3
 104380c:	1009883a 	mov	r4,r2
 1043810:	104cb400 	call	104cb40 <__fixdfsi>
 1043814:	1009883a 	mov	r4,r2
 1043818:	1021883a 	mov	r16,r2
 104381c:	104cbc80 	call	104cbc8 <__floatsidf>
 1043820:	1009883a 	mov	r4,r2
 1043824:	180b883a 	mov	r5,r3
 1043828:	880d883a 	mov	r6,r17
 104382c:	a00f883a 	mov	r7,r20
 1043830:	104bb4c0 	call	104bb4c <__muldf3>
 1043834:	9809883a 	mov	r4,r19
 1043838:	a80b883a 	mov	r5,r21
 104383c:	100d883a 	mov	r6,r2
 1043840:	180f883a 	mov	r7,r3
 1043844:	104c2700 	call	104c270 <__subdf3>
 1043848:	82000c04 	addi	r8,r16,48
 104384c:	92000005 	stb	r8,0(r18)
 1043850:	1009883a 	mov	r4,r2
 1043854:	180b883a 	mov	r5,r3
 1043858:	000d883a 	mov	r6,zero
 104385c:	01d00934 	movhi	r7,16420
 1043860:	1011883a 	mov	r8,r2
 1043864:	bdc00044 	addi	r23,r23,1
 1043868:	95bfd81e 	bne	r18,r22,10437cc <__alt_data_end+0xfffe37cc>
 104386c:	802d883a 	mov	r22,r16
 1043870:	dc000317 	ldw	r16,12(sp)
 1043874:	4009883a 	mov	r4,r8
 1043878:	180b883a 	mov	r5,r3
 104387c:	400d883a 	mov	r6,r8
 1043880:	180f883a 	mov	r7,r3
 1043884:	104a7a00 	call	104a7a0 <__adddf3>
 1043888:	8809883a 	mov	r4,r17
 104388c:	a00b883a 	mov	r5,r20
 1043890:	100d883a 	mov	r6,r2
 1043894:	180f883a 	mov	r7,r3
 1043898:	1027883a 	mov	r19,r2
 104389c:	1825883a 	mov	r18,r3
 10438a0:	104ba6c0 	call	104ba6c <__ledf2>
 10438a4:	10000816 	blt	r2,zero,10438c8 <_dtoa_r+0x96c>
 10438a8:	8809883a 	mov	r4,r17
 10438ac:	a00b883a 	mov	r5,r20
 10438b0:	980d883a 	mov	r6,r19
 10438b4:	900f883a 	mov	r7,r18
 10438b8:	104b9080 	call	104b908 <__eqdf2>
 10438bc:	103f551e 	bne	r2,zero,1043614 <__alt_data_end+0xfffe3614>
 10438c0:	b580004c 	andi	r22,r22,1
 10438c4:	b03f5326 	beq	r22,zero,1043614 <__alt_data_end+0xfffe3614>
 10438c8:	bd7fffc3 	ldbu	r21,-1(r23)
 10438cc:	b8bfffc4 	addi	r2,r23,-1
 10438d0:	1007883a 	mov	r3,r2
 10438d4:	01400e44 	movi	r5,57
 10438d8:	d9800717 	ldw	r6,28(sp)
 10438dc:	00000506 	br	10438f4 <_dtoa_r+0x998>
 10438e0:	18ffffc4 	addi	r3,r3,-1
 10438e4:	30825e26 	beq	r6,r2,1044260 <_dtoa_r+0x1304>
 10438e8:	1d400003 	ldbu	r21,0(r3)
 10438ec:	102f883a 	mov	r23,r2
 10438f0:	10bfffc4 	addi	r2,r2,-1
 10438f4:	a9003fcc 	andi	r4,r21,255
 10438f8:	2100201c 	xori	r4,r4,128
 10438fc:	213fe004 	addi	r4,r4,-128
 1043900:	217ff726 	beq	r4,r5,10438e0 <__alt_data_end+0xfffe38e0>
 1043904:	aa000044 	addi	r8,r21,1
 1043908:	12000005 	stb	r8,0(r2)
 104390c:	003f4106 	br	1043614 <__alt_data_end+0xfffe3614>
 1043910:	d8c00b17 	ldw	r3,44(sp)
 1043914:	18006726 	beq	r3,zero,1043ab4 <_dtoa_r+0xb58>
 1043918:	d9000317 	ldw	r4,12(sp)
 104391c:	00c00044 	movi	r3,1
 1043920:	19016a0e 	bge	r3,r4,1043ecc <_dtoa_r+0xf70>
 1043924:	d8800617 	ldw	r2,24(sp)
 1043928:	d8c00917 	ldw	r3,36(sp)
 104392c:	157fffc4 	addi	r21,r2,-1
 1043930:	1d420716 	blt	r3,r21,1044150 <_dtoa_r+0x11f4>
 1043934:	1d6bc83a 	sub	r21,r3,r21
 1043938:	d8800617 	ldw	r2,24(sp)
 104393c:	1002c716 	blt	r2,zero,104445c <_dtoa_r+0x1500>
 1043940:	dd000817 	ldw	r20,32(sp)
 1043944:	d8800617 	ldw	r2,24(sp)
 1043948:	d9800817 	ldw	r6,32(sp)
 104394c:	8009883a 	mov	r4,r16
 1043950:	01400044 	movi	r5,1
 1043954:	308d883a 	add	r6,r6,r2
 1043958:	d9800815 	stw	r6,32(sp)
 104395c:	b0ad883a 	add	r22,r22,r2
 1043960:	10469840 	call	1046984 <__i2b>
 1043964:	1023883a 	mov	r17,r2
 1043968:	a0000826 	beq	r20,zero,104398c <_dtoa_r+0xa30>
 104396c:	0580070e 	bge	zero,r22,104398c <_dtoa_r+0xa30>
 1043970:	b005883a 	mov	r2,r22
 1043974:	a5812016 	blt	r20,r22,1043df8 <_dtoa_r+0xe9c>
 1043978:	d8c00817 	ldw	r3,32(sp)
 104397c:	a0a9c83a 	sub	r20,r20,r2
 1043980:	b0adc83a 	sub	r22,r22,r2
 1043984:	1887c83a 	sub	r3,r3,r2
 1043988:	d8c00815 	stw	r3,32(sp)
 104398c:	d9000917 	ldw	r4,36(sp)
 1043990:	0100140e 	bge	zero,r4,10439e4 <_dtoa_r+0xa88>
 1043994:	d9800b17 	ldw	r6,44(sp)
 1043998:	3001e526 	beq	r6,zero,1044130 <_dtoa_r+0x11d4>
 104399c:	05400e0e 	bge	zero,r21,10439d8 <_dtoa_r+0xa7c>
 10439a0:	880b883a 	mov	r5,r17
 10439a4:	8009883a 	mov	r4,r16
 10439a8:	a80d883a 	mov	r6,r21
 10439ac:	1046bbc0 	call	1046bbc <__pow5mult>
 10439b0:	e00d883a 	mov	r6,fp
 10439b4:	8009883a 	mov	r4,r16
 10439b8:	100b883a 	mov	r5,r2
 10439bc:	1023883a 	mov	r17,r2
 10439c0:	10469c00 	call	10469c0 <__multiply>
 10439c4:	102f883a 	mov	r23,r2
 10439c8:	e00b883a 	mov	r5,fp
 10439cc:	8009883a 	mov	r4,r16
 10439d0:	104662c0 	call	104662c <_Bfree>
 10439d4:	b839883a 	mov	fp,r23
 10439d8:	d8800917 	ldw	r2,36(sp)
 10439dc:	154dc83a 	sub	r6,r2,r21
 10439e0:	3001281e 	bne	r6,zero,1043e84 <_dtoa_r+0xf28>
 10439e4:	05c00044 	movi	r23,1
 10439e8:	8009883a 	mov	r4,r16
 10439ec:	b80b883a 	mov	r5,r23
 10439f0:	10469840 	call	1046984 <__i2b>
 10439f4:	d8c00a17 	ldw	r3,40(sp)
 10439f8:	102b883a 	mov	r21,r2
 10439fc:	00c0310e 	bge	zero,r3,1043ac4 <_dtoa_r+0xb68>
 1043a00:	8009883a 	mov	r4,r16
 1043a04:	100b883a 	mov	r5,r2
 1043a08:	180d883a 	mov	r6,r3
 1043a0c:	1046bbc0 	call	1046bbc <__pow5mult>
 1043a10:	d9000317 	ldw	r4,12(sp)
 1043a14:	102b883a 	mov	r21,r2
 1043a18:	b9011f0e 	bge	r23,r4,1043e98 <_dtoa_r+0xf3c>
 1043a1c:	0027883a 	mov	r19,zero
 1043a20:	a8800417 	ldw	r2,16(r21)
 1043a24:	10800104 	addi	r2,r2,4
 1043a28:	1085883a 	add	r2,r2,r2
 1043a2c:	1085883a 	add	r2,r2,r2
 1043a30:	a885883a 	add	r2,r21,r2
 1043a34:	11000017 	ldw	r4,0(r2)
 1043a38:	104686c0 	call	104686c <__hi0bits>
 1043a3c:	00c00804 	movi	r3,32
 1043a40:	1885c83a 	sub	r2,r3,r2
 1043a44:	00002506 	br	1043adc <_dtoa_r+0xb80>
 1043a48:	01800044 	movi	r6,1
 1043a4c:	d9800c15 	stw	r6,48(sp)
 1043a50:	003dec06 	br	1043204 <__alt_data_end+0xfffe3204>
 1043a54:	d8c00817 	ldw	r3,32(sp)
 1043a58:	d9000517 	ldw	r4,20(sp)
 1043a5c:	d8000a15 	stw	zero,40(sp)
 1043a60:	1907c83a 	sub	r3,r3,r4
 1043a64:	010dc83a 	sub	r6,zero,r4
 1043a68:	d8c00815 	stw	r3,32(sp)
 1043a6c:	d9800915 	stw	r6,36(sp)
 1043a70:	003ded06 	br	1043228 <__alt_data_end+0xfffe3228>
 1043a74:	05adc83a 	sub	r22,zero,r22
 1043a78:	dd800815 	stw	r22,32(sp)
 1043a7c:	002d883a 	mov	r22,zero
 1043a80:	003de406 	br	1043214 <__alt_data_end+0xfffe3214>
 1043a84:	d9000517 	ldw	r4,20(sp)
 1043a88:	104cbc80 	call	104cbc8 <__floatsidf>
 1043a8c:	1009883a 	mov	r4,r2
 1043a90:	180b883a 	mov	r5,r3
 1043a94:	b00d883a 	mov	r6,r22
 1043a98:	a80f883a 	mov	r7,r21
 1043a9c:	104b9080 	call	104b908 <__eqdf2>
 1043aa0:	103dc726 	beq	r2,zero,10431c0 <__alt_data_end+0xfffe31c0>
 1043aa4:	d8800517 	ldw	r2,20(sp)
 1043aa8:	10bfffc4 	addi	r2,r2,-1
 1043aac:	d8800515 	stw	r2,20(sp)
 1043ab0:	003dc306 	br	10431c0 <__alt_data_end+0xfffe31c0>
 1043ab4:	dd400917 	ldw	r21,36(sp)
 1043ab8:	dd000817 	ldw	r20,32(sp)
 1043abc:	0023883a 	mov	r17,zero
 1043ac0:	003fa906 	br	1043968 <__alt_data_end+0xfffe3968>
 1043ac4:	d9800317 	ldw	r6,12(sp)
 1043ac8:	b981670e 	bge	r23,r6,1044068 <_dtoa_r+0x110c>
 1043acc:	0027883a 	mov	r19,zero
 1043ad0:	d8c00a17 	ldw	r3,40(sp)
 1043ad4:	183fd21e 	bne	r3,zero,1043a20 <__alt_data_end+0xfffe3a20>
 1043ad8:	00800044 	movi	r2,1
 1043adc:	1585883a 	add	r2,r2,r22
 1043ae0:	108007cc 	andi	r2,r2,31
 1043ae4:	10005f26 	beq	r2,zero,1043c64 <_dtoa_r+0xd08>
 1043ae8:	00c00804 	movi	r3,32
 1043aec:	1887c83a 	sub	r3,r3,r2
 1043af0:	01000104 	movi	r4,4
 1043af4:	20c2dd0e 	bge	r4,r3,104466c <_dtoa_r+0x1710>
 1043af8:	d9000817 	ldw	r4,32(sp)
 1043afc:	00c00704 	movi	r3,28
 1043b00:	1885c83a 	sub	r2,r3,r2
 1043b04:	2089883a 	add	r4,r4,r2
 1043b08:	d9000815 	stw	r4,32(sp)
 1043b0c:	a0a9883a 	add	r20,r20,r2
 1043b10:	b0ad883a 	add	r22,r22,r2
 1043b14:	d8800817 	ldw	r2,32(sp)
 1043b18:	0080050e 	bge	zero,r2,1043b30 <_dtoa_r+0xbd4>
 1043b1c:	e00b883a 	mov	r5,fp
 1043b20:	8009883a 	mov	r4,r16
 1043b24:	100d883a 	mov	r6,r2
 1043b28:	1046cfc0 	call	1046cfc <__lshift>
 1043b2c:	1039883a 	mov	fp,r2
 1043b30:	0580050e 	bge	zero,r22,1043b48 <_dtoa_r+0xbec>
 1043b34:	a80b883a 	mov	r5,r21
 1043b38:	8009883a 	mov	r4,r16
 1043b3c:	b00d883a 	mov	r6,r22
 1043b40:	1046cfc0 	call	1046cfc <__lshift>
 1043b44:	102b883a 	mov	r21,r2
 1043b48:	d8c00c17 	ldw	r3,48(sp)
 1043b4c:	1801161e 	bne	r3,zero,1043fa8 <_dtoa_r+0x104c>
 1043b50:	d8c00617 	ldw	r3,24(sp)
 1043b54:	00c12d0e 	bge	zero,r3,104400c <_dtoa_r+0x10b0>
 1043b58:	d8c00b17 	ldw	r3,44(sp)
 1043b5c:	1800571e 	bne	r3,zero,1043cbc <_dtoa_r+0xd60>
 1043b60:	dc800717 	ldw	r18,28(sp)
 1043b64:	dcc00617 	ldw	r19,24(sp)
 1043b68:	9029883a 	mov	r20,r18
 1043b6c:	00000206 	br	1043b78 <_dtoa_r+0xc1c>
 1043b70:	10466540 	call	1046654 <__multadd>
 1043b74:	1039883a 	mov	fp,r2
 1043b78:	e009883a 	mov	r4,fp
 1043b7c:	a80b883a 	mov	r5,r21
 1043b80:	1042d5c0 	call	1042d5c <quorem>
 1043b84:	10800c04 	addi	r2,r2,48
 1043b88:	90800005 	stb	r2,0(r18)
 1043b8c:	94800044 	addi	r18,r18,1
 1043b90:	9507c83a 	sub	r3,r18,r20
 1043b94:	8009883a 	mov	r4,r16
 1043b98:	e00b883a 	mov	r5,fp
 1043b9c:	01800284 	movi	r6,10
 1043ba0:	000f883a 	mov	r7,zero
 1043ba4:	1cfff216 	blt	r3,r19,1043b70 <__alt_data_end+0xfffe3b70>
 1043ba8:	1011883a 	mov	r8,r2
 1043bac:	d8800617 	ldw	r2,24(sp)
 1043bb0:	00822e0e 	bge	zero,r2,104446c <_dtoa_r+0x1510>
 1043bb4:	d9000717 	ldw	r4,28(sp)
 1043bb8:	0025883a 	mov	r18,zero
 1043bbc:	20af883a 	add	r23,r4,r2
 1043bc0:	e00b883a 	mov	r5,fp
 1043bc4:	01800044 	movi	r6,1
 1043bc8:	8009883a 	mov	r4,r16
 1043bcc:	da001715 	stw	r8,92(sp)
 1043bd0:	1046cfc0 	call	1046cfc <__lshift>
 1043bd4:	1009883a 	mov	r4,r2
 1043bd8:	a80b883a 	mov	r5,r21
 1043bdc:	1039883a 	mov	fp,r2
 1043be0:	1046e440 	call	1046e44 <__mcmp>
 1043be4:	da001717 	ldw	r8,92(sp)
 1043be8:	00816e0e 	bge	zero,r2,10441a4 <_dtoa_r+0x1248>
 1043bec:	b93fffc3 	ldbu	r4,-1(r23)
 1043bf0:	b8bfffc4 	addi	r2,r23,-1
 1043bf4:	1007883a 	mov	r3,r2
 1043bf8:	01800e44 	movi	r6,57
 1043bfc:	d9c00717 	ldw	r7,28(sp)
 1043c00:	00000506 	br	1043c18 <_dtoa_r+0xcbc>
 1043c04:	18ffffc4 	addi	r3,r3,-1
 1043c08:	38811926 	beq	r7,r2,1044070 <_dtoa_r+0x1114>
 1043c0c:	19000003 	ldbu	r4,0(r3)
 1043c10:	102f883a 	mov	r23,r2
 1043c14:	10bfffc4 	addi	r2,r2,-1
 1043c18:	21403fcc 	andi	r5,r4,255
 1043c1c:	2940201c 	xori	r5,r5,128
 1043c20:	297fe004 	addi	r5,r5,-128
 1043c24:	29bff726 	beq	r5,r6,1043c04 <__alt_data_end+0xfffe3c04>
 1043c28:	21000044 	addi	r4,r4,1
 1043c2c:	11000005 	stb	r4,0(r2)
 1043c30:	8009883a 	mov	r4,r16
 1043c34:	a80b883a 	mov	r5,r21
 1043c38:	104662c0 	call	104662c <_Bfree>
 1043c3c:	883e7526 	beq	r17,zero,1043614 <__alt_data_end+0xfffe3614>
 1043c40:	90000426 	beq	r18,zero,1043c54 <_dtoa_r+0xcf8>
 1043c44:	94400326 	beq	r18,r17,1043c54 <_dtoa_r+0xcf8>
 1043c48:	8009883a 	mov	r4,r16
 1043c4c:	900b883a 	mov	r5,r18
 1043c50:	104662c0 	call	104662c <_Bfree>
 1043c54:	8009883a 	mov	r4,r16
 1043c58:	880b883a 	mov	r5,r17
 1043c5c:	104662c0 	call	104662c <_Bfree>
 1043c60:	003e6c06 	br	1043614 <__alt_data_end+0xfffe3614>
 1043c64:	00800704 	movi	r2,28
 1043c68:	d9800817 	ldw	r6,32(sp)
 1043c6c:	a0a9883a 	add	r20,r20,r2
 1043c70:	b0ad883a 	add	r22,r22,r2
 1043c74:	308d883a 	add	r6,r6,r2
 1043c78:	d9800815 	stw	r6,32(sp)
 1043c7c:	003fa506 	br	1043b14 <__alt_data_end+0xfffe3b14>
 1043c80:	013efb84 	movi	r4,-1042
 1043c84:	246bc83a 	sub	r21,r4,r17
 1043c88:	9548983a 	sll	r4,r18,r21
 1043c8c:	003d1806 	br	10430f0 <__alt_data_end+0xfffe30f0>
 1043c90:	d8000c15 	stw	zero,48(sp)
 1043c94:	003d5b06 	br	1043204 <__alt_data_end+0xfffe3204>
 1043c98:	880b883a 	mov	r5,r17
 1043c9c:	8009883a 	mov	r4,r16
 1043ca0:	01800284 	movi	r6,10
 1043ca4:	000f883a 	mov	r7,zero
 1043ca8:	10466540 	call	1046654 <__multadd>
 1043cac:	1023883a 	mov	r17,r2
 1043cb0:	d8800d17 	ldw	r2,52(sp)
 1043cb4:	0082550e 	bge	zero,r2,104460c <_dtoa_r+0x16b0>
 1043cb8:	d8800615 	stw	r2,24(sp)
 1043cbc:	0500050e 	bge	zero,r20,1043cd4 <_dtoa_r+0xd78>
 1043cc0:	880b883a 	mov	r5,r17
 1043cc4:	8009883a 	mov	r4,r16
 1043cc8:	a00d883a 	mov	r6,r20
 1043ccc:	1046cfc0 	call	1046cfc <__lshift>
 1043cd0:	1023883a 	mov	r17,r2
 1043cd4:	98016a1e 	bne	r19,zero,1044280 <_dtoa_r+0x1324>
 1043cd8:	8829883a 	mov	r20,r17
 1043cdc:	d9000617 	ldw	r4,24(sp)
 1043ce0:	dcc00717 	ldw	r19,28(sp)
 1043ce4:	9480004c 	andi	r18,r18,1
 1043ce8:	20bfffc4 	addi	r2,r4,-1
 1043cec:	9885883a 	add	r2,r19,r2
 1043cf0:	d8800415 	stw	r2,16(sp)
 1043cf4:	dc800615 	stw	r18,24(sp)
 1043cf8:	e009883a 	mov	r4,fp
 1043cfc:	a80b883a 	mov	r5,r21
 1043d00:	1042d5c0 	call	1042d5c <quorem>
 1043d04:	e009883a 	mov	r4,fp
 1043d08:	880b883a 	mov	r5,r17
 1043d0c:	102f883a 	mov	r23,r2
 1043d10:	1046e440 	call	1046e44 <__mcmp>
 1043d14:	8009883a 	mov	r4,r16
 1043d18:	a80b883a 	mov	r5,r21
 1043d1c:	a00d883a 	mov	r6,r20
 1043d20:	102d883a 	mov	r22,r2
 1043d24:	1046ea40 	call	1046ea4 <__mdiff>
 1043d28:	1007883a 	mov	r3,r2
 1043d2c:	10800317 	ldw	r2,12(r2)
 1043d30:	bc800c04 	addi	r18,r23,48
 1043d34:	1000971e 	bne	r2,zero,1043f94 <_dtoa_r+0x1038>
 1043d38:	180b883a 	mov	r5,r3
 1043d3c:	e009883a 	mov	r4,fp
 1043d40:	d8c01515 	stw	r3,84(sp)
 1043d44:	1046e440 	call	1046e44 <__mcmp>
 1043d48:	d8c01517 	ldw	r3,84(sp)
 1043d4c:	8009883a 	mov	r4,r16
 1043d50:	d8801515 	stw	r2,84(sp)
 1043d54:	180b883a 	mov	r5,r3
 1043d58:	104662c0 	call	104662c <_Bfree>
 1043d5c:	d8801517 	ldw	r2,84(sp)
 1043d60:	1000041e 	bne	r2,zero,1043d74 <_dtoa_r+0xe18>
 1043d64:	d9800317 	ldw	r6,12(sp)
 1043d68:	3000021e 	bne	r6,zero,1043d74 <_dtoa_r+0xe18>
 1043d6c:	d8c00617 	ldw	r3,24(sp)
 1043d70:	18007626 	beq	r3,zero,1043f4c <_dtoa_r+0xff0>
 1043d74:	b0005b16 	blt	r22,zero,1043ee4 <_dtoa_r+0xf88>
 1043d78:	b000041e 	bne	r22,zero,1043d8c <_dtoa_r+0xe30>
 1043d7c:	d9000317 	ldw	r4,12(sp)
 1043d80:	2000021e 	bne	r4,zero,1043d8c <_dtoa_r+0xe30>
 1043d84:	d8c00617 	ldw	r3,24(sp)
 1043d88:	18005626 	beq	r3,zero,1043ee4 <_dtoa_r+0xf88>
 1043d8c:	00814d16 	blt	zero,r2,10442c4 <_dtoa_r+0x1368>
 1043d90:	d8c00417 	ldw	r3,16(sp)
 1043d94:	9d800044 	addi	r22,r19,1
 1043d98:	9c800005 	stb	r18,0(r19)
 1043d9c:	b02f883a 	mov	r23,r22
 1043da0:	98c14c26 	beq	r19,r3,10442d4 <_dtoa_r+0x1378>
 1043da4:	e00b883a 	mov	r5,fp
 1043da8:	8009883a 	mov	r4,r16
 1043dac:	01800284 	movi	r6,10
 1043db0:	000f883a 	mov	r7,zero
 1043db4:	10466540 	call	1046654 <__multadd>
 1043db8:	1039883a 	mov	fp,r2
 1043dbc:	8d006d26 	beq	r17,r20,1043f74 <_dtoa_r+0x1018>
 1043dc0:	880b883a 	mov	r5,r17
 1043dc4:	01800284 	movi	r6,10
 1043dc8:	000f883a 	mov	r7,zero
 1043dcc:	8009883a 	mov	r4,r16
 1043dd0:	10466540 	call	1046654 <__multadd>
 1043dd4:	a00b883a 	mov	r5,r20
 1043dd8:	8009883a 	mov	r4,r16
 1043ddc:	01800284 	movi	r6,10
 1043de0:	000f883a 	mov	r7,zero
 1043de4:	1023883a 	mov	r17,r2
 1043de8:	10466540 	call	1046654 <__multadd>
 1043dec:	1029883a 	mov	r20,r2
 1043df0:	b027883a 	mov	r19,r22
 1043df4:	003fc006 	br	1043cf8 <__alt_data_end+0xfffe3cf8>
 1043df8:	a005883a 	mov	r2,r20
 1043dfc:	003ede06 	br	1043978 <__alt_data_end+0xfffe3978>
 1043e00:	01000044 	movi	r4,1
 1043e04:	d9000b15 	stw	r4,44(sp)
 1043e08:	d9802217 	ldw	r6,136(sp)
 1043e0c:	0180dc0e 	bge	zero,r6,1044180 <_dtoa_r+0x1224>
 1043e10:	3023883a 	mov	r17,r6
 1043e14:	d9800d15 	stw	r6,52(sp)
 1043e18:	d9800615 	stw	r6,24(sp)
 1043e1c:	003d1e06 	br	1043298 <__alt_data_end+0xfffe3298>
 1043e20:	d8800617 	ldw	r2,24(sp)
 1043e24:	00be3716 	blt	zero,r2,1043704 <__alt_data_end+0xfffe3704>
 1043e28:	1000be1e 	bne	r2,zero,1044124 <_dtoa_r+0x11c8>
 1043e2c:	8809883a 	mov	r4,r17
 1043e30:	a00b883a 	mov	r5,r20
 1043e34:	000d883a 	mov	r6,zero
 1043e38:	01d00534 	movhi	r7,16404
 1043e3c:	104bb4c0 	call	104bb4c <__muldf3>
 1043e40:	1009883a 	mov	r4,r2
 1043e44:	180b883a 	mov	r5,r3
 1043e48:	900d883a 	mov	r6,r18
 1043e4c:	980f883a 	mov	r7,r19
 1043e50:	104b98c0 	call	104b98c <__gedf2>
 1043e54:	002b883a 	mov	r21,zero
 1043e58:	0023883a 	mov	r17,zero
 1043e5c:	10007a16 	blt	r2,zero,1044048 <_dtoa_r+0x10ec>
 1043e60:	d9002217 	ldw	r4,136(sp)
 1043e64:	ddc00717 	ldw	r23,28(sp)
 1043e68:	0108303a 	nor	r4,zero,r4
 1043e6c:	d9000515 	stw	r4,20(sp)
 1043e70:	8009883a 	mov	r4,r16
 1043e74:	a80b883a 	mov	r5,r21
 1043e78:	104662c0 	call	104662c <_Bfree>
 1043e7c:	883f751e 	bne	r17,zero,1043c54 <__alt_data_end+0xfffe3c54>
 1043e80:	003de406 	br	1043614 <__alt_data_end+0xfffe3614>
 1043e84:	e00b883a 	mov	r5,fp
 1043e88:	8009883a 	mov	r4,r16
 1043e8c:	1046bbc0 	call	1046bbc <__pow5mult>
 1043e90:	1039883a 	mov	fp,r2
 1043e94:	003ed306 	br	10439e4 <__alt_data_end+0xfffe39e4>
 1043e98:	903ee01e 	bne	r18,zero,1043a1c <__alt_data_end+0xfffe3a1c>
 1043e9c:	00800434 	movhi	r2,16
 1043ea0:	10bfffc4 	addi	r2,r2,-1
 1043ea4:	9884703a 	and	r2,r19,r2
 1043ea8:	103f081e 	bne	r2,zero,1043acc <__alt_data_end+0xfffe3acc>
 1043eac:	9cdffc2c 	andhi	r19,r19,32752
 1043eb0:	983f0626 	beq	r19,zero,1043acc <__alt_data_end+0xfffe3acc>
 1043eb4:	d8800817 	ldw	r2,32(sp)
 1043eb8:	b5800044 	addi	r22,r22,1
 1043ebc:	04c00044 	movi	r19,1
 1043ec0:	10800044 	addi	r2,r2,1
 1043ec4:	d8800815 	stw	r2,32(sp)
 1043ec8:	003f0106 	br	1043ad0 <__alt_data_end+0xfffe3ad0>
 1043ecc:	d9800f17 	ldw	r6,60(sp)
 1043ed0:	30016826 	beq	r6,zero,1044474 <_dtoa_r+0x1518>
 1043ed4:	10810cc4 	addi	r2,r2,1075
 1043ed8:	dd400917 	ldw	r21,36(sp)
 1043edc:	dd000817 	ldw	r20,32(sp)
 1043ee0:	003e9906 	br	1043948 <__alt_data_end+0xfffe3948>
 1043ee4:	9011883a 	mov	r8,r18
 1043ee8:	4007883a 	mov	r3,r8
 1043eec:	e02d883a 	mov	r22,fp
 1043ef0:	0080100e 	bge	zero,r2,1043f34 <_dtoa_r+0xfd8>
 1043ef4:	01800044 	movi	r6,1
 1043ef8:	8009883a 	mov	r4,r16
 1043efc:	e00b883a 	mov	r5,fp
 1043f00:	da001515 	stw	r8,84(sp)
 1043f04:	da001715 	stw	r8,92(sp)
 1043f08:	1046cfc0 	call	1046cfc <__lshift>
 1043f0c:	1009883a 	mov	r4,r2
 1043f10:	a80b883a 	mov	r5,r21
 1043f14:	102d883a 	mov	r22,r2
 1043f18:	1046e440 	call	1046e44 <__mcmp>
 1043f1c:	d8c01517 	ldw	r3,84(sp)
 1043f20:	da001717 	ldw	r8,92(sp)
 1043f24:	0081a50e 	bge	zero,r2,10445bc <_dtoa_r+0x1660>
 1043f28:	00800e44 	movi	r2,57
 1043f2c:	40817b26 	beq	r8,r2,104451c <_dtoa_r+0x15c0>
 1043f30:	40c00044 	addi	r3,r8,1
 1043f34:	8825883a 	mov	r18,r17
 1043f38:	9dc00044 	addi	r23,r19,1
 1043f3c:	98c00005 	stb	r3,0(r19)
 1043f40:	a023883a 	mov	r17,r20
 1043f44:	b039883a 	mov	fp,r22
 1043f48:	003f3906 	br	1043c30 <__alt_data_end+0xfffe3c30>
 1043f4c:	00800e44 	movi	r2,57
 1043f50:	9011883a 	mov	r8,r18
 1043f54:	90817226 	beq	r18,r2,1044520 <_dtoa_r+0x15c4>
 1043f58:	0580010e 	bge	zero,r22,1043f60 <_dtoa_r+0x1004>
 1043f5c:	ba000c44 	addi	r8,r23,49
 1043f60:	8825883a 	mov	r18,r17
 1043f64:	9dc00044 	addi	r23,r19,1
 1043f68:	9a000005 	stb	r8,0(r19)
 1043f6c:	a023883a 	mov	r17,r20
 1043f70:	003f2f06 	br	1043c30 <__alt_data_end+0xfffe3c30>
 1043f74:	880b883a 	mov	r5,r17
 1043f78:	8009883a 	mov	r4,r16
 1043f7c:	01800284 	movi	r6,10
 1043f80:	000f883a 	mov	r7,zero
 1043f84:	10466540 	call	1046654 <__multadd>
 1043f88:	1023883a 	mov	r17,r2
 1043f8c:	1029883a 	mov	r20,r2
 1043f90:	003f9706 	br	1043df0 <__alt_data_end+0xfffe3df0>
 1043f94:	8009883a 	mov	r4,r16
 1043f98:	180b883a 	mov	r5,r3
 1043f9c:	104662c0 	call	104662c <_Bfree>
 1043fa0:	00800044 	movi	r2,1
 1043fa4:	003f7306 	br	1043d74 <__alt_data_end+0xfffe3d74>
 1043fa8:	e009883a 	mov	r4,fp
 1043fac:	a80b883a 	mov	r5,r21
 1043fb0:	1046e440 	call	1046e44 <__mcmp>
 1043fb4:	103ee60e 	bge	r2,zero,1043b50 <__alt_data_end+0xfffe3b50>
 1043fb8:	8009883a 	mov	r4,r16
 1043fbc:	e00b883a 	mov	r5,fp
 1043fc0:	01800284 	movi	r6,10
 1043fc4:	000f883a 	mov	r7,zero
 1043fc8:	10466540 	call	1046654 <__multadd>
 1043fcc:	d9000517 	ldw	r4,20(sp)
 1043fd0:	d9800b17 	ldw	r6,44(sp)
 1043fd4:	1039883a 	mov	fp,r2
 1043fd8:	213fffc4 	addi	r4,r4,-1
 1043fdc:	d9000515 	stw	r4,20(sp)
 1043fe0:	303f2d1e 	bne	r6,zero,1043c98 <__alt_data_end+0xfffe3c98>
 1043fe4:	d9000d17 	ldw	r4,52(sp)
 1043fe8:	0101780e 	bge	zero,r4,10445cc <_dtoa_r+0x1670>
 1043fec:	d9000615 	stw	r4,24(sp)
 1043ff0:	003edb06 	br	1043b60 <__alt_data_end+0xfffe3b60>
 1043ff4:	00800084 	movi	r2,2
 1043ff8:	30818e1e 	bne	r6,r2,1044634 <_dtoa_r+0x16d8>
 1043ffc:	d8000b15 	stw	zero,44(sp)
 1044000:	003f8106 	br	1043e08 <__alt_data_end+0xfffe3e08>
 1044004:	d8800717 	ldw	r2,28(sp)
 1044008:	003c0306 	br	1043018 <__alt_data_end+0xfffe3018>
 104400c:	d9000317 	ldw	r4,12(sp)
 1044010:	00800084 	movi	r2,2
 1044014:	113ed00e 	bge	r2,r4,1043b58 <__alt_data_end+0xfffe3b58>
 1044018:	d8c00617 	ldw	r3,24(sp)
 104401c:	183f901e 	bne	r3,zero,1043e60 <__alt_data_end+0xfffe3e60>
 1044020:	a80b883a 	mov	r5,r21
 1044024:	8009883a 	mov	r4,r16
 1044028:	01800144 	movi	r6,5
 104402c:	000f883a 	mov	r7,zero
 1044030:	10466540 	call	1046654 <__multadd>
 1044034:	e009883a 	mov	r4,fp
 1044038:	100b883a 	mov	r5,r2
 104403c:	102b883a 	mov	r21,r2
 1044040:	1046e440 	call	1046e44 <__mcmp>
 1044044:	00bf860e 	bge	zero,r2,1043e60 <__alt_data_end+0xfffe3e60>
 1044048:	d9800717 	ldw	r6,28(sp)
 104404c:	00800c44 	movi	r2,49
 1044050:	30800005 	stb	r2,0(r6)
 1044054:	d8800517 	ldw	r2,20(sp)
 1044058:	35c00044 	addi	r23,r6,1
 104405c:	10800044 	addi	r2,r2,1
 1044060:	d8800515 	stw	r2,20(sp)
 1044064:	003f8206 	br	1043e70 <__alt_data_end+0xfffe3e70>
 1044068:	903e981e 	bne	r18,zero,1043acc <__alt_data_end+0xfffe3acc>
 104406c:	003f8b06 	br	1043e9c <__alt_data_end+0xfffe3e9c>
 1044070:	d9800517 	ldw	r6,20(sp)
 1044074:	d8c00717 	ldw	r3,28(sp)
 1044078:	00800c44 	movi	r2,49
 104407c:	31800044 	addi	r6,r6,1
 1044080:	d9800515 	stw	r6,20(sp)
 1044084:	18800005 	stb	r2,0(r3)
 1044088:	003ee906 	br	1043c30 <__alt_data_end+0xfffe3c30>
 104408c:	dc000317 	ldw	r16,12(sp)
 1044090:	003d6006 	br	1043614 <__alt_data_end+0xfffe3614>
 1044094:	8809883a 	mov	r4,r17
 1044098:	104cbc80 	call	104cbc8 <__floatsidf>
 104409c:	a009883a 	mov	r4,r20
 10440a0:	a80b883a 	mov	r5,r21
 10440a4:	100d883a 	mov	r6,r2
 10440a8:	180f883a 	mov	r7,r3
 10440ac:	104bb4c0 	call	104bb4c <__muldf3>
 10440b0:	1009883a 	mov	r4,r2
 10440b4:	180b883a 	mov	r5,r3
 10440b8:	000d883a 	mov	r6,zero
 10440bc:	01d00734 	movhi	r7,16412
 10440c0:	104a7a00 	call	104a7a0 <__adddf3>
 10440c4:	1023883a 	mov	r17,r2
 10440c8:	00bf3034 	movhi	r2,64704
 10440cc:	1885883a 	add	r2,r3,r2
 10440d0:	d8800e15 	stw	r2,56(sp)
 10440d4:	a009883a 	mov	r4,r20
 10440d8:	a80b883a 	mov	r5,r21
 10440dc:	000d883a 	mov	r6,zero
 10440e0:	01d00534 	movhi	r7,16404
 10440e4:	104c2700 	call	104c270 <__subdf3>
 10440e8:	d9c00e17 	ldw	r7,56(sp)
 10440ec:	1009883a 	mov	r4,r2
 10440f0:	180b883a 	mov	r5,r3
 10440f4:	880d883a 	mov	r6,r17
 10440f8:	102b883a 	mov	r21,r2
 10440fc:	1829883a 	mov	r20,r3
 1044100:	104b98c0 	call	104b98c <__gedf2>
 1044104:	00807716 	blt	zero,r2,10442e4 <_dtoa_r+0x1388>
 1044108:	d8800e17 	ldw	r2,56(sp)
 104410c:	a809883a 	mov	r4,r21
 1044110:	a00b883a 	mov	r5,r20
 1044114:	11e0003c 	xorhi	r7,r2,32768
 1044118:	880d883a 	mov	r6,r17
 104411c:	104ba6c0 	call	104ba6c <__ledf2>
 1044120:	103d6b0e 	bge	r2,zero,10436d0 <__alt_data_end+0xfffe36d0>
 1044124:	002b883a 	mov	r21,zero
 1044128:	0023883a 	mov	r17,zero
 104412c:	003f4c06 	br	1043e60 <__alt_data_end+0xfffe3e60>
 1044130:	d9800917 	ldw	r6,36(sp)
 1044134:	e00b883a 	mov	r5,fp
 1044138:	8009883a 	mov	r4,r16
 104413c:	1046bbc0 	call	1046bbc <__pow5mult>
 1044140:	1039883a 	mov	fp,r2
 1044144:	003e2706 	br	10439e4 <__alt_data_end+0xfffe39e4>
 1044148:	d8000b15 	stw	zero,44(sp)
 104414c:	003c4906 	br	1043274 <__alt_data_end+0xfffe3274>
 1044150:	d9000917 	ldw	r4,36(sp)
 1044154:	d9800a17 	ldw	r6,40(sp)
 1044158:	dd400915 	stw	r21,36(sp)
 104415c:	a905c83a 	sub	r2,r21,r4
 1044160:	308d883a 	add	r6,r6,r2
 1044164:	d9800a15 	stw	r6,40(sp)
 1044168:	002b883a 	mov	r21,zero
 104416c:	003df206 	br	1043938 <__alt_data_end+0xfffe3938>
 1044170:	dc800e15 	stw	r18,56(sp)
 1044174:	982b883a 	mov	r21,r19
 1044178:	04400084 	movi	r17,2
 104417c:	003c7406 	br	1043350 <__alt_data_end+0xfffe3350>
 1044180:	04400044 	movi	r17,1
 1044184:	dc400d15 	stw	r17,52(sp)
 1044188:	dc400615 	stw	r17,24(sp)
 104418c:	dc402215 	stw	r17,136(sp)
 1044190:	80001115 	stw	zero,68(r16)
 1044194:	000b883a 	mov	r5,zero
 1044198:	003c4a06 	br	10432c4 <__alt_data_end+0xfffe32c4>
 104419c:	3023883a 	mov	r17,r6
 10441a0:	003ffb06 	br	1044190 <__alt_data_end+0xfffe4190>
 10441a4:	1000021e 	bne	r2,zero,10441b0 <_dtoa_r+0x1254>
 10441a8:	4200004c 	andi	r8,r8,1
 10441ac:	403e8f1e 	bne	r8,zero,1043bec <__alt_data_end+0xfffe3bec>
 10441b0:	01000c04 	movi	r4,48
 10441b4:	00000106 	br	10441bc <_dtoa_r+0x1260>
 10441b8:	102f883a 	mov	r23,r2
 10441bc:	b8bfffc4 	addi	r2,r23,-1
 10441c0:	10c00007 	ldb	r3,0(r2)
 10441c4:	193ffc26 	beq	r3,r4,10441b8 <__alt_data_end+0xfffe41b8>
 10441c8:	003e9906 	br	1043c30 <__alt_data_end+0xfffe3c30>
 10441cc:	d9000517 	ldw	r4,20(sp)
 10441d0:	012fc83a 	sub	r23,zero,r4
 10441d4:	b800ad26 	beq	r23,zero,104448c <_dtoa_r+0x1530>
 10441d8:	b88003cc 	andi	r2,r23,15
 10441dc:	100490fa 	slli	r2,r2,3
 10441e0:	00c04174 	movhi	r3,261
 10441e4:	18fe5f04 	addi	r3,r3,-1668
 10441e8:	1885883a 	add	r2,r3,r2
 10441ec:	11800017 	ldw	r6,0(r2)
 10441f0:	11c00117 	ldw	r7,4(r2)
 10441f4:	b82fd13a 	srai	r23,r23,4
 10441f8:	9009883a 	mov	r4,r18
 10441fc:	980b883a 	mov	r5,r19
 1044200:	104bb4c0 	call	104bb4c <__muldf3>
 1044204:	1029883a 	mov	r20,r2
 1044208:	182b883a 	mov	r21,r3
 104420c:	b800f426 	beq	r23,zero,10445e0 <_dtoa_r+0x1684>
 1044210:	02004174 	movhi	r8,261
 1044214:	423e5504 	addi	r8,r8,-1708
 1044218:	8029883a 	mov	r20,r16
 104421c:	04400084 	movi	r17,2
 1044220:	4021883a 	mov	r16,r8
 1044224:	b980004c 	andi	r6,r23,1
 1044228:	1009883a 	mov	r4,r2
 104422c:	b82fd07a 	srai	r23,r23,1
 1044230:	180b883a 	mov	r5,r3
 1044234:	30000426 	beq	r6,zero,1044248 <_dtoa_r+0x12ec>
 1044238:	81800017 	ldw	r6,0(r16)
 104423c:	81c00117 	ldw	r7,4(r16)
 1044240:	8c400044 	addi	r17,r17,1
 1044244:	104bb4c0 	call	104bb4c <__muldf3>
 1044248:	84000204 	addi	r16,r16,8
 104424c:	b83ff51e 	bne	r23,zero,1044224 <__alt_data_end+0xfffe4224>
 1044250:	a021883a 	mov	r16,r20
 1044254:	182b883a 	mov	r21,r3
 1044258:	1029883a 	mov	r20,r2
 104425c:	003c5506 	br	10433b4 <__alt_data_end+0xfffe33b4>
 1044260:	d9800517 	ldw	r6,20(sp)
 1044264:	d9000717 	ldw	r4,28(sp)
 1044268:	00c00c04 	movi	r3,48
 104426c:	31800044 	addi	r6,r6,1
 1044270:	d9800515 	stw	r6,20(sp)
 1044274:	20c00005 	stb	r3,0(r4)
 1044278:	02000c44 	movi	r8,49
 104427c:	003da206 	br	1043908 <__alt_data_end+0xfffe3908>
 1044280:	89400117 	ldw	r5,4(r17)
 1044284:	8009883a 	mov	r4,r16
 1044288:	10465840 	call	1046584 <_Balloc>
 104428c:	89800417 	ldw	r6,16(r17)
 1044290:	11000304 	addi	r4,r2,12
 1044294:	89400304 	addi	r5,r17,12
 1044298:	31800084 	addi	r6,r6,2
 104429c:	318d883a 	add	r6,r6,r6
 10442a0:	318d883a 	add	r6,r6,r6
 10442a4:	1027883a 	mov	r19,r2
 10442a8:	10461cc0 	call	10461cc <memcpy>
 10442ac:	8009883a 	mov	r4,r16
 10442b0:	980b883a 	mov	r5,r19
 10442b4:	01800044 	movi	r6,1
 10442b8:	1046cfc0 	call	1046cfc <__lshift>
 10442bc:	1029883a 	mov	r20,r2
 10442c0:	003e8606 	br	1043cdc <__alt_data_end+0xfffe3cdc>
 10442c4:	00800e44 	movi	r2,57
 10442c8:	90809526 	beq	r18,r2,1044520 <_dtoa_r+0x15c4>
 10442cc:	92000044 	addi	r8,r18,1
 10442d0:	003f2306 	br	1043f60 <__alt_data_end+0xfffe3f60>
 10442d4:	9011883a 	mov	r8,r18
 10442d8:	8825883a 	mov	r18,r17
 10442dc:	a023883a 	mov	r17,r20
 10442e0:	003e3706 	br	1043bc0 <__alt_data_end+0xfffe3bc0>
 10442e4:	002b883a 	mov	r21,zero
 10442e8:	0023883a 	mov	r17,zero
 10442ec:	003f5606 	br	1044048 <__alt_data_end+0xfffe4048>
 10442f0:	51bfffc4 	addi	r6,r10,-1
 10442f4:	300490fa 	slli	r2,r6,3
 10442f8:	00c04174 	movhi	r3,261
 10442fc:	18fe5f04 	addi	r3,r3,-1668
 1044300:	1885883a 	add	r2,r3,r2
 1044304:	d9c00e17 	ldw	r7,56(sp)
 1044308:	11000017 	ldw	r4,0(r2)
 104430c:	11400117 	ldw	r5,4(r2)
 1044310:	d8800717 	ldw	r2,28(sp)
 1044314:	d9801015 	stw	r6,64(sp)
 1044318:	880d883a 	mov	r6,r17
 104431c:	da801615 	stw	r10,88(sp)
 1044320:	15c00044 	addi	r23,r2,1
 1044324:	104bb4c0 	call	104bb4c <__muldf3>
 1044328:	a80b883a 	mov	r5,r21
 104432c:	a009883a 	mov	r4,r20
 1044330:	d8c01115 	stw	r3,68(sp)
 1044334:	d8800e15 	stw	r2,56(sp)
 1044338:	104cb400 	call	104cb40 <__fixdfsi>
 104433c:	1009883a 	mov	r4,r2
 1044340:	1023883a 	mov	r17,r2
 1044344:	104cbc80 	call	104cbc8 <__floatsidf>
 1044348:	a009883a 	mov	r4,r20
 104434c:	a80b883a 	mov	r5,r21
 1044350:	100d883a 	mov	r6,r2
 1044354:	180f883a 	mov	r7,r3
 1044358:	104c2700 	call	104c270 <__subdf3>
 104435c:	1813883a 	mov	r9,r3
 1044360:	d8c00717 	ldw	r3,28(sp)
 1044364:	8c400c04 	addi	r17,r17,48
 1044368:	1011883a 	mov	r8,r2
 104436c:	1c400005 	stb	r17,0(r3)
 1044370:	da801617 	ldw	r10,88(sp)
 1044374:	00800044 	movi	r2,1
 1044378:	50802326 	beq	r10,r2,1044408 <_dtoa_r+0x14ac>
 104437c:	d8800717 	ldw	r2,28(sp)
 1044380:	b82b883a 	mov	r21,r23
 1044384:	dc001315 	stw	r16,76(sp)
 1044388:	12a9883a 	add	r20,r2,r10
 104438c:	4807883a 	mov	r3,r9
 1044390:	4005883a 	mov	r2,r8
 1044394:	dc801415 	stw	r18,80(sp)
 1044398:	000d883a 	mov	r6,zero
 104439c:	01d00934 	movhi	r7,16420
 10443a0:	1009883a 	mov	r4,r2
 10443a4:	180b883a 	mov	r5,r3
 10443a8:	104bb4c0 	call	104bb4c <__muldf3>
 10443ac:	180b883a 	mov	r5,r3
 10443b0:	1009883a 	mov	r4,r2
 10443b4:	1821883a 	mov	r16,r3
 10443b8:	1025883a 	mov	r18,r2
 10443bc:	104cb400 	call	104cb40 <__fixdfsi>
 10443c0:	1009883a 	mov	r4,r2
 10443c4:	1023883a 	mov	r17,r2
 10443c8:	104cbc80 	call	104cbc8 <__floatsidf>
 10443cc:	9009883a 	mov	r4,r18
 10443d0:	800b883a 	mov	r5,r16
 10443d4:	100d883a 	mov	r6,r2
 10443d8:	180f883a 	mov	r7,r3
 10443dc:	8c400c04 	addi	r17,r17,48
 10443e0:	104c2700 	call	104c270 <__subdf3>
 10443e4:	ad400044 	addi	r21,r21,1
 10443e8:	ac7fffc5 	stb	r17,-1(r21)
 10443ec:	ad3fea1e 	bne	r21,r20,1044398 <__alt_data_end+0xfffe4398>
 10443f0:	1813883a 	mov	r9,r3
 10443f4:	d8c01017 	ldw	r3,64(sp)
 10443f8:	dc001317 	ldw	r16,76(sp)
 10443fc:	dc801417 	ldw	r18,80(sp)
 1044400:	1011883a 	mov	r8,r2
 1044404:	b8ef883a 	add	r23,r23,r3
 1044408:	d9000e17 	ldw	r4,56(sp)
 104440c:	d9401117 	ldw	r5,68(sp)
 1044410:	000d883a 	mov	r6,zero
 1044414:	01cff834 	movhi	r7,16352
 1044418:	da001715 	stw	r8,92(sp)
 104441c:	da401515 	stw	r9,84(sp)
 1044420:	104a7a00 	call	104a7a0 <__adddf3>
 1044424:	da001717 	ldw	r8,92(sp)
 1044428:	da401517 	ldw	r9,84(sp)
 104442c:	1009883a 	mov	r4,r2
 1044430:	400d883a 	mov	r6,r8
 1044434:	480f883a 	mov	r7,r9
 1044438:	180b883a 	mov	r5,r3
 104443c:	104ba6c0 	call	104ba6c <__ledf2>
 1044440:	da001717 	ldw	r8,92(sp)
 1044444:	da401517 	ldw	r9,84(sp)
 1044448:	10003b0e 	bge	r2,zero,1044538 <_dtoa_r+0x15dc>
 104444c:	d9001217 	ldw	r4,72(sp)
 1044450:	bd7fffc3 	ldbu	r21,-1(r23)
 1044454:	d9000515 	stw	r4,20(sp)
 1044458:	003d1c06 	br	10438cc <__alt_data_end+0xfffe38cc>
 104445c:	d8c00817 	ldw	r3,32(sp)
 1044460:	18a9c83a 	sub	r20,r3,r2
 1044464:	0005883a 	mov	r2,zero
 1044468:	003d3706 	br	1043948 <__alt_data_end+0xfffe3948>
 104446c:	00800044 	movi	r2,1
 1044470:	003dd006 	br	1043bb4 <__alt_data_end+0xfffe3bb4>
 1044474:	d8c00217 	ldw	r3,8(sp)
 1044478:	00800d84 	movi	r2,54
 104447c:	dd400917 	ldw	r21,36(sp)
 1044480:	10c5c83a 	sub	r2,r2,r3
 1044484:	dd000817 	ldw	r20,32(sp)
 1044488:	003d2f06 	br	1043948 <__alt_data_end+0xfffe3948>
 104448c:	9029883a 	mov	r20,r18
 1044490:	982b883a 	mov	r21,r19
 1044494:	04400084 	movi	r17,2
 1044498:	003bc606 	br	10433b4 <__alt_data_end+0xfffe33b4>
 104449c:	d8800617 	ldw	r2,24(sp)
 10444a0:	103efc26 	beq	r2,zero,1044094 <__alt_data_end+0xfffe4094>
 10444a4:	d8c00d17 	ldw	r3,52(sp)
 10444a8:	00fc890e 	bge	zero,r3,10436d0 <__alt_data_end+0xfffe36d0>
 10444ac:	a80b883a 	mov	r5,r21
 10444b0:	a009883a 	mov	r4,r20
 10444b4:	000d883a 	mov	r6,zero
 10444b8:	01d00934 	movhi	r7,16420
 10444bc:	104bb4c0 	call	104bb4c <__muldf3>
 10444c0:	89000044 	addi	r4,r17,1
 10444c4:	1029883a 	mov	r20,r2
 10444c8:	182b883a 	mov	r21,r3
 10444cc:	104cbc80 	call	104cbc8 <__floatsidf>
 10444d0:	a009883a 	mov	r4,r20
 10444d4:	a80b883a 	mov	r5,r21
 10444d8:	100d883a 	mov	r6,r2
 10444dc:	180f883a 	mov	r7,r3
 10444e0:	104bb4c0 	call	104bb4c <__muldf3>
 10444e4:	1009883a 	mov	r4,r2
 10444e8:	180b883a 	mov	r5,r3
 10444ec:	000d883a 	mov	r6,zero
 10444f0:	01d00734 	movhi	r7,16412
 10444f4:	104a7a00 	call	104a7a0 <__adddf3>
 10444f8:	d9000517 	ldw	r4,20(sp)
 10444fc:	1023883a 	mov	r17,r2
 1044500:	00bf3034 	movhi	r2,64704
 1044504:	213fffc4 	addi	r4,r4,-1
 1044508:	1885883a 	add	r2,r3,r2
 104450c:	d9001215 	stw	r4,72(sp)
 1044510:	d8800e15 	stw	r2,56(sp)
 1044514:	da800d17 	ldw	r10,52(sp)
 1044518:	003bc306 	br	1043428 <__alt_data_end+0xfffe3428>
 104451c:	b039883a 	mov	fp,r22
 1044520:	01000e44 	movi	r4,57
 1044524:	8825883a 	mov	r18,r17
 1044528:	9dc00044 	addi	r23,r19,1
 104452c:	99000005 	stb	r4,0(r19)
 1044530:	a023883a 	mov	r17,r20
 1044534:	003dae06 	br	1043bf0 <__alt_data_end+0xfffe3bf0>
 1044538:	d9800e17 	ldw	r6,56(sp)
 104453c:	d9c01117 	ldw	r7,68(sp)
 1044540:	0009883a 	mov	r4,zero
 1044544:	014ff834 	movhi	r5,16352
 1044548:	da001715 	stw	r8,92(sp)
 104454c:	da401515 	stw	r9,84(sp)
 1044550:	104c2700 	call	104c270 <__subdf3>
 1044554:	da001717 	ldw	r8,92(sp)
 1044558:	da401517 	ldw	r9,84(sp)
 104455c:	1009883a 	mov	r4,r2
 1044560:	180b883a 	mov	r5,r3
 1044564:	400d883a 	mov	r6,r8
 1044568:	480f883a 	mov	r7,r9
 104456c:	104b98c0 	call	104b98c <__gedf2>
 1044570:	00bc570e 	bge	zero,r2,10436d0 <__alt_data_end+0xfffe36d0>
 1044574:	01000c04 	movi	r4,48
 1044578:	00000106 	br	1044580 <_dtoa_r+0x1624>
 104457c:	102f883a 	mov	r23,r2
 1044580:	b8bfffc4 	addi	r2,r23,-1
 1044584:	10c00007 	ldb	r3,0(r2)
 1044588:	193ffc26 	beq	r3,r4,104457c <__alt_data_end+0xfffe457c>
 104458c:	d9801217 	ldw	r6,72(sp)
 1044590:	d9800515 	stw	r6,20(sp)
 1044594:	003c1f06 	br	1043614 <__alt_data_end+0xfffe3614>
 1044598:	d8801217 	ldw	r2,72(sp)
 104459c:	dc001117 	ldw	r16,68(sp)
 10445a0:	d8800515 	stw	r2,20(sp)
 10445a4:	003cc906 	br	10438cc <__alt_data_end+0xfffe38cc>
 10445a8:	dd801317 	ldw	r22,76(sp)
 10445ac:	dc001117 	ldw	r16,68(sp)
 10445b0:	dcc01417 	ldw	r19,80(sp)
 10445b4:	dc801017 	ldw	r18,64(sp)
 10445b8:	003c4506 	br	10436d0 <__alt_data_end+0xfffe36d0>
 10445bc:	103e5d1e 	bne	r2,zero,1043f34 <__alt_data_end+0xfffe3f34>
 10445c0:	4080004c 	andi	r2,r8,1
 10445c4:	103e5b26 	beq	r2,zero,1043f34 <__alt_data_end+0xfffe3f34>
 10445c8:	003e5706 	br	1043f28 <__alt_data_end+0xfffe3f28>
 10445cc:	d8c00317 	ldw	r3,12(sp)
 10445d0:	00800084 	movi	r2,2
 10445d4:	10c00a16 	blt	r2,r3,1044600 <_dtoa_r+0x16a4>
 10445d8:	d9000d17 	ldw	r4,52(sp)
 10445dc:	003e8306 	br	1043fec <__alt_data_end+0xfffe3fec>
 10445e0:	04400084 	movi	r17,2
 10445e4:	003b7306 	br	10433b4 <__alt_data_end+0xfffe33b4>
 10445e8:	d9801217 	ldw	r6,72(sp)
 10445ec:	d9800515 	stw	r6,20(sp)
 10445f0:	003cb606 	br	10438cc <__alt_data_end+0xfffe38cc>
 10445f4:	d9001217 	ldw	r4,72(sp)
 10445f8:	d9000515 	stw	r4,20(sp)
 10445fc:	003c0506 	br	1043614 <__alt_data_end+0xfffe3614>
 1044600:	d9800d17 	ldw	r6,52(sp)
 1044604:	d9800615 	stw	r6,24(sp)
 1044608:	003e8306 	br	1044018 <__alt_data_end+0xfffe4018>
 104460c:	d9800317 	ldw	r6,12(sp)
 1044610:	00800084 	movi	r2,2
 1044614:	11800216 	blt	r2,r6,1044620 <_dtoa_r+0x16c4>
 1044618:	d8800d17 	ldw	r2,52(sp)
 104461c:	003da606 	br	1043cb8 <__alt_data_end+0xfffe3cb8>
 1044620:	d8800d17 	ldw	r2,52(sp)
 1044624:	d8800615 	stw	r2,24(sp)
 1044628:	003e7b06 	br	1044018 <__alt_data_end+0xfffe4018>
 104462c:	05000044 	movi	r20,1
 1044630:	003b0506 	br	1043248 <__alt_data_end+0xfffe3248>
 1044634:	8009883a 	mov	r4,r16
 1044638:	80001115 	stw	zero,68(r16)
 104463c:	000b883a 	mov	r5,zero
 1044640:	10465840 	call	1046584 <_Balloc>
 1044644:	d8800715 	stw	r2,28(sp)
 1044648:	d8c00717 	ldw	r3,28(sp)
 104464c:	00bfffc4 	movi	r2,-1
 1044650:	01000044 	movi	r4,1
 1044654:	d8800615 	stw	r2,24(sp)
 1044658:	80c01015 	stw	r3,64(r16)
 104465c:	d9000b15 	stw	r4,44(sp)
 1044660:	d8002215 	stw	zero,136(sp)
 1044664:	d8800d15 	stw	r2,52(sp)
 1044668:	003c1906 	br	10436d0 <__alt_data_end+0xfffe36d0>
 104466c:	193d2926 	beq	r3,r4,1043b14 <__alt_data_end+0xfffe3b14>
 1044670:	00c00f04 	movi	r3,60
 1044674:	1885c83a 	sub	r2,r3,r2
 1044678:	003d7b06 	br	1043c68 <__alt_data_end+0xfffe3c68>
 104467c:	000b883a 	mov	r5,zero
 1044680:	003b1006 	br	10432c4 <__alt_data_end+0xfffe32c4>

01044684 <_fflush_r>:
 1044684:	defffb04 	addi	sp,sp,-20
 1044688:	dcc00315 	stw	r19,12(sp)
 104468c:	dc000015 	stw	r16,0(sp)
 1044690:	dfc00415 	stw	ra,16(sp)
 1044694:	dc800215 	stw	r18,8(sp)
 1044698:	dc400115 	stw	r17,4(sp)
 104469c:	2027883a 	mov	r19,r4
 10446a0:	2821883a 	mov	r16,r5
 10446a4:	20000226 	beq	r4,zero,10446b0 <_fflush_r+0x2c>
 10446a8:	20800e17 	ldw	r2,56(r4)
 10446ac:	10005326 	beq	r2,zero,10447fc <_fflush_r+0x178>
 10446b0:	8080030b 	ldhu	r2,12(r16)
 10446b4:	10ffffcc 	andi	r3,r2,65535
 10446b8:	18e0001c 	xori	r3,r3,32768
 10446bc:	18e00004 	addi	r3,r3,-32768
 10446c0:	18002c26 	beq	r3,zero,1044774 <_fflush_r+0xf0>
 10446c4:	10c0020c 	andi	r3,r2,8
 10446c8:	1800321e 	bne	r3,zero,1044794 <_fflush_r+0x110>
 10446cc:	80c00117 	ldw	r3,4(r16)
 10446d0:	10820014 	ori	r2,r2,2048
 10446d4:	8080030d 	sth	r2,12(r16)
 10446d8:	00c0570e 	bge	zero,r3,1044838 <_fflush_r+0x1b4>
 10446dc:	82000a17 	ldw	r8,40(r16)
 10446e0:	40002426 	beq	r8,zero,1044774 <_fflush_r+0xf0>
 10446e4:	9c400017 	ldw	r17,0(r19)
 10446e8:	10c4000c 	andi	r3,r2,4096
 10446ec:	98000015 	stw	zero,0(r19)
 10446f0:	18004626 	beq	r3,zero,104480c <_fflush_r+0x188>
 10446f4:	81801417 	ldw	r6,80(r16)
 10446f8:	10c0010c 	andi	r3,r2,4
 10446fc:	18000626 	beq	r3,zero,1044718 <_fflush_r+0x94>
 1044700:	80c00117 	ldw	r3,4(r16)
 1044704:	80800c17 	ldw	r2,48(r16)
 1044708:	30cdc83a 	sub	r6,r6,r3
 104470c:	10000226 	beq	r2,zero,1044718 <_fflush_r+0x94>
 1044710:	80800f17 	ldw	r2,60(r16)
 1044714:	308dc83a 	sub	r6,r6,r2
 1044718:	81400717 	ldw	r5,28(r16)
 104471c:	9809883a 	mov	r4,r19
 1044720:	000f883a 	mov	r7,zero
 1044724:	403ee83a 	callr	r8
 1044728:	00ffffc4 	movi	r3,-1
 104472c:	10c04526 	beq	r2,r3,1044844 <_fflush_r+0x1c0>
 1044730:	80c0030b 	ldhu	r3,12(r16)
 1044734:	81000417 	ldw	r4,16(r16)
 1044738:	80000115 	stw	zero,4(r16)
 104473c:	197dffcc 	andi	r5,r3,63487
 1044740:	8140030d 	sth	r5,12(r16)
 1044744:	81000015 	stw	r4,0(r16)
 1044748:	18c4000c 	andi	r3,r3,4096
 104474c:	18000126 	beq	r3,zero,1044754 <_fflush_r+0xd0>
 1044750:	80801415 	stw	r2,80(r16)
 1044754:	81400c17 	ldw	r5,48(r16)
 1044758:	9c400015 	stw	r17,0(r19)
 104475c:	28000526 	beq	r5,zero,1044774 <_fflush_r+0xf0>
 1044760:	80801004 	addi	r2,r16,64
 1044764:	28800226 	beq	r5,r2,1044770 <_fflush_r+0xec>
 1044768:	9809883a 	mov	r4,r19
 104476c:	1044da00 	call	1044da0 <_free_r>
 1044770:	80000c15 	stw	zero,48(r16)
 1044774:	0005883a 	mov	r2,zero
 1044778:	dfc00417 	ldw	ra,16(sp)
 104477c:	dcc00317 	ldw	r19,12(sp)
 1044780:	dc800217 	ldw	r18,8(sp)
 1044784:	dc400117 	ldw	r17,4(sp)
 1044788:	dc000017 	ldw	r16,0(sp)
 104478c:	dec00504 	addi	sp,sp,20
 1044790:	f800283a 	ret
 1044794:	84800417 	ldw	r18,16(r16)
 1044798:	903ff626 	beq	r18,zero,1044774 <__alt_data_end+0xfffe4774>
 104479c:	84400017 	ldw	r17,0(r16)
 10447a0:	108000cc 	andi	r2,r2,3
 10447a4:	84800015 	stw	r18,0(r16)
 10447a8:	8ca3c83a 	sub	r17,r17,r18
 10447ac:	10001526 	beq	r2,zero,1044804 <_fflush_r+0x180>
 10447b0:	0005883a 	mov	r2,zero
 10447b4:	80800215 	stw	r2,8(r16)
 10447b8:	04400316 	blt	zero,r17,10447c8 <_fflush_r+0x144>
 10447bc:	003fed06 	br	1044774 <__alt_data_end+0xfffe4774>
 10447c0:	90a5883a 	add	r18,r18,r2
 10447c4:	047feb0e 	bge	zero,r17,1044774 <__alt_data_end+0xfffe4774>
 10447c8:	80800917 	ldw	r2,36(r16)
 10447cc:	81400717 	ldw	r5,28(r16)
 10447d0:	880f883a 	mov	r7,r17
 10447d4:	900d883a 	mov	r6,r18
 10447d8:	9809883a 	mov	r4,r19
 10447dc:	103ee83a 	callr	r2
 10447e0:	88a3c83a 	sub	r17,r17,r2
 10447e4:	00bff616 	blt	zero,r2,10447c0 <__alt_data_end+0xfffe47c0>
 10447e8:	80c0030b 	ldhu	r3,12(r16)
 10447ec:	00bfffc4 	movi	r2,-1
 10447f0:	18c01014 	ori	r3,r3,64
 10447f4:	80c0030d 	sth	r3,12(r16)
 10447f8:	003fdf06 	br	1044778 <__alt_data_end+0xfffe4778>
 10447fc:	1044c2c0 	call	1044c2c <__sinit>
 1044800:	003fab06 	br	10446b0 <__alt_data_end+0xfffe46b0>
 1044804:	80800517 	ldw	r2,20(r16)
 1044808:	003fea06 	br	10447b4 <__alt_data_end+0xfffe47b4>
 104480c:	81400717 	ldw	r5,28(r16)
 1044810:	000d883a 	mov	r6,zero
 1044814:	9809883a 	mov	r4,r19
 1044818:	01c00044 	movi	r7,1
 104481c:	403ee83a 	callr	r8
 1044820:	100d883a 	mov	r6,r2
 1044824:	00bfffc4 	movi	r2,-1
 1044828:	30801326 	beq	r6,r2,1044878 <_fflush_r+0x1f4>
 104482c:	8080030b 	ldhu	r2,12(r16)
 1044830:	82000a17 	ldw	r8,40(r16)
 1044834:	003fb006 	br	10446f8 <__alt_data_end+0xfffe46f8>
 1044838:	80c00f17 	ldw	r3,60(r16)
 104483c:	00ffa716 	blt	zero,r3,10446dc <__alt_data_end+0xfffe46dc>
 1044840:	003fcc06 	br	1044774 <__alt_data_end+0xfffe4774>
 1044844:	98c00017 	ldw	r3,0(r19)
 1044848:	183fb926 	beq	r3,zero,1044730 <__alt_data_end+0xfffe4730>
 104484c:	01000744 	movi	r4,29
 1044850:	19000226 	beq	r3,r4,104485c <_fflush_r+0x1d8>
 1044854:	01000584 	movi	r4,22
 1044858:	1900101e 	bne	r3,r4,104489c <_fflush_r+0x218>
 104485c:	8080030b 	ldhu	r2,12(r16)
 1044860:	80c00417 	ldw	r3,16(r16)
 1044864:	80000115 	stw	zero,4(r16)
 1044868:	10bdffcc 	andi	r2,r2,63487
 104486c:	8080030d 	sth	r2,12(r16)
 1044870:	80c00015 	stw	r3,0(r16)
 1044874:	003fb706 	br	1044754 <__alt_data_end+0xfffe4754>
 1044878:	98800017 	ldw	r2,0(r19)
 104487c:	103feb26 	beq	r2,zero,104482c <__alt_data_end+0xfffe482c>
 1044880:	00c00744 	movi	r3,29
 1044884:	10c00226 	beq	r2,r3,1044890 <_fflush_r+0x20c>
 1044888:	00c00584 	movi	r3,22
 104488c:	10ffd61e 	bne	r2,r3,10447e8 <__alt_data_end+0xfffe47e8>
 1044890:	9c400015 	stw	r17,0(r19)
 1044894:	0005883a 	mov	r2,zero
 1044898:	003fb706 	br	1044778 <__alt_data_end+0xfffe4778>
 104489c:	80c0030b 	ldhu	r3,12(r16)
 10448a0:	18c01014 	ori	r3,r3,64
 10448a4:	80c0030d 	sth	r3,12(r16)
 10448a8:	003fb306 	br	1044778 <__alt_data_end+0xfffe4778>

010448ac <fflush>:
 10448ac:	20000526 	beq	r4,zero,10448c4 <fflush+0x18>
 10448b0:	00804174 	movhi	r2,261
 10448b4:	10855004 	addi	r2,r2,5440
 10448b8:	200b883a 	mov	r5,r4
 10448bc:	11000017 	ldw	r4,0(r2)
 10448c0:	10446841 	jmpi	1044684 <_fflush_r>
 10448c4:	00804174 	movhi	r2,261
 10448c8:	10854f04 	addi	r2,r2,5436
 10448cc:	11000017 	ldw	r4,0(r2)
 10448d0:	01404134 	movhi	r5,260
 10448d4:	2951a104 	addi	r5,r5,18052
 10448d8:	10455ec1 	jmpi	10455ec <_fwalk_reent>

010448dc <__fp_lock>:
 10448dc:	0005883a 	mov	r2,zero
 10448e0:	f800283a 	ret

010448e4 <__fp_unlock>:
 10448e4:	0005883a 	mov	r2,zero
 10448e8:	f800283a 	ret

010448ec <_cleanup_r>:
 10448ec:	01404174 	movhi	r5,261
 10448f0:	29651804 	addi	r5,r5,-27552
 10448f4:	10455341 	jmpi	1045534 <_fwalk>

010448f8 <__sinit.part.1>:
 10448f8:	defff604 	addi	sp,sp,-40
 10448fc:	00c04134 	movhi	r3,260
 1044900:	dfc00915 	stw	ra,36(sp)
 1044904:	df000815 	stw	fp,32(sp)
 1044908:	ddc00715 	stw	r23,28(sp)
 104490c:	dd800615 	stw	r22,24(sp)
 1044910:	dd400515 	stw	r21,20(sp)
 1044914:	dd000415 	stw	r20,16(sp)
 1044918:	dcc00315 	stw	r19,12(sp)
 104491c:	dc800215 	stw	r18,8(sp)
 1044920:	dc400115 	stw	r17,4(sp)
 1044924:	dc000015 	stw	r16,0(sp)
 1044928:	18d23b04 	addi	r3,r3,18668
 104492c:	24000117 	ldw	r16,4(r4)
 1044930:	20c00f15 	stw	r3,60(r4)
 1044934:	07000044 	movi	fp,1
 1044938:	00c000c4 	movi	r3,3
 104493c:	2080bb04 	addi	r2,r4,748
 1044940:	20c0b915 	stw	r3,740(r4)
 1044944:	27000e15 	stw	fp,56(r4)
 1044948:	2080ba15 	stw	r2,744(r4)
 104494c:	2000b815 	stw	zero,736(r4)
 1044950:	05c00204 	movi	r23,8
 1044954:	00800104 	movi	r2,4
 1044958:	2025883a 	mov	r18,r4
 104495c:	b80d883a 	mov	r6,r23
 1044960:	81001704 	addi	r4,r16,92
 1044964:	000b883a 	mov	r5,zero
 1044968:	80000015 	stw	zero,0(r16)
 104496c:	80000115 	stw	zero,4(r16)
 1044970:	80000215 	stw	zero,8(r16)
 1044974:	8080030d 	sth	r2,12(r16)
 1044978:	80001915 	stw	zero,100(r16)
 104497c:	8000038d 	sth	zero,14(r16)
 1044980:	80000415 	stw	zero,16(r16)
 1044984:	80000515 	stw	zero,20(r16)
 1044988:	80000615 	stw	zero,24(r16)
 104498c:	10464600 	call	1046460 <memset>
 1044990:	05804134 	movhi	r22,260
 1044994:	94400217 	ldw	r17,8(r18)
 1044998:	05404134 	movhi	r21,260
 104499c:	05004134 	movhi	r20,260
 10449a0:	04c04134 	movhi	r19,260
 10449a4:	b59ede04 	addi	r22,r22,31608
 10449a8:	ad5ef504 	addi	r21,r21,31700
 10449ac:	a51f1404 	addi	r20,r20,31824
 10449b0:	9cdf2b04 	addi	r19,r19,31916
 10449b4:	85800815 	stw	r22,32(r16)
 10449b8:	85400915 	stw	r21,36(r16)
 10449bc:	85000a15 	stw	r20,40(r16)
 10449c0:	84c00b15 	stw	r19,44(r16)
 10449c4:	84000715 	stw	r16,28(r16)
 10449c8:	00800284 	movi	r2,10
 10449cc:	89001704 	addi	r4,r17,92
 10449d0:	b80d883a 	mov	r6,r23
 10449d4:	000b883a 	mov	r5,zero
 10449d8:	88000015 	stw	zero,0(r17)
 10449dc:	88000115 	stw	zero,4(r17)
 10449e0:	88000215 	stw	zero,8(r17)
 10449e4:	8880030d 	sth	r2,12(r17)
 10449e8:	88001915 	stw	zero,100(r17)
 10449ec:	8f00038d 	sth	fp,14(r17)
 10449f0:	88000415 	stw	zero,16(r17)
 10449f4:	88000515 	stw	zero,20(r17)
 10449f8:	88000615 	stw	zero,24(r17)
 10449fc:	10464600 	call	1046460 <memset>
 1044a00:	94000317 	ldw	r16,12(r18)
 1044a04:	00800484 	movi	r2,18
 1044a08:	8c400715 	stw	r17,28(r17)
 1044a0c:	8d800815 	stw	r22,32(r17)
 1044a10:	8d400915 	stw	r21,36(r17)
 1044a14:	8d000a15 	stw	r20,40(r17)
 1044a18:	8cc00b15 	stw	r19,44(r17)
 1044a1c:	8080030d 	sth	r2,12(r16)
 1044a20:	00800084 	movi	r2,2
 1044a24:	80000015 	stw	zero,0(r16)
 1044a28:	80000115 	stw	zero,4(r16)
 1044a2c:	80000215 	stw	zero,8(r16)
 1044a30:	80001915 	stw	zero,100(r16)
 1044a34:	8080038d 	sth	r2,14(r16)
 1044a38:	80000415 	stw	zero,16(r16)
 1044a3c:	80000515 	stw	zero,20(r16)
 1044a40:	80000615 	stw	zero,24(r16)
 1044a44:	81001704 	addi	r4,r16,92
 1044a48:	000b883a 	mov	r5,zero
 1044a4c:	b80d883a 	mov	r6,r23
 1044a50:	10464600 	call	1046460 <memset>
 1044a54:	84000715 	stw	r16,28(r16)
 1044a58:	85800815 	stw	r22,32(r16)
 1044a5c:	85400915 	stw	r21,36(r16)
 1044a60:	85000a15 	stw	r20,40(r16)
 1044a64:	84c00b15 	stw	r19,44(r16)
 1044a68:	dfc00917 	ldw	ra,36(sp)
 1044a6c:	df000817 	ldw	fp,32(sp)
 1044a70:	ddc00717 	ldw	r23,28(sp)
 1044a74:	dd800617 	ldw	r22,24(sp)
 1044a78:	dd400517 	ldw	r21,20(sp)
 1044a7c:	dd000417 	ldw	r20,16(sp)
 1044a80:	dcc00317 	ldw	r19,12(sp)
 1044a84:	dc800217 	ldw	r18,8(sp)
 1044a88:	dc400117 	ldw	r17,4(sp)
 1044a8c:	dc000017 	ldw	r16,0(sp)
 1044a90:	dec00a04 	addi	sp,sp,40
 1044a94:	f800283a 	ret

01044a98 <__sfmoreglue>:
 1044a98:	defffc04 	addi	sp,sp,-16
 1044a9c:	dc400115 	stw	r17,4(sp)
 1044aa0:	2c401a24 	muli	r17,r5,104
 1044aa4:	dc800215 	stw	r18,8(sp)
 1044aa8:	2825883a 	mov	r18,r5
 1044aac:	89400304 	addi	r5,r17,12
 1044ab0:	dc000015 	stw	r16,0(sp)
 1044ab4:	dfc00315 	stw	ra,12(sp)
 1044ab8:	104593c0 	call	104593c <_malloc_r>
 1044abc:	1021883a 	mov	r16,r2
 1044ac0:	10000726 	beq	r2,zero,1044ae0 <__sfmoreglue+0x48>
 1044ac4:	11000304 	addi	r4,r2,12
 1044ac8:	10000015 	stw	zero,0(r2)
 1044acc:	14800115 	stw	r18,4(r2)
 1044ad0:	11000215 	stw	r4,8(r2)
 1044ad4:	000b883a 	mov	r5,zero
 1044ad8:	880d883a 	mov	r6,r17
 1044adc:	10464600 	call	1046460 <memset>
 1044ae0:	8005883a 	mov	r2,r16
 1044ae4:	dfc00317 	ldw	ra,12(sp)
 1044ae8:	dc800217 	ldw	r18,8(sp)
 1044aec:	dc400117 	ldw	r17,4(sp)
 1044af0:	dc000017 	ldw	r16,0(sp)
 1044af4:	dec00404 	addi	sp,sp,16
 1044af8:	f800283a 	ret

01044afc <__sfp>:
 1044afc:	00804174 	movhi	r2,261
 1044b00:	defffb04 	addi	sp,sp,-20
 1044b04:	10854f04 	addi	r2,r2,5436
 1044b08:	dc800215 	stw	r18,8(sp)
 1044b0c:	14800017 	ldw	r18,0(r2)
 1044b10:	dcc00315 	stw	r19,12(sp)
 1044b14:	dfc00415 	stw	ra,16(sp)
 1044b18:	90800e17 	ldw	r2,56(r18)
 1044b1c:	dc400115 	stw	r17,4(sp)
 1044b20:	dc000015 	stw	r16,0(sp)
 1044b24:	2027883a 	mov	r19,r4
 1044b28:	1000021e 	bne	r2,zero,1044b34 <__sfp+0x38>
 1044b2c:	9009883a 	mov	r4,r18
 1044b30:	10448f80 	call	10448f8 <__sinit.part.1>
 1044b34:	9480b804 	addi	r18,r18,736
 1044b38:	047fffc4 	movi	r17,-1
 1044b3c:	91400117 	ldw	r5,4(r18)
 1044b40:	94000217 	ldw	r16,8(r18)
 1044b44:	297fffc4 	addi	r5,r5,-1
 1044b48:	28000a16 	blt	r5,zero,1044b74 <__sfp+0x78>
 1044b4c:	8080030f 	ldh	r2,12(r16)
 1044b50:	10000c26 	beq	r2,zero,1044b84 <__sfp+0x88>
 1044b54:	80c01d04 	addi	r3,r16,116
 1044b58:	00000206 	br	1044b64 <__sfp+0x68>
 1044b5c:	18bfe60f 	ldh	r2,-104(r3)
 1044b60:	10000826 	beq	r2,zero,1044b84 <__sfp+0x88>
 1044b64:	297fffc4 	addi	r5,r5,-1
 1044b68:	1c3ffd04 	addi	r16,r3,-12
 1044b6c:	18c01a04 	addi	r3,r3,104
 1044b70:	2c7ffa1e 	bne	r5,r17,1044b5c <__alt_data_end+0xfffe4b5c>
 1044b74:	90800017 	ldw	r2,0(r18)
 1044b78:	10001d26 	beq	r2,zero,1044bf0 <__sfp+0xf4>
 1044b7c:	1025883a 	mov	r18,r2
 1044b80:	003fee06 	br	1044b3c <__alt_data_end+0xfffe4b3c>
 1044b84:	00bfffc4 	movi	r2,-1
 1044b88:	8080038d 	sth	r2,14(r16)
 1044b8c:	00800044 	movi	r2,1
 1044b90:	8080030d 	sth	r2,12(r16)
 1044b94:	80001915 	stw	zero,100(r16)
 1044b98:	80000015 	stw	zero,0(r16)
 1044b9c:	80000215 	stw	zero,8(r16)
 1044ba0:	80000115 	stw	zero,4(r16)
 1044ba4:	80000415 	stw	zero,16(r16)
 1044ba8:	80000515 	stw	zero,20(r16)
 1044bac:	80000615 	stw	zero,24(r16)
 1044bb0:	81001704 	addi	r4,r16,92
 1044bb4:	000b883a 	mov	r5,zero
 1044bb8:	01800204 	movi	r6,8
 1044bbc:	10464600 	call	1046460 <memset>
 1044bc0:	8005883a 	mov	r2,r16
 1044bc4:	80000c15 	stw	zero,48(r16)
 1044bc8:	80000d15 	stw	zero,52(r16)
 1044bcc:	80001115 	stw	zero,68(r16)
 1044bd0:	80001215 	stw	zero,72(r16)
 1044bd4:	dfc00417 	ldw	ra,16(sp)
 1044bd8:	dcc00317 	ldw	r19,12(sp)
 1044bdc:	dc800217 	ldw	r18,8(sp)
 1044be0:	dc400117 	ldw	r17,4(sp)
 1044be4:	dc000017 	ldw	r16,0(sp)
 1044be8:	dec00504 	addi	sp,sp,20
 1044bec:	f800283a 	ret
 1044bf0:	9809883a 	mov	r4,r19
 1044bf4:	01400104 	movi	r5,4
 1044bf8:	1044a980 	call	1044a98 <__sfmoreglue>
 1044bfc:	90800015 	stw	r2,0(r18)
 1044c00:	103fde1e 	bne	r2,zero,1044b7c <__alt_data_end+0xfffe4b7c>
 1044c04:	00800304 	movi	r2,12
 1044c08:	98800015 	stw	r2,0(r19)
 1044c0c:	0005883a 	mov	r2,zero
 1044c10:	003ff006 	br	1044bd4 <__alt_data_end+0xfffe4bd4>

01044c14 <_cleanup>:
 1044c14:	00804174 	movhi	r2,261
 1044c18:	10854f04 	addi	r2,r2,5436
 1044c1c:	11000017 	ldw	r4,0(r2)
 1044c20:	01404174 	movhi	r5,261
 1044c24:	29651804 	addi	r5,r5,-27552
 1044c28:	10455341 	jmpi	1045534 <_fwalk>

01044c2c <__sinit>:
 1044c2c:	20800e17 	ldw	r2,56(r4)
 1044c30:	10000126 	beq	r2,zero,1044c38 <__sinit+0xc>
 1044c34:	f800283a 	ret
 1044c38:	10448f81 	jmpi	10448f8 <__sinit.part.1>

01044c3c <__sfp_lock_acquire>:
 1044c3c:	f800283a 	ret

01044c40 <__sfp_lock_release>:
 1044c40:	f800283a 	ret

01044c44 <__sinit_lock_acquire>:
 1044c44:	f800283a 	ret

01044c48 <__sinit_lock_release>:
 1044c48:	f800283a 	ret

01044c4c <__fp_lock_all>:
 1044c4c:	00804174 	movhi	r2,261
 1044c50:	10855004 	addi	r2,r2,5440
 1044c54:	11000017 	ldw	r4,0(r2)
 1044c58:	01404134 	movhi	r5,260
 1044c5c:	29523704 	addi	r5,r5,18652
 1044c60:	10455341 	jmpi	1045534 <_fwalk>

01044c64 <__fp_unlock_all>:
 1044c64:	00804174 	movhi	r2,261
 1044c68:	10855004 	addi	r2,r2,5440
 1044c6c:	11000017 	ldw	r4,0(r2)
 1044c70:	01404134 	movhi	r5,260
 1044c74:	29523904 	addi	r5,r5,18660
 1044c78:	10455341 	jmpi	1045534 <_fwalk>

01044c7c <_malloc_trim_r>:
 1044c7c:	defffb04 	addi	sp,sp,-20
 1044c80:	dcc00315 	stw	r19,12(sp)
 1044c84:	04c04174 	movhi	r19,261
 1044c88:	dc800215 	stw	r18,8(sp)
 1044c8c:	dc400115 	stw	r17,4(sp)
 1044c90:	dc000015 	stw	r16,0(sp)
 1044c94:	dfc00415 	stw	ra,16(sp)
 1044c98:	2821883a 	mov	r16,r5
 1044c9c:	9cffcb04 	addi	r19,r19,-212
 1044ca0:	2025883a 	mov	r18,r4
 1044ca4:	104d2fc0 	call	104d2fc <__malloc_lock>
 1044ca8:	98800217 	ldw	r2,8(r19)
 1044cac:	14400117 	ldw	r17,4(r2)
 1044cb0:	00bfff04 	movi	r2,-4
 1044cb4:	88a2703a 	and	r17,r17,r2
 1044cb8:	8c21c83a 	sub	r16,r17,r16
 1044cbc:	8403fbc4 	addi	r16,r16,4079
 1044cc0:	8020d33a 	srli	r16,r16,12
 1044cc4:	0083ffc4 	movi	r2,4095
 1044cc8:	843fffc4 	addi	r16,r16,-1
 1044ccc:	8020933a 	slli	r16,r16,12
 1044cd0:	1400060e 	bge	r2,r16,1044cec <_malloc_trim_r+0x70>
 1044cd4:	9009883a 	mov	r4,r18
 1044cd8:	000b883a 	mov	r5,zero
 1044cdc:	1047b240 	call	1047b24 <_sbrk_r>
 1044ce0:	98c00217 	ldw	r3,8(r19)
 1044ce4:	1c47883a 	add	r3,r3,r17
 1044ce8:	10c00a26 	beq	r2,r3,1044d14 <_malloc_trim_r+0x98>
 1044cec:	9009883a 	mov	r4,r18
 1044cf0:	104d31c0 	call	104d31c <__malloc_unlock>
 1044cf4:	0005883a 	mov	r2,zero
 1044cf8:	dfc00417 	ldw	ra,16(sp)
 1044cfc:	dcc00317 	ldw	r19,12(sp)
 1044d00:	dc800217 	ldw	r18,8(sp)
 1044d04:	dc400117 	ldw	r17,4(sp)
 1044d08:	dc000017 	ldw	r16,0(sp)
 1044d0c:	dec00504 	addi	sp,sp,20
 1044d10:	f800283a 	ret
 1044d14:	9009883a 	mov	r4,r18
 1044d18:	040bc83a 	sub	r5,zero,r16
 1044d1c:	1047b240 	call	1047b24 <_sbrk_r>
 1044d20:	00ffffc4 	movi	r3,-1
 1044d24:	10c00d26 	beq	r2,r3,1044d5c <_malloc_trim_r+0xe0>
 1044d28:	00c04174 	movhi	r3,261
 1044d2c:	18cc2804 	addi	r3,r3,12448
 1044d30:	18800017 	ldw	r2,0(r3)
 1044d34:	99000217 	ldw	r4,8(r19)
 1044d38:	8c23c83a 	sub	r17,r17,r16
 1044d3c:	8c400054 	ori	r17,r17,1
 1044d40:	1421c83a 	sub	r16,r2,r16
 1044d44:	24400115 	stw	r17,4(r4)
 1044d48:	9009883a 	mov	r4,r18
 1044d4c:	1c000015 	stw	r16,0(r3)
 1044d50:	104d31c0 	call	104d31c <__malloc_unlock>
 1044d54:	00800044 	movi	r2,1
 1044d58:	003fe706 	br	1044cf8 <__alt_data_end+0xfffe4cf8>
 1044d5c:	9009883a 	mov	r4,r18
 1044d60:	000b883a 	mov	r5,zero
 1044d64:	1047b240 	call	1047b24 <_sbrk_r>
 1044d68:	99000217 	ldw	r4,8(r19)
 1044d6c:	014003c4 	movi	r5,15
 1044d70:	1107c83a 	sub	r3,r2,r4
 1044d74:	28ffdd0e 	bge	r5,r3,1044cec <__alt_data_end+0xfffe4cec>
 1044d78:	01404174 	movhi	r5,261
 1044d7c:	29455204 	addi	r5,r5,5448
 1044d80:	29400017 	ldw	r5,0(r5)
 1044d84:	18c00054 	ori	r3,r3,1
 1044d88:	20c00115 	stw	r3,4(r4)
 1044d8c:	00c04174 	movhi	r3,261
 1044d90:	1145c83a 	sub	r2,r2,r5
 1044d94:	18cc2804 	addi	r3,r3,12448
 1044d98:	18800015 	stw	r2,0(r3)
 1044d9c:	003fd306 	br	1044cec <__alt_data_end+0xfffe4cec>

01044da0 <_free_r>:
 1044da0:	28004c26 	beq	r5,zero,1044ed4 <_free_r+0x134>
 1044da4:	defffd04 	addi	sp,sp,-12
 1044da8:	dc400115 	stw	r17,4(sp)
 1044dac:	dc000015 	stw	r16,0(sp)
 1044db0:	2023883a 	mov	r17,r4
 1044db4:	2821883a 	mov	r16,r5
 1044db8:	dfc00215 	stw	ra,8(sp)
 1044dbc:	104d2fc0 	call	104d2fc <__malloc_lock>
 1044dc0:	813fff17 	ldw	r4,-4(r16)
 1044dc4:	00bfff84 	movi	r2,-2
 1044dc8:	02404174 	movhi	r9,261
 1044dcc:	81bffe04 	addi	r6,r16,-8
 1044dd0:	2084703a 	and	r2,r4,r2
 1044dd4:	4a7fcb04 	addi	r9,r9,-212
 1044dd8:	308b883a 	add	r5,r6,r2
 1044ddc:	2a000117 	ldw	r8,4(r5)
 1044de0:	49c00217 	ldw	r7,8(r9)
 1044de4:	00ffff04 	movi	r3,-4
 1044de8:	40c6703a 	and	r3,r8,r3
 1044dec:	39405326 	beq	r7,r5,1044f3c <_free_r+0x19c>
 1044df0:	28c00115 	stw	r3,4(r5)
 1044df4:	2100004c 	andi	r4,r4,1
 1044df8:	2000091e 	bne	r4,zero,1044e20 <_free_r+0x80>
 1044dfc:	81fffe17 	ldw	r7,-8(r16)
 1044e00:	4a000204 	addi	r8,r9,8
 1044e04:	31cdc83a 	sub	r6,r6,r7
 1044e08:	31000217 	ldw	r4,8(r6)
 1044e0c:	11c5883a 	add	r2,r2,r7
 1044e10:	22006126 	beq	r4,r8,1044f98 <_free_r+0x1f8>
 1044e14:	31c00317 	ldw	r7,12(r6)
 1044e18:	21c00315 	stw	r7,12(r4)
 1044e1c:	39000215 	stw	r4,8(r7)
 1044e20:	28c9883a 	add	r4,r5,r3
 1044e24:	21c00117 	ldw	r7,4(r4)
 1044e28:	39c0004c 	andi	r7,r7,1
 1044e2c:	38000d1e 	bne	r7,zero,1044e64 <_free_r+0xc4>
 1044e30:	29000217 	ldw	r4,8(r5)
 1044e34:	10c5883a 	add	r2,r2,r3
 1044e38:	00c04174 	movhi	r3,261
 1044e3c:	18ffcd04 	addi	r3,r3,-204
 1044e40:	20c07526 	beq	r4,r3,1045018 <_free_r+0x278>
 1044e44:	29c00317 	ldw	r7,12(r5)
 1044e48:	11400054 	ori	r5,r2,1
 1044e4c:	3087883a 	add	r3,r6,r2
 1044e50:	21c00315 	stw	r7,12(r4)
 1044e54:	39000215 	stw	r4,8(r7)
 1044e58:	31400115 	stw	r5,4(r6)
 1044e5c:	18800015 	stw	r2,0(r3)
 1044e60:	00000406 	br	1044e74 <_free_r+0xd4>
 1044e64:	10c00054 	ori	r3,r2,1
 1044e68:	30c00115 	stw	r3,4(r6)
 1044e6c:	3087883a 	add	r3,r6,r2
 1044e70:	18800015 	stw	r2,0(r3)
 1044e74:	00c07fc4 	movi	r3,511
 1044e78:	18801736 	bltu	r3,r2,1044ed8 <_free_r+0x138>
 1044e7c:	1004d0fa 	srli	r2,r2,3
 1044e80:	01400044 	movi	r5,1
 1044e84:	49000117 	ldw	r4,4(r9)
 1044e88:	1087883a 	add	r3,r2,r2
 1044e8c:	18c7883a 	add	r3,r3,r3
 1044e90:	1005d0ba 	srai	r2,r2,2
 1044e94:	18c7883a 	add	r3,r3,r3
 1044e98:	1a47883a 	add	r3,r3,r9
 1044e9c:	19c00217 	ldw	r7,8(r3)
 1044ea0:	2884983a 	sll	r2,r5,r2
 1044ea4:	30c00315 	stw	r3,12(r6)
 1044ea8:	31c00215 	stw	r7,8(r6)
 1044eac:	1104b03a 	or	r2,r2,r4
 1044eb0:	19800215 	stw	r6,8(r3)
 1044eb4:	48800115 	stw	r2,4(r9)
 1044eb8:	39800315 	stw	r6,12(r7)
 1044ebc:	8809883a 	mov	r4,r17
 1044ec0:	dfc00217 	ldw	ra,8(sp)
 1044ec4:	dc400117 	ldw	r17,4(sp)
 1044ec8:	dc000017 	ldw	r16,0(sp)
 1044ecc:	dec00304 	addi	sp,sp,12
 1044ed0:	104d31c1 	jmpi	104d31c <__malloc_unlock>
 1044ed4:	f800283a 	ret
 1044ed8:	1006d27a 	srli	r3,r2,9
 1044edc:	01000104 	movi	r4,4
 1044ee0:	20c04036 	bltu	r4,r3,1044fe4 <_free_r+0x244>
 1044ee4:	1006d1ba 	srli	r3,r2,6
 1044ee8:	19400e04 	addi	r5,r3,56
 1044eec:	2947883a 	add	r3,r5,r5
 1044ef0:	18c7883a 	add	r3,r3,r3
 1044ef4:	18c7883a 	add	r3,r3,r3
 1044ef8:	1a49883a 	add	r4,r3,r9
 1044efc:	20c00217 	ldw	r3,8(r4)
 1044f00:	01c04174 	movhi	r7,261
 1044f04:	39ffcb04 	addi	r7,r7,-212
 1044f08:	19003b26 	beq	r3,r4,1044ff8 <_free_r+0x258>
 1044f0c:	01ffff04 	movi	r7,-4
 1044f10:	19400117 	ldw	r5,4(r3)
 1044f14:	29ca703a 	and	r5,r5,r7
 1044f18:	1140022e 	bgeu	r2,r5,1044f24 <_free_r+0x184>
 1044f1c:	18c00217 	ldw	r3,8(r3)
 1044f20:	20fffb1e 	bne	r4,r3,1044f10 <__alt_data_end+0xfffe4f10>
 1044f24:	18800317 	ldw	r2,12(r3)
 1044f28:	30800315 	stw	r2,12(r6)
 1044f2c:	30c00215 	stw	r3,8(r6)
 1044f30:	11800215 	stw	r6,8(r2)
 1044f34:	19800315 	stw	r6,12(r3)
 1044f38:	003fe006 	br	1044ebc <__alt_data_end+0xfffe4ebc>
 1044f3c:	2100004c 	andi	r4,r4,1
 1044f40:	1885883a 	add	r2,r3,r2
 1044f44:	2000071e 	bne	r4,zero,1044f64 <_free_r+0x1c4>
 1044f48:	817ffe17 	ldw	r5,-8(r16)
 1044f4c:	314dc83a 	sub	r6,r6,r5
 1044f50:	30c00317 	ldw	r3,12(r6)
 1044f54:	31000217 	ldw	r4,8(r6)
 1044f58:	1145883a 	add	r2,r2,r5
 1044f5c:	20c00315 	stw	r3,12(r4)
 1044f60:	19000215 	stw	r4,8(r3)
 1044f64:	10c00054 	ori	r3,r2,1
 1044f68:	30c00115 	stw	r3,4(r6)
 1044f6c:	00c04174 	movhi	r3,261
 1044f70:	18c55304 	addi	r3,r3,5452
 1044f74:	18c00017 	ldw	r3,0(r3)
 1044f78:	49800215 	stw	r6,8(r9)
 1044f7c:	10ffcf36 	bltu	r2,r3,1044ebc <__alt_data_end+0xfffe4ebc>
 1044f80:	00804174 	movhi	r2,261
 1044f84:	108c1f04 	addi	r2,r2,12412
 1044f88:	11400017 	ldw	r5,0(r2)
 1044f8c:	8809883a 	mov	r4,r17
 1044f90:	1044c7c0 	call	1044c7c <_malloc_trim_r>
 1044f94:	003fc906 	br	1044ebc <__alt_data_end+0xfffe4ebc>
 1044f98:	28c9883a 	add	r4,r5,r3
 1044f9c:	21000117 	ldw	r4,4(r4)
 1044fa0:	2100004c 	andi	r4,r4,1
 1044fa4:	20000a1e 	bne	r4,zero,1044fd0 <_free_r+0x230>
 1044fa8:	29000317 	ldw	r4,12(r5)
 1044fac:	29400217 	ldw	r5,8(r5)
 1044fb0:	10c5883a 	add	r2,r2,r3
 1044fb4:	10c00054 	ori	r3,r2,1
 1044fb8:	29000315 	stw	r4,12(r5)
 1044fbc:	21400215 	stw	r5,8(r4)
 1044fc0:	30c00115 	stw	r3,4(r6)
 1044fc4:	308d883a 	add	r6,r6,r2
 1044fc8:	30800015 	stw	r2,0(r6)
 1044fcc:	003fbb06 	br	1044ebc <__alt_data_end+0xfffe4ebc>
 1044fd0:	10c00054 	ori	r3,r2,1
 1044fd4:	30c00115 	stw	r3,4(r6)
 1044fd8:	308d883a 	add	r6,r6,r2
 1044fdc:	30800015 	stw	r2,0(r6)
 1044fe0:	003fb606 	br	1044ebc <__alt_data_end+0xfffe4ebc>
 1044fe4:	01000504 	movi	r4,20
 1044fe8:	20c01436 	bltu	r4,r3,104503c <_free_r+0x29c>
 1044fec:	194016c4 	addi	r5,r3,91
 1044ff0:	2947883a 	add	r3,r5,r5
 1044ff4:	003fbe06 	br	1044ef0 <__alt_data_end+0xfffe4ef0>
 1044ff8:	280bd0ba 	srai	r5,r5,2
 1044ffc:	00800044 	movi	r2,1
 1045000:	39000117 	ldw	r4,4(r7)
 1045004:	114a983a 	sll	r5,r2,r5
 1045008:	1805883a 	mov	r2,r3
 104500c:	2908b03a 	or	r4,r5,r4
 1045010:	39000115 	stw	r4,4(r7)
 1045014:	003fc406 	br	1044f28 <__alt_data_end+0xfffe4f28>
 1045018:	49800515 	stw	r6,20(r9)
 104501c:	49800415 	stw	r6,16(r9)
 1045020:	10c00054 	ori	r3,r2,1
 1045024:	31000315 	stw	r4,12(r6)
 1045028:	31000215 	stw	r4,8(r6)
 104502c:	30c00115 	stw	r3,4(r6)
 1045030:	308d883a 	add	r6,r6,r2
 1045034:	30800015 	stw	r2,0(r6)
 1045038:	003fa006 	br	1044ebc <__alt_data_end+0xfffe4ebc>
 104503c:	01001504 	movi	r4,84
 1045040:	20c00436 	bltu	r4,r3,1045054 <_free_r+0x2b4>
 1045044:	1006d33a 	srli	r3,r2,12
 1045048:	19401b84 	addi	r5,r3,110
 104504c:	2947883a 	add	r3,r5,r5
 1045050:	003fa706 	br	1044ef0 <__alt_data_end+0xfffe4ef0>
 1045054:	01005504 	movi	r4,340
 1045058:	20c00436 	bltu	r4,r3,104506c <_free_r+0x2cc>
 104505c:	1006d3fa 	srli	r3,r2,15
 1045060:	19401dc4 	addi	r5,r3,119
 1045064:	2947883a 	add	r3,r5,r5
 1045068:	003fa106 	br	1044ef0 <__alt_data_end+0xfffe4ef0>
 104506c:	01015504 	movi	r4,1364
 1045070:	20c00436 	bltu	r4,r3,1045084 <_free_r+0x2e4>
 1045074:	1006d4ba 	srli	r3,r2,18
 1045078:	19401f04 	addi	r5,r3,124
 104507c:	2947883a 	add	r3,r5,r5
 1045080:	003f9b06 	br	1044ef0 <__alt_data_end+0xfffe4ef0>
 1045084:	00c03f04 	movi	r3,252
 1045088:	01401f84 	movi	r5,126
 104508c:	003f9806 	br	1044ef0 <__alt_data_end+0xfffe4ef0>

01045090 <__sfvwrite_r>:
 1045090:	30800217 	ldw	r2,8(r6)
 1045094:	10004526 	beq	r2,zero,10451ac <__sfvwrite_r+0x11c>
 1045098:	28c0030b 	ldhu	r3,12(r5)
 104509c:	defff404 	addi	sp,sp,-48
 10450a0:	dd400715 	stw	r21,28(sp)
 10450a4:	dcc00515 	stw	r19,20(sp)
 10450a8:	dc000215 	stw	r16,8(sp)
 10450ac:	dfc00b15 	stw	ra,44(sp)
 10450b0:	df000a15 	stw	fp,40(sp)
 10450b4:	ddc00915 	stw	r23,36(sp)
 10450b8:	dd800815 	stw	r22,32(sp)
 10450bc:	dd000615 	stw	r20,24(sp)
 10450c0:	dc800415 	stw	r18,16(sp)
 10450c4:	dc400315 	stw	r17,12(sp)
 10450c8:	1880020c 	andi	r2,r3,8
 10450cc:	2821883a 	mov	r16,r5
 10450d0:	202b883a 	mov	r21,r4
 10450d4:	3027883a 	mov	r19,r6
 10450d8:	10002526 	beq	r2,zero,1045170 <__sfvwrite_r+0xe0>
 10450dc:	28800417 	ldw	r2,16(r5)
 10450e0:	10002326 	beq	r2,zero,1045170 <__sfvwrite_r+0xe0>
 10450e4:	1880008c 	andi	r2,r3,2
 10450e8:	9c400017 	ldw	r17,0(r19)
 10450ec:	10003126 	beq	r2,zero,10451b4 <__sfvwrite_r+0x124>
 10450f0:	0029883a 	mov	r20,zero
 10450f4:	0025883a 	mov	r18,zero
 10450f8:	05810004 	movi	r22,1024
 10450fc:	a00d883a 	mov	r6,r20
 1045100:	a809883a 	mov	r4,r21
 1045104:	90002526 	beq	r18,zero,104519c <__sfvwrite_r+0x10c>
 1045108:	900f883a 	mov	r7,r18
 104510c:	81400717 	ldw	r5,28(r16)
 1045110:	b480012e 	bgeu	r22,r18,1045118 <__sfvwrite_r+0x88>
 1045114:	01c10004 	movi	r7,1024
 1045118:	80800917 	ldw	r2,36(r16)
 104511c:	103ee83a 	callr	r2
 1045120:	0080510e 	bge	zero,r2,1045268 <__sfvwrite_r+0x1d8>
 1045124:	98c00217 	ldw	r3,8(r19)
 1045128:	a0a9883a 	add	r20,r20,r2
 104512c:	90a5c83a 	sub	r18,r18,r2
 1045130:	1885c83a 	sub	r2,r3,r2
 1045134:	98800215 	stw	r2,8(r19)
 1045138:	103ff01e 	bne	r2,zero,10450fc <__alt_data_end+0xfffe50fc>
 104513c:	0005883a 	mov	r2,zero
 1045140:	dfc00b17 	ldw	ra,44(sp)
 1045144:	df000a17 	ldw	fp,40(sp)
 1045148:	ddc00917 	ldw	r23,36(sp)
 104514c:	dd800817 	ldw	r22,32(sp)
 1045150:	dd400717 	ldw	r21,28(sp)
 1045154:	dd000617 	ldw	r20,24(sp)
 1045158:	dcc00517 	ldw	r19,20(sp)
 104515c:	dc800417 	ldw	r18,16(sp)
 1045160:	dc400317 	ldw	r17,12(sp)
 1045164:	dc000217 	ldw	r16,8(sp)
 1045168:	dec00c04 	addi	sp,sp,48
 104516c:	f800283a 	ret
 1045170:	a809883a 	mov	r4,r21
 1045174:	800b883a 	mov	r5,r16
 1045178:	1042c2c0 	call	1042c2c <__swsetup_r>
 104517c:	80c0030b 	ldhu	r3,12(r16)
 1045180:	103fd826 	beq	r2,zero,10450e4 <__alt_data_end+0xfffe50e4>
 1045184:	18c01014 	ori	r3,r3,64
 1045188:	80c0030d 	sth	r3,12(r16)
 104518c:	00c00244 	movi	r3,9
 1045190:	00bfffc4 	movi	r2,-1
 1045194:	a8c00015 	stw	r3,0(r21)
 1045198:	003fe906 	br	1045140 <__alt_data_end+0xfffe5140>
 104519c:	8d000017 	ldw	r20,0(r17)
 10451a0:	8c800117 	ldw	r18,4(r17)
 10451a4:	8c400204 	addi	r17,r17,8
 10451a8:	003fd406 	br	10450fc <__alt_data_end+0xfffe50fc>
 10451ac:	0005883a 	mov	r2,zero
 10451b0:	f800283a 	ret
 10451b4:	1880004c 	andi	r2,r3,1
 10451b8:	1000301e 	bne	r2,zero,104527c <__sfvwrite_r+0x1ec>
 10451bc:	002f883a 	mov	r23,zero
 10451c0:	0025883a 	mov	r18,zero
 10451c4:	90001c26 	beq	r18,zero,1045238 <__sfvwrite_r+0x1a8>
 10451c8:	1880800c 	andi	r2,r3,512
 10451cc:	85000217 	ldw	r20,8(r16)
 10451d0:	10006c26 	beq	r2,zero,1045384 <__sfvwrite_r+0x2f4>
 10451d4:	a02d883a 	mov	r22,r20
 10451d8:	95008536 	bltu	r18,r20,10453f0 <__sfvwrite_r+0x360>
 10451dc:	1881200c 	andi	r2,r3,1152
 10451e0:	10009d1e 	bne	r2,zero,1045458 <__sfvwrite_r+0x3c8>
 10451e4:	81000017 	ldw	r4,0(r16)
 10451e8:	a039883a 	mov	fp,r20
 10451ec:	9029883a 	mov	r20,r18
 10451f0:	b80b883a 	mov	r5,r23
 10451f4:	b00d883a 	mov	r6,r22
 10451f8:	10463040 	call	1046304 <memmove>
 10451fc:	80c00217 	ldw	r3,8(r16)
 1045200:	81000017 	ldw	r4,0(r16)
 1045204:	9005883a 	mov	r2,r18
 1045208:	1f39c83a 	sub	fp,r3,fp
 104520c:	258f883a 	add	r7,r4,r22
 1045210:	87000215 	stw	fp,8(r16)
 1045214:	81c00015 	stw	r7,0(r16)
 1045218:	98c00217 	ldw	r3,8(r19)
 104521c:	b8af883a 	add	r23,r23,r2
 1045220:	90a5c83a 	sub	r18,r18,r2
 1045224:	1d05c83a 	sub	r2,r3,r20
 1045228:	98800215 	stw	r2,8(r19)
 104522c:	103fc326 	beq	r2,zero,104513c <__alt_data_end+0xfffe513c>
 1045230:	80c0030b 	ldhu	r3,12(r16)
 1045234:	903fe41e 	bne	r18,zero,10451c8 <__alt_data_end+0xfffe51c8>
 1045238:	8dc00017 	ldw	r23,0(r17)
 104523c:	8c800117 	ldw	r18,4(r17)
 1045240:	8c400204 	addi	r17,r17,8
 1045244:	003fdf06 	br	10451c4 <__alt_data_end+0xfffe51c4>
 1045248:	10475100 	call	1047510 <_realloc_r>
 104524c:	102d883a 	mov	r22,r2
 1045250:	1000a01e 	bne	r2,zero,10454d4 <__sfvwrite_r+0x444>
 1045254:	81400417 	ldw	r5,16(r16)
 1045258:	a809883a 	mov	r4,r21
 104525c:	1044da00 	call	1044da0 <_free_r>
 1045260:	00800304 	movi	r2,12
 1045264:	a8800015 	stw	r2,0(r21)
 1045268:	80c0030b 	ldhu	r3,12(r16)
 104526c:	00bfffc4 	movi	r2,-1
 1045270:	18c01014 	ori	r3,r3,64
 1045274:	80c0030d 	sth	r3,12(r16)
 1045278:	003fb106 	br	1045140 <__alt_data_end+0xfffe5140>
 104527c:	0029883a 	mov	r20,zero
 1045280:	0011883a 	mov	r8,zero
 1045284:	0039883a 	mov	fp,zero
 1045288:	0025883a 	mov	r18,zero
 104528c:	90001f26 	beq	r18,zero,104530c <__sfvwrite_r+0x27c>
 1045290:	40006826 	beq	r8,zero,1045434 <__sfvwrite_r+0x3a4>
 1045294:	a02f883a 	mov	r23,r20
 1045298:	9500012e 	bgeu	r18,r20,10452a0 <__sfvwrite_r+0x210>
 104529c:	902f883a 	mov	r23,r18
 10452a0:	81000017 	ldw	r4,0(r16)
 10452a4:	80800417 	ldw	r2,16(r16)
 10452a8:	b82d883a 	mov	r22,r23
 10452ac:	81800217 	ldw	r6,8(r16)
 10452b0:	81c00517 	ldw	r7,20(r16)
 10452b4:	1100022e 	bgeu	r2,r4,10452c0 <__sfvwrite_r+0x230>
 10452b8:	31c7883a 	add	r3,r6,r7
 10452bc:	1dc01816 	blt	r3,r23,1045320 <__sfvwrite_r+0x290>
 10452c0:	b9c03f16 	blt	r23,r7,10453c0 <__sfvwrite_r+0x330>
 10452c4:	80800917 	ldw	r2,36(r16)
 10452c8:	81400717 	ldw	r5,28(r16)
 10452cc:	a809883a 	mov	r4,r21
 10452d0:	da000115 	stw	r8,4(sp)
 10452d4:	e00d883a 	mov	r6,fp
 10452d8:	103ee83a 	callr	r2
 10452dc:	102d883a 	mov	r22,r2
 10452e0:	da000117 	ldw	r8,4(sp)
 10452e4:	00bfe00e 	bge	zero,r2,1045268 <__alt_data_end+0xfffe5268>
 10452e8:	a5a9c83a 	sub	r20,r20,r22
 10452ec:	a0001f26 	beq	r20,zero,104536c <__sfvwrite_r+0x2dc>
 10452f0:	98800217 	ldw	r2,8(r19)
 10452f4:	e5b9883a 	add	fp,fp,r22
 10452f8:	95a5c83a 	sub	r18,r18,r22
 10452fc:	15adc83a 	sub	r22,r2,r22
 1045300:	9d800215 	stw	r22,8(r19)
 1045304:	b03f8d26 	beq	r22,zero,104513c <__alt_data_end+0xfffe513c>
 1045308:	903fe11e 	bne	r18,zero,1045290 <__alt_data_end+0xfffe5290>
 104530c:	8f000017 	ldw	fp,0(r17)
 1045310:	8c800117 	ldw	r18,4(r17)
 1045314:	0011883a 	mov	r8,zero
 1045318:	8c400204 	addi	r17,r17,8
 104531c:	003fdb06 	br	104528c <__alt_data_end+0xfffe528c>
 1045320:	180d883a 	mov	r6,r3
 1045324:	e00b883a 	mov	r5,fp
 1045328:	da000115 	stw	r8,4(sp)
 104532c:	d8c00015 	stw	r3,0(sp)
 1045330:	10463040 	call	1046304 <memmove>
 1045334:	d8c00017 	ldw	r3,0(sp)
 1045338:	80800017 	ldw	r2,0(r16)
 104533c:	a809883a 	mov	r4,r21
 1045340:	800b883a 	mov	r5,r16
 1045344:	10c5883a 	add	r2,r2,r3
 1045348:	80800015 	stw	r2,0(r16)
 104534c:	d8c00015 	stw	r3,0(sp)
 1045350:	10446840 	call	1044684 <_fflush_r>
 1045354:	d8c00017 	ldw	r3,0(sp)
 1045358:	da000117 	ldw	r8,4(sp)
 104535c:	103fc21e 	bne	r2,zero,1045268 <__alt_data_end+0xfffe5268>
 1045360:	182d883a 	mov	r22,r3
 1045364:	a5a9c83a 	sub	r20,r20,r22
 1045368:	a03fe11e 	bne	r20,zero,10452f0 <__alt_data_end+0xfffe52f0>
 104536c:	a809883a 	mov	r4,r21
 1045370:	800b883a 	mov	r5,r16
 1045374:	10446840 	call	1044684 <_fflush_r>
 1045378:	103fbb1e 	bne	r2,zero,1045268 <__alt_data_end+0xfffe5268>
 104537c:	0011883a 	mov	r8,zero
 1045380:	003fdb06 	br	10452f0 <__alt_data_end+0xfffe52f0>
 1045384:	81000017 	ldw	r4,0(r16)
 1045388:	80800417 	ldw	r2,16(r16)
 104538c:	1100012e 	bgeu	r2,r4,1045394 <__sfvwrite_r+0x304>
 1045390:	a4805a36 	bltu	r20,r18,10454fc <__sfvwrite_r+0x46c>
 1045394:	81c00517 	ldw	r7,20(r16)
 1045398:	91c01a36 	bltu	r18,r7,1045404 <__sfvwrite_r+0x374>
 104539c:	80800917 	ldw	r2,36(r16)
 10453a0:	81400717 	ldw	r5,28(r16)
 10453a4:	a809883a 	mov	r4,r21
 10453a8:	b80d883a 	mov	r6,r23
 10453ac:	103ee83a 	callr	r2
 10453b0:	1029883a 	mov	r20,r2
 10453b4:	00bfac0e 	bge	zero,r2,1045268 <__alt_data_end+0xfffe5268>
 10453b8:	a005883a 	mov	r2,r20
 10453bc:	003f9606 	br	1045218 <__alt_data_end+0xfffe5218>
 10453c0:	b80d883a 	mov	r6,r23
 10453c4:	e00b883a 	mov	r5,fp
 10453c8:	da000115 	stw	r8,4(sp)
 10453cc:	10463040 	call	1046304 <memmove>
 10453d0:	80800217 	ldw	r2,8(r16)
 10453d4:	80c00017 	ldw	r3,0(r16)
 10453d8:	da000117 	ldw	r8,4(sp)
 10453dc:	15c5c83a 	sub	r2,r2,r23
 10453e0:	1def883a 	add	r23,r3,r23
 10453e4:	80800215 	stw	r2,8(r16)
 10453e8:	85c00015 	stw	r23,0(r16)
 10453ec:	003fbe06 	br	10452e8 <__alt_data_end+0xfffe52e8>
 10453f0:	81000017 	ldw	r4,0(r16)
 10453f4:	9039883a 	mov	fp,r18
 10453f8:	9029883a 	mov	r20,r18
 10453fc:	902d883a 	mov	r22,r18
 1045400:	003f7b06 	br	10451f0 <__alt_data_end+0xfffe51f0>
 1045404:	b80b883a 	mov	r5,r23
 1045408:	900d883a 	mov	r6,r18
 104540c:	10463040 	call	1046304 <memmove>
 1045410:	80c00217 	ldw	r3,8(r16)
 1045414:	80800017 	ldw	r2,0(r16)
 1045418:	9029883a 	mov	r20,r18
 104541c:	1c87c83a 	sub	r3,r3,r18
 1045420:	1485883a 	add	r2,r2,r18
 1045424:	80800015 	stw	r2,0(r16)
 1045428:	80c00215 	stw	r3,8(r16)
 104542c:	9005883a 	mov	r2,r18
 1045430:	003f7906 	br	1045218 <__alt_data_end+0xfffe5218>
 1045434:	e009883a 	mov	r4,fp
 1045438:	01400284 	movi	r5,10
 104543c:	900d883a 	mov	r6,r18
 1045440:	10460e40 	call	10460e4 <memchr>
 1045444:	10003826 	beq	r2,zero,1045528 <__sfvwrite_r+0x498>
 1045448:	10800044 	addi	r2,r2,1
 104544c:	1729c83a 	sub	r20,r2,fp
 1045450:	02000044 	movi	r8,1
 1045454:	003f8f06 	br	1045294 <__alt_data_end+0xfffe5294>
 1045458:	80800517 	ldw	r2,20(r16)
 104545c:	81400417 	ldw	r5,16(r16)
 1045460:	87000017 	ldw	fp,0(r16)
 1045464:	10a9883a 	add	r20,r2,r2
 1045468:	a085883a 	add	r2,r20,r2
 104546c:	1028d7fa 	srli	r20,r2,31
 1045470:	e179c83a 	sub	fp,fp,r5
 1045474:	e1000044 	addi	r4,fp,1
 1045478:	a085883a 	add	r2,r20,r2
 104547c:	1029d07a 	srai	r20,r2,1
 1045480:	2485883a 	add	r2,r4,r18
 1045484:	a00d883a 	mov	r6,r20
 1045488:	a080022e 	bgeu	r20,r2,1045494 <__sfvwrite_r+0x404>
 104548c:	1029883a 	mov	r20,r2
 1045490:	100d883a 	mov	r6,r2
 1045494:	18c1000c 	andi	r3,r3,1024
 1045498:	a809883a 	mov	r4,r21
 104549c:	183f6a26 	beq	r3,zero,1045248 <__alt_data_end+0xfffe5248>
 10454a0:	300b883a 	mov	r5,r6
 10454a4:	104593c0 	call	104593c <_malloc_r>
 10454a8:	102d883a 	mov	r22,r2
 10454ac:	103f6c26 	beq	r2,zero,1045260 <__alt_data_end+0xfffe5260>
 10454b0:	81400417 	ldw	r5,16(r16)
 10454b4:	1009883a 	mov	r4,r2
 10454b8:	e00d883a 	mov	r6,fp
 10454bc:	10461cc0 	call	10461cc <memcpy>
 10454c0:	8080030b 	ldhu	r2,12(r16)
 10454c4:	00fedfc4 	movi	r3,-1153
 10454c8:	10c4703a 	and	r2,r2,r3
 10454cc:	10802014 	ori	r2,r2,128
 10454d0:	8080030d 	sth	r2,12(r16)
 10454d4:	b709883a 	add	r4,r22,fp
 10454d8:	a707c83a 	sub	r3,r20,fp
 10454dc:	85800415 	stw	r22,16(r16)
 10454e0:	85000515 	stw	r20,20(r16)
 10454e4:	81000015 	stw	r4,0(r16)
 10454e8:	9039883a 	mov	fp,r18
 10454ec:	80c00215 	stw	r3,8(r16)
 10454f0:	9029883a 	mov	r20,r18
 10454f4:	902d883a 	mov	r22,r18
 10454f8:	003f3d06 	br	10451f0 <__alt_data_end+0xfffe51f0>
 10454fc:	b80b883a 	mov	r5,r23
 1045500:	a00d883a 	mov	r6,r20
 1045504:	10463040 	call	1046304 <memmove>
 1045508:	80800017 	ldw	r2,0(r16)
 104550c:	a809883a 	mov	r4,r21
 1045510:	800b883a 	mov	r5,r16
 1045514:	1505883a 	add	r2,r2,r20
 1045518:	80800015 	stw	r2,0(r16)
 104551c:	10446840 	call	1044684 <_fflush_r>
 1045520:	103fa526 	beq	r2,zero,10453b8 <__alt_data_end+0xfffe53b8>
 1045524:	003f5006 	br	1045268 <__alt_data_end+0xfffe5268>
 1045528:	95000044 	addi	r20,r18,1
 104552c:	02000044 	movi	r8,1
 1045530:	003f5806 	br	1045294 <__alt_data_end+0xfffe5294>

01045534 <_fwalk>:
 1045534:	defff804 	addi	sp,sp,-32
 1045538:	dd400515 	stw	r21,20(sp)
 104553c:	2540b804 	addi	r21,r4,736
 1045540:	dd800615 	stw	r22,24(sp)
 1045544:	dd000415 	stw	r20,16(sp)
 1045548:	dfc00715 	stw	ra,28(sp)
 104554c:	dcc00315 	stw	r19,12(sp)
 1045550:	dc800215 	stw	r18,8(sp)
 1045554:	dc400115 	stw	r17,4(sp)
 1045558:	dc000015 	stw	r16,0(sp)
 104555c:	2829883a 	mov	r20,r5
 1045560:	002d883a 	mov	r22,zero
 1045564:	1044c3c0 	call	1044c3c <__sfp_lock_acquire>
 1045568:	a8001426 	beq	r21,zero,10455bc <_fwalk+0x88>
 104556c:	04ffffc4 	movi	r19,-1
 1045570:	ac400117 	ldw	r17,4(r21)
 1045574:	ac800217 	ldw	r18,8(r21)
 1045578:	8c7fffc4 	addi	r17,r17,-1
 104557c:	88000d16 	blt	r17,zero,10455b4 <_fwalk+0x80>
 1045580:	94000304 	addi	r16,r18,12
 1045584:	94800384 	addi	r18,r18,14
 1045588:	80c0000f 	ldh	r3,0(r16)
 104558c:	8c7fffc4 	addi	r17,r17,-1
 1045590:	813ffd04 	addi	r4,r16,-12
 1045594:	18000426 	beq	r3,zero,10455a8 <_fwalk+0x74>
 1045598:	90c0000f 	ldh	r3,0(r18)
 104559c:	1cc00226 	beq	r3,r19,10455a8 <_fwalk+0x74>
 10455a0:	a03ee83a 	callr	r20
 10455a4:	b0acb03a 	or	r22,r22,r2
 10455a8:	84001a04 	addi	r16,r16,104
 10455ac:	94801a04 	addi	r18,r18,104
 10455b0:	8cfff51e 	bne	r17,r19,1045588 <__alt_data_end+0xfffe5588>
 10455b4:	ad400017 	ldw	r21,0(r21)
 10455b8:	a83fed1e 	bne	r21,zero,1045570 <__alt_data_end+0xfffe5570>
 10455bc:	1044c400 	call	1044c40 <__sfp_lock_release>
 10455c0:	b005883a 	mov	r2,r22
 10455c4:	dfc00717 	ldw	ra,28(sp)
 10455c8:	dd800617 	ldw	r22,24(sp)
 10455cc:	dd400517 	ldw	r21,20(sp)
 10455d0:	dd000417 	ldw	r20,16(sp)
 10455d4:	dcc00317 	ldw	r19,12(sp)
 10455d8:	dc800217 	ldw	r18,8(sp)
 10455dc:	dc400117 	ldw	r17,4(sp)
 10455e0:	dc000017 	ldw	r16,0(sp)
 10455e4:	dec00804 	addi	sp,sp,32
 10455e8:	f800283a 	ret

010455ec <_fwalk_reent>:
 10455ec:	defff804 	addi	sp,sp,-32
 10455f0:	dd400515 	stw	r21,20(sp)
 10455f4:	2540b804 	addi	r21,r4,736
 10455f8:	dd800615 	stw	r22,24(sp)
 10455fc:	dd000415 	stw	r20,16(sp)
 1045600:	dcc00315 	stw	r19,12(sp)
 1045604:	dfc00715 	stw	ra,28(sp)
 1045608:	dc800215 	stw	r18,8(sp)
 104560c:	dc400115 	stw	r17,4(sp)
 1045610:	dc000015 	stw	r16,0(sp)
 1045614:	2027883a 	mov	r19,r4
 1045618:	2829883a 	mov	r20,r5
 104561c:	002d883a 	mov	r22,zero
 1045620:	1044c3c0 	call	1044c3c <__sfp_lock_acquire>
 1045624:	a8001326 	beq	r21,zero,1045674 <_fwalk_reent+0x88>
 1045628:	04bfffc4 	movi	r18,-1
 104562c:	ac400117 	ldw	r17,4(r21)
 1045630:	ac000217 	ldw	r16,8(r21)
 1045634:	8c7fffc4 	addi	r17,r17,-1
 1045638:	88000c16 	blt	r17,zero,104566c <_fwalk_reent+0x80>
 104563c:	84000304 	addi	r16,r16,12
 1045640:	80c0000f 	ldh	r3,0(r16)
 1045644:	8c7fffc4 	addi	r17,r17,-1
 1045648:	817ffd04 	addi	r5,r16,-12
 104564c:	18000526 	beq	r3,zero,1045664 <_fwalk_reent+0x78>
 1045650:	80c0008f 	ldh	r3,2(r16)
 1045654:	9809883a 	mov	r4,r19
 1045658:	1c800226 	beq	r3,r18,1045664 <_fwalk_reent+0x78>
 104565c:	a03ee83a 	callr	r20
 1045660:	b0acb03a 	or	r22,r22,r2
 1045664:	84001a04 	addi	r16,r16,104
 1045668:	8cbff51e 	bne	r17,r18,1045640 <__alt_data_end+0xfffe5640>
 104566c:	ad400017 	ldw	r21,0(r21)
 1045670:	a83fee1e 	bne	r21,zero,104562c <__alt_data_end+0xfffe562c>
 1045674:	1044c400 	call	1044c40 <__sfp_lock_release>
 1045678:	b005883a 	mov	r2,r22
 104567c:	dfc00717 	ldw	ra,28(sp)
 1045680:	dd800617 	ldw	r22,24(sp)
 1045684:	dd400517 	ldw	r21,20(sp)
 1045688:	dd000417 	ldw	r20,16(sp)
 104568c:	dcc00317 	ldw	r19,12(sp)
 1045690:	dc800217 	ldw	r18,8(sp)
 1045694:	dc400117 	ldw	r17,4(sp)
 1045698:	dc000017 	ldw	r16,0(sp)
 104569c:	dec00804 	addi	sp,sp,32
 10456a0:	f800283a 	ret

010456a4 <_setlocale_r>:
 10456a4:	30001b26 	beq	r6,zero,1045714 <_setlocale_r+0x70>
 10456a8:	01404174 	movhi	r5,261
 10456ac:	defffe04 	addi	sp,sp,-8
 10456b0:	297e4504 	addi	r5,r5,-1772
 10456b4:	3009883a 	mov	r4,r6
 10456b8:	dc000015 	stw	r16,0(sp)
 10456bc:	dfc00115 	stw	ra,4(sp)
 10456c0:	3021883a 	mov	r16,r6
 10456c4:	1047cb40 	call	1047cb4 <strcmp>
 10456c8:	1000061e 	bne	r2,zero,10456e4 <_setlocale_r+0x40>
 10456cc:	00804174 	movhi	r2,261
 10456d0:	10be4404 	addi	r2,r2,-1776
 10456d4:	dfc00117 	ldw	ra,4(sp)
 10456d8:	dc000017 	ldw	r16,0(sp)
 10456dc:	dec00204 	addi	sp,sp,8
 10456e0:	f800283a 	ret
 10456e4:	01404174 	movhi	r5,261
 10456e8:	297e4404 	addi	r5,r5,-1776
 10456ec:	8009883a 	mov	r4,r16
 10456f0:	1047cb40 	call	1047cb4 <strcmp>
 10456f4:	103ff526 	beq	r2,zero,10456cc <__alt_data_end+0xfffe56cc>
 10456f8:	01404174 	movhi	r5,261
 10456fc:	297e2f04 	addi	r5,r5,-1860
 1045700:	8009883a 	mov	r4,r16
 1045704:	1047cb40 	call	1047cb4 <strcmp>
 1045708:	103ff026 	beq	r2,zero,10456cc <__alt_data_end+0xfffe56cc>
 104570c:	0005883a 	mov	r2,zero
 1045710:	003ff006 	br	10456d4 <__alt_data_end+0xfffe56d4>
 1045714:	00804174 	movhi	r2,261
 1045718:	10be4404 	addi	r2,r2,-1776
 104571c:	f800283a 	ret

01045720 <__locale_charset>:
 1045720:	00804174 	movhi	r2,261
 1045724:	10bfb504 	addi	r2,r2,-300
 1045728:	f800283a 	ret

0104572c <__locale_mb_cur_max>:
 104572c:	00804174 	movhi	r2,261
 1045730:	10855104 	addi	r2,r2,5444
 1045734:	10800017 	ldw	r2,0(r2)
 1045738:	f800283a 	ret

0104573c <__locale_msgcharset>:
 104573c:	00804174 	movhi	r2,261
 1045740:	10bfad04 	addi	r2,r2,-332
 1045744:	f800283a 	ret

01045748 <__locale_cjk_lang>:
 1045748:	0005883a 	mov	r2,zero
 104574c:	f800283a 	ret

01045750 <_localeconv_r>:
 1045750:	00804174 	movhi	r2,261
 1045754:	10bfbd04 	addi	r2,r2,-268
 1045758:	f800283a 	ret

0104575c <setlocale>:
 104575c:	00c04174 	movhi	r3,261
 1045760:	18c55004 	addi	r3,r3,5440
 1045764:	2005883a 	mov	r2,r4
 1045768:	19000017 	ldw	r4,0(r3)
 104576c:	280d883a 	mov	r6,r5
 1045770:	100b883a 	mov	r5,r2
 1045774:	10456a41 	jmpi	10456a4 <_setlocale_r>

01045778 <localeconv>:
 1045778:	00804174 	movhi	r2,261
 104577c:	10bfbd04 	addi	r2,r2,-268
 1045780:	f800283a 	ret

01045784 <__smakebuf_r>:
 1045784:	2880030b 	ldhu	r2,12(r5)
 1045788:	10c0008c 	andi	r3,r2,2
 104578c:	1800401e 	bne	r3,zero,1045890 <__smakebuf_r+0x10c>
 1045790:	deffec04 	addi	sp,sp,-80
 1045794:	dc000f15 	stw	r16,60(sp)
 1045798:	2821883a 	mov	r16,r5
 104579c:	2940038f 	ldh	r5,14(r5)
 10457a0:	dc401015 	stw	r17,64(sp)
 10457a4:	dfc01315 	stw	ra,76(sp)
 10457a8:	dcc01215 	stw	r19,72(sp)
 10457ac:	dc801115 	stw	r18,68(sp)
 10457b0:	2023883a 	mov	r17,r4
 10457b4:	28001b16 	blt	r5,zero,1045824 <__smakebuf_r+0xa0>
 10457b8:	d80d883a 	mov	r6,sp
 10457bc:	10496500 	call	1049650 <_fstat_r>
 10457c0:	10001716 	blt	r2,zero,1045820 <__smakebuf_r+0x9c>
 10457c4:	d8800117 	ldw	r2,4(sp)
 10457c8:	00e00014 	movui	r3,32768
 10457cc:	10bc000c 	andi	r2,r2,61440
 10457d0:	10c03726 	beq	r2,r3,10458b0 <__smakebuf_r+0x12c>
 10457d4:	80c0030b 	ldhu	r3,12(r16)
 10457d8:	18c20014 	ori	r3,r3,2048
 10457dc:	80c0030d 	sth	r3,12(r16)
 10457e0:	00c80004 	movi	r3,8192
 10457e4:	10c03c1e 	bne	r2,r3,10458d8 <__smakebuf_r+0x154>
 10457e8:	8140038f 	ldh	r5,14(r16)
 10457ec:	8809883a 	mov	r4,r17
 10457f0:	10496a80 	call	10496a8 <_isatty_r>
 10457f4:	10004e26 	beq	r2,zero,1045930 <__smakebuf_r+0x1ac>
 10457f8:	8080030b 	ldhu	r2,12(r16)
 10457fc:	04c00044 	movi	r19,1
 1045800:	80c010c4 	addi	r3,r16,67
 1045804:	14c4b03a 	or	r2,r2,r19
 1045808:	8080030d 	sth	r2,12(r16)
 104580c:	80c00015 	stw	r3,0(r16)
 1045810:	80c00415 	stw	r3,16(r16)
 1045814:	84c00515 	stw	r19,20(r16)
 1045818:	04810004 	movi	r18,1024
 104581c:	00000706 	br	104583c <__smakebuf_r+0xb8>
 1045820:	8080030b 	ldhu	r2,12(r16)
 1045824:	10c0200c 	andi	r3,r2,128
 1045828:	18001f1e 	bne	r3,zero,10458a8 <__smakebuf_r+0x124>
 104582c:	04810004 	movi	r18,1024
 1045830:	10820014 	ori	r2,r2,2048
 1045834:	8080030d 	sth	r2,12(r16)
 1045838:	0027883a 	mov	r19,zero
 104583c:	8809883a 	mov	r4,r17
 1045840:	900b883a 	mov	r5,r18
 1045844:	104593c0 	call	104593c <_malloc_r>
 1045848:	10002e26 	beq	r2,zero,1045904 <__smakebuf_r+0x180>
 104584c:	80c0030b 	ldhu	r3,12(r16)
 1045850:	01004134 	movhi	r4,260
 1045854:	21123b04 	addi	r4,r4,18668
 1045858:	89000f15 	stw	r4,60(r17)
 104585c:	18c02014 	ori	r3,r3,128
 1045860:	80c0030d 	sth	r3,12(r16)
 1045864:	80800015 	stw	r2,0(r16)
 1045868:	80800415 	stw	r2,16(r16)
 104586c:	84800515 	stw	r18,20(r16)
 1045870:	98001c1e 	bne	r19,zero,10458e4 <__smakebuf_r+0x160>
 1045874:	dfc01317 	ldw	ra,76(sp)
 1045878:	dcc01217 	ldw	r19,72(sp)
 104587c:	dc801117 	ldw	r18,68(sp)
 1045880:	dc401017 	ldw	r17,64(sp)
 1045884:	dc000f17 	ldw	r16,60(sp)
 1045888:	dec01404 	addi	sp,sp,80
 104588c:	f800283a 	ret
 1045890:	288010c4 	addi	r2,r5,67
 1045894:	28800015 	stw	r2,0(r5)
 1045898:	28800415 	stw	r2,16(r5)
 104589c:	00800044 	movi	r2,1
 10458a0:	28800515 	stw	r2,20(r5)
 10458a4:	f800283a 	ret
 10458a8:	04801004 	movi	r18,64
 10458ac:	003fe006 	br	1045830 <__alt_data_end+0xfffe5830>
 10458b0:	81000a17 	ldw	r4,40(r16)
 10458b4:	00c04134 	movhi	r3,260
 10458b8:	18df1404 	addi	r3,r3,31824
 10458bc:	20ffc51e 	bne	r4,r3,10457d4 <__alt_data_end+0xfffe57d4>
 10458c0:	80c0030b 	ldhu	r3,12(r16)
 10458c4:	01010004 	movi	r4,1024
 10458c8:	81001315 	stw	r4,76(r16)
 10458cc:	1906b03a 	or	r3,r3,r4
 10458d0:	80c0030d 	sth	r3,12(r16)
 10458d4:	003fc206 	br	10457e0 <__alt_data_end+0xfffe57e0>
 10458d8:	0027883a 	mov	r19,zero
 10458dc:	04810004 	movi	r18,1024
 10458e0:	003fd606 	br	104583c <__alt_data_end+0xfffe583c>
 10458e4:	8140038f 	ldh	r5,14(r16)
 10458e8:	8809883a 	mov	r4,r17
 10458ec:	10496a80 	call	10496a8 <_isatty_r>
 10458f0:	103fe026 	beq	r2,zero,1045874 <__alt_data_end+0xfffe5874>
 10458f4:	8080030b 	ldhu	r2,12(r16)
 10458f8:	10800054 	ori	r2,r2,1
 10458fc:	8080030d 	sth	r2,12(r16)
 1045900:	003fdc06 	br	1045874 <__alt_data_end+0xfffe5874>
 1045904:	8080030b 	ldhu	r2,12(r16)
 1045908:	10c0800c 	andi	r3,r2,512
 104590c:	183fd91e 	bne	r3,zero,1045874 <__alt_data_end+0xfffe5874>
 1045910:	10800094 	ori	r2,r2,2
 1045914:	80c010c4 	addi	r3,r16,67
 1045918:	8080030d 	sth	r2,12(r16)
 104591c:	00800044 	movi	r2,1
 1045920:	80c00015 	stw	r3,0(r16)
 1045924:	80c00415 	stw	r3,16(r16)
 1045928:	80800515 	stw	r2,20(r16)
 104592c:	003fd106 	br	1045874 <__alt_data_end+0xfffe5874>
 1045930:	04c00044 	movi	r19,1
 1045934:	04810004 	movi	r18,1024
 1045938:	003fc006 	br	104583c <__alt_data_end+0xfffe583c>

0104593c <_malloc_r>:
 104593c:	defff504 	addi	sp,sp,-44
 1045940:	dc800315 	stw	r18,12(sp)
 1045944:	dfc00a15 	stw	ra,40(sp)
 1045948:	df000915 	stw	fp,36(sp)
 104594c:	ddc00815 	stw	r23,32(sp)
 1045950:	dd800715 	stw	r22,28(sp)
 1045954:	dd400615 	stw	r21,24(sp)
 1045958:	dd000515 	stw	r20,20(sp)
 104595c:	dcc00415 	stw	r19,16(sp)
 1045960:	dc400215 	stw	r17,8(sp)
 1045964:	dc000115 	stw	r16,4(sp)
 1045968:	288002c4 	addi	r2,r5,11
 104596c:	00c00584 	movi	r3,22
 1045970:	2025883a 	mov	r18,r4
 1045974:	18802a2e 	bgeu	r3,r2,1045a20 <_malloc_r+0xe4>
 1045978:	047ffe04 	movi	r17,-8
 104597c:	1462703a 	and	r17,r2,r17
 1045980:	88009e16 	blt	r17,zero,1045bfc <_malloc_r+0x2c0>
 1045984:	89409d36 	bltu	r17,r5,1045bfc <_malloc_r+0x2c0>
 1045988:	104d2fc0 	call	104d2fc <__malloc_lock>
 104598c:	00807dc4 	movi	r2,503
 1045990:	14402736 	bltu	r2,r17,1045a30 <_malloc_r+0xf4>
 1045994:	8806d0fa 	srli	r3,r17,3
 1045998:	04c04174 	movhi	r19,261
 104599c:	9cffcb04 	addi	r19,r19,-212
 10459a0:	18c5883a 	add	r2,r3,r3
 10459a4:	1085883a 	add	r2,r2,r2
 10459a8:	1085883a 	add	r2,r2,r2
 10459ac:	9885883a 	add	r2,r19,r2
 10459b0:	14000317 	ldw	r16,12(r2)
 10459b4:	80814a26 	beq	r16,r2,1045ee0 <_malloc_r+0x5a4>
 10459b8:	80c00117 	ldw	r3,4(r16)
 10459bc:	81000317 	ldw	r4,12(r16)
 10459c0:	00bfff04 	movi	r2,-4
 10459c4:	1884703a 	and	r2,r3,r2
 10459c8:	81400217 	ldw	r5,8(r16)
 10459cc:	8085883a 	add	r2,r16,r2
 10459d0:	10c00117 	ldw	r3,4(r2)
 10459d4:	29000315 	stw	r4,12(r5)
 10459d8:	21400215 	stw	r5,8(r4)
 10459dc:	18c00054 	ori	r3,r3,1
 10459e0:	10c00115 	stw	r3,4(r2)
 10459e4:	9009883a 	mov	r4,r18
 10459e8:	104d31c0 	call	104d31c <__malloc_unlock>
 10459ec:	80800204 	addi	r2,r16,8
 10459f0:	dfc00a17 	ldw	ra,40(sp)
 10459f4:	df000917 	ldw	fp,36(sp)
 10459f8:	ddc00817 	ldw	r23,32(sp)
 10459fc:	dd800717 	ldw	r22,28(sp)
 1045a00:	dd400617 	ldw	r21,24(sp)
 1045a04:	dd000517 	ldw	r20,20(sp)
 1045a08:	dcc00417 	ldw	r19,16(sp)
 1045a0c:	dc800317 	ldw	r18,12(sp)
 1045a10:	dc400217 	ldw	r17,8(sp)
 1045a14:	dc000117 	ldw	r16,4(sp)
 1045a18:	dec00b04 	addi	sp,sp,44
 1045a1c:	f800283a 	ret
 1045a20:	04400404 	movi	r17,16
 1045a24:	89407536 	bltu	r17,r5,1045bfc <_malloc_r+0x2c0>
 1045a28:	104d2fc0 	call	104d2fc <__malloc_lock>
 1045a2c:	003fd906 	br	1045994 <__alt_data_end+0xfffe5994>
 1045a30:	8806d27a 	srli	r3,r17,9
 1045a34:	18007526 	beq	r3,zero,1045c0c <_malloc_r+0x2d0>
 1045a38:	00800104 	movi	r2,4
 1045a3c:	10c0ef36 	bltu	r2,r3,1045dfc <_malloc_r+0x4c0>
 1045a40:	8806d1ba 	srli	r3,r17,6
 1045a44:	19c00e04 	addi	r7,r3,56
 1045a48:	39cb883a 	add	r5,r7,r7
 1045a4c:	04c04174 	movhi	r19,261
 1045a50:	294b883a 	add	r5,r5,r5
 1045a54:	9cffcb04 	addi	r19,r19,-212
 1045a58:	294b883a 	add	r5,r5,r5
 1045a5c:	994b883a 	add	r5,r19,r5
 1045a60:	2c000317 	ldw	r16,12(r5)
 1045a64:	2c000e26 	beq	r5,r16,1045aa0 <_malloc_r+0x164>
 1045a68:	80800117 	ldw	r2,4(r16)
 1045a6c:	01bfff04 	movi	r6,-4
 1045a70:	010003c4 	movi	r4,15
 1045a74:	1184703a 	and	r2,r2,r6
 1045a78:	1447c83a 	sub	r3,r2,r17
 1045a7c:	20c00716 	blt	r4,r3,1045a9c <_malloc_r+0x160>
 1045a80:	1800650e 	bge	r3,zero,1045c18 <_malloc_r+0x2dc>
 1045a84:	84000317 	ldw	r16,12(r16)
 1045a88:	2c000526 	beq	r5,r16,1045aa0 <_malloc_r+0x164>
 1045a8c:	80800117 	ldw	r2,4(r16)
 1045a90:	1184703a 	and	r2,r2,r6
 1045a94:	1447c83a 	sub	r3,r2,r17
 1045a98:	20fff90e 	bge	r4,r3,1045a80 <__alt_data_end+0xfffe5a80>
 1045a9c:	39ffffc4 	addi	r7,r7,-1
 1045aa0:	38c00044 	addi	r3,r7,1
 1045aa4:	01804174 	movhi	r6,261
 1045aa8:	9c000417 	ldw	r16,16(r19)
 1045aac:	31bfcb04 	addi	r6,r6,-212
 1045ab0:	32400204 	addi	r9,r6,8
 1045ab4:	82410326 	beq	r16,r9,1045ec4 <_malloc_r+0x588>
 1045ab8:	81000117 	ldw	r4,4(r16)
 1045abc:	00bfff04 	movi	r2,-4
 1045ac0:	208e703a 	and	r7,r4,r2
 1045ac4:	3c45c83a 	sub	r2,r7,r17
 1045ac8:	010003c4 	movi	r4,15
 1045acc:	2080ee16 	blt	r4,r2,1045e88 <_malloc_r+0x54c>
 1045ad0:	32400515 	stw	r9,20(r6)
 1045ad4:	32400415 	stw	r9,16(r6)
 1045ad8:	1000510e 	bge	r2,zero,1045c20 <_malloc_r+0x2e4>
 1045adc:	00807fc4 	movi	r2,511
 1045ae0:	11c0ce36 	bltu	r2,r7,1045e1c <_malloc_r+0x4e0>
 1045ae4:	3808d0fa 	srli	r4,r7,3
 1045ae8:	01c00044 	movi	r7,1
 1045aec:	30800117 	ldw	r2,4(r6)
 1045af0:	210b883a 	add	r5,r4,r4
 1045af4:	294b883a 	add	r5,r5,r5
 1045af8:	2009d0ba 	srai	r4,r4,2
 1045afc:	294b883a 	add	r5,r5,r5
 1045b00:	298b883a 	add	r5,r5,r6
 1045b04:	2a000217 	ldw	r8,8(r5)
 1045b08:	3908983a 	sll	r4,r7,r4
 1045b0c:	81400315 	stw	r5,12(r16)
 1045b10:	82000215 	stw	r8,8(r16)
 1045b14:	2088b03a 	or	r4,r4,r2
 1045b18:	2c000215 	stw	r16,8(r5)
 1045b1c:	31000115 	stw	r4,4(r6)
 1045b20:	44000315 	stw	r16,12(r8)
 1045b24:	1805d0ba 	srai	r2,r3,2
 1045b28:	01400044 	movi	r5,1
 1045b2c:	288a983a 	sll	r5,r5,r2
 1045b30:	21404336 	bltu	r4,r5,1045c40 <_malloc_r+0x304>
 1045b34:	2144703a 	and	r2,r4,r5
 1045b38:	10000a1e 	bne	r2,zero,1045b64 <_malloc_r+0x228>
 1045b3c:	00bfff04 	movi	r2,-4
 1045b40:	294b883a 	add	r5,r5,r5
 1045b44:	1886703a 	and	r3,r3,r2
 1045b48:	2144703a 	and	r2,r4,r5
 1045b4c:	18c00104 	addi	r3,r3,4
 1045b50:	1000041e 	bne	r2,zero,1045b64 <_malloc_r+0x228>
 1045b54:	294b883a 	add	r5,r5,r5
 1045b58:	2144703a 	and	r2,r4,r5
 1045b5c:	18c00104 	addi	r3,r3,4
 1045b60:	103ffc26 	beq	r2,zero,1045b54 <__alt_data_end+0xfffe5b54>
 1045b64:	023fff04 	movi	r8,-4
 1045b68:	01c003c4 	movi	r7,15
 1045b6c:	18c5883a 	add	r2,r3,r3
 1045b70:	1085883a 	add	r2,r2,r2
 1045b74:	1085883a 	add	r2,r2,r2
 1045b78:	9895883a 	add	r10,r19,r2
 1045b7c:	52c00304 	addi	r11,r10,12
 1045b80:	1819883a 	mov	r12,r3
 1045b84:	5c000017 	ldw	r16,0(r11)
 1045b88:	59bffd04 	addi	r6,r11,-12
 1045b8c:	8180041e 	bne	r16,r6,1045ba0 <_malloc_r+0x264>
 1045b90:	0000ce06 	br	1045ecc <_malloc_r+0x590>
 1045b94:	2000d70e 	bge	r4,zero,1045ef4 <_malloc_r+0x5b8>
 1045b98:	84000317 	ldw	r16,12(r16)
 1045b9c:	8180cb26 	beq	r16,r6,1045ecc <_malloc_r+0x590>
 1045ba0:	80800117 	ldw	r2,4(r16)
 1045ba4:	1204703a 	and	r2,r2,r8
 1045ba8:	1449c83a 	sub	r4,r2,r17
 1045bac:	393ff90e 	bge	r7,r4,1045b94 <__alt_data_end+0xfffe5b94>
 1045bb0:	80800317 	ldw	r2,12(r16)
 1045bb4:	80c00217 	ldw	r3,8(r16)
 1045bb8:	89400054 	ori	r5,r17,1
 1045bbc:	81400115 	stw	r5,4(r16)
 1045bc0:	18800315 	stw	r2,12(r3)
 1045bc4:	10c00215 	stw	r3,8(r2)
 1045bc8:	8463883a 	add	r17,r16,r17
 1045bcc:	9c400515 	stw	r17,20(r19)
 1045bd0:	9c400415 	stw	r17,16(r19)
 1045bd4:	20800054 	ori	r2,r4,1
 1045bd8:	88800115 	stw	r2,4(r17)
 1045bdc:	8a400315 	stw	r9,12(r17)
 1045be0:	8a400215 	stw	r9,8(r17)
 1045be4:	8923883a 	add	r17,r17,r4
 1045be8:	89000015 	stw	r4,0(r17)
 1045bec:	9009883a 	mov	r4,r18
 1045bf0:	104d31c0 	call	104d31c <__malloc_unlock>
 1045bf4:	80800204 	addi	r2,r16,8
 1045bf8:	003f7d06 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045bfc:	00800304 	movi	r2,12
 1045c00:	90800015 	stw	r2,0(r18)
 1045c04:	0005883a 	mov	r2,zero
 1045c08:	003f7906 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045c0c:	01401f84 	movi	r5,126
 1045c10:	01c00fc4 	movi	r7,63
 1045c14:	003f8d06 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1045c18:	81000317 	ldw	r4,12(r16)
 1045c1c:	003f6a06 	br	10459c8 <__alt_data_end+0xfffe59c8>
 1045c20:	81c5883a 	add	r2,r16,r7
 1045c24:	10c00117 	ldw	r3,4(r2)
 1045c28:	9009883a 	mov	r4,r18
 1045c2c:	18c00054 	ori	r3,r3,1
 1045c30:	10c00115 	stw	r3,4(r2)
 1045c34:	104d31c0 	call	104d31c <__malloc_unlock>
 1045c38:	80800204 	addi	r2,r16,8
 1045c3c:	003f6c06 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045c40:	9c000217 	ldw	r16,8(r19)
 1045c44:	00bfff04 	movi	r2,-4
 1045c48:	85800117 	ldw	r22,4(r16)
 1045c4c:	b0ac703a 	and	r22,r22,r2
 1045c50:	b4400336 	bltu	r22,r17,1045c60 <_malloc_r+0x324>
 1045c54:	b445c83a 	sub	r2,r22,r17
 1045c58:	00c003c4 	movi	r3,15
 1045c5c:	18805d16 	blt	r3,r2,1045dd4 <_malloc_r+0x498>
 1045c60:	05c04174 	movhi	r23,261
 1045c64:	00804174 	movhi	r2,261
 1045c68:	bdc55204 	addi	r23,r23,5448
 1045c6c:	108c1f04 	addi	r2,r2,12412
 1045c70:	15400017 	ldw	r21,0(r2)
 1045c74:	b9000017 	ldw	r4,0(r23)
 1045c78:	00ffffc4 	movi	r3,-1
 1045c7c:	858d883a 	add	r6,r16,r22
 1045c80:	8d6b883a 	add	r21,r17,r21
 1045c84:	20c0e426 	beq	r4,r3,1046018 <_malloc_r+0x6dc>
 1045c88:	ad4403c4 	addi	r21,r21,4111
 1045c8c:	00fc0004 	movi	r3,-4096
 1045c90:	a8ea703a 	and	r21,r21,r3
 1045c94:	9009883a 	mov	r4,r18
 1045c98:	a80b883a 	mov	r5,r21
 1045c9c:	d9800015 	stw	r6,0(sp)
 1045ca0:	1047b240 	call	1047b24 <_sbrk_r>
 1045ca4:	00ffffc4 	movi	r3,-1
 1045ca8:	1029883a 	mov	r20,r2
 1045cac:	d9800017 	ldw	r6,0(sp)
 1045cb0:	10c0a426 	beq	r2,r3,1045f44 <_malloc_r+0x608>
 1045cb4:	1180a236 	bltu	r2,r6,1045f40 <_malloc_r+0x604>
 1045cb8:	07004174 	movhi	fp,261
 1045cbc:	e70c2804 	addi	fp,fp,12448
 1045cc0:	e0c00017 	ldw	r3,0(fp)
 1045cc4:	a8c7883a 	add	r3,r21,r3
 1045cc8:	e0c00015 	stw	r3,0(fp)
 1045ccc:	3500da26 	beq	r6,r20,1046038 <_malloc_r+0x6fc>
 1045cd0:	b9000017 	ldw	r4,0(r23)
 1045cd4:	00bfffc4 	movi	r2,-1
 1045cd8:	2080e426 	beq	r4,r2,104606c <_malloc_r+0x730>
 1045cdc:	a185c83a 	sub	r2,r20,r6
 1045ce0:	1885883a 	add	r2,r3,r2
 1045ce4:	e0800015 	stw	r2,0(fp)
 1045ce8:	a0c001cc 	andi	r3,r20,7
 1045cec:	1800b526 	beq	r3,zero,1045fc4 <_malloc_r+0x688>
 1045cf0:	a0e9c83a 	sub	r20,r20,r3
 1045cf4:	00840204 	movi	r2,4104
 1045cf8:	a5000204 	addi	r20,r20,8
 1045cfc:	10c7c83a 	sub	r3,r2,r3
 1045d00:	a545883a 	add	r2,r20,r21
 1045d04:	1083ffcc 	andi	r2,r2,4095
 1045d08:	18abc83a 	sub	r21,r3,r2
 1045d0c:	9009883a 	mov	r4,r18
 1045d10:	a80b883a 	mov	r5,r21
 1045d14:	1047b240 	call	1047b24 <_sbrk_r>
 1045d18:	00ffffc4 	movi	r3,-1
 1045d1c:	10c0d026 	beq	r2,r3,1046060 <_malloc_r+0x724>
 1045d20:	1507c83a 	sub	r3,r2,r20
 1045d24:	a8c7883a 	add	r3,r21,r3
 1045d28:	18c00054 	ori	r3,r3,1
 1045d2c:	e0800017 	ldw	r2,0(fp)
 1045d30:	9d000215 	stw	r20,8(r19)
 1045d34:	a0c00115 	stw	r3,4(r20)
 1045d38:	a887883a 	add	r3,r21,r2
 1045d3c:	e0c00015 	stw	r3,0(fp)
 1045d40:	84c00e26 	beq	r16,r19,1045d7c <_malloc_r+0x440>
 1045d44:	018003c4 	movi	r6,15
 1045d48:	3580a02e 	bgeu	r6,r22,1045fcc <_malloc_r+0x690>
 1045d4c:	81400117 	ldw	r5,4(r16)
 1045d50:	013ffe04 	movi	r4,-8
 1045d54:	b0bffd04 	addi	r2,r22,-12
 1045d58:	1104703a 	and	r2,r2,r4
 1045d5c:	2900004c 	andi	r4,r5,1
 1045d60:	1108b03a 	or	r4,r2,r4
 1045d64:	81000115 	stw	r4,4(r16)
 1045d68:	01400144 	movi	r5,5
 1045d6c:	8089883a 	add	r4,r16,r2
 1045d70:	21400115 	stw	r5,4(r4)
 1045d74:	21400215 	stw	r5,8(r4)
 1045d78:	3080c036 	bltu	r6,r2,104607c <_malloc_r+0x740>
 1045d7c:	00804174 	movhi	r2,261
 1045d80:	108c1e04 	addi	r2,r2,12408
 1045d84:	11000017 	ldw	r4,0(r2)
 1045d88:	20c0012e 	bgeu	r4,r3,1045d90 <_malloc_r+0x454>
 1045d8c:	10c00015 	stw	r3,0(r2)
 1045d90:	00804174 	movhi	r2,261
 1045d94:	108c1d04 	addi	r2,r2,12404
 1045d98:	11000017 	ldw	r4,0(r2)
 1045d9c:	9c000217 	ldw	r16,8(r19)
 1045da0:	20c0012e 	bgeu	r4,r3,1045da8 <_malloc_r+0x46c>
 1045da4:	10c00015 	stw	r3,0(r2)
 1045da8:	80c00117 	ldw	r3,4(r16)
 1045dac:	00bfff04 	movi	r2,-4
 1045db0:	1886703a 	and	r3,r3,r2
 1045db4:	1c45c83a 	sub	r2,r3,r17
 1045db8:	1c400236 	bltu	r3,r17,1045dc4 <_malloc_r+0x488>
 1045dbc:	00c003c4 	movi	r3,15
 1045dc0:	18800416 	blt	r3,r2,1045dd4 <_malloc_r+0x498>
 1045dc4:	9009883a 	mov	r4,r18
 1045dc8:	104d31c0 	call	104d31c <__malloc_unlock>
 1045dcc:	0005883a 	mov	r2,zero
 1045dd0:	003f0706 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045dd4:	88c00054 	ori	r3,r17,1
 1045dd8:	80c00115 	stw	r3,4(r16)
 1045ddc:	8463883a 	add	r17,r16,r17
 1045de0:	10800054 	ori	r2,r2,1
 1045de4:	9c400215 	stw	r17,8(r19)
 1045de8:	88800115 	stw	r2,4(r17)
 1045dec:	9009883a 	mov	r4,r18
 1045df0:	104d31c0 	call	104d31c <__malloc_unlock>
 1045df4:	80800204 	addi	r2,r16,8
 1045df8:	003efd06 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045dfc:	00800504 	movi	r2,20
 1045e00:	10c0482e 	bgeu	r2,r3,1045f24 <_malloc_r+0x5e8>
 1045e04:	00801504 	movi	r2,84
 1045e08:	10c06836 	bltu	r2,r3,1045fac <_malloc_r+0x670>
 1045e0c:	8806d33a 	srli	r3,r17,12
 1045e10:	19c01b84 	addi	r7,r3,110
 1045e14:	39cb883a 	add	r5,r7,r7
 1045e18:	003f0c06 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1045e1c:	3804d27a 	srli	r2,r7,9
 1045e20:	01000104 	movi	r4,4
 1045e24:	2080422e 	bgeu	r4,r2,1045f30 <_malloc_r+0x5f4>
 1045e28:	01000504 	movi	r4,20
 1045e2c:	20807c36 	bltu	r4,r2,1046020 <_malloc_r+0x6e4>
 1045e30:	110016c4 	addi	r4,r2,91
 1045e34:	210b883a 	add	r5,r4,r4
 1045e38:	294b883a 	add	r5,r5,r5
 1045e3c:	294b883a 	add	r5,r5,r5
 1045e40:	994b883a 	add	r5,r19,r5
 1045e44:	28800217 	ldw	r2,8(r5)
 1045e48:	02004174 	movhi	r8,261
 1045e4c:	423fcb04 	addi	r8,r8,-212
 1045e50:	11406326 	beq	r2,r5,1045fe0 <_malloc_r+0x6a4>
 1045e54:	01bfff04 	movi	r6,-4
 1045e58:	11000117 	ldw	r4,4(r2)
 1045e5c:	2188703a 	and	r4,r4,r6
 1045e60:	3900022e 	bgeu	r7,r4,1045e6c <_malloc_r+0x530>
 1045e64:	10800217 	ldw	r2,8(r2)
 1045e68:	28bffb1e 	bne	r5,r2,1045e58 <__alt_data_end+0xfffe5e58>
 1045e6c:	11800317 	ldw	r6,12(r2)
 1045e70:	99000117 	ldw	r4,4(r19)
 1045e74:	81800315 	stw	r6,12(r16)
 1045e78:	80800215 	stw	r2,8(r16)
 1045e7c:	34000215 	stw	r16,8(r6)
 1045e80:	14000315 	stw	r16,12(r2)
 1045e84:	003f2706 	br	1045b24 <__alt_data_end+0xfffe5b24>
 1045e88:	88c00054 	ori	r3,r17,1
 1045e8c:	80c00115 	stw	r3,4(r16)
 1045e90:	8463883a 	add	r17,r16,r17
 1045e94:	34400515 	stw	r17,20(r6)
 1045e98:	34400415 	stw	r17,16(r6)
 1045e9c:	10c00054 	ori	r3,r2,1
 1045ea0:	8a400315 	stw	r9,12(r17)
 1045ea4:	8a400215 	stw	r9,8(r17)
 1045ea8:	88c00115 	stw	r3,4(r17)
 1045eac:	88a3883a 	add	r17,r17,r2
 1045eb0:	88800015 	stw	r2,0(r17)
 1045eb4:	9009883a 	mov	r4,r18
 1045eb8:	104d31c0 	call	104d31c <__malloc_unlock>
 1045ebc:	80800204 	addi	r2,r16,8
 1045ec0:	003ecb06 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045ec4:	31000117 	ldw	r4,4(r6)
 1045ec8:	003f1606 	br	1045b24 <__alt_data_end+0xfffe5b24>
 1045ecc:	63000044 	addi	r12,r12,1
 1045ed0:	608000cc 	andi	r2,r12,3
 1045ed4:	5ac00204 	addi	r11,r11,8
 1045ed8:	103f2a1e 	bne	r2,zero,1045b84 <__alt_data_end+0xfffe5b84>
 1045edc:	00002106 	br	1045f64 <_malloc_r+0x628>
 1045ee0:	80800204 	addi	r2,r16,8
 1045ee4:	84000517 	ldw	r16,20(r16)
 1045ee8:	143eb31e 	bne	r2,r16,10459b8 <__alt_data_end+0xfffe59b8>
 1045eec:	18c00084 	addi	r3,r3,2
 1045ef0:	003eec06 	br	1045aa4 <__alt_data_end+0xfffe5aa4>
 1045ef4:	8085883a 	add	r2,r16,r2
 1045ef8:	10c00117 	ldw	r3,4(r2)
 1045efc:	81000317 	ldw	r4,12(r16)
 1045f00:	81400217 	ldw	r5,8(r16)
 1045f04:	18c00054 	ori	r3,r3,1
 1045f08:	10c00115 	stw	r3,4(r2)
 1045f0c:	29000315 	stw	r4,12(r5)
 1045f10:	21400215 	stw	r5,8(r4)
 1045f14:	9009883a 	mov	r4,r18
 1045f18:	104d31c0 	call	104d31c <__malloc_unlock>
 1045f1c:	80800204 	addi	r2,r16,8
 1045f20:	003eb306 	br	10459f0 <__alt_data_end+0xfffe59f0>
 1045f24:	19c016c4 	addi	r7,r3,91
 1045f28:	39cb883a 	add	r5,r7,r7
 1045f2c:	003ec706 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1045f30:	3804d1ba 	srli	r2,r7,6
 1045f34:	11000e04 	addi	r4,r2,56
 1045f38:	210b883a 	add	r5,r4,r4
 1045f3c:	003fbe06 	br	1045e38 <__alt_data_end+0xfffe5e38>
 1045f40:	84ff5d26 	beq	r16,r19,1045cb8 <__alt_data_end+0xfffe5cb8>
 1045f44:	9c000217 	ldw	r16,8(r19)
 1045f48:	00bfff04 	movi	r2,-4
 1045f4c:	80c00117 	ldw	r3,4(r16)
 1045f50:	1886703a 	and	r3,r3,r2
 1045f54:	003f9706 	br	1045db4 <__alt_data_end+0xfffe5db4>
 1045f58:	52800017 	ldw	r10,0(r10)
 1045f5c:	18ffffc4 	addi	r3,r3,-1
 1045f60:	50805c1e 	bne	r10,r2,10460d4 <_malloc_r+0x798>
 1045f64:	190000cc 	andi	r4,r3,3
 1045f68:	50bffe04 	addi	r2,r10,-8
 1045f6c:	203ffa1e 	bne	r4,zero,1045f58 <__alt_data_end+0xfffe5f58>
 1045f70:	98800117 	ldw	r2,4(r19)
 1045f74:	0146303a 	nor	r3,zero,r5
 1045f78:	1884703a 	and	r2,r3,r2
 1045f7c:	98800115 	stw	r2,4(r19)
 1045f80:	294b883a 	add	r5,r5,r5
 1045f84:	117f2e36 	bltu	r2,r5,1045c40 <__alt_data_end+0xfffe5c40>
 1045f88:	283f2d26 	beq	r5,zero,1045c40 <__alt_data_end+0xfffe5c40>
 1045f8c:	1146703a 	and	r3,r2,r5
 1045f90:	1800521e 	bne	r3,zero,10460dc <_malloc_r+0x7a0>
 1045f94:	6007883a 	mov	r3,r12
 1045f98:	294b883a 	add	r5,r5,r5
 1045f9c:	1148703a 	and	r4,r2,r5
 1045fa0:	18c00104 	addi	r3,r3,4
 1045fa4:	203ffc26 	beq	r4,zero,1045f98 <__alt_data_end+0xfffe5f98>
 1045fa8:	003ef006 	br	1045b6c <__alt_data_end+0xfffe5b6c>
 1045fac:	00805504 	movi	r2,340
 1045fb0:	10c01336 	bltu	r2,r3,1046000 <_malloc_r+0x6c4>
 1045fb4:	8806d3fa 	srli	r3,r17,15
 1045fb8:	19c01dc4 	addi	r7,r3,119
 1045fbc:	39cb883a 	add	r5,r7,r7
 1045fc0:	003ea206 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1045fc4:	00c40004 	movi	r3,4096
 1045fc8:	003f4d06 	br	1045d00 <__alt_data_end+0xfffe5d00>
 1045fcc:	00800044 	movi	r2,1
 1045fd0:	a0800115 	stw	r2,4(r20)
 1045fd4:	a021883a 	mov	r16,r20
 1045fd8:	0007883a 	mov	r3,zero
 1045fdc:	003f7506 	br	1045db4 <__alt_data_end+0xfffe5db4>
 1045fe0:	200bd0ba 	srai	r5,r4,2
 1045fe4:	01800044 	movi	r6,1
 1045fe8:	41000117 	ldw	r4,4(r8)
 1045fec:	314a983a 	sll	r5,r6,r5
 1045ff0:	100d883a 	mov	r6,r2
 1045ff4:	2908b03a 	or	r4,r5,r4
 1045ff8:	41000115 	stw	r4,4(r8)
 1045ffc:	003f9d06 	br	1045e74 <__alt_data_end+0xfffe5e74>
 1046000:	00815504 	movi	r2,1364
 1046004:	10c01336 	bltu	r2,r3,1046054 <_malloc_r+0x718>
 1046008:	8806d4ba 	srli	r3,r17,18
 104600c:	19c01f04 	addi	r7,r3,124
 1046010:	39cb883a 	add	r5,r7,r7
 1046014:	003e8d06 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1046018:	ad400404 	addi	r21,r21,16
 104601c:	003f1d06 	br	1045c94 <__alt_data_end+0xfffe5c94>
 1046020:	01001504 	movi	r4,84
 1046024:	20801c36 	bltu	r4,r2,1046098 <_malloc_r+0x75c>
 1046028:	3804d33a 	srli	r2,r7,12
 104602c:	11001b84 	addi	r4,r2,110
 1046030:	210b883a 	add	r5,r4,r4
 1046034:	003f8006 	br	1045e38 <__alt_data_end+0xfffe5e38>
 1046038:	3083ffcc 	andi	r2,r6,4095
 104603c:	103f241e 	bne	r2,zero,1045cd0 <__alt_data_end+0xfffe5cd0>
 1046040:	99000217 	ldw	r4,8(r19)
 1046044:	ad85883a 	add	r2,r21,r22
 1046048:	10800054 	ori	r2,r2,1
 104604c:	20800115 	stw	r2,4(r4)
 1046050:	003f4a06 	br	1045d7c <__alt_data_end+0xfffe5d7c>
 1046054:	01403f04 	movi	r5,252
 1046058:	01c01f84 	movi	r7,126
 104605c:	003e7b06 	br	1045a4c <__alt_data_end+0xfffe5a4c>
 1046060:	00c00044 	movi	r3,1
 1046064:	002b883a 	mov	r21,zero
 1046068:	003f3006 	br	1045d2c <__alt_data_end+0xfffe5d2c>
 104606c:	00804174 	movhi	r2,261
 1046070:	10855204 	addi	r2,r2,5448
 1046074:	15000015 	stw	r20,0(r2)
 1046078:	003f1b06 	br	1045ce8 <__alt_data_end+0xfffe5ce8>
 104607c:	9009883a 	mov	r4,r18
 1046080:	81400204 	addi	r5,r16,8
 1046084:	1044da00 	call	1044da0 <_free_r>
 1046088:	00804174 	movhi	r2,261
 104608c:	108c2804 	addi	r2,r2,12448
 1046090:	10c00017 	ldw	r3,0(r2)
 1046094:	003f3906 	br	1045d7c <__alt_data_end+0xfffe5d7c>
 1046098:	01005504 	movi	r4,340
 104609c:	20800436 	bltu	r4,r2,10460b0 <_malloc_r+0x774>
 10460a0:	3804d3fa 	srli	r2,r7,15
 10460a4:	11001dc4 	addi	r4,r2,119
 10460a8:	210b883a 	add	r5,r4,r4
 10460ac:	003f6206 	br	1045e38 <__alt_data_end+0xfffe5e38>
 10460b0:	01015504 	movi	r4,1364
 10460b4:	20800436 	bltu	r4,r2,10460c8 <_malloc_r+0x78c>
 10460b8:	3804d4ba 	srli	r2,r7,18
 10460bc:	11001f04 	addi	r4,r2,124
 10460c0:	210b883a 	add	r5,r4,r4
 10460c4:	003f5c06 	br	1045e38 <__alt_data_end+0xfffe5e38>
 10460c8:	01403f04 	movi	r5,252
 10460cc:	01001f84 	movi	r4,126
 10460d0:	003f5906 	br	1045e38 <__alt_data_end+0xfffe5e38>
 10460d4:	98800117 	ldw	r2,4(r19)
 10460d8:	003fa906 	br	1045f80 <__alt_data_end+0xfffe5f80>
 10460dc:	6007883a 	mov	r3,r12
 10460e0:	003ea206 	br	1045b6c <__alt_data_end+0xfffe5b6c>

010460e4 <memchr>:
 10460e4:	208000cc 	andi	r2,r4,3
 10460e8:	280f883a 	mov	r7,r5
 10460ec:	10003526 	beq	r2,zero,10461c4 <memchr+0xe0>
 10460f0:	30bfffc4 	addi	r2,r6,-1
 10460f4:	30001b26 	beq	r6,zero,1046164 <memchr+0x80>
 10460f8:	21800003 	ldbu	r6,0(r4)
 10460fc:	28c03fcc 	andi	r3,r5,255
 1046100:	30c01a26 	beq	r6,r3,104616c <memchr+0x88>
 1046104:	180d883a 	mov	r6,r3
 1046108:	00000406 	br	104611c <memchr+0x38>
 104610c:	10001526 	beq	r2,zero,1046164 <memchr+0x80>
 1046110:	20c00003 	ldbu	r3,0(r4)
 1046114:	10bfffc4 	addi	r2,r2,-1
 1046118:	19801426 	beq	r3,r6,104616c <memchr+0x88>
 104611c:	21000044 	addi	r4,r4,1
 1046120:	20c000cc 	andi	r3,r4,3
 1046124:	183ff91e 	bne	r3,zero,104610c <__alt_data_end+0xfffe610c>
 1046128:	024000c4 	movi	r9,3
 104612c:	48801136 	bltu	r9,r2,1046174 <memchr+0x90>
 1046130:	10000c26 	beq	r2,zero,1046164 <memchr+0x80>
 1046134:	20c00003 	ldbu	r3,0(r4)
 1046138:	29403fcc 	andi	r5,r5,255
 104613c:	19400b26 	beq	r3,r5,104616c <memchr+0x88>
 1046140:	20c00044 	addi	r3,r4,1
 1046144:	2085883a 	add	r2,r4,r2
 1046148:	39803fcc 	andi	r6,r7,255
 104614c:	00000306 	br	104615c <memchr+0x78>
 1046150:	18c00044 	addi	r3,r3,1
 1046154:	197fffc3 	ldbu	r5,-1(r3)
 1046158:	29800426 	beq	r5,r6,104616c <memchr+0x88>
 104615c:	1809883a 	mov	r4,r3
 1046160:	18bffb1e 	bne	r3,r2,1046150 <__alt_data_end+0xfffe6150>
 1046164:	0005883a 	mov	r2,zero
 1046168:	f800283a 	ret
 104616c:	2005883a 	mov	r2,r4
 1046170:	f800283a 	ret
 1046174:	28c03fcc 	andi	r3,r5,255
 1046178:	1810923a 	slli	r8,r3,8
 104617c:	02ffbff4 	movhi	r11,65279
 1046180:	02a02074 	movhi	r10,32897
 1046184:	40c6b03a 	or	r3,r8,r3
 1046188:	1810943a 	slli	r8,r3,16
 104618c:	5affbfc4 	addi	r11,r11,-257
 1046190:	52a02004 	addi	r10,r10,-32640
 1046194:	40d0b03a 	or	r8,r8,r3
 1046198:	20c00017 	ldw	r3,0(r4)
 104619c:	40c6f03a 	xor	r3,r8,r3
 10461a0:	1acd883a 	add	r6,r3,r11
 10461a4:	00c6303a 	nor	r3,zero,r3
 10461a8:	30c6703a 	and	r3,r6,r3
 10461ac:	1a86703a 	and	r3,r3,r10
 10461b0:	183fdf1e 	bne	r3,zero,1046130 <__alt_data_end+0xfffe6130>
 10461b4:	10bfff04 	addi	r2,r2,-4
 10461b8:	21000104 	addi	r4,r4,4
 10461bc:	48bff636 	bltu	r9,r2,1046198 <__alt_data_end+0xfffe6198>
 10461c0:	003fdb06 	br	1046130 <__alt_data_end+0xfffe6130>
 10461c4:	3005883a 	mov	r2,r6
 10461c8:	003fd706 	br	1046128 <__alt_data_end+0xfffe6128>

010461cc <memcpy>:
 10461cc:	deffff04 	addi	sp,sp,-4
 10461d0:	dc000015 	stw	r16,0(sp)
 10461d4:	00c003c4 	movi	r3,15
 10461d8:	2005883a 	mov	r2,r4
 10461dc:	1980432e 	bgeu	r3,r6,10462ec <memcpy+0x120>
 10461e0:	2146b03a 	or	r3,r4,r5
 10461e4:	18c000cc 	andi	r3,r3,3
 10461e8:	1800421e 	bne	r3,zero,10462f4 <memcpy+0x128>
 10461ec:	343ffc04 	addi	r16,r6,-16
 10461f0:	8020d13a 	srli	r16,r16,4
 10461f4:	28c00104 	addi	r3,r5,4
 10461f8:	23400104 	addi	r13,r4,4
 10461fc:	801e913a 	slli	r15,r16,4
 1046200:	2b000204 	addi	r12,r5,8
 1046204:	22c00204 	addi	r11,r4,8
 1046208:	7bc00504 	addi	r15,r15,20
 104620c:	2a800304 	addi	r10,r5,12
 1046210:	22400304 	addi	r9,r4,12
 1046214:	2bdf883a 	add	r15,r5,r15
 1046218:	2811883a 	mov	r8,r5
 104621c:	200f883a 	mov	r7,r4
 1046220:	41000017 	ldw	r4,0(r8)
 1046224:	39c00404 	addi	r7,r7,16
 1046228:	18c00404 	addi	r3,r3,16
 104622c:	393ffc15 	stw	r4,-16(r7)
 1046230:	1bbffc17 	ldw	r14,-16(r3)
 1046234:	6b400404 	addi	r13,r13,16
 1046238:	5ac00404 	addi	r11,r11,16
 104623c:	6bbffc15 	stw	r14,-16(r13)
 1046240:	63800017 	ldw	r14,0(r12)
 1046244:	4a400404 	addi	r9,r9,16
 1046248:	42000404 	addi	r8,r8,16
 104624c:	5bbffc15 	stw	r14,-16(r11)
 1046250:	53800017 	ldw	r14,0(r10)
 1046254:	63000404 	addi	r12,r12,16
 1046258:	52800404 	addi	r10,r10,16
 104625c:	4bbffc15 	stw	r14,-16(r9)
 1046260:	1bffef1e 	bne	r3,r15,1046220 <__alt_data_end+0xfffe6220>
 1046264:	81c00044 	addi	r7,r16,1
 1046268:	380e913a 	slli	r7,r7,4
 104626c:	310003cc 	andi	r4,r6,15
 1046270:	02c000c4 	movi	r11,3
 1046274:	11c7883a 	add	r3,r2,r7
 1046278:	29cb883a 	add	r5,r5,r7
 104627c:	59001f2e 	bgeu	r11,r4,10462fc <memcpy+0x130>
 1046280:	1813883a 	mov	r9,r3
 1046284:	2811883a 	mov	r8,r5
 1046288:	200f883a 	mov	r7,r4
 104628c:	42800017 	ldw	r10,0(r8)
 1046290:	4a400104 	addi	r9,r9,4
 1046294:	39ffff04 	addi	r7,r7,-4
 1046298:	4abfff15 	stw	r10,-4(r9)
 104629c:	42000104 	addi	r8,r8,4
 10462a0:	59fffa36 	bltu	r11,r7,104628c <__alt_data_end+0xfffe628c>
 10462a4:	213fff04 	addi	r4,r4,-4
 10462a8:	2008d0ba 	srli	r4,r4,2
 10462ac:	318000cc 	andi	r6,r6,3
 10462b0:	21000044 	addi	r4,r4,1
 10462b4:	2109883a 	add	r4,r4,r4
 10462b8:	2109883a 	add	r4,r4,r4
 10462bc:	1907883a 	add	r3,r3,r4
 10462c0:	290b883a 	add	r5,r5,r4
 10462c4:	30000626 	beq	r6,zero,10462e0 <memcpy+0x114>
 10462c8:	198d883a 	add	r6,r3,r6
 10462cc:	29c00003 	ldbu	r7,0(r5)
 10462d0:	18c00044 	addi	r3,r3,1
 10462d4:	29400044 	addi	r5,r5,1
 10462d8:	19ffffc5 	stb	r7,-1(r3)
 10462dc:	19bffb1e 	bne	r3,r6,10462cc <__alt_data_end+0xfffe62cc>
 10462e0:	dc000017 	ldw	r16,0(sp)
 10462e4:	dec00104 	addi	sp,sp,4
 10462e8:	f800283a 	ret
 10462ec:	2007883a 	mov	r3,r4
 10462f0:	003ff406 	br	10462c4 <__alt_data_end+0xfffe62c4>
 10462f4:	2007883a 	mov	r3,r4
 10462f8:	003ff306 	br	10462c8 <__alt_data_end+0xfffe62c8>
 10462fc:	200d883a 	mov	r6,r4
 1046300:	003ff006 	br	10462c4 <__alt_data_end+0xfffe62c4>

01046304 <memmove>:
 1046304:	2005883a 	mov	r2,r4
 1046308:	29000b2e 	bgeu	r5,r4,1046338 <memmove+0x34>
 104630c:	298f883a 	add	r7,r5,r6
 1046310:	21c0092e 	bgeu	r4,r7,1046338 <memmove+0x34>
 1046314:	2187883a 	add	r3,r4,r6
 1046318:	198bc83a 	sub	r5,r3,r6
 104631c:	30004b26 	beq	r6,zero,104644c <memmove+0x148>
 1046320:	39ffffc4 	addi	r7,r7,-1
 1046324:	39000003 	ldbu	r4,0(r7)
 1046328:	18ffffc4 	addi	r3,r3,-1
 104632c:	19000005 	stb	r4,0(r3)
 1046330:	197ffb1e 	bne	r3,r5,1046320 <__alt_data_end+0xfffe6320>
 1046334:	f800283a 	ret
 1046338:	00c003c4 	movi	r3,15
 104633c:	1980412e 	bgeu	r3,r6,1046444 <memmove+0x140>
 1046340:	1146b03a 	or	r3,r2,r5
 1046344:	18c000cc 	andi	r3,r3,3
 1046348:	1800411e 	bne	r3,zero,1046450 <memmove+0x14c>
 104634c:	33fffc04 	addi	r15,r6,-16
 1046350:	781ed13a 	srli	r15,r15,4
 1046354:	28c00104 	addi	r3,r5,4
 1046358:	13400104 	addi	r13,r2,4
 104635c:	781c913a 	slli	r14,r15,4
 1046360:	2b000204 	addi	r12,r5,8
 1046364:	12c00204 	addi	r11,r2,8
 1046368:	73800504 	addi	r14,r14,20
 104636c:	2a800304 	addi	r10,r5,12
 1046370:	12400304 	addi	r9,r2,12
 1046374:	2b9d883a 	add	r14,r5,r14
 1046378:	2811883a 	mov	r8,r5
 104637c:	100f883a 	mov	r7,r2
 1046380:	41000017 	ldw	r4,0(r8)
 1046384:	39c00404 	addi	r7,r7,16
 1046388:	18c00404 	addi	r3,r3,16
 104638c:	393ffc15 	stw	r4,-16(r7)
 1046390:	193ffc17 	ldw	r4,-16(r3)
 1046394:	6b400404 	addi	r13,r13,16
 1046398:	5ac00404 	addi	r11,r11,16
 104639c:	693ffc15 	stw	r4,-16(r13)
 10463a0:	61000017 	ldw	r4,0(r12)
 10463a4:	4a400404 	addi	r9,r9,16
 10463a8:	42000404 	addi	r8,r8,16
 10463ac:	593ffc15 	stw	r4,-16(r11)
 10463b0:	51000017 	ldw	r4,0(r10)
 10463b4:	63000404 	addi	r12,r12,16
 10463b8:	52800404 	addi	r10,r10,16
 10463bc:	493ffc15 	stw	r4,-16(r9)
 10463c0:	1bbfef1e 	bne	r3,r14,1046380 <__alt_data_end+0xfffe6380>
 10463c4:	79000044 	addi	r4,r15,1
 10463c8:	2008913a 	slli	r4,r4,4
 10463cc:	328003cc 	andi	r10,r6,15
 10463d0:	02c000c4 	movi	r11,3
 10463d4:	1107883a 	add	r3,r2,r4
 10463d8:	290b883a 	add	r5,r5,r4
 10463dc:	5a801e2e 	bgeu	r11,r10,1046458 <memmove+0x154>
 10463e0:	1813883a 	mov	r9,r3
 10463e4:	2811883a 	mov	r8,r5
 10463e8:	500f883a 	mov	r7,r10
 10463ec:	41000017 	ldw	r4,0(r8)
 10463f0:	4a400104 	addi	r9,r9,4
 10463f4:	39ffff04 	addi	r7,r7,-4
 10463f8:	493fff15 	stw	r4,-4(r9)
 10463fc:	42000104 	addi	r8,r8,4
 1046400:	59fffa36 	bltu	r11,r7,10463ec <__alt_data_end+0xfffe63ec>
 1046404:	513fff04 	addi	r4,r10,-4
 1046408:	2008d0ba 	srli	r4,r4,2
 104640c:	318000cc 	andi	r6,r6,3
 1046410:	21000044 	addi	r4,r4,1
 1046414:	2109883a 	add	r4,r4,r4
 1046418:	2109883a 	add	r4,r4,r4
 104641c:	1907883a 	add	r3,r3,r4
 1046420:	290b883a 	add	r5,r5,r4
 1046424:	30000926 	beq	r6,zero,104644c <memmove+0x148>
 1046428:	198d883a 	add	r6,r3,r6
 104642c:	29c00003 	ldbu	r7,0(r5)
 1046430:	18c00044 	addi	r3,r3,1
 1046434:	29400044 	addi	r5,r5,1
 1046438:	19ffffc5 	stb	r7,-1(r3)
 104643c:	19bffb1e 	bne	r3,r6,104642c <__alt_data_end+0xfffe642c>
 1046440:	f800283a 	ret
 1046444:	1007883a 	mov	r3,r2
 1046448:	003ff606 	br	1046424 <__alt_data_end+0xfffe6424>
 104644c:	f800283a 	ret
 1046450:	1007883a 	mov	r3,r2
 1046454:	003ff406 	br	1046428 <__alt_data_end+0xfffe6428>
 1046458:	500d883a 	mov	r6,r10
 104645c:	003ff106 	br	1046424 <__alt_data_end+0xfffe6424>

01046460 <memset>:
 1046460:	20c000cc 	andi	r3,r4,3
 1046464:	2005883a 	mov	r2,r4
 1046468:	18004326 	beq	r3,zero,1046578 <memset+0x118>
 104646c:	31ffffc4 	addi	r7,r6,-1
 1046470:	30004026 	beq	r6,zero,1046574 <memset+0x114>
 1046474:	2813883a 	mov	r9,r5
 1046478:	200d883a 	mov	r6,r4
 104647c:	2007883a 	mov	r3,r4
 1046480:	00000406 	br	1046494 <memset+0x34>
 1046484:	3a3fffc4 	addi	r8,r7,-1
 1046488:	31800044 	addi	r6,r6,1
 104648c:	38003926 	beq	r7,zero,1046574 <memset+0x114>
 1046490:	400f883a 	mov	r7,r8
 1046494:	18c00044 	addi	r3,r3,1
 1046498:	32400005 	stb	r9,0(r6)
 104649c:	1a0000cc 	andi	r8,r3,3
 10464a0:	403ff81e 	bne	r8,zero,1046484 <__alt_data_end+0xfffe6484>
 10464a4:	010000c4 	movi	r4,3
 10464a8:	21c02d2e 	bgeu	r4,r7,1046560 <memset+0x100>
 10464ac:	29803fcc 	andi	r6,r5,255
 10464b0:	3008923a 	slli	r4,r6,8
 10464b4:	218cb03a 	or	r6,r4,r6
 10464b8:	3008943a 	slli	r4,r6,16
 10464bc:	218cb03a 	or	r6,r4,r6
 10464c0:	010003c4 	movi	r4,15
 10464c4:	21c0182e 	bgeu	r4,r7,1046528 <memset+0xc8>
 10464c8:	3b3ffc04 	addi	r12,r7,-16
 10464cc:	6018d13a 	srli	r12,r12,4
 10464d0:	1a000104 	addi	r8,r3,4
 10464d4:	1ac00204 	addi	r11,r3,8
 10464d8:	6008913a 	slli	r4,r12,4
 10464dc:	1a800304 	addi	r10,r3,12
 10464e0:	1813883a 	mov	r9,r3
 10464e4:	21000504 	addi	r4,r4,20
 10464e8:	1909883a 	add	r4,r3,r4
 10464ec:	49800015 	stw	r6,0(r9)
 10464f0:	41800015 	stw	r6,0(r8)
 10464f4:	59800015 	stw	r6,0(r11)
 10464f8:	51800015 	stw	r6,0(r10)
 10464fc:	42000404 	addi	r8,r8,16
 1046500:	4a400404 	addi	r9,r9,16
 1046504:	5ac00404 	addi	r11,r11,16
 1046508:	52800404 	addi	r10,r10,16
 104650c:	413ff71e 	bne	r8,r4,10464ec <__alt_data_end+0xfffe64ec>
 1046510:	63000044 	addi	r12,r12,1
 1046514:	6018913a 	slli	r12,r12,4
 1046518:	39c003cc 	andi	r7,r7,15
 104651c:	010000c4 	movi	r4,3
 1046520:	1b07883a 	add	r3,r3,r12
 1046524:	21c00e2e 	bgeu	r4,r7,1046560 <memset+0x100>
 1046528:	1813883a 	mov	r9,r3
 104652c:	3811883a 	mov	r8,r7
 1046530:	010000c4 	movi	r4,3
 1046534:	49800015 	stw	r6,0(r9)
 1046538:	423fff04 	addi	r8,r8,-4
 104653c:	4a400104 	addi	r9,r9,4
 1046540:	223ffc36 	bltu	r4,r8,1046534 <__alt_data_end+0xfffe6534>
 1046544:	393fff04 	addi	r4,r7,-4
 1046548:	2008d0ba 	srli	r4,r4,2
 104654c:	39c000cc 	andi	r7,r7,3
 1046550:	21000044 	addi	r4,r4,1
 1046554:	2109883a 	add	r4,r4,r4
 1046558:	2109883a 	add	r4,r4,r4
 104655c:	1907883a 	add	r3,r3,r4
 1046560:	38000426 	beq	r7,zero,1046574 <memset+0x114>
 1046564:	19cf883a 	add	r7,r3,r7
 1046568:	19400005 	stb	r5,0(r3)
 104656c:	18c00044 	addi	r3,r3,1
 1046570:	19fffd1e 	bne	r3,r7,1046568 <__alt_data_end+0xfffe6568>
 1046574:	f800283a 	ret
 1046578:	2007883a 	mov	r3,r4
 104657c:	300f883a 	mov	r7,r6
 1046580:	003fc806 	br	10464a4 <__alt_data_end+0xfffe64a4>

01046584 <_Balloc>:
 1046584:	20801317 	ldw	r2,76(r4)
 1046588:	defffc04 	addi	sp,sp,-16
 104658c:	dc400115 	stw	r17,4(sp)
 1046590:	dc000015 	stw	r16,0(sp)
 1046594:	dfc00315 	stw	ra,12(sp)
 1046598:	dc800215 	stw	r18,8(sp)
 104659c:	2023883a 	mov	r17,r4
 10465a0:	2821883a 	mov	r16,r5
 10465a4:	10000f26 	beq	r2,zero,10465e4 <_Balloc+0x60>
 10465a8:	8407883a 	add	r3,r16,r16
 10465ac:	18c7883a 	add	r3,r3,r3
 10465b0:	10c7883a 	add	r3,r2,r3
 10465b4:	18800017 	ldw	r2,0(r3)
 10465b8:	10001126 	beq	r2,zero,1046600 <_Balloc+0x7c>
 10465bc:	11000017 	ldw	r4,0(r2)
 10465c0:	19000015 	stw	r4,0(r3)
 10465c4:	10000415 	stw	zero,16(r2)
 10465c8:	10000315 	stw	zero,12(r2)
 10465cc:	dfc00317 	ldw	ra,12(sp)
 10465d0:	dc800217 	ldw	r18,8(sp)
 10465d4:	dc400117 	ldw	r17,4(sp)
 10465d8:	dc000017 	ldw	r16,0(sp)
 10465dc:	dec00404 	addi	sp,sp,16
 10465e0:	f800283a 	ret
 10465e4:	01400104 	movi	r5,4
 10465e8:	01800844 	movi	r6,33
 10465ec:	104929c0 	call	104929c <_calloc_r>
 10465f0:	88801315 	stw	r2,76(r17)
 10465f4:	103fec1e 	bne	r2,zero,10465a8 <__alt_data_end+0xfffe65a8>
 10465f8:	0005883a 	mov	r2,zero
 10465fc:	003ff306 	br	10465cc <__alt_data_end+0xfffe65cc>
 1046600:	01400044 	movi	r5,1
 1046604:	2c24983a 	sll	r18,r5,r16
 1046608:	8809883a 	mov	r4,r17
 104660c:	91800144 	addi	r6,r18,5
 1046610:	318d883a 	add	r6,r6,r6
 1046614:	318d883a 	add	r6,r6,r6
 1046618:	104929c0 	call	104929c <_calloc_r>
 104661c:	103ff626 	beq	r2,zero,10465f8 <__alt_data_end+0xfffe65f8>
 1046620:	14000115 	stw	r16,4(r2)
 1046624:	14800215 	stw	r18,8(r2)
 1046628:	003fe606 	br	10465c4 <__alt_data_end+0xfffe65c4>

0104662c <_Bfree>:
 104662c:	28000826 	beq	r5,zero,1046650 <_Bfree+0x24>
 1046630:	28c00117 	ldw	r3,4(r5)
 1046634:	20801317 	ldw	r2,76(r4)
 1046638:	18c7883a 	add	r3,r3,r3
 104663c:	18c7883a 	add	r3,r3,r3
 1046640:	10c5883a 	add	r2,r2,r3
 1046644:	10c00017 	ldw	r3,0(r2)
 1046648:	28c00015 	stw	r3,0(r5)
 104664c:	11400015 	stw	r5,0(r2)
 1046650:	f800283a 	ret

01046654 <__multadd>:
 1046654:	defffa04 	addi	sp,sp,-24
 1046658:	dc000115 	stw	r16,4(sp)
 104665c:	2c000417 	ldw	r16,16(r5)
 1046660:	dc800315 	stw	r18,12(sp)
 1046664:	dc400215 	stw	r17,8(sp)
 1046668:	dfc00515 	stw	ra,20(sp)
 104666c:	dcc00415 	stw	r19,16(sp)
 1046670:	2823883a 	mov	r17,r5
 1046674:	2025883a 	mov	r18,r4
 1046678:	2a400504 	addi	r9,r5,20
 104667c:	0015883a 	mov	r10,zero
 1046680:	4a000017 	ldw	r8,0(r9)
 1046684:	4a400104 	addi	r9,r9,4
 1046688:	52800044 	addi	r10,r10,1
 104668c:	40ffffcc 	andi	r3,r8,65535
 1046690:	1987383a 	mul	r3,r3,r6
 1046694:	4010d43a 	srli	r8,r8,16
 1046698:	19cf883a 	add	r7,r3,r7
 104669c:	4191383a 	mul	r8,r8,r6
 10466a0:	3816d43a 	srli	r11,r7,16
 10466a4:	38ffffcc 	andi	r3,r7,65535
 10466a8:	5a0f883a 	add	r7,r11,r8
 10466ac:	3810943a 	slli	r8,r7,16
 10466b0:	380ed43a 	srli	r7,r7,16
 10466b4:	40c7883a 	add	r3,r8,r3
 10466b8:	48ffff15 	stw	r3,-4(r9)
 10466bc:	543ff016 	blt	r10,r16,1046680 <__alt_data_end+0xfffe6680>
 10466c0:	38000926 	beq	r7,zero,10466e8 <__multadd+0x94>
 10466c4:	88800217 	ldw	r2,8(r17)
 10466c8:	80800f0e 	bge	r16,r2,1046708 <__multadd+0xb4>
 10466cc:	80800144 	addi	r2,r16,5
 10466d0:	1085883a 	add	r2,r2,r2
 10466d4:	1085883a 	add	r2,r2,r2
 10466d8:	8885883a 	add	r2,r17,r2
 10466dc:	11c00015 	stw	r7,0(r2)
 10466e0:	84000044 	addi	r16,r16,1
 10466e4:	8c000415 	stw	r16,16(r17)
 10466e8:	8805883a 	mov	r2,r17
 10466ec:	dfc00517 	ldw	ra,20(sp)
 10466f0:	dcc00417 	ldw	r19,16(sp)
 10466f4:	dc800317 	ldw	r18,12(sp)
 10466f8:	dc400217 	ldw	r17,8(sp)
 10466fc:	dc000117 	ldw	r16,4(sp)
 1046700:	dec00604 	addi	sp,sp,24
 1046704:	f800283a 	ret
 1046708:	89400117 	ldw	r5,4(r17)
 104670c:	9009883a 	mov	r4,r18
 1046710:	d9c00015 	stw	r7,0(sp)
 1046714:	29400044 	addi	r5,r5,1
 1046718:	10465840 	call	1046584 <_Balloc>
 104671c:	89800417 	ldw	r6,16(r17)
 1046720:	89400304 	addi	r5,r17,12
 1046724:	11000304 	addi	r4,r2,12
 1046728:	31800084 	addi	r6,r6,2
 104672c:	318d883a 	add	r6,r6,r6
 1046730:	318d883a 	add	r6,r6,r6
 1046734:	1027883a 	mov	r19,r2
 1046738:	10461cc0 	call	10461cc <memcpy>
 104673c:	89000117 	ldw	r4,4(r17)
 1046740:	90c01317 	ldw	r3,76(r18)
 1046744:	d9c00017 	ldw	r7,0(sp)
 1046748:	2109883a 	add	r4,r4,r4
 104674c:	2109883a 	add	r4,r4,r4
 1046750:	1907883a 	add	r3,r3,r4
 1046754:	18800017 	ldw	r2,0(r3)
 1046758:	88800015 	stw	r2,0(r17)
 104675c:	1c400015 	stw	r17,0(r3)
 1046760:	9823883a 	mov	r17,r19
 1046764:	003fd906 	br	10466cc <__alt_data_end+0xfffe66cc>

01046768 <__s2b>:
 1046768:	defff904 	addi	sp,sp,-28
 104676c:	dc400115 	stw	r17,4(sp)
 1046770:	dc000015 	stw	r16,0(sp)
 1046774:	2023883a 	mov	r17,r4
 1046778:	2821883a 	mov	r16,r5
 104677c:	39000204 	addi	r4,r7,8
 1046780:	01400244 	movi	r5,9
 1046784:	dcc00315 	stw	r19,12(sp)
 1046788:	dc800215 	stw	r18,8(sp)
 104678c:	dfc00615 	stw	ra,24(sp)
 1046790:	dd400515 	stw	r21,20(sp)
 1046794:	dd000415 	stw	r20,16(sp)
 1046798:	3825883a 	mov	r18,r7
 104679c:	3027883a 	mov	r19,r6
 10467a0:	104a6e00 	call	104a6e0 <__divsi3>
 10467a4:	00c00044 	movi	r3,1
 10467a8:	000b883a 	mov	r5,zero
 10467ac:	1880030e 	bge	r3,r2,10467bc <__s2b+0x54>
 10467b0:	18c7883a 	add	r3,r3,r3
 10467b4:	29400044 	addi	r5,r5,1
 10467b8:	18bffd16 	blt	r3,r2,10467b0 <__alt_data_end+0xfffe67b0>
 10467bc:	8809883a 	mov	r4,r17
 10467c0:	10465840 	call	1046584 <_Balloc>
 10467c4:	d8c00717 	ldw	r3,28(sp)
 10467c8:	10c00515 	stw	r3,20(r2)
 10467cc:	00c00044 	movi	r3,1
 10467d0:	10c00415 	stw	r3,16(r2)
 10467d4:	00c00244 	movi	r3,9
 10467d8:	1cc0210e 	bge	r3,r19,1046860 <__s2b+0xf8>
 10467dc:	80eb883a 	add	r21,r16,r3
 10467e0:	a829883a 	mov	r20,r21
 10467e4:	84e1883a 	add	r16,r16,r19
 10467e8:	a1c00007 	ldb	r7,0(r20)
 10467ec:	8809883a 	mov	r4,r17
 10467f0:	a5000044 	addi	r20,r20,1
 10467f4:	100b883a 	mov	r5,r2
 10467f8:	01800284 	movi	r6,10
 10467fc:	39fff404 	addi	r7,r7,-48
 1046800:	10466540 	call	1046654 <__multadd>
 1046804:	a43ff81e 	bne	r20,r16,10467e8 <__alt_data_end+0xfffe67e8>
 1046808:	ace1883a 	add	r16,r21,r19
 104680c:	843ffe04 	addi	r16,r16,-8
 1046810:	9c800a0e 	bge	r19,r18,104683c <__s2b+0xd4>
 1046814:	94e5c83a 	sub	r18,r18,r19
 1046818:	84a5883a 	add	r18,r16,r18
 104681c:	81c00007 	ldb	r7,0(r16)
 1046820:	8809883a 	mov	r4,r17
 1046824:	84000044 	addi	r16,r16,1
 1046828:	100b883a 	mov	r5,r2
 104682c:	01800284 	movi	r6,10
 1046830:	39fff404 	addi	r7,r7,-48
 1046834:	10466540 	call	1046654 <__multadd>
 1046838:	84bff81e 	bne	r16,r18,104681c <__alt_data_end+0xfffe681c>
 104683c:	dfc00617 	ldw	ra,24(sp)
 1046840:	dd400517 	ldw	r21,20(sp)
 1046844:	dd000417 	ldw	r20,16(sp)
 1046848:	dcc00317 	ldw	r19,12(sp)
 104684c:	dc800217 	ldw	r18,8(sp)
 1046850:	dc400117 	ldw	r17,4(sp)
 1046854:	dc000017 	ldw	r16,0(sp)
 1046858:	dec00704 	addi	sp,sp,28
 104685c:	f800283a 	ret
 1046860:	84000284 	addi	r16,r16,10
 1046864:	1827883a 	mov	r19,r3
 1046868:	003fe906 	br	1046810 <__alt_data_end+0xfffe6810>

0104686c <__hi0bits>:
 104686c:	20bfffec 	andhi	r2,r4,65535
 1046870:	1000141e 	bne	r2,zero,10468c4 <__hi0bits+0x58>
 1046874:	2008943a 	slli	r4,r4,16
 1046878:	00800404 	movi	r2,16
 104687c:	20ffc02c 	andhi	r3,r4,65280
 1046880:	1800021e 	bne	r3,zero,104688c <__hi0bits+0x20>
 1046884:	2008923a 	slli	r4,r4,8
 1046888:	10800204 	addi	r2,r2,8
 104688c:	20fc002c 	andhi	r3,r4,61440
 1046890:	1800021e 	bne	r3,zero,104689c <__hi0bits+0x30>
 1046894:	2008913a 	slli	r4,r4,4
 1046898:	10800104 	addi	r2,r2,4
 104689c:	20f0002c 	andhi	r3,r4,49152
 10468a0:	1800031e 	bne	r3,zero,10468b0 <__hi0bits+0x44>
 10468a4:	2109883a 	add	r4,r4,r4
 10468a8:	10800084 	addi	r2,r2,2
 10468ac:	2109883a 	add	r4,r4,r4
 10468b0:	20000316 	blt	r4,zero,10468c0 <__hi0bits+0x54>
 10468b4:	2110002c 	andhi	r4,r4,16384
 10468b8:	2000041e 	bne	r4,zero,10468cc <__hi0bits+0x60>
 10468bc:	00800804 	movi	r2,32
 10468c0:	f800283a 	ret
 10468c4:	0005883a 	mov	r2,zero
 10468c8:	003fec06 	br	104687c <__alt_data_end+0xfffe687c>
 10468cc:	10800044 	addi	r2,r2,1
 10468d0:	f800283a 	ret

010468d4 <__lo0bits>:
 10468d4:	20c00017 	ldw	r3,0(r4)
 10468d8:	188001cc 	andi	r2,r3,7
 10468dc:	10000826 	beq	r2,zero,1046900 <__lo0bits+0x2c>
 10468e0:	1880004c 	andi	r2,r3,1
 10468e4:	1000211e 	bne	r2,zero,104696c <__lo0bits+0x98>
 10468e8:	1880008c 	andi	r2,r3,2
 10468ec:	1000211e 	bne	r2,zero,1046974 <__lo0bits+0xa0>
 10468f0:	1806d0ba 	srli	r3,r3,2
 10468f4:	00800084 	movi	r2,2
 10468f8:	20c00015 	stw	r3,0(r4)
 10468fc:	f800283a 	ret
 1046900:	18bfffcc 	andi	r2,r3,65535
 1046904:	10001326 	beq	r2,zero,1046954 <__lo0bits+0x80>
 1046908:	0005883a 	mov	r2,zero
 104690c:	19403fcc 	andi	r5,r3,255
 1046910:	2800021e 	bne	r5,zero,104691c <__lo0bits+0x48>
 1046914:	1806d23a 	srli	r3,r3,8
 1046918:	10800204 	addi	r2,r2,8
 104691c:	194003cc 	andi	r5,r3,15
 1046920:	2800021e 	bne	r5,zero,104692c <__lo0bits+0x58>
 1046924:	1806d13a 	srli	r3,r3,4
 1046928:	10800104 	addi	r2,r2,4
 104692c:	194000cc 	andi	r5,r3,3
 1046930:	2800021e 	bne	r5,zero,104693c <__lo0bits+0x68>
 1046934:	1806d0ba 	srli	r3,r3,2
 1046938:	10800084 	addi	r2,r2,2
 104693c:	1940004c 	andi	r5,r3,1
 1046940:	2800081e 	bne	r5,zero,1046964 <__lo0bits+0x90>
 1046944:	1806d07a 	srli	r3,r3,1
 1046948:	1800051e 	bne	r3,zero,1046960 <__lo0bits+0x8c>
 104694c:	00800804 	movi	r2,32
 1046950:	f800283a 	ret
 1046954:	1806d43a 	srli	r3,r3,16
 1046958:	00800404 	movi	r2,16
 104695c:	003feb06 	br	104690c <__alt_data_end+0xfffe690c>
 1046960:	10800044 	addi	r2,r2,1
 1046964:	20c00015 	stw	r3,0(r4)
 1046968:	f800283a 	ret
 104696c:	0005883a 	mov	r2,zero
 1046970:	f800283a 	ret
 1046974:	1806d07a 	srli	r3,r3,1
 1046978:	00800044 	movi	r2,1
 104697c:	20c00015 	stw	r3,0(r4)
 1046980:	f800283a 	ret

01046984 <__i2b>:
 1046984:	defffd04 	addi	sp,sp,-12
 1046988:	dc000015 	stw	r16,0(sp)
 104698c:	04000044 	movi	r16,1
 1046990:	dc400115 	stw	r17,4(sp)
 1046994:	2823883a 	mov	r17,r5
 1046998:	800b883a 	mov	r5,r16
 104699c:	dfc00215 	stw	ra,8(sp)
 10469a0:	10465840 	call	1046584 <_Balloc>
 10469a4:	14400515 	stw	r17,20(r2)
 10469a8:	14000415 	stw	r16,16(r2)
 10469ac:	dfc00217 	ldw	ra,8(sp)
 10469b0:	dc400117 	ldw	r17,4(sp)
 10469b4:	dc000017 	ldw	r16,0(sp)
 10469b8:	dec00304 	addi	sp,sp,12
 10469bc:	f800283a 	ret

010469c0 <__multiply>:
 10469c0:	defffa04 	addi	sp,sp,-24
 10469c4:	dcc00315 	stw	r19,12(sp)
 10469c8:	dc800215 	stw	r18,8(sp)
 10469cc:	2cc00417 	ldw	r19,16(r5)
 10469d0:	34800417 	ldw	r18,16(r6)
 10469d4:	dd000415 	stw	r20,16(sp)
 10469d8:	dc400115 	stw	r17,4(sp)
 10469dc:	dfc00515 	stw	ra,20(sp)
 10469e0:	dc000015 	stw	r16,0(sp)
 10469e4:	2829883a 	mov	r20,r5
 10469e8:	3023883a 	mov	r17,r6
 10469ec:	9c807016 	blt	r19,r18,1046bb0 <__multiply+0x1f0>
 10469f0:	9005883a 	mov	r2,r18
 10469f4:	9825883a 	mov	r18,r19
 10469f8:	1027883a 	mov	r19,r2
 10469fc:	a0800217 	ldw	r2,8(r20)
 1046a00:	94e1883a 	add	r16,r18,r19
 1046a04:	a1400117 	ldw	r5,4(r20)
 1046a08:	1400010e 	bge	r2,r16,1046a10 <__multiply+0x50>
 1046a0c:	29400044 	addi	r5,r5,1
 1046a10:	10465840 	call	1046584 <_Balloc>
 1046a14:	8417883a 	add	r11,r16,r16
 1046a18:	13000504 	addi	r12,r2,20
 1046a1c:	5ad7883a 	add	r11,r11,r11
 1046a20:	62d7883a 	add	r11,r12,r11
 1046a24:	6007883a 	mov	r3,r12
 1046a28:	62c0032e 	bgeu	r12,r11,1046a38 <__multiply+0x78>
 1046a2c:	18000015 	stw	zero,0(r3)
 1046a30:	18c00104 	addi	r3,r3,4
 1046a34:	1afffd36 	bltu	r3,r11,1046a2c <__alt_data_end+0xfffe6a2c>
 1046a38:	9ce7883a 	add	r19,r19,r19
 1046a3c:	94a5883a 	add	r18,r18,r18
 1046a40:	89800504 	addi	r6,r17,20
 1046a44:	9ce7883a 	add	r19,r19,r19
 1046a48:	a3800504 	addi	r14,r20,20
 1046a4c:	94a5883a 	add	r18,r18,r18
 1046a50:	34db883a 	add	r13,r6,r19
 1046a54:	7495883a 	add	r10,r14,r18
 1046a58:	3340422e 	bgeu	r6,r13,1046b64 <__multiply+0x1a4>
 1046a5c:	34400017 	ldw	r17,0(r6)
 1046a60:	8cbfffcc 	andi	r18,r17,65535
 1046a64:	90001b26 	beq	r18,zero,1046ad4 <__multiply+0x114>
 1046a68:	6013883a 	mov	r9,r12
 1046a6c:	7023883a 	mov	r17,r14
 1046a70:	0011883a 	mov	r8,zero
 1046a74:	88c00017 	ldw	r3,0(r17)
 1046a78:	4bc00017 	ldw	r15,0(r9)
 1046a7c:	8c400104 	addi	r17,r17,4
 1046a80:	19ffffcc 	andi	r7,r3,65535
 1046a84:	3c8f383a 	mul	r7,r7,r18
 1046a88:	1808d43a 	srli	r4,r3,16
 1046a8c:	797fffcc 	andi	r5,r15,65535
 1046a90:	29cb883a 	add	r5,r5,r7
 1046a94:	2a0b883a 	add	r5,r5,r8
 1046a98:	2489383a 	mul	r4,r4,r18
 1046a9c:	7806d43a 	srli	r3,r15,16
 1046aa0:	2810d43a 	srli	r8,r5,16
 1046aa4:	297fffcc 	andi	r5,r5,65535
 1046aa8:	1907883a 	add	r3,r3,r4
 1046aac:	1a07883a 	add	r3,r3,r8
 1046ab0:	1808943a 	slli	r4,r3,16
 1046ab4:	480f883a 	mov	r7,r9
 1046ab8:	1810d43a 	srli	r8,r3,16
 1046abc:	214ab03a 	or	r5,r4,r5
 1046ac0:	49400015 	stw	r5,0(r9)
 1046ac4:	4a400104 	addi	r9,r9,4
 1046ac8:	8abfea36 	bltu	r17,r10,1046a74 <__alt_data_end+0xfffe6a74>
 1046acc:	3a000115 	stw	r8,4(r7)
 1046ad0:	34400017 	ldw	r17,0(r6)
 1046ad4:	8822d43a 	srli	r17,r17,16
 1046ad8:	88001f26 	beq	r17,zero,1046b58 <__multiply+0x198>
 1046adc:	60c00017 	ldw	r3,0(r12)
 1046ae0:	7013883a 	mov	r9,r14
 1046ae4:	601f883a 	mov	r15,r12
 1046ae8:	1811883a 	mov	r8,r3
 1046aec:	6027883a 	mov	r19,r12
 1046af0:	000f883a 	mov	r7,zero
 1046af4:	00000106 	br	1046afc <__multiply+0x13c>
 1046af8:	9027883a 	mov	r19,r18
 1046afc:	4940000b 	ldhu	r5,0(r9)
 1046b00:	4010d43a 	srli	r8,r8,16
 1046b04:	193fffcc 	andi	r4,r3,65535
 1046b08:	2c4b383a 	mul	r5,r5,r17
 1046b0c:	7bc00104 	addi	r15,r15,4
 1046b10:	4a400104 	addi	r9,r9,4
 1046b14:	2a0b883a 	add	r5,r5,r8
 1046b18:	29cb883a 	add	r5,r5,r7
 1046b1c:	2806943a 	slli	r3,r5,16
 1046b20:	9c800104 	addi	r18,r19,4
 1046b24:	280ad43a 	srli	r5,r5,16
 1046b28:	1908b03a 	or	r4,r3,r4
 1046b2c:	793fff15 	stw	r4,-4(r15)
 1046b30:	48ffff17 	ldw	r3,-4(r9)
 1046b34:	92000017 	ldw	r8,0(r18)
 1046b38:	1806d43a 	srli	r3,r3,16
 1046b3c:	413fffcc 	andi	r4,r8,65535
 1046b40:	1c47383a 	mul	r3,r3,r17
 1046b44:	1907883a 	add	r3,r3,r4
 1046b48:	1947883a 	add	r3,r3,r5
 1046b4c:	180ed43a 	srli	r7,r3,16
 1046b50:	4abfe936 	bltu	r9,r10,1046af8 <__alt_data_end+0xfffe6af8>
 1046b54:	98c00115 	stw	r3,4(r19)
 1046b58:	31800104 	addi	r6,r6,4
 1046b5c:	63000104 	addi	r12,r12,4
 1046b60:	337fbe36 	bltu	r6,r13,1046a5c <__alt_data_end+0xfffe6a5c>
 1046b64:	0400090e 	bge	zero,r16,1046b8c <__multiply+0x1cc>
 1046b68:	58ffff17 	ldw	r3,-4(r11)
 1046b6c:	5affff04 	addi	r11,r11,-4
 1046b70:	18000326 	beq	r3,zero,1046b80 <__multiply+0x1c0>
 1046b74:	00000506 	br	1046b8c <__multiply+0x1cc>
 1046b78:	58c00017 	ldw	r3,0(r11)
 1046b7c:	1800031e 	bne	r3,zero,1046b8c <__multiply+0x1cc>
 1046b80:	843fffc4 	addi	r16,r16,-1
 1046b84:	5affff04 	addi	r11,r11,-4
 1046b88:	803ffb1e 	bne	r16,zero,1046b78 <__alt_data_end+0xfffe6b78>
 1046b8c:	14000415 	stw	r16,16(r2)
 1046b90:	dfc00517 	ldw	ra,20(sp)
 1046b94:	dd000417 	ldw	r20,16(sp)
 1046b98:	dcc00317 	ldw	r19,12(sp)
 1046b9c:	dc800217 	ldw	r18,8(sp)
 1046ba0:	dc400117 	ldw	r17,4(sp)
 1046ba4:	dc000017 	ldw	r16,0(sp)
 1046ba8:	dec00604 	addi	sp,sp,24
 1046bac:	f800283a 	ret
 1046bb0:	3029883a 	mov	r20,r6
 1046bb4:	2823883a 	mov	r17,r5
 1046bb8:	003f9006 	br	10469fc <__alt_data_end+0xfffe69fc>

01046bbc <__pow5mult>:
 1046bbc:	defffa04 	addi	sp,sp,-24
 1046bc0:	dcc00315 	stw	r19,12(sp)
 1046bc4:	dc800215 	stw	r18,8(sp)
 1046bc8:	dc000015 	stw	r16,0(sp)
 1046bcc:	dfc00515 	stw	ra,20(sp)
 1046bd0:	dd000415 	stw	r20,16(sp)
 1046bd4:	dc400115 	stw	r17,4(sp)
 1046bd8:	308000cc 	andi	r2,r6,3
 1046bdc:	3021883a 	mov	r16,r6
 1046be0:	2027883a 	mov	r19,r4
 1046be4:	2825883a 	mov	r18,r5
 1046be8:	10002e1e 	bne	r2,zero,1046ca4 <__pow5mult+0xe8>
 1046bec:	8021d0ba 	srai	r16,r16,2
 1046bf0:	80001a26 	beq	r16,zero,1046c5c <__pow5mult+0xa0>
 1046bf4:	9c401217 	ldw	r17,72(r19)
 1046bf8:	8800061e 	bne	r17,zero,1046c14 <__pow5mult+0x58>
 1046bfc:	00003406 	br	1046cd0 <__pow5mult+0x114>
 1046c00:	8021d07a 	srai	r16,r16,1
 1046c04:	80001526 	beq	r16,zero,1046c5c <__pow5mult+0xa0>
 1046c08:	88800017 	ldw	r2,0(r17)
 1046c0c:	10001c26 	beq	r2,zero,1046c80 <__pow5mult+0xc4>
 1046c10:	1023883a 	mov	r17,r2
 1046c14:	80c0004c 	andi	r3,r16,1
 1046c18:	183ff926 	beq	r3,zero,1046c00 <__alt_data_end+0xfffe6c00>
 1046c1c:	900b883a 	mov	r5,r18
 1046c20:	880d883a 	mov	r6,r17
 1046c24:	9809883a 	mov	r4,r19
 1046c28:	10469c00 	call	10469c0 <__multiply>
 1046c2c:	90001b26 	beq	r18,zero,1046c9c <__pow5mult+0xe0>
 1046c30:	91c00117 	ldw	r7,4(r18)
 1046c34:	98c01317 	ldw	r3,76(r19)
 1046c38:	8021d07a 	srai	r16,r16,1
 1046c3c:	39cf883a 	add	r7,r7,r7
 1046c40:	39cf883a 	add	r7,r7,r7
 1046c44:	19c7883a 	add	r3,r3,r7
 1046c48:	19000017 	ldw	r4,0(r3)
 1046c4c:	91000015 	stw	r4,0(r18)
 1046c50:	1c800015 	stw	r18,0(r3)
 1046c54:	1025883a 	mov	r18,r2
 1046c58:	803feb1e 	bne	r16,zero,1046c08 <__alt_data_end+0xfffe6c08>
 1046c5c:	9005883a 	mov	r2,r18
 1046c60:	dfc00517 	ldw	ra,20(sp)
 1046c64:	dd000417 	ldw	r20,16(sp)
 1046c68:	dcc00317 	ldw	r19,12(sp)
 1046c6c:	dc800217 	ldw	r18,8(sp)
 1046c70:	dc400117 	ldw	r17,4(sp)
 1046c74:	dc000017 	ldw	r16,0(sp)
 1046c78:	dec00604 	addi	sp,sp,24
 1046c7c:	f800283a 	ret
 1046c80:	9809883a 	mov	r4,r19
 1046c84:	880b883a 	mov	r5,r17
 1046c88:	880d883a 	mov	r6,r17
 1046c8c:	10469c00 	call	10469c0 <__multiply>
 1046c90:	88800015 	stw	r2,0(r17)
 1046c94:	10000015 	stw	zero,0(r2)
 1046c98:	003fdd06 	br	1046c10 <__alt_data_end+0xfffe6c10>
 1046c9c:	1025883a 	mov	r18,r2
 1046ca0:	003fd706 	br	1046c00 <__alt_data_end+0xfffe6c00>
 1046ca4:	10bfffc4 	addi	r2,r2,-1
 1046ca8:	1085883a 	add	r2,r2,r2
 1046cac:	00c04174 	movhi	r3,261
 1046cb0:	18fe4804 	addi	r3,r3,-1760
 1046cb4:	1085883a 	add	r2,r2,r2
 1046cb8:	1885883a 	add	r2,r3,r2
 1046cbc:	11800017 	ldw	r6,0(r2)
 1046cc0:	000f883a 	mov	r7,zero
 1046cc4:	10466540 	call	1046654 <__multadd>
 1046cc8:	1025883a 	mov	r18,r2
 1046ccc:	003fc706 	br	1046bec <__alt_data_end+0xfffe6bec>
 1046cd0:	05000044 	movi	r20,1
 1046cd4:	9809883a 	mov	r4,r19
 1046cd8:	a00b883a 	mov	r5,r20
 1046cdc:	10465840 	call	1046584 <_Balloc>
 1046ce0:	1023883a 	mov	r17,r2
 1046ce4:	00809c44 	movi	r2,625
 1046ce8:	88800515 	stw	r2,20(r17)
 1046cec:	8d000415 	stw	r20,16(r17)
 1046cf0:	9c401215 	stw	r17,72(r19)
 1046cf4:	88000015 	stw	zero,0(r17)
 1046cf8:	003fc606 	br	1046c14 <__alt_data_end+0xfffe6c14>

01046cfc <__lshift>:
 1046cfc:	defff904 	addi	sp,sp,-28
 1046d00:	dd000415 	stw	r20,16(sp)
 1046d04:	dcc00315 	stw	r19,12(sp)
 1046d08:	3029d17a 	srai	r20,r6,5
 1046d0c:	2cc00417 	ldw	r19,16(r5)
 1046d10:	28800217 	ldw	r2,8(r5)
 1046d14:	dd400515 	stw	r21,20(sp)
 1046d18:	a4e7883a 	add	r19,r20,r19
 1046d1c:	dc800215 	stw	r18,8(sp)
 1046d20:	dc400115 	stw	r17,4(sp)
 1046d24:	dc000015 	stw	r16,0(sp)
 1046d28:	dfc00615 	stw	ra,24(sp)
 1046d2c:	9c000044 	addi	r16,r19,1
 1046d30:	2823883a 	mov	r17,r5
 1046d34:	302b883a 	mov	r21,r6
 1046d38:	2025883a 	mov	r18,r4
 1046d3c:	29400117 	ldw	r5,4(r5)
 1046d40:	1400030e 	bge	r2,r16,1046d50 <__lshift+0x54>
 1046d44:	1085883a 	add	r2,r2,r2
 1046d48:	29400044 	addi	r5,r5,1
 1046d4c:	143ffd16 	blt	r2,r16,1046d44 <__alt_data_end+0xfffe6d44>
 1046d50:	9009883a 	mov	r4,r18
 1046d54:	10465840 	call	1046584 <_Balloc>
 1046d58:	11c00504 	addi	r7,r2,20
 1046d5c:	0500090e 	bge	zero,r20,1046d84 <__lshift+0x88>
 1046d60:	3811883a 	mov	r8,r7
 1046d64:	0007883a 	mov	r3,zero
 1046d68:	40000015 	stw	zero,0(r8)
 1046d6c:	18c00044 	addi	r3,r3,1
 1046d70:	42000104 	addi	r8,r8,4
 1046d74:	1d3ffc1e 	bne	r3,r20,1046d68 <__alt_data_end+0xfffe6d68>
 1046d78:	18c7883a 	add	r3,r3,r3
 1046d7c:	18c7883a 	add	r3,r3,r3
 1046d80:	38cf883a 	add	r7,r7,r3
 1046d84:	89000417 	ldw	r4,16(r17)
 1046d88:	88c00504 	addi	r3,r17,20
 1046d8c:	a98007cc 	andi	r6,r21,31
 1046d90:	2109883a 	add	r4,r4,r4
 1046d94:	2109883a 	add	r4,r4,r4
 1046d98:	1909883a 	add	r4,r3,r4
 1046d9c:	30002326 	beq	r6,zero,1046e2c <__lshift+0x130>
 1046da0:	01400804 	movi	r5,32
 1046da4:	298bc83a 	sub	r5,r5,r6
 1046da8:	0013883a 	mov	r9,zero
 1046dac:	1a000017 	ldw	r8,0(r3)
 1046db0:	3815883a 	mov	r10,r7
 1046db4:	39c00104 	addi	r7,r7,4
 1046db8:	4190983a 	sll	r8,r8,r6
 1046dbc:	18c00104 	addi	r3,r3,4
 1046dc0:	4a10b03a 	or	r8,r9,r8
 1046dc4:	3a3fff15 	stw	r8,-4(r7)
 1046dc8:	1a3fff17 	ldw	r8,-4(r3)
 1046dcc:	4152d83a 	srl	r9,r8,r5
 1046dd0:	193ff636 	bltu	r3,r4,1046dac <__alt_data_end+0xfffe6dac>
 1046dd4:	52400115 	stw	r9,4(r10)
 1046dd8:	48000126 	beq	r9,zero,1046de0 <__lshift+0xe4>
 1046ddc:	9c000084 	addi	r16,r19,2
 1046de0:	89000117 	ldw	r4,4(r17)
 1046de4:	90c01317 	ldw	r3,76(r18)
 1046de8:	843fffc4 	addi	r16,r16,-1
 1046dec:	2109883a 	add	r4,r4,r4
 1046df0:	2109883a 	add	r4,r4,r4
 1046df4:	1907883a 	add	r3,r3,r4
 1046df8:	19000017 	ldw	r4,0(r3)
 1046dfc:	14000415 	stw	r16,16(r2)
 1046e00:	89000015 	stw	r4,0(r17)
 1046e04:	1c400015 	stw	r17,0(r3)
 1046e08:	dfc00617 	ldw	ra,24(sp)
 1046e0c:	dd400517 	ldw	r21,20(sp)
 1046e10:	dd000417 	ldw	r20,16(sp)
 1046e14:	dcc00317 	ldw	r19,12(sp)
 1046e18:	dc800217 	ldw	r18,8(sp)
 1046e1c:	dc400117 	ldw	r17,4(sp)
 1046e20:	dc000017 	ldw	r16,0(sp)
 1046e24:	dec00704 	addi	sp,sp,28
 1046e28:	f800283a 	ret
 1046e2c:	19400017 	ldw	r5,0(r3)
 1046e30:	39c00104 	addi	r7,r7,4
 1046e34:	18c00104 	addi	r3,r3,4
 1046e38:	397fff15 	stw	r5,-4(r7)
 1046e3c:	193ffb36 	bltu	r3,r4,1046e2c <__alt_data_end+0xfffe6e2c>
 1046e40:	003fe706 	br	1046de0 <__alt_data_end+0xfffe6de0>

01046e44 <__mcmp>:
 1046e44:	20800417 	ldw	r2,16(r4)
 1046e48:	28c00417 	ldw	r3,16(r5)
 1046e4c:	10c5c83a 	sub	r2,r2,r3
 1046e50:	1000111e 	bne	r2,zero,1046e98 <__mcmp+0x54>
 1046e54:	18c7883a 	add	r3,r3,r3
 1046e58:	18c7883a 	add	r3,r3,r3
 1046e5c:	21000504 	addi	r4,r4,20
 1046e60:	29400504 	addi	r5,r5,20
 1046e64:	20c5883a 	add	r2,r4,r3
 1046e68:	28cb883a 	add	r5,r5,r3
 1046e6c:	00000106 	br	1046e74 <__mcmp+0x30>
 1046e70:	20800a2e 	bgeu	r4,r2,1046e9c <__mcmp+0x58>
 1046e74:	10bfff04 	addi	r2,r2,-4
 1046e78:	297fff04 	addi	r5,r5,-4
 1046e7c:	11800017 	ldw	r6,0(r2)
 1046e80:	28c00017 	ldw	r3,0(r5)
 1046e84:	30fffa26 	beq	r6,r3,1046e70 <__alt_data_end+0xfffe6e70>
 1046e88:	30c00236 	bltu	r6,r3,1046e94 <__mcmp+0x50>
 1046e8c:	00800044 	movi	r2,1
 1046e90:	f800283a 	ret
 1046e94:	00bfffc4 	movi	r2,-1
 1046e98:	f800283a 	ret
 1046e9c:	0005883a 	mov	r2,zero
 1046ea0:	f800283a 	ret

01046ea4 <__mdiff>:
 1046ea4:	defffb04 	addi	sp,sp,-20
 1046ea8:	dc000015 	stw	r16,0(sp)
 1046eac:	2821883a 	mov	r16,r5
 1046eb0:	dcc00315 	stw	r19,12(sp)
 1046eb4:	300b883a 	mov	r5,r6
 1046eb8:	2027883a 	mov	r19,r4
 1046ebc:	8009883a 	mov	r4,r16
 1046ec0:	dc800215 	stw	r18,8(sp)
 1046ec4:	dfc00415 	stw	ra,16(sp)
 1046ec8:	dc400115 	stw	r17,4(sp)
 1046ecc:	3025883a 	mov	r18,r6
 1046ed0:	1046e440 	call	1046e44 <__mcmp>
 1046ed4:	10005226 	beq	r2,zero,1047020 <__mdiff+0x17c>
 1046ed8:	10004c16 	blt	r2,zero,104700c <__mdiff+0x168>
 1046edc:	0023883a 	mov	r17,zero
 1046ee0:	81400117 	ldw	r5,4(r16)
 1046ee4:	9809883a 	mov	r4,r19
 1046ee8:	10465840 	call	1046584 <_Balloc>
 1046eec:	83400417 	ldw	r13,16(r16)
 1046ef0:	93800417 	ldw	r14,16(r18)
 1046ef4:	81000504 	addi	r4,r16,20
 1046ef8:	6b59883a 	add	r12,r13,r13
 1046efc:	739d883a 	add	r14,r14,r14
 1046f00:	6319883a 	add	r12,r12,r12
 1046f04:	91800504 	addi	r6,r18,20
 1046f08:	739d883a 	add	r14,r14,r14
 1046f0c:	14400315 	stw	r17,12(r2)
 1046f10:	2319883a 	add	r12,r4,r12
 1046f14:	339d883a 	add	r14,r6,r14
 1046f18:	12400504 	addi	r9,r2,20
 1046f1c:	0007883a 	mov	r3,zero
 1046f20:	22000017 	ldw	r8,0(r4)
 1046f24:	32800017 	ldw	r10,0(r6)
 1046f28:	4ac00104 	addi	r11,r9,4
 1046f2c:	41ffffcc 	andi	r7,r8,65535
 1046f30:	38c7883a 	add	r3,r7,r3
 1046f34:	51ffffcc 	andi	r7,r10,65535
 1046f38:	19cfc83a 	sub	r7,r3,r7
 1046f3c:	4010d43a 	srli	r8,r8,16
 1046f40:	5014d43a 	srli	r10,r10,16
 1046f44:	3807d43a 	srai	r3,r7,16
 1046f48:	39ffffcc 	andi	r7,r7,65535
 1046f4c:	4291c83a 	sub	r8,r8,r10
 1046f50:	40c7883a 	add	r3,r8,r3
 1046f54:	1810943a 	slli	r8,r3,16
 1046f58:	31800104 	addi	r6,r6,4
 1046f5c:	21000104 	addi	r4,r4,4
 1046f60:	41ceb03a 	or	r7,r8,r7
 1046f64:	49c00015 	stw	r7,0(r9)
 1046f68:	1807d43a 	srai	r3,r3,16
 1046f6c:	580b883a 	mov	r5,r11
 1046f70:	5813883a 	mov	r9,r11
 1046f74:	33bfea36 	bltu	r6,r14,1046f20 <__alt_data_end+0xfffe6f20>
 1046f78:	2011883a 	mov	r8,r4
 1046f7c:	2300152e 	bgeu	r4,r12,1046fd4 <__mdiff+0x130>
 1046f80:	21400017 	ldw	r5,0(r4)
 1046f84:	4a400104 	addi	r9,r9,4
 1046f88:	21000104 	addi	r4,r4,4
 1046f8c:	29ffffcc 	andi	r7,r5,65535
 1046f90:	38c7883a 	add	r3,r7,r3
 1046f94:	280ad43a 	srli	r5,r5,16
 1046f98:	180dd43a 	srai	r6,r3,16
 1046f9c:	19ffffcc 	andi	r7,r3,65535
 1046fa0:	3147883a 	add	r3,r6,r5
 1046fa4:	180a943a 	slli	r5,r3,16
 1046fa8:	1807d43a 	srai	r3,r3,16
 1046fac:	29ceb03a 	or	r7,r5,r7
 1046fb0:	49ffff15 	stw	r7,-4(r9)
 1046fb4:	233ff236 	bltu	r4,r12,1046f80 <__alt_data_end+0xfffe6f80>
 1046fb8:	0206303a 	nor	r3,zero,r8
 1046fbc:	1b07883a 	add	r3,r3,r12
 1046fc0:	1806d0ba 	srli	r3,r3,2
 1046fc4:	18c00044 	addi	r3,r3,1
 1046fc8:	18c7883a 	add	r3,r3,r3
 1046fcc:	18c7883a 	add	r3,r3,r3
 1046fd0:	58cb883a 	add	r5,r11,r3
 1046fd4:	28ffff04 	addi	r3,r5,-4
 1046fd8:	3800041e 	bne	r7,zero,1046fec <__mdiff+0x148>
 1046fdc:	18ffff04 	addi	r3,r3,-4
 1046fe0:	19000017 	ldw	r4,0(r3)
 1046fe4:	6b7fffc4 	addi	r13,r13,-1
 1046fe8:	203ffc26 	beq	r4,zero,1046fdc <__alt_data_end+0xfffe6fdc>
 1046fec:	13400415 	stw	r13,16(r2)
 1046ff0:	dfc00417 	ldw	ra,16(sp)
 1046ff4:	dcc00317 	ldw	r19,12(sp)
 1046ff8:	dc800217 	ldw	r18,8(sp)
 1046ffc:	dc400117 	ldw	r17,4(sp)
 1047000:	dc000017 	ldw	r16,0(sp)
 1047004:	dec00504 	addi	sp,sp,20
 1047008:	f800283a 	ret
 104700c:	8005883a 	mov	r2,r16
 1047010:	04400044 	movi	r17,1
 1047014:	9021883a 	mov	r16,r18
 1047018:	1025883a 	mov	r18,r2
 104701c:	003fb006 	br	1046ee0 <__alt_data_end+0xfffe6ee0>
 1047020:	9809883a 	mov	r4,r19
 1047024:	000b883a 	mov	r5,zero
 1047028:	10465840 	call	1046584 <_Balloc>
 104702c:	00c00044 	movi	r3,1
 1047030:	10c00415 	stw	r3,16(r2)
 1047034:	10000515 	stw	zero,20(r2)
 1047038:	003fed06 	br	1046ff0 <__alt_data_end+0xfffe6ff0>

0104703c <__ulp>:
 104703c:	295ffc2c 	andhi	r5,r5,32752
 1047040:	00bf3034 	movhi	r2,64704
 1047044:	2887883a 	add	r3,r5,r2
 1047048:	00c0020e 	bge	zero,r3,1047054 <__ulp+0x18>
 104704c:	0005883a 	mov	r2,zero
 1047050:	f800283a 	ret
 1047054:	00c7c83a 	sub	r3,zero,r3
 1047058:	180bd53a 	srai	r5,r3,20
 104705c:	008004c4 	movi	r2,19
 1047060:	11400a0e 	bge	r2,r5,104708c <__ulp+0x50>
 1047064:	00800c84 	movi	r2,50
 1047068:	0007883a 	mov	r3,zero
 104706c:	11400516 	blt	r2,r5,1047084 <__ulp+0x48>
 1047070:	00800cc4 	movi	r2,51
 1047074:	114bc83a 	sub	r5,r2,r5
 1047078:	00800044 	movi	r2,1
 104707c:	1144983a 	sll	r2,r2,r5
 1047080:	f800283a 	ret
 1047084:	00800044 	movi	r2,1
 1047088:	f800283a 	ret
 104708c:	00800234 	movhi	r2,8
 1047090:	1147d83a 	sra	r3,r2,r5
 1047094:	0005883a 	mov	r2,zero
 1047098:	f800283a 	ret

0104709c <__b2d>:
 104709c:	defffa04 	addi	sp,sp,-24
 10470a0:	dc000015 	stw	r16,0(sp)
 10470a4:	24000417 	ldw	r16,16(r4)
 10470a8:	dc400115 	stw	r17,4(sp)
 10470ac:	24400504 	addi	r17,r4,20
 10470b0:	8421883a 	add	r16,r16,r16
 10470b4:	8421883a 	add	r16,r16,r16
 10470b8:	8c21883a 	add	r16,r17,r16
 10470bc:	dc800215 	stw	r18,8(sp)
 10470c0:	84bfff17 	ldw	r18,-4(r16)
 10470c4:	dd000415 	stw	r20,16(sp)
 10470c8:	dcc00315 	stw	r19,12(sp)
 10470cc:	9009883a 	mov	r4,r18
 10470d0:	2829883a 	mov	r20,r5
 10470d4:	dfc00515 	stw	ra,20(sp)
 10470d8:	104686c0 	call	104686c <__hi0bits>
 10470dc:	00c00804 	movi	r3,32
 10470e0:	1887c83a 	sub	r3,r3,r2
 10470e4:	a0c00015 	stw	r3,0(r20)
 10470e8:	00c00284 	movi	r3,10
 10470ec:	84ffff04 	addi	r19,r16,-4
 10470f0:	18801216 	blt	r3,r2,104713c <__b2d+0xa0>
 10470f4:	014002c4 	movi	r5,11
 10470f8:	2889c83a 	sub	r4,r5,r2
 10470fc:	9106d83a 	srl	r3,r18,r4
 1047100:	18cffc34 	orhi	r3,r3,16368
 1047104:	8cc0282e 	bgeu	r17,r19,10471a8 <__b2d+0x10c>
 1047108:	817ffe17 	ldw	r5,-8(r16)
 104710c:	290ad83a 	srl	r5,r5,r4
 1047110:	10800544 	addi	r2,r2,21
 1047114:	9084983a 	sll	r2,r18,r2
 1047118:	2884b03a 	or	r2,r5,r2
 104711c:	dfc00517 	ldw	ra,20(sp)
 1047120:	dd000417 	ldw	r20,16(sp)
 1047124:	dcc00317 	ldw	r19,12(sp)
 1047128:	dc800217 	ldw	r18,8(sp)
 104712c:	dc400117 	ldw	r17,4(sp)
 1047130:	dc000017 	ldw	r16,0(sp)
 1047134:	dec00604 	addi	sp,sp,24
 1047138:	f800283a 	ret
 104713c:	113ffd44 	addi	r4,r2,-11
 1047140:	8cc00f2e 	bgeu	r17,r19,1047180 <__b2d+0xe4>
 1047144:	81bffe04 	addi	r6,r16,-8
 1047148:	817ffe17 	ldw	r5,-8(r16)
 104714c:	20001326 	beq	r4,zero,104719c <__b2d+0x100>
 1047150:	00c00ac4 	movi	r3,43
 1047154:	1885c83a 	sub	r2,r3,r2
 1047158:	2886d83a 	srl	r3,r5,r2
 104715c:	9124983a 	sll	r18,r18,r4
 1047160:	90e4b03a 	or	r18,r18,r3
 1047164:	90cffc34 	orhi	r3,r18,16368
 1047168:	8980112e 	bgeu	r17,r6,10471b0 <__b2d+0x114>
 104716c:	81bffd17 	ldw	r6,-12(r16)
 1047170:	308cd83a 	srl	r6,r6,r2
 1047174:	2904983a 	sll	r2,r5,r4
 1047178:	1184b03a 	or	r2,r2,r6
 104717c:	003fe706 	br	104711c <__alt_data_end+0xfffe711c>
 1047180:	20000526 	beq	r4,zero,1047198 <__b2d+0xfc>
 1047184:	9124983a 	sll	r18,r18,r4
 1047188:	000d883a 	mov	r6,zero
 104718c:	000b883a 	mov	r5,zero
 1047190:	90cffc34 	orhi	r3,r18,16368
 1047194:	003ff706 	br	1047174 <__alt_data_end+0xfffe7174>
 1047198:	000b883a 	mov	r5,zero
 104719c:	90cffc34 	orhi	r3,r18,16368
 10471a0:	2805883a 	mov	r2,r5
 10471a4:	003fdd06 	br	104711c <__alt_data_end+0xfffe711c>
 10471a8:	000b883a 	mov	r5,zero
 10471ac:	003fd806 	br	1047110 <__alt_data_end+0xfffe7110>
 10471b0:	000d883a 	mov	r6,zero
 10471b4:	003fef06 	br	1047174 <__alt_data_end+0xfffe7174>

010471b8 <__d2b>:
 10471b8:	defff704 	addi	sp,sp,-36
 10471bc:	dc000215 	stw	r16,8(sp)
 10471c0:	3021883a 	mov	r16,r6
 10471c4:	dc400315 	stw	r17,12(sp)
 10471c8:	8022907a 	slli	r17,r16,1
 10471cc:	dd400715 	stw	r21,28(sp)
 10471d0:	282b883a 	mov	r21,r5
 10471d4:	01400044 	movi	r5,1
 10471d8:	dd000615 	stw	r20,24(sp)
 10471dc:	dcc00515 	stw	r19,20(sp)
 10471e0:	dc800415 	stw	r18,16(sp)
 10471e4:	dfc00815 	stw	ra,32(sp)
 10471e8:	3829883a 	mov	r20,r7
 10471ec:	dc800917 	ldw	r18,36(sp)
 10471f0:	8822d57a 	srli	r17,r17,21
 10471f4:	10465840 	call	1046584 <_Balloc>
 10471f8:	1027883a 	mov	r19,r2
 10471fc:	00800434 	movhi	r2,16
 1047200:	10bfffc4 	addi	r2,r2,-1
 1047204:	808c703a 	and	r6,r16,r2
 1047208:	88000126 	beq	r17,zero,1047210 <__d2b+0x58>
 104720c:	31800434 	orhi	r6,r6,16
 1047210:	d9800015 	stw	r6,0(sp)
 1047214:	a8001f26 	beq	r21,zero,1047294 <__d2b+0xdc>
 1047218:	d9000104 	addi	r4,sp,4
 104721c:	dd400115 	stw	r21,4(sp)
 1047220:	10468d40 	call	10468d4 <__lo0bits>
 1047224:	d8c00017 	ldw	r3,0(sp)
 1047228:	1000291e 	bne	r2,zero,10472d0 <__d2b+0x118>
 104722c:	d9000117 	ldw	r4,4(sp)
 1047230:	99000515 	stw	r4,20(r19)
 1047234:	1820c03a 	cmpne	r16,r3,zero
 1047238:	84000044 	addi	r16,r16,1
 104723c:	98c00615 	stw	r3,24(r19)
 1047240:	9c000415 	stw	r16,16(r19)
 1047244:	88001b1e 	bne	r17,zero,10472b4 <__d2b+0xfc>
 1047248:	800690ba 	slli	r3,r16,2
 104724c:	10bef384 	addi	r2,r2,-1074
 1047250:	a0800015 	stw	r2,0(r20)
 1047254:	98c5883a 	add	r2,r19,r3
 1047258:	11000417 	ldw	r4,16(r2)
 104725c:	8020917a 	slli	r16,r16,5
 1047260:	104686c0 	call	104686c <__hi0bits>
 1047264:	8085c83a 	sub	r2,r16,r2
 1047268:	90800015 	stw	r2,0(r18)
 104726c:	9805883a 	mov	r2,r19
 1047270:	dfc00817 	ldw	ra,32(sp)
 1047274:	dd400717 	ldw	r21,28(sp)
 1047278:	dd000617 	ldw	r20,24(sp)
 104727c:	dcc00517 	ldw	r19,20(sp)
 1047280:	dc800417 	ldw	r18,16(sp)
 1047284:	dc400317 	ldw	r17,12(sp)
 1047288:	dc000217 	ldw	r16,8(sp)
 104728c:	dec00904 	addi	sp,sp,36
 1047290:	f800283a 	ret
 1047294:	d809883a 	mov	r4,sp
 1047298:	10468d40 	call	10468d4 <__lo0bits>
 104729c:	d8c00017 	ldw	r3,0(sp)
 10472a0:	04000044 	movi	r16,1
 10472a4:	9c000415 	stw	r16,16(r19)
 10472a8:	98c00515 	stw	r3,20(r19)
 10472ac:	10800804 	addi	r2,r2,32
 10472b0:	883fe526 	beq	r17,zero,1047248 <__alt_data_end+0xfffe7248>
 10472b4:	8c7ef344 	addi	r17,r17,-1075
 10472b8:	88a3883a 	add	r17,r17,r2
 10472bc:	00c00d44 	movi	r3,53
 10472c0:	a4400015 	stw	r17,0(r20)
 10472c4:	1885c83a 	sub	r2,r3,r2
 10472c8:	90800015 	stw	r2,0(r18)
 10472cc:	003fe706 	br	104726c <__alt_data_end+0xfffe726c>
 10472d0:	01000804 	movi	r4,32
 10472d4:	2089c83a 	sub	r4,r4,r2
 10472d8:	1908983a 	sll	r4,r3,r4
 10472dc:	d9400117 	ldw	r5,4(sp)
 10472e0:	1886d83a 	srl	r3,r3,r2
 10472e4:	2148b03a 	or	r4,r4,r5
 10472e8:	99000515 	stw	r4,20(r19)
 10472ec:	d8c00015 	stw	r3,0(sp)
 10472f0:	003fd006 	br	1047234 <__alt_data_end+0xfffe7234>

010472f4 <__ratio>:
 10472f4:	defff904 	addi	sp,sp,-28
 10472f8:	dc400315 	stw	r17,12(sp)
 10472fc:	2823883a 	mov	r17,r5
 1047300:	d9400104 	addi	r5,sp,4
 1047304:	dfc00615 	stw	ra,24(sp)
 1047308:	dcc00515 	stw	r19,20(sp)
 104730c:	dc800415 	stw	r18,16(sp)
 1047310:	2027883a 	mov	r19,r4
 1047314:	dc000215 	stw	r16,8(sp)
 1047318:	104709c0 	call	104709c <__b2d>
 104731c:	8809883a 	mov	r4,r17
 1047320:	d80b883a 	mov	r5,sp
 1047324:	1025883a 	mov	r18,r2
 1047328:	1821883a 	mov	r16,r3
 104732c:	104709c0 	call	104709c <__b2d>
 1047330:	8a400417 	ldw	r9,16(r17)
 1047334:	9a000417 	ldw	r8,16(r19)
 1047338:	100d883a 	mov	r6,r2
 104733c:	d8800017 	ldw	r2,0(sp)
 1047340:	4251c83a 	sub	r8,r8,r9
 1047344:	4012917a 	slli	r9,r8,5
 1047348:	da000117 	ldw	r8,4(sp)
 104734c:	4091c83a 	sub	r8,r8,r2
 1047350:	4251883a 	add	r8,r8,r9
 1047354:	02000d0e 	bge	zero,r8,104738c <__ratio+0x98>
 1047358:	4010953a 	slli	r8,r8,20
 104735c:	4421883a 	add	r16,r8,r16
 1047360:	9009883a 	mov	r4,r18
 1047364:	800b883a 	mov	r5,r16
 1047368:	180f883a 	mov	r7,r3
 104736c:	104b03c0 	call	104b03c <__divdf3>
 1047370:	dfc00617 	ldw	ra,24(sp)
 1047374:	dcc00517 	ldw	r19,20(sp)
 1047378:	dc800417 	ldw	r18,16(sp)
 104737c:	dc400317 	ldw	r17,12(sp)
 1047380:	dc000217 	ldw	r16,8(sp)
 1047384:	dec00704 	addi	sp,sp,28
 1047388:	f800283a 	ret
 104738c:	4010953a 	slli	r8,r8,20
 1047390:	1a07c83a 	sub	r3,r3,r8
 1047394:	003ff206 	br	1047360 <__alt_data_end+0xfffe7360>

01047398 <_mprec_log10>:
 1047398:	defffe04 	addi	sp,sp,-8
 104739c:	dc000015 	stw	r16,0(sp)
 10473a0:	dfc00115 	stw	ra,4(sp)
 10473a4:	008005c4 	movi	r2,23
 10473a8:	2021883a 	mov	r16,r4
 10473ac:	11000d0e 	bge	r2,r4,10473e4 <_mprec_log10+0x4c>
 10473b0:	0005883a 	mov	r2,zero
 10473b4:	00cffc34 	movhi	r3,16368
 10473b8:	843fffc4 	addi	r16,r16,-1
 10473bc:	1009883a 	mov	r4,r2
 10473c0:	180b883a 	mov	r5,r3
 10473c4:	000d883a 	mov	r6,zero
 10473c8:	01d00934 	movhi	r7,16420
 10473cc:	104bb4c0 	call	104bb4c <__muldf3>
 10473d0:	803ff91e 	bne	r16,zero,10473b8 <__alt_data_end+0xfffe73b8>
 10473d4:	dfc00117 	ldw	ra,4(sp)
 10473d8:	dc000017 	ldw	r16,0(sp)
 10473dc:	dec00204 	addi	sp,sp,8
 10473e0:	f800283a 	ret
 10473e4:	202090fa 	slli	r16,r4,3
 10473e8:	00804174 	movhi	r2,261
 10473ec:	10be5f04 	addi	r2,r2,-1668
 10473f0:	1421883a 	add	r16,r2,r16
 10473f4:	80800017 	ldw	r2,0(r16)
 10473f8:	80c00117 	ldw	r3,4(r16)
 10473fc:	dfc00117 	ldw	ra,4(sp)
 1047400:	dc000017 	ldw	r16,0(sp)
 1047404:	dec00204 	addi	sp,sp,8
 1047408:	f800283a 	ret

0104740c <__copybits>:
 104740c:	297fffc4 	addi	r5,r5,-1
 1047410:	280fd17a 	srai	r7,r5,5
 1047414:	30c00417 	ldw	r3,16(r6)
 1047418:	30800504 	addi	r2,r6,20
 104741c:	39c00044 	addi	r7,r7,1
 1047420:	18c7883a 	add	r3,r3,r3
 1047424:	39cf883a 	add	r7,r7,r7
 1047428:	18c7883a 	add	r3,r3,r3
 104742c:	39cf883a 	add	r7,r7,r7
 1047430:	10c7883a 	add	r3,r2,r3
 1047434:	21cf883a 	add	r7,r4,r7
 1047438:	10c00d2e 	bgeu	r2,r3,1047470 <__copybits+0x64>
 104743c:	200b883a 	mov	r5,r4
 1047440:	12000017 	ldw	r8,0(r2)
 1047444:	29400104 	addi	r5,r5,4
 1047448:	10800104 	addi	r2,r2,4
 104744c:	2a3fff15 	stw	r8,-4(r5)
 1047450:	10fffb36 	bltu	r2,r3,1047440 <__alt_data_end+0xfffe7440>
 1047454:	1985c83a 	sub	r2,r3,r6
 1047458:	10bffac4 	addi	r2,r2,-21
 104745c:	1004d0ba 	srli	r2,r2,2
 1047460:	10800044 	addi	r2,r2,1
 1047464:	1085883a 	add	r2,r2,r2
 1047468:	1085883a 	add	r2,r2,r2
 104746c:	2089883a 	add	r4,r4,r2
 1047470:	21c0032e 	bgeu	r4,r7,1047480 <__copybits+0x74>
 1047474:	20000015 	stw	zero,0(r4)
 1047478:	21000104 	addi	r4,r4,4
 104747c:	21fffd36 	bltu	r4,r7,1047474 <__alt_data_end+0xfffe7474>
 1047480:	f800283a 	ret

01047484 <__any_on>:
 1047484:	20c00417 	ldw	r3,16(r4)
 1047488:	2805d17a 	srai	r2,r5,5
 104748c:	21000504 	addi	r4,r4,20
 1047490:	18800d0e 	bge	r3,r2,10474c8 <__any_on+0x44>
 1047494:	18c7883a 	add	r3,r3,r3
 1047498:	18c7883a 	add	r3,r3,r3
 104749c:	20c7883a 	add	r3,r4,r3
 10474a0:	20c0192e 	bgeu	r4,r3,1047508 <__any_on+0x84>
 10474a4:	18bfff17 	ldw	r2,-4(r3)
 10474a8:	18ffff04 	addi	r3,r3,-4
 10474ac:	1000041e 	bne	r2,zero,10474c0 <__any_on+0x3c>
 10474b0:	20c0142e 	bgeu	r4,r3,1047504 <__any_on+0x80>
 10474b4:	18ffff04 	addi	r3,r3,-4
 10474b8:	19400017 	ldw	r5,0(r3)
 10474bc:	283ffc26 	beq	r5,zero,10474b0 <__alt_data_end+0xfffe74b0>
 10474c0:	00800044 	movi	r2,1
 10474c4:	f800283a 	ret
 10474c8:	10c00a0e 	bge	r2,r3,10474f4 <__any_on+0x70>
 10474cc:	1085883a 	add	r2,r2,r2
 10474d0:	1085883a 	add	r2,r2,r2
 10474d4:	294007cc 	andi	r5,r5,31
 10474d8:	2087883a 	add	r3,r4,r2
 10474dc:	283ff026 	beq	r5,zero,10474a0 <__alt_data_end+0xfffe74a0>
 10474e0:	19800017 	ldw	r6,0(r3)
 10474e4:	3144d83a 	srl	r2,r6,r5
 10474e8:	114a983a 	sll	r5,r2,r5
 10474ec:	29bff41e 	bne	r5,r6,10474c0 <__alt_data_end+0xfffe74c0>
 10474f0:	003feb06 	br	10474a0 <__alt_data_end+0xfffe74a0>
 10474f4:	1085883a 	add	r2,r2,r2
 10474f8:	1085883a 	add	r2,r2,r2
 10474fc:	2087883a 	add	r3,r4,r2
 1047500:	003fe706 	br	10474a0 <__alt_data_end+0xfffe74a0>
 1047504:	f800283a 	ret
 1047508:	0005883a 	mov	r2,zero
 104750c:	f800283a 	ret

01047510 <_realloc_r>:
 1047510:	defff604 	addi	sp,sp,-40
 1047514:	dcc00315 	stw	r19,12(sp)
 1047518:	dc400115 	stw	r17,4(sp)
 104751c:	dfc00915 	stw	ra,36(sp)
 1047520:	df000815 	stw	fp,32(sp)
 1047524:	ddc00715 	stw	r23,28(sp)
 1047528:	dd800615 	stw	r22,24(sp)
 104752c:	dd400515 	stw	r21,20(sp)
 1047530:	dd000415 	stw	r20,16(sp)
 1047534:	dc800215 	stw	r18,8(sp)
 1047538:	dc000015 	stw	r16,0(sp)
 104753c:	2827883a 	mov	r19,r5
 1047540:	3023883a 	mov	r17,r6
 1047544:	2800bf26 	beq	r5,zero,1047844 <_realloc_r+0x334>
 1047548:	2025883a 	mov	r18,r4
 104754c:	104d2fc0 	call	104d2fc <__malloc_lock>
 1047550:	98ffff17 	ldw	r3,-4(r19)
 1047554:	01bfff04 	movi	r6,-4
 1047558:	890002c4 	addi	r4,r17,11
 104755c:	01c00584 	movi	r7,22
 1047560:	9d7ffe04 	addi	r21,r19,-8
 1047564:	19a0703a 	and	r16,r3,r6
 1047568:	39003f2e 	bgeu	r7,r4,1047668 <_realloc_r+0x158>
 104756c:	053ffe04 	movi	r20,-8
 1047570:	2528703a 	and	r20,r4,r20
 1047574:	a00f883a 	mov	r7,r20
 1047578:	a0008216 	blt	r20,zero,1047784 <_realloc_r+0x274>
 104757c:	a4408136 	bltu	r20,r17,1047784 <_realloc_r+0x274>
 1047580:	81c03c0e 	bge	r16,r7,1047674 <_realloc_r+0x164>
 1047584:	07004174 	movhi	fp,261
 1047588:	e73fcb04 	addi	fp,fp,-212
 104758c:	e1000217 	ldw	r4,8(fp)
 1047590:	ac05883a 	add	r2,r21,r16
 1047594:	2080bf26 	beq	r4,r2,1047894 <_realloc_r+0x384>
 1047598:	11000117 	ldw	r4,4(r2)
 104759c:	023fff84 	movi	r8,-2
 10475a0:	2210703a 	and	r8,r4,r8
 10475a4:	1211883a 	add	r8,r2,r8
 10475a8:	41400117 	ldw	r5,4(r8)
 10475ac:	2940004c 	andi	r5,r5,1
 10475b0:	28004a1e 	bne	r5,zero,10476dc <_realloc_r+0x1cc>
 10475b4:	017fff04 	movi	r5,-4
 10475b8:	2148703a 	and	r4,r4,r5
 10475bc:	2409883a 	add	r4,r4,r16
 10475c0:	21c0ad0e 	bge	r4,r7,1047878 <_realloc_r+0x368>
 10475c4:	18c0004c 	andi	r3,r3,1
 10475c8:	18007f1e 	bne	r3,zero,10477c8 <_realloc_r+0x2b8>
 10475cc:	9dfffe17 	ldw	r23,-8(r19)
 10475d0:	adefc83a 	sub	r23,r21,r23
 10475d4:	bd800117 	ldw	r22,4(r23)
 10475d8:	b14a703a 	and	r5,r22,r5
 10475dc:	216d883a 	add	r22,r4,r5
 10475e0:	b1c04516 	blt	r22,r7,10476f8 <_realloc_r+0x1e8>
 10475e4:	10c00317 	ldw	r3,12(r2)
 10475e8:	10800217 	ldw	r2,8(r2)
 10475ec:	81bfff04 	addi	r6,r16,-4
 10475f0:	bc400204 	addi	r17,r23,8
 10475f4:	10c00315 	stw	r3,12(r2)
 10475f8:	18800215 	stw	r2,8(r3)
 10475fc:	b9400217 	ldw	r5,8(r23)
 1047600:	b8c00317 	ldw	r3,12(r23)
 1047604:	00800904 	movi	r2,36
 1047608:	28c00315 	stw	r3,12(r5)
 104760c:	19400215 	stw	r5,8(r3)
 1047610:	1180ef36 	bltu	r2,r6,10479d0 <_realloc_r+0x4c0>
 1047614:	008004c4 	movi	r2,19
 1047618:	1180da2e 	bgeu	r2,r6,1047984 <_realloc_r+0x474>
 104761c:	98800017 	ldw	r2,0(r19)
 1047620:	b8800215 	stw	r2,8(r23)
 1047624:	98800117 	ldw	r2,4(r19)
 1047628:	b8800315 	stw	r2,12(r23)
 104762c:	008006c4 	movi	r2,27
 1047630:	1180fc2e 	bgeu	r2,r6,1047a24 <_realloc_r+0x514>
 1047634:	98800217 	ldw	r2,8(r19)
 1047638:	b8800415 	stw	r2,16(r23)
 104763c:	98800317 	ldw	r2,12(r19)
 1047640:	b8800515 	stw	r2,20(r23)
 1047644:	00800904 	movi	r2,36
 1047648:	3080421e 	bne	r6,r2,1047754 <_realloc_r+0x244>
 104764c:	98800417 	ldw	r2,16(r19)
 1047650:	9cc00604 	addi	r19,r19,24
 1047654:	b8c00804 	addi	r3,r23,32
 1047658:	b8800615 	stw	r2,24(r23)
 104765c:	98bfff17 	ldw	r2,-4(r19)
 1047660:	b8800715 	stw	r2,28(r23)
 1047664:	00003d06 	br	104775c <_realloc_r+0x24c>
 1047668:	01c00404 	movi	r7,16
 104766c:	3829883a 	mov	r20,r7
 1047670:	003fc206 	br	104757c <__alt_data_end+0xfffe757c>
 1047674:	9823883a 	mov	r17,r19
 1047678:	850fc83a 	sub	r7,r16,r20
 104767c:	008003c4 	movi	r2,15
 1047680:	18c0004c 	andi	r3,r3,1
 1047684:	11c04336 	bltu	r2,r7,1047794 <_realloc_r+0x284>
 1047688:	1c06b03a 	or	r3,r3,r16
 104768c:	a8c00115 	stw	r3,4(r21)
 1047690:	ac21883a 	add	r16,r21,r16
 1047694:	80c00117 	ldw	r3,4(r16)
 1047698:	18c00054 	ori	r3,r3,1
 104769c:	80c00115 	stw	r3,4(r16)
 10476a0:	9009883a 	mov	r4,r18
 10476a4:	104d31c0 	call	104d31c <__malloc_unlock>
 10476a8:	8805883a 	mov	r2,r17
 10476ac:	dfc00917 	ldw	ra,36(sp)
 10476b0:	df000817 	ldw	fp,32(sp)
 10476b4:	ddc00717 	ldw	r23,28(sp)
 10476b8:	dd800617 	ldw	r22,24(sp)
 10476bc:	dd400517 	ldw	r21,20(sp)
 10476c0:	dd000417 	ldw	r20,16(sp)
 10476c4:	dcc00317 	ldw	r19,12(sp)
 10476c8:	dc800217 	ldw	r18,8(sp)
 10476cc:	dc400117 	ldw	r17,4(sp)
 10476d0:	dc000017 	ldw	r16,0(sp)
 10476d4:	dec00a04 	addi	sp,sp,40
 10476d8:	f800283a 	ret
 10476dc:	18c0004c 	andi	r3,r3,1
 10476e0:	1800391e 	bne	r3,zero,10477c8 <_realloc_r+0x2b8>
 10476e4:	9dfffe17 	ldw	r23,-8(r19)
 10476e8:	00bfff04 	movi	r2,-4
 10476ec:	adefc83a 	sub	r23,r21,r23
 10476f0:	b9400117 	ldw	r5,4(r23)
 10476f4:	288a703a 	and	r5,r5,r2
 10476f8:	2c2d883a 	add	r22,r5,r16
 10476fc:	b1c03216 	blt	r22,r7,10477c8 <_realloc_r+0x2b8>
 1047700:	b8800317 	ldw	r2,12(r23)
 1047704:	b8c00217 	ldw	r3,8(r23)
 1047708:	81bfff04 	addi	r6,r16,-4
 104770c:	01000904 	movi	r4,36
 1047710:	18800315 	stw	r2,12(r3)
 1047714:	10c00215 	stw	r3,8(r2)
 1047718:	bc400204 	addi	r17,r23,8
 104771c:	2180ac36 	bltu	r4,r6,10479d0 <_realloc_r+0x4c0>
 1047720:	008004c4 	movi	r2,19
 1047724:	1180972e 	bgeu	r2,r6,1047984 <_realloc_r+0x474>
 1047728:	98800017 	ldw	r2,0(r19)
 104772c:	b8800215 	stw	r2,8(r23)
 1047730:	98800117 	ldw	r2,4(r19)
 1047734:	b8800315 	stw	r2,12(r23)
 1047738:	008006c4 	movi	r2,27
 104773c:	1180b92e 	bgeu	r2,r6,1047a24 <_realloc_r+0x514>
 1047740:	98800217 	ldw	r2,8(r19)
 1047744:	b8800415 	stw	r2,16(r23)
 1047748:	98800317 	ldw	r2,12(r19)
 104774c:	b8800515 	stw	r2,20(r23)
 1047750:	313fbe26 	beq	r6,r4,104764c <__alt_data_end+0xfffe764c>
 1047754:	b8c00604 	addi	r3,r23,24
 1047758:	9cc00404 	addi	r19,r19,16
 104775c:	98800017 	ldw	r2,0(r19)
 1047760:	b021883a 	mov	r16,r22
 1047764:	b82b883a 	mov	r21,r23
 1047768:	18800015 	stw	r2,0(r3)
 104776c:	98800117 	ldw	r2,4(r19)
 1047770:	18800115 	stw	r2,4(r3)
 1047774:	98800217 	ldw	r2,8(r19)
 1047778:	18800215 	stw	r2,8(r3)
 104777c:	b8c00117 	ldw	r3,4(r23)
 1047780:	003fbd06 	br	1047678 <__alt_data_end+0xfffe7678>
 1047784:	00800304 	movi	r2,12
 1047788:	90800015 	stw	r2,0(r18)
 104778c:	0005883a 	mov	r2,zero
 1047790:	003fc606 	br	10476ac <__alt_data_end+0xfffe76ac>
 1047794:	1d06b03a 	or	r3,r3,r20
 1047798:	ad0b883a 	add	r5,r21,r20
 104779c:	a8c00115 	stw	r3,4(r21)
 10477a0:	38800054 	ori	r2,r7,1
 10477a4:	28800115 	stw	r2,4(r5)
 10477a8:	29cf883a 	add	r7,r5,r7
 10477ac:	38800117 	ldw	r2,4(r7)
 10477b0:	9009883a 	mov	r4,r18
 10477b4:	29400204 	addi	r5,r5,8
 10477b8:	10800054 	ori	r2,r2,1
 10477bc:	38800115 	stw	r2,4(r7)
 10477c0:	1044da00 	call	1044da0 <_free_r>
 10477c4:	003fb606 	br	10476a0 <__alt_data_end+0xfffe76a0>
 10477c8:	880b883a 	mov	r5,r17
 10477cc:	9009883a 	mov	r4,r18
 10477d0:	104593c0 	call	104593c <_malloc_r>
 10477d4:	1023883a 	mov	r17,r2
 10477d8:	1000aa26 	beq	r2,zero,1047a84 <_realloc_r+0x574>
 10477dc:	98ffff17 	ldw	r3,-4(r19)
 10477e0:	113ffe04 	addi	r4,r2,-8
 10477e4:	00bfff84 	movi	r2,-2
 10477e8:	1884703a 	and	r2,r3,r2
 10477ec:	a885883a 	add	r2,r21,r2
 10477f0:	20808626 	beq	r4,r2,1047a0c <_realloc_r+0x4fc>
 10477f4:	81bfff04 	addi	r6,r16,-4
 10477f8:	00800904 	movi	r2,36
 10477fc:	11807036 	bltu	r2,r6,10479c0 <_realloc_r+0x4b0>
 1047800:	00c004c4 	movi	r3,19
 1047804:	19805636 	bltu	r3,r6,1047960 <_realloc_r+0x450>
 1047808:	8805883a 	mov	r2,r17
 104780c:	9807883a 	mov	r3,r19
 1047810:	19000017 	ldw	r4,0(r3)
 1047814:	11000015 	stw	r4,0(r2)
 1047818:	19000117 	ldw	r4,4(r3)
 104781c:	11000115 	stw	r4,4(r2)
 1047820:	18c00217 	ldw	r3,8(r3)
 1047824:	10c00215 	stw	r3,8(r2)
 1047828:	980b883a 	mov	r5,r19
 104782c:	9009883a 	mov	r4,r18
 1047830:	1044da00 	call	1044da0 <_free_r>
 1047834:	9009883a 	mov	r4,r18
 1047838:	104d31c0 	call	104d31c <__malloc_unlock>
 104783c:	8805883a 	mov	r2,r17
 1047840:	003f9a06 	br	10476ac <__alt_data_end+0xfffe76ac>
 1047844:	300b883a 	mov	r5,r6
 1047848:	dfc00917 	ldw	ra,36(sp)
 104784c:	df000817 	ldw	fp,32(sp)
 1047850:	ddc00717 	ldw	r23,28(sp)
 1047854:	dd800617 	ldw	r22,24(sp)
 1047858:	dd400517 	ldw	r21,20(sp)
 104785c:	dd000417 	ldw	r20,16(sp)
 1047860:	dcc00317 	ldw	r19,12(sp)
 1047864:	dc800217 	ldw	r18,8(sp)
 1047868:	dc400117 	ldw	r17,4(sp)
 104786c:	dc000017 	ldw	r16,0(sp)
 1047870:	dec00a04 	addi	sp,sp,40
 1047874:	104593c1 	jmpi	104593c <_malloc_r>
 1047878:	11400317 	ldw	r5,12(r2)
 104787c:	10800217 	ldw	r2,8(r2)
 1047880:	9823883a 	mov	r17,r19
 1047884:	2021883a 	mov	r16,r4
 1047888:	11400315 	stw	r5,12(r2)
 104788c:	28800215 	stw	r2,8(r5)
 1047890:	003f7906 	br	1047678 <__alt_data_end+0xfffe7678>
 1047894:	21000117 	ldw	r4,4(r4)
 1047898:	00bfff04 	movi	r2,-4
 104789c:	a1800404 	addi	r6,r20,16
 10478a0:	2088703a 	and	r4,r4,r2
 10478a4:	2409883a 	add	r4,r4,r16
 10478a8:	2180380e 	bge	r4,r6,104798c <_realloc_r+0x47c>
 10478ac:	18c0004c 	andi	r3,r3,1
 10478b0:	183fc51e 	bne	r3,zero,10477c8 <__alt_data_end+0xfffe77c8>
 10478b4:	9dfffe17 	ldw	r23,-8(r19)
 10478b8:	adefc83a 	sub	r23,r21,r23
 10478bc:	b9400117 	ldw	r5,4(r23)
 10478c0:	288a703a 	and	r5,r5,r2
 10478c4:	216d883a 	add	r22,r4,r5
 10478c8:	b1bf8b16 	blt	r22,r6,10476f8 <__alt_data_end+0xfffe76f8>
 10478cc:	b8800317 	ldw	r2,12(r23)
 10478d0:	b8c00217 	ldw	r3,8(r23)
 10478d4:	81bfff04 	addi	r6,r16,-4
 10478d8:	01000904 	movi	r4,36
 10478dc:	18800315 	stw	r2,12(r3)
 10478e0:	10c00215 	stw	r3,8(r2)
 10478e4:	bc400204 	addi	r17,r23,8
 10478e8:	21805a36 	bltu	r4,r6,1047a54 <_realloc_r+0x544>
 10478ec:	008004c4 	movi	r2,19
 10478f0:	1180562e 	bgeu	r2,r6,1047a4c <_realloc_r+0x53c>
 10478f4:	98800017 	ldw	r2,0(r19)
 10478f8:	b8800215 	stw	r2,8(r23)
 10478fc:	98800117 	ldw	r2,4(r19)
 1047900:	b8800315 	stw	r2,12(r23)
 1047904:	008006c4 	movi	r2,27
 1047908:	11805636 	bltu	r2,r6,1047a64 <_realloc_r+0x554>
 104790c:	b8800404 	addi	r2,r23,16
 1047910:	9cc00204 	addi	r19,r19,8
 1047914:	98c00017 	ldw	r3,0(r19)
 1047918:	10c00015 	stw	r3,0(r2)
 104791c:	98c00117 	ldw	r3,4(r19)
 1047920:	10c00115 	stw	r3,4(r2)
 1047924:	98c00217 	ldw	r3,8(r19)
 1047928:	10c00215 	stw	r3,8(r2)
 104792c:	bd07883a 	add	r3,r23,r20
 1047930:	b505c83a 	sub	r2,r22,r20
 1047934:	e0c00215 	stw	r3,8(fp)
 1047938:	10800054 	ori	r2,r2,1
 104793c:	18800115 	stw	r2,4(r3)
 1047940:	b8800117 	ldw	r2,4(r23)
 1047944:	9009883a 	mov	r4,r18
 1047948:	1080004c 	andi	r2,r2,1
 104794c:	a0a8b03a 	or	r20,r20,r2
 1047950:	bd000115 	stw	r20,4(r23)
 1047954:	104d31c0 	call	104d31c <__malloc_unlock>
 1047958:	8805883a 	mov	r2,r17
 104795c:	003f5306 	br	10476ac <__alt_data_end+0xfffe76ac>
 1047960:	98c00017 	ldw	r3,0(r19)
 1047964:	88c00015 	stw	r3,0(r17)
 1047968:	98c00117 	ldw	r3,4(r19)
 104796c:	88c00115 	stw	r3,4(r17)
 1047970:	00c006c4 	movi	r3,27
 1047974:	19801d36 	bltu	r3,r6,10479ec <_realloc_r+0x4dc>
 1047978:	88800204 	addi	r2,r17,8
 104797c:	98c00204 	addi	r3,r19,8
 1047980:	003fa306 	br	1047810 <__alt_data_end+0xfffe7810>
 1047984:	8807883a 	mov	r3,r17
 1047988:	003f7406 	br	104775c <__alt_data_end+0xfffe775c>
 104798c:	ad2b883a 	add	r21,r21,r20
 1047990:	2505c83a 	sub	r2,r4,r20
 1047994:	e5400215 	stw	r21,8(fp)
 1047998:	10800054 	ori	r2,r2,1
 104799c:	a8800115 	stw	r2,4(r21)
 10479a0:	98bfff17 	ldw	r2,-4(r19)
 10479a4:	9009883a 	mov	r4,r18
 10479a8:	1080004c 	andi	r2,r2,1
 10479ac:	a0a8b03a 	or	r20,r20,r2
 10479b0:	9d3fff15 	stw	r20,-4(r19)
 10479b4:	104d31c0 	call	104d31c <__malloc_unlock>
 10479b8:	9805883a 	mov	r2,r19
 10479bc:	003f3b06 	br	10476ac <__alt_data_end+0xfffe76ac>
 10479c0:	8809883a 	mov	r4,r17
 10479c4:	980b883a 	mov	r5,r19
 10479c8:	10463040 	call	1046304 <memmove>
 10479cc:	003f9606 	br	1047828 <__alt_data_end+0xfffe7828>
 10479d0:	8809883a 	mov	r4,r17
 10479d4:	980b883a 	mov	r5,r19
 10479d8:	10463040 	call	1046304 <memmove>
 10479dc:	b8c00117 	ldw	r3,4(r23)
 10479e0:	b021883a 	mov	r16,r22
 10479e4:	b82b883a 	mov	r21,r23
 10479e8:	003f2306 	br	1047678 <__alt_data_end+0xfffe7678>
 10479ec:	98c00217 	ldw	r3,8(r19)
 10479f0:	88c00215 	stw	r3,8(r17)
 10479f4:	98c00317 	ldw	r3,12(r19)
 10479f8:	88c00315 	stw	r3,12(r17)
 10479fc:	30800c26 	beq	r6,r2,1047a30 <_realloc_r+0x520>
 1047a00:	88800404 	addi	r2,r17,16
 1047a04:	98c00404 	addi	r3,r19,16
 1047a08:	003f8106 	br	1047810 <__alt_data_end+0xfffe7810>
 1047a0c:	893fff17 	ldw	r4,-4(r17)
 1047a10:	00bfff04 	movi	r2,-4
 1047a14:	9823883a 	mov	r17,r19
 1047a18:	2084703a 	and	r2,r4,r2
 1047a1c:	80a1883a 	add	r16,r16,r2
 1047a20:	003f1506 	br	1047678 <__alt_data_end+0xfffe7678>
 1047a24:	b8c00404 	addi	r3,r23,16
 1047a28:	9cc00204 	addi	r19,r19,8
 1047a2c:	003f4b06 	br	104775c <__alt_data_end+0xfffe775c>
 1047a30:	99000417 	ldw	r4,16(r19)
 1047a34:	88800604 	addi	r2,r17,24
 1047a38:	98c00604 	addi	r3,r19,24
 1047a3c:	89000415 	stw	r4,16(r17)
 1047a40:	99000517 	ldw	r4,20(r19)
 1047a44:	89000515 	stw	r4,20(r17)
 1047a48:	003f7106 	br	1047810 <__alt_data_end+0xfffe7810>
 1047a4c:	8805883a 	mov	r2,r17
 1047a50:	003fb006 	br	1047914 <__alt_data_end+0xfffe7914>
 1047a54:	8809883a 	mov	r4,r17
 1047a58:	980b883a 	mov	r5,r19
 1047a5c:	10463040 	call	1046304 <memmove>
 1047a60:	003fb206 	br	104792c <__alt_data_end+0xfffe792c>
 1047a64:	98800217 	ldw	r2,8(r19)
 1047a68:	b8800415 	stw	r2,16(r23)
 1047a6c:	98800317 	ldw	r2,12(r19)
 1047a70:	b8800515 	stw	r2,20(r23)
 1047a74:	31000726 	beq	r6,r4,1047a94 <_realloc_r+0x584>
 1047a78:	b8800604 	addi	r2,r23,24
 1047a7c:	9cc00404 	addi	r19,r19,16
 1047a80:	003fa406 	br	1047914 <__alt_data_end+0xfffe7914>
 1047a84:	9009883a 	mov	r4,r18
 1047a88:	104d31c0 	call	104d31c <__malloc_unlock>
 1047a8c:	0005883a 	mov	r2,zero
 1047a90:	003f0606 	br	10476ac <__alt_data_end+0xfffe76ac>
 1047a94:	98c00417 	ldw	r3,16(r19)
 1047a98:	9cc00604 	addi	r19,r19,24
 1047a9c:	b8800804 	addi	r2,r23,32
 1047aa0:	b8c00615 	stw	r3,24(r23)
 1047aa4:	98ffff17 	ldw	r3,-4(r19)
 1047aa8:	b8c00715 	stw	r3,28(r23)
 1047aac:	003f9906 	br	1047914 <__alt_data_end+0xfffe7914>

01047ab0 <__fpclassifyd>:
 1047ab0:	00a00034 	movhi	r2,32768
 1047ab4:	10bfffc4 	addi	r2,r2,-1
 1047ab8:	2884703a 	and	r2,r5,r2
 1047abc:	10000726 	beq	r2,zero,1047adc <__fpclassifyd+0x2c>
 1047ac0:	00fffc34 	movhi	r3,65520
 1047ac4:	019ff834 	movhi	r6,32736
 1047ac8:	28c7883a 	add	r3,r5,r3
 1047acc:	31bfffc4 	addi	r6,r6,-1
 1047ad0:	30c00536 	bltu	r6,r3,1047ae8 <__fpclassifyd+0x38>
 1047ad4:	00800104 	movi	r2,4
 1047ad8:	f800283a 	ret
 1047adc:	2000021e 	bne	r4,zero,1047ae8 <__fpclassifyd+0x38>
 1047ae0:	00800084 	movi	r2,2
 1047ae4:	f800283a 	ret
 1047ae8:	00dffc34 	movhi	r3,32752
 1047aec:	019ff834 	movhi	r6,32736
 1047af0:	28cb883a 	add	r5,r5,r3
 1047af4:	31bfffc4 	addi	r6,r6,-1
 1047af8:	317ff62e 	bgeu	r6,r5,1047ad4 <__alt_data_end+0xfffe7ad4>
 1047afc:	01400434 	movhi	r5,16
 1047b00:	297fffc4 	addi	r5,r5,-1
 1047b04:	28800236 	bltu	r5,r2,1047b10 <__fpclassifyd+0x60>
 1047b08:	008000c4 	movi	r2,3
 1047b0c:	f800283a 	ret
 1047b10:	10c00226 	beq	r2,r3,1047b1c <__fpclassifyd+0x6c>
 1047b14:	0005883a 	mov	r2,zero
 1047b18:	f800283a 	ret
 1047b1c:	2005003a 	cmpeq	r2,r4,zero
 1047b20:	f800283a 	ret

01047b24 <_sbrk_r>:
 1047b24:	defffd04 	addi	sp,sp,-12
 1047b28:	dc000015 	stw	r16,0(sp)
 1047b2c:	04004174 	movhi	r16,261
 1047b30:	dc400115 	stw	r17,4(sp)
 1047b34:	840c2004 	addi	r16,r16,12416
 1047b38:	2023883a 	mov	r17,r4
 1047b3c:	2809883a 	mov	r4,r5
 1047b40:	dfc00215 	stw	ra,8(sp)
 1047b44:	80000015 	stw	zero,0(r16)
 1047b48:	104d4e80 	call	104d4e8 <sbrk>
 1047b4c:	00ffffc4 	movi	r3,-1
 1047b50:	10c00526 	beq	r2,r3,1047b68 <_sbrk_r+0x44>
 1047b54:	dfc00217 	ldw	ra,8(sp)
 1047b58:	dc400117 	ldw	r17,4(sp)
 1047b5c:	dc000017 	ldw	r16,0(sp)
 1047b60:	dec00304 	addi	sp,sp,12
 1047b64:	f800283a 	ret
 1047b68:	80c00017 	ldw	r3,0(r16)
 1047b6c:	183ff926 	beq	r3,zero,1047b54 <__alt_data_end+0xfffe7b54>
 1047b70:	88c00015 	stw	r3,0(r17)
 1047b74:	003ff706 	br	1047b54 <__alt_data_end+0xfffe7b54>

01047b78 <__sread>:
 1047b78:	defffe04 	addi	sp,sp,-8
 1047b7c:	dc000015 	stw	r16,0(sp)
 1047b80:	2821883a 	mov	r16,r5
 1047b84:	2940038f 	ldh	r5,14(r5)
 1047b88:	dfc00115 	stw	ra,4(sp)
 1047b8c:	10497580 	call	1049758 <_read_r>
 1047b90:	10000716 	blt	r2,zero,1047bb0 <__sread+0x38>
 1047b94:	80c01417 	ldw	r3,80(r16)
 1047b98:	1887883a 	add	r3,r3,r2
 1047b9c:	80c01415 	stw	r3,80(r16)
 1047ba0:	dfc00117 	ldw	ra,4(sp)
 1047ba4:	dc000017 	ldw	r16,0(sp)
 1047ba8:	dec00204 	addi	sp,sp,8
 1047bac:	f800283a 	ret
 1047bb0:	80c0030b 	ldhu	r3,12(r16)
 1047bb4:	18fbffcc 	andi	r3,r3,61439
 1047bb8:	80c0030d 	sth	r3,12(r16)
 1047bbc:	dfc00117 	ldw	ra,4(sp)
 1047bc0:	dc000017 	ldw	r16,0(sp)
 1047bc4:	dec00204 	addi	sp,sp,8
 1047bc8:	f800283a 	ret

01047bcc <__seofread>:
 1047bcc:	0005883a 	mov	r2,zero
 1047bd0:	f800283a 	ret

01047bd4 <__swrite>:
 1047bd4:	2880030b 	ldhu	r2,12(r5)
 1047bd8:	defffb04 	addi	sp,sp,-20
 1047bdc:	dcc00315 	stw	r19,12(sp)
 1047be0:	dc800215 	stw	r18,8(sp)
 1047be4:	dc400115 	stw	r17,4(sp)
 1047be8:	dc000015 	stw	r16,0(sp)
 1047bec:	dfc00415 	stw	ra,16(sp)
 1047bf0:	10c0400c 	andi	r3,r2,256
 1047bf4:	2821883a 	mov	r16,r5
 1047bf8:	2027883a 	mov	r19,r4
 1047bfc:	3025883a 	mov	r18,r6
 1047c00:	3823883a 	mov	r17,r7
 1047c04:	18000526 	beq	r3,zero,1047c1c <__swrite+0x48>
 1047c08:	2940038f 	ldh	r5,14(r5)
 1047c0c:	000d883a 	mov	r6,zero
 1047c10:	01c00084 	movi	r7,2
 1047c14:	10496fc0 	call	10496fc <_lseek_r>
 1047c18:	8080030b 	ldhu	r2,12(r16)
 1047c1c:	8140038f 	ldh	r5,14(r16)
 1047c20:	10bbffcc 	andi	r2,r2,61439
 1047c24:	9809883a 	mov	r4,r19
 1047c28:	900d883a 	mov	r6,r18
 1047c2c:	880f883a 	mov	r7,r17
 1047c30:	8080030d 	sth	r2,12(r16)
 1047c34:	dfc00417 	ldw	ra,16(sp)
 1047c38:	dcc00317 	ldw	r19,12(sp)
 1047c3c:	dc800217 	ldw	r18,8(sp)
 1047c40:	dc400117 	ldw	r17,4(sp)
 1047c44:	dc000017 	ldw	r16,0(sp)
 1047c48:	dec00504 	addi	sp,sp,20
 1047c4c:	10491ec1 	jmpi	10491ec <_write_r>

01047c50 <__sseek>:
 1047c50:	defffe04 	addi	sp,sp,-8
 1047c54:	dc000015 	stw	r16,0(sp)
 1047c58:	2821883a 	mov	r16,r5
 1047c5c:	2940038f 	ldh	r5,14(r5)
 1047c60:	dfc00115 	stw	ra,4(sp)
 1047c64:	10496fc0 	call	10496fc <_lseek_r>
 1047c68:	00ffffc4 	movi	r3,-1
 1047c6c:	10c00826 	beq	r2,r3,1047c90 <__sseek+0x40>
 1047c70:	80c0030b 	ldhu	r3,12(r16)
 1047c74:	80801415 	stw	r2,80(r16)
 1047c78:	18c40014 	ori	r3,r3,4096
 1047c7c:	80c0030d 	sth	r3,12(r16)
 1047c80:	dfc00117 	ldw	ra,4(sp)
 1047c84:	dc000017 	ldw	r16,0(sp)
 1047c88:	dec00204 	addi	sp,sp,8
 1047c8c:	f800283a 	ret
 1047c90:	80c0030b 	ldhu	r3,12(r16)
 1047c94:	18fbffcc 	andi	r3,r3,61439
 1047c98:	80c0030d 	sth	r3,12(r16)
 1047c9c:	dfc00117 	ldw	ra,4(sp)
 1047ca0:	dc000017 	ldw	r16,0(sp)
 1047ca4:	dec00204 	addi	sp,sp,8
 1047ca8:	f800283a 	ret

01047cac <__sclose>:
 1047cac:	2940038f 	ldh	r5,14(r5)
 1047cb0:	10492481 	jmpi	1049248 <_close_r>

01047cb4 <strcmp>:
 1047cb4:	2144b03a 	or	r2,r4,r5
 1047cb8:	108000cc 	andi	r2,r2,3
 1047cbc:	1000171e 	bne	r2,zero,1047d1c <strcmp+0x68>
 1047cc0:	20800017 	ldw	r2,0(r4)
 1047cc4:	28c00017 	ldw	r3,0(r5)
 1047cc8:	10c0141e 	bne	r2,r3,1047d1c <strcmp+0x68>
 1047ccc:	027fbff4 	movhi	r9,65279
 1047cd0:	4a7fbfc4 	addi	r9,r9,-257
 1047cd4:	0086303a 	nor	r3,zero,r2
 1047cd8:	02202074 	movhi	r8,32897
 1047cdc:	1245883a 	add	r2,r2,r9
 1047ce0:	42202004 	addi	r8,r8,-32640
 1047ce4:	10c4703a 	and	r2,r2,r3
 1047ce8:	1204703a 	and	r2,r2,r8
 1047cec:	10000226 	beq	r2,zero,1047cf8 <strcmp+0x44>
 1047cf0:	00001706 	br	1047d50 <strcmp+0x9c>
 1047cf4:	1000161e 	bne	r2,zero,1047d50 <strcmp+0x9c>
 1047cf8:	21000104 	addi	r4,r4,4
 1047cfc:	20c00017 	ldw	r3,0(r4)
 1047d00:	29400104 	addi	r5,r5,4
 1047d04:	29800017 	ldw	r6,0(r5)
 1047d08:	1a4f883a 	add	r7,r3,r9
 1047d0c:	00c4303a 	nor	r2,zero,r3
 1047d10:	3884703a 	and	r2,r7,r2
 1047d14:	1204703a 	and	r2,r2,r8
 1047d18:	19bff626 	beq	r3,r6,1047cf4 <__alt_data_end+0xfffe7cf4>
 1047d1c:	20800007 	ldb	r2,0(r4)
 1047d20:	1000051e 	bne	r2,zero,1047d38 <strcmp+0x84>
 1047d24:	00000606 	br	1047d40 <strcmp+0x8c>
 1047d28:	21000044 	addi	r4,r4,1
 1047d2c:	20800007 	ldb	r2,0(r4)
 1047d30:	29400044 	addi	r5,r5,1
 1047d34:	10000226 	beq	r2,zero,1047d40 <strcmp+0x8c>
 1047d38:	28c00007 	ldb	r3,0(r5)
 1047d3c:	10fffa26 	beq	r2,r3,1047d28 <__alt_data_end+0xfffe7d28>
 1047d40:	20800003 	ldbu	r2,0(r4)
 1047d44:	28c00003 	ldbu	r3,0(r5)
 1047d48:	10c5c83a 	sub	r2,r2,r3
 1047d4c:	f800283a 	ret
 1047d50:	0005883a 	mov	r2,zero
 1047d54:	f800283a 	ret

01047d58 <__sprint_r.part.0>:
 1047d58:	28801917 	ldw	r2,100(r5)
 1047d5c:	defff604 	addi	sp,sp,-40
 1047d60:	dd400515 	stw	r21,20(sp)
 1047d64:	dcc00315 	stw	r19,12(sp)
 1047d68:	dfc00915 	stw	ra,36(sp)
 1047d6c:	df000815 	stw	fp,32(sp)
 1047d70:	ddc00715 	stw	r23,28(sp)
 1047d74:	dd800615 	stw	r22,24(sp)
 1047d78:	dd000415 	stw	r20,16(sp)
 1047d7c:	dc800215 	stw	r18,8(sp)
 1047d80:	dc400115 	stw	r17,4(sp)
 1047d84:	dc000015 	stw	r16,0(sp)
 1047d88:	1088000c 	andi	r2,r2,8192
 1047d8c:	2827883a 	mov	r19,r5
 1047d90:	302b883a 	mov	r21,r6
 1047d94:	10002d26 	beq	r2,zero,1047e4c <__sprint_r.part.0+0xf4>
 1047d98:	30800217 	ldw	r2,8(r6)
 1047d9c:	35800017 	ldw	r22,0(r6)
 1047da0:	10002826 	beq	r2,zero,1047e44 <__sprint_r.part.0+0xec>
 1047da4:	2029883a 	mov	r20,r4
 1047da8:	b5c00104 	addi	r23,r22,4
 1047dac:	04bfffc4 	movi	r18,-1
 1047db0:	bc400017 	ldw	r17,0(r23)
 1047db4:	b4000017 	ldw	r16,0(r22)
 1047db8:	0039883a 	mov	fp,zero
 1047dbc:	8822d0ba 	srli	r17,r17,2
 1047dc0:	04400316 	blt	zero,r17,1047dd0 <__sprint_r.part.0+0x78>
 1047dc4:	00001706 	br	1047e24 <__sprint_r.part.0+0xcc>
 1047dc8:	84000104 	addi	r16,r16,4
 1047dcc:	8f001526 	beq	r17,fp,1047e24 <__sprint_r.part.0+0xcc>
 1047dd0:	81400017 	ldw	r5,0(r16)
 1047dd4:	a009883a 	mov	r4,r20
 1047dd8:	980d883a 	mov	r6,r19
 1047ddc:	10494740 	call	1049474 <_fputwc_r>
 1047de0:	e7000044 	addi	fp,fp,1
 1047de4:	14bff81e 	bne	r2,r18,1047dc8 <__alt_data_end+0xfffe7dc8>
 1047de8:	9005883a 	mov	r2,r18
 1047dec:	a8000215 	stw	zero,8(r21)
 1047df0:	a8000115 	stw	zero,4(r21)
 1047df4:	dfc00917 	ldw	ra,36(sp)
 1047df8:	df000817 	ldw	fp,32(sp)
 1047dfc:	ddc00717 	ldw	r23,28(sp)
 1047e00:	dd800617 	ldw	r22,24(sp)
 1047e04:	dd400517 	ldw	r21,20(sp)
 1047e08:	dd000417 	ldw	r20,16(sp)
 1047e0c:	dcc00317 	ldw	r19,12(sp)
 1047e10:	dc800217 	ldw	r18,8(sp)
 1047e14:	dc400117 	ldw	r17,4(sp)
 1047e18:	dc000017 	ldw	r16,0(sp)
 1047e1c:	dec00a04 	addi	sp,sp,40
 1047e20:	f800283a 	ret
 1047e24:	a8c00217 	ldw	r3,8(r21)
 1047e28:	8c63883a 	add	r17,r17,r17
 1047e2c:	8c63883a 	add	r17,r17,r17
 1047e30:	1c45c83a 	sub	r2,r3,r17
 1047e34:	a8800215 	stw	r2,8(r21)
 1047e38:	b5800204 	addi	r22,r22,8
 1047e3c:	bdc00204 	addi	r23,r23,8
 1047e40:	103fdb1e 	bne	r2,zero,1047db0 <__alt_data_end+0xfffe7db0>
 1047e44:	0005883a 	mov	r2,zero
 1047e48:	003fe806 	br	1047dec <__alt_data_end+0xfffe7dec>
 1047e4c:	10450900 	call	1045090 <__sfvwrite_r>
 1047e50:	003fe606 	br	1047dec <__alt_data_end+0xfffe7dec>

01047e54 <__sprint_r>:
 1047e54:	30c00217 	ldw	r3,8(r6)
 1047e58:	18000126 	beq	r3,zero,1047e60 <__sprint_r+0xc>
 1047e5c:	1047d581 	jmpi	1047d58 <__sprint_r.part.0>
 1047e60:	30000115 	stw	zero,4(r6)
 1047e64:	0005883a 	mov	r2,zero
 1047e68:	f800283a 	ret

01047e6c <___vfiprintf_internal_r>:
 1047e6c:	defeca04 	addi	sp,sp,-1240
 1047e70:	dd813215 	stw	r22,1224(sp)
 1047e74:	dd013015 	stw	r20,1216(sp)
 1047e78:	dfc13515 	stw	ra,1236(sp)
 1047e7c:	df013415 	stw	fp,1232(sp)
 1047e80:	ddc13315 	stw	r23,1228(sp)
 1047e84:	dd413115 	stw	r21,1220(sp)
 1047e88:	dcc12f15 	stw	r19,1212(sp)
 1047e8c:	dc812e15 	stw	r18,1208(sp)
 1047e90:	dc412d15 	stw	r17,1204(sp)
 1047e94:	dc012c15 	stw	r16,1200(sp)
 1047e98:	d9012015 	stw	r4,1152(sp)
 1047e9c:	d9c12115 	stw	r7,1156(sp)
 1047ea0:	2829883a 	mov	r20,r5
 1047ea4:	302d883a 	mov	r22,r6
 1047ea8:	20000226 	beq	r4,zero,1047eb4 <___vfiprintf_internal_r+0x48>
 1047eac:	20800e17 	ldw	r2,56(r4)
 1047eb0:	1001d326 	beq	r2,zero,1048600 <___vfiprintf_internal_r+0x794>
 1047eb4:	a0c0030b 	ldhu	r3,12(r20)
 1047eb8:	1908000c 	andi	r4,r3,8192
 1047ebc:	1805883a 	mov	r2,r3
 1047ec0:	2000071e 	bne	r4,zero,1047ee0 <___vfiprintf_internal_r+0x74>
 1047ec4:	a1001917 	ldw	r4,100(r20)
 1047ec8:	18880014 	ori	r2,r3,8192
 1047ecc:	00f7ffc4 	movi	r3,-8193
 1047ed0:	20c8703a 	and	r4,r4,r3
 1047ed4:	a080030d 	sth	r2,12(r20)
 1047ed8:	1007883a 	mov	r3,r2
 1047edc:	a1001915 	stw	r4,100(r20)
 1047ee0:	1100020c 	andi	r4,r2,8
 1047ee4:	20018926 	beq	r4,zero,104850c <___vfiprintf_internal_r+0x6a0>
 1047ee8:	a1000417 	ldw	r4,16(r20)
 1047eec:	20018726 	beq	r4,zero,104850c <___vfiprintf_internal_r+0x6a0>
 1047ef0:	1080068c 	andi	r2,r2,26
 1047ef4:	01000284 	movi	r4,10
 1047ef8:	11018d26 	beq	r2,r4,1048530 <___vfiprintf_internal_r+0x6c4>
 1047efc:	da810a04 	addi	r10,sp,1064
 1047f00:	dac109c4 	addi	r11,sp,1063
 1047f04:	07004174 	movhi	fp,261
 1047f08:	05c04174 	movhi	r23,261
 1047f0c:	da811e15 	stw	r10,1144(sp)
 1047f10:	52d5c83a 	sub	r10,r10,r11
 1047f14:	e73e9504 	addi	fp,fp,-1452
 1047f18:	bdfe9104 	addi	r23,r23,-1468
 1047f1c:	dac11f15 	stw	r11,1148(sp)
 1047f20:	dec11a15 	stw	sp,1128(sp)
 1047f24:	d8011c15 	stw	zero,1136(sp)
 1047f28:	d8011b15 	stw	zero,1132(sp)
 1047f2c:	d8012615 	stw	zero,1176(sp)
 1047f30:	d8012215 	stw	zero,1160(sp)
 1047f34:	da812715 	stw	r10,1180(sp)
 1047f38:	d811883a 	mov	r8,sp
 1047f3c:	b021883a 	mov	r16,r22
 1047f40:	80800007 	ldb	r2,0(r16)
 1047f44:	10039c26 	beq	r2,zero,1048db8 <___vfiprintf_internal_r+0xf4c>
 1047f48:	01000944 	movi	r4,37
 1047f4c:	11039a26 	beq	r2,r4,1048db8 <___vfiprintf_internal_r+0xf4c>
 1047f50:	8005883a 	mov	r2,r16
 1047f54:	00000106 	br	1047f5c <___vfiprintf_internal_r+0xf0>
 1047f58:	19000326 	beq	r3,r4,1047f68 <___vfiprintf_internal_r+0xfc>
 1047f5c:	10800044 	addi	r2,r2,1
 1047f60:	10c00007 	ldb	r3,0(r2)
 1047f64:	183ffc1e 	bne	r3,zero,1047f58 <__alt_data_end+0xfffe7f58>
 1047f68:	1425c83a 	sub	r18,r2,r16
 1047f6c:	1023883a 	mov	r17,r2
 1047f70:	90001026 	beq	r18,zero,1047fb4 <___vfiprintf_internal_r+0x148>
 1047f74:	d8c11c17 	ldw	r3,1136(sp)
 1047f78:	d8811b17 	ldw	r2,1132(sp)
 1047f7c:	44000015 	stw	r16,0(r8)
 1047f80:	90c7883a 	add	r3,r18,r3
 1047f84:	10800044 	addi	r2,r2,1
 1047f88:	44800115 	stw	r18,4(r8)
 1047f8c:	d8c11c15 	stw	r3,1136(sp)
 1047f90:	d8811b15 	stw	r2,1132(sp)
 1047f94:	010001c4 	movi	r4,7
 1047f98:	2080750e 	bge	r4,r2,1048170 <___vfiprintf_internal_r+0x304>
 1047f9c:	18039d1e 	bne	r3,zero,1048e14 <___vfiprintf_internal_r+0xfa8>
 1047fa0:	dac12217 	ldw	r11,1160(sp)
 1047fa4:	d8011b15 	stw	zero,1132(sp)
 1047fa8:	d811883a 	mov	r8,sp
 1047fac:	5c97883a 	add	r11,r11,r18
 1047fb0:	dac12215 	stw	r11,1160(sp)
 1047fb4:	88800007 	ldb	r2,0(r17)
 1047fb8:	1002e026 	beq	r2,zero,1048b3c <___vfiprintf_internal_r+0xcd0>
 1047fbc:	88c00047 	ldb	r3,1(r17)
 1047fc0:	8c000044 	addi	r16,r17,1
 1047fc4:	d8011d85 	stb	zero,1142(sp)
 1047fc8:	000d883a 	mov	r6,zero
 1047fcc:	027fffc4 	movi	r9,-1
 1047fd0:	0027883a 	mov	r19,zero
 1047fd4:	002b883a 	mov	r21,zero
 1047fd8:	01001604 	movi	r4,88
 1047fdc:	01400244 	movi	r5,9
 1047fe0:	03000a84 	movi	r12,42
 1047fe4:	01c01b04 	movi	r7,108
 1047fe8:	84000044 	addi	r16,r16,1
 1047fec:	18bff804 	addi	r2,r3,-32
 1047ff0:	20825f36 	bltu	r4,r2,1048970 <___vfiprintf_internal_r+0xb04>
 1047ff4:	100490ba 	slli	r2,r2,2
 1047ff8:	02804174 	movhi	r10,261
 1047ffc:	52a00304 	addi	r10,r10,-32756
 1048000:	1285883a 	add	r2,r2,r10
 1048004:	10800017 	ldw	r2,0(r2)
 1048008:	1000683a 	jmp	r2
 104800c:	010487e0 	cmpeqi	r4,zero,4639
 1048010:	01048970 	cmpltui	r4,zero,4645
 1048014:	01048970 	cmpltui	r4,zero,4645
 1048018:	01048964 	muli	r4,zero,4645
 104801c:	01048970 	cmpltui	r4,zero,4645
 1048020:	01048970 	cmpltui	r4,zero,4645
 1048024:	01048970 	cmpltui	r4,zero,4645
 1048028:	01048970 	cmpltui	r4,zero,4645
 104802c:	01048970 	cmpltui	r4,zero,4645
 1048030:	01048970 	cmpltui	r4,zero,4645
 1048034:	0104893c 	xorhi	r4,zero,4644
 1048038:	01048958 	cmpnei	r4,zero,4645
 104803c:	01048970 	cmpltui	r4,zero,4645
 1048040:	01048610 	cmplti	r4,zero,4632
 1048044:	01048770 	cmpltui	r4,zero,4637
 1048048:	01048970 	cmpltui	r4,zero,4645
 104804c:	010486f4 	movhi	r4,4635
 1048050:	01048700 	call	104870 <__reset-0xf3b790>
 1048054:	01048700 	call	104870 <__reset-0xf3b790>
 1048058:	01048700 	call	104870 <__reset-0xf3b790>
 104805c:	01048700 	call	104870 <__reset-0xf3b790>
 1048060:	01048700 	call	104870 <__reset-0xf3b790>
 1048064:	01048700 	call	104870 <__reset-0xf3b790>
 1048068:	01048700 	call	104870 <__reset-0xf3b790>
 104806c:	01048700 	call	104870 <__reset-0xf3b790>
 1048070:	01048700 	call	104870 <__reset-0xf3b790>
 1048074:	01048970 	cmpltui	r4,zero,4645
 1048078:	01048970 	cmpltui	r4,zero,4645
 104807c:	01048970 	cmpltui	r4,zero,4645
 1048080:	01048970 	cmpltui	r4,zero,4645
 1048084:	01048970 	cmpltui	r4,zero,4645
 1048088:	01048970 	cmpltui	r4,zero,4645
 104808c:	01048970 	cmpltui	r4,zero,4645
 1048090:	01048970 	cmpltui	r4,zero,4645
 1048094:	01048970 	cmpltui	r4,zero,4645
 1048098:	01048970 	cmpltui	r4,zero,4645
 104809c:	0104872c 	andhi	r4,zero,4636
 10480a0:	01048970 	cmpltui	r4,zero,4645
 10480a4:	01048970 	cmpltui	r4,zero,4645
 10480a8:	01048970 	cmpltui	r4,zero,4645
 10480ac:	01048970 	cmpltui	r4,zero,4645
 10480b0:	01048970 	cmpltui	r4,zero,4645
 10480b4:	01048970 	cmpltui	r4,zero,4645
 10480b8:	01048970 	cmpltui	r4,zero,4645
 10480bc:	01048970 	cmpltui	r4,zero,4645
 10480c0:	01048970 	cmpltui	r4,zero,4645
 10480c4:	01048970 	cmpltui	r4,zero,4645
 10480c8:	010481c0 	call	10481c <__reset-0xf3b7e4>
 10480cc:	01048970 	cmpltui	r4,zero,4645
 10480d0:	01048970 	cmpltui	r4,zero,4645
 10480d4:	01048970 	cmpltui	r4,zero,4645
 10480d8:	01048970 	cmpltui	r4,zero,4645
 10480dc:	01048970 	cmpltui	r4,zero,4645
 10480e0:	01048184 	movi	r4,4614
 10480e4:	01048970 	cmpltui	r4,zero,4645
 10480e8:	01048970 	cmpltui	r4,zero,4645
 10480ec:	0104866c 	andhi	r4,zero,4633
 10480f0:	01048970 	cmpltui	r4,zero,4645
 10480f4:	01048970 	cmpltui	r4,zero,4645
 10480f8:	01048970 	cmpltui	r4,zero,4645
 10480fc:	01048970 	cmpltui	r4,zero,4645
 1048100:	01048970 	cmpltui	r4,zero,4645
 1048104:	01048970 	cmpltui	r4,zero,4645
 1048108:	01048970 	cmpltui	r4,zero,4645
 104810c:	01048970 	cmpltui	r4,zero,4645
 1048110:	01048970 	cmpltui	r4,zero,4645
 1048114:	01048970 	cmpltui	r4,zero,4645
 1048118:	010486c4 	movi	r4,4635
 104811c:	0104885c 	xori	r4,zero,4641
 1048120:	01048970 	cmpltui	r4,zero,4645
 1048124:	01048970 	cmpltui	r4,zero,4645
 1048128:	01048970 	cmpltui	r4,zero,4645
 104812c:	010488e4 	muli	r4,zero,4643
 1048130:	0104885c 	xori	r4,zero,4641
 1048134:	01048970 	cmpltui	r4,zero,4645
 1048138:	01048970 	cmpltui	r4,zero,4645
 104813c:	010488f0 	cmpltui	r4,zero,4643
 1048140:	01048970 	cmpltui	r4,zero,4645
 1048144:	010487b0 	cmpltui	r4,zero,4638
 1048148:	010481c4 	movi	r4,4615
 104814c:	01048898 	cmpnei	r4,zero,4642
 1048150:	010488d8 	cmpnei	r4,zero,4643
 1048154:	01048970 	cmpltui	r4,zero,4645
 1048158:	010487fc 	xorhi	r4,zero,4639
 104815c:	01048970 	cmpltui	r4,zero,4645
 1048160:	01048188 	cmpgei	r4,zero,4614
 1048164:	01048970 	cmpltui	r4,zero,4645
 1048168:	01048970 	cmpltui	r4,zero,4645
 104816c:	01048900 	call	104890 <__reset-0xf3b770>
 1048170:	42000204 	addi	r8,r8,8
 1048174:	dac12217 	ldw	r11,1160(sp)
 1048178:	5c97883a 	add	r11,r11,r18
 104817c:	dac12215 	stw	r11,1160(sp)
 1048180:	003f8c06 	br	1047fb4 <__alt_data_end+0xfffe7fb4>
 1048184:	ad400414 	ori	r21,r21,16
 1048188:	a880080c 	andi	r2,r21,32
 104818c:	10012f1e 	bne	r2,zero,104864c <___vfiprintf_internal_r+0x7e0>
 1048190:	a880040c 	andi	r2,r21,16
 1048194:	1001ff1e 	bne	r2,zero,1048994 <___vfiprintf_internal_r+0xb28>
 1048198:	a880100c 	andi	r2,r21,64
 104819c:	1001fd26 	beq	r2,zero,1048994 <___vfiprintf_internal_r+0xb28>
 10481a0:	da812117 	ldw	r10,1156(sp)
 10481a4:	002d883a 	mov	r22,zero
 10481a8:	00800044 	movi	r2,1
 10481ac:	5480000b 	ldhu	r18,0(r10)
 10481b0:	52800104 	addi	r10,r10,4
 10481b4:	da812115 	stw	r10,1156(sp)
 10481b8:	9009883a 	mov	r4,r18
 10481bc:	00000a06 	br	10481e8 <___vfiprintf_internal_r+0x37c>
 10481c0:	ad400414 	ori	r21,r21,16
 10481c4:	a880080c 	andi	r2,r21,32
 10481c8:	10011426 	beq	r2,zero,104861c <___vfiprintf_internal_r+0x7b0>
 10481cc:	da812117 	ldw	r10,1156(sp)
 10481d0:	0005883a 	mov	r2,zero
 10481d4:	54800017 	ldw	r18,0(r10)
 10481d8:	55800117 	ldw	r22,4(r10)
 10481dc:	52800204 	addi	r10,r10,8
 10481e0:	da812115 	stw	r10,1156(sp)
 10481e4:	9588b03a 	or	r4,r18,r22
 10481e8:	d8011d85 	stb	zero,1142(sp)
 10481ec:	4823883a 	mov	r17,r9
 10481f0:	0019883a 	mov	r12,zero
 10481f4:	48000216 	blt	r9,zero,1048200 <___vfiprintf_internal_r+0x394>
 10481f8:	00ffdfc4 	movi	r3,-129
 10481fc:	a8ea703a 	and	r21,r21,r3
 1048200:	2002221e 	bne	r4,zero,1048a8c <___vfiprintf_internal_r+0xc20>
 1048204:	4802c726 	beq	r9,zero,1048d24 <___vfiprintf_internal_r+0xeb8>
 1048208:	10803fcc 	andi	r2,r2,255
 104820c:	00c00044 	movi	r3,1
 1048210:	10c24426 	beq	r2,r3,1048b24 <___vfiprintf_internal_r+0xcb8>
 1048214:	00c00084 	movi	r3,2
 1048218:	10c2cc26 	beq	r2,r3,1048d4c <___vfiprintf_internal_r+0xee0>
 104821c:	d8c10a04 	addi	r3,sp,1064
 1048220:	9008d0fa 	srli	r4,r18,3
 1048224:	b00a977a 	slli	r5,r22,29
 1048228:	b02cd0fa 	srli	r22,r22,3
 104822c:	948001cc 	andi	r18,r18,7
 1048230:	90800c04 	addi	r2,r18,48
 1048234:	18ffffc4 	addi	r3,r3,-1
 1048238:	2924b03a 	or	r18,r5,r4
 104823c:	18800005 	stb	r2,0(r3)
 1048240:	9588b03a 	or	r4,r18,r22
 1048244:	203ff61e 	bne	r4,zero,1048220 <__alt_data_end+0xfffe8220>
 1048248:	a900004c 	andi	r4,r21,1
 104824c:	d8c12415 	stw	r3,1168(sp)
 1048250:	2002fb1e 	bne	r4,zero,1048e40 <___vfiprintf_internal_r+0xfd4>
 1048254:	da811e17 	ldw	r10,1144(sp)
 1048258:	50e3c83a 	sub	r17,r10,r3
 104825c:	8825883a 	mov	r18,r17
 1048260:	8a40010e 	bge	r17,r9,1048268 <___vfiprintf_internal_r+0x3fc>
 1048264:	4825883a 	mov	r18,r9
 1048268:	63003fcc 	andi	r12,r12,255
 104826c:	6300201c 	xori	r12,r12,128
 1048270:	633fe004 	addi	r12,r12,-128
 1048274:	60000126 	beq	r12,zero,104827c <___vfiprintf_internal_r+0x410>
 1048278:	94800044 	addi	r18,r18,1
 104827c:	ab80008c 	andi	r14,r21,2
 1048280:	70000126 	beq	r14,zero,1048288 <___vfiprintf_internal_r+0x41c>
 1048284:	94800084 	addi	r18,r18,2
 1048288:	ad80210c 	andi	r22,r21,132
 104828c:	b001df1e 	bne	r22,zero,1048a0c <___vfiprintf_internal_r+0xba0>
 1048290:	9c8fc83a 	sub	r7,r19,r18
 1048294:	01c1dd0e 	bge	zero,r7,1048a0c <___vfiprintf_internal_r+0xba0>
 1048298:	03000404 	movi	r12,16
 104829c:	d8811c17 	ldw	r2,1136(sp)
 10482a0:	61c3920e 	bge	r12,r7,10490ec <___vfiprintf_internal_r+0x1280>
 10482a4:	02804174 	movhi	r10,261
 10482a8:	52be9504 	addi	r10,r10,-1452
 10482ac:	dc012915 	stw	r16,1188(sp)
 10482b0:	d9811b17 	ldw	r6,1132(sp)
 10482b4:	da812315 	stw	r10,1164(sp)
 10482b8:	00c001c4 	movi	r3,7
 10482bc:	da412515 	stw	r9,1172(sp)
 10482c0:	db812815 	stw	r14,1184(sp)
 10482c4:	3821883a 	mov	r16,r7
 10482c8:	00000506 	br	10482e0 <___vfiprintf_internal_r+0x474>
 10482cc:	31400084 	addi	r5,r6,2
 10482d0:	42000204 	addi	r8,r8,8
 10482d4:	200d883a 	mov	r6,r4
 10482d8:	843ffc04 	addi	r16,r16,-16
 10482dc:	64000d0e 	bge	r12,r16,1048314 <___vfiprintf_internal_r+0x4a8>
 10482e0:	10800404 	addi	r2,r2,16
 10482e4:	31000044 	addi	r4,r6,1
 10482e8:	47000015 	stw	fp,0(r8)
 10482ec:	43000115 	stw	r12,4(r8)
 10482f0:	d8811c15 	stw	r2,1136(sp)
 10482f4:	d9011b15 	stw	r4,1132(sp)
 10482f8:	193ff40e 	bge	r3,r4,10482cc <__alt_data_end+0xfffe82cc>
 10482fc:	1001b51e 	bne	r2,zero,10489d4 <___vfiprintf_internal_r+0xb68>
 1048300:	843ffc04 	addi	r16,r16,-16
 1048304:	000d883a 	mov	r6,zero
 1048308:	01400044 	movi	r5,1
 104830c:	d811883a 	mov	r8,sp
 1048310:	643ff316 	blt	r12,r16,10482e0 <__alt_data_end+0xfffe82e0>
 1048314:	800f883a 	mov	r7,r16
 1048318:	da412517 	ldw	r9,1172(sp)
 104831c:	db812817 	ldw	r14,1184(sp)
 1048320:	dc012917 	ldw	r16,1188(sp)
 1048324:	dac12317 	ldw	r11,1164(sp)
 1048328:	3887883a 	add	r3,r7,r2
 104832c:	41c00115 	stw	r7,4(r8)
 1048330:	42c00015 	stw	r11,0(r8)
 1048334:	d8c11c15 	stw	r3,1136(sp)
 1048338:	d9411b15 	stw	r5,1132(sp)
 104833c:	008001c4 	movi	r2,7
 1048340:	11429316 	blt	r2,r5,1048d90 <___vfiprintf_internal_r+0xf24>
 1048344:	d9011d87 	ldb	r4,1142(sp)
 1048348:	42000204 	addi	r8,r8,8
 104834c:	28800044 	addi	r2,r5,1
 1048350:	2001b31e 	bne	r4,zero,1048a20 <___vfiprintf_internal_r+0xbb4>
 1048354:	70000c26 	beq	r14,zero,1048388 <___vfiprintf_internal_r+0x51c>
 1048358:	d9011d04 	addi	r4,sp,1140
 104835c:	18c00084 	addi	r3,r3,2
 1048360:	41000015 	stw	r4,0(r8)
 1048364:	01000084 	movi	r4,2
 1048368:	41000115 	stw	r4,4(r8)
 104836c:	d8c11c15 	stw	r3,1136(sp)
 1048370:	d8811b15 	stw	r2,1132(sp)
 1048374:	010001c4 	movi	r4,7
 1048378:	20826516 	blt	r4,r2,1048d10 <___vfiprintf_internal_r+0xea4>
 104837c:	100b883a 	mov	r5,r2
 1048380:	42000204 	addi	r8,r8,8
 1048384:	10800044 	addi	r2,r2,1
 1048388:	01002004 	movi	r4,128
 104838c:	b1021a26 	beq	r22,r4,1048bf8 <___vfiprintf_internal_r+0xd8c>
 1048390:	4c6dc83a 	sub	r22,r9,r17
 1048394:	0580230e 	bge	zero,r22,1048424 <___vfiprintf_internal_r+0x5b8>
 1048398:	01c00404 	movi	r7,16
 104839c:	3d83300e 	bge	r7,r22,1049060 <___vfiprintf_internal_r+0x11f4>
 10483a0:	00804174 	movhi	r2,261
 10483a4:	10be9104 	addi	r2,r2,-1468
 10483a8:	d8812315 	stw	r2,1164(sp)
 10483ac:	030001c4 	movi	r12,7
 10483b0:	00000506 	br	10483c8 <___vfiprintf_internal_r+0x55c>
 10483b4:	28800084 	addi	r2,r5,2
 10483b8:	42000204 	addi	r8,r8,8
 10483bc:	200b883a 	mov	r5,r4
 10483c0:	b5bffc04 	addi	r22,r22,-16
 10483c4:	3d800d0e 	bge	r7,r22,10483fc <___vfiprintf_internal_r+0x590>
 10483c8:	18c00404 	addi	r3,r3,16
 10483cc:	29000044 	addi	r4,r5,1
 10483d0:	45c00015 	stw	r23,0(r8)
 10483d4:	41c00115 	stw	r7,4(r8)
 10483d8:	d8c11c15 	stw	r3,1136(sp)
 10483dc:	d9011b15 	stw	r4,1132(sp)
 10483e0:	613ff40e 	bge	r12,r4,10483b4 <__alt_data_end+0xfffe83b4>
 10483e4:	18019b1e 	bne	r3,zero,1048a54 <___vfiprintf_internal_r+0xbe8>
 10483e8:	b5bffc04 	addi	r22,r22,-16
 10483ec:	000b883a 	mov	r5,zero
 10483f0:	00800044 	movi	r2,1
 10483f4:	d811883a 	mov	r8,sp
 10483f8:	3dbff316 	blt	r7,r22,10483c8 <__alt_data_end+0xfffe83c8>
 10483fc:	da812317 	ldw	r10,1164(sp)
 1048400:	1d87883a 	add	r3,r3,r22
 1048404:	45800115 	stw	r22,4(r8)
 1048408:	42800015 	stw	r10,0(r8)
 104840c:	d8c11c15 	stw	r3,1136(sp)
 1048410:	d8811b15 	stw	r2,1132(sp)
 1048414:	010001c4 	movi	r4,7
 1048418:	2081dd16 	blt	r4,r2,1048b90 <___vfiprintf_internal_r+0xd24>
 104841c:	42000204 	addi	r8,r8,8
 1048420:	10800044 	addi	r2,r2,1
 1048424:	da812417 	ldw	r10,1168(sp)
 1048428:	1c47883a 	add	r3,r3,r17
 104842c:	44400115 	stw	r17,4(r8)
 1048430:	42800015 	stw	r10,0(r8)
 1048434:	d8c11c15 	stw	r3,1136(sp)
 1048438:	d8811b15 	stw	r2,1132(sp)
 104843c:	010001c4 	movi	r4,7
 1048440:	2081dc0e 	bge	r4,r2,1048bb4 <___vfiprintf_internal_r+0xd48>
 1048444:	1802611e 	bne	r3,zero,1048dcc <___vfiprintf_internal_r+0xf60>
 1048448:	d8011b15 	stw	zero,1132(sp)
 104844c:	aac0010c 	andi	r11,r21,4
 1048450:	58002726 	beq	r11,zero,10484f0 <___vfiprintf_internal_r+0x684>
 1048454:	9ca3c83a 	sub	r17,r19,r18
 1048458:	d811883a 	mov	r8,sp
 104845c:	0443510e 	bge	zero,r17,10491a4 <___vfiprintf_internal_r+0x1338>
 1048460:	01c00404 	movi	r7,16
 1048464:	3c43320e 	bge	r7,r17,1049130 <___vfiprintf_internal_r+0x12c4>
 1048468:	00804174 	movhi	r2,261
 104846c:	10be9504 	addi	r2,r2,-1452
 1048470:	d9011b17 	ldw	r4,1132(sp)
 1048474:	d8812315 	stw	r2,1164(sp)
 1048478:	382d883a 	mov	r22,r7
 104847c:	054001c4 	movi	r21,7
 1048480:	00000506 	br	1048498 <___vfiprintf_internal_r+0x62c>
 1048484:	21400084 	addi	r5,r4,2
 1048488:	42000204 	addi	r8,r8,8
 104848c:	1009883a 	mov	r4,r2
 1048490:	8c7ffc04 	addi	r17,r17,-16
 1048494:	b4400d0e 	bge	r22,r17,10484cc <___vfiprintf_internal_r+0x660>
 1048498:	18c00404 	addi	r3,r3,16
 104849c:	20800044 	addi	r2,r4,1
 10484a0:	47000015 	stw	fp,0(r8)
 10484a4:	45800115 	stw	r22,4(r8)
 10484a8:	d8c11c15 	stw	r3,1136(sp)
 10484ac:	d8811b15 	stw	r2,1132(sp)
 10484b0:	a8bff40e 	bge	r21,r2,1048484 <__alt_data_end+0xfffe8484>
 10484b4:	1801ac1e 	bne	r3,zero,1048b68 <___vfiprintf_internal_r+0xcfc>
 10484b8:	8c7ffc04 	addi	r17,r17,-16
 10484bc:	0009883a 	mov	r4,zero
 10484c0:	01400044 	movi	r5,1
 10484c4:	d811883a 	mov	r8,sp
 10484c8:	b47ff316 	blt	r22,r17,1048498 <__alt_data_end+0xfffe8498>
 10484cc:	da812317 	ldw	r10,1164(sp)
 10484d0:	1c47883a 	add	r3,r3,r17
 10484d4:	44400115 	stw	r17,4(r8)
 10484d8:	42800015 	stw	r10,0(r8)
 10484dc:	d8c11c15 	stw	r3,1136(sp)
 10484e0:	d9411b15 	stw	r5,1132(sp)
 10484e4:	008001c4 	movi	r2,7
 10484e8:	1141b70e 	bge	r2,r5,1048bc8 <___vfiprintf_internal_r+0xd5c>
 10484ec:	1802cf1e 	bne	r3,zero,104902c <___vfiprintf_internal_r+0x11c0>
 10484f0:	94c2ca16 	blt	r18,r19,104901c <___vfiprintf_internal_r+0x11b0>
 10484f4:	dac12217 	ldw	r11,1160(sp)
 10484f8:	5c97883a 	add	r11,r11,r18
 10484fc:	dac12215 	stw	r11,1160(sp)
 1048500:	d8011b15 	stw	zero,1132(sp)
 1048504:	d811883a 	mov	r8,sp
 1048508:	003e8d06 	br	1047f40 <__alt_data_end+0xfffe7f40>
 104850c:	d9012017 	ldw	r4,1152(sp)
 1048510:	a00b883a 	mov	r5,r20
 1048514:	1042c2c0 	call	1042c2c <__swsetup_r>
 1048518:	10002c1e 	bne	r2,zero,10485cc <___vfiprintf_internal_r+0x760>
 104851c:	a0c0030b 	ldhu	r3,12(r20)
 1048520:	01000284 	movi	r4,10
 1048524:	1805883a 	mov	r2,r3
 1048528:	1080068c 	andi	r2,r2,26
 104852c:	113e731e 	bne	r2,r4,1047efc <__alt_data_end+0xfffe7efc>
 1048530:	a080038b 	ldhu	r2,14(r20)
 1048534:	113fffcc 	andi	r4,r2,65535
 1048538:	2120001c 	xori	r4,r4,32768
 104853c:	21200004 	addi	r4,r4,-32768
 1048540:	203e6e16 	blt	r4,zero,1047efc <__alt_data_end+0xfffe7efc>
 1048544:	a3001917 	ldw	r12,100(r20)
 1048548:	a2c00717 	ldw	r11,28(r20)
 104854c:	a2800917 	ldw	r10,36(r20)
 1048550:	d9012017 	ldw	r4,1152(sp)
 1048554:	d9c12117 	ldw	r7,1156(sp)
 1048558:	02410004 	movi	r9,1024
 104855c:	18ffff4c 	andi	r3,r3,65533
 1048560:	da4b883a 	add	r5,sp,r9
 1048564:	b00d883a 	mov	r6,r22
 1048568:	d8c1030d 	sth	r3,1036(sp)
 104856c:	db011915 	stw	r12,1124(sp)
 1048570:	d881038d 	sth	r2,1038(sp)
 1048574:	dac10715 	stw	r11,1052(sp)
 1048578:	da810915 	stw	r10,1060(sp)
 104857c:	dec10015 	stw	sp,1024(sp)
 1048580:	dec10415 	stw	sp,1040(sp)
 1048584:	da410215 	stw	r9,1032(sp)
 1048588:	da410515 	stw	r9,1044(sp)
 104858c:	d8010615 	stw	zero,1048(sp)
 1048590:	1047e6c0 	call	1047e6c <___vfiprintf_internal_r>
 1048594:	1021883a 	mov	r16,r2
 1048598:	10000416 	blt	r2,zero,10485ac <___vfiprintf_internal_r+0x740>
 104859c:	d9012017 	ldw	r4,1152(sp)
 10485a0:	d9410004 	addi	r5,sp,1024
 10485a4:	10446840 	call	1044684 <_fflush_r>
 10485a8:	1002fc1e 	bne	r2,zero,104919c <___vfiprintf_internal_r+0x1330>
 10485ac:	d881030b 	ldhu	r2,1036(sp)
 10485b0:	1080100c 	andi	r2,r2,64
 10485b4:	10000326 	beq	r2,zero,10485c4 <___vfiprintf_internal_r+0x758>
 10485b8:	a080030b 	ldhu	r2,12(r20)
 10485bc:	10801014 	ori	r2,r2,64
 10485c0:	a080030d 	sth	r2,12(r20)
 10485c4:	8005883a 	mov	r2,r16
 10485c8:	00000106 	br	10485d0 <___vfiprintf_internal_r+0x764>
 10485cc:	00bfffc4 	movi	r2,-1
 10485d0:	dfc13517 	ldw	ra,1236(sp)
 10485d4:	df013417 	ldw	fp,1232(sp)
 10485d8:	ddc13317 	ldw	r23,1228(sp)
 10485dc:	dd813217 	ldw	r22,1224(sp)
 10485e0:	dd413117 	ldw	r21,1220(sp)
 10485e4:	dd013017 	ldw	r20,1216(sp)
 10485e8:	dcc12f17 	ldw	r19,1212(sp)
 10485ec:	dc812e17 	ldw	r18,1208(sp)
 10485f0:	dc412d17 	ldw	r17,1204(sp)
 10485f4:	dc012c17 	ldw	r16,1200(sp)
 10485f8:	dec13604 	addi	sp,sp,1240
 10485fc:	f800283a 	ret
 1048600:	1044c2c0 	call	1044c2c <__sinit>
 1048604:	003e2b06 	br	1047eb4 <__alt_data_end+0xfffe7eb4>
 1048608:	04e7c83a 	sub	r19,zero,r19
 104860c:	d8812115 	stw	r2,1156(sp)
 1048610:	ad400114 	ori	r21,r21,4
 1048614:	80c00007 	ldb	r3,0(r16)
 1048618:	003e7306 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 104861c:	a880040c 	andi	r2,r21,16
 1048620:	1000e41e 	bne	r2,zero,10489b4 <___vfiprintf_internal_r+0xb48>
 1048624:	a880100c 	andi	r2,r21,64
 1048628:	1000e226 	beq	r2,zero,10489b4 <___vfiprintf_internal_r+0xb48>
 104862c:	da812117 	ldw	r10,1156(sp)
 1048630:	002d883a 	mov	r22,zero
 1048634:	0005883a 	mov	r2,zero
 1048638:	5480000b 	ldhu	r18,0(r10)
 104863c:	52800104 	addi	r10,r10,4
 1048640:	da812115 	stw	r10,1156(sp)
 1048644:	9009883a 	mov	r4,r18
 1048648:	003ee706 	br	10481e8 <__alt_data_end+0xfffe81e8>
 104864c:	da812117 	ldw	r10,1156(sp)
 1048650:	00800044 	movi	r2,1
 1048654:	54800017 	ldw	r18,0(r10)
 1048658:	55800117 	ldw	r22,4(r10)
 104865c:	52800204 	addi	r10,r10,8
 1048660:	da812115 	stw	r10,1156(sp)
 1048664:	9588b03a 	or	r4,r18,r22
 1048668:	003edf06 	br	10481e8 <__alt_data_end+0xfffe81e8>
 104866c:	02c04174 	movhi	r11,261
 1048670:	5afe2b04 	addi	r11,r11,-1876
 1048674:	d9811d85 	stb	r6,1142(sp)
 1048678:	dac12615 	stw	r11,1176(sp)
 104867c:	a900080c 	andi	r4,r21,32
 1048680:	d8812117 	ldw	r2,1156(sp)
 1048684:	2000a526 	beq	r4,zero,104891c <___vfiprintf_internal_r+0xab0>
 1048688:	da812117 	ldw	r10,1156(sp)
 104868c:	14800017 	ldw	r18,0(r2)
 1048690:	15800117 	ldw	r22,4(r2)
 1048694:	52800204 	addi	r10,r10,8
 1048698:	da812115 	stw	r10,1156(sp)
 104869c:	a880004c 	andi	r2,r21,1
 10486a0:	1001d926 	beq	r2,zero,1048e08 <___vfiprintf_internal_r+0xf9c>
 10486a4:	9588b03a 	or	r4,r18,r22
 10486a8:	20024426 	beq	r4,zero,1048fbc <___vfiprintf_internal_r+0x1150>
 10486ac:	00800c04 	movi	r2,48
 10486b0:	d8811d05 	stb	r2,1140(sp)
 10486b4:	d8c11d45 	stb	r3,1141(sp)
 10486b8:	ad400094 	ori	r21,r21,2
 10486bc:	00800084 	movi	r2,2
 10486c0:	003ec906 	br	10481e8 <__alt_data_end+0xfffe81e8>
 10486c4:	da812117 	ldw	r10,1156(sp)
 10486c8:	04800044 	movi	r18,1
 10486cc:	dac10004 	addi	r11,sp,1024
 10486d0:	50800017 	ldw	r2,0(r10)
 10486d4:	52800104 	addi	r10,r10,4
 10486d8:	d8011d85 	stb	zero,1142(sp)
 10486dc:	d8810005 	stb	r2,1024(sp)
 10486e0:	da812115 	stw	r10,1156(sp)
 10486e4:	9023883a 	mov	r17,r18
 10486e8:	dac12415 	stw	r11,1168(sp)
 10486ec:	0013883a 	mov	r9,zero
 10486f0:	003ee206 	br	104827c <__alt_data_end+0xfffe827c>
 10486f4:	ad402014 	ori	r21,r21,128
 10486f8:	80c00007 	ldb	r3,0(r16)
 10486fc:	003e3a06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048700:	8015883a 	mov	r10,r16
 1048704:	0027883a 	mov	r19,zero
 1048708:	18bff404 	addi	r2,r3,-48
 104870c:	50c00007 	ldb	r3,0(r10)
 1048710:	9cc002a4 	muli	r19,r19,10
 1048714:	84000044 	addi	r16,r16,1
 1048718:	8015883a 	mov	r10,r16
 104871c:	98a7883a 	add	r19,r19,r2
 1048720:	18bff404 	addi	r2,r3,-48
 1048724:	28bff92e 	bgeu	r5,r2,104870c <__alt_data_end+0xfffe870c>
 1048728:	003e3006 	br	1047fec <__alt_data_end+0xfffe7fec>
 104872c:	ad400414 	ori	r21,r21,16
 1048730:	d9811d85 	stb	r6,1142(sp)
 1048734:	a880080c 	andi	r2,r21,32
 1048738:	d8c12117 	ldw	r3,1156(sp)
 104873c:	10004b26 	beq	r2,zero,104886c <___vfiprintf_internal_r+0xa00>
 1048740:	da812117 	ldw	r10,1156(sp)
 1048744:	18800117 	ldw	r2,4(r3)
 1048748:	1c800017 	ldw	r18,0(r3)
 104874c:	52800204 	addi	r10,r10,8
 1048750:	da812115 	stw	r10,1156(sp)
 1048754:	102d883a 	mov	r22,r2
 1048758:	1001f116 	blt	r2,zero,1048f20 <___vfiprintf_internal_r+0x10b4>
 104875c:	db011d83 	ldbu	r12,1142(sp)
 1048760:	4823883a 	mov	r17,r9
 1048764:	00800044 	movi	r2,1
 1048768:	9588b03a 	or	r4,r18,r22
 104876c:	003ea106 	br	10481f4 <__alt_data_end+0xfffe81f4>
 1048770:	80c00007 	ldb	r3,0(r16)
 1048774:	82800044 	addi	r10,r16,1
 1048778:	1b027f26 	beq	r3,r12,1049178 <___vfiprintf_internal_r+0x130c>
 104877c:	18bff404 	addi	r2,r3,-48
 1048780:	5021883a 	mov	r16,r10
 1048784:	0013883a 	mov	r9,zero
 1048788:	28be1836 	bltu	r5,r2,1047fec <__alt_data_end+0xfffe7fec>
 104878c:	80c00007 	ldb	r3,0(r16)
 1048790:	4a4002a4 	muli	r9,r9,10
 1048794:	84000044 	addi	r16,r16,1
 1048798:	1253883a 	add	r9,r2,r9
 104879c:	18bff404 	addi	r2,r3,-48
 10487a0:	28bffa2e 	bgeu	r5,r2,104878c <__alt_data_end+0xfffe878c>
 10487a4:	483e110e 	bge	r9,zero,1047fec <__alt_data_end+0xfffe7fec>
 10487a8:	027fffc4 	movi	r9,-1
 10487ac:	003e0f06 	br	1047fec <__alt_data_end+0xfffe7fec>
 10487b0:	d9811d85 	stb	r6,1142(sp)
 10487b4:	a880080c 	andi	r2,r21,32
 10487b8:	1001ee26 	beq	r2,zero,1048f74 <___vfiprintf_internal_r+0x1108>
 10487bc:	da812117 	ldw	r10,1156(sp)
 10487c0:	dac12217 	ldw	r11,1160(sp)
 10487c4:	50800017 	ldw	r2,0(r10)
 10487c8:	5807d7fa 	srai	r3,r11,31
 10487cc:	52800104 	addi	r10,r10,4
 10487d0:	da812115 	stw	r10,1156(sp)
 10487d4:	12c00015 	stw	r11,0(r2)
 10487d8:	10c00115 	stw	r3,4(r2)
 10487dc:	003dd806 	br	1047f40 <__alt_data_end+0xfffe7f40>
 10487e0:	30803fcc 	andi	r2,r6,255
 10487e4:	1080201c 	xori	r2,r2,128
 10487e8:	10bfe004 	addi	r2,r2,-128
 10487ec:	1001df1e 	bne	r2,zero,1048f6c <___vfiprintf_internal_r+0x1100>
 10487f0:	01800804 	movi	r6,32
 10487f4:	80c00007 	ldb	r3,0(r16)
 10487f8:	003dfb06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 10487fc:	da812117 	ldw	r10,1156(sp)
 1048800:	dac12117 	ldw	r11,1156(sp)
 1048804:	d8011d85 	stb	zero,1142(sp)
 1048808:	52800017 	ldw	r10,0(r10)
 104880c:	5d800104 	addi	r22,r11,4
 1048810:	da812415 	stw	r10,1168(sp)
 1048814:	50023b26 	beq	r10,zero,1049104 <___vfiprintf_internal_r+0x1298>
 1048818:	d9012417 	ldw	r4,1168(sp)
 104881c:	48021f16 	blt	r9,zero,104909c <___vfiprintf_internal_r+0x1230>
 1048820:	480d883a 	mov	r6,r9
 1048824:	000b883a 	mov	r5,zero
 1048828:	da012a15 	stw	r8,1192(sp)
 104882c:	da412b15 	stw	r9,1196(sp)
 1048830:	10460e40 	call	10460e4 <memchr>
 1048834:	da012a17 	ldw	r8,1192(sp)
 1048838:	da412b17 	ldw	r9,1196(sp)
 104883c:	10024726 	beq	r2,zero,104915c <___vfiprintf_internal_r+0x12f0>
 1048840:	d8c12417 	ldw	r3,1168(sp)
 1048844:	10e3c83a 	sub	r17,r2,r3
 1048848:	4c41f616 	blt	r9,r17,1049024 <___vfiprintf_internal_r+0x11b8>
 104884c:	db011d83 	ldbu	r12,1142(sp)
 1048850:	dd812115 	stw	r22,1156(sp)
 1048854:	0013883a 	mov	r9,zero
 1048858:	003e8006 	br	104825c <__alt_data_end+0xfffe825c>
 104885c:	d9811d85 	stb	r6,1142(sp)
 1048860:	a880080c 	andi	r2,r21,32
 1048864:	d8c12117 	ldw	r3,1156(sp)
 1048868:	103fb51e 	bne	r2,zero,1048740 <__alt_data_end+0xfffe8740>
 104886c:	a880040c 	andi	r2,r21,16
 1048870:	10015e1e 	bne	r2,zero,1048dec <___vfiprintf_internal_r+0xf80>
 1048874:	a880100c 	andi	r2,r21,64
 1048878:	10015c26 	beq	r2,zero,1048dec <___vfiprintf_internal_r+0xf80>
 104887c:	1c80000f 	ldh	r18,0(r3)
 1048880:	da812117 	ldw	r10,1156(sp)
 1048884:	902dd7fa 	srai	r22,r18,31
 1048888:	52800104 	addi	r10,r10,4
 104888c:	da812115 	stw	r10,1156(sp)
 1048890:	b005883a 	mov	r2,r22
 1048894:	003fb006 	br	1048758 <__alt_data_end+0xfffe8758>
 1048898:	da812117 	ldw	r10,1156(sp)
 104889c:	00800c04 	movi	r2,48
 10488a0:	02c04174 	movhi	r11,261
 10488a4:	54800017 	ldw	r18,0(r10)
 10488a8:	d8811d05 	stb	r2,1140(sp)
 10488ac:	52800104 	addi	r10,r10,4
 10488b0:	00801e04 	movi	r2,120
 10488b4:	5afe3004 	addi	r11,r11,-1856
 10488b8:	d8811d45 	stb	r2,1141(sp)
 10488bc:	002d883a 	mov	r22,zero
 10488c0:	ad400094 	ori	r21,r21,2
 10488c4:	da812115 	stw	r10,1156(sp)
 10488c8:	dac12615 	stw	r11,1176(sp)
 10488cc:	00800084 	movi	r2,2
 10488d0:	9009883a 	mov	r4,r18
 10488d4:	003e4406 	br	10481e8 <__alt_data_end+0xfffe81e8>
 10488d8:	ad400814 	ori	r21,r21,32
 10488dc:	80c00007 	ldb	r3,0(r16)
 10488e0:	003dc106 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 10488e4:	ad401014 	ori	r21,r21,64
 10488e8:	80c00007 	ldb	r3,0(r16)
 10488ec:	003dbe06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 10488f0:	80c00007 	ldb	r3,0(r16)
 10488f4:	19c1de26 	beq	r3,r7,1049070 <___vfiprintf_internal_r+0x1204>
 10488f8:	ad400414 	ori	r21,r21,16
 10488fc:	003dba06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048900:	00804174 	movhi	r2,261
 1048904:	10be3004 	addi	r2,r2,-1856
 1048908:	d8812615 	stw	r2,1176(sp)
 104890c:	d9811d85 	stb	r6,1142(sp)
 1048910:	a900080c 	andi	r4,r21,32
 1048914:	d8812117 	ldw	r2,1156(sp)
 1048918:	203f5b1e 	bne	r4,zero,1048688 <__alt_data_end+0xfffe8688>
 104891c:	a900040c 	andi	r4,r21,16
 1048920:	2001a826 	beq	r4,zero,1048fc4 <___vfiprintf_internal_r+0x1158>
 1048924:	dac12117 	ldw	r11,1156(sp)
 1048928:	14800017 	ldw	r18,0(r2)
 104892c:	002d883a 	mov	r22,zero
 1048930:	5ac00104 	addi	r11,r11,4
 1048934:	dac12115 	stw	r11,1156(sp)
 1048938:	003f5806 	br	104869c <__alt_data_end+0xfffe869c>
 104893c:	da812117 	ldw	r10,1156(sp)
 1048940:	54c00017 	ldw	r19,0(r10)
 1048944:	50800104 	addi	r2,r10,4
 1048948:	983f2f16 	blt	r19,zero,1048608 <__alt_data_end+0xfffe8608>
 104894c:	d8812115 	stw	r2,1156(sp)
 1048950:	80c00007 	ldb	r3,0(r16)
 1048954:	003da406 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048958:	01800ac4 	movi	r6,43
 104895c:	80c00007 	ldb	r3,0(r16)
 1048960:	003da106 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048964:	ad400054 	ori	r21,r21,1
 1048968:	80c00007 	ldb	r3,0(r16)
 104896c:	003d9e06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048970:	d9811d85 	stb	r6,1142(sp)
 1048974:	18007126 	beq	r3,zero,1048b3c <___vfiprintf_internal_r+0xcd0>
 1048978:	04800044 	movi	r18,1
 104897c:	d8c10005 	stb	r3,1024(sp)
 1048980:	d8c10004 	addi	r3,sp,1024
 1048984:	d8011d85 	stb	zero,1142(sp)
 1048988:	9023883a 	mov	r17,r18
 104898c:	d8c12415 	stw	r3,1168(sp)
 1048990:	003f5606 	br	10486ec <__alt_data_end+0xfffe86ec>
 1048994:	dac12117 	ldw	r11,1156(sp)
 1048998:	002d883a 	mov	r22,zero
 104899c:	00800044 	movi	r2,1
 10489a0:	5c800017 	ldw	r18,0(r11)
 10489a4:	5ac00104 	addi	r11,r11,4
 10489a8:	dac12115 	stw	r11,1156(sp)
 10489ac:	9009883a 	mov	r4,r18
 10489b0:	003e0d06 	br	10481e8 <__alt_data_end+0xfffe81e8>
 10489b4:	dac12117 	ldw	r11,1156(sp)
 10489b8:	002d883a 	mov	r22,zero
 10489bc:	0005883a 	mov	r2,zero
 10489c0:	5c800017 	ldw	r18,0(r11)
 10489c4:	5ac00104 	addi	r11,r11,4
 10489c8:	dac12115 	stw	r11,1156(sp)
 10489cc:	9009883a 	mov	r4,r18
 10489d0:	003e0506 	br	10481e8 <__alt_data_end+0xfffe81e8>
 10489d4:	d9012017 	ldw	r4,1152(sp)
 10489d8:	a00b883a 	mov	r5,r20
 10489dc:	d9811a04 	addi	r6,sp,1128
 10489e0:	d8c12a15 	stw	r3,1192(sp)
 10489e4:	db012b15 	stw	r12,1196(sp)
 10489e8:	1047d580 	call	1047d58 <__sprint_r.part.0>
 10489ec:	d8c12a17 	ldw	r3,1192(sp)
 10489f0:	db012b17 	ldw	r12,1196(sp)
 10489f4:	1000571e 	bne	r2,zero,1048b54 <___vfiprintf_internal_r+0xce8>
 10489f8:	d9811b17 	ldw	r6,1132(sp)
 10489fc:	d8811c17 	ldw	r2,1136(sp)
 1048a00:	d811883a 	mov	r8,sp
 1048a04:	31400044 	addi	r5,r6,1
 1048a08:	003e3306 	br	10482d8 <__alt_data_end+0xfffe82d8>
 1048a0c:	d9411b17 	ldw	r5,1132(sp)
 1048a10:	d8c11c17 	ldw	r3,1136(sp)
 1048a14:	28800044 	addi	r2,r5,1
 1048a18:	d9011d87 	ldb	r4,1142(sp)
 1048a1c:	203e4d26 	beq	r4,zero,1048354 <__alt_data_end+0xfffe8354>
 1048a20:	01000044 	movi	r4,1
 1048a24:	d9411d84 	addi	r5,sp,1142
 1048a28:	1907883a 	add	r3,r3,r4
 1048a2c:	41400015 	stw	r5,0(r8)
 1048a30:	41000115 	stw	r4,4(r8)
 1048a34:	d8c11c15 	stw	r3,1136(sp)
 1048a38:	d8811b15 	stw	r2,1132(sp)
 1048a3c:	014001c4 	movi	r5,7
 1048a40:	2880aa16 	blt	r5,r2,1048cec <___vfiprintf_internal_r+0xe80>
 1048a44:	100b883a 	mov	r5,r2
 1048a48:	42000204 	addi	r8,r8,8
 1048a4c:	10800044 	addi	r2,r2,1
 1048a50:	003e4006 	br	1048354 <__alt_data_end+0xfffe8354>
 1048a54:	d9012017 	ldw	r4,1152(sp)
 1048a58:	a00b883a 	mov	r5,r20
 1048a5c:	d9811a04 	addi	r6,sp,1128
 1048a60:	d9c12a15 	stw	r7,1192(sp)
 1048a64:	db012b15 	stw	r12,1196(sp)
 1048a68:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048a6c:	d9c12a17 	ldw	r7,1192(sp)
 1048a70:	db012b17 	ldw	r12,1196(sp)
 1048a74:	1000371e 	bne	r2,zero,1048b54 <___vfiprintf_internal_r+0xce8>
 1048a78:	d9411b17 	ldw	r5,1132(sp)
 1048a7c:	d8c11c17 	ldw	r3,1136(sp)
 1048a80:	d811883a 	mov	r8,sp
 1048a84:	28800044 	addi	r2,r5,1
 1048a88:	003e4d06 	br	10483c0 <__alt_data_end+0xfffe83c0>
 1048a8c:	10803fcc 	andi	r2,r2,255
 1048a90:	00c00044 	movi	r3,1
 1048a94:	10fddf1e 	bne	r2,r3,1048214 <__alt_data_end+0xfffe8214>
 1048a98:	b000021e 	bne	r22,zero,1048aa4 <___vfiprintf_internal_r+0xc38>
 1048a9c:	00800244 	movi	r2,9
 1048aa0:	1480202e 	bgeu	r2,r18,1048b24 <___vfiprintf_internal_r+0xcb8>
 1048aa4:	dc012515 	stw	r16,1172(sp)
 1048aa8:	dc410a04 	addi	r17,sp,1064
 1048aac:	9021883a 	mov	r16,r18
 1048ab0:	da012415 	stw	r8,1168(sp)
 1048ab4:	b025883a 	mov	r18,r22
 1048ab8:	da412315 	stw	r9,1164(sp)
 1048abc:	602d883a 	mov	r22,r12
 1048ac0:	8009883a 	mov	r4,r16
 1048ac4:	900b883a 	mov	r5,r18
 1048ac8:	01800284 	movi	r6,10
 1048acc:	000f883a 	mov	r7,zero
 1048ad0:	104a0e40 	call	104a0e4 <__umoddi3>
 1048ad4:	10800c04 	addi	r2,r2,48
 1048ad8:	8c7fffc4 	addi	r17,r17,-1
 1048adc:	8009883a 	mov	r4,r16
 1048ae0:	900b883a 	mov	r5,r18
 1048ae4:	01800284 	movi	r6,10
 1048ae8:	000f883a 	mov	r7,zero
 1048aec:	88800005 	stb	r2,0(r17)
 1048af0:	1049b240 	call	1049b24 <__udivdi3>
 1048af4:	1021883a 	mov	r16,r2
 1048af8:	10c4b03a 	or	r2,r2,r3
 1048afc:	1825883a 	mov	r18,r3
 1048b00:	103fef1e 	bne	r2,zero,1048ac0 <__alt_data_end+0xfffe8ac0>
 1048b04:	da811e17 	ldw	r10,1144(sp)
 1048b08:	da012417 	ldw	r8,1168(sp)
 1048b0c:	da412317 	ldw	r9,1164(sp)
 1048b10:	dc412415 	stw	r17,1168(sp)
 1048b14:	b019883a 	mov	r12,r22
 1048b18:	dc012517 	ldw	r16,1172(sp)
 1048b1c:	5463c83a 	sub	r17,r10,r17
 1048b20:	003dce06 	br	104825c <__alt_data_end+0xfffe825c>
 1048b24:	94800c04 	addi	r18,r18,48
 1048b28:	d8c109c4 	addi	r3,sp,1063
 1048b2c:	dc8109c5 	stb	r18,1063(sp)
 1048b30:	dc412717 	ldw	r17,1180(sp)
 1048b34:	d8c12415 	stw	r3,1168(sp)
 1048b38:	003dc806 	br	104825c <__alt_data_end+0xfffe825c>
 1048b3c:	d8811c17 	ldw	r2,1136(sp)
 1048b40:	10000426 	beq	r2,zero,1048b54 <___vfiprintf_internal_r+0xce8>
 1048b44:	d9012017 	ldw	r4,1152(sp)
 1048b48:	a00b883a 	mov	r5,r20
 1048b4c:	d9811a04 	addi	r6,sp,1128
 1048b50:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048b54:	a080030b 	ldhu	r2,12(r20)
 1048b58:	1080100c 	andi	r2,r2,64
 1048b5c:	103e9b1e 	bne	r2,zero,10485cc <__alt_data_end+0xfffe85cc>
 1048b60:	d8812217 	ldw	r2,1160(sp)
 1048b64:	003e9a06 	br	10485d0 <__alt_data_end+0xfffe85d0>
 1048b68:	d9012017 	ldw	r4,1152(sp)
 1048b6c:	a00b883a 	mov	r5,r20
 1048b70:	d9811a04 	addi	r6,sp,1128
 1048b74:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048b78:	103ff61e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048b7c:	d9011b17 	ldw	r4,1132(sp)
 1048b80:	d8c11c17 	ldw	r3,1136(sp)
 1048b84:	d811883a 	mov	r8,sp
 1048b88:	21400044 	addi	r5,r4,1
 1048b8c:	003e4006 	br	1048490 <__alt_data_end+0xfffe8490>
 1048b90:	1800d61e 	bne	r3,zero,1048eec <___vfiprintf_internal_r+0x1080>
 1048b94:	dac12417 	ldw	r11,1168(sp)
 1048b98:	00800044 	movi	r2,1
 1048b9c:	dc400115 	stw	r17,4(sp)
 1048ba0:	dac00015 	stw	r11,0(sp)
 1048ba4:	dc411c15 	stw	r17,1136(sp)
 1048ba8:	d8811b15 	stw	r2,1132(sp)
 1048bac:	8807883a 	mov	r3,r17
 1048bb0:	d811883a 	mov	r8,sp
 1048bb4:	42000204 	addi	r8,r8,8
 1048bb8:	aac0010c 	andi	r11,r21,4
 1048bbc:	58000226 	beq	r11,zero,1048bc8 <___vfiprintf_internal_r+0xd5c>
 1048bc0:	9ca3c83a 	sub	r17,r19,r18
 1048bc4:	047e2616 	blt	zero,r17,1048460 <__alt_data_end+0xfffe8460>
 1048bc8:	94c0010e 	bge	r18,r19,1048bd0 <___vfiprintf_internal_r+0xd64>
 1048bcc:	9825883a 	mov	r18,r19
 1048bd0:	da812217 	ldw	r10,1160(sp)
 1048bd4:	5495883a 	add	r10,r10,r18
 1048bd8:	da812215 	stw	r10,1160(sp)
 1048bdc:	183e4826 	beq	r3,zero,1048500 <__alt_data_end+0xfffe8500>
 1048be0:	d9012017 	ldw	r4,1152(sp)
 1048be4:	a00b883a 	mov	r5,r20
 1048be8:	d9811a04 	addi	r6,sp,1128
 1048bec:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048bf0:	103e4326 	beq	r2,zero,1048500 <__alt_data_end+0xfffe8500>
 1048bf4:	003fd706 	br	1048b54 <__alt_data_end+0xfffe8b54>
 1048bf8:	9cadc83a 	sub	r22,r19,r18
 1048bfc:	05bde40e 	bge	zero,r22,1048390 <__alt_data_end+0xfffe8390>
 1048c00:	03000404 	movi	r12,16
 1048c04:	6581500e 	bge	r12,r22,1049148 <___vfiprintf_internal_r+0x12dc>
 1048c08:	00804174 	movhi	r2,261
 1048c0c:	10be9104 	addi	r2,r2,-1468
 1048c10:	d8812315 	stw	r2,1164(sp)
 1048c14:	8005883a 	mov	r2,r16
 1048c18:	038001c4 	movi	r14,7
 1048c1c:	b021883a 	mov	r16,r22
 1048c20:	da412515 	stw	r9,1172(sp)
 1048c24:	102d883a 	mov	r22,r2
 1048c28:	00000506 	br	1048c40 <___vfiprintf_internal_r+0xdd4>
 1048c2c:	29000084 	addi	r4,r5,2
 1048c30:	42000204 	addi	r8,r8,8
 1048c34:	100b883a 	mov	r5,r2
 1048c38:	843ffc04 	addi	r16,r16,-16
 1048c3c:	64000d0e 	bge	r12,r16,1048c74 <___vfiprintf_internal_r+0xe08>
 1048c40:	18c00404 	addi	r3,r3,16
 1048c44:	28800044 	addi	r2,r5,1
 1048c48:	45c00015 	stw	r23,0(r8)
 1048c4c:	43000115 	stw	r12,4(r8)
 1048c50:	d8c11c15 	stw	r3,1136(sp)
 1048c54:	d8811b15 	stw	r2,1132(sp)
 1048c58:	70bff40e 	bge	r14,r2,1048c2c <__alt_data_end+0xfffe8c2c>
 1048c5c:	1800151e 	bne	r3,zero,1048cb4 <___vfiprintf_internal_r+0xe48>
 1048c60:	843ffc04 	addi	r16,r16,-16
 1048c64:	000b883a 	mov	r5,zero
 1048c68:	01000044 	movi	r4,1
 1048c6c:	d811883a 	mov	r8,sp
 1048c70:	643ff316 	blt	r12,r16,1048c40 <__alt_data_end+0xfffe8c40>
 1048c74:	da412517 	ldw	r9,1172(sp)
 1048c78:	b005883a 	mov	r2,r22
 1048c7c:	802d883a 	mov	r22,r16
 1048c80:	1021883a 	mov	r16,r2
 1048c84:	da812317 	ldw	r10,1164(sp)
 1048c88:	1d87883a 	add	r3,r3,r22
 1048c8c:	45800115 	stw	r22,4(r8)
 1048c90:	42800015 	stw	r10,0(r8)
 1048c94:	d8c11c15 	stw	r3,1136(sp)
 1048c98:	d9011b15 	stw	r4,1132(sp)
 1048c9c:	008001c4 	movi	r2,7
 1048ca0:	11008d16 	blt	r2,r4,1048ed8 <___vfiprintf_internal_r+0x106c>
 1048ca4:	42000204 	addi	r8,r8,8
 1048ca8:	20800044 	addi	r2,r4,1
 1048cac:	200b883a 	mov	r5,r4
 1048cb0:	003db706 	br	1048390 <__alt_data_end+0xfffe8390>
 1048cb4:	d9012017 	ldw	r4,1152(sp)
 1048cb8:	a00b883a 	mov	r5,r20
 1048cbc:	d9811a04 	addi	r6,sp,1128
 1048cc0:	db012b15 	stw	r12,1196(sp)
 1048cc4:	db812a15 	stw	r14,1192(sp)
 1048cc8:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048ccc:	db012b17 	ldw	r12,1196(sp)
 1048cd0:	db812a17 	ldw	r14,1192(sp)
 1048cd4:	103f9f1e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048cd8:	d9411b17 	ldw	r5,1132(sp)
 1048cdc:	d8c11c17 	ldw	r3,1136(sp)
 1048ce0:	d811883a 	mov	r8,sp
 1048ce4:	29000044 	addi	r4,r5,1
 1048ce8:	003fd306 	br	1048c38 <__alt_data_end+0xfffe8c38>
 1048cec:	18006c1e 	bne	r3,zero,1048ea0 <___vfiprintf_internal_r+0x1034>
 1048cf0:	70004f26 	beq	r14,zero,1048e30 <___vfiprintf_internal_r+0xfc4>
 1048cf4:	d8811d04 	addi	r2,sp,1140
 1048cf8:	00c00084 	movi	r3,2
 1048cfc:	d8800015 	stw	r2,0(sp)
 1048d00:	d8c00115 	stw	r3,4(sp)
 1048d04:	2005883a 	mov	r2,r4
 1048d08:	d811883a 	mov	r8,sp
 1048d0c:	003d9b06 	br	104837c <__alt_data_end+0xfffe837c>
 1048d10:	1800571e 	bne	r3,zero,1048e70 <___vfiprintf_internal_r+0x1004>
 1048d14:	000b883a 	mov	r5,zero
 1048d18:	00800044 	movi	r2,1
 1048d1c:	d811883a 	mov	r8,sp
 1048d20:	003d9906 	br	1048388 <__alt_data_end+0xfffe8388>
 1048d24:	10803fcc 	andi	r2,r2,255
 1048d28:	1000251e 	bne	r2,zero,1048dc0 <___vfiprintf_internal_r+0xf54>
 1048d2c:	a880004c 	andi	r2,r21,1
 1048d30:	10007826 	beq	r2,zero,1048f14 <___vfiprintf_internal_r+0x10a8>
 1048d34:	00800c04 	movi	r2,48
 1048d38:	d8c109c4 	addi	r3,sp,1063
 1048d3c:	d88109c5 	stb	r2,1063(sp)
 1048d40:	dc412717 	ldw	r17,1180(sp)
 1048d44:	d8c12415 	stw	r3,1168(sp)
 1048d48:	003d4406 	br	104825c <__alt_data_end+0xfffe825c>
 1048d4c:	d9012617 	ldw	r4,1176(sp)
 1048d50:	dc410a04 	addi	r17,sp,1064
 1048d54:	908003cc 	andi	r2,r18,15
 1048d58:	b006973a 	slli	r3,r22,28
 1048d5c:	2085883a 	add	r2,r4,r2
 1048d60:	9024d13a 	srli	r18,r18,4
 1048d64:	10800003 	ldbu	r2,0(r2)
 1048d68:	b02cd13a 	srli	r22,r22,4
 1048d6c:	8c7fffc4 	addi	r17,r17,-1
 1048d70:	1ca4b03a 	or	r18,r3,r18
 1048d74:	88800005 	stb	r2,0(r17)
 1048d78:	9584b03a 	or	r2,r18,r22
 1048d7c:	103ff51e 	bne	r2,zero,1048d54 <__alt_data_end+0xfffe8d54>
 1048d80:	dac11e17 	ldw	r11,1144(sp)
 1048d84:	dc412415 	stw	r17,1168(sp)
 1048d88:	5c63c83a 	sub	r17,r11,r17
 1048d8c:	003d3306 	br	104825c <__alt_data_end+0xfffe825c>
 1048d90:	1800941e 	bne	r3,zero,1048fe4 <___vfiprintf_internal_r+0x1178>
 1048d94:	d8811d87 	ldb	r2,1142(sp)
 1048d98:	10006b26 	beq	r2,zero,1048f48 <___vfiprintf_internal_r+0x10dc>
 1048d9c:	00c00044 	movi	r3,1
 1048da0:	d9011d84 	addi	r4,sp,1142
 1048da4:	1805883a 	mov	r2,r3
 1048da8:	d9000015 	stw	r4,0(sp)
 1048dac:	d8c00115 	stw	r3,4(sp)
 1048db0:	d811883a 	mov	r8,sp
 1048db4:	003f2306 	br	1048a44 <__alt_data_end+0xfffe8a44>
 1048db8:	8023883a 	mov	r17,r16
 1048dbc:	003c7d06 	br	1047fb4 <__alt_data_end+0xfffe7fb4>
 1048dc0:	da810a04 	addi	r10,sp,1064
 1048dc4:	da812415 	stw	r10,1168(sp)
 1048dc8:	003d2406 	br	104825c <__alt_data_end+0xfffe825c>
 1048dcc:	d9012017 	ldw	r4,1152(sp)
 1048dd0:	a00b883a 	mov	r5,r20
 1048dd4:	d9811a04 	addi	r6,sp,1128
 1048dd8:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048ddc:	103f5d1e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048de0:	d8c11c17 	ldw	r3,1136(sp)
 1048de4:	d811883a 	mov	r8,sp
 1048de8:	003f7306 	br	1048bb8 <__alt_data_end+0xfffe8bb8>
 1048dec:	1c800017 	ldw	r18,0(r3)
 1048df0:	dac12117 	ldw	r11,1156(sp)
 1048df4:	902dd7fa 	srai	r22,r18,31
 1048df8:	5ac00104 	addi	r11,r11,4
 1048dfc:	dac12115 	stw	r11,1156(sp)
 1048e00:	b005883a 	mov	r2,r22
 1048e04:	003e5406 	br	1048758 <__alt_data_end+0xfffe8758>
 1048e08:	00800084 	movi	r2,2
 1048e0c:	9588b03a 	or	r4,r18,r22
 1048e10:	003cf506 	br	10481e8 <__alt_data_end+0xfffe81e8>
 1048e14:	d9012017 	ldw	r4,1152(sp)
 1048e18:	a00b883a 	mov	r5,r20
 1048e1c:	d9811a04 	addi	r6,sp,1128
 1048e20:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048e24:	103f4b1e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048e28:	d811883a 	mov	r8,sp
 1048e2c:	003cd106 	br	1048174 <__alt_data_end+0xfffe8174>
 1048e30:	000b883a 	mov	r5,zero
 1048e34:	2005883a 	mov	r2,r4
 1048e38:	d811883a 	mov	r8,sp
 1048e3c:	003d5206 	br	1048388 <__alt_data_end+0xfffe8388>
 1048e40:	10803fcc 	andi	r2,r2,255
 1048e44:	1080201c 	xori	r2,r2,128
 1048e48:	10bfe004 	addi	r2,r2,-128
 1048e4c:	01000c04 	movi	r4,48
 1048e50:	11008e26 	beq	r2,r4,104908c <___vfiprintf_internal_r+0x1220>
 1048e54:	da812417 	ldw	r10,1168(sp)
 1048e58:	dac11e17 	ldw	r11,1144(sp)
 1048e5c:	193fffc5 	stb	r4,-1(r3)
 1048e60:	52bfffc4 	addi	r10,r10,-1
 1048e64:	da812415 	stw	r10,1168(sp)
 1048e68:	5aa3c83a 	sub	r17,r11,r10
 1048e6c:	003cfb06 	br	104825c <__alt_data_end+0xfffe825c>
 1048e70:	d9012017 	ldw	r4,1152(sp)
 1048e74:	a00b883a 	mov	r5,r20
 1048e78:	d9811a04 	addi	r6,sp,1128
 1048e7c:	da412b15 	stw	r9,1196(sp)
 1048e80:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048e84:	da412b17 	ldw	r9,1196(sp)
 1048e88:	103f321e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048e8c:	d9411b17 	ldw	r5,1132(sp)
 1048e90:	d8c11c17 	ldw	r3,1136(sp)
 1048e94:	d811883a 	mov	r8,sp
 1048e98:	28800044 	addi	r2,r5,1
 1048e9c:	003d3a06 	br	1048388 <__alt_data_end+0xfffe8388>
 1048ea0:	d9012017 	ldw	r4,1152(sp)
 1048ea4:	a00b883a 	mov	r5,r20
 1048ea8:	d9811a04 	addi	r6,sp,1128
 1048eac:	da412b15 	stw	r9,1196(sp)
 1048eb0:	db812a15 	stw	r14,1192(sp)
 1048eb4:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048eb8:	da412b17 	ldw	r9,1196(sp)
 1048ebc:	db812a17 	ldw	r14,1192(sp)
 1048ec0:	103f241e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048ec4:	d9411b17 	ldw	r5,1132(sp)
 1048ec8:	d8c11c17 	ldw	r3,1136(sp)
 1048ecc:	d811883a 	mov	r8,sp
 1048ed0:	28800044 	addi	r2,r5,1
 1048ed4:	003d1f06 	br	1048354 <__alt_data_end+0xfffe8354>
 1048ed8:	1800781e 	bne	r3,zero,10490bc <___vfiprintf_internal_r+0x1250>
 1048edc:	000b883a 	mov	r5,zero
 1048ee0:	00800044 	movi	r2,1
 1048ee4:	d811883a 	mov	r8,sp
 1048ee8:	003d2906 	br	1048390 <__alt_data_end+0xfffe8390>
 1048eec:	d9012017 	ldw	r4,1152(sp)
 1048ef0:	a00b883a 	mov	r5,r20
 1048ef4:	d9811a04 	addi	r6,sp,1128
 1048ef8:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048efc:	103f151e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1048f00:	d8811b17 	ldw	r2,1132(sp)
 1048f04:	d8c11c17 	ldw	r3,1136(sp)
 1048f08:	d811883a 	mov	r8,sp
 1048f0c:	10800044 	addi	r2,r2,1
 1048f10:	003d4406 	br	1048424 <__alt_data_end+0xfffe8424>
 1048f14:	dac10a04 	addi	r11,sp,1064
 1048f18:	dac12415 	stw	r11,1168(sp)
 1048f1c:	003ccf06 	br	104825c <__alt_data_end+0xfffe825c>
 1048f20:	04a5c83a 	sub	r18,zero,r18
 1048f24:	9004c03a 	cmpne	r2,r18,zero
 1048f28:	05adc83a 	sub	r22,zero,r22
 1048f2c:	b0adc83a 	sub	r22,r22,r2
 1048f30:	03000b44 	movi	r12,45
 1048f34:	db011d85 	stb	r12,1142(sp)
 1048f38:	4823883a 	mov	r17,r9
 1048f3c:	00800044 	movi	r2,1
 1048f40:	9588b03a 	or	r4,r18,r22
 1048f44:	003cab06 	br	10481f4 <__alt_data_end+0xfffe81f4>
 1048f48:	000b883a 	mov	r5,zero
 1048f4c:	00800044 	movi	r2,1
 1048f50:	d811883a 	mov	r8,sp
 1048f54:	703d0c26 	beq	r14,zero,1048388 <__alt_data_end+0xfffe8388>
 1048f58:	00c00084 	movi	r3,2
 1048f5c:	d9011d04 	addi	r4,sp,1140
 1048f60:	d9000015 	stw	r4,0(sp)
 1048f64:	d8c00115 	stw	r3,4(sp)
 1048f68:	003d0406 	br	104837c <__alt_data_end+0xfffe837c>
 1048f6c:	80c00007 	ldb	r3,0(r16)
 1048f70:	003c1d06 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 1048f74:	a880040c 	andi	r2,r21,16
 1048f78:	1000091e 	bne	r2,zero,1048fa0 <___vfiprintf_internal_r+0x1134>
 1048f7c:	aac0100c 	andi	r11,r21,64
 1048f80:	58000726 	beq	r11,zero,1048fa0 <___vfiprintf_internal_r+0x1134>
 1048f84:	da812117 	ldw	r10,1156(sp)
 1048f88:	dac12217 	ldw	r11,1160(sp)
 1048f8c:	50800017 	ldw	r2,0(r10)
 1048f90:	52800104 	addi	r10,r10,4
 1048f94:	da812115 	stw	r10,1156(sp)
 1048f98:	12c0000d 	sth	r11,0(r2)
 1048f9c:	003be806 	br	1047f40 <__alt_data_end+0xfffe7f40>
 1048fa0:	da812117 	ldw	r10,1156(sp)
 1048fa4:	dac12217 	ldw	r11,1160(sp)
 1048fa8:	50800017 	ldw	r2,0(r10)
 1048fac:	52800104 	addi	r10,r10,4
 1048fb0:	da812115 	stw	r10,1156(sp)
 1048fb4:	12c00015 	stw	r11,0(r2)
 1048fb8:	003be106 	br	1047f40 <__alt_data_end+0xfffe7f40>
 1048fbc:	00800084 	movi	r2,2
 1048fc0:	003c8906 	br	10481e8 <__alt_data_end+0xfffe81e8>
 1048fc4:	a900100c 	andi	r4,r21,64
 1048fc8:	20001f26 	beq	r4,zero,1049048 <___vfiprintf_internal_r+0x11dc>
 1048fcc:	da812117 	ldw	r10,1156(sp)
 1048fd0:	1480000b 	ldhu	r18,0(r2)
 1048fd4:	002d883a 	mov	r22,zero
 1048fd8:	52800104 	addi	r10,r10,4
 1048fdc:	da812115 	stw	r10,1156(sp)
 1048fe0:	003dae06 	br	104869c <__alt_data_end+0xfffe869c>
 1048fe4:	d9012017 	ldw	r4,1152(sp)
 1048fe8:	a00b883a 	mov	r5,r20
 1048fec:	d9811a04 	addi	r6,sp,1128
 1048ff0:	da412b15 	stw	r9,1196(sp)
 1048ff4:	db812a15 	stw	r14,1192(sp)
 1048ff8:	1047d580 	call	1047d58 <__sprint_r.part.0>
 1048ffc:	da412b17 	ldw	r9,1196(sp)
 1049000:	db812a17 	ldw	r14,1192(sp)
 1049004:	103ed31e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1049008:	d9411b17 	ldw	r5,1132(sp)
 104900c:	d8c11c17 	ldw	r3,1136(sp)
 1049010:	d811883a 	mov	r8,sp
 1049014:	28800044 	addi	r2,r5,1
 1049018:	003e7f06 	br	1048a18 <__alt_data_end+0xfffe8a18>
 104901c:	9825883a 	mov	r18,r19
 1049020:	003d3406 	br	10484f4 <__alt_data_end+0xfffe84f4>
 1049024:	4823883a 	mov	r17,r9
 1049028:	003e0806 	br	104884c <__alt_data_end+0xfffe884c>
 104902c:	d9012017 	ldw	r4,1152(sp)
 1049030:	a00b883a 	mov	r5,r20
 1049034:	d9811a04 	addi	r6,sp,1128
 1049038:	1047d580 	call	1047d58 <__sprint_r.part.0>
 104903c:	103ec51e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 1049040:	d8c11c17 	ldw	r3,1136(sp)
 1049044:	003ee006 	br	1048bc8 <__alt_data_end+0xfffe8bc8>
 1049048:	dac12117 	ldw	r11,1156(sp)
 104904c:	14800017 	ldw	r18,0(r2)
 1049050:	002d883a 	mov	r22,zero
 1049054:	5ac00104 	addi	r11,r11,4
 1049058:	dac12115 	stw	r11,1156(sp)
 104905c:	003d8f06 	br	104869c <__alt_data_end+0xfffe869c>
 1049060:	02c04174 	movhi	r11,261
 1049064:	5afe9104 	addi	r11,r11,-1468
 1049068:	dac12315 	stw	r11,1164(sp)
 104906c:	003ce306 	br	10483fc <__alt_data_end+0xfffe83fc>
 1049070:	80c00043 	ldbu	r3,1(r16)
 1049074:	ad400814 	ori	r21,r21,32
 1049078:	84000044 	addi	r16,r16,1
 104907c:	18c03fcc 	andi	r3,r3,255
 1049080:	18c0201c 	xori	r3,r3,128
 1049084:	18ffe004 	addi	r3,r3,-128
 1049088:	003bd706 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 104908c:	dac11e17 	ldw	r11,1144(sp)
 1049090:	d8c12417 	ldw	r3,1168(sp)
 1049094:	58e3c83a 	sub	r17,r11,r3
 1049098:	003c7006 	br	104825c <__alt_data_end+0xfffe825c>
 104909c:	da012a15 	stw	r8,1192(sp)
 10490a0:	1040b740 	call	1040b74 <strlen>
 10490a4:	1023883a 	mov	r17,r2
 10490a8:	db011d83 	ldbu	r12,1142(sp)
 10490ac:	dd812115 	stw	r22,1156(sp)
 10490b0:	0013883a 	mov	r9,zero
 10490b4:	da012a17 	ldw	r8,1192(sp)
 10490b8:	003c6806 	br	104825c <__alt_data_end+0xfffe825c>
 10490bc:	d9012017 	ldw	r4,1152(sp)
 10490c0:	a00b883a 	mov	r5,r20
 10490c4:	d9811a04 	addi	r6,sp,1128
 10490c8:	da412b15 	stw	r9,1196(sp)
 10490cc:	1047d580 	call	1047d58 <__sprint_r.part.0>
 10490d0:	da412b17 	ldw	r9,1196(sp)
 10490d4:	103e9f1e 	bne	r2,zero,1048b54 <__alt_data_end+0xfffe8b54>
 10490d8:	d9411b17 	ldw	r5,1132(sp)
 10490dc:	d8c11c17 	ldw	r3,1136(sp)
 10490e0:	d811883a 	mov	r8,sp
 10490e4:	28800044 	addi	r2,r5,1
 10490e8:	003ca906 	br	1048390 <__alt_data_end+0xfffe8390>
 10490ec:	d9411b17 	ldw	r5,1132(sp)
 10490f0:	01004174 	movhi	r4,261
 10490f4:	213e9504 	addi	r4,r4,-1452
 10490f8:	d9012315 	stw	r4,1164(sp)
 10490fc:	29400044 	addi	r5,r5,1
 1049100:	003c8806 	br	1048324 <__alt_data_end+0xfffe8324>
 1049104:	00800184 	movi	r2,6
 1049108:	1240012e 	bgeu	r2,r9,1049110 <___vfiprintf_internal_r+0x12a4>
 104910c:	1013883a 	mov	r9,r2
 1049110:	4823883a 	mov	r17,r9
 1049114:	4825883a 	mov	r18,r9
 1049118:	48001516 	blt	r9,zero,1049170 <___vfiprintf_internal_r+0x1304>
 104911c:	00804174 	movhi	r2,261
 1049120:	10be3504 	addi	r2,r2,-1836
 1049124:	dd812115 	stw	r22,1156(sp)
 1049128:	d8812415 	stw	r2,1168(sp)
 104912c:	003d6f06 	br	10486ec <__alt_data_end+0xfffe86ec>
 1049130:	d9411b17 	ldw	r5,1132(sp)
 1049134:	02c04174 	movhi	r11,261
 1049138:	5afe9504 	addi	r11,r11,-1452
 104913c:	dac12315 	stw	r11,1164(sp)
 1049140:	29400044 	addi	r5,r5,1
 1049144:	003ce106 	br	10484cc <__alt_data_end+0xfffe84cc>
 1049148:	01004174 	movhi	r4,261
 104914c:	213e9104 	addi	r4,r4,-1468
 1049150:	d9012315 	stw	r4,1164(sp)
 1049154:	1009883a 	mov	r4,r2
 1049158:	003eca06 	br	1048c84 <__alt_data_end+0xfffe8c84>
 104915c:	4823883a 	mov	r17,r9
 1049160:	db011d83 	ldbu	r12,1142(sp)
 1049164:	dd812115 	stw	r22,1156(sp)
 1049168:	0013883a 	mov	r9,zero
 104916c:	003c3b06 	br	104825c <__alt_data_end+0xfffe825c>
 1049170:	0025883a 	mov	r18,zero
 1049174:	003fe906 	br	104911c <__alt_data_end+0xfffe911c>
 1049178:	dac12117 	ldw	r11,1156(sp)
 104917c:	8005883a 	mov	r2,r16
 1049180:	5021883a 	mov	r16,r10
 1049184:	5a400017 	ldw	r9,0(r11)
 1049188:	58c00104 	addi	r3,r11,4
 104918c:	d8c12115 	stw	r3,1156(sp)
 1049190:	48000a16 	blt	r9,zero,10491bc <___vfiprintf_internal_r+0x1350>
 1049194:	10c00047 	ldb	r3,1(r2)
 1049198:	003b9306 	br	1047fe8 <__alt_data_end+0xfffe7fe8>
 104919c:	043fffc4 	movi	r16,-1
 10491a0:	003d0206 	br	10485ac <__alt_data_end+0xfffe85ac>
 10491a4:	94c0010e 	bge	r18,r19,10491ac <___vfiprintf_internal_r+0x1340>
 10491a8:	9825883a 	mov	r18,r19
 10491ac:	da812217 	ldw	r10,1160(sp)
 10491b0:	5495883a 	add	r10,r10,r18
 10491b4:	da812215 	stw	r10,1160(sp)
 10491b8:	003cd106 	br	1048500 <__alt_data_end+0xfffe8500>
 10491bc:	027fffc4 	movi	r9,-1
 10491c0:	10c00047 	ldb	r3,1(r2)
 10491c4:	003b8806 	br	1047fe8 <__alt_data_end+0xfffe7fe8>

010491c8 <__vfiprintf_internal>:
 10491c8:	2007883a 	mov	r3,r4
 10491cc:	01004174 	movhi	r4,261
 10491d0:	21055004 	addi	r4,r4,5440
 10491d4:	21000017 	ldw	r4,0(r4)
 10491d8:	2805883a 	mov	r2,r5
 10491dc:	300f883a 	mov	r7,r6
 10491e0:	180b883a 	mov	r5,r3
 10491e4:	100d883a 	mov	r6,r2
 10491e8:	1047e6c1 	jmpi	1047e6c <___vfiprintf_internal_r>

010491ec <_write_r>:
 10491ec:	defffd04 	addi	sp,sp,-12
 10491f0:	dc000015 	stw	r16,0(sp)
 10491f4:	04004174 	movhi	r16,261
 10491f8:	dc400115 	stw	r17,4(sp)
 10491fc:	840c2004 	addi	r16,r16,12416
 1049200:	2023883a 	mov	r17,r4
 1049204:	2809883a 	mov	r4,r5
 1049208:	300b883a 	mov	r5,r6
 104920c:	380d883a 	mov	r6,r7
 1049210:	dfc00215 	stw	ra,8(sp)
 1049214:	80000015 	stw	zero,0(r16)
 1049218:	104d6180 	call	104d618 <write>
 104921c:	00ffffc4 	movi	r3,-1
 1049220:	10c00526 	beq	r2,r3,1049238 <_write_r+0x4c>
 1049224:	dfc00217 	ldw	ra,8(sp)
 1049228:	dc400117 	ldw	r17,4(sp)
 104922c:	dc000017 	ldw	r16,0(sp)
 1049230:	dec00304 	addi	sp,sp,12
 1049234:	f800283a 	ret
 1049238:	80c00017 	ldw	r3,0(r16)
 104923c:	183ff926 	beq	r3,zero,1049224 <__alt_data_end+0xfffe9224>
 1049240:	88c00015 	stw	r3,0(r17)
 1049244:	003ff706 	br	1049224 <__alt_data_end+0xfffe9224>

01049248 <_close_r>:
 1049248:	defffd04 	addi	sp,sp,-12
 104924c:	dc000015 	stw	r16,0(sp)
 1049250:	04004174 	movhi	r16,261
 1049254:	dc400115 	stw	r17,4(sp)
 1049258:	840c2004 	addi	r16,r16,12416
 104925c:	2023883a 	mov	r17,r4
 1049260:	2809883a 	mov	r4,r5
 1049264:	dfc00215 	stw	ra,8(sp)
 1049268:	80000015 	stw	zero,0(r16)
 104926c:	104cd8c0 	call	104cd8c <close>
 1049270:	00ffffc4 	movi	r3,-1
 1049274:	10c00526 	beq	r2,r3,104928c <_close_r+0x44>
 1049278:	dfc00217 	ldw	ra,8(sp)
 104927c:	dc400117 	ldw	r17,4(sp)
 1049280:	dc000017 	ldw	r16,0(sp)
 1049284:	dec00304 	addi	sp,sp,12
 1049288:	f800283a 	ret
 104928c:	80c00017 	ldw	r3,0(r16)
 1049290:	183ff926 	beq	r3,zero,1049278 <__alt_data_end+0xfffe9278>
 1049294:	88c00015 	stw	r3,0(r17)
 1049298:	003ff706 	br	1049278 <__alt_data_end+0xfffe9278>

0104929c <_calloc_r>:
 104929c:	298b383a 	mul	r5,r5,r6
 10492a0:	defffe04 	addi	sp,sp,-8
 10492a4:	dc000015 	stw	r16,0(sp)
 10492a8:	dfc00115 	stw	ra,4(sp)
 10492ac:	104593c0 	call	104593c <_malloc_r>
 10492b0:	1021883a 	mov	r16,r2
 10492b4:	10002826 	beq	r2,zero,1049358 <_calloc_r+0xbc>
 10492b8:	11bfff17 	ldw	r6,-4(r2)
 10492bc:	00bfff04 	movi	r2,-4
 10492c0:	00c00904 	movi	r3,36
 10492c4:	308c703a 	and	r6,r6,r2
 10492c8:	308d883a 	add	r6,r6,r2
 10492cc:	19801436 	bltu	r3,r6,1049320 <_calloc_r+0x84>
 10492d0:	008004c4 	movi	r2,19
 10492d4:	11800936 	bltu	r2,r6,10492fc <_calloc_r+0x60>
 10492d8:	8005883a 	mov	r2,r16
 10492dc:	10000015 	stw	zero,0(r2)
 10492e0:	10000115 	stw	zero,4(r2)
 10492e4:	10000215 	stw	zero,8(r2)
 10492e8:	8005883a 	mov	r2,r16
 10492ec:	dfc00117 	ldw	ra,4(sp)
 10492f0:	dc000017 	ldw	r16,0(sp)
 10492f4:	dec00204 	addi	sp,sp,8
 10492f8:	f800283a 	ret
 10492fc:	80000015 	stw	zero,0(r16)
 1049300:	80000115 	stw	zero,4(r16)
 1049304:	008006c4 	movi	r2,27
 1049308:	11800d2e 	bgeu	r2,r6,1049340 <_calloc_r+0xa4>
 104930c:	80000215 	stw	zero,8(r16)
 1049310:	80000315 	stw	zero,12(r16)
 1049314:	30c00c26 	beq	r6,r3,1049348 <_calloc_r+0xac>
 1049318:	80800404 	addi	r2,r16,16
 104931c:	003fef06 	br	10492dc <__alt_data_end+0xfffe92dc>
 1049320:	8009883a 	mov	r4,r16
 1049324:	000b883a 	mov	r5,zero
 1049328:	10464600 	call	1046460 <memset>
 104932c:	8005883a 	mov	r2,r16
 1049330:	dfc00117 	ldw	ra,4(sp)
 1049334:	dc000017 	ldw	r16,0(sp)
 1049338:	dec00204 	addi	sp,sp,8
 104933c:	f800283a 	ret
 1049340:	80800204 	addi	r2,r16,8
 1049344:	003fe506 	br	10492dc <__alt_data_end+0xfffe92dc>
 1049348:	80000415 	stw	zero,16(r16)
 104934c:	80800604 	addi	r2,r16,24
 1049350:	80000515 	stw	zero,20(r16)
 1049354:	003fe106 	br	10492dc <__alt_data_end+0xfffe92dc>
 1049358:	0005883a 	mov	r2,zero
 104935c:	003fe306 	br	10492ec <__alt_data_end+0xfffe92ec>

01049360 <_fclose_r>:
 1049360:	28003226 	beq	r5,zero,104942c <_fclose_r+0xcc>
 1049364:	defffc04 	addi	sp,sp,-16
 1049368:	dc400115 	stw	r17,4(sp)
 104936c:	2023883a 	mov	r17,r4
 1049370:	dc000015 	stw	r16,0(sp)
 1049374:	dfc00315 	stw	ra,12(sp)
 1049378:	dc800215 	stw	r18,8(sp)
 104937c:	2821883a 	mov	r16,r5
 1049380:	1044c3c0 	call	1044c3c <__sfp_lock_acquire>
 1049384:	88000226 	beq	r17,zero,1049390 <_fclose_r+0x30>
 1049388:	88800e17 	ldw	r2,56(r17)
 104938c:	10002926 	beq	r2,zero,1049434 <_fclose_r+0xd4>
 1049390:	8080030f 	ldh	r2,12(r16)
 1049394:	10002226 	beq	r2,zero,1049420 <_fclose_r+0xc0>
 1049398:	8809883a 	mov	r4,r17
 104939c:	800b883a 	mov	r5,r16
 10493a0:	10446840 	call	1044684 <_fflush_r>
 10493a4:	1025883a 	mov	r18,r2
 10493a8:	80800b17 	ldw	r2,44(r16)
 10493ac:	10000426 	beq	r2,zero,10493c0 <_fclose_r+0x60>
 10493b0:	81400717 	ldw	r5,28(r16)
 10493b4:	8809883a 	mov	r4,r17
 10493b8:	103ee83a 	callr	r2
 10493bc:	10002616 	blt	r2,zero,1049458 <_fclose_r+0xf8>
 10493c0:	8080030b 	ldhu	r2,12(r16)
 10493c4:	1080200c 	andi	r2,r2,128
 10493c8:	10001f1e 	bne	r2,zero,1049448 <_fclose_r+0xe8>
 10493cc:	81400c17 	ldw	r5,48(r16)
 10493d0:	28000526 	beq	r5,zero,10493e8 <_fclose_r+0x88>
 10493d4:	80801004 	addi	r2,r16,64
 10493d8:	28800226 	beq	r5,r2,10493e4 <_fclose_r+0x84>
 10493dc:	8809883a 	mov	r4,r17
 10493e0:	1044da00 	call	1044da0 <_free_r>
 10493e4:	80000c15 	stw	zero,48(r16)
 10493e8:	81401117 	ldw	r5,68(r16)
 10493ec:	28000326 	beq	r5,zero,10493fc <_fclose_r+0x9c>
 10493f0:	8809883a 	mov	r4,r17
 10493f4:	1044da00 	call	1044da0 <_free_r>
 10493f8:	80001115 	stw	zero,68(r16)
 10493fc:	8000030d 	sth	zero,12(r16)
 1049400:	1044c400 	call	1044c40 <__sfp_lock_release>
 1049404:	9005883a 	mov	r2,r18
 1049408:	dfc00317 	ldw	ra,12(sp)
 104940c:	dc800217 	ldw	r18,8(sp)
 1049410:	dc400117 	ldw	r17,4(sp)
 1049414:	dc000017 	ldw	r16,0(sp)
 1049418:	dec00404 	addi	sp,sp,16
 104941c:	f800283a 	ret
 1049420:	1044c400 	call	1044c40 <__sfp_lock_release>
 1049424:	0005883a 	mov	r2,zero
 1049428:	003ff706 	br	1049408 <__alt_data_end+0xfffe9408>
 104942c:	0005883a 	mov	r2,zero
 1049430:	f800283a 	ret
 1049434:	8809883a 	mov	r4,r17
 1049438:	1044c2c0 	call	1044c2c <__sinit>
 104943c:	8080030f 	ldh	r2,12(r16)
 1049440:	103fd51e 	bne	r2,zero,1049398 <__alt_data_end+0xfffe9398>
 1049444:	003ff606 	br	1049420 <__alt_data_end+0xfffe9420>
 1049448:	81400417 	ldw	r5,16(r16)
 104944c:	8809883a 	mov	r4,r17
 1049450:	1044da00 	call	1044da0 <_free_r>
 1049454:	003fdd06 	br	10493cc <__alt_data_end+0xfffe93cc>
 1049458:	04bfffc4 	movi	r18,-1
 104945c:	003fd806 	br	10493c0 <__alt_data_end+0xfffe93c0>

01049460 <fclose>:
 1049460:	00804174 	movhi	r2,261
 1049464:	10855004 	addi	r2,r2,5440
 1049468:	200b883a 	mov	r5,r4
 104946c:	11000017 	ldw	r4,0(r2)
 1049470:	10493601 	jmpi	1049360 <_fclose_r>

01049474 <_fputwc_r>:
 1049474:	3080030b 	ldhu	r2,12(r6)
 1049478:	defff804 	addi	sp,sp,-32
 104947c:	dcc00415 	stw	r19,16(sp)
 1049480:	dc800315 	stw	r18,12(sp)
 1049484:	dc000115 	stw	r16,4(sp)
 1049488:	dfc00715 	stw	ra,28(sp)
 104948c:	dd400615 	stw	r21,24(sp)
 1049490:	dd000515 	stw	r20,20(sp)
 1049494:	dc400215 	stw	r17,8(sp)
 1049498:	10c8000c 	andi	r3,r2,8192
 104949c:	3021883a 	mov	r16,r6
 10494a0:	2027883a 	mov	r19,r4
 10494a4:	2825883a 	mov	r18,r5
 10494a8:	1800051e 	bne	r3,zero,10494c0 <_fputwc_r+0x4c>
 10494ac:	30c01917 	ldw	r3,100(r6)
 10494b0:	10880014 	ori	r2,r2,8192
 10494b4:	3080030d 	sth	r2,12(r6)
 10494b8:	18880014 	ori	r2,r3,8192
 10494bc:	30801915 	stw	r2,100(r6)
 10494c0:	104572c0 	call	104572c <__locale_mb_cur_max>
 10494c4:	00c00044 	movi	r3,1
 10494c8:	10c03e26 	beq	r2,r3,10495c4 <_fputwc_r+0x150>
 10494cc:	9809883a 	mov	r4,r19
 10494d0:	d80b883a 	mov	r5,sp
 10494d4:	900d883a 	mov	r6,r18
 10494d8:	81c01704 	addi	r7,r16,92
 10494dc:	10499240 	call	1049924 <_wcrtomb_r>
 10494e0:	1029883a 	mov	r20,r2
 10494e4:	00bfffc4 	movi	r2,-1
 10494e8:	a0802026 	beq	r20,r2,104956c <_fputwc_r+0xf8>
 10494ec:	d9400003 	ldbu	r5,0(sp)
 10494f0:	a0001c26 	beq	r20,zero,1049564 <_fputwc_r+0xf0>
 10494f4:	0023883a 	mov	r17,zero
 10494f8:	05400284 	movi	r21,10
 10494fc:	00000906 	br	1049524 <_fputwc_r+0xb0>
 1049500:	80800017 	ldw	r2,0(r16)
 1049504:	11400005 	stb	r5,0(r2)
 1049508:	80c00017 	ldw	r3,0(r16)
 104950c:	18c00044 	addi	r3,r3,1
 1049510:	80c00015 	stw	r3,0(r16)
 1049514:	8c400044 	addi	r17,r17,1
 1049518:	dc45883a 	add	r2,sp,r17
 104951c:	8d00112e 	bgeu	r17,r20,1049564 <_fputwc_r+0xf0>
 1049520:	11400003 	ldbu	r5,0(r2)
 1049524:	80c00217 	ldw	r3,8(r16)
 1049528:	18ffffc4 	addi	r3,r3,-1
 104952c:	80c00215 	stw	r3,8(r16)
 1049530:	183ff30e 	bge	r3,zero,1049500 <__alt_data_end+0xfffe9500>
 1049534:	80800617 	ldw	r2,24(r16)
 1049538:	18801916 	blt	r3,r2,10495a0 <_fputwc_r+0x12c>
 104953c:	80800017 	ldw	r2,0(r16)
 1049540:	11400005 	stb	r5,0(r2)
 1049544:	80800017 	ldw	r2,0(r16)
 1049548:	10c00003 	ldbu	r3,0(r2)
 104954c:	10800044 	addi	r2,r2,1
 1049550:	1d402326 	beq	r3,r21,10495e0 <_fputwc_r+0x16c>
 1049554:	80800015 	stw	r2,0(r16)
 1049558:	8c400044 	addi	r17,r17,1
 104955c:	dc45883a 	add	r2,sp,r17
 1049560:	8d3fef36 	bltu	r17,r20,1049520 <__alt_data_end+0xfffe9520>
 1049564:	9005883a 	mov	r2,r18
 1049568:	00000406 	br	104957c <_fputwc_r+0x108>
 104956c:	80c0030b 	ldhu	r3,12(r16)
 1049570:	a005883a 	mov	r2,r20
 1049574:	18c01014 	ori	r3,r3,64
 1049578:	80c0030d 	sth	r3,12(r16)
 104957c:	dfc00717 	ldw	ra,28(sp)
 1049580:	dd400617 	ldw	r21,24(sp)
 1049584:	dd000517 	ldw	r20,20(sp)
 1049588:	dcc00417 	ldw	r19,16(sp)
 104958c:	dc800317 	ldw	r18,12(sp)
 1049590:	dc400217 	ldw	r17,8(sp)
 1049594:	dc000117 	ldw	r16,4(sp)
 1049598:	dec00804 	addi	sp,sp,32
 104959c:	f800283a 	ret
 10495a0:	9809883a 	mov	r4,r19
 10495a4:	29403fcc 	andi	r5,r5,255
 10495a8:	800d883a 	mov	r6,r16
 10495ac:	10497b40 	call	10497b4 <__swbuf_r>
 10495b0:	10bfffe0 	cmpeqi	r2,r2,-1
 10495b4:	10803fcc 	andi	r2,r2,255
 10495b8:	103fd626 	beq	r2,zero,1049514 <__alt_data_end+0xfffe9514>
 10495bc:	00bfffc4 	movi	r2,-1
 10495c0:	003fee06 	br	104957c <__alt_data_end+0xfffe957c>
 10495c4:	90ffffc4 	addi	r3,r18,-1
 10495c8:	01003f84 	movi	r4,254
 10495cc:	20ffbf36 	bltu	r4,r3,10494cc <__alt_data_end+0xfffe94cc>
 10495d0:	900b883a 	mov	r5,r18
 10495d4:	dc800005 	stb	r18,0(sp)
 10495d8:	1029883a 	mov	r20,r2
 10495dc:	003fc506 	br	10494f4 <__alt_data_end+0xfffe94f4>
 10495e0:	9809883a 	mov	r4,r19
 10495e4:	a80b883a 	mov	r5,r21
 10495e8:	800d883a 	mov	r6,r16
 10495ec:	10497b40 	call	10497b4 <__swbuf_r>
 10495f0:	10bfffe0 	cmpeqi	r2,r2,-1
 10495f4:	003fef06 	br	10495b4 <__alt_data_end+0xfffe95b4>

010495f8 <fputwc>:
 10495f8:	defffc04 	addi	sp,sp,-16
 10495fc:	dc000115 	stw	r16,4(sp)
 1049600:	04004174 	movhi	r16,261
 1049604:	84055004 	addi	r16,r16,5440
 1049608:	dc400215 	stw	r17,8(sp)
 104960c:	2023883a 	mov	r17,r4
 1049610:	81000017 	ldw	r4,0(r16)
 1049614:	dfc00315 	stw	ra,12(sp)
 1049618:	280d883a 	mov	r6,r5
 104961c:	20000626 	beq	r4,zero,1049638 <fputwc+0x40>
 1049620:	20800e17 	ldw	r2,56(r4)
 1049624:	1000041e 	bne	r2,zero,1049638 <fputwc+0x40>
 1049628:	d9400015 	stw	r5,0(sp)
 104962c:	1044c2c0 	call	1044c2c <__sinit>
 1049630:	81000017 	ldw	r4,0(r16)
 1049634:	d9800017 	ldw	r6,0(sp)
 1049638:	880b883a 	mov	r5,r17
 104963c:	dfc00317 	ldw	ra,12(sp)
 1049640:	dc400217 	ldw	r17,8(sp)
 1049644:	dc000117 	ldw	r16,4(sp)
 1049648:	dec00404 	addi	sp,sp,16
 104964c:	10494741 	jmpi	1049474 <_fputwc_r>

01049650 <_fstat_r>:
 1049650:	defffd04 	addi	sp,sp,-12
 1049654:	dc000015 	stw	r16,0(sp)
 1049658:	04004174 	movhi	r16,261
 104965c:	dc400115 	stw	r17,4(sp)
 1049660:	840c2004 	addi	r16,r16,12416
 1049664:	2023883a 	mov	r17,r4
 1049668:	2809883a 	mov	r4,r5
 104966c:	300b883a 	mov	r5,r6
 1049670:	dfc00215 	stw	ra,8(sp)
 1049674:	80000015 	stw	zero,0(r16)
 1049678:	104ced80 	call	104ced8 <fstat>
 104967c:	00ffffc4 	movi	r3,-1
 1049680:	10c00526 	beq	r2,r3,1049698 <_fstat_r+0x48>
 1049684:	dfc00217 	ldw	ra,8(sp)
 1049688:	dc400117 	ldw	r17,4(sp)
 104968c:	dc000017 	ldw	r16,0(sp)
 1049690:	dec00304 	addi	sp,sp,12
 1049694:	f800283a 	ret
 1049698:	80c00017 	ldw	r3,0(r16)
 104969c:	183ff926 	beq	r3,zero,1049684 <__alt_data_end+0xfffe9684>
 10496a0:	88c00015 	stw	r3,0(r17)
 10496a4:	003ff706 	br	1049684 <__alt_data_end+0xfffe9684>

010496a8 <_isatty_r>:
 10496a8:	defffd04 	addi	sp,sp,-12
 10496ac:	dc000015 	stw	r16,0(sp)
 10496b0:	04004174 	movhi	r16,261
 10496b4:	dc400115 	stw	r17,4(sp)
 10496b8:	840c2004 	addi	r16,r16,12416
 10496bc:	2023883a 	mov	r17,r4
 10496c0:	2809883a 	mov	r4,r5
 10496c4:	dfc00215 	stw	ra,8(sp)
 10496c8:	80000015 	stw	zero,0(r16)
 10496cc:	104cfd80 	call	104cfd8 <isatty>
 10496d0:	00ffffc4 	movi	r3,-1
 10496d4:	10c00526 	beq	r2,r3,10496ec <_isatty_r+0x44>
 10496d8:	dfc00217 	ldw	ra,8(sp)
 10496dc:	dc400117 	ldw	r17,4(sp)
 10496e0:	dc000017 	ldw	r16,0(sp)
 10496e4:	dec00304 	addi	sp,sp,12
 10496e8:	f800283a 	ret
 10496ec:	80c00017 	ldw	r3,0(r16)
 10496f0:	183ff926 	beq	r3,zero,10496d8 <__alt_data_end+0xfffe96d8>
 10496f4:	88c00015 	stw	r3,0(r17)
 10496f8:	003ff706 	br	10496d8 <__alt_data_end+0xfffe96d8>

010496fc <_lseek_r>:
 10496fc:	defffd04 	addi	sp,sp,-12
 1049700:	dc000015 	stw	r16,0(sp)
 1049704:	04004174 	movhi	r16,261
 1049708:	dc400115 	stw	r17,4(sp)
 104970c:	840c2004 	addi	r16,r16,12416
 1049710:	2023883a 	mov	r17,r4
 1049714:	2809883a 	mov	r4,r5
 1049718:	300b883a 	mov	r5,r6
 104971c:	380d883a 	mov	r6,r7
 1049720:	dfc00215 	stw	ra,8(sp)
 1049724:	80000015 	stw	zero,0(r16)
 1049728:	104d1b00 	call	104d1b0 <lseek>
 104972c:	00ffffc4 	movi	r3,-1
 1049730:	10c00526 	beq	r2,r3,1049748 <_lseek_r+0x4c>
 1049734:	dfc00217 	ldw	ra,8(sp)
 1049738:	dc400117 	ldw	r17,4(sp)
 104973c:	dc000017 	ldw	r16,0(sp)
 1049740:	dec00304 	addi	sp,sp,12
 1049744:	f800283a 	ret
 1049748:	80c00017 	ldw	r3,0(r16)
 104974c:	183ff926 	beq	r3,zero,1049734 <__alt_data_end+0xfffe9734>
 1049750:	88c00015 	stw	r3,0(r17)
 1049754:	003ff706 	br	1049734 <__alt_data_end+0xfffe9734>

01049758 <_read_r>:
 1049758:	defffd04 	addi	sp,sp,-12
 104975c:	dc000015 	stw	r16,0(sp)
 1049760:	04004174 	movhi	r16,261
 1049764:	dc400115 	stw	r17,4(sp)
 1049768:	840c2004 	addi	r16,r16,12416
 104976c:	2023883a 	mov	r17,r4
 1049770:	2809883a 	mov	r4,r5
 1049774:	300b883a 	mov	r5,r6
 1049778:	380d883a 	mov	r6,r7
 104977c:	dfc00215 	stw	ra,8(sp)
 1049780:	80000015 	stw	zero,0(r16)
 1049784:	104d38c0 	call	104d38c <read>
 1049788:	00ffffc4 	movi	r3,-1
 104978c:	10c00526 	beq	r2,r3,10497a4 <_read_r+0x4c>
 1049790:	dfc00217 	ldw	ra,8(sp)
 1049794:	dc400117 	ldw	r17,4(sp)
 1049798:	dc000017 	ldw	r16,0(sp)
 104979c:	dec00304 	addi	sp,sp,12
 10497a0:	f800283a 	ret
 10497a4:	80c00017 	ldw	r3,0(r16)
 10497a8:	183ff926 	beq	r3,zero,1049790 <__alt_data_end+0xfffe9790>
 10497ac:	88c00015 	stw	r3,0(r17)
 10497b0:	003ff706 	br	1049790 <__alt_data_end+0xfffe9790>

010497b4 <__swbuf_r>:
 10497b4:	defffc04 	addi	sp,sp,-16
 10497b8:	dc800215 	stw	r18,8(sp)
 10497bc:	dc400115 	stw	r17,4(sp)
 10497c0:	dc000015 	stw	r16,0(sp)
 10497c4:	dfc00315 	stw	ra,12(sp)
 10497c8:	2025883a 	mov	r18,r4
 10497cc:	2823883a 	mov	r17,r5
 10497d0:	3021883a 	mov	r16,r6
 10497d4:	20000226 	beq	r4,zero,10497e0 <__swbuf_r+0x2c>
 10497d8:	20800e17 	ldw	r2,56(r4)
 10497dc:	10004126 	beq	r2,zero,10498e4 <__swbuf_r+0x130>
 10497e0:	80c00617 	ldw	r3,24(r16)
 10497e4:	8180030b 	ldhu	r6,12(r16)
 10497e8:	80c00215 	stw	r3,8(r16)
 10497ec:	30c0020c 	andi	r3,r6,8
 10497f0:	18003526 	beq	r3,zero,10498c8 <__swbuf_r+0x114>
 10497f4:	80c00417 	ldw	r3,16(r16)
 10497f8:	18003326 	beq	r3,zero,10498c8 <__swbuf_r+0x114>
 10497fc:	3088000c 	andi	r2,r6,8192
 1049800:	8c403fcc 	andi	r17,r17,255
 1049804:	10001726 	beq	r2,zero,1049864 <__swbuf_r+0xb0>
 1049808:	80800017 	ldw	r2,0(r16)
 104980c:	81000517 	ldw	r4,20(r16)
 1049810:	10c7c83a 	sub	r3,r2,r3
 1049814:	19001d0e 	bge	r3,r4,104988c <__swbuf_r+0xd8>
 1049818:	18c00044 	addi	r3,r3,1
 104981c:	81400217 	ldw	r5,8(r16)
 1049820:	11000044 	addi	r4,r2,1
 1049824:	81000015 	stw	r4,0(r16)
 1049828:	297fffc4 	addi	r5,r5,-1
 104982c:	81400215 	stw	r5,8(r16)
 1049830:	14400005 	stb	r17,0(r2)
 1049834:	80800517 	ldw	r2,20(r16)
 1049838:	10c01d26 	beq	r2,r3,10498b0 <__swbuf_r+0xfc>
 104983c:	8080030b 	ldhu	r2,12(r16)
 1049840:	1080004c 	andi	r2,r2,1
 1049844:	1000181e 	bne	r2,zero,10498a8 <__swbuf_r+0xf4>
 1049848:	8805883a 	mov	r2,r17
 104984c:	dfc00317 	ldw	ra,12(sp)
 1049850:	dc800217 	ldw	r18,8(sp)
 1049854:	dc400117 	ldw	r17,4(sp)
 1049858:	dc000017 	ldw	r16,0(sp)
 104985c:	dec00404 	addi	sp,sp,16
 1049860:	f800283a 	ret
 1049864:	81001917 	ldw	r4,100(r16)
 1049868:	00b7ffc4 	movi	r2,-8193
 104986c:	31880014 	ori	r6,r6,8192
 1049870:	2084703a 	and	r2,r4,r2
 1049874:	80801915 	stw	r2,100(r16)
 1049878:	80800017 	ldw	r2,0(r16)
 104987c:	81000517 	ldw	r4,20(r16)
 1049880:	8180030d 	sth	r6,12(r16)
 1049884:	10c7c83a 	sub	r3,r2,r3
 1049888:	193fe316 	blt	r3,r4,1049818 <__alt_data_end+0xfffe9818>
 104988c:	9009883a 	mov	r4,r18
 1049890:	800b883a 	mov	r5,r16
 1049894:	10446840 	call	1044684 <_fflush_r>
 1049898:	1000091e 	bne	r2,zero,10498c0 <__swbuf_r+0x10c>
 104989c:	80800017 	ldw	r2,0(r16)
 10498a0:	00c00044 	movi	r3,1
 10498a4:	003fdd06 	br	104981c <__alt_data_end+0xfffe981c>
 10498a8:	00800284 	movi	r2,10
 10498ac:	88bfe61e 	bne	r17,r2,1049848 <__alt_data_end+0xfffe9848>
 10498b0:	9009883a 	mov	r4,r18
 10498b4:	800b883a 	mov	r5,r16
 10498b8:	10446840 	call	1044684 <_fflush_r>
 10498bc:	103fe226 	beq	r2,zero,1049848 <__alt_data_end+0xfffe9848>
 10498c0:	00bfffc4 	movi	r2,-1
 10498c4:	003fe106 	br	104984c <__alt_data_end+0xfffe984c>
 10498c8:	9009883a 	mov	r4,r18
 10498cc:	800b883a 	mov	r5,r16
 10498d0:	1042c2c0 	call	1042c2c <__swsetup_r>
 10498d4:	1000051e 	bne	r2,zero,10498ec <__swbuf_r+0x138>
 10498d8:	8180030b 	ldhu	r6,12(r16)
 10498dc:	80c00417 	ldw	r3,16(r16)
 10498e0:	003fc606 	br	10497fc <__alt_data_end+0xfffe97fc>
 10498e4:	1044c2c0 	call	1044c2c <__sinit>
 10498e8:	003fbd06 	br	10497e0 <__alt_data_end+0xfffe97e0>
 10498ec:	80c0030b 	ldhu	r3,12(r16)
 10498f0:	00bfffc4 	movi	r2,-1
 10498f4:	18c01014 	ori	r3,r3,64
 10498f8:	80c0030d 	sth	r3,12(r16)
 10498fc:	00c00244 	movi	r3,9
 1049900:	90c00015 	stw	r3,0(r18)
 1049904:	003fd106 	br	104984c <__alt_data_end+0xfffe984c>

01049908 <__swbuf>:
 1049908:	00c04174 	movhi	r3,261
 104990c:	18c55004 	addi	r3,r3,5440
 1049910:	2005883a 	mov	r2,r4
 1049914:	19000017 	ldw	r4,0(r3)
 1049918:	280d883a 	mov	r6,r5
 104991c:	100b883a 	mov	r5,r2
 1049920:	10497b41 	jmpi	10497b4 <__swbuf_r>

01049924 <_wcrtomb_r>:
 1049924:	defff604 	addi	sp,sp,-40
 1049928:	00804174 	movhi	r2,261
 104992c:	dc800815 	stw	r18,32(sp)
 1049930:	dc400715 	stw	r17,28(sp)
 1049934:	dc000615 	stw	r16,24(sp)
 1049938:	10855404 	addi	r2,r2,5456
 104993c:	dfc00915 	stw	ra,36(sp)
 1049940:	2021883a 	mov	r16,r4
 1049944:	3823883a 	mov	r17,r7
 1049948:	14800017 	ldw	r18,0(r2)
 104994c:	28001426 	beq	r5,zero,10499a0 <_wcrtomb_r+0x7c>
 1049950:	d9400415 	stw	r5,16(sp)
 1049954:	d9800515 	stw	r6,20(sp)
 1049958:	10457200 	call	1045720 <__locale_charset>
 104995c:	d9400417 	ldw	r5,16(sp)
 1049960:	d9800517 	ldw	r6,20(sp)
 1049964:	8009883a 	mov	r4,r16
 1049968:	dc400015 	stw	r17,0(sp)
 104996c:	100f883a 	mov	r7,r2
 1049970:	903ee83a 	callr	r18
 1049974:	00ffffc4 	movi	r3,-1
 1049978:	10c0031e 	bne	r2,r3,1049988 <_wcrtomb_r+0x64>
 104997c:	88000015 	stw	zero,0(r17)
 1049980:	00c02284 	movi	r3,138
 1049984:	80c00015 	stw	r3,0(r16)
 1049988:	dfc00917 	ldw	ra,36(sp)
 104998c:	dc800817 	ldw	r18,32(sp)
 1049990:	dc400717 	ldw	r17,28(sp)
 1049994:	dc000617 	ldw	r16,24(sp)
 1049998:	dec00a04 	addi	sp,sp,40
 104999c:	f800283a 	ret
 10499a0:	10457200 	call	1045720 <__locale_charset>
 10499a4:	8009883a 	mov	r4,r16
 10499a8:	dc400015 	stw	r17,0(sp)
 10499ac:	d9400104 	addi	r5,sp,4
 10499b0:	000d883a 	mov	r6,zero
 10499b4:	100f883a 	mov	r7,r2
 10499b8:	903ee83a 	callr	r18
 10499bc:	003fed06 	br	1049974 <__alt_data_end+0xfffe9974>

010499c0 <wcrtomb>:
 10499c0:	defff504 	addi	sp,sp,-44
 10499c4:	dc400515 	stw	r17,20(sp)
 10499c8:	dc000415 	stw	r16,16(sp)
 10499cc:	dfc00a15 	stw	ra,40(sp)
 10499d0:	dd400915 	stw	r21,36(sp)
 10499d4:	dd000815 	stw	r20,32(sp)
 10499d8:	dcc00715 	stw	r19,28(sp)
 10499dc:	dc800615 	stw	r18,24(sp)
 10499e0:	2021883a 	mov	r16,r4
 10499e4:	3023883a 	mov	r17,r6
 10499e8:	20001d26 	beq	r4,zero,1049a60 <wcrtomb+0xa0>
 10499ec:	04804174 	movhi	r18,261
 10499f0:	94855004 	addi	r18,r18,5440
 10499f4:	00804174 	movhi	r2,261
 10499f8:	95400017 	ldw	r21,0(r18)
 10499fc:	10855404 	addi	r2,r2,5456
 1049a00:	15000017 	ldw	r20,0(r2)
 1049a04:	2827883a 	mov	r19,r5
 1049a08:	10457200 	call	1045720 <__locale_charset>
 1049a0c:	a809883a 	mov	r4,r21
 1049a10:	dc400015 	stw	r17,0(sp)
 1049a14:	800b883a 	mov	r5,r16
 1049a18:	980d883a 	mov	r6,r19
 1049a1c:	100f883a 	mov	r7,r2
 1049a20:	a03ee83a 	callr	r20
 1049a24:	00ffffc4 	movi	r3,-1
 1049a28:	10c0041e 	bne	r2,r3,1049a3c <wcrtomb+0x7c>
 1049a2c:	90c00017 	ldw	r3,0(r18)
 1049a30:	01002284 	movi	r4,138
 1049a34:	88000015 	stw	zero,0(r17)
 1049a38:	19000015 	stw	r4,0(r3)
 1049a3c:	dfc00a17 	ldw	ra,40(sp)
 1049a40:	dd400917 	ldw	r21,36(sp)
 1049a44:	dd000817 	ldw	r20,32(sp)
 1049a48:	dcc00717 	ldw	r19,28(sp)
 1049a4c:	dc800617 	ldw	r18,24(sp)
 1049a50:	dc400517 	ldw	r17,20(sp)
 1049a54:	dc000417 	ldw	r16,16(sp)
 1049a58:	dec00b04 	addi	sp,sp,44
 1049a5c:	f800283a 	ret
 1049a60:	04804174 	movhi	r18,261
 1049a64:	94855004 	addi	r18,r18,5440
 1049a68:	00804174 	movhi	r2,261
 1049a6c:	94c00017 	ldw	r19,0(r18)
 1049a70:	10855404 	addi	r2,r2,5456
 1049a74:	14000017 	ldw	r16,0(r2)
 1049a78:	10457200 	call	1045720 <__locale_charset>
 1049a7c:	9809883a 	mov	r4,r19
 1049a80:	dc400015 	stw	r17,0(sp)
 1049a84:	d9400104 	addi	r5,sp,4
 1049a88:	000d883a 	mov	r6,zero
 1049a8c:	100f883a 	mov	r7,r2
 1049a90:	803ee83a 	callr	r16
 1049a94:	003fe306 	br	1049a24 <__alt_data_end+0xfffe9a24>

01049a98 <__ascii_wctomb>:
 1049a98:	28000526 	beq	r5,zero,1049ab0 <__ascii_wctomb+0x18>
 1049a9c:	00803fc4 	movi	r2,255
 1049aa0:	11800536 	bltu	r2,r6,1049ab8 <__ascii_wctomb+0x20>
 1049aa4:	29800005 	stb	r6,0(r5)
 1049aa8:	00800044 	movi	r2,1
 1049aac:	f800283a 	ret
 1049ab0:	0005883a 	mov	r2,zero
 1049ab4:	f800283a 	ret
 1049ab8:	00802284 	movi	r2,138
 1049abc:	20800015 	stw	r2,0(r4)
 1049ac0:	00bfffc4 	movi	r2,-1
 1049ac4:	f800283a 	ret

01049ac8 <_wctomb_r>:
 1049ac8:	00804174 	movhi	r2,261
 1049acc:	defff904 	addi	sp,sp,-28
 1049ad0:	10855404 	addi	r2,r2,5456
 1049ad4:	dfc00615 	stw	ra,24(sp)
 1049ad8:	dc400515 	stw	r17,20(sp)
 1049adc:	dc000415 	stw	r16,16(sp)
 1049ae0:	3823883a 	mov	r17,r7
 1049ae4:	14000017 	ldw	r16,0(r2)
 1049ae8:	d9000115 	stw	r4,4(sp)
 1049aec:	d9400215 	stw	r5,8(sp)
 1049af0:	d9800315 	stw	r6,12(sp)
 1049af4:	10457200 	call	1045720 <__locale_charset>
 1049af8:	d9000117 	ldw	r4,4(sp)
 1049afc:	d9400217 	ldw	r5,8(sp)
 1049b00:	d9800317 	ldw	r6,12(sp)
 1049b04:	dc400015 	stw	r17,0(sp)
 1049b08:	100f883a 	mov	r7,r2
 1049b0c:	803ee83a 	callr	r16
 1049b10:	dfc00617 	ldw	ra,24(sp)
 1049b14:	dc400517 	ldw	r17,20(sp)
 1049b18:	dc000417 	ldw	r16,16(sp)
 1049b1c:	dec00704 	addi	sp,sp,28
 1049b20:	f800283a 	ret

01049b24 <__udivdi3>:
 1049b24:	defff504 	addi	sp,sp,-44
 1049b28:	dcc00415 	stw	r19,16(sp)
 1049b2c:	dc000115 	stw	r16,4(sp)
 1049b30:	dfc00a15 	stw	ra,40(sp)
 1049b34:	df000915 	stw	fp,36(sp)
 1049b38:	ddc00815 	stw	r23,32(sp)
 1049b3c:	dd800715 	stw	r22,28(sp)
 1049b40:	dd400615 	stw	r21,24(sp)
 1049b44:	dd000515 	stw	r20,20(sp)
 1049b48:	dc800315 	stw	r18,12(sp)
 1049b4c:	dc400215 	stw	r17,8(sp)
 1049b50:	2027883a 	mov	r19,r4
 1049b54:	2821883a 	mov	r16,r5
 1049b58:	3800421e 	bne	r7,zero,1049c64 <__udivdi3+0x140>
 1049b5c:	3025883a 	mov	r18,r6
 1049b60:	2023883a 	mov	r17,r4
 1049b64:	2980542e 	bgeu	r5,r6,1049cb8 <__udivdi3+0x194>
 1049b68:	00bfffd4 	movui	r2,65535
 1049b6c:	282d883a 	mov	r22,r5
 1049b70:	1180a836 	bltu	r2,r6,1049e14 <__udivdi3+0x2f0>
 1049b74:	00803fc4 	movi	r2,255
 1049b78:	1181422e 	bgeu	r2,r6,104a084 <__udivdi3+0x560>
 1049b7c:	00800204 	movi	r2,8
 1049b80:	1007883a 	mov	r3,r2
 1049b84:	3084d83a 	srl	r2,r6,r2
 1049b88:	01004174 	movhi	r4,261
 1049b8c:	213de604 	addi	r4,r4,-2152
 1049b90:	2085883a 	add	r2,r4,r2
 1049b94:	10800003 	ldbu	r2,0(r2)
 1049b98:	10c7883a 	add	r3,r2,r3
 1049b9c:	00800804 	movi	r2,32
 1049ba0:	10c5c83a 	sub	r2,r2,r3
 1049ba4:	10000526 	beq	r2,zero,1049bbc <__udivdi3+0x98>
 1049ba8:	80a0983a 	sll	r16,r16,r2
 1049bac:	98c6d83a 	srl	r3,r19,r3
 1049bb0:	30a4983a 	sll	r18,r6,r2
 1049bb4:	98a2983a 	sll	r17,r19,r2
 1049bb8:	80ecb03a 	or	r22,r16,r3
 1049bbc:	902ad43a 	srli	r21,r18,16
 1049bc0:	b009883a 	mov	r4,r22
 1049bc4:	953fffcc 	andi	r20,r18,65535
 1049bc8:	a80b883a 	mov	r5,r21
 1049bcc:	104a7980 	call	104a798 <__umodsi3>
 1049bd0:	b009883a 	mov	r4,r22
 1049bd4:	a80b883a 	mov	r5,r21
 1049bd8:	1027883a 	mov	r19,r2
 1049bdc:	104a7900 	call	104a790 <__udivsi3>
 1049be0:	1021883a 	mov	r16,r2
 1049be4:	8806d43a 	srli	r3,r17,16
 1049be8:	9804943a 	slli	r2,r19,16
 1049bec:	8527383a 	mul	r19,r16,r20
 1049bf0:	10c4b03a 	or	r2,r2,r3
 1049bf4:	14c0052e 	bgeu	r2,r19,1049c0c <__udivdi3+0xe8>
 1049bf8:	1485883a 	add	r2,r2,r18
 1049bfc:	80ffffc4 	addi	r3,r16,-1
 1049c00:	14800136 	bltu	r2,r18,1049c08 <__udivdi3+0xe4>
 1049c04:	14c13436 	bltu	r2,r19,104a0d8 <__udivdi3+0x5b4>
 1049c08:	1821883a 	mov	r16,r3
 1049c0c:	14e7c83a 	sub	r19,r2,r19
 1049c10:	9809883a 	mov	r4,r19
 1049c14:	a80b883a 	mov	r5,r21
 1049c18:	104a7980 	call	104a798 <__umodsi3>
 1049c1c:	102d883a 	mov	r22,r2
 1049c20:	9809883a 	mov	r4,r19
 1049c24:	a80b883a 	mov	r5,r21
 1049c28:	104a7900 	call	104a790 <__udivsi3>
 1049c2c:	b02c943a 	slli	r22,r22,16
 1049c30:	1529383a 	mul	r20,r2,r20
 1049c34:	8c7fffcc 	andi	r17,r17,65535
 1049c38:	b462b03a 	or	r17,r22,r17
 1049c3c:	8d00052e 	bgeu	r17,r20,1049c54 <__udivdi3+0x130>
 1049c40:	8ca3883a 	add	r17,r17,r18
 1049c44:	10ffffc4 	addi	r3,r2,-1
 1049c48:	8c80f636 	bltu	r17,r18,104a024 <__udivdi3+0x500>
 1049c4c:	8d00f52e 	bgeu	r17,r20,104a024 <__udivdi3+0x500>
 1049c50:	10bfff84 	addi	r2,r2,-2
 1049c54:	8020943a 	slli	r16,r16,16
 1049c58:	0007883a 	mov	r3,zero
 1049c5c:	1404b03a 	or	r2,r2,r16
 1049c60:	00005b06 	br	1049dd0 <__udivdi3+0x2ac>
 1049c64:	29c05836 	bltu	r5,r7,1049dc8 <__udivdi3+0x2a4>
 1049c68:	00bfffd4 	movui	r2,65535
 1049c6c:	11c0642e 	bgeu	r2,r7,1049e00 <__udivdi3+0x2dc>
 1049c70:	00804034 	movhi	r2,256
 1049c74:	10bfffc4 	addi	r2,r2,-1
 1049c78:	11c0f32e 	bgeu	r2,r7,104a048 <__udivdi3+0x524>
 1049c7c:	00c00604 	movi	r3,24
 1049c80:	180b883a 	mov	r5,r3
 1049c84:	38c6d83a 	srl	r3,r7,r3
 1049c88:	00804174 	movhi	r2,261
 1049c8c:	10bde604 	addi	r2,r2,-2152
 1049c90:	10c7883a 	add	r3,r2,r3
 1049c94:	18c00003 	ldbu	r3,0(r3)
 1049c98:	01000804 	movi	r4,32
 1049c9c:	1947883a 	add	r3,r3,r5
 1049ca0:	20e5c83a 	sub	r18,r4,r3
 1049ca4:	9000661e 	bne	r18,zero,1049e40 <__udivdi3+0x31c>
 1049ca8:	3c00f936 	bltu	r7,r16,104a090 <__udivdi3+0x56c>
 1049cac:	9985403a 	cmpgeu	r2,r19,r6
 1049cb0:	0007883a 	mov	r3,zero
 1049cb4:	00004606 	br	1049dd0 <__udivdi3+0x2ac>
 1049cb8:	3000041e 	bne	r6,zero,1049ccc <__udivdi3+0x1a8>
 1049cbc:	01000044 	movi	r4,1
 1049cc0:	000b883a 	mov	r5,zero
 1049cc4:	104a7900 	call	104a790 <__udivsi3>
 1049cc8:	1025883a 	mov	r18,r2
 1049ccc:	00bfffd4 	movui	r2,65535
 1049cd0:	1480562e 	bgeu	r2,r18,1049e2c <__udivdi3+0x308>
 1049cd4:	00804034 	movhi	r2,256
 1049cd8:	10bfffc4 	addi	r2,r2,-1
 1049cdc:	1480e32e 	bgeu	r2,r18,104a06c <__udivdi3+0x548>
 1049ce0:	00800604 	movi	r2,24
 1049ce4:	1007883a 	mov	r3,r2
 1049ce8:	9084d83a 	srl	r2,r18,r2
 1049cec:	01004174 	movhi	r4,261
 1049cf0:	213de604 	addi	r4,r4,-2152
 1049cf4:	2085883a 	add	r2,r4,r2
 1049cf8:	10800003 	ldbu	r2,0(r2)
 1049cfc:	10c5883a 	add	r2,r2,r3
 1049d00:	00c00804 	movi	r3,32
 1049d04:	1887c83a 	sub	r3,r3,r2
 1049d08:	1800911e 	bne	r3,zero,1049f50 <__udivdi3+0x42c>
 1049d0c:	9028d43a 	srli	r20,r18,16
 1049d10:	84a1c83a 	sub	r16,r16,r18
 1049d14:	957fffcc 	andi	r21,r18,65535
 1049d18:	00c00044 	movi	r3,1
 1049d1c:	8009883a 	mov	r4,r16
 1049d20:	a00b883a 	mov	r5,r20
 1049d24:	d8c00015 	stw	r3,0(sp)
 1049d28:	104a7980 	call	104a798 <__umodsi3>
 1049d2c:	8009883a 	mov	r4,r16
 1049d30:	a00b883a 	mov	r5,r20
 1049d34:	1027883a 	mov	r19,r2
 1049d38:	104a7900 	call	104a790 <__udivsi3>
 1049d3c:	1021883a 	mov	r16,r2
 1049d40:	880cd43a 	srli	r6,r17,16
 1049d44:	9804943a 	slli	r2,r19,16
 1049d48:	8567383a 	mul	r19,r16,r21
 1049d4c:	d8c00017 	ldw	r3,0(sp)
 1049d50:	1188b03a 	or	r4,r2,r6
 1049d54:	24c0052e 	bgeu	r4,r19,1049d6c <__udivdi3+0x248>
 1049d58:	2489883a 	add	r4,r4,r18
 1049d5c:	80bfffc4 	addi	r2,r16,-1
 1049d60:	24800136 	bltu	r4,r18,1049d68 <__udivdi3+0x244>
 1049d64:	24c0d936 	bltu	r4,r19,104a0cc <__udivdi3+0x5a8>
 1049d68:	1021883a 	mov	r16,r2
 1049d6c:	24e7c83a 	sub	r19,r4,r19
 1049d70:	9809883a 	mov	r4,r19
 1049d74:	a00b883a 	mov	r5,r20
 1049d78:	d8c00015 	stw	r3,0(sp)
 1049d7c:	104a7980 	call	104a798 <__umodsi3>
 1049d80:	102d883a 	mov	r22,r2
 1049d84:	9809883a 	mov	r4,r19
 1049d88:	a00b883a 	mov	r5,r20
 1049d8c:	104a7900 	call	104a790 <__udivsi3>
 1049d90:	b02c943a 	slli	r22,r22,16
 1049d94:	156b383a 	mul	r21,r2,r21
 1049d98:	8c7fffcc 	andi	r17,r17,65535
 1049d9c:	b462b03a 	or	r17,r22,r17
 1049da0:	d8c00017 	ldw	r3,0(sp)
 1049da4:	8d40052e 	bgeu	r17,r21,1049dbc <__udivdi3+0x298>
 1049da8:	8ca3883a 	add	r17,r17,r18
 1049dac:	113fffc4 	addi	r4,r2,-1
 1049db0:	8c809a36 	bltu	r17,r18,104a01c <__udivdi3+0x4f8>
 1049db4:	8d40992e 	bgeu	r17,r21,104a01c <__udivdi3+0x4f8>
 1049db8:	10bfff84 	addi	r2,r2,-2
 1049dbc:	8020943a 	slli	r16,r16,16
 1049dc0:	1404b03a 	or	r2,r2,r16
 1049dc4:	00000206 	br	1049dd0 <__udivdi3+0x2ac>
 1049dc8:	0007883a 	mov	r3,zero
 1049dcc:	0005883a 	mov	r2,zero
 1049dd0:	dfc00a17 	ldw	ra,40(sp)
 1049dd4:	df000917 	ldw	fp,36(sp)
 1049dd8:	ddc00817 	ldw	r23,32(sp)
 1049ddc:	dd800717 	ldw	r22,28(sp)
 1049de0:	dd400617 	ldw	r21,24(sp)
 1049de4:	dd000517 	ldw	r20,20(sp)
 1049de8:	dcc00417 	ldw	r19,16(sp)
 1049dec:	dc800317 	ldw	r18,12(sp)
 1049df0:	dc400217 	ldw	r17,8(sp)
 1049df4:	dc000117 	ldw	r16,4(sp)
 1049df8:	dec00b04 	addi	sp,sp,44
 1049dfc:	f800283a 	ret
 1049e00:	00803fc4 	movi	r2,255
 1049e04:	11c0932e 	bgeu	r2,r7,104a054 <__udivdi3+0x530>
 1049e08:	00c00204 	movi	r3,8
 1049e0c:	180b883a 	mov	r5,r3
 1049e10:	003f9c06 	br	1049c84 <__alt_data_end+0xfffe9c84>
 1049e14:	00804034 	movhi	r2,256
 1049e18:	10bfffc4 	addi	r2,r2,-1
 1049e1c:	1180902e 	bgeu	r2,r6,104a060 <__udivdi3+0x53c>
 1049e20:	00800604 	movi	r2,24
 1049e24:	1007883a 	mov	r3,r2
 1049e28:	003f5606 	br	1049b84 <__alt_data_end+0xfffe9b84>
 1049e2c:	00803fc4 	movi	r2,255
 1049e30:	1480912e 	bgeu	r2,r18,104a078 <__udivdi3+0x554>
 1049e34:	00800204 	movi	r2,8
 1049e38:	1007883a 	mov	r3,r2
 1049e3c:	003faa06 	br	1049ce8 <__alt_data_end+0xfffe9ce8>
 1049e40:	30eed83a 	srl	r23,r6,r3
 1049e44:	3c8e983a 	sll	r7,r7,r18
 1049e48:	80f8d83a 	srl	fp,r16,r3
 1049e4c:	98c6d83a 	srl	r3,r19,r3
 1049e50:	3deeb03a 	or	r23,r7,r23
 1049e54:	b828d43a 	srli	r20,r23,16
 1049e58:	84a0983a 	sll	r16,r16,r18
 1049e5c:	e009883a 	mov	r4,fp
 1049e60:	a00b883a 	mov	r5,r20
 1049e64:	80e2b03a 	or	r17,r16,r3
 1049e68:	34aa983a 	sll	r21,r6,r18
 1049e6c:	104a7980 	call	104a798 <__umodsi3>
 1049e70:	e009883a 	mov	r4,fp
 1049e74:	a00b883a 	mov	r5,r20
 1049e78:	102d883a 	mov	r22,r2
 1049e7c:	104a7900 	call	104a790 <__udivsi3>
 1049e80:	1021883a 	mov	r16,r2
 1049e84:	bf3fffcc 	andi	fp,r23,65535
 1049e88:	b004943a 	slli	r2,r22,16
 1049e8c:	8808d43a 	srli	r4,r17,16
 1049e90:	872d383a 	mul	r22,r16,fp
 1049e94:	1104b03a 	or	r2,r2,r4
 1049e98:	1580042e 	bgeu	r2,r22,1049eac <__udivdi3+0x388>
 1049e9c:	15c5883a 	add	r2,r2,r23
 1049ea0:	80ffffc4 	addi	r3,r16,-1
 1049ea4:	15c0812e 	bgeu	r2,r23,104a0ac <__udivdi3+0x588>
 1049ea8:	1821883a 	mov	r16,r3
 1049eac:	15adc83a 	sub	r22,r2,r22
 1049eb0:	b009883a 	mov	r4,r22
 1049eb4:	a00b883a 	mov	r5,r20
 1049eb8:	104a7980 	call	104a798 <__umodsi3>
 1049ebc:	a00b883a 	mov	r5,r20
 1049ec0:	b009883a 	mov	r4,r22
 1049ec4:	d8800015 	stw	r2,0(sp)
 1049ec8:	104a7900 	call	104a790 <__udivsi3>
 1049ecc:	d8c00017 	ldw	r3,0(sp)
 1049ed0:	170b383a 	mul	r5,r2,fp
 1049ed4:	8c7fffcc 	andi	r17,r17,65535
 1049ed8:	1806943a 	slli	r3,r3,16
 1049edc:	1c46b03a 	or	r3,r3,r17
 1049ee0:	1940042e 	bgeu	r3,r5,1049ef4 <__udivdi3+0x3d0>
 1049ee4:	1dc7883a 	add	r3,r3,r23
 1049ee8:	113fffc4 	addi	r4,r2,-1
 1049eec:	1dc06b2e 	bgeu	r3,r23,104a09c <__udivdi3+0x578>
 1049ef0:	2005883a 	mov	r2,r4
 1049ef4:	8020943a 	slli	r16,r16,16
 1049ef8:	a9ffffcc 	andi	r7,r21,65535
 1049efc:	a82ad43a 	srli	r21,r21,16
 1049f00:	1404b03a 	or	r2,r2,r16
 1049f04:	113fffcc 	andi	r4,r2,65535
 1049f08:	100cd43a 	srli	r6,r2,16
 1049f0c:	21d3383a 	mul	r9,r4,r7
 1049f10:	2549383a 	mul	r4,r4,r21
 1049f14:	31cf383a 	mul	r7,r6,r7
 1049f18:	4810d43a 	srli	r8,r9,16
 1049f1c:	1947c83a 	sub	r3,r3,r5
 1049f20:	3909883a 	add	r4,r7,r4
 1049f24:	2209883a 	add	r4,r4,r8
 1049f28:	354d383a 	mul	r6,r6,r21
 1049f2c:	21c0022e 	bgeu	r4,r7,1049f38 <__udivdi3+0x414>
 1049f30:	01400074 	movhi	r5,1
 1049f34:	314d883a 	add	r6,r6,r5
 1049f38:	202ad43a 	srli	r21,r4,16
 1049f3c:	354d883a 	add	r6,r6,r21
 1049f40:	19803f36 	bltu	r3,r6,104a040 <__udivdi3+0x51c>
 1049f44:	19803926 	beq	r3,r6,104a02c <__udivdi3+0x508>
 1049f48:	0007883a 	mov	r3,zero
 1049f4c:	003fa006 	br	1049dd0 <__alt_data_end+0xfffe9dd0>
 1049f50:	90e4983a 	sll	r18,r18,r3
 1049f54:	80aad83a 	srl	r21,r16,r2
 1049f58:	80e0983a 	sll	r16,r16,r3
 1049f5c:	9028d43a 	srli	r20,r18,16
 1049f60:	9884d83a 	srl	r2,r19,r2
 1049f64:	a809883a 	mov	r4,r21
 1049f68:	a00b883a 	mov	r5,r20
 1049f6c:	80acb03a 	or	r22,r16,r2
 1049f70:	98e2983a 	sll	r17,r19,r3
 1049f74:	104a7980 	call	104a798 <__umodsi3>
 1049f78:	a809883a 	mov	r4,r21
 1049f7c:	a00b883a 	mov	r5,r20
 1049f80:	1021883a 	mov	r16,r2
 1049f84:	104a7900 	call	104a790 <__udivsi3>
 1049f88:	957fffcc 	andi	r21,r18,65535
 1049f8c:	8020943a 	slli	r16,r16,16
 1049f90:	b00ad43a 	srli	r5,r22,16
 1049f94:	1567383a 	mul	r19,r2,r21
 1049f98:	102f883a 	mov	r23,r2
 1049f9c:	8148b03a 	or	r4,r16,r5
 1049fa0:	24c0062e 	bgeu	r4,r19,1049fbc <__udivdi3+0x498>
 1049fa4:	2489883a 	add	r4,r4,r18
 1049fa8:	10bfffc4 	addi	r2,r2,-1
 1049fac:	24804536 	bltu	r4,r18,104a0c4 <__udivdi3+0x5a0>
 1049fb0:	24c0442e 	bgeu	r4,r19,104a0c4 <__udivdi3+0x5a0>
 1049fb4:	bdffff84 	addi	r23,r23,-2
 1049fb8:	2489883a 	add	r4,r4,r18
 1049fbc:	24e7c83a 	sub	r19,r4,r19
 1049fc0:	9809883a 	mov	r4,r19
 1049fc4:	a00b883a 	mov	r5,r20
 1049fc8:	104a7980 	call	104a798 <__umodsi3>
 1049fcc:	1021883a 	mov	r16,r2
 1049fd0:	9809883a 	mov	r4,r19
 1049fd4:	a00b883a 	mov	r5,r20
 1049fd8:	104a7900 	call	104a790 <__udivsi3>
 1049fdc:	8020943a 	slli	r16,r16,16
 1049fe0:	1007883a 	mov	r3,r2
 1049fe4:	1545383a 	mul	r2,r2,r21
 1049fe8:	b13fffcc 	andi	r4,r22,65535
 1049fec:	8108b03a 	or	r4,r16,r4
 1049ff0:	2080062e 	bgeu	r4,r2,104a00c <__udivdi3+0x4e8>
 1049ff4:	2489883a 	add	r4,r4,r18
 1049ff8:	197fffc4 	addi	r5,r3,-1
 1049ffc:	24802f36 	bltu	r4,r18,104a0bc <__udivdi3+0x598>
 104a000:	20802e2e 	bgeu	r4,r2,104a0bc <__udivdi3+0x598>
 104a004:	18ffff84 	addi	r3,r3,-2
 104a008:	2489883a 	add	r4,r4,r18
 104a00c:	b82e943a 	slli	r23,r23,16
 104a010:	20a1c83a 	sub	r16,r4,r2
 104a014:	1dc6b03a 	or	r3,r3,r23
 104a018:	003f4006 	br	1049d1c <__alt_data_end+0xfffe9d1c>
 104a01c:	2005883a 	mov	r2,r4
 104a020:	003f6606 	br	1049dbc <__alt_data_end+0xfffe9dbc>
 104a024:	1805883a 	mov	r2,r3
 104a028:	003f0a06 	br	1049c54 <__alt_data_end+0xfffe9c54>
 104a02c:	2006943a 	slli	r3,r4,16
 104a030:	9c88983a 	sll	r4,r19,r18
 104a034:	4a7fffcc 	andi	r9,r9,65535
 104a038:	1a47883a 	add	r3,r3,r9
 104a03c:	20ffc22e 	bgeu	r4,r3,1049f48 <__alt_data_end+0xfffe9f48>
 104a040:	10bfffc4 	addi	r2,r2,-1
 104a044:	003fc006 	br	1049f48 <__alt_data_end+0xfffe9f48>
 104a048:	00c00404 	movi	r3,16
 104a04c:	180b883a 	mov	r5,r3
 104a050:	003f0c06 	br	1049c84 <__alt_data_end+0xfffe9c84>
 104a054:	0007883a 	mov	r3,zero
 104a058:	000b883a 	mov	r5,zero
 104a05c:	003f0906 	br	1049c84 <__alt_data_end+0xfffe9c84>
 104a060:	00800404 	movi	r2,16
 104a064:	1007883a 	mov	r3,r2
 104a068:	003ec606 	br	1049b84 <__alt_data_end+0xfffe9b84>
 104a06c:	00800404 	movi	r2,16
 104a070:	1007883a 	mov	r3,r2
 104a074:	003f1c06 	br	1049ce8 <__alt_data_end+0xfffe9ce8>
 104a078:	0005883a 	mov	r2,zero
 104a07c:	0007883a 	mov	r3,zero
 104a080:	003f1906 	br	1049ce8 <__alt_data_end+0xfffe9ce8>
 104a084:	0005883a 	mov	r2,zero
 104a088:	0007883a 	mov	r3,zero
 104a08c:	003ebd06 	br	1049b84 <__alt_data_end+0xfffe9b84>
 104a090:	0007883a 	mov	r3,zero
 104a094:	00800044 	movi	r2,1
 104a098:	003f4d06 	br	1049dd0 <__alt_data_end+0xfffe9dd0>
 104a09c:	197f942e 	bgeu	r3,r5,1049ef0 <__alt_data_end+0xfffe9ef0>
 104a0a0:	10bfff84 	addi	r2,r2,-2
 104a0a4:	1dc7883a 	add	r3,r3,r23
 104a0a8:	003f9206 	br	1049ef4 <__alt_data_end+0xfffe9ef4>
 104a0ac:	15bf7e2e 	bgeu	r2,r22,1049ea8 <__alt_data_end+0xfffe9ea8>
 104a0b0:	843fff84 	addi	r16,r16,-2
 104a0b4:	15c5883a 	add	r2,r2,r23
 104a0b8:	003f7c06 	br	1049eac <__alt_data_end+0xfffe9eac>
 104a0bc:	2807883a 	mov	r3,r5
 104a0c0:	003fd206 	br	104a00c <__alt_data_end+0xfffea00c>
 104a0c4:	102f883a 	mov	r23,r2
 104a0c8:	003fbc06 	br	1049fbc <__alt_data_end+0xfffe9fbc>
 104a0cc:	843fff84 	addi	r16,r16,-2
 104a0d0:	2489883a 	add	r4,r4,r18
 104a0d4:	003f2506 	br	1049d6c <__alt_data_end+0xfffe9d6c>
 104a0d8:	843fff84 	addi	r16,r16,-2
 104a0dc:	1485883a 	add	r2,r2,r18
 104a0e0:	003eca06 	br	1049c0c <__alt_data_end+0xfffe9c0c>

0104a0e4 <__umoddi3>:
 104a0e4:	defff404 	addi	sp,sp,-48
 104a0e8:	ddc00915 	stw	r23,36(sp)
 104a0ec:	dc400315 	stw	r17,12(sp)
 104a0f0:	dc000215 	stw	r16,8(sp)
 104a0f4:	dfc00b15 	stw	ra,44(sp)
 104a0f8:	df000a15 	stw	fp,40(sp)
 104a0fc:	dd800815 	stw	r22,32(sp)
 104a100:	dd400715 	stw	r21,28(sp)
 104a104:	dd000615 	stw	r20,24(sp)
 104a108:	dcc00515 	stw	r19,20(sp)
 104a10c:	dc800415 	stw	r18,16(sp)
 104a110:	2021883a 	mov	r16,r4
 104a114:	2823883a 	mov	r17,r5
 104a118:	282f883a 	mov	r23,r5
 104a11c:	3800381e 	bne	r7,zero,104a200 <__umoddi3+0x11c>
 104a120:	3027883a 	mov	r19,r6
 104a124:	2029883a 	mov	r20,r4
 104a128:	29804e2e 	bgeu	r5,r6,104a264 <__umoddi3+0x180>
 104a12c:	00bfffd4 	movui	r2,65535
 104a130:	11809c36 	bltu	r2,r6,104a3a4 <__umoddi3+0x2c0>
 104a134:	00803fc4 	movi	r2,255
 104a138:	11813b2e 	bgeu	r2,r6,104a628 <__umoddi3+0x544>
 104a13c:	01400204 	movi	r5,8
 104a140:	2805883a 	mov	r2,r5
 104a144:	314ad83a 	srl	r5,r6,r5
 104a148:	00c04174 	movhi	r3,261
 104a14c:	18fde604 	addi	r3,r3,-2152
 104a150:	194b883a 	add	r5,r3,r5
 104a154:	29000003 	ldbu	r4,0(r5)
 104a158:	2089883a 	add	r4,r4,r2
 104a15c:	00800804 	movi	r2,32
 104a160:	1105c83a 	sub	r2,r2,r4
 104a164:	1000ec26 	beq	r2,zero,104a518 <__umoddi3+0x434>
 104a168:	88a2983a 	sll	r17,r17,r2
 104a16c:	8108d83a 	srl	r4,r16,r4
 104a170:	30a6983a 	sll	r19,r6,r2
 104a174:	80a8983a 	sll	r20,r16,r2
 104a178:	1025883a 	mov	r18,r2
 104a17c:	892eb03a 	or	r23,r17,r4
 104a180:	982cd43a 	srli	r22,r19,16
 104a184:	b809883a 	mov	r4,r23
 104a188:	9d7fffcc 	andi	r21,r19,65535
 104a18c:	b00b883a 	mov	r5,r22
 104a190:	104a7980 	call	104a798 <__umodsi3>
 104a194:	b809883a 	mov	r4,r23
 104a198:	b00b883a 	mov	r5,r22
 104a19c:	1021883a 	mov	r16,r2
 104a1a0:	104a7900 	call	104a790 <__udivsi3>
 104a1a4:	8020943a 	slli	r16,r16,16
 104a1a8:	a00cd43a 	srli	r6,r20,16
 104a1ac:	1545383a 	mul	r2,r2,r21
 104a1b0:	8188b03a 	or	r4,r16,r6
 104a1b4:	2080042e 	bgeu	r4,r2,104a1c8 <__umoddi3+0xe4>
 104a1b8:	24c9883a 	add	r4,r4,r19
 104a1bc:	24c00236 	bltu	r4,r19,104a1c8 <__umoddi3+0xe4>
 104a1c0:	2080012e 	bgeu	r4,r2,104a1c8 <__umoddi3+0xe4>
 104a1c4:	24c9883a 	add	r4,r4,r19
 104a1c8:	20a3c83a 	sub	r17,r4,r2
 104a1cc:	8809883a 	mov	r4,r17
 104a1d0:	b00b883a 	mov	r5,r22
 104a1d4:	104a7980 	call	104a798 <__umodsi3>
 104a1d8:	8809883a 	mov	r4,r17
 104a1dc:	b00b883a 	mov	r5,r22
 104a1e0:	1021883a 	mov	r16,r2
 104a1e4:	104a7900 	call	104a790 <__udivsi3>
 104a1e8:	8006943a 	slli	r3,r16,16
 104a1ec:	1545383a 	mul	r2,r2,r21
 104a1f0:	a13fffcc 	andi	r4,r20,65535
 104a1f4:	1906b03a 	or	r3,r3,r4
 104a1f8:	1880532e 	bgeu	r3,r2,104a348 <__umoddi3+0x264>
 104a1fc:	00004e06 	br	104a338 <__umoddi3+0x254>
 104a200:	29c05536 	bltu	r5,r7,104a358 <__umoddi3+0x274>
 104a204:	00bfffd4 	movui	r2,65535
 104a208:	11c0612e 	bgeu	r2,r7,104a390 <__umoddi3+0x2ac>
 104a20c:	00804034 	movhi	r2,256
 104a210:	10bfffc4 	addi	r2,r2,-1
 104a214:	11c0f82e 	bgeu	r2,r7,104a5f8 <__umoddi3+0x514>
 104a218:	01400604 	movi	r5,24
 104a21c:	282b883a 	mov	r21,r5
 104a220:	394ad83a 	srl	r5,r7,r5
 104a224:	00c04174 	movhi	r3,261
 104a228:	18fde604 	addi	r3,r3,-2152
 104a22c:	194b883a 	add	r5,r3,r5
 104a230:	28800003 	ldbu	r2,0(r5)
 104a234:	00c00804 	movi	r3,32
 104a238:	156b883a 	add	r21,r2,r21
 104a23c:	1d69c83a 	sub	r20,r3,r21
 104a240:	a000631e 	bne	r20,zero,104a3d0 <__umoddi3+0x2ec>
 104a244:	3c400136 	bltu	r7,r17,104a24c <__umoddi3+0x168>
 104a248:	81810436 	bltu	r16,r6,104a65c <__umoddi3+0x578>
 104a24c:	8185c83a 	sub	r2,r16,r6
 104a250:	89e3c83a 	sub	r17,r17,r7
 104a254:	8087803a 	cmpltu	r3,r16,r2
 104a258:	88efc83a 	sub	r23,r17,r3
 104a25c:	b807883a 	mov	r3,r23
 104a260:	00003f06 	br	104a360 <__umoddi3+0x27c>
 104a264:	3000041e 	bne	r6,zero,104a278 <__umoddi3+0x194>
 104a268:	01000044 	movi	r4,1
 104a26c:	000b883a 	mov	r5,zero
 104a270:	104a7900 	call	104a790 <__udivsi3>
 104a274:	1027883a 	mov	r19,r2
 104a278:	00bfffd4 	movui	r2,65535
 104a27c:	14c04f2e 	bgeu	r2,r19,104a3bc <__umoddi3+0x2d8>
 104a280:	00804034 	movhi	r2,256
 104a284:	10bfffc4 	addi	r2,r2,-1
 104a288:	14c0e42e 	bgeu	r2,r19,104a61c <__umoddi3+0x538>
 104a28c:	00800604 	movi	r2,24
 104a290:	1007883a 	mov	r3,r2
 104a294:	9884d83a 	srl	r2,r19,r2
 104a298:	01004174 	movhi	r4,261
 104a29c:	213de604 	addi	r4,r4,-2152
 104a2a0:	2085883a 	add	r2,r4,r2
 104a2a4:	11000003 	ldbu	r4,0(r2)
 104a2a8:	00800804 	movi	r2,32
 104a2ac:	20c7883a 	add	r3,r4,r3
 104a2b0:	10c5c83a 	sub	r2,r2,r3
 104a2b4:	10009a1e 	bne	r2,zero,104a520 <__umoddi3+0x43c>
 104a2b8:	982cd43a 	srli	r22,r19,16
 104a2bc:	8ce3c83a 	sub	r17,r17,r19
 104a2c0:	9c3fffcc 	andi	r16,r19,65535
 104a2c4:	0025883a 	mov	r18,zero
 104a2c8:	8809883a 	mov	r4,r17
 104a2cc:	b00b883a 	mov	r5,r22
 104a2d0:	104a7980 	call	104a798 <__umodsi3>
 104a2d4:	8809883a 	mov	r4,r17
 104a2d8:	b00b883a 	mov	r5,r22
 104a2dc:	102b883a 	mov	r21,r2
 104a2e0:	104a7900 	call	104a790 <__udivsi3>
 104a2e4:	a806943a 	slli	r3,r21,16
 104a2e8:	a008d43a 	srli	r4,r20,16
 104a2ec:	1405383a 	mul	r2,r2,r16
 104a2f0:	190cb03a 	or	r6,r3,r4
 104a2f4:	3080032e 	bgeu	r6,r2,104a304 <__umoddi3+0x220>
 104a2f8:	34cd883a 	add	r6,r6,r19
 104a2fc:	34c00136 	bltu	r6,r19,104a304 <__umoddi3+0x220>
 104a300:	3080d436 	bltu	r6,r2,104a654 <__umoddi3+0x570>
 104a304:	30abc83a 	sub	r21,r6,r2
 104a308:	a809883a 	mov	r4,r21
 104a30c:	b00b883a 	mov	r5,r22
 104a310:	104a7980 	call	104a798 <__umodsi3>
 104a314:	1023883a 	mov	r17,r2
 104a318:	a809883a 	mov	r4,r21
 104a31c:	b00b883a 	mov	r5,r22
 104a320:	104a7900 	call	104a790 <__udivsi3>
 104a324:	8822943a 	slli	r17,r17,16
 104a328:	1405383a 	mul	r2,r2,r16
 104a32c:	a13fffcc 	andi	r4,r20,65535
 104a330:	8906b03a 	or	r3,r17,r4
 104a334:	1880042e 	bgeu	r3,r2,104a348 <__umoddi3+0x264>
 104a338:	1cc7883a 	add	r3,r3,r19
 104a33c:	1cc00236 	bltu	r3,r19,104a348 <__umoddi3+0x264>
 104a340:	1880012e 	bgeu	r3,r2,104a348 <__umoddi3+0x264>
 104a344:	1cc7883a 	add	r3,r3,r19
 104a348:	1887c83a 	sub	r3,r3,r2
 104a34c:	1c84d83a 	srl	r2,r3,r18
 104a350:	0007883a 	mov	r3,zero
 104a354:	00000206 	br	104a360 <__umoddi3+0x27c>
 104a358:	2005883a 	mov	r2,r4
 104a35c:	2807883a 	mov	r3,r5
 104a360:	dfc00b17 	ldw	ra,44(sp)
 104a364:	df000a17 	ldw	fp,40(sp)
 104a368:	ddc00917 	ldw	r23,36(sp)
 104a36c:	dd800817 	ldw	r22,32(sp)
 104a370:	dd400717 	ldw	r21,28(sp)
 104a374:	dd000617 	ldw	r20,24(sp)
 104a378:	dcc00517 	ldw	r19,20(sp)
 104a37c:	dc800417 	ldw	r18,16(sp)
 104a380:	dc400317 	ldw	r17,12(sp)
 104a384:	dc000217 	ldw	r16,8(sp)
 104a388:	dec00c04 	addi	sp,sp,48
 104a38c:	f800283a 	ret
 104a390:	00803fc4 	movi	r2,255
 104a394:	11c0952e 	bgeu	r2,r7,104a5ec <__umoddi3+0x508>
 104a398:	01400204 	movi	r5,8
 104a39c:	282b883a 	mov	r21,r5
 104a3a0:	003f9f06 	br	104a220 <__alt_data_end+0xfffea220>
 104a3a4:	00804034 	movhi	r2,256
 104a3a8:	10bfffc4 	addi	r2,r2,-1
 104a3ac:	1180952e 	bgeu	r2,r6,104a604 <__umoddi3+0x520>
 104a3b0:	01400604 	movi	r5,24
 104a3b4:	2805883a 	mov	r2,r5
 104a3b8:	003f6206 	br	104a144 <__alt_data_end+0xfffea144>
 104a3bc:	00803fc4 	movi	r2,255
 104a3c0:	14c0932e 	bgeu	r2,r19,104a610 <__umoddi3+0x52c>
 104a3c4:	00800204 	movi	r2,8
 104a3c8:	1007883a 	mov	r3,r2
 104a3cc:	003fb106 	br	104a294 <__alt_data_end+0xfffea294>
 104a3d0:	3548d83a 	srl	r4,r6,r21
 104a3d4:	3d0e983a 	sll	r7,r7,r20
 104a3d8:	8d10983a 	sll	r8,r17,r20
 104a3dc:	8d6cd83a 	srl	r22,r17,r21
 104a3e0:	3922b03a 	or	r17,r7,r4
 104a3e4:	882ed43a 	srli	r23,r17,16
 104a3e8:	8564d83a 	srl	r18,r16,r21
 104a3ec:	b009883a 	mov	r4,r22
 104a3f0:	b80b883a 	mov	r5,r23
 104a3f4:	44a4b03a 	or	r18,r8,r18
 104a3f8:	3526983a 	sll	r19,r6,r20
 104a3fc:	104a7980 	call	104a798 <__umodsi3>
 104a400:	b009883a 	mov	r4,r22
 104a404:	b80b883a 	mov	r5,r23
 104a408:	1039883a 	mov	fp,r2
 104a40c:	104a7900 	call	104a790 <__udivsi3>
 104a410:	102d883a 	mov	r22,r2
 104a414:	8a3fffcc 	andi	r8,r17,65535
 104a418:	e004943a 	slli	r2,fp,16
 104a41c:	900cd43a 	srli	r6,r18,16
 104a420:	b239383a 	mul	fp,r22,r8
 104a424:	8520983a 	sll	r16,r16,r20
 104a428:	118ab03a 	or	r5,r2,r6
 104a42c:	2f00042e 	bgeu	r5,fp,104a440 <__umoddi3+0x35c>
 104a430:	2c4b883a 	add	r5,r5,r17
 104a434:	b0bfffc4 	addi	r2,r22,-1
 104a438:	2c40822e 	bgeu	r5,r17,104a644 <__umoddi3+0x560>
 104a43c:	102d883a 	mov	r22,r2
 104a440:	2f39c83a 	sub	fp,r5,fp
 104a444:	e009883a 	mov	r4,fp
 104a448:	b80b883a 	mov	r5,r23
 104a44c:	da000115 	stw	r8,4(sp)
 104a450:	104a7980 	call	104a798 <__umodsi3>
 104a454:	e009883a 	mov	r4,fp
 104a458:	b80b883a 	mov	r5,r23
 104a45c:	d8800015 	stw	r2,0(sp)
 104a460:	104a7900 	call	104a790 <__udivsi3>
 104a464:	d9800017 	ldw	r6,0(sp)
 104a468:	da000117 	ldw	r8,4(sp)
 104a46c:	94bfffcc 	andi	r18,r18,65535
 104a470:	300c943a 	slli	r6,r6,16
 104a474:	1209383a 	mul	r4,r2,r8
 104a478:	3490b03a 	or	r8,r6,r18
 104a47c:	4100042e 	bgeu	r8,r4,104a490 <__umoddi3+0x3ac>
 104a480:	4451883a 	add	r8,r8,r17
 104a484:	10ffffc4 	addi	r3,r2,-1
 104a488:	44406a2e 	bgeu	r8,r17,104a634 <__umoddi3+0x550>
 104a48c:	1805883a 	mov	r2,r3
 104a490:	b012943a 	slli	r9,r22,16
 104a494:	9abfffcc 	andi	r10,r19,65535
 104a498:	980ed43a 	srli	r7,r19,16
 104a49c:	124ab03a 	or	r5,r2,r9
 104a4a0:	2a7fffcc 	andi	r9,r5,65535
 104a4a4:	280ad43a 	srli	r5,r5,16
 104a4a8:	4a8d383a 	mul	r6,r9,r10
 104a4ac:	49d3383a 	mul	r9,r9,r7
 104a4b0:	2a95383a 	mul	r10,r5,r10
 104a4b4:	3004d43a 	srli	r2,r6,16
 104a4b8:	4111c83a 	sub	r8,r8,r4
 104a4bc:	5253883a 	add	r9,r10,r9
 104a4c0:	4893883a 	add	r9,r9,r2
 104a4c4:	29cb383a 	mul	r5,r5,r7
 104a4c8:	4a80022e 	bgeu	r9,r10,104a4d4 <__umoddi3+0x3f0>
 104a4cc:	00800074 	movhi	r2,1
 104a4d0:	288b883a 	add	r5,r5,r2
 104a4d4:	4808d43a 	srli	r4,r9,16
 104a4d8:	4812943a 	slli	r9,r9,16
 104a4dc:	31bfffcc 	andi	r6,r6,65535
 104a4e0:	290b883a 	add	r5,r5,r4
 104a4e4:	498d883a 	add	r6,r9,r6
 104a4e8:	41403a36 	bltu	r8,r5,104a5d4 <__umoddi3+0x4f0>
 104a4ec:	41405d26 	beq	r8,r5,104a664 <__umoddi3+0x580>
 104a4f0:	4149c83a 	sub	r4,r8,r5
 104a4f4:	300f883a 	mov	r7,r6
 104a4f8:	81cfc83a 	sub	r7,r16,r7
 104a4fc:	81c7803a 	cmpltu	r3,r16,r7
 104a500:	20c7c83a 	sub	r3,r4,r3
 104a504:	1d44983a 	sll	r2,r3,r21
 104a508:	3d0ed83a 	srl	r7,r7,r20
 104a50c:	1d06d83a 	srl	r3,r3,r20
 104a510:	11c4b03a 	or	r2,r2,r7
 104a514:	003f9206 	br	104a360 <__alt_data_end+0xfffea360>
 104a518:	0025883a 	mov	r18,zero
 104a51c:	003f1806 	br	104a180 <__alt_data_end+0xfffea180>
 104a520:	98a6983a 	sll	r19,r19,r2
 104a524:	88e8d83a 	srl	r20,r17,r3
 104a528:	80c6d83a 	srl	r3,r16,r3
 104a52c:	982cd43a 	srli	r22,r19,16
 104a530:	88a2983a 	sll	r17,r17,r2
 104a534:	a009883a 	mov	r4,r20
 104a538:	b00b883a 	mov	r5,r22
 104a53c:	88eab03a 	or	r21,r17,r3
 104a540:	1025883a 	mov	r18,r2
 104a544:	104a7980 	call	104a798 <__umodsi3>
 104a548:	a009883a 	mov	r4,r20
 104a54c:	b00b883a 	mov	r5,r22
 104a550:	1023883a 	mov	r17,r2
 104a554:	104a7900 	call	104a790 <__udivsi3>
 104a558:	9f3fffcc 	andi	fp,r19,65535
 104a55c:	8822943a 	slli	r17,r17,16
 104a560:	a80ad43a 	srli	r5,r21,16
 104a564:	1705383a 	mul	r2,r2,fp
 104a568:	84a8983a 	sll	r20,r16,r18
 104a56c:	8948b03a 	or	r4,r17,r5
 104a570:	2080042e 	bgeu	r4,r2,104a584 <__umoddi3+0x4a0>
 104a574:	24c9883a 	add	r4,r4,r19
 104a578:	24c00236 	bltu	r4,r19,104a584 <__umoddi3+0x4a0>
 104a57c:	2080012e 	bgeu	r4,r2,104a584 <__umoddi3+0x4a0>
 104a580:	24c9883a 	add	r4,r4,r19
 104a584:	20afc83a 	sub	r23,r4,r2
 104a588:	b809883a 	mov	r4,r23
 104a58c:	b00b883a 	mov	r5,r22
 104a590:	104a7980 	call	104a798 <__umodsi3>
 104a594:	1023883a 	mov	r17,r2
 104a598:	b809883a 	mov	r4,r23
 104a59c:	b00b883a 	mov	r5,r22
 104a5a0:	104a7900 	call	104a790 <__udivsi3>
 104a5a4:	8822943a 	slli	r17,r17,16
 104a5a8:	1705383a 	mul	r2,r2,fp
 104a5ac:	a93fffcc 	andi	r4,r21,65535
 104a5b0:	8908b03a 	or	r4,r17,r4
 104a5b4:	2080042e 	bgeu	r4,r2,104a5c8 <__umoddi3+0x4e4>
 104a5b8:	24c9883a 	add	r4,r4,r19
 104a5bc:	24c00236 	bltu	r4,r19,104a5c8 <__umoddi3+0x4e4>
 104a5c0:	2080012e 	bgeu	r4,r2,104a5c8 <__umoddi3+0x4e4>
 104a5c4:	24c9883a 	add	r4,r4,r19
 104a5c8:	20a3c83a 	sub	r17,r4,r2
 104a5cc:	e021883a 	mov	r16,fp
 104a5d0:	003f3d06 	br	104a2c8 <__alt_data_end+0xfffea2c8>
 104a5d4:	34cfc83a 	sub	r7,r6,r19
 104a5d8:	2c4bc83a 	sub	r5,r5,r17
 104a5dc:	31cd803a 	cmpltu	r6,r6,r7
 104a5e0:	298dc83a 	sub	r6,r5,r6
 104a5e4:	4189c83a 	sub	r4,r8,r6
 104a5e8:	003fc306 	br	104a4f8 <__alt_data_end+0xfffea4f8>
 104a5ec:	000b883a 	mov	r5,zero
 104a5f0:	002b883a 	mov	r21,zero
 104a5f4:	003f0a06 	br	104a220 <__alt_data_end+0xfffea220>
 104a5f8:	01400404 	movi	r5,16
 104a5fc:	282b883a 	mov	r21,r5
 104a600:	003f0706 	br	104a220 <__alt_data_end+0xfffea220>
 104a604:	01400404 	movi	r5,16
 104a608:	2805883a 	mov	r2,r5
 104a60c:	003ecd06 	br	104a144 <__alt_data_end+0xfffea144>
 104a610:	0005883a 	mov	r2,zero
 104a614:	0007883a 	mov	r3,zero
 104a618:	003f1e06 	br	104a294 <__alt_data_end+0xfffea294>
 104a61c:	00800404 	movi	r2,16
 104a620:	1007883a 	mov	r3,r2
 104a624:	003f1b06 	br	104a294 <__alt_data_end+0xfffea294>
 104a628:	000b883a 	mov	r5,zero
 104a62c:	0005883a 	mov	r2,zero
 104a630:	003ec406 	br	104a144 <__alt_data_end+0xfffea144>
 104a634:	413f952e 	bgeu	r8,r4,104a48c <__alt_data_end+0xfffea48c>
 104a638:	10bfff84 	addi	r2,r2,-2
 104a63c:	4451883a 	add	r8,r8,r17
 104a640:	003f9306 	br	104a490 <__alt_data_end+0xfffea490>
 104a644:	2f3f7d2e 	bgeu	r5,fp,104a43c <__alt_data_end+0xfffea43c>
 104a648:	b5bfff84 	addi	r22,r22,-2
 104a64c:	2c4b883a 	add	r5,r5,r17
 104a650:	003f7b06 	br	104a440 <__alt_data_end+0xfffea440>
 104a654:	34cd883a 	add	r6,r6,r19
 104a658:	003f2a06 	br	104a304 <__alt_data_end+0xfffea304>
 104a65c:	8005883a 	mov	r2,r16
 104a660:	003efe06 	br	104a25c <__alt_data_end+0xfffea25c>
 104a664:	81bfdb36 	bltu	r16,r6,104a5d4 <__alt_data_end+0xfffea5d4>
 104a668:	300f883a 	mov	r7,r6
 104a66c:	0009883a 	mov	r4,zero
 104a670:	003fa106 	br	104a4f8 <__alt_data_end+0xfffea4f8>

0104a674 <udivmodsi4>:
 104a674:	2900182e 	bgeu	r5,r4,104a6d8 <udivmodsi4+0x64>
 104a678:	28001716 	blt	r5,zero,104a6d8 <udivmodsi4+0x64>
 104a67c:	00800804 	movi	r2,32
 104a680:	00c00044 	movi	r3,1
 104a684:	00000206 	br	104a690 <udivmodsi4+0x1c>
 104a688:	10001126 	beq	r2,zero,104a6d0 <udivmodsi4+0x5c>
 104a68c:	28000516 	blt	r5,zero,104a6a4 <udivmodsi4+0x30>
 104a690:	294b883a 	add	r5,r5,r5
 104a694:	10bfffc4 	addi	r2,r2,-1
 104a698:	18c7883a 	add	r3,r3,r3
 104a69c:	293ffa36 	bltu	r5,r4,104a688 <__alt_data_end+0xfffea688>
 104a6a0:	18000b26 	beq	r3,zero,104a6d0 <udivmodsi4+0x5c>
 104a6a4:	0005883a 	mov	r2,zero
 104a6a8:	21400236 	bltu	r4,r5,104a6b4 <udivmodsi4+0x40>
 104a6ac:	2149c83a 	sub	r4,r4,r5
 104a6b0:	10c4b03a 	or	r2,r2,r3
 104a6b4:	1806d07a 	srli	r3,r3,1
 104a6b8:	280ad07a 	srli	r5,r5,1
 104a6bc:	183ffa1e 	bne	r3,zero,104a6a8 <__alt_data_end+0xfffea6a8>
 104a6c0:	3000011e 	bne	r6,zero,104a6c8 <udivmodsi4+0x54>
 104a6c4:	f800283a 	ret
 104a6c8:	2005883a 	mov	r2,r4
 104a6cc:	f800283a 	ret
 104a6d0:	0005883a 	mov	r2,zero
 104a6d4:	003ffa06 	br	104a6c0 <__alt_data_end+0xfffea6c0>
 104a6d8:	00c00044 	movi	r3,1
 104a6dc:	003ff106 	br	104a6a4 <__alt_data_end+0xfffea6a4>

0104a6e0 <__divsi3>:
 104a6e0:	defffe04 	addi	sp,sp,-8
 104a6e4:	dfc00115 	stw	ra,4(sp)
 104a6e8:	dc000015 	stw	r16,0(sp)
 104a6ec:	20000b16 	blt	r4,zero,104a71c <__divsi3+0x3c>
 104a6f0:	0021883a 	mov	r16,zero
 104a6f4:	28000c16 	blt	r5,zero,104a728 <__divsi3+0x48>
 104a6f8:	000d883a 	mov	r6,zero
 104a6fc:	104a6740 	call	104a674 <udivmodsi4>
 104a700:	0407c83a 	sub	r3,zero,r16
 104a704:	1884f03a 	xor	r2,r3,r2
 104a708:	1405883a 	add	r2,r2,r16
 104a70c:	dfc00117 	ldw	ra,4(sp)
 104a710:	dc000017 	ldw	r16,0(sp)
 104a714:	dec00204 	addi	sp,sp,8
 104a718:	f800283a 	ret
 104a71c:	0109c83a 	sub	r4,zero,r4
 104a720:	04000044 	movi	r16,1
 104a724:	283ff40e 	bge	r5,zero,104a6f8 <__alt_data_end+0xfffea6f8>
 104a728:	014bc83a 	sub	r5,zero,r5
 104a72c:	8400005c 	xori	r16,r16,1
 104a730:	003ff106 	br	104a6f8 <__alt_data_end+0xfffea6f8>

0104a734 <__modsi3>:
 104a734:	defffd04 	addi	sp,sp,-12
 104a738:	dfc00215 	stw	ra,8(sp)
 104a73c:	dc400115 	stw	r17,4(sp)
 104a740:	dc000015 	stw	r16,0(sp)
 104a744:	20000c16 	blt	r4,zero,104a778 <__modsi3+0x44>
 104a748:	0023883a 	mov	r17,zero
 104a74c:	0021883a 	mov	r16,zero
 104a750:	28000d16 	blt	r5,zero,104a788 <__modsi3+0x54>
 104a754:	01800044 	movi	r6,1
 104a758:	104a6740 	call	104a674 <udivmodsi4>
 104a75c:	1404f03a 	xor	r2,r2,r16
 104a760:	8885883a 	add	r2,r17,r2
 104a764:	dfc00217 	ldw	ra,8(sp)
 104a768:	dc400117 	ldw	r17,4(sp)
 104a76c:	dc000017 	ldw	r16,0(sp)
 104a770:	dec00304 	addi	sp,sp,12
 104a774:	f800283a 	ret
 104a778:	0109c83a 	sub	r4,zero,r4
 104a77c:	04400044 	movi	r17,1
 104a780:	043fffc4 	movi	r16,-1
 104a784:	283ff30e 	bge	r5,zero,104a754 <__alt_data_end+0xfffea754>
 104a788:	014bc83a 	sub	r5,zero,r5
 104a78c:	003ff106 	br	104a754 <__alt_data_end+0xfffea754>

0104a790 <__udivsi3>:
 104a790:	000d883a 	mov	r6,zero
 104a794:	104a6741 	jmpi	104a674 <udivmodsi4>

0104a798 <__umodsi3>:
 104a798:	01800044 	movi	r6,1
 104a79c:	104a6741 	jmpi	104a674 <udivmodsi4>

0104a7a0 <__adddf3>:
 104a7a0:	02000434 	movhi	r8,16
 104a7a4:	423fffc4 	addi	r8,r8,-1
 104a7a8:	defffb04 	addi	sp,sp,-20
 104a7ac:	2a12703a 	and	r9,r5,r8
 104a7b0:	2806d7fa 	srli	r3,r5,31
 104a7b4:	3a10703a 	and	r8,r7,r8
 104a7b8:	3804d53a 	srli	r2,r7,20
 104a7bc:	3014d77a 	srli	r10,r6,29
 104a7c0:	dc000015 	stw	r16,0(sp)
 104a7c4:	481290fa 	slli	r9,r9,3
 104a7c8:	2820d53a 	srli	r16,r5,20
 104a7cc:	401090fa 	slli	r8,r8,3
 104a7d0:	200ad77a 	srli	r5,r4,29
 104a7d4:	380ed7fa 	srli	r7,r7,31
 104a7d8:	dc800215 	stw	r18,8(sp)
 104a7dc:	dc400115 	stw	r17,4(sp)
 104a7e0:	dfc00415 	stw	ra,16(sp)
 104a7e4:	dcc00315 	stw	r19,12(sp)
 104a7e8:	1c803fcc 	andi	r18,r3,255
 104a7ec:	8401ffcc 	andi	r16,r16,2047
 104a7f0:	494ab03a 	or	r5,r9,r5
 104a7f4:	202290fa 	slli	r17,r4,3
 104a7f8:	1081ffcc 	andi	r2,r2,2047
 104a7fc:	4290b03a 	or	r8,r8,r10
 104a800:	300c90fa 	slli	r6,r6,3
 104a804:	91c07026 	beq	r18,r7,104a9c8 <__adddf3+0x228>
 104a808:	8087c83a 	sub	r3,r16,r2
 104a80c:	00c0b30e 	bge	zero,r3,104aadc <__adddf3+0x33c>
 104a810:	10002a1e 	bne	r2,zero,104a8bc <__adddf3+0x11c>
 104a814:	4184b03a 	or	r2,r8,r6
 104a818:	1000991e 	bne	r2,zero,104aa80 <__adddf3+0x2e0>
 104a81c:	888001cc 	andi	r2,r17,7
 104a820:	10005b26 	beq	r2,zero,104a990 <__adddf3+0x1f0>
 104a824:	88c003cc 	andi	r3,r17,15
 104a828:	00800104 	movi	r2,4
 104a82c:	18805826 	beq	r3,r2,104a990 <__adddf3+0x1f0>
 104a830:	89800104 	addi	r6,r17,4
 104a834:	3463803a 	cmpltu	r17,r6,r17
 104a838:	2c4b883a 	add	r5,r5,r17
 104a83c:	2880202c 	andhi	r2,r5,128
 104a840:	9007883a 	mov	r3,r18
 104a844:	3023883a 	mov	r17,r6
 104a848:	10005426 	beq	r2,zero,104a99c <__adddf3+0x1fc>
 104a84c:	84000044 	addi	r16,r16,1
 104a850:	0081ffc4 	movi	r2,2047
 104a854:	8080c126 	beq	r16,r2,104ab5c <__adddf3+0x3bc>
 104a858:	013fe034 	movhi	r4,65408
 104a85c:	213fffc4 	addi	r4,r4,-1
 104a860:	290a703a 	and	r5,r5,r4
 104a864:	2804977a 	slli	r2,r5,29
 104a868:	280a927a 	slli	r5,r5,9
 104a86c:	8822d0fa 	srli	r17,r17,3
 104a870:	8401ffcc 	andi	r16,r16,2047
 104a874:	2808d33a 	srli	r4,r5,12
 104a878:	1444b03a 	or	r2,r2,r17
 104a87c:	8401ffcc 	andi	r16,r16,2047
 104a880:	800a953a 	slli	r5,r16,20
 104a884:	18c03fcc 	andi	r3,r3,255
 104a888:	04000434 	movhi	r16,16
 104a88c:	180697fa 	slli	r3,r3,31
 104a890:	843fffc4 	addi	r16,r16,-1
 104a894:	2420703a 	and	r16,r4,r16
 104a898:	8160b03a 	or	r16,r16,r5
 104a89c:	80c6b03a 	or	r3,r16,r3
 104a8a0:	dfc00417 	ldw	ra,16(sp)
 104a8a4:	dcc00317 	ldw	r19,12(sp)
 104a8a8:	dc800217 	ldw	r18,8(sp)
 104a8ac:	dc400117 	ldw	r17,4(sp)
 104a8b0:	dc000017 	ldw	r16,0(sp)
 104a8b4:	dec00504 	addi	sp,sp,20
 104a8b8:	f800283a 	ret
 104a8bc:	0081ffc4 	movi	r2,2047
 104a8c0:	80bfd626 	beq	r16,r2,104a81c <__alt_data_end+0xfffea81c>
 104a8c4:	42002034 	orhi	r8,r8,128
 104a8c8:	00800e04 	movi	r2,56
 104a8cc:	10c0a616 	blt	r2,r3,104ab68 <__adddf3+0x3c8>
 104a8d0:	008007c4 	movi	r2,31
 104a8d4:	10c0c916 	blt	r2,r3,104abfc <__adddf3+0x45c>
 104a8d8:	00800804 	movi	r2,32
 104a8dc:	10c5c83a 	sub	r2,r2,r3
 104a8e0:	408e983a 	sll	r7,r8,r2
 104a8e4:	30c8d83a 	srl	r4,r6,r3
 104a8e8:	3084983a 	sll	r2,r6,r2
 104a8ec:	40c6d83a 	srl	r3,r8,r3
 104a8f0:	390cb03a 	or	r6,r7,r4
 104a8f4:	1004c03a 	cmpne	r2,r2,zero
 104a8f8:	308cb03a 	or	r6,r6,r2
 104a8fc:	898dc83a 	sub	r6,r17,r6
 104a900:	89a3803a 	cmpltu	r17,r17,r6
 104a904:	28cbc83a 	sub	r5,r5,r3
 104a908:	2c4bc83a 	sub	r5,r5,r17
 104a90c:	3023883a 	mov	r17,r6
 104a910:	2880202c 	andhi	r2,r5,128
 104a914:	10006d26 	beq	r2,zero,104aacc <__adddf3+0x32c>
 104a918:	04c02034 	movhi	r19,128
 104a91c:	9cffffc4 	addi	r19,r19,-1
 104a920:	2ce6703a 	and	r19,r5,r19
 104a924:	98007e26 	beq	r19,zero,104ab20 <__adddf3+0x380>
 104a928:	9809883a 	mov	r4,r19
 104a92c:	10409dc0 	call	10409dc <__clzsi2>
 104a930:	10fffe04 	addi	r3,r2,-8
 104a934:	010007c4 	movi	r4,31
 104a938:	20c07f16 	blt	r4,r3,104ab38 <__adddf3+0x398>
 104a93c:	01400a04 	movi	r5,40
 104a940:	2885c83a 	sub	r2,r5,r2
 104a944:	888ad83a 	srl	r5,r17,r2
 104a948:	98e6983a 	sll	r19,r19,r3
 104a94c:	88e2983a 	sll	r17,r17,r3
 104a950:	2ce6b03a 	or	r19,r5,r19
 104a954:	1c007c16 	blt	r3,r16,104ab48 <__adddf3+0x3a8>
 104a958:	1c21c83a 	sub	r16,r3,r16
 104a95c:	81400044 	addi	r5,r16,1
 104a960:	00c007c4 	movi	r3,31
 104a964:	19409816 	blt	r3,r5,104abc8 <__adddf3+0x428>
 104a968:	1c21c83a 	sub	r16,r3,r16
 104a96c:	8c08983a 	sll	r4,r17,r16
 104a970:	8946d83a 	srl	r3,r17,r5
 104a974:	9c20983a 	sll	r16,r19,r16
 104a978:	2008c03a 	cmpne	r4,r4,zero
 104a97c:	994ad83a 	srl	r5,r19,r5
 104a980:	1c06b03a 	or	r3,r3,r16
 104a984:	1922b03a 	or	r17,r3,r4
 104a988:	0021883a 	mov	r16,zero
 104a98c:	003fa306 	br	104a81c <__alt_data_end+0xfffea81c>
 104a990:	2880202c 	andhi	r2,r5,128
 104a994:	9007883a 	mov	r3,r18
 104a998:	103fac1e 	bne	r2,zero,104a84c <__alt_data_end+0xfffea84c>
 104a99c:	2804977a 	slli	r2,r5,29
 104a9a0:	8822d0fa 	srli	r17,r17,3
 104a9a4:	0101ffc4 	movi	r4,2047
 104a9a8:	280ad0fa 	srli	r5,r5,3
 104a9ac:	1444b03a 	or	r2,r2,r17
 104a9b0:	81002c26 	beq	r16,r4,104aa64 <__adddf3+0x2c4>
 104a9b4:	8120703a 	and	r16,r16,r4
 104a9b8:	01000434 	movhi	r4,16
 104a9bc:	213fffc4 	addi	r4,r4,-1
 104a9c0:	2908703a 	and	r4,r5,r4
 104a9c4:	003fad06 	br	104a87c <__alt_data_end+0xfffea87c>
 104a9c8:	8089c83a 	sub	r4,r16,r2
 104a9cc:	01006a0e 	bge	zero,r4,104ab78 <__adddf3+0x3d8>
 104a9d0:	10003326 	beq	r2,zero,104aaa0 <__adddf3+0x300>
 104a9d4:	0081ffc4 	movi	r2,2047
 104a9d8:	80bf9026 	beq	r16,r2,104a81c <__alt_data_end+0xfffea81c>
 104a9dc:	42002034 	orhi	r8,r8,128
 104a9e0:	00800e04 	movi	r2,56
 104a9e4:	1100b116 	blt	r2,r4,104acac <__adddf3+0x50c>
 104a9e8:	008007c4 	movi	r2,31
 104a9ec:	1100e216 	blt	r2,r4,104ad78 <__adddf3+0x5d8>
 104a9f0:	00800804 	movi	r2,32
 104a9f4:	1105c83a 	sub	r2,r2,r4
 104a9f8:	4092983a 	sll	r9,r8,r2
 104a9fc:	310ed83a 	srl	r7,r6,r4
 104aa00:	3084983a 	sll	r2,r6,r2
 104aa04:	4110d83a 	srl	r8,r8,r4
 104aa08:	49ccb03a 	or	r6,r9,r7
 104aa0c:	1004c03a 	cmpne	r2,r2,zero
 104aa10:	308cb03a 	or	r6,r6,r2
 104aa14:	344d883a 	add	r6,r6,r17
 104aa18:	3463803a 	cmpltu	r17,r6,r17
 104aa1c:	414b883a 	add	r5,r8,r5
 104aa20:	2c4b883a 	add	r5,r5,r17
 104aa24:	3023883a 	mov	r17,r6
 104aa28:	2880202c 	andhi	r2,r5,128
 104aa2c:	10002726 	beq	r2,zero,104aacc <__adddf3+0x32c>
 104aa30:	84000044 	addi	r16,r16,1
 104aa34:	0081ffc4 	movi	r2,2047
 104aa38:	8080ae26 	beq	r16,r2,104acf4 <__adddf3+0x554>
 104aa3c:	00bfe034 	movhi	r2,65408
 104aa40:	10bfffc4 	addi	r2,r2,-1
 104aa44:	288a703a 	and	r5,r5,r2
 104aa48:	880cd07a 	srli	r6,r17,1
 104aa4c:	280897fa 	slli	r4,r5,31
 104aa50:	88c0004c 	andi	r3,r17,1
 104aa54:	30e2b03a 	or	r17,r6,r3
 104aa58:	280ad07a 	srli	r5,r5,1
 104aa5c:	8922b03a 	or	r17,r17,r4
 104aa60:	003f6e06 	br	104a81c <__alt_data_end+0xfffea81c>
 104aa64:	1148b03a 	or	r4,r2,r5
 104aa68:	20003c26 	beq	r4,zero,104ab5c <__adddf3+0x3bc>
 104aa6c:	29000234 	orhi	r4,r5,8
 104aa70:	01400434 	movhi	r5,16
 104aa74:	297fffc4 	addi	r5,r5,-1
 104aa78:	2148703a 	and	r4,r4,r5
 104aa7c:	003f7f06 	br	104a87c <__alt_data_end+0xfffea87c>
 104aa80:	18ffffc4 	addi	r3,r3,-1
 104aa84:	18004d1e 	bne	r3,zero,104abbc <__adddf3+0x41c>
 104aa88:	898dc83a 	sub	r6,r17,r6
 104aa8c:	89a3803a 	cmpltu	r17,r17,r6
 104aa90:	2a0bc83a 	sub	r5,r5,r8
 104aa94:	2c4bc83a 	sub	r5,r5,r17
 104aa98:	3023883a 	mov	r17,r6
 104aa9c:	003f9c06 	br	104a910 <__alt_data_end+0xfffea910>
 104aaa0:	4184b03a 	or	r2,r8,r6
 104aaa4:	103f5d26 	beq	r2,zero,104a81c <__alt_data_end+0xfffea81c>
 104aaa8:	213fffc4 	addi	r4,r4,-1
 104aaac:	203fd926 	beq	r4,zero,104aa14 <__alt_data_end+0xfffeaa14>
 104aab0:	0081ffc4 	movi	r2,2047
 104aab4:	80bfca1e 	bne	r16,r2,104a9e0 <__alt_data_end+0xfffea9e0>
 104aab8:	003f5806 	br	104a81c <__alt_data_end+0xfffea81c>
 104aabc:	10c8b03a 	or	r4,r2,r3
 104aac0:	20008b26 	beq	r4,zero,104acf0 <__adddf3+0x550>
 104aac4:	100b883a 	mov	r5,r2
 104aac8:	1823883a 	mov	r17,r3
 104aacc:	888001cc 	andi	r2,r17,7
 104aad0:	103f541e 	bne	r2,zero,104a824 <__alt_data_end+0xfffea824>
 104aad4:	9007883a 	mov	r3,r18
 104aad8:	003fb006 	br	104a99c <__alt_data_end+0xfffea99c>
 104aadc:	1800531e 	bne	r3,zero,104ac2c <__adddf3+0x48c>
 104aae0:	80800044 	addi	r2,r16,1
 104aae4:	1081ffcc 	andi	r2,r2,2047
 104aae8:	00c00044 	movi	r3,1
 104aaec:	1880990e 	bge	r3,r2,104ad54 <__adddf3+0x5b4>
 104aaf0:	8985c83a 	sub	r2,r17,r6
 104aaf4:	8887803a 	cmpltu	r3,r17,r2
 104aaf8:	2a27c83a 	sub	r19,r5,r8
 104aafc:	98e7c83a 	sub	r19,r19,r3
 104ab00:	98c0202c 	andhi	r3,r19,128
 104ab04:	18006226 	beq	r3,zero,104ac90 <__adddf3+0x4f0>
 104ab08:	3463c83a 	sub	r17,r6,r17
 104ab0c:	4151c83a 	sub	r8,r8,r5
 104ab10:	344d803a 	cmpltu	r6,r6,r17
 104ab14:	41a7c83a 	sub	r19,r8,r6
 104ab18:	3825883a 	mov	r18,r7
 104ab1c:	983f821e 	bne	r19,zero,104a928 <__alt_data_end+0xfffea928>
 104ab20:	8809883a 	mov	r4,r17
 104ab24:	10409dc0 	call	10409dc <__clzsi2>
 104ab28:	10800804 	addi	r2,r2,32
 104ab2c:	10fffe04 	addi	r3,r2,-8
 104ab30:	010007c4 	movi	r4,31
 104ab34:	20ff810e 	bge	r4,r3,104a93c <__alt_data_end+0xfffea93c>
 104ab38:	14fff604 	addi	r19,r2,-40
 104ab3c:	8ce6983a 	sll	r19,r17,r19
 104ab40:	0023883a 	mov	r17,zero
 104ab44:	1c3f840e 	bge	r3,r16,104a958 <__alt_data_end+0xfffea958>
 104ab48:	017fe034 	movhi	r5,65408
 104ab4c:	297fffc4 	addi	r5,r5,-1
 104ab50:	80e1c83a 	sub	r16,r16,r3
 104ab54:	994a703a 	and	r5,r19,r5
 104ab58:	003f3006 	br	104a81c <__alt_data_end+0xfffea81c>
 104ab5c:	0009883a 	mov	r4,zero
 104ab60:	0005883a 	mov	r2,zero
 104ab64:	003f4506 	br	104a87c <__alt_data_end+0xfffea87c>
 104ab68:	418cb03a 	or	r6,r8,r6
 104ab6c:	300cc03a 	cmpne	r6,r6,zero
 104ab70:	0007883a 	mov	r3,zero
 104ab74:	003f6106 	br	104a8fc <__alt_data_end+0xfffea8fc>
 104ab78:	2000921e 	bne	r4,zero,104adc4 <__adddf3+0x624>
 104ab7c:	80800044 	addi	r2,r16,1
 104ab80:	11c1ffcc 	andi	r7,r2,2047
 104ab84:	01000044 	movi	r4,1
 104ab88:	21c0610e 	bge	r4,r7,104ad10 <__adddf3+0x570>
 104ab8c:	0101ffc4 	movi	r4,2047
 104ab90:	1100a326 	beq	r2,r4,104ae20 <__adddf3+0x680>
 104ab94:	344d883a 	add	r6,r6,r17
 104ab98:	3463803a 	cmpltu	r17,r6,r17
 104ab9c:	414b883a 	add	r5,r8,r5
 104aba0:	2c4b883a 	add	r5,r5,r17
 104aba4:	282297fa 	slli	r17,r5,31
 104aba8:	300cd07a 	srli	r6,r6,1
 104abac:	280ad07a 	srli	r5,r5,1
 104abb0:	1021883a 	mov	r16,r2
 104abb4:	89a2b03a 	or	r17,r17,r6
 104abb8:	003f1806 	br	104a81c <__alt_data_end+0xfffea81c>
 104abbc:	0081ffc4 	movi	r2,2047
 104abc0:	80bf411e 	bne	r16,r2,104a8c8 <__alt_data_end+0xfffea8c8>
 104abc4:	003f1506 	br	104a81c <__alt_data_end+0xfffea81c>
 104abc8:	80bff844 	addi	r2,r16,-31
 104abcc:	00c00804 	movi	r3,32
 104abd0:	9884d83a 	srl	r2,r19,r2
 104abd4:	28c04a26 	beq	r5,r3,104ad00 <__adddf3+0x560>
 104abd8:	00c00fc4 	movi	r3,63
 104abdc:	1c21c83a 	sub	r16,r3,r16
 104abe0:	9c26983a 	sll	r19,r19,r16
 104abe4:	9c62b03a 	or	r17,r19,r17
 104abe8:	8822c03a 	cmpne	r17,r17,zero
 104abec:	88a2b03a 	or	r17,r17,r2
 104abf0:	000b883a 	mov	r5,zero
 104abf4:	0021883a 	mov	r16,zero
 104abf8:	003fb406 	br	104aacc <__alt_data_end+0xfffeaacc>
 104abfc:	18bff804 	addi	r2,r3,-32
 104ac00:	01000804 	movi	r4,32
 104ac04:	4084d83a 	srl	r2,r8,r2
 104ac08:	19003f26 	beq	r3,r4,104ad08 <__adddf3+0x568>
 104ac0c:	01001004 	movi	r4,64
 104ac10:	20c7c83a 	sub	r3,r4,r3
 104ac14:	40d0983a 	sll	r8,r8,r3
 104ac18:	418cb03a 	or	r6,r8,r6
 104ac1c:	300cc03a 	cmpne	r6,r6,zero
 104ac20:	308cb03a 	or	r6,r6,r2
 104ac24:	0007883a 	mov	r3,zero
 104ac28:	003f3406 	br	104a8fc <__alt_data_end+0xfffea8fc>
 104ac2c:	80002326 	beq	r16,zero,104acbc <__adddf3+0x51c>
 104ac30:	0101ffc4 	movi	r4,2047
 104ac34:	11005e26 	beq	r2,r4,104adb0 <__adddf3+0x610>
 104ac38:	00c7c83a 	sub	r3,zero,r3
 104ac3c:	29402034 	orhi	r5,r5,128
 104ac40:	01000e04 	movi	r4,56
 104ac44:	20c07216 	blt	r4,r3,104ae10 <__adddf3+0x670>
 104ac48:	010007c4 	movi	r4,31
 104ac4c:	20c0ce16 	blt	r4,r3,104af88 <__adddf3+0x7e8>
 104ac50:	01000804 	movi	r4,32
 104ac54:	20c9c83a 	sub	r4,r4,r3
 104ac58:	2914983a 	sll	r10,r5,r4
 104ac5c:	88d2d83a 	srl	r9,r17,r3
 104ac60:	8908983a 	sll	r4,r17,r4
 104ac64:	28c6d83a 	srl	r3,r5,r3
 104ac68:	5262b03a 	or	r17,r10,r9
 104ac6c:	2008c03a 	cmpne	r4,r4,zero
 104ac70:	8922b03a 	or	r17,r17,r4
 104ac74:	3463c83a 	sub	r17,r6,r17
 104ac78:	40c7c83a 	sub	r3,r8,r3
 104ac7c:	344d803a 	cmpltu	r6,r6,r17
 104ac80:	198bc83a 	sub	r5,r3,r6
 104ac84:	1021883a 	mov	r16,r2
 104ac88:	3825883a 	mov	r18,r7
 104ac8c:	003f2006 	br	104a910 <__alt_data_end+0xfffea910>
 104ac90:	9886b03a 	or	r3,r19,r2
 104ac94:	1800141e 	bne	r3,zero,104ace8 <__adddf3+0x548>
 104ac98:	0007883a 	mov	r3,zero
 104ac9c:	000b883a 	mov	r5,zero
 104aca0:	0023883a 	mov	r17,zero
 104aca4:	0021883a 	mov	r16,zero
 104aca8:	003f3c06 	br	104a99c <__alt_data_end+0xfffea99c>
 104acac:	418cb03a 	or	r6,r8,r6
 104acb0:	300cc03a 	cmpne	r6,r6,zero
 104acb4:	0011883a 	mov	r8,zero
 104acb8:	003f5606 	br	104aa14 <__alt_data_end+0xfffeaa14>
 104acbc:	2c48b03a 	or	r4,r5,r17
 104acc0:	20003b26 	beq	r4,zero,104adb0 <__adddf3+0x610>
 104acc4:	00c6303a 	nor	r3,zero,r3
 104acc8:	1800371e 	bne	r3,zero,104ada8 <__adddf3+0x608>
 104accc:	3463c83a 	sub	r17,r6,r17
 104acd0:	414bc83a 	sub	r5,r8,r5
 104acd4:	344d803a 	cmpltu	r6,r6,r17
 104acd8:	298bc83a 	sub	r5,r5,r6
 104acdc:	1021883a 	mov	r16,r2
 104ace0:	3825883a 	mov	r18,r7
 104ace4:	003f0a06 	br	104a910 <__alt_data_end+0xfffea910>
 104ace8:	1023883a 	mov	r17,r2
 104acec:	003f0d06 	br	104a924 <__alt_data_end+0xfffea924>
 104acf0:	0007883a 	mov	r3,zero
 104acf4:	000b883a 	mov	r5,zero
 104acf8:	0023883a 	mov	r17,zero
 104acfc:	003f2706 	br	104a99c <__alt_data_end+0xfffea99c>
 104ad00:	0027883a 	mov	r19,zero
 104ad04:	003fb706 	br	104abe4 <__alt_data_end+0xfffeabe4>
 104ad08:	0011883a 	mov	r8,zero
 104ad0c:	003fc206 	br	104ac18 <__alt_data_end+0xfffeac18>
 104ad10:	2c44b03a 	or	r2,r5,r17
 104ad14:	8000871e 	bne	r16,zero,104af34 <__adddf3+0x794>
 104ad18:	1000b126 	beq	r2,zero,104afe0 <__adddf3+0x840>
 104ad1c:	4184b03a 	or	r2,r8,r6
 104ad20:	103ebe26 	beq	r2,zero,104a81c <__alt_data_end+0xfffea81c>
 104ad24:	3445883a 	add	r2,r6,r17
 104ad28:	1463803a 	cmpltu	r17,r2,r17
 104ad2c:	414b883a 	add	r5,r8,r5
 104ad30:	2c4b883a 	add	r5,r5,r17
 104ad34:	28c0202c 	andhi	r3,r5,128
 104ad38:	1023883a 	mov	r17,r2
 104ad3c:	183f6326 	beq	r3,zero,104aacc <__alt_data_end+0xfffeaacc>
 104ad40:	00bfe034 	movhi	r2,65408
 104ad44:	10bfffc4 	addi	r2,r2,-1
 104ad48:	2021883a 	mov	r16,r4
 104ad4c:	288a703a 	and	r5,r5,r2
 104ad50:	003eb206 	br	104a81c <__alt_data_end+0xfffea81c>
 104ad54:	2c44b03a 	or	r2,r5,r17
 104ad58:	8000251e 	bne	r16,zero,104adf0 <__adddf3+0x650>
 104ad5c:	10004b1e 	bne	r2,zero,104ae8c <__adddf3+0x6ec>
 104ad60:	4184b03a 	or	r2,r8,r6
 104ad64:	103fe226 	beq	r2,zero,104acf0 <__alt_data_end+0xfffeacf0>
 104ad68:	400b883a 	mov	r5,r8
 104ad6c:	3023883a 	mov	r17,r6
 104ad70:	3825883a 	mov	r18,r7
 104ad74:	003ea906 	br	104a81c <__alt_data_end+0xfffea81c>
 104ad78:	20bff804 	addi	r2,r4,-32
 104ad7c:	01c00804 	movi	r7,32
 104ad80:	4084d83a 	srl	r2,r8,r2
 104ad84:	21c07e26 	beq	r4,r7,104af80 <__adddf3+0x7e0>
 104ad88:	01c01004 	movi	r7,64
 104ad8c:	3909c83a 	sub	r4,r7,r4
 104ad90:	4110983a 	sll	r8,r8,r4
 104ad94:	418cb03a 	or	r6,r8,r6
 104ad98:	300cc03a 	cmpne	r6,r6,zero
 104ad9c:	308cb03a 	or	r6,r6,r2
 104ada0:	0011883a 	mov	r8,zero
 104ada4:	003f1b06 	br	104aa14 <__alt_data_end+0xfffeaa14>
 104ada8:	0101ffc4 	movi	r4,2047
 104adac:	113fa41e 	bne	r2,r4,104ac40 <__alt_data_end+0xfffeac40>
 104adb0:	400b883a 	mov	r5,r8
 104adb4:	3023883a 	mov	r17,r6
 104adb8:	1021883a 	mov	r16,r2
 104adbc:	3825883a 	mov	r18,r7
 104adc0:	003e9606 	br	104a81c <__alt_data_end+0xfffea81c>
 104adc4:	80001a1e 	bne	r16,zero,104ae30 <__adddf3+0x690>
 104adc8:	2c4eb03a 	or	r7,r5,r17
 104adcc:	38005526 	beq	r7,zero,104af24 <__adddf3+0x784>
 104add0:	0108303a 	nor	r4,zero,r4
 104add4:	2000511e 	bne	r4,zero,104af1c <__adddf3+0x77c>
 104add8:	89a3883a 	add	r17,r17,r6
 104addc:	414b883a 	add	r5,r8,r5
 104ade0:	898d803a 	cmpltu	r6,r17,r6
 104ade4:	298b883a 	add	r5,r5,r6
 104ade8:	1021883a 	mov	r16,r2
 104adec:	003f0e06 	br	104aa28 <__alt_data_end+0xfffeaa28>
 104adf0:	1000341e 	bne	r2,zero,104aec4 <__adddf3+0x724>
 104adf4:	4184b03a 	or	r2,r8,r6
 104adf8:	10006f26 	beq	r2,zero,104afb8 <__adddf3+0x818>
 104adfc:	400b883a 	mov	r5,r8
 104ae00:	3023883a 	mov	r17,r6
 104ae04:	3825883a 	mov	r18,r7
 104ae08:	0401ffc4 	movi	r16,2047
 104ae0c:	003e8306 	br	104a81c <__alt_data_end+0xfffea81c>
 104ae10:	2c62b03a 	or	r17,r5,r17
 104ae14:	8822c03a 	cmpne	r17,r17,zero
 104ae18:	0007883a 	mov	r3,zero
 104ae1c:	003f9506 	br	104ac74 <__alt_data_end+0xfffeac74>
 104ae20:	1021883a 	mov	r16,r2
 104ae24:	000b883a 	mov	r5,zero
 104ae28:	0023883a 	mov	r17,zero
 104ae2c:	003edb06 	br	104a99c <__alt_data_end+0xfffea99c>
 104ae30:	01c1ffc4 	movi	r7,2047
 104ae34:	11c03b26 	beq	r2,r7,104af24 <__adddf3+0x784>
 104ae38:	0109c83a 	sub	r4,zero,r4
 104ae3c:	29402034 	orhi	r5,r5,128
 104ae40:	01c00e04 	movi	r7,56
 104ae44:	39006216 	blt	r7,r4,104afd0 <__adddf3+0x830>
 104ae48:	01c007c4 	movi	r7,31
 104ae4c:	39006b16 	blt	r7,r4,104affc <__adddf3+0x85c>
 104ae50:	01c00804 	movi	r7,32
 104ae54:	390fc83a 	sub	r7,r7,r4
 104ae58:	29d4983a 	sll	r10,r5,r7
 104ae5c:	8912d83a 	srl	r9,r17,r4
 104ae60:	89ce983a 	sll	r7,r17,r7
 104ae64:	2908d83a 	srl	r4,r5,r4
 104ae68:	5262b03a 	or	r17,r10,r9
 104ae6c:	380ac03a 	cmpne	r5,r7,zero
 104ae70:	8962b03a 	or	r17,r17,r5
 104ae74:	89a3883a 	add	r17,r17,r6
 104ae78:	2211883a 	add	r8,r4,r8
 104ae7c:	898d803a 	cmpltu	r6,r17,r6
 104ae80:	418b883a 	add	r5,r8,r6
 104ae84:	1021883a 	mov	r16,r2
 104ae88:	003ee706 	br	104aa28 <__alt_data_end+0xfffeaa28>
 104ae8c:	4184b03a 	or	r2,r8,r6
 104ae90:	103e6226 	beq	r2,zero,104a81c <__alt_data_end+0xfffea81c>
 104ae94:	8987c83a 	sub	r3,r17,r6
 104ae98:	88c9803a 	cmpltu	r4,r17,r3
 104ae9c:	2a05c83a 	sub	r2,r5,r8
 104aea0:	1105c83a 	sub	r2,r2,r4
 104aea4:	1100202c 	andhi	r4,r2,128
 104aea8:	203f0426 	beq	r4,zero,104aabc <__alt_data_end+0xfffeaabc>
 104aeac:	3463c83a 	sub	r17,r6,r17
 104aeb0:	414bc83a 	sub	r5,r8,r5
 104aeb4:	344d803a 	cmpltu	r6,r6,r17
 104aeb8:	298bc83a 	sub	r5,r5,r6
 104aebc:	3825883a 	mov	r18,r7
 104aec0:	003e5606 	br	104a81c <__alt_data_end+0xfffea81c>
 104aec4:	4184b03a 	or	r2,r8,r6
 104aec8:	10002b26 	beq	r2,zero,104af78 <__adddf3+0x7d8>
 104aecc:	2804d0fa 	srli	r2,r5,3
 104aed0:	8822d0fa 	srli	r17,r17,3
 104aed4:	280a977a 	slli	r5,r5,29
 104aed8:	10c0022c 	andhi	r3,r2,8
 104aedc:	2c62b03a 	or	r17,r5,r17
 104aee0:	18000826 	beq	r3,zero,104af04 <__adddf3+0x764>
 104aee4:	4008d0fa 	srli	r4,r8,3
 104aee8:	20c0022c 	andhi	r3,r4,8
 104aeec:	1800051e 	bne	r3,zero,104af04 <__adddf3+0x764>
 104aef0:	300cd0fa 	srli	r6,r6,3
 104aef4:	4010977a 	slli	r8,r8,29
 104aef8:	2005883a 	mov	r2,r4
 104aefc:	3825883a 	mov	r18,r7
 104af00:	41a2b03a 	or	r17,r8,r6
 104af04:	880ad77a 	srli	r5,r17,29
 104af08:	100490fa 	slli	r2,r2,3
 104af0c:	882290fa 	slli	r17,r17,3
 104af10:	0401ffc4 	movi	r16,2047
 104af14:	288ab03a 	or	r5,r5,r2
 104af18:	003e4006 	br	104a81c <__alt_data_end+0xfffea81c>
 104af1c:	01c1ffc4 	movi	r7,2047
 104af20:	11ffc71e 	bne	r2,r7,104ae40 <__alt_data_end+0xfffeae40>
 104af24:	400b883a 	mov	r5,r8
 104af28:	3023883a 	mov	r17,r6
 104af2c:	1021883a 	mov	r16,r2
 104af30:	003e3a06 	br	104a81c <__alt_data_end+0xfffea81c>
 104af34:	10002d26 	beq	r2,zero,104afec <__adddf3+0x84c>
 104af38:	4184b03a 	or	r2,r8,r6
 104af3c:	10000e26 	beq	r2,zero,104af78 <__adddf3+0x7d8>
 104af40:	2804d0fa 	srli	r2,r5,3
 104af44:	8822d0fa 	srli	r17,r17,3
 104af48:	280a977a 	slli	r5,r5,29
 104af4c:	10c0022c 	andhi	r3,r2,8
 104af50:	2c62b03a 	or	r17,r5,r17
 104af54:	183feb26 	beq	r3,zero,104af04 <__alt_data_end+0xfffeaf04>
 104af58:	4008d0fa 	srli	r4,r8,3
 104af5c:	20c0022c 	andhi	r3,r4,8
 104af60:	183fe81e 	bne	r3,zero,104af04 <__alt_data_end+0xfffeaf04>
 104af64:	300cd0fa 	srli	r6,r6,3
 104af68:	4010977a 	slli	r8,r8,29
 104af6c:	2005883a 	mov	r2,r4
 104af70:	41a2b03a 	or	r17,r8,r6
 104af74:	003fe306 	br	104af04 <__alt_data_end+0xfffeaf04>
 104af78:	0401ffc4 	movi	r16,2047
 104af7c:	003e2706 	br	104a81c <__alt_data_end+0xfffea81c>
 104af80:	0011883a 	mov	r8,zero
 104af84:	003f8306 	br	104ad94 <__alt_data_end+0xfffead94>
 104af88:	193ff804 	addi	r4,r3,-32
 104af8c:	02400804 	movi	r9,32
 104af90:	2908d83a 	srl	r4,r5,r4
 104af94:	1a402526 	beq	r3,r9,104b02c <__adddf3+0x88c>
 104af98:	02401004 	movi	r9,64
 104af9c:	48c7c83a 	sub	r3,r9,r3
 104afa0:	28ca983a 	sll	r5,r5,r3
 104afa4:	2c62b03a 	or	r17,r5,r17
 104afa8:	8822c03a 	cmpne	r17,r17,zero
 104afac:	8922b03a 	or	r17,r17,r4
 104afb0:	0007883a 	mov	r3,zero
 104afb4:	003f2f06 	br	104ac74 <__alt_data_end+0xfffeac74>
 104afb8:	01402034 	movhi	r5,128
 104afbc:	0007883a 	mov	r3,zero
 104afc0:	297fffc4 	addi	r5,r5,-1
 104afc4:	047ffe04 	movi	r17,-8
 104afc8:	0401ffc4 	movi	r16,2047
 104afcc:	003e7306 	br	104a99c <__alt_data_end+0xfffea99c>
 104afd0:	2c62b03a 	or	r17,r5,r17
 104afd4:	8822c03a 	cmpne	r17,r17,zero
 104afd8:	0009883a 	mov	r4,zero
 104afdc:	003fa506 	br	104ae74 <__alt_data_end+0xfffeae74>
 104afe0:	400b883a 	mov	r5,r8
 104afe4:	3023883a 	mov	r17,r6
 104afe8:	003e0c06 	br	104a81c <__alt_data_end+0xfffea81c>
 104afec:	400b883a 	mov	r5,r8
 104aff0:	3023883a 	mov	r17,r6
 104aff4:	0401ffc4 	movi	r16,2047
 104aff8:	003e0806 	br	104a81c <__alt_data_end+0xfffea81c>
 104affc:	21fff804 	addi	r7,r4,-32
 104b000:	02400804 	movi	r9,32
 104b004:	29ced83a 	srl	r7,r5,r7
 104b008:	22400a26 	beq	r4,r9,104b034 <__adddf3+0x894>
 104b00c:	02401004 	movi	r9,64
 104b010:	4909c83a 	sub	r4,r9,r4
 104b014:	290a983a 	sll	r5,r5,r4
 104b018:	2c62b03a 	or	r17,r5,r17
 104b01c:	8822c03a 	cmpne	r17,r17,zero
 104b020:	89e2b03a 	or	r17,r17,r7
 104b024:	0009883a 	mov	r4,zero
 104b028:	003f9206 	br	104ae74 <__alt_data_end+0xfffeae74>
 104b02c:	000b883a 	mov	r5,zero
 104b030:	003fdc06 	br	104afa4 <__alt_data_end+0xfffeafa4>
 104b034:	000b883a 	mov	r5,zero
 104b038:	003ff706 	br	104b018 <__alt_data_end+0xfffeb018>

0104b03c <__divdf3>:
 104b03c:	defff204 	addi	sp,sp,-56
 104b040:	dd000815 	stw	r20,32(sp)
 104b044:	2828d53a 	srli	r20,r5,20
 104b048:	dd800a15 	stw	r22,40(sp)
 104b04c:	282cd7fa 	srli	r22,r5,31
 104b050:	dc000415 	stw	r16,16(sp)
 104b054:	04000434 	movhi	r16,16
 104b058:	df000c15 	stw	fp,48(sp)
 104b05c:	dcc00715 	stw	r19,28(sp)
 104b060:	dc800615 	stw	r18,24(sp)
 104b064:	dc400515 	stw	r17,20(sp)
 104b068:	843fffc4 	addi	r16,r16,-1
 104b06c:	dfc00d15 	stw	ra,52(sp)
 104b070:	ddc00b15 	stw	r23,44(sp)
 104b074:	dd400915 	stw	r21,36(sp)
 104b078:	a501ffcc 	andi	r20,r20,2047
 104b07c:	2025883a 	mov	r18,r4
 104b080:	2027883a 	mov	r19,r4
 104b084:	2c22703a 	and	r17,r5,r16
 104b088:	b7003fcc 	andi	fp,r22,255
 104b08c:	a0005e26 	beq	r20,zero,104b208 <__divdf3+0x1cc>
 104b090:	0081ffc4 	movi	r2,2047
 104b094:	a0803526 	beq	r20,r2,104b16c <__divdf3+0x130>
 104b098:	8c000434 	orhi	r16,r17,16
 104b09c:	2004d77a 	srli	r2,r4,29
 104b0a0:	802090fa 	slli	r16,r16,3
 104b0a4:	202690fa 	slli	r19,r4,3
 104b0a8:	a53f0044 	addi	r20,r20,-1023
 104b0ac:	80a2b03a 	or	r17,r16,r2
 104b0b0:	0025883a 	mov	r18,zero
 104b0b4:	0011883a 	mov	r8,zero
 104b0b8:	380ad53a 	srli	r5,r7,20
 104b0bc:	382ed7fa 	srli	r23,r7,31
 104b0c0:	04000434 	movhi	r16,16
 104b0c4:	843fffc4 	addi	r16,r16,-1
 104b0c8:	2941ffcc 	andi	r5,r5,2047
 104b0cc:	302b883a 	mov	r21,r6
 104b0d0:	3c20703a 	and	r16,r7,r16
 104b0d4:	ba403fcc 	andi	r9,r23,255
 104b0d8:	28006726 	beq	r5,zero,104b278 <__divdf3+0x23c>
 104b0dc:	0081ffc4 	movi	r2,2047
 104b0e0:	28805f26 	beq	r5,r2,104b260 <__divdf3+0x224>
 104b0e4:	84000434 	orhi	r16,r16,16
 104b0e8:	3004d77a 	srli	r2,r6,29
 104b0ec:	802090fa 	slli	r16,r16,3
 104b0f0:	302a90fa 	slli	r21,r6,3
 104b0f4:	297f0044 	addi	r5,r5,-1023
 104b0f8:	80a0b03a 	or	r16,r16,r2
 104b0fc:	000f883a 	mov	r7,zero
 104b100:	3c86b03a 	or	r3,r7,r18
 104b104:	180690ba 	slli	r3,r3,2
 104b108:	00804174 	movhi	r2,261
 104b10c:	10ac4b04 	addi	r2,r2,-20180
 104b110:	1887883a 	add	r3,r3,r2
 104b114:	18c00017 	ldw	r3,0(r3)
 104b118:	b5c8f03a 	xor	r4,r22,r23
 104b11c:	200d883a 	mov	r6,r4
 104b120:	24803fcc 	andi	r18,r4,255
 104b124:	a169c83a 	sub	r20,r20,r5
 104b128:	1800683a 	jmp	r3
 104b12c:	0104b374 	movhi	r4,4813
 104b130:	0104b1a4 	muli	r4,zero,4806
 104b134:	0104b338 	rdprs	r4,zero,4812
 104b138:	0104b188 	cmpgei	r4,zero,4806
 104b13c:	0104b338 	rdprs	r4,zero,4812
 104b140:	0104b30c 	andi	r4,zero,4812
 104b144:	0104b338 	rdprs	r4,zero,4812
 104b148:	0104b188 	cmpgei	r4,zero,4806
 104b14c:	0104b1a4 	muli	r4,zero,4806
 104b150:	0104b1a4 	muli	r4,zero,4806
 104b154:	0104b30c 	andi	r4,zero,4812
 104b158:	0104b188 	cmpgei	r4,zero,4806
 104b15c:	0104b198 	cmpnei	r4,zero,4806
 104b160:	0104b198 	cmpnei	r4,zero,4806
 104b164:	0104b198 	cmpnei	r4,zero,4806
 104b168:	0104b348 	cmpgei	r4,zero,4813
 104b16c:	8904b03a 	or	r2,r17,r4
 104b170:	1000631e 	bne	r2,zero,104b300 <__divdf3+0x2c4>
 104b174:	04800204 	movi	r18,8
 104b178:	0023883a 	mov	r17,zero
 104b17c:	0027883a 	mov	r19,zero
 104b180:	02000084 	movi	r8,2
 104b184:	003fcc06 	br	104b0b8 <__alt_data_end+0xfffeb0b8>
 104b188:	8023883a 	mov	r17,r16
 104b18c:	a827883a 	mov	r19,r21
 104b190:	4839883a 	mov	fp,r9
 104b194:	3811883a 	mov	r8,r7
 104b198:	00800084 	movi	r2,2
 104b19c:	40812a1e 	bne	r8,r2,104b648 <__divdf3+0x60c>
 104b1a0:	e025883a 	mov	r18,fp
 104b1a4:	9180004c 	andi	r6,r18,1
 104b1a8:	0101ffc4 	movi	r4,2047
 104b1ac:	000b883a 	mov	r5,zero
 104b1b0:	0027883a 	mov	r19,zero
 104b1b4:	2008953a 	slli	r4,r4,20
 104b1b8:	30c03fcc 	andi	r3,r6,255
 104b1bc:	04000434 	movhi	r16,16
 104b1c0:	180697fa 	slli	r3,r3,31
 104b1c4:	843fffc4 	addi	r16,r16,-1
 104b1c8:	2c20703a 	and	r16,r5,r16
 104b1cc:	8120b03a 	or	r16,r16,r4
 104b1d0:	80c6b03a 	or	r3,r16,r3
 104b1d4:	9805883a 	mov	r2,r19
 104b1d8:	dfc00d17 	ldw	ra,52(sp)
 104b1dc:	df000c17 	ldw	fp,48(sp)
 104b1e0:	ddc00b17 	ldw	r23,44(sp)
 104b1e4:	dd800a17 	ldw	r22,40(sp)
 104b1e8:	dd400917 	ldw	r21,36(sp)
 104b1ec:	dd000817 	ldw	r20,32(sp)
 104b1f0:	dcc00717 	ldw	r19,28(sp)
 104b1f4:	dc800617 	ldw	r18,24(sp)
 104b1f8:	dc400517 	ldw	r17,20(sp)
 104b1fc:	dc000417 	ldw	r16,16(sp)
 104b200:	dec00e04 	addi	sp,sp,56
 104b204:	f800283a 	ret
 104b208:	8904b03a 	or	r2,r17,r4
 104b20c:	10003726 	beq	r2,zero,104b2ec <__divdf3+0x2b0>
 104b210:	88011c26 	beq	r17,zero,104b684 <__divdf3+0x648>
 104b214:	8809883a 	mov	r4,r17
 104b218:	d9800315 	stw	r6,12(sp)
 104b21c:	d9c00115 	stw	r7,4(sp)
 104b220:	10409dc0 	call	10409dc <__clzsi2>
 104b224:	d9800317 	ldw	r6,12(sp)
 104b228:	d9c00117 	ldw	r7,4(sp)
 104b22c:	1007883a 	mov	r3,r2
 104b230:	01000a04 	movi	r4,40
 104b234:	1cfffe04 	addi	r19,r3,-8
 104b238:	20c9c83a 	sub	r4,r4,r3
 104b23c:	8cca983a 	sll	r5,r17,r19
 104b240:	9108d83a 	srl	r4,r18,r4
 104b244:	94e6983a 	sll	r19,r18,r19
 104b248:	2162b03a 	or	r17,r4,r5
 104b24c:	053f0344 	movi	r20,-1011
 104b250:	a0e9c83a 	sub	r20,r20,r3
 104b254:	0025883a 	mov	r18,zero
 104b258:	0011883a 	mov	r8,zero
 104b25c:	003f9606 	br	104b0b8 <__alt_data_end+0xfffeb0b8>
 104b260:	8184b03a 	or	r2,r16,r6
 104b264:	10001f1e 	bne	r2,zero,104b2e4 <__divdf3+0x2a8>
 104b268:	0021883a 	mov	r16,zero
 104b26c:	002b883a 	mov	r21,zero
 104b270:	01c00084 	movi	r7,2
 104b274:	003fa206 	br	104b100 <__alt_data_end+0xfffeb100>
 104b278:	8184b03a 	or	r2,r16,r6
 104b27c:	10001526 	beq	r2,zero,104b2d4 <__divdf3+0x298>
 104b280:	80010c26 	beq	r16,zero,104b6b4 <__divdf3+0x678>
 104b284:	8009883a 	mov	r4,r16
 104b288:	d9800315 	stw	r6,12(sp)
 104b28c:	da000215 	stw	r8,8(sp)
 104b290:	da400015 	stw	r9,0(sp)
 104b294:	10409dc0 	call	10409dc <__clzsi2>
 104b298:	d9800317 	ldw	r6,12(sp)
 104b29c:	da000217 	ldw	r8,8(sp)
 104b2a0:	da400017 	ldw	r9,0(sp)
 104b2a4:	1007883a 	mov	r3,r2
 104b2a8:	01000a04 	movi	r4,40
 104b2ac:	1d7ffe04 	addi	r21,r3,-8
 104b2b0:	20c9c83a 	sub	r4,r4,r3
 104b2b4:	8560983a 	sll	r16,r16,r21
 104b2b8:	3108d83a 	srl	r4,r6,r4
 104b2bc:	356a983a 	sll	r21,r6,r21
 104b2c0:	2420b03a 	or	r16,r4,r16
 104b2c4:	017f0344 	movi	r5,-1011
 104b2c8:	28cbc83a 	sub	r5,r5,r3
 104b2cc:	000f883a 	mov	r7,zero
 104b2d0:	003f8b06 	br	104b100 <__alt_data_end+0xfffeb100>
 104b2d4:	0021883a 	mov	r16,zero
 104b2d8:	002b883a 	mov	r21,zero
 104b2dc:	01c00044 	movi	r7,1
 104b2e0:	003f8706 	br	104b100 <__alt_data_end+0xfffeb100>
 104b2e4:	01c000c4 	movi	r7,3
 104b2e8:	003f8506 	br	104b100 <__alt_data_end+0xfffeb100>
 104b2ec:	04800104 	movi	r18,4
 104b2f0:	0023883a 	mov	r17,zero
 104b2f4:	0027883a 	mov	r19,zero
 104b2f8:	02000044 	movi	r8,1
 104b2fc:	003f6e06 	br	104b0b8 <__alt_data_end+0xfffeb0b8>
 104b300:	04800304 	movi	r18,12
 104b304:	020000c4 	movi	r8,3
 104b308:	003f6b06 	br	104b0b8 <__alt_data_end+0xfffeb0b8>
 104b30c:	01400434 	movhi	r5,16
 104b310:	000d883a 	mov	r6,zero
 104b314:	297fffc4 	addi	r5,r5,-1
 104b318:	04ffffc4 	movi	r19,-1
 104b31c:	0101ffc4 	movi	r4,2047
 104b320:	003fa406 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b324:	043f0084 	movi	r16,-1022
 104b328:	8521c83a 	sub	r16,r16,r20
 104b32c:	00800e04 	movi	r2,56
 104b330:	1401200e 	bge	r2,r16,104b7b4 <__divdf3+0x778>
 104b334:	9180004c 	andi	r6,r18,1
 104b338:	0009883a 	mov	r4,zero
 104b33c:	000b883a 	mov	r5,zero
 104b340:	0027883a 	mov	r19,zero
 104b344:	003f9b06 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b348:	8880022c 	andhi	r2,r17,8
 104b34c:	1000c726 	beq	r2,zero,104b66c <__divdf3+0x630>
 104b350:	8080022c 	andhi	r2,r16,8
 104b354:	1000c51e 	bne	r2,zero,104b66c <__divdf3+0x630>
 104b358:	00800434 	movhi	r2,16
 104b35c:	81400234 	orhi	r5,r16,8
 104b360:	10bfffc4 	addi	r2,r2,-1
 104b364:	b80d883a 	mov	r6,r23
 104b368:	288a703a 	and	r5,r5,r2
 104b36c:	a827883a 	mov	r19,r21
 104b370:	003fea06 	br	104b31c <__alt_data_end+0xfffeb31c>
 104b374:	8440ea36 	bltu	r16,r17,104b720 <__divdf3+0x6e4>
 104b378:	8c00e826 	beq	r17,r16,104b71c <__divdf3+0x6e0>
 104b37c:	a53fffc4 	addi	r20,r20,-1
 104b380:	882d883a 	mov	r22,r17
 104b384:	000d883a 	mov	r6,zero
 104b388:	a804d63a 	srli	r2,r21,24
 104b38c:	8020923a 	slli	r16,r16,8
 104b390:	b009883a 	mov	r4,r22
 104b394:	d9800315 	stw	r6,12(sp)
 104b398:	1420b03a 	or	r16,r2,r16
 104b39c:	802ed43a 	srli	r23,r16,16
 104b3a0:	873fffcc 	andi	fp,r16,65535
 104b3a4:	a82a923a 	slli	r21,r21,8
 104b3a8:	b80b883a 	mov	r5,r23
 104b3ac:	104a7900 	call	104a790 <__udivsi3>
 104b3b0:	b009883a 	mov	r4,r22
 104b3b4:	b80b883a 	mov	r5,r23
 104b3b8:	1023883a 	mov	r17,r2
 104b3bc:	104a7980 	call	104a798 <__umodsi3>
 104b3c0:	1004943a 	slli	r2,r2,16
 104b3c4:	9808d43a 	srli	r4,r19,16
 104b3c8:	8f2d383a 	mul	r22,r17,fp
 104b3cc:	d9800317 	ldw	r6,12(sp)
 104b3d0:	1106b03a 	or	r3,r2,r4
 104b3d4:	1d80062e 	bgeu	r3,r22,104b3f0 <__divdf3+0x3b4>
 104b3d8:	1c07883a 	add	r3,r3,r16
 104b3dc:	88bfffc4 	addi	r2,r17,-1
 104b3e0:	1c00dc36 	bltu	r3,r16,104b754 <__divdf3+0x718>
 104b3e4:	1d80db2e 	bgeu	r3,r22,104b754 <__divdf3+0x718>
 104b3e8:	8c7fff84 	addi	r17,r17,-2
 104b3ec:	1c07883a 	add	r3,r3,r16
 104b3f0:	1dadc83a 	sub	r22,r3,r22
 104b3f4:	b009883a 	mov	r4,r22
 104b3f8:	b80b883a 	mov	r5,r23
 104b3fc:	d9800315 	stw	r6,12(sp)
 104b400:	104a7900 	call	104a790 <__udivsi3>
 104b404:	b009883a 	mov	r4,r22
 104b408:	b80b883a 	mov	r5,r23
 104b40c:	d8800015 	stw	r2,0(sp)
 104b410:	104a7980 	call	104a798 <__umodsi3>
 104b414:	da400017 	ldw	r9,0(sp)
 104b418:	1004943a 	slli	r2,r2,16
 104b41c:	9cffffcc 	andi	r19,r19,65535
 104b420:	4f07383a 	mul	r3,r9,fp
 104b424:	14c8b03a 	or	r4,r2,r19
 104b428:	d9800317 	ldw	r6,12(sp)
 104b42c:	20c0062e 	bgeu	r4,r3,104b448 <__divdf3+0x40c>
 104b430:	2409883a 	add	r4,r4,r16
 104b434:	48bfffc4 	addi	r2,r9,-1
 104b438:	2400c436 	bltu	r4,r16,104b74c <__divdf3+0x710>
 104b43c:	20c0c32e 	bgeu	r4,r3,104b74c <__divdf3+0x710>
 104b440:	4a7fff84 	addi	r9,r9,-2
 104b444:	2409883a 	add	r4,r4,r16
 104b448:	8822943a 	slli	r17,r17,16
 104b44c:	a80ed43a 	srli	r7,r21,16
 104b450:	aa3fffcc 	andi	r8,r21,65535
 104b454:	4c62b03a 	or	r17,r9,r17
 104b458:	8816d43a 	srli	r11,r17,16
 104b45c:	897fffcc 	andi	r5,r17,65535
 104b460:	2a15383a 	mul	r10,r5,r8
 104b464:	5a19383a 	mul	r12,r11,r8
 104b468:	29cb383a 	mul	r5,r5,r7
 104b46c:	5012d43a 	srli	r9,r10,16
 104b470:	20c5c83a 	sub	r2,r4,r3
 104b474:	614b883a 	add	r5,r12,r5
 104b478:	2a4b883a 	add	r5,r5,r9
 104b47c:	59c7383a 	mul	r3,r11,r7
 104b480:	2b00022e 	bgeu	r5,r12,104b48c <__divdf3+0x450>
 104b484:	01000074 	movhi	r4,1
 104b488:	1907883a 	add	r3,r3,r4
 104b48c:	2808d43a 	srli	r4,r5,16
 104b490:	280a943a 	slli	r5,r5,16
 104b494:	54ffffcc 	andi	r19,r10,65535
 104b498:	1907883a 	add	r3,r3,r4
 104b49c:	2ccb883a 	add	r5,r5,r19
 104b4a0:	10c09336 	bltu	r2,r3,104b6f0 <__divdf3+0x6b4>
 104b4a4:	10c0ad26 	beq	r2,r3,104b75c <__divdf3+0x720>
 104b4a8:	10c7c83a 	sub	r3,r2,r3
 104b4ac:	3167c83a 	sub	r19,r6,r5
 104b4b0:	34ed803a 	cmpltu	r22,r6,r19
 104b4b4:	1dadc83a 	sub	r22,r3,r22
 104b4b8:	b400b226 	beq	r22,r16,104b784 <__divdf3+0x748>
 104b4bc:	b009883a 	mov	r4,r22
 104b4c0:	b80b883a 	mov	r5,r23
 104b4c4:	d9c00115 	stw	r7,4(sp)
 104b4c8:	da000215 	stw	r8,8(sp)
 104b4cc:	104a7900 	call	104a790 <__udivsi3>
 104b4d0:	b009883a 	mov	r4,r22
 104b4d4:	b80b883a 	mov	r5,r23
 104b4d8:	d8800315 	stw	r2,12(sp)
 104b4dc:	104a7980 	call	104a798 <__umodsi3>
 104b4e0:	d9800317 	ldw	r6,12(sp)
 104b4e4:	1004943a 	slli	r2,r2,16
 104b4e8:	9808d43a 	srli	r4,r19,16
 104b4ec:	372d383a 	mul	r22,r6,fp
 104b4f0:	d9c00117 	ldw	r7,4(sp)
 104b4f4:	1106b03a 	or	r3,r2,r4
 104b4f8:	da000217 	ldw	r8,8(sp)
 104b4fc:	1d80062e 	bgeu	r3,r22,104b518 <__divdf3+0x4dc>
 104b500:	1c07883a 	add	r3,r3,r16
 104b504:	30bfffc4 	addi	r2,r6,-1
 104b508:	1c00a036 	bltu	r3,r16,104b78c <__divdf3+0x750>
 104b50c:	1d809f2e 	bgeu	r3,r22,104b78c <__divdf3+0x750>
 104b510:	31bfff84 	addi	r6,r6,-2
 104b514:	1c07883a 	add	r3,r3,r16
 104b518:	1dadc83a 	sub	r22,r3,r22
 104b51c:	b009883a 	mov	r4,r22
 104b520:	b80b883a 	mov	r5,r23
 104b524:	d9800315 	stw	r6,12(sp)
 104b528:	d9c00115 	stw	r7,4(sp)
 104b52c:	da000215 	stw	r8,8(sp)
 104b530:	104a7900 	call	104a790 <__udivsi3>
 104b534:	b009883a 	mov	r4,r22
 104b538:	b80b883a 	mov	r5,r23
 104b53c:	d8800015 	stw	r2,0(sp)
 104b540:	104a7980 	call	104a798 <__umodsi3>
 104b544:	da400017 	ldw	r9,0(sp)
 104b548:	1004943a 	slli	r2,r2,16
 104b54c:	993fffcc 	andi	r4,r19,65535
 104b550:	4f39383a 	mul	fp,r9,fp
 104b554:	1106b03a 	or	r3,r2,r4
 104b558:	d9800317 	ldw	r6,12(sp)
 104b55c:	d9c00117 	ldw	r7,4(sp)
 104b560:	da000217 	ldw	r8,8(sp)
 104b564:	1f00062e 	bgeu	r3,fp,104b580 <__divdf3+0x544>
 104b568:	1c07883a 	add	r3,r3,r16
 104b56c:	48bfffc4 	addi	r2,r9,-1
 104b570:	1c008836 	bltu	r3,r16,104b794 <__divdf3+0x758>
 104b574:	1f00872e 	bgeu	r3,fp,104b794 <__divdf3+0x758>
 104b578:	4a7fff84 	addi	r9,r9,-2
 104b57c:	1c07883a 	add	r3,r3,r16
 104b580:	3008943a 	slli	r4,r6,16
 104b584:	1f07c83a 	sub	r3,r3,fp
 104b588:	4926b03a 	or	r19,r9,r4
 104b58c:	993fffcc 	andi	r4,r19,65535
 104b590:	980cd43a 	srli	r6,r19,16
 104b594:	220b383a 	mul	r5,r4,r8
 104b598:	21c5383a 	mul	r2,r4,r7
 104b59c:	3211383a 	mul	r8,r6,r8
 104b5a0:	2808d43a 	srli	r4,r5,16
 104b5a4:	31cf383a 	mul	r7,r6,r7
 104b5a8:	4085883a 	add	r2,r8,r2
 104b5ac:	1105883a 	add	r2,r2,r4
 104b5b0:	1200022e 	bgeu	r2,r8,104b5bc <__divdf3+0x580>
 104b5b4:	01000074 	movhi	r4,1
 104b5b8:	390f883a 	add	r7,r7,r4
 104b5bc:	1008d43a 	srli	r4,r2,16
 104b5c0:	1004943a 	slli	r2,r2,16
 104b5c4:	297fffcc 	andi	r5,r5,65535
 104b5c8:	390f883a 	add	r7,r7,r4
 104b5cc:	1145883a 	add	r2,r2,r5
 104b5d0:	19c06536 	bltu	r3,r7,104b768 <__divdf3+0x72c>
 104b5d4:	19c09f26 	beq	r3,r7,104b854 <__divdf3+0x818>
 104b5d8:	9cc00054 	ori	r19,r19,1
 104b5dc:	a100ffc4 	addi	r4,r20,1023
 104b5e0:	013f500e 	bge	zero,r4,104b324 <__alt_data_end+0xfffeb324>
 104b5e4:	988001cc 	andi	r2,r19,7
 104b5e8:	10000726 	beq	r2,zero,104b608 <__divdf3+0x5cc>
 104b5ec:	98c003cc 	andi	r3,r19,15
 104b5f0:	00800104 	movi	r2,4
 104b5f4:	18800426 	beq	r3,r2,104b608 <__divdf3+0x5cc>
 104b5f8:	9885883a 	add	r2,r19,r2
 104b5fc:	14e1803a 	cmpltu	r16,r2,r19
 104b600:	8c23883a 	add	r17,r17,r16
 104b604:	1027883a 	mov	r19,r2
 104b608:	8880402c 	andhi	r2,r17,256
 104b60c:	10000426 	beq	r2,zero,104b620 <__divdf3+0x5e4>
 104b610:	00bfc034 	movhi	r2,65280
 104b614:	10bfffc4 	addi	r2,r2,-1
 104b618:	a1010004 	addi	r4,r20,1024
 104b61c:	88a2703a 	and	r17,r17,r2
 104b620:	0081ff84 	movi	r2,2046
 104b624:	113edf16 	blt	r2,r4,104b1a4 <__alt_data_end+0xfffeb1a4>
 104b628:	9826d0fa 	srli	r19,r19,3
 104b62c:	8804977a 	slli	r2,r17,29
 104b630:	8820927a 	slli	r16,r17,9
 104b634:	2101ffcc 	andi	r4,r4,2047
 104b638:	14e6b03a 	or	r19,r2,r19
 104b63c:	800ad33a 	srli	r5,r16,12
 104b640:	9180004c 	andi	r6,r18,1
 104b644:	003edb06 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b648:	008000c4 	movi	r2,3
 104b64c:	4080a826 	beq	r8,r2,104b8f0 <__divdf3+0x8b4>
 104b650:	00800044 	movi	r2,1
 104b654:	4080551e 	bne	r8,r2,104b7ac <__divdf3+0x770>
 104b658:	e00d883a 	mov	r6,fp
 104b65c:	0009883a 	mov	r4,zero
 104b660:	000b883a 	mov	r5,zero
 104b664:	0027883a 	mov	r19,zero
 104b668:	003ed206 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b66c:	00800434 	movhi	r2,16
 104b670:	89400234 	orhi	r5,r17,8
 104b674:	10bfffc4 	addi	r2,r2,-1
 104b678:	b00d883a 	mov	r6,r22
 104b67c:	288a703a 	and	r5,r5,r2
 104b680:	003f2606 	br	104b31c <__alt_data_end+0xfffeb31c>
 104b684:	d9800315 	stw	r6,12(sp)
 104b688:	d9c00115 	stw	r7,4(sp)
 104b68c:	10409dc0 	call	10409dc <__clzsi2>
 104b690:	10c00804 	addi	r3,r2,32
 104b694:	010009c4 	movi	r4,39
 104b698:	d9800317 	ldw	r6,12(sp)
 104b69c:	d9c00117 	ldw	r7,4(sp)
 104b6a0:	20fee30e 	bge	r4,r3,104b230 <__alt_data_end+0xfffeb230>
 104b6a4:	117ffe04 	addi	r5,r2,-8
 104b6a8:	9162983a 	sll	r17,r18,r5
 104b6ac:	0027883a 	mov	r19,zero
 104b6b0:	003ee606 	br	104b24c <__alt_data_end+0xfffeb24c>
 104b6b4:	3009883a 	mov	r4,r6
 104b6b8:	d9800315 	stw	r6,12(sp)
 104b6bc:	da000215 	stw	r8,8(sp)
 104b6c0:	da400015 	stw	r9,0(sp)
 104b6c4:	10409dc0 	call	10409dc <__clzsi2>
 104b6c8:	10c00804 	addi	r3,r2,32
 104b6cc:	010009c4 	movi	r4,39
 104b6d0:	d9800317 	ldw	r6,12(sp)
 104b6d4:	da000217 	ldw	r8,8(sp)
 104b6d8:	da400017 	ldw	r9,0(sp)
 104b6dc:	20fef20e 	bge	r4,r3,104b2a8 <__alt_data_end+0xfffeb2a8>
 104b6e0:	10bffe04 	addi	r2,r2,-8
 104b6e4:	a8a0983a 	sll	r16,r21,r2
 104b6e8:	002b883a 	mov	r21,zero
 104b6ec:	003ef506 	br	104b2c4 <__alt_data_end+0xfffeb2c4>
 104b6f0:	354d883a 	add	r6,r6,r21
 104b6f4:	3549803a 	cmpltu	r4,r6,r21
 104b6f8:	2409883a 	add	r4,r4,r16
 104b6fc:	2089883a 	add	r4,r4,r2
 104b700:	88bfffc4 	addi	r2,r17,-1
 104b704:	81000c2e 	bgeu	r16,r4,104b738 <__divdf3+0x6fc>
 104b708:	20c04436 	bltu	r4,r3,104b81c <__divdf3+0x7e0>
 104b70c:	19006f26 	beq	r3,r4,104b8cc <__divdf3+0x890>
 104b710:	20c7c83a 	sub	r3,r4,r3
 104b714:	1023883a 	mov	r17,r2
 104b718:	003f6406 	br	104b4ac <__alt_data_end+0xfffeb4ac>
 104b71c:	9d7f1736 	bltu	r19,r21,104b37c <__alt_data_end+0xfffeb37c>
 104b720:	9806d07a 	srli	r3,r19,1
 104b724:	880497fa 	slli	r2,r17,31
 104b728:	980c97fa 	slli	r6,r19,31
 104b72c:	882cd07a 	srli	r22,r17,1
 104b730:	18a6b03a 	or	r19,r3,r2
 104b734:	003f1406 	br	104b388 <__alt_data_end+0xfffeb388>
 104b738:	243ff51e 	bne	r4,r16,104b710 <__alt_data_end+0xfffeb710>
 104b73c:	357ff22e 	bgeu	r6,r21,104b708 <__alt_data_end+0xfffeb708>
 104b740:	80c7c83a 	sub	r3,r16,r3
 104b744:	1023883a 	mov	r17,r2
 104b748:	003f5806 	br	104b4ac <__alt_data_end+0xfffeb4ac>
 104b74c:	1013883a 	mov	r9,r2
 104b750:	003f3d06 	br	104b448 <__alt_data_end+0xfffeb448>
 104b754:	1023883a 	mov	r17,r2
 104b758:	003f2506 	br	104b3f0 <__alt_data_end+0xfffeb3f0>
 104b75c:	317fe436 	bltu	r6,r5,104b6f0 <__alt_data_end+0xfffeb6f0>
 104b760:	0007883a 	mov	r3,zero
 104b764:	003f5106 	br	104b4ac <__alt_data_end+0xfffeb4ac>
 104b768:	1c07883a 	add	r3,r3,r16
 104b76c:	993fffc4 	addi	r4,r19,-1
 104b770:	1c000a2e 	bgeu	r3,r16,104b79c <__divdf3+0x760>
 104b774:	2027883a 	mov	r19,r4
 104b778:	19ff971e 	bne	r3,r7,104b5d8 <__alt_data_end+0xfffeb5d8>
 104b77c:	a8bf961e 	bne	r21,r2,104b5d8 <__alt_data_end+0xfffeb5d8>
 104b780:	003f9606 	br	104b5dc <__alt_data_end+0xfffeb5dc>
 104b784:	04ffffc4 	movi	r19,-1
 104b788:	003f9406 	br	104b5dc <__alt_data_end+0xfffeb5dc>
 104b78c:	100d883a 	mov	r6,r2
 104b790:	003f6106 	br	104b518 <__alt_data_end+0xfffeb518>
 104b794:	1013883a 	mov	r9,r2
 104b798:	003f7906 	br	104b580 <__alt_data_end+0xfffeb580>
 104b79c:	19c02636 	bltu	r3,r7,104b838 <__divdf3+0x7fc>
 104b7a0:	38c04d26 	beq	r7,r3,104b8d8 <__divdf3+0x89c>
 104b7a4:	2027883a 	mov	r19,r4
 104b7a8:	003f8b06 	br	104b5d8 <__alt_data_end+0xfffeb5d8>
 104b7ac:	e025883a 	mov	r18,fp
 104b7b0:	003f8a06 	br	104b5dc <__alt_data_end+0xfffeb5dc>
 104b7b4:	008007c4 	movi	r2,31
 104b7b8:	14002a16 	blt	r2,r16,104b864 <__divdf3+0x828>
 104b7bc:	a5010784 	addi	r20,r20,1054
 104b7c0:	8d04983a 	sll	r2,r17,r20
 104b7c4:	9c06d83a 	srl	r3,r19,r16
 104b7c8:	9d28983a 	sll	r20,r19,r20
 104b7cc:	8c20d83a 	srl	r16,r17,r16
 104b7d0:	1886b03a 	or	r3,r3,r2
 104b7d4:	a004c03a 	cmpne	r2,r20,zero
 104b7d8:	1884b03a 	or	r2,r3,r2
 104b7dc:	10c001cc 	andi	r3,r2,7
 104b7e0:	18000726 	beq	r3,zero,104b800 <__divdf3+0x7c4>
 104b7e4:	110003cc 	andi	r4,r2,15
 104b7e8:	00c00104 	movi	r3,4
 104b7ec:	20c00426 	beq	r4,r3,104b800 <__divdf3+0x7c4>
 104b7f0:	10c00104 	addi	r3,r2,4
 104b7f4:	1885803a 	cmpltu	r2,r3,r2
 104b7f8:	80a1883a 	add	r16,r16,r2
 104b7fc:	1805883a 	mov	r2,r3
 104b800:	80c0202c 	andhi	r3,r16,128
 104b804:	18002d26 	beq	r3,zero,104b8bc <__divdf3+0x880>
 104b808:	9180004c 	andi	r6,r18,1
 104b80c:	01000044 	movi	r4,1
 104b810:	000b883a 	mov	r5,zero
 104b814:	0027883a 	mov	r19,zero
 104b818:	003e6606 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b81c:	354d883a 	add	r6,r6,r21
 104b820:	356d803a 	cmpltu	r22,r6,r21
 104b824:	b42d883a 	add	r22,r22,r16
 104b828:	b12d883a 	add	r22,r22,r4
 104b82c:	8c7fff84 	addi	r17,r17,-2
 104b830:	b0c7c83a 	sub	r3,r22,r3
 104b834:	003f1d06 	br	104b4ac <__alt_data_end+0xfffeb4ac>
 104b838:	ad4b883a 	add	r5,r21,r21
 104b83c:	2d6b803a 	cmpltu	r21,r5,r21
 104b840:	ac2b883a 	add	r21,r21,r16
 104b844:	1d47883a 	add	r3,r3,r21
 104b848:	993fff84 	addi	r4,r19,-2
 104b84c:	282b883a 	mov	r21,r5
 104b850:	003fc806 	br	104b774 <__alt_data_end+0xfffeb774>
 104b854:	103fc41e 	bne	r2,zero,104b768 <__alt_data_end+0xfffeb768>
 104b858:	002b883a 	mov	r21,zero
 104b85c:	a8bf5e1e 	bne	r21,r2,104b5d8 <__alt_data_end+0xfffeb5d8>
 104b860:	003f5e06 	br	104b5dc <__alt_data_end+0xfffeb5dc>
 104b864:	00bef884 	movi	r2,-1054
 104b868:	1505c83a 	sub	r2,r2,r20
 104b86c:	00c00804 	movi	r3,32
 104b870:	8884d83a 	srl	r2,r17,r2
 104b874:	80c01c26 	beq	r16,r3,104b8e8 <__divdf3+0x8ac>
 104b878:	a0c10f84 	addi	r3,r20,1086
 104b87c:	88c6983a 	sll	r3,r17,r3
 104b880:	1cc6b03a 	or	r3,r3,r19
 104b884:	1806c03a 	cmpne	r3,r3,zero
 104b888:	1884b03a 	or	r2,r3,r2
 104b88c:	140001cc 	andi	r16,r2,7
 104b890:	8000061e 	bne	r16,zero,104b8ac <__divdf3+0x870>
 104b894:	000b883a 	mov	r5,zero
 104b898:	1004d0fa 	srli	r2,r2,3
 104b89c:	9180004c 	andi	r6,r18,1
 104b8a0:	0009883a 	mov	r4,zero
 104b8a4:	1426b03a 	or	r19,r2,r16
 104b8a8:	003e4206 	br	104b1b4 <__alt_data_end+0xfffeb1b4>
 104b8ac:	110003cc 	andi	r4,r2,15
 104b8b0:	00c00104 	movi	r3,4
 104b8b4:	0021883a 	mov	r16,zero
 104b8b8:	20ffcd1e 	bne	r4,r3,104b7f0 <__alt_data_end+0xfffeb7f0>
 104b8bc:	800a927a 	slli	r5,r16,9
 104b8c0:	8020977a 	slli	r16,r16,29
 104b8c4:	280ad33a 	srli	r5,r5,12
 104b8c8:	003ff306 	br	104b898 <__alt_data_end+0xfffeb898>
 104b8cc:	317fd336 	bltu	r6,r5,104b81c <__alt_data_end+0xfffeb81c>
 104b8d0:	1023883a 	mov	r17,r2
 104b8d4:	003fa206 	br	104b760 <__alt_data_end+0xfffeb760>
 104b8d8:	a8bfd736 	bltu	r21,r2,104b838 <__alt_data_end+0xfffeb838>
 104b8dc:	2027883a 	mov	r19,r4
 104b8e0:	a8bf3d1e 	bne	r21,r2,104b5d8 <__alt_data_end+0xfffeb5d8>
 104b8e4:	003f3d06 	br	104b5dc <__alt_data_end+0xfffeb5dc>
 104b8e8:	0007883a 	mov	r3,zero
 104b8ec:	003fe406 	br	104b880 <__alt_data_end+0xfffeb880>
 104b8f0:	00800434 	movhi	r2,16
 104b8f4:	89400234 	orhi	r5,r17,8
 104b8f8:	10bfffc4 	addi	r2,r2,-1
 104b8fc:	e00d883a 	mov	r6,fp
 104b900:	288a703a 	and	r5,r5,r2
 104b904:	003e8506 	br	104b31c <__alt_data_end+0xfffeb31c>

0104b908 <__eqdf2>:
 104b908:	2804d53a 	srli	r2,r5,20
 104b90c:	3806d53a 	srli	r3,r7,20
 104b910:	02000434 	movhi	r8,16
 104b914:	423fffc4 	addi	r8,r8,-1
 104b918:	1081ffcc 	andi	r2,r2,2047
 104b91c:	0241ffc4 	movi	r9,2047
 104b920:	2a14703a 	and	r10,r5,r8
 104b924:	18c1ffcc 	andi	r3,r3,2047
 104b928:	3a10703a 	and	r8,r7,r8
 104b92c:	280ad7fa 	srli	r5,r5,31
 104b930:	380ed7fa 	srli	r7,r7,31
 104b934:	12400f26 	beq	r2,r9,104b974 <__eqdf2+0x6c>
 104b938:	0241ffc4 	movi	r9,2047
 104b93c:	1a400326 	beq	r3,r9,104b94c <__eqdf2+0x44>
 104b940:	10c00526 	beq	r2,r3,104b958 <__eqdf2+0x50>
 104b944:	00800044 	movi	r2,1
 104b948:	f800283a 	ret
 104b94c:	4192b03a 	or	r9,r8,r6
 104b950:	483ffc1e 	bne	r9,zero,104b944 <__alt_data_end+0xfffeb944>
 104b954:	10fffb1e 	bne	r2,r3,104b944 <__alt_data_end+0xfffeb944>
 104b958:	523ffa1e 	bne	r10,r8,104b944 <__alt_data_end+0xfffeb944>
 104b95c:	21bff91e 	bne	r4,r6,104b944 <__alt_data_end+0xfffeb944>
 104b960:	29c00826 	beq	r5,r7,104b984 <__eqdf2+0x7c>
 104b964:	103ff71e 	bne	r2,zero,104b944 <__alt_data_end+0xfffeb944>
 104b968:	5104b03a 	or	r2,r10,r4
 104b96c:	1004c03a 	cmpne	r2,r2,zero
 104b970:	f800283a 	ret
 104b974:	5112b03a 	or	r9,r10,r4
 104b978:	483fef26 	beq	r9,zero,104b938 <__alt_data_end+0xfffeb938>
 104b97c:	00800044 	movi	r2,1
 104b980:	f800283a 	ret
 104b984:	0005883a 	mov	r2,zero
 104b988:	f800283a 	ret

0104b98c <__gedf2>:
 104b98c:	2804d53a 	srli	r2,r5,20
 104b990:	3806d53a 	srli	r3,r7,20
 104b994:	02000434 	movhi	r8,16
 104b998:	423fffc4 	addi	r8,r8,-1
 104b99c:	0241ffc4 	movi	r9,2047
 104b9a0:	1081ffcc 	andi	r2,r2,2047
 104b9a4:	2a14703a 	and	r10,r5,r8
 104b9a8:	1a46703a 	and	r3,r3,r9
 104b9ac:	3a10703a 	and	r8,r7,r8
 104b9b0:	280ad7fa 	srli	r5,r5,31
 104b9b4:	380ed7fa 	srli	r7,r7,31
 104b9b8:	12400b26 	beq	r2,r9,104b9e8 <__gedf2+0x5c>
 104b9bc:	1a401626 	beq	r3,r9,104ba18 <__gedf2+0x8c>
 104b9c0:	10000c1e 	bne	r2,zero,104b9f4 <__gedf2+0x68>
 104b9c4:	5112b03a 	or	r9,r10,r4
 104b9c8:	4813003a 	cmpeq	r9,r9,zero
 104b9cc:	4817883a 	mov	r11,r9
 104b9d0:	18000c1e 	bne	r3,zero,104ba04 <__gedf2+0x78>
 104b9d4:	4198b03a 	or	r12,r8,r6
 104b9d8:	60000a1e 	bne	r12,zero,104ba04 <__gedf2+0x78>
 104b9dc:	48001326 	beq	r9,zero,104ba2c <__gedf2+0xa0>
 104b9e0:	0005883a 	mov	r2,zero
 104b9e4:	f800283a 	ret
 104b9e8:	5112b03a 	or	r9,r10,r4
 104b9ec:	4800191e 	bne	r9,zero,104ba54 <__gedf2+0xc8>
 104b9f0:	18800926 	beq	r3,r2,104ba18 <__gedf2+0x8c>
 104b9f4:	18000b1e 	bne	r3,zero,104ba24 <__gedf2+0x98>
 104b9f8:	4192b03a 	or	r9,r8,r6
 104b9fc:	0017883a 	mov	r11,zero
 104ba00:	48000a26 	beq	r9,zero,104ba2c <__gedf2+0xa0>
 104ba04:	39c03fcc 	andi	r7,r7,255
 104ba08:	58000726 	beq	r11,zero,104ba28 <__gedf2+0x9c>
 104ba0c:	3800081e 	bne	r7,zero,104ba30 <__gedf2+0xa4>
 104ba10:	00bfffc4 	movi	r2,-1
 104ba14:	f800283a 	ret
 104ba18:	4192b03a 	or	r9,r8,r6
 104ba1c:	48000d1e 	bne	r9,zero,104ba54 <__gedf2+0xc8>
 104ba20:	103fe826 	beq	r2,zero,104b9c4 <__alt_data_end+0xfffeb9c4>
 104ba24:	39c03fcc 	andi	r7,r7,255
 104ba28:	29c00326 	beq	r5,r7,104ba38 <__gedf2+0xac>
 104ba2c:	283ff81e 	bne	r5,zero,104ba10 <__alt_data_end+0xfffeba10>
 104ba30:	00800044 	movi	r2,1
 104ba34:	f800283a 	ret
 104ba38:	18bffc16 	blt	r3,r2,104ba2c <__alt_data_end+0xfffeba2c>
 104ba3c:	10c00316 	blt	r2,r3,104ba4c <__gedf2+0xc0>
 104ba40:	42bffa36 	bltu	r8,r10,104ba2c <__alt_data_end+0xfffeba2c>
 104ba44:	52000526 	beq	r10,r8,104ba5c <__gedf2+0xd0>
 104ba48:	523fe52e 	bgeu	r10,r8,104b9e0 <__alt_data_end+0xfffeb9e0>
 104ba4c:	283ff026 	beq	r5,zero,104ba10 <__alt_data_end+0xfffeba10>
 104ba50:	003ff706 	br	104ba30 <__alt_data_end+0xfffeba30>
 104ba54:	00bfff84 	movi	r2,-2
 104ba58:	f800283a 	ret
 104ba5c:	313ff336 	bltu	r6,r4,104ba2c <__alt_data_end+0xfffeba2c>
 104ba60:	21bfdf2e 	bgeu	r4,r6,104b9e0 <__alt_data_end+0xfffeb9e0>
 104ba64:	283fea26 	beq	r5,zero,104ba10 <__alt_data_end+0xfffeba10>
 104ba68:	003ff106 	br	104ba30 <__alt_data_end+0xfffeba30>

0104ba6c <__ledf2>:
 104ba6c:	2804d53a 	srli	r2,r5,20
 104ba70:	3810d53a 	srli	r8,r7,20
 104ba74:	00c00434 	movhi	r3,16
 104ba78:	18ffffc4 	addi	r3,r3,-1
 104ba7c:	0241ffc4 	movi	r9,2047
 104ba80:	1081ffcc 	andi	r2,r2,2047
 104ba84:	28d4703a 	and	r10,r5,r3
 104ba88:	4250703a 	and	r8,r8,r9
 104ba8c:	38c6703a 	and	r3,r7,r3
 104ba90:	280ad7fa 	srli	r5,r5,31
 104ba94:	380ed7fa 	srli	r7,r7,31
 104ba98:	12400b26 	beq	r2,r9,104bac8 <__ledf2+0x5c>
 104ba9c:	42401926 	beq	r8,r9,104bb04 <__ledf2+0x98>
 104baa0:	10000c1e 	bne	r2,zero,104bad4 <__ledf2+0x68>
 104baa4:	5112b03a 	or	r9,r10,r4
 104baa8:	4813003a 	cmpeq	r9,r9,zero
 104baac:	4817883a 	mov	r11,r9
 104bab0:	40000f26 	beq	r8,zero,104baf0 <__ledf2+0x84>
 104bab4:	39c03fcc 	andi	r7,r7,255
 104bab8:	58001826 	beq	r11,zero,104bb1c <__ledf2+0xb0>
 104babc:	38000a1e 	bne	r7,zero,104bae8 <__ledf2+0x7c>
 104bac0:	00bfffc4 	movi	r2,-1
 104bac4:	f800283a 	ret
 104bac8:	5112b03a 	or	r9,r10,r4
 104bacc:	48000f1e 	bne	r9,zero,104bb0c <__ledf2+0xa0>
 104bad0:	40800c26 	beq	r8,r2,104bb04 <__ledf2+0x98>
 104bad4:	4000101e 	bne	r8,zero,104bb18 <__ledf2+0xac>
 104bad8:	1992b03a 	or	r9,r3,r6
 104badc:	0017883a 	mov	r11,zero
 104bae0:	483ff41e 	bne	r9,zero,104bab4 <__alt_data_end+0xfffebab4>
 104bae4:	283ff61e 	bne	r5,zero,104bac0 <__alt_data_end+0xfffebac0>
 104bae8:	00800044 	movi	r2,1
 104baec:	f800283a 	ret
 104baf0:	1998b03a 	or	r12,r3,r6
 104baf4:	603fef1e 	bne	r12,zero,104bab4 <__alt_data_end+0xfffebab4>
 104baf8:	483ffa26 	beq	r9,zero,104bae4 <__alt_data_end+0xfffebae4>
 104bafc:	0005883a 	mov	r2,zero
 104bb00:	f800283a 	ret
 104bb04:	1992b03a 	or	r9,r3,r6
 104bb08:	48000226 	beq	r9,zero,104bb14 <__ledf2+0xa8>
 104bb0c:	00800084 	movi	r2,2
 104bb10:	f800283a 	ret
 104bb14:	103fe326 	beq	r2,zero,104baa4 <__alt_data_end+0xfffebaa4>
 104bb18:	39c03fcc 	andi	r7,r7,255
 104bb1c:	29fff11e 	bne	r5,r7,104bae4 <__alt_data_end+0xfffebae4>
 104bb20:	40bff016 	blt	r8,r2,104bae4 <__alt_data_end+0xfffebae4>
 104bb24:	12000316 	blt	r2,r8,104bb34 <__ledf2+0xc8>
 104bb28:	1abfee36 	bltu	r3,r10,104bae4 <__alt_data_end+0xfffebae4>
 104bb2c:	50c00326 	beq	r10,r3,104bb3c <__ledf2+0xd0>
 104bb30:	50fff22e 	bgeu	r10,r3,104bafc <__alt_data_end+0xfffebafc>
 104bb34:	283fe226 	beq	r5,zero,104bac0 <__alt_data_end+0xfffebac0>
 104bb38:	003feb06 	br	104bae8 <__alt_data_end+0xfffebae8>
 104bb3c:	313fe936 	bltu	r6,r4,104bae4 <__alt_data_end+0xfffebae4>
 104bb40:	21bfee2e 	bgeu	r4,r6,104bafc <__alt_data_end+0xfffebafc>
 104bb44:	283fde26 	beq	r5,zero,104bac0 <__alt_data_end+0xfffebac0>
 104bb48:	003fe706 	br	104bae8 <__alt_data_end+0xfffebae8>

0104bb4c <__muldf3>:
 104bb4c:	defff204 	addi	sp,sp,-56
 104bb50:	2804d53a 	srli	r2,r5,20
 104bb54:	dd800a15 	stw	r22,40(sp)
 104bb58:	282cd7fa 	srli	r22,r5,31
 104bb5c:	dc000415 	stw	r16,16(sp)
 104bb60:	04000434 	movhi	r16,16
 104bb64:	df000c15 	stw	fp,48(sp)
 104bb68:	dd000815 	stw	r20,32(sp)
 104bb6c:	dcc00715 	stw	r19,28(sp)
 104bb70:	dc800615 	stw	r18,24(sp)
 104bb74:	dc400515 	stw	r17,20(sp)
 104bb78:	843fffc4 	addi	r16,r16,-1
 104bb7c:	dfc00d15 	stw	ra,52(sp)
 104bb80:	ddc00b15 	stw	r23,44(sp)
 104bb84:	dd400915 	stw	r21,36(sp)
 104bb88:	1501ffcc 	andi	r20,r2,2047
 104bb8c:	2023883a 	mov	r17,r4
 104bb90:	2025883a 	mov	r18,r4
 104bb94:	2c20703a 	and	r16,r5,r16
 104bb98:	b027883a 	mov	r19,r22
 104bb9c:	b7003fcc 	andi	fp,r22,255
 104bba0:	a0005926 	beq	r20,zero,104bd08 <__muldf3+0x1bc>
 104bba4:	0081ffc4 	movi	r2,2047
 104bba8:	a0803426 	beq	r20,r2,104bc7c <__muldf3+0x130>
 104bbac:	84000434 	orhi	r16,r16,16
 104bbb0:	2004d77a 	srli	r2,r4,29
 104bbb4:	802090fa 	slli	r16,r16,3
 104bbb8:	202490fa 	slli	r18,r4,3
 104bbbc:	a53f0044 	addi	r20,r20,-1023
 104bbc0:	80a0b03a 	or	r16,r16,r2
 104bbc4:	002b883a 	mov	r21,zero
 104bbc8:	0015883a 	mov	r10,zero
 104bbcc:	3812d53a 	srli	r9,r7,20
 104bbd0:	3806d7fa 	srli	r3,r7,31
 104bbd4:	02000434 	movhi	r8,16
 104bbd8:	423fffc4 	addi	r8,r8,-1
 104bbdc:	4941ffcc 	andi	r5,r9,2047
 104bbe0:	302f883a 	mov	r23,r6
 104bbe4:	3a22703a 	and	r17,r7,r8
 104bbe8:	1ac03fcc 	andi	r11,r3,255
 104bbec:	28006226 	beq	r5,zero,104bd78 <__muldf3+0x22c>
 104bbf0:	0081ffc4 	movi	r2,2047
 104bbf4:	28805a26 	beq	r5,r2,104bd60 <__muldf3+0x214>
 104bbf8:	8a000434 	orhi	r8,r17,16
 104bbfc:	3004d77a 	srli	r2,r6,29
 104bc00:	401090fa 	slli	r8,r8,3
 104bc04:	302e90fa 	slli	r23,r6,3
 104bc08:	297f0044 	addi	r5,r5,-1023
 104bc0c:	40a2b03a 	or	r17,r8,r2
 104bc10:	0013883a 	mov	r9,zero
 104bc14:	4d4cb03a 	or	r6,r9,r21
 104bc18:	300c90ba 	slli	r6,r6,2
 104bc1c:	02004174 	movhi	r8,261
 104bc20:	422f0f04 	addi	r8,r8,-17348
 104bc24:	320d883a 	add	r6,r6,r8
 104bc28:	31800017 	ldw	r6,0(r6)
 104bc2c:	a14b883a 	add	r5,r20,r5
 104bc30:	1dacf03a 	xor	r22,r3,r22
 104bc34:	2b000044 	addi	r12,r5,1
 104bc38:	3000683a 	jmp	r6
 104bc3c:	0104be78 	rdprs	r4,zero,4857
 104bc40:	0104be64 	muli	r4,zero,4857
 104bc44:	0104be64 	muli	r4,zero,4857
 104bc48:	0104be50 	cmplti	r4,zero,4857
 104bc4c:	0104bc98 	cmpnei	r4,zero,4850
 104bc50:	0104bc98 	cmpnei	r4,zero,4850
 104bc54:	0104be38 	rdprs	r4,zero,4856
 104bc58:	0104be50 	cmplti	r4,zero,4857
 104bc5c:	0104bc98 	cmpnei	r4,zero,4850
 104bc60:	0104be38 	rdprs	r4,zero,4856
 104bc64:	0104bc98 	cmpnei	r4,zero,4850
 104bc68:	0104be50 	cmplti	r4,zero,4857
 104bc6c:	0104bc9c 	xori	r4,zero,4850
 104bc70:	0104bc9c 	xori	r4,zero,4850
 104bc74:	0104bc9c 	xori	r4,zero,4850
 104bc78:	0104c074 	movhi	r4,4865
 104bc7c:	8104b03a 	or	r2,r16,r4
 104bc80:	10006a1e 	bne	r2,zero,104be2c <__muldf3+0x2e0>
 104bc84:	05400204 	movi	r21,8
 104bc88:	0021883a 	mov	r16,zero
 104bc8c:	0025883a 	mov	r18,zero
 104bc90:	02800084 	movi	r10,2
 104bc94:	003fcd06 	br	104bbcc <__alt_data_end+0xfffebbcc>
 104bc98:	b039883a 	mov	fp,r22
 104bc9c:	00800084 	movi	r2,2
 104bca0:	50804e1e 	bne	r10,r2,104bddc <__muldf3+0x290>
 104bca4:	e4c0004c 	andi	r19,fp,1
 104bca8:	0101ffc4 	movi	r4,2047
 104bcac:	0021883a 	mov	r16,zero
 104bcb0:	0025883a 	mov	r18,zero
 104bcb4:	2008953a 	slli	r4,r4,20
 104bcb8:	98c03fcc 	andi	r3,r19,255
 104bcbc:	01400434 	movhi	r5,16
 104bcc0:	297fffc4 	addi	r5,r5,-1
 104bcc4:	180697fa 	slli	r3,r3,31
 104bcc8:	8160703a 	and	r16,r16,r5
 104bccc:	8120b03a 	or	r16,r16,r4
 104bcd0:	80c6b03a 	or	r3,r16,r3
 104bcd4:	9005883a 	mov	r2,r18
 104bcd8:	dfc00d17 	ldw	ra,52(sp)
 104bcdc:	df000c17 	ldw	fp,48(sp)
 104bce0:	ddc00b17 	ldw	r23,44(sp)
 104bce4:	dd800a17 	ldw	r22,40(sp)
 104bce8:	dd400917 	ldw	r21,36(sp)
 104bcec:	dd000817 	ldw	r20,32(sp)
 104bcf0:	dcc00717 	ldw	r19,28(sp)
 104bcf4:	dc800617 	ldw	r18,24(sp)
 104bcf8:	dc400517 	ldw	r17,20(sp)
 104bcfc:	dc000417 	ldw	r16,16(sp)
 104bd00:	dec00e04 	addi	sp,sp,56
 104bd04:	f800283a 	ret
 104bd08:	8104b03a 	or	r2,r16,r4
 104bd0c:	10004226 	beq	r2,zero,104be18 <__muldf3+0x2cc>
 104bd10:	8000f926 	beq	r16,zero,104c0f8 <__muldf3+0x5ac>
 104bd14:	8009883a 	mov	r4,r16
 104bd18:	d9800315 	stw	r6,12(sp)
 104bd1c:	d9c00015 	stw	r7,0(sp)
 104bd20:	10409dc0 	call	10409dc <__clzsi2>
 104bd24:	d9800317 	ldw	r6,12(sp)
 104bd28:	d9c00017 	ldw	r7,0(sp)
 104bd2c:	1007883a 	mov	r3,r2
 104bd30:	01000a04 	movi	r4,40
 104bd34:	18bffe04 	addi	r2,r3,-8
 104bd38:	20c9c83a 	sub	r4,r4,r3
 104bd3c:	80a0983a 	sll	r16,r16,r2
 104bd40:	8908d83a 	srl	r4,r17,r4
 104bd44:	88a4983a 	sll	r18,r17,r2
 104bd48:	2420b03a 	or	r16,r4,r16
 104bd4c:	017f0344 	movi	r5,-1011
 104bd50:	28e9c83a 	sub	r20,r5,r3
 104bd54:	002b883a 	mov	r21,zero
 104bd58:	0015883a 	mov	r10,zero
 104bd5c:	003f9b06 	br	104bbcc <__alt_data_end+0xfffebbcc>
 104bd60:	8984b03a 	or	r2,r17,r6
 104bd64:	10002a1e 	bne	r2,zero,104be10 <__muldf3+0x2c4>
 104bd68:	0023883a 	mov	r17,zero
 104bd6c:	002f883a 	mov	r23,zero
 104bd70:	02400084 	movi	r9,2
 104bd74:	003fa706 	br	104bc14 <__alt_data_end+0xfffebc14>
 104bd78:	8984b03a 	or	r2,r17,r6
 104bd7c:	10002026 	beq	r2,zero,104be00 <__muldf3+0x2b4>
 104bd80:	8800cc26 	beq	r17,zero,104c0b4 <__muldf3+0x568>
 104bd84:	8809883a 	mov	r4,r17
 104bd88:	d8c00215 	stw	r3,8(sp)
 104bd8c:	d9800315 	stw	r6,12(sp)
 104bd90:	da800015 	stw	r10,0(sp)
 104bd94:	dac00115 	stw	r11,4(sp)
 104bd98:	10409dc0 	call	10409dc <__clzsi2>
 104bd9c:	d8c00217 	ldw	r3,8(sp)
 104bda0:	d9800317 	ldw	r6,12(sp)
 104bda4:	da800017 	ldw	r10,0(sp)
 104bda8:	dac00117 	ldw	r11,4(sp)
 104bdac:	1009883a 	mov	r4,r2
 104bdb0:	01400a04 	movi	r5,40
 104bdb4:	25fffe04 	addi	r23,r4,-8
 104bdb8:	290bc83a 	sub	r5,r5,r4
 104bdbc:	8dd0983a 	sll	r8,r17,r23
 104bdc0:	314ad83a 	srl	r5,r6,r5
 104bdc4:	35ee983a 	sll	r23,r6,r23
 104bdc8:	2a22b03a 	or	r17,r5,r8
 104bdcc:	017f0344 	movi	r5,-1011
 104bdd0:	290bc83a 	sub	r5,r5,r4
 104bdd4:	0013883a 	mov	r9,zero
 104bdd8:	003f8e06 	br	104bc14 <__alt_data_end+0xfffebc14>
 104bddc:	008000c4 	movi	r2,3
 104bde0:	50811d26 	beq	r10,r2,104c258 <__muldf3+0x70c>
 104bde4:	00800044 	movi	r2,1
 104bde8:	5080e01e 	bne	r10,r2,104c16c <__muldf3+0x620>
 104bdec:	e0a6703a 	and	r19,fp,r2
 104bdf0:	0009883a 	mov	r4,zero
 104bdf4:	0021883a 	mov	r16,zero
 104bdf8:	0025883a 	mov	r18,zero
 104bdfc:	003fad06 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104be00:	0023883a 	mov	r17,zero
 104be04:	002f883a 	mov	r23,zero
 104be08:	02400044 	movi	r9,1
 104be0c:	003f8106 	br	104bc14 <__alt_data_end+0xfffebc14>
 104be10:	024000c4 	movi	r9,3
 104be14:	003f7f06 	br	104bc14 <__alt_data_end+0xfffebc14>
 104be18:	05400104 	movi	r21,4
 104be1c:	0021883a 	mov	r16,zero
 104be20:	0025883a 	mov	r18,zero
 104be24:	02800044 	movi	r10,1
 104be28:	003f6806 	br	104bbcc <__alt_data_end+0xfffebbcc>
 104be2c:	05400304 	movi	r21,12
 104be30:	028000c4 	movi	r10,3
 104be34:	003f6506 	br	104bbcc <__alt_data_end+0xfffebbcc>
 104be38:	04000434 	movhi	r16,16
 104be3c:	0027883a 	mov	r19,zero
 104be40:	843fffc4 	addi	r16,r16,-1
 104be44:	04bfffc4 	movi	r18,-1
 104be48:	0101ffc4 	movi	r4,2047
 104be4c:	003f9906 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104be50:	8821883a 	mov	r16,r17
 104be54:	b825883a 	mov	r18,r23
 104be58:	5839883a 	mov	fp,r11
 104be5c:	4815883a 	mov	r10,r9
 104be60:	003f8e06 	br	104bc9c <__alt_data_end+0xfffebc9c>
 104be64:	8821883a 	mov	r16,r17
 104be68:	b825883a 	mov	r18,r23
 104be6c:	b039883a 	mov	fp,r22
 104be70:	4815883a 	mov	r10,r9
 104be74:	003f8906 	br	104bc9c <__alt_data_end+0xfffebc9c>
 104be78:	b80cd43a 	srli	r6,r23,16
 104be7c:	9006d43a 	srli	r3,r18,16
 104be80:	90bfffcc 	andi	r2,r18,65535
 104be84:	bdffffcc 	andi	r23,r23,65535
 104be88:	b891383a 	mul	r8,r23,r2
 104be8c:	b8c9383a 	mul	r4,r23,r3
 104be90:	309b383a 	mul	r13,r6,r2
 104be94:	400ed43a 	srli	r7,r8,16
 104be98:	30df383a 	mul	r15,r6,r3
 104be9c:	235b883a 	add	r13,r4,r13
 104bea0:	69db883a 	add	r13,r13,r7
 104bea4:	6900022e 	bgeu	r13,r4,104beb0 <__muldf3+0x364>
 104bea8:	01000074 	movhi	r4,1
 104beac:	791f883a 	add	r15,r15,r4
 104beb0:	8828d43a 	srli	r20,r17,16
 104beb4:	8c7fffcc 	andi	r17,r17,65535
 104beb8:	888f383a 	mul	r7,r17,r2
 104bebc:	88d3383a 	mul	r9,r17,r3
 104bec0:	a0a5383a 	mul	r18,r20,r2
 104bec4:	3816d43a 	srli	r11,r7,16
 104bec8:	6814943a 	slli	r10,r13,16
 104becc:	4ca5883a 	add	r18,r9,r18
 104bed0:	423fffcc 	andi	r8,r8,65535
 104bed4:	92e5883a 	add	r18,r18,r11
 104bed8:	6808d43a 	srli	r4,r13,16
 104bedc:	5215883a 	add	r10,r10,r8
 104bee0:	a0c7383a 	mul	r3,r20,r3
 104bee4:	9240022e 	bgeu	r18,r9,104bef0 <__muldf3+0x3a4>
 104bee8:	00800074 	movhi	r2,1
 104beec:	1887883a 	add	r3,r3,r2
 104bef0:	802ad43a 	srli	r21,r16,16
 104bef4:	80bfffcc 	andi	r2,r16,65535
 104bef8:	b893383a 	mul	r9,r23,r2
 104befc:	3091383a 	mul	r8,r6,r2
 104bf00:	bd6f383a 	mul	r23,r23,r21
 104bf04:	9026943a 	slli	r19,r18,16
 104bf08:	481ad43a 	srli	r13,r9,16
 104bf0c:	9024d43a 	srli	r18,r18,16
 104bf10:	39ffffcc 	andi	r7,r7,65535
 104bf14:	ba11883a 	add	r8,r23,r8
 104bf18:	99e7883a 	add	r19,r19,r7
 104bf1c:	4351883a 	add	r8,r8,r13
 104bf20:	1c97883a 	add	r11,r3,r18
 104bf24:	354d383a 	mul	r6,r6,r21
 104bf28:	9925883a 	add	r18,r19,r4
 104bf2c:	45c0022e 	bgeu	r8,r23,104bf38 <__muldf3+0x3ec>
 104bf30:	00c00074 	movhi	r3,1
 104bf34:	30cd883a 	add	r6,r6,r3
 104bf38:	8889383a 	mul	r4,r17,r2
 104bf3c:	8d63383a 	mul	r17,r17,r21
 104bf40:	a085383a 	mul	r2,r20,r2
 104bf44:	200ed43a 	srli	r7,r4,16
 104bf48:	401cd43a 	srli	r14,r8,16
 104bf4c:	401a943a 	slli	r13,r8,16
 104bf50:	8885883a 	add	r2,r17,r2
 104bf54:	4a3fffcc 	andi	r8,r9,65535
 104bf58:	11c5883a 	add	r2,r2,r7
 104bf5c:	339d883a 	add	r14,r6,r14
 104bf60:	6a11883a 	add	r8,r13,r8
 104bf64:	a561383a 	mul	r16,r20,r21
 104bf68:	1440022e 	bgeu	r2,r17,104bf74 <__muldf3+0x428>
 104bf6c:	00c00074 	movhi	r3,1
 104bf70:	80e1883a 	add	r16,r16,r3
 104bf74:	1006943a 	slli	r3,r2,16
 104bf78:	213fffcc 	andi	r4,r4,65535
 104bf7c:	93db883a 	add	r13,r18,r15
 104bf80:	1909883a 	add	r4,r3,r4
 104bf84:	22c7883a 	add	r3,r4,r11
 104bf88:	6cd3803a 	cmpltu	r9,r13,r19
 104bf8c:	6a09883a 	add	r4,r13,r8
 104bf90:	1a5b883a 	add	r13,r3,r9
 104bf94:	2211803a 	cmpltu	r8,r4,r8
 104bf98:	734d883a 	add	r6,r14,r13
 104bf9c:	100ed43a 	srli	r7,r2,16
 104bfa0:	6a53803a 	cmpltu	r9,r13,r9
 104bfa4:	3205883a 	add	r2,r6,r8
 104bfa8:	1ac7803a 	cmpltu	r3,r3,r11
 104bfac:	1211803a 	cmpltu	r8,r2,r8
 104bfb0:	48c6b03a 	or	r3,r9,r3
 104bfb4:	338d803a 	cmpltu	r6,r6,r14
 104bfb8:	19c7883a 	add	r3,r3,r7
 104bfbc:	418cb03a 	or	r6,r8,r6
 104bfc0:	1987883a 	add	r3,r3,r6
 104bfc4:	2024927a 	slli	r18,r4,9
 104bfc8:	1c07883a 	add	r3,r3,r16
 104bfcc:	1806927a 	slli	r3,r3,9
 104bfd0:	1020d5fa 	srli	r16,r2,23
 104bfd4:	2008d5fa 	srli	r4,r4,23
 104bfd8:	9294b03a 	or	r10,r18,r10
 104bfdc:	1004927a 	slli	r2,r2,9
 104bfe0:	5024c03a 	cmpne	r18,r10,zero
 104bfe4:	1c20b03a 	or	r16,r3,r16
 104bfe8:	9108b03a 	or	r4,r18,r4
 104bfec:	80c0402c 	andhi	r3,r16,256
 104bff0:	20a4b03a 	or	r18,r4,r2
 104bff4:	18000726 	beq	r3,zero,104c014 <__muldf3+0x4c8>
 104bff8:	9006d07a 	srli	r3,r18,1
 104bffc:	800897fa 	slli	r4,r16,31
 104c000:	9080004c 	andi	r2,r18,1
 104c004:	8020d07a 	srli	r16,r16,1
 104c008:	10c4b03a 	or	r2,r2,r3
 104c00c:	1124b03a 	or	r18,r2,r4
 104c010:	600b883a 	mov	r5,r12
 104c014:	2900ffc4 	addi	r4,r5,1023
 104c018:	01004b0e 	bge	zero,r4,104c148 <__muldf3+0x5fc>
 104c01c:	908001cc 	andi	r2,r18,7
 104c020:	10000726 	beq	r2,zero,104c040 <__muldf3+0x4f4>
 104c024:	90c003cc 	andi	r3,r18,15
 104c028:	00800104 	movi	r2,4
 104c02c:	18800426 	beq	r3,r2,104c040 <__muldf3+0x4f4>
 104c030:	9087883a 	add	r3,r18,r2
 104c034:	1c85803a 	cmpltu	r2,r3,r18
 104c038:	80a1883a 	add	r16,r16,r2
 104c03c:	1825883a 	mov	r18,r3
 104c040:	8080402c 	andhi	r2,r16,256
 104c044:	10000426 	beq	r2,zero,104c058 <__muldf3+0x50c>
 104c048:	00bfc034 	movhi	r2,65280
 104c04c:	10bfffc4 	addi	r2,r2,-1
 104c050:	29010004 	addi	r4,r5,1024
 104c054:	80a0703a 	and	r16,r16,r2
 104c058:	0081ff84 	movi	r2,2046
 104c05c:	1100320e 	bge	r2,r4,104c128 <__muldf3+0x5dc>
 104c060:	b4c0004c 	andi	r19,r22,1
 104c064:	0101ffc4 	movi	r4,2047
 104c068:	0021883a 	mov	r16,zero
 104c06c:	0025883a 	mov	r18,zero
 104c070:	003f1006 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104c074:	8080022c 	andhi	r2,r16,8
 104c078:	10000926 	beq	r2,zero,104c0a0 <__muldf3+0x554>
 104c07c:	8880022c 	andhi	r2,r17,8
 104c080:	1000071e 	bne	r2,zero,104c0a0 <__muldf3+0x554>
 104c084:	00800434 	movhi	r2,16
 104c088:	8c000234 	orhi	r16,r17,8
 104c08c:	10bfffc4 	addi	r2,r2,-1
 104c090:	1827883a 	mov	r19,r3
 104c094:	80a0703a 	and	r16,r16,r2
 104c098:	b825883a 	mov	r18,r23
 104c09c:	003f6a06 	br	104be48 <__alt_data_end+0xfffebe48>
 104c0a0:	00800434 	movhi	r2,16
 104c0a4:	84000234 	orhi	r16,r16,8
 104c0a8:	10bfffc4 	addi	r2,r2,-1
 104c0ac:	80a0703a 	and	r16,r16,r2
 104c0b0:	003f6506 	br	104be48 <__alt_data_end+0xfffebe48>
 104c0b4:	3009883a 	mov	r4,r6
 104c0b8:	d8c00215 	stw	r3,8(sp)
 104c0bc:	d9800315 	stw	r6,12(sp)
 104c0c0:	da800015 	stw	r10,0(sp)
 104c0c4:	dac00115 	stw	r11,4(sp)
 104c0c8:	10409dc0 	call	10409dc <__clzsi2>
 104c0cc:	11000804 	addi	r4,r2,32
 104c0d0:	014009c4 	movi	r5,39
 104c0d4:	d8c00217 	ldw	r3,8(sp)
 104c0d8:	d9800317 	ldw	r6,12(sp)
 104c0dc:	da800017 	ldw	r10,0(sp)
 104c0e0:	dac00117 	ldw	r11,4(sp)
 104c0e4:	293f320e 	bge	r5,r4,104bdb0 <__alt_data_end+0xfffebdb0>
 104c0e8:	10bffe04 	addi	r2,r2,-8
 104c0ec:	b8a2983a 	sll	r17,r23,r2
 104c0f0:	002f883a 	mov	r23,zero
 104c0f4:	003f3506 	br	104bdcc <__alt_data_end+0xfffebdcc>
 104c0f8:	d9800315 	stw	r6,12(sp)
 104c0fc:	d9c00015 	stw	r7,0(sp)
 104c100:	10409dc0 	call	10409dc <__clzsi2>
 104c104:	10c00804 	addi	r3,r2,32
 104c108:	010009c4 	movi	r4,39
 104c10c:	d9800317 	ldw	r6,12(sp)
 104c110:	d9c00017 	ldw	r7,0(sp)
 104c114:	20ff060e 	bge	r4,r3,104bd30 <__alt_data_end+0xfffebd30>
 104c118:	10bffe04 	addi	r2,r2,-8
 104c11c:	88a0983a 	sll	r16,r17,r2
 104c120:	0025883a 	mov	r18,zero
 104c124:	003f0906 	br	104bd4c <__alt_data_end+0xfffebd4c>
 104c128:	9004d0fa 	srli	r2,r18,3
 104c12c:	8024977a 	slli	r18,r16,29
 104c130:	8020927a 	slli	r16,r16,9
 104c134:	2101ffcc 	andi	r4,r4,2047
 104c138:	90a4b03a 	or	r18,r18,r2
 104c13c:	8020d33a 	srli	r16,r16,12
 104c140:	b4c0004c 	andi	r19,r22,1
 104c144:	003edb06 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104c148:	00ff0084 	movi	r3,-1022
 104c14c:	1947c83a 	sub	r3,r3,r5
 104c150:	00800e04 	movi	r2,56
 104c154:	10c0080e 	bge	r2,r3,104c178 <__muldf3+0x62c>
 104c158:	b4c0004c 	andi	r19,r22,1
 104c15c:	0009883a 	mov	r4,zero
 104c160:	0021883a 	mov	r16,zero
 104c164:	0025883a 	mov	r18,zero
 104c168:	003ed206 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104c16c:	600b883a 	mov	r5,r12
 104c170:	e02d883a 	mov	r22,fp
 104c174:	003fa706 	br	104c014 <__alt_data_end+0xfffec014>
 104c178:	008007c4 	movi	r2,31
 104c17c:	10c01816 	blt	r2,r3,104c1e0 <__muldf3+0x694>
 104c180:	29410784 	addi	r5,r5,1054
 104c184:	8144983a 	sll	r2,r16,r5
 104c188:	90c8d83a 	srl	r4,r18,r3
 104c18c:	914a983a 	sll	r5,r18,r5
 104c190:	80c6d83a 	srl	r3,r16,r3
 104c194:	2088b03a 	or	r4,r4,r2
 104c198:	2804c03a 	cmpne	r2,r5,zero
 104c19c:	2084b03a 	or	r2,r4,r2
 104c1a0:	110001cc 	andi	r4,r2,7
 104c1a4:	20000726 	beq	r4,zero,104c1c4 <__muldf3+0x678>
 104c1a8:	114003cc 	andi	r5,r2,15
 104c1ac:	01000104 	movi	r4,4
 104c1b0:	29000426 	beq	r5,r4,104c1c4 <__muldf3+0x678>
 104c1b4:	11000104 	addi	r4,r2,4
 104c1b8:	2085803a 	cmpltu	r2,r4,r2
 104c1bc:	1887883a 	add	r3,r3,r2
 104c1c0:	2005883a 	mov	r2,r4
 104c1c4:	1900202c 	andhi	r4,r3,128
 104c1c8:	20001826 	beq	r4,zero,104c22c <__muldf3+0x6e0>
 104c1cc:	b4c0004c 	andi	r19,r22,1
 104c1d0:	01000044 	movi	r4,1
 104c1d4:	0021883a 	mov	r16,zero
 104c1d8:	0025883a 	mov	r18,zero
 104c1dc:	003eb506 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104c1e0:	00bef884 	movi	r2,-1054
 104c1e4:	1145c83a 	sub	r2,r2,r5
 104c1e8:	8088d83a 	srl	r4,r16,r2
 104c1ec:	00800804 	movi	r2,32
 104c1f0:	18801726 	beq	r3,r2,104c250 <__muldf3+0x704>
 104c1f4:	28810f84 	addi	r2,r5,1086
 104c1f8:	8084983a 	sll	r2,r16,r2
 104c1fc:	1484b03a 	or	r2,r2,r18
 104c200:	1004c03a 	cmpne	r2,r2,zero
 104c204:	1104b03a 	or	r2,r2,r4
 104c208:	10c001cc 	andi	r3,r2,7
 104c20c:	18000b1e 	bne	r3,zero,104c23c <__muldf3+0x6f0>
 104c210:	0021883a 	mov	r16,zero
 104c214:	1004d0fa 	srli	r2,r2,3
 104c218:	b4c0004c 	andi	r19,r22,1
 104c21c:	0009883a 	mov	r4,zero
 104c220:	10e4b03a 	or	r18,r2,r3
 104c224:	003ea306 	br	104bcb4 <__alt_data_end+0xfffebcb4>
 104c228:	0007883a 	mov	r3,zero
 104c22c:	1820927a 	slli	r16,r3,9
 104c230:	1806977a 	slli	r3,r3,29
 104c234:	8020d33a 	srli	r16,r16,12
 104c238:	003ff606 	br	104c214 <__alt_data_end+0xfffec214>
 104c23c:	110003cc 	andi	r4,r2,15
 104c240:	00c00104 	movi	r3,4
 104c244:	20fff826 	beq	r4,r3,104c228 <__alt_data_end+0xfffec228>
 104c248:	0007883a 	mov	r3,zero
 104c24c:	003fd906 	br	104c1b4 <__alt_data_end+0xfffec1b4>
 104c250:	0005883a 	mov	r2,zero
 104c254:	003fe906 	br	104c1fc <__alt_data_end+0xfffec1fc>
 104c258:	00800434 	movhi	r2,16
 104c25c:	84000234 	orhi	r16,r16,8
 104c260:	10bfffc4 	addi	r2,r2,-1
 104c264:	e4c0004c 	andi	r19,fp,1
 104c268:	80a0703a 	and	r16,r16,r2
 104c26c:	003ef606 	br	104be48 <__alt_data_end+0xfffebe48>

0104c270 <__subdf3>:
 104c270:	00c00434 	movhi	r3,16
 104c274:	18ffffc4 	addi	r3,r3,-1
 104c278:	defffb04 	addi	sp,sp,-20
 104c27c:	28d2703a 	and	r9,r5,r3
 104c280:	3814d53a 	srli	r10,r7,20
 104c284:	38c6703a 	and	r3,r7,r3
 104c288:	3004d77a 	srli	r2,r6,29
 104c28c:	dc800215 	stw	r18,8(sp)
 104c290:	dc000015 	stw	r16,0(sp)
 104c294:	2824d7fa 	srli	r18,r5,31
 104c298:	2820d53a 	srli	r16,r5,20
 104c29c:	481290fa 	slli	r9,r9,3
 104c2a0:	200ad77a 	srli	r5,r4,29
 104c2a4:	180690fa 	slli	r3,r3,3
 104c2a8:	dc400115 	stw	r17,4(sp)
 104c2ac:	dfc00415 	stw	ra,16(sp)
 104c2b0:	202290fa 	slli	r17,r4,3
 104c2b4:	dcc00315 	stw	r19,12(sp)
 104c2b8:	5281ffcc 	andi	r10,r10,2047
 104c2bc:	0101ffc4 	movi	r4,2047
 104c2c0:	9011883a 	mov	r8,r18
 104c2c4:	8401ffcc 	andi	r16,r16,2047
 104c2c8:	94803fcc 	andi	r18,r18,255
 104c2cc:	494ab03a 	or	r5,r9,r5
 104c2d0:	380ed7fa 	srli	r7,r7,31
 104c2d4:	1886b03a 	or	r3,r3,r2
 104c2d8:	300c90fa 	slli	r6,r6,3
 104c2dc:	51009026 	beq	r10,r4,104c520 <__subdf3+0x2b0>
 104c2e0:	39c0005c 	xori	r7,r7,1
 104c2e4:	8285c83a 	sub	r2,r16,r10
 104c2e8:	91c06f26 	beq	r18,r7,104c4a8 <__subdf3+0x238>
 104c2ec:	0080b10e 	bge	zero,r2,104c5b4 <__subdf3+0x344>
 104c2f0:	50002a1e 	bne	r10,zero,104c39c <__subdf3+0x12c>
 104c2f4:	1988b03a 	or	r4,r3,r6
 104c2f8:	2000941e 	bne	r4,zero,104c54c <__subdf3+0x2dc>
 104c2fc:	888001cc 	andi	r2,r17,7
 104c300:	10005b26 	beq	r2,zero,104c470 <__subdf3+0x200>
 104c304:	88c003cc 	andi	r3,r17,15
 104c308:	00800104 	movi	r2,4
 104c30c:	18805826 	beq	r3,r2,104c470 <__subdf3+0x200>
 104c310:	88c00104 	addi	r3,r17,4
 104c314:	1c63803a 	cmpltu	r17,r3,r17
 104c318:	2c4b883a 	add	r5,r5,r17
 104c31c:	2880202c 	andhi	r2,r5,128
 104c320:	9200004c 	andi	r8,r18,1
 104c324:	1823883a 	mov	r17,r3
 104c328:	10005426 	beq	r2,zero,104c47c <__subdf3+0x20c>
 104c32c:	84000044 	addi	r16,r16,1
 104c330:	0081ffc4 	movi	r2,2047
 104c334:	8080bf26 	beq	r16,r2,104c634 <__subdf3+0x3c4>
 104c338:	013fe034 	movhi	r4,65408
 104c33c:	213fffc4 	addi	r4,r4,-1
 104c340:	290a703a 	and	r5,r5,r4
 104c344:	2804977a 	slli	r2,r5,29
 104c348:	280a927a 	slli	r5,r5,9
 104c34c:	8822d0fa 	srli	r17,r17,3
 104c350:	8401ffcc 	andi	r16,r16,2047
 104c354:	2808d33a 	srli	r4,r5,12
 104c358:	1444b03a 	or	r2,r2,r17
 104c35c:	8401ffcc 	andi	r16,r16,2047
 104c360:	800a953a 	slli	r5,r16,20
 104c364:	40c03fcc 	andi	r3,r8,255
 104c368:	04000434 	movhi	r16,16
 104c36c:	180697fa 	slli	r3,r3,31
 104c370:	843fffc4 	addi	r16,r16,-1
 104c374:	2420703a 	and	r16,r4,r16
 104c378:	8160b03a 	or	r16,r16,r5
 104c37c:	80c6b03a 	or	r3,r16,r3
 104c380:	dfc00417 	ldw	ra,16(sp)
 104c384:	dcc00317 	ldw	r19,12(sp)
 104c388:	dc800217 	ldw	r18,8(sp)
 104c38c:	dc400117 	ldw	r17,4(sp)
 104c390:	dc000017 	ldw	r16,0(sp)
 104c394:	dec00504 	addi	sp,sp,20
 104c398:	f800283a 	ret
 104c39c:	0101ffc4 	movi	r4,2047
 104c3a0:	813fd626 	beq	r16,r4,104c2fc <__alt_data_end+0xfffec2fc>
 104c3a4:	18c02034 	orhi	r3,r3,128
 104c3a8:	01000e04 	movi	r4,56
 104c3ac:	2080a416 	blt	r4,r2,104c640 <__subdf3+0x3d0>
 104c3b0:	010007c4 	movi	r4,31
 104c3b4:	2080c716 	blt	r4,r2,104c6d4 <__subdf3+0x464>
 104c3b8:	01000804 	movi	r4,32
 104c3bc:	2089c83a 	sub	r4,r4,r2
 104c3c0:	1910983a 	sll	r8,r3,r4
 104c3c4:	308ed83a 	srl	r7,r6,r2
 104c3c8:	3108983a 	sll	r4,r6,r4
 104c3cc:	1884d83a 	srl	r2,r3,r2
 104c3d0:	41ccb03a 	or	r6,r8,r7
 104c3d4:	2008c03a 	cmpne	r4,r4,zero
 104c3d8:	310cb03a 	or	r6,r6,r4
 104c3dc:	898dc83a 	sub	r6,r17,r6
 104c3e0:	89a3803a 	cmpltu	r17,r17,r6
 104c3e4:	288bc83a 	sub	r5,r5,r2
 104c3e8:	2c4bc83a 	sub	r5,r5,r17
 104c3ec:	3023883a 	mov	r17,r6
 104c3f0:	2880202c 	andhi	r2,r5,128
 104c3f4:	10006b26 	beq	r2,zero,104c5a4 <__subdf3+0x334>
 104c3f8:	04c02034 	movhi	r19,128
 104c3fc:	9cffffc4 	addi	r19,r19,-1
 104c400:	2ce6703a 	and	r19,r5,r19
 104c404:	98007c26 	beq	r19,zero,104c5f8 <__subdf3+0x388>
 104c408:	9809883a 	mov	r4,r19
 104c40c:	10409dc0 	call	10409dc <__clzsi2>
 104c410:	10fffe04 	addi	r3,r2,-8
 104c414:	010007c4 	movi	r4,31
 104c418:	20c07d16 	blt	r4,r3,104c610 <__subdf3+0x3a0>
 104c41c:	01400a04 	movi	r5,40
 104c420:	2885c83a 	sub	r2,r5,r2
 104c424:	888ad83a 	srl	r5,r17,r2
 104c428:	98e6983a 	sll	r19,r19,r3
 104c42c:	88e2983a 	sll	r17,r17,r3
 104c430:	2ce6b03a 	or	r19,r5,r19
 104c434:	1c007a16 	blt	r3,r16,104c620 <__subdf3+0x3b0>
 104c438:	1c21c83a 	sub	r16,r3,r16
 104c43c:	81400044 	addi	r5,r16,1
 104c440:	00c007c4 	movi	r3,31
 104c444:	19409616 	blt	r3,r5,104c6a0 <__subdf3+0x430>
 104c448:	1c21c83a 	sub	r16,r3,r16
 104c44c:	8c08983a 	sll	r4,r17,r16
 104c450:	8946d83a 	srl	r3,r17,r5
 104c454:	9c20983a 	sll	r16,r19,r16
 104c458:	2008c03a 	cmpne	r4,r4,zero
 104c45c:	994ad83a 	srl	r5,r19,r5
 104c460:	1c06b03a 	or	r3,r3,r16
 104c464:	1922b03a 	or	r17,r3,r4
 104c468:	0021883a 	mov	r16,zero
 104c46c:	003fa306 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c470:	2880202c 	andhi	r2,r5,128
 104c474:	9200004c 	andi	r8,r18,1
 104c478:	103fac1e 	bne	r2,zero,104c32c <__alt_data_end+0xfffec32c>
 104c47c:	2804977a 	slli	r2,r5,29
 104c480:	8822d0fa 	srli	r17,r17,3
 104c484:	00c1ffc4 	movi	r3,2047
 104c488:	280ad0fa 	srli	r5,r5,3
 104c48c:	1444b03a 	or	r2,r2,r17
 104c490:	80c02726 	beq	r16,r3,104c530 <__subdf3+0x2c0>
 104c494:	01000434 	movhi	r4,16
 104c498:	213fffc4 	addi	r4,r4,-1
 104c49c:	80e0703a 	and	r16,r16,r3
 104c4a0:	2908703a 	and	r4,r5,r4
 104c4a4:	003fad06 	br	104c35c <__alt_data_end+0xfffec35c>
 104c4a8:	0080690e 	bge	zero,r2,104c650 <__subdf3+0x3e0>
 104c4ac:	50002f26 	beq	r10,zero,104c56c <__subdf3+0x2fc>
 104c4b0:	0101ffc4 	movi	r4,2047
 104c4b4:	813f9126 	beq	r16,r4,104c2fc <__alt_data_end+0xfffec2fc>
 104c4b8:	18c02034 	orhi	r3,r3,128
 104c4bc:	01000e04 	movi	r4,56
 104c4c0:	2080b00e 	bge	r4,r2,104c784 <__subdf3+0x514>
 104c4c4:	198cb03a 	or	r6,r3,r6
 104c4c8:	300ec03a 	cmpne	r7,r6,zero
 104c4cc:	0005883a 	mov	r2,zero
 104c4d0:	3c4f883a 	add	r7,r7,r17
 104c4d4:	3c63803a 	cmpltu	r17,r7,r17
 104c4d8:	114b883a 	add	r5,r2,r5
 104c4dc:	2c4b883a 	add	r5,r5,r17
 104c4e0:	3823883a 	mov	r17,r7
 104c4e4:	2880202c 	andhi	r2,r5,128
 104c4e8:	10002e26 	beq	r2,zero,104c5a4 <__subdf3+0x334>
 104c4ec:	84000044 	addi	r16,r16,1
 104c4f0:	0081ffc4 	movi	r2,2047
 104c4f4:	8080de26 	beq	r16,r2,104c870 <__subdf3+0x600>
 104c4f8:	00bfe034 	movhi	r2,65408
 104c4fc:	10bfffc4 	addi	r2,r2,-1
 104c500:	288a703a 	and	r5,r5,r2
 104c504:	880cd07a 	srli	r6,r17,1
 104c508:	280897fa 	slli	r4,r5,31
 104c50c:	88c0004c 	andi	r3,r17,1
 104c510:	30e2b03a 	or	r17,r6,r3
 104c514:	280ad07a 	srli	r5,r5,1
 104c518:	8922b03a 	or	r17,r17,r4
 104c51c:	003f7706 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c520:	1984b03a 	or	r2,r3,r6
 104c524:	103f6e26 	beq	r2,zero,104c2e0 <__alt_data_end+0xfffec2e0>
 104c528:	39c03fcc 	andi	r7,r7,255
 104c52c:	003f6d06 	br	104c2e4 <__alt_data_end+0xfffec2e4>
 104c530:	1146b03a 	or	r3,r2,r5
 104c534:	18003f26 	beq	r3,zero,104c634 <__subdf3+0x3c4>
 104c538:	00c00434 	movhi	r3,16
 104c53c:	29000234 	orhi	r4,r5,8
 104c540:	18ffffc4 	addi	r3,r3,-1
 104c544:	20c8703a 	and	r4,r4,r3
 104c548:	003f8406 	br	104c35c <__alt_data_end+0xfffec35c>
 104c54c:	10bfffc4 	addi	r2,r2,-1
 104c550:	1000501e 	bne	r2,zero,104c694 <__subdf3+0x424>
 104c554:	898fc83a 	sub	r7,r17,r6
 104c558:	89e3803a 	cmpltu	r17,r17,r7
 104c55c:	28cbc83a 	sub	r5,r5,r3
 104c560:	2c4bc83a 	sub	r5,r5,r17
 104c564:	3823883a 	mov	r17,r7
 104c568:	003fa106 	br	104c3f0 <__alt_data_end+0xfffec3f0>
 104c56c:	1988b03a 	or	r4,r3,r6
 104c570:	203f6226 	beq	r4,zero,104c2fc <__alt_data_end+0xfffec2fc>
 104c574:	10bfffc4 	addi	r2,r2,-1
 104c578:	10009b1e 	bne	r2,zero,104c7e8 <__subdf3+0x578>
 104c57c:	344d883a 	add	r6,r6,r17
 104c580:	3463803a 	cmpltu	r17,r6,r17
 104c584:	194b883a 	add	r5,r3,r5
 104c588:	2c4b883a 	add	r5,r5,r17
 104c58c:	3023883a 	mov	r17,r6
 104c590:	003fd406 	br	104c4e4 <__alt_data_end+0xfffec4e4>
 104c594:	1106b03a 	or	r3,r2,r4
 104c598:	1800b426 	beq	r3,zero,104c86c <__subdf3+0x5fc>
 104c59c:	100b883a 	mov	r5,r2
 104c5a0:	2023883a 	mov	r17,r4
 104c5a4:	888001cc 	andi	r2,r17,7
 104c5a8:	103f561e 	bne	r2,zero,104c304 <__alt_data_end+0xfffec304>
 104c5ac:	9200004c 	andi	r8,r18,1
 104c5b0:	003fb206 	br	104c47c <__alt_data_end+0xfffec47c>
 104c5b4:	1000531e 	bne	r2,zero,104c704 <__subdf3+0x494>
 104c5b8:	80800044 	addi	r2,r16,1
 104c5bc:	1081ffcc 	andi	r2,r2,2047
 104c5c0:	01000044 	movi	r4,1
 104c5c4:	2080a00e 	bge	r4,r2,104c848 <__subdf3+0x5d8>
 104c5c8:	8985c83a 	sub	r2,r17,r6
 104c5cc:	8889803a 	cmpltu	r4,r17,r2
 104c5d0:	28e7c83a 	sub	r19,r5,r3
 104c5d4:	9927c83a 	sub	r19,r19,r4
 104c5d8:	9900202c 	andhi	r4,r19,128
 104c5dc:	20006226 	beq	r4,zero,104c768 <__subdf3+0x4f8>
 104c5e0:	3463c83a 	sub	r17,r6,r17
 104c5e4:	194bc83a 	sub	r5,r3,r5
 104c5e8:	344d803a 	cmpltu	r6,r6,r17
 104c5ec:	29a7c83a 	sub	r19,r5,r6
 104c5f0:	3825883a 	mov	r18,r7
 104c5f4:	983f841e 	bne	r19,zero,104c408 <__alt_data_end+0xfffec408>
 104c5f8:	8809883a 	mov	r4,r17
 104c5fc:	10409dc0 	call	10409dc <__clzsi2>
 104c600:	10800804 	addi	r2,r2,32
 104c604:	10fffe04 	addi	r3,r2,-8
 104c608:	010007c4 	movi	r4,31
 104c60c:	20ff830e 	bge	r4,r3,104c41c <__alt_data_end+0xfffec41c>
 104c610:	14fff604 	addi	r19,r2,-40
 104c614:	8ce6983a 	sll	r19,r17,r19
 104c618:	0023883a 	mov	r17,zero
 104c61c:	1c3f860e 	bge	r3,r16,104c438 <__alt_data_end+0xfffec438>
 104c620:	017fe034 	movhi	r5,65408
 104c624:	297fffc4 	addi	r5,r5,-1
 104c628:	80e1c83a 	sub	r16,r16,r3
 104c62c:	994a703a 	and	r5,r19,r5
 104c630:	003f3206 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c634:	0009883a 	mov	r4,zero
 104c638:	0005883a 	mov	r2,zero
 104c63c:	003f4706 	br	104c35c <__alt_data_end+0xfffec35c>
 104c640:	198cb03a 	or	r6,r3,r6
 104c644:	300cc03a 	cmpne	r6,r6,zero
 104c648:	0005883a 	mov	r2,zero
 104c64c:	003f6306 	br	104c3dc <__alt_data_end+0xfffec3dc>
 104c650:	10009d1e 	bne	r2,zero,104c8c8 <__subdf3+0x658>
 104c654:	81c00044 	addi	r7,r16,1
 104c658:	3881ffcc 	andi	r2,r7,2047
 104c65c:	02400044 	movi	r9,1
 104c660:	4880680e 	bge	r9,r2,104c804 <__subdf3+0x594>
 104c664:	0081ffc4 	movi	r2,2047
 104c668:	3880ae26 	beq	r7,r2,104c924 <__subdf3+0x6b4>
 104c66c:	344d883a 	add	r6,r6,r17
 104c670:	3463803a 	cmpltu	r17,r6,r17
 104c674:	194b883a 	add	r5,r3,r5
 104c678:	2c4b883a 	add	r5,r5,r17
 104c67c:	282297fa 	slli	r17,r5,31
 104c680:	300cd07a 	srli	r6,r6,1
 104c684:	280ad07a 	srli	r5,r5,1
 104c688:	3821883a 	mov	r16,r7
 104c68c:	89a2b03a 	or	r17,r17,r6
 104c690:	003f1a06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c694:	0101ffc4 	movi	r4,2047
 104c698:	813f431e 	bne	r16,r4,104c3a8 <__alt_data_end+0xfffec3a8>
 104c69c:	003f1706 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c6a0:	80bff844 	addi	r2,r16,-31
 104c6a4:	00c00804 	movi	r3,32
 104c6a8:	9884d83a 	srl	r2,r19,r2
 104c6ac:	28c05126 	beq	r5,r3,104c7f4 <__subdf3+0x584>
 104c6b0:	00c00fc4 	movi	r3,63
 104c6b4:	1c21c83a 	sub	r16,r3,r16
 104c6b8:	9c26983a 	sll	r19,r19,r16
 104c6bc:	9c62b03a 	or	r17,r19,r17
 104c6c0:	8822c03a 	cmpne	r17,r17,zero
 104c6c4:	88a2b03a 	or	r17,r17,r2
 104c6c8:	000b883a 	mov	r5,zero
 104c6cc:	0021883a 	mov	r16,zero
 104c6d0:	003fb406 	br	104c5a4 <__alt_data_end+0xfffec5a4>
 104c6d4:	113ff804 	addi	r4,r2,-32
 104c6d8:	01c00804 	movi	r7,32
 104c6dc:	1908d83a 	srl	r4,r3,r4
 104c6e0:	11c04626 	beq	r2,r7,104c7fc <__subdf3+0x58c>
 104c6e4:	01c01004 	movi	r7,64
 104c6e8:	3885c83a 	sub	r2,r7,r2
 104c6ec:	1884983a 	sll	r2,r3,r2
 104c6f0:	118cb03a 	or	r6,r2,r6
 104c6f4:	300cc03a 	cmpne	r6,r6,zero
 104c6f8:	310cb03a 	or	r6,r6,r4
 104c6fc:	0005883a 	mov	r2,zero
 104c700:	003f3606 	br	104c3dc <__alt_data_end+0xfffec3dc>
 104c704:	80002b26 	beq	r16,zero,104c7b4 <__subdf3+0x544>
 104c708:	0101ffc4 	movi	r4,2047
 104c70c:	51006926 	beq	r10,r4,104c8b4 <__subdf3+0x644>
 104c710:	0085c83a 	sub	r2,zero,r2
 104c714:	29402034 	orhi	r5,r5,128
 104c718:	01000e04 	movi	r4,56
 104c71c:	20807d16 	blt	r4,r2,104c914 <__subdf3+0x6a4>
 104c720:	010007c4 	movi	r4,31
 104c724:	2080d916 	blt	r4,r2,104ca8c <__subdf3+0x81c>
 104c728:	01000804 	movi	r4,32
 104c72c:	2089c83a 	sub	r4,r4,r2
 104c730:	2912983a 	sll	r9,r5,r4
 104c734:	8890d83a 	srl	r8,r17,r2
 104c738:	8908983a 	sll	r4,r17,r4
 104c73c:	2884d83a 	srl	r2,r5,r2
 104c740:	4a22b03a 	or	r17,r9,r8
 104c744:	2008c03a 	cmpne	r4,r4,zero
 104c748:	8922b03a 	or	r17,r17,r4
 104c74c:	3463c83a 	sub	r17,r6,r17
 104c750:	1885c83a 	sub	r2,r3,r2
 104c754:	344d803a 	cmpltu	r6,r6,r17
 104c758:	118bc83a 	sub	r5,r2,r6
 104c75c:	5021883a 	mov	r16,r10
 104c760:	3825883a 	mov	r18,r7
 104c764:	003f2206 	br	104c3f0 <__alt_data_end+0xfffec3f0>
 104c768:	9886b03a 	or	r3,r19,r2
 104c76c:	18001c1e 	bne	r3,zero,104c7e0 <__subdf3+0x570>
 104c770:	0011883a 	mov	r8,zero
 104c774:	000b883a 	mov	r5,zero
 104c778:	0023883a 	mov	r17,zero
 104c77c:	0021883a 	mov	r16,zero
 104c780:	003f3e06 	br	104c47c <__alt_data_end+0xfffec47c>
 104c784:	010007c4 	movi	r4,31
 104c788:	20803c16 	blt	r4,r2,104c87c <__subdf3+0x60c>
 104c78c:	01000804 	movi	r4,32
 104c790:	2089c83a 	sub	r4,r4,r2
 104c794:	1912983a 	sll	r9,r3,r4
 104c798:	308ed83a 	srl	r7,r6,r2
 104c79c:	3108983a 	sll	r4,r6,r4
 104c7a0:	1884d83a 	srl	r2,r3,r2
 104c7a4:	49ceb03a 	or	r7,r9,r7
 104c7a8:	2008c03a 	cmpne	r4,r4,zero
 104c7ac:	390eb03a 	or	r7,r7,r4
 104c7b0:	003f4706 	br	104c4d0 <__alt_data_end+0xfffec4d0>
 104c7b4:	2c48b03a 	or	r4,r5,r17
 104c7b8:	20003e26 	beq	r4,zero,104c8b4 <__subdf3+0x644>
 104c7bc:	0084303a 	nor	r2,zero,r2
 104c7c0:	10003a1e 	bne	r2,zero,104c8ac <__subdf3+0x63c>
 104c7c4:	3463c83a 	sub	r17,r6,r17
 104c7c8:	194bc83a 	sub	r5,r3,r5
 104c7cc:	344d803a 	cmpltu	r6,r6,r17
 104c7d0:	298bc83a 	sub	r5,r5,r6
 104c7d4:	5021883a 	mov	r16,r10
 104c7d8:	3825883a 	mov	r18,r7
 104c7dc:	003f0406 	br	104c3f0 <__alt_data_end+0xfffec3f0>
 104c7e0:	1023883a 	mov	r17,r2
 104c7e4:	003f0706 	br	104c404 <__alt_data_end+0xfffec404>
 104c7e8:	0101ffc4 	movi	r4,2047
 104c7ec:	813f331e 	bne	r16,r4,104c4bc <__alt_data_end+0xfffec4bc>
 104c7f0:	003ec206 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c7f4:	0027883a 	mov	r19,zero
 104c7f8:	003fb006 	br	104c6bc <__alt_data_end+0xfffec6bc>
 104c7fc:	0005883a 	mov	r2,zero
 104c800:	003fbb06 	br	104c6f0 <__alt_data_end+0xfffec6f0>
 104c804:	2c44b03a 	or	r2,r5,r17
 104c808:	80008b1e 	bne	r16,zero,104ca38 <__subdf3+0x7c8>
 104c80c:	1000b526 	beq	r2,zero,104cae4 <__subdf3+0x874>
 104c810:	1984b03a 	or	r2,r3,r6
 104c814:	103eb926 	beq	r2,zero,104c2fc <__alt_data_end+0xfffec2fc>
 104c818:	3449883a 	add	r4,r6,r17
 104c81c:	2463803a 	cmpltu	r17,r4,r17
 104c820:	194b883a 	add	r5,r3,r5
 104c824:	2c4b883a 	add	r5,r5,r17
 104c828:	2880202c 	andhi	r2,r5,128
 104c82c:	2023883a 	mov	r17,r4
 104c830:	103f5c26 	beq	r2,zero,104c5a4 <__alt_data_end+0xfffec5a4>
 104c834:	00bfe034 	movhi	r2,65408
 104c838:	10bfffc4 	addi	r2,r2,-1
 104c83c:	4821883a 	mov	r16,r9
 104c840:	288a703a 	and	r5,r5,r2
 104c844:	003ead06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c848:	2c44b03a 	or	r2,r5,r17
 104c84c:	8000291e 	bne	r16,zero,104c8f4 <__subdf3+0x684>
 104c850:	10004f1e 	bne	r2,zero,104c990 <__subdf3+0x720>
 104c854:	1984b03a 	or	r2,r3,r6
 104c858:	10000426 	beq	r2,zero,104c86c <__subdf3+0x5fc>
 104c85c:	180b883a 	mov	r5,r3
 104c860:	3023883a 	mov	r17,r6
 104c864:	3825883a 	mov	r18,r7
 104c868:	003ea406 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c86c:	0011883a 	mov	r8,zero
 104c870:	000b883a 	mov	r5,zero
 104c874:	0023883a 	mov	r17,zero
 104c878:	003f0006 	br	104c47c <__alt_data_end+0xfffec47c>
 104c87c:	11fff804 	addi	r7,r2,-32
 104c880:	19c8d83a 	srl	r4,r3,r7
 104c884:	01c00804 	movi	r7,32
 104c888:	11c07e26 	beq	r2,r7,104ca84 <__subdf3+0x814>
 104c88c:	01c01004 	movi	r7,64
 104c890:	3885c83a 	sub	r2,r7,r2
 104c894:	1884983a 	sll	r2,r3,r2
 104c898:	118cb03a 	or	r6,r2,r6
 104c89c:	300ec03a 	cmpne	r7,r6,zero
 104c8a0:	390eb03a 	or	r7,r7,r4
 104c8a4:	0005883a 	mov	r2,zero
 104c8a8:	003f0906 	br	104c4d0 <__alt_data_end+0xfffec4d0>
 104c8ac:	0101ffc4 	movi	r4,2047
 104c8b0:	513f991e 	bne	r10,r4,104c718 <__alt_data_end+0xfffec718>
 104c8b4:	180b883a 	mov	r5,r3
 104c8b8:	3023883a 	mov	r17,r6
 104c8bc:	5021883a 	mov	r16,r10
 104c8c0:	3825883a 	mov	r18,r7
 104c8c4:	003e8d06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c8c8:	80001a1e 	bne	r16,zero,104c934 <__subdf3+0x6c4>
 104c8cc:	2c48b03a 	or	r4,r5,r17
 104c8d0:	20005526 	beq	r4,zero,104ca28 <__subdf3+0x7b8>
 104c8d4:	0084303a 	nor	r2,zero,r2
 104c8d8:	1000511e 	bne	r2,zero,104ca20 <__subdf3+0x7b0>
 104c8dc:	89a3883a 	add	r17,r17,r6
 104c8e0:	194b883a 	add	r5,r3,r5
 104c8e4:	898d803a 	cmpltu	r6,r17,r6
 104c8e8:	298b883a 	add	r5,r5,r6
 104c8ec:	5021883a 	mov	r16,r10
 104c8f0:	003efc06 	br	104c4e4 <__alt_data_end+0xfffec4e4>
 104c8f4:	1000341e 	bne	r2,zero,104c9c8 <__subdf3+0x758>
 104c8f8:	1984b03a 	or	r2,r3,r6
 104c8fc:	10006f26 	beq	r2,zero,104cabc <__subdf3+0x84c>
 104c900:	180b883a 	mov	r5,r3
 104c904:	3023883a 	mov	r17,r6
 104c908:	3825883a 	mov	r18,r7
 104c90c:	0401ffc4 	movi	r16,2047
 104c910:	003e7a06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c914:	2c62b03a 	or	r17,r5,r17
 104c918:	8822c03a 	cmpne	r17,r17,zero
 104c91c:	0005883a 	mov	r2,zero
 104c920:	003f8a06 	br	104c74c <__alt_data_end+0xfffec74c>
 104c924:	3821883a 	mov	r16,r7
 104c928:	000b883a 	mov	r5,zero
 104c92c:	0023883a 	mov	r17,zero
 104c930:	003ed206 	br	104c47c <__alt_data_end+0xfffec47c>
 104c934:	0101ffc4 	movi	r4,2047
 104c938:	51003b26 	beq	r10,r4,104ca28 <__subdf3+0x7b8>
 104c93c:	0085c83a 	sub	r2,zero,r2
 104c940:	29402034 	orhi	r5,r5,128
 104c944:	01000e04 	movi	r4,56
 104c948:	20806216 	blt	r4,r2,104cad4 <__subdf3+0x864>
 104c94c:	010007c4 	movi	r4,31
 104c950:	20806b16 	blt	r4,r2,104cb00 <__subdf3+0x890>
 104c954:	01000804 	movi	r4,32
 104c958:	2089c83a 	sub	r4,r4,r2
 104c95c:	2912983a 	sll	r9,r5,r4
 104c960:	888ed83a 	srl	r7,r17,r2
 104c964:	8908983a 	sll	r4,r17,r4
 104c968:	2884d83a 	srl	r2,r5,r2
 104c96c:	49e2b03a 	or	r17,r9,r7
 104c970:	2008c03a 	cmpne	r4,r4,zero
 104c974:	8922b03a 	or	r17,r17,r4
 104c978:	89a3883a 	add	r17,r17,r6
 104c97c:	10c5883a 	add	r2,r2,r3
 104c980:	898d803a 	cmpltu	r6,r17,r6
 104c984:	118b883a 	add	r5,r2,r6
 104c988:	5021883a 	mov	r16,r10
 104c98c:	003ed506 	br	104c4e4 <__alt_data_end+0xfffec4e4>
 104c990:	1984b03a 	or	r2,r3,r6
 104c994:	103e5926 	beq	r2,zero,104c2fc <__alt_data_end+0xfffec2fc>
 104c998:	8989c83a 	sub	r4,r17,r6
 104c99c:	8911803a 	cmpltu	r8,r17,r4
 104c9a0:	28c5c83a 	sub	r2,r5,r3
 104c9a4:	1205c83a 	sub	r2,r2,r8
 104c9a8:	1200202c 	andhi	r8,r2,128
 104c9ac:	403ef926 	beq	r8,zero,104c594 <__alt_data_end+0xfffec594>
 104c9b0:	3463c83a 	sub	r17,r6,r17
 104c9b4:	194bc83a 	sub	r5,r3,r5
 104c9b8:	344d803a 	cmpltu	r6,r6,r17
 104c9bc:	298bc83a 	sub	r5,r5,r6
 104c9c0:	3825883a 	mov	r18,r7
 104c9c4:	003e4d06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104c9c8:	1984b03a 	or	r2,r3,r6
 104c9cc:	10002b26 	beq	r2,zero,104ca7c <__subdf3+0x80c>
 104c9d0:	2808d0fa 	srli	r4,r5,3
 104c9d4:	8822d0fa 	srli	r17,r17,3
 104c9d8:	280a977a 	slli	r5,r5,29
 104c9dc:	2080022c 	andhi	r2,r4,8
 104c9e0:	2c62b03a 	or	r17,r5,r17
 104c9e4:	10000826 	beq	r2,zero,104ca08 <__subdf3+0x798>
 104c9e8:	1810d0fa 	srli	r8,r3,3
 104c9ec:	4080022c 	andhi	r2,r8,8
 104c9f0:	1000051e 	bne	r2,zero,104ca08 <__subdf3+0x798>
 104c9f4:	300cd0fa 	srli	r6,r6,3
 104c9f8:	1804977a 	slli	r2,r3,29
 104c9fc:	4009883a 	mov	r4,r8
 104ca00:	3825883a 	mov	r18,r7
 104ca04:	11a2b03a 	or	r17,r2,r6
 104ca08:	880ad77a 	srli	r5,r17,29
 104ca0c:	200890fa 	slli	r4,r4,3
 104ca10:	882290fa 	slli	r17,r17,3
 104ca14:	0401ffc4 	movi	r16,2047
 104ca18:	290ab03a 	or	r5,r5,r4
 104ca1c:	003e3706 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104ca20:	0101ffc4 	movi	r4,2047
 104ca24:	513fc71e 	bne	r10,r4,104c944 <__alt_data_end+0xfffec944>
 104ca28:	180b883a 	mov	r5,r3
 104ca2c:	3023883a 	mov	r17,r6
 104ca30:	5021883a 	mov	r16,r10
 104ca34:	003e3106 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104ca38:	10002d26 	beq	r2,zero,104caf0 <__subdf3+0x880>
 104ca3c:	1984b03a 	or	r2,r3,r6
 104ca40:	10000e26 	beq	r2,zero,104ca7c <__subdf3+0x80c>
 104ca44:	2808d0fa 	srli	r4,r5,3
 104ca48:	8822d0fa 	srli	r17,r17,3
 104ca4c:	280a977a 	slli	r5,r5,29
 104ca50:	2080022c 	andhi	r2,r4,8
 104ca54:	2c62b03a 	or	r17,r5,r17
 104ca58:	103feb26 	beq	r2,zero,104ca08 <__alt_data_end+0xfffeca08>
 104ca5c:	180ed0fa 	srli	r7,r3,3
 104ca60:	3880022c 	andhi	r2,r7,8
 104ca64:	103fe81e 	bne	r2,zero,104ca08 <__alt_data_end+0xfffeca08>
 104ca68:	300cd0fa 	srli	r6,r6,3
 104ca6c:	1804977a 	slli	r2,r3,29
 104ca70:	3809883a 	mov	r4,r7
 104ca74:	11a2b03a 	or	r17,r2,r6
 104ca78:	003fe306 	br	104ca08 <__alt_data_end+0xfffeca08>
 104ca7c:	0401ffc4 	movi	r16,2047
 104ca80:	003e1e06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104ca84:	0005883a 	mov	r2,zero
 104ca88:	003f8306 	br	104c898 <__alt_data_end+0xfffec898>
 104ca8c:	113ff804 	addi	r4,r2,-32
 104ca90:	02000804 	movi	r8,32
 104ca94:	2908d83a 	srl	r4,r5,r4
 104ca98:	12002526 	beq	r2,r8,104cb30 <__subdf3+0x8c0>
 104ca9c:	02001004 	movi	r8,64
 104caa0:	4085c83a 	sub	r2,r8,r2
 104caa4:	288a983a 	sll	r5,r5,r2
 104caa8:	2c62b03a 	or	r17,r5,r17
 104caac:	8822c03a 	cmpne	r17,r17,zero
 104cab0:	8922b03a 	or	r17,r17,r4
 104cab4:	0005883a 	mov	r2,zero
 104cab8:	003f2406 	br	104c74c <__alt_data_end+0xfffec74c>
 104cabc:	01402034 	movhi	r5,128
 104cac0:	0011883a 	mov	r8,zero
 104cac4:	297fffc4 	addi	r5,r5,-1
 104cac8:	047ffe04 	movi	r17,-8
 104cacc:	0401ffc4 	movi	r16,2047
 104cad0:	003e6a06 	br	104c47c <__alt_data_end+0xfffec47c>
 104cad4:	2c62b03a 	or	r17,r5,r17
 104cad8:	8822c03a 	cmpne	r17,r17,zero
 104cadc:	0005883a 	mov	r2,zero
 104cae0:	003fa506 	br	104c978 <__alt_data_end+0xfffec978>
 104cae4:	180b883a 	mov	r5,r3
 104cae8:	3023883a 	mov	r17,r6
 104caec:	003e0306 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104caf0:	180b883a 	mov	r5,r3
 104caf4:	3023883a 	mov	r17,r6
 104caf8:	0401ffc4 	movi	r16,2047
 104cafc:	003dff06 	br	104c2fc <__alt_data_end+0xfffec2fc>
 104cb00:	113ff804 	addi	r4,r2,-32
 104cb04:	01c00804 	movi	r7,32
 104cb08:	2908d83a 	srl	r4,r5,r4
 104cb0c:	11c00a26 	beq	r2,r7,104cb38 <__subdf3+0x8c8>
 104cb10:	01c01004 	movi	r7,64
 104cb14:	3885c83a 	sub	r2,r7,r2
 104cb18:	288a983a 	sll	r5,r5,r2
 104cb1c:	2c62b03a 	or	r17,r5,r17
 104cb20:	8822c03a 	cmpne	r17,r17,zero
 104cb24:	8922b03a 	or	r17,r17,r4
 104cb28:	0005883a 	mov	r2,zero
 104cb2c:	003f9206 	br	104c978 <__alt_data_end+0xfffec978>
 104cb30:	000b883a 	mov	r5,zero
 104cb34:	003fdc06 	br	104caa8 <__alt_data_end+0xfffecaa8>
 104cb38:	000b883a 	mov	r5,zero
 104cb3c:	003ff706 	br	104cb1c <__alt_data_end+0xfffecb1c>

0104cb40 <__fixdfsi>:
 104cb40:	2806d53a 	srli	r3,r5,20
 104cb44:	00800434 	movhi	r2,16
 104cb48:	10bfffc4 	addi	r2,r2,-1
 104cb4c:	18c1ffcc 	andi	r3,r3,2047
 104cb50:	0180ff84 	movi	r6,1022
 104cb54:	2884703a 	and	r2,r5,r2
 104cb58:	280ad7fa 	srli	r5,r5,31
 104cb5c:	30c0130e 	bge	r6,r3,104cbac <__fixdfsi+0x6c>
 104cb60:	01810744 	movi	r6,1053
 104cb64:	30c00d16 	blt	r6,r3,104cb9c <__fixdfsi+0x5c>
 104cb68:	01810cc4 	movi	r6,1075
 104cb6c:	30cdc83a 	sub	r6,r6,r3
 104cb70:	01c007c4 	movi	r7,31
 104cb74:	10800434 	orhi	r2,r2,16
 104cb78:	39800e0e 	bge	r7,r6,104cbb4 <__fixdfsi+0x74>
 104cb7c:	010104c4 	movi	r4,1043
 104cb80:	20c7c83a 	sub	r3,r4,r3
 104cb84:	10c6d83a 	srl	r3,r2,r3
 104cb88:	29403fcc 	andi	r5,r5,255
 104cb8c:	0145c83a 	sub	r2,zero,r5
 104cb90:	1884f03a 	xor	r2,r3,r2
 104cb94:	1145883a 	add	r2,r2,r5
 104cb98:	f800283a 	ret
 104cb9c:	00a00034 	movhi	r2,32768
 104cba0:	10bfffc4 	addi	r2,r2,-1
 104cba4:	2885883a 	add	r2,r5,r2
 104cba8:	f800283a 	ret
 104cbac:	0005883a 	mov	r2,zero
 104cbb0:	f800283a 	ret
 104cbb4:	18fefb44 	addi	r3,r3,-1043
 104cbb8:	2188d83a 	srl	r4,r4,r6
 104cbbc:	10c6983a 	sll	r3,r2,r3
 104cbc0:	20c6b03a 	or	r3,r4,r3
 104cbc4:	003ff006 	br	104cb88 <__alt_data_end+0xfffecb88>

0104cbc8 <__floatsidf>:
 104cbc8:	defffd04 	addi	sp,sp,-12
 104cbcc:	dc400115 	stw	r17,4(sp)
 104cbd0:	dfc00215 	stw	ra,8(sp)
 104cbd4:	dc000015 	stw	r16,0(sp)
 104cbd8:	2023883a 	mov	r17,r4
 104cbdc:	20001426 	beq	r4,zero,104cc30 <__floatsidf+0x68>
 104cbe0:	2020d7fa 	srli	r16,r4,31
 104cbe4:	80000126 	beq	r16,zero,104cbec <__floatsidf+0x24>
 104cbe8:	0123c83a 	sub	r17,zero,r4
 104cbec:	8809883a 	mov	r4,r17
 104cbf0:	10409dc0 	call	10409dc <__clzsi2>
 104cbf4:	01410784 	movi	r5,1054
 104cbf8:	00c00284 	movi	r3,10
 104cbfc:	288bc83a 	sub	r5,r5,r2
 104cc00:	18801c16 	blt	r3,r2,104cc74 <__floatsidf+0xac>
 104cc04:	00c002c4 	movi	r3,11
 104cc08:	1887c83a 	sub	r3,r3,r2
 104cc0c:	88c8d83a 	srl	r4,r17,r3
 104cc10:	00c00434 	movhi	r3,16
 104cc14:	18ffffc4 	addi	r3,r3,-1
 104cc18:	10800544 	addi	r2,r2,21
 104cc1c:	20c8703a 	and	r4,r4,r3
 104cc20:	8884983a 	sll	r2,r17,r2
 104cc24:	28c1ffcc 	andi	r3,r5,2047
 104cc28:	800d883a 	mov	r6,r16
 104cc2c:	00000406 	br	104cc40 <__floatsidf+0x78>
 104cc30:	000d883a 	mov	r6,zero
 104cc34:	0007883a 	mov	r3,zero
 104cc38:	0009883a 	mov	r4,zero
 104cc3c:	0005883a 	mov	r2,zero
 104cc40:	180a953a 	slli	r5,r3,20
 104cc44:	31803fcc 	andi	r6,r6,255
 104cc48:	00c00434 	movhi	r3,16
 104cc4c:	300c97fa 	slli	r6,r6,31
 104cc50:	18ffffc4 	addi	r3,r3,-1
 104cc54:	20c6703a 	and	r3,r4,r3
 104cc58:	1946b03a 	or	r3,r3,r5
 104cc5c:	1986b03a 	or	r3,r3,r6
 104cc60:	dfc00217 	ldw	ra,8(sp)
 104cc64:	dc400117 	ldw	r17,4(sp)
 104cc68:	dc000017 	ldw	r16,0(sp)
 104cc6c:	dec00304 	addi	sp,sp,12
 104cc70:	f800283a 	ret
 104cc74:	10fffd44 	addi	r3,r2,-11
 104cc78:	88c8983a 	sll	r4,r17,r3
 104cc7c:	00800434 	movhi	r2,16
 104cc80:	10bfffc4 	addi	r2,r2,-1
 104cc84:	2088703a 	and	r4,r4,r2
 104cc88:	28c1ffcc 	andi	r3,r5,2047
 104cc8c:	800d883a 	mov	r6,r16
 104cc90:	0005883a 	mov	r2,zero
 104cc94:	003fea06 	br	104cc40 <__alt_data_end+0xfffecc40>

0104cc98 <__floatunsidf>:
 104cc98:	defffe04 	addi	sp,sp,-8
 104cc9c:	dc000015 	stw	r16,0(sp)
 104cca0:	dfc00115 	stw	ra,4(sp)
 104cca4:	2021883a 	mov	r16,r4
 104cca8:	20001026 	beq	r4,zero,104ccec <__floatunsidf+0x54>
 104ccac:	10409dc0 	call	10409dc <__clzsi2>
 104ccb0:	01410784 	movi	r5,1054
 104ccb4:	100d883a 	mov	r6,r2
 104ccb8:	288bc83a 	sub	r5,r5,r2
 104ccbc:	00800284 	movi	r2,10
 104ccc0:	11801616 	blt	r2,r6,104cd1c <__floatunsidf+0x84>
 104ccc4:	008002c4 	movi	r2,11
 104ccc8:	1185c83a 	sub	r2,r2,r6
 104cccc:	8084d83a 	srl	r2,r16,r2
 104ccd0:	00c00434 	movhi	r3,16
 104ccd4:	31c00544 	addi	r7,r6,21
 104ccd8:	18ffffc4 	addi	r3,r3,-1
 104ccdc:	81e0983a 	sll	r16,r16,r7
 104cce0:	10cc703a 	and	r6,r2,r3
 104cce4:	2941ffcc 	andi	r5,r5,2047
 104cce8:	00000206 	br	104ccf4 <__floatunsidf+0x5c>
 104ccec:	000b883a 	mov	r5,zero
 104ccf0:	000d883a 	mov	r6,zero
 104ccf4:	280a953a 	slli	r5,r5,20
 104ccf8:	00c00434 	movhi	r3,16
 104ccfc:	18ffffc4 	addi	r3,r3,-1
 104cd00:	30c6703a 	and	r3,r6,r3
 104cd04:	8005883a 	mov	r2,r16
 104cd08:	1946b03a 	or	r3,r3,r5
 104cd0c:	dfc00117 	ldw	ra,4(sp)
 104cd10:	dc000017 	ldw	r16,0(sp)
 104cd14:	dec00204 	addi	sp,sp,8
 104cd18:	f800283a 	ret
 104cd1c:	31bffd44 	addi	r6,r6,-11
 104cd20:	818c983a 	sll	r6,r16,r6
 104cd24:	00800434 	movhi	r2,16
 104cd28:	10bfffc4 	addi	r2,r2,-1
 104cd2c:	2941ffcc 	andi	r5,r5,2047
 104cd30:	0021883a 	mov	r16,zero
 104cd34:	308c703a 	and	r6,r6,r2
 104cd38:	003fee06 	br	104ccf4 <__alt_data_end+0xfffeccf4>

0104cd3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104cd3c:	defffe04 	addi	sp,sp,-8
 104cd40:	dfc00115 	stw	ra,4(sp)
 104cd44:	df000015 	stw	fp,0(sp)
 104cd48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104cd4c:	00804174 	movhi	r2,261
 104cd50:	10855a04 	addi	r2,r2,5480
 104cd54:	10800017 	ldw	r2,0(r2)
 104cd58:	10000526 	beq	r2,zero,104cd70 <alt_get_errno+0x34>
 104cd5c:	00804174 	movhi	r2,261
 104cd60:	10855a04 	addi	r2,r2,5480
 104cd64:	10800017 	ldw	r2,0(r2)
 104cd68:	103ee83a 	callr	r2
 104cd6c:	00000206 	br	104cd78 <alt_get_errno+0x3c>
 104cd70:	00804174 	movhi	r2,261
 104cd74:	108c2004 	addi	r2,r2,12416
}
 104cd78:	e037883a 	mov	sp,fp
 104cd7c:	dfc00117 	ldw	ra,4(sp)
 104cd80:	df000017 	ldw	fp,0(sp)
 104cd84:	dec00204 	addi	sp,sp,8
 104cd88:	f800283a 	ret

0104cd8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 104cd8c:	defffb04 	addi	sp,sp,-20
 104cd90:	dfc00415 	stw	ra,16(sp)
 104cd94:	df000315 	stw	fp,12(sp)
 104cd98:	df000304 	addi	fp,sp,12
 104cd9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 104cda0:	e0bfff17 	ldw	r2,-4(fp)
 104cda4:	10000616 	blt	r2,zero,104cdc0 <close+0x34>
 104cda8:	e0bfff17 	ldw	r2,-4(fp)
 104cdac:	10c00324 	muli	r3,r2,12
 104cdb0:	00804174 	movhi	r2,261
 104cdb4:	1080d704 	addi	r2,r2,860
 104cdb8:	1885883a 	add	r2,r3,r2
 104cdbc:	00000106 	br	104cdc4 <close+0x38>
 104cdc0:	0005883a 	mov	r2,zero
 104cdc4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 104cdc8:	e0bffd17 	ldw	r2,-12(fp)
 104cdcc:	10001926 	beq	r2,zero,104ce34 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 104cdd0:	e0bffd17 	ldw	r2,-12(fp)
 104cdd4:	10800017 	ldw	r2,0(r2)
 104cdd8:	10800417 	ldw	r2,16(r2)
 104cddc:	10000626 	beq	r2,zero,104cdf8 <close+0x6c>
 104cde0:	e0bffd17 	ldw	r2,-12(fp)
 104cde4:	10800017 	ldw	r2,0(r2)
 104cde8:	10800417 	ldw	r2,16(r2)
 104cdec:	e13ffd17 	ldw	r4,-12(fp)
 104cdf0:	103ee83a 	callr	r2
 104cdf4:	00000106 	br	104cdfc <close+0x70>
 104cdf8:	0005883a 	mov	r2,zero
 104cdfc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 104ce00:	e13fff17 	ldw	r4,-4(fp)
 104ce04:	104d4880 	call	104d488 <alt_release_fd>
    if (rval < 0)
 104ce08:	e0bffe17 	ldw	r2,-8(fp)
 104ce0c:	1000070e 	bge	r2,zero,104ce2c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 104ce10:	104cd3c0 	call	104cd3c <alt_get_errno>
 104ce14:	1007883a 	mov	r3,r2
 104ce18:	e0bffe17 	ldw	r2,-8(fp)
 104ce1c:	0085c83a 	sub	r2,zero,r2
 104ce20:	18800015 	stw	r2,0(r3)
      return -1;
 104ce24:	00bfffc4 	movi	r2,-1
 104ce28:	00000706 	br	104ce48 <close+0xbc>
    }
    return 0;
 104ce2c:	0005883a 	mov	r2,zero
 104ce30:	00000506 	br	104ce48 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 104ce34:	104cd3c0 	call	104cd3c <alt_get_errno>
 104ce38:	1007883a 	mov	r3,r2
 104ce3c:	00801444 	movi	r2,81
 104ce40:	18800015 	stw	r2,0(r3)
    return -1;
 104ce44:	00bfffc4 	movi	r2,-1
  }
}
 104ce48:	e037883a 	mov	sp,fp
 104ce4c:	dfc00117 	ldw	ra,4(sp)
 104ce50:	df000017 	ldw	fp,0(sp)
 104ce54:	dec00204 	addi	sp,sp,8
 104ce58:	f800283a 	ret

0104ce5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 104ce5c:	defffc04 	addi	sp,sp,-16
 104ce60:	df000315 	stw	fp,12(sp)
 104ce64:	df000304 	addi	fp,sp,12
 104ce68:	e13ffd15 	stw	r4,-12(fp)
 104ce6c:	e17ffe15 	stw	r5,-8(fp)
 104ce70:	e1bfff15 	stw	r6,-4(fp)
  return len;
 104ce74:	e0bfff17 	ldw	r2,-4(fp)
}
 104ce78:	e037883a 	mov	sp,fp
 104ce7c:	df000017 	ldw	fp,0(sp)
 104ce80:	dec00104 	addi	sp,sp,4
 104ce84:	f800283a 	ret

0104ce88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104ce88:	defffe04 	addi	sp,sp,-8
 104ce8c:	dfc00115 	stw	ra,4(sp)
 104ce90:	df000015 	stw	fp,0(sp)
 104ce94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104ce98:	00804174 	movhi	r2,261
 104ce9c:	10855a04 	addi	r2,r2,5480
 104cea0:	10800017 	ldw	r2,0(r2)
 104cea4:	10000526 	beq	r2,zero,104cebc <alt_get_errno+0x34>
 104cea8:	00804174 	movhi	r2,261
 104ceac:	10855a04 	addi	r2,r2,5480
 104ceb0:	10800017 	ldw	r2,0(r2)
 104ceb4:	103ee83a 	callr	r2
 104ceb8:	00000206 	br	104cec4 <alt_get_errno+0x3c>
 104cebc:	00804174 	movhi	r2,261
 104cec0:	108c2004 	addi	r2,r2,12416
}
 104cec4:	e037883a 	mov	sp,fp
 104cec8:	dfc00117 	ldw	ra,4(sp)
 104cecc:	df000017 	ldw	fp,0(sp)
 104ced0:	dec00204 	addi	sp,sp,8
 104ced4:	f800283a 	ret

0104ced8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 104ced8:	defffb04 	addi	sp,sp,-20
 104cedc:	dfc00415 	stw	ra,16(sp)
 104cee0:	df000315 	stw	fp,12(sp)
 104cee4:	df000304 	addi	fp,sp,12
 104cee8:	e13ffe15 	stw	r4,-8(fp)
 104ceec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 104cef0:	e0bffe17 	ldw	r2,-8(fp)
 104cef4:	10000616 	blt	r2,zero,104cf10 <fstat+0x38>
 104cef8:	e0bffe17 	ldw	r2,-8(fp)
 104cefc:	10c00324 	muli	r3,r2,12
 104cf00:	00804174 	movhi	r2,261
 104cf04:	1080d704 	addi	r2,r2,860
 104cf08:	1885883a 	add	r2,r3,r2
 104cf0c:	00000106 	br	104cf14 <fstat+0x3c>
 104cf10:	0005883a 	mov	r2,zero
 104cf14:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 104cf18:	e0bffd17 	ldw	r2,-12(fp)
 104cf1c:	10001026 	beq	r2,zero,104cf60 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 104cf20:	e0bffd17 	ldw	r2,-12(fp)
 104cf24:	10800017 	ldw	r2,0(r2)
 104cf28:	10800817 	ldw	r2,32(r2)
 104cf2c:	10000726 	beq	r2,zero,104cf4c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 104cf30:	e0bffd17 	ldw	r2,-12(fp)
 104cf34:	10800017 	ldw	r2,0(r2)
 104cf38:	10800817 	ldw	r2,32(r2)
 104cf3c:	e13ffd17 	ldw	r4,-12(fp)
 104cf40:	e17fff17 	ldw	r5,-4(fp)
 104cf44:	103ee83a 	callr	r2
 104cf48:	00000a06 	br	104cf74 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 104cf4c:	e0bfff17 	ldw	r2,-4(fp)
 104cf50:	00c80004 	movi	r3,8192
 104cf54:	10c00115 	stw	r3,4(r2)
      return 0;
 104cf58:	0005883a 	mov	r2,zero
 104cf5c:	00000506 	br	104cf74 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 104cf60:	104ce880 	call	104ce88 <alt_get_errno>
 104cf64:	1007883a 	mov	r3,r2
 104cf68:	00801444 	movi	r2,81
 104cf6c:	18800015 	stw	r2,0(r3)
    return -1;
 104cf70:	00bfffc4 	movi	r2,-1
  }
}
 104cf74:	e037883a 	mov	sp,fp
 104cf78:	dfc00117 	ldw	ra,4(sp)
 104cf7c:	df000017 	ldw	fp,0(sp)
 104cf80:	dec00204 	addi	sp,sp,8
 104cf84:	f800283a 	ret

0104cf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104cf88:	defffe04 	addi	sp,sp,-8
 104cf8c:	dfc00115 	stw	ra,4(sp)
 104cf90:	df000015 	stw	fp,0(sp)
 104cf94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104cf98:	00804174 	movhi	r2,261
 104cf9c:	10855a04 	addi	r2,r2,5480
 104cfa0:	10800017 	ldw	r2,0(r2)
 104cfa4:	10000526 	beq	r2,zero,104cfbc <alt_get_errno+0x34>
 104cfa8:	00804174 	movhi	r2,261
 104cfac:	10855a04 	addi	r2,r2,5480
 104cfb0:	10800017 	ldw	r2,0(r2)
 104cfb4:	103ee83a 	callr	r2
 104cfb8:	00000206 	br	104cfc4 <alt_get_errno+0x3c>
 104cfbc:	00804174 	movhi	r2,261
 104cfc0:	108c2004 	addi	r2,r2,12416
}
 104cfc4:	e037883a 	mov	sp,fp
 104cfc8:	dfc00117 	ldw	ra,4(sp)
 104cfcc:	df000017 	ldw	fp,0(sp)
 104cfd0:	dec00204 	addi	sp,sp,8
 104cfd4:	f800283a 	ret

0104cfd8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 104cfd8:	deffed04 	addi	sp,sp,-76
 104cfdc:	dfc01215 	stw	ra,72(sp)
 104cfe0:	df001115 	stw	fp,68(sp)
 104cfe4:	df001104 	addi	fp,sp,68
 104cfe8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 104cfec:	e0bfff17 	ldw	r2,-4(fp)
 104cff0:	10000616 	blt	r2,zero,104d00c <isatty+0x34>
 104cff4:	e0bfff17 	ldw	r2,-4(fp)
 104cff8:	10c00324 	muli	r3,r2,12
 104cffc:	00804174 	movhi	r2,261
 104d000:	1080d704 	addi	r2,r2,860
 104d004:	1885883a 	add	r2,r3,r2
 104d008:	00000106 	br	104d010 <isatty+0x38>
 104d00c:	0005883a 	mov	r2,zero
 104d010:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 104d014:	e0bfef17 	ldw	r2,-68(fp)
 104d018:	10000e26 	beq	r2,zero,104d054 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 104d01c:	e0bfef17 	ldw	r2,-68(fp)
 104d020:	10800017 	ldw	r2,0(r2)
 104d024:	10800817 	ldw	r2,32(r2)
 104d028:	1000021e 	bne	r2,zero,104d034 <isatty+0x5c>
    {
      return 1;
 104d02c:	00800044 	movi	r2,1
 104d030:	00000d06 	br	104d068 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 104d034:	e0bff004 	addi	r2,fp,-64
 104d038:	e13fff17 	ldw	r4,-4(fp)
 104d03c:	100b883a 	mov	r5,r2
 104d040:	104ced80 	call	104ced8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 104d044:	e0bff117 	ldw	r2,-60(fp)
 104d048:	10880020 	cmpeqi	r2,r2,8192
 104d04c:	10803fcc 	andi	r2,r2,255
 104d050:	00000506 	br	104d068 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 104d054:	104cf880 	call	104cf88 <alt_get_errno>
 104d058:	1007883a 	mov	r3,r2
 104d05c:	00801444 	movi	r2,81
 104d060:	18800015 	stw	r2,0(r3)
    return 0;
 104d064:	0005883a 	mov	r2,zero
  }
}
 104d068:	e037883a 	mov	sp,fp
 104d06c:	dfc00117 	ldw	ra,4(sp)
 104d070:	df000017 	ldw	fp,0(sp)
 104d074:	dec00204 	addi	sp,sp,8
 104d078:	f800283a 	ret

0104d07c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 104d07c:	defffc04 	addi	sp,sp,-16
 104d080:	df000315 	stw	fp,12(sp)
 104d084:	df000304 	addi	fp,sp,12
 104d088:	e13ffd15 	stw	r4,-12(fp)
 104d08c:	e17ffe15 	stw	r5,-8(fp)
 104d090:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 104d094:	e0fffe17 	ldw	r3,-8(fp)
 104d098:	e0bffd17 	ldw	r2,-12(fp)
 104d09c:	18800c26 	beq	r3,r2,104d0d0 <alt_load_section+0x54>
  {
    while( to != end )
 104d0a0:	00000806 	br	104d0c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 104d0a4:	e0bffe17 	ldw	r2,-8(fp)
 104d0a8:	10c00104 	addi	r3,r2,4
 104d0ac:	e0fffe15 	stw	r3,-8(fp)
 104d0b0:	e0fffd17 	ldw	r3,-12(fp)
 104d0b4:	19000104 	addi	r4,r3,4
 104d0b8:	e13ffd15 	stw	r4,-12(fp)
 104d0bc:	18c00017 	ldw	r3,0(r3)
 104d0c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 104d0c4:	e0fffe17 	ldw	r3,-8(fp)
 104d0c8:	e0bfff17 	ldw	r2,-4(fp)
 104d0cc:	18bff51e 	bne	r3,r2,104d0a4 <__alt_data_end+0xfffed0a4>
    {
      *to++ = *from++;
    }
  }
}
 104d0d0:	e037883a 	mov	sp,fp
 104d0d4:	df000017 	ldw	fp,0(sp)
 104d0d8:	dec00104 	addi	sp,sp,4
 104d0dc:	f800283a 	ret

0104d0e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 104d0e0:	defffe04 	addi	sp,sp,-8
 104d0e4:	dfc00115 	stw	ra,4(sp)
 104d0e8:	df000015 	stw	fp,0(sp)
 104d0ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 104d0f0:	01004174 	movhi	r4,261
 104d0f4:	21055f04 	addi	r4,r4,5500
 104d0f8:	01404174 	movhi	r5,261
 104d0fc:	297ea404 	addi	r5,r5,-1392
 104d100:	01804174 	movhi	r6,261
 104d104:	31855f04 	addi	r6,r6,5500
 104d108:	104d07c0 	call	104d07c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 104d10c:	01004134 	movhi	r4,260
 104d110:	21000804 	addi	r4,r4,32
 104d114:	01404134 	movhi	r5,260
 104d118:	29400804 	addi	r5,r5,32
 104d11c:	01804134 	movhi	r6,260
 104d120:	31809004 	addi	r6,r6,576
 104d124:	104d07c0 	call	104d07c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 104d128:	01004174 	movhi	r4,261
 104d12c:	213dcd04 	addi	r4,r4,-2252
 104d130:	01404174 	movhi	r5,261
 104d134:	297dcd04 	addi	r5,r5,-2252
 104d138:	01804174 	movhi	r6,261
 104d13c:	31bea404 	addi	r6,r6,-1392
 104d140:	104d07c0 	call	104d07c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 104d144:	104e5b80 	call	104e5b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 104d148:	104e7a80 	call	104e7a8 <alt_icache_flush_all>
}
 104d14c:	e037883a 	mov	sp,fp
 104d150:	dfc00117 	ldw	ra,4(sp)
 104d154:	df000017 	ldw	fp,0(sp)
 104d158:	dec00204 	addi	sp,sp,8
 104d15c:	f800283a 	ret

0104d160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104d160:	defffe04 	addi	sp,sp,-8
 104d164:	dfc00115 	stw	ra,4(sp)
 104d168:	df000015 	stw	fp,0(sp)
 104d16c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104d170:	00804174 	movhi	r2,261
 104d174:	10855a04 	addi	r2,r2,5480
 104d178:	10800017 	ldw	r2,0(r2)
 104d17c:	10000526 	beq	r2,zero,104d194 <alt_get_errno+0x34>
 104d180:	00804174 	movhi	r2,261
 104d184:	10855a04 	addi	r2,r2,5480
 104d188:	10800017 	ldw	r2,0(r2)
 104d18c:	103ee83a 	callr	r2
 104d190:	00000206 	br	104d19c <alt_get_errno+0x3c>
 104d194:	00804174 	movhi	r2,261
 104d198:	108c2004 	addi	r2,r2,12416
}
 104d19c:	e037883a 	mov	sp,fp
 104d1a0:	dfc00117 	ldw	ra,4(sp)
 104d1a4:	df000017 	ldw	fp,0(sp)
 104d1a8:	dec00204 	addi	sp,sp,8
 104d1ac:	f800283a 	ret

0104d1b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 104d1b0:	defff904 	addi	sp,sp,-28
 104d1b4:	dfc00615 	stw	ra,24(sp)
 104d1b8:	df000515 	stw	fp,20(sp)
 104d1bc:	df000504 	addi	fp,sp,20
 104d1c0:	e13ffd15 	stw	r4,-12(fp)
 104d1c4:	e17ffe15 	stw	r5,-8(fp)
 104d1c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 104d1cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 104d1d0:	e0bffd17 	ldw	r2,-12(fp)
 104d1d4:	10000616 	blt	r2,zero,104d1f0 <lseek+0x40>
 104d1d8:	e0bffd17 	ldw	r2,-12(fp)
 104d1dc:	10c00324 	muli	r3,r2,12
 104d1e0:	00804174 	movhi	r2,261
 104d1e4:	1080d704 	addi	r2,r2,860
 104d1e8:	1885883a 	add	r2,r3,r2
 104d1ec:	00000106 	br	104d1f4 <lseek+0x44>
 104d1f0:	0005883a 	mov	r2,zero
 104d1f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 104d1f8:	e0bffc17 	ldw	r2,-16(fp)
 104d1fc:	10001026 	beq	r2,zero,104d240 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 104d200:	e0bffc17 	ldw	r2,-16(fp)
 104d204:	10800017 	ldw	r2,0(r2)
 104d208:	10800717 	ldw	r2,28(r2)
 104d20c:	10000926 	beq	r2,zero,104d234 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 104d210:	e0bffc17 	ldw	r2,-16(fp)
 104d214:	10800017 	ldw	r2,0(r2)
 104d218:	10800717 	ldw	r2,28(r2)
 104d21c:	e13ffc17 	ldw	r4,-16(fp)
 104d220:	e17ffe17 	ldw	r5,-8(fp)
 104d224:	e1bfff17 	ldw	r6,-4(fp)
 104d228:	103ee83a 	callr	r2
 104d22c:	e0bffb15 	stw	r2,-20(fp)
 104d230:	00000506 	br	104d248 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 104d234:	00bfde84 	movi	r2,-134
 104d238:	e0bffb15 	stw	r2,-20(fp)
 104d23c:	00000206 	br	104d248 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 104d240:	00bfebc4 	movi	r2,-81
 104d244:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 104d248:	e0bffb17 	ldw	r2,-20(fp)
 104d24c:	1000070e 	bge	r2,zero,104d26c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 104d250:	104d1600 	call	104d160 <alt_get_errno>
 104d254:	1007883a 	mov	r3,r2
 104d258:	e0bffb17 	ldw	r2,-20(fp)
 104d25c:	0085c83a 	sub	r2,zero,r2
 104d260:	18800015 	stw	r2,0(r3)
    rc = -1;
 104d264:	00bfffc4 	movi	r2,-1
 104d268:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 104d26c:	e0bffb17 	ldw	r2,-20(fp)
}
 104d270:	e037883a 	mov	sp,fp
 104d274:	dfc00117 	ldw	ra,4(sp)
 104d278:	df000017 	ldw	fp,0(sp)
 104d27c:	dec00204 	addi	sp,sp,8
 104d280:	f800283a 	ret

0104d284 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 104d284:	defffd04 	addi	sp,sp,-12
 104d288:	dfc00215 	stw	ra,8(sp)
 104d28c:	df000115 	stw	fp,4(sp)
 104d290:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 104d294:	0009883a 	mov	r4,zero
 104d298:	104d7480 	call	104d748 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 104d29c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 104d2a0:	104d77c0 	call	104d77c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 104d2a4:	01004174 	movhi	r4,261
 104d2a8:	213e9c04 	addi	r4,r4,-1424
 104d2ac:	01404174 	movhi	r5,261
 104d2b0:	297e9c04 	addi	r5,r5,-1424
 104d2b4:	01804174 	movhi	r6,261
 104d2b8:	31be9c04 	addi	r6,r6,-1424
 104d2bc:	104eb680 	call	104eb68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 104d2c0:	104e6f00 	call	104e6f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 104d2c4:	01004174 	movhi	r4,261
 104d2c8:	2139d304 	addi	r4,r4,-6324
 104d2cc:	104f3900 	call	104f390 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 104d2d0:	d126d217 	ldw	r4,-25784(gp)
 104d2d4:	d0e6d317 	ldw	r3,-25780(gp)
 104d2d8:	d0a6d417 	ldw	r2,-25776(gp)
 104d2dc:	180b883a 	mov	r5,r3
 104d2e0:	100d883a 	mov	r6,r2
 104d2e4:	104028c0 	call	104028c <main>
 104d2e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 104d2ec:	01000044 	movi	r4,1
 104d2f0:	104cd8c0 	call	104cd8c <close>
  exit (result);
 104d2f4:	e13fff17 	ldw	r4,-4(fp)
 104d2f8:	104f3a40 	call	104f3a4 <exit>

0104d2fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 104d2fc:	defffe04 	addi	sp,sp,-8
 104d300:	df000115 	stw	fp,4(sp)
 104d304:	df000104 	addi	fp,sp,4
 104d308:	e13fff15 	stw	r4,-4(fp)
}
 104d30c:	e037883a 	mov	sp,fp
 104d310:	df000017 	ldw	fp,0(sp)
 104d314:	dec00104 	addi	sp,sp,4
 104d318:	f800283a 	ret

0104d31c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 104d31c:	defffe04 	addi	sp,sp,-8
 104d320:	df000115 	stw	fp,4(sp)
 104d324:	df000104 	addi	fp,sp,4
 104d328:	e13fff15 	stw	r4,-4(fp)
}
 104d32c:	e037883a 	mov	sp,fp
 104d330:	df000017 	ldw	fp,0(sp)
 104d334:	dec00104 	addi	sp,sp,4
 104d338:	f800283a 	ret

0104d33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104d33c:	defffe04 	addi	sp,sp,-8
 104d340:	dfc00115 	stw	ra,4(sp)
 104d344:	df000015 	stw	fp,0(sp)
 104d348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104d34c:	00804174 	movhi	r2,261
 104d350:	10855a04 	addi	r2,r2,5480
 104d354:	10800017 	ldw	r2,0(r2)
 104d358:	10000526 	beq	r2,zero,104d370 <alt_get_errno+0x34>
 104d35c:	00804174 	movhi	r2,261
 104d360:	10855a04 	addi	r2,r2,5480
 104d364:	10800017 	ldw	r2,0(r2)
 104d368:	103ee83a 	callr	r2
 104d36c:	00000206 	br	104d378 <alt_get_errno+0x3c>
 104d370:	00804174 	movhi	r2,261
 104d374:	108c2004 	addi	r2,r2,12416
}
 104d378:	e037883a 	mov	sp,fp
 104d37c:	dfc00117 	ldw	ra,4(sp)
 104d380:	df000017 	ldw	fp,0(sp)
 104d384:	dec00204 	addi	sp,sp,8
 104d388:	f800283a 	ret

0104d38c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 104d38c:	defff904 	addi	sp,sp,-28
 104d390:	dfc00615 	stw	ra,24(sp)
 104d394:	df000515 	stw	fp,20(sp)
 104d398:	df000504 	addi	fp,sp,20
 104d39c:	e13ffd15 	stw	r4,-12(fp)
 104d3a0:	e17ffe15 	stw	r5,-8(fp)
 104d3a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 104d3a8:	e0bffd17 	ldw	r2,-12(fp)
 104d3ac:	10000616 	blt	r2,zero,104d3c8 <read+0x3c>
 104d3b0:	e0bffd17 	ldw	r2,-12(fp)
 104d3b4:	10c00324 	muli	r3,r2,12
 104d3b8:	00804174 	movhi	r2,261
 104d3bc:	1080d704 	addi	r2,r2,860
 104d3c0:	1885883a 	add	r2,r3,r2
 104d3c4:	00000106 	br	104d3cc <read+0x40>
 104d3c8:	0005883a 	mov	r2,zero
 104d3cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 104d3d0:	e0bffb17 	ldw	r2,-20(fp)
 104d3d4:	10002226 	beq	r2,zero,104d460 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 104d3d8:	e0bffb17 	ldw	r2,-20(fp)
 104d3dc:	10800217 	ldw	r2,8(r2)
 104d3e0:	108000cc 	andi	r2,r2,3
 104d3e4:	10800060 	cmpeqi	r2,r2,1
 104d3e8:	1000181e 	bne	r2,zero,104d44c <read+0xc0>
        (fd->dev->read))
 104d3ec:	e0bffb17 	ldw	r2,-20(fp)
 104d3f0:	10800017 	ldw	r2,0(r2)
 104d3f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 104d3f8:	10001426 	beq	r2,zero,104d44c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 104d3fc:	e0bffb17 	ldw	r2,-20(fp)
 104d400:	10800017 	ldw	r2,0(r2)
 104d404:	10800517 	ldw	r2,20(r2)
 104d408:	e0ffff17 	ldw	r3,-4(fp)
 104d40c:	e13ffb17 	ldw	r4,-20(fp)
 104d410:	e17ffe17 	ldw	r5,-8(fp)
 104d414:	180d883a 	mov	r6,r3
 104d418:	103ee83a 	callr	r2
 104d41c:	e0bffc15 	stw	r2,-16(fp)
 104d420:	e0bffc17 	ldw	r2,-16(fp)
 104d424:	1000070e 	bge	r2,zero,104d444 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 104d428:	104d33c0 	call	104d33c <alt_get_errno>
 104d42c:	1007883a 	mov	r3,r2
 104d430:	e0bffc17 	ldw	r2,-16(fp)
 104d434:	0085c83a 	sub	r2,zero,r2
 104d438:	18800015 	stw	r2,0(r3)
          return -1;
 104d43c:	00bfffc4 	movi	r2,-1
 104d440:	00000c06 	br	104d474 <read+0xe8>
        }
        return rval;
 104d444:	e0bffc17 	ldw	r2,-16(fp)
 104d448:	00000a06 	br	104d474 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 104d44c:	104d33c0 	call	104d33c <alt_get_errno>
 104d450:	1007883a 	mov	r3,r2
 104d454:	00800344 	movi	r2,13
 104d458:	18800015 	stw	r2,0(r3)
 104d45c:	00000406 	br	104d470 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 104d460:	104d33c0 	call	104d33c <alt_get_errno>
 104d464:	1007883a 	mov	r3,r2
 104d468:	00801444 	movi	r2,81
 104d46c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 104d470:	00bfffc4 	movi	r2,-1
}
 104d474:	e037883a 	mov	sp,fp
 104d478:	dfc00117 	ldw	ra,4(sp)
 104d47c:	df000017 	ldw	fp,0(sp)
 104d480:	dec00204 	addi	sp,sp,8
 104d484:	f800283a 	ret

0104d488 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 104d488:	defffe04 	addi	sp,sp,-8
 104d48c:	df000115 	stw	fp,4(sp)
 104d490:	df000104 	addi	fp,sp,4
 104d494:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 104d498:	e0bfff17 	ldw	r2,-4(fp)
 104d49c:	108000d0 	cmplti	r2,r2,3
 104d4a0:	10000d1e 	bne	r2,zero,104d4d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 104d4a4:	00804174 	movhi	r2,261
 104d4a8:	1080d704 	addi	r2,r2,860
 104d4ac:	e0ffff17 	ldw	r3,-4(fp)
 104d4b0:	18c00324 	muli	r3,r3,12
 104d4b4:	10c5883a 	add	r2,r2,r3
 104d4b8:	10800204 	addi	r2,r2,8
 104d4bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 104d4c0:	00804174 	movhi	r2,261
 104d4c4:	1080d704 	addi	r2,r2,860
 104d4c8:	e0ffff17 	ldw	r3,-4(fp)
 104d4cc:	18c00324 	muli	r3,r3,12
 104d4d0:	10c5883a 	add	r2,r2,r3
 104d4d4:	10000015 	stw	zero,0(r2)
  }
}
 104d4d8:	e037883a 	mov	sp,fp
 104d4dc:	df000017 	ldw	fp,0(sp)
 104d4e0:	dec00104 	addi	sp,sp,4
 104d4e4:	f800283a 	ret

0104d4e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 104d4e8:	defff904 	addi	sp,sp,-28
 104d4ec:	df000615 	stw	fp,24(sp)
 104d4f0:	df000604 	addi	fp,sp,24
 104d4f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104d4f8:	0005303a 	rdctl	r2,status
 104d4fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104d500:	e0fffc17 	ldw	r3,-16(fp)
 104d504:	00bfff84 	movi	r2,-2
 104d508:	1884703a 	and	r2,r3,r2
 104d50c:	1001703a 	wrctl	status,r2
  
  return context;
 104d510:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 104d514:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 104d518:	d0a00c17 	ldw	r2,-32720(gp)
 104d51c:	10c000c4 	addi	r3,r2,3
 104d520:	00bfff04 	movi	r2,-4
 104d524:	1884703a 	and	r2,r3,r2
 104d528:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 104d52c:	d0e00c17 	ldw	r3,-32720(gp)
 104d530:	e0bfff17 	ldw	r2,-4(fp)
 104d534:	1887883a 	add	r3,r3,r2
 104d538:	008041b4 	movhi	r2,262
 104d53c:	10800004 	addi	r2,r2,0
 104d540:	10c0062e 	bgeu	r2,r3,104d55c <sbrk+0x74>
 104d544:	e0bffa17 	ldw	r2,-24(fp)
 104d548:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104d54c:	e0bffd17 	ldw	r2,-12(fp)
 104d550:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 104d554:	00bfffc4 	movi	r2,-1
 104d558:	00000b06 	br	104d588 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 104d55c:	d0a00c17 	ldw	r2,-32720(gp)
 104d560:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 104d564:	d0e00c17 	ldw	r3,-32720(gp)
 104d568:	e0bfff17 	ldw	r2,-4(fp)
 104d56c:	1885883a 	add	r2,r3,r2
 104d570:	d0a00c15 	stw	r2,-32720(gp)
 104d574:	e0bffa17 	ldw	r2,-24(fp)
 104d578:	e0bffe15 	stw	r2,-8(fp)
 104d57c:	e0bffe17 	ldw	r2,-8(fp)
 104d580:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 104d584:	e0bffb17 	ldw	r2,-20(fp)
} 
 104d588:	e037883a 	mov	sp,fp
 104d58c:	df000017 	ldw	fp,0(sp)
 104d590:	dec00104 	addi	sp,sp,4
 104d594:	f800283a 	ret

0104d598 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 104d598:	defffd04 	addi	sp,sp,-12
 104d59c:	dfc00215 	stw	ra,8(sp)
 104d5a0:	df000115 	stw	fp,4(sp)
 104d5a4:	df000104 	addi	fp,sp,4
 104d5a8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 104d5ac:	e13fff17 	ldw	r4,-4(fp)
 104d5b0:	104e4600 	call	104e460 <alt_busy_sleep>
}
 104d5b4:	e037883a 	mov	sp,fp
 104d5b8:	dfc00117 	ldw	ra,4(sp)
 104d5bc:	df000017 	ldw	fp,0(sp)
 104d5c0:	dec00204 	addi	sp,sp,8
 104d5c4:	f800283a 	ret

0104d5c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104d5c8:	defffe04 	addi	sp,sp,-8
 104d5cc:	dfc00115 	stw	ra,4(sp)
 104d5d0:	df000015 	stw	fp,0(sp)
 104d5d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104d5d8:	00804174 	movhi	r2,261
 104d5dc:	10855a04 	addi	r2,r2,5480
 104d5e0:	10800017 	ldw	r2,0(r2)
 104d5e4:	10000526 	beq	r2,zero,104d5fc <alt_get_errno+0x34>
 104d5e8:	00804174 	movhi	r2,261
 104d5ec:	10855a04 	addi	r2,r2,5480
 104d5f0:	10800017 	ldw	r2,0(r2)
 104d5f4:	103ee83a 	callr	r2
 104d5f8:	00000206 	br	104d604 <alt_get_errno+0x3c>
 104d5fc:	00804174 	movhi	r2,261
 104d600:	108c2004 	addi	r2,r2,12416
}
 104d604:	e037883a 	mov	sp,fp
 104d608:	dfc00117 	ldw	ra,4(sp)
 104d60c:	df000017 	ldw	fp,0(sp)
 104d610:	dec00204 	addi	sp,sp,8
 104d614:	f800283a 	ret

0104d618 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 104d618:	defff904 	addi	sp,sp,-28
 104d61c:	dfc00615 	stw	ra,24(sp)
 104d620:	df000515 	stw	fp,20(sp)
 104d624:	df000504 	addi	fp,sp,20
 104d628:	e13ffd15 	stw	r4,-12(fp)
 104d62c:	e17ffe15 	stw	r5,-8(fp)
 104d630:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 104d634:	e0bffd17 	ldw	r2,-12(fp)
 104d638:	10000616 	blt	r2,zero,104d654 <write+0x3c>
 104d63c:	e0bffd17 	ldw	r2,-12(fp)
 104d640:	10c00324 	muli	r3,r2,12
 104d644:	00804174 	movhi	r2,261
 104d648:	1080d704 	addi	r2,r2,860
 104d64c:	1885883a 	add	r2,r3,r2
 104d650:	00000106 	br	104d658 <write+0x40>
 104d654:	0005883a 	mov	r2,zero
 104d658:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 104d65c:	e0bffb17 	ldw	r2,-20(fp)
 104d660:	10002126 	beq	r2,zero,104d6e8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 104d664:	e0bffb17 	ldw	r2,-20(fp)
 104d668:	10800217 	ldw	r2,8(r2)
 104d66c:	108000cc 	andi	r2,r2,3
 104d670:	10001826 	beq	r2,zero,104d6d4 <write+0xbc>
 104d674:	e0bffb17 	ldw	r2,-20(fp)
 104d678:	10800017 	ldw	r2,0(r2)
 104d67c:	10800617 	ldw	r2,24(r2)
 104d680:	10001426 	beq	r2,zero,104d6d4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 104d684:	e0bffb17 	ldw	r2,-20(fp)
 104d688:	10800017 	ldw	r2,0(r2)
 104d68c:	10800617 	ldw	r2,24(r2)
 104d690:	e0ffff17 	ldw	r3,-4(fp)
 104d694:	e13ffb17 	ldw	r4,-20(fp)
 104d698:	e17ffe17 	ldw	r5,-8(fp)
 104d69c:	180d883a 	mov	r6,r3
 104d6a0:	103ee83a 	callr	r2
 104d6a4:	e0bffc15 	stw	r2,-16(fp)
 104d6a8:	e0bffc17 	ldw	r2,-16(fp)
 104d6ac:	1000070e 	bge	r2,zero,104d6cc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 104d6b0:	104d5c80 	call	104d5c8 <alt_get_errno>
 104d6b4:	1007883a 	mov	r3,r2
 104d6b8:	e0bffc17 	ldw	r2,-16(fp)
 104d6bc:	0085c83a 	sub	r2,zero,r2
 104d6c0:	18800015 	stw	r2,0(r3)
        return -1;
 104d6c4:	00bfffc4 	movi	r2,-1
 104d6c8:	00000c06 	br	104d6fc <write+0xe4>
      }
      return rval;
 104d6cc:	e0bffc17 	ldw	r2,-16(fp)
 104d6d0:	00000a06 	br	104d6fc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 104d6d4:	104d5c80 	call	104d5c8 <alt_get_errno>
 104d6d8:	1007883a 	mov	r3,r2
 104d6dc:	00800344 	movi	r2,13
 104d6e0:	18800015 	stw	r2,0(r3)
 104d6e4:	00000406 	br	104d6f8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 104d6e8:	104d5c80 	call	104d5c8 <alt_get_errno>
 104d6ec:	1007883a 	mov	r3,r2
 104d6f0:	00801444 	movi	r2,81
 104d6f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 104d6f8:	00bfffc4 	movi	r2,-1
}
 104d6fc:	e037883a 	mov	sp,fp
 104d700:	dfc00117 	ldw	ra,4(sp)
 104d704:	df000017 	ldw	fp,0(sp)
 104d708:	dec00204 	addi	sp,sp,8
 104d70c:	f800283a 	ret

0104d710 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 104d710:	defffd04 	addi	sp,sp,-12
 104d714:	dfc00215 	stw	ra,8(sp)
 104d718:	df000115 	stw	fp,4(sp)
 104d71c:	df000104 	addi	fp,sp,4
 104d720:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 104d724:	e13fff17 	ldw	r4,-4(fp)
 104d728:	01404174 	movhi	r5,261
 104d72c:	29455704 	addi	r5,r5,5468
 104d730:	104e64c0 	call	104e64c <alt_dev_llist_insert>
}
 104d734:	e037883a 	mov	sp,fp
 104d738:	dfc00117 	ldw	ra,4(sp)
 104d73c:	df000017 	ldw	fp,0(sp)
 104d740:	dec00204 	addi	sp,sp,8
 104d744:	f800283a 	ret

0104d748 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 104d748:	defffd04 	addi	sp,sp,-12
 104d74c:	dfc00215 	stw	ra,8(sp)
 104d750:	df000115 	stw	fp,4(sp)
 104d754:	df000104 	addi	fp,sp,4
 104d758:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 104d75c:	104eff00 	call	104eff0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 104d760:	00800044 	movi	r2,1
 104d764:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 104d768:	e037883a 	mov	sp,fp
 104d76c:	dfc00117 	ldw	ra,4(sp)
 104d770:	df000017 	ldw	fp,0(sp)
 104d774:	dec00204 	addi	sp,sp,8
 104d778:	f800283a 	ret

0104d77c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 104d77c:	defffe04 	addi	sp,sp,-8
 104d780:	dfc00115 	stw	ra,4(sp)
 104d784:	df000015 	stw	fp,0(sp)
 104d788:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 104d78c:	0009883a 	mov	r4,zero
 104d790:	000b883a 	mov	r5,zero
 104d794:	01800084 	movi	r6,2
 104d798:	01c0fa04 	movi	r7,1000
 104d79c:	104e2980 	call	104e298 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 104d7a0:	01004174 	movhi	r4,261
 104d7a4:	21014104 	addi	r4,r4,1284
 104d7a8:	000b883a 	mov	r5,zero
 104d7ac:	000d883a 	mov	r6,zero
 104d7b0:	104d93c0 	call	104d93c <altera_avalon_jtag_uart_init>
 104d7b4:	01004174 	movhi	r4,261
 104d7b8:	21013704 	addi	r4,r4,1244
 104d7bc:	104d7100 	call	104d710 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 104d7c0:	0001883a 	nop
}
 104d7c4:	e037883a 	mov	sp,fp
 104d7c8:	dfc00117 	ldw	ra,4(sp)
 104d7cc:	df000017 	ldw	fp,0(sp)
 104d7d0:	dec00204 	addi	sp,sp,8
 104d7d4:	f800283a 	ret

0104d7d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 104d7d8:	defffa04 	addi	sp,sp,-24
 104d7dc:	dfc00515 	stw	ra,20(sp)
 104d7e0:	df000415 	stw	fp,16(sp)
 104d7e4:	df000404 	addi	fp,sp,16
 104d7e8:	e13ffd15 	stw	r4,-12(fp)
 104d7ec:	e17ffe15 	stw	r5,-8(fp)
 104d7f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 104d7f4:	e0bffd17 	ldw	r2,-12(fp)
 104d7f8:	10800017 	ldw	r2,0(r2)
 104d7fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 104d800:	e0bffc17 	ldw	r2,-16(fp)
 104d804:	10c00a04 	addi	r3,r2,40
 104d808:	e0bffd17 	ldw	r2,-12(fp)
 104d80c:	10800217 	ldw	r2,8(r2)
 104d810:	1809883a 	mov	r4,r3
 104d814:	e17ffe17 	ldw	r5,-8(fp)
 104d818:	e1bfff17 	ldw	r6,-4(fp)
 104d81c:	100f883a 	mov	r7,r2
 104d820:	104de000 	call	104de00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 104d824:	e037883a 	mov	sp,fp
 104d828:	dfc00117 	ldw	ra,4(sp)
 104d82c:	df000017 	ldw	fp,0(sp)
 104d830:	dec00204 	addi	sp,sp,8
 104d834:	f800283a 	ret

0104d838 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 104d838:	defffa04 	addi	sp,sp,-24
 104d83c:	dfc00515 	stw	ra,20(sp)
 104d840:	df000415 	stw	fp,16(sp)
 104d844:	df000404 	addi	fp,sp,16
 104d848:	e13ffd15 	stw	r4,-12(fp)
 104d84c:	e17ffe15 	stw	r5,-8(fp)
 104d850:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 104d854:	e0bffd17 	ldw	r2,-12(fp)
 104d858:	10800017 	ldw	r2,0(r2)
 104d85c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 104d860:	e0bffc17 	ldw	r2,-16(fp)
 104d864:	10c00a04 	addi	r3,r2,40
 104d868:	e0bffd17 	ldw	r2,-12(fp)
 104d86c:	10800217 	ldw	r2,8(r2)
 104d870:	1809883a 	mov	r4,r3
 104d874:	e17ffe17 	ldw	r5,-8(fp)
 104d878:	e1bfff17 	ldw	r6,-4(fp)
 104d87c:	100f883a 	mov	r7,r2
 104d880:	104e00c0 	call	104e00c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 104d884:	e037883a 	mov	sp,fp
 104d888:	dfc00117 	ldw	ra,4(sp)
 104d88c:	df000017 	ldw	fp,0(sp)
 104d890:	dec00204 	addi	sp,sp,8
 104d894:	f800283a 	ret

0104d898 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 104d898:	defffc04 	addi	sp,sp,-16
 104d89c:	dfc00315 	stw	ra,12(sp)
 104d8a0:	df000215 	stw	fp,8(sp)
 104d8a4:	df000204 	addi	fp,sp,8
 104d8a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 104d8ac:	e0bfff17 	ldw	r2,-4(fp)
 104d8b0:	10800017 	ldw	r2,0(r2)
 104d8b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 104d8b8:	e0bffe17 	ldw	r2,-8(fp)
 104d8bc:	10c00a04 	addi	r3,r2,40
 104d8c0:	e0bfff17 	ldw	r2,-4(fp)
 104d8c4:	10800217 	ldw	r2,8(r2)
 104d8c8:	1809883a 	mov	r4,r3
 104d8cc:	100b883a 	mov	r5,r2
 104d8d0:	104dcac0 	call	104dcac <altera_avalon_jtag_uart_close>
}
 104d8d4:	e037883a 	mov	sp,fp
 104d8d8:	dfc00117 	ldw	ra,4(sp)
 104d8dc:	df000017 	ldw	fp,0(sp)
 104d8e0:	dec00204 	addi	sp,sp,8
 104d8e4:	f800283a 	ret

0104d8e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 104d8e8:	defffa04 	addi	sp,sp,-24
 104d8ec:	dfc00515 	stw	ra,20(sp)
 104d8f0:	df000415 	stw	fp,16(sp)
 104d8f4:	df000404 	addi	fp,sp,16
 104d8f8:	e13ffd15 	stw	r4,-12(fp)
 104d8fc:	e17ffe15 	stw	r5,-8(fp)
 104d900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 104d904:	e0bffd17 	ldw	r2,-12(fp)
 104d908:	10800017 	ldw	r2,0(r2)
 104d90c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 104d910:	e0bffc17 	ldw	r2,-16(fp)
 104d914:	10800a04 	addi	r2,r2,40
 104d918:	1009883a 	mov	r4,r2
 104d91c:	e17ffe17 	ldw	r5,-8(fp)
 104d920:	e1bfff17 	ldw	r6,-4(fp)
 104d924:	104dd140 	call	104dd14 <altera_avalon_jtag_uart_ioctl>
}
 104d928:	e037883a 	mov	sp,fp
 104d92c:	dfc00117 	ldw	ra,4(sp)
 104d930:	df000017 	ldw	fp,0(sp)
 104d934:	dec00204 	addi	sp,sp,8
 104d938:	f800283a 	ret

0104d93c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 104d93c:	defffa04 	addi	sp,sp,-24
 104d940:	dfc00515 	stw	ra,20(sp)
 104d944:	df000415 	stw	fp,16(sp)
 104d948:	df000404 	addi	fp,sp,16
 104d94c:	e13ffd15 	stw	r4,-12(fp)
 104d950:	e17ffe15 	stw	r5,-8(fp)
 104d954:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 104d958:	e0bffd17 	ldw	r2,-12(fp)
 104d95c:	00c00044 	movi	r3,1
 104d960:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 104d964:	e0bffd17 	ldw	r2,-12(fp)
 104d968:	10800017 	ldw	r2,0(r2)
 104d96c:	10800104 	addi	r2,r2,4
 104d970:	1007883a 	mov	r3,r2
 104d974:	e0bffd17 	ldw	r2,-12(fp)
 104d978:	10800817 	ldw	r2,32(r2)
 104d97c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 104d980:	e0fffe17 	ldw	r3,-8(fp)
 104d984:	e0bfff17 	ldw	r2,-4(fp)
 104d988:	d8000015 	stw	zero,0(sp)
 104d98c:	1809883a 	mov	r4,r3
 104d990:	100b883a 	mov	r5,r2
 104d994:	01804174 	movhi	r6,261
 104d998:	31b68004 	addi	r6,r6,-9728
 104d99c:	e1fffd17 	ldw	r7,-12(fp)
 104d9a0:	104e7d80 	call	104e7d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 104d9a4:	e0bffd17 	ldw	r2,-12(fp)
 104d9a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 104d9ac:	e0bffd17 	ldw	r2,-12(fp)
 104d9b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 104d9b4:	00804174 	movhi	r2,261
 104d9b8:	108c2504 	addi	r2,r2,12436
 104d9bc:	10800017 	ldw	r2,0(r2)
 104d9c0:	1809883a 	mov	r4,r3
 104d9c4:	100b883a 	mov	r5,r2
 104d9c8:	01804174 	movhi	r6,261
 104d9cc:	31b70104 	addi	r6,r6,-9212
 104d9d0:	e1fffd17 	ldw	r7,-12(fp)
 104d9d4:	104e3200 	call	104e320 <alt_alarm_start>
 104d9d8:	1000040e 	bge	r2,zero,104d9ec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 104d9dc:	e0fffd17 	ldw	r3,-12(fp)
 104d9e0:	00a00034 	movhi	r2,32768
 104d9e4:	10bfffc4 	addi	r2,r2,-1
 104d9e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 104d9ec:	e037883a 	mov	sp,fp
 104d9f0:	dfc00117 	ldw	ra,4(sp)
 104d9f4:	df000017 	ldw	fp,0(sp)
 104d9f8:	dec00204 	addi	sp,sp,8
 104d9fc:	f800283a 	ret

0104da00 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 104da00:	defff804 	addi	sp,sp,-32
 104da04:	df000715 	stw	fp,28(sp)
 104da08:	df000704 	addi	fp,sp,28
 104da0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 104da10:	e0bfff17 	ldw	r2,-4(fp)
 104da14:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 104da18:	e0bffb17 	ldw	r2,-20(fp)
 104da1c:	10800017 	ldw	r2,0(r2)
 104da20:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 104da24:	e0bffc17 	ldw	r2,-16(fp)
 104da28:	10800104 	addi	r2,r2,4
 104da2c:	10800037 	ldwio	r2,0(r2)
 104da30:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 104da34:	e0bffd17 	ldw	r2,-12(fp)
 104da38:	1080c00c 	andi	r2,r2,768
 104da3c:	1000011e 	bne	r2,zero,104da44 <altera_avalon_jtag_uart_irq+0x44>
      break;
 104da40:	00006c06 	br	104dbf4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 104da44:	e0bffd17 	ldw	r2,-12(fp)
 104da48:	1080400c 	andi	r2,r2,256
 104da4c:	10003426 	beq	r2,zero,104db20 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 104da50:	00800074 	movhi	r2,1
 104da54:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 104da58:	e0bffb17 	ldw	r2,-20(fp)
 104da5c:	10800a17 	ldw	r2,40(r2)
 104da60:	10800044 	addi	r2,r2,1
 104da64:	1081ffcc 	andi	r2,r2,2047
 104da68:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 104da6c:	e0bffb17 	ldw	r2,-20(fp)
 104da70:	10c00b17 	ldw	r3,44(r2)
 104da74:	e0bffe17 	ldw	r2,-8(fp)
 104da78:	1880011e 	bne	r3,r2,104da80 <altera_avalon_jtag_uart_irq+0x80>
          break;
 104da7c:	00001606 	br	104dad8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 104da80:	e0bffc17 	ldw	r2,-16(fp)
 104da84:	10800037 	ldwio	r2,0(r2)
 104da88:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 104da8c:	e0bff917 	ldw	r2,-28(fp)
 104da90:	10a0000c 	andi	r2,r2,32768
 104da94:	1000011e 	bne	r2,zero,104da9c <altera_avalon_jtag_uart_irq+0x9c>
          break;
 104da98:	00000f06 	br	104dad8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 104da9c:	e0bffb17 	ldw	r2,-20(fp)
 104daa0:	10800a17 	ldw	r2,40(r2)
 104daa4:	e0fff917 	ldw	r3,-28(fp)
 104daa8:	1809883a 	mov	r4,r3
 104daac:	e0fffb17 	ldw	r3,-20(fp)
 104dab0:	1885883a 	add	r2,r3,r2
 104dab4:	10800e04 	addi	r2,r2,56
 104dab8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 104dabc:	e0bffb17 	ldw	r2,-20(fp)
 104dac0:	10800a17 	ldw	r2,40(r2)
 104dac4:	10800044 	addi	r2,r2,1
 104dac8:	10c1ffcc 	andi	r3,r2,2047
 104dacc:	e0bffb17 	ldw	r2,-20(fp)
 104dad0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 104dad4:	003fe006 	br	104da58 <__alt_data_end+0xfffeda58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 104dad8:	e0bff917 	ldw	r2,-28(fp)
 104dadc:	10bfffec 	andhi	r2,r2,65535
 104dae0:	10000f26 	beq	r2,zero,104db20 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 104dae4:	e0bffb17 	ldw	r2,-20(fp)
 104dae8:	10c00817 	ldw	r3,32(r2)
 104daec:	00bfff84 	movi	r2,-2
 104daf0:	1886703a 	and	r3,r3,r2
 104daf4:	e0bffb17 	ldw	r2,-20(fp)
 104daf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 104dafc:	e0bffc17 	ldw	r2,-16(fp)
 104db00:	10800104 	addi	r2,r2,4
 104db04:	1007883a 	mov	r3,r2
 104db08:	e0bffb17 	ldw	r2,-20(fp)
 104db0c:	10800817 	ldw	r2,32(r2)
 104db10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 104db14:	e0bffc17 	ldw	r2,-16(fp)
 104db18:	10800104 	addi	r2,r2,4
 104db1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 104db20:	e0bffd17 	ldw	r2,-12(fp)
 104db24:	1080800c 	andi	r2,r2,512
 104db28:	10003126 	beq	r2,zero,104dbf0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 104db2c:	e0bffd17 	ldw	r2,-12(fp)
 104db30:	1004d43a 	srli	r2,r2,16
 104db34:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 104db38:	00001406 	br	104db8c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 104db3c:	e0bffc17 	ldw	r2,-16(fp)
 104db40:	e0fffb17 	ldw	r3,-20(fp)
 104db44:	18c00d17 	ldw	r3,52(r3)
 104db48:	e13ffb17 	ldw	r4,-20(fp)
 104db4c:	20c7883a 	add	r3,r4,r3
 104db50:	18c20e04 	addi	r3,r3,2104
 104db54:	18c00003 	ldbu	r3,0(r3)
 104db58:	18c03fcc 	andi	r3,r3,255
 104db5c:	18c0201c 	xori	r3,r3,128
 104db60:	18ffe004 	addi	r3,r3,-128
 104db64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 104db68:	e0bffb17 	ldw	r2,-20(fp)
 104db6c:	10800d17 	ldw	r2,52(r2)
 104db70:	10800044 	addi	r2,r2,1
 104db74:	10c1ffcc 	andi	r3,r2,2047
 104db78:	e0bffb17 	ldw	r2,-20(fp)
 104db7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 104db80:	e0bffa17 	ldw	r2,-24(fp)
 104db84:	10bfffc4 	addi	r2,r2,-1
 104db88:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 104db8c:	e0bffa17 	ldw	r2,-24(fp)
 104db90:	10000526 	beq	r2,zero,104dba8 <altera_avalon_jtag_uart_irq+0x1a8>
 104db94:	e0bffb17 	ldw	r2,-20(fp)
 104db98:	10c00d17 	ldw	r3,52(r2)
 104db9c:	e0bffb17 	ldw	r2,-20(fp)
 104dba0:	10800c17 	ldw	r2,48(r2)
 104dba4:	18bfe51e 	bne	r3,r2,104db3c <__alt_data_end+0xfffedb3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 104dba8:	e0bffa17 	ldw	r2,-24(fp)
 104dbac:	10001026 	beq	r2,zero,104dbf0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 104dbb0:	e0bffb17 	ldw	r2,-20(fp)
 104dbb4:	10c00817 	ldw	r3,32(r2)
 104dbb8:	00bfff44 	movi	r2,-3
 104dbbc:	1886703a 	and	r3,r3,r2
 104dbc0:	e0bffb17 	ldw	r2,-20(fp)
 104dbc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 104dbc8:	e0bffb17 	ldw	r2,-20(fp)
 104dbcc:	10800017 	ldw	r2,0(r2)
 104dbd0:	10800104 	addi	r2,r2,4
 104dbd4:	1007883a 	mov	r3,r2
 104dbd8:	e0bffb17 	ldw	r2,-20(fp)
 104dbdc:	10800817 	ldw	r2,32(r2)
 104dbe0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 104dbe4:	e0bffc17 	ldw	r2,-16(fp)
 104dbe8:	10800104 	addi	r2,r2,4
 104dbec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 104dbf0:	003f8c06 	br	104da24 <__alt_data_end+0xfffeda24>
}
 104dbf4:	e037883a 	mov	sp,fp
 104dbf8:	df000017 	ldw	fp,0(sp)
 104dbfc:	dec00104 	addi	sp,sp,4
 104dc00:	f800283a 	ret

0104dc04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 104dc04:	defff804 	addi	sp,sp,-32
 104dc08:	df000715 	stw	fp,28(sp)
 104dc0c:	df000704 	addi	fp,sp,28
 104dc10:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 104dc14:	e0bffb17 	ldw	r2,-20(fp)
 104dc18:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 104dc1c:	e0bff917 	ldw	r2,-28(fp)
 104dc20:	10800017 	ldw	r2,0(r2)
 104dc24:	10800104 	addi	r2,r2,4
 104dc28:	10800037 	ldwio	r2,0(r2)
 104dc2c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 104dc30:	e0bffa17 	ldw	r2,-24(fp)
 104dc34:	1081000c 	andi	r2,r2,1024
 104dc38:	10000b26 	beq	r2,zero,104dc68 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 104dc3c:	e0bff917 	ldw	r2,-28(fp)
 104dc40:	10800017 	ldw	r2,0(r2)
 104dc44:	10800104 	addi	r2,r2,4
 104dc48:	1007883a 	mov	r3,r2
 104dc4c:	e0bff917 	ldw	r2,-28(fp)
 104dc50:	10800817 	ldw	r2,32(r2)
 104dc54:	10810014 	ori	r2,r2,1024
 104dc58:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 104dc5c:	e0bff917 	ldw	r2,-28(fp)
 104dc60:	10000915 	stw	zero,36(r2)
 104dc64:	00000a06 	br	104dc90 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 104dc68:	e0bff917 	ldw	r2,-28(fp)
 104dc6c:	10c00917 	ldw	r3,36(r2)
 104dc70:	00a00034 	movhi	r2,32768
 104dc74:	10bfff04 	addi	r2,r2,-4
 104dc78:	10c00536 	bltu	r2,r3,104dc90 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 104dc7c:	e0bff917 	ldw	r2,-28(fp)
 104dc80:	10800917 	ldw	r2,36(r2)
 104dc84:	10c00044 	addi	r3,r2,1
 104dc88:	e0bff917 	ldw	r2,-28(fp)
 104dc8c:	10c00915 	stw	r3,36(r2)
 104dc90:	00804174 	movhi	r2,261
 104dc94:	108c2504 	addi	r2,r2,12436
 104dc98:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 104dc9c:	e037883a 	mov	sp,fp
 104dca0:	df000017 	ldw	fp,0(sp)
 104dca4:	dec00104 	addi	sp,sp,4
 104dca8:	f800283a 	ret

0104dcac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 104dcac:	defffd04 	addi	sp,sp,-12
 104dcb0:	df000215 	stw	fp,8(sp)
 104dcb4:	df000204 	addi	fp,sp,8
 104dcb8:	e13ffe15 	stw	r4,-8(fp)
 104dcbc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 104dcc0:	00000506 	br	104dcd8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 104dcc4:	e0bfff17 	ldw	r2,-4(fp)
 104dcc8:	1090000c 	andi	r2,r2,16384
 104dccc:	10000226 	beq	r2,zero,104dcd8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 104dcd0:	00bffd44 	movi	r2,-11
 104dcd4:	00000b06 	br	104dd04 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 104dcd8:	e0bffe17 	ldw	r2,-8(fp)
 104dcdc:	10c00d17 	ldw	r3,52(r2)
 104dce0:	e0bffe17 	ldw	r2,-8(fp)
 104dce4:	10800c17 	ldw	r2,48(r2)
 104dce8:	18800526 	beq	r3,r2,104dd00 <altera_avalon_jtag_uart_close+0x54>
 104dcec:	e0bffe17 	ldw	r2,-8(fp)
 104dcf0:	10c00917 	ldw	r3,36(r2)
 104dcf4:	e0bffe17 	ldw	r2,-8(fp)
 104dcf8:	10800117 	ldw	r2,4(r2)
 104dcfc:	18bff136 	bltu	r3,r2,104dcc4 <__alt_data_end+0xfffedcc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 104dd00:	0005883a 	mov	r2,zero
}
 104dd04:	e037883a 	mov	sp,fp
 104dd08:	df000017 	ldw	fp,0(sp)
 104dd0c:	dec00104 	addi	sp,sp,4
 104dd10:	f800283a 	ret

0104dd14 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 104dd14:	defffa04 	addi	sp,sp,-24
 104dd18:	df000515 	stw	fp,20(sp)
 104dd1c:	df000504 	addi	fp,sp,20
 104dd20:	e13ffd15 	stw	r4,-12(fp)
 104dd24:	e17ffe15 	stw	r5,-8(fp)
 104dd28:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 104dd2c:	00bff9c4 	movi	r2,-25
 104dd30:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 104dd34:	e0bffe17 	ldw	r2,-8(fp)
 104dd38:	10da8060 	cmpeqi	r3,r2,27137
 104dd3c:	1800031e 	bne	r3,zero,104dd4c <altera_avalon_jtag_uart_ioctl+0x38>
 104dd40:	109a80a0 	cmpeqi	r2,r2,27138
 104dd44:	1000191e 	bne	r2,zero,104ddac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 104dd48:	00002806 	br	104ddec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 104dd4c:	e0bffd17 	ldw	r2,-12(fp)
 104dd50:	10c00117 	ldw	r3,4(r2)
 104dd54:	00a00034 	movhi	r2,32768
 104dd58:	10bfffc4 	addi	r2,r2,-1
 104dd5c:	18801226 	beq	r3,r2,104dda8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 104dd60:	e0bfff17 	ldw	r2,-4(fp)
 104dd64:	10800017 	ldw	r2,0(r2)
 104dd68:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 104dd6c:	e0bffc17 	ldw	r2,-16(fp)
 104dd70:	10800090 	cmplti	r2,r2,2
 104dd74:	1000061e 	bne	r2,zero,104dd90 <altera_avalon_jtag_uart_ioctl+0x7c>
 104dd78:	e0fffc17 	ldw	r3,-16(fp)
 104dd7c:	00a00034 	movhi	r2,32768
 104dd80:	10bfffc4 	addi	r2,r2,-1
 104dd84:	18800226 	beq	r3,r2,104dd90 <altera_avalon_jtag_uart_ioctl+0x7c>
 104dd88:	e0bffc17 	ldw	r2,-16(fp)
 104dd8c:	00000206 	br	104dd98 <altera_avalon_jtag_uart_ioctl+0x84>
 104dd90:	00a00034 	movhi	r2,32768
 104dd94:	10bfff84 	addi	r2,r2,-2
 104dd98:	e0fffd17 	ldw	r3,-12(fp)
 104dd9c:	18800115 	stw	r2,4(r3)
      rc = 0;
 104dda0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 104dda4:	00001106 	br	104ddec <altera_avalon_jtag_uart_ioctl+0xd8>
 104dda8:	00001006 	br	104ddec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 104ddac:	e0bffd17 	ldw	r2,-12(fp)
 104ddb0:	10c00117 	ldw	r3,4(r2)
 104ddb4:	00a00034 	movhi	r2,32768
 104ddb8:	10bfffc4 	addi	r2,r2,-1
 104ddbc:	18800a26 	beq	r3,r2,104dde8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 104ddc0:	e0bffd17 	ldw	r2,-12(fp)
 104ddc4:	10c00917 	ldw	r3,36(r2)
 104ddc8:	e0bffd17 	ldw	r2,-12(fp)
 104ddcc:	10800117 	ldw	r2,4(r2)
 104ddd0:	1885803a 	cmpltu	r2,r3,r2
 104ddd4:	10c03fcc 	andi	r3,r2,255
 104ddd8:	e0bfff17 	ldw	r2,-4(fp)
 104dddc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 104dde0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 104dde4:	00000006 	br	104dde8 <altera_avalon_jtag_uart_ioctl+0xd4>
 104dde8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 104ddec:	e0bffb17 	ldw	r2,-20(fp)
}
 104ddf0:	e037883a 	mov	sp,fp
 104ddf4:	df000017 	ldw	fp,0(sp)
 104ddf8:	dec00104 	addi	sp,sp,4
 104ddfc:	f800283a 	ret

0104de00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 104de00:	defff304 	addi	sp,sp,-52
 104de04:	dfc00c15 	stw	ra,48(sp)
 104de08:	df000b15 	stw	fp,44(sp)
 104de0c:	df000b04 	addi	fp,sp,44
 104de10:	e13ffc15 	stw	r4,-16(fp)
 104de14:	e17ffd15 	stw	r5,-12(fp)
 104de18:	e1bffe15 	stw	r6,-8(fp)
 104de1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 104de20:	e0bffd17 	ldw	r2,-12(fp)
 104de24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 104de28:	00004906 	br	104df50 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 104de2c:	e0bffc17 	ldw	r2,-16(fp)
 104de30:	10800a17 	ldw	r2,40(r2)
 104de34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 104de38:	e0bffc17 	ldw	r2,-16(fp)
 104de3c:	10800b17 	ldw	r2,44(r2)
 104de40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 104de44:	e0fff717 	ldw	r3,-36(fp)
 104de48:	e0bff817 	ldw	r2,-32(fp)
 104de4c:	18800536 	bltu	r3,r2,104de64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 104de50:	e0fff717 	ldw	r3,-36(fp)
 104de54:	e0bff817 	ldw	r2,-32(fp)
 104de58:	1885c83a 	sub	r2,r3,r2
 104de5c:	e0bff615 	stw	r2,-40(fp)
 104de60:	00000406 	br	104de74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 104de64:	00c20004 	movi	r3,2048
 104de68:	e0bff817 	ldw	r2,-32(fp)
 104de6c:	1885c83a 	sub	r2,r3,r2
 104de70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 104de74:	e0bff617 	ldw	r2,-40(fp)
 104de78:	1000011e 	bne	r2,zero,104de80 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 104de7c:	00001d06 	br	104def4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 104de80:	e0fffe17 	ldw	r3,-8(fp)
 104de84:	e0bff617 	ldw	r2,-40(fp)
 104de88:	1880022e 	bgeu	r3,r2,104de94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 104de8c:	e0bffe17 	ldw	r2,-8(fp)
 104de90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 104de94:	e0bff817 	ldw	r2,-32(fp)
 104de98:	10800e04 	addi	r2,r2,56
 104de9c:	e0fffc17 	ldw	r3,-16(fp)
 104dea0:	1885883a 	add	r2,r3,r2
 104dea4:	e13ff517 	ldw	r4,-44(fp)
 104dea8:	100b883a 	mov	r5,r2
 104deac:	e1bff617 	ldw	r6,-40(fp)
 104deb0:	10461cc0 	call	10461cc <memcpy>
      ptr   += n;
 104deb4:	e0fff517 	ldw	r3,-44(fp)
 104deb8:	e0bff617 	ldw	r2,-40(fp)
 104debc:	1885883a 	add	r2,r3,r2
 104dec0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 104dec4:	e0fffe17 	ldw	r3,-8(fp)
 104dec8:	e0bff617 	ldw	r2,-40(fp)
 104decc:	1885c83a 	sub	r2,r3,r2
 104ded0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 104ded4:	e0fff817 	ldw	r3,-32(fp)
 104ded8:	e0bff617 	ldw	r2,-40(fp)
 104dedc:	1885883a 	add	r2,r3,r2
 104dee0:	10c1ffcc 	andi	r3,r2,2047
 104dee4:	e0bffc17 	ldw	r2,-16(fp)
 104dee8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 104deec:	e0bffe17 	ldw	r2,-8(fp)
 104def0:	00bfce16 	blt	zero,r2,104de2c <__alt_data_end+0xfffede2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 104def4:	e0fff517 	ldw	r3,-44(fp)
 104def8:	e0bffd17 	ldw	r2,-12(fp)
 104defc:	18800126 	beq	r3,r2,104df04 <altera_avalon_jtag_uart_read+0x104>
      break;
 104df00:	00001506 	br	104df58 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 104df04:	e0bfff17 	ldw	r2,-4(fp)
 104df08:	1090000c 	andi	r2,r2,16384
 104df0c:	10000126 	beq	r2,zero,104df14 <altera_avalon_jtag_uart_read+0x114>
      break;
 104df10:	00001106 	br	104df58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 104df14:	0001883a 	nop
 104df18:	e0bffc17 	ldw	r2,-16(fp)
 104df1c:	10c00a17 	ldw	r3,40(r2)
 104df20:	e0bff717 	ldw	r2,-36(fp)
 104df24:	1880051e 	bne	r3,r2,104df3c <altera_avalon_jtag_uart_read+0x13c>
 104df28:	e0bffc17 	ldw	r2,-16(fp)
 104df2c:	10c00917 	ldw	r3,36(r2)
 104df30:	e0bffc17 	ldw	r2,-16(fp)
 104df34:	10800117 	ldw	r2,4(r2)
 104df38:	18bff736 	bltu	r3,r2,104df18 <__alt_data_end+0xfffedf18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 104df3c:	e0bffc17 	ldw	r2,-16(fp)
 104df40:	10c00a17 	ldw	r3,40(r2)
 104df44:	e0bff717 	ldw	r2,-36(fp)
 104df48:	1880011e 	bne	r3,r2,104df50 <altera_avalon_jtag_uart_read+0x150>
      break;
 104df4c:	00000206 	br	104df58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 104df50:	e0bffe17 	ldw	r2,-8(fp)
 104df54:	00bfb516 	blt	zero,r2,104de2c <__alt_data_end+0xfffede2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 104df58:	e0fff517 	ldw	r3,-44(fp)
 104df5c:	e0bffd17 	ldw	r2,-12(fp)
 104df60:	18801826 	beq	r3,r2,104dfc4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104df64:	0005303a 	rdctl	r2,status
 104df68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104df6c:	e0fffa17 	ldw	r3,-24(fp)
 104df70:	00bfff84 	movi	r2,-2
 104df74:	1884703a 	and	r2,r3,r2
 104df78:	1001703a 	wrctl	status,r2
  
  return context;
 104df7c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 104df80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 104df84:	e0bffc17 	ldw	r2,-16(fp)
 104df88:	10800817 	ldw	r2,32(r2)
 104df8c:	10c00054 	ori	r3,r2,1
 104df90:	e0bffc17 	ldw	r2,-16(fp)
 104df94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 104df98:	e0bffc17 	ldw	r2,-16(fp)
 104df9c:	10800017 	ldw	r2,0(r2)
 104dfa0:	10800104 	addi	r2,r2,4
 104dfa4:	1007883a 	mov	r3,r2
 104dfa8:	e0bffc17 	ldw	r2,-16(fp)
 104dfac:	10800817 	ldw	r2,32(r2)
 104dfb0:	18800035 	stwio	r2,0(r3)
 104dfb4:	e0bff917 	ldw	r2,-28(fp)
 104dfb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104dfbc:	e0bffb17 	ldw	r2,-20(fp)
 104dfc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 104dfc4:	e0fff517 	ldw	r3,-44(fp)
 104dfc8:	e0bffd17 	ldw	r2,-12(fp)
 104dfcc:	18800426 	beq	r3,r2,104dfe0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 104dfd0:	e0fff517 	ldw	r3,-44(fp)
 104dfd4:	e0bffd17 	ldw	r2,-12(fp)
 104dfd8:	1885c83a 	sub	r2,r3,r2
 104dfdc:	00000606 	br	104dff8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 104dfe0:	e0bfff17 	ldw	r2,-4(fp)
 104dfe4:	1090000c 	andi	r2,r2,16384
 104dfe8:	10000226 	beq	r2,zero,104dff4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 104dfec:	00bffd44 	movi	r2,-11
 104dff0:	00000106 	br	104dff8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 104dff4:	00bffec4 	movi	r2,-5
}
 104dff8:	e037883a 	mov	sp,fp
 104dffc:	dfc00117 	ldw	ra,4(sp)
 104e000:	df000017 	ldw	fp,0(sp)
 104e004:	dec00204 	addi	sp,sp,8
 104e008:	f800283a 	ret

0104e00c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 104e00c:	defff304 	addi	sp,sp,-52
 104e010:	dfc00c15 	stw	ra,48(sp)
 104e014:	df000b15 	stw	fp,44(sp)
 104e018:	df000b04 	addi	fp,sp,44
 104e01c:	e13ffc15 	stw	r4,-16(fp)
 104e020:	e17ffd15 	stw	r5,-12(fp)
 104e024:	e1bffe15 	stw	r6,-8(fp)
 104e028:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 104e02c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 104e030:	e0bffd17 	ldw	r2,-12(fp)
 104e034:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 104e038:	00003806 	br	104e11c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 104e03c:	e0bffc17 	ldw	r2,-16(fp)
 104e040:	10800c17 	ldw	r2,48(r2)
 104e044:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 104e048:	e0bffc17 	ldw	r2,-16(fp)
 104e04c:	10800d17 	ldw	r2,52(r2)
 104e050:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 104e054:	e0fff817 	ldw	r3,-32(fp)
 104e058:	e0bff517 	ldw	r2,-44(fp)
 104e05c:	1880062e 	bgeu	r3,r2,104e078 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 104e060:	e0fff517 	ldw	r3,-44(fp)
 104e064:	e0bff817 	ldw	r2,-32(fp)
 104e068:	1885c83a 	sub	r2,r3,r2
 104e06c:	10bfffc4 	addi	r2,r2,-1
 104e070:	e0bff615 	stw	r2,-40(fp)
 104e074:	00000b06 	br	104e0a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 104e078:	e0bff517 	ldw	r2,-44(fp)
 104e07c:	10000526 	beq	r2,zero,104e094 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 104e080:	00c20004 	movi	r3,2048
 104e084:	e0bff817 	ldw	r2,-32(fp)
 104e088:	1885c83a 	sub	r2,r3,r2
 104e08c:	e0bff615 	stw	r2,-40(fp)
 104e090:	00000406 	br	104e0a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 104e094:	00c1ffc4 	movi	r3,2047
 104e098:	e0bff817 	ldw	r2,-32(fp)
 104e09c:	1885c83a 	sub	r2,r3,r2
 104e0a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 104e0a4:	e0bff617 	ldw	r2,-40(fp)
 104e0a8:	1000011e 	bne	r2,zero,104e0b0 <altera_avalon_jtag_uart_write+0xa4>
        break;
 104e0ac:	00001d06 	br	104e124 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 104e0b0:	e0fffe17 	ldw	r3,-8(fp)
 104e0b4:	e0bff617 	ldw	r2,-40(fp)
 104e0b8:	1880022e 	bgeu	r3,r2,104e0c4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 104e0bc:	e0bffe17 	ldw	r2,-8(fp)
 104e0c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 104e0c4:	e0bff817 	ldw	r2,-32(fp)
 104e0c8:	10820e04 	addi	r2,r2,2104
 104e0cc:	e0fffc17 	ldw	r3,-16(fp)
 104e0d0:	1885883a 	add	r2,r3,r2
 104e0d4:	1009883a 	mov	r4,r2
 104e0d8:	e17ffd17 	ldw	r5,-12(fp)
 104e0dc:	e1bff617 	ldw	r6,-40(fp)
 104e0e0:	10461cc0 	call	10461cc <memcpy>
      ptr   += n;
 104e0e4:	e0fffd17 	ldw	r3,-12(fp)
 104e0e8:	e0bff617 	ldw	r2,-40(fp)
 104e0ec:	1885883a 	add	r2,r3,r2
 104e0f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 104e0f4:	e0fffe17 	ldw	r3,-8(fp)
 104e0f8:	e0bff617 	ldw	r2,-40(fp)
 104e0fc:	1885c83a 	sub	r2,r3,r2
 104e100:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 104e104:	e0fff817 	ldw	r3,-32(fp)
 104e108:	e0bff617 	ldw	r2,-40(fp)
 104e10c:	1885883a 	add	r2,r3,r2
 104e110:	10c1ffcc 	andi	r3,r2,2047
 104e114:	e0bffc17 	ldw	r2,-16(fp)
 104e118:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 104e11c:	e0bffe17 	ldw	r2,-8(fp)
 104e120:	00bfc616 	blt	zero,r2,104e03c <__alt_data_end+0xfffee03c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e124:	0005303a 	rdctl	r2,status
 104e128:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e12c:	e0fffa17 	ldw	r3,-24(fp)
 104e130:	00bfff84 	movi	r2,-2
 104e134:	1884703a 	and	r2,r3,r2
 104e138:	1001703a 	wrctl	status,r2
  
  return context;
 104e13c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 104e140:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 104e144:	e0bffc17 	ldw	r2,-16(fp)
 104e148:	10800817 	ldw	r2,32(r2)
 104e14c:	10c00094 	ori	r3,r2,2
 104e150:	e0bffc17 	ldw	r2,-16(fp)
 104e154:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 104e158:	e0bffc17 	ldw	r2,-16(fp)
 104e15c:	10800017 	ldw	r2,0(r2)
 104e160:	10800104 	addi	r2,r2,4
 104e164:	1007883a 	mov	r3,r2
 104e168:	e0bffc17 	ldw	r2,-16(fp)
 104e16c:	10800817 	ldw	r2,32(r2)
 104e170:	18800035 	stwio	r2,0(r3)
 104e174:	e0bff917 	ldw	r2,-28(fp)
 104e178:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104e17c:	e0bffb17 	ldw	r2,-20(fp)
 104e180:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 104e184:	e0bffe17 	ldw	r2,-8(fp)
 104e188:	0080120e 	bge	zero,r2,104e1d4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 104e18c:	e0bfff17 	ldw	r2,-4(fp)
 104e190:	1090000c 	andi	r2,r2,16384
 104e194:	10000126 	beq	r2,zero,104e19c <altera_avalon_jtag_uart_write+0x190>
        break;
 104e198:	00001006 	br	104e1dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 104e19c:	0001883a 	nop
 104e1a0:	e0bffc17 	ldw	r2,-16(fp)
 104e1a4:	10c00d17 	ldw	r3,52(r2)
 104e1a8:	e0bff517 	ldw	r2,-44(fp)
 104e1ac:	1880051e 	bne	r3,r2,104e1c4 <altera_avalon_jtag_uart_write+0x1b8>
 104e1b0:	e0bffc17 	ldw	r2,-16(fp)
 104e1b4:	10c00917 	ldw	r3,36(r2)
 104e1b8:	e0bffc17 	ldw	r2,-16(fp)
 104e1bc:	10800117 	ldw	r2,4(r2)
 104e1c0:	18bff736 	bltu	r3,r2,104e1a0 <__alt_data_end+0xfffee1a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 104e1c4:	e0bffc17 	ldw	r2,-16(fp)
 104e1c8:	10800917 	ldw	r2,36(r2)
 104e1cc:	10000126 	beq	r2,zero,104e1d4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 104e1d0:	00000206 	br	104e1dc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 104e1d4:	e0bffe17 	ldw	r2,-8(fp)
 104e1d8:	00bf9716 	blt	zero,r2,104e038 <__alt_data_end+0xfffee038>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 104e1dc:	e0fffd17 	ldw	r3,-12(fp)
 104e1e0:	e0bff717 	ldw	r2,-36(fp)
 104e1e4:	18800426 	beq	r3,r2,104e1f8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 104e1e8:	e0fffd17 	ldw	r3,-12(fp)
 104e1ec:	e0bff717 	ldw	r2,-36(fp)
 104e1f0:	1885c83a 	sub	r2,r3,r2
 104e1f4:	00000606 	br	104e210 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 104e1f8:	e0bfff17 	ldw	r2,-4(fp)
 104e1fc:	1090000c 	andi	r2,r2,16384
 104e200:	10000226 	beq	r2,zero,104e20c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 104e204:	00bffd44 	movi	r2,-11
 104e208:	00000106 	br	104e210 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 104e20c:	00bffec4 	movi	r2,-5
}
 104e210:	e037883a 	mov	sp,fp
 104e214:	dfc00117 	ldw	ra,4(sp)
 104e218:	df000017 	ldw	fp,0(sp)
 104e21c:	dec00204 	addi	sp,sp,8
 104e220:	f800283a 	ret

0104e224 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 104e224:	defffa04 	addi	sp,sp,-24
 104e228:	dfc00515 	stw	ra,20(sp)
 104e22c:	df000415 	stw	fp,16(sp)
 104e230:	df000404 	addi	fp,sp,16
 104e234:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 104e238:	0007883a 	mov	r3,zero
 104e23c:	e0bfff17 	ldw	r2,-4(fp)
 104e240:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 104e244:	e0bfff17 	ldw	r2,-4(fp)
 104e248:	10800104 	addi	r2,r2,4
 104e24c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e250:	0005303a 	rdctl	r2,status
 104e254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e258:	e0fffd17 	ldw	r3,-12(fp)
 104e25c:	00bfff84 	movi	r2,-2
 104e260:	1884703a 	and	r2,r3,r2
 104e264:	1001703a 	wrctl	status,r2
  
  return context;
 104e268:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 104e26c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 104e270:	104eeec0 	call	104eeec <alt_tick>
 104e274:	e0bffc17 	ldw	r2,-16(fp)
 104e278:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104e27c:	e0bffe17 	ldw	r2,-8(fp)
 104e280:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 104e284:	e037883a 	mov	sp,fp
 104e288:	dfc00117 	ldw	ra,4(sp)
 104e28c:	df000017 	ldw	fp,0(sp)
 104e290:	dec00204 	addi	sp,sp,8
 104e294:	f800283a 	ret

0104e298 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 104e298:	defff804 	addi	sp,sp,-32
 104e29c:	dfc00715 	stw	ra,28(sp)
 104e2a0:	df000615 	stw	fp,24(sp)
 104e2a4:	df000604 	addi	fp,sp,24
 104e2a8:	e13ffc15 	stw	r4,-16(fp)
 104e2ac:	e17ffd15 	stw	r5,-12(fp)
 104e2b0:	e1bffe15 	stw	r6,-8(fp)
 104e2b4:	e1ffff15 	stw	r7,-4(fp)
 104e2b8:	e0bfff17 	ldw	r2,-4(fp)
 104e2bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 104e2c0:	00804174 	movhi	r2,261
 104e2c4:	108c2504 	addi	r2,r2,12436
 104e2c8:	10800017 	ldw	r2,0(r2)
 104e2cc:	1000041e 	bne	r2,zero,104e2e0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 104e2d0:	00804174 	movhi	r2,261
 104e2d4:	108c2504 	addi	r2,r2,12436
 104e2d8:	e0fffb17 	ldw	r3,-20(fp)
 104e2dc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 104e2e0:	e0bffc17 	ldw	r2,-16(fp)
 104e2e4:	10800104 	addi	r2,r2,4
 104e2e8:	00c001c4 	movi	r3,7
 104e2ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 104e2f0:	d8000015 	stw	zero,0(sp)
 104e2f4:	e13ffd17 	ldw	r4,-12(fp)
 104e2f8:	e17ffe17 	ldw	r5,-8(fp)
 104e2fc:	01804174 	movhi	r6,261
 104e300:	31b88904 	addi	r6,r6,-7644
 104e304:	e1fffc17 	ldw	r7,-16(fp)
 104e308:	104e7d80 	call	104e7d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 104e30c:	e037883a 	mov	sp,fp
 104e310:	dfc00117 	ldw	ra,4(sp)
 104e314:	df000017 	ldw	fp,0(sp)
 104e318:	dec00204 	addi	sp,sp,8
 104e31c:	f800283a 	ret

0104e320 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 104e320:	defff504 	addi	sp,sp,-44
 104e324:	df000a15 	stw	fp,40(sp)
 104e328:	df000a04 	addi	fp,sp,40
 104e32c:	e13ffc15 	stw	r4,-16(fp)
 104e330:	e17ffd15 	stw	r5,-12(fp)
 104e334:	e1bffe15 	stw	r6,-8(fp)
 104e338:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 104e33c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 104e340:	00804174 	movhi	r2,261
 104e344:	108c2504 	addi	r2,r2,12436
 104e348:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 104e34c:	10003f26 	beq	r2,zero,104e44c <alt_alarm_start+0x12c>
  {
    if (alarm)
 104e350:	e0bffc17 	ldw	r2,-16(fp)
 104e354:	10003b26 	beq	r2,zero,104e444 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 104e358:	e0bffc17 	ldw	r2,-16(fp)
 104e35c:	e0fffe17 	ldw	r3,-8(fp)
 104e360:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 104e364:	e0bffc17 	ldw	r2,-16(fp)
 104e368:	e0ffff17 	ldw	r3,-4(fp)
 104e36c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e370:	0005303a 	rdctl	r2,status
 104e374:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e378:	e0fff817 	ldw	r3,-32(fp)
 104e37c:	00bfff84 	movi	r2,-2
 104e380:	1884703a 	and	r2,r3,r2
 104e384:	1001703a 	wrctl	status,r2
  
  return context;
 104e388:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 104e38c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 104e390:	00804174 	movhi	r2,261
 104e394:	108c2604 	addi	r2,r2,12440
 104e398:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 104e39c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 104e3a0:	e0fffd17 	ldw	r3,-12(fp)
 104e3a4:	e0bff617 	ldw	r2,-40(fp)
 104e3a8:	1885883a 	add	r2,r3,r2
 104e3ac:	10c00044 	addi	r3,r2,1
 104e3b0:	e0bffc17 	ldw	r2,-16(fp)
 104e3b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 104e3b8:	e0bffc17 	ldw	r2,-16(fp)
 104e3bc:	10c00217 	ldw	r3,8(r2)
 104e3c0:	e0bff617 	ldw	r2,-40(fp)
 104e3c4:	1880042e 	bgeu	r3,r2,104e3d8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 104e3c8:	e0bffc17 	ldw	r2,-16(fp)
 104e3cc:	00c00044 	movi	r3,1
 104e3d0:	10c00405 	stb	r3,16(r2)
 104e3d4:	00000206 	br	104e3e0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 104e3d8:	e0bffc17 	ldw	r2,-16(fp)
 104e3dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 104e3e0:	e0fffc17 	ldw	r3,-16(fp)
 104e3e4:	00804174 	movhi	r2,261
 104e3e8:	10855d04 	addi	r2,r2,5492
 104e3ec:	e0bff915 	stw	r2,-28(fp)
 104e3f0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 104e3f4:	e0bffa17 	ldw	r2,-24(fp)
 104e3f8:	e0fff917 	ldw	r3,-28(fp)
 104e3fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 104e400:	e0bff917 	ldw	r2,-28(fp)
 104e404:	10c00017 	ldw	r3,0(r2)
 104e408:	e0bffa17 	ldw	r2,-24(fp)
 104e40c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 104e410:	e0bff917 	ldw	r2,-28(fp)
 104e414:	10800017 	ldw	r2,0(r2)
 104e418:	e0fffa17 	ldw	r3,-24(fp)
 104e41c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 104e420:	e0bff917 	ldw	r2,-28(fp)
 104e424:	e0fffa17 	ldw	r3,-24(fp)
 104e428:	10c00015 	stw	r3,0(r2)
 104e42c:	e0bff717 	ldw	r2,-36(fp)
 104e430:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104e434:	e0bffb17 	ldw	r2,-20(fp)
 104e438:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 104e43c:	0005883a 	mov	r2,zero
 104e440:	00000306 	br	104e450 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 104e444:	00bffa84 	movi	r2,-22
 104e448:	00000106 	br	104e450 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 104e44c:	00bfde84 	movi	r2,-134
  }
}
 104e450:	e037883a 	mov	sp,fp
 104e454:	df000017 	ldw	fp,0(sp)
 104e458:	dec00104 	addi	sp,sp,4
 104e45c:	f800283a 	ret

0104e460 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 104e460:	defffa04 	addi	sp,sp,-24
 104e464:	dfc00515 	stw	ra,20(sp)
 104e468:	df000415 	stw	fp,16(sp)
 104e46c:	df000404 	addi	fp,sp,16
 104e470:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 104e474:	008000c4 	movi	r2,3
 104e478:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 104e47c:	e0fffd17 	ldw	r3,-12(fp)
 104e480:	008003f4 	movhi	r2,15
 104e484:	10909004 	addi	r2,r2,16960
 104e488:	1885383a 	mul	r2,r3,r2
 104e48c:	01017db4 	movhi	r4,1526
 104e490:	21384004 	addi	r4,r4,-7936
 104e494:	100b883a 	mov	r5,r2
 104e498:	104a7900 	call	104a790 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 104e49c:	01200034 	movhi	r4,32768
 104e4a0:	213fffc4 	addi	r4,r4,-1
 104e4a4:	100b883a 	mov	r5,r2
 104e4a8:	104a7900 	call	104a790 <__udivsi3>
 104e4ac:	e13fff17 	ldw	r4,-4(fp)
 104e4b0:	100b883a 	mov	r5,r2
 104e4b4:	104a7900 	call	104a790 <__udivsi3>
 104e4b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 104e4bc:	e0bffe17 	ldw	r2,-8(fp)
 104e4c0:	10002a26 	beq	r2,zero,104e56c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 104e4c4:	e03ffc15 	stw	zero,-16(fp)
 104e4c8:	00001706 	br	104e528 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 104e4cc:	00a00034 	movhi	r2,32768
 104e4d0:	10bfffc4 	addi	r2,r2,-1
 104e4d4:	10bfffc4 	addi	r2,r2,-1
 104e4d8:	103ffe1e 	bne	r2,zero,104e4d4 <__alt_data_end+0xfffee4d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 104e4dc:	e0fffd17 	ldw	r3,-12(fp)
 104e4e0:	008003f4 	movhi	r2,15
 104e4e4:	10909004 	addi	r2,r2,16960
 104e4e8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 104e4ec:	01017db4 	movhi	r4,1526
 104e4f0:	21384004 	addi	r4,r4,-7936
 104e4f4:	100b883a 	mov	r5,r2
 104e4f8:	104a7900 	call	104a790 <__udivsi3>
 104e4fc:	01200034 	movhi	r4,32768
 104e500:	213fffc4 	addi	r4,r4,-1
 104e504:	100b883a 	mov	r5,r2
 104e508:	104a7900 	call	104a790 <__udivsi3>
 104e50c:	1007883a 	mov	r3,r2
 104e510:	e0bfff17 	ldw	r2,-4(fp)
 104e514:	10c5c83a 	sub	r2,r2,r3
 104e518:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 104e51c:	e0bffc17 	ldw	r2,-16(fp)
 104e520:	10800044 	addi	r2,r2,1
 104e524:	e0bffc15 	stw	r2,-16(fp)
 104e528:	e0fffc17 	ldw	r3,-16(fp)
 104e52c:	e0bffe17 	ldw	r2,-8(fp)
 104e530:	18bfe616 	blt	r3,r2,104e4cc <__alt_data_end+0xfffee4cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 104e534:	e0fffd17 	ldw	r3,-12(fp)
 104e538:	008003f4 	movhi	r2,15
 104e53c:	10909004 	addi	r2,r2,16960
 104e540:	1885383a 	mul	r2,r3,r2
 104e544:	01017db4 	movhi	r4,1526
 104e548:	21384004 	addi	r4,r4,-7936
 104e54c:	100b883a 	mov	r5,r2
 104e550:	104a7900 	call	104a790 <__udivsi3>
 104e554:	1007883a 	mov	r3,r2
 104e558:	e0bfff17 	ldw	r2,-4(fp)
 104e55c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 104e560:	10bfffc4 	addi	r2,r2,-1
 104e564:	103ffe1e 	bne	r2,zero,104e560 <__alt_data_end+0xfffee560>
 104e568:	00000d06 	br	104e5a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 104e56c:	e0fffd17 	ldw	r3,-12(fp)
 104e570:	008003f4 	movhi	r2,15
 104e574:	10909004 	addi	r2,r2,16960
 104e578:	1885383a 	mul	r2,r3,r2
 104e57c:	01017db4 	movhi	r4,1526
 104e580:	21384004 	addi	r4,r4,-7936
 104e584:	100b883a 	mov	r5,r2
 104e588:	104a7900 	call	104a790 <__udivsi3>
 104e58c:	1007883a 	mov	r3,r2
 104e590:	e0bfff17 	ldw	r2,-4(fp)
 104e594:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 104e598:	10bfffc4 	addi	r2,r2,-1
 104e59c:	00bffe16 	blt	zero,r2,104e598 <__alt_data_end+0xfffee598>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 104e5a0:	0005883a 	mov	r2,zero
}
 104e5a4:	e037883a 	mov	sp,fp
 104e5a8:	dfc00117 	ldw	ra,4(sp)
 104e5ac:	df000017 	ldw	fp,0(sp)
 104e5b0:	dec00204 	addi	sp,sp,8
 104e5b4:	f800283a 	ret

0104e5b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 104e5b8:	defffe04 	addi	sp,sp,-8
 104e5bc:	df000115 	stw	fp,4(sp)
 104e5c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 104e5c4:	e03fff15 	stw	zero,-4(fp)
 104e5c8:	00000506 	br	104e5e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 104e5cc:	e0bfff17 	ldw	r2,-4(fp)
 104e5d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 104e5d4:	e0bfff17 	ldw	r2,-4(fp)
 104e5d8:	10800804 	addi	r2,r2,32
 104e5dc:	e0bfff15 	stw	r2,-4(fp)
 104e5e0:	e0bfff17 	ldw	r2,-4(fp)
 104e5e4:	10820030 	cmpltui	r2,r2,2048
 104e5e8:	103ff81e 	bne	r2,zero,104e5cc <__alt_data_end+0xfffee5cc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 104e5ec:	e037883a 	mov	sp,fp
 104e5f0:	df000017 	ldw	fp,0(sp)
 104e5f4:	dec00104 	addi	sp,sp,4
 104e5f8:	f800283a 	ret

0104e5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104e5fc:	defffe04 	addi	sp,sp,-8
 104e600:	dfc00115 	stw	ra,4(sp)
 104e604:	df000015 	stw	fp,0(sp)
 104e608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104e60c:	00804174 	movhi	r2,261
 104e610:	10855a04 	addi	r2,r2,5480
 104e614:	10800017 	ldw	r2,0(r2)
 104e618:	10000526 	beq	r2,zero,104e630 <alt_get_errno+0x34>
 104e61c:	00804174 	movhi	r2,261
 104e620:	10855a04 	addi	r2,r2,5480
 104e624:	10800017 	ldw	r2,0(r2)
 104e628:	103ee83a 	callr	r2
 104e62c:	00000206 	br	104e638 <alt_get_errno+0x3c>
 104e630:	00804174 	movhi	r2,261
 104e634:	108c2004 	addi	r2,r2,12416
}
 104e638:	e037883a 	mov	sp,fp
 104e63c:	dfc00117 	ldw	ra,4(sp)
 104e640:	df000017 	ldw	fp,0(sp)
 104e644:	dec00204 	addi	sp,sp,8
 104e648:	f800283a 	ret

0104e64c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 104e64c:	defffa04 	addi	sp,sp,-24
 104e650:	dfc00515 	stw	ra,20(sp)
 104e654:	df000415 	stw	fp,16(sp)
 104e658:	df000404 	addi	fp,sp,16
 104e65c:	e13ffe15 	stw	r4,-8(fp)
 104e660:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 104e664:	e0bffe17 	ldw	r2,-8(fp)
 104e668:	10000326 	beq	r2,zero,104e678 <alt_dev_llist_insert+0x2c>
 104e66c:	e0bffe17 	ldw	r2,-8(fp)
 104e670:	10800217 	ldw	r2,8(r2)
 104e674:	1000061e 	bne	r2,zero,104e690 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 104e678:	104e5fc0 	call	104e5fc <alt_get_errno>
 104e67c:	1007883a 	mov	r3,r2
 104e680:	00800584 	movi	r2,22
 104e684:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 104e688:	00bffa84 	movi	r2,-22
 104e68c:	00001306 	br	104e6dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 104e690:	e0bffe17 	ldw	r2,-8(fp)
 104e694:	e0ffff17 	ldw	r3,-4(fp)
 104e698:	e0fffc15 	stw	r3,-16(fp)
 104e69c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 104e6a0:	e0bffd17 	ldw	r2,-12(fp)
 104e6a4:	e0fffc17 	ldw	r3,-16(fp)
 104e6a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 104e6ac:	e0bffc17 	ldw	r2,-16(fp)
 104e6b0:	10c00017 	ldw	r3,0(r2)
 104e6b4:	e0bffd17 	ldw	r2,-12(fp)
 104e6b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 104e6bc:	e0bffc17 	ldw	r2,-16(fp)
 104e6c0:	10800017 	ldw	r2,0(r2)
 104e6c4:	e0fffd17 	ldw	r3,-12(fp)
 104e6c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 104e6cc:	e0bffc17 	ldw	r2,-16(fp)
 104e6d0:	e0fffd17 	ldw	r3,-12(fp)
 104e6d4:	10c00015 	stw	r3,0(r2)

  return 0;  
 104e6d8:	0005883a 	mov	r2,zero
}
 104e6dc:	e037883a 	mov	sp,fp
 104e6e0:	dfc00117 	ldw	ra,4(sp)
 104e6e4:	df000017 	ldw	fp,0(sp)
 104e6e8:	dec00204 	addi	sp,sp,8
 104e6ec:	f800283a 	ret

0104e6f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 104e6f0:	defffd04 	addi	sp,sp,-12
 104e6f4:	dfc00215 	stw	ra,8(sp)
 104e6f8:	df000115 	stw	fp,4(sp)
 104e6fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 104e700:	00804174 	movhi	r2,261
 104e704:	10bdcc04 	addi	r2,r2,-2256
 104e708:	e0bfff15 	stw	r2,-4(fp)
 104e70c:	00000606 	br	104e728 <_do_ctors+0x38>
        (*ctor) (); 
 104e710:	e0bfff17 	ldw	r2,-4(fp)
 104e714:	10800017 	ldw	r2,0(r2)
 104e718:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 104e71c:	e0bfff17 	ldw	r2,-4(fp)
 104e720:	10bfff04 	addi	r2,r2,-4
 104e724:	e0bfff15 	stw	r2,-4(fp)
 104e728:	e0ffff17 	ldw	r3,-4(fp)
 104e72c:	00804174 	movhi	r2,261
 104e730:	10bdcd04 	addi	r2,r2,-2252
 104e734:	18bff62e 	bgeu	r3,r2,104e710 <__alt_data_end+0xfffee710>
        (*ctor) (); 
}
 104e738:	e037883a 	mov	sp,fp
 104e73c:	dfc00117 	ldw	ra,4(sp)
 104e740:	df000017 	ldw	fp,0(sp)
 104e744:	dec00204 	addi	sp,sp,8
 104e748:	f800283a 	ret

0104e74c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 104e74c:	defffd04 	addi	sp,sp,-12
 104e750:	dfc00215 	stw	ra,8(sp)
 104e754:	df000115 	stw	fp,4(sp)
 104e758:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 104e75c:	00804174 	movhi	r2,261
 104e760:	10bdcc04 	addi	r2,r2,-2256
 104e764:	e0bfff15 	stw	r2,-4(fp)
 104e768:	00000606 	br	104e784 <_do_dtors+0x38>
        (*dtor) (); 
 104e76c:	e0bfff17 	ldw	r2,-4(fp)
 104e770:	10800017 	ldw	r2,0(r2)
 104e774:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 104e778:	e0bfff17 	ldw	r2,-4(fp)
 104e77c:	10bfff04 	addi	r2,r2,-4
 104e780:	e0bfff15 	stw	r2,-4(fp)
 104e784:	e0ffff17 	ldw	r3,-4(fp)
 104e788:	00804174 	movhi	r2,261
 104e78c:	10bdcd04 	addi	r2,r2,-2252
 104e790:	18bff62e 	bgeu	r3,r2,104e76c <__alt_data_end+0xfffee76c>
        (*dtor) (); 
}
 104e794:	e037883a 	mov	sp,fp
 104e798:	dfc00117 	ldw	ra,4(sp)
 104e79c:	df000017 	ldw	fp,0(sp)
 104e7a0:	dec00204 	addi	sp,sp,8
 104e7a4:	f800283a 	ret

0104e7a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 104e7a8:	defffe04 	addi	sp,sp,-8
 104e7ac:	dfc00115 	stw	ra,4(sp)
 104e7b0:	df000015 	stw	fp,0(sp)
 104e7b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 104e7b8:	0009883a 	mov	r4,zero
 104e7bc:	01440004 	movi	r5,4096
 104e7c0:	104f2680 	call	104f268 <alt_icache_flush>
#endif
}
 104e7c4:	e037883a 	mov	sp,fp
 104e7c8:	dfc00117 	ldw	ra,4(sp)
 104e7cc:	df000017 	ldw	fp,0(sp)
 104e7d0:	dec00204 	addi	sp,sp,8
 104e7d4:	f800283a 	ret

0104e7d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 104e7d8:	defff904 	addi	sp,sp,-28
 104e7dc:	dfc00615 	stw	ra,24(sp)
 104e7e0:	df000515 	stw	fp,20(sp)
 104e7e4:	df000504 	addi	fp,sp,20
 104e7e8:	e13ffc15 	stw	r4,-16(fp)
 104e7ec:	e17ffd15 	stw	r5,-12(fp)
 104e7f0:	e1bffe15 	stw	r6,-8(fp)
 104e7f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 104e7f8:	e0800217 	ldw	r2,8(fp)
 104e7fc:	d8800015 	stw	r2,0(sp)
 104e800:	e13ffc17 	ldw	r4,-16(fp)
 104e804:	e17ffd17 	ldw	r5,-12(fp)
 104e808:	e1bffe17 	ldw	r6,-8(fp)
 104e80c:	e1ffff17 	ldw	r7,-4(fp)
 104e810:	104e9b80 	call	104e9b8 <alt_iic_isr_register>
}  
 104e814:	e037883a 	mov	sp,fp
 104e818:	dfc00117 	ldw	ra,4(sp)
 104e81c:	df000017 	ldw	fp,0(sp)
 104e820:	dec00204 	addi	sp,sp,8
 104e824:	f800283a 	ret

0104e828 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 104e828:	defff904 	addi	sp,sp,-28
 104e82c:	df000615 	stw	fp,24(sp)
 104e830:	df000604 	addi	fp,sp,24
 104e834:	e13ffe15 	stw	r4,-8(fp)
 104e838:	e17fff15 	stw	r5,-4(fp)
 104e83c:	e0bfff17 	ldw	r2,-4(fp)
 104e840:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e844:	0005303a 	rdctl	r2,status
 104e848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e84c:	e0fffb17 	ldw	r3,-20(fp)
 104e850:	00bfff84 	movi	r2,-2
 104e854:	1884703a 	and	r2,r3,r2
 104e858:	1001703a 	wrctl	status,r2
  
  return context;
 104e85c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 104e860:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 104e864:	e0bffa17 	ldw	r2,-24(fp)
 104e868:	00c00044 	movi	r3,1
 104e86c:	1884983a 	sll	r2,r3,r2
 104e870:	1007883a 	mov	r3,r2
 104e874:	00804174 	movhi	r2,261
 104e878:	108c2404 	addi	r2,r2,12432
 104e87c:	10800017 	ldw	r2,0(r2)
 104e880:	1886b03a 	or	r3,r3,r2
 104e884:	00804174 	movhi	r2,261
 104e888:	108c2404 	addi	r2,r2,12432
 104e88c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 104e890:	00804174 	movhi	r2,261
 104e894:	108c2404 	addi	r2,r2,12432
 104e898:	10800017 	ldw	r2,0(r2)
 104e89c:	100170fa 	wrctl	ienable,r2
 104e8a0:	e0bffc17 	ldw	r2,-16(fp)
 104e8a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104e8a8:	e0bffd17 	ldw	r2,-12(fp)
 104e8ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 104e8b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 104e8b4:	0001883a 	nop
}
 104e8b8:	e037883a 	mov	sp,fp
 104e8bc:	df000017 	ldw	fp,0(sp)
 104e8c0:	dec00104 	addi	sp,sp,4
 104e8c4:	f800283a 	ret

0104e8c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 104e8c8:	defff904 	addi	sp,sp,-28
 104e8cc:	df000615 	stw	fp,24(sp)
 104e8d0:	df000604 	addi	fp,sp,24
 104e8d4:	e13ffe15 	stw	r4,-8(fp)
 104e8d8:	e17fff15 	stw	r5,-4(fp)
 104e8dc:	e0bfff17 	ldw	r2,-4(fp)
 104e8e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e8e4:	0005303a 	rdctl	r2,status
 104e8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e8ec:	e0fffb17 	ldw	r3,-20(fp)
 104e8f0:	00bfff84 	movi	r2,-2
 104e8f4:	1884703a 	and	r2,r3,r2
 104e8f8:	1001703a 	wrctl	status,r2
  
  return context;
 104e8fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 104e900:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 104e904:	e0bffa17 	ldw	r2,-24(fp)
 104e908:	00c00044 	movi	r3,1
 104e90c:	1884983a 	sll	r2,r3,r2
 104e910:	0084303a 	nor	r2,zero,r2
 104e914:	1007883a 	mov	r3,r2
 104e918:	00804174 	movhi	r2,261
 104e91c:	108c2404 	addi	r2,r2,12432
 104e920:	10800017 	ldw	r2,0(r2)
 104e924:	1886703a 	and	r3,r3,r2
 104e928:	00804174 	movhi	r2,261
 104e92c:	108c2404 	addi	r2,r2,12432
 104e930:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 104e934:	00804174 	movhi	r2,261
 104e938:	108c2404 	addi	r2,r2,12432
 104e93c:	10800017 	ldw	r2,0(r2)
 104e940:	100170fa 	wrctl	ienable,r2
 104e944:	e0bffc17 	ldw	r2,-16(fp)
 104e948:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104e94c:	e0bffd17 	ldw	r2,-12(fp)
 104e950:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 104e954:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 104e958:	0001883a 	nop
}
 104e95c:	e037883a 	mov	sp,fp
 104e960:	df000017 	ldw	fp,0(sp)
 104e964:	dec00104 	addi	sp,sp,4
 104e968:	f800283a 	ret

0104e96c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 104e96c:	defffc04 	addi	sp,sp,-16
 104e970:	df000315 	stw	fp,12(sp)
 104e974:	df000304 	addi	fp,sp,12
 104e978:	e13ffe15 	stw	r4,-8(fp)
 104e97c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 104e980:	000530fa 	rdctl	r2,ienable
 104e984:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 104e988:	e0bfff17 	ldw	r2,-4(fp)
 104e98c:	00c00044 	movi	r3,1
 104e990:	1884983a 	sll	r2,r3,r2
 104e994:	1007883a 	mov	r3,r2
 104e998:	e0bffd17 	ldw	r2,-12(fp)
 104e99c:	1884703a 	and	r2,r3,r2
 104e9a0:	1004c03a 	cmpne	r2,r2,zero
 104e9a4:	10803fcc 	andi	r2,r2,255
}
 104e9a8:	e037883a 	mov	sp,fp
 104e9ac:	df000017 	ldw	fp,0(sp)
 104e9b0:	dec00104 	addi	sp,sp,4
 104e9b4:	f800283a 	ret

0104e9b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 104e9b8:	defff504 	addi	sp,sp,-44
 104e9bc:	dfc00a15 	stw	ra,40(sp)
 104e9c0:	df000915 	stw	fp,36(sp)
 104e9c4:	df000904 	addi	fp,sp,36
 104e9c8:	e13ffc15 	stw	r4,-16(fp)
 104e9cc:	e17ffd15 	stw	r5,-12(fp)
 104e9d0:	e1bffe15 	stw	r6,-8(fp)
 104e9d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 104e9d8:	00bffa84 	movi	r2,-22
 104e9dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 104e9e0:	e0bffd17 	ldw	r2,-12(fp)
 104e9e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 104e9e8:	e0bff817 	ldw	r2,-32(fp)
 104e9ec:	10800808 	cmpgei	r2,r2,32
 104e9f0:	1000271e 	bne	r2,zero,104ea90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104e9f4:	0005303a 	rdctl	r2,status
 104e9f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104e9fc:	e0fffa17 	ldw	r3,-24(fp)
 104ea00:	00bfff84 	movi	r2,-2
 104ea04:	1884703a 	and	r2,r3,r2
 104ea08:	1001703a 	wrctl	status,r2
  
  return context;
 104ea0c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 104ea10:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 104ea14:	00804174 	movhi	r2,261
 104ea18:	108c3204 	addi	r2,r2,12488
 104ea1c:	e0fff817 	ldw	r3,-32(fp)
 104ea20:	180690fa 	slli	r3,r3,3
 104ea24:	10c5883a 	add	r2,r2,r3
 104ea28:	e0fffe17 	ldw	r3,-8(fp)
 104ea2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 104ea30:	00804174 	movhi	r2,261
 104ea34:	108c3204 	addi	r2,r2,12488
 104ea38:	e0fff817 	ldw	r3,-32(fp)
 104ea3c:	180690fa 	slli	r3,r3,3
 104ea40:	10c5883a 	add	r2,r2,r3
 104ea44:	10800104 	addi	r2,r2,4
 104ea48:	e0ffff17 	ldw	r3,-4(fp)
 104ea4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 104ea50:	e0bffe17 	ldw	r2,-8(fp)
 104ea54:	10000526 	beq	r2,zero,104ea6c <alt_iic_isr_register+0xb4>
 104ea58:	e0bff817 	ldw	r2,-32(fp)
 104ea5c:	e13ffc17 	ldw	r4,-16(fp)
 104ea60:	100b883a 	mov	r5,r2
 104ea64:	104e8280 	call	104e828 <alt_ic_irq_enable>
 104ea68:	00000406 	br	104ea7c <alt_iic_isr_register+0xc4>
 104ea6c:	e0bff817 	ldw	r2,-32(fp)
 104ea70:	e13ffc17 	ldw	r4,-16(fp)
 104ea74:	100b883a 	mov	r5,r2
 104ea78:	104e8c80 	call	104e8c8 <alt_ic_irq_disable>
 104ea7c:	e0bff715 	stw	r2,-36(fp)
 104ea80:	e0bff917 	ldw	r2,-28(fp)
 104ea84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104ea88:	e0bffb17 	ldw	r2,-20(fp)
 104ea8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 104ea90:	e0bff717 	ldw	r2,-36(fp)
}
 104ea94:	e037883a 	mov	sp,fp
 104ea98:	dfc00117 	ldw	ra,4(sp)
 104ea9c:	df000017 	ldw	fp,0(sp)
 104eaa0:	dec00204 	addi	sp,sp,8
 104eaa4:	f800283a 	ret

0104eaa8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 104eaa8:	defff904 	addi	sp,sp,-28
 104eaac:	dfc00615 	stw	ra,24(sp)
 104eab0:	df000515 	stw	fp,20(sp)
 104eab4:	df000504 	addi	fp,sp,20
 104eab8:	e13ffc15 	stw	r4,-16(fp)
 104eabc:	e17ffd15 	stw	r5,-12(fp)
 104eac0:	e1bffe15 	stw	r6,-8(fp)
 104eac4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 104eac8:	e13ffd17 	ldw	r4,-12(fp)
 104eacc:	e17ffe17 	ldw	r5,-8(fp)
 104ead0:	e1bfff17 	ldw	r6,-4(fp)
 104ead4:	104ecfc0 	call	104ecfc <open>
 104ead8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 104eadc:	e0bffb17 	ldw	r2,-20(fp)
 104eae0:	10001c16 	blt	r2,zero,104eb54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 104eae4:	00804174 	movhi	r2,261
 104eae8:	1080d704 	addi	r2,r2,860
 104eaec:	e0fffb17 	ldw	r3,-20(fp)
 104eaf0:	18c00324 	muli	r3,r3,12
 104eaf4:	10c5883a 	add	r2,r2,r3
 104eaf8:	10c00017 	ldw	r3,0(r2)
 104eafc:	e0bffc17 	ldw	r2,-16(fp)
 104eb00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 104eb04:	00804174 	movhi	r2,261
 104eb08:	1080d704 	addi	r2,r2,860
 104eb0c:	e0fffb17 	ldw	r3,-20(fp)
 104eb10:	18c00324 	muli	r3,r3,12
 104eb14:	10c5883a 	add	r2,r2,r3
 104eb18:	10800104 	addi	r2,r2,4
 104eb1c:	10c00017 	ldw	r3,0(r2)
 104eb20:	e0bffc17 	ldw	r2,-16(fp)
 104eb24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 104eb28:	00804174 	movhi	r2,261
 104eb2c:	1080d704 	addi	r2,r2,860
 104eb30:	e0fffb17 	ldw	r3,-20(fp)
 104eb34:	18c00324 	muli	r3,r3,12
 104eb38:	10c5883a 	add	r2,r2,r3
 104eb3c:	10800204 	addi	r2,r2,8
 104eb40:	10c00017 	ldw	r3,0(r2)
 104eb44:	e0bffc17 	ldw	r2,-16(fp)
 104eb48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 104eb4c:	e13ffb17 	ldw	r4,-20(fp)
 104eb50:	104d4880 	call	104d488 <alt_release_fd>
  }
} 
 104eb54:	e037883a 	mov	sp,fp
 104eb58:	dfc00117 	ldw	ra,4(sp)
 104eb5c:	df000017 	ldw	fp,0(sp)
 104eb60:	dec00204 	addi	sp,sp,8
 104eb64:	f800283a 	ret

0104eb68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 104eb68:	defffb04 	addi	sp,sp,-20
 104eb6c:	dfc00415 	stw	ra,16(sp)
 104eb70:	df000315 	stw	fp,12(sp)
 104eb74:	df000304 	addi	fp,sp,12
 104eb78:	e13ffd15 	stw	r4,-12(fp)
 104eb7c:	e17ffe15 	stw	r5,-8(fp)
 104eb80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 104eb84:	01004174 	movhi	r4,261
 104eb88:	2100da04 	addi	r4,r4,872
 104eb8c:	e17ffd17 	ldw	r5,-12(fp)
 104eb90:	01800044 	movi	r6,1
 104eb94:	01c07fc4 	movi	r7,511
 104eb98:	104eaa80 	call	104eaa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 104eb9c:	01004174 	movhi	r4,261
 104eba0:	2100d704 	addi	r4,r4,860
 104eba4:	e17ffe17 	ldw	r5,-8(fp)
 104eba8:	000d883a 	mov	r6,zero
 104ebac:	01c07fc4 	movi	r7,511
 104ebb0:	104eaa80 	call	104eaa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 104ebb4:	01004174 	movhi	r4,261
 104ebb8:	2100dd04 	addi	r4,r4,884
 104ebbc:	e17fff17 	ldw	r5,-4(fp)
 104ebc0:	01800044 	movi	r6,1
 104ebc4:	01c07fc4 	movi	r7,511
 104ebc8:	104eaa80 	call	104eaa8 <alt_open_fd>
}  
 104ebcc:	e037883a 	mov	sp,fp
 104ebd0:	dfc00117 	ldw	ra,4(sp)
 104ebd4:	df000017 	ldw	fp,0(sp)
 104ebd8:	dec00204 	addi	sp,sp,8
 104ebdc:	f800283a 	ret

0104ebe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 104ebe0:	defffe04 	addi	sp,sp,-8
 104ebe4:	dfc00115 	stw	ra,4(sp)
 104ebe8:	df000015 	stw	fp,0(sp)
 104ebec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 104ebf0:	00804174 	movhi	r2,261
 104ebf4:	10855a04 	addi	r2,r2,5480
 104ebf8:	10800017 	ldw	r2,0(r2)
 104ebfc:	10000526 	beq	r2,zero,104ec14 <alt_get_errno+0x34>
 104ec00:	00804174 	movhi	r2,261
 104ec04:	10855a04 	addi	r2,r2,5480
 104ec08:	10800017 	ldw	r2,0(r2)
 104ec0c:	103ee83a 	callr	r2
 104ec10:	00000206 	br	104ec1c <alt_get_errno+0x3c>
 104ec14:	00804174 	movhi	r2,261
 104ec18:	108c2004 	addi	r2,r2,12416
}
 104ec1c:	e037883a 	mov	sp,fp
 104ec20:	dfc00117 	ldw	ra,4(sp)
 104ec24:	df000017 	ldw	fp,0(sp)
 104ec28:	dec00204 	addi	sp,sp,8
 104ec2c:	f800283a 	ret

0104ec30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 104ec30:	defffd04 	addi	sp,sp,-12
 104ec34:	df000215 	stw	fp,8(sp)
 104ec38:	df000204 	addi	fp,sp,8
 104ec3c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 104ec40:	e0bfff17 	ldw	r2,-4(fp)
 104ec44:	10800217 	ldw	r2,8(r2)
 104ec48:	10d00034 	orhi	r3,r2,16384
 104ec4c:	e0bfff17 	ldw	r2,-4(fp)
 104ec50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 104ec54:	e03ffe15 	stw	zero,-8(fp)
 104ec58:	00001d06 	br	104ecd0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 104ec5c:	00804174 	movhi	r2,261
 104ec60:	1080d704 	addi	r2,r2,860
 104ec64:	e0fffe17 	ldw	r3,-8(fp)
 104ec68:	18c00324 	muli	r3,r3,12
 104ec6c:	10c5883a 	add	r2,r2,r3
 104ec70:	10c00017 	ldw	r3,0(r2)
 104ec74:	e0bfff17 	ldw	r2,-4(fp)
 104ec78:	10800017 	ldw	r2,0(r2)
 104ec7c:	1880111e 	bne	r3,r2,104ecc4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 104ec80:	00804174 	movhi	r2,261
 104ec84:	1080d704 	addi	r2,r2,860
 104ec88:	e0fffe17 	ldw	r3,-8(fp)
 104ec8c:	18c00324 	muli	r3,r3,12
 104ec90:	10c5883a 	add	r2,r2,r3
 104ec94:	10800204 	addi	r2,r2,8
 104ec98:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 104ec9c:	1000090e 	bge	r2,zero,104ecc4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 104eca0:	e0bffe17 	ldw	r2,-8(fp)
 104eca4:	10c00324 	muli	r3,r2,12
 104eca8:	00804174 	movhi	r2,261
 104ecac:	1080d704 	addi	r2,r2,860
 104ecb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 104ecb4:	e0bfff17 	ldw	r2,-4(fp)
 104ecb8:	18800226 	beq	r3,r2,104ecc4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 104ecbc:	00bffcc4 	movi	r2,-13
 104ecc0:	00000a06 	br	104ecec <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 104ecc4:	e0bffe17 	ldw	r2,-8(fp)
 104ecc8:	10800044 	addi	r2,r2,1
 104eccc:	e0bffe15 	stw	r2,-8(fp)
 104ecd0:	00804174 	movhi	r2,261
 104ecd4:	10855904 	addi	r2,r2,5476
 104ecd8:	10800017 	ldw	r2,0(r2)
 104ecdc:	1007883a 	mov	r3,r2
 104ece0:	e0bffe17 	ldw	r2,-8(fp)
 104ece4:	18bfdd2e 	bgeu	r3,r2,104ec5c <__alt_data_end+0xfffeec5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 104ece8:	0005883a 	mov	r2,zero
}
 104ecec:	e037883a 	mov	sp,fp
 104ecf0:	df000017 	ldw	fp,0(sp)
 104ecf4:	dec00104 	addi	sp,sp,4
 104ecf8:	f800283a 	ret

0104ecfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 104ecfc:	defff604 	addi	sp,sp,-40
 104ed00:	dfc00915 	stw	ra,36(sp)
 104ed04:	df000815 	stw	fp,32(sp)
 104ed08:	df000804 	addi	fp,sp,32
 104ed0c:	e13ffd15 	stw	r4,-12(fp)
 104ed10:	e17ffe15 	stw	r5,-8(fp)
 104ed14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 104ed18:	00bfffc4 	movi	r2,-1
 104ed1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 104ed20:	00bffb44 	movi	r2,-19
 104ed24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 104ed28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 104ed2c:	e13ffd17 	ldw	r4,-12(fp)
 104ed30:	01404174 	movhi	r5,261
 104ed34:	29455704 	addi	r5,r5,5468
 104ed38:	104f0100 	call	104f010 <alt_find_dev>
 104ed3c:	e0bff815 	stw	r2,-32(fp)
 104ed40:	e0bff817 	ldw	r2,-32(fp)
 104ed44:	1000051e 	bne	r2,zero,104ed5c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 104ed48:	e13ffd17 	ldw	r4,-12(fp)
 104ed4c:	104f0a00 	call	104f0a0 <alt_find_file>
 104ed50:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 104ed54:	00800044 	movi	r2,1
 104ed58:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 104ed5c:	e0bff817 	ldw	r2,-32(fp)
 104ed60:	10002926 	beq	r2,zero,104ee08 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 104ed64:	e13ff817 	ldw	r4,-32(fp)
 104ed68:	104f1b40 	call	104f1b4 <alt_get_fd>
 104ed6c:	e0bff915 	stw	r2,-28(fp)
 104ed70:	e0bff917 	ldw	r2,-28(fp)
 104ed74:	1000030e 	bge	r2,zero,104ed84 <open+0x88>
    {
      status = index;
 104ed78:	e0bff917 	ldw	r2,-28(fp)
 104ed7c:	e0bffa15 	stw	r2,-24(fp)
 104ed80:	00002306 	br	104ee10 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 104ed84:	e0bff917 	ldw	r2,-28(fp)
 104ed88:	10c00324 	muli	r3,r2,12
 104ed8c:	00804174 	movhi	r2,261
 104ed90:	1080d704 	addi	r2,r2,860
 104ed94:	1885883a 	add	r2,r3,r2
 104ed98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 104ed9c:	e0fffe17 	ldw	r3,-8(fp)
 104eda0:	00900034 	movhi	r2,16384
 104eda4:	10bfffc4 	addi	r2,r2,-1
 104eda8:	1886703a 	and	r3,r3,r2
 104edac:	e0bffc17 	ldw	r2,-16(fp)
 104edb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 104edb4:	e0bffb17 	ldw	r2,-20(fp)
 104edb8:	1000051e 	bne	r2,zero,104edd0 <open+0xd4>
 104edbc:	e13ffc17 	ldw	r4,-16(fp)
 104edc0:	104ec300 	call	104ec30 <alt_file_locked>
 104edc4:	e0bffa15 	stw	r2,-24(fp)
 104edc8:	e0bffa17 	ldw	r2,-24(fp)
 104edcc:	10001016 	blt	r2,zero,104ee10 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 104edd0:	e0bff817 	ldw	r2,-32(fp)
 104edd4:	10800317 	ldw	r2,12(r2)
 104edd8:	10000826 	beq	r2,zero,104edfc <open+0x100>
 104eddc:	e0bff817 	ldw	r2,-32(fp)
 104ede0:	10800317 	ldw	r2,12(r2)
 104ede4:	e13ffc17 	ldw	r4,-16(fp)
 104ede8:	e17ffd17 	ldw	r5,-12(fp)
 104edec:	e1bffe17 	ldw	r6,-8(fp)
 104edf0:	e1ffff17 	ldw	r7,-4(fp)
 104edf4:	103ee83a 	callr	r2
 104edf8:	00000106 	br	104ee00 <open+0x104>
 104edfc:	0005883a 	mov	r2,zero
 104ee00:	e0bffa15 	stw	r2,-24(fp)
 104ee04:	00000206 	br	104ee10 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 104ee08:	00bffb44 	movi	r2,-19
 104ee0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 104ee10:	e0bffa17 	ldw	r2,-24(fp)
 104ee14:	1000090e 	bge	r2,zero,104ee3c <open+0x140>
  {
    alt_release_fd (index);  
 104ee18:	e13ff917 	ldw	r4,-28(fp)
 104ee1c:	104d4880 	call	104d488 <alt_release_fd>
    ALT_ERRNO = -status;
 104ee20:	104ebe00 	call	104ebe0 <alt_get_errno>
 104ee24:	1007883a 	mov	r3,r2
 104ee28:	e0bffa17 	ldw	r2,-24(fp)
 104ee2c:	0085c83a 	sub	r2,zero,r2
 104ee30:	18800015 	stw	r2,0(r3)
    return -1;
 104ee34:	00bfffc4 	movi	r2,-1
 104ee38:	00000106 	br	104ee40 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 104ee3c:	e0bff917 	ldw	r2,-28(fp)
}
 104ee40:	e037883a 	mov	sp,fp
 104ee44:	dfc00117 	ldw	ra,4(sp)
 104ee48:	df000017 	ldw	fp,0(sp)
 104ee4c:	dec00204 	addi	sp,sp,8
 104ee50:	f800283a 	ret

0104ee54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 104ee54:	defffa04 	addi	sp,sp,-24
 104ee58:	df000515 	stw	fp,20(sp)
 104ee5c:	df000504 	addi	fp,sp,20
 104ee60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 104ee64:	0005303a 	rdctl	r2,status
 104ee68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 104ee6c:	e0fffc17 	ldw	r3,-16(fp)
 104ee70:	00bfff84 	movi	r2,-2
 104ee74:	1884703a 	and	r2,r3,r2
 104ee78:	1001703a 	wrctl	status,r2
  
  return context;
 104ee7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 104ee80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 104ee84:	e0bfff17 	ldw	r2,-4(fp)
 104ee88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 104ee8c:	e0bffd17 	ldw	r2,-12(fp)
 104ee90:	10800017 	ldw	r2,0(r2)
 104ee94:	e0fffd17 	ldw	r3,-12(fp)
 104ee98:	18c00117 	ldw	r3,4(r3)
 104ee9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 104eea0:	e0bffd17 	ldw	r2,-12(fp)
 104eea4:	10800117 	ldw	r2,4(r2)
 104eea8:	e0fffd17 	ldw	r3,-12(fp)
 104eeac:	18c00017 	ldw	r3,0(r3)
 104eeb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 104eeb4:	e0bffd17 	ldw	r2,-12(fp)
 104eeb8:	e0fffd17 	ldw	r3,-12(fp)
 104eebc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 104eec0:	e0bffd17 	ldw	r2,-12(fp)
 104eec4:	e0fffd17 	ldw	r3,-12(fp)
 104eec8:	10c00015 	stw	r3,0(r2)
 104eecc:	e0bffb17 	ldw	r2,-20(fp)
 104eed0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 104eed4:	e0bffe17 	ldw	r2,-8(fp)
 104eed8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 104eedc:	e037883a 	mov	sp,fp
 104eee0:	df000017 	ldw	fp,0(sp)
 104eee4:	dec00104 	addi	sp,sp,4
 104eee8:	f800283a 	ret

0104eeec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 104eeec:	defffb04 	addi	sp,sp,-20
 104eef0:	dfc00415 	stw	ra,16(sp)
 104eef4:	df000315 	stw	fp,12(sp)
 104eef8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 104eefc:	d0a00e17 	ldw	r2,-32712(gp)
 104ef00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 104ef04:	d0a6d717 	ldw	r2,-25764(gp)
 104ef08:	10800044 	addi	r2,r2,1
 104ef0c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 104ef10:	00002e06 	br	104efcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 104ef14:	e0bffd17 	ldw	r2,-12(fp)
 104ef18:	10800017 	ldw	r2,0(r2)
 104ef1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 104ef20:	e0bffd17 	ldw	r2,-12(fp)
 104ef24:	10800403 	ldbu	r2,16(r2)
 104ef28:	10803fcc 	andi	r2,r2,255
 104ef2c:	10000426 	beq	r2,zero,104ef40 <alt_tick+0x54>
 104ef30:	d0a6d717 	ldw	r2,-25764(gp)
 104ef34:	1000021e 	bne	r2,zero,104ef40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 104ef38:	e0bffd17 	ldw	r2,-12(fp)
 104ef3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 104ef40:	e0bffd17 	ldw	r2,-12(fp)
 104ef44:	10800217 	ldw	r2,8(r2)
 104ef48:	d0e6d717 	ldw	r3,-25764(gp)
 104ef4c:	18801d36 	bltu	r3,r2,104efc4 <alt_tick+0xd8>
 104ef50:	e0bffd17 	ldw	r2,-12(fp)
 104ef54:	10800403 	ldbu	r2,16(r2)
 104ef58:	10803fcc 	andi	r2,r2,255
 104ef5c:	1000191e 	bne	r2,zero,104efc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 104ef60:	e0bffd17 	ldw	r2,-12(fp)
 104ef64:	10800317 	ldw	r2,12(r2)
 104ef68:	e0fffd17 	ldw	r3,-12(fp)
 104ef6c:	18c00517 	ldw	r3,20(r3)
 104ef70:	1809883a 	mov	r4,r3
 104ef74:	103ee83a 	callr	r2
 104ef78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 104ef7c:	e0bfff17 	ldw	r2,-4(fp)
 104ef80:	1000031e 	bne	r2,zero,104ef90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 104ef84:	e13ffd17 	ldw	r4,-12(fp)
 104ef88:	104ee540 	call	104ee54 <alt_alarm_stop>
 104ef8c:	00000d06 	br	104efc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 104ef90:	e0bffd17 	ldw	r2,-12(fp)
 104ef94:	10c00217 	ldw	r3,8(r2)
 104ef98:	e0bfff17 	ldw	r2,-4(fp)
 104ef9c:	1887883a 	add	r3,r3,r2
 104efa0:	e0bffd17 	ldw	r2,-12(fp)
 104efa4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 104efa8:	e0bffd17 	ldw	r2,-12(fp)
 104efac:	10c00217 	ldw	r3,8(r2)
 104efb0:	d0a6d717 	ldw	r2,-25764(gp)
 104efb4:	1880032e 	bgeu	r3,r2,104efc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 104efb8:	e0bffd17 	ldw	r2,-12(fp)
 104efbc:	00c00044 	movi	r3,1
 104efc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 104efc4:	e0bffe17 	ldw	r2,-8(fp)
 104efc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 104efcc:	e0fffd17 	ldw	r3,-12(fp)
 104efd0:	d0a00e04 	addi	r2,gp,-32712
 104efd4:	18bfcf1e 	bne	r3,r2,104ef14 <__alt_data_end+0xfffeef14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 104efd8:	0001883a 	nop
}
 104efdc:	e037883a 	mov	sp,fp
 104efe0:	dfc00117 	ldw	ra,4(sp)
 104efe4:	df000017 	ldw	fp,0(sp)
 104efe8:	dec00204 	addi	sp,sp,8
 104efec:	f800283a 	ret

0104eff0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 104eff0:	deffff04 	addi	sp,sp,-4
 104eff4:	df000015 	stw	fp,0(sp)
 104eff8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 104effc:	000170fa 	wrctl	ienable,zero
}
 104f000:	e037883a 	mov	sp,fp
 104f004:	df000017 	ldw	fp,0(sp)
 104f008:	dec00104 	addi	sp,sp,4
 104f00c:	f800283a 	ret

0104f010 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 104f010:	defffa04 	addi	sp,sp,-24
 104f014:	dfc00515 	stw	ra,20(sp)
 104f018:	df000415 	stw	fp,16(sp)
 104f01c:	df000404 	addi	fp,sp,16
 104f020:	e13ffe15 	stw	r4,-8(fp)
 104f024:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 104f028:	e0bfff17 	ldw	r2,-4(fp)
 104f02c:	10800017 	ldw	r2,0(r2)
 104f030:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 104f034:	e13ffe17 	ldw	r4,-8(fp)
 104f038:	1040b740 	call	1040b74 <strlen>
 104f03c:	10800044 	addi	r2,r2,1
 104f040:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 104f044:	00000d06 	br	104f07c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 104f048:	e0bffc17 	ldw	r2,-16(fp)
 104f04c:	10c00217 	ldw	r3,8(r2)
 104f050:	e0bffd17 	ldw	r2,-12(fp)
 104f054:	1809883a 	mov	r4,r3
 104f058:	e17ffe17 	ldw	r5,-8(fp)
 104f05c:	100d883a 	mov	r6,r2
 104f060:	104f3dc0 	call	104f3dc <memcmp>
 104f064:	1000021e 	bne	r2,zero,104f070 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 104f068:	e0bffc17 	ldw	r2,-16(fp)
 104f06c:	00000706 	br	104f08c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 104f070:	e0bffc17 	ldw	r2,-16(fp)
 104f074:	10800017 	ldw	r2,0(r2)
 104f078:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 104f07c:	e0fffc17 	ldw	r3,-16(fp)
 104f080:	e0bfff17 	ldw	r2,-4(fp)
 104f084:	18bff01e 	bne	r3,r2,104f048 <__alt_data_end+0xfffef048>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 104f088:	0005883a 	mov	r2,zero
}
 104f08c:	e037883a 	mov	sp,fp
 104f090:	dfc00117 	ldw	ra,4(sp)
 104f094:	df000017 	ldw	fp,0(sp)
 104f098:	dec00204 	addi	sp,sp,8
 104f09c:	f800283a 	ret

0104f0a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 104f0a0:	defffb04 	addi	sp,sp,-20
 104f0a4:	dfc00415 	stw	ra,16(sp)
 104f0a8:	df000315 	stw	fp,12(sp)
 104f0ac:	df000304 	addi	fp,sp,12
 104f0b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 104f0b4:	00804174 	movhi	r2,261
 104f0b8:	10855504 	addi	r2,r2,5460
 104f0bc:	10800017 	ldw	r2,0(r2)
 104f0c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 104f0c4:	00003106 	br	104f18c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 104f0c8:	e0bffd17 	ldw	r2,-12(fp)
 104f0cc:	10800217 	ldw	r2,8(r2)
 104f0d0:	1009883a 	mov	r4,r2
 104f0d4:	1040b740 	call	1040b74 <strlen>
 104f0d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 104f0dc:	e0bffd17 	ldw	r2,-12(fp)
 104f0e0:	10c00217 	ldw	r3,8(r2)
 104f0e4:	e0bffe17 	ldw	r2,-8(fp)
 104f0e8:	10bfffc4 	addi	r2,r2,-1
 104f0ec:	1885883a 	add	r2,r3,r2
 104f0f0:	10800003 	ldbu	r2,0(r2)
 104f0f4:	10803fcc 	andi	r2,r2,255
 104f0f8:	1080201c 	xori	r2,r2,128
 104f0fc:	10bfe004 	addi	r2,r2,-128
 104f100:	10800bd8 	cmpnei	r2,r2,47
 104f104:	1000031e 	bne	r2,zero,104f114 <alt_find_file+0x74>
    {
      len -= 1;
 104f108:	e0bffe17 	ldw	r2,-8(fp)
 104f10c:	10bfffc4 	addi	r2,r2,-1
 104f110:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 104f114:	e0bffe17 	ldw	r2,-8(fp)
 104f118:	e0ffff17 	ldw	r3,-4(fp)
 104f11c:	1885883a 	add	r2,r3,r2
 104f120:	10800003 	ldbu	r2,0(r2)
 104f124:	10803fcc 	andi	r2,r2,255
 104f128:	1080201c 	xori	r2,r2,128
 104f12c:	10bfe004 	addi	r2,r2,-128
 104f130:	10800be0 	cmpeqi	r2,r2,47
 104f134:	1000081e 	bne	r2,zero,104f158 <alt_find_file+0xb8>
 104f138:	e0bffe17 	ldw	r2,-8(fp)
 104f13c:	e0ffff17 	ldw	r3,-4(fp)
 104f140:	1885883a 	add	r2,r3,r2
 104f144:	10800003 	ldbu	r2,0(r2)
 104f148:	10803fcc 	andi	r2,r2,255
 104f14c:	1080201c 	xori	r2,r2,128
 104f150:	10bfe004 	addi	r2,r2,-128
 104f154:	10000a1e 	bne	r2,zero,104f180 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 104f158:	e0bffd17 	ldw	r2,-12(fp)
 104f15c:	10c00217 	ldw	r3,8(r2)
 104f160:	e0bffe17 	ldw	r2,-8(fp)
 104f164:	1809883a 	mov	r4,r3
 104f168:	e17fff17 	ldw	r5,-4(fp)
 104f16c:	100d883a 	mov	r6,r2
 104f170:	104f3dc0 	call	104f3dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 104f174:	1000021e 	bne	r2,zero,104f180 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 104f178:	e0bffd17 	ldw	r2,-12(fp)
 104f17c:	00000806 	br	104f1a0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 104f180:	e0bffd17 	ldw	r2,-12(fp)
 104f184:	10800017 	ldw	r2,0(r2)
 104f188:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 104f18c:	e0fffd17 	ldw	r3,-12(fp)
 104f190:	00804174 	movhi	r2,261
 104f194:	10855504 	addi	r2,r2,5460
 104f198:	18bfcb1e 	bne	r3,r2,104f0c8 <__alt_data_end+0xfffef0c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 104f19c:	0005883a 	mov	r2,zero
}
 104f1a0:	e037883a 	mov	sp,fp
 104f1a4:	dfc00117 	ldw	ra,4(sp)
 104f1a8:	df000017 	ldw	fp,0(sp)
 104f1ac:	dec00204 	addi	sp,sp,8
 104f1b0:	f800283a 	ret

0104f1b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 104f1b4:	defffc04 	addi	sp,sp,-16
 104f1b8:	df000315 	stw	fp,12(sp)
 104f1bc:	df000304 	addi	fp,sp,12
 104f1c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 104f1c4:	00bffa04 	movi	r2,-24
 104f1c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 104f1cc:	e03ffd15 	stw	zero,-12(fp)
 104f1d0:	00001d06 	br	104f248 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 104f1d4:	00804174 	movhi	r2,261
 104f1d8:	1080d704 	addi	r2,r2,860
 104f1dc:	e0fffd17 	ldw	r3,-12(fp)
 104f1e0:	18c00324 	muli	r3,r3,12
 104f1e4:	10c5883a 	add	r2,r2,r3
 104f1e8:	10800017 	ldw	r2,0(r2)
 104f1ec:	1000131e 	bne	r2,zero,104f23c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 104f1f0:	00804174 	movhi	r2,261
 104f1f4:	1080d704 	addi	r2,r2,860
 104f1f8:	e0fffd17 	ldw	r3,-12(fp)
 104f1fc:	18c00324 	muli	r3,r3,12
 104f200:	10c5883a 	add	r2,r2,r3
 104f204:	e0ffff17 	ldw	r3,-4(fp)
 104f208:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 104f20c:	00804174 	movhi	r2,261
 104f210:	10855904 	addi	r2,r2,5476
 104f214:	10c00017 	ldw	r3,0(r2)
 104f218:	e0bffd17 	ldw	r2,-12(fp)
 104f21c:	1880040e 	bge	r3,r2,104f230 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 104f220:	00804174 	movhi	r2,261
 104f224:	10855904 	addi	r2,r2,5476
 104f228:	e0fffd17 	ldw	r3,-12(fp)
 104f22c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 104f230:	e0bffd17 	ldw	r2,-12(fp)
 104f234:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 104f238:	00000606 	br	104f254 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 104f23c:	e0bffd17 	ldw	r2,-12(fp)
 104f240:	10800044 	addi	r2,r2,1
 104f244:	e0bffd15 	stw	r2,-12(fp)
 104f248:	e0bffd17 	ldw	r2,-12(fp)
 104f24c:	10800810 	cmplti	r2,r2,32
 104f250:	103fe01e 	bne	r2,zero,104f1d4 <__alt_data_end+0xfffef1d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 104f254:	e0bffe17 	ldw	r2,-8(fp)
}
 104f258:	e037883a 	mov	sp,fp
 104f25c:	df000017 	ldw	fp,0(sp)
 104f260:	dec00104 	addi	sp,sp,4
 104f264:	f800283a 	ret

0104f268 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 104f268:	defffb04 	addi	sp,sp,-20
 104f26c:	df000415 	stw	fp,16(sp)
 104f270:	df000404 	addi	fp,sp,16
 104f274:	e13ffe15 	stw	r4,-8(fp)
 104f278:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 104f27c:	e0bfff17 	ldw	r2,-4(fp)
 104f280:	10840070 	cmpltui	r2,r2,4097
 104f284:	1000021e 	bne	r2,zero,104f290 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 104f288:	00840004 	movi	r2,4096
 104f28c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 104f290:	e0fffe17 	ldw	r3,-8(fp)
 104f294:	e0bfff17 	ldw	r2,-4(fp)
 104f298:	1885883a 	add	r2,r3,r2
 104f29c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 104f2a0:	e0bffe17 	ldw	r2,-8(fp)
 104f2a4:	e0bffc15 	stw	r2,-16(fp)
 104f2a8:	00000506 	br	104f2c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 104f2ac:	e0bffc17 	ldw	r2,-16(fp)
 104f2b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 104f2b4:	e0bffc17 	ldw	r2,-16(fp)
 104f2b8:	10800804 	addi	r2,r2,32
 104f2bc:	e0bffc15 	stw	r2,-16(fp)
 104f2c0:	e0fffc17 	ldw	r3,-16(fp)
 104f2c4:	e0bffd17 	ldw	r2,-12(fp)
 104f2c8:	18bff836 	bltu	r3,r2,104f2ac <__alt_data_end+0xfffef2ac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 104f2cc:	e0bffe17 	ldw	r2,-8(fp)
 104f2d0:	108007cc 	andi	r2,r2,31
 104f2d4:	10000226 	beq	r2,zero,104f2e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 104f2d8:	e0bffc17 	ldw	r2,-16(fp)
 104f2dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 104f2e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 104f2e4:	e037883a 	mov	sp,fp
 104f2e8:	df000017 	ldw	fp,0(sp)
 104f2ec:	dec00104 	addi	sp,sp,4
 104f2f0:	f800283a 	ret

0104f2f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 104f2f4:	defffe04 	addi	sp,sp,-8
 104f2f8:	df000115 	stw	fp,4(sp)
 104f2fc:	df000104 	addi	fp,sp,4
 104f300:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 104f304:	e0bfff17 	ldw	r2,-4(fp)
 104f308:	10bffe84 	addi	r2,r2,-6
 104f30c:	10c00428 	cmpgeui	r3,r2,16
 104f310:	18001a1e 	bne	r3,zero,104f37c <alt_exception_cause_generated_bad_addr+0x88>
 104f314:	100690ba 	slli	r3,r2,2
 104f318:	00804174 	movhi	r2,261
 104f31c:	10bccb04 	addi	r2,r2,-3284
 104f320:	1885883a 	add	r2,r3,r2
 104f324:	10800017 	ldw	r2,0(r2)
 104f328:	1000683a 	jmp	r2
 104f32c:	0104f36c 	andhi	r4,zero,5069
 104f330:	0104f36c 	andhi	r4,zero,5069
 104f334:	0104f37c 	xorhi	r4,zero,5069
 104f338:	0104f37c 	xorhi	r4,zero,5069
 104f33c:	0104f37c 	xorhi	r4,zero,5069
 104f340:	0104f36c 	andhi	r4,zero,5069
 104f344:	0104f374 	movhi	r4,5069
 104f348:	0104f37c 	xorhi	r4,zero,5069
 104f34c:	0104f36c 	andhi	r4,zero,5069
 104f350:	0104f36c 	andhi	r4,zero,5069
 104f354:	0104f37c 	xorhi	r4,zero,5069
 104f358:	0104f36c 	andhi	r4,zero,5069
 104f35c:	0104f374 	movhi	r4,5069
 104f360:	0104f37c 	xorhi	r4,zero,5069
 104f364:	0104f37c 	xorhi	r4,zero,5069
 104f368:	0104f36c 	andhi	r4,zero,5069
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 104f36c:	00800044 	movi	r2,1
 104f370:	00000306 	br	104f380 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 104f374:	0005883a 	mov	r2,zero
 104f378:	00000106 	br	104f380 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 104f37c:	0005883a 	mov	r2,zero
  }
}
 104f380:	e037883a 	mov	sp,fp
 104f384:	df000017 	ldw	fp,0(sp)
 104f388:	dec00104 	addi	sp,sp,4
 104f38c:	f800283a 	ret

0104f390 <atexit>:
 104f390:	200b883a 	mov	r5,r4
 104f394:	000d883a 	mov	r6,zero
 104f398:	0009883a 	mov	r4,zero
 104f39c:	000f883a 	mov	r7,zero
 104f3a0:	104f4581 	jmpi	104f458 <__register_exitproc>

0104f3a4 <exit>:
 104f3a4:	defffe04 	addi	sp,sp,-8
 104f3a8:	000b883a 	mov	r5,zero
 104f3ac:	dc000015 	stw	r16,0(sp)
 104f3b0:	dfc00115 	stw	ra,4(sp)
 104f3b4:	2021883a 	mov	r16,r4
 104f3b8:	104f56c0 	call	104f56c <__call_exitprocs>
 104f3bc:	00804174 	movhi	r2,261
 104f3c0:	10854f04 	addi	r2,r2,5436
 104f3c4:	11000017 	ldw	r4,0(r2)
 104f3c8:	20800f17 	ldw	r2,60(r4)
 104f3cc:	10000126 	beq	r2,zero,104f3d4 <exit+0x30>
 104f3d0:	103ee83a 	callr	r2
 104f3d4:	8009883a 	mov	r4,r16
 104f3d8:	104f7000 	call	104f700 <_exit>

0104f3dc <memcmp>:
 104f3dc:	01c000c4 	movi	r7,3
 104f3e0:	3980192e 	bgeu	r7,r6,104f448 <memcmp+0x6c>
 104f3e4:	2144b03a 	or	r2,r4,r5
 104f3e8:	11c4703a 	and	r2,r2,r7
 104f3ec:	10000f26 	beq	r2,zero,104f42c <memcmp+0x50>
 104f3f0:	20800003 	ldbu	r2,0(r4)
 104f3f4:	28c00003 	ldbu	r3,0(r5)
 104f3f8:	10c0151e 	bne	r2,r3,104f450 <memcmp+0x74>
 104f3fc:	31bfff84 	addi	r6,r6,-2
 104f400:	01ffffc4 	movi	r7,-1
 104f404:	00000406 	br	104f418 <memcmp+0x3c>
 104f408:	20800003 	ldbu	r2,0(r4)
 104f40c:	28c00003 	ldbu	r3,0(r5)
 104f410:	31bfffc4 	addi	r6,r6,-1
 104f414:	10c00e1e 	bne	r2,r3,104f450 <memcmp+0x74>
 104f418:	21000044 	addi	r4,r4,1
 104f41c:	29400044 	addi	r5,r5,1
 104f420:	31fff91e 	bne	r6,r7,104f408 <__alt_data_end+0xfffef408>
 104f424:	0005883a 	mov	r2,zero
 104f428:	f800283a 	ret
 104f42c:	20c00017 	ldw	r3,0(r4)
 104f430:	28800017 	ldw	r2,0(r5)
 104f434:	1880041e 	bne	r3,r2,104f448 <memcmp+0x6c>
 104f438:	31bfff04 	addi	r6,r6,-4
 104f43c:	21000104 	addi	r4,r4,4
 104f440:	29400104 	addi	r5,r5,4
 104f444:	39bff936 	bltu	r7,r6,104f42c <__alt_data_end+0xfffef42c>
 104f448:	303fe91e 	bne	r6,zero,104f3f0 <__alt_data_end+0xfffef3f0>
 104f44c:	003ff506 	br	104f424 <__alt_data_end+0xfffef424>
 104f450:	10c5c83a 	sub	r2,r2,r3
 104f454:	f800283a 	ret

0104f458 <__register_exitproc>:
 104f458:	00804174 	movhi	r2,261
 104f45c:	defffa04 	addi	sp,sp,-24
 104f460:	10854f04 	addi	r2,r2,5436
 104f464:	dc000315 	stw	r16,12(sp)
 104f468:	14000017 	ldw	r16,0(r2)
 104f46c:	dc400415 	stw	r17,16(sp)
 104f470:	dfc00515 	stw	ra,20(sp)
 104f474:	80805217 	ldw	r2,328(r16)
 104f478:	2023883a 	mov	r17,r4
 104f47c:	10003626 	beq	r2,zero,104f558 <__register_exitproc+0x100>
 104f480:	10c00117 	ldw	r3,4(r2)
 104f484:	010007c4 	movi	r4,31
 104f488:	20c00e16 	blt	r4,r3,104f4c4 <__register_exitproc+0x6c>
 104f48c:	1a400044 	addi	r9,r3,1
 104f490:	8800211e 	bne	r17,zero,104f518 <__register_exitproc+0xc0>
 104f494:	18c00084 	addi	r3,r3,2
 104f498:	18c7883a 	add	r3,r3,r3
 104f49c:	18c7883a 	add	r3,r3,r3
 104f4a0:	12400115 	stw	r9,4(r2)
 104f4a4:	10c7883a 	add	r3,r2,r3
 104f4a8:	19400015 	stw	r5,0(r3)
 104f4ac:	0005883a 	mov	r2,zero
 104f4b0:	dfc00517 	ldw	ra,20(sp)
 104f4b4:	dc400417 	ldw	r17,16(sp)
 104f4b8:	dc000317 	ldw	r16,12(sp)
 104f4bc:	dec00604 	addi	sp,sp,24
 104f4c0:	f800283a 	ret
 104f4c4:	00800034 	movhi	r2,0
 104f4c8:	10800004 	addi	r2,r2,0
 104f4cc:	10002526 	beq	r2,zero,104f564 <__register_exitproc+0x10c>
 104f4d0:	01006404 	movi	r4,400
 104f4d4:	d9400015 	stw	r5,0(sp)
 104f4d8:	d9800115 	stw	r6,4(sp)
 104f4dc:	d9c00215 	stw	r7,8(sp)
 104f4e0:	00000000 	call	0 <__reset-0x1040000>
 104f4e4:	d9400017 	ldw	r5,0(sp)
 104f4e8:	d9800117 	ldw	r6,4(sp)
 104f4ec:	d9c00217 	ldw	r7,8(sp)
 104f4f0:	10001c26 	beq	r2,zero,104f564 <__register_exitproc+0x10c>
 104f4f4:	80c05217 	ldw	r3,328(r16)
 104f4f8:	10000115 	stw	zero,4(r2)
 104f4fc:	02400044 	movi	r9,1
 104f500:	10c00015 	stw	r3,0(r2)
 104f504:	80805215 	stw	r2,328(r16)
 104f508:	10006215 	stw	zero,392(r2)
 104f50c:	10006315 	stw	zero,396(r2)
 104f510:	0007883a 	mov	r3,zero
 104f514:	883fdf26 	beq	r17,zero,104f494 <__alt_data_end+0xfffef494>
 104f518:	18d1883a 	add	r8,r3,r3
 104f51c:	4211883a 	add	r8,r8,r8
 104f520:	1211883a 	add	r8,r2,r8
 104f524:	41802215 	stw	r6,136(r8)
 104f528:	01000044 	movi	r4,1
 104f52c:	11806217 	ldw	r6,392(r2)
 104f530:	20c8983a 	sll	r4,r4,r3
 104f534:	310cb03a 	or	r6,r6,r4
 104f538:	11806215 	stw	r6,392(r2)
 104f53c:	41c04215 	stw	r7,264(r8)
 104f540:	01800084 	movi	r6,2
 104f544:	89bfd31e 	bne	r17,r6,104f494 <__alt_data_end+0xfffef494>
 104f548:	11806317 	ldw	r6,396(r2)
 104f54c:	3108b03a 	or	r4,r6,r4
 104f550:	11006315 	stw	r4,396(r2)
 104f554:	003fcf06 	br	104f494 <__alt_data_end+0xfffef494>
 104f558:	80805304 	addi	r2,r16,332
 104f55c:	80805215 	stw	r2,328(r16)
 104f560:	003fc706 	br	104f480 <__alt_data_end+0xfffef480>
 104f564:	00bfffc4 	movi	r2,-1
 104f568:	003fd106 	br	104f4b0 <__alt_data_end+0xfffef4b0>

0104f56c <__call_exitprocs>:
 104f56c:	00804174 	movhi	r2,261
 104f570:	10854f04 	addi	r2,r2,5436
 104f574:	10800017 	ldw	r2,0(r2)
 104f578:	defff404 	addi	sp,sp,-48
 104f57c:	dd800815 	stw	r22,32(sp)
 104f580:	d8800015 	stw	r2,0(sp)
 104f584:	10805204 	addi	r2,r2,328
 104f588:	dd000615 	stw	r20,24(sp)
 104f58c:	dc800415 	stw	r18,16(sp)
 104f590:	dfc00b15 	stw	ra,44(sp)
 104f594:	df000a15 	stw	fp,40(sp)
 104f598:	ddc00915 	stw	r23,36(sp)
 104f59c:	dd400715 	stw	r21,28(sp)
 104f5a0:	dcc00515 	stw	r19,20(sp)
 104f5a4:	dc400315 	stw	r17,12(sp)
 104f5a8:	dc000215 	stw	r16,8(sp)
 104f5ac:	2025883a 	mov	r18,r4
 104f5b0:	2829883a 	mov	r20,r5
 104f5b4:	d8800115 	stw	r2,4(sp)
 104f5b8:	05bfffc4 	movi	r22,-1
 104f5bc:	d8800017 	ldw	r2,0(sp)
 104f5c0:	14c05217 	ldw	r19,328(r2)
 104f5c4:	98001d26 	beq	r19,zero,104f63c <__call_exitprocs+0xd0>
 104f5c8:	dd400117 	ldw	r21,4(sp)
 104f5cc:	98800117 	ldw	r2,4(r19)
 104f5d0:	173fffc4 	addi	fp,r2,-1
 104f5d4:	e0000d16 	blt	fp,zero,104f60c <__call_exitprocs+0xa0>
 104f5d8:	14000044 	addi	r16,r2,1
 104f5dc:	8421883a 	add	r16,r16,r16
 104f5e0:	8421883a 	add	r16,r16,r16
 104f5e4:	84402004 	addi	r17,r16,128
 104f5e8:	9c63883a 	add	r17,r19,r17
 104f5ec:	9c21883a 	add	r16,r19,r16
 104f5f0:	a0001e26 	beq	r20,zero,104f66c <__call_exitprocs+0x100>
 104f5f4:	80804017 	ldw	r2,256(r16)
 104f5f8:	15001c26 	beq	r2,r20,104f66c <__call_exitprocs+0x100>
 104f5fc:	e73fffc4 	addi	fp,fp,-1
 104f600:	843fff04 	addi	r16,r16,-4
 104f604:	8c7fff04 	addi	r17,r17,-4
 104f608:	e5bff91e 	bne	fp,r22,104f5f0 <__alt_data_end+0xfffef5f0>
 104f60c:	00800034 	movhi	r2,0
 104f610:	10800004 	addi	r2,r2,0
 104f614:	10000926 	beq	r2,zero,104f63c <__call_exitprocs+0xd0>
 104f618:	98800117 	ldw	r2,4(r19)
 104f61c:	1000311e 	bne	r2,zero,104f6e4 <__call_exitprocs+0x178>
 104f620:	98800017 	ldw	r2,0(r19)
 104f624:	10003426 	beq	r2,zero,104f6f8 <__call_exitprocs+0x18c>
 104f628:	9809883a 	mov	r4,r19
 104f62c:	a8800015 	stw	r2,0(r21)
 104f630:	00000000 	call	0 <__reset-0x1040000>
 104f634:	acc00017 	ldw	r19,0(r21)
 104f638:	983fe41e 	bne	r19,zero,104f5cc <__alt_data_end+0xfffef5cc>
 104f63c:	dfc00b17 	ldw	ra,44(sp)
 104f640:	df000a17 	ldw	fp,40(sp)
 104f644:	ddc00917 	ldw	r23,36(sp)
 104f648:	dd800817 	ldw	r22,32(sp)
 104f64c:	dd400717 	ldw	r21,28(sp)
 104f650:	dd000617 	ldw	r20,24(sp)
 104f654:	dcc00517 	ldw	r19,20(sp)
 104f658:	dc800417 	ldw	r18,16(sp)
 104f65c:	dc400317 	ldw	r17,12(sp)
 104f660:	dc000217 	ldw	r16,8(sp)
 104f664:	dec00c04 	addi	sp,sp,48
 104f668:	f800283a 	ret
 104f66c:	98800117 	ldw	r2,4(r19)
 104f670:	80c00017 	ldw	r3,0(r16)
 104f674:	10bfffc4 	addi	r2,r2,-1
 104f678:	17001526 	beq	r2,fp,104f6d0 <__call_exitprocs+0x164>
 104f67c:	80000015 	stw	zero,0(r16)
 104f680:	183fde26 	beq	r3,zero,104f5fc <__alt_data_end+0xfffef5fc>
 104f684:	00800044 	movi	r2,1
 104f688:	1708983a 	sll	r4,r2,fp
 104f68c:	98806217 	ldw	r2,392(r19)
 104f690:	9dc00117 	ldw	r23,4(r19)
 104f694:	2084703a 	and	r2,r4,r2
 104f698:	1000061e 	bne	r2,zero,104f6b4 <__call_exitprocs+0x148>
 104f69c:	183ee83a 	callr	r3
 104f6a0:	98800117 	ldw	r2,4(r19)
 104f6a4:	15ffc51e 	bne	r2,r23,104f5bc <__alt_data_end+0xfffef5bc>
 104f6a8:	a8800017 	ldw	r2,0(r21)
 104f6ac:	14ffd326 	beq	r2,r19,104f5fc <__alt_data_end+0xfffef5fc>
 104f6b0:	003fc206 	br	104f5bc <__alt_data_end+0xfffef5bc>
 104f6b4:	98806317 	ldw	r2,396(r19)
 104f6b8:	2084703a 	and	r2,r4,r2
 104f6bc:	1000061e 	bne	r2,zero,104f6d8 <__call_exitprocs+0x16c>
 104f6c0:	89400017 	ldw	r5,0(r17)
 104f6c4:	9009883a 	mov	r4,r18
 104f6c8:	183ee83a 	callr	r3
 104f6cc:	003ff406 	br	104f6a0 <__alt_data_end+0xfffef6a0>
 104f6d0:	9f000115 	stw	fp,4(r19)
 104f6d4:	003fea06 	br	104f680 <__alt_data_end+0xfffef680>
 104f6d8:	89000017 	ldw	r4,0(r17)
 104f6dc:	183ee83a 	callr	r3
 104f6e0:	003fef06 	br	104f6a0 <__alt_data_end+0xfffef6a0>
 104f6e4:	98800017 	ldw	r2,0(r19)
 104f6e8:	982b883a 	mov	r21,r19
 104f6ec:	1027883a 	mov	r19,r2
 104f6f0:	983fb61e 	bne	r19,zero,104f5cc <__alt_data_end+0xfffef5cc>
 104f6f4:	003fd106 	br	104f63c <__alt_data_end+0xfffef63c>
 104f6f8:	0005883a 	mov	r2,zero
 104f6fc:	003ffa06 	br	104f6e8 <__alt_data_end+0xfffef6e8>

0104f700 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 104f700:	defffd04 	addi	sp,sp,-12
 104f704:	df000215 	stw	fp,8(sp)
 104f708:	df000204 	addi	fp,sp,8
 104f70c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 104f710:	0001883a 	nop
 104f714:	e0bfff17 	ldw	r2,-4(fp)
 104f718:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 104f71c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 104f720:	10000226 	beq	r2,zero,104f72c <_exit+0x2c>
    ALT_SIM_FAIL();
 104f724:	002af070 	cmpltui	zero,zero,43969
 104f728:	00000106 	br	104f730 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 104f72c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 104f730:	003fff06 	br	104f730 <__alt_data_end+0xfffef730>
