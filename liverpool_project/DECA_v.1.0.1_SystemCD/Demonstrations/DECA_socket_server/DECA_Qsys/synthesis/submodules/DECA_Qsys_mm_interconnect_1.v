// DECA_Qsys_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module DECA_Qsys_mm_interconnect_1 (
		input  wire        pll_c0_clk,                                              //                                            pll_c0.clk
		input  wire        pll_c2_clk,                                              //                                            pll_c2.clk
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,             //             jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset, // slow_periph_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire [9:0]  slow_periph_bridge_m0_address,                           //                             slow_periph_bridge_m0.address
		output wire        slow_periph_bridge_m0_waitrequest,                       //                                                  .waitrequest
		input  wire [0:0]  slow_periph_bridge_m0_burstcount,                        //                                                  .burstcount
		input  wire [3:0]  slow_periph_bridge_m0_byteenable,                        //                                                  .byteenable
		input  wire        slow_periph_bridge_m0_read,                              //                                                  .read
		output wire [31:0] slow_periph_bridge_m0_readdata,                          //                                                  .readdata
		output wire        slow_periph_bridge_m0_readdatavalid,                     //                                                  .readdatavalid
		input  wire        slow_periph_bridge_m0_write,                             //                                                  .write
		input  wire [31:0] slow_periph_bridge_m0_writedata,                         //                                                  .writedata
		input  wire        slow_periph_bridge_m0_debugaccess,                       //                                                  .debugaccess
		output wire [1:0]  ddr3_status_s1_address,                                  //                                    ddr3_status_s1.address
		input  wire [31:0] ddr3_status_s1_readdata,                                 //                                                  .readdata
		output wire [1:0]  dipsw_pio_s1_address,                                    //                                      dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                      //                                                  .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                   //                                                  .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                  //                                                  .writedata
		output wire        dipsw_pio_s1_chipselect,                                 //                                                  .chipselect
		output wire [2:0]  high_res_timer_s1_address,                               //                                 high_res_timer_s1.address
		output wire        high_res_timer_s1_write,                                 //                                                  .write
		input  wire [15:0] high_res_timer_s1_readdata,                              //                                                  .readdata
		output wire [15:0] high_res_timer_s1_writedata,                             //                                                  .writedata
		output wire        high_res_timer_s1_chipselect,                            //                                                  .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                     //                       jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                       //                                                  .write
		output wire        jtag_uart_avalon_jtag_slave_read,                        //                                                  .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                    //                                                  .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                   //                                                  .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                 //                                                  .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                  //                                                  .chipselect
		output wire [1:0]  led_pio_s1_address,                                      //                                        led_pio_s1.address
		output wire        led_pio_s1_write,                                        //                                                  .write
		input  wire [31:0] led_pio_s1_readdata,                                     //                                                  .readdata
		output wire [31:0] led_pio_s1_writedata,                                    //                                                  .writedata
		output wire        led_pio_s1_chipselect,                                   //                                                  .chipselect
		output wire [1:0]  nENET_reg_reset_s1_address,                              //                                nENET_reg_reset_s1.address
		output wire        nENET_reg_reset_s1_write,                                //                                                  .write
		input  wire [31:0] nENET_reg_reset_s1_readdata,                             //                                                  .readdata
		output wire [31:0] nENET_reg_reset_s1_writedata,                            //                                                  .writedata
		output wire        nENET_reg_reset_s1_chipselect,                           //                                                  .chipselect
		output wire [3:0]  performance_counter_control_slave_address,               //                 performance_counter_control_slave.address
		output wire        performance_counter_control_slave_write,                 //                                                  .write
		input  wire [31:0] performance_counter_control_slave_readdata,              //                                                  .readdata
		output wire [31:0] performance_counter_control_slave_writedata,             //                                                  .writedata
		output wire        performance_counter_control_slave_begintransfer,         //                                                  .begintransfer
		output wire [2:0]  sys_timer_s1_address,                                    //                                      sys_timer_s1.address
		output wire        sys_timer_s1_write,                                      //                                                  .write
		input  wire [15:0] sys_timer_s1_readdata,                                   //                                                  .readdata
		output wire [15:0] sys_timer_s1_writedata,                                  //                                                  .writedata
		output wire        sys_timer_s1_chipselect,                                 //                                                  .chipselect
		output wire [0:0]  sysid_control_slave_address,                             //                               sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                            //                                                  .readdata
		output wire [1:0]  user_pio_pushbtn_s1_address,                             //                               user_pio_pushbtn_s1.address
		input  wire [31:0] user_pio_pushbtn_s1_readdata                             //                                                  .readdata
	);

	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // slow_periph_bridge_m0_agent:av_waitrequest -> slow_periph_bridge_m0_translator:uav_waitrequest
	wire  [31:0] slow_periph_bridge_m0_translator_avalon_universal_master_0_readdata;      // slow_periph_bridge_m0_agent:av_readdata -> slow_periph_bridge_m0_translator:uav_readdata
	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // slow_periph_bridge_m0_translator:uav_debugaccess -> slow_periph_bridge_m0_agent:av_debugaccess
	wire   [9:0] slow_periph_bridge_m0_translator_avalon_universal_master_0_address;       // slow_periph_bridge_m0_translator:uav_address -> slow_periph_bridge_m0_agent:av_address
	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_read;          // slow_periph_bridge_m0_translator:uav_read -> slow_periph_bridge_m0_agent:av_read
	wire   [3:0] slow_periph_bridge_m0_translator_avalon_universal_master_0_byteenable;    // slow_periph_bridge_m0_translator:uav_byteenable -> slow_periph_bridge_m0_agent:av_byteenable
	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // slow_periph_bridge_m0_agent:av_readdatavalid -> slow_periph_bridge_m0_translator:uav_readdatavalid
	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_lock;          // slow_periph_bridge_m0_translator:uav_lock -> slow_periph_bridge_m0_agent:av_lock
	wire         slow_periph_bridge_m0_translator_avalon_universal_master_0_write;         // slow_periph_bridge_m0_translator:uav_write -> slow_periph_bridge_m0_agent:av_write
	wire  [31:0] slow_periph_bridge_m0_translator_avalon_universal_master_0_writedata;     // slow_periph_bridge_m0_translator:uav_writedata -> slow_periph_bridge_m0_agent:av_writedata
	wire   [2:0] slow_periph_bridge_m0_translator_avalon_universal_master_0_burstcount;    // slow_periph_bridge_m0_translator:uav_burstcount -> slow_periph_bridge_m0_agent:av_burstcount
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                            // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                         // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                         // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [9:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                             // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                          // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                       // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                           // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                               // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                          // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [86:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                        // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                  // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [86:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                     // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                   // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                   // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [85:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                        // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [9:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] performance_counter_control_slave_agent_m0_readdata;                      // performance_counter_control_slave_translator:uav_readdata -> performance_counter_control_slave_agent:m0_readdata
	wire         performance_counter_control_slave_agent_m0_waitrequest;                   // performance_counter_control_slave_translator:uav_waitrequest -> performance_counter_control_slave_agent:m0_waitrequest
	wire         performance_counter_control_slave_agent_m0_debugaccess;                   // performance_counter_control_slave_agent:m0_debugaccess -> performance_counter_control_slave_translator:uav_debugaccess
	wire   [9:0] performance_counter_control_slave_agent_m0_address;                       // performance_counter_control_slave_agent:m0_address -> performance_counter_control_slave_translator:uav_address
	wire   [3:0] performance_counter_control_slave_agent_m0_byteenable;                    // performance_counter_control_slave_agent:m0_byteenable -> performance_counter_control_slave_translator:uav_byteenable
	wire         performance_counter_control_slave_agent_m0_read;                          // performance_counter_control_slave_agent:m0_read -> performance_counter_control_slave_translator:uav_read
	wire         performance_counter_control_slave_agent_m0_readdatavalid;                 // performance_counter_control_slave_translator:uav_readdatavalid -> performance_counter_control_slave_agent:m0_readdatavalid
	wire         performance_counter_control_slave_agent_m0_lock;                          // performance_counter_control_slave_agent:m0_lock -> performance_counter_control_slave_translator:uav_lock
	wire  [31:0] performance_counter_control_slave_agent_m0_writedata;                     // performance_counter_control_slave_agent:m0_writedata -> performance_counter_control_slave_translator:uav_writedata
	wire         performance_counter_control_slave_agent_m0_write;                         // performance_counter_control_slave_agent:m0_write -> performance_counter_control_slave_translator:uav_write
	wire   [2:0] performance_counter_control_slave_agent_m0_burstcount;                    // performance_counter_control_slave_agent:m0_burstcount -> performance_counter_control_slave_translator:uav_burstcount
	wire         performance_counter_control_slave_agent_rf_source_valid;                  // performance_counter_control_slave_agent:rf_source_valid -> performance_counter_control_slave_agent_rsp_fifo:in_valid
	wire  [86:0] performance_counter_control_slave_agent_rf_source_data;                   // performance_counter_control_slave_agent:rf_source_data -> performance_counter_control_slave_agent_rsp_fifo:in_data
	wire         performance_counter_control_slave_agent_rf_source_ready;                  // performance_counter_control_slave_agent_rsp_fifo:in_ready -> performance_counter_control_slave_agent:rf_source_ready
	wire         performance_counter_control_slave_agent_rf_source_startofpacket;          // performance_counter_control_slave_agent:rf_source_startofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire         performance_counter_control_slave_agent_rf_source_endofpacket;            // performance_counter_control_slave_agent:rf_source_endofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire         performance_counter_control_slave_agent_rsp_fifo_out_valid;               // performance_counter_control_slave_agent_rsp_fifo:out_valid -> performance_counter_control_slave_agent:rf_sink_valid
	wire  [86:0] performance_counter_control_slave_agent_rsp_fifo_out_data;                // performance_counter_control_slave_agent_rsp_fifo:out_data -> performance_counter_control_slave_agent:rf_sink_data
	wire         performance_counter_control_slave_agent_rsp_fifo_out_ready;               // performance_counter_control_slave_agent:rf_sink_ready -> performance_counter_control_slave_agent_rsp_fifo:out_ready
	wire         performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;       // performance_counter_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_control_slave_agent:rf_sink_startofpacket
	wire         performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;         // performance_counter_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> performance_counter_control_slave_agent:cp_valid
	wire  [85:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> performance_counter_control_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                    // performance_counter_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [9:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> performance_counter_control_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> performance_counter_control_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> performance_counter_control_slave_agent:cp_endofpacket
	wire  [31:0] sysid_control_slave_agent_m0_readdata;                                    // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire         sysid_control_slave_agent_m0_waitrequest;                                 // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire         sysid_control_slave_agent_m0_debugaccess;                                 // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [9:0] sysid_control_slave_agent_m0_address;                                     // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire   [3:0] sysid_control_slave_agent_m0_byteenable;                                  // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire         sysid_control_slave_agent_m0_read;                                        // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire         sysid_control_slave_agent_m0_readdatavalid;                               // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire         sysid_control_slave_agent_m0_lock;                                        // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire  [31:0] sysid_control_slave_agent_m0_writedata;                                   // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire         sysid_control_slave_agent_m0_write;                                       // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire   [2:0] sysid_control_slave_agent_m0_burstcount;                                  // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire         sysid_control_slave_agent_rf_source_valid;                                // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [86:0] sysid_control_slave_agent_rf_source_data;                                 // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire         sysid_control_slave_agent_rf_source_ready;                                // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire         sysid_control_slave_agent_rf_source_startofpacket;                        // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_control_slave_agent_rf_source_endofpacket;                          // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_valid;                             // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [86:0] sysid_control_slave_agent_rsp_fifo_out_data;                              // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire         sysid_control_slave_agent_rsp_fifo_out_ready;                             // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_control_slave_agent_rsp_fifo_out_startofpacket;                     // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_endofpacket;                       // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                    // cmd_mux_002:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [85:0] cmd_mux_002_src_data;                                                     // cmd_mux_002:src_data -> sysid_control_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                    // sysid_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [9:0] cmd_mux_002_src_channel;                                                  // cmd_mux_002:src_channel -> sysid_control_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                            // cmd_mux_002:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                              // cmd_mux_002:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire  [31:0] sys_timer_s1_agent_m0_readdata;                                           // sys_timer_s1_translator:uav_readdata -> sys_timer_s1_agent:m0_readdata
	wire         sys_timer_s1_agent_m0_waitrequest;                                        // sys_timer_s1_translator:uav_waitrequest -> sys_timer_s1_agent:m0_waitrequest
	wire         sys_timer_s1_agent_m0_debugaccess;                                        // sys_timer_s1_agent:m0_debugaccess -> sys_timer_s1_translator:uav_debugaccess
	wire   [9:0] sys_timer_s1_agent_m0_address;                                            // sys_timer_s1_agent:m0_address -> sys_timer_s1_translator:uav_address
	wire   [3:0] sys_timer_s1_agent_m0_byteenable;                                         // sys_timer_s1_agent:m0_byteenable -> sys_timer_s1_translator:uav_byteenable
	wire         sys_timer_s1_agent_m0_read;                                               // sys_timer_s1_agent:m0_read -> sys_timer_s1_translator:uav_read
	wire         sys_timer_s1_agent_m0_readdatavalid;                                      // sys_timer_s1_translator:uav_readdatavalid -> sys_timer_s1_agent:m0_readdatavalid
	wire         sys_timer_s1_agent_m0_lock;                                               // sys_timer_s1_agent:m0_lock -> sys_timer_s1_translator:uav_lock
	wire  [31:0] sys_timer_s1_agent_m0_writedata;                                          // sys_timer_s1_agent:m0_writedata -> sys_timer_s1_translator:uav_writedata
	wire         sys_timer_s1_agent_m0_write;                                              // sys_timer_s1_agent:m0_write -> sys_timer_s1_translator:uav_write
	wire   [2:0] sys_timer_s1_agent_m0_burstcount;                                         // sys_timer_s1_agent:m0_burstcount -> sys_timer_s1_translator:uav_burstcount
	wire         sys_timer_s1_agent_rf_source_valid;                                       // sys_timer_s1_agent:rf_source_valid -> sys_timer_s1_agent_rsp_fifo:in_valid
	wire  [86:0] sys_timer_s1_agent_rf_source_data;                                        // sys_timer_s1_agent:rf_source_data -> sys_timer_s1_agent_rsp_fifo:in_data
	wire         sys_timer_s1_agent_rf_source_ready;                                       // sys_timer_s1_agent_rsp_fifo:in_ready -> sys_timer_s1_agent:rf_source_ready
	wire         sys_timer_s1_agent_rf_source_startofpacket;                               // sys_timer_s1_agent:rf_source_startofpacket -> sys_timer_s1_agent_rsp_fifo:in_startofpacket
	wire         sys_timer_s1_agent_rf_source_endofpacket;                                 // sys_timer_s1_agent:rf_source_endofpacket -> sys_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         sys_timer_s1_agent_rsp_fifo_out_valid;                                    // sys_timer_s1_agent_rsp_fifo:out_valid -> sys_timer_s1_agent:rf_sink_valid
	wire  [86:0] sys_timer_s1_agent_rsp_fifo_out_data;                                     // sys_timer_s1_agent_rsp_fifo:out_data -> sys_timer_s1_agent:rf_sink_data
	wire         sys_timer_s1_agent_rsp_fifo_out_ready;                                    // sys_timer_s1_agent:rf_sink_ready -> sys_timer_s1_agent_rsp_fifo:out_ready
	wire         sys_timer_s1_agent_rsp_fifo_out_startofpacket;                            // sys_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_timer_s1_agent:rf_sink_startofpacket
	wire         sys_timer_s1_agent_rsp_fifo_out_endofpacket;                              // sys_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                    // cmd_mux_003:src_valid -> sys_timer_s1_agent:cp_valid
	wire  [85:0] cmd_mux_003_src_data;                                                     // cmd_mux_003:src_data -> sys_timer_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                    // sys_timer_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [9:0] cmd_mux_003_src_channel;                                                  // cmd_mux_003:src_channel -> sys_timer_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                            // cmd_mux_003:src_startofpacket -> sys_timer_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                              // cmd_mux_003:src_endofpacket -> sys_timer_s1_agent:cp_endofpacket
	wire  [31:0] high_res_timer_s1_agent_m0_readdata;                                      // high_res_timer_s1_translator:uav_readdata -> high_res_timer_s1_agent:m0_readdata
	wire         high_res_timer_s1_agent_m0_waitrequest;                                   // high_res_timer_s1_translator:uav_waitrequest -> high_res_timer_s1_agent:m0_waitrequest
	wire         high_res_timer_s1_agent_m0_debugaccess;                                   // high_res_timer_s1_agent:m0_debugaccess -> high_res_timer_s1_translator:uav_debugaccess
	wire   [9:0] high_res_timer_s1_agent_m0_address;                                       // high_res_timer_s1_agent:m0_address -> high_res_timer_s1_translator:uav_address
	wire   [3:0] high_res_timer_s1_agent_m0_byteenable;                                    // high_res_timer_s1_agent:m0_byteenable -> high_res_timer_s1_translator:uav_byteenable
	wire         high_res_timer_s1_agent_m0_read;                                          // high_res_timer_s1_agent:m0_read -> high_res_timer_s1_translator:uav_read
	wire         high_res_timer_s1_agent_m0_readdatavalid;                                 // high_res_timer_s1_translator:uav_readdatavalid -> high_res_timer_s1_agent:m0_readdatavalid
	wire         high_res_timer_s1_agent_m0_lock;                                          // high_res_timer_s1_agent:m0_lock -> high_res_timer_s1_translator:uav_lock
	wire  [31:0] high_res_timer_s1_agent_m0_writedata;                                     // high_res_timer_s1_agent:m0_writedata -> high_res_timer_s1_translator:uav_writedata
	wire         high_res_timer_s1_agent_m0_write;                                         // high_res_timer_s1_agent:m0_write -> high_res_timer_s1_translator:uav_write
	wire   [2:0] high_res_timer_s1_agent_m0_burstcount;                                    // high_res_timer_s1_agent:m0_burstcount -> high_res_timer_s1_translator:uav_burstcount
	wire         high_res_timer_s1_agent_rf_source_valid;                                  // high_res_timer_s1_agent:rf_source_valid -> high_res_timer_s1_agent_rsp_fifo:in_valid
	wire  [86:0] high_res_timer_s1_agent_rf_source_data;                                   // high_res_timer_s1_agent:rf_source_data -> high_res_timer_s1_agent_rsp_fifo:in_data
	wire         high_res_timer_s1_agent_rf_source_ready;                                  // high_res_timer_s1_agent_rsp_fifo:in_ready -> high_res_timer_s1_agent:rf_source_ready
	wire         high_res_timer_s1_agent_rf_source_startofpacket;                          // high_res_timer_s1_agent:rf_source_startofpacket -> high_res_timer_s1_agent_rsp_fifo:in_startofpacket
	wire         high_res_timer_s1_agent_rf_source_endofpacket;                            // high_res_timer_s1_agent:rf_source_endofpacket -> high_res_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         high_res_timer_s1_agent_rsp_fifo_out_valid;                               // high_res_timer_s1_agent_rsp_fifo:out_valid -> high_res_timer_s1_agent:rf_sink_valid
	wire  [86:0] high_res_timer_s1_agent_rsp_fifo_out_data;                                // high_res_timer_s1_agent_rsp_fifo:out_data -> high_res_timer_s1_agent:rf_sink_data
	wire         high_res_timer_s1_agent_rsp_fifo_out_ready;                               // high_res_timer_s1_agent:rf_sink_ready -> high_res_timer_s1_agent_rsp_fifo:out_ready
	wire         high_res_timer_s1_agent_rsp_fifo_out_startofpacket;                       // high_res_timer_s1_agent_rsp_fifo:out_startofpacket -> high_res_timer_s1_agent:rf_sink_startofpacket
	wire         high_res_timer_s1_agent_rsp_fifo_out_endofpacket;                         // high_res_timer_s1_agent_rsp_fifo:out_endofpacket -> high_res_timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                    // cmd_mux_004:src_valid -> high_res_timer_s1_agent:cp_valid
	wire  [85:0] cmd_mux_004_src_data;                                                     // cmd_mux_004:src_data -> high_res_timer_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                    // high_res_timer_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [9:0] cmd_mux_004_src_channel;                                                  // cmd_mux_004:src_channel -> high_res_timer_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                            // cmd_mux_004:src_startofpacket -> high_res_timer_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                              // cmd_mux_004:src_endofpacket -> high_res_timer_s1_agent:cp_endofpacket
	wire  [31:0] led_pio_s1_agent_m0_readdata;                                             // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire         led_pio_s1_agent_m0_waitrequest;                                          // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire         led_pio_s1_agent_m0_debugaccess;                                          // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [9:0] led_pio_s1_agent_m0_address;                                              // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire   [3:0] led_pio_s1_agent_m0_byteenable;                                           // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire         led_pio_s1_agent_m0_read;                                                 // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire         led_pio_s1_agent_m0_readdatavalid;                                        // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire         led_pio_s1_agent_m0_lock;                                                 // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire  [31:0] led_pio_s1_agent_m0_writedata;                                            // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire         led_pio_s1_agent_m0_write;                                                // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire   [2:0] led_pio_s1_agent_m0_burstcount;                                           // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire         led_pio_s1_agent_rf_source_valid;                                         // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [86:0] led_pio_s1_agent_rf_source_data;                                          // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire         led_pio_s1_agent_rf_source_ready;                                         // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire         led_pio_s1_agent_rf_source_startofpacket;                                 // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         led_pio_s1_agent_rf_source_endofpacket;                                   // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_valid;                                      // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [86:0] led_pio_s1_agent_rsp_fifo_out_data;                                       // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire         led_pio_s1_agent_rsp_fifo_out_ready;                                      // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire         led_pio_s1_agent_rsp_fifo_out_startofpacket;                              // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_endofpacket;                                // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                    // cmd_mux_005:src_valid -> led_pio_s1_agent:cp_valid
	wire  [85:0] cmd_mux_005_src_data;                                                     // cmd_mux_005:src_data -> led_pio_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                    // led_pio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [9:0] cmd_mux_005_src_channel;                                                  // cmd_mux_005:src_channel -> led_pio_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                            // cmd_mux_005:src_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                              // cmd_mux_005:src_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire  [31:0] dipsw_pio_s1_agent_m0_readdata;                                           // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire         dipsw_pio_s1_agent_m0_waitrequest;                                        // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire         dipsw_pio_s1_agent_m0_debugaccess;                                        // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [9:0] dipsw_pio_s1_agent_m0_address;                                            // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire   [3:0] dipsw_pio_s1_agent_m0_byteenable;                                         // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire         dipsw_pio_s1_agent_m0_read;                                               // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire         dipsw_pio_s1_agent_m0_readdatavalid;                                      // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire         dipsw_pio_s1_agent_m0_lock;                                               // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire  [31:0] dipsw_pio_s1_agent_m0_writedata;                                          // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire         dipsw_pio_s1_agent_m0_write;                                              // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire   [2:0] dipsw_pio_s1_agent_m0_burstcount;                                         // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire         dipsw_pio_s1_agent_rf_source_valid;                                       // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [86:0] dipsw_pio_s1_agent_rf_source_data;                                        // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire         dipsw_pio_s1_agent_rf_source_ready;                                       // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire         dipsw_pio_s1_agent_rf_source_startofpacket;                               // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         dipsw_pio_s1_agent_rf_source_endofpacket;                                 // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         dipsw_pio_s1_agent_rsp_fifo_out_valid;                                    // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [86:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                     // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire         dipsw_pio_s1_agent_rsp_fifo_out_ready;                                    // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire         dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                            // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire         dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                              // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                    // cmd_mux_006:src_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [85:0] cmd_mux_006_src_data;                                                     // cmd_mux_006:src_data -> dipsw_pio_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                    // dipsw_pio_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [9:0] cmd_mux_006_src_channel;                                                  // cmd_mux_006:src_channel -> dipsw_pio_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                            // cmd_mux_006:src_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                              // cmd_mux_006:src_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire  [31:0] user_pio_pushbtn_s1_agent_m0_readdata;                                    // user_pio_pushbtn_s1_translator:uav_readdata -> user_pio_pushbtn_s1_agent:m0_readdata
	wire         user_pio_pushbtn_s1_agent_m0_waitrequest;                                 // user_pio_pushbtn_s1_translator:uav_waitrequest -> user_pio_pushbtn_s1_agent:m0_waitrequest
	wire         user_pio_pushbtn_s1_agent_m0_debugaccess;                                 // user_pio_pushbtn_s1_agent:m0_debugaccess -> user_pio_pushbtn_s1_translator:uav_debugaccess
	wire   [9:0] user_pio_pushbtn_s1_agent_m0_address;                                     // user_pio_pushbtn_s1_agent:m0_address -> user_pio_pushbtn_s1_translator:uav_address
	wire   [3:0] user_pio_pushbtn_s1_agent_m0_byteenable;                                  // user_pio_pushbtn_s1_agent:m0_byteenable -> user_pio_pushbtn_s1_translator:uav_byteenable
	wire         user_pio_pushbtn_s1_agent_m0_read;                                        // user_pio_pushbtn_s1_agent:m0_read -> user_pio_pushbtn_s1_translator:uav_read
	wire         user_pio_pushbtn_s1_agent_m0_readdatavalid;                               // user_pio_pushbtn_s1_translator:uav_readdatavalid -> user_pio_pushbtn_s1_agent:m0_readdatavalid
	wire         user_pio_pushbtn_s1_agent_m0_lock;                                        // user_pio_pushbtn_s1_agent:m0_lock -> user_pio_pushbtn_s1_translator:uav_lock
	wire  [31:0] user_pio_pushbtn_s1_agent_m0_writedata;                                   // user_pio_pushbtn_s1_agent:m0_writedata -> user_pio_pushbtn_s1_translator:uav_writedata
	wire         user_pio_pushbtn_s1_agent_m0_write;                                       // user_pio_pushbtn_s1_agent:m0_write -> user_pio_pushbtn_s1_translator:uav_write
	wire   [2:0] user_pio_pushbtn_s1_agent_m0_burstcount;                                  // user_pio_pushbtn_s1_agent:m0_burstcount -> user_pio_pushbtn_s1_translator:uav_burstcount
	wire         user_pio_pushbtn_s1_agent_rf_source_valid;                                // user_pio_pushbtn_s1_agent:rf_source_valid -> user_pio_pushbtn_s1_agent_rsp_fifo:in_valid
	wire  [86:0] user_pio_pushbtn_s1_agent_rf_source_data;                                 // user_pio_pushbtn_s1_agent:rf_source_data -> user_pio_pushbtn_s1_agent_rsp_fifo:in_data
	wire         user_pio_pushbtn_s1_agent_rf_source_ready;                                // user_pio_pushbtn_s1_agent_rsp_fifo:in_ready -> user_pio_pushbtn_s1_agent:rf_source_ready
	wire         user_pio_pushbtn_s1_agent_rf_source_startofpacket;                        // user_pio_pushbtn_s1_agent:rf_source_startofpacket -> user_pio_pushbtn_s1_agent_rsp_fifo:in_startofpacket
	wire         user_pio_pushbtn_s1_agent_rf_source_endofpacket;                          // user_pio_pushbtn_s1_agent:rf_source_endofpacket -> user_pio_pushbtn_s1_agent_rsp_fifo:in_endofpacket
	wire         user_pio_pushbtn_s1_agent_rsp_fifo_out_valid;                             // user_pio_pushbtn_s1_agent_rsp_fifo:out_valid -> user_pio_pushbtn_s1_agent:rf_sink_valid
	wire  [86:0] user_pio_pushbtn_s1_agent_rsp_fifo_out_data;                              // user_pio_pushbtn_s1_agent_rsp_fifo:out_data -> user_pio_pushbtn_s1_agent:rf_sink_data
	wire         user_pio_pushbtn_s1_agent_rsp_fifo_out_ready;                             // user_pio_pushbtn_s1_agent:rf_sink_ready -> user_pio_pushbtn_s1_agent_rsp_fifo:out_ready
	wire         user_pio_pushbtn_s1_agent_rsp_fifo_out_startofpacket;                     // user_pio_pushbtn_s1_agent_rsp_fifo:out_startofpacket -> user_pio_pushbtn_s1_agent:rf_sink_startofpacket
	wire         user_pio_pushbtn_s1_agent_rsp_fifo_out_endofpacket;                       // user_pio_pushbtn_s1_agent_rsp_fifo:out_endofpacket -> user_pio_pushbtn_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                    // cmd_mux_007:src_valid -> user_pio_pushbtn_s1_agent:cp_valid
	wire  [85:0] cmd_mux_007_src_data;                                                     // cmd_mux_007:src_data -> user_pio_pushbtn_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                    // user_pio_pushbtn_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [9:0] cmd_mux_007_src_channel;                                                  // cmd_mux_007:src_channel -> user_pio_pushbtn_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                            // cmd_mux_007:src_startofpacket -> user_pio_pushbtn_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                              // cmd_mux_007:src_endofpacket -> user_pio_pushbtn_s1_agent:cp_endofpacket
	wire  [31:0] nenet_reg_reset_s1_agent_m0_readdata;                                     // nENET_reg_reset_s1_translator:uav_readdata -> nENET_reg_reset_s1_agent:m0_readdata
	wire         nenet_reg_reset_s1_agent_m0_waitrequest;                                  // nENET_reg_reset_s1_translator:uav_waitrequest -> nENET_reg_reset_s1_agent:m0_waitrequest
	wire         nenet_reg_reset_s1_agent_m0_debugaccess;                                  // nENET_reg_reset_s1_agent:m0_debugaccess -> nENET_reg_reset_s1_translator:uav_debugaccess
	wire   [9:0] nenet_reg_reset_s1_agent_m0_address;                                      // nENET_reg_reset_s1_agent:m0_address -> nENET_reg_reset_s1_translator:uav_address
	wire   [3:0] nenet_reg_reset_s1_agent_m0_byteenable;                                   // nENET_reg_reset_s1_agent:m0_byteenable -> nENET_reg_reset_s1_translator:uav_byteenable
	wire         nenet_reg_reset_s1_agent_m0_read;                                         // nENET_reg_reset_s1_agent:m0_read -> nENET_reg_reset_s1_translator:uav_read
	wire         nenet_reg_reset_s1_agent_m0_readdatavalid;                                // nENET_reg_reset_s1_translator:uav_readdatavalid -> nENET_reg_reset_s1_agent:m0_readdatavalid
	wire         nenet_reg_reset_s1_agent_m0_lock;                                         // nENET_reg_reset_s1_agent:m0_lock -> nENET_reg_reset_s1_translator:uav_lock
	wire  [31:0] nenet_reg_reset_s1_agent_m0_writedata;                                    // nENET_reg_reset_s1_agent:m0_writedata -> nENET_reg_reset_s1_translator:uav_writedata
	wire         nenet_reg_reset_s1_agent_m0_write;                                        // nENET_reg_reset_s1_agent:m0_write -> nENET_reg_reset_s1_translator:uav_write
	wire   [2:0] nenet_reg_reset_s1_agent_m0_burstcount;                                   // nENET_reg_reset_s1_agent:m0_burstcount -> nENET_reg_reset_s1_translator:uav_burstcount
	wire         nenet_reg_reset_s1_agent_rf_source_valid;                                 // nENET_reg_reset_s1_agent:rf_source_valid -> nENET_reg_reset_s1_agent_rsp_fifo:in_valid
	wire  [86:0] nenet_reg_reset_s1_agent_rf_source_data;                                  // nENET_reg_reset_s1_agent:rf_source_data -> nENET_reg_reset_s1_agent_rsp_fifo:in_data
	wire         nenet_reg_reset_s1_agent_rf_source_ready;                                 // nENET_reg_reset_s1_agent_rsp_fifo:in_ready -> nENET_reg_reset_s1_agent:rf_source_ready
	wire         nenet_reg_reset_s1_agent_rf_source_startofpacket;                         // nENET_reg_reset_s1_agent:rf_source_startofpacket -> nENET_reg_reset_s1_agent_rsp_fifo:in_startofpacket
	wire         nenet_reg_reset_s1_agent_rf_source_endofpacket;                           // nENET_reg_reset_s1_agent:rf_source_endofpacket -> nENET_reg_reset_s1_agent_rsp_fifo:in_endofpacket
	wire         nenet_reg_reset_s1_agent_rsp_fifo_out_valid;                              // nENET_reg_reset_s1_agent_rsp_fifo:out_valid -> nENET_reg_reset_s1_agent:rf_sink_valid
	wire  [86:0] nenet_reg_reset_s1_agent_rsp_fifo_out_data;                               // nENET_reg_reset_s1_agent_rsp_fifo:out_data -> nENET_reg_reset_s1_agent:rf_sink_data
	wire         nenet_reg_reset_s1_agent_rsp_fifo_out_ready;                              // nENET_reg_reset_s1_agent:rf_sink_ready -> nENET_reg_reset_s1_agent_rsp_fifo:out_ready
	wire         nenet_reg_reset_s1_agent_rsp_fifo_out_startofpacket;                      // nENET_reg_reset_s1_agent_rsp_fifo:out_startofpacket -> nENET_reg_reset_s1_agent:rf_sink_startofpacket
	wire         nenet_reg_reset_s1_agent_rsp_fifo_out_endofpacket;                        // nENET_reg_reset_s1_agent_rsp_fifo:out_endofpacket -> nENET_reg_reset_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                    // cmd_mux_008:src_valid -> nENET_reg_reset_s1_agent:cp_valid
	wire  [85:0] cmd_mux_008_src_data;                                                     // cmd_mux_008:src_data -> nENET_reg_reset_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                    // nENET_reg_reset_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [9:0] cmd_mux_008_src_channel;                                                  // cmd_mux_008:src_channel -> nENET_reg_reset_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                            // cmd_mux_008:src_startofpacket -> nENET_reg_reset_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                              // cmd_mux_008:src_endofpacket -> nENET_reg_reset_s1_agent:cp_endofpacket
	wire  [31:0] ddr3_status_s1_agent_m0_readdata;                                         // ddr3_status_s1_translator:uav_readdata -> ddr3_status_s1_agent:m0_readdata
	wire         ddr3_status_s1_agent_m0_waitrequest;                                      // ddr3_status_s1_translator:uav_waitrequest -> ddr3_status_s1_agent:m0_waitrequest
	wire         ddr3_status_s1_agent_m0_debugaccess;                                      // ddr3_status_s1_agent:m0_debugaccess -> ddr3_status_s1_translator:uav_debugaccess
	wire   [9:0] ddr3_status_s1_agent_m0_address;                                          // ddr3_status_s1_agent:m0_address -> ddr3_status_s1_translator:uav_address
	wire   [3:0] ddr3_status_s1_agent_m0_byteenable;                                       // ddr3_status_s1_agent:m0_byteenable -> ddr3_status_s1_translator:uav_byteenable
	wire         ddr3_status_s1_agent_m0_read;                                             // ddr3_status_s1_agent:m0_read -> ddr3_status_s1_translator:uav_read
	wire         ddr3_status_s1_agent_m0_readdatavalid;                                    // ddr3_status_s1_translator:uav_readdatavalid -> ddr3_status_s1_agent:m0_readdatavalid
	wire         ddr3_status_s1_agent_m0_lock;                                             // ddr3_status_s1_agent:m0_lock -> ddr3_status_s1_translator:uav_lock
	wire  [31:0] ddr3_status_s1_agent_m0_writedata;                                        // ddr3_status_s1_agent:m0_writedata -> ddr3_status_s1_translator:uav_writedata
	wire         ddr3_status_s1_agent_m0_write;                                            // ddr3_status_s1_agent:m0_write -> ddr3_status_s1_translator:uav_write
	wire   [2:0] ddr3_status_s1_agent_m0_burstcount;                                       // ddr3_status_s1_agent:m0_burstcount -> ddr3_status_s1_translator:uav_burstcount
	wire         ddr3_status_s1_agent_rf_source_valid;                                     // ddr3_status_s1_agent:rf_source_valid -> ddr3_status_s1_agent_rsp_fifo:in_valid
	wire  [86:0] ddr3_status_s1_agent_rf_source_data;                                      // ddr3_status_s1_agent:rf_source_data -> ddr3_status_s1_agent_rsp_fifo:in_data
	wire         ddr3_status_s1_agent_rf_source_ready;                                     // ddr3_status_s1_agent_rsp_fifo:in_ready -> ddr3_status_s1_agent:rf_source_ready
	wire         ddr3_status_s1_agent_rf_source_startofpacket;                             // ddr3_status_s1_agent:rf_source_startofpacket -> ddr3_status_s1_agent_rsp_fifo:in_startofpacket
	wire         ddr3_status_s1_agent_rf_source_endofpacket;                               // ddr3_status_s1_agent:rf_source_endofpacket -> ddr3_status_s1_agent_rsp_fifo:in_endofpacket
	wire         ddr3_status_s1_agent_rsp_fifo_out_valid;                                  // ddr3_status_s1_agent_rsp_fifo:out_valid -> ddr3_status_s1_agent:rf_sink_valid
	wire  [86:0] ddr3_status_s1_agent_rsp_fifo_out_data;                                   // ddr3_status_s1_agent_rsp_fifo:out_data -> ddr3_status_s1_agent:rf_sink_data
	wire         ddr3_status_s1_agent_rsp_fifo_out_ready;                                  // ddr3_status_s1_agent:rf_sink_ready -> ddr3_status_s1_agent_rsp_fifo:out_ready
	wire         ddr3_status_s1_agent_rsp_fifo_out_startofpacket;                          // ddr3_status_s1_agent_rsp_fifo:out_startofpacket -> ddr3_status_s1_agent:rf_sink_startofpacket
	wire         ddr3_status_s1_agent_rsp_fifo_out_endofpacket;                            // ddr3_status_s1_agent_rsp_fifo:out_endofpacket -> ddr3_status_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                    // cmd_mux_009:src_valid -> ddr3_status_s1_agent:cp_valid
	wire  [85:0] cmd_mux_009_src_data;                                                     // cmd_mux_009:src_data -> ddr3_status_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                    // ddr3_status_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [9:0] cmd_mux_009_src_channel;                                                  // cmd_mux_009:src_channel -> ddr3_status_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                            // cmd_mux_009:src_startofpacket -> ddr3_status_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                              // cmd_mux_009:src_endofpacket -> ddr3_status_s1_agent:cp_endofpacket
	wire         slow_periph_bridge_m0_agent_cp_valid;                                     // slow_periph_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [85:0] slow_periph_bridge_m0_agent_cp_data;                                      // slow_periph_bridge_m0_agent:cp_data -> router:sink_data
	wire         slow_periph_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> slow_periph_bridge_m0_agent:cp_ready
	wire         slow_periph_bridge_m0_agent_cp_startofpacket;                             // slow_periph_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         slow_periph_bridge_m0_agent_cp_endofpacket;                               // slow_periph_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                               // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_001:sink_valid
	wire  [85:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_001:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                               // router_001:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                       // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                         // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                     // router_001:src_valid -> rsp_demux:sink_valid
	wire  [85:0] router_001_src_data;                                                      // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                     // rsp_demux:sink_ready -> router_001:src_ready
	wire   [9:0] router_001_src_channel;                                                   // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                             // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                               // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         performance_counter_control_slave_agent_rp_valid;                         // performance_counter_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [85:0] performance_counter_control_slave_agent_rp_data;                          // performance_counter_control_slave_agent:rp_data -> router_002:sink_data
	wire         performance_counter_control_slave_agent_rp_ready;                         // router_002:sink_ready -> performance_counter_control_slave_agent:rp_ready
	wire         performance_counter_control_slave_agent_rp_startofpacket;                 // performance_counter_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         performance_counter_control_slave_agent_rp_endofpacket;                   // performance_counter_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                     // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [85:0] router_002_src_data;                                                      // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                     // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [9:0] router_002_src_channel;                                                   // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                             // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                               // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         sysid_control_slave_agent_rp_valid;                                       // sysid_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [85:0] sysid_control_slave_agent_rp_data;                                        // sysid_control_slave_agent:rp_data -> router_003:sink_data
	wire         sysid_control_slave_agent_rp_ready;                                       // router_003:sink_ready -> sysid_control_slave_agent:rp_ready
	wire         sysid_control_slave_agent_rp_startofpacket;                               // sysid_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sysid_control_slave_agent_rp_endofpacket;                                 // sysid_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                     // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [85:0] router_003_src_data;                                                      // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                     // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [9:0] router_003_src_channel;                                                   // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                             // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                               // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         sys_timer_s1_agent_rp_valid;                                              // sys_timer_s1_agent:rp_valid -> router_004:sink_valid
	wire  [85:0] sys_timer_s1_agent_rp_data;                                               // sys_timer_s1_agent:rp_data -> router_004:sink_data
	wire         sys_timer_s1_agent_rp_ready;                                              // router_004:sink_ready -> sys_timer_s1_agent:rp_ready
	wire         sys_timer_s1_agent_rp_startofpacket;                                      // sys_timer_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         sys_timer_s1_agent_rp_endofpacket;                                        // sys_timer_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                     // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [85:0] router_004_src_data;                                                      // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                     // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [9:0] router_004_src_channel;                                                   // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                             // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                               // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         high_res_timer_s1_agent_rp_valid;                                         // high_res_timer_s1_agent:rp_valid -> router_005:sink_valid
	wire  [85:0] high_res_timer_s1_agent_rp_data;                                          // high_res_timer_s1_agent:rp_data -> router_005:sink_data
	wire         high_res_timer_s1_agent_rp_ready;                                         // router_005:sink_ready -> high_res_timer_s1_agent:rp_ready
	wire         high_res_timer_s1_agent_rp_startofpacket;                                 // high_res_timer_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         high_res_timer_s1_agent_rp_endofpacket;                                   // high_res_timer_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                     // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [85:0] router_005_src_data;                                                      // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                     // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [9:0] router_005_src_channel;                                                   // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                             // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                               // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         led_pio_s1_agent_rp_valid;                                                // led_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [85:0] led_pio_s1_agent_rp_data;                                                 // led_pio_s1_agent:rp_data -> router_006:sink_data
	wire         led_pio_s1_agent_rp_ready;                                                // router_006:sink_ready -> led_pio_s1_agent:rp_ready
	wire         led_pio_s1_agent_rp_startofpacket;                                        // led_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         led_pio_s1_agent_rp_endofpacket;                                          // led_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                     // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [85:0] router_006_src_data;                                                      // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                     // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [9:0] router_006_src_channel;                                                   // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                             // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                               // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         dipsw_pio_s1_agent_rp_valid;                                              // dipsw_pio_s1_agent:rp_valid -> router_007:sink_valid
	wire  [85:0] dipsw_pio_s1_agent_rp_data;                                               // dipsw_pio_s1_agent:rp_data -> router_007:sink_data
	wire         dipsw_pio_s1_agent_rp_ready;                                              // router_007:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire         dipsw_pio_s1_agent_rp_startofpacket;                                      // dipsw_pio_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         dipsw_pio_s1_agent_rp_endofpacket;                                        // dipsw_pio_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                     // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [85:0] router_007_src_data;                                                      // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                     // rsp_demux_006:sink_ready -> router_007:src_ready
	wire   [9:0] router_007_src_channel;                                                   // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                             // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                               // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         user_pio_pushbtn_s1_agent_rp_valid;                                       // user_pio_pushbtn_s1_agent:rp_valid -> router_008:sink_valid
	wire  [85:0] user_pio_pushbtn_s1_agent_rp_data;                                        // user_pio_pushbtn_s1_agent:rp_data -> router_008:sink_data
	wire         user_pio_pushbtn_s1_agent_rp_ready;                                       // router_008:sink_ready -> user_pio_pushbtn_s1_agent:rp_ready
	wire         user_pio_pushbtn_s1_agent_rp_startofpacket;                               // user_pio_pushbtn_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         user_pio_pushbtn_s1_agent_rp_endofpacket;                                 // user_pio_pushbtn_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                     // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [85:0] router_008_src_data;                                                      // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                                     // rsp_demux_007:sink_ready -> router_008:src_ready
	wire   [9:0] router_008_src_channel;                                                   // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                             // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                               // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         nenet_reg_reset_s1_agent_rp_valid;                                        // nENET_reg_reset_s1_agent:rp_valid -> router_009:sink_valid
	wire  [85:0] nenet_reg_reset_s1_agent_rp_data;                                         // nENET_reg_reset_s1_agent:rp_data -> router_009:sink_data
	wire         nenet_reg_reset_s1_agent_rp_ready;                                        // router_009:sink_ready -> nENET_reg_reset_s1_agent:rp_ready
	wire         nenet_reg_reset_s1_agent_rp_startofpacket;                                // nENET_reg_reset_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         nenet_reg_reset_s1_agent_rp_endofpacket;                                  // nENET_reg_reset_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                     // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [85:0] router_009_src_data;                                                      // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                                     // rsp_demux_008:sink_ready -> router_009:src_ready
	wire   [9:0] router_009_src_channel;                                                   // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                             // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                               // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         ddr3_status_s1_agent_rp_valid;                                            // ddr3_status_s1_agent:rp_valid -> router_010:sink_valid
	wire  [85:0] ddr3_status_s1_agent_rp_data;                                             // ddr3_status_s1_agent:rp_data -> router_010:sink_data
	wire         ddr3_status_s1_agent_rp_ready;                                            // router_010:sink_ready -> ddr3_status_s1_agent:rp_ready
	wire         ddr3_status_s1_agent_rp_startofpacket;                                    // ddr3_status_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         ddr3_status_s1_agent_rp_endofpacket;                                      // ddr3_status_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                     // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [85:0] router_010_src_data;                                                      // router_010:src_data -> rsp_demux_009:sink_data
	wire         router_010_src_ready;                                                     // rsp_demux_009:sink_ready -> router_010:src_ready
	wire   [9:0] router_010_src_channel;                                                   // router_010:src_channel -> rsp_demux_009:sink_channel
	wire         router_010_src_startofpacket;                                             // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_010_src_endofpacket;                                               // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_src_valid;                                                         // router:src_valid -> slow_periph_bridge_m0_limiter:cmd_sink_valid
	wire  [85:0] router_src_data;                                                          // router:src_data -> slow_periph_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                         // slow_periph_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [9:0] router_src_channel;                                                       // router:src_channel -> slow_periph_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                 // router:src_startofpacket -> slow_periph_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                   // router:src_endofpacket -> slow_periph_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [85:0] slow_periph_bridge_m0_limiter_cmd_src_data;                               // slow_periph_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         slow_periph_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> slow_periph_bridge_m0_limiter:cmd_src_ready
	wire   [9:0] slow_periph_bridge_m0_limiter_cmd_src_channel;                            // slow_periph_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         slow_periph_bridge_m0_limiter_cmd_src_startofpacket;                      // slow_periph_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         slow_periph_bridge_m0_limiter_cmd_src_endofpacket;                        // slow_periph_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> slow_periph_bridge_m0_limiter:rsp_sink_valid
	wire  [85:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> slow_periph_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                        // slow_periph_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [9:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> slow_periph_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> slow_periph_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> slow_periph_bridge_m0_limiter:rsp_sink_endofpacket
	wire         slow_periph_bridge_m0_limiter_rsp_src_valid;                              // slow_periph_bridge_m0_limiter:rsp_src_valid -> slow_periph_bridge_m0_agent:rp_valid
	wire  [85:0] slow_periph_bridge_m0_limiter_rsp_src_data;                               // slow_periph_bridge_m0_limiter:rsp_src_data -> slow_periph_bridge_m0_agent:rp_data
	wire         slow_periph_bridge_m0_limiter_rsp_src_ready;                              // slow_periph_bridge_m0_agent:rp_ready -> slow_periph_bridge_m0_limiter:rsp_src_ready
	wire   [9:0] slow_periph_bridge_m0_limiter_rsp_src_channel;                            // slow_periph_bridge_m0_limiter:rsp_src_channel -> slow_periph_bridge_m0_agent:rp_channel
	wire         slow_periph_bridge_m0_limiter_rsp_src_startofpacket;                      // slow_periph_bridge_m0_limiter:rsp_src_startofpacket -> slow_periph_bridge_m0_agent:rp_startofpacket
	wire         slow_periph_bridge_m0_limiter_rsp_src_endofpacket;                        // slow_periph_bridge_m0_limiter:rsp_src_endofpacket -> slow_periph_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [85:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [9:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                     // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [85:0] cmd_demux_src2_data;                                                      // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                     // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [9:0] cmd_demux_src2_channel;                                                   // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                             // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                               // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                     // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [85:0] cmd_demux_src3_data;                                                      // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                     // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [9:0] cmd_demux_src3_channel;                                                   // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                             // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                               // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                     // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [85:0] cmd_demux_src4_data;                                                      // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                     // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [9:0] cmd_demux_src4_channel;                                                   // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                             // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                               // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                     // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [85:0] cmd_demux_src5_data;                                                      // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                     // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [9:0] cmd_demux_src5_channel;                                                   // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                             // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                               // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                     // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [85:0] cmd_demux_src6_data;                                                      // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                     // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [9:0] cmd_demux_src6_channel;                                                   // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                             // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                               // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                     // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [85:0] cmd_demux_src7_data;                                                      // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                     // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [9:0] cmd_demux_src7_channel;                                                   // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                             // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                               // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                     // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [85:0] cmd_demux_src8_data;                                                      // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                     // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [9:0] cmd_demux_src8_channel;                                                   // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                             // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                               // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                     // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [85:0] cmd_demux_src9_data;                                                      // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                     // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [9:0] cmd_demux_src9_channel;                                                   // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                             // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                               // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [85:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [9:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                 // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [85:0] rsp_demux_002_src0_data;                                                  // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                 // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [9:0] rsp_demux_002_src0_channel;                                               // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                         // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                           // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                 // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [85:0] rsp_demux_003_src0_data;                                                  // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                 // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [9:0] rsp_demux_003_src0_channel;                                               // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                         // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                           // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                 // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [85:0] rsp_demux_004_src0_data;                                                  // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                 // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [9:0] rsp_demux_004_src0_channel;                                               // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                         // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                           // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                 // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [85:0] rsp_demux_005_src0_data;                                                  // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                 // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [9:0] rsp_demux_005_src0_channel;                                               // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                         // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                           // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                 // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [85:0] rsp_demux_006_src0_data;                                                  // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                 // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [9:0] rsp_demux_006_src0_channel;                                               // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                         // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                           // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                 // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [85:0] rsp_demux_007_src0_data;                                                  // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                 // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [9:0] rsp_demux_007_src0_channel;                                               // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                         // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                           // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                 // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [85:0] rsp_demux_008_src0_data;                                                  // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                 // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [9:0] rsp_demux_008_src0_channel;                                               // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                         // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                           // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                 // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [85:0] rsp_demux_009_src0_data;                                                  // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                 // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [9:0] rsp_demux_009_src0_channel;                                               // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                         // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                           // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> crosser:in_valid
	wire  [85:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> crosser:in_data
	wire         cmd_demux_src0_ready;                                                     // crosser:in_ready -> cmd_demux:src0_ready
	wire   [9:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                        // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [85:0] crosser_out_data;                                                         // crosser:out_data -> cmd_mux:sink0_data
	wire         crosser_out_ready;                                                        // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [9:0] crosser_out_channel;                                                      // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_startofpacket;                                                // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                  // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [85:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> crosser_001:in_data
	wire         rsp_demux_src0_ready;                                                     // crosser_001:in_ready -> rsp_demux:src0_ready
	wire   [9:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                    // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [85:0] crosser_001_out_data;                                                     // crosser_001:out_data -> rsp_mux:sink0_data
	wire         crosser_001_out_ready;                                                    // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire   [9:0] crosser_001_out_channel;                                                  // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire         crosser_001_out_startofpacket;                                            // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                              // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire   [9:0] slow_periph_bridge_m0_limiter_cmd_valid_data;                             // slow_periph_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                   // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                   // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                            // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                             // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                            // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         performance_counter_control_slave_agent_rdata_fifo_src_valid;             // performance_counter_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] performance_counter_control_slave_agent_rdata_fifo_src_data;              // performance_counter_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         performance_counter_control_slave_agent_rdata_fifo_src_ready;             // avalon_st_adapter_001:in_0_ready -> performance_counter_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                        // avalon_st_adapter_001:out_0_valid -> performance_counter_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                         // avalon_st_adapter_001:out_0_data -> performance_counter_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                        // performance_counter_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                        // avalon_st_adapter_001:out_0_error -> performance_counter_control_slave_agent:rdata_fifo_sink_error
	wire         sysid_control_slave_agent_rdata_fifo_src_valid;                           // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                            // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         sysid_control_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_002:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                        // avalon_st_adapter_002:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                         // avalon_st_adapter_002:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                        // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                        // avalon_st_adapter_002:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire         sys_timer_s1_agent_rdata_fifo_src_valid;                                  // sys_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] sys_timer_s1_agent_rdata_fifo_src_data;                                   // sys_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         sys_timer_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_003:in_0_ready -> sys_timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                        // avalon_st_adapter_003:out_0_valid -> sys_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                         // avalon_st_adapter_003:out_0_data -> sys_timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                        // sys_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                        // avalon_st_adapter_003:out_0_error -> sys_timer_s1_agent:rdata_fifo_sink_error
	wire         high_res_timer_s1_agent_rdata_fifo_src_valid;                             // high_res_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] high_res_timer_s1_agent_rdata_fifo_src_data;                              // high_res_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         high_res_timer_s1_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_004:in_0_ready -> high_res_timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                        // avalon_st_adapter_004:out_0_valid -> high_res_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                         // avalon_st_adapter_004:out_0_data -> high_res_timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                        // high_res_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                        // avalon_st_adapter_004:out_0_error -> high_res_timer_s1_agent:rdata_fifo_sink_error
	wire         led_pio_s1_agent_rdata_fifo_src_valid;                                    // led_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                     // led_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         led_pio_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_005:in_0_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                        // avalon_st_adapter_005:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                         // avalon_st_adapter_005:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                        // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                        // avalon_st_adapter_005:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire         dipsw_pio_s1_agent_rdata_fifo_src_valid;                                  // dipsw_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                   // dipsw_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         dipsw_pio_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_006:in_0_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                        // avalon_st_adapter_006:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                         // avalon_st_adapter_006:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                        // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                        // avalon_st_adapter_006:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire         user_pio_pushbtn_s1_agent_rdata_fifo_src_valid;                           // user_pio_pushbtn_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] user_pio_pushbtn_s1_agent_rdata_fifo_src_data;                            // user_pio_pushbtn_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         user_pio_pushbtn_s1_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_007:in_0_ready -> user_pio_pushbtn_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                        // avalon_st_adapter_007:out_0_valid -> user_pio_pushbtn_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                         // avalon_st_adapter_007:out_0_data -> user_pio_pushbtn_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                        // user_pio_pushbtn_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                        // avalon_st_adapter_007:out_0_error -> user_pio_pushbtn_s1_agent:rdata_fifo_sink_error
	wire         nenet_reg_reset_s1_agent_rdata_fifo_src_valid;                            // nENET_reg_reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] nenet_reg_reset_s1_agent_rdata_fifo_src_data;                             // nENET_reg_reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         nenet_reg_reset_s1_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_008:in_0_ready -> nENET_reg_reset_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                        // avalon_st_adapter_008:out_0_valid -> nENET_reg_reset_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                         // avalon_st_adapter_008:out_0_data -> nENET_reg_reset_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                        // nENET_reg_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                        // avalon_st_adapter_008:out_0_error -> nENET_reg_reset_s1_agent:rdata_fifo_sink_error
	wire         ddr3_status_s1_agent_rdata_fifo_src_valid;                                // ddr3_status_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] ddr3_status_s1_agent_rdata_fifo_src_data;                                 // ddr3_status_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         ddr3_status_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_009:in_0_ready -> ddr3_status_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                        // avalon_st_adapter_009:out_0_valid -> ddr3_status_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                         // avalon_st_adapter_009:out_0_data -> ddr3_status_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                        // ddr3_status_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                        // avalon_st_adapter_009:out_0_error -> ddr3_status_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) slow_periph_bridge_m0_translator (
		.clk                    (pll_c2_clk),                                                               //                       clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (slow_periph_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (slow_periph_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (slow_periph_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (slow_periph_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (slow_periph_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (slow_periph_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (slow_periph_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (slow_periph_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (slow_periph_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (slow_periph_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (slow_periph_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (slow_periph_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (slow_periph_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (slow_periph_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (slow_periph_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (slow_periph_bridge_m0_read),                                               //                          .read
		.av_readdata            (slow_periph_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (slow_periph_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (slow_periph_bridge_m0_write),                                              //                          .write
		.av_writedata           (slow_periph_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (slow_periph_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (pll_c0_clk),                                         //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_control_slave_translator (
		.clk                    (pll_c2_clk),                                               //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (performance_counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (performance_counter_control_slave_write),                  //                         .write
		.av_readdata            (performance_counter_control_slave_readdata),               //                         .readdata
		.av_writedata           (performance_counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (performance_counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                       //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sysid_control_slave_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                            //                         .readdata
		.av_write               (),                                                        //              (terminated)
		.av_read                (),                                                        //              (terminated)
		.av_writedata           (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_timer_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_timer_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (sys_timer_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (sys_timer_s1_agent_m0_read),                              //                         .read
		.uav_write              (sys_timer_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (sys_timer_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (sys_timer_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (sys_timer_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (sys_timer_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (sys_timer_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (sys_timer_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (sys_timer_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (sys_timer_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (sys_timer_s1_write),                                      //                         .write
		.av_readdata            (sys_timer_s1_readdata),                                   //                         .readdata
		.av_writedata           (sys_timer_s1_writedata),                                  //                         .writedata
		.av_chipselect          (sys_timer_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) high_res_timer_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (high_res_timer_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (high_res_timer_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (high_res_timer_s1_agent_m0_read),                         //                         .read
		.uav_write              (high_res_timer_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (high_res_timer_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (high_res_timer_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (high_res_timer_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (high_res_timer_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (high_res_timer_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (high_res_timer_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (high_res_timer_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (high_res_timer_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (high_res_timer_s1_write),                                 //                         .write
		.av_readdata            (high_res_timer_s1_readdata),                              //                         .readdata
		.av_writedata           (high_res_timer_s1_writedata),                             //                         .writedata
		.av_chipselect          (high_res_timer_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                                //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (led_pio_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                        //                         .write
		.av_readdata            (led_pio_s1_readdata),                                     //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                    //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                                   //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                              //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                                      //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                                   //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                                  //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) user_pio_pushbtn_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (user_pio_pushbtn_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (user_pio_pushbtn_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (user_pio_pushbtn_s1_agent_m0_read),                       //                         .read
		.uav_write              (user_pio_pushbtn_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (user_pio_pushbtn_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (user_pio_pushbtn_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (user_pio_pushbtn_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (user_pio_pushbtn_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (user_pio_pushbtn_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (user_pio_pushbtn_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (user_pio_pushbtn_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (user_pio_pushbtn_s1_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (user_pio_pushbtn_s1_readdata),                            //                         .readdata
		.av_write               (),                                                        //              (terminated)
		.av_read                (),                                                        //              (terminated)
		.av_writedata           (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nenet_reg_reset_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nenet_reg_reset_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (nenet_reg_reset_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (nenet_reg_reset_s1_agent_m0_read),                        //                         .read
		.uav_write              (nenet_reg_reset_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (nenet_reg_reset_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (nenet_reg_reset_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (nenet_reg_reset_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (nenet_reg_reset_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (nenet_reg_reset_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (nenet_reg_reset_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (nenet_reg_reset_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (nENET_reg_reset_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (nENET_reg_reset_s1_write),                                //                         .write
		.av_readdata            (nENET_reg_reset_s1_readdata),                             //                         .readdata
		.av_writedata           (nENET_reg_reset_s1_writedata),                            //                         .writedata
		.av_chipselect          (nENET_reg_reset_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_status_s1_translator (
		.clk                    (pll_c2_clk),                                              //                      clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr3_status_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_status_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (ddr3_status_s1_agent_m0_read),                            //                         .read
		.uav_write              (ddr3_status_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (ddr3_status_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (ddr3_status_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (ddr3_status_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (ddr3_status_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (ddr3_status_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (ddr3_status_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (ddr3_status_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (ddr3_status_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (ddr3_status_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                        //              (terminated)
		.av_read                (),                                                        //              (terminated)
		.av_writedata           (),                                                        //              (terminated)
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_QOS_H                 (64),
		.PKT_QOS_L                 (64),
		.PKT_DATA_SIDEBAND_H       (62),
		.PKT_DATA_SIDEBAND_L       (62),
		.PKT_ADDR_SIDEBAND_H       (61),
		.PKT_ADDR_SIDEBAND_L       (61),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_CACHE_H               (80),
		.PKT_CACHE_L               (77),
		.PKT_THREAD_ID_H           (73),
		.PKT_THREAD_ID_L           (73),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_EXCLUSIVE       (51),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) slow_periph_bridge_m0_agent (
		.clk                   (pll_c2_clk),                                                               //       clk.clk
		.reset                 (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (slow_periph_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (slow_periph_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (slow_periph_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (slow_periph_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (slow_periph_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (slow_periph_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (slow_periph_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (slow_periph_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (slow_periph_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (slow_periph_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (slow_periph_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (slow_periph_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (slow_periph_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (slow_periph_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (slow_periph_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (slow_periph_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (slow_periph_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (slow_periph_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (slow_periph_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (slow_periph_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (slow_periph_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (slow_periph_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (pll_c0_clk),                                                   //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                   //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (pll_c0_clk),                                             //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_control_slave_agent (
		.clk                     (pll_c2_clk),                                                         //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                            //                .channel
		.rf_sink_ready           (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_control_slave_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                                         //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                 //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),                //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_timer_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_timer_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (sys_timer_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (sys_timer_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (sys_timer_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (sys_timer_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (sys_timer_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (sys_timer_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (sys_timer_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (sys_timer_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (sys_timer_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (sys_timer_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (sys_timer_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (sys_timer_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (sys_timer_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (sys_timer_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (sys_timer_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                 //                .channel
		.rf_sink_ready           (sys_timer_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (sys_timer_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (sys_timer_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (sys_timer_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (sys_timer_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (sys_timer_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (sys_timer_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (sys_timer_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (sys_timer_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (sys_timer_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sys_timer_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_timer_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (sys_timer_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_timer_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_timer_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (sys_timer_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (sys_timer_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (sys_timer_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (sys_timer_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (sys_timer_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (sys_timer_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (sys_timer_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (sys_timer_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (sys_timer_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) high_res_timer_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (high_res_timer_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (high_res_timer_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (high_res_timer_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (high_res_timer_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (high_res_timer_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (high_res_timer_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (high_res_timer_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (high_res_timer_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (high_res_timer_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (high_res_timer_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (high_res_timer_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (high_res_timer_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (high_res_timer_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (high_res_timer_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (high_res_timer_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (high_res_timer_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                 //                .channel
		.rf_sink_ready           (high_res_timer_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (high_res_timer_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (high_res_timer_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (high_res_timer_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (high_res_timer_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (high_res_timer_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (high_res_timer_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (high_res_timer_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (high_res_timer_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (high_res_timer_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (high_res_timer_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (high_res_timer_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) high_res_timer_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (high_res_timer_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (high_res_timer_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (high_res_timer_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (high_res_timer_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (high_res_timer_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (high_res_timer_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (high_res_timer_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (high_res_timer_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (high_res_timer_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (high_res_timer_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                 //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                 //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) user_pio_pushbtn_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (user_pio_pushbtn_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (user_pio_pushbtn_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (user_pio_pushbtn_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (user_pio_pushbtn_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (user_pio_pushbtn_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (user_pio_pushbtn_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (user_pio_pushbtn_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (user_pio_pushbtn_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (user_pio_pushbtn_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (user_pio_pushbtn_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (user_pio_pushbtn_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (user_pio_pushbtn_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (user_pio_pushbtn_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (user_pio_pushbtn_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (user_pio_pushbtn_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (user_pio_pushbtn_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                 //                .channel
		.rf_sink_ready           (user_pio_pushbtn_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (user_pio_pushbtn_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (user_pio_pushbtn_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (user_pio_pushbtn_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (user_pio_pushbtn_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (user_pio_pushbtn_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (user_pio_pushbtn_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (user_pio_pushbtn_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (user_pio_pushbtn_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (user_pio_pushbtn_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (user_pio_pushbtn_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (user_pio_pushbtn_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (user_pio_pushbtn_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) user_pio_pushbtn_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (user_pio_pushbtn_s1_agent_rf_source_data),                //        in.data
		.in_valid          (user_pio_pushbtn_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (user_pio_pushbtn_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (user_pio_pushbtn_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (user_pio_pushbtn_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (user_pio_pushbtn_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (user_pio_pushbtn_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (user_pio_pushbtn_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (user_pio_pushbtn_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (user_pio_pushbtn_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nenet_reg_reset_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nenet_reg_reset_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (nenet_reg_reset_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (nenet_reg_reset_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (nenet_reg_reset_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (nenet_reg_reset_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (nenet_reg_reset_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (nenet_reg_reset_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (nenet_reg_reset_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (nenet_reg_reset_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (nenet_reg_reset_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (nenet_reg_reset_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (nenet_reg_reset_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (nenet_reg_reset_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (nenet_reg_reset_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (nenet_reg_reset_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (nenet_reg_reset_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                 //                .channel
		.rf_sink_ready           (nenet_reg_reset_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (nenet_reg_reset_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (nenet_reg_reset_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (nenet_reg_reset_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (nenet_reg_reset_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (nenet_reg_reset_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (nenet_reg_reset_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (nenet_reg_reset_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (nenet_reg_reset_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (nenet_reg_reset_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (nenet_reg_reset_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nenet_reg_reset_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (nenet_reg_reset_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nenet_reg_reset_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nenet_reg_reset_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (nenet_reg_reset_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (nenet_reg_reset_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (nenet_reg_reset_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (nenet_reg_reset_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (nenet_reg_reset_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (nenet_reg_reset_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (nenet_reg_reset_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (nenet_reg_reset_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (nenet_reg_reset_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr3_status_s1_agent (
		.clk                     (pll_c2_clk),                                              //             clk.clk
		.reset                   (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr3_status_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (ddr3_status_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (ddr3_status_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (ddr3_status_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (ddr3_status_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (ddr3_status_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (ddr3_status_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (ddr3_status_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (ddr3_status_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (ddr3_status_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (ddr3_status_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (ddr3_status_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (ddr3_status_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (ddr3_status_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (ddr3_status_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (ddr3_status_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                 //                .channel
		.rf_sink_ready           (ddr3_status_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (ddr3_status_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (ddr3_status_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (ddr3_status_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (ddr3_status_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (ddr3_status_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (ddr3_status_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (ddr3_status_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (ddr3_status_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (ddr3_status_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (ddr3_status_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_status_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (ddr3_status_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_status_s1_agent_rsp_fifo (
		.clk               (pll_c2_clk),                                              //       clk.clk
		.reset             (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_status_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (ddr3_status_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (ddr3_status_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (ddr3_status_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (ddr3_status_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (ddr3_status_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (ddr3_status_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (ddr3_status_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (ddr3_status_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (ddr3_status_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	DECA_Qsys_mm_interconnect_1_router router (
		.sink_ready         (slow_periph_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (slow_periph_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (slow_periph_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (slow_periph_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (slow_periph_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_001_src_ready),                               //       src.ready
		.src_valid          (router_001_src_valid),                               //          .valid
		.src_data           (router_001_src_data),                                //          .data
		.src_channel        (router_001_src_channel),                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c2_clk),                                               //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                      //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (sys_timer_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (sys_timer_s1_agent_rp_valid),                             //          .valid
		.sink_data          (sys_timer_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (sys_timer_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (sys_timer_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (high_res_timer_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (high_res_timer_s1_agent_rp_valid),                        //          .valid
		.sink_data          (high_res_timer_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (high_res_timer_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (high_res_timer_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                               //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                             //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_008 (
		.sink_ready         (user_pio_pushbtn_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (user_pio_pushbtn_s1_agent_rp_valid),                      //          .valid
		.sink_data          (user_pio_pushbtn_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (user_pio_pushbtn_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (user_pio_pushbtn_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                    //       src.ready
		.src_valid          (router_008_src_valid),                                    //          .valid
		.src_data           (router_008_src_data),                                     //          .data
		.src_channel        (router_008_src_channel),                                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_009 (
		.sink_ready         (nenet_reg_reset_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (nenet_reg_reset_s1_agent_rp_valid),                       //          .valid
		.sink_data          (nenet_reg_reset_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (nenet_reg_reset_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (nenet_reg_reset_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                    //       src.ready
		.src_valid          (router_009_src_valid),                                    //          .valid
		.src_data           (router_009_src_data),                                     //          .data
		.src_channel        (router_009_src_channel),                                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_router_001 router_010 (
		.sink_ready         (ddr3_status_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (ddr3_status_s1_agent_rp_valid),                           //          .valid
		.sink_data          (ddr3_status_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (ddr3_status_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (ddr3_status_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                    //       src.ready
		.src_valid          (router_010_src_valid),                                    //          .valid
		.src_data           (router_010_src_data),                                     //          .data
		.src_channel        (router_010_src_channel),                                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (69),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (10),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) slow_periph_bridge_m0_limiter (
		.clk                    (pll_c2_clk),                                              //       clk.clk
		.reset                  (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                        //          .valid
		.cmd_sink_data          (router_src_data),                                         //          .data
		.cmd_sink_channel       (router_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (slow_periph_bridge_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (slow_periph_bridge_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (slow_periph_bridge_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (slow_periph_bridge_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (slow_periph_bridge_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (slow_periph_bridge_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (slow_periph_bridge_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (slow_periph_bridge_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (slow_periph_bridge_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (slow_periph_bridge_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (slow_periph_bridge_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (slow_periph_bridge_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	DECA_Qsys_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pll_c2_clk),                                              //        clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (slow_periph_bridge_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (slow_periph_bridge_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (slow_periph_bridge_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (slow_periph_bridge_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (slow_periph_bridge_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (slow_periph_bridge_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                              //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                    //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                    //           .valid
		.src2_data          (cmd_demux_src2_data),                                     //           .data
		.src2_channel       (cmd_demux_src2_channel),                                  //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                              //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                    //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                    //           .valid
		.src3_data          (cmd_demux_src3_data),                                     //           .data
		.src3_channel       (cmd_demux_src3_channel),                                  //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                            //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                              //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                    //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                    //           .valid
		.src4_data          (cmd_demux_src4_data),                                     //           .data
		.src4_channel       (cmd_demux_src4_channel),                                  //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                            //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                              //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                    //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                    //           .valid
		.src5_data          (cmd_demux_src5_data),                                     //           .data
		.src5_channel       (cmd_demux_src5_channel),                                  //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                            //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                              //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                    //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                    //           .valid
		.src6_data          (cmd_demux_src6_data),                                     //           .data
		.src6_channel       (cmd_demux_src6_channel),                                  //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                            //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                              //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                    //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                    //           .valid
		.src7_data          (cmd_demux_src7_data),                                     //           .data
		.src7_channel       (cmd_demux_src7_channel),                                  //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                            //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                              //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                    //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                    //           .valid
		.src8_data          (cmd_demux_src8_data),                                     //           .data
		.src8_channel       (cmd_demux_src8_channel),                                  //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                            //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                              //           .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                                    //       src9.ready
		.src9_valid         (cmd_demux_src9_valid),                                    //           .valid
		.src9_data          (cmd_demux_src9_data),                                     //           .data
		.src9_channel       (cmd_demux_src9_channel),                                  //           .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                            //           .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                               //           .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pll_c0_clk),                                  //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                           //          .valid
		.sink0_channel       (crosser_out_channel),                         //          .channel
		.sink0_data          (crosser_out_data),                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                      //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //          .valid
		.src_data            (cmd_mux_002_src_data),                                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                   //          .valid
		.src_data            (cmd_mux_003_src_data),                                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                   //          .valid
		.src_data            (cmd_mux_004_src_data),                                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                   //          .valid
		.src_data            (cmd_mux_005_src_data),                                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                   //          .valid
		.src_data            (cmd_mux_006_src_data),                                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src6_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                   //          .valid
		.src_data            (cmd_mux_007_src_data),                                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src7_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                   //          .valid
		.src_data            (cmd_mux_008_src_data),                                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src8_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                   //          .valid
		.src_data            (cmd_mux_009_src_data),                                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src9_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                               //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pll_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //      sink.ready
		.sink_channel       (router_002_src_channel),                                  //          .channel
		.sink_data          (router_002_src_data),                                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_002 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                    //      sink.ready
		.sink_channel       (router_003_src_channel),                                  //          .channel
		.sink_data          (router_003_src_data),                                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_003_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_003 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                    //      sink.ready
		.sink_channel       (router_004_src_channel),                                  //          .channel
		.sink_data          (router_004_src_data),                                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_004_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_004 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                    //      sink.ready
		.sink_channel       (router_005_src_channel),                                  //          .channel
		.sink_data          (router_005_src_data),                                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_005_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_005 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                    //      sink.ready
		.sink_channel       (router_006_src_channel),                                  //          .channel
		.sink_data          (router_006_src_data),                                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_006_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_006 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                    //      sink.ready
		.sink_channel       (router_007_src_channel),                                  //          .channel
		.sink_data          (router_007_src_data),                                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_007_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_007 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                    //      sink.ready
		.sink_channel       (router_008_src_channel),                                  //          .channel
		.sink_data          (router_008_src_data),                                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_008_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_008 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                    //      sink.ready
		.sink_channel       (router_009_src_channel),                                  //          .channel
		.sink_data          (router_009_src_data),                                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_009_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_demux_001 rsp_demux_009 (
		.clk                (pll_c2_clk),                                              //       clk.clk
		.reset              (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                    //      sink.ready
		.sink_channel       (router_010_src_channel),                                  //          .channel
		.sink_data          (router_010_src_data),                                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_010_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                           //          .endofpacket
	);

	DECA_Qsys_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pll_c2_clk),                                              //       clk.clk
		.reset               (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                   //          .valid
		.sink0_channel       (crosser_001_out_channel),                                 //          .channel
		.sink0_data          (crosser_001_out_data),                                    //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                             //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                          //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                              //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                 //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                        //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                          //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                              //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                 //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                        //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                          //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                              //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                 //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                        //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                          //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                              //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                 //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                        //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                          //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                              //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                 //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                        //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),                          //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                                //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                                //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                              //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                                 //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                        //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                           //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (86),
		.BITS_PER_SYMBOL     (86),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_c2_clk),                                              //        in_clk.clk
		.in_reset          (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                              //       out_clk.clk
		.out_reset         (jtag_uart_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                    //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                  //              .channel
		.in_data           (cmd_demux_src0_data),                                     //              .data
		.out_ready         (crosser_out_ready),                                       //           out.ready
		.out_valid         (crosser_out_valid),                                       //              .valid
		.out_startofpacket (crosser_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_out_channel),                                     //              .channel
		.out_data          (crosser_out_data),                                        //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (86),
		.BITS_PER_SYMBOL     (86),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_c0_clk),                                              //        in_clk.clk
		.in_reset          (jtag_uart_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (pll_c2_clk),                                              //       out_clk.clk
		.out_reset         (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_src0_data),                                     //              .data
		.out_ready         (crosser_001_out_ready),                                   //           out.ready
		.out_valid         (crosser_001_out_valid),                                   //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                 //              .channel
		.out_data          (crosser_001_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_c0_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_c2_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (performance_counter_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_timer_s1_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (sys_timer_s1_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (sys_timer_s1_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (high_res_timer_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (high_res_timer_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (high_res_timer_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (user_pio_pushbtn_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (user_pio_pushbtn_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (user_pio_pushbtn_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nenet_reg_reset_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (nenet_reg_reset_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (nenet_reg_reset_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	DECA_Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_c2_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (slow_periph_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr3_status_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (ddr3_status_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (ddr3_status_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                        //         .error
	);

endmodule
