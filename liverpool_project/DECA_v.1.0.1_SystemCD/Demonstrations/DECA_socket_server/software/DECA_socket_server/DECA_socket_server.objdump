
DECA_socket_server.elf:     file format elf32-littlenios2
DECA_socket_server.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000240

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0004fe18 memsz 0x0004fe18 flags r-x
    LOAD off    0x00050e38 vaddr 0x0004fe38 paddr 0x00051df4 align 2**12
         filesz 0x00001fbc memsz 0x00001fbc flags rw-
    LOAD off    0x00053db0 vaddr 0x00053db0 paddr 0x00053db0 align 2**12
         filesz 0x00000000 memsz 0x0000aab4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00049eb0  00000240  00000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005d48  0004a0f0  0004a0f0  0004b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fbc  0004fe38  00051df4  00050e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000aab4  00053db0  00053db0  00053db0  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_ddr3_emif 00000000  0005e864  0005e864  00052df4  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  21040000  21040000  00052df4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00052df4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001b20  00000000  00000000  00052e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000662da  00000000  00000000  00054938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00015195  00000000  00000000  000bac12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c63b  00000000  00000000  000cfda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00008760  00000000  00000000  000ec3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000b82b  00000000  00000000  000f4b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ce33  00000000  00000000  0010036f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0011d1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014f8  00000000  00000000  0011d208  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00129075  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0012907b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00129085  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00129086  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00129087  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0012908b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0012908f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00129093  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0012909c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  001290a5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  001290ae  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  001290b7  2**0
                  CONTENTS, READONLY
 30 .jdi          00003eef  00000000  00000000  001290e4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00109311  00000000  00000000  0012cfd3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000240 l    d  .text	00000000 .text
0004a0f0 l    d  .rodata	00000000 .rodata
0004fe38 l    d  .rwdata	00000000 .rwdata
00053db0 l    d  .bss	00000000 .bss
0005e864 l    d  .mem_if_ddr3_emif	00000000 .mem_if_ddr3_emif
21040000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DECA_socket_server_bsp//obj/HAL/src/crt0.o
00000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 iniche_init.c
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
00053db3 l     O .bss	00000001 tse_system_count.4583
00053db4 l     O .bss	00000001 is_init.4665
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 simple_socket_server.c
00053dc0 l     O .bss	00000004 SSSCommand.4713
00053fd0 l     O .bss	000005f0 conn.4733
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctype_.c
0004ce91 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0004ff70 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004d692 l     O .rodata	00000010 zeroes.4166
0004d6a2 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004d6b2 l     O .rodata	00000010 zeroes.4181
0004d6c2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000cff8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000eb78 l     F .text	00000008 __fp_lock
0000eb80 l     F .text	00000008 __fp_unlock
0000eb94 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000507bc l     O .rwdata	00000020 lc_ctype_charset
0005079c l     O .rwdata	00000020 lc_message_charset
000507dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0004d6f0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00011340 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004d814 l     O .rodata	00000010 zeroes.4110
0004d824 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
00012988 l     F .text	000000fc __sprint_r.part.0
0004d844 l     O .rodata	00000010 blanks.4125
0004d834 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00015134 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00017860 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00017960 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00017a54 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00017b38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00051cc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00051ccc l     O .rwdata	00000004 lockid
00053df8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00051cd0 l     O .rwdata	00000004 lockid
00053e00 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000197f0 l     F .text	00000044 OS_InitMisc
00019834 l     F .text	00000068 OS_InitRdyList
00019994 l     F .text	000000e0 OS_InitTCBList
00019714 l     F .text	000000dc OS_InitEventList
0001989c l     F .text	0000007c OS_InitTaskIdle
00019918 l     F .text	0000007c OS_InitTaskStat
00019bf4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001b9e8 l     F .text	00000110 OS_FlagTaskRdy
0001b740 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fe88 l     F .text	00000038 alt_dev_reg
00050814 l     O .rwdata	0000106c jtag_uart
00051880 l     O .rwdata	00000030 sgdma_rx
000518b0 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020400 l     F .text	000002a4 altera_avalon_jtag_uart_irq
000206a4 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00020e7c l     F .text	00000050 alt_get_errno
00021a90 l     F .text	000000b8 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021bec l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
000545e8 l     O .bss	0000003c closers
00053e6c l     O .bss	00000004 nclosers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
00051d60 l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
00054624 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
0002953c l     F .text	000000ac dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
00000000 l    df *ABS*	00000000 asm_cksum.o
0002b0f0 l       .text	00000000 done
0002af80 l       .text	00000000 asm1
0002b0ac l       .text	00000000 loop0
0002afa8 l       .text	00000000 loop
0002b0c8 l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
00053ed8 l     O .bss	00000004 kbd_init.3959
00053ed4 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
00053f0c l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
0002f44c l     F .text	0000008c sockargs
0002e798 l     F .text	000001d4 t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
00036f24 l     F .text	000000c8 bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00039888 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00039a60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00039a8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00039fc8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003a100 l     F .text	00000050 alt_get_errno
0003a150 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0003a374 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_write.c
0003a7a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
00053f44 l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
0003b2a0 l     F .text	00000194 check_interval_timers
00053f50 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
00053f54 l     O .bss	00000004 arp_timer
00053f5c l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
00051ddc l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
00053f9c l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
00051de4 l     O .rwdata	00000004 iCounter.4715
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
0005463c l     O .bss	0000001e nearBuf.4342
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00047f78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 icmp.c
00051c90 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintfr_1.c
00000000 l    df *ABS*	00000000 alt_exit.c
00053fc8 g     O .bss	00000004 alt_instruction_exception_handler
000082a4 g     F .text	00000018 putchar
0005e360 g     O .bss	00000014 soq
00010c28 g     F .text	00000074 _mprec_log10
000021f0 g     F .text	000000d8 alt_tse_get_mac_info
00051d1e g     O .rwdata	00000002 OSTaskNameSize
00010d14 g     F .text	0000008c __any_on
000142d8 g     F .text	00000054 _isatty_r
0004d6fc g     O .rodata	00000028 __mprec_tinytens
0003d060 g     F .text	0000072c ip_write_internal
00017c5c g     F .text	000000d4 alt_main
0000868c g     F .text	00000090 strcpy
0002a894 g     F .text	000000a4 pk_free
000082bc g     F .text	000000b8 _puts_r
0005e50c g     O .bss	00000100 alt_irq
00051b30 g     O .rwdata	00000009 rtp_priority
0001432c g     F .text	0000005c _lseek_r
000492e8 g     F .text	00000330 icmp_timex
0002c1a4 g     F .text	00000040 m_freem
00047a80 g     F .text	00000048 vgetc
0002b260 g     F .text	0000001c clock_c
00053f24 g     O .bss	00000004 tcp_optionbuf
0003cb90 g     F .text	00000070 if_getbynum
0001c24c g     F .text	000000d0 OS_MemInit
00053ec4 g     O .bss	00000004 dsc_rlyerrs
00053eb4 g     O .bss	00000004 dsc_releases
000272cc g     F .text	0000006c TK_OSTaskQuery
0002af60 g       .text	00000000 asm_cksum
00051df4 g       *ABS*	00000000 __flash_rwdata_start
00005dd8 g     F .text	000000f0 marvell_cfg_rgmii
0001fe24 g     F .text	00000064 OSTimeSet
00047988 g     F .text	000000f8 vgetc_locked
0002ba9c g     F .text	00000020 post_task_setup
000406d4 g     F .text	00000348 ipr_stats
00038748 g     F .text	00000118 tcp_attach
00051d70 g     O .rwdata	00000004 reqlist_len
0002d56c g     F .text	00000084 tcp_tick
00026584 g     F .text	00000074 print_ipad
000271c8 g     F .text	00000104 tcp_wakeup
000163c8 g     F .text	00000084 .hidden __eqdf2
00053db8 g     O .bss	00000004 last_flash_sector_offset
00053e70 g     O .bss	00000004 igmp_timers_are_running
00005fb8 g     F .text	00000124 led_bit_toggle
00035964 g     F .text	00000124 tcp_pulloutofband
000033f8 g     F .text	00000210 alt_tse_phy_print_profile
0001846c g     F .text	00000610 OSEventPendMulti
0005e864 g       *ABS*	00000000 __alt_heap_start
0003acd4 g     F .text	00000020 OSTaskCreateHook
0002a0dc g     F .text	00000068 dhc_ifacedone
00005b78 g     F .text	00000098 marvell_phy_cfg
00040a6c g     F .text	000003d8 ip_rcv
0004772c g     F .text	0000014c vfseek
00031b20 g     F .text	0000010c soqremque
00042728 g     F .text	000007fc udpdemux
000232ac g     F .text	00000104 tse_mac_close
000080f8 g     F .text	0000003c printf
00053f70 g     O .bss	00000004 rt_mib
00051cf6 g     O .rwdata	00000002 OSMboxEn
0002a000 g     F .text	00000054 dhc_state_init
00049dcc g     F .text	00000024 vsprintf
00020ff0 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
00018ad0 g     F .text	0000007c OSIntEnter
000143e4 g     F .text	0000009c _wcrtomb_r
00011650 g     F .text	0000005c __sseek
0000eec8 g     F .text	00000010 __sinit
00041954 g     F .text	00000108 in_delmulti
0000cd58 g     F .text	00000154 __swbuf_r
00053f88 g     O .bss	00000004 so_evtmap_create
00051d06 g     O .rwdata	00000002 OSQEn
00045e40 g     F .text	00000088 in_pcballoc
00051d8c g     O .rwdata	00000002 socket_defaults
0000fa94 g     F .text	0000007c _setlocale_r
0003ba48 g     F .text	00000454 send_arp
0000ed34 g     F .text	00000064 __sfmoreglue
00046860 g     F .text	00000338 vfopen_locked
00053dc4 g     O .bss	00000004 SSSLEDCommandQ
00018140 g     F .text	000000d0 __malloc_unlock
0003ad30 g     F .text	0000001c OSTaskStatHook
0003b18c g     F .text	00000054 prep_modules
00025b98 g     F .text	0000013c bsd_i_sockoptlen
00053e08 g     O .bss	00000001 OSLockNesting
00051d68 g     O .rwdata	00000004 xids
0000871c g     F .text	000005ec strerror
00002434 g     F .text	00000a6c getPHYSpeed
00046d98 g     F .text	00000040 vfclose
0005e400 g     O .bss	0000002c tcb
00051d44 g     O .rwdata	00000002 OSDataSize
0003a520 g     F .text	00000034 alt_remap_cached
00053e09 g     O .bss	00000001 OSRunning
0003c8d8 g     F .text	000002b8 grat_arp
000063a4 g     F .text	0000006c get_ip_addr
000458cc g     F .text	00000094 inet_pton
0003ccd4 g     F .text	00000090 reg_type
0005df04 g     O .bss	000000f0 dhc_states
00024a10 g     F .text	00000180 igmp_fasttimo
00046f3c g     F .text	00000058 vunlink_flag_open_files
00029dc8 g     F .text	00000080 dhc_halt
000216dc g     F .text	000003b4 alt_avalon_sgdma_construct_descriptor_burst
00053ea8 g     O .bss	00000004 dsc_acks
0005e42c g     O .bss	000000e0 tcpstat
0003ffcc g     F .text	00000348 ip_reasm_copy_queued_fragments_into_reassy_buffer
0002c6ec g     F .text	0000009c dtom
00036e28 g     F .text	000000fc tcp_setpersist
0002eb28 g     F .text	00000188 t_getsockopt
00007dc8 g     F .text	0000015c memmove
00053eb8 g     O .bss	00000004 dsc_naks
0002cb44 g     F .text	000005cc ip_output
0003ad74 g     F .text	0000001c OSInitHookBegin
00049618 g     F .text	00000050 icmp_du
00051d64 g     O .rwdata	00000004 num_net_tasks
00053fac g     O .bss	00000004 vfiles
00051d3c g     O .rwdata	00000002 OSTmrSize
00045040 g     F .text	00000114 dhc_main_ipset
0000eeb0 g     F .text	00000018 _cleanup
0003f1a8 g     F .text	000002b8 ip_reasm_process_first_fragment
0000fe14 g     F .text	000000a8 _Balloc
00006744 g     F .text	00000104 get_board_mac_addr
00053e0c g     O .bss	00000004 OSIdleCtr
00053dc8 g     O .bss	00000004 SSSLEDLightshowSem
00004df8 g     F .text	000001bc alt_tse_phy_set_adv_1000
00051ca8 g     O .rwdata	00000001 max_mac_system
00043fa0 g     F .text	000005c0 ip_setmoptions
0001644c g     F .text	000000e0 .hidden __gtdf2
000014a4 g     F .text	000009fc alt_tse_system_add_sys
000453e8 g     F .text	0000002c md_fseek
0003a8f0 g     F .text	00000020 altera_nios2_gen2_irq_init
0003a9bc g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00019f1c g     F .text	000002d4 OS_TCBInit
0003f460 g     F .text	00000088 ip_reassm
00029e48 g     F .text	000001b8 dhc_reclaim
0005e7ec g     O .bss	00000010 udp_mib
00000000 g     F .entry	0000001c __reset
0002f2b8 g     F .text	000000d4 t_shutdown
00006eb0 g     F .text	000001ec sss_handle_receive
0002ed90 g     F .text	00000138 t_recvfrom
00051d42 g     O .rwdata	00000002 OSTmrWheelTblSize
0004471c g     F .text	000006c0 u_mctest_run
0002124c g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00041ac0 g     F .text	00000088 prep_ifaces
00000020 g       *ABS*	00000000 __flash_exceptions_start
00053e8c g     O .bss	00000001 to_netmain
0002a53c g     F .text	000000cc pk_alloc
00051ce2 g     O .rwdata	00000002 OSEventSize
00000b8c g     F .text	000002f8 alt_SSSErrorHandler
00053e10 g     O .bss	00000001 OSPrioHighRdy
00014280 g     F .text	00000058 _fstat_r
0004fe50 g     O .rwdata	00000120 tse_mac_device
00026f40 g     F .text	00000048 tk_nettick
0003acf4 g     F .text	00000020 OSTaskDelHook
00053ddc g     O .bss	00000004 errno
000083fc g     F .text	00000014 __srget
00032d18 g     F .text	000000c0 in_pcbnotify
000115cc g     F .text	00000008 __seofread
0003a99c g       .text	00000000 OSStartHighRdy
0005dff4 g     O .bss	00000014 lilfreeq
0000028c g     F .text	00000644 alt_uCOSIIErrorHandler
00041b70 g     F .text	00000028 evtmap_setup
0001e730 g     F .text	000001ec OSTaskCreateExt
00053e90 g     O .bss	00000004 tcp_sleep_timeout
000324cc g     F .text	000001b4 sbdrop
00053f84 g     O .bss	00000004 net_system_exit
0005e7fc g     O .bss	00000068 icmp_mib
00011920 g     F .text	00001068 ___svfiprintf_internal_r
000378c0 g     F .text	00000074 tcp_getseq
00041f4c g     F .text	000000c0 ip_raw_alloc
000056c4 g     F .text	000004b4 alt_tse_phy_set_common_speed
0001b28c g     F .text	00000068 OSFlagPendGetFlagsRdy
00051d22 g     O .rwdata	00000002 OSTaskStatStkSize
0005665c g     O .bss	00000010 pmac_groups
00028638 g     F .text	00000a9c dhc_request
000303b0 g     F .text	00000744 soreceive
0001a37c g     F .text	00000308 OSFlagAccept
0001c920 g     F .text	000000b8 OSQFlush
0001c31c g     F .text	00000140 OSQAccept
00053df0 g     O .bss	00000004 alt_argv
00059ca8 g       *ABS*	00000000 _gp
00040a1c g     F .text	00000050 ip_reasm_send_icmp_timex
00017de0 g     F .text	00000124 usleep
00046dd8 g     F .text	00000048 vfflush
0005e308 g     O .bss	00000040 resid_semaphore
00026444 g     F .text	00000140 hexdump
0003f070 g     F .text	000000a0 ip_reasm_incr_mem_useage
00025088 g     F .text	0000007c igmp_leavegroup
0001e574 g     F .text	000001bc OSTaskCreate
00000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif
0001e034 g     F .text	00000540 OSTaskChangePrio
00053e04 g     O .bss	00000004 alt_heapsem
00037710 g     F .text	000000f0 tcp_close
0001a1f0 g     F .text	0000018c OSDebugInit
0001e91c g     F .text	000003e0 OSTaskDel
00047ea0 g     F .text	0000005c vferror
0003a730 g     F .text	00000078 alt_uncached_malloc
00000fa8 g     F .text	00000060 tse_mac_initTransInfo2
0004337c g     F .text	000000bc udp_alloc
00051998 g     O .rwdata	00000180 alt_fd_list
0005a6f4 g     O .bss	00000370 OSFlagTbl
00053f10 g     O .bss	00000008 mbstat
000073b8 g     F .text	00000080 _getc_r
00007438 g     F .text	00000088 getc
0000829c g     F .text	00000008 _putchar_r
00019500 g     F .text	000000b4 OS_EventTaskRemove
00043bcc g     F .text	00000150 igmpv2_chk_set_timer
00026f88 g     F .text	0000002c TK_OSTimeDly
00039c38 g     F .text	00000090 alt_find_dev
00007c90 g     F .text	00000138 memcpy
0000121c g     F .text	00000054 tse_mac_setMIImode
00053ec0 g     O .bss	00000004 dsc_rebind
0003b65c g     F .text	00000088 task_stats
0002df58 g     F .text	0000004c DOMAIN_CHECK
0002d110 g     F .text	00000038 in_broadcast
00051d0c g     O .rwdata	00000002 OSRdyTblSize
00002ea0 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
00053fa8 g     O .bss	00000004 vfsystems
000432b4 g     F .text	000000c8 udp_socket
00053e60 g     O .bss	00000004 MaxMtu
000329f4 g     F .text	00000140 sock_selscan
0000eb88 g     F .text	0000000c _cleanup_r
00017688 g     F .text	000000d0 .hidden __floatsidf
0003ee48 g     F .text	000000c4 ip_reasm_match_frag_with_ire
00031c80 g     F .text	00000054 socantrcvmore
00001008 g     F .text	000000e4 tse_mac_sTxWrite
00006cf8 g     F .text	000001b8 sss_exec_command
000080b8 g     F .text	00000014 perror
0003a088 g     F .text	00000078 alt_io_redirect
0001652c g     F .text	000000e0 .hidden __ltdf2
00053eec g     O .bss	00000004 netq_intmask
00045880 g     F .text	0000004c hextoa
0004a0f0 g       *ABS*	00000000 __DTOR_END__
0002f0b8 g     F .text	00000200 t_send
000398d8 g     F .text	000000d0 alt_close
00053f18 g     O .bss	00000002 select_wait
00008374 g     F .text	00000014 puts
00026abc g     F .text	00000044 std_out
00048384 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0005d9f8 g     O .bss	00000030 tse_iniche_dev_driver_data
00047ac8 g     F .text	00000124 vfslookup_locked
0002fc7c g     F .text	00000098 soaccept
00018210 g     F .text	00000120 OSEventNameGet
00051cf0 g     O .rwdata	00000002 OSFlagMax
0005e374 g     O .bss	0000003c tcpmib
0002f4d8 g     F .text	00000098 t_errno
00041b98 g     F .text	000000e0 ip_raw_open
00011504 g     F .text	00000074 __fpclassifyd
00029434 g     F .text	00000108 dhc_decline
00010b84 g     F .text	000000a4 __ratio
00018b4c g     F .text	000000f4 OSIntExit
00051de0 g     O .rwdata	00000004 ipRoutes
00046eec g     F .text	00000050 vfeof
00013df8 g     F .text	00000024 __vfiprintf_internal
00037bac g     F .text	0000005c tcp_canceltimers
00027eb8 g     F .text	000001e4 dhc_buildheader
00051d2a g     O .rwdata	00000002 OSTCBSize
00021338 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00053e11 g     O .bss	00000001 OSPrioCur
00020908 g     F .text	000002b4 altera_avalon_jtag_uart_read
000074c0 g     F .text	00000014 malloc
00053fa4 g     O .bss	00000004 inpcb_cachemiss
000080cc g     F .text	0000002c _printf_r
00045a40 g     F .text	000000c4 inet46_addr
00053fa0 g     O .bss	00000004 inpcb_cachehits
00015250 g     F .text	00000008 .hidden __udivsi3
00051958 g     O .rwdata	0000000b tcp_outflags
0005da28 g     O .bss	00000130 tse
000179b0 g     F .text	000000a4 isatty
00001ea0 g     F .text	00000168 alt_tse_sys_enable_mdio_sharing
00051d10 g     O .rwdata	00000002 OSStkWidth
0004d74c g     O .rodata	000000c8 __mprec_tens
000466dc g     F .text	00000070 vf_alloc_and_link_vop
00051d04 g     O .rwdata	00000002 OSPtrSize
00053f74 g     O .bss	00000004 ipr_curr_mem
000246c8 g     F .text	0000006c exit_hook
00053e74 g     O .bss	00000004 igmp_cticks
00002170 g     F .text	00000080 alt_tse_get_mac_info_index
00053f00 g     O .bss	00000004 mheap_sem_ptr
00035cdc g     F .text	0000004c ip4_tcpmss
0000fb10 g     F .text	0000000c __locale_charset
00051ce4 g     O .rwdata	00000002 OSEventTblSize
0005e770 g     O .bss	00000014 netlist
00030af4 g     F .text	00000098 soshutdown
0003a910 g       .text	00000000 OSCtxSw
0003b11c g     F .text	0000004c packet_check
000290d4 g     F .text	0000027c dhc_setip
000482f8 g     F .text	0000008c alt_icache_flush
0005e3b0 g     O .bss	00000014 mbufq
0002fc2c g     F .text	00000050 soabort
00053dd8 g     O .bss	00000004 __malloc_top_pad
00053e14 g     O .bss	00000004 OSTCBList
0002ab78 g     F .text	00000100 qdel
0003af70 g     F .text	0000016c station_state
000420a4 g     F .text	0000016c rt_lookup
00053f30 g     O .bss	00000004 alt_fd_list_lock
00051cc0 g     O .rwdata	00000004 __mb_cur_max
00025104 g     F .text	00000318 igmp_validate
0000fb40 g     F .text	0000000c _localeconv_r
00024420 g     F .text	000002a8 ip_startup
0002e258 g     F .text	00000250 t_accept
00031710 g     F .text	00000094 soisdisconnecting
00010214 g     F .text	0000003c __i2b
0000f480 g     F .text	000004a4 __sfvwrite_r
00021464 g     F .text	00000058 alt_avalon_sgdma_stop
00023e3c g     F .text	000003a0 pktdemux
0005aa64 g     O .bss	00000c30 OSMemTbl
00053e18 g     O .bss	00000001 OSTickStepState
00002f40 g     F .text	00000128 alt_tse_phy_wr_mdio_reg
0002b124 g     F .text	0000009c kbhit
0002e96c g     F .text	000001bc t_setsockopt
00008410 g     F .text	00000054 _sbrk_r
00051b18 g     O .rwdata	00000018 icmpdu_types
00003608 g     F .text	000006a0 alt_tse_mac_group_init
00046f94 g     F .text	000001fc vunlink
00022088 g     F .text	00000a5c tse_mac_init
00051d08 g     O .rwdata	00000002 OSQMax
000262a4 g     F .text	000000a4 ccksum
0004674c g     F .text	000000c8 vf_alloc_buffer
00053f98 g     O .bss	00000004 cachedRoute
00051d74 g     O .rwdata	00000004 lilbufs
0005b694 g     O .bss	00000800 OSTaskStatStk
00045414 g     F .text	00000024 md_ftell
00026348 g     F .text	00000054 cksum
0001be7c g     F .text	000000f8 OSMemNameGet
0002f850 g     F .text	0000011c sofree
00053e68 g     O .bss	00000004 ifNumber
00051ce8 g     O .rwdata	00000002 OSFlagEn
00014388 g     F .text	0000005c _read_r
00051d2e g     O .rwdata	00000002 OSTimeTickHookEn
000399a8 g     F .text	00000074 alt_dcache_flush
0001baf8 g     F .text	000000a0 OS_FlagUnlink
0001ce40 g     F .text	00000168 OSQPost
00051db4 g     O .rwdata	00000004 alt_max_fd
00019ac4 g     F .text	00000064 OS_MemCopy
00051d7c g     O .rwdata	00000004 bigbufs
00038860 g     F .text	000000cc tcp_disconnect
00019b28 g     F .text	000000cc OS_Sched
00013f90 g     F .text	00000100 _fclose_r
0001bd8c g     F .text	000000f0 OSMemGet
0001effc g     F .text	000001c0 OSTaskNameSet
0000eb48 g     F .text	00000030 fflush
00053dd4 g     O .bss	00000004 __malloc_max_sbrked_mem
00053e1c g     O .bss	00000004 OSCtxSwCtr
0005de7c g     O .bss	00000064 igmpstats
0003ad4c g     F .text	00000028 OSTimeTickHook
00028554 g     F .text	000000e4 dhc_rx_offer
00025cd4 g     F .text	00000108 bsd_getsockopt
00051cf2 g     O .rwdata	00000002 OSFlagNameSize
0005e7d4 g     O .bss	00000018 ire_stats
00006160 g     F .text	000001f0 LEDManagementTask
00038aa0 g     F .text	000001a0 udp_soinput
0002aacc g     F .text	000000ac putq
000195b4 g     F .text	000000fc OS_EventTaskRemoveMulti
00053e88 g     O .bss	00000004 iniche_net_ready
00015260 g     F .text	0000089c .hidden __adddf3
000193b4 g     F .text	0000014c OS_EventTaskWaitMulti
00047e58 g     F .text	00000048 isvfile
00030c84 g     F .text	00000430 sosetopt
00026de0 g     F .text	000000e0 netmain
00035d28 g     F .text	000000f8 tcp_mss
0001092c g     F .text	0000011c __b2d
00045524 g     F .text	000002fc parse_ipad
000466bc g     F .text	00000020 get_vfopen_error
00051d0a g     O .rwdata	00000002 OSQSize
00014ba4 g     F .text	00000590 .hidden __umoddi3
00017b88 g     F .text	000000d4 lseek
0003b1e0 g     F .text	000000c0 inet_timer
0001d944 g     F .text	00000268 OSSemPend
00003134 g     F .text	000002c4 alt_tse_phy_add_profile_default
00006a4c g     F .text	000001e4 sss_send_menu
00004860 g     F .text	00000598 alt_tse_phy_get_cap
00051cb0 g     O .rwdata	00000004 _global_impure_ptr
0002677c g     F .text	00000154 print_eth
00046b98 g     F .text	00000050 vfopen
0003a3c4 g     F .text	000000fc alt_read
00010da0 g     F .text	000005a0 _realloc_r
000008d0 g     F .text	000002bc alt_NetworkErrorHandler
00051cf4 g     O .rwdata	00000002 OSLowestPrio
0005e864 g       *ABS*	00000000 __bss_end
00039ed8 g     F .text	000000f0 alt_iic_isr_register
00020ecc g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0002c094 g     F .text	00000110 m_free
0003adc8 g     F .text	00000020 OSTCBInitHook
0002326c g     F .text	00000040 tse_mac_stats
0002a608 g     F .text	0000028c pk_validate
00051d3a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0003a5ec g     F .text	00000104 alt_tick
00046458 g     F .text	0000023c in_pcblookup
0002a1f0 g     F .text	000000c0 find_opt
000145e4 g     F .text	000005c0 .hidden __udivdi3
0002bf0c g     F .text	00000188 m_getnbuf
0002a958 g     F .text	000000bc dump_buf_estats
000140a4 g     F .text	00000184 _fputwc_r
00004700 g     F .text	00000160 alt_tse_phy_check_link
00053f6c g     O .bss	00000004 arpRepsOut
00051cdc g     O .rwdata	00000002 OSEventEn
0004d724 g     O .rodata	00000028 __mprec_bigtens
0000fff8 g     F .text	00000104 __s2b
00051d36 g     O .rwdata	00000002 OSTmrCfgNameSize
00017758 g     F .text	000000a4 .hidden __floatunsidf
0003ade8 g     F .text	000000f8 netmain_init
00005cf4 g     F .text	000000e4 marvell_cfg_sgmii
00004544 g     F .text	000001bc alt_tse_phy_restart_an
000106d4 g     F .text	00000060 __mcmp
00053ea4 g     O .bss	00000004 dsc_requests
0003714c g     F .text	0000040c tcp_respond
00038e7c g     F .text	000002d8 udp4_sockbind
00053ef0 g     O .bss	00000004 old_mode
00024e34 g     F .text	00000254 igmp_joingroup
0002d238 g     F .text	00000334 so_icmpdu
0000eee8 g     F .text	00000018 __fp_lock_all
00053fb8 g     O .bss	00000004 vfs_dir_stale
00039e8c g     F .text	0000004c alt_ic_irq_enabled
0005666c g     O .bss	00000010 pphy_profiles
00040314 g     F .text	000000e0 ip_reasm_process_timer_tick
00047efc g     F .text	00000058 vclearerr
000261c8 g     F .text	000000dc bsd_setsockopt
0002c698 g     F .text	00000054 mbuf_len
0001b904 g     F .text	000000e4 OS_FlagInit
0003a554 g     F .text	00000098 alt_alarm_stop
00047c34 g     F .text	000001cc strippath
00051d6c g     O .rwdata	00000004 reqlist
00027024 g     F .text	000001a4 tcp_sleep
00049d24 g     F .text	00000024 strtol
000276fc g     F .text	000007bc dhc_upcall
0003892c g     F .text	000000d0 tcp_usrclosed
21040000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00053edc g     O .bss	00000004 cticks_factor
00051d18 g     O .rwdata	00000002 OSTaskIdleStkSize
00045f1c g     F .text	0000020c in_pcbbind
00053f34 g     O .bss	00000004 alt_irq_active
0001d52c g     F .text	000000b0 OSSemAccept
0001c08c g     F .text	000000d8 OSMemPut
0001bb98 g     F .text	000001f4 OSMemCreate
00053e20 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d0 alt_irq_handler
00051970 g     O .rwdata	00000028 alt_dev_null
00051d8e g     O .rwdata	00000001 tcprexmtthresh
00051d2c g     O .rwdata	00000002 OSTicksPerSec
0003cd64 g     F .text	00000090 if_killsocks
0003d78c g     F .text	00000218 ip_write
00040e44 g     F .text	000005d0 ip_rcv_phase2
0002e754 g     F .text	00000044 t_getsockname
0002e4a8 g     F .text	00000268 t_connect
00051d88 g     O .rwdata	00000004 TCPTV_MSL
0005e008 g     O .bss	00000010 memestats
0000442c g     F .text	00000118 alt_tse_phy_init
0002b1c0 g     F .text	00000064 getch
00051c10 g     O .rwdata	00000080 vfs_root_path
0002e710 g     F .text	00000044 t_getpeername
000214bc g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
0003f110 g     F .text	00000098 ip_reasm_decr_mem_useage
00031e08 g     F .text	00000088 soreserve
0003a910 g       .text	00000000 OSIntCtxSw
0002bce0 g     F .text	00000034 npalloc
00039a1c g     F .text	00000044 alt_dcache_flush_all
000100fc g     F .text	00000068 __hi0bits
00053f94 g     O .bss	00000004 ipraw_eps
0002a2b0 g     F .text	0000028c pk_init
00045214 g     F .text	0000015c md_fread
00022ae4 g     F .text	000002e8 tse_mac_raw_send
00017600 g     F .text	00000088 .hidden __fixdfsi
0005e60c g     O .bss	00000064 intimers
00031ee0 g     F .text	00000048 sbrelease
00032e54 g     F .text	000000f0 ifd_clr
0003277c g     F .text	0000008c sbdroprecord
000268d0 g     F .text	0000007c uslash
0003a7f8 g     F .text	000000f8 alt_write
00053f68 g     O .bss	00000004 arpRepsIn
00027580 g     F .text	00000088 dhc_get_srv_ipaddr
0003b434 g     F .text	00000168 in_timerset
00053e24 g     O .bss	00000004 OSTCBFreeList
00051df4 g       *ABS*	00000000 __ram_rwdata_end
0001dbac g     F .text	0000016c OSSemPendAbort
00035e20 g     F .text	00001008 tcp_output
00053f40 g     O .bss	00000004 activehost
00051dac g     O .rwdata	00000008 alt_dev_list
00026bd8 g     F .text	00000208 parse_args
00053ef4 g     O .bss	00000004 global_TCPwakeup_setIndx
0000ef18 g     F .text	00000044 _fputc_r
000235a8 g     F .text	00000068 write
000215fc g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0002bd14 g     F .text	0000003c npfree
00008134 g     F .text	000000a0 _putc_r
0003c114 g     F .text	000002c0 arpReply
000263c8 g     F .text	0000007c nextarg
00051d30 g     O .rwdata	00000002 OSVersionNbr
0003fa48 g     F .text	0000052c ip_reasm_process_subsequent_fragments
00051dec g     O .rwdata	00000004 pton_error
00053e98 g     O .bss	00000004 dsc_errors
0005465c g     O .bss	00002000 SSSInitialTaskStk
0005db58 g     O .bss	00000014 rcvdq
00032dd8 g     F .text	0000007c tcp_notify
0004fe38 g       *ABS*	00000000 __ram_rodata_end
000178b0 g     F .text	000000b0 fstat
00007288 g     F .text	00000024 fprintf
0002fd14 g     F .text	000000b8 soconnect
0004204c g     F .text	00000058 ip_raw_maxalloc
0001652c g     F .text	000000e0 .hidden __ledf2
00005ec8 g     F .text	00000078 DP83848C_link_status_read
0002809c g     F .text	000004b8 dhc_discover
00006870 g     F .text	000000a0 SSSCreateOSDataStructs
000463d8 g     F .text	00000080 in_setpeeraddr
00051cd8 g     O .rwdata	00000004 OSEndiannessTest
0002b224 g     F .text	0000003c clock_init
00046e20 g     F .text	000000cc vfgets
0003b7cc g     F .text	00000188 et_send
0001044c g     F .text	00000140 __pow5mult
00012a9c g     F .text	0000135c ___vfiprintf_internal_r
00053de8 g     O .bss	00000004 __nlocale_changed
00015258 g     F .text	00000008 .hidden __umodsi3
00045820 g     F .text	00000060 inet_addr
0003efdc g     F .text	00000094 ip_reasm_check_mem_useage
00030b8c g     F .text	000000f8 sorflush
00049d48 g     F .text	00000020 vprintf
0005e11c g     O .bss	000000fc global_tcb_ext
0003dde4 g     F .text	00000424 ip_fragment_lc
0005db6c g     O .bss	00000300 netstatic
0002e024 g     F .text	00000160 t_bind
000212c0 g     F .text	00000078 alt_avalon_sgdma_construct_mem_to_stream_desc
00051cea g     O .rwdata	00000002 OSFlagGrpSize
0002ae8c g     F .text	000000d4 udp_close
000213c0 g     F .text	00000050 alt_avalon_sgdma_register_callback
0002b828 g     F .text	00000200 alt_iniche_init
0005e864 g       *ABS*	00000000 end
0002b448 g     F .text	00000088 UNLOCK_NET_RESOURCE
00021e28 g     F .text	00000260 prep_tse_mac
0002ecb0 g     F .text	000000e0 t_recv
00047190 g     F .text	0000018c vfread
00023d5c g     F .text	000000e0 netclose
0000709c g     F .text	000001c4 SSSSimpleSocketServerTask
00049688 g     F .text	0000000c _atoi_r
000012c0 g     F .text	000001e4 alt_tse_phy_add_profile
00051d98 g     O .rwdata	00000004 tcp_keepintvl
000202b4 g     F .text	0000014c altera_avalon_jtag_uart_init
00019d88 g     F .text	000000cc OS_TaskStat
00053e9c g     O .bss	00000004 dsc_discovers
00051d48 g     O .rwdata	00000004 tse_mac_name
000001cc g     F .exceptions	00000074 alt_instruction_exception_entry
00051910 g     O .rwdata	00000018 tcp_protosw
0004a0f0 g       *ABS*	00000000 __CTOR_LIST__
00053fb4 g     O .bss	00000004 vfopen_error
20000000 g       *ABS*	00000000 __alt_stack_pointer
00053f28 g     O .bss	00000004 tcp_maxidle
00053ec8 g     O .bss	00000004 firstudp
0002167c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00021c60 g     F .text	00000088 alt_avalon_timer_sc_init
000177fc g     F .text	00000064 .hidden __clzsi2
00020bbc g     F .text	000002c0 altera_avalon_jtag_uart_write
00021100 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
0000eed8 g     F .text	00000004 __sfp_lock_acquire
0000fd2c g     F .text	000000e8 memchr
00019a74 g     F .text	00000050 OS_MemClr
0000ad38 g     F .text	00001ffc ___vfprintf_internal_r
0003a9e0 g     F .text	000002f4 OSTaskStkInit
00008464 g     F .text	00000058 _sprintf_r
000211f0 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
0000f190 g     F .text	000002f0 _free_r
00043d1c g     F .text	00000140 igmpv2_chk4_rtr_alert_opt
0000fb1c g     F .text	00000010 __locale_mb_cur_max
0002f38c g     F .text	000000c0 t_socketclose
0005667c g     O .bss	00002000 LED7SegLightshowTaskStk
00019110 g     F .text	00000198 OS_EventTaskRdy
00049f04 g     F .text	00000194 __call_exitprocs
00008388 g     F .text	00000074 __srget_r
00022dcc g     F .text	000000b0 tse_sgdmaRx_isr
00053e28 g     O .bss	00000001 OSCPUUsage
0005de6c g     O .bss	00000010 nets
0002b380 g     F .text	000000c8 LOCK_NET_RESOURCE
00029350 g     F .text	000000e4 dhc_resetip
00053de4 g     O .bss	00000004 __mlocale_changed
00023028 g     F .text	00000244 tse_mac_rcv
0002dfa4 g     F .text	00000080 t_socket
00051cb8 g     O .rwdata	00000004 __malloc_sbrk_base
00000240 g     F .text	0000004c _start
0003b784 g     F .text	00000048 etainit
00053f38 g     O .bss	00000004 _alt_tick_rate
0003b168 g     F .text	00000024 mcastlist
0001c9d8 g     F .text	000002fc OSQPend
0005e018 g     O .bss	000000f0 pktlog
00043890 g     F .text	00000144 igmpv2_process_report
00032fb8 g     F .text	00000078 ifd_isset
000425fc g     F .text	0000012c del_route
00021520 g     F .text	00000054 alt_avalon_sgdma_open
0000ad30 g     F .text	00000008 _user_strerror
0001f928 g     F .text	00000148 OSTimeDly
00006350 g     F .text	00000054 get_mac_addr
0002f780 g     F .text	000000d0 solisten
0001058c g     F .text	00000148 __lshift
00053f3c g     O .bss	00000004 _alt_nticks
00003068 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
00023538 g     F .text	00000070 read
0001fef4 g     F .text	0000025c alt_sys_init
00037800 g     F .text	00000048 tcp_quench
00011758 g     F .text	000001c8 __ssprint_r
0002694c g     F .text	00000170 ns_printf
0003cc00 g     F .text	000000d4 isbcast
0002b4d0 g     F .text	00000224 TK_NEWTASK
00049df0 g     F .text	00000114 __register_exitproc
00053e29 g     O .bss	00000001 OSTaskCtr
0003ef0c g     F .text	000000d0 ip_reasm_determine_type_of_frag
00053db1 g     O .bss	00000001 phy_profile_count
00049918 g     F .text	000000c0 strncmp
000020fc g     F .text	00000074 alt_tse_get_mac_group_index
0001fa70 g     F .text	00000160 OSTimeDlyHMSM
00041c78 g     F .text	000000b8 ip_raw_close
00010250 g     F .text	000001fc __multiply
00051b60 g     O .rwdata	000000b0 mdlist
000207b4 g     F .text	00000068 altera_avalon_jtag_uart_close
00024930 g     F .text	000000e0 igmp_input
0003dd20 g     F .text	000000c4 ip_raw_write
0004fe38 g       *ABS*	00000000 __ram_rwdata_start
0004731c g     F .text	000003b0 vfwrite_locked
000499d8 g     F .text	000000ec strncpy
0004a0f0 g       *ABS*	00000000 __ram_rodata_start
00053ea0 g     O .bss	00000004 dsc_offers
000545c0 g     O .bss	00000028 __malloc_current_mallinfo
00051cde g     O .rwdata	00000002 OSEventMax
00045b04 g     F .text	00000068 inet_setport
00010a48 g     F .text	0000013c __d2b
0001dd18 g     F .text	00000110 OSSemPost
000357f0 g     F .text	00000174 tcp_dooptions
00053dcc g     O .bss	00000004 SSSLEDEventFlag
00031610 g     F .text	00000100 soisconnected
00018cc8 g     F .text	000000d8 OSSchedUnlock
00041b48 g     F .text	00000028 netexit
00006410 g     F .text	000001d4 get_serial_number
00053e84 g     O .bss	00000004 nettick_wakes
00002ee8 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
00053f1c g     O .bss	00000001 tcpprintfs
0003b59c g     F .text	0000009c in_timerkill
0004376c g     F .text	00000124 igmpv2_input
00053eb0 g     O .bss	00000004 dsc_declines
00020150 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002639c g     F .text	0000002c do_trap
000481fc g     F .text	000000fc alt_get_fd
00025ddc g     F .text	000000f0 bsd_ioctl
00053e2c g     O .bss	00000004 OSMemFreeList
00018e0c g     F .text	000000ac OSStatInit
0002c974 g     F .text	000001d0 tcp_rcv
00026738 g     F .text	00000044 panic
00053fbc g     O .bss	00000004 vfs_open_files
00024294 g     F .text	0000018c ip2mac
00039730 g     F .text	00000158 alt_busy_sleep
0001b67c g     F .text	000000c4 OSFlagQuery
00032b34 g     F .text	000001e4 sock_select
00044ddc g     F .text	00000264 dhc_setup
00036fec g     F .text	00000058 tcp_init
00053ef8 g     O .bss	00000004 cticks
00053e8d g     O .bss	00000001 to_nettick
00051d14 g     O .rwdata	00000002 OSTaskCreateExtEn
00013e78 g     F .text	00000054 _close_r
00023610 g     F .text	000005f8 Netinit
0002babc g     F .text	00000038 prep_armintcp
00041808 g     F .text	0000014c in_addmulti
00037044 g     F .text	00000108 tcp_template
000053a4 g     F .text	00000320 alt_tse_phy_get_common_speed
0002c788 g     F .text	0000006c remque
00049d68 g     F .text	00000014 _vprintf_r
00033094 g     F .text	00000404 tcp_reass
00045ca0 g     F .text	000001a0 tcp_cksum
00039154 g     F .text	00000374 udp4_socksend
00046be8 g     F .text	000001b0 vfclose_locked
00032f44 g     F .text	00000074 ifd_set
0004989c g     F .text	0000007c memcmp
000190f4 g     F .text	0000001c OS_Dummy
00020210 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a144 g     F .text	000000ac dhc_set_state
00053e64 g     O .bss	00000004 NDEBUG
0005e864 g       *ABS*	00000000 __alt_stack_base
00053dbc g     O .bss	00000004 last_flash_sector
00020260 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00031e90 g     F .text	00000050 sbreserve
00053db2 g     O .bss	00000001 mac_group_count
00041d30 g     F .text	0000021c ip_raw_input
000072ac g     F .text	000000cc _fwrite_r
00051d78 g     O .rwdata	00000004 lilbufsiz
00033030 g     F .text	00000064 ifd_get
00031d74 g     F .text	00000094 sbwakeup
0000cec8 g     F .text	00000130 __swsetup_r
00021ce8 g     F .text	00000140 altera_eth_tse_init
0005be94 g     O .bss	000001e0 OSQTbl
00035a88 g     F .text	00000254 tcp_xmit_timer
00022e7c g     F .text	000001ac tse_sgdma_read_init
00015afc g     F .text	000008cc .hidden __divdf3
0000ed98 g     F .text	00000118 __sfp
0000660c g     F .text	00000138 generate_mac_addr
0003cedc g     F .text	00000184 ip_bldhead
00010c9c g     F .text	00000078 __copybits
00031f28 g     F .text	0000009c sbappend
00050394 g     O .rwdata	00000408 __malloc_av_
0000eee4 g     F .text	00000004 __sinit_lock_release
00053e30 g     O .bss	00000004 OSTCBHighRdy
0001660c g     F .text	00000724 .hidden __muldf3
0003d9a4 g     F .text	0000037c ip_write2
00011578 g     F .text	00000054 __sread
00051dd8 g     O .rwdata	00000004 arp_ageout
00053e34 g     O .bss	00000004 OSQFreeList
00003ca8 g     F .text	0000041c alt_tse_mac_get_phy
0003cdf4 g     F .text	000000e8 ip_init
000480e8 g     F .text	00000114 alt_find_file
0004200c g     F .text	00000040 ip_raw_free
0003c010 g     F .text	00000104 make_arp_entry
00039adc g     F .text	000000a4 alt_dev_llist_insert
00018020 g     F .text	00000120 __malloc_lock
00007260 g     F .text	00000028 _fprintf_r
00017d30 g     F .text	000000b0 sbrk
00038a3c g     F .text	00000064 udp_lookup
00008da0 g     F .text	00001f90 ___svfprintf_internal_r
00021410 g     F .text	00000054 alt_avalon_sgdma_start
00018330 g     F .text	0000013c OSEventNameSet
0000e920 g     F .text	00000228 _fflush_r
000023a8 g     F .text	0000008c alt_tse_mac_set_duplex
00013ecc g     F .text	000000c4 _calloc_r
0002bc00 g     F .text	000000e0 npfree_base
00053e38 g     O .bss	00000001 OSRdyGrp
000451cc g     F .text	00000028 md_fopen
00051928 g     O .rwdata	00000018 udp_protosw
00046358 g     F .text	00000080 in_setsockaddr
00053db0 g       *ABS*	00000000 __bss_start
000060dc g     F .text	00000084 LED7SegLightshowTask
00031fc4 g     F .text	000000d4 sbappendrecord
0005e784 g     O .bss	00000050 ip_mib
00007f24 g     F .text	00000124 memset
0002fdcc g     F .text	00000098 sodisconnect
00000efc g     F .text	00000080 main
00053df4 g     O .bss	00000004 alt_envp
00053dd0 g     O .bss	00000004 __malloc_max_total_mem
000069dc g     F .text	00000070 sss_reset_connection
0002c4d4 g     F .text	000001c4 m_adj
000201b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ceac g     F .text	0000001c __swbuf
00045438 g     F .text	000000c8 md_fgetc
0004d964 g     O .rodata	00000100 OSUnMapTbl
0003e868 g     F .text	0000028c ip_dump
00027364 g     F .text	0000021c tk_stats
00051d54 g     O .rwdata	00000008 alt_iniche_dev_list
0005867c g     O .bss	00000078 SSSLEDCommandQTbl
00051d4c g     O .rwdata	00000008 alt_sgdma_list
00051d0e g     O .rwdata	00000002 OSSemEn
00053ee0 g     O .bss	00000004 OS_TPS
0002d81c g     F .text	0000073c rawip_usrreq
0001b2f4 g     F .text	00000388 OSFlagPost
000116ac g     F .text	00000008 __sclose
000459e4 g     F .text	0000005c print46_addr
20000000 g       *ABS*	00000000 __alt_heap_limit
00014090 g     F .text	00000014 fclose
000192a8 g     F .text	0000010c OS_EventTaskWait
00049ac4 g     F .text	00000260 _strtol_r
000265f8 g     F .text	00000140 print_uptime
00019e54 g     F .text	000000c8 OS_TaskStatStkChk
0001ecfc g     F .text	00000158 OSTaskDelReq
0000d1f8 g     F .text	00001728 _dtoa_r
000074e8 g     F .text	000007a8 _malloc_r
00045500 g     F .text	00000024 md_unlink
00014558 g     F .text	00000030 __ascii_wctomb
00001194 g     F .text	00000088 tse_mac_SwReset
00045ec8 g     F .text	00000054 in_pcbdetach
00051db8 g     O .rwdata	00000004 alt_errno
00051de8 g     O .rwdata	00000004 mdlist_size
00018da0 g     F .text	0000006c OSStart
000446ec g     F .text	00000030 u_mctest_init
00017fc4 g     F .text	0000005c __env_unlock
0000f924 g     F .text	000000b8 _fwalk
0001f1bc g     F .text	000001f8 OSTaskResume
0001c164 g     F .text	000000e8 OSMemQuery
00045b6c g     F .text	00000134 convert_ip
0003be9c g     F .text	00000174 find_oldest_arp
00051d20 g     O .rwdata	00000002 OSTaskStatEn
00053f60 g     O .bss	00000004 arpReqsIn
00046814 g     F .text	0000004c vf_free_buffer
00047fc8 g     F .text	00000120 alt_fcntl
00051cfa g     O .rwdata	00000002 OSMemMax
0001cfa8 g     F .text	00000170 OSQPostFront
0002b0f4 g     F .text	00000030 dtrap
00051d84 g     O .rwdata	00000004 kb_last
000081d4 g     F .text	000000c8 putc
000151a0 g     F .text	00000054 .hidden __divsi3
00002048 g     F .text	00000048 alt_tse_mac_set_common_speed
00053e39 g     O .bss	00000003 OSRdyTbl
00051cd4 g     O .rwdata	00000002 OSDebugEn
0002baf4 g     F .text	0000010c npalloc_base
00024734 g     F .text	000000cc ip_exit
0000f06c g     F .text	00000124 _malloc_trim_r
0004a0f0 g       *ABS*	00000000 __CTOR_END__
00051cec g     O .rwdata	00000002 OSFlagNodeSize
00053e94 g     O .bss	00000004 dhc_conn
0002b27c g     F .text	00000068 cticks_hook
00051d34 g     O .rwdata	00000002 OSTmrCfgMax
0003b0dc g     F .text	00000040 sysuptime
000116b4 g     F .text	000000a4 strcmp
000065e4 g     F .text	00000028 generate_and_store_mac_addr
000403f4 g     F .text	000001b0 ip_reasm_delete_ire
0001c45c g     F .text	000001fc OSQCreate
0002b2e4 g     F .text	0000005c irq_Mask
0001ee54 g     F .text	000001a8 OSTaskNameGet
00053f48 g     O .bss	00000004 nextppp
00053ed0 g     O .bss	00000004 irq_level
00023c08 g     F .text	00000154 fixup_subnet_mask
0004a0f0 g       *ABS*	00000000 __flash_rodata_start
0001d118 g     F .text	0000020c OSQPostOpt
00018eb8 g     F .text	0000021c OSTimeTick
0003ed18 g     F .text	00000130 ip_copypkt
0002a054 g     F .text	00000088 dhc_alldone
00051d1c g     O .rwdata	00000002 OSTaskMax
0004a0f0 g       *ABS*	00000000 __DTOR_LIST__
0001d5dc g     F .text	00000100 OSSemCreate
00053e78 g     O .bss	00000004 igmp_all_hosts_group
00051d40 g     O .rwdata	00000002 OSTmrWheelSize
00031cd4 g     F .text	00000038 sbselqueue
00053e80 g     O .bss	00000004 netmain_wakes
0003c3d4 g     F .text	0000026c arprcv
00026fb4 g     F .text	00000070 TK_OSTaskResume
0002541c g     F .text	0000041c igmp_print_stats
000163c8 g     F .text	00000084 .hidden __nedf2
0002bdc0 g     F .text	00000090 pffindtype
00051d16 g     O .rwdata	00000002 OSTaskDelEn
00051d9c g     O .rwdata	00000004 tcp_sendspace
00047878 g     F .text	00000110 vftell
0005dee0 g     O .bss	00000012 eth_prt_buf
0001de28 g     F .text	00000110 OSSemQuery
0001c658 g     F .text	000002c8 OSQDel
0001ccd4 g     F .text	0000016c OSQPendAbort
0001fec0 g     F .text	00000034 alt_irq_init
00002008 g     F .text	00000040 alt_tse_mac_get_common_speed
0005e348 g     O .bss	00000018 app_semaphore
0003a4c0 g     F .text	00000060 alt_release_fd
0002b7b0 g     F .text	00000078 post_app_sem
00024884 g     F .text	000000ac igmp_init
000496cc g     F .text	0000001c memalign
000084bc g     F .text	0000006c sprintf
0004d854 g     O .rodata	00000100 .hidden __clz_tab
00053ebc g     O .bss	00000004 dsc_renew
00045370 g     F .text	00000078 md_fwrite
00053de0 g     O .bss	00000004 _PathLocale
00053ee4 g     O .bss	00000004 tcp_sleep_count
0002c7f4 g     F .text	00000078 insque
00049668 g     F .text	00000014 atexit
00053fb0 g     O .bss	00000004 vfsfiles
00013e1c g     F .text	0000005c _write_r
00049d7c g     F .text	00000050 _vsprintf_r
00042f24 g     F .text	000002a0 udp_send
00018c40 g     F .text	00000088 OSSchedLock
00024b90 g     F .text	000002a4 igmp_send
0000fb4c g     F .text	0000001c setlocale
0001a684 g     F .text	00000128 OSFlagCreate
000586f4 g     O .bss	00002000 LEDManagementTaskStk
0002b340 g     F .text	00000040 irq_Unmask
0002e184 g     F .text	000000d4 t_listen
00051cb4 g     O .rwdata	00000004 _impure_ptr
0004fe38 g     O .rwdata	00000018 ssstask
00053dec g     O .bss	00000004 alt_argc
00038080 g     F .text	000006c8 tcp_usrreq
00038c40 g     F .text	0000023c udp_usrreq
0002bd50 g     F .text	00000034 ncpalloc
00039bdc g     F .text	0000005c _do_dtors
0000fb38 g     F .text	00000008 __locale_cjk_lang
00051ce6 g     O .rwdata	00000002 OSEventMultiEn
00005f40 g     F .text	00000078 DP83620_link_status_read
00051dd0 g     O .rwdata	00000004 pingdelay
0003b9d8 g     F .text	00000070 arp_send_pending
0005d918 g     O .bss	000000e0 tse_mac_if
000434a4 g     F .text	000002c8 igmpv1_input
0001135c g     F .text	000001a8 __srefill_r
0002ba28 g     F .text	00000074 pre_task_setup
00053f04 g     O .bss	00000004 rcvdq_sem_ptr
00025a78 g     F .text	00000120 bsd_getsockname
000405a4 g     F .text	00000130 ip_reasm_mark_compact_rfq
00006848 g     F .text	00000028 FindLastFlashSectorOffset
0001a7ac g     F .text	00000270 OSFlagDel
00053e3c g     O .bss	00000004 OSEventFreeList
000276b8 g     F .text	00000044 dhc_set_callback
00000020 g       .exceptions	00000000 alt_irq_entry
00053f58 g     O .bss	00000004 arpcache
00048fe0 g     F .text	00000308 icmp_destun
00041a5c g     F .text	00000064 lookup_mcast
00047bec g     F .text	00000048 vfslookup
00041414 g     F .text	000003f4 ip_demux
000108cc g     F .text	00000060 __ulp
00053ee8 g     O .bss	00000004 tcp_wakeup_count
0001ac9c g     F .text	000005f0 OSFlagPend
00051d32 g     O .rwdata	00000002 OSTmrEn
0000ef00 g     F .text	00000018 __fp_unlock_all
0002b6f4 g     F .text	000000bc wait_app_sem
0000ef5c g     F .text	00000058 fputc
00051d5c g     O .rwdata	00000004 ipmcfail_str
00053efc g     O .bss	00000004 memtrapsize
0002c1e4 g     F .text	000002f0 m_copy
00051da4 g     O .rwdata	00000008 alt_fs_list
0005e3c4 g     O .bss	00000014 mfreeq
00019c64 g     F .text	00000074 OS_StrCopy
0002f724 g     F .text	0000005c sobind
00045154 g     F .text	00000078 init_memdev
00053db0 g     O .bss	00000001 to_ssstask
0002c86c g     F .text	00000108 nptcp_init
00051cfc g     O .rwdata	00000002 OSMemNameSize
0005e218 g     O .bss	000000f0 global_TCPwakeup_set
0003ad90 g     F .text	0000001c OSInitHookEnd
000317a4 g     F .text	000000c0 soisdisconnected
00000020 g       *ABS*	00000000 __ram_exceptions_start
0003b954 g     F .text	00000084 arp_free_pending
00051d28 g     O .rwdata	00000002 OSTCBPrioTblMax
0000fb68 g     F .text	0000000c localeconv
0002f96c g     F .text	000002c0 soclose
0005e108 g     O .bss	00000014 bigfreeq
00051d24 g     O .rwdata	00000002 OSTaskStatStkChkEn
00051dcc g     O .rwdata	00000004 prompt
00051d94 g     O .rwdata	00000004 tcp_keepidle
000051fc g     F .text	000001a8 alt_tse_phy_set_adv_10
0002d654 g     F .text	000001c8 rawip_soinput
00039cf8 g     F .text	00000050 alt_ic_isr_register
000476cc g     F .text	00000060 vfwrite
00051cf8 g     O .rwdata	00000002 OSMemEn
00031a78 g     F .text	000000a8 soqinsque
00053f8c g     O .bss	00000004 so_evtmap_delete
00007378 g     F .text	00000040 fwrite
00051d02 g     O .rwdata	00000002 OSMutexEn
00053f78 g     O .bss	00000004 h_ireq
00051df4 g       *ABS*	00000000 _edata
0003e208 g     F .text	000005bc ip_fragment
000233f8 g     F .text	00000140 iniche_devices_init
0005e3d8 g     O .bss	00000028 tcp_saveti
00026b00 g     F .text	000000d8 con_page
0005e864 g       *ABS*	00000000 _end
000310b4 g     F .text	000004a8 sogetopt
00053e40 g     O .bss	00000001 OSIntNesting
000040c4 g     F .text	00000240 alt_tse_mac_associate_phy
000518e0 g     O .rwdata	00000030 nettasks
0002a938 g     F .text	00000020 pk_get_max_intrsafe_buf_len
0003eaf4 g     F .text	00000224 iproute
0002d148 g     F .text	000000f0 np_stripoptions
00053f90 g     O .bss	00000001 so_evtmap
00000240 g       *ABS*	00000000 __ram_exceptions_end
0002081c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000efb4 g     F .text	0000009c _fputs_r
0001fbd0 g     F .text	000001f0 OSTimeDlyResume
00006910 g     F .text	000000cc SSSCreateTasks
00042210 g     F .text	000003ec add_route
0001ab4c g     F .text	00000150 OSFlagNameSet
000241dc g     F .text	000000b8 c_older
0003244c g     F .text	00000080 sbflush
000451f4 g     F .text	00000020 md_fclose
00027338 g     F .text	0000002c tk_yield
00006c30 g     F .text	000000c8 sss_handle_accept
0001f3b4 g     F .text	000001c8 OSTaskStkChk
00039de8 g     F .text	000000a4 alt_ic_irq_disable
0002fe64 g     F .text	0000054c sosend
00051cfe g     O .rwdata	00000002 OSMemSize
0003e7c4 g     F .text	000000a4 ip_mymach
00021574 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
000115d4 g     F .text	0000007c __swrite
00053ecc g     O .bss	00000004 cticks_initialized
00051dd4 g     O .rwdata	00000004 deflength
0002eec8 g     F .text	000001f0 t_sendto
00051cbc g     O .rwdata	00000004 __malloc_trim_threshold
00008048 g     F .text	00000070 _perror_r
0000fb2c g     F .text	0000000c __locale_msgcharset
00053e44 g     O .bss	00000004 OSTCBCur
0002f570 g     F .text	000001b4 socreate
00049694 g     F .text	00000038 exit
0005e670 g     O .bss	00000100 arp_table
00053fcc g     O .bss	00000004 icmpdu_hook
00051d00 g     O .rwdata	00000002 OSMemTblSize
0000f9dc g     F .text	000000b8 _fwalk_reent
0003b638 g     F .text	00000024 create_apptasks
00051d90 g     O .rwdata	00000004 tcp_ttl
00010734 g     F .text	00000198 __mdiff
0002bd84 g     F .text	0000003c ncpfree
000151f4 g     F .text	0000005c .hidden __modsi3
000496e8 g     F .text	000001b4 _memalign_r
00053e5c g     O .bss	00000004 MaxLnh
00051cac g     O .rwdata	00000004 __ctype_ptr__
00001270 g     F .text	00000050 tse_mac_setGMIImode
00045960 g     F .text	00000084 inet_ntop
00043438 g     F .text	0000002c udp_maxalloc
00005c10 g     F .text	000000e4 marvell_cfg_gmii
20000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000eedc g     F .text	00000004 __sfp_lock_release
00018a7c g     F .text	00000054 OSInit
00004304 g     F .text	00000128 alt_tse_phy_cfg_pcs
0001f790 g     F .text	0000012c OSTaskQuery
0003aee0 g     F .text	00000090 icmp_port_du
00053f2c g     O .bss	00000004 tcp_iss
0001d480 g     F .text	000000ac OS_QInit
0004967c g     F .text	0000000c atoi
00051d80 g     O .rwdata	00000004 bigbufsiz
00019cd8 g     F .text	00000054 OS_StrLen
00037848 g     F .text	00000078 tcp_putseq
0001bf74 g     F .text	00000118 OSMemNameSet
0004cd90 g     O .rodata	00000101 _ctype_
00032098 g     F .text	000001dc sbappendaddr
00053fc0 g     O .bss	00000004 vfs_total_rw_space
00044560 g     F .text	00000108 ip_getmoptions
00051d1a g     O .rwdata	00000002 OSTaskProfileEn
000431c4 g     F .text	000000f0 udpswap
00053e48 g     O .bss	00000004 OSTime
00053f08 g     O .bss	00000004 nextslow
00037934 g     F .text	00000278 tcp_slowtimo
00037558 g     F .text	0000010c tcp_newtcpcb
0003c640 g     F .text	00000188 send_via_arp
00027608 g     F .text	000000b0 dhc_init
0003ff74 g     F .text	00000058 ip_reasm_find_ire
0005c074 g     O .bss	00000800 OSTaskIdleStk
0004a0b4 g     F .text	0000003c _exit
00047e00 g     F .text	00000058 isvfile_locked
00026044 g     F .text	00000184 bsd_select
000395f0 g     F .text	00000140 alt_alarm_start
0001aa1c g     F .text	00000130 OSFlagNameGet
00043464 g     F .text	00000040 udp_free
0002aa14 g     F .text	000000b8 getq
00047f54 g     F .text	00000024 prep_vfs
0001fdc0 g     F .text	00000064 OSTimeGet
00051dc8 g     O .rwdata	00000004 name
00032680 g     F .text	000000fc sbdropend
0000fb74 g     F .text	000001b8 __smakebuf_r
0003c7c8 g     F .text	00000110 cb_arpent_tmo
00008d08 g     F .text	00000098 strlen
00043e5c g     F .text	00000144 IPADDR_TO_NETP
00025ecc g     F .text	00000034 bsd_inet_ntoa
0003ad14 g     F .text	0000001c OSTaskSwHook
0003a21c g     F .text	00000158 open
0002ac78 g     F .text	00000214 udp_open
0005c874 g     O .bss	00000b40 OSEventTbl
00031c2c g     F .text	00000054 socantsendmore
00053fc4 g     O .bss	00000004 vfs_total_dyna_files
0001644c g     F .text	000000e0 .hidden __gedf2
0003a6f0 g     F .text	00000040 alt_uncached_free
0005d3b4 g     O .bss	00000510 OSTCBTbl
00053f64 g     O .bss	00000004 arpReqsOut
0001df38 g     F .text	000000fc OSSemSet
00051df0 g     O .rwdata	00000004 http_root_path
000295e8 g     F .text	00000270 dhc_extract_opts
0003f4e8 g     F .text	00000560 ip_reasm_compute_overlap
00051cc4 g     O .rwdata	00000004 __wctomb
00012a84 g     F .text	00000018 __sprint_r
00039cc8 g     F .text	00000030 alt_icache_flush_all
000010ec g     F .text	000000a8 tse_mac_aRxRead
00008528 g     F .text	00000164 strchr
0005def2 g     O .bss	00000012 ipreturn
00053f80 g     O .bss	00000004 port_prep
00051963 g     O .rwdata	0000000d tcp_backoff
000315a4 g     F .text	0000006c soisconnecting
00000e84 g     F .text	00000078 SSSInitialTask
0000f050 g     F .text	0000001c fputs
00051dbc g     O .rwdata	00000004 alt_priority_mask
000439d4 g     F .text	000001f8 igmpv2_process_query
00032808 g     F .text	000001ec t_select
0001d6dc g     F .text	00000268 OSSemDel
000394c8 g     F .text	00000128 udp4_sockaddr
00053e4c g     O .bss	00000004 OSFlagFreeList
00046128 g     F .text	000001d8 in_pcbconnect
00053f20 g     O .bss	00000004 dropline
00053f7c g     O .bss	00000004 ire_cticks
00039d48 g     F .text	000000a0 alt_ic_irq_enable
00051ce0 g     O .rwdata	00000002 OSEventNameSize
0000cd34 g     F .text	00000024 __vfprintf_internal
00026ec0 g     F .text	00000080 tk_netmain
00046300 g     F .text	00000058 in_pcbdisconnect
00053e50 g     O .bss	00000001 OSStatRdy
0005d8c4 g     O .bss	00000054 OSTCBPrioTbl
00014588 g     F .text	0000005c _wctomb_r
00017f04 g     F .text	000000c0 __env_lock
00051d26 g     O .rwdata	00000002 OSTaskSwHookEn
00051b3c g     O .rwdata	00000024 mdio
000022c8 g     F .text	000000e0 alt_tse_mac_set_speed
00021170 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00025838 g     F .text	00000120 bsd_accept
00051da0 g     O .rwdata	00000004 tcp_recvspace
00016d30 g     F .text	000008d0 .hidden __subdf3
0004a098 g     F .text	0000001c _vfprintf_r
000389fc g     F .text	00000040 tcpinit
00053e7c g     O .bss	00000004 igmp_all_rtrs_group
0002d5f0 g     F .text	00000064 rawip_lookup
0003b6e4 g     F .text	000000a0 fcntl
00010164 g     F .text	000000b0 __lo0bits
00032274 g     F .text	000001d8 sbcompress
00051dc0 g     O .rwdata	00000008 alt_alarm_list
00037664 g     F .text	000000ac tcp_drop
00051cee g     O .rwdata	00000002 OSFlagWidth
00039b80 g     F .text	0000005c _do_ctors
00004fb4 g     F .text	00000248 alt_tse_phy_set_adv_100
00037c08 g     F .text	00000478 tcp_timers
00024800 g     F .text	00000084 if_netnumber
00044668 g     F .text	00000084 ip_freemoptions
0003155c g     F .text	00000048 sohasoutofband
00014480 g     F .text	000000d8 wcrtomb
00033498 g     F .text	00002358 tcp_input
00025958 g     F .text	00000120 bsd_getpeername
00025f00 g     F .text	00000144 bsd_recvfrom
000233b0 g     F .text	00000048 close
00053eac g     O .bss	00000004 dsc_bpreplys
00053dfc g     O .bss	00000004 alt_envsem
00053e54 g     O .bss	00000004 OSIdleCtrRun
000190d4 g     F .text	00000020 OSVersion
00051d38 g     O .rwdata	00000002 OSTmrCfgWheelSize
00017ab8 g     F .text	00000080 alt_load
0001f8bc g     F .text	0000006c OS_TaskStkClr
00046694 g     F .text	00000028 set_vfopen_error
00051d12 g     O .rwdata	00000002 OSTaskCreateEn
00002090 g     F .text	0000006c alt_tse_get_system_index
00051940 g     O .rwdata	00000018 rawip_protosw
00031d0c g     F .text	00000068 sbwait
000196b0 g     F .text	00000064 OS_EventWaitListInit
00029858 g     F .text	00000570 dhc_second
00021b48 g     F .text	000000a4 alt_avalon_sgdma_init
00053f4c g     O .bss	00000004 port_1s_callout
00014228 g     F .text	00000058 fputwc
0003adac g     F .text	0000001c OSTaskIdleHook
000074d4 g     F .text	00000014 free
0000eee0 g     F .text	00000004 __sinit_lock_acquire
00053e58 g     O .bss	00000001 number_of_tse_mac
0000fee4 g     F .text	00000114 __multadd
0001f57c g     F .text	00000214 OSTaskSuspend
0000febc g     F .text	00000028 _Bfree
00000f7c g     F .text	0000002c no_printf
00031864 g     F .text	00000214 sonewconn
00048420 g     F .text	00000bc0 icmprcv
0002be50 g     F .text	000000bc pffindproto
00019d2c g     F .text	0000005c OS_TaskIdle
00051d3e g     O .rwdata	00000002 OSTmrTblSize
0001d324 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_descriptor_memory+0xdefc0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409014 	ori	at,at,576
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0018ad00 	call	18ad0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008001b4 	movhi	r2,6
 140:	10b94304 	addi	r2,r2,-6900
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008001b4 	movhi	r2,6
 158:	10b94304 	addi	r2,r2,-6900
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_descriptor_memory+0xdefc012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_descriptor_memory+0xdefc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0018b4c0 	call	18b4c <OSIntExit>
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e0:	000531fa 	rdctl	r2,exception
 1e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e8:	e0bffd17 	ldw	r2,-12(fp)
 1ec:	10801f0c 	andi	r2,r2,124
 1f0:	1004d0ba 	srli	r2,r2,2
 1f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f8:	0005333a 	rdctl	r2,badaddr
 1fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 200:	d0a8c817 	ldw	r2,-23776(gp)
 204:	10000726 	beq	r2,zero,224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 208:	d0a8c817 	ldw	r2,-23776(gp)
 20c:	e0fffd17 	ldw	r3,-12(fp)
 210:	1809883a 	mov	r4,r3
 214:	e17fff17 	ldw	r5,-4(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	103ee83a 	callr	r2
 220:	00000206 	br	22c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 228:	0005883a 	mov	r2,zero
}
 22c:	e037883a 	mov	sp,fp
 230:	dfc00117 	ldw	ra,4(sp)
 234:	df000017 	ldw	fp,0(sp)
 238:	dec00204 	addi	sp,sp,8
 23c:	f800283a 	ret

Disassembly of section .text:

00000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     24c:	00bffd16 	blt	zero,r2,244 <__alt_mem_descriptor_memory+0xdefc0244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
     254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     258:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
     25c:	d6a72a14 	ori	gp,gp,40104
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     260:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
     264:	108f6c14 	ori	r2,r2,15792

    movhi r3, %hi(__bss_end)
     268:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
     26c:	18fa1914 	ori	r3,r3,59492

    beq r2, r3, 1f
     270:	10c00326 	beq	r2,r3,280 <_start+0x40>

0:
    stw zero, (r2)
     274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     27c:	10fffd36 	bltu	r2,r3,274 <__alt_mem_descriptor_memory+0xdefc0274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     280:	0017ab80 	call	17ab8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     284:	0017c5c0 	call	17c5c <alt_main>

00000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     288:	003fff06 	br	288 <__alt_mem_descriptor_memory+0xdefc0288>

0000028c <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
     28c:	defffb04 	addi	sp,sp,-20
     290:	dfc00415 	stw	ra,16(sp)
     294:	df000315 	stw	fp,12(sp)
     298:	df000304 	addi	fp,sp,12
     29c:	2005883a 	mov	r2,r4
     2a0:	e17fff15 	stw	r5,-4(fp)
     2a4:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
     2a8:	e0bffe03 	ldbu	r2,-8(fp)
     2ac:	1000011e 	bne	r2,zero,2b4 <alt_uCOSIIErrorHandler+0x28>
   {
      return;
     2b0:	00018206 	br	8bc <alt_uCOSIIErrorHandler+0x630>
   }
   
   fault_level = SYSTEM;  
     2b4:	00800084 	movi	r2,2
     2b8:	e0bffd15 	stw	r2,-12(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
     2bc:	0018c400 	call	18c40 <OSSchedLock>
      
   switch (error_code)
     2c0:	e0bffe03 	ldbu	r2,-8(fp)
     2c4:	10c00a20 	cmpeqi	r3,r2,40
     2c8:	1800261e 	bne	r3,zero,364 <alt_uCOSIIErrorHandler+0xd8>
     2cc:	10c00a48 	cmpgei	r3,r2,41
     2d0:	1800121e 	bne	r3,zero,31c <alt_uCOSIIErrorHandler+0x90>
     2d4:	10c00120 	cmpeqi	r3,r2,4
     2d8:	18006e1e 	bne	r3,zero,494 <alt_uCOSIIErrorHandler+0x208>
     2dc:	10c00148 	cmpgei	r3,r2,5
     2e0:	1800071e 	bne	r3,zero,300 <alt_uCOSIIErrorHandler+0x74>
     2e4:	10c000a0 	cmpeqi	r3,r2,2
     2e8:	18008e1e 	bne	r3,zero,524 <alt_uCOSIIErrorHandler+0x298>
     2ec:	10c000c8 	cmpgei	r3,r2,3
     2f0:	1800731e 	bne	r3,zero,4c0 <alt_uCOSIIErrorHandler+0x234>
     2f4:	10800060 	cmpeqi	r2,r2,1
     2f8:	1000591e 	bne	r2,zero,460 <alt_uCOSIIErrorHandler+0x1d4>
     2fc:	0000de06 	br	678 <alt_uCOSIIErrorHandler+0x3ec>
     300:	10c00520 	cmpeqi	r3,r2,20
     304:	18004a1e 	bne	r3,zero,430 <alt_uCOSIIErrorHandler+0x1a4>
     308:	10c007a0 	cmpeqi	r3,r2,30
     30c:	1800b21e 	bne	r3,zero,5d8 <alt_uCOSIIErrorHandler+0x34c>
     310:	108002a0 	cmpeqi	r2,r2,10
     314:	1000771e 	bne	r2,zero,4f4 <alt_uCOSIIErrorHandler+0x268>
     318:	0000d706 	br	678 <alt_uCOSIIErrorHandler+0x3ec>
     31c:	10c01020 	cmpeqi	r3,r2,64
     320:	1800a21e 	bne	r3,zero,5ac <alt_uCOSIIErrorHandler+0x320>
     324:	10c01048 	cmpgei	r3,r2,65
     328:	1800071e 	bne	r3,zero,348 <alt_uCOSIIErrorHandler+0xbc>
     32c:	10c00f60 	cmpeqi	r3,r2,61
     330:	1800921e 	bne	r3,zero,57c <alt_uCOSIIErrorHandler+0x2f0>
     334:	10c00fa0 	cmpeqi	r3,r2,62
     338:	1800851e 	bne	r3,zero,550 <alt_uCOSIIErrorHandler+0x2c4>
     33c:	10800aa0 	cmpeqi	r2,r2,42
     340:	1000131e 	bne	r2,zero,390 <alt_uCOSIIErrorHandler+0x104>
     344:	0000cc06 	br	678 <alt_uCOSIIErrorHandler+0x3ec>
     348:	10c01920 	cmpeqi	r3,r2,100
     34c:	1800ae1e 	bne	r3,zero,608 <alt_uCOSIIErrorHandler+0x37c>
     350:	10c03fe0 	cmpeqi	r3,r2,255
     354:	1800b91e 	bne	r3,zero,63c <alt_uCOSIIErrorHandler+0x3b0>
     358:	108010a0 	cmpeqi	r2,r2,66
     35c:	1000201e 	bne	r2,zero,3e0 <alt_uCOSIIErrorHandler+0x154>
     360:	0000c506 	br	678 <alt_uCOSIIErrorHandler+0x3ec>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
     364:	00800174 	movhi	r2,5
     368:	10872d04 	addi	r2,r2,7348
     36c:	10800017 	ldw	r2,0(r2)
     370:	10800317 	ldw	r2,12(r2)
     374:	01000174 	movhi	r4,5
     378:	21283c04 	addi	r4,r4,-24336
     37c:	01400044 	movi	r5,1
     380:	01800c44 	movi	r6,49
     384:	100f883a 	mov	r7,r2
     388:	00073780 	call	7378 <fwrite>
         break;
     38c:	0000d506 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
     390:	00800174 	movhi	r2,5
     394:	10872d04 	addi	r2,r2,7348
     398:	10800017 	ldw	r2,0(r2)
     39c:	10800317 	ldw	r2,12(r2)
     3a0:	01000174 	movhi	r4,5
     3a4:	21284904 	addi	r4,r4,-24284
     3a8:	01400044 	movi	r5,1
     3ac:	01800c44 	movi	r6,49
     3b0:	100f883a 	mov	r7,r2
     3b4:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
     3b8:	00800174 	movhi	r2,5
     3bc:	10872d04 	addi	r2,r2,7348
     3c0:	10800017 	ldw	r2,0(r2)
     3c4:	10800317 	ldw	r2,12(r2)
     3c8:	1009883a 	mov	r4,r2
     3cc:	01400174 	movhi	r5,5
     3d0:	29685604 	addi	r5,r5,-24232
     3d4:	01800504 	movi	r6,20
     3d8:	00072880 	call	7288 <fprintf>
            OS_LOWEST_PRIO);
         break;
     3dc:	0000c106 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
     3e0:	00800174 	movhi	r2,5
     3e4:	10872d04 	addi	r2,r2,7348
     3e8:	10800017 	ldw	r2,0(r2)
     3ec:	10800317 	ldw	r2,12(r2)
     3f0:	01000174 	movhi	r4,5
     3f4:	21286304 	addi	r4,r4,-24180
     3f8:	01400044 	movi	r5,1
     3fc:	01800a04 	movi	r6,40
     400:	100f883a 	mov	r7,r2
     404:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
     408:	00800174 	movhi	r2,5
     40c:	10872d04 	addi	r2,r2,7348
     410:	10800017 	ldw	r2,0(r2)
     414:	10800317 	ldw	r2,12(r2)
     418:	1009883a 	mov	r4,r2
     41c:	01400174 	movhi	r5,5
     420:	29686e04 	addi	r5,r5,-24136
     424:	01800284 	movi	r6,10
     428:	00072880 	call	7288 <fprintf>
         break;
     42c:	0000ad06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_MBOX_FULL:
         fault_level = NONE;
     430:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
     434:	00800174 	movhi	r2,5
     438:	10872d04 	addi	r2,r2,7348
     43c:	10800017 	ldw	r2,0(r2)
     440:	10800317 	ldw	r2,12(r2)
     444:	01000174 	movhi	r4,5
     448:	21287704 	addi	r4,r4,-24100
     44c:	01400044 	movi	r5,1
     450:	01800c84 	movi	r6,50
     454:	100f883a 	mov	r7,r2
     458:	00073780 	call	7378 <fwrite>
         break;
     45c:	0000a106 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
     460:	00800044 	movi	r2,1
     464:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, 
     468:	00800174 	movhi	r2,5
     46c:	10872d04 	addi	r2,r2,7348
     470:	10800017 	ldw	r2,0(r2)
     474:	10800317 	ldw	r2,12(r2)
     478:	01000174 	movhi	r4,5
     47c:	21288404 	addi	r4,r4,-24048
     480:	01400044 	movi	r5,1
     484:	01801244 	movi	r6,73
     488:	100f883a 	mov	r7,r2
     48c:	00073780 	call	7378 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
     490:	00009406 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
     494:	00800174 	movhi	r2,5
     498:	10872d04 	addi	r2,r2,7348
     49c:	10800017 	ldw	r2,0(r2)
     4a0:	10800317 	ldw	r2,12(r2)
     4a4:	01000174 	movhi	r4,5
     4a8:	21289704 	addi	r4,r4,-23972
     4ac:	01400044 	movi	r5,1
     4b0:	01800c44 	movi	r6,49
     4b4:	100f883a 	mov	r7,r2
     4b8:	00073780 	call	7378 <fwrite>
         break;
     4bc:	00008906 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
     4c0:	00800044 	movi	r2,1
     4c4:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
     4c8:	00800174 	movhi	r2,5
     4cc:	10872d04 	addi	r2,r2,7348
     4d0:	10800017 	ldw	r2,0(r2)
     4d4:	10800317 	ldw	r2,12(r2)
     4d8:	01000174 	movhi	r4,5
     4dc:	2128a404 	addi	r4,r4,-23920
     4e0:	01400044 	movi	r5,1
     4e4:	01800a44 	movi	r6,41
     4e8:	100f883a 	mov	r7,r2
     4ec:	00073780 	call	7378 <fwrite>
         break;
     4f0:	00007c06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_TIMEOUT:
         fault_level = NONE;
     4f4:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Resource not received in specified time\n");
     4f8:	00800174 	movhi	r2,5
     4fc:	10872d04 	addi	r2,r2,7348
     500:	10800017 	ldw	r2,0(r2)
     504:	10800317 	ldw	r2,12(r2)
     508:	01000174 	movhi	r4,5
     50c:	2128af04 	addi	r4,r4,-23876
     510:	01400044 	movi	r5,1
     514:	01800a04 	movi	r6,40
     518:	100f883a 	mov	r7,r2
     51c:	00073780 	call	7378 <fwrite>
         break;
     520:	00007006 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
     524:	00800174 	movhi	r2,5
     528:	10872d04 	addi	r2,r2,7348
     52c:	10800017 	ldw	r2,0(r2)
     530:	10800317 	ldw	r2,12(r2)
     534:	01000174 	movhi	r4,5
     538:	2128ba04 	addi	r4,r4,-23832
     53c:	01400044 	movi	r5,1
     540:	01800b04 	movi	r6,44
     544:	100f883a 	mov	r7,r2
     548:	00073780 	call	7378 <fwrite>
         break;
     54c:	00006506 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
     550:	00800174 	movhi	r2,5
     554:	10872d04 	addi	r2,r2,7348
     558:	10800017 	ldw	r2,0(r2)
     55c:	10800317 	ldw	r2,12(r2)
     560:	01000174 	movhi	r4,5
     564:	2128c604 	addi	r4,r4,-23784
     568:	01400044 	movi	r5,1
     56c:	01800884 	movi	r6,34
     570:	100f883a 	mov	r7,r2
     574:	00073780 	call	7378 <fwrite>
         break;
     578:	00005a06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
     57c:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
     580:	00800174 	movhi	r2,5
     584:	10872d04 	addi	r2,r2,7348
     588:	10800017 	ldw	r2,0(r2)
     58c:	10800317 	ldw	r2,12(r2)
     590:	01000174 	movhi	r4,5
     594:	2128cf04 	addi	r4,r4,-23748
     598:	01400044 	movi	r5,1
     59c:	01800bc4 	movi	r6,47
     5a0:	100f883a 	mov	r7,r2
     5a4:	00073780 	call	7378 <fwrite>
         break;
     5a8:	00004e06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
     5ac:	00800174 	movhi	r2,5
     5b0:	10872d04 	addi	r2,r2,7348
     5b4:	10800017 	ldw	r2,0(r2)
     5b8:	10800317 	ldw	r2,12(r2)
     5bc:	01000174 	movhi	r4,5
     5c0:	2128db04 	addi	r4,r4,-23700
     5c4:	01400044 	movi	r5,1
     5c8:	018009c4 	movi	r6,39
     5cc:	100f883a 	mov	r7,r2
     5d0:	00073780 	call	7378 <fwrite>
         break;
     5d4:	00004306 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_Q_FULL:
         fault_level = NONE;
     5d8:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
     5dc:	00800174 	movhi	r2,5
     5e0:	10872d04 	addi	r2,r2,7348
     5e4:	10800017 	ldw	r2,0(r2)
     5e8:	10800317 	ldw	r2,12(r2)
     5ec:	01000174 	movhi	r4,5
     5f0:	2128e504 	addi	r4,r4,-23660
     5f4:	01400044 	movi	r5,1
     5f8:	01800a84 	movi	r6,42
     5fc:	100f883a 	mov	r7,r2
     600:	00073780 	call	7378 <fwrite>
         break;
     604:	00003706 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
     608:	00800044 	movi	r2,1
     60c:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
     610:	00800174 	movhi	r2,5
     614:	10872d04 	addi	r2,r2,7348
     618:	10800017 	ldw	r2,0(r2)
     61c:	10800317 	ldw	r2,12(r2)
     620:	01000174 	movhi	r4,5
     624:	2128f004 	addi	r4,r4,-23616
     628:	01400044 	movi	r5,1
     62c:	01800c04 	movi	r6,48
     630:	100f883a 	mov	r7,r2
     634:	00073780 	call	7378 <fwrite>
         break;
     638:	00002a06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
     63c:	00800084 	movi	r2,2
     640:	e0bffd15 	stw	r2,-12(fp)
         printf(
     644:	01000174 	movhi	r4,5
     648:	2128fd04 	addi	r4,r4,-23564
     64c:	00080f80 	call	80f8 <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
     650:	00800174 	movhi	r2,5
     654:	10872d04 	addi	r2,r2,7348
     658:	10800017 	ldw	r2,0(r2)
     65c:	10800317 	ldw	r2,12(r2)
     660:	1009883a 	mov	r4,r2
     664:	01400174 	movhi	r5,5
     668:	29690d04 	addi	r5,r5,-23500
     66c:	e1bfff17 	ldw	r6,-4(fp)
     670:	00072880 	call	7288 <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
     674:	00001b06 	br	6e4 <alt_uCOSIIErrorHandler+0x458>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
     678:	01000174 	movhi	r4,5
     67c:	21291804 	addi	r4,r4,-23456
     680:	00083740 	call	8374 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
     684:	00800174 	movhi	r2,5
     688:	10872d04 	addi	r2,r2,7348
     68c:	10800017 	ldw	r2,0(r2)
     690:	10800317 	ldw	r2,12(r2)
     694:	01000174 	movhi	r4,5
     698:	21292604 	addi	r4,r4,-23400
     69c:	01400044 	movi	r5,1
     6a0:	01800404 	movi	r6,16
     6a4:	100f883a 	mov	r7,r2
     6a8:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
     6ac:	00800174 	movhi	r2,5
     6b0:	10872d04 	addi	r2,r2,7348
     6b4:	10800017 	ldw	r2,0(r2)
     6b8:	10c00317 	ldw	r3,12(r2)
     6bc:	e0bffe03 	ldbu	r2,-8(fp)
     6c0:	1809883a 	mov	r4,r3
     6c4:	01400174 	movhi	r5,5
     6c8:	29692b04 	addi	r5,r5,-23380
     6cc:	100d883a 	mov	r6,r2
     6d0:	00072880 	call	7288 <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
     6d4:	01000174 	movhi	r4,5
     6d8:	21293004 	addi	r4,r4,-23360
     6dc:	00080b80 	call	80b8 <perror>
         break;
     6e0:	0001883a 	nop

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
     6e4:	e0bffd17 	ldw	r2,-12(fp)
     6e8:	10c00060 	cmpeqi	r3,r2,1
     6ec:	1800041e 	bne	r3,zero,700 <alt_uCOSIIErrorHandler+0x474>
     6f0:	0080442e 	bgeu	zero,r2,804 <alt_uCOSIIErrorHandler+0x578>
     6f4:	108000a0 	cmpeqi	r2,r2,2
     6f8:	1000201e 	bne	r2,zero,77c <alt_uCOSIIErrorHandler+0x4f0>
     6fc:	00006106 	br	884 <alt_uCOSIIErrorHandler+0x5f8>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
     700:	01000174 	movhi	r4,5
     704:	21293e04 	addi	r4,r4,-23304
     708:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
     70c:	00800174 	movhi	r2,5
     710:	10872d04 	addi	r2,r2,7348
     714:	10800017 	ldw	r2,0(r2)
     718:	10800317 	ldw	r2,12(r2)
     71c:	01000174 	movhi	r4,5
     720:	21294b04 	addi	r4,r4,-23252
     724:	01400044 	movi	r5,1
     728:	01800904 	movi	r6,36
     72c:	100f883a 	mov	r7,r2
     730:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
     734:	00800174 	movhi	r2,5
     738:	10872d04 	addi	r2,r2,7348
     73c:	10800017 	ldw	r2,0(r2)
     740:	10800317 	ldw	r2,12(r2)
     744:	01000174 	movhi	r4,5
     748:	21295504 	addi	r4,r4,-23212
     74c:	01400044 	movi	r5,1
     750:	01800a04 	movi	r6,40
     754:	100f883a 	mov	r7,r2
     758:	00073780 	call	7378 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     75c:	0018cc80 	call	18cc8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     760:	01003fc4 	movi	r4,255
     764:	001e91c0 	call	1e91c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     768:	e0bffe03 	ldbu	r2,-8(fp)
     76c:	1009883a 	mov	r4,r2
     770:	000b883a 	mov	r5,zero
     774:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
         break;
     778:	00004f06 	br	8b8 <alt_uCOSIIErrorHandler+0x62c>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     77c:	01000174 	movhi	r4,5
     780:	21296004 	addi	r4,r4,-23168
     784:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
     788:	00800174 	movhi	r2,5
     78c:	10872d04 	addi	r2,r2,7348
     790:	10800017 	ldw	r2,0(r2)
     794:	10800317 	ldw	r2,12(r2)
     798:	01000174 	movhi	r4,5
     79c:	21296e04 	addi	r4,r4,-23112
     7a0:	01400044 	movi	r5,1
     7a4:	01800984 	movi	r6,38
     7a8:	100f883a 	mov	r7,r2
     7ac:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
     7b0:	00800174 	movhi	r2,5
     7b4:	10872d04 	addi	r2,r2,7348
     7b8:	10800017 	ldw	r2,0(r2)
     7bc:	10800317 	ldw	r2,12(r2)
     7c0:	01000174 	movhi	r4,5
     7c4:	21297804 	addi	r4,r4,-23072
     7c8:	01400044 	movi	r5,1
     7cc:	01800bc4 	movi	r6,47
     7d0:	100f883a 	mov	r7,r2
     7d4:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
     7d8:	00800174 	movhi	r2,5
     7dc:	10872d04 	addi	r2,r2,7348
     7e0:	10800017 	ldw	r2,0(r2)
     7e4:	10800317 	ldw	r2,12(r2)
     7e8:	01000174 	movhi	r4,5
     7ec:	21298404 	addi	r4,r4,-23024
     7f0:	01400044 	movi	r5,1
     7f4:	01800cc4 	movi	r6,51
     7f8:	100f883a 	mov	r7,r2
     7fc:	00073780 	call	7378 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
     800:	003fff06 	br	800 <__alt_mem_descriptor_memory+0xdefc0800>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
     804:	00800174 	movhi	r2,5
     808:	10872d04 	addi	r2,r2,7348
     80c:	10800017 	ldw	r2,0(r2)
     810:	10800317 	ldw	r2,12(r2)
     814:	01000174 	movhi	r4,5
     818:	21299104 	addi	r4,r4,-22972
     81c:	01400044 	movi	r5,1
     820:	01800904 	movi	r6,36
     824:	100f883a 	mov	r7,r2
     828:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
     82c:	00800174 	movhi	r2,5
     830:	10872d04 	addi	r2,r2,7348
     834:	10800017 	ldw	r2,0(r2)
     838:	10800317 	ldw	r2,12(r2)
     83c:	01000174 	movhi	r4,5
     840:	21299b04 	addi	r4,r4,-22932
     844:	01400044 	movi	r5,1
     848:	01800c84 	movi	r6,50
     84c:	100f883a 	mov	r7,r2
     850:	00073780 	call	7378 <fwrite>
         fprintf(stderr, 
     854:	00800174 	movhi	r2,5
     858:	10872d04 	addi	r2,r2,7348
     85c:	10800017 	ldw	r2,0(r2)
     860:	10800317 	ldw	r2,12(r2)
     864:	01000174 	movhi	r4,5
     868:	2129a804 	addi	r4,r4,-22880
     86c:	01400044 	movi	r5,1
     870:	01800f84 	movi	r6,62
     874:	100f883a 	mov	r7,r2
     878:	00073780 	call	7378 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
     87c:	0018cc80 	call	18cc8 <OSSchedUnlock>
         return;   
     880:	00000e06 	br	8bc <alt_uCOSIIErrorHandler+0x630>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
     884:	01000174 	movhi	r4,5
     888:	2129b804 	addi	r4,r4,-22816
     88c:	00083740 	call	8374 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
     890:	00800174 	movhi	r2,5
     894:	10872d04 	addi	r2,r2,7348
     898:	10800017 	ldw	r2,0(r2)
     89c:	10800317 	ldw	r2,12(r2)
     8a0:	01000174 	movhi	r4,5
     8a4:	2129c604 	addi	r4,r4,-22760
     8a8:	01400044 	movi	r5,1
     8ac:	01800ac4 	movi	r6,43
     8b0:	100f883a 	mov	r7,r2
     8b4:	00073780 	call	7378 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     8b8:	003fff06 	br	8b8 <__alt_mem_descriptor_memory+0xdefc08b8>
}
     8bc:	e037883a 	mov	sp,fp
     8c0:	dfc00117 	ldw	ra,4(sp)
     8c4:	df000017 	ldw	fp,0(sp)
     8c8:	dec00204 	addi	sp,sp,8
     8cc:	f800283a 	ret

000008d0 <alt_NetworkErrorHandler>:

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
     8d0:	defffb04 	addi	sp,sp,-20
     8d4:	dfc00415 	stw	ra,16(sp)
     8d8:	df000315 	stw	fp,12(sp)
     8dc:	df000304 	addi	fp,sp,12
     8e0:	2005883a 	mov	r2,r4
     8e4:	e17fff15 	stw	r5,-4(fp)
     8e8:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
     8ec:	e0bffe03 	ldbu	r2,-8(fp)
     8f0:	1000011e 	bne	r2,zero,8f8 <alt_NetworkErrorHandler+0x28>
   {
      return;
     8f4:	0000a006 	br	b78 <alt_NetworkErrorHandler+0x2a8>
   }

   fault_level = SYSTEM;   
     8f8:	00800084 	movi	r2,2
     8fc:	e0bffd15 	stw	r2,-12(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
     900:	0018c400 	call	18c40 <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
     904:	e0bffe03 	ldbu	r2,-8(fp)
     908:	10803fd8 	cmpnei	r2,r2,255
     90c:	1000121e 	bne	r2,zero,958 <alt_NetworkErrorHandler+0x88>
   {
      fault_level = SYSTEM;
     910:	00800084 	movi	r2,2
     914:	e0bffd15 	stw	r2,-12(fp)
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
     918:	01000174 	movhi	r4,5
     91c:	2129d104 	addi	r4,r4,-22716
     920:	00080f80 	call	80f8 <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
     924:	00800174 	movhi	r2,5
     928:	10872d04 	addi	r2,r2,7348
     92c:	10800017 	ldw	r2,0(r2)
     930:	10800317 	ldw	r2,12(r2)
     934:	1009883a 	mov	r4,r2
     938:	01400174 	movhi	r5,5
     93c:	2969e004 	addi	r5,r5,-22656
     940:	e1bfff17 	ldw	r6,-4(fp)
     944:	00072880 	call	7288 <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
     948:	01000174 	movhi	r4,5
     94c:	2129e404 	addi	r4,r4,-22640
     950:	00080b80 	call	80b8 <perror>
     954:	00001206 	br	9a0 <alt_NetworkErrorHandler+0xd0>
   }
   else 
   {
      fault_level = TASK;
     958:	00800044 	movi	r2,1
     95c:	e0bffd15 	stw	r2,-12(fp)
      printf("\n[Network]: See STDERR.\n");    
     960:	01000174 	movhi	r4,5
     964:	2129ea04 	addi	r4,r4,-22616
     968:	00083740 	call	8374 <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
     96c:	00800174 	movhi	r2,5
     970:	10872d04 	addi	r2,r2,7348
     974:	10800017 	ldw	r2,0(r2)
     978:	10c00317 	ldw	r3,12(r2)
     97c:	e0bffe03 	ldbu	r2,-8(fp)
     980:	1809883a 	mov	r4,r3
     984:	01400174 	movhi	r5,5
     988:	2969f004 	addi	r5,r5,-22592
     98c:	100d883a 	mov	r6,r2
     990:	00072880 	call	7288 <fprintf>
      perror("\n[Network]:  ERRNO: ");
     994:	01000174 	movhi	r4,5
     998:	2129e404 	addi	r4,r4,-22640
     99c:	00080b80 	call	80b8 <perror>
   }

   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
     9a0:	e0bffd17 	ldw	r2,-12(fp)
     9a4:	10c00060 	cmpeqi	r3,r2,1
     9a8:	1800041e 	bne	r3,zero,9bc <alt_NetworkErrorHandler+0xec>
     9ac:	0080442e 	bgeu	zero,r2,ac0 <alt_NetworkErrorHandler+0x1f0>
     9b0:	108000a0 	cmpeqi	r2,r2,2
     9b4:	1000201e 	bne	r2,zero,a38 <alt_NetworkErrorHandler+0x168>
     9b8:	00006106 	br	b40 <alt_NetworkErrorHandler+0x270>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
     9bc:	01000174 	movhi	r4,5
     9c0:	2129f704 	addi	r4,r4,-22564
     9c4:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
     9c8:	00800174 	movhi	r2,5
     9cc:	10872d04 	addi	r2,r2,7348
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	10800317 	ldw	r2,12(r2)
     9d8:	01000174 	movhi	r4,5
     9dc:	212a0304 	addi	r4,r4,-22516
     9e0:	01400044 	movi	r5,1
     9e4:	018007c4 	movi	r6,31
     9e8:	100f883a 	mov	r7,r2
     9ec:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
     9f0:	00800174 	movhi	r2,5
     9f4:	10872d04 	addi	r2,r2,7348
     9f8:	10800017 	ldw	r2,0(r2)
     9fc:	10800317 	ldw	r2,12(r2)
     a00:	01000174 	movhi	r4,5
     a04:	212a0b04 	addi	r4,r4,-22484
     a08:	01400044 	movi	r5,1
     a0c:	018008c4 	movi	r6,35
     a10:	100f883a 	mov	r7,r2
     a14:	00073780 	call	7378 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     a18:	0018cc80 	call	18cc8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     a1c:	01003fc4 	movi	r4,255
     a20:	001e91c0 	call	1e91c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     a24:	e0bffe03 	ldbu	r2,-8(fp)
     a28:	1009883a 	mov	r4,r2
     a2c:	000b883a 	mov	r5,zero
     a30:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
         break;
     a34:	00004f06 	br	b74 <alt_NetworkErrorHandler+0x2a4>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     a38:	01000174 	movhi	r4,5
     a3c:	212a1404 	addi	r4,r4,-22448
     a40:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
     a44:	00800174 	movhi	r2,5
     a48:	10872d04 	addi	r2,r2,7348
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	10800317 	ldw	r2,12(r2)
     a54:	01000174 	movhi	r4,5
     a58:	212a2004 	addi	r4,r4,-22400
     a5c:	01400044 	movi	r5,1
     a60:	01800884 	movi	r6,34
     a64:	100f883a 	mov	r7,r2
     a68:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
     a6c:	00800174 	movhi	r2,5
     a70:	10872d04 	addi	r2,r2,7348
     a74:	10800017 	ldw	r2,0(r2)
     a78:	10800317 	ldw	r2,12(r2)
     a7c:	01000174 	movhi	r4,5
     a80:	212a2904 	addi	r4,r4,-22364
     a84:	01400044 	movi	r5,1
     a88:	01800a84 	movi	r6,42
     a8c:	100f883a 	mov	r7,r2
     a90:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
     a94:	00800174 	movhi	r2,5
     a98:	10872d04 	addi	r2,r2,7348
     a9c:	10800017 	ldw	r2,0(r2)
     aa0:	10800317 	ldw	r2,12(r2)
     aa4:	01000174 	movhi	r4,5
     aa8:	212a3404 	addi	r4,r4,-22320
     aac:	01400044 	movi	r5,1
     ab0:	01800b84 	movi	r6,46
     ab4:	100f883a 	mov	r7,r2
     ab8:	00073780 	call	7378 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
     abc:	003fff06 	br	abc <__alt_mem_descriptor_memory+0xdefc0abc>
         break;
      case NONE:
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is NONE.");
     ac0:	00800174 	movhi	r2,5
     ac4:	10872d04 	addi	r2,r2,7348
     ac8:	10800017 	ldw	r2,0(r2)
     acc:	10800317 	ldw	r2,12(r2)
     ad0:	01000174 	movhi	r4,5
     ad4:	212a4004 	addi	r4,r4,-22272
     ad8:	01400044 	movi	r5,1
     adc:	01800804 	movi	r6,32
     ae0:	100f883a 	mov	r7,r2
     ae4:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[Network]: Informational "
     ae8:	00800174 	movhi	r2,5
     aec:	10872d04 	addi	r2,r2,7348
     af0:	10800017 	ldw	r2,0(r2)
     af4:	10800317 	ldw	r2,12(r2)
     af8:	01000174 	movhi	r4,5
     afc:	212a4904 	addi	r4,r4,-22236
     b00:	01400044 	movi	r5,1
     b04:	01800d84 	movi	r6,54
     b08:	100f883a 	mov	r7,r2
     b0c:	00073780 	call	7378 <fwrite>
                         "error only, control returned");
         fprintf(stderr, 
     b10:	00800174 	movhi	r2,5
     b14:	10872d04 	addi	r2,r2,7348
     b18:	10800017 	ldw	r2,0(r2)
     b1c:	10800317 	ldw	r2,12(r2)
     b20:	01000174 	movhi	r4,5
     b24:	212a5704 	addi	r4,r4,-22180
     b28:	01400044 	movi	r5,1
     b2c:	01800e44 	movi	r6,57
     b30:	100f883a 	mov	r7,r2
     b34:	00073780 	call	7378 <fwrite>
            "to task to complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
     b38:	0018cc80 	call	18cc8 <OSSchedUnlock>
         return;
     b3c:	00000e06 	br	b78 <alt_NetworkErrorHandler+0x2a8>
         break;         
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
     b40:	01000174 	movhi	r4,5
     b44:	212a6604 	addi	r4,r4,-22120
     b48:	00083740 	call	8374 <puts>
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
     b4c:	00800174 	movhi	r2,5
     b50:	10872d04 	addi	r2,r2,7348
     b54:	10800017 	ldw	r2,0(r2)
     b58:	10800317 	ldw	r2,12(r2)
     b5c:	01000174 	movhi	r4,5
     b60:	212a7304 	addi	r4,r4,-22068
     b64:	01400044 	movi	r5,1
     b68:	01800984 	movi	r6,38
     b6c:	100f883a 	mov	r7,r2
     b70:	00073780 	call	7378 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     b74:	003fff06 	br	b74 <__alt_mem_descriptor_memory+0xdefc0b74>
}
     b78:	e037883a 	mov	sp,fp
     b7c:	dfc00117 	ldw	ra,4(sp)
     b80:	df000017 	ldw	fp,0(sp)
     b84:	dec00204 	addi	sp,sp,8
     b88:	f800283a 	ret

00000b8c <alt_SSSErrorHandler>:
   
   
void alt_SSSErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
     b8c:	defffb04 	addi	sp,sp,-20
     b90:	dfc00415 	stw	ra,16(sp)
     b94:	df000315 	stw	fp,12(sp)
     b98:	df000304 	addi	fp,sp,12
     b9c:	2005883a 	mov	r2,r4
     ba0:	e17fff15 	stw	r5,-4(fp)
     ba4:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
     ba8:	e0bffe03 	ldbu	r2,-8(fp)
     bac:	1000011e 	bne	r2,zero,bb4 <alt_SSSErrorHandler+0x28>
   {
      return;
     bb0:	0000af06 	br	e70 <alt_SSSErrorHandler+0x2e4>
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
     bb4:	e0bffe03 	ldbu	r2,-8(fp)
     bb8:	1000021e 	bne	r2,zero,bc4 <alt_SSSErrorHandler+0x38>
     bbc:	0005883a 	mov	r2,zero
     bc0:	00000106 	br	bc8 <alt_SSSErrorHandler+0x3c>
     bc4:	00800084 	movi	r2,2
     bc8:	e0bffd15 	stw	r2,-12(fp)
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
     bcc:	0018c400 	call	18c40 <OSSchedLock>
   switch (error_code)
     bd0:	e0bffe03 	ldbu	r2,-8(fp)
     bd4:	10c007a0 	cmpeqi	r3,r2,30
     bd8:	1800111e 	bne	r3,zero,c20 <alt_SSSErrorHandler+0x94>
     bdc:	10803fe0 	cmpeqi	r2,r2,255
     be0:	10001b26 	beq	r2,zero,c50 <alt_SSSErrorHandler+0xc4>
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
     be4:	00800084 	movi	r2,2
     be8:	e0bffd15 	stw	r2,-12(fp)
         printf("\n[SSS]: See STDERR for expanded diagnosis translation.");    
     bec:	01000174 	movhi	r4,5
     bf0:	212a7d04 	addi	r4,r4,-22028
     bf4:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[SSS]: %s", (char *)expanded_diagnosis_ptr);
     bf8:	00800174 	movhi	r2,5
     bfc:	10872d04 	addi	r2,r2,7348
     c00:	10800017 	ldw	r2,0(r2)
     c04:	10800317 	ldw	r2,12(r2)
     c08:	1009883a 	mov	r4,r2
     c0c:	01400174 	movhi	r5,5
     c10:	296a8b04 	addi	r5,r5,-21972
     c14:	e1bfff17 	ldw	r6,-4(fp)
     c18:	00072880 	call	7288 <fprintf>
         break;
     c1c:	00001e06 	br	c98 <alt_SSSErrorHandler+0x10c>
         
      case OS_Q_FULL:
         fault_level = NONE;
     c20:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr,"\n[SSS]: Attempted to post to a full message queue.");
     c24:	00800174 	movhi	r2,5
     c28:	10872d04 	addi	r2,r2,7348
     c2c:	10800017 	ldw	r2,0(r2)
     c30:	10800317 	ldw	r2,12(r2)
     c34:	01000174 	movhi	r4,5
     c38:	212a8e04 	addi	r4,r4,-21960
     c3c:	01400044 	movi	r5,1
     c40:	01800c84 	movi	r6,50
     c44:	100f883a 	mov	r7,r2
     c48:	00073780 	call	7378 <fwrite>
         break;
     c4c:	00001206 	br	c98 <alt_SSSErrorHandler+0x10c>
      
      default:
         fault_level = SYSTEM;
     c50:	00800084 	movi	r2,2
     c54:	e0bffd15 	stw	r2,-12(fp)
         printf("\n[SSS]: See STDERR.\n");    
     c58:	01000174 	movhi	r4,5
     c5c:	212a9b04 	addi	r4,r4,-21908
     c60:	00083740 	call	8374 <puts>
         fprintf(stderr, "\n[SSS]: Error_code %d!", error_code);        
     c64:	00800174 	movhi	r2,5
     c68:	10872d04 	addi	r2,r2,7348
     c6c:	10800017 	ldw	r2,0(r2)
     c70:	10c00317 	ldw	r3,12(r2)
     c74:	e0bffe03 	ldbu	r2,-8(fp)
     c78:	1809883a 	mov	r4,r3
     c7c:	01400174 	movhi	r5,5
     c80:	296aa004 	addi	r5,r5,-21888
     c84:	100d883a 	mov	r6,r2
     c88:	00072880 	call	7288 <fprintf>
         perror("\n[SSS]:  ERRNO: ");
     c8c:	01000174 	movhi	r4,5
     c90:	212aa604 	addi	r4,r4,-21864
     c94:	00080b80 	call	80b8 <perror>
   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */     
   switch (fault_level) 
     c98:	e0bffd17 	ldw	r2,-12(fp)
     c9c:	10c00060 	cmpeqi	r3,r2,1
     ca0:	1800041e 	bne	r3,zero,cb4 <alt_SSSErrorHandler+0x128>
     ca4:	0080442e 	bgeu	zero,r2,db8 <alt_SSSErrorHandler+0x22c>
     ca8:	108000a0 	cmpeqi	r2,r2,2
     cac:	1000201e 	bne	r2,zero,d30 <alt_SSSErrorHandler+0x1a4>
     cb0:	00006106 	br	e38 <alt_SSSErrorHandler+0x2ac>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is TASK).");
     cb4:	01000174 	movhi	r4,5
     cb8:	212aab04 	addi	r4,r4,-21844
     cbc:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is TASK");
     cc0:	00800174 	movhi	r2,5
     cc4:	10872d04 	addi	r2,r2,7348
     cc8:	10800017 	ldw	r2,0(r2)
     ccc:	10800317 	ldw	r2,12(r2)
     cd0:	01000174 	movhi	r4,5
     cd4:	212ab604 	addi	r4,r4,-21800
     cd8:	01400044 	movi	r5,1
     cdc:	018006c4 	movi	r6,27
     ce0:	100f883a 	mov	r7,r2
     ce4:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[SSS]: Task is being deleted.\n");
     ce8:	00800174 	movhi	r2,5
     cec:	10872d04 	addi	r2,r2,7348
     cf0:	10800017 	ldw	r2,0(r2)
     cf4:	10800317 	ldw	r2,12(r2)
     cf8:	01000174 	movhi	r4,5
     cfc:	212abd04 	addi	r4,r4,-21772
     d00:	01400044 	movi	r5,1
     d04:	018007c4 	movi	r6,31
     d08:	100f883a 	mov	r7,r2
     d0c:	00073780 	call	7378 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     d10:	0018cc80 	call	18cc8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     d14:	01003fc4 	movi	r4,255
     d18:	001e91c0 	call	1e91c <OSTaskDel>
         /* Invoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     d1c:	e0bffe03 	ldbu	r2,-8(fp)
     d20:	1009883a 	mov	r4,r2
     d24:	000b883a 	mov	r5,zero
     d28:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
         break;
     d2c:	00004f06 	br	e6c <alt_SSSErrorHandler+0x2e0>
      case SYSTEM:
          /* Total System Failure, Restart Required */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     d30:	01000174 	movhi	r4,5
     d34:	212ac504 	addi	r4,r4,-21740
     d38:	00080f80 	call	80f8 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is SYSTEM.");
     d3c:	00800174 	movhi	r2,5
     d40:	10872d04 	addi	r2,r2,7348
     d44:	10800017 	ldw	r2,0(r2)
     d48:	10800317 	ldw	r2,12(r2)
     d4c:	01000174 	movhi	r4,5
     d50:	212ad004 	addi	r4,r4,-21696
     d54:	01400044 	movi	r5,1
     d58:	01800784 	movi	r6,30
     d5c:	100f883a 	mov	r7,r2
     d60:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[SSS]: FATAL Error, Restart required.");
     d64:	00800174 	movhi	r2,5
     d68:	10872d04 	addi	r2,r2,7348
     d6c:	10800017 	ldw	r2,0(r2)
     d70:	10800317 	ldw	r2,12(r2)
     d74:	01000174 	movhi	r4,5
     d78:	212ad804 	addi	r4,r4,-21664
     d7c:	01400044 	movi	r5,1
     d80:	01800984 	movi	r6,38
     d84:	100f883a 	mov	r7,r2
     d88:	00073780 	call	7378 <fwrite>
         fprintf(stderr, "\n[SSS]: Locking scheduler - endless loop.\n");
     d8c:	00800174 	movhi	r2,5
     d90:	10872d04 	addi	r2,r2,7348
     d94:	10800017 	ldw	r2,0(r2)
     d98:	10800317 	ldw	r2,12(r2)
     d9c:	01000174 	movhi	r4,5
     da0:	212ae204 	addi	r4,r4,-21624
     da4:	01400044 	movi	r5,1
     da8:	01800a84 	movi	r6,42
     dac:	100f883a 	mov	r7,r2
     db0:	00073780 	call	7378 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
     db4:	003fff06 	br	db4 <__alt_mem_descriptor_memory+0xdefc0db4>
         break;
      case NONE:
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is NONE.");
     db8:	00800174 	movhi	r2,5
     dbc:	10872d04 	addi	r2,r2,7348
     dc0:	10800017 	ldw	r2,0(r2)
     dc4:	10800317 	ldw	r2,12(r2)
     dc8:	01000174 	movhi	r4,5
     dcc:	212aed04 	addi	r4,r4,-21580
     dd0:	01400044 	movi	r5,1
     dd4:	018006c4 	movi	r6,27
     dd8:	100f883a 	mov	r7,r2
     ddc:	00073780 	call	7378 <fwrite>
         fprintf(stderr, 
     de0:	00800174 	movhi	r2,5
     de4:	10872d04 	addi	r2,r2,7348
     de8:	10800017 	ldw	r2,0(r2)
     dec:	10800317 	ldw	r2,12(r2)
     df0:	01000174 	movhi	r4,5
     df4:	212af404 	addi	r4,r4,-21552
     df8:	01400044 	movi	r5,1
     dfc:	01800f44 	movi	r6,61
     e00:	100f883a 	mov	r7,r2
     e04:	00073780 	call	7378 <fwrite>
            "\n[SSS] Informational error only, control returned to task to ");
         fprintf(stderr,
     e08:	00800174 	movhi	r2,5
     e0c:	10872d04 	addi	r2,r2,7348
     e10:	10800017 	ldw	r2,0(r2)
     e14:	10800317 	ldw	r2,12(r2)
     e18:	01000174 	movhi	r4,5
     e1c:	212b0404 	addi	r4,r4,-21488
     e20:	01400044 	movi	r5,1
     e24:	01800b84 	movi	r6,46
     e28:	100f883a 	mov	r7,r2
     e2c:	00073780 	call	7378 <fwrite>
            "complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
     e30:	0018cc80 	call	18cc8 <OSSchedUnlock>
         return;         
     e34:	00000e06 	br	e70 <alt_SSSErrorHandler+0x2e4>
         break;
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
     e38:	01000174 	movhi	r4,5
     e3c:	212b1004 	addi	r4,r4,-21440
     e40:	00083740 	call	8374 <puts>
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
     e44:	00800174 	movhi	r2,5
     e48:	10872d04 	addi	r2,r2,7348
     e4c:	10800017 	ldw	r2,0(r2)
     e50:	10800317 	ldw	r2,12(r2)
     e54:	01000174 	movhi	r4,5
     e58:	212b1c04 	addi	r4,r4,-21392
     e5c:	01400044 	movi	r5,1
     e60:	01800844 	movi	r6,33
     e64:	100f883a 	mov	r7,r2
     e68:	00073780 	call	7378 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     e6c:	003fff06 	br	e6c <__alt_mem_descriptor_memory+0xdefc0e6c>
}
     e70:	e037883a 	mov	sp,fp
     e74:	dfc00117 	ldw	ra,4(sp)
     e78:	df000017 	ldw	fp,0(sp)
     e7c:	dec00204 	addi	sp,sp,8
     e80:	f800283a 	ret

00000e84 <SSSInitialTask>:
/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
     e84:	defffc04 	addi	sp,sp,-16
     e88:	dfc00315 	stw	ra,12(sp)
     e8c:	df000215 	stw	fp,8(sp)
     e90:	df000204 	addi	fp,sp,8
     e94:	e13fff15 	stw	r4,-4(fp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
     e98:	002b8280 	call	2b828 <alt_iniche_init>
  netmain(); 
     e9c:	0026de00 	call	26de0 <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
     ea0:	00000206 	br	eac <SSSInitialTask+0x28>
    TK_SLEEP(1);
     ea4:	01000084 	movi	r4,2
     ea8:	001f9280 	call	1f928 <OSTimeDly>
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
     eac:	00800174 	movhi	r2,5
     eb0:	108fa204 	addi	r2,r2,16008
     eb4:	10800017 	ldw	r2,0(r2)
     eb8:	103ffa26 	beq	r2,zero,ea4 <__alt_mem_descriptor_memory+0xdefc0ea4>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");
     ebc:	01000174 	movhi	r4,5
     ec0:	212b2b04 	addi	r4,r4,-21332
     ec4:	00083740 	call	8374 <puts>

  /* Create the main simple socket server task. */
  TK_NEWTASK(&ssstask);
     ec8:	01000174 	movhi	r4,5
     ecc:	213f8e04 	addi	r4,r4,-456
     ed0:	002b4d00 	call	2b4d0 <TK_NEWTASK>
  
  /*create os data structures */
  SSSCreateOSDataStructs(); 
     ed4:	00068700 	call	6870 <SSSCreateOSDataStructs>

  /* create the other tasks */
  SSSCreateTasks();
     ed8:	00069100 	call	6910 <SSSCreateTasks>

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
     edc:	01003fc4 	movi	r4,255
     ee0:	001e91c0 	call	1e91c <OSTaskDel>
     ee4:	e0bffe05 	stb	r2,-8(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
     ee8:	e0bffe03 	ldbu	r2,-8(fp)
     eec:	1009883a 	mov	r4,r2
     ef0:	000b883a 	mov	r5,zero
     ef4:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
  
  while (1); /* Correct Program Flow should never get here */
     ef8:	003fff06 	br	ef8 <__alt_mem_descriptor_memory+0xdefc0ef8>

00000efc <main>:

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
     efc:	defff504 	addi	sp,sp,-44
     f00:	dfc00a15 	stw	ra,40(sp)
     f04:	df000915 	stw	fp,36(sp)
     f08:	df000904 	addi	fp,sp,36
     f0c:	e13ffd15 	stw	r4,-12(fp)
     f10:	e17ffe15 	stw	r5,-8(fp)
     f14:	e1bfff15 	stw	r6,-4(fp)
  
  INT8U error_code;

  /* Clear the RTOS timer */
  OSTimeSet(0);
     f18:	0009883a 	mov	r4,zero
     f1c:	001fe240 	call	1fe24 <OSTimeSet>

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(SSSInitialTask,
     f20:	00800144 	movi	r2,5
     f24:	d8800015 	stw	r2,0(sp)
     f28:	00800174 	movhi	r2,5
     f2c:	10919704 	addi	r2,r2,18012
     f30:	d8800115 	stw	r2,4(sp)
     f34:	00820004 	movi	r2,2048
     f38:	d8800215 	stw	r2,8(sp)
     f3c:	d8000315 	stw	zero,12(sp)
     f40:	d8000415 	stw	zero,16(sp)
     f44:	01000034 	movhi	r4,0
     f48:	2103a104 	addi	r4,r4,3716
     f4c:	000b883a 	mov	r5,zero
     f50:	01800174 	movhi	r6,5
     f54:	31999704 	addi	r6,r6,26204
     f58:	01c00144 	movi	r7,5
     f5c:	001e7300 	call	1e730 <OSTaskCreateExt>
     f60:	e0bffc05 	stb	r2,-16(fp)
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
     f64:	e0bffc03 	ldbu	r2,-16(fp)
     f68:	1009883a 	mov	r4,r2
     f6c:	000b883a 	mov	r5,zero
     f70:	000028c0 	call	28c <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
     f74:	0018da00 	call	18da0 <OSStart>

  
  while(1); /* Correct Program Flow never gets here. */
     f78:	003fff06 	br	f78 <__alt_mem_descriptor_memory+0xdefc0f78>

00000f7c <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
     f7c:	defffb04 	addi	sp,sp,-20
     f80:	df000115 	stw	fp,4(sp)
     f84:	df000104 	addi	fp,sp,4
     f88:	e1400115 	stw	r5,4(fp)
     f8c:	e1800215 	stw	r6,8(fp)
     f90:	e1c00315 	stw	r7,12(fp)
     f94:	e13fff15 	stw	r4,-4(fp)
     f98:	e037883a 	mov	sp,fp
     f9c:	df000017 	ldw	fp,0(sp)
     fa0:	dec00404 	addi	sp,sp,16
     fa4:	f800283a 	ret

00000fa8 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
     fa8:	defffb04 	addi	sp,sp,-20
     fac:	df000415 	stw	fp,16(sp)
     fb0:	df000404 	addi	fp,sp,16
     fb4:	e13ffc15 	stw	r4,-16(fp)
     fb8:	e17ffd15 	stw	r5,-12(fp)
     fbc:	e1bffe15 	stw	r6,-8(fp)
     fc0:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
     fc4:	e0fffd17 	ldw	r3,-12(fp)
     fc8:	e0bffc17 	ldw	r2,-16(fp)
     fcc:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
     fd0:	e0fffe17 	ldw	r3,-8(fp)
     fd4:	e0bffc17 	ldw	r2,-16(fp)
     fd8:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
     fdc:	e0ffff17 	ldw	r3,-4(fp)
     fe0:	e0bffc17 	ldw	r2,-16(fp)
     fe4:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
     fe8:	e0c00117 	ldw	r3,4(fp)
     fec:	e0bffc17 	ldw	r2,-16(fp)
     ff0:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
     ff4:	0005883a 	mov	r2,zero
}
     ff8:	e037883a 	mov	sp,fp
     ffc:	df000017 	ldw	fp,0(sp)
    1000:	dec00104 	addi	sp,sp,4
    1004:	f800283a 	ret

00001008 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
    1008:	defffa04 	addi	sp,sp,-24
    100c:	dfc00515 	stw	ra,20(sp)
    1010:	df000415 	stw	fp,16(sp)
    1014:	df000404 	addi	fp,sp,16
    1018:	e13ffe15 	stw	r4,-8(fp)
    101c:	e17fff15 	stw	r5,-4(fp)

  alt_32 timeout;
  alt_u8 result = 0;
    1020:	e03ffd05 	stb	zero,-12(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
    1024:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
    1028:	00000b06 	br	1058 <tse_mac_sTxWrite+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
    102c:	e0fffc17 	ldw	r3,-16(fp)
    1030:	18800044 	addi	r2,r3,1
    1034:	e0bffc15 	stw	r2,-16(fp)
    1038:	008003f4 	movhi	r2,15
    103c:	10909004 	addi	r2,r2,16960
    1040:	1880051e 	bne	r3,r2,1058 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
    1044:	01000174 	movhi	r4,5
    1048:	212b3404 	addi	r4,r4,-21296
    104c:	00083740 	call	8374 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
    1050:	00bffa84 	movi	r2,-22
    1054:	00002006 	br	10d8 <tse_mac_sTxWrite+0xd0>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	10800117 	ldw	r2,4(r2)
    1060:	10800317 	ldw	r2,12(r2)
    1064:	10800037 	ldwio	r2,0(r2)
    1068:	1080040c 	andi	r2,r2,16
    106c:	103fef1e 	bne	r2,zero,102c <__alt_mem_descriptor_memory+0xdefc102c>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
    1070:	e0bffe17 	ldw	r2,-8(fp)
    1074:	10800117 	ldw	r2,4(r2)
    1078:	10800317 	ldw	r2,12(r2)
    107c:	10800404 	addi	r2,r2,16
    1080:	0007883a 	mov	r3,zero
    1084:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
    1088:	e0bffe17 	ldw	r2,-8(fp)
    108c:	10800117 	ldw	r2,4(r2)
    1090:	10800317 	ldw	r2,12(r2)
    1094:	00c03fc4 	movi	r3,255
    1098:	10c00035 	stwio	r3,0(r2)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
    109c:	e0bffe17 	ldw	r2,-8(fp)
    10a0:	10800117 	ldw	r2,4(r2)
    10a4:	1009883a 	mov	r4,r2
    10a8:	e17fff17 	ldw	r5,-4(fp)
    10ac:	0020ff00 	call	20ff0 <alt_avalon_sgdma_do_sync_transfer>
    10b0:	e0bffd05 	stb	r2,-12(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  if (result != 0)
    10b4:	e0bffd03 	ldbu	r2,-12(fp)
    10b8:	10000226 	beq	r2,zero,10c4 <tse_mac_sTxWrite+0xbc>
    return -1;
    10bc:	00bfffc4 	movi	r2,-1
    10c0:	00000506 	br	10d8 <tse_mac_sTxWrite+0xd0>
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
    10c4:	e0bfff17 	ldw	r2,-4(fp)
    10c8:	10800704 	addi	r2,r2,28
    10cc:	10800037 	ldwio	r2,0(r2)
    10d0:	e0bffd8d 	sth	r2,-10(fp)

  return actualBytesTransferred;
    10d4:	e0bffd8b 	ldhu	r2,-10(fp)
}
    10d8:	e037883a 	mov	sp,fp
    10dc:	dfc00117 	ldw	ra,4(sp)
    10e0:	df000017 	ldw	fp,0(sp)
    10e4:	dec00204 	addi	sp,sp,8
    10e8:	f800283a 	ret

000010ec <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
    10ec:	defffa04 	addi	sp,sp,-24
    10f0:	dfc00515 	stw	ra,20(sp)
    10f4:	df000415 	stw	fp,16(sp)
    10f8:	df000404 	addi	fp,sp,16
    10fc:	e13ffe15 	stw	r4,-8(fp)
    1100:	e17fff15 	stw	r5,-4(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
    1104:	e03ffd05 	stb	zero,-12(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
    1108:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
    110c:	00000b06 	br	113c <tse_mac_aRxRead+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
    1110:	e0fffc17 	ldw	r3,-16(fp)
    1114:	18800044 	addi	r2,r3,1
    1118:	e0bffc15 	stw	r2,-16(fp)
    111c:	008003f4 	movhi	r2,15
    1120:	10909004 	addi	r2,r2,16960
    1124:	1880051e 	bne	r3,r2,113c <tse_mac_aRxRead+0x50>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
    1128:	01000174 	movhi	r4,5
    112c:	212b3b04 	addi	r4,r4,-21268
    1130:	00083740 	call	8374 <puts>
        return ENP_RESOURCE;  // avoid being stuck here
    1134:	00bffa84 	movi	r2,-22
    1138:	00001106 	br	1180 <tse_mac_aRxRead+0x94>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
    113c:	e0bffe17 	ldw	r2,-8(fp)
    1140:	10800217 	ldw	r2,8(r2)
    1144:	10800317 	ldw	r2,12(r2)
    1148:	10800037 	ldwio	r2,0(r2)
    114c:	1080040c 	andi	r2,r2,16
    1150:	103fef1e 	bne	r2,zero,1110 <__alt_mem_descriptor_memory+0xdefc1110>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	10800217 	ldw	r2,8(r2)
    115c:	1009883a 	mov	r4,r2
    1160:	e17fff17 	ldw	r5,-4(fp)
    1164:	0020ecc0 	call	20ecc <alt_avalon_sgdma_do_async_transfer>
    1168:	e0bffd05 	stb	r2,-12(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);
  
  if (result != 0)
    116c:	e0bffd03 	ldbu	r2,-12(fp)
    1170:	10000226 	beq	r2,zero,117c <tse_mac_aRxRead+0x90>
    return -1;
    1174:	00bfffc4 	movi	r2,-1
    1178:	00000106 	br	1180 <tse_mac_aRxRead+0x94>
 
  return SUCCESS;
    117c:	0005883a 	mov	r2,zero
}
    1180:	e037883a 	mov	sp,fp
    1184:	dfc00117 	ldw	ra,4(sp)
    1188:	df000017 	ldw	fp,0(sp)
    118c:	dec00204 	addi	sp,sp,8
    1190:	f800283a 	ret

00001194 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
    1194:	defffc04 	addi	sp,sp,-16
    1198:	df000315 	stw	fp,12(sp)
    119c:	df000304 	addi	fp,sp,12
    11a0:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
    11a4:	e0bfff17 	ldw	r2,-4(fp)
    11a8:	10800204 	addi	r2,r2,8
    11ac:	10800037 	ldwio	r2,0(r2)
    11b0:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
    11b4:	e0bfff17 	ldw	r2,-4(fp)
    11b8:	10800204 	addi	r2,r2,8
    11bc:	00c80204 	movi	r3,8200
    11c0:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
    11c4:	e03ffd15 	stw	zero,-12(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
    11c8:	00000306 	br	11d8 <tse_mac_SwReset+0x44>
    11cc:	e0bffd17 	ldw	r2,-12(fp)
    11d0:	10800044 	addi	r2,r2,1
    11d4:	e0bffd15 	stw	r2,-12(fp)
    11d8:	e0bfff17 	ldw	r2,-4(fp)
    11dc:	10800204 	addi	r2,r2,8
    11e0:	10800037 	ldwio	r2,0(r2)
    11e4:	1088000c 	andi	r2,r2,8192
    11e8:	10000326 	beq	r2,zero,11f8 <tse_mac_SwReset+0x64>
    11ec:	e0bffd17 	ldw	r2,-12(fp)
    11f0:	1089c410 	cmplti	r2,r2,10000
    11f4:	103ff51e 	bne	r2,zero,11cc <__alt_mem_descriptor_memory+0xdefc11cc>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
    11f8:	e0bfff17 	ldw	r2,-4(fp)
    11fc:	10800204 	addi	r2,r2,8
    1200:	e0fffe17 	ldw	r3,-8(fp)
    1204:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
    1208:	0005883a 	mov	r2,zero
}
    120c:	e037883a 	mov	sp,fp
    1210:	df000017 	ldw	fp,0(sp)
    1214:	dec00104 	addi	sp,sp,4
    1218:	f800283a 	ret

0000121c <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
    121c:	defffd04 	addi	sp,sp,-12
    1220:	df000215 	stw	fp,8(sp)
    1224:	df000204 	addi	fp,sp,8
    1228:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
    122c:	e0bfff17 	ldw	r2,-4(fp)
    1230:	10800204 	addi	r2,r2,8
    1234:	10800037 	ldwio	r2,0(r2)
    1238:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
    123c:	e0fffe17 	ldw	r3,-8(fp)
    1240:	00bffdc4 	movi	r2,-9
    1244:	1884703a 	and	r2,r3,r2
    1248:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
    124c:	e0bfff17 	ldw	r2,-4(fp)
    1250:	10800204 	addi	r2,r2,8
    1254:	e0fffe17 	ldw	r3,-8(fp)
    1258:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
    125c:	0005883a 	mov	r2,zero
}
    1260:	e037883a 	mov	sp,fp
    1264:	df000017 	ldw	fp,0(sp)
    1268:	dec00104 	addi	sp,sp,4
    126c:	f800283a 	ret

00001270 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
    1270:	defffd04 	addi	sp,sp,-12
    1274:	df000215 	stw	fp,8(sp)
    1278:	df000204 	addi	fp,sp,8
    127c:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
    1280:	e0bfff17 	ldw	r2,-4(fp)
    1284:	10800204 	addi	r2,r2,8
    1288:	10800037 	ldwio	r2,0(r2)
    128c:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    1290:	e0bffe17 	ldw	r2,-8(fp)
    1294:	10800214 	ori	r2,r2,8
    1298:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
    129c:	e0bfff17 	ldw	r2,-4(fp)
    12a0:	10800204 	addi	r2,r2,8
    12a4:	e0fffe17 	ldw	r3,-8(fp)
    12a8:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
    12ac:	0005883a 	mov	r2,zero
}
    12b0:	e037883a 	mov	sp,fp
    12b4:	df000017 	ldw	fp,0(sp)
    12b8:	dec00104 	addi	sp,sp,4
    12bc:	f800283a 	ret

000012c0 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
    12c0:	defffb04 	addi	sp,sp,-20
    12c4:	dfc00415 	stw	ra,16(sp)
    12c8:	df000315 	stw	fp,12(sp)
    12cc:	dc000215 	stw	r16,8(sp)
    12d0:	df000304 	addi	fp,sp,12
    12d4:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
    12d8:	e03ffd15 	stw	zero,-12(fp)
    12dc:	00002906 	br	1384 <alt_tse_phy_add_profile+0xc4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
    12e0:	00800174 	movhi	r2,5
    12e4:	10999b04 	addi	r2,r2,26220
    12e8:	e0fffd17 	ldw	r3,-12(fp)
    12ec:	18c7883a 	add	r3,r3,r3
    12f0:	18c7883a 	add	r3,r3,r3
    12f4:	10c5883a 	add	r2,r2,r3
    12f8:	10800017 	ldw	r2,0(r2)
    12fc:	10c01417 	ldw	r3,80(r2)
    1300:	e0bffe17 	ldw	r2,-8(fp)
    1304:	10801417 	ldw	r2,80(r2)
    1308:	18801b1e 	bne	r3,r2,1378 <alt_tse_phy_add_profile+0xb8>
    130c:	00800174 	movhi	r2,5
    1310:	10999b04 	addi	r2,r2,26220
    1314:	e0fffd17 	ldw	r3,-12(fp)
    1318:	18c7883a 	add	r3,r3,r3
    131c:	18c7883a 	add	r3,r3,r3
    1320:	10c5883a 	add	r2,r2,r3
    1324:	10800017 	ldw	r2,0(r2)
    1328:	10c01503 	ldbu	r3,84(r2)
    132c:	e0bffe17 	ldw	r2,-8(fp)
    1330:	10801503 	ldbu	r2,84(r2)
    1334:	18c03fcc 	andi	r3,r3,255
    1338:	10803fcc 	andi	r2,r2,255
    133c:	18800e1e 	bne	r3,r2,1378 <alt_tse_phy_add_profile+0xb8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
    1340:	e0bffe17 	ldw	r2,-8(fp)
    1344:	10801417 	ldw	r2,80(r2)
    1348:	1007883a 	mov	r3,r2
    134c:	e0bffe17 	ldw	r2,-8(fp)
    1350:	10801503 	ldbu	r2,84(r2)
    1354:	10803fcc 	andi	r2,r2,255
    1358:	01000174 	movhi	r4,5
    135c:	212b4204 	addi	r4,r4,-21240
    1360:	180b883a 	mov	r5,r3
    1364:	100d883a 	mov	r6,r2
    1368:	00080f80 	call	80f8 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
    136c:	01000174 	movhi	r4,5
    1370:	212b5604 	addi	r4,r4,-21160
    1374:	00083740 	call	8374 <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
    1378:	e0bffd17 	ldw	r2,-12(fp)
    137c:	10800044 	addi	r2,r2,1
    1380:	e0bffd15 	stw	r2,-12(fp)
    1384:	d0a84243 	ldbu	r2,-24311(gp)
    1388:	10803fcc 	andi	r2,r2,255
    138c:	e0fffd17 	ldw	r3,-12(fp)
    1390:	18bfd316 	blt	r3,r2,12e0 <__alt_mem_descriptor_memory+0xdefc12e0>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
    1394:	d0a84243 	ldbu	r2,-24311(gp)
    1398:	14003fcc 	andi	r16,r2,255
    139c:	01001904 	movi	r4,100
    13a0:	00074c00 	call	74c0 <malloc>
    13a4:	1009883a 	mov	r4,r2
    13a8:	00800174 	movhi	r2,5
    13ac:	10999b04 	addi	r2,r2,26220
    13b0:	8407883a 	add	r3,r16,r16
    13b4:	18c7883a 	add	r3,r3,r3
    13b8:	10c5883a 	add	r2,r2,r3
    13bc:	11000015 	stw	r4,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
    13c0:	d0a84243 	ldbu	r2,-24311(gp)
    13c4:	10c03fcc 	andi	r3,r2,255
    13c8:	00800174 	movhi	r2,5
    13cc:	10999b04 	addi	r2,r2,26220
    13d0:	18c7883a 	add	r3,r3,r3
    13d4:	18c7883a 	add	r3,r3,r3
    13d8:	10c5883a 	add	r2,r2,r3
    13dc:	10800017 	ldw	r2,0(r2)
    13e0:	1000081e 	bne	r2,zero,1404 <alt_tse_phy_add_profile+0x144>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
    13e4:	d0a84243 	ldbu	r2,-24311(gp)
    13e8:	10803fcc 	andi	r2,r2,255
    13ec:	01000174 	movhi	r4,5
    13f0:	212b6e04 	addi	r4,r4,-21064
    13f4:	100b883a 	mov	r5,r2
    13f8:	00080f80 	call	80f8 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
    13fc:	00bfffc4 	movi	r2,-1
    1400:	00002206 	br	148c <alt_tse_phy_add_profile+0x1cc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
    1404:	d0a84243 	ldbu	r2,-24311(gp)
    1408:	10c03fcc 	andi	r3,r2,255
    140c:	00800174 	movhi	r2,5
    1410:	10999b04 	addi	r2,r2,26220
    1414:	18c7883a 	add	r3,r3,r3
    1418:	18c7883a 	add	r3,r3,r3
    141c:	10c5883a 	add	r2,r2,r3
    1420:	10c00017 	ldw	r3,0(r2)
    1424:	e0bffe17 	ldw	r2,-8(fp)
    1428:	1809883a 	mov	r4,r3
    142c:	1007883a 	mov	r3,r2
    1430:	00801904 	movi	r2,100
    1434:	180b883a 	mov	r5,r3
    1438:	100d883a 	mov	r6,r2
    143c:	0007c900 	call	7c90 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
    1440:	d0a84243 	ldbu	r2,-24311(gp)
    1444:	10c03fcc 	andi	r3,r2,255
    1448:	00800174 	movhi	r2,5
    144c:	10999b04 	addi	r2,r2,26220
    1450:	18c7883a 	add	r3,r3,r3
    1454:	18c7883a 	add	r3,r3,r3
    1458:	10c5883a 	add	r2,r2,r3
    145c:	10800017 	ldw	r2,0(r2)
    1460:	1007883a 	mov	r3,r2
    1464:	e0bffe17 	ldw	r2,-8(fp)
    1468:	1809883a 	mov	r4,r3
    146c:	100b883a 	mov	r5,r2
    1470:	000868c0 	call	868c <strcpy>
    
    phy_profile_count++;
    1474:	d0a84243 	ldbu	r2,-24311(gp)
    1478:	10800044 	addi	r2,r2,1
    147c:	d0a84245 	stb	r2,-24311(gp)
    
    return phy_profile_count - 1;
    1480:	d0a84243 	ldbu	r2,-24311(gp)
    1484:	10803fcc 	andi	r2,r2,255
    1488:	10bfffc4 	addi	r2,r2,-1
}
    148c:	e6ffff04 	addi	sp,fp,-4
    1490:	dfc00217 	ldw	ra,8(sp)
    1494:	df000117 	ldw	fp,4(sp)
    1498:	dc000017 	ldw	r16,0(sp)
    149c:	dec00304 	addi	sp,sp,12
    14a0:	f800283a 	ret

000014a4 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
    14a4:	defff204 	addi	sp,sp,-56
    14a8:	dfc00d15 	stw	ra,52(sp)
    14ac:	df000c15 	stw	fp,48(sp)
    14b0:	dc000b15 	stw	r16,44(sp)
    14b4:	df000c04 	addi	fp,sp,48
    14b8:	e13ffb15 	stw	r4,-20(fp)
    14bc:	e17ffc15 	stw	r5,-16(fp)
    14c0:	e1bffd15 	stw	r6,-12(fp)
    14c4:	e1fffe15 	stw	r7,-8(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
    14c8:	e0bffb17 	ldw	r2,-20(fp)
    14cc:	e0bffa15 	stw	r2,-24(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
    14d0:	e0bffc17 	ldw	r2,-16(fp)
    14d4:	e0bff615 	stw	r2,-40(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
    14e0:	e0bffe17 	ldw	r2,-8(fp)
    14e4:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
    14e8:	e0800217 	ldw	r2,8(fp)
    14ec:	e0bff915 	stw	r2,-28(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
    14f0:	e0bffa17 	ldw	r2,-24(fp)
    14f4:	10800303 	ldbu	r2,12(r2)
    14f8:	10803fcc 	andi	r2,r2,255
    14fc:	1000031e 	bne	r2,zero,150c <alt_tse_system_add_sys+0x68>
		loop_end = 1;
    1500:	00800044 	movi	r2,1
    1504:	e0bff515 	stw	r2,-44(fp)
    1508:	00000e06 	br	1544 <alt_tse_system_add_sys+0xa0>
	}
	else if(pmac->tse_num_of_channel > 0) {
    150c:	e0bffa17 	ldw	r2,-24(fp)
    1510:	10800303 	ldbu	r2,12(r2)
    1514:	10803fcc 	andi	r2,r2,255
    1518:	10000526 	beq	r2,zero,1530 <alt_tse_system_add_sys+0x8c>
		loop_end = pmac->tse_num_of_channel; 
    151c:	e0bffa17 	ldw	r2,-24(fp)
    1520:	10800303 	ldbu	r2,12(r2)
    1524:	10803fcc 	andi	r2,r2,255
    1528:	e0bff515 	stw	r2,-44(fp)
    152c:	00000506 	br	1544 <alt_tse_system_add_sys+0xa0>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
    1530:	01000174 	movhi	r4,5
    1534:	212b7d04 	addi	r4,r4,-21004
    1538:	00083740 	call	8374 <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
    153c:	00bfffc4 	movi	r2,-1
    1540:	00025106 	br	1e88 <alt_tse_system_add_sys+0x9e4>
	}

	for(i = 0; i < loop_end; i++) {
    1544:	e03ff415 	stw	zero,-48(fp)
    1548:	00024b06 	br	1e78 <alt_tse_system_add_sys+0x9d4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
    154c:	d0a842c3 	ldbu	r2,-24309(gp)
    1550:	10803fcc 	andi	r2,r2,255
    1554:	1080201c 	xori	r2,r2,128
    1558:	10bfe004 	addi	r2,r2,-128
    155c:	10800110 	cmplti	r2,r2,4
    1560:	10000c1e 	bne	r2,zero,1594 <alt_tse_system_add_sys+0xf0>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
    1564:	01000174 	movhi	r4,5
    1568:	212b8904 	addi	r4,r4,-20956
    156c:	00083740 	call	8374 <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
    1570:	d0a842c3 	ldbu	r2,-24309(gp)
    1574:	10803fcc 	andi	r2,r2,255
    1578:	1080201c 	xori	r2,r2,128
    157c:	10bfe004 	addi	r2,r2,-128
    1580:	01000174 	movhi	r4,5
    1584:	212b9904 	addi	r4,r4,-20892
    1588:	01400104 	movi	r5,4
    158c:	100d883a 	mov	r6,r2
    1590:	00080f80 	call	80f8 <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
    1594:	e0bffa17 	ldw	r2,-24(fp)
    1598:	1000081e 	bne	r2,zero,15bc <alt_tse_system_add_sys+0x118>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
    159c:	01000174 	movhi	r4,5
    15a0:	212ba804 	addi	r4,r4,-20832
    15a4:	00083740 	call	8374 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
    15a8:	01000174 	movhi	r4,5
    15ac:	212bb204 	addi	r4,r4,-20792
    15b0:	00083740 	call	8374 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
    15b4:	00bfffc4 	movi	r2,-1
    15b8:	00023306 	br	1e88 <alt_tse_system_add_sys+0x9e4>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
    15bc:	d0a842c3 	ldbu	r2,-24309(gp)
    15c0:	11003fcc 	andi	r4,r2,255
    15c4:	2100201c 	xori	r4,r4,128
    15c8:	213fe004 	addi	r4,r4,-128
    15cc:	e0bffa17 	ldw	r2,-24(fp)
    15d0:	10800017 	ldw	r2,0(r2)
    15d4:	e0fff417 	ldw	r3,-48(fp)
    15d8:	180692ba 	slli	r3,r3,10
    15dc:	10c7883a 	add	r3,r2,r3
    15e0:	00800174 	movhi	r2,5
    15e4:	10bf9404 	addi	r2,r2,-432
    15e8:	21001224 	muli	r4,r4,72
    15ec:	1105883a 	add	r2,r2,r4
    15f0:	10c00015 	stw	r3,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
    15f4:	d0a842c3 	ldbu	r2,-24309(gp)
    15f8:	11003fcc 	andi	r4,r2,255
    15fc:	2100201c 	xori	r4,r4,128
    1600:	213fe004 	addi	r4,r4,-128
    1604:	e0bffa17 	ldw	r2,-24(fp)
    1608:	10c0010b 	ldhu	r3,4(r2)
    160c:	00800174 	movhi	r2,5
    1610:	10bf9404 	addi	r2,r2,-432
    1614:	21001224 	muli	r4,r4,72
    1618:	1105883a 	add	r2,r2,r4
    161c:	10800104 	addi	r2,r2,4
    1620:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
    1624:	d0a842c3 	ldbu	r2,-24309(gp)
    1628:	11003fcc 	andi	r4,r2,255
    162c:	2100201c 	xori	r4,r4,128
    1630:	213fe004 	addi	r4,r4,-128
    1634:	e0bffa17 	ldw	r2,-24(fp)
    1638:	10c0018b 	ldhu	r3,6(r2)
    163c:	00800174 	movhi	r2,5
    1640:	10bf9404 	addi	r2,r2,-432
    1644:	21001224 	muli	r4,r4,72
    1648:	1105883a 	add	r2,r2,r4
    164c:	10800104 	addi	r2,r2,4
    1650:	10c0008d 	sth	r3,2(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
    1654:	d0a842c3 	ldbu	r2,-24309(gp)
    1658:	11003fcc 	andi	r4,r2,255
    165c:	2100201c 	xori	r4,r4,128
    1660:	213fe004 	addi	r4,r4,-128
    1664:	e0bffa17 	ldw	r2,-24(fp)
    1668:	10c00203 	ldbu	r3,8(r2)
    166c:	00800174 	movhi	r2,5
    1670:	10bf9404 	addi	r2,r2,-432
    1674:	21001224 	muli	r4,r4,72
    1678:	1105883a 	add	r2,r2,r4
    167c:	10800204 	addi	r2,r2,8
    1680:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
    1684:	d0a842c3 	ldbu	r2,-24309(gp)
    1688:	11003fcc 	andi	r4,r2,255
    168c:	2100201c 	xori	r4,r4,128
    1690:	213fe004 	addi	r4,r4,-128
    1694:	e0bffa17 	ldw	r2,-24(fp)
    1698:	10c00243 	ldbu	r3,9(r2)
    169c:	00800174 	movhi	r2,5
    16a0:	10bf9404 	addi	r2,r2,-432
    16a4:	21001224 	muli	r4,r4,72
    16a8:	1105883a 	add	r2,r2,r4
    16ac:	10800204 	addi	r2,r2,8
    16b0:	10c00045 	stb	r3,1(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
    16b4:	d0a842c3 	ldbu	r2,-24309(gp)
    16b8:	11003fcc 	andi	r4,r2,255
    16bc:	2100201c 	xori	r4,r4,128
    16c0:	213fe004 	addi	r4,r4,-128
    16c4:	e0bffa17 	ldw	r2,-24(fp)
    16c8:	10c00283 	ldbu	r3,10(r2)
    16cc:	00800174 	movhi	r2,5
    16d0:	10bf9404 	addi	r2,r2,-432
    16d4:	21001224 	muli	r4,r4,72
    16d8:	1105883a 	add	r2,r2,r4
    16dc:	10800204 	addi	r2,r2,8
    16e0:	10c00085 	stb	r3,2(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
    16e4:	d0a842c3 	ldbu	r2,-24309(gp)
    16e8:	11003fcc 	andi	r4,r2,255
    16ec:	2100201c 	xori	r4,r4,128
    16f0:	213fe004 	addi	r4,r4,-128
    16f4:	e0bffa17 	ldw	r2,-24(fp)
    16f8:	10c002c3 	ldbu	r3,11(r2)
    16fc:	00800174 	movhi	r2,5
    1700:	10bf9404 	addi	r2,r2,-432
    1704:	21001224 	muli	r4,r4,72
    1708:	1105883a 	add	r2,r2,r4
    170c:	10800204 	addi	r2,r2,8
    1710:	10c000c5 	stb	r3,3(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
    1714:	d0a842c3 	ldbu	r2,-24309(gp)
    1718:	11003fcc 	andi	r4,r2,255
    171c:	2100201c 	xori	r4,r4,128
    1720:	213fe004 	addi	r4,r4,-128
    1724:	e0bffa17 	ldw	r2,-24(fp)
    1728:	10c00303 	ldbu	r3,12(r2)
    172c:	00800174 	movhi	r2,5
    1730:	10bf9404 	addi	r2,r2,-432
    1734:	21001224 	muli	r4,r4,72
    1738:	1105883a 	add	r2,r2,r4
    173c:	10800304 	addi	r2,r2,12
    1740:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
    1744:	d0a842c3 	ldbu	r2,-24309(gp)
    1748:	11003fcc 	andi	r4,r2,255
    174c:	2100201c 	xori	r4,r4,128
    1750:	213fe004 	addi	r4,r4,-128
    1754:	e0bffa17 	ldw	r2,-24(fp)
    1758:	10c00343 	ldbu	r3,13(r2)
    175c:	00800174 	movhi	r2,5
    1760:	10bf9404 	addi	r2,r2,-432
    1764:	21001224 	muli	r4,r4,72
    1768:	1105883a 	add	r2,r2,r4
    176c:	10800304 	addi	r2,r2,12
    1770:	10c00045 	stb	r3,1(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
    1774:	d0a842c3 	ldbu	r2,-24309(gp)
    1778:	11003fcc 	andi	r4,r2,255
    177c:	2100201c 	xori	r4,r4,128
    1780:	213fe004 	addi	r4,r4,-128
    1784:	e0bffa17 	ldw	r2,-24(fp)
    1788:	10c00383 	ldbu	r3,14(r2)
    178c:	00800174 	movhi	r2,5
    1790:	10bf9404 	addi	r2,r2,-432
    1794:	21001224 	muli	r4,r4,72
    1798:	1105883a 	add	r2,r2,r4
    179c:	10800304 	addi	r2,r2,12
    17a0:	10c00085 	stb	r3,2(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
    17a4:	d0a842c3 	ldbu	r2,-24309(gp)
    17a8:	11003fcc 	andi	r4,r2,255
    17ac:	2100201c 	xori	r4,r4,128
    17b0:	213fe004 	addi	r4,r4,-128
    17b4:	e0bffa17 	ldw	r2,-24(fp)
    17b8:	10c003c3 	ldbu	r3,15(r2)
    17bc:	00800174 	movhi	r2,5
    17c0:	10bf9404 	addi	r2,r2,-432
    17c4:	21001224 	muli	r4,r4,72
    17c8:	1105883a 	add	r2,r2,r4
    17cc:	10800304 	addi	r2,r2,12
    17d0:	10c000c5 	stb	r3,3(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
    17d4:	d0a842c3 	ldbu	r2,-24309(gp)
    17d8:	11003fcc 	andi	r4,r2,255
    17dc:	2100201c 	xori	r4,r4,128
    17e0:	213fe004 	addi	r4,r4,-128
    17e4:	e0bffa17 	ldw	r2,-24(fp)
    17e8:	10c00403 	ldbu	r3,16(r2)
    17ec:	00800174 	movhi	r2,5
    17f0:	10bf9404 	addi	r2,r2,-432
    17f4:	21001224 	muli	r4,r4,72
    17f8:	1105883a 	add	r2,r2,r4
    17fc:	10800404 	addi	r2,r2,16
    1800:	10c00005 	stb	r3,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
    1804:	e0bff617 	ldw	r2,-40(fp)
    1808:	10000d1e 	bne	r2,zero,1840 <alt_tse_system_add_sys+0x39c>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
    180c:	01000174 	movhi	r4,5
    1810:	212bc404 	addi	r4,r4,-20720
    1814:	00083740 	call	8374 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
    1818:	d0a842c3 	ldbu	r2,-24309(gp)
    181c:	10803fcc 	andi	r2,r2,255
    1820:	1080201c 	xori	r2,r2,128
    1824:	10bfe004 	addi	r2,r2,-128
    1828:	01000174 	movhi	r4,5
    182c:	212bcf04 	addi	r4,r4,-20676
    1830:	100b883a 	mov	r5,r2
    1834:	00080f80 	call	80f8 <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
    1838:	00bfffc4 	movi	r2,-1
    183c:	00019206 	br	1e88 <alt_tse_system_add_sys+0x9e4>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
    1840:	d0a842c3 	ldbu	r2,-24309(gp)
    1844:	14003fcc 	andi	r16,r2,255
    1848:	8400201c 	xori	r16,r16,128
    184c:	843fe004 	addi	r16,r16,-128
    1850:	e0bff617 	ldw	r2,-40(fp)
    1854:	10800017 	ldw	r2,0(r2)
    1858:	1009883a 	mov	r4,r2
    185c:	0008d080 	call	8d08 <strlen>
    1860:	10800044 	addi	r2,r2,1
    1864:	1009883a 	mov	r4,r2
    1868:	00074c00 	call	74c0 <malloc>
    186c:	1009883a 	mov	r4,r2
    1870:	00800174 	movhi	r2,5
    1874:	10bf9404 	addi	r2,r2,-432
    1878:	80c01224 	muli	r3,r16,72
    187c:	10c5883a 	add	r2,r2,r3
    1880:	10800504 	addi	r2,r2,20
    1884:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
    1888:	d0a842c3 	ldbu	r2,-24309(gp)
    188c:	10c03fcc 	andi	r3,r2,255
    1890:	18c0201c 	xori	r3,r3,128
    1894:	18ffe004 	addi	r3,r3,-128
    1898:	00800174 	movhi	r2,5
    189c:	10bf9404 	addi	r2,r2,-432
    18a0:	18c01224 	muli	r3,r3,72
    18a4:	10c5883a 	add	r2,r2,r3
    18a8:	10800504 	addi	r2,r2,20
    18ac:	10800017 	ldw	r2,0(r2)
    18b0:	10000a1e 	bne	r2,zero,18dc <alt_tse_system_add_sys+0x438>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
    18b4:	d0a842c3 	ldbu	r2,-24309(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	1080201c 	xori	r2,r2,128
    18c0:	10bfe004 	addi	r2,r2,-128
    18c4:	01000174 	movhi	r4,5
    18c8:	212be704 	addi	r4,r4,-20580
    18cc:	100b883a 	mov	r5,r2
    18d0:	00080f80 	call	80f8 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
    18d4:	00bfffc4 	movi	r2,-1
    18d8:	00016b06 	br	1e88 <alt_tse_system_add_sys+0x9e4>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
    18dc:	d0a842c3 	ldbu	r2,-24309(gp)
    18e0:	10c03fcc 	andi	r3,r2,255
    18e4:	18c0201c 	xori	r3,r3,128
    18e8:	18ffe004 	addi	r3,r3,-128
    18ec:	00800174 	movhi	r2,5
    18f0:	10bf9404 	addi	r2,r2,-432
    18f4:	18c01224 	muli	r3,r3,72
    18f8:	10c5883a 	add	r2,r2,r3
    18fc:	10800504 	addi	r2,r2,20
    1900:	10c00017 	ldw	r3,0(r2)
    1904:	e0bff617 	ldw	r2,-40(fp)
    1908:	10800017 	ldw	r2,0(r2)
    190c:	1809883a 	mov	r4,r3
    1910:	100b883a 	mov	r5,r2
    1914:	000868c0 	call	868c <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
    1918:	d0a842c3 	ldbu	r2,-24309(gp)
    191c:	14003fcc 	andi	r16,r2,255
    1920:	8400201c 	xori	r16,r16,128
    1924:	843fe004 	addi	r16,r16,-128
    1928:	e0bff617 	ldw	r2,-40(fp)
    192c:	10800117 	ldw	r2,4(r2)
    1930:	1009883a 	mov	r4,r2
    1934:	0008d080 	call	8d08 <strlen>
    1938:	10800044 	addi	r2,r2,1
    193c:	1009883a 	mov	r4,r2
    1940:	00074c00 	call	74c0 <malloc>
    1944:	1009883a 	mov	r4,r2
    1948:	00800174 	movhi	r2,5
    194c:	10bf9404 	addi	r2,r2,-432
    1950:	80c01224 	muli	r3,r16,72
    1954:	10c5883a 	add	r2,r2,r3
    1958:	10800604 	addi	r2,r2,24
    195c:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
    1960:	d0a842c3 	ldbu	r2,-24309(gp)
    1964:	10c03fcc 	andi	r3,r2,255
    1968:	18c0201c 	xori	r3,r3,128
    196c:	18ffe004 	addi	r3,r3,-128
    1970:	00800174 	movhi	r2,5
    1974:	10bf9404 	addi	r2,r2,-432
    1978:	18c01224 	muli	r3,r3,72
    197c:	10c5883a 	add	r2,r2,r3
    1980:	10800604 	addi	r2,r2,24
    1984:	10800017 	ldw	r2,0(r2)
    1988:	10000a1e 	bne	r2,zero,19b4 <alt_tse_system_add_sys+0x510>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
    198c:	d0a842c3 	ldbu	r2,-24309(gp)
    1990:	10803fcc 	andi	r2,r2,255
    1994:	1080201c 	xori	r2,r2,128
    1998:	10bfe004 	addi	r2,r2,-128
    199c:	01000174 	movhi	r4,5
    19a0:	212bfa04 	addi	r4,r4,-20504
    19a4:	100b883a 	mov	r5,r2
    19a8:	00080f80 	call	80f8 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
    19ac:	00bfffc4 	movi	r2,-1
    19b0:	00013506 	br	1e88 <alt_tse_system_add_sys+0x9e4>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
    19b4:	d0a842c3 	ldbu	r2,-24309(gp)
    19b8:	10c03fcc 	andi	r3,r2,255
    19bc:	18c0201c 	xori	r3,r3,128
    19c0:	18ffe004 	addi	r3,r3,-128
    19c4:	00800174 	movhi	r2,5
    19c8:	10bf9404 	addi	r2,r2,-432
    19cc:	18c01224 	muli	r3,r3,72
    19d0:	10c5883a 	add	r2,r2,r3
    19d4:	10800604 	addi	r2,r2,24
    19d8:	10c00017 	ldw	r3,0(r2)
    19dc:	e0bff617 	ldw	r2,-40(fp)
    19e0:	10800117 	ldw	r2,4(r2)
    19e4:	1809883a 	mov	r4,r3
    19e8:	100b883a 	mov	r5,r2
    19ec:	000868c0 	call	868c <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
    19f0:	d0a842c3 	ldbu	r2,-24309(gp)
    19f4:	11003fcc 	andi	r4,r2,255
    19f8:	2100201c 	xori	r4,r4,128
    19fc:	213fe004 	addi	r4,r4,-128
    1a00:	e0bff617 	ldw	r2,-40(fp)
    1a04:	10c0020b 	ldhu	r3,8(r2)
    1a08:	00800174 	movhi	r2,5
    1a0c:	10bf9404 	addi	r2,r2,-432
    1a10:	21001224 	muli	r4,r4,72
    1a14:	1105883a 	add	r2,r2,r4
    1a18:	10800704 	addi	r2,r2,28
    1a1c:	10c0000d 	sth	r3,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
    1a20:	e0bff717 	ldw	r2,-36(fp)
    1a24:	1000151e 	bne	r2,zero,1a7c <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
    1a28:	d0a842c3 	ldbu	r2,-24309(gp)
    1a2c:	10c03fcc 	andi	r3,r2,255
    1a30:	18c0201c 	xori	r3,r3,128
    1a34:	18ffe004 	addi	r3,r3,-128
    1a38:	00800174 	movhi	r2,5
    1a3c:	10bf9404 	addi	r2,r2,-432
    1a40:	18c01224 	muli	r3,r3,72
    1a44:	10c5883a 	add	r2,r2,r3
    1a48:	10800704 	addi	r2,r2,28
    1a4c:	10000085 	stb	zero,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
    1a50:	d0a842c3 	ldbu	r2,-24309(gp)
    1a54:	10c03fcc 	andi	r3,r2,255
    1a58:	18c0201c 	xori	r3,r3,128
    1a5c:	18ffe004 	addi	r3,r3,-128
    1a60:	00800174 	movhi	r2,5
    1a64:	10bf9404 	addi	r2,r2,-432
    1a68:	18c01224 	muli	r3,r3,72
    1a6c:	10c5883a 	add	r2,r2,r3
    1a70:	10800804 	addi	r2,r2,32
    1a74:	10000015 	stw	zero,0(r2)
    1a78:	00001806 	br	1adc <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
    1a7c:	d0a842c3 	ldbu	r2,-24309(gp)
    1a80:	11003fcc 	andi	r4,r2,255
    1a84:	2100201c 	xori	r4,r4,128
    1a88:	213fe004 	addi	r4,r4,-128
    1a8c:	e0bff717 	ldw	r2,-36(fp)
    1a90:	10c00003 	ldbu	r3,0(r2)
    1a94:	00800174 	movhi	r2,5
    1a98:	10bf9404 	addi	r2,r2,-432
    1a9c:	21001224 	muli	r4,r4,72
    1aa0:	1105883a 	add	r2,r2,r4
    1aa4:	10800704 	addi	r2,r2,28
    1aa8:	10c00085 	stb	r3,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
    1aac:	d0a842c3 	ldbu	r2,-24309(gp)
    1ab0:	11003fcc 	andi	r4,r2,255
    1ab4:	2100201c 	xori	r4,r4,128
    1ab8:	213fe004 	addi	r4,r4,-128
    1abc:	e0bff717 	ldw	r2,-36(fp)
    1ac0:	10c00117 	ldw	r3,4(r2)
    1ac4:	00800174 	movhi	r2,5
    1ac8:	10bf9404 	addi	r2,r2,-432
    1acc:	21001224 	muli	r4,r4,72
    1ad0:	1105883a 	add	r2,r2,r4
    1ad4:	10800804 	addi	r2,r2,32
    1ad8:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
    1adc:	e0bff817 	ldw	r2,-32(fp)
    1ae0:	1000471e 	bne	r2,zero,1c00 <alt_tse_system_add_sys+0x75c>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
    1ae4:	d0a842c3 	ldbu	r2,-24309(gp)
    1ae8:	10c03fcc 	andi	r3,r2,255
    1aec:	18c0201c 	xori	r3,r3,128
    1af0:	18ffe004 	addi	r3,r3,-128
    1af4:	00800174 	movhi	r2,5
    1af8:	10bf9404 	addi	r2,r2,-432
    1afc:	18c01224 	muli	r3,r3,72
    1b00:	10c5883a 	add	r2,r2,r3
    1b04:	10800904 	addi	r2,r2,36
    1b08:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
    1b0c:	d0a842c3 	ldbu	r2,-24309(gp)
    1b10:	10c03fcc 	andi	r3,r2,255
    1b14:	18c0201c 	xori	r3,r3,128
    1b18:	18ffe004 	addi	r3,r3,-128
    1b1c:	00800174 	movhi	r2,5
    1b20:	10bf9404 	addi	r2,r2,-432
    1b24:	18c01224 	muli	r3,r3,72
    1b28:	10c5883a 	add	r2,r2,r3
    1b2c:	10800a04 	addi	r2,r2,40
    1b30:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
    1b34:	d0a842c3 	ldbu	r2,-24309(gp)
    1b38:	10c03fcc 	andi	r3,r2,255
    1b3c:	18c0201c 	xori	r3,r3,128
    1b40:	18ffe004 	addi	r3,r3,-128
    1b44:	00800174 	movhi	r2,5
    1b48:	10bf9404 	addi	r2,r2,-432
    1b4c:	18c01224 	muli	r3,r3,72
    1b50:	10c5883a 	add	r2,r2,r3
    1b54:	10800b04 	addi	r2,r2,44
    1b58:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
    1b5c:	d0a842c3 	ldbu	r2,-24309(gp)
    1b60:	10c03fcc 	andi	r3,r2,255
    1b64:	18c0201c 	xori	r3,r3,128
    1b68:	18ffe004 	addi	r3,r3,-128
    1b6c:	00800174 	movhi	r2,5
    1b70:	10bf9404 	addi	r2,r2,-432
    1b74:	18c01224 	muli	r3,r3,72
    1b78:	10c5883a 	add	r2,r2,r3
    1b7c:	10800c04 	addi	r2,r2,48
    1b80:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
    1b84:	d0a842c3 	ldbu	r2,-24309(gp)
    1b88:	10c03fcc 	andi	r3,r2,255
    1b8c:	18c0201c 	xori	r3,r3,128
    1b90:	18ffe004 	addi	r3,r3,-128
    1b94:	00800174 	movhi	r2,5
    1b98:	10bf9404 	addi	r2,r2,-432
    1b9c:	18c01224 	muli	r3,r3,72
    1ba0:	10c5883a 	add	r2,r2,r3
    1ba4:	10800d04 	addi	r2,r2,52
    1ba8:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
    1bac:	d0a842c3 	ldbu	r2,-24309(gp)
    1bb0:	10c03fcc 	andi	r3,r2,255
    1bb4:	18c0201c 	xori	r3,r3,128
    1bb8:	18ffe004 	addi	r3,r3,-128
    1bbc:	00800174 	movhi	r2,5
    1bc0:	10bf9404 	addi	r2,r2,-432
    1bc4:	18c01224 	muli	r3,r3,72
    1bc8:	10c5883a 	add	r2,r2,r3
    1bcc:	10800e04 	addi	r2,r2,56
    1bd0:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
    1bd4:	d0a842c3 	ldbu	r2,-24309(gp)
    1bd8:	10c03fcc 	andi	r3,r2,255
    1bdc:	18c0201c 	xori	r3,r3,128
    1be0:	18ffe004 	addi	r3,r3,-128
    1be4:	00800174 	movhi	r2,5
    1be8:	10bf9404 	addi	r2,r2,-432
    1bec:	18c01224 	muli	r3,r3,72
    1bf0:	10c5883a 	add	r2,r2,r3
    1bf4:	10800f04 	addi	r2,r2,60
    1bf8:	10000015 	stw	zero,0(r2)
    1bfc:	00005406 	br	1d50 <alt_tse_system_add_sys+0x8ac>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
    1c00:	d0a842c3 	ldbu	r2,-24309(gp)
    1c04:	11003fcc 	andi	r4,r2,255
    1c08:	2100201c 	xori	r4,r4,128
    1c0c:	213fe004 	addi	r4,r4,-128
    1c10:	e0bff817 	ldw	r2,-32(fp)
    1c14:	10c00003 	ldbu	r3,0(r2)
    1c18:	00800174 	movhi	r2,5
    1c1c:	10bf9404 	addi	r2,r2,-432
    1c20:	21001224 	muli	r4,r4,72
    1c24:	1105883a 	add	r2,r2,r4
    1c28:	10800904 	addi	r2,r2,36
    1c2c:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
    1c30:	d0a842c3 	ldbu	r2,-24309(gp)
    1c34:	11003fcc 	andi	r4,r2,255
    1c38:	2100201c 	xori	r4,r4,128
    1c3c:	213fe004 	addi	r4,r4,-128
    1c40:	e0bff817 	ldw	r2,-32(fp)
    1c44:	10c00117 	ldw	r3,4(r2)
    1c48:	00800174 	movhi	r2,5
    1c4c:	10bf9404 	addi	r2,r2,-432
    1c50:	21001224 	muli	r4,r4,72
    1c54:	1105883a 	add	r2,r2,r4
    1c58:	10800a04 	addi	r2,r2,40
    1c5c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
    1c60:	d0a842c3 	ldbu	r2,-24309(gp)
    1c64:	11003fcc 	andi	r4,r2,255
    1c68:	2100201c 	xori	r4,r4,128
    1c6c:	213fe004 	addi	r4,r4,-128
    1c70:	e0bff817 	ldw	r2,-32(fp)
    1c74:	10c00217 	ldw	r3,8(r2)
    1c78:	00800174 	movhi	r2,5
    1c7c:	10bf9404 	addi	r2,r2,-432
    1c80:	21001224 	muli	r4,r4,72
    1c84:	1105883a 	add	r2,r2,r4
    1c88:	10800b04 	addi	r2,r2,44
    1c8c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
    1c90:	d0a842c3 	ldbu	r2,-24309(gp)
    1c94:	11003fcc 	andi	r4,r2,255
    1c98:	2100201c 	xori	r4,r4,128
    1c9c:	213fe004 	addi	r4,r4,-128
    1ca0:	e0bff817 	ldw	r2,-32(fp)
    1ca4:	10c00317 	ldw	r3,12(r2)
    1ca8:	00800174 	movhi	r2,5
    1cac:	10bf9404 	addi	r2,r2,-432
    1cb0:	21001224 	muli	r4,r4,72
    1cb4:	1105883a 	add	r2,r2,r4
    1cb8:	10800c04 	addi	r2,r2,48
    1cbc:	10c00015 	stw	r3,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
    1cc0:	d0a842c3 	ldbu	r2,-24309(gp)
    1cc4:	11003fcc 	andi	r4,r2,255
    1cc8:	2100201c 	xori	r4,r4,128
    1ccc:	213fe004 	addi	r4,r4,-128
    1cd0:	e0bff817 	ldw	r2,-32(fp)
    1cd4:	10c00417 	ldw	r3,16(r2)
    1cd8:	00800174 	movhi	r2,5
    1cdc:	10bf9404 	addi	r2,r2,-432
    1ce0:	21001224 	muli	r4,r4,72
    1ce4:	1105883a 	add	r2,r2,r4
    1ce8:	10800d04 	addi	r2,r2,52
    1cec:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
    1cf0:	d0a842c3 	ldbu	r2,-24309(gp)
    1cf4:	11003fcc 	andi	r4,r2,255
    1cf8:	2100201c 	xori	r4,r4,128
    1cfc:	213fe004 	addi	r4,r4,-128
    1d00:	e0bff817 	ldw	r2,-32(fp)
    1d04:	10c00517 	ldw	r3,20(r2)
    1d08:	00800174 	movhi	r2,5
    1d0c:	10bf9404 	addi	r2,r2,-432
    1d10:	21001224 	muli	r4,r4,72
    1d14:	1105883a 	add	r2,r2,r4
    1d18:	10800e04 	addi	r2,r2,56
    1d1c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
    1d20:	d0a842c3 	ldbu	r2,-24309(gp)
    1d24:	11003fcc 	andi	r4,r2,255
    1d28:	2100201c 	xori	r4,r4,128
    1d2c:	213fe004 	addi	r4,r4,-128
    1d30:	e0bff817 	ldw	r2,-32(fp)
    1d34:	10c00617 	ldw	r3,24(r2)
    1d38:	00800174 	movhi	r2,5
    1d3c:	10bf9404 	addi	r2,r2,-432
    1d40:	21001224 	muli	r4,r4,72
    1d44:	1105883a 	add	r2,r2,r4
    1d48:	10800f04 	addi	r2,r2,60
    1d4c:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
    1d50:	e0bff917 	ldw	r2,-28(fp)
    1d54:	1000161e 	bne	r2,zero,1db0 <alt_tse_system_add_sys+0x90c>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
    1d58:	d0a842c3 	ldbu	r2,-24309(gp)
    1d5c:	10c03fcc 	andi	r3,r2,255
    1d60:	18c0201c 	xori	r3,r3,128
    1d64:	18ffe004 	addi	r3,r3,-128
    1d68:	00800174 	movhi	r2,5
    1d6c:	10bf9404 	addi	r2,r2,-432
    1d70:	18c01224 	muli	r3,r3,72
    1d74:	10c5883a 	add	r2,r2,r3
    1d78:	10801004 	addi	r2,r2,64
    1d7c:	00ffffc4 	movi	r3,-1
    1d80:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
    1d84:	d0a842c3 	ldbu	r2,-24309(gp)
    1d88:	10c03fcc 	andi	r3,r2,255
    1d8c:	18c0201c 	xori	r3,r3,128
    1d90:	18ffe004 	addi	r3,r3,-128
    1d94:	00800174 	movhi	r2,5
    1d98:	10bf9404 	addi	r2,r2,-432
    1d9c:	18c01224 	muli	r3,r3,72
    1da0:	10c5883a 	add	r2,r2,r3
    1da4:	10801104 	addi	r2,r2,68
    1da8:	10000015 	stw	zero,0(r2)
    1dac:	00001806 	br	1e10 <alt_tse_system_add_sys+0x96c>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
    1db0:	d0a842c3 	ldbu	r2,-24309(gp)
    1db4:	11003fcc 	andi	r4,r2,255
    1db8:	2100201c 	xori	r4,r4,128
    1dbc:	213fe004 	addi	r4,r4,-128
    1dc0:	e0bff917 	ldw	r2,-28(fp)
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	00800174 	movhi	r2,5
    1dcc:	10bf9404 	addi	r2,r2,-432
    1dd0:	21001224 	muli	r4,r4,72
    1dd4:	1105883a 	add	r2,r2,r4
    1dd8:	10801004 	addi	r2,r2,64
    1ddc:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
    1de0:	d0a842c3 	ldbu	r2,-24309(gp)
    1de4:	11003fcc 	andi	r4,r2,255
    1de8:	2100201c 	xori	r4,r4,128
    1dec:	213fe004 	addi	r4,r4,-128
    1df0:	e0bff917 	ldw	r2,-28(fp)
    1df4:	10c00117 	ldw	r3,4(r2)
    1df8:	00800174 	movhi	r2,5
    1dfc:	10bf9404 	addi	r2,r2,-432
    1e00:	21001224 	muli	r4,r4,72
    1e04:	1105883a 	add	r2,r2,r4
    1e08:	10801104 	addi	r2,r2,68
    1e0c:	10c00015 	stw	r3,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
    1e10:	e0bff617 	ldw	r2,-40(fp)
    1e14:	10800304 	addi	r2,r2,12
    1e18:	e0bff615 	stw	r2,-40(fp)
		if(pmem) pmem++;
    1e1c:	e0bff717 	ldw	r2,-36(fp)
    1e20:	10000326 	beq	r2,zero,1e30 <alt_tse_system_add_sys+0x98c>
    1e24:	e0bff717 	ldw	r2,-36(fp)
    1e28:	10800204 	addi	r2,r2,8
    1e2c:	e0bff715 	stw	r2,-36(fp)
		if(pfifo) pfifo++;
    1e30:	e0bff817 	ldw	r2,-32(fp)
    1e34:	10000326 	beq	r2,zero,1e44 <alt_tse_system_add_sys+0x9a0>
    1e38:	e0bff817 	ldw	r2,-32(fp)
    1e3c:	10800704 	addi	r2,r2,28
    1e40:	e0bff815 	stw	r2,-32(fp)
		if(pphy) pphy++;
    1e44:	e0bff917 	ldw	r2,-28(fp)
    1e48:	10000326 	beq	r2,zero,1e58 <alt_tse_system_add_sys+0x9b4>
    1e4c:	e0bff917 	ldw	r2,-28(fp)
    1e50:	10800204 	addi	r2,r2,8
    1e54:	e0bff915 	stw	r2,-28(fp)
		
		tse_system_count++;
    1e58:	d0a842c3 	ldbu	r2,-24309(gp)
    1e5c:	10800044 	addi	r2,r2,1
    1e60:	d0a842c5 	stb	r2,-24309(gp)
		max_mac_system = tse_system_count;
    1e64:	d0a842c3 	ldbu	r2,-24309(gp)
    1e68:	d0a00005 	stb	r2,-32768(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
    1e6c:	e0bff417 	ldw	r2,-48(fp)
    1e70:	10800044 	addi	r2,r2,1
    1e74:	e0bff415 	stw	r2,-48(fp)
    1e78:	e0fff417 	ldw	r3,-48(fp)
    1e7c:	e0bff517 	ldw	r2,-44(fp)
    1e80:	18bdb216 	blt	r3,r2,154c <__alt_mem_descriptor_memory+0xdefc154c>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
    1e84:	0005883a 	mov	r2,zero
	
}
    1e88:	e6ffff04 	addi	sp,fp,-4
    1e8c:	dfc00217 	ldw	ra,8(sp)
    1e90:	df000117 	ldw	fp,4(sp)
    1e94:	dc000017 	ldw	r16,0(sp)
    1e98:	dec00304 	addi	sp,sp,12
    1e9c:	f800283a 	ret

00001ea0 <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
    1ea0:	defff904 	addi	sp,sp,-28
    1ea4:	dfc00615 	stw	ra,24(sp)
    1ea8:	df000515 	stw	fp,20(sp)
    1eac:	df000504 	addi	fp,sp,20
    1eb0:	e13ffe15 	stw	r4,-8(fp)
    1eb4:	2805883a 	mov	r2,r5
    1eb8:	e0bfff05 	stb	r2,-4(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
    1ebc:	e03ffb15 	stw	zero,-20(fp)
    1ec0:	00004806 	br	1fe4 <alt_tse_sys_enable_mdio_sharing+0x144>
		psys_mac = psys_mac_list[i];
    1ec4:	e0bffb17 	ldw	r2,-20(fp)
    1ec8:	1085883a 	add	r2,r2,r2
    1ecc:	1085883a 	add	r2,r2,r2
    1ed0:	1007883a 	mov	r3,r2
    1ed4:	e0bffe17 	ldw	r2,-8(fp)
    1ed8:	10c5883a 	add	r2,r2,r3
    1edc:	10800017 	ldw	r2,0(r2)
    1ee0:	e0bffd15 	stw	r2,-12(fp)
		
		if(psys_mac == 0) {
    1ee4:	e0bffd17 	ldw	r2,-12(fp)
    1ee8:	1000081e 	bne	r2,zero,1f0c <alt_tse_sys_enable_mdio_sharing+0x6c>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
    1eec:	01000174 	movhi	r4,5
    1ef0:	212ba804 	addi	r4,r4,-20832
    1ef4:	00083740 	call	8374 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
    1ef8:	01000174 	movhi	r4,5
    1efc:	212c0d04 	addi	r4,r4,-20428
    1f00:	00083740 	call	8374 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
    1f04:	00bfffc4 	movi	r2,-1
    1f08:	00003a06 	br	1ff4 <alt_tse_sys_enable_mdio_sharing+0x154>
		}
		
		for(j = 0; j < max_mac_system; j++) {
    1f0c:	e03ffc15 	stw	zero,-16(fp)
    1f10:	00002d06 	br	1fc8 <alt_tse_sys_enable_mdio_sharing+0x128>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
    1f14:	e0bffd17 	ldw	r2,-12(fp)
    1f18:	10c00017 	ldw	r3,0(r2)
    1f1c:	00800174 	movhi	r2,5
    1f20:	10bf9404 	addi	r2,r2,-432
    1f24:	e13ffc17 	ldw	r4,-16(fp)
    1f28:	21001224 	muli	r4,r4,72
    1f2c:	1105883a 	add	r2,r2,r4
    1f30:	10800017 	ldw	r2,0(r2)
    1f34:	1880211e 	bne	r3,r2,1fbc <alt_tse_sys_enable_mdio_sharing+0x11c>
				if(tse_mac_device[j].tse_multichannel_mac) {
    1f38:	00800174 	movhi	r2,5
    1f3c:	10bf9404 	addi	r2,r2,-432
    1f40:	e0fffc17 	ldw	r3,-16(fp)
    1f44:	18c01224 	muli	r3,r3,72
    1f48:	10c5883a 	add	r2,r2,r3
    1f4c:	10800204 	addi	r2,r2,8
    1f50:	108000c3 	ldbu	r2,3(r2)
    1f54:	10803fcc 	andi	r2,r2,255
    1f58:	10000826 	beq	r2,zero,1f7c <alt_tse_sys_enable_mdio_sharing+0xdc>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
    1f5c:	01000174 	movhi	r4,5
    1f60:	212c2104 	addi	r4,r4,-20348
    1f64:	00083740 	call	8374 <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
    1f68:	01000174 	movhi	r4,5
    1f6c:	212c3204 	addi	r4,r4,-20280
    1f70:	00083740 	call	8374 <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
    1f74:	00bfffc4 	movi	r2,-1
    1f78:	00001e06 	br	1ff4 <alt_tse_sys_enable_mdio_sharing+0x154>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
    1f7c:	00800174 	movhi	r2,5
    1f80:	10bf9404 	addi	r2,r2,-432
    1f84:	e0fffc17 	ldw	r3,-16(fp)
    1f88:	18c01224 	muli	r3,r3,72
    1f8c:	10c5883a 	add	r2,r2,r3
    1f90:	10800304 	addi	r2,r2,12
    1f94:	00c00044 	movi	r3,1
    1f98:	10c00045 	stb	r3,1(r2)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
    1f9c:	00800174 	movhi	r2,5
    1fa0:	10bf9404 	addi	r2,r2,-432
    1fa4:	e0fffc17 	ldw	r3,-16(fp)
    1fa8:	18c01224 	muli	r3,r3,72
    1fac:	10c5883a 	add	r2,r2,r3
    1fb0:	10800304 	addi	r2,r2,12
    1fb4:	e0ffff03 	ldbu	r3,-4(fp)
    1fb8:	10c00085 	stb	r3,2(r2)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
    1fbc:	e0bffc17 	ldw	r2,-16(fp)
    1fc0:	10800044 	addi	r2,r2,1
    1fc4:	e0bffc15 	stw	r2,-16(fp)
    1fc8:	d0a00003 	ldbu	r2,-32768(gp)
    1fcc:	10803fcc 	andi	r2,r2,255
    1fd0:	e0fffc17 	ldw	r3,-16(fp)
    1fd4:	18bfcf16 	blt	r3,r2,1f14 <__alt_mem_descriptor_memory+0xdefc1f14>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
    1fd8:	e0bffb17 	ldw	r2,-20(fp)
    1fdc:	10800044 	addi	r2,r2,1
    1fe0:	e0bffb15 	stw	r2,-20(fp)
    1fe4:	e0bfff03 	ldbu	r2,-4(fp)
    1fe8:	e0fffb17 	ldw	r3,-20(fp)
    1fec:	18bfb516 	blt	r3,r2,1ec4 <__alt_mem_descriptor_memory+0xdefc1ec4>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
    1ff0:	0005883a 	mov	r2,zero
}
    1ff4:	e037883a 	mov	sp,fp
    1ff8:	dfc00117 	ldw	ra,4(sp)
    1ffc:	df000017 	ldw	fp,0(sp)
    2000:	dec00204 	addi	sp,sp,8
    2004:	f800283a 	ret

00002008 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
    2008:	defffc04 	addi	sp,sp,-16
    200c:	dfc00315 	stw	ra,12(sp)
    2010:	df000215 	stw	fp,8(sp)
    2014:	df000204 	addi	fp,sp,8
    2018:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
    201c:	e13fff17 	ldw	r4,-4(fp)
    2020:	00021f00 	call	21f0 <alt_tse_get_mac_info>
    2024:	10800317 	ldw	r2,12(r2)
    2028:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
    202c:	e13ffe17 	ldw	r4,-8(fp)
    2030:	00053a40 	call	53a4 <alt_tse_phy_get_common_speed>
}
    2034:	e037883a 	mov	sp,fp
    2038:	dfc00117 	ldw	ra,4(sp)
    203c:	df000017 	ldw	fp,0(sp)
    2040:	dec00204 	addi	sp,sp,8
    2044:	f800283a 	ret

00002048 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
    2048:	defffb04 	addi	sp,sp,-20
    204c:	dfc00415 	stw	ra,16(sp)
    2050:	df000315 	stw	fp,12(sp)
    2054:	df000304 	addi	fp,sp,12
    2058:	e13ffe15 	stw	r4,-8(fp)
    205c:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
    2060:	e13ffe17 	ldw	r4,-8(fp)
    2064:	00021f00 	call	21f0 <alt_tse_get_mac_info>
    2068:	10800317 	ldw	r2,12(r2)
    206c:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
    2070:	e13ffd17 	ldw	r4,-12(fp)
    2074:	e17fff17 	ldw	r5,-4(fp)
    2078:	00056c40 	call	56c4 <alt_tse_phy_set_common_speed>
}
    207c:	e037883a 	mov	sp,fp
    2080:	dfc00117 	ldw	ra,4(sp)
    2084:	df000017 	ldw	fp,0(sp)
    2088:	dec00204 	addi	sp,sp,8
    208c:	f800283a 	ret

00002090 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
    2090:	defffd04 	addi	sp,sp,-12
    2094:	df000215 	stw	fp,8(sp)
    2098:	df000204 	addi	fp,sp,8
    209c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
    20a0:	e03ffe15 	stw	zero,-8(fp)
    20a4:	00000c06 	br	20d8 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
    20a8:	e0bffe17 	ldw	r2,-8(fp)
    20ac:	10c01224 	muli	r3,r2,72
    20b0:	00800174 	movhi	r2,5
    20b4:	10bf9404 	addi	r2,r2,-432
    20b8:	1887883a 	add	r3,r3,r2
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	1880021e 	bne	r3,r2,20cc <alt_tse_get_system_index+0x3c>
            return i;
    20c4:	e0bffe17 	ldw	r2,-8(fp)
    20c8:	00000806 	br	20ec <alt_tse_get_system_index+0x5c>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
    20cc:	e0bffe17 	ldw	r2,-8(fp)
    20d0:	10800044 	addi	r2,r2,1
    20d4:	e0bffe15 	stw	r2,-8(fp)
    20d8:	d0a00003 	ldbu	r2,-32768(gp)
    20dc:	10803fcc 	andi	r2,r2,255
    20e0:	e0fffe17 	ldw	r3,-8(fp)
    20e4:	18bff016 	blt	r3,r2,20a8 <__alt_mem_descriptor_memory+0xdefc20a8>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
    20e8:	00bfffc4 	movi	r2,-1
}
    20ec:	e037883a 	mov	sp,fp
    20f0:	df000017 	ldw	fp,0(sp)
    20f4:	dec00104 	addi	sp,sp,4
    20f8:	f800283a 	ret

000020fc <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
    20fc:	defffd04 	addi	sp,sp,-12
    2100:	df000215 	stw	fp,8(sp)
    2104:	df000204 	addi	fp,sp,8
    2108:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
    210c:	e03ffe15 	stw	zero,-8(fp)
    2110:	00000e06 	br	214c <alt_tse_get_mac_group_index+0x50>
        if(pmac_group == pmac_groups[i]) {
    2114:	00800174 	movhi	r2,5
    2118:	10999704 	addi	r2,r2,26204
    211c:	e0fffe17 	ldw	r3,-8(fp)
    2120:	18c7883a 	add	r3,r3,r3
    2124:	18c7883a 	add	r3,r3,r3
    2128:	10c5883a 	add	r2,r2,r3
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	e0bfff17 	ldw	r2,-4(fp)
    2134:	1880021e 	bne	r3,r2,2140 <alt_tse_get_mac_group_index+0x44>
            return i;
    2138:	e0bffe17 	ldw	r2,-8(fp)
    213c:	00000806 	br	2160 <alt_tse_get_mac_group_index+0x64>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
    2140:	e0bffe17 	ldw	r2,-8(fp)
    2144:	10800044 	addi	r2,r2,1
    2148:	e0bffe15 	stw	r2,-8(fp)
    214c:	d0a84283 	ldbu	r2,-24310(gp)
    2150:	10803fcc 	andi	r2,r2,255
    2154:	e0fffe17 	ldw	r3,-8(fp)
    2158:	18bfee16 	blt	r3,r2,2114 <__alt_mem_descriptor_memory+0xdefc2114>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
    215c:	00bfffc4 	movi	r2,-1
}
    2160:	e037883a 	mov	sp,fp
    2164:	df000017 	ldw	fp,0(sp)
    2168:	dec00104 	addi	sp,sp,4
    216c:	f800283a 	ret

00002170 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
    2170:	defffd04 	addi	sp,sp,-12
    2174:	df000215 	stw	fp,8(sp)
    2178:	df000204 	addi	fp,sp,8
    217c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
    2180:	e03ffe15 	stw	zero,-8(fp)
    2184:	00000f06 	br	21c4 <alt_tse_get_mac_info_index+0x54>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
    2188:	e0bfff17 	ldw	r2,-4(fp)
    218c:	10c00317 	ldw	r3,12(r2)
    2190:	e0bffe17 	ldw	r2,-8(fp)
    2194:	10800044 	addi	r2,r2,1
    2198:	1085883a 	add	r2,r2,r2
    219c:	1085883a 	add	r2,r2,r2
    21a0:	1885883a 	add	r2,r3,r2
    21a4:	10c00017 	ldw	r3,0(r2)
    21a8:	e0bfff17 	ldw	r2,-4(fp)
    21ac:	1880021e 	bne	r3,r2,21b8 <alt_tse_get_mac_info_index+0x48>
            return i;
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	00000a06 	br	21e0 <alt_tse_get_mac_info_index+0x70>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
    21b8:	e0bffe17 	ldw	r2,-8(fp)
    21bc:	10800044 	addi	r2,r2,1
    21c0:	e0bffe15 	stw	r2,-8(fp)
    21c4:	e0bfff17 	ldw	r2,-4(fp)
    21c8:	10800317 	ldw	r2,12(r2)
    21cc:	10800003 	ldbu	r2,0(r2)
    21d0:	10803fcc 	andi	r2,r2,255
    21d4:	e0fffe17 	ldw	r3,-8(fp)
    21d8:	18bfeb16 	blt	r3,r2,2188 <__alt_mem_descriptor_memory+0xdefc2188>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
    21dc:	00bfffc4 	movi	r2,-1
}
    21e0:	e037883a 	mov	sp,fp
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00104 	addi	sp,sp,4
    21ec:	f800283a 	ret

000021f0 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
    21f0:	defffa04 	addi	sp,sp,-24
    21f4:	df000515 	stw	fp,20(sp)
    21f8:	df000504 	addi	fp,sp,20
    21fc:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    2200:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
    2204:	e03ffe15 	stw	zero,-8(fp)
    
    for(i = 0; i < mac_group_count; i++) {
    2208:	e03ffb15 	stw	zero,-20(fp)
    220c:	00002506 	br	22a4 <alt_tse_get_mac_info+0xb4>
        pmac_group = pmac_groups[i];
    2210:	00800174 	movhi	r2,5
    2214:	10999704 	addi	r2,r2,26204
    2218:	e0fffb17 	ldw	r3,-20(fp)
    221c:	18c7883a 	add	r3,r3,r3
    2220:	18c7883a 	add	r3,r3,r3
    2224:	10c5883a 	add	r2,r2,r3
    2228:	10800017 	ldw	r2,0(r2)
    222c:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
    2230:	e03ffc15 	stw	zero,-16(fp)
    2234:	00001306 	br	2284 <alt_tse_get_mac_info+0x94>
            pmac_info = pmac_group->pmac_info[j];
    2238:	e0fffd17 	ldw	r3,-12(fp)
    223c:	e0bffc17 	ldw	r2,-16(fp)
    2240:	10800044 	addi	r2,r2,1
    2244:	1085883a 	add	r2,r2,r2
    2248:	1085883a 	add	r2,r2,r2
    224c:	1885883a 	add	r2,r3,r2
    2250:	10800017 	ldw	r2,0(r2)
    2254:	e0bffe15 	stw	r2,-8(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
    2258:	e0bffe17 	ldw	r2,-8(fp)
    225c:	10800217 	ldw	r2,8(r2)
    2260:	10800017 	ldw	r2,0(r2)
    2264:	1007883a 	mov	r3,r2
    2268:	e0bfff17 	ldw	r2,-4(fp)
    226c:	1880021e 	bne	r3,r2,2278 <alt_tse_get_mac_info+0x88>
                return pmac_info;
    2270:	e0bffe17 	ldw	r2,-8(fp)
    2274:	00001006 	br	22b8 <alt_tse_get_mac_info+0xc8>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	10800044 	addi	r2,r2,1
    2280:	e0bffc15 	stw	r2,-16(fp)
    2284:	e0bffd17 	ldw	r2,-12(fp)
    2288:	10800003 	ldbu	r2,0(r2)
    228c:	10803fcc 	andi	r2,r2,255
    2290:	e0fffc17 	ldw	r3,-16(fp)
    2294:	18bfe816 	blt	r3,r2,2238 <__alt_mem_descriptor_memory+0xdefc2238>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
    2298:	e0bffb17 	ldw	r2,-20(fp)
    229c:	10800044 	addi	r2,r2,1
    22a0:	e0bffb15 	stw	r2,-20(fp)
    22a4:	d0a84283 	ldbu	r2,-24310(gp)
    22a8:	10803fcc 	andi	r2,r2,255
    22ac:	e0fffb17 	ldw	r3,-20(fp)
    22b0:	18bfd716 	blt	r3,r2,2210 <__alt_mem_descriptor_memory+0xdefc2210>
                return pmac_info;
            }
        }        
    }
    
    return 0;
    22b4:	0005883a 	mov	r2,zero
}
    22b8:	e037883a 	mov	sp,fp
    22bc:	df000017 	ldw	fp,0(sp)
    22c0:	dec00104 	addi	sp,sp,4
    22c4:	f800283a 	ret

000022c8 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
    22c8:	defffc04 	addi	sp,sp,-16
    22cc:	df000315 	stw	fp,12(sp)
    22d0:	df000304 	addi	fp,sp,12
    22d4:	e13ffe15 	stw	r4,-8(fp)
    22d8:	2805883a 	mov	r2,r5
    22dc:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
    22e0:	e0bffe17 	ldw	r2,-8(fp)
    22e4:	10800204 	addi	r2,r2,8
    22e8:	10800037 	ldwio	r2,0(r2)
    22ec:	e0bffd15 	stw	r2,-12(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
    22f0:	e0bfff03 	ldbu	r2,-4(fp)
    22f4:	10800098 	cmpnei	r2,r2,2
    22f8:	1000091e 	bne	r2,zero,2320 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    22fc:	e0bffd17 	ldw	r2,-12(fp)
    2300:	10800214 	ori	r2,r2,8
    2304:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
    2308:	e0fffd17 	ldw	r3,-12(fp)
    230c:	00bf8034 	movhi	r2,65024
    2310:	10bfffc4 	addi	r2,r2,-1
    2314:	1884703a 	and	r2,r3,r2
    2318:	e0bffd15 	stw	r2,-12(fp)
    231c:	00001906 	br	2384 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
    2320:	e0bfff03 	ldbu	r2,-4(fp)
    2324:	10800058 	cmpnei	r2,r2,1
    2328:	10000a1e 	bne	r2,zero,2354 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    232c:	e0fffd17 	ldw	r3,-12(fp)
    2330:	00bffdc4 	movi	r2,-9
    2334:	1884703a 	and	r2,r3,r2
    2338:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
    233c:	e0fffd17 	ldw	r3,-12(fp)
    2340:	00bf8034 	movhi	r2,65024
    2344:	10bfffc4 	addi	r2,r2,-1
    2348:	1884703a 	and	r2,r3,r2
    234c:	e0bffd15 	stw	r2,-12(fp)
    2350:	00000c06 	br	2384 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
    2354:	e0bfff03 	ldbu	r2,-4(fp)
    2358:	1000081e 	bne	r2,zero,237c <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    235c:	e0fffd17 	ldw	r3,-12(fp)
    2360:	00bffdc4 	movi	r2,-9
    2364:	1884703a 	and	r2,r3,r2
    2368:	e0bffd15 	stw	r2,-12(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
    236c:	e0bffd17 	ldw	r2,-12(fp)
    2370:	10808034 	orhi	r2,r2,512
    2374:	e0bffd15 	stw	r2,-12(fp)
    2378:	00000206 	br	2384 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
    237c:	00bffd84 	movi	r2,-10
    2380:	00000506 	br	2398 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
    2384:	e0bffe17 	ldw	r2,-8(fp)
    2388:	10800204 	addi	r2,r2,8
    238c:	e0fffd17 	ldw	r3,-12(fp)
    2390:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
    2394:	0005883a 	mov	r2,zero
}
    2398:	e037883a 	mov	sp,fp
    239c:	df000017 	ldw	fp,0(sp)
    23a0:	dec00104 	addi	sp,sp,4
    23a4:	f800283a 	ret

000023a8 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
    23a8:	defffc04 	addi	sp,sp,-16
    23ac:	df000315 	stw	fp,12(sp)
    23b0:	df000304 	addi	fp,sp,12
    23b4:	e13ffe15 	stw	r4,-8(fp)
    23b8:	2805883a 	mov	r2,r5
    23bc:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	10800204 	addi	r2,r2,8
    23c8:	10800037 	ldwio	r2,0(r2)
    23cc:	e0bffd15 	stw	r2,-12(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
    23d0:	e0bfff03 	ldbu	r2,-4(fp)
    23d4:	1000041e 	bne	r2,zero,23e8 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
    23d8:	e0bffd17 	ldw	r2,-12(fp)
    23dc:	10810014 	ori	r2,r2,1024
    23e0:	e0bffd15 	stw	r2,-12(fp)
    23e4:	00000a06 	br	2410 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
    23e8:	e0bfff03 	ldbu	r2,-4(fp)
    23ec:	10800058 	cmpnei	r2,r2,1
    23f0:	1000051e 	bne	r2,zero,2408 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
    23f4:	e0fffd17 	ldw	r3,-12(fp)
    23f8:	00beffc4 	movi	r2,-1025
    23fc:	1884703a 	and	r2,r3,r2
    2400:	e0bffd15 	stw	r2,-12(fp)
    2404:	00000206 	br	2410 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
    2408:	00bffd84 	movi	r2,-10
    240c:	00000506 	br	2424 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
    2410:	e0bffe17 	ldw	r2,-8(fp)
    2414:	10800204 	addi	r2,r2,8
    2418:	e0fffd17 	ldw	r3,-12(fp)
    241c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
    2420:	0005883a 	mov	r2,zero

}
    2424:	e037883a 	mov	sp,fp
    2428:	df000017 	ldw	fp,0(sp)
    242c:	dec00104 	addi	sp,sp,4
    2430:	f800283a 	ret

00002434 <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
    2434:	defff404 	addi	sp,sp,-48
    2438:	dfc00b15 	stw	ra,44(sp)
    243c:	df000a15 	stw	fp,40(sp)
    2440:	df000a04 	addi	fp,sp,40
    2444:	e13fff15 	stw	r4,-4(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2448:	00800044 	movi	r2,1
    244c:	e0bff705 	stb	r2,-36(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
    2450:	00800044 	movi	r2,1
    2454:	e0bff745 	stb	r2,-35(fp)
	alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
    2458:	e0bff743 	ldbu	r2,-35(fp)
    245c:	10c0004c 	andi	r3,r2,1
    2460:	e0bff703 	ldbu	r2,-36(fp)
    2464:	10800098 	cmpnei	r2,r2,2
    2468:	1000021e 	bne	r2,zero,2474 <getPHYSpeed+0x40>
    246c:	00800084 	movi	r2,2
    2470:	00000106 	br	2478 <getPHYSpeed+0x44>
    2474:	0005883a 	mov	r2,zero
    2478:	1886b03a 	or	r3,r3,r2
    247c:	e0bff703 	ldbu	r2,-36(fp)
    2480:	10800058 	cmpnei	r2,r2,1
    2484:	1000021e 	bne	r2,zero,2490 <getPHYSpeed+0x5c>
    2488:	00800104 	movi	r2,4
    248c:	00000106 	br	2494 <getPHYSpeed+0x60>
    2490:	0005883a 	mov	r2,zero
    2494:	1886b03a 	or	r3,r3,r2
    2498:	e0bff703 	ldbu	r2,-36(fp)
    249c:	1000021e 	bne	r2,zero,24a8 <getPHYSpeed+0x74>
    24a0:	00800204 	movi	r2,8
    24a4:	00000106 	br	24ac <getPHYSpeed+0x78>
    24a8:	0005883a 	mov	r2,zero
    24ac:	1886b03a 	or	r3,r3,r2
    24b0:	e0bff703 	ldbu	r2,-36(fp)
    24b4:	108000d8 	cmpnei	r2,r2,3
    24b8:	1000021e 	bne	r2,zero,24c4 <getPHYSpeed+0x90>
    24bc:	00800074 	movhi	r2,1
    24c0:	00000106 	br	24c8 <getPHYSpeed+0x94>
    24c4:	0005883a 	mov	r2,zero
    24c8:	1884b03a 	or	r2,r3,r2
    24cc:	e0bff815 	stw	r2,-32(fp)
    
    alt_tse_phy_info *pphy = 0;
    24d0:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
    24d4:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_group *pmac_group = 0;
    24d8:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
    24dc:	e03ffc15 	stw	zero,-16(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    24e0:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = 0;
    24e4:	e03ffd45 	stb	zero,-11(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
    24e8:	d0a84303 	ldbu	r2,-24308(gp)
    24ec:	10803fcc 	andi	r2,r2,255
    24f0:	1000031e 	bne	r2,zero,2500 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
    24f4:	000442c0 	call	442c <alt_tse_phy_init>
        is_init = 1;
    24f8:	00800044 	movi	r2,1
    24fc:	d0a84305 	stb	r2,-24308(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
    2500:	e13fff17 	ldw	r4,-4(fp)
    2504:	00021f00 	call	21f0 <alt_tse_get_mac_info>
    2508:	e0bffa15 	stw	r2,-24(fp)
    
    if(pmac_info == 0) {
    250c:	e0bffa17 	ldw	r2,-24(fp)
    2510:	1000481e 	bne	r2,zero,2634 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2514:	00800044 	movi	r2,1
    2518:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    251c:	00800044 	movi	r2,1
    2520:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
    2524:	e0bff743 	ldbu	r2,-35(fp)
    2528:	10c0004c 	andi	r3,r2,1
    252c:	e0bff703 	ldbu	r2,-36(fp)
    2530:	10800098 	cmpnei	r2,r2,2
    2534:	1000021e 	bne	r2,zero,2540 <getPHYSpeed+0x10c>
    2538:	00800084 	movi	r2,2
    253c:	00000106 	br	2544 <getPHYSpeed+0x110>
    2540:	0005883a 	mov	r2,zero
    2544:	1886b03a 	or	r3,r3,r2
    2548:	e0bff703 	ldbu	r2,-36(fp)
    254c:	10800058 	cmpnei	r2,r2,1
    2550:	1000021e 	bne	r2,zero,255c <getPHYSpeed+0x128>
    2554:	00800104 	movi	r2,4
    2558:	00000106 	br	2560 <getPHYSpeed+0x12c>
    255c:	0005883a 	mov	r2,zero
    2560:	1886b03a 	or	r3,r3,r2
    2564:	e0bff703 	ldbu	r2,-36(fp)
    2568:	1000021e 	bne	r2,zero,2574 <getPHYSpeed+0x140>
    256c:	00800204 	movi	r2,8
    2570:	00000106 	br	2578 <getPHYSpeed+0x144>
    2574:	0005883a 	mov	r2,zero
    2578:	1886b03a 	or	r3,r3,r2
    257c:	e0bff703 	ldbu	r2,-36(fp)
    2580:	108000d8 	cmpnei	r2,r2,3
    2584:	1000021e 	bne	r2,zero,2590 <getPHYSpeed+0x15c>
    2588:	00800074 	movhi	r2,1
    258c:	00000106 	br	2594 <getPHYSpeed+0x160>
    2590:	0005883a 	mov	r2,zero
    2594:	1884b03a 	or	r2,r3,r2
    2598:	10802034 	orhi	r2,r2,128
    259c:	e0bff815 	stw	r2,-32(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
    25a0:	e0bff703 	ldbu	r2,-36(fp)
    25a4:	108000a0 	cmpeqi	r2,r2,2
    25a8:	10000e1e 	bne	r2,zero,25e4 <getPHYSpeed+0x1b0>
    25ac:	e0bff703 	ldbu	r2,-36(fp)
    25b0:	10800060 	cmpeqi	r2,r2,1
    25b4:	1000081e 	bne	r2,zero,25d8 <getPHYSpeed+0x1a4>
    25b8:	e0bff703 	ldbu	r2,-36(fp)
    25bc:	1000031e 	bne	r2,zero,25cc <getPHYSpeed+0x198>
    25c0:	00800174 	movhi	r2,5
    25c4:	10ac4104 	addi	r2,r2,-20220
    25c8:	00000806 	br	25ec <getPHYSpeed+0x1b8>
    25cc:	00800174 	movhi	r2,5
    25d0:	10ac4204 	addi	r2,r2,-20216
    25d4:	00000506 	br	25ec <getPHYSpeed+0x1b8>
    25d8:	00800174 	movhi	r2,5
    25dc:	10ac4404 	addi	r2,r2,-20208
    25e0:	00000206 	br	25ec <getPHYSpeed+0x1b8>
    25e4:	00800174 	movhi	r2,5
    25e8:	10ac4504 	addi	r2,r2,-20204
    25ec:	e0fff743 	ldbu	r3,-35(fp)
    25f0:	18c00058 	cmpnei	r3,r3,1
    25f4:	1800031e 	bne	r3,zero,2604 <getPHYSpeed+0x1d0>
    25f8:	00c00174 	movhi	r3,5
    25fc:	18ec4704 	addi	r3,r3,-20196
    2600:	00000206 	br	260c <getPHYSpeed+0x1d8>
    2604:	00c00174 	movhi	r3,5
    2608:	18ec4904 	addi	r3,r3,-20188
    260c:	01000174 	movhi	r4,5
    2610:	212c4b04 	addi	r4,r4,-20180
    2614:	100b883a 	mov	r5,r2
    2618:	180d883a 	mov	r6,r3
    261c:	00080f80 	call	80f8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
    2620:	01000174 	movhi	r4,5
    2624:	212c6304 	addi	r4,r4,-20084
    2628:	00083740 	call	8374 <puts>
        return result;
    262c:	e0bff817 	ldw	r2,-32(fp)
    2630:	00021606 	br	2e8c <getPHYSpeed+0xa58>
    }
    
    pphy = pmac_info->pphy_info;
    2634:	e0bffa17 	ldw	r2,-24(fp)
    2638:	10800117 	ldw	r2,4(r2)
    263c:	e0bff915 	stw	r2,-28(fp)
    pmac_group = pmac_info->pmac_group;
    2640:	e0bffa17 	ldw	r2,-24(fp)
    2644:	10800317 	ldw	r2,12(r2)
    2648:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
    264c:	e0bffa17 	ldw	r2,-24(fp)
    2650:	10800217 	ldw	r2,8(r2)
    2654:	e0bffc15 	stw	r2,-16(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    2658:	e13ffa17 	ldw	r4,-24(fp)
    265c:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    2660:	e0bffd05 	stb	r2,-12(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    2664:	e13ffb17 	ldw	r4,-20(fp)
    2668:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    266c:	e0bffd45 	stb	r2,-11(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
    2670:	e0bffb17 	ldw	r2,-20(fp)
    2674:	10800117 	ldw	r2,4(r2)
    2678:	10800217 	ldw	r2,8(r2)
    267c:	10800203 	ldbu	r2,8(r2)
    2680:	10803fcc 	andi	r2,r2,255
    2684:	1000591e 	bne	r2,zero,27ec <getPHYSpeed+0x3b8>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2688:	00800044 	movi	r2,1
    268c:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    2690:	00800044 	movi	r2,1
    2694:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
    2698:	e0bff743 	ldbu	r2,-35(fp)
    269c:	10c0004c 	andi	r3,r2,1
    26a0:	e0bff703 	ldbu	r2,-36(fp)
    26a4:	10800098 	cmpnei	r2,r2,2
    26a8:	1000021e 	bne	r2,zero,26b4 <getPHYSpeed+0x280>
    26ac:	00800084 	movi	r2,2
    26b0:	00000106 	br	26b8 <getPHYSpeed+0x284>
    26b4:	0005883a 	mov	r2,zero
    26b8:	1886b03a 	or	r3,r3,r2
    26bc:	e0bff703 	ldbu	r2,-36(fp)
    26c0:	10800058 	cmpnei	r2,r2,1
    26c4:	1000021e 	bne	r2,zero,26d0 <getPHYSpeed+0x29c>
    26c8:	00800104 	movi	r2,4
    26cc:	00000106 	br	26d4 <getPHYSpeed+0x2a0>
    26d0:	0005883a 	mov	r2,zero
    26d4:	1886b03a 	or	r3,r3,r2
    26d8:	e0bff703 	ldbu	r2,-36(fp)
    26dc:	1000021e 	bne	r2,zero,26e8 <getPHYSpeed+0x2b4>
    26e0:	00800204 	movi	r2,8
    26e4:	00000106 	br	26ec <getPHYSpeed+0x2b8>
    26e8:	0005883a 	mov	r2,zero
    26ec:	1886b03a 	or	r3,r3,r2
    26f0:	e0bff703 	ldbu	r2,-36(fp)
    26f4:	108000d8 	cmpnei	r2,r2,3
    26f8:	1000021e 	bne	r2,zero,2704 <getPHYSpeed+0x2d0>
    26fc:	00800074 	movhi	r2,1
    2700:	00000106 	br	2708 <getPHYSpeed+0x2d4>
    2704:	0005883a 	mov	r2,zero
    2708:	1884b03a 	or	r2,r3,r2
    270c:	10801034 	orhi	r2,r2,64
    2710:	e0bff815 	stw	r2,-32(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
    2714:	010003f4 	movhi	r4,15
    2718:	21109004 	addi	r4,r4,16960
    271c:	0017de00 	call	17de0 <usleep>
        if(psys->tse_phy_cfg) {
    2720:	e0bffc17 	ldw	r2,-16(fp)
    2724:	10801117 	ldw	r2,68(r2)
    2728:	10000d26 	beq	r2,zero,2760 <getPHYSpeed+0x32c>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
    272c:	e0fffd47 	ldb	r3,-11(fp)
    2730:	e0bffd07 	ldb	r2,-12(fp)
    2734:	01000174 	movhi	r4,5
    2738:	212c7404 	addi	r4,r4,-20016
    273c:	180b883a 	mov	r5,r3
    2740:	100d883a 	mov	r6,r2
    2744:	00080f80 	call	80f8 <printf>
        	result = psys->tse_phy_cfg(pmac);
    2748:	e0bffc17 	ldw	r2,-16(fp)
    274c:	10801117 	ldw	r2,68(r2)
    2750:	e13fff17 	ldw	r4,-4(fp)
    2754:	103ee83a 	callr	r2
    2758:	e0bff815 	stw	r2,-32(fp)
    275c:	00002106 	br	27e4 <getPHYSpeed+0x3b0>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
    2760:	e17ffd47 	ldb	r5,-11(fp)
    2764:	e0bff703 	ldbu	r2,-36(fp)
    2768:	108000a0 	cmpeqi	r2,r2,2
    276c:	10000e1e 	bne	r2,zero,27a8 <getPHYSpeed+0x374>
    2770:	e0bff703 	ldbu	r2,-36(fp)
    2774:	10800060 	cmpeqi	r2,r2,1
    2778:	1000081e 	bne	r2,zero,279c <getPHYSpeed+0x368>
    277c:	e0bff703 	ldbu	r2,-36(fp)
    2780:	1000031e 	bne	r2,zero,2790 <getPHYSpeed+0x35c>
    2784:	00800174 	movhi	r2,5
    2788:	10ac4104 	addi	r2,r2,-20220
    278c:	00000806 	br	27b0 <getPHYSpeed+0x37c>
    2790:	00800174 	movhi	r2,5
    2794:	10ac4204 	addi	r2,r2,-20216
    2798:	00000506 	br	27b0 <getPHYSpeed+0x37c>
    279c:	00800174 	movhi	r2,5
    27a0:	10ac4404 	addi	r2,r2,-20208
    27a4:	00000206 	br	27b0 <getPHYSpeed+0x37c>
    27a8:	00800174 	movhi	r2,5
    27ac:	10ac4504 	addi	r2,r2,-20204
    27b0:	e0fff743 	ldbu	r3,-35(fp)
    27b4:	18c00058 	cmpnei	r3,r3,1
    27b8:	1800031e 	bne	r3,zero,27c8 <getPHYSpeed+0x394>
    27bc:	00c00174 	movhi	r3,5
    27c0:	18ec4704 	addi	r3,r3,-20196
    27c4:	00000206 	br	27d0 <getPHYSpeed+0x39c>
    27c8:	00c00174 	movhi	r3,5
    27cc:	18ec4904 	addi	r3,r3,-20188
    27d0:	01000174 	movhi	r4,5
    27d4:	212c8604 	addi	r4,r4,-19944
    27d8:	100d883a 	mov	r6,r2
    27dc:	180f883a 	mov	r7,r3
    27e0:	00080f80 	call	80f8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
    27e4:	e0bff817 	ldw	r2,-32(fp)
    27e8:	0001a806 	br	2e8c <getPHYSpeed+0xa58>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    27ec:	e0bffb17 	ldw	r2,-20(fp)
    27f0:	10800117 	ldw	r2,4(r2)
    27f4:	10800217 	ldw	r2,8(r2)
    27f8:	10800017 	ldw	r2,0(r2)
    27fc:	e0bffe15 	stw	r2,-8(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
    2800:	e0bff917 	ldw	r2,-28(fp)
    2804:	1000471e 	bne	r2,zero,2924 <getPHYSpeed+0x4f0>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2808:	00800044 	movi	r2,1
    280c:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    2810:	00800044 	movi	r2,1
    2814:	e0bff745 	stb	r2,-35(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
    2818:	e0bff743 	ldbu	r2,-35(fp)
    281c:	10c0004c 	andi	r3,r2,1
    2820:	e0bff703 	ldbu	r2,-36(fp)
    2824:	10800098 	cmpnei	r2,r2,2
    2828:	1000021e 	bne	r2,zero,2834 <getPHYSpeed+0x400>
    282c:	00800084 	movi	r2,2
    2830:	00000106 	br	2838 <getPHYSpeed+0x404>
    2834:	0005883a 	mov	r2,zero
    2838:	1886b03a 	or	r3,r3,r2
    283c:	e0bff703 	ldbu	r2,-36(fp)
    2840:	10800058 	cmpnei	r2,r2,1
    2844:	1000021e 	bne	r2,zero,2850 <getPHYSpeed+0x41c>
    2848:	00800104 	movi	r2,4
    284c:	00000106 	br	2854 <getPHYSpeed+0x420>
    2850:	0005883a 	mov	r2,zero
    2854:	1886b03a 	or	r3,r3,r2
    2858:	e0bff703 	ldbu	r2,-36(fp)
    285c:	1000021e 	bne	r2,zero,2868 <getPHYSpeed+0x434>
    2860:	00800204 	movi	r2,8
    2864:	00000106 	br	286c <getPHYSpeed+0x438>
    2868:	0005883a 	mov	r2,zero
    286c:	1886b03a 	or	r3,r3,r2
    2870:	e0bff703 	ldbu	r2,-36(fp)
    2874:	108000d8 	cmpnei	r2,r2,3
    2878:	1000021e 	bne	r2,zero,2884 <getPHYSpeed+0x450>
    287c:	00800074 	movhi	r2,1
    2880:	00000106 	br	2888 <getPHYSpeed+0x454>
    2884:	0005883a 	mov	r2,zero
    2888:	1884b03a 	or	r2,r3,r2
    288c:	10800834 	orhi	r2,r2,32
    2890:	e0bff815 	stw	r2,-32(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
    2894:	e17ffd47 	ldb	r5,-11(fp)
    2898:	e1bffd07 	ldb	r6,-12(fp)
    289c:	e0bff703 	ldbu	r2,-36(fp)
    28a0:	108000a0 	cmpeqi	r2,r2,2
    28a4:	10000e1e 	bne	r2,zero,28e0 <getPHYSpeed+0x4ac>
    28a8:	e0bff703 	ldbu	r2,-36(fp)
    28ac:	10800060 	cmpeqi	r2,r2,1
    28b0:	1000081e 	bne	r2,zero,28d4 <getPHYSpeed+0x4a0>
    28b4:	e0bff703 	ldbu	r2,-36(fp)
    28b8:	1000031e 	bne	r2,zero,28c8 <getPHYSpeed+0x494>
    28bc:	00800174 	movhi	r2,5
    28c0:	10ac4104 	addi	r2,r2,-20220
    28c4:	00000806 	br	28e8 <getPHYSpeed+0x4b4>
    28c8:	00800174 	movhi	r2,5
    28cc:	10ac4204 	addi	r2,r2,-20216
    28d0:	00000506 	br	28e8 <getPHYSpeed+0x4b4>
    28d4:	00800174 	movhi	r2,5
    28d8:	10ac4404 	addi	r2,r2,-20208
    28dc:	00000206 	br	28e8 <getPHYSpeed+0x4b4>
    28e0:	00800174 	movhi	r2,5
    28e4:	10ac4504 	addi	r2,r2,-20204
    28e8:	e0fff743 	ldbu	r3,-35(fp)
    28ec:	18c00058 	cmpnei	r3,r3,1
    28f0:	1800031e 	bne	r3,zero,2900 <getPHYSpeed+0x4cc>
    28f4:	00c00174 	movhi	r3,5
    28f8:	18ec4704 	addi	r3,r3,-20196
    28fc:	00000206 	br	2908 <getPHYSpeed+0x4d4>
    2900:	00c00174 	movhi	r3,5
    2904:	18ec4904 	addi	r3,r3,-20188
    2908:	d8c00015 	stw	r3,0(sp)
    290c:	01000174 	movhi	r4,5
    2910:	212c9804 	addi	r4,r4,-19872
    2914:	100f883a 	mov	r7,r2
    2918:	00080f80 	call	80f8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
    291c:	e0bff817 	ldw	r2,-32(fp)
    2920:	00015a06 	br	2e8c <getPHYSpeed+0xa58>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
    2924:	e0bffa17 	ldw	r2,-24(fp)
    2928:	10800003 	ldbu	r2,0(r2)
    292c:	10803fcc 	andi	r2,r2,255
    2930:	10800058 	cmpnei	r2,r2,1
    2934:	1000081e 	bne	r2,zero,2958 <getPHYSpeed+0x524>
			alt_tse_phy_set_adv_1000(pphy, 0);
    2938:	e13ff917 	ldw	r4,-28(fp)
    293c:	000b883a 	mov	r5,zero
    2940:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    2944:	e13ff917 	ldw	r4,-28(fp)
    2948:	01400134 	movhi	r5,4
    294c:	29742404 	addi	r5,r5,-12144
    2950:	00045440 	call	4544 <alt_tse_phy_restart_an>
    2954:	00000f06 	br	2994 <getPHYSpeed+0x560>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
    2958:	e0bffa17 	ldw	r2,-24(fp)
    295c:	10800003 	ldbu	r2,0(r2)
    2960:	10803fcc 	andi	r2,r2,255
    2964:	10800098 	cmpnei	r2,r2,2
    2968:	10000a1e 	bne	r2,zero,2994 <getPHYSpeed+0x560>
			alt_tse_phy_set_adv_100(pphy, 0);
    296c:	e13ff917 	ldw	r4,-28(fp)
    2970:	000b883a 	mov	r5,zero
    2974:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
    2978:	e13ff917 	ldw	r4,-28(fp)
    297c:	000b883a 	mov	r5,zero
    2980:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    2984:	e13ff917 	ldw	r4,-28(fp)
    2988:	01400134 	movhi	r5,4
    298c:	29742404 	addi	r5,r5,-12144
    2990:	00045440 	call	4544 <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
    2994:	e13ff917 	ldw	r4,-28(fp)
    2998:	01400134 	movhi	r5,4
    299c:	29742404 	addi	r5,r5,-12144
    29a0:	00047000 	call	4700 <alt_tse_phy_check_link>
    29a4:	10bfffd8 	cmpnei	r2,r2,-1
    29a8:	1000471e 	bne	r2,zero,2ac8 <getPHYSpeed+0x694>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    29ac:	00800044 	movi	r2,1
    29b0:	e0bff705 	stb	r2,-36(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    29b4:	00800044 	movi	r2,1
    29b8:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
    29bc:	e0bff743 	ldbu	r2,-35(fp)
    29c0:	10c0004c 	andi	r3,r2,1
    29c4:	e0bff703 	ldbu	r2,-36(fp)
    29c8:	10800098 	cmpnei	r2,r2,2
    29cc:	1000021e 	bne	r2,zero,29d8 <getPHYSpeed+0x5a4>
    29d0:	00800084 	movi	r2,2
    29d4:	00000106 	br	29dc <getPHYSpeed+0x5a8>
    29d8:	0005883a 	mov	r2,zero
    29dc:	1886b03a 	or	r3,r3,r2
    29e0:	e0bff703 	ldbu	r2,-36(fp)
    29e4:	10800058 	cmpnei	r2,r2,1
    29e8:	1000021e 	bne	r2,zero,29f4 <getPHYSpeed+0x5c0>
    29ec:	00800104 	movi	r2,4
    29f0:	00000106 	br	29f8 <getPHYSpeed+0x5c4>
    29f4:	0005883a 	mov	r2,zero
    29f8:	1886b03a 	or	r3,r3,r2
    29fc:	e0bff703 	ldbu	r2,-36(fp)
    2a00:	1000021e 	bne	r2,zero,2a0c <getPHYSpeed+0x5d8>
    2a04:	00800204 	movi	r2,8
    2a08:	00000106 	br	2a10 <getPHYSpeed+0x5dc>
    2a0c:	0005883a 	mov	r2,zero
    2a10:	1886b03a 	or	r3,r3,r2
    2a14:	e0bff703 	ldbu	r2,-36(fp)
    2a18:	108000d8 	cmpnei	r2,r2,3
    2a1c:	1000021e 	bne	r2,zero,2a28 <getPHYSpeed+0x5f4>
    2a20:	00800074 	movhi	r2,1
    2a24:	00000106 	br	2a2c <getPHYSpeed+0x5f8>
    2a28:	0005883a 	mov	r2,zero
    2a2c:	1884b03a 	or	r2,r3,r2
    2a30:	10800234 	orhi	r2,r2,8
    2a34:	e0bff815 	stw	r2,-32(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
    2a38:	e17ffd47 	ldb	r5,-11(fp)
    2a3c:	e1bffd07 	ldb	r6,-12(fp)
    2a40:	e0bff703 	ldbu	r2,-36(fp)
    2a44:	108000a0 	cmpeqi	r2,r2,2
    2a48:	10000e1e 	bne	r2,zero,2a84 <getPHYSpeed+0x650>
    2a4c:	e0bff703 	ldbu	r2,-36(fp)
    2a50:	10800060 	cmpeqi	r2,r2,1
    2a54:	1000081e 	bne	r2,zero,2a78 <getPHYSpeed+0x644>
    2a58:	e0bff703 	ldbu	r2,-36(fp)
    2a5c:	1000031e 	bne	r2,zero,2a6c <getPHYSpeed+0x638>
    2a60:	00800174 	movhi	r2,5
    2a64:	10ac4104 	addi	r2,r2,-20220
    2a68:	00000806 	br	2a8c <getPHYSpeed+0x658>
    2a6c:	00800174 	movhi	r2,5
    2a70:	10ac4204 	addi	r2,r2,-20216
    2a74:	00000506 	br	2a8c <getPHYSpeed+0x658>
    2a78:	00800174 	movhi	r2,5
    2a7c:	10ac4404 	addi	r2,r2,-20208
    2a80:	00000206 	br	2a8c <getPHYSpeed+0x658>
    2a84:	00800174 	movhi	r2,5
    2a88:	10ac4504 	addi	r2,r2,-20204
    2a8c:	e0fff743 	ldbu	r3,-35(fp)
    2a90:	18c00058 	cmpnei	r3,r3,1
    2a94:	1800031e 	bne	r3,zero,2aa4 <getPHYSpeed+0x670>
    2a98:	00c00174 	movhi	r3,5
    2a9c:	18ec4704 	addi	r3,r3,-20196
    2aa0:	00000206 	br	2aac <getPHYSpeed+0x678>
    2aa4:	00c00174 	movhi	r3,5
    2aa8:	18ec4904 	addi	r3,r3,-20188
    2aac:	d8c00015 	stw	r3,0(sp)
    2ab0:	01000174 	movhi	r4,5
    2ab4:	212ca904 	addi	r4,r4,-19804
    2ab8:	100f883a 	mov	r7,r2
    2abc:	00080f80 	call	80f8 <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
    2ac0:	e0bff817 	ldw	r2,-32(fp)
    2ac4:	0000f106 	br	2e8c <getPHYSpeed+0xa58>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
    2ac8:	e0bffe17 	ldw	r2,-8(fp)
    2acc:	10801004 	addi	r2,r2,64
    2ad0:	e0fff917 	ldw	r3,-28(fp)
    2ad4:	18c00003 	ldbu	r3,0(r3)
    2ad8:	18c03fcc 	andi	r3,r3,255
    2adc:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
    2ae0:	d8000015 	stw	zero,0(sp)
    2ae4:	e13ff917 	ldw	r4,-28(fp)
    2ae8:	000b883a 	mov	r5,zero
    2aec:	01800384 	movi	r6,14
    2af0:	01c00044 	movi	r7,1
    2af4:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
    2af8:	e0bff917 	ldw	r2,-28(fp)
    2afc:	10800517 	ldw	r2,20(r2)
    2b00:	10002b1e 	bne	r2,zero,2bb0 <getPHYSpeed+0x77c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
    2b04:	e0fffd47 	ldb	r3,-11(fp)
    2b08:	e0bffd07 	ldb	r2,-12(fp)
    2b0c:	01000174 	movhi	r4,5
    2b10:	212cbd04 	addi	r4,r4,-19724
    2b14:	180b883a 	mov	r5,r3
    2b18:	100d883a 	mov	r6,r2
    2b1c:	00080f80 	call	80f8 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2b20:	00800044 	movi	r2,1
    2b24:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    2b28:	00800044 	movi	r2,1
    2b2c:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
    2b30:	e0bff743 	ldbu	r2,-35(fp)
    2b34:	10c0004c 	andi	r3,r2,1
    2b38:	e0bff703 	ldbu	r2,-36(fp)
    2b3c:	10800098 	cmpnei	r2,r2,2
    2b40:	1000021e 	bne	r2,zero,2b4c <getPHYSpeed+0x718>
    2b44:	00800084 	movi	r2,2
    2b48:	00000106 	br	2b50 <getPHYSpeed+0x71c>
    2b4c:	0005883a 	mov	r2,zero
    2b50:	1886b03a 	or	r3,r3,r2
    2b54:	e0bff703 	ldbu	r2,-36(fp)
    2b58:	10800058 	cmpnei	r2,r2,1
    2b5c:	1000021e 	bne	r2,zero,2b68 <getPHYSpeed+0x734>
    2b60:	00800104 	movi	r2,4
    2b64:	00000106 	br	2b6c <getPHYSpeed+0x738>
    2b68:	0005883a 	mov	r2,zero
    2b6c:	1886b03a 	or	r3,r3,r2
    2b70:	e0bff703 	ldbu	r2,-36(fp)
    2b74:	1000021e 	bne	r2,zero,2b80 <getPHYSpeed+0x74c>
    2b78:	00800204 	movi	r2,8
    2b7c:	00000106 	br	2b84 <getPHYSpeed+0x750>
    2b80:	0005883a 	mov	r2,zero
    2b84:	1886b03a 	or	r3,r3,r2
    2b88:	e0bff703 	ldbu	r2,-36(fp)
    2b8c:	108000d8 	cmpnei	r2,r2,3
    2b90:	1000021e 	bne	r2,zero,2b9c <getPHYSpeed+0x768>
    2b94:	00800074 	movhi	r2,1
    2b98:	00000106 	br	2ba0 <getPHYSpeed+0x76c>
    2b9c:	0005883a 	mov	r2,zero
    2ba0:	1884b03a 	or	r2,r3,r2
    2ba4:	10800134 	orhi	r2,r2,4
    2ba8:	e0bff815 	stw	r2,-32(fp)
    2bac:	00009406 	br	2e00 <getPHYSpeed+0x9cc>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
    2bb0:	e0bff917 	ldw	r2,-28(fp)
    2bb4:	10800517 	ldw	r2,20(r2)
    2bb8:	10801817 	ldw	r2,96(r2)
    2bbc:	10002626 	beq	r2,zero,2c58 <getPHYSpeed+0x824>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
    2bc0:	e0bff917 	ldw	r2,-28(fp)
    2bc4:	10800517 	ldw	r2,20(r2)
    2bc8:	10801817 	ldw	r2,96(r2)
    2bcc:	e13ffe17 	ldw	r4,-8(fp)
    2bd0:	103ee83a 	callr	r2
    2bd4:	e0bff815 	stw	r2,-32(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
    2bd8:	e0bff817 	ldw	r2,-32(fp)
    2bdc:	1080008c 	andi	r2,r2,2
    2be0:	10000c1e 	bne	r2,zero,2c14 <getPHYSpeed+0x7e0>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
    2be4:	e0bff817 	ldw	r2,-32(fp)
    2be8:	1080010c 	andi	r2,r2,4
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
    2bec:	1000071e 	bne	r2,zero,2c0c <getPHYSpeed+0x7d8>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
    2bf0:	e0bff817 	ldw	r2,-32(fp)
    2bf4:	1080020c 	andi	r2,r2,8
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
    2bf8:	10000226 	beq	r2,zero,2c04 <getPHYSpeed+0x7d0>
    2bfc:	0005883a 	mov	r2,zero
    2c00:	00000506 	br	2c18 <getPHYSpeed+0x7e4>
    2c04:	008000c4 	movi	r2,3
    2c08:	00000306 	br	2c18 <getPHYSpeed+0x7e4>
    2c0c:	00800044 	movi	r2,1
    2c10:	00000106 	br	2c18 <getPHYSpeed+0x7e4>
    2c14:	00800084 	movi	r2,2
    2c18:	e0bff705 	stb	r2,-36(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
    2c1c:	e0bff817 	ldw	r2,-32(fp)
    2c20:	1080004c 	andi	r2,r2,1
    2c24:	1004c03a 	cmpne	r2,r2,zero
    2c28:	e0bff745 	stb	r2,-35(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
    2c2c:	e0bff817 	ldw	r2,-32(fp)
    2c30:	1080006c 	andhi	r2,r2,1
    2c34:	10007226 	beq	r2,zero,2e00 <getPHYSpeed+0x9cc>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
    2c38:	e0fffd47 	ldb	r3,-11(fp)
    2c3c:	e0bffd07 	ldb	r2,-12(fp)
    2c40:	01000174 	movhi	r4,5
    2c44:	212ccb04 	addi	r4,r4,-19668
    2c48:	180b883a 	mov	r5,r3
    2c4c:	100d883a 	mov	r6,r2
    2c50:	00080f80 	call	80f8 <printf>
    2c54:	00006a06 	br	2e00 <getPHYSpeed+0x9cc>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
    2c58:	e0bff917 	ldw	r2,-28(fp)
    2c5c:	10800517 	ldw	r2,20(r2)
    2c60:	10801583 	ldbu	r2,86(r2)
    2c64:	10803fcc 	andi	r2,r2,255
    2c68:	10002b1e 	bne	r2,zero,2d18 <getPHYSpeed+0x8e4>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
    2c6c:	e0fffd47 	ldb	r3,-11(fp)
    2c70:	e0bffd07 	ldb	r2,-12(fp)
    2c74:	01000174 	movhi	r4,5
    2c78:	212cd804 	addi	r4,r4,-19616
    2c7c:	180b883a 	mov	r5,r3
    2c80:	100d883a 	mov	r6,r2
    2c84:	00080f80 	call	80f8 <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
    2c88:	00800044 	movi	r2,1
    2c8c:	e0bff705 	stb	r2,-36(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
    2c90:	00800044 	movi	r2,1
    2c94:	e0bff745 	stb	r2,-35(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
    2c98:	e0bff743 	ldbu	r2,-35(fp)
    2c9c:	10c0004c 	andi	r3,r2,1
    2ca0:	e0bff703 	ldbu	r2,-36(fp)
    2ca4:	10800098 	cmpnei	r2,r2,2
    2ca8:	1000021e 	bne	r2,zero,2cb4 <getPHYSpeed+0x880>
    2cac:	00800084 	movi	r2,2
    2cb0:	00000106 	br	2cb8 <getPHYSpeed+0x884>
    2cb4:	0005883a 	mov	r2,zero
    2cb8:	1886b03a 	or	r3,r3,r2
    2cbc:	e0bff703 	ldbu	r2,-36(fp)
    2cc0:	10800058 	cmpnei	r2,r2,1
    2cc4:	1000021e 	bne	r2,zero,2cd0 <getPHYSpeed+0x89c>
    2cc8:	00800104 	movi	r2,4
    2ccc:	00000106 	br	2cd4 <getPHYSpeed+0x8a0>
    2cd0:	0005883a 	mov	r2,zero
    2cd4:	1886b03a 	or	r3,r3,r2
    2cd8:	e0bff703 	ldbu	r2,-36(fp)
    2cdc:	1000021e 	bne	r2,zero,2ce8 <getPHYSpeed+0x8b4>
    2ce0:	00800204 	movi	r2,8
    2ce4:	00000106 	br	2cec <getPHYSpeed+0x8b8>
    2ce8:	0005883a 	mov	r2,zero
    2cec:	1886b03a 	or	r3,r3,r2
    2cf0:	e0bff703 	ldbu	r2,-36(fp)
    2cf4:	108000d8 	cmpnei	r2,r2,3
    2cf8:	1000021e 	bne	r2,zero,2d04 <getPHYSpeed+0x8d0>
    2cfc:	00800074 	movhi	r2,1
    2d00:	00000106 	br	2d08 <getPHYSpeed+0x8d4>
    2d04:	0005883a 	mov	r2,zero
    2d08:	1884b03a 	or	r2,r3,r2
    2d0c:	108000b4 	orhi	r2,r2,2
    2d10:	e0bff815 	stw	r2,-32(fp)
    2d14:	00003a06 	br	2e00 <getPHYSpeed+0x9cc>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
    2d18:	e0bff917 	ldw	r2,-28(fp)
    2d1c:	10800517 	ldw	r2,20(r2)
    2d20:	10801583 	ldbu	r2,86(r2)
    2d24:	10c03fcc 	andi	r3,r2,255
    2d28:	e0bff917 	ldw	r2,-28(fp)
    2d2c:	10800517 	ldw	r2,20(r2)
    2d30:	108015c3 	ldbu	r2,87(r2)
    2d34:	10803fcc 	andi	r2,r2,255
    2d38:	e13ff917 	ldw	r4,-28(fp)
    2d3c:	180b883a 	mov	r5,r3
    2d40:	100d883a 	mov	r6,r2
    2d44:	01c00084 	movi	r7,2
    2d48:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    2d4c:	e0bff705 	stb	r2,-36(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
    2d50:	e0bff917 	ldw	r2,-28(fp)
    2d54:	10800517 	ldw	r2,20(r2)
    2d58:	10801583 	ldbu	r2,86(r2)
    2d5c:	10c03fcc 	andi	r3,r2,255
    2d60:	e0bff917 	ldw	r2,-28(fp)
    2d64:	10800517 	ldw	r2,20(r2)
    2d68:	10801603 	ldbu	r2,88(r2)
    2d6c:	10803fcc 	andi	r2,r2,255
    2d70:	e13ff917 	ldw	r4,-28(fp)
    2d74:	180b883a 	mov	r5,r3
    2d78:	100d883a 	mov	r6,r2
    2d7c:	01c00044 	movi	r7,1
    2d80:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    2d84:	e0bff745 	stb	r2,-35(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
    2d88:	e0bff743 	ldbu	r2,-35(fp)
    2d8c:	10c0004c 	andi	r3,r2,1
    2d90:	e0bff703 	ldbu	r2,-36(fp)
    2d94:	10800098 	cmpnei	r2,r2,2
    2d98:	1000021e 	bne	r2,zero,2da4 <getPHYSpeed+0x970>
    2d9c:	00800084 	movi	r2,2
    2da0:	00000106 	br	2da8 <getPHYSpeed+0x974>
    2da4:	0005883a 	mov	r2,zero
    2da8:	1886b03a 	or	r3,r3,r2
    2dac:	e0bff703 	ldbu	r2,-36(fp)
    2db0:	10800058 	cmpnei	r2,r2,1
    2db4:	1000021e 	bne	r2,zero,2dc0 <getPHYSpeed+0x98c>
    2db8:	00800104 	movi	r2,4
    2dbc:	00000106 	br	2dc4 <getPHYSpeed+0x990>
    2dc0:	0005883a 	mov	r2,zero
    2dc4:	1886b03a 	or	r3,r3,r2
    2dc8:	e0bff703 	ldbu	r2,-36(fp)
    2dcc:	1000021e 	bne	r2,zero,2dd8 <getPHYSpeed+0x9a4>
    2dd0:	00800204 	movi	r2,8
    2dd4:	00000106 	br	2ddc <getPHYSpeed+0x9a8>
    2dd8:	0005883a 	mov	r2,zero
    2ddc:	1886b03a 	or	r3,r3,r2
    2de0:	e0bff703 	ldbu	r2,-36(fp)
    2de4:	108000d8 	cmpnei	r2,r2,3
    2de8:	1000021e 	bne	r2,zero,2df4 <getPHYSpeed+0x9c0>
    2dec:	00800074 	movhi	r2,1
    2df0:	00000106 	br	2df8 <getPHYSpeed+0x9c4>
    2df4:	0005883a 	mov	r2,zero
    2df8:	1884b03a 	or	r2,r3,r2
    2dfc:	e0bff815 	stw	r2,-32(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
    2e00:	e17ffd47 	ldb	r5,-11(fp)
    2e04:	e1bffd07 	ldb	r6,-12(fp)
    2e08:	e0bff703 	ldbu	r2,-36(fp)
    2e0c:	108000a0 	cmpeqi	r2,r2,2
    2e10:	10000e1e 	bne	r2,zero,2e4c <getPHYSpeed+0xa18>
    2e14:	e0bff703 	ldbu	r2,-36(fp)
    2e18:	10800060 	cmpeqi	r2,r2,1
    2e1c:	1000081e 	bne	r2,zero,2e40 <getPHYSpeed+0xa0c>
    2e20:	e0bff703 	ldbu	r2,-36(fp)
    2e24:	1000031e 	bne	r2,zero,2e34 <getPHYSpeed+0xa00>
    2e28:	00800174 	movhi	r2,5
    2e2c:	10ac4104 	addi	r2,r2,-20220
    2e30:	00000806 	br	2e54 <getPHYSpeed+0xa20>
    2e34:	00800174 	movhi	r2,5
    2e38:	10ac4204 	addi	r2,r2,-20216
    2e3c:	00000506 	br	2e54 <getPHYSpeed+0xa20>
    2e40:	00800174 	movhi	r2,5
    2e44:	10ac4404 	addi	r2,r2,-20208
    2e48:	00000206 	br	2e54 <getPHYSpeed+0xa20>
    2e4c:	00800174 	movhi	r2,5
    2e50:	10ac4504 	addi	r2,r2,-20204
    2e54:	e0fff743 	ldbu	r3,-35(fp)
    2e58:	18c00058 	cmpnei	r3,r3,1
    2e5c:	1800031e 	bne	r3,zero,2e6c <getPHYSpeed+0xa38>
    2e60:	00c00174 	movhi	r3,5
    2e64:	18ec4704 	addi	r3,r3,-20196
    2e68:	00000206 	br	2e74 <getPHYSpeed+0xa40>
    2e6c:	00c00174 	movhi	r3,5
    2e70:	18ec4904 	addi	r3,r3,-20188
    2e74:	d8c00015 	stw	r3,0(sp)
    2e78:	01000174 	movhi	r4,5
    2e7c:	212cef04 	addi	r4,r4,-19524
    2e80:	100f883a 	mov	r7,r2
    2e84:	00080f80 	call	80f8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
    2e88:	e0bff817 	ldw	r2,-32(fp)
}
    2e8c:	e037883a 	mov	sp,fp
    2e90:	dfc00117 	ldw	ra,4(sp)
    2e94:	df000017 	ldw	fp,0(sp)
    2e98:	dec00204 	addi	sp,sp,8
    2e9c:	f800283a 	ret

00002ea0 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
    2ea0:	defffd04 	addi	sp,sp,-12
    2ea4:	df000215 	stw	fp,8(sp)
    2ea8:	df000204 	addi	fp,sp,8
    2eac:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    2eb0:	e0bfff17 	ldw	r2,-4(fp)
    2eb4:	10800617 	ldw	r2,24(r2)
    2eb8:	10800317 	ldw	r2,12(r2)
    2ebc:	10800117 	ldw	r2,4(r2)
    2ec0:	10800217 	ldw	r2,8(r2)
    2ec4:	10800017 	ldw	r2,0(r2)
    2ec8:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	10801004 	addi	r2,r2,64
    2ed4:	10800037 	ldwio	r2,0(r2)
}
    2ed8:	e037883a 	mov	sp,fp
    2edc:	df000017 	ldw	fp,0(sp)
    2ee0:	dec00104 	addi	sp,sp,4
    2ee4:	f800283a 	ret

00002ee8 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
    2ee8:	defffc04 	addi	sp,sp,-16
    2eec:	df000315 	stw	fp,12(sp)
    2ef0:	df000304 	addi	fp,sp,12
    2ef4:	e13ffe15 	stw	r4,-8(fp)
    2ef8:	2805883a 	mov	r2,r5
    2efc:	e0bfff05 	stb	r2,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    2f00:	e0bffe17 	ldw	r2,-8(fp)
    2f04:	10800617 	ldw	r2,24(r2)
    2f08:	10800317 	ldw	r2,12(r2)
    2f0c:	10800117 	ldw	r2,4(r2)
    2f10:	10800217 	ldw	r2,8(r2)
    2f14:	10800017 	ldw	r2,0(r2)
    2f18:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
    2f1c:	e0bffd17 	ldw	r2,-12(fp)
    2f20:	10801004 	addi	r2,r2,64
    2f24:	e0ffff03 	ldbu	r3,-4(fp)
    2f28:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
    2f2c:	0005883a 	mov	r2,zero
}
    2f30:	e037883a 	mov	sp,fp
    2f34:	df000017 	ldw	fp,0(sp)
    2f38:	dec00104 	addi	sp,sp,4
    2f3c:	f800283a 	ret

00002f40 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
    2f40:	defff604 	addi	sp,sp,-40
    2f44:	df000915 	stw	fp,36(sp)
    2f48:	df000904 	addi	fp,sp,36
    2f4c:	e13ffb15 	stw	r4,-20(fp)
    2f50:	3009883a 	mov	r4,r6
    2f54:	3807883a 	mov	r3,r7
    2f58:	e0800117 	ldw	r2,4(fp)
    2f5c:	e17ffc05 	stb	r5,-16(fp)
    2f60:	e13ffd05 	stb	r4,-12(fp)
    2f64:	e0fffe05 	stb	r3,-8(fp)
    2f68:	e0bfff0d 	sth	r2,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    2f6c:	e0bffb17 	ldw	r2,-20(fp)
    2f70:	10800617 	ldw	r2,24(r2)
    2f74:	10800317 	ldw	r2,12(r2)
    2f78:	10800117 	ldw	r2,4(r2)
    2f7c:	10800217 	ldw	r2,8(r2)
    2f80:	10800017 	ldw	r2,0(r2)
    2f84:	e0bff915 	stw	r2,-28(fp)
    
    bit_mask = 0x00;
    2f88:	e03ff70d 	sth	zero,-36(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
    2f8c:	e03ff815 	stw	zero,-32(fp)
    2f90:	00000906 	br	2fb8 <alt_tse_phy_wr_mdio_reg+0x78>
    {
        bit_mask <<= 1;
    2f94:	e0bff70b 	ldhu	r2,-36(fp)
    2f98:	1085883a 	add	r2,r2,r2
    2f9c:	e0bff70d 	sth	r2,-36(fp)
        bit_mask |= 0x01;        
    2fa0:	e0bff70b 	ldhu	r2,-36(fp)
    2fa4:	10800054 	ori	r2,r2,1
    2fa8:	e0bff70d 	sth	r2,-36(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
    2fac:	e0bff817 	ldw	r2,-32(fp)
    2fb0:	10800044 	addi	r2,r2,1
    2fb4:	e0bff815 	stw	r2,-32(fp)
    2fb8:	e0bffe03 	ldbu	r2,-8(fp)
    2fbc:	e0fff817 	ldw	r3,-32(fp)
    2fc0:	18bff416 	blt	r3,r2,2f94 <__alt_mem_descriptor_memory+0xdefc2f94>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
    2fc4:	e0fff70b 	ldhu	r3,-36(fp)
    2fc8:	e0bffd03 	ldbu	r2,-12(fp)
    2fcc:	1884983a 	sll	r2,r3,r2
    2fd0:	e0bff70d 	sth	r2,-36(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
    2fd4:	e0bff917 	ldw	r2,-28(fp)
    2fd8:	10c0a004 	addi	r3,r2,640
    2fdc:	e0bffc03 	ldbu	r2,-16(fp)
    2fe0:	1085883a 	add	r2,r2,r2
    2fe4:	1085883a 	add	r2,r2,r2
    2fe8:	1885883a 	add	r2,r3,r2
    2fec:	10800037 	ldwio	r2,0(r2)
    2ff0:	e0bffa0d 	sth	r2,-24(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
    2ff4:	e0bff70b 	ldhu	r2,-36(fp)
    2ff8:	0084303a 	nor	r2,zero,r2
    2ffc:	1007883a 	mov	r3,r2
    3000:	e0bffa0b 	ldhu	r2,-24(fp)
    3004:	1884703a 	and	r2,r3,r2
    3008:	e0bffa0d 	sth	r2,-24(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
    300c:	e0ffff0b 	ldhu	r3,-4(fp)
    3010:	e0bffd03 	ldbu	r2,-12(fp)
    3014:	1884983a 	sll	r2,r3,r2
    3018:	1007883a 	mov	r3,r2
    301c:	e0bff70b 	ldhu	r2,-36(fp)
    3020:	1884703a 	and	r2,r3,r2
    3024:	1007883a 	mov	r3,r2
    3028:	e0bffa0b 	ldhu	r2,-24(fp)
    302c:	1884b03a 	or	r2,r3,r2
    3030:	e0bffa0d 	sth	r2,-24(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
    3034:	e0bff917 	ldw	r2,-28(fp)
    3038:	10c0a004 	addi	r3,r2,640
    303c:	e0bffc03 	ldbu	r2,-16(fp)
    3040:	1085883a 	add	r2,r2,r2
    3044:	1085883a 	add	r2,r2,r2
    3048:	1885883a 	add	r2,r3,r2
    304c:	e0fffa0b 	ldhu	r3,-24(fp)
    3050:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
    3054:	0005883a 	mov	r2,zero
    
}
    3058:	e037883a 	mov	sp,fp
    305c:	df000017 	ldw	fp,0(sp)
    3060:	dec00104 	addi	sp,sp,4
    3064:	f800283a 	ret

00003068 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
    3068:	defff704 	addi	sp,sp,-36
    306c:	df000815 	stw	fp,32(sp)
    3070:	df000804 	addi	fp,sp,32
    3074:	e13ffc15 	stw	r4,-16(fp)
    3078:	2809883a 	mov	r4,r5
    307c:	3007883a 	mov	r3,r6
    3080:	3805883a 	mov	r2,r7
    3084:	e13ffd05 	stb	r4,-12(fp)
    3088:	e0fffe05 	stb	r3,-8(fp)
    308c:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    3090:	e0bffc17 	ldw	r2,-16(fp)
    3094:	10800617 	ldw	r2,24(r2)
    3098:	10800317 	ldw	r2,12(r2)
    309c:	10800117 	ldw	r2,4(r2)
    30a0:	10800217 	ldw	r2,8(r2)
    30a4:	10800017 	ldw	r2,0(r2)
    30a8:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
    30ac:	e03ff815 	stw	zero,-32(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
    30b0:	e03ff915 	stw	zero,-28(fp)
    30b4:	00000906 	br	30dc <alt_tse_phy_rd_mdio_reg+0x74>
    {
        bit_mask <<= 1;
    30b8:	e0bff817 	ldw	r2,-32(fp)
    30bc:	1085883a 	add	r2,r2,r2
    30c0:	e0bff815 	stw	r2,-32(fp)
        bit_mask |= 0x01;        
    30c4:	e0bff817 	ldw	r2,-32(fp)
    30c8:	10800054 	ori	r2,r2,1
    30cc:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
    30d0:	e0bff917 	ldw	r2,-28(fp)
    30d4:	10800044 	addi	r2,r2,1
    30d8:	e0bff915 	stw	r2,-28(fp)
    30dc:	e0bfff03 	ldbu	r2,-4(fp)
    30e0:	e0fff917 	ldw	r3,-28(fp)
    30e4:	18bff416 	blt	r3,r2,30b8 <__alt_mem_descriptor_memory+0xdefc30b8>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
    30e8:	e0bffa17 	ldw	r2,-24(fp)
    30ec:	10c0a004 	addi	r3,r2,640
    30f0:	e0bffd03 	ldbu	r2,-12(fp)
    30f4:	1085883a 	add	r2,r2,r2
    30f8:	1085883a 	add	r2,r2,r2
    30fc:	1885883a 	add	r2,r3,r2
    3100:	10800037 	ldwio	r2,0(r2)
    3104:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
    3108:	e0fffb0b 	ldhu	r3,-20(fp)
    310c:	e0bffe03 	ldbu	r2,-8(fp)
    3110:	1885d83a 	sra	r2,r3,r2
    3114:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
    3118:	e0fffb0b 	ldhu	r3,-20(fp)
    311c:	e0bff817 	ldw	r2,-32(fp)
    3120:	1884703a 	and	r2,r3,r2
}
    3124:	e037883a 	mov	sp,fp
    3128:	df000017 	ldw	fp,0(sp)
    312c:	dec00104 	addi	sp,sp,4
    3130:	f800283a 	ret

00003134 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
    3134:	deff8104 	addi	sp,sp,-508
    3138:	dfc07e15 	stw	ra,504(sp)
    313c:	df007d15 	stw	fp,500(sp)
    3140:	df007d04 	addi	fp,sp,500
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
    3144:	e0ff8304 	addi	r3,fp,-500
    3148:	00801904 	movi	r2,100
    314c:	1809883a 	mov	r4,r3
    3150:	000b883a 	mov	r5,zero
    3154:	100d883a 	mov	r6,r2
    3158:	0007f240 	call	7f24 <memset>
    315c:	009d9cb4 	movhi	r2,30322
    3160:	10985344 	addi	r2,r2,24909
    3164:	e0bf8315 	stw	r2,-500(fp)
    3168:	00881b34 	movhi	r2,8300
    316c:	109b1944 	addi	r2,r2,27749
    3170:	e0bf8415 	stw	r2,-496(fp)
    3174:	008c5174 	movhi	r2,12613
    3178:	108e0e04 	addi	r2,r2,14392
    317c:	e0bf8515 	stw	r2,-492(fp)
    3180:	00800c74 	movhi	r2,49
    3184:	108c4c44 	addi	r2,r2,12593
    3188:	e0bf8615 	stw	r2,-488(fp)
    318c:	e0ff8704 	addi	r3,fp,-484
    3190:	00801004 	movi	r2,64
    3194:	1809883a 	mov	r4,r3
    3198:	000b883a 	mov	r5,zero
    319c:	100d883a 	mov	r6,r2
    31a0:	0007f240 	call	7f24 <memset>
    31a4:	009410c4 	movi	r2,20547
    31a8:	e0bf9715 	stw	r2,-420(fp)
    31ac:	00800304 	movi	r2,12
    31b0:	e0bf9805 	stb	r2,-416(fp)
    31b4:	00800084 	movi	r2,2
    31b8:	e0bf9845 	stb	r2,-415(fp)
    31bc:	00800444 	movi	r2,17
    31c0:	e0bf9885 	stb	r2,-414(fp)
    31c4:	00800384 	movi	r2,14
    31c8:	e0bf98c5 	stb	r2,-413(fp)
    31cc:	00800344 	movi	r2,13
    31d0:	e0bf9905 	stb	r2,-412(fp)
    31d4:	00800284 	movi	r2,10
    31d8:	e0bf9945 	stb	r2,-411(fp)
    31dc:	00800034 	movhi	r2,0
    31e0:	1096de04 	addi	r2,r2,23416
    31e4:	e0bf9a15 	stw	r2,-408(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
    31e8:	e0ff9c04 	addi	r3,fp,-400
    31ec:	00801904 	movi	r2,100
    31f0:	1809883a 	mov	r4,r3
    31f4:	000b883a 	mov	r5,zero
    31f8:	100d883a 	mov	r6,r2
    31fc:	0007f240 	call	7f24 <memset>
    3200:	009d9cb4 	movhi	r2,30322
    3204:	10985344 	addi	r2,r2,24909
    3208:	e0bf9c15 	stw	r2,-400(fp)
    320c:	00881b34 	movhi	r2,8300
    3210:	109b1944 	addi	r2,r2,27749
    3214:	e0bf9d15 	stw	r2,-396(fp)
    3218:	00991874 	movhi	r2,25697
    321c:	109d5444 	addi	r2,r2,30033
    3220:	e0bf9e15 	stw	r2,-392(fp)
    3224:	00965234 	movhi	r2,22856
    3228:	10940804 	addi	r2,r2,20512
    322c:	e0bf9f15 	stw	r2,-388(fp)
    3230:	00914e34 	movhi	r2,17720
    3234:	108e0804 	addi	r2,r2,14368
    3238:	e0bfa015 	stw	r2,-384(fp)
    323c:	008d4d34 	movhi	r2,13620
    3240:	108c4c44 	addi	r2,r2,12593
    3244:	e0bfa115 	stw	r2,-380(fp)
    3248:	e03fa215 	stw	zero,-376(fp)
    324c:	e03fa315 	stw	zero,-372(fp)
    3250:	e03fa415 	stw	zero,-368(fp)
    3254:	e03fa515 	stw	zero,-364(fp)
    3258:	e03fa615 	stw	zero,-360(fp)
    325c:	e03fa715 	stw	zero,-356(fp)
    3260:	e03fa815 	stw	zero,-352(fp)
    3264:	e03fa915 	stw	zero,-348(fp)
    3268:	e03faa15 	stw	zero,-344(fp)
    326c:	e03fab15 	stw	zero,-340(fp)
    3270:	e03fac15 	stw	zero,-336(fp)
    3274:	e03fad15 	stw	zero,-332(fp)
    3278:	e03fae15 	stw	zero,-328(fp)
    327c:	e03faf15 	stw	zero,-324(fp)
    3280:	009410c4 	movi	r2,20547
    3284:	e0bfb015 	stw	r2,-320(fp)
    3288:	00800344 	movi	r2,13
    328c:	e0bfb105 	stb	r2,-316(fp)
    3290:	00800084 	movi	r2,2
    3294:	e0bfb145 	stb	r2,-315(fp)
    3298:	00800444 	movi	r2,17
    329c:	e0bfb185 	stb	r2,-314(fp)
    32a0:	00800384 	movi	r2,14
    32a4:	e0bfb1c5 	stb	r2,-313(fp)
    32a8:	00800344 	movi	r2,13
    32ac:	e0bfb205 	stb	r2,-312(fp)
    32b0:	00800284 	movi	r2,10
    32b4:	e0bfb245 	stb	r2,-311(fp)
    32b8:	00800034 	movhi	r2,0
    32bc:	1096de04 	addi	r2,r2,23416
    32c0:	e0bfb315 	stw	r2,-308(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
    32c4:	e0ffb504 	addi	r3,fp,-300
    32c8:	00801904 	movi	r2,100
    32cc:	1809883a 	mov	r4,r3
    32d0:	000b883a 	mov	r5,zero
    32d4:	100d883a 	mov	r6,r2
    32d8:	0007f240 	call	7f24 <memset>
    32dc:	009a5d34 	movhi	r2,26996
    32e0:	10985384 	addi	r2,r2,24910
    32e4:	e0bfb515 	stw	r2,-300(fp)
    32e8:	009b1874 	movhi	r2,27745
    32ec:	109b9bc4 	addi	r2,r2,28271
    32f0:	e0bfb615 	stw	r2,-296(fp)
    32f4:	008e1434 	movhi	r2,14416
    32f8:	10910804 	addi	r2,r2,17440
    32fc:	e0bfb715 	stw	r2,-292(fp)
    3300:	008d4db4 	movhi	r2,13622
    3304:	108e0cc4 	addi	r2,r2,14387
    3308:	e0bfb815 	stw	r2,-288(fp)
    330c:	e03fb915 	stw	zero,-284(fp)
    3310:	e0ffba04 	addi	r3,fp,-280
    3314:	00800f04 	movi	r2,60
    3318:	1809883a 	mov	r4,r3
    331c:	000b883a 	mov	r5,zero
    3320:	100d883a 	mov	r6,r2
    3324:	0007f240 	call	7f24 <memset>
    3328:	00800234 	movhi	r2,8
    332c:	108005c4 	addi	r2,r2,23
    3330:	e0bfc915 	stw	r2,-220(fp)
    3334:	008001c4 	movi	r2,7
    3338:	e0bfca05 	stb	r2,-216(fp)
    333c:	00800284 	movi	r2,10
    3340:	e0bfca45 	stb	r2,-215(fp)
    3344:	00800444 	movi	r2,17
    3348:	e0bfca85 	stb	r2,-214(fp)
    334c:	008000c4 	movi	r2,3
    3350:	e0bfcac5 	stb	r2,-213(fp)
    3354:	00800044 	movi	r2,1
    3358:	e0bfcb05 	stb	r2,-212(fp)
    335c:	00800084 	movi	r2,2
    3360:	e0bfcb45 	stb	r2,-211(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
    3364:	00800174 	movhi	r2,5
    3368:	10acfb04 	addi	r2,r2,-19476
    336c:	e0ffce04 	addi	r3,fp,-200
    3370:	100b883a 	mov	r5,r2
    3374:	00801904 	movi	r2,100
    3378:	1809883a 	mov	r4,r3
    337c:	100d883a 	mov	r6,r2
    3380:	0007c900 	call	7c90 <memcpy>

    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */

    alt_tse_phy_profile DP83620 = {"National DP83620",  /* National DP83848C                                          */
    3384:	00800174 	movhi	r2,5
    3388:	10ad1404 	addi	r2,r2,-19376
    338c:	e0ffe704 	addi	r3,fp,-100
    3390:	100b883a 	mov	r5,r2
    3394:	00801904 	movi	r2,100
    3398:	1809883a 	mov	r4,r3
    339c:	100d883a 	mov	r6,r2
    33a0:	0007c900 	call	7c90 <memcpy>
    					   0,                              /* No function pointer configure National DP83848C            */
    					   &DP83620_link_status_read      /* Function pointer to read from PHY specific status register */
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
    33a4:	e13f8304 	addi	r4,fp,-500
    33a8:	00012c00 	call	12c0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
    33ac:	e0bf9c04 	addi	r2,fp,-400
    33b0:	1009883a 	mov	r4,r2
    33b4:	00012c00 	call	12c0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
    33b8:	e0bfb504 	addi	r2,fp,-300
    33bc:	1009883a 	mov	r4,r2
    33c0:	00012c00 	call	12c0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
    33c4:	e0bfce04 	addi	r2,fp,-200
    33c8:	1009883a 	mov	r4,r2
    33cc:	00012c00 	call	12c0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83620);
    33d0:	e0bfe704 	addi	r2,fp,-100
    33d4:	1009883a 	mov	r4,r2
    33d8:	00012c00 	call	12c0 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
    33dc:	d0a84243 	ldbu	r2,-24311(gp)
    33e0:	10803fcc 	andi	r2,r2,255
}
    33e4:	e037883a 	mov	sp,fp
    33e8:	dfc00117 	ldw	ra,4(sp)
    33ec:	df000017 	ldw	fp,0(sp)
    33f0:	dec00204 	addi	sp,sp,8
    33f4:	f800283a 	ret

000033f8 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
    33f8:	defffd04 	addi	sp,sp,-12
    33fc:	dfc00215 	stw	ra,8(sp)
    3400:	df000115 	stw	fp,4(sp)
    3404:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    3408:	d0a84243 	ldbu	r2,-24311(gp)
    340c:	10803fcc 	andi	r2,r2,255
    3410:	01000174 	movhi	r4,5
    3414:	212d2d04 	addi	r4,r4,-19276
    3418:	100b883a 	mov	r5,r2
    341c:	0000f7c0 	call	f7c <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
    3420:	e03fff05 	stb	zero,-4(fp)
    3424:	00006d06 	br	35dc <alt_tse_phy_print_profile+0x1e4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
    3428:	e0bfff07 	ldb	r2,-4(fp)
    342c:	01000174 	movhi	r4,5
    3430:	212d3c04 	addi	r4,r4,-19216
    3434:	100b883a 	mov	r5,r2
    3438:	0000f7c0 	call	f7c <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
    343c:	e0ffff07 	ldb	r3,-4(fp)
    3440:	00800174 	movhi	r2,5
    3444:	10999b04 	addi	r2,r2,26220
    3448:	18c7883a 	add	r3,r3,r3
    344c:	18c7883a 	add	r3,r3,r3
    3450:	10c5883a 	add	r2,r2,r3
    3454:	10800017 	ldw	r2,0(r2)
    3458:	01000174 	movhi	r4,5
    345c:	212d4104 	addi	r4,r4,-19196
    3460:	100b883a 	mov	r5,r2
    3464:	0000f7c0 	call	f7c <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
    3468:	e0ffff07 	ldb	r3,-4(fp)
    346c:	00800174 	movhi	r2,5
    3470:	10999b04 	addi	r2,r2,26220
    3474:	18c7883a 	add	r3,r3,r3
    3478:	18c7883a 	add	r3,r3,r3
    347c:	10c5883a 	add	r2,r2,r3
    3480:	10800017 	ldw	r2,0(r2)
    3484:	10801417 	ldw	r2,80(r2)
    3488:	01000174 	movhi	r4,5
    348c:	212d4704 	addi	r4,r4,-19172
    3490:	100b883a 	mov	r5,r2
    3494:	0000f7c0 	call	f7c <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
    3498:	e0ffff07 	ldb	r3,-4(fp)
    349c:	00800174 	movhi	r2,5
    34a0:	10999b04 	addi	r2,r2,26220
    34a4:	18c7883a 	add	r3,r3,r3
    34a8:	18c7883a 	add	r3,r3,r3
    34ac:	10c5883a 	add	r2,r2,r3
    34b0:	10800017 	ldw	r2,0(r2)
    34b4:	10801503 	ldbu	r2,84(r2)
    34b8:	10803fcc 	andi	r2,r2,255
    34bc:	01000174 	movhi	r4,5
    34c0:	212d4e04 	addi	r4,r4,-19144
    34c4:	100b883a 	mov	r5,r2
    34c8:	0000f7c0 	call	f7c <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
    34cc:	e0ffff07 	ldb	r3,-4(fp)
    34d0:	00800174 	movhi	r2,5
    34d4:	10999b04 	addi	r2,r2,26220
    34d8:	18c7883a 	add	r3,r3,r3
    34dc:	18c7883a 	add	r3,r3,r3
    34e0:	10c5883a 	add	r2,r2,r3
    34e4:	10800017 	ldw	r2,0(r2)
    34e8:	10801543 	ldbu	r2,85(r2)
    34ec:	10803fcc 	andi	r2,r2,255
    34f0:	01000174 	movhi	r4,5
    34f4:	212d5504 	addi	r4,r4,-19116
    34f8:	100b883a 	mov	r5,r2
    34fc:	0000f7c0 	call	f7c <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
    3500:	e0ffff07 	ldb	r3,-4(fp)
    3504:	00800174 	movhi	r2,5
    3508:	10999b04 	addi	r2,r2,26220
    350c:	18c7883a 	add	r3,r3,r3
    3510:	18c7883a 	add	r3,r3,r3
    3514:	10c5883a 	add	r2,r2,r3
    3518:	10800017 	ldw	r2,0(r2)
    351c:	10801583 	ldbu	r2,86(r2)
    3520:	10803fcc 	andi	r2,r2,255
    3524:	01000174 	movhi	r4,5
    3528:	212d5c04 	addi	r4,r4,-19088
    352c:	100b883a 	mov	r5,r2
    3530:	0000f7c0 	call	f7c <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
    3534:	e0ffff07 	ldb	r3,-4(fp)
    3538:	00800174 	movhi	r2,5
    353c:	10999b04 	addi	r2,r2,26220
    3540:	18c7883a 	add	r3,r3,r3
    3544:	18c7883a 	add	r3,r3,r3
    3548:	10c5883a 	add	r2,r2,r3
    354c:	10800017 	ldw	r2,0(r2)
    3550:	108015c3 	ldbu	r2,87(r2)
    3554:	10803fcc 	andi	r2,r2,255
    3558:	01000174 	movhi	r4,5
    355c:	212d6304 	addi	r4,r4,-19060
    3560:	100b883a 	mov	r5,r2
    3564:	0000f7c0 	call	f7c <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
    3568:	e0ffff07 	ldb	r3,-4(fp)
    356c:	00800174 	movhi	r2,5
    3570:	10999b04 	addi	r2,r2,26220
    3574:	18c7883a 	add	r3,r3,r3
    3578:	18c7883a 	add	r3,r3,r3
    357c:	10c5883a 	add	r2,r2,r3
    3580:	10800017 	ldw	r2,0(r2)
    3584:	10801603 	ldbu	r2,88(r2)
    3588:	10803fcc 	andi	r2,r2,255
    358c:	01000174 	movhi	r4,5
    3590:	212d6904 	addi	r4,r4,-19036
    3594:	100b883a 	mov	r5,r2
    3598:	0000f7c0 	call	f7c <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
    359c:	e0ffff07 	ldb	r3,-4(fp)
    35a0:	00800174 	movhi	r2,5
    35a4:	10999b04 	addi	r2,r2,26220
    35a8:	18c7883a 	add	r3,r3,r3
    35ac:	18c7883a 	add	r3,r3,r3
    35b0:	10c5883a 	add	r2,r2,r3
    35b4:	10800017 	ldw	r2,0(r2)
    35b8:	10801643 	ldbu	r2,89(r2)
    35bc:	10803fcc 	andi	r2,r2,255
    35c0:	01000174 	movhi	r4,5
    35c4:	212d6f04 	addi	r4,r4,-19012
    35c8:	100b883a 	mov	r5,r2
    35cc:	0000f7c0 	call	f7c <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
    35d0:	e0bfff03 	ldbu	r2,-4(fp)
    35d4:	10800044 	addi	r2,r2,1
    35d8:	e0bfff05 	stb	r2,-4(fp)
    35dc:	e0ffff07 	ldb	r3,-4(fp)
    35e0:	d0a84243 	ldbu	r2,-24311(gp)
    35e4:	10803fcc 	andi	r2,r2,255
    35e8:	18bf8f16 	blt	r3,r2,3428 <__alt_mem_descriptor_memory+0xdefc3428>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
    35ec:	d0a84243 	ldbu	r2,-24311(gp)
    35f0:	10803fcc 	andi	r2,r2,255
}
    35f4:	e037883a 	mov	sp,fp
    35f8:	dfc00117 	ldw	ra,4(sp)
    35fc:	df000017 	ldw	fp,0(sp)
    3600:	dec00204 	addi	sp,sp,8
    3604:	f800283a 	ret

00003608 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
    3608:	defffa04 	addi	sp,sp,-24
    360c:	dfc00515 	stw	ra,20(sp)
    3610:	df000415 	stw	fp,16(sp)
    3614:	df000404 	addi	fp,sp,16
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
    3618:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
    361c:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys = 0;
    3620:	e03fff15 	stw	zero,-4(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    3624:	d0284285 	stb	zero,-24310(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
    3628:	e03ffc05 	stb	zero,-16(fp)
    362c:	00019406 	br	3c80 <alt_tse_mac_group_init+0x678>
        psys = &tse_mac_device[i];
    3630:	e0bffc07 	ldb	r2,-16(fp)
    3634:	10c01224 	muli	r3,r2,72
    3638:	00800174 	movhi	r2,5
    363c:	10bf9404 	addi	r2,r2,-432
    3640:	1885883a 	add	r2,r3,r2
    3644:	e0bfff15 	stw	r2,-4(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
    3648:	e0bfff17 	ldw	r2,-4(fp)
    364c:	10800517 	ldw	r2,20(r2)
    3650:	10018826 	beq	r2,zero,3c74 <alt_tse_mac_group_init+0x66c>
    3654:	e0bfff17 	ldw	r2,-4(fp)
    3658:	10800617 	ldw	r2,24(r2)
    365c:	10018526 	beq	r2,zero,3c74 <alt_tse_mac_group_init+0x66c>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
    3660:	d0a84283 	ldbu	r2,-24310(gp)
    3664:	10c03fcc 	andi	r3,r2,255
    3668:	e0bfff17 	ldw	r2,-4(fp)
    366c:	10800017 	ldw	r2,0(r2)
    3670:	01000174 	movhi	r4,5
    3674:	212d7504 	addi	r4,r4,-18988
    3678:	180b883a 	mov	r5,r3
    367c:	100d883a 	mov	r6,r2
    3680:	00080f80 	call	80f8 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
    3684:	01000504 	movi	r4,20
    3688:	00074c00 	call	74c0 <malloc>
    368c:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
    3690:	e0bffd17 	ldw	r2,-12(fp)
    3694:	1000081e 	bne	r2,zero,36b8 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
    3698:	d0a84283 	ldbu	r2,-24310(gp)
    369c:	10803fcc 	andi	r2,r2,255
    36a0:	01000174 	movhi	r4,5
    36a4:	212d8104 	addi	r4,r4,-18940
    36a8:	100b883a 	mov	r5,r2
    36ac:	00080f80 	call	80f8 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
    36b0:	00bfffc4 	movi	r2,-1
    36b4:	00017706 	br	3c94 <alt_tse_mac_group_init+0x68c>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
    36b8:	e0bfff17 	ldw	r2,-4(fp)
    36bc:	108002c3 	ldbu	r2,11(r2)
    36c0:	10803fcc 	andi	r2,r2,255
    36c4:	10001226 	beq	r2,zero,3710 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
    36c8:	e0bfff17 	ldw	r2,-4(fp)
    36cc:	10c00303 	ldbu	r3,12(r2)
    36d0:	e0bffd17 	ldw	r2,-12(fp)
    36d4:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
    36d8:	01000174 	movhi	r4,5
    36dc:	212d8f04 	addi	r4,r4,-18884
    36e0:	0000f7c0 	call	f7c <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
    36e4:	e0bffd17 	ldw	r2,-12(fp)
    36e8:	10800003 	ldbu	r2,0(r2)
    36ec:	10803fcc 	andi	r2,r2,255
    36f0:	01000174 	movhi	r4,5
    36f4:	212d9a04 	addi	r4,r4,-18840
    36f8:	100b883a 	mov	r5,r2
    36fc:	0000f7c0 	call	f7c <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
    3700:	01000174 	movhi	r4,5
    3704:	212da504 	addi	r4,r4,-18796
    3708:	0000f7c0 	call	f7c <no_printf>
    370c:	00001f06 	br	378c <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
    3710:	e0bfff17 	ldw	r2,-4(fp)
    3714:	10800343 	ldbu	r2,13(r2)
    3718:	10803fcc 	andi	r2,r2,255
    371c:	10001226 	beq	r2,zero,3768 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
    3720:	e0bfff17 	ldw	r2,-4(fp)
    3724:	10c00383 	ldbu	r3,14(r2)
    3728:	e0bffd17 	ldw	r2,-12(fp)
    372c:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
    3730:	01000174 	movhi	r4,5
    3734:	212db004 	addi	r4,r4,-18752
    3738:	0000f7c0 	call	f7c <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
    373c:	01000174 	movhi	r4,5
    3740:	212da504 	addi	r4,r4,-18796
    3744:	0000f7c0 	call	f7c <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
    3748:	e0bffd17 	ldw	r2,-12(fp)
    374c:	10800003 	ldbu	r2,0(r2)
    3750:	10803fcc 	andi	r2,r2,255
    3754:	01000174 	movhi	r4,5
    3758:	212dbb04 	addi	r4,r4,-18708
    375c:	100b883a 	mov	r5,r2
    3760:	0000f7c0 	call	f7c <no_printf>
    3764:	00000906 	br	378c <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	00c00044 	movi	r3,1
    3770:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
    3774:	01000174 	movhi	r4,5
    3778:	212db004 	addi	r4,r4,-18752
    377c:	0000f7c0 	call	f7c <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
    3780:	01000174 	movhi	r4,5
    3784:	212dc604 	addi	r4,r4,-18664
    3788:	0000f7c0 	call	f7c <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
    378c:	e03ffc45 	stb	zero,-15(fp)
    3790:	00012106 	br	3c18 <alt_tse_mac_group_init+0x610>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
    3794:	01000404 	movi	r4,16
    3798:	00074c00 	call	74c0 <malloc>
    379c:	e0bffe15 	stw	r2,-8(fp)
                if(!pmac_info) {
    37a0:	e0bffe17 	ldw	r2,-8(fp)
    37a4:	10000a1e 	bne	r2,zero,37d0 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
    37a8:	d0a84283 	ldbu	r2,-24310(gp)
    37ac:	10c03fcc 	andi	r3,r2,255
    37b0:	e0bffc47 	ldb	r2,-15(fp)
    37b4:	01000174 	movhi	r4,5
    37b8:	212dd104 	addi	r4,r4,-18620
    37bc:	180b883a 	mov	r5,r3
    37c0:	100d883a 	mov	r6,r2
    37c4:	00080f80 	call	80f8 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
    37c8:	00bfffc4 	movi	r2,-1
    37cc:	00013106 	br	3c94 <alt_tse_mac_group_init+0x68c>
                }
                
                pmac_info->pmac_group = pmac_group;
    37d0:	e0bffe17 	ldw	r2,-8(fp)
    37d4:	e0fffd17 	ldw	r3,-12(fp)
    37d8:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
    37dc:	e0bffe17 	ldw	r2,-8(fp)
    37e0:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
    37e4:	e0fffc07 	ldb	r3,-16(fp)
    37e8:	e0bffc47 	ldb	r2,-15(fp)
    37ec:	1885883a 	add	r2,r3,r2
    37f0:	10c01224 	muli	r3,r2,72
    37f4:	00800174 	movhi	r2,5
    37f8:	10bf9404 	addi	r2,r2,-432
    37fc:	1887883a 	add	r3,r3,r2
    3800:	e0bffe17 	ldw	r2,-8(fp)
    3804:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
    3808:	e0bffe17 	ldw	r2,-8(fp)
    380c:	10800217 	ldw	r2,8(r2)
    3810:	10800517 	ldw	r2,20(r2)
    3814:	10000426 	beq	r2,zero,3828 <alt_tse_mac_group_init+0x220>
    3818:	e0bffe17 	ldw	r2,-8(fp)
    381c:	10800217 	ldw	r2,8(r2)
    3820:	10800617 	ldw	r2,24(r2)
    3824:	1000091e 	bne	r2,zero,384c <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
    3828:	e0fffc07 	ldb	r3,-16(fp)
    382c:	e0bffc47 	ldb	r2,-15(fp)
    3830:	1885883a 	add	r2,r3,r2
    3834:	01000174 	movhi	r4,5
    3838:	212de304 	addi	r4,r4,-18548
    383c:	100b883a 	mov	r5,r2
    3840:	00080f80 	call	80f8 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
    3844:	00bfffc4 	movi	r2,-1
    3848:	00011206 	br	3c94 <alt_tse_mac_group_init+0x68c>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
    384c:	e0bffe17 	ldw	r2,-8(fp)
    3850:	10800217 	ldw	r2,8(r2)
    3854:	10800243 	ldbu	r2,9(r2)
    3858:	10803fcc 	andi	r2,r2,255
    385c:	10000d26 	beq	r2,zero,3894 <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
    3860:	e0bffe17 	ldw	r2,-8(fp)
    3864:	10800217 	ldw	r2,8(r2)
    3868:	10800283 	ldbu	r2,10(r2)
    386c:	10803fcc 	andi	r2,r2,255
    3870:	10000426 	beq	r2,zero,3884 <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
    3874:	e0bffe17 	ldw	r2,-8(fp)
    3878:	00c00084 	movi	r3,2
    387c:	10c00005 	stb	r3,0(r2)
    3880:	00000606 	br	389c <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
    3884:	e0bffe17 	ldw	r2,-8(fp)
    3888:	00c00044 	movi	r3,1
    388c:	10c00005 	stb	r3,0(r2)
    3890:	00000206 	br	389c <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
    3894:	e0bffe17 	ldw	r2,-8(fp)
    3898:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
    389c:	e0bffe17 	ldw	r2,-8(fp)
    38a0:	10800217 	ldw	r2,8(r2)
    38a4:	10800343 	ldbu	r2,13(r2)
    38a8:	10803fcc 	andi	r2,r2,255
    38ac:	10006626 	beq	r2,zero,3a48 <alt_tse_mac_group_init+0x440>
    38b0:	e0bffe17 	ldw	r2,-8(fp)
    38b4:	10800217 	ldw	r2,8(r2)
    38b8:	108002c3 	ldbu	r2,11(r2)
    38bc:	10803fcc 	andi	r2,r2,255
    38c0:	1000611e 	bne	r2,zero,3a48 <alt_tse_mac_group_init+0x440>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
    38c4:	e0fffc47 	ldb	r3,-15(fp)
    38c8:	e0bffe17 	ldw	r2,-8(fp)
    38cc:	10800217 	ldw	r2,8(r2)
    38d0:	10800017 	ldw	r2,0(r2)
    38d4:	01000174 	movhi	r4,5
    38d8:	212df204 	addi	r4,r4,-18488
    38dc:	180b883a 	mov	r5,r3
    38e0:	100d883a 	mov	r6,r2
    38e4:	0000f7c0 	call	f7c <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
    38e8:	e17ffc47 	ldb	r5,-15(fp)
    38ec:	e0fffc07 	ldb	r3,-16(fp)
    38f0:	e0bffc47 	ldb	r2,-15(fp)
    38f4:	1885883a 	add	r2,r3,r2
    38f8:	01000174 	movhi	r4,5
    38fc:	212dfe04 	addi	r4,r4,-18440
    3900:	100d883a 	mov	r6,r2
    3904:	0000f7c0 	call	f7c <no_printf>
                    
                	switch(pmac_info->mac_type) {
    3908:	e0bffe17 	ldw	r2,-8(fp)
    390c:	10800003 	ldbu	r2,0(r2)
    3910:	10803fcc 	andi	r2,r2,255
    3914:	10c00060 	cmpeqi	r3,r2,1
    3918:	18000c1e 	bne	r3,zero,394c <alt_tse_mac_group_init+0x344>
    391c:	10c000a0 	cmpeqi	r3,r2,2
    3920:	1800021e 	bne	r3,zero,392c <alt_tse_mac_group_init+0x324>
    3924:	10001126 	beq	r2,zero,396c <alt_tse_mac_group_init+0x364>
    3928:	00001806 	br	398c <alt_tse_mac_group_init+0x384>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
    392c:	e0bffc47 	ldb	r2,-15(fp)
    3930:	01000174 	movhi	r4,5
    3934:	212e0d04 	addi	r4,r4,-18380
    3938:	100b883a 	mov	r5,r2
    393c:	01800174 	movhi	r6,5
    3940:	31ae1804 	addi	r6,r6,-18336
    3944:	0000f7c0 	call	f7c <no_printf>
                            break;
    3948:	00001806 	br	39ac <alt_tse_mac_group_init+0x3a4>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
    394c:	e0bffc47 	ldb	r2,-15(fp)
    3950:	01000174 	movhi	r4,5
    3954:	212e0d04 	addi	r4,r4,-18380
    3958:	100b883a 	mov	r5,r2
    395c:	01800174 	movhi	r6,5
    3960:	31ae1d04 	addi	r6,r6,-18316
    3964:	0000f7c0 	call	f7c <no_printf>
                            break;
    3968:	00001006 	br	39ac <alt_tse_mac_group_init+0x3a4>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
    396c:	e0bffc47 	ldb	r2,-15(fp)
    3970:	01000174 	movhi	r4,5
    3974:	212e0d04 	addi	r4,r4,-18380
    3978:	100b883a 	mov	r5,r2
    397c:	01800174 	movhi	r6,5
    3980:	31ae2304 	addi	r6,r6,-18292
    3984:	0000f7c0 	call	f7c <no_printf>
                            break;
    3988:	00000806 	br	39ac <alt_tse_mac_group_init+0x3a4>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
    398c:	e0bffc47 	ldb	r2,-15(fp)
    3990:	01000174 	movhi	r4,5
    3994:	212e0d04 	addi	r4,r4,-18380
    3998:	100b883a 	mov	r5,r2
    399c:	01800174 	movhi	r6,5
    39a0:	31ac4204 	addi	r6,r6,-20216
    39a4:	0000f7c0 	call	f7c <no_printf>
                            break;
    39a8:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
    39ac:	e0bffe17 	ldw	r2,-8(fp)
    39b0:	10800217 	ldw	r2,8(r2)
    39b4:	108003c3 	ldbu	r2,15(r2)
    39b8:	10803fcc 	andi	r2,r2,255
    39bc:	10002126 	beq	r2,zero,3a44 <alt_tse_mac_group_init+0x43c>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
    39c0:	e0fffc47 	ldb	r3,-15(fp)
    39c4:	e0bffe17 	ldw	r2,-8(fp)
    39c8:	10800217 	ldw	r2,8(r2)
    39cc:	108003c3 	ldbu	r2,15(r2)
    39d0:	10803fcc 	andi	r2,r2,255
    39d4:	10000326 	beq	r2,zero,39e4 <alt_tse_mac_group_init+0x3dc>
    39d8:	00800174 	movhi	r2,5
    39dc:	10ae2a04 	addi	r2,r2,-18264
    39e0:	00000206 	br	39ec <alt_tse_mac_group_init+0x3e4>
    39e4:	00800174 	movhi	r2,5
    39e8:	10ae2b04 	addi	r2,r2,-18260
    39ec:	01000174 	movhi	r4,5
    39f0:	212e2c04 	addi	r4,r4,-18256
    39f4:	180b883a 	mov	r5,r3
    39f8:	100d883a 	mov	r6,r2
    39fc:	0000f7c0 	call	f7c <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
    3a00:	e0fffc47 	ldb	r3,-15(fp)
    3a04:	e0bffe17 	ldw	r2,-8(fp)
    3a08:	10800217 	ldw	r2,8(r2)
    3a0c:	10800403 	ldbu	r2,16(r2)
    3a10:	10803fcc 	andi	r2,r2,255
    3a14:	10000326 	beq	r2,zero,3a24 <alt_tse_mac_group_init+0x41c>
    3a18:	00800174 	movhi	r2,5
    3a1c:	10ae2a04 	addi	r2,r2,-18264
    3a20:	00000206 	br	3a2c <alt_tse_mac_group_init+0x424>
    3a24:	00800174 	movhi	r2,5
    3a28:	10ae2b04 	addi	r2,r2,-18260
    3a2c:	01000174 	movhi	r4,5
    3a30:	212e3704 	addi	r4,r4,-18212
    3a34:	180b883a 	mov	r5,r3
    3a38:	100d883a 	mov	r6,r2
    3a3c:	0000f7c0 	call	f7c <no_printf>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
                            break;
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
    3a40:	00006a06 	br	3bec <alt_tse_mac_group_init+0x5e4>
    3a44:	00006906 	br	3bec <alt_tse_mac_group_init+0x5e4>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
    3a48:	e0bffc47 	ldb	r2,-15(fp)
    3a4c:	1000421e 	bne	r2,zero,3b58 <alt_tse_mac_group_init+0x550>
	                    switch(pmac_info->mac_type) {
    3a50:	e0bffe17 	ldw	r2,-8(fp)
    3a54:	10800003 	ldbu	r2,0(r2)
    3a58:	10803fcc 	andi	r2,r2,255
    3a5c:	10c00060 	cmpeqi	r3,r2,1
    3a60:	18000a1e 	bne	r3,zero,3a8c <alt_tse_mac_group_init+0x484>
    3a64:	10c000a0 	cmpeqi	r3,r2,2
    3a68:	1800021e 	bne	r3,zero,3a74 <alt_tse_mac_group_init+0x46c>
    3a6c:	10000d26 	beq	r2,zero,3aa4 <alt_tse_mac_group_init+0x49c>
    3a70:	00001206 	br	3abc <alt_tse_mac_group_init+0x4b4>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
    3a74:	01000174 	movhi	r4,5
    3a78:	212e4204 	addi	r4,r4,-18168
    3a7c:	01400174 	movhi	r5,5
    3a80:	296e1804 	addi	r5,r5,-18336
    3a84:	0000f7c0 	call	f7c <no_printf>
	                            break;
    3a88:	00001206 	br	3ad4 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
    3a8c:	01000174 	movhi	r4,5
    3a90:	212e4204 	addi	r4,r4,-18168
    3a94:	01400174 	movhi	r5,5
    3a98:	296e1d04 	addi	r5,r5,-18316
    3a9c:	0000f7c0 	call	f7c <no_printf>
	                            break;
    3aa0:	00000c06 	br	3ad4 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
    3aa4:	01000174 	movhi	r4,5
    3aa8:	212e4204 	addi	r4,r4,-18168
    3aac:	01400174 	movhi	r5,5
    3ab0:	296e2304 	addi	r5,r5,-18292
    3ab4:	0000f7c0 	call	f7c <no_printf>
	                            break;
    3ab8:	00000606 	br	3ad4 <alt_tse_mac_group_init+0x4cc>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
    3abc:	01000174 	movhi	r4,5
    3ac0:	212e4204 	addi	r4,r4,-18168
    3ac4:	01400174 	movhi	r5,5
    3ac8:	296c4204 	addi	r5,r5,-20216
    3acc:	0000f7c0 	call	f7c <no_printf>
                                    break;
    3ad0:	0001883a 	nop
			    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
    3ad4:	e0bffe17 	ldw	r2,-8(fp)
    3ad8:	10800217 	ldw	r2,8(r2)
    3adc:	108003c3 	ldbu	r2,15(r2)
    3ae0:	10803fcc 	andi	r2,r2,255
    3ae4:	10001c26 	beq	r2,zero,3b58 <alt_tse_mac_group_init+0x550>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
    3ae8:	e0bffe17 	ldw	r2,-8(fp)
    3aec:	10800217 	ldw	r2,8(r2)
    3af0:	108003c3 	ldbu	r2,15(r2)
    3af4:	10803fcc 	andi	r2,r2,255
    3af8:	10000326 	beq	r2,zero,3b08 <alt_tse_mac_group_init+0x500>
    3afc:	00800174 	movhi	r2,5
    3b00:	10ae2a04 	addi	r2,r2,-18264
    3b04:	00000206 	br	3b10 <alt_tse_mac_group_init+0x508>
    3b08:	00800174 	movhi	r2,5
    3b0c:	10ae2b04 	addi	r2,r2,-18260
    3b10:	01000174 	movhi	r4,5
    3b14:	212e4d04 	addi	r4,r4,-18124
    3b18:	100b883a 	mov	r5,r2
    3b1c:	0000f7c0 	call	f7c <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10800217 	ldw	r2,8(r2)
    3b28:	10800403 	ldbu	r2,16(r2)
    3b2c:	10803fcc 	andi	r2,r2,255
    3b30:	10000326 	beq	r2,zero,3b40 <alt_tse_mac_group_init+0x538>
    3b34:	00800174 	movhi	r2,5
    3b38:	10ae2a04 	addi	r2,r2,-18264
    3b3c:	00000206 	br	3b48 <alt_tse_mac_group_init+0x540>
    3b40:	00800174 	movhi	r2,5
    3b44:	10ae2b04 	addi	r2,r2,-18260
    3b48:	01000174 	movhi	r4,5
    3b4c:	212e5804 	addi	r4,r4,-18080
    3b50:	100b883a 	mov	r5,r2
    3b54:	0000f7c0 	call	f7c <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
    3b58:	e0bffe17 	ldw	r2,-8(fp)
    3b5c:	10800217 	ldw	r2,8(r2)
    3b60:	108002c3 	ldbu	r2,11(r2)
    3b64:	10803fcc 	andi	r2,r2,255
    3b68:	10001226 	beq	r2,zero,3bb4 <alt_tse_mac_group_init+0x5ac>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
    3b6c:	e0fffc47 	ldb	r3,-15(fp)
    3b70:	e0bffe17 	ldw	r2,-8(fp)
    3b74:	10800217 	ldw	r2,8(r2)
    3b78:	10800017 	ldw	r2,0(r2)
    3b7c:	01000174 	movhi	r4,5
    3b80:	212e6304 	addi	r4,r4,-18036
    3b84:	180b883a 	mov	r5,r3
    3b88:	100d883a 	mov	r6,r2
    3b8c:	0000f7c0 	call	f7c <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
    3b90:	e17ffc47 	ldb	r5,-15(fp)
    3b94:	e0fffc07 	ldb	r3,-16(fp)
    3b98:	e0bffc47 	ldb	r2,-15(fp)
    3b9c:	1885883a 	add	r2,r3,r2
    3ba0:	01000174 	movhi	r4,5
    3ba4:	212e6f04 	addi	r4,r4,-17988
    3ba8:	100d883a 	mov	r6,r2
    3bac:	0000f7c0 	call	f7c <no_printf>
    3bb0:	00000e06 	br	3bec <alt_tse_mac_group_init+0x5e4>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
    3bb4:	e0bffe17 	ldw	r2,-8(fp)
    3bb8:	10800217 	ldw	r2,8(r2)
    3bbc:	10800017 	ldw	r2,0(r2)
    3bc0:	01000174 	movhi	r4,5
    3bc4:	212e7e04 	addi	r4,r4,-17928
    3bc8:	100b883a 	mov	r5,r2
    3bcc:	0000f7c0 	call	f7c <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
    3bd0:	e0fffc07 	ldb	r3,-16(fp)
    3bd4:	e0bffc47 	ldb	r2,-15(fp)
    3bd8:	1885883a 	add	r2,r3,r2
    3bdc:	01000174 	movhi	r4,5
    3be0:	212e8a04 	addi	r4,r4,-17880
    3be4:	100b883a 	mov	r5,r2
    3be8:	0000f7c0 	call	f7c <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
    3bec:	e0bffc47 	ldb	r2,-15(fp)
    3bf0:	e0fffd17 	ldw	r3,-12(fp)
    3bf4:	10800044 	addi	r2,r2,1
    3bf8:	1085883a 	add	r2,r2,r2
    3bfc:	1085883a 	add	r2,r2,r2
    3c00:	1885883a 	add	r2,r3,r2
    3c04:	e0fffe17 	ldw	r3,-8(fp)
    3c08:	10c00015 	stw	r3,0(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
    3c0c:	e0bffc43 	ldbu	r2,-15(fp)
    3c10:	10800044 	addi	r2,r2,1
    3c14:	e0bffc45 	stb	r2,-15(fp)
    3c18:	e0fffc47 	ldb	r3,-15(fp)
    3c1c:	e0bffd17 	ldw	r2,-12(fp)
    3c20:	10800003 	ldbu	r2,0(r2)
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	18beda16 	blt	r3,r2,3794 <__alt_mem_descriptor_memory+0xdefc3794>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
    3c2c:	d0a84283 	ldbu	r2,-24310(gp)
    3c30:	10c03fcc 	andi	r3,r2,255
    3c34:	00800174 	movhi	r2,5
    3c38:	10999704 	addi	r2,r2,26204
    3c3c:	18c7883a 	add	r3,r3,r3
    3c40:	18c7883a 	add	r3,r3,r3
    3c44:	10c5883a 	add	r2,r2,r3
    3c48:	e0fffd17 	ldw	r3,-12(fp)
    3c4c:	10c00015 	stw	r3,0(r2)
            
            mac_group_count++;
    3c50:	d0a84283 	ldbu	r2,-24310(gp)
    3c54:	10800044 	addi	r2,r2,1
    3c58:	d0a84285 	stb	r2,-24310(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
    3c5c:	e0bffd17 	ldw	r2,-12(fp)
    3c60:	10c00003 	ldbu	r3,0(r2)
    3c64:	e0bffc03 	ldbu	r2,-16(fp)
    3c68:	1885883a 	add	r2,r3,r2
    3c6c:	10bfffc4 	addi	r2,r2,-1
    3c70:	e0bffc05 	stb	r2,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
    3c74:	e0bffc03 	ldbu	r2,-16(fp)
    3c78:	10800044 	addi	r2,r2,1
    3c7c:	e0bffc05 	stb	r2,-16(fp)
    3c80:	e0fffc07 	ldb	r3,-16(fp)
    3c84:	d0a00003 	ldbu	r2,-32768(gp)
    3c88:	10803fcc 	andi	r2,r2,255
    3c8c:	18be6816 	blt	r3,r2,3630 <__alt_mem_descriptor_memory+0xdefc3630>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
    3c90:	0005883a 	mov	r2,zero
}
    3c94:	e037883a 	mov	sp,fp
    3c98:	dfc00117 	ldw	ra,4(sp)
    3c9c:	df000017 	ldw	fp,0(sp)
    3ca0:	dec00204 	addi	sp,sp,8
    3ca4:	f800283a 	ret

00003ca8 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
    3ca8:	deffed04 	addi	sp,sp,-76
    3cac:	dfc01215 	stw	ra,72(sp)
    3cb0:	df001115 	stw	fp,68(sp)
    3cb4:	df001104 	addi	fp,sp,68
    3cb8:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
    3cbc:	e03ff515 	stw	zero,-44(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
    3cc0:	e03ff315 	stw	zero,-52(fp)
    
    alt_8 phy_info_count = 0;
    3cc4:	e03ff405 	stb	zero,-48(fp)
    
    alt_tse_phy_info *pphy = 0;
    3cc8:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
    3ccc:	e03ff715 	stw	zero,-36(fp)
    alt_tse_system_info *psys = 0;
    3cd0:	e03ff815 	stw	zero,-32(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    3cd4:	e0bfff17 	ldw	r2,-4(fp)
    3cd8:	10800117 	ldw	r2,4(r2)
    3cdc:	10800217 	ldw	r2,8(r2)
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e0bff915 	stw	r2,-28(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
    3ce8:	e0bff917 	ldw	r2,-28(fp)
    3cec:	10801004 	addi	r2,r2,64
    3cf0:	10800037 	ldwio	r2,0(r2)
    3cf4:	e0bffa15 	stw	r2,-24(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    3cf8:	e13fff17 	ldw	r4,-4(fp)
    3cfc:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    3d00:	e0bffb05 	stb	r2,-20(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
    3d04:	e03ff005 	stb	zero,-64(fp)
    3d08:	0000ca06 	br	4034 <alt_tse_mac_get_phy+0x38c>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
    3d0c:	e0bff917 	ldw	r2,-28(fp)
    3d10:	10801004 	addi	r2,r2,64
    3d14:	e0fff003 	ldbu	r3,-64(fp)
    3d18:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
    3d1c:	e0bff917 	ldw	r2,-28(fp)
    3d20:	1080a204 	addi	r2,r2,648
    3d24:	10800037 	ldwio	r2,0(r2)
    3d28:	e0bffc15 	stw	r2,-16(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
    3d2c:	e0bff917 	ldw	r2,-28(fp)
    3d30:	1080a304 	addi	r2,r2,652
    3d34:	10800037 	ldwio	r2,0(r2)
    3d38:	e0bff515 	stw	r2,-44(fp)
        
        /* PHY found */
        if (phyid != phyid2)
    3d3c:	e0fffc17 	ldw	r3,-16(fp)
    3d40:	e0bff517 	ldw	r2,-44(fp)
    3d44:	1880b826 	beq	r3,r2,4028 <alt_tse_mac_get_phy+0x380>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
    3d48:	01000704 	movi	r4,28
    3d4c:	00074c00 	call	74c0 <malloc>
    3d50:	e0bff615 	stw	r2,-40(fp)
            if(!pphy) {
    3d54:	e0bff617 	ldw	r2,-40(fp)
    3d58:	1000091e 	bne	r2,zero,3d80 <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
    3d5c:	e0fffb07 	ldb	r3,-20(fp)
    3d60:	e0bff407 	ldb	r2,-48(fp)
    3d64:	01000174 	movhi	r4,5
    3d68:	212e9904 	addi	r4,r4,-17820
    3d6c:	180b883a 	mov	r5,r3
    3d70:	100d883a 	mov	r6,r2
    3d74:	00080f80 	call	80f8 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
    3d78:	00bfffc4 	movi	r2,-1
    3d7c:	0000cc06 	br	40b0 <alt_tse_mac_get_phy+0x408>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
    3d80:	e0bff617 	ldw	r2,-40(fp)
    3d84:	e0fff003 	ldbu	r3,-64(fp)
    3d88:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
    3d8c:	e0bffc17 	ldw	r2,-16(fp)
    3d90:	100691ba 	slli	r3,r2,6
    3d94:	e0bff517 	ldw	r2,-44(fp)
    3d98:	1005d2ba 	srai	r2,r2,10
    3d9c:	10800fcc 	andi	r2,r2,63
    3da0:	1884b03a 	or	r2,r3,r2
    3da4:	e0bffd15 	stw	r2,-12(fp)
            model_number = (phyid2 >> 4) & 0x3f;
    3da8:	e0bff517 	ldw	r2,-44(fp)
    3dac:	1005d13a 	srai	r2,r2,4
    3db0:	10800fcc 	andi	r2,r2,63
    3db4:	e0bffe05 	stb	r2,-8(fp)
            revision_number = phyid2 & 0x0f;
    3db8:	e0bff517 	ldw	r2,-44(fp)
    3dbc:	108003cc 	andi	r2,r2,15
    3dc0:	e0bffe45 	stb	r2,-7(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
    3dc4:	e03ff205 	stb	zero,-56(fp)
            for(i = 0; i < phy_profile_count; i++) {
    3dc8:	e03ff115 	stw	zero,-60(fp)
    3dcc:	00003306 	br	3e9c <alt_tse_mac_get_phy+0x1f4>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
    3dd0:	00800174 	movhi	r2,5
    3dd4:	10999b04 	addi	r2,r2,26220
    3dd8:	e0fff117 	ldw	r3,-60(fp)
    3ddc:	18c7883a 	add	r3,r3,r3
    3de0:	18c7883a 	add	r3,r3,r3
    3de4:	10c5883a 	add	r2,r2,r3
    3de8:	10800017 	ldw	r2,0(r2)
    3dec:	10c01417 	ldw	r3,80(r2)
    3df0:	e0bffd17 	ldw	r2,-12(fp)
    3df4:	1880261e 	bne	r3,r2,3e90 <alt_tse_mac_get_phy+0x1e8>
    3df8:	00800174 	movhi	r2,5
    3dfc:	10999b04 	addi	r2,r2,26220
    3e00:	e0fff117 	ldw	r3,-60(fp)
    3e04:	18c7883a 	add	r3,r3,r3
    3e08:	18c7883a 	add	r3,r3,r3
    3e0c:	10c5883a 	add	r2,r2,r3
    3e10:	10800017 	ldw	r2,0(r2)
    3e14:	10801503 	ldbu	r2,84(r2)
    3e18:	10c03fcc 	andi	r3,r2,255
    3e1c:	e0bffe03 	ldbu	r2,-8(fp)
    3e20:	18801b1e 	bne	r3,r2,3e90 <alt_tse_mac_get_phy+0x1e8>
                {
                    pphy->pphy_profile = pphy_profiles[i];
    3e24:	00800174 	movhi	r2,5
    3e28:	10999b04 	addi	r2,r2,26220
    3e2c:	e0fff117 	ldw	r3,-60(fp)
    3e30:	18c7883a 	add	r3,r3,r3
    3e34:	18c7883a 	add	r3,r3,r3
    3e38:	10c5883a 	add	r2,r2,r3
    3e3c:	10c00017 	ldw	r3,0(r2)
    3e40:	e0bff617 	ldw	r2,-40(fp)
    3e44:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
    3e48:	00800174 	movhi	r2,5
    3e4c:	10999b04 	addi	r2,r2,26220
    3e50:	e0fff117 	ldw	r3,-60(fp)
    3e54:	18c7883a 	add	r3,r3,r3
    3e58:	18c7883a 	add	r3,r3,r3
    3e5c:	10c5883a 	add	r2,r2,r3
    3e60:	10800017 	ldw	r2,0(r2)
    3e64:	100b883a 	mov	r5,r2
    3e68:	e0fff003 	ldbu	r3,-64(fp)
    3e6c:	e0bffb07 	ldb	r2,-20(fp)
    3e70:	01000174 	movhi	r4,5
    3e74:	212ea804 	addi	r4,r4,-17760
    3e78:	180d883a 	mov	r6,r3
    3e7c:	100f883a 	mov	r7,r2
    3e80:	00080f80 	call	80f8 <printf>
                    is_phy_in_profile = 1;
    3e84:	00800044 	movi	r2,1
    3e88:	e0bff205 	stb	r2,-56(fp)
                    break;
    3e8c:	00000706 	br	3eac <alt_tse_mac_get_phy+0x204>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
    3e90:	e0bff117 	ldw	r2,-60(fp)
    3e94:	10800044 	addi	r2,r2,1
    3e98:	e0bff115 	stw	r2,-60(fp)
    3e9c:	d0a84243 	ldbu	r2,-24311(gp)
    3ea0:	10803fcc 	andi	r2,r2,255
    3ea4:	e0fff117 	ldw	r3,-60(fp)
    3ea8:	18bfc916 	blt	r3,r2,3dd0 <__alt_mem_descriptor_memory+0xdefc3dd0>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
    3eac:	e0bff203 	ldbu	r2,-56(fp)
    3eb0:	10000f1e 	bne	r2,zero,3ef0 <alt_tse_mac_get_phy+0x248>
                pphy->pphy_profile = 0;
    3eb4:	e0bff617 	ldw	r2,-40(fp)
    3eb8:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
    3ebc:	e0fff003 	ldbu	r3,-64(fp)
    3ec0:	e0bffb07 	ldb	r2,-20(fp)
    3ec4:	01000174 	movhi	r4,5
    3ec8:	212eb804 	addi	r4,r4,-17696
    3ecc:	180b883a 	mov	r5,r3
    3ed0:	100d883a 	mov	r6,r2
    3ed4:	00080f80 	call	80f8 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
    3ed8:	01000174 	movhi	r4,5
    3edc:	212ec904 	addi	r4,r4,-17628
    3ee0:	00083740 	call	8374 <puts>
                return_value++;
    3ee4:	e0bff317 	ldw	r2,-52(fp)
    3ee8:	10800044 	addi	r2,r2,1
    3eec:	e0bff315 	stw	r2,-52(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
    3ef0:	e0bffd17 	ldw	r2,-12(fp)
    3ef4:	01000174 	movhi	r4,5
    3ef8:	212ed604 	addi	r4,r4,-17576
    3efc:	100b883a 	mov	r5,r2
    3f00:	0000f7c0 	call	f7c <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
    3f04:	e0bffe03 	ldbu	r2,-8(fp)
    3f08:	01000174 	movhi	r4,5
    3f0c:	212ee104 	addi	r4,r4,-17532
    3f10:	100b883a 	mov	r5,r2
    3f14:	0000f7c0 	call	f7c <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
    3f18:	e0bffe43 	ldbu	r2,-7(fp)
    3f1c:	01000174 	movhi	r4,5
    3f20:	212eec04 	addi	r4,r4,-17488
    3f24:	100b883a 	mov	r5,r2
    3f28:	0000f7c0 	call	f7c <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
    3f2c:	e13fff17 	ldw	r4,-4(fp)
    3f30:	e17ff617 	ldw	r5,-40(fp)
    3f34:	00040c40 	call	40c4 <alt_tse_mac_associate_phy>
    3f38:	1000351e 	bne	r2,zero,4010 <alt_tse_mac_get_phy+0x368>
            	
            	pmac_info = pphy->pmac_info;
    3f3c:	e0bff617 	ldw	r2,-40(fp)
    3f40:	10800617 	ldw	r2,24(r2)
    3f44:	e0bff715 	stw	r2,-36(fp)
            	psys = pmac_info->psys_info;
    3f48:	e0bff717 	ldw	r2,-36(fp)
    3f4c:	10800217 	ldw	r2,8(r2)
    3f50:	e0bff815 	stw	r2,-32(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
    3f54:	d8000015 	stw	zero,0(sp)
    3f58:	e13ff617 	ldw	r4,-40(fp)
    3f5c:	000b883a 	mov	r5,zero
    3f60:	01800384 	movi	r6,14
    3f64:	01c00044 	movi	r7,1
    3f68:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
    3f6c:	e13ff617 	ldw	r4,-40(fp)
    3f70:	01400044 	movi	r5,1
    3f74:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
    3f78:	e13ff617 	ldw	r4,-40(fp)
    3f7c:	01400044 	movi	r5,1
    3f80:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
    3f84:	e13ff617 	ldw	r4,-40(fp)
    3f88:	01400044 	movi	r5,1
    3f8c:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
    3f90:	e13ff617 	ldw	r4,-40(fp)
    3f94:	014003f4 	movhi	r5,15
    3f98:	29509004 	addi	r5,r5,16960
    3f9c:	00045440 	call	4544 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
    3fa0:	e0bff617 	ldw	r2,-40(fp)
    3fa4:	10800517 	ldw	r2,20(r2)
    3fa8:	10000f26 	beq	r2,zero,3fe8 <alt_tse_mac_get_phy+0x340>
		            if(pphy->pphy_profile->phy_cfg) {
    3fac:	e0bff617 	ldw	r2,-40(fp)
    3fb0:	10800517 	ldw	r2,20(r2)
    3fb4:	10801717 	ldw	r2,92(r2)
    3fb8:	10000b26 	beq	r2,zero,3fe8 <alt_tse_mac_get_phy+0x340>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
    3fbc:	e0bff617 	ldw	r2,-40(fp)
    3fc0:	10800517 	ldw	r2,20(r2)
    3fc4:	01000174 	movhi	r4,5
    3fc8:	212ef704 	addi	r4,r4,-17444
    3fcc:	100b883a 	mov	r5,r2
    3fd0:	0000f7c0 	call	f7c <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
    3fd4:	e0bff617 	ldw	r2,-40(fp)
    3fd8:	10800517 	ldw	r2,20(r2)
    3fdc:	10801717 	ldw	r2,92(r2)
    3fe0:	e13ff917 	ldw	r4,-28(fp)
    3fe4:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
    3fe8:	e0bff817 	ldw	r2,-32(fp)
    3fec:	10801117 	ldw	r2,68(r2)
    3ff0:	10000726 	beq	r2,zero,4010 <alt_tse_mac_get_phy+0x368>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
    3ff4:	01000174 	movhi	r4,5
    3ff8:	212f0504 	addi	r4,r4,-17388
    3ffc:	0000f7c0 	call	f7c <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
    4000:	e0bff817 	ldw	r2,-32(fp)
    4004:	10801117 	ldw	r2,68(r2)
    4008:	e13ff917 	ldw	r4,-28(fp)
    400c:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
    4010:	01000174 	movhi	r4,5
    4014:	212f1304 	addi	r4,r4,-17332
    4018:	0000f7c0 	call	f7c <no_printf>
	            
            phy_info_count++;
    401c:	e0bff403 	ldbu	r2,-48(fp)
    4020:	10800044 	addi	r2,r2,1
    4024:	e0bff405 	stb	r2,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
    4028:	e0bff003 	ldbu	r2,-64(fp)
    402c:	10800044 	addi	r2,r2,1
    4030:	e0bff005 	stb	r2,-64(fp)
    4034:	e0bff003 	ldbu	r2,-64(fp)
    4038:	10800830 	cmpltui	r2,r2,32
    403c:	103f331e 	bne	r2,zero,3d0c <__alt_mem_descriptor_memory+0xdefc3d0c>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
    4040:	e0bfff17 	ldw	r2,-4(fp)
    4044:	10800003 	ldbu	r2,0(r2)
    4048:	10c03fcc 	andi	r3,r2,255
    404c:	e0bff407 	ldb	r2,-48(fp)
    4050:	18801226 	beq	r3,r2,409c <alt_tse_mac_get_phy+0x3f4>
        if(phy_info_count == 0) {
    4054:	e0bff407 	ldb	r2,-48(fp)
    4058:	1000061e 	bne	r2,zero,4074 <alt_tse_mac_get_phy+0x3cc>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
    405c:	e0bffb07 	ldb	r2,-20(fp)
    4060:	01000174 	movhi	r4,5
    4064:	212f1404 	addi	r4,r4,-17328
    4068:	100b883a 	mov	r5,r2
    406c:	00080f80 	call	80f8 <printf>
    4070:	00000a06 	br	409c <alt_tse_mac_get_phy+0x3f4>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
    4074:	e17ffb07 	ldb	r5,-20(fp)
    4078:	e0fff407 	ldb	r3,-48(fp)
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	10800003 	ldbu	r2,0(r2)
    4084:	10803fcc 	andi	r2,r2,255
    4088:	01000174 	movhi	r4,5
    408c:	212f2004 	addi	r4,r4,-17280
    4090:	180d883a 	mov	r6,r3
    4094:	100f883a 	mov	r7,r2
    4098:	00080f80 	call	80f8 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
    409c:	e0bff917 	ldw	r2,-28(fp)
    40a0:	10801004 	addi	r2,r2,64
    40a4:	e0fffa17 	ldw	r3,-24(fp)
    40a8:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
    40ac:	e0bff317 	ldw	r2,-52(fp)
}
    40b0:	e037883a 	mov	sp,fp
    40b4:	dfc00117 	ldw	ra,4(sp)
    40b8:	df000017 	ldw	fp,0(sp)
    40bc:	dec00204 	addi	sp,sp,8
    40c0:	f800283a 	ret

000040c4 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
    40c4:	defff604 	addi	sp,sp,-40
    40c8:	dfc00915 	stw	ra,36(sp)
    40cc:	df000815 	stw	fp,32(sp)
    40d0:	df000804 	addi	fp,sp,32
    40d4:	e13ffe15 	stw	r4,-8(fp)
    40d8:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
    40dc:	e03ff915 	stw	zero,-28(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
    40e0:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
    40e4:	e03ffc15 	stw	zero,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    40e8:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    40ec:	e13ffe17 	ldw	r4,-8(fp)
    40f0:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    40f4:	e0bffd45 	stb	r2,-11(fp)
    alt_8 sys_info_index = 0;
    40f8:	e03ffd85 	stb	zero,-10(fp)
    
    is_mapped = 0;
    40fc:	e03ffa05 	stb	zero,-24(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
    4100:	e03ff815 	stw	zero,-32(fp)
    4104:	00002b06 	br	41b4 <alt_tse_mac_associate_phy+0xf0>
        pmac_info = pmac_group->pmac_info[i];
    4108:	e0fffe17 	ldw	r3,-8(fp)
    410c:	e0bff817 	ldw	r2,-32(fp)
    4110:	10800044 	addi	r2,r2,1
    4114:	1085883a 	add	r2,r2,r2
    4118:	1085883a 	add	r2,r2,r2
    411c:	1885883a 	add	r2,r3,r2
    4120:	10800017 	ldw	r2,0(r2)
    4124:	e0bffc15 	stw	r2,-16(fp)
        psys = pmac_info->psys_info;
    4128:	e0bffc17 	ldw	r2,-16(fp)
    412c:	10800217 	ldw	r2,8(r2)
    4130:	e0bffb15 	stw	r2,-20(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
    4134:	e0bffb17 	ldw	r2,-20(fp)
    4138:	10c01017 	ldw	r3,64(r2)
    413c:	e0bfff17 	ldw	r2,-4(fp)
    4140:	10800003 	ldbu	r2,0(r2)
    4144:	10803fcc 	andi	r2,r2,255
    4148:	1880171e 	bne	r3,r2,41a8 <alt_tse_mac_associate_phy+0xe4>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    414c:	e13ffc17 	ldw	r4,-16(fp)
    4150:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4154:	e0bffd05 	stb	r2,-12(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
    4158:	e13ffb17 	ldw	r4,-20(fp)
    415c:	00020900 	call	2090 <alt_tse_get_system_index>
    4160:	e0bffd85 	stb	r2,-10(fp)
	        
            pmac_info->pphy_info = pphy;
    4164:	e0bffc17 	ldw	r2,-16(fp)
    4168:	e0ffff17 	ldw	r3,-4(fp)
    416c:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
    4170:	e0bfff17 	ldw	r2,-4(fp)
    4174:	e0fffc17 	ldw	r3,-16(fp)
    4178:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
    417c:	e17ffd47 	ldb	r5,-11(fp)
    4180:	e0fffd07 	ldb	r3,-12(fp)
    4184:	e0bffd87 	ldb	r2,-10(fp)
    4188:	01000174 	movhi	r4,5
    418c:	212f3f04 	addi	r4,r4,-17156
    4190:	180d883a 	mov	r6,r3
    4194:	100f883a 	mov	r7,r2
    4198:	00080f80 	call	80f8 <printf>
            is_mapped = 1;
    419c:	00800044 	movi	r2,1
    41a0:	e0bffa05 	stb	r2,-24(fp)
            break;
    41a4:	00000806 	br	41c8 <alt_tse_mac_associate_phy+0x104>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
    41a8:	e0bff817 	ldw	r2,-32(fp)
    41ac:	10800044 	addi	r2,r2,1
    41b0:	e0bff815 	stw	r2,-32(fp)
    41b4:	e0bffe17 	ldw	r2,-8(fp)
    41b8:	10800003 	ldbu	r2,0(r2)
    41bc:	10803fcc 	andi	r2,r2,255
    41c0:	e0fff817 	ldw	r3,-32(fp)
    41c4:	18bfd016 	blt	r3,r2,4108 <__alt_mem_descriptor_memory+0xdefc4108>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
    41c8:	e0bffa03 	ldbu	r2,-24(fp)
    41cc:	10003c1e 	bne	r2,zero,42c0 <alt_tse_mac_associate_phy+0x1fc>
        for(i = 0; i < pmac_group->channel; i++) {
    41d0:	e03ff815 	stw	zero,-32(fp)
    41d4:	00003506 	br	42ac <alt_tse_mac_associate_phy+0x1e8>
            pmac_info = pmac_group->pmac_info[i];
    41d8:	e0fffe17 	ldw	r3,-8(fp)
    41dc:	e0bff817 	ldw	r2,-32(fp)
    41e0:	10800044 	addi	r2,r2,1
    41e4:	1085883a 	add	r2,r2,r2
    41e8:	1085883a 	add	r2,r2,r2
    41ec:	1885883a 	add	r2,r3,r2
    41f0:	10800017 	ldw	r2,0(r2)
    41f4:	e0bffc15 	stw	r2,-16(fp)
            psys = pmac_info->psys_info;
    41f8:	e0bffc17 	ldw	r2,-16(fp)
    41fc:	10800217 	ldw	r2,8(r2)
    4200:	e0bffb15 	stw	r2,-20(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
    4204:	e0bffb17 	ldw	r2,-20(fp)
    4208:	10800517 	ldw	r2,20(r2)
    420c:	10000326 	beq	r2,zero,421c <alt_tse_mac_associate_phy+0x158>
    4210:	e0bffb17 	ldw	r2,-20(fp)
    4214:	10800617 	ldw	r2,24(r2)
    4218:	1000011e 	bne	r2,zero,4220 <alt_tse_mac_associate_phy+0x15c>
            	continue;
    421c:	00002006 	br	42a0 <alt_tse_mac_associate_phy+0x1dc>
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
    4220:	e0bffb17 	ldw	r2,-20(fp)
    4224:	10801017 	ldw	r2,64(r2)
    4228:	10bfffd8 	cmpnei	r2,r2,-1
    422c:	10001c1e 	bne	r2,zero,42a0 <alt_tse_mac_associate_phy+0x1dc>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4230:	e13ffc17 	ldw	r4,-16(fp)
    4234:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4238:	e0bffd05 	stb	r2,-12(fp)
                sys_info_index = alt_tse_get_system_index(psys);
    423c:	e13ffb17 	ldw	r4,-20(fp)
    4240:	00020900 	call	2090 <alt_tse_get_system_index>
    4244:	e0bffd85 	stb	r2,-10(fp)
                
                pmac_info->pphy_info = pphy;
    4248:	e0bffc17 	ldw	r2,-16(fp)
    424c:	e0ffff17 	ldw	r3,-4(fp)
    4250:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
    4254:	e0bfff17 	ldw	r2,-4(fp)
    4258:	e0fffc17 	ldw	r3,-16(fp)
    425c:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
    4260:	e0bfff17 	ldw	r2,-4(fp)
    4264:	10800003 	ldbu	r2,0(r2)
    4268:	10c03fcc 	andi	r3,r2,255
    426c:	e0bffb17 	ldw	r2,-20(fp)
    4270:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
    4274:	e17ffd47 	ldb	r5,-11(fp)
    4278:	e0fffd07 	ldb	r3,-12(fp)
    427c:	e0bffd87 	ldb	r2,-10(fp)
    4280:	01000174 	movhi	r4,5
    4284:	212f4f04 	addi	r4,r4,-17092
    4288:	180d883a 	mov	r6,r3
    428c:	100f883a 	mov	r7,r2
    4290:	00080f80 	call	80f8 <printf>
                is_mapped = 1;
    4294:	00800044 	movi	r2,1
    4298:	e0bffa05 	stb	r2,-24(fp)
                break;
    429c:	00000806 	br	42c0 <alt_tse_mac_associate_phy+0x1fc>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
    42a0:	e0bff817 	ldw	r2,-32(fp)
    42a4:	10800044 	addi	r2,r2,1
    42a8:	e0bff815 	stw	r2,-32(fp)
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	10800003 	ldbu	r2,0(r2)
    42b4:	10803fcc 	andi	r2,r2,255
    42b8:	e0fff817 	ldw	r3,-32(fp)
    42bc:	18bfc616 	blt	r3,r2,41d8 <__alt_mem_descriptor_memory+0xdefc41d8>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
    42c0:	e0bffa03 	ldbu	r2,-24(fp)
    42c4:	1000091e 	bne	r2,zero,42ec <alt_tse_mac_associate_phy+0x228>
    	pphy->pmac_info = 0;
    42c8:	e0bfff17 	ldw	r2,-4(fp)
    42cc:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
    42d0:	e0bffd47 	ldb	r2,-11(fp)
    42d4:	01000174 	movhi	r4,5
    42d8:	212f6004 	addi	r4,r4,-17024
    42dc:	100b883a 	mov	r5,r2
    42e0:	00080f80 	call	80f8 <printf>
        return_value = TSE_PHY_MAP_ERROR;
    42e4:	00bfffc4 	movi	r2,-1
    42e8:	e0bff915 	stw	r2,-28(fp)
    }
    
    return return_value;
    42ec:	e0bff917 	ldw	r2,-28(fp)
}
    42f0:	e037883a 	mov	sp,fp
    42f4:	dfc00117 	ldw	ra,4(sp)
    42f8:	df000017 	ldw	fp,0(sp)
    42fc:	dec00204 	addi	sp,sp,8
    4300:	f800283a 	ret

00004304 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
    4304:	defff804 	addi	sp,sp,-32
    4308:	dfc00715 	stw	ra,28(sp)
    430c:	df000615 	stw	fp,24(sp)
    4310:	df000604 	addi	fp,sp,24
    4314:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
    4318:	e0bfff17 	ldw	r2,-4(fp)
    431c:	10800217 	ldw	r2,8(r2)
    4320:	e0bffa15 	stw	r2,-24(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
    4324:	e0bffa17 	ldw	r2,-24(fp)
    4328:	10800017 	ldw	r2,0(r2)
    432c:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4330:	e0bfff17 	ldw	r2,-4(fp)
    4334:	10800317 	ldw	r2,12(r2)
    4338:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    433c:	e13fff17 	ldw	r4,-4(fp)
    4340:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4344:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    4348:	e13ffc17 	ldw	r4,-16(fp)
    434c:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    4350:	e0bffd45 	stb	r2,-11(fp)

    if(psys->tse_pcs_ena) {
    4354:	e0bffa17 	ldw	r2,-24(fp)
    4358:	108003c3 	ldbu	r2,15(r2)
    435c:	10803fcc 	andi	r2,r2,255
    4360:	10002c26 	beq	r2,zero,4414 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
    4364:	e0fffd47 	ldb	r3,-11(fp)
    4368:	e0bffd07 	ldb	r2,-12(fp)
    436c:	01000174 	movhi	r4,5
    4370:	212f9104 	addi	r4,r4,-16828
    4374:	180b883a 	mov	r5,r3
    4378:	100d883a 	mov	r6,r2
    437c:	00080f80 	call	80f8 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
    4380:	e0bffb17 	ldw	r2,-20(fp)
    4384:	10808004 	addi	r2,r2,512
    4388:	10801404 	addi	r2,r2,80
    438c:	10800037 	ldwio	r2,0(r2)
    4390:	e0bffe15 	stw	r2,-8(fp)
        
        if(psys->tse_pcs_sgmii) {
    4394:	e0bffa17 	ldw	r2,-24(fp)
    4398:	10800403 	ldbu	r2,16(r2)
    439c:	10803fcc 	andi	r2,r2,255
    43a0:	10000e26 	beq	r2,zero,43dc <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
    43a4:	e0fffd47 	ldb	r3,-11(fp)
    43a8:	e0bffd07 	ldb	r2,-12(fp)
    43ac:	01000174 	movhi	r4,5
    43b0:	212f9f04 	addi	r4,r4,-16772
    43b4:	180b883a 	mov	r5,r3
    43b8:	100d883a 	mov	r6,r2
    43bc:	00080f80 	call	80f8 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
    43c0:	e0bffb17 	ldw	r2,-20(fp)
    43c4:	10808004 	addi	r2,r2,512
    43c8:	10801404 	addi	r2,r2,80
    43cc:	e0fffe17 	ldw	r3,-8(fp)
    43d0:	18c000d4 	ori	r3,r3,3
    43d4:	10c00035 	stwio	r3,0(r2)
    43d8:	00000e06 	br	4414 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
    43dc:	e0fffd47 	ldb	r3,-11(fp)
    43e0:	e0bffd07 	ldb	r2,-12(fp)
    43e4:	01000174 	movhi	r4,5
    43e8:	212fab04 	addi	r4,r4,-16724
    43ec:	180b883a 	mov	r5,r3
    43f0:	100d883a 	mov	r6,r2
    43f4:	00080f80 	call	80f8 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
    43f8:	e0bffb17 	ldw	r2,-20(fp)
    43fc:	10808004 	addi	r2,r2,512
    4400:	10801404 	addi	r2,r2,80
    4404:	e13ffe17 	ldw	r4,-8(fp)
    4408:	00ffff04 	movi	r3,-4
    440c:	20c6703a 	and	r3,r4,r3
    4410:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
    4414:	0005883a 	mov	r2,zero
}
    4418:	e037883a 	mov	sp,fp
    441c:	dfc00117 	ldw	ra,4(sp)
    4420:	df000017 	ldw	fp,0(sp)
    4424:	dec00204 	addi	sp,sp,8
    4428:	f800283a 	ret

0000442c <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
    442c:	defffb04 	addi	sp,sp,-20
    4430:	dfc00415 	stw	ra,16(sp)
    4434:	df000315 	stw	fp,12(sp)
    4438:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
    443c:	e03ffd05 	stb	zero,-12(fp)
	alt_8 j = 0;
    4440:	e03ffd45 	stb	zero,-11(fp)
    
    alt_tse_mac_group *pmac_group = 0;
    4444:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
    4448:	e03fff15 	stw	zero,-4(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
    444c:	00031340 	call	3134 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
    4450:	00033f80 	call	33f8 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
    4454:	00036080 	call	3608 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
    4458:	e03ffd05 	stb	zero,-12(fp)
    445c:	00002f06 	br	451c <alt_tse_phy_init+0xf0>
        pmac_group = pmac_groups[i];
    4460:	e0fffd07 	ldb	r3,-12(fp)
    4464:	00800174 	movhi	r2,5
    4468:	10999704 	addi	r2,r2,26204
    446c:	18c7883a 	add	r3,r3,r3
    4470:	18c7883a 	add	r3,r3,r3
    4474:	10c5883a 	add	r2,r2,r3
    4478:	10800017 	ldw	r2,0(r2)
    447c:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
    4480:	e0bffe17 	ldw	r2,-8(fp)
    4484:	10800117 	ldw	r2,4(r2)
    4488:	10800217 	ldw	r2,8(r2)
    448c:	10800203 	ldbu	r2,8(r2)
    4490:	10803fcc 	andi	r2,r2,255
    4494:	10000326 	beq	r2,zero,44a4 <alt_tse_phy_init+0x78>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
    4498:	e13ffe17 	ldw	r4,-8(fp)
    449c:	0003ca80 	call	3ca8 <alt_tse_mac_get_phy>
    44a0:	00000706 	br	44c0 <alt_tse_phy_init+0x94>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
    44a4:	e0fffd07 	ldb	r3,-12(fp)
    44a8:	e0bffd47 	ldb	r2,-11(fp)
    44ac:	01000174 	movhi	r4,5
    44b0:	212fb704 	addi	r4,r4,-16676
    44b4:	180b883a 	mov	r5,r3
    44b8:	100d883a 	mov	r6,r2
    44bc:	00080f80 	call	80f8 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
    44c0:	e03ffd45 	stb	zero,-11(fp)
    44c4:	00000d06 	br	44fc <alt_tse_phy_init+0xd0>
            pmac_info = pmac_group->pmac_info[j];
    44c8:	e0bffd47 	ldb	r2,-11(fp)
    44cc:	e0fffe17 	ldw	r3,-8(fp)
    44d0:	10800044 	addi	r2,r2,1
    44d4:	1085883a 	add	r2,r2,r2
    44d8:	1085883a 	add	r2,r2,r2
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	10800017 	ldw	r2,0(r2)
    44e4:	e0bfff15 	stw	r2,-4(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
    44e8:	e13fff17 	ldw	r4,-4(fp)
    44ec:	00043040 	call	4304 <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
    44f0:	e0bffd43 	ldbu	r2,-11(fp)
    44f4:	10800044 	addi	r2,r2,1
    44f8:	e0bffd45 	stb	r2,-11(fp)
    44fc:	e0fffd47 	ldb	r3,-11(fp)
    4500:	e0bffe17 	ldw	r2,-8(fp)
    4504:	10800003 	ldbu	r2,0(r2)
    4508:	10803fcc 	andi	r2,r2,255
    450c:	18bfee16 	blt	r3,r2,44c8 <__alt_mem_descriptor_memory+0xdefc44c8>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
    4510:	e0bffd03 	ldbu	r2,-12(fp)
    4514:	10800044 	addi	r2,r2,1
    4518:	e0bffd05 	stb	r2,-12(fp)
    451c:	e0fffd07 	ldb	r3,-12(fp)
    4520:	d0a84283 	ldbu	r2,-24310(gp)
    4524:	10803fcc 	andi	r2,r2,255
    4528:	18bfcd16 	blt	r3,r2,4460 <__alt_mem_descriptor_memory+0xdefc4460>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
    452c:	0005883a 	mov	r2,zero
}
    4530:	e037883a 	mov	sp,fp
    4534:	dfc00117 	ldw	ra,4(sp)
    4538:	df000017 	ldw	fp,0(sp)
    453c:	dec00204 	addi	sp,sp,8
    4540:	f800283a 	ret

00004544 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
    4544:	defff704 	addi	sp,sp,-36
    4548:	dfc00815 	stw	ra,32(sp)
    454c:	df000715 	stw	fp,28(sp)
    4550:	df000704 	addi	fp,sp,28
    4554:	e13ffe15 	stw	r4,-8(fp)
    4558:	e17fff15 	stw	r5,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    455c:	e0bffe17 	ldw	r2,-8(fp)
    4560:	10800617 	ldw	r2,24(r2)
    4564:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4568:	e0bffb17 	ldw	r2,-20(fp)
    456c:	10800317 	ldw	r2,12(r2)
    4570:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4574:	e13ffb17 	ldw	r4,-20(fp)
    4578:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    457c:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    4580:	e13ffc17 	ldw	r4,-16(fp)
    4584:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    4588:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    458c:	e13ffe17 	ldw	r4,-8(fp)
    4590:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    4594:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10800003 	ldbu	r2,0(r2)
    45a0:	10803fcc 	andi	r2,r2,255
    45a4:	e13ffe17 	ldw	r4,-8(fp)
    45a8:	100b883a 	mov	r5,r2
    45ac:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
    45b0:	e13ffe17 	ldw	r4,-8(fp)
    45b4:	01400044 	movi	r5,1
    45b8:	018000c4 	movi	r6,3
    45bc:	01c00044 	movi	r7,1
    45c0:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    45c4:	10000d1e 	bne	r2,zero,45fc <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
    45c8:	e0fffd47 	ldb	r3,-11(fp)
    45cc:	e0bffd07 	ldb	r2,-12(fp)
    45d0:	01000174 	movhi	r4,5
    45d4:	212fcd04 	addi	r4,r4,-16588
    45d8:	180b883a 	mov	r5,r3
    45dc:	100d883a 	mov	r6,r2
    45e0:	00080f80 	call	80f8 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    45e4:	e0bffd83 	ldbu	r2,-10(fp)
    45e8:	e13ffe17 	ldw	r4,-8(fp)
    45ec:	100b883a 	mov	r5,r2
    45f0:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
    45f4:	00bfff84 	movi	r2,-2
    45f8:	00003c06 	br	46ec <alt_tse_phy_restart_an+0x1a8>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
    45fc:	00800044 	movi	r2,1
    4600:	d8800015 	stw	r2,0(sp)
    4604:	e13ffe17 	ldw	r4,-8(fp)
    4608:	000b883a 	mov	r5,zero
    460c:	01800304 	movi	r6,12
    4610:	01c00044 	movi	r7,1
    4614:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    4618:	00800044 	movi	r2,1
    461c:	d8800015 	stw	r2,0(sp)
    4620:	e13ffe17 	ldw	r4,-8(fp)
    4624:	000b883a 	mov	r5,zero
    4628:	01800244 	movi	r6,9
    462c:	01c00044 	movi	r7,1
    4630:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    4634:	e0fffd47 	ldb	r3,-11(fp)
    4638:	e0bffd07 	ldb	r2,-12(fp)
    463c:	01000174 	movhi	r4,5
    4640:	212fdd04 	addi	r4,r4,-16524
    4644:	180b883a 	mov	r5,r3
    4648:	100d883a 	mov	r6,r2
    464c:	00080f80 	call	80f8 <printf>
    
    alt_32 timeout = 0;
    4650:	e03ffa15 	stw	zero,-24(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
    4654:	00001306 	br	46a4 <alt_tse_phy_restart_an+0x160>
        if(timeout++ > timeout_threshold) {
    4658:	e0bffa17 	ldw	r2,-24(fp)
    465c:	10c00044 	addi	r3,r2,1
    4660:	e0fffa15 	stw	r3,-24(fp)
    4664:	1007883a 	mov	r3,r2
    4668:	e0bfff17 	ldw	r2,-4(fp)
    466c:	10c00d2e 	bgeu	r2,r3,46a4 <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
    4670:	e0fffd47 	ldb	r3,-11(fp)
    4674:	e0bffd07 	ldb	r2,-12(fp)
    4678:	01000174 	movhi	r4,5
    467c:	212fef04 	addi	r4,r4,-16452
    4680:	180b883a 	mov	r5,r3
    4684:	100d883a 	mov	r6,r2
    4688:	00080f80 	call	80f8 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    468c:	e0bffd83 	ldbu	r2,-10(fp)
    4690:	e13ffe17 	ldw	r4,-8(fp)
    4694:	100b883a 	mov	r5,r2
    4698:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
    469c:	00bfffc4 	movi	r2,-1
    46a0:	00001206 	br	46ec <alt_tse_phy_restart_an+0x1a8>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
    46a4:	e13ffe17 	ldw	r4,-8(fp)
    46a8:	01400044 	movi	r5,1
    46ac:	01800144 	movi	r6,5
    46b0:	01c00044 	movi	r7,1
    46b4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    46b8:	103fe726 	beq	r2,zero,4658 <__alt_mem_descriptor_memory+0xdefc4658>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
    46bc:	e0fffd47 	ldb	r3,-11(fp)
    46c0:	e0bffd07 	ldb	r2,-12(fp)
    46c4:	01000174 	movhi	r4,5
    46c8:	212ffb04 	addi	r4,r4,-16404
    46cc:	180b883a 	mov	r5,r3
    46d0:	100d883a 	mov	r6,r2
    46d4:	00080f80 	call	80f8 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    46d8:	e0bffd83 	ldbu	r2,-10(fp)
    46dc:	e13ffe17 	ldw	r4,-8(fp)
    46e0:	100b883a 	mov	r5,r2
    46e4:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
    46e8:	0005883a 	mov	r2,zero
}
    46ec:	e037883a 	mov	sp,fp
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	df000017 	ldw	fp,0(sp)
    46f8:	dec00204 	addi	sp,sp,8
    46fc:	f800283a 	ret

00004700 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
    4700:	defff904 	addi	sp,sp,-28
    4704:	dfc00615 	stw	ra,24(sp)
    4708:	df000515 	stw	fp,20(sp)
    470c:	df000504 	addi	fp,sp,20
    4710:	e13ffe15 	stw	r4,-8(fp)
    4714:	e17fff15 	stw	r5,-4(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    4718:	e0bffe17 	ldw	r2,-8(fp)
    471c:	10800617 	ldw	r2,24(r2)
    4720:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4724:	e0bffb17 	ldw	r2,-20(fp)
    4728:	10800317 	ldw	r2,12(r2)
    472c:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4730:	e13ffb17 	ldw	r4,-20(fp)
    4734:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4738:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
    473c:	e13ffc17 	ldw	r4,-16(fp)
    4740:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    4744:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    4748:	e13ffe17 	ldw	r4,-8(fp)
    474c:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    4750:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    4754:	e0bffe17 	ldw	r2,-8(fp)
    4758:	10800003 	ldbu	r2,0(r2)
    475c:	10803fcc 	andi	r2,r2,255
    4760:	e13ffe17 	ldw	r4,-8(fp)
    4764:	100b883a 	mov	r5,r2
    4768:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    476c:	e0fffd47 	ldb	r3,-11(fp)
    4770:	e0bffd07 	ldb	r2,-12(fp)
    4774:	01000174 	movhi	r4,5
    4778:	21300704 	addi	r4,r4,-16356
    477c:	180b883a 	mov	r5,r3
    4780:	100d883a 	mov	r6,r2
    4784:	00080f80 	call	80f8 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
    4788:	e13ffe17 	ldw	r4,-8(fp)
    478c:	000b883a 	mov	r5,zero
    4790:	01800384 	movi	r6,14
    4794:	01c00044 	movi	r7,1
    4798:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    479c:	1000061e 	bne	r2,zero,47b8 <alt_tse_phy_check_link+0xb8>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
    47a0:	e13ffe17 	ldw	r4,-8(fp)
    47a4:	01400044 	movi	r5,1
    47a8:	01800144 	movi	r6,5
    47ac:	01c00044 	movi	r7,1
    47b0:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
    47b4:	1000191e 	bne	r2,zero,481c <alt_tse_phy_check_link+0x11c>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
    47b8:	e0fffd47 	ldb	r3,-11(fp)
    47bc:	e0bffd07 	ldb	r2,-12(fp)
    47c0:	01000174 	movhi	r4,5
    47c4:	21301204 	addi	r4,r4,-16312
    47c8:	180b883a 	mov	r5,r3
    47cc:	100d883a 	mov	r6,r2
    47d0:	00080f80 	call	80f8 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
    47d4:	e13ffe17 	ldw	r4,-8(fp)
    47d8:	e17fff17 	ldw	r5,-4(fp)
    47dc:	00045440 	call	4544 <alt_tse_phy_restart_an>
    47e0:	10bfffd8 	cmpnei	r2,r2,-1
    47e4:	10000d1e 	bne	r2,zero,481c <alt_tse_phy_check_link+0x11c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
    47e8:	e0fffd47 	ldb	r3,-11(fp)
    47ec:	e0bffd07 	ldb	r2,-12(fp)
    47f0:	01000174 	movhi	r4,5
    47f4:	21302604 	addi	r4,r4,-16232
    47f8:	180b883a 	mov	r5,r3
    47fc:	100d883a 	mov	r6,r2
    4800:	00080f80 	call	80f8 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    4804:	e0bffd83 	ldbu	r2,-10(fp)
    4808:	e13ffe17 	ldw	r4,-8(fp)
    480c:	100b883a 	mov	r5,r2
    4810:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
    4814:	00bfffc4 	movi	r2,-1
    4818:	00000c06 	br	484c <alt_tse_phy_check_link+0x14c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
    481c:	e0fffd47 	ldb	r3,-11(fp)
    4820:	e0bffd07 	ldb	r2,-12(fp)
    4824:	01000174 	movhi	r4,5
    4828:	21303304 	addi	r4,r4,-16180
    482c:	180b883a 	mov	r5,r3
    4830:	100d883a 	mov	r6,r2
    4834:	00080f80 	call	80f8 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    4838:	e0bffd83 	ldbu	r2,-10(fp)
    483c:	e13ffe17 	ldw	r4,-8(fp)
    4840:	100b883a 	mov	r5,r2
    4844:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
    4848:	0005883a 	mov	r2,zero
}
    484c:	e037883a 	mov	sp,fp
    4850:	dfc00117 	ldw	ra,4(sp)
    4854:	df000017 	ldw	fp,0(sp)
    4858:	dec00204 	addi	sp,sp,8
    485c:	f800283a 	ret

00004860 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
    4860:	defff904 	addi	sp,sp,-28
    4864:	dfc00615 	stw	ra,24(sp)
    4868:	df000515 	stw	fp,20(sp)
    486c:	df000504 	addi	fp,sp,20
    4870:	e13fff15 	stw	r4,-4(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
    4874:	e03ffb15 	stw	zero,-20(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    4878:	e0bfff17 	ldw	r2,-4(fp)
    487c:	10800617 	ldw	r2,24(r2)
    4880:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4884:	e0bffc17 	ldw	r2,-16(fp)
    4888:	10800317 	ldw	r2,12(r2)
    488c:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4890:	e13ffc17 	ldw	r4,-16(fp)
    4894:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4898:	e0bffe05 	stb	r2,-8(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
    489c:	e13ffd17 	ldw	r4,-12(fp)
    48a0:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    48a4:	e0bffe45 	stb	r2,-7(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    48a8:	e13fff17 	ldw	r4,-4(fp)
    48ac:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    48b0:	e0bffe85 	stb	r2,-6(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    48b4:	e0bfff17 	ldw	r2,-4(fp)
    48b8:	10800003 	ldbu	r2,0(r2)
    48bc:	10803fcc 	andi	r2,r2,255
    48c0:	e13fff17 	ldw	r4,-4(fp)
    48c4:	100b883a 	mov	r5,r2
    48c8:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
    48cc:	e13fff17 	ldw	r4,-4(fp)
    48d0:	01400044 	movi	r5,1
    48d4:	018000c4 	movi	r6,3
    48d8:	01c00044 	movi	r7,1
    48dc:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    48e0:	10000d1e 	bne	r2,zero,4918 <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
    48e4:	e0fffe47 	ldb	r3,-7(fp)
    48e8:	e0bffe07 	ldb	r2,-8(fp)
    48ec:	01000174 	movhi	r4,5
    48f0:	212fcd04 	addi	r4,r4,-16588
    48f4:	180b883a 	mov	r5,r3
    48f8:	100d883a 	mov	r6,r2
    48fc:	00080f80 	call	80f8 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    4900:	e0bffe83 	ldbu	r2,-6(fp)
    4904:	e13fff17 	ldw	r4,-4(fp)
    4908:	100b883a 	mov	r5,r2
    490c:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
    4910:	00bfff84 	movi	r2,-2
    4914:	00013306 	br	4de4 <alt_tse_phy_get_cap+0x584>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    4918:	e13fff17 	ldw	r4,-4(fp)
    491c:	01400134 	movhi	r5,4
    4920:	29742404 	addi	r5,r5,-12144
    4924:	00045440 	call	4544 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
    4928:	e13fff17 	ldw	r4,-4(fp)
    492c:	01400044 	movi	r5,1
    4930:	01800144 	movi	r6,5
    4934:	01c00044 	movi	r7,1
    4938:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    493c:	1000021e 	bne	r2,zero,4948 <alt_tse_phy_get_cap+0xe8>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
    4940:	00bfffc4 	movi	r2,-1
    4944:	e0bffb15 	stw	r2,-20(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
    4948:	e13fff17 	ldw	r4,-4(fp)
    494c:	014003c4 	movi	r5,15
    4950:	018003c4 	movi	r6,15
    4954:	01c00044 	movi	r7,1
    4958:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    495c:	1007883a 	mov	r3,r2
    4960:	e0bfff17 	ldw	r2,-4(fp)
    4964:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
    4968:	e13fff17 	ldw	r4,-4(fp)
    496c:	014003c4 	movi	r5,15
    4970:	01800384 	movi	r6,14
    4974:	01c00044 	movi	r7,1
    4978:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    497c:	1007883a 	mov	r3,r2
    4980:	e0bfff17 	ldw	r2,-4(fp)
    4984:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
    4988:	e13fff17 	ldw	r4,-4(fp)
    498c:	014003c4 	movi	r5,15
    4990:	01800344 	movi	r6,13
    4994:	01c00044 	movi	r7,1
    4998:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    499c:	1007883a 	mov	r3,r2
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    49a8:	e13fff17 	ldw	r4,-4(fp)
    49ac:	014003c4 	movi	r5,15
    49b0:	01800304 	movi	r6,12
    49b4:	01c00044 	movi	r7,1
    49b8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    49bc:	1007883a 	mov	r3,r2
    49c0:	e0bfff17 	ldw	r2,-4(fp)
    49c4:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    49c8:	e13fff17 	ldw	r4,-4(fp)
    49cc:	01400044 	movi	r5,1
    49d0:	018003c4 	movi	r6,15
    49d4:	01c00044 	movi	r7,1
    49d8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    49dc:	1007883a 	mov	r3,r2
    49e0:	e0bfff17 	ldw	r2,-4(fp)
    49e4:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    49e8:	e13fff17 	ldw	r4,-4(fp)
    49ec:	01400044 	movi	r5,1
    49f0:	01800384 	movi	r6,14
    49f4:	01c00044 	movi	r7,1
    49f8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    49fc:	1007883a 	mov	r3,r2
    4a00:	e0bfff17 	ldw	r2,-4(fp)
    4a04:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
    4a08:	e13fff17 	ldw	r4,-4(fp)
    4a0c:	01400044 	movi	r5,1
    4a10:	01800344 	movi	r6,13
    4a14:	01c00044 	movi	r7,1
    4a18:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4a1c:	1007883a 	mov	r3,r2
    4a20:	e0bfff17 	ldw	r2,-4(fp)
    4a24:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
    4a28:	e13fff17 	ldw	r4,-4(fp)
    4a2c:	01400044 	movi	r5,1
    4a30:	01800284 	movi	r6,10
    4a34:	01c00044 	movi	r7,1
    4a38:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4a3c:	1007883a 	mov	r3,r2
    4a40:	e0bfff17 	ldw	r2,-4(fp)
    4a44:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
    4a48:	e13fff17 	ldw	r4,-4(fp)
    4a4c:	01400044 	movi	r5,1
    4a50:	01800244 	movi	r6,9
    4a54:	01c00044 	movi	r7,1
    4a58:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4a5c:	1007883a 	mov	r3,r2
    4a60:	e0bfff17 	ldw	r2,-4(fp)
    4a64:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
    4a68:	e13fff17 	ldw	r4,-4(fp)
    4a6c:	01400044 	movi	r5,1
    4a70:	01800304 	movi	r6,12
    4a74:	01c00044 	movi	r7,1
    4a78:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4a7c:	1007883a 	mov	r3,r2
    4a80:	e0bfff17 	ldw	r2,-4(fp)
    4a84:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
    4a88:	e13fff17 	ldw	r4,-4(fp)
    4a8c:	01400044 	movi	r5,1
    4a90:	018002c4 	movi	r6,11
    4a94:	01c00044 	movi	r7,1
    4a98:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4a9c:	1007883a 	mov	r3,r2
    4aa0:	e0bfff17 	ldw	r2,-4(fp)
    4aa4:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
    4aa8:	e13fff17 	ldw	r4,-4(fp)
    4aac:	01400284 	movi	r5,10
    4ab0:	018002c4 	movi	r6,11
    4ab4:	01c00044 	movi	r7,1
    4ab8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4abc:	1007883a 	mov	r3,r2
    4ac0:	e0bfff17 	ldw	r2,-4(fp)
    4ac4:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
    4ac8:	e13fff17 	ldw	r4,-4(fp)
    4acc:	01400284 	movi	r5,10
    4ad0:	01800284 	movi	r6,10
    4ad4:	01c00044 	movi	r7,1
    4ad8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4adc:	1007883a 	mov	r3,r2
    4ae0:	e0bfff17 	ldw	r2,-4(fp)
    4ae4:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
    4ae8:	e13fff17 	ldw	r4,-4(fp)
    4aec:	01400144 	movi	r5,5
    4af0:	01800244 	movi	r6,9
    4af4:	01c00044 	movi	r7,1
    4af8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4afc:	1007883a 	mov	r3,r2
    4b00:	e0bfff17 	ldw	r2,-4(fp)
    4b04:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
    4b08:	e13fff17 	ldw	r4,-4(fp)
    4b0c:	01400144 	movi	r5,5
    4b10:	01800204 	movi	r6,8
    4b14:	01c00044 	movi	r7,1
    4b18:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4b1c:	1007883a 	mov	r3,r2
    4b20:	e0bfff17 	ldw	r2,-4(fp)
    4b24:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
    4b28:	e13fff17 	ldw	r4,-4(fp)
    4b2c:	01400144 	movi	r5,5
    4b30:	018001c4 	movi	r6,7
    4b34:	01c00044 	movi	r7,1
    4b38:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4b3c:	1007883a 	mov	r3,r2
    4b40:	e0bfff17 	ldw	r2,-4(fp)
    4b44:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
    4b48:	e13fff17 	ldw	r4,-4(fp)
    4b4c:	01400144 	movi	r5,5
    4b50:	01800184 	movi	r6,6
    4b54:	01c00044 	movi	r7,1
    4b58:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4b5c:	1007883a 	mov	r3,r2
    4b60:	e0bfff17 	ldw	r2,-4(fp)
    4b64:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
    4b68:	e13fff17 	ldw	r4,-4(fp)
    4b6c:	01400144 	movi	r5,5
    4b70:	01800144 	movi	r6,5
    4b74:	01c00044 	movi	r7,1
    4b78:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4b7c:	1007883a 	mov	r3,r2
    4b80:	e0bfff17 	ldw	r2,-4(fp)
    4b84:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
    4b88:	e0fffe47 	ldb	r3,-7(fp)
    4b8c:	e0bffe07 	ldb	r2,-8(fp)
    4b90:	01000174 	movhi	r4,5
    4b94:	21303e04 	addi	r4,r4,-16136
    4b98:	180b883a 	mov	r5,r3
    4b9c:	100d883a 	mov	r6,r2
    4ba0:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
    4ba4:	e0bfff17 	ldw	r2,-4(fp)
    4ba8:	10800043 	ldbu	r2,1(r2)
    4bac:	10803fcc 	andi	r2,r2,255
    4bb0:	01000174 	movhi	r4,5
    4bb4:	21304904 	addi	r4,r4,-16092
    4bb8:	100b883a 	mov	r5,r2
    4bbc:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
    4bc0:	e0bfff17 	ldw	r2,-4(fp)
    4bc4:	10800083 	ldbu	r2,2(r2)
    4bc8:	10803fcc 	andi	r2,r2,255
    4bcc:	01000174 	movhi	r4,5
    4bd0:	21305304 	addi	r4,r4,-16052
    4bd4:	100b883a 	mov	r5,r2
    4bd8:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
    4bdc:	e0bfff17 	ldw	r2,-4(fp)
    4be0:	108000c3 	ldbu	r2,3(r2)
    4be4:	10803fcc 	andi	r2,r2,255
    4be8:	01000174 	movhi	r4,5
    4bec:	21305d04 	addi	r4,r4,-16012
    4bf0:	100b883a 	mov	r5,r2
    4bf4:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
    4bf8:	e0bfff17 	ldw	r2,-4(fp)
    4bfc:	10800103 	ldbu	r2,4(r2)
    4c00:	10803fcc 	andi	r2,r2,255
    4c04:	01000174 	movhi	r4,5
    4c08:	21306704 	addi	r4,r4,-15972
    4c0c:	100b883a 	mov	r5,r2
    4c10:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
    4c14:	e0bfff17 	ldw	r2,-4(fp)
    4c18:	10800143 	ldbu	r2,5(r2)
    4c1c:	10803fcc 	andi	r2,r2,255
    4c20:	01000174 	movhi	r4,5
    4c24:	21307104 	addi	r4,r4,-15932
    4c28:	100b883a 	mov	r5,r2
    4c2c:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
    4c30:	e0bfff17 	ldw	r2,-4(fp)
    4c34:	10800183 	ldbu	r2,6(r2)
    4c38:	10803fcc 	andi	r2,r2,255
    4c3c:	01000174 	movhi	r4,5
    4c40:	21307b04 	addi	r4,r4,-15892
    4c44:	100b883a 	mov	r5,r2
    4c48:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
    4c4c:	e0bfff17 	ldw	r2,-4(fp)
    4c50:	108001c3 	ldbu	r2,7(r2)
    4c54:	10803fcc 	andi	r2,r2,255
    4c58:	01000174 	movhi	r4,5
    4c5c:	21308504 	addi	r4,r4,-15852
    4c60:	100b883a 	mov	r5,r2
    4c64:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
    4c68:	e0bfff17 	ldw	r2,-4(fp)
    4c6c:	10800203 	ldbu	r2,8(r2)
    4c70:	10803fcc 	andi	r2,r2,255
    4c74:	01000174 	movhi	r4,5
    4c78:	21308f04 	addi	r4,r4,-15812
    4c7c:	100b883a 	mov	r5,r2
    4c80:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
    4c84:	e0bfff17 	ldw	r2,-4(fp)
    4c88:	10800243 	ldbu	r2,9(r2)
    4c8c:	10803fcc 	andi	r2,r2,255
    4c90:	01000174 	movhi	r4,5
    4c94:	21309904 	addi	r4,r4,-15772
    4c98:	100b883a 	mov	r5,r2
    4c9c:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
    4ca0:	e0bfff17 	ldw	r2,-4(fp)
    4ca4:	10800283 	ldbu	r2,10(r2)
    4ca8:	10803fcc 	andi	r2,r2,255
    4cac:	01000174 	movhi	r4,5
    4cb0:	2130a304 	addi	r4,r4,-15732
    4cb4:	100b883a 	mov	r5,r2
    4cb8:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
    4cbc:	e0bfff17 	ldw	r2,-4(fp)
    4cc0:	108002c3 	ldbu	r2,11(r2)
    4cc4:	10803fcc 	andi	r2,r2,255
    4cc8:	01000174 	movhi	r4,5
    4ccc:	2130ad04 	addi	r4,r4,-15692
    4cd0:	100b883a 	mov	r5,r2
    4cd4:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "\n");
    4cd8:	01000174 	movhi	r4,5
    4cdc:	212f1304 	addi	r4,r4,-17332
    4ce0:	0000f7c0 	call	f7c <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
    4ce4:	e0fffe47 	ldb	r3,-7(fp)
    4ce8:	e0bffe07 	ldb	r2,-8(fp)
    4cec:	01000174 	movhi	r4,5
    4cf0:	2130b704 	addi	r4,r4,-15652
    4cf4:	180b883a 	mov	r5,r3
    4cf8:	100d883a 	mov	r6,r2
    4cfc:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
    4d00:	e0bfff17 	ldw	r2,-4(fp)
    4d04:	10800303 	ldbu	r2,12(r2)
    4d08:	10803fcc 	andi	r2,r2,255
    4d0c:	01000174 	movhi	r4,5
    4d10:	21305d04 	addi	r4,r4,-16012
    4d14:	100b883a 	mov	r5,r2
    4d18:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800343 	ldbu	r2,13(r2)
    4d24:	10803fcc 	andi	r2,r2,255
    4d28:	01000174 	movhi	r4,5
    4d2c:	21306704 	addi	r4,r4,-15972
    4d30:	100b883a 	mov	r5,r2
    4d34:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
    4d38:	e0bfff17 	ldw	r2,-4(fp)
    4d3c:	10800383 	ldbu	r2,14(r2)
    4d40:	10803fcc 	andi	r2,r2,255
    4d44:	01000174 	movhi	r4,5
    4d48:	21307104 	addi	r4,r4,-15932
    4d4c:	100b883a 	mov	r5,r2
    4d50:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
    4d54:	e0bfff17 	ldw	r2,-4(fp)
    4d58:	108003c3 	ldbu	r2,15(r2)
    4d5c:	10803fcc 	andi	r2,r2,255
    4d60:	01000174 	movhi	r4,5
    4d64:	2130c404 	addi	r4,r4,-15600
    4d68:	100b883a 	mov	r5,r2
    4d6c:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
    4d70:	e0bfff17 	ldw	r2,-4(fp)
    4d74:	10800403 	ldbu	r2,16(r2)
    4d78:	10803fcc 	andi	r2,r2,255
    4d7c:	01000174 	movhi	r4,5
    4d80:	2130ce04 	addi	r4,r4,-15560
    4d84:	100b883a 	mov	r5,r2
    4d88:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
    4d8c:	e0bfff17 	ldw	r2,-4(fp)
    4d90:	10800443 	ldbu	r2,17(r2)
    4d94:	10803fcc 	andi	r2,r2,255
    4d98:	01000174 	movhi	r4,5
    4d9c:	2130d804 	addi	r4,r4,-15520
    4da0:	100b883a 	mov	r5,r2
    4da4:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
    4da8:	e0bfff17 	ldw	r2,-4(fp)
    4dac:	10800483 	ldbu	r2,18(r2)
    4db0:	10803fcc 	andi	r2,r2,255
    4db4:	01000174 	movhi	r4,5
    4db8:	2130e204 	addi	r4,r4,-15480
    4dbc:	100b883a 	mov	r5,r2
    4dc0:	0000f7c0 	call	f7c <no_printf>
    tse_dprintf(6, "\n");
    4dc4:	01000174 	movhi	r4,5
    4dc8:	212f1304 	addi	r4,r4,-17332
    4dcc:	0000f7c0 	call	f7c <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    4dd0:	e0bffe83 	ldbu	r2,-6(fp)
    4dd4:	e13fff17 	ldw	r4,-4(fp)
    4dd8:	100b883a 	mov	r5,r2
    4ddc:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
    4de0:	e0bffb17 	ldw	r2,-20(fp)
    
}
    4de4:	e037883a 	mov	sp,fp
    4de8:	dfc00117 	ldw	ra,4(sp)
    4dec:	df000017 	ldw	fp,0(sp)
    4df0:	dec00204 	addi	sp,sp,8
    4df4:	f800283a 	ret

00004df8 <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
    4df8:	defff804 	addi	sp,sp,-32
    4dfc:	dfc00715 	stw	ra,28(sp)
    4e00:	df000615 	stw	fp,24(sp)
    4e04:	df000604 	addi	fp,sp,24
    4e08:	e13ffe15 	stw	r4,-8(fp)
    4e0c:	2805883a 	mov	r2,r5
    4e10:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    4e14:	e0bffe17 	ldw	r2,-8(fp)
    4e18:	10800617 	ldw	r2,24(r2)
    4e1c:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4e20:	e0bffb17 	ldw	r2,-20(fp)
    4e24:	10800317 	ldw	r2,12(r2)
    4e28:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4e2c:	e13ffb17 	ldw	r4,-20(fp)
    4e30:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4e34:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    4e38:	e13ffc17 	ldw	r4,-16(fp)
    4e3c:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    4e40:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    4e44:	e13ffe17 	ldw	r4,-8(fp)
    4e48:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    4e4c:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    4e50:	e0bffe17 	ldw	r2,-8(fp)
    4e54:	10800003 	ldbu	r2,0(r2)
    4e58:	10803fcc 	andi	r2,r2,255
    4e5c:	e13ffe17 	ldw	r4,-8(fp)
    4e60:	100b883a 	mov	r5,r2
    4e64:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
    4e68:	e0bfff03 	ldbu	r2,-4(fp)
    4e6c:	10002b26 	beq	r2,zero,4f1c <alt_tse_phy_set_adv_1000+0x124>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
    4e70:	e13ffe17 	ldw	r4,-8(fp)
    4e74:	014003c4 	movi	r5,15
    4e78:	01800344 	movi	r6,13
    4e7c:	01c00044 	movi	r7,1
    4e80:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4e84:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
    4e88:	e0bffdc3 	ldbu	r2,-9(fp)
    4e8c:	d8800015 	stw	r2,0(sp)
    4e90:	e13ffe17 	ldw	r4,-8(fp)
    4e94:	01400244 	movi	r5,9
    4e98:	01800244 	movi	r6,9
    4e9c:	01c00044 	movi	r7,1
    4ea0:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    4ea4:	e17ffd47 	ldb	r5,-11(fp)
    4ea8:	e0fffd07 	ldb	r3,-12(fp)
    4eac:	e0bffdc3 	ldbu	r2,-9(fp)
    4eb0:	01000174 	movhi	r4,5
    4eb4:	2130ec04 	addi	r4,r4,-15440
    4eb8:	180d883a 	mov	r6,r3
    4ebc:	100f883a 	mov	r7,r2
    4ec0:	0000f7c0 	call	f7c <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    4ec4:	e13ffe17 	ldw	r4,-8(fp)
    4ec8:	014003c4 	movi	r5,15
    4ecc:	01800304 	movi	r6,12
    4ed0:	01c00044 	movi	r7,1
    4ed4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    4ed8:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
    4edc:	e0bffdc3 	ldbu	r2,-9(fp)
    4ee0:	d8800015 	stw	r2,0(sp)
    4ee4:	e13ffe17 	ldw	r4,-8(fp)
    4ee8:	01400244 	movi	r5,9
    4eec:	01800204 	movi	r6,8
    4ef0:	01c00044 	movi	r7,1
    4ef4:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    4ef8:	e17ffd47 	ldb	r5,-11(fp)
    4efc:	e0fffd07 	ldb	r3,-12(fp)
    4f00:	e0bffdc3 	ldbu	r2,-9(fp)
    4f04:	01000174 	movhi	r4,5
    4f08:	2130ff04 	addi	r4,r4,-15364
    4f0c:	180d883a 	mov	r6,r3
    4f10:	100f883a 	mov	r7,r2
    4f14:	0000f7c0 	call	f7c <no_printf>
    4f18:	00001c06 	br	4f8c <alt_tse_phy_set_adv_1000+0x194>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
    4f1c:	d8000015 	stw	zero,0(sp)
    4f20:	e13ffe17 	ldw	r4,-8(fp)
    4f24:	01400244 	movi	r5,9
    4f28:	01800244 	movi	r6,9
    4f2c:	01c00044 	movi	r7,1
    4f30:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    4f34:	e0fffd47 	ldb	r3,-11(fp)
    4f38:	e0bffd07 	ldb	r2,-12(fp)
    4f3c:	01000174 	movhi	r4,5
    4f40:	2130ec04 	addi	r4,r4,-15440
    4f44:	180b883a 	mov	r5,r3
    4f48:	100d883a 	mov	r6,r2
    4f4c:	000f883a 	mov	r7,zero
    4f50:	0000f7c0 	call	f7c <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
    4f54:	d8000015 	stw	zero,0(sp)
    4f58:	e13ffe17 	ldw	r4,-8(fp)
    4f5c:	01400244 	movi	r5,9
    4f60:	01800204 	movi	r6,8
    4f64:	01c00044 	movi	r7,1
    4f68:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    4f6c:	e0fffd47 	ldb	r3,-11(fp)
    4f70:	e0bffd07 	ldb	r2,-12(fp)
    4f74:	01000174 	movhi	r4,5
    4f78:	21311204 	addi	r4,r4,-15288
    4f7c:	180b883a 	mov	r5,r3
    4f80:	100d883a 	mov	r6,r2
    4f84:	000f883a 	mov	r7,zero
    4f88:	0000f7c0 	call	f7c <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
    4f8c:	e0bffd83 	ldbu	r2,-10(fp)
    4f90:	e13ffe17 	ldw	r4,-8(fp)
    4f94:	100b883a 	mov	r5,r2
    4f98:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
    4f9c:	0005883a 	mov	r2,zero
}
    4fa0:	e037883a 	mov	sp,fp
    4fa4:	dfc00117 	ldw	ra,4(sp)
    4fa8:	df000017 	ldw	fp,0(sp)
    4fac:	dec00204 	addi	sp,sp,8
    4fb0:	f800283a 	ret

00004fb4 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
    4fb4:	defff804 	addi	sp,sp,-32
    4fb8:	dfc00715 	stw	ra,28(sp)
    4fbc:	df000615 	stw	fp,24(sp)
    4fc0:	df000604 	addi	fp,sp,24
    4fc4:	e13ffe15 	stw	r4,-8(fp)
    4fc8:	2805883a 	mov	r2,r5
    4fcc:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    4fd0:	e0bffe17 	ldw	r2,-8(fp)
    4fd4:	10800617 	ldw	r2,24(r2)
    4fd8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    4fdc:	e0bffb17 	ldw	r2,-20(fp)
    4fe0:	10800317 	ldw	r2,12(r2)
    4fe4:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    4fe8:	e13ffb17 	ldw	r4,-20(fp)
    4fec:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    4ff0:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    4ff4:	e13ffc17 	ldw	r4,-16(fp)
    4ff8:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    4ffc:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    5000:	e13ffe17 	ldw	r4,-8(fp)
    5004:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    5008:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    500c:	e0bffe17 	ldw	r2,-8(fp)
    5010:	10800003 	ldbu	r2,0(r2)
    5014:	10803fcc 	andi	r2,r2,255
    5018:	e13ffe17 	ldw	r4,-8(fp)
    501c:	100b883a 	mov	r5,r2
    5020:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
    5024:	e0bfff03 	ldbu	r2,-4(fp)
    5028:	10004026 	beq	r2,zero,512c <alt_tse_phy_set_adv_100+0x178>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    502c:	e13ffe17 	ldw	r4,-8(fp)
    5030:	01400044 	movi	r5,1
    5034:	018003c4 	movi	r6,15
    5038:	01c00044 	movi	r7,1
    503c:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5040:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
    5044:	e0bffdc3 	ldbu	r2,-9(fp)
    5048:	d8800015 	stw	r2,0(sp)
    504c:	e13ffe17 	ldw	r4,-8(fp)
    5050:	01400104 	movi	r5,4
    5054:	01800244 	movi	r6,9
    5058:	01c00044 	movi	r7,1
    505c:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
    5060:	e17ffd47 	ldb	r5,-11(fp)
    5064:	e0fffd07 	ldb	r3,-12(fp)
    5068:	e0bffdc3 	ldbu	r2,-9(fp)
    506c:	01000174 	movhi	r4,5
    5070:	21312404 	addi	r4,r4,-15216
    5074:	180d883a 	mov	r6,r3
    5078:	100f883a 	mov	r7,r2
    507c:	0000f7c0 	call	f7c <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    5080:	e13ffe17 	ldw	r4,-8(fp)
    5084:	01400044 	movi	r5,1
    5088:	01800384 	movi	r6,14
    508c:	01c00044 	movi	r7,1
    5090:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5094:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
    5098:	e0bffdc3 	ldbu	r2,-9(fp)
    509c:	d8800015 	stw	r2,0(sp)
    50a0:	e13ffe17 	ldw	r4,-8(fp)
    50a4:	01400104 	movi	r5,4
    50a8:	01800204 	movi	r6,8
    50ac:	01c00044 	movi	r7,1
    50b0:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    50b4:	e17ffd47 	ldb	r5,-11(fp)
    50b8:	e0fffd07 	ldb	r3,-12(fp)
    50bc:	e0bffdc3 	ldbu	r2,-9(fp)
    50c0:	01000174 	movhi	r4,5
    50c4:	21313404 	addi	r4,r4,-15152
    50c8:	180d883a 	mov	r6,r3
    50cc:	100f883a 	mov	r7,r2
    50d0:	0000f7c0 	call	f7c <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
    50d4:	e13ffe17 	ldw	r4,-8(fp)
    50d8:	01400044 	movi	r5,1
    50dc:	01800344 	movi	r6,13
    50e0:	01c00044 	movi	r7,1
    50e4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    50e8:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
    50ec:	e0bffdc3 	ldbu	r2,-9(fp)
    50f0:	d8800015 	stw	r2,0(sp)
    50f4:	e13ffe17 	ldw	r4,-8(fp)
    50f8:	01400104 	movi	r5,4
    50fc:	018001c4 	movi	r6,7
    5100:	01c00044 	movi	r7,1
    5104:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    5108:	e17ffd47 	ldb	r5,-11(fp)
    510c:	e0fffd07 	ldb	r3,-12(fp)
    5110:	e0bffdc3 	ldbu	r2,-9(fp)
    5114:	01000174 	movhi	r4,5
    5118:	21314704 	addi	r4,r4,-15076
    511c:	180d883a 	mov	r6,r3
    5120:	100f883a 	mov	r7,r2
    5124:	0000f7c0 	call	f7c <no_printf>
    5128:	00002a06 	br	51d4 <alt_tse_phy_set_adv_100+0x220>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
    512c:	d8000015 	stw	zero,0(sp)
    5130:	e13ffe17 	ldw	r4,-8(fp)
    5134:	01400104 	movi	r5,4
    5138:	01800244 	movi	r6,9
    513c:	01c00044 	movi	r7,1
    5140:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
    5144:	e0fffd47 	ldb	r3,-11(fp)
    5148:	e0bffd07 	ldb	r2,-12(fp)
    514c:	01000174 	movhi	r4,5
    5150:	21312404 	addi	r4,r4,-15216
    5154:	180b883a 	mov	r5,r3
    5158:	100d883a 	mov	r6,r2
    515c:	000f883a 	mov	r7,zero
    5160:	0000f7c0 	call	f7c <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
    5164:	d8000015 	stw	zero,0(sp)
    5168:	e13ffe17 	ldw	r4,-8(fp)
    516c:	01400104 	movi	r5,4
    5170:	01800204 	movi	r6,8
    5174:	01c00044 	movi	r7,1
    5178:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    517c:	e0fffd47 	ldb	r3,-11(fp)
    5180:	e0bffd07 	ldb	r2,-12(fp)
    5184:	01000174 	movhi	r4,5
    5188:	21313404 	addi	r4,r4,-15152
    518c:	180b883a 	mov	r5,r3
    5190:	100d883a 	mov	r6,r2
    5194:	000f883a 	mov	r7,zero
    5198:	0000f7c0 	call	f7c <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
    519c:	d8000015 	stw	zero,0(sp)
    51a0:	e13ffe17 	ldw	r4,-8(fp)
    51a4:	01400104 	movi	r5,4
    51a8:	018001c4 	movi	r6,7
    51ac:	01c00044 	movi	r7,1
    51b0:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    51b4:	e0fffd47 	ldb	r3,-11(fp)
    51b8:	e0bffd07 	ldb	r2,-12(fp)
    51bc:	01000174 	movhi	r4,5
    51c0:	21314704 	addi	r4,r4,-15076
    51c4:	180b883a 	mov	r5,r3
    51c8:	100d883a 	mov	r6,r2
    51cc:	000f883a 	mov	r7,zero
    51d0:	0000f7c0 	call	f7c <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
    51d4:	e0bffd83 	ldbu	r2,-10(fp)
    51d8:	e13ffe17 	ldw	r4,-8(fp)
    51dc:	100b883a 	mov	r5,r2
    51e0:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
    51e4:	0005883a 	mov	r2,zero
}
    51e8:	e037883a 	mov	sp,fp
    51ec:	dfc00117 	ldw	ra,4(sp)
    51f0:	df000017 	ldw	fp,0(sp)
    51f4:	dec00204 	addi	sp,sp,8
    51f8:	f800283a 	ret

000051fc <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
    51fc:	defff504 	addi	sp,sp,-44
    5200:	dfc00a15 	stw	ra,40(sp)
    5204:	df000915 	stw	fp,36(sp)
    5208:	df000904 	addi	fp,sp,36
    520c:	e13ffe15 	stw	r4,-8(fp)
    5210:	2805883a 	mov	r2,r5
    5214:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    5218:	e0bffe17 	ldw	r2,-8(fp)
    521c:	10800617 	ldw	r2,24(r2)
    5220:	e0bff815 	stw	r2,-32(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    5224:	e0bff817 	ldw	r2,-32(fp)
    5228:	10800317 	ldw	r2,12(r2)
    522c:	e0bff915 	stw	r2,-28(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    5230:	e13ff817 	ldw	r4,-32(fp)
    5234:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    5238:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    523c:	e13ff917 	ldw	r4,-28(fp)
    5240:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    5244:	e0bffb15 	stw	r2,-20(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    5248:	e13ffe17 	ldw	r4,-8(fp)
    524c:	0002ea00 	call	2ea0 <alt_tse_phy_rd_mdio_addr>
    5250:	e0bffc15 	stw	r2,-16(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    5254:	e0bffe17 	ldw	r2,-8(fp)
    5258:	10800003 	ldbu	r2,0(r2)
    525c:	10803fcc 	andi	r2,r2,255
    5260:	e13ffe17 	ldw	r4,-8(fp)
    5264:	100b883a 	mov	r5,r2
    5268:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
    526c:	e0bfff03 	ldbu	r2,-4(fp)
    5270:	10002926 	beq	r2,zero,5318 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
    5274:	e13ffe17 	ldw	r4,-8(fp)
    5278:	01400044 	movi	r5,1
    527c:	01800304 	movi	r6,12
    5280:	01c00044 	movi	r7,1
    5284:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5288:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
    528c:	e0bffd03 	ldbu	r2,-12(fp)
    5290:	d8800015 	stw	r2,0(sp)
    5294:	e13ffe17 	ldw	r4,-8(fp)
    5298:	01400104 	movi	r5,4
    529c:	01800184 	movi	r6,6
    52a0:	01c00044 	movi	r7,1
    52a4:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    52a8:	e0bffd03 	ldbu	r2,-12(fp)
    52ac:	01000174 	movhi	r4,5
    52b0:	21315a04 	addi	r4,r4,-15000
    52b4:	e17ffb17 	ldw	r5,-20(fp)
    52b8:	e1bffa17 	ldw	r6,-24(fp)
    52bc:	100f883a 	mov	r7,r2
    52c0:	0000f7c0 	call	f7c <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
    52c4:	e13ffe17 	ldw	r4,-8(fp)
    52c8:	01400044 	movi	r5,1
    52cc:	018002c4 	movi	r6,11
    52d0:	01c00044 	movi	r7,1
    52d4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    52d8:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
    52dc:	e0bffd03 	ldbu	r2,-12(fp)
    52e0:	d8800015 	stw	r2,0(sp)
    52e4:	e13ffe17 	ldw	r4,-8(fp)
    52e8:	01400104 	movi	r5,4
    52ec:	01800144 	movi	r6,5
    52f0:	01c00044 	movi	r7,1
    52f4:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    52f8:	e0bffd03 	ldbu	r2,-12(fp)
    52fc:	01000174 	movhi	r4,5
    5300:	21316d04 	addi	r4,r4,-14924
    5304:	e17ffb17 	ldw	r5,-20(fp)
    5308:	e1bffa17 	ldw	r6,-24(fp)
    530c:	100f883a 	mov	r7,r2
    5310:	0000f7c0 	call	f7c <no_printf>
    5314:	00001806 	br	5378 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
    5318:	d8000015 	stw	zero,0(sp)
    531c:	e13ffe17 	ldw	r4,-8(fp)
    5320:	01400104 	movi	r5,4
    5324:	01800184 	movi	r6,6
    5328:	01c00044 	movi	r7,1
    532c:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    5330:	01000174 	movhi	r4,5
    5334:	21315a04 	addi	r4,r4,-15000
    5338:	e17ffb17 	ldw	r5,-20(fp)
    533c:	e1bffa17 	ldw	r6,-24(fp)
    5340:	000f883a 	mov	r7,zero
    5344:	0000f7c0 	call	f7c <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
    5348:	d8000015 	stw	zero,0(sp)
    534c:	e13ffe17 	ldw	r4,-8(fp)
    5350:	01400104 	movi	r5,4
    5354:	01800144 	movi	r6,5
    5358:	01c00044 	movi	r7,1
    535c:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    5360:	01000174 	movhi	r4,5
    5364:	21316d04 	addi	r4,r4,-14924
    5368:	e17ffb17 	ldw	r5,-20(fp)
    536c:	e1bffa17 	ldw	r6,-24(fp)
    5370:	000f883a 	mov	r7,zero
    5374:	0000f7c0 	call	f7c <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    5378:	e0bffc17 	ldw	r2,-16(fp)
    537c:	10803fcc 	andi	r2,r2,255
    5380:	e13ffe17 	ldw	r4,-8(fp)
    5384:	100b883a 	mov	r5,r2
    5388:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
    538c:	0005883a 	mov	r2,zero
}
    5390:	e037883a 	mov	sp,fp
    5394:	dfc00117 	ldw	ra,4(sp)
    5398:	df000017 	ldw	fp,0(sp)
    539c:	dec00204 	addi	sp,sp,8
    53a0:	f800283a 	ret

000053a4 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
    53a4:	defff604 	addi	sp,sp,-40
    53a8:	dfc00915 	stw	ra,36(sp)
    53ac:	df000815 	stw	fp,32(sp)
    53b0:	df000804 	addi	fp,sp,32
    53b4:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
    53b8:	00800044 	movi	r2,1
    53bc:	e0bff905 	stb	r2,-28(fp)
	alt_u8 common_100 = 1;
    53c0:	00800044 	movi	r2,1
    53c4:	e0bff945 	stb	r2,-27(fp)
	alt_u8 common_10 = 1;
    53c8:	00800044 	movi	r2,1
    53cc:	e0bff985 	stb	r2,-26(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
    53d0:	00800044 	movi	r2,1
    53d4:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
    53d8:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_phy_info *pphy = 0;
    53dc:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    53e0:	e13fff17 	ldw	r4,-4(fp)
    53e4:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    53e8:	e0bffe05 	stb	r2,-8(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
    53ec:	e03ff815 	stw	zero,-32(fp)
    53f0:	00001c06 	br	5464 <alt_tse_phy_get_common_speed+0xc0>
        pmac_info = pmac_group->pmac_info[i];
    53f4:	e0ffff17 	ldw	r3,-4(fp)
    53f8:	e0bff817 	ldw	r2,-32(fp)
    53fc:	10800044 	addi	r2,r2,1
    5400:	1085883a 	add	r2,r2,r2
    5404:	1085883a 	add	r2,r2,r2
    5408:	1885883a 	add	r2,r3,r2
    540c:	10800017 	ldw	r2,0(r2)
    5410:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800117 	ldw	r2,4(r2)
    541c:	e0bffd15 	stw	r2,-12(fp)
        
        /* run only if PHY connected */
        if(pphy) {
    5420:	e0bffd17 	ldw	r2,-12(fp)
    5424:	10000926 	beq	r2,zero,544c <alt_tse_phy_get_common_speed+0xa8>
            alt_tse_phy_set_adv_1000(pphy, 1);
    5428:	e13ffd17 	ldw	r4,-12(fp)
    542c:	01400044 	movi	r5,1
    5430:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
    5434:	e13ffd17 	ldw	r4,-12(fp)
    5438:	01400044 	movi	r5,1
    543c:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
    5440:	e13ffd17 	ldw	r4,-12(fp)
    5444:	01400044 	movi	r5,1
    5448:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
    544c:	01000174 	movhi	r4,5
    5450:	212f1304 	addi	r4,r4,-17332
    5454:	0000f7c0 	call	f7c <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
    5458:	e0bff817 	ldw	r2,-32(fp)
    545c:	10800044 	addi	r2,r2,1
    5460:	e0bff815 	stw	r2,-32(fp)
    5464:	e0bfff17 	ldw	r2,-4(fp)
    5468:	10800003 	ldbu	r2,0(r2)
    546c:	10803fcc 	andi	r2,r2,255
    5470:	e0fff817 	ldw	r3,-32(fp)
    5474:	18bfdf16 	blt	r3,r2,53f4 <__alt_mem_descriptor_memory+0xdefc53f4>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
    5478:	e03ff815 	stw	zero,-32(fp)
    547c:	00005406 	br	55d0 <alt_tse_phy_get_common_speed+0x22c>

        pmac_info = pmac_group->pmac_info[i];
    5480:	e0ffff17 	ldw	r3,-4(fp)
    5484:	e0bff817 	ldw	r2,-32(fp)
    5488:	10800044 	addi	r2,r2,1
    548c:	1085883a 	add	r2,r2,r2
    5490:	1085883a 	add	r2,r2,r2
    5494:	1885883a 	add	r2,r3,r2
    5498:	10800017 	ldw	r2,0(r2)
    549c:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
    54a0:	e0bffc17 	ldw	r2,-16(fp)
    54a4:	10800117 	ldw	r2,4(r2)
    54a8:	e0bffd15 	stw	r2,-12(fp)
        
        /* if no PHY connected */
        if(!pphy) {
    54ac:	e0bffd17 	ldw	r2,-12(fp)
    54b0:	1000011e 	bne	r2,zero,54b8 <alt_tse_phy_get_common_speed+0x114>
            continue;
    54b4:	00004306 	br	55c4 <alt_tse_phy_get_common_speed+0x220>
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
    54b8:	e13ffd17 	ldw	r4,-12(fp)
    54bc:	00048600 	call	4860 <alt_tse_phy_get_cap>
    54c0:	10000126 	beq	r2,zero,54c8 <alt_tse_phy_get_common_speed+0x124>
            continue;
    54c4:	00003f06 	br	55c4 <alt_tse_phy_get_common_speed+0x220>
        }
        
        none_an_complete = 0;
    54c8:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
    54cc:	e0bffc17 	ldw	r2,-16(fp)
    54d0:	10800003 	ldbu	r2,0(r2)
    54d4:	10803fcc 	andi	r2,r2,255
    54d8:	10800058 	cmpnei	r2,r2,1
    54dc:	1000021e 	bne	r2,zero,54e8 <alt_tse_phy_get_common_speed+0x144>
            common_1000 = 0;
    54e0:	e03ff905 	stb	zero,-28(fp)
    54e4:	00000706 	br	5504 <alt_tse_phy_get_common_speed+0x160>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
    54e8:	e0bffc17 	ldw	r2,-16(fp)
    54ec:	10800003 	ldbu	r2,0(r2)
    54f0:	10803fcc 	andi	r2,r2,255
    54f4:	10800098 	cmpnei	r2,r2,2
    54f8:	1000021e 	bne	r2,zero,5504 <alt_tse_phy_get_common_speed+0x160>
            common_100 = 0;
    54fc:	e03ff945 	stb	zero,-27(fp)
            common_10 = 0;            
    5500:	e03ff985 	stb	zero,-26(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
    5504:	e0bffd17 	ldw	r2,-12(fp)
    5508:	10c000c3 	ldbu	r3,3(r2)
    550c:	e0bffd17 	ldw	r2,-12(fp)
    5510:	10800303 	ldbu	r2,12(r2)
    5514:	1884703a 	and	r2,r3,r2
    5518:	1007883a 	mov	r3,r2
    551c:	e0bff903 	ldbu	r2,-28(fp)
    5520:	1884703a 	and	r2,r3,r2
    5524:	e0bff905 	stb	r2,-28(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
    5528:	e0bffd17 	ldw	r2,-12(fp)
    552c:	10c00183 	ldbu	r3,6(r2)
    5530:	e0bffd17 	ldw	r2,-12(fp)
    5534:	108003c3 	ldbu	r2,15(r2)
    5538:	1884703a 	and	r2,r3,r2
    553c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
    5540:	e0bffd17 	ldw	r2,-12(fp)
    5544:	10c001c3 	ldbu	r3,7(r2)
    5548:	e0bffd17 	ldw	r2,-12(fp)
    554c:	10800403 	ldbu	r2,16(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
    5550:	1884703a 	and	r2,r3,r2
    5554:	2084b03a 	or	r2,r4,r2
    5558:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
    555c:	e0bffd17 	ldw	r2,-12(fp)
    5560:	10c00143 	ldbu	r3,5(r2)
    5564:	e0bffd17 	ldw	r2,-12(fp)
    5568:	10800383 	ldbu	r2,14(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
    556c:	1884703a 	and	r2,r3,r2
    5570:	2084b03a 	or	r2,r4,r2
    5574:	1007883a 	mov	r3,r2
    5578:	e0bff943 	ldbu	r2,-27(fp)
    557c:	1884703a 	and	r2,r3,r2
    5580:	e0bff945 	stb	r2,-27(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
    5584:	e0bffd17 	ldw	r2,-12(fp)
    5588:	10c00283 	ldbu	r3,10(r2)
    558c:	e0bffd17 	ldw	r2,-12(fp)
    5590:	10800443 	ldbu	r2,17(r2)
    5594:	1884703a 	and	r2,r3,r2
    5598:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
    559c:	e0bffd17 	ldw	r2,-12(fp)
    55a0:	10c002c3 	ldbu	r3,11(r2)
    55a4:	e0bffd17 	ldw	r2,-12(fp)
    55a8:	10800483 	ldbu	r2,18(r2)
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
    55ac:	1884703a 	and	r2,r3,r2
    55b0:	2084b03a 	or	r2,r4,r2
    55b4:	1007883a 	mov	r3,r2
    55b8:	e0bff983 	ldbu	r2,-26(fp)
    55bc:	1884703a 	and	r2,r3,r2
    55c0:	e0bff985 	stb	r2,-26(fp)
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
    55c4:	e0bff817 	ldw	r2,-32(fp)
    55c8:	10800044 	addi	r2,r2,1
    55cc:	e0bff815 	stw	r2,-32(fp)
    55d0:	e0bfff17 	ldw	r2,-4(fp)
    55d4:	10800003 	ldbu	r2,0(r2)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	e0fff817 	ldw	r3,-32(fp)
    55e0:	18bfa716 	blt	r3,r2,5480 <__alt_mem_descriptor_memory+0xdefc5480>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
    55e4:	e0bffb03 	ldbu	r2,-20(fp)
    55e8:	10800058 	cmpnei	r2,r2,1
    55ec:	1000081e 	bne	r2,zero,5610 <alt_tse_phy_get_common_speed+0x26c>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
    55f0:	00bfffc4 	movi	r2,-1
    55f4:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
    55f8:	e0bffe07 	ldb	r2,-8(fp)
    55fc:	01000174 	movhi	r4,5
    5600:	21318004 	addi	r4,r4,-14848
    5604:	100b883a 	mov	r5,r2
    5608:	00080f80 	call	80f8 <printf>
    560c:	00002706 	br	56ac <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_1000) {
    5610:	e0bff903 	ldbu	r2,-28(fp)
    5614:	10000926 	beq	r2,zero,563c <alt_tse_phy_get_common_speed+0x298>
        common_speed = TSE_PHY_SPEED_1000;
    5618:	00800084 	movi	r2,2
    561c:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
    5620:	e0bffe07 	ldb	r2,-8(fp)
    5624:	01000174 	movhi	r4,5
    5628:	21319204 	addi	r4,r4,-14776
    562c:	100b883a 	mov	r5,r2
    5630:	0180fa04 	movi	r6,1000
    5634:	00080f80 	call	80f8 <printf>
    5638:	00001c06 	br	56ac <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_100) {
    563c:	e0bff943 	ldbu	r2,-27(fp)
    5640:	10000926 	beq	r2,zero,5668 <alt_tse_phy_get_common_speed+0x2c4>
        common_speed = TSE_PHY_SPEED_100;
    5644:	00800044 	movi	r2,1
    5648:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
    564c:	e0bffe07 	ldb	r2,-8(fp)
    5650:	01000174 	movhi	r4,5
    5654:	21319204 	addi	r4,r4,-14776
    5658:	100b883a 	mov	r5,r2
    565c:	01801904 	movi	r6,100
    5660:	00080f80 	call	80f8 <printf>
    5664:	00001106 	br	56ac <alt_tse_phy_get_common_speed+0x308>
    }
    else if(common_10) {
    5668:	e0bff983 	ldbu	r2,-26(fp)
    566c:	10000826 	beq	r2,zero,5690 <alt_tse_phy_get_common_speed+0x2ec>
        common_speed = TSE_PHY_SPEED_10;
    5670:	e03ffa15 	stw	zero,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
    5674:	e0bffe07 	ldb	r2,-8(fp)
    5678:	01000174 	movhi	r4,5
    567c:	21319204 	addi	r4,r4,-14776
    5680:	100b883a 	mov	r5,r2
    5684:	01800284 	movi	r6,10
    5688:	00080f80 	call	80f8 <printf>
    568c:	00000706 	br	56ac <alt_tse_phy_get_common_speed+0x308>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
    5690:	00bfffc4 	movi	r2,-1
    5694:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
    5698:	e0bffe07 	ldb	r2,-8(fp)
    569c:	01000174 	movhi	r4,5
    56a0:	21319f04 	addi	r4,r4,-14724
    56a4:	100b883a 	mov	r5,r2
    56a8:	00080f80 	call	80f8 <printf>

    return common_speed;
    56ac:	e0bffa17 	ldw	r2,-24(fp)
}
    56b0:	e037883a 	mov	sp,fp
    56b4:	dfc00117 	ldw	ra,4(sp)
    56b8:	df000017 	ldw	fp,0(sp)
    56bc:	dec00204 	addi	sp,sp,8
    56c0:	f800283a 	ret

000056c4 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
    56c4:	defff004 	addi	sp,sp,-64
    56c8:	dfc00f15 	stw	ra,60(sp)
    56cc:	df000e15 	stw	fp,56(sp)
    56d0:	dc400d15 	stw	r17,52(sp)
    56d4:	dc000c15 	stw	r16,48(sp)
    56d8:	df000e04 	addi	fp,sp,56
    56dc:	e13ffc15 	stw	r4,-16(fp)
    56e0:	e17ffd15 	stw	r5,-12(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
    56e4:	e03ff515 	stw	zero,-44(fp)
    alt_tse_mac_info *pmac_info = 0;
    56e8:	e03ff615 	stw	zero,-40(fp)
    alt_tse_system_info *psys = 0;
    56ec:	e03ff715 	stw	zero,-36(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    56f0:	e03ff805 	stb	zero,-32(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    56f4:	e13ffc17 	ldw	r4,-16(fp)
    56f8:	00020fc0 	call	20fc <alt_tse_get_mac_group_index>
    56fc:	e0bff845 	stb	r2,-31(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    5700:	e0bffc17 	ldw	r2,-16(fp)
    5704:	10800117 	ldw	r2,4(r2)
    5708:	10800217 	ldw	r2,8(r2)
    570c:	10800017 	ldw	r2,0(r2)
    5710:	e0bff915 	stw	r2,-28(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
    5714:	e0bff917 	ldw	r2,-28(fp)
    5718:	10801004 	addi	r2,r2,64
    571c:	10800037 	ldwio	r2,0(r2)
    5720:	e0bffa15 	stw	r2,-24(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
    5724:	e0bffd17 	ldw	r2,-12(fp)
    5728:	10000316 	blt	r2,zero,5738 <alt_tse_phy_set_common_speed+0x74>
    572c:	e0bffd17 	ldw	r2,-12(fp)
    5730:	108000d0 	cmplti	r2,r2,3
    5734:	10000c1e 	bne	r2,zero,5768 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
    5738:	e0bff847 	ldb	r2,-31(fp)
    573c:	01000174 	movhi	r4,5
    5740:	2131ac04 	addi	r4,r4,-14672
    5744:	100b883a 	mov	r5,r2
    5748:	e1bffd17 	ldw	r6,-12(fp)
    574c:	00080f80 	call	80f8 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
    5750:	e0bff917 	ldw	r2,-28(fp)
    5754:	10801004 	addi	r2,r2,64
    5758:	e0fffa17 	ldw	r3,-24(fp)
    575c:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
    5760:	00bfffc4 	movi	r2,-1
    5764:	0000fd06 	br	5b5c <alt_tse_phy_set_common_speed+0x498>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
    5768:	e03ff315 	stw	zero,-52(fp)
    576c:	0000db06 	br	5adc <alt_tse_phy_set_common_speed+0x418>
        pmac_info = pmac_group->pmac_info[i];
    5770:	e0fffc17 	ldw	r3,-16(fp)
    5774:	e0bff317 	ldw	r2,-52(fp)
    5778:	10800044 	addi	r2,r2,1
    577c:	1085883a 	add	r2,r2,r2
    5780:	1085883a 	add	r2,r2,r2
    5784:	1885883a 	add	r2,r3,r2
    5788:	10800017 	ldw	r2,0(r2)
    578c:	e0bff615 	stw	r2,-40(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    5790:	e13ff617 	ldw	r4,-40(fp)
    5794:	00021700 	call	2170 <alt_tse_get_mac_info_index>
    5798:	e0bff805 	stb	r2,-32(fp)

        pphy = pmac_info->pphy_info;
    579c:	e0bff617 	ldw	r2,-40(fp)
    57a0:	10800117 	ldw	r2,4(r2)
    57a4:	e0bff515 	stw	r2,-44(fp)
        
        /* if no PHY connected */
        if(!pphy) {
    57a8:	e0bff517 	ldw	r2,-44(fp)
    57ac:	1000011e 	bne	r2,zero,57b4 <alt_tse_phy_set_common_speed+0xf0>
            continue;
    57b0:	0000c706 	br	5ad0 <alt_tse_phy_set_common_speed+0x40c>
        }
        
        psys = pmac_info->psys_info; 
    57b4:	e0bff617 	ldw	r2,-40(fp)
    57b8:	10800217 	ldw	r2,8(r2)
    57bc:	e0bff715 	stw	r2,-36(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    57c0:	e0bff517 	ldw	r2,-44(fp)
    57c4:	10800003 	ldbu	r2,0(r2)
    57c8:	10803fcc 	andi	r2,r2,255
    57cc:	e13ff517 	ldw	r4,-44(fp)
    57d0:	100b883a 	mov	r5,r2
    57d4:	0002ee80 	call	2ee8 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
    57d8:	e0bff517 	ldw	r2,-44(fp)
    57dc:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
    57e0:	10803fcc 	andi	r2,r2,255
    57e4:	10000c1e 	bne	r2,zero,5818 <alt_tse_phy_set_common_speed+0x154>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
    57e8:	e0bff517 	ldw	r2,-44(fp)
    57ec:	10800103 	ldbu	r2,4(r2)
    57f0:	10803fcc 	andi	r2,r2,255
    57f4:	1000081e 	bne	r2,zero,5818 <alt_tse_phy_set_common_speed+0x154>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
    57f8:	e0bff517 	ldw	r2,-44(fp)
    57fc:	10800043 	ldbu	r2,1(r2)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
    5800:	10803fcc 	andi	r2,r2,255
    5804:	1000041e 	bne	r2,zero,5818 <alt_tse_phy_set_common_speed+0x154>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
    5808:	e0bff517 	ldw	r2,-44(fp)
    580c:	10800083 	ldbu	r2,2(r2)
    5810:	10803fcc 	andi	r2,r2,255
    5814:	10000226 	beq	r2,zero,5820 <alt_tse_phy_set_common_speed+0x15c>
    5818:	00800044 	movi	r2,1
    581c:	00000106 	br	5824 <alt_tse_phy_set_common_speed+0x160>
    5820:	0005883a 	mov	r2,zero
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
    5824:	e0bffb05 	stb	r2,-20(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
    5828:	e0bffb03 	ldbu	r2,-20(fp)
    582c:	1000101e 	bne	r2,zero,5870 <alt_tse_phy_set_common_speed+0x1ac>
    5830:	e0bffd17 	ldw	r2,-12(fp)
    5834:	10800098 	cmpnei	r2,r2,2
    5838:	10000d1e 	bne	r2,zero,5870 <alt_tse_phy_set_common_speed+0x1ac>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
    583c:	e0fff847 	ldb	r3,-31(fp)
    5840:	e0bff807 	ldb	r2,-32(fp)
    5844:	01000174 	movhi	r4,5
    5848:	2131c004 	addi	r4,r4,-14592
    584c:	180b883a 	mov	r5,r3
    5850:	100d883a 	mov	r6,r2
    5854:	00080f80 	call	80f8 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
    5858:	e0bff917 	ldw	r2,-28(fp)
    585c:	10801004 	addi	r2,r2,64
    5860:	e0fffa17 	ldw	r3,-24(fp)
    5864:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
    5868:	00bfffc4 	movi	r2,-1
    586c:	0000bb06 	br	5b5c <alt_tse_phy_set_common_speed+0x498>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
    5870:	e13ff517 	ldw	r4,-44(fp)
    5874:	01400044 	movi	r5,1
    5878:	018000c4 	movi	r6,3
    587c:	01c00044 	movi	r7,1
    5880:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5884:	1000141e 	bne	r2,zero,58d8 <alt_tse_phy_set_common_speed+0x214>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
    5888:	e0bffb03 	ldbu	r2,-20(fp)
    588c:	10000926 	beq	r2,zero,58b4 <alt_tse_phy_set_common_speed+0x1f0>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
    5890:	e0bffd17 	ldw	r2,-12(fp)
    5894:	1005d07a 	srai	r2,r2,1
    5898:	10bfffcc 	andi	r2,r2,65535
    589c:	d8800015 	stw	r2,0(sp)
    58a0:	e13ff517 	ldw	r4,-44(fp)
    58a4:	000b883a 	mov	r5,zero
    58a8:	01800184 	movi	r6,6
    58ac:	01c00044 	movi	r7,1
    58b0:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
    58b4:	e0bffd17 	ldw	r2,-12(fp)
    58b8:	10bfffcc 	andi	r2,r2,65535
    58bc:	d8800015 	stw	r2,0(sp)
    58c0:	e13ff517 	ldw	r4,-44(fp)
    58c4:	000b883a 	mov	r5,zero
    58c8:	01800344 	movi	r6,13
    58cc:	01c00044 	movi	r7,1
    58d0:	0002f400 	call	2f40 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
    58d4:	00007e06 	br	5ad0 <alt_tse_phy_set_common_speed+0x40c>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
    58d8:	e0bffd17 	ldw	r2,-12(fp)
    58dc:	10800098 	cmpnei	r2,r2,2
    58e0:	10000a1e 	bne	r2,zero,590c <alt_tse_phy_set_common_speed+0x248>
            alt_tse_phy_set_adv_1000(pphy, 1);
    58e4:	e13ff517 	ldw	r4,-44(fp)
    58e8:	01400044 	movi	r5,1
    58ec:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
    58f0:	e13ff517 	ldw	r4,-44(fp)
    58f4:	01400044 	movi	r5,1
    58f8:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
    58fc:	e13ff517 	ldw	r4,-44(fp)
    5900:	01400044 	movi	r5,1
    5904:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
    5908:	00002206 	br	5994 <alt_tse_phy_set_common_speed+0x2d0>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
    590c:	e0bffd17 	ldw	r2,-12(fp)
    5910:	10800058 	cmpnei	r2,r2,1
    5914:	10000a1e 	bne	r2,zero,5940 <alt_tse_phy_set_common_speed+0x27c>
            alt_tse_phy_set_adv_1000(pphy, 0);
    5918:	e13ff517 	ldw	r4,-44(fp)
    591c:	000b883a 	mov	r5,zero
    5920:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
    5924:	e13ff517 	ldw	r4,-44(fp)
    5928:	01400044 	movi	r5,1
    592c:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
    5930:	e13ff517 	ldw	r4,-44(fp)
    5934:	01400044 	movi	r5,1
    5938:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
    593c:	00001506 	br	5994 <alt_tse_phy_set_common_speed+0x2d0>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
    5940:	e0bffd17 	ldw	r2,-12(fp)
    5944:	10000a1e 	bne	r2,zero,5970 <alt_tse_phy_set_common_speed+0x2ac>
            alt_tse_phy_set_adv_1000(pphy, 0);
    5948:	e13ff517 	ldw	r4,-44(fp)
    594c:	000b883a 	mov	r5,zero
    5950:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
    5954:	e13ff517 	ldw	r4,-44(fp)
    5958:	000b883a 	mov	r5,zero
    595c:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
    5960:	e13ff517 	ldw	r4,-44(fp)
    5964:	01400044 	movi	r5,1
    5968:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
    596c:	00000906 	br	5994 <alt_tse_phy_set_common_speed+0x2d0>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
    5970:	e13ff517 	ldw	r4,-44(fp)
    5974:	000b883a 	mov	r5,zero
    5978:	0004df80 	call	4df8 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
    597c:	e13ff517 	ldw	r4,-44(fp)
    5980:	000b883a 	mov	r5,zero
    5984:	0004fb40 	call	4fb4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
    5988:	e13ff517 	ldw	r4,-44(fp)
    598c:	000b883a 	mov	r5,zero
    5990:	00051fc0 	call	51fc <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
    5994:	e13ff517 	ldw	r4,-44(fp)
    5998:	01400044 	movi	r5,1
    599c:	01800144 	movi	r6,5
    59a0:	01c00044 	movi	r7,1
    59a4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    59a8:	10800058 	cmpnei	r2,r2,1
    59ac:	10003b1e 	bne	r2,zero,5a9c <alt_tse_phy_set_common_speed+0x3d8>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
    59b0:	e0bffb03 	ldbu	r2,-20(fp)
    59b4:	10000f26 	beq	r2,zero,59f4 <alt_tse_phy_set_common_speed+0x330>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
    59b8:	e0bff517 	ldw	r2,-44(fp)
    59bc:	10800517 	ldw	r2,20(r2)
    59c0:	10801583 	ldbu	r2,86(r2)
    59c4:	10c03fcc 	andi	r3,r2,255
    59c8:	e0bff517 	ldw	r2,-44(fp)
    59cc:	10800517 	ldw	r2,20(r2)
    59d0:	108015c3 	ldbu	r2,87(r2)
    59d4:	10803fcc 	andi	r2,r2,255
    59d8:	e13ff517 	ldw	r4,-44(fp)
    59dc:	180b883a 	mov	r5,r3
    59e0:	100d883a 	mov	r6,r2
    59e4:	01c00084 	movi	r7,2
    59e8:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    59ec:	e0bff405 	stb	r2,-48(fp)
    59f0:	00000e06 	br	5a2c <alt_tse_phy_set_common_speed+0x368>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
    59f4:	e0bff517 	ldw	r2,-44(fp)
    59f8:	10800517 	ldw	r2,20(r2)
    59fc:	10801583 	ldbu	r2,86(r2)
    5a00:	10c03fcc 	andi	r3,r2,255
    5a04:	e0bff517 	ldw	r2,-44(fp)
    5a08:	10800517 	ldw	r2,20(r2)
    5a0c:	108015c3 	ldbu	r2,87(r2)
    5a10:	10803fcc 	andi	r2,r2,255
    5a14:	e13ff517 	ldw	r4,-44(fp)
    5a18:	180b883a 	mov	r5,r3
    5a1c:	100d883a 	mov	r6,r2
    5a20:	01c00044 	movi	r7,1
    5a24:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5a28:	e0bff405 	stb	r2,-48(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
    5a2c:	e0fff403 	ldbu	r3,-48(fp)
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	18800426 	beq	r3,r2,5a48 <alt_tse_phy_set_common_speed+0x384>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    5a38:	e13ff517 	ldw	r4,-44(fp)
    5a3c:	01400134 	movhi	r5,4
    5a40:	29742404 	addi	r5,r5,-12144
    5a44:	00045440 	call	4544 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
    5a48:	e0bff517 	ldw	r2,-44(fp)
    5a4c:	10800517 	ldw	r2,20(r2)
    5a50:	10801583 	ldbu	r2,86(r2)
    5a54:	10c03fcc 	andi	r3,r2,255
    5a58:	e0bff517 	ldw	r2,-44(fp)
    5a5c:	10800517 	ldw	r2,20(r2)
    5a60:	10801603 	ldbu	r2,88(r2)
    5a64:	10803fcc 	andi	r2,r2,255
    5a68:	e13ff517 	ldw	r4,-44(fp)
    5a6c:	180b883a 	mov	r5,r3
    5a70:	100d883a 	mov	r6,r2
    5a74:	01c00044 	movi	r7,1
    5a78:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5a7c:	e0bffb45 	stb	r2,-19(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
    5a80:	e0bff717 	ldw	r2,-36(fp)
    5a84:	10800017 	ldw	r2,0(r2)
    5a88:	1007883a 	mov	r3,r2
    5a8c:	e0bffb43 	ldbu	r2,-19(fp)
    5a90:	1809883a 	mov	r4,r3
    5a94:	100b883a 	mov	r5,r2
    5a98:	00023a80 	call	23a8 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    5a9c:	e47ff847 	ldb	r17,-31(fp)
    5aa0:	e43ff807 	ldb	r16,-32(fp)
    5aa4:	e13ff517 	ldw	r4,-44(fp)
    5aa8:	01400044 	movi	r5,1
    5aac:	000d883a 	mov	r6,zero
    5ab0:	01c00404 	movi	r7,16
    5ab4:	00030680 	call	3068 <alt_tse_phy_rd_mdio_reg>
    5ab8:	01000174 	movhi	r4,5
    5abc:	2131d704 	addi	r4,r4,-14500
    5ac0:	880b883a 	mov	r5,r17
    5ac4:	800d883a 	mov	r6,r16
    5ac8:	100f883a 	mov	r7,r2
    5acc:	00080f80 	call	80f8 <printf>
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
    5ad0:	e0bff317 	ldw	r2,-52(fp)
    5ad4:	10800044 	addi	r2,r2,1
    5ad8:	e0bff315 	stw	r2,-52(fp)
    5adc:	e0bffc17 	ldw	r2,-16(fp)
    5ae0:	10800003 	ldbu	r2,0(r2)
    5ae4:	10803fcc 	andi	r2,r2,255
    5ae8:	e0fff317 	ldw	r3,-52(fp)
    5aec:	18bf2016 	blt	r3,r2,5770 <__alt_mem_descriptor_memory+0xdefc5770>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
    5af0:	e0fff847 	ldb	r3,-31(fp)
    5af4:	e0bffd17 	ldw	r2,-12(fp)
    5af8:	108000a0 	cmpeqi	r2,r2,2
    5afc:	1000071e 	bne	r2,zero,5b1c <alt_tse_phy_set_common_speed+0x458>
    5b00:	e0bffd17 	ldw	r2,-12(fp)
    5b04:	10800058 	cmpnei	r2,r2,1
    5b08:	1000021e 	bne	r2,zero,5b14 <alt_tse_phy_set_common_speed+0x450>
    5b0c:	00801904 	movi	r2,100
    5b10:	00000306 	br	5b20 <alt_tse_phy_set_common_speed+0x45c>
    5b14:	00800284 	movi	r2,10
    5b18:	00000106 	br	5b20 <alt_tse_phy_set_common_speed+0x45c>
    5b1c:	0080fa04 	movi	r2,1000
    5b20:	01000174 	movhi	r4,5
    5b24:	2131e304 	addi	r4,r4,-14452
    5b28:	180b883a 	mov	r5,r3
    5b2c:	100d883a 	mov	r6,r2
    5b30:	00080f80 	call	80f8 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	10803fcc 	andi	r2,r2,255
    5b3c:	e13ff917 	ldw	r4,-28(fp)
    5b40:	100b883a 	mov	r5,r2
    5b44:	00022c80 	call	22c8 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
    5b48:	e0bff917 	ldw	r2,-28(fp)
    5b4c:	10801004 	addi	r2,r2,64
    5b50:	e0fffa17 	ldw	r3,-24(fp)
    5b54:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
    5b58:	e0bffd17 	ldw	r2,-12(fp)
}
    5b5c:	e6fffe04 	addi	sp,fp,-8
    5b60:	dfc00317 	ldw	ra,12(sp)
    5b64:	df000217 	ldw	fp,8(sp)
    5b68:	dc400117 	ldw	r17,4(sp)
    5b6c:	dc000017 	ldw	r16,0(sp)
    5b70:	dec00404 	addi	sp,sp,16
    5b74:	f800283a 	ret

00005b78 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
    5b78:	defffc04 	addi	sp,sp,-16
    5b7c:	dfc00315 	stw	ra,12(sp)
    5b80:	df000215 	stw	fp,8(sp)
    5b84:	df000204 	addi	fp,sp,8
    5b88:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
    5b8c:	e0bfff17 	ldw	r2,-4(fp)
    5b90:	1080a104 	addi	r2,r2,644
    5b94:	10800037 	ldwio	r2,0(r2)
    5b98:	1080080c 	andi	r2,r2,32
    5b9c:	1000161e 	bne	r2,zero,5bf8 <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
    5ba0:	01000174 	movhi	r4,5
    5ba4:	2131f404 	addi	r4,r4,-14384
    5ba8:	00083740 	call	8374 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
    5bac:	e0bfff17 	ldw	r2,-4(fp)
    5bb0:	1080a004 	addi	r2,r2,640
    5bb4:	10801004 	addi	r2,r2,64
    5bb8:	00c01e04 	movi	r3,120
    5bbc:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
    5bc0:	01000174 	movhi	r4,5
    5bc4:	2131fd04 	addi	r4,r4,-14348
    5bc8:	00083740 	call	8374 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
    5bcc:	e0bfff17 	ldw	r2,-4(fp)
    5bd0:	1080a004 	addi	r2,r2,640
    5bd4:	10800037 	ldwio	r2,0(r2)
    5bd8:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
    5bdc:	e0bfff17 	ldw	r2,-4(fp)
    5be0:	1080a004 	addi	r2,r2,640
    5be4:	e13ffe0b 	ldhu	r4,-8(fp)
    5be8:	00e00004 	movi	r3,-32768
    5bec:	20c6b03a 	or	r3,r4,r3
    5bf0:	18ffffcc 	andi	r3,r3,65535
    5bf4:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
    5bf8:	0005883a 	mov	r2,zero
}
    5bfc:	e037883a 	mov	sp,fp
    5c00:	dfc00117 	ldw	ra,4(sp)
    5c04:	df000017 	ldw	fp,0(sp)
    5c08:	dec00204 	addi	sp,sp,8
    5c0c:	f800283a 	ret

00005c10 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
    5c10:	defffc04 	addi	sp,sp,-16
    5c14:	dfc00315 	stw	ra,12(sp)
    5c18:	df000215 	stw	fp,8(sp)
    5c1c:	df000204 	addi	fp,sp,8
    5c20:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
    5c24:	e0bfff17 	ldw	r2,-4(fp)
    5c28:	1080bb04 	addi	r2,r2,748
    5c2c:	10800037 	ldwio	r2,0(r2)
    5c30:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
    5c34:	e0fffe0b 	ldhu	r3,-8(fp)
    5c38:	00bffc04 	movi	r2,-16
    5c3c:	1884703a 	and	r2,r3,r2
    5c40:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
    5c44:	01000174 	movhi	r4,5
    5c48:	21320204 	addi	r4,r4,-14328
    5c4c:	00083740 	call	8374 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
    5c50:	e0bfff17 	ldw	r2,-4(fp)
    5c54:	1080bb04 	addi	r2,r2,748
    5c58:	e0fffe0b 	ldhu	r3,-8(fp)
    5c5c:	18c003d4 	ori	r3,r3,15
    5c60:	18ffffcc 	andi	r3,r3,65535
    5c64:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
    5c68:	01000174 	movhi	r4,5
    5c6c:	21320e04 	addi	r4,r4,-14280
    5c70:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
    5c74:	e0bfff17 	ldw	r2,-4(fp)
    5c78:	1080b404 	addi	r2,r2,720
    5c7c:	10800037 	ldwio	r2,0(r2)
    5c80:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
    5c84:	e0fffe0b 	ldhu	r3,-8(fp)
    5c88:	00bfdf44 	movi	r2,-131
    5c8c:	1884703a 	and	r2,r3,r2
    5c90:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
    5c94:	e0bfff17 	ldw	r2,-4(fp)
    5c98:	1080b404 	addi	r2,r2,720
    5c9c:	e0fffe0b 	ldhu	r3,-8(fp)
    5ca0:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
    5ca4:	01000174 	movhi	r4,5
    5ca8:	2131fd04 	addi	r4,r4,-14348
    5cac:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
    5cb0:	e0bfff17 	ldw	r2,-4(fp)
    5cb4:	1080a004 	addi	r2,r2,640
    5cb8:	10800037 	ldwio	r2,0(r2)
    5cbc:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
    5cc0:	e0bfff17 	ldw	r2,-4(fp)
    5cc4:	1080a004 	addi	r2,r2,640
    5cc8:	e13ffe0b 	ldhu	r4,-8(fp)
    5ccc:	00e00004 	movi	r3,-32768
    5cd0:	20c6b03a 	or	r3,r4,r3
    5cd4:	18ffffcc 	andi	r3,r3,65535
    5cd8:	10c00035 	stwio	r3,0(r2)
    
    return 1;
    5cdc:	00800044 	movi	r2,1
}
    5ce0:	e037883a 	mov	sp,fp
    5ce4:	dfc00117 	ldw	ra,4(sp)
    5ce8:	df000017 	ldw	fp,0(sp)
    5cec:	dec00204 	addi	sp,sp,8
    5cf0:	f800283a 	ret

00005cf4 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
    5cf4:	defffc04 	addi	sp,sp,-16
    5cf8:	dfc00315 	stw	ra,12(sp)
    5cfc:	df000215 	stw	fp,8(sp)
    5d00:	df000204 	addi	fp,sp,8
    5d04:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
    5d08:	e0bfff17 	ldw	r2,-4(fp)
    5d0c:	1080bb04 	addi	r2,r2,748
    5d10:	10800037 	ldwio	r2,0(r2)
    5d14:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
    5d18:	e0fffe0b 	ldhu	r3,-8(fp)
    5d1c:	00bffc04 	movi	r2,-16
    5d20:	1884703a 	and	r2,r3,r2
    5d24:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
    5d28:	01000174 	movhi	r4,5
    5d2c:	21321804 	addi	r4,r4,-14240
    5d30:	00083740 	call	8374 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
    5d34:	e0bfff17 	ldw	r2,-4(fp)
    5d38:	1080bb04 	addi	r2,r2,748
    5d3c:	e0fffe0b 	ldhu	r3,-8(fp)
    5d40:	18c00114 	ori	r3,r3,4
    5d44:	18ffffcc 	andi	r3,r3,65535
    5d48:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
    5d4c:	01000174 	movhi	r4,5
    5d50:	21320e04 	addi	r4,r4,-14280
    5d54:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
    5d58:	e0bfff17 	ldw	r2,-4(fp)
    5d5c:	1080b404 	addi	r2,r2,720
    5d60:	10800037 	ldwio	r2,0(r2)
    5d64:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
    5d68:	e0fffe0b 	ldhu	r3,-8(fp)
    5d6c:	00bfdf44 	movi	r2,-131
    5d70:	1884703a 	and	r2,r3,r2
    5d74:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
    5d78:	e0bfff17 	ldw	r2,-4(fp)
    5d7c:	1080b404 	addi	r2,r2,720
    5d80:	e0fffe0b 	ldhu	r3,-8(fp)
    5d84:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
    5d88:	01000174 	movhi	r4,5
    5d8c:	2131fd04 	addi	r4,r4,-14348
    5d90:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
    5d94:	e0bfff17 	ldw	r2,-4(fp)
    5d98:	1080a004 	addi	r2,r2,640
    5d9c:	10800037 	ldwio	r2,0(r2)
    5da0:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
    5da4:	e0bfff17 	ldw	r2,-4(fp)
    5da8:	1080a004 	addi	r2,r2,640
    5dac:	e13ffe0b 	ldhu	r4,-8(fp)
    5db0:	00e00004 	movi	r3,-32768
    5db4:	20c6b03a 	or	r3,r4,r3
    5db8:	18ffffcc 	andi	r3,r3,65535
    5dbc:	10c00035 	stwio	r3,0(r2)
    
    return 1;
    5dc0:	00800044 	movi	r2,1
}
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
    5dd8:	defffc04 	addi	sp,sp,-16
    5ddc:	dfc00315 	stw	ra,12(sp)
    5de0:	df000215 	stw	fp,8(sp)
    5de4:	df000204 	addi	fp,sp,8
    5de8:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
    5dec:	e0bfff17 	ldw	r2,-4(fp)
    5df0:	1080bb04 	addi	r2,r2,748
    5df4:	10800037 	ldwio	r2,0(r2)
    5df8:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
    5dfc:	e0fffe0b 	ldhu	r3,-8(fp)
    5e00:	00bffc04 	movi	r2,-16
    5e04:	1884703a 	and	r2,r3,r2
    5e08:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
    5e0c:	01000174 	movhi	r4,5
    5e10:	21322d04 	addi	r4,r4,-14156
    5e14:	00083740 	call	8374 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
    5e18:	e0bfff17 	ldw	r2,-4(fp)
    5e1c:	1080bb04 	addi	r2,r2,748
    5e20:	e0fffe0b 	ldhu	r3,-8(fp)
    5e24:	18c002d4 	ori	r3,r3,11
    5e28:	18ffffcc 	andi	r3,r3,65535
    5e2c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
    5e30:	01000174 	movhi	r4,5
    5e34:	21323c04 	addi	r4,r4,-14096
    5e38:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
    5e3c:	e0bfff17 	ldw	r2,-4(fp)
    5e40:	1080b404 	addi	r2,r2,720
    5e44:	10800037 	ldwio	r2,0(r2)
    5e48:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
    5e4c:	e0fffe0b 	ldhu	r3,-8(fp)
    5e50:	00bfdf44 	movi	r2,-131
    5e54:	1884703a 	and	r2,r3,r2
    5e58:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
    5e5c:	e0bffe0b 	ldhu	r2,-8(fp)
    5e60:	10802094 	ori	r2,r2,130
    5e64:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
    5e68:	e0bfff17 	ldw	r2,-4(fp)
    5e6c:	1080b404 	addi	r2,r2,720
    5e70:	e0fffe0b 	ldhu	r3,-8(fp)
    5e74:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
    5e78:	01000174 	movhi	r4,5
    5e7c:	2131fd04 	addi	r4,r4,-14348
    5e80:	00083740 	call	8374 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
    5e84:	e0bfff17 	ldw	r2,-4(fp)
    5e88:	1080a004 	addi	r2,r2,640
    5e8c:	10800037 	ldwio	r2,0(r2)
    5e90:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
    5e94:	e0bfff17 	ldw	r2,-4(fp)
    5e98:	1080a004 	addi	r2,r2,640
    5e9c:	e13ffe0b 	ldhu	r4,-8(fp)
    5ea0:	00e00004 	movi	r3,-32768
    5ea4:	20c6b03a 	or	r3,r4,r3
    5ea8:	18ffffcc 	andi	r3,r3,65535
    5eac:	10c00035 	stwio	r3,0(r2)
    
    return 1;
    5eb0:	00800044 	movi	r2,1
    
}
    5eb4:	e037883a 	mov	sp,fp
    5eb8:	dfc00117 	ldw	ra,4(sp)
    5ebc:	df000017 	ldw	fp,0(sp)
    5ec0:	dec00204 	addi	sp,sp,8
    5ec4:	f800283a 	ret

00005ec8 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
    5ec8:	defffc04 	addi	sp,sp,-16
    5ecc:	df000315 	stw	fp,12(sp)
    5ed0:	df000304 	addi	fp,sp,12
    5ed4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
    5ed8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
    5edc:	e0bfff17 	ldw	r2,-4(fp)
    5ee0:	1080b004 	addi	r2,r2,704
    5ee4:	10800037 	ldwio	r2,0(r2)
    5ee8:	e0bffe15 	stw	r2,-8(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
    5eec:	e0bffe17 	ldw	r2,-8(fp)
    5ef0:	1080008c 	andi	r2,r2,2
    5ef4:	10000426 	beq	r2,zero,5f08 <DP83848C_link_status_read+0x40>
		link_status |= 0x8;
    5ef8:	e0bffd17 	ldw	r2,-12(fp)
    5efc:	10800214 	ori	r2,r2,8
    5f00:	e0bffd15 	stw	r2,-12(fp)
    5f04:	00000306 	br	5f14 <DP83848C_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
    5f08:	e0bffd17 	ldw	r2,-12(fp)
    5f0c:	10800114 	ori	r2,r2,4
    5f10:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
    5f14:	e0bffe17 	ldw	r2,-8(fp)
    5f18:	1080010c 	andi	r2,r2,4
    5f1c:	10000326 	beq	r2,zero,5f2c <DP83848C_link_status_read+0x64>
		link_status |= 0x1;
    5f20:	e0bffd17 	ldw	r2,-12(fp)
    5f24:	10800054 	ori	r2,r2,1
    5f28:	e0bffd15 	stw	r2,-12(fp)
	}
	
	return link_status;
    5f2c:	e0bffd17 	ldw	r2,-12(fp)
}
    5f30:	e037883a 	mov	sp,fp
    5f34:	df000017 	ldw	fp,0(sp)
    5f38:	dec00104 	addi	sp,sp,4
    5f3c:	f800283a 	ret

00005f40 <DP83620_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83620_link_status_read(np_tse_mac *pmac) {
    5f40:	defffc04 	addi	sp,sp,-16
    5f44:	df000315 	stw	fp,12(sp)
    5f48:	df000304 	addi	fp,sp,12
    5f4c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
    5f50:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
    5f54:	e0bfff17 	ldw	r2,-4(fp)
    5f58:	1080b004 	addi	r2,r2,704
    5f5c:	10800037 	ldwio	r2,0(r2)
    5f60:	e0bffe15 	stw	r2,-8(fp)

	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
    5f64:	e0bffe17 	ldw	r2,-8(fp)
    5f68:	1080008c 	andi	r2,r2,2
    5f6c:	10000426 	beq	r2,zero,5f80 <DP83620_link_status_read+0x40>
		link_status |= 0x8;
    5f70:	e0bffd17 	ldw	r2,-12(fp)
    5f74:	10800214 	ori	r2,r2,8
    5f78:	e0bffd15 	stw	r2,-12(fp)
    5f7c:	00000306 	br	5f8c <DP83620_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	10800114 	ori	r2,r2,4
    5f88:	e0bffd15 	stw	r2,-12(fp)
	}

	/* If duplex == Full */
	if(reg_status & 0x4) {
    5f8c:	e0bffe17 	ldw	r2,-8(fp)
    5f90:	1080010c 	andi	r2,r2,4
    5f94:	10000326 	beq	r2,zero,5fa4 <DP83620_link_status_read+0x64>
		link_status |= 0x1;
    5f98:	e0bffd17 	ldw	r2,-12(fp)
    5f9c:	10800054 	ori	r2,r2,1
    5fa0:	e0bffd15 	stw	r2,-12(fp)
	}

	return link_status;
    5fa4:	e0bffd17 	ldw	r2,-12(fp)
}
    5fa8:	e037883a 	mov	sp,fp
    5fac:	df000017 	ldw	fp,0(sp)
    5fb0:	dec00104 	addi	sp,sp,4
    5fb4:	f800283a 	ret

00005fb8 <led_bit_toggle>:
 * Development Board which controls 8 LEDs, D0 - D7.
 * 
 */
 
void led_bit_toggle(OS_FLAGS bit)
{
    5fb8:	defffc04 	addi	sp,sp,-16
    5fbc:	dfc00315 	stw	ra,12(sp)
    5fc0:	df000215 	stw	fp,8(sp)
    5fc4:	df000204 	addi	fp,sp,8
    5fc8:	2005883a 	mov	r2,r4
    5fcc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS  led_8_val;
    INT8U error_code;
    
    led_8_val = OSFlagQuery(SSSLEDEventFlag, &error_code);
    5fd0:	00800174 	movhi	r2,5
    5fd4:	108f7304 	addi	r2,r2,15820
    5fd8:	10c00017 	ldw	r3,0(r2)
    5fdc:	e0bffe84 	addi	r2,fp,-6
    5fe0:	1809883a 	mov	r4,r3
    5fe4:	100b883a 	mov	r5,r2
    5fe8:	001b67c0 	call	1b67c <OSFlagQuery>
    5fec:	e0bffe0d 	sth	r2,-8(fp)
    alt_uCOSIIErrorHandler(error_code, 0);
    5ff0:	e0bffe83 	ldbu	r2,-6(fp)
    5ff4:	10803fcc 	andi	r2,r2,255
    5ff8:	1009883a 	mov	r4,r2
    5ffc:	000b883a 	mov	r5,zero
    6000:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
    if (bit & led_8_val)
    6004:	e0ffff0b 	ldhu	r3,-4(fp)
    6008:	e0bffe0b 	ldhu	r2,-8(fp)
    600c:	1884703a 	and	r2,r3,r2
    6010:	10bfffcc 	andi	r2,r2,65535
    6014:	10001026 	beq	r2,zero,6058 <led_bit_toggle+0xa0>
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_CLR, &error_code);
    6018:	00800174 	movhi	r2,5
    601c:	108f7304 	addi	r2,r2,15820
    6020:	11000017 	ldw	r4,0(r2)
    6024:	e0ffff0b 	ldhu	r3,-4(fp)
    6028:	e0bffe84 	addi	r2,fp,-6
    602c:	180b883a 	mov	r5,r3
    6030:	000d883a 	mov	r6,zero
    6034:	100f883a 	mov	r7,r2
    6038:	001b2f40 	call	1b2f4 <OSFlagPost>
    603c:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
    6040:	e0bffe83 	ldbu	r2,-6(fp)
    6044:	10803fcc 	andi	r2,r2,255
    6048:	1009883a 	mov	r4,r2
    604c:	000b883a 	mov	r5,zero
    6050:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
    6054:	00000f06 	br	6094 <led_bit_toggle+0xdc>
    }
    else
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_SET, &error_code);
    6058:	00800174 	movhi	r2,5
    605c:	108f7304 	addi	r2,r2,15820
    6060:	11000017 	ldw	r4,0(r2)
    6064:	e0ffff0b 	ldhu	r3,-4(fp)
    6068:	e0bffe84 	addi	r2,fp,-6
    606c:	180b883a 	mov	r5,r3
    6070:	01800044 	movi	r6,1
    6074:	100f883a 	mov	r7,r2
    6078:	001b2f40 	call	1b2f4 <OSFlagPost>
    607c:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
    6080:	e0bffe83 	ldbu	r2,-6(fp)
    6084:	10803fcc 	andi	r2,r2,255
    6088:	1009883a 	mov	r4,r2
    608c:	000b883a 	mov	r5,zero
    6090:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
    }
    #ifdef LED_PIO_BASE
       IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, ~led_8_val);
    6094:	e0bffe0b 	ldhu	r2,-8(fp)
    6098:	0086303a 	nor	r3,zero,r2
    609c:	00880034 	movhi	r2,8192
    60a0:	10803004 	addi	r2,r2,192
    60a4:	10c00035 	stwio	r3,0(r2)
       printf("Value for LED_PIO_BASE set to %d.\n", (INT8U)(~led_8_val));
    60a8:	e0bffe0b 	ldhu	r2,-8(fp)
    60ac:	0084303a 	nor	r2,zero,r2
    60b0:	10803fcc 	andi	r2,r2,255
    60b4:	01000174 	movhi	r4,5
    60b8:	21324604 	addi	r4,r4,-14056
    60bc:	100b883a 	mov	r5,r2
    60c0:	00080f80 	call	80f8 <printf>
    #endif
      
    return;
    60c4:	0001883a 	nop
}
    60c8:	e037883a 	mov	sp,fp
    60cc:	dfc00117 	ldw	ra,4(sp)
    60d0:	df000017 	ldw	fp,0(sp)
    60d4:	dec00204 	addi	sp,sp,8
    60d8:	f800283a 	ret

000060dc <LED7SegLightshowTask>:
 * SSSLEDLightshowSem semaphore controlled in LEDManagementTask.
 * 
 */ 

void LED7SegLightshowTask()
{
    60dc:	defffd04 	addi	sp,sp,-12
    60e0:	dfc00215 	stw	ra,8(sp)
    60e4:	df000115 	stw	fp,4(sp)
    60e8:	df000104 	addi	fp,sp,4
   {
    
      /* Wait 50 milliseconds between pattern updates, to make the pattern slow
       * enough for the human eye, and more impotantly, to give up control so
       * MicroC/OS-II can schedule other lower priority tasks. */ 
      OSTimeDlyHMSM(0,0,0,50);
    60ec:	0009883a 	mov	r4,zero
    60f0:	000b883a 	mov	r5,zero
    60f4:	000d883a 	mov	r6,zero
    60f8:	01c00c84 	movi	r7,50
    60fc:	001fa700 	call	1fa70 <OSTimeDlyHMSM>
      
      /* Check that we still have the SSSLEDLightshowSem semaphore. If we don't,
       * then wait until the LEDManagement task gives it back to us. */
      OSSemPend(SSSLEDLightshowSem, 0, &error_code);
    6100:	00800174 	movhi	r2,5
    6104:	108f7204 	addi	r2,r2,15816
    6108:	10800017 	ldw	r2,0(r2)
    610c:	1009883a 	mov	r4,r2
    6110:	000b883a 	mov	r5,zero
    6114:	e1bfff04 	addi	r6,fp,-4
    6118:	001d9440 	call	1d944 <OSSemPend>
      alt_uCOSIIErrorHandler(error_code, 0);
    611c:	e0bfff03 	ldbu	r2,-4(fp)
    6120:	10803fcc 	andi	r2,r2,255
    6124:	1009883a 	mov	r4,r2
    6128:	000b883a 	mov	r5,zero
    612c:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
      #if SEVEN_SEG_PIO_BASE
         led_7_seg_val = rand();
         IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, led_7_seg_val);
      #endif
      
      error_code = OSSemPost(SSSLEDLightshowSem);
    6130:	00800174 	movhi	r2,5
    6134:	108f7204 	addi	r2,r2,15816
    6138:	10800017 	ldw	r2,0(r2)
    613c:	1009883a 	mov	r4,r2
    6140:	001dd180 	call	1dd18 <OSSemPost>
    6144:	e0bfff05 	stb	r2,-4(fp)
      alt_uCOSIIErrorHandler(error_code, 0);
    6148:	e0bfff03 	ldbu	r2,-4(fp)
    614c:	10803fcc 	andi	r2,r2,255
    6150:	1009883a 	mov	r4,r2
    6154:	000b883a 	mov	r5,zero
    6158:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
      
   }
    615c:	003fe306 	br	60ec <__alt_mem_descriptor_memory+0xdefc60ec>

00006160 <LEDManagementTask>:
 * The task will read the SSSLedCommandQ for an 
 * in-coming message command from the SSSSimpleSocketServerTask. 
 */
 
void LEDManagementTask()
{
    6160:	defffb04 	addi	sp,sp,-20
    6164:	dfc00415 	stw	ra,16(sp)
    6168:	df000315 	stw	fp,12(sp)
    616c:	df000304 	addi	fp,sp,12
  INT32U led_command; 
  INT16U led_7_seg_val;
  BOOLEAN SSSLEDLightshowActive;
  INT8U error_code;
  
  led_7_seg_val = 0;
    6170:	e03ffd8d 	sth	zero,-10(fp)
  SSSLEDLightshowActive = OS_TRUE;
    6174:	00800044 	movi	r2,1
    6178:	e0bffd05 	stb	r2,-12(fp)
  
  while(1)
  {
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
    617c:	00800174 	movhi	r2,5
    6180:	108f7104 	addi	r2,r2,15812
    6184:	10c00017 	ldw	r3,0(r2)
    6188:	e0bfff04 	addi	r2,fp,-4
    618c:	1809883a 	mov	r4,r3
    6190:	000b883a 	mov	r5,zero
    6194:	100d883a 	mov	r6,r2
    6198:	001c9d80 	call	1c9d8 <OSQPend>
    619c:	e0bffe15 	stw	r2,-8(fp)
   
    alt_uCOSIIErrorHandler(error_code, 0);
    61a0:	e0bfff03 	ldbu	r2,-4(fp)
    61a4:	10803fcc 	andi	r2,r2,255
    61a8:	1009883a 	mov	r4,r2
    61ac:	000b883a 	mov	r5,zero
    61b0:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
        
    switch (led_command) {
    61b4:	e0bffe17 	ldw	r2,-8(fp)
    61b8:	10bff404 	addi	r2,r2,-48
    61bc:	10c00928 	cmpgeui	r3,r2,36
    61c0:	1800611e 	bne	r3,zero,6348 <LEDManagementTask+0x1e8>
    61c4:	100690ba 	slli	r3,r2,2
    61c8:	00800034 	movhi	r2,0
    61cc:	10987704 	addi	r2,r2,25052
    61d0:	1885883a 	add	r2,r3,r2
    61d4:	10800017 	ldw	r2,0(r2)
    61d8:	1000683a 	jmp	r2
    61dc:	0000626c 	andhi	zero,zero,393
    61e0:	00006278 	rdprs	zero,zero,393
    61e4:	00006284 	movi	zero,394
    61e8:	00006290 	cmplti	zero,zero,394
    61ec:	0000629c 	xori	zero,zero,394
    61f0:	000062a8 	cmpgeui	zero,zero,394
    61f4:	000062b4 	movhi	zero,394
    61f8:	000062c0 	call	62c <alt_uCOSIIErrorHandler+0x3a0>
    61fc:	00006348 	cmpgei	zero,zero,397
    6200:	00006348 	cmpgei	zero,zero,397
    6204:	00006348 	cmpgei	zero,zero,397
    6208:	00006348 	cmpgei	zero,zero,397
    620c:	00006348 	cmpgei	zero,zero,397
    6210:	00006348 	cmpgei	zero,zero,397
    6214:	00006348 	cmpgei	zero,zero,397
    6218:	00006348 	cmpgei	zero,zero,397
    621c:	00006348 	cmpgei	zero,zero,397
    6220:	00006348 	cmpgei	zero,zero,397
    6224:	00006348 	cmpgei	zero,zero,397
    6228:	00006348 	cmpgei	zero,zero,397
    622c:	00006348 	cmpgei	zero,zero,397
    6230:	00006348 	cmpgei	zero,zero,397
    6234:	00006348 	cmpgei	zero,zero,397
    6238:	00006348 	cmpgei	zero,zero,397
    623c:	00006348 	cmpgei	zero,zero,397
    6240:	00006348 	cmpgei	zero,zero,397
    6244:	00006348 	cmpgei	zero,zero,397
    6248:	00006348 	cmpgei	zero,zero,397
    624c:	00006348 	cmpgei	zero,zero,397
    6250:	00006348 	cmpgei	zero,zero,397
    6254:	00006348 	cmpgei	zero,zero,397
    6258:	00006348 	cmpgei	zero,zero,397
    625c:	00006348 	cmpgei	zero,zero,397
    6260:	00006348 	cmpgei	zero,zero,397
    6264:	00006348 	cmpgei	zero,zero,397
    6268:	000062cc 	andi	zero,zero,395
      case CMD_LEDS_BIT_0_TOGGLE:
         led_bit_toggle(BIT_0);
    626c:	01000044 	movi	r4,1
    6270:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    6274:	00003506 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_1_TOGGLE:
         led_bit_toggle(BIT_1);
    6278:	01000084 	movi	r4,2
    627c:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;   
    6280:	00003206 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_2_TOGGLE:
         led_bit_toggle(BIT_2);
    6284:	01000104 	movi	r4,4
    6288:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    628c:	00002f06 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_3_TOGGLE:
         led_bit_toggle(BIT_3);
    6290:	01000204 	movi	r4,8
    6294:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    6298:	00002c06 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_4_TOGGLE:
         led_bit_toggle(BIT_4);
    629c:	01000404 	movi	r4,16
    62a0:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    62a4:	00002906 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_5_TOGGLE:
         led_bit_toggle(BIT_5);
    62a8:	01000804 	movi	r4,32
    62ac:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    62b0:	00002606 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_6_TOGGLE:
         led_bit_toggle(BIT_6);
    62b4:	01001004 	movi	r4,64
    62b8:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    62bc:	00002306 	br	634c <LEDManagementTask+0x1ec>
      case CMD_LEDS_BIT_7_TOGGLE:
         led_bit_toggle(BIT_7);
    62c0:	01002004 	movi	r4,128
    62c4:	0005fb80 	call	5fb8 <led_bit_toggle>
         break;
    62c8:	00002006 	br	634c <LEDManagementTask+0x1ec>
         /* The SSSLEDLightshowSem semaphore is checked by LED7SegLightshowTask 
          * each time it updates 7 segment LED displays, U8 and U9.  Grab the 
          * semaphore (pend) away from the lightshow task to toggle the lightshow off, 
          * and give up the semaphore (post) to turn the lightshow back on.  
          */
         if (SSSLEDLightshowActive == OS_FALSE)
    62cc:	e0bffd03 	ldbu	r2,-12(fp)
    62d0:	10000e1e 	bne	r2,zero,630c <LEDManagementTask+0x1ac>
         {
             error_code = OSSemPost(SSSLEDLightshowSem);
    62d4:	00800174 	movhi	r2,5
    62d8:	108f7204 	addi	r2,r2,15816
    62dc:	10800017 	ldw	r2,0(r2)
    62e0:	1009883a 	mov	r4,r2
    62e4:	001dd180 	call	1dd18 <OSSemPost>
    62e8:	e0bfff05 	stb	r2,-4(fp)
             alt_uCOSIIErrorHandler(error_code, 0);
    62ec:	e0bfff03 	ldbu	r2,-4(fp)
    62f0:	10803fcc 	andi	r2,r2,255
    62f4:	1009883a 	mov	r4,r2
    62f8:	000b883a 	mov	r5,zero
    62fc:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
             SSSLEDLightshowActive = OS_TRUE;
    6300:	00800044 	movi	r2,1
    6304:	e0bffd05 	stb	r2,-12(fp)
         {
             OSSemPend(SSSLEDLightshowSem, 0, &error_code);
             alt_uCOSIIErrorHandler(error_code, 0); 
             SSSLEDLightshowActive = OS_FALSE;
         }     
         break;
    6308:	00001006 	br	634c <LEDManagementTask+0x1ec>
             alt_uCOSIIErrorHandler(error_code, 0);
             SSSLEDLightshowActive = OS_TRUE;
         }
         else
         {
             OSSemPend(SSSLEDLightshowSem, 0, &error_code);
    630c:	00800174 	movhi	r2,5
    6310:	108f7204 	addi	r2,r2,15816
    6314:	10c00017 	ldw	r3,0(r2)
    6318:	e0bfff04 	addi	r2,fp,-4
    631c:	1809883a 	mov	r4,r3
    6320:	000b883a 	mov	r5,zero
    6324:	100d883a 	mov	r6,r2
    6328:	001d9440 	call	1d944 <OSSemPend>
             alt_uCOSIIErrorHandler(error_code, 0); 
    632c:	e0bfff03 	ldbu	r2,-4(fp)
    6330:	10803fcc 	andi	r2,r2,255
    6334:	1009883a 	mov	r4,r2
    6338:	000b883a 	mov	r5,zero
    633c:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
             SSSLEDLightshowActive = OS_FALSE;
    6340:	e03ffd05 	stb	zero,-12(fp)
         }     
         break;
    6344:	00000106 	br	634c <LEDManagementTask+0x1ec>
      default:     
        /* Discard unknown LED commands. */
        break;
    6348:	0001883a 	nop
    } /* switch led_command */
  } /* while(1) */
    634c:	003f8b06 	br	617c <__alt_mem_descriptor_memory+0xdefc617c>

00006350 <get_mac_addr>:
* Read the MAC address in a board specific way. Prompt user to enter serial 
* number to generate MAC address if failed to read from flash.
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
    6350:	defffb04 	addi	sp,sp,-20
    6354:	dfc00415 	stw	ra,16(sp)
    6358:	df000315 	stw	fp,12(sp)
    635c:	df000304 	addi	fp,sp,12
    6360:	e13ffe15 	stw	r4,-8(fp)
    6364:	e17fff15 	stw	r5,-4(fp)
    error_t error = 0;
    6368:	e03ffd15 	stw	zero,-12(fp)
    
    error = get_board_mac_addr(mac_addr);
    636c:	e13fff17 	ldw	r4,-4(fp)
    6370:	00067440 	call	6744 <get_board_mac_addr>
    6374:	e0bffd15 	stw	r2,-12(fp)
    
    if(error)
    6378:	e0bffd17 	ldw	r2,-12(fp)
    637c:	10000326 	beq	r2,zero,638c <get_mac_addr+0x3c>
    {
        /* Failed read MAC address from flash, prompt user to enter serial 
           number to generate MAC address. */
        error = generate_mac_addr(mac_addr);
    6380:	e13fff17 	ldw	r4,-4(fp)
    6384:	000660c0 	call	660c <generate_mac_addr>
    6388:	e0bffd15 	stw	r2,-12(fp)
    }
    return error;
    638c:	e0bffd17 	ldw	r2,-12(fp)
}
    6390:	e037883a 	mov	sp,fp
    6394:	dfc00117 	ldw	ra,4(sp)
    6398:	df000017 	ldw	fp,0(sp)
    639c:	dec00204 	addi	sp,sp,8
    63a0:	f800283a 	ret

000063a4 <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
    63a4:	defffb04 	addi	sp,sp,-20
    63a8:	df000415 	stw	fp,16(sp)
    63ac:	df000404 	addi	fp,sp,16
    63b0:	e13ffc15 	stw	r4,-16(fp)
    63b4:	e17ffd15 	stw	r5,-12(fp)
    63b8:	e1bffe15 	stw	r6,-8(fp)
    63bc:	e1ffff15 	stw	r7,-4(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
    63c0:	e0fffd17 	ldw	r3,-12(fp)
    63c4:	009fc5b4 	movhi	r2,32534
    63c8:	10aa3004 	addi	r2,r2,-22336
    63cc:	18800015 	stw	r2,0(r3)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
    63d0:	e0ffff17 	ldw	r3,-4(fp)
    63d4:	008045b4 	movhi	r2,278
    63d8:	10aa3004 	addi	r2,r2,-22336
    63dc:	18800015 	stw	r2,0(r3)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
    63e0:	e0fffe17 	ldw	r3,-8(fp)
    63e4:	00804034 	movhi	r2,256
    63e8:	10bfffc4 	addi	r2,r2,-1
    63ec:	18800015 	stw	r2,0(r3)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
    63f0:	e0800117 	ldw	r2,4(fp)
    63f4:	00c00044 	movi	r3,1
    63f8:	10c00015 	stw	r3,0(r2)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
    63fc:	00800044 	movi	r2,1
}
    6400:	e037883a 	mov	sp,fp
    6404:	df000017 	ldw	fp,0(sp)
    6408:	dec00104 	addi	sp,sp,4
    640c:	f800283a 	ret

00006410 <get_serial_number>:
*
* Prompt user to enter 9-digit serial number. 
*
*/
alt_u32 get_serial_number (void)
{
    6410:	defff904 	addi	sp,sp,-28
    6414:	dfc00615 	stw	ra,24(sp)
    6418:	df000515 	stw	fp,20(sp)
    641c:	df000504 	addi	fp,sp,20
    alt_u32 ser_num = 0;
    6420:	e03ffb15 	stw	zero,-20(fp)
    char serial_number[9];
    int i = 0;
    6424:	e03ffc15 	stw	zero,-16(fp)
    
    while(!ser_num)
    6428:	00006606 	br	65c4 <get_serial_number+0x1b4>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
    642c:	01000174 	movhi	r4,5
    6430:	21324f04 	addi	r4,r4,-14020
    6434:	00083740 	call	8374 <puts>
        printf("label under your Nios dev. board. The first 3 digits of the \n");
    6438:	01000174 	movhi	r4,5
    643c:	21325f04 	addi	r4,r4,-13956
    6440:	00083740 	call	8374 <puts>
        printf("label are ASJ and the serial number follows this.\n -->");
    6444:	01000174 	movhi	r4,5
    6448:	21326f04 	addi	r4,r4,-13892
    644c:	00080f80 	call	80f8 <printf>
        
        for(i=0; i<9; i++)
    6450:	e03ffc15 	stw	zero,-16(fp)
    6454:	00002a06 	br	6500 <get_serial_number+0xf0>
        {
            serial_number[i] = getchar();
    6458:	00800174 	movhi	r2,5
    645c:	10872d04 	addi	r2,r2,7348
    6460:	10800017 	ldw	r2,0(r2)
    6464:	10800117 	ldw	r2,4(r2)
    6468:	1009883a 	mov	r4,r2
    646c:	00074380 	call	7438 <getc>
    6470:	1009883a 	mov	r4,r2
    6474:	e0fffd04 	addi	r3,fp,-12
    6478:	e0bffc17 	ldw	r2,-16(fp)
    647c:	1885883a 	add	r2,r3,r2
    6480:	11000005 	stb	r4,0(r2)
            putchar(serial_number[i]);
    6484:	e0fffd04 	addi	r3,fp,-12
    6488:	e0bffc17 	ldw	r2,-16(fp)
    648c:	1885883a 	add	r2,r3,r2
    6490:	10800003 	ldbu	r2,0(r2)
    6494:	10c03fcc 	andi	r3,r2,255
    6498:	18c0201c 	xori	r3,r3,128
    649c:	18ffe004 	addi	r3,r3,-128
    64a0:	00800174 	movhi	r2,5
    64a4:	10872d04 	addi	r2,r2,7348
    64a8:	10800017 	ldw	r2,0(r2)
    64ac:	10800217 	ldw	r2,8(r2)
    64b0:	1809883a 	mov	r4,r3
    64b4:	100b883a 	mov	r5,r2
    64b8:	00081d40 	call	81d4 <putc>
            
            /* Handle backspaces.  How civilized. */
            if ((serial_number[i] == 0x08) && (i >= 0)) 
    64bc:	e0fffd04 	addi	r3,fp,-12
    64c0:	e0bffc17 	ldw	r2,-16(fp)
    64c4:	1885883a 	add	r2,r3,r2
    64c8:	10800003 	ldbu	r2,0(r2)
    64cc:	10803fcc 	andi	r2,r2,255
    64d0:	1080201c 	xori	r2,r2,128
    64d4:	10bfe004 	addi	r2,r2,-128
    64d8:	10800218 	cmpnei	r2,r2,8
    64dc:	1000051e 	bne	r2,zero,64f4 <get_serial_number+0xe4>
    64e0:	e0bffc17 	ldw	r2,-16(fp)
    64e4:	10000316 	blt	r2,zero,64f4 <get_serial_number+0xe4>
            {
                i--;
    64e8:	e0bffc17 	ldw	r2,-16(fp)
    64ec:	10bfffc4 	addi	r2,r2,-1
    64f0:	e0bffc15 	stw	r2,-16(fp)
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
        printf("label under your Nios dev. board. The first 3 digits of the \n");
        printf("label are ASJ and the serial number follows this.\n -->");
        
        for(i=0; i<9; i++)
    64f4:	e0bffc17 	ldw	r2,-16(fp)
    64f8:	10800044 	addi	r2,r2,1
    64fc:	e0bffc15 	stw	r2,-16(fp)
    6500:	e0bffc17 	ldw	r2,-16(fp)
    6504:	10800250 	cmplti	r2,r2,9
    6508:	103fd31e 	bne	r2,zero,6458 <__alt_mem_descriptor_memory+0xdefc6458>
            if ((serial_number[i] == 0x08) && (i >= 0)) 
            {
                i--;
            }
        }
        printf("\n");
    650c:	01000284 	movi	r4,10
    6510:	00082a40 	call	82a4 <putchar>
                
        for(i=0; i<9; i++)
    6514:	e03ffc15 	stw	zero,-16(fp)
    6518:	00002706 	br	65b8 <get_serial_number+0x1a8>
        {
            if (isdigit(serial_number[i]))
    651c:	00800174 	movhi	r2,5
    6520:	10872b04 	addi	r2,r2,7340
    6524:	10c00017 	ldw	r3,0(r2)
    6528:	e13ffd04 	addi	r4,fp,-12
    652c:	e0bffc17 	ldw	r2,-16(fp)
    6530:	2085883a 	add	r2,r4,r2
    6534:	10800003 	ldbu	r2,0(r2)
    6538:	10803fcc 	andi	r2,r2,255
    653c:	1080201c 	xori	r2,r2,128
    6540:	10bfe004 	addi	r2,r2,-128
    6544:	10800044 	addi	r2,r2,1
    6548:	1885883a 	add	r2,r3,r2
    654c:	10800003 	ldbu	r2,0(r2)
    6550:	10803fcc 	andi	r2,r2,255
    6554:	1080010c 	andi	r2,r2,4
    6558:	10000f26 	beq	r2,zero,6598 <get_serial_number+0x188>
            {
                ser_num *= 10;
    655c:	e0bffb17 	ldw	r2,-20(fp)
    6560:	108002a4 	muli	r2,r2,10
    6564:	e0bffb15 	stw	r2,-20(fp)
                ser_num += serial_number[i] - '0';
    6568:	e0fffd04 	addi	r3,fp,-12
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	1885883a 	add	r2,r3,r2
    6574:	10800003 	ldbu	r2,0(r2)
    6578:	10c03fcc 	andi	r3,r2,255
    657c:	18c0201c 	xori	r3,r3,128
    6580:	18ffe004 	addi	r3,r3,-128
    6584:	e0bffb17 	ldw	r2,-20(fp)
    6588:	1885883a 	add	r2,r3,r2
    658c:	10bff404 	addi	r2,r2,-48
    6590:	e0bffb15 	stw	r2,-20(fp)
    6594:	00000506 	br	65ac <get_serial_number+0x19c>
            }
            else
            {
                ser_num = 0;
    6598:	e03ffb15 	stw	zero,-20(fp)
                printf("Serial number only contains decimal digits and is non-zero\n");
    659c:	01000174 	movhi	r4,5
    65a0:	21327d04 	addi	r4,r4,-13836
    65a4:	00083740 	call	8374 <puts>
                break;
    65a8:	00000606 	br	65c4 <get_serial_number+0x1b4>
                i--;
            }
        }
        printf("\n");
                
        for(i=0; i<9; i++)
    65ac:	e0bffc17 	ldw	r2,-16(fp)
    65b0:	10800044 	addi	r2,r2,1
    65b4:	e0bffc15 	stw	r2,-16(fp)
    65b8:	e0bffc17 	ldw	r2,-16(fp)
    65bc:	10800250 	cmplti	r2,r2,9
    65c0:	103fd61e 	bne	r2,zero,651c <__alt_mem_descriptor_memory+0xdefc651c>
{
    alt_u32 ser_num = 0;
    char serial_number[9];
    int i = 0;
    
    while(!ser_num)
    65c4:	e0bffb17 	ldw	r2,-20(fp)
    65c8:	103f9826 	beq	r2,zero,642c <__alt_mem_descriptor_memory+0xdefc642c>
                break;
            }
        }
    }
    
    return ser_num;
    65cc:	e0bffb17 	ldw	r2,-20(fp)
}
    65d0:	e037883a 	mov	sp,fp
    65d4:	dfc00117 	ldw	ra,4(sp)
    65d8:	df000017 	ldw	fp,0(sp)
    65dc:	dec00204 	addi	sp,sp,8
    65e0:	f800283a 	ret

000065e4 <generate_and_store_mac_addr>:
 * sections. These fail-safe static settings are compatible with previous
 * Nios Ethernet designs, and allow the "factory-safe" design to behave 
 * as expected if the last flash sector is erased.
 */
error_t generate_and_store_mac_addr()
{
    65e4:	defffe04 	addi	sp,sp,-8
    65e8:	df000115 	stw	fp,4(sp)
    65ec:	df000104 	addi	fp,sp,4
    error_t error = -1;
    65f0:	00bfffc4 	movi	r2,-1
    65f4:	e0bfff15 	stw	r2,-4(fp)
            alt_flash_close_dev(flash_handle);
            error = 0;
        }
    }*/

    return error;    
    65f8:	e0bfff17 	ldw	r2,-4(fp)
}
    65fc:	e037883a 	mov	sp,fp
    6600:	df000017 	ldw	fp,0(sp)
    6604:	dec00104 	addi	sp,sp,4
    6608:	f800283a 	ret

0000660c <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
    660c:	defff804 	addi	sp,sp,-32
    6610:	dfc00715 	stw	ra,28(sp)
    6614:	df000615 	stw	fp,24(sp)
    6618:	df000604 	addi	fp,sp,24
    661c:	e13fff15 	stw	r4,-4(fp)
    error_t error = -1;
    6620:	00bfffc4 	movi	r2,-1
    6624:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 ser_num = 0;
    6628:	e03ffe15 	stw	zero,-8(fp)
    
    printf("\nCan't read the MAC address from your board. We will assign you\n");
    662c:	01000174 	movhi	r4,5
    6630:	21328c04 	addi	r4,r4,-13776
    6634:	00083740 	call	8374 <puts>
    printf("a MAC address.\n\n");
    6638:	01000174 	movhi	r4,5
    663c:	21329c04 	addi	r4,r4,-13712
    6640:	00083740 	call	8374 <puts>
    
    ser_num = get_serial_number();
    6644:	00064100 	call	6410 <get_serial_number>
    6648:	e0bffe15 	stw	r2,-8(fp)
  
    if (ser_num)
    664c:	e0bffe17 	ldw	r2,-8(fp)
    6650:	10003626 	beq	r2,zero,672c <generate_mac_addr+0x120>
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
    6654:	e0bfff17 	ldw	r2,-4(fp)
    6658:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x7;
    665c:	e0bfff17 	ldw	r2,-4(fp)
    6660:	10800044 	addi	r2,r2,1
    6664:	00c001c4 	movi	r3,7
    6668:	10c00005 	stb	r3,0(r2)
        mac_addr[2] = 0xed;
    666c:	e0bfff17 	ldw	r2,-4(fp)
    6670:	10800084 	addi	r2,r2,2
    6674:	00fffb44 	movi	r3,-19
    6678:	10c00005 	stb	r3,0(r2)
        
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
    667c:	e0bfff17 	ldw	r2,-4(fp)
    6680:	108000c4 	addi	r2,r2,3
    6684:	00ffffc4 	movi	r3,-1
    6688:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = (ser_num & 0xff00) >> 8;
    668c:	e0bfff17 	ldw	r2,-4(fp)
    6690:	10800104 	addi	r2,r2,4
    6694:	e0fffe17 	ldw	r3,-8(fp)
    6698:	18ffc00c 	andi	r3,r3,65280
    669c:	1806d23a 	srli	r3,r3,8
    66a0:	10c00005 	stb	r3,0(r2)
        mac_addr[5] = ser_num & 0xff;
    66a4:	e0bfff17 	ldw	r2,-4(fp)
    66a8:	10800144 	addi	r2,r2,5
    66ac:	e0fffe17 	ldw	r3,-8(fp)
    66b0:	10c00005 	stb	r3,0(r2)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
    66b4:	e0bfff17 	ldw	r2,-4(fp)
    66b8:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    66bc:	11403fcc 	andi	r5,r2,255
            mac_addr[0],
            mac_addr[1],
    66c0:	e0bfff17 	ldw	r2,-4(fp)
    66c4:	10800044 	addi	r2,r2,1
    66c8:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    66cc:	11803fcc 	andi	r6,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
    66d0:	e0bfff17 	ldw	r2,-4(fp)
    66d4:	10800084 	addi	r2,r2,2
    66d8:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    66dc:	11c03fcc 	andi	r7,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
    66e0:	e0bfff17 	ldw	r2,-4(fp)
    66e4:	108000c4 	addi	r2,r2,3
    66e8:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    66ec:	11003fcc 	andi	r4,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
    66f0:	e0bfff17 	ldw	r2,-4(fp)
    66f4:	10800104 	addi	r2,r2,4
    66f8:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    66fc:	10c03fcc 	andi	r3,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
    6700:	e0bfff17 	ldw	r2,-4(fp)
    6704:	10800144 	addi	r2,r2,5
    6708:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    670c:	10803fcc 	andi	r2,r2,255
    6710:	d9000015 	stw	r4,0(sp)
    6714:	d8c00115 	stw	r3,4(sp)
    6718:	d8800215 	stw	r2,8(sp)
    671c:	01000174 	movhi	r4,5
    6720:	2132a004 	addi	r4,r4,-13696
    6724:	00080f80 	call	80f8 <printf>
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
        
        error = 0;
    6728:	e03ffd15 	stw	zero,-12(fp)
    }
  
    return error;    
    672c:	e0bffd17 	ldw	r2,-12(fp)
}
    6730:	e037883a 	mov	sp,fp
    6734:	dfc00117 	ldw	ra,4(sp)
    6738:	df000017 	ldw	fp,0(sp)
    673c:	dec00204 	addi	sp,sp,8
    6740:	f800283a 	ret

00006744 <get_board_mac_addr>:
*
* Read the MAC address in a board specific way
*
*/
error_t get_board_mac_addr(unsigned char mac_addr[6])
{
    6744:	defff904 	addi	sp,sp,-28
    6748:	dfc00615 	stw	ra,24(sp)
    674c:	df000515 	stw	fp,20(sp)
    6750:	df000504 	addi	fp,sp,20
    6754:	e13fff15 	stw	r4,-4(fp)
    error_t error = 0;
    6758:	e03ffe15 	stw	zero,-8(fp)
        if (signature != 0x00005afe)
        {
          error = generate_and_store_mac_addr();
        }
    }*/
    mac_addr[0] = 0x00;
    675c:	e0bfff17 	ldw	r2,-4(fp)
    6760:	10000005 	stb	zero,0(r2)
    mac_addr[1] = 0x07;
    6764:	e0bfff17 	ldw	r2,-4(fp)
    6768:	10800044 	addi	r2,r2,1
    676c:	00c001c4 	movi	r3,7
    6770:	10c00005 	stb	r3,0(r2)
    mac_addr[2] = 0xed;
    6774:	e0bfff17 	ldw	r2,-4(fp)
    6778:	10800084 	addi	r2,r2,2
    677c:	00fffb44 	movi	r3,-19
    6780:	10c00005 	stb	r3,0(r2)
    mac_addr[3] = 0x12;
    6784:	e0bfff17 	ldw	r2,-4(fp)
    6788:	108000c4 	addi	r2,r2,3
    678c:	00c00484 	movi	r3,18
    6790:	10c00005 	stb	r3,0(r2)
    mac_addr[4] = 0x8f;
    6794:	e0bfff17 	ldw	r2,-4(fp)
    6798:	10800104 	addi	r2,r2,4
    679c:	00ffe3c4 	movi	r3,-113
    67a0:	10c00005 	stb	r3,0(r2)
    mac_addr[5] = 0xff;
    67a4:	e0bfff17 	ldw	r2,-4(fp)
    67a8:	10800144 	addi	r2,r2,5
    67ac:	00ffffc4 	movi	r3,-1
    67b0:	10c00005 	stb	r3,0(r2)
    if (!error)
    67b4:	e0bffe17 	ldw	r2,-8(fp)
    67b8:	10001d1e 	bne	r2,zero,6830 <get_board_mac_addr+0xec>
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
    67bc:	e0bfff17 	ldw	r2,-4(fp)
    67c0:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    67c4:	11403fcc 	andi	r5,r2,255
            mac_addr[0],
            mac_addr[1],
    67c8:	e0bfff17 	ldw	r2,-4(fp)
    67cc:	10800044 	addi	r2,r2,1
    67d0:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    67d4:	11803fcc 	andi	r6,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
    67d8:	e0bfff17 	ldw	r2,-4(fp)
    67dc:	10800084 	addi	r2,r2,2
    67e0:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    67e4:	11c03fcc 	andi	r7,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
    67e8:	e0bfff17 	ldw	r2,-4(fp)
    67ec:	108000c4 	addi	r2,r2,3
    67f0:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    67f4:	11003fcc 	andi	r4,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
    67f8:	e0bfff17 	ldw	r2,-4(fp)
    67fc:	10800104 	addi	r2,r2,4
    6800:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    6804:	10c03fcc 	andi	r3,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
    6808:	e0bfff17 	ldw	r2,-4(fp)
    680c:	10800144 	addi	r2,r2,5
    6810:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    */
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    6814:	10803fcc 	andi	r2,r2,255
    6818:	d9000015 	stw	r4,0(sp)
    681c:	d8c00115 	stw	r3,4(sp)
    6820:	d8800215 	stw	r2,8(sp)
    6824:	01000174 	movhi	r4,5
    6828:	2132a004 	addi	r4,r4,-13696
    682c:	00080f80 	call	80f8 <printf>
            mac_addr[4],
            mac_addr[5]);
    
    }
    
    return error;
    6830:	e0bffe17 	ldw	r2,-8(fp)
}
    6834:	e037883a 	mov	sp,fp
    6838:	dfc00117 	ldw	ra,4(sp)
    683c:	df000017 	ldw	fp,0(sp)
    6840:	dec00204 	addi	sp,sp,8
    6844:	f800283a 	ret

00006848 <FindLastFlashSectorOffset>:
 * in pLastFlashSectorOffset.
 */

int FindLastFlashSectorOffset(
    alt_u32                     *pLastFlashSectorOffset)
{
    6848:	defffd04 	addi	sp,sp,-12
    684c:	df000215 	stw	fp,8(sp)
    6850:	df000204 	addi	fp,sp,8
    6854:	e13fff15 	stw	r4,-4(fp)
    int                         error=0;
    6858:	e03ffe15 	stw	zero,-8(fp)

    // Return results.
    if (!error)
        *pLastFlashSectorOffset = lastFlashSectorOffset;*/

    return (error);
    685c:	e0bffe17 	ldw	r2,-8(fp)
}
    6860:	e037883a 	mov	sp,fp
    6864:	df000017 	ldw	fp,0(sp)
    6868:	dec00104 	addi	sp,sp,4
    686c:	f800283a 	ret

00006870 <SSSCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
    6870:	defffd04 	addi	sp,sp,-12
    6874:	dfc00215 	stw	ra,8(sp)
    6878:	df000115 	stw	fp,4(sp)
    687c:	df000104 	addi	fp,sp,4
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
    6880:	010001b4 	movhi	r4,6
    6884:	21219f04 	addi	r4,r4,-31108
    6888:	01400784 	movi	r5,30
    688c:	001c45c0 	call	1c45c <OSQCreate>
    6890:	d0a84715 	stw	r2,-24292(gp)
  if (!SSSLEDCommandQ)
    6894:	d0a84717 	ldw	r2,-24292(gp)
    6898:	1000041e 	bne	r2,zero,68ac <SSSCreateOSDataStructs+0x3c>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
    689c:	01003fc4 	movi	r4,255
    68a0:	01400174 	movhi	r5,5
    68a4:	2972af04 	addi	r5,r5,-13636
    68a8:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
  * toggle the lightshow off, and gives up the semaphore to turn the lightshow
  * back on.  The LEDTask does this in response to the CMD_LEDS_LIGHTSHOW
  * command sent from the SSSSimpleSocketServerTask when the user sends the 
  * toggle lightshow command over the TCPIP socket.
  */
  SSSLEDLightshowSem = OSSemCreate(1);
    68ac:	01000044 	movi	r4,1
    68b0:	001d5dc0 	call	1d5dc <OSSemCreate>
    68b4:	d0a84815 	stw	r2,-24288(gp)
  if (!SSSLEDLightshowSem)
    68b8:	d0a84817 	ldw	r2,-24288(gp)
    68bc:	1000041e 	bne	r2,zero,68d0 <SSSCreateOSDataStructs+0x60>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
    68c0:	01003fc4 	movi	r4,255
    68c4:	01400174 	movhi	r5,5
    68c8:	2972b804 	addi	r5,r5,-13600
    68cc:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
    68d0:	0009883a 	mov	r4,zero
    68d4:	e17fff04 	addi	r5,fp,-4
    68d8:	001a6840 	call	1a684 <OSFlagCreate>
    68dc:	d0a84915 	stw	r2,-24284(gp)
  if (!SSSLEDEventFlag)
    68e0:	d0a84917 	ldw	r2,-24284(gp)
    68e4:	1000051e 	bne	r2,zero,68fc <SSSCreateOSDataStructs+0x8c>
  {
     alt_uCOSIIErrorHandler(error_code, 0);
    68e8:	e0bfff03 	ldbu	r2,-4(fp)
    68ec:	10803fcc 	andi	r2,r2,255
    68f0:	1009883a 	mov	r4,r2
    68f4:	000b883a 	mov	r5,zero
    68f8:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
  }
}
    68fc:	e037883a 	mov	sp,fp
    6900:	dfc00117 	ldw	ra,4(sp)
    6904:	df000017 	ldw	fp,0(sp)
    6908:	dec00204 	addi	sp,sp,8
    690c:	f800283a 	ret

00006910 <SSSCreateTasks>:
/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */
 
void SSSCreateTasks(void)
{
    6910:	defff804 	addi	sp,sp,-32
    6914:	dfc00715 	stw	ra,28(sp)
    6918:	df000615 	stw	fp,24(sp)
    691c:	df000604 	addi	fp,sp,24
   INT8U error_code;
  
   error_code = OSTaskCreateExt(LED7SegLightshowTask,
    6920:	00800484 	movi	r2,18
    6924:	d8800015 	stw	r2,0(sp)
    6928:	00800174 	movhi	r2,5
    692c:	10999f04 	addi	r2,r2,26236
    6930:	d8800115 	stw	r2,4(sp)
    6934:	00820004 	movi	r2,2048
    6938:	d8800215 	stw	r2,8(sp)
    693c:	d8000315 	stw	zero,12(sp)
    6940:	d8000415 	stw	zero,16(sp)
    6944:	01000034 	movhi	r4,0
    6948:	21183704 	addi	r4,r4,24796
    694c:	000b883a 	mov	r5,zero
    6950:	018001b4 	movhi	r6,6
    6954:	31a19e04 	addi	r6,r6,-31112
    6958:	01c00484 	movi	r7,18
    695c:	001e7300 	call	1e730 <OSTaskCreateExt>
    6960:	e0bfff05 	stb	r2,-4(fp)
                             LED7SegLightshowTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
   
   alt_uCOSIIErrorHandler(error_code, 0);
    6964:	e0bfff03 	ldbu	r2,-4(fp)
    6968:	1009883a 	mov	r4,r2
    696c:	000b883a 	mov	r5,zero
    6970:	000028c0 	call	28c <alt_uCOSIIErrorHandler>
  
   error_code = OSTaskCreateExt(LEDManagementTask,
    6974:	008001c4 	movi	r2,7
    6978:	d8800015 	stw	r2,0(sp)
    697c:	008001b4 	movhi	r2,6
    6980:	10a1bd04 	addi	r2,r2,-30988
    6984:	d8800115 	stw	r2,4(sp)
    6988:	00820004 	movi	r2,2048
    698c:	d8800215 	stw	r2,8(sp)
    6990:	d8000315 	stw	zero,12(sp)
    6994:	d8000415 	stw	zero,16(sp)
    6998:	01000034 	movhi	r4,0
    699c:	21185804 	addi	r4,r4,24928
    69a0:	000b883a 	mov	r5,zero
    69a4:	018001b4 	movhi	r6,6
    69a8:	31a9bc04 	addi	r6,r6,-22800
    69ac:	01c001c4 	movi	r7,7
    69b0:	001e7300 	call	1e730 <OSTaskCreateExt>
    69b4:	e0bfff05 	stb	r2,-4(fp)
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
    69b8:	e0bfff03 	ldbu	r2,-4(fp)
    69bc:	1009883a 	mov	r4,r2
    69c0:	000b883a 	mov	r5,zero
    69c4:	000028c0 	call	28c <alt_uCOSIIErrorHandler>

}
    69c8:	e037883a 	mov	sp,fp
    69cc:	dfc00117 	ldw	ra,4(sp)
    69d0:	df000017 	ldw	fp,0(sp)
    69d4:	dec00204 	addi	sp,sp,8
    69d8:	f800283a 	ret

000069dc <sss_reset_connection>:
 * to a reliable initial state. Note that we set our socket (FD) number to
 * -1 to easily determine whether the connection is in a "reset, ready to go" 
 * state.
 */
void sss_reset_connection(SSSConn* conn)
{
    69dc:	defffd04 	addi	sp,sp,-12
    69e0:	dfc00215 	stw	ra,8(sp)
    69e4:	df000115 	stw	fp,4(sp)
    69e8:	df000104 	addi	fp,sp,4
    69ec:	e13fff15 	stw	r4,-4(fp)
  memset(conn, 0, sizeof(SSSConn));
    69f0:	e13fff17 	ldw	r4,-4(fp)
    69f4:	000b883a 	mov	r5,zero
    69f8:	01817c04 	movi	r6,1520
    69fc:	0007f240 	call	7f24 <memset>

  conn->fd = -1;
    6a00:	e0bfff17 	ldw	r2,-4(fp)
    6a04:	00ffffc4 	movi	r3,-1
    6a08:	10c00115 	stw	r3,4(r2)
  conn->state = READY;
    6a0c:	e0bfff17 	ldw	r2,-4(fp)
    6a10:	10000015 	stw	zero,0(r2)
  conn->rx_wr_pos = conn->rx_buffer;
    6a14:	e0bfff17 	ldw	r2,-4(fp)
    6a18:	10c00304 	addi	r3,r2,12
    6a1c:	e0bfff17 	ldw	r2,-4(fp)
    6a20:	10c17b15 	stw	r3,1516(r2)
  conn->rx_rd_pos = conn->rx_buffer;
    6a24:	e0bfff17 	ldw	r2,-4(fp)
    6a28:	10c00304 	addi	r3,r2,12
    6a2c:	e0bfff17 	ldw	r2,-4(fp)
    6a30:	10c17a15 	stw	r3,1512(r2)
  return;
    6a34:	0001883a 	nop
}
    6a38:	e037883a 	mov	sp,fp
    6a3c:	dfc00117 	ldw	ra,4(sp)
    6a40:	df000017 	ldw	fp,0(sp)
    6a44:	dec00204 	addi	sp,sp,8
    6a48:	f800283a 	ret

00006a4c <sss_send_menu>:
 * sss_send_menu()
 * 
 * This routine will transmit the menu out to the telent client.
 */
void sss_send_menu(SSSConn* conn)
{
    6a4c:	defe8504 	addi	sp,sp,-1516
    6a50:	dfc17a15 	stw	ra,1512(sp)
    6a54:	df017915 	stw	fp,1508(sp)
    6a58:	df017904 	addi	fp,sp,1508
    6a5c:	e13fff15 	stw	r4,-4(fp)
  alt_u8  tx_buf[SSS_TX_BUF_SIZE];
  alt_u8 *tx_wr_pos = tx_buf;
    6a60:	e0be8804 	addi	r2,fp,-1504
    6a64:	e0be8715 	stw	r2,-1508(fp)

  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    6a68:	e0fe8717 	ldw	r3,-1508(fp)
    6a6c:	00800174 	movhi	r2,5
    6a70:	10b2c204 	addi	r2,r2,-13560
    6a74:	1809883a 	mov	r4,r3
    6a78:	1007883a 	mov	r3,r2
    6a7c:	00800904 	movi	r2,36
    6a80:	180b883a 	mov	r5,r3
    6a84:	100d883a 	mov	r6,r2
    6a88:	0007c900 	call	7c90 <memcpy>
    6a8c:	008008c4 	movi	r2,35
    6a90:	1007883a 	mov	r3,r2
    6a94:	e0be8717 	ldw	r2,-1508(fp)
    6a98:	10c5883a 	add	r2,r2,r3
    6a9c:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Nios II Simple Socket Server Menu\n\r");
    6aa0:	e0fe8717 	ldw	r3,-1508(fp)
    6aa4:	00800174 	movhi	r2,5
    6aa8:	10b2cb04 	addi	r2,r2,-13524
    6aac:	1809883a 	mov	r4,r3
    6ab0:	1007883a 	mov	r3,r2
    6ab4:	00800904 	movi	r2,36
    6ab8:	180b883a 	mov	r5,r3
    6abc:	100d883a 	mov	r6,r2
    6ac0:	0007c900 	call	7c90 <memcpy>
    6ac4:	008008c4 	movi	r2,35
    6ac8:	1007883a 	mov	r3,r2
    6acc:	e0be8717 	ldw	r2,-1508(fp)
    6ad0:	10c5883a 	add	r2,r2,r3
    6ad4:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    6ad8:	e0fe8717 	ldw	r3,-1508(fp)
    6adc:	00800174 	movhi	r2,5
    6ae0:	10b2c204 	addi	r2,r2,-13560
    6ae4:	1809883a 	mov	r4,r3
    6ae8:	1007883a 	mov	r3,r2
    6aec:	00800904 	movi	r2,36
    6af0:	180b883a 	mov	r5,r3
    6af4:	100d883a 	mov	r6,r2
    6af8:	0007c900 	call	7c90 <memcpy>
    6afc:	008008c4 	movi	r2,35
    6b00:	1007883a 	mov	r3,r2
    6b04:	e0be8717 	ldw	r2,-1508(fp)
    6b08:	10c5883a 	add	r2,r2,r3
    6b0c:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"0-7: Toggle board LEDs D0 - D7\n\r");
    6b10:	e0fe8717 	ldw	r3,-1508(fp)
    6b14:	00800174 	movhi	r2,5
    6b18:	10b2d404 	addi	r2,r2,-13488
    6b1c:	1809883a 	mov	r4,r3
    6b20:	1007883a 	mov	r3,r2
    6b24:	00800844 	movi	r2,33
    6b28:	180b883a 	mov	r5,r3
    6b2c:	100d883a 	mov	r6,r2
    6b30:	0007c900 	call	7c90 <memcpy>
    6b34:	00800804 	movi	r2,32
    6b38:	1007883a 	mov	r3,r2
    6b3c:	e0be8717 	ldw	r2,-1508(fp)
    6b40:	10c5883a 	add	r2,r2,r3
    6b44:	e0be8715 	stw	r2,-1508(fp)
// tx_wr_pos += sprintf(tx_wr_pos,"S: 7-Segment LED Light Show\n\r");
  tx_wr_pos += sprintf(tx_wr_pos,"Q: Terminate session\n\r");
    6b48:	e0fe8717 	ldw	r3,-1508(fp)
    6b4c:	00800174 	movhi	r2,5
    6b50:	10b2dd04 	addi	r2,r2,-13452
    6b54:	1809883a 	mov	r4,r3
    6b58:	1007883a 	mov	r3,r2
    6b5c:	008005c4 	movi	r2,23
    6b60:	180b883a 	mov	r5,r3
    6b64:	100d883a 	mov	r6,r2
    6b68:	0007c900 	call	7c90 <memcpy>
    6b6c:	00800584 	movi	r2,22
    6b70:	1007883a 	mov	r3,r2
    6b74:	e0be8717 	ldw	r2,-1508(fp)
    6b78:	10c5883a 	add	r2,r2,r3
    6b7c:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    6b80:	e0fe8717 	ldw	r3,-1508(fp)
    6b84:	00800174 	movhi	r2,5
    6b88:	10b2c204 	addi	r2,r2,-13560
    6b8c:	1809883a 	mov	r4,r3
    6b90:	1007883a 	mov	r3,r2
    6b94:	00800904 	movi	r2,36
    6b98:	180b883a 	mov	r5,r3
    6b9c:	100d883a 	mov	r6,r2
    6ba0:	0007c900 	call	7c90 <memcpy>
    6ba4:	008008c4 	movi	r2,35
    6ba8:	1007883a 	mov	r3,r2
    6bac:	e0be8717 	ldw	r2,-1508(fp)
    6bb0:	10c5883a 	add	r2,r2,r3
    6bb4:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Enter your choice & press return:\n\r");
    6bb8:	e0fe8717 	ldw	r3,-1508(fp)
    6bbc:	00800174 	movhi	r2,5
    6bc0:	10b2e304 	addi	r2,r2,-13428
    6bc4:	1809883a 	mov	r4,r3
    6bc8:	1007883a 	mov	r3,r2
    6bcc:	00800904 	movi	r2,36
    6bd0:	180b883a 	mov	r5,r3
    6bd4:	100d883a 	mov	r6,r2
    6bd8:	0007c900 	call	7c90 <memcpy>
    6bdc:	008008c4 	movi	r2,35
    6be0:	1007883a 	mov	r3,r2
    6be4:	e0be8717 	ldw	r2,-1508(fp)
    6be8:	10c5883a 	add	r2,r2,r3
    6bec:	e0be8715 	stw	r2,-1508(fp)

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);
    6bf0:	e0bfff17 	ldw	r2,-4(fp)
    6bf4:	11000117 	ldw	r4,4(r2)
    6bf8:	e0fe8717 	ldw	r3,-1508(fp)
    6bfc:	e0be8804 	addi	r2,fp,-1504
    6c00:	1885c83a 	sub	r2,r3,r2
    6c04:	e0fe8804 	addi	r3,fp,-1504
    6c08:	180b883a 	mov	r5,r3
    6c0c:	100d883a 	mov	r6,r2
    6c10:	000f883a 	mov	r7,zero
    6c14:	002f0b80 	call	2f0b8 <t_send>
  
  return;
    6c18:	0001883a 	nop
}
    6c1c:	e037883a 	mov	sp,fp
    6c20:	dfc00117 	ldw	ra,4(sp)
    6c24:	df000017 	ldw	fp,0(sp)
    6c28:	dec00204 	addi	sp,sp,8
    6c2c:	f800283a 	ret

00006c30 <sss_handle_accept>:
 * reject the incoming request by immediately closing the new socket.
 * 
 * We'll also print out the client's IP address.
 */
void sss_handle_accept(int listen_socket, SSSConn* conn)
{
    6c30:	defff604 	addi	sp,sp,-40
    6c34:	dfc00915 	stw	ra,36(sp)
    6c38:	df000815 	stw	fp,32(sp)
    6c3c:	df000804 	addi	fp,sp,32
    6c40:	e13ffe15 	stw	r4,-8(fp)
    6c44:	e17fff15 	stw	r5,-4(fp)
  int                 socket, len;
  struct sockaddr_in  incoming_addr;

  len = sizeof(incoming_addr);
    6c48:	00800404 	movi	r2,16
    6c4c:	e0bff915 	stw	r2,-28(fp)

  if ((conn)->fd == -1)
    6c50:	e0bfff17 	ldw	r2,-4(fp)
    6c54:	10800117 	ldw	r2,4(r2)
    6c58:	10bfffd8 	cmpnei	r2,r2,-1
    6c5c:	10001a1e 	bne	r2,zero,6cc8 <sss_handle_accept+0x98>
  {
     if((socket=accept(listen_socket,(struct sockaddr*)&incoming_addr,&len))<0)
    6c60:	e0fffa04 	addi	r3,fp,-24
    6c64:	e0bff904 	addi	r2,fp,-28
    6c68:	e13ffe17 	ldw	r4,-8(fp)
    6c6c:	180b883a 	mov	r5,r3
    6c70:	100d883a 	mov	r6,r2
    6c74:	00258380 	call	25838 <bsd_accept>
    6c78:	e0bff815 	stw	r2,-32(fp)
    6c7c:	e0bff817 	ldw	r2,-32(fp)
    6c80:	1000050e 	bge	r2,zero,6c98 <sss_handle_accept+0x68>
     {
         alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,
    6c84:	01003fc4 	movi	r4,255
    6c88:	01400174 	movhi	r5,5
    6c8c:	2972ec04 	addi	r5,r5,-13392
    6c90:	00008d00 	call	8d0 <alt_NetworkErrorHandler>
    6c94:	00001206 	br	6ce0 <sss_handle_accept+0xb0>
                                 "[sss_handle_accept] accept failed");
     }
     else
     {
        (conn)->fd = socket;
    6c98:	e0bfff17 	ldw	r2,-4(fp)
    6c9c:	e0fff817 	ldw	r3,-32(fp)
    6ca0:	10c00115 	stw	r3,4(r2)
        sss_send_menu(conn);
    6ca4:	e13fff17 	ldw	r4,-4(fp)
    6ca8:	0006a4c0 	call	6a4c <sss_send_menu>
        printf("[sss_handle_accept] accepted connection request from %s\n",
    6cac:	e13ffb17 	ldw	r4,-20(fp)
    6cb0:	0025ecc0 	call	25ecc <bsd_inet_ntoa>
    6cb4:	01000174 	movhi	r4,5
    6cb8:	2132f504 	addi	r4,r4,-13356
    6cbc:	100b883a 	mov	r5,r2
    6cc0:	00080f80 	call	80f8 <printf>
  {
    printf("[sss_handle_accept] rejected connection request from %s\n",
           inet_ntoa(incoming_addr.sin_addr));
  }

  return;
    6cc4:	00000706 	br	6ce4 <sss_handle_accept+0xb4>
               inet_ntoa(incoming_addr.sin_addr));
     }
  }
  else
  {
    printf("[sss_handle_accept] rejected connection request from %s\n",
    6cc8:	e13ffb17 	ldw	r4,-20(fp)
    6ccc:	0025ecc0 	call	25ecc <bsd_inet_ntoa>
    6cd0:	01000174 	movhi	r4,5
    6cd4:	21330404 	addi	r4,r4,-13296
    6cd8:	100b883a 	mov	r5,r2
    6cdc:	00080f80 	call	80f8 <printf>
           inet_ntoa(incoming_addr.sin_addr));
  }

  return;
    6ce0:	0001883a 	nop
}
    6ce4:	e037883a 	mov	sp,fp
    6ce8:	dfc00117 	ldw	ra,4(sp)
    6cec:	df000017 	ldw	fp,0(sp)
    6cf0:	dec00204 	addi	sp,sp,8
    6cf4:	f800283a 	ret

00006cf8 <sss_exec_command>:
 * If the user wishes to quit, we set the "close" member of our SSSConn
 * struct, which will be looked at back in sss_handle_receive() when it 
 * comes time to see whether to close the connection or not.
 */
void sss_exec_command(SSSConn* conn)
{
    6cf8:	defe8304 	addi	sp,sp,-1524
    6cfc:	dfc17c15 	stw	ra,1520(sp)
    6d00:	df017b15 	stw	fp,1516(sp)
    6d04:	df017b04 	addi	fp,sp,1516
    6d08:	e13fff15 	stw	r4,-4(fp)
   int bytes_to_process = conn->rx_wr_pos - conn->rx_rd_pos;
    6d0c:	e0bfff17 	ldw	r2,-4(fp)
    6d10:	10817b17 	ldw	r2,1516(r2)
    6d14:	1007883a 	mov	r3,r2
    6d18:	e0bfff17 	ldw	r2,-4(fp)
    6d1c:	10817a17 	ldw	r2,1512(r2)
    6d20:	1885c83a 	sub	r2,r3,r2
    6d24:	e0be8515 	stw	r2,-1516(fp)
   INT8U tx_buf[SSS_TX_BUF_SIZE];
   INT8U *tx_wr_pos = tx_buf;
    6d28:	e0be8784 	addi	r2,fp,-1506
    6d2c:	e0be8615 	stw	r2,-1512(fp)
    * SSSSimpleSocketServerTask, since the LEDManagementTask does not 
    * have access to the stack of the SSSSimpleSocketServerTask.
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;
    6d30:	00800c04 	movi	r2,48
    6d34:	d0a84615 	stw	r2,-24296(gp)

   while(bytes_to_process--)
    6d38:	00004906 	br	6e60 <sss_exec_command+0x168>
   {
      SSSCommand = toupper(*(conn->rx_rd_pos++));
    6d3c:	e0bfff17 	ldw	r2,-4(fp)
    6d40:	10817a17 	ldw	r2,1512(r2)
    6d44:	11000044 	addi	r4,r2,1
    6d48:	e0ffff17 	ldw	r3,-4(fp)
    6d4c:	19017a15 	stw	r4,1512(r3)
    6d50:	10800003 	ldbu	r2,0(r2)
    6d54:	e0be8705 	stb	r2,-1508(fp)
    6d58:	00800174 	movhi	r2,5
    6d5c:	10872b04 	addi	r2,r2,7340
    6d60:	10c00017 	ldw	r3,0(r2)
    6d64:	e0be8703 	ldbu	r2,-1508(fp)
    6d68:	10800044 	addi	r2,r2,1
    6d6c:	1885883a 	add	r2,r3,r2
    6d70:	10800003 	ldbu	r2,0(r2)
    6d74:	10803fcc 	andi	r2,r2,255
    6d78:	108000cc 	andi	r2,r2,3
    6d7c:	10800098 	cmpnei	r2,r2,2
    6d80:	1000031e 	bne	r2,zero,6d90 <sss_exec_command+0x98>
    6d84:	e0be8703 	ldbu	r2,-1508(fp)
    6d88:	10bff804 	addi	r2,r2,-32
    6d8c:	00000106 	br	6d94 <sss_exec_command+0x9c>
    6d90:	e0be8703 	ldbu	r2,-1508(fp)
    6d94:	d0a84615 	stw	r2,-24296(gp)
    
      if(SSSCommand >= ' ' && SSSCommand <= '~')
    6d98:	d0a84617 	ldw	r2,-24296(gp)
    6d9c:	10800830 	cmpltui	r2,r2,32
    6da0:	10002f1e 	bne	r2,zero,6e60 <sss_exec_command+0x168>
    6da4:	d0a84617 	ldw	r2,-24296(gp)
    6da8:	10801fe8 	cmpgeui	r2,r2,127
    6dac:	10002c1e 	bne	r2,zero,6e60 <sss_exec_command+0x168>
      {
         tx_wr_pos += sprintf(tx_wr_pos,
                              "--> Simple Socket Server Command %c.\n\r",
                              (char)SSSCommand);
    6db0:	d0a84617 	ldw	r2,-24296(gp)
   {
      SSSCommand = toupper(*(conn->rx_rd_pos++));
    
      if(SSSCommand >= ' ' && SSSCommand <= '~')
      {
         tx_wr_pos += sprintf(tx_wr_pos,
    6db4:	10803fcc 	andi	r2,r2,255
    6db8:	1080201c 	xori	r2,r2,128
    6dbc:	10bfe004 	addi	r2,r2,-128
    6dc0:	e13e8617 	ldw	r4,-1512(fp)
    6dc4:	01400174 	movhi	r5,5
    6dc8:	29731304 	addi	r5,r5,-13236
    6dcc:	100d883a 	mov	r6,r2
    6dd0:	00084bc0 	call	84bc <sprintf>
    6dd4:	1007883a 	mov	r3,r2
    6dd8:	e0be8617 	ldw	r2,-1512(fp)
    6ddc:	10c5883a 	add	r2,r2,r3
    6de0:	e0be8615 	stw	r2,-1512(fp)
                              "--> Simple Socket Server Command %c.\n\r",
                              (char)SSSCommand);
         if (SSSCommand == CMD_QUIT)
    6de4:	d0a84617 	ldw	r2,-24296(gp)
    6de8:	10801458 	cmpnei	r2,r2,81
    6dec:	1000121e 	bne	r2,zero,6e38 <sss_exec_command+0x140>
         {
            tx_wr_pos += sprintf(tx_wr_pos,"Terminating connection.\n\n\r");
    6df0:	e0fe8617 	ldw	r3,-1512(fp)
    6df4:	00800174 	movhi	r2,5
    6df8:	10b31d04 	addi	r2,r2,-13196
    6dfc:	1809883a 	mov	r4,r3
    6e00:	1007883a 	mov	r3,r2
    6e04:	008006c4 	movi	r2,27
    6e08:	180b883a 	mov	r5,r3
    6e0c:	100d883a 	mov	r6,r2
    6e10:	0007c900 	call	7c90 <memcpy>
    6e14:	00800684 	movi	r2,26
    6e18:	1007883a 	mov	r3,r2
    6e1c:	e0be8617 	ldw	r2,-1512(fp)
    6e20:	10c5883a 	add	r2,r2,r3
    6e24:	e0be8615 	stw	r2,-1512(fp)
            conn->close = 1;
    6e28:	e0bfff17 	ldw	r2,-4(fp)
    6e2c:	00c00044 	movi	r3,1
    6e30:	10c00215 	stw	r3,8(r2)
    6e34:	00000a06 	br	6e60 <sss_exec_command+0x168>
         }
         else
         {
            error_code = OSQPost(SSSLEDCommandQ, (void *)SSSCommand);    
    6e38:	d0a84717 	ldw	r2,-24292(gp)
    6e3c:	d0e84617 	ldw	r3,-24296(gp)
    6e40:	1009883a 	mov	r4,r2
    6e44:	180b883a 	mov	r5,r3
    6e48:	001ce400 	call	1ce40 <OSQPost>
    6e4c:	e0be8745 	stb	r2,-1507(fp)

            alt_SSSErrorHandler(error_code, 0);
    6e50:	e0be8743 	ldbu	r2,-1507(fp)
    6e54:	1009883a 	mov	r4,r2
    6e58:	000b883a 	mov	r5,zero
    6e5c:	0000b8c0 	call	b8c <alt_SSSErrorHandler>
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;

   while(bytes_to_process--)
    6e60:	e0be8517 	ldw	r2,-1516(fp)
    6e64:	10ffffc4 	addi	r3,r2,-1
    6e68:	e0fe8515 	stw	r3,-1516(fp)
    6e6c:	103fb31e 	bne	r2,zero,6d3c <__alt_mem_descriptor_memory+0xdefc6d3c>
            alt_SSSErrorHandler(error_code, 0);
         }
      }
   }             

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);  
    6e70:	e0bfff17 	ldw	r2,-4(fp)
    6e74:	11000117 	ldw	r4,4(r2)
    6e78:	e0fe8617 	ldw	r3,-1512(fp)
    6e7c:	e0be8784 	addi	r2,fp,-1506
    6e80:	1885c83a 	sub	r2,r3,r2
    6e84:	e0fe8784 	addi	r3,fp,-1506
    6e88:	180b883a 	mov	r5,r3
    6e8c:	100d883a 	mov	r6,r2
    6e90:	000f883a 	mov	r7,zero
    6e94:	002f0b80 	call	2f0b8 <t_send>
  
  return;
    6e98:	0001883a 	nop
}
    6e9c:	e037883a 	mov	sp,fp
    6ea0:	dfc00117 	ldw	ra,4(sp)
    6ea4:	df000017 	ldw	fp,0(sp)
    6ea8:	dec00204 	addi	sp,sp,8
    6eac:	f800283a 	ret

00006eb0 <sss_handle_receive>:
 * sss_exec_command() routine. Aside from these, we must move incoming
 * (un-processed) data to buffer start as appropriate and keep track of 
 * associated pointers.
 */
void sss_handle_receive(SSSConn* conn)
{
    6eb0:	defffa04 	addi	sp,sp,-24
    6eb4:	dfc00515 	stw	ra,20(sp)
    6eb8:	df000415 	stw	fp,16(sp)
    6ebc:	df000404 	addi	fp,sp,16
    6ec0:	e13fff15 	stw	r4,-4(fp)
  int data_used = 0, rx_code = 0;
    6ec4:	e03ffc15 	stw	zero,-16(fp)
    6ec8:	e03ffd15 	stw	zero,-12(fp)
  INT8U *lf_addr; 
  
  conn->rx_rd_pos = conn->rx_buffer;
    6ecc:	e0bfff17 	ldw	r2,-4(fp)
    6ed0:	10c00304 	addi	r3,r2,12
    6ed4:	e0bfff17 	ldw	r2,-4(fp)
    6ed8:	10c17a15 	stw	r3,1512(r2)
  conn->rx_wr_pos = conn->rx_buffer;
    6edc:	e0bfff17 	ldw	r2,-4(fp)
    6ee0:	10c00304 	addi	r3,r2,12
    6ee4:	e0bfff17 	ldw	r2,-4(fp)
    6ee8:	10c17b15 	stw	r3,1516(r2)
  
  printf("[sss_handle_receive] processing RX data\n");
    6eec:	01000174 	movhi	r4,5
    6ef0:	21332404 	addi	r4,r4,-13168
    6ef4:	00083740 	call	8374 <puts>
  
  while(conn->state != CLOSE)
    6ef8:	00005506 	br	7050 <sss_handle_receive+0x1a0>
  {
    /* Find the Carriage return which marks the end of the header */
    lf_addr = strchr(conn->rx_buffer, '\n');
    6efc:	e0bfff17 	ldw	r2,-4(fp)
    6f00:	10800304 	addi	r2,r2,12
    6f04:	1009883a 	mov	r4,r2
    6f08:	01400284 	movi	r5,10
    6f0c:	00085280 	call	8528 <strchr>
    6f10:	e0bffe15 	stw	r2,-8(fp)
      
    if(lf_addr)
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	10000326 	beq	r2,zero,6f28 <sss_handle_receive+0x78>
    {
      /* go off and do whatever the user wanted us to do */
      sss_exec_command(conn);
    6f1c:	e13fff17 	ldw	r4,-4(fp)
    6f20:	0006cf80 	call	6cf8 <sss_exec_command>
    6f24:	00001c06 	br	6f98 <sss_handle_receive+0xe8>
    }
    /* No newline received? Then ask the socket for data */
    else
    {
      rx_code = recv(conn->fd, conn->rx_wr_pos, 
    6f28:	e0bfff17 	ldw	r2,-4(fp)
    6f2c:	11000117 	ldw	r4,4(r2)
    6f30:	e0bfff17 	ldw	r2,-4(fp)
    6f34:	10c17b17 	ldw	r3,1516(r2)
    6f38:	e0bfff17 	ldw	r2,-4(fp)
    6f3c:	10800304 	addi	r2,r2,12
    6f40:	100b883a 	mov	r5,r2
    6f44:	e0bfff17 	ldw	r2,-4(fp)
    6f48:	10817b17 	ldw	r2,1516(r2)
    6f4c:	2885c83a 	sub	r2,r5,r2
    6f50:	108176c4 	addi	r2,r2,1499
    6f54:	180b883a 	mov	r5,r3
    6f58:	100d883a 	mov	r6,r2
    6f5c:	000f883a 	mov	r7,zero
    6f60:	002ecb00 	call	2ecb0 <t_recv>
    6f64:	e0bffd15 	stw	r2,-12(fp)
        SSS_RX_BUF_SIZE - (conn->rx_wr_pos - conn->rx_buffer) -1, 0);
          
     if(rx_code > 0)
    6f68:	e0bffd17 	ldw	r2,-12(fp)
    6f6c:	00800a0e 	bge	zero,r2,6f98 <sss_handle_receive+0xe8>
      {
        conn->rx_wr_pos += rx_code;
    6f70:	e0bfff17 	ldw	r2,-4(fp)
    6f74:	10c17b17 	ldw	r3,1516(r2)
    6f78:	e0bffd17 	ldw	r2,-12(fp)
    6f7c:	1887883a 	add	r3,r3,r2
    6f80:	e0bfff17 	ldw	r2,-4(fp)
    6f84:	10c17b15 	stw	r3,1516(r2)
        
        /* Zero terminate so we can use string functions */
        *(conn->rx_wr_pos+1) = 0;
    6f88:	e0bfff17 	ldw	r2,-4(fp)
    6f8c:	10817b17 	ldw	r2,1516(r2)
    6f90:	10800044 	addi	r2,r2,1
    6f94:	10000005 	stb	zero,0(r2)

    /* 
     * When the quit command is received, update our connection state so that
     * we can exit the while() loop and close the connection
     */
    conn->state = conn->close ? CLOSE : READY;
    6f98:	e0bfff17 	ldw	r2,-4(fp)
    6f9c:	10800217 	ldw	r2,8(r2)
    6fa0:	10000226 	beq	r2,zero,6fac <sss_handle_receive+0xfc>
    6fa4:	00800084 	movi	r2,2
    6fa8:	00000106 	br	6fb0 <sss_handle_receive+0x100>
    6fac:	0005883a 	mov	r2,zero
    6fb0:	e0ffff17 	ldw	r3,-4(fp)
    6fb4:	18800015 	stw	r2,0(r3)

    /* Manage buffer */
    data_used = conn->rx_rd_pos - conn->rx_buffer;
    6fb8:	e0bfff17 	ldw	r2,-4(fp)
    6fbc:	10817a17 	ldw	r2,1512(r2)
    6fc0:	1007883a 	mov	r3,r2
    6fc4:	e0bfff17 	ldw	r2,-4(fp)
    6fc8:	10800304 	addi	r2,r2,12
    6fcc:	1885c83a 	sub	r2,r3,r2
    6fd0:	e0bffc15 	stw	r2,-16(fp)
    memmove(conn->rx_buffer, conn->rx_rd_pos, 
    6fd4:	e0bfff17 	ldw	r2,-4(fp)
    6fd8:	11000304 	addi	r4,r2,12
    6fdc:	e0bfff17 	ldw	r2,-4(fp)
    6fe0:	10c17a17 	ldw	r3,1512(r2)
       conn->rx_wr_pos - conn->rx_rd_pos);
    6fe4:	e0bfff17 	ldw	r2,-4(fp)
    6fe8:	10817b17 	ldw	r2,1516(r2)
    6fec:	100b883a 	mov	r5,r2
    6ff0:	e0bfff17 	ldw	r2,-4(fp)
    6ff4:	10817a17 	ldw	r2,1512(r2)
    6ff8:	2885c83a 	sub	r2,r5,r2
     */
    conn->state = conn->close ? CLOSE : READY;

    /* Manage buffer */
    data_used = conn->rx_rd_pos - conn->rx_buffer;
    memmove(conn->rx_buffer, conn->rx_rd_pos, 
    6ffc:	180b883a 	mov	r5,r3
    7000:	100d883a 	mov	r6,r2
    7004:	0007dc80 	call	7dc8 <memmove>
       conn->rx_wr_pos - conn->rx_rd_pos);
    conn->rx_rd_pos = conn->rx_buffer;
    7008:	e0bfff17 	ldw	r2,-4(fp)
    700c:	10c00304 	addi	r3,r2,12
    7010:	e0bfff17 	ldw	r2,-4(fp)
    7014:	10c17a15 	stw	r3,1512(r2)
    conn->rx_wr_pos -= data_used;
    7018:	e0bfff17 	ldw	r2,-4(fp)
    701c:	10c17b17 	ldw	r3,1516(r2)
    7020:	e0bffc17 	ldw	r2,-16(fp)
    7024:	0085c83a 	sub	r2,zero,r2
    7028:	1887883a 	add	r3,r3,r2
    702c:	e0bfff17 	ldw	r2,-4(fp)
    7030:	10c17b15 	stw	r3,1516(r2)
    memset(conn->rx_wr_pos, 0, data_used);
    7034:	e0bfff17 	ldw	r2,-4(fp)
    7038:	10c17b17 	ldw	r3,1516(r2)
    703c:	e0bffc17 	ldw	r2,-16(fp)
    7040:	1809883a 	mov	r4,r3
    7044:	000b883a 	mov	r5,zero
    7048:	100d883a 	mov	r6,r2
    704c:	0007f240 	call	7f24 <memset>
  conn->rx_rd_pos = conn->rx_buffer;
  conn->rx_wr_pos = conn->rx_buffer;
  
  printf("[sss_handle_receive] processing RX data\n");
  
  while(conn->state != CLOSE)
    7050:	e0bfff17 	ldw	r2,-4(fp)
    7054:	10800017 	ldw	r2,0(r2)
    7058:	10800098 	cmpnei	r2,r2,2
    705c:	103fa71e 	bne	r2,zero,6efc <__alt_mem_descriptor_memory+0xdefc6efc>
    conn->rx_rd_pos = conn->rx_buffer;
    conn->rx_wr_pos -= data_used;
    memset(conn->rx_wr_pos, 0, data_used);
  }

  printf("[sss_handle_receive] closing connection\n");
    7060:	01000174 	movhi	r4,5
    7064:	21332e04 	addi	r4,r4,-13128
    7068:	00083740 	call	8374 <puts>
  close(conn->fd);
    706c:	e0bfff17 	ldw	r2,-4(fp)
    7070:	10800117 	ldw	r2,4(r2)
    7074:	1009883a 	mov	r4,r2
    7078:	00233b00 	call	233b0 <close>
  sss_reset_connection(conn);
    707c:	e13fff17 	ldw	r4,-4(fp)
    7080:	00069dc0 	call	69dc <sss_reset_connection>
  
  return;
    7084:	0001883a 	nop
}
    7088:	e037883a 	mov	sp,fp
    708c:	dfc00117 	ldw	ra,4(sp)
    7090:	df000017 	ldw	fp,0(sp)
    7094:	dec00204 	addi	sp,sp,8
    7098:	f800283a 	ret

0000709c <SSSSimpleSocketServerTask>:
 * (if a connection is active), the sss data socket. When data arrives, 
 * the approrpriate routine is called to either accept/reject a connection 
 * request, or process incoming data.
 */
void SSSSimpleSocketServerTask()
{
    709c:	deffb604 	addi	sp,sp,-296
    70a0:	dfc04915 	stw	ra,292(sp)
    70a4:	df004815 	stw	fp,288(sp)
    70a8:	df004804 	addi	fp,sp,288
  int fd_listen, max_socket;
  struct sockaddr_in addr;
  static SSSConn conn;
  fd_set readfds;
  
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 0xff);
    70ac:	00c03fc4 	movi	r3,255
    70b0:	00880034 	movhi	r2,8192
    70b4:	10803004 	addi	r2,r2,192
    70b8:	10c00035 	stwio	r3,0(r2)
   * protocol and address families respectively. However, there is usually only
   * 1 address per protocol family. Thus PF_INET and AF_INET can be interchanged.
   * In the case of NicheStack, only the use of AF_INET is supported.
   * PF_INET is not supported in NicheStack.
   */ 
  if ((fd_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    70bc:	01000084 	movi	r4,2
    70c0:	01400044 	movi	r5,1
    70c4:	000d883a 	mov	r6,zero
    70c8:	002dfa40 	call	2dfa4 <t_socket>
    70cc:	e0bfba15 	stw	r2,-280(fp)
    70d0:	e0bfba17 	ldw	r2,-280(fp)
    70d4:	1000040e 	bge	r2,zero,70e8 <SSSSimpleSocketServerTask+0x4c>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Socket creation failed");
    70d8:	01003fc4 	movi	r4,255
    70dc:	01400174 	movhi	r5,5
    70e0:	29733804 	addi	r5,r5,-13088
    70e4:	00008d00 	call	8d0 <alt_NetworkErrorHandler>
   * port and incoming address. In this case we're binding to SSS_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addr.sin_family = AF_INET;
    70e8:	00800084 	movi	r2,2
    70ec:	e0bfbb0d 	sth	r2,-276(fp)
  addr.sin_port = htons(SSS_PORT);
    70f0:	00878004 	movi	r2,7680
    70f4:	e0bfbb8d 	sth	r2,-274(fp)
  addr.sin_addr.s_addr = INADDR_ANY;
    70f8:	e03fbc15 	stw	zero,-272(fp)
  
  if ((bind(fd_listen,(struct sockaddr *)&addr,sizeof(addr))) < 0)
    70fc:	e0bfbb04 	addi	r2,fp,-276
    7100:	e13fba17 	ldw	r4,-280(fp)
    7104:	100b883a 	mov	r5,r2
    7108:	01800404 	movi	r6,16
    710c:	002e0240 	call	2e024 <t_bind>
    7110:	1000040e 	bge	r2,zero,7124 <SSSSimpleSocketServerTask+0x88>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Bind failed");
    7114:	01003fc4 	movi	r4,255
    7118:	01400174 	movhi	r5,5
    711c:	29734104 	addi	r5,r5,-13052
    7120:	00008d00 	call	8d0 <alt_NetworkErrorHandler>
   * Sockets primer, continued...
   * The listen socket is a socket which is waiting for incoming connections.
   * This call to listen will block (i.e. not return) until someone tries to 
   * connect to this port.
   */ 
  if ((listen(fd_listen,1)) < 0)
    7124:	e13fba17 	ldw	r4,-280(fp)
    7128:	01400044 	movi	r5,1
    712c:	002e1840 	call	2e184 <t_listen>
    7130:	1000040e 	bge	r2,zero,7144 <SSSSimpleSocketServerTask+0xa8>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Listen failed");
    7134:	01003fc4 	movi	r4,255
    7138:	01400174 	movhi	r5,5
    713c:	29734704 	addi	r5,r5,-13028
    7140:	00008d00 	call	8d0 <alt_NetworkErrorHandler>
  }

  /* At this point we have successfully created a socket which is listening
   * on SSS_PORT for connection requests from any remote address.
   */
  sss_reset_connection(&conn);
    7144:	01000174 	movhi	r4,5
    7148:	210ff404 	addi	r4,r4,16336
    714c:	00069dc0 	call	69dc <sss_reset_connection>
  printf("[sss_task] Simple Socket Server listening on port %d\n", SSS_PORT);
    7150:	01000174 	movhi	r4,5
    7154:	21334e04 	addi	r4,r4,-13000
    7158:	01400784 	movi	r5,30
    715c:	00080f80 	call	80f8 <printf>
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
    7160:	e03fbf15 	stw	zero,-260(fp)
    FD_SET(fd_listen, &readfds);
    7164:	e0bfbf04 	addi	r2,fp,-260
    7168:	e13fba17 	ldw	r4,-280(fp)
    716c:	100b883a 	mov	r5,r2
    7170:	0032f440 	call	32f44 <ifd_set>
    max_socket = fd_listen+1;
    7174:	e0bfba17 	ldw	r2,-280(fp)
    7178:	10800044 	addi	r2,r2,1
    717c:	e0bfb915 	stw	r2,-284(fp)

    if (conn.fd != -1)
    7180:	00800174 	movhi	r2,5
    7184:	108ff404 	addi	r2,r2,16336
    7188:	10800117 	ldw	r2,4(r2)
    718c:	10bfffe0 	cmpeqi	r2,r2,-1
    7190:	1000111e 	bne	r2,zero,71d8 <SSSSimpleSocketServerTask+0x13c>
    {
      FD_SET(conn.fd, &readfds);
    7194:	00800174 	movhi	r2,5
    7198:	108ff404 	addi	r2,r2,16336
    719c:	10c00117 	ldw	r3,4(r2)
    71a0:	e0bfbf04 	addi	r2,fp,-260
    71a4:	1809883a 	mov	r4,r3
    71a8:	100b883a 	mov	r5,r2
    71ac:	0032f440 	call	32f44 <ifd_set>
      if (max_socket <= conn.fd)
    71b0:	00800174 	movhi	r2,5
    71b4:	108ff404 	addi	r2,r2,16336
    71b8:	10c00117 	ldw	r3,4(r2)
    71bc:	e0bfb917 	ldw	r2,-284(fp)
    71c0:	18800516 	blt	r3,r2,71d8 <SSSSimpleSocketServerTask+0x13c>
      {
        max_socket = conn.fd+1;
    71c4:	00800174 	movhi	r2,5
    71c8:	108ff404 	addi	r2,r2,16336
    71cc:	10800117 	ldw	r2,4(r2)
    71d0:	10800044 	addi	r2,r2,1
    71d4:	e0bfb915 	stw	r2,-284(fp)
      }
    }

    select(max_socket, &readfds, NULL, NULL, NULL);
    71d8:	e0bfbf04 	addi	r2,fp,-260
    71dc:	d8000015 	stw	zero,0(sp)
    71e0:	e13fb917 	ldw	r4,-284(fp)
    71e4:	100b883a 	mov	r5,r2
    71e8:	000d883a 	mov	r6,zero
    71ec:	000f883a 	mov	r7,zero
    71f0:	00260440 	call	26044 <bsd_select>
     * is "set" in readfs, then we have an incoming connection request. We'll
     * call a routine to explicitly accept or deny the incoming connection 
     * request (in this example, we accept a single connection and reject any
     * others that come in while the connection is open).
     */
    if (FD_ISSET(fd_listen, &readfds))
    71f4:	e0bfbf04 	addi	r2,fp,-260
    71f8:	e13fba17 	ldw	r4,-280(fp)
    71fc:	100b883a 	mov	r5,r2
    7200:	0032fb80 	call	32fb8 <ifd_isset>
    7204:	10000526 	beq	r2,zero,721c <SSSSimpleSocketServerTask+0x180>
    {
      sss_handle_accept(fd_listen, &conn);
    7208:	e13fba17 	ldw	r4,-280(fp)
    720c:	01400174 	movhi	r5,5
    7210:	294ff404 	addi	r5,r5,16336
    7214:	0006c300 	call	6c30 <sss_handle_accept>
    7218:	00001006 	br	725c <SSSSimpleSocketServerTask+0x1c0>
     * incoming data for our sss server, and we call our receiver routine
     * to process it.
     */
    else
    {
      if ((conn.fd != -1) && FD_ISSET(conn.fd, &readfds))
    721c:	00800174 	movhi	r2,5
    7220:	108ff404 	addi	r2,r2,16336
    7224:	10800117 	ldw	r2,4(r2)
    7228:	10bfffe0 	cmpeqi	r2,r2,-1
    722c:	10000b1e 	bne	r2,zero,725c <SSSSimpleSocketServerTask+0x1c0>
    7230:	00800174 	movhi	r2,5
    7234:	108ff404 	addi	r2,r2,16336
    7238:	10c00117 	ldw	r3,4(r2)
    723c:	e0bfbf04 	addi	r2,fp,-260
    7240:	1809883a 	mov	r4,r3
    7244:	100b883a 	mov	r5,r2
    7248:	0032fb80 	call	32fb8 <ifd_isset>
    724c:	10000326 	beq	r2,zero,725c <SSSSimpleSocketServerTask+0x1c0>
      {
        sss_handle_receive(&conn);
    7250:	01000174 	movhi	r4,5
    7254:	210ff404 	addi	r4,r4,16336
    7258:	0006eb00 	call	6eb0 <sss_handle_receive>
      }
    }
  } /* while(1) */
    725c:	003fc006 	br	7160 <__alt_mem_descriptor_memory+0xdefc7160>

00007260 <_fprintf_r>:
    7260:	defffe04 	addi	sp,sp,-8
    7264:	2809883a 	mov	r4,r5
    7268:	dfc00015 	stw	ra,0(sp)
    726c:	d9c00115 	stw	r7,4(sp)
    7270:	300b883a 	mov	r5,r6
    7274:	d9800104 	addi	r6,sp,4
    7278:	000cd340 	call	cd34 <__vfprintf_internal>
    727c:	dfc00017 	ldw	ra,0(sp)
    7280:	dec00204 	addi	sp,sp,8
    7284:	f800283a 	ret

00007288 <fprintf>:
    7288:	defffd04 	addi	sp,sp,-12
    728c:	dfc00015 	stw	ra,0(sp)
    7290:	d9800115 	stw	r6,4(sp)
    7294:	d9c00215 	stw	r7,8(sp)
    7298:	d9800104 	addi	r6,sp,4
    729c:	000cd340 	call	cd34 <__vfprintf_internal>
    72a0:	dfc00017 	ldw	ra,0(sp)
    72a4:	dec00304 	addi	sp,sp,12
    72a8:	f800283a 	ret

000072ac <_fwrite_r>:
    72ac:	defff504 	addi	sp,sp,-44
    72b0:	dcc00815 	stw	r19,32(sp)
    72b4:	39a7383a 	mul	r19,r7,r6
    72b8:	d8800304 	addi	r2,sp,12
    72bc:	d8800015 	stw	r2,0(sp)
    72c0:	00800044 	movi	r2,1
    72c4:	dd000915 	stw	r20,36(sp)
    72c8:	dc800715 	stw	r18,28(sp)
    72cc:	dc400615 	stw	r17,24(sp)
    72d0:	d9400315 	stw	r5,12(sp)
    72d4:	dfc00a15 	stw	ra,40(sp)
    72d8:	dcc00415 	stw	r19,16(sp)
    72dc:	dcc00215 	stw	r19,8(sp)
    72e0:	d8800115 	stw	r2,4(sp)
    72e4:	3029883a 	mov	r20,r6
    72e8:	3823883a 	mov	r17,r7
    72ec:	2025883a 	mov	r18,r4
    72f0:	d9400b17 	ldw	r5,44(sp)
    72f4:	20000226 	beq	r4,zero,7300 <_fwrite_r+0x54>
    72f8:	20800e17 	ldw	r2,56(r4)
    72fc:	10001a26 	beq	r2,zero,7368 <_fwrite_r+0xbc>
    7300:	2880030b 	ldhu	r2,12(r5)
    7304:	10c8000c 	andi	r3,r2,8192
    7308:	1800061e 	bne	r3,zero,7324 <_fwrite_r+0x78>
    730c:	29001917 	ldw	r4,100(r5)
    7310:	00f7ffc4 	movi	r3,-8193
    7314:	10880014 	ori	r2,r2,8192
    7318:	20c6703a 	and	r3,r4,r3
    731c:	2880030d 	sth	r2,12(r5)
    7320:	28c01915 	stw	r3,100(r5)
    7324:	9009883a 	mov	r4,r18
    7328:	d80d883a 	mov	r6,sp
    732c:	000f4800 	call	f480 <__sfvwrite_r>
    7330:	10000b26 	beq	r2,zero,7360 <_fwrite_r+0xb4>
    7334:	d9000217 	ldw	r4,8(sp)
    7338:	a00b883a 	mov	r5,r20
    733c:	9909c83a 	sub	r4,r19,r4
    7340:	00152500 	call	15250 <__udivsi3>
    7344:	dfc00a17 	ldw	ra,40(sp)
    7348:	dd000917 	ldw	r20,36(sp)
    734c:	dcc00817 	ldw	r19,32(sp)
    7350:	dc800717 	ldw	r18,28(sp)
    7354:	dc400617 	ldw	r17,24(sp)
    7358:	dec00b04 	addi	sp,sp,44
    735c:	f800283a 	ret
    7360:	8805883a 	mov	r2,r17
    7364:	003ff706 	br	7344 <__alt_mem_descriptor_memory+0xdefc7344>
    7368:	d9400515 	stw	r5,20(sp)
    736c:	000eec80 	call	eec8 <__sinit>
    7370:	d9400517 	ldw	r5,20(sp)
    7374:	003fe206 	br	7300 <__alt_mem_descriptor_memory+0xdefc7300>

00007378 <fwrite>:
    7378:	00800174 	movhi	r2,5
    737c:	10872d04 	addi	r2,r2,7348
    7380:	2011883a 	mov	r8,r4
    7384:	11000017 	ldw	r4,0(r2)
    7388:	defffe04 	addi	sp,sp,-8
    738c:	2807883a 	mov	r3,r5
    7390:	3005883a 	mov	r2,r6
    7394:	d9c00015 	stw	r7,0(sp)
    7398:	400b883a 	mov	r5,r8
    739c:	180d883a 	mov	r6,r3
    73a0:	100f883a 	mov	r7,r2
    73a4:	dfc00115 	stw	ra,4(sp)
    73a8:	00072ac0 	call	72ac <_fwrite_r>
    73ac:	dfc00117 	ldw	ra,4(sp)
    73b0:	dec00204 	addi	sp,sp,8
    73b4:	f800283a 	ret

000073b8 <_getc_r>:
    73b8:	defffd04 	addi	sp,sp,-12
    73bc:	dc400115 	stw	r17,4(sp)
    73c0:	dc000015 	stw	r16,0(sp)
    73c4:	dfc00215 	stw	ra,8(sp)
    73c8:	2023883a 	mov	r17,r4
    73cc:	2821883a 	mov	r16,r5
    73d0:	20000226 	beq	r4,zero,73dc <_getc_r+0x24>
    73d4:	20800e17 	ldw	r2,56(r4)
    73d8:	10001026 	beq	r2,zero,741c <_getc_r+0x64>
    73dc:	000eed80 	call	eed8 <__sfp_lock_acquire>
    73e0:	80800117 	ldw	r2,4(r16)
    73e4:	10bfffc4 	addi	r2,r2,-1
    73e8:	80800115 	stw	r2,4(r16)
    73ec:	10000d16 	blt	r2,zero,7424 <_getc_r+0x6c>
    73f0:	80800017 	ldw	r2,0(r16)
    73f4:	10c00044 	addi	r3,r2,1
    73f8:	80c00015 	stw	r3,0(r16)
    73fc:	14000003 	ldbu	r16,0(r2)
    7400:	000eedc0 	call	eedc <__sfp_lock_release>
    7404:	8005883a 	mov	r2,r16
    7408:	dfc00217 	ldw	ra,8(sp)
    740c:	dc400117 	ldw	r17,4(sp)
    7410:	dc000017 	ldw	r16,0(sp)
    7414:	dec00304 	addi	sp,sp,12
    7418:	f800283a 	ret
    741c:	000eec80 	call	eec8 <__sinit>
    7420:	003fee06 	br	73dc <__alt_mem_descriptor_memory+0xdefc73dc>
    7424:	800b883a 	mov	r5,r16
    7428:	8809883a 	mov	r4,r17
    742c:	00083880 	call	8388 <__srget_r>
    7430:	1021883a 	mov	r16,r2
    7434:	003ff206 	br	7400 <__alt_mem_descriptor_memory+0xdefc7400>

00007438 <getc>:
    7438:	defffd04 	addi	sp,sp,-12
    743c:	dc400115 	stw	r17,4(sp)
    7440:	04400174 	movhi	r17,5
    7444:	8c472d04 	addi	r17,r17,7348
    7448:	dc000015 	stw	r16,0(sp)
    744c:	2021883a 	mov	r16,r4
    7450:	89000017 	ldw	r4,0(r17)
    7454:	dfc00215 	stw	ra,8(sp)
    7458:	20000226 	beq	r4,zero,7464 <getc+0x2c>
    745c:	20800e17 	ldw	r2,56(r4)
    7460:	10001026 	beq	r2,zero,74a4 <getc+0x6c>
    7464:	000eed80 	call	eed8 <__sfp_lock_acquire>
    7468:	80800117 	ldw	r2,4(r16)
    746c:	10bfffc4 	addi	r2,r2,-1
    7470:	80800115 	stw	r2,4(r16)
    7474:	10000d16 	blt	r2,zero,74ac <getc+0x74>
    7478:	80800017 	ldw	r2,0(r16)
    747c:	10c00044 	addi	r3,r2,1
    7480:	80c00015 	stw	r3,0(r16)
    7484:	14000003 	ldbu	r16,0(r2)
    7488:	000eedc0 	call	eedc <__sfp_lock_release>
    748c:	8005883a 	mov	r2,r16
    7490:	dfc00217 	ldw	ra,8(sp)
    7494:	dc400117 	ldw	r17,4(sp)
    7498:	dc000017 	ldw	r16,0(sp)
    749c:	dec00304 	addi	sp,sp,12
    74a0:	f800283a 	ret
    74a4:	000eec80 	call	eec8 <__sinit>
    74a8:	003fee06 	br	7464 <__alt_mem_descriptor_memory+0xdefc7464>
    74ac:	89000017 	ldw	r4,0(r17)
    74b0:	800b883a 	mov	r5,r16
    74b4:	00083880 	call	8388 <__srget_r>
    74b8:	1021883a 	mov	r16,r2
    74bc:	003ff206 	br	7488 <__alt_mem_descriptor_memory+0xdefc7488>

000074c0 <malloc>:
    74c0:	00800174 	movhi	r2,5
    74c4:	10872d04 	addi	r2,r2,7348
    74c8:	200b883a 	mov	r5,r4
    74cc:	11000017 	ldw	r4,0(r2)
    74d0:	00074e81 	jmpi	74e8 <_malloc_r>

000074d4 <free>:
    74d4:	00800174 	movhi	r2,5
    74d8:	10872d04 	addi	r2,r2,7348
    74dc:	200b883a 	mov	r5,r4
    74e0:	11000017 	ldw	r4,0(r2)
    74e4:	000f1901 	jmpi	f190 <_free_r>

000074e8 <_malloc_r>:
    74e8:	defff504 	addi	sp,sp,-44
    74ec:	dc800315 	stw	r18,12(sp)
    74f0:	dfc00a15 	stw	ra,40(sp)
    74f4:	df000915 	stw	fp,36(sp)
    74f8:	ddc00815 	stw	r23,32(sp)
    74fc:	dd800715 	stw	r22,28(sp)
    7500:	dd400615 	stw	r21,24(sp)
    7504:	dd000515 	stw	r20,20(sp)
    7508:	dcc00415 	stw	r19,16(sp)
    750c:	dc400215 	stw	r17,8(sp)
    7510:	dc000115 	stw	r16,4(sp)
    7514:	288002c4 	addi	r2,r5,11
    7518:	00c00584 	movi	r3,22
    751c:	2025883a 	mov	r18,r4
    7520:	18802a2e 	bgeu	r3,r2,75cc <_malloc_r+0xe4>
    7524:	047ffe04 	movi	r17,-8
    7528:	1462703a 	and	r17,r2,r17
    752c:	88009e16 	blt	r17,zero,77a8 <_malloc_r+0x2c0>
    7530:	89409d36 	bltu	r17,r5,77a8 <_malloc_r+0x2c0>
    7534:	00180200 	call	18020 <__malloc_lock>
    7538:	00807dc4 	movi	r2,503
    753c:	14402736 	bltu	r2,r17,75dc <_malloc_r+0xf4>
    7540:	8806d0fa 	srli	r3,r17,3
    7544:	04c00174 	movhi	r19,5
    7548:	9cc0e504 	addi	r19,r19,916
    754c:	18c5883a 	add	r2,r3,r3
    7550:	1085883a 	add	r2,r2,r2
    7554:	1085883a 	add	r2,r2,r2
    7558:	9885883a 	add	r2,r19,r2
    755c:	14000317 	ldw	r16,12(r2)
    7560:	80814a26 	beq	r16,r2,7a8c <_malloc_r+0x5a4>
    7564:	80c00117 	ldw	r3,4(r16)
    7568:	81000317 	ldw	r4,12(r16)
    756c:	00bfff04 	movi	r2,-4
    7570:	1884703a 	and	r2,r3,r2
    7574:	81400217 	ldw	r5,8(r16)
    7578:	8085883a 	add	r2,r16,r2
    757c:	10c00117 	ldw	r3,4(r2)
    7580:	29000315 	stw	r4,12(r5)
    7584:	21400215 	stw	r5,8(r4)
    7588:	18c00054 	ori	r3,r3,1
    758c:	10c00115 	stw	r3,4(r2)
    7590:	9009883a 	mov	r4,r18
    7594:	00181400 	call	18140 <__malloc_unlock>
    7598:	80800204 	addi	r2,r16,8
    759c:	dfc00a17 	ldw	ra,40(sp)
    75a0:	df000917 	ldw	fp,36(sp)
    75a4:	ddc00817 	ldw	r23,32(sp)
    75a8:	dd800717 	ldw	r22,28(sp)
    75ac:	dd400617 	ldw	r21,24(sp)
    75b0:	dd000517 	ldw	r20,20(sp)
    75b4:	dcc00417 	ldw	r19,16(sp)
    75b8:	dc800317 	ldw	r18,12(sp)
    75bc:	dc400217 	ldw	r17,8(sp)
    75c0:	dc000117 	ldw	r16,4(sp)
    75c4:	dec00b04 	addi	sp,sp,44
    75c8:	f800283a 	ret
    75cc:	04400404 	movi	r17,16
    75d0:	89407536 	bltu	r17,r5,77a8 <_malloc_r+0x2c0>
    75d4:	00180200 	call	18020 <__malloc_lock>
    75d8:	003fd906 	br	7540 <__alt_mem_descriptor_memory+0xdefc7540>
    75dc:	8806d27a 	srli	r3,r17,9
    75e0:	18007526 	beq	r3,zero,77b8 <_malloc_r+0x2d0>
    75e4:	00800104 	movi	r2,4
    75e8:	10c0ef36 	bltu	r2,r3,79a8 <_malloc_r+0x4c0>
    75ec:	8806d1ba 	srli	r3,r17,6
    75f0:	19c00e04 	addi	r7,r3,56
    75f4:	39cb883a 	add	r5,r7,r7
    75f8:	04c00174 	movhi	r19,5
    75fc:	294b883a 	add	r5,r5,r5
    7600:	9cc0e504 	addi	r19,r19,916
    7604:	294b883a 	add	r5,r5,r5
    7608:	994b883a 	add	r5,r19,r5
    760c:	2c000317 	ldw	r16,12(r5)
    7610:	2c000e26 	beq	r5,r16,764c <_malloc_r+0x164>
    7614:	80800117 	ldw	r2,4(r16)
    7618:	01bfff04 	movi	r6,-4
    761c:	010003c4 	movi	r4,15
    7620:	1184703a 	and	r2,r2,r6
    7624:	1447c83a 	sub	r3,r2,r17
    7628:	20c00716 	blt	r4,r3,7648 <_malloc_r+0x160>
    762c:	1800650e 	bge	r3,zero,77c4 <_malloc_r+0x2dc>
    7630:	84000317 	ldw	r16,12(r16)
    7634:	2c000526 	beq	r5,r16,764c <_malloc_r+0x164>
    7638:	80800117 	ldw	r2,4(r16)
    763c:	1184703a 	and	r2,r2,r6
    7640:	1447c83a 	sub	r3,r2,r17
    7644:	20fff90e 	bge	r4,r3,762c <__alt_mem_descriptor_memory+0xdefc762c>
    7648:	39ffffc4 	addi	r7,r7,-1
    764c:	38c00044 	addi	r3,r7,1
    7650:	01800174 	movhi	r6,5
    7654:	9c000417 	ldw	r16,16(r19)
    7658:	3180e504 	addi	r6,r6,916
    765c:	32400204 	addi	r9,r6,8
    7660:	82410326 	beq	r16,r9,7a70 <_malloc_r+0x588>
    7664:	81000117 	ldw	r4,4(r16)
    7668:	00bfff04 	movi	r2,-4
    766c:	208e703a 	and	r7,r4,r2
    7670:	3c45c83a 	sub	r2,r7,r17
    7674:	010003c4 	movi	r4,15
    7678:	2080ee16 	blt	r4,r2,7a34 <_malloc_r+0x54c>
    767c:	32400515 	stw	r9,20(r6)
    7680:	32400415 	stw	r9,16(r6)
    7684:	1000510e 	bge	r2,zero,77cc <_malloc_r+0x2e4>
    7688:	00807fc4 	movi	r2,511
    768c:	11c0ce36 	bltu	r2,r7,79c8 <_malloc_r+0x4e0>
    7690:	3808d0fa 	srli	r4,r7,3
    7694:	01c00044 	movi	r7,1
    7698:	30800117 	ldw	r2,4(r6)
    769c:	210b883a 	add	r5,r4,r4
    76a0:	294b883a 	add	r5,r5,r5
    76a4:	2009d0ba 	srai	r4,r4,2
    76a8:	294b883a 	add	r5,r5,r5
    76ac:	298b883a 	add	r5,r5,r6
    76b0:	2a000217 	ldw	r8,8(r5)
    76b4:	3908983a 	sll	r4,r7,r4
    76b8:	81400315 	stw	r5,12(r16)
    76bc:	82000215 	stw	r8,8(r16)
    76c0:	2088b03a 	or	r4,r4,r2
    76c4:	2c000215 	stw	r16,8(r5)
    76c8:	31000115 	stw	r4,4(r6)
    76cc:	44000315 	stw	r16,12(r8)
    76d0:	1805d0ba 	srai	r2,r3,2
    76d4:	01400044 	movi	r5,1
    76d8:	288a983a 	sll	r5,r5,r2
    76dc:	21404336 	bltu	r4,r5,77ec <_malloc_r+0x304>
    76e0:	2144703a 	and	r2,r4,r5
    76e4:	10000a1e 	bne	r2,zero,7710 <_malloc_r+0x228>
    76e8:	00bfff04 	movi	r2,-4
    76ec:	294b883a 	add	r5,r5,r5
    76f0:	1886703a 	and	r3,r3,r2
    76f4:	2144703a 	and	r2,r4,r5
    76f8:	18c00104 	addi	r3,r3,4
    76fc:	1000041e 	bne	r2,zero,7710 <_malloc_r+0x228>
    7700:	294b883a 	add	r5,r5,r5
    7704:	2144703a 	and	r2,r4,r5
    7708:	18c00104 	addi	r3,r3,4
    770c:	103ffc26 	beq	r2,zero,7700 <__alt_mem_descriptor_memory+0xdefc7700>
    7710:	023fff04 	movi	r8,-4
    7714:	01c003c4 	movi	r7,15
    7718:	18c5883a 	add	r2,r3,r3
    771c:	1085883a 	add	r2,r2,r2
    7720:	1085883a 	add	r2,r2,r2
    7724:	9895883a 	add	r10,r19,r2
    7728:	52c00304 	addi	r11,r10,12
    772c:	1819883a 	mov	r12,r3
    7730:	5c000017 	ldw	r16,0(r11)
    7734:	59bffd04 	addi	r6,r11,-12
    7738:	8180041e 	bne	r16,r6,774c <_malloc_r+0x264>
    773c:	0000ce06 	br	7a78 <_malloc_r+0x590>
    7740:	2000d70e 	bge	r4,zero,7aa0 <_malloc_r+0x5b8>
    7744:	84000317 	ldw	r16,12(r16)
    7748:	8180cb26 	beq	r16,r6,7a78 <_malloc_r+0x590>
    774c:	80800117 	ldw	r2,4(r16)
    7750:	1204703a 	and	r2,r2,r8
    7754:	1449c83a 	sub	r4,r2,r17
    7758:	393ff90e 	bge	r7,r4,7740 <__alt_mem_descriptor_memory+0xdefc7740>
    775c:	80800317 	ldw	r2,12(r16)
    7760:	80c00217 	ldw	r3,8(r16)
    7764:	89400054 	ori	r5,r17,1
    7768:	81400115 	stw	r5,4(r16)
    776c:	18800315 	stw	r2,12(r3)
    7770:	10c00215 	stw	r3,8(r2)
    7774:	8463883a 	add	r17,r16,r17
    7778:	9c400515 	stw	r17,20(r19)
    777c:	9c400415 	stw	r17,16(r19)
    7780:	20800054 	ori	r2,r4,1
    7784:	88800115 	stw	r2,4(r17)
    7788:	8a400315 	stw	r9,12(r17)
    778c:	8a400215 	stw	r9,8(r17)
    7790:	8923883a 	add	r17,r17,r4
    7794:	89000015 	stw	r4,0(r17)
    7798:	9009883a 	mov	r4,r18
    779c:	00181400 	call	18140 <__malloc_unlock>
    77a0:	80800204 	addi	r2,r16,8
    77a4:	003f7d06 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    77a8:	00800304 	movi	r2,12
    77ac:	90800015 	stw	r2,0(r18)
    77b0:	0005883a 	mov	r2,zero
    77b4:	003f7906 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    77b8:	01401f84 	movi	r5,126
    77bc:	01c00fc4 	movi	r7,63
    77c0:	003f8d06 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    77c4:	81000317 	ldw	r4,12(r16)
    77c8:	003f6a06 	br	7574 <__alt_mem_descriptor_memory+0xdefc7574>
    77cc:	81c5883a 	add	r2,r16,r7
    77d0:	10c00117 	ldw	r3,4(r2)
    77d4:	9009883a 	mov	r4,r18
    77d8:	18c00054 	ori	r3,r3,1
    77dc:	10c00115 	stw	r3,4(r2)
    77e0:	00181400 	call	18140 <__malloc_unlock>
    77e4:	80800204 	addi	r2,r16,8
    77e8:	003f6c06 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    77ec:	9c000217 	ldw	r16,8(r19)
    77f0:	00bfff04 	movi	r2,-4
    77f4:	85800117 	ldw	r22,4(r16)
    77f8:	b0ac703a 	and	r22,r22,r2
    77fc:	b4400336 	bltu	r22,r17,780c <_malloc_r+0x324>
    7800:	b445c83a 	sub	r2,r22,r17
    7804:	00c003c4 	movi	r3,15
    7808:	18805d16 	blt	r3,r2,7980 <_malloc_r+0x498>
    780c:	05c00174 	movhi	r23,5
    7810:	00800174 	movhi	r2,5
    7814:	bdc72e04 	addi	r23,r23,7352
    7818:	108f7604 	addi	r2,r2,15832
    781c:	15400017 	ldw	r21,0(r2)
    7820:	b9000017 	ldw	r4,0(r23)
    7824:	00ffffc4 	movi	r3,-1
    7828:	858d883a 	add	r6,r16,r22
    782c:	8d6b883a 	add	r21,r17,r21
    7830:	20c0e426 	beq	r4,r3,7bc4 <_malloc_r+0x6dc>
    7834:	ad4403c4 	addi	r21,r21,4111
    7838:	00fc0004 	movi	r3,-4096
    783c:	a8ea703a 	and	r21,r21,r3
    7840:	9009883a 	mov	r4,r18
    7844:	a80b883a 	mov	r5,r21
    7848:	d9800015 	stw	r6,0(sp)
    784c:	00084100 	call	8410 <_sbrk_r>
    7850:	00ffffc4 	movi	r3,-1
    7854:	1029883a 	mov	r20,r2
    7858:	d9800017 	ldw	r6,0(sp)
    785c:	10c0a426 	beq	r2,r3,7af0 <_malloc_r+0x608>
    7860:	1180a236 	bltu	r2,r6,7aec <_malloc_r+0x604>
    7864:	07000174 	movhi	fp,5
    7868:	e7117004 	addi	fp,fp,17856
    786c:	e0c00017 	ldw	r3,0(fp)
    7870:	a8c7883a 	add	r3,r21,r3
    7874:	e0c00015 	stw	r3,0(fp)
    7878:	3500da26 	beq	r6,r20,7be4 <_malloc_r+0x6fc>
    787c:	b9000017 	ldw	r4,0(r23)
    7880:	00bfffc4 	movi	r2,-1
    7884:	2080e426 	beq	r4,r2,7c18 <_malloc_r+0x730>
    7888:	a185c83a 	sub	r2,r20,r6
    788c:	1885883a 	add	r2,r3,r2
    7890:	e0800015 	stw	r2,0(fp)
    7894:	a0c001cc 	andi	r3,r20,7
    7898:	1800b526 	beq	r3,zero,7b70 <_malloc_r+0x688>
    789c:	a0e9c83a 	sub	r20,r20,r3
    78a0:	00840204 	movi	r2,4104
    78a4:	a5000204 	addi	r20,r20,8
    78a8:	10c7c83a 	sub	r3,r2,r3
    78ac:	a545883a 	add	r2,r20,r21
    78b0:	1083ffcc 	andi	r2,r2,4095
    78b4:	18abc83a 	sub	r21,r3,r2
    78b8:	9009883a 	mov	r4,r18
    78bc:	a80b883a 	mov	r5,r21
    78c0:	00084100 	call	8410 <_sbrk_r>
    78c4:	00ffffc4 	movi	r3,-1
    78c8:	10c0d026 	beq	r2,r3,7c0c <_malloc_r+0x724>
    78cc:	1507c83a 	sub	r3,r2,r20
    78d0:	a8c7883a 	add	r3,r21,r3
    78d4:	18c00054 	ori	r3,r3,1
    78d8:	e0800017 	ldw	r2,0(fp)
    78dc:	9d000215 	stw	r20,8(r19)
    78e0:	a0c00115 	stw	r3,4(r20)
    78e4:	a887883a 	add	r3,r21,r2
    78e8:	e0c00015 	stw	r3,0(fp)
    78ec:	84c00e26 	beq	r16,r19,7928 <_malloc_r+0x440>
    78f0:	018003c4 	movi	r6,15
    78f4:	3580a02e 	bgeu	r6,r22,7b78 <_malloc_r+0x690>
    78f8:	81400117 	ldw	r5,4(r16)
    78fc:	013ffe04 	movi	r4,-8
    7900:	b0bffd04 	addi	r2,r22,-12
    7904:	1104703a 	and	r2,r2,r4
    7908:	2900004c 	andi	r4,r5,1
    790c:	1108b03a 	or	r4,r2,r4
    7910:	81000115 	stw	r4,4(r16)
    7914:	01400144 	movi	r5,5
    7918:	8089883a 	add	r4,r16,r2
    791c:	21400115 	stw	r5,4(r4)
    7920:	21400215 	stw	r5,8(r4)
    7924:	3080c036 	bltu	r6,r2,7c28 <_malloc_r+0x740>
    7928:	00800174 	movhi	r2,5
    792c:	108f7504 	addi	r2,r2,15828
    7930:	11000017 	ldw	r4,0(r2)
    7934:	20c0012e 	bgeu	r4,r3,793c <_malloc_r+0x454>
    7938:	10c00015 	stw	r3,0(r2)
    793c:	00800174 	movhi	r2,5
    7940:	108f7404 	addi	r2,r2,15824
    7944:	11000017 	ldw	r4,0(r2)
    7948:	9c000217 	ldw	r16,8(r19)
    794c:	20c0012e 	bgeu	r4,r3,7954 <_malloc_r+0x46c>
    7950:	10c00015 	stw	r3,0(r2)
    7954:	80c00117 	ldw	r3,4(r16)
    7958:	00bfff04 	movi	r2,-4
    795c:	1886703a 	and	r3,r3,r2
    7960:	1c45c83a 	sub	r2,r3,r17
    7964:	1c400236 	bltu	r3,r17,7970 <_malloc_r+0x488>
    7968:	00c003c4 	movi	r3,15
    796c:	18800416 	blt	r3,r2,7980 <_malloc_r+0x498>
    7970:	9009883a 	mov	r4,r18
    7974:	00181400 	call	18140 <__malloc_unlock>
    7978:	0005883a 	mov	r2,zero
    797c:	003f0706 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    7980:	88c00054 	ori	r3,r17,1
    7984:	80c00115 	stw	r3,4(r16)
    7988:	8463883a 	add	r17,r16,r17
    798c:	10800054 	ori	r2,r2,1
    7990:	9c400215 	stw	r17,8(r19)
    7994:	88800115 	stw	r2,4(r17)
    7998:	9009883a 	mov	r4,r18
    799c:	00181400 	call	18140 <__malloc_unlock>
    79a0:	80800204 	addi	r2,r16,8
    79a4:	003efd06 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    79a8:	00800504 	movi	r2,20
    79ac:	10c0482e 	bgeu	r2,r3,7ad0 <_malloc_r+0x5e8>
    79b0:	00801504 	movi	r2,84
    79b4:	10c06836 	bltu	r2,r3,7b58 <_malloc_r+0x670>
    79b8:	8806d33a 	srli	r3,r17,12
    79bc:	19c01b84 	addi	r7,r3,110
    79c0:	39cb883a 	add	r5,r7,r7
    79c4:	003f0c06 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    79c8:	3804d27a 	srli	r2,r7,9
    79cc:	01000104 	movi	r4,4
    79d0:	2080422e 	bgeu	r4,r2,7adc <_malloc_r+0x5f4>
    79d4:	01000504 	movi	r4,20
    79d8:	20807c36 	bltu	r4,r2,7bcc <_malloc_r+0x6e4>
    79dc:	110016c4 	addi	r4,r2,91
    79e0:	210b883a 	add	r5,r4,r4
    79e4:	294b883a 	add	r5,r5,r5
    79e8:	294b883a 	add	r5,r5,r5
    79ec:	994b883a 	add	r5,r19,r5
    79f0:	28800217 	ldw	r2,8(r5)
    79f4:	02000174 	movhi	r8,5
    79f8:	4200e504 	addi	r8,r8,916
    79fc:	11406326 	beq	r2,r5,7b8c <_malloc_r+0x6a4>
    7a00:	01bfff04 	movi	r6,-4
    7a04:	11000117 	ldw	r4,4(r2)
    7a08:	2188703a 	and	r4,r4,r6
    7a0c:	3900022e 	bgeu	r7,r4,7a18 <_malloc_r+0x530>
    7a10:	10800217 	ldw	r2,8(r2)
    7a14:	28bffb1e 	bne	r5,r2,7a04 <__alt_mem_descriptor_memory+0xdefc7a04>
    7a18:	11800317 	ldw	r6,12(r2)
    7a1c:	99000117 	ldw	r4,4(r19)
    7a20:	81800315 	stw	r6,12(r16)
    7a24:	80800215 	stw	r2,8(r16)
    7a28:	34000215 	stw	r16,8(r6)
    7a2c:	14000315 	stw	r16,12(r2)
    7a30:	003f2706 	br	76d0 <__alt_mem_descriptor_memory+0xdefc76d0>
    7a34:	88c00054 	ori	r3,r17,1
    7a38:	80c00115 	stw	r3,4(r16)
    7a3c:	8463883a 	add	r17,r16,r17
    7a40:	34400515 	stw	r17,20(r6)
    7a44:	34400415 	stw	r17,16(r6)
    7a48:	10c00054 	ori	r3,r2,1
    7a4c:	8a400315 	stw	r9,12(r17)
    7a50:	8a400215 	stw	r9,8(r17)
    7a54:	88c00115 	stw	r3,4(r17)
    7a58:	88a3883a 	add	r17,r17,r2
    7a5c:	88800015 	stw	r2,0(r17)
    7a60:	9009883a 	mov	r4,r18
    7a64:	00181400 	call	18140 <__malloc_unlock>
    7a68:	80800204 	addi	r2,r16,8
    7a6c:	003ecb06 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    7a70:	31000117 	ldw	r4,4(r6)
    7a74:	003f1606 	br	76d0 <__alt_mem_descriptor_memory+0xdefc76d0>
    7a78:	63000044 	addi	r12,r12,1
    7a7c:	608000cc 	andi	r2,r12,3
    7a80:	5ac00204 	addi	r11,r11,8
    7a84:	103f2a1e 	bne	r2,zero,7730 <__alt_mem_descriptor_memory+0xdefc7730>
    7a88:	00002106 	br	7b10 <_malloc_r+0x628>
    7a8c:	80800204 	addi	r2,r16,8
    7a90:	84000517 	ldw	r16,20(r16)
    7a94:	143eb31e 	bne	r2,r16,7564 <__alt_mem_descriptor_memory+0xdefc7564>
    7a98:	18c00084 	addi	r3,r3,2
    7a9c:	003eec06 	br	7650 <__alt_mem_descriptor_memory+0xdefc7650>
    7aa0:	8085883a 	add	r2,r16,r2
    7aa4:	10c00117 	ldw	r3,4(r2)
    7aa8:	81000317 	ldw	r4,12(r16)
    7aac:	81400217 	ldw	r5,8(r16)
    7ab0:	18c00054 	ori	r3,r3,1
    7ab4:	10c00115 	stw	r3,4(r2)
    7ab8:	29000315 	stw	r4,12(r5)
    7abc:	21400215 	stw	r5,8(r4)
    7ac0:	9009883a 	mov	r4,r18
    7ac4:	00181400 	call	18140 <__malloc_unlock>
    7ac8:	80800204 	addi	r2,r16,8
    7acc:	003eb306 	br	759c <__alt_mem_descriptor_memory+0xdefc759c>
    7ad0:	19c016c4 	addi	r7,r3,91
    7ad4:	39cb883a 	add	r5,r7,r7
    7ad8:	003ec706 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    7adc:	3804d1ba 	srli	r2,r7,6
    7ae0:	11000e04 	addi	r4,r2,56
    7ae4:	210b883a 	add	r5,r4,r4
    7ae8:	003fbe06 	br	79e4 <__alt_mem_descriptor_memory+0xdefc79e4>
    7aec:	84ff5d26 	beq	r16,r19,7864 <__alt_mem_descriptor_memory+0xdefc7864>
    7af0:	9c000217 	ldw	r16,8(r19)
    7af4:	00bfff04 	movi	r2,-4
    7af8:	80c00117 	ldw	r3,4(r16)
    7afc:	1886703a 	and	r3,r3,r2
    7b00:	003f9706 	br	7960 <__alt_mem_descriptor_memory+0xdefc7960>
    7b04:	52800017 	ldw	r10,0(r10)
    7b08:	18ffffc4 	addi	r3,r3,-1
    7b0c:	50805c1e 	bne	r10,r2,7c80 <_malloc_r+0x798>
    7b10:	190000cc 	andi	r4,r3,3
    7b14:	50bffe04 	addi	r2,r10,-8
    7b18:	203ffa1e 	bne	r4,zero,7b04 <__alt_mem_descriptor_memory+0xdefc7b04>
    7b1c:	98800117 	ldw	r2,4(r19)
    7b20:	0146303a 	nor	r3,zero,r5
    7b24:	1884703a 	and	r2,r3,r2
    7b28:	98800115 	stw	r2,4(r19)
    7b2c:	294b883a 	add	r5,r5,r5
    7b30:	117f2e36 	bltu	r2,r5,77ec <__alt_mem_descriptor_memory+0xdefc77ec>
    7b34:	283f2d26 	beq	r5,zero,77ec <__alt_mem_descriptor_memory+0xdefc77ec>
    7b38:	1146703a 	and	r3,r2,r5
    7b3c:	1800521e 	bne	r3,zero,7c88 <_malloc_r+0x7a0>
    7b40:	6007883a 	mov	r3,r12
    7b44:	294b883a 	add	r5,r5,r5
    7b48:	1148703a 	and	r4,r2,r5
    7b4c:	18c00104 	addi	r3,r3,4
    7b50:	203ffc26 	beq	r4,zero,7b44 <__alt_mem_descriptor_memory+0xdefc7b44>
    7b54:	003ef006 	br	7718 <__alt_mem_descriptor_memory+0xdefc7718>
    7b58:	00805504 	movi	r2,340
    7b5c:	10c01336 	bltu	r2,r3,7bac <_malloc_r+0x6c4>
    7b60:	8806d3fa 	srli	r3,r17,15
    7b64:	19c01dc4 	addi	r7,r3,119
    7b68:	39cb883a 	add	r5,r7,r7
    7b6c:	003ea206 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    7b70:	00c40004 	movi	r3,4096
    7b74:	003f4d06 	br	78ac <__alt_mem_descriptor_memory+0xdefc78ac>
    7b78:	00800044 	movi	r2,1
    7b7c:	a0800115 	stw	r2,4(r20)
    7b80:	a021883a 	mov	r16,r20
    7b84:	0007883a 	mov	r3,zero
    7b88:	003f7506 	br	7960 <__alt_mem_descriptor_memory+0xdefc7960>
    7b8c:	200bd0ba 	srai	r5,r4,2
    7b90:	01800044 	movi	r6,1
    7b94:	41000117 	ldw	r4,4(r8)
    7b98:	314a983a 	sll	r5,r6,r5
    7b9c:	100d883a 	mov	r6,r2
    7ba0:	2908b03a 	or	r4,r5,r4
    7ba4:	41000115 	stw	r4,4(r8)
    7ba8:	003f9d06 	br	7a20 <__alt_mem_descriptor_memory+0xdefc7a20>
    7bac:	00815504 	movi	r2,1364
    7bb0:	10c01336 	bltu	r2,r3,7c00 <_malloc_r+0x718>
    7bb4:	8806d4ba 	srli	r3,r17,18
    7bb8:	19c01f04 	addi	r7,r3,124
    7bbc:	39cb883a 	add	r5,r7,r7
    7bc0:	003e8d06 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    7bc4:	ad400404 	addi	r21,r21,16
    7bc8:	003f1d06 	br	7840 <__alt_mem_descriptor_memory+0xdefc7840>
    7bcc:	01001504 	movi	r4,84
    7bd0:	20801c36 	bltu	r4,r2,7c44 <_malloc_r+0x75c>
    7bd4:	3804d33a 	srli	r2,r7,12
    7bd8:	11001b84 	addi	r4,r2,110
    7bdc:	210b883a 	add	r5,r4,r4
    7be0:	003f8006 	br	79e4 <__alt_mem_descriptor_memory+0xdefc79e4>
    7be4:	3083ffcc 	andi	r2,r6,4095
    7be8:	103f241e 	bne	r2,zero,787c <__alt_mem_descriptor_memory+0xdefc787c>
    7bec:	99000217 	ldw	r4,8(r19)
    7bf0:	ad85883a 	add	r2,r21,r22
    7bf4:	10800054 	ori	r2,r2,1
    7bf8:	20800115 	stw	r2,4(r4)
    7bfc:	003f4a06 	br	7928 <__alt_mem_descriptor_memory+0xdefc7928>
    7c00:	01403f04 	movi	r5,252
    7c04:	01c01f84 	movi	r7,126
    7c08:	003e7b06 	br	75f8 <__alt_mem_descriptor_memory+0xdefc75f8>
    7c0c:	00c00044 	movi	r3,1
    7c10:	002b883a 	mov	r21,zero
    7c14:	003f3006 	br	78d8 <__alt_mem_descriptor_memory+0xdefc78d8>
    7c18:	00800174 	movhi	r2,5
    7c1c:	10872e04 	addi	r2,r2,7352
    7c20:	15000015 	stw	r20,0(r2)
    7c24:	003f1b06 	br	7894 <__alt_mem_descriptor_memory+0xdefc7894>
    7c28:	9009883a 	mov	r4,r18
    7c2c:	81400204 	addi	r5,r16,8
    7c30:	000f1900 	call	f190 <_free_r>
    7c34:	00800174 	movhi	r2,5
    7c38:	10917004 	addi	r2,r2,17856
    7c3c:	10c00017 	ldw	r3,0(r2)
    7c40:	003f3906 	br	7928 <__alt_mem_descriptor_memory+0xdefc7928>
    7c44:	01005504 	movi	r4,340
    7c48:	20800436 	bltu	r4,r2,7c5c <_malloc_r+0x774>
    7c4c:	3804d3fa 	srli	r2,r7,15
    7c50:	11001dc4 	addi	r4,r2,119
    7c54:	210b883a 	add	r5,r4,r4
    7c58:	003f6206 	br	79e4 <__alt_mem_descriptor_memory+0xdefc79e4>
    7c5c:	01015504 	movi	r4,1364
    7c60:	20800436 	bltu	r4,r2,7c74 <_malloc_r+0x78c>
    7c64:	3804d4ba 	srli	r2,r7,18
    7c68:	11001f04 	addi	r4,r2,124
    7c6c:	210b883a 	add	r5,r4,r4
    7c70:	003f5c06 	br	79e4 <__alt_mem_descriptor_memory+0xdefc79e4>
    7c74:	01403f04 	movi	r5,252
    7c78:	01001f84 	movi	r4,126
    7c7c:	003f5906 	br	79e4 <__alt_mem_descriptor_memory+0xdefc79e4>
    7c80:	98800117 	ldw	r2,4(r19)
    7c84:	003fa906 	br	7b2c <__alt_mem_descriptor_memory+0xdefc7b2c>
    7c88:	6007883a 	mov	r3,r12
    7c8c:	003ea206 	br	7718 <__alt_mem_descriptor_memory+0xdefc7718>

00007c90 <memcpy>:
    7c90:	deffff04 	addi	sp,sp,-4
    7c94:	dc000015 	stw	r16,0(sp)
    7c98:	00c003c4 	movi	r3,15
    7c9c:	2005883a 	mov	r2,r4
    7ca0:	1980432e 	bgeu	r3,r6,7db0 <memcpy+0x120>
    7ca4:	2146b03a 	or	r3,r4,r5
    7ca8:	18c000cc 	andi	r3,r3,3
    7cac:	1800421e 	bne	r3,zero,7db8 <memcpy+0x128>
    7cb0:	343ffc04 	addi	r16,r6,-16
    7cb4:	8020d13a 	srli	r16,r16,4
    7cb8:	28c00104 	addi	r3,r5,4
    7cbc:	23400104 	addi	r13,r4,4
    7cc0:	801e913a 	slli	r15,r16,4
    7cc4:	2b000204 	addi	r12,r5,8
    7cc8:	22c00204 	addi	r11,r4,8
    7ccc:	7bc00504 	addi	r15,r15,20
    7cd0:	2a800304 	addi	r10,r5,12
    7cd4:	22400304 	addi	r9,r4,12
    7cd8:	2bdf883a 	add	r15,r5,r15
    7cdc:	2811883a 	mov	r8,r5
    7ce0:	200f883a 	mov	r7,r4
    7ce4:	41000017 	ldw	r4,0(r8)
    7ce8:	39c00404 	addi	r7,r7,16
    7cec:	18c00404 	addi	r3,r3,16
    7cf0:	393ffc15 	stw	r4,-16(r7)
    7cf4:	1bbffc17 	ldw	r14,-16(r3)
    7cf8:	6b400404 	addi	r13,r13,16
    7cfc:	5ac00404 	addi	r11,r11,16
    7d00:	6bbffc15 	stw	r14,-16(r13)
    7d04:	63800017 	ldw	r14,0(r12)
    7d08:	4a400404 	addi	r9,r9,16
    7d0c:	42000404 	addi	r8,r8,16
    7d10:	5bbffc15 	stw	r14,-16(r11)
    7d14:	53800017 	ldw	r14,0(r10)
    7d18:	63000404 	addi	r12,r12,16
    7d1c:	52800404 	addi	r10,r10,16
    7d20:	4bbffc15 	stw	r14,-16(r9)
    7d24:	1bffef1e 	bne	r3,r15,7ce4 <__alt_mem_descriptor_memory+0xdefc7ce4>
    7d28:	81c00044 	addi	r7,r16,1
    7d2c:	380e913a 	slli	r7,r7,4
    7d30:	310003cc 	andi	r4,r6,15
    7d34:	02c000c4 	movi	r11,3
    7d38:	11c7883a 	add	r3,r2,r7
    7d3c:	29cb883a 	add	r5,r5,r7
    7d40:	59001f2e 	bgeu	r11,r4,7dc0 <memcpy+0x130>
    7d44:	1813883a 	mov	r9,r3
    7d48:	2811883a 	mov	r8,r5
    7d4c:	200f883a 	mov	r7,r4
    7d50:	42800017 	ldw	r10,0(r8)
    7d54:	4a400104 	addi	r9,r9,4
    7d58:	39ffff04 	addi	r7,r7,-4
    7d5c:	4abfff15 	stw	r10,-4(r9)
    7d60:	42000104 	addi	r8,r8,4
    7d64:	59fffa36 	bltu	r11,r7,7d50 <__alt_mem_descriptor_memory+0xdefc7d50>
    7d68:	213fff04 	addi	r4,r4,-4
    7d6c:	2008d0ba 	srli	r4,r4,2
    7d70:	318000cc 	andi	r6,r6,3
    7d74:	21000044 	addi	r4,r4,1
    7d78:	2109883a 	add	r4,r4,r4
    7d7c:	2109883a 	add	r4,r4,r4
    7d80:	1907883a 	add	r3,r3,r4
    7d84:	290b883a 	add	r5,r5,r4
    7d88:	30000626 	beq	r6,zero,7da4 <memcpy+0x114>
    7d8c:	198d883a 	add	r6,r3,r6
    7d90:	29c00003 	ldbu	r7,0(r5)
    7d94:	18c00044 	addi	r3,r3,1
    7d98:	29400044 	addi	r5,r5,1
    7d9c:	19ffffc5 	stb	r7,-1(r3)
    7da0:	19bffb1e 	bne	r3,r6,7d90 <__alt_mem_descriptor_memory+0xdefc7d90>
    7da4:	dc000017 	ldw	r16,0(sp)
    7da8:	dec00104 	addi	sp,sp,4
    7dac:	f800283a 	ret
    7db0:	2007883a 	mov	r3,r4
    7db4:	003ff406 	br	7d88 <__alt_mem_descriptor_memory+0xdefc7d88>
    7db8:	2007883a 	mov	r3,r4
    7dbc:	003ff306 	br	7d8c <__alt_mem_descriptor_memory+0xdefc7d8c>
    7dc0:	200d883a 	mov	r6,r4
    7dc4:	003ff006 	br	7d88 <__alt_mem_descriptor_memory+0xdefc7d88>

00007dc8 <memmove>:
    7dc8:	2005883a 	mov	r2,r4
    7dcc:	29000b2e 	bgeu	r5,r4,7dfc <memmove+0x34>
    7dd0:	298f883a 	add	r7,r5,r6
    7dd4:	21c0092e 	bgeu	r4,r7,7dfc <memmove+0x34>
    7dd8:	2187883a 	add	r3,r4,r6
    7ddc:	198bc83a 	sub	r5,r3,r6
    7de0:	30004b26 	beq	r6,zero,7f10 <memmove+0x148>
    7de4:	39ffffc4 	addi	r7,r7,-1
    7de8:	39000003 	ldbu	r4,0(r7)
    7dec:	18ffffc4 	addi	r3,r3,-1
    7df0:	19000005 	stb	r4,0(r3)
    7df4:	197ffb1e 	bne	r3,r5,7de4 <__alt_mem_descriptor_memory+0xdefc7de4>
    7df8:	f800283a 	ret
    7dfc:	00c003c4 	movi	r3,15
    7e00:	1980412e 	bgeu	r3,r6,7f08 <memmove+0x140>
    7e04:	1146b03a 	or	r3,r2,r5
    7e08:	18c000cc 	andi	r3,r3,3
    7e0c:	1800411e 	bne	r3,zero,7f14 <memmove+0x14c>
    7e10:	33fffc04 	addi	r15,r6,-16
    7e14:	781ed13a 	srli	r15,r15,4
    7e18:	28c00104 	addi	r3,r5,4
    7e1c:	13400104 	addi	r13,r2,4
    7e20:	781c913a 	slli	r14,r15,4
    7e24:	2b000204 	addi	r12,r5,8
    7e28:	12c00204 	addi	r11,r2,8
    7e2c:	73800504 	addi	r14,r14,20
    7e30:	2a800304 	addi	r10,r5,12
    7e34:	12400304 	addi	r9,r2,12
    7e38:	2b9d883a 	add	r14,r5,r14
    7e3c:	2811883a 	mov	r8,r5
    7e40:	100f883a 	mov	r7,r2
    7e44:	41000017 	ldw	r4,0(r8)
    7e48:	39c00404 	addi	r7,r7,16
    7e4c:	18c00404 	addi	r3,r3,16
    7e50:	393ffc15 	stw	r4,-16(r7)
    7e54:	193ffc17 	ldw	r4,-16(r3)
    7e58:	6b400404 	addi	r13,r13,16
    7e5c:	5ac00404 	addi	r11,r11,16
    7e60:	693ffc15 	stw	r4,-16(r13)
    7e64:	61000017 	ldw	r4,0(r12)
    7e68:	4a400404 	addi	r9,r9,16
    7e6c:	42000404 	addi	r8,r8,16
    7e70:	593ffc15 	stw	r4,-16(r11)
    7e74:	51000017 	ldw	r4,0(r10)
    7e78:	63000404 	addi	r12,r12,16
    7e7c:	52800404 	addi	r10,r10,16
    7e80:	493ffc15 	stw	r4,-16(r9)
    7e84:	1bbfef1e 	bne	r3,r14,7e44 <__alt_mem_descriptor_memory+0xdefc7e44>
    7e88:	79000044 	addi	r4,r15,1
    7e8c:	2008913a 	slli	r4,r4,4
    7e90:	328003cc 	andi	r10,r6,15
    7e94:	02c000c4 	movi	r11,3
    7e98:	1107883a 	add	r3,r2,r4
    7e9c:	290b883a 	add	r5,r5,r4
    7ea0:	5a801e2e 	bgeu	r11,r10,7f1c <memmove+0x154>
    7ea4:	1813883a 	mov	r9,r3
    7ea8:	2811883a 	mov	r8,r5
    7eac:	500f883a 	mov	r7,r10
    7eb0:	41000017 	ldw	r4,0(r8)
    7eb4:	4a400104 	addi	r9,r9,4
    7eb8:	39ffff04 	addi	r7,r7,-4
    7ebc:	493fff15 	stw	r4,-4(r9)
    7ec0:	42000104 	addi	r8,r8,4
    7ec4:	59fffa36 	bltu	r11,r7,7eb0 <__alt_mem_descriptor_memory+0xdefc7eb0>
    7ec8:	513fff04 	addi	r4,r10,-4
    7ecc:	2008d0ba 	srli	r4,r4,2
    7ed0:	318000cc 	andi	r6,r6,3
    7ed4:	21000044 	addi	r4,r4,1
    7ed8:	2109883a 	add	r4,r4,r4
    7edc:	2109883a 	add	r4,r4,r4
    7ee0:	1907883a 	add	r3,r3,r4
    7ee4:	290b883a 	add	r5,r5,r4
    7ee8:	30000926 	beq	r6,zero,7f10 <memmove+0x148>
    7eec:	198d883a 	add	r6,r3,r6
    7ef0:	29c00003 	ldbu	r7,0(r5)
    7ef4:	18c00044 	addi	r3,r3,1
    7ef8:	29400044 	addi	r5,r5,1
    7efc:	19ffffc5 	stb	r7,-1(r3)
    7f00:	19bffb1e 	bne	r3,r6,7ef0 <__alt_mem_descriptor_memory+0xdefc7ef0>
    7f04:	f800283a 	ret
    7f08:	1007883a 	mov	r3,r2
    7f0c:	003ff606 	br	7ee8 <__alt_mem_descriptor_memory+0xdefc7ee8>
    7f10:	f800283a 	ret
    7f14:	1007883a 	mov	r3,r2
    7f18:	003ff406 	br	7eec <__alt_mem_descriptor_memory+0xdefc7eec>
    7f1c:	500d883a 	mov	r6,r10
    7f20:	003ff106 	br	7ee8 <__alt_mem_descriptor_memory+0xdefc7ee8>

00007f24 <memset>:
    7f24:	20c000cc 	andi	r3,r4,3
    7f28:	2005883a 	mov	r2,r4
    7f2c:	18004326 	beq	r3,zero,803c <memset+0x118>
    7f30:	31ffffc4 	addi	r7,r6,-1
    7f34:	30004026 	beq	r6,zero,8038 <memset+0x114>
    7f38:	2813883a 	mov	r9,r5
    7f3c:	200d883a 	mov	r6,r4
    7f40:	2007883a 	mov	r3,r4
    7f44:	00000406 	br	7f58 <memset+0x34>
    7f48:	3a3fffc4 	addi	r8,r7,-1
    7f4c:	31800044 	addi	r6,r6,1
    7f50:	38003926 	beq	r7,zero,8038 <memset+0x114>
    7f54:	400f883a 	mov	r7,r8
    7f58:	18c00044 	addi	r3,r3,1
    7f5c:	32400005 	stb	r9,0(r6)
    7f60:	1a0000cc 	andi	r8,r3,3
    7f64:	403ff81e 	bne	r8,zero,7f48 <__alt_mem_descriptor_memory+0xdefc7f48>
    7f68:	010000c4 	movi	r4,3
    7f6c:	21c02d2e 	bgeu	r4,r7,8024 <memset+0x100>
    7f70:	29803fcc 	andi	r6,r5,255
    7f74:	3008923a 	slli	r4,r6,8
    7f78:	218cb03a 	or	r6,r4,r6
    7f7c:	3008943a 	slli	r4,r6,16
    7f80:	218cb03a 	or	r6,r4,r6
    7f84:	010003c4 	movi	r4,15
    7f88:	21c0182e 	bgeu	r4,r7,7fec <memset+0xc8>
    7f8c:	3b3ffc04 	addi	r12,r7,-16
    7f90:	6018d13a 	srli	r12,r12,4
    7f94:	1a000104 	addi	r8,r3,4
    7f98:	1ac00204 	addi	r11,r3,8
    7f9c:	6008913a 	slli	r4,r12,4
    7fa0:	1a800304 	addi	r10,r3,12
    7fa4:	1813883a 	mov	r9,r3
    7fa8:	21000504 	addi	r4,r4,20
    7fac:	1909883a 	add	r4,r3,r4
    7fb0:	49800015 	stw	r6,0(r9)
    7fb4:	41800015 	stw	r6,0(r8)
    7fb8:	59800015 	stw	r6,0(r11)
    7fbc:	51800015 	stw	r6,0(r10)
    7fc0:	42000404 	addi	r8,r8,16
    7fc4:	4a400404 	addi	r9,r9,16
    7fc8:	5ac00404 	addi	r11,r11,16
    7fcc:	52800404 	addi	r10,r10,16
    7fd0:	413ff71e 	bne	r8,r4,7fb0 <__alt_mem_descriptor_memory+0xdefc7fb0>
    7fd4:	63000044 	addi	r12,r12,1
    7fd8:	6018913a 	slli	r12,r12,4
    7fdc:	39c003cc 	andi	r7,r7,15
    7fe0:	010000c4 	movi	r4,3
    7fe4:	1b07883a 	add	r3,r3,r12
    7fe8:	21c00e2e 	bgeu	r4,r7,8024 <memset+0x100>
    7fec:	1813883a 	mov	r9,r3
    7ff0:	3811883a 	mov	r8,r7
    7ff4:	010000c4 	movi	r4,3
    7ff8:	49800015 	stw	r6,0(r9)
    7ffc:	423fff04 	addi	r8,r8,-4
    8000:	4a400104 	addi	r9,r9,4
    8004:	223ffc36 	bltu	r4,r8,7ff8 <__alt_mem_descriptor_memory+0xdefc7ff8>
    8008:	393fff04 	addi	r4,r7,-4
    800c:	2008d0ba 	srli	r4,r4,2
    8010:	39c000cc 	andi	r7,r7,3
    8014:	21000044 	addi	r4,r4,1
    8018:	2109883a 	add	r4,r4,r4
    801c:	2109883a 	add	r4,r4,r4
    8020:	1907883a 	add	r3,r3,r4
    8024:	38000426 	beq	r7,zero,8038 <memset+0x114>
    8028:	19cf883a 	add	r7,r3,r7
    802c:	19400005 	stb	r5,0(r3)
    8030:	18c00044 	addi	r3,r3,1
    8034:	19fffd1e 	bne	r3,r7,802c <__alt_mem_descriptor_memory+0xdefc802c>
    8038:	f800283a 	ret
    803c:	2007883a 	mov	r3,r4
    8040:	300f883a 	mov	r7,r6
    8044:	003fc806 	br	7f68 <__alt_mem_descriptor_memory+0xdefc7f68>

00008048 <_perror_r>:
    8048:	defffe04 	addi	sp,sp,-8
    804c:	dc000015 	stw	r16,0(sp)
    8050:	dfc00115 	stw	ra,4(sp)
    8054:	2805883a 	mov	r2,r5
    8058:	2021883a 	mov	r16,r4
    805c:	28000226 	beq	r5,zero,8068 <_perror_r+0x20>
    8060:	28c00007 	ldb	r3,0(r5)
    8064:	18000c1e 	bne	r3,zero,8098 <_perror_r+0x50>
    8068:	81000017 	ldw	r4,0(r16)
    806c:	000871c0 	call	871c <strerror>
    8070:	10000326 	beq	r2,zero,8080 <_perror_r+0x38>
    8074:	81400317 	ldw	r5,12(r16)
    8078:	1009883a 	mov	r4,r2
    807c:	000f0500 	call	f050 <fputs>
    8080:	81400317 	ldw	r5,12(r16)
    8084:	01000284 	movi	r4,10
    8088:	dfc00117 	ldw	ra,4(sp)
    808c:	dc000017 	ldw	r16,0(sp)
    8090:	dec00204 	addi	sp,sp,8
    8094:	000ef5c1 	jmpi	ef5c <fputc>
    8098:	21400317 	ldw	r5,12(r4)
    809c:	1009883a 	mov	r4,r2
    80a0:	000f0500 	call	f050 <fputs>
    80a4:	81400317 	ldw	r5,12(r16)
    80a8:	01000174 	movhi	r4,5
    80ac:	21340604 	addi	r4,r4,-12264
    80b0:	000f0500 	call	f050 <fputs>
    80b4:	003fec06 	br	8068 <__alt_mem_descriptor_memory+0xdefc8068>

000080b8 <perror>:
    80b8:	00800174 	movhi	r2,5
    80bc:	10872d04 	addi	r2,r2,7348
    80c0:	200b883a 	mov	r5,r4
    80c4:	11000017 	ldw	r4,0(r2)
    80c8:	00080481 	jmpi	8048 <_perror_r>

000080cc <_printf_r>:
    80cc:	defffd04 	addi	sp,sp,-12
    80d0:	dfc00015 	stw	ra,0(sp)
    80d4:	d9800115 	stw	r6,4(sp)
    80d8:	d9c00215 	stw	r7,8(sp)
    80dc:	280d883a 	mov	r6,r5
    80e0:	21400217 	ldw	r5,8(r4)
    80e4:	d9c00104 	addi	r7,sp,4
    80e8:	000ad380 	call	ad38 <___vfprintf_internal_r>
    80ec:	dfc00017 	ldw	ra,0(sp)
    80f0:	dec00304 	addi	sp,sp,12
    80f4:	f800283a 	ret

000080f8 <printf>:
    80f8:	defffc04 	addi	sp,sp,-16
    80fc:	dfc00015 	stw	ra,0(sp)
    8100:	d9400115 	stw	r5,4(sp)
    8104:	d9800215 	stw	r6,8(sp)
    8108:	d9c00315 	stw	r7,12(sp)
    810c:	00800174 	movhi	r2,5
    8110:	10872d04 	addi	r2,r2,7348
    8114:	10800017 	ldw	r2,0(r2)
    8118:	200b883a 	mov	r5,r4
    811c:	d9800104 	addi	r6,sp,4
    8120:	11000217 	ldw	r4,8(r2)
    8124:	000cd340 	call	cd34 <__vfprintf_internal>
    8128:	dfc00017 	ldw	ra,0(sp)
    812c:	dec00404 	addi	sp,sp,16
    8130:	f800283a 	ret

00008134 <_putc_r>:
    8134:	defffc04 	addi	sp,sp,-16
    8138:	dc000215 	stw	r16,8(sp)
    813c:	dfc00315 	stw	ra,12(sp)
    8140:	2021883a 	mov	r16,r4
    8144:	20000226 	beq	r4,zero,8150 <_putc_r+0x1c>
    8148:	20800e17 	ldw	r2,56(r4)
    814c:	10001b26 	beq	r2,zero,81bc <_putc_r+0x88>
    8150:	30800217 	ldw	r2,8(r6)
    8154:	10bfffc4 	addi	r2,r2,-1
    8158:	30800215 	stw	r2,8(r6)
    815c:	10000a16 	blt	r2,zero,8188 <_putc_r+0x54>
    8160:	30800017 	ldw	r2,0(r6)
    8164:	11400005 	stb	r5,0(r2)
    8168:	30800017 	ldw	r2,0(r6)
    816c:	10c00044 	addi	r3,r2,1
    8170:	30c00015 	stw	r3,0(r6)
    8174:	10800003 	ldbu	r2,0(r2)
    8178:	dfc00317 	ldw	ra,12(sp)
    817c:	dc000217 	ldw	r16,8(sp)
    8180:	dec00404 	addi	sp,sp,16
    8184:	f800283a 	ret
    8188:	30c00617 	ldw	r3,24(r6)
    818c:	10c00616 	blt	r2,r3,81a8 <_putc_r+0x74>
    8190:	30800017 	ldw	r2,0(r6)
    8194:	00c00284 	movi	r3,10
    8198:	11400005 	stb	r5,0(r2)
    819c:	30800017 	ldw	r2,0(r6)
    81a0:	11400003 	ldbu	r5,0(r2)
    81a4:	28fff11e 	bne	r5,r3,816c <__alt_mem_descriptor_memory+0xdefc816c>
    81a8:	8009883a 	mov	r4,r16
    81ac:	dfc00317 	ldw	ra,12(sp)
    81b0:	dc000217 	ldw	r16,8(sp)
    81b4:	dec00404 	addi	sp,sp,16
    81b8:	000cd581 	jmpi	cd58 <__swbuf_r>
    81bc:	d9400015 	stw	r5,0(sp)
    81c0:	d9800115 	stw	r6,4(sp)
    81c4:	000eec80 	call	eec8 <__sinit>
    81c8:	d9800117 	ldw	r6,4(sp)
    81cc:	d9400017 	ldw	r5,0(sp)
    81d0:	003fdf06 	br	8150 <__alt_mem_descriptor_memory+0xdefc8150>

000081d4 <putc>:
    81d4:	defffc04 	addi	sp,sp,-16
    81d8:	dc400115 	stw	r17,4(sp)
    81dc:	04400174 	movhi	r17,5
    81e0:	8c472d04 	addi	r17,r17,7348
    81e4:	dc800215 	stw	r18,8(sp)
    81e8:	2025883a 	mov	r18,r4
    81ec:	89000017 	ldw	r4,0(r17)
    81f0:	dc000015 	stw	r16,0(sp)
    81f4:	dfc00315 	stw	ra,12(sp)
    81f8:	2821883a 	mov	r16,r5
    81fc:	20000226 	beq	r4,zero,8208 <putc+0x34>
    8200:	20c00e17 	ldw	r3,56(r4)
    8204:	18001a26 	beq	r3,zero,8270 <putc+0x9c>
    8208:	80800217 	ldw	r2,8(r16)
    820c:	10bfffc4 	addi	r2,r2,-1
    8210:	80800215 	stw	r2,8(r16)
    8214:	10000c16 	blt	r2,zero,8248 <putc+0x74>
    8218:	80800017 	ldw	r2,0(r16)
    821c:	14800005 	stb	r18,0(r2)
    8220:	80800017 	ldw	r2,0(r16)
    8224:	10c00044 	addi	r3,r2,1
    8228:	80c00015 	stw	r3,0(r16)
    822c:	10800003 	ldbu	r2,0(r2)
    8230:	dfc00317 	ldw	ra,12(sp)
    8234:	dc800217 	ldw	r18,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00404 	addi	sp,sp,16
    8244:	f800283a 	ret
    8248:	80c00617 	ldw	r3,24(r16)
    824c:	10c00a16 	blt	r2,r3,8278 <putc+0xa4>
    8250:	80800017 	ldw	r2,0(r16)
    8254:	00c00284 	movi	r3,10
    8258:	14800005 	stb	r18,0(r2)
    825c:	80800017 	ldw	r2,0(r16)
    8260:	11400003 	ldbu	r5,0(r2)
    8264:	28ffef1e 	bne	r5,r3,8224 <__alt_mem_descriptor_memory+0xdefc8224>
    8268:	89000017 	ldw	r4,0(r17)
    826c:	00000406 	br	8280 <putc+0xac>
    8270:	000eec80 	call	eec8 <__sinit>
    8274:	003fe406 	br	8208 <__alt_mem_descriptor_memory+0xdefc8208>
    8278:	89000017 	ldw	r4,0(r17)
    827c:	900b883a 	mov	r5,r18
    8280:	800d883a 	mov	r6,r16
    8284:	dfc00317 	ldw	ra,12(sp)
    8288:	dc800217 	ldw	r18,8(sp)
    828c:	dc400117 	ldw	r17,4(sp)
    8290:	dc000017 	ldw	r16,0(sp)
    8294:	dec00404 	addi	sp,sp,16
    8298:	000cd581 	jmpi	cd58 <__swbuf_r>

0000829c <_putchar_r>:
    829c:	21800217 	ldw	r6,8(r4)
    82a0:	00081341 	jmpi	8134 <_putc_r>

000082a4 <putchar>:
    82a4:	00800174 	movhi	r2,5
    82a8:	10872d04 	addi	r2,r2,7348
    82ac:	200b883a 	mov	r5,r4
    82b0:	11000017 	ldw	r4,0(r2)
    82b4:	21800217 	ldw	r6,8(r4)
    82b8:	00081341 	jmpi	8134 <_putc_r>

000082bc <_puts_r>:
    82bc:	defff604 	addi	sp,sp,-40
    82c0:	dc000715 	stw	r16,28(sp)
    82c4:	2021883a 	mov	r16,r4
    82c8:	2809883a 	mov	r4,r5
    82cc:	dc400815 	stw	r17,32(sp)
    82d0:	dfc00915 	stw	ra,36(sp)
    82d4:	2823883a 	mov	r17,r5
    82d8:	0008d080 	call	8d08 <strlen>
    82dc:	00c00174 	movhi	r3,5
    82e0:	18c72d04 	addi	r3,r3,7348
    82e4:	18c00017 	ldw	r3,0(r3)
    82e8:	11000044 	addi	r4,r2,1
    82ec:	d8800115 	stw	r2,4(sp)
    82f0:	18c00217 	ldw	r3,8(r3)
    82f4:	01400174 	movhi	r5,5
    82f8:	29740704 	addi	r5,r5,-12260
    82fc:	1880030b 	ldhu	r2,12(r3)
    8300:	d9400215 	stw	r5,8(sp)
    8304:	d9000615 	stw	r4,24(sp)
    8308:	01400044 	movi	r5,1
    830c:	01000084 	movi	r4,2
    8310:	d9000515 	stw	r4,20(sp)
    8314:	dc400015 	stw	r17,0(sp)
    8318:	d9400315 	stw	r5,12(sp)
    831c:	dec00415 	stw	sp,16(sp)
    8320:	1108000c 	andi	r4,r2,8192
    8324:	2000061e 	bne	r4,zero,8340 <_puts_r+0x84>
    8328:	19401917 	ldw	r5,100(r3)
    832c:	0137ffc4 	movi	r4,-8193
    8330:	10880014 	ori	r2,r2,8192
    8334:	2908703a 	and	r4,r5,r4
    8338:	1880030d 	sth	r2,12(r3)
    833c:	19001915 	stw	r4,100(r3)
    8340:	81400217 	ldw	r5,8(r16)
    8344:	8009883a 	mov	r4,r16
    8348:	d9800404 	addi	r6,sp,16
    834c:	000f4800 	call	f480 <__sfvwrite_r>
    8350:	1000061e 	bne	r2,zero,836c <_puts_r+0xb0>
    8354:	00800284 	movi	r2,10
    8358:	dfc00917 	ldw	ra,36(sp)
    835c:	dc400817 	ldw	r17,32(sp)
    8360:	dc000717 	ldw	r16,28(sp)
    8364:	dec00a04 	addi	sp,sp,40
    8368:	f800283a 	ret
    836c:	00bfffc4 	movi	r2,-1
    8370:	003ff906 	br	8358 <__alt_mem_descriptor_memory+0xdefc8358>

00008374 <puts>:
    8374:	00800174 	movhi	r2,5
    8378:	10872d04 	addi	r2,r2,7348
    837c:	200b883a 	mov	r5,r4
    8380:	11000017 	ldw	r4,0(r2)
    8384:	00082bc1 	jmpi	82bc <_puts_r>

00008388 <__srget_r>:
    8388:	defffd04 	addi	sp,sp,-12
    838c:	dc400115 	stw	r17,4(sp)
    8390:	dc000015 	stw	r16,0(sp)
    8394:	dfc00215 	stw	ra,8(sp)
    8398:	2023883a 	mov	r17,r4
    839c:	2821883a 	mov	r16,r5
    83a0:	20000226 	beq	r4,zero,83ac <__srget_r+0x24>
    83a4:	20800e17 	ldw	r2,56(r4)
    83a8:	10001026 	beq	r2,zero,83ec <__srget_r+0x64>
    83ac:	8809883a 	mov	r4,r17
    83b0:	800b883a 	mov	r5,r16
    83b4:	001135c0 	call	1135c <__srefill_r>
    83b8:	10000e1e 	bne	r2,zero,83f4 <__srget_r+0x6c>
    83bc:	80c00017 	ldw	r3,0(r16)
    83c0:	80800117 	ldw	r2,4(r16)
    83c4:	19000044 	addi	r4,r3,1
    83c8:	10bfffc4 	addi	r2,r2,-1
    83cc:	80800115 	stw	r2,4(r16)
    83d0:	81000015 	stw	r4,0(r16)
    83d4:	18800003 	ldbu	r2,0(r3)
    83d8:	dfc00217 	ldw	ra,8(sp)
    83dc:	dc400117 	ldw	r17,4(sp)
    83e0:	dc000017 	ldw	r16,0(sp)
    83e4:	dec00304 	addi	sp,sp,12
    83e8:	f800283a 	ret
    83ec:	000eec80 	call	eec8 <__sinit>
    83f0:	003fee06 	br	83ac <__alt_mem_descriptor_memory+0xdefc83ac>
    83f4:	00bfffc4 	movi	r2,-1
    83f8:	003ff706 	br	83d8 <__alt_mem_descriptor_memory+0xdefc83d8>

000083fc <__srget>:
    83fc:	00800174 	movhi	r2,5
    8400:	10872d04 	addi	r2,r2,7348
    8404:	200b883a 	mov	r5,r4
    8408:	11000017 	ldw	r4,0(r2)
    840c:	00083881 	jmpi	8388 <__srget_r>

00008410 <_sbrk_r>:
    8410:	defffd04 	addi	sp,sp,-12
    8414:	dc000015 	stw	r16,0(sp)
    8418:	04000174 	movhi	r16,5
    841c:	dc400115 	stw	r17,4(sp)
    8420:	840f7704 	addi	r16,r16,15836
    8424:	2023883a 	mov	r17,r4
    8428:	2809883a 	mov	r4,r5
    842c:	dfc00215 	stw	ra,8(sp)
    8430:	80000015 	stw	zero,0(r16)
    8434:	0017d300 	call	17d30 <sbrk>
    8438:	00ffffc4 	movi	r3,-1
    843c:	10c00526 	beq	r2,r3,8454 <_sbrk_r+0x44>
    8440:	dfc00217 	ldw	ra,8(sp)
    8444:	dc400117 	ldw	r17,4(sp)
    8448:	dc000017 	ldw	r16,0(sp)
    844c:	dec00304 	addi	sp,sp,12
    8450:	f800283a 	ret
    8454:	80c00017 	ldw	r3,0(r16)
    8458:	183ff926 	beq	r3,zero,8440 <__alt_mem_descriptor_memory+0xdefc8440>
    845c:	88c00015 	stw	r3,0(r17)
    8460:	003ff706 	br	8440 <__alt_mem_descriptor_memory+0xdefc8440>

00008464 <_sprintf_r>:
    8464:	deffe404 	addi	sp,sp,-112
    8468:	2807883a 	mov	r3,r5
    846c:	dfc01a15 	stw	ra,104(sp)
    8470:	d9c01b15 	stw	r7,108(sp)
    8474:	00a00034 	movhi	r2,32768
    8478:	10bfffc4 	addi	r2,r2,-1
    847c:	02008204 	movi	r8,520
    8480:	d8800215 	stw	r2,8(sp)
    8484:	d8800515 	stw	r2,20(sp)
    8488:	d80b883a 	mov	r5,sp
    848c:	d9c01b04 	addi	r7,sp,108
    8490:	00bfffc4 	movi	r2,-1
    8494:	d8c00015 	stw	r3,0(sp)
    8498:	d8c00415 	stw	r3,16(sp)
    849c:	da00030d 	sth	r8,12(sp)
    84a0:	d880038d 	sth	r2,14(sp)
    84a4:	0008da00 	call	8da0 <___svfprintf_internal_r>
    84a8:	d8c00017 	ldw	r3,0(sp)
    84ac:	18000005 	stb	zero,0(r3)
    84b0:	dfc01a17 	ldw	ra,104(sp)
    84b4:	dec01c04 	addi	sp,sp,112
    84b8:	f800283a 	ret

000084bc <sprintf>:
    84bc:	deffe304 	addi	sp,sp,-116
    84c0:	2007883a 	mov	r3,r4
    84c4:	dfc01a15 	stw	ra,104(sp)
    84c8:	d9801b15 	stw	r6,108(sp)
    84cc:	d9c01c15 	stw	r7,112(sp)
    84d0:	01000174 	movhi	r4,5
    84d4:	21072d04 	addi	r4,r4,7348
    84d8:	21000017 	ldw	r4,0(r4)
    84dc:	00a00034 	movhi	r2,32768
    84e0:	10bfffc4 	addi	r2,r2,-1
    84e4:	280d883a 	mov	r6,r5
    84e8:	02008204 	movi	r8,520
    84ec:	d8800215 	stw	r2,8(sp)
    84f0:	d8800515 	stw	r2,20(sp)
    84f4:	d80b883a 	mov	r5,sp
    84f8:	d9c01b04 	addi	r7,sp,108
    84fc:	00bfffc4 	movi	r2,-1
    8500:	d8c00015 	stw	r3,0(sp)
    8504:	d8c00415 	stw	r3,16(sp)
    8508:	da00030d 	sth	r8,12(sp)
    850c:	d880038d 	sth	r2,14(sp)
    8510:	0008da00 	call	8da0 <___svfprintf_internal_r>
    8514:	d8c00017 	ldw	r3,0(sp)
    8518:	18000005 	stb	zero,0(r3)
    851c:	dfc01a17 	ldw	ra,104(sp)
    8520:	dec01d04 	addi	sp,sp,116
    8524:	f800283a 	ret

00008528 <strchr>:
    8528:	2ac03fcc 	andi	r11,r5,255
    852c:	2815883a 	mov	r10,r5
    8530:	208000cc 	andi	r2,r4,3
    8534:	58003726 	beq	r11,zero,8614 <strchr+0xec>
    8538:	10000b26 	beq	r2,zero,8568 <strchr+0x40>
    853c:	20800003 	ldbu	r2,0(r4)
    8540:	10003226 	beq	r2,zero,860c <strchr+0xe4>
    8544:	28c03fcc 	andi	r3,r5,255
    8548:	5880041e 	bne	r11,r2,855c <strchr+0x34>
    854c:	00004d06 	br	8684 <strchr+0x15c>
    8550:	20800003 	ldbu	r2,0(r4)
    8554:	10002d26 	beq	r2,zero,860c <strchr+0xe4>
    8558:	18804a26 	beq	r3,r2,8684 <strchr+0x15c>
    855c:	21000044 	addi	r4,r4,1
    8560:	208000cc 	andi	r2,r4,3
    8564:	103ffa1e 	bne	r2,zero,8550 <__alt_mem_descriptor_memory+0xdefc8550>
    8568:	29403fcc 	andi	r5,r5,255
    856c:	280e923a 	slli	r7,r5,8
    8570:	20800017 	ldw	r2,0(r4)
    8574:	01bfbff4 	movhi	r6,65279
    8578:	394ab03a 	or	r5,r7,r5
    857c:	280e943a 	slli	r7,r5,16
    8580:	31bfbfc4 	addi	r6,r6,-257
    8584:	0090303a 	nor	r8,zero,r2
    8588:	394eb03a 	or	r7,r7,r5
    858c:	1187883a 	add	r3,r2,r6
    8590:	11c4f03a 	xor	r2,r2,r7
    8594:	008a303a 	nor	r5,zero,r2
    8598:	1185883a 	add	r2,r2,r6
    859c:	03202074 	movhi	r12,32897
    85a0:	2884703a 	and	r2,r5,r2
    85a4:	40c6703a 	and	r3,r8,r3
    85a8:	63202004 	addi	r12,r12,-32640
    85ac:	10c4b03a 	or	r2,r2,r3
    85b0:	1304703a 	and	r2,r2,r12
    85b4:	10000c1e 	bne	r2,zero,85e8 <strchr+0xc0>
    85b8:	21000104 	addi	r4,r4,4
    85bc:	20800017 	ldw	r2,0(r4)
    85c0:	3886f03a 	xor	r3,r7,r2
    85c4:	00d2303a 	nor	r9,zero,r3
    85c8:	198b883a 	add	r5,r3,r6
    85cc:	0090303a 	nor	r8,zero,r2
    85d0:	1187883a 	add	r3,r2,r6
    85d4:	494a703a 	and	r5,r9,r5
    85d8:	40c4703a 	and	r2,r8,r3
    85dc:	2884b03a 	or	r2,r5,r2
    85e0:	1304703a 	and	r2,r2,r12
    85e4:	103ff426 	beq	r2,zero,85b8 <__alt_mem_descriptor_memory+0xdefc85b8>
    85e8:	20800003 	ldbu	r2,0(r4)
    85ec:	10000726 	beq	r2,zero,860c <strchr+0xe4>
    85f0:	58802426 	beq	r11,r2,8684 <strchr+0x15c>
    85f4:	50c03fcc 	andi	r3,r10,255
    85f8:	00000106 	br	8600 <strchr+0xd8>
    85fc:	18802126 	beq	r3,r2,8684 <strchr+0x15c>
    8600:	21000044 	addi	r4,r4,1
    8604:	20800003 	ldbu	r2,0(r4)
    8608:	103ffc1e 	bne	r2,zero,85fc <__alt_mem_descriptor_memory+0xdefc85fc>
    860c:	0005883a 	mov	r2,zero
    8610:	f800283a 	ret
    8614:	10000526 	beq	r2,zero,862c <strchr+0x104>
    8618:	20800003 	ldbu	r2,0(r4)
    861c:	10001926 	beq	r2,zero,8684 <strchr+0x15c>
    8620:	21000044 	addi	r4,r4,1
    8624:	208000cc 	andi	r2,r4,3
    8628:	103ffb1e 	bne	r2,zero,8618 <__alt_mem_descriptor_memory+0xdefc8618>
    862c:	20800017 	ldw	r2,0(r4)
    8630:	01bfbff4 	movhi	r6,65279
    8634:	31bfbfc4 	addi	r6,r6,-257
    8638:	0086303a 	nor	r3,zero,r2
    863c:	01602074 	movhi	r5,32897
    8640:	1185883a 	add	r2,r2,r6
    8644:	29602004 	addi	r5,r5,-32640
    8648:	10c4703a 	and	r2,r2,r3
    864c:	1144703a 	and	r2,r2,r5
    8650:	10000a1e 	bne	r2,zero,867c <strchr+0x154>
    8654:	21000104 	addi	r4,r4,4
    8658:	20800017 	ldw	r2,0(r4)
    865c:	1187883a 	add	r3,r2,r6
    8660:	0084303a 	nor	r2,zero,r2
    8664:	1884703a 	and	r2,r3,r2
    8668:	1144703a 	and	r2,r2,r5
    866c:	103ff926 	beq	r2,zero,8654 <__alt_mem_descriptor_memory+0xdefc8654>
    8670:	20800003 	ldbu	r2,0(r4)
    8674:	10000326 	beq	r2,zero,8684 <strchr+0x15c>
    8678:	21000044 	addi	r4,r4,1
    867c:	20800003 	ldbu	r2,0(r4)
    8680:	103ffd1e 	bne	r2,zero,8678 <__alt_mem_descriptor_memory+0xdefc8678>
    8684:	2005883a 	mov	r2,r4
    8688:	f800283a 	ret

0000868c <strcpy>:
    868c:	2906b03a 	or	r3,r5,r4
    8690:	18c000cc 	andi	r3,r3,3
    8694:	2005883a 	mov	r2,r4
    8698:	1800161e 	bne	r3,zero,86f4 <strcpy+0x68>
    869c:	29c00017 	ldw	r7,0(r5)
    86a0:	02ffbff4 	movhi	r11,65279
    86a4:	5affbfc4 	addi	r11,r11,-257
    86a8:	02a02074 	movhi	r10,32897
    86ac:	01c8303a 	nor	r4,zero,r7
    86b0:	3ac7883a 	add	r3,r7,r11
    86b4:	52a02004 	addi	r10,r10,-32640
    86b8:	20c6703a 	and	r3,r4,r3
    86bc:	1a86703a 	and	r3,r3,r10
    86c0:	18000c1e 	bne	r3,zero,86f4 <strcpy+0x68>
    86c4:	1011883a 	mov	r8,r2
    86c8:	41c00015 	stw	r7,0(r8)
    86cc:	29400104 	addi	r5,r5,4
    86d0:	29c00017 	ldw	r7,0(r5)
    86d4:	41800104 	addi	r6,r8,4
    86d8:	3011883a 	mov	r8,r6
    86dc:	01d2303a 	nor	r9,zero,r7
    86e0:	3ac7883a 	add	r3,r7,r11
    86e4:	48c6703a 	and	r3,r9,r3
    86e8:	1a86703a 	and	r3,r3,r10
    86ec:	183ff626 	beq	r3,zero,86c8 <__alt_mem_descriptor_memory+0xdefc86c8>
    86f0:	00000106 	br	86f8 <strcpy+0x6c>
    86f4:	100d883a 	mov	r6,r2
    86f8:	28c00003 	ldbu	r3,0(r5)
    86fc:	31800044 	addi	r6,r6,1
    8700:	29400044 	addi	r5,r5,1
    8704:	30ffffc5 	stb	r3,-1(r6)
    8708:	18c03fcc 	andi	r3,r3,255
    870c:	18c0201c 	xori	r3,r3,128
    8710:	18ffe004 	addi	r3,r3,-128
    8714:	183ff81e 	bne	r3,zero,86f8 <__alt_mem_descriptor_memory+0xdefc86f8>
    8718:	f800283a 	ret

0000871c <strerror>:
    871c:	deffff04 	addi	sp,sp,-4
    8720:	dfc00015 	stw	ra,0(sp)
    8724:	00802384 	movi	r2,142
    8728:	11017236 	bltu	r2,r4,8cf4 <strerror+0x5d8>
    872c:	200690ba 	slli	r3,r4,2
    8730:	00800074 	movhi	r2,1
    8734:	10a1d104 	addi	r2,r2,-30908
    8738:	1885883a 	add	r2,r3,r2
    873c:	10800017 	ldw	r2,0(r2)
    8740:	1000683a 	jmp	r2
    8744:	00008cf4 	movhi	zero,563
    8748:	00008980 	call	898 <alt_uCOSIIErrorHandler+0x60c>
    874c:	00008ce8 	cmpgeui	zero,zero,563
    8750:	00008cdc 	xori	zero,zero,563
    8754:	00008cd0 	cmplti	zero,zero,563
    8758:	00008cc4 	movi	zero,563
    875c:	00008cb8 	rdprs	zero,zero,562
    8760:	00008cac 	andhi	zero,zero,562
    8764:	00008ca0 	cmpeqi	zero,zero,562
    8768:	00008c94 	movui	zero,562
    876c:	00008c88 	cmpgei	zero,zero,562
    8770:	00008c7c 	xorhi	zero,zero,561
    8774:	00008c70 	cmpltui	zero,zero,561
    8778:	00008c64 	muli	zero,zero,561
    877c:	00008c58 	cmpnei	zero,zero,561
    8780:	00008cf4 	movhi	zero,563
    8784:	00008c4c 	andi	zero,zero,561
    8788:	00008c40 	call	8c4 <alt_uCOSIIErrorHandler+0x638>
    878c:	00008c34 	movhi	zero,560
    8790:	00008c28 	cmpgeui	zero,zero,560
    8794:	00008c1c 	xori	zero,zero,560
    8798:	00008c10 	cmplti	zero,zero,560
    879c:	00008c04 	movi	zero,560
    87a0:	00008bf8 	rdprs	zero,zero,559
    87a4:	00008bec 	andhi	zero,zero,559
    87a8:	00008be0 	cmpeqi	zero,zero,559
    87ac:	00008bd4 	movui	zero,559
    87b0:	00008bc8 	cmpgei	zero,zero,559
    87b4:	00008bbc 	xorhi	zero,zero,558
    87b8:	00008bb0 	cmpltui	zero,zero,558
    87bc:	00008ba4 	muli	zero,zero,558
    87c0:	00008b98 	cmpnei	zero,zero,558
    87c4:	00008b8c 	andi	zero,zero,558
    87c8:	00008b80 	call	8b8 <alt_uCOSIIErrorHandler+0x62c>
    87cc:	00008b74 	movhi	zero,557
    87d0:	00008b68 	cmpgeui	zero,zero,557
    87d4:	00008b5c 	xori	zero,zero,557
    87d8:	00008cf4 	movhi	zero,563
    87dc:	00008cf4 	movhi	zero,563
    87e0:	00008cf4 	movhi	zero,563
    87e4:	00008cf4 	movhi	zero,563
    87e8:	00008cf4 	movhi	zero,563
    87ec:	00008cf4 	movhi	zero,563
    87f0:	00008cf4 	movhi	zero,563
    87f4:	00008cf4 	movhi	zero,563
    87f8:	00008b50 	cmplti	zero,zero,557
    87fc:	00008b44 	movi	zero,557
    8800:	00008cf4 	movhi	zero,563
    8804:	00008cf4 	movhi	zero,563
    8808:	00008cf4 	movhi	zero,563
    880c:	00008cf4 	movhi	zero,563
    8810:	00008cf4 	movhi	zero,563
    8814:	00008cf4 	movhi	zero,563
    8818:	00008cf4 	movhi	zero,563
    881c:	00008cf4 	movhi	zero,563
    8820:	00008cf4 	movhi	zero,563
    8824:	00008cf4 	movhi	zero,563
    8828:	00008cf4 	movhi	zero,563
    882c:	00008cf4 	movhi	zero,563
    8830:	00008cf4 	movhi	zero,563
    8834:	00008b38 	rdprs	zero,zero,556
    8838:	00008cf4 	movhi	zero,563
    883c:	00008b2c 	andhi	zero,zero,556
    8840:	00008b20 	cmpeqi	zero,zero,556
    8844:	00008cf4 	movhi	zero,563
    8848:	00008cf4 	movhi	zero,563
    884c:	00008cf4 	movhi	zero,563
    8850:	00008b14 	movui	zero,556
    8854:	00008cf4 	movhi	zero,563
    8858:	00008cf4 	movhi	zero,563
    885c:	00008cf4 	movhi	zero,563
    8860:	00008b08 	cmpgei	zero,zero,556
    8864:	00008cf4 	movhi	zero,563
    8868:	00008cf4 	movhi	zero,563
    886c:	00008afc 	xorhi	zero,zero,555
    8870:	00008cf4 	movhi	zero,563
    8874:	00008cf4 	movhi	zero,563
    8878:	00008af0 	cmpltui	zero,zero,555
    887c:	00008cf4 	movhi	zero,563
    8880:	00008cf4 	movhi	zero,563
    8884:	00008cf4 	movhi	zero,563
    8888:	00008cf4 	movhi	zero,563
    888c:	00008cf4 	movhi	zero,563
    8890:	00008cf4 	movhi	zero,563
    8894:	00008cf4 	movhi	zero,563
    8898:	00008cf4 	movhi	zero,563
    889c:	00008cf4 	movhi	zero,563
    88a0:	00008cf4 	movhi	zero,563
    88a4:	00008ae4 	muli	zero,zero,555
    88a8:	00008cf4 	movhi	zero,563
    88ac:	00008ad8 	cmpnei	zero,zero,555
    88b0:	00008acc 	andi	zero,zero,555
    88b4:	00008ac0 	call	8ac <alt_uCOSIIErrorHandler+0x620>
    88b8:	00008cf4 	movhi	zero,563
    88bc:	00008cf4 	movhi	zero,563
    88c0:	00008ab4 	movhi	zero,554
    88c4:	00008cf4 	movhi	zero,563
    88c8:	00008cf4 	movhi	zero,563
    88cc:	00008cf4 	movhi	zero,563
    88d0:	00008cf4 	movhi	zero,563
    88d4:	00008cf4 	movhi	zero,563
    88d8:	00008cf4 	movhi	zero,563
    88dc:	00008cf4 	movhi	zero,563
    88e0:	00008cf4 	movhi	zero,563
    88e4:	00008cf4 	movhi	zero,563
    88e8:	00008aa8 	cmpgeui	zero,zero,554
    88ec:	00008a9c 	xori	zero,zero,554
    88f0:	00008a90 	cmplti	zero,zero,554
    88f4:	00008a84 	movi	zero,554
    88f8:	00008a78 	rdprs	zero,zero,553
    88fc:	00008cf4 	movhi	zero,563
    8900:	00008a6c 	andhi	zero,zero,553
    8904:	00008a60 	cmpeqi	zero,zero,553
    8908:	00008a54 	movui	zero,553
    890c:	00008a48 	cmpgei	zero,zero,553
    8910:	00008a3c 	xorhi	zero,zero,552
    8914:	00008a30 	cmpltui	zero,zero,552
    8918:	00008a24 	muli	zero,zero,552
    891c:	00008a18 	cmpnei	zero,zero,552
    8920:	00008a0c 	andi	zero,zero,552
    8924:	00008a00 	call	8a0 <alt_uCOSIIErrorHandler+0x614>
    8928:	000089f4 	movhi	zero,551
    892c:	000089e8 	cmpgeui	zero,zero,551
    8930:	000089dc 	xori	zero,zero,551
    8934:	00008cf4 	movhi	zero,563
    8938:	00008cf4 	movhi	zero,563
    893c:	00008cf4 	movhi	zero,563
    8940:	000089d0 	cmplti	zero,zero,551
    8944:	000089c4 	movi	zero,551
    8948:	00008cf4 	movhi	zero,563
    894c:	00008cf4 	movhi	zero,563
    8950:	00008cf4 	movhi	zero,563
    8954:	00008cf4 	movhi	zero,563
    8958:	00008cf4 	movhi	zero,563
    895c:	000089b8 	rdprs	zero,zero,550
    8960:	00008cf4 	movhi	zero,563
    8964:	00008cf4 	movhi	zero,563
    8968:	00008cf4 	movhi	zero,563
    896c:	00008cf4 	movhi	zero,563
    8970:	00008cf4 	movhi	zero,563
    8974:	000089ac 	andhi	zero,zero,550
    8978:	000089a0 	cmpeqi	zero,zero,550
    897c:	00008994 	movui	zero,550
    8980:	00800174 	movhi	r2,5
    8984:	10b40804 	addi	r2,r2,-12256
    8988:	dfc00017 	ldw	ra,0(sp)
    898c:	dec00104 	addi	sp,sp,4
    8990:	f800283a 	ret
    8994:	00800174 	movhi	r2,5
    8998:	10b57b04 	addi	r2,r2,-10772
    899c:	003ffa06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89a0:	00800174 	movhi	r2,5
    89a4:	10b57504 	addi	r2,r2,-10796
    89a8:	003ff706 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89ac:	00800174 	movhi	r2,5
    89b0:	10b57004 	addi	r2,r2,-10816
    89b4:	003ff406 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89b8:	00800174 	movhi	r2,5
    89bc:	10b4b204 	addi	r2,r2,-11576
    89c0:	003ff106 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89c4:	00800174 	movhi	r2,5
    89c8:	10b56304 	addi	r2,r2,-10868
    89cc:	003fee06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89d0:	00800174 	movhi	r2,5
    89d4:	10b56904 	addi	r2,r2,-10844
    89d8:	003feb06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89dc:	00800174 	movhi	r2,5
    89e0:	10b50004 	addi	r2,r2,-11264
    89e4:	003fe806 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89e8:	00800174 	movhi	r2,5
    89ec:	10b58904 	addi	r2,r2,-10716
    89f0:	003fe506 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    89f4:	00800174 	movhi	r2,5
    89f8:	10b43e04 	addi	r2,r2,-12040
    89fc:	003fe206 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a00:	00800174 	movhi	r2,5
    8a04:	10b43004 	addi	r2,r2,-12096
    8a08:	003fdf06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a0c:	00800174 	movhi	r2,5
    8a10:	10b47204 	addi	r2,r2,-11832
    8a14:	003fdc06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a18:	00800174 	movhi	r2,5
    8a1c:	10b4a704 	addi	r2,r2,-11620
    8a20:	003fd906 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a24:	00800174 	movhi	r2,5
    8a28:	10b46e04 	addi	r2,r2,-11848
    8a2c:	003fd606 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a30:	00800174 	movhi	r2,5
    8a34:	10b58e04 	addi	r2,r2,-10696
    8a38:	003fd306 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a3c:	00800174 	movhi	r2,5
    8a40:	10b48304 	addi	r2,r2,-11764
    8a44:	003fd006 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a48:	00800174 	movhi	r2,5
    8a4c:	10b4df04 	addi	r2,r2,-11396
    8a50:	003fcd06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a54:	00800174 	movhi	r2,5
    8a58:	10b55a04 	addi	r2,r2,-10904
    8a5c:	003fca06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a60:	00800174 	movhi	r2,5
    8a64:	10b55404 	addi	r2,r2,-10928
    8a68:	003fc706 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a6c:	00800174 	movhi	r2,5
    8a70:	10b54f04 	addi	r2,r2,-10948
    8a74:	003fc406 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a78:	00800174 	movhi	r2,5
    8a7c:	10b54904 	addi	r2,r2,-10972
    8a80:	003fc106 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a84:	00800174 	movhi	r2,5
    8a88:	10b54104 	addi	r2,r2,-11004
    8a8c:	003fbe06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a90:	00800174 	movhi	r2,5
    8a94:	10b53904 	addi	r2,r2,-11036
    8a98:	003fbb06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8a9c:	00800174 	movhi	r2,5
    8aa0:	10b52d04 	addi	r2,r2,-11084
    8aa4:	003fb806 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8aa8:	00800174 	movhi	r2,5
    8aac:	10b52604 	addi	r2,r2,-11112
    8ab0:	003fb506 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ab4:	00800174 	movhi	r2,5
    8ab8:	10b58004 	addi	r2,r2,-10752
    8abc:	003fb206 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ac0:	00800174 	movhi	r2,5
    8ac4:	10b52004 	addi	r2,r2,-11136
    8ac8:	003faf06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8acc:	00800174 	movhi	r2,5
    8ad0:	10b51904 	addi	r2,r2,-11164
    8ad4:	003fac06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ad8:	00800174 	movhi	r2,5
    8adc:	10b51404 	addi	r2,r2,-11184
    8ae0:	003fa906 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ae4:	00800174 	movhi	r2,5
    8ae8:	10b50d04 	addi	r2,r2,-11212
    8aec:	003fa606 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8af0:	00800174 	movhi	r2,5
    8af4:	10b50a04 	addi	r2,r2,-11224
    8af8:	003fa306 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8afc:	00800174 	movhi	r2,5
    8b00:	10b50504 	addi	r2,r2,-11244
    8b04:	003fa006 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b08:	00800174 	movhi	r2,5
    8b0c:	10b4fc04 	addi	r2,r2,-11280
    8b10:	003f9d06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b14:	00800174 	movhi	r2,5
    8b18:	10b4f604 	addi	r2,r2,-11304
    8b1c:	003f9a06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b20:	00800174 	movhi	r2,5
    8b24:	10b4f104 	addi	r2,r2,-11324
    8b28:	003f9706 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b2c:	00800174 	movhi	r2,5
    8b30:	10b4eb04 	addi	r2,r2,-11348
    8b34:	003f9406 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b38:	00800174 	movhi	r2,5
    8b3c:	10b4e704 	addi	r2,r2,-11364
    8b40:	003f9106 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b44:	00800174 	movhi	r2,5
    8b48:	10b4e504 	addi	r2,r2,-11372
    8b4c:	003f8e06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b50:	00800174 	movhi	r2,5
    8b54:	10b4dc04 	addi	r2,r2,-11408
    8b58:	003f8b06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b5c:	00800174 	movhi	r2,5
    8b60:	10b4d704 	addi	r2,r2,-11428
    8b64:	003f8806 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b68:	00800174 	movhi	r2,5
    8b6c:	10b4d004 	addi	r2,r2,-11456
    8b70:	003f8506 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b74:	00800174 	movhi	r2,5
    8b78:	10b4cb04 	addi	r2,r2,-11476
    8b7c:	003f8206 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b80:	00800174 	movhi	r2,5
    8b84:	10b4c704 	addi	r2,r2,-11492
    8b88:	003f7f06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b8c:	00800174 	movhi	r2,5
    8b90:	10b4c404 	addi	r2,r2,-11504
    8b94:	003f7c06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8b98:	00800174 	movhi	r2,5
    8b9c:	10b4c004 	addi	r2,r2,-11520
    8ba0:	003f7906 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ba4:	00800174 	movhi	r2,5
    8ba8:	10b4ba04 	addi	r2,r2,-11544
    8bac:	003f7606 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bb0:	00800174 	movhi	r2,5
    8bb4:	10b4b604 	addi	r2,r2,-11560
    8bb8:	003f7306 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bbc:	00800174 	movhi	r2,5
    8bc0:	10b4ac04 	addi	r2,r2,-11600
    8bc4:	003f7006 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bc8:	00800174 	movhi	r2,5
    8bcc:	10b4a304 	addi	r2,r2,-11636
    8bd0:	003f6d06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bd4:	00800174 	movhi	r2,5
    8bd8:	10b49f04 	addi	r2,r2,-11652
    8bdc:	003f6a06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8be0:	00800174 	movhi	r2,5
    8be4:	10b49904 	addi	r2,r2,-11676
    8be8:	003f6706 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bec:	00800174 	movhi	r2,5
    8bf0:	10b49404 	addi	r2,r2,-11696
    8bf4:	003f6406 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8bf8:	00800174 	movhi	r2,5
    8bfc:	10b48c04 	addi	r2,r2,-11728
    8c00:	003f6106 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c04:	00800174 	movhi	r2,5
    8c08:	10b47e04 	addi	r2,r2,-11784
    8c0c:	003f5e06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c10:	00800174 	movhi	r2,5
    8c14:	10b47a04 	addi	r2,r2,-11800
    8c18:	003f5b06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c1c:	00800174 	movhi	r2,5
    8c20:	10b46a04 	addi	r2,r2,-11864
    8c24:	003f5806 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c28:	00800174 	movhi	r2,5
    8c2c:	10b46604 	addi	r2,r2,-11880
    8c30:	003f5506 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c34:	00800174 	movhi	r2,5
    8c38:	10b46104 	addi	r2,r2,-11900
    8c3c:	003f5206 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c40:	00800174 	movhi	r2,5
    8c44:	10b45e04 	addi	r2,r2,-11912
    8c48:	003f4f06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c4c:	00800174 	movhi	r2,5
    8c50:	10b45804 	addi	r2,r2,-11936
    8c54:	003f4c06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c58:	00800174 	movhi	r2,5
    8c5c:	10b45504 	addi	r2,r2,-11948
    8c60:	003f4906 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c64:	00800174 	movhi	r2,5
    8c68:	10b45004 	addi	r2,r2,-11968
    8c6c:	003f4606 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c70:	00800174 	movhi	r2,5
    8c74:	10b44b04 	addi	r2,r2,-11988
    8c78:	003f4306 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c7c:	00800174 	movhi	r2,5
    8c80:	10b44604 	addi	r2,r2,-12008
    8c84:	003f4006 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c88:	00800174 	movhi	r2,5
    8c8c:	10b43b04 	addi	r2,r2,-12052
    8c90:	003f3d06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8c94:	00800174 	movhi	r2,5
    8c98:	10b43704 	addi	r2,r2,-12068
    8c9c:	003f3a06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ca0:	00800174 	movhi	r2,5
    8ca4:	10b42b04 	addi	r2,r2,-12116
    8ca8:	003f3706 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cac:	00800174 	movhi	r2,5
    8cb0:	10b42604 	addi	r2,r2,-12136
    8cb4:	003f3406 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cb8:	00800174 	movhi	r2,5
    8cbc:	10b41f04 	addi	r2,r2,-12164
    8cc0:	003f3106 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cc4:	00800174 	movhi	r2,5
    8cc8:	10b41c04 	addi	r2,r2,-12176
    8ccc:	003f2e06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cd0:	00800174 	movhi	r2,5
    8cd4:	10b41604 	addi	r2,r2,-12200
    8cd8:	003f2b06 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cdc:	00800174 	movhi	r2,5
    8ce0:	10b41204 	addi	r2,r2,-12216
    8ce4:	003f2806 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8ce8:	00800174 	movhi	r2,5
    8cec:	10b40b04 	addi	r2,r2,-12244
    8cf0:	003f2506 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cf4:	000ad300 	call	ad30 <_user_strerror>
    8cf8:	103f231e 	bne	r2,zero,8988 <__alt_mem_descriptor_memory+0xdefc8988>
    8cfc:	00800174 	movhi	r2,5
    8d00:	10b59c04 	addi	r2,r2,-10640
    8d04:	003f2006 	br	8988 <__alt_mem_descriptor_memory+0xdefc8988>

00008d08 <strlen>:
    8d08:	208000cc 	andi	r2,r4,3
    8d0c:	10002026 	beq	r2,zero,8d90 <strlen+0x88>
    8d10:	20800007 	ldb	r2,0(r4)
    8d14:	10002026 	beq	r2,zero,8d98 <strlen+0x90>
    8d18:	2005883a 	mov	r2,r4
    8d1c:	00000206 	br	8d28 <strlen+0x20>
    8d20:	10c00007 	ldb	r3,0(r2)
    8d24:	18001826 	beq	r3,zero,8d88 <strlen+0x80>
    8d28:	10800044 	addi	r2,r2,1
    8d2c:	10c000cc 	andi	r3,r2,3
    8d30:	183ffb1e 	bne	r3,zero,8d20 <__alt_mem_descriptor_memory+0xdefc8d20>
    8d34:	10c00017 	ldw	r3,0(r2)
    8d38:	01ffbff4 	movhi	r7,65279
    8d3c:	39ffbfc4 	addi	r7,r7,-257
    8d40:	00ca303a 	nor	r5,zero,r3
    8d44:	01a02074 	movhi	r6,32897
    8d48:	19c7883a 	add	r3,r3,r7
    8d4c:	31a02004 	addi	r6,r6,-32640
    8d50:	1946703a 	and	r3,r3,r5
    8d54:	1986703a 	and	r3,r3,r6
    8d58:	1800091e 	bne	r3,zero,8d80 <strlen+0x78>
    8d5c:	10800104 	addi	r2,r2,4
    8d60:	10c00017 	ldw	r3,0(r2)
    8d64:	19cb883a 	add	r5,r3,r7
    8d68:	00c6303a 	nor	r3,zero,r3
    8d6c:	28c6703a 	and	r3,r5,r3
    8d70:	1986703a 	and	r3,r3,r6
    8d74:	183ff926 	beq	r3,zero,8d5c <__alt_mem_descriptor_memory+0xdefc8d5c>
    8d78:	00000106 	br	8d80 <strlen+0x78>
    8d7c:	10800044 	addi	r2,r2,1
    8d80:	10c00007 	ldb	r3,0(r2)
    8d84:	183ffd1e 	bne	r3,zero,8d7c <__alt_mem_descriptor_memory+0xdefc8d7c>
    8d88:	1105c83a 	sub	r2,r2,r4
    8d8c:	f800283a 	ret
    8d90:	2005883a 	mov	r2,r4
    8d94:	003fe706 	br	8d34 <__alt_mem_descriptor_memory+0xdefc8d34>
    8d98:	0005883a 	mov	r2,zero
    8d9c:	f800283a 	ret

00008da0 <___svfprintf_internal_r>:
    8da0:	deffb504 	addi	sp,sp,-300
    8da4:	dfc04a15 	stw	ra,296(sp)
    8da8:	ddc04815 	stw	r23,288(sp)
    8dac:	d9002f15 	stw	r4,188(sp)
    8db0:	282f883a 	mov	r23,r5
    8db4:	d9802915 	stw	r6,164(sp)
    8db8:	d9c02d15 	stw	r7,180(sp)
    8dbc:	df004915 	stw	fp,292(sp)
    8dc0:	dd804715 	stw	r22,284(sp)
    8dc4:	dd404615 	stw	r21,280(sp)
    8dc8:	dd004515 	stw	r20,276(sp)
    8dcc:	dcc04415 	stw	r19,272(sp)
    8dd0:	dc804315 	stw	r18,268(sp)
    8dd4:	dc404215 	stw	r17,264(sp)
    8dd8:	dc004115 	stw	r16,260(sp)
    8ddc:	000fb400 	call	fb40 <_localeconv_r>
    8de0:	10800017 	ldw	r2,0(r2)
    8de4:	1009883a 	mov	r4,r2
    8de8:	d8803515 	stw	r2,212(sp)
    8dec:	0008d080 	call	8d08 <strlen>
    8df0:	d8803915 	stw	r2,228(sp)
    8df4:	b880030b 	ldhu	r2,12(r23)
    8df8:	1080200c 	andi	r2,r2,128
    8dfc:	10000226 	beq	r2,zero,8e08 <___svfprintf_internal_r+0x68>
    8e00:	b8800417 	ldw	r2,16(r23)
    8e04:	10065d26 	beq	r2,zero,a77c <___svfprintf_internal_r+0x19dc>
    8e08:	db001dc4 	addi	r12,sp,119
    8e0c:	dd801e04 	addi	r22,sp,120
    8e10:	d8800404 	addi	r2,sp,16
    8e14:	05000174 	movhi	r20,5
    8e18:	b317c83a 	sub	r11,r22,r12
    8e1c:	a535a484 	addi	r20,r20,-10606
    8e20:	db002815 	stw	r12,160(sp)
    8e24:	d8801e15 	stw	r2,120(sp)
    8e28:	d8002015 	stw	zero,128(sp)
    8e2c:	d8001f15 	stw	zero,124(sp)
    8e30:	d8003315 	stw	zero,204(sp)
    8e34:	d8003715 	stw	zero,220(sp)
    8e38:	d8003815 	stw	zero,224(sp)
    8e3c:	d8003b15 	stw	zero,236(sp)
    8e40:	d8003a15 	stw	zero,232(sp)
    8e44:	d8003015 	stw	zero,192(sp)
    8e48:	1011883a 	mov	r8,r2
    8e4c:	dac03d15 	stw	r11,244(sp)
    8e50:	db002917 	ldw	r12,164(sp)
    8e54:	60800007 	ldb	r2,0(r12)
    8e58:	1000ab26 	beq	r2,zero,9108 <___svfprintf_internal_r+0x368>
    8e5c:	00c00944 	movi	r3,37
    8e60:	10c0a926 	beq	r2,r3,9108 <___svfprintf_internal_r+0x368>
    8e64:	6021883a 	mov	r16,r12
    8e68:	00000106 	br	8e70 <___svfprintf_internal_r+0xd0>
    8e6c:	10c08426 	beq	r2,r3,9080 <___svfprintf_internal_r+0x2e0>
    8e70:	84000044 	addi	r16,r16,1
    8e74:	80800007 	ldb	r2,0(r16)
    8e78:	103ffc1e 	bne	r2,zero,8e6c <__alt_mem_descriptor_memory+0xdefc8e6c>
    8e7c:	dac02917 	ldw	r11,164(sp)
    8e80:	82e3c83a 	sub	r17,r16,r11
    8e84:	88000f26 	beq	r17,zero,8ec4 <___svfprintf_internal_r+0x124>
    8e88:	d8c02017 	ldw	r3,128(sp)
    8e8c:	d8801f17 	ldw	r2,124(sp)
    8e90:	dac02917 	ldw	r11,164(sp)
    8e94:	1c47883a 	add	r3,r3,r17
    8e98:	10800044 	addi	r2,r2,1
    8e9c:	d8c02015 	stw	r3,128(sp)
    8ea0:	42c00015 	stw	r11,0(r8)
    8ea4:	44400115 	stw	r17,4(r8)
    8ea8:	d8801f15 	stw	r2,124(sp)
    8eac:	00c001c4 	movi	r3,7
    8eb0:	18807616 	blt	r3,r2,908c <___svfprintf_internal_r+0x2ec>
    8eb4:	42000204 	addi	r8,r8,8
    8eb8:	db003017 	ldw	r12,192(sp)
    8ebc:	6459883a 	add	r12,r12,r17
    8ec0:	db003015 	stw	r12,192(sp)
    8ec4:	80800007 	ldb	r2,0(r16)
    8ec8:	10007726 	beq	r2,zero,90a8 <___svfprintf_internal_r+0x308>
    8ecc:	80800044 	addi	r2,r16,1
    8ed0:	84000047 	ldb	r16,1(r16)
    8ed4:	d8002785 	stb	zero,158(sp)
    8ed8:	000d883a 	mov	r6,zero
    8edc:	027fffc4 	movi	r9,-1
    8ee0:	d8002e15 	stw	zero,184(sp)
    8ee4:	0023883a 	mov	r17,zero
    8ee8:	01001604 	movi	r4,88
    8eec:	01400244 	movi	r5,9
    8ef0:	02800a84 	movi	r10,42
    8ef4:	01c01b04 	movi	r7,108
    8ef8:	10c00044 	addi	r3,r2,1
    8efc:	80bff804 	addi	r2,r16,-32
    8f00:	2082e436 	bltu	r4,r2,9a94 <___svfprintf_internal_r+0xcf4>
    8f04:	100490ba 	slli	r2,r2,2
    8f08:	02c00074 	movhi	r11,1
    8f0c:	5ae3c704 	addi	r11,r11,-28900
    8f10:	12c5883a 	add	r2,r2,r11
    8f14:	10800017 	ldw	r2,0(r2)
    8f18:	1000683a 	jmp	r2
    8f1c:	0000984c 	andi	zero,zero,609
    8f20:	00009a94 	movui	zero,618
    8f24:	00009a94 	movui	zero,618
    8f28:	000099cc 	andi	zero,zero,615
    8f2c:	00009a94 	movui	zero,618
    8f30:	00009a94 	movui	zero,618
    8f34:	00009a94 	movui	zero,618
    8f38:	00009a94 	movui	zero,618
    8f3c:	00009a94 	movui	zero,618
    8f40:	00009a94 	movui	zero,618
    8f44:	00009990 	cmplti	zero,zero,614
    8f48:	000099bc 	xorhi	zero,zero,614
    8f4c:	00009a94 	movui	zero,618
    8f50:	00009110 	cmplti	zero,zero,580
    8f54:	00009120 	cmpeqi	zero,zero,580
    8f58:	00009a94 	movui	zero,618
    8f5c:	00009160 	cmpeqi	zero,zero,581
    8f60:	00009170 	cmpltui	zero,zero,581
    8f64:	00009170 	cmpltui	zero,zero,581
    8f68:	00009170 	cmpltui	zero,zero,581
    8f6c:	00009170 	cmpltui	zero,zero,581
    8f70:	00009170 	cmpltui	zero,zero,581
    8f74:	00009170 	cmpltui	zero,zero,581
    8f78:	00009170 	cmpltui	zero,zero,581
    8f7c:	00009170 	cmpltui	zero,zero,581
    8f80:	00009170 	cmpltui	zero,zero,581
    8f84:	00009a94 	movui	zero,618
    8f88:	00009a94 	movui	zero,618
    8f8c:	00009a94 	movui	zero,618
    8f90:	00009a94 	movui	zero,618
    8f94:	00009a94 	movui	zero,618
    8f98:	00009a94 	movui	zero,618
    8f9c:	00009a94 	movui	zero,618
    8fa0:	00009a94 	movui	zero,618
    8fa4:	00009a94 	movui	zero,618
    8fa8:	00009a94 	movui	zero,618
    8fac:	000091a4 	muli	zero,zero,582
    8fb0:	00009690 	cmplti	zero,zero,602
    8fb4:	00009a94 	movui	zero,618
    8fb8:	00009690 	cmplti	zero,zero,602
    8fbc:	00009a94 	movui	zero,618
    8fc0:	00009a94 	movui	zero,618
    8fc4:	00009a94 	movui	zero,618
    8fc8:	00009a94 	movui	zero,618
    8fcc:	0000977c 	xorhi	zero,zero,605
    8fd0:	00009a94 	movui	zero,618
    8fd4:	00009a94 	movui	zero,618
    8fd8:	00009624 	muli	zero,zero,600
    8fdc:	00009a94 	movui	zero,618
    8fe0:	00009a94 	movui	zero,618
    8fe4:	00009a94 	movui	zero,618
    8fe8:	00009a94 	movui	zero,618
    8fec:	00009a94 	movui	zero,618
    8ff0:	00009660 	cmpeqi	zero,zero,601
    8ff4:	00009a94 	movui	zero,618
    8ff8:	00009a94 	movui	zero,618
    8ffc:	0000986c 	andhi	zero,zero,609
    9000:	00009a94 	movui	zero,618
    9004:	00009a94 	movui	zero,618
    9008:	00009a94 	movui	zero,618
    900c:	00009a94 	movui	zero,618
    9010:	00009a94 	movui	zero,618
    9014:	00009a94 	movui	zero,618
    9018:	00009a94 	movui	zero,618
    901c:	00009a94 	movui	zero,618
    9020:	00009a94 	movui	zero,618
    9024:	00009a94 	movui	zero,618
    9028:	00009950 	cmplti	zero,zero,613
    902c:	0000978c 	andi	zero,zero,606
    9030:	00009690 	cmplti	zero,zero,602
    9034:	00009690 	cmplti	zero,zero,602
    9038:	00009690 	cmplti	zero,zero,602
    903c:	000097f4 	movhi	zero,607
    9040:	0000978c 	andi	zero,zero,606
    9044:	00009a94 	movui	zero,618
    9048:	00009a94 	movui	zero,618
    904c:	00009804 	movi	zero,608
    9050:	00009a94 	movui	zero,618
    9054:	00009818 	cmpnei	zero,zero,608
    9058:	00009a58 	cmpnei	zero,zero,617
    905c:	00009734 	movhi	zero,604
    9060:	00009940 	call	994 <alt_NetworkErrorHandler+0xc4>
    9064:	00009a94 	movui	zero,618
    9068:	000098c8 	cmpgei	zero,zero,611
    906c:	00009a94 	movui	zero,618
    9070:	00009a1c 	xori	zero,zero,616
    9074:	00009a94 	movui	zero,618
    9078:	00009a94 	movui	zero,618
    907c:	000099dc 	xori	zero,zero,615
    9080:	db002917 	ldw	r12,164(sp)
    9084:	8323c83a 	sub	r17,r16,r12
    9088:	003f7e06 	br	8e84 <__alt_mem_descriptor_memory+0xdefc8e84>
    908c:	d9002f17 	ldw	r4,188(sp)
    9090:	b80b883a 	mov	r5,r23
    9094:	b00d883a 	mov	r6,r22
    9098:	00117580 	call	11758 <__ssprint_r>
    909c:	1000081e 	bne	r2,zero,90c0 <___svfprintf_internal_r+0x320>
    90a0:	da000404 	addi	r8,sp,16
    90a4:	003f8406 	br	8eb8 <__alt_mem_descriptor_memory+0xdefc8eb8>
    90a8:	d8802017 	ldw	r2,128(sp)
    90ac:	10000426 	beq	r2,zero,90c0 <___svfprintf_internal_r+0x320>
    90b0:	d9002f17 	ldw	r4,188(sp)
    90b4:	b80b883a 	mov	r5,r23
    90b8:	d9801e04 	addi	r6,sp,120
    90bc:	00117580 	call	11758 <__ssprint_r>
    90c0:	b880030b 	ldhu	r2,12(r23)
    90c4:	1080100c 	andi	r2,r2,64
    90c8:	10000d1e 	bne	r2,zero,9100 <___svfprintf_internal_r+0x360>
    90cc:	d8803017 	ldw	r2,192(sp)
    90d0:	dfc04a17 	ldw	ra,296(sp)
    90d4:	df004917 	ldw	fp,292(sp)
    90d8:	ddc04817 	ldw	r23,288(sp)
    90dc:	dd804717 	ldw	r22,284(sp)
    90e0:	dd404617 	ldw	r21,280(sp)
    90e4:	dd004517 	ldw	r20,276(sp)
    90e8:	dcc04417 	ldw	r19,272(sp)
    90ec:	dc804317 	ldw	r18,268(sp)
    90f0:	dc404217 	ldw	r17,264(sp)
    90f4:	dc004117 	ldw	r16,260(sp)
    90f8:	dec04b04 	addi	sp,sp,300
    90fc:	f800283a 	ret
    9100:	00bfffc4 	movi	r2,-1
    9104:	003ff206 	br	90d0 <__alt_mem_descriptor_memory+0xdefc90d0>
    9108:	dc002917 	ldw	r16,164(sp)
    910c:	003f6d06 	br	8ec4 <__alt_mem_descriptor_memory+0xdefc8ec4>
    9110:	1805883a 	mov	r2,r3
    9114:	8c400114 	ori	r17,r17,4
    9118:	1c000007 	ldb	r16,0(r3)
    911c:	003f7606 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    9120:	1c000007 	ldb	r16,0(r3)
    9124:	18800044 	addi	r2,r3,1
    9128:	8286e726 	beq	r16,r10,acc8 <___svfprintf_internal_r+0x1f28>
    912c:	82fff404 	addi	r11,r16,-48
    9130:	1007883a 	mov	r3,r2
    9134:	0013883a 	mov	r9,zero
    9138:	2aff7036 	bltu	r5,r11,8efc <__alt_mem_descriptor_memory+0xdefc8efc>
    913c:	1c000007 	ldb	r16,0(r3)
    9140:	4a4002a4 	muli	r9,r9,10
    9144:	18c00044 	addi	r3,r3,1
    9148:	5a53883a 	add	r9,r11,r9
    914c:	82fff404 	addi	r11,r16,-48
    9150:	2afffa2e 	bgeu	r5,r11,913c <__alt_mem_descriptor_memory+0xdefc913c>
    9154:	483f690e 	bge	r9,zero,8efc <__alt_mem_descriptor_memory+0xdefc8efc>
    9158:	027fffc4 	movi	r9,-1
    915c:	003f6706 	br	8efc <__alt_mem_descriptor_memory+0xdefc8efc>
    9160:	8c402014 	ori	r17,r17,128
    9164:	1805883a 	mov	r2,r3
    9168:	1c000007 	ldb	r16,0(r3)
    916c:	003f6206 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    9170:	1805883a 	mov	r2,r3
    9174:	d8002e15 	stw	zero,184(sp)
    9178:	82fff404 	addi	r11,r16,-48
    917c:	0019883a 	mov	r12,zero
    9180:	14000007 	ldb	r16,0(r2)
    9184:	630002a4 	muli	r12,r12,10
    9188:	18c00044 	addi	r3,r3,1
    918c:	1805883a 	mov	r2,r3
    9190:	62d9883a 	add	r12,r12,r11
    9194:	82fff404 	addi	r11,r16,-48
    9198:	2afff92e 	bgeu	r5,r11,9180 <__alt_mem_descriptor_memory+0xdefc9180>
    919c:	db002e15 	stw	r12,184(sp)
    91a0:	003f5606 	br	8efc <__alt_mem_descriptor_memory+0xdefc8efc>
    91a4:	8c400414 	ori	r17,r17,16
    91a8:	d8c02915 	stw	r3,164(sp)
    91ac:	d9802785 	stb	r6,158(sp)
    91b0:	8880080c 	andi	r2,r17,32
    91b4:	d8c02d17 	ldw	r3,180(sp)
    91b8:	10017926 	beq	r2,zero,97a0 <___svfprintf_internal_r+0xa00>
    91bc:	db002d17 	ldw	r12,180(sp)
    91c0:	18800117 	ldw	r2,4(r3)
    91c4:	1cc00017 	ldw	r19,0(r3)
    91c8:	63000204 	addi	r12,r12,8
    91cc:	db002d15 	stw	r12,180(sp)
    91d0:	1039883a 	mov	fp,r2
    91d4:	10017d16 	blt	r2,zero,97cc <___svfprintf_internal_r+0xa2c>
    91d8:	dd402783 	ldbu	r21,158(sp)
    91dc:	da403215 	stw	r9,200(sp)
    91e0:	00800044 	movi	r2,1
    91e4:	9f06b03a 	or	r3,r19,fp
    91e8:	48000216 	blt	r9,zero,91f4 <___svfprintf_internal_r+0x454>
    91ec:	013fdfc4 	movi	r4,-129
    91f0:	8922703a 	and	r17,r17,r4
    91f4:	1802371e 	bne	r3,zero,9ad4 <___svfprintf_internal_r+0xd34>
    91f8:	48034526 	beq	r9,zero,9f10 <___svfprintf_internal_r+0x1170>
    91fc:	10803fcc 	andi	r2,r2,255
    9200:	00c00044 	movi	r3,1
    9204:	10c25826 	beq	r2,r3,9b68 <___svfprintf_internal_r+0xdc8>
    9208:	00c00084 	movi	r3,2
    920c:	10c2db26 	beq	r2,r3,9d7c <___svfprintf_internal_r+0xfdc>
    9210:	b007883a 	mov	r3,r22
    9214:	9808d0fa 	srli	r4,r19,3
    9218:	e00a977a 	slli	r5,fp,29
    921c:	e038d0fa 	srli	fp,fp,3
    9220:	9cc001cc 	andi	r19,r19,7
    9224:	98800c04 	addi	r2,r19,48
    9228:	18ffffc4 	addi	r3,r3,-1
    922c:	2926b03a 	or	r19,r5,r4
    9230:	18800005 	stb	r2,0(r3)
    9234:	9f08b03a 	or	r4,r19,fp
    9238:	203ff61e 	bne	r4,zero,9214 <__alt_mem_descriptor_memory+0xdefc9214>
    923c:	8900004c 	andi	r4,r17,1
    9240:	d8c03115 	stw	r3,196(sp)
    9244:	2002db26 	beq	r4,zero,9db4 <___svfprintf_internal_r+0x1014>
    9248:	10803fcc 	andi	r2,r2,255
    924c:	1080201c 	xori	r2,r2,128
    9250:	10bfe004 	addi	r2,r2,-128
    9254:	01000c04 	movi	r4,48
    9258:	11056626 	beq	r2,r4,a7f4 <___svfprintf_internal_r+0x1a54>
    925c:	dac03117 	ldw	r11,196(sp)
    9260:	193fffc5 	stb	r4,-1(r3)
    9264:	5affffc4 	addi	r11,r11,-1
    9268:	dac03115 	stw	r11,196(sp)
    926c:	b2e5c83a 	sub	r18,r22,r11
    9270:	9005883a 	mov	r2,r18
    9274:	9240010e 	bge	r18,r9,927c <___svfprintf_internal_r+0x4dc>
    9278:	4805883a 	mov	r2,r9
    927c:	d8802a15 	stw	r2,168(sp)
    9280:	d8003415 	stw	zero,208(sp)
    9284:	a8803fcc 	andi	r2,r21,255
    9288:	1080201c 	xori	r2,r2,128
    928c:	10bfe004 	addi	r2,r2,-128
    9290:	10000326 	beq	r2,zero,92a0 <___svfprintf_internal_r+0x500>
    9294:	d8c02a17 	ldw	r3,168(sp)
    9298:	18c00044 	addi	r3,r3,1
    929c:	d8c02a15 	stw	r3,168(sp)
    92a0:	8ac0008c 	andi	r11,r17,2
    92a4:	dac02b15 	stw	r11,172(sp)
    92a8:	58000326 	beq	r11,zero,92b8 <___svfprintf_internal_r+0x518>
    92ac:	db002a17 	ldw	r12,168(sp)
    92b0:	63000084 	addi	r12,r12,2
    92b4:	db002a15 	stw	r12,168(sp)
    92b8:	88c0210c 	andi	r3,r17,132
    92bc:	d8c02c15 	stw	r3,176(sp)
    92c0:	1802021e 	bne	r3,zero,9acc <___svfprintf_internal_r+0xd2c>
    92c4:	dac02e17 	ldw	r11,184(sp)
    92c8:	db002a17 	ldw	r12,168(sp)
    92cc:	5b39c83a 	sub	fp,r11,r12
    92d0:	0701fe0e 	bge	zero,fp,9acc <___svfprintf_internal_r+0xd2c>
    92d4:	02400404 	movi	r9,16
    92d8:	d8c02017 	ldw	r3,128(sp)
    92dc:	d8801f17 	ldw	r2,124(sp)
    92e0:	4f057d0e 	bge	r9,fp,a8d8 <___svfprintf_internal_r+0x1b38>
    92e4:	01400174 	movhi	r5,5
    92e8:	e009883a 	mov	r4,fp
    92ec:	2975a884 	addi	r5,r5,-10590
    92f0:	dc003c15 	stw	r16,240(sp)
    92f4:	9039883a 	mov	fp,r18
    92f8:	d9403615 	stw	r5,216(sp)
    92fc:	8825883a 	mov	r18,r17
    9300:	482b883a 	mov	r21,r9
    9304:	04c001c4 	movi	r19,7
    9308:	dc002f17 	ldw	r16,188(sp)
    930c:	2023883a 	mov	r17,r4
    9310:	00000306 	br	9320 <___svfprintf_internal_r+0x580>
    9314:	8c7ffc04 	addi	r17,r17,-16
    9318:	42000204 	addi	r8,r8,8
    931c:	ac40130e 	bge	r21,r17,936c <___svfprintf_internal_r+0x5cc>
    9320:	02c00174 	movhi	r11,5
    9324:	18c00404 	addi	r3,r3,16
    9328:	10800044 	addi	r2,r2,1
    932c:	5af5a884 	addi	r11,r11,-10590
    9330:	42c00015 	stw	r11,0(r8)
    9334:	45400115 	stw	r21,4(r8)
    9338:	d8c02015 	stw	r3,128(sp)
    933c:	d8801f15 	stw	r2,124(sp)
    9340:	98bff40e 	bge	r19,r2,9314 <__alt_mem_descriptor_memory+0xdefc9314>
    9344:	8009883a 	mov	r4,r16
    9348:	b80b883a 	mov	r5,r23
    934c:	b00d883a 	mov	r6,r22
    9350:	00117580 	call	11758 <__ssprint_r>
    9354:	103f5a1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9358:	8c7ffc04 	addi	r17,r17,-16
    935c:	d8c02017 	ldw	r3,128(sp)
    9360:	d8801f17 	ldw	r2,124(sp)
    9364:	da000404 	addi	r8,sp,16
    9368:	ac7fed16 	blt	r21,r17,9320 <__alt_mem_descriptor_memory+0xdefc9320>
    936c:	dc003c17 	ldw	r16,240(sp)
    9370:	8809883a 	mov	r4,r17
    9374:	9023883a 	mov	r17,r18
    9378:	e025883a 	mov	r18,fp
    937c:	2039883a 	mov	fp,r4
    9380:	db003617 	ldw	r12,216(sp)
    9384:	e0c7883a 	add	r3,fp,r3
    9388:	10800044 	addi	r2,r2,1
    938c:	43000015 	stw	r12,0(r8)
    9390:	47000115 	stw	fp,4(r8)
    9394:	d8c02015 	stw	r3,128(sp)
    9398:	d8801f15 	stw	r2,124(sp)
    939c:	010001c4 	movi	r4,7
    93a0:	20833516 	blt	r4,r2,a078 <___svfprintf_internal_r+0x12d8>
    93a4:	d8802787 	ldb	r2,158(sp)
    93a8:	42000204 	addi	r8,r8,8
    93ac:	10000c26 	beq	r2,zero,93e0 <___svfprintf_internal_r+0x640>
    93b0:	d8801f17 	ldw	r2,124(sp)
    93b4:	d9002784 	addi	r4,sp,158
    93b8:	18c00044 	addi	r3,r3,1
    93bc:	10800044 	addi	r2,r2,1
    93c0:	41000015 	stw	r4,0(r8)
    93c4:	01000044 	movi	r4,1
    93c8:	41000115 	stw	r4,4(r8)
    93cc:	d8c02015 	stw	r3,128(sp)
    93d0:	d8801f15 	stw	r2,124(sp)
    93d4:	010001c4 	movi	r4,7
    93d8:	2082df16 	blt	r4,r2,9f58 <___svfprintf_internal_r+0x11b8>
    93dc:	42000204 	addi	r8,r8,8
    93e0:	dac02b17 	ldw	r11,172(sp)
    93e4:	58000c26 	beq	r11,zero,9418 <___svfprintf_internal_r+0x678>
    93e8:	d8801f17 	ldw	r2,124(sp)
    93ec:	d9002704 	addi	r4,sp,156
    93f0:	18c00084 	addi	r3,r3,2
    93f4:	10800044 	addi	r2,r2,1
    93f8:	41000015 	stw	r4,0(r8)
    93fc:	01000084 	movi	r4,2
    9400:	41000115 	stw	r4,4(r8)
    9404:	d8c02015 	stw	r3,128(sp)
    9408:	d8801f15 	stw	r2,124(sp)
    940c:	010001c4 	movi	r4,7
    9410:	2082d916 	blt	r4,r2,9f78 <___svfprintf_internal_r+0x11d8>
    9414:	42000204 	addi	r8,r8,8
    9418:	db002c17 	ldw	r12,176(sp)
    941c:	00802004 	movi	r2,128
    9420:	60822026 	beq	r12,r2,9ca4 <___svfprintf_internal_r+0xf04>
    9424:	db003217 	ldw	r12,200(sp)
    9428:	64abc83a 	sub	r21,r12,r18
    942c:	0540310e 	bge	zero,r21,94f4 <___svfprintf_internal_r+0x754>
    9430:	07000404 	movi	fp,16
    9434:	d8801f17 	ldw	r2,124(sp)
    9438:	e544180e 	bge	fp,r21,a49c <___svfprintf_internal_r+0x16fc>
    943c:	01400174 	movhi	r5,5
    9440:	a809883a 	mov	r4,r21
    9444:	2975a484 	addi	r5,r5,-10606
    9448:	dc002c15 	stw	r16,176(sp)
    944c:	902b883a 	mov	r21,r18
    9450:	d9402b15 	stw	r5,172(sp)
    9454:	8825883a 	mov	r18,r17
    9458:	04c001c4 	movi	r19,7
    945c:	dc002f17 	ldw	r16,188(sp)
    9460:	2023883a 	mov	r17,r4
    9464:	00000306 	br	9474 <___svfprintf_internal_r+0x6d4>
    9468:	8c7ffc04 	addi	r17,r17,-16
    946c:	42000204 	addi	r8,r8,8
    9470:	e440110e 	bge	fp,r17,94b8 <___svfprintf_internal_r+0x718>
    9474:	18c00404 	addi	r3,r3,16
    9478:	10800044 	addi	r2,r2,1
    947c:	45000015 	stw	r20,0(r8)
    9480:	47000115 	stw	fp,4(r8)
    9484:	d8c02015 	stw	r3,128(sp)
    9488:	d8801f15 	stw	r2,124(sp)
    948c:	98bff60e 	bge	r19,r2,9468 <__alt_mem_descriptor_memory+0xdefc9468>
    9490:	8009883a 	mov	r4,r16
    9494:	b80b883a 	mov	r5,r23
    9498:	b00d883a 	mov	r6,r22
    949c:	00117580 	call	11758 <__ssprint_r>
    94a0:	103f071e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    94a4:	8c7ffc04 	addi	r17,r17,-16
    94a8:	d8c02017 	ldw	r3,128(sp)
    94ac:	d8801f17 	ldw	r2,124(sp)
    94b0:	da000404 	addi	r8,sp,16
    94b4:	e47fef16 	blt	fp,r17,9474 <__alt_mem_descriptor_memory+0xdefc9474>
    94b8:	dc002c17 	ldw	r16,176(sp)
    94bc:	8809883a 	mov	r4,r17
    94c0:	9023883a 	mov	r17,r18
    94c4:	a825883a 	mov	r18,r21
    94c8:	202b883a 	mov	r21,r4
    94cc:	dac02b17 	ldw	r11,172(sp)
    94d0:	1d47883a 	add	r3,r3,r21
    94d4:	10800044 	addi	r2,r2,1
    94d8:	42c00015 	stw	r11,0(r8)
    94dc:	45400115 	stw	r21,4(r8)
    94e0:	d8c02015 	stw	r3,128(sp)
    94e4:	d8801f15 	stw	r2,124(sp)
    94e8:	010001c4 	movi	r4,7
    94ec:	20829216 	blt	r4,r2,9f38 <___svfprintf_internal_r+0x1198>
    94f0:	42000204 	addi	r8,r8,8
    94f4:	8880400c 	andi	r2,r17,256
    94f8:	1001a11e 	bne	r2,zero,9b80 <___svfprintf_internal_r+0xde0>
    94fc:	d8801f17 	ldw	r2,124(sp)
    9500:	db003117 	ldw	r12,196(sp)
    9504:	1c87883a 	add	r3,r3,r18
    9508:	10800044 	addi	r2,r2,1
    950c:	43000015 	stw	r12,0(r8)
    9510:	44800115 	stw	r18,4(r8)
    9514:	d8c02015 	stw	r3,128(sp)
    9518:	d8801f15 	stw	r2,124(sp)
    951c:	010001c4 	movi	r4,7
    9520:	20826d16 	blt	r4,r2,9ed8 <___svfprintf_internal_r+0x1138>
    9524:	42000204 	addi	r8,r8,8
    9528:	8c40010c 	andi	r17,r17,4
    952c:	88003226 	beq	r17,zero,95f8 <___svfprintf_internal_r+0x858>
    9530:	db002e17 	ldw	r12,184(sp)
    9534:	dac02a17 	ldw	r11,168(sp)
    9538:	62e1c83a 	sub	r16,r12,r11
    953c:	04002e0e 	bge	zero,r16,95f8 <___svfprintf_internal_r+0x858>
    9540:	04400404 	movi	r17,16
    9544:	d8801f17 	ldw	r2,124(sp)
    9548:	8c05240e 	bge	r17,r16,a9dc <___svfprintf_internal_r+0x1c3c>
    954c:	01000174 	movhi	r4,5
    9550:	2135a884 	addi	r4,r4,-10590
    9554:	d9003615 	stw	r4,216(sp)
    9558:	048001c4 	movi	r18,7
    955c:	dcc02f17 	ldw	r19,188(sp)
    9560:	00000306 	br	9570 <___svfprintf_internal_r+0x7d0>
    9564:	843ffc04 	addi	r16,r16,-16
    9568:	42000204 	addi	r8,r8,8
    956c:	8c00130e 	bge	r17,r16,95bc <___svfprintf_internal_r+0x81c>
    9570:	01400174 	movhi	r5,5
    9574:	18c00404 	addi	r3,r3,16
    9578:	10800044 	addi	r2,r2,1
    957c:	2975a884 	addi	r5,r5,-10590
    9580:	41400015 	stw	r5,0(r8)
    9584:	44400115 	stw	r17,4(r8)
    9588:	d8c02015 	stw	r3,128(sp)
    958c:	d8801f15 	stw	r2,124(sp)
    9590:	90bff40e 	bge	r18,r2,9564 <__alt_mem_descriptor_memory+0xdefc9564>
    9594:	9809883a 	mov	r4,r19
    9598:	b80b883a 	mov	r5,r23
    959c:	b00d883a 	mov	r6,r22
    95a0:	00117580 	call	11758 <__ssprint_r>
    95a4:	103ec61e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    95a8:	843ffc04 	addi	r16,r16,-16
    95ac:	d8c02017 	ldw	r3,128(sp)
    95b0:	d8801f17 	ldw	r2,124(sp)
    95b4:	da000404 	addi	r8,sp,16
    95b8:	8c3fed16 	blt	r17,r16,9570 <__alt_mem_descriptor_memory+0xdefc9570>
    95bc:	dac03617 	ldw	r11,216(sp)
    95c0:	1c07883a 	add	r3,r3,r16
    95c4:	10800044 	addi	r2,r2,1
    95c8:	42c00015 	stw	r11,0(r8)
    95cc:	44000115 	stw	r16,4(r8)
    95d0:	d8c02015 	stw	r3,128(sp)
    95d4:	d8801f15 	stw	r2,124(sp)
    95d8:	010001c4 	movi	r4,7
    95dc:	2080060e 	bge	r4,r2,95f8 <___svfprintf_internal_r+0x858>
    95e0:	d9002f17 	ldw	r4,188(sp)
    95e4:	b80b883a 	mov	r5,r23
    95e8:	b00d883a 	mov	r6,r22
    95ec:	00117580 	call	11758 <__ssprint_r>
    95f0:	103eb31e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    95f4:	d8c02017 	ldw	r3,128(sp)
    95f8:	d8802a17 	ldw	r2,168(sp)
    95fc:	db002e17 	ldw	r12,184(sp)
    9600:	1300010e 	bge	r2,r12,9608 <___svfprintf_internal_r+0x868>
    9604:	6005883a 	mov	r2,r12
    9608:	dac03017 	ldw	r11,192(sp)
    960c:	5897883a 	add	r11,r11,r2
    9610:	dac03015 	stw	r11,192(sp)
    9614:	1802381e 	bne	r3,zero,9ef8 <___svfprintf_internal_r+0x1158>
    9618:	d8001f15 	stw	zero,124(sp)
    961c:	da000404 	addi	r8,sp,16
    9620:	003e0b06 	br	8e50 <__alt_mem_descriptor_memory+0xdefc8e50>
    9624:	8c400414 	ori	r17,r17,16
    9628:	d8c02915 	stw	r3,164(sp)
    962c:	8880080c 	andi	r2,r17,32
    9630:	10010c26 	beq	r2,zero,9a64 <___svfprintf_internal_r+0xcc4>
    9634:	db002d17 	ldw	r12,180(sp)
    9638:	0005883a 	mov	r2,zero
    963c:	64c00017 	ldw	r19,0(r12)
    9640:	67000117 	ldw	fp,4(r12)
    9644:	63000204 	addi	r12,r12,8
    9648:	db002d15 	stw	r12,180(sp)
    964c:	9f06b03a 	or	r3,r19,fp
    9650:	d8002785 	stb	zero,158(sp)
    9654:	da403215 	stw	r9,200(sp)
    9658:	002b883a 	mov	r21,zero
    965c:	003ee206 	br	91e8 <__alt_mem_descriptor_memory+0xdefc91e8>
    9660:	8c400414 	ori	r17,r17,16
    9664:	d8c02915 	stw	r3,164(sp)
    9668:	8880080c 	andi	r2,r17,32
    966c:	1000ee26 	beq	r2,zero,9a28 <___svfprintf_internal_r+0xc88>
    9670:	dac02d17 	ldw	r11,180(sp)
    9674:	00800044 	movi	r2,1
    9678:	5cc00017 	ldw	r19,0(r11)
    967c:	5f000117 	ldw	fp,4(r11)
    9680:	5ac00204 	addi	r11,r11,8
    9684:	dac02d15 	stw	r11,180(sp)
    9688:	9f06b03a 	or	r3,r19,fp
    968c:	003ff006 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    9690:	db002d17 	ldw	r12,180(sp)
    9694:	dac02d17 	ldw	r11,180(sp)
    9698:	d8c02915 	stw	r3,164(sp)
    969c:	63000017 	ldw	r12,0(r12)
    96a0:	5ac00117 	ldw	r11,4(r11)
    96a4:	d9802785 	stb	r6,158(sp)
    96a8:	6009883a 	mov	r4,r12
    96ac:	580b883a 	mov	r5,r11
    96b0:	db003715 	stw	r12,220(sp)
    96b4:	da004015 	stw	r8,256(sp)
    96b8:	da403f15 	stw	r9,252(sp)
    96bc:	dac03815 	stw	r11,224(sp)
    96c0:	00115040 	call	11504 <__fpclassifyd>
    96c4:	db002d17 	ldw	r12,180(sp)
    96c8:	04800044 	movi	r18,1
    96cc:	da004017 	ldw	r8,256(sp)
    96d0:	64c00204 	addi	r19,r12,8
    96d4:	da403f17 	ldw	r9,252(sp)
    96d8:	d9003717 	ldw	r4,220(sp)
    96dc:	d9403817 	ldw	r5,224(sp)
    96e0:	14832c1e 	bne	r2,r18,a394 <___svfprintf_internal_r+0x15f4>
    96e4:	000d883a 	mov	r6,zero
    96e8:	000f883a 	mov	r7,zero
    96ec:	001652c0 	call	1652c <__ledf2>
    96f0:	da004017 	ldw	r8,256(sp)
    96f4:	1004c416 	blt	r2,zero,aa08 <___svfprintf_internal_r+0x1c68>
    96f8:	dd402783 	ldbu	r21,158(sp)
    96fc:	008011c4 	movi	r2,71
    9700:	14041a0e 	bge	r2,r16,a76c <___svfprintf_internal_r+0x19cc>
    9704:	00c00174 	movhi	r3,5
    9708:	18f59504 	addi	r3,r3,-10668
    970c:	d8c03115 	stw	r3,196(sp)
    9710:	02c000c4 	movi	r11,3
    9714:	00bfdfc4 	movi	r2,-129
    9718:	dac02a15 	stw	r11,168(sp)
    971c:	88a2703a 	and	r17,r17,r2
    9720:	dcc02d15 	stw	r19,180(sp)
    9724:	5825883a 	mov	r18,r11
    9728:	d8003215 	stw	zero,200(sp)
    972c:	d8003415 	stw	zero,208(sp)
    9730:	003ed406 	br	9284 <__alt_mem_descriptor_memory+0xdefc9284>
    9734:	db002d17 	ldw	r12,180(sp)
    9738:	00800c04 	movi	r2,48
    973c:	d8802705 	stb	r2,156(sp)
    9740:	64c00017 	ldw	r19,0(r12)
    9744:	00801e04 	movi	r2,120
    9748:	d8802745 	stb	r2,157(sp)
    974c:	00800174 	movhi	r2,5
    9750:	10b59d04 	addi	r2,r2,-10636
    9754:	63000104 	addi	r12,r12,4
    9758:	d8c02915 	stw	r3,164(sp)
    975c:	d8803b15 	stw	r2,236(sp)
    9760:	0039883a 	mov	fp,zero
    9764:	8c400094 	ori	r17,r17,2
    9768:	db002d15 	stw	r12,180(sp)
    976c:	00800084 	movi	r2,2
    9770:	04001e04 	movi	r16,120
    9774:	9807883a 	mov	r3,r19
    9778:	003fb506 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    977c:	8c400214 	ori	r17,r17,8
    9780:	1805883a 	mov	r2,r3
    9784:	1c000007 	ldb	r16,0(r3)
    9788:	003ddb06 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    978c:	d8c02915 	stw	r3,164(sp)
    9790:	d9802785 	stb	r6,158(sp)
    9794:	8880080c 	andi	r2,r17,32
    9798:	d8c02d17 	ldw	r3,180(sp)
    979c:	103e871e 	bne	r2,zero,91bc <__alt_mem_descriptor_memory+0xdefc91bc>
    97a0:	8880040c 	andi	r2,r17,16
    97a4:	10027a1e 	bne	r2,zero,a190 <___svfprintf_internal_r+0x13f0>
    97a8:	8880100c 	andi	r2,r17,64
    97ac:	10027826 	beq	r2,zero,a190 <___svfprintf_internal_r+0x13f0>
    97b0:	1cc0000f 	ldh	r19,0(r3)
    97b4:	db002d17 	ldw	r12,180(sp)
    97b8:	9839d7fa 	srai	fp,r19,31
    97bc:	63000104 	addi	r12,r12,4
    97c0:	db002d15 	stw	r12,180(sp)
    97c4:	e005883a 	mov	r2,fp
    97c8:	103e830e 	bge	r2,zero,91d8 <__alt_mem_descriptor_memory+0xdefc91d8>
    97cc:	04e7c83a 	sub	r19,zero,r19
    97d0:	9804c03a 	cmpne	r2,r19,zero
    97d4:	0739c83a 	sub	fp,zero,fp
    97d8:	e0b9c83a 	sub	fp,fp,r2
    97dc:	05400b44 	movi	r21,45
    97e0:	dd402785 	stb	r21,158(sp)
    97e4:	da403215 	stw	r9,200(sp)
    97e8:	00800044 	movi	r2,1
    97ec:	9f06b03a 	or	r3,r19,fp
    97f0:	003e7d06 	br	91e8 <__alt_mem_descriptor_memory+0xdefc91e8>
    97f4:	8c401014 	ori	r17,r17,64
    97f8:	1805883a 	mov	r2,r3
    97fc:	1c000007 	ldb	r16,0(r3)
    9800:	003dbd06 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    9804:	1c000007 	ldb	r16,0(r3)
    9808:	81c37126 	beq	r16,r7,a5d0 <___svfprintf_internal_r+0x1830>
    980c:	8c400414 	ori	r17,r17,16
    9810:	1805883a 	mov	r2,r3
    9814:	003db806 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    9818:	d8c02915 	stw	r3,164(sp)
    981c:	d9802785 	stb	r6,158(sp)
    9820:	8880080c 	andi	r2,r17,32
    9824:	1002f026 	beq	r2,zero,a3e8 <___svfprintf_internal_r+0x1648>
    9828:	db002d17 	ldw	r12,180(sp)
    982c:	dac03017 	ldw	r11,192(sp)
    9830:	60800017 	ldw	r2,0(r12)
    9834:	5807d7fa 	srai	r3,r11,31
    9838:	63000104 	addi	r12,r12,4
    983c:	db002d15 	stw	r12,180(sp)
    9840:	12c00015 	stw	r11,0(r2)
    9844:	10c00115 	stw	r3,4(r2)
    9848:	003d8106 	br	8e50 <__alt_mem_descriptor_memory+0xdefc8e50>
    984c:	30803fcc 	andi	r2,r6,255
    9850:	1080201c 	xori	r2,r2,128
    9854:	10bfe004 	addi	r2,r2,-128
    9858:	1002fd1e 	bne	r2,zero,a450 <___svfprintf_internal_r+0x16b0>
    985c:	1805883a 	mov	r2,r3
    9860:	01800804 	movi	r6,32
    9864:	1c000007 	ldb	r16,0(r3)
    9868:	003da306 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    986c:	03000174 	movhi	r12,5
    9870:	63359804 	addi	r12,r12,-10656
    9874:	d8c02915 	stw	r3,164(sp)
    9878:	d9802785 	stb	r6,158(sp)
    987c:	db003b15 	stw	r12,236(sp)
    9880:	88c0080c 	andi	r3,r17,32
    9884:	d8802d17 	ldw	r2,180(sp)
    9888:	18005c26 	beq	r3,zero,99fc <___svfprintf_internal_r+0xc5c>
    988c:	dac02d17 	ldw	r11,180(sp)
    9890:	14c00017 	ldw	r19,0(r2)
    9894:	17000117 	ldw	fp,4(r2)
    9898:	5ac00204 	addi	r11,r11,8
    989c:	dac02d15 	stw	r11,180(sp)
    98a0:	8880004c 	andi	r2,r17,1
    98a4:	10022f26 	beq	r2,zero,a164 <___svfprintf_internal_r+0x13c4>
    98a8:	9f06b03a 	or	r3,r19,fp
    98ac:	1802eb26 	beq	r3,zero,a45c <___svfprintf_internal_r+0x16bc>
    98b0:	00800c04 	movi	r2,48
    98b4:	d8802705 	stb	r2,156(sp)
    98b8:	dc002745 	stb	r16,157(sp)
    98bc:	8c400094 	ori	r17,r17,2
    98c0:	00800084 	movi	r2,2
    98c4:	003f6206 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    98c8:	dac02d17 	ldw	r11,180(sp)
    98cc:	db002d17 	ldw	r12,180(sp)
    98d0:	d8c02915 	stw	r3,164(sp)
    98d4:	5ac00017 	ldw	r11,0(r11)
    98d8:	d8002785 	stb	zero,158(sp)
    98dc:	64c00104 	addi	r19,r12,4
    98e0:	dac03115 	stw	r11,196(sp)
    98e4:	58042e26 	beq	r11,zero,a9a0 <___svfprintf_internal_r+0x1c00>
    98e8:	d9003117 	ldw	r4,196(sp)
    98ec:	4803c416 	blt	r9,zero,a800 <___svfprintf_internal_r+0x1a60>
    98f0:	480d883a 	mov	r6,r9
    98f4:	000b883a 	mov	r5,zero
    98f8:	da004015 	stw	r8,256(sp)
    98fc:	da403f15 	stw	r9,252(sp)
    9900:	000fd2c0 	call	fd2c <memchr>
    9904:	da004017 	ldw	r8,256(sp)
    9908:	da403f17 	ldw	r9,252(sp)
    990c:	10048a26 	beq	r2,zero,ab38 <___svfprintf_internal_r+0x1d98>
    9910:	d8c03117 	ldw	r3,196(sp)
    9914:	10e5c83a 	sub	r18,r2,r3
    9918:	4c80010e 	bge	r9,r18,9920 <___svfprintf_internal_r+0xb80>
    991c:	4825883a 	mov	r18,r9
    9920:	9005883a 	mov	r2,r18
    9924:	9003bb16 	blt	r18,zero,a814 <___svfprintf_internal_r+0x1a74>
    9928:	dd402783 	ldbu	r21,158(sp)
    992c:	d8802a15 	stw	r2,168(sp)
    9930:	dcc02d15 	stw	r19,180(sp)
    9934:	d8003215 	stw	zero,200(sp)
    9938:	d8003415 	stw	zero,208(sp)
    993c:	003e5106 	br	9284 <__alt_mem_descriptor_memory+0xdefc9284>
    9940:	8c400814 	ori	r17,r17,32
    9944:	1805883a 	mov	r2,r3
    9948:	1c000007 	ldb	r16,0(r3)
    994c:	003d6a06 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    9950:	db002d17 	ldw	r12,180(sp)
    9954:	d8c02915 	stw	r3,164(sp)
    9958:	dac01404 	addi	r11,sp,80
    995c:	60800017 	ldw	r2,0(r12)
    9960:	00c00044 	movi	r3,1
    9964:	63000104 	addi	r12,r12,4
    9968:	d8801405 	stb	r2,80(sp)
    996c:	d8c02a15 	stw	r3,168(sp)
    9970:	d8002785 	stb	zero,158(sp)
    9974:	db002d15 	stw	r12,180(sp)
    9978:	1825883a 	mov	r18,r3
    997c:	d8003215 	stw	zero,200(sp)
    9980:	d8003415 	stw	zero,208(sp)
    9984:	dac03115 	stw	r11,196(sp)
    9988:	0005883a 	mov	r2,zero
    998c:	003e4406 	br	92a0 <__alt_mem_descriptor_memory+0xdefc92a0>
    9990:	dac02d17 	ldw	r11,180(sp)
    9994:	db002d17 	ldw	r12,180(sp)
    9998:	5ac00017 	ldw	r11,0(r11)
    999c:	dac02e15 	stw	r11,184(sp)
    99a0:	62c00104 	addi	r11,r12,4
    99a4:	db002e17 	ldw	r12,184(sp)
    99a8:	60030316 	blt	r12,zero,a5b8 <___svfprintf_internal_r+0x1818>
    99ac:	dac02d15 	stw	r11,180(sp)
    99b0:	1805883a 	mov	r2,r3
    99b4:	1c000007 	ldb	r16,0(r3)
    99b8:	003d4f06 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    99bc:	1805883a 	mov	r2,r3
    99c0:	01800ac4 	movi	r6,43
    99c4:	1c000007 	ldb	r16,0(r3)
    99c8:	003d4b06 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    99cc:	8c400054 	ori	r17,r17,1
    99d0:	1805883a 	mov	r2,r3
    99d4:	1c000007 	ldb	r16,0(r3)
    99d8:	003d4706 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    99dc:	00800174 	movhi	r2,5
    99e0:	10b59d04 	addi	r2,r2,-10636
    99e4:	d8c02915 	stw	r3,164(sp)
    99e8:	d8803b15 	stw	r2,236(sp)
    99ec:	d9802785 	stb	r6,158(sp)
    99f0:	88c0080c 	andi	r3,r17,32
    99f4:	d8802d17 	ldw	r2,180(sp)
    99f8:	183fa41e 	bne	r3,zero,988c <__alt_mem_descriptor_memory+0xdefc988c>
    99fc:	88c0040c 	andi	r3,r17,16
    9a00:	18028b26 	beq	r3,zero,a430 <___svfprintf_internal_r+0x1690>
    9a04:	db002d17 	ldw	r12,180(sp)
    9a08:	14c00017 	ldw	r19,0(r2)
    9a0c:	0039883a 	mov	fp,zero
    9a10:	63000104 	addi	r12,r12,4
    9a14:	db002d15 	stw	r12,180(sp)
    9a18:	003fa106 	br	98a0 <__alt_mem_descriptor_memory+0xdefc98a0>
    9a1c:	d8c02915 	stw	r3,164(sp)
    9a20:	8880080c 	andi	r2,r17,32
    9a24:	103f121e 	bne	r2,zero,9670 <__alt_mem_descriptor_memory+0xdefc9670>
    9a28:	8880040c 	andi	r2,r17,16
    9a2c:	1001df1e 	bne	r2,zero,a1ac <___svfprintf_internal_r+0x140c>
    9a30:	8880100c 	andi	r2,r17,64
    9a34:	1001dd26 	beq	r2,zero,a1ac <___svfprintf_internal_r+0x140c>
    9a38:	dac02d17 	ldw	r11,180(sp)
    9a3c:	0039883a 	mov	fp,zero
    9a40:	00800044 	movi	r2,1
    9a44:	5cc0000b 	ldhu	r19,0(r11)
    9a48:	5ac00104 	addi	r11,r11,4
    9a4c:	dac02d15 	stw	r11,180(sp)
    9a50:	9807883a 	mov	r3,r19
    9a54:	003efe06 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    9a58:	d8c02915 	stw	r3,164(sp)
    9a5c:	8880080c 	andi	r2,r17,32
    9a60:	103ef41e 	bne	r2,zero,9634 <__alt_mem_descriptor_memory+0xdefc9634>
    9a64:	8880040c 	andi	r2,r17,16
    9a68:	1001c11e 	bne	r2,zero,a170 <___svfprintf_internal_r+0x13d0>
    9a6c:	8880100c 	andi	r2,r17,64
    9a70:	1001bf26 	beq	r2,zero,a170 <___svfprintf_internal_r+0x13d0>
    9a74:	db002d17 	ldw	r12,180(sp)
    9a78:	0039883a 	mov	fp,zero
    9a7c:	0005883a 	mov	r2,zero
    9a80:	64c0000b 	ldhu	r19,0(r12)
    9a84:	63000104 	addi	r12,r12,4
    9a88:	db002d15 	stw	r12,180(sp)
    9a8c:	9807883a 	mov	r3,r19
    9a90:	003eef06 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    9a94:	d8c02915 	stw	r3,164(sp)
    9a98:	d9802785 	stb	r6,158(sp)
    9a9c:	803d8226 	beq	r16,zero,90a8 <__alt_mem_descriptor_memory+0xdefc90a8>
    9aa0:	02c00044 	movi	r11,1
    9aa4:	db001404 	addi	r12,sp,80
    9aa8:	dac02a15 	stw	r11,168(sp)
    9aac:	dc001405 	stb	r16,80(sp)
    9ab0:	d8002785 	stb	zero,158(sp)
    9ab4:	5825883a 	mov	r18,r11
    9ab8:	d8003215 	stw	zero,200(sp)
    9abc:	d8003415 	stw	zero,208(sp)
    9ac0:	db003115 	stw	r12,196(sp)
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	003df506 	br	92a0 <__alt_mem_descriptor_memory+0xdefc92a0>
    9acc:	d8c02017 	ldw	r3,128(sp)
    9ad0:	003e3606 	br	93ac <__alt_mem_descriptor_memory+0xdefc93ac>
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	00c00044 	movi	r3,1
    9adc:	10fdca1e 	bne	r2,r3,9208 <__alt_mem_descriptor_memory+0xdefc9208>
    9ae0:	e000021e 	bne	fp,zero,9aec <___svfprintf_internal_r+0xd4c>
    9ae4:	00800244 	movi	r2,9
    9ae8:	14c01f2e 	bgeu	r2,r19,9b68 <___svfprintf_internal_r+0xdc8>
    9aec:	dc002a15 	stw	r16,168(sp)
    9af0:	dc402b15 	stw	r17,172(sp)
    9af4:	9821883a 	mov	r16,r19
    9af8:	e023883a 	mov	r17,fp
    9afc:	b025883a 	mov	r18,r22
    9b00:	4027883a 	mov	r19,r8
    9b04:	4839883a 	mov	fp,r9
    9b08:	8009883a 	mov	r4,r16
    9b0c:	880b883a 	mov	r5,r17
    9b10:	01800284 	movi	r6,10
    9b14:	000f883a 	mov	r7,zero
    9b18:	0014ba40 	call	14ba4 <__umoddi3>
    9b1c:	10800c04 	addi	r2,r2,48
    9b20:	94bfffc4 	addi	r18,r18,-1
    9b24:	8009883a 	mov	r4,r16
    9b28:	880b883a 	mov	r5,r17
    9b2c:	01800284 	movi	r6,10
    9b30:	000f883a 	mov	r7,zero
    9b34:	90800005 	stb	r2,0(r18)
    9b38:	00145e40 	call	145e4 <__udivdi3>
    9b3c:	1021883a 	mov	r16,r2
    9b40:	10c4b03a 	or	r2,r2,r3
    9b44:	1823883a 	mov	r17,r3
    9b48:	103fef1e 	bne	r2,zero,9b08 <__alt_mem_descriptor_memory+0xdefc9b08>
    9b4c:	dc803115 	stw	r18,196(sp)
    9b50:	dc002a17 	ldw	r16,168(sp)
    9b54:	9811883a 	mov	r8,r19
    9b58:	dc402b17 	ldw	r17,172(sp)
    9b5c:	e013883a 	mov	r9,fp
    9b60:	b4a5c83a 	sub	r18,r22,r18
    9b64:	003dc206 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    9b68:	9cc00c04 	addi	r19,r19,48
    9b6c:	db001dc4 	addi	r12,sp,119
    9b70:	dcc01dc5 	stb	r19,119(sp)
    9b74:	dc803d17 	ldw	r18,244(sp)
    9b78:	db003115 	stw	r12,196(sp)
    9b7c:	003dbc06 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    9b80:	00801944 	movi	r2,101
    9b84:	14008d0e 	bge	r2,r16,9dbc <___svfprintf_internal_r+0x101c>
    9b88:	d9003717 	ldw	r4,220(sp)
    9b8c:	d9403817 	ldw	r5,224(sp)
    9b90:	000d883a 	mov	r6,zero
    9b94:	000f883a 	mov	r7,zero
    9b98:	d8c03e15 	stw	r3,248(sp)
    9b9c:	da004015 	stw	r8,256(sp)
    9ba0:	00163c80 	call	163c8 <__eqdf2>
    9ba4:	d8c03e17 	ldw	r3,248(sp)
    9ba8:	da004017 	ldw	r8,256(sp)
    9bac:	1000fd1e 	bne	r2,zero,9fa4 <___svfprintf_internal_r+0x1204>
    9bb0:	d8801f17 	ldw	r2,124(sp)
    9bb4:	01000174 	movhi	r4,5
    9bb8:	2135a404 	addi	r4,r4,-10608
    9bbc:	18c00044 	addi	r3,r3,1
    9bc0:	10800044 	addi	r2,r2,1
    9bc4:	41000015 	stw	r4,0(r8)
    9bc8:	01000044 	movi	r4,1
    9bcc:	41000115 	stw	r4,4(r8)
    9bd0:	d8c02015 	stw	r3,128(sp)
    9bd4:	d8801f15 	stw	r2,124(sp)
    9bd8:	010001c4 	movi	r4,7
    9bdc:	20823316 	blt	r4,r2,a4ac <___svfprintf_internal_r+0x170c>
    9be0:	42000204 	addi	r8,r8,8
    9be4:	d8802617 	ldw	r2,152(sp)
    9be8:	dac03317 	ldw	r11,204(sp)
    9bec:	12c00216 	blt	r2,r11,9bf8 <___svfprintf_internal_r+0xe58>
    9bf0:	8880004c 	andi	r2,r17,1
    9bf4:	103e4c26 	beq	r2,zero,9528 <__alt_mem_descriptor_memory+0xdefc9528>
    9bf8:	db003917 	ldw	r12,228(sp)
    9bfc:	d8801f17 	ldw	r2,124(sp)
    9c00:	dac03517 	ldw	r11,212(sp)
    9c04:	1b07883a 	add	r3,r3,r12
    9c08:	10800044 	addi	r2,r2,1
    9c0c:	42c00015 	stw	r11,0(r8)
    9c10:	43000115 	stw	r12,4(r8)
    9c14:	d8c02015 	stw	r3,128(sp)
    9c18:	d8801f15 	stw	r2,124(sp)
    9c1c:	010001c4 	movi	r4,7
    9c20:	20826f16 	blt	r4,r2,a5e0 <___svfprintf_internal_r+0x1840>
    9c24:	42000204 	addi	r8,r8,8
    9c28:	db003317 	ldw	r12,204(sp)
    9c2c:	643fffc4 	addi	r16,r12,-1
    9c30:	043e3d0e 	bge	zero,r16,9528 <__alt_mem_descriptor_memory+0xdefc9528>
    9c34:	04800404 	movi	r18,16
    9c38:	d8801f17 	ldw	r2,124(sp)
    9c3c:	94009a0e 	bge	r18,r16,9ea8 <___svfprintf_internal_r+0x1108>
    9c40:	01400174 	movhi	r5,5
    9c44:	2975a484 	addi	r5,r5,-10606
    9c48:	d9402b15 	stw	r5,172(sp)
    9c4c:	054001c4 	movi	r21,7
    9c50:	dcc02f17 	ldw	r19,188(sp)
    9c54:	00000306 	br	9c64 <___svfprintf_internal_r+0xec4>
    9c58:	42000204 	addi	r8,r8,8
    9c5c:	843ffc04 	addi	r16,r16,-16
    9c60:	9400940e 	bge	r18,r16,9eb4 <___svfprintf_internal_r+0x1114>
    9c64:	18c00404 	addi	r3,r3,16
    9c68:	10800044 	addi	r2,r2,1
    9c6c:	45000015 	stw	r20,0(r8)
    9c70:	44800115 	stw	r18,4(r8)
    9c74:	d8c02015 	stw	r3,128(sp)
    9c78:	d8801f15 	stw	r2,124(sp)
    9c7c:	a8bff60e 	bge	r21,r2,9c58 <__alt_mem_descriptor_memory+0xdefc9c58>
    9c80:	9809883a 	mov	r4,r19
    9c84:	b80b883a 	mov	r5,r23
    9c88:	b00d883a 	mov	r6,r22
    9c8c:	00117580 	call	11758 <__ssprint_r>
    9c90:	103d0b1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9c94:	d8c02017 	ldw	r3,128(sp)
    9c98:	d8801f17 	ldw	r2,124(sp)
    9c9c:	da000404 	addi	r8,sp,16
    9ca0:	003fee06 	br	9c5c <__alt_mem_descriptor_memory+0xdefc9c5c>
    9ca4:	dac02e17 	ldw	r11,184(sp)
    9ca8:	db002a17 	ldw	r12,168(sp)
    9cac:	5b2bc83a 	sub	r21,r11,r12
    9cb0:	057ddc0e 	bge	zero,r21,9424 <__alt_mem_descriptor_memory+0xdefc9424>
    9cb4:	07000404 	movi	fp,16
    9cb8:	d8801f17 	ldw	r2,124(sp)
    9cbc:	e5435d0e 	bge	fp,r21,aa34 <___svfprintf_internal_r+0x1c94>
    9cc0:	01400174 	movhi	r5,5
    9cc4:	a809883a 	mov	r4,r21
    9cc8:	2975a484 	addi	r5,r5,-10606
    9ccc:	dc002c15 	stw	r16,176(sp)
    9cd0:	902b883a 	mov	r21,r18
    9cd4:	d9402b15 	stw	r5,172(sp)
    9cd8:	8825883a 	mov	r18,r17
    9cdc:	04c001c4 	movi	r19,7
    9ce0:	dc002f17 	ldw	r16,188(sp)
    9ce4:	2023883a 	mov	r17,r4
    9ce8:	00000306 	br	9cf8 <___svfprintf_internal_r+0xf58>
    9cec:	8c7ffc04 	addi	r17,r17,-16
    9cf0:	42000204 	addi	r8,r8,8
    9cf4:	e440110e 	bge	fp,r17,9d3c <___svfprintf_internal_r+0xf9c>
    9cf8:	18c00404 	addi	r3,r3,16
    9cfc:	10800044 	addi	r2,r2,1
    9d00:	45000015 	stw	r20,0(r8)
    9d04:	47000115 	stw	fp,4(r8)
    9d08:	d8c02015 	stw	r3,128(sp)
    9d0c:	d8801f15 	stw	r2,124(sp)
    9d10:	98bff60e 	bge	r19,r2,9cec <__alt_mem_descriptor_memory+0xdefc9cec>
    9d14:	8009883a 	mov	r4,r16
    9d18:	b80b883a 	mov	r5,r23
    9d1c:	b00d883a 	mov	r6,r22
    9d20:	00117580 	call	11758 <__ssprint_r>
    9d24:	103ce61e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9d28:	8c7ffc04 	addi	r17,r17,-16
    9d2c:	d8c02017 	ldw	r3,128(sp)
    9d30:	d8801f17 	ldw	r2,124(sp)
    9d34:	da000404 	addi	r8,sp,16
    9d38:	e47fef16 	blt	fp,r17,9cf8 <__alt_mem_descriptor_memory+0xdefc9cf8>
    9d3c:	dc002c17 	ldw	r16,176(sp)
    9d40:	8809883a 	mov	r4,r17
    9d44:	9023883a 	mov	r17,r18
    9d48:	a825883a 	mov	r18,r21
    9d4c:	202b883a 	mov	r21,r4
    9d50:	dac02b17 	ldw	r11,172(sp)
    9d54:	1d47883a 	add	r3,r3,r21
    9d58:	10800044 	addi	r2,r2,1
    9d5c:	42c00015 	stw	r11,0(r8)
    9d60:	45400115 	stw	r21,4(r8)
    9d64:	d8c02015 	stw	r3,128(sp)
    9d68:	d8801f15 	stw	r2,124(sp)
    9d6c:	010001c4 	movi	r4,7
    9d70:	20818016 	blt	r4,r2,a374 <___svfprintf_internal_r+0x15d4>
    9d74:	42000204 	addi	r8,r8,8
    9d78:	003daa06 	br	9424 <__alt_mem_descriptor_memory+0xdefc9424>
    9d7c:	d9403b17 	ldw	r5,236(sp)
    9d80:	b007883a 	mov	r3,r22
    9d84:	988003cc 	andi	r2,r19,15
    9d88:	e008973a 	slli	r4,fp,28
    9d8c:	2885883a 	add	r2,r5,r2
    9d90:	9826d13a 	srli	r19,r19,4
    9d94:	10800003 	ldbu	r2,0(r2)
    9d98:	e038d13a 	srli	fp,fp,4
    9d9c:	18ffffc4 	addi	r3,r3,-1
    9da0:	24e6b03a 	or	r19,r4,r19
    9da4:	18800005 	stb	r2,0(r3)
    9da8:	9f04b03a 	or	r2,r19,fp
    9dac:	103ff51e 	bne	r2,zero,9d84 <__alt_mem_descriptor_memory+0xdefc9d84>
    9db0:	d8c03115 	stw	r3,196(sp)
    9db4:	b0e5c83a 	sub	r18,r22,r3
    9db8:	003d2d06 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    9dbc:	db003317 	ldw	r12,204(sp)
    9dc0:	00800044 	movi	r2,1
    9dc4:	18c00044 	addi	r3,r3,1
    9dc8:	13014b0e 	bge	r2,r12,a2f8 <___svfprintf_internal_r+0x1558>
    9dcc:	dc001f17 	ldw	r16,124(sp)
    9dd0:	dac03117 	ldw	r11,196(sp)
    9dd4:	00800044 	movi	r2,1
    9dd8:	84000044 	addi	r16,r16,1
    9ddc:	40800115 	stw	r2,4(r8)
    9de0:	42c00015 	stw	r11,0(r8)
    9de4:	d8c02015 	stw	r3,128(sp)
    9de8:	dc001f15 	stw	r16,124(sp)
    9dec:	008001c4 	movi	r2,7
    9df0:	14014e16 	blt	r2,r16,a32c <___svfprintf_internal_r+0x158c>
    9df4:	42000204 	addi	r8,r8,8
    9df8:	db003917 	ldw	r12,228(sp)
    9dfc:	dac03517 	ldw	r11,212(sp)
    9e00:	84000044 	addi	r16,r16,1
    9e04:	1b07883a 	add	r3,r3,r12
    9e08:	42c00015 	stw	r11,0(r8)
    9e0c:	43000115 	stw	r12,4(r8)
    9e10:	d8c02015 	stw	r3,128(sp)
    9e14:	dc001f15 	stw	r16,124(sp)
    9e18:	008001c4 	movi	r2,7
    9e1c:	14014c16 	blt	r2,r16,a350 <___svfprintf_internal_r+0x15b0>
    9e20:	44800204 	addi	r18,r8,8
    9e24:	d9003717 	ldw	r4,220(sp)
    9e28:	d9403817 	ldw	r5,224(sp)
    9e2c:	000d883a 	mov	r6,zero
    9e30:	000f883a 	mov	r7,zero
    9e34:	d8c03e15 	stw	r3,248(sp)
    9e38:	00163c80 	call	163c8 <__eqdf2>
    9e3c:	d8c03e17 	ldw	r3,248(sp)
    9e40:	db003317 	ldw	r12,204(sp)
    9e44:	10009526 	beq	r2,zero,a09c <___svfprintf_internal_r+0x12fc>
    9e48:	dac03117 	ldw	r11,196(sp)
    9e4c:	60bfffc4 	addi	r2,r12,-1
    9e50:	1887883a 	add	r3,r3,r2
    9e54:	59000044 	addi	r4,r11,1
    9e58:	84000044 	addi	r16,r16,1
    9e5c:	90800115 	stw	r2,4(r18)
    9e60:	91000015 	stw	r4,0(r18)
    9e64:	d8c02015 	stw	r3,128(sp)
    9e68:	dc001f15 	stw	r16,124(sp)
    9e6c:	008001c4 	movi	r2,7
    9e70:	1400b316 	blt	r2,r16,a140 <___svfprintf_internal_r+0x13a0>
    9e74:	94800204 	addi	r18,r18,8
    9e78:	dac03a17 	ldw	r11,232(sp)
    9e7c:	dd4022c4 	addi	r21,sp,139
    9e80:	84000044 	addi	r16,r16,1
    9e84:	58c7883a 	add	r3,r11,r3
    9e88:	95400015 	stw	r21,0(r18)
    9e8c:	92c00115 	stw	r11,4(r18)
    9e90:	d8c02015 	stw	r3,128(sp)
    9e94:	dc001f15 	stw	r16,124(sp)
    9e98:	008001c4 	movi	r2,7
    9e9c:	14000e16 	blt	r2,r16,9ed8 <___svfprintf_internal_r+0x1138>
    9ea0:	92000204 	addi	r8,r18,8
    9ea4:	003da006 	br	9528 <__alt_mem_descriptor_memory+0xdefc9528>
    9ea8:	01000174 	movhi	r4,5
    9eac:	2135a484 	addi	r4,r4,-10606
    9eb0:	d9002b15 	stw	r4,172(sp)
    9eb4:	dac02b17 	ldw	r11,172(sp)
    9eb8:	1c07883a 	add	r3,r3,r16
    9ebc:	44000115 	stw	r16,4(r8)
    9ec0:	42c00015 	stw	r11,0(r8)
    9ec4:	10800044 	addi	r2,r2,1
    9ec8:	d8c02015 	stw	r3,128(sp)
    9ecc:	d8801f15 	stw	r2,124(sp)
    9ed0:	010001c4 	movi	r4,7
    9ed4:	20bd930e 	bge	r4,r2,9524 <__alt_mem_descriptor_memory+0xdefc9524>
    9ed8:	d9002f17 	ldw	r4,188(sp)
    9edc:	b80b883a 	mov	r5,r23
    9ee0:	b00d883a 	mov	r6,r22
    9ee4:	00117580 	call	11758 <__ssprint_r>
    9ee8:	103c751e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9eec:	d8c02017 	ldw	r3,128(sp)
    9ef0:	da000404 	addi	r8,sp,16
    9ef4:	003d8c06 	br	9528 <__alt_mem_descriptor_memory+0xdefc9528>
    9ef8:	d9002f17 	ldw	r4,188(sp)
    9efc:	b80b883a 	mov	r5,r23
    9f00:	b00d883a 	mov	r6,r22
    9f04:	00117580 	call	11758 <__ssprint_r>
    9f08:	103dc326 	beq	r2,zero,9618 <__alt_mem_descriptor_memory+0xdefc9618>
    9f0c:	003c6c06 	br	90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9f10:	10803fcc 	andi	r2,r2,255
    9f14:	1000201e 	bne	r2,zero,9f98 <___svfprintf_internal_r+0x11f8>
    9f18:	8880004c 	andi	r2,r17,1
    9f1c:	10001e26 	beq	r2,zero,9f98 <___svfprintf_internal_r+0x11f8>
    9f20:	00800c04 	movi	r2,48
    9f24:	d8c01dc4 	addi	r3,sp,119
    9f28:	d8801dc5 	stb	r2,119(sp)
    9f2c:	dc803d17 	ldw	r18,244(sp)
    9f30:	d8c03115 	stw	r3,196(sp)
    9f34:	003cce06 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    9f38:	d9002f17 	ldw	r4,188(sp)
    9f3c:	b80b883a 	mov	r5,r23
    9f40:	b00d883a 	mov	r6,r22
    9f44:	00117580 	call	11758 <__ssprint_r>
    9f48:	103c5d1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9f4c:	d8c02017 	ldw	r3,128(sp)
    9f50:	da000404 	addi	r8,sp,16
    9f54:	003d6706 	br	94f4 <__alt_mem_descriptor_memory+0xdefc94f4>
    9f58:	d9002f17 	ldw	r4,188(sp)
    9f5c:	b80b883a 	mov	r5,r23
    9f60:	b00d883a 	mov	r6,r22
    9f64:	00117580 	call	11758 <__ssprint_r>
    9f68:	103c551e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9f6c:	d8c02017 	ldw	r3,128(sp)
    9f70:	da000404 	addi	r8,sp,16
    9f74:	003d1a06 	br	93e0 <__alt_mem_descriptor_memory+0xdefc93e0>
    9f78:	d9002f17 	ldw	r4,188(sp)
    9f7c:	b80b883a 	mov	r5,r23
    9f80:	b00d883a 	mov	r6,r22
    9f84:	00117580 	call	11758 <__ssprint_r>
    9f88:	103c4d1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    9f8c:	d8c02017 	ldw	r3,128(sp)
    9f90:	da000404 	addi	r8,sp,16
    9f94:	003d2006 	br	9418 <__alt_mem_descriptor_memory+0xdefc9418>
    9f98:	0025883a 	mov	r18,zero
    9f9c:	dd803115 	stw	r22,196(sp)
    9fa0:	003cb306 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    9fa4:	dc002617 	ldw	r16,152(sp)
    9fa8:	0401480e 	bge	zero,r16,a4cc <___svfprintf_internal_r+0x172c>
    9fac:	db003117 	ldw	r12,196(sp)
    9fb0:	dac03317 	ldw	r11,204(sp)
    9fb4:	62e1883a 	add	r16,r12,r11
    9fb8:	db003417 	ldw	r12,208(sp)
    9fbc:	5825883a 	mov	r18,r11
    9fc0:	62c0010e 	bge	r12,r11,9fc8 <___svfprintf_internal_r+0x1228>
    9fc4:	6025883a 	mov	r18,r12
    9fc8:	04800b0e 	bge	zero,r18,9ff8 <___svfprintf_internal_r+0x1258>
    9fcc:	d8801f17 	ldw	r2,124(sp)
    9fd0:	dac03117 	ldw	r11,196(sp)
    9fd4:	1c87883a 	add	r3,r3,r18
    9fd8:	10800044 	addi	r2,r2,1
    9fdc:	42c00015 	stw	r11,0(r8)
    9fe0:	44800115 	stw	r18,4(r8)
    9fe4:	d8c02015 	stw	r3,128(sp)
    9fe8:	d8801f15 	stw	r2,124(sp)
    9fec:	010001c4 	movi	r4,7
    9ff0:	20823f16 	blt	r4,r2,a8f0 <___svfprintf_internal_r+0x1b50>
    9ff4:	42000204 	addi	r8,r8,8
    9ff8:	90023b16 	blt	r18,zero,a8e8 <___svfprintf_internal_r+0x1b48>
    9ffc:	db003417 	ldw	r12,208(sp)
    a000:	64a5c83a 	sub	r18,r12,r18
    a004:	0480780e 	bge	zero,r18,a1e8 <___svfprintf_internal_r+0x1448>
    a008:	05400404 	movi	r21,16
    a00c:	d8801f17 	ldw	r2,124(sp)
    a010:	ac81140e 	bge	r21,r18,a464 <___svfprintf_internal_r+0x16c4>
    a014:	01400174 	movhi	r5,5
    a018:	2975a484 	addi	r5,r5,-10606
    a01c:	d9402b15 	stw	r5,172(sp)
    a020:	070001c4 	movi	fp,7
    a024:	dcc02f17 	ldw	r19,188(sp)
    a028:	00000306 	br	a038 <___svfprintf_internal_r+0x1298>
    a02c:	42000204 	addi	r8,r8,8
    a030:	94bffc04 	addi	r18,r18,-16
    a034:	ac810e0e 	bge	r21,r18,a470 <___svfprintf_internal_r+0x16d0>
    a038:	18c00404 	addi	r3,r3,16
    a03c:	10800044 	addi	r2,r2,1
    a040:	45000015 	stw	r20,0(r8)
    a044:	45400115 	stw	r21,4(r8)
    a048:	d8c02015 	stw	r3,128(sp)
    a04c:	d8801f15 	stw	r2,124(sp)
    a050:	e0bff60e 	bge	fp,r2,a02c <__alt_mem_descriptor_memory+0xdefca02c>
    a054:	9809883a 	mov	r4,r19
    a058:	b80b883a 	mov	r5,r23
    a05c:	b00d883a 	mov	r6,r22
    a060:	00117580 	call	11758 <__ssprint_r>
    a064:	103c161e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a068:	d8c02017 	ldw	r3,128(sp)
    a06c:	d8801f17 	ldw	r2,124(sp)
    a070:	da000404 	addi	r8,sp,16
    a074:	003fee06 	br	a030 <__alt_mem_descriptor_memory+0xdefca030>
    a078:	d9002f17 	ldw	r4,188(sp)
    a07c:	b80b883a 	mov	r5,r23
    a080:	b00d883a 	mov	r6,r22
    a084:	00117580 	call	11758 <__ssprint_r>
    a088:	103c0d1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a08c:	d8c02017 	ldw	r3,128(sp)
    a090:	d8802787 	ldb	r2,158(sp)
    a094:	da000404 	addi	r8,sp,16
    a098:	003cc406 	br	93ac <__alt_mem_descriptor_memory+0xdefc93ac>
    a09c:	657fffc4 	addi	r21,r12,-1
    a0a0:	057f750e 	bge	zero,r21,9e78 <__alt_mem_descriptor_memory+0xdefc9e78>
    a0a4:	07000404 	movi	fp,16
    a0a8:	e542ef0e 	bge	fp,r21,ac68 <___svfprintf_internal_r+0x1ec8>
    a0ac:	01000174 	movhi	r4,5
    a0b0:	2135a484 	addi	r4,r4,-10606
    a0b4:	d9002b15 	stw	r4,172(sp)
    a0b8:	01c001c4 	movi	r7,7
    a0bc:	dcc02f17 	ldw	r19,188(sp)
    a0c0:	00000306 	br	a0d0 <___svfprintf_internal_r+0x1330>
    a0c4:	ad7ffc04 	addi	r21,r21,-16
    a0c8:	94800204 	addi	r18,r18,8
    a0cc:	e540130e 	bge	fp,r21,a11c <___svfprintf_internal_r+0x137c>
    a0d0:	18c00404 	addi	r3,r3,16
    a0d4:	84000044 	addi	r16,r16,1
    a0d8:	95000015 	stw	r20,0(r18)
    a0dc:	97000115 	stw	fp,4(r18)
    a0e0:	d8c02015 	stw	r3,128(sp)
    a0e4:	dc001f15 	stw	r16,124(sp)
    a0e8:	3c3ff60e 	bge	r7,r16,a0c4 <__alt_mem_descriptor_memory+0xdefca0c4>
    a0ec:	9809883a 	mov	r4,r19
    a0f0:	b80b883a 	mov	r5,r23
    a0f4:	b00d883a 	mov	r6,r22
    a0f8:	d9c03e15 	stw	r7,248(sp)
    a0fc:	00117580 	call	11758 <__ssprint_r>
    a100:	d9c03e17 	ldw	r7,248(sp)
    a104:	103bee1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a108:	ad7ffc04 	addi	r21,r21,-16
    a10c:	d8c02017 	ldw	r3,128(sp)
    a110:	dc001f17 	ldw	r16,124(sp)
    a114:	dc800404 	addi	r18,sp,16
    a118:	e57fed16 	blt	fp,r21,a0d0 <__alt_mem_descriptor_memory+0xdefca0d0>
    a11c:	dac02b17 	ldw	r11,172(sp)
    a120:	1d47883a 	add	r3,r3,r21
    a124:	84000044 	addi	r16,r16,1
    a128:	92c00015 	stw	r11,0(r18)
    a12c:	95400115 	stw	r21,4(r18)
    a130:	d8c02015 	stw	r3,128(sp)
    a134:	dc001f15 	stw	r16,124(sp)
    a138:	008001c4 	movi	r2,7
    a13c:	143f4d0e 	bge	r2,r16,9e74 <__alt_mem_descriptor_memory+0xdefc9e74>
    a140:	d9002f17 	ldw	r4,188(sp)
    a144:	b80b883a 	mov	r5,r23
    a148:	b00d883a 	mov	r6,r22
    a14c:	00117580 	call	11758 <__ssprint_r>
    a150:	103bdb1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a154:	d8c02017 	ldw	r3,128(sp)
    a158:	dc001f17 	ldw	r16,124(sp)
    a15c:	dc800404 	addi	r18,sp,16
    a160:	003f4506 	br	9e78 <__alt_mem_descriptor_memory+0xdefc9e78>
    a164:	00800084 	movi	r2,2
    a168:	9f06b03a 	or	r3,r19,fp
    a16c:	003d3806 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    a170:	dac02d17 	ldw	r11,180(sp)
    a174:	0039883a 	mov	fp,zero
    a178:	0005883a 	mov	r2,zero
    a17c:	5cc00017 	ldw	r19,0(r11)
    a180:	5ac00104 	addi	r11,r11,4
    a184:	dac02d15 	stw	r11,180(sp)
    a188:	9807883a 	mov	r3,r19
    a18c:	003d3006 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    a190:	1cc00017 	ldw	r19,0(r3)
    a194:	dac02d17 	ldw	r11,180(sp)
    a198:	9839d7fa 	srai	fp,r19,31
    a19c:	5ac00104 	addi	r11,r11,4
    a1a0:	dac02d15 	stw	r11,180(sp)
    a1a4:	e005883a 	mov	r2,fp
    a1a8:	003c0a06 	br	91d4 <__alt_mem_descriptor_memory+0xdefc91d4>
    a1ac:	db002d17 	ldw	r12,180(sp)
    a1b0:	0039883a 	mov	fp,zero
    a1b4:	00800044 	movi	r2,1
    a1b8:	64c00017 	ldw	r19,0(r12)
    a1bc:	63000104 	addi	r12,r12,4
    a1c0:	db002d15 	stw	r12,180(sp)
    a1c4:	9807883a 	mov	r3,r19
    a1c8:	003d2106 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    a1cc:	d9002f17 	ldw	r4,188(sp)
    a1d0:	b80b883a 	mov	r5,r23
    a1d4:	b00d883a 	mov	r6,r22
    a1d8:	00117580 	call	11758 <__ssprint_r>
    a1dc:	103bb81e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a1e0:	d8c02017 	ldw	r3,128(sp)
    a1e4:	da000404 	addi	r8,sp,16
    a1e8:	db003117 	ldw	r12,196(sp)
    a1ec:	dac03417 	ldw	r11,208(sp)
    a1f0:	d8802617 	ldw	r2,152(sp)
    a1f4:	62e5883a 	add	r18,r12,r11
    a1f8:	db003317 	ldw	r12,204(sp)
    a1fc:	13000216 	blt	r2,r12,a208 <___svfprintf_internal_r+0x1468>
    a200:	8900004c 	andi	r4,r17,1
    a204:	20000c26 	beq	r4,zero,a238 <___svfprintf_internal_r+0x1498>
    a208:	dac03917 	ldw	r11,228(sp)
    a20c:	d9001f17 	ldw	r4,124(sp)
    a210:	db003517 	ldw	r12,212(sp)
    a214:	1ac7883a 	add	r3,r3,r11
    a218:	21000044 	addi	r4,r4,1
    a21c:	43000015 	stw	r12,0(r8)
    a220:	42c00115 	stw	r11,4(r8)
    a224:	d8c02015 	stw	r3,128(sp)
    a228:	d9001f15 	stw	r4,124(sp)
    a22c:	014001c4 	movi	r5,7
    a230:	2901b716 	blt	r5,r4,a910 <___svfprintf_internal_r+0x1b70>
    a234:	42000204 	addi	r8,r8,8
    a238:	dac03317 	ldw	r11,204(sp)
    a23c:	8489c83a 	sub	r4,r16,r18
    a240:	5885c83a 	sub	r2,r11,r2
    a244:	1021883a 	mov	r16,r2
    a248:	2080010e 	bge	r4,r2,a250 <___svfprintf_internal_r+0x14b0>
    a24c:	2021883a 	mov	r16,r4
    a250:	04000a0e 	bge	zero,r16,a27c <___svfprintf_internal_r+0x14dc>
    a254:	d9001f17 	ldw	r4,124(sp)
    a258:	1c07883a 	add	r3,r3,r16
    a25c:	44800015 	stw	r18,0(r8)
    a260:	21000044 	addi	r4,r4,1
    a264:	44000115 	stw	r16,4(r8)
    a268:	d8c02015 	stw	r3,128(sp)
    a26c:	d9001f15 	stw	r4,124(sp)
    a270:	014001c4 	movi	r5,7
    a274:	2901bf16 	blt	r5,r4,a974 <___svfprintf_internal_r+0x1bd4>
    a278:	42000204 	addi	r8,r8,8
    a27c:	8001bb16 	blt	r16,zero,a96c <___svfprintf_internal_r+0x1bcc>
    a280:	1421c83a 	sub	r16,r2,r16
    a284:	043ca80e 	bge	zero,r16,9528 <__alt_mem_descriptor_memory+0xdefc9528>
    a288:	04800404 	movi	r18,16
    a28c:	d8801f17 	ldw	r2,124(sp)
    a290:	943f050e 	bge	r18,r16,9ea8 <__alt_mem_descriptor_memory+0xdefc9ea8>
    a294:	01400174 	movhi	r5,5
    a298:	2975a484 	addi	r5,r5,-10606
    a29c:	d9402b15 	stw	r5,172(sp)
    a2a0:	054001c4 	movi	r21,7
    a2a4:	dcc02f17 	ldw	r19,188(sp)
    a2a8:	00000306 	br	a2b8 <___svfprintf_internal_r+0x1518>
    a2ac:	42000204 	addi	r8,r8,8
    a2b0:	843ffc04 	addi	r16,r16,-16
    a2b4:	943eff0e 	bge	r18,r16,9eb4 <__alt_mem_descriptor_memory+0xdefc9eb4>
    a2b8:	18c00404 	addi	r3,r3,16
    a2bc:	10800044 	addi	r2,r2,1
    a2c0:	45000015 	stw	r20,0(r8)
    a2c4:	44800115 	stw	r18,4(r8)
    a2c8:	d8c02015 	stw	r3,128(sp)
    a2cc:	d8801f15 	stw	r2,124(sp)
    a2d0:	a8bff60e 	bge	r21,r2,a2ac <__alt_mem_descriptor_memory+0xdefca2ac>
    a2d4:	9809883a 	mov	r4,r19
    a2d8:	b80b883a 	mov	r5,r23
    a2dc:	b00d883a 	mov	r6,r22
    a2e0:	00117580 	call	11758 <__ssprint_r>
    a2e4:	103b761e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a2e8:	d8c02017 	ldw	r3,128(sp)
    a2ec:	d8801f17 	ldw	r2,124(sp)
    a2f0:	da000404 	addi	r8,sp,16
    a2f4:	003fee06 	br	a2b0 <__alt_mem_descriptor_memory+0xdefca2b0>
    a2f8:	8888703a 	and	r4,r17,r2
    a2fc:	203eb31e 	bne	r4,zero,9dcc <__alt_mem_descriptor_memory+0xdefc9dcc>
    a300:	dc001f17 	ldw	r16,124(sp)
    a304:	db003117 	ldw	r12,196(sp)
    a308:	40800115 	stw	r2,4(r8)
    a30c:	84000044 	addi	r16,r16,1
    a310:	43000015 	stw	r12,0(r8)
    a314:	d8c02015 	stw	r3,128(sp)
    a318:	dc001f15 	stw	r16,124(sp)
    a31c:	008001c4 	movi	r2,7
    a320:	143f8716 	blt	r2,r16,a140 <__alt_mem_descriptor_memory+0xdefca140>
    a324:	44800204 	addi	r18,r8,8
    a328:	003ed306 	br	9e78 <__alt_mem_descriptor_memory+0xdefc9e78>
    a32c:	d9002f17 	ldw	r4,188(sp)
    a330:	b80b883a 	mov	r5,r23
    a334:	b00d883a 	mov	r6,r22
    a338:	00117580 	call	11758 <__ssprint_r>
    a33c:	103b601e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a340:	d8c02017 	ldw	r3,128(sp)
    a344:	dc001f17 	ldw	r16,124(sp)
    a348:	da000404 	addi	r8,sp,16
    a34c:	003eaa06 	br	9df8 <__alt_mem_descriptor_memory+0xdefc9df8>
    a350:	d9002f17 	ldw	r4,188(sp)
    a354:	b80b883a 	mov	r5,r23
    a358:	b00d883a 	mov	r6,r22
    a35c:	00117580 	call	11758 <__ssprint_r>
    a360:	103b571e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a364:	d8c02017 	ldw	r3,128(sp)
    a368:	dc001f17 	ldw	r16,124(sp)
    a36c:	dc800404 	addi	r18,sp,16
    a370:	003eac06 	br	9e24 <__alt_mem_descriptor_memory+0xdefc9e24>
    a374:	d9002f17 	ldw	r4,188(sp)
    a378:	b80b883a 	mov	r5,r23
    a37c:	b00d883a 	mov	r6,r22
    a380:	00117580 	call	11758 <__ssprint_r>
    a384:	103b4e1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a388:	d8c02017 	ldw	r3,128(sp)
    a38c:	da000404 	addi	r8,sp,16
    a390:	003c2406 	br	9424 <__alt_mem_descriptor_memory+0xdefc9424>
    a394:	da004015 	stw	r8,256(sp)
    a398:	da403f15 	stw	r9,252(sp)
    a39c:	00115040 	call	11504 <__fpclassifyd>
    a3a0:	da004017 	ldw	r8,256(sp)
    a3a4:	da403f17 	ldw	r9,252(sp)
    a3a8:	1000951e 	bne	r2,zero,a600 <___svfprintf_internal_r+0x1860>
    a3ac:	008011c4 	movi	r2,71
    a3b0:	1400fb16 	blt	r2,r16,a7a0 <___svfprintf_internal_r+0x1a00>
    a3b4:	03000174 	movhi	r12,5
    a3b8:	63359604 	addi	r12,r12,-10664
    a3bc:	db003115 	stw	r12,196(sp)
    a3c0:	00c000c4 	movi	r3,3
    a3c4:	00bfdfc4 	movi	r2,-129
    a3c8:	d8c02a15 	stw	r3,168(sp)
    a3cc:	88a2703a 	and	r17,r17,r2
    a3d0:	dd402783 	ldbu	r21,158(sp)
    a3d4:	dcc02d15 	stw	r19,180(sp)
    a3d8:	1825883a 	mov	r18,r3
    a3dc:	d8003215 	stw	zero,200(sp)
    a3e0:	d8003415 	stw	zero,208(sp)
    a3e4:	003ba706 	br	9284 <__alt_mem_descriptor_memory+0xdefc9284>
    a3e8:	8880040c 	andi	r2,r17,16
    a3ec:	1000091e 	bne	r2,zero,a414 <___svfprintf_internal_r+0x1674>
    a3f0:	8c40100c 	andi	r17,r17,64
    a3f4:	88000726 	beq	r17,zero,a414 <___svfprintf_internal_r+0x1674>
    a3f8:	db002d17 	ldw	r12,180(sp)
    a3fc:	dac03017 	ldw	r11,192(sp)
    a400:	60800017 	ldw	r2,0(r12)
    a404:	63000104 	addi	r12,r12,4
    a408:	db002d15 	stw	r12,180(sp)
    a40c:	12c0000d 	sth	r11,0(r2)
    a410:	003a8f06 	br	8e50 <__alt_mem_descriptor_memory+0xdefc8e50>
    a414:	db002d17 	ldw	r12,180(sp)
    a418:	dac03017 	ldw	r11,192(sp)
    a41c:	60800017 	ldw	r2,0(r12)
    a420:	63000104 	addi	r12,r12,4
    a424:	db002d15 	stw	r12,180(sp)
    a428:	12c00015 	stw	r11,0(r2)
    a42c:	003a8806 	br	8e50 <__alt_mem_descriptor_memory+0xdefc8e50>
    a430:	88c0100c 	andi	r3,r17,64
    a434:	1800e926 	beq	r3,zero,a7dc <___svfprintf_internal_r+0x1a3c>
    a438:	dac02d17 	ldw	r11,180(sp)
    a43c:	14c0000b 	ldhu	r19,0(r2)
    a440:	0039883a 	mov	fp,zero
    a444:	5ac00104 	addi	r11,r11,4
    a448:	dac02d15 	stw	r11,180(sp)
    a44c:	003d1406 	br	98a0 <__alt_mem_descriptor_memory+0xdefc98a0>
    a450:	1c000007 	ldb	r16,0(r3)
    a454:	1805883a 	mov	r2,r3
    a458:	003aa706 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    a45c:	00800084 	movi	r2,2
    a460:	003c7b06 	br	9650 <__alt_mem_descriptor_memory+0xdefc9650>
    a464:	01000174 	movhi	r4,5
    a468:	2135a484 	addi	r4,r4,-10606
    a46c:	d9002b15 	stw	r4,172(sp)
    a470:	dac02b17 	ldw	r11,172(sp)
    a474:	1c87883a 	add	r3,r3,r18
    a478:	10800044 	addi	r2,r2,1
    a47c:	42c00015 	stw	r11,0(r8)
    a480:	44800115 	stw	r18,4(r8)
    a484:	d8c02015 	stw	r3,128(sp)
    a488:	d8801f15 	stw	r2,124(sp)
    a48c:	010001c4 	movi	r4,7
    a490:	20bf4e16 	blt	r4,r2,a1cc <__alt_mem_descriptor_memory+0xdefca1cc>
    a494:	42000204 	addi	r8,r8,8
    a498:	003f5306 	br	a1e8 <__alt_mem_descriptor_memory+0xdefca1e8>
    a49c:	01000174 	movhi	r4,5
    a4a0:	2135a484 	addi	r4,r4,-10606
    a4a4:	d9002b15 	stw	r4,172(sp)
    a4a8:	003c0806 	br	94cc <__alt_mem_descriptor_memory+0xdefc94cc>
    a4ac:	d9002f17 	ldw	r4,188(sp)
    a4b0:	b80b883a 	mov	r5,r23
    a4b4:	b00d883a 	mov	r6,r22
    a4b8:	00117580 	call	11758 <__ssprint_r>
    a4bc:	103b001e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a4c0:	d8c02017 	ldw	r3,128(sp)
    a4c4:	da000404 	addi	r8,sp,16
    a4c8:	003dc606 	br	9be4 <__alt_mem_descriptor_memory+0xdefc9be4>
    a4cc:	d8801f17 	ldw	r2,124(sp)
    a4d0:	03000174 	movhi	r12,5
    a4d4:	01000044 	movi	r4,1
    a4d8:	18c00044 	addi	r3,r3,1
    a4dc:	10800044 	addi	r2,r2,1
    a4e0:	6335a404 	addi	r12,r12,-10608
    a4e4:	41000115 	stw	r4,4(r8)
    a4e8:	43000015 	stw	r12,0(r8)
    a4ec:	d8c02015 	stw	r3,128(sp)
    a4f0:	d8801f15 	stw	r2,124(sp)
    a4f4:	010001c4 	movi	r4,7
    a4f8:	2080ad16 	blt	r4,r2,a7b0 <___svfprintf_internal_r+0x1a10>
    a4fc:	42000204 	addi	r8,r8,8
    a500:	8000041e 	bne	r16,zero,a514 <___svfprintf_internal_r+0x1774>
    a504:	dac03317 	ldw	r11,204(sp)
    a508:	5800021e 	bne	r11,zero,a514 <___svfprintf_internal_r+0x1774>
    a50c:	8880004c 	andi	r2,r17,1
    a510:	103c0526 	beq	r2,zero,9528 <__alt_mem_descriptor_memory+0xdefc9528>
    a514:	db003917 	ldw	r12,228(sp)
    a518:	d8801f17 	ldw	r2,124(sp)
    a51c:	dac03517 	ldw	r11,212(sp)
    a520:	1b07883a 	add	r3,r3,r12
    a524:	10800044 	addi	r2,r2,1
    a528:	42c00015 	stw	r11,0(r8)
    a52c:	43000115 	stw	r12,4(r8)
    a530:	d8c02015 	stw	r3,128(sp)
    a534:	d8801f15 	stw	r2,124(sp)
    a538:	010001c4 	movi	r4,7
    a53c:	20818816 	blt	r4,r2,ab60 <___svfprintf_internal_r+0x1dc0>
    a540:	42000204 	addi	r8,r8,8
    a544:	0421c83a 	sub	r16,zero,r16
    a548:	0400bc0e 	bge	zero,r16,a83c <___svfprintf_internal_r+0x1a9c>
    a54c:	04800404 	movi	r18,16
    a550:	9400f80e 	bge	r18,r16,a934 <___svfprintf_internal_r+0x1b94>
    a554:	01000174 	movhi	r4,5
    a558:	2135a484 	addi	r4,r4,-10606
    a55c:	d9002b15 	stw	r4,172(sp)
    a560:	054001c4 	movi	r21,7
    a564:	dcc02f17 	ldw	r19,188(sp)
    a568:	00000306 	br	a578 <___svfprintf_internal_r+0x17d8>
    a56c:	42000204 	addi	r8,r8,8
    a570:	843ffc04 	addi	r16,r16,-16
    a574:	9400f20e 	bge	r18,r16,a940 <___svfprintf_internal_r+0x1ba0>
    a578:	18c00404 	addi	r3,r3,16
    a57c:	10800044 	addi	r2,r2,1
    a580:	45000015 	stw	r20,0(r8)
    a584:	44800115 	stw	r18,4(r8)
    a588:	d8c02015 	stw	r3,128(sp)
    a58c:	d8801f15 	stw	r2,124(sp)
    a590:	a8bff60e 	bge	r21,r2,a56c <__alt_mem_descriptor_memory+0xdefca56c>
    a594:	9809883a 	mov	r4,r19
    a598:	b80b883a 	mov	r5,r23
    a59c:	b00d883a 	mov	r6,r22
    a5a0:	00117580 	call	11758 <__ssprint_r>
    a5a4:	103ac61e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a5a8:	d8c02017 	ldw	r3,128(sp)
    a5ac:	d8801f17 	ldw	r2,124(sp)
    a5b0:	da000404 	addi	r8,sp,16
    a5b4:	003fee06 	br	a570 <__alt_mem_descriptor_memory+0xdefca570>
    a5b8:	db002e17 	ldw	r12,184(sp)
    a5bc:	1805883a 	mov	r2,r3
    a5c0:	dac02d15 	stw	r11,180(sp)
    a5c4:	0319c83a 	sub	r12,zero,r12
    a5c8:	db002e15 	stw	r12,184(sp)
    a5cc:	003ad106 	br	9114 <__alt_mem_descriptor_memory+0xdefc9114>
    a5d0:	18800044 	addi	r2,r3,1
    a5d4:	8c400814 	ori	r17,r17,32
    a5d8:	1c000047 	ldb	r16,1(r3)
    a5dc:	003a4606 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    a5e0:	d9002f17 	ldw	r4,188(sp)
    a5e4:	b80b883a 	mov	r5,r23
    a5e8:	b00d883a 	mov	r6,r22
    a5ec:	00117580 	call	11758 <__ssprint_r>
    a5f0:	103ab31e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a5f4:	d8c02017 	ldw	r3,128(sp)
    a5f8:	da000404 	addi	r8,sp,16
    a5fc:	003d8a06 	br	9c28 <__alt_mem_descriptor_memory+0xdefc9c28>
    a600:	057ff7c4 	movi	r21,-33
    a604:	00bfffc4 	movi	r2,-1
    a608:	856a703a 	and	r21,r16,r21
    a60c:	48807126 	beq	r9,r2,a7d4 <___svfprintf_internal_r+0x1a34>
    a610:	008011c4 	movi	r2,71
    a614:	a8814f26 	beq	r21,r2,ab54 <___svfprintf_internal_r+0x1db4>
    a618:	db003817 	ldw	r12,224(sp)
    a61c:	8ac04014 	ori	r11,r17,256
    a620:	dac02d15 	stw	r11,180(sp)
    a624:	60015816 	blt	r12,zero,ab88 <___svfprintf_internal_r+0x1de8>
    a628:	dc803817 	ldw	r18,224(sp)
    a62c:	d8002a05 	stb	zero,168(sp)
    a630:	00801984 	movi	r2,102
    a634:	80808c26 	beq	r16,r2,a868 <___svfprintf_internal_r+0x1ac8>
    a638:	00801184 	movi	r2,70
    a63c:	80808a26 	beq	r16,r2,a868 <___svfprintf_internal_r+0x1ac8>
    a640:	00801144 	movi	r2,69
    a644:	a8815426 	beq	r21,r2,ab98 <___svfprintf_internal_r+0x1df8>
    a648:	4839883a 	mov	fp,r9
    a64c:	d8802604 	addi	r2,sp,152
    a650:	d8800115 	stw	r2,4(sp)
    a654:	d9002f17 	ldw	r4,188(sp)
    a658:	d8802504 	addi	r2,sp,148
    a65c:	d9403717 	ldw	r5,220(sp)
    a660:	d8800215 	stw	r2,8(sp)
    a664:	d8802104 	addi	r2,sp,132
    a668:	df000015 	stw	fp,0(sp)
    a66c:	d8800315 	stw	r2,12(sp)
    a670:	900d883a 	mov	r6,r18
    a674:	01c00084 	movi	r7,2
    a678:	da004015 	stw	r8,256(sp)
    a67c:	da403f15 	stw	r9,252(sp)
    a680:	000d1f80 	call	d1f8 <_dtoa_r>
    a684:	d8803115 	stw	r2,196(sp)
    a688:	008019c4 	movi	r2,103
    a68c:	da004017 	ldw	r8,256(sp)
    a690:	da403f17 	ldw	r9,252(sp)
    a694:	80800226 	beq	r16,r2,a6a0 <___svfprintf_internal_r+0x1900>
    a698:	008011c4 	movi	r2,71
    a69c:	8080841e 	bne	r16,r2,a8b0 <___svfprintf_internal_r+0x1b10>
    a6a0:	8880004c 	andi	r2,r17,1
    a6a4:	10015126 	beq	r2,zero,abec <___svfprintf_internal_r+0x1e4c>
    a6a8:	db003117 	ldw	r12,196(sp)
    a6ac:	6715883a 	add	r10,r12,fp
    a6b0:	d9003717 	ldw	r4,220(sp)
    a6b4:	900b883a 	mov	r5,r18
    a6b8:	000d883a 	mov	r6,zero
    a6bc:	000f883a 	mov	r7,zero
    a6c0:	da004015 	stw	r8,256(sp)
    a6c4:	da403f15 	stw	r9,252(sp)
    a6c8:	da803e15 	stw	r10,248(sp)
    a6cc:	00163c80 	call	163c8 <__eqdf2>
    a6d0:	da004017 	ldw	r8,256(sp)
    a6d4:	da403f17 	ldw	r9,252(sp)
    a6d8:	da803e17 	ldw	r10,248(sp)
    a6dc:	1000d926 	beq	r2,zero,aa44 <___svfprintf_internal_r+0x1ca4>
    a6e0:	d8802117 	ldw	r2,132(sp)
    a6e4:	1280062e 	bgeu	r2,r10,a700 <___svfprintf_internal_r+0x1960>
    a6e8:	01000c04 	movi	r4,48
    a6ec:	10c00044 	addi	r3,r2,1
    a6f0:	d8c02115 	stw	r3,132(sp)
    a6f4:	11000005 	stb	r4,0(r2)
    a6f8:	d8802117 	ldw	r2,132(sp)
    a6fc:	12bffb36 	bltu	r2,r10,a6ec <__alt_mem_descriptor_memory+0xdefca6ec>
    a700:	db003117 	ldw	r12,196(sp)
    a704:	1305c83a 	sub	r2,r2,r12
    a708:	d8803315 	stw	r2,204(sp)
    a70c:	008011c4 	movi	r2,71
    a710:	a880b626 	beq	r21,r2,a9ec <___svfprintf_internal_r+0x1c4c>
    a714:	00801944 	movi	r2,101
    a718:	14017e0e 	bge	r2,r16,ad14 <___svfprintf_internal_r+0x1f74>
    a71c:	00801984 	movi	r2,102
    a720:	80812826 	beq	r16,r2,abc4 <___svfprintf_internal_r+0x1e24>
    a724:	db002617 	ldw	r12,152(sp)
    a728:	db003415 	stw	r12,208(sp)
    a72c:	db003417 	ldw	r12,208(sp)
    a730:	dac03317 	ldw	r11,204(sp)
    a734:	62c11a16 	blt	r12,r11,aba0 <___svfprintf_internal_r+0x1e00>
    a738:	8c40004c 	andi	r17,r17,1
    a73c:	88013d1e 	bne	r17,zero,ac34 <___svfprintf_internal_r+0x1e94>
    a740:	6005883a 	mov	r2,r12
    a744:	60012716 	blt	r12,zero,abe4 <___svfprintf_internal_r+0x1e44>
    a748:	dc803417 	ldw	r18,208(sp)
    a74c:	df002a07 	ldb	fp,168(sp)
    a750:	e000b01e 	bne	fp,zero,aa14 <___svfprintf_internal_r+0x1c74>
    a754:	dc402d17 	ldw	r17,180(sp)
    a758:	dd402783 	ldbu	r21,158(sp)
    a75c:	d8802a15 	stw	r2,168(sp)
    a760:	dcc02d15 	stw	r19,180(sp)
    a764:	d8003215 	stw	zero,200(sp)
    a768:	003ac606 	br	9284 <__alt_mem_descriptor_memory+0xdefc9284>
    a76c:	00800174 	movhi	r2,5
    a770:	10b59404 	addi	r2,r2,-10672
    a774:	d8803115 	stw	r2,196(sp)
    a778:	003be506 	br	9710 <__alt_mem_descriptor_memory+0xdefc9710>
    a77c:	d9002f17 	ldw	r4,188(sp)
    a780:	04001004 	movi	r16,64
    a784:	800b883a 	mov	r5,r16
    a788:	00074e80 	call	74e8 <_malloc_r>
    a78c:	b8800015 	stw	r2,0(r23)
    a790:	b8800415 	stw	r2,16(r23)
    a794:	10016126 	beq	r2,zero,ad1c <___svfprintf_internal_r+0x1f7c>
    a798:	bc000515 	stw	r16,20(r23)
    a79c:	00399a06 	br	8e08 <__alt_mem_descriptor_memory+0xdefc8e08>
    a7a0:	00800174 	movhi	r2,5
    a7a4:	10b59704 	addi	r2,r2,-10660
    a7a8:	d8803115 	stw	r2,196(sp)
    a7ac:	003f0406 	br	a3c0 <__alt_mem_descriptor_memory+0xdefca3c0>
    a7b0:	d9002f17 	ldw	r4,188(sp)
    a7b4:	b80b883a 	mov	r5,r23
    a7b8:	b00d883a 	mov	r6,r22
    a7bc:	00117580 	call	11758 <__ssprint_r>
    a7c0:	103a3f1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a7c4:	dc002617 	ldw	r16,152(sp)
    a7c8:	d8c02017 	ldw	r3,128(sp)
    a7cc:	da000404 	addi	r8,sp,16
    a7d0:	003f4b06 	br	a500 <__alt_mem_descriptor_memory+0xdefca500>
    a7d4:	02400184 	movi	r9,6
    a7d8:	003f8f06 	br	a618 <__alt_mem_descriptor_memory+0xdefca618>
    a7dc:	db002d17 	ldw	r12,180(sp)
    a7e0:	14c00017 	ldw	r19,0(r2)
    a7e4:	0039883a 	mov	fp,zero
    a7e8:	63000104 	addi	r12,r12,4
    a7ec:	db002d15 	stw	r12,180(sp)
    a7f0:	003c2b06 	br	98a0 <__alt_mem_descriptor_memory+0xdefc98a0>
    a7f4:	d8c03117 	ldw	r3,196(sp)
    a7f8:	b0e5c83a 	sub	r18,r22,r3
    a7fc:	003a9c06 	br	9270 <__alt_mem_descriptor_memory+0xdefc9270>
    a800:	da004015 	stw	r8,256(sp)
    a804:	0008d080 	call	8d08 <strlen>
    a808:	1025883a 	mov	r18,r2
    a80c:	da004017 	ldw	r8,256(sp)
    a810:	903c450e 	bge	r18,zero,9928 <__alt_mem_descriptor_memory+0xdefc9928>
    a814:	0005883a 	mov	r2,zero
    a818:	003c4306 	br	9928 <__alt_mem_descriptor_memory+0xdefc9928>
    a81c:	d9002f17 	ldw	r4,188(sp)
    a820:	b80b883a 	mov	r5,r23
    a824:	b00d883a 	mov	r6,r22
    a828:	00117580 	call	11758 <__ssprint_r>
    a82c:	103a241e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a830:	d8c02017 	ldw	r3,128(sp)
    a834:	d8801f17 	ldw	r2,124(sp)
    a838:	da000404 	addi	r8,sp,16
    a83c:	db003317 	ldw	r12,204(sp)
    a840:	dac03117 	ldw	r11,196(sp)
    a844:	10800044 	addi	r2,r2,1
    a848:	60c7883a 	add	r3,r12,r3
    a84c:	42c00015 	stw	r11,0(r8)
    a850:	43000115 	stw	r12,4(r8)
    a854:	d8c02015 	stw	r3,128(sp)
    a858:	d8801f15 	stw	r2,124(sp)
    a85c:	010001c4 	movi	r4,7
    a860:	20bb300e 	bge	r4,r2,9524 <__alt_mem_descriptor_memory+0xdefc9524>
    a864:	003d9c06 	br	9ed8 <__alt_mem_descriptor_memory+0xdefc9ed8>
    a868:	d8802604 	addi	r2,sp,152
    a86c:	d8800115 	stw	r2,4(sp)
    a870:	d9002f17 	ldw	r4,188(sp)
    a874:	d8802504 	addi	r2,sp,148
    a878:	d9403717 	ldw	r5,220(sp)
    a87c:	d8800215 	stw	r2,8(sp)
    a880:	d8802104 	addi	r2,sp,132
    a884:	da400015 	stw	r9,0(sp)
    a888:	d8800315 	stw	r2,12(sp)
    a88c:	900d883a 	mov	r6,r18
    a890:	01c000c4 	movi	r7,3
    a894:	da004015 	stw	r8,256(sp)
    a898:	da403f15 	stw	r9,252(sp)
    a89c:	000d1f80 	call	d1f8 <_dtoa_r>
    a8a0:	da403f17 	ldw	r9,252(sp)
    a8a4:	da004017 	ldw	r8,256(sp)
    a8a8:	d8803115 	stw	r2,196(sp)
    a8ac:	4839883a 	mov	fp,r9
    a8b0:	dac03117 	ldw	r11,196(sp)
    a8b4:	00801184 	movi	r2,70
    a8b8:	5f15883a 	add	r10,r11,fp
    a8bc:	a8bf7c1e 	bne	r21,r2,a6b0 <__alt_mem_descriptor_memory+0xdefca6b0>
    a8c0:	59000007 	ldb	r4,0(r11)
    a8c4:	00800c04 	movi	r2,48
    a8c8:	2080ca26 	beq	r4,r2,abf4 <___svfprintf_internal_r+0x1e54>
    a8cc:	d8c02617 	ldw	r3,152(sp)
    a8d0:	50d5883a 	add	r10,r10,r3
    a8d4:	003f7606 	br	a6b0 <__alt_mem_descriptor_memory+0xdefca6b0>
    a8d8:	01000174 	movhi	r4,5
    a8dc:	2135a884 	addi	r4,r4,-10590
    a8e0:	d9003615 	stw	r4,216(sp)
    a8e4:	003aa606 	br	9380 <__alt_mem_descriptor_memory+0xdefc9380>
    a8e8:	0025883a 	mov	r18,zero
    a8ec:	003dc306 	br	9ffc <__alt_mem_descriptor_memory+0xdefc9ffc>
    a8f0:	d9002f17 	ldw	r4,188(sp)
    a8f4:	b80b883a 	mov	r5,r23
    a8f8:	b00d883a 	mov	r6,r22
    a8fc:	00117580 	call	11758 <__ssprint_r>
    a900:	1039ef1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a904:	d8c02017 	ldw	r3,128(sp)
    a908:	da000404 	addi	r8,sp,16
    a90c:	003dba06 	br	9ff8 <__alt_mem_descriptor_memory+0xdefc9ff8>
    a910:	d9002f17 	ldw	r4,188(sp)
    a914:	b80b883a 	mov	r5,r23
    a918:	b00d883a 	mov	r6,r22
    a91c:	00117580 	call	11758 <__ssprint_r>
    a920:	1039e71e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a924:	d8802617 	ldw	r2,152(sp)
    a928:	d8c02017 	ldw	r3,128(sp)
    a92c:	da000404 	addi	r8,sp,16
    a930:	003e4106 	br	a238 <__alt_mem_descriptor_memory+0xdefca238>
    a934:	03000174 	movhi	r12,5
    a938:	6335a484 	addi	r12,r12,-10606
    a93c:	db002b15 	stw	r12,172(sp)
    a940:	dac02b17 	ldw	r11,172(sp)
    a944:	1c07883a 	add	r3,r3,r16
    a948:	10800044 	addi	r2,r2,1
    a94c:	42c00015 	stw	r11,0(r8)
    a950:	44000115 	stw	r16,4(r8)
    a954:	d8c02015 	stw	r3,128(sp)
    a958:	d8801f15 	stw	r2,124(sp)
    a95c:	010001c4 	movi	r4,7
    a960:	20bfae16 	blt	r4,r2,a81c <__alt_mem_descriptor_memory+0xdefca81c>
    a964:	42000204 	addi	r8,r8,8
    a968:	003fb406 	br	a83c <__alt_mem_descriptor_memory+0xdefca83c>
    a96c:	0021883a 	mov	r16,zero
    a970:	003e4306 	br	a280 <__alt_mem_descriptor_memory+0xdefca280>
    a974:	d9002f17 	ldw	r4,188(sp)
    a978:	b80b883a 	mov	r5,r23
    a97c:	b00d883a 	mov	r6,r22
    a980:	00117580 	call	11758 <__ssprint_r>
    a984:	1039ce1e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    a988:	d8802617 	ldw	r2,152(sp)
    a98c:	db003317 	ldw	r12,204(sp)
    a990:	d8c02017 	ldw	r3,128(sp)
    a994:	da000404 	addi	r8,sp,16
    a998:	6085c83a 	sub	r2,r12,r2
    a99c:	003e3706 	br	a27c <__alt_mem_descriptor_memory+0xdefca27c>
    a9a0:	00800184 	movi	r2,6
    a9a4:	1240012e 	bgeu	r2,r9,a9ac <___svfprintf_internal_r+0x1c0c>
    a9a8:	1013883a 	mov	r9,r2
    a9ac:	4825883a 	mov	r18,r9
    a9b0:	4805883a 	mov	r2,r9
    a9b4:	4800a416 	blt	r9,zero,ac48 <___svfprintf_internal_r+0x1ea8>
    a9b8:	d8802a15 	stw	r2,168(sp)
    a9bc:	00800174 	movhi	r2,5
    a9c0:	10b5a204 	addi	r2,r2,-10616
    a9c4:	d8803115 	stw	r2,196(sp)
    a9c8:	dcc02d15 	stw	r19,180(sp)
    a9cc:	d8003215 	stw	zero,200(sp)
    a9d0:	d8003415 	stw	zero,208(sp)
    a9d4:	0005883a 	mov	r2,zero
    a9d8:	003a3106 	br	92a0 <__alt_mem_descriptor_memory+0xdefc92a0>
    a9dc:	03000174 	movhi	r12,5
    a9e0:	6335a884 	addi	r12,r12,-10590
    a9e4:	db003615 	stw	r12,216(sp)
    a9e8:	003af406 	br	95bc <__alt_mem_descriptor_memory+0xdefc95bc>
    a9ec:	d8c02617 	ldw	r3,152(sp)
    a9f0:	00bfff44 	movi	r2,-3
    a9f4:	18801516 	blt	r3,r2,aa4c <___svfprintf_internal_r+0x1cac>
    a9f8:	48c01416 	blt	r9,r3,aa4c <___svfprintf_internal_r+0x1cac>
    a9fc:	d8c03415 	stw	r3,208(sp)
    aa00:	040019c4 	movi	r16,103
    aa04:	003f4906 	br	a72c <__alt_mem_descriptor_memory+0xdefca72c>
    aa08:	05400b44 	movi	r21,45
    aa0c:	dd402785 	stb	r21,158(sp)
    aa10:	003b3a06 	br	96fc <__alt_mem_descriptor_memory+0xdefc96fc>
    aa14:	00c00b44 	movi	r3,45
    aa18:	d8802a15 	stw	r2,168(sp)
    aa1c:	dc402d17 	ldw	r17,180(sp)
    aa20:	d8c02785 	stb	r3,158(sp)
    aa24:	dcc02d15 	stw	r19,180(sp)
    aa28:	d8003215 	stw	zero,200(sp)
    aa2c:	00800b44 	movi	r2,45
    aa30:	003a1806 	br	9294 <__alt_mem_descriptor_memory+0xdefc9294>
    aa34:	01000174 	movhi	r4,5
    aa38:	2135a484 	addi	r4,r4,-10606
    aa3c:	d9002b15 	stw	r4,172(sp)
    aa40:	003cc306 	br	9d50 <__alt_mem_descriptor_memory+0xdefc9d50>
    aa44:	5005883a 	mov	r2,r10
    aa48:	003f2d06 	br	a700 <__alt_mem_descriptor_memory+0xdefca700>
    aa4c:	843fff84 	addi	r16,r16,-2
    aa50:	1f3fffc4 	addi	fp,r3,-1
    aa54:	df002615 	stw	fp,152(sp)
    aa58:	dc0022c5 	stb	r16,139(sp)
    aa5c:	e000a216 	blt	fp,zero,ace8 <___svfprintf_internal_r+0x1f48>
    aa60:	00800ac4 	movi	r2,43
    aa64:	d8802305 	stb	r2,140(sp)
    aa68:	00800244 	movi	r2,9
    aa6c:	1700820e 	bge	r2,fp,ac78 <___svfprintf_internal_r+0x1ed8>
    aa70:	dd4022c4 	addi	r21,sp,139
    aa74:	dc002b15 	stw	r16,172(sp)
    aa78:	8825883a 	mov	r18,r17
    aa7c:	a821883a 	mov	r16,r21
    aa80:	4023883a 	mov	r17,r8
    aa84:	e009883a 	mov	r4,fp
    aa88:	01400284 	movi	r5,10
    aa8c:	00151f40 	call	151f4 <__modsi3>
    aa90:	10800c04 	addi	r2,r2,48
    aa94:	843fffc4 	addi	r16,r16,-1
    aa98:	e009883a 	mov	r4,fp
    aa9c:	01400284 	movi	r5,10
    aaa0:	80800005 	stb	r2,0(r16)
    aaa4:	00151a00 	call	151a0 <__divsi3>
    aaa8:	1039883a 	mov	fp,r2
    aaac:	00800244 	movi	r2,9
    aab0:	173ff416 	blt	r2,fp,aa84 <__alt_mem_descriptor_memory+0xdefcaa84>
    aab4:	8811883a 	mov	r8,r17
    aab8:	e0800c04 	addi	r2,fp,48
    aabc:	9023883a 	mov	r17,r18
    aac0:	8025883a 	mov	r18,r16
    aac4:	913fffc4 	addi	r4,r18,-1
    aac8:	90bfffc5 	stb	r2,-1(r18)
    aacc:	dc002b17 	ldw	r16,172(sp)
    aad0:	25408e2e 	bgeu	r4,r21,ad0c <___svfprintf_internal_r+0x1f6c>
    aad4:	d9402384 	addi	r5,sp,142
    aad8:	2c8bc83a 	sub	r5,r5,r18
    aadc:	d8c02344 	addi	r3,sp,141
    aae0:	a94b883a 	add	r5,r21,r5
    aae4:	00000106 	br	aaec <___svfprintf_internal_r+0x1d4c>
    aae8:	20800003 	ldbu	r2,0(r4)
    aaec:	18800005 	stb	r2,0(r3)
    aaf0:	18c00044 	addi	r3,r3,1
    aaf4:	21000044 	addi	r4,r4,1
    aaf8:	197ffb1e 	bne	r3,r5,aae8 <__alt_mem_descriptor_memory+0xdefcaae8>
    aafc:	d8802304 	addi	r2,sp,140
    ab00:	1485c83a 	sub	r2,r2,r18
    ab04:	d8c02344 	addi	r3,sp,141
    ab08:	1885883a 	add	r2,r3,r2
    ab0c:	dac03317 	ldw	r11,204(sp)
    ab10:	156bc83a 	sub	r21,r2,r21
    ab14:	dd403a15 	stw	r21,232(sp)
    ab18:	00800044 	movi	r2,1
    ab1c:	5d65883a 	add	r18,r11,r21
    ab20:	12c0770e 	bge	r2,r11,ad00 <___svfprintf_internal_r+0x1f60>
    ab24:	94800044 	addi	r18,r18,1
    ab28:	9005883a 	mov	r2,r18
    ab2c:	90007216 	blt	r18,zero,acf8 <___svfprintf_internal_r+0x1f58>
    ab30:	d8003415 	stw	zero,208(sp)
    ab34:	003f0506 	br	a74c <__alt_mem_descriptor_memory+0xdefca74c>
    ab38:	da402a15 	stw	r9,168(sp)
    ab3c:	dd402783 	ldbu	r21,158(sp)
    ab40:	4825883a 	mov	r18,r9
    ab44:	dcc02d15 	stw	r19,180(sp)
    ab48:	d8003215 	stw	zero,200(sp)
    ab4c:	d8003415 	stw	zero,208(sp)
    ab50:	0039cc06 	br	9284 <__alt_mem_descriptor_memory+0xdefc9284>
    ab54:	483eb01e 	bne	r9,zero,a618 <__alt_mem_descriptor_memory+0xdefca618>
    ab58:	9013883a 	mov	r9,r18
    ab5c:	003eae06 	br	a618 <__alt_mem_descriptor_memory+0xdefca618>
    ab60:	d9002f17 	ldw	r4,188(sp)
    ab64:	b80b883a 	mov	r5,r23
    ab68:	b00d883a 	mov	r6,r22
    ab6c:	00117580 	call	11758 <__ssprint_r>
    ab70:	1039531e 	bne	r2,zero,90c0 <__alt_mem_descriptor_memory+0xdefc90c0>
    ab74:	dc002617 	ldw	r16,152(sp)
    ab78:	d8c02017 	ldw	r3,128(sp)
    ab7c:	d8801f17 	ldw	r2,124(sp)
    ab80:	da000404 	addi	r8,sp,16
    ab84:	003e6f06 	br	a544 <__alt_mem_descriptor_memory+0xdefca544>
    ab88:	00c00b44 	movi	r3,45
    ab8c:	64a0003c 	xorhi	r18,r12,32768
    ab90:	d8c02a05 	stb	r3,168(sp)
    ab94:	003ea606 	br	a630 <__alt_mem_descriptor_memory+0xdefca630>
    ab98:	4f000044 	addi	fp,r9,1
    ab9c:	003eab06 	br	a64c <__alt_mem_descriptor_memory+0xdefca64c>
    aba0:	d8c03417 	ldw	r3,208(sp)
    aba4:	00c0410e 	bge	zero,r3,acac <___svfprintf_internal_r+0x1f0c>
    aba8:	04800044 	movi	r18,1
    abac:	dac03317 	ldw	r11,204(sp)
    abb0:	92e5883a 	add	r18,r18,r11
    abb4:	9005883a 	mov	r2,r18
    abb8:	903ee40e 	bge	r18,zero,a74c <__alt_mem_descriptor_memory+0xdefca74c>
    abbc:	0005883a 	mov	r2,zero
    abc0:	003ee206 	br	a74c <__alt_mem_descriptor_memory+0xdefca74c>
    abc4:	d8c02617 	ldw	r3,152(sp)
    abc8:	d8c03415 	stw	r3,208(sp)
    abcc:	00c0310e 	bge	zero,r3,ac94 <___svfprintf_internal_r+0x1ef4>
    abd0:	48001f1e 	bne	r9,zero,ac50 <___svfprintf_internal_r+0x1eb0>
    abd4:	8c40004c 	andi	r17,r17,1
    abd8:	88001d1e 	bne	r17,zero,ac50 <___svfprintf_internal_r+0x1eb0>
    abdc:	1805883a 	mov	r2,r3
    abe0:	183ed90e 	bge	r3,zero,a748 <__alt_mem_descriptor_memory+0xdefca748>
    abe4:	0005883a 	mov	r2,zero
    abe8:	003ed706 	br	a748 <__alt_mem_descriptor_memory+0xdefca748>
    abec:	d8802117 	ldw	r2,132(sp)
    abf0:	003ec306 	br	a700 <__alt_mem_descriptor_memory+0xdefca700>
    abf4:	d9003717 	ldw	r4,220(sp)
    abf8:	900b883a 	mov	r5,r18
    abfc:	000d883a 	mov	r6,zero
    ac00:	000f883a 	mov	r7,zero
    ac04:	da004015 	stw	r8,256(sp)
    ac08:	da403f15 	stw	r9,252(sp)
    ac0c:	da803e15 	stw	r10,248(sp)
    ac10:	00163c80 	call	163c8 <__eqdf2>
    ac14:	da004017 	ldw	r8,256(sp)
    ac18:	da403f17 	ldw	r9,252(sp)
    ac1c:	da803e17 	ldw	r10,248(sp)
    ac20:	103f2a26 	beq	r2,zero,a8cc <__alt_mem_descriptor_memory+0xdefca8cc>
    ac24:	00800044 	movi	r2,1
    ac28:	1707c83a 	sub	r3,r2,fp
    ac2c:	d8c02615 	stw	r3,152(sp)
    ac30:	003f2706 	br	a8d0 <__alt_mem_descriptor_memory+0xdefca8d0>
    ac34:	db003417 	ldw	r12,208(sp)
    ac38:	64800044 	addi	r18,r12,1
    ac3c:	9005883a 	mov	r2,r18
    ac40:	903ec20e 	bge	r18,zero,a74c <__alt_mem_descriptor_memory+0xdefca74c>
    ac44:	003fdd06 	br	abbc <__alt_mem_descriptor_memory+0xdefcabbc>
    ac48:	0005883a 	mov	r2,zero
    ac4c:	003f5a06 	br	a9b8 <__alt_mem_descriptor_memory+0xdefca9b8>
    ac50:	dac03417 	ldw	r11,208(sp)
    ac54:	4a400044 	addi	r9,r9,1
    ac58:	5a65883a 	add	r18,r11,r9
    ac5c:	9005883a 	mov	r2,r18
    ac60:	903eba0e 	bge	r18,zero,a74c <__alt_mem_descriptor_memory+0xdefca74c>
    ac64:	003fd506 	br	abbc <__alt_mem_descriptor_memory+0xdefcabbc>
    ac68:	00800174 	movhi	r2,5
    ac6c:	10b5a484 	addi	r2,r2,-10606
    ac70:	d8802b15 	stw	r2,172(sp)
    ac74:	003d2906 	br	a11c <__alt_mem_descriptor_memory+0xdefca11c>
    ac78:	00800c04 	movi	r2,48
    ac7c:	e0c00c04 	addi	r3,fp,48
    ac80:	d8802345 	stb	r2,141(sp)
    ac84:	d8c02385 	stb	r3,142(sp)
    ac88:	d88023c4 	addi	r2,sp,143
    ac8c:	dd4022c4 	addi	r21,sp,139
    ac90:	003f9e06 	br	ab0c <__alt_mem_descriptor_memory+0xdefcab0c>
    ac94:	4800081e 	bne	r9,zero,acb8 <___svfprintf_internal_r+0x1f18>
    ac98:	8c40004c 	andi	r17,r17,1
    ac9c:	8800061e 	bne	r17,zero,acb8 <___svfprintf_internal_r+0x1f18>
    aca0:	00800044 	movi	r2,1
    aca4:	1025883a 	mov	r18,r2
    aca8:	003ea806 	br	a74c <__alt_mem_descriptor_memory+0xdefca74c>
    acac:	04800084 	movi	r18,2
    acb0:	90e5c83a 	sub	r18,r18,r3
    acb4:	003fbd06 	br	abac <__alt_mem_descriptor_memory+0xdefcabac>
    acb8:	4c800084 	addi	r18,r9,2
    acbc:	9005883a 	mov	r2,r18
    acc0:	903ea20e 	bge	r18,zero,a74c <__alt_mem_descriptor_memory+0xdefca74c>
    acc4:	003fbd06 	br	abbc <__alt_mem_descriptor_memory+0xdefcabbc>
    acc8:	dac02d17 	ldw	r11,180(sp)
    accc:	5a400017 	ldw	r9,0(r11)
    acd0:	5ac00104 	addi	r11,r11,4
    acd4:	dac02d15 	stw	r11,180(sp)
    acd8:	483e3f0e 	bge	r9,zero,a5d8 <__alt_mem_descriptor_memory+0xdefca5d8>
    acdc:	027fffc4 	movi	r9,-1
    ace0:	1c000047 	ldb	r16,1(r3)
    ace4:	00388406 	br	8ef8 <__alt_mem_descriptor_memory+0xdefc8ef8>
    ace8:	00800b44 	movi	r2,45
    acec:	0739c83a 	sub	fp,zero,fp
    acf0:	d8802305 	stb	r2,140(sp)
    acf4:	003f5c06 	br	aa68 <__alt_mem_descriptor_memory+0xdefcaa68>
    acf8:	0005883a 	mov	r2,zero
    acfc:	003f8c06 	br	ab30 <__alt_mem_descriptor_memory+0xdefcab30>
    ad00:	88a2703a 	and	r17,r17,r2
    ad04:	883f8826 	beq	r17,zero,ab28 <__alt_mem_descriptor_memory+0xdefcab28>
    ad08:	003f8606 	br	ab24 <__alt_mem_descriptor_memory+0xdefcab24>
    ad0c:	d8802344 	addi	r2,sp,141
    ad10:	003f7e06 	br	ab0c <__alt_mem_descriptor_memory+0xdefcab0c>
    ad14:	d8c02617 	ldw	r3,152(sp)
    ad18:	003f4d06 	br	aa50 <__alt_mem_descriptor_memory+0xdefcaa50>
    ad1c:	dac02f17 	ldw	r11,188(sp)
    ad20:	00800304 	movi	r2,12
    ad24:	58800015 	stw	r2,0(r11)
    ad28:	00bfffc4 	movi	r2,-1
    ad2c:	0038e806 	br	90d0 <__alt_mem_descriptor_memory+0xdefc90d0>

0000ad30 <_user_strerror>:
    ad30:	0005883a 	mov	r2,zero
    ad34:	f800283a 	ret

0000ad38 <___vfprintf_internal_r>:
    ad38:	defeb604 	addi	sp,sp,-1320
    ad3c:	dfc14915 	stw	ra,1316(sp)
    ad40:	ddc14715 	stw	r23,1308(sp)
    ad44:	dd814615 	stw	r22,1304(sp)
    ad48:	282f883a 	mov	r23,r5
    ad4c:	202d883a 	mov	r22,r4
    ad50:	d9812a15 	stw	r6,1192(sp)
    ad54:	d9c12d15 	stw	r7,1204(sp)
    ad58:	df014815 	stw	fp,1312(sp)
    ad5c:	dd414515 	stw	r21,1300(sp)
    ad60:	dd014415 	stw	r20,1296(sp)
    ad64:	dcc14315 	stw	r19,1292(sp)
    ad68:	dc814215 	stw	r18,1288(sp)
    ad6c:	dc414115 	stw	r17,1284(sp)
    ad70:	dc014015 	stw	r16,1280(sp)
    ad74:	000fb400 	call	fb40 <_localeconv_r>
    ad78:	10800017 	ldw	r2,0(r2)
    ad7c:	1009883a 	mov	r4,r2
    ad80:	d8813515 	stw	r2,1236(sp)
    ad84:	0008d080 	call	8d08 <strlen>
    ad88:	d8813815 	stw	r2,1248(sp)
    ad8c:	b0000226 	beq	r22,zero,ad98 <___vfprintf_internal_r+0x60>
    ad90:	b0800e17 	ldw	r2,56(r22)
    ad94:	10010426 	beq	r2,zero,b1a8 <___vfprintf_internal_r+0x470>
    ad98:	b8c0030b 	ldhu	r3,12(r23)
    ad9c:	1908000c 	andi	r4,r3,8192
    ada0:	1805883a 	mov	r2,r3
    ada4:	2000071e 	bne	r4,zero,adc4 <___vfprintf_internal_r+0x8c>
    ada8:	b9001917 	ldw	r4,100(r23)
    adac:	18880014 	ori	r2,r3,8192
    adb0:	00f7ffc4 	movi	r3,-8193
    adb4:	20c8703a 	and	r4,r4,r3
    adb8:	b880030d 	sth	r2,12(r23)
    adbc:	1007883a 	mov	r3,r2
    adc0:	b9001915 	stw	r4,100(r23)
    adc4:	1100020c 	andi	r4,r2,8
    adc8:	2000a726 	beq	r4,zero,b068 <___vfprintf_internal_r+0x330>
    adcc:	b9000417 	ldw	r4,16(r23)
    add0:	2000a526 	beq	r4,zero,b068 <___vfprintf_internal_r+0x330>
    add4:	1080068c 	andi	r2,r2,26
    add8:	01000284 	movi	r4,10
    addc:	1100ab26 	beq	r2,r4,b08c <___vfprintf_internal_r+0x354>
    ade0:	dac10e04 	addi	r11,sp,1080
    ade4:	db010dc4 	addi	r12,sp,1079
    ade8:	d8800404 	addi	r2,sp,16
    adec:	05000174 	movhi	r20,5
    adf0:	dac12815 	stw	r11,1184(sp)
    adf4:	5b17c83a 	sub	r11,r11,r12
    adf8:	a535ac84 	addi	r20,r20,-10574
    adfc:	db012915 	stw	r12,1188(sp)
    ae00:	d8811e15 	stw	r2,1144(sp)
    ae04:	d8012015 	stw	zero,1152(sp)
    ae08:	d8011f15 	stw	zero,1148(sp)
    ae0c:	d8013315 	stw	zero,1228(sp)
    ae10:	d8013715 	stw	zero,1244(sp)
    ae14:	d8013915 	stw	zero,1252(sp)
    ae18:	d8013b15 	stw	zero,1260(sp)
    ae1c:	d8013a15 	stw	zero,1256(sp)
    ae20:	d8012f15 	stw	zero,1212(sp)
    ae24:	1011883a 	mov	r8,r2
    ae28:	dac13c15 	stw	r11,1264(sp)
    ae2c:	db012a17 	ldw	r12,1192(sp)
    ae30:	60800007 	ldb	r2,0(r12)
    ae34:	1000df26 	beq	r2,zero,b1b4 <___vfprintf_internal_r+0x47c>
    ae38:	00c00944 	movi	r3,37
    ae3c:	10c0dd26 	beq	r2,r3,b1b4 <___vfprintf_internal_r+0x47c>
    ae40:	6021883a 	mov	r16,r12
    ae44:	00000106 	br	ae4c <___vfprintf_internal_r+0x114>
    ae48:	10c08426 	beq	r2,r3,b05c <___vfprintf_internal_r+0x324>
    ae4c:	84000044 	addi	r16,r16,1
    ae50:	80800007 	ldb	r2,0(r16)
    ae54:	103ffc1e 	bne	r2,zero,ae48 <__alt_mem_descriptor_memory+0xdefcae48>
    ae58:	dac12a17 	ldw	r11,1192(sp)
    ae5c:	82e3c83a 	sub	r17,r16,r11
    ae60:	88000f26 	beq	r17,zero,aea0 <___vfprintf_internal_r+0x168>
    ae64:	d8c12017 	ldw	r3,1152(sp)
    ae68:	d8811f17 	ldw	r2,1148(sp)
    ae6c:	dac12a17 	ldw	r11,1192(sp)
    ae70:	1c47883a 	add	r3,r3,r17
    ae74:	10800044 	addi	r2,r2,1
    ae78:	d8c12015 	stw	r3,1152(sp)
    ae7c:	42c00015 	stw	r11,0(r8)
    ae80:	44400115 	stw	r17,4(r8)
    ae84:	d8811f15 	stw	r2,1148(sp)
    ae88:	00c001c4 	movi	r3,7
    ae8c:	1880b416 	blt	r3,r2,b160 <___vfprintf_internal_r+0x428>
    ae90:	42000204 	addi	r8,r8,8
    ae94:	db012f17 	ldw	r12,1212(sp)
    ae98:	6459883a 	add	r12,r12,r17
    ae9c:	db012f15 	stw	r12,1212(sp)
    aea0:	80800007 	ldb	r2,0(r16)
    aea4:	1000b526 	beq	r2,zero,b17c <___vfprintf_internal_r+0x444>
    aea8:	80800044 	addi	r2,r16,1
    aeac:	84000047 	ldb	r16,1(r16)
    aeb0:	d8012785 	stb	zero,1182(sp)
    aeb4:	000d883a 	mov	r6,zero
    aeb8:	027fffc4 	movi	r9,-1
    aebc:	d8012e15 	stw	zero,1208(sp)
    aec0:	0023883a 	mov	r17,zero
    aec4:	01001604 	movi	r4,88
    aec8:	01400244 	movi	r5,9
    aecc:	02800a84 	movi	r10,42
    aed0:	01c01b04 	movi	r7,108
    aed4:	10c00044 	addi	r3,r2,1
    aed8:	80bff804 	addi	r2,r16,-32
    aedc:	2082f236 	bltu	r4,r2,baa8 <___vfprintf_internal_r+0xd70>
    aee0:	100490ba 	slli	r2,r2,2
    aee4:	02c00074 	movhi	r11,1
    aee8:	5aebbe04 	addi	r11,r11,-20744
    aeec:	12c5883a 	add	r2,r2,r11
    aef0:	10800017 	ldw	r2,0(r2)
    aef4:	1000683a 	jmp	r2
    aef8:	0000b8f0 	cmpltui	zero,zero,739
    aefc:	0000baa8 	cmpgeui	zero,zero,746
    af00:	0000baa8 	cmpgeui	zero,zero,746
    af04:	0000b910 	cmplti	zero,zero,740
    af08:	0000baa8 	cmpgeui	zero,zero,746
    af0c:	0000baa8 	cmpgeui	zero,zero,746
    af10:	0000baa8 	cmpgeui	zero,zero,746
    af14:	0000baa8 	cmpgeui	zero,zero,746
    af18:	0000baa8 	cmpgeui	zero,zero,746
    af1c:	0000baa8 	cmpgeui	zero,zero,746
    af20:	0000ba6c 	andhi	zero,zero,745
    af24:	0000ba98 	cmpnei	zero,zero,746
    af28:	0000baa8 	cmpgeui	zero,zero,746
    af2c:	0000b1bc 	xorhi	zero,zero,710
    af30:	0000b1cc 	andi	zero,zero,711
    af34:	0000baa8 	cmpgeui	zero,zero,746
    af38:	0000b20c 	andi	zero,zero,712
    af3c:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af40:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af44:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af48:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af4c:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af50:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af54:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af58:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af5c:	0000b700 	call	b70 <alt_NetworkErrorHandler+0x2a0>
    af60:	0000baa8 	cmpgeui	zero,zero,746
    af64:	0000baa8 	cmpgeui	zero,zero,746
    af68:	0000baa8 	cmpgeui	zero,zero,746
    af6c:	0000baa8 	cmpgeui	zero,zero,746
    af70:	0000baa8 	cmpgeui	zero,zero,746
    af74:	0000baa8 	cmpgeui	zero,zero,746
    af78:	0000baa8 	cmpgeui	zero,zero,746
    af7c:	0000baa8 	cmpgeui	zero,zero,746
    af80:	0000baa8 	cmpgeui	zero,zero,746
    af84:	0000baa8 	cmpgeui	zero,zero,746
    af88:	0000b734 	movhi	zero,732
    af8c:	0000b21c 	xori	zero,zero,712
    af90:	0000baa8 	cmpgeui	zero,zero,746
    af94:	0000b21c 	xori	zero,zero,712
    af98:	0000baa8 	cmpgeui	zero,zero,746
    af9c:	0000baa8 	cmpgeui	zero,zero,746
    afa0:	0000baa8 	cmpgeui	zero,zero,746
    afa4:	0000baa8 	cmpgeui	zero,zero,746
    afa8:	0000b2c0 	call	b2c <alt_NetworkErrorHandler+0x25c>
    afac:	0000baa8 	cmpgeui	zero,zero,746
    afb0:	0000baa8 	cmpgeui	zero,zero,746
    afb4:	0000b2d0 	cmplti	zero,zero,715
    afb8:	0000baa8 	cmpgeui	zero,zero,746
    afbc:	0000baa8 	cmpgeui	zero,zero,746
    afc0:	0000baa8 	cmpgeui	zero,zero,746
    afc4:	0000baa8 	cmpgeui	zero,zero,746
    afc8:	0000baa8 	cmpgeui	zero,zero,746
    afcc:	0000b6cc 	andi	zero,zero,731
    afd0:	0000baa8 	cmpgeui	zero,zero,746
    afd4:	0000baa8 	cmpgeui	zero,zero,746
    afd8:	0000b77c 	xorhi	zero,zero,733
    afdc:	0000baa8 	cmpgeui	zero,zero,746
    afe0:	0000baa8 	cmpgeui	zero,zero,746
    afe4:	0000baa8 	cmpgeui	zero,zero,746
    afe8:	0000baa8 	cmpgeui	zero,zero,746
    afec:	0000baa8 	cmpgeui	zero,zero,746
    aff0:	0000baa8 	cmpgeui	zero,zero,746
    aff4:	0000baa8 	cmpgeui	zero,zero,746
    aff8:	0000baa8 	cmpgeui	zero,zero,746
    affc:	0000baa8 	cmpgeui	zero,zero,746
    b000:	0000baa8 	cmpgeui	zero,zero,746
    b004:	0000b970 	cmpltui	zero,zero,741
    b008:	0000b920 	cmpeqi	zero,zero,740
    b00c:	0000b21c 	xori	zero,zero,712
    b010:	0000b21c 	xori	zero,zero,712
    b014:	0000b21c 	xori	zero,zero,712
    b018:	0000b960 	cmpeqi	zero,zero,741
    b01c:	0000b920 	cmpeqi	zero,zero,740
    b020:	0000baa8 	cmpgeui	zero,zero,746
    b024:	0000baa8 	cmpgeui	zero,zero,746
    b028:	0000b868 	cmpgeui	zero,zero,737
    b02c:	0000baa8 	cmpgeui	zero,zero,746
    b030:	0000b87c 	xorhi	zero,zero,737
    b034:	0000b8b0 	cmpltui	zero,zero,738
    b038:	0000b9b0 	cmpltui	zero,zero,742
    b03c:	0000b7d8 	cmpnei	zero,zero,735
    b040:	0000baa8 	cmpgeui	zero,zero,746
    b044:	0000b9f8 	rdprs	zero,zero,743
    b048:	0000baa8 	cmpgeui	zero,zero,746
    b04c:	0000b7e8 	cmpgeui	zero,zero,735
    b050:	0000baa8 	cmpgeui	zero,zero,746
    b054:	0000baa8 	cmpgeui	zero,zero,746
    b058:	0000b828 	cmpgeui	zero,zero,736
    b05c:	db012a17 	ldw	r12,1192(sp)
    b060:	8323c83a 	sub	r17,r16,r12
    b064:	003f7e06 	br	ae60 <__alt_mem_descriptor_memory+0xdefcae60>
    b068:	b009883a 	mov	r4,r22
    b06c:	b80b883a 	mov	r5,r23
    b070:	000cec80 	call	cec8 <__swsetup_r>
    b074:	10002d1e 	bne	r2,zero,b12c <___vfprintf_internal_r+0x3f4>
    b078:	b8c0030b 	ldhu	r3,12(r23)
    b07c:	01000284 	movi	r4,10
    b080:	1805883a 	mov	r2,r3
    b084:	1080068c 	andi	r2,r2,26
    b088:	113f551e 	bne	r2,r4,ade0 <__alt_mem_descriptor_memory+0xdefcade0>
    b08c:	b880038b 	ldhu	r2,14(r23)
    b090:	113fffcc 	andi	r4,r2,65535
    b094:	2120001c 	xori	r4,r4,32768
    b098:	21200004 	addi	r4,r4,-32768
    b09c:	203f5016 	blt	r4,zero,ade0 <__alt_mem_descriptor_memory+0xdefcade0>
    b0a0:	bac01917 	ldw	r11,100(r23)
    b0a4:	ba800717 	ldw	r10,28(r23)
    b0a8:	ba400917 	ldw	r9,36(r23)
    b0ac:	d9812a17 	ldw	r6,1192(sp)
    b0b0:	d9c12d17 	ldw	r7,1204(sp)
    b0b4:	02010004 	movi	r8,1024
    b0b8:	18ffff4c 	andi	r3,r3,65533
    b0bc:	d881078d 	sth	r2,1054(sp)
    b0c0:	b009883a 	mov	r4,r22
    b0c4:	d8800404 	addi	r2,sp,16
    b0c8:	d9410404 	addi	r5,sp,1040
    b0cc:	d8c1070d 	sth	r3,1052(sp)
    b0d0:	dac11d15 	stw	r11,1140(sp)
    b0d4:	da810b15 	stw	r10,1068(sp)
    b0d8:	da410d15 	stw	r9,1076(sp)
    b0dc:	d8810415 	stw	r2,1040(sp)
    b0e0:	d8810815 	stw	r2,1056(sp)
    b0e4:	da010615 	stw	r8,1048(sp)
    b0e8:	da010915 	stw	r8,1060(sp)
    b0ec:	d8010a15 	stw	zero,1064(sp)
    b0f0:	000ad380 	call	ad38 <___vfprintf_internal_r>
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	10000416 	blt	r2,zero,b10c <___vfprintf_internal_r+0x3d4>
    b0fc:	b009883a 	mov	r4,r22
    b100:	d9410404 	addi	r5,sp,1040
    b104:	000e9200 	call	e920 <_fflush_r>
    b108:	1006ee1e 	bne	r2,zero,ccc4 <___vfprintf_internal_r+0x1f8c>
    b10c:	d881070b 	ldhu	r2,1052(sp)
    b110:	1080100c 	andi	r2,r2,64
    b114:	10000326 	beq	r2,zero,b124 <___vfprintf_internal_r+0x3ec>
    b118:	b880030b 	ldhu	r2,12(r23)
    b11c:	10801014 	ori	r2,r2,64
    b120:	b880030d 	sth	r2,12(r23)
    b124:	8005883a 	mov	r2,r16
    b128:	00000106 	br	b130 <___vfprintf_internal_r+0x3f8>
    b12c:	00bfffc4 	movi	r2,-1
    b130:	dfc14917 	ldw	ra,1316(sp)
    b134:	df014817 	ldw	fp,1312(sp)
    b138:	ddc14717 	ldw	r23,1308(sp)
    b13c:	dd814617 	ldw	r22,1304(sp)
    b140:	dd414517 	ldw	r21,1300(sp)
    b144:	dd014417 	ldw	r20,1296(sp)
    b148:	dcc14317 	ldw	r19,1292(sp)
    b14c:	dc814217 	ldw	r18,1288(sp)
    b150:	dc414117 	ldw	r17,1284(sp)
    b154:	dc014017 	ldw	r16,1280(sp)
    b158:	dec14a04 	addi	sp,sp,1320
    b15c:	f800283a 	ret
    b160:	b009883a 	mov	r4,r22
    b164:	b80b883a 	mov	r5,r23
    b168:	d9811e04 	addi	r6,sp,1144
    b16c:	0012a840 	call	12a84 <__sprint_r>
    b170:	1000081e 	bne	r2,zero,b194 <___vfprintf_internal_r+0x45c>
    b174:	da000404 	addi	r8,sp,16
    b178:	003f4606 	br	ae94 <__alt_mem_descriptor_memory+0xdefcae94>
    b17c:	d8812017 	ldw	r2,1152(sp)
    b180:	10000426 	beq	r2,zero,b194 <___vfprintf_internal_r+0x45c>
    b184:	b009883a 	mov	r4,r22
    b188:	b80b883a 	mov	r5,r23
    b18c:	d9811e04 	addi	r6,sp,1144
    b190:	0012a840 	call	12a84 <__sprint_r>
    b194:	b880030b 	ldhu	r2,12(r23)
    b198:	1080100c 	andi	r2,r2,64
    b19c:	103fe31e 	bne	r2,zero,b12c <__alt_mem_descriptor_memory+0xdefcb12c>
    b1a0:	d8812f17 	ldw	r2,1212(sp)
    b1a4:	003fe206 	br	b130 <__alt_mem_descriptor_memory+0xdefcb130>
    b1a8:	b009883a 	mov	r4,r22
    b1ac:	000eec80 	call	eec8 <__sinit>
    b1b0:	003ef906 	br	ad98 <__alt_mem_descriptor_memory+0xdefcad98>
    b1b4:	dc012a17 	ldw	r16,1192(sp)
    b1b8:	003f3906 	br	aea0 <__alt_mem_descriptor_memory+0xdefcaea0>
    b1bc:	1805883a 	mov	r2,r3
    b1c0:	8c400114 	ori	r17,r17,4
    b1c4:	1c000007 	ldb	r16,0(r3)
    b1c8:	003f4206 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b1cc:	1c000007 	ldb	r16,0(r3)
    b1d0:	18800044 	addi	r2,r3,1
    b1d4:	8286b326 	beq	r16,r10,cca4 <___vfprintf_internal_r+0x1f6c>
    b1d8:	82fff404 	addi	r11,r16,-48
    b1dc:	1007883a 	mov	r3,r2
    b1e0:	0013883a 	mov	r9,zero
    b1e4:	2aff3c36 	bltu	r5,r11,aed8 <__alt_mem_descriptor_memory+0xdefcaed8>
    b1e8:	1c000007 	ldb	r16,0(r3)
    b1ec:	4a4002a4 	muli	r9,r9,10
    b1f0:	18c00044 	addi	r3,r3,1
    b1f4:	5a53883a 	add	r9,r11,r9
    b1f8:	82fff404 	addi	r11,r16,-48
    b1fc:	2afffa2e 	bgeu	r5,r11,b1e8 <__alt_mem_descriptor_memory+0xdefcb1e8>
    b200:	483f350e 	bge	r9,zero,aed8 <__alt_mem_descriptor_memory+0xdefcaed8>
    b204:	027fffc4 	movi	r9,-1
    b208:	003f3306 	br	aed8 <__alt_mem_descriptor_memory+0xdefcaed8>
    b20c:	8c402014 	ori	r17,r17,128
    b210:	1805883a 	mov	r2,r3
    b214:	1c000007 	ldb	r16,0(r3)
    b218:	003f2e06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b21c:	db012d17 	ldw	r12,1204(sp)
    b220:	dac12d17 	ldw	r11,1204(sp)
    b224:	d8c12a15 	stw	r3,1192(sp)
    b228:	63000017 	ldw	r12,0(r12)
    b22c:	5ac00117 	ldw	r11,4(r11)
    b230:	d9812785 	stb	r6,1182(sp)
    b234:	6009883a 	mov	r4,r12
    b238:	580b883a 	mov	r5,r11
    b23c:	db013715 	stw	r12,1244(sp)
    b240:	da013f15 	stw	r8,1276(sp)
    b244:	da413e15 	stw	r9,1272(sp)
    b248:	dac13915 	stw	r11,1252(sp)
    b24c:	00115040 	call	11504 <__fpclassifyd>
    b250:	db012d17 	ldw	r12,1204(sp)
    b254:	04800044 	movi	r18,1
    b258:	da013f17 	ldw	r8,1276(sp)
    b25c:	64c00204 	addi	r19,r12,8
    b260:	da413e17 	ldw	r9,1272(sp)
    b264:	d9013717 	ldw	r4,1244(sp)
    b268:	d9413917 	ldw	r5,1252(sp)
    b26c:	1484581e 	bne	r2,r18,c3d0 <___vfprintf_internal_r+0x1698>
    b270:	000d883a 	mov	r6,zero
    b274:	000f883a 	mov	r7,zero
    b278:	001652c0 	call	1652c <__ledf2>
    b27c:	da013f17 	ldw	r8,1276(sp)
    b280:	1005ef16 	blt	r2,zero,ca40 <___vfprintf_internal_r+0x1d08>
    b284:	dd412783 	ldbu	r21,1182(sp)
    b288:	008011c4 	movi	r2,71
    b28c:	14053b0e 	bge	r2,r16,c77c <___vfprintf_internal_r+0x1a44>
    b290:	00c00174 	movhi	r3,5
    b294:	18f59504 	addi	r3,r3,-10668
    b298:	d8c13115 	stw	r3,1220(sp)
    b29c:	02c000c4 	movi	r11,3
    b2a0:	00bfdfc4 	movi	r2,-129
    b2a4:	dac12b15 	stw	r11,1196(sp)
    b2a8:	88a2703a 	and	r17,r17,r2
    b2ac:	dcc12d15 	stw	r19,1204(sp)
    b2b0:	5825883a 	mov	r18,r11
    b2b4:	d8013215 	stw	zero,1224(sp)
    b2b8:	d8013415 	stw	zero,1232(sp)
    b2bc:	00003206 	br	b388 <___vfprintf_internal_r+0x650>
    b2c0:	8c400214 	ori	r17,r17,8
    b2c4:	1805883a 	mov	r2,r3
    b2c8:	1c000007 	ldb	r16,0(r3)
    b2cc:	003f0106 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b2d0:	8c400414 	ori	r17,r17,16
    b2d4:	d8c12a15 	stw	r3,1192(sp)
    b2d8:	88c0080c 	andi	r3,r17,32
    b2dc:	d8812d17 	ldw	r2,1204(sp)
    b2e0:	18017726 	beq	r3,zero,b8c0 <___vfprintf_internal_r+0xb88>
    b2e4:	db012d17 	ldw	r12,1204(sp)
    b2e8:	14c00017 	ldw	r19,0(r2)
    b2ec:	17000117 	ldw	fp,4(r2)
    b2f0:	63000204 	addi	r12,r12,8
    b2f4:	db012d15 	stw	r12,1204(sp)
    b2f8:	0005883a 	mov	r2,zero
    b2fc:	9f06b03a 	or	r3,r19,fp
    b300:	d8012785 	stb	zero,1182(sp)
    b304:	da413215 	stw	r9,1224(sp)
    b308:	002b883a 	mov	r21,zero
    b30c:	48000216 	blt	r9,zero,b318 <___vfprintf_internal_r+0x5e0>
    b310:	013fdfc4 	movi	r4,-129
    b314:	8922703a 	and	r17,r17,r4
    b318:	1801ed1e 	bne	r3,zero,bad0 <___vfprintf_internal_r+0xd98>
    b31c:	4802e026 	beq	r9,zero,bea0 <___vfprintf_internal_r+0x1168>
    b320:	10803fcc 	andi	r2,r2,255
    b324:	00c00044 	movi	r3,1
    b328:	10c20f26 	beq	r2,r3,bb68 <___vfprintf_internal_r+0xe30>
    b32c:	00c00084 	movi	r3,2
    b330:	10c2fd26 	beq	r2,r3,bf28 <___vfprintf_internal_r+0x11f0>
    b334:	d8c10e04 	addi	r3,sp,1080
    b338:	9808d0fa 	srli	r4,r19,3
    b33c:	e00a977a 	slli	r5,fp,29
    b340:	e038d0fa 	srli	fp,fp,3
    b344:	9cc001cc 	andi	r19,r19,7
    b348:	98800c04 	addi	r2,r19,48
    b34c:	18ffffc4 	addi	r3,r3,-1
    b350:	2926b03a 	or	r19,r5,r4
    b354:	18800005 	stb	r2,0(r3)
    b358:	9f08b03a 	or	r4,r19,fp
    b35c:	203ff61e 	bne	r4,zero,b338 <__alt_mem_descriptor_memory+0xdefcb338>
    b360:	8900004c 	andi	r4,r17,1
    b364:	d8c13115 	stw	r3,1220(sp)
    b368:	2003791e 	bne	r4,zero,c150 <___vfprintf_internal_r+0x1418>
    b36c:	dac12817 	ldw	r11,1184(sp)
    b370:	58e5c83a 	sub	r18,r11,r3
    b374:	9005883a 	mov	r2,r18
    b378:	9240010e 	bge	r18,r9,b380 <___vfprintf_internal_r+0x648>
    b37c:	4805883a 	mov	r2,r9
    b380:	d8812b15 	stw	r2,1196(sp)
    b384:	d8013415 	stw	zero,1232(sp)
    b388:	a8803fcc 	andi	r2,r21,255
    b38c:	1080201c 	xori	r2,r2,128
    b390:	10bfe004 	addi	r2,r2,-128
    b394:	10000326 	beq	r2,zero,b3a4 <___vfprintf_internal_r+0x66c>
    b398:	db012b17 	ldw	r12,1196(sp)
    b39c:	63000044 	addi	r12,r12,1
    b3a0:	db012b15 	stw	r12,1196(sp)
    b3a4:	88c0008c 	andi	r3,r17,2
    b3a8:	d8c12c15 	stw	r3,1200(sp)
    b3ac:	18000326 	beq	r3,zero,b3bc <___vfprintf_internal_r+0x684>
    b3b0:	dac12b17 	ldw	r11,1196(sp)
    b3b4:	5ac00084 	addi	r11,r11,2
    b3b8:	dac12b15 	stw	r11,1196(sp)
    b3bc:	8b00210c 	andi	r12,r17,132
    b3c0:	db013015 	stw	r12,1216(sp)
    b3c4:	6001c01e 	bne	r12,zero,bac8 <___vfprintf_internal_r+0xd90>
    b3c8:	dac12e17 	ldw	r11,1208(sp)
    b3cc:	db012b17 	ldw	r12,1196(sp)
    b3d0:	5b39c83a 	sub	fp,r11,r12
    b3d4:	0701bc0e 	bge	zero,fp,bac8 <___vfprintf_internal_r+0xd90>
    b3d8:	02400404 	movi	r9,16
    b3dc:	d8c12017 	ldw	r3,1152(sp)
    b3e0:	d8811f17 	ldw	r2,1148(sp)
    b3e4:	4f05220e 	bge	r9,fp,c870 <___vfprintf_internal_r+0x1b38>
    b3e8:	01400174 	movhi	r5,5
    b3ec:	2975b084 	addi	r5,r5,-10558
    b3f0:	d9413615 	stw	r5,1240(sp)
    b3f4:	482b883a 	mov	r21,r9
    b3f8:	04c001c4 	movi	r19,7
    b3fc:	00000306 	br	b40c <___vfprintf_internal_r+0x6d4>
    b400:	e73ffc04 	addi	fp,fp,-16
    b404:	42000204 	addi	r8,r8,8
    b408:	af00130e 	bge	r21,fp,b458 <___vfprintf_internal_r+0x720>
    b40c:	02c00174 	movhi	r11,5
    b410:	18c00404 	addi	r3,r3,16
    b414:	10800044 	addi	r2,r2,1
    b418:	5af5b084 	addi	r11,r11,-10558
    b41c:	42c00015 	stw	r11,0(r8)
    b420:	45400115 	stw	r21,4(r8)
    b424:	d8c12015 	stw	r3,1152(sp)
    b428:	d8811f15 	stw	r2,1148(sp)
    b42c:	98bff40e 	bge	r19,r2,b400 <__alt_mem_descriptor_memory+0xdefcb400>
    b430:	b009883a 	mov	r4,r22
    b434:	b80b883a 	mov	r5,r23
    b438:	d9811e04 	addi	r6,sp,1144
    b43c:	0012a840 	call	12a84 <__sprint_r>
    b440:	103f541e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    b444:	e73ffc04 	addi	fp,fp,-16
    b448:	d8c12017 	ldw	r3,1152(sp)
    b44c:	d8811f17 	ldw	r2,1148(sp)
    b450:	da000404 	addi	r8,sp,16
    b454:	af3fed16 	blt	r21,fp,b40c <__alt_mem_descriptor_memory+0xdefcb40c>
    b458:	db013617 	ldw	r12,1240(sp)
    b45c:	e0c7883a 	add	r3,fp,r3
    b460:	10800044 	addi	r2,r2,1
    b464:	43000015 	stw	r12,0(r8)
    b468:	47000115 	stw	fp,4(r8)
    b46c:	d8c12015 	stw	r3,1152(sp)
    b470:	d8811f15 	stw	r2,1148(sp)
    b474:	010001c4 	movi	r4,7
    b478:	2082f416 	blt	r4,r2,c04c <___vfprintf_internal_r+0x1314>
    b47c:	d8812787 	ldb	r2,1182(sp)
    b480:	42000204 	addi	r8,r8,8
    b484:	10000c26 	beq	r2,zero,b4b8 <___vfprintf_internal_r+0x780>
    b488:	d8811f17 	ldw	r2,1148(sp)
    b48c:	d9012784 	addi	r4,sp,1182
    b490:	18c00044 	addi	r3,r3,1
    b494:	10800044 	addi	r2,r2,1
    b498:	41000015 	stw	r4,0(r8)
    b49c:	01000044 	movi	r4,1
    b4a0:	41000115 	stw	r4,4(r8)
    b4a4:	d8c12015 	stw	r3,1152(sp)
    b4a8:	d8811f15 	stw	r2,1148(sp)
    b4ac:	010001c4 	movi	r4,7
    b4b0:	20828d16 	blt	r4,r2,bee8 <___vfprintf_internal_r+0x11b0>
    b4b4:	42000204 	addi	r8,r8,8
    b4b8:	dac12c17 	ldw	r11,1200(sp)
    b4bc:	58000c26 	beq	r11,zero,b4f0 <___vfprintf_internal_r+0x7b8>
    b4c0:	d8811f17 	ldw	r2,1148(sp)
    b4c4:	d9012704 	addi	r4,sp,1180
    b4c8:	18c00084 	addi	r3,r3,2
    b4cc:	10800044 	addi	r2,r2,1
    b4d0:	41000015 	stw	r4,0(r8)
    b4d4:	01000084 	movi	r4,2
    b4d8:	41000115 	stw	r4,4(r8)
    b4dc:	d8c12015 	stw	r3,1152(sp)
    b4e0:	d8811f15 	stw	r2,1148(sp)
    b4e4:	010001c4 	movi	r4,7
    b4e8:	20828716 	blt	r4,r2,bf08 <___vfprintf_internal_r+0x11d0>
    b4ec:	42000204 	addi	r8,r8,8
    b4f0:	db013017 	ldw	r12,1216(sp)
    b4f4:	00802004 	movi	r2,128
    b4f8:	6081e926 	beq	r12,r2,bca0 <___vfprintf_internal_r+0xf68>
    b4fc:	db013217 	ldw	r12,1224(sp)
    b500:	64abc83a 	sub	r21,r12,r18
    b504:	0540260e 	bge	zero,r21,b5a0 <___vfprintf_internal_r+0x868>
    b508:	07000404 	movi	fp,16
    b50c:	d8811f17 	ldw	r2,1148(sp)
    b510:	e5443d0e 	bge	fp,r21,c608 <___vfprintf_internal_r+0x18d0>
    b514:	01400174 	movhi	r5,5
    b518:	2975ac84 	addi	r5,r5,-10574
    b51c:	d9412c15 	stw	r5,1200(sp)
    b520:	04c001c4 	movi	r19,7
    b524:	00000306 	br	b534 <___vfprintf_internal_r+0x7fc>
    b528:	ad7ffc04 	addi	r21,r21,-16
    b52c:	42000204 	addi	r8,r8,8
    b530:	e540110e 	bge	fp,r21,b578 <___vfprintf_internal_r+0x840>
    b534:	18c00404 	addi	r3,r3,16
    b538:	10800044 	addi	r2,r2,1
    b53c:	45000015 	stw	r20,0(r8)
    b540:	47000115 	stw	fp,4(r8)
    b544:	d8c12015 	stw	r3,1152(sp)
    b548:	d8811f15 	stw	r2,1148(sp)
    b54c:	98bff60e 	bge	r19,r2,b528 <__alt_mem_descriptor_memory+0xdefcb528>
    b550:	b009883a 	mov	r4,r22
    b554:	b80b883a 	mov	r5,r23
    b558:	d9811e04 	addi	r6,sp,1144
    b55c:	0012a840 	call	12a84 <__sprint_r>
    b560:	103f0c1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    b564:	ad7ffc04 	addi	r21,r21,-16
    b568:	d8c12017 	ldw	r3,1152(sp)
    b56c:	d8811f17 	ldw	r2,1148(sp)
    b570:	da000404 	addi	r8,sp,16
    b574:	e57fef16 	blt	fp,r21,b534 <__alt_mem_descriptor_memory+0xdefcb534>
    b578:	dac12c17 	ldw	r11,1200(sp)
    b57c:	1d47883a 	add	r3,r3,r21
    b580:	10800044 	addi	r2,r2,1
    b584:	42c00015 	stw	r11,0(r8)
    b588:	45400115 	stw	r21,4(r8)
    b58c:	d8c12015 	stw	r3,1152(sp)
    b590:	d8811f15 	stw	r2,1148(sp)
    b594:	010001c4 	movi	r4,7
    b598:	20824b16 	blt	r4,r2,bec8 <___vfprintf_internal_r+0x1190>
    b59c:	42000204 	addi	r8,r8,8
    b5a0:	8880400c 	andi	r2,r17,256
    b5a4:	1001761e 	bne	r2,zero,bb80 <___vfprintf_internal_r+0xe48>
    b5a8:	d8811f17 	ldw	r2,1148(sp)
    b5ac:	db013117 	ldw	r12,1220(sp)
    b5b0:	1c87883a 	add	r3,r3,r18
    b5b4:	10800044 	addi	r2,r2,1
    b5b8:	43000015 	stw	r12,0(r8)
    b5bc:	44800115 	stw	r18,4(r8)
    b5c0:	d8c12015 	stw	r3,1152(sp)
    b5c4:	d8811f15 	stw	r2,1148(sp)
    b5c8:	010001c4 	movi	r4,7
    b5cc:	20822616 	blt	r4,r2,be68 <___vfprintf_internal_r+0x1130>
    b5d0:	42000204 	addi	r8,r8,8
    b5d4:	8c40010c 	andi	r17,r17,4
    b5d8:	88003126 	beq	r17,zero,b6a0 <___vfprintf_internal_r+0x968>
    b5dc:	db012e17 	ldw	r12,1208(sp)
    b5e0:	dac12b17 	ldw	r11,1196(sp)
    b5e4:	62e1c83a 	sub	r16,r12,r11
    b5e8:	04002d0e 	bge	zero,r16,b6a0 <___vfprintf_internal_r+0x968>
    b5ec:	04400404 	movi	r17,16
    b5f0:	d8811f17 	ldw	r2,1148(sp)
    b5f4:	8c04df0e 	bge	r17,r16,c974 <___vfprintf_internal_r+0x1c3c>
    b5f8:	01000174 	movhi	r4,5
    b5fc:	2135b084 	addi	r4,r4,-10558
    b600:	d9013615 	stw	r4,1240(sp)
    b604:	048001c4 	movi	r18,7
    b608:	00000306 	br	b618 <___vfprintf_internal_r+0x8e0>
    b60c:	843ffc04 	addi	r16,r16,-16
    b610:	42000204 	addi	r8,r8,8
    b614:	8c00130e 	bge	r17,r16,b664 <___vfprintf_internal_r+0x92c>
    b618:	01400174 	movhi	r5,5
    b61c:	18c00404 	addi	r3,r3,16
    b620:	10800044 	addi	r2,r2,1
    b624:	2975b084 	addi	r5,r5,-10558
    b628:	41400015 	stw	r5,0(r8)
    b62c:	44400115 	stw	r17,4(r8)
    b630:	d8c12015 	stw	r3,1152(sp)
    b634:	d8811f15 	stw	r2,1148(sp)
    b638:	90bff40e 	bge	r18,r2,b60c <__alt_mem_descriptor_memory+0xdefcb60c>
    b63c:	b009883a 	mov	r4,r22
    b640:	b80b883a 	mov	r5,r23
    b644:	d9811e04 	addi	r6,sp,1144
    b648:	0012a840 	call	12a84 <__sprint_r>
    b64c:	103ed11e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    b650:	843ffc04 	addi	r16,r16,-16
    b654:	d8c12017 	ldw	r3,1152(sp)
    b658:	d8811f17 	ldw	r2,1148(sp)
    b65c:	da000404 	addi	r8,sp,16
    b660:	8c3fed16 	blt	r17,r16,b618 <__alt_mem_descriptor_memory+0xdefcb618>
    b664:	dac13617 	ldw	r11,1240(sp)
    b668:	1c07883a 	add	r3,r3,r16
    b66c:	10800044 	addi	r2,r2,1
    b670:	42c00015 	stw	r11,0(r8)
    b674:	44000115 	stw	r16,4(r8)
    b678:	d8c12015 	stw	r3,1152(sp)
    b67c:	d8811f15 	stw	r2,1148(sp)
    b680:	010001c4 	movi	r4,7
    b684:	2080060e 	bge	r4,r2,b6a0 <___vfprintf_internal_r+0x968>
    b688:	b009883a 	mov	r4,r22
    b68c:	b80b883a 	mov	r5,r23
    b690:	d9811e04 	addi	r6,sp,1144
    b694:	0012a840 	call	12a84 <__sprint_r>
    b698:	103ebe1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    b69c:	d8c12017 	ldw	r3,1152(sp)
    b6a0:	d8812b17 	ldw	r2,1196(sp)
    b6a4:	db012e17 	ldw	r12,1208(sp)
    b6a8:	1300010e 	bge	r2,r12,b6b0 <___vfprintf_internal_r+0x978>
    b6ac:	6005883a 	mov	r2,r12
    b6b0:	dac12f17 	ldw	r11,1212(sp)
    b6b4:	5897883a 	add	r11,r11,r2
    b6b8:	dac12f15 	stw	r11,1212(sp)
    b6bc:	1801f21e 	bne	r3,zero,be88 <___vfprintf_internal_r+0x1150>
    b6c0:	d8011f15 	stw	zero,1148(sp)
    b6c4:	da000404 	addi	r8,sp,16
    b6c8:	003dd806 	br	ae2c <__alt_mem_descriptor_memory+0xdefcae2c>
    b6cc:	8c400414 	ori	r17,r17,16
    b6d0:	d8c12a15 	stw	r3,1192(sp)
    b6d4:	88c0080c 	andi	r3,r17,32
    b6d8:	d8812d17 	ldw	r2,1204(sp)
    b6dc:	18004626 	beq	r3,zero,b7f8 <___vfprintf_internal_r+0xac0>
    b6e0:	dac12d17 	ldw	r11,1204(sp)
    b6e4:	14c00017 	ldw	r19,0(r2)
    b6e8:	17000117 	ldw	fp,4(r2)
    b6ec:	5ac00204 	addi	r11,r11,8
    b6f0:	dac12d15 	stw	r11,1204(sp)
    b6f4:	00800044 	movi	r2,1
    b6f8:	9f06b03a 	or	r3,r19,fp
    b6fc:	003f0006 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    b700:	1805883a 	mov	r2,r3
    b704:	d8012e15 	stw	zero,1208(sp)
    b708:	82fff404 	addi	r11,r16,-48
    b70c:	0019883a 	mov	r12,zero
    b710:	14000007 	ldb	r16,0(r2)
    b714:	630002a4 	muli	r12,r12,10
    b718:	18c00044 	addi	r3,r3,1
    b71c:	1805883a 	mov	r2,r3
    b720:	62d9883a 	add	r12,r12,r11
    b724:	82fff404 	addi	r11,r16,-48
    b728:	2afff92e 	bgeu	r5,r11,b710 <__alt_mem_descriptor_memory+0xdefcb710>
    b72c:	db012e15 	stw	r12,1208(sp)
    b730:	003de906 	br	aed8 <__alt_mem_descriptor_memory+0xdefcaed8>
    b734:	8c400414 	ori	r17,r17,16
    b738:	d8c12a15 	stw	r3,1192(sp)
    b73c:	d9812785 	stb	r6,1182(sp)
    b740:	8880080c 	andi	r2,r17,32
    b744:	d8c12d17 	ldw	r3,1204(sp)
    b748:	10007a26 	beq	r2,zero,b934 <___vfprintf_internal_r+0xbfc>
    b74c:	db012d17 	ldw	r12,1204(sp)
    b750:	18800117 	ldw	r2,4(r3)
    b754:	1cc00017 	ldw	r19,0(r3)
    b758:	63000204 	addi	r12,r12,8
    b75c:	db012d15 	stw	r12,1204(sp)
    b760:	1039883a 	mov	fp,r2
    b764:	10031016 	blt	r2,zero,c3a8 <___vfprintf_internal_r+0x1670>
    b768:	dd412783 	ldbu	r21,1182(sp)
    b76c:	da413215 	stw	r9,1224(sp)
    b770:	00800044 	movi	r2,1
    b774:	9f06b03a 	or	r3,r19,fp
    b778:	003ee406 	br	b30c <__alt_mem_descriptor_memory+0xdefcb30c>
    b77c:	03000174 	movhi	r12,5
    b780:	63359804 	addi	r12,r12,-10656
    b784:	d8c12a15 	stw	r3,1192(sp)
    b788:	d9812785 	stb	r6,1182(sp)
    b78c:	db013b15 	stw	r12,1260(sp)
    b790:	88c0080c 	andi	r3,r17,32
    b794:	d8812d17 	ldw	r2,1204(sp)
    b798:	18002b26 	beq	r3,zero,b848 <___vfprintf_internal_r+0xb10>
    b79c:	dac12d17 	ldw	r11,1204(sp)
    b7a0:	14c00017 	ldw	r19,0(r2)
    b7a4:	17000117 	ldw	fp,4(r2)
    b7a8:	5ac00204 	addi	r11,r11,8
    b7ac:	dac12d15 	stw	r11,1204(sp)
    b7b0:	8880004c 	andi	r2,r17,1
    b7b4:	10025b26 	beq	r2,zero,c124 <___vfprintf_internal_r+0x13ec>
    b7b8:	9f06b03a 	or	r3,r19,fp
    b7bc:	18037026 	beq	r3,zero,c580 <___vfprintf_internal_r+0x1848>
    b7c0:	00800c04 	movi	r2,48
    b7c4:	d8812705 	stb	r2,1180(sp)
    b7c8:	dc012745 	stb	r16,1181(sp)
    b7cc:	8c400094 	ori	r17,r17,2
    b7d0:	00800084 	movi	r2,2
    b7d4:	003eca06 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    b7d8:	8c400814 	ori	r17,r17,32
    b7dc:	1805883a 	mov	r2,r3
    b7e0:	1c000007 	ldb	r16,0(r3)
    b7e4:	003dbb06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b7e8:	d8c12a15 	stw	r3,1192(sp)
    b7ec:	88c0080c 	andi	r3,r17,32
    b7f0:	d8812d17 	ldw	r2,1204(sp)
    b7f4:	183fba1e 	bne	r3,zero,b6e0 <__alt_mem_descriptor_memory+0xdefcb6e0>
    b7f8:	88c0040c 	andi	r3,r17,16
    b7fc:	18024c1e 	bne	r3,zero,c130 <___vfprintf_internal_r+0x13f8>
    b800:	88c0100c 	andi	r3,r17,64
    b804:	18024a26 	beq	r3,zero,c130 <___vfprintf_internal_r+0x13f8>
    b808:	dac12d17 	ldw	r11,1204(sp)
    b80c:	14c0000b 	ldhu	r19,0(r2)
    b810:	0039883a 	mov	fp,zero
    b814:	5ac00104 	addi	r11,r11,4
    b818:	dac12d15 	stw	r11,1204(sp)
    b81c:	00800044 	movi	r2,1
    b820:	9807883a 	mov	r3,r19
    b824:	003eb606 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    b828:	00800174 	movhi	r2,5
    b82c:	10b59d04 	addi	r2,r2,-10636
    b830:	d8c12a15 	stw	r3,1192(sp)
    b834:	d8813b15 	stw	r2,1260(sp)
    b838:	d9812785 	stb	r6,1182(sp)
    b83c:	88c0080c 	andi	r3,r17,32
    b840:	d8812d17 	ldw	r2,1204(sp)
    b844:	183fd51e 	bne	r3,zero,b79c <__alt_mem_descriptor_memory+0xdefcb79c>
    b848:	88c0040c 	andi	r3,r17,16
    b84c:	18034126 	beq	r3,zero,c554 <___vfprintf_internal_r+0x181c>
    b850:	db012d17 	ldw	r12,1204(sp)
    b854:	14c00017 	ldw	r19,0(r2)
    b858:	0039883a 	mov	fp,zero
    b85c:	63000104 	addi	r12,r12,4
    b860:	db012d15 	stw	r12,1204(sp)
    b864:	003fd206 	br	b7b0 <__alt_mem_descriptor_memory+0xdefcb7b0>
    b868:	1c000007 	ldb	r16,0(r3)
    b86c:	81c3d626 	beq	r16,r7,c7c8 <___vfprintf_internal_r+0x1a90>
    b870:	8c400414 	ori	r17,r17,16
    b874:	1805883a 	mov	r2,r3
    b878:	003d9606 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b87c:	d8c12a15 	stw	r3,1192(sp)
    b880:	d9812785 	stb	r6,1182(sp)
    b884:	8880080c 	andi	r2,r17,32
    b888:	10033f26 	beq	r2,zero,c588 <___vfprintf_internal_r+0x1850>
    b88c:	db012d17 	ldw	r12,1204(sp)
    b890:	dac12f17 	ldw	r11,1212(sp)
    b894:	60800017 	ldw	r2,0(r12)
    b898:	5807d7fa 	srai	r3,r11,31
    b89c:	63000104 	addi	r12,r12,4
    b8a0:	db012d15 	stw	r12,1204(sp)
    b8a4:	12c00015 	stw	r11,0(r2)
    b8a8:	10c00115 	stw	r3,4(r2)
    b8ac:	003d5f06 	br	ae2c <__alt_mem_descriptor_memory+0xdefcae2c>
    b8b0:	d8c12a15 	stw	r3,1192(sp)
    b8b4:	88c0080c 	andi	r3,r17,32
    b8b8:	d8812d17 	ldw	r2,1204(sp)
    b8bc:	183e891e 	bne	r3,zero,b2e4 <__alt_mem_descriptor_memory+0xdefcb2e4>
    b8c0:	88c0040c 	andi	r3,r17,16
    b8c4:	1801ea1e 	bne	r3,zero,c070 <___vfprintf_internal_r+0x1338>
    b8c8:	88c0100c 	andi	r3,r17,64
    b8cc:	1801e826 	beq	r3,zero,c070 <___vfprintf_internal_r+0x1338>
    b8d0:	db012d17 	ldw	r12,1204(sp)
    b8d4:	14c0000b 	ldhu	r19,0(r2)
    b8d8:	0039883a 	mov	fp,zero
    b8dc:	63000104 	addi	r12,r12,4
    b8e0:	db012d15 	stw	r12,1204(sp)
    b8e4:	0005883a 	mov	r2,zero
    b8e8:	9807883a 	mov	r3,r19
    b8ec:	003e8406 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    b8f0:	30803fcc 	andi	r2,r6,255
    b8f4:	1080201c 	xori	r2,r2,128
    b8f8:	10bfe004 	addi	r2,r2,-128
    b8fc:	10031d1e 	bne	r2,zero,c574 <___vfprintf_internal_r+0x183c>
    b900:	1805883a 	mov	r2,r3
    b904:	01800804 	movi	r6,32
    b908:	1c000007 	ldb	r16,0(r3)
    b90c:	003d7106 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b910:	8c400054 	ori	r17,r17,1
    b914:	1805883a 	mov	r2,r3
    b918:	1c000007 	ldb	r16,0(r3)
    b91c:	003d6d06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b920:	d8c12a15 	stw	r3,1192(sp)
    b924:	d9812785 	stb	r6,1182(sp)
    b928:	8880080c 	andi	r2,r17,32
    b92c:	d8c12d17 	ldw	r3,1204(sp)
    b930:	103f861e 	bne	r2,zero,b74c <__alt_mem_descriptor_memory+0xdefcb74c>
    b934:	8880040c 	andi	r2,r17,16
    b938:	1001f31e 	bne	r2,zero,c108 <___vfprintf_internal_r+0x13d0>
    b93c:	8880100c 	andi	r2,r17,64
    b940:	1001f126 	beq	r2,zero,c108 <___vfprintf_internal_r+0x13d0>
    b944:	1cc0000f 	ldh	r19,0(r3)
    b948:	db012d17 	ldw	r12,1204(sp)
    b94c:	9839d7fa 	srai	fp,r19,31
    b950:	63000104 	addi	r12,r12,4
    b954:	db012d15 	stw	r12,1204(sp)
    b958:	e005883a 	mov	r2,fp
    b95c:	003f8106 	br	b764 <__alt_mem_descriptor_memory+0xdefcb764>
    b960:	8c401014 	ori	r17,r17,64
    b964:	1805883a 	mov	r2,r3
    b968:	1c000007 	ldb	r16,0(r3)
    b96c:	003d5906 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    b970:	db012d17 	ldw	r12,1204(sp)
    b974:	d8c12a15 	stw	r3,1192(sp)
    b978:	00c00044 	movi	r3,1
    b97c:	60800017 	ldw	r2,0(r12)
    b980:	63000104 	addi	r12,r12,4
    b984:	d8c12b15 	stw	r3,1196(sp)
    b988:	d8012785 	stb	zero,1182(sp)
    b98c:	d8810405 	stb	r2,1040(sp)
    b990:	db012d15 	stw	r12,1204(sp)
    b994:	dac10404 	addi	r11,sp,1040
    b998:	1825883a 	mov	r18,r3
    b99c:	d8013215 	stw	zero,1224(sp)
    b9a0:	d8013415 	stw	zero,1232(sp)
    b9a4:	dac13115 	stw	r11,1220(sp)
    b9a8:	0005883a 	mov	r2,zero
    b9ac:	003e7d06 	br	b3a4 <__alt_mem_descriptor_memory+0xdefcb3a4>
    b9b0:	db012d17 	ldw	r12,1204(sp)
    b9b4:	00800c04 	movi	r2,48
    b9b8:	d8812705 	stb	r2,1180(sp)
    b9bc:	64c00017 	ldw	r19,0(r12)
    b9c0:	00801e04 	movi	r2,120
    b9c4:	d8812745 	stb	r2,1181(sp)
    b9c8:	00800174 	movhi	r2,5
    b9cc:	10b59d04 	addi	r2,r2,-10636
    b9d0:	63000104 	addi	r12,r12,4
    b9d4:	d8c12a15 	stw	r3,1192(sp)
    b9d8:	d8813b15 	stw	r2,1260(sp)
    b9dc:	0039883a 	mov	fp,zero
    b9e0:	8c400094 	ori	r17,r17,2
    b9e4:	db012d15 	stw	r12,1204(sp)
    b9e8:	00800084 	movi	r2,2
    b9ec:	04001e04 	movi	r16,120
    b9f0:	9807883a 	mov	r3,r19
    b9f4:	003e4206 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    b9f8:	dac12d17 	ldw	r11,1204(sp)
    b9fc:	db012d17 	ldw	r12,1204(sp)
    ba00:	d8c12a15 	stw	r3,1192(sp)
    ba04:	5ac00017 	ldw	r11,0(r11)
    ba08:	d8012785 	stb	zero,1182(sp)
    ba0c:	64c00104 	addi	r19,r12,4
    ba10:	dac13115 	stw	r11,1220(sp)
    ba14:	5803e826 	beq	r11,zero,c9b8 <___vfprintf_internal_r+0x1c80>
    ba18:	d9013117 	ldw	r4,1220(sp)
    ba1c:	48037a16 	blt	r9,zero,c808 <___vfprintf_internal_r+0x1ad0>
    ba20:	480d883a 	mov	r6,r9
    ba24:	000b883a 	mov	r5,zero
    ba28:	da013f15 	stw	r8,1276(sp)
    ba2c:	da413e15 	stw	r9,1272(sp)
    ba30:	000fd2c0 	call	fd2c <memchr>
    ba34:	da013f17 	ldw	r8,1276(sp)
    ba38:	da413e17 	ldw	r9,1272(sp)
    ba3c:	10044426 	beq	r2,zero,cb50 <___vfprintf_internal_r+0x1e18>
    ba40:	d8c13117 	ldw	r3,1220(sp)
    ba44:	10e5c83a 	sub	r18,r2,r3
    ba48:	4c834416 	blt	r9,r18,c75c <___vfprintf_internal_r+0x1a24>
    ba4c:	9005883a 	mov	r2,r18
    ba50:	90037216 	blt	r18,zero,c81c <___vfprintf_internal_r+0x1ae4>
    ba54:	dd412783 	ldbu	r21,1182(sp)
    ba58:	d8812b15 	stw	r2,1196(sp)
    ba5c:	dcc12d15 	stw	r19,1204(sp)
    ba60:	d8013215 	stw	zero,1224(sp)
    ba64:	d8013415 	stw	zero,1232(sp)
    ba68:	003e4706 	br	b388 <__alt_mem_descriptor_memory+0xdefcb388>
    ba6c:	dac12d17 	ldw	r11,1204(sp)
    ba70:	db012d17 	ldw	r12,1204(sp)
    ba74:	5ac00017 	ldw	r11,0(r11)
    ba78:	dac12e15 	stw	r11,1208(sp)
    ba7c:	62c00104 	addi	r11,r12,4
    ba80:	db012e17 	ldw	r12,1208(sp)
    ba84:	60034a16 	blt	r12,zero,c7b0 <___vfprintf_internal_r+0x1a78>
    ba88:	dac12d15 	stw	r11,1204(sp)
    ba8c:	1805883a 	mov	r2,r3
    ba90:	1c000007 	ldb	r16,0(r3)
    ba94:	003d0f06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    ba98:	1805883a 	mov	r2,r3
    ba9c:	01800ac4 	movi	r6,43
    baa0:	1c000007 	ldb	r16,0(r3)
    baa4:	003d0b06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    baa8:	d8c12a15 	stw	r3,1192(sp)
    baac:	d9812785 	stb	r6,1182(sp)
    bab0:	803db226 	beq	r16,zero,b17c <__alt_mem_descriptor_memory+0xdefcb17c>
    bab4:	00c00044 	movi	r3,1
    bab8:	d8c12b15 	stw	r3,1196(sp)
    babc:	dc010405 	stb	r16,1040(sp)
    bac0:	d8012785 	stb	zero,1182(sp)
    bac4:	003fb306 	br	b994 <__alt_mem_descriptor_memory+0xdefcb994>
    bac8:	d8c12017 	ldw	r3,1152(sp)
    bacc:	003e6d06 	br	b484 <__alt_mem_descriptor_memory+0xdefcb484>
    bad0:	10803fcc 	andi	r2,r2,255
    bad4:	00c00044 	movi	r3,1
    bad8:	10fe141e 	bne	r2,r3,b32c <__alt_mem_descriptor_memory+0xdefcb32c>
    badc:	e000021e 	bne	fp,zero,bae8 <___vfprintf_internal_r+0xdb0>
    bae0:	00800244 	movi	r2,9
    bae4:	14c0202e 	bgeu	r2,r19,bb68 <___vfprintf_internal_r+0xe30>
    bae8:	dc012b15 	stw	r16,1196(sp)
    baec:	dc412c15 	stw	r17,1200(sp)
    baf0:	9821883a 	mov	r16,r19
    baf4:	e023883a 	mov	r17,fp
    baf8:	dc810e04 	addi	r18,sp,1080
    bafc:	4027883a 	mov	r19,r8
    bb00:	4839883a 	mov	fp,r9
    bb04:	8009883a 	mov	r4,r16
    bb08:	880b883a 	mov	r5,r17
    bb0c:	01800284 	movi	r6,10
    bb10:	000f883a 	mov	r7,zero
    bb14:	0014ba40 	call	14ba4 <__umoddi3>
    bb18:	10800c04 	addi	r2,r2,48
    bb1c:	94bfffc4 	addi	r18,r18,-1
    bb20:	8009883a 	mov	r4,r16
    bb24:	880b883a 	mov	r5,r17
    bb28:	01800284 	movi	r6,10
    bb2c:	000f883a 	mov	r7,zero
    bb30:	90800005 	stb	r2,0(r18)
    bb34:	00145e40 	call	145e4 <__udivdi3>
    bb38:	1021883a 	mov	r16,r2
    bb3c:	10c4b03a 	or	r2,r2,r3
    bb40:	1823883a 	mov	r17,r3
    bb44:	103fef1e 	bne	r2,zero,bb04 <__alt_mem_descriptor_memory+0xdefcbb04>
    bb48:	dac12817 	ldw	r11,1184(sp)
    bb4c:	dc813115 	stw	r18,1220(sp)
    bb50:	dc012b17 	ldw	r16,1196(sp)
    bb54:	9811883a 	mov	r8,r19
    bb58:	dc412c17 	ldw	r17,1200(sp)
    bb5c:	e013883a 	mov	r9,fp
    bb60:	5ca5c83a 	sub	r18,r11,r18
    bb64:	003e0306 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    bb68:	9cc00c04 	addi	r19,r19,48
    bb6c:	d8c10dc4 	addi	r3,sp,1079
    bb70:	dcc10dc5 	stb	r19,1079(sp)
    bb74:	dc813c17 	ldw	r18,1264(sp)
    bb78:	d8c13115 	stw	r3,1220(sp)
    bb7c:	003dfd06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    bb80:	00801944 	movi	r2,101
    bb84:	1400710e 	bge	r2,r16,bd4c <___vfprintf_internal_r+0x1014>
    bb88:	d9013717 	ldw	r4,1244(sp)
    bb8c:	d9413917 	ldw	r5,1252(sp)
    bb90:	000d883a 	mov	r6,zero
    bb94:	000f883a 	mov	r7,zero
    bb98:	d8c13d15 	stw	r3,1268(sp)
    bb9c:	da013f15 	stw	r8,1276(sp)
    bba0:	00163c80 	call	163c8 <__eqdf2>
    bba4:	d8c13d17 	ldw	r3,1268(sp)
    bba8:	da013f17 	ldw	r8,1276(sp)
    bbac:	1000ef1e 	bne	r2,zero,bf6c <___vfprintf_internal_r+0x1234>
    bbb0:	d8811f17 	ldw	r2,1148(sp)
    bbb4:	01000174 	movhi	r4,5
    bbb8:	2135a404 	addi	r4,r4,-10608
    bbbc:	18c00044 	addi	r3,r3,1
    bbc0:	10800044 	addi	r2,r2,1
    bbc4:	41000015 	stw	r4,0(r8)
    bbc8:	01000044 	movi	r4,1
    bbcc:	41000115 	stw	r4,4(r8)
    bbd0:	d8c12015 	stw	r3,1152(sp)
    bbd4:	d8811f15 	stw	r2,1148(sp)
    bbd8:	010001c4 	movi	r4,7
    bbdc:	20828e16 	blt	r4,r2,c618 <___vfprintf_internal_r+0x18e0>
    bbe0:	42000204 	addi	r8,r8,8
    bbe4:	d8812617 	ldw	r2,1176(sp)
    bbe8:	dac13317 	ldw	r11,1228(sp)
    bbec:	12c00216 	blt	r2,r11,bbf8 <___vfprintf_internal_r+0xec0>
    bbf0:	8880004c 	andi	r2,r17,1
    bbf4:	103e7726 	beq	r2,zero,b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    bbf8:	db013817 	ldw	r12,1248(sp)
    bbfc:	d8811f17 	ldw	r2,1148(sp)
    bc00:	dac13517 	ldw	r11,1236(sp)
    bc04:	1b07883a 	add	r3,r3,r12
    bc08:	10800044 	addi	r2,r2,1
    bc0c:	42c00015 	stw	r11,0(r8)
    bc10:	43000115 	stw	r12,4(r8)
    bc14:	d8c12015 	stw	r3,1152(sp)
    bc18:	d8811f15 	stw	r2,1148(sp)
    bc1c:	010001c4 	movi	r4,7
    bc20:	2082ed16 	blt	r4,r2,c7d8 <___vfprintf_internal_r+0x1aa0>
    bc24:	42000204 	addi	r8,r8,8
    bc28:	db013317 	ldw	r12,1228(sp)
    bc2c:	643fffc4 	addi	r16,r12,-1
    bc30:	043e680e 	bge	zero,r16,b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    bc34:	04800404 	movi	r18,16
    bc38:	d8811f17 	ldw	r2,1148(sp)
    bc3c:	94007e0e 	bge	r18,r16,be38 <___vfprintf_internal_r+0x1100>
    bc40:	01400174 	movhi	r5,5
    bc44:	2975ac84 	addi	r5,r5,-10574
    bc48:	d9412c15 	stw	r5,1200(sp)
    bc4c:	054001c4 	movi	r21,7
    bc50:	00000306 	br	bc60 <___vfprintf_internal_r+0xf28>
    bc54:	42000204 	addi	r8,r8,8
    bc58:	843ffc04 	addi	r16,r16,-16
    bc5c:	9400790e 	bge	r18,r16,be44 <___vfprintf_internal_r+0x110c>
    bc60:	18c00404 	addi	r3,r3,16
    bc64:	10800044 	addi	r2,r2,1
    bc68:	45000015 	stw	r20,0(r8)
    bc6c:	44800115 	stw	r18,4(r8)
    bc70:	d8c12015 	stw	r3,1152(sp)
    bc74:	d8811f15 	stw	r2,1148(sp)
    bc78:	a8bff60e 	bge	r21,r2,bc54 <__alt_mem_descriptor_memory+0xdefcbc54>
    bc7c:	b009883a 	mov	r4,r22
    bc80:	b80b883a 	mov	r5,r23
    bc84:	d9811e04 	addi	r6,sp,1144
    bc88:	0012a840 	call	12a84 <__sprint_r>
    bc8c:	103d411e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    bc90:	d8c12017 	ldw	r3,1152(sp)
    bc94:	d8811f17 	ldw	r2,1148(sp)
    bc98:	da000404 	addi	r8,sp,16
    bc9c:	003fee06 	br	bc58 <__alt_mem_descriptor_memory+0xdefcbc58>
    bca0:	dac12e17 	ldw	r11,1208(sp)
    bca4:	db012b17 	ldw	r12,1196(sp)
    bca8:	5b2bc83a 	sub	r21,r11,r12
    bcac:	057e130e 	bge	zero,r21,b4fc <__alt_mem_descriptor_memory+0xdefcb4fc>
    bcb0:	07000404 	movi	fp,16
    bcb4:	d8811f17 	ldw	r2,1148(sp)
    bcb8:	e543640e 	bge	fp,r21,ca4c <___vfprintf_internal_r+0x1d14>
    bcbc:	01400174 	movhi	r5,5
    bcc0:	2975ac84 	addi	r5,r5,-10574
    bcc4:	d9412c15 	stw	r5,1200(sp)
    bcc8:	04c001c4 	movi	r19,7
    bccc:	00000306 	br	bcdc <___vfprintf_internal_r+0xfa4>
    bcd0:	ad7ffc04 	addi	r21,r21,-16
    bcd4:	42000204 	addi	r8,r8,8
    bcd8:	e540110e 	bge	fp,r21,bd20 <___vfprintf_internal_r+0xfe8>
    bcdc:	18c00404 	addi	r3,r3,16
    bce0:	10800044 	addi	r2,r2,1
    bce4:	45000015 	stw	r20,0(r8)
    bce8:	47000115 	stw	fp,4(r8)
    bcec:	d8c12015 	stw	r3,1152(sp)
    bcf0:	d8811f15 	stw	r2,1148(sp)
    bcf4:	98bff60e 	bge	r19,r2,bcd0 <__alt_mem_descriptor_memory+0xdefcbcd0>
    bcf8:	b009883a 	mov	r4,r22
    bcfc:	b80b883a 	mov	r5,r23
    bd00:	d9811e04 	addi	r6,sp,1144
    bd04:	0012a840 	call	12a84 <__sprint_r>
    bd08:	103d221e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    bd0c:	ad7ffc04 	addi	r21,r21,-16
    bd10:	d8c12017 	ldw	r3,1152(sp)
    bd14:	d8811f17 	ldw	r2,1148(sp)
    bd18:	da000404 	addi	r8,sp,16
    bd1c:	e57fef16 	blt	fp,r21,bcdc <__alt_mem_descriptor_memory+0xdefcbcdc>
    bd20:	dac12c17 	ldw	r11,1200(sp)
    bd24:	1d47883a 	add	r3,r3,r21
    bd28:	10800044 	addi	r2,r2,1
    bd2c:	42c00015 	stw	r11,0(r8)
    bd30:	45400115 	stw	r21,4(r8)
    bd34:	d8c12015 	stw	r3,1152(sp)
    bd38:	d8811f15 	stw	r2,1148(sp)
    bd3c:	010001c4 	movi	r4,7
    bd40:	20819116 	blt	r4,r2,c388 <___vfprintf_internal_r+0x1650>
    bd44:	42000204 	addi	r8,r8,8
    bd48:	003dec06 	br	b4fc <__alt_mem_descriptor_memory+0xdefcb4fc>
    bd4c:	db013317 	ldw	r12,1228(sp)
    bd50:	00800044 	movi	r2,1
    bd54:	18c00044 	addi	r3,r3,1
    bd58:	1301530e 	bge	r2,r12,c2a8 <___vfprintf_internal_r+0x1570>
    bd5c:	dc011f17 	ldw	r16,1148(sp)
    bd60:	dac13117 	ldw	r11,1220(sp)
    bd64:	00800044 	movi	r2,1
    bd68:	84000044 	addi	r16,r16,1
    bd6c:	40800115 	stw	r2,4(r8)
    bd70:	42c00015 	stw	r11,0(r8)
    bd74:	d8c12015 	stw	r3,1152(sp)
    bd78:	dc011f15 	stw	r16,1148(sp)
    bd7c:	008001c4 	movi	r2,7
    bd80:	14016b16 	blt	r2,r16,c330 <___vfprintf_internal_r+0x15f8>
    bd84:	42000204 	addi	r8,r8,8
    bd88:	db013817 	ldw	r12,1248(sp)
    bd8c:	dac13517 	ldw	r11,1236(sp)
    bd90:	84000044 	addi	r16,r16,1
    bd94:	1b07883a 	add	r3,r3,r12
    bd98:	42c00015 	stw	r11,0(r8)
    bd9c:	43000115 	stw	r12,4(r8)
    bda0:	d8c12015 	stw	r3,1152(sp)
    bda4:	dc011f15 	stw	r16,1148(sp)
    bda8:	008001c4 	movi	r2,7
    bdac:	14016916 	blt	r2,r16,c354 <___vfprintf_internal_r+0x161c>
    bdb0:	44800204 	addi	r18,r8,8
    bdb4:	d9013717 	ldw	r4,1244(sp)
    bdb8:	d9413917 	ldw	r5,1252(sp)
    bdbc:	000d883a 	mov	r6,zero
    bdc0:	000f883a 	mov	r7,zero
    bdc4:	d8c13d15 	stw	r3,1268(sp)
    bdc8:	00163c80 	call	163c8 <__eqdf2>
    bdcc:	d8c13d17 	ldw	r3,1268(sp)
    bdd0:	db013317 	ldw	r12,1228(sp)
    bdd4:	1000ae26 	beq	r2,zero,c090 <___vfprintf_internal_r+0x1358>
    bdd8:	dac13117 	ldw	r11,1220(sp)
    bddc:	60bfffc4 	addi	r2,r12,-1
    bde0:	1887883a 	add	r3,r3,r2
    bde4:	59000044 	addi	r4,r11,1
    bde8:	84000044 	addi	r16,r16,1
    bdec:	90800115 	stw	r2,4(r18)
    bdf0:	91000015 	stw	r4,0(r18)
    bdf4:	d8c12015 	stw	r3,1152(sp)
    bdf8:	dc011f15 	stw	r16,1148(sp)
    bdfc:	008001c4 	movi	r2,7
    be00:	14014216 	blt	r2,r16,c30c <___vfprintf_internal_r+0x15d4>
    be04:	94800204 	addi	r18,r18,8
    be08:	dac13a17 	ldw	r11,1256(sp)
    be0c:	dd4122c4 	addi	r21,sp,1163
    be10:	84000044 	addi	r16,r16,1
    be14:	58c7883a 	add	r3,r11,r3
    be18:	95400015 	stw	r21,0(r18)
    be1c:	92c00115 	stw	r11,4(r18)
    be20:	d8c12015 	stw	r3,1152(sp)
    be24:	dc011f15 	stw	r16,1148(sp)
    be28:	008001c4 	movi	r2,7
    be2c:	14000e16 	blt	r2,r16,be68 <___vfprintf_internal_r+0x1130>
    be30:	92000204 	addi	r8,r18,8
    be34:	003de706 	br	b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    be38:	01000174 	movhi	r4,5
    be3c:	2135ac84 	addi	r4,r4,-10574
    be40:	d9012c15 	stw	r4,1200(sp)
    be44:	dac12c17 	ldw	r11,1200(sp)
    be48:	1c07883a 	add	r3,r3,r16
    be4c:	44000115 	stw	r16,4(r8)
    be50:	42c00015 	stw	r11,0(r8)
    be54:	10800044 	addi	r2,r2,1
    be58:	d8c12015 	stw	r3,1152(sp)
    be5c:	d8811f15 	stw	r2,1148(sp)
    be60:	010001c4 	movi	r4,7
    be64:	20bdda0e 	bge	r4,r2,b5d0 <__alt_mem_descriptor_memory+0xdefcb5d0>
    be68:	b009883a 	mov	r4,r22
    be6c:	b80b883a 	mov	r5,r23
    be70:	d9811e04 	addi	r6,sp,1144
    be74:	0012a840 	call	12a84 <__sprint_r>
    be78:	103cc61e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    be7c:	d8c12017 	ldw	r3,1152(sp)
    be80:	da000404 	addi	r8,sp,16
    be84:	003dd306 	br	b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    be88:	b009883a 	mov	r4,r22
    be8c:	b80b883a 	mov	r5,r23
    be90:	d9811e04 	addi	r6,sp,1144
    be94:	0012a840 	call	12a84 <__sprint_r>
    be98:	103e0926 	beq	r2,zero,b6c0 <__alt_mem_descriptor_memory+0xdefcb6c0>
    be9c:	003cbd06 	br	b194 <__alt_mem_descriptor_memory+0xdefcb194>
    bea0:	10803fcc 	andi	r2,r2,255
    bea4:	1000651e 	bne	r2,zero,c03c <___vfprintf_internal_r+0x1304>
    bea8:	8880004c 	andi	r2,r17,1
    beac:	10013226 	beq	r2,zero,c378 <___vfprintf_internal_r+0x1640>
    beb0:	00800c04 	movi	r2,48
    beb4:	d8c10dc4 	addi	r3,sp,1079
    beb8:	d8810dc5 	stb	r2,1079(sp)
    bebc:	dc813c17 	ldw	r18,1264(sp)
    bec0:	d8c13115 	stw	r3,1220(sp)
    bec4:	003d2b06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    bec8:	b009883a 	mov	r4,r22
    becc:	b80b883a 	mov	r5,r23
    bed0:	d9811e04 	addi	r6,sp,1144
    bed4:	0012a840 	call	12a84 <__sprint_r>
    bed8:	103cae1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    bedc:	d8c12017 	ldw	r3,1152(sp)
    bee0:	da000404 	addi	r8,sp,16
    bee4:	003dae06 	br	b5a0 <__alt_mem_descriptor_memory+0xdefcb5a0>
    bee8:	b009883a 	mov	r4,r22
    beec:	b80b883a 	mov	r5,r23
    bef0:	d9811e04 	addi	r6,sp,1144
    bef4:	0012a840 	call	12a84 <__sprint_r>
    bef8:	103ca61e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    befc:	d8c12017 	ldw	r3,1152(sp)
    bf00:	da000404 	addi	r8,sp,16
    bf04:	003d6c06 	br	b4b8 <__alt_mem_descriptor_memory+0xdefcb4b8>
    bf08:	b009883a 	mov	r4,r22
    bf0c:	b80b883a 	mov	r5,r23
    bf10:	d9811e04 	addi	r6,sp,1144
    bf14:	0012a840 	call	12a84 <__sprint_r>
    bf18:	103c9e1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    bf1c:	d8c12017 	ldw	r3,1152(sp)
    bf20:	da000404 	addi	r8,sp,16
    bf24:	003d7206 	br	b4f0 <__alt_mem_descriptor_memory+0xdefcb4f0>
    bf28:	d9413b17 	ldw	r5,1260(sp)
    bf2c:	d8c10e04 	addi	r3,sp,1080
    bf30:	988003cc 	andi	r2,r19,15
    bf34:	e008973a 	slli	r4,fp,28
    bf38:	2885883a 	add	r2,r5,r2
    bf3c:	9826d13a 	srli	r19,r19,4
    bf40:	10800003 	ldbu	r2,0(r2)
    bf44:	e038d13a 	srli	fp,fp,4
    bf48:	18ffffc4 	addi	r3,r3,-1
    bf4c:	24e6b03a 	or	r19,r4,r19
    bf50:	18800005 	stb	r2,0(r3)
    bf54:	9f04b03a 	or	r2,r19,fp
    bf58:	103ff51e 	bne	r2,zero,bf30 <__alt_mem_descriptor_memory+0xdefcbf30>
    bf5c:	db012817 	ldw	r12,1184(sp)
    bf60:	d8c13115 	stw	r3,1220(sp)
    bf64:	60e5c83a 	sub	r18,r12,r3
    bf68:	003d0206 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    bf6c:	dc012617 	ldw	r16,1176(sp)
    bf70:	0401b10e 	bge	zero,r16,c638 <___vfprintf_internal_r+0x1900>
    bf74:	db013117 	ldw	r12,1220(sp)
    bf78:	dac13317 	ldw	r11,1228(sp)
    bf7c:	62e1883a 	add	r16,r12,r11
    bf80:	db013417 	ldw	r12,1232(sp)
    bf84:	5825883a 	mov	r18,r11
    bf88:	62c0010e 	bge	r12,r11,bf90 <___vfprintf_internal_r+0x1258>
    bf8c:	6025883a 	mov	r18,r12
    bf90:	04800b0e 	bge	zero,r18,bfc0 <___vfprintf_internal_r+0x1288>
    bf94:	d8811f17 	ldw	r2,1148(sp)
    bf98:	dac13117 	ldw	r11,1220(sp)
    bf9c:	1c87883a 	add	r3,r3,r18
    bfa0:	10800044 	addi	r2,r2,1
    bfa4:	42c00015 	stw	r11,0(r8)
    bfa8:	44800115 	stw	r18,4(r8)
    bfac:	d8c12015 	stw	r3,1152(sp)
    bfb0:	d8811f15 	stw	r2,1148(sp)
    bfb4:	010001c4 	movi	r4,7
    bfb8:	20824f16 	blt	r4,r2,c8f8 <___vfprintf_internal_r+0x1bc0>
    bfbc:	42000204 	addi	r8,r8,8
    bfc0:	90024b16 	blt	r18,zero,c8f0 <___vfprintf_internal_r+0x1bb8>
    bfc4:	db013417 	ldw	r12,1232(sp)
    bfc8:	64a5c83a 	sub	r18,r12,r18
    bfcc:	0480730e 	bge	zero,r18,c19c <___vfprintf_internal_r+0x1464>
    bfd0:	05400404 	movi	r21,16
    bfd4:	d8811f17 	ldw	r2,1148(sp)
    bfd8:	ac817d0e 	bge	r21,r18,c5d0 <___vfprintf_internal_r+0x1898>
    bfdc:	01400174 	movhi	r5,5
    bfe0:	2975ac84 	addi	r5,r5,-10574
    bfe4:	d9412c15 	stw	r5,1200(sp)
    bfe8:	070001c4 	movi	fp,7
    bfec:	00000306 	br	bffc <___vfprintf_internal_r+0x12c4>
    bff0:	42000204 	addi	r8,r8,8
    bff4:	94bffc04 	addi	r18,r18,-16
    bff8:	ac81780e 	bge	r21,r18,c5dc <___vfprintf_internal_r+0x18a4>
    bffc:	18c00404 	addi	r3,r3,16
    c000:	10800044 	addi	r2,r2,1
    c004:	45000015 	stw	r20,0(r8)
    c008:	45400115 	stw	r21,4(r8)
    c00c:	d8c12015 	stw	r3,1152(sp)
    c010:	d8811f15 	stw	r2,1148(sp)
    c014:	e0bff60e 	bge	fp,r2,bff0 <__alt_mem_descriptor_memory+0xdefcbff0>
    c018:	b009883a 	mov	r4,r22
    c01c:	b80b883a 	mov	r5,r23
    c020:	d9811e04 	addi	r6,sp,1144
    c024:	0012a840 	call	12a84 <__sprint_r>
    c028:	103c5a1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c02c:	d8c12017 	ldw	r3,1152(sp)
    c030:	d8811f17 	ldw	r2,1148(sp)
    c034:	da000404 	addi	r8,sp,16
    c038:	003fee06 	br	bff4 <__alt_mem_descriptor_memory+0xdefcbff4>
    c03c:	dac10e04 	addi	r11,sp,1080
    c040:	0025883a 	mov	r18,zero
    c044:	dac13115 	stw	r11,1220(sp)
    c048:	003cca06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    c04c:	b009883a 	mov	r4,r22
    c050:	b80b883a 	mov	r5,r23
    c054:	d9811e04 	addi	r6,sp,1144
    c058:	0012a840 	call	12a84 <__sprint_r>
    c05c:	103c4d1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c060:	d8c12017 	ldw	r3,1152(sp)
    c064:	d8812787 	ldb	r2,1182(sp)
    c068:	da000404 	addi	r8,sp,16
    c06c:	003d0506 	br	b484 <__alt_mem_descriptor_memory+0xdefcb484>
    c070:	dac12d17 	ldw	r11,1204(sp)
    c074:	14c00017 	ldw	r19,0(r2)
    c078:	0039883a 	mov	fp,zero
    c07c:	5ac00104 	addi	r11,r11,4
    c080:	dac12d15 	stw	r11,1204(sp)
    c084:	0005883a 	mov	r2,zero
    c088:	9807883a 	mov	r3,r19
    c08c:	003c9c06 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    c090:	657fffc4 	addi	r21,r12,-1
    c094:	057f5c0e 	bge	zero,r21,be08 <__alt_mem_descriptor_memory+0xdefcbe08>
    c098:	07000404 	movi	fp,16
    c09c:	e5408f0e 	bge	fp,r21,c2dc <___vfprintf_internal_r+0x15a4>
    c0a0:	01000174 	movhi	r4,5
    c0a4:	2135ac84 	addi	r4,r4,-10574
    c0a8:	d9012c15 	stw	r4,1200(sp)
    c0ac:	01c001c4 	movi	r7,7
    c0b0:	00000306 	br	c0c0 <___vfprintf_internal_r+0x1388>
    c0b4:	94800204 	addi	r18,r18,8
    c0b8:	ad7ffc04 	addi	r21,r21,-16
    c0bc:	e5408a0e 	bge	fp,r21,c2e8 <___vfprintf_internal_r+0x15b0>
    c0c0:	18c00404 	addi	r3,r3,16
    c0c4:	84000044 	addi	r16,r16,1
    c0c8:	95000015 	stw	r20,0(r18)
    c0cc:	97000115 	stw	fp,4(r18)
    c0d0:	d8c12015 	stw	r3,1152(sp)
    c0d4:	dc011f15 	stw	r16,1148(sp)
    c0d8:	3c3ff60e 	bge	r7,r16,c0b4 <__alt_mem_descriptor_memory+0xdefcc0b4>
    c0dc:	b009883a 	mov	r4,r22
    c0e0:	b80b883a 	mov	r5,r23
    c0e4:	d9811e04 	addi	r6,sp,1144
    c0e8:	d9c13d15 	stw	r7,1268(sp)
    c0ec:	0012a840 	call	12a84 <__sprint_r>
    c0f0:	d9c13d17 	ldw	r7,1268(sp)
    c0f4:	103c271e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c0f8:	d8c12017 	ldw	r3,1152(sp)
    c0fc:	dc011f17 	ldw	r16,1148(sp)
    c100:	dc800404 	addi	r18,sp,16
    c104:	003fec06 	br	c0b8 <__alt_mem_descriptor_memory+0xdefcc0b8>
    c108:	1cc00017 	ldw	r19,0(r3)
    c10c:	dac12d17 	ldw	r11,1204(sp)
    c110:	9839d7fa 	srai	fp,r19,31
    c114:	5ac00104 	addi	r11,r11,4
    c118:	dac12d15 	stw	r11,1204(sp)
    c11c:	e005883a 	mov	r2,fp
    c120:	003d9006 	br	b764 <__alt_mem_descriptor_memory+0xdefcb764>
    c124:	00800084 	movi	r2,2
    c128:	9f06b03a 	or	r3,r19,fp
    c12c:	003c7406 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    c130:	db012d17 	ldw	r12,1204(sp)
    c134:	14c00017 	ldw	r19,0(r2)
    c138:	0039883a 	mov	fp,zero
    c13c:	63000104 	addi	r12,r12,4
    c140:	db012d15 	stw	r12,1204(sp)
    c144:	00800044 	movi	r2,1
    c148:	9807883a 	mov	r3,r19
    c14c:	003c6c06 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    c150:	10803fcc 	andi	r2,r2,255
    c154:	1080201c 	xori	r2,r2,128
    c158:	10bfe004 	addi	r2,r2,-128
    c15c:	01000c04 	movi	r4,48
    c160:	1101a526 	beq	r2,r4,c7f8 <___vfprintf_internal_r+0x1ac0>
    c164:	dac13117 	ldw	r11,1220(sp)
    c168:	db012817 	ldw	r12,1184(sp)
    c16c:	193fffc5 	stb	r4,-1(r3)
    c170:	5affffc4 	addi	r11,r11,-1
    c174:	dac13115 	stw	r11,1220(sp)
    c178:	62e5c83a 	sub	r18,r12,r11
    c17c:	003c7d06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    c180:	b009883a 	mov	r4,r22
    c184:	b80b883a 	mov	r5,r23
    c188:	d9811e04 	addi	r6,sp,1144
    c18c:	0012a840 	call	12a84 <__sprint_r>
    c190:	103c001e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c194:	d8c12017 	ldw	r3,1152(sp)
    c198:	da000404 	addi	r8,sp,16
    c19c:	db013117 	ldw	r12,1220(sp)
    c1a0:	dac13417 	ldw	r11,1232(sp)
    c1a4:	d8812617 	ldw	r2,1176(sp)
    c1a8:	62e5883a 	add	r18,r12,r11
    c1ac:	db013317 	ldw	r12,1228(sp)
    c1b0:	13000216 	blt	r2,r12,c1bc <___vfprintf_internal_r+0x1484>
    c1b4:	8900004c 	andi	r4,r17,1
    c1b8:	20000c26 	beq	r4,zero,c1ec <___vfprintf_internal_r+0x14b4>
    c1bc:	dac13817 	ldw	r11,1248(sp)
    c1c0:	d9011f17 	ldw	r4,1148(sp)
    c1c4:	db013517 	ldw	r12,1236(sp)
    c1c8:	1ac7883a 	add	r3,r3,r11
    c1cc:	21000044 	addi	r4,r4,1
    c1d0:	43000015 	stw	r12,0(r8)
    c1d4:	42c00115 	stw	r11,4(r8)
    c1d8:	d8c12015 	stw	r3,1152(sp)
    c1dc:	d9011f15 	stw	r4,1148(sp)
    c1e0:	014001c4 	movi	r5,7
    c1e4:	2901cc16 	blt	r5,r4,c918 <___vfprintf_internal_r+0x1be0>
    c1e8:	42000204 	addi	r8,r8,8
    c1ec:	dac13317 	ldw	r11,1228(sp)
    c1f0:	8489c83a 	sub	r4,r16,r18
    c1f4:	5885c83a 	sub	r2,r11,r2
    c1f8:	1021883a 	mov	r16,r2
    c1fc:	2080010e 	bge	r4,r2,c204 <___vfprintf_internal_r+0x14cc>
    c200:	2021883a 	mov	r16,r4
    c204:	04000a0e 	bge	zero,r16,c230 <___vfprintf_internal_r+0x14f8>
    c208:	d9011f17 	ldw	r4,1148(sp)
    c20c:	1c07883a 	add	r3,r3,r16
    c210:	44800015 	stw	r18,0(r8)
    c214:	21000044 	addi	r4,r4,1
    c218:	44000115 	stw	r16,4(r8)
    c21c:	d8c12015 	stw	r3,1152(sp)
    c220:	d9011f15 	stw	r4,1148(sp)
    c224:	014001c4 	movi	r5,7
    c228:	2901d616 	blt	r5,r4,c984 <___vfprintf_internal_r+0x1c4c>
    c22c:	42000204 	addi	r8,r8,8
    c230:	8001df16 	blt	r16,zero,c9b0 <___vfprintf_internal_r+0x1c78>
    c234:	1421c83a 	sub	r16,r2,r16
    c238:	043ce60e 	bge	zero,r16,b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    c23c:	04800404 	movi	r18,16
    c240:	d8811f17 	ldw	r2,1148(sp)
    c244:	943efc0e 	bge	r18,r16,be38 <__alt_mem_descriptor_memory+0xdefcbe38>
    c248:	01400174 	movhi	r5,5
    c24c:	2975ac84 	addi	r5,r5,-10574
    c250:	d9412c15 	stw	r5,1200(sp)
    c254:	054001c4 	movi	r21,7
    c258:	00000306 	br	c268 <___vfprintf_internal_r+0x1530>
    c25c:	42000204 	addi	r8,r8,8
    c260:	843ffc04 	addi	r16,r16,-16
    c264:	943ef70e 	bge	r18,r16,be44 <__alt_mem_descriptor_memory+0xdefcbe44>
    c268:	18c00404 	addi	r3,r3,16
    c26c:	10800044 	addi	r2,r2,1
    c270:	45000015 	stw	r20,0(r8)
    c274:	44800115 	stw	r18,4(r8)
    c278:	d8c12015 	stw	r3,1152(sp)
    c27c:	d8811f15 	stw	r2,1148(sp)
    c280:	a8bff60e 	bge	r21,r2,c25c <__alt_mem_descriptor_memory+0xdefcc25c>
    c284:	b009883a 	mov	r4,r22
    c288:	b80b883a 	mov	r5,r23
    c28c:	d9811e04 	addi	r6,sp,1144
    c290:	0012a840 	call	12a84 <__sprint_r>
    c294:	103bbf1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c298:	d8c12017 	ldw	r3,1152(sp)
    c29c:	d8811f17 	ldw	r2,1148(sp)
    c2a0:	da000404 	addi	r8,sp,16
    c2a4:	003fee06 	br	c260 <__alt_mem_descriptor_memory+0xdefcc260>
    c2a8:	8888703a 	and	r4,r17,r2
    c2ac:	203eab1e 	bne	r4,zero,bd5c <__alt_mem_descriptor_memory+0xdefcbd5c>
    c2b0:	dc011f17 	ldw	r16,1148(sp)
    c2b4:	db013117 	ldw	r12,1220(sp)
    c2b8:	40800115 	stw	r2,4(r8)
    c2bc:	84000044 	addi	r16,r16,1
    c2c0:	43000015 	stw	r12,0(r8)
    c2c4:	d8c12015 	stw	r3,1152(sp)
    c2c8:	dc011f15 	stw	r16,1148(sp)
    c2cc:	008001c4 	movi	r2,7
    c2d0:	14000e16 	blt	r2,r16,c30c <___vfprintf_internal_r+0x15d4>
    c2d4:	44800204 	addi	r18,r8,8
    c2d8:	003ecb06 	br	be08 <__alt_mem_descriptor_memory+0xdefcbe08>
    c2dc:	00800174 	movhi	r2,5
    c2e0:	10b5ac84 	addi	r2,r2,-10574
    c2e4:	d8812c15 	stw	r2,1200(sp)
    c2e8:	dac12c17 	ldw	r11,1200(sp)
    c2ec:	1d47883a 	add	r3,r3,r21
    c2f0:	84000044 	addi	r16,r16,1
    c2f4:	92c00015 	stw	r11,0(r18)
    c2f8:	95400115 	stw	r21,4(r18)
    c2fc:	d8c12015 	stw	r3,1152(sp)
    c300:	dc011f15 	stw	r16,1148(sp)
    c304:	008001c4 	movi	r2,7
    c308:	143ebe0e 	bge	r2,r16,be04 <__alt_mem_descriptor_memory+0xdefcbe04>
    c30c:	b009883a 	mov	r4,r22
    c310:	b80b883a 	mov	r5,r23
    c314:	d9811e04 	addi	r6,sp,1144
    c318:	0012a840 	call	12a84 <__sprint_r>
    c31c:	103b9d1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c320:	d8c12017 	ldw	r3,1152(sp)
    c324:	dc011f17 	ldw	r16,1148(sp)
    c328:	dc800404 	addi	r18,sp,16
    c32c:	003eb606 	br	be08 <__alt_mem_descriptor_memory+0xdefcbe08>
    c330:	b009883a 	mov	r4,r22
    c334:	b80b883a 	mov	r5,r23
    c338:	d9811e04 	addi	r6,sp,1144
    c33c:	0012a840 	call	12a84 <__sprint_r>
    c340:	103b941e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c344:	d8c12017 	ldw	r3,1152(sp)
    c348:	dc011f17 	ldw	r16,1148(sp)
    c34c:	da000404 	addi	r8,sp,16
    c350:	003e8d06 	br	bd88 <__alt_mem_descriptor_memory+0xdefcbd88>
    c354:	b009883a 	mov	r4,r22
    c358:	b80b883a 	mov	r5,r23
    c35c:	d9811e04 	addi	r6,sp,1144
    c360:	0012a840 	call	12a84 <__sprint_r>
    c364:	103b8b1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c368:	d8c12017 	ldw	r3,1152(sp)
    c36c:	dc011f17 	ldw	r16,1148(sp)
    c370:	dc800404 	addi	r18,sp,16
    c374:	003e8f06 	br	bdb4 <__alt_mem_descriptor_memory+0xdefcbdb4>
    c378:	db010e04 	addi	r12,sp,1080
    c37c:	0025883a 	mov	r18,zero
    c380:	db013115 	stw	r12,1220(sp)
    c384:	003bfb06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    c388:	b009883a 	mov	r4,r22
    c38c:	b80b883a 	mov	r5,r23
    c390:	d9811e04 	addi	r6,sp,1144
    c394:	0012a840 	call	12a84 <__sprint_r>
    c398:	103b7e1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c39c:	d8c12017 	ldw	r3,1152(sp)
    c3a0:	da000404 	addi	r8,sp,16
    c3a4:	003c5506 	br	b4fc <__alt_mem_descriptor_memory+0xdefcb4fc>
    c3a8:	04e7c83a 	sub	r19,zero,r19
    c3ac:	9804c03a 	cmpne	r2,r19,zero
    c3b0:	0739c83a 	sub	fp,zero,fp
    c3b4:	e0b9c83a 	sub	fp,fp,r2
    c3b8:	05400b44 	movi	r21,45
    c3bc:	dd412785 	stb	r21,1182(sp)
    c3c0:	da413215 	stw	r9,1224(sp)
    c3c4:	00800044 	movi	r2,1
    c3c8:	9f06b03a 	or	r3,r19,fp
    c3cc:	003bcf06 	br	b30c <__alt_mem_descriptor_memory+0xdefcb30c>
    c3d0:	da013f15 	stw	r8,1276(sp)
    c3d4:	da413e15 	stw	r9,1272(sp)
    c3d8:	00115040 	call	11504 <__fpclassifyd>
    c3dc:	da013f17 	ldw	r8,1276(sp)
    c3e0:	da413e17 	ldw	r9,1272(sp)
    c3e4:	1000ce26 	beq	r2,zero,c720 <___vfprintf_internal_r+0x19e8>
    c3e8:	057ff7c4 	movi	r21,-33
    c3ec:	00bfffc4 	movi	r2,-1
    c3f0:	856a703a 	and	r21,r16,r21
    c3f4:	4881f026 	beq	r9,r2,cbb8 <___vfprintf_internal_r+0x1e80>
    c3f8:	008011c4 	movi	r2,71
    c3fc:	a881e526 	beq	r21,r2,cb94 <___vfprintf_internal_r+0x1e5c>
    c400:	db013917 	ldw	r12,1252(sp)
    c404:	8ac04014 	ori	r11,r17,256
    c408:	dac12d15 	stw	r11,1204(sp)
    c40c:	6001e416 	blt	r12,zero,cba0 <___vfprintf_internal_r+0x1e68>
    c410:	dc813917 	ldw	r18,1252(sp)
    c414:	d8012b05 	stb	zero,1196(sp)
    c418:	00801984 	movi	r2,102
    c41c:	80811826 	beq	r16,r2,c880 <___vfprintf_internal_r+0x1b48>
    c420:	00801184 	movi	r2,70
    c424:	80811626 	beq	r16,r2,c880 <___vfprintf_internal_r+0x1b48>
    c428:	00801144 	movi	r2,69
    c42c:	a881e026 	beq	r21,r2,cbb0 <___vfprintf_internal_r+0x1e78>
    c430:	4839883a 	mov	fp,r9
    c434:	d8812604 	addi	r2,sp,1176
    c438:	d8800115 	stw	r2,4(sp)
    c43c:	d9413717 	ldw	r5,1244(sp)
    c440:	d8812504 	addi	r2,sp,1172
    c444:	d8800215 	stw	r2,8(sp)
    c448:	d8812104 	addi	r2,sp,1156
    c44c:	df000015 	stw	fp,0(sp)
    c450:	d8800315 	stw	r2,12(sp)
    c454:	b009883a 	mov	r4,r22
    c458:	900d883a 	mov	r6,r18
    c45c:	01c00084 	movi	r7,2
    c460:	da013f15 	stw	r8,1276(sp)
    c464:	da413e15 	stw	r9,1272(sp)
    c468:	000d1f80 	call	d1f8 <_dtoa_r>
    c46c:	d8813115 	stw	r2,1220(sp)
    c470:	008019c4 	movi	r2,103
    c474:	da013f17 	ldw	r8,1276(sp)
    c478:	da413e17 	ldw	r9,1272(sp)
    c47c:	80800226 	beq	r16,r2,c488 <___vfprintf_internal_r+0x1750>
    c480:	008011c4 	movi	r2,71
    c484:	8081101e 	bne	r16,r2,c8c8 <___vfprintf_internal_r+0x1b90>
    c488:	8880004c 	andi	r2,r17,1
    c48c:	1001df26 	beq	r2,zero,cc0c <___vfprintf_internal_r+0x1ed4>
    c490:	db013117 	ldw	r12,1220(sp)
    c494:	6715883a 	add	r10,r12,fp
    c498:	d9013717 	ldw	r4,1244(sp)
    c49c:	900b883a 	mov	r5,r18
    c4a0:	000d883a 	mov	r6,zero
    c4a4:	000f883a 	mov	r7,zero
    c4a8:	da013f15 	stw	r8,1276(sp)
    c4ac:	da413e15 	stw	r9,1272(sp)
    c4b0:	da813d15 	stw	r10,1268(sp)
    c4b4:	00163c80 	call	163c8 <__eqdf2>
    c4b8:	da013f17 	ldw	r8,1276(sp)
    c4bc:	da413e17 	ldw	r9,1272(sp)
    c4c0:	da813d17 	ldw	r10,1268(sp)
    c4c4:	10016526 	beq	r2,zero,ca5c <___vfprintf_internal_r+0x1d24>
    c4c8:	d8812117 	ldw	r2,1156(sp)
    c4cc:	1280062e 	bgeu	r2,r10,c4e8 <___vfprintf_internal_r+0x17b0>
    c4d0:	01000c04 	movi	r4,48
    c4d4:	10c00044 	addi	r3,r2,1
    c4d8:	d8c12115 	stw	r3,1156(sp)
    c4dc:	11000005 	stb	r4,0(r2)
    c4e0:	d8812117 	ldw	r2,1156(sp)
    c4e4:	12bffb36 	bltu	r2,r10,c4d4 <__alt_mem_descriptor_memory+0xdefcc4d4>
    c4e8:	db013117 	ldw	r12,1220(sp)
    c4ec:	1305c83a 	sub	r2,r2,r12
    c4f0:	d8813315 	stw	r2,1228(sp)
    c4f4:	008011c4 	movi	r2,71
    c4f8:	a8814a26 	beq	r21,r2,ca24 <___vfprintf_internal_r+0x1cec>
    c4fc:	00801944 	movi	r2,101
    c500:	14020a0e 	bge	r2,r16,cd2c <___vfprintf_internal_r+0x1ff4>
    c504:	00801984 	movi	r2,102
    c508:	8081b626 	beq	r16,r2,cbe4 <___vfprintf_internal_r+0x1eac>
    c50c:	db012617 	ldw	r12,1176(sp)
    c510:	db013415 	stw	r12,1232(sp)
    c514:	db013417 	ldw	r12,1232(sp)
    c518:	dac13317 	ldw	r11,1228(sp)
    c51c:	62c1a816 	blt	r12,r11,cbc0 <___vfprintf_internal_r+0x1e88>
    c520:	8c40004c 	andi	r17,r17,1
    c524:	8801ca1e 	bne	r17,zero,cc50 <___vfprintf_internal_r+0x1f18>
    c528:	6005883a 	mov	r2,r12
    c52c:	6001b516 	blt	r12,zero,cc04 <___vfprintf_internal_r+0x1ecc>
    c530:	dc813417 	ldw	r18,1232(sp)
    c534:	df012b07 	ldb	fp,1196(sp)
    c538:	e001321e 	bne	fp,zero,ca04 <___vfprintf_internal_r+0x1ccc>
    c53c:	dc412d17 	ldw	r17,1204(sp)
    c540:	dd412783 	ldbu	r21,1182(sp)
    c544:	d8812b15 	stw	r2,1196(sp)
    c548:	dcc12d15 	stw	r19,1204(sp)
    c54c:	d8013215 	stw	zero,1224(sp)
    c550:	003b8d06 	br	b388 <__alt_mem_descriptor_memory+0xdefcb388>
    c554:	88c0100c 	andi	r3,r17,64
    c558:	18008226 	beq	r3,zero,c764 <___vfprintf_internal_r+0x1a2c>
    c55c:	dac12d17 	ldw	r11,1204(sp)
    c560:	14c0000b 	ldhu	r19,0(r2)
    c564:	0039883a 	mov	fp,zero
    c568:	5ac00104 	addi	r11,r11,4
    c56c:	dac12d15 	stw	r11,1204(sp)
    c570:	003c8f06 	br	b7b0 <__alt_mem_descriptor_memory+0xdefcb7b0>
    c574:	1c000007 	ldb	r16,0(r3)
    c578:	1805883a 	mov	r2,r3
    c57c:	003a5506 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    c580:	00800084 	movi	r2,2
    c584:	003b5e06 	br	b300 <__alt_mem_descriptor_memory+0xdefcb300>
    c588:	8880040c 	andi	r2,r17,16
    c58c:	1000091e 	bne	r2,zero,c5b4 <___vfprintf_internal_r+0x187c>
    c590:	8c40100c 	andi	r17,r17,64
    c594:	88000726 	beq	r17,zero,c5b4 <___vfprintf_internal_r+0x187c>
    c598:	db012d17 	ldw	r12,1204(sp)
    c59c:	dac12f17 	ldw	r11,1212(sp)
    c5a0:	60800017 	ldw	r2,0(r12)
    c5a4:	63000104 	addi	r12,r12,4
    c5a8:	db012d15 	stw	r12,1204(sp)
    c5ac:	12c0000d 	sth	r11,0(r2)
    c5b0:	003a1e06 	br	ae2c <__alt_mem_descriptor_memory+0xdefcae2c>
    c5b4:	db012d17 	ldw	r12,1204(sp)
    c5b8:	dac12f17 	ldw	r11,1212(sp)
    c5bc:	60800017 	ldw	r2,0(r12)
    c5c0:	63000104 	addi	r12,r12,4
    c5c4:	db012d15 	stw	r12,1204(sp)
    c5c8:	12c00015 	stw	r11,0(r2)
    c5cc:	003a1706 	br	ae2c <__alt_mem_descriptor_memory+0xdefcae2c>
    c5d0:	01000174 	movhi	r4,5
    c5d4:	2135ac84 	addi	r4,r4,-10574
    c5d8:	d9012c15 	stw	r4,1200(sp)
    c5dc:	dac12c17 	ldw	r11,1200(sp)
    c5e0:	1c87883a 	add	r3,r3,r18
    c5e4:	10800044 	addi	r2,r2,1
    c5e8:	42c00015 	stw	r11,0(r8)
    c5ec:	44800115 	stw	r18,4(r8)
    c5f0:	d8c12015 	stw	r3,1152(sp)
    c5f4:	d8811f15 	stw	r2,1148(sp)
    c5f8:	010001c4 	movi	r4,7
    c5fc:	20bee016 	blt	r4,r2,c180 <__alt_mem_descriptor_memory+0xdefcc180>
    c600:	42000204 	addi	r8,r8,8
    c604:	003ee506 	br	c19c <__alt_mem_descriptor_memory+0xdefcc19c>
    c608:	01000174 	movhi	r4,5
    c60c:	2135ac84 	addi	r4,r4,-10574
    c610:	d9012c15 	stw	r4,1200(sp)
    c614:	003bd806 	br	b578 <__alt_mem_descriptor_memory+0xdefcb578>
    c618:	b009883a 	mov	r4,r22
    c61c:	b80b883a 	mov	r5,r23
    c620:	d9811e04 	addi	r6,sp,1144
    c624:	0012a840 	call	12a84 <__sprint_r>
    c628:	103ada1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c62c:	d8c12017 	ldw	r3,1152(sp)
    c630:	da000404 	addi	r8,sp,16
    c634:	003d6b06 	br	bbe4 <__alt_mem_descriptor_memory+0xdefcbbe4>
    c638:	d8811f17 	ldw	r2,1148(sp)
    c63c:	03000174 	movhi	r12,5
    c640:	01000044 	movi	r4,1
    c644:	18c00044 	addi	r3,r3,1
    c648:	10800044 	addi	r2,r2,1
    c64c:	6335a404 	addi	r12,r12,-10608
    c650:	41000115 	stw	r4,4(r8)
    c654:	43000015 	stw	r12,0(r8)
    c658:	d8c12015 	stw	r3,1152(sp)
    c65c:	d8811f15 	stw	r2,1148(sp)
    c660:	010001c4 	movi	r4,7
    c664:	20804916 	blt	r4,r2,c78c <___vfprintf_internal_r+0x1a54>
    c668:	42000204 	addi	r8,r8,8
    c66c:	8000041e 	bne	r16,zero,c680 <___vfprintf_internal_r+0x1948>
    c670:	dac13317 	ldw	r11,1228(sp)
    c674:	5800021e 	bne	r11,zero,c680 <___vfprintf_internal_r+0x1948>
    c678:	8880004c 	andi	r2,r17,1
    c67c:	103bd526 	beq	r2,zero,b5d4 <__alt_mem_descriptor_memory+0xdefcb5d4>
    c680:	db013817 	ldw	r12,1248(sp)
    c684:	d8811f17 	ldw	r2,1148(sp)
    c688:	dac13517 	ldw	r11,1236(sp)
    c68c:	1b07883a 	add	r3,r3,r12
    c690:	10800044 	addi	r2,r2,1
    c694:	42c00015 	stw	r11,0(r8)
    c698:	43000115 	stw	r12,4(r8)
    c69c:	d8c12015 	stw	r3,1152(sp)
    c6a0:	d8811f15 	stw	r2,1148(sp)
    c6a4:	010001c4 	movi	r4,7
    c6a8:	20813016 	blt	r4,r2,cb6c <___vfprintf_internal_r+0x1e34>
    c6ac:	42000204 	addi	r8,r8,8
    c6b0:	0421c83a 	sub	r16,zero,r16
    c6b4:	0400630e 	bge	zero,r16,c844 <___vfprintf_internal_r+0x1b0c>
    c6b8:	04800404 	movi	r18,16
    c6bc:	94009f0e 	bge	r18,r16,c93c <___vfprintf_internal_r+0x1c04>
    c6c0:	01000174 	movhi	r4,5
    c6c4:	2135ac84 	addi	r4,r4,-10574
    c6c8:	d9012c15 	stw	r4,1200(sp)
    c6cc:	054001c4 	movi	r21,7
    c6d0:	00000306 	br	c6e0 <___vfprintf_internal_r+0x19a8>
    c6d4:	42000204 	addi	r8,r8,8
    c6d8:	843ffc04 	addi	r16,r16,-16
    c6dc:	94009a0e 	bge	r18,r16,c948 <___vfprintf_internal_r+0x1c10>
    c6e0:	18c00404 	addi	r3,r3,16
    c6e4:	10800044 	addi	r2,r2,1
    c6e8:	45000015 	stw	r20,0(r8)
    c6ec:	44800115 	stw	r18,4(r8)
    c6f0:	d8c12015 	stw	r3,1152(sp)
    c6f4:	d8811f15 	stw	r2,1148(sp)
    c6f8:	a8bff60e 	bge	r21,r2,c6d4 <__alt_mem_descriptor_memory+0xdefcc6d4>
    c6fc:	b009883a 	mov	r4,r22
    c700:	b80b883a 	mov	r5,r23
    c704:	d9811e04 	addi	r6,sp,1144
    c708:	0012a840 	call	12a84 <__sprint_r>
    c70c:	103aa11e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c710:	d8c12017 	ldw	r3,1152(sp)
    c714:	d8811f17 	ldw	r2,1148(sp)
    c718:	da000404 	addi	r8,sp,16
    c71c:	003fee06 	br	c6d8 <__alt_mem_descriptor_memory+0xdefcc6d8>
    c720:	008011c4 	movi	r2,71
    c724:	1400b316 	blt	r2,r16,c9f4 <___vfprintf_internal_r+0x1cbc>
    c728:	03000174 	movhi	r12,5
    c72c:	63359604 	addi	r12,r12,-10664
    c730:	db013115 	stw	r12,1220(sp)
    c734:	00c000c4 	movi	r3,3
    c738:	00bfdfc4 	movi	r2,-129
    c73c:	d8c12b15 	stw	r3,1196(sp)
    c740:	88a2703a 	and	r17,r17,r2
    c744:	dd412783 	ldbu	r21,1182(sp)
    c748:	dcc12d15 	stw	r19,1204(sp)
    c74c:	1825883a 	mov	r18,r3
    c750:	d8013215 	stw	zero,1224(sp)
    c754:	d8013415 	stw	zero,1232(sp)
    c758:	003b0b06 	br	b388 <__alt_mem_descriptor_memory+0xdefcb388>
    c75c:	4825883a 	mov	r18,r9
    c760:	003cba06 	br	ba4c <__alt_mem_descriptor_memory+0xdefcba4c>
    c764:	db012d17 	ldw	r12,1204(sp)
    c768:	14c00017 	ldw	r19,0(r2)
    c76c:	0039883a 	mov	fp,zero
    c770:	63000104 	addi	r12,r12,4
    c774:	db012d15 	stw	r12,1204(sp)
    c778:	003c0d06 	br	b7b0 <__alt_mem_descriptor_memory+0xdefcb7b0>
    c77c:	00800174 	movhi	r2,5
    c780:	10b59404 	addi	r2,r2,-10672
    c784:	d8813115 	stw	r2,1220(sp)
    c788:	003ac406 	br	b29c <__alt_mem_descriptor_memory+0xdefcb29c>
    c78c:	b009883a 	mov	r4,r22
    c790:	b80b883a 	mov	r5,r23
    c794:	d9811e04 	addi	r6,sp,1144
    c798:	0012a840 	call	12a84 <__sprint_r>
    c79c:	103a7d1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c7a0:	dc012617 	ldw	r16,1176(sp)
    c7a4:	d8c12017 	ldw	r3,1152(sp)
    c7a8:	da000404 	addi	r8,sp,16
    c7ac:	003faf06 	br	c66c <__alt_mem_descriptor_memory+0xdefcc66c>
    c7b0:	db012e17 	ldw	r12,1208(sp)
    c7b4:	1805883a 	mov	r2,r3
    c7b8:	dac12d15 	stw	r11,1204(sp)
    c7bc:	0319c83a 	sub	r12,zero,r12
    c7c0:	db012e15 	stw	r12,1208(sp)
    c7c4:	003a7e06 	br	b1c0 <__alt_mem_descriptor_memory+0xdefcb1c0>
    c7c8:	18800044 	addi	r2,r3,1
    c7cc:	8c400814 	ori	r17,r17,32
    c7d0:	1c000047 	ldb	r16,1(r3)
    c7d4:	0039bf06 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    c7d8:	b009883a 	mov	r4,r22
    c7dc:	b80b883a 	mov	r5,r23
    c7e0:	d9811e04 	addi	r6,sp,1144
    c7e4:	0012a840 	call	12a84 <__sprint_r>
    c7e8:	103a6a1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c7ec:	d8c12017 	ldw	r3,1152(sp)
    c7f0:	da000404 	addi	r8,sp,16
    c7f4:	003d0c06 	br	bc28 <__alt_mem_descriptor_memory+0xdefcbc28>
    c7f8:	db012817 	ldw	r12,1184(sp)
    c7fc:	d8c13117 	ldw	r3,1220(sp)
    c800:	60e5c83a 	sub	r18,r12,r3
    c804:	003adb06 	br	b374 <__alt_mem_descriptor_memory+0xdefcb374>
    c808:	da013f15 	stw	r8,1276(sp)
    c80c:	0008d080 	call	8d08 <strlen>
    c810:	1025883a 	mov	r18,r2
    c814:	da013f17 	ldw	r8,1276(sp)
    c818:	903c8e0e 	bge	r18,zero,ba54 <__alt_mem_descriptor_memory+0xdefcba54>
    c81c:	0005883a 	mov	r2,zero
    c820:	003c8c06 	br	ba54 <__alt_mem_descriptor_memory+0xdefcba54>
    c824:	b009883a 	mov	r4,r22
    c828:	b80b883a 	mov	r5,r23
    c82c:	d9811e04 	addi	r6,sp,1144
    c830:	0012a840 	call	12a84 <__sprint_r>
    c834:	103a571e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c838:	d8c12017 	ldw	r3,1152(sp)
    c83c:	d8811f17 	ldw	r2,1148(sp)
    c840:	da000404 	addi	r8,sp,16
    c844:	db013317 	ldw	r12,1228(sp)
    c848:	dac13117 	ldw	r11,1220(sp)
    c84c:	10800044 	addi	r2,r2,1
    c850:	60c7883a 	add	r3,r12,r3
    c854:	42c00015 	stw	r11,0(r8)
    c858:	43000115 	stw	r12,4(r8)
    c85c:	d8c12015 	stw	r3,1152(sp)
    c860:	d8811f15 	stw	r2,1148(sp)
    c864:	010001c4 	movi	r4,7
    c868:	20bb590e 	bge	r4,r2,b5d0 <__alt_mem_descriptor_memory+0xdefcb5d0>
    c86c:	003d7e06 	br	be68 <__alt_mem_descriptor_memory+0xdefcbe68>
    c870:	01000174 	movhi	r4,5
    c874:	2135b084 	addi	r4,r4,-10558
    c878:	d9013615 	stw	r4,1240(sp)
    c87c:	003af606 	br	b458 <__alt_mem_descriptor_memory+0xdefcb458>
    c880:	d8812604 	addi	r2,sp,1176
    c884:	d8800115 	stw	r2,4(sp)
    c888:	d9413717 	ldw	r5,1244(sp)
    c88c:	d8812504 	addi	r2,sp,1172
    c890:	d8800215 	stw	r2,8(sp)
    c894:	d8812104 	addi	r2,sp,1156
    c898:	da400015 	stw	r9,0(sp)
    c89c:	d8800315 	stw	r2,12(sp)
    c8a0:	b009883a 	mov	r4,r22
    c8a4:	900d883a 	mov	r6,r18
    c8a8:	01c000c4 	movi	r7,3
    c8ac:	da013f15 	stw	r8,1276(sp)
    c8b0:	da413e15 	stw	r9,1272(sp)
    c8b4:	000d1f80 	call	d1f8 <_dtoa_r>
    c8b8:	da413e17 	ldw	r9,1272(sp)
    c8bc:	da013f17 	ldw	r8,1276(sp)
    c8c0:	d8813115 	stw	r2,1220(sp)
    c8c4:	4839883a 	mov	fp,r9
    c8c8:	dac13117 	ldw	r11,1220(sp)
    c8cc:	00801184 	movi	r2,70
    c8d0:	5f15883a 	add	r10,r11,fp
    c8d4:	a8bef01e 	bne	r21,r2,c498 <__alt_mem_descriptor_memory+0xdefcc498>
    c8d8:	59000007 	ldb	r4,0(r11)
    c8dc:	00800c04 	movi	r2,48
    c8e0:	2080e026 	beq	r4,r2,cc64 <___vfprintf_internal_r+0x1f2c>
    c8e4:	d8c12617 	ldw	r3,1176(sp)
    c8e8:	50d5883a 	add	r10,r10,r3
    c8ec:	003eea06 	br	c498 <__alt_mem_descriptor_memory+0xdefcc498>
    c8f0:	0025883a 	mov	r18,zero
    c8f4:	003db306 	br	bfc4 <__alt_mem_descriptor_memory+0xdefcbfc4>
    c8f8:	b009883a 	mov	r4,r22
    c8fc:	b80b883a 	mov	r5,r23
    c900:	d9811e04 	addi	r6,sp,1144
    c904:	0012a840 	call	12a84 <__sprint_r>
    c908:	103a221e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c90c:	d8c12017 	ldw	r3,1152(sp)
    c910:	da000404 	addi	r8,sp,16
    c914:	003daa06 	br	bfc0 <__alt_mem_descriptor_memory+0xdefcbfc0>
    c918:	b009883a 	mov	r4,r22
    c91c:	b80b883a 	mov	r5,r23
    c920:	d9811e04 	addi	r6,sp,1144
    c924:	0012a840 	call	12a84 <__sprint_r>
    c928:	103a1a1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c92c:	d8812617 	ldw	r2,1176(sp)
    c930:	d8c12017 	ldw	r3,1152(sp)
    c934:	da000404 	addi	r8,sp,16
    c938:	003e2c06 	br	c1ec <__alt_mem_descriptor_memory+0xdefcc1ec>
    c93c:	03000174 	movhi	r12,5
    c940:	6335ac84 	addi	r12,r12,-10574
    c944:	db012c15 	stw	r12,1200(sp)
    c948:	dac12c17 	ldw	r11,1200(sp)
    c94c:	1c07883a 	add	r3,r3,r16
    c950:	10800044 	addi	r2,r2,1
    c954:	42c00015 	stw	r11,0(r8)
    c958:	44000115 	stw	r16,4(r8)
    c95c:	d8c12015 	stw	r3,1152(sp)
    c960:	d8811f15 	stw	r2,1148(sp)
    c964:	010001c4 	movi	r4,7
    c968:	20bfae16 	blt	r4,r2,c824 <__alt_mem_descriptor_memory+0xdefcc824>
    c96c:	42000204 	addi	r8,r8,8
    c970:	003fb406 	br	c844 <__alt_mem_descriptor_memory+0xdefcc844>
    c974:	03000174 	movhi	r12,5
    c978:	6335b084 	addi	r12,r12,-10558
    c97c:	db013615 	stw	r12,1240(sp)
    c980:	003b3806 	br	b664 <__alt_mem_descriptor_memory+0xdefcb664>
    c984:	b009883a 	mov	r4,r22
    c988:	b80b883a 	mov	r5,r23
    c98c:	d9811e04 	addi	r6,sp,1144
    c990:	0012a840 	call	12a84 <__sprint_r>
    c994:	1039ff1e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    c998:	d8812617 	ldw	r2,1176(sp)
    c99c:	db013317 	ldw	r12,1228(sp)
    c9a0:	d8c12017 	ldw	r3,1152(sp)
    c9a4:	da000404 	addi	r8,sp,16
    c9a8:	6085c83a 	sub	r2,r12,r2
    c9ac:	003e2006 	br	c230 <__alt_mem_descriptor_memory+0xdefcc230>
    c9b0:	0021883a 	mov	r16,zero
    c9b4:	003e1f06 	br	c234 <__alt_mem_descriptor_memory+0xdefcc234>
    c9b8:	00800184 	movi	r2,6
    c9bc:	1240012e 	bgeu	r2,r9,c9c4 <___vfprintf_internal_r+0x1c8c>
    c9c0:	1013883a 	mov	r9,r2
    c9c4:	4825883a 	mov	r18,r9
    c9c8:	4805883a 	mov	r2,r9
    c9cc:	48009e16 	blt	r9,zero,cc48 <___vfprintf_internal_r+0x1f10>
    c9d0:	d8812b15 	stw	r2,1196(sp)
    c9d4:	00800174 	movhi	r2,5
    c9d8:	10b5a204 	addi	r2,r2,-10616
    c9dc:	d8813115 	stw	r2,1220(sp)
    c9e0:	dcc12d15 	stw	r19,1204(sp)
    c9e4:	d8013215 	stw	zero,1224(sp)
    c9e8:	d8013415 	stw	zero,1232(sp)
    c9ec:	0005883a 	mov	r2,zero
    c9f0:	003a6c06 	br	b3a4 <__alt_mem_descriptor_memory+0xdefcb3a4>
    c9f4:	00800174 	movhi	r2,5
    c9f8:	10b59704 	addi	r2,r2,-10660
    c9fc:	d8813115 	stw	r2,1220(sp)
    ca00:	003f4c06 	br	c734 <__alt_mem_descriptor_memory+0xdefcc734>
    ca04:	00c00b44 	movi	r3,45
    ca08:	d8812b15 	stw	r2,1196(sp)
    ca0c:	dc412d17 	ldw	r17,1204(sp)
    ca10:	d8c12785 	stb	r3,1182(sp)
    ca14:	dcc12d15 	stw	r19,1204(sp)
    ca18:	d8013215 	stw	zero,1224(sp)
    ca1c:	00800b44 	movi	r2,45
    ca20:	003a5d06 	br	b398 <__alt_mem_descriptor_memory+0xdefcb398>
    ca24:	d8c12617 	ldw	r3,1176(sp)
    ca28:	00bfff44 	movi	r2,-3
    ca2c:	18800d16 	blt	r3,r2,ca64 <___vfprintf_internal_r+0x1d2c>
    ca30:	48c00c16 	blt	r9,r3,ca64 <___vfprintf_internal_r+0x1d2c>
    ca34:	d8c13415 	stw	r3,1232(sp)
    ca38:	040019c4 	movi	r16,103
    ca3c:	003eb506 	br	c514 <__alt_mem_descriptor_memory+0xdefcc514>
    ca40:	05400b44 	movi	r21,45
    ca44:	dd412785 	stb	r21,1182(sp)
    ca48:	003a0f06 	br	b288 <__alt_mem_descriptor_memory+0xdefcb288>
    ca4c:	01000174 	movhi	r4,5
    ca50:	2135ac84 	addi	r4,r4,-10574
    ca54:	d9012c15 	stw	r4,1200(sp)
    ca58:	003cb106 	br	bd20 <__alt_mem_descriptor_memory+0xdefcbd20>
    ca5c:	5005883a 	mov	r2,r10
    ca60:	003ea106 	br	c4e8 <__alt_mem_descriptor_memory+0xdefcc4e8>
    ca64:	843fff84 	addi	r16,r16,-2
    ca68:	1f3fffc4 	addi	fp,r3,-1
    ca6c:	df012615 	stw	fp,1176(sp)
    ca70:	dc0122c5 	stb	r16,1163(sp)
    ca74:	e0009516 	blt	fp,zero,cccc <___vfprintf_internal_r+0x1f94>
    ca78:	00800ac4 	movi	r2,43
    ca7c:	d8812305 	stb	r2,1164(sp)
    ca80:	00800244 	movi	r2,9
    ca84:	1700690e 	bge	r2,fp,cc2c <___vfprintf_internal_r+0x1ef4>
    ca88:	dd4122c4 	addi	r21,sp,1163
    ca8c:	dc012c15 	stw	r16,1200(sp)
    ca90:	8825883a 	mov	r18,r17
    ca94:	a821883a 	mov	r16,r21
    ca98:	4023883a 	mov	r17,r8
    ca9c:	e009883a 	mov	r4,fp
    caa0:	01400284 	movi	r5,10
    caa4:	00151f40 	call	151f4 <__modsi3>
    caa8:	10800c04 	addi	r2,r2,48
    caac:	843fffc4 	addi	r16,r16,-1
    cab0:	e009883a 	mov	r4,fp
    cab4:	01400284 	movi	r5,10
    cab8:	80800005 	stb	r2,0(r16)
    cabc:	00151a00 	call	151a0 <__divsi3>
    cac0:	1039883a 	mov	fp,r2
    cac4:	00800244 	movi	r2,9
    cac8:	173ff416 	blt	r2,fp,ca9c <__alt_mem_descriptor_memory+0xdefcca9c>
    cacc:	8811883a 	mov	r8,r17
    cad0:	e0800c04 	addi	r2,fp,48
    cad4:	9023883a 	mov	r17,r18
    cad8:	8025883a 	mov	r18,r16
    cadc:	913fffc4 	addi	r4,r18,-1
    cae0:	90bfffc5 	stb	r2,-1(r18)
    cae4:	dc012c17 	ldw	r16,1200(sp)
    cae8:	25408e2e 	bgeu	r4,r21,cd24 <___vfprintf_internal_r+0x1fec>
    caec:	d9412384 	addi	r5,sp,1166
    caf0:	2c8bc83a 	sub	r5,r5,r18
    caf4:	d8c12344 	addi	r3,sp,1165
    caf8:	a94b883a 	add	r5,r21,r5
    cafc:	00000106 	br	cb04 <___vfprintf_internal_r+0x1dcc>
    cb00:	20800003 	ldbu	r2,0(r4)
    cb04:	18800005 	stb	r2,0(r3)
    cb08:	18c00044 	addi	r3,r3,1
    cb0c:	21000044 	addi	r4,r4,1
    cb10:	197ffb1e 	bne	r3,r5,cb00 <__alt_mem_descriptor_memory+0xdefccb00>
    cb14:	d8812304 	addi	r2,sp,1164
    cb18:	1485c83a 	sub	r2,r2,r18
    cb1c:	d8c12344 	addi	r3,sp,1165
    cb20:	1885883a 	add	r2,r3,r2
    cb24:	dac13317 	ldw	r11,1228(sp)
    cb28:	156bc83a 	sub	r21,r2,r21
    cb2c:	dd413a15 	stw	r21,1256(sp)
    cb30:	00800044 	movi	r2,1
    cb34:	5d65883a 	add	r18,r11,r21
    cb38:	12c0770e 	bge	r2,r11,cd18 <___vfprintf_internal_r+0x1fe0>
    cb3c:	94800044 	addi	r18,r18,1
    cb40:	9005883a 	mov	r2,r18
    cb44:	90007216 	blt	r18,zero,cd10 <___vfprintf_internal_r+0x1fd8>
    cb48:	d8013415 	stw	zero,1232(sp)
    cb4c:	003e7906 	br	c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cb50:	da412b15 	stw	r9,1196(sp)
    cb54:	dd412783 	ldbu	r21,1182(sp)
    cb58:	4825883a 	mov	r18,r9
    cb5c:	dcc12d15 	stw	r19,1204(sp)
    cb60:	d8013215 	stw	zero,1224(sp)
    cb64:	d8013415 	stw	zero,1232(sp)
    cb68:	003a0706 	br	b388 <__alt_mem_descriptor_memory+0xdefcb388>
    cb6c:	b009883a 	mov	r4,r22
    cb70:	b80b883a 	mov	r5,r23
    cb74:	d9811e04 	addi	r6,sp,1144
    cb78:	0012a840 	call	12a84 <__sprint_r>
    cb7c:	1039851e 	bne	r2,zero,b194 <__alt_mem_descriptor_memory+0xdefcb194>
    cb80:	dc012617 	ldw	r16,1176(sp)
    cb84:	d8c12017 	ldw	r3,1152(sp)
    cb88:	d8811f17 	ldw	r2,1148(sp)
    cb8c:	da000404 	addi	r8,sp,16
    cb90:	003ec706 	br	c6b0 <__alt_mem_descriptor_memory+0xdefcc6b0>
    cb94:	483e1a1e 	bne	r9,zero,c400 <__alt_mem_descriptor_memory+0xdefcc400>
    cb98:	9013883a 	mov	r9,r18
    cb9c:	003e1806 	br	c400 <__alt_mem_descriptor_memory+0xdefcc400>
    cba0:	00c00b44 	movi	r3,45
    cba4:	64a0003c 	xorhi	r18,r12,32768
    cba8:	d8c12b05 	stb	r3,1196(sp)
    cbac:	003e1a06 	br	c418 <__alt_mem_descriptor_memory+0xdefcc418>
    cbb0:	4f000044 	addi	fp,r9,1
    cbb4:	003e1f06 	br	c434 <__alt_mem_descriptor_memory+0xdefcc434>
    cbb8:	02400184 	movi	r9,6
    cbbc:	003e1006 	br	c400 <__alt_mem_descriptor_memory+0xdefcc400>
    cbc0:	d8c13417 	ldw	r3,1232(sp)
    cbc4:	00c04b0e 	bge	zero,r3,ccf4 <___vfprintf_internal_r+0x1fbc>
    cbc8:	04800044 	movi	r18,1
    cbcc:	dac13317 	ldw	r11,1228(sp)
    cbd0:	92e5883a 	add	r18,r18,r11
    cbd4:	9005883a 	mov	r2,r18
    cbd8:	903e560e 	bge	r18,zero,c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cbdc:	0005883a 	mov	r2,zero
    cbe0:	003e5406 	br	c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cbe4:	d8c12617 	ldw	r3,1176(sp)
    cbe8:	d8c13415 	stw	r3,1232(sp)
    cbec:	00c03b0e 	bge	zero,r3,ccdc <___vfprintf_internal_r+0x1fa4>
    cbf0:	4800081e 	bne	r9,zero,cc14 <___vfprintf_internal_r+0x1edc>
    cbf4:	8c40004c 	andi	r17,r17,1
    cbf8:	8800061e 	bne	r17,zero,cc14 <___vfprintf_internal_r+0x1edc>
    cbfc:	1805883a 	mov	r2,r3
    cc00:	183e4b0e 	bge	r3,zero,c530 <__alt_mem_descriptor_memory+0xdefcc530>
    cc04:	0005883a 	mov	r2,zero
    cc08:	003e4906 	br	c530 <__alt_mem_descriptor_memory+0xdefcc530>
    cc0c:	d8812117 	ldw	r2,1156(sp)
    cc10:	003e3506 	br	c4e8 <__alt_mem_descriptor_memory+0xdefcc4e8>
    cc14:	dac13417 	ldw	r11,1232(sp)
    cc18:	4a400044 	addi	r9,r9,1
    cc1c:	5a65883a 	add	r18,r11,r9
    cc20:	9005883a 	mov	r2,r18
    cc24:	903e430e 	bge	r18,zero,c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cc28:	003fec06 	br	cbdc <__alt_mem_descriptor_memory+0xdefccbdc>
    cc2c:	00800c04 	movi	r2,48
    cc30:	e0c00c04 	addi	r3,fp,48
    cc34:	d8812345 	stb	r2,1165(sp)
    cc38:	d8c12385 	stb	r3,1166(sp)
    cc3c:	d88123c4 	addi	r2,sp,1167
    cc40:	dd4122c4 	addi	r21,sp,1163
    cc44:	003fb706 	br	cb24 <__alt_mem_descriptor_memory+0xdefccb24>
    cc48:	0005883a 	mov	r2,zero
    cc4c:	003f6006 	br	c9d0 <__alt_mem_descriptor_memory+0xdefcc9d0>
    cc50:	db013417 	ldw	r12,1232(sp)
    cc54:	64800044 	addi	r18,r12,1
    cc58:	9005883a 	mov	r2,r18
    cc5c:	903e350e 	bge	r18,zero,c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cc60:	003fde06 	br	cbdc <__alt_mem_descriptor_memory+0xdefccbdc>
    cc64:	d9013717 	ldw	r4,1244(sp)
    cc68:	900b883a 	mov	r5,r18
    cc6c:	000d883a 	mov	r6,zero
    cc70:	000f883a 	mov	r7,zero
    cc74:	da013f15 	stw	r8,1276(sp)
    cc78:	da413e15 	stw	r9,1272(sp)
    cc7c:	da813d15 	stw	r10,1268(sp)
    cc80:	00163c80 	call	163c8 <__eqdf2>
    cc84:	da013f17 	ldw	r8,1276(sp)
    cc88:	da413e17 	ldw	r9,1272(sp)
    cc8c:	da813d17 	ldw	r10,1268(sp)
    cc90:	103f1426 	beq	r2,zero,c8e4 <__alt_mem_descriptor_memory+0xdefcc8e4>
    cc94:	00800044 	movi	r2,1
    cc98:	1707c83a 	sub	r3,r2,fp
    cc9c:	d8c12615 	stw	r3,1176(sp)
    cca0:	003f1106 	br	c8e8 <__alt_mem_descriptor_memory+0xdefcc8e8>
    cca4:	dac12d17 	ldw	r11,1204(sp)
    cca8:	5a400017 	ldw	r9,0(r11)
    ccac:	5ac00104 	addi	r11,r11,4
    ccb0:	dac12d15 	stw	r11,1204(sp)
    ccb4:	483ec60e 	bge	r9,zero,c7d0 <__alt_mem_descriptor_memory+0xdefcc7d0>
    ccb8:	027fffc4 	movi	r9,-1
    ccbc:	1c000047 	ldb	r16,1(r3)
    ccc0:	00388406 	br	aed4 <__alt_mem_descriptor_memory+0xdefcaed4>
    ccc4:	043fffc4 	movi	r16,-1
    ccc8:	00391006 	br	b10c <__alt_mem_descriptor_memory+0xdefcb10c>
    cccc:	00800b44 	movi	r2,45
    ccd0:	0739c83a 	sub	fp,zero,fp
    ccd4:	d8812305 	stb	r2,1164(sp)
    ccd8:	003f6906 	br	ca80 <__alt_mem_descriptor_memory+0xdefcca80>
    ccdc:	4800081e 	bne	r9,zero,cd00 <___vfprintf_internal_r+0x1fc8>
    cce0:	8c40004c 	andi	r17,r17,1
    cce4:	8800061e 	bne	r17,zero,cd00 <___vfprintf_internal_r+0x1fc8>
    cce8:	00800044 	movi	r2,1
    ccec:	1025883a 	mov	r18,r2
    ccf0:	003e1006 	br	c534 <__alt_mem_descriptor_memory+0xdefcc534>
    ccf4:	04800084 	movi	r18,2
    ccf8:	90e5c83a 	sub	r18,r18,r3
    ccfc:	003fb306 	br	cbcc <__alt_mem_descriptor_memory+0xdefccbcc>
    cd00:	4c800084 	addi	r18,r9,2
    cd04:	9005883a 	mov	r2,r18
    cd08:	903e0a0e 	bge	r18,zero,c534 <__alt_mem_descriptor_memory+0xdefcc534>
    cd0c:	003fb306 	br	cbdc <__alt_mem_descriptor_memory+0xdefccbdc>
    cd10:	0005883a 	mov	r2,zero
    cd14:	003f8c06 	br	cb48 <__alt_mem_descriptor_memory+0xdefccb48>
    cd18:	88a2703a 	and	r17,r17,r2
    cd1c:	883f8826 	beq	r17,zero,cb40 <__alt_mem_descriptor_memory+0xdefccb40>
    cd20:	003f8606 	br	cb3c <__alt_mem_descriptor_memory+0xdefccb3c>
    cd24:	d8812344 	addi	r2,sp,1165
    cd28:	003f7e06 	br	cb24 <__alt_mem_descriptor_memory+0xdefccb24>
    cd2c:	d8c12617 	ldw	r3,1176(sp)
    cd30:	003f4d06 	br	ca68 <__alt_mem_descriptor_memory+0xdefcca68>

0000cd34 <__vfprintf_internal>:
    cd34:	2007883a 	mov	r3,r4
    cd38:	01000174 	movhi	r4,5
    cd3c:	21072d04 	addi	r4,r4,7348
    cd40:	21000017 	ldw	r4,0(r4)
    cd44:	2805883a 	mov	r2,r5
    cd48:	300f883a 	mov	r7,r6
    cd4c:	180b883a 	mov	r5,r3
    cd50:	100d883a 	mov	r6,r2
    cd54:	000ad381 	jmpi	ad38 <___vfprintf_internal_r>

0000cd58 <__swbuf_r>:
    cd58:	defffc04 	addi	sp,sp,-16
    cd5c:	dc800215 	stw	r18,8(sp)
    cd60:	dc400115 	stw	r17,4(sp)
    cd64:	dc000015 	stw	r16,0(sp)
    cd68:	dfc00315 	stw	ra,12(sp)
    cd6c:	2025883a 	mov	r18,r4
    cd70:	2823883a 	mov	r17,r5
    cd74:	3021883a 	mov	r16,r6
    cd78:	20000226 	beq	r4,zero,cd84 <__swbuf_r+0x2c>
    cd7c:	20800e17 	ldw	r2,56(r4)
    cd80:	10004126 	beq	r2,zero,ce88 <__swbuf_r+0x130>
    cd84:	80c00617 	ldw	r3,24(r16)
    cd88:	8180030b 	ldhu	r6,12(r16)
    cd8c:	80c00215 	stw	r3,8(r16)
    cd90:	30c0020c 	andi	r3,r6,8
    cd94:	18003526 	beq	r3,zero,ce6c <__swbuf_r+0x114>
    cd98:	80c00417 	ldw	r3,16(r16)
    cd9c:	18003326 	beq	r3,zero,ce6c <__swbuf_r+0x114>
    cda0:	3088000c 	andi	r2,r6,8192
    cda4:	8c403fcc 	andi	r17,r17,255
    cda8:	10001726 	beq	r2,zero,ce08 <__swbuf_r+0xb0>
    cdac:	80800017 	ldw	r2,0(r16)
    cdb0:	81000517 	ldw	r4,20(r16)
    cdb4:	10c7c83a 	sub	r3,r2,r3
    cdb8:	19001d0e 	bge	r3,r4,ce30 <__swbuf_r+0xd8>
    cdbc:	18c00044 	addi	r3,r3,1
    cdc0:	81400217 	ldw	r5,8(r16)
    cdc4:	11000044 	addi	r4,r2,1
    cdc8:	81000015 	stw	r4,0(r16)
    cdcc:	297fffc4 	addi	r5,r5,-1
    cdd0:	81400215 	stw	r5,8(r16)
    cdd4:	14400005 	stb	r17,0(r2)
    cdd8:	80800517 	ldw	r2,20(r16)
    cddc:	10c01d26 	beq	r2,r3,ce54 <__swbuf_r+0xfc>
    cde0:	8080030b 	ldhu	r2,12(r16)
    cde4:	1080004c 	andi	r2,r2,1
    cde8:	1000181e 	bne	r2,zero,ce4c <__swbuf_r+0xf4>
    cdec:	8805883a 	mov	r2,r17
    cdf0:	dfc00317 	ldw	ra,12(sp)
    cdf4:	dc800217 	ldw	r18,8(sp)
    cdf8:	dc400117 	ldw	r17,4(sp)
    cdfc:	dc000017 	ldw	r16,0(sp)
    ce00:	dec00404 	addi	sp,sp,16
    ce04:	f800283a 	ret
    ce08:	81001917 	ldw	r4,100(r16)
    ce0c:	00b7ffc4 	movi	r2,-8193
    ce10:	31880014 	ori	r6,r6,8192
    ce14:	2084703a 	and	r2,r4,r2
    ce18:	80801915 	stw	r2,100(r16)
    ce1c:	80800017 	ldw	r2,0(r16)
    ce20:	81000517 	ldw	r4,20(r16)
    ce24:	8180030d 	sth	r6,12(r16)
    ce28:	10c7c83a 	sub	r3,r2,r3
    ce2c:	193fe316 	blt	r3,r4,cdbc <__alt_mem_descriptor_memory+0xdefccdbc>
    ce30:	9009883a 	mov	r4,r18
    ce34:	800b883a 	mov	r5,r16
    ce38:	000e9200 	call	e920 <_fflush_r>
    ce3c:	1000091e 	bne	r2,zero,ce64 <__swbuf_r+0x10c>
    ce40:	80800017 	ldw	r2,0(r16)
    ce44:	00c00044 	movi	r3,1
    ce48:	003fdd06 	br	cdc0 <__alt_mem_descriptor_memory+0xdefccdc0>
    ce4c:	00800284 	movi	r2,10
    ce50:	88bfe61e 	bne	r17,r2,cdec <__alt_mem_descriptor_memory+0xdefccdec>
    ce54:	9009883a 	mov	r4,r18
    ce58:	800b883a 	mov	r5,r16
    ce5c:	000e9200 	call	e920 <_fflush_r>
    ce60:	103fe226 	beq	r2,zero,cdec <__alt_mem_descriptor_memory+0xdefccdec>
    ce64:	00bfffc4 	movi	r2,-1
    ce68:	003fe106 	br	cdf0 <__alt_mem_descriptor_memory+0xdefccdf0>
    ce6c:	9009883a 	mov	r4,r18
    ce70:	800b883a 	mov	r5,r16
    ce74:	000cec80 	call	cec8 <__swsetup_r>
    ce78:	1000051e 	bne	r2,zero,ce90 <__swbuf_r+0x138>
    ce7c:	8180030b 	ldhu	r6,12(r16)
    ce80:	80c00417 	ldw	r3,16(r16)
    ce84:	003fc606 	br	cda0 <__alt_mem_descriptor_memory+0xdefccda0>
    ce88:	000eec80 	call	eec8 <__sinit>
    ce8c:	003fbd06 	br	cd84 <__alt_mem_descriptor_memory+0xdefccd84>
    ce90:	80c0030b 	ldhu	r3,12(r16)
    ce94:	00bfffc4 	movi	r2,-1
    ce98:	18c01014 	ori	r3,r3,64
    ce9c:	80c0030d 	sth	r3,12(r16)
    cea0:	00c00244 	movi	r3,9
    cea4:	90c00015 	stw	r3,0(r18)
    cea8:	003fd106 	br	cdf0 <__alt_mem_descriptor_memory+0xdefccdf0>

0000ceac <__swbuf>:
    ceac:	00c00174 	movhi	r3,5
    ceb0:	18c72d04 	addi	r3,r3,7348
    ceb4:	2005883a 	mov	r2,r4
    ceb8:	19000017 	ldw	r4,0(r3)
    cebc:	280d883a 	mov	r6,r5
    cec0:	100b883a 	mov	r5,r2
    cec4:	000cd581 	jmpi	cd58 <__swbuf_r>

0000cec8 <__swsetup_r>:
    cec8:	00800174 	movhi	r2,5
    cecc:	defffd04 	addi	sp,sp,-12
    ced0:	10872d04 	addi	r2,r2,7348
    ced4:	dc400115 	stw	r17,4(sp)
    ced8:	2023883a 	mov	r17,r4
    cedc:	11000017 	ldw	r4,0(r2)
    cee0:	dc000015 	stw	r16,0(sp)
    cee4:	dfc00215 	stw	ra,8(sp)
    cee8:	2821883a 	mov	r16,r5
    ceec:	20000226 	beq	r4,zero,cef8 <__swsetup_r+0x30>
    cef0:	20c00e17 	ldw	r3,56(r4)
    cef4:	18002e26 	beq	r3,zero,cfb0 <__swsetup_r+0xe8>
    cef8:	8080030b 	ldhu	r2,12(r16)
    cefc:	10c0020c 	andi	r3,r2,8
    cf00:	100d883a 	mov	r6,r2
    cf04:	18000f26 	beq	r3,zero,cf44 <__swsetup_r+0x7c>
    cf08:	80c00417 	ldw	r3,16(r16)
    cf0c:	18001526 	beq	r3,zero,cf64 <__swsetup_r+0x9c>
    cf10:	1100004c 	andi	r4,r2,1
    cf14:	20001c1e 	bne	r4,zero,cf88 <__swsetup_r+0xc0>
    cf18:	1080008c 	andi	r2,r2,2
    cf1c:	1000261e 	bne	r2,zero,cfb8 <__swsetup_r+0xf0>
    cf20:	80800517 	ldw	r2,20(r16)
    cf24:	80800215 	stw	r2,8(r16)
    cf28:	18001c26 	beq	r3,zero,cf9c <__swsetup_r+0xd4>
    cf2c:	0005883a 	mov	r2,zero
    cf30:	dfc00217 	ldw	ra,8(sp)
    cf34:	dc400117 	ldw	r17,4(sp)
    cf38:	dc000017 	ldw	r16,0(sp)
    cf3c:	dec00304 	addi	sp,sp,12
    cf40:	f800283a 	ret
    cf44:	3080040c 	andi	r2,r6,16
    cf48:	10001726 	beq	r2,zero,cfa8 <__swsetup_r+0xe0>
    cf4c:	3080010c 	andi	r2,r6,4
    cf50:	10001b1e 	bne	r2,zero,cfc0 <__swsetup_r+0xf8>
    cf54:	80c00417 	ldw	r3,16(r16)
    cf58:	30800214 	ori	r2,r6,8
    cf5c:	8080030d 	sth	r2,12(r16)
    cf60:	183feb1e 	bne	r3,zero,cf10 <__alt_mem_descriptor_memory+0xdefccf10>
    cf64:	1140a00c 	andi	r5,r2,640
    cf68:	01008004 	movi	r4,512
    cf6c:	293fe826 	beq	r5,r4,cf10 <__alt_mem_descriptor_memory+0xdefccf10>
    cf70:	8809883a 	mov	r4,r17
    cf74:	800b883a 	mov	r5,r16
    cf78:	000fb740 	call	fb74 <__smakebuf_r>
    cf7c:	8080030b 	ldhu	r2,12(r16)
    cf80:	80c00417 	ldw	r3,16(r16)
    cf84:	003fe206 	br	cf10 <__alt_mem_descriptor_memory+0xdefccf10>
    cf88:	80800517 	ldw	r2,20(r16)
    cf8c:	80000215 	stw	zero,8(r16)
    cf90:	0085c83a 	sub	r2,zero,r2
    cf94:	80800615 	stw	r2,24(r16)
    cf98:	183fe41e 	bne	r3,zero,cf2c <__alt_mem_descriptor_memory+0xdefccf2c>
    cf9c:	8080030b 	ldhu	r2,12(r16)
    cfa0:	1080200c 	andi	r2,r2,128
    cfa4:	103fe226 	beq	r2,zero,cf30 <__alt_mem_descriptor_memory+0xdefccf30>
    cfa8:	00bfffc4 	movi	r2,-1
    cfac:	003fe006 	br	cf30 <__alt_mem_descriptor_memory+0xdefccf30>
    cfb0:	000eec80 	call	eec8 <__sinit>
    cfb4:	003fd006 	br	cef8 <__alt_mem_descriptor_memory+0xdefccef8>
    cfb8:	0005883a 	mov	r2,zero
    cfbc:	003fd906 	br	cf24 <__alt_mem_descriptor_memory+0xdefccf24>
    cfc0:	81400c17 	ldw	r5,48(r16)
    cfc4:	28000626 	beq	r5,zero,cfe0 <__swsetup_r+0x118>
    cfc8:	80801004 	addi	r2,r16,64
    cfcc:	28800326 	beq	r5,r2,cfdc <__swsetup_r+0x114>
    cfd0:	8809883a 	mov	r4,r17
    cfd4:	000f1900 	call	f190 <_free_r>
    cfd8:	8180030b 	ldhu	r6,12(r16)
    cfdc:	80000c15 	stw	zero,48(r16)
    cfe0:	80c00417 	ldw	r3,16(r16)
    cfe4:	00bff6c4 	movi	r2,-37
    cfe8:	118c703a 	and	r6,r2,r6
    cfec:	80000115 	stw	zero,4(r16)
    cff0:	80c00015 	stw	r3,0(r16)
    cff4:	003fd806 	br	cf58 <__alt_mem_descriptor_memory+0xdefccf58>

0000cff8 <quorem>:
    cff8:	defff704 	addi	sp,sp,-36
    cffc:	dc800215 	stw	r18,8(sp)
    d000:	20800417 	ldw	r2,16(r4)
    d004:	2c800417 	ldw	r18,16(r5)
    d008:	dfc00815 	stw	ra,32(sp)
    d00c:	ddc00715 	stw	r23,28(sp)
    d010:	dd800615 	stw	r22,24(sp)
    d014:	dd400515 	stw	r21,20(sp)
    d018:	dd000415 	stw	r20,16(sp)
    d01c:	dcc00315 	stw	r19,12(sp)
    d020:	dc400115 	stw	r17,4(sp)
    d024:	dc000015 	stw	r16,0(sp)
    d028:	14807116 	blt	r2,r18,d1f0 <quorem+0x1f8>
    d02c:	94bfffc4 	addi	r18,r18,-1
    d030:	94ad883a 	add	r22,r18,r18
    d034:	b5ad883a 	add	r22,r22,r22
    d038:	2c400504 	addi	r17,r5,20
    d03c:	8da9883a 	add	r20,r17,r22
    d040:	25400504 	addi	r21,r4,20
    d044:	282f883a 	mov	r23,r5
    d048:	adad883a 	add	r22,r21,r22
    d04c:	a1400017 	ldw	r5,0(r20)
    d050:	2021883a 	mov	r16,r4
    d054:	b1000017 	ldw	r4,0(r22)
    d058:	29400044 	addi	r5,r5,1
    d05c:	00152500 	call	15250 <__udivsi3>
    d060:	1027883a 	mov	r19,r2
    d064:	10002c26 	beq	r2,zero,d118 <quorem+0x120>
    d068:	a813883a 	mov	r9,r21
    d06c:	8811883a 	mov	r8,r17
    d070:	0009883a 	mov	r4,zero
    d074:	000d883a 	mov	r6,zero
    d078:	41c00017 	ldw	r7,0(r8)
    d07c:	49400017 	ldw	r5,0(r9)
    d080:	42000104 	addi	r8,r8,4
    d084:	38bfffcc 	andi	r2,r7,65535
    d088:	14c5383a 	mul	r2,r2,r19
    d08c:	380ed43a 	srli	r7,r7,16
    d090:	28ffffcc 	andi	r3,r5,65535
    d094:	2085883a 	add	r2,r4,r2
    d098:	1008d43a 	srli	r4,r2,16
    d09c:	3ccf383a 	mul	r7,r7,r19
    d0a0:	198d883a 	add	r6,r3,r6
    d0a4:	10ffffcc 	andi	r3,r2,65535
    d0a8:	30c7c83a 	sub	r3,r6,r3
    d0ac:	280ad43a 	srli	r5,r5,16
    d0b0:	21c9883a 	add	r4,r4,r7
    d0b4:	180dd43a 	srai	r6,r3,16
    d0b8:	20bfffcc 	andi	r2,r4,65535
    d0bc:	288bc83a 	sub	r5,r5,r2
    d0c0:	298b883a 	add	r5,r5,r6
    d0c4:	280e943a 	slli	r7,r5,16
    d0c8:	18ffffcc 	andi	r3,r3,65535
    d0cc:	2008d43a 	srli	r4,r4,16
    d0d0:	38ceb03a 	or	r7,r7,r3
    d0d4:	49c00015 	stw	r7,0(r9)
    d0d8:	280dd43a 	srai	r6,r5,16
    d0dc:	4a400104 	addi	r9,r9,4
    d0e0:	a23fe52e 	bgeu	r20,r8,d078 <__alt_mem_descriptor_memory+0xdefcd078>
    d0e4:	b0800017 	ldw	r2,0(r22)
    d0e8:	10000b1e 	bne	r2,zero,d118 <quorem+0x120>
    d0ec:	b0bfff04 	addi	r2,r22,-4
    d0f0:	a880082e 	bgeu	r21,r2,d114 <quorem+0x11c>
    d0f4:	b0ffff17 	ldw	r3,-4(r22)
    d0f8:	18000326 	beq	r3,zero,d108 <quorem+0x110>
    d0fc:	00000506 	br	d114 <quorem+0x11c>
    d100:	10c00017 	ldw	r3,0(r2)
    d104:	1800031e 	bne	r3,zero,d114 <quorem+0x11c>
    d108:	10bfff04 	addi	r2,r2,-4
    d10c:	94bfffc4 	addi	r18,r18,-1
    d110:	a8bffb36 	bltu	r21,r2,d100 <__alt_mem_descriptor_memory+0xdefcd100>
    d114:	84800415 	stw	r18,16(r16)
    d118:	8009883a 	mov	r4,r16
    d11c:	b80b883a 	mov	r5,r23
    d120:	00106d40 	call	106d4 <__mcmp>
    d124:	10002616 	blt	r2,zero,d1c0 <quorem+0x1c8>
    d128:	9cc00044 	addi	r19,r19,1
    d12c:	a80d883a 	mov	r6,r21
    d130:	000b883a 	mov	r5,zero
    d134:	31000017 	ldw	r4,0(r6)
    d138:	88800017 	ldw	r2,0(r17)
    d13c:	31800104 	addi	r6,r6,4
    d140:	20ffffcc 	andi	r3,r4,65535
    d144:	194b883a 	add	r5,r3,r5
    d148:	10ffffcc 	andi	r3,r2,65535
    d14c:	28c7c83a 	sub	r3,r5,r3
    d150:	1004d43a 	srli	r2,r2,16
    d154:	2008d43a 	srli	r4,r4,16
    d158:	180bd43a 	srai	r5,r3,16
    d15c:	18ffffcc 	andi	r3,r3,65535
    d160:	2089c83a 	sub	r4,r4,r2
    d164:	2149883a 	add	r4,r4,r5
    d168:	2004943a 	slli	r2,r4,16
    d16c:	8c400104 	addi	r17,r17,4
    d170:	200bd43a 	srai	r5,r4,16
    d174:	10c6b03a 	or	r3,r2,r3
    d178:	30ffff15 	stw	r3,-4(r6)
    d17c:	a47fed2e 	bgeu	r20,r17,d134 <__alt_mem_descriptor_memory+0xdefcd134>
    d180:	9485883a 	add	r2,r18,r18
    d184:	1085883a 	add	r2,r2,r2
    d188:	a887883a 	add	r3,r21,r2
    d18c:	18800017 	ldw	r2,0(r3)
    d190:	10000b1e 	bne	r2,zero,d1c0 <quorem+0x1c8>
    d194:	18bfff04 	addi	r2,r3,-4
    d198:	a880082e 	bgeu	r21,r2,d1bc <quorem+0x1c4>
    d19c:	18ffff17 	ldw	r3,-4(r3)
    d1a0:	18000326 	beq	r3,zero,d1b0 <quorem+0x1b8>
    d1a4:	00000506 	br	d1bc <quorem+0x1c4>
    d1a8:	10c00017 	ldw	r3,0(r2)
    d1ac:	1800031e 	bne	r3,zero,d1bc <quorem+0x1c4>
    d1b0:	10bfff04 	addi	r2,r2,-4
    d1b4:	94bfffc4 	addi	r18,r18,-1
    d1b8:	a8bffb36 	bltu	r21,r2,d1a8 <__alt_mem_descriptor_memory+0xdefcd1a8>
    d1bc:	84800415 	stw	r18,16(r16)
    d1c0:	9805883a 	mov	r2,r19
    d1c4:	dfc00817 	ldw	ra,32(sp)
    d1c8:	ddc00717 	ldw	r23,28(sp)
    d1cc:	dd800617 	ldw	r22,24(sp)
    d1d0:	dd400517 	ldw	r21,20(sp)
    d1d4:	dd000417 	ldw	r20,16(sp)
    d1d8:	dcc00317 	ldw	r19,12(sp)
    d1dc:	dc800217 	ldw	r18,8(sp)
    d1e0:	dc400117 	ldw	r17,4(sp)
    d1e4:	dc000017 	ldw	r16,0(sp)
    d1e8:	dec00904 	addi	sp,sp,36
    d1ec:	f800283a 	ret
    d1f0:	0005883a 	mov	r2,zero
    d1f4:	003ff306 	br	d1c4 <__alt_mem_descriptor_memory+0xdefcd1c4>

0000d1f8 <_dtoa_r>:
    d1f8:	20801017 	ldw	r2,64(r4)
    d1fc:	deffde04 	addi	sp,sp,-136
    d200:	dd401d15 	stw	r21,116(sp)
    d204:	dcc01b15 	stw	r19,108(sp)
    d208:	dc801a15 	stw	r18,104(sp)
    d20c:	dc401915 	stw	r17,100(sp)
    d210:	dc001815 	stw	r16,96(sp)
    d214:	dfc02115 	stw	ra,132(sp)
    d218:	df002015 	stw	fp,128(sp)
    d21c:	ddc01f15 	stw	r23,124(sp)
    d220:	dd801e15 	stw	r22,120(sp)
    d224:	dd001c15 	stw	r20,112(sp)
    d228:	d9c00315 	stw	r7,12(sp)
    d22c:	2021883a 	mov	r16,r4
    d230:	302b883a 	mov	r21,r6
    d234:	2825883a 	mov	r18,r5
    d238:	dc402417 	ldw	r17,144(sp)
    d23c:	3027883a 	mov	r19,r6
    d240:	10000826 	beq	r2,zero,d264 <_dtoa_r+0x6c>
    d244:	21801117 	ldw	r6,68(r4)
    d248:	00c00044 	movi	r3,1
    d24c:	100b883a 	mov	r5,r2
    d250:	1986983a 	sll	r3,r3,r6
    d254:	11800115 	stw	r6,4(r2)
    d258:	10c00215 	stw	r3,8(r2)
    d25c:	000febc0 	call	febc <_Bfree>
    d260:	80001015 	stw	zero,64(r16)
    d264:	a8002d16 	blt	r21,zero,d31c <_dtoa_r+0x124>
    d268:	88000015 	stw	zero,0(r17)
    d26c:	a8dffc2c 	andhi	r3,r21,32752
    d270:	009ffc34 	movhi	r2,32752
    d274:	18801b26 	beq	r3,r2,d2e4 <_dtoa_r+0xec>
    d278:	9009883a 	mov	r4,r18
    d27c:	980b883a 	mov	r5,r19
    d280:	000d883a 	mov	r6,zero
    d284:	000f883a 	mov	r7,zero
    d288:	00163c80 	call	163c8 <__eqdf2>
    d28c:	10002a1e 	bne	r2,zero,d338 <_dtoa_r+0x140>
    d290:	d8c02317 	ldw	r3,140(sp)
    d294:	d9002517 	ldw	r4,148(sp)
    d298:	00800044 	movi	r2,1
    d29c:	18800015 	stw	r2,0(r3)
    d2a0:	2001a226 	beq	r4,zero,d92c <_dtoa_r+0x734>
    d2a4:	00800174 	movhi	r2,5
    d2a8:	10b5a444 	addi	r2,r2,-10607
    d2ac:	20800015 	stw	r2,0(r4)
    d2b0:	10bfffc4 	addi	r2,r2,-1
    d2b4:	dfc02117 	ldw	ra,132(sp)
    d2b8:	df002017 	ldw	fp,128(sp)
    d2bc:	ddc01f17 	ldw	r23,124(sp)
    d2c0:	dd801e17 	ldw	r22,120(sp)
    d2c4:	dd401d17 	ldw	r21,116(sp)
    d2c8:	dd001c17 	ldw	r20,112(sp)
    d2cc:	dcc01b17 	ldw	r19,108(sp)
    d2d0:	dc801a17 	ldw	r18,104(sp)
    d2d4:	dc401917 	ldw	r17,100(sp)
    d2d8:	dc001817 	ldw	r16,96(sp)
    d2dc:	dec02204 	addi	sp,sp,136
    d2e0:	f800283a 	ret
    d2e4:	d8c02317 	ldw	r3,140(sp)
    d2e8:	0089c3c4 	movi	r2,9999
    d2ec:	18800015 	stw	r2,0(r3)
    d2f0:	90017c26 	beq	r18,zero,d8e4 <_dtoa_r+0x6ec>
    d2f4:	00800174 	movhi	r2,5
    d2f8:	10b5b804 	addi	r2,r2,-10528
    d2fc:	d9002517 	ldw	r4,148(sp)
    d300:	203fec26 	beq	r4,zero,d2b4 <__alt_mem_descriptor_memory+0xdefcd2b4>
    d304:	10c000c7 	ldb	r3,3(r2)
    d308:	18017d1e 	bne	r3,zero,d900 <_dtoa_r+0x708>
    d30c:	10c000c4 	addi	r3,r2,3
    d310:	d9802517 	ldw	r6,148(sp)
    d314:	30c00015 	stw	r3,0(r6)
    d318:	003fe606 	br	d2b4 <__alt_mem_descriptor_memory+0xdefcd2b4>
    d31c:	04e00034 	movhi	r19,32768
    d320:	9cffffc4 	addi	r19,r19,-1
    d324:	00800044 	movi	r2,1
    d328:	ace6703a 	and	r19,r21,r19
    d32c:	88800015 	stw	r2,0(r17)
    d330:	982b883a 	mov	r21,r19
    d334:	003fcd06 	br	d26c <__alt_mem_descriptor_memory+0xdefcd26c>
    d338:	d8800204 	addi	r2,sp,8
    d33c:	a822d53a 	srli	r17,r21,20
    d340:	d8800015 	stw	r2,0(sp)
    d344:	8009883a 	mov	r4,r16
    d348:	900b883a 	mov	r5,r18
    d34c:	980d883a 	mov	r6,r19
    d350:	d9c00104 	addi	r7,sp,4
    d354:	0010a480 	call	10a48 <__d2b>
    d358:	1039883a 	mov	fp,r2
    d35c:	88016a1e 	bne	r17,zero,d908 <_dtoa_r+0x710>
    d360:	dd000217 	ldw	r20,8(sp)
    d364:	dc400117 	ldw	r17,4(sp)
    d368:	00befbc4 	movi	r2,-1041
    d36c:	a463883a 	add	r17,r20,r17
    d370:	8882ea16 	blt	r17,r2,df1c <_dtoa_r+0xd24>
    d374:	00bf0384 	movi	r2,-1010
    d378:	1445c83a 	sub	r2,r2,r17
    d37c:	89010484 	addi	r4,r17,1042
    d380:	a8aa983a 	sll	r21,r21,r2
    d384:	9108d83a 	srl	r4,r18,r4
    d388:	a908b03a 	or	r4,r21,r4
    d38c:	00177580 	call	17758 <__floatunsidf>
    d390:	017f8434 	movhi	r5,65040
    d394:	01800044 	movi	r6,1
    d398:	1009883a 	mov	r4,r2
    d39c:	194b883a 	add	r5,r3,r5
    d3a0:	8c7fffc4 	addi	r17,r17,-1
    d3a4:	d9800f15 	stw	r6,60(sp)
    d3a8:	000d883a 	mov	r6,zero
    d3ac:	01cffe34 	movhi	r7,16376
    d3b0:	0016d300 	call	16d30 <__subdf3>
    d3b4:	0198dbf4 	movhi	r6,25455
    d3b8:	01cff4f4 	movhi	r7,16339
    d3bc:	1009883a 	mov	r4,r2
    d3c0:	180b883a 	mov	r5,r3
    d3c4:	3190d844 	addi	r6,r6,17249
    d3c8:	39e1e9c4 	addi	r7,r7,-30809
    d3cc:	001660c0 	call	1660c <__muldf3>
    d3d0:	01a2d874 	movhi	r6,35681
    d3d4:	01cff1f4 	movhi	r7,16327
    d3d8:	180b883a 	mov	r5,r3
    d3dc:	31b22cc4 	addi	r6,r6,-14157
    d3e0:	39e28a04 	addi	r7,r7,-30168
    d3e4:	1009883a 	mov	r4,r2
    d3e8:	00152600 	call	15260 <__adddf3>
    d3ec:	8809883a 	mov	r4,r17
    d3f0:	102d883a 	mov	r22,r2
    d3f4:	182b883a 	mov	r21,r3
    d3f8:	00176880 	call	17688 <__floatsidf>
    d3fc:	019427f4 	movhi	r6,20639
    d400:	01cff4f4 	movhi	r7,16339
    d404:	1009883a 	mov	r4,r2
    d408:	180b883a 	mov	r5,r3
    d40c:	319e7ec4 	addi	r6,r6,31227
    d410:	39d104c4 	addi	r7,r7,17427
    d414:	001660c0 	call	1660c <__muldf3>
    d418:	b009883a 	mov	r4,r22
    d41c:	a80b883a 	mov	r5,r21
    d420:	100d883a 	mov	r6,r2
    d424:	180f883a 	mov	r7,r3
    d428:	00152600 	call	15260 <__adddf3>
    d42c:	1009883a 	mov	r4,r2
    d430:	180b883a 	mov	r5,r3
    d434:	102d883a 	mov	r22,r2
    d438:	182b883a 	mov	r21,r3
    d43c:	00176000 	call	17600 <__fixdfsi>
    d440:	b009883a 	mov	r4,r22
    d444:	a80b883a 	mov	r5,r21
    d448:	000d883a 	mov	r6,zero
    d44c:	000f883a 	mov	r7,zero
    d450:	d8800515 	stw	r2,20(sp)
    d454:	001652c0 	call	1652c <__ledf2>
    d458:	10023116 	blt	r2,zero,dd20 <_dtoa_r+0xb28>
    d45c:	d8c00517 	ldw	r3,20(sp)
    d460:	00800584 	movi	r2,22
    d464:	10c21f36 	bltu	r2,r3,dce4 <_dtoa_r+0xaec>
    d468:	180490fa 	slli	r2,r3,3
    d46c:	00c00174 	movhi	r3,5
    d470:	18f5d304 	addi	r3,r3,-10420
    d474:	1885883a 	add	r2,r3,r2
    d478:	11000017 	ldw	r4,0(r2)
    d47c:	11400117 	ldw	r5,4(r2)
    d480:	900d883a 	mov	r6,r18
    d484:	980f883a 	mov	r7,r19
    d488:	001644c0 	call	1644c <__gedf2>
    d48c:	0082a70e 	bge	zero,r2,df2c <_dtoa_r+0xd34>
    d490:	d9000517 	ldw	r4,20(sp)
    d494:	d8000c15 	stw	zero,48(sp)
    d498:	213fffc4 	addi	r4,r4,-1
    d49c:	d9000515 	stw	r4,20(sp)
    d4a0:	a463c83a 	sub	r17,r20,r17
    d4a4:	8dbfffc4 	addi	r22,r17,-1
    d4a8:	b0021916 	blt	r22,zero,dd10 <_dtoa_r+0xb18>
    d4ac:	d8000815 	stw	zero,32(sp)
    d4b0:	d8800517 	ldw	r2,20(sp)
    d4b4:	10020e16 	blt	r2,zero,dcf0 <_dtoa_r+0xaf8>
    d4b8:	b0ad883a 	add	r22,r22,r2
    d4bc:	d8800a15 	stw	r2,40(sp)
    d4c0:	d8000915 	stw	zero,36(sp)
    d4c4:	d8c00317 	ldw	r3,12(sp)
    d4c8:	00800244 	movi	r2,9
    d4cc:	10c11a36 	bltu	r2,r3,d938 <_dtoa_r+0x740>
    d4d0:	00800144 	movi	r2,5
    d4d4:	10c4fc0e 	bge	r2,r3,e8c8 <_dtoa_r+0x16d0>
    d4d8:	18ffff04 	addi	r3,r3,-4
    d4dc:	d8c00315 	stw	r3,12(sp)
    d4e0:	0029883a 	mov	r20,zero
    d4e4:	d9800317 	ldw	r6,12(sp)
    d4e8:	008000c4 	movi	r2,3
    d4ec:	3083bd26 	beq	r6,r2,e3e4 <_dtoa_r+0x11ec>
    d4f0:	1183670e 	bge	r2,r6,e290 <_dtoa_r+0x1098>
    d4f4:	d8c00317 	ldw	r3,12(sp)
    d4f8:	00800104 	movi	r2,4
    d4fc:	1882e726 	beq	r3,r2,e09c <_dtoa_r+0xea4>
    d500:	00800144 	movi	r2,5
    d504:	1884f21e 	bne	r3,r2,e8d0 <_dtoa_r+0x16d8>
    d508:	00800044 	movi	r2,1
    d50c:	d8800b15 	stw	r2,44(sp)
    d510:	d8c02217 	ldw	r3,136(sp)
    d514:	d9000517 	ldw	r4,20(sp)
    d518:	1907883a 	add	r3,r3,r4
    d51c:	19800044 	addi	r6,r3,1
    d520:	d8c00d15 	stw	r3,52(sp)
    d524:	d9800615 	stw	r6,24(sp)
    d528:	0183c30e 	bge	zero,r6,e438 <_dtoa_r+0x1240>
    d52c:	d9800617 	ldw	r6,24(sp)
    d530:	3023883a 	mov	r17,r6
    d534:	80001115 	stw	zero,68(r16)
    d538:	008005c4 	movi	r2,23
    d53c:	1184f62e 	bgeu	r2,r6,e918 <_dtoa_r+0x1720>
    d540:	00c00044 	movi	r3,1
    d544:	00800104 	movi	r2,4
    d548:	1085883a 	add	r2,r2,r2
    d54c:	11000504 	addi	r4,r2,20
    d550:	180b883a 	mov	r5,r3
    d554:	18c00044 	addi	r3,r3,1
    d558:	313ffb2e 	bgeu	r6,r4,d548 <__alt_mem_descriptor_memory+0xdefcd548>
    d55c:	81401115 	stw	r5,68(r16)
    d560:	8009883a 	mov	r4,r16
    d564:	000fe140 	call	fe14 <_Balloc>
    d568:	d8800715 	stw	r2,28(sp)
    d56c:	80801015 	stw	r2,64(r16)
    d570:	00800384 	movi	r2,14
    d574:	1440fd36 	bltu	r2,r17,d96c <_dtoa_r+0x774>
    d578:	a000fc26 	beq	r20,zero,d96c <_dtoa_r+0x774>
    d57c:	d8800517 	ldw	r2,20(sp)
    d580:	0083b90e 	bge	zero,r2,e468 <_dtoa_r+0x1270>
    d584:	d8c00517 	ldw	r3,20(sp)
    d588:	108003cc 	andi	r2,r2,15
    d58c:	100490fa 	slli	r2,r2,3
    d590:	182fd13a 	srai	r23,r3,4
    d594:	00c00174 	movhi	r3,5
    d598:	18f5d304 	addi	r3,r3,-10420
    d59c:	1885883a 	add	r2,r3,r2
    d5a0:	b8c0040c 	andi	r3,r23,16
    d5a4:	12c00017 	ldw	r11,0(r2)
    d5a8:	12800117 	ldw	r10,4(r2)
    d5ac:	18039726 	beq	r3,zero,e40c <_dtoa_r+0x1214>
    d5b0:	00800174 	movhi	r2,5
    d5b4:	10b5c904 	addi	r2,r2,-10460
    d5b8:	11800817 	ldw	r6,32(r2)
    d5bc:	11c00917 	ldw	r7,36(r2)
    d5c0:	9009883a 	mov	r4,r18
    d5c4:	980b883a 	mov	r5,r19
    d5c8:	da801615 	stw	r10,88(sp)
    d5cc:	dac01515 	stw	r11,84(sp)
    d5d0:	0015afc0 	call	15afc <__divdf3>
    d5d4:	da801617 	ldw	r10,88(sp)
    d5d8:	dac01517 	ldw	r11,84(sp)
    d5dc:	bdc003cc 	andi	r23,r23,15
    d5e0:	044000c4 	movi	r17,3
    d5e4:	d8800e15 	stw	r2,56(sp)
    d5e8:	182b883a 	mov	r21,r3
    d5ec:	b8001126 	beq	r23,zero,d634 <_dtoa_r+0x43c>
    d5f0:	05000174 	movhi	r20,5
    d5f4:	a535c904 	addi	r20,r20,-10460
    d5f8:	5805883a 	mov	r2,r11
    d5fc:	5007883a 	mov	r3,r10
    d600:	b980004c 	andi	r6,r23,1
    d604:	1009883a 	mov	r4,r2
    d608:	b82fd07a 	srai	r23,r23,1
    d60c:	180b883a 	mov	r5,r3
    d610:	30000426 	beq	r6,zero,d624 <_dtoa_r+0x42c>
    d614:	a1800017 	ldw	r6,0(r20)
    d618:	a1c00117 	ldw	r7,4(r20)
    d61c:	8c400044 	addi	r17,r17,1
    d620:	001660c0 	call	1660c <__muldf3>
    d624:	a5000204 	addi	r20,r20,8
    d628:	b83ff51e 	bne	r23,zero,d600 <__alt_mem_descriptor_memory+0xdefcd600>
    d62c:	1017883a 	mov	r11,r2
    d630:	1815883a 	mov	r10,r3
    d634:	d9000e17 	ldw	r4,56(sp)
    d638:	a80b883a 	mov	r5,r21
    d63c:	580d883a 	mov	r6,r11
    d640:	500f883a 	mov	r7,r10
    d644:	0015afc0 	call	15afc <__divdf3>
    d648:	1029883a 	mov	r20,r2
    d64c:	182b883a 	mov	r21,r3
    d650:	d9800c17 	ldw	r6,48(sp)
    d654:	30000626 	beq	r6,zero,d670 <_dtoa_r+0x478>
    d658:	a009883a 	mov	r4,r20
    d65c:	a80b883a 	mov	r5,r21
    d660:	000d883a 	mov	r6,zero
    d664:	01cffc34 	movhi	r7,16368
    d668:	001652c0 	call	1652c <__ledf2>
    d66c:	10043216 	blt	r2,zero,e738 <_dtoa_r+0x1540>
    d670:	8809883a 	mov	r4,r17
    d674:	00176880 	call	17688 <__floatsidf>
    d678:	1009883a 	mov	r4,r2
    d67c:	180b883a 	mov	r5,r3
    d680:	a00d883a 	mov	r6,r20
    d684:	a80f883a 	mov	r7,r21
    d688:	001660c0 	call	1660c <__muldf3>
    d68c:	000d883a 	mov	r6,zero
    d690:	1009883a 	mov	r4,r2
    d694:	180b883a 	mov	r5,r3
    d698:	01d00734 	movhi	r7,16412
    d69c:	00152600 	call	15260 <__adddf3>
    d6a0:	1023883a 	mov	r17,r2
    d6a4:	d9800617 	ldw	r6,24(sp)
    d6a8:	00bf3034 	movhi	r2,64704
    d6ac:	1885883a 	add	r2,r3,r2
    d6b0:	d8800e15 	stw	r2,56(sp)
    d6b4:	30032e26 	beq	r6,zero,e370 <_dtoa_r+0x1178>
    d6b8:	d8c00517 	ldw	r3,20(sp)
    d6bc:	da800617 	ldw	r10,24(sp)
    d6c0:	d8c01215 	stw	r3,72(sp)
    d6c4:	d9000b17 	ldw	r4,44(sp)
    d6c8:	2003b026 	beq	r4,zero,e58c <_dtoa_r+0x1394>
    d6cc:	50bfffc4 	addi	r2,r10,-1
    d6d0:	100490fa 	slli	r2,r2,3
    d6d4:	00c00174 	movhi	r3,5
    d6d8:	18f5d304 	addi	r3,r3,-10420
    d6dc:	1885883a 	add	r2,r3,r2
    d6e0:	11800017 	ldw	r6,0(r2)
    d6e4:	11c00117 	ldw	r7,4(r2)
    d6e8:	d8800717 	ldw	r2,28(sp)
    d6ec:	0009883a 	mov	r4,zero
    d6f0:	014ff834 	movhi	r5,16352
    d6f4:	da801615 	stw	r10,88(sp)
    d6f8:	15c00044 	addi	r23,r2,1
    d6fc:	0015afc0 	call	15afc <__divdf3>
    d700:	d9c00e17 	ldw	r7,56(sp)
    d704:	880d883a 	mov	r6,r17
    d708:	1009883a 	mov	r4,r2
    d70c:	180b883a 	mov	r5,r3
    d710:	0016d300 	call	16d30 <__subdf3>
    d714:	a80b883a 	mov	r5,r21
    d718:	a009883a 	mov	r4,r20
    d71c:	d8c01015 	stw	r3,64(sp)
    d720:	d8800e15 	stw	r2,56(sp)
    d724:	00176000 	call	17600 <__fixdfsi>
    d728:	1009883a 	mov	r4,r2
    d72c:	d8801715 	stw	r2,92(sp)
    d730:	00176880 	call	17688 <__floatsidf>
    d734:	a009883a 	mov	r4,r20
    d738:	a80b883a 	mov	r5,r21
    d73c:	100d883a 	mov	r6,r2
    d740:	180f883a 	mov	r7,r3
    d744:	0016d300 	call	16d30 <__subdf3>
    d748:	da001717 	ldw	r8,92(sp)
    d74c:	1829883a 	mov	r20,r3
    d750:	d8c00717 	ldw	r3,28(sp)
    d754:	d9000e17 	ldw	r4,56(sp)
    d758:	d9401017 	ldw	r5,64(sp)
    d75c:	42000c04 	addi	r8,r8,48
    d760:	1023883a 	mov	r17,r2
    d764:	1a000005 	stb	r8,0(r3)
    d768:	880d883a 	mov	r6,r17
    d76c:	a00f883a 	mov	r7,r20
    d770:	402b883a 	mov	r21,r8
    d774:	001644c0 	call	1644c <__gedf2>
    d778:	00844516 	blt	zero,r2,e890 <_dtoa_r+0x1698>
    d77c:	0009883a 	mov	r4,zero
    d780:	014ffc34 	movhi	r5,16368
    d784:	880d883a 	mov	r6,r17
    d788:	a00f883a 	mov	r7,r20
    d78c:	0016d300 	call	16d30 <__subdf3>
    d790:	d9000e17 	ldw	r4,56(sp)
    d794:	d9401017 	ldw	r5,64(sp)
    d798:	100d883a 	mov	r6,r2
    d79c:	180f883a 	mov	r7,r3
    d7a0:	001644c0 	call	1644c <__gedf2>
    d7a4:	da801617 	ldw	r10,88(sp)
    d7a8:	00843616 	blt	zero,r2,e884 <_dtoa_r+0x168c>
    d7ac:	00800044 	movi	r2,1
    d7b0:	12806e0e 	bge	r2,r10,d96c <_dtoa_r+0x774>
    d7b4:	d9000717 	ldw	r4,28(sp)
    d7b8:	dd801315 	stw	r22,76(sp)
    d7bc:	dc001115 	stw	r16,68(sp)
    d7c0:	2295883a 	add	r10,r4,r10
    d7c4:	dcc01415 	stw	r19,80(sp)
    d7c8:	502d883a 	mov	r22,r10
    d7cc:	dcc01017 	ldw	r19,64(sp)
    d7d0:	b821883a 	mov	r16,r23
    d7d4:	dc801015 	stw	r18,64(sp)
    d7d8:	dc800e17 	ldw	r18,56(sp)
    d7dc:	00000906 	br	d804 <_dtoa_r+0x60c>
    d7e0:	0016d300 	call	16d30 <__subdf3>
    d7e4:	1009883a 	mov	r4,r2
    d7e8:	180b883a 	mov	r5,r3
    d7ec:	900d883a 	mov	r6,r18
    d7f0:	980f883a 	mov	r7,r19
    d7f4:	001652c0 	call	1652c <__ledf2>
    d7f8:	10040e16 	blt	r2,zero,e834 <_dtoa_r+0x163c>
    d7fc:	b821883a 	mov	r16,r23
    d800:	bd841026 	beq	r23,r22,e844 <_dtoa_r+0x164c>
    d804:	9009883a 	mov	r4,r18
    d808:	980b883a 	mov	r5,r19
    d80c:	000d883a 	mov	r6,zero
    d810:	01d00934 	movhi	r7,16420
    d814:	001660c0 	call	1660c <__muldf3>
    d818:	000d883a 	mov	r6,zero
    d81c:	01d00934 	movhi	r7,16420
    d820:	8809883a 	mov	r4,r17
    d824:	a00b883a 	mov	r5,r20
    d828:	1025883a 	mov	r18,r2
    d82c:	1827883a 	mov	r19,r3
    d830:	001660c0 	call	1660c <__muldf3>
    d834:	180b883a 	mov	r5,r3
    d838:	1009883a 	mov	r4,r2
    d83c:	1823883a 	mov	r17,r3
    d840:	1029883a 	mov	r20,r2
    d844:	00176000 	call	17600 <__fixdfsi>
    d848:	1009883a 	mov	r4,r2
    d84c:	102b883a 	mov	r21,r2
    d850:	00176880 	call	17688 <__floatsidf>
    d854:	a009883a 	mov	r4,r20
    d858:	880b883a 	mov	r5,r17
    d85c:	100d883a 	mov	r6,r2
    d860:	180f883a 	mov	r7,r3
    d864:	0016d300 	call	16d30 <__subdf3>
    d868:	ad400c04 	addi	r21,r21,48
    d86c:	1009883a 	mov	r4,r2
    d870:	180b883a 	mov	r5,r3
    d874:	900d883a 	mov	r6,r18
    d878:	980f883a 	mov	r7,r19
    d87c:	85400005 	stb	r21,0(r16)
    d880:	1023883a 	mov	r17,r2
    d884:	1829883a 	mov	r20,r3
    d888:	001652c0 	call	1652c <__ledf2>
    d88c:	bdc00044 	addi	r23,r23,1
    d890:	0009883a 	mov	r4,zero
    d894:	014ffc34 	movhi	r5,16368
    d898:	880d883a 	mov	r6,r17
    d89c:	a00f883a 	mov	r7,r20
    d8a0:	103fcf0e 	bge	r2,zero,d7e0 <__alt_mem_descriptor_memory+0xdefcd7e0>
    d8a4:	d9801217 	ldw	r6,72(sp)
    d8a8:	dc001117 	ldw	r16,68(sp)
    d8ac:	d9800515 	stw	r6,20(sp)
    d8b0:	8009883a 	mov	r4,r16
    d8b4:	e00b883a 	mov	r5,fp
    d8b8:	000febc0 	call	febc <_Bfree>
    d8bc:	d8c00517 	ldw	r3,20(sp)
    d8c0:	d9002317 	ldw	r4,140(sp)
    d8c4:	d9802517 	ldw	r6,148(sp)
    d8c8:	b8000005 	stb	zero,0(r23)
    d8cc:	18800044 	addi	r2,r3,1
    d8d0:	20800015 	stw	r2,0(r4)
    d8d4:	30027226 	beq	r6,zero,e2a0 <_dtoa_r+0x10a8>
    d8d8:	35c00015 	stw	r23,0(r6)
    d8dc:	d8800717 	ldw	r2,28(sp)
    d8e0:	003e7406 	br	d2b4 <__alt_mem_descriptor_memory+0xdefcd2b4>
    d8e4:	00800434 	movhi	r2,16
    d8e8:	10bfffc4 	addi	r2,r2,-1
    d8ec:	a8aa703a 	and	r21,r21,r2
    d8f0:	a83e801e 	bne	r21,zero,d2f4 <__alt_mem_descriptor_memory+0xdefcd2f4>
    d8f4:	00800174 	movhi	r2,5
    d8f8:	10b5b504 	addi	r2,r2,-10540
    d8fc:	003e7f06 	br	d2fc <__alt_mem_descriptor_memory+0xdefcd2fc>
    d900:	10c00204 	addi	r3,r2,8
    d904:	003e8206 	br	d310 <__alt_mem_descriptor_memory+0xdefcd310>
    d908:	01400434 	movhi	r5,16
    d90c:	297fffc4 	addi	r5,r5,-1
    d910:	994a703a 	and	r5,r19,r5
    d914:	9009883a 	mov	r4,r18
    d918:	8c7f0044 	addi	r17,r17,-1023
    d91c:	294ffc34 	orhi	r5,r5,16368
    d920:	dd000217 	ldw	r20,8(sp)
    d924:	d8000f15 	stw	zero,60(sp)
    d928:	003e9f06 	br	d3a8 <__alt_mem_descriptor_memory+0xdefcd3a8>
    d92c:	00800174 	movhi	r2,5
    d930:	10b5a404 	addi	r2,r2,-10608
    d934:	003e5f06 	br	d2b4 <__alt_mem_descriptor_memory+0xdefcd2b4>
    d938:	80001115 	stw	zero,68(r16)
    d93c:	8009883a 	mov	r4,r16
    d940:	000b883a 	mov	r5,zero
    d944:	000fe140 	call	fe14 <_Balloc>
    d948:	01bfffc4 	movi	r6,-1
    d94c:	d8800715 	stw	r2,28(sp)
    d950:	80801015 	stw	r2,64(r16)
    d954:	00800044 	movi	r2,1
    d958:	d9800615 	stw	r6,24(sp)
    d95c:	d8800b15 	stw	r2,44(sp)
    d960:	d8002215 	stw	zero,136(sp)
    d964:	d9800d15 	stw	r6,52(sp)
    d968:	d8000315 	stw	zero,12(sp)
    d96c:	d8800117 	ldw	r2,4(sp)
    d970:	10008e16 	blt	r2,zero,dbac <_dtoa_r+0x9b4>
    d974:	d9000517 	ldw	r4,20(sp)
    d978:	00c00384 	movi	r3,14
    d97c:	19008b16 	blt	r3,r4,dbac <_dtoa_r+0x9b4>
    d980:	200490fa 	slli	r2,r4,3
    d984:	00c00174 	movhi	r3,5
    d988:	d9802217 	ldw	r6,136(sp)
    d98c:	18f5d304 	addi	r3,r3,-10420
    d990:	1885883a 	add	r2,r3,r2
    d994:	14400017 	ldw	r17,0(r2)
    d998:	15000117 	ldw	r20,4(r2)
    d99c:	3001c716 	blt	r6,zero,e0bc <_dtoa_r+0xec4>
    d9a0:	880d883a 	mov	r6,r17
    d9a4:	a00f883a 	mov	r7,r20
    d9a8:	9009883a 	mov	r4,r18
    d9ac:	980b883a 	mov	r5,r19
    d9b0:	0015afc0 	call	15afc <__divdf3>
    d9b4:	180b883a 	mov	r5,r3
    d9b8:	1009883a 	mov	r4,r2
    d9bc:	00176000 	call	17600 <__fixdfsi>
    d9c0:	1009883a 	mov	r4,r2
    d9c4:	102d883a 	mov	r22,r2
    d9c8:	00176880 	call	17688 <__floatsidf>
    d9cc:	1009883a 	mov	r4,r2
    d9d0:	180b883a 	mov	r5,r3
    d9d4:	880d883a 	mov	r6,r17
    d9d8:	a00f883a 	mov	r7,r20
    d9dc:	001660c0 	call	1660c <__muldf3>
    d9e0:	9009883a 	mov	r4,r18
    d9e4:	980b883a 	mov	r5,r19
    d9e8:	100d883a 	mov	r6,r2
    d9ec:	180f883a 	mov	r7,r3
    d9f0:	0016d300 	call	16d30 <__subdf3>
    d9f4:	d9000717 	ldw	r4,28(sp)
    d9f8:	d9800617 	ldw	r6,24(sp)
    d9fc:	180b883a 	mov	r5,r3
    da00:	b0c00c04 	addi	r3,r22,48
    da04:	20c00005 	stb	r3,0(r4)
    da08:	25c00044 	addi	r23,r4,1
    da0c:	01000044 	movi	r4,1
    da10:	1011883a 	mov	r8,r2
    da14:	2807883a 	mov	r3,r5
    da18:	31003d26 	beq	r6,r4,db10 <_dtoa_r+0x918>
    da1c:	000d883a 	mov	r6,zero
    da20:	01d00934 	movhi	r7,16420
    da24:	1009883a 	mov	r4,r2
    da28:	001660c0 	call	1660c <__muldf3>
    da2c:	1009883a 	mov	r4,r2
    da30:	180b883a 	mov	r5,r3
    da34:	000d883a 	mov	r6,zero
    da38:	000f883a 	mov	r7,zero
    da3c:	1027883a 	mov	r19,r2
    da40:	182b883a 	mov	r21,r3
    da44:	00163c80 	call	163c8 <__eqdf2>
    da48:	103f9926 	beq	r2,zero,d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    da4c:	d8c00617 	ldw	r3,24(sp)
    da50:	d9000717 	ldw	r4,28(sp)
    da54:	b825883a 	mov	r18,r23
    da58:	18bfffc4 	addi	r2,r3,-1
    da5c:	20ad883a 	add	r22,r4,r2
    da60:	dc000315 	stw	r16,12(sp)
    da64:	00000a06 	br	da90 <_dtoa_r+0x898>
    da68:	001660c0 	call	1660c <__muldf3>
    da6c:	1009883a 	mov	r4,r2
    da70:	180b883a 	mov	r5,r3
    da74:	000d883a 	mov	r6,zero
    da78:	000f883a 	mov	r7,zero
    da7c:	1027883a 	mov	r19,r2
    da80:	182b883a 	mov	r21,r3
    da84:	b825883a 	mov	r18,r23
    da88:	00163c80 	call	163c8 <__eqdf2>
    da8c:	10022626 	beq	r2,zero,e328 <_dtoa_r+0x1130>
    da90:	880d883a 	mov	r6,r17
    da94:	a00f883a 	mov	r7,r20
    da98:	9809883a 	mov	r4,r19
    da9c:	a80b883a 	mov	r5,r21
    daa0:	0015afc0 	call	15afc <__divdf3>
    daa4:	180b883a 	mov	r5,r3
    daa8:	1009883a 	mov	r4,r2
    daac:	00176000 	call	17600 <__fixdfsi>
    dab0:	1009883a 	mov	r4,r2
    dab4:	1021883a 	mov	r16,r2
    dab8:	00176880 	call	17688 <__floatsidf>
    dabc:	1009883a 	mov	r4,r2
    dac0:	180b883a 	mov	r5,r3
    dac4:	880d883a 	mov	r6,r17
    dac8:	a00f883a 	mov	r7,r20
    dacc:	001660c0 	call	1660c <__muldf3>
    dad0:	9809883a 	mov	r4,r19
    dad4:	a80b883a 	mov	r5,r21
    dad8:	100d883a 	mov	r6,r2
    dadc:	180f883a 	mov	r7,r3
    dae0:	0016d300 	call	16d30 <__subdf3>
    dae4:	82000c04 	addi	r8,r16,48
    dae8:	92000005 	stb	r8,0(r18)
    daec:	1009883a 	mov	r4,r2
    daf0:	180b883a 	mov	r5,r3
    daf4:	000d883a 	mov	r6,zero
    daf8:	01d00934 	movhi	r7,16420
    dafc:	1011883a 	mov	r8,r2
    db00:	bdc00044 	addi	r23,r23,1
    db04:	95bfd81e 	bne	r18,r22,da68 <__alt_mem_descriptor_memory+0xdefcda68>
    db08:	802d883a 	mov	r22,r16
    db0c:	dc000317 	ldw	r16,12(sp)
    db10:	4009883a 	mov	r4,r8
    db14:	180b883a 	mov	r5,r3
    db18:	400d883a 	mov	r6,r8
    db1c:	180f883a 	mov	r7,r3
    db20:	00152600 	call	15260 <__adddf3>
    db24:	8809883a 	mov	r4,r17
    db28:	a00b883a 	mov	r5,r20
    db2c:	100d883a 	mov	r6,r2
    db30:	180f883a 	mov	r7,r3
    db34:	1027883a 	mov	r19,r2
    db38:	1825883a 	mov	r18,r3
    db3c:	001652c0 	call	1652c <__ledf2>
    db40:	10000816 	blt	r2,zero,db64 <_dtoa_r+0x96c>
    db44:	8809883a 	mov	r4,r17
    db48:	a00b883a 	mov	r5,r20
    db4c:	980d883a 	mov	r6,r19
    db50:	900f883a 	mov	r7,r18
    db54:	00163c80 	call	163c8 <__eqdf2>
    db58:	103f551e 	bne	r2,zero,d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    db5c:	b580004c 	andi	r22,r22,1
    db60:	b03f5326 	beq	r22,zero,d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    db64:	bd7fffc3 	ldbu	r21,-1(r23)
    db68:	b8bfffc4 	addi	r2,r23,-1
    db6c:	1007883a 	mov	r3,r2
    db70:	01400e44 	movi	r5,57
    db74:	d9800717 	ldw	r6,28(sp)
    db78:	00000506 	br	db90 <_dtoa_r+0x998>
    db7c:	18ffffc4 	addi	r3,r3,-1
    db80:	30825e26 	beq	r6,r2,e4fc <_dtoa_r+0x1304>
    db84:	1d400003 	ldbu	r21,0(r3)
    db88:	102f883a 	mov	r23,r2
    db8c:	10bfffc4 	addi	r2,r2,-1
    db90:	a9003fcc 	andi	r4,r21,255
    db94:	2100201c 	xori	r4,r4,128
    db98:	213fe004 	addi	r4,r4,-128
    db9c:	217ff726 	beq	r4,r5,db7c <__alt_mem_descriptor_memory+0xdefcdb7c>
    dba0:	aa000044 	addi	r8,r21,1
    dba4:	12000005 	stb	r8,0(r2)
    dba8:	003f4106 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    dbac:	d8c00b17 	ldw	r3,44(sp)
    dbb0:	18006726 	beq	r3,zero,dd50 <_dtoa_r+0xb58>
    dbb4:	d9000317 	ldw	r4,12(sp)
    dbb8:	00c00044 	movi	r3,1
    dbbc:	19016a0e 	bge	r3,r4,e168 <_dtoa_r+0xf70>
    dbc0:	d8800617 	ldw	r2,24(sp)
    dbc4:	d8c00917 	ldw	r3,36(sp)
    dbc8:	157fffc4 	addi	r21,r2,-1
    dbcc:	1d420716 	blt	r3,r21,e3ec <_dtoa_r+0x11f4>
    dbd0:	1d6bc83a 	sub	r21,r3,r21
    dbd4:	d8800617 	ldw	r2,24(sp)
    dbd8:	1002c716 	blt	r2,zero,e6f8 <_dtoa_r+0x1500>
    dbdc:	dd000817 	ldw	r20,32(sp)
    dbe0:	d8800617 	ldw	r2,24(sp)
    dbe4:	d9800817 	ldw	r6,32(sp)
    dbe8:	8009883a 	mov	r4,r16
    dbec:	01400044 	movi	r5,1
    dbf0:	308d883a 	add	r6,r6,r2
    dbf4:	d9800815 	stw	r6,32(sp)
    dbf8:	b0ad883a 	add	r22,r22,r2
    dbfc:	00102140 	call	10214 <__i2b>
    dc00:	1023883a 	mov	r17,r2
    dc04:	a0000826 	beq	r20,zero,dc28 <_dtoa_r+0xa30>
    dc08:	0580070e 	bge	zero,r22,dc28 <_dtoa_r+0xa30>
    dc0c:	b005883a 	mov	r2,r22
    dc10:	a5812016 	blt	r20,r22,e094 <_dtoa_r+0xe9c>
    dc14:	d8c00817 	ldw	r3,32(sp)
    dc18:	a0a9c83a 	sub	r20,r20,r2
    dc1c:	b0adc83a 	sub	r22,r22,r2
    dc20:	1887c83a 	sub	r3,r3,r2
    dc24:	d8c00815 	stw	r3,32(sp)
    dc28:	d9000917 	ldw	r4,36(sp)
    dc2c:	0100140e 	bge	zero,r4,dc80 <_dtoa_r+0xa88>
    dc30:	d9800b17 	ldw	r6,44(sp)
    dc34:	3001e526 	beq	r6,zero,e3cc <_dtoa_r+0x11d4>
    dc38:	05400e0e 	bge	zero,r21,dc74 <_dtoa_r+0xa7c>
    dc3c:	880b883a 	mov	r5,r17
    dc40:	8009883a 	mov	r4,r16
    dc44:	a80d883a 	mov	r6,r21
    dc48:	001044c0 	call	1044c <__pow5mult>
    dc4c:	e00d883a 	mov	r6,fp
    dc50:	8009883a 	mov	r4,r16
    dc54:	100b883a 	mov	r5,r2
    dc58:	1023883a 	mov	r17,r2
    dc5c:	00102500 	call	10250 <__multiply>
    dc60:	102f883a 	mov	r23,r2
    dc64:	e00b883a 	mov	r5,fp
    dc68:	8009883a 	mov	r4,r16
    dc6c:	000febc0 	call	febc <_Bfree>
    dc70:	b839883a 	mov	fp,r23
    dc74:	d8800917 	ldw	r2,36(sp)
    dc78:	154dc83a 	sub	r6,r2,r21
    dc7c:	3001281e 	bne	r6,zero,e120 <_dtoa_r+0xf28>
    dc80:	05c00044 	movi	r23,1
    dc84:	8009883a 	mov	r4,r16
    dc88:	b80b883a 	mov	r5,r23
    dc8c:	00102140 	call	10214 <__i2b>
    dc90:	d8c00a17 	ldw	r3,40(sp)
    dc94:	102b883a 	mov	r21,r2
    dc98:	00c0310e 	bge	zero,r3,dd60 <_dtoa_r+0xb68>
    dc9c:	8009883a 	mov	r4,r16
    dca0:	100b883a 	mov	r5,r2
    dca4:	180d883a 	mov	r6,r3
    dca8:	001044c0 	call	1044c <__pow5mult>
    dcac:	d9000317 	ldw	r4,12(sp)
    dcb0:	102b883a 	mov	r21,r2
    dcb4:	b9011f0e 	bge	r23,r4,e134 <_dtoa_r+0xf3c>
    dcb8:	0027883a 	mov	r19,zero
    dcbc:	a8800417 	ldw	r2,16(r21)
    dcc0:	10800104 	addi	r2,r2,4
    dcc4:	1085883a 	add	r2,r2,r2
    dcc8:	1085883a 	add	r2,r2,r2
    dccc:	a885883a 	add	r2,r21,r2
    dcd0:	11000017 	ldw	r4,0(r2)
    dcd4:	00100fc0 	call	100fc <__hi0bits>
    dcd8:	00c00804 	movi	r3,32
    dcdc:	1885c83a 	sub	r2,r3,r2
    dce0:	00002506 	br	dd78 <_dtoa_r+0xb80>
    dce4:	01800044 	movi	r6,1
    dce8:	d9800c15 	stw	r6,48(sp)
    dcec:	003dec06 	br	d4a0 <__alt_mem_descriptor_memory+0xdefcd4a0>
    dcf0:	d8c00817 	ldw	r3,32(sp)
    dcf4:	d9000517 	ldw	r4,20(sp)
    dcf8:	d8000a15 	stw	zero,40(sp)
    dcfc:	1907c83a 	sub	r3,r3,r4
    dd00:	010dc83a 	sub	r6,zero,r4
    dd04:	d8c00815 	stw	r3,32(sp)
    dd08:	d9800915 	stw	r6,36(sp)
    dd0c:	003ded06 	br	d4c4 <__alt_mem_descriptor_memory+0xdefcd4c4>
    dd10:	05adc83a 	sub	r22,zero,r22
    dd14:	dd800815 	stw	r22,32(sp)
    dd18:	002d883a 	mov	r22,zero
    dd1c:	003de406 	br	d4b0 <__alt_mem_descriptor_memory+0xdefcd4b0>
    dd20:	d9000517 	ldw	r4,20(sp)
    dd24:	00176880 	call	17688 <__floatsidf>
    dd28:	1009883a 	mov	r4,r2
    dd2c:	180b883a 	mov	r5,r3
    dd30:	b00d883a 	mov	r6,r22
    dd34:	a80f883a 	mov	r7,r21
    dd38:	00163c80 	call	163c8 <__eqdf2>
    dd3c:	103dc726 	beq	r2,zero,d45c <__alt_mem_descriptor_memory+0xdefcd45c>
    dd40:	d8800517 	ldw	r2,20(sp)
    dd44:	10bfffc4 	addi	r2,r2,-1
    dd48:	d8800515 	stw	r2,20(sp)
    dd4c:	003dc306 	br	d45c <__alt_mem_descriptor_memory+0xdefcd45c>
    dd50:	dd400917 	ldw	r21,36(sp)
    dd54:	dd000817 	ldw	r20,32(sp)
    dd58:	0023883a 	mov	r17,zero
    dd5c:	003fa906 	br	dc04 <__alt_mem_descriptor_memory+0xdefcdc04>
    dd60:	d9800317 	ldw	r6,12(sp)
    dd64:	b981670e 	bge	r23,r6,e304 <_dtoa_r+0x110c>
    dd68:	0027883a 	mov	r19,zero
    dd6c:	d8c00a17 	ldw	r3,40(sp)
    dd70:	183fd21e 	bne	r3,zero,dcbc <__alt_mem_descriptor_memory+0xdefcdcbc>
    dd74:	00800044 	movi	r2,1
    dd78:	1585883a 	add	r2,r2,r22
    dd7c:	108007cc 	andi	r2,r2,31
    dd80:	10005f26 	beq	r2,zero,df00 <_dtoa_r+0xd08>
    dd84:	00c00804 	movi	r3,32
    dd88:	1887c83a 	sub	r3,r3,r2
    dd8c:	01000104 	movi	r4,4
    dd90:	20c2dd0e 	bge	r4,r3,e908 <_dtoa_r+0x1710>
    dd94:	d9000817 	ldw	r4,32(sp)
    dd98:	00c00704 	movi	r3,28
    dd9c:	1885c83a 	sub	r2,r3,r2
    dda0:	2089883a 	add	r4,r4,r2
    dda4:	d9000815 	stw	r4,32(sp)
    dda8:	a0a9883a 	add	r20,r20,r2
    ddac:	b0ad883a 	add	r22,r22,r2
    ddb0:	d8800817 	ldw	r2,32(sp)
    ddb4:	0080050e 	bge	zero,r2,ddcc <_dtoa_r+0xbd4>
    ddb8:	e00b883a 	mov	r5,fp
    ddbc:	8009883a 	mov	r4,r16
    ddc0:	100d883a 	mov	r6,r2
    ddc4:	001058c0 	call	1058c <__lshift>
    ddc8:	1039883a 	mov	fp,r2
    ddcc:	0580050e 	bge	zero,r22,dde4 <_dtoa_r+0xbec>
    ddd0:	a80b883a 	mov	r5,r21
    ddd4:	8009883a 	mov	r4,r16
    ddd8:	b00d883a 	mov	r6,r22
    dddc:	001058c0 	call	1058c <__lshift>
    dde0:	102b883a 	mov	r21,r2
    dde4:	d8c00c17 	ldw	r3,48(sp)
    dde8:	1801161e 	bne	r3,zero,e244 <_dtoa_r+0x104c>
    ddec:	d8c00617 	ldw	r3,24(sp)
    ddf0:	00c12d0e 	bge	zero,r3,e2a8 <_dtoa_r+0x10b0>
    ddf4:	d8c00b17 	ldw	r3,44(sp)
    ddf8:	1800571e 	bne	r3,zero,df58 <_dtoa_r+0xd60>
    ddfc:	dc800717 	ldw	r18,28(sp)
    de00:	dcc00617 	ldw	r19,24(sp)
    de04:	9029883a 	mov	r20,r18
    de08:	00000206 	br	de14 <_dtoa_r+0xc1c>
    de0c:	000fee40 	call	fee4 <__multadd>
    de10:	1039883a 	mov	fp,r2
    de14:	e009883a 	mov	r4,fp
    de18:	a80b883a 	mov	r5,r21
    de1c:	000cff80 	call	cff8 <quorem>
    de20:	10800c04 	addi	r2,r2,48
    de24:	90800005 	stb	r2,0(r18)
    de28:	94800044 	addi	r18,r18,1
    de2c:	9507c83a 	sub	r3,r18,r20
    de30:	8009883a 	mov	r4,r16
    de34:	e00b883a 	mov	r5,fp
    de38:	01800284 	movi	r6,10
    de3c:	000f883a 	mov	r7,zero
    de40:	1cfff216 	blt	r3,r19,de0c <__alt_mem_descriptor_memory+0xdefcde0c>
    de44:	1011883a 	mov	r8,r2
    de48:	d8800617 	ldw	r2,24(sp)
    de4c:	00822e0e 	bge	zero,r2,e708 <_dtoa_r+0x1510>
    de50:	d9000717 	ldw	r4,28(sp)
    de54:	0025883a 	mov	r18,zero
    de58:	20af883a 	add	r23,r4,r2
    de5c:	e00b883a 	mov	r5,fp
    de60:	01800044 	movi	r6,1
    de64:	8009883a 	mov	r4,r16
    de68:	da001715 	stw	r8,92(sp)
    de6c:	001058c0 	call	1058c <__lshift>
    de70:	1009883a 	mov	r4,r2
    de74:	a80b883a 	mov	r5,r21
    de78:	1039883a 	mov	fp,r2
    de7c:	00106d40 	call	106d4 <__mcmp>
    de80:	da001717 	ldw	r8,92(sp)
    de84:	00816e0e 	bge	zero,r2,e440 <_dtoa_r+0x1248>
    de88:	b93fffc3 	ldbu	r4,-1(r23)
    de8c:	b8bfffc4 	addi	r2,r23,-1
    de90:	1007883a 	mov	r3,r2
    de94:	01800e44 	movi	r6,57
    de98:	d9c00717 	ldw	r7,28(sp)
    de9c:	00000506 	br	deb4 <_dtoa_r+0xcbc>
    dea0:	18ffffc4 	addi	r3,r3,-1
    dea4:	38811926 	beq	r7,r2,e30c <_dtoa_r+0x1114>
    dea8:	19000003 	ldbu	r4,0(r3)
    deac:	102f883a 	mov	r23,r2
    deb0:	10bfffc4 	addi	r2,r2,-1
    deb4:	21403fcc 	andi	r5,r4,255
    deb8:	2940201c 	xori	r5,r5,128
    debc:	297fe004 	addi	r5,r5,-128
    dec0:	29bff726 	beq	r5,r6,dea0 <__alt_mem_descriptor_memory+0xdefcdea0>
    dec4:	21000044 	addi	r4,r4,1
    dec8:	11000005 	stb	r4,0(r2)
    decc:	8009883a 	mov	r4,r16
    ded0:	a80b883a 	mov	r5,r21
    ded4:	000febc0 	call	febc <_Bfree>
    ded8:	883e7526 	beq	r17,zero,d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    dedc:	90000426 	beq	r18,zero,def0 <_dtoa_r+0xcf8>
    dee0:	94400326 	beq	r18,r17,def0 <_dtoa_r+0xcf8>
    dee4:	8009883a 	mov	r4,r16
    dee8:	900b883a 	mov	r5,r18
    deec:	000febc0 	call	febc <_Bfree>
    def0:	8009883a 	mov	r4,r16
    def4:	880b883a 	mov	r5,r17
    def8:	000febc0 	call	febc <_Bfree>
    defc:	003e6c06 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    df00:	00800704 	movi	r2,28
    df04:	d9800817 	ldw	r6,32(sp)
    df08:	a0a9883a 	add	r20,r20,r2
    df0c:	b0ad883a 	add	r22,r22,r2
    df10:	308d883a 	add	r6,r6,r2
    df14:	d9800815 	stw	r6,32(sp)
    df18:	003fa506 	br	ddb0 <__alt_mem_descriptor_memory+0xdefcddb0>
    df1c:	013efb84 	movi	r4,-1042
    df20:	246bc83a 	sub	r21,r4,r17
    df24:	9548983a 	sll	r4,r18,r21
    df28:	003d1806 	br	d38c <__alt_mem_descriptor_memory+0xdefcd38c>
    df2c:	d8000c15 	stw	zero,48(sp)
    df30:	003d5b06 	br	d4a0 <__alt_mem_descriptor_memory+0xdefcd4a0>
    df34:	880b883a 	mov	r5,r17
    df38:	8009883a 	mov	r4,r16
    df3c:	01800284 	movi	r6,10
    df40:	000f883a 	mov	r7,zero
    df44:	000fee40 	call	fee4 <__multadd>
    df48:	1023883a 	mov	r17,r2
    df4c:	d8800d17 	ldw	r2,52(sp)
    df50:	0082550e 	bge	zero,r2,e8a8 <_dtoa_r+0x16b0>
    df54:	d8800615 	stw	r2,24(sp)
    df58:	0500050e 	bge	zero,r20,df70 <_dtoa_r+0xd78>
    df5c:	880b883a 	mov	r5,r17
    df60:	8009883a 	mov	r4,r16
    df64:	a00d883a 	mov	r6,r20
    df68:	001058c0 	call	1058c <__lshift>
    df6c:	1023883a 	mov	r17,r2
    df70:	98016a1e 	bne	r19,zero,e51c <_dtoa_r+0x1324>
    df74:	8829883a 	mov	r20,r17
    df78:	d9000617 	ldw	r4,24(sp)
    df7c:	dcc00717 	ldw	r19,28(sp)
    df80:	9480004c 	andi	r18,r18,1
    df84:	20bfffc4 	addi	r2,r4,-1
    df88:	9885883a 	add	r2,r19,r2
    df8c:	d8800415 	stw	r2,16(sp)
    df90:	dc800615 	stw	r18,24(sp)
    df94:	e009883a 	mov	r4,fp
    df98:	a80b883a 	mov	r5,r21
    df9c:	000cff80 	call	cff8 <quorem>
    dfa0:	e009883a 	mov	r4,fp
    dfa4:	880b883a 	mov	r5,r17
    dfa8:	102f883a 	mov	r23,r2
    dfac:	00106d40 	call	106d4 <__mcmp>
    dfb0:	8009883a 	mov	r4,r16
    dfb4:	a80b883a 	mov	r5,r21
    dfb8:	a00d883a 	mov	r6,r20
    dfbc:	102d883a 	mov	r22,r2
    dfc0:	00107340 	call	10734 <__mdiff>
    dfc4:	1007883a 	mov	r3,r2
    dfc8:	10800317 	ldw	r2,12(r2)
    dfcc:	bc800c04 	addi	r18,r23,48
    dfd0:	1000971e 	bne	r2,zero,e230 <_dtoa_r+0x1038>
    dfd4:	180b883a 	mov	r5,r3
    dfd8:	e009883a 	mov	r4,fp
    dfdc:	d8c01515 	stw	r3,84(sp)
    dfe0:	00106d40 	call	106d4 <__mcmp>
    dfe4:	d8c01517 	ldw	r3,84(sp)
    dfe8:	8009883a 	mov	r4,r16
    dfec:	d8801515 	stw	r2,84(sp)
    dff0:	180b883a 	mov	r5,r3
    dff4:	000febc0 	call	febc <_Bfree>
    dff8:	d8801517 	ldw	r2,84(sp)
    dffc:	1000041e 	bne	r2,zero,e010 <_dtoa_r+0xe18>
    e000:	d9800317 	ldw	r6,12(sp)
    e004:	3000021e 	bne	r6,zero,e010 <_dtoa_r+0xe18>
    e008:	d8c00617 	ldw	r3,24(sp)
    e00c:	18007626 	beq	r3,zero,e1e8 <_dtoa_r+0xff0>
    e010:	b0005b16 	blt	r22,zero,e180 <_dtoa_r+0xf88>
    e014:	b000041e 	bne	r22,zero,e028 <_dtoa_r+0xe30>
    e018:	d9000317 	ldw	r4,12(sp)
    e01c:	2000021e 	bne	r4,zero,e028 <_dtoa_r+0xe30>
    e020:	d8c00617 	ldw	r3,24(sp)
    e024:	18005626 	beq	r3,zero,e180 <_dtoa_r+0xf88>
    e028:	00814d16 	blt	zero,r2,e560 <_dtoa_r+0x1368>
    e02c:	d8c00417 	ldw	r3,16(sp)
    e030:	9d800044 	addi	r22,r19,1
    e034:	9c800005 	stb	r18,0(r19)
    e038:	b02f883a 	mov	r23,r22
    e03c:	98c14c26 	beq	r19,r3,e570 <_dtoa_r+0x1378>
    e040:	e00b883a 	mov	r5,fp
    e044:	8009883a 	mov	r4,r16
    e048:	01800284 	movi	r6,10
    e04c:	000f883a 	mov	r7,zero
    e050:	000fee40 	call	fee4 <__multadd>
    e054:	1039883a 	mov	fp,r2
    e058:	8d006d26 	beq	r17,r20,e210 <_dtoa_r+0x1018>
    e05c:	880b883a 	mov	r5,r17
    e060:	01800284 	movi	r6,10
    e064:	000f883a 	mov	r7,zero
    e068:	8009883a 	mov	r4,r16
    e06c:	000fee40 	call	fee4 <__multadd>
    e070:	a00b883a 	mov	r5,r20
    e074:	8009883a 	mov	r4,r16
    e078:	01800284 	movi	r6,10
    e07c:	000f883a 	mov	r7,zero
    e080:	1023883a 	mov	r17,r2
    e084:	000fee40 	call	fee4 <__multadd>
    e088:	1029883a 	mov	r20,r2
    e08c:	b027883a 	mov	r19,r22
    e090:	003fc006 	br	df94 <__alt_mem_descriptor_memory+0xdefcdf94>
    e094:	a005883a 	mov	r2,r20
    e098:	003ede06 	br	dc14 <__alt_mem_descriptor_memory+0xdefcdc14>
    e09c:	01000044 	movi	r4,1
    e0a0:	d9000b15 	stw	r4,44(sp)
    e0a4:	d9802217 	ldw	r6,136(sp)
    e0a8:	0180dc0e 	bge	zero,r6,e41c <_dtoa_r+0x1224>
    e0ac:	3023883a 	mov	r17,r6
    e0b0:	d9800d15 	stw	r6,52(sp)
    e0b4:	d9800615 	stw	r6,24(sp)
    e0b8:	003d1e06 	br	d534 <__alt_mem_descriptor_memory+0xdefcd534>
    e0bc:	d8800617 	ldw	r2,24(sp)
    e0c0:	00be3716 	blt	zero,r2,d9a0 <__alt_mem_descriptor_memory+0xdefcd9a0>
    e0c4:	1000be1e 	bne	r2,zero,e3c0 <_dtoa_r+0x11c8>
    e0c8:	8809883a 	mov	r4,r17
    e0cc:	a00b883a 	mov	r5,r20
    e0d0:	000d883a 	mov	r6,zero
    e0d4:	01d00534 	movhi	r7,16404
    e0d8:	001660c0 	call	1660c <__muldf3>
    e0dc:	1009883a 	mov	r4,r2
    e0e0:	180b883a 	mov	r5,r3
    e0e4:	900d883a 	mov	r6,r18
    e0e8:	980f883a 	mov	r7,r19
    e0ec:	001644c0 	call	1644c <__gedf2>
    e0f0:	002b883a 	mov	r21,zero
    e0f4:	0023883a 	mov	r17,zero
    e0f8:	10007a16 	blt	r2,zero,e2e4 <_dtoa_r+0x10ec>
    e0fc:	d9002217 	ldw	r4,136(sp)
    e100:	ddc00717 	ldw	r23,28(sp)
    e104:	0108303a 	nor	r4,zero,r4
    e108:	d9000515 	stw	r4,20(sp)
    e10c:	8009883a 	mov	r4,r16
    e110:	a80b883a 	mov	r5,r21
    e114:	000febc0 	call	febc <_Bfree>
    e118:	883f751e 	bne	r17,zero,def0 <__alt_mem_descriptor_memory+0xdefcdef0>
    e11c:	003de406 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    e120:	e00b883a 	mov	r5,fp
    e124:	8009883a 	mov	r4,r16
    e128:	001044c0 	call	1044c <__pow5mult>
    e12c:	1039883a 	mov	fp,r2
    e130:	003ed306 	br	dc80 <__alt_mem_descriptor_memory+0xdefcdc80>
    e134:	903ee01e 	bne	r18,zero,dcb8 <__alt_mem_descriptor_memory+0xdefcdcb8>
    e138:	00800434 	movhi	r2,16
    e13c:	10bfffc4 	addi	r2,r2,-1
    e140:	9884703a 	and	r2,r19,r2
    e144:	103f081e 	bne	r2,zero,dd68 <__alt_mem_descriptor_memory+0xdefcdd68>
    e148:	9cdffc2c 	andhi	r19,r19,32752
    e14c:	983f0626 	beq	r19,zero,dd68 <__alt_mem_descriptor_memory+0xdefcdd68>
    e150:	d8800817 	ldw	r2,32(sp)
    e154:	b5800044 	addi	r22,r22,1
    e158:	04c00044 	movi	r19,1
    e15c:	10800044 	addi	r2,r2,1
    e160:	d8800815 	stw	r2,32(sp)
    e164:	003f0106 	br	dd6c <__alt_mem_descriptor_memory+0xdefcdd6c>
    e168:	d9800f17 	ldw	r6,60(sp)
    e16c:	30016826 	beq	r6,zero,e710 <_dtoa_r+0x1518>
    e170:	10810cc4 	addi	r2,r2,1075
    e174:	dd400917 	ldw	r21,36(sp)
    e178:	dd000817 	ldw	r20,32(sp)
    e17c:	003e9906 	br	dbe4 <__alt_mem_descriptor_memory+0xdefcdbe4>
    e180:	9011883a 	mov	r8,r18
    e184:	4007883a 	mov	r3,r8
    e188:	e02d883a 	mov	r22,fp
    e18c:	0080100e 	bge	zero,r2,e1d0 <_dtoa_r+0xfd8>
    e190:	01800044 	movi	r6,1
    e194:	8009883a 	mov	r4,r16
    e198:	e00b883a 	mov	r5,fp
    e19c:	da001515 	stw	r8,84(sp)
    e1a0:	da001715 	stw	r8,92(sp)
    e1a4:	001058c0 	call	1058c <__lshift>
    e1a8:	1009883a 	mov	r4,r2
    e1ac:	a80b883a 	mov	r5,r21
    e1b0:	102d883a 	mov	r22,r2
    e1b4:	00106d40 	call	106d4 <__mcmp>
    e1b8:	d8c01517 	ldw	r3,84(sp)
    e1bc:	da001717 	ldw	r8,92(sp)
    e1c0:	0081a50e 	bge	zero,r2,e858 <_dtoa_r+0x1660>
    e1c4:	00800e44 	movi	r2,57
    e1c8:	40817b26 	beq	r8,r2,e7b8 <_dtoa_r+0x15c0>
    e1cc:	40c00044 	addi	r3,r8,1
    e1d0:	8825883a 	mov	r18,r17
    e1d4:	9dc00044 	addi	r23,r19,1
    e1d8:	98c00005 	stb	r3,0(r19)
    e1dc:	a023883a 	mov	r17,r20
    e1e0:	b039883a 	mov	fp,r22
    e1e4:	003f3906 	br	decc <__alt_mem_descriptor_memory+0xdefcdecc>
    e1e8:	00800e44 	movi	r2,57
    e1ec:	9011883a 	mov	r8,r18
    e1f0:	90817226 	beq	r18,r2,e7bc <_dtoa_r+0x15c4>
    e1f4:	0580010e 	bge	zero,r22,e1fc <_dtoa_r+0x1004>
    e1f8:	ba000c44 	addi	r8,r23,49
    e1fc:	8825883a 	mov	r18,r17
    e200:	9dc00044 	addi	r23,r19,1
    e204:	9a000005 	stb	r8,0(r19)
    e208:	a023883a 	mov	r17,r20
    e20c:	003f2f06 	br	decc <__alt_mem_descriptor_memory+0xdefcdecc>
    e210:	880b883a 	mov	r5,r17
    e214:	8009883a 	mov	r4,r16
    e218:	01800284 	movi	r6,10
    e21c:	000f883a 	mov	r7,zero
    e220:	000fee40 	call	fee4 <__multadd>
    e224:	1023883a 	mov	r17,r2
    e228:	1029883a 	mov	r20,r2
    e22c:	003f9706 	br	e08c <__alt_mem_descriptor_memory+0xdefce08c>
    e230:	8009883a 	mov	r4,r16
    e234:	180b883a 	mov	r5,r3
    e238:	000febc0 	call	febc <_Bfree>
    e23c:	00800044 	movi	r2,1
    e240:	003f7306 	br	e010 <__alt_mem_descriptor_memory+0xdefce010>
    e244:	e009883a 	mov	r4,fp
    e248:	a80b883a 	mov	r5,r21
    e24c:	00106d40 	call	106d4 <__mcmp>
    e250:	103ee60e 	bge	r2,zero,ddec <__alt_mem_descriptor_memory+0xdefcddec>
    e254:	8009883a 	mov	r4,r16
    e258:	e00b883a 	mov	r5,fp
    e25c:	01800284 	movi	r6,10
    e260:	000f883a 	mov	r7,zero
    e264:	000fee40 	call	fee4 <__multadd>
    e268:	d9000517 	ldw	r4,20(sp)
    e26c:	d9800b17 	ldw	r6,44(sp)
    e270:	1039883a 	mov	fp,r2
    e274:	213fffc4 	addi	r4,r4,-1
    e278:	d9000515 	stw	r4,20(sp)
    e27c:	303f2d1e 	bne	r6,zero,df34 <__alt_mem_descriptor_memory+0xdefcdf34>
    e280:	d9000d17 	ldw	r4,52(sp)
    e284:	0101780e 	bge	zero,r4,e868 <_dtoa_r+0x1670>
    e288:	d9000615 	stw	r4,24(sp)
    e28c:	003edb06 	br	ddfc <__alt_mem_descriptor_memory+0xdefcddfc>
    e290:	00800084 	movi	r2,2
    e294:	30818e1e 	bne	r6,r2,e8d0 <_dtoa_r+0x16d8>
    e298:	d8000b15 	stw	zero,44(sp)
    e29c:	003f8106 	br	e0a4 <__alt_mem_descriptor_memory+0xdefce0a4>
    e2a0:	d8800717 	ldw	r2,28(sp)
    e2a4:	003c0306 	br	d2b4 <__alt_mem_descriptor_memory+0xdefcd2b4>
    e2a8:	d9000317 	ldw	r4,12(sp)
    e2ac:	00800084 	movi	r2,2
    e2b0:	113ed00e 	bge	r2,r4,ddf4 <__alt_mem_descriptor_memory+0xdefcddf4>
    e2b4:	d8c00617 	ldw	r3,24(sp)
    e2b8:	183f901e 	bne	r3,zero,e0fc <__alt_mem_descriptor_memory+0xdefce0fc>
    e2bc:	a80b883a 	mov	r5,r21
    e2c0:	8009883a 	mov	r4,r16
    e2c4:	01800144 	movi	r6,5
    e2c8:	000f883a 	mov	r7,zero
    e2cc:	000fee40 	call	fee4 <__multadd>
    e2d0:	e009883a 	mov	r4,fp
    e2d4:	100b883a 	mov	r5,r2
    e2d8:	102b883a 	mov	r21,r2
    e2dc:	00106d40 	call	106d4 <__mcmp>
    e2e0:	00bf860e 	bge	zero,r2,e0fc <__alt_mem_descriptor_memory+0xdefce0fc>
    e2e4:	d9800717 	ldw	r6,28(sp)
    e2e8:	00800c44 	movi	r2,49
    e2ec:	30800005 	stb	r2,0(r6)
    e2f0:	d8800517 	ldw	r2,20(sp)
    e2f4:	35c00044 	addi	r23,r6,1
    e2f8:	10800044 	addi	r2,r2,1
    e2fc:	d8800515 	stw	r2,20(sp)
    e300:	003f8206 	br	e10c <__alt_mem_descriptor_memory+0xdefce10c>
    e304:	903e981e 	bne	r18,zero,dd68 <__alt_mem_descriptor_memory+0xdefcdd68>
    e308:	003f8b06 	br	e138 <__alt_mem_descriptor_memory+0xdefce138>
    e30c:	d9800517 	ldw	r6,20(sp)
    e310:	d8c00717 	ldw	r3,28(sp)
    e314:	00800c44 	movi	r2,49
    e318:	31800044 	addi	r6,r6,1
    e31c:	d9800515 	stw	r6,20(sp)
    e320:	18800005 	stb	r2,0(r3)
    e324:	003ee906 	br	decc <__alt_mem_descriptor_memory+0xdefcdecc>
    e328:	dc000317 	ldw	r16,12(sp)
    e32c:	003d6006 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    e330:	8809883a 	mov	r4,r17
    e334:	00176880 	call	17688 <__floatsidf>
    e338:	a009883a 	mov	r4,r20
    e33c:	a80b883a 	mov	r5,r21
    e340:	100d883a 	mov	r6,r2
    e344:	180f883a 	mov	r7,r3
    e348:	001660c0 	call	1660c <__muldf3>
    e34c:	1009883a 	mov	r4,r2
    e350:	180b883a 	mov	r5,r3
    e354:	000d883a 	mov	r6,zero
    e358:	01d00734 	movhi	r7,16412
    e35c:	00152600 	call	15260 <__adddf3>
    e360:	1023883a 	mov	r17,r2
    e364:	00bf3034 	movhi	r2,64704
    e368:	1885883a 	add	r2,r3,r2
    e36c:	d8800e15 	stw	r2,56(sp)
    e370:	a009883a 	mov	r4,r20
    e374:	a80b883a 	mov	r5,r21
    e378:	000d883a 	mov	r6,zero
    e37c:	01d00534 	movhi	r7,16404
    e380:	0016d300 	call	16d30 <__subdf3>
    e384:	d9c00e17 	ldw	r7,56(sp)
    e388:	1009883a 	mov	r4,r2
    e38c:	180b883a 	mov	r5,r3
    e390:	880d883a 	mov	r6,r17
    e394:	102b883a 	mov	r21,r2
    e398:	1829883a 	mov	r20,r3
    e39c:	001644c0 	call	1644c <__gedf2>
    e3a0:	00807716 	blt	zero,r2,e580 <_dtoa_r+0x1388>
    e3a4:	d8800e17 	ldw	r2,56(sp)
    e3a8:	a809883a 	mov	r4,r21
    e3ac:	a00b883a 	mov	r5,r20
    e3b0:	11e0003c 	xorhi	r7,r2,32768
    e3b4:	880d883a 	mov	r6,r17
    e3b8:	001652c0 	call	1652c <__ledf2>
    e3bc:	103d6b0e 	bge	r2,zero,d96c <__alt_mem_descriptor_memory+0xdefcd96c>
    e3c0:	002b883a 	mov	r21,zero
    e3c4:	0023883a 	mov	r17,zero
    e3c8:	003f4c06 	br	e0fc <__alt_mem_descriptor_memory+0xdefce0fc>
    e3cc:	d9800917 	ldw	r6,36(sp)
    e3d0:	e00b883a 	mov	r5,fp
    e3d4:	8009883a 	mov	r4,r16
    e3d8:	001044c0 	call	1044c <__pow5mult>
    e3dc:	1039883a 	mov	fp,r2
    e3e0:	003e2706 	br	dc80 <__alt_mem_descriptor_memory+0xdefcdc80>
    e3e4:	d8000b15 	stw	zero,44(sp)
    e3e8:	003c4906 	br	d510 <__alt_mem_descriptor_memory+0xdefcd510>
    e3ec:	d9000917 	ldw	r4,36(sp)
    e3f0:	d9800a17 	ldw	r6,40(sp)
    e3f4:	dd400915 	stw	r21,36(sp)
    e3f8:	a905c83a 	sub	r2,r21,r4
    e3fc:	308d883a 	add	r6,r6,r2
    e400:	d9800a15 	stw	r6,40(sp)
    e404:	002b883a 	mov	r21,zero
    e408:	003df206 	br	dbd4 <__alt_mem_descriptor_memory+0xdefcdbd4>
    e40c:	dc800e15 	stw	r18,56(sp)
    e410:	982b883a 	mov	r21,r19
    e414:	04400084 	movi	r17,2
    e418:	003c7406 	br	d5ec <__alt_mem_descriptor_memory+0xdefcd5ec>
    e41c:	04400044 	movi	r17,1
    e420:	dc400d15 	stw	r17,52(sp)
    e424:	dc400615 	stw	r17,24(sp)
    e428:	dc402215 	stw	r17,136(sp)
    e42c:	80001115 	stw	zero,68(r16)
    e430:	000b883a 	mov	r5,zero
    e434:	003c4a06 	br	d560 <__alt_mem_descriptor_memory+0xdefcd560>
    e438:	3023883a 	mov	r17,r6
    e43c:	003ffb06 	br	e42c <__alt_mem_descriptor_memory+0xdefce42c>
    e440:	1000021e 	bne	r2,zero,e44c <_dtoa_r+0x1254>
    e444:	4200004c 	andi	r8,r8,1
    e448:	403e8f1e 	bne	r8,zero,de88 <__alt_mem_descriptor_memory+0xdefcde88>
    e44c:	01000c04 	movi	r4,48
    e450:	00000106 	br	e458 <_dtoa_r+0x1260>
    e454:	102f883a 	mov	r23,r2
    e458:	b8bfffc4 	addi	r2,r23,-1
    e45c:	10c00007 	ldb	r3,0(r2)
    e460:	193ffc26 	beq	r3,r4,e454 <__alt_mem_descriptor_memory+0xdefce454>
    e464:	003e9906 	br	decc <__alt_mem_descriptor_memory+0xdefcdecc>
    e468:	d9000517 	ldw	r4,20(sp)
    e46c:	012fc83a 	sub	r23,zero,r4
    e470:	b800ad26 	beq	r23,zero,e728 <_dtoa_r+0x1530>
    e474:	b88003cc 	andi	r2,r23,15
    e478:	100490fa 	slli	r2,r2,3
    e47c:	00c00174 	movhi	r3,5
    e480:	18f5d304 	addi	r3,r3,-10420
    e484:	1885883a 	add	r2,r3,r2
    e488:	11800017 	ldw	r6,0(r2)
    e48c:	11c00117 	ldw	r7,4(r2)
    e490:	b82fd13a 	srai	r23,r23,4
    e494:	9009883a 	mov	r4,r18
    e498:	980b883a 	mov	r5,r19
    e49c:	001660c0 	call	1660c <__muldf3>
    e4a0:	1029883a 	mov	r20,r2
    e4a4:	182b883a 	mov	r21,r3
    e4a8:	b800f426 	beq	r23,zero,e87c <_dtoa_r+0x1684>
    e4ac:	02000174 	movhi	r8,5
    e4b0:	4235c904 	addi	r8,r8,-10460
    e4b4:	8029883a 	mov	r20,r16
    e4b8:	04400084 	movi	r17,2
    e4bc:	4021883a 	mov	r16,r8
    e4c0:	b980004c 	andi	r6,r23,1
    e4c4:	1009883a 	mov	r4,r2
    e4c8:	b82fd07a 	srai	r23,r23,1
    e4cc:	180b883a 	mov	r5,r3
    e4d0:	30000426 	beq	r6,zero,e4e4 <_dtoa_r+0x12ec>
    e4d4:	81800017 	ldw	r6,0(r16)
    e4d8:	81c00117 	ldw	r7,4(r16)
    e4dc:	8c400044 	addi	r17,r17,1
    e4e0:	001660c0 	call	1660c <__muldf3>
    e4e4:	84000204 	addi	r16,r16,8
    e4e8:	b83ff51e 	bne	r23,zero,e4c0 <__alt_mem_descriptor_memory+0xdefce4c0>
    e4ec:	a021883a 	mov	r16,r20
    e4f0:	182b883a 	mov	r21,r3
    e4f4:	1029883a 	mov	r20,r2
    e4f8:	003c5506 	br	d650 <__alt_mem_descriptor_memory+0xdefcd650>
    e4fc:	d9800517 	ldw	r6,20(sp)
    e500:	d9000717 	ldw	r4,28(sp)
    e504:	00c00c04 	movi	r3,48
    e508:	31800044 	addi	r6,r6,1
    e50c:	d9800515 	stw	r6,20(sp)
    e510:	20c00005 	stb	r3,0(r4)
    e514:	02000c44 	movi	r8,49
    e518:	003da206 	br	dba4 <__alt_mem_descriptor_memory+0xdefcdba4>
    e51c:	89400117 	ldw	r5,4(r17)
    e520:	8009883a 	mov	r4,r16
    e524:	000fe140 	call	fe14 <_Balloc>
    e528:	89800417 	ldw	r6,16(r17)
    e52c:	11000304 	addi	r4,r2,12
    e530:	89400304 	addi	r5,r17,12
    e534:	31800084 	addi	r6,r6,2
    e538:	318d883a 	add	r6,r6,r6
    e53c:	318d883a 	add	r6,r6,r6
    e540:	1027883a 	mov	r19,r2
    e544:	0007c900 	call	7c90 <memcpy>
    e548:	8009883a 	mov	r4,r16
    e54c:	980b883a 	mov	r5,r19
    e550:	01800044 	movi	r6,1
    e554:	001058c0 	call	1058c <__lshift>
    e558:	1029883a 	mov	r20,r2
    e55c:	003e8606 	br	df78 <__alt_mem_descriptor_memory+0xdefcdf78>
    e560:	00800e44 	movi	r2,57
    e564:	90809526 	beq	r18,r2,e7bc <_dtoa_r+0x15c4>
    e568:	92000044 	addi	r8,r18,1
    e56c:	003f2306 	br	e1fc <__alt_mem_descriptor_memory+0xdefce1fc>
    e570:	9011883a 	mov	r8,r18
    e574:	8825883a 	mov	r18,r17
    e578:	a023883a 	mov	r17,r20
    e57c:	003e3706 	br	de5c <__alt_mem_descriptor_memory+0xdefcde5c>
    e580:	002b883a 	mov	r21,zero
    e584:	0023883a 	mov	r17,zero
    e588:	003f5606 	br	e2e4 <__alt_mem_descriptor_memory+0xdefce2e4>
    e58c:	51bfffc4 	addi	r6,r10,-1
    e590:	300490fa 	slli	r2,r6,3
    e594:	00c00174 	movhi	r3,5
    e598:	18f5d304 	addi	r3,r3,-10420
    e59c:	1885883a 	add	r2,r3,r2
    e5a0:	d9c00e17 	ldw	r7,56(sp)
    e5a4:	11000017 	ldw	r4,0(r2)
    e5a8:	11400117 	ldw	r5,4(r2)
    e5ac:	d8800717 	ldw	r2,28(sp)
    e5b0:	d9801015 	stw	r6,64(sp)
    e5b4:	880d883a 	mov	r6,r17
    e5b8:	da801615 	stw	r10,88(sp)
    e5bc:	15c00044 	addi	r23,r2,1
    e5c0:	001660c0 	call	1660c <__muldf3>
    e5c4:	a80b883a 	mov	r5,r21
    e5c8:	a009883a 	mov	r4,r20
    e5cc:	d8c01115 	stw	r3,68(sp)
    e5d0:	d8800e15 	stw	r2,56(sp)
    e5d4:	00176000 	call	17600 <__fixdfsi>
    e5d8:	1009883a 	mov	r4,r2
    e5dc:	1023883a 	mov	r17,r2
    e5e0:	00176880 	call	17688 <__floatsidf>
    e5e4:	a009883a 	mov	r4,r20
    e5e8:	a80b883a 	mov	r5,r21
    e5ec:	100d883a 	mov	r6,r2
    e5f0:	180f883a 	mov	r7,r3
    e5f4:	0016d300 	call	16d30 <__subdf3>
    e5f8:	1813883a 	mov	r9,r3
    e5fc:	d8c00717 	ldw	r3,28(sp)
    e600:	8c400c04 	addi	r17,r17,48
    e604:	1011883a 	mov	r8,r2
    e608:	1c400005 	stb	r17,0(r3)
    e60c:	da801617 	ldw	r10,88(sp)
    e610:	00800044 	movi	r2,1
    e614:	50802326 	beq	r10,r2,e6a4 <_dtoa_r+0x14ac>
    e618:	d8800717 	ldw	r2,28(sp)
    e61c:	b82b883a 	mov	r21,r23
    e620:	dc001315 	stw	r16,76(sp)
    e624:	12a9883a 	add	r20,r2,r10
    e628:	4807883a 	mov	r3,r9
    e62c:	4005883a 	mov	r2,r8
    e630:	dc801415 	stw	r18,80(sp)
    e634:	000d883a 	mov	r6,zero
    e638:	01d00934 	movhi	r7,16420
    e63c:	1009883a 	mov	r4,r2
    e640:	180b883a 	mov	r5,r3
    e644:	001660c0 	call	1660c <__muldf3>
    e648:	180b883a 	mov	r5,r3
    e64c:	1009883a 	mov	r4,r2
    e650:	1821883a 	mov	r16,r3
    e654:	1025883a 	mov	r18,r2
    e658:	00176000 	call	17600 <__fixdfsi>
    e65c:	1009883a 	mov	r4,r2
    e660:	1023883a 	mov	r17,r2
    e664:	00176880 	call	17688 <__floatsidf>
    e668:	9009883a 	mov	r4,r18
    e66c:	800b883a 	mov	r5,r16
    e670:	100d883a 	mov	r6,r2
    e674:	180f883a 	mov	r7,r3
    e678:	8c400c04 	addi	r17,r17,48
    e67c:	0016d300 	call	16d30 <__subdf3>
    e680:	ad400044 	addi	r21,r21,1
    e684:	ac7fffc5 	stb	r17,-1(r21)
    e688:	ad3fea1e 	bne	r21,r20,e634 <__alt_mem_descriptor_memory+0xdefce634>
    e68c:	1813883a 	mov	r9,r3
    e690:	d8c01017 	ldw	r3,64(sp)
    e694:	dc001317 	ldw	r16,76(sp)
    e698:	dc801417 	ldw	r18,80(sp)
    e69c:	1011883a 	mov	r8,r2
    e6a0:	b8ef883a 	add	r23,r23,r3
    e6a4:	d9000e17 	ldw	r4,56(sp)
    e6a8:	d9401117 	ldw	r5,68(sp)
    e6ac:	000d883a 	mov	r6,zero
    e6b0:	01cff834 	movhi	r7,16352
    e6b4:	da001715 	stw	r8,92(sp)
    e6b8:	da401515 	stw	r9,84(sp)
    e6bc:	00152600 	call	15260 <__adddf3>
    e6c0:	da001717 	ldw	r8,92(sp)
    e6c4:	da401517 	ldw	r9,84(sp)
    e6c8:	1009883a 	mov	r4,r2
    e6cc:	400d883a 	mov	r6,r8
    e6d0:	480f883a 	mov	r7,r9
    e6d4:	180b883a 	mov	r5,r3
    e6d8:	001652c0 	call	1652c <__ledf2>
    e6dc:	da001717 	ldw	r8,92(sp)
    e6e0:	da401517 	ldw	r9,84(sp)
    e6e4:	10003b0e 	bge	r2,zero,e7d4 <_dtoa_r+0x15dc>
    e6e8:	d9001217 	ldw	r4,72(sp)
    e6ec:	bd7fffc3 	ldbu	r21,-1(r23)
    e6f0:	d9000515 	stw	r4,20(sp)
    e6f4:	003d1c06 	br	db68 <__alt_mem_descriptor_memory+0xdefcdb68>
    e6f8:	d8c00817 	ldw	r3,32(sp)
    e6fc:	18a9c83a 	sub	r20,r3,r2
    e700:	0005883a 	mov	r2,zero
    e704:	003d3706 	br	dbe4 <__alt_mem_descriptor_memory+0xdefcdbe4>
    e708:	00800044 	movi	r2,1
    e70c:	003dd006 	br	de50 <__alt_mem_descriptor_memory+0xdefcde50>
    e710:	d8c00217 	ldw	r3,8(sp)
    e714:	00800d84 	movi	r2,54
    e718:	dd400917 	ldw	r21,36(sp)
    e71c:	10c5c83a 	sub	r2,r2,r3
    e720:	dd000817 	ldw	r20,32(sp)
    e724:	003d2f06 	br	dbe4 <__alt_mem_descriptor_memory+0xdefcdbe4>
    e728:	9029883a 	mov	r20,r18
    e72c:	982b883a 	mov	r21,r19
    e730:	04400084 	movi	r17,2
    e734:	003bc606 	br	d650 <__alt_mem_descriptor_memory+0xdefcd650>
    e738:	d8800617 	ldw	r2,24(sp)
    e73c:	103efc26 	beq	r2,zero,e330 <__alt_mem_descriptor_memory+0xdefce330>
    e740:	d8c00d17 	ldw	r3,52(sp)
    e744:	00fc890e 	bge	zero,r3,d96c <__alt_mem_descriptor_memory+0xdefcd96c>
    e748:	a80b883a 	mov	r5,r21
    e74c:	a009883a 	mov	r4,r20
    e750:	000d883a 	mov	r6,zero
    e754:	01d00934 	movhi	r7,16420
    e758:	001660c0 	call	1660c <__muldf3>
    e75c:	89000044 	addi	r4,r17,1
    e760:	1029883a 	mov	r20,r2
    e764:	182b883a 	mov	r21,r3
    e768:	00176880 	call	17688 <__floatsidf>
    e76c:	a009883a 	mov	r4,r20
    e770:	a80b883a 	mov	r5,r21
    e774:	100d883a 	mov	r6,r2
    e778:	180f883a 	mov	r7,r3
    e77c:	001660c0 	call	1660c <__muldf3>
    e780:	1009883a 	mov	r4,r2
    e784:	180b883a 	mov	r5,r3
    e788:	000d883a 	mov	r6,zero
    e78c:	01d00734 	movhi	r7,16412
    e790:	00152600 	call	15260 <__adddf3>
    e794:	d9000517 	ldw	r4,20(sp)
    e798:	1023883a 	mov	r17,r2
    e79c:	00bf3034 	movhi	r2,64704
    e7a0:	213fffc4 	addi	r4,r4,-1
    e7a4:	1885883a 	add	r2,r3,r2
    e7a8:	d9001215 	stw	r4,72(sp)
    e7ac:	d8800e15 	stw	r2,56(sp)
    e7b0:	da800d17 	ldw	r10,52(sp)
    e7b4:	003bc306 	br	d6c4 <__alt_mem_descriptor_memory+0xdefcd6c4>
    e7b8:	b039883a 	mov	fp,r22
    e7bc:	01000e44 	movi	r4,57
    e7c0:	8825883a 	mov	r18,r17
    e7c4:	9dc00044 	addi	r23,r19,1
    e7c8:	99000005 	stb	r4,0(r19)
    e7cc:	a023883a 	mov	r17,r20
    e7d0:	003dae06 	br	de8c <__alt_mem_descriptor_memory+0xdefcde8c>
    e7d4:	d9800e17 	ldw	r6,56(sp)
    e7d8:	d9c01117 	ldw	r7,68(sp)
    e7dc:	0009883a 	mov	r4,zero
    e7e0:	014ff834 	movhi	r5,16352
    e7e4:	da001715 	stw	r8,92(sp)
    e7e8:	da401515 	stw	r9,84(sp)
    e7ec:	0016d300 	call	16d30 <__subdf3>
    e7f0:	da001717 	ldw	r8,92(sp)
    e7f4:	da401517 	ldw	r9,84(sp)
    e7f8:	1009883a 	mov	r4,r2
    e7fc:	180b883a 	mov	r5,r3
    e800:	400d883a 	mov	r6,r8
    e804:	480f883a 	mov	r7,r9
    e808:	001644c0 	call	1644c <__gedf2>
    e80c:	00bc570e 	bge	zero,r2,d96c <__alt_mem_descriptor_memory+0xdefcd96c>
    e810:	01000c04 	movi	r4,48
    e814:	00000106 	br	e81c <_dtoa_r+0x1624>
    e818:	102f883a 	mov	r23,r2
    e81c:	b8bfffc4 	addi	r2,r23,-1
    e820:	10c00007 	ldb	r3,0(r2)
    e824:	193ffc26 	beq	r3,r4,e818 <__alt_mem_descriptor_memory+0xdefce818>
    e828:	d9801217 	ldw	r6,72(sp)
    e82c:	d9800515 	stw	r6,20(sp)
    e830:	003c1f06 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    e834:	d8801217 	ldw	r2,72(sp)
    e838:	dc001117 	ldw	r16,68(sp)
    e83c:	d8800515 	stw	r2,20(sp)
    e840:	003cc906 	br	db68 <__alt_mem_descriptor_memory+0xdefcdb68>
    e844:	dd801317 	ldw	r22,76(sp)
    e848:	dc001117 	ldw	r16,68(sp)
    e84c:	dcc01417 	ldw	r19,80(sp)
    e850:	dc801017 	ldw	r18,64(sp)
    e854:	003c4506 	br	d96c <__alt_mem_descriptor_memory+0xdefcd96c>
    e858:	103e5d1e 	bne	r2,zero,e1d0 <__alt_mem_descriptor_memory+0xdefce1d0>
    e85c:	4080004c 	andi	r2,r8,1
    e860:	103e5b26 	beq	r2,zero,e1d0 <__alt_mem_descriptor_memory+0xdefce1d0>
    e864:	003e5706 	br	e1c4 <__alt_mem_descriptor_memory+0xdefce1c4>
    e868:	d8c00317 	ldw	r3,12(sp)
    e86c:	00800084 	movi	r2,2
    e870:	10c00a16 	blt	r2,r3,e89c <_dtoa_r+0x16a4>
    e874:	d9000d17 	ldw	r4,52(sp)
    e878:	003e8306 	br	e288 <__alt_mem_descriptor_memory+0xdefce288>
    e87c:	04400084 	movi	r17,2
    e880:	003b7306 	br	d650 <__alt_mem_descriptor_memory+0xdefcd650>
    e884:	d9801217 	ldw	r6,72(sp)
    e888:	d9800515 	stw	r6,20(sp)
    e88c:	003cb606 	br	db68 <__alt_mem_descriptor_memory+0xdefcdb68>
    e890:	d9001217 	ldw	r4,72(sp)
    e894:	d9000515 	stw	r4,20(sp)
    e898:	003c0506 	br	d8b0 <__alt_mem_descriptor_memory+0xdefcd8b0>
    e89c:	d9800d17 	ldw	r6,52(sp)
    e8a0:	d9800615 	stw	r6,24(sp)
    e8a4:	003e8306 	br	e2b4 <__alt_mem_descriptor_memory+0xdefce2b4>
    e8a8:	d9800317 	ldw	r6,12(sp)
    e8ac:	00800084 	movi	r2,2
    e8b0:	11800216 	blt	r2,r6,e8bc <_dtoa_r+0x16c4>
    e8b4:	d8800d17 	ldw	r2,52(sp)
    e8b8:	003da606 	br	df54 <__alt_mem_descriptor_memory+0xdefcdf54>
    e8bc:	d8800d17 	ldw	r2,52(sp)
    e8c0:	d8800615 	stw	r2,24(sp)
    e8c4:	003e7b06 	br	e2b4 <__alt_mem_descriptor_memory+0xdefce2b4>
    e8c8:	05000044 	movi	r20,1
    e8cc:	003b0506 	br	d4e4 <__alt_mem_descriptor_memory+0xdefcd4e4>
    e8d0:	8009883a 	mov	r4,r16
    e8d4:	80001115 	stw	zero,68(r16)
    e8d8:	000b883a 	mov	r5,zero
    e8dc:	000fe140 	call	fe14 <_Balloc>
    e8e0:	d8800715 	stw	r2,28(sp)
    e8e4:	d8c00717 	ldw	r3,28(sp)
    e8e8:	00bfffc4 	movi	r2,-1
    e8ec:	01000044 	movi	r4,1
    e8f0:	d8800615 	stw	r2,24(sp)
    e8f4:	80c01015 	stw	r3,64(r16)
    e8f8:	d9000b15 	stw	r4,44(sp)
    e8fc:	d8002215 	stw	zero,136(sp)
    e900:	d8800d15 	stw	r2,52(sp)
    e904:	003c1906 	br	d96c <__alt_mem_descriptor_memory+0xdefcd96c>
    e908:	193d2926 	beq	r3,r4,ddb0 <__alt_mem_descriptor_memory+0xdefcddb0>
    e90c:	00c00f04 	movi	r3,60
    e910:	1885c83a 	sub	r2,r3,r2
    e914:	003d7b06 	br	df04 <__alt_mem_descriptor_memory+0xdefcdf04>
    e918:	000b883a 	mov	r5,zero
    e91c:	003b1006 	br	d560 <__alt_mem_descriptor_memory+0xdefcd560>

0000e920 <_fflush_r>:
    e920:	defffb04 	addi	sp,sp,-20
    e924:	dcc00315 	stw	r19,12(sp)
    e928:	dc000015 	stw	r16,0(sp)
    e92c:	dfc00415 	stw	ra,16(sp)
    e930:	dc800215 	stw	r18,8(sp)
    e934:	dc400115 	stw	r17,4(sp)
    e938:	2027883a 	mov	r19,r4
    e93c:	2821883a 	mov	r16,r5
    e940:	20000226 	beq	r4,zero,e94c <_fflush_r+0x2c>
    e944:	20800e17 	ldw	r2,56(r4)
    e948:	10005326 	beq	r2,zero,ea98 <_fflush_r+0x178>
    e94c:	8080030b 	ldhu	r2,12(r16)
    e950:	10ffffcc 	andi	r3,r2,65535
    e954:	18e0001c 	xori	r3,r3,32768
    e958:	18e00004 	addi	r3,r3,-32768
    e95c:	18002c26 	beq	r3,zero,ea10 <_fflush_r+0xf0>
    e960:	10c0020c 	andi	r3,r2,8
    e964:	1800321e 	bne	r3,zero,ea30 <_fflush_r+0x110>
    e968:	80c00117 	ldw	r3,4(r16)
    e96c:	10820014 	ori	r2,r2,2048
    e970:	8080030d 	sth	r2,12(r16)
    e974:	00c0570e 	bge	zero,r3,ead4 <_fflush_r+0x1b4>
    e978:	82000a17 	ldw	r8,40(r16)
    e97c:	40002426 	beq	r8,zero,ea10 <_fflush_r+0xf0>
    e980:	9c400017 	ldw	r17,0(r19)
    e984:	10c4000c 	andi	r3,r2,4096
    e988:	98000015 	stw	zero,0(r19)
    e98c:	18004626 	beq	r3,zero,eaa8 <_fflush_r+0x188>
    e990:	81801417 	ldw	r6,80(r16)
    e994:	10c0010c 	andi	r3,r2,4
    e998:	18000626 	beq	r3,zero,e9b4 <_fflush_r+0x94>
    e99c:	80c00117 	ldw	r3,4(r16)
    e9a0:	80800c17 	ldw	r2,48(r16)
    e9a4:	30cdc83a 	sub	r6,r6,r3
    e9a8:	10000226 	beq	r2,zero,e9b4 <_fflush_r+0x94>
    e9ac:	80800f17 	ldw	r2,60(r16)
    e9b0:	308dc83a 	sub	r6,r6,r2
    e9b4:	81400717 	ldw	r5,28(r16)
    e9b8:	9809883a 	mov	r4,r19
    e9bc:	000f883a 	mov	r7,zero
    e9c0:	403ee83a 	callr	r8
    e9c4:	00ffffc4 	movi	r3,-1
    e9c8:	10c04526 	beq	r2,r3,eae0 <_fflush_r+0x1c0>
    e9cc:	80c0030b 	ldhu	r3,12(r16)
    e9d0:	81000417 	ldw	r4,16(r16)
    e9d4:	80000115 	stw	zero,4(r16)
    e9d8:	197dffcc 	andi	r5,r3,63487
    e9dc:	8140030d 	sth	r5,12(r16)
    e9e0:	81000015 	stw	r4,0(r16)
    e9e4:	18c4000c 	andi	r3,r3,4096
    e9e8:	18000126 	beq	r3,zero,e9f0 <_fflush_r+0xd0>
    e9ec:	80801415 	stw	r2,80(r16)
    e9f0:	81400c17 	ldw	r5,48(r16)
    e9f4:	9c400015 	stw	r17,0(r19)
    e9f8:	28000526 	beq	r5,zero,ea10 <_fflush_r+0xf0>
    e9fc:	80801004 	addi	r2,r16,64
    ea00:	28800226 	beq	r5,r2,ea0c <_fflush_r+0xec>
    ea04:	9809883a 	mov	r4,r19
    ea08:	000f1900 	call	f190 <_free_r>
    ea0c:	80000c15 	stw	zero,48(r16)
    ea10:	0005883a 	mov	r2,zero
    ea14:	dfc00417 	ldw	ra,16(sp)
    ea18:	dcc00317 	ldw	r19,12(sp)
    ea1c:	dc800217 	ldw	r18,8(sp)
    ea20:	dc400117 	ldw	r17,4(sp)
    ea24:	dc000017 	ldw	r16,0(sp)
    ea28:	dec00504 	addi	sp,sp,20
    ea2c:	f800283a 	ret
    ea30:	84800417 	ldw	r18,16(r16)
    ea34:	903ff626 	beq	r18,zero,ea10 <__alt_mem_descriptor_memory+0xdefcea10>
    ea38:	84400017 	ldw	r17,0(r16)
    ea3c:	108000cc 	andi	r2,r2,3
    ea40:	84800015 	stw	r18,0(r16)
    ea44:	8ca3c83a 	sub	r17,r17,r18
    ea48:	10001526 	beq	r2,zero,eaa0 <_fflush_r+0x180>
    ea4c:	0005883a 	mov	r2,zero
    ea50:	80800215 	stw	r2,8(r16)
    ea54:	04400316 	blt	zero,r17,ea64 <_fflush_r+0x144>
    ea58:	003fed06 	br	ea10 <__alt_mem_descriptor_memory+0xdefcea10>
    ea5c:	90a5883a 	add	r18,r18,r2
    ea60:	047feb0e 	bge	zero,r17,ea10 <__alt_mem_descriptor_memory+0xdefcea10>
    ea64:	80800917 	ldw	r2,36(r16)
    ea68:	81400717 	ldw	r5,28(r16)
    ea6c:	880f883a 	mov	r7,r17
    ea70:	900d883a 	mov	r6,r18
    ea74:	9809883a 	mov	r4,r19
    ea78:	103ee83a 	callr	r2
    ea7c:	88a3c83a 	sub	r17,r17,r2
    ea80:	00bff616 	blt	zero,r2,ea5c <__alt_mem_descriptor_memory+0xdefcea5c>
    ea84:	80c0030b 	ldhu	r3,12(r16)
    ea88:	00bfffc4 	movi	r2,-1
    ea8c:	18c01014 	ori	r3,r3,64
    ea90:	80c0030d 	sth	r3,12(r16)
    ea94:	003fdf06 	br	ea14 <__alt_mem_descriptor_memory+0xdefcea14>
    ea98:	000eec80 	call	eec8 <__sinit>
    ea9c:	003fab06 	br	e94c <__alt_mem_descriptor_memory+0xdefce94c>
    eaa0:	80800517 	ldw	r2,20(r16)
    eaa4:	003fea06 	br	ea50 <__alt_mem_descriptor_memory+0xdefcea50>
    eaa8:	81400717 	ldw	r5,28(r16)
    eaac:	000d883a 	mov	r6,zero
    eab0:	9809883a 	mov	r4,r19
    eab4:	01c00044 	movi	r7,1
    eab8:	403ee83a 	callr	r8
    eabc:	100d883a 	mov	r6,r2
    eac0:	00bfffc4 	movi	r2,-1
    eac4:	30801326 	beq	r6,r2,eb14 <_fflush_r+0x1f4>
    eac8:	8080030b 	ldhu	r2,12(r16)
    eacc:	82000a17 	ldw	r8,40(r16)
    ead0:	003fb006 	br	e994 <__alt_mem_descriptor_memory+0xdefce994>
    ead4:	80c00f17 	ldw	r3,60(r16)
    ead8:	00ffa716 	blt	zero,r3,e978 <__alt_mem_descriptor_memory+0xdefce978>
    eadc:	003fcc06 	br	ea10 <__alt_mem_descriptor_memory+0xdefcea10>
    eae0:	98c00017 	ldw	r3,0(r19)
    eae4:	183fb926 	beq	r3,zero,e9cc <__alt_mem_descriptor_memory+0xdefce9cc>
    eae8:	01000744 	movi	r4,29
    eaec:	19000226 	beq	r3,r4,eaf8 <_fflush_r+0x1d8>
    eaf0:	01000584 	movi	r4,22
    eaf4:	1900101e 	bne	r3,r4,eb38 <_fflush_r+0x218>
    eaf8:	8080030b 	ldhu	r2,12(r16)
    eafc:	80c00417 	ldw	r3,16(r16)
    eb00:	80000115 	stw	zero,4(r16)
    eb04:	10bdffcc 	andi	r2,r2,63487
    eb08:	8080030d 	sth	r2,12(r16)
    eb0c:	80c00015 	stw	r3,0(r16)
    eb10:	003fb706 	br	e9f0 <__alt_mem_descriptor_memory+0xdefce9f0>
    eb14:	98800017 	ldw	r2,0(r19)
    eb18:	103feb26 	beq	r2,zero,eac8 <__alt_mem_descriptor_memory+0xdefceac8>
    eb1c:	00c00744 	movi	r3,29
    eb20:	10c00226 	beq	r2,r3,eb2c <_fflush_r+0x20c>
    eb24:	00c00584 	movi	r3,22
    eb28:	10ffd61e 	bne	r2,r3,ea84 <__alt_mem_descriptor_memory+0xdefcea84>
    eb2c:	9c400015 	stw	r17,0(r19)
    eb30:	0005883a 	mov	r2,zero
    eb34:	003fb706 	br	ea14 <__alt_mem_descriptor_memory+0xdefcea14>
    eb38:	80c0030b 	ldhu	r3,12(r16)
    eb3c:	18c01014 	ori	r3,r3,64
    eb40:	80c0030d 	sth	r3,12(r16)
    eb44:	003fb306 	br	ea14 <__alt_mem_descriptor_memory+0xdefcea14>

0000eb48 <fflush>:
    eb48:	20000526 	beq	r4,zero,eb60 <fflush+0x18>
    eb4c:	00800174 	movhi	r2,5
    eb50:	10872d04 	addi	r2,r2,7348
    eb54:	200b883a 	mov	r5,r4
    eb58:	11000017 	ldw	r4,0(r2)
    eb5c:	000e9201 	jmpi	e920 <_fflush_r>
    eb60:	00800174 	movhi	r2,5
    eb64:	10872c04 	addi	r2,r2,7344
    eb68:	11000017 	ldw	r4,0(r2)
    eb6c:	01400074 	movhi	r5,1
    eb70:	297a4804 	addi	r5,r5,-5856
    eb74:	000f9dc1 	jmpi	f9dc <_fwalk_reent>

0000eb78 <__fp_lock>:
    eb78:	0005883a 	mov	r2,zero
    eb7c:	f800283a 	ret

0000eb80 <__fp_unlock>:
    eb80:	0005883a 	mov	r2,zero
    eb84:	f800283a 	ret

0000eb88 <_cleanup_r>:
    eb88:	01400074 	movhi	r5,1
    eb8c:	29502404 	addi	r5,r5,16528
    eb90:	000f9241 	jmpi	f924 <_fwalk>

0000eb94 <__sinit.part.1>:
    eb94:	defff604 	addi	sp,sp,-40
    eb98:	00c00074 	movhi	r3,1
    eb9c:	dfc00915 	stw	ra,36(sp)
    eba0:	df000815 	stw	fp,32(sp)
    eba4:	ddc00715 	stw	r23,28(sp)
    eba8:	dd800615 	stw	r22,24(sp)
    ebac:	dd400515 	stw	r21,20(sp)
    ebb0:	dd000415 	stw	r20,16(sp)
    ebb4:	dcc00315 	stw	r19,12(sp)
    ebb8:	dc800215 	stw	r18,8(sp)
    ebbc:	dc400115 	stw	r17,4(sp)
    ebc0:	dc000015 	stw	r16,0(sp)
    ebc4:	18fae204 	addi	r3,r3,-5240
    ebc8:	24000117 	ldw	r16,4(r4)
    ebcc:	20c00f15 	stw	r3,60(r4)
    ebd0:	07000044 	movi	fp,1
    ebd4:	00c000c4 	movi	r3,3
    ebd8:	2080bb04 	addi	r2,r4,748
    ebdc:	20c0b915 	stw	r3,740(r4)
    ebe0:	27000e15 	stw	fp,56(r4)
    ebe4:	2080ba15 	stw	r2,744(r4)
    ebe8:	2000b815 	stw	zero,736(r4)
    ebec:	05c00204 	movi	r23,8
    ebf0:	00800104 	movi	r2,4
    ebf4:	2025883a 	mov	r18,r4
    ebf8:	b80d883a 	mov	r6,r23
    ebfc:	81001704 	addi	r4,r16,92
    ec00:	000b883a 	mov	r5,zero
    ec04:	80000015 	stw	zero,0(r16)
    ec08:	80000115 	stw	zero,4(r16)
    ec0c:	80000215 	stw	zero,8(r16)
    ec10:	8080030d 	sth	r2,12(r16)
    ec14:	80001915 	stw	zero,100(r16)
    ec18:	8000038d 	sth	zero,14(r16)
    ec1c:	80000415 	stw	zero,16(r16)
    ec20:	80000515 	stw	zero,20(r16)
    ec24:	80000615 	stw	zero,24(r16)
    ec28:	0007f240 	call	7f24 <memset>
    ec2c:	05800074 	movhi	r22,1
    ec30:	94400217 	ldw	r17,8(r18)
    ec34:	05400074 	movhi	r21,1
    ec38:	05000074 	movhi	r20,1
    ec3c:	04c00074 	movhi	r19,1
    ec40:	b5855e04 	addi	r22,r22,5496
    ec44:	ad457504 	addi	r21,r21,5588
    ec48:	a5059404 	addi	r20,r20,5712
    ec4c:	9cc5ab04 	addi	r19,r19,5804
    ec50:	85800815 	stw	r22,32(r16)
    ec54:	85400915 	stw	r21,36(r16)
    ec58:	85000a15 	stw	r20,40(r16)
    ec5c:	84c00b15 	stw	r19,44(r16)
    ec60:	84000715 	stw	r16,28(r16)
    ec64:	00800284 	movi	r2,10
    ec68:	89001704 	addi	r4,r17,92
    ec6c:	b80d883a 	mov	r6,r23
    ec70:	000b883a 	mov	r5,zero
    ec74:	88000015 	stw	zero,0(r17)
    ec78:	88000115 	stw	zero,4(r17)
    ec7c:	88000215 	stw	zero,8(r17)
    ec80:	8880030d 	sth	r2,12(r17)
    ec84:	88001915 	stw	zero,100(r17)
    ec88:	8f00038d 	sth	fp,14(r17)
    ec8c:	88000415 	stw	zero,16(r17)
    ec90:	88000515 	stw	zero,20(r17)
    ec94:	88000615 	stw	zero,24(r17)
    ec98:	0007f240 	call	7f24 <memset>
    ec9c:	94000317 	ldw	r16,12(r18)
    eca0:	00800484 	movi	r2,18
    eca4:	8c400715 	stw	r17,28(r17)
    eca8:	8d800815 	stw	r22,32(r17)
    ecac:	8d400915 	stw	r21,36(r17)
    ecb0:	8d000a15 	stw	r20,40(r17)
    ecb4:	8cc00b15 	stw	r19,44(r17)
    ecb8:	8080030d 	sth	r2,12(r16)
    ecbc:	00800084 	movi	r2,2
    ecc0:	80000015 	stw	zero,0(r16)
    ecc4:	80000115 	stw	zero,4(r16)
    ecc8:	80000215 	stw	zero,8(r16)
    eccc:	80001915 	stw	zero,100(r16)
    ecd0:	8080038d 	sth	r2,14(r16)
    ecd4:	80000415 	stw	zero,16(r16)
    ecd8:	80000515 	stw	zero,20(r16)
    ecdc:	80000615 	stw	zero,24(r16)
    ece0:	81001704 	addi	r4,r16,92
    ece4:	000b883a 	mov	r5,zero
    ece8:	b80d883a 	mov	r6,r23
    ecec:	0007f240 	call	7f24 <memset>
    ecf0:	84000715 	stw	r16,28(r16)
    ecf4:	85800815 	stw	r22,32(r16)
    ecf8:	85400915 	stw	r21,36(r16)
    ecfc:	85000a15 	stw	r20,40(r16)
    ed00:	84c00b15 	stw	r19,44(r16)
    ed04:	dfc00917 	ldw	ra,36(sp)
    ed08:	df000817 	ldw	fp,32(sp)
    ed0c:	ddc00717 	ldw	r23,28(sp)
    ed10:	dd800617 	ldw	r22,24(sp)
    ed14:	dd400517 	ldw	r21,20(sp)
    ed18:	dd000417 	ldw	r20,16(sp)
    ed1c:	dcc00317 	ldw	r19,12(sp)
    ed20:	dc800217 	ldw	r18,8(sp)
    ed24:	dc400117 	ldw	r17,4(sp)
    ed28:	dc000017 	ldw	r16,0(sp)
    ed2c:	dec00a04 	addi	sp,sp,40
    ed30:	f800283a 	ret

0000ed34 <__sfmoreglue>:
    ed34:	defffc04 	addi	sp,sp,-16
    ed38:	dc400115 	stw	r17,4(sp)
    ed3c:	2c401a24 	muli	r17,r5,104
    ed40:	dc800215 	stw	r18,8(sp)
    ed44:	2825883a 	mov	r18,r5
    ed48:	89400304 	addi	r5,r17,12
    ed4c:	dc000015 	stw	r16,0(sp)
    ed50:	dfc00315 	stw	ra,12(sp)
    ed54:	00074e80 	call	74e8 <_malloc_r>
    ed58:	1021883a 	mov	r16,r2
    ed5c:	10000726 	beq	r2,zero,ed7c <__sfmoreglue+0x48>
    ed60:	11000304 	addi	r4,r2,12
    ed64:	10000015 	stw	zero,0(r2)
    ed68:	14800115 	stw	r18,4(r2)
    ed6c:	11000215 	stw	r4,8(r2)
    ed70:	000b883a 	mov	r5,zero
    ed74:	880d883a 	mov	r6,r17
    ed78:	0007f240 	call	7f24 <memset>
    ed7c:	8005883a 	mov	r2,r16
    ed80:	dfc00317 	ldw	ra,12(sp)
    ed84:	dc800217 	ldw	r18,8(sp)
    ed88:	dc400117 	ldw	r17,4(sp)
    ed8c:	dc000017 	ldw	r16,0(sp)
    ed90:	dec00404 	addi	sp,sp,16
    ed94:	f800283a 	ret

0000ed98 <__sfp>:
    ed98:	00800174 	movhi	r2,5
    ed9c:	defffb04 	addi	sp,sp,-20
    eda0:	10872c04 	addi	r2,r2,7344
    eda4:	dc800215 	stw	r18,8(sp)
    eda8:	14800017 	ldw	r18,0(r2)
    edac:	dcc00315 	stw	r19,12(sp)
    edb0:	dfc00415 	stw	ra,16(sp)
    edb4:	90800e17 	ldw	r2,56(r18)
    edb8:	dc400115 	stw	r17,4(sp)
    edbc:	dc000015 	stw	r16,0(sp)
    edc0:	2027883a 	mov	r19,r4
    edc4:	1000021e 	bne	r2,zero,edd0 <__sfp+0x38>
    edc8:	9009883a 	mov	r4,r18
    edcc:	000eb940 	call	eb94 <__sinit.part.1>
    edd0:	9480b804 	addi	r18,r18,736
    edd4:	047fffc4 	movi	r17,-1
    edd8:	91400117 	ldw	r5,4(r18)
    eddc:	94000217 	ldw	r16,8(r18)
    ede0:	297fffc4 	addi	r5,r5,-1
    ede4:	28000a16 	blt	r5,zero,ee10 <__sfp+0x78>
    ede8:	8080030f 	ldh	r2,12(r16)
    edec:	10000c26 	beq	r2,zero,ee20 <__sfp+0x88>
    edf0:	80c01d04 	addi	r3,r16,116
    edf4:	00000206 	br	ee00 <__sfp+0x68>
    edf8:	18bfe60f 	ldh	r2,-104(r3)
    edfc:	10000826 	beq	r2,zero,ee20 <__sfp+0x88>
    ee00:	297fffc4 	addi	r5,r5,-1
    ee04:	1c3ffd04 	addi	r16,r3,-12
    ee08:	18c01a04 	addi	r3,r3,104
    ee0c:	2c7ffa1e 	bne	r5,r17,edf8 <__alt_mem_descriptor_memory+0xdefcedf8>
    ee10:	90800017 	ldw	r2,0(r18)
    ee14:	10001d26 	beq	r2,zero,ee8c <__sfp+0xf4>
    ee18:	1025883a 	mov	r18,r2
    ee1c:	003fee06 	br	edd8 <__alt_mem_descriptor_memory+0xdefcedd8>
    ee20:	00bfffc4 	movi	r2,-1
    ee24:	8080038d 	sth	r2,14(r16)
    ee28:	00800044 	movi	r2,1
    ee2c:	8080030d 	sth	r2,12(r16)
    ee30:	80001915 	stw	zero,100(r16)
    ee34:	80000015 	stw	zero,0(r16)
    ee38:	80000215 	stw	zero,8(r16)
    ee3c:	80000115 	stw	zero,4(r16)
    ee40:	80000415 	stw	zero,16(r16)
    ee44:	80000515 	stw	zero,20(r16)
    ee48:	80000615 	stw	zero,24(r16)
    ee4c:	81001704 	addi	r4,r16,92
    ee50:	000b883a 	mov	r5,zero
    ee54:	01800204 	movi	r6,8
    ee58:	0007f240 	call	7f24 <memset>
    ee5c:	8005883a 	mov	r2,r16
    ee60:	80000c15 	stw	zero,48(r16)
    ee64:	80000d15 	stw	zero,52(r16)
    ee68:	80001115 	stw	zero,68(r16)
    ee6c:	80001215 	stw	zero,72(r16)
    ee70:	dfc00417 	ldw	ra,16(sp)
    ee74:	dcc00317 	ldw	r19,12(sp)
    ee78:	dc800217 	ldw	r18,8(sp)
    ee7c:	dc400117 	ldw	r17,4(sp)
    ee80:	dc000017 	ldw	r16,0(sp)
    ee84:	dec00504 	addi	sp,sp,20
    ee88:	f800283a 	ret
    ee8c:	9809883a 	mov	r4,r19
    ee90:	01400104 	movi	r5,4
    ee94:	000ed340 	call	ed34 <__sfmoreglue>
    ee98:	90800015 	stw	r2,0(r18)
    ee9c:	103fde1e 	bne	r2,zero,ee18 <__alt_mem_descriptor_memory+0xdefcee18>
    eea0:	00800304 	movi	r2,12
    eea4:	98800015 	stw	r2,0(r19)
    eea8:	0005883a 	mov	r2,zero
    eeac:	003ff006 	br	ee70 <__alt_mem_descriptor_memory+0xdefcee70>

0000eeb0 <_cleanup>:
    eeb0:	00800174 	movhi	r2,5
    eeb4:	10872c04 	addi	r2,r2,7344
    eeb8:	11000017 	ldw	r4,0(r2)
    eebc:	01400074 	movhi	r5,1
    eec0:	29502404 	addi	r5,r5,16528
    eec4:	000f9241 	jmpi	f924 <_fwalk>

0000eec8 <__sinit>:
    eec8:	20800e17 	ldw	r2,56(r4)
    eecc:	10000126 	beq	r2,zero,eed4 <__sinit+0xc>
    eed0:	f800283a 	ret
    eed4:	000eb941 	jmpi	eb94 <__sinit.part.1>

0000eed8 <__sfp_lock_acquire>:
    eed8:	f800283a 	ret

0000eedc <__sfp_lock_release>:
    eedc:	f800283a 	ret

0000eee0 <__sinit_lock_acquire>:
    eee0:	f800283a 	ret

0000eee4 <__sinit_lock_release>:
    eee4:	f800283a 	ret

0000eee8 <__fp_lock_all>:
    eee8:	00800174 	movhi	r2,5
    eeec:	10872d04 	addi	r2,r2,7348
    eef0:	11000017 	ldw	r4,0(r2)
    eef4:	01400074 	movhi	r5,1
    eef8:	297ade04 	addi	r5,r5,-5256
    eefc:	000f9241 	jmpi	f924 <_fwalk>

0000ef00 <__fp_unlock_all>:
    ef00:	00800174 	movhi	r2,5
    ef04:	10872d04 	addi	r2,r2,7348
    ef08:	11000017 	ldw	r4,0(r2)
    ef0c:	01400074 	movhi	r5,1
    ef10:	297ae004 	addi	r5,r5,-5248
    ef14:	000f9241 	jmpi	f924 <_fwalk>

0000ef18 <_fputc_r>:
    ef18:	defffc04 	addi	sp,sp,-16
    ef1c:	dc000215 	stw	r16,8(sp)
    ef20:	dfc00315 	stw	ra,12(sp)
    ef24:	2021883a 	mov	r16,r4
    ef28:	20000726 	beq	r4,zero,ef48 <_fputc_r+0x30>
    ef2c:	20800e17 	ldw	r2,56(r4)
    ef30:	1000051e 	bne	r2,zero,ef48 <_fputc_r+0x30>
    ef34:	d9400015 	stw	r5,0(sp)
    ef38:	d9800115 	stw	r6,4(sp)
    ef3c:	000eec80 	call	eec8 <__sinit>
    ef40:	d9800117 	ldw	r6,4(sp)
    ef44:	d9400017 	ldw	r5,0(sp)
    ef48:	8009883a 	mov	r4,r16
    ef4c:	dfc00317 	ldw	ra,12(sp)
    ef50:	dc000217 	ldw	r16,8(sp)
    ef54:	dec00404 	addi	sp,sp,16
    ef58:	00081341 	jmpi	8134 <_putc_r>

0000ef5c <fputc>:
    ef5c:	defffc04 	addi	sp,sp,-16
    ef60:	dc000115 	stw	r16,4(sp)
    ef64:	04000174 	movhi	r16,5
    ef68:	84072d04 	addi	r16,r16,7348
    ef6c:	dc400215 	stw	r17,8(sp)
    ef70:	2023883a 	mov	r17,r4
    ef74:	81000017 	ldw	r4,0(r16)
    ef78:	dfc00315 	stw	ra,12(sp)
    ef7c:	280d883a 	mov	r6,r5
    ef80:	20000626 	beq	r4,zero,ef9c <fputc+0x40>
    ef84:	20800e17 	ldw	r2,56(r4)
    ef88:	1000041e 	bne	r2,zero,ef9c <fputc+0x40>
    ef8c:	d9400015 	stw	r5,0(sp)
    ef90:	000eec80 	call	eec8 <__sinit>
    ef94:	81000017 	ldw	r4,0(r16)
    ef98:	d9800017 	ldw	r6,0(sp)
    ef9c:	880b883a 	mov	r5,r17
    efa0:	dfc00317 	ldw	ra,12(sp)
    efa4:	dc400217 	ldw	r17,8(sp)
    efa8:	dc000117 	ldw	r16,4(sp)
    efac:	dec00404 	addi	sp,sp,16
    efb0:	00081341 	jmpi	8134 <_putc_r>

0000efb4 <_fputs_r>:
    efb4:	defff804 	addi	sp,sp,-32
    efb8:	dc400615 	stw	r17,24(sp)
    efbc:	2023883a 	mov	r17,r4
    efc0:	2809883a 	mov	r4,r5
    efc4:	dc000515 	stw	r16,20(sp)
    efc8:	dfc00715 	stw	ra,28(sp)
    efcc:	3021883a 	mov	r16,r6
    efd0:	d9400315 	stw	r5,12(sp)
    efd4:	0008d080 	call	8d08 <strlen>
    efd8:	d8800215 	stw	r2,8(sp)
    efdc:	d8800415 	stw	r2,16(sp)
    efe0:	d8800304 	addi	r2,sp,12
    efe4:	d8800015 	stw	r2,0(sp)
    efe8:	00800044 	movi	r2,1
    efec:	d8800115 	stw	r2,4(sp)
    eff0:	88000226 	beq	r17,zero,effc <_fputs_r+0x48>
    eff4:	88800e17 	ldw	r2,56(r17)
    eff8:	10001226 	beq	r2,zero,f044 <_fputs_r+0x90>
    effc:	8080030b 	ldhu	r2,12(r16)
    f000:	10c8000c 	andi	r3,r2,8192
    f004:	1800061e 	bne	r3,zero,f020 <_fputs_r+0x6c>
    f008:	81001917 	ldw	r4,100(r16)
    f00c:	00f7ffc4 	movi	r3,-8193
    f010:	10880014 	ori	r2,r2,8192
    f014:	20c6703a 	and	r3,r4,r3
    f018:	8080030d 	sth	r2,12(r16)
    f01c:	80c01915 	stw	r3,100(r16)
    f020:	8809883a 	mov	r4,r17
    f024:	800b883a 	mov	r5,r16
    f028:	d80d883a 	mov	r6,sp
    f02c:	000f4800 	call	f480 <__sfvwrite_r>
    f030:	dfc00717 	ldw	ra,28(sp)
    f034:	dc400617 	ldw	r17,24(sp)
    f038:	dc000517 	ldw	r16,20(sp)
    f03c:	dec00804 	addi	sp,sp,32
    f040:	f800283a 	ret
    f044:	8809883a 	mov	r4,r17
    f048:	000eec80 	call	eec8 <__sinit>
    f04c:	003feb06 	br	effc <__alt_mem_descriptor_memory+0xdefceffc>

0000f050 <fputs>:
    f050:	00c00174 	movhi	r3,5
    f054:	18c72d04 	addi	r3,r3,7348
    f058:	2005883a 	mov	r2,r4
    f05c:	19000017 	ldw	r4,0(r3)
    f060:	280d883a 	mov	r6,r5
    f064:	100b883a 	mov	r5,r2
    f068:	000efb41 	jmpi	efb4 <_fputs_r>

0000f06c <_malloc_trim_r>:
    f06c:	defffb04 	addi	sp,sp,-20
    f070:	dcc00315 	stw	r19,12(sp)
    f074:	04c00174 	movhi	r19,5
    f078:	dc800215 	stw	r18,8(sp)
    f07c:	dc400115 	stw	r17,4(sp)
    f080:	dc000015 	stw	r16,0(sp)
    f084:	dfc00415 	stw	ra,16(sp)
    f088:	2821883a 	mov	r16,r5
    f08c:	9cc0e504 	addi	r19,r19,916
    f090:	2025883a 	mov	r18,r4
    f094:	00180200 	call	18020 <__malloc_lock>
    f098:	98800217 	ldw	r2,8(r19)
    f09c:	14400117 	ldw	r17,4(r2)
    f0a0:	00bfff04 	movi	r2,-4
    f0a4:	88a2703a 	and	r17,r17,r2
    f0a8:	8c21c83a 	sub	r16,r17,r16
    f0ac:	8403fbc4 	addi	r16,r16,4079
    f0b0:	8020d33a 	srli	r16,r16,12
    f0b4:	0083ffc4 	movi	r2,4095
    f0b8:	843fffc4 	addi	r16,r16,-1
    f0bc:	8020933a 	slli	r16,r16,12
    f0c0:	1400060e 	bge	r2,r16,f0dc <_malloc_trim_r+0x70>
    f0c4:	9009883a 	mov	r4,r18
    f0c8:	000b883a 	mov	r5,zero
    f0cc:	00084100 	call	8410 <_sbrk_r>
    f0d0:	98c00217 	ldw	r3,8(r19)
    f0d4:	1c47883a 	add	r3,r3,r17
    f0d8:	10c00a26 	beq	r2,r3,f104 <_malloc_trim_r+0x98>
    f0dc:	9009883a 	mov	r4,r18
    f0e0:	00181400 	call	18140 <__malloc_unlock>
    f0e4:	0005883a 	mov	r2,zero
    f0e8:	dfc00417 	ldw	ra,16(sp)
    f0ec:	dcc00317 	ldw	r19,12(sp)
    f0f0:	dc800217 	ldw	r18,8(sp)
    f0f4:	dc400117 	ldw	r17,4(sp)
    f0f8:	dc000017 	ldw	r16,0(sp)
    f0fc:	dec00504 	addi	sp,sp,20
    f100:	f800283a 	ret
    f104:	9009883a 	mov	r4,r18
    f108:	040bc83a 	sub	r5,zero,r16
    f10c:	00084100 	call	8410 <_sbrk_r>
    f110:	00ffffc4 	movi	r3,-1
    f114:	10c00d26 	beq	r2,r3,f14c <_malloc_trim_r+0xe0>
    f118:	00c00174 	movhi	r3,5
    f11c:	18d17004 	addi	r3,r3,17856
    f120:	18800017 	ldw	r2,0(r3)
    f124:	99000217 	ldw	r4,8(r19)
    f128:	8c23c83a 	sub	r17,r17,r16
    f12c:	8c400054 	ori	r17,r17,1
    f130:	1421c83a 	sub	r16,r2,r16
    f134:	24400115 	stw	r17,4(r4)
    f138:	9009883a 	mov	r4,r18
    f13c:	1c000015 	stw	r16,0(r3)
    f140:	00181400 	call	18140 <__malloc_unlock>
    f144:	00800044 	movi	r2,1
    f148:	003fe706 	br	f0e8 <__alt_mem_descriptor_memory+0xdefcf0e8>
    f14c:	9009883a 	mov	r4,r18
    f150:	000b883a 	mov	r5,zero
    f154:	00084100 	call	8410 <_sbrk_r>
    f158:	99000217 	ldw	r4,8(r19)
    f15c:	014003c4 	movi	r5,15
    f160:	1107c83a 	sub	r3,r2,r4
    f164:	28ffdd0e 	bge	r5,r3,f0dc <__alt_mem_descriptor_memory+0xdefcf0dc>
    f168:	01400174 	movhi	r5,5
    f16c:	29472e04 	addi	r5,r5,7352
    f170:	29400017 	ldw	r5,0(r5)
    f174:	18c00054 	ori	r3,r3,1
    f178:	20c00115 	stw	r3,4(r4)
    f17c:	00c00174 	movhi	r3,5
    f180:	1145c83a 	sub	r2,r2,r5
    f184:	18d17004 	addi	r3,r3,17856
    f188:	18800015 	stw	r2,0(r3)
    f18c:	003fd306 	br	f0dc <__alt_mem_descriptor_memory+0xdefcf0dc>

0000f190 <_free_r>:
    f190:	28004c26 	beq	r5,zero,f2c4 <_free_r+0x134>
    f194:	defffd04 	addi	sp,sp,-12
    f198:	dc400115 	stw	r17,4(sp)
    f19c:	dc000015 	stw	r16,0(sp)
    f1a0:	2023883a 	mov	r17,r4
    f1a4:	2821883a 	mov	r16,r5
    f1a8:	dfc00215 	stw	ra,8(sp)
    f1ac:	00180200 	call	18020 <__malloc_lock>
    f1b0:	813fff17 	ldw	r4,-4(r16)
    f1b4:	00bfff84 	movi	r2,-2
    f1b8:	02400174 	movhi	r9,5
    f1bc:	81bffe04 	addi	r6,r16,-8
    f1c0:	2084703a 	and	r2,r4,r2
    f1c4:	4a40e504 	addi	r9,r9,916
    f1c8:	308b883a 	add	r5,r6,r2
    f1cc:	2a000117 	ldw	r8,4(r5)
    f1d0:	49c00217 	ldw	r7,8(r9)
    f1d4:	00ffff04 	movi	r3,-4
    f1d8:	40c6703a 	and	r3,r8,r3
    f1dc:	39405326 	beq	r7,r5,f32c <_free_r+0x19c>
    f1e0:	28c00115 	stw	r3,4(r5)
    f1e4:	2100004c 	andi	r4,r4,1
    f1e8:	2000091e 	bne	r4,zero,f210 <_free_r+0x80>
    f1ec:	81fffe17 	ldw	r7,-8(r16)
    f1f0:	4a000204 	addi	r8,r9,8
    f1f4:	31cdc83a 	sub	r6,r6,r7
    f1f8:	31000217 	ldw	r4,8(r6)
    f1fc:	11c5883a 	add	r2,r2,r7
    f200:	22006126 	beq	r4,r8,f388 <_free_r+0x1f8>
    f204:	31c00317 	ldw	r7,12(r6)
    f208:	21c00315 	stw	r7,12(r4)
    f20c:	39000215 	stw	r4,8(r7)
    f210:	28c9883a 	add	r4,r5,r3
    f214:	21c00117 	ldw	r7,4(r4)
    f218:	39c0004c 	andi	r7,r7,1
    f21c:	38000d1e 	bne	r7,zero,f254 <_free_r+0xc4>
    f220:	29000217 	ldw	r4,8(r5)
    f224:	10c5883a 	add	r2,r2,r3
    f228:	00c00174 	movhi	r3,5
    f22c:	18c0e704 	addi	r3,r3,924
    f230:	20c07526 	beq	r4,r3,f408 <_free_r+0x278>
    f234:	29c00317 	ldw	r7,12(r5)
    f238:	11400054 	ori	r5,r2,1
    f23c:	3087883a 	add	r3,r6,r2
    f240:	21c00315 	stw	r7,12(r4)
    f244:	39000215 	stw	r4,8(r7)
    f248:	31400115 	stw	r5,4(r6)
    f24c:	18800015 	stw	r2,0(r3)
    f250:	00000406 	br	f264 <_free_r+0xd4>
    f254:	10c00054 	ori	r3,r2,1
    f258:	30c00115 	stw	r3,4(r6)
    f25c:	3087883a 	add	r3,r6,r2
    f260:	18800015 	stw	r2,0(r3)
    f264:	00c07fc4 	movi	r3,511
    f268:	18801736 	bltu	r3,r2,f2c8 <_free_r+0x138>
    f26c:	1004d0fa 	srli	r2,r2,3
    f270:	01400044 	movi	r5,1
    f274:	49000117 	ldw	r4,4(r9)
    f278:	1087883a 	add	r3,r2,r2
    f27c:	18c7883a 	add	r3,r3,r3
    f280:	1005d0ba 	srai	r2,r2,2
    f284:	18c7883a 	add	r3,r3,r3
    f288:	1a47883a 	add	r3,r3,r9
    f28c:	19c00217 	ldw	r7,8(r3)
    f290:	2884983a 	sll	r2,r5,r2
    f294:	30c00315 	stw	r3,12(r6)
    f298:	31c00215 	stw	r7,8(r6)
    f29c:	1104b03a 	or	r2,r2,r4
    f2a0:	19800215 	stw	r6,8(r3)
    f2a4:	48800115 	stw	r2,4(r9)
    f2a8:	39800315 	stw	r6,12(r7)
    f2ac:	8809883a 	mov	r4,r17
    f2b0:	dfc00217 	ldw	ra,8(sp)
    f2b4:	dc400117 	ldw	r17,4(sp)
    f2b8:	dc000017 	ldw	r16,0(sp)
    f2bc:	dec00304 	addi	sp,sp,12
    f2c0:	00181401 	jmpi	18140 <__malloc_unlock>
    f2c4:	f800283a 	ret
    f2c8:	1006d27a 	srli	r3,r2,9
    f2cc:	01000104 	movi	r4,4
    f2d0:	20c04036 	bltu	r4,r3,f3d4 <_free_r+0x244>
    f2d4:	1006d1ba 	srli	r3,r2,6
    f2d8:	19400e04 	addi	r5,r3,56
    f2dc:	2947883a 	add	r3,r5,r5
    f2e0:	18c7883a 	add	r3,r3,r3
    f2e4:	18c7883a 	add	r3,r3,r3
    f2e8:	1a49883a 	add	r4,r3,r9
    f2ec:	20c00217 	ldw	r3,8(r4)
    f2f0:	01c00174 	movhi	r7,5
    f2f4:	39c0e504 	addi	r7,r7,916
    f2f8:	19003b26 	beq	r3,r4,f3e8 <_free_r+0x258>
    f2fc:	01ffff04 	movi	r7,-4
    f300:	19400117 	ldw	r5,4(r3)
    f304:	29ca703a 	and	r5,r5,r7
    f308:	1140022e 	bgeu	r2,r5,f314 <_free_r+0x184>
    f30c:	18c00217 	ldw	r3,8(r3)
    f310:	20fffb1e 	bne	r4,r3,f300 <__alt_mem_descriptor_memory+0xdefcf300>
    f314:	18800317 	ldw	r2,12(r3)
    f318:	30800315 	stw	r2,12(r6)
    f31c:	30c00215 	stw	r3,8(r6)
    f320:	11800215 	stw	r6,8(r2)
    f324:	19800315 	stw	r6,12(r3)
    f328:	003fe006 	br	f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f32c:	2100004c 	andi	r4,r4,1
    f330:	1885883a 	add	r2,r3,r2
    f334:	2000071e 	bne	r4,zero,f354 <_free_r+0x1c4>
    f338:	817ffe17 	ldw	r5,-8(r16)
    f33c:	314dc83a 	sub	r6,r6,r5
    f340:	30c00317 	ldw	r3,12(r6)
    f344:	31000217 	ldw	r4,8(r6)
    f348:	1145883a 	add	r2,r2,r5
    f34c:	20c00315 	stw	r3,12(r4)
    f350:	19000215 	stw	r4,8(r3)
    f354:	10c00054 	ori	r3,r2,1
    f358:	30c00115 	stw	r3,4(r6)
    f35c:	00c00174 	movhi	r3,5
    f360:	18c72f04 	addi	r3,r3,7356
    f364:	18c00017 	ldw	r3,0(r3)
    f368:	49800215 	stw	r6,8(r9)
    f36c:	10ffcf36 	bltu	r2,r3,f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f370:	00800174 	movhi	r2,5
    f374:	108f7604 	addi	r2,r2,15832
    f378:	11400017 	ldw	r5,0(r2)
    f37c:	8809883a 	mov	r4,r17
    f380:	000f06c0 	call	f06c <_malloc_trim_r>
    f384:	003fc906 	br	f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f388:	28c9883a 	add	r4,r5,r3
    f38c:	21000117 	ldw	r4,4(r4)
    f390:	2100004c 	andi	r4,r4,1
    f394:	20000a1e 	bne	r4,zero,f3c0 <_free_r+0x230>
    f398:	29000317 	ldw	r4,12(r5)
    f39c:	29400217 	ldw	r5,8(r5)
    f3a0:	10c5883a 	add	r2,r2,r3
    f3a4:	10c00054 	ori	r3,r2,1
    f3a8:	29000315 	stw	r4,12(r5)
    f3ac:	21400215 	stw	r5,8(r4)
    f3b0:	30c00115 	stw	r3,4(r6)
    f3b4:	308d883a 	add	r6,r6,r2
    f3b8:	30800015 	stw	r2,0(r6)
    f3bc:	003fbb06 	br	f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f3c0:	10c00054 	ori	r3,r2,1
    f3c4:	30c00115 	stw	r3,4(r6)
    f3c8:	308d883a 	add	r6,r6,r2
    f3cc:	30800015 	stw	r2,0(r6)
    f3d0:	003fb606 	br	f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f3d4:	01000504 	movi	r4,20
    f3d8:	20c01436 	bltu	r4,r3,f42c <_free_r+0x29c>
    f3dc:	194016c4 	addi	r5,r3,91
    f3e0:	2947883a 	add	r3,r5,r5
    f3e4:	003fbe06 	br	f2e0 <__alt_mem_descriptor_memory+0xdefcf2e0>
    f3e8:	280bd0ba 	srai	r5,r5,2
    f3ec:	00800044 	movi	r2,1
    f3f0:	39000117 	ldw	r4,4(r7)
    f3f4:	114a983a 	sll	r5,r2,r5
    f3f8:	1805883a 	mov	r2,r3
    f3fc:	2908b03a 	or	r4,r5,r4
    f400:	39000115 	stw	r4,4(r7)
    f404:	003fc406 	br	f318 <__alt_mem_descriptor_memory+0xdefcf318>
    f408:	49800515 	stw	r6,20(r9)
    f40c:	49800415 	stw	r6,16(r9)
    f410:	10c00054 	ori	r3,r2,1
    f414:	31000315 	stw	r4,12(r6)
    f418:	31000215 	stw	r4,8(r6)
    f41c:	30c00115 	stw	r3,4(r6)
    f420:	308d883a 	add	r6,r6,r2
    f424:	30800015 	stw	r2,0(r6)
    f428:	003fa006 	br	f2ac <__alt_mem_descriptor_memory+0xdefcf2ac>
    f42c:	01001504 	movi	r4,84
    f430:	20c00436 	bltu	r4,r3,f444 <_free_r+0x2b4>
    f434:	1006d33a 	srli	r3,r2,12
    f438:	19401b84 	addi	r5,r3,110
    f43c:	2947883a 	add	r3,r5,r5
    f440:	003fa706 	br	f2e0 <__alt_mem_descriptor_memory+0xdefcf2e0>
    f444:	01005504 	movi	r4,340
    f448:	20c00436 	bltu	r4,r3,f45c <_free_r+0x2cc>
    f44c:	1006d3fa 	srli	r3,r2,15
    f450:	19401dc4 	addi	r5,r3,119
    f454:	2947883a 	add	r3,r5,r5
    f458:	003fa106 	br	f2e0 <__alt_mem_descriptor_memory+0xdefcf2e0>
    f45c:	01015504 	movi	r4,1364
    f460:	20c00436 	bltu	r4,r3,f474 <_free_r+0x2e4>
    f464:	1006d4ba 	srli	r3,r2,18
    f468:	19401f04 	addi	r5,r3,124
    f46c:	2947883a 	add	r3,r5,r5
    f470:	003f9b06 	br	f2e0 <__alt_mem_descriptor_memory+0xdefcf2e0>
    f474:	00c03f04 	movi	r3,252
    f478:	01401f84 	movi	r5,126
    f47c:	003f9806 	br	f2e0 <__alt_mem_descriptor_memory+0xdefcf2e0>

0000f480 <__sfvwrite_r>:
    f480:	30800217 	ldw	r2,8(r6)
    f484:	10004526 	beq	r2,zero,f59c <__sfvwrite_r+0x11c>
    f488:	28c0030b 	ldhu	r3,12(r5)
    f48c:	defff404 	addi	sp,sp,-48
    f490:	dd400715 	stw	r21,28(sp)
    f494:	dcc00515 	stw	r19,20(sp)
    f498:	dc000215 	stw	r16,8(sp)
    f49c:	dfc00b15 	stw	ra,44(sp)
    f4a0:	df000a15 	stw	fp,40(sp)
    f4a4:	ddc00915 	stw	r23,36(sp)
    f4a8:	dd800815 	stw	r22,32(sp)
    f4ac:	dd000615 	stw	r20,24(sp)
    f4b0:	dc800415 	stw	r18,16(sp)
    f4b4:	dc400315 	stw	r17,12(sp)
    f4b8:	1880020c 	andi	r2,r3,8
    f4bc:	2821883a 	mov	r16,r5
    f4c0:	202b883a 	mov	r21,r4
    f4c4:	3027883a 	mov	r19,r6
    f4c8:	10002526 	beq	r2,zero,f560 <__sfvwrite_r+0xe0>
    f4cc:	28800417 	ldw	r2,16(r5)
    f4d0:	10002326 	beq	r2,zero,f560 <__sfvwrite_r+0xe0>
    f4d4:	1880008c 	andi	r2,r3,2
    f4d8:	9c400017 	ldw	r17,0(r19)
    f4dc:	10003126 	beq	r2,zero,f5a4 <__sfvwrite_r+0x124>
    f4e0:	0029883a 	mov	r20,zero
    f4e4:	0025883a 	mov	r18,zero
    f4e8:	05810004 	movi	r22,1024
    f4ec:	a00d883a 	mov	r6,r20
    f4f0:	a809883a 	mov	r4,r21
    f4f4:	90002526 	beq	r18,zero,f58c <__sfvwrite_r+0x10c>
    f4f8:	900f883a 	mov	r7,r18
    f4fc:	81400717 	ldw	r5,28(r16)
    f500:	b480012e 	bgeu	r22,r18,f508 <__sfvwrite_r+0x88>
    f504:	01c10004 	movi	r7,1024
    f508:	80800917 	ldw	r2,36(r16)
    f50c:	103ee83a 	callr	r2
    f510:	0080510e 	bge	zero,r2,f658 <__sfvwrite_r+0x1d8>
    f514:	98c00217 	ldw	r3,8(r19)
    f518:	a0a9883a 	add	r20,r20,r2
    f51c:	90a5c83a 	sub	r18,r18,r2
    f520:	1885c83a 	sub	r2,r3,r2
    f524:	98800215 	stw	r2,8(r19)
    f528:	103ff01e 	bne	r2,zero,f4ec <__alt_mem_descriptor_memory+0xdefcf4ec>
    f52c:	0005883a 	mov	r2,zero
    f530:	dfc00b17 	ldw	ra,44(sp)
    f534:	df000a17 	ldw	fp,40(sp)
    f538:	ddc00917 	ldw	r23,36(sp)
    f53c:	dd800817 	ldw	r22,32(sp)
    f540:	dd400717 	ldw	r21,28(sp)
    f544:	dd000617 	ldw	r20,24(sp)
    f548:	dcc00517 	ldw	r19,20(sp)
    f54c:	dc800417 	ldw	r18,16(sp)
    f550:	dc400317 	ldw	r17,12(sp)
    f554:	dc000217 	ldw	r16,8(sp)
    f558:	dec00c04 	addi	sp,sp,48
    f55c:	f800283a 	ret
    f560:	a809883a 	mov	r4,r21
    f564:	800b883a 	mov	r5,r16
    f568:	000cec80 	call	cec8 <__swsetup_r>
    f56c:	80c0030b 	ldhu	r3,12(r16)
    f570:	103fd826 	beq	r2,zero,f4d4 <__alt_mem_descriptor_memory+0xdefcf4d4>
    f574:	18c01014 	ori	r3,r3,64
    f578:	80c0030d 	sth	r3,12(r16)
    f57c:	00c00244 	movi	r3,9
    f580:	00bfffc4 	movi	r2,-1
    f584:	a8c00015 	stw	r3,0(r21)
    f588:	003fe906 	br	f530 <__alt_mem_descriptor_memory+0xdefcf530>
    f58c:	8d000017 	ldw	r20,0(r17)
    f590:	8c800117 	ldw	r18,4(r17)
    f594:	8c400204 	addi	r17,r17,8
    f598:	003fd406 	br	f4ec <__alt_mem_descriptor_memory+0xdefcf4ec>
    f59c:	0005883a 	mov	r2,zero
    f5a0:	f800283a 	ret
    f5a4:	1880004c 	andi	r2,r3,1
    f5a8:	1000301e 	bne	r2,zero,f66c <__sfvwrite_r+0x1ec>
    f5ac:	002f883a 	mov	r23,zero
    f5b0:	0025883a 	mov	r18,zero
    f5b4:	90001c26 	beq	r18,zero,f628 <__sfvwrite_r+0x1a8>
    f5b8:	1880800c 	andi	r2,r3,512
    f5bc:	85000217 	ldw	r20,8(r16)
    f5c0:	10006c26 	beq	r2,zero,f774 <__sfvwrite_r+0x2f4>
    f5c4:	a02d883a 	mov	r22,r20
    f5c8:	95008536 	bltu	r18,r20,f7e0 <__sfvwrite_r+0x360>
    f5cc:	1881200c 	andi	r2,r3,1152
    f5d0:	10009d1e 	bne	r2,zero,f848 <__sfvwrite_r+0x3c8>
    f5d4:	81000017 	ldw	r4,0(r16)
    f5d8:	a039883a 	mov	fp,r20
    f5dc:	9029883a 	mov	r20,r18
    f5e0:	b80b883a 	mov	r5,r23
    f5e4:	b00d883a 	mov	r6,r22
    f5e8:	0007dc80 	call	7dc8 <memmove>
    f5ec:	80c00217 	ldw	r3,8(r16)
    f5f0:	81000017 	ldw	r4,0(r16)
    f5f4:	9005883a 	mov	r2,r18
    f5f8:	1f39c83a 	sub	fp,r3,fp
    f5fc:	258f883a 	add	r7,r4,r22
    f600:	87000215 	stw	fp,8(r16)
    f604:	81c00015 	stw	r7,0(r16)
    f608:	98c00217 	ldw	r3,8(r19)
    f60c:	b8af883a 	add	r23,r23,r2
    f610:	90a5c83a 	sub	r18,r18,r2
    f614:	1d05c83a 	sub	r2,r3,r20
    f618:	98800215 	stw	r2,8(r19)
    f61c:	103fc326 	beq	r2,zero,f52c <__alt_mem_descriptor_memory+0xdefcf52c>
    f620:	80c0030b 	ldhu	r3,12(r16)
    f624:	903fe41e 	bne	r18,zero,f5b8 <__alt_mem_descriptor_memory+0xdefcf5b8>
    f628:	8dc00017 	ldw	r23,0(r17)
    f62c:	8c800117 	ldw	r18,4(r17)
    f630:	8c400204 	addi	r17,r17,8
    f634:	003fdf06 	br	f5b4 <__alt_mem_descriptor_memory+0xdefcf5b4>
    f638:	0010da00 	call	10da0 <_realloc_r>
    f63c:	102d883a 	mov	r22,r2
    f640:	1000a01e 	bne	r2,zero,f8c4 <__sfvwrite_r+0x444>
    f644:	81400417 	ldw	r5,16(r16)
    f648:	a809883a 	mov	r4,r21
    f64c:	000f1900 	call	f190 <_free_r>
    f650:	00800304 	movi	r2,12
    f654:	a8800015 	stw	r2,0(r21)
    f658:	80c0030b 	ldhu	r3,12(r16)
    f65c:	00bfffc4 	movi	r2,-1
    f660:	18c01014 	ori	r3,r3,64
    f664:	80c0030d 	sth	r3,12(r16)
    f668:	003fb106 	br	f530 <__alt_mem_descriptor_memory+0xdefcf530>
    f66c:	0029883a 	mov	r20,zero
    f670:	0011883a 	mov	r8,zero
    f674:	0039883a 	mov	fp,zero
    f678:	0025883a 	mov	r18,zero
    f67c:	90001f26 	beq	r18,zero,f6fc <__sfvwrite_r+0x27c>
    f680:	40006826 	beq	r8,zero,f824 <__sfvwrite_r+0x3a4>
    f684:	a02f883a 	mov	r23,r20
    f688:	9500012e 	bgeu	r18,r20,f690 <__sfvwrite_r+0x210>
    f68c:	902f883a 	mov	r23,r18
    f690:	81000017 	ldw	r4,0(r16)
    f694:	80800417 	ldw	r2,16(r16)
    f698:	b82d883a 	mov	r22,r23
    f69c:	81800217 	ldw	r6,8(r16)
    f6a0:	81c00517 	ldw	r7,20(r16)
    f6a4:	1100022e 	bgeu	r2,r4,f6b0 <__sfvwrite_r+0x230>
    f6a8:	31c7883a 	add	r3,r6,r7
    f6ac:	1dc01816 	blt	r3,r23,f710 <__sfvwrite_r+0x290>
    f6b0:	b9c03f16 	blt	r23,r7,f7b0 <__sfvwrite_r+0x330>
    f6b4:	80800917 	ldw	r2,36(r16)
    f6b8:	81400717 	ldw	r5,28(r16)
    f6bc:	a809883a 	mov	r4,r21
    f6c0:	da000115 	stw	r8,4(sp)
    f6c4:	e00d883a 	mov	r6,fp
    f6c8:	103ee83a 	callr	r2
    f6cc:	102d883a 	mov	r22,r2
    f6d0:	da000117 	ldw	r8,4(sp)
    f6d4:	00bfe00e 	bge	zero,r2,f658 <__alt_mem_descriptor_memory+0xdefcf658>
    f6d8:	a5a9c83a 	sub	r20,r20,r22
    f6dc:	a0001f26 	beq	r20,zero,f75c <__sfvwrite_r+0x2dc>
    f6e0:	98800217 	ldw	r2,8(r19)
    f6e4:	e5b9883a 	add	fp,fp,r22
    f6e8:	95a5c83a 	sub	r18,r18,r22
    f6ec:	15adc83a 	sub	r22,r2,r22
    f6f0:	9d800215 	stw	r22,8(r19)
    f6f4:	b03f8d26 	beq	r22,zero,f52c <__alt_mem_descriptor_memory+0xdefcf52c>
    f6f8:	903fe11e 	bne	r18,zero,f680 <__alt_mem_descriptor_memory+0xdefcf680>
    f6fc:	8f000017 	ldw	fp,0(r17)
    f700:	8c800117 	ldw	r18,4(r17)
    f704:	0011883a 	mov	r8,zero
    f708:	8c400204 	addi	r17,r17,8
    f70c:	003fdb06 	br	f67c <__alt_mem_descriptor_memory+0xdefcf67c>
    f710:	180d883a 	mov	r6,r3
    f714:	e00b883a 	mov	r5,fp
    f718:	da000115 	stw	r8,4(sp)
    f71c:	d8c00015 	stw	r3,0(sp)
    f720:	0007dc80 	call	7dc8 <memmove>
    f724:	d8c00017 	ldw	r3,0(sp)
    f728:	80800017 	ldw	r2,0(r16)
    f72c:	a809883a 	mov	r4,r21
    f730:	800b883a 	mov	r5,r16
    f734:	10c5883a 	add	r2,r2,r3
    f738:	80800015 	stw	r2,0(r16)
    f73c:	d8c00015 	stw	r3,0(sp)
    f740:	000e9200 	call	e920 <_fflush_r>
    f744:	d8c00017 	ldw	r3,0(sp)
    f748:	da000117 	ldw	r8,4(sp)
    f74c:	103fc21e 	bne	r2,zero,f658 <__alt_mem_descriptor_memory+0xdefcf658>
    f750:	182d883a 	mov	r22,r3
    f754:	a5a9c83a 	sub	r20,r20,r22
    f758:	a03fe11e 	bne	r20,zero,f6e0 <__alt_mem_descriptor_memory+0xdefcf6e0>
    f75c:	a809883a 	mov	r4,r21
    f760:	800b883a 	mov	r5,r16
    f764:	000e9200 	call	e920 <_fflush_r>
    f768:	103fbb1e 	bne	r2,zero,f658 <__alt_mem_descriptor_memory+0xdefcf658>
    f76c:	0011883a 	mov	r8,zero
    f770:	003fdb06 	br	f6e0 <__alt_mem_descriptor_memory+0xdefcf6e0>
    f774:	81000017 	ldw	r4,0(r16)
    f778:	80800417 	ldw	r2,16(r16)
    f77c:	1100012e 	bgeu	r2,r4,f784 <__sfvwrite_r+0x304>
    f780:	a4805a36 	bltu	r20,r18,f8ec <__sfvwrite_r+0x46c>
    f784:	81c00517 	ldw	r7,20(r16)
    f788:	91c01a36 	bltu	r18,r7,f7f4 <__sfvwrite_r+0x374>
    f78c:	80800917 	ldw	r2,36(r16)
    f790:	81400717 	ldw	r5,28(r16)
    f794:	a809883a 	mov	r4,r21
    f798:	b80d883a 	mov	r6,r23
    f79c:	103ee83a 	callr	r2
    f7a0:	1029883a 	mov	r20,r2
    f7a4:	00bfac0e 	bge	zero,r2,f658 <__alt_mem_descriptor_memory+0xdefcf658>
    f7a8:	a005883a 	mov	r2,r20
    f7ac:	003f9606 	br	f608 <__alt_mem_descriptor_memory+0xdefcf608>
    f7b0:	b80d883a 	mov	r6,r23
    f7b4:	e00b883a 	mov	r5,fp
    f7b8:	da000115 	stw	r8,4(sp)
    f7bc:	0007dc80 	call	7dc8 <memmove>
    f7c0:	80800217 	ldw	r2,8(r16)
    f7c4:	80c00017 	ldw	r3,0(r16)
    f7c8:	da000117 	ldw	r8,4(sp)
    f7cc:	15c5c83a 	sub	r2,r2,r23
    f7d0:	1def883a 	add	r23,r3,r23
    f7d4:	80800215 	stw	r2,8(r16)
    f7d8:	85c00015 	stw	r23,0(r16)
    f7dc:	003fbe06 	br	f6d8 <__alt_mem_descriptor_memory+0xdefcf6d8>
    f7e0:	81000017 	ldw	r4,0(r16)
    f7e4:	9039883a 	mov	fp,r18
    f7e8:	9029883a 	mov	r20,r18
    f7ec:	902d883a 	mov	r22,r18
    f7f0:	003f7b06 	br	f5e0 <__alt_mem_descriptor_memory+0xdefcf5e0>
    f7f4:	b80b883a 	mov	r5,r23
    f7f8:	900d883a 	mov	r6,r18
    f7fc:	0007dc80 	call	7dc8 <memmove>
    f800:	80c00217 	ldw	r3,8(r16)
    f804:	80800017 	ldw	r2,0(r16)
    f808:	9029883a 	mov	r20,r18
    f80c:	1c87c83a 	sub	r3,r3,r18
    f810:	1485883a 	add	r2,r2,r18
    f814:	80800015 	stw	r2,0(r16)
    f818:	80c00215 	stw	r3,8(r16)
    f81c:	9005883a 	mov	r2,r18
    f820:	003f7906 	br	f608 <__alt_mem_descriptor_memory+0xdefcf608>
    f824:	e009883a 	mov	r4,fp
    f828:	01400284 	movi	r5,10
    f82c:	900d883a 	mov	r6,r18
    f830:	000fd2c0 	call	fd2c <memchr>
    f834:	10003826 	beq	r2,zero,f918 <__sfvwrite_r+0x498>
    f838:	10800044 	addi	r2,r2,1
    f83c:	1729c83a 	sub	r20,r2,fp
    f840:	02000044 	movi	r8,1
    f844:	003f8f06 	br	f684 <__alt_mem_descriptor_memory+0xdefcf684>
    f848:	80800517 	ldw	r2,20(r16)
    f84c:	81400417 	ldw	r5,16(r16)
    f850:	87000017 	ldw	fp,0(r16)
    f854:	10a9883a 	add	r20,r2,r2
    f858:	a085883a 	add	r2,r20,r2
    f85c:	1028d7fa 	srli	r20,r2,31
    f860:	e179c83a 	sub	fp,fp,r5
    f864:	e1000044 	addi	r4,fp,1
    f868:	a085883a 	add	r2,r20,r2
    f86c:	1029d07a 	srai	r20,r2,1
    f870:	2485883a 	add	r2,r4,r18
    f874:	a00d883a 	mov	r6,r20
    f878:	a080022e 	bgeu	r20,r2,f884 <__sfvwrite_r+0x404>
    f87c:	1029883a 	mov	r20,r2
    f880:	100d883a 	mov	r6,r2
    f884:	18c1000c 	andi	r3,r3,1024
    f888:	a809883a 	mov	r4,r21
    f88c:	183f6a26 	beq	r3,zero,f638 <__alt_mem_descriptor_memory+0xdefcf638>
    f890:	300b883a 	mov	r5,r6
    f894:	00074e80 	call	74e8 <_malloc_r>
    f898:	102d883a 	mov	r22,r2
    f89c:	103f6c26 	beq	r2,zero,f650 <__alt_mem_descriptor_memory+0xdefcf650>
    f8a0:	81400417 	ldw	r5,16(r16)
    f8a4:	1009883a 	mov	r4,r2
    f8a8:	e00d883a 	mov	r6,fp
    f8ac:	0007c900 	call	7c90 <memcpy>
    f8b0:	8080030b 	ldhu	r2,12(r16)
    f8b4:	00fedfc4 	movi	r3,-1153
    f8b8:	10c4703a 	and	r2,r2,r3
    f8bc:	10802014 	ori	r2,r2,128
    f8c0:	8080030d 	sth	r2,12(r16)
    f8c4:	b709883a 	add	r4,r22,fp
    f8c8:	a707c83a 	sub	r3,r20,fp
    f8cc:	85800415 	stw	r22,16(r16)
    f8d0:	85000515 	stw	r20,20(r16)
    f8d4:	81000015 	stw	r4,0(r16)
    f8d8:	9039883a 	mov	fp,r18
    f8dc:	80c00215 	stw	r3,8(r16)
    f8e0:	9029883a 	mov	r20,r18
    f8e4:	902d883a 	mov	r22,r18
    f8e8:	003f3d06 	br	f5e0 <__alt_mem_descriptor_memory+0xdefcf5e0>
    f8ec:	b80b883a 	mov	r5,r23
    f8f0:	a00d883a 	mov	r6,r20
    f8f4:	0007dc80 	call	7dc8 <memmove>
    f8f8:	80800017 	ldw	r2,0(r16)
    f8fc:	a809883a 	mov	r4,r21
    f900:	800b883a 	mov	r5,r16
    f904:	1505883a 	add	r2,r2,r20
    f908:	80800015 	stw	r2,0(r16)
    f90c:	000e9200 	call	e920 <_fflush_r>
    f910:	103fa526 	beq	r2,zero,f7a8 <__alt_mem_descriptor_memory+0xdefcf7a8>
    f914:	003f5006 	br	f658 <__alt_mem_descriptor_memory+0xdefcf658>
    f918:	95000044 	addi	r20,r18,1
    f91c:	02000044 	movi	r8,1
    f920:	003f5806 	br	f684 <__alt_mem_descriptor_memory+0xdefcf684>

0000f924 <_fwalk>:
    f924:	defff804 	addi	sp,sp,-32
    f928:	dd400515 	stw	r21,20(sp)
    f92c:	2540b804 	addi	r21,r4,736
    f930:	dd800615 	stw	r22,24(sp)
    f934:	dd000415 	stw	r20,16(sp)
    f938:	dfc00715 	stw	ra,28(sp)
    f93c:	dcc00315 	stw	r19,12(sp)
    f940:	dc800215 	stw	r18,8(sp)
    f944:	dc400115 	stw	r17,4(sp)
    f948:	dc000015 	stw	r16,0(sp)
    f94c:	2829883a 	mov	r20,r5
    f950:	002d883a 	mov	r22,zero
    f954:	000eed80 	call	eed8 <__sfp_lock_acquire>
    f958:	a8001426 	beq	r21,zero,f9ac <_fwalk+0x88>
    f95c:	04ffffc4 	movi	r19,-1
    f960:	ac400117 	ldw	r17,4(r21)
    f964:	ac800217 	ldw	r18,8(r21)
    f968:	8c7fffc4 	addi	r17,r17,-1
    f96c:	88000d16 	blt	r17,zero,f9a4 <_fwalk+0x80>
    f970:	94000304 	addi	r16,r18,12
    f974:	94800384 	addi	r18,r18,14
    f978:	80c0000f 	ldh	r3,0(r16)
    f97c:	8c7fffc4 	addi	r17,r17,-1
    f980:	813ffd04 	addi	r4,r16,-12
    f984:	18000426 	beq	r3,zero,f998 <_fwalk+0x74>
    f988:	90c0000f 	ldh	r3,0(r18)
    f98c:	1cc00226 	beq	r3,r19,f998 <_fwalk+0x74>
    f990:	a03ee83a 	callr	r20
    f994:	b0acb03a 	or	r22,r22,r2
    f998:	84001a04 	addi	r16,r16,104
    f99c:	94801a04 	addi	r18,r18,104
    f9a0:	8cfff51e 	bne	r17,r19,f978 <__alt_mem_descriptor_memory+0xdefcf978>
    f9a4:	ad400017 	ldw	r21,0(r21)
    f9a8:	a83fed1e 	bne	r21,zero,f960 <__alt_mem_descriptor_memory+0xdefcf960>
    f9ac:	000eedc0 	call	eedc <__sfp_lock_release>
    f9b0:	b005883a 	mov	r2,r22
    f9b4:	dfc00717 	ldw	ra,28(sp)
    f9b8:	dd800617 	ldw	r22,24(sp)
    f9bc:	dd400517 	ldw	r21,20(sp)
    f9c0:	dd000417 	ldw	r20,16(sp)
    f9c4:	dcc00317 	ldw	r19,12(sp)
    f9c8:	dc800217 	ldw	r18,8(sp)
    f9cc:	dc400117 	ldw	r17,4(sp)
    f9d0:	dc000017 	ldw	r16,0(sp)
    f9d4:	dec00804 	addi	sp,sp,32
    f9d8:	f800283a 	ret

0000f9dc <_fwalk_reent>:
    f9dc:	defff804 	addi	sp,sp,-32
    f9e0:	dd400515 	stw	r21,20(sp)
    f9e4:	2540b804 	addi	r21,r4,736
    f9e8:	dd800615 	stw	r22,24(sp)
    f9ec:	dd000415 	stw	r20,16(sp)
    f9f0:	dcc00315 	stw	r19,12(sp)
    f9f4:	dfc00715 	stw	ra,28(sp)
    f9f8:	dc800215 	stw	r18,8(sp)
    f9fc:	dc400115 	stw	r17,4(sp)
    fa00:	dc000015 	stw	r16,0(sp)
    fa04:	2027883a 	mov	r19,r4
    fa08:	2829883a 	mov	r20,r5
    fa0c:	002d883a 	mov	r22,zero
    fa10:	000eed80 	call	eed8 <__sfp_lock_acquire>
    fa14:	a8001326 	beq	r21,zero,fa64 <_fwalk_reent+0x88>
    fa18:	04bfffc4 	movi	r18,-1
    fa1c:	ac400117 	ldw	r17,4(r21)
    fa20:	ac000217 	ldw	r16,8(r21)
    fa24:	8c7fffc4 	addi	r17,r17,-1
    fa28:	88000c16 	blt	r17,zero,fa5c <_fwalk_reent+0x80>
    fa2c:	84000304 	addi	r16,r16,12
    fa30:	80c0000f 	ldh	r3,0(r16)
    fa34:	8c7fffc4 	addi	r17,r17,-1
    fa38:	817ffd04 	addi	r5,r16,-12
    fa3c:	18000526 	beq	r3,zero,fa54 <_fwalk_reent+0x78>
    fa40:	80c0008f 	ldh	r3,2(r16)
    fa44:	9809883a 	mov	r4,r19
    fa48:	1c800226 	beq	r3,r18,fa54 <_fwalk_reent+0x78>
    fa4c:	a03ee83a 	callr	r20
    fa50:	b0acb03a 	or	r22,r22,r2
    fa54:	84001a04 	addi	r16,r16,104
    fa58:	8cbff51e 	bne	r17,r18,fa30 <__alt_mem_descriptor_memory+0xdefcfa30>
    fa5c:	ad400017 	ldw	r21,0(r21)
    fa60:	a83fee1e 	bne	r21,zero,fa1c <__alt_mem_descriptor_memory+0xdefcfa1c>
    fa64:	000eedc0 	call	eedc <__sfp_lock_release>
    fa68:	b005883a 	mov	r2,r22
    fa6c:	dfc00717 	ldw	ra,28(sp)
    fa70:	dd800617 	ldw	r22,24(sp)
    fa74:	dd400517 	ldw	r21,20(sp)
    fa78:	dd000417 	ldw	r20,16(sp)
    fa7c:	dcc00317 	ldw	r19,12(sp)
    fa80:	dc800217 	ldw	r18,8(sp)
    fa84:	dc400117 	ldw	r17,4(sp)
    fa88:	dc000017 	ldw	r16,0(sp)
    fa8c:	dec00804 	addi	sp,sp,32
    fa90:	f800283a 	ret

0000fa94 <_setlocale_r>:
    fa94:	30001b26 	beq	r6,zero,fb04 <_setlocale_r+0x70>
    fa98:	01400174 	movhi	r5,5
    fa9c:	defffe04 	addi	sp,sp,-8
    faa0:	2975b904 	addi	r5,r5,-10524
    faa4:	3009883a 	mov	r4,r6
    faa8:	dc000015 	stw	r16,0(sp)
    faac:	dfc00115 	stw	ra,4(sp)
    fab0:	3021883a 	mov	r16,r6
    fab4:	00116b40 	call	116b4 <strcmp>
    fab8:	1000061e 	bne	r2,zero,fad4 <_setlocale_r+0x40>
    fabc:	00800174 	movhi	r2,5
    fac0:	10b40504 	addi	r2,r2,-12268
    fac4:	dfc00117 	ldw	ra,4(sp)
    fac8:	dc000017 	ldw	r16,0(sp)
    facc:	dec00204 	addi	sp,sp,8
    fad0:	f800283a 	ret
    fad4:	01400174 	movhi	r5,5
    fad8:	29740504 	addi	r5,r5,-12268
    fadc:	8009883a 	mov	r4,r16
    fae0:	00116b40 	call	116b4 <strcmp>
    fae4:	103ff526 	beq	r2,zero,fabc <__alt_mem_descriptor_memory+0xdefcfabc>
    fae8:	01400174 	movhi	r5,5
    faec:	29759c04 	addi	r5,r5,-10640
    faf0:	8009883a 	mov	r4,r16
    faf4:	00116b40 	call	116b4 <strcmp>
    faf8:	103ff026 	beq	r2,zero,fabc <__alt_mem_descriptor_memory+0xdefcfabc>
    fafc:	0005883a 	mov	r2,zero
    fb00:	003ff006 	br	fac4 <__alt_mem_descriptor_memory+0xdefcfac4>
    fb04:	00800174 	movhi	r2,5
    fb08:	10b40504 	addi	r2,r2,-12268
    fb0c:	f800283a 	ret

0000fb10 <__locale_charset>:
    fb10:	00800174 	movhi	r2,5
    fb14:	1081ef04 	addi	r2,r2,1980
    fb18:	f800283a 	ret

0000fb1c <__locale_mb_cur_max>:
    fb1c:	00800174 	movhi	r2,5
    fb20:	10873004 	addi	r2,r2,7360
    fb24:	10800017 	ldw	r2,0(r2)
    fb28:	f800283a 	ret

0000fb2c <__locale_msgcharset>:
    fb2c:	00800174 	movhi	r2,5
    fb30:	1081e704 	addi	r2,r2,1948
    fb34:	f800283a 	ret

0000fb38 <__locale_cjk_lang>:
    fb38:	0005883a 	mov	r2,zero
    fb3c:	f800283a 	ret

0000fb40 <_localeconv_r>:
    fb40:	00800174 	movhi	r2,5
    fb44:	1081f704 	addi	r2,r2,2012
    fb48:	f800283a 	ret

0000fb4c <setlocale>:
    fb4c:	00c00174 	movhi	r3,5
    fb50:	18c72d04 	addi	r3,r3,7348
    fb54:	2005883a 	mov	r2,r4
    fb58:	19000017 	ldw	r4,0(r3)
    fb5c:	280d883a 	mov	r6,r5
    fb60:	100b883a 	mov	r5,r2
    fb64:	000fa941 	jmpi	fa94 <_setlocale_r>

0000fb68 <localeconv>:
    fb68:	00800174 	movhi	r2,5
    fb6c:	1081f704 	addi	r2,r2,2012
    fb70:	f800283a 	ret

0000fb74 <__smakebuf_r>:
    fb74:	2880030b 	ldhu	r2,12(r5)
    fb78:	10c0008c 	andi	r3,r2,2
    fb7c:	1800401e 	bne	r3,zero,fc80 <__smakebuf_r+0x10c>
    fb80:	deffec04 	addi	sp,sp,-80
    fb84:	dc000f15 	stw	r16,60(sp)
    fb88:	2821883a 	mov	r16,r5
    fb8c:	2940038f 	ldh	r5,14(r5)
    fb90:	dc401015 	stw	r17,64(sp)
    fb94:	dfc01315 	stw	ra,76(sp)
    fb98:	dcc01215 	stw	r19,72(sp)
    fb9c:	dc801115 	stw	r18,68(sp)
    fba0:	2023883a 	mov	r17,r4
    fba4:	28001b16 	blt	r5,zero,fc14 <__smakebuf_r+0xa0>
    fba8:	d80d883a 	mov	r6,sp
    fbac:	00142800 	call	14280 <_fstat_r>
    fbb0:	10001716 	blt	r2,zero,fc10 <__smakebuf_r+0x9c>
    fbb4:	d8800117 	ldw	r2,4(sp)
    fbb8:	00e00014 	movui	r3,32768
    fbbc:	10bc000c 	andi	r2,r2,61440
    fbc0:	10c03726 	beq	r2,r3,fca0 <__smakebuf_r+0x12c>
    fbc4:	80c0030b 	ldhu	r3,12(r16)
    fbc8:	18c20014 	ori	r3,r3,2048
    fbcc:	80c0030d 	sth	r3,12(r16)
    fbd0:	00c80004 	movi	r3,8192
    fbd4:	10c03c1e 	bne	r2,r3,fcc8 <__smakebuf_r+0x154>
    fbd8:	8140038f 	ldh	r5,14(r16)
    fbdc:	8809883a 	mov	r4,r17
    fbe0:	00142d80 	call	142d8 <_isatty_r>
    fbe4:	10004e26 	beq	r2,zero,fd20 <__smakebuf_r+0x1ac>
    fbe8:	8080030b 	ldhu	r2,12(r16)
    fbec:	04c00044 	movi	r19,1
    fbf0:	80c010c4 	addi	r3,r16,67
    fbf4:	14c4b03a 	or	r2,r2,r19
    fbf8:	8080030d 	sth	r2,12(r16)
    fbfc:	80c00015 	stw	r3,0(r16)
    fc00:	80c00415 	stw	r3,16(r16)
    fc04:	84c00515 	stw	r19,20(r16)
    fc08:	04810004 	movi	r18,1024
    fc0c:	00000706 	br	fc2c <__smakebuf_r+0xb8>
    fc10:	8080030b 	ldhu	r2,12(r16)
    fc14:	10c0200c 	andi	r3,r2,128
    fc18:	18001f1e 	bne	r3,zero,fc98 <__smakebuf_r+0x124>
    fc1c:	04810004 	movi	r18,1024
    fc20:	10820014 	ori	r2,r2,2048
    fc24:	8080030d 	sth	r2,12(r16)
    fc28:	0027883a 	mov	r19,zero
    fc2c:	8809883a 	mov	r4,r17
    fc30:	900b883a 	mov	r5,r18
    fc34:	00074e80 	call	74e8 <_malloc_r>
    fc38:	10002e26 	beq	r2,zero,fcf4 <__smakebuf_r+0x180>
    fc3c:	80c0030b 	ldhu	r3,12(r16)
    fc40:	01000074 	movhi	r4,1
    fc44:	213ae204 	addi	r4,r4,-5240
    fc48:	89000f15 	stw	r4,60(r17)
    fc4c:	18c02014 	ori	r3,r3,128
    fc50:	80c0030d 	sth	r3,12(r16)
    fc54:	80800015 	stw	r2,0(r16)
    fc58:	80800415 	stw	r2,16(r16)
    fc5c:	84800515 	stw	r18,20(r16)
    fc60:	98001c1e 	bne	r19,zero,fcd4 <__smakebuf_r+0x160>
    fc64:	dfc01317 	ldw	ra,76(sp)
    fc68:	dcc01217 	ldw	r19,72(sp)
    fc6c:	dc801117 	ldw	r18,68(sp)
    fc70:	dc401017 	ldw	r17,64(sp)
    fc74:	dc000f17 	ldw	r16,60(sp)
    fc78:	dec01404 	addi	sp,sp,80
    fc7c:	f800283a 	ret
    fc80:	288010c4 	addi	r2,r5,67
    fc84:	28800015 	stw	r2,0(r5)
    fc88:	28800415 	stw	r2,16(r5)
    fc8c:	00800044 	movi	r2,1
    fc90:	28800515 	stw	r2,20(r5)
    fc94:	f800283a 	ret
    fc98:	04801004 	movi	r18,64
    fc9c:	003fe006 	br	fc20 <__alt_mem_descriptor_memory+0xdefcfc20>
    fca0:	81000a17 	ldw	r4,40(r16)
    fca4:	00c00074 	movhi	r3,1
    fca8:	18c59404 	addi	r3,r3,5712
    fcac:	20ffc51e 	bne	r4,r3,fbc4 <__alt_mem_descriptor_memory+0xdefcfbc4>
    fcb0:	80c0030b 	ldhu	r3,12(r16)
    fcb4:	01010004 	movi	r4,1024
    fcb8:	81001315 	stw	r4,76(r16)
    fcbc:	1906b03a 	or	r3,r3,r4
    fcc0:	80c0030d 	sth	r3,12(r16)
    fcc4:	003fc206 	br	fbd0 <__alt_mem_descriptor_memory+0xdefcfbd0>
    fcc8:	0027883a 	mov	r19,zero
    fccc:	04810004 	movi	r18,1024
    fcd0:	003fd606 	br	fc2c <__alt_mem_descriptor_memory+0xdefcfc2c>
    fcd4:	8140038f 	ldh	r5,14(r16)
    fcd8:	8809883a 	mov	r4,r17
    fcdc:	00142d80 	call	142d8 <_isatty_r>
    fce0:	103fe026 	beq	r2,zero,fc64 <__alt_mem_descriptor_memory+0xdefcfc64>
    fce4:	8080030b 	ldhu	r2,12(r16)
    fce8:	10800054 	ori	r2,r2,1
    fcec:	8080030d 	sth	r2,12(r16)
    fcf0:	003fdc06 	br	fc64 <__alt_mem_descriptor_memory+0xdefcfc64>
    fcf4:	8080030b 	ldhu	r2,12(r16)
    fcf8:	10c0800c 	andi	r3,r2,512
    fcfc:	183fd91e 	bne	r3,zero,fc64 <__alt_mem_descriptor_memory+0xdefcfc64>
    fd00:	10800094 	ori	r2,r2,2
    fd04:	80c010c4 	addi	r3,r16,67
    fd08:	8080030d 	sth	r2,12(r16)
    fd0c:	00800044 	movi	r2,1
    fd10:	80c00015 	stw	r3,0(r16)
    fd14:	80c00415 	stw	r3,16(r16)
    fd18:	80800515 	stw	r2,20(r16)
    fd1c:	003fd106 	br	fc64 <__alt_mem_descriptor_memory+0xdefcfc64>
    fd20:	04c00044 	movi	r19,1
    fd24:	04810004 	movi	r18,1024
    fd28:	003fc006 	br	fc2c <__alt_mem_descriptor_memory+0xdefcfc2c>

0000fd2c <memchr>:
    fd2c:	208000cc 	andi	r2,r4,3
    fd30:	280f883a 	mov	r7,r5
    fd34:	10003526 	beq	r2,zero,fe0c <memchr+0xe0>
    fd38:	30bfffc4 	addi	r2,r6,-1
    fd3c:	30001b26 	beq	r6,zero,fdac <memchr+0x80>
    fd40:	21800003 	ldbu	r6,0(r4)
    fd44:	28c03fcc 	andi	r3,r5,255
    fd48:	30c01a26 	beq	r6,r3,fdb4 <memchr+0x88>
    fd4c:	180d883a 	mov	r6,r3
    fd50:	00000406 	br	fd64 <memchr+0x38>
    fd54:	10001526 	beq	r2,zero,fdac <memchr+0x80>
    fd58:	20c00003 	ldbu	r3,0(r4)
    fd5c:	10bfffc4 	addi	r2,r2,-1
    fd60:	19801426 	beq	r3,r6,fdb4 <memchr+0x88>
    fd64:	21000044 	addi	r4,r4,1
    fd68:	20c000cc 	andi	r3,r4,3
    fd6c:	183ff91e 	bne	r3,zero,fd54 <__alt_mem_descriptor_memory+0xdefcfd54>
    fd70:	024000c4 	movi	r9,3
    fd74:	48801136 	bltu	r9,r2,fdbc <memchr+0x90>
    fd78:	10000c26 	beq	r2,zero,fdac <memchr+0x80>
    fd7c:	20c00003 	ldbu	r3,0(r4)
    fd80:	29403fcc 	andi	r5,r5,255
    fd84:	19400b26 	beq	r3,r5,fdb4 <memchr+0x88>
    fd88:	20c00044 	addi	r3,r4,1
    fd8c:	2085883a 	add	r2,r4,r2
    fd90:	39803fcc 	andi	r6,r7,255
    fd94:	00000306 	br	fda4 <memchr+0x78>
    fd98:	18c00044 	addi	r3,r3,1
    fd9c:	197fffc3 	ldbu	r5,-1(r3)
    fda0:	29800426 	beq	r5,r6,fdb4 <memchr+0x88>
    fda4:	1809883a 	mov	r4,r3
    fda8:	18bffb1e 	bne	r3,r2,fd98 <__alt_mem_descriptor_memory+0xdefcfd98>
    fdac:	0005883a 	mov	r2,zero
    fdb0:	f800283a 	ret
    fdb4:	2005883a 	mov	r2,r4
    fdb8:	f800283a 	ret
    fdbc:	28c03fcc 	andi	r3,r5,255
    fdc0:	1810923a 	slli	r8,r3,8
    fdc4:	02ffbff4 	movhi	r11,65279
    fdc8:	02a02074 	movhi	r10,32897
    fdcc:	40c6b03a 	or	r3,r8,r3
    fdd0:	1810943a 	slli	r8,r3,16
    fdd4:	5affbfc4 	addi	r11,r11,-257
    fdd8:	52a02004 	addi	r10,r10,-32640
    fddc:	40d0b03a 	or	r8,r8,r3
    fde0:	20c00017 	ldw	r3,0(r4)
    fde4:	40c6f03a 	xor	r3,r8,r3
    fde8:	1acd883a 	add	r6,r3,r11
    fdec:	00c6303a 	nor	r3,zero,r3
    fdf0:	30c6703a 	and	r3,r6,r3
    fdf4:	1a86703a 	and	r3,r3,r10
    fdf8:	183fdf1e 	bne	r3,zero,fd78 <__alt_mem_descriptor_memory+0xdefcfd78>
    fdfc:	10bfff04 	addi	r2,r2,-4
    fe00:	21000104 	addi	r4,r4,4
    fe04:	48bff636 	bltu	r9,r2,fde0 <__alt_mem_descriptor_memory+0xdefcfde0>
    fe08:	003fdb06 	br	fd78 <__alt_mem_descriptor_memory+0xdefcfd78>
    fe0c:	3005883a 	mov	r2,r6
    fe10:	003fd706 	br	fd70 <__alt_mem_descriptor_memory+0xdefcfd70>

0000fe14 <_Balloc>:
    fe14:	20801317 	ldw	r2,76(r4)
    fe18:	defffc04 	addi	sp,sp,-16
    fe1c:	dc400115 	stw	r17,4(sp)
    fe20:	dc000015 	stw	r16,0(sp)
    fe24:	dfc00315 	stw	ra,12(sp)
    fe28:	dc800215 	stw	r18,8(sp)
    fe2c:	2023883a 	mov	r17,r4
    fe30:	2821883a 	mov	r16,r5
    fe34:	10000f26 	beq	r2,zero,fe74 <_Balloc+0x60>
    fe38:	8407883a 	add	r3,r16,r16
    fe3c:	18c7883a 	add	r3,r3,r3
    fe40:	10c7883a 	add	r3,r2,r3
    fe44:	18800017 	ldw	r2,0(r3)
    fe48:	10001126 	beq	r2,zero,fe90 <_Balloc+0x7c>
    fe4c:	11000017 	ldw	r4,0(r2)
    fe50:	19000015 	stw	r4,0(r3)
    fe54:	10000415 	stw	zero,16(r2)
    fe58:	10000315 	stw	zero,12(r2)
    fe5c:	dfc00317 	ldw	ra,12(sp)
    fe60:	dc800217 	ldw	r18,8(sp)
    fe64:	dc400117 	ldw	r17,4(sp)
    fe68:	dc000017 	ldw	r16,0(sp)
    fe6c:	dec00404 	addi	sp,sp,16
    fe70:	f800283a 	ret
    fe74:	01400104 	movi	r5,4
    fe78:	01800844 	movi	r6,33
    fe7c:	0013ecc0 	call	13ecc <_calloc_r>
    fe80:	88801315 	stw	r2,76(r17)
    fe84:	103fec1e 	bne	r2,zero,fe38 <__alt_mem_descriptor_memory+0xdefcfe38>
    fe88:	0005883a 	mov	r2,zero
    fe8c:	003ff306 	br	fe5c <__alt_mem_descriptor_memory+0xdefcfe5c>
    fe90:	01400044 	movi	r5,1
    fe94:	2c24983a 	sll	r18,r5,r16
    fe98:	8809883a 	mov	r4,r17
    fe9c:	91800144 	addi	r6,r18,5
    fea0:	318d883a 	add	r6,r6,r6
    fea4:	318d883a 	add	r6,r6,r6
    fea8:	0013ecc0 	call	13ecc <_calloc_r>
    feac:	103ff626 	beq	r2,zero,fe88 <__alt_mem_descriptor_memory+0xdefcfe88>
    feb0:	14000115 	stw	r16,4(r2)
    feb4:	14800215 	stw	r18,8(r2)
    feb8:	003fe606 	br	fe54 <__alt_mem_descriptor_memory+0xdefcfe54>

0000febc <_Bfree>:
    febc:	28000826 	beq	r5,zero,fee0 <_Bfree+0x24>
    fec0:	28c00117 	ldw	r3,4(r5)
    fec4:	20801317 	ldw	r2,76(r4)
    fec8:	18c7883a 	add	r3,r3,r3
    fecc:	18c7883a 	add	r3,r3,r3
    fed0:	10c5883a 	add	r2,r2,r3
    fed4:	10c00017 	ldw	r3,0(r2)
    fed8:	28c00015 	stw	r3,0(r5)
    fedc:	11400015 	stw	r5,0(r2)
    fee0:	f800283a 	ret

0000fee4 <__multadd>:
    fee4:	defffa04 	addi	sp,sp,-24
    fee8:	dc000115 	stw	r16,4(sp)
    feec:	2c000417 	ldw	r16,16(r5)
    fef0:	dc800315 	stw	r18,12(sp)
    fef4:	dc400215 	stw	r17,8(sp)
    fef8:	dfc00515 	stw	ra,20(sp)
    fefc:	dcc00415 	stw	r19,16(sp)
    ff00:	2823883a 	mov	r17,r5
    ff04:	2025883a 	mov	r18,r4
    ff08:	2a400504 	addi	r9,r5,20
    ff0c:	0015883a 	mov	r10,zero
    ff10:	4a000017 	ldw	r8,0(r9)
    ff14:	4a400104 	addi	r9,r9,4
    ff18:	52800044 	addi	r10,r10,1
    ff1c:	40ffffcc 	andi	r3,r8,65535
    ff20:	1987383a 	mul	r3,r3,r6
    ff24:	4010d43a 	srli	r8,r8,16
    ff28:	19cf883a 	add	r7,r3,r7
    ff2c:	4191383a 	mul	r8,r8,r6
    ff30:	3816d43a 	srli	r11,r7,16
    ff34:	38ffffcc 	andi	r3,r7,65535
    ff38:	5a0f883a 	add	r7,r11,r8
    ff3c:	3810943a 	slli	r8,r7,16
    ff40:	380ed43a 	srli	r7,r7,16
    ff44:	40c7883a 	add	r3,r8,r3
    ff48:	48ffff15 	stw	r3,-4(r9)
    ff4c:	543ff016 	blt	r10,r16,ff10 <__alt_mem_descriptor_memory+0xdefcff10>
    ff50:	38000926 	beq	r7,zero,ff78 <__multadd+0x94>
    ff54:	88800217 	ldw	r2,8(r17)
    ff58:	80800f0e 	bge	r16,r2,ff98 <__multadd+0xb4>
    ff5c:	80800144 	addi	r2,r16,5
    ff60:	1085883a 	add	r2,r2,r2
    ff64:	1085883a 	add	r2,r2,r2
    ff68:	8885883a 	add	r2,r17,r2
    ff6c:	11c00015 	stw	r7,0(r2)
    ff70:	84000044 	addi	r16,r16,1
    ff74:	8c000415 	stw	r16,16(r17)
    ff78:	8805883a 	mov	r2,r17
    ff7c:	dfc00517 	ldw	ra,20(sp)
    ff80:	dcc00417 	ldw	r19,16(sp)
    ff84:	dc800317 	ldw	r18,12(sp)
    ff88:	dc400217 	ldw	r17,8(sp)
    ff8c:	dc000117 	ldw	r16,4(sp)
    ff90:	dec00604 	addi	sp,sp,24
    ff94:	f800283a 	ret
    ff98:	89400117 	ldw	r5,4(r17)
    ff9c:	9009883a 	mov	r4,r18
    ffa0:	d9c00015 	stw	r7,0(sp)
    ffa4:	29400044 	addi	r5,r5,1
    ffa8:	000fe140 	call	fe14 <_Balloc>
    ffac:	89800417 	ldw	r6,16(r17)
    ffb0:	89400304 	addi	r5,r17,12
    ffb4:	11000304 	addi	r4,r2,12
    ffb8:	31800084 	addi	r6,r6,2
    ffbc:	318d883a 	add	r6,r6,r6
    ffc0:	318d883a 	add	r6,r6,r6
    ffc4:	1027883a 	mov	r19,r2
    ffc8:	0007c900 	call	7c90 <memcpy>
    ffcc:	89000117 	ldw	r4,4(r17)
    ffd0:	90c01317 	ldw	r3,76(r18)
    ffd4:	d9c00017 	ldw	r7,0(sp)
    ffd8:	2109883a 	add	r4,r4,r4
    ffdc:	2109883a 	add	r4,r4,r4
    ffe0:	1907883a 	add	r3,r3,r4
    ffe4:	18800017 	ldw	r2,0(r3)
    ffe8:	88800015 	stw	r2,0(r17)
    ffec:	1c400015 	stw	r17,0(r3)
    fff0:	9823883a 	mov	r17,r19
    fff4:	003fd906 	br	ff5c <__alt_mem_descriptor_memory+0xdefcff5c>

0000fff8 <__s2b>:
    fff8:	defff904 	addi	sp,sp,-28
    fffc:	dc400115 	stw	r17,4(sp)
   10000:	dc000015 	stw	r16,0(sp)
   10004:	2023883a 	mov	r17,r4
   10008:	2821883a 	mov	r16,r5
   1000c:	39000204 	addi	r4,r7,8
   10010:	01400244 	movi	r5,9
   10014:	dcc00315 	stw	r19,12(sp)
   10018:	dc800215 	stw	r18,8(sp)
   1001c:	dfc00615 	stw	ra,24(sp)
   10020:	dd400515 	stw	r21,20(sp)
   10024:	dd000415 	stw	r20,16(sp)
   10028:	3825883a 	mov	r18,r7
   1002c:	3027883a 	mov	r19,r6
   10030:	00151a00 	call	151a0 <__divsi3>
   10034:	00c00044 	movi	r3,1
   10038:	000b883a 	mov	r5,zero
   1003c:	1880030e 	bge	r3,r2,1004c <__s2b+0x54>
   10040:	18c7883a 	add	r3,r3,r3
   10044:	29400044 	addi	r5,r5,1
   10048:	18bffd16 	blt	r3,r2,10040 <__alt_mem_descriptor_memory+0xdefd0040>
   1004c:	8809883a 	mov	r4,r17
   10050:	000fe140 	call	fe14 <_Balloc>
   10054:	d8c00717 	ldw	r3,28(sp)
   10058:	10c00515 	stw	r3,20(r2)
   1005c:	00c00044 	movi	r3,1
   10060:	10c00415 	stw	r3,16(r2)
   10064:	00c00244 	movi	r3,9
   10068:	1cc0210e 	bge	r3,r19,100f0 <__s2b+0xf8>
   1006c:	80eb883a 	add	r21,r16,r3
   10070:	a829883a 	mov	r20,r21
   10074:	84e1883a 	add	r16,r16,r19
   10078:	a1c00007 	ldb	r7,0(r20)
   1007c:	8809883a 	mov	r4,r17
   10080:	a5000044 	addi	r20,r20,1
   10084:	100b883a 	mov	r5,r2
   10088:	01800284 	movi	r6,10
   1008c:	39fff404 	addi	r7,r7,-48
   10090:	000fee40 	call	fee4 <__multadd>
   10094:	a43ff81e 	bne	r20,r16,10078 <__alt_mem_descriptor_memory+0xdefd0078>
   10098:	ace1883a 	add	r16,r21,r19
   1009c:	843ffe04 	addi	r16,r16,-8
   100a0:	9c800a0e 	bge	r19,r18,100cc <__s2b+0xd4>
   100a4:	94e5c83a 	sub	r18,r18,r19
   100a8:	84a5883a 	add	r18,r16,r18
   100ac:	81c00007 	ldb	r7,0(r16)
   100b0:	8809883a 	mov	r4,r17
   100b4:	84000044 	addi	r16,r16,1
   100b8:	100b883a 	mov	r5,r2
   100bc:	01800284 	movi	r6,10
   100c0:	39fff404 	addi	r7,r7,-48
   100c4:	000fee40 	call	fee4 <__multadd>
   100c8:	84bff81e 	bne	r16,r18,100ac <__alt_mem_descriptor_memory+0xdefd00ac>
   100cc:	dfc00617 	ldw	ra,24(sp)
   100d0:	dd400517 	ldw	r21,20(sp)
   100d4:	dd000417 	ldw	r20,16(sp)
   100d8:	dcc00317 	ldw	r19,12(sp)
   100dc:	dc800217 	ldw	r18,8(sp)
   100e0:	dc400117 	ldw	r17,4(sp)
   100e4:	dc000017 	ldw	r16,0(sp)
   100e8:	dec00704 	addi	sp,sp,28
   100ec:	f800283a 	ret
   100f0:	84000284 	addi	r16,r16,10
   100f4:	1827883a 	mov	r19,r3
   100f8:	003fe906 	br	100a0 <__alt_mem_descriptor_memory+0xdefd00a0>

000100fc <__hi0bits>:
   100fc:	20bfffec 	andhi	r2,r4,65535
   10100:	1000141e 	bne	r2,zero,10154 <__hi0bits+0x58>
   10104:	2008943a 	slli	r4,r4,16
   10108:	00800404 	movi	r2,16
   1010c:	20ffc02c 	andhi	r3,r4,65280
   10110:	1800021e 	bne	r3,zero,1011c <__hi0bits+0x20>
   10114:	2008923a 	slli	r4,r4,8
   10118:	10800204 	addi	r2,r2,8
   1011c:	20fc002c 	andhi	r3,r4,61440
   10120:	1800021e 	bne	r3,zero,1012c <__hi0bits+0x30>
   10124:	2008913a 	slli	r4,r4,4
   10128:	10800104 	addi	r2,r2,4
   1012c:	20f0002c 	andhi	r3,r4,49152
   10130:	1800031e 	bne	r3,zero,10140 <__hi0bits+0x44>
   10134:	2109883a 	add	r4,r4,r4
   10138:	10800084 	addi	r2,r2,2
   1013c:	2109883a 	add	r4,r4,r4
   10140:	20000316 	blt	r4,zero,10150 <__hi0bits+0x54>
   10144:	2110002c 	andhi	r4,r4,16384
   10148:	2000041e 	bne	r4,zero,1015c <__hi0bits+0x60>
   1014c:	00800804 	movi	r2,32
   10150:	f800283a 	ret
   10154:	0005883a 	mov	r2,zero
   10158:	003fec06 	br	1010c <__alt_mem_descriptor_memory+0xdefd010c>
   1015c:	10800044 	addi	r2,r2,1
   10160:	f800283a 	ret

00010164 <__lo0bits>:
   10164:	20c00017 	ldw	r3,0(r4)
   10168:	188001cc 	andi	r2,r3,7
   1016c:	10000826 	beq	r2,zero,10190 <__lo0bits+0x2c>
   10170:	1880004c 	andi	r2,r3,1
   10174:	1000211e 	bne	r2,zero,101fc <__lo0bits+0x98>
   10178:	1880008c 	andi	r2,r3,2
   1017c:	1000211e 	bne	r2,zero,10204 <__lo0bits+0xa0>
   10180:	1806d0ba 	srli	r3,r3,2
   10184:	00800084 	movi	r2,2
   10188:	20c00015 	stw	r3,0(r4)
   1018c:	f800283a 	ret
   10190:	18bfffcc 	andi	r2,r3,65535
   10194:	10001326 	beq	r2,zero,101e4 <__lo0bits+0x80>
   10198:	0005883a 	mov	r2,zero
   1019c:	19403fcc 	andi	r5,r3,255
   101a0:	2800021e 	bne	r5,zero,101ac <__lo0bits+0x48>
   101a4:	1806d23a 	srli	r3,r3,8
   101a8:	10800204 	addi	r2,r2,8
   101ac:	194003cc 	andi	r5,r3,15
   101b0:	2800021e 	bne	r5,zero,101bc <__lo0bits+0x58>
   101b4:	1806d13a 	srli	r3,r3,4
   101b8:	10800104 	addi	r2,r2,4
   101bc:	194000cc 	andi	r5,r3,3
   101c0:	2800021e 	bne	r5,zero,101cc <__lo0bits+0x68>
   101c4:	1806d0ba 	srli	r3,r3,2
   101c8:	10800084 	addi	r2,r2,2
   101cc:	1940004c 	andi	r5,r3,1
   101d0:	2800081e 	bne	r5,zero,101f4 <__lo0bits+0x90>
   101d4:	1806d07a 	srli	r3,r3,1
   101d8:	1800051e 	bne	r3,zero,101f0 <__lo0bits+0x8c>
   101dc:	00800804 	movi	r2,32
   101e0:	f800283a 	ret
   101e4:	1806d43a 	srli	r3,r3,16
   101e8:	00800404 	movi	r2,16
   101ec:	003feb06 	br	1019c <__alt_mem_descriptor_memory+0xdefd019c>
   101f0:	10800044 	addi	r2,r2,1
   101f4:	20c00015 	stw	r3,0(r4)
   101f8:	f800283a 	ret
   101fc:	0005883a 	mov	r2,zero
   10200:	f800283a 	ret
   10204:	1806d07a 	srli	r3,r3,1
   10208:	00800044 	movi	r2,1
   1020c:	20c00015 	stw	r3,0(r4)
   10210:	f800283a 	ret

00010214 <__i2b>:
   10214:	defffd04 	addi	sp,sp,-12
   10218:	dc000015 	stw	r16,0(sp)
   1021c:	04000044 	movi	r16,1
   10220:	dc400115 	stw	r17,4(sp)
   10224:	2823883a 	mov	r17,r5
   10228:	800b883a 	mov	r5,r16
   1022c:	dfc00215 	stw	ra,8(sp)
   10230:	000fe140 	call	fe14 <_Balloc>
   10234:	14400515 	stw	r17,20(r2)
   10238:	14000415 	stw	r16,16(r2)
   1023c:	dfc00217 	ldw	ra,8(sp)
   10240:	dc400117 	ldw	r17,4(sp)
   10244:	dc000017 	ldw	r16,0(sp)
   10248:	dec00304 	addi	sp,sp,12
   1024c:	f800283a 	ret

00010250 <__multiply>:
   10250:	defffa04 	addi	sp,sp,-24
   10254:	dcc00315 	stw	r19,12(sp)
   10258:	dc800215 	stw	r18,8(sp)
   1025c:	2cc00417 	ldw	r19,16(r5)
   10260:	34800417 	ldw	r18,16(r6)
   10264:	dd000415 	stw	r20,16(sp)
   10268:	dc400115 	stw	r17,4(sp)
   1026c:	dfc00515 	stw	ra,20(sp)
   10270:	dc000015 	stw	r16,0(sp)
   10274:	2829883a 	mov	r20,r5
   10278:	3023883a 	mov	r17,r6
   1027c:	9c807016 	blt	r19,r18,10440 <__multiply+0x1f0>
   10280:	9005883a 	mov	r2,r18
   10284:	9825883a 	mov	r18,r19
   10288:	1027883a 	mov	r19,r2
   1028c:	a0800217 	ldw	r2,8(r20)
   10290:	94e1883a 	add	r16,r18,r19
   10294:	a1400117 	ldw	r5,4(r20)
   10298:	1400010e 	bge	r2,r16,102a0 <__multiply+0x50>
   1029c:	29400044 	addi	r5,r5,1
   102a0:	000fe140 	call	fe14 <_Balloc>
   102a4:	8417883a 	add	r11,r16,r16
   102a8:	13000504 	addi	r12,r2,20
   102ac:	5ad7883a 	add	r11,r11,r11
   102b0:	62d7883a 	add	r11,r12,r11
   102b4:	6007883a 	mov	r3,r12
   102b8:	62c0032e 	bgeu	r12,r11,102c8 <__multiply+0x78>
   102bc:	18000015 	stw	zero,0(r3)
   102c0:	18c00104 	addi	r3,r3,4
   102c4:	1afffd36 	bltu	r3,r11,102bc <__alt_mem_descriptor_memory+0xdefd02bc>
   102c8:	9ce7883a 	add	r19,r19,r19
   102cc:	94a5883a 	add	r18,r18,r18
   102d0:	89800504 	addi	r6,r17,20
   102d4:	9ce7883a 	add	r19,r19,r19
   102d8:	a3800504 	addi	r14,r20,20
   102dc:	94a5883a 	add	r18,r18,r18
   102e0:	34db883a 	add	r13,r6,r19
   102e4:	7495883a 	add	r10,r14,r18
   102e8:	3340422e 	bgeu	r6,r13,103f4 <__multiply+0x1a4>
   102ec:	34400017 	ldw	r17,0(r6)
   102f0:	8cbfffcc 	andi	r18,r17,65535
   102f4:	90001b26 	beq	r18,zero,10364 <__multiply+0x114>
   102f8:	6013883a 	mov	r9,r12
   102fc:	7023883a 	mov	r17,r14
   10300:	0011883a 	mov	r8,zero
   10304:	88c00017 	ldw	r3,0(r17)
   10308:	4bc00017 	ldw	r15,0(r9)
   1030c:	8c400104 	addi	r17,r17,4
   10310:	19ffffcc 	andi	r7,r3,65535
   10314:	3c8f383a 	mul	r7,r7,r18
   10318:	1808d43a 	srli	r4,r3,16
   1031c:	797fffcc 	andi	r5,r15,65535
   10320:	29cb883a 	add	r5,r5,r7
   10324:	2a0b883a 	add	r5,r5,r8
   10328:	2489383a 	mul	r4,r4,r18
   1032c:	7806d43a 	srli	r3,r15,16
   10330:	2810d43a 	srli	r8,r5,16
   10334:	297fffcc 	andi	r5,r5,65535
   10338:	1907883a 	add	r3,r3,r4
   1033c:	1a07883a 	add	r3,r3,r8
   10340:	1808943a 	slli	r4,r3,16
   10344:	480f883a 	mov	r7,r9
   10348:	1810d43a 	srli	r8,r3,16
   1034c:	214ab03a 	or	r5,r4,r5
   10350:	49400015 	stw	r5,0(r9)
   10354:	4a400104 	addi	r9,r9,4
   10358:	8abfea36 	bltu	r17,r10,10304 <__alt_mem_descriptor_memory+0xdefd0304>
   1035c:	3a000115 	stw	r8,4(r7)
   10360:	34400017 	ldw	r17,0(r6)
   10364:	8822d43a 	srli	r17,r17,16
   10368:	88001f26 	beq	r17,zero,103e8 <__multiply+0x198>
   1036c:	60c00017 	ldw	r3,0(r12)
   10370:	7013883a 	mov	r9,r14
   10374:	601f883a 	mov	r15,r12
   10378:	1811883a 	mov	r8,r3
   1037c:	6027883a 	mov	r19,r12
   10380:	000f883a 	mov	r7,zero
   10384:	00000106 	br	1038c <__multiply+0x13c>
   10388:	9027883a 	mov	r19,r18
   1038c:	4940000b 	ldhu	r5,0(r9)
   10390:	4010d43a 	srli	r8,r8,16
   10394:	193fffcc 	andi	r4,r3,65535
   10398:	2c4b383a 	mul	r5,r5,r17
   1039c:	7bc00104 	addi	r15,r15,4
   103a0:	4a400104 	addi	r9,r9,4
   103a4:	2a0b883a 	add	r5,r5,r8
   103a8:	29cb883a 	add	r5,r5,r7
   103ac:	2806943a 	slli	r3,r5,16
   103b0:	9c800104 	addi	r18,r19,4
   103b4:	280ad43a 	srli	r5,r5,16
   103b8:	1908b03a 	or	r4,r3,r4
   103bc:	793fff15 	stw	r4,-4(r15)
   103c0:	48ffff17 	ldw	r3,-4(r9)
   103c4:	92000017 	ldw	r8,0(r18)
   103c8:	1806d43a 	srli	r3,r3,16
   103cc:	413fffcc 	andi	r4,r8,65535
   103d0:	1c47383a 	mul	r3,r3,r17
   103d4:	1907883a 	add	r3,r3,r4
   103d8:	1947883a 	add	r3,r3,r5
   103dc:	180ed43a 	srli	r7,r3,16
   103e0:	4abfe936 	bltu	r9,r10,10388 <__alt_mem_descriptor_memory+0xdefd0388>
   103e4:	98c00115 	stw	r3,4(r19)
   103e8:	31800104 	addi	r6,r6,4
   103ec:	63000104 	addi	r12,r12,4
   103f0:	337fbe36 	bltu	r6,r13,102ec <__alt_mem_descriptor_memory+0xdefd02ec>
   103f4:	0400090e 	bge	zero,r16,1041c <__multiply+0x1cc>
   103f8:	58ffff17 	ldw	r3,-4(r11)
   103fc:	5affff04 	addi	r11,r11,-4
   10400:	18000326 	beq	r3,zero,10410 <__multiply+0x1c0>
   10404:	00000506 	br	1041c <__multiply+0x1cc>
   10408:	58c00017 	ldw	r3,0(r11)
   1040c:	1800031e 	bne	r3,zero,1041c <__multiply+0x1cc>
   10410:	843fffc4 	addi	r16,r16,-1
   10414:	5affff04 	addi	r11,r11,-4
   10418:	803ffb1e 	bne	r16,zero,10408 <__alt_mem_descriptor_memory+0xdefd0408>
   1041c:	14000415 	stw	r16,16(r2)
   10420:	dfc00517 	ldw	ra,20(sp)
   10424:	dd000417 	ldw	r20,16(sp)
   10428:	dcc00317 	ldw	r19,12(sp)
   1042c:	dc800217 	ldw	r18,8(sp)
   10430:	dc400117 	ldw	r17,4(sp)
   10434:	dc000017 	ldw	r16,0(sp)
   10438:	dec00604 	addi	sp,sp,24
   1043c:	f800283a 	ret
   10440:	3029883a 	mov	r20,r6
   10444:	2823883a 	mov	r17,r5
   10448:	003f9006 	br	1028c <__alt_mem_descriptor_memory+0xdefd028c>

0001044c <__pow5mult>:
   1044c:	defffa04 	addi	sp,sp,-24
   10450:	dcc00315 	stw	r19,12(sp)
   10454:	dc800215 	stw	r18,8(sp)
   10458:	dc000015 	stw	r16,0(sp)
   1045c:	dfc00515 	stw	ra,20(sp)
   10460:	dd000415 	stw	r20,16(sp)
   10464:	dc400115 	stw	r17,4(sp)
   10468:	308000cc 	andi	r2,r6,3
   1046c:	3021883a 	mov	r16,r6
   10470:	2027883a 	mov	r19,r4
   10474:	2825883a 	mov	r18,r5
   10478:	10002e1e 	bne	r2,zero,10534 <__pow5mult+0xe8>
   1047c:	8021d0ba 	srai	r16,r16,2
   10480:	80001a26 	beq	r16,zero,104ec <__pow5mult+0xa0>
   10484:	9c401217 	ldw	r17,72(r19)
   10488:	8800061e 	bne	r17,zero,104a4 <__pow5mult+0x58>
   1048c:	00003406 	br	10560 <__pow5mult+0x114>
   10490:	8021d07a 	srai	r16,r16,1
   10494:	80001526 	beq	r16,zero,104ec <__pow5mult+0xa0>
   10498:	88800017 	ldw	r2,0(r17)
   1049c:	10001c26 	beq	r2,zero,10510 <__pow5mult+0xc4>
   104a0:	1023883a 	mov	r17,r2
   104a4:	80c0004c 	andi	r3,r16,1
   104a8:	183ff926 	beq	r3,zero,10490 <__alt_mem_descriptor_memory+0xdefd0490>
   104ac:	900b883a 	mov	r5,r18
   104b0:	880d883a 	mov	r6,r17
   104b4:	9809883a 	mov	r4,r19
   104b8:	00102500 	call	10250 <__multiply>
   104bc:	90001b26 	beq	r18,zero,1052c <__pow5mult+0xe0>
   104c0:	91c00117 	ldw	r7,4(r18)
   104c4:	98c01317 	ldw	r3,76(r19)
   104c8:	8021d07a 	srai	r16,r16,1
   104cc:	39cf883a 	add	r7,r7,r7
   104d0:	39cf883a 	add	r7,r7,r7
   104d4:	19c7883a 	add	r3,r3,r7
   104d8:	19000017 	ldw	r4,0(r3)
   104dc:	91000015 	stw	r4,0(r18)
   104e0:	1c800015 	stw	r18,0(r3)
   104e4:	1025883a 	mov	r18,r2
   104e8:	803feb1e 	bne	r16,zero,10498 <__alt_mem_descriptor_memory+0xdefd0498>
   104ec:	9005883a 	mov	r2,r18
   104f0:	dfc00517 	ldw	ra,20(sp)
   104f4:	dd000417 	ldw	r20,16(sp)
   104f8:	dcc00317 	ldw	r19,12(sp)
   104fc:	dc800217 	ldw	r18,8(sp)
   10500:	dc400117 	ldw	r17,4(sp)
   10504:	dc000017 	ldw	r16,0(sp)
   10508:	dec00604 	addi	sp,sp,24
   1050c:	f800283a 	ret
   10510:	9809883a 	mov	r4,r19
   10514:	880b883a 	mov	r5,r17
   10518:	880d883a 	mov	r6,r17
   1051c:	00102500 	call	10250 <__multiply>
   10520:	88800015 	stw	r2,0(r17)
   10524:	10000015 	stw	zero,0(r2)
   10528:	003fdd06 	br	104a0 <__alt_mem_descriptor_memory+0xdefd04a0>
   1052c:	1025883a 	mov	r18,r2
   10530:	003fd706 	br	10490 <__alt_mem_descriptor_memory+0xdefd0490>
   10534:	10bfffc4 	addi	r2,r2,-1
   10538:	1085883a 	add	r2,r2,r2
   1053c:	00c00174 	movhi	r3,5
   10540:	18f5bc04 	addi	r3,r3,-10512
   10544:	1085883a 	add	r2,r2,r2
   10548:	1885883a 	add	r2,r3,r2
   1054c:	11800017 	ldw	r6,0(r2)
   10550:	000f883a 	mov	r7,zero
   10554:	000fee40 	call	fee4 <__multadd>
   10558:	1025883a 	mov	r18,r2
   1055c:	003fc706 	br	1047c <__alt_mem_descriptor_memory+0xdefd047c>
   10560:	05000044 	movi	r20,1
   10564:	9809883a 	mov	r4,r19
   10568:	a00b883a 	mov	r5,r20
   1056c:	000fe140 	call	fe14 <_Balloc>
   10570:	1023883a 	mov	r17,r2
   10574:	00809c44 	movi	r2,625
   10578:	88800515 	stw	r2,20(r17)
   1057c:	8d000415 	stw	r20,16(r17)
   10580:	9c401215 	stw	r17,72(r19)
   10584:	88000015 	stw	zero,0(r17)
   10588:	003fc606 	br	104a4 <__alt_mem_descriptor_memory+0xdefd04a4>

0001058c <__lshift>:
   1058c:	defff904 	addi	sp,sp,-28
   10590:	dd000415 	stw	r20,16(sp)
   10594:	dcc00315 	stw	r19,12(sp)
   10598:	3029d17a 	srai	r20,r6,5
   1059c:	2cc00417 	ldw	r19,16(r5)
   105a0:	28800217 	ldw	r2,8(r5)
   105a4:	dd400515 	stw	r21,20(sp)
   105a8:	a4e7883a 	add	r19,r20,r19
   105ac:	dc800215 	stw	r18,8(sp)
   105b0:	dc400115 	stw	r17,4(sp)
   105b4:	dc000015 	stw	r16,0(sp)
   105b8:	dfc00615 	stw	ra,24(sp)
   105bc:	9c000044 	addi	r16,r19,1
   105c0:	2823883a 	mov	r17,r5
   105c4:	302b883a 	mov	r21,r6
   105c8:	2025883a 	mov	r18,r4
   105cc:	29400117 	ldw	r5,4(r5)
   105d0:	1400030e 	bge	r2,r16,105e0 <__lshift+0x54>
   105d4:	1085883a 	add	r2,r2,r2
   105d8:	29400044 	addi	r5,r5,1
   105dc:	143ffd16 	blt	r2,r16,105d4 <__alt_mem_descriptor_memory+0xdefd05d4>
   105e0:	9009883a 	mov	r4,r18
   105e4:	000fe140 	call	fe14 <_Balloc>
   105e8:	11c00504 	addi	r7,r2,20
   105ec:	0500090e 	bge	zero,r20,10614 <__lshift+0x88>
   105f0:	3811883a 	mov	r8,r7
   105f4:	0007883a 	mov	r3,zero
   105f8:	40000015 	stw	zero,0(r8)
   105fc:	18c00044 	addi	r3,r3,1
   10600:	42000104 	addi	r8,r8,4
   10604:	1d3ffc1e 	bne	r3,r20,105f8 <__alt_mem_descriptor_memory+0xdefd05f8>
   10608:	18c7883a 	add	r3,r3,r3
   1060c:	18c7883a 	add	r3,r3,r3
   10610:	38cf883a 	add	r7,r7,r3
   10614:	89000417 	ldw	r4,16(r17)
   10618:	88c00504 	addi	r3,r17,20
   1061c:	a98007cc 	andi	r6,r21,31
   10620:	2109883a 	add	r4,r4,r4
   10624:	2109883a 	add	r4,r4,r4
   10628:	1909883a 	add	r4,r3,r4
   1062c:	30002326 	beq	r6,zero,106bc <__lshift+0x130>
   10630:	01400804 	movi	r5,32
   10634:	298bc83a 	sub	r5,r5,r6
   10638:	0013883a 	mov	r9,zero
   1063c:	1a000017 	ldw	r8,0(r3)
   10640:	3815883a 	mov	r10,r7
   10644:	39c00104 	addi	r7,r7,4
   10648:	4190983a 	sll	r8,r8,r6
   1064c:	18c00104 	addi	r3,r3,4
   10650:	4a10b03a 	or	r8,r9,r8
   10654:	3a3fff15 	stw	r8,-4(r7)
   10658:	1a3fff17 	ldw	r8,-4(r3)
   1065c:	4152d83a 	srl	r9,r8,r5
   10660:	193ff636 	bltu	r3,r4,1063c <__alt_mem_descriptor_memory+0xdefd063c>
   10664:	52400115 	stw	r9,4(r10)
   10668:	48000126 	beq	r9,zero,10670 <__lshift+0xe4>
   1066c:	9c000084 	addi	r16,r19,2
   10670:	89000117 	ldw	r4,4(r17)
   10674:	90c01317 	ldw	r3,76(r18)
   10678:	843fffc4 	addi	r16,r16,-1
   1067c:	2109883a 	add	r4,r4,r4
   10680:	2109883a 	add	r4,r4,r4
   10684:	1907883a 	add	r3,r3,r4
   10688:	19000017 	ldw	r4,0(r3)
   1068c:	14000415 	stw	r16,16(r2)
   10690:	89000015 	stw	r4,0(r17)
   10694:	1c400015 	stw	r17,0(r3)
   10698:	dfc00617 	ldw	ra,24(sp)
   1069c:	dd400517 	ldw	r21,20(sp)
   106a0:	dd000417 	ldw	r20,16(sp)
   106a4:	dcc00317 	ldw	r19,12(sp)
   106a8:	dc800217 	ldw	r18,8(sp)
   106ac:	dc400117 	ldw	r17,4(sp)
   106b0:	dc000017 	ldw	r16,0(sp)
   106b4:	dec00704 	addi	sp,sp,28
   106b8:	f800283a 	ret
   106bc:	19400017 	ldw	r5,0(r3)
   106c0:	39c00104 	addi	r7,r7,4
   106c4:	18c00104 	addi	r3,r3,4
   106c8:	397fff15 	stw	r5,-4(r7)
   106cc:	193ffb36 	bltu	r3,r4,106bc <__alt_mem_descriptor_memory+0xdefd06bc>
   106d0:	003fe706 	br	10670 <__alt_mem_descriptor_memory+0xdefd0670>

000106d4 <__mcmp>:
   106d4:	20800417 	ldw	r2,16(r4)
   106d8:	28c00417 	ldw	r3,16(r5)
   106dc:	10c5c83a 	sub	r2,r2,r3
   106e0:	1000111e 	bne	r2,zero,10728 <__mcmp+0x54>
   106e4:	18c7883a 	add	r3,r3,r3
   106e8:	18c7883a 	add	r3,r3,r3
   106ec:	21000504 	addi	r4,r4,20
   106f0:	29400504 	addi	r5,r5,20
   106f4:	20c5883a 	add	r2,r4,r3
   106f8:	28cb883a 	add	r5,r5,r3
   106fc:	00000106 	br	10704 <__mcmp+0x30>
   10700:	20800a2e 	bgeu	r4,r2,1072c <__mcmp+0x58>
   10704:	10bfff04 	addi	r2,r2,-4
   10708:	297fff04 	addi	r5,r5,-4
   1070c:	11800017 	ldw	r6,0(r2)
   10710:	28c00017 	ldw	r3,0(r5)
   10714:	30fffa26 	beq	r6,r3,10700 <__alt_mem_descriptor_memory+0xdefd0700>
   10718:	30c00236 	bltu	r6,r3,10724 <__mcmp+0x50>
   1071c:	00800044 	movi	r2,1
   10720:	f800283a 	ret
   10724:	00bfffc4 	movi	r2,-1
   10728:	f800283a 	ret
   1072c:	0005883a 	mov	r2,zero
   10730:	f800283a 	ret

00010734 <__mdiff>:
   10734:	defffb04 	addi	sp,sp,-20
   10738:	dc000015 	stw	r16,0(sp)
   1073c:	2821883a 	mov	r16,r5
   10740:	dcc00315 	stw	r19,12(sp)
   10744:	300b883a 	mov	r5,r6
   10748:	2027883a 	mov	r19,r4
   1074c:	8009883a 	mov	r4,r16
   10750:	dc800215 	stw	r18,8(sp)
   10754:	dfc00415 	stw	ra,16(sp)
   10758:	dc400115 	stw	r17,4(sp)
   1075c:	3025883a 	mov	r18,r6
   10760:	00106d40 	call	106d4 <__mcmp>
   10764:	10005226 	beq	r2,zero,108b0 <__mdiff+0x17c>
   10768:	10004c16 	blt	r2,zero,1089c <__mdiff+0x168>
   1076c:	0023883a 	mov	r17,zero
   10770:	81400117 	ldw	r5,4(r16)
   10774:	9809883a 	mov	r4,r19
   10778:	000fe140 	call	fe14 <_Balloc>
   1077c:	83400417 	ldw	r13,16(r16)
   10780:	93800417 	ldw	r14,16(r18)
   10784:	81000504 	addi	r4,r16,20
   10788:	6b59883a 	add	r12,r13,r13
   1078c:	739d883a 	add	r14,r14,r14
   10790:	6319883a 	add	r12,r12,r12
   10794:	91800504 	addi	r6,r18,20
   10798:	739d883a 	add	r14,r14,r14
   1079c:	14400315 	stw	r17,12(r2)
   107a0:	2319883a 	add	r12,r4,r12
   107a4:	339d883a 	add	r14,r6,r14
   107a8:	12400504 	addi	r9,r2,20
   107ac:	0007883a 	mov	r3,zero
   107b0:	22000017 	ldw	r8,0(r4)
   107b4:	32800017 	ldw	r10,0(r6)
   107b8:	4ac00104 	addi	r11,r9,4
   107bc:	41ffffcc 	andi	r7,r8,65535
   107c0:	38c7883a 	add	r3,r7,r3
   107c4:	51ffffcc 	andi	r7,r10,65535
   107c8:	19cfc83a 	sub	r7,r3,r7
   107cc:	4010d43a 	srli	r8,r8,16
   107d0:	5014d43a 	srli	r10,r10,16
   107d4:	3807d43a 	srai	r3,r7,16
   107d8:	39ffffcc 	andi	r7,r7,65535
   107dc:	4291c83a 	sub	r8,r8,r10
   107e0:	40c7883a 	add	r3,r8,r3
   107e4:	1810943a 	slli	r8,r3,16
   107e8:	31800104 	addi	r6,r6,4
   107ec:	21000104 	addi	r4,r4,4
   107f0:	41ceb03a 	or	r7,r8,r7
   107f4:	49c00015 	stw	r7,0(r9)
   107f8:	1807d43a 	srai	r3,r3,16
   107fc:	580b883a 	mov	r5,r11
   10800:	5813883a 	mov	r9,r11
   10804:	33bfea36 	bltu	r6,r14,107b0 <__alt_mem_descriptor_memory+0xdefd07b0>
   10808:	2011883a 	mov	r8,r4
   1080c:	2300152e 	bgeu	r4,r12,10864 <__mdiff+0x130>
   10810:	21400017 	ldw	r5,0(r4)
   10814:	4a400104 	addi	r9,r9,4
   10818:	21000104 	addi	r4,r4,4
   1081c:	29ffffcc 	andi	r7,r5,65535
   10820:	38c7883a 	add	r3,r7,r3
   10824:	280ad43a 	srli	r5,r5,16
   10828:	180dd43a 	srai	r6,r3,16
   1082c:	19ffffcc 	andi	r7,r3,65535
   10830:	3147883a 	add	r3,r6,r5
   10834:	180a943a 	slli	r5,r3,16
   10838:	1807d43a 	srai	r3,r3,16
   1083c:	29ceb03a 	or	r7,r5,r7
   10840:	49ffff15 	stw	r7,-4(r9)
   10844:	233ff236 	bltu	r4,r12,10810 <__alt_mem_descriptor_memory+0xdefd0810>
   10848:	0206303a 	nor	r3,zero,r8
   1084c:	1b07883a 	add	r3,r3,r12
   10850:	1806d0ba 	srli	r3,r3,2
   10854:	18c00044 	addi	r3,r3,1
   10858:	18c7883a 	add	r3,r3,r3
   1085c:	18c7883a 	add	r3,r3,r3
   10860:	58cb883a 	add	r5,r11,r3
   10864:	28ffff04 	addi	r3,r5,-4
   10868:	3800041e 	bne	r7,zero,1087c <__mdiff+0x148>
   1086c:	18ffff04 	addi	r3,r3,-4
   10870:	19000017 	ldw	r4,0(r3)
   10874:	6b7fffc4 	addi	r13,r13,-1
   10878:	203ffc26 	beq	r4,zero,1086c <__alt_mem_descriptor_memory+0xdefd086c>
   1087c:	13400415 	stw	r13,16(r2)
   10880:	dfc00417 	ldw	ra,16(sp)
   10884:	dcc00317 	ldw	r19,12(sp)
   10888:	dc800217 	ldw	r18,8(sp)
   1088c:	dc400117 	ldw	r17,4(sp)
   10890:	dc000017 	ldw	r16,0(sp)
   10894:	dec00504 	addi	sp,sp,20
   10898:	f800283a 	ret
   1089c:	8005883a 	mov	r2,r16
   108a0:	04400044 	movi	r17,1
   108a4:	9021883a 	mov	r16,r18
   108a8:	1025883a 	mov	r18,r2
   108ac:	003fb006 	br	10770 <__alt_mem_descriptor_memory+0xdefd0770>
   108b0:	9809883a 	mov	r4,r19
   108b4:	000b883a 	mov	r5,zero
   108b8:	000fe140 	call	fe14 <_Balloc>
   108bc:	00c00044 	movi	r3,1
   108c0:	10c00415 	stw	r3,16(r2)
   108c4:	10000515 	stw	zero,20(r2)
   108c8:	003fed06 	br	10880 <__alt_mem_descriptor_memory+0xdefd0880>

000108cc <__ulp>:
   108cc:	295ffc2c 	andhi	r5,r5,32752
   108d0:	00bf3034 	movhi	r2,64704
   108d4:	2887883a 	add	r3,r5,r2
   108d8:	00c0020e 	bge	zero,r3,108e4 <__ulp+0x18>
   108dc:	0005883a 	mov	r2,zero
   108e0:	f800283a 	ret
   108e4:	00c7c83a 	sub	r3,zero,r3
   108e8:	180bd53a 	srai	r5,r3,20
   108ec:	008004c4 	movi	r2,19
   108f0:	11400a0e 	bge	r2,r5,1091c <__ulp+0x50>
   108f4:	00800c84 	movi	r2,50
   108f8:	0007883a 	mov	r3,zero
   108fc:	11400516 	blt	r2,r5,10914 <__ulp+0x48>
   10900:	00800cc4 	movi	r2,51
   10904:	114bc83a 	sub	r5,r2,r5
   10908:	00800044 	movi	r2,1
   1090c:	1144983a 	sll	r2,r2,r5
   10910:	f800283a 	ret
   10914:	00800044 	movi	r2,1
   10918:	f800283a 	ret
   1091c:	00800234 	movhi	r2,8
   10920:	1147d83a 	sra	r3,r2,r5
   10924:	0005883a 	mov	r2,zero
   10928:	f800283a 	ret

0001092c <__b2d>:
   1092c:	defffa04 	addi	sp,sp,-24
   10930:	dc000015 	stw	r16,0(sp)
   10934:	24000417 	ldw	r16,16(r4)
   10938:	dc400115 	stw	r17,4(sp)
   1093c:	24400504 	addi	r17,r4,20
   10940:	8421883a 	add	r16,r16,r16
   10944:	8421883a 	add	r16,r16,r16
   10948:	8c21883a 	add	r16,r17,r16
   1094c:	dc800215 	stw	r18,8(sp)
   10950:	84bfff17 	ldw	r18,-4(r16)
   10954:	dd000415 	stw	r20,16(sp)
   10958:	dcc00315 	stw	r19,12(sp)
   1095c:	9009883a 	mov	r4,r18
   10960:	2829883a 	mov	r20,r5
   10964:	dfc00515 	stw	ra,20(sp)
   10968:	00100fc0 	call	100fc <__hi0bits>
   1096c:	00c00804 	movi	r3,32
   10970:	1887c83a 	sub	r3,r3,r2
   10974:	a0c00015 	stw	r3,0(r20)
   10978:	00c00284 	movi	r3,10
   1097c:	84ffff04 	addi	r19,r16,-4
   10980:	18801216 	blt	r3,r2,109cc <__b2d+0xa0>
   10984:	014002c4 	movi	r5,11
   10988:	2889c83a 	sub	r4,r5,r2
   1098c:	9106d83a 	srl	r3,r18,r4
   10990:	18cffc34 	orhi	r3,r3,16368
   10994:	8cc0282e 	bgeu	r17,r19,10a38 <__b2d+0x10c>
   10998:	817ffe17 	ldw	r5,-8(r16)
   1099c:	290ad83a 	srl	r5,r5,r4
   109a0:	10800544 	addi	r2,r2,21
   109a4:	9084983a 	sll	r2,r18,r2
   109a8:	2884b03a 	or	r2,r5,r2
   109ac:	dfc00517 	ldw	ra,20(sp)
   109b0:	dd000417 	ldw	r20,16(sp)
   109b4:	dcc00317 	ldw	r19,12(sp)
   109b8:	dc800217 	ldw	r18,8(sp)
   109bc:	dc400117 	ldw	r17,4(sp)
   109c0:	dc000017 	ldw	r16,0(sp)
   109c4:	dec00604 	addi	sp,sp,24
   109c8:	f800283a 	ret
   109cc:	113ffd44 	addi	r4,r2,-11
   109d0:	8cc00f2e 	bgeu	r17,r19,10a10 <__b2d+0xe4>
   109d4:	81bffe04 	addi	r6,r16,-8
   109d8:	817ffe17 	ldw	r5,-8(r16)
   109dc:	20001326 	beq	r4,zero,10a2c <__b2d+0x100>
   109e0:	00c00ac4 	movi	r3,43
   109e4:	1885c83a 	sub	r2,r3,r2
   109e8:	2886d83a 	srl	r3,r5,r2
   109ec:	9124983a 	sll	r18,r18,r4
   109f0:	90e4b03a 	or	r18,r18,r3
   109f4:	90cffc34 	orhi	r3,r18,16368
   109f8:	8980112e 	bgeu	r17,r6,10a40 <__b2d+0x114>
   109fc:	81bffd17 	ldw	r6,-12(r16)
   10a00:	308cd83a 	srl	r6,r6,r2
   10a04:	2904983a 	sll	r2,r5,r4
   10a08:	1184b03a 	or	r2,r2,r6
   10a0c:	003fe706 	br	109ac <__alt_mem_descriptor_memory+0xdefd09ac>
   10a10:	20000526 	beq	r4,zero,10a28 <__b2d+0xfc>
   10a14:	9124983a 	sll	r18,r18,r4
   10a18:	000d883a 	mov	r6,zero
   10a1c:	000b883a 	mov	r5,zero
   10a20:	90cffc34 	orhi	r3,r18,16368
   10a24:	003ff706 	br	10a04 <__alt_mem_descriptor_memory+0xdefd0a04>
   10a28:	000b883a 	mov	r5,zero
   10a2c:	90cffc34 	orhi	r3,r18,16368
   10a30:	2805883a 	mov	r2,r5
   10a34:	003fdd06 	br	109ac <__alt_mem_descriptor_memory+0xdefd09ac>
   10a38:	000b883a 	mov	r5,zero
   10a3c:	003fd806 	br	109a0 <__alt_mem_descriptor_memory+0xdefd09a0>
   10a40:	000d883a 	mov	r6,zero
   10a44:	003fef06 	br	10a04 <__alt_mem_descriptor_memory+0xdefd0a04>

00010a48 <__d2b>:
   10a48:	defff704 	addi	sp,sp,-36
   10a4c:	dc000215 	stw	r16,8(sp)
   10a50:	3021883a 	mov	r16,r6
   10a54:	dc400315 	stw	r17,12(sp)
   10a58:	8022907a 	slli	r17,r16,1
   10a5c:	dd400715 	stw	r21,28(sp)
   10a60:	282b883a 	mov	r21,r5
   10a64:	01400044 	movi	r5,1
   10a68:	dd000615 	stw	r20,24(sp)
   10a6c:	dcc00515 	stw	r19,20(sp)
   10a70:	dc800415 	stw	r18,16(sp)
   10a74:	dfc00815 	stw	ra,32(sp)
   10a78:	3829883a 	mov	r20,r7
   10a7c:	dc800917 	ldw	r18,36(sp)
   10a80:	8822d57a 	srli	r17,r17,21
   10a84:	000fe140 	call	fe14 <_Balloc>
   10a88:	1027883a 	mov	r19,r2
   10a8c:	00800434 	movhi	r2,16
   10a90:	10bfffc4 	addi	r2,r2,-1
   10a94:	808c703a 	and	r6,r16,r2
   10a98:	88000126 	beq	r17,zero,10aa0 <__d2b+0x58>
   10a9c:	31800434 	orhi	r6,r6,16
   10aa0:	d9800015 	stw	r6,0(sp)
   10aa4:	a8001f26 	beq	r21,zero,10b24 <__d2b+0xdc>
   10aa8:	d9000104 	addi	r4,sp,4
   10aac:	dd400115 	stw	r21,4(sp)
   10ab0:	00101640 	call	10164 <__lo0bits>
   10ab4:	d8c00017 	ldw	r3,0(sp)
   10ab8:	1000291e 	bne	r2,zero,10b60 <__d2b+0x118>
   10abc:	d9000117 	ldw	r4,4(sp)
   10ac0:	99000515 	stw	r4,20(r19)
   10ac4:	1820c03a 	cmpne	r16,r3,zero
   10ac8:	84000044 	addi	r16,r16,1
   10acc:	98c00615 	stw	r3,24(r19)
   10ad0:	9c000415 	stw	r16,16(r19)
   10ad4:	88001b1e 	bne	r17,zero,10b44 <__d2b+0xfc>
   10ad8:	800690ba 	slli	r3,r16,2
   10adc:	10bef384 	addi	r2,r2,-1074
   10ae0:	a0800015 	stw	r2,0(r20)
   10ae4:	98c5883a 	add	r2,r19,r3
   10ae8:	11000417 	ldw	r4,16(r2)
   10aec:	8020917a 	slli	r16,r16,5
   10af0:	00100fc0 	call	100fc <__hi0bits>
   10af4:	8085c83a 	sub	r2,r16,r2
   10af8:	90800015 	stw	r2,0(r18)
   10afc:	9805883a 	mov	r2,r19
   10b00:	dfc00817 	ldw	ra,32(sp)
   10b04:	dd400717 	ldw	r21,28(sp)
   10b08:	dd000617 	ldw	r20,24(sp)
   10b0c:	dcc00517 	ldw	r19,20(sp)
   10b10:	dc800417 	ldw	r18,16(sp)
   10b14:	dc400317 	ldw	r17,12(sp)
   10b18:	dc000217 	ldw	r16,8(sp)
   10b1c:	dec00904 	addi	sp,sp,36
   10b20:	f800283a 	ret
   10b24:	d809883a 	mov	r4,sp
   10b28:	00101640 	call	10164 <__lo0bits>
   10b2c:	d8c00017 	ldw	r3,0(sp)
   10b30:	04000044 	movi	r16,1
   10b34:	9c000415 	stw	r16,16(r19)
   10b38:	98c00515 	stw	r3,20(r19)
   10b3c:	10800804 	addi	r2,r2,32
   10b40:	883fe526 	beq	r17,zero,10ad8 <__alt_mem_descriptor_memory+0xdefd0ad8>
   10b44:	8c7ef344 	addi	r17,r17,-1075
   10b48:	88a3883a 	add	r17,r17,r2
   10b4c:	00c00d44 	movi	r3,53
   10b50:	a4400015 	stw	r17,0(r20)
   10b54:	1885c83a 	sub	r2,r3,r2
   10b58:	90800015 	stw	r2,0(r18)
   10b5c:	003fe706 	br	10afc <__alt_mem_descriptor_memory+0xdefd0afc>
   10b60:	01000804 	movi	r4,32
   10b64:	2089c83a 	sub	r4,r4,r2
   10b68:	1908983a 	sll	r4,r3,r4
   10b6c:	d9400117 	ldw	r5,4(sp)
   10b70:	1886d83a 	srl	r3,r3,r2
   10b74:	2148b03a 	or	r4,r4,r5
   10b78:	99000515 	stw	r4,20(r19)
   10b7c:	d8c00015 	stw	r3,0(sp)
   10b80:	003fd006 	br	10ac4 <__alt_mem_descriptor_memory+0xdefd0ac4>

00010b84 <__ratio>:
   10b84:	defff904 	addi	sp,sp,-28
   10b88:	dc400315 	stw	r17,12(sp)
   10b8c:	2823883a 	mov	r17,r5
   10b90:	d9400104 	addi	r5,sp,4
   10b94:	dfc00615 	stw	ra,24(sp)
   10b98:	dcc00515 	stw	r19,20(sp)
   10b9c:	dc800415 	stw	r18,16(sp)
   10ba0:	2027883a 	mov	r19,r4
   10ba4:	dc000215 	stw	r16,8(sp)
   10ba8:	001092c0 	call	1092c <__b2d>
   10bac:	8809883a 	mov	r4,r17
   10bb0:	d80b883a 	mov	r5,sp
   10bb4:	1025883a 	mov	r18,r2
   10bb8:	1821883a 	mov	r16,r3
   10bbc:	001092c0 	call	1092c <__b2d>
   10bc0:	8a400417 	ldw	r9,16(r17)
   10bc4:	9a000417 	ldw	r8,16(r19)
   10bc8:	100d883a 	mov	r6,r2
   10bcc:	d8800017 	ldw	r2,0(sp)
   10bd0:	4251c83a 	sub	r8,r8,r9
   10bd4:	4012917a 	slli	r9,r8,5
   10bd8:	da000117 	ldw	r8,4(sp)
   10bdc:	4091c83a 	sub	r8,r8,r2
   10be0:	4251883a 	add	r8,r8,r9
   10be4:	02000d0e 	bge	zero,r8,10c1c <__ratio+0x98>
   10be8:	4010953a 	slli	r8,r8,20
   10bec:	4421883a 	add	r16,r8,r16
   10bf0:	9009883a 	mov	r4,r18
   10bf4:	800b883a 	mov	r5,r16
   10bf8:	180f883a 	mov	r7,r3
   10bfc:	0015afc0 	call	15afc <__divdf3>
   10c00:	dfc00617 	ldw	ra,24(sp)
   10c04:	dcc00517 	ldw	r19,20(sp)
   10c08:	dc800417 	ldw	r18,16(sp)
   10c0c:	dc400317 	ldw	r17,12(sp)
   10c10:	dc000217 	ldw	r16,8(sp)
   10c14:	dec00704 	addi	sp,sp,28
   10c18:	f800283a 	ret
   10c1c:	4010953a 	slli	r8,r8,20
   10c20:	1a07c83a 	sub	r3,r3,r8
   10c24:	003ff206 	br	10bf0 <__alt_mem_descriptor_memory+0xdefd0bf0>

00010c28 <_mprec_log10>:
   10c28:	defffe04 	addi	sp,sp,-8
   10c2c:	dc000015 	stw	r16,0(sp)
   10c30:	dfc00115 	stw	ra,4(sp)
   10c34:	008005c4 	movi	r2,23
   10c38:	2021883a 	mov	r16,r4
   10c3c:	11000d0e 	bge	r2,r4,10c74 <_mprec_log10+0x4c>
   10c40:	0005883a 	mov	r2,zero
   10c44:	00cffc34 	movhi	r3,16368
   10c48:	843fffc4 	addi	r16,r16,-1
   10c4c:	1009883a 	mov	r4,r2
   10c50:	180b883a 	mov	r5,r3
   10c54:	000d883a 	mov	r6,zero
   10c58:	01d00934 	movhi	r7,16420
   10c5c:	001660c0 	call	1660c <__muldf3>
   10c60:	803ff91e 	bne	r16,zero,10c48 <__alt_mem_descriptor_memory+0xdefd0c48>
   10c64:	dfc00117 	ldw	ra,4(sp)
   10c68:	dc000017 	ldw	r16,0(sp)
   10c6c:	dec00204 	addi	sp,sp,8
   10c70:	f800283a 	ret
   10c74:	202090fa 	slli	r16,r4,3
   10c78:	00800174 	movhi	r2,5
   10c7c:	10b5d304 	addi	r2,r2,-10420
   10c80:	1421883a 	add	r16,r2,r16
   10c84:	80800017 	ldw	r2,0(r16)
   10c88:	80c00117 	ldw	r3,4(r16)
   10c8c:	dfc00117 	ldw	ra,4(sp)
   10c90:	dc000017 	ldw	r16,0(sp)
   10c94:	dec00204 	addi	sp,sp,8
   10c98:	f800283a 	ret

00010c9c <__copybits>:
   10c9c:	297fffc4 	addi	r5,r5,-1
   10ca0:	280fd17a 	srai	r7,r5,5
   10ca4:	30c00417 	ldw	r3,16(r6)
   10ca8:	30800504 	addi	r2,r6,20
   10cac:	39c00044 	addi	r7,r7,1
   10cb0:	18c7883a 	add	r3,r3,r3
   10cb4:	39cf883a 	add	r7,r7,r7
   10cb8:	18c7883a 	add	r3,r3,r3
   10cbc:	39cf883a 	add	r7,r7,r7
   10cc0:	10c7883a 	add	r3,r2,r3
   10cc4:	21cf883a 	add	r7,r4,r7
   10cc8:	10c00d2e 	bgeu	r2,r3,10d00 <__copybits+0x64>
   10ccc:	200b883a 	mov	r5,r4
   10cd0:	12000017 	ldw	r8,0(r2)
   10cd4:	29400104 	addi	r5,r5,4
   10cd8:	10800104 	addi	r2,r2,4
   10cdc:	2a3fff15 	stw	r8,-4(r5)
   10ce0:	10fffb36 	bltu	r2,r3,10cd0 <__alt_mem_descriptor_memory+0xdefd0cd0>
   10ce4:	1985c83a 	sub	r2,r3,r6
   10ce8:	10bffac4 	addi	r2,r2,-21
   10cec:	1004d0ba 	srli	r2,r2,2
   10cf0:	10800044 	addi	r2,r2,1
   10cf4:	1085883a 	add	r2,r2,r2
   10cf8:	1085883a 	add	r2,r2,r2
   10cfc:	2089883a 	add	r4,r4,r2
   10d00:	21c0032e 	bgeu	r4,r7,10d10 <__copybits+0x74>
   10d04:	20000015 	stw	zero,0(r4)
   10d08:	21000104 	addi	r4,r4,4
   10d0c:	21fffd36 	bltu	r4,r7,10d04 <__alt_mem_descriptor_memory+0xdefd0d04>
   10d10:	f800283a 	ret

00010d14 <__any_on>:
   10d14:	20c00417 	ldw	r3,16(r4)
   10d18:	2805d17a 	srai	r2,r5,5
   10d1c:	21000504 	addi	r4,r4,20
   10d20:	18800d0e 	bge	r3,r2,10d58 <__any_on+0x44>
   10d24:	18c7883a 	add	r3,r3,r3
   10d28:	18c7883a 	add	r3,r3,r3
   10d2c:	20c7883a 	add	r3,r4,r3
   10d30:	20c0192e 	bgeu	r4,r3,10d98 <__any_on+0x84>
   10d34:	18bfff17 	ldw	r2,-4(r3)
   10d38:	18ffff04 	addi	r3,r3,-4
   10d3c:	1000041e 	bne	r2,zero,10d50 <__any_on+0x3c>
   10d40:	20c0142e 	bgeu	r4,r3,10d94 <__any_on+0x80>
   10d44:	18ffff04 	addi	r3,r3,-4
   10d48:	19400017 	ldw	r5,0(r3)
   10d4c:	283ffc26 	beq	r5,zero,10d40 <__alt_mem_descriptor_memory+0xdefd0d40>
   10d50:	00800044 	movi	r2,1
   10d54:	f800283a 	ret
   10d58:	10c00a0e 	bge	r2,r3,10d84 <__any_on+0x70>
   10d5c:	1085883a 	add	r2,r2,r2
   10d60:	1085883a 	add	r2,r2,r2
   10d64:	294007cc 	andi	r5,r5,31
   10d68:	2087883a 	add	r3,r4,r2
   10d6c:	283ff026 	beq	r5,zero,10d30 <__alt_mem_descriptor_memory+0xdefd0d30>
   10d70:	19800017 	ldw	r6,0(r3)
   10d74:	3144d83a 	srl	r2,r6,r5
   10d78:	114a983a 	sll	r5,r2,r5
   10d7c:	29bff41e 	bne	r5,r6,10d50 <__alt_mem_descriptor_memory+0xdefd0d50>
   10d80:	003feb06 	br	10d30 <__alt_mem_descriptor_memory+0xdefd0d30>
   10d84:	1085883a 	add	r2,r2,r2
   10d88:	1085883a 	add	r2,r2,r2
   10d8c:	2087883a 	add	r3,r4,r2
   10d90:	003fe706 	br	10d30 <__alt_mem_descriptor_memory+0xdefd0d30>
   10d94:	f800283a 	ret
   10d98:	0005883a 	mov	r2,zero
   10d9c:	f800283a 	ret

00010da0 <_realloc_r>:
   10da0:	defff604 	addi	sp,sp,-40
   10da4:	dcc00315 	stw	r19,12(sp)
   10da8:	dc400115 	stw	r17,4(sp)
   10dac:	dfc00915 	stw	ra,36(sp)
   10db0:	df000815 	stw	fp,32(sp)
   10db4:	ddc00715 	stw	r23,28(sp)
   10db8:	dd800615 	stw	r22,24(sp)
   10dbc:	dd400515 	stw	r21,20(sp)
   10dc0:	dd000415 	stw	r20,16(sp)
   10dc4:	dc800215 	stw	r18,8(sp)
   10dc8:	dc000015 	stw	r16,0(sp)
   10dcc:	2827883a 	mov	r19,r5
   10dd0:	3023883a 	mov	r17,r6
   10dd4:	2800bf26 	beq	r5,zero,110d4 <_realloc_r+0x334>
   10dd8:	2025883a 	mov	r18,r4
   10ddc:	00180200 	call	18020 <__malloc_lock>
   10de0:	98ffff17 	ldw	r3,-4(r19)
   10de4:	01bfff04 	movi	r6,-4
   10de8:	890002c4 	addi	r4,r17,11
   10dec:	01c00584 	movi	r7,22
   10df0:	9d7ffe04 	addi	r21,r19,-8
   10df4:	19a0703a 	and	r16,r3,r6
   10df8:	39003f2e 	bgeu	r7,r4,10ef8 <_realloc_r+0x158>
   10dfc:	053ffe04 	movi	r20,-8
   10e00:	2528703a 	and	r20,r4,r20
   10e04:	a00f883a 	mov	r7,r20
   10e08:	a0008216 	blt	r20,zero,11014 <_realloc_r+0x274>
   10e0c:	a4408136 	bltu	r20,r17,11014 <_realloc_r+0x274>
   10e10:	81c03c0e 	bge	r16,r7,10f04 <_realloc_r+0x164>
   10e14:	07000174 	movhi	fp,5
   10e18:	e700e504 	addi	fp,fp,916
   10e1c:	e1000217 	ldw	r4,8(fp)
   10e20:	ac05883a 	add	r2,r21,r16
   10e24:	2080bf26 	beq	r4,r2,11124 <_realloc_r+0x384>
   10e28:	11000117 	ldw	r4,4(r2)
   10e2c:	023fff84 	movi	r8,-2
   10e30:	2210703a 	and	r8,r4,r8
   10e34:	1211883a 	add	r8,r2,r8
   10e38:	41400117 	ldw	r5,4(r8)
   10e3c:	2940004c 	andi	r5,r5,1
   10e40:	28004a1e 	bne	r5,zero,10f6c <_realloc_r+0x1cc>
   10e44:	017fff04 	movi	r5,-4
   10e48:	2148703a 	and	r4,r4,r5
   10e4c:	2409883a 	add	r4,r4,r16
   10e50:	21c0ad0e 	bge	r4,r7,11108 <_realloc_r+0x368>
   10e54:	18c0004c 	andi	r3,r3,1
   10e58:	18007f1e 	bne	r3,zero,11058 <_realloc_r+0x2b8>
   10e5c:	9dfffe17 	ldw	r23,-8(r19)
   10e60:	adefc83a 	sub	r23,r21,r23
   10e64:	bd800117 	ldw	r22,4(r23)
   10e68:	b14a703a 	and	r5,r22,r5
   10e6c:	216d883a 	add	r22,r4,r5
   10e70:	b1c04516 	blt	r22,r7,10f88 <_realloc_r+0x1e8>
   10e74:	10c00317 	ldw	r3,12(r2)
   10e78:	10800217 	ldw	r2,8(r2)
   10e7c:	81bfff04 	addi	r6,r16,-4
   10e80:	bc400204 	addi	r17,r23,8
   10e84:	10c00315 	stw	r3,12(r2)
   10e88:	18800215 	stw	r2,8(r3)
   10e8c:	b9400217 	ldw	r5,8(r23)
   10e90:	b8c00317 	ldw	r3,12(r23)
   10e94:	00800904 	movi	r2,36
   10e98:	28c00315 	stw	r3,12(r5)
   10e9c:	19400215 	stw	r5,8(r3)
   10ea0:	1180ef36 	bltu	r2,r6,11260 <_realloc_r+0x4c0>
   10ea4:	008004c4 	movi	r2,19
   10ea8:	1180da2e 	bgeu	r2,r6,11214 <_realloc_r+0x474>
   10eac:	98800017 	ldw	r2,0(r19)
   10eb0:	b8800215 	stw	r2,8(r23)
   10eb4:	98800117 	ldw	r2,4(r19)
   10eb8:	b8800315 	stw	r2,12(r23)
   10ebc:	008006c4 	movi	r2,27
   10ec0:	1180fc2e 	bgeu	r2,r6,112b4 <_realloc_r+0x514>
   10ec4:	98800217 	ldw	r2,8(r19)
   10ec8:	b8800415 	stw	r2,16(r23)
   10ecc:	98800317 	ldw	r2,12(r19)
   10ed0:	b8800515 	stw	r2,20(r23)
   10ed4:	00800904 	movi	r2,36
   10ed8:	3080421e 	bne	r6,r2,10fe4 <_realloc_r+0x244>
   10edc:	98800417 	ldw	r2,16(r19)
   10ee0:	9cc00604 	addi	r19,r19,24
   10ee4:	b8c00804 	addi	r3,r23,32
   10ee8:	b8800615 	stw	r2,24(r23)
   10eec:	98bfff17 	ldw	r2,-4(r19)
   10ef0:	b8800715 	stw	r2,28(r23)
   10ef4:	00003d06 	br	10fec <_realloc_r+0x24c>
   10ef8:	01c00404 	movi	r7,16
   10efc:	3829883a 	mov	r20,r7
   10f00:	003fc206 	br	10e0c <__alt_mem_descriptor_memory+0xdefd0e0c>
   10f04:	9823883a 	mov	r17,r19
   10f08:	850fc83a 	sub	r7,r16,r20
   10f0c:	008003c4 	movi	r2,15
   10f10:	18c0004c 	andi	r3,r3,1
   10f14:	11c04336 	bltu	r2,r7,11024 <_realloc_r+0x284>
   10f18:	1c06b03a 	or	r3,r3,r16
   10f1c:	a8c00115 	stw	r3,4(r21)
   10f20:	ac21883a 	add	r16,r21,r16
   10f24:	80c00117 	ldw	r3,4(r16)
   10f28:	18c00054 	ori	r3,r3,1
   10f2c:	80c00115 	stw	r3,4(r16)
   10f30:	9009883a 	mov	r4,r18
   10f34:	00181400 	call	18140 <__malloc_unlock>
   10f38:	8805883a 	mov	r2,r17
   10f3c:	dfc00917 	ldw	ra,36(sp)
   10f40:	df000817 	ldw	fp,32(sp)
   10f44:	ddc00717 	ldw	r23,28(sp)
   10f48:	dd800617 	ldw	r22,24(sp)
   10f4c:	dd400517 	ldw	r21,20(sp)
   10f50:	dd000417 	ldw	r20,16(sp)
   10f54:	dcc00317 	ldw	r19,12(sp)
   10f58:	dc800217 	ldw	r18,8(sp)
   10f5c:	dc400117 	ldw	r17,4(sp)
   10f60:	dc000017 	ldw	r16,0(sp)
   10f64:	dec00a04 	addi	sp,sp,40
   10f68:	f800283a 	ret
   10f6c:	18c0004c 	andi	r3,r3,1
   10f70:	1800391e 	bne	r3,zero,11058 <_realloc_r+0x2b8>
   10f74:	9dfffe17 	ldw	r23,-8(r19)
   10f78:	00bfff04 	movi	r2,-4
   10f7c:	adefc83a 	sub	r23,r21,r23
   10f80:	b9400117 	ldw	r5,4(r23)
   10f84:	288a703a 	and	r5,r5,r2
   10f88:	2c2d883a 	add	r22,r5,r16
   10f8c:	b1c03216 	blt	r22,r7,11058 <_realloc_r+0x2b8>
   10f90:	b8800317 	ldw	r2,12(r23)
   10f94:	b8c00217 	ldw	r3,8(r23)
   10f98:	81bfff04 	addi	r6,r16,-4
   10f9c:	01000904 	movi	r4,36
   10fa0:	18800315 	stw	r2,12(r3)
   10fa4:	10c00215 	stw	r3,8(r2)
   10fa8:	bc400204 	addi	r17,r23,8
   10fac:	2180ac36 	bltu	r4,r6,11260 <_realloc_r+0x4c0>
   10fb0:	008004c4 	movi	r2,19
   10fb4:	1180972e 	bgeu	r2,r6,11214 <_realloc_r+0x474>
   10fb8:	98800017 	ldw	r2,0(r19)
   10fbc:	b8800215 	stw	r2,8(r23)
   10fc0:	98800117 	ldw	r2,4(r19)
   10fc4:	b8800315 	stw	r2,12(r23)
   10fc8:	008006c4 	movi	r2,27
   10fcc:	1180b92e 	bgeu	r2,r6,112b4 <_realloc_r+0x514>
   10fd0:	98800217 	ldw	r2,8(r19)
   10fd4:	b8800415 	stw	r2,16(r23)
   10fd8:	98800317 	ldw	r2,12(r19)
   10fdc:	b8800515 	stw	r2,20(r23)
   10fe0:	313fbe26 	beq	r6,r4,10edc <__alt_mem_descriptor_memory+0xdefd0edc>
   10fe4:	b8c00604 	addi	r3,r23,24
   10fe8:	9cc00404 	addi	r19,r19,16
   10fec:	98800017 	ldw	r2,0(r19)
   10ff0:	b021883a 	mov	r16,r22
   10ff4:	b82b883a 	mov	r21,r23
   10ff8:	18800015 	stw	r2,0(r3)
   10ffc:	98800117 	ldw	r2,4(r19)
   11000:	18800115 	stw	r2,4(r3)
   11004:	98800217 	ldw	r2,8(r19)
   11008:	18800215 	stw	r2,8(r3)
   1100c:	b8c00117 	ldw	r3,4(r23)
   11010:	003fbd06 	br	10f08 <__alt_mem_descriptor_memory+0xdefd0f08>
   11014:	00800304 	movi	r2,12
   11018:	90800015 	stw	r2,0(r18)
   1101c:	0005883a 	mov	r2,zero
   11020:	003fc606 	br	10f3c <__alt_mem_descriptor_memory+0xdefd0f3c>
   11024:	1d06b03a 	or	r3,r3,r20
   11028:	ad0b883a 	add	r5,r21,r20
   1102c:	a8c00115 	stw	r3,4(r21)
   11030:	38800054 	ori	r2,r7,1
   11034:	28800115 	stw	r2,4(r5)
   11038:	29cf883a 	add	r7,r5,r7
   1103c:	38800117 	ldw	r2,4(r7)
   11040:	9009883a 	mov	r4,r18
   11044:	29400204 	addi	r5,r5,8
   11048:	10800054 	ori	r2,r2,1
   1104c:	38800115 	stw	r2,4(r7)
   11050:	000f1900 	call	f190 <_free_r>
   11054:	003fb606 	br	10f30 <__alt_mem_descriptor_memory+0xdefd0f30>
   11058:	880b883a 	mov	r5,r17
   1105c:	9009883a 	mov	r4,r18
   11060:	00074e80 	call	74e8 <_malloc_r>
   11064:	1023883a 	mov	r17,r2
   11068:	1000aa26 	beq	r2,zero,11314 <_realloc_r+0x574>
   1106c:	98ffff17 	ldw	r3,-4(r19)
   11070:	113ffe04 	addi	r4,r2,-8
   11074:	00bfff84 	movi	r2,-2
   11078:	1884703a 	and	r2,r3,r2
   1107c:	a885883a 	add	r2,r21,r2
   11080:	20808626 	beq	r4,r2,1129c <_realloc_r+0x4fc>
   11084:	81bfff04 	addi	r6,r16,-4
   11088:	00800904 	movi	r2,36
   1108c:	11807036 	bltu	r2,r6,11250 <_realloc_r+0x4b0>
   11090:	00c004c4 	movi	r3,19
   11094:	19805636 	bltu	r3,r6,111f0 <_realloc_r+0x450>
   11098:	8805883a 	mov	r2,r17
   1109c:	9807883a 	mov	r3,r19
   110a0:	19000017 	ldw	r4,0(r3)
   110a4:	11000015 	stw	r4,0(r2)
   110a8:	19000117 	ldw	r4,4(r3)
   110ac:	11000115 	stw	r4,4(r2)
   110b0:	18c00217 	ldw	r3,8(r3)
   110b4:	10c00215 	stw	r3,8(r2)
   110b8:	980b883a 	mov	r5,r19
   110bc:	9009883a 	mov	r4,r18
   110c0:	000f1900 	call	f190 <_free_r>
   110c4:	9009883a 	mov	r4,r18
   110c8:	00181400 	call	18140 <__malloc_unlock>
   110cc:	8805883a 	mov	r2,r17
   110d0:	003f9a06 	br	10f3c <__alt_mem_descriptor_memory+0xdefd0f3c>
   110d4:	300b883a 	mov	r5,r6
   110d8:	dfc00917 	ldw	ra,36(sp)
   110dc:	df000817 	ldw	fp,32(sp)
   110e0:	ddc00717 	ldw	r23,28(sp)
   110e4:	dd800617 	ldw	r22,24(sp)
   110e8:	dd400517 	ldw	r21,20(sp)
   110ec:	dd000417 	ldw	r20,16(sp)
   110f0:	dcc00317 	ldw	r19,12(sp)
   110f4:	dc800217 	ldw	r18,8(sp)
   110f8:	dc400117 	ldw	r17,4(sp)
   110fc:	dc000017 	ldw	r16,0(sp)
   11100:	dec00a04 	addi	sp,sp,40
   11104:	00074e81 	jmpi	74e8 <_malloc_r>
   11108:	11400317 	ldw	r5,12(r2)
   1110c:	10800217 	ldw	r2,8(r2)
   11110:	9823883a 	mov	r17,r19
   11114:	2021883a 	mov	r16,r4
   11118:	11400315 	stw	r5,12(r2)
   1111c:	28800215 	stw	r2,8(r5)
   11120:	003f7906 	br	10f08 <__alt_mem_descriptor_memory+0xdefd0f08>
   11124:	21000117 	ldw	r4,4(r4)
   11128:	00bfff04 	movi	r2,-4
   1112c:	a1800404 	addi	r6,r20,16
   11130:	2088703a 	and	r4,r4,r2
   11134:	2409883a 	add	r4,r4,r16
   11138:	2180380e 	bge	r4,r6,1121c <_realloc_r+0x47c>
   1113c:	18c0004c 	andi	r3,r3,1
   11140:	183fc51e 	bne	r3,zero,11058 <__alt_mem_descriptor_memory+0xdefd1058>
   11144:	9dfffe17 	ldw	r23,-8(r19)
   11148:	adefc83a 	sub	r23,r21,r23
   1114c:	b9400117 	ldw	r5,4(r23)
   11150:	288a703a 	and	r5,r5,r2
   11154:	216d883a 	add	r22,r4,r5
   11158:	b1bf8b16 	blt	r22,r6,10f88 <__alt_mem_descriptor_memory+0xdefd0f88>
   1115c:	b8800317 	ldw	r2,12(r23)
   11160:	b8c00217 	ldw	r3,8(r23)
   11164:	81bfff04 	addi	r6,r16,-4
   11168:	01000904 	movi	r4,36
   1116c:	18800315 	stw	r2,12(r3)
   11170:	10c00215 	stw	r3,8(r2)
   11174:	bc400204 	addi	r17,r23,8
   11178:	21805a36 	bltu	r4,r6,112e4 <_realloc_r+0x544>
   1117c:	008004c4 	movi	r2,19
   11180:	1180562e 	bgeu	r2,r6,112dc <_realloc_r+0x53c>
   11184:	98800017 	ldw	r2,0(r19)
   11188:	b8800215 	stw	r2,8(r23)
   1118c:	98800117 	ldw	r2,4(r19)
   11190:	b8800315 	stw	r2,12(r23)
   11194:	008006c4 	movi	r2,27
   11198:	11805636 	bltu	r2,r6,112f4 <_realloc_r+0x554>
   1119c:	b8800404 	addi	r2,r23,16
   111a0:	9cc00204 	addi	r19,r19,8
   111a4:	98c00017 	ldw	r3,0(r19)
   111a8:	10c00015 	stw	r3,0(r2)
   111ac:	98c00117 	ldw	r3,4(r19)
   111b0:	10c00115 	stw	r3,4(r2)
   111b4:	98c00217 	ldw	r3,8(r19)
   111b8:	10c00215 	stw	r3,8(r2)
   111bc:	bd07883a 	add	r3,r23,r20
   111c0:	b505c83a 	sub	r2,r22,r20
   111c4:	e0c00215 	stw	r3,8(fp)
   111c8:	10800054 	ori	r2,r2,1
   111cc:	18800115 	stw	r2,4(r3)
   111d0:	b8800117 	ldw	r2,4(r23)
   111d4:	9009883a 	mov	r4,r18
   111d8:	1080004c 	andi	r2,r2,1
   111dc:	a0a8b03a 	or	r20,r20,r2
   111e0:	bd000115 	stw	r20,4(r23)
   111e4:	00181400 	call	18140 <__malloc_unlock>
   111e8:	8805883a 	mov	r2,r17
   111ec:	003f5306 	br	10f3c <__alt_mem_descriptor_memory+0xdefd0f3c>
   111f0:	98c00017 	ldw	r3,0(r19)
   111f4:	88c00015 	stw	r3,0(r17)
   111f8:	98c00117 	ldw	r3,4(r19)
   111fc:	88c00115 	stw	r3,4(r17)
   11200:	00c006c4 	movi	r3,27
   11204:	19801d36 	bltu	r3,r6,1127c <_realloc_r+0x4dc>
   11208:	88800204 	addi	r2,r17,8
   1120c:	98c00204 	addi	r3,r19,8
   11210:	003fa306 	br	110a0 <__alt_mem_descriptor_memory+0xdefd10a0>
   11214:	8807883a 	mov	r3,r17
   11218:	003f7406 	br	10fec <__alt_mem_descriptor_memory+0xdefd0fec>
   1121c:	ad2b883a 	add	r21,r21,r20
   11220:	2505c83a 	sub	r2,r4,r20
   11224:	e5400215 	stw	r21,8(fp)
   11228:	10800054 	ori	r2,r2,1
   1122c:	a8800115 	stw	r2,4(r21)
   11230:	98bfff17 	ldw	r2,-4(r19)
   11234:	9009883a 	mov	r4,r18
   11238:	1080004c 	andi	r2,r2,1
   1123c:	a0a8b03a 	or	r20,r20,r2
   11240:	9d3fff15 	stw	r20,-4(r19)
   11244:	00181400 	call	18140 <__malloc_unlock>
   11248:	9805883a 	mov	r2,r19
   1124c:	003f3b06 	br	10f3c <__alt_mem_descriptor_memory+0xdefd0f3c>
   11250:	8809883a 	mov	r4,r17
   11254:	980b883a 	mov	r5,r19
   11258:	0007dc80 	call	7dc8 <memmove>
   1125c:	003f9606 	br	110b8 <__alt_mem_descriptor_memory+0xdefd10b8>
   11260:	8809883a 	mov	r4,r17
   11264:	980b883a 	mov	r5,r19
   11268:	0007dc80 	call	7dc8 <memmove>
   1126c:	b8c00117 	ldw	r3,4(r23)
   11270:	b021883a 	mov	r16,r22
   11274:	b82b883a 	mov	r21,r23
   11278:	003f2306 	br	10f08 <__alt_mem_descriptor_memory+0xdefd0f08>
   1127c:	98c00217 	ldw	r3,8(r19)
   11280:	88c00215 	stw	r3,8(r17)
   11284:	98c00317 	ldw	r3,12(r19)
   11288:	88c00315 	stw	r3,12(r17)
   1128c:	30800c26 	beq	r6,r2,112c0 <_realloc_r+0x520>
   11290:	88800404 	addi	r2,r17,16
   11294:	98c00404 	addi	r3,r19,16
   11298:	003f8106 	br	110a0 <__alt_mem_descriptor_memory+0xdefd10a0>
   1129c:	893fff17 	ldw	r4,-4(r17)
   112a0:	00bfff04 	movi	r2,-4
   112a4:	9823883a 	mov	r17,r19
   112a8:	2084703a 	and	r2,r4,r2
   112ac:	80a1883a 	add	r16,r16,r2
   112b0:	003f1506 	br	10f08 <__alt_mem_descriptor_memory+0xdefd0f08>
   112b4:	b8c00404 	addi	r3,r23,16
   112b8:	9cc00204 	addi	r19,r19,8
   112bc:	003f4b06 	br	10fec <__alt_mem_descriptor_memory+0xdefd0fec>
   112c0:	99000417 	ldw	r4,16(r19)
   112c4:	88800604 	addi	r2,r17,24
   112c8:	98c00604 	addi	r3,r19,24
   112cc:	89000415 	stw	r4,16(r17)
   112d0:	99000517 	ldw	r4,20(r19)
   112d4:	89000515 	stw	r4,20(r17)
   112d8:	003f7106 	br	110a0 <__alt_mem_descriptor_memory+0xdefd10a0>
   112dc:	8805883a 	mov	r2,r17
   112e0:	003fb006 	br	111a4 <__alt_mem_descriptor_memory+0xdefd11a4>
   112e4:	8809883a 	mov	r4,r17
   112e8:	980b883a 	mov	r5,r19
   112ec:	0007dc80 	call	7dc8 <memmove>
   112f0:	003fb206 	br	111bc <__alt_mem_descriptor_memory+0xdefd11bc>
   112f4:	98800217 	ldw	r2,8(r19)
   112f8:	b8800415 	stw	r2,16(r23)
   112fc:	98800317 	ldw	r2,12(r19)
   11300:	b8800515 	stw	r2,20(r23)
   11304:	31000726 	beq	r6,r4,11324 <_realloc_r+0x584>
   11308:	b8800604 	addi	r2,r23,24
   1130c:	9cc00404 	addi	r19,r19,16
   11310:	003fa406 	br	111a4 <__alt_mem_descriptor_memory+0xdefd11a4>
   11314:	9009883a 	mov	r4,r18
   11318:	00181400 	call	18140 <__malloc_unlock>
   1131c:	0005883a 	mov	r2,zero
   11320:	003f0606 	br	10f3c <__alt_mem_descriptor_memory+0xdefd0f3c>
   11324:	98c00417 	ldw	r3,16(r19)
   11328:	9cc00604 	addi	r19,r19,24
   1132c:	b8800804 	addi	r2,r23,32
   11330:	b8c00615 	stw	r3,24(r23)
   11334:	98ffff17 	ldw	r3,-4(r19)
   11338:	b8c00715 	stw	r3,28(r23)
   1133c:	003f9906 	br	111a4 <__alt_mem_descriptor_memory+0xdefd11a4>

00011340 <lflush>:
   11340:	2080030b 	ldhu	r2,12(r4)
   11344:	00c00244 	movi	r3,9
   11348:	1080024c 	andi	r2,r2,9
   1134c:	10c00226 	beq	r2,r3,11358 <lflush+0x18>
   11350:	0005883a 	mov	r2,zero
   11354:	f800283a 	ret
   11358:	000eb481 	jmpi	eb48 <fflush>

0001135c <__srefill_r>:
   1135c:	defffd04 	addi	sp,sp,-12
   11360:	dc400115 	stw	r17,4(sp)
   11364:	dc000015 	stw	r16,0(sp)
   11368:	dfc00215 	stw	ra,8(sp)
   1136c:	2023883a 	mov	r17,r4
   11370:	2821883a 	mov	r16,r5
   11374:	20000226 	beq	r4,zero,11380 <__srefill_r+0x24>
   11378:	20800e17 	ldw	r2,56(r4)
   1137c:	10003b26 	beq	r2,zero,1146c <__srefill_r+0x110>
   11380:	80c0030b 	ldhu	r3,12(r16)
   11384:	1908000c 	andi	r4,r3,8192
   11388:	1805883a 	mov	r2,r3
   1138c:	2000071e 	bne	r4,zero,113ac <__srefill_r+0x50>
   11390:	81001917 	ldw	r4,100(r16)
   11394:	18880014 	ori	r2,r3,8192
   11398:	00f7ffc4 	movi	r3,-8193
   1139c:	20c8703a 	and	r4,r4,r3
   113a0:	8080030d 	sth	r2,12(r16)
   113a4:	1007883a 	mov	r3,r2
   113a8:	81001915 	stw	r4,100(r16)
   113ac:	80000115 	stw	zero,4(r16)
   113b0:	1100080c 	andi	r4,r2,32
   113b4:	20004d1e 	bne	r4,zero,114ec <__srefill_r+0x190>
   113b8:	1100010c 	andi	r4,r2,4
   113bc:	20001e26 	beq	r4,zero,11438 <__srefill_r+0xdc>
   113c0:	81400c17 	ldw	r5,48(r16)
   113c4:	28000826 	beq	r5,zero,113e8 <__srefill_r+0x8c>
   113c8:	80801004 	addi	r2,r16,64
   113cc:	28800226 	beq	r5,r2,113d8 <__srefill_r+0x7c>
   113d0:	8809883a 	mov	r4,r17
   113d4:	000f1900 	call	f190 <_free_r>
   113d8:	80800f17 	ldw	r2,60(r16)
   113dc:	80000c15 	stw	zero,48(r16)
   113e0:	80800115 	stw	r2,4(r16)
   113e4:	10002f1e 	bne	r2,zero,114a4 <__srefill_r+0x148>
   113e8:	80800417 	ldw	r2,16(r16)
   113ec:	10004126 	beq	r2,zero,114f4 <__srefill_r+0x198>
   113f0:	8080030b 	ldhu	r2,12(r16)
   113f4:	108000cc 	andi	r2,r2,3
   113f8:	10001e1e 	bne	r2,zero,11474 <__srefill_r+0x118>
   113fc:	81800417 	ldw	r6,16(r16)
   11400:	80800817 	ldw	r2,32(r16)
   11404:	81400717 	ldw	r5,28(r16)
   11408:	81c00517 	ldw	r7,20(r16)
   1140c:	81800015 	stw	r6,0(r16)
   11410:	8809883a 	mov	r4,r17
   11414:	103ee83a 	callr	r2
   11418:	80800115 	stw	r2,4(r16)
   1141c:	00800d0e 	bge	zero,r2,11454 <__srefill_r+0xf8>
   11420:	0005883a 	mov	r2,zero
   11424:	dfc00217 	ldw	ra,8(sp)
   11428:	dc400117 	ldw	r17,4(sp)
   1142c:	dc000017 	ldw	r16,0(sp)
   11430:	dec00304 	addi	sp,sp,12
   11434:	f800283a 	ret
   11438:	1100040c 	andi	r4,r2,16
   1143c:	20002726 	beq	r4,zero,114dc <__srefill_r+0x180>
   11440:	1080020c 	andi	r2,r2,8
   11444:	10001b1e 	bne	r2,zero,114b4 <__srefill_r+0x158>
   11448:	18c00114 	ori	r3,r3,4
   1144c:	80c0030d 	sth	r3,12(r16)
   11450:	003fe506 	br	113e8 <__alt_mem_descriptor_memory+0xdefd13e8>
   11454:	80c0030b 	ldhu	r3,12(r16)
   11458:	10000d1e 	bne	r2,zero,11490 <__srefill_r+0x134>
   1145c:	18c00814 	ori	r3,r3,32
   11460:	00bfffc4 	movi	r2,-1
   11464:	80c0030d 	sth	r3,12(r16)
   11468:	003fee06 	br	11424 <__alt_mem_descriptor_memory+0xdefd1424>
   1146c:	000eec80 	call	eec8 <__sinit>
   11470:	003fc306 	br	11380 <__alt_mem_descriptor_memory+0xdefd1380>
   11474:	00800174 	movhi	r2,5
   11478:	10872c04 	addi	r2,r2,7344
   1147c:	11000017 	ldw	r4,0(r2)
   11480:	01400074 	movhi	r5,1
   11484:	2944d004 	addi	r5,r5,4928
   11488:	000f9240 	call	f924 <_fwalk>
   1148c:	003fdb06 	br	113fc <__alt_mem_descriptor_memory+0xdefd13fc>
   11490:	18c01014 	ori	r3,r3,64
   11494:	80000115 	stw	zero,4(r16)
   11498:	00bfffc4 	movi	r2,-1
   1149c:	80c0030d 	sth	r3,12(r16)
   114a0:	003fe006 	br	11424 <__alt_mem_descriptor_memory+0xdefd1424>
   114a4:	80c00e17 	ldw	r3,56(r16)
   114a8:	0005883a 	mov	r2,zero
   114ac:	80c00015 	stw	r3,0(r16)
   114b0:	003fdc06 	br	11424 <__alt_mem_descriptor_memory+0xdefd1424>
   114b4:	8809883a 	mov	r4,r17
   114b8:	800b883a 	mov	r5,r16
   114bc:	000e9200 	call	e920 <_fflush_r>
   114c0:	10000a1e 	bne	r2,zero,114ec <__srefill_r+0x190>
   114c4:	8080030b 	ldhu	r2,12(r16)
   114c8:	00fffdc4 	movi	r3,-9
   114cc:	80000215 	stw	zero,8(r16)
   114d0:	1886703a 	and	r3,r3,r2
   114d4:	80000615 	stw	zero,24(r16)
   114d8:	003fdb06 	br	11448 <__alt_mem_descriptor_memory+0xdefd1448>
   114dc:	00800244 	movi	r2,9
   114e0:	88800015 	stw	r2,0(r17)
   114e4:	18c01014 	ori	r3,r3,64
   114e8:	80c0030d 	sth	r3,12(r16)
   114ec:	00bfffc4 	movi	r2,-1
   114f0:	003fcc06 	br	11424 <__alt_mem_descriptor_memory+0xdefd1424>
   114f4:	8809883a 	mov	r4,r17
   114f8:	800b883a 	mov	r5,r16
   114fc:	000fb740 	call	fb74 <__smakebuf_r>
   11500:	003fbb06 	br	113f0 <__alt_mem_descriptor_memory+0xdefd13f0>

00011504 <__fpclassifyd>:
   11504:	00a00034 	movhi	r2,32768
   11508:	10bfffc4 	addi	r2,r2,-1
   1150c:	2884703a 	and	r2,r5,r2
   11510:	10000726 	beq	r2,zero,11530 <__fpclassifyd+0x2c>
   11514:	00fffc34 	movhi	r3,65520
   11518:	019ff834 	movhi	r6,32736
   1151c:	28c7883a 	add	r3,r5,r3
   11520:	31bfffc4 	addi	r6,r6,-1
   11524:	30c00536 	bltu	r6,r3,1153c <__fpclassifyd+0x38>
   11528:	00800104 	movi	r2,4
   1152c:	f800283a 	ret
   11530:	2000021e 	bne	r4,zero,1153c <__fpclassifyd+0x38>
   11534:	00800084 	movi	r2,2
   11538:	f800283a 	ret
   1153c:	00dffc34 	movhi	r3,32752
   11540:	019ff834 	movhi	r6,32736
   11544:	28cb883a 	add	r5,r5,r3
   11548:	31bfffc4 	addi	r6,r6,-1
   1154c:	317ff62e 	bgeu	r6,r5,11528 <__alt_mem_descriptor_memory+0xdefd1528>
   11550:	01400434 	movhi	r5,16
   11554:	297fffc4 	addi	r5,r5,-1
   11558:	28800236 	bltu	r5,r2,11564 <__fpclassifyd+0x60>
   1155c:	008000c4 	movi	r2,3
   11560:	f800283a 	ret
   11564:	10c00226 	beq	r2,r3,11570 <__fpclassifyd+0x6c>
   11568:	0005883a 	mov	r2,zero
   1156c:	f800283a 	ret
   11570:	2005003a 	cmpeq	r2,r4,zero
   11574:	f800283a 	ret

00011578 <__sread>:
   11578:	defffe04 	addi	sp,sp,-8
   1157c:	dc000015 	stw	r16,0(sp)
   11580:	2821883a 	mov	r16,r5
   11584:	2940038f 	ldh	r5,14(r5)
   11588:	dfc00115 	stw	ra,4(sp)
   1158c:	00143880 	call	14388 <_read_r>
   11590:	10000716 	blt	r2,zero,115b0 <__sread+0x38>
   11594:	80c01417 	ldw	r3,80(r16)
   11598:	1887883a 	add	r3,r3,r2
   1159c:	80c01415 	stw	r3,80(r16)
   115a0:	dfc00117 	ldw	ra,4(sp)
   115a4:	dc000017 	ldw	r16,0(sp)
   115a8:	dec00204 	addi	sp,sp,8
   115ac:	f800283a 	ret
   115b0:	80c0030b 	ldhu	r3,12(r16)
   115b4:	18fbffcc 	andi	r3,r3,61439
   115b8:	80c0030d 	sth	r3,12(r16)
   115bc:	dfc00117 	ldw	ra,4(sp)
   115c0:	dc000017 	ldw	r16,0(sp)
   115c4:	dec00204 	addi	sp,sp,8
   115c8:	f800283a 	ret

000115cc <__seofread>:
   115cc:	0005883a 	mov	r2,zero
   115d0:	f800283a 	ret

000115d4 <__swrite>:
   115d4:	2880030b 	ldhu	r2,12(r5)
   115d8:	defffb04 	addi	sp,sp,-20
   115dc:	dcc00315 	stw	r19,12(sp)
   115e0:	dc800215 	stw	r18,8(sp)
   115e4:	dc400115 	stw	r17,4(sp)
   115e8:	dc000015 	stw	r16,0(sp)
   115ec:	dfc00415 	stw	ra,16(sp)
   115f0:	10c0400c 	andi	r3,r2,256
   115f4:	2821883a 	mov	r16,r5
   115f8:	2027883a 	mov	r19,r4
   115fc:	3025883a 	mov	r18,r6
   11600:	3823883a 	mov	r17,r7
   11604:	18000526 	beq	r3,zero,1161c <__swrite+0x48>
   11608:	2940038f 	ldh	r5,14(r5)
   1160c:	000d883a 	mov	r6,zero
   11610:	01c00084 	movi	r7,2
   11614:	001432c0 	call	1432c <_lseek_r>
   11618:	8080030b 	ldhu	r2,12(r16)
   1161c:	8140038f 	ldh	r5,14(r16)
   11620:	10bbffcc 	andi	r2,r2,61439
   11624:	9809883a 	mov	r4,r19
   11628:	900d883a 	mov	r6,r18
   1162c:	880f883a 	mov	r7,r17
   11630:	8080030d 	sth	r2,12(r16)
   11634:	dfc00417 	ldw	ra,16(sp)
   11638:	dcc00317 	ldw	r19,12(sp)
   1163c:	dc800217 	ldw	r18,8(sp)
   11640:	dc400117 	ldw	r17,4(sp)
   11644:	dc000017 	ldw	r16,0(sp)
   11648:	dec00504 	addi	sp,sp,20
   1164c:	0013e1c1 	jmpi	13e1c <_write_r>

00011650 <__sseek>:
   11650:	defffe04 	addi	sp,sp,-8
   11654:	dc000015 	stw	r16,0(sp)
   11658:	2821883a 	mov	r16,r5
   1165c:	2940038f 	ldh	r5,14(r5)
   11660:	dfc00115 	stw	ra,4(sp)
   11664:	001432c0 	call	1432c <_lseek_r>
   11668:	00ffffc4 	movi	r3,-1
   1166c:	10c00826 	beq	r2,r3,11690 <__sseek+0x40>
   11670:	80c0030b 	ldhu	r3,12(r16)
   11674:	80801415 	stw	r2,80(r16)
   11678:	18c40014 	ori	r3,r3,4096
   1167c:	80c0030d 	sth	r3,12(r16)
   11680:	dfc00117 	ldw	ra,4(sp)
   11684:	dc000017 	ldw	r16,0(sp)
   11688:	dec00204 	addi	sp,sp,8
   1168c:	f800283a 	ret
   11690:	80c0030b 	ldhu	r3,12(r16)
   11694:	18fbffcc 	andi	r3,r3,61439
   11698:	80c0030d 	sth	r3,12(r16)
   1169c:	dfc00117 	ldw	ra,4(sp)
   116a0:	dc000017 	ldw	r16,0(sp)
   116a4:	dec00204 	addi	sp,sp,8
   116a8:	f800283a 	ret

000116ac <__sclose>:
   116ac:	2940038f 	ldh	r5,14(r5)
   116b0:	0013e781 	jmpi	13e78 <_close_r>

000116b4 <strcmp>:
   116b4:	2144b03a 	or	r2,r4,r5
   116b8:	108000cc 	andi	r2,r2,3
   116bc:	1000171e 	bne	r2,zero,1171c <strcmp+0x68>
   116c0:	20800017 	ldw	r2,0(r4)
   116c4:	28c00017 	ldw	r3,0(r5)
   116c8:	10c0141e 	bne	r2,r3,1171c <strcmp+0x68>
   116cc:	027fbff4 	movhi	r9,65279
   116d0:	4a7fbfc4 	addi	r9,r9,-257
   116d4:	0086303a 	nor	r3,zero,r2
   116d8:	02202074 	movhi	r8,32897
   116dc:	1245883a 	add	r2,r2,r9
   116e0:	42202004 	addi	r8,r8,-32640
   116e4:	10c4703a 	and	r2,r2,r3
   116e8:	1204703a 	and	r2,r2,r8
   116ec:	10000226 	beq	r2,zero,116f8 <strcmp+0x44>
   116f0:	00001706 	br	11750 <strcmp+0x9c>
   116f4:	1000161e 	bne	r2,zero,11750 <strcmp+0x9c>
   116f8:	21000104 	addi	r4,r4,4
   116fc:	20c00017 	ldw	r3,0(r4)
   11700:	29400104 	addi	r5,r5,4
   11704:	29800017 	ldw	r6,0(r5)
   11708:	1a4f883a 	add	r7,r3,r9
   1170c:	00c4303a 	nor	r2,zero,r3
   11710:	3884703a 	and	r2,r7,r2
   11714:	1204703a 	and	r2,r2,r8
   11718:	19bff626 	beq	r3,r6,116f4 <__alt_mem_descriptor_memory+0xdefd16f4>
   1171c:	20800007 	ldb	r2,0(r4)
   11720:	1000051e 	bne	r2,zero,11738 <strcmp+0x84>
   11724:	00000606 	br	11740 <strcmp+0x8c>
   11728:	21000044 	addi	r4,r4,1
   1172c:	20800007 	ldb	r2,0(r4)
   11730:	29400044 	addi	r5,r5,1
   11734:	10000226 	beq	r2,zero,11740 <strcmp+0x8c>
   11738:	28c00007 	ldb	r3,0(r5)
   1173c:	10fffa26 	beq	r2,r3,11728 <__alt_mem_descriptor_memory+0xdefd1728>
   11740:	20800003 	ldbu	r2,0(r4)
   11744:	28c00003 	ldbu	r3,0(r5)
   11748:	10c5c83a 	sub	r2,r2,r3
   1174c:	f800283a 	ret
   11750:	0005883a 	mov	r2,zero
   11754:	f800283a 	ret

00011758 <__ssprint_r>:
   11758:	30800217 	ldw	r2,8(r6)
   1175c:	defff604 	addi	sp,sp,-40
   11760:	ddc00715 	stw	r23,28(sp)
   11764:	dcc00315 	stw	r19,12(sp)
   11768:	dfc00915 	stw	ra,36(sp)
   1176c:	df000815 	stw	fp,32(sp)
   11770:	dd800615 	stw	r22,24(sp)
   11774:	dd400515 	stw	r21,20(sp)
   11778:	dd000415 	stw	r20,16(sp)
   1177c:	dc800215 	stw	r18,8(sp)
   11780:	dc400115 	stw	r17,4(sp)
   11784:	dc000015 	stw	r16,0(sp)
   11788:	3027883a 	mov	r19,r6
   1178c:	35c00017 	ldw	r23,0(r6)
   11790:	10005526 	beq	r2,zero,118e8 <__ssprint_r+0x190>
   11794:	2029883a 	mov	r20,r4
   11798:	29000017 	ldw	r4,0(r5)
   1179c:	2821883a 	mov	r16,r5
   117a0:	0039883a 	mov	fp,zero
   117a4:	0023883a 	mov	r17,zero
   117a8:	88003926 	beq	r17,zero,11890 <__ssprint_r+0x138>
   117ac:	84800217 	ldw	r18,8(r16)
   117b0:	902d883a 	mov	r22,r18
   117b4:	8c803a36 	bltu	r17,r18,118a0 <__ssprint_r+0x148>
   117b8:	80c0030b 	ldhu	r3,12(r16)
   117bc:	1881200c 	andi	r2,r3,1152
   117c0:	10002626 	beq	r2,zero,1185c <__ssprint_r+0x104>
   117c4:	80800517 	ldw	r2,20(r16)
   117c8:	81400417 	ldw	r5,16(r16)
   117cc:	89c00044 	addi	r7,r17,1
   117d0:	108d883a 	add	r6,r2,r2
   117d4:	3085883a 	add	r2,r6,r2
   117d8:	100cd7fa 	srli	r6,r2,31
   117dc:	216dc83a 	sub	r22,r4,r5
   117e0:	3d89883a 	add	r4,r7,r22
   117e4:	3085883a 	add	r2,r6,r2
   117e8:	1025d07a 	srai	r18,r2,1
   117ec:	900d883a 	mov	r6,r18
   117f0:	9100022e 	bgeu	r18,r4,117fc <__ssprint_r+0xa4>
   117f4:	2025883a 	mov	r18,r4
   117f8:	200d883a 	mov	r6,r4
   117fc:	18c1000c 	andi	r3,r3,1024
   11800:	a009883a 	mov	r4,r20
   11804:	18002926 	beq	r3,zero,118ac <__ssprint_r+0x154>
   11808:	300b883a 	mov	r5,r6
   1180c:	00074e80 	call	74e8 <_malloc_r>
   11810:	102b883a 	mov	r21,r2
   11814:	10002b26 	beq	r2,zero,118c4 <__ssprint_r+0x16c>
   11818:	81400417 	ldw	r5,16(r16)
   1181c:	1009883a 	mov	r4,r2
   11820:	b00d883a 	mov	r6,r22
   11824:	0007c900 	call	7c90 <memcpy>
   11828:	8080030b 	ldhu	r2,12(r16)
   1182c:	00fedfc4 	movi	r3,-1153
   11830:	10c4703a 	and	r2,r2,r3
   11834:	10802014 	ori	r2,r2,128
   11838:	8080030d 	sth	r2,12(r16)
   1183c:	ad89883a 	add	r4,r21,r22
   11840:	95adc83a 	sub	r22,r18,r22
   11844:	84800515 	stw	r18,20(r16)
   11848:	85800215 	stw	r22,8(r16)
   1184c:	85400415 	stw	r21,16(r16)
   11850:	81000015 	stw	r4,0(r16)
   11854:	8825883a 	mov	r18,r17
   11858:	882d883a 	mov	r22,r17
   1185c:	e00b883a 	mov	r5,fp
   11860:	b00d883a 	mov	r6,r22
   11864:	0007dc80 	call	7dc8 <memmove>
   11868:	80c00217 	ldw	r3,8(r16)
   1186c:	81000017 	ldw	r4,0(r16)
   11870:	98800217 	ldw	r2,8(r19)
   11874:	1ca5c83a 	sub	r18,r3,r18
   11878:	2589883a 	add	r4,r4,r22
   1187c:	84800215 	stw	r18,8(r16)
   11880:	81000015 	stw	r4,0(r16)
   11884:	1463c83a 	sub	r17,r2,r17
   11888:	9c400215 	stw	r17,8(r19)
   1188c:	88001626 	beq	r17,zero,118e8 <__ssprint_r+0x190>
   11890:	bf000017 	ldw	fp,0(r23)
   11894:	bc400117 	ldw	r17,4(r23)
   11898:	bdc00204 	addi	r23,r23,8
   1189c:	003fc206 	br	117a8 <__alt_mem_descriptor_memory+0xdefd17a8>
   118a0:	8825883a 	mov	r18,r17
   118a4:	882d883a 	mov	r22,r17
   118a8:	003fec06 	br	1185c <__alt_mem_descriptor_memory+0xdefd185c>
   118ac:	0010da00 	call	10da0 <_realloc_r>
   118b0:	102b883a 	mov	r21,r2
   118b4:	103fe11e 	bne	r2,zero,1183c <__alt_mem_descriptor_memory+0xdefd183c>
   118b8:	81400417 	ldw	r5,16(r16)
   118bc:	a009883a 	mov	r4,r20
   118c0:	000f1900 	call	f190 <_free_r>
   118c4:	80c0030b 	ldhu	r3,12(r16)
   118c8:	00800304 	movi	r2,12
   118cc:	a0800015 	stw	r2,0(r20)
   118d0:	18c01014 	ori	r3,r3,64
   118d4:	80c0030d 	sth	r3,12(r16)
   118d8:	00bfffc4 	movi	r2,-1
   118dc:	98000215 	stw	zero,8(r19)
   118e0:	98000115 	stw	zero,4(r19)
   118e4:	00000206 	br	118f0 <__ssprint_r+0x198>
   118e8:	98000115 	stw	zero,4(r19)
   118ec:	0005883a 	mov	r2,zero
   118f0:	dfc00917 	ldw	ra,36(sp)
   118f4:	df000817 	ldw	fp,32(sp)
   118f8:	ddc00717 	ldw	r23,28(sp)
   118fc:	dd800617 	ldw	r22,24(sp)
   11900:	dd400517 	ldw	r21,20(sp)
   11904:	dd000417 	ldw	r20,16(sp)
   11908:	dcc00317 	ldw	r19,12(sp)
   1190c:	dc800217 	ldw	r18,8(sp)
   11910:	dc400117 	ldw	r17,4(sp)
   11914:	dc000017 	ldw	r16,0(sp)
   11918:	dec00a04 	addi	sp,sp,40
   1191c:	f800283a 	ret

00011920 <___svfiprintf_internal_r>:
   11920:	2880030b 	ldhu	r2,12(r5)
   11924:	deffc904 	addi	sp,sp,-220
   11928:	dd403215 	stw	r21,200(sp)
   1192c:	dfc03615 	stw	ra,216(sp)
   11930:	df003515 	stw	fp,212(sp)
   11934:	ddc03415 	stw	r23,208(sp)
   11938:	dd803315 	stw	r22,204(sp)
   1193c:	dd003115 	stw	r20,196(sp)
   11940:	dcc03015 	stw	r19,192(sp)
   11944:	dc802f15 	stw	r18,188(sp)
   11948:	dc402e15 	stw	r17,184(sp)
   1194c:	dc002d15 	stw	r16,180(sp)
   11950:	d9402715 	stw	r5,156(sp)
   11954:	d9002915 	stw	r4,164(sp)
   11958:	1080200c 	andi	r2,r2,128
   1195c:	d9c02315 	stw	r7,140(sp)
   11960:	302b883a 	mov	r21,r6
   11964:	10000226 	beq	r2,zero,11970 <___svfiprintf_internal_r+0x50>
   11968:	28800417 	ldw	r2,16(r5)
   1196c:	1003ce26 	beq	r2,zero,128a8 <___svfiprintf_internal_r+0xf88>
   11970:	dac01a04 	addi	r11,sp,104
   11974:	da8019c4 	addi	r10,sp,103
   11978:	dc802917 	ldw	r18,164(sp)
   1197c:	dd002717 	ldw	r20,156(sp)
   11980:	04c00174 	movhi	r19,5
   11984:	dac01e15 	stw	r11,120(sp)
   11988:	5a97c83a 	sub	r11,r11,r10
   1198c:	9cf60504 	addi	r19,r19,-10220
   11990:	da801f15 	stw	r10,124(sp)
   11994:	dec01a15 	stw	sp,104(sp)
   11998:	d8001c15 	stw	zero,112(sp)
   1199c:	d8001b15 	stw	zero,108(sp)
   119a0:	d8002a15 	stw	zero,168(sp)
   119a4:	d8002415 	stw	zero,144(sp)
   119a8:	d811883a 	mov	r8,sp
   119ac:	dac02b15 	stw	r11,172(sp)
   119b0:	a8800007 	ldb	r2,0(r21)
   119b4:	10026826 	beq	r2,zero,12358 <___svfiprintf_internal_r+0xa38>
   119b8:	01000944 	movi	r4,37
   119bc:	11026626 	beq	r2,r4,12358 <___svfiprintf_internal_r+0xa38>
   119c0:	a805883a 	mov	r2,r21
   119c4:	00000106 	br	119cc <___svfiprintf_internal_r+0xac>
   119c8:	19000326 	beq	r3,r4,119d8 <___svfiprintf_internal_r+0xb8>
   119cc:	10800044 	addi	r2,r2,1
   119d0:	10c00007 	ldb	r3,0(r2)
   119d4:	183ffc1e 	bne	r3,zero,119c8 <__alt_mem_descriptor_memory+0xdefd19c8>
   119d8:	1561c83a 	sub	r16,r2,r21
   119dc:	102d883a 	mov	r22,r2
   119e0:	80000e26 	beq	r16,zero,11a1c <___svfiprintf_internal_r+0xfc>
   119e4:	d8c01c17 	ldw	r3,112(sp)
   119e8:	d8801b17 	ldw	r2,108(sp)
   119ec:	45400015 	stw	r21,0(r8)
   119f0:	1c07883a 	add	r3,r3,r16
   119f4:	10800044 	addi	r2,r2,1
   119f8:	d8c01c15 	stw	r3,112(sp)
   119fc:	44000115 	stw	r16,4(r8)
   11a00:	d8801b15 	stw	r2,108(sp)
   11a04:	00c001c4 	movi	r3,7
   11a08:	1882d616 	blt	r3,r2,12564 <___svfiprintf_internal_r+0xc44>
   11a0c:	42000204 	addi	r8,r8,8
   11a10:	da802417 	ldw	r10,144(sp)
   11a14:	5415883a 	add	r10,r10,r16
   11a18:	da802415 	stw	r10,144(sp)
   11a1c:	b0800007 	ldb	r2,0(r22)
   11a20:	10027326 	beq	r2,zero,123f0 <___svfiprintf_internal_r+0xad0>
   11a24:	b1000047 	ldb	r4,1(r22)
   11a28:	b5400044 	addi	r21,r22,1
   11a2c:	d8001d85 	stb	zero,118(sp)
   11a30:	000d883a 	mov	r6,zero
   11a34:	043fffc4 	movi	r16,-1
   11a38:	d8002115 	stw	zero,132(sp)
   11a3c:	0023883a 	mov	r17,zero
   11a40:	00c01604 	movi	r3,88
   11a44:	01400244 	movi	r5,9
   11a48:	02400a84 	movi	r9,42
   11a4c:	01c01b04 	movi	r7,108
   11a50:	ad400044 	addi	r21,r21,1
   11a54:	20bff804 	addi	r2,r4,-32
   11a58:	18819536 	bltu	r3,r2,120b0 <___svfiprintf_internal_r+0x790>
   11a5c:	100490ba 	slli	r2,r2,2
   11a60:	02c00074 	movhi	r11,1
   11a64:	5ac69d04 	addi	r11,r11,6772
   11a68:	12c5883a 	add	r2,r2,r11
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	1000683a 	jmp	r2
   11a74:	00011fb0 	cmpltui	zero,zero,1150
   11a78:	000120b0 	cmpltui	zero,zero,1154
   11a7c:	000120b0 	cmpltui	zero,zero,1154
   11a80:	00011fa4 	muli	zero,zero,1150
   11a84:	000120b0 	cmpltui	zero,zero,1154
   11a88:	000120b0 	cmpltui	zero,zero,1154
   11a8c:	000120b0 	cmpltui	zero,zero,1154
   11a90:	000120b0 	cmpltui	zero,zero,1154
   11a94:	000120b0 	cmpltui	zero,zero,1154
   11a98:	000120b0 	cmpltui	zero,zero,1154
   11a9c:	00011cd4 	movui	zero,1139
   11aa0:	000120e4 	muli	zero,zero,1155
   11aa4:	000120b0 	cmpltui	zero,zero,1154
   11aa8:	00011cfc 	xorhi	zero,zero,1139
   11aac:	000120f0 	cmpltui	zero,zero,1155
   11ab0:	000120b0 	cmpltui	zero,zero,1154
   11ab4:	000120d8 	cmpnei	zero,zero,1155
   11ab8:	00012078 	rdprs	zero,zero,1153
   11abc:	00012078 	rdprs	zero,zero,1153
   11ac0:	00012078 	rdprs	zero,zero,1153
   11ac4:	00012078 	rdprs	zero,zero,1153
   11ac8:	00012078 	rdprs	zero,zero,1153
   11acc:	00012078 	rdprs	zero,zero,1153
   11ad0:	00012078 	rdprs	zero,zero,1153
   11ad4:	00012078 	rdprs	zero,zero,1153
   11ad8:	00012078 	rdprs	zero,zero,1153
   11adc:	000120b0 	cmpltui	zero,zero,1154
   11ae0:	000120b0 	cmpltui	zero,zero,1154
   11ae4:	000120b0 	cmpltui	zero,zero,1154
   11ae8:	000120b0 	cmpltui	zero,zero,1154
   11aec:	000120b0 	cmpltui	zero,zero,1154
   11af0:	000120b0 	cmpltui	zero,zero,1154
   11af4:	000120b0 	cmpltui	zero,zero,1154
   11af8:	000120b0 	cmpltui	zero,zero,1154
   11afc:	000120b0 	cmpltui	zero,zero,1154
   11b00:	000120b0 	cmpltui	zero,zero,1154
   11b04:	00012010 	cmplti	zero,zero,1152
   11b08:	000120b0 	cmpltui	zero,zero,1154
   11b0c:	000120b0 	cmpltui	zero,zero,1154
   11b10:	000120b0 	cmpltui	zero,zero,1154
   11b14:	000120b0 	cmpltui	zero,zero,1154
   11b18:	000120b0 	cmpltui	zero,zero,1154
   11b1c:	000120b0 	cmpltui	zero,zero,1154
   11b20:	000120b0 	cmpltui	zero,zero,1154
   11b24:	000120b0 	cmpltui	zero,zero,1154
   11b28:	000120b0 	cmpltui	zero,zero,1154
   11b2c:	000120b0 	cmpltui	zero,zero,1154
   11b30:	00011ca4 	muli	zero,zero,1138
   11b34:	000120b0 	cmpltui	zero,zero,1154
   11b38:	000120b0 	cmpltui	zero,zero,1154
   11b3c:	000120b0 	cmpltui	zero,zero,1154
   11b40:	000120b0 	cmpltui	zero,zero,1154
   11b44:	000120b0 	cmpltui	zero,zero,1154
   11b48:	00011bd8 	cmpnei	zero,zero,1135
   11b4c:	000120b0 	cmpltui	zero,zero,1154
   11b50:	000120b0 	cmpltui	zero,zero,1154
   11b54:	00011f04 	movi	zero,1148
   11b58:	000120b0 	cmpltui	zero,zero,1154
   11b5c:	000120b0 	cmpltui	zero,zero,1154
   11b60:	000120b0 	cmpltui	zero,zero,1154
   11b64:	000120b0 	cmpltui	zero,zero,1154
   11b68:	000120b0 	cmpltui	zero,zero,1154
   11b6c:	000120b0 	cmpltui	zero,zero,1154
   11b70:	000120b0 	cmpltui	zero,zero,1154
   11b74:	000120b0 	cmpltui	zero,zero,1154
   11b78:	000120b0 	cmpltui	zero,zero,1154
   11b7c:	000120b0 	cmpltui	zero,zero,1154
   11b80:	00011df0 	cmpltui	zero,zero,1143
   11b84:	00011db0 	cmpltui	zero,zero,1142
   11b88:	000120b0 	cmpltui	zero,zero,1154
   11b8c:	000120b0 	cmpltui	zero,zero,1154
   11b90:	000120b0 	cmpltui	zero,zero,1154
   11b94:	00011f60 	cmpeqi	zero,zero,1149
   11b98:	00011db0 	cmpltui	zero,zero,1142
   11b9c:	000120b0 	cmpltui	zero,zero,1154
   11ba0:	000120b0 	cmpltui	zero,zero,1154
   11ba4:	00011f4c 	andi	zero,zero,1149
   11ba8:	000120b0 	cmpltui	zero,zero,1154
   11bac:	00011f6c 	andhi	zero,zero,1149
   11bb0:	00011ca8 	cmpgeui	zero,zero,1138
   11bb4:	00011d70 	cmpltui	zero,zero,1141
   11bb8:	00011d64 	muli	zero,zero,1141
   11bbc:	000120b0 	cmpltui	zero,zero,1154
   11bc0:	00011d08 	cmpgei	zero,zero,1140
   11bc4:	000120b0 	cmpltui	zero,zero,1154
   11bc8:	00011bdc 	xori	zero,zero,1135
   11bcc:	000120b0 	cmpltui	zero,zero,1154
   11bd0:	000120b0 	cmpltui	zero,zero,1154
   11bd4:	00011fcc 	andi	zero,zero,1151
   11bd8:	8c400414 	ori	r17,r17,16
   11bdc:	88c0080c 	andi	r3,r17,32
   11be0:	d8802317 	ldw	r2,140(sp)
   11be4:	18029626 	beq	r3,zero,12640 <___svfiprintf_internal_r+0xd20>
   11be8:	dac02317 	ldw	r11,140(sp)
   11bec:	12400017 	ldw	r9,0(r2)
   11bf0:	12800117 	ldw	r10,4(r2)
   11bf4:	5ac00204 	addi	r11,r11,8
   11bf8:	dac02315 	stw	r11,140(sp)
   11bfc:	00800044 	movi	r2,1
   11c00:	4a86b03a 	or	r3,r9,r10
   11c04:	d8001d85 	stb	zero,118(sp)
   11c08:	8039883a 	mov	fp,r16
   11c0c:	0017883a 	mov	r11,zero
   11c10:	80000216 	blt	r16,zero,11c1c <___svfiprintf_internal_r+0x2fc>
   11c14:	013fdfc4 	movi	r4,-129
   11c18:	8922703a 	and	r17,r17,r4
   11c1c:	1801d01e 	bne	r3,zero,12360 <___svfiprintf_internal_r+0xa40>
   11c20:	80024426 	beq	r16,zero,12534 <___svfiprintf_internal_r+0xc14>
   11c24:	10803fcc 	andi	r2,r2,255
   11c28:	00c00044 	movi	r3,1
   11c2c:	10c2b326 	beq	r2,r3,126fc <___svfiprintf_internal_r+0xddc>
   11c30:	00c00084 	movi	r3,2
   11c34:	10c25b26 	beq	r2,r3,125a4 <___svfiprintf_internal_r+0xc84>
   11c38:	d8c01a04 	addi	r3,sp,104
   11c3c:	4808d0fa 	srli	r4,r9,3
   11c40:	500a977a 	slli	r5,r10,29
   11c44:	5014d0fa 	srli	r10,r10,3
   11c48:	4a4001cc 	andi	r9,r9,7
   11c4c:	48800c04 	addi	r2,r9,48
   11c50:	18ffffc4 	addi	r3,r3,-1
   11c54:	2912b03a 	or	r9,r5,r4
   11c58:	18800005 	stb	r2,0(r3)
   11c5c:	4a88b03a 	or	r4,r9,r10
   11c60:	203ff61e 	bne	r4,zero,11c3c <__alt_mem_descriptor_memory+0xdefd1c3c>
   11c64:	8900004c 	andi	r4,r17,1
   11c68:	d8c02615 	stw	r3,152(sp)
   11c6c:	2002951e 	bne	r4,zero,126c4 <___svfiprintf_internal_r+0xda4>
   11c70:	da801e17 	ldw	r10,120(sp)
   11c74:	50f9c83a 	sub	fp,r10,r3
   11c78:	df002015 	stw	fp,128(sp)
   11c7c:	e400010e 	bge	fp,r16,11c84 <___svfiprintf_internal_r+0x364>
   11c80:	dc002015 	stw	r16,128(sp)
   11c84:	5ac03fcc 	andi	r11,r11,255
   11c88:	5ac0201c 	xori	r11,r11,128
   11c8c:	5affe004 	addi	r11,r11,-128
   11c90:	58006326 	beq	r11,zero,11e20 <___svfiprintf_internal_r+0x500>
   11c94:	d8c02017 	ldw	r3,128(sp)
   11c98:	18c00044 	addi	r3,r3,1
   11c9c:	d8c02015 	stw	r3,128(sp)
   11ca0:	00005f06 	br	11e20 <___svfiprintf_internal_r+0x500>
   11ca4:	8c400414 	ori	r17,r17,16
   11ca8:	88c0080c 	andi	r3,r17,32
   11cac:	d8802317 	ldw	r2,140(sp)
   11cb0:	18027826 	beq	r3,zero,12694 <___svfiprintf_internal_r+0xd74>
   11cb4:	dac02317 	ldw	r11,140(sp)
   11cb8:	12400017 	ldw	r9,0(r2)
   11cbc:	12800117 	ldw	r10,4(r2)
   11cc0:	5ac00204 	addi	r11,r11,8
   11cc4:	dac02315 	stw	r11,140(sp)
   11cc8:	0005883a 	mov	r2,zero
   11ccc:	4a86b03a 	or	r3,r9,r10
   11cd0:	003fcc06 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   11cd4:	da802317 	ldw	r10,140(sp)
   11cd8:	dac02317 	ldw	r11,140(sp)
   11cdc:	52800017 	ldw	r10,0(r10)
   11ce0:	58800104 	addi	r2,r11,4
   11ce4:	da802115 	stw	r10,132(sp)
   11ce8:	50028a0e 	bge	r10,zero,12714 <___svfiprintf_internal_r+0xdf4>
   11cec:	da802117 	ldw	r10,132(sp)
   11cf0:	d8802315 	stw	r2,140(sp)
   11cf4:	0295c83a 	sub	r10,zero,r10
   11cf8:	da802115 	stw	r10,132(sp)
   11cfc:	8c400114 	ori	r17,r17,4
   11d00:	a9000007 	ldb	r4,0(r21)
   11d04:	003f5206 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11d08:	da802317 	ldw	r10,140(sp)
   11d0c:	dac02317 	ldw	r11,140(sp)
   11d10:	d8001d85 	stb	zero,118(sp)
   11d14:	52800017 	ldw	r10,0(r10)
   11d18:	5dc00104 	addi	r23,r11,4
   11d1c:	da802615 	stw	r10,152(sp)
   11d20:	5002eb26 	beq	r10,zero,128d0 <___svfiprintf_internal_r+0xfb0>
   11d24:	d9002617 	ldw	r4,152(sp)
   11d28:	8002d716 	blt	r16,zero,12888 <___svfiprintf_internal_r+0xf68>
   11d2c:	000b883a 	mov	r5,zero
   11d30:	800d883a 	mov	r6,r16
   11d34:	da002c15 	stw	r8,176(sp)
   11d38:	000fd2c0 	call	fd2c <memchr>
   11d3c:	da002c17 	ldw	r8,176(sp)
   11d40:	1002fb26 	beq	r2,zero,12930 <___svfiprintf_internal_r+0x1010>
   11d44:	d8c02617 	ldw	r3,152(sp)
   11d48:	10f9c83a 	sub	fp,r2,r3
   11d4c:	8700010e 	bge	r16,fp,11d54 <___svfiprintf_internal_r+0x434>
   11d50:	8039883a 	mov	fp,r16
   11d54:	dac01d83 	ldbu	r11,118(sp)
   11d58:	ddc02315 	stw	r23,140(sp)
   11d5c:	0021883a 	mov	r16,zero
   11d60:	003fc506 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   11d64:	8c400814 	ori	r17,r17,32
   11d68:	a9000007 	ldb	r4,0(r21)
   11d6c:	003f3806 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11d70:	dac02317 	ldw	r11,140(sp)
   11d74:	00800c04 	movi	r2,48
   11d78:	d8801d05 	stb	r2,116(sp)
   11d7c:	5a400017 	ldw	r9,0(r11)
   11d80:	00801e04 	movi	r2,120
   11d84:	d8801d45 	stb	r2,117(sp)
   11d88:	00800174 	movhi	r2,5
   11d8c:	10b59d04 	addi	r2,r2,-10636
   11d90:	5ac00104 	addi	r11,r11,4
   11d94:	d8802a15 	stw	r2,168(sp)
   11d98:	0015883a 	mov	r10,zero
   11d9c:	8c400094 	ori	r17,r17,2
   11da0:	dac02315 	stw	r11,140(sp)
   11da4:	00800084 	movi	r2,2
   11da8:	4807883a 	mov	r3,r9
   11dac:	003f9506 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   11db0:	d9801d85 	stb	r6,118(sp)
   11db4:	8880080c 	andi	r2,r17,32
   11db8:	d8c02317 	ldw	r3,140(sp)
   11dbc:	10009926 	beq	r2,zero,12024 <___svfiprintf_internal_r+0x704>
   11dc0:	dac02317 	ldw	r11,140(sp)
   11dc4:	18800117 	ldw	r2,4(r3)
   11dc8:	1a400017 	ldw	r9,0(r3)
   11dcc:	5ac00204 	addi	r11,r11,8
   11dd0:	dac02315 	stw	r11,140(sp)
   11dd4:	1015883a 	mov	r10,r2
   11dd8:	10009d16 	blt	r2,zero,12050 <___svfiprintf_internal_r+0x730>
   11ddc:	dac01d83 	ldbu	r11,118(sp)
   11de0:	8039883a 	mov	fp,r16
   11de4:	00800044 	movi	r2,1
   11de8:	4a86b03a 	or	r3,r9,r10
   11dec:	003f8806 	br	11c10 <__alt_mem_descriptor_memory+0xdefd1c10>
   11df0:	dac02317 	ldw	r11,140(sp)
   11df4:	00c00044 	movi	r3,1
   11df8:	da801004 	addi	r10,sp,64
   11dfc:	58800017 	ldw	r2,0(r11)
   11e00:	5ac00104 	addi	r11,r11,4
   11e04:	d8c02015 	stw	r3,128(sp)
   11e08:	d8001d85 	stb	zero,118(sp)
   11e0c:	d8801005 	stb	r2,64(sp)
   11e10:	dac02315 	stw	r11,140(sp)
   11e14:	1839883a 	mov	fp,r3
   11e18:	da802615 	stw	r10,152(sp)
   11e1c:	0021883a 	mov	r16,zero
   11e20:	8a80008c 	andi	r10,r17,2
   11e24:	da802215 	stw	r10,136(sp)
   11e28:	50000326 	beq	r10,zero,11e38 <___svfiprintf_internal_r+0x518>
   11e2c:	dac02017 	ldw	r11,128(sp)
   11e30:	5ac00084 	addi	r11,r11,2
   11e34:	dac02015 	stw	r11,128(sp)
   11e38:	88c0210c 	andi	r3,r17,132
   11e3c:	d8c02515 	stw	r3,148(sp)
   11e40:	1800bb1e 	bne	r3,zero,12130 <___svfiprintf_internal_r+0x810>
   11e44:	da802117 	ldw	r10,132(sp)
   11e48:	dac02017 	ldw	r11,128(sp)
   11e4c:	52edc83a 	sub	r22,r10,r11
   11e50:	0580b70e 	bge	zero,r22,12130 <___svfiprintf_internal_r+0x810>
   11e54:	02400404 	movi	r9,16
   11e58:	d8c01c17 	ldw	r3,112(sp)
   11e5c:	d8801b17 	ldw	r2,108(sp)
   11e60:	4d82a70e 	bge	r9,r22,12900 <___svfiprintf_internal_r+0xfe0>
   11e64:	01400174 	movhi	r5,5
   11e68:	29760904 	addi	r5,r5,-10204
   11e6c:	d9402815 	stw	r5,160(sp)
   11e70:	05c001c4 	movi	r23,7
   11e74:	00000306 	br	11e84 <___svfiprintf_internal_r+0x564>
   11e78:	b5bffc04 	addi	r22,r22,-16
   11e7c:	42000204 	addi	r8,r8,8
   11e80:	4d80150e 	bge	r9,r22,11ed8 <___svfiprintf_internal_r+0x5b8>
   11e84:	02800174 	movhi	r10,5
   11e88:	18c00404 	addi	r3,r3,16
   11e8c:	10800044 	addi	r2,r2,1
   11e90:	52b60904 	addi	r10,r10,-10204
   11e94:	42800015 	stw	r10,0(r8)
   11e98:	42400115 	stw	r9,4(r8)
   11e9c:	d8c01c15 	stw	r3,112(sp)
   11ea0:	d8801b15 	stw	r2,108(sp)
   11ea4:	b8bff40e 	bge	r23,r2,11e78 <__alt_mem_descriptor_memory+0xdefd1e78>
   11ea8:	9009883a 	mov	r4,r18
   11eac:	a00b883a 	mov	r5,r20
   11eb0:	d9801a04 	addi	r6,sp,104
   11eb4:	da402c15 	stw	r9,176(sp)
   11eb8:	00117580 	call	11758 <__ssprint_r>
   11ebc:	da402c17 	ldw	r9,176(sp)
   11ec0:	1001511e 	bne	r2,zero,12408 <___svfiprintf_internal_r+0xae8>
   11ec4:	b5bffc04 	addi	r22,r22,-16
   11ec8:	d8c01c17 	ldw	r3,112(sp)
   11ecc:	d8801b17 	ldw	r2,108(sp)
   11ed0:	d811883a 	mov	r8,sp
   11ed4:	4dbfeb16 	blt	r9,r22,11e84 <__alt_mem_descriptor_memory+0xdefd1e84>
   11ed8:	dac02817 	ldw	r11,160(sp)
   11edc:	b0c7883a 	add	r3,r22,r3
   11ee0:	10800044 	addi	r2,r2,1
   11ee4:	42c00015 	stw	r11,0(r8)
   11ee8:	45800115 	stw	r22,4(r8)
   11eec:	d8c01c15 	stw	r3,112(sp)
   11ef0:	d8801b15 	stw	r2,108(sp)
   11ef4:	010001c4 	movi	r4,7
   11ef8:	2081dd16 	blt	r4,r2,12670 <___svfiprintf_internal_r+0xd50>
   11efc:	42000204 	addi	r8,r8,8
   11f00:	00008d06 	br	12138 <___svfiprintf_internal_r+0x818>
   11f04:	00c00174 	movhi	r3,5
   11f08:	18f59804 	addi	r3,r3,-10656
   11f0c:	d8c02a15 	stw	r3,168(sp)
   11f10:	d9801d85 	stb	r6,118(sp)
   11f14:	88c0080c 	andi	r3,r17,32
   11f18:	d8802317 	ldw	r2,140(sp)
   11f1c:	18003226 	beq	r3,zero,11fe8 <___svfiprintf_internal_r+0x6c8>
   11f20:	da802317 	ldw	r10,140(sp)
   11f24:	12400017 	ldw	r9,0(r2)
   11f28:	52800204 	addi	r10,r10,8
   11f2c:	da802315 	stw	r10,140(sp)
   11f30:	12800117 	ldw	r10,4(r2)
   11f34:	8880004c 	andi	r2,r17,1
   11f38:	1001be26 	beq	r2,zero,12634 <___svfiprintf_internal_r+0xd14>
   11f3c:	4a86b03a 	or	r3,r9,r10
   11f40:	1802291e 	bne	r3,zero,127e8 <___svfiprintf_internal_r+0xec8>
   11f44:	00800084 	movi	r2,2
   11f48:	003f2e06 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   11f4c:	a9000007 	ldb	r4,0(r21)
   11f50:	a805883a 	mov	r2,r21
   11f54:	21c22a26 	beq	r4,r7,12800 <___svfiprintf_internal_r+0xee0>
   11f58:	8c400414 	ori	r17,r17,16
   11f5c:	003ebc06 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11f60:	8c401014 	ori	r17,r17,64
   11f64:	a9000007 	ldb	r4,0(r21)
   11f68:	003eb906 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11f6c:	d9801d85 	stb	r6,118(sp)
   11f70:	8880080c 	andi	r2,r17,32
   11f74:	1002131e 	bne	r2,zero,127c4 <___svfiprintf_internal_r+0xea4>
   11f78:	8880040c 	andi	r2,r17,16
   11f7c:	1002241e 	bne	r2,zero,12810 <___svfiprintf_internal_r+0xef0>
   11f80:	8c40100c 	andi	r17,r17,64
   11f84:	88022226 	beq	r17,zero,12810 <___svfiprintf_internal_r+0xef0>
   11f88:	dac02317 	ldw	r11,140(sp)
   11f8c:	da802417 	ldw	r10,144(sp)
   11f90:	58800017 	ldw	r2,0(r11)
   11f94:	5ac00104 	addi	r11,r11,4
   11f98:	dac02315 	stw	r11,140(sp)
   11f9c:	1280000d 	sth	r10,0(r2)
   11fa0:	003e8306 	br	119b0 <__alt_mem_descriptor_memory+0xdefd19b0>
   11fa4:	8c400054 	ori	r17,r17,1
   11fa8:	a9000007 	ldb	r4,0(r21)
   11fac:	003ea806 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11fb0:	30803fcc 	andi	r2,r6,255
   11fb4:	1080201c 	xori	r2,r2,128
   11fb8:	10bfe004 	addi	r2,r2,-128
   11fbc:	1001ff1e 	bne	r2,zero,127bc <___svfiprintf_internal_r+0xe9c>
   11fc0:	01800804 	movi	r6,32
   11fc4:	a9000007 	ldb	r4,0(r21)
   11fc8:	003ea106 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   11fcc:	02c00174 	movhi	r11,5
   11fd0:	5af59d04 	addi	r11,r11,-10636
   11fd4:	dac02a15 	stw	r11,168(sp)
   11fd8:	d9801d85 	stb	r6,118(sp)
   11fdc:	88c0080c 	andi	r3,r17,32
   11fe0:	d8802317 	ldw	r2,140(sp)
   11fe4:	183fce1e 	bne	r3,zero,11f20 <__alt_mem_descriptor_memory+0xdefd1f20>
   11fe8:	88c0040c 	andi	r3,r17,16
   11fec:	1801ed1e 	bne	r3,zero,127a4 <___svfiprintf_internal_r+0xe84>
   11ff0:	88c0100c 	andi	r3,r17,64
   11ff4:	18021a26 	beq	r3,zero,12860 <___svfiprintf_internal_r+0xf40>
   11ff8:	da802317 	ldw	r10,140(sp)
   11ffc:	1240000b 	ldhu	r9,0(r2)
   12000:	52800104 	addi	r10,r10,4
   12004:	da802315 	stw	r10,140(sp)
   12008:	0015883a 	mov	r10,zero
   1200c:	003fc906 	br	11f34 <__alt_mem_descriptor_memory+0xdefd1f34>
   12010:	8c400414 	ori	r17,r17,16
   12014:	d9801d85 	stb	r6,118(sp)
   12018:	8880080c 	andi	r2,r17,32
   1201c:	d8c02317 	ldw	r3,140(sp)
   12020:	103f671e 	bne	r2,zero,11dc0 <__alt_mem_descriptor_memory+0xdefd1dc0>
   12024:	8880040c 	andi	r2,r17,16
   12028:	1001c71e 	bne	r2,zero,12748 <___svfiprintf_internal_r+0xe28>
   1202c:	8880100c 	andi	r2,r17,64
   12030:	1001c526 	beq	r2,zero,12748 <___svfiprintf_internal_r+0xe28>
   12034:	1a40000f 	ldh	r9,0(r3)
   12038:	dac02317 	ldw	r11,140(sp)
   1203c:	4815d7fa 	srai	r10,r9,31
   12040:	5ac00104 	addi	r11,r11,4
   12044:	dac02315 	stw	r11,140(sp)
   12048:	5005883a 	mov	r2,r10
   1204c:	103f630e 	bge	r2,zero,11ddc <__alt_mem_descriptor_memory+0xdefd1ddc>
   12050:	0253c83a 	sub	r9,zero,r9
   12054:	4804c03a 	cmpne	r2,r9,zero
   12058:	0295c83a 	sub	r10,zero,r10
   1205c:	5095c83a 	sub	r10,r10,r2
   12060:	02c00b44 	movi	r11,45
   12064:	dac01d85 	stb	r11,118(sp)
   12068:	8039883a 	mov	fp,r16
   1206c:	00800044 	movi	r2,1
   12070:	4a86b03a 	or	r3,r9,r10
   12074:	003ee606 	br	11c10 <__alt_mem_descriptor_memory+0xdefd1c10>
   12078:	a815883a 	mov	r10,r21
   1207c:	d8002115 	stw	zero,132(sp)
   12080:	20bff404 	addi	r2,r4,-48
   12084:	51000007 	ldb	r4,0(r10)
   12088:	da802117 	ldw	r10,132(sp)
   1208c:	ad400044 	addi	r21,r21,1
   12090:	52c002a4 	muli	r11,r10,10
   12094:	a815883a 	mov	r10,r21
   12098:	5885883a 	add	r2,r11,r2
   1209c:	d8802115 	stw	r2,132(sp)
   120a0:	20bff404 	addi	r2,r4,-48
   120a4:	28bff72e 	bgeu	r5,r2,12084 <__alt_mem_descriptor_memory+0xdefd2084>
   120a8:	20bff804 	addi	r2,r4,-32
   120ac:	18be6b2e 	bgeu	r3,r2,11a5c <__alt_mem_descriptor_memory+0xdefd1a5c>
   120b0:	d9801d85 	stb	r6,118(sp)
   120b4:	2000ce26 	beq	r4,zero,123f0 <___svfiprintf_internal_r+0xad0>
   120b8:	02800044 	movi	r10,1
   120bc:	dac01004 	addi	r11,sp,64
   120c0:	da802015 	stw	r10,128(sp)
   120c4:	d9001005 	stb	r4,64(sp)
   120c8:	d8001d85 	stb	zero,118(sp)
   120cc:	5039883a 	mov	fp,r10
   120d0:	dac02615 	stw	r11,152(sp)
   120d4:	003f5106 	br	11e1c <__alt_mem_descriptor_memory+0xdefd1e1c>
   120d8:	8c402014 	ori	r17,r17,128
   120dc:	a9000007 	ldb	r4,0(r21)
   120e0:	003e5b06 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   120e4:	01800ac4 	movi	r6,43
   120e8:	a9000007 	ldb	r4,0(r21)
   120ec:	003e5806 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   120f0:	a9000007 	ldb	r4,0(r21)
   120f4:	aa800044 	addi	r10,r21,1
   120f8:	22421426 	beq	r4,r9,1294c <___svfiprintf_internal_r+0x102c>
   120fc:	20bff404 	addi	r2,r4,-48
   12100:	502b883a 	mov	r21,r10
   12104:	0021883a 	mov	r16,zero
   12108:	28be5236 	bltu	r5,r2,11a54 <__alt_mem_descriptor_memory+0xdefd1a54>
   1210c:	a9000007 	ldb	r4,0(r21)
   12110:	840002a4 	muli	r16,r16,10
   12114:	ad400044 	addi	r21,r21,1
   12118:	1421883a 	add	r16,r2,r16
   1211c:	20bff404 	addi	r2,r4,-48
   12120:	28bffa2e 	bgeu	r5,r2,1210c <__alt_mem_descriptor_memory+0xdefd210c>
   12124:	803e4b0e 	bge	r16,zero,11a54 <__alt_mem_descriptor_memory+0xdefd1a54>
   12128:	043fffc4 	movi	r16,-1
   1212c:	003e4906 	br	11a54 <__alt_mem_descriptor_memory+0xdefd1a54>
   12130:	d8c01c17 	ldw	r3,112(sp)
   12134:	d8801b17 	ldw	r2,108(sp)
   12138:	d9001d87 	ldb	r4,118(sp)
   1213c:	20000b26 	beq	r4,zero,1216c <___svfiprintf_internal_r+0x84c>
   12140:	d9001d84 	addi	r4,sp,118
   12144:	18c00044 	addi	r3,r3,1
   12148:	10800044 	addi	r2,r2,1
   1214c:	41000015 	stw	r4,0(r8)
   12150:	01000044 	movi	r4,1
   12154:	41000115 	stw	r4,4(r8)
   12158:	d8c01c15 	stw	r3,112(sp)
   1215c:	d8801b15 	stw	r2,108(sp)
   12160:	010001c4 	movi	r4,7
   12164:	20811e16 	blt	r4,r2,125e0 <___svfiprintf_internal_r+0xcc0>
   12168:	42000204 	addi	r8,r8,8
   1216c:	da802217 	ldw	r10,136(sp)
   12170:	50000b26 	beq	r10,zero,121a0 <___svfiprintf_internal_r+0x880>
   12174:	d9001d04 	addi	r4,sp,116
   12178:	18c00084 	addi	r3,r3,2
   1217c:	10800044 	addi	r2,r2,1
   12180:	41000015 	stw	r4,0(r8)
   12184:	01000084 	movi	r4,2
   12188:	41000115 	stw	r4,4(r8)
   1218c:	d8c01c15 	stw	r3,112(sp)
   12190:	d8801b15 	stw	r2,108(sp)
   12194:	010001c4 	movi	r4,7
   12198:	20811a16 	blt	r4,r2,12604 <___svfiprintf_internal_r+0xce4>
   1219c:	42000204 	addi	r8,r8,8
   121a0:	dac02517 	ldw	r11,148(sp)
   121a4:	01002004 	movi	r4,128
   121a8:	5900a826 	beq	r11,r4,1244c <___svfiprintf_internal_r+0xb2c>
   121ac:	8721c83a 	sub	r16,r16,fp
   121b0:	0400260e 	bge	zero,r16,1224c <___svfiprintf_internal_r+0x92c>
   121b4:	01c00404 	movi	r7,16
   121b8:	3c01a50e 	bge	r7,r16,12850 <___svfiprintf_internal_r+0xf30>
   121bc:	01000174 	movhi	r4,5
   121c0:	21360504 	addi	r4,r4,-10220
   121c4:	d9002215 	stw	r4,136(sp)
   121c8:	382f883a 	mov	r23,r7
   121cc:	058001c4 	movi	r22,7
   121d0:	00000306 	br	121e0 <___svfiprintf_internal_r+0x8c0>
   121d4:	843ffc04 	addi	r16,r16,-16
   121d8:	42000204 	addi	r8,r8,8
   121dc:	bc00110e 	bge	r23,r16,12224 <___svfiprintf_internal_r+0x904>
   121e0:	18c00404 	addi	r3,r3,16
   121e4:	10800044 	addi	r2,r2,1
   121e8:	44c00015 	stw	r19,0(r8)
   121ec:	45c00115 	stw	r23,4(r8)
   121f0:	d8c01c15 	stw	r3,112(sp)
   121f4:	d8801b15 	stw	r2,108(sp)
   121f8:	b0bff60e 	bge	r22,r2,121d4 <__alt_mem_descriptor_memory+0xdefd21d4>
   121fc:	9009883a 	mov	r4,r18
   12200:	a00b883a 	mov	r5,r20
   12204:	d9801a04 	addi	r6,sp,104
   12208:	00117580 	call	11758 <__ssprint_r>
   1220c:	10007e1e 	bne	r2,zero,12408 <___svfiprintf_internal_r+0xae8>
   12210:	843ffc04 	addi	r16,r16,-16
   12214:	d8c01c17 	ldw	r3,112(sp)
   12218:	d8801b17 	ldw	r2,108(sp)
   1221c:	d811883a 	mov	r8,sp
   12220:	bc3fef16 	blt	r23,r16,121e0 <__alt_mem_descriptor_memory+0xdefd21e0>
   12224:	da802217 	ldw	r10,136(sp)
   12228:	1c07883a 	add	r3,r3,r16
   1222c:	10800044 	addi	r2,r2,1
   12230:	42800015 	stw	r10,0(r8)
   12234:	44000115 	stw	r16,4(r8)
   12238:	d8c01c15 	stw	r3,112(sp)
   1223c:	d8801b15 	stw	r2,108(sp)
   12240:	010001c4 	movi	r4,7
   12244:	2080ce16 	blt	r4,r2,12580 <___svfiprintf_internal_r+0xc60>
   12248:	42000204 	addi	r8,r8,8
   1224c:	dac02617 	ldw	r11,152(sp)
   12250:	e0c7883a 	add	r3,fp,r3
   12254:	10800044 	addi	r2,r2,1
   12258:	42c00015 	stw	r11,0(r8)
   1225c:	47000115 	stw	fp,4(r8)
   12260:	d8c01c15 	stw	r3,112(sp)
   12264:	d8801b15 	stw	r2,108(sp)
   12268:	010001c4 	movi	r4,7
   1226c:	2080a316 	blt	r4,r2,124fc <___svfiprintf_internal_r+0xbdc>
   12270:	42000204 	addi	r8,r8,8
   12274:	8c40010c 	andi	r17,r17,4
   12278:	88002b26 	beq	r17,zero,12328 <___svfiprintf_internal_r+0xa08>
   1227c:	da802117 	ldw	r10,132(sp)
   12280:	dac02017 	ldw	r11,128(sp)
   12284:	52e1c83a 	sub	r16,r10,r11
   12288:	0400270e 	bge	zero,r16,12328 <___svfiprintf_internal_r+0xa08>
   1228c:	04400404 	movi	r17,16
   12290:	d8801b17 	ldw	r2,108(sp)
   12294:	8c019e0e 	bge	r17,r16,12910 <___svfiprintf_internal_r+0xff0>
   12298:	01400174 	movhi	r5,5
   1229c:	29760904 	addi	r5,r5,-10204
   122a0:	d9402815 	stw	r5,160(sp)
   122a4:	070001c4 	movi	fp,7
   122a8:	00000306 	br	122b8 <___svfiprintf_internal_r+0x998>
   122ac:	843ffc04 	addi	r16,r16,-16
   122b0:	42000204 	addi	r8,r8,8
   122b4:	8c00130e 	bge	r17,r16,12304 <___svfiprintf_internal_r+0x9e4>
   122b8:	02800174 	movhi	r10,5
   122bc:	18c00404 	addi	r3,r3,16
   122c0:	10800044 	addi	r2,r2,1
   122c4:	52b60904 	addi	r10,r10,-10204
   122c8:	42800015 	stw	r10,0(r8)
   122cc:	44400115 	stw	r17,4(r8)
   122d0:	d8c01c15 	stw	r3,112(sp)
   122d4:	d8801b15 	stw	r2,108(sp)
   122d8:	e0bff40e 	bge	fp,r2,122ac <__alt_mem_descriptor_memory+0xdefd22ac>
   122dc:	9009883a 	mov	r4,r18
   122e0:	a00b883a 	mov	r5,r20
   122e4:	d9801a04 	addi	r6,sp,104
   122e8:	00117580 	call	11758 <__ssprint_r>
   122ec:	1000461e 	bne	r2,zero,12408 <___svfiprintf_internal_r+0xae8>
   122f0:	843ffc04 	addi	r16,r16,-16
   122f4:	d8c01c17 	ldw	r3,112(sp)
   122f8:	d8801b17 	ldw	r2,108(sp)
   122fc:	d811883a 	mov	r8,sp
   12300:	8c3fed16 	blt	r17,r16,122b8 <__alt_mem_descriptor_memory+0xdefd22b8>
   12304:	dac02817 	ldw	r11,160(sp)
   12308:	1c07883a 	add	r3,r3,r16
   1230c:	10800044 	addi	r2,r2,1
   12310:	42c00015 	stw	r11,0(r8)
   12314:	44000115 	stw	r16,4(r8)
   12318:	d8c01c15 	stw	r3,112(sp)
   1231c:	d8801b15 	stw	r2,108(sp)
   12320:	010001c4 	movi	r4,7
   12324:	2080fe16 	blt	r4,r2,12720 <___svfiprintf_internal_r+0xe00>
   12328:	dd802017 	ldw	r22,128(sp)
   1232c:	da802117 	ldw	r10,132(sp)
   12330:	b280010e 	bge	r22,r10,12338 <___svfiprintf_internal_r+0xa18>
   12334:	502d883a 	mov	r22,r10
   12338:	dac02417 	ldw	r11,144(sp)
   1233c:	5d97883a 	add	r11,r11,r22
   12340:	dac02415 	stw	r11,144(sp)
   12344:	1800751e 	bne	r3,zero,1251c <___svfiprintf_internal_r+0xbfc>
   12348:	a8800007 	ldb	r2,0(r21)
   1234c:	d8001b15 	stw	zero,108(sp)
   12350:	d811883a 	mov	r8,sp
   12354:	103d981e 	bne	r2,zero,119b8 <__alt_mem_descriptor_memory+0xdefd19b8>
   12358:	a82d883a 	mov	r22,r21
   1235c:	003daf06 	br	11a1c <__alt_mem_descriptor_memory+0xdefd1a1c>
   12360:	10803fcc 	andi	r2,r2,255
   12364:	00c00044 	movi	r3,1
   12368:	10fe311e 	bne	r2,r3,11c30 <__alt_mem_descriptor_memory+0xdefd1c30>
   1236c:	5000e126 	beq	r10,zero,126f4 <___svfiprintf_internal_r+0xdd4>
   12370:	dc402015 	stw	r17,128(sp)
   12374:	dc002215 	stw	r16,136(sp)
   12378:	dd801a04 	addi	r22,sp,104
   1237c:	402f883a 	mov	r23,r8
   12380:	5839883a 	mov	fp,r11
   12384:	4821883a 	mov	r16,r9
   12388:	5023883a 	mov	r17,r10
   1238c:	8009883a 	mov	r4,r16
   12390:	880b883a 	mov	r5,r17
   12394:	01800284 	movi	r6,10
   12398:	000f883a 	mov	r7,zero
   1239c:	0014ba40 	call	14ba4 <__umoddi3>
   123a0:	10800c04 	addi	r2,r2,48
   123a4:	b5bfffc4 	addi	r22,r22,-1
   123a8:	8009883a 	mov	r4,r16
   123ac:	880b883a 	mov	r5,r17
   123b0:	01800284 	movi	r6,10
   123b4:	000f883a 	mov	r7,zero
   123b8:	b0800005 	stb	r2,0(r22)
   123bc:	00145e40 	call	145e4 <__udivdi3>
   123c0:	1021883a 	mov	r16,r2
   123c4:	10c4b03a 	or	r2,r2,r3
   123c8:	1823883a 	mov	r17,r3
   123cc:	103fef1e 	bne	r2,zero,1238c <__alt_mem_descriptor_memory+0xdefd238c>
   123d0:	da801e17 	ldw	r10,120(sp)
   123d4:	e017883a 	mov	r11,fp
   123d8:	b811883a 	mov	r8,r23
   123dc:	dc402017 	ldw	r17,128(sp)
   123e0:	dc002217 	ldw	r16,136(sp)
   123e4:	dd802615 	stw	r22,152(sp)
   123e8:	55b9c83a 	sub	fp,r10,r22
   123ec:	003e2206 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   123f0:	d8801c17 	ldw	r2,112(sp)
   123f4:	10000426 	beq	r2,zero,12408 <___svfiprintf_internal_r+0xae8>
   123f8:	d9002917 	ldw	r4,164(sp)
   123fc:	d9402717 	ldw	r5,156(sp)
   12400:	d9801a04 	addi	r6,sp,104
   12404:	00117580 	call	11758 <__ssprint_r>
   12408:	da802717 	ldw	r10,156(sp)
   1240c:	5080030b 	ldhu	r2,12(r10)
   12410:	1080100c 	andi	r2,r2,64
   12414:	1000511e 	bne	r2,zero,1255c <___svfiprintf_internal_r+0xc3c>
   12418:	d8802417 	ldw	r2,144(sp)
   1241c:	dfc03617 	ldw	ra,216(sp)
   12420:	df003517 	ldw	fp,212(sp)
   12424:	ddc03417 	ldw	r23,208(sp)
   12428:	dd803317 	ldw	r22,204(sp)
   1242c:	dd403217 	ldw	r21,200(sp)
   12430:	dd003117 	ldw	r20,196(sp)
   12434:	dcc03017 	ldw	r19,192(sp)
   12438:	dc802f17 	ldw	r18,188(sp)
   1243c:	dc402e17 	ldw	r17,184(sp)
   12440:	dc002d17 	ldw	r16,180(sp)
   12444:	dec03704 	addi	sp,sp,220
   12448:	f800283a 	ret
   1244c:	da802117 	ldw	r10,132(sp)
   12450:	dac02017 	ldw	r11,128(sp)
   12454:	52edc83a 	sub	r22,r10,r11
   12458:	05bf540e 	bge	zero,r22,121ac <__alt_mem_descriptor_memory+0xdefd21ac>
   1245c:	02400404 	movi	r9,16
   12460:	4d812f0e 	bge	r9,r22,12920 <___svfiprintf_internal_r+0x1000>
   12464:	01400174 	movhi	r5,5
   12468:	29760504 	addi	r5,r5,-10220
   1246c:	d9402215 	stw	r5,136(sp)
   12470:	05c001c4 	movi	r23,7
   12474:	00000306 	br	12484 <___svfiprintf_internal_r+0xb64>
   12478:	b5bffc04 	addi	r22,r22,-16
   1247c:	42000204 	addi	r8,r8,8
   12480:	4d80130e 	bge	r9,r22,124d0 <___svfiprintf_internal_r+0xbb0>
   12484:	18c00404 	addi	r3,r3,16
   12488:	10800044 	addi	r2,r2,1
   1248c:	44c00015 	stw	r19,0(r8)
   12490:	42400115 	stw	r9,4(r8)
   12494:	d8c01c15 	stw	r3,112(sp)
   12498:	d8801b15 	stw	r2,108(sp)
   1249c:	b8bff60e 	bge	r23,r2,12478 <__alt_mem_descriptor_memory+0xdefd2478>
   124a0:	9009883a 	mov	r4,r18
   124a4:	a00b883a 	mov	r5,r20
   124a8:	d9801a04 	addi	r6,sp,104
   124ac:	da402c15 	stw	r9,176(sp)
   124b0:	00117580 	call	11758 <__ssprint_r>
   124b4:	da402c17 	ldw	r9,176(sp)
   124b8:	103fd31e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   124bc:	b5bffc04 	addi	r22,r22,-16
   124c0:	d8c01c17 	ldw	r3,112(sp)
   124c4:	d8801b17 	ldw	r2,108(sp)
   124c8:	d811883a 	mov	r8,sp
   124cc:	4dbfed16 	blt	r9,r22,12484 <__alt_mem_descriptor_memory+0xdefd2484>
   124d0:	da802217 	ldw	r10,136(sp)
   124d4:	1d87883a 	add	r3,r3,r22
   124d8:	10800044 	addi	r2,r2,1
   124dc:	42800015 	stw	r10,0(r8)
   124e0:	45800115 	stw	r22,4(r8)
   124e4:	d8c01c15 	stw	r3,112(sp)
   124e8:	d8801b15 	stw	r2,108(sp)
   124ec:	010001c4 	movi	r4,7
   124f0:	2080ce16 	blt	r4,r2,1282c <___svfiprintf_internal_r+0xf0c>
   124f4:	42000204 	addi	r8,r8,8
   124f8:	003f2c06 	br	121ac <__alt_mem_descriptor_memory+0xdefd21ac>
   124fc:	9009883a 	mov	r4,r18
   12500:	a00b883a 	mov	r5,r20
   12504:	d9801a04 	addi	r6,sp,104
   12508:	00117580 	call	11758 <__ssprint_r>
   1250c:	103fbe1e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12510:	d8c01c17 	ldw	r3,112(sp)
   12514:	d811883a 	mov	r8,sp
   12518:	003f5606 	br	12274 <__alt_mem_descriptor_memory+0xdefd2274>
   1251c:	9009883a 	mov	r4,r18
   12520:	a00b883a 	mov	r5,r20
   12524:	d9801a04 	addi	r6,sp,104
   12528:	00117580 	call	11758 <__ssprint_r>
   1252c:	103f8626 	beq	r2,zero,12348 <__alt_mem_descriptor_memory+0xdefd2348>
   12530:	003fb506 	br	12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12534:	10803fcc 	andi	r2,r2,255
   12538:	10003b1e 	bne	r2,zero,12628 <___svfiprintf_internal_r+0xd08>
   1253c:	8880004c 	andi	r2,r17,1
   12540:	10007e26 	beq	r2,zero,1273c <___svfiprintf_internal_r+0xe1c>
   12544:	00800c04 	movi	r2,48
   12548:	d8c019c4 	addi	r3,sp,103
   1254c:	d88019c5 	stb	r2,103(sp)
   12550:	df002b17 	ldw	fp,172(sp)
   12554:	d8c02615 	stw	r3,152(sp)
   12558:	003dc706 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   1255c:	00bfffc4 	movi	r2,-1
   12560:	003fae06 	br	1241c <__alt_mem_descriptor_memory+0xdefd241c>
   12564:	9009883a 	mov	r4,r18
   12568:	a00b883a 	mov	r5,r20
   1256c:	d9801a04 	addi	r6,sp,104
   12570:	00117580 	call	11758 <__ssprint_r>
   12574:	103fa41e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12578:	d811883a 	mov	r8,sp
   1257c:	003d2406 	br	11a10 <__alt_mem_descriptor_memory+0xdefd1a10>
   12580:	9009883a 	mov	r4,r18
   12584:	a00b883a 	mov	r5,r20
   12588:	d9801a04 	addi	r6,sp,104
   1258c:	00117580 	call	11758 <__ssprint_r>
   12590:	103f9d1e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12594:	d8c01c17 	ldw	r3,112(sp)
   12598:	d8801b17 	ldw	r2,108(sp)
   1259c:	d811883a 	mov	r8,sp
   125a0:	003f2a06 	br	1224c <__alt_mem_descriptor_memory+0xdefd224c>
   125a4:	d9402a17 	ldw	r5,168(sp)
   125a8:	d8c01a04 	addi	r3,sp,104
   125ac:	488003cc 	andi	r2,r9,15
   125b0:	5008973a 	slli	r4,r10,28
   125b4:	2885883a 	add	r2,r5,r2
   125b8:	4812d13a 	srli	r9,r9,4
   125bc:	10800003 	ldbu	r2,0(r2)
   125c0:	5014d13a 	srli	r10,r10,4
   125c4:	18ffffc4 	addi	r3,r3,-1
   125c8:	2252b03a 	or	r9,r4,r9
   125cc:	18800005 	stb	r2,0(r3)
   125d0:	4a84b03a 	or	r2,r9,r10
   125d4:	103ff51e 	bne	r2,zero,125ac <__alt_mem_descriptor_memory+0xdefd25ac>
   125d8:	d8c02615 	stw	r3,152(sp)
   125dc:	003da406 	br	11c70 <__alt_mem_descriptor_memory+0xdefd1c70>
   125e0:	9009883a 	mov	r4,r18
   125e4:	a00b883a 	mov	r5,r20
   125e8:	d9801a04 	addi	r6,sp,104
   125ec:	00117580 	call	11758 <__ssprint_r>
   125f0:	103f851e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   125f4:	d8c01c17 	ldw	r3,112(sp)
   125f8:	d8801b17 	ldw	r2,108(sp)
   125fc:	d811883a 	mov	r8,sp
   12600:	003eda06 	br	1216c <__alt_mem_descriptor_memory+0xdefd216c>
   12604:	9009883a 	mov	r4,r18
   12608:	a00b883a 	mov	r5,r20
   1260c:	d9801a04 	addi	r6,sp,104
   12610:	00117580 	call	11758 <__ssprint_r>
   12614:	103f7c1e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12618:	d8c01c17 	ldw	r3,112(sp)
   1261c:	d8801b17 	ldw	r2,108(sp)
   12620:	d811883a 	mov	r8,sp
   12624:	003ede06 	br	121a0 <__alt_mem_descriptor_memory+0xdefd21a0>
   12628:	da801a04 	addi	r10,sp,104
   1262c:	da802615 	stw	r10,152(sp)
   12630:	003d9106 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   12634:	00800084 	movi	r2,2
   12638:	4a86b03a 	or	r3,r9,r10
   1263c:	003d7106 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   12640:	88c0040c 	andi	r3,r17,16
   12644:	18004f1e 	bne	r3,zero,12784 <___svfiprintf_internal_r+0xe64>
   12648:	88c0100c 	andi	r3,r17,64
   1264c:	18004d26 	beq	r3,zero,12784 <___svfiprintf_internal_r+0xe64>
   12650:	dac02317 	ldw	r11,140(sp)
   12654:	1240000b 	ldhu	r9,0(r2)
   12658:	0015883a 	mov	r10,zero
   1265c:	5ac00104 	addi	r11,r11,4
   12660:	dac02315 	stw	r11,140(sp)
   12664:	00800044 	movi	r2,1
   12668:	4807883a 	mov	r3,r9
   1266c:	003d6506 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   12670:	9009883a 	mov	r4,r18
   12674:	a00b883a 	mov	r5,r20
   12678:	d9801a04 	addi	r6,sp,104
   1267c:	00117580 	call	11758 <__ssprint_r>
   12680:	103f611e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12684:	d8c01c17 	ldw	r3,112(sp)
   12688:	d8801b17 	ldw	r2,108(sp)
   1268c:	d811883a 	mov	r8,sp
   12690:	003ea906 	br	12138 <__alt_mem_descriptor_memory+0xdefd2138>
   12694:	88c0040c 	andi	r3,r17,16
   12698:	1800321e 	bne	r3,zero,12764 <___svfiprintf_internal_r+0xe44>
   1269c:	88c0100c 	andi	r3,r17,64
   126a0:	18003026 	beq	r3,zero,12764 <___svfiprintf_internal_r+0xe44>
   126a4:	dac02317 	ldw	r11,140(sp)
   126a8:	1240000b 	ldhu	r9,0(r2)
   126ac:	0015883a 	mov	r10,zero
   126b0:	5ac00104 	addi	r11,r11,4
   126b4:	dac02315 	stw	r11,140(sp)
   126b8:	0005883a 	mov	r2,zero
   126bc:	4807883a 	mov	r3,r9
   126c0:	003d5006 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   126c4:	10803fcc 	andi	r2,r2,255
   126c8:	1080201c 	xori	r2,r2,128
   126cc:	10bfe004 	addi	r2,r2,-128
   126d0:	01000c04 	movi	r4,48
   126d4:	11006826 	beq	r2,r4,12878 <___svfiprintf_internal_r+0xf58>
   126d8:	da802617 	ldw	r10,152(sp)
   126dc:	d8801e17 	ldw	r2,120(sp)
   126e0:	193fffc5 	stb	r4,-1(r3)
   126e4:	52bfffc4 	addi	r10,r10,-1
   126e8:	da802615 	stw	r10,152(sp)
   126ec:	12b9c83a 	sub	fp,r2,r10
   126f0:	003d6106 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   126f4:	00800244 	movi	r2,9
   126f8:	127f1d36 	bltu	r2,r9,12370 <__alt_mem_descriptor_memory+0xdefd2370>
   126fc:	4a400c04 	addi	r9,r9,48
   12700:	d8c019c4 	addi	r3,sp,103
   12704:	da4019c5 	stb	r9,103(sp)
   12708:	df002b17 	ldw	fp,172(sp)
   1270c:	d8c02615 	stw	r3,152(sp)
   12710:	003d5906 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   12714:	d8802315 	stw	r2,140(sp)
   12718:	a9000007 	ldb	r4,0(r21)
   1271c:	003ccc06 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   12720:	9009883a 	mov	r4,r18
   12724:	a00b883a 	mov	r5,r20
   12728:	d9801a04 	addi	r6,sp,104
   1272c:	00117580 	call	11758 <__ssprint_r>
   12730:	103f351e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12734:	d8c01c17 	ldw	r3,112(sp)
   12738:	003efb06 	br	12328 <__alt_mem_descriptor_memory+0xdefd2328>
   1273c:	d8c01a04 	addi	r3,sp,104
   12740:	d8c02615 	stw	r3,152(sp)
   12744:	003d4c06 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   12748:	da802317 	ldw	r10,140(sp)
   1274c:	1a400017 	ldw	r9,0(r3)
   12750:	52800104 	addi	r10,r10,4
   12754:	da802315 	stw	r10,140(sp)
   12758:	4815d7fa 	srai	r10,r9,31
   1275c:	5005883a 	mov	r2,r10
   12760:	003d9d06 	br	11dd8 <__alt_mem_descriptor_memory+0xdefd1dd8>
   12764:	da802317 	ldw	r10,140(sp)
   12768:	12400017 	ldw	r9,0(r2)
   1276c:	0005883a 	mov	r2,zero
   12770:	52800104 	addi	r10,r10,4
   12774:	da802315 	stw	r10,140(sp)
   12778:	4807883a 	mov	r3,r9
   1277c:	0015883a 	mov	r10,zero
   12780:	003d2006 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   12784:	da802317 	ldw	r10,140(sp)
   12788:	12400017 	ldw	r9,0(r2)
   1278c:	00800044 	movi	r2,1
   12790:	52800104 	addi	r10,r10,4
   12794:	da802315 	stw	r10,140(sp)
   12798:	4807883a 	mov	r3,r9
   1279c:	0015883a 	mov	r10,zero
   127a0:	003d1806 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   127a4:	dac02317 	ldw	r11,140(sp)
   127a8:	12400017 	ldw	r9,0(r2)
   127ac:	0015883a 	mov	r10,zero
   127b0:	5ac00104 	addi	r11,r11,4
   127b4:	dac02315 	stw	r11,140(sp)
   127b8:	003dde06 	br	11f34 <__alt_mem_descriptor_memory+0xdefd1f34>
   127bc:	a9000007 	ldb	r4,0(r21)
   127c0:	003ca306 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   127c4:	dac02317 	ldw	r11,140(sp)
   127c8:	da802417 	ldw	r10,144(sp)
   127cc:	58800017 	ldw	r2,0(r11)
   127d0:	5007d7fa 	srai	r3,r10,31
   127d4:	5ac00104 	addi	r11,r11,4
   127d8:	dac02315 	stw	r11,140(sp)
   127dc:	12800015 	stw	r10,0(r2)
   127e0:	10c00115 	stw	r3,4(r2)
   127e4:	003c7206 	br	119b0 <__alt_mem_descriptor_memory+0xdefd19b0>
   127e8:	00800c04 	movi	r2,48
   127ec:	d8801d05 	stb	r2,116(sp)
   127f0:	d9001d45 	stb	r4,117(sp)
   127f4:	8c400094 	ori	r17,r17,2
   127f8:	00800084 	movi	r2,2
   127fc:	003d0106 	br	11c04 <__alt_mem_descriptor_memory+0xdefd1c04>
   12800:	ad400044 	addi	r21,r21,1
   12804:	8c400814 	ori	r17,r17,32
   12808:	11000047 	ldb	r4,1(r2)
   1280c:	003c9006 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   12810:	dac02317 	ldw	r11,140(sp)
   12814:	da802417 	ldw	r10,144(sp)
   12818:	58800017 	ldw	r2,0(r11)
   1281c:	5ac00104 	addi	r11,r11,4
   12820:	dac02315 	stw	r11,140(sp)
   12824:	12800015 	stw	r10,0(r2)
   12828:	003c6106 	br	119b0 <__alt_mem_descriptor_memory+0xdefd19b0>
   1282c:	9009883a 	mov	r4,r18
   12830:	a00b883a 	mov	r5,r20
   12834:	d9801a04 	addi	r6,sp,104
   12838:	00117580 	call	11758 <__ssprint_r>
   1283c:	103ef21e 	bne	r2,zero,12408 <__alt_mem_descriptor_memory+0xdefd2408>
   12840:	d8c01c17 	ldw	r3,112(sp)
   12844:	d8801b17 	ldw	r2,108(sp)
   12848:	d811883a 	mov	r8,sp
   1284c:	003e5706 	br	121ac <__alt_mem_descriptor_memory+0xdefd21ac>
   12850:	02c00174 	movhi	r11,5
   12854:	5af60504 	addi	r11,r11,-10220
   12858:	dac02215 	stw	r11,136(sp)
   1285c:	003e7106 	br	12224 <__alt_mem_descriptor_memory+0xdefd2224>
   12860:	dac02317 	ldw	r11,140(sp)
   12864:	12400017 	ldw	r9,0(r2)
   12868:	0015883a 	mov	r10,zero
   1286c:	5ac00104 	addi	r11,r11,4
   12870:	dac02315 	stw	r11,140(sp)
   12874:	003daf06 	br	11f34 <__alt_mem_descriptor_memory+0xdefd1f34>
   12878:	da801e17 	ldw	r10,120(sp)
   1287c:	d8c02617 	ldw	r3,152(sp)
   12880:	50f9c83a 	sub	fp,r10,r3
   12884:	003cfc06 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   12888:	da002c15 	stw	r8,176(sp)
   1288c:	0008d080 	call	8d08 <strlen>
   12890:	1039883a 	mov	fp,r2
   12894:	dac01d83 	ldbu	r11,118(sp)
   12898:	ddc02315 	stw	r23,140(sp)
   1289c:	0021883a 	mov	r16,zero
   128a0:	da002c17 	ldw	r8,176(sp)
   128a4:	003cf406 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   128a8:	04001004 	movi	r16,64
   128ac:	800b883a 	mov	r5,r16
   128b0:	00074e80 	call	74e8 <_malloc_r>
   128b4:	da802717 	ldw	r10,156(sp)
   128b8:	50800015 	stw	r2,0(r10)
   128bc:	50800415 	stw	r2,16(r10)
   128c0:	10002c26 	beq	r2,zero,12974 <___svfiprintf_internal_r+0x1054>
   128c4:	da802717 	ldw	r10,156(sp)
   128c8:	54000515 	stw	r16,20(r10)
   128cc:	003c2806 	br	11970 <__alt_mem_descriptor_memory+0xdefd1970>
   128d0:	00800184 	movi	r2,6
   128d4:	1400012e 	bgeu	r2,r16,128dc <___svfiprintf_internal_r+0xfbc>
   128d8:	1021883a 	mov	r16,r2
   128dc:	8039883a 	mov	fp,r16
   128e0:	802d883a 	mov	r22,r16
   128e4:	80001716 	blt	r16,zero,12944 <___svfiprintf_internal_r+0x1024>
   128e8:	00800174 	movhi	r2,5
   128ec:	10b5a204 	addi	r2,r2,-10616
   128f0:	dd802015 	stw	r22,128(sp)
   128f4:	ddc02315 	stw	r23,140(sp)
   128f8:	d8802615 	stw	r2,152(sp)
   128fc:	003d4706 	br	11e1c <__alt_mem_descriptor_memory+0xdefd1e1c>
   12900:	01000174 	movhi	r4,5
   12904:	21360904 	addi	r4,r4,-10204
   12908:	d9002815 	stw	r4,160(sp)
   1290c:	003d7206 	br	11ed8 <__alt_mem_descriptor_memory+0xdefd1ed8>
   12910:	01000174 	movhi	r4,5
   12914:	21360904 	addi	r4,r4,-10204
   12918:	d9002815 	stw	r4,160(sp)
   1291c:	003e7906 	br	12304 <__alt_mem_descriptor_memory+0xdefd2304>
   12920:	01000174 	movhi	r4,5
   12924:	21360504 	addi	r4,r4,-10220
   12928:	d9002215 	stw	r4,136(sp)
   1292c:	003ee806 	br	124d0 <__alt_mem_descriptor_memory+0xdefd24d0>
   12930:	8039883a 	mov	fp,r16
   12934:	dac01d83 	ldbu	r11,118(sp)
   12938:	ddc02315 	stw	r23,140(sp)
   1293c:	0021883a 	mov	r16,zero
   12940:	003ccd06 	br	11c78 <__alt_mem_descriptor_memory+0xdefd1c78>
   12944:	002d883a 	mov	r22,zero
   12948:	003fe706 	br	128e8 <__alt_mem_descriptor_memory+0xdefd28e8>
   1294c:	dac02317 	ldw	r11,140(sp)
   12950:	a805883a 	mov	r2,r21
   12954:	502b883a 	mov	r21,r10
   12958:	5c000017 	ldw	r16,0(r11)
   1295c:	59000104 	addi	r4,r11,4
   12960:	d9002315 	stw	r4,140(sp)
   12964:	803fa80e 	bge	r16,zero,12808 <__alt_mem_descriptor_memory+0xdefd2808>
   12968:	043fffc4 	movi	r16,-1
   1296c:	11000047 	ldb	r4,1(r2)
   12970:	003c3706 	br	11a50 <__alt_mem_descriptor_memory+0xdefd1a50>
   12974:	dac02917 	ldw	r11,164(sp)
   12978:	00800304 	movi	r2,12
   1297c:	58800015 	stw	r2,0(r11)
   12980:	00bfffc4 	movi	r2,-1
   12984:	003ea506 	br	1241c <__alt_mem_descriptor_memory+0xdefd241c>

00012988 <__sprint_r.part.0>:
   12988:	28801917 	ldw	r2,100(r5)
   1298c:	defff604 	addi	sp,sp,-40
   12990:	dd400515 	stw	r21,20(sp)
   12994:	dcc00315 	stw	r19,12(sp)
   12998:	dfc00915 	stw	ra,36(sp)
   1299c:	df000815 	stw	fp,32(sp)
   129a0:	ddc00715 	stw	r23,28(sp)
   129a4:	dd800615 	stw	r22,24(sp)
   129a8:	dd000415 	stw	r20,16(sp)
   129ac:	dc800215 	stw	r18,8(sp)
   129b0:	dc400115 	stw	r17,4(sp)
   129b4:	dc000015 	stw	r16,0(sp)
   129b8:	1088000c 	andi	r2,r2,8192
   129bc:	2827883a 	mov	r19,r5
   129c0:	302b883a 	mov	r21,r6
   129c4:	10002d26 	beq	r2,zero,12a7c <__sprint_r.part.0+0xf4>
   129c8:	30800217 	ldw	r2,8(r6)
   129cc:	35800017 	ldw	r22,0(r6)
   129d0:	10002826 	beq	r2,zero,12a74 <__sprint_r.part.0+0xec>
   129d4:	2029883a 	mov	r20,r4
   129d8:	b5c00104 	addi	r23,r22,4
   129dc:	04bfffc4 	movi	r18,-1
   129e0:	bc400017 	ldw	r17,0(r23)
   129e4:	b4000017 	ldw	r16,0(r22)
   129e8:	0039883a 	mov	fp,zero
   129ec:	8822d0ba 	srli	r17,r17,2
   129f0:	04400316 	blt	zero,r17,12a00 <__sprint_r.part.0+0x78>
   129f4:	00001706 	br	12a54 <__sprint_r.part.0+0xcc>
   129f8:	84000104 	addi	r16,r16,4
   129fc:	8f001526 	beq	r17,fp,12a54 <__sprint_r.part.0+0xcc>
   12a00:	81400017 	ldw	r5,0(r16)
   12a04:	a009883a 	mov	r4,r20
   12a08:	980d883a 	mov	r6,r19
   12a0c:	00140a40 	call	140a4 <_fputwc_r>
   12a10:	e7000044 	addi	fp,fp,1
   12a14:	14bff81e 	bne	r2,r18,129f8 <__alt_mem_descriptor_memory+0xdefd29f8>
   12a18:	9005883a 	mov	r2,r18
   12a1c:	a8000215 	stw	zero,8(r21)
   12a20:	a8000115 	stw	zero,4(r21)
   12a24:	dfc00917 	ldw	ra,36(sp)
   12a28:	df000817 	ldw	fp,32(sp)
   12a2c:	ddc00717 	ldw	r23,28(sp)
   12a30:	dd800617 	ldw	r22,24(sp)
   12a34:	dd400517 	ldw	r21,20(sp)
   12a38:	dd000417 	ldw	r20,16(sp)
   12a3c:	dcc00317 	ldw	r19,12(sp)
   12a40:	dc800217 	ldw	r18,8(sp)
   12a44:	dc400117 	ldw	r17,4(sp)
   12a48:	dc000017 	ldw	r16,0(sp)
   12a4c:	dec00a04 	addi	sp,sp,40
   12a50:	f800283a 	ret
   12a54:	a8c00217 	ldw	r3,8(r21)
   12a58:	8c63883a 	add	r17,r17,r17
   12a5c:	8c63883a 	add	r17,r17,r17
   12a60:	1c45c83a 	sub	r2,r3,r17
   12a64:	a8800215 	stw	r2,8(r21)
   12a68:	b5800204 	addi	r22,r22,8
   12a6c:	bdc00204 	addi	r23,r23,8
   12a70:	103fdb1e 	bne	r2,zero,129e0 <__alt_mem_descriptor_memory+0xdefd29e0>
   12a74:	0005883a 	mov	r2,zero
   12a78:	003fe806 	br	12a1c <__alt_mem_descriptor_memory+0xdefd2a1c>
   12a7c:	000f4800 	call	f480 <__sfvwrite_r>
   12a80:	003fe606 	br	12a1c <__alt_mem_descriptor_memory+0xdefd2a1c>

00012a84 <__sprint_r>:
   12a84:	30c00217 	ldw	r3,8(r6)
   12a88:	18000126 	beq	r3,zero,12a90 <__sprint_r+0xc>
   12a8c:	00129881 	jmpi	12988 <__sprint_r.part.0>
   12a90:	30000115 	stw	zero,4(r6)
   12a94:	0005883a 	mov	r2,zero
   12a98:	f800283a 	ret

00012a9c <___vfiprintf_internal_r>:
   12a9c:	defeca04 	addi	sp,sp,-1240
   12aa0:	dd813215 	stw	r22,1224(sp)
   12aa4:	dd013015 	stw	r20,1216(sp)
   12aa8:	dfc13515 	stw	ra,1236(sp)
   12aac:	df013415 	stw	fp,1232(sp)
   12ab0:	ddc13315 	stw	r23,1228(sp)
   12ab4:	dd413115 	stw	r21,1220(sp)
   12ab8:	dcc12f15 	stw	r19,1212(sp)
   12abc:	dc812e15 	stw	r18,1208(sp)
   12ac0:	dc412d15 	stw	r17,1204(sp)
   12ac4:	dc012c15 	stw	r16,1200(sp)
   12ac8:	d9012015 	stw	r4,1152(sp)
   12acc:	d9c12115 	stw	r7,1156(sp)
   12ad0:	2829883a 	mov	r20,r5
   12ad4:	302d883a 	mov	r22,r6
   12ad8:	20000226 	beq	r4,zero,12ae4 <___vfiprintf_internal_r+0x48>
   12adc:	20800e17 	ldw	r2,56(r4)
   12ae0:	1001d326 	beq	r2,zero,13230 <___vfiprintf_internal_r+0x794>
   12ae4:	a0c0030b 	ldhu	r3,12(r20)
   12ae8:	1908000c 	andi	r4,r3,8192
   12aec:	1805883a 	mov	r2,r3
   12af0:	2000071e 	bne	r4,zero,12b10 <___vfiprintf_internal_r+0x74>
   12af4:	a1001917 	ldw	r4,100(r20)
   12af8:	18880014 	ori	r2,r3,8192
   12afc:	00f7ffc4 	movi	r3,-8193
   12b00:	20c8703a 	and	r4,r4,r3
   12b04:	a080030d 	sth	r2,12(r20)
   12b08:	1007883a 	mov	r3,r2
   12b0c:	a1001915 	stw	r4,100(r20)
   12b10:	1100020c 	andi	r4,r2,8
   12b14:	20018926 	beq	r4,zero,1313c <___vfiprintf_internal_r+0x6a0>
   12b18:	a1000417 	ldw	r4,16(r20)
   12b1c:	20018726 	beq	r4,zero,1313c <___vfiprintf_internal_r+0x6a0>
   12b20:	1080068c 	andi	r2,r2,26
   12b24:	01000284 	movi	r4,10
   12b28:	11018d26 	beq	r2,r4,13160 <___vfiprintf_internal_r+0x6c4>
   12b2c:	da810a04 	addi	r10,sp,1064
   12b30:	dac109c4 	addi	r11,sp,1063
   12b34:	07000174 	movhi	fp,5
   12b38:	05c00174 	movhi	r23,5
   12b3c:	da811e15 	stw	r10,1144(sp)
   12b40:	52d5c83a 	sub	r10,r10,r11
   12b44:	e7361104 	addi	fp,fp,-10172
   12b48:	bdf60d04 	addi	r23,r23,-10188
   12b4c:	dac11f15 	stw	r11,1148(sp)
   12b50:	dec11a15 	stw	sp,1128(sp)
   12b54:	d8011c15 	stw	zero,1136(sp)
   12b58:	d8011b15 	stw	zero,1132(sp)
   12b5c:	d8012615 	stw	zero,1176(sp)
   12b60:	d8012215 	stw	zero,1160(sp)
   12b64:	da812715 	stw	r10,1180(sp)
   12b68:	d811883a 	mov	r8,sp
   12b6c:	b021883a 	mov	r16,r22
   12b70:	80800007 	ldb	r2,0(r16)
   12b74:	10039c26 	beq	r2,zero,139e8 <___vfiprintf_internal_r+0xf4c>
   12b78:	01000944 	movi	r4,37
   12b7c:	11039a26 	beq	r2,r4,139e8 <___vfiprintf_internal_r+0xf4c>
   12b80:	8005883a 	mov	r2,r16
   12b84:	00000106 	br	12b8c <___vfiprintf_internal_r+0xf0>
   12b88:	19000326 	beq	r3,r4,12b98 <___vfiprintf_internal_r+0xfc>
   12b8c:	10800044 	addi	r2,r2,1
   12b90:	10c00007 	ldb	r3,0(r2)
   12b94:	183ffc1e 	bne	r3,zero,12b88 <__alt_mem_descriptor_memory+0xdefd2b88>
   12b98:	1425c83a 	sub	r18,r2,r16
   12b9c:	1023883a 	mov	r17,r2
   12ba0:	90001026 	beq	r18,zero,12be4 <___vfiprintf_internal_r+0x148>
   12ba4:	d8c11c17 	ldw	r3,1136(sp)
   12ba8:	d8811b17 	ldw	r2,1132(sp)
   12bac:	44000015 	stw	r16,0(r8)
   12bb0:	90c7883a 	add	r3,r18,r3
   12bb4:	10800044 	addi	r2,r2,1
   12bb8:	44800115 	stw	r18,4(r8)
   12bbc:	d8c11c15 	stw	r3,1136(sp)
   12bc0:	d8811b15 	stw	r2,1132(sp)
   12bc4:	010001c4 	movi	r4,7
   12bc8:	2080750e 	bge	r4,r2,12da0 <___vfiprintf_internal_r+0x304>
   12bcc:	18039d1e 	bne	r3,zero,13a44 <___vfiprintf_internal_r+0xfa8>
   12bd0:	dac12217 	ldw	r11,1160(sp)
   12bd4:	d8011b15 	stw	zero,1132(sp)
   12bd8:	d811883a 	mov	r8,sp
   12bdc:	5c97883a 	add	r11,r11,r18
   12be0:	dac12215 	stw	r11,1160(sp)
   12be4:	88800007 	ldb	r2,0(r17)
   12be8:	1002e026 	beq	r2,zero,1376c <___vfiprintf_internal_r+0xcd0>
   12bec:	88c00047 	ldb	r3,1(r17)
   12bf0:	8c000044 	addi	r16,r17,1
   12bf4:	d8011d85 	stb	zero,1142(sp)
   12bf8:	000d883a 	mov	r6,zero
   12bfc:	027fffc4 	movi	r9,-1
   12c00:	0027883a 	mov	r19,zero
   12c04:	002b883a 	mov	r21,zero
   12c08:	01001604 	movi	r4,88
   12c0c:	01400244 	movi	r5,9
   12c10:	03000a84 	movi	r12,42
   12c14:	01c01b04 	movi	r7,108
   12c18:	84000044 	addi	r16,r16,1
   12c1c:	18bff804 	addi	r2,r3,-32
   12c20:	20825f36 	bltu	r4,r2,135a0 <___vfiprintf_internal_r+0xb04>
   12c24:	100490ba 	slli	r2,r2,2
   12c28:	02800074 	movhi	r10,1
   12c2c:	528b0f04 	addi	r10,r10,11324
   12c30:	1285883a 	add	r2,r2,r10
   12c34:	10800017 	ldw	r2,0(r2)
   12c38:	1000683a 	jmp	r2
   12c3c:	00013410 	cmplti	zero,zero,1232
   12c40:	000135a0 	cmpeqi	zero,zero,1238
   12c44:	000135a0 	cmpeqi	zero,zero,1238
   12c48:	00013594 	movui	zero,1238
   12c4c:	000135a0 	cmpeqi	zero,zero,1238
   12c50:	000135a0 	cmpeqi	zero,zero,1238
   12c54:	000135a0 	cmpeqi	zero,zero,1238
   12c58:	000135a0 	cmpeqi	zero,zero,1238
   12c5c:	000135a0 	cmpeqi	zero,zero,1238
   12c60:	000135a0 	cmpeqi	zero,zero,1238
   12c64:	0001356c 	andhi	zero,zero,1237
   12c68:	00013588 	cmpgei	zero,zero,1238
   12c6c:	000135a0 	cmpeqi	zero,zero,1238
   12c70:	00013240 	call	1324 <alt_tse_phy_add_profile+0x64>
   12c74:	000133a0 	cmpeqi	zero,zero,1230
   12c78:	000135a0 	cmpeqi	zero,zero,1238
   12c7c:	00013324 	muli	zero,zero,1228
   12c80:	00013330 	cmpltui	zero,zero,1228
   12c84:	00013330 	cmpltui	zero,zero,1228
   12c88:	00013330 	cmpltui	zero,zero,1228
   12c8c:	00013330 	cmpltui	zero,zero,1228
   12c90:	00013330 	cmpltui	zero,zero,1228
   12c94:	00013330 	cmpltui	zero,zero,1228
   12c98:	00013330 	cmpltui	zero,zero,1228
   12c9c:	00013330 	cmpltui	zero,zero,1228
   12ca0:	00013330 	cmpltui	zero,zero,1228
   12ca4:	000135a0 	cmpeqi	zero,zero,1238
   12ca8:	000135a0 	cmpeqi	zero,zero,1238
   12cac:	000135a0 	cmpeqi	zero,zero,1238
   12cb0:	000135a0 	cmpeqi	zero,zero,1238
   12cb4:	000135a0 	cmpeqi	zero,zero,1238
   12cb8:	000135a0 	cmpeqi	zero,zero,1238
   12cbc:	000135a0 	cmpeqi	zero,zero,1238
   12cc0:	000135a0 	cmpeqi	zero,zero,1238
   12cc4:	000135a0 	cmpeqi	zero,zero,1238
   12cc8:	000135a0 	cmpeqi	zero,zero,1238
   12ccc:	0001335c 	xori	zero,zero,1229
   12cd0:	000135a0 	cmpeqi	zero,zero,1238
   12cd4:	000135a0 	cmpeqi	zero,zero,1238
   12cd8:	000135a0 	cmpeqi	zero,zero,1238
   12cdc:	000135a0 	cmpeqi	zero,zero,1238
   12ce0:	000135a0 	cmpeqi	zero,zero,1238
   12ce4:	000135a0 	cmpeqi	zero,zero,1238
   12ce8:	000135a0 	cmpeqi	zero,zero,1238
   12cec:	000135a0 	cmpeqi	zero,zero,1238
   12cf0:	000135a0 	cmpeqi	zero,zero,1238
   12cf4:	000135a0 	cmpeqi	zero,zero,1238
   12cf8:	00012df0 	cmpltui	zero,zero,1207
   12cfc:	000135a0 	cmpeqi	zero,zero,1238
   12d00:	000135a0 	cmpeqi	zero,zero,1238
   12d04:	000135a0 	cmpeqi	zero,zero,1238
   12d08:	000135a0 	cmpeqi	zero,zero,1238
   12d0c:	000135a0 	cmpeqi	zero,zero,1238
   12d10:	00012db4 	movhi	zero,1206
   12d14:	000135a0 	cmpeqi	zero,zero,1238
   12d18:	000135a0 	cmpeqi	zero,zero,1238
   12d1c:	0001329c 	xori	zero,zero,1226
   12d20:	000135a0 	cmpeqi	zero,zero,1238
   12d24:	000135a0 	cmpeqi	zero,zero,1238
   12d28:	000135a0 	cmpeqi	zero,zero,1238
   12d2c:	000135a0 	cmpeqi	zero,zero,1238
   12d30:	000135a0 	cmpeqi	zero,zero,1238
   12d34:	000135a0 	cmpeqi	zero,zero,1238
   12d38:	000135a0 	cmpeqi	zero,zero,1238
   12d3c:	000135a0 	cmpeqi	zero,zero,1238
   12d40:	000135a0 	cmpeqi	zero,zero,1238
   12d44:	000135a0 	cmpeqi	zero,zero,1238
   12d48:	000132f4 	movhi	zero,1227
   12d4c:	0001348c 	andi	zero,zero,1234
   12d50:	000135a0 	cmpeqi	zero,zero,1238
   12d54:	000135a0 	cmpeqi	zero,zero,1238
   12d58:	000135a0 	cmpeqi	zero,zero,1238
   12d5c:	00013514 	movui	zero,1236
   12d60:	0001348c 	andi	zero,zero,1234
   12d64:	000135a0 	cmpeqi	zero,zero,1238
   12d68:	000135a0 	cmpeqi	zero,zero,1238
   12d6c:	00013520 	cmpeqi	zero,zero,1236
   12d70:	000135a0 	cmpeqi	zero,zero,1238
   12d74:	000133e0 	cmpeqi	zero,zero,1231
   12d78:	00012df4 	movhi	zero,1207
   12d7c:	000134c8 	cmpgei	zero,zero,1235
   12d80:	00013508 	cmpgei	zero,zero,1236
   12d84:	000135a0 	cmpeqi	zero,zero,1238
   12d88:	0001342c 	andhi	zero,zero,1232
   12d8c:	000135a0 	cmpeqi	zero,zero,1238
   12d90:	00012db8 	rdprs	zero,zero,1206
   12d94:	000135a0 	cmpeqi	zero,zero,1238
   12d98:	000135a0 	cmpeqi	zero,zero,1238
   12d9c:	00013530 	cmpltui	zero,zero,1236
   12da0:	42000204 	addi	r8,r8,8
   12da4:	dac12217 	ldw	r11,1160(sp)
   12da8:	5c97883a 	add	r11,r11,r18
   12dac:	dac12215 	stw	r11,1160(sp)
   12db0:	003f8c06 	br	12be4 <__alt_mem_descriptor_memory+0xdefd2be4>
   12db4:	ad400414 	ori	r21,r21,16
   12db8:	a880080c 	andi	r2,r21,32
   12dbc:	10012f1e 	bne	r2,zero,1327c <___vfiprintf_internal_r+0x7e0>
   12dc0:	a880040c 	andi	r2,r21,16
   12dc4:	1001ff1e 	bne	r2,zero,135c4 <___vfiprintf_internal_r+0xb28>
   12dc8:	a880100c 	andi	r2,r21,64
   12dcc:	1001fd26 	beq	r2,zero,135c4 <___vfiprintf_internal_r+0xb28>
   12dd0:	da812117 	ldw	r10,1156(sp)
   12dd4:	002d883a 	mov	r22,zero
   12dd8:	00800044 	movi	r2,1
   12ddc:	5480000b 	ldhu	r18,0(r10)
   12de0:	52800104 	addi	r10,r10,4
   12de4:	da812115 	stw	r10,1156(sp)
   12de8:	9009883a 	mov	r4,r18
   12dec:	00000a06 	br	12e18 <___vfiprintf_internal_r+0x37c>
   12df0:	ad400414 	ori	r21,r21,16
   12df4:	a880080c 	andi	r2,r21,32
   12df8:	10011426 	beq	r2,zero,1324c <___vfiprintf_internal_r+0x7b0>
   12dfc:	da812117 	ldw	r10,1156(sp)
   12e00:	0005883a 	mov	r2,zero
   12e04:	54800017 	ldw	r18,0(r10)
   12e08:	55800117 	ldw	r22,4(r10)
   12e0c:	52800204 	addi	r10,r10,8
   12e10:	da812115 	stw	r10,1156(sp)
   12e14:	9588b03a 	or	r4,r18,r22
   12e18:	d8011d85 	stb	zero,1142(sp)
   12e1c:	4823883a 	mov	r17,r9
   12e20:	0019883a 	mov	r12,zero
   12e24:	48000216 	blt	r9,zero,12e30 <___vfiprintf_internal_r+0x394>
   12e28:	00ffdfc4 	movi	r3,-129
   12e2c:	a8ea703a 	and	r21,r21,r3
   12e30:	2002221e 	bne	r4,zero,136bc <___vfiprintf_internal_r+0xc20>
   12e34:	4802c726 	beq	r9,zero,13954 <___vfiprintf_internal_r+0xeb8>
   12e38:	10803fcc 	andi	r2,r2,255
   12e3c:	00c00044 	movi	r3,1
   12e40:	10c24426 	beq	r2,r3,13754 <___vfiprintf_internal_r+0xcb8>
   12e44:	00c00084 	movi	r3,2
   12e48:	10c2cc26 	beq	r2,r3,1397c <___vfiprintf_internal_r+0xee0>
   12e4c:	d8c10a04 	addi	r3,sp,1064
   12e50:	9008d0fa 	srli	r4,r18,3
   12e54:	b00a977a 	slli	r5,r22,29
   12e58:	b02cd0fa 	srli	r22,r22,3
   12e5c:	948001cc 	andi	r18,r18,7
   12e60:	90800c04 	addi	r2,r18,48
   12e64:	18ffffc4 	addi	r3,r3,-1
   12e68:	2924b03a 	or	r18,r5,r4
   12e6c:	18800005 	stb	r2,0(r3)
   12e70:	9588b03a 	or	r4,r18,r22
   12e74:	203ff61e 	bne	r4,zero,12e50 <__alt_mem_descriptor_memory+0xdefd2e50>
   12e78:	a900004c 	andi	r4,r21,1
   12e7c:	d8c12415 	stw	r3,1168(sp)
   12e80:	2002fb1e 	bne	r4,zero,13a70 <___vfiprintf_internal_r+0xfd4>
   12e84:	da811e17 	ldw	r10,1144(sp)
   12e88:	50e3c83a 	sub	r17,r10,r3
   12e8c:	8825883a 	mov	r18,r17
   12e90:	8a40010e 	bge	r17,r9,12e98 <___vfiprintf_internal_r+0x3fc>
   12e94:	4825883a 	mov	r18,r9
   12e98:	63003fcc 	andi	r12,r12,255
   12e9c:	6300201c 	xori	r12,r12,128
   12ea0:	633fe004 	addi	r12,r12,-128
   12ea4:	60000126 	beq	r12,zero,12eac <___vfiprintf_internal_r+0x410>
   12ea8:	94800044 	addi	r18,r18,1
   12eac:	ab80008c 	andi	r14,r21,2
   12eb0:	70000126 	beq	r14,zero,12eb8 <___vfiprintf_internal_r+0x41c>
   12eb4:	94800084 	addi	r18,r18,2
   12eb8:	ad80210c 	andi	r22,r21,132
   12ebc:	b001df1e 	bne	r22,zero,1363c <___vfiprintf_internal_r+0xba0>
   12ec0:	9c8fc83a 	sub	r7,r19,r18
   12ec4:	01c1dd0e 	bge	zero,r7,1363c <___vfiprintf_internal_r+0xba0>
   12ec8:	03000404 	movi	r12,16
   12ecc:	d8811c17 	ldw	r2,1136(sp)
   12ed0:	61c3920e 	bge	r12,r7,13d1c <___vfiprintf_internal_r+0x1280>
   12ed4:	02800174 	movhi	r10,5
   12ed8:	52b61104 	addi	r10,r10,-10172
   12edc:	dc012915 	stw	r16,1188(sp)
   12ee0:	d9811b17 	ldw	r6,1132(sp)
   12ee4:	da812315 	stw	r10,1164(sp)
   12ee8:	00c001c4 	movi	r3,7
   12eec:	da412515 	stw	r9,1172(sp)
   12ef0:	db812815 	stw	r14,1184(sp)
   12ef4:	3821883a 	mov	r16,r7
   12ef8:	00000506 	br	12f10 <___vfiprintf_internal_r+0x474>
   12efc:	31400084 	addi	r5,r6,2
   12f00:	42000204 	addi	r8,r8,8
   12f04:	200d883a 	mov	r6,r4
   12f08:	843ffc04 	addi	r16,r16,-16
   12f0c:	64000d0e 	bge	r12,r16,12f44 <___vfiprintf_internal_r+0x4a8>
   12f10:	10800404 	addi	r2,r2,16
   12f14:	31000044 	addi	r4,r6,1
   12f18:	47000015 	stw	fp,0(r8)
   12f1c:	43000115 	stw	r12,4(r8)
   12f20:	d8811c15 	stw	r2,1136(sp)
   12f24:	d9011b15 	stw	r4,1132(sp)
   12f28:	193ff40e 	bge	r3,r4,12efc <__alt_mem_descriptor_memory+0xdefd2efc>
   12f2c:	1001b51e 	bne	r2,zero,13604 <___vfiprintf_internal_r+0xb68>
   12f30:	843ffc04 	addi	r16,r16,-16
   12f34:	000d883a 	mov	r6,zero
   12f38:	01400044 	movi	r5,1
   12f3c:	d811883a 	mov	r8,sp
   12f40:	643ff316 	blt	r12,r16,12f10 <__alt_mem_descriptor_memory+0xdefd2f10>
   12f44:	800f883a 	mov	r7,r16
   12f48:	da412517 	ldw	r9,1172(sp)
   12f4c:	db812817 	ldw	r14,1184(sp)
   12f50:	dc012917 	ldw	r16,1188(sp)
   12f54:	dac12317 	ldw	r11,1164(sp)
   12f58:	3887883a 	add	r3,r7,r2
   12f5c:	41c00115 	stw	r7,4(r8)
   12f60:	42c00015 	stw	r11,0(r8)
   12f64:	d8c11c15 	stw	r3,1136(sp)
   12f68:	d9411b15 	stw	r5,1132(sp)
   12f6c:	008001c4 	movi	r2,7
   12f70:	11429316 	blt	r2,r5,139c0 <___vfiprintf_internal_r+0xf24>
   12f74:	d9011d87 	ldb	r4,1142(sp)
   12f78:	42000204 	addi	r8,r8,8
   12f7c:	28800044 	addi	r2,r5,1
   12f80:	2001b31e 	bne	r4,zero,13650 <___vfiprintf_internal_r+0xbb4>
   12f84:	70000c26 	beq	r14,zero,12fb8 <___vfiprintf_internal_r+0x51c>
   12f88:	d9011d04 	addi	r4,sp,1140
   12f8c:	18c00084 	addi	r3,r3,2
   12f90:	41000015 	stw	r4,0(r8)
   12f94:	01000084 	movi	r4,2
   12f98:	41000115 	stw	r4,4(r8)
   12f9c:	d8c11c15 	stw	r3,1136(sp)
   12fa0:	d8811b15 	stw	r2,1132(sp)
   12fa4:	010001c4 	movi	r4,7
   12fa8:	20826516 	blt	r4,r2,13940 <___vfiprintf_internal_r+0xea4>
   12fac:	100b883a 	mov	r5,r2
   12fb0:	42000204 	addi	r8,r8,8
   12fb4:	10800044 	addi	r2,r2,1
   12fb8:	01002004 	movi	r4,128
   12fbc:	b1021a26 	beq	r22,r4,13828 <___vfiprintf_internal_r+0xd8c>
   12fc0:	4c6dc83a 	sub	r22,r9,r17
   12fc4:	0580230e 	bge	zero,r22,13054 <___vfiprintf_internal_r+0x5b8>
   12fc8:	01c00404 	movi	r7,16
   12fcc:	3d83300e 	bge	r7,r22,13c90 <___vfiprintf_internal_r+0x11f4>
   12fd0:	00800174 	movhi	r2,5
   12fd4:	10b60d04 	addi	r2,r2,-10188
   12fd8:	d8812315 	stw	r2,1164(sp)
   12fdc:	030001c4 	movi	r12,7
   12fe0:	00000506 	br	12ff8 <___vfiprintf_internal_r+0x55c>
   12fe4:	28800084 	addi	r2,r5,2
   12fe8:	42000204 	addi	r8,r8,8
   12fec:	200b883a 	mov	r5,r4
   12ff0:	b5bffc04 	addi	r22,r22,-16
   12ff4:	3d800d0e 	bge	r7,r22,1302c <___vfiprintf_internal_r+0x590>
   12ff8:	18c00404 	addi	r3,r3,16
   12ffc:	29000044 	addi	r4,r5,1
   13000:	45c00015 	stw	r23,0(r8)
   13004:	41c00115 	stw	r7,4(r8)
   13008:	d8c11c15 	stw	r3,1136(sp)
   1300c:	d9011b15 	stw	r4,1132(sp)
   13010:	613ff40e 	bge	r12,r4,12fe4 <__alt_mem_descriptor_memory+0xdefd2fe4>
   13014:	18019b1e 	bne	r3,zero,13684 <___vfiprintf_internal_r+0xbe8>
   13018:	b5bffc04 	addi	r22,r22,-16
   1301c:	000b883a 	mov	r5,zero
   13020:	00800044 	movi	r2,1
   13024:	d811883a 	mov	r8,sp
   13028:	3dbff316 	blt	r7,r22,12ff8 <__alt_mem_descriptor_memory+0xdefd2ff8>
   1302c:	da812317 	ldw	r10,1164(sp)
   13030:	1d87883a 	add	r3,r3,r22
   13034:	45800115 	stw	r22,4(r8)
   13038:	42800015 	stw	r10,0(r8)
   1303c:	d8c11c15 	stw	r3,1136(sp)
   13040:	d8811b15 	stw	r2,1132(sp)
   13044:	010001c4 	movi	r4,7
   13048:	2081dd16 	blt	r4,r2,137c0 <___vfiprintf_internal_r+0xd24>
   1304c:	42000204 	addi	r8,r8,8
   13050:	10800044 	addi	r2,r2,1
   13054:	da812417 	ldw	r10,1168(sp)
   13058:	1c47883a 	add	r3,r3,r17
   1305c:	44400115 	stw	r17,4(r8)
   13060:	42800015 	stw	r10,0(r8)
   13064:	d8c11c15 	stw	r3,1136(sp)
   13068:	d8811b15 	stw	r2,1132(sp)
   1306c:	010001c4 	movi	r4,7
   13070:	2081dc0e 	bge	r4,r2,137e4 <___vfiprintf_internal_r+0xd48>
   13074:	1802611e 	bne	r3,zero,139fc <___vfiprintf_internal_r+0xf60>
   13078:	d8011b15 	stw	zero,1132(sp)
   1307c:	aac0010c 	andi	r11,r21,4
   13080:	58002726 	beq	r11,zero,13120 <___vfiprintf_internal_r+0x684>
   13084:	9ca3c83a 	sub	r17,r19,r18
   13088:	d811883a 	mov	r8,sp
   1308c:	0443510e 	bge	zero,r17,13dd4 <___vfiprintf_internal_r+0x1338>
   13090:	01c00404 	movi	r7,16
   13094:	3c43320e 	bge	r7,r17,13d60 <___vfiprintf_internal_r+0x12c4>
   13098:	00800174 	movhi	r2,5
   1309c:	10b61104 	addi	r2,r2,-10172
   130a0:	d9011b17 	ldw	r4,1132(sp)
   130a4:	d8812315 	stw	r2,1164(sp)
   130a8:	382d883a 	mov	r22,r7
   130ac:	054001c4 	movi	r21,7
   130b0:	00000506 	br	130c8 <___vfiprintf_internal_r+0x62c>
   130b4:	21400084 	addi	r5,r4,2
   130b8:	42000204 	addi	r8,r8,8
   130bc:	1009883a 	mov	r4,r2
   130c0:	8c7ffc04 	addi	r17,r17,-16
   130c4:	b4400d0e 	bge	r22,r17,130fc <___vfiprintf_internal_r+0x660>
   130c8:	18c00404 	addi	r3,r3,16
   130cc:	20800044 	addi	r2,r4,1
   130d0:	47000015 	stw	fp,0(r8)
   130d4:	45800115 	stw	r22,4(r8)
   130d8:	d8c11c15 	stw	r3,1136(sp)
   130dc:	d8811b15 	stw	r2,1132(sp)
   130e0:	a8bff40e 	bge	r21,r2,130b4 <__alt_mem_descriptor_memory+0xdefd30b4>
   130e4:	1801ac1e 	bne	r3,zero,13798 <___vfiprintf_internal_r+0xcfc>
   130e8:	8c7ffc04 	addi	r17,r17,-16
   130ec:	0009883a 	mov	r4,zero
   130f0:	01400044 	movi	r5,1
   130f4:	d811883a 	mov	r8,sp
   130f8:	b47ff316 	blt	r22,r17,130c8 <__alt_mem_descriptor_memory+0xdefd30c8>
   130fc:	da812317 	ldw	r10,1164(sp)
   13100:	1c47883a 	add	r3,r3,r17
   13104:	44400115 	stw	r17,4(r8)
   13108:	42800015 	stw	r10,0(r8)
   1310c:	d8c11c15 	stw	r3,1136(sp)
   13110:	d9411b15 	stw	r5,1132(sp)
   13114:	008001c4 	movi	r2,7
   13118:	1141b70e 	bge	r2,r5,137f8 <___vfiprintf_internal_r+0xd5c>
   1311c:	1802cf1e 	bne	r3,zero,13c5c <___vfiprintf_internal_r+0x11c0>
   13120:	94c2ca16 	blt	r18,r19,13c4c <___vfiprintf_internal_r+0x11b0>
   13124:	dac12217 	ldw	r11,1160(sp)
   13128:	5c97883a 	add	r11,r11,r18
   1312c:	dac12215 	stw	r11,1160(sp)
   13130:	d8011b15 	stw	zero,1132(sp)
   13134:	d811883a 	mov	r8,sp
   13138:	003e8d06 	br	12b70 <__alt_mem_descriptor_memory+0xdefd2b70>
   1313c:	d9012017 	ldw	r4,1152(sp)
   13140:	a00b883a 	mov	r5,r20
   13144:	000cec80 	call	cec8 <__swsetup_r>
   13148:	10002c1e 	bne	r2,zero,131fc <___vfiprintf_internal_r+0x760>
   1314c:	a0c0030b 	ldhu	r3,12(r20)
   13150:	01000284 	movi	r4,10
   13154:	1805883a 	mov	r2,r3
   13158:	1080068c 	andi	r2,r2,26
   1315c:	113e731e 	bne	r2,r4,12b2c <__alt_mem_descriptor_memory+0xdefd2b2c>
   13160:	a080038b 	ldhu	r2,14(r20)
   13164:	113fffcc 	andi	r4,r2,65535
   13168:	2120001c 	xori	r4,r4,32768
   1316c:	21200004 	addi	r4,r4,-32768
   13170:	203e6e16 	blt	r4,zero,12b2c <__alt_mem_descriptor_memory+0xdefd2b2c>
   13174:	a3001917 	ldw	r12,100(r20)
   13178:	a2c00717 	ldw	r11,28(r20)
   1317c:	a2800917 	ldw	r10,36(r20)
   13180:	d9012017 	ldw	r4,1152(sp)
   13184:	d9c12117 	ldw	r7,1156(sp)
   13188:	02410004 	movi	r9,1024
   1318c:	18ffff4c 	andi	r3,r3,65533
   13190:	da4b883a 	add	r5,sp,r9
   13194:	b00d883a 	mov	r6,r22
   13198:	d8c1030d 	sth	r3,1036(sp)
   1319c:	db011915 	stw	r12,1124(sp)
   131a0:	d881038d 	sth	r2,1038(sp)
   131a4:	dac10715 	stw	r11,1052(sp)
   131a8:	da810915 	stw	r10,1060(sp)
   131ac:	dec10015 	stw	sp,1024(sp)
   131b0:	dec10415 	stw	sp,1040(sp)
   131b4:	da410215 	stw	r9,1032(sp)
   131b8:	da410515 	stw	r9,1044(sp)
   131bc:	d8010615 	stw	zero,1048(sp)
   131c0:	0012a9c0 	call	12a9c <___vfiprintf_internal_r>
   131c4:	1021883a 	mov	r16,r2
   131c8:	10000416 	blt	r2,zero,131dc <___vfiprintf_internal_r+0x740>
   131cc:	d9012017 	ldw	r4,1152(sp)
   131d0:	d9410004 	addi	r5,sp,1024
   131d4:	000e9200 	call	e920 <_fflush_r>
   131d8:	1002fc1e 	bne	r2,zero,13dcc <___vfiprintf_internal_r+0x1330>
   131dc:	d881030b 	ldhu	r2,1036(sp)
   131e0:	1080100c 	andi	r2,r2,64
   131e4:	10000326 	beq	r2,zero,131f4 <___vfiprintf_internal_r+0x758>
   131e8:	a080030b 	ldhu	r2,12(r20)
   131ec:	10801014 	ori	r2,r2,64
   131f0:	a080030d 	sth	r2,12(r20)
   131f4:	8005883a 	mov	r2,r16
   131f8:	00000106 	br	13200 <___vfiprintf_internal_r+0x764>
   131fc:	00bfffc4 	movi	r2,-1
   13200:	dfc13517 	ldw	ra,1236(sp)
   13204:	df013417 	ldw	fp,1232(sp)
   13208:	ddc13317 	ldw	r23,1228(sp)
   1320c:	dd813217 	ldw	r22,1224(sp)
   13210:	dd413117 	ldw	r21,1220(sp)
   13214:	dd013017 	ldw	r20,1216(sp)
   13218:	dcc12f17 	ldw	r19,1212(sp)
   1321c:	dc812e17 	ldw	r18,1208(sp)
   13220:	dc412d17 	ldw	r17,1204(sp)
   13224:	dc012c17 	ldw	r16,1200(sp)
   13228:	dec13604 	addi	sp,sp,1240
   1322c:	f800283a 	ret
   13230:	000eec80 	call	eec8 <__sinit>
   13234:	003e2b06 	br	12ae4 <__alt_mem_descriptor_memory+0xdefd2ae4>
   13238:	04e7c83a 	sub	r19,zero,r19
   1323c:	d8812115 	stw	r2,1156(sp)
   13240:	ad400114 	ori	r21,r21,4
   13244:	80c00007 	ldb	r3,0(r16)
   13248:	003e7306 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   1324c:	a880040c 	andi	r2,r21,16
   13250:	1000e41e 	bne	r2,zero,135e4 <___vfiprintf_internal_r+0xb48>
   13254:	a880100c 	andi	r2,r21,64
   13258:	1000e226 	beq	r2,zero,135e4 <___vfiprintf_internal_r+0xb48>
   1325c:	da812117 	ldw	r10,1156(sp)
   13260:	002d883a 	mov	r22,zero
   13264:	0005883a 	mov	r2,zero
   13268:	5480000b 	ldhu	r18,0(r10)
   1326c:	52800104 	addi	r10,r10,4
   13270:	da812115 	stw	r10,1156(sp)
   13274:	9009883a 	mov	r4,r18
   13278:	003ee706 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   1327c:	da812117 	ldw	r10,1156(sp)
   13280:	00800044 	movi	r2,1
   13284:	54800017 	ldw	r18,0(r10)
   13288:	55800117 	ldw	r22,4(r10)
   1328c:	52800204 	addi	r10,r10,8
   13290:	da812115 	stw	r10,1156(sp)
   13294:	9588b03a 	or	r4,r18,r22
   13298:	003edf06 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   1329c:	02c00174 	movhi	r11,5
   132a0:	5af59804 	addi	r11,r11,-10656
   132a4:	d9811d85 	stb	r6,1142(sp)
   132a8:	dac12615 	stw	r11,1176(sp)
   132ac:	a900080c 	andi	r4,r21,32
   132b0:	d8812117 	ldw	r2,1156(sp)
   132b4:	2000a526 	beq	r4,zero,1354c <___vfiprintf_internal_r+0xab0>
   132b8:	da812117 	ldw	r10,1156(sp)
   132bc:	14800017 	ldw	r18,0(r2)
   132c0:	15800117 	ldw	r22,4(r2)
   132c4:	52800204 	addi	r10,r10,8
   132c8:	da812115 	stw	r10,1156(sp)
   132cc:	a880004c 	andi	r2,r21,1
   132d0:	1001d926 	beq	r2,zero,13a38 <___vfiprintf_internal_r+0xf9c>
   132d4:	9588b03a 	or	r4,r18,r22
   132d8:	20024426 	beq	r4,zero,13bec <___vfiprintf_internal_r+0x1150>
   132dc:	00800c04 	movi	r2,48
   132e0:	d8811d05 	stb	r2,1140(sp)
   132e4:	d8c11d45 	stb	r3,1141(sp)
   132e8:	ad400094 	ori	r21,r21,2
   132ec:	00800084 	movi	r2,2
   132f0:	003ec906 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   132f4:	da812117 	ldw	r10,1156(sp)
   132f8:	04800044 	movi	r18,1
   132fc:	dac10004 	addi	r11,sp,1024
   13300:	50800017 	ldw	r2,0(r10)
   13304:	52800104 	addi	r10,r10,4
   13308:	d8011d85 	stb	zero,1142(sp)
   1330c:	d8810005 	stb	r2,1024(sp)
   13310:	da812115 	stw	r10,1156(sp)
   13314:	9023883a 	mov	r17,r18
   13318:	dac12415 	stw	r11,1168(sp)
   1331c:	0013883a 	mov	r9,zero
   13320:	003ee206 	br	12eac <__alt_mem_descriptor_memory+0xdefd2eac>
   13324:	ad402014 	ori	r21,r21,128
   13328:	80c00007 	ldb	r3,0(r16)
   1332c:	003e3a06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13330:	8015883a 	mov	r10,r16
   13334:	0027883a 	mov	r19,zero
   13338:	18bff404 	addi	r2,r3,-48
   1333c:	50c00007 	ldb	r3,0(r10)
   13340:	9cc002a4 	muli	r19,r19,10
   13344:	84000044 	addi	r16,r16,1
   13348:	8015883a 	mov	r10,r16
   1334c:	98a7883a 	add	r19,r19,r2
   13350:	18bff404 	addi	r2,r3,-48
   13354:	28bff92e 	bgeu	r5,r2,1333c <__alt_mem_descriptor_memory+0xdefd333c>
   13358:	003e3006 	br	12c1c <__alt_mem_descriptor_memory+0xdefd2c1c>
   1335c:	ad400414 	ori	r21,r21,16
   13360:	d9811d85 	stb	r6,1142(sp)
   13364:	a880080c 	andi	r2,r21,32
   13368:	d8c12117 	ldw	r3,1156(sp)
   1336c:	10004b26 	beq	r2,zero,1349c <___vfiprintf_internal_r+0xa00>
   13370:	da812117 	ldw	r10,1156(sp)
   13374:	18800117 	ldw	r2,4(r3)
   13378:	1c800017 	ldw	r18,0(r3)
   1337c:	52800204 	addi	r10,r10,8
   13380:	da812115 	stw	r10,1156(sp)
   13384:	102d883a 	mov	r22,r2
   13388:	1001f116 	blt	r2,zero,13b50 <___vfiprintf_internal_r+0x10b4>
   1338c:	db011d83 	ldbu	r12,1142(sp)
   13390:	4823883a 	mov	r17,r9
   13394:	00800044 	movi	r2,1
   13398:	9588b03a 	or	r4,r18,r22
   1339c:	003ea106 	br	12e24 <__alt_mem_descriptor_memory+0xdefd2e24>
   133a0:	80c00007 	ldb	r3,0(r16)
   133a4:	82800044 	addi	r10,r16,1
   133a8:	1b027f26 	beq	r3,r12,13da8 <___vfiprintf_internal_r+0x130c>
   133ac:	18bff404 	addi	r2,r3,-48
   133b0:	5021883a 	mov	r16,r10
   133b4:	0013883a 	mov	r9,zero
   133b8:	28be1836 	bltu	r5,r2,12c1c <__alt_mem_descriptor_memory+0xdefd2c1c>
   133bc:	80c00007 	ldb	r3,0(r16)
   133c0:	4a4002a4 	muli	r9,r9,10
   133c4:	84000044 	addi	r16,r16,1
   133c8:	1253883a 	add	r9,r2,r9
   133cc:	18bff404 	addi	r2,r3,-48
   133d0:	28bffa2e 	bgeu	r5,r2,133bc <__alt_mem_descriptor_memory+0xdefd33bc>
   133d4:	483e110e 	bge	r9,zero,12c1c <__alt_mem_descriptor_memory+0xdefd2c1c>
   133d8:	027fffc4 	movi	r9,-1
   133dc:	003e0f06 	br	12c1c <__alt_mem_descriptor_memory+0xdefd2c1c>
   133e0:	d9811d85 	stb	r6,1142(sp)
   133e4:	a880080c 	andi	r2,r21,32
   133e8:	1001ee26 	beq	r2,zero,13ba4 <___vfiprintf_internal_r+0x1108>
   133ec:	da812117 	ldw	r10,1156(sp)
   133f0:	dac12217 	ldw	r11,1160(sp)
   133f4:	50800017 	ldw	r2,0(r10)
   133f8:	5807d7fa 	srai	r3,r11,31
   133fc:	52800104 	addi	r10,r10,4
   13400:	da812115 	stw	r10,1156(sp)
   13404:	12c00015 	stw	r11,0(r2)
   13408:	10c00115 	stw	r3,4(r2)
   1340c:	003dd806 	br	12b70 <__alt_mem_descriptor_memory+0xdefd2b70>
   13410:	30803fcc 	andi	r2,r6,255
   13414:	1080201c 	xori	r2,r2,128
   13418:	10bfe004 	addi	r2,r2,-128
   1341c:	1001df1e 	bne	r2,zero,13b9c <___vfiprintf_internal_r+0x1100>
   13420:	01800804 	movi	r6,32
   13424:	80c00007 	ldb	r3,0(r16)
   13428:	003dfb06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   1342c:	da812117 	ldw	r10,1156(sp)
   13430:	dac12117 	ldw	r11,1156(sp)
   13434:	d8011d85 	stb	zero,1142(sp)
   13438:	52800017 	ldw	r10,0(r10)
   1343c:	5d800104 	addi	r22,r11,4
   13440:	da812415 	stw	r10,1168(sp)
   13444:	50023b26 	beq	r10,zero,13d34 <___vfiprintf_internal_r+0x1298>
   13448:	d9012417 	ldw	r4,1168(sp)
   1344c:	48021f16 	blt	r9,zero,13ccc <___vfiprintf_internal_r+0x1230>
   13450:	480d883a 	mov	r6,r9
   13454:	000b883a 	mov	r5,zero
   13458:	da012a15 	stw	r8,1192(sp)
   1345c:	da412b15 	stw	r9,1196(sp)
   13460:	000fd2c0 	call	fd2c <memchr>
   13464:	da012a17 	ldw	r8,1192(sp)
   13468:	da412b17 	ldw	r9,1196(sp)
   1346c:	10024726 	beq	r2,zero,13d8c <___vfiprintf_internal_r+0x12f0>
   13470:	d8c12417 	ldw	r3,1168(sp)
   13474:	10e3c83a 	sub	r17,r2,r3
   13478:	4c41f616 	blt	r9,r17,13c54 <___vfiprintf_internal_r+0x11b8>
   1347c:	db011d83 	ldbu	r12,1142(sp)
   13480:	dd812115 	stw	r22,1156(sp)
   13484:	0013883a 	mov	r9,zero
   13488:	003e8006 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   1348c:	d9811d85 	stb	r6,1142(sp)
   13490:	a880080c 	andi	r2,r21,32
   13494:	d8c12117 	ldw	r3,1156(sp)
   13498:	103fb51e 	bne	r2,zero,13370 <__alt_mem_descriptor_memory+0xdefd3370>
   1349c:	a880040c 	andi	r2,r21,16
   134a0:	10015e1e 	bne	r2,zero,13a1c <___vfiprintf_internal_r+0xf80>
   134a4:	a880100c 	andi	r2,r21,64
   134a8:	10015c26 	beq	r2,zero,13a1c <___vfiprintf_internal_r+0xf80>
   134ac:	1c80000f 	ldh	r18,0(r3)
   134b0:	da812117 	ldw	r10,1156(sp)
   134b4:	902dd7fa 	srai	r22,r18,31
   134b8:	52800104 	addi	r10,r10,4
   134bc:	da812115 	stw	r10,1156(sp)
   134c0:	b005883a 	mov	r2,r22
   134c4:	003fb006 	br	13388 <__alt_mem_descriptor_memory+0xdefd3388>
   134c8:	da812117 	ldw	r10,1156(sp)
   134cc:	00800c04 	movi	r2,48
   134d0:	02c00174 	movhi	r11,5
   134d4:	54800017 	ldw	r18,0(r10)
   134d8:	d8811d05 	stb	r2,1140(sp)
   134dc:	52800104 	addi	r10,r10,4
   134e0:	00801e04 	movi	r2,120
   134e4:	5af59d04 	addi	r11,r11,-10636
   134e8:	d8811d45 	stb	r2,1141(sp)
   134ec:	002d883a 	mov	r22,zero
   134f0:	ad400094 	ori	r21,r21,2
   134f4:	da812115 	stw	r10,1156(sp)
   134f8:	dac12615 	stw	r11,1176(sp)
   134fc:	00800084 	movi	r2,2
   13500:	9009883a 	mov	r4,r18
   13504:	003e4406 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   13508:	ad400814 	ori	r21,r21,32
   1350c:	80c00007 	ldb	r3,0(r16)
   13510:	003dc106 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13514:	ad401014 	ori	r21,r21,64
   13518:	80c00007 	ldb	r3,0(r16)
   1351c:	003dbe06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13520:	80c00007 	ldb	r3,0(r16)
   13524:	19c1de26 	beq	r3,r7,13ca0 <___vfiprintf_internal_r+0x1204>
   13528:	ad400414 	ori	r21,r21,16
   1352c:	003dba06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13530:	00800174 	movhi	r2,5
   13534:	10b59d04 	addi	r2,r2,-10636
   13538:	d8812615 	stw	r2,1176(sp)
   1353c:	d9811d85 	stb	r6,1142(sp)
   13540:	a900080c 	andi	r4,r21,32
   13544:	d8812117 	ldw	r2,1156(sp)
   13548:	203f5b1e 	bne	r4,zero,132b8 <__alt_mem_descriptor_memory+0xdefd32b8>
   1354c:	a900040c 	andi	r4,r21,16
   13550:	2001a826 	beq	r4,zero,13bf4 <___vfiprintf_internal_r+0x1158>
   13554:	dac12117 	ldw	r11,1156(sp)
   13558:	14800017 	ldw	r18,0(r2)
   1355c:	002d883a 	mov	r22,zero
   13560:	5ac00104 	addi	r11,r11,4
   13564:	dac12115 	stw	r11,1156(sp)
   13568:	003f5806 	br	132cc <__alt_mem_descriptor_memory+0xdefd32cc>
   1356c:	da812117 	ldw	r10,1156(sp)
   13570:	54c00017 	ldw	r19,0(r10)
   13574:	50800104 	addi	r2,r10,4
   13578:	983f2f16 	blt	r19,zero,13238 <__alt_mem_descriptor_memory+0xdefd3238>
   1357c:	d8812115 	stw	r2,1156(sp)
   13580:	80c00007 	ldb	r3,0(r16)
   13584:	003da406 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13588:	01800ac4 	movi	r6,43
   1358c:	80c00007 	ldb	r3,0(r16)
   13590:	003da106 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13594:	ad400054 	ori	r21,r21,1
   13598:	80c00007 	ldb	r3,0(r16)
   1359c:	003d9e06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   135a0:	d9811d85 	stb	r6,1142(sp)
   135a4:	18007126 	beq	r3,zero,1376c <___vfiprintf_internal_r+0xcd0>
   135a8:	04800044 	movi	r18,1
   135ac:	d8c10005 	stb	r3,1024(sp)
   135b0:	d8c10004 	addi	r3,sp,1024
   135b4:	d8011d85 	stb	zero,1142(sp)
   135b8:	9023883a 	mov	r17,r18
   135bc:	d8c12415 	stw	r3,1168(sp)
   135c0:	003f5606 	br	1331c <__alt_mem_descriptor_memory+0xdefd331c>
   135c4:	dac12117 	ldw	r11,1156(sp)
   135c8:	002d883a 	mov	r22,zero
   135cc:	00800044 	movi	r2,1
   135d0:	5c800017 	ldw	r18,0(r11)
   135d4:	5ac00104 	addi	r11,r11,4
   135d8:	dac12115 	stw	r11,1156(sp)
   135dc:	9009883a 	mov	r4,r18
   135e0:	003e0d06 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   135e4:	dac12117 	ldw	r11,1156(sp)
   135e8:	002d883a 	mov	r22,zero
   135ec:	0005883a 	mov	r2,zero
   135f0:	5c800017 	ldw	r18,0(r11)
   135f4:	5ac00104 	addi	r11,r11,4
   135f8:	dac12115 	stw	r11,1156(sp)
   135fc:	9009883a 	mov	r4,r18
   13600:	003e0506 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   13604:	d9012017 	ldw	r4,1152(sp)
   13608:	a00b883a 	mov	r5,r20
   1360c:	d9811a04 	addi	r6,sp,1128
   13610:	d8c12a15 	stw	r3,1192(sp)
   13614:	db012b15 	stw	r12,1196(sp)
   13618:	00129880 	call	12988 <__sprint_r.part.0>
   1361c:	d8c12a17 	ldw	r3,1192(sp)
   13620:	db012b17 	ldw	r12,1196(sp)
   13624:	1000571e 	bne	r2,zero,13784 <___vfiprintf_internal_r+0xce8>
   13628:	d9811b17 	ldw	r6,1132(sp)
   1362c:	d8811c17 	ldw	r2,1136(sp)
   13630:	d811883a 	mov	r8,sp
   13634:	31400044 	addi	r5,r6,1
   13638:	003e3306 	br	12f08 <__alt_mem_descriptor_memory+0xdefd2f08>
   1363c:	d9411b17 	ldw	r5,1132(sp)
   13640:	d8c11c17 	ldw	r3,1136(sp)
   13644:	28800044 	addi	r2,r5,1
   13648:	d9011d87 	ldb	r4,1142(sp)
   1364c:	203e4d26 	beq	r4,zero,12f84 <__alt_mem_descriptor_memory+0xdefd2f84>
   13650:	01000044 	movi	r4,1
   13654:	d9411d84 	addi	r5,sp,1142
   13658:	1907883a 	add	r3,r3,r4
   1365c:	41400015 	stw	r5,0(r8)
   13660:	41000115 	stw	r4,4(r8)
   13664:	d8c11c15 	stw	r3,1136(sp)
   13668:	d8811b15 	stw	r2,1132(sp)
   1366c:	014001c4 	movi	r5,7
   13670:	2880aa16 	blt	r5,r2,1391c <___vfiprintf_internal_r+0xe80>
   13674:	100b883a 	mov	r5,r2
   13678:	42000204 	addi	r8,r8,8
   1367c:	10800044 	addi	r2,r2,1
   13680:	003e4006 	br	12f84 <__alt_mem_descriptor_memory+0xdefd2f84>
   13684:	d9012017 	ldw	r4,1152(sp)
   13688:	a00b883a 	mov	r5,r20
   1368c:	d9811a04 	addi	r6,sp,1128
   13690:	d9c12a15 	stw	r7,1192(sp)
   13694:	db012b15 	stw	r12,1196(sp)
   13698:	00129880 	call	12988 <__sprint_r.part.0>
   1369c:	d9c12a17 	ldw	r7,1192(sp)
   136a0:	db012b17 	ldw	r12,1196(sp)
   136a4:	1000371e 	bne	r2,zero,13784 <___vfiprintf_internal_r+0xce8>
   136a8:	d9411b17 	ldw	r5,1132(sp)
   136ac:	d8c11c17 	ldw	r3,1136(sp)
   136b0:	d811883a 	mov	r8,sp
   136b4:	28800044 	addi	r2,r5,1
   136b8:	003e4d06 	br	12ff0 <__alt_mem_descriptor_memory+0xdefd2ff0>
   136bc:	10803fcc 	andi	r2,r2,255
   136c0:	00c00044 	movi	r3,1
   136c4:	10fddf1e 	bne	r2,r3,12e44 <__alt_mem_descriptor_memory+0xdefd2e44>
   136c8:	b000021e 	bne	r22,zero,136d4 <___vfiprintf_internal_r+0xc38>
   136cc:	00800244 	movi	r2,9
   136d0:	1480202e 	bgeu	r2,r18,13754 <___vfiprintf_internal_r+0xcb8>
   136d4:	dc012515 	stw	r16,1172(sp)
   136d8:	dc410a04 	addi	r17,sp,1064
   136dc:	9021883a 	mov	r16,r18
   136e0:	da012415 	stw	r8,1168(sp)
   136e4:	b025883a 	mov	r18,r22
   136e8:	da412315 	stw	r9,1164(sp)
   136ec:	602d883a 	mov	r22,r12
   136f0:	8009883a 	mov	r4,r16
   136f4:	900b883a 	mov	r5,r18
   136f8:	01800284 	movi	r6,10
   136fc:	000f883a 	mov	r7,zero
   13700:	0014ba40 	call	14ba4 <__umoddi3>
   13704:	10800c04 	addi	r2,r2,48
   13708:	8c7fffc4 	addi	r17,r17,-1
   1370c:	8009883a 	mov	r4,r16
   13710:	900b883a 	mov	r5,r18
   13714:	01800284 	movi	r6,10
   13718:	000f883a 	mov	r7,zero
   1371c:	88800005 	stb	r2,0(r17)
   13720:	00145e40 	call	145e4 <__udivdi3>
   13724:	1021883a 	mov	r16,r2
   13728:	10c4b03a 	or	r2,r2,r3
   1372c:	1825883a 	mov	r18,r3
   13730:	103fef1e 	bne	r2,zero,136f0 <__alt_mem_descriptor_memory+0xdefd36f0>
   13734:	da811e17 	ldw	r10,1144(sp)
   13738:	da012417 	ldw	r8,1168(sp)
   1373c:	da412317 	ldw	r9,1164(sp)
   13740:	dc412415 	stw	r17,1168(sp)
   13744:	b019883a 	mov	r12,r22
   13748:	dc012517 	ldw	r16,1172(sp)
   1374c:	5463c83a 	sub	r17,r10,r17
   13750:	003dce06 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13754:	94800c04 	addi	r18,r18,48
   13758:	d8c109c4 	addi	r3,sp,1063
   1375c:	dc8109c5 	stb	r18,1063(sp)
   13760:	dc412717 	ldw	r17,1180(sp)
   13764:	d8c12415 	stw	r3,1168(sp)
   13768:	003dc806 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   1376c:	d8811c17 	ldw	r2,1136(sp)
   13770:	10000426 	beq	r2,zero,13784 <___vfiprintf_internal_r+0xce8>
   13774:	d9012017 	ldw	r4,1152(sp)
   13778:	a00b883a 	mov	r5,r20
   1377c:	d9811a04 	addi	r6,sp,1128
   13780:	00129880 	call	12988 <__sprint_r.part.0>
   13784:	a080030b 	ldhu	r2,12(r20)
   13788:	1080100c 	andi	r2,r2,64
   1378c:	103e9b1e 	bne	r2,zero,131fc <__alt_mem_descriptor_memory+0xdefd31fc>
   13790:	d8812217 	ldw	r2,1160(sp)
   13794:	003e9a06 	br	13200 <__alt_mem_descriptor_memory+0xdefd3200>
   13798:	d9012017 	ldw	r4,1152(sp)
   1379c:	a00b883a 	mov	r5,r20
   137a0:	d9811a04 	addi	r6,sp,1128
   137a4:	00129880 	call	12988 <__sprint_r.part.0>
   137a8:	103ff61e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   137ac:	d9011b17 	ldw	r4,1132(sp)
   137b0:	d8c11c17 	ldw	r3,1136(sp)
   137b4:	d811883a 	mov	r8,sp
   137b8:	21400044 	addi	r5,r4,1
   137bc:	003e4006 	br	130c0 <__alt_mem_descriptor_memory+0xdefd30c0>
   137c0:	1800d61e 	bne	r3,zero,13b1c <___vfiprintf_internal_r+0x1080>
   137c4:	dac12417 	ldw	r11,1168(sp)
   137c8:	00800044 	movi	r2,1
   137cc:	dc400115 	stw	r17,4(sp)
   137d0:	dac00015 	stw	r11,0(sp)
   137d4:	dc411c15 	stw	r17,1136(sp)
   137d8:	d8811b15 	stw	r2,1132(sp)
   137dc:	8807883a 	mov	r3,r17
   137e0:	d811883a 	mov	r8,sp
   137e4:	42000204 	addi	r8,r8,8
   137e8:	aac0010c 	andi	r11,r21,4
   137ec:	58000226 	beq	r11,zero,137f8 <___vfiprintf_internal_r+0xd5c>
   137f0:	9ca3c83a 	sub	r17,r19,r18
   137f4:	047e2616 	blt	zero,r17,13090 <__alt_mem_descriptor_memory+0xdefd3090>
   137f8:	94c0010e 	bge	r18,r19,13800 <___vfiprintf_internal_r+0xd64>
   137fc:	9825883a 	mov	r18,r19
   13800:	da812217 	ldw	r10,1160(sp)
   13804:	5495883a 	add	r10,r10,r18
   13808:	da812215 	stw	r10,1160(sp)
   1380c:	183e4826 	beq	r3,zero,13130 <__alt_mem_descriptor_memory+0xdefd3130>
   13810:	d9012017 	ldw	r4,1152(sp)
   13814:	a00b883a 	mov	r5,r20
   13818:	d9811a04 	addi	r6,sp,1128
   1381c:	00129880 	call	12988 <__sprint_r.part.0>
   13820:	103e4326 	beq	r2,zero,13130 <__alt_mem_descriptor_memory+0xdefd3130>
   13824:	003fd706 	br	13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13828:	9cadc83a 	sub	r22,r19,r18
   1382c:	05bde40e 	bge	zero,r22,12fc0 <__alt_mem_descriptor_memory+0xdefd2fc0>
   13830:	03000404 	movi	r12,16
   13834:	6581500e 	bge	r12,r22,13d78 <___vfiprintf_internal_r+0x12dc>
   13838:	00800174 	movhi	r2,5
   1383c:	10b60d04 	addi	r2,r2,-10188
   13840:	d8812315 	stw	r2,1164(sp)
   13844:	8005883a 	mov	r2,r16
   13848:	038001c4 	movi	r14,7
   1384c:	b021883a 	mov	r16,r22
   13850:	da412515 	stw	r9,1172(sp)
   13854:	102d883a 	mov	r22,r2
   13858:	00000506 	br	13870 <___vfiprintf_internal_r+0xdd4>
   1385c:	29000084 	addi	r4,r5,2
   13860:	42000204 	addi	r8,r8,8
   13864:	100b883a 	mov	r5,r2
   13868:	843ffc04 	addi	r16,r16,-16
   1386c:	64000d0e 	bge	r12,r16,138a4 <___vfiprintf_internal_r+0xe08>
   13870:	18c00404 	addi	r3,r3,16
   13874:	28800044 	addi	r2,r5,1
   13878:	45c00015 	stw	r23,0(r8)
   1387c:	43000115 	stw	r12,4(r8)
   13880:	d8c11c15 	stw	r3,1136(sp)
   13884:	d8811b15 	stw	r2,1132(sp)
   13888:	70bff40e 	bge	r14,r2,1385c <__alt_mem_descriptor_memory+0xdefd385c>
   1388c:	1800151e 	bne	r3,zero,138e4 <___vfiprintf_internal_r+0xe48>
   13890:	843ffc04 	addi	r16,r16,-16
   13894:	000b883a 	mov	r5,zero
   13898:	01000044 	movi	r4,1
   1389c:	d811883a 	mov	r8,sp
   138a0:	643ff316 	blt	r12,r16,13870 <__alt_mem_descriptor_memory+0xdefd3870>
   138a4:	da412517 	ldw	r9,1172(sp)
   138a8:	b005883a 	mov	r2,r22
   138ac:	802d883a 	mov	r22,r16
   138b0:	1021883a 	mov	r16,r2
   138b4:	da812317 	ldw	r10,1164(sp)
   138b8:	1d87883a 	add	r3,r3,r22
   138bc:	45800115 	stw	r22,4(r8)
   138c0:	42800015 	stw	r10,0(r8)
   138c4:	d8c11c15 	stw	r3,1136(sp)
   138c8:	d9011b15 	stw	r4,1132(sp)
   138cc:	008001c4 	movi	r2,7
   138d0:	11008d16 	blt	r2,r4,13b08 <___vfiprintf_internal_r+0x106c>
   138d4:	42000204 	addi	r8,r8,8
   138d8:	20800044 	addi	r2,r4,1
   138dc:	200b883a 	mov	r5,r4
   138e0:	003db706 	br	12fc0 <__alt_mem_descriptor_memory+0xdefd2fc0>
   138e4:	d9012017 	ldw	r4,1152(sp)
   138e8:	a00b883a 	mov	r5,r20
   138ec:	d9811a04 	addi	r6,sp,1128
   138f0:	db012b15 	stw	r12,1196(sp)
   138f4:	db812a15 	stw	r14,1192(sp)
   138f8:	00129880 	call	12988 <__sprint_r.part.0>
   138fc:	db012b17 	ldw	r12,1196(sp)
   13900:	db812a17 	ldw	r14,1192(sp)
   13904:	103f9f1e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13908:	d9411b17 	ldw	r5,1132(sp)
   1390c:	d8c11c17 	ldw	r3,1136(sp)
   13910:	d811883a 	mov	r8,sp
   13914:	29000044 	addi	r4,r5,1
   13918:	003fd306 	br	13868 <__alt_mem_descriptor_memory+0xdefd3868>
   1391c:	18006c1e 	bne	r3,zero,13ad0 <___vfiprintf_internal_r+0x1034>
   13920:	70004f26 	beq	r14,zero,13a60 <___vfiprintf_internal_r+0xfc4>
   13924:	d8811d04 	addi	r2,sp,1140
   13928:	00c00084 	movi	r3,2
   1392c:	d8800015 	stw	r2,0(sp)
   13930:	d8c00115 	stw	r3,4(sp)
   13934:	2005883a 	mov	r2,r4
   13938:	d811883a 	mov	r8,sp
   1393c:	003d9b06 	br	12fac <__alt_mem_descriptor_memory+0xdefd2fac>
   13940:	1800571e 	bne	r3,zero,13aa0 <___vfiprintf_internal_r+0x1004>
   13944:	000b883a 	mov	r5,zero
   13948:	00800044 	movi	r2,1
   1394c:	d811883a 	mov	r8,sp
   13950:	003d9906 	br	12fb8 <__alt_mem_descriptor_memory+0xdefd2fb8>
   13954:	10803fcc 	andi	r2,r2,255
   13958:	1000251e 	bne	r2,zero,139f0 <___vfiprintf_internal_r+0xf54>
   1395c:	a880004c 	andi	r2,r21,1
   13960:	10007826 	beq	r2,zero,13b44 <___vfiprintf_internal_r+0x10a8>
   13964:	00800c04 	movi	r2,48
   13968:	d8c109c4 	addi	r3,sp,1063
   1396c:	d88109c5 	stb	r2,1063(sp)
   13970:	dc412717 	ldw	r17,1180(sp)
   13974:	d8c12415 	stw	r3,1168(sp)
   13978:	003d4406 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   1397c:	d9012617 	ldw	r4,1176(sp)
   13980:	dc410a04 	addi	r17,sp,1064
   13984:	908003cc 	andi	r2,r18,15
   13988:	b006973a 	slli	r3,r22,28
   1398c:	2085883a 	add	r2,r4,r2
   13990:	9024d13a 	srli	r18,r18,4
   13994:	10800003 	ldbu	r2,0(r2)
   13998:	b02cd13a 	srli	r22,r22,4
   1399c:	8c7fffc4 	addi	r17,r17,-1
   139a0:	1ca4b03a 	or	r18,r3,r18
   139a4:	88800005 	stb	r2,0(r17)
   139a8:	9584b03a 	or	r2,r18,r22
   139ac:	103ff51e 	bne	r2,zero,13984 <__alt_mem_descriptor_memory+0xdefd3984>
   139b0:	dac11e17 	ldw	r11,1144(sp)
   139b4:	dc412415 	stw	r17,1168(sp)
   139b8:	5c63c83a 	sub	r17,r11,r17
   139bc:	003d3306 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   139c0:	1800941e 	bne	r3,zero,13c14 <___vfiprintf_internal_r+0x1178>
   139c4:	d8811d87 	ldb	r2,1142(sp)
   139c8:	10006b26 	beq	r2,zero,13b78 <___vfiprintf_internal_r+0x10dc>
   139cc:	00c00044 	movi	r3,1
   139d0:	d9011d84 	addi	r4,sp,1142
   139d4:	1805883a 	mov	r2,r3
   139d8:	d9000015 	stw	r4,0(sp)
   139dc:	d8c00115 	stw	r3,4(sp)
   139e0:	d811883a 	mov	r8,sp
   139e4:	003f2306 	br	13674 <__alt_mem_descriptor_memory+0xdefd3674>
   139e8:	8023883a 	mov	r17,r16
   139ec:	003c7d06 	br	12be4 <__alt_mem_descriptor_memory+0xdefd2be4>
   139f0:	da810a04 	addi	r10,sp,1064
   139f4:	da812415 	stw	r10,1168(sp)
   139f8:	003d2406 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   139fc:	d9012017 	ldw	r4,1152(sp)
   13a00:	a00b883a 	mov	r5,r20
   13a04:	d9811a04 	addi	r6,sp,1128
   13a08:	00129880 	call	12988 <__sprint_r.part.0>
   13a0c:	103f5d1e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13a10:	d8c11c17 	ldw	r3,1136(sp)
   13a14:	d811883a 	mov	r8,sp
   13a18:	003f7306 	br	137e8 <__alt_mem_descriptor_memory+0xdefd37e8>
   13a1c:	1c800017 	ldw	r18,0(r3)
   13a20:	dac12117 	ldw	r11,1156(sp)
   13a24:	902dd7fa 	srai	r22,r18,31
   13a28:	5ac00104 	addi	r11,r11,4
   13a2c:	dac12115 	stw	r11,1156(sp)
   13a30:	b005883a 	mov	r2,r22
   13a34:	003e5406 	br	13388 <__alt_mem_descriptor_memory+0xdefd3388>
   13a38:	00800084 	movi	r2,2
   13a3c:	9588b03a 	or	r4,r18,r22
   13a40:	003cf506 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   13a44:	d9012017 	ldw	r4,1152(sp)
   13a48:	a00b883a 	mov	r5,r20
   13a4c:	d9811a04 	addi	r6,sp,1128
   13a50:	00129880 	call	12988 <__sprint_r.part.0>
   13a54:	103f4b1e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13a58:	d811883a 	mov	r8,sp
   13a5c:	003cd106 	br	12da4 <__alt_mem_descriptor_memory+0xdefd2da4>
   13a60:	000b883a 	mov	r5,zero
   13a64:	2005883a 	mov	r2,r4
   13a68:	d811883a 	mov	r8,sp
   13a6c:	003d5206 	br	12fb8 <__alt_mem_descriptor_memory+0xdefd2fb8>
   13a70:	10803fcc 	andi	r2,r2,255
   13a74:	1080201c 	xori	r2,r2,128
   13a78:	10bfe004 	addi	r2,r2,-128
   13a7c:	01000c04 	movi	r4,48
   13a80:	11008e26 	beq	r2,r4,13cbc <___vfiprintf_internal_r+0x1220>
   13a84:	da812417 	ldw	r10,1168(sp)
   13a88:	dac11e17 	ldw	r11,1144(sp)
   13a8c:	193fffc5 	stb	r4,-1(r3)
   13a90:	52bfffc4 	addi	r10,r10,-1
   13a94:	da812415 	stw	r10,1168(sp)
   13a98:	5aa3c83a 	sub	r17,r11,r10
   13a9c:	003cfb06 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13aa0:	d9012017 	ldw	r4,1152(sp)
   13aa4:	a00b883a 	mov	r5,r20
   13aa8:	d9811a04 	addi	r6,sp,1128
   13aac:	da412b15 	stw	r9,1196(sp)
   13ab0:	00129880 	call	12988 <__sprint_r.part.0>
   13ab4:	da412b17 	ldw	r9,1196(sp)
   13ab8:	103f321e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13abc:	d9411b17 	ldw	r5,1132(sp)
   13ac0:	d8c11c17 	ldw	r3,1136(sp)
   13ac4:	d811883a 	mov	r8,sp
   13ac8:	28800044 	addi	r2,r5,1
   13acc:	003d3a06 	br	12fb8 <__alt_mem_descriptor_memory+0xdefd2fb8>
   13ad0:	d9012017 	ldw	r4,1152(sp)
   13ad4:	a00b883a 	mov	r5,r20
   13ad8:	d9811a04 	addi	r6,sp,1128
   13adc:	da412b15 	stw	r9,1196(sp)
   13ae0:	db812a15 	stw	r14,1192(sp)
   13ae4:	00129880 	call	12988 <__sprint_r.part.0>
   13ae8:	da412b17 	ldw	r9,1196(sp)
   13aec:	db812a17 	ldw	r14,1192(sp)
   13af0:	103f241e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13af4:	d9411b17 	ldw	r5,1132(sp)
   13af8:	d8c11c17 	ldw	r3,1136(sp)
   13afc:	d811883a 	mov	r8,sp
   13b00:	28800044 	addi	r2,r5,1
   13b04:	003d1f06 	br	12f84 <__alt_mem_descriptor_memory+0xdefd2f84>
   13b08:	1800781e 	bne	r3,zero,13cec <___vfiprintf_internal_r+0x1250>
   13b0c:	000b883a 	mov	r5,zero
   13b10:	00800044 	movi	r2,1
   13b14:	d811883a 	mov	r8,sp
   13b18:	003d2906 	br	12fc0 <__alt_mem_descriptor_memory+0xdefd2fc0>
   13b1c:	d9012017 	ldw	r4,1152(sp)
   13b20:	a00b883a 	mov	r5,r20
   13b24:	d9811a04 	addi	r6,sp,1128
   13b28:	00129880 	call	12988 <__sprint_r.part.0>
   13b2c:	103f151e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13b30:	d8811b17 	ldw	r2,1132(sp)
   13b34:	d8c11c17 	ldw	r3,1136(sp)
   13b38:	d811883a 	mov	r8,sp
   13b3c:	10800044 	addi	r2,r2,1
   13b40:	003d4406 	br	13054 <__alt_mem_descriptor_memory+0xdefd3054>
   13b44:	dac10a04 	addi	r11,sp,1064
   13b48:	dac12415 	stw	r11,1168(sp)
   13b4c:	003ccf06 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13b50:	04a5c83a 	sub	r18,zero,r18
   13b54:	9004c03a 	cmpne	r2,r18,zero
   13b58:	05adc83a 	sub	r22,zero,r22
   13b5c:	b0adc83a 	sub	r22,r22,r2
   13b60:	03000b44 	movi	r12,45
   13b64:	db011d85 	stb	r12,1142(sp)
   13b68:	4823883a 	mov	r17,r9
   13b6c:	00800044 	movi	r2,1
   13b70:	9588b03a 	or	r4,r18,r22
   13b74:	003cab06 	br	12e24 <__alt_mem_descriptor_memory+0xdefd2e24>
   13b78:	000b883a 	mov	r5,zero
   13b7c:	00800044 	movi	r2,1
   13b80:	d811883a 	mov	r8,sp
   13b84:	703d0c26 	beq	r14,zero,12fb8 <__alt_mem_descriptor_memory+0xdefd2fb8>
   13b88:	00c00084 	movi	r3,2
   13b8c:	d9011d04 	addi	r4,sp,1140
   13b90:	d9000015 	stw	r4,0(sp)
   13b94:	d8c00115 	stw	r3,4(sp)
   13b98:	003d0406 	br	12fac <__alt_mem_descriptor_memory+0xdefd2fac>
   13b9c:	80c00007 	ldb	r3,0(r16)
   13ba0:	003c1d06 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13ba4:	a880040c 	andi	r2,r21,16
   13ba8:	1000091e 	bne	r2,zero,13bd0 <___vfiprintf_internal_r+0x1134>
   13bac:	aac0100c 	andi	r11,r21,64
   13bb0:	58000726 	beq	r11,zero,13bd0 <___vfiprintf_internal_r+0x1134>
   13bb4:	da812117 	ldw	r10,1156(sp)
   13bb8:	dac12217 	ldw	r11,1160(sp)
   13bbc:	50800017 	ldw	r2,0(r10)
   13bc0:	52800104 	addi	r10,r10,4
   13bc4:	da812115 	stw	r10,1156(sp)
   13bc8:	12c0000d 	sth	r11,0(r2)
   13bcc:	003be806 	br	12b70 <__alt_mem_descriptor_memory+0xdefd2b70>
   13bd0:	da812117 	ldw	r10,1156(sp)
   13bd4:	dac12217 	ldw	r11,1160(sp)
   13bd8:	50800017 	ldw	r2,0(r10)
   13bdc:	52800104 	addi	r10,r10,4
   13be0:	da812115 	stw	r10,1156(sp)
   13be4:	12c00015 	stw	r11,0(r2)
   13be8:	003be106 	br	12b70 <__alt_mem_descriptor_memory+0xdefd2b70>
   13bec:	00800084 	movi	r2,2
   13bf0:	003c8906 	br	12e18 <__alt_mem_descriptor_memory+0xdefd2e18>
   13bf4:	a900100c 	andi	r4,r21,64
   13bf8:	20001f26 	beq	r4,zero,13c78 <___vfiprintf_internal_r+0x11dc>
   13bfc:	da812117 	ldw	r10,1156(sp)
   13c00:	1480000b 	ldhu	r18,0(r2)
   13c04:	002d883a 	mov	r22,zero
   13c08:	52800104 	addi	r10,r10,4
   13c0c:	da812115 	stw	r10,1156(sp)
   13c10:	003dae06 	br	132cc <__alt_mem_descriptor_memory+0xdefd32cc>
   13c14:	d9012017 	ldw	r4,1152(sp)
   13c18:	a00b883a 	mov	r5,r20
   13c1c:	d9811a04 	addi	r6,sp,1128
   13c20:	da412b15 	stw	r9,1196(sp)
   13c24:	db812a15 	stw	r14,1192(sp)
   13c28:	00129880 	call	12988 <__sprint_r.part.0>
   13c2c:	da412b17 	ldw	r9,1196(sp)
   13c30:	db812a17 	ldw	r14,1192(sp)
   13c34:	103ed31e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13c38:	d9411b17 	ldw	r5,1132(sp)
   13c3c:	d8c11c17 	ldw	r3,1136(sp)
   13c40:	d811883a 	mov	r8,sp
   13c44:	28800044 	addi	r2,r5,1
   13c48:	003e7f06 	br	13648 <__alt_mem_descriptor_memory+0xdefd3648>
   13c4c:	9825883a 	mov	r18,r19
   13c50:	003d3406 	br	13124 <__alt_mem_descriptor_memory+0xdefd3124>
   13c54:	4823883a 	mov	r17,r9
   13c58:	003e0806 	br	1347c <__alt_mem_descriptor_memory+0xdefd347c>
   13c5c:	d9012017 	ldw	r4,1152(sp)
   13c60:	a00b883a 	mov	r5,r20
   13c64:	d9811a04 	addi	r6,sp,1128
   13c68:	00129880 	call	12988 <__sprint_r.part.0>
   13c6c:	103ec51e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13c70:	d8c11c17 	ldw	r3,1136(sp)
   13c74:	003ee006 	br	137f8 <__alt_mem_descriptor_memory+0xdefd37f8>
   13c78:	dac12117 	ldw	r11,1156(sp)
   13c7c:	14800017 	ldw	r18,0(r2)
   13c80:	002d883a 	mov	r22,zero
   13c84:	5ac00104 	addi	r11,r11,4
   13c88:	dac12115 	stw	r11,1156(sp)
   13c8c:	003d8f06 	br	132cc <__alt_mem_descriptor_memory+0xdefd32cc>
   13c90:	02c00174 	movhi	r11,5
   13c94:	5af60d04 	addi	r11,r11,-10188
   13c98:	dac12315 	stw	r11,1164(sp)
   13c9c:	003ce306 	br	1302c <__alt_mem_descriptor_memory+0xdefd302c>
   13ca0:	80c00043 	ldbu	r3,1(r16)
   13ca4:	ad400814 	ori	r21,r21,32
   13ca8:	84000044 	addi	r16,r16,1
   13cac:	18c03fcc 	andi	r3,r3,255
   13cb0:	18c0201c 	xori	r3,r3,128
   13cb4:	18ffe004 	addi	r3,r3,-128
   13cb8:	003bd706 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13cbc:	dac11e17 	ldw	r11,1144(sp)
   13cc0:	d8c12417 	ldw	r3,1168(sp)
   13cc4:	58e3c83a 	sub	r17,r11,r3
   13cc8:	003c7006 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13ccc:	da012a15 	stw	r8,1192(sp)
   13cd0:	0008d080 	call	8d08 <strlen>
   13cd4:	1023883a 	mov	r17,r2
   13cd8:	db011d83 	ldbu	r12,1142(sp)
   13cdc:	dd812115 	stw	r22,1156(sp)
   13ce0:	0013883a 	mov	r9,zero
   13ce4:	da012a17 	ldw	r8,1192(sp)
   13ce8:	003c6806 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13cec:	d9012017 	ldw	r4,1152(sp)
   13cf0:	a00b883a 	mov	r5,r20
   13cf4:	d9811a04 	addi	r6,sp,1128
   13cf8:	da412b15 	stw	r9,1196(sp)
   13cfc:	00129880 	call	12988 <__sprint_r.part.0>
   13d00:	da412b17 	ldw	r9,1196(sp)
   13d04:	103e9f1e 	bne	r2,zero,13784 <__alt_mem_descriptor_memory+0xdefd3784>
   13d08:	d9411b17 	ldw	r5,1132(sp)
   13d0c:	d8c11c17 	ldw	r3,1136(sp)
   13d10:	d811883a 	mov	r8,sp
   13d14:	28800044 	addi	r2,r5,1
   13d18:	003ca906 	br	12fc0 <__alt_mem_descriptor_memory+0xdefd2fc0>
   13d1c:	d9411b17 	ldw	r5,1132(sp)
   13d20:	01000174 	movhi	r4,5
   13d24:	21361104 	addi	r4,r4,-10172
   13d28:	d9012315 	stw	r4,1164(sp)
   13d2c:	29400044 	addi	r5,r5,1
   13d30:	003c8806 	br	12f54 <__alt_mem_descriptor_memory+0xdefd2f54>
   13d34:	00800184 	movi	r2,6
   13d38:	1240012e 	bgeu	r2,r9,13d40 <___vfiprintf_internal_r+0x12a4>
   13d3c:	1013883a 	mov	r9,r2
   13d40:	4823883a 	mov	r17,r9
   13d44:	4825883a 	mov	r18,r9
   13d48:	48001516 	blt	r9,zero,13da0 <___vfiprintf_internal_r+0x1304>
   13d4c:	00800174 	movhi	r2,5
   13d50:	10b5a204 	addi	r2,r2,-10616
   13d54:	dd812115 	stw	r22,1156(sp)
   13d58:	d8812415 	stw	r2,1168(sp)
   13d5c:	003d6f06 	br	1331c <__alt_mem_descriptor_memory+0xdefd331c>
   13d60:	d9411b17 	ldw	r5,1132(sp)
   13d64:	02c00174 	movhi	r11,5
   13d68:	5af61104 	addi	r11,r11,-10172
   13d6c:	dac12315 	stw	r11,1164(sp)
   13d70:	29400044 	addi	r5,r5,1
   13d74:	003ce106 	br	130fc <__alt_mem_descriptor_memory+0xdefd30fc>
   13d78:	01000174 	movhi	r4,5
   13d7c:	21360d04 	addi	r4,r4,-10188
   13d80:	d9012315 	stw	r4,1164(sp)
   13d84:	1009883a 	mov	r4,r2
   13d88:	003eca06 	br	138b4 <__alt_mem_descriptor_memory+0xdefd38b4>
   13d8c:	4823883a 	mov	r17,r9
   13d90:	db011d83 	ldbu	r12,1142(sp)
   13d94:	dd812115 	stw	r22,1156(sp)
   13d98:	0013883a 	mov	r9,zero
   13d9c:	003c3b06 	br	12e8c <__alt_mem_descriptor_memory+0xdefd2e8c>
   13da0:	0025883a 	mov	r18,zero
   13da4:	003fe906 	br	13d4c <__alt_mem_descriptor_memory+0xdefd3d4c>
   13da8:	dac12117 	ldw	r11,1156(sp)
   13dac:	8005883a 	mov	r2,r16
   13db0:	5021883a 	mov	r16,r10
   13db4:	5a400017 	ldw	r9,0(r11)
   13db8:	58c00104 	addi	r3,r11,4
   13dbc:	d8c12115 	stw	r3,1156(sp)
   13dc0:	48000a16 	blt	r9,zero,13dec <___vfiprintf_internal_r+0x1350>
   13dc4:	10c00047 	ldb	r3,1(r2)
   13dc8:	003b9306 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>
   13dcc:	043fffc4 	movi	r16,-1
   13dd0:	003d0206 	br	131dc <__alt_mem_descriptor_memory+0xdefd31dc>
   13dd4:	94c0010e 	bge	r18,r19,13ddc <___vfiprintf_internal_r+0x1340>
   13dd8:	9825883a 	mov	r18,r19
   13ddc:	da812217 	ldw	r10,1160(sp)
   13de0:	5495883a 	add	r10,r10,r18
   13de4:	da812215 	stw	r10,1160(sp)
   13de8:	003cd106 	br	13130 <__alt_mem_descriptor_memory+0xdefd3130>
   13dec:	027fffc4 	movi	r9,-1
   13df0:	10c00047 	ldb	r3,1(r2)
   13df4:	003b8806 	br	12c18 <__alt_mem_descriptor_memory+0xdefd2c18>

00013df8 <__vfiprintf_internal>:
   13df8:	2007883a 	mov	r3,r4
   13dfc:	01000174 	movhi	r4,5
   13e00:	21072d04 	addi	r4,r4,7348
   13e04:	21000017 	ldw	r4,0(r4)
   13e08:	2805883a 	mov	r2,r5
   13e0c:	300f883a 	mov	r7,r6
   13e10:	180b883a 	mov	r5,r3
   13e14:	100d883a 	mov	r6,r2
   13e18:	0012a9c1 	jmpi	12a9c <___vfiprintf_internal_r>

00013e1c <_write_r>:
   13e1c:	defffd04 	addi	sp,sp,-12
   13e20:	dc000015 	stw	r16,0(sp)
   13e24:	04000174 	movhi	r16,5
   13e28:	dc400115 	stw	r17,4(sp)
   13e2c:	840f7704 	addi	r16,r16,15836
   13e30:	2023883a 	mov	r17,r4
   13e34:	2809883a 	mov	r4,r5
   13e38:	300b883a 	mov	r5,r6
   13e3c:	380d883a 	mov	r6,r7
   13e40:	dfc00215 	stw	ra,8(sp)
   13e44:	80000015 	stw	zero,0(r16)
   13e48:	00235a80 	call	235a8 <write>
   13e4c:	00ffffc4 	movi	r3,-1
   13e50:	10c00526 	beq	r2,r3,13e68 <_write_r+0x4c>
   13e54:	dfc00217 	ldw	ra,8(sp)
   13e58:	dc400117 	ldw	r17,4(sp)
   13e5c:	dc000017 	ldw	r16,0(sp)
   13e60:	dec00304 	addi	sp,sp,12
   13e64:	f800283a 	ret
   13e68:	80c00017 	ldw	r3,0(r16)
   13e6c:	183ff926 	beq	r3,zero,13e54 <__alt_mem_descriptor_memory+0xdefd3e54>
   13e70:	88c00015 	stw	r3,0(r17)
   13e74:	003ff706 	br	13e54 <__alt_mem_descriptor_memory+0xdefd3e54>

00013e78 <_close_r>:
   13e78:	defffd04 	addi	sp,sp,-12
   13e7c:	dc000015 	stw	r16,0(sp)
   13e80:	04000174 	movhi	r16,5
   13e84:	dc400115 	stw	r17,4(sp)
   13e88:	840f7704 	addi	r16,r16,15836
   13e8c:	2023883a 	mov	r17,r4
   13e90:	2809883a 	mov	r4,r5
   13e94:	dfc00215 	stw	ra,8(sp)
   13e98:	80000015 	stw	zero,0(r16)
   13e9c:	00233b00 	call	233b0 <close>
   13ea0:	00ffffc4 	movi	r3,-1
   13ea4:	10c00526 	beq	r2,r3,13ebc <_close_r+0x44>
   13ea8:	dfc00217 	ldw	ra,8(sp)
   13eac:	dc400117 	ldw	r17,4(sp)
   13eb0:	dc000017 	ldw	r16,0(sp)
   13eb4:	dec00304 	addi	sp,sp,12
   13eb8:	f800283a 	ret
   13ebc:	80c00017 	ldw	r3,0(r16)
   13ec0:	183ff926 	beq	r3,zero,13ea8 <__alt_mem_descriptor_memory+0xdefd3ea8>
   13ec4:	88c00015 	stw	r3,0(r17)
   13ec8:	003ff706 	br	13ea8 <__alt_mem_descriptor_memory+0xdefd3ea8>

00013ecc <_calloc_r>:
   13ecc:	298b383a 	mul	r5,r5,r6
   13ed0:	defffe04 	addi	sp,sp,-8
   13ed4:	dc000015 	stw	r16,0(sp)
   13ed8:	dfc00115 	stw	ra,4(sp)
   13edc:	00074e80 	call	74e8 <_malloc_r>
   13ee0:	1021883a 	mov	r16,r2
   13ee4:	10002826 	beq	r2,zero,13f88 <_calloc_r+0xbc>
   13ee8:	11bfff17 	ldw	r6,-4(r2)
   13eec:	00bfff04 	movi	r2,-4
   13ef0:	00c00904 	movi	r3,36
   13ef4:	308c703a 	and	r6,r6,r2
   13ef8:	308d883a 	add	r6,r6,r2
   13efc:	19801436 	bltu	r3,r6,13f50 <_calloc_r+0x84>
   13f00:	008004c4 	movi	r2,19
   13f04:	11800936 	bltu	r2,r6,13f2c <_calloc_r+0x60>
   13f08:	8005883a 	mov	r2,r16
   13f0c:	10000015 	stw	zero,0(r2)
   13f10:	10000115 	stw	zero,4(r2)
   13f14:	10000215 	stw	zero,8(r2)
   13f18:	8005883a 	mov	r2,r16
   13f1c:	dfc00117 	ldw	ra,4(sp)
   13f20:	dc000017 	ldw	r16,0(sp)
   13f24:	dec00204 	addi	sp,sp,8
   13f28:	f800283a 	ret
   13f2c:	80000015 	stw	zero,0(r16)
   13f30:	80000115 	stw	zero,4(r16)
   13f34:	008006c4 	movi	r2,27
   13f38:	11800d2e 	bgeu	r2,r6,13f70 <_calloc_r+0xa4>
   13f3c:	80000215 	stw	zero,8(r16)
   13f40:	80000315 	stw	zero,12(r16)
   13f44:	30c00c26 	beq	r6,r3,13f78 <_calloc_r+0xac>
   13f48:	80800404 	addi	r2,r16,16
   13f4c:	003fef06 	br	13f0c <__alt_mem_descriptor_memory+0xdefd3f0c>
   13f50:	8009883a 	mov	r4,r16
   13f54:	000b883a 	mov	r5,zero
   13f58:	0007f240 	call	7f24 <memset>
   13f5c:	8005883a 	mov	r2,r16
   13f60:	dfc00117 	ldw	ra,4(sp)
   13f64:	dc000017 	ldw	r16,0(sp)
   13f68:	dec00204 	addi	sp,sp,8
   13f6c:	f800283a 	ret
   13f70:	80800204 	addi	r2,r16,8
   13f74:	003fe506 	br	13f0c <__alt_mem_descriptor_memory+0xdefd3f0c>
   13f78:	80000415 	stw	zero,16(r16)
   13f7c:	80800604 	addi	r2,r16,24
   13f80:	80000515 	stw	zero,20(r16)
   13f84:	003fe106 	br	13f0c <__alt_mem_descriptor_memory+0xdefd3f0c>
   13f88:	0005883a 	mov	r2,zero
   13f8c:	003fe306 	br	13f1c <__alt_mem_descriptor_memory+0xdefd3f1c>

00013f90 <_fclose_r>:
   13f90:	28003226 	beq	r5,zero,1405c <_fclose_r+0xcc>
   13f94:	defffc04 	addi	sp,sp,-16
   13f98:	dc400115 	stw	r17,4(sp)
   13f9c:	2023883a 	mov	r17,r4
   13fa0:	dc000015 	stw	r16,0(sp)
   13fa4:	dfc00315 	stw	ra,12(sp)
   13fa8:	dc800215 	stw	r18,8(sp)
   13fac:	2821883a 	mov	r16,r5
   13fb0:	000eed80 	call	eed8 <__sfp_lock_acquire>
   13fb4:	88000226 	beq	r17,zero,13fc0 <_fclose_r+0x30>
   13fb8:	88800e17 	ldw	r2,56(r17)
   13fbc:	10002926 	beq	r2,zero,14064 <_fclose_r+0xd4>
   13fc0:	8080030f 	ldh	r2,12(r16)
   13fc4:	10002226 	beq	r2,zero,14050 <_fclose_r+0xc0>
   13fc8:	8809883a 	mov	r4,r17
   13fcc:	800b883a 	mov	r5,r16
   13fd0:	000e9200 	call	e920 <_fflush_r>
   13fd4:	1025883a 	mov	r18,r2
   13fd8:	80800b17 	ldw	r2,44(r16)
   13fdc:	10000426 	beq	r2,zero,13ff0 <_fclose_r+0x60>
   13fe0:	81400717 	ldw	r5,28(r16)
   13fe4:	8809883a 	mov	r4,r17
   13fe8:	103ee83a 	callr	r2
   13fec:	10002616 	blt	r2,zero,14088 <_fclose_r+0xf8>
   13ff0:	8080030b 	ldhu	r2,12(r16)
   13ff4:	1080200c 	andi	r2,r2,128
   13ff8:	10001f1e 	bne	r2,zero,14078 <_fclose_r+0xe8>
   13ffc:	81400c17 	ldw	r5,48(r16)
   14000:	28000526 	beq	r5,zero,14018 <_fclose_r+0x88>
   14004:	80801004 	addi	r2,r16,64
   14008:	28800226 	beq	r5,r2,14014 <_fclose_r+0x84>
   1400c:	8809883a 	mov	r4,r17
   14010:	000f1900 	call	f190 <_free_r>
   14014:	80000c15 	stw	zero,48(r16)
   14018:	81401117 	ldw	r5,68(r16)
   1401c:	28000326 	beq	r5,zero,1402c <_fclose_r+0x9c>
   14020:	8809883a 	mov	r4,r17
   14024:	000f1900 	call	f190 <_free_r>
   14028:	80001115 	stw	zero,68(r16)
   1402c:	8000030d 	sth	zero,12(r16)
   14030:	000eedc0 	call	eedc <__sfp_lock_release>
   14034:	9005883a 	mov	r2,r18
   14038:	dfc00317 	ldw	ra,12(sp)
   1403c:	dc800217 	ldw	r18,8(sp)
   14040:	dc400117 	ldw	r17,4(sp)
   14044:	dc000017 	ldw	r16,0(sp)
   14048:	dec00404 	addi	sp,sp,16
   1404c:	f800283a 	ret
   14050:	000eedc0 	call	eedc <__sfp_lock_release>
   14054:	0005883a 	mov	r2,zero
   14058:	003ff706 	br	14038 <__alt_mem_descriptor_memory+0xdefd4038>
   1405c:	0005883a 	mov	r2,zero
   14060:	f800283a 	ret
   14064:	8809883a 	mov	r4,r17
   14068:	000eec80 	call	eec8 <__sinit>
   1406c:	8080030f 	ldh	r2,12(r16)
   14070:	103fd51e 	bne	r2,zero,13fc8 <__alt_mem_descriptor_memory+0xdefd3fc8>
   14074:	003ff606 	br	14050 <__alt_mem_descriptor_memory+0xdefd4050>
   14078:	81400417 	ldw	r5,16(r16)
   1407c:	8809883a 	mov	r4,r17
   14080:	000f1900 	call	f190 <_free_r>
   14084:	003fdd06 	br	13ffc <__alt_mem_descriptor_memory+0xdefd3ffc>
   14088:	04bfffc4 	movi	r18,-1
   1408c:	003fd806 	br	13ff0 <__alt_mem_descriptor_memory+0xdefd3ff0>

00014090 <fclose>:
   14090:	00800174 	movhi	r2,5
   14094:	10872d04 	addi	r2,r2,7348
   14098:	200b883a 	mov	r5,r4
   1409c:	11000017 	ldw	r4,0(r2)
   140a0:	0013f901 	jmpi	13f90 <_fclose_r>

000140a4 <_fputwc_r>:
   140a4:	3080030b 	ldhu	r2,12(r6)
   140a8:	defff804 	addi	sp,sp,-32
   140ac:	dcc00415 	stw	r19,16(sp)
   140b0:	dc800315 	stw	r18,12(sp)
   140b4:	dc000115 	stw	r16,4(sp)
   140b8:	dfc00715 	stw	ra,28(sp)
   140bc:	dd400615 	stw	r21,24(sp)
   140c0:	dd000515 	stw	r20,20(sp)
   140c4:	dc400215 	stw	r17,8(sp)
   140c8:	10c8000c 	andi	r3,r2,8192
   140cc:	3021883a 	mov	r16,r6
   140d0:	2027883a 	mov	r19,r4
   140d4:	2825883a 	mov	r18,r5
   140d8:	1800051e 	bne	r3,zero,140f0 <_fputwc_r+0x4c>
   140dc:	30c01917 	ldw	r3,100(r6)
   140e0:	10880014 	ori	r2,r2,8192
   140e4:	3080030d 	sth	r2,12(r6)
   140e8:	18880014 	ori	r2,r3,8192
   140ec:	30801915 	stw	r2,100(r6)
   140f0:	000fb1c0 	call	fb1c <__locale_mb_cur_max>
   140f4:	00c00044 	movi	r3,1
   140f8:	10c03e26 	beq	r2,r3,141f4 <_fputwc_r+0x150>
   140fc:	9809883a 	mov	r4,r19
   14100:	d80b883a 	mov	r5,sp
   14104:	900d883a 	mov	r6,r18
   14108:	81c01704 	addi	r7,r16,92
   1410c:	00143e40 	call	143e4 <_wcrtomb_r>
   14110:	1029883a 	mov	r20,r2
   14114:	00bfffc4 	movi	r2,-1
   14118:	a0802026 	beq	r20,r2,1419c <_fputwc_r+0xf8>
   1411c:	d9400003 	ldbu	r5,0(sp)
   14120:	a0001c26 	beq	r20,zero,14194 <_fputwc_r+0xf0>
   14124:	0023883a 	mov	r17,zero
   14128:	05400284 	movi	r21,10
   1412c:	00000906 	br	14154 <_fputwc_r+0xb0>
   14130:	80800017 	ldw	r2,0(r16)
   14134:	11400005 	stb	r5,0(r2)
   14138:	80c00017 	ldw	r3,0(r16)
   1413c:	18c00044 	addi	r3,r3,1
   14140:	80c00015 	stw	r3,0(r16)
   14144:	8c400044 	addi	r17,r17,1
   14148:	dc45883a 	add	r2,sp,r17
   1414c:	8d00112e 	bgeu	r17,r20,14194 <_fputwc_r+0xf0>
   14150:	11400003 	ldbu	r5,0(r2)
   14154:	80c00217 	ldw	r3,8(r16)
   14158:	18ffffc4 	addi	r3,r3,-1
   1415c:	80c00215 	stw	r3,8(r16)
   14160:	183ff30e 	bge	r3,zero,14130 <__alt_mem_descriptor_memory+0xdefd4130>
   14164:	80800617 	ldw	r2,24(r16)
   14168:	18801916 	blt	r3,r2,141d0 <_fputwc_r+0x12c>
   1416c:	80800017 	ldw	r2,0(r16)
   14170:	11400005 	stb	r5,0(r2)
   14174:	80800017 	ldw	r2,0(r16)
   14178:	10c00003 	ldbu	r3,0(r2)
   1417c:	10800044 	addi	r2,r2,1
   14180:	1d402326 	beq	r3,r21,14210 <_fputwc_r+0x16c>
   14184:	80800015 	stw	r2,0(r16)
   14188:	8c400044 	addi	r17,r17,1
   1418c:	dc45883a 	add	r2,sp,r17
   14190:	8d3fef36 	bltu	r17,r20,14150 <__alt_mem_descriptor_memory+0xdefd4150>
   14194:	9005883a 	mov	r2,r18
   14198:	00000406 	br	141ac <_fputwc_r+0x108>
   1419c:	80c0030b 	ldhu	r3,12(r16)
   141a0:	a005883a 	mov	r2,r20
   141a4:	18c01014 	ori	r3,r3,64
   141a8:	80c0030d 	sth	r3,12(r16)
   141ac:	dfc00717 	ldw	ra,28(sp)
   141b0:	dd400617 	ldw	r21,24(sp)
   141b4:	dd000517 	ldw	r20,20(sp)
   141b8:	dcc00417 	ldw	r19,16(sp)
   141bc:	dc800317 	ldw	r18,12(sp)
   141c0:	dc400217 	ldw	r17,8(sp)
   141c4:	dc000117 	ldw	r16,4(sp)
   141c8:	dec00804 	addi	sp,sp,32
   141cc:	f800283a 	ret
   141d0:	9809883a 	mov	r4,r19
   141d4:	29403fcc 	andi	r5,r5,255
   141d8:	800d883a 	mov	r6,r16
   141dc:	000cd580 	call	cd58 <__swbuf_r>
   141e0:	10bfffe0 	cmpeqi	r2,r2,-1
   141e4:	10803fcc 	andi	r2,r2,255
   141e8:	103fd626 	beq	r2,zero,14144 <__alt_mem_descriptor_memory+0xdefd4144>
   141ec:	00bfffc4 	movi	r2,-1
   141f0:	003fee06 	br	141ac <__alt_mem_descriptor_memory+0xdefd41ac>
   141f4:	90ffffc4 	addi	r3,r18,-1
   141f8:	01003f84 	movi	r4,254
   141fc:	20ffbf36 	bltu	r4,r3,140fc <__alt_mem_descriptor_memory+0xdefd40fc>
   14200:	900b883a 	mov	r5,r18
   14204:	dc800005 	stb	r18,0(sp)
   14208:	1029883a 	mov	r20,r2
   1420c:	003fc506 	br	14124 <__alt_mem_descriptor_memory+0xdefd4124>
   14210:	9809883a 	mov	r4,r19
   14214:	a80b883a 	mov	r5,r21
   14218:	800d883a 	mov	r6,r16
   1421c:	000cd580 	call	cd58 <__swbuf_r>
   14220:	10bfffe0 	cmpeqi	r2,r2,-1
   14224:	003fef06 	br	141e4 <__alt_mem_descriptor_memory+0xdefd41e4>

00014228 <fputwc>:
   14228:	defffc04 	addi	sp,sp,-16
   1422c:	dc000115 	stw	r16,4(sp)
   14230:	04000174 	movhi	r16,5
   14234:	84072d04 	addi	r16,r16,7348
   14238:	dc400215 	stw	r17,8(sp)
   1423c:	2023883a 	mov	r17,r4
   14240:	81000017 	ldw	r4,0(r16)
   14244:	dfc00315 	stw	ra,12(sp)
   14248:	280d883a 	mov	r6,r5
   1424c:	20000626 	beq	r4,zero,14268 <fputwc+0x40>
   14250:	20800e17 	ldw	r2,56(r4)
   14254:	1000041e 	bne	r2,zero,14268 <fputwc+0x40>
   14258:	d9400015 	stw	r5,0(sp)
   1425c:	000eec80 	call	eec8 <__sinit>
   14260:	81000017 	ldw	r4,0(r16)
   14264:	d9800017 	ldw	r6,0(sp)
   14268:	880b883a 	mov	r5,r17
   1426c:	dfc00317 	ldw	ra,12(sp)
   14270:	dc400217 	ldw	r17,8(sp)
   14274:	dc000117 	ldw	r16,4(sp)
   14278:	dec00404 	addi	sp,sp,16
   1427c:	00140a41 	jmpi	140a4 <_fputwc_r>

00014280 <_fstat_r>:
   14280:	defffd04 	addi	sp,sp,-12
   14284:	dc000015 	stw	r16,0(sp)
   14288:	04000174 	movhi	r16,5
   1428c:	dc400115 	stw	r17,4(sp)
   14290:	840f7704 	addi	r16,r16,15836
   14294:	2023883a 	mov	r17,r4
   14298:	2809883a 	mov	r4,r5
   1429c:	300b883a 	mov	r5,r6
   142a0:	dfc00215 	stw	ra,8(sp)
   142a4:	80000015 	stw	zero,0(r16)
   142a8:	00178b00 	call	178b0 <fstat>
   142ac:	00ffffc4 	movi	r3,-1
   142b0:	10c00526 	beq	r2,r3,142c8 <_fstat_r+0x48>
   142b4:	dfc00217 	ldw	ra,8(sp)
   142b8:	dc400117 	ldw	r17,4(sp)
   142bc:	dc000017 	ldw	r16,0(sp)
   142c0:	dec00304 	addi	sp,sp,12
   142c4:	f800283a 	ret
   142c8:	80c00017 	ldw	r3,0(r16)
   142cc:	183ff926 	beq	r3,zero,142b4 <__alt_mem_descriptor_memory+0xdefd42b4>
   142d0:	88c00015 	stw	r3,0(r17)
   142d4:	003ff706 	br	142b4 <__alt_mem_descriptor_memory+0xdefd42b4>

000142d8 <_isatty_r>:
   142d8:	defffd04 	addi	sp,sp,-12
   142dc:	dc000015 	stw	r16,0(sp)
   142e0:	04000174 	movhi	r16,5
   142e4:	dc400115 	stw	r17,4(sp)
   142e8:	840f7704 	addi	r16,r16,15836
   142ec:	2023883a 	mov	r17,r4
   142f0:	2809883a 	mov	r4,r5
   142f4:	dfc00215 	stw	ra,8(sp)
   142f8:	80000015 	stw	zero,0(r16)
   142fc:	00179b00 	call	179b0 <isatty>
   14300:	00ffffc4 	movi	r3,-1
   14304:	10c00526 	beq	r2,r3,1431c <_isatty_r+0x44>
   14308:	dfc00217 	ldw	ra,8(sp)
   1430c:	dc400117 	ldw	r17,4(sp)
   14310:	dc000017 	ldw	r16,0(sp)
   14314:	dec00304 	addi	sp,sp,12
   14318:	f800283a 	ret
   1431c:	80c00017 	ldw	r3,0(r16)
   14320:	183ff926 	beq	r3,zero,14308 <__alt_mem_descriptor_memory+0xdefd4308>
   14324:	88c00015 	stw	r3,0(r17)
   14328:	003ff706 	br	14308 <__alt_mem_descriptor_memory+0xdefd4308>

0001432c <_lseek_r>:
   1432c:	defffd04 	addi	sp,sp,-12
   14330:	dc000015 	stw	r16,0(sp)
   14334:	04000174 	movhi	r16,5
   14338:	dc400115 	stw	r17,4(sp)
   1433c:	840f7704 	addi	r16,r16,15836
   14340:	2023883a 	mov	r17,r4
   14344:	2809883a 	mov	r4,r5
   14348:	300b883a 	mov	r5,r6
   1434c:	380d883a 	mov	r6,r7
   14350:	dfc00215 	stw	ra,8(sp)
   14354:	80000015 	stw	zero,0(r16)
   14358:	0017b880 	call	17b88 <lseek>
   1435c:	00ffffc4 	movi	r3,-1
   14360:	10c00526 	beq	r2,r3,14378 <_lseek_r+0x4c>
   14364:	dfc00217 	ldw	ra,8(sp)
   14368:	dc400117 	ldw	r17,4(sp)
   1436c:	dc000017 	ldw	r16,0(sp)
   14370:	dec00304 	addi	sp,sp,12
   14374:	f800283a 	ret
   14378:	80c00017 	ldw	r3,0(r16)
   1437c:	183ff926 	beq	r3,zero,14364 <__alt_mem_descriptor_memory+0xdefd4364>
   14380:	88c00015 	stw	r3,0(r17)
   14384:	003ff706 	br	14364 <__alt_mem_descriptor_memory+0xdefd4364>

00014388 <_read_r>:
   14388:	defffd04 	addi	sp,sp,-12
   1438c:	dc000015 	stw	r16,0(sp)
   14390:	04000174 	movhi	r16,5
   14394:	dc400115 	stw	r17,4(sp)
   14398:	840f7704 	addi	r16,r16,15836
   1439c:	2023883a 	mov	r17,r4
   143a0:	2809883a 	mov	r4,r5
   143a4:	300b883a 	mov	r5,r6
   143a8:	380d883a 	mov	r6,r7
   143ac:	dfc00215 	stw	ra,8(sp)
   143b0:	80000015 	stw	zero,0(r16)
   143b4:	00235380 	call	23538 <read>
   143b8:	00ffffc4 	movi	r3,-1
   143bc:	10c00526 	beq	r2,r3,143d4 <_read_r+0x4c>
   143c0:	dfc00217 	ldw	ra,8(sp)
   143c4:	dc400117 	ldw	r17,4(sp)
   143c8:	dc000017 	ldw	r16,0(sp)
   143cc:	dec00304 	addi	sp,sp,12
   143d0:	f800283a 	ret
   143d4:	80c00017 	ldw	r3,0(r16)
   143d8:	183ff926 	beq	r3,zero,143c0 <__alt_mem_descriptor_memory+0xdefd43c0>
   143dc:	88c00015 	stw	r3,0(r17)
   143e0:	003ff706 	br	143c0 <__alt_mem_descriptor_memory+0xdefd43c0>

000143e4 <_wcrtomb_r>:
   143e4:	defff604 	addi	sp,sp,-40
   143e8:	00800174 	movhi	r2,5
   143ec:	dc800815 	stw	r18,32(sp)
   143f0:	dc400715 	stw	r17,28(sp)
   143f4:	dc000615 	stw	r16,24(sp)
   143f8:	10873104 	addi	r2,r2,7364
   143fc:	dfc00915 	stw	ra,36(sp)
   14400:	2021883a 	mov	r16,r4
   14404:	3823883a 	mov	r17,r7
   14408:	14800017 	ldw	r18,0(r2)
   1440c:	28001426 	beq	r5,zero,14460 <_wcrtomb_r+0x7c>
   14410:	d9400415 	stw	r5,16(sp)
   14414:	d9800515 	stw	r6,20(sp)
   14418:	000fb100 	call	fb10 <__locale_charset>
   1441c:	d9400417 	ldw	r5,16(sp)
   14420:	d9800517 	ldw	r6,20(sp)
   14424:	8009883a 	mov	r4,r16
   14428:	dc400015 	stw	r17,0(sp)
   1442c:	100f883a 	mov	r7,r2
   14430:	903ee83a 	callr	r18
   14434:	00ffffc4 	movi	r3,-1
   14438:	10c0031e 	bne	r2,r3,14448 <_wcrtomb_r+0x64>
   1443c:	88000015 	stw	zero,0(r17)
   14440:	00c02284 	movi	r3,138
   14444:	80c00015 	stw	r3,0(r16)
   14448:	dfc00917 	ldw	ra,36(sp)
   1444c:	dc800817 	ldw	r18,32(sp)
   14450:	dc400717 	ldw	r17,28(sp)
   14454:	dc000617 	ldw	r16,24(sp)
   14458:	dec00a04 	addi	sp,sp,40
   1445c:	f800283a 	ret
   14460:	000fb100 	call	fb10 <__locale_charset>
   14464:	8009883a 	mov	r4,r16
   14468:	dc400015 	stw	r17,0(sp)
   1446c:	d9400104 	addi	r5,sp,4
   14470:	000d883a 	mov	r6,zero
   14474:	100f883a 	mov	r7,r2
   14478:	903ee83a 	callr	r18
   1447c:	003fed06 	br	14434 <__alt_mem_descriptor_memory+0xdefd4434>

00014480 <wcrtomb>:
   14480:	defff504 	addi	sp,sp,-44
   14484:	dc400515 	stw	r17,20(sp)
   14488:	dc000415 	stw	r16,16(sp)
   1448c:	dfc00a15 	stw	ra,40(sp)
   14490:	dd400915 	stw	r21,36(sp)
   14494:	dd000815 	stw	r20,32(sp)
   14498:	dcc00715 	stw	r19,28(sp)
   1449c:	dc800615 	stw	r18,24(sp)
   144a0:	2021883a 	mov	r16,r4
   144a4:	3023883a 	mov	r17,r6
   144a8:	20001d26 	beq	r4,zero,14520 <wcrtomb+0xa0>
   144ac:	04800174 	movhi	r18,5
   144b0:	94872d04 	addi	r18,r18,7348
   144b4:	00800174 	movhi	r2,5
   144b8:	95400017 	ldw	r21,0(r18)
   144bc:	10873104 	addi	r2,r2,7364
   144c0:	15000017 	ldw	r20,0(r2)
   144c4:	2827883a 	mov	r19,r5
   144c8:	000fb100 	call	fb10 <__locale_charset>
   144cc:	a809883a 	mov	r4,r21
   144d0:	dc400015 	stw	r17,0(sp)
   144d4:	800b883a 	mov	r5,r16
   144d8:	980d883a 	mov	r6,r19
   144dc:	100f883a 	mov	r7,r2
   144e0:	a03ee83a 	callr	r20
   144e4:	00ffffc4 	movi	r3,-1
   144e8:	10c0041e 	bne	r2,r3,144fc <wcrtomb+0x7c>
   144ec:	90c00017 	ldw	r3,0(r18)
   144f0:	01002284 	movi	r4,138
   144f4:	88000015 	stw	zero,0(r17)
   144f8:	19000015 	stw	r4,0(r3)
   144fc:	dfc00a17 	ldw	ra,40(sp)
   14500:	dd400917 	ldw	r21,36(sp)
   14504:	dd000817 	ldw	r20,32(sp)
   14508:	dcc00717 	ldw	r19,28(sp)
   1450c:	dc800617 	ldw	r18,24(sp)
   14510:	dc400517 	ldw	r17,20(sp)
   14514:	dc000417 	ldw	r16,16(sp)
   14518:	dec00b04 	addi	sp,sp,44
   1451c:	f800283a 	ret
   14520:	04800174 	movhi	r18,5
   14524:	94872d04 	addi	r18,r18,7348
   14528:	00800174 	movhi	r2,5
   1452c:	94c00017 	ldw	r19,0(r18)
   14530:	10873104 	addi	r2,r2,7364
   14534:	14000017 	ldw	r16,0(r2)
   14538:	000fb100 	call	fb10 <__locale_charset>
   1453c:	9809883a 	mov	r4,r19
   14540:	dc400015 	stw	r17,0(sp)
   14544:	d9400104 	addi	r5,sp,4
   14548:	000d883a 	mov	r6,zero
   1454c:	100f883a 	mov	r7,r2
   14550:	803ee83a 	callr	r16
   14554:	003fe306 	br	144e4 <__alt_mem_descriptor_memory+0xdefd44e4>

00014558 <__ascii_wctomb>:
   14558:	28000526 	beq	r5,zero,14570 <__ascii_wctomb+0x18>
   1455c:	00803fc4 	movi	r2,255
   14560:	11800536 	bltu	r2,r6,14578 <__ascii_wctomb+0x20>
   14564:	29800005 	stb	r6,0(r5)
   14568:	00800044 	movi	r2,1
   1456c:	f800283a 	ret
   14570:	0005883a 	mov	r2,zero
   14574:	f800283a 	ret
   14578:	00802284 	movi	r2,138
   1457c:	20800015 	stw	r2,0(r4)
   14580:	00bfffc4 	movi	r2,-1
   14584:	f800283a 	ret

00014588 <_wctomb_r>:
   14588:	00800174 	movhi	r2,5
   1458c:	defff904 	addi	sp,sp,-28
   14590:	10873104 	addi	r2,r2,7364
   14594:	dfc00615 	stw	ra,24(sp)
   14598:	dc400515 	stw	r17,20(sp)
   1459c:	dc000415 	stw	r16,16(sp)
   145a0:	3823883a 	mov	r17,r7
   145a4:	14000017 	ldw	r16,0(r2)
   145a8:	d9000115 	stw	r4,4(sp)
   145ac:	d9400215 	stw	r5,8(sp)
   145b0:	d9800315 	stw	r6,12(sp)
   145b4:	000fb100 	call	fb10 <__locale_charset>
   145b8:	d9000117 	ldw	r4,4(sp)
   145bc:	d9400217 	ldw	r5,8(sp)
   145c0:	d9800317 	ldw	r6,12(sp)
   145c4:	dc400015 	stw	r17,0(sp)
   145c8:	100f883a 	mov	r7,r2
   145cc:	803ee83a 	callr	r16
   145d0:	dfc00617 	ldw	ra,24(sp)
   145d4:	dc400517 	ldw	r17,20(sp)
   145d8:	dc000417 	ldw	r16,16(sp)
   145dc:	dec00704 	addi	sp,sp,28
   145e0:	f800283a 	ret

000145e4 <__udivdi3>:
   145e4:	defff504 	addi	sp,sp,-44
   145e8:	dcc00415 	stw	r19,16(sp)
   145ec:	dc000115 	stw	r16,4(sp)
   145f0:	dfc00a15 	stw	ra,40(sp)
   145f4:	df000915 	stw	fp,36(sp)
   145f8:	ddc00815 	stw	r23,32(sp)
   145fc:	dd800715 	stw	r22,28(sp)
   14600:	dd400615 	stw	r21,24(sp)
   14604:	dd000515 	stw	r20,20(sp)
   14608:	dc800315 	stw	r18,12(sp)
   1460c:	dc400215 	stw	r17,8(sp)
   14610:	2027883a 	mov	r19,r4
   14614:	2821883a 	mov	r16,r5
   14618:	3800421e 	bne	r7,zero,14724 <__udivdi3+0x140>
   1461c:	3025883a 	mov	r18,r6
   14620:	2023883a 	mov	r17,r4
   14624:	2980542e 	bgeu	r5,r6,14778 <__udivdi3+0x194>
   14628:	00bfffd4 	movui	r2,65535
   1462c:	282d883a 	mov	r22,r5
   14630:	1180a836 	bltu	r2,r6,148d4 <__udivdi3+0x2f0>
   14634:	00803fc4 	movi	r2,255
   14638:	1181422e 	bgeu	r2,r6,14b44 <__udivdi3+0x560>
   1463c:	00800204 	movi	r2,8
   14640:	1007883a 	mov	r3,r2
   14644:	3084d83a 	srl	r2,r6,r2
   14648:	01000174 	movhi	r4,5
   1464c:	21361504 	addi	r4,r4,-10156
   14650:	2085883a 	add	r2,r4,r2
   14654:	10800003 	ldbu	r2,0(r2)
   14658:	10c7883a 	add	r3,r2,r3
   1465c:	00800804 	movi	r2,32
   14660:	10c5c83a 	sub	r2,r2,r3
   14664:	10000526 	beq	r2,zero,1467c <__udivdi3+0x98>
   14668:	80a0983a 	sll	r16,r16,r2
   1466c:	98c6d83a 	srl	r3,r19,r3
   14670:	30a4983a 	sll	r18,r6,r2
   14674:	98a2983a 	sll	r17,r19,r2
   14678:	80ecb03a 	or	r22,r16,r3
   1467c:	902ad43a 	srli	r21,r18,16
   14680:	b009883a 	mov	r4,r22
   14684:	953fffcc 	andi	r20,r18,65535
   14688:	a80b883a 	mov	r5,r21
   1468c:	00152580 	call	15258 <__umodsi3>
   14690:	b009883a 	mov	r4,r22
   14694:	a80b883a 	mov	r5,r21
   14698:	1027883a 	mov	r19,r2
   1469c:	00152500 	call	15250 <__udivsi3>
   146a0:	1021883a 	mov	r16,r2
   146a4:	8806d43a 	srli	r3,r17,16
   146a8:	9804943a 	slli	r2,r19,16
   146ac:	8527383a 	mul	r19,r16,r20
   146b0:	10c4b03a 	or	r2,r2,r3
   146b4:	14c0052e 	bgeu	r2,r19,146cc <__udivdi3+0xe8>
   146b8:	1485883a 	add	r2,r2,r18
   146bc:	80ffffc4 	addi	r3,r16,-1
   146c0:	14800136 	bltu	r2,r18,146c8 <__udivdi3+0xe4>
   146c4:	14c13436 	bltu	r2,r19,14b98 <__udivdi3+0x5b4>
   146c8:	1821883a 	mov	r16,r3
   146cc:	14e7c83a 	sub	r19,r2,r19
   146d0:	9809883a 	mov	r4,r19
   146d4:	a80b883a 	mov	r5,r21
   146d8:	00152580 	call	15258 <__umodsi3>
   146dc:	102d883a 	mov	r22,r2
   146e0:	9809883a 	mov	r4,r19
   146e4:	a80b883a 	mov	r5,r21
   146e8:	00152500 	call	15250 <__udivsi3>
   146ec:	b02c943a 	slli	r22,r22,16
   146f0:	1529383a 	mul	r20,r2,r20
   146f4:	8c7fffcc 	andi	r17,r17,65535
   146f8:	b462b03a 	or	r17,r22,r17
   146fc:	8d00052e 	bgeu	r17,r20,14714 <__udivdi3+0x130>
   14700:	8ca3883a 	add	r17,r17,r18
   14704:	10ffffc4 	addi	r3,r2,-1
   14708:	8c80f636 	bltu	r17,r18,14ae4 <__udivdi3+0x500>
   1470c:	8d00f52e 	bgeu	r17,r20,14ae4 <__udivdi3+0x500>
   14710:	10bfff84 	addi	r2,r2,-2
   14714:	8020943a 	slli	r16,r16,16
   14718:	0007883a 	mov	r3,zero
   1471c:	1404b03a 	or	r2,r2,r16
   14720:	00005b06 	br	14890 <__udivdi3+0x2ac>
   14724:	29c05836 	bltu	r5,r7,14888 <__udivdi3+0x2a4>
   14728:	00bfffd4 	movui	r2,65535
   1472c:	11c0642e 	bgeu	r2,r7,148c0 <__udivdi3+0x2dc>
   14730:	00804034 	movhi	r2,256
   14734:	10bfffc4 	addi	r2,r2,-1
   14738:	11c0f32e 	bgeu	r2,r7,14b08 <__udivdi3+0x524>
   1473c:	00c00604 	movi	r3,24
   14740:	180b883a 	mov	r5,r3
   14744:	38c6d83a 	srl	r3,r7,r3
   14748:	00800174 	movhi	r2,5
   1474c:	10b61504 	addi	r2,r2,-10156
   14750:	10c7883a 	add	r3,r2,r3
   14754:	18c00003 	ldbu	r3,0(r3)
   14758:	01000804 	movi	r4,32
   1475c:	1947883a 	add	r3,r3,r5
   14760:	20e5c83a 	sub	r18,r4,r3
   14764:	9000661e 	bne	r18,zero,14900 <__udivdi3+0x31c>
   14768:	3c00f936 	bltu	r7,r16,14b50 <__udivdi3+0x56c>
   1476c:	9985403a 	cmpgeu	r2,r19,r6
   14770:	0007883a 	mov	r3,zero
   14774:	00004606 	br	14890 <__udivdi3+0x2ac>
   14778:	3000041e 	bne	r6,zero,1478c <__udivdi3+0x1a8>
   1477c:	01000044 	movi	r4,1
   14780:	000b883a 	mov	r5,zero
   14784:	00152500 	call	15250 <__udivsi3>
   14788:	1025883a 	mov	r18,r2
   1478c:	00bfffd4 	movui	r2,65535
   14790:	1480562e 	bgeu	r2,r18,148ec <__udivdi3+0x308>
   14794:	00804034 	movhi	r2,256
   14798:	10bfffc4 	addi	r2,r2,-1
   1479c:	1480e32e 	bgeu	r2,r18,14b2c <__udivdi3+0x548>
   147a0:	00800604 	movi	r2,24
   147a4:	1007883a 	mov	r3,r2
   147a8:	9084d83a 	srl	r2,r18,r2
   147ac:	01000174 	movhi	r4,5
   147b0:	21361504 	addi	r4,r4,-10156
   147b4:	2085883a 	add	r2,r4,r2
   147b8:	10800003 	ldbu	r2,0(r2)
   147bc:	10c5883a 	add	r2,r2,r3
   147c0:	00c00804 	movi	r3,32
   147c4:	1887c83a 	sub	r3,r3,r2
   147c8:	1800911e 	bne	r3,zero,14a10 <__udivdi3+0x42c>
   147cc:	9028d43a 	srli	r20,r18,16
   147d0:	84a1c83a 	sub	r16,r16,r18
   147d4:	957fffcc 	andi	r21,r18,65535
   147d8:	00c00044 	movi	r3,1
   147dc:	8009883a 	mov	r4,r16
   147e0:	a00b883a 	mov	r5,r20
   147e4:	d8c00015 	stw	r3,0(sp)
   147e8:	00152580 	call	15258 <__umodsi3>
   147ec:	8009883a 	mov	r4,r16
   147f0:	a00b883a 	mov	r5,r20
   147f4:	1027883a 	mov	r19,r2
   147f8:	00152500 	call	15250 <__udivsi3>
   147fc:	1021883a 	mov	r16,r2
   14800:	880cd43a 	srli	r6,r17,16
   14804:	9804943a 	slli	r2,r19,16
   14808:	8567383a 	mul	r19,r16,r21
   1480c:	d8c00017 	ldw	r3,0(sp)
   14810:	1188b03a 	or	r4,r2,r6
   14814:	24c0052e 	bgeu	r4,r19,1482c <__udivdi3+0x248>
   14818:	2489883a 	add	r4,r4,r18
   1481c:	80bfffc4 	addi	r2,r16,-1
   14820:	24800136 	bltu	r4,r18,14828 <__udivdi3+0x244>
   14824:	24c0d936 	bltu	r4,r19,14b8c <__udivdi3+0x5a8>
   14828:	1021883a 	mov	r16,r2
   1482c:	24e7c83a 	sub	r19,r4,r19
   14830:	9809883a 	mov	r4,r19
   14834:	a00b883a 	mov	r5,r20
   14838:	d8c00015 	stw	r3,0(sp)
   1483c:	00152580 	call	15258 <__umodsi3>
   14840:	102d883a 	mov	r22,r2
   14844:	9809883a 	mov	r4,r19
   14848:	a00b883a 	mov	r5,r20
   1484c:	00152500 	call	15250 <__udivsi3>
   14850:	b02c943a 	slli	r22,r22,16
   14854:	156b383a 	mul	r21,r2,r21
   14858:	8c7fffcc 	andi	r17,r17,65535
   1485c:	b462b03a 	or	r17,r22,r17
   14860:	d8c00017 	ldw	r3,0(sp)
   14864:	8d40052e 	bgeu	r17,r21,1487c <__udivdi3+0x298>
   14868:	8ca3883a 	add	r17,r17,r18
   1486c:	113fffc4 	addi	r4,r2,-1
   14870:	8c809a36 	bltu	r17,r18,14adc <__udivdi3+0x4f8>
   14874:	8d40992e 	bgeu	r17,r21,14adc <__udivdi3+0x4f8>
   14878:	10bfff84 	addi	r2,r2,-2
   1487c:	8020943a 	slli	r16,r16,16
   14880:	1404b03a 	or	r2,r2,r16
   14884:	00000206 	br	14890 <__udivdi3+0x2ac>
   14888:	0007883a 	mov	r3,zero
   1488c:	0005883a 	mov	r2,zero
   14890:	dfc00a17 	ldw	ra,40(sp)
   14894:	df000917 	ldw	fp,36(sp)
   14898:	ddc00817 	ldw	r23,32(sp)
   1489c:	dd800717 	ldw	r22,28(sp)
   148a0:	dd400617 	ldw	r21,24(sp)
   148a4:	dd000517 	ldw	r20,20(sp)
   148a8:	dcc00417 	ldw	r19,16(sp)
   148ac:	dc800317 	ldw	r18,12(sp)
   148b0:	dc400217 	ldw	r17,8(sp)
   148b4:	dc000117 	ldw	r16,4(sp)
   148b8:	dec00b04 	addi	sp,sp,44
   148bc:	f800283a 	ret
   148c0:	00803fc4 	movi	r2,255
   148c4:	11c0932e 	bgeu	r2,r7,14b14 <__udivdi3+0x530>
   148c8:	00c00204 	movi	r3,8
   148cc:	180b883a 	mov	r5,r3
   148d0:	003f9c06 	br	14744 <__alt_mem_descriptor_memory+0xdefd4744>
   148d4:	00804034 	movhi	r2,256
   148d8:	10bfffc4 	addi	r2,r2,-1
   148dc:	1180902e 	bgeu	r2,r6,14b20 <__udivdi3+0x53c>
   148e0:	00800604 	movi	r2,24
   148e4:	1007883a 	mov	r3,r2
   148e8:	003f5606 	br	14644 <__alt_mem_descriptor_memory+0xdefd4644>
   148ec:	00803fc4 	movi	r2,255
   148f0:	1480912e 	bgeu	r2,r18,14b38 <__udivdi3+0x554>
   148f4:	00800204 	movi	r2,8
   148f8:	1007883a 	mov	r3,r2
   148fc:	003faa06 	br	147a8 <__alt_mem_descriptor_memory+0xdefd47a8>
   14900:	30eed83a 	srl	r23,r6,r3
   14904:	3c8e983a 	sll	r7,r7,r18
   14908:	80f8d83a 	srl	fp,r16,r3
   1490c:	98c6d83a 	srl	r3,r19,r3
   14910:	3deeb03a 	or	r23,r7,r23
   14914:	b828d43a 	srli	r20,r23,16
   14918:	84a0983a 	sll	r16,r16,r18
   1491c:	e009883a 	mov	r4,fp
   14920:	a00b883a 	mov	r5,r20
   14924:	80e2b03a 	or	r17,r16,r3
   14928:	34aa983a 	sll	r21,r6,r18
   1492c:	00152580 	call	15258 <__umodsi3>
   14930:	e009883a 	mov	r4,fp
   14934:	a00b883a 	mov	r5,r20
   14938:	102d883a 	mov	r22,r2
   1493c:	00152500 	call	15250 <__udivsi3>
   14940:	1021883a 	mov	r16,r2
   14944:	bf3fffcc 	andi	fp,r23,65535
   14948:	b004943a 	slli	r2,r22,16
   1494c:	8808d43a 	srli	r4,r17,16
   14950:	872d383a 	mul	r22,r16,fp
   14954:	1104b03a 	or	r2,r2,r4
   14958:	1580042e 	bgeu	r2,r22,1496c <__udivdi3+0x388>
   1495c:	15c5883a 	add	r2,r2,r23
   14960:	80ffffc4 	addi	r3,r16,-1
   14964:	15c0812e 	bgeu	r2,r23,14b6c <__udivdi3+0x588>
   14968:	1821883a 	mov	r16,r3
   1496c:	15adc83a 	sub	r22,r2,r22
   14970:	b009883a 	mov	r4,r22
   14974:	a00b883a 	mov	r5,r20
   14978:	00152580 	call	15258 <__umodsi3>
   1497c:	a00b883a 	mov	r5,r20
   14980:	b009883a 	mov	r4,r22
   14984:	d8800015 	stw	r2,0(sp)
   14988:	00152500 	call	15250 <__udivsi3>
   1498c:	d8c00017 	ldw	r3,0(sp)
   14990:	170b383a 	mul	r5,r2,fp
   14994:	8c7fffcc 	andi	r17,r17,65535
   14998:	1806943a 	slli	r3,r3,16
   1499c:	1c46b03a 	or	r3,r3,r17
   149a0:	1940042e 	bgeu	r3,r5,149b4 <__udivdi3+0x3d0>
   149a4:	1dc7883a 	add	r3,r3,r23
   149a8:	113fffc4 	addi	r4,r2,-1
   149ac:	1dc06b2e 	bgeu	r3,r23,14b5c <__udivdi3+0x578>
   149b0:	2005883a 	mov	r2,r4
   149b4:	8020943a 	slli	r16,r16,16
   149b8:	a9ffffcc 	andi	r7,r21,65535
   149bc:	a82ad43a 	srli	r21,r21,16
   149c0:	1404b03a 	or	r2,r2,r16
   149c4:	113fffcc 	andi	r4,r2,65535
   149c8:	100cd43a 	srli	r6,r2,16
   149cc:	21d3383a 	mul	r9,r4,r7
   149d0:	2549383a 	mul	r4,r4,r21
   149d4:	31cf383a 	mul	r7,r6,r7
   149d8:	4810d43a 	srli	r8,r9,16
   149dc:	1947c83a 	sub	r3,r3,r5
   149e0:	3909883a 	add	r4,r7,r4
   149e4:	2209883a 	add	r4,r4,r8
   149e8:	354d383a 	mul	r6,r6,r21
   149ec:	21c0022e 	bgeu	r4,r7,149f8 <__udivdi3+0x414>
   149f0:	01400074 	movhi	r5,1
   149f4:	314d883a 	add	r6,r6,r5
   149f8:	202ad43a 	srli	r21,r4,16
   149fc:	354d883a 	add	r6,r6,r21
   14a00:	19803f36 	bltu	r3,r6,14b00 <__udivdi3+0x51c>
   14a04:	19803926 	beq	r3,r6,14aec <__udivdi3+0x508>
   14a08:	0007883a 	mov	r3,zero
   14a0c:	003fa006 	br	14890 <__alt_mem_descriptor_memory+0xdefd4890>
   14a10:	90e4983a 	sll	r18,r18,r3
   14a14:	80aad83a 	srl	r21,r16,r2
   14a18:	80e0983a 	sll	r16,r16,r3
   14a1c:	9028d43a 	srli	r20,r18,16
   14a20:	9884d83a 	srl	r2,r19,r2
   14a24:	a809883a 	mov	r4,r21
   14a28:	a00b883a 	mov	r5,r20
   14a2c:	80acb03a 	or	r22,r16,r2
   14a30:	98e2983a 	sll	r17,r19,r3
   14a34:	00152580 	call	15258 <__umodsi3>
   14a38:	a809883a 	mov	r4,r21
   14a3c:	a00b883a 	mov	r5,r20
   14a40:	1021883a 	mov	r16,r2
   14a44:	00152500 	call	15250 <__udivsi3>
   14a48:	957fffcc 	andi	r21,r18,65535
   14a4c:	8020943a 	slli	r16,r16,16
   14a50:	b00ad43a 	srli	r5,r22,16
   14a54:	1567383a 	mul	r19,r2,r21
   14a58:	102f883a 	mov	r23,r2
   14a5c:	8148b03a 	or	r4,r16,r5
   14a60:	24c0062e 	bgeu	r4,r19,14a7c <__udivdi3+0x498>
   14a64:	2489883a 	add	r4,r4,r18
   14a68:	10bfffc4 	addi	r2,r2,-1
   14a6c:	24804536 	bltu	r4,r18,14b84 <__udivdi3+0x5a0>
   14a70:	24c0442e 	bgeu	r4,r19,14b84 <__udivdi3+0x5a0>
   14a74:	bdffff84 	addi	r23,r23,-2
   14a78:	2489883a 	add	r4,r4,r18
   14a7c:	24e7c83a 	sub	r19,r4,r19
   14a80:	9809883a 	mov	r4,r19
   14a84:	a00b883a 	mov	r5,r20
   14a88:	00152580 	call	15258 <__umodsi3>
   14a8c:	1021883a 	mov	r16,r2
   14a90:	9809883a 	mov	r4,r19
   14a94:	a00b883a 	mov	r5,r20
   14a98:	00152500 	call	15250 <__udivsi3>
   14a9c:	8020943a 	slli	r16,r16,16
   14aa0:	1007883a 	mov	r3,r2
   14aa4:	1545383a 	mul	r2,r2,r21
   14aa8:	b13fffcc 	andi	r4,r22,65535
   14aac:	8108b03a 	or	r4,r16,r4
   14ab0:	2080062e 	bgeu	r4,r2,14acc <__udivdi3+0x4e8>
   14ab4:	2489883a 	add	r4,r4,r18
   14ab8:	197fffc4 	addi	r5,r3,-1
   14abc:	24802f36 	bltu	r4,r18,14b7c <__udivdi3+0x598>
   14ac0:	20802e2e 	bgeu	r4,r2,14b7c <__udivdi3+0x598>
   14ac4:	18ffff84 	addi	r3,r3,-2
   14ac8:	2489883a 	add	r4,r4,r18
   14acc:	b82e943a 	slli	r23,r23,16
   14ad0:	20a1c83a 	sub	r16,r4,r2
   14ad4:	1dc6b03a 	or	r3,r3,r23
   14ad8:	003f4006 	br	147dc <__alt_mem_descriptor_memory+0xdefd47dc>
   14adc:	2005883a 	mov	r2,r4
   14ae0:	003f6606 	br	1487c <__alt_mem_descriptor_memory+0xdefd487c>
   14ae4:	1805883a 	mov	r2,r3
   14ae8:	003f0a06 	br	14714 <__alt_mem_descriptor_memory+0xdefd4714>
   14aec:	2006943a 	slli	r3,r4,16
   14af0:	9c88983a 	sll	r4,r19,r18
   14af4:	4a7fffcc 	andi	r9,r9,65535
   14af8:	1a47883a 	add	r3,r3,r9
   14afc:	20ffc22e 	bgeu	r4,r3,14a08 <__alt_mem_descriptor_memory+0xdefd4a08>
   14b00:	10bfffc4 	addi	r2,r2,-1
   14b04:	003fc006 	br	14a08 <__alt_mem_descriptor_memory+0xdefd4a08>
   14b08:	00c00404 	movi	r3,16
   14b0c:	180b883a 	mov	r5,r3
   14b10:	003f0c06 	br	14744 <__alt_mem_descriptor_memory+0xdefd4744>
   14b14:	0007883a 	mov	r3,zero
   14b18:	000b883a 	mov	r5,zero
   14b1c:	003f0906 	br	14744 <__alt_mem_descriptor_memory+0xdefd4744>
   14b20:	00800404 	movi	r2,16
   14b24:	1007883a 	mov	r3,r2
   14b28:	003ec606 	br	14644 <__alt_mem_descriptor_memory+0xdefd4644>
   14b2c:	00800404 	movi	r2,16
   14b30:	1007883a 	mov	r3,r2
   14b34:	003f1c06 	br	147a8 <__alt_mem_descriptor_memory+0xdefd47a8>
   14b38:	0005883a 	mov	r2,zero
   14b3c:	0007883a 	mov	r3,zero
   14b40:	003f1906 	br	147a8 <__alt_mem_descriptor_memory+0xdefd47a8>
   14b44:	0005883a 	mov	r2,zero
   14b48:	0007883a 	mov	r3,zero
   14b4c:	003ebd06 	br	14644 <__alt_mem_descriptor_memory+0xdefd4644>
   14b50:	0007883a 	mov	r3,zero
   14b54:	00800044 	movi	r2,1
   14b58:	003f4d06 	br	14890 <__alt_mem_descriptor_memory+0xdefd4890>
   14b5c:	197f942e 	bgeu	r3,r5,149b0 <__alt_mem_descriptor_memory+0xdefd49b0>
   14b60:	10bfff84 	addi	r2,r2,-2
   14b64:	1dc7883a 	add	r3,r3,r23
   14b68:	003f9206 	br	149b4 <__alt_mem_descriptor_memory+0xdefd49b4>
   14b6c:	15bf7e2e 	bgeu	r2,r22,14968 <__alt_mem_descriptor_memory+0xdefd4968>
   14b70:	843fff84 	addi	r16,r16,-2
   14b74:	15c5883a 	add	r2,r2,r23
   14b78:	003f7c06 	br	1496c <__alt_mem_descriptor_memory+0xdefd496c>
   14b7c:	2807883a 	mov	r3,r5
   14b80:	003fd206 	br	14acc <__alt_mem_descriptor_memory+0xdefd4acc>
   14b84:	102f883a 	mov	r23,r2
   14b88:	003fbc06 	br	14a7c <__alt_mem_descriptor_memory+0xdefd4a7c>
   14b8c:	843fff84 	addi	r16,r16,-2
   14b90:	2489883a 	add	r4,r4,r18
   14b94:	003f2506 	br	1482c <__alt_mem_descriptor_memory+0xdefd482c>
   14b98:	843fff84 	addi	r16,r16,-2
   14b9c:	1485883a 	add	r2,r2,r18
   14ba0:	003eca06 	br	146cc <__alt_mem_descriptor_memory+0xdefd46cc>

00014ba4 <__umoddi3>:
   14ba4:	defff404 	addi	sp,sp,-48
   14ba8:	ddc00915 	stw	r23,36(sp)
   14bac:	dc400315 	stw	r17,12(sp)
   14bb0:	dc000215 	stw	r16,8(sp)
   14bb4:	dfc00b15 	stw	ra,44(sp)
   14bb8:	df000a15 	stw	fp,40(sp)
   14bbc:	dd800815 	stw	r22,32(sp)
   14bc0:	dd400715 	stw	r21,28(sp)
   14bc4:	dd000615 	stw	r20,24(sp)
   14bc8:	dcc00515 	stw	r19,20(sp)
   14bcc:	dc800415 	stw	r18,16(sp)
   14bd0:	2021883a 	mov	r16,r4
   14bd4:	2823883a 	mov	r17,r5
   14bd8:	282f883a 	mov	r23,r5
   14bdc:	3800381e 	bne	r7,zero,14cc0 <__umoddi3+0x11c>
   14be0:	3027883a 	mov	r19,r6
   14be4:	2029883a 	mov	r20,r4
   14be8:	29804e2e 	bgeu	r5,r6,14d24 <__umoddi3+0x180>
   14bec:	00bfffd4 	movui	r2,65535
   14bf0:	11809c36 	bltu	r2,r6,14e64 <__umoddi3+0x2c0>
   14bf4:	00803fc4 	movi	r2,255
   14bf8:	11813b2e 	bgeu	r2,r6,150e8 <__umoddi3+0x544>
   14bfc:	01400204 	movi	r5,8
   14c00:	2805883a 	mov	r2,r5
   14c04:	314ad83a 	srl	r5,r6,r5
   14c08:	00c00174 	movhi	r3,5
   14c0c:	18f61504 	addi	r3,r3,-10156
   14c10:	194b883a 	add	r5,r3,r5
   14c14:	29000003 	ldbu	r4,0(r5)
   14c18:	2089883a 	add	r4,r4,r2
   14c1c:	00800804 	movi	r2,32
   14c20:	1105c83a 	sub	r2,r2,r4
   14c24:	1000ec26 	beq	r2,zero,14fd8 <__umoddi3+0x434>
   14c28:	88a2983a 	sll	r17,r17,r2
   14c2c:	8108d83a 	srl	r4,r16,r4
   14c30:	30a6983a 	sll	r19,r6,r2
   14c34:	80a8983a 	sll	r20,r16,r2
   14c38:	1025883a 	mov	r18,r2
   14c3c:	892eb03a 	or	r23,r17,r4
   14c40:	982cd43a 	srli	r22,r19,16
   14c44:	b809883a 	mov	r4,r23
   14c48:	9d7fffcc 	andi	r21,r19,65535
   14c4c:	b00b883a 	mov	r5,r22
   14c50:	00152580 	call	15258 <__umodsi3>
   14c54:	b809883a 	mov	r4,r23
   14c58:	b00b883a 	mov	r5,r22
   14c5c:	1021883a 	mov	r16,r2
   14c60:	00152500 	call	15250 <__udivsi3>
   14c64:	8020943a 	slli	r16,r16,16
   14c68:	a00cd43a 	srli	r6,r20,16
   14c6c:	1545383a 	mul	r2,r2,r21
   14c70:	8188b03a 	or	r4,r16,r6
   14c74:	2080042e 	bgeu	r4,r2,14c88 <__umoddi3+0xe4>
   14c78:	24c9883a 	add	r4,r4,r19
   14c7c:	24c00236 	bltu	r4,r19,14c88 <__umoddi3+0xe4>
   14c80:	2080012e 	bgeu	r4,r2,14c88 <__umoddi3+0xe4>
   14c84:	24c9883a 	add	r4,r4,r19
   14c88:	20a3c83a 	sub	r17,r4,r2
   14c8c:	8809883a 	mov	r4,r17
   14c90:	b00b883a 	mov	r5,r22
   14c94:	00152580 	call	15258 <__umodsi3>
   14c98:	8809883a 	mov	r4,r17
   14c9c:	b00b883a 	mov	r5,r22
   14ca0:	1021883a 	mov	r16,r2
   14ca4:	00152500 	call	15250 <__udivsi3>
   14ca8:	8006943a 	slli	r3,r16,16
   14cac:	1545383a 	mul	r2,r2,r21
   14cb0:	a13fffcc 	andi	r4,r20,65535
   14cb4:	1906b03a 	or	r3,r3,r4
   14cb8:	1880532e 	bgeu	r3,r2,14e08 <__umoddi3+0x264>
   14cbc:	00004e06 	br	14df8 <__umoddi3+0x254>
   14cc0:	29c05536 	bltu	r5,r7,14e18 <__umoddi3+0x274>
   14cc4:	00bfffd4 	movui	r2,65535
   14cc8:	11c0612e 	bgeu	r2,r7,14e50 <__umoddi3+0x2ac>
   14ccc:	00804034 	movhi	r2,256
   14cd0:	10bfffc4 	addi	r2,r2,-1
   14cd4:	11c0f82e 	bgeu	r2,r7,150b8 <__umoddi3+0x514>
   14cd8:	01400604 	movi	r5,24
   14cdc:	282b883a 	mov	r21,r5
   14ce0:	394ad83a 	srl	r5,r7,r5
   14ce4:	00c00174 	movhi	r3,5
   14ce8:	18f61504 	addi	r3,r3,-10156
   14cec:	194b883a 	add	r5,r3,r5
   14cf0:	28800003 	ldbu	r2,0(r5)
   14cf4:	00c00804 	movi	r3,32
   14cf8:	156b883a 	add	r21,r2,r21
   14cfc:	1d69c83a 	sub	r20,r3,r21
   14d00:	a000631e 	bne	r20,zero,14e90 <__umoddi3+0x2ec>
   14d04:	3c400136 	bltu	r7,r17,14d0c <__umoddi3+0x168>
   14d08:	81810436 	bltu	r16,r6,1511c <__umoddi3+0x578>
   14d0c:	8185c83a 	sub	r2,r16,r6
   14d10:	89e3c83a 	sub	r17,r17,r7
   14d14:	8087803a 	cmpltu	r3,r16,r2
   14d18:	88efc83a 	sub	r23,r17,r3
   14d1c:	b807883a 	mov	r3,r23
   14d20:	00003f06 	br	14e20 <__umoddi3+0x27c>
   14d24:	3000041e 	bne	r6,zero,14d38 <__umoddi3+0x194>
   14d28:	01000044 	movi	r4,1
   14d2c:	000b883a 	mov	r5,zero
   14d30:	00152500 	call	15250 <__udivsi3>
   14d34:	1027883a 	mov	r19,r2
   14d38:	00bfffd4 	movui	r2,65535
   14d3c:	14c04f2e 	bgeu	r2,r19,14e7c <__umoddi3+0x2d8>
   14d40:	00804034 	movhi	r2,256
   14d44:	10bfffc4 	addi	r2,r2,-1
   14d48:	14c0e42e 	bgeu	r2,r19,150dc <__umoddi3+0x538>
   14d4c:	00800604 	movi	r2,24
   14d50:	1007883a 	mov	r3,r2
   14d54:	9884d83a 	srl	r2,r19,r2
   14d58:	01000174 	movhi	r4,5
   14d5c:	21361504 	addi	r4,r4,-10156
   14d60:	2085883a 	add	r2,r4,r2
   14d64:	11000003 	ldbu	r4,0(r2)
   14d68:	00800804 	movi	r2,32
   14d6c:	20c7883a 	add	r3,r4,r3
   14d70:	10c5c83a 	sub	r2,r2,r3
   14d74:	10009a1e 	bne	r2,zero,14fe0 <__umoddi3+0x43c>
   14d78:	982cd43a 	srli	r22,r19,16
   14d7c:	8ce3c83a 	sub	r17,r17,r19
   14d80:	9c3fffcc 	andi	r16,r19,65535
   14d84:	0025883a 	mov	r18,zero
   14d88:	8809883a 	mov	r4,r17
   14d8c:	b00b883a 	mov	r5,r22
   14d90:	00152580 	call	15258 <__umodsi3>
   14d94:	8809883a 	mov	r4,r17
   14d98:	b00b883a 	mov	r5,r22
   14d9c:	102b883a 	mov	r21,r2
   14da0:	00152500 	call	15250 <__udivsi3>
   14da4:	a806943a 	slli	r3,r21,16
   14da8:	a008d43a 	srli	r4,r20,16
   14dac:	1405383a 	mul	r2,r2,r16
   14db0:	190cb03a 	or	r6,r3,r4
   14db4:	3080032e 	bgeu	r6,r2,14dc4 <__umoddi3+0x220>
   14db8:	34cd883a 	add	r6,r6,r19
   14dbc:	34c00136 	bltu	r6,r19,14dc4 <__umoddi3+0x220>
   14dc0:	3080d436 	bltu	r6,r2,15114 <__umoddi3+0x570>
   14dc4:	30abc83a 	sub	r21,r6,r2
   14dc8:	a809883a 	mov	r4,r21
   14dcc:	b00b883a 	mov	r5,r22
   14dd0:	00152580 	call	15258 <__umodsi3>
   14dd4:	1023883a 	mov	r17,r2
   14dd8:	a809883a 	mov	r4,r21
   14ddc:	b00b883a 	mov	r5,r22
   14de0:	00152500 	call	15250 <__udivsi3>
   14de4:	8822943a 	slli	r17,r17,16
   14de8:	1405383a 	mul	r2,r2,r16
   14dec:	a13fffcc 	andi	r4,r20,65535
   14df0:	8906b03a 	or	r3,r17,r4
   14df4:	1880042e 	bgeu	r3,r2,14e08 <__umoddi3+0x264>
   14df8:	1cc7883a 	add	r3,r3,r19
   14dfc:	1cc00236 	bltu	r3,r19,14e08 <__umoddi3+0x264>
   14e00:	1880012e 	bgeu	r3,r2,14e08 <__umoddi3+0x264>
   14e04:	1cc7883a 	add	r3,r3,r19
   14e08:	1887c83a 	sub	r3,r3,r2
   14e0c:	1c84d83a 	srl	r2,r3,r18
   14e10:	0007883a 	mov	r3,zero
   14e14:	00000206 	br	14e20 <__umoddi3+0x27c>
   14e18:	2005883a 	mov	r2,r4
   14e1c:	2807883a 	mov	r3,r5
   14e20:	dfc00b17 	ldw	ra,44(sp)
   14e24:	df000a17 	ldw	fp,40(sp)
   14e28:	ddc00917 	ldw	r23,36(sp)
   14e2c:	dd800817 	ldw	r22,32(sp)
   14e30:	dd400717 	ldw	r21,28(sp)
   14e34:	dd000617 	ldw	r20,24(sp)
   14e38:	dcc00517 	ldw	r19,20(sp)
   14e3c:	dc800417 	ldw	r18,16(sp)
   14e40:	dc400317 	ldw	r17,12(sp)
   14e44:	dc000217 	ldw	r16,8(sp)
   14e48:	dec00c04 	addi	sp,sp,48
   14e4c:	f800283a 	ret
   14e50:	00803fc4 	movi	r2,255
   14e54:	11c0952e 	bgeu	r2,r7,150ac <__umoddi3+0x508>
   14e58:	01400204 	movi	r5,8
   14e5c:	282b883a 	mov	r21,r5
   14e60:	003f9f06 	br	14ce0 <__alt_mem_descriptor_memory+0xdefd4ce0>
   14e64:	00804034 	movhi	r2,256
   14e68:	10bfffc4 	addi	r2,r2,-1
   14e6c:	1180952e 	bgeu	r2,r6,150c4 <__umoddi3+0x520>
   14e70:	01400604 	movi	r5,24
   14e74:	2805883a 	mov	r2,r5
   14e78:	003f6206 	br	14c04 <__alt_mem_descriptor_memory+0xdefd4c04>
   14e7c:	00803fc4 	movi	r2,255
   14e80:	14c0932e 	bgeu	r2,r19,150d0 <__umoddi3+0x52c>
   14e84:	00800204 	movi	r2,8
   14e88:	1007883a 	mov	r3,r2
   14e8c:	003fb106 	br	14d54 <__alt_mem_descriptor_memory+0xdefd4d54>
   14e90:	3548d83a 	srl	r4,r6,r21
   14e94:	3d0e983a 	sll	r7,r7,r20
   14e98:	8d10983a 	sll	r8,r17,r20
   14e9c:	8d6cd83a 	srl	r22,r17,r21
   14ea0:	3922b03a 	or	r17,r7,r4
   14ea4:	882ed43a 	srli	r23,r17,16
   14ea8:	8564d83a 	srl	r18,r16,r21
   14eac:	b009883a 	mov	r4,r22
   14eb0:	b80b883a 	mov	r5,r23
   14eb4:	44a4b03a 	or	r18,r8,r18
   14eb8:	3526983a 	sll	r19,r6,r20
   14ebc:	00152580 	call	15258 <__umodsi3>
   14ec0:	b009883a 	mov	r4,r22
   14ec4:	b80b883a 	mov	r5,r23
   14ec8:	1039883a 	mov	fp,r2
   14ecc:	00152500 	call	15250 <__udivsi3>
   14ed0:	102d883a 	mov	r22,r2
   14ed4:	8a3fffcc 	andi	r8,r17,65535
   14ed8:	e004943a 	slli	r2,fp,16
   14edc:	900cd43a 	srli	r6,r18,16
   14ee0:	b239383a 	mul	fp,r22,r8
   14ee4:	8520983a 	sll	r16,r16,r20
   14ee8:	118ab03a 	or	r5,r2,r6
   14eec:	2f00042e 	bgeu	r5,fp,14f00 <__umoddi3+0x35c>
   14ef0:	2c4b883a 	add	r5,r5,r17
   14ef4:	b0bfffc4 	addi	r2,r22,-1
   14ef8:	2c40822e 	bgeu	r5,r17,15104 <__umoddi3+0x560>
   14efc:	102d883a 	mov	r22,r2
   14f00:	2f39c83a 	sub	fp,r5,fp
   14f04:	e009883a 	mov	r4,fp
   14f08:	b80b883a 	mov	r5,r23
   14f0c:	da000115 	stw	r8,4(sp)
   14f10:	00152580 	call	15258 <__umodsi3>
   14f14:	e009883a 	mov	r4,fp
   14f18:	b80b883a 	mov	r5,r23
   14f1c:	d8800015 	stw	r2,0(sp)
   14f20:	00152500 	call	15250 <__udivsi3>
   14f24:	d9800017 	ldw	r6,0(sp)
   14f28:	da000117 	ldw	r8,4(sp)
   14f2c:	94bfffcc 	andi	r18,r18,65535
   14f30:	300c943a 	slli	r6,r6,16
   14f34:	1209383a 	mul	r4,r2,r8
   14f38:	3490b03a 	or	r8,r6,r18
   14f3c:	4100042e 	bgeu	r8,r4,14f50 <__umoddi3+0x3ac>
   14f40:	4451883a 	add	r8,r8,r17
   14f44:	10ffffc4 	addi	r3,r2,-1
   14f48:	44406a2e 	bgeu	r8,r17,150f4 <__umoddi3+0x550>
   14f4c:	1805883a 	mov	r2,r3
   14f50:	b012943a 	slli	r9,r22,16
   14f54:	9abfffcc 	andi	r10,r19,65535
   14f58:	980ed43a 	srli	r7,r19,16
   14f5c:	124ab03a 	or	r5,r2,r9
   14f60:	2a7fffcc 	andi	r9,r5,65535
   14f64:	280ad43a 	srli	r5,r5,16
   14f68:	4a8d383a 	mul	r6,r9,r10
   14f6c:	49d3383a 	mul	r9,r9,r7
   14f70:	2a95383a 	mul	r10,r5,r10
   14f74:	3004d43a 	srli	r2,r6,16
   14f78:	4111c83a 	sub	r8,r8,r4
   14f7c:	5253883a 	add	r9,r10,r9
   14f80:	4893883a 	add	r9,r9,r2
   14f84:	29cb383a 	mul	r5,r5,r7
   14f88:	4a80022e 	bgeu	r9,r10,14f94 <__umoddi3+0x3f0>
   14f8c:	00800074 	movhi	r2,1
   14f90:	288b883a 	add	r5,r5,r2
   14f94:	4808d43a 	srli	r4,r9,16
   14f98:	4812943a 	slli	r9,r9,16
   14f9c:	31bfffcc 	andi	r6,r6,65535
   14fa0:	290b883a 	add	r5,r5,r4
   14fa4:	498d883a 	add	r6,r9,r6
   14fa8:	41403a36 	bltu	r8,r5,15094 <__umoddi3+0x4f0>
   14fac:	41405d26 	beq	r8,r5,15124 <__umoddi3+0x580>
   14fb0:	4149c83a 	sub	r4,r8,r5
   14fb4:	300f883a 	mov	r7,r6
   14fb8:	81cfc83a 	sub	r7,r16,r7
   14fbc:	81c7803a 	cmpltu	r3,r16,r7
   14fc0:	20c7c83a 	sub	r3,r4,r3
   14fc4:	1d44983a 	sll	r2,r3,r21
   14fc8:	3d0ed83a 	srl	r7,r7,r20
   14fcc:	1d06d83a 	srl	r3,r3,r20
   14fd0:	11c4b03a 	or	r2,r2,r7
   14fd4:	003f9206 	br	14e20 <__alt_mem_descriptor_memory+0xdefd4e20>
   14fd8:	0025883a 	mov	r18,zero
   14fdc:	003f1806 	br	14c40 <__alt_mem_descriptor_memory+0xdefd4c40>
   14fe0:	98a6983a 	sll	r19,r19,r2
   14fe4:	88e8d83a 	srl	r20,r17,r3
   14fe8:	80c6d83a 	srl	r3,r16,r3
   14fec:	982cd43a 	srli	r22,r19,16
   14ff0:	88a2983a 	sll	r17,r17,r2
   14ff4:	a009883a 	mov	r4,r20
   14ff8:	b00b883a 	mov	r5,r22
   14ffc:	88eab03a 	or	r21,r17,r3
   15000:	1025883a 	mov	r18,r2
   15004:	00152580 	call	15258 <__umodsi3>
   15008:	a009883a 	mov	r4,r20
   1500c:	b00b883a 	mov	r5,r22
   15010:	1023883a 	mov	r17,r2
   15014:	00152500 	call	15250 <__udivsi3>
   15018:	9f3fffcc 	andi	fp,r19,65535
   1501c:	8822943a 	slli	r17,r17,16
   15020:	a80ad43a 	srli	r5,r21,16
   15024:	1705383a 	mul	r2,r2,fp
   15028:	84a8983a 	sll	r20,r16,r18
   1502c:	8948b03a 	or	r4,r17,r5
   15030:	2080042e 	bgeu	r4,r2,15044 <__umoddi3+0x4a0>
   15034:	24c9883a 	add	r4,r4,r19
   15038:	24c00236 	bltu	r4,r19,15044 <__umoddi3+0x4a0>
   1503c:	2080012e 	bgeu	r4,r2,15044 <__umoddi3+0x4a0>
   15040:	24c9883a 	add	r4,r4,r19
   15044:	20afc83a 	sub	r23,r4,r2
   15048:	b809883a 	mov	r4,r23
   1504c:	b00b883a 	mov	r5,r22
   15050:	00152580 	call	15258 <__umodsi3>
   15054:	1023883a 	mov	r17,r2
   15058:	b809883a 	mov	r4,r23
   1505c:	b00b883a 	mov	r5,r22
   15060:	00152500 	call	15250 <__udivsi3>
   15064:	8822943a 	slli	r17,r17,16
   15068:	1705383a 	mul	r2,r2,fp
   1506c:	a93fffcc 	andi	r4,r21,65535
   15070:	8908b03a 	or	r4,r17,r4
   15074:	2080042e 	bgeu	r4,r2,15088 <__umoddi3+0x4e4>
   15078:	24c9883a 	add	r4,r4,r19
   1507c:	24c00236 	bltu	r4,r19,15088 <__umoddi3+0x4e4>
   15080:	2080012e 	bgeu	r4,r2,15088 <__umoddi3+0x4e4>
   15084:	24c9883a 	add	r4,r4,r19
   15088:	20a3c83a 	sub	r17,r4,r2
   1508c:	e021883a 	mov	r16,fp
   15090:	003f3d06 	br	14d88 <__alt_mem_descriptor_memory+0xdefd4d88>
   15094:	34cfc83a 	sub	r7,r6,r19
   15098:	2c4bc83a 	sub	r5,r5,r17
   1509c:	31cd803a 	cmpltu	r6,r6,r7
   150a0:	298dc83a 	sub	r6,r5,r6
   150a4:	4189c83a 	sub	r4,r8,r6
   150a8:	003fc306 	br	14fb8 <__alt_mem_descriptor_memory+0xdefd4fb8>
   150ac:	000b883a 	mov	r5,zero
   150b0:	002b883a 	mov	r21,zero
   150b4:	003f0a06 	br	14ce0 <__alt_mem_descriptor_memory+0xdefd4ce0>
   150b8:	01400404 	movi	r5,16
   150bc:	282b883a 	mov	r21,r5
   150c0:	003f0706 	br	14ce0 <__alt_mem_descriptor_memory+0xdefd4ce0>
   150c4:	01400404 	movi	r5,16
   150c8:	2805883a 	mov	r2,r5
   150cc:	003ecd06 	br	14c04 <__alt_mem_descriptor_memory+0xdefd4c04>
   150d0:	0005883a 	mov	r2,zero
   150d4:	0007883a 	mov	r3,zero
   150d8:	003f1e06 	br	14d54 <__alt_mem_descriptor_memory+0xdefd4d54>
   150dc:	00800404 	movi	r2,16
   150e0:	1007883a 	mov	r3,r2
   150e4:	003f1b06 	br	14d54 <__alt_mem_descriptor_memory+0xdefd4d54>
   150e8:	000b883a 	mov	r5,zero
   150ec:	0005883a 	mov	r2,zero
   150f0:	003ec406 	br	14c04 <__alt_mem_descriptor_memory+0xdefd4c04>
   150f4:	413f952e 	bgeu	r8,r4,14f4c <__alt_mem_descriptor_memory+0xdefd4f4c>
   150f8:	10bfff84 	addi	r2,r2,-2
   150fc:	4451883a 	add	r8,r8,r17
   15100:	003f9306 	br	14f50 <__alt_mem_descriptor_memory+0xdefd4f50>
   15104:	2f3f7d2e 	bgeu	r5,fp,14efc <__alt_mem_descriptor_memory+0xdefd4efc>
   15108:	b5bfff84 	addi	r22,r22,-2
   1510c:	2c4b883a 	add	r5,r5,r17
   15110:	003f7b06 	br	14f00 <__alt_mem_descriptor_memory+0xdefd4f00>
   15114:	34cd883a 	add	r6,r6,r19
   15118:	003f2a06 	br	14dc4 <__alt_mem_descriptor_memory+0xdefd4dc4>
   1511c:	8005883a 	mov	r2,r16
   15120:	003efe06 	br	14d1c <__alt_mem_descriptor_memory+0xdefd4d1c>
   15124:	81bfdb36 	bltu	r16,r6,15094 <__alt_mem_descriptor_memory+0xdefd5094>
   15128:	300f883a 	mov	r7,r6
   1512c:	0009883a 	mov	r4,zero
   15130:	003fa106 	br	14fb8 <__alt_mem_descriptor_memory+0xdefd4fb8>

00015134 <udivmodsi4>:
   15134:	2900182e 	bgeu	r5,r4,15198 <udivmodsi4+0x64>
   15138:	28001716 	blt	r5,zero,15198 <udivmodsi4+0x64>
   1513c:	00800804 	movi	r2,32
   15140:	00c00044 	movi	r3,1
   15144:	00000206 	br	15150 <udivmodsi4+0x1c>
   15148:	10001126 	beq	r2,zero,15190 <udivmodsi4+0x5c>
   1514c:	28000516 	blt	r5,zero,15164 <udivmodsi4+0x30>
   15150:	294b883a 	add	r5,r5,r5
   15154:	10bfffc4 	addi	r2,r2,-1
   15158:	18c7883a 	add	r3,r3,r3
   1515c:	293ffa36 	bltu	r5,r4,15148 <__alt_mem_descriptor_memory+0xdefd5148>
   15160:	18000b26 	beq	r3,zero,15190 <udivmodsi4+0x5c>
   15164:	0005883a 	mov	r2,zero
   15168:	21400236 	bltu	r4,r5,15174 <udivmodsi4+0x40>
   1516c:	2149c83a 	sub	r4,r4,r5
   15170:	10c4b03a 	or	r2,r2,r3
   15174:	1806d07a 	srli	r3,r3,1
   15178:	280ad07a 	srli	r5,r5,1
   1517c:	183ffa1e 	bne	r3,zero,15168 <__alt_mem_descriptor_memory+0xdefd5168>
   15180:	3000011e 	bne	r6,zero,15188 <udivmodsi4+0x54>
   15184:	f800283a 	ret
   15188:	2005883a 	mov	r2,r4
   1518c:	f800283a 	ret
   15190:	0005883a 	mov	r2,zero
   15194:	003ffa06 	br	15180 <__alt_mem_descriptor_memory+0xdefd5180>
   15198:	00c00044 	movi	r3,1
   1519c:	003ff106 	br	15164 <__alt_mem_descriptor_memory+0xdefd5164>

000151a0 <__divsi3>:
   151a0:	defffe04 	addi	sp,sp,-8
   151a4:	dfc00115 	stw	ra,4(sp)
   151a8:	dc000015 	stw	r16,0(sp)
   151ac:	20000b16 	blt	r4,zero,151dc <__divsi3+0x3c>
   151b0:	0021883a 	mov	r16,zero
   151b4:	28000c16 	blt	r5,zero,151e8 <__divsi3+0x48>
   151b8:	000d883a 	mov	r6,zero
   151bc:	00151340 	call	15134 <udivmodsi4>
   151c0:	0407c83a 	sub	r3,zero,r16
   151c4:	1884f03a 	xor	r2,r3,r2
   151c8:	1405883a 	add	r2,r2,r16
   151cc:	dfc00117 	ldw	ra,4(sp)
   151d0:	dc000017 	ldw	r16,0(sp)
   151d4:	dec00204 	addi	sp,sp,8
   151d8:	f800283a 	ret
   151dc:	0109c83a 	sub	r4,zero,r4
   151e0:	04000044 	movi	r16,1
   151e4:	283ff40e 	bge	r5,zero,151b8 <__alt_mem_descriptor_memory+0xdefd51b8>
   151e8:	014bc83a 	sub	r5,zero,r5
   151ec:	8400005c 	xori	r16,r16,1
   151f0:	003ff106 	br	151b8 <__alt_mem_descriptor_memory+0xdefd51b8>

000151f4 <__modsi3>:
   151f4:	defffd04 	addi	sp,sp,-12
   151f8:	dfc00215 	stw	ra,8(sp)
   151fc:	dc400115 	stw	r17,4(sp)
   15200:	dc000015 	stw	r16,0(sp)
   15204:	20000c16 	blt	r4,zero,15238 <__modsi3+0x44>
   15208:	0023883a 	mov	r17,zero
   1520c:	0021883a 	mov	r16,zero
   15210:	28000d16 	blt	r5,zero,15248 <__modsi3+0x54>
   15214:	01800044 	movi	r6,1
   15218:	00151340 	call	15134 <udivmodsi4>
   1521c:	1404f03a 	xor	r2,r2,r16
   15220:	8885883a 	add	r2,r17,r2
   15224:	dfc00217 	ldw	ra,8(sp)
   15228:	dc400117 	ldw	r17,4(sp)
   1522c:	dc000017 	ldw	r16,0(sp)
   15230:	dec00304 	addi	sp,sp,12
   15234:	f800283a 	ret
   15238:	0109c83a 	sub	r4,zero,r4
   1523c:	04400044 	movi	r17,1
   15240:	043fffc4 	movi	r16,-1
   15244:	283ff30e 	bge	r5,zero,15214 <__alt_mem_descriptor_memory+0xdefd5214>
   15248:	014bc83a 	sub	r5,zero,r5
   1524c:	003ff106 	br	15214 <__alt_mem_descriptor_memory+0xdefd5214>

00015250 <__udivsi3>:
   15250:	000d883a 	mov	r6,zero
   15254:	00151341 	jmpi	15134 <udivmodsi4>

00015258 <__umodsi3>:
   15258:	01800044 	movi	r6,1
   1525c:	00151341 	jmpi	15134 <udivmodsi4>

00015260 <__adddf3>:
   15260:	02000434 	movhi	r8,16
   15264:	423fffc4 	addi	r8,r8,-1
   15268:	defffb04 	addi	sp,sp,-20
   1526c:	2a12703a 	and	r9,r5,r8
   15270:	2806d7fa 	srli	r3,r5,31
   15274:	3a10703a 	and	r8,r7,r8
   15278:	3804d53a 	srli	r2,r7,20
   1527c:	3014d77a 	srli	r10,r6,29
   15280:	dc000015 	stw	r16,0(sp)
   15284:	481290fa 	slli	r9,r9,3
   15288:	2820d53a 	srli	r16,r5,20
   1528c:	401090fa 	slli	r8,r8,3
   15290:	200ad77a 	srli	r5,r4,29
   15294:	380ed7fa 	srli	r7,r7,31
   15298:	dc800215 	stw	r18,8(sp)
   1529c:	dc400115 	stw	r17,4(sp)
   152a0:	dfc00415 	stw	ra,16(sp)
   152a4:	dcc00315 	stw	r19,12(sp)
   152a8:	1c803fcc 	andi	r18,r3,255
   152ac:	8401ffcc 	andi	r16,r16,2047
   152b0:	494ab03a 	or	r5,r9,r5
   152b4:	202290fa 	slli	r17,r4,3
   152b8:	1081ffcc 	andi	r2,r2,2047
   152bc:	4290b03a 	or	r8,r8,r10
   152c0:	300c90fa 	slli	r6,r6,3
   152c4:	91c07026 	beq	r18,r7,15488 <__adddf3+0x228>
   152c8:	8087c83a 	sub	r3,r16,r2
   152cc:	00c0b30e 	bge	zero,r3,1559c <__adddf3+0x33c>
   152d0:	10002a1e 	bne	r2,zero,1537c <__adddf3+0x11c>
   152d4:	4184b03a 	or	r2,r8,r6
   152d8:	1000991e 	bne	r2,zero,15540 <__adddf3+0x2e0>
   152dc:	888001cc 	andi	r2,r17,7
   152e0:	10005b26 	beq	r2,zero,15450 <__adddf3+0x1f0>
   152e4:	88c003cc 	andi	r3,r17,15
   152e8:	00800104 	movi	r2,4
   152ec:	18805826 	beq	r3,r2,15450 <__adddf3+0x1f0>
   152f0:	89800104 	addi	r6,r17,4
   152f4:	3463803a 	cmpltu	r17,r6,r17
   152f8:	2c4b883a 	add	r5,r5,r17
   152fc:	2880202c 	andhi	r2,r5,128
   15300:	9007883a 	mov	r3,r18
   15304:	3023883a 	mov	r17,r6
   15308:	10005426 	beq	r2,zero,1545c <__adddf3+0x1fc>
   1530c:	84000044 	addi	r16,r16,1
   15310:	0081ffc4 	movi	r2,2047
   15314:	8080c126 	beq	r16,r2,1561c <__adddf3+0x3bc>
   15318:	013fe034 	movhi	r4,65408
   1531c:	213fffc4 	addi	r4,r4,-1
   15320:	290a703a 	and	r5,r5,r4
   15324:	2804977a 	slli	r2,r5,29
   15328:	280a927a 	slli	r5,r5,9
   1532c:	8822d0fa 	srli	r17,r17,3
   15330:	8401ffcc 	andi	r16,r16,2047
   15334:	2808d33a 	srli	r4,r5,12
   15338:	1444b03a 	or	r2,r2,r17
   1533c:	8401ffcc 	andi	r16,r16,2047
   15340:	800a953a 	slli	r5,r16,20
   15344:	18c03fcc 	andi	r3,r3,255
   15348:	04000434 	movhi	r16,16
   1534c:	180697fa 	slli	r3,r3,31
   15350:	843fffc4 	addi	r16,r16,-1
   15354:	2420703a 	and	r16,r4,r16
   15358:	8160b03a 	or	r16,r16,r5
   1535c:	80c6b03a 	or	r3,r16,r3
   15360:	dfc00417 	ldw	ra,16(sp)
   15364:	dcc00317 	ldw	r19,12(sp)
   15368:	dc800217 	ldw	r18,8(sp)
   1536c:	dc400117 	ldw	r17,4(sp)
   15370:	dc000017 	ldw	r16,0(sp)
   15374:	dec00504 	addi	sp,sp,20
   15378:	f800283a 	ret
   1537c:	0081ffc4 	movi	r2,2047
   15380:	80bfd626 	beq	r16,r2,152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15384:	42002034 	orhi	r8,r8,128
   15388:	00800e04 	movi	r2,56
   1538c:	10c0a616 	blt	r2,r3,15628 <__adddf3+0x3c8>
   15390:	008007c4 	movi	r2,31
   15394:	10c0c916 	blt	r2,r3,156bc <__adddf3+0x45c>
   15398:	00800804 	movi	r2,32
   1539c:	10c5c83a 	sub	r2,r2,r3
   153a0:	408e983a 	sll	r7,r8,r2
   153a4:	30c8d83a 	srl	r4,r6,r3
   153a8:	3084983a 	sll	r2,r6,r2
   153ac:	40c6d83a 	srl	r3,r8,r3
   153b0:	390cb03a 	or	r6,r7,r4
   153b4:	1004c03a 	cmpne	r2,r2,zero
   153b8:	308cb03a 	or	r6,r6,r2
   153bc:	898dc83a 	sub	r6,r17,r6
   153c0:	89a3803a 	cmpltu	r17,r17,r6
   153c4:	28cbc83a 	sub	r5,r5,r3
   153c8:	2c4bc83a 	sub	r5,r5,r17
   153cc:	3023883a 	mov	r17,r6
   153d0:	2880202c 	andhi	r2,r5,128
   153d4:	10006d26 	beq	r2,zero,1558c <__adddf3+0x32c>
   153d8:	04c02034 	movhi	r19,128
   153dc:	9cffffc4 	addi	r19,r19,-1
   153e0:	2ce6703a 	and	r19,r5,r19
   153e4:	98007e26 	beq	r19,zero,155e0 <__adddf3+0x380>
   153e8:	9809883a 	mov	r4,r19
   153ec:	00177fc0 	call	177fc <__clzsi2>
   153f0:	10fffe04 	addi	r3,r2,-8
   153f4:	010007c4 	movi	r4,31
   153f8:	20c07f16 	blt	r4,r3,155f8 <__adddf3+0x398>
   153fc:	01400a04 	movi	r5,40
   15400:	2885c83a 	sub	r2,r5,r2
   15404:	888ad83a 	srl	r5,r17,r2
   15408:	98e6983a 	sll	r19,r19,r3
   1540c:	88e2983a 	sll	r17,r17,r3
   15410:	2ce6b03a 	or	r19,r5,r19
   15414:	1c007c16 	blt	r3,r16,15608 <__adddf3+0x3a8>
   15418:	1c21c83a 	sub	r16,r3,r16
   1541c:	81400044 	addi	r5,r16,1
   15420:	00c007c4 	movi	r3,31
   15424:	19409816 	blt	r3,r5,15688 <__adddf3+0x428>
   15428:	1c21c83a 	sub	r16,r3,r16
   1542c:	8c08983a 	sll	r4,r17,r16
   15430:	8946d83a 	srl	r3,r17,r5
   15434:	9c20983a 	sll	r16,r19,r16
   15438:	2008c03a 	cmpne	r4,r4,zero
   1543c:	994ad83a 	srl	r5,r19,r5
   15440:	1c06b03a 	or	r3,r3,r16
   15444:	1922b03a 	or	r17,r3,r4
   15448:	0021883a 	mov	r16,zero
   1544c:	003fa306 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15450:	2880202c 	andhi	r2,r5,128
   15454:	9007883a 	mov	r3,r18
   15458:	103fac1e 	bne	r2,zero,1530c <__alt_mem_descriptor_memory+0xdefd530c>
   1545c:	2804977a 	slli	r2,r5,29
   15460:	8822d0fa 	srli	r17,r17,3
   15464:	0101ffc4 	movi	r4,2047
   15468:	280ad0fa 	srli	r5,r5,3
   1546c:	1444b03a 	or	r2,r2,r17
   15470:	81002c26 	beq	r16,r4,15524 <__adddf3+0x2c4>
   15474:	8120703a 	and	r16,r16,r4
   15478:	01000434 	movhi	r4,16
   1547c:	213fffc4 	addi	r4,r4,-1
   15480:	2908703a 	and	r4,r5,r4
   15484:	003fad06 	br	1533c <__alt_mem_descriptor_memory+0xdefd533c>
   15488:	8089c83a 	sub	r4,r16,r2
   1548c:	01006a0e 	bge	zero,r4,15638 <__adddf3+0x3d8>
   15490:	10003326 	beq	r2,zero,15560 <__adddf3+0x300>
   15494:	0081ffc4 	movi	r2,2047
   15498:	80bf9026 	beq	r16,r2,152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   1549c:	42002034 	orhi	r8,r8,128
   154a0:	00800e04 	movi	r2,56
   154a4:	1100b116 	blt	r2,r4,1576c <__adddf3+0x50c>
   154a8:	008007c4 	movi	r2,31
   154ac:	1100e216 	blt	r2,r4,15838 <__adddf3+0x5d8>
   154b0:	00800804 	movi	r2,32
   154b4:	1105c83a 	sub	r2,r2,r4
   154b8:	4092983a 	sll	r9,r8,r2
   154bc:	310ed83a 	srl	r7,r6,r4
   154c0:	3084983a 	sll	r2,r6,r2
   154c4:	4110d83a 	srl	r8,r8,r4
   154c8:	49ccb03a 	or	r6,r9,r7
   154cc:	1004c03a 	cmpne	r2,r2,zero
   154d0:	308cb03a 	or	r6,r6,r2
   154d4:	344d883a 	add	r6,r6,r17
   154d8:	3463803a 	cmpltu	r17,r6,r17
   154dc:	414b883a 	add	r5,r8,r5
   154e0:	2c4b883a 	add	r5,r5,r17
   154e4:	3023883a 	mov	r17,r6
   154e8:	2880202c 	andhi	r2,r5,128
   154ec:	10002726 	beq	r2,zero,1558c <__adddf3+0x32c>
   154f0:	84000044 	addi	r16,r16,1
   154f4:	0081ffc4 	movi	r2,2047
   154f8:	8080ae26 	beq	r16,r2,157b4 <__adddf3+0x554>
   154fc:	00bfe034 	movhi	r2,65408
   15500:	10bfffc4 	addi	r2,r2,-1
   15504:	288a703a 	and	r5,r5,r2
   15508:	880cd07a 	srli	r6,r17,1
   1550c:	280897fa 	slli	r4,r5,31
   15510:	88c0004c 	andi	r3,r17,1
   15514:	30e2b03a 	or	r17,r6,r3
   15518:	280ad07a 	srli	r5,r5,1
   1551c:	8922b03a 	or	r17,r17,r4
   15520:	003f6e06 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15524:	1148b03a 	or	r4,r2,r5
   15528:	20003c26 	beq	r4,zero,1561c <__adddf3+0x3bc>
   1552c:	29000234 	orhi	r4,r5,8
   15530:	01400434 	movhi	r5,16
   15534:	297fffc4 	addi	r5,r5,-1
   15538:	2148703a 	and	r4,r4,r5
   1553c:	003f7f06 	br	1533c <__alt_mem_descriptor_memory+0xdefd533c>
   15540:	18ffffc4 	addi	r3,r3,-1
   15544:	18004d1e 	bne	r3,zero,1567c <__adddf3+0x41c>
   15548:	898dc83a 	sub	r6,r17,r6
   1554c:	89a3803a 	cmpltu	r17,r17,r6
   15550:	2a0bc83a 	sub	r5,r5,r8
   15554:	2c4bc83a 	sub	r5,r5,r17
   15558:	3023883a 	mov	r17,r6
   1555c:	003f9c06 	br	153d0 <__alt_mem_descriptor_memory+0xdefd53d0>
   15560:	4184b03a 	or	r2,r8,r6
   15564:	103f5d26 	beq	r2,zero,152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15568:	213fffc4 	addi	r4,r4,-1
   1556c:	203fd926 	beq	r4,zero,154d4 <__alt_mem_descriptor_memory+0xdefd54d4>
   15570:	0081ffc4 	movi	r2,2047
   15574:	80bfca1e 	bne	r16,r2,154a0 <__alt_mem_descriptor_memory+0xdefd54a0>
   15578:	003f5806 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   1557c:	10c8b03a 	or	r4,r2,r3
   15580:	20008b26 	beq	r4,zero,157b0 <__adddf3+0x550>
   15584:	100b883a 	mov	r5,r2
   15588:	1823883a 	mov	r17,r3
   1558c:	888001cc 	andi	r2,r17,7
   15590:	103f541e 	bne	r2,zero,152e4 <__alt_mem_descriptor_memory+0xdefd52e4>
   15594:	9007883a 	mov	r3,r18
   15598:	003fb006 	br	1545c <__alt_mem_descriptor_memory+0xdefd545c>
   1559c:	1800531e 	bne	r3,zero,156ec <__adddf3+0x48c>
   155a0:	80800044 	addi	r2,r16,1
   155a4:	1081ffcc 	andi	r2,r2,2047
   155a8:	00c00044 	movi	r3,1
   155ac:	1880990e 	bge	r3,r2,15814 <__adddf3+0x5b4>
   155b0:	8985c83a 	sub	r2,r17,r6
   155b4:	8887803a 	cmpltu	r3,r17,r2
   155b8:	2a27c83a 	sub	r19,r5,r8
   155bc:	98e7c83a 	sub	r19,r19,r3
   155c0:	98c0202c 	andhi	r3,r19,128
   155c4:	18006226 	beq	r3,zero,15750 <__adddf3+0x4f0>
   155c8:	3463c83a 	sub	r17,r6,r17
   155cc:	4151c83a 	sub	r8,r8,r5
   155d0:	344d803a 	cmpltu	r6,r6,r17
   155d4:	41a7c83a 	sub	r19,r8,r6
   155d8:	3825883a 	mov	r18,r7
   155dc:	983f821e 	bne	r19,zero,153e8 <__alt_mem_descriptor_memory+0xdefd53e8>
   155e0:	8809883a 	mov	r4,r17
   155e4:	00177fc0 	call	177fc <__clzsi2>
   155e8:	10800804 	addi	r2,r2,32
   155ec:	10fffe04 	addi	r3,r2,-8
   155f0:	010007c4 	movi	r4,31
   155f4:	20ff810e 	bge	r4,r3,153fc <__alt_mem_descriptor_memory+0xdefd53fc>
   155f8:	14fff604 	addi	r19,r2,-40
   155fc:	8ce6983a 	sll	r19,r17,r19
   15600:	0023883a 	mov	r17,zero
   15604:	1c3f840e 	bge	r3,r16,15418 <__alt_mem_descriptor_memory+0xdefd5418>
   15608:	017fe034 	movhi	r5,65408
   1560c:	297fffc4 	addi	r5,r5,-1
   15610:	80e1c83a 	sub	r16,r16,r3
   15614:	994a703a 	and	r5,r19,r5
   15618:	003f3006 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   1561c:	0009883a 	mov	r4,zero
   15620:	0005883a 	mov	r2,zero
   15624:	003f4506 	br	1533c <__alt_mem_descriptor_memory+0xdefd533c>
   15628:	418cb03a 	or	r6,r8,r6
   1562c:	300cc03a 	cmpne	r6,r6,zero
   15630:	0007883a 	mov	r3,zero
   15634:	003f6106 	br	153bc <__alt_mem_descriptor_memory+0xdefd53bc>
   15638:	2000921e 	bne	r4,zero,15884 <__adddf3+0x624>
   1563c:	80800044 	addi	r2,r16,1
   15640:	11c1ffcc 	andi	r7,r2,2047
   15644:	01000044 	movi	r4,1
   15648:	21c0610e 	bge	r4,r7,157d0 <__adddf3+0x570>
   1564c:	0101ffc4 	movi	r4,2047
   15650:	1100a326 	beq	r2,r4,158e0 <__adddf3+0x680>
   15654:	344d883a 	add	r6,r6,r17
   15658:	3463803a 	cmpltu	r17,r6,r17
   1565c:	414b883a 	add	r5,r8,r5
   15660:	2c4b883a 	add	r5,r5,r17
   15664:	282297fa 	slli	r17,r5,31
   15668:	300cd07a 	srli	r6,r6,1
   1566c:	280ad07a 	srli	r5,r5,1
   15670:	1021883a 	mov	r16,r2
   15674:	89a2b03a 	or	r17,r17,r6
   15678:	003f1806 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   1567c:	0081ffc4 	movi	r2,2047
   15680:	80bf411e 	bne	r16,r2,15388 <__alt_mem_descriptor_memory+0xdefd5388>
   15684:	003f1506 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15688:	80bff844 	addi	r2,r16,-31
   1568c:	00c00804 	movi	r3,32
   15690:	9884d83a 	srl	r2,r19,r2
   15694:	28c04a26 	beq	r5,r3,157c0 <__adddf3+0x560>
   15698:	00c00fc4 	movi	r3,63
   1569c:	1c21c83a 	sub	r16,r3,r16
   156a0:	9c26983a 	sll	r19,r19,r16
   156a4:	9c62b03a 	or	r17,r19,r17
   156a8:	8822c03a 	cmpne	r17,r17,zero
   156ac:	88a2b03a 	or	r17,r17,r2
   156b0:	000b883a 	mov	r5,zero
   156b4:	0021883a 	mov	r16,zero
   156b8:	003fb406 	br	1558c <__alt_mem_descriptor_memory+0xdefd558c>
   156bc:	18bff804 	addi	r2,r3,-32
   156c0:	01000804 	movi	r4,32
   156c4:	4084d83a 	srl	r2,r8,r2
   156c8:	19003f26 	beq	r3,r4,157c8 <__adddf3+0x568>
   156cc:	01001004 	movi	r4,64
   156d0:	20c7c83a 	sub	r3,r4,r3
   156d4:	40d0983a 	sll	r8,r8,r3
   156d8:	418cb03a 	or	r6,r8,r6
   156dc:	300cc03a 	cmpne	r6,r6,zero
   156e0:	308cb03a 	or	r6,r6,r2
   156e4:	0007883a 	mov	r3,zero
   156e8:	003f3406 	br	153bc <__alt_mem_descriptor_memory+0xdefd53bc>
   156ec:	80002326 	beq	r16,zero,1577c <__adddf3+0x51c>
   156f0:	0101ffc4 	movi	r4,2047
   156f4:	11005e26 	beq	r2,r4,15870 <__adddf3+0x610>
   156f8:	00c7c83a 	sub	r3,zero,r3
   156fc:	29402034 	orhi	r5,r5,128
   15700:	01000e04 	movi	r4,56
   15704:	20c07216 	blt	r4,r3,158d0 <__adddf3+0x670>
   15708:	010007c4 	movi	r4,31
   1570c:	20c0ce16 	blt	r4,r3,15a48 <__adddf3+0x7e8>
   15710:	01000804 	movi	r4,32
   15714:	20c9c83a 	sub	r4,r4,r3
   15718:	2914983a 	sll	r10,r5,r4
   1571c:	88d2d83a 	srl	r9,r17,r3
   15720:	8908983a 	sll	r4,r17,r4
   15724:	28c6d83a 	srl	r3,r5,r3
   15728:	5262b03a 	or	r17,r10,r9
   1572c:	2008c03a 	cmpne	r4,r4,zero
   15730:	8922b03a 	or	r17,r17,r4
   15734:	3463c83a 	sub	r17,r6,r17
   15738:	40c7c83a 	sub	r3,r8,r3
   1573c:	344d803a 	cmpltu	r6,r6,r17
   15740:	198bc83a 	sub	r5,r3,r6
   15744:	1021883a 	mov	r16,r2
   15748:	3825883a 	mov	r18,r7
   1574c:	003f2006 	br	153d0 <__alt_mem_descriptor_memory+0xdefd53d0>
   15750:	9886b03a 	or	r3,r19,r2
   15754:	1800141e 	bne	r3,zero,157a8 <__adddf3+0x548>
   15758:	0007883a 	mov	r3,zero
   1575c:	000b883a 	mov	r5,zero
   15760:	0023883a 	mov	r17,zero
   15764:	0021883a 	mov	r16,zero
   15768:	003f3c06 	br	1545c <__alt_mem_descriptor_memory+0xdefd545c>
   1576c:	418cb03a 	or	r6,r8,r6
   15770:	300cc03a 	cmpne	r6,r6,zero
   15774:	0011883a 	mov	r8,zero
   15778:	003f5606 	br	154d4 <__alt_mem_descriptor_memory+0xdefd54d4>
   1577c:	2c48b03a 	or	r4,r5,r17
   15780:	20003b26 	beq	r4,zero,15870 <__adddf3+0x610>
   15784:	00c6303a 	nor	r3,zero,r3
   15788:	1800371e 	bne	r3,zero,15868 <__adddf3+0x608>
   1578c:	3463c83a 	sub	r17,r6,r17
   15790:	414bc83a 	sub	r5,r8,r5
   15794:	344d803a 	cmpltu	r6,r6,r17
   15798:	298bc83a 	sub	r5,r5,r6
   1579c:	1021883a 	mov	r16,r2
   157a0:	3825883a 	mov	r18,r7
   157a4:	003f0a06 	br	153d0 <__alt_mem_descriptor_memory+0xdefd53d0>
   157a8:	1023883a 	mov	r17,r2
   157ac:	003f0d06 	br	153e4 <__alt_mem_descriptor_memory+0xdefd53e4>
   157b0:	0007883a 	mov	r3,zero
   157b4:	000b883a 	mov	r5,zero
   157b8:	0023883a 	mov	r17,zero
   157bc:	003f2706 	br	1545c <__alt_mem_descriptor_memory+0xdefd545c>
   157c0:	0027883a 	mov	r19,zero
   157c4:	003fb706 	br	156a4 <__alt_mem_descriptor_memory+0xdefd56a4>
   157c8:	0011883a 	mov	r8,zero
   157cc:	003fc206 	br	156d8 <__alt_mem_descriptor_memory+0xdefd56d8>
   157d0:	2c44b03a 	or	r2,r5,r17
   157d4:	8000871e 	bne	r16,zero,159f4 <__adddf3+0x794>
   157d8:	1000b126 	beq	r2,zero,15aa0 <__adddf3+0x840>
   157dc:	4184b03a 	or	r2,r8,r6
   157e0:	103ebe26 	beq	r2,zero,152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   157e4:	3445883a 	add	r2,r6,r17
   157e8:	1463803a 	cmpltu	r17,r2,r17
   157ec:	414b883a 	add	r5,r8,r5
   157f0:	2c4b883a 	add	r5,r5,r17
   157f4:	28c0202c 	andhi	r3,r5,128
   157f8:	1023883a 	mov	r17,r2
   157fc:	183f6326 	beq	r3,zero,1558c <__alt_mem_descriptor_memory+0xdefd558c>
   15800:	00bfe034 	movhi	r2,65408
   15804:	10bfffc4 	addi	r2,r2,-1
   15808:	2021883a 	mov	r16,r4
   1580c:	288a703a 	and	r5,r5,r2
   15810:	003eb206 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15814:	2c44b03a 	or	r2,r5,r17
   15818:	8000251e 	bne	r16,zero,158b0 <__adddf3+0x650>
   1581c:	10004b1e 	bne	r2,zero,1594c <__adddf3+0x6ec>
   15820:	4184b03a 	or	r2,r8,r6
   15824:	103fe226 	beq	r2,zero,157b0 <__alt_mem_descriptor_memory+0xdefd57b0>
   15828:	400b883a 	mov	r5,r8
   1582c:	3023883a 	mov	r17,r6
   15830:	3825883a 	mov	r18,r7
   15834:	003ea906 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15838:	20bff804 	addi	r2,r4,-32
   1583c:	01c00804 	movi	r7,32
   15840:	4084d83a 	srl	r2,r8,r2
   15844:	21c07e26 	beq	r4,r7,15a40 <__adddf3+0x7e0>
   15848:	01c01004 	movi	r7,64
   1584c:	3909c83a 	sub	r4,r7,r4
   15850:	4110983a 	sll	r8,r8,r4
   15854:	418cb03a 	or	r6,r8,r6
   15858:	300cc03a 	cmpne	r6,r6,zero
   1585c:	308cb03a 	or	r6,r6,r2
   15860:	0011883a 	mov	r8,zero
   15864:	003f1b06 	br	154d4 <__alt_mem_descriptor_memory+0xdefd54d4>
   15868:	0101ffc4 	movi	r4,2047
   1586c:	113fa41e 	bne	r2,r4,15700 <__alt_mem_descriptor_memory+0xdefd5700>
   15870:	400b883a 	mov	r5,r8
   15874:	3023883a 	mov	r17,r6
   15878:	1021883a 	mov	r16,r2
   1587c:	3825883a 	mov	r18,r7
   15880:	003e9606 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15884:	80001a1e 	bne	r16,zero,158f0 <__adddf3+0x690>
   15888:	2c4eb03a 	or	r7,r5,r17
   1588c:	38005526 	beq	r7,zero,159e4 <__adddf3+0x784>
   15890:	0108303a 	nor	r4,zero,r4
   15894:	2000511e 	bne	r4,zero,159dc <__adddf3+0x77c>
   15898:	89a3883a 	add	r17,r17,r6
   1589c:	414b883a 	add	r5,r8,r5
   158a0:	898d803a 	cmpltu	r6,r17,r6
   158a4:	298b883a 	add	r5,r5,r6
   158a8:	1021883a 	mov	r16,r2
   158ac:	003f0e06 	br	154e8 <__alt_mem_descriptor_memory+0xdefd54e8>
   158b0:	1000341e 	bne	r2,zero,15984 <__adddf3+0x724>
   158b4:	4184b03a 	or	r2,r8,r6
   158b8:	10006f26 	beq	r2,zero,15a78 <__adddf3+0x818>
   158bc:	400b883a 	mov	r5,r8
   158c0:	3023883a 	mov	r17,r6
   158c4:	3825883a 	mov	r18,r7
   158c8:	0401ffc4 	movi	r16,2047
   158cc:	003e8306 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   158d0:	2c62b03a 	or	r17,r5,r17
   158d4:	8822c03a 	cmpne	r17,r17,zero
   158d8:	0007883a 	mov	r3,zero
   158dc:	003f9506 	br	15734 <__alt_mem_descriptor_memory+0xdefd5734>
   158e0:	1021883a 	mov	r16,r2
   158e4:	000b883a 	mov	r5,zero
   158e8:	0023883a 	mov	r17,zero
   158ec:	003edb06 	br	1545c <__alt_mem_descriptor_memory+0xdefd545c>
   158f0:	01c1ffc4 	movi	r7,2047
   158f4:	11c03b26 	beq	r2,r7,159e4 <__adddf3+0x784>
   158f8:	0109c83a 	sub	r4,zero,r4
   158fc:	29402034 	orhi	r5,r5,128
   15900:	01c00e04 	movi	r7,56
   15904:	39006216 	blt	r7,r4,15a90 <__adddf3+0x830>
   15908:	01c007c4 	movi	r7,31
   1590c:	39006b16 	blt	r7,r4,15abc <__adddf3+0x85c>
   15910:	01c00804 	movi	r7,32
   15914:	390fc83a 	sub	r7,r7,r4
   15918:	29d4983a 	sll	r10,r5,r7
   1591c:	8912d83a 	srl	r9,r17,r4
   15920:	89ce983a 	sll	r7,r17,r7
   15924:	2908d83a 	srl	r4,r5,r4
   15928:	5262b03a 	or	r17,r10,r9
   1592c:	380ac03a 	cmpne	r5,r7,zero
   15930:	8962b03a 	or	r17,r17,r5
   15934:	89a3883a 	add	r17,r17,r6
   15938:	2211883a 	add	r8,r4,r8
   1593c:	898d803a 	cmpltu	r6,r17,r6
   15940:	418b883a 	add	r5,r8,r6
   15944:	1021883a 	mov	r16,r2
   15948:	003ee706 	br	154e8 <__alt_mem_descriptor_memory+0xdefd54e8>
   1594c:	4184b03a 	or	r2,r8,r6
   15950:	103e6226 	beq	r2,zero,152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15954:	8987c83a 	sub	r3,r17,r6
   15958:	88c9803a 	cmpltu	r4,r17,r3
   1595c:	2a05c83a 	sub	r2,r5,r8
   15960:	1105c83a 	sub	r2,r2,r4
   15964:	1100202c 	andhi	r4,r2,128
   15968:	203f0426 	beq	r4,zero,1557c <__alt_mem_descriptor_memory+0xdefd557c>
   1596c:	3463c83a 	sub	r17,r6,r17
   15970:	414bc83a 	sub	r5,r8,r5
   15974:	344d803a 	cmpltu	r6,r6,r17
   15978:	298bc83a 	sub	r5,r5,r6
   1597c:	3825883a 	mov	r18,r7
   15980:	003e5606 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15984:	4184b03a 	or	r2,r8,r6
   15988:	10002b26 	beq	r2,zero,15a38 <__adddf3+0x7d8>
   1598c:	2804d0fa 	srli	r2,r5,3
   15990:	8822d0fa 	srli	r17,r17,3
   15994:	280a977a 	slli	r5,r5,29
   15998:	10c0022c 	andhi	r3,r2,8
   1599c:	2c62b03a 	or	r17,r5,r17
   159a0:	18000826 	beq	r3,zero,159c4 <__adddf3+0x764>
   159a4:	4008d0fa 	srli	r4,r8,3
   159a8:	20c0022c 	andhi	r3,r4,8
   159ac:	1800051e 	bne	r3,zero,159c4 <__adddf3+0x764>
   159b0:	300cd0fa 	srli	r6,r6,3
   159b4:	4010977a 	slli	r8,r8,29
   159b8:	2005883a 	mov	r2,r4
   159bc:	3825883a 	mov	r18,r7
   159c0:	41a2b03a 	or	r17,r8,r6
   159c4:	880ad77a 	srli	r5,r17,29
   159c8:	100490fa 	slli	r2,r2,3
   159cc:	882290fa 	slli	r17,r17,3
   159d0:	0401ffc4 	movi	r16,2047
   159d4:	288ab03a 	or	r5,r5,r2
   159d8:	003e4006 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   159dc:	01c1ffc4 	movi	r7,2047
   159e0:	11ffc71e 	bne	r2,r7,15900 <__alt_mem_descriptor_memory+0xdefd5900>
   159e4:	400b883a 	mov	r5,r8
   159e8:	3023883a 	mov	r17,r6
   159ec:	1021883a 	mov	r16,r2
   159f0:	003e3a06 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   159f4:	10002d26 	beq	r2,zero,15aac <__adddf3+0x84c>
   159f8:	4184b03a 	or	r2,r8,r6
   159fc:	10000e26 	beq	r2,zero,15a38 <__adddf3+0x7d8>
   15a00:	2804d0fa 	srli	r2,r5,3
   15a04:	8822d0fa 	srli	r17,r17,3
   15a08:	280a977a 	slli	r5,r5,29
   15a0c:	10c0022c 	andhi	r3,r2,8
   15a10:	2c62b03a 	or	r17,r5,r17
   15a14:	183feb26 	beq	r3,zero,159c4 <__alt_mem_descriptor_memory+0xdefd59c4>
   15a18:	4008d0fa 	srli	r4,r8,3
   15a1c:	20c0022c 	andhi	r3,r4,8
   15a20:	183fe81e 	bne	r3,zero,159c4 <__alt_mem_descriptor_memory+0xdefd59c4>
   15a24:	300cd0fa 	srli	r6,r6,3
   15a28:	4010977a 	slli	r8,r8,29
   15a2c:	2005883a 	mov	r2,r4
   15a30:	41a2b03a 	or	r17,r8,r6
   15a34:	003fe306 	br	159c4 <__alt_mem_descriptor_memory+0xdefd59c4>
   15a38:	0401ffc4 	movi	r16,2047
   15a3c:	003e2706 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15a40:	0011883a 	mov	r8,zero
   15a44:	003f8306 	br	15854 <__alt_mem_descriptor_memory+0xdefd5854>
   15a48:	193ff804 	addi	r4,r3,-32
   15a4c:	02400804 	movi	r9,32
   15a50:	2908d83a 	srl	r4,r5,r4
   15a54:	1a402526 	beq	r3,r9,15aec <__adddf3+0x88c>
   15a58:	02401004 	movi	r9,64
   15a5c:	48c7c83a 	sub	r3,r9,r3
   15a60:	28ca983a 	sll	r5,r5,r3
   15a64:	2c62b03a 	or	r17,r5,r17
   15a68:	8822c03a 	cmpne	r17,r17,zero
   15a6c:	8922b03a 	or	r17,r17,r4
   15a70:	0007883a 	mov	r3,zero
   15a74:	003f2f06 	br	15734 <__alt_mem_descriptor_memory+0xdefd5734>
   15a78:	01402034 	movhi	r5,128
   15a7c:	0007883a 	mov	r3,zero
   15a80:	297fffc4 	addi	r5,r5,-1
   15a84:	047ffe04 	movi	r17,-8
   15a88:	0401ffc4 	movi	r16,2047
   15a8c:	003e7306 	br	1545c <__alt_mem_descriptor_memory+0xdefd545c>
   15a90:	2c62b03a 	or	r17,r5,r17
   15a94:	8822c03a 	cmpne	r17,r17,zero
   15a98:	0009883a 	mov	r4,zero
   15a9c:	003fa506 	br	15934 <__alt_mem_descriptor_memory+0xdefd5934>
   15aa0:	400b883a 	mov	r5,r8
   15aa4:	3023883a 	mov	r17,r6
   15aa8:	003e0c06 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15aac:	400b883a 	mov	r5,r8
   15ab0:	3023883a 	mov	r17,r6
   15ab4:	0401ffc4 	movi	r16,2047
   15ab8:	003e0806 	br	152dc <__alt_mem_descriptor_memory+0xdefd52dc>
   15abc:	21fff804 	addi	r7,r4,-32
   15ac0:	02400804 	movi	r9,32
   15ac4:	29ced83a 	srl	r7,r5,r7
   15ac8:	22400a26 	beq	r4,r9,15af4 <__adddf3+0x894>
   15acc:	02401004 	movi	r9,64
   15ad0:	4909c83a 	sub	r4,r9,r4
   15ad4:	290a983a 	sll	r5,r5,r4
   15ad8:	2c62b03a 	or	r17,r5,r17
   15adc:	8822c03a 	cmpne	r17,r17,zero
   15ae0:	89e2b03a 	or	r17,r17,r7
   15ae4:	0009883a 	mov	r4,zero
   15ae8:	003f9206 	br	15934 <__alt_mem_descriptor_memory+0xdefd5934>
   15aec:	000b883a 	mov	r5,zero
   15af0:	003fdc06 	br	15a64 <__alt_mem_descriptor_memory+0xdefd5a64>
   15af4:	000b883a 	mov	r5,zero
   15af8:	003ff706 	br	15ad8 <__alt_mem_descriptor_memory+0xdefd5ad8>

00015afc <__divdf3>:
   15afc:	defff204 	addi	sp,sp,-56
   15b00:	dd000815 	stw	r20,32(sp)
   15b04:	2828d53a 	srli	r20,r5,20
   15b08:	dd800a15 	stw	r22,40(sp)
   15b0c:	282cd7fa 	srli	r22,r5,31
   15b10:	dc000415 	stw	r16,16(sp)
   15b14:	04000434 	movhi	r16,16
   15b18:	df000c15 	stw	fp,48(sp)
   15b1c:	dcc00715 	stw	r19,28(sp)
   15b20:	dc800615 	stw	r18,24(sp)
   15b24:	dc400515 	stw	r17,20(sp)
   15b28:	843fffc4 	addi	r16,r16,-1
   15b2c:	dfc00d15 	stw	ra,52(sp)
   15b30:	ddc00b15 	stw	r23,44(sp)
   15b34:	dd400915 	stw	r21,36(sp)
   15b38:	a501ffcc 	andi	r20,r20,2047
   15b3c:	2025883a 	mov	r18,r4
   15b40:	2027883a 	mov	r19,r4
   15b44:	2c22703a 	and	r17,r5,r16
   15b48:	b7003fcc 	andi	fp,r22,255
   15b4c:	a0005e26 	beq	r20,zero,15cc8 <__divdf3+0x1cc>
   15b50:	0081ffc4 	movi	r2,2047
   15b54:	a0803526 	beq	r20,r2,15c2c <__divdf3+0x130>
   15b58:	8c000434 	orhi	r16,r17,16
   15b5c:	2004d77a 	srli	r2,r4,29
   15b60:	802090fa 	slli	r16,r16,3
   15b64:	202690fa 	slli	r19,r4,3
   15b68:	a53f0044 	addi	r20,r20,-1023
   15b6c:	80a2b03a 	or	r17,r16,r2
   15b70:	0025883a 	mov	r18,zero
   15b74:	0011883a 	mov	r8,zero
   15b78:	380ad53a 	srli	r5,r7,20
   15b7c:	382ed7fa 	srli	r23,r7,31
   15b80:	04000434 	movhi	r16,16
   15b84:	843fffc4 	addi	r16,r16,-1
   15b88:	2941ffcc 	andi	r5,r5,2047
   15b8c:	302b883a 	mov	r21,r6
   15b90:	3c20703a 	and	r16,r7,r16
   15b94:	ba403fcc 	andi	r9,r23,255
   15b98:	28006726 	beq	r5,zero,15d38 <__divdf3+0x23c>
   15b9c:	0081ffc4 	movi	r2,2047
   15ba0:	28805f26 	beq	r5,r2,15d20 <__divdf3+0x224>
   15ba4:	84000434 	orhi	r16,r16,16
   15ba8:	3004d77a 	srli	r2,r6,29
   15bac:	802090fa 	slli	r16,r16,3
   15bb0:	302a90fa 	slli	r21,r6,3
   15bb4:	297f0044 	addi	r5,r5,-1023
   15bb8:	80a0b03a 	or	r16,r16,r2
   15bbc:	000f883a 	mov	r7,zero
   15bc0:	3c86b03a 	or	r3,r7,r18
   15bc4:	180690ba 	slli	r3,r3,2
   15bc8:	00800074 	movhi	r2,1
   15bcc:	1096fb04 	addi	r2,r2,23532
   15bd0:	1887883a 	add	r3,r3,r2
   15bd4:	18c00017 	ldw	r3,0(r3)
   15bd8:	b5c8f03a 	xor	r4,r22,r23
   15bdc:	200d883a 	mov	r6,r4
   15be0:	24803fcc 	andi	r18,r4,255
   15be4:	a169c83a 	sub	r20,r20,r5
   15be8:	1800683a 	jmp	r3
   15bec:	00015e34 	movhi	zero,1400
   15bf0:	00015c64 	muli	zero,zero,1393
   15bf4:	00015df8 	rdprs	zero,zero,1399
   15bf8:	00015c48 	cmpgei	zero,zero,1393
   15bfc:	00015df8 	rdprs	zero,zero,1399
   15c00:	00015dcc 	andi	zero,zero,1399
   15c04:	00015df8 	rdprs	zero,zero,1399
   15c08:	00015c48 	cmpgei	zero,zero,1393
   15c0c:	00015c64 	muli	zero,zero,1393
   15c10:	00015c64 	muli	zero,zero,1393
   15c14:	00015dcc 	andi	zero,zero,1399
   15c18:	00015c48 	cmpgei	zero,zero,1393
   15c1c:	00015c58 	cmpnei	zero,zero,1393
   15c20:	00015c58 	cmpnei	zero,zero,1393
   15c24:	00015c58 	cmpnei	zero,zero,1393
   15c28:	00015e08 	cmpgei	zero,zero,1400
   15c2c:	8904b03a 	or	r2,r17,r4
   15c30:	1000631e 	bne	r2,zero,15dc0 <__divdf3+0x2c4>
   15c34:	04800204 	movi	r18,8
   15c38:	0023883a 	mov	r17,zero
   15c3c:	0027883a 	mov	r19,zero
   15c40:	02000084 	movi	r8,2
   15c44:	003fcc06 	br	15b78 <__alt_mem_descriptor_memory+0xdefd5b78>
   15c48:	8023883a 	mov	r17,r16
   15c4c:	a827883a 	mov	r19,r21
   15c50:	4839883a 	mov	fp,r9
   15c54:	3811883a 	mov	r8,r7
   15c58:	00800084 	movi	r2,2
   15c5c:	40812a1e 	bne	r8,r2,16108 <__divdf3+0x60c>
   15c60:	e025883a 	mov	r18,fp
   15c64:	9180004c 	andi	r6,r18,1
   15c68:	0101ffc4 	movi	r4,2047
   15c6c:	000b883a 	mov	r5,zero
   15c70:	0027883a 	mov	r19,zero
   15c74:	2008953a 	slli	r4,r4,20
   15c78:	30c03fcc 	andi	r3,r6,255
   15c7c:	04000434 	movhi	r16,16
   15c80:	180697fa 	slli	r3,r3,31
   15c84:	843fffc4 	addi	r16,r16,-1
   15c88:	2c20703a 	and	r16,r5,r16
   15c8c:	8120b03a 	or	r16,r16,r4
   15c90:	80c6b03a 	or	r3,r16,r3
   15c94:	9805883a 	mov	r2,r19
   15c98:	dfc00d17 	ldw	ra,52(sp)
   15c9c:	df000c17 	ldw	fp,48(sp)
   15ca0:	ddc00b17 	ldw	r23,44(sp)
   15ca4:	dd800a17 	ldw	r22,40(sp)
   15ca8:	dd400917 	ldw	r21,36(sp)
   15cac:	dd000817 	ldw	r20,32(sp)
   15cb0:	dcc00717 	ldw	r19,28(sp)
   15cb4:	dc800617 	ldw	r18,24(sp)
   15cb8:	dc400517 	ldw	r17,20(sp)
   15cbc:	dc000417 	ldw	r16,16(sp)
   15cc0:	dec00e04 	addi	sp,sp,56
   15cc4:	f800283a 	ret
   15cc8:	8904b03a 	or	r2,r17,r4
   15ccc:	10003726 	beq	r2,zero,15dac <__divdf3+0x2b0>
   15cd0:	88011c26 	beq	r17,zero,16144 <__divdf3+0x648>
   15cd4:	8809883a 	mov	r4,r17
   15cd8:	d9800315 	stw	r6,12(sp)
   15cdc:	d9c00115 	stw	r7,4(sp)
   15ce0:	00177fc0 	call	177fc <__clzsi2>
   15ce4:	d9800317 	ldw	r6,12(sp)
   15ce8:	d9c00117 	ldw	r7,4(sp)
   15cec:	1007883a 	mov	r3,r2
   15cf0:	01000a04 	movi	r4,40
   15cf4:	1cfffe04 	addi	r19,r3,-8
   15cf8:	20c9c83a 	sub	r4,r4,r3
   15cfc:	8cca983a 	sll	r5,r17,r19
   15d00:	9108d83a 	srl	r4,r18,r4
   15d04:	94e6983a 	sll	r19,r18,r19
   15d08:	2162b03a 	or	r17,r4,r5
   15d0c:	053f0344 	movi	r20,-1011
   15d10:	a0e9c83a 	sub	r20,r20,r3
   15d14:	0025883a 	mov	r18,zero
   15d18:	0011883a 	mov	r8,zero
   15d1c:	003f9606 	br	15b78 <__alt_mem_descriptor_memory+0xdefd5b78>
   15d20:	8184b03a 	or	r2,r16,r6
   15d24:	10001f1e 	bne	r2,zero,15da4 <__divdf3+0x2a8>
   15d28:	0021883a 	mov	r16,zero
   15d2c:	002b883a 	mov	r21,zero
   15d30:	01c00084 	movi	r7,2
   15d34:	003fa206 	br	15bc0 <__alt_mem_descriptor_memory+0xdefd5bc0>
   15d38:	8184b03a 	or	r2,r16,r6
   15d3c:	10001526 	beq	r2,zero,15d94 <__divdf3+0x298>
   15d40:	80010c26 	beq	r16,zero,16174 <__divdf3+0x678>
   15d44:	8009883a 	mov	r4,r16
   15d48:	d9800315 	stw	r6,12(sp)
   15d4c:	da000215 	stw	r8,8(sp)
   15d50:	da400015 	stw	r9,0(sp)
   15d54:	00177fc0 	call	177fc <__clzsi2>
   15d58:	d9800317 	ldw	r6,12(sp)
   15d5c:	da000217 	ldw	r8,8(sp)
   15d60:	da400017 	ldw	r9,0(sp)
   15d64:	1007883a 	mov	r3,r2
   15d68:	01000a04 	movi	r4,40
   15d6c:	1d7ffe04 	addi	r21,r3,-8
   15d70:	20c9c83a 	sub	r4,r4,r3
   15d74:	8560983a 	sll	r16,r16,r21
   15d78:	3108d83a 	srl	r4,r6,r4
   15d7c:	356a983a 	sll	r21,r6,r21
   15d80:	2420b03a 	or	r16,r4,r16
   15d84:	017f0344 	movi	r5,-1011
   15d88:	28cbc83a 	sub	r5,r5,r3
   15d8c:	000f883a 	mov	r7,zero
   15d90:	003f8b06 	br	15bc0 <__alt_mem_descriptor_memory+0xdefd5bc0>
   15d94:	0021883a 	mov	r16,zero
   15d98:	002b883a 	mov	r21,zero
   15d9c:	01c00044 	movi	r7,1
   15da0:	003f8706 	br	15bc0 <__alt_mem_descriptor_memory+0xdefd5bc0>
   15da4:	01c000c4 	movi	r7,3
   15da8:	003f8506 	br	15bc0 <__alt_mem_descriptor_memory+0xdefd5bc0>
   15dac:	04800104 	movi	r18,4
   15db0:	0023883a 	mov	r17,zero
   15db4:	0027883a 	mov	r19,zero
   15db8:	02000044 	movi	r8,1
   15dbc:	003f6e06 	br	15b78 <__alt_mem_descriptor_memory+0xdefd5b78>
   15dc0:	04800304 	movi	r18,12
   15dc4:	020000c4 	movi	r8,3
   15dc8:	003f6b06 	br	15b78 <__alt_mem_descriptor_memory+0xdefd5b78>
   15dcc:	01400434 	movhi	r5,16
   15dd0:	000d883a 	mov	r6,zero
   15dd4:	297fffc4 	addi	r5,r5,-1
   15dd8:	04ffffc4 	movi	r19,-1
   15ddc:	0101ffc4 	movi	r4,2047
   15de0:	003fa406 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   15de4:	043f0084 	movi	r16,-1022
   15de8:	8521c83a 	sub	r16,r16,r20
   15dec:	00800e04 	movi	r2,56
   15df0:	1401200e 	bge	r2,r16,16274 <__divdf3+0x778>
   15df4:	9180004c 	andi	r6,r18,1
   15df8:	0009883a 	mov	r4,zero
   15dfc:	000b883a 	mov	r5,zero
   15e00:	0027883a 	mov	r19,zero
   15e04:	003f9b06 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   15e08:	8880022c 	andhi	r2,r17,8
   15e0c:	1000c726 	beq	r2,zero,1612c <__divdf3+0x630>
   15e10:	8080022c 	andhi	r2,r16,8
   15e14:	1000c51e 	bne	r2,zero,1612c <__divdf3+0x630>
   15e18:	00800434 	movhi	r2,16
   15e1c:	81400234 	orhi	r5,r16,8
   15e20:	10bfffc4 	addi	r2,r2,-1
   15e24:	b80d883a 	mov	r6,r23
   15e28:	288a703a 	and	r5,r5,r2
   15e2c:	a827883a 	mov	r19,r21
   15e30:	003fea06 	br	15ddc <__alt_mem_descriptor_memory+0xdefd5ddc>
   15e34:	8440ea36 	bltu	r16,r17,161e0 <__divdf3+0x6e4>
   15e38:	8c00e826 	beq	r17,r16,161dc <__divdf3+0x6e0>
   15e3c:	a53fffc4 	addi	r20,r20,-1
   15e40:	882d883a 	mov	r22,r17
   15e44:	000d883a 	mov	r6,zero
   15e48:	a804d63a 	srli	r2,r21,24
   15e4c:	8020923a 	slli	r16,r16,8
   15e50:	b009883a 	mov	r4,r22
   15e54:	d9800315 	stw	r6,12(sp)
   15e58:	1420b03a 	or	r16,r2,r16
   15e5c:	802ed43a 	srli	r23,r16,16
   15e60:	873fffcc 	andi	fp,r16,65535
   15e64:	a82a923a 	slli	r21,r21,8
   15e68:	b80b883a 	mov	r5,r23
   15e6c:	00152500 	call	15250 <__udivsi3>
   15e70:	b009883a 	mov	r4,r22
   15e74:	b80b883a 	mov	r5,r23
   15e78:	1023883a 	mov	r17,r2
   15e7c:	00152580 	call	15258 <__umodsi3>
   15e80:	1004943a 	slli	r2,r2,16
   15e84:	9808d43a 	srli	r4,r19,16
   15e88:	8f2d383a 	mul	r22,r17,fp
   15e8c:	d9800317 	ldw	r6,12(sp)
   15e90:	1106b03a 	or	r3,r2,r4
   15e94:	1d80062e 	bgeu	r3,r22,15eb0 <__divdf3+0x3b4>
   15e98:	1c07883a 	add	r3,r3,r16
   15e9c:	88bfffc4 	addi	r2,r17,-1
   15ea0:	1c00dc36 	bltu	r3,r16,16214 <__divdf3+0x718>
   15ea4:	1d80db2e 	bgeu	r3,r22,16214 <__divdf3+0x718>
   15ea8:	8c7fff84 	addi	r17,r17,-2
   15eac:	1c07883a 	add	r3,r3,r16
   15eb0:	1dadc83a 	sub	r22,r3,r22
   15eb4:	b009883a 	mov	r4,r22
   15eb8:	b80b883a 	mov	r5,r23
   15ebc:	d9800315 	stw	r6,12(sp)
   15ec0:	00152500 	call	15250 <__udivsi3>
   15ec4:	b009883a 	mov	r4,r22
   15ec8:	b80b883a 	mov	r5,r23
   15ecc:	d8800015 	stw	r2,0(sp)
   15ed0:	00152580 	call	15258 <__umodsi3>
   15ed4:	da400017 	ldw	r9,0(sp)
   15ed8:	1004943a 	slli	r2,r2,16
   15edc:	9cffffcc 	andi	r19,r19,65535
   15ee0:	4f07383a 	mul	r3,r9,fp
   15ee4:	14c8b03a 	or	r4,r2,r19
   15ee8:	d9800317 	ldw	r6,12(sp)
   15eec:	20c0062e 	bgeu	r4,r3,15f08 <__divdf3+0x40c>
   15ef0:	2409883a 	add	r4,r4,r16
   15ef4:	48bfffc4 	addi	r2,r9,-1
   15ef8:	2400c436 	bltu	r4,r16,1620c <__divdf3+0x710>
   15efc:	20c0c32e 	bgeu	r4,r3,1620c <__divdf3+0x710>
   15f00:	4a7fff84 	addi	r9,r9,-2
   15f04:	2409883a 	add	r4,r4,r16
   15f08:	8822943a 	slli	r17,r17,16
   15f0c:	a80ed43a 	srli	r7,r21,16
   15f10:	aa3fffcc 	andi	r8,r21,65535
   15f14:	4c62b03a 	or	r17,r9,r17
   15f18:	8816d43a 	srli	r11,r17,16
   15f1c:	897fffcc 	andi	r5,r17,65535
   15f20:	2a15383a 	mul	r10,r5,r8
   15f24:	5a19383a 	mul	r12,r11,r8
   15f28:	29cb383a 	mul	r5,r5,r7
   15f2c:	5012d43a 	srli	r9,r10,16
   15f30:	20c5c83a 	sub	r2,r4,r3
   15f34:	614b883a 	add	r5,r12,r5
   15f38:	2a4b883a 	add	r5,r5,r9
   15f3c:	59c7383a 	mul	r3,r11,r7
   15f40:	2b00022e 	bgeu	r5,r12,15f4c <__divdf3+0x450>
   15f44:	01000074 	movhi	r4,1
   15f48:	1907883a 	add	r3,r3,r4
   15f4c:	2808d43a 	srli	r4,r5,16
   15f50:	280a943a 	slli	r5,r5,16
   15f54:	54ffffcc 	andi	r19,r10,65535
   15f58:	1907883a 	add	r3,r3,r4
   15f5c:	2ccb883a 	add	r5,r5,r19
   15f60:	10c09336 	bltu	r2,r3,161b0 <__divdf3+0x6b4>
   15f64:	10c0ad26 	beq	r2,r3,1621c <__divdf3+0x720>
   15f68:	10c7c83a 	sub	r3,r2,r3
   15f6c:	3167c83a 	sub	r19,r6,r5
   15f70:	34ed803a 	cmpltu	r22,r6,r19
   15f74:	1dadc83a 	sub	r22,r3,r22
   15f78:	b400b226 	beq	r22,r16,16244 <__divdf3+0x748>
   15f7c:	b009883a 	mov	r4,r22
   15f80:	b80b883a 	mov	r5,r23
   15f84:	d9c00115 	stw	r7,4(sp)
   15f88:	da000215 	stw	r8,8(sp)
   15f8c:	00152500 	call	15250 <__udivsi3>
   15f90:	b009883a 	mov	r4,r22
   15f94:	b80b883a 	mov	r5,r23
   15f98:	d8800315 	stw	r2,12(sp)
   15f9c:	00152580 	call	15258 <__umodsi3>
   15fa0:	d9800317 	ldw	r6,12(sp)
   15fa4:	1004943a 	slli	r2,r2,16
   15fa8:	9808d43a 	srli	r4,r19,16
   15fac:	372d383a 	mul	r22,r6,fp
   15fb0:	d9c00117 	ldw	r7,4(sp)
   15fb4:	1106b03a 	or	r3,r2,r4
   15fb8:	da000217 	ldw	r8,8(sp)
   15fbc:	1d80062e 	bgeu	r3,r22,15fd8 <__divdf3+0x4dc>
   15fc0:	1c07883a 	add	r3,r3,r16
   15fc4:	30bfffc4 	addi	r2,r6,-1
   15fc8:	1c00a036 	bltu	r3,r16,1624c <__divdf3+0x750>
   15fcc:	1d809f2e 	bgeu	r3,r22,1624c <__divdf3+0x750>
   15fd0:	31bfff84 	addi	r6,r6,-2
   15fd4:	1c07883a 	add	r3,r3,r16
   15fd8:	1dadc83a 	sub	r22,r3,r22
   15fdc:	b009883a 	mov	r4,r22
   15fe0:	b80b883a 	mov	r5,r23
   15fe4:	d9800315 	stw	r6,12(sp)
   15fe8:	d9c00115 	stw	r7,4(sp)
   15fec:	da000215 	stw	r8,8(sp)
   15ff0:	00152500 	call	15250 <__udivsi3>
   15ff4:	b009883a 	mov	r4,r22
   15ff8:	b80b883a 	mov	r5,r23
   15ffc:	d8800015 	stw	r2,0(sp)
   16000:	00152580 	call	15258 <__umodsi3>
   16004:	da400017 	ldw	r9,0(sp)
   16008:	1004943a 	slli	r2,r2,16
   1600c:	993fffcc 	andi	r4,r19,65535
   16010:	4f39383a 	mul	fp,r9,fp
   16014:	1106b03a 	or	r3,r2,r4
   16018:	d9800317 	ldw	r6,12(sp)
   1601c:	d9c00117 	ldw	r7,4(sp)
   16020:	da000217 	ldw	r8,8(sp)
   16024:	1f00062e 	bgeu	r3,fp,16040 <__divdf3+0x544>
   16028:	1c07883a 	add	r3,r3,r16
   1602c:	48bfffc4 	addi	r2,r9,-1
   16030:	1c008836 	bltu	r3,r16,16254 <__divdf3+0x758>
   16034:	1f00872e 	bgeu	r3,fp,16254 <__divdf3+0x758>
   16038:	4a7fff84 	addi	r9,r9,-2
   1603c:	1c07883a 	add	r3,r3,r16
   16040:	3008943a 	slli	r4,r6,16
   16044:	1f07c83a 	sub	r3,r3,fp
   16048:	4926b03a 	or	r19,r9,r4
   1604c:	993fffcc 	andi	r4,r19,65535
   16050:	980cd43a 	srli	r6,r19,16
   16054:	220b383a 	mul	r5,r4,r8
   16058:	21c5383a 	mul	r2,r4,r7
   1605c:	3211383a 	mul	r8,r6,r8
   16060:	2808d43a 	srli	r4,r5,16
   16064:	31cf383a 	mul	r7,r6,r7
   16068:	4085883a 	add	r2,r8,r2
   1606c:	1105883a 	add	r2,r2,r4
   16070:	1200022e 	bgeu	r2,r8,1607c <__divdf3+0x580>
   16074:	01000074 	movhi	r4,1
   16078:	390f883a 	add	r7,r7,r4
   1607c:	1008d43a 	srli	r4,r2,16
   16080:	1004943a 	slli	r2,r2,16
   16084:	297fffcc 	andi	r5,r5,65535
   16088:	390f883a 	add	r7,r7,r4
   1608c:	1145883a 	add	r2,r2,r5
   16090:	19c06536 	bltu	r3,r7,16228 <__divdf3+0x72c>
   16094:	19c09f26 	beq	r3,r7,16314 <__divdf3+0x818>
   16098:	9cc00054 	ori	r19,r19,1
   1609c:	a100ffc4 	addi	r4,r20,1023
   160a0:	013f500e 	bge	zero,r4,15de4 <__alt_mem_descriptor_memory+0xdefd5de4>
   160a4:	988001cc 	andi	r2,r19,7
   160a8:	10000726 	beq	r2,zero,160c8 <__divdf3+0x5cc>
   160ac:	98c003cc 	andi	r3,r19,15
   160b0:	00800104 	movi	r2,4
   160b4:	18800426 	beq	r3,r2,160c8 <__divdf3+0x5cc>
   160b8:	9885883a 	add	r2,r19,r2
   160bc:	14e1803a 	cmpltu	r16,r2,r19
   160c0:	8c23883a 	add	r17,r17,r16
   160c4:	1027883a 	mov	r19,r2
   160c8:	8880402c 	andhi	r2,r17,256
   160cc:	10000426 	beq	r2,zero,160e0 <__divdf3+0x5e4>
   160d0:	00bfc034 	movhi	r2,65280
   160d4:	10bfffc4 	addi	r2,r2,-1
   160d8:	a1010004 	addi	r4,r20,1024
   160dc:	88a2703a 	and	r17,r17,r2
   160e0:	0081ff84 	movi	r2,2046
   160e4:	113edf16 	blt	r2,r4,15c64 <__alt_mem_descriptor_memory+0xdefd5c64>
   160e8:	9826d0fa 	srli	r19,r19,3
   160ec:	8804977a 	slli	r2,r17,29
   160f0:	8820927a 	slli	r16,r17,9
   160f4:	2101ffcc 	andi	r4,r4,2047
   160f8:	14e6b03a 	or	r19,r2,r19
   160fc:	800ad33a 	srli	r5,r16,12
   16100:	9180004c 	andi	r6,r18,1
   16104:	003edb06 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   16108:	008000c4 	movi	r2,3
   1610c:	4080a826 	beq	r8,r2,163b0 <__divdf3+0x8b4>
   16110:	00800044 	movi	r2,1
   16114:	4080551e 	bne	r8,r2,1626c <__divdf3+0x770>
   16118:	e00d883a 	mov	r6,fp
   1611c:	0009883a 	mov	r4,zero
   16120:	000b883a 	mov	r5,zero
   16124:	0027883a 	mov	r19,zero
   16128:	003ed206 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   1612c:	00800434 	movhi	r2,16
   16130:	89400234 	orhi	r5,r17,8
   16134:	10bfffc4 	addi	r2,r2,-1
   16138:	b00d883a 	mov	r6,r22
   1613c:	288a703a 	and	r5,r5,r2
   16140:	003f2606 	br	15ddc <__alt_mem_descriptor_memory+0xdefd5ddc>
   16144:	d9800315 	stw	r6,12(sp)
   16148:	d9c00115 	stw	r7,4(sp)
   1614c:	00177fc0 	call	177fc <__clzsi2>
   16150:	10c00804 	addi	r3,r2,32
   16154:	010009c4 	movi	r4,39
   16158:	d9800317 	ldw	r6,12(sp)
   1615c:	d9c00117 	ldw	r7,4(sp)
   16160:	20fee30e 	bge	r4,r3,15cf0 <__alt_mem_descriptor_memory+0xdefd5cf0>
   16164:	117ffe04 	addi	r5,r2,-8
   16168:	9162983a 	sll	r17,r18,r5
   1616c:	0027883a 	mov	r19,zero
   16170:	003ee606 	br	15d0c <__alt_mem_descriptor_memory+0xdefd5d0c>
   16174:	3009883a 	mov	r4,r6
   16178:	d9800315 	stw	r6,12(sp)
   1617c:	da000215 	stw	r8,8(sp)
   16180:	da400015 	stw	r9,0(sp)
   16184:	00177fc0 	call	177fc <__clzsi2>
   16188:	10c00804 	addi	r3,r2,32
   1618c:	010009c4 	movi	r4,39
   16190:	d9800317 	ldw	r6,12(sp)
   16194:	da000217 	ldw	r8,8(sp)
   16198:	da400017 	ldw	r9,0(sp)
   1619c:	20fef20e 	bge	r4,r3,15d68 <__alt_mem_descriptor_memory+0xdefd5d68>
   161a0:	10bffe04 	addi	r2,r2,-8
   161a4:	a8a0983a 	sll	r16,r21,r2
   161a8:	002b883a 	mov	r21,zero
   161ac:	003ef506 	br	15d84 <__alt_mem_descriptor_memory+0xdefd5d84>
   161b0:	354d883a 	add	r6,r6,r21
   161b4:	3549803a 	cmpltu	r4,r6,r21
   161b8:	2409883a 	add	r4,r4,r16
   161bc:	2089883a 	add	r4,r4,r2
   161c0:	88bfffc4 	addi	r2,r17,-1
   161c4:	81000c2e 	bgeu	r16,r4,161f8 <__divdf3+0x6fc>
   161c8:	20c04436 	bltu	r4,r3,162dc <__divdf3+0x7e0>
   161cc:	19006f26 	beq	r3,r4,1638c <__divdf3+0x890>
   161d0:	20c7c83a 	sub	r3,r4,r3
   161d4:	1023883a 	mov	r17,r2
   161d8:	003f6406 	br	15f6c <__alt_mem_descriptor_memory+0xdefd5f6c>
   161dc:	9d7f1736 	bltu	r19,r21,15e3c <__alt_mem_descriptor_memory+0xdefd5e3c>
   161e0:	9806d07a 	srli	r3,r19,1
   161e4:	880497fa 	slli	r2,r17,31
   161e8:	980c97fa 	slli	r6,r19,31
   161ec:	882cd07a 	srli	r22,r17,1
   161f0:	18a6b03a 	or	r19,r3,r2
   161f4:	003f1406 	br	15e48 <__alt_mem_descriptor_memory+0xdefd5e48>
   161f8:	243ff51e 	bne	r4,r16,161d0 <__alt_mem_descriptor_memory+0xdefd61d0>
   161fc:	357ff22e 	bgeu	r6,r21,161c8 <__alt_mem_descriptor_memory+0xdefd61c8>
   16200:	80c7c83a 	sub	r3,r16,r3
   16204:	1023883a 	mov	r17,r2
   16208:	003f5806 	br	15f6c <__alt_mem_descriptor_memory+0xdefd5f6c>
   1620c:	1013883a 	mov	r9,r2
   16210:	003f3d06 	br	15f08 <__alt_mem_descriptor_memory+0xdefd5f08>
   16214:	1023883a 	mov	r17,r2
   16218:	003f2506 	br	15eb0 <__alt_mem_descriptor_memory+0xdefd5eb0>
   1621c:	317fe436 	bltu	r6,r5,161b0 <__alt_mem_descriptor_memory+0xdefd61b0>
   16220:	0007883a 	mov	r3,zero
   16224:	003f5106 	br	15f6c <__alt_mem_descriptor_memory+0xdefd5f6c>
   16228:	1c07883a 	add	r3,r3,r16
   1622c:	993fffc4 	addi	r4,r19,-1
   16230:	1c000a2e 	bgeu	r3,r16,1625c <__divdf3+0x760>
   16234:	2027883a 	mov	r19,r4
   16238:	19ff971e 	bne	r3,r7,16098 <__alt_mem_descriptor_memory+0xdefd6098>
   1623c:	a8bf961e 	bne	r21,r2,16098 <__alt_mem_descriptor_memory+0xdefd6098>
   16240:	003f9606 	br	1609c <__alt_mem_descriptor_memory+0xdefd609c>
   16244:	04ffffc4 	movi	r19,-1
   16248:	003f9406 	br	1609c <__alt_mem_descriptor_memory+0xdefd609c>
   1624c:	100d883a 	mov	r6,r2
   16250:	003f6106 	br	15fd8 <__alt_mem_descriptor_memory+0xdefd5fd8>
   16254:	1013883a 	mov	r9,r2
   16258:	003f7906 	br	16040 <__alt_mem_descriptor_memory+0xdefd6040>
   1625c:	19c02636 	bltu	r3,r7,162f8 <__divdf3+0x7fc>
   16260:	38c04d26 	beq	r7,r3,16398 <__divdf3+0x89c>
   16264:	2027883a 	mov	r19,r4
   16268:	003f8b06 	br	16098 <__alt_mem_descriptor_memory+0xdefd6098>
   1626c:	e025883a 	mov	r18,fp
   16270:	003f8a06 	br	1609c <__alt_mem_descriptor_memory+0xdefd609c>
   16274:	008007c4 	movi	r2,31
   16278:	14002a16 	blt	r2,r16,16324 <__divdf3+0x828>
   1627c:	a5010784 	addi	r20,r20,1054
   16280:	8d04983a 	sll	r2,r17,r20
   16284:	9c06d83a 	srl	r3,r19,r16
   16288:	9d28983a 	sll	r20,r19,r20
   1628c:	8c20d83a 	srl	r16,r17,r16
   16290:	1886b03a 	or	r3,r3,r2
   16294:	a004c03a 	cmpne	r2,r20,zero
   16298:	1884b03a 	or	r2,r3,r2
   1629c:	10c001cc 	andi	r3,r2,7
   162a0:	18000726 	beq	r3,zero,162c0 <__divdf3+0x7c4>
   162a4:	110003cc 	andi	r4,r2,15
   162a8:	00c00104 	movi	r3,4
   162ac:	20c00426 	beq	r4,r3,162c0 <__divdf3+0x7c4>
   162b0:	10c00104 	addi	r3,r2,4
   162b4:	1885803a 	cmpltu	r2,r3,r2
   162b8:	80a1883a 	add	r16,r16,r2
   162bc:	1805883a 	mov	r2,r3
   162c0:	80c0202c 	andhi	r3,r16,128
   162c4:	18002d26 	beq	r3,zero,1637c <__divdf3+0x880>
   162c8:	9180004c 	andi	r6,r18,1
   162cc:	01000044 	movi	r4,1
   162d0:	000b883a 	mov	r5,zero
   162d4:	0027883a 	mov	r19,zero
   162d8:	003e6606 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   162dc:	354d883a 	add	r6,r6,r21
   162e0:	356d803a 	cmpltu	r22,r6,r21
   162e4:	b42d883a 	add	r22,r22,r16
   162e8:	b12d883a 	add	r22,r22,r4
   162ec:	8c7fff84 	addi	r17,r17,-2
   162f0:	b0c7c83a 	sub	r3,r22,r3
   162f4:	003f1d06 	br	15f6c <__alt_mem_descriptor_memory+0xdefd5f6c>
   162f8:	ad4b883a 	add	r5,r21,r21
   162fc:	2d6b803a 	cmpltu	r21,r5,r21
   16300:	ac2b883a 	add	r21,r21,r16
   16304:	1d47883a 	add	r3,r3,r21
   16308:	993fff84 	addi	r4,r19,-2
   1630c:	282b883a 	mov	r21,r5
   16310:	003fc806 	br	16234 <__alt_mem_descriptor_memory+0xdefd6234>
   16314:	103fc41e 	bne	r2,zero,16228 <__alt_mem_descriptor_memory+0xdefd6228>
   16318:	002b883a 	mov	r21,zero
   1631c:	a8bf5e1e 	bne	r21,r2,16098 <__alt_mem_descriptor_memory+0xdefd6098>
   16320:	003f5e06 	br	1609c <__alt_mem_descriptor_memory+0xdefd609c>
   16324:	00bef884 	movi	r2,-1054
   16328:	1505c83a 	sub	r2,r2,r20
   1632c:	00c00804 	movi	r3,32
   16330:	8884d83a 	srl	r2,r17,r2
   16334:	80c01c26 	beq	r16,r3,163a8 <__divdf3+0x8ac>
   16338:	a0c10f84 	addi	r3,r20,1086
   1633c:	88c6983a 	sll	r3,r17,r3
   16340:	1cc6b03a 	or	r3,r3,r19
   16344:	1806c03a 	cmpne	r3,r3,zero
   16348:	1884b03a 	or	r2,r3,r2
   1634c:	140001cc 	andi	r16,r2,7
   16350:	8000061e 	bne	r16,zero,1636c <__divdf3+0x870>
   16354:	000b883a 	mov	r5,zero
   16358:	1004d0fa 	srli	r2,r2,3
   1635c:	9180004c 	andi	r6,r18,1
   16360:	0009883a 	mov	r4,zero
   16364:	1426b03a 	or	r19,r2,r16
   16368:	003e4206 	br	15c74 <__alt_mem_descriptor_memory+0xdefd5c74>
   1636c:	110003cc 	andi	r4,r2,15
   16370:	00c00104 	movi	r3,4
   16374:	0021883a 	mov	r16,zero
   16378:	20ffcd1e 	bne	r4,r3,162b0 <__alt_mem_descriptor_memory+0xdefd62b0>
   1637c:	800a927a 	slli	r5,r16,9
   16380:	8020977a 	slli	r16,r16,29
   16384:	280ad33a 	srli	r5,r5,12
   16388:	003ff306 	br	16358 <__alt_mem_descriptor_memory+0xdefd6358>
   1638c:	317fd336 	bltu	r6,r5,162dc <__alt_mem_descriptor_memory+0xdefd62dc>
   16390:	1023883a 	mov	r17,r2
   16394:	003fa206 	br	16220 <__alt_mem_descriptor_memory+0xdefd6220>
   16398:	a8bfd736 	bltu	r21,r2,162f8 <__alt_mem_descriptor_memory+0xdefd62f8>
   1639c:	2027883a 	mov	r19,r4
   163a0:	a8bf3d1e 	bne	r21,r2,16098 <__alt_mem_descriptor_memory+0xdefd6098>
   163a4:	003f3d06 	br	1609c <__alt_mem_descriptor_memory+0xdefd609c>
   163a8:	0007883a 	mov	r3,zero
   163ac:	003fe406 	br	16340 <__alt_mem_descriptor_memory+0xdefd6340>
   163b0:	00800434 	movhi	r2,16
   163b4:	89400234 	orhi	r5,r17,8
   163b8:	10bfffc4 	addi	r2,r2,-1
   163bc:	e00d883a 	mov	r6,fp
   163c0:	288a703a 	and	r5,r5,r2
   163c4:	003e8506 	br	15ddc <__alt_mem_descriptor_memory+0xdefd5ddc>

000163c8 <__eqdf2>:
   163c8:	2804d53a 	srli	r2,r5,20
   163cc:	3806d53a 	srli	r3,r7,20
   163d0:	02000434 	movhi	r8,16
   163d4:	423fffc4 	addi	r8,r8,-1
   163d8:	1081ffcc 	andi	r2,r2,2047
   163dc:	0241ffc4 	movi	r9,2047
   163e0:	2a14703a 	and	r10,r5,r8
   163e4:	18c1ffcc 	andi	r3,r3,2047
   163e8:	3a10703a 	and	r8,r7,r8
   163ec:	280ad7fa 	srli	r5,r5,31
   163f0:	380ed7fa 	srli	r7,r7,31
   163f4:	12400f26 	beq	r2,r9,16434 <__eqdf2+0x6c>
   163f8:	0241ffc4 	movi	r9,2047
   163fc:	1a400326 	beq	r3,r9,1640c <__eqdf2+0x44>
   16400:	10c00526 	beq	r2,r3,16418 <__eqdf2+0x50>
   16404:	00800044 	movi	r2,1
   16408:	f800283a 	ret
   1640c:	4192b03a 	or	r9,r8,r6
   16410:	483ffc1e 	bne	r9,zero,16404 <__alt_mem_descriptor_memory+0xdefd6404>
   16414:	10fffb1e 	bne	r2,r3,16404 <__alt_mem_descriptor_memory+0xdefd6404>
   16418:	523ffa1e 	bne	r10,r8,16404 <__alt_mem_descriptor_memory+0xdefd6404>
   1641c:	21bff91e 	bne	r4,r6,16404 <__alt_mem_descriptor_memory+0xdefd6404>
   16420:	29c00826 	beq	r5,r7,16444 <__eqdf2+0x7c>
   16424:	103ff71e 	bne	r2,zero,16404 <__alt_mem_descriptor_memory+0xdefd6404>
   16428:	5104b03a 	or	r2,r10,r4
   1642c:	1004c03a 	cmpne	r2,r2,zero
   16430:	f800283a 	ret
   16434:	5112b03a 	or	r9,r10,r4
   16438:	483fef26 	beq	r9,zero,163f8 <__alt_mem_descriptor_memory+0xdefd63f8>
   1643c:	00800044 	movi	r2,1
   16440:	f800283a 	ret
   16444:	0005883a 	mov	r2,zero
   16448:	f800283a 	ret

0001644c <__gedf2>:
   1644c:	2804d53a 	srli	r2,r5,20
   16450:	3806d53a 	srli	r3,r7,20
   16454:	02000434 	movhi	r8,16
   16458:	423fffc4 	addi	r8,r8,-1
   1645c:	0241ffc4 	movi	r9,2047
   16460:	1081ffcc 	andi	r2,r2,2047
   16464:	2a14703a 	and	r10,r5,r8
   16468:	1a46703a 	and	r3,r3,r9
   1646c:	3a10703a 	and	r8,r7,r8
   16470:	280ad7fa 	srli	r5,r5,31
   16474:	380ed7fa 	srli	r7,r7,31
   16478:	12400b26 	beq	r2,r9,164a8 <__gedf2+0x5c>
   1647c:	1a401626 	beq	r3,r9,164d8 <__gedf2+0x8c>
   16480:	10000c1e 	bne	r2,zero,164b4 <__gedf2+0x68>
   16484:	5112b03a 	or	r9,r10,r4
   16488:	4813003a 	cmpeq	r9,r9,zero
   1648c:	4817883a 	mov	r11,r9
   16490:	18000c1e 	bne	r3,zero,164c4 <__gedf2+0x78>
   16494:	4198b03a 	or	r12,r8,r6
   16498:	60000a1e 	bne	r12,zero,164c4 <__gedf2+0x78>
   1649c:	48001326 	beq	r9,zero,164ec <__gedf2+0xa0>
   164a0:	0005883a 	mov	r2,zero
   164a4:	f800283a 	ret
   164a8:	5112b03a 	or	r9,r10,r4
   164ac:	4800191e 	bne	r9,zero,16514 <__gedf2+0xc8>
   164b0:	18800926 	beq	r3,r2,164d8 <__gedf2+0x8c>
   164b4:	18000b1e 	bne	r3,zero,164e4 <__gedf2+0x98>
   164b8:	4192b03a 	or	r9,r8,r6
   164bc:	0017883a 	mov	r11,zero
   164c0:	48000a26 	beq	r9,zero,164ec <__gedf2+0xa0>
   164c4:	39c03fcc 	andi	r7,r7,255
   164c8:	58000726 	beq	r11,zero,164e8 <__gedf2+0x9c>
   164cc:	3800081e 	bne	r7,zero,164f0 <__gedf2+0xa4>
   164d0:	00bfffc4 	movi	r2,-1
   164d4:	f800283a 	ret
   164d8:	4192b03a 	or	r9,r8,r6
   164dc:	48000d1e 	bne	r9,zero,16514 <__gedf2+0xc8>
   164e0:	103fe826 	beq	r2,zero,16484 <__alt_mem_descriptor_memory+0xdefd6484>
   164e4:	39c03fcc 	andi	r7,r7,255
   164e8:	29c00326 	beq	r5,r7,164f8 <__gedf2+0xac>
   164ec:	283ff81e 	bne	r5,zero,164d0 <__alt_mem_descriptor_memory+0xdefd64d0>
   164f0:	00800044 	movi	r2,1
   164f4:	f800283a 	ret
   164f8:	18bffc16 	blt	r3,r2,164ec <__alt_mem_descriptor_memory+0xdefd64ec>
   164fc:	10c00316 	blt	r2,r3,1650c <__gedf2+0xc0>
   16500:	42bffa36 	bltu	r8,r10,164ec <__alt_mem_descriptor_memory+0xdefd64ec>
   16504:	52000526 	beq	r10,r8,1651c <__gedf2+0xd0>
   16508:	523fe52e 	bgeu	r10,r8,164a0 <__alt_mem_descriptor_memory+0xdefd64a0>
   1650c:	283ff026 	beq	r5,zero,164d0 <__alt_mem_descriptor_memory+0xdefd64d0>
   16510:	003ff706 	br	164f0 <__alt_mem_descriptor_memory+0xdefd64f0>
   16514:	00bfff84 	movi	r2,-2
   16518:	f800283a 	ret
   1651c:	313ff336 	bltu	r6,r4,164ec <__alt_mem_descriptor_memory+0xdefd64ec>
   16520:	21bfdf2e 	bgeu	r4,r6,164a0 <__alt_mem_descriptor_memory+0xdefd64a0>
   16524:	283fea26 	beq	r5,zero,164d0 <__alt_mem_descriptor_memory+0xdefd64d0>
   16528:	003ff106 	br	164f0 <__alt_mem_descriptor_memory+0xdefd64f0>

0001652c <__ledf2>:
   1652c:	2804d53a 	srli	r2,r5,20
   16530:	3810d53a 	srli	r8,r7,20
   16534:	00c00434 	movhi	r3,16
   16538:	18ffffc4 	addi	r3,r3,-1
   1653c:	0241ffc4 	movi	r9,2047
   16540:	1081ffcc 	andi	r2,r2,2047
   16544:	28d4703a 	and	r10,r5,r3
   16548:	4250703a 	and	r8,r8,r9
   1654c:	38c6703a 	and	r3,r7,r3
   16550:	280ad7fa 	srli	r5,r5,31
   16554:	380ed7fa 	srli	r7,r7,31
   16558:	12400b26 	beq	r2,r9,16588 <__ledf2+0x5c>
   1655c:	42401926 	beq	r8,r9,165c4 <__ledf2+0x98>
   16560:	10000c1e 	bne	r2,zero,16594 <__ledf2+0x68>
   16564:	5112b03a 	or	r9,r10,r4
   16568:	4813003a 	cmpeq	r9,r9,zero
   1656c:	4817883a 	mov	r11,r9
   16570:	40000f26 	beq	r8,zero,165b0 <__ledf2+0x84>
   16574:	39c03fcc 	andi	r7,r7,255
   16578:	58001826 	beq	r11,zero,165dc <__ledf2+0xb0>
   1657c:	38000a1e 	bne	r7,zero,165a8 <__ledf2+0x7c>
   16580:	00bfffc4 	movi	r2,-1
   16584:	f800283a 	ret
   16588:	5112b03a 	or	r9,r10,r4
   1658c:	48000f1e 	bne	r9,zero,165cc <__ledf2+0xa0>
   16590:	40800c26 	beq	r8,r2,165c4 <__ledf2+0x98>
   16594:	4000101e 	bne	r8,zero,165d8 <__ledf2+0xac>
   16598:	1992b03a 	or	r9,r3,r6
   1659c:	0017883a 	mov	r11,zero
   165a0:	483ff41e 	bne	r9,zero,16574 <__alt_mem_descriptor_memory+0xdefd6574>
   165a4:	283ff61e 	bne	r5,zero,16580 <__alt_mem_descriptor_memory+0xdefd6580>
   165a8:	00800044 	movi	r2,1
   165ac:	f800283a 	ret
   165b0:	1998b03a 	or	r12,r3,r6
   165b4:	603fef1e 	bne	r12,zero,16574 <__alt_mem_descriptor_memory+0xdefd6574>
   165b8:	483ffa26 	beq	r9,zero,165a4 <__alt_mem_descriptor_memory+0xdefd65a4>
   165bc:	0005883a 	mov	r2,zero
   165c0:	f800283a 	ret
   165c4:	1992b03a 	or	r9,r3,r6
   165c8:	48000226 	beq	r9,zero,165d4 <__ledf2+0xa8>
   165cc:	00800084 	movi	r2,2
   165d0:	f800283a 	ret
   165d4:	103fe326 	beq	r2,zero,16564 <__alt_mem_descriptor_memory+0xdefd6564>
   165d8:	39c03fcc 	andi	r7,r7,255
   165dc:	29fff11e 	bne	r5,r7,165a4 <__alt_mem_descriptor_memory+0xdefd65a4>
   165e0:	40bff016 	blt	r8,r2,165a4 <__alt_mem_descriptor_memory+0xdefd65a4>
   165e4:	12000316 	blt	r2,r8,165f4 <__ledf2+0xc8>
   165e8:	1abfee36 	bltu	r3,r10,165a4 <__alt_mem_descriptor_memory+0xdefd65a4>
   165ec:	50c00326 	beq	r10,r3,165fc <__ledf2+0xd0>
   165f0:	50fff22e 	bgeu	r10,r3,165bc <__alt_mem_descriptor_memory+0xdefd65bc>
   165f4:	283fe226 	beq	r5,zero,16580 <__alt_mem_descriptor_memory+0xdefd6580>
   165f8:	003feb06 	br	165a8 <__alt_mem_descriptor_memory+0xdefd65a8>
   165fc:	313fe936 	bltu	r6,r4,165a4 <__alt_mem_descriptor_memory+0xdefd65a4>
   16600:	21bfee2e 	bgeu	r4,r6,165bc <__alt_mem_descriptor_memory+0xdefd65bc>
   16604:	283fde26 	beq	r5,zero,16580 <__alt_mem_descriptor_memory+0xdefd6580>
   16608:	003fe706 	br	165a8 <__alt_mem_descriptor_memory+0xdefd65a8>

0001660c <__muldf3>:
   1660c:	defff204 	addi	sp,sp,-56
   16610:	2804d53a 	srli	r2,r5,20
   16614:	dd800a15 	stw	r22,40(sp)
   16618:	282cd7fa 	srli	r22,r5,31
   1661c:	dc000415 	stw	r16,16(sp)
   16620:	04000434 	movhi	r16,16
   16624:	df000c15 	stw	fp,48(sp)
   16628:	dd000815 	stw	r20,32(sp)
   1662c:	dcc00715 	stw	r19,28(sp)
   16630:	dc800615 	stw	r18,24(sp)
   16634:	dc400515 	stw	r17,20(sp)
   16638:	843fffc4 	addi	r16,r16,-1
   1663c:	dfc00d15 	stw	ra,52(sp)
   16640:	ddc00b15 	stw	r23,44(sp)
   16644:	dd400915 	stw	r21,36(sp)
   16648:	1501ffcc 	andi	r20,r2,2047
   1664c:	2023883a 	mov	r17,r4
   16650:	2025883a 	mov	r18,r4
   16654:	2c20703a 	and	r16,r5,r16
   16658:	b027883a 	mov	r19,r22
   1665c:	b7003fcc 	andi	fp,r22,255
   16660:	a0005926 	beq	r20,zero,167c8 <__muldf3+0x1bc>
   16664:	0081ffc4 	movi	r2,2047
   16668:	a0803426 	beq	r20,r2,1673c <__muldf3+0x130>
   1666c:	84000434 	orhi	r16,r16,16
   16670:	2004d77a 	srli	r2,r4,29
   16674:	802090fa 	slli	r16,r16,3
   16678:	202490fa 	slli	r18,r4,3
   1667c:	a53f0044 	addi	r20,r20,-1023
   16680:	80a0b03a 	or	r16,r16,r2
   16684:	002b883a 	mov	r21,zero
   16688:	0015883a 	mov	r10,zero
   1668c:	3812d53a 	srli	r9,r7,20
   16690:	3806d7fa 	srli	r3,r7,31
   16694:	02000434 	movhi	r8,16
   16698:	423fffc4 	addi	r8,r8,-1
   1669c:	4941ffcc 	andi	r5,r9,2047
   166a0:	302f883a 	mov	r23,r6
   166a4:	3a22703a 	and	r17,r7,r8
   166a8:	1ac03fcc 	andi	r11,r3,255
   166ac:	28006226 	beq	r5,zero,16838 <__muldf3+0x22c>
   166b0:	0081ffc4 	movi	r2,2047
   166b4:	28805a26 	beq	r5,r2,16820 <__muldf3+0x214>
   166b8:	8a000434 	orhi	r8,r17,16
   166bc:	3004d77a 	srli	r2,r6,29
   166c0:	401090fa 	slli	r8,r8,3
   166c4:	302e90fa 	slli	r23,r6,3
   166c8:	297f0044 	addi	r5,r5,-1023
   166cc:	40a2b03a 	or	r17,r8,r2
   166d0:	0013883a 	mov	r9,zero
   166d4:	4d4cb03a 	or	r6,r9,r21
   166d8:	300c90ba 	slli	r6,r6,2
   166dc:	02000074 	movhi	r8,1
   166e0:	4219bf04 	addi	r8,r8,26364
   166e4:	320d883a 	add	r6,r6,r8
   166e8:	31800017 	ldw	r6,0(r6)
   166ec:	a14b883a 	add	r5,r20,r5
   166f0:	1dacf03a 	xor	r22,r3,r22
   166f4:	2b000044 	addi	r12,r5,1
   166f8:	3000683a 	jmp	r6
   166fc:	00016938 	rdprs	zero,zero,1444
   16700:	00016924 	muli	zero,zero,1444
   16704:	00016924 	muli	zero,zero,1444
   16708:	00016910 	cmplti	zero,zero,1444
   1670c:	00016758 	cmpnei	zero,zero,1437
   16710:	00016758 	cmpnei	zero,zero,1437
   16714:	000168f8 	rdprs	zero,zero,1443
   16718:	00016910 	cmplti	zero,zero,1444
   1671c:	00016758 	cmpnei	zero,zero,1437
   16720:	000168f8 	rdprs	zero,zero,1443
   16724:	00016758 	cmpnei	zero,zero,1437
   16728:	00016910 	cmplti	zero,zero,1444
   1672c:	0001675c 	xori	zero,zero,1437
   16730:	0001675c 	xori	zero,zero,1437
   16734:	0001675c 	xori	zero,zero,1437
   16738:	00016b34 	movhi	zero,1452
   1673c:	8104b03a 	or	r2,r16,r4
   16740:	10006a1e 	bne	r2,zero,168ec <__muldf3+0x2e0>
   16744:	05400204 	movi	r21,8
   16748:	0021883a 	mov	r16,zero
   1674c:	0025883a 	mov	r18,zero
   16750:	02800084 	movi	r10,2
   16754:	003fcd06 	br	1668c <__alt_mem_descriptor_memory+0xdefd668c>
   16758:	b039883a 	mov	fp,r22
   1675c:	00800084 	movi	r2,2
   16760:	50804e1e 	bne	r10,r2,1689c <__muldf3+0x290>
   16764:	e4c0004c 	andi	r19,fp,1
   16768:	0101ffc4 	movi	r4,2047
   1676c:	0021883a 	mov	r16,zero
   16770:	0025883a 	mov	r18,zero
   16774:	2008953a 	slli	r4,r4,20
   16778:	98c03fcc 	andi	r3,r19,255
   1677c:	01400434 	movhi	r5,16
   16780:	297fffc4 	addi	r5,r5,-1
   16784:	180697fa 	slli	r3,r3,31
   16788:	8160703a 	and	r16,r16,r5
   1678c:	8120b03a 	or	r16,r16,r4
   16790:	80c6b03a 	or	r3,r16,r3
   16794:	9005883a 	mov	r2,r18
   16798:	dfc00d17 	ldw	ra,52(sp)
   1679c:	df000c17 	ldw	fp,48(sp)
   167a0:	ddc00b17 	ldw	r23,44(sp)
   167a4:	dd800a17 	ldw	r22,40(sp)
   167a8:	dd400917 	ldw	r21,36(sp)
   167ac:	dd000817 	ldw	r20,32(sp)
   167b0:	dcc00717 	ldw	r19,28(sp)
   167b4:	dc800617 	ldw	r18,24(sp)
   167b8:	dc400517 	ldw	r17,20(sp)
   167bc:	dc000417 	ldw	r16,16(sp)
   167c0:	dec00e04 	addi	sp,sp,56
   167c4:	f800283a 	ret
   167c8:	8104b03a 	or	r2,r16,r4
   167cc:	10004226 	beq	r2,zero,168d8 <__muldf3+0x2cc>
   167d0:	8000f926 	beq	r16,zero,16bb8 <__muldf3+0x5ac>
   167d4:	8009883a 	mov	r4,r16
   167d8:	d9800315 	stw	r6,12(sp)
   167dc:	d9c00015 	stw	r7,0(sp)
   167e0:	00177fc0 	call	177fc <__clzsi2>
   167e4:	d9800317 	ldw	r6,12(sp)
   167e8:	d9c00017 	ldw	r7,0(sp)
   167ec:	1007883a 	mov	r3,r2
   167f0:	01000a04 	movi	r4,40
   167f4:	18bffe04 	addi	r2,r3,-8
   167f8:	20c9c83a 	sub	r4,r4,r3
   167fc:	80a0983a 	sll	r16,r16,r2
   16800:	8908d83a 	srl	r4,r17,r4
   16804:	88a4983a 	sll	r18,r17,r2
   16808:	2420b03a 	or	r16,r4,r16
   1680c:	017f0344 	movi	r5,-1011
   16810:	28e9c83a 	sub	r20,r5,r3
   16814:	002b883a 	mov	r21,zero
   16818:	0015883a 	mov	r10,zero
   1681c:	003f9b06 	br	1668c <__alt_mem_descriptor_memory+0xdefd668c>
   16820:	8984b03a 	or	r2,r17,r6
   16824:	10002a1e 	bne	r2,zero,168d0 <__muldf3+0x2c4>
   16828:	0023883a 	mov	r17,zero
   1682c:	002f883a 	mov	r23,zero
   16830:	02400084 	movi	r9,2
   16834:	003fa706 	br	166d4 <__alt_mem_descriptor_memory+0xdefd66d4>
   16838:	8984b03a 	or	r2,r17,r6
   1683c:	10002026 	beq	r2,zero,168c0 <__muldf3+0x2b4>
   16840:	8800cc26 	beq	r17,zero,16b74 <__muldf3+0x568>
   16844:	8809883a 	mov	r4,r17
   16848:	d8c00215 	stw	r3,8(sp)
   1684c:	d9800315 	stw	r6,12(sp)
   16850:	da800015 	stw	r10,0(sp)
   16854:	dac00115 	stw	r11,4(sp)
   16858:	00177fc0 	call	177fc <__clzsi2>
   1685c:	d8c00217 	ldw	r3,8(sp)
   16860:	d9800317 	ldw	r6,12(sp)
   16864:	da800017 	ldw	r10,0(sp)
   16868:	dac00117 	ldw	r11,4(sp)
   1686c:	1009883a 	mov	r4,r2
   16870:	01400a04 	movi	r5,40
   16874:	25fffe04 	addi	r23,r4,-8
   16878:	290bc83a 	sub	r5,r5,r4
   1687c:	8dd0983a 	sll	r8,r17,r23
   16880:	314ad83a 	srl	r5,r6,r5
   16884:	35ee983a 	sll	r23,r6,r23
   16888:	2a22b03a 	or	r17,r5,r8
   1688c:	017f0344 	movi	r5,-1011
   16890:	290bc83a 	sub	r5,r5,r4
   16894:	0013883a 	mov	r9,zero
   16898:	003f8e06 	br	166d4 <__alt_mem_descriptor_memory+0xdefd66d4>
   1689c:	008000c4 	movi	r2,3
   168a0:	50811d26 	beq	r10,r2,16d18 <__muldf3+0x70c>
   168a4:	00800044 	movi	r2,1
   168a8:	5080e01e 	bne	r10,r2,16c2c <__muldf3+0x620>
   168ac:	e0a6703a 	and	r19,fp,r2
   168b0:	0009883a 	mov	r4,zero
   168b4:	0021883a 	mov	r16,zero
   168b8:	0025883a 	mov	r18,zero
   168bc:	003fad06 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   168c0:	0023883a 	mov	r17,zero
   168c4:	002f883a 	mov	r23,zero
   168c8:	02400044 	movi	r9,1
   168cc:	003f8106 	br	166d4 <__alt_mem_descriptor_memory+0xdefd66d4>
   168d0:	024000c4 	movi	r9,3
   168d4:	003f7f06 	br	166d4 <__alt_mem_descriptor_memory+0xdefd66d4>
   168d8:	05400104 	movi	r21,4
   168dc:	0021883a 	mov	r16,zero
   168e0:	0025883a 	mov	r18,zero
   168e4:	02800044 	movi	r10,1
   168e8:	003f6806 	br	1668c <__alt_mem_descriptor_memory+0xdefd668c>
   168ec:	05400304 	movi	r21,12
   168f0:	028000c4 	movi	r10,3
   168f4:	003f6506 	br	1668c <__alt_mem_descriptor_memory+0xdefd668c>
   168f8:	04000434 	movhi	r16,16
   168fc:	0027883a 	mov	r19,zero
   16900:	843fffc4 	addi	r16,r16,-1
   16904:	04bfffc4 	movi	r18,-1
   16908:	0101ffc4 	movi	r4,2047
   1690c:	003f9906 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16910:	8821883a 	mov	r16,r17
   16914:	b825883a 	mov	r18,r23
   16918:	5839883a 	mov	fp,r11
   1691c:	4815883a 	mov	r10,r9
   16920:	003f8e06 	br	1675c <__alt_mem_descriptor_memory+0xdefd675c>
   16924:	8821883a 	mov	r16,r17
   16928:	b825883a 	mov	r18,r23
   1692c:	b039883a 	mov	fp,r22
   16930:	4815883a 	mov	r10,r9
   16934:	003f8906 	br	1675c <__alt_mem_descriptor_memory+0xdefd675c>
   16938:	b80cd43a 	srli	r6,r23,16
   1693c:	9006d43a 	srli	r3,r18,16
   16940:	90bfffcc 	andi	r2,r18,65535
   16944:	bdffffcc 	andi	r23,r23,65535
   16948:	b891383a 	mul	r8,r23,r2
   1694c:	b8c9383a 	mul	r4,r23,r3
   16950:	309b383a 	mul	r13,r6,r2
   16954:	400ed43a 	srli	r7,r8,16
   16958:	30df383a 	mul	r15,r6,r3
   1695c:	235b883a 	add	r13,r4,r13
   16960:	69db883a 	add	r13,r13,r7
   16964:	6900022e 	bgeu	r13,r4,16970 <__muldf3+0x364>
   16968:	01000074 	movhi	r4,1
   1696c:	791f883a 	add	r15,r15,r4
   16970:	8828d43a 	srli	r20,r17,16
   16974:	8c7fffcc 	andi	r17,r17,65535
   16978:	888f383a 	mul	r7,r17,r2
   1697c:	88d3383a 	mul	r9,r17,r3
   16980:	a0a5383a 	mul	r18,r20,r2
   16984:	3816d43a 	srli	r11,r7,16
   16988:	6814943a 	slli	r10,r13,16
   1698c:	4ca5883a 	add	r18,r9,r18
   16990:	423fffcc 	andi	r8,r8,65535
   16994:	92e5883a 	add	r18,r18,r11
   16998:	6808d43a 	srli	r4,r13,16
   1699c:	5215883a 	add	r10,r10,r8
   169a0:	a0c7383a 	mul	r3,r20,r3
   169a4:	9240022e 	bgeu	r18,r9,169b0 <__muldf3+0x3a4>
   169a8:	00800074 	movhi	r2,1
   169ac:	1887883a 	add	r3,r3,r2
   169b0:	802ad43a 	srli	r21,r16,16
   169b4:	80bfffcc 	andi	r2,r16,65535
   169b8:	b893383a 	mul	r9,r23,r2
   169bc:	3091383a 	mul	r8,r6,r2
   169c0:	bd6f383a 	mul	r23,r23,r21
   169c4:	9026943a 	slli	r19,r18,16
   169c8:	481ad43a 	srli	r13,r9,16
   169cc:	9024d43a 	srli	r18,r18,16
   169d0:	39ffffcc 	andi	r7,r7,65535
   169d4:	ba11883a 	add	r8,r23,r8
   169d8:	99e7883a 	add	r19,r19,r7
   169dc:	4351883a 	add	r8,r8,r13
   169e0:	1c97883a 	add	r11,r3,r18
   169e4:	354d383a 	mul	r6,r6,r21
   169e8:	9925883a 	add	r18,r19,r4
   169ec:	45c0022e 	bgeu	r8,r23,169f8 <__muldf3+0x3ec>
   169f0:	00c00074 	movhi	r3,1
   169f4:	30cd883a 	add	r6,r6,r3
   169f8:	8889383a 	mul	r4,r17,r2
   169fc:	8d63383a 	mul	r17,r17,r21
   16a00:	a085383a 	mul	r2,r20,r2
   16a04:	200ed43a 	srli	r7,r4,16
   16a08:	401cd43a 	srli	r14,r8,16
   16a0c:	401a943a 	slli	r13,r8,16
   16a10:	8885883a 	add	r2,r17,r2
   16a14:	4a3fffcc 	andi	r8,r9,65535
   16a18:	11c5883a 	add	r2,r2,r7
   16a1c:	339d883a 	add	r14,r6,r14
   16a20:	6a11883a 	add	r8,r13,r8
   16a24:	a561383a 	mul	r16,r20,r21
   16a28:	1440022e 	bgeu	r2,r17,16a34 <__muldf3+0x428>
   16a2c:	00c00074 	movhi	r3,1
   16a30:	80e1883a 	add	r16,r16,r3
   16a34:	1006943a 	slli	r3,r2,16
   16a38:	213fffcc 	andi	r4,r4,65535
   16a3c:	93db883a 	add	r13,r18,r15
   16a40:	1909883a 	add	r4,r3,r4
   16a44:	22c7883a 	add	r3,r4,r11
   16a48:	6cd3803a 	cmpltu	r9,r13,r19
   16a4c:	6a09883a 	add	r4,r13,r8
   16a50:	1a5b883a 	add	r13,r3,r9
   16a54:	2211803a 	cmpltu	r8,r4,r8
   16a58:	734d883a 	add	r6,r14,r13
   16a5c:	100ed43a 	srli	r7,r2,16
   16a60:	6a53803a 	cmpltu	r9,r13,r9
   16a64:	3205883a 	add	r2,r6,r8
   16a68:	1ac7803a 	cmpltu	r3,r3,r11
   16a6c:	1211803a 	cmpltu	r8,r2,r8
   16a70:	48c6b03a 	or	r3,r9,r3
   16a74:	338d803a 	cmpltu	r6,r6,r14
   16a78:	19c7883a 	add	r3,r3,r7
   16a7c:	418cb03a 	or	r6,r8,r6
   16a80:	1987883a 	add	r3,r3,r6
   16a84:	2024927a 	slli	r18,r4,9
   16a88:	1c07883a 	add	r3,r3,r16
   16a8c:	1806927a 	slli	r3,r3,9
   16a90:	1020d5fa 	srli	r16,r2,23
   16a94:	2008d5fa 	srli	r4,r4,23
   16a98:	9294b03a 	or	r10,r18,r10
   16a9c:	1004927a 	slli	r2,r2,9
   16aa0:	5024c03a 	cmpne	r18,r10,zero
   16aa4:	1c20b03a 	or	r16,r3,r16
   16aa8:	9108b03a 	or	r4,r18,r4
   16aac:	80c0402c 	andhi	r3,r16,256
   16ab0:	20a4b03a 	or	r18,r4,r2
   16ab4:	18000726 	beq	r3,zero,16ad4 <__muldf3+0x4c8>
   16ab8:	9006d07a 	srli	r3,r18,1
   16abc:	800897fa 	slli	r4,r16,31
   16ac0:	9080004c 	andi	r2,r18,1
   16ac4:	8020d07a 	srli	r16,r16,1
   16ac8:	10c4b03a 	or	r2,r2,r3
   16acc:	1124b03a 	or	r18,r2,r4
   16ad0:	600b883a 	mov	r5,r12
   16ad4:	2900ffc4 	addi	r4,r5,1023
   16ad8:	01004b0e 	bge	zero,r4,16c08 <__muldf3+0x5fc>
   16adc:	908001cc 	andi	r2,r18,7
   16ae0:	10000726 	beq	r2,zero,16b00 <__muldf3+0x4f4>
   16ae4:	90c003cc 	andi	r3,r18,15
   16ae8:	00800104 	movi	r2,4
   16aec:	18800426 	beq	r3,r2,16b00 <__muldf3+0x4f4>
   16af0:	9087883a 	add	r3,r18,r2
   16af4:	1c85803a 	cmpltu	r2,r3,r18
   16af8:	80a1883a 	add	r16,r16,r2
   16afc:	1825883a 	mov	r18,r3
   16b00:	8080402c 	andhi	r2,r16,256
   16b04:	10000426 	beq	r2,zero,16b18 <__muldf3+0x50c>
   16b08:	00bfc034 	movhi	r2,65280
   16b0c:	10bfffc4 	addi	r2,r2,-1
   16b10:	29010004 	addi	r4,r5,1024
   16b14:	80a0703a 	and	r16,r16,r2
   16b18:	0081ff84 	movi	r2,2046
   16b1c:	1100320e 	bge	r2,r4,16be8 <__muldf3+0x5dc>
   16b20:	b4c0004c 	andi	r19,r22,1
   16b24:	0101ffc4 	movi	r4,2047
   16b28:	0021883a 	mov	r16,zero
   16b2c:	0025883a 	mov	r18,zero
   16b30:	003f1006 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16b34:	8080022c 	andhi	r2,r16,8
   16b38:	10000926 	beq	r2,zero,16b60 <__muldf3+0x554>
   16b3c:	8880022c 	andhi	r2,r17,8
   16b40:	1000071e 	bne	r2,zero,16b60 <__muldf3+0x554>
   16b44:	00800434 	movhi	r2,16
   16b48:	8c000234 	orhi	r16,r17,8
   16b4c:	10bfffc4 	addi	r2,r2,-1
   16b50:	1827883a 	mov	r19,r3
   16b54:	80a0703a 	and	r16,r16,r2
   16b58:	b825883a 	mov	r18,r23
   16b5c:	003f6a06 	br	16908 <__alt_mem_descriptor_memory+0xdefd6908>
   16b60:	00800434 	movhi	r2,16
   16b64:	84000234 	orhi	r16,r16,8
   16b68:	10bfffc4 	addi	r2,r2,-1
   16b6c:	80a0703a 	and	r16,r16,r2
   16b70:	003f6506 	br	16908 <__alt_mem_descriptor_memory+0xdefd6908>
   16b74:	3009883a 	mov	r4,r6
   16b78:	d8c00215 	stw	r3,8(sp)
   16b7c:	d9800315 	stw	r6,12(sp)
   16b80:	da800015 	stw	r10,0(sp)
   16b84:	dac00115 	stw	r11,4(sp)
   16b88:	00177fc0 	call	177fc <__clzsi2>
   16b8c:	11000804 	addi	r4,r2,32
   16b90:	014009c4 	movi	r5,39
   16b94:	d8c00217 	ldw	r3,8(sp)
   16b98:	d9800317 	ldw	r6,12(sp)
   16b9c:	da800017 	ldw	r10,0(sp)
   16ba0:	dac00117 	ldw	r11,4(sp)
   16ba4:	293f320e 	bge	r5,r4,16870 <__alt_mem_descriptor_memory+0xdefd6870>
   16ba8:	10bffe04 	addi	r2,r2,-8
   16bac:	b8a2983a 	sll	r17,r23,r2
   16bb0:	002f883a 	mov	r23,zero
   16bb4:	003f3506 	br	1688c <__alt_mem_descriptor_memory+0xdefd688c>
   16bb8:	d9800315 	stw	r6,12(sp)
   16bbc:	d9c00015 	stw	r7,0(sp)
   16bc0:	00177fc0 	call	177fc <__clzsi2>
   16bc4:	10c00804 	addi	r3,r2,32
   16bc8:	010009c4 	movi	r4,39
   16bcc:	d9800317 	ldw	r6,12(sp)
   16bd0:	d9c00017 	ldw	r7,0(sp)
   16bd4:	20ff060e 	bge	r4,r3,167f0 <__alt_mem_descriptor_memory+0xdefd67f0>
   16bd8:	10bffe04 	addi	r2,r2,-8
   16bdc:	88a0983a 	sll	r16,r17,r2
   16be0:	0025883a 	mov	r18,zero
   16be4:	003f0906 	br	1680c <__alt_mem_descriptor_memory+0xdefd680c>
   16be8:	9004d0fa 	srli	r2,r18,3
   16bec:	8024977a 	slli	r18,r16,29
   16bf0:	8020927a 	slli	r16,r16,9
   16bf4:	2101ffcc 	andi	r4,r4,2047
   16bf8:	90a4b03a 	or	r18,r18,r2
   16bfc:	8020d33a 	srli	r16,r16,12
   16c00:	b4c0004c 	andi	r19,r22,1
   16c04:	003edb06 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16c08:	00ff0084 	movi	r3,-1022
   16c0c:	1947c83a 	sub	r3,r3,r5
   16c10:	00800e04 	movi	r2,56
   16c14:	10c0080e 	bge	r2,r3,16c38 <__muldf3+0x62c>
   16c18:	b4c0004c 	andi	r19,r22,1
   16c1c:	0009883a 	mov	r4,zero
   16c20:	0021883a 	mov	r16,zero
   16c24:	0025883a 	mov	r18,zero
   16c28:	003ed206 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16c2c:	600b883a 	mov	r5,r12
   16c30:	e02d883a 	mov	r22,fp
   16c34:	003fa706 	br	16ad4 <__alt_mem_descriptor_memory+0xdefd6ad4>
   16c38:	008007c4 	movi	r2,31
   16c3c:	10c01816 	blt	r2,r3,16ca0 <__muldf3+0x694>
   16c40:	29410784 	addi	r5,r5,1054
   16c44:	8144983a 	sll	r2,r16,r5
   16c48:	90c8d83a 	srl	r4,r18,r3
   16c4c:	914a983a 	sll	r5,r18,r5
   16c50:	80c6d83a 	srl	r3,r16,r3
   16c54:	2088b03a 	or	r4,r4,r2
   16c58:	2804c03a 	cmpne	r2,r5,zero
   16c5c:	2084b03a 	or	r2,r4,r2
   16c60:	110001cc 	andi	r4,r2,7
   16c64:	20000726 	beq	r4,zero,16c84 <__muldf3+0x678>
   16c68:	114003cc 	andi	r5,r2,15
   16c6c:	01000104 	movi	r4,4
   16c70:	29000426 	beq	r5,r4,16c84 <__muldf3+0x678>
   16c74:	11000104 	addi	r4,r2,4
   16c78:	2085803a 	cmpltu	r2,r4,r2
   16c7c:	1887883a 	add	r3,r3,r2
   16c80:	2005883a 	mov	r2,r4
   16c84:	1900202c 	andhi	r4,r3,128
   16c88:	20001826 	beq	r4,zero,16cec <__muldf3+0x6e0>
   16c8c:	b4c0004c 	andi	r19,r22,1
   16c90:	01000044 	movi	r4,1
   16c94:	0021883a 	mov	r16,zero
   16c98:	0025883a 	mov	r18,zero
   16c9c:	003eb506 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16ca0:	00bef884 	movi	r2,-1054
   16ca4:	1145c83a 	sub	r2,r2,r5
   16ca8:	8088d83a 	srl	r4,r16,r2
   16cac:	00800804 	movi	r2,32
   16cb0:	18801726 	beq	r3,r2,16d10 <__muldf3+0x704>
   16cb4:	28810f84 	addi	r2,r5,1086
   16cb8:	8084983a 	sll	r2,r16,r2
   16cbc:	1484b03a 	or	r2,r2,r18
   16cc0:	1004c03a 	cmpne	r2,r2,zero
   16cc4:	1104b03a 	or	r2,r2,r4
   16cc8:	10c001cc 	andi	r3,r2,7
   16ccc:	18000b1e 	bne	r3,zero,16cfc <__muldf3+0x6f0>
   16cd0:	0021883a 	mov	r16,zero
   16cd4:	1004d0fa 	srli	r2,r2,3
   16cd8:	b4c0004c 	andi	r19,r22,1
   16cdc:	0009883a 	mov	r4,zero
   16ce0:	10e4b03a 	or	r18,r2,r3
   16ce4:	003ea306 	br	16774 <__alt_mem_descriptor_memory+0xdefd6774>
   16ce8:	0007883a 	mov	r3,zero
   16cec:	1820927a 	slli	r16,r3,9
   16cf0:	1806977a 	slli	r3,r3,29
   16cf4:	8020d33a 	srli	r16,r16,12
   16cf8:	003ff606 	br	16cd4 <__alt_mem_descriptor_memory+0xdefd6cd4>
   16cfc:	110003cc 	andi	r4,r2,15
   16d00:	00c00104 	movi	r3,4
   16d04:	20fff826 	beq	r4,r3,16ce8 <__alt_mem_descriptor_memory+0xdefd6ce8>
   16d08:	0007883a 	mov	r3,zero
   16d0c:	003fd906 	br	16c74 <__alt_mem_descriptor_memory+0xdefd6c74>
   16d10:	0005883a 	mov	r2,zero
   16d14:	003fe906 	br	16cbc <__alt_mem_descriptor_memory+0xdefd6cbc>
   16d18:	00800434 	movhi	r2,16
   16d1c:	84000234 	orhi	r16,r16,8
   16d20:	10bfffc4 	addi	r2,r2,-1
   16d24:	e4c0004c 	andi	r19,fp,1
   16d28:	80a0703a 	and	r16,r16,r2
   16d2c:	003ef606 	br	16908 <__alt_mem_descriptor_memory+0xdefd6908>

00016d30 <__subdf3>:
   16d30:	00c00434 	movhi	r3,16
   16d34:	18ffffc4 	addi	r3,r3,-1
   16d38:	defffb04 	addi	sp,sp,-20
   16d3c:	28d2703a 	and	r9,r5,r3
   16d40:	3814d53a 	srli	r10,r7,20
   16d44:	38c6703a 	and	r3,r7,r3
   16d48:	3004d77a 	srli	r2,r6,29
   16d4c:	dc800215 	stw	r18,8(sp)
   16d50:	dc000015 	stw	r16,0(sp)
   16d54:	2824d7fa 	srli	r18,r5,31
   16d58:	2820d53a 	srli	r16,r5,20
   16d5c:	481290fa 	slli	r9,r9,3
   16d60:	200ad77a 	srli	r5,r4,29
   16d64:	180690fa 	slli	r3,r3,3
   16d68:	dc400115 	stw	r17,4(sp)
   16d6c:	dfc00415 	stw	ra,16(sp)
   16d70:	202290fa 	slli	r17,r4,3
   16d74:	dcc00315 	stw	r19,12(sp)
   16d78:	5281ffcc 	andi	r10,r10,2047
   16d7c:	0101ffc4 	movi	r4,2047
   16d80:	9011883a 	mov	r8,r18
   16d84:	8401ffcc 	andi	r16,r16,2047
   16d88:	94803fcc 	andi	r18,r18,255
   16d8c:	494ab03a 	or	r5,r9,r5
   16d90:	380ed7fa 	srli	r7,r7,31
   16d94:	1886b03a 	or	r3,r3,r2
   16d98:	300c90fa 	slli	r6,r6,3
   16d9c:	51009026 	beq	r10,r4,16fe0 <__subdf3+0x2b0>
   16da0:	39c0005c 	xori	r7,r7,1
   16da4:	8285c83a 	sub	r2,r16,r10
   16da8:	91c06f26 	beq	r18,r7,16f68 <__subdf3+0x238>
   16dac:	0080b10e 	bge	zero,r2,17074 <__subdf3+0x344>
   16db0:	50002a1e 	bne	r10,zero,16e5c <__subdf3+0x12c>
   16db4:	1988b03a 	or	r4,r3,r6
   16db8:	2000941e 	bne	r4,zero,1700c <__subdf3+0x2dc>
   16dbc:	888001cc 	andi	r2,r17,7
   16dc0:	10005b26 	beq	r2,zero,16f30 <__subdf3+0x200>
   16dc4:	88c003cc 	andi	r3,r17,15
   16dc8:	00800104 	movi	r2,4
   16dcc:	18805826 	beq	r3,r2,16f30 <__subdf3+0x200>
   16dd0:	88c00104 	addi	r3,r17,4
   16dd4:	1c63803a 	cmpltu	r17,r3,r17
   16dd8:	2c4b883a 	add	r5,r5,r17
   16ddc:	2880202c 	andhi	r2,r5,128
   16de0:	9200004c 	andi	r8,r18,1
   16de4:	1823883a 	mov	r17,r3
   16de8:	10005426 	beq	r2,zero,16f3c <__subdf3+0x20c>
   16dec:	84000044 	addi	r16,r16,1
   16df0:	0081ffc4 	movi	r2,2047
   16df4:	8080bf26 	beq	r16,r2,170f4 <__subdf3+0x3c4>
   16df8:	013fe034 	movhi	r4,65408
   16dfc:	213fffc4 	addi	r4,r4,-1
   16e00:	290a703a 	and	r5,r5,r4
   16e04:	2804977a 	slli	r2,r5,29
   16e08:	280a927a 	slli	r5,r5,9
   16e0c:	8822d0fa 	srli	r17,r17,3
   16e10:	8401ffcc 	andi	r16,r16,2047
   16e14:	2808d33a 	srli	r4,r5,12
   16e18:	1444b03a 	or	r2,r2,r17
   16e1c:	8401ffcc 	andi	r16,r16,2047
   16e20:	800a953a 	slli	r5,r16,20
   16e24:	40c03fcc 	andi	r3,r8,255
   16e28:	04000434 	movhi	r16,16
   16e2c:	180697fa 	slli	r3,r3,31
   16e30:	843fffc4 	addi	r16,r16,-1
   16e34:	2420703a 	and	r16,r4,r16
   16e38:	8160b03a 	or	r16,r16,r5
   16e3c:	80c6b03a 	or	r3,r16,r3
   16e40:	dfc00417 	ldw	ra,16(sp)
   16e44:	dcc00317 	ldw	r19,12(sp)
   16e48:	dc800217 	ldw	r18,8(sp)
   16e4c:	dc400117 	ldw	r17,4(sp)
   16e50:	dc000017 	ldw	r16,0(sp)
   16e54:	dec00504 	addi	sp,sp,20
   16e58:	f800283a 	ret
   16e5c:	0101ffc4 	movi	r4,2047
   16e60:	813fd626 	beq	r16,r4,16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   16e64:	18c02034 	orhi	r3,r3,128
   16e68:	01000e04 	movi	r4,56
   16e6c:	2080a416 	blt	r4,r2,17100 <__subdf3+0x3d0>
   16e70:	010007c4 	movi	r4,31
   16e74:	2080c716 	blt	r4,r2,17194 <__subdf3+0x464>
   16e78:	01000804 	movi	r4,32
   16e7c:	2089c83a 	sub	r4,r4,r2
   16e80:	1910983a 	sll	r8,r3,r4
   16e84:	308ed83a 	srl	r7,r6,r2
   16e88:	3108983a 	sll	r4,r6,r4
   16e8c:	1884d83a 	srl	r2,r3,r2
   16e90:	41ccb03a 	or	r6,r8,r7
   16e94:	2008c03a 	cmpne	r4,r4,zero
   16e98:	310cb03a 	or	r6,r6,r4
   16e9c:	898dc83a 	sub	r6,r17,r6
   16ea0:	89a3803a 	cmpltu	r17,r17,r6
   16ea4:	288bc83a 	sub	r5,r5,r2
   16ea8:	2c4bc83a 	sub	r5,r5,r17
   16eac:	3023883a 	mov	r17,r6
   16eb0:	2880202c 	andhi	r2,r5,128
   16eb4:	10006b26 	beq	r2,zero,17064 <__subdf3+0x334>
   16eb8:	04c02034 	movhi	r19,128
   16ebc:	9cffffc4 	addi	r19,r19,-1
   16ec0:	2ce6703a 	and	r19,r5,r19
   16ec4:	98007c26 	beq	r19,zero,170b8 <__subdf3+0x388>
   16ec8:	9809883a 	mov	r4,r19
   16ecc:	00177fc0 	call	177fc <__clzsi2>
   16ed0:	10fffe04 	addi	r3,r2,-8
   16ed4:	010007c4 	movi	r4,31
   16ed8:	20c07d16 	blt	r4,r3,170d0 <__subdf3+0x3a0>
   16edc:	01400a04 	movi	r5,40
   16ee0:	2885c83a 	sub	r2,r5,r2
   16ee4:	888ad83a 	srl	r5,r17,r2
   16ee8:	98e6983a 	sll	r19,r19,r3
   16eec:	88e2983a 	sll	r17,r17,r3
   16ef0:	2ce6b03a 	or	r19,r5,r19
   16ef4:	1c007a16 	blt	r3,r16,170e0 <__subdf3+0x3b0>
   16ef8:	1c21c83a 	sub	r16,r3,r16
   16efc:	81400044 	addi	r5,r16,1
   16f00:	00c007c4 	movi	r3,31
   16f04:	19409616 	blt	r3,r5,17160 <__subdf3+0x430>
   16f08:	1c21c83a 	sub	r16,r3,r16
   16f0c:	8c08983a 	sll	r4,r17,r16
   16f10:	8946d83a 	srl	r3,r17,r5
   16f14:	9c20983a 	sll	r16,r19,r16
   16f18:	2008c03a 	cmpne	r4,r4,zero
   16f1c:	994ad83a 	srl	r5,r19,r5
   16f20:	1c06b03a 	or	r3,r3,r16
   16f24:	1922b03a 	or	r17,r3,r4
   16f28:	0021883a 	mov	r16,zero
   16f2c:	003fa306 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   16f30:	2880202c 	andhi	r2,r5,128
   16f34:	9200004c 	andi	r8,r18,1
   16f38:	103fac1e 	bne	r2,zero,16dec <__alt_mem_descriptor_memory+0xdefd6dec>
   16f3c:	2804977a 	slli	r2,r5,29
   16f40:	8822d0fa 	srli	r17,r17,3
   16f44:	00c1ffc4 	movi	r3,2047
   16f48:	280ad0fa 	srli	r5,r5,3
   16f4c:	1444b03a 	or	r2,r2,r17
   16f50:	80c02726 	beq	r16,r3,16ff0 <__subdf3+0x2c0>
   16f54:	01000434 	movhi	r4,16
   16f58:	213fffc4 	addi	r4,r4,-1
   16f5c:	80e0703a 	and	r16,r16,r3
   16f60:	2908703a 	and	r4,r5,r4
   16f64:	003fad06 	br	16e1c <__alt_mem_descriptor_memory+0xdefd6e1c>
   16f68:	0080690e 	bge	zero,r2,17110 <__subdf3+0x3e0>
   16f6c:	50002f26 	beq	r10,zero,1702c <__subdf3+0x2fc>
   16f70:	0101ffc4 	movi	r4,2047
   16f74:	813f9126 	beq	r16,r4,16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   16f78:	18c02034 	orhi	r3,r3,128
   16f7c:	01000e04 	movi	r4,56
   16f80:	2080b00e 	bge	r4,r2,17244 <__subdf3+0x514>
   16f84:	198cb03a 	or	r6,r3,r6
   16f88:	300ec03a 	cmpne	r7,r6,zero
   16f8c:	0005883a 	mov	r2,zero
   16f90:	3c4f883a 	add	r7,r7,r17
   16f94:	3c63803a 	cmpltu	r17,r7,r17
   16f98:	114b883a 	add	r5,r2,r5
   16f9c:	2c4b883a 	add	r5,r5,r17
   16fa0:	3823883a 	mov	r17,r7
   16fa4:	2880202c 	andhi	r2,r5,128
   16fa8:	10002e26 	beq	r2,zero,17064 <__subdf3+0x334>
   16fac:	84000044 	addi	r16,r16,1
   16fb0:	0081ffc4 	movi	r2,2047
   16fb4:	8080de26 	beq	r16,r2,17330 <__subdf3+0x600>
   16fb8:	00bfe034 	movhi	r2,65408
   16fbc:	10bfffc4 	addi	r2,r2,-1
   16fc0:	288a703a 	and	r5,r5,r2
   16fc4:	880cd07a 	srli	r6,r17,1
   16fc8:	280897fa 	slli	r4,r5,31
   16fcc:	88c0004c 	andi	r3,r17,1
   16fd0:	30e2b03a 	or	r17,r6,r3
   16fd4:	280ad07a 	srli	r5,r5,1
   16fd8:	8922b03a 	or	r17,r17,r4
   16fdc:	003f7706 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   16fe0:	1984b03a 	or	r2,r3,r6
   16fe4:	103f6e26 	beq	r2,zero,16da0 <__alt_mem_descriptor_memory+0xdefd6da0>
   16fe8:	39c03fcc 	andi	r7,r7,255
   16fec:	003f6d06 	br	16da4 <__alt_mem_descriptor_memory+0xdefd6da4>
   16ff0:	1146b03a 	or	r3,r2,r5
   16ff4:	18003f26 	beq	r3,zero,170f4 <__subdf3+0x3c4>
   16ff8:	00c00434 	movhi	r3,16
   16ffc:	29000234 	orhi	r4,r5,8
   17000:	18ffffc4 	addi	r3,r3,-1
   17004:	20c8703a 	and	r4,r4,r3
   17008:	003f8406 	br	16e1c <__alt_mem_descriptor_memory+0xdefd6e1c>
   1700c:	10bfffc4 	addi	r2,r2,-1
   17010:	1000501e 	bne	r2,zero,17154 <__subdf3+0x424>
   17014:	898fc83a 	sub	r7,r17,r6
   17018:	89e3803a 	cmpltu	r17,r17,r7
   1701c:	28cbc83a 	sub	r5,r5,r3
   17020:	2c4bc83a 	sub	r5,r5,r17
   17024:	3823883a 	mov	r17,r7
   17028:	003fa106 	br	16eb0 <__alt_mem_descriptor_memory+0xdefd6eb0>
   1702c:	1988b03a 	or	r4,r3,r6
   17030:	203f6226 	beq	r4,zero,16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17034:	10bfffc4 	addi	r2,r2,-1
   17038:	10009b1e 	bne	r2,zero,172a8 <__subdf3+0x578>
   1703c:	344d883a 	add	r6,r6,r17
   17040:	3463803a 	cmpltu	r17,r6,r17
   17044:	194b883a 	add	r5,r3,r5
   17048:	2c4b883a 	add	r5,r5,r17
   1704c:	3023883a 	mov	r17,r6
   17050:	003fd406 	br	16fa4 <__alt_mem_descriptor_memory+0xdefd6fa4>
   17054:	1106b03a 	or	r3,r2,r4
   17058:	1800b426 	beq	r3,zero,1732c <__subdf3+0x5fc>
   1705c:	100b883a 	mov	r5,r2
   17060:	2023883a 	mov	r17,r4
   17064:	888001cc 	andi	r2,r17,7
   17068:	103f561e 	bne	r2,zero,16dc4 <__alt_mem_descriptor_memory+0xdefd6dc4>
   1706c:	9200004c 	andi	r8,r18,1
   17070:	003fb206 	br	16f3c <__alt_mem_descriptor_memory+0xdefd6f3c>
   17074:	1000531e 	bne	r2,zero,171c4 <__subdf3+0x494>
   17078:	80800044 	addi	r2,r16,1
   1707c:	1081ffcc 	andi	r2,r2,2047
   17080:	01000044 	movi	r4,1
   17084:	2080a00e 	bge	r4,r2,17308 <__subdf3+0x5d8>
   17088:	8985c83a 	sub	r2,r17,r6
   1708c:	8889803a 	cmpltu	r4,r17,r2
   17090:	28e7c83a 	sub	r19,r5,r3
   17094:	9927c83a 	sub	r19,r19,r4
   17098:	9900202c 	andhi	r4,r19,128
   1709c:	20006226 	beq	r4,zero,17228 <__subdf3+0x4f8>
   170a0:	3463c83a 	sub	r17,r6,r17
   170a4:	194bc83a 	sub	r5,r3,r5
   170a8:	344d803a 	cmpltu	r6,r6,r17
   170ac:	29a7c83a 	sub	r19,r5,r6
   170b0:	3825883a 	mov	r18,r7
   170b4:	983f841e 	bne	r19,zero,16ec8 <__alt_mem_descriptor_memory+0xdefd6ec8>
   170b8:	8809883a 	mov	r4,r17
   170bc:	00177fc0 	call	177fc <__clzsi2>
   170c0:	10800804 	addi	r2,r2,32
   170c4:	10fffe04 	addi	r3,r2,-8
   170c8:	010007c4 	movi	r4,31
   170cc:	20ff830e 	bge	r4,r3,16edc <__alt_mem_descriptor_memory+0xdefd6edc>
   170d0:	14fff604 	addi	r19,r2,-40
   170d4:	8ce6983a 	sll	r19,r17,r19
   170d8:	0023883a 	mov	r17,zero
   170dc:	1c3f860e 	bge	r3,r16,16ef8 <__alt_mem_descriptor_memory+0xdefd6ef8>
   170e0:	017fe034 	movhi	r5,65408
   170e4:	297fffc4 	addi	r5,r5,-1
   170e8:	80e1c83a 	sub	r16,r16,r3
   170ec:	994a703a 	and	r5,r19,r5
   170f0:	003f3206 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   170f4:	0009883a 	mov	r4,zero
   170f8:	0005883a 	mov	r2,zero
   170fc:	003f4706 	br	16e1c <__alt_mem_descriptor_memory+0xdefd6e1c>
   17100:	198cb03a 	or	r6,r3,r6
   17104:	300cc03a 	cmpne	r6,r6,zero
   17108:	0005883a 	mov	r2,zero
   1710c:	003f6306 	br	16e9c <__alt_mem_descriptor_memory+0xdefd6e9c>
   17110:	10009d1e 	bne	r2,zero,17388 <__subdf3+0x658>
   17114:	81c00044 	addi	r7,r16,1
   17118:	3881ffcc 	andi	r2,r7,2047
   1711c:	02400044 	movi	r9,1
   17120:	4880680e 	bge	r9,r2,172c4 <__subdf3+0x594>
   17124:	0081ffc4 	movi	r2,2047
   17128:	3880ae26 	beq	r7,r2,173e4 <__subdf3+0x6b4>
   1712c:	344d883a 	add	r6,r6,r17
   17130:	3463803a 	cmpltu	r17,r6,r17
   17134:	194b883a 	add	r5,r3,r5
   17138:	2c4b883a 	add	r5,r5,r17
   1713c:	282297fa 	slli	r17,r5,31
   17140:	300cd07a 	srli	r6,r6,1
   17144:	280ad07a 	srli	r5,r5,1
   17148:	3821883a 	mov	r16,r7
   1714c:	89a2b03a 	or	r17,r17,r6
   17150:	003f1a06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17154:	0101ffc4 	movi	r4,2047
   17158:	813f431e 	bne	r16,r4,16e68 <__alt_mem_descriptor_memory+0xdefd6e68>
   1715c:	003f1706 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17160:	80bff844 	addi	r2,r16,-31
   17164:	00c00804 	movi	r3,32
   17168:	9884d83a 	srl	r2,r19,r2
   1716c:	28c05126 	beq	r5,r3,172b4 <__subdf3+0x584>
   17170:	00c00fc4 	movi	r3,63
   17174:	1c21c83a 	sub	r16,r3,r16
   17178:	9c26983a 	sll	r19,r19,r16
   1717c:	9c62b03a 	or	r17,r19,r17
   17180:	8822c03a 	cmpne	r17,r17,zero
   17184:	88a2b03a 	or	r17,r17,r2
   17188:	000b883a 	mov	r5,zero
   1718c:	0021883a 	mov	r16,zero
   17190:	003fb406 	br	17064 <__alt_mem_descriptor_memory+0xdefd7064>
   17194:	113ff804 	addi	r4,r2,-32
   17198:	01c00804 	movi	r7,32
   1719c:	1908d83a 	srl	r4,r3,r4
   171a0:	11c04626 	beq	r2,r7,172bc <__subdf3+0x58c>
   171a4:	01c01004 	movi	r7,64
   171a8:	3885c83a 	sub	r2,r7,r2
   171ac:	1884983a 	sll	r2,r3,r2
   171b0:	118cb03a 	or	r6,r2,r6
   171b4:	300cc03a 	cmpne	r6,r6,zero
   171b8:	310cb03a 	or	r6,r6,r4
   171bc:	0005883a 	mov	r2,zero
   171c0:	003f3606 	br	16e9c <__alt_mem_descriptor_memory+0xdefd6e9c>
   171c4:	80002b26 	beq	r16,zero,17274 <__subdf3+0x544>
   171c8:	0101ffc4 	movi	r4,2047
   171cc:	51006926 	beq	r10,r4,17374 <__subdf3+0x644>
   171d0:	0085c83a 	sub	r2,zero,r2
   171d4:	29402034 	orhi	r5,r5,128
   171d8:	01000e04 	movi	r4,56
   171dc:	20807d16 	blt	r4,r2,173d4 <__subdf3+0x6a4>
   171e0:	010007c4 	movi	r4,31
   171e4:	2080d916 	blt	r4,r2,1754c <__subdf3+0x81c>
   171e8:	01000804 	movi	r4,32
   171ec:	2089c83a 	sub	r4,r4,r2
   171f0:	2912983a 	sll	r9,r5,r4
   171f4:	8890d83a 	srl	r8,r17,r2
   171f8:	8908983a 	sll	r4,r17,r4
   171fc:	2884d83a 	srl	r2,r5,r2
   17200:	4a22b03a 	or	r17,r9,r8
   17204:	2008c03a 	cmpne	r4,r4,zero
   17208:	8922b03a 	or	r17,r17,r4
   1720c:	3463c83a 	sub	r17,r6,r17
   17210:	1885c83a 	sub	r2,r3,r2
   17214:	344d803a 	cmpltu	r6,r6,r17
   17218:	118bc83a 	sub	r5,r2,r6
   1721c:	5021883a 	mov	r16,r10
   17220:	3825883a 	mov	r18,r7
   17224:	003f2206 	br	16eb0 <__alt_mem_descriptor_memory+0xdefd6eb0>
   17228:	9886b03a 	or	r3,r19,r2
   1722c:	18001c1e 	bne	r3,zero,172a0 <__subdf3+0x570>
   17230:	0011883a 	mov	r8,zero
   17234:	000b883a 	mov	r5,zero
   17238:	0023883a 	mov	r17,zero
   1723c:	0021883a 	mov	r16,zero
   17240:	003f3e06 	br	16f3c <__alt_mem_descriptor_memory+0xdefd6f3c>
   17244:	010007c4 	movi	r4,31
   17248:	20803c16 	blt	r4,r2,1733c <__subdf3+0x60c>
   1724c:	01000804 	movi	r4,32
   17250:	2089c83a 	sub	r4,r4,r2
   17254:	1912983a 	sll	r9,r3,r4
   17258:	308ed83a 	srl	r7,r6,r2
   1725c:	3108983a 	sll	r4,r6,r4
   17260:	1884d83a 	srl	r2,r3,r2
   17264:	49ceb03a 	or	r7,r9,r7
   17268:	2008c03a 	cmpne	r4,r4,zero
   1726c:	390eb03a 	or	r7,r7,r4
   17270:	003f4706 	br	16f90 <__alt_mem_descriptor_memory+0xdefd6f90>
   17274:	2c48b03a 	or	r4,r5,r17
   17278:	20003e26 	beq	r4,zero,17374 <__subdf3+0x644>
   1727c:	0084303a 	nor	r2,zero,r2
   17280:	10003a1e 	bne	r2,zero,1736c <__subdf3+0x63c>
   17284:	3463c83a 	sub	r17,r6,r17
   17288:	194bc83a 	sub	r5,r3,r5
   1728c:	344d803a 	cmpltu	r6,r6,r17
   17290:	298bc83a 	sub	r5,r5,r6
   17294:	5021883a 	mov	r16,r10
   17298:	3825883a 	mov	r18,r7
   1729c:	003f0406 	br	16eb0 <__alt_mem_descriptor_memory+0xdefd6eb0>
   172a0:	1023883a 	mov	r17,r2
   172a4:	003f0706 	br	16ec4 <__alt_mem_descriptor_memory+0xdefd6ec4>
   172a8:	0101ffc4 	movi	r4,2047
   172ac:	813f331e 	bne	r16,r4,16f7c <__alt_mem_descriptor_memory+0xdefd6f7c>
   172b0:	003ec206 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   172b4:	0027883a 	mov	r19,zero
   172b8:	003fb006 	br	1717c <__alt_mem_descriptor_memory+0xdefd717c>
   172bc:	0005883a 	mov	r2,zero
   172c0:	003fbb06 	br	171b0 <__alt_mem_descriptor_memory+0xdefd71b0>
   172c4:	2c44b03a 	or	r2,r5,r17
   172c8:	80008b1e 	bne	r16,zero,174f8 <__subdf3+0x7c8>
   172cc:	1000b526 	beq	r2,zero,175a4 <__subdf3+0x874>
   172d0:	1984b03a 	or	r2,r3,r6
   172d4:	103eb926 	beq	r2,zero,16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   172d8:	3449883a 	add	r4,r6,r17
   172dc:	2463803a 	cmpltu	r17,r4,r17
   172e0:	194b883a 	add	r5,r3,r5
   172e4:	2c4b883a 	add	r5,r5,r17
   172e8:	2880202c 	andhi	r2,r5,128
   172ec:	2023883a 	mov	r17,r4
   172f0:	103f5c26 	beq	r2,zero,17064 <__alt_mem_descriptor_memory+0xdefd7064>
   172f4:	00bfe034 	movhi	r2,65408
   172f8:	10bfffc4 	addi	r2,r2,-1
   172fc:	4821883a 	mov	r16,r9
   17300:	288a703a 	and	r5,r5,r2
   17304:	003ead06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17308:	2c44b03a 	or	r2,r5,r17
   1730c:	8000291e 	bne	r16,zero,173b4 <__subdf3+0x684>
   17310:	10004f1e 	bne	r2,zero,17450 <__subdf3+0x720>
   17314:	1984b03a 	or	r2,r3,r6
   17318:	10000426 	beq	r2,zero,1732c <__subdf3+0x5fc>
   1731c:	180b883a 	mov	r5,r3
   17320:	3023883a 	mov	r17,r6
   17324:	3825883a 	mov	r18,r7
   17328:	003ea406 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   1732c:	0011883a 	mov	r8,zero
   17330:	000b883a 	mov	r5,zero
   17334:	0023883a 	mov	r17,zero
   17338:	003f0006 	br	16f3c <__alt_mem_descriptor_memory+0xdefd6f3c>
   1733c:	11fff804 	addi	r7,r2,-32
   17340:	19c8d83a 	srl	r4,r3,r7
   17344:	01c00804 	movi	r7,32
   17348:	11c07e26 	beq	r2,r7,17544 <__subdf3+0x814>
   1734c:	01c01004 	movi	r7,64
   17350:	3885c83a 	sub	r2,r7,r2
   17354:	1884983a 	sll	r2,r3,r2
   17358:	118cb03a 	or	r6,r2,r6
   1735c:	300ec03a 	cmpne	r7,r6,zero
   17360:	390eb03a 	or	r7,r7,r4
   17364:	0005883a 	mov	r2,zero
   17368:	003f0906 	br	16f90 <__alt_mem_descriptor_memory+0xdefd6f90>
   1736c:	0101ffc4 	movi	r4,2047
   17370:	513f991e 	bne	r10,r4,171d8 <__alt_mem_descriptor_memory+0xdefd71d8>
   17374:	180b883a 	mov	r5,r3
   17378:	3023883a 	mov	r17,r6
   1737c:	5021883a 	mov	r16,r10
   17380:	3825883a 	mov	r18,r7
   17384:	003e8d06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17388:	80001a1e 	bne	r16,zero,173f4 <__subdf3+0x6c4>
   1738c:	2c48b03a 	or	r4,r5,r17
   17390:	20005526 	beq	r4,zero,174e8 <__subdf3+0x7b8>
   17394:	0084303a 	nor	r2,zero,r2
   17398:	1000511e 	bne	r2,zero,174e0 <__subdf3+0x7b0>
   1739c:	89a3883a 	add	r17,r17,r6
   173a0:	194b883a 	add	r5,r3,r5
   173a4:	898d803a 	cmpltu	r6,r17,r6
   173a8:	298b883a 	add	r5,r5,r6
   173ac:	5021883a 	mov	r16,r10
   173b0:	003efc06 	br	16fa4 <__alt_mem_descriptor_memory+0xdefd6fa4>
   173b4:	1000341e 	bne	r2,zero,17488 <__subdf3+0x758>
   173b8:	1984b03a 	or	r2,r3,r6
   173bc:	10006f26 	beq	r2,zero,1757c <__subdf3+0x84c>
   173c0:	180b883a 	mov	r5,r3
   173c4:	3023883a 	mov	r17,r6
   173c8:	3825883a 	mov	r18,r7
   173cc:	0401ffc4 	movi	r16,2047
   173d0:	003e7a06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   173d4:	2c62b03a 	or	r17,r5,r17
   173d8:	8822c03a 	cmpne	r17,r17,zero
   173dc:	0005883a 	mov	r2,zero
   173e0:	003f8a06 	br	1720c <__alt_mem_descriptor_memory+0xdefd720c>
   173e4:	3821883a 	mov	r16,r7
   173e8:	000b883a 	mov	r5,zero
   173ec:	0023883a 	mov	r17,zero
   173f0:	003ed206 	br	16f3c <__alt_mem_descriptor_memory+0xdefd6f3c>
   173f4:	0101ffc4 	movi	r4,2047
   173f8:	51003b26 	beq	r10,r4,174e8 <__subdf3+0x7b8>
   173fc:	0085c83a 	sub	r2,zero,r2
   17400:	29402034 	orhi	r5,r5,128
   17404:	01000e04 	movi	r4,56
   17408:	20806216 	blt	r4,r2,17594 <__subdf3+0x864>
   1740c:	010007c4 	movi	r4,31
   17410:	20806b16 	blt	r4,r2,175c0 <__subdf3+0x890>
   17414:	01000804 	movi	r4,32
   17418:	2089c83a 	sub	r4,r4,r2
   1741c:	2912983a 	sll	r9,r5,r4
   17420:	888ed83a 	srl	r7,r17,r2
   17424:	8908983a 	sll	r4,r17,r4
   17428:	2884d83a 	srl	r2,r5,r2
   1742c:	49e2b03a 	or	r17,r9,r7
   17430:	2008c03a 	cmpne	r4,r4,zero
   17434:	8922b03a 	or	r17,r17,r4
   17438:	89a3883a 	add	r17,r17,r6
   1743c:	10c5883a 	add	r2,r2,r3
   17440:	898d803a 	cmpltu	r6,r17,r6
   17444:	118b883a 	add	r5,r2,r6
   17448:	5021883a 	mov	r16,r10
   1744c:	003ed506 	br	16fa4 <__alt_mem_descriptor_memory+0xdefd6fa4>
   17450:	1984b03a 	or	r2,r3,r6
   17454:	103e5926 	beq	r2,zero,16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17458:	8989c83a 	sub	r4,r17,r6
   1745c:	8911803a 	cmpltu	r8,r17,r4
   17460:	28c5c83a 	sub	r2,r5,r3
   17464:	1205c83a 	sub	r2,r2,r8
   17468:	1200202c 	andhi	r8,r2,128
   1746c:	403ef926 	beq	r8,zero,17054 <__alt_mem_descriptor_memory+0xdefd7054>
   17470:	3463c83a 	sub	r17,r6,r17
   17474:	194bc83a 	sub	r5,r3,r5
   17478:	344d803a 	cmpltu	r6,r6,r17
   1747c:	298bc83a 	sub	r5,r5,r6
   17480:	3825883a 	mov	r18,r7
   17484:	003e4d06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17488:	1984b03a 	or	r2,r3,r6
   1748c:	10002b26 	beq	r2,zero,1753c <__subdf3+0x80c>
   17490:	2808d0fa 	srli	r4,r5,3
   17494:	8822d0fa 	srli	r17,r17,3
   17498:	280a977a 	slli	r5,r5,29
   1749c:	2080022c 	andhi	r2,r4,8
   174a0:	2c62b03a 	or	r17,r5,r17
   174a4:	10000826 	beq	r2,zero,174c8 <__subdf3+0x798>
   174a8:	1810d0fa 	srli	r8,r3,3
   174ac:	4080022c 	andhi	r2,r8,8
   174b0:	1000051e 	bne	r2,zero,174c8 <__subdf3+0x798>
   174b4:	300cd0fa 	srli	r6,r6,3
   174b8:	1804977a 	slli	r2,r3,29
   174bc:	4009883a 	mov	r4,r8
   174c0:	3825883a 	mov	r18,r7
   174c4:	11a2b03a 	or	r17,r2,r6
   174c8:	880ad77a 	srli	r5,r17,29
   174cc:	200890fa 	slli	r4,r4,3
   174d0:	882290fa 	slli	r17,r17,3
   174d4:	0401ffc4 	movi	r16,2047
   174d8:	290ab03a 	or	r5,r5,r4
   174dc:	003e3706 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   174e0:	0101ffc4 	movi	r4,2047
   174e4:	513fc71e 	bne	r10,r4,17404 <__alt_mem_descriptor_memory+0xdefd7404>
   174e8:	180b883a 	mov	r5,r3
   174ec:	3023883a 	mov	r17,r6
   174f0:	5021883a 	mov	r16,r10
   174f4:	003e3106 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   174f8:	10002d26 	beq	r2,zero,175b0 <__subdf3+0x880>
   174fc:	1984b03a 	or	r2,r3,r6
   17500:	10000e26 	beq	r2,zero,1753c <__subdf3+0x80c>
   17504:	2808d0fa 	srli	r4,r5,3
   17508:	8822d0fa 	srli	r17,r17,3
   1750c:	280a977a 	slli	r5,r5,29
   17510:	2080022c 	andhi	r2,r4,8
   17514:	2c62b03a 	or	r17,r5,r17
   17518:	103feb26 	beq	r2,zero,174c8 <__alt_mem_descriptor_memory+0xdefd74c8>
   1751c:	180ed0fa 	srli	r7,r3,3
   17520:	3880022c 	andhi	r2,r7,8
   17524:	103fe81e 	bne	r2,zero,174c8 <__alt_mem_descriptor_memory+0xdefd74c8>
   17528:	300cd0fa 	srli	r6,r6,3
   1752c:	1804977a 	slli	r2,r3,29
   17530:	3809883a 	mov	r4,r7
   17534:	11a2b03a 	or	r17,r2,r6
   17538:	003fe306 	br	174c8 <__alt_mem_descriptor_memory+0xdefd74c8>
   1753c:	0401ffc4 	movi	r16,2047
   17540:	003e1e06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   17544:	0005883a 	mov	r2,zero
   17548:	003f8306 	br	17358 <__alt_mem_descriptor_memory+0xdefd7358>
   1754c:	113ff804 	addi	r4,r2,-32
   17550:	02000804 	movi	r8,32
   17554:	2908d83a 	srl	r4,r5,r4
   17558:	12002526 	beq	r2,r8,175f0 <__subdf3+0x8c0>
   1755c:	02001004 	movi	r8,64
   17560:	4085c83a 	sub	r2,r8,r2
   17564:	288a983a 	sll	r5,r5,r2
   17568:	2c62b03a 	or	r17,r5,r17
   1756c:	8822c03a 	cmpne	r17,r17,zero
   17570:	8922b03a 	or	r17,r17,r4
   17574:	0005883a 	mov	r2,zero
   17578:	003f2406 	br	1720c <__alt_mem_descriptor_memory+0xdefd720c>
   1757c:	01402034 	movhi	r5,128
   17580:	0011883a 	mov	r8,zero
   17584:	297fffc4 	addi	r5,r5,-1
   17588:	047ffe04 	movi	r17,-8
   1758c:	0401ffc4 	movi	r16,2047
   17590:	003e6a06 	br	16f3c <__alt_mem_descriptor_memory+0xdefd6f3c>
   17594:	2c62b03a 	or	r17,r5,r17
   17598:	8822c03a 	cmpne	r17,r17,zero
   1759c:	0005883a 	mov	r2,zero
   175a0:	003fa506 	br	17438 <__alt_mem_descriptor_memory+0xdefd7438>
   175a4:	180b883a 	mov	r5,r3
   175a8:	3023883a 	mov	r17,r6
   175ac:	003e0306 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   175b0:	180b883a 	mov	r5,r3
   175b4:	3023883a 	mov	r17,r6
   175b8:	0401ffc4 	movi	r16,2047
   175bc:	003dff06 	br	16dbc <__alt_mem_descriptor_memory+0xdefd6dbc>
   175c0:	113ff804 	addi	r4,r2,-32
   175c4:	01c00804 	movi	r7,32
   175c8:	2908d83a 	srl	r4,r5,r4
   175cc:	11c00a26 	beq	r2,r7,175f8 <__subdf3+0x8c8>
   175d0:	01c01004 	movi	r7,64
   175d4:	3885c83a 	sub	r2,r7,r2
   175d8:	288a983a 	sll	r5,r5,r2
   175dc:	2c62b03a 	or	r17,r5,r17
   175e0:	8822c03a 	cmpne	r17,r17,zero
   175e4:	8922b03a 	or	r17,r17,r4
   175e8:	0005883a 	mov	r2,zero
   175ec:	003f9206 	br	17438 <__alt_mem_descriptor_memory+0xdefd7438>
   175f0:	000b883a 	mov	r5,zero
   175f4:	003fdc06 	br	17568 <__alt_mem_descriptor_memory+0xdefd7568>
   175f8:	000b883a 	mov	r5,zero
   175fc:	003ff706 	br	175dc <__alt_mem_descriptor_memory+0xdefd75dc>

00017600 <__fixdfsi>:
   17600:	2806d53a 	srli	r3,r5,20
   17604:	00800434 	movhi	r2,16
   17608:	10bfffc4 	addi	r2,r2,-1
   1760c:	18c1ffcc 	andi	r3,r3,2047
   17610:	0180ff84 	movi	r6,1022
   17614:	2884703a 	and	r2,r5,r2
   17618:	280ad7fa 	srli	r5,r5,31
   1761c:	30c0130e 	bge	r6,r3,1766c <__fixdfsi+0x6c>
   17620:	01810744 	movi	r6,1053
   17624:	30c00d16 	blt	r6,r3,1765c <__fixdfsi+0x5c>
   17628:	01810cc4 	movi	r6,1075
   1762c:	30cdc83a 	sub	r6,r6,r3
   17630:	01c007c4 	movi	r7,31
   17634:	10800434 	orhi	r2,r2,16
   17638:	39800e0e 	bge	r7,r6,17674 <__fixdfsi+0x74>
   1763c:	010104c4 	movi	r4,1043
   17640:	20c7c83a 	sub	r3,r4,r3
   17644:	10c6d83a 	srl	r3,r2,r3
   17648:	29403fcc 	andi	r5,r5,255
   1764c:	0145c83a 	sub	r2,zero,r5
   17650:	1884f03a 	xor	r2,r3,r2
   17654:	1145883a 	add	r2,r2,r5
   17658:	f800283a 	ret
   1765c:	00a00034 	movhi	r2,32768
   17660:	10bfffc4 	addi	r2,r2,-1
   17664:	2885883a 	add	r2,r5,r2
   17668:	f800283a 	ret
   1766c:	0005883a 	mov	r2,zero
   17670:	f800283a 	ret
   17674:	18fefb44 	addi	r3,r3,-1043
   17678:	2188d83a 	srl	r4,r4,r6
   1767c:	10c6983a 	sll	r3,r2,r3
   17680:	20c6b03a 	or	r3,r4,r3
   17684:	003ff006 	br	17648 <__alt_mem_descriptor_memory+0xdefd7648>

00017688 <__floatsidf>:
   17688:	defffd04 	addi	sp,sp,-12
   1768c:	dc400115 	stw	r17,4(sp)
   17690:	dfc00215 	stw	ra,8(sp)
   17694:	dc000015 	stw	r16,0(sp)
   17698:	2023883a 	mov	r17,r4
   1769c:	20001426 	beq	r4,zero,176f0 <__floatsidf+0x68>
   176a0:	2020d7fa 	srli	r16,r4,31
   176a4:	80000126 	beq	r16,zero,176ac <__floatsidf+0x24>
   176a8:	0123c83a 	sub	r17,zero,r4
   176ac:	8809883a 	mov	r4,r17
   176b0:	00177fc0 	call	177fc <__clzsi2>
   176b4:	01410784 	movi	r5,1054
   176b8:	00c00284 	movi	r3,10
   176bc:	288bc83a 	sub	r5,r5,r2
   176c0:	18801c16 	blt	r3,r2,17734 <__floatsidf+0xac>
   176c4:	00c002c4 	movi	r3,11
   176c8:	1887c83a 	sub	r3,r3,r2
   176cc:	88c8d83a 	srl	r4,r17,r3
   176d0:	00c00434 	movhi	r3,16
   176d4:	18ffffc4 	addi	r3,r3,-1
   176d8:	10800544 	addi	r2,r2,21
   176dc:	20c8703a 	and	r4,r4,r3
   176e0:	8884983a 	sll	r2,r17,r2
   176e4:	28c1ffcc 	andi	r3,r5,2047
   176e8:	800d883a 	mov	r6,r16
   176ec:	00000406 	br	17700 <__floatsidf+0x78>
   176f0:	000d883a 	mov	r6,zero
   176f4:	0007883a 	mov	r3,zero
   176f8:	0009883a 	mov	r4,zero
   176fc:	0005883a 	mov	r2,zero
   17700:	180a953a 	slli	r5,r3,20
   17704:	31803fcc 	andi	r6,r6,255
   17708:	00c00434 	movhi	r3,16
   1770c:	300c97fa 	slli	r6,r6,31
   17710:	18ffffc4 	addi	r3,r3,-1
   17714:	20c6703a 	and	r3,r4,r3
   17718:	1946b03a 	or	r3,r3,r5
   1771c:	1986b03a 	or	r3,r3,r6
   17720:	dfc00217 	ldw	ra,8(sp)
   17724:	dc400117 	ldw	r17,4(sp)
   17728:	dc000017 	ldw	r16,0(sp)
   1772c:	dec00304 	addi	sp,sp,12
   17730:	f800283a 	ret
   17734:	10fffd44 	addi	r3,r2,-11
   17738:	88c8983a 	sll	r4,r17,r3
   1773c:	00800434 	movhi	r2,16
   17740:	10bfffc4 	addi	r2,r2,-1
   17744:	2088703a 	and	r4,r4,r2
   17748:	28c1ffcc 	andi	r3,r5,2047
   1774c:	800d883a 	mov	r6,r16
   17750:	0005883a 	mov	r2,zero
   17754:	003fea06 	br	17700 <__alt_mem_descriptor_memory+0xdefd7700>

00017758 <__floatunsidf>:
   17758:	defffe04 	addi	sp,sp,-8
   1775c:	dc000015 	stw	r16,0(sp)
   17760:	dfc00115 	stw	ra,4(sp)
   17764:	2021883a 	mov	r16,r4
   17768:	20001026 	beq	r4,zero,177ac <__floatunsidf+0x54>
   1776c:	00177fc0 	call	177fc <__clzsi2>
   17770:	01410784 	movi	r5,1054
   17774:	100d883a 	mov	r6,r2
   17778:	288bc83a 	sub	r5,r5,r2
   1777c:	00800284 	movi	r2,10
   17780:	11801616 	blt	r2,r6,177dc <__floatunsidf+0x84>
   17784:	008002c4 	movi	r2,11
   17788:	1185c83a 	sub	r2,r2,r6
   1778c:	8084d83a 	srl	r2,r16,r2
   17790:	00c00434 	movhi	r3,16
   17794:	31c00544 	addi	r7,r6,21
   17798:	18ffffc4 	addi	r3,r3,-1
   1779c:	81e0983a 	sll	r16,r16,r7
   177a0:	10cc703a 	and	r6,r2,r3
   177a4:	2941ffcc 	andi	r5,r5,2047
   177a8:	00000206 	br	177b4 <__floatunsidf+0x5c>
   177ac:	000b883a 	mov	r5,zero
   177b0:	000d883a 	mov	r6,zero
   177b4:	280a953a 	slli	r5,r5,20
   177b8:	00c00434 	movhi	r3,16
   177bc:	18ffffc4 	addi	r3,r3,-1
   177c0:	30c6703a 	and	r3,r6,r3
   177c4:	8005883a 	mov	r2,r16
   177c8:	1946b03a 	or	r3,r3,r5
   177cc:	dfc00117 	ldw	ra,4(sp)
   177d0:	dc000017 	ldw	r16,0(sp)
   177d4:	dec00204 	addi	sp,sp,8
   177d8:	f800283a 	ret
   177dc:	31bffd44 	addi	r6,r6,-11
   177e0:	818c983a 	sll	r6,r16,r6
   177e4:	00800434 	movhi	r2,16
   177e8:	10bfffc4 	addi	r2,r2,-1
   177ec:	2941ffcc 	andi	r5,r5,2047
   177f0:	0021883a 	mov	r16,zero
   177f4:	308c703a 	and	r6,r6,r2
   177f8:	003fee06 	br	177b4 <__alt_mem_descriptor_memory+0xdefd77b4>

000177fc <__clzsi2>:
   177fc:	00bfffd4 	movui	r2,65535
   17800:	11000b36 	bltu	r2,r4,17830 <__clzsi2+0x34>
   17804:	00803fc4 	movi	r2,255
   17808:	1100122e 	bgeu	r2,r4,17854 <__clzsi2+0x58>
   1780c:	00c00204 	movi	r3,8
   17810:	01400604 	movi	r5,24
   17814:	20c8d83a 	srl	r4,r4,r3
   17818:	00800174 	movhi	r2,5
   1781c:	10b61504 	addi	r2,r2,-10156
   17820:	1109883a 	add	r4,r2,r4
   17824:	20800003 	ldbu	r2,0(r4)
   17828:	2885c83a 	sub	r2,r5,r2
   1782c:	f800283a 	ret
   17830:	00804034 	movhi	r2,256
   17834:	10bfffc4 	addi	r2,r2,-1
   17838:	11000336 	bltu	r2,r4,17848 <__clzsi2+0x4c>
   1783c:	00c00404 	movi	r3,16
   17840:	180b883a 	mov	r5,r3
   17844:	003ff306 	br	17814 <__alt_mem_descriptor_memory+0xdefd7814>
   17848:	00c00604 	movi	r3,24
   1784c:	01400204 	movi	r5,8
   17850:	003ff006 	br	17814 <__alt_mem_descriptor_memory+0xdefd7814>
   17854:	0007883a 	mov	r3,zero
   17858:	01400804 	movi	r5,32
   1785c:	003fed06 	br	17814 <__alt_mem_descriptor_memory+0xdefd7814>

00017860 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17860:	defffe04 	addi	sp,sp,-8
   17864:	dfc00115 	stw	ra,4(sp)
   17868:	df000015 	stw	fp,0(sp)
   1786c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17870:	00800174 	movhi	r2,5
   17874:	10876e04 	addi	r2,r2,7608
   17878:	10800017 	ldw	r2,0(r2)
   1787c:	10000526 	beq	r2,zero,17894 <alt_get_errno+0x34>
   17880:	00800174 	movhi	r2,5
   17884:	10876e04 	addi	r2,r2,7608
   17888:	10800017 	ldw	r2,0(r2)
   1788c:	103ee83a 	callr	r2
   17890:	00000206 	br	1789c <alt_get_errno+0x3c>
   17894:	00800174 	movhi	r2,5
   17898:	108f7704 	addi	r2,r2,15836
}
   1789c:	e037883a 	mov	sp,fp
   178a0:	dfc00117 	ldw	ra,4(sp)
   178a4:	df000017 	ldw	fp,0(sp)
   178a8:	dec00204 	addi	sp,sp,8
   178ac:	f800283a 	ret

000178b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   178b0:	defffb04 	addi	sp,sp,-20
   178b4:	dfc00415 	stw	ra,16(sp)
   178b8:	df000315 	stw	fp,12(sp)
   178bc:	df000304 	addi	fp,sp,12
   178c0:	e13ffe15 	stw	r4,-8(fp)
   178c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   178c8:	e0bffe17 	ldw	r2,-8(fp)
   178cc:	10000616 	blt	r2,zero,178e8 <fstat+0x38>
   178d0:	e0bffe17 	ldw	r2,-8(fp)
   178d4:	10c00324 	muli	r3,r2,12
   178d8:	00800174 	movhi	r2,5
   178dc:	10866604 	addi	r2,r2,6552
   178e0:	1885883a 	add	r2,r3,r2
   178e4:	00000106 	br	178ec <fstat+0x3c>
   178e8:	0005883a 	mov	r2,zero
   178ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   178f0:	e0bffd17 	ldw	r2,-12(fp)
   178f4:	10001026 	beq	r2,zero,17938 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   178f8:	e0bffd17 	ldw	r2,-12(fp)
   178fc:	10800017 	ldw	r2,0(r2)
   17900:	10800817 	ldw	r2,32(r2)
   17904:	10000726 	beq	r2,zero,17924 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   17908:	e0bffd17 	ldw	r2,-12(fp)
   1790c:	10800017 	ldw	r2,0(r2)
   17910:	10800817 	ldw	r2,32(r2)
   17914:	e13ffd17 	ldw	r4,-12(fp)
   17918:	e17fff17 	ldw	r5,-4(fp)
   1791c:	103ee83a 	callr	r2
   17920:	00000a06 	br	1794c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   17924:	e0bfff17 	ldw	r2,-4(fp)
   17928:	00c80004 	movi	r3,8192
   1792c:	10c00115 	stw	r3,4(r2)
      return 0;
   17930:	0005883a 	mov	r2,zero
   17934:	00000506 	br	1794c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17938:	00178600 	call	17860 <alt_get_errno>
   1793c:	1007883a 	mov	r3,r2
   17940:	00801444 	movi	r2,81
   17944:	18800015 	stw	r2,0(r3)
    return -1;
   17948:	00bfffc4 	movi	r2,-1
  }
}
   1794c:	e037883a 	mov	sp,fp
   17950:	dfc00117 	ldw	ra,4(sp)
   17954:	df000017 	ldw	fp,0(sp)
   17958:	dec00204 	addi	sp,sp,8
   1795c:	f800283a 	ret

00017960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17960:	defffe04 	addi	sp,sp,-8
   17964:	dfc00115 	stw	ra,4(sp)
   17968:	df000015 	stw	fp,0(sp)
   1796c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17970:	00800174 	movhi	r2,5
   17974:	10876e04 	addi	r2,r2,7608
   17978:	10800017 	ldw	r2,0(r2)
   1797c:	10000526 	beq	r2,zero,17994 <alt_get_errno+0x34>
   17980:	00800174 	movhi	r2,5
   17984:	10876e04 	addi	r2,r2,7608
   17988:	10800017 	ldw	r2,0(r2)
   1798c:	103ee83a 	callr	r2
   17990:	00000206 	br	1799c <alt_get_errno+0x3c>
   17994:	00800174 	movhi	r2,5
   17998:	108f7704 	addi	r2,r2,15836
}
   1799c:	e037883a 	mov	sp,fp
   179a0:	dfc00117 	ldw	ra,4(sp)
   179a4:	df000017 	ldw	fp,0(sp)
   179a8:	dec00204 	addi	sp,sp,8
   179ac:	f800283a 	ret

000179b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   179b0:	deffed04 	addi	sp,sp,-76
   179b4:	dfc01215 	stw	ra,72(sp)
   179b8:	df001115 	stw	fp,68(sp)
   179bc:	df001104 	addi	fp,sp,68
   179c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   179c4:	e0bfff17 	ldw	r2,-4(fp)
   179c8:	10000616 	blt	r2,zero,179e4 <isatty+0x34>
   179cc:	e0bfff17 	ldw	r2,-4(fp)
   179d0:	10c00324 	muli	r3,r2,12
   179d4:	00800174 	movhi	r2,5
   179d8:	10866604 	addi	r2,r2,6552
   179dc:	1885883a 	add	r2,r3,r2
   179e0:	00000106 	br	179e8 <isatty+0x38>
   179e4:	0005883a 	mov	r2,zero
   179e8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   179ec:	e0bfef17 	ldw	r2,-68(fp)
   179f0:	10000e26 	beq	r2,zero,17a2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   179f4:	e0bfef17 	ldw	r2,-68(fp)
   179f8:	10800017 	ldw	r2,0(r2)
   179fc:	10800817 	ldw	r2,32(r2)
   17a00:	1000021e 	bne	r2,zero,17a0c <isatty+0x5c>
    {
      return 1;
   17a04:	00800044 	movi	r2,1
   17a08:	00000d06 	br	17a40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   17a0c:	e0bff004 	addi	r2,fp,-64
   17a10:	e13fff17 	ldw	r4,-4(fp)
   17a14:	100b883a 	mov	r5,r2
   17a18:	00178b00 	call	178b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   17a1c:	e0bff117 	ldw	r2,-60(fp)
   17a20:	10880020 	cmpeqi	r2,r2,8192
   17a24:	10803fcc 	andi	r2,r2,255
   17a28:	00000506 	br	17a40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17a2c:	00179600 	call	17960 <alt_get_errno>
   17a30:	1007883a 	mov	r3,r2
   17a34:	00801444 	movi	r2,81
   17a38:	18800015 	stw	r2,0(r3)
    return 0;
   17a3c:	0005883a 	mov	r2,zero
  }
}
   17a40:	e037883a 	mov	sp,fp
   17a44:	dfc00117 	ldw	ra,4(sp)
   17a48:	df000017 	ldw	fp,0(sp)
   17a4c:	dec00204 	addi	sp,sp,8
   17a50:	f800283a 	ret

00017a54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   17a54:	defffc04 	addi	sp,sp,-16
   17a58:	df000315 	stw	fp,12(sp)
   17a5c:	df000304 	addi	fp,sp,12
   17a60:	e13ffd15 	stw	r4,-12(fp)
   17a64:	e17ffe15 	stw	r5,-8(fp)
   17a68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   17a6c:	e0fffe17 	ldw	r3,-8(fp)
   17a70:	e0bffd17 	ldw	r2,-12(fp)
   17a74:	18800c26 	beq	r3,r2,17aa8 <alt_load_section+0x54>
  {
    while( to != end )
   17a78:	00000806 	br	17a9c <alt_load_section+0x48>
    {
      *to++ = *from++;
   17a7c:	e0bffe17 	ldw	r2,-8(fp)
   17a80:	10c00104 	addi	r3,r2,4
   17a84:	e0fffe15 	stw	r3,-8(fp)
   17a88:	e0fffd17 	ldw	r3,-12(fp)
   17a8c:	19000104 	addi	r4,r3,4
   17a90:	e13ffd15 	stw	r4,-12(fp)
   17a94:	18c00017 	ldw	r3,0(r3)
   17a98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   17a9c:	e0fffe17 	ldw	r3,-8(fp)
   17aa0:	e0bfff17 	ldw	r2,-4(fp)
   17aa4:	18bff51e 	bne	r3,r2,17a7c <__alt_mem_descriptor_memory+0xdefd7a7c>
    {
      *to++ = *from++;
    }
  }
}
   17aa8:	e037883a 	mov	sp,fp
   17aac:	df000017 	ldw	fp,0(sp)
   17ab0:	dec00104 	addi	sp,sp,4
   17ab4:	f800283a 	ret

00017ab8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   17ab8:	defffe04 	addi	sp,sp,-8
   17abc:	dfc00115 	stw	ra,4(sp)
   17ac0:	df000015 	stw	fp,0(sp)
   17ac4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   17ac8:	01000174 	movhi	r4,5
   17acc:	21077d04 	addi	r4,r4,7668
   17ad0:	01400174 	movhi	r5,5
   17ad4:	297f8e04 	addi	r5,r5,-456
   17ad8:	01800174 	movhi	r6,5
   17adc:	31877d04 	addi	r6,r6,7668
   17ae0:	0017a540 	call	17a54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   17ae4:	01000034 	movhi	r4,0
   17ae8:	21000804 	addi	r4,r4,32
   17aec:	01400034 	movhi	r5,0
   17af0:	29400804 	addi	r5,r5,32
   17af4:	01800034 	movhi	r6,0
   17af8:	31809004 	addi	r6,r6,576
   17afc:	0017a540 	call	17a54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   17b00:	01000174 	movhi	r4,5
   17b04:	21283c04 	addi	r4,r4,-24336
   17b08:	01400174 	movhi	r5,5
   17b0c:	29683c04 	addi	r5,r5,-24336
   17b10:	01800174 	movhi	r6,5
   17b14:	31bf8e04 	addi	r6,r6,-456
   17b18:	0017a540 	call	17a54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   17b1c:	0039a1c0 	call	39a1c <alt_dcache_flush_all>
  alt_icache_flush_all();
   17b20:	0039cc80 	call	39cc8 <alt_icache_flush_all>
}
   17b24:	e037883a 	mov	sp,fp
   17b28:	dfc00117 	ldw	ra,4(sp)
   17b2c:	df000017 	ldw	fp,0(sp)
   17b30:	dec00204 	addi	sp,sp,8
   17b34:	f800283a 	ret

00017b38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17b38:	defffe04 	addi	sp,sp,-8
   17b3c:	dfc00115 	stw	ra,4(sp)
   17b40:	df000015 	stw	fp,0(sp)
   17b44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17b48:	00800174 	movhi	r2,5
   17b4c:	10876e04 	addi	r2,r2,7608
   17b50:	10800017 	ldw	r2,0(r2)
   17b54:	10000526 	beq	r2,zero,17b6c <alt_get_errno+0x34>
   17b58:	00800174 	movhi	r2,5
   17b5c:	10876e04 	addi	r2,r2,7608
   17b60:	10800017 	ldw	r2,0(r2)
   17b64:	103ee83a 	callr	r2
   17b68:	00000206 	br	17b74 <alt_get_errno+0x3c>
   17b6c:	00800174 	movhi	r2,5
   17b70:	108f7704 	addi	r2,r2,15836
}
   17b74:	e037883a 	mov	sp,fp
   17b78:	dfc00117 	ldw	ra,4(sp)
   17b7c:	df000017 	ldw	fp,0(sp)
   17b80:	dec00204 	addi	sp,sp,8
   17b84:	f800283a 	ret

00017b88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   17b88:	defff904 	addi	sp,sp,-28
   17b8c:	dfc00615 	stw	ra,24(sp)
   17b90:	df000515 	stw	fp,20(sp)
   17b94:	df000504 	addi	fp,sp,20
   17b98:	e13ffd15 	stw	r4,-12(fp)
   17b9c:	e17ffe15 	stw	r5,-8(fp)
   17ba0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   17ba4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17ba8:	e0bffd17 	ldw	r2,-12(fp)
   17bac:	10000616 	blt	r2,zero,17bc8 <lseek+0x40>
   17bb0:	e0bffd17 	ldw	r2,-12(fp)
   17bb4:	10c00324 	muli	r3,r2,12
   17bb8:	00800174 	movhi	r2,5
   17bbc:	10866604 	addi	r2,r2,6552
   17bc0:	1885883a 	add	r2,r3,r2
   17bc4:	00000106 	br	17bcc <lseek+0x44>
   17bc8:	0005883a 	mov	r2,zero
   17bcc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   17bd0:	e0bffc17 	ldw	r2,-16(fp)
   17bd4:	10001026 	beq	r2,zero,17c18 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   17bd8:	e0bffc17 	ldw	r2,-16(fp)
   17bdc:	10800017 	ldw	r2,0(r2)
   17be0:	10800717 	ldw	r2,28(r2)
   17be4:	10000926 	beq	r2,zero,17c0c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   17be8:	e0bffc17 	ldw	r2,-16(fp)
   17bec:	10800017 	ldw	r2,0(r2)
   17bf0:	10800717 	ldw	r2,28(r2)
   17bf4:	e13ffc17 	ldw	r4,-16(fp)
   17bf8:	e17ffe17 	ldw	r5,-8(fp)
   17bfc:	e1bfff17 	ldw	r6,-4(fp)
   17c00:	103ee83a 	callr	r2
   17c04:	e0bffb15 	stw	r2,-20(fp)
   17c08:	00000506 	br	17c20 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   17c0c:	00bfde84 	movi	r2,-134
   17c10:	e0bffb15 	stw	r2,-20(fp)
   17c14:	00000206 	br	17c20 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   17c18:	00bfebc4 	movi	r2,-81
   17c1c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   17c20:	e0bffb17 	ldw	r2,-20(fp)
   17c24:	1000070e 	bge	r2,zero,17c44 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   17c28:	0017b380 	call	17b38 <alt_get_errno>
   17c2c:	1007883a 	mov	r3,r2
   17c30:	e0bffb17 	ldw	r2,-20(fp)
   17c34:	0085c83a 	sub	r2,zero,r2
   17c38:	18800015 	stw	r2,0(r3)
    rc = -1;
   17c3c:	00bfffc4 	movi	r2,-1
   17c40:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   17c44:	e0bffb17 	ldw	r2,-20(fp)
}
   17c48:	e037883a 	mov	sp,fp
   17c4c:	dfc00117 	ldw	ra,4(sp)
   17c50:	df000017 	ldw	fp,0(sp)
   17c54:	dec00204 	addi	sp,sp,8
   17c58:	f800283a 	ret

00017c5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   17c5c:	defff904 	addi	sp,sp,-28
   17c60:	dfc00615 	stw	ra,24(sp)
   17c64:	df000515 	stw	fp,20(sp)
   17c68:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   17c6c:	0009883a 	mov	r4,zero
   17c70:	001fec00 	call	1fec0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   17c74:	0018a7c0 	call	18a7c <OSInit>
   17c78:	01000044 	movi	r4,1
   17c7c:	001d5dc0 	call	1d5dc <OSSemCreate>
   17c80:	1007883a 	mov	r3,r2
   17c84:	00800174 	movhi	r2,5
   17c88:	108f7f04 	addi	r2,r2,15868
   17c8c:	10c00015 	stw	r3,0(r2)
   17c90:	01000044 	movi	r4,1
   17c94:	001d5dc0 	call	1d5dc <OSSemCreate>
   17c98:	1007883a 	mov	r3,r2
   17c9c:	00800174 	movhi	r2,5
   17ca0:	108f8104 	addi	r2,r2,15876
   17ca4:	10c00015 	stw	r3,0(r2)
   17ca8:	00800174 	movhi	r2,5
   17cac:	108fcc04 	addi	r2,r2,16176
   17cb0:	e0bffc15 	stw	r2,-16(fp)
   17cb4:	00800044 	movi	r2,1
   17cb8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   17cbc:	e0bffd0b 	ldhu	r2,-12(fp)
   17cc0:	1009883a 	mov	r4,r2
   17cc4:	001d5dc0 	call	1d5dc <OSSemCreate>
   17cc8:	1007883a 	mov	r3,r2
   17ccc:	e0bffc17 	ldw	r2,-16(fp)
   17cd0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   17cd4:	001fef40 	call	1fef4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   17cd8:	01000174 	movhi	r4,5
   17cdc:	21365504 	addi	r4,r4,-9900
   17ce0:	01400174 	movhi	r5,5
   17ce4:	29765504 	addi	r5,r5,-9900
   17ce8:	01800174 	movhi	r6,5
   17cec:	31b65504 	addi	r6,r6,-9900
   17cf0:	003a0880 	call	3a088 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   17cf4:	0039b800 	call	39b80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   17cf8:	01000134 	movhi	r4,4
   17cfc:	2126f704 	addi	r4,r4,-25636
   17d00:	00496680 	call	49668 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   17d04:	d1285117 	ldw	r4,-24252(gp)
   17d08:	d0e85217 	ldw	r3,-24248(gp)
   17d0c:	d0a85317 	ldw	r2,-24244(gp)
   17d10:	180b883a 	mov	r5,r3
   17d14:	100d883a 	mov	r6,r2
   17d18:	0000efc0 	call	efc <main>
   17d1c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   17d20:	01000044 	movi	r4,1
   17d24:	00233b00 	call	233b0 <close>
  exit (result);
   17d28:	e13ffb17 	ldw	r4,-20(fp)
   17d2c:	00496940 	call	49694 <exit>

00017d30 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17d30:	defff904 	addi	sp,sp,-28
   17d34:	df000615 	stw	fp,24(sp)
   17d38:	df000604 	addi	fp,sp,24
   17d3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d40:	0005303a 	rdctl	r2,status
   17d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d48:	e0fffc17 	ldw	r3,-16(fp)
   17d4c:	00bfff84 	movi	r2,-2
   17d50:	1884703a 	and	r2,r3,r2
   17d54:	1001703a 	wrctl	status,r2
  
  return context;
   17d58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17d5c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17d60:	d0a00817 	ldw	r2,-32736(gp)
   17d64:	10c000c4 	addi	r3,r2,3
   17d68:	00bfff04 	movi	r2,-4
   17d6c:	1884703a 	and	r2,r3,r2
   17d70:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   17d74:	d0e00817 	ldw	r3,-32736(gp)
   17d78:	e0bfff17 	ldw	r2,-4(fp)
   17d7c:	1887883a 	add	r3,r3,r2
   17d80:	00880034 	movhi	r2,8192
   17d84:	10800004 	addi	r2,r2,0
   17d88:	10c0062e 	bgeu	r2,r3,17da4 <sbrk+0x74>
   17d8c:	e0bffa17 	ldw	r2,-24(fp)
   17d90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d94:	e0bffd17 	ldw	r2,-12(fp)
   17d98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   17d9c:	00bfffc4 	movi	r2,-1
   17da0:	00000b06 	br	17dd0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   17da4:	d0a00817 	ldw	r2,-32736(gp)
   17da8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   17dac:	d0e00817 	ldw	r3,-32736(gp)
   17db0:	e0bfff17 	ldw	r2,-4(fp)
   17db4:	1885883a 	add	r2,r3,r2
   17db8:	d0a00815 	stw	r2,-32736(gp)
   17dbc:	e0bffa17 	ldw	r2,-24(fp)
   17dc0:	e0bffe15 	stw	r2,-8(fp)
   17dc4:	e0bffe17 	ldw	r2,-8(fp)
   17dc8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   17dcc:	e0bffb17 	ldw	r2,-20(fp)
} 
   17dd0:	e037883a 	mov	sp,fp
   17dd4:	df000017 	ldw	fp,0(sp)
   17dd8:	dec00104 	addi	sp,sp,4
   17ddc:	f800283a 	ret

00017de0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   17de0:	defffa04 	addi	sp,sp,-24
   17de4:	dfc00515 	stw	ra,20(sp)
   17de8:	df000415 	stw	fp,16(sp)
   17dec:	dc000315 	stw	r16,12(sp)
   17df0:	df000404 	addi	fp,sp,16
   17df4:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
   17df8:	00800174 	movhi	r2,5
   17dfc:	108f8244 	addi	r2,r2,15881
   17e00:	10800003 	ldbu	r2,0(r2)
   17e04:	10803fcc 	andi	r2,r2,255
   17e08:	1000031e 	bne	r2,zero,17e18 <usleep+0x38>
  {
    return alt_busy_sleep (us);
   17e0c:	e13ffe17 	ldw	r4,-8(fp)
   17e10:	00397300 	call	39730 <alt_busy_sleep>
   17e14:	00003506 	br	17eec <usleep+0x10c>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17e18:	00800174 	movhi	r2,5
   17e1c:	108fce04 	addi	r2,r2,16184
   17e20:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
   17e24:	e0bffd15 	stw	r2,-12(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
   17e28:	e0bffe17 	ldw	r2,-8(fp)
   17e2c:	1009883a 	mov	r4,r2
   17e30:	014003f4 	movhi	r5,15
   17e34:	29509004 	addi	r5,r5,16960
   17e38:	00152500 	call	15250 <__udivsi3>
   17e3c:	1007883a 	mov	r3,r2
   17e40:	e0bffd17 	ldw	r2,-12(fp)
   17e44:	18a1383a 	mul	r16,r3,r2
   17e48:	e0bffe17 	ldw	r2,-8(fp)
   17e4c:	1009883a 	mov	r4,r2
   17e50:	014003f4 	movhi	r5,15
   17e54:	29509004 	addi	r5,r5,16960
   17e58:	00152580 	call	15258 <__umodsi3>
   17e5c:	1007883a 	mov	r3,r2
   17e60:	e0bffd17 	ldw	r2,-12(fp)
   17e64:	1885383a 	mul	r2,r3,r2
   17e68:	1009883a 	mov	r4,r2
   17e6c:	014003f4 	movhi	r5,15
   17e70:	29509004 	addi	r5,r5,16960
   17e74:	00152500 	call	15250 <__udivsi3>
   17e78:	8085883a 	add	r2,r16,r2
   17e7c:	e0bffc15 	stw	r2,-16(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
   17e80:	00000706 	br	17ea0 <usleep+0xc0>
  {
    OSTimeDly(0xffff);
   17e84:	013fffd4 	movui	r4,65535
   17e88:	001f9280 	call	1f928 <OSTimeDly>
    ticks -= 0xffff;
   17e8c:	e0fffc17 	ldw	r3,-16(fp)
   17e90:	00bffff4 	movhi	r2,65535
   17e94:	10800044 	addi	r2,r2,1
   17e98:	1885883a 	add	r2,r3,r2
   17e9c:	e0bffc15 	stw	r2,-16(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
   17ea0:	e0bffc17 	ldw	r2,-16(fp)
   17ea4:	00ffffd4 	movui	r3,65535
   17ea8:	18bff636 	bltu	r3,r2,17e84 <__alt_mem_descriptor_memory+0xdefd7e84>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
   17eac:	e0bffc17 	ldw	r2,-16(fp)
   17eb0:	10bfffcc 	andi	r2,r2,65535
   17eb4:	1009883a 	mov	r4,r2
   17eb8:	001f9280 	call	1f928 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
   17ebc:	010003f4 	movhi	r4,15
   17ec0:	21109004 	addi	r4,r4,16960
   17ec4:	e17ffd17 	ldw	r5,-12(fp)
   17ec8:	00152500 	call	15250 <__udivsi3>
   17ecc:	1007883a 	mov	r3,r2
   17ed0:	e0bffe17 	ldw	r2,-8(fp)
   17ed4:	1009883a 	mov	r4,r2
   17ed8:	180b883a 	mov	r5,r3
   17edc:	00152580 	call	15258 <__umodsi3>
   17ee0:	1009883a 	mov	r4,r2
   17ee4:	00397300 	call	39730 <alt_busy_sleep>

  return 0;  
   17ee8:	0005883a 	mov	r2,zero
}
   17eec:	e6ffff04 	addi	sp,fp,-4
   17ef0:	dfc00217 	ldw	ra,8(sp)
   17ef4:	df000117 	ldw	fp,4(sp)
   17ef8:	dc000017 	ldw	r16,0(sp)
   17efc:	dec00304 	addi	sp,sp,12
   17f00:	f800283a 	ret

00017f04 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   17f04:	deffdf04 	addi	sp,sp,-132
   17f08:	dfc02015 	stw	ra,128(sp)
   17f0c:	df001f15 	stw	fp,124(sp)
   17f10:	df001f04 	addi	fp,sp,124
   17f14:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   17f18:	e0bfe204 	addi	r2,fp,-120
   17f1c:	01003fc4 	movi	r4,255
   17f20:	100b883a 	mov	r5,r2
   17f24:	001f7900 	call	1f790 <OSTaskQuery>
   17f28:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   17f2c:	e0bffe83 	ldbu	r2,-6(fp)
   17f30:	10803fcc 	andi	r2,r2,255
   17f34:	10000126 	beq	r2,zero,17f3c <__env_lock+0x38>
    return;
   17f38:	00001d06 	br	17fb0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   17f3c:	e0bfee83 	ldbu	r2,-70(fp)
   17f40:	10803fcc 	andi	r2,r2,255
   17f44:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   17f48:	d0e85517 	ldw	r3,-24236(gp)
   17f4c:	e0bffd04 	addi	r2,fp,-12
   17f50:	1809883a 	mov	r4,r3
   17f54:	100b883a 	mov	r5,r2
   17f58:	001de280 	call	1de28 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   17f5c:	e0bffe43 	ldbu	r2,-7(fp)
   17f60:	10803fcc 	andi	r2,r2,255
   17f64:	10000726 	beq	r2,zero,17f84 <__env_lock+0x80>
   17f68:	d0a00917 	ldw	r2,-32732(gp)
   17f6c:	e0ffe117 	ldw	r3,-124(fp)
   17f70:	1880041e 	bne	r3,r2,17f84 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   17f74:	d0a85417 	ldw	r2,-24240(gp)
   17f78:	10800044 	addi	r2,r2,1
   17f7c:	d0a85415 	stw	r2,-24240(gp)
   17f80:	00000a06 	br	17fac <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   17f84:	d0e85517 	ldw	r3,-24236(gp)
   17f88:	e0bffe84 	addi	r2,fp,-6
   17f8c:	1809883a 	mov	r4,r3
   17f90:	000b883a 	mov	r5,zero
   17f94:	100d883a 	mov	r6,r2
   17f98:	001d9440 	call	1d944 <OSSemPend>
    locks  = 1;
   17f9c:	00800044 	movi	r2,1
   17fa0:	d0a85415 	stw	r2,-24240(gp)
    lockid = id;
   17fa4:	e0bfe117 	ldw	r2,-124(fp)
   17fa8:	d0a00915 	stw	r2,-32732(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   17fac:	0001883a 	nop
}
   17fb0:	e037883a 	mov	sp,fp
   17fb4:	dfc00117 	ldw	ra,4(sp)
   17fb8:	df000017 	ldw	fp,0(sp)
   17fbc:	dec00204 	addi	sp,sp,8
   17fc0:	f800283a 	ret

00017fc4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   17fc4:	defffd04 	addi	sp,sp,-12
   17fc8:	dfc00215 	stw	ra,8(sp)
   17fcc:	df000115 	stw	fp,4(sp)
   17fd0:	df000104 	addi	fp,sp,4
   17fd4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   17fd8:	d0a85417 	ldw	r2,-24240(gp)
   17fdc:	1000011e 	bne	r2,zero,17fe4 <__env_unlock+0x20>
    return;
   17fe0:	00000a06 	br	1800c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   17fe4:	d0a85417 	ldw	r2,-24240(gp)
   17fe8:	10bfffc4 	addi	r2,r2,-1
   17fec:	d0a85415 	stw	r2,-24240(gp)
   17ff0:	d0a85417 	ldw	r2,-24240(gp)
   17ff4:	1000051e 	bne	r2,zero,1800c <__env_unlock+0x48>
  {
    lockid = -1;
   17ff8:	00bfffc4 	movi	r2,-1
   17ffc:	d0a00915 	stw	r2,-32732(gp)
    OSSemPost( alt_envsem );
   18000:	d0a85517 	ldw	r2,-24236(gp)
   18004:	1009883a 	mov	r4,r2
   18008:	001dd180 	call	1dd18 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1800c:	e037883a 	mov	sp,fp
   18010:	dfc00117 	ldw	ra,4(sp)
   18014:	df000017 	ldw	fp,0(sp)
   18018:	dec00204 	addi	sp,sp,8
   1801c:	f800283a 	ret

00018020 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   18020:	deffdb04 	addi	sp,sp,-148
   18024:	dfc02415 	stw	ra,144(sp)
   18028:	df002315 	stw	fp,140(sp)
   1802c:	df002304 	addi	fp,sp,140
   18030:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18034:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   18038:	00800174 	movhi	r2,5
   1803c:	108f8244 	addi	r2,r2,15881
   18040:	10800003 	ldbu	r2,0(r2)
   18044:	10803fcc 	andi	r2,r2,255
   18048:	10800060 	cmpeqi	r2,r2,1
   1804c:	1000011e 	bne	r2,zero,18054 <__malloc_lock+0x34>
      return;
   18050:	00003606 	br	1812c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   18054:	e0bfe204 	addi	r2,fp,-120
   18058:	01003fc4 	movi	r4,255
   1805c:	100b883a 	mov	r5,r2
   18060:	001f7900 	call	1f790 <OSTaskQuery>
   18064:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   18068:	e0bffe83 	ldbu	r2,-6(fp)
   1806c:	10803fcc 	andi	r2,r2,255
   18070:	10000126 	beq	r2,zero,18078 <__malloc_lock+0x58>
    return;
   18074:	00002d06 	br	1812c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   18078:	e0bfee83 	ldbu	r2,-70(fp)
   1807c:	10803fcc 	andi	r2,r2,255
   18080:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   18084:	d0e85717 	ldw	r3,-24228(gp)
   18088:	e0bffd04 	addi	r2,fp,-12
   1808c:	1809883a 	mov	r4,r3
   18090:	100b883a 	mov	r5,r2
   18094:	001de280 	call	1de28 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18098:	0005303a 	rdctl	r2,status
   1809c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180a0:	e0ffdf17 	ldw	r3,-132(fp)
   180a4:	00bfff84 	movi	r2,-2
   180a8:	1884703a 	and	r2,r3,r2
   180ac:	1001703a 	wrctl	status,r2
  
  return context;
   180b0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   180b4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   180b8:	e0bffd0b 	ldhu	r2,-12(fp)
   180bc:	10bfffcc 	andi	r2,r2,65535
   180c0:	10000b1e 	bne	r2,zero,180f0 <__malloc_lock+0xd0>
   180c4:	d0a00a17 	ldw	r2,-32728(gp)
   180c8:	e0ffde17 	ldw	r3,-136(fp)
   180cc:	1880081e 	bne	r3,r2,180f0 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   180d0:	d0a85617 	ldw	r2,-24232(gp)
   180d4:	10800044 	addi	r2,r2,1
   180d8:	d0a85615 	stw	r2,-24232(gp)
   180dc:	e0bfdd17 	ldw	r2,-140(fp)
   180e0:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180e4:	e0bfe017 	ldw	r2,-128(fp)
   180e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   180ec:	00000e06 	br	18128 <__malloc_lock+0x108>
   180f0:	e0bfdd17 	ldw	r2,-140(fp)
   180f4:	e0bfe115 	stw	r2,-124(fp)
   180f8:	e0bfe117 	ldw	r2,-124(fp)
   180fc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   18100:	d0e85717 	ldw	r3,-24228(gp)
   18104:	e0bffe84 	addi	r2,fp,-6
   18108:	1809883a 	mov	r4,r3
   1810c:	000b883a 	mov	r5,zero
   18110:	100d883a 	mov	r6,r2
   18114:	001d9440 	call	1d944 <OSSemPend>
    locks  = 1;
   18118:	00800044 	movi	r2,1
   1811c:	d0a85615 	stw	r2,-24232(gp)
    lockid = id;
   18120:	e0bfde17 	ldw	r2,-136(fp)
   18124:	d0a00a15 	stw	r2,-32728(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   18128:	0001883a 	nop
}
   1812c:	e037883a 	mov	sp,fp
   18130:	dfc00117 	ldw	ra,4(sp)
   18134:	df000017 	ldw	fp,0(sp)
   18138:	dec00204 	addi	sp,sp,8
   1813c:	f800283a 	ret

00018140 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   18140:	defff804 	addi	sp,sp,-32
   18144:	dfc00715 	stw	ra,28(sp)
   18148:	df000615 	stw	fp,24(sp)
   1814c:	df000604 	addi	fp,sp,24
   18150:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18154:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   18158:	00800174 	movhi	r2,5
   1815c:	108f8244 	addi	r2,r2,15881
   18160:	10800003 	ldbu	r2,0(r2)
   18164:	10803fcc 	andi	r2,r2,255
   18168:	10800060 	cmpeqi	r2,r2,1
   1816c:	1000011e 	bne	r2,zero,18174 <__malloc_unlock+0x34>
      return;
   18170:	00002206 	br	181fc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18174:	0005303a 	rdctl	r2,status
   18178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1817c:	e0fffb17 	ldw	r3,-20(fp)
   18180:	00bfff84 	movi	r2,-2
   18184:	1884703a 	and	r2,r3,r2
   18188:	1001703a 	wrctl	status,r2
  
  return context;
   1818c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   18190:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   18194:	d0a85617 	ldw	r2,-24232(gp)
   18198:	1000051e 	bne	r2,zero,181b0 <__malloc_unlock+0x70>
   1819c:	e0bffa17 	ldw	r2,-24(fp)
   181a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181a4:	e0bffc17 	ldw	r2,-16(fp)
   181a8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   181ac:	00001306 	br	181fc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   181b0:	d0a85617 	ldw	r2,-24232(gp)
   181b4:	10bfffc4 	addi	r2,r2,-1
   181b8:	d0a85615 	stw	r2,-24232(gp)
   181bc:	d0a85617 	ldw	r2,-24232(gp)
   181c0:	10000a1e 	bne	r2,zero,181ec <__malloc_unlock+0xac>
  {
    lockid = -1;
   181c4:	00bfffc4 	movi	r2,-1
   181c8:	d0a00a15 	stw	r2,-32728(gp)
   181cc:	e0bffa17 	ldw	r2,-24(fp)
   181d0:	e0bffd15 	stw	r2,-12(fp)
   181d4:	e0bffd17 	ldw	r2,-12(fp)
   181d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   181dc:	d0a85717 	ldw	r2,-24228(gp)
   181e0:	1009883a 	mov	r4,r2
   181e4:	001dd180 	call	1dd18 <OSSemPost>
   181e8:	00000406 	br	181fc <__malloc_unlock+0xbc>
   181ec:	e0bffa17 	ldw	r2,-24(fp)
   181f0:	e0bffe15 	stw	r2,-8(fp)
   181f4:	e0bffe17 	ldw	r2,-8(fp)
   181f8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   181fc:	e037883a 	mov	sp,fp
   18200:	dfc00117 	ldw	ra,4(sp)
   18204:	df000017 	ldw	fp,0(sp)
   18208:	dec00204 	addi	sp,sp,8
   1820c:	f800283a 	ret

00018210 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   18210:	defff704 	addi	sp,sp,-36
   18214:	dfc00815 	stw	ra,32(sp)
   18218:	df000715 	stw	fp,28(sp)
   1821c:	df000704 	addi	fp,sp,28
   18220:	e13ffd15 	stw	r4,-12(fp)
   18224:	e17ffe15 	stw	r5,-8(fp)
   18228:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1822c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18230:	e0bfff17 	ldw	r2,-4(fp)
   18234:	1000021e 	bne	r2,zero,18240 <OSEventNameGet+0x30>
        return (0);
   18238:	0005883a 	mov	r2,zero
   1823c:	00003706 	br	1831c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   18240:	e0bffd17 	ldw	r2,-12(fp)
   18244:	1000051e 	bne	r2,zero,1825c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   18248:	e0bfff17 	ldw	r2,-4(fp)
   1824c:	00c00104 	movi	r3,4
   18250:	10c00005 	stb	r3,0(r2)
        return (0);
   18254:	0005883a 	mov	r2,zero
   18258:	00003006 	br	1831c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1825c:	e0bffe17 	ldw	r2,-8(fp)
   18260:	1000051e 	bne	r2,zero,18278 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   18264:	e0bfff17 	ldw	r2,-4(fp)
   18268:	00c00304 	movi	r3,12
   1826c:	10c00005 	stb	r3,0(r2)
        return (0);
   18270:	0005883a 	mov	r2,zero
   18274:	00002906 	br	1831c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18278:	d0a86603 	ldbu	r2,-24168(gp)
   1827c:	10803fcc 	andi	r2,r2,255
   18280:	10000526 	beq	r2,zero,18298 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   18284:	e0bfff17 	ldw	r2,-4(fp)
   18288:	00c00444 	movi	r3,17
   1828c:	10c00005 	stb	r3,0(r2)
        return (0);
   18290:	0005883a 	mov	r2,zero
   18294:	00002106 	br	1831c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   18298:	e0bffd17 	ldw	r2,-12(fp)
   1829c:	10800003 	ldbu	r2,0(r2)
   182a0:	10803fcc 	andi	r2,r2,255
   182a4:	10bfffc4 	addi	r2,r2,-1
   182a8:	10800128 	cmpgeui	r2,r2,4
   182ac:	10000526 	beq	r2,zero,182c4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   182b0:	e0bfff17 	ldw	r2,-4(fp)
   182b4:	00c00044 	movi	r3,1
   182b8:	10c00005 	stb	r3,0(r2)
             return (0);
   182bc:	0005883a 	mov	r2,zero
   182c0:	00001606 	br	1831c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   182c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182c8:	0005303a 	rdctl	r2,status
   182cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182d0:	e0fffb17 	ldw	r3,-20(fp)
   182d4:	00bfff84 	movi	r2,-2
   182d8:	1884703a 	and	r2,r3,r2
   182dc:	1001703a 	wrctl	status,r2
  
  return context;
   182e0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   182e4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   182e8:	e0bffd17 	ldw	r2,-12(fp)
   182ec:	10800384 	addi	r2,r2,14
   182f0:	e13ffe17 	ldw	r4,-8(fp)
   182f4:	100b883a 	mov	r5,r2
   182f8:	0019c640 	call	19c64 <OS_StrCopy>
   182fc:	e0bffa05 	stb	r2,-24(fp)
   18300:	e0bff917 	ldw	r2,-28(fp)
   18304:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18308:	e0bffc17 	ldw	r2,-16(fp)
   1830c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18310:	e0bfff17 	ldw	r2,-4(fp)
   18314:	10000005 	stb	zero,0(r2)
    return (len);
   18318:	e0bffa03 	ldbu	r2,-24(fp)
}
   1831c:	e037883a 	mov	sp,fp
   18320:	dfc00117 	ldw	ra,4(sp)
   18324:	df000017 	ldw	fp,0(sp)
   18328:	dec00204 	addi	sp,sp,8
   1832c:	f800283a 	ret

00018330 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   18330:	defff604 	addi	sp,sp,-40
   18334:	dfc00915 	stw	ra,36(sp)
   18338:	df000815 	stw	fp,32(sp)
   1833c:	df000804 	addi	fp,sp,32
   18340:	e13ffd15 	stw	r4,-12(fp)
   18344:	e17ffe15 	stw	r5,-8(fp)
   18348:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1834c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18350:	e0bfff17 	ldw	r2,-4(fp)
   18354:	1000011e 	bne	r2,zero,1835c <OSEventNameSet+0x2c>
        return;
   18358:	00003f06 	br	18458 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1835c:	e0bffd17 	ldw	r2,-12(fp)
   18360:	1000041e 	bne	r2,zero,18374 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18364:	e0bfff17 	ldw	r2,-4(fp)
   18368:	00c00104 	movi	r3,4
   1836c:	10c00005 	stb	r3,0(r2)
        return;
   18370:	00003906 	br	18458 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   18374:	e0bffe17 	ldw	r2,-8(fp)
   18378:	1000041e 	bne	r2,zero,1838c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1837c:	e0bfff17 	ldw	r2,-4(fp)
   18380:	00c00304 	movi	r3,12
   18384:	10c00005 	stb	r3,0(r2)
        return;
   18388:	00003306 	br	18458 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1838c:	d0a86603 	ldbu	r2,-24168(gp)
   18390:	10803fcc 	andi	r2,r2,255
   18394:	10000426 	beq	r2,zero,183a8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   18398:	e0bfff17 	ldw	r2,-4(fp)
   1839c:	00c00484 	movi	r3,18
   183a0:	10c00005 	stb	r3,0(r2)
        return;
   183a4:	00002c06 	br	18458 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   183a8:	e0bffd17 	ldw	r2,-12(fp)
   183ac:	10800003 	ldbu	r2,0(r2)
   183b0:	10803fcc 	andi	r2,r2,255
   183b4:	10bfffc4 	addi	r2,r2,-1
   183b8:	10800128 	cmpgeui	r2,r2,4
   183bc:	10000426 	beq	r2,zero,183d0 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   183c0:	e0bfff17 	ldw	r2,-4(fp)
   183c4:	00c00044 	movi	r3,1
   183c8:	10c00005 	stb	r3,0(r2)
             return;
   183cc:	00002206 	br	18458 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   183d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   183d4:	0005303a 	rdctl	r2,status
   183d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   183dc:	e0fffa17 	ldw	r3,-24(fp)
   183e0:	00bfff84 	movi	r2,-2
   183e4:	1884703a 	and	r2,r3,r2
   183e8:	1001703a 	wrctl	status,r2
  
  return context;
   183ec:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   183f0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   183f4:	e13ffe17 	ldw	r4,-8(fp)
   183f8:	0019cd80 	call	19cd8 <OS_StrLen>
   183fc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   18400:	e0bff903 	ldbu	r2,-28(fp)
   18404:	10800830 	cmpltui	r2,r2,32
   18408:	1000081e 	bne	r2,zero,1842c <OSEventNameSet+0xfc>
   1840c:	e0bff817 	ldw	r2,-32(fp)
   18410:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18414:	e0bffb17 	ldw	r2,-20(fp)
   18418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   1841c:	e0bfff17 	ldw	r2,-4(fp)
   18420:	00c002c4 	movi	r3,11
   18424:	10c00005 	stb	r3,0(r2)
        return;
   18428:	00000b06 	br	18458 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   1842c:	e0bffd17 	ldw	r2,-12(fp)
   18430:	10800384 	addi	r2,r2,14
   18434:	1009883a 	mov	r4,r2
   18438:	e17ffe17 	ldw	r5,-8(fp)
   1843c:	0019c640 	call	19c64 <OS_StrCopy>
   18440:	e0bff817 	ldw	r2,-32(fp)
   18444:	e0bffc15 	stw	r2,-16(fp)
   18448:	e0bffc17 	ldw	r2,-16(fp)
   1844c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18450:	e0bfff17 	ldw	r2,-4(fp)
   18454:	10000005 	stb	zero,0(r2)
}
   18458:	e037883a 	mov	sp,fp
   1845c:	dfc00117 	ldw	ra,4(sp)
   18460:	df000017 	ldw	fp,0(sp)
   18464:	dec00204 	addi	sp,sp,8
   18468:	f800283a 	ret

0001846c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1846c:	deffed04 	addi	sp,sp,-76
   18470:	dfc01215 	stw	ra,72(sp)
   18474:	df001115 	stw	fp,68(sp)
   18478:	df001104 	addi	fp,sp,68
   1847c:	e13ffc15 	stw	r4,-16(fp)
   18480:	e17ffd15 	stw	r5,-12(fp)
   18484:	e1bffe15 	stw	r6,-8(fp)
   18488:	3805883a 	mov	r2,r7
   1848c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   18490:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   18494:	e0800217 	ldw	r2,8(fp)
   18498:	1000021e 	bne	r2,zero,184a4 <OSEventPendMulti+0x38>
        return (0);
   1849c:	0005883a 	mov	r2,zero
   184a0:	00017106 	br	18a68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   184a4:	e0bffc17 	ldw	r2,-16(fp)
   184a8:	1000051e 	bne	r2,zero,184c0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   184ac:	e0800217 	ldw	r2,8(fp)
   184b0:	00c00104 	movi	r3,4
   184b4:	10c00005 	stb	r3,0(r2)
        return (0);
   184b8:	0005883a 	mov	r2,zero
   184bc:	00016a06 	br	18a68 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   184c0:	e0bffd17 	ldw	r2,-12(fp)
   184c4:	1000051e 	bne	r2,zero,184dc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   184c8:	e0800217 	ldw	r2,8(fp)
   184cc:	00c00104 	movi	r3,4
   184d0:	10c00005 	stb	r3,0(r2)
        return (0);
   184d4:	0005883a 	mov	r2,zero
   184d8:	00016306 	br	18a68 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   184dc:	e0bffe17 	ldw	r2,-8(fp)
   184e0:	1000051e 	bne	r2,zero,184f8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   184e4:	e0800217 	ldw	r2,8(fp)
   184e8:	00c00104 	movi	r3,4
   184ec:	10c00005 	stb	r3,0(r2)
        return (0);
   184f0:	0005883a 	mov	r2,zero
   184f4:	00015c06 	br	18a68 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   184f8:	e0bffd17 	ldw	r2,-12(fp)
   184fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   18500:	e0bffc17 	ldw	r2,-16(fp)
   18504:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   18508:	e0bfef17 	ldw	r2,-68(fp)
   1850c:	10800017 	ldw	r2,0(r2)
   18510:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   18514:	00001906 	br	1857c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   18518:	e0bff017 	ldw	r2,-64(fp)
   1851c:	10800003 	ldbu	r2,0(r2)
   18520:	10803fcc 	andi	r2,r2,255
   18524:	10c000a0 	cmpeqi	r3,r2,2
   18528:	1800091e 	bne	r3,zero,18550 <OSEventPendMulti+0xe4>
   1852c:	10c000e0 	cmpeqi	r3,r2,3
   18530:	1800091e 	bne	r3,zero,18558 <OSEventPendMulti+0xec>
   18534:	10800060 	cmpeqi	r2,r2,1
   18538:	1000091e 	bne	r2,zero,18560 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1853c:	e0800217 	ldw	r2,8(fp)
   18540:	00c00044 	movi	r3,1
   18544:	10c00005 	stb	r3,0(r2)
                 return (0);
   18548:	0005883a 	mov	r2,zero
   1854c:	00014606 	br	18a68 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   18550:	0001883a 	nop
   18554:	00000306 	br	18564 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   18558:	0001883a 	nop
   1855c:	00000106 	br	18564 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   18560:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   18564:	e0bfef17 	ldw	r2,-68(fp)
   18568:	10800104 	addi	r2,r2,4
   1856c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   18570:	e0bfef17 	ldw	r2,-68(fp)
   18574:	10800017 	ldw	r2,0(r2)
   18578:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1857c:	e0bff017 	ldw	r2,-64(fp)
   18580:	103fe51e 	bne	r2,zero,18518 <__alt_mem_descriptor_memory+0xdefd8518>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   18584:	d0a86603 	ldbu	r2,-24168(gp)
   18588:	10803fcc 	andi	r2,r2,255
   1858c:	10000526 	beq	r2,zero,185a4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   18590:	e0800217 	ldw	r2,8(fp)
   18594:	00c00084 	movi	r3,2
   18598:	10c00005 	stb	r3,0(r2)
        return (0);
   1859c:	0005883a 	mov	r2,zero
   185a0:	00013106 	br	18a68 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   185a4:	d0a85803 	ldbu	r2,-24224(gp)
   185a8:	10803fcc 	andi	r2,r2,255
   185ac:	10000526 	beq	r2,zero,185c4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   185b0:	e0800217 	ldw	r2,8(fp)
   185b4:	00c00344 	movi	r3,13
   185b8:	10c00005 	stb	r3,0(r2)
        return (0);
   185bc:	0005883a 	mov	r2,zero
   185c0:	00012906 	br	18a68 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185c4:	0005303a 	rdctl	r2,status
   185c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185cc:	e0fff517 	ldw	r3,-44(fp)
   185d0:	00bfff84 	movi	r2,-2
   185d4:	1884703a 	and	r2,r3,r2
   185d8:	1001703a 	wrctl	status,r2
  
  return context;
   185dc:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   185e0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   185e4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   185e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   185ec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   185f0:	e0bffc17 	ldw	r2,-16(fp)
   185f4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   185f8:	e0bfef17 	ldw	r2,-68(fp)
   185fc:	10800017 	ldw	r2,0(r2)
   18600:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   18604:	00008106 	br	1880c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   18608:	e0bff017 	ldw	r2,-64(fp)
   1860c:	10800003 	ldbu	r2,0(r2)
   18610:	10803fcc 	andi	r2,r2,255
   18614:	10c000a0 	cmpeqi	r3,r2,2
   18618:	18003c1e 	bne	r3,zero,1870c <OSEventPendMulti+0x2a0>
   1861c:	10c000e0 	cmpeqi	r3,r2,3
   18620:	1800031e 	bne	r3,zero,18630 <OSEventPendMulti+0x1c4>
   18624:	10800060 	cmpeqi	r2,r2,1
   18628:	10001e1e 	bne	r2,zero,186a4 <OSEventPendMulti+0x238>
   1862c:	00006606 	br	187c8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   18630:	e0bff017 	ldw	r2,-64(fp)
   18634:	1080020b 	ldhu	r2,8(r2)
   18638:	10bfffcc 	andi	r2,r2,65535
   1863c:	10001526 	beq	r2,zero,18694 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   18640:	e0bff017 	ldw	r2,-64(fp)
   18644:	1080020b 	ldhu	r2,8(r2)
   18648:	10bfffc4 	addi	r2,r2,-1
   1864c:	1007883a 	mov	r3,r2
   18650:	e0bff017 	ldw	r2,-64(fp)
   18654:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   18658:	e0bffd17 	ldw	r2,-12(fp)
   1865c:	10c00104 	addi	r3,r2,4
   18660:	e0fffd15 	stw	r3,-12(fp)
   18664:	e0fff017 	ldw	r3,-64(fp)
   18668:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1866c:	00800044 	movi	r2,1
   18670:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   18674:	e0bffe17 	ldw	r2,-8(fp)
   18678:	10c00104 	addi	r3,r2,4
   1867c:	e0fffe15 	stw	r3,-8(fp)
   18680:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   18684:	e0bff18b 	ldhu	r2,-58(fp)
   18688:	10800044 	addi	r2,r2,1
   1868c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   18690:	00005806 	br	187f4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   18694:	e0bff203 	ldbu	r2,-56(fp)
   18698:	10800054 	ori	r2,r2,1
   1869c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   186a0:	00005406 	br	187f4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   186a4:	e0bff017 	ldw	r2,-64(fp)
   186a8:	10800117 	ldw	r2,4(r2)
   186ac:	10001326 	beq	r2,zero,186fc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   186b0:	e0bffe17 	ldw	r2,-8(fp)
   186b4:	10c00104 	addi	r3,r2,4
   186b8:	e0fffe15 	stw	r3,-8(fp)
   186bc:	e0fff017 	ldw	r3,-64(fp)
   186c0:	18c00117 	ldw	r3,4(r3)
   186c4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   186c8:	e0bff017 	ldw	r2,-64(fp)
   186cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   186d0:	e0bffd17 	ldw	r2,-12(fp)
   186d4:	10c00104 	addi	r3,r2,4
   186d8:	e0fffd15 	stw	r3,-12(fp)
   186dc:	e0fff017 	ldw	r3,-64(fp)
   186e0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   186e4:	00800044 	movi	r2,1
   186e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   186ec:	e0bff18b 	ldhu	r2,-58(fp)
   186f0:	10800044 	addi	r2,r2,1
   186f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   186f8:	00003e06 	br	187f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   186fc:	e0bff203 	ldbu	r2,-56(fp)
   18700:	10800094 	ori	r2,r2,2
   18704:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   18708:	00003a06 	br	187f4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1870c:	e0bff017 	ldw	r2,-64(fp)
   18710:	10800117 	ldw	r2,4(r2)
   18714:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   18718:	e0bff417 	ldw	r2,-48(fp)
   1871c:	1080058b 	ldhu	r2,22(r2)
   18720:	10bfffcc 	andi	r2,r2,65535
   18724:	10002426 	beq	r2,zero,187b8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   18728:	e0bffe17 	ldw	r2,-8(fp)
   1872c:	10c00104 	addi	r3,r2,4
   18730:	e0fffe15 	stw	r3,-8(fp)
   18734:	e0fff417 	ldw	r3,-48(fp)
   18738:	18c00417 	ldw	r3,16(r3)
   1873c:	19400104 	addi	r5,r3,4
   18740:	e13ff417 	ldw	r4,-48(fp)
   18744:	21400415 	stw	r5,16(r4)
   18748:	18c00017 	ldw	r3,0(r3)
   1874c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   18750:	e0bff417 	ldw	r2,-48(fp)
   18754:	10c00417 	ldw	r3,16(r2)
   18758:	e0bff417 	ldw	r2,-48(fp)
   1875c:	10800217 	ldw	r2,8(r2)
   18760:	1880041e 	bne	r3,r2,18774 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   18764:	e0bff417 	ldw	r2,-48(fp)
   18768:	10c00117 	ldw	r3,4(r2)
   1876c:	e0bff417 	ldw	r2,-48(fp)
   18770:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   18774:	e0bff417 	ldw	r2,-48(fp)
   18778:	1080058b 	ldhu	r2,22(r2)
   1877c:	10bfffc4 	addi	r2,r2,-1
   18780:	1007883a 	mov	r3,r2
   18784:	e0bff417 	ldw	r2,-48(fp)
   18788:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1878c:	e0bffd17 	ldw	r2,-12(fp)
   18790:	10c00104 	addi	r3,r2,4
   18794:	e0fffd15 	stw	r3,-12(fp)
   18798:	e0fff017 	ldw	r3,-64(fp)
   1879c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   187a0:	00800044 	movi	r2,1
   187a4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   187a8:	e0bff18b 	ldhu	r2,-58(fp)
   187ac:	10800044 	addi	r2,r2,1
   187b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   187b4:	00000f06 	br	187f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   187b8:	e0bff203 	ldbu	r2,-56(fp)
   187bc:	10800114 	ori	r2,r2,4
   187c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   187c4:	00000b06 	br	187f4 <OSEventPendMulti+0x388>
   187c8:	e0bff317 	ldw	r2,-52(fp)
   187cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187d0:	e0bff617 	ldw	r2,-40(fp)
   187d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   187d8:	e0bffd17 	ldw	r2,-12(fp)
   187dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   187e0:	e0800217 	ldw	r2,8(fp)
   187e4:	00c00044 	movi	r3,1
   187e8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   187ec:	e0bff18b 	ldhu	r2,-58(fp)
   187f0:	00009d06 	br	18a68 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   187f4:	e0bfef17 	ldw	r2,-68(fp)
   187f8:	10800104 	addi	r2,r2,4
   187fc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   18800:	e0bfef17 	ldw	r2,-68(fp)
   18804:	10800017 	ldw	r2,0(r2)
   18808:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1880c:	e0bff017 	ldw	r2,-64(fp)
   18810:	103f7d1e 	bne	r2,zero,18608 <__alt_mem_descriptor_memory+0xdefd8608>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   18814:	e0bff103 	ldbu	r2,-60(fp)
   18818:	10800058 	cmpnei	r2,r2,1
   1881c:	10000a1e 	bne	r2,zero,18848 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   18820:	e0bffd17 	ldw	r2,-12(fp)
   18824:	10000015 	stw	zero,0(r2)
   18828:	e0bff317 	ldw	r2,-52(fp)
   1882c:	e0bff715 	stw	r2,-36(fp)
   18830:	e0bff717 	ldw	r2,-36(fp)
   18834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   18838:	e0800217 	ldw	r2,8(fp)
   1883c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   18840:	e0bff18b 	ldhu	r2,-58(fp)
   18844:	00008806 	br	18a68 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   18848:	d0a86717 	ldw	r2,-24164(gp)
   1884c:	d0e86717 	ldw	r3,-24164(gp)
   18850:	19000c03 	ldbu	r4,48(r3)
   18854:	e0fff203 	ldbu	r3,-56(fp)
   18858:	20c6b03a 	or	r3,r4,r3
   1885c:	1809883a 	mov	r4,r3
   18860:	00ffe004 	movi	r3,-128
   18864:	20c6b03a 	or	r3,r4,r3
   18868:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1886c:	d0a86717 	ldw	r2,-24164(gp)
   18870:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   18874:	d0a86717 	ldw	r2,-24164(gp)
   18878:	e0ffff0b 	ldhu	r3,-4(fp)
   1887c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   18880:	e13ffc17 	ldw	r4,-16(fp)
   18884:	00193b40 	call	193b4 <OS_EventTaskWaitMulti>
   18888:	e0bff317 	ldw	r2,-52(fp)
   1888c:	e0bff815 	stw	r2,-32(fp)
   18890:	e0bff817 	ldw	r2,-32(fp)
   18894:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   18898:	0019b280 	call	19b28 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1889c:	0005303a 	rdctl	r2,status
   188a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188a4:	e0fff917 	ldw	r3,-28(fp)
   188a8:	00bfff84 	movi	r2,-2
   188ac:	1884703a 	and	r2,r3,r2
   188b0:	1001703a 	wrctl	status,r2
  
  return context;
   188b4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   188b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   188bc:	d0a86717 	ldw	r2,-24164(gp)
   188c0:	10800c43 	ldbu	r2,49(r2)
   188c4:	10803fcc 	andi	r2,r2,255
   188c8:	10000226 	beq	r2,zero,188d4 <OSEventPendMulti+0x468>
   188cc:	108000a0 	cmpeqi	r2,r2,2
   188d0:	10001826 	beq	r2,zero,18934 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   188d4:	d0a86717 	ldw	r2,-24164(gp)
   188d8:	10800717 	ldw	r2,28(r2)
   188dc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   188e0:	e0bff017 	ldw	r2,-64(fp)
   188e4:	10000b26 	beq	r2,zero,18914 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   188e8:	e0bffd17 	ldw	r2,-12(fp)
   188ec:	10c00104 	addi	r3,r2,4
   188f0:	e0fffd15 	stw	r3,-12(fp)
   188f4:	e0fff017 	ldw	r3,-64(fp)
   188f8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   188fc:	e0bffd17 	ldw	r2,-12(fp)
   18900:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   18904:	e0bff18b 	ldhu	r2,-58(fp)
   18908:	10800044 	addi	r2,r2,1
   1890c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   18910:	00000d06 	br	18948 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   18914:	d0a86717 	ldw	r2,-24164(gp)
   18918:	00c00044 	movi	r3,1
   1891c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   18920:	d0a86717 	ldw	r2,-24164(gp)
   18924:	1009883a 	mov	r4,r2
   18928:	e17ffc17 	ldw	r5,-16(fp)
   1892c:	00195b40 	call	195b4 <OS_EventTaskRemoveMulti>
             }
			 break;
   18930:	00000506 	br	18948 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   18934:	d0a86717 	ldw	r2,-24164(gp)
   18938:	1009883a 	mov	r4,r2
   1893c:	e17ffc17 	ldw	r5,-16(fp)
   18940:	00195b40 	call	195b4 <OS_EventTaskRemoveMulti>
             break;
   18944:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   18948:	d0a86717 	ldw	r2,-24164(gp)
   1894c:	10800c43 	ldbu	r2,49(r2)
   18950:	10803fcc 	andi	r2,r2,255
   18954:	10000326 	beq	r2,zero,18964 <OSEventPendMulti+0x4f8>
   18958:	108000a0 	cmpeqi	r2,r2,2
   1895c:	1000231e 	bne	r2,zero,189ec <OSEventPendMulti+0x580>
   18960:	00002a06 	br	18a0c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   18964:	e0bff017 	ldw	r2,-64(fp)
   18968:	10800003 	ldbu	r2,0(r2)
   1896c:	10803fcc 	andi	r2,r2,255
   18970:	0080100e 	bge	zero,r2,189b4 <OSEventPendMulti+0x548>
   18974:	10c000d0 	cmplti	r3,r2,3
   18978:	1800071e 	bne	r3,zero,18998 <OSEventPendMulti+0x52c>
   1897c:	108000e0 	cmpeqi	r2,r2,3
   18980:	10000c26 	beq	r2,zero,189b4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   18984:	e0bffe17 	ldw	r2,-8(fp)
   18988:	10c00104 	addi	r3,r2,4
   1898c:	e0fffe15 	stw	r3,-8(fp)
   18990:	10000015 	stw	zero,0(r2)
                      break;
   18994:	00001206 	br	189e0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   18998:	e0bffe17 	ldw	r2,-8(fp)
   1899c:	10c00104 	addi	r3,r2,4
   189a0:	e0fffe15 	stw	r3,-8(fp)
   189a4:	d0e86717 	ldw	r3,-24164(gp)
   189a8:	18c00917 	ldw	r3,36(r3)
   189ac:	10c00015 	stw	r3,0(r2)
                      break;
   189b0:	00000b06 	br	189e0 <OSEventPendMulti+0x574>
   189b4:	e0bff317 	ldw	r2,-52(fp)
   189b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189bc:	e0bffa17 	ldw	r2,-24(fp)
   189c0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   189c4:	e0bffd17 	ldw	r2,-12(fp)
   189c8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   189cc:	e0800217 	ldw	r2,8(fp)
   189d0:	00c00044 	movi	r3,1
   189d4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   189d8:	e0bff18b 	ldhu	r2,-58(fp)
   189dc:	00002206 	br	18a68 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   189e0:	e0800217 	ldw	r2,8(fp)
   189e4:	10000005 	stb	zero,0(r2)
             break;
   189e8:	00001006 	br	18a2c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   189ec:	e0bffe17 	ldw	r2,-8(fp)
   189f0:	10c00104 	addi	r3,r2,4
   189f4:	e0fffe15 	stw	r3,-8(fp)
   189f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   189fc:	e0800217 	ldw	r2,8(fp)
   18a00:	00c00384 	movi	r3,14
   18a04:	10c00005 	stb	r3,0(r2)
             break;
   18a08:	00000806 	br	18a2c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   18a0c:	e0bffe17 	ldw	r2,-8(fp)
   18a10:	10c00104 	addi	r3,r2,4
   18a14:	e0fffe15 	stw	r3,-8(fp)
   18a18:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   18a1c:	e0800217 	ldw	r2,8(fp)
   18a20:	00c00284 	movi	r3,10
   18a24:	10c00005 	stb	r3,0(r2)
             break;
   18a28:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   18a2c:	d0a86717 	ldw	r2,-24164(gp)
   18a30:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   18a34:	d0a86717 	ldw	r2,-24164(gp)
   18a38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   18a3c:	d0a86717 	ldw	r2,-24164(gp)
   18a40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18a44:	d0a86717 	ldw	r2,-24164(gp)
   18a48:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   18a4c:	d0a86717 	ldw	r2,-24164(gp)
   18a50:	10000915 	stw	zero,36(r2)
   18a54:	e0bff317 	ldw	r2,-52(fp)
   18a58:	e0bffb15 	stw	r2,-20(fp)
   18a5c:	e0bffb17 	ldw	r2,-20(fp)
   18a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   18a64:	e0bff18b 	ldhu	r2,-58(fp)
}
   18a68:	e037883a 	mov	sp,fp
   18a6c:	dfc00117 	ldw	ra,4(sp)
   18a70:	df000017 	ldw	fp,0(sp)
   18a74:	dec00204 	addi	sp,sp,8
   18a78:	f800283a 	ret

00018a7c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   18a7c:	defffe04 	addi	sp,sp,-8
   18a80:	dfc00115 	stw	ra,4(sp)
   18a84:	df000015 	stw	fp,0(sp)
   18a88:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   18a8c:	003ad740 	call	3ad74 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   18a90:	00197f00 	call	197f0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   18a94:	00198340 	call	19834 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   18a98:	00199940 	call	19994 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   18a9c:	00197140 	call	19714 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   18aa0:	001b9040 	call	1b904 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   18aa4:	001c24c0 	call	1c24c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   18aa8:	001d4800 	call	1d480 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   18aac:	001989c0 	call	1989c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   18ab0:	00199180 	call	19918 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   18ab4:	003ad900 	call	3ad90 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   18ab8:	001a1f00 	call	1a1f0 <OSDebugInit>
#endif
}
   18abc:	e037883a 	mov	sp,fp
   18ac0:	dfc00117 	ldw	ra,4(sp)
   18ac4:	df000017 	ldw	fp,0(sp)
   18ac8:	dec00204 	addi	sp,sp,8
   18acc:	f800283a 	ret

00018ad0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   18ad0:	defffc04 	addi	sp,sp,-16
   18ad4:	df000315 	stw	fp,12(sp)
   18ad8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18adc:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   18ae0:	d0a85843 	ldbu	r2,-24223(gp)
   18ae4:	10803fcc 	andi	r2,r2,255
   18ae8:	10800058 	cmpnei	r2,r2,1
   18aec:	1000131e 	bne	r2,zero,18b3c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18af0:	0005303a 	rdctl	r2,status
   18af4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18af8:	e0fffe17 	ldw	r3,-8(fp)
   18afc:	00bfff84 	movi	r2,-2
   18b00:	1884703a 	and	r2,r3,r2
   18b04:	1001703a 	wrctl	status,r2
  
  return context;
   18b08:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   18b0c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   18b10:	d0a86603 	ldbu	r2,-24168(gp)
   18b14:	10803fcc 	andi	r2,r2,255
   18b18:	10803fe0 	cmpeqi	r2,r2,255
   18b1c:	1000031e 	bne	r2,zero,18b2c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   18b20:	d0a86603 	ldbu	r2,-24168(gp)
   18b24:	10800044 	addi	r2,r2,1
   18b28:	d0a86605 	stb	r2,-24168(gp)
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b34:	e0bfff17 	ldw	r2,-4(fp)
   18b38:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   18b3c:	e037883a 	mov	sp,fp
   18b40:	df000017 	ldw	fp,0(sp)
   18b44:	dec00104 	addi	sp,sp,4
   18b48:	f800283a 	ret

00018b4c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   18b4c:	defffb04 	addi	sp,sp,-20
   18b50:	dfc00415 	stw	ra,16(sp)
   18b54:	df000315 	stw	fp,12(sp)
   18b58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18b5c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   18b60:	d0a85843 	ldbu	r2,-24223(gp)
   18b64:	10803fcc 	andi	r2,r2,255
   18b68:	10800058 	cmpnei	r2,r2,1
   18b6c:	10002f1e 	bne	r2,zero,18c2c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b70:	0005303a 	rdctl	r2,status
   18b74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b78:	e0fffe17 	ldw	r3,-8(fp)
   18b7c:	00bfff84 	movi	r2,-2
   18b80:	1884703a 	and	r2,r3,r2
   18b84:	1001703a 	wrctl	status,r2
  
  return context;
   18b88:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   18b8c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   18b90:	d0a86603 	ldbu	r2,-24168(gp)
   18b94:	10803fcc 	andi	r2,r2,255
   18b98:	10000326 	beq	r2,zero,18ba8 <OSIntExit+0x5c>
            OSIntNesting--;
   18b9c:	d0a86603 	ldbu	r2,-24168(gp)
   18ba0:	10bfffc4 	addi	r2,r2,-1
   18ba4:	d0a86605 	stb	r2,-24168(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   18ba8:	d0a86603 	ldbu	r2,-24168(gp)
   18bac:	10803fcc 	andi	r2,r2,255
   18bb0:	10001a1e 	bne	r2,zero,18c1c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   18bb4:	d0a85803 	ldbu	r2,-24224(gp)
   18bb8:	10803fcc 	andi	r2,r2,255
   18bbc:	1000171e 	bne	r2,zero,18c1c <OSIntExit+0xd0>
                OS_SchedNew();
   18bc0:	0019bf40 	call	19bf4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   18bc4:	d0e85a03 	ldbu	r3,-24216(gp)
   18bc8:	d0a85a43 	ldbu	r2,-24215(gp)
   18bcc:	18c03fcc 	andi	r3,r3,255
   18bd0:	10803fcc 	andi	r2,r2,255
   18bd4:	18801126 	beq	r3,r2,18c1c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   18bd8:	d0a85a03 	ldbu	r2,-24216(gp)
   18bdc:	10c03fcc 	andi	r3,r2,255
   18be0:	008001b4 	movhi	r2,6
   18be4:	10b63104 	addi	r2,r2,-10044
   18be8:	18c7883a 	add	r3,r3,r3
   18bec:	18c7883a 	add	r3,r3,r3
   18bf0:	10c5883a 	add	r2,r2,r3
   18bf4:	10800017 	ldw	r2,0(r2)
   18bf8:	d0a86215 	stw	r2,-24184(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   18bfc:	d0a86217 	ldw	r2,-24184(gp)
   18c00:	10c00e17 	ldw	r3,56(r2)
   18c04:	18c00044 	addi	r3,r3,1
   18c08:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   18c0c:	d0a85d17 	ldw	r2,-24204(gp)
   18c10:	10800044 	addi	r2,r2,1
   18c14:	d0a85d15 	stw	r2,-24204(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   18c18:	003a9100 	call	3a910 <OSCtxSw>
   18c1c:	e0bffd17 	ldw	r2,-12(fp)
   18c20:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c24:	e0bfff17 	ldw	r2,-4(fp)
   18c28:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   18c2c:	e037883a 	mov	sp,fp
   18c30:	dfc00117 	ldw	ra,4(sp)
   18c34:	df000017 	ldw	fp,0(sp)
   18c38:	dec00204 	addi	sp,sp,8
   18c3c:	f800283a 	ret

00018c40 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   18c40:	defffc04 	addi	sp,sp,-16
   18c44:	df000315 	stw	fp,12(sp)
   18c48:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18c4c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   18c50:	d0a85843 	ldbu	r2,-24223(gp)
   18c54:	10803fcc 	andi	r2,r2,255
   18c58:	10800058 	cmpnei	r2,r2,1
   18c5c:	1000161e 	bne	r2,zero,18cb8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c60:	0005303a 	rdctl	r2,status
   18c64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c68:	e0fffe17 	ldw	r3,-8(fp)
   18c6c:	00bfff84 	movi	r2,-2
   18c70:	1884703a 	and	r2,r3,r2
   18c74:	1001703a 	wrctl	status,r2
  
  return context;
   18c78:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   18c7c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   18c80:	d0a86603 	ldbu	r2,-24168(gp)
   18c84:	10803fcc 	andi	r2,r2,255
   18c88:	1000071e 	bne	r2,zero,18ca8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   18c8c:	d0a85803 	ldbu	r2,-24224(gp)
   18c90:	10803fcc 	andi	r2,r2,255
   18c94:	10803fe0 	cmpeqi	r2,r2,255
   18c98:	1000031e 	bne	r2,zero,18ca8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   18c9c:	d0a85803 	ldbu	r2,-24224(gp)
   18ca0:	10800044 	addi	r2,r2,1
   18ca4:	d0a85805 	stb	r2,-24224(gp)
   18ca8:	e0bffd17 	ldw	r2,-12(fp)
   18cac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cb0:	e0bfff17 	ldw	r2,-4(fp)
   18cb4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   18cb8:	e037883a 	mov	sp,fp
   18cbc:	df000017 	ldw	fp,0(sp)
   18cc0:	dec00104 	addi	sp,sp,4
   18cc4:	f800283a 	ret

00018cc8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   18cc8:	defff804 	addi	sp,sp,-32
   18ccc:	dfc00715 	stw	ra,28(sp)
   18cd0:	df000615 	stw	fp,24(sp)
   18cd4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18cd8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   18cdc:	d0a85843 	ldbu	r2,-24223(gp)
   18ce0:	10803fcc 	andi	r2,r2,255
   18ce4:	10800058 	cmpnei	r2,r2,1
   18ce8:	1000281e 	bne	r2,zero,18d8c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cec:	0005303a 	rdctl	r2,status
   18cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cf4:	e0fffb17 	ldw	r3,-20(fp)
   18cf8:	00bfff84 	movi	r2,-2
   18cfc:	1884703a 	and	r2,r3,r2
   18d00:	1001703a 	wrctl	status,r2
  
  return context;
   18d04:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   18d08:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   18d0c:	d0a85803 	ldbu	r2,-24224(gp)
   18d10:	10803fcc 	andi	r2,r2,255
   18d14:	10001926 	beq	r2,zero,18d7c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   18d18:	d0a85803 	ldbu	r2,-24224(gp)
   18d1c:	10bfffc4 	addi	r2,r2,-1
   18d20:	d0a85805 	stb	r2,-24224(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   18d24:	d0a85803 	ldbu	r2,-24224(gp)
   18d28:	10803fcc 	andi	r2,r2,255
   18d2c:	10000e1e 	bne	r2,zero,18d68 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   18d30:	d0a86603 	ldbu	r2,-24168(gp)
   18d34:	10803fcc 	andi	r2,r2,255
   18d38:	1000061e 	bne	r2,zero,18d54 <OSSchedUnlock+0x8c>
   18d3c:	e0bffa17 	ldw	r2,-24(fp)
   18d40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d44:	e0bffc17 	ldw	r2,-16(fp)
   18d48:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   18d4c:	0019b280 	call	19b28 <OS_Sched>
   18d50:	00000e06 	br	18d8c <OSSchedUnlock+0xc4>
   18d54:	e0bffa17 	ldw	r2,-24(fp)
   18d58:	e0bffd15 	stw	r2,-12(fp)
   18d5c:	e0bffd17 	ldw	r2,-12(fp)
   18d60:	1001703a 	wrctl	status,r2
   18d64:	00000906 	br	18d8c <OSSchedUnlock+0xc4>
   18d68:	e0bffa17 	ldw	r2,-24(fp)
   18d6c:	e0bffe15 	stw	r2,-8(fp)
   18d70:	e0bffe17 	ldw	r2,-8(fp)
   18d74:	1001703a 	wrctl	status,r2
   18d78:	00000406 	br	18d8c <OSSchedUnlock+0xc4>
   18d7c:	e0bffa17 	ldw	r2,-24(fp)
   18d80:	e0bfff15 	stw	r2,-4(fp)
   18d84:	e0bfff17 	ldw	r2,-4(fp)
   18d88:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   18d8c:	e037883a 	mov	sp,fp
   18d90:	dfc00117 	ldw	ra,4(sp)
   18d94:	df000017 	ldw	fp,0(sp)
   18d98:	dec00204 	addi	sp,sp,8
   18d9c:	f800283a 	ret

00018da0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   18da0:	defffe04 	addi	sp,sp,-8
   18da4:	dfc00115 	stw	ra,4(sp)
   18da8:	df000015 	stw	fp,0(sp)
   18dac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   18db0:	d0a85843 	ldbu	r2,-24223(gp)
   18db4:	10803fcc 	andi	r2,r2,255
   18db8:	10000f1e 	bne	r2,zero,18df8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   18dbc:	0019bf40 	call	19bf4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   18dc0:	d0a85a03 	ldbu	r2,-24216(gp)
   18dc4:	d0a85a45 	stb	r2,-24215(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   18dc8:	d0a85a03 	ldbu	r2,-24216(gp)
   18dcc:	10c03fcc 	andi	r3,r2,255
   18dd0:	008001b4 	movhi	r2,6
   18dd4:	10b63104 	addi	r2,r2,-10044
   18dd8:	18c7883a 	add	r3,r3,r3
   18ddc:	18c7883a 	add	r3,r3,r3
   18de0:	10c5883a 	add	r2,r2,r3
   18de4:	10800017 	ldw	r2,0(r2)
   18de8:	d0a86215 	stw	r2,-24184(gp)
        OSTCBCur      = OSTCBHighRdy;
   18dec:	d0a86217 	ldw	r2,-24184(gp)
   18df0:	d0a86715 	stw	r2,-24164(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   18df4:	003a99c0 	call	3a99c <OSStartHighRdy>
    }
}
   18df8:	e037883a 	mov	sp,fp
   18dfc:	dfc00117 	ldw	ra,4(sp)
   18e00:	df000017 	ldw	fp,0(sp)
   18e04:	dec00204 	addi	sp,sp,8
   18e08:	f800283a 	ret

00018e0c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   18e0c:	defff904 	addi	sp,sp,-28
   18e10:	dfc00615 	stw	ra,24(sp)
   18e14:	df000515 	stw	fp,20(sp)
   18e18:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18e1c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   18e20:	01000084 	movi	r4,2
   18e24:	001f9280 	call	1f928 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e28:	0005303a 	rdctl	r2,status
   18e2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e30:	e0fffc17 	ldw	r3,-16(fp)
   18e34:	00bfff84 	movi	r2,-2
   18e38:	1884703a 	and	r2,r3,r2
   18e3c:	1001703a 	wrctl	status,r2
  
  return context;
   18e40:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   18e44:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   18e48:	d0285915 	stw	zero,-24220(gp)
   18e4c:	e0bffb17 	ldw	r2,-20(fp)
   18e50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e54:	e0bffd17 	ldw	r2,-12(fp)
   18e58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   18e5c:	01000284 	movi	r4,10
   18e60:	001f9280 	call	1f928 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e64:	0005303a 	rdctl	r2,status
   18e68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e6c:	e0fffe17 	ldw	r3,-8(fp)
   18e70:	00bfff84 	movi	r2,-2
   18e74:	1884703a 	and	r2,r3,r2
   18e78:	1001703a 	wrctl	status,r2
  
  return context;
   18e7c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   18e80:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   18e84:	d0a85917 	ldw	r2,-24220(gp)
   18e88:	d0a85e15 	stw	r2,-24200(gp)
    OSStatRdy    = OS_TRUE;
   18e8c:	00800044 	movi	r2,1
   18e90:	d0a86a05 	stb	r2,-24152(gp)
   18e94:	e0bffb17 	ldw	r2,-20(fp)
   18e98:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e9c:	e0bfff17 	ldw	r2,-4(fp)
   18ea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   18ea4:	e037883a 	mov	sp,fp
   18ea8:	dfc00117 	ldw	ra,4(sp)
   18eac:	df000017 	ldw	fp,0(sp)
   18eb0:	dec00204 	addi	sp,sp,8
   18eb4:	f800283a 	ret

00018eb8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   18eb8:	defff704 	addi	sp,sp,-36
   18ebc:	dfc00815 	stw	ra,32(sp)
   18ec0:	df000715 	stw	fp,28(sp)
   18ec4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18ec8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   18ecc:	003ad4c0 	call	3ad4c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ed0:	0005303a 	rdctl	r2,status
   18ed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ed8:	e0fffc17 	ldw	r3,-16(fp)
   18edc:	00bfff84 	movi	r2,-2
   18ee0:	1884703a 	and	r2,r3,r2
   18ee4:	1001703a 	wrctl	status,r2
  
  return context;
   18ee8:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   18eec:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   18ef0:	d0a86817 	ldw	r2,-24160(gp)
   18ef4:	10800044 	addi	r2,r2,1
   18ef8:	d0a86815 	stw	r2,-24160(gp)
   18efc:	e0bffb17 	ldw	r2,-20(fp)
   18f00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f04:	e0bffd17 	ldw	r2,-12(fp)
   18f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   18f0c:	d0a85843 	ldbu	r2,-24223(gp)
   18f10:	10803fcc 	andi	r2,r2,255
   18f14:	10800058 	cmpnei	r2,r2,1
   18f18:	1000691e 	bne	r2,zero,190c0 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   18f1c:	d0a85c03 	ldbu	r2,-24208(gp)
   18f20:	10803fcc 	andi	r2,r2,255
   18f24:	10c00060 	cmpeqi	r3,r2,1
   18f28:	1800061e 	bne	r3,zero,18f44 <OSTimeTick+0x8c>
   18f2c:	10c000a0 	cmpeqi	r3,r2,2
   18f30:	1800061e 	bne	r3,zero,18f4c <OSTimeTick+0x94>
   18f34:	10000a1e 	bne	r2,zero,18f60 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   18f38:	00800044 	movi	r2,1
   18f3c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   18f40:	00000b06 	br	18f70 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   18f44:	e03ffa05 	stb	zero,-24(fp)
                 break;
   18f48:	00000906 	br	18f70 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   18f4c:	00800044 	movi	r2,1
   18f50:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   18f54:	00800044 	movi	r2,1
   18f58:	d0a85c05 	stb	r2,-24208(gp)
                 break;
   18f5c:	00000406 	br	18f70 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   18f60:	00800044 	movi	r2,1
   18f64:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   18f68:	d0285c05 	stb	zero,-24208(gp)
                 break;
   18f6c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   18f70:	e0bffa03 	ldbu	r2,-24(fp)
   18f74:	1000011e 	bne	r2,zero,18f7c <OSTimeTick+0xc4>
            return;
   18f78:	00005106 	br	190c0 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   18f7c:	d0a85b17 	ldw	r2,-24212(gp)
   18f80:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   18f84:	00004906 	br	190ac <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f88:	0005303a 	rdctl	r2,status
   18f8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f90:	e0fffe17 	ldw	r3,-8(fp)
   18f94:	00bfff84 	movi	r2,-2
   18f98:	1884703a 	and	r2,r3,r2
   18f9c:	1001703a 	wrctl	status,r2
  
  return context;
   18fa0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   18fa4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   18fa8:	e0bff917 	ldw	r2,-28(fp)
   18fac:	10800b8b 	ldhu	r2,46(r2)
   18fb0:	10bfffcc 	andi	r2,r2,65535
   18fb4:	10003626 	beq	r2,zero,19090 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   18fb8:	e0bff917 	ldw	r2,-28(fp)
   18fbc:	10800b8b 	ldhu	r2,46(r2)
   18fc0:	10bfffc4 	addi	r2,r2,-1
   18fc4:	1007883a 	mov	r3,r2
   18fc8:	e0bff917 	ldw	r2,-28(fp)
   18fcc:	10c00b8d 	sth	r3,46(r2)
   18fd0:	e0bff917 	ldw	r2,-28(fp)
   18fd4:	10800b8b 	ldhu	r2,46(r2)
   18fd8:	10bfffcc 	andi	r2,r2,65535
   18fdc:	10002c1e 	bne	r2,zero,19090 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18fe0:	e0bff917 	ldw	r2,-28(fp)
   18fe4:	10800c03 	ldbu	r2,48(r2)
   18fe8:	10803fcc 	andi	r2,r2,255
   18fec:	10800dcc 	andi	r2,r2,55
   18ff0:	10000b26 	beq	r2,zero,19020 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   18ff4:	e0bff917 	ldw	r2,-28(fp)
   18ff8:	10c00c03 	ldbu	r3,48(r2)
   18ffc:	00bff204 	movi	r2,-56
   19000:	1884703a 	and	r2,r3,r2
   19004:	1007883a 	mov	r3,r2
   19008:	e0bff917 	ldw	r2,-28(fp)
   1900c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   19010:	e0bff917 	ldw	r2,-28(fp)
   19014:	00c00044 	movi	r3,1
   19018:	10c00c45 	stb	r3,49(r2)
   1901c:	00000206 	br	19028 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   19020:	e0bff917 	ldw	r2,-28(fp)
   19024:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   19028:	e0bff917 	ldw	r2,-28(fp)
   1902c:	10800c03 	ldbu	r2,48(r2)
   19030:	10803fcc 	andi	r2,r2,255
   19034:	1080020c 	andi	r2,r2,8
   19038:	1000151e 	bne	r2,zero,19090 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1903c:	e0bff917 	ldw	r2,-28(fp)
   19040:	10c00d83 	ldbu	r3,54(r2)
   19044:	d0a86403 	ldbu	r2,-24176(gp)
   19048:	1884b03a 	or	r2,r3,r2
   1904c:	d0a86405 	stb	r2,-24176(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19050:	e0bff917 	ldw	r2,-28(fp)
   19054:	10800d03 	ldbu	r2,52(r2)
   19058:	10c03fcc 	andi	r3,r2,255
   1905c:	e0bff917 	ldw	r2,-28(fp)
   19060:	10800d03 	ldbu	r2,52(r2)
   19064:	11003fcc 	andi	r4,r2,255
   19068:	d0a86444 	addi	r2,gp,-24175
   1906c:	2085883a 	add	r2,r4,r2
   19070:	11000003 	ldbu	r4,0(r2)
   19074:	e0bff917 	ldw	r2,-28(fp)
   19078:	10800d43 	ldbu	r2,53(r2)
   1907c:	2084b03a 	or	r2,r4,r2
   19080:	1009883a 	mov	r4,r2
   19084:	d0a86444 	addi	r2,gp,-24175
   19088:	1885883a 	add	r2,r3,r2
   1908c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   19090:	e0bff917 	ldw	r2,-28(fp)
   19094:	10800517 	ldw	r2,20(r2)
   19098:	e0bff915 	stw	r2,-28(fp)
   1909c:	e0bffb17 	ldw	r2,-20(fp)
   190a0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190a4:	e0bfff17 	ldw	r2,-4(fp)
   190a8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   190ac:	e0bff917 	ldw	r2,-28(fp)
   190b0:	10800c83 	ldbu	r2,50(r2)
   190b4:	10803fcc 	andi	r2,r2,255
   190b8:	10800518 	cmpnei	r2,r2,20
   190bc:	103fb21e 	bne	r2,zero,18f88 <__alt_mem_descriptor_memory+0xdefd8f88>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   190c0:	e037883a 	mov	sp,fp
   190c4:	dfc00117 	ldw	ra,4(sp)
   190c8:	df000017 	ldw	fp,0(sp)
   190cc:	dec00204 	addi	sp,sp,8
   190d0:	f800283a 	ret

000190d4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   190d4:	deffff04 	addi	sp,sp,-4
   190d8:	df000015 	stw	fp,0(sp)
   190dc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   190e0:	00804784 	movi	r2,286
}
   190e4:	e037883a 	mov	sp,fp
   190e8:	df000017 	ldw	fp,0(sp)
   190ec:	dec00104 	addi	sp,sp,4
   190f0:	f800283a 	ret

000190f4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   190f4:	deffff04 	addi	sp,sp,-4
   190f8:	df000015 	stw	fp,0(sp)
   190fc:	d839883a 	mov	fp,sp
}
   19100:	e037883a 	mov	sp,fp
   19104:	df000017 	ldw	fp,0(sp)
   19108:	dec00104 	addi	sp,sp,4
   1910c:	f800283a 	ret

00019110 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   19110:	defff804 	addi	sp,sp,-32
   19114:	dfc00715 	stw	ra,28(sp)
   19118:	df000615 	stw	fp,24(sp)
   1911c:	df000604 	addi	fp,sp,24
   19120:	e13ffc15 	stw	r4,-16(fp)
   19124:	e17ffd15 	stw	r5,-12(fp)
   19128:	3007883a 	mov	r3,r6
   1912c:	3805883a 	mov	r2,r7
   19130:	e0fffe05 	stb	r3,-8(fp)
   19134:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   19138:	e0bffc17 	ldw	r2,-16(fp)
   1913c:	10800283 	ldbu	r2,10(r2)
   19140:	10c03fcc 	andi	r3,r2,255
   19144:	00800174 	movhi	r2,5
   19148:	10b65904 	addi	r2,r2,-9884
   1914c:	10c5883a 	add	r2,r2,r3
   19150:	10800003 	ldbu	r2,0(r2)
   19154:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   19158:	e0bffa03 	ldbu	r2,-24(fp)
   1915c:	e0fffc17 	ldw	r3,-16(fp)
   19160:	1885883a 	add	r2,r3,r2
   19164:	10800204 	addi	r2,r2,8
   19168:	108000c3 	ldbu	r2,3(r2)
   1916c:	10c03fcc 	andi	r3,r2,255
   19170:	00800174 	movhi	r2,5
   19174:	10b65904 	addi	r2,r2,-9884
   19178:	10c5883a 	add	r2,r2,r3
   1917c:	10800003 	ldbu	r2,0(r2)
   19180:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   19184:	e0bffa03 	ldbu	r2,-24(fp)
   19188:	100490fa 	slli	r2,r2,3
   1918c:	1007883a 	mov	r3,r2
   19190:	e0bffa43 	ldbu	r2,-23(fp)
   19194:	1885883a 	add	r2,r3,r2
   19198:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1919c:	e0fffa83 	ldbu	r3,-22(fp)
   191a0:	008001b4 	movhi	r2,6
   191a4:	10b63104 	addi	r2,r2,-10044
   191a8:	18c7883a 	add	r3,r3,r3
   191ac:	18c7883a 	add	r3,r3,r3
   191b0:	10c5883a 	add	r2,r2,r3
   191b4:	10800017 	ldw	r2,0(r2)
   191b8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   191bc:	e0bffb17 	ldw	r2,-20(fp)
   191c0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   191c4:	e0bffb17 	ldw	r2,-20(fp)
   191c8:	e0fffd17 	ldw	r3,-12(fp)
   191cc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   191d0:	e0bffb17 	ldw	r2,-20(fp)
   191d4:	10800c03 	ldbu	r2,48(r2)
   191d8:	1007883a 	mov	r3,r2
   191dc:	e0bffe03 	ldbu	r2,-8(fp)
   191e0:	0084303a 	nor	r2,zero,r2
   191e4:	1884703a 	and	r2,r3,r2
   191e8:	1007883a 	mov	r3,r2
   191ec:	e0bffb17 	ldw	r2,-20(fp)
   191f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   191f4:	e0bffb17 	ldw	r2,-20(fp)
   191f8:	e0ffff03 	ldbu	r3,-4(fp)
   191fc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   19200:	e0bffb17 	ldw	r2,-20(fp)
   19204:	10800c03 	ldbu	r2,48(r2)
   19208:	10803fcc 	andi	r2,r2,255
   1920c:	1080020c 	andi	r2,r2,8
   19210:	1000111e 	bne	r2,zero,19258 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   19214:	e0bffb17 	ldw	r2,-20(fp)
   19218:	10c00d83 	ldbu	r3,54(r2)
   1921c:	d0a86403 	ldbu	r2,-24176(gp)
   19220:	1884b03a 	or	r2,r3,r2
   19224:	d0a86405 	stb	r2,-24176(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   19228:	e0fffa03 	ldbu	r3,-24(fp)
   1922c:	e13ffa03 	ldbu	r4,-24(fp)
   19230:	d0a86444 	addi	r2,gp,-24175
   19234:	2085883a 	add	r2,r4,r2
   19238:	11000003 	ldbu	r4,0(r2)
   1923c:	e0bffb17 	ldw	r2,-20(fp)
   19240:	10800d43 	ldbu	r2,53(r2)
   19244:	2084b03a 	or	r2,r4,r2
   19248:	1009883a 	mov	r4,r2
   1924c:	d0a86444 	addi	r2,gp,-24175
   19250:	1885883a 	add	r2,r3,r2
   19254:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   19258:	e13ffb17 	ldw	r4,-20(fp)
   1925c:	e17ffc17 	ldw	r5,-16(fp)
   19260:	00195000 	call	19500 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   19264:	e0bffb17 	ldw	r2,-20(fp)
   19268:	10800817 	ldw	r2,32(r2)
   1926c:	10000826 	beq	r2,zero,19290 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   19270:	e0bffb17 	ldw	r2,-20(fp)
   19274:	10800817 	ldw	r2,32(r2)
   19278:	e13ffb17 	ldw	r4,-20(fp)
   1927c:	100b883a 	mov	r5,r2
   19280:	00195b40 	call	195b4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   19284:	e0bffb17 	ldw	r2,-20(fp)
   19288:	e0fffc17 	ldw	r3,-16(fp)
   1928c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   19290:	e0bffa83 	ldbu	r2,-22(fp)
}
   19294:	e037883a 	mov	sp,fp
   19298:	dfc00117 	ldw	ra,4(sp)
   1929c:	df000017 	ldw	fp,0(sp)
   192a0:	dec00204 	addi	sp,sp,8
   192a4:	f800283a 	ret

000192a8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   192a8:	defffd04 	addi	sp,sp,-12
   192ac:	df000215 	stw	fp,8(sp)
   192b0:	df000204 	addi	fp,sp,8
   192b4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   192b8:	d0a86717 	ldw	r2,-24164(gp)
   192bc:	e0ffff17 	ldw	r3,-4(fp)
   192c0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   192c4:	d0a86717 	ldw	r2,-24164(gp)
   192c8:	10800d03 	ldbu	r2,52(r2)
   192cc:	10803fcc 	andi	r2,r2,255
   192d0:	d0e86717 	ldw	r3,-24164(gp)
   192d4:	18c00d03 	ldbu	r3,52(r3)
   192d8:	18c03fcc 	andi	r3,r3,255
   192dc:	e13fff17 	ldw	r4,-4(fp)
   192e0:	20c7883a 	add	r3,r4,r3
   192e4:	18c00204 	addi	r3,r3,8
   192e8:	190000c3 	ldbu	r4,3(r3)
   192ec:	d0e86717 	ldw	r3,-24164(gp)
   192f0:	18c00d43 	ldbu	r3,53(r3)
   192f4:	20c6b03a 	or	r3,r4,r3
   192f8:	1809883a 	mov	r4,r3
   192fc:	e0ffff17 	ldw	r3,-4(fp)
   19300:	1885883a 	add	r2,r3,r2
   19304:	10800204 	addi	r2,r2,8
   19308:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1930c:	e0bfff17 	ldw	r2,-4(fp)
   19310:	10c00283 	ldbu	r3,10(r2)
   19314:	d0a86717 	ldw	r2,-24164(gp)
   19318:	10800d83 	ldbu	r2,54(r2)
   1931c:	1884b03a 	or	r2,r3,r2
   19320:	1007883a 	mov	r3,r2
   19324:	e0bfff17 	ldw	r2,-4(fp)
   19328:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1932c:	d0a86717 	ldw	r2,-24164(gp)
   19330:	10800d03 	ldbu	r2,52(r2)
   19334:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   19338:	e0fffe03 	ldbu	r3,-8(fp)
   1933c:	e13ffe03 	ldbu	r4,-8(fp)
   19340:	d0a86444 	addi	r2,gp,-24175
   19344:	2085883a 	add	r2,r4,r2
   19348:	10800003 	ldbu	r2,0(r2)
   1934c:	1009883a 	mov	r4,r2
   19350:	d0a86717 	ldw	r2,-24164(gp)
   19354:	10800d43 	ldbu	r2,53(r2)
   19358:	0084303a 	nor	r2,zero,r2
   1935c:	2084703a 	and	r2,r4,r2
   19360:	1009883a 	mov	r4,r2
   19364:	d0a86444 	addi	r2,gp,-24175
   19368:	1885883a 	add	r2,r3,r2
   1936c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   19370:	e0fffe03 	ldbu	r3,-8(fp)
   19374:	d0a86444 	addi	r2,gp,-24175
   19378:	1885883a 	add	r2,r3,r2
   1937c:	10800003 	ldbu	r2,0(r2)
   19380:	10803fcc 	andi	r2,r2,255
   19384:	1000071e 	bne	r2,zero,193a4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   19388:	d0a86717 	ldw	r2,-24164(gp)
   1938c:	10800d83 	ldbu	r2,54(r2)
   19390:	0084303a 	nor	r2,zero,r2
   19394:	1007883a 	mov	r3,r2
   19398:	d0a86403 	ldbu	r2,-24176(gp)
   1939c:	1884703a 	and	r2,r3,r2
   193a0:	d0a86405 	stb	r2,-24176(gp)
    }
}
   193a4:	e037883a 	mov	sp,fp
   193a8:	df000017 	ldw	fp,0(sp)
   193ac:	dec00104 	addi	sp,sp,4
   193b0:	f800283a 	ret

000193b4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   193b4:	defffb04 	addi	sp,sp,-20
   193b8:	df000415 	stw	fp,16(sp)
   193bc:	df000404 	addi	fp,sp,16
   193c0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   193c4:	d0a86717 	ldw	r2,-24164(gp)
   193c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   193cc:	d0a86717 	ldw	r2,-24164(gp)
   193d0:	e0ffff17 	ldw	r3,-4(fp)
   193d4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   193d8:	e0bfff17 	ldw	r2,-4(fp)
   193dc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   193e0:	e0bffc17 	ldw	r2,-16(fp)
   193e4:	10800017 	ldw	r2,0(r2)
   193e8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   193ec:	00002006 	br	19470 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   193f0:	d0a86717 	ldw	r2,-24164(gp)
   193f4:	10800d03 	ldbu	r2,52(r2)
   193f8:	10803fcc 	andi	r2,r2,255
   193fc:	d0e86717 	ldw	r3,-24164(gp)
   19400:	18c00d03 	ldbu	r3,52(r3)
   19404:	18c03fcc 	andi	r3,r3,255
   19408:	e13ffd17 	ldw	r4,-12(fp)
   1940c:	20c7883a 	add	r3,r4,r3
   19410:	18c00204 	addi	r3,r3,8
   19414:	190000c3 	ldbu	r4,3(r3)
   19418:	d0e86717 	ldw	r3,-24164(gp)
   1941c:	18c00d43 	ldbu	r3,53(r3)
   19420:	20c6b03a 	or	r3,r4,r3
   19424:	1809883a 	mov	r4,r3
   19428:	e0fffd17 	ldw	r3,-12(fp)
   1942c:	1885883a 	add	r2,r3,r2
   19430:	10800204 	addi	r2,r2,8
   19434:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   19438:	e0bffd17 	ldw	r2,-12(fp)
   1943c:	10c00283 	ldbu	r3,10(r2)
   19440:	d0a86717 	ldw	r2,-24164(gp)
   19444:	10800d83 	ldbu	r2,54(r2)
   19448:	1884b03a 	or	r2,r3,r2
   1944c:	1007883a 	mov	r3,r2
   19450:	e0bffd17 	ldw	r2,-12(fp)
   19454:	10c00285 	stb	r3,10(r2)
        pevents++;
   19458:	e0bffc17 	ldw	r2,-16(fp)
   1945c:	10800104 	addi	r2,r2,4
   19460:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   19464:	e0bffc17 	ldw	r2,-16(fp)
   19468:	10800017 	ldw	r2,0(r2)
   1946c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   19470:	e0bffd17 	ldw	r2,-12(fp)
   19474:	103fde1e 	bne	r2,zero,193f0 <__alt_mem_descriptor_memory+0xdefd93f0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   19478:	d0a86717 	ldw	r2,-24164(gp)
   1947c:	10800d03 	ldbu	r2,52(r2)
   19480:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   19484:	e0fffe03 	ldbu	r3,-8(fp)
   19488:	e13ffe03 	ldbu	r4,-8(fp)
   1948c:	d0a86444 	addi	r2,gp,-24175
   19490:	2085883a 	add	r2,r4,r2
   19494:	10800003 	ldbu	r2,0(r2)
   19498:	1009883a 	mov	r4,r2
   1949c:	d0a86717 	ldw	r2,-24164(gp)
   194a0:	10800d43 	ldbu	r2,53(r2)
   194a4:	0084303a 	nor	r2,zero,r2
   194a8:	2084703a 	and	r2,r4,r2
   194ac:	1009883a 	mov	r4,r2
   194b0:	d0a86444 	addi	r2,gp,-24175
   194b4:	1885883a 	add	r2,r3,r2
   194b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   194bc:	e0fffe03 	ldbu	r3,-8(fp)
   194c0:	d0a86444 	addi	r2,gp,-24175
   194c4:	1885883a 	add	r2,r3,r2
   194c8:	10800003 	ldbu	r2,0(r2)
   194cc:	10803fcc 	andi	r2,r2,255
   194d0:	1000071e 	bne	r2,zero,194f0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   194d4:	d0a86717 	ldw	r2,-24164(gp)
   194d8:	10800d83 	ldbu	r2,54(r2)
   194dc:	0084303a 	nor	r2,zero,r2
   194e0:	1007883a 	mov	r3,r2
   194e4:	d0a86403 	ldbu	r2,-24176(gp)
   194e8:	1884703a 	and	r2,r3,r2
   194ec:	d0a86405 	stb	r2,-24176(gp)
    }
}
   194f0:	e037883a 	mov	sp,fp
   194f4:	df000017 	ldw	fp,0(sp)
   194f8:	dec00104 	addi	sp,sp,4
   194fc:	f800283a 	ret

00019500 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   19500:	defffc04 	addi	sp,sp,-16
   19504:	df000315 	stw	fp,12(sp)
   19508:	df000304 	addi	fp,sp,12
   1950c:	e13ffe15 	stw	r4,-8(fp)
   19510:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   19514:	e0bffe17 	ldw	r2,-8(fp)
   19518:	10800d03 	ldbu	r2,52(r2)
   1951c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   19520:	e0bffd03 	ldbu	r2,-12(fp)
   19524:	e0fffd03 	ldbu	r3,-12(fp)
   19528:	e13fff17 	ldw	r4,-4(fp)
   1952c:	20c7883a 	add	r3,r4,r3
   19530:	18c00204 	addi	r3,r3,8
   19534:	18c000c3 	ldbu	r3,3(r3)
   19538:	1809883a 	mov	r4,r3
   1953c:	e0fffe17 	ldw	r3,-8(fp)
   19540:	18c00d43 	ldbu	r3,53(r3)
   19544:	00c6303a 	nor	r3,zero,r3
   19548:	20c6703a 	and	r3,r4,r3
   1954c:	1809883a 	mov	r4,r3
   19550:	e0ffff17 	ldw	r3,-4(fp)
   19554:	1885883a 	add	r2,r3,r2
   19558:	10800204 	addi	r2,r2,8
   1955c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   19560:	e0bffd03 	ldbu	r2,-12(fp)
   19564:	e0ffff17 	ldw	r3,-4(fp)
   19568:	1885883a 	add	r2,r3,r2
   1956c:	10800204 	addi	r2,r2,8
   19570:	108000c3 	ldbu	r2,3(r2)
   19574:	10803fcc 	andi	r2,r2,255
   19578:	10000a1e 	bne	r2,zero,195a4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   1957c:	e0bfff17 	ldw	r2,-4(fp)
   19580:	10800283 	ldbu	r2,10(r2)
   19584:	1007883a 	mov	r3,r2
   19588:	e0bffe17 	ldw	r2,-8(fp)
   1958c:	10800d83 	ldbu	r2,54(r2)
   19590:	0084303a 	nor	r2,zero,r2
   19594:	1884703a 	and	r2,r3,r2
   19598:	1007883a 	mov	r3,r2
   1959c:	e0bfff17 	ldw	r2,-4(fp)
   195a0:	10c00285 	stb	r3,10(r2)
    }
}
   195a4:	e037883a 	mov	sp,fp
   195a8:	df000017 	ldw	fp,0(sp)
   195ac:	dec00104 	addi	sp,sp,4
   195b0:	f800283a 	ret

000195b4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   195b4:	defffa04 	addi	sp,sp,-24
   195b8:	df000515 	stw	fp,20(sp)
   195bc:	df000504 	addi	fp,sp,20
   195c0:	e13ffe15 	stw	r4,-8(fp)
   195c4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   195c8:	e0bffe17 	ldw	r2,-8(fp)
   195cc:	10800d03 	ldbu	r2,52(r2)
   195d0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   195d4:	e0bffe17 	ldw	r2,-8(fp)
   195d8:	10800d83 	ldbu	r2,54(r2)
   195dc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   195e0:	e0bffe17 	ldw	r2,-8(fp)
   195e4:	10800d43 	ldbu	r2,53(r2)
   195e8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   195ec:	e0bfff17 	ldw	r2,-4(fp)
   195f0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   195f4:	e0bffb17 	ldw	r2,-20(fp)
   195f8:	10800017 	ldw	r2,0(r2)
   195fc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   19600:	00002506 	br	19698 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   19604:	e0bffd03 	ldbu	r2,-12(fp)
   19608:	e0fffd03 	ldbu	r3,-12(fp)
   1960c:	e13ffc17 	ldw	r4,-16(fp)
   19610:	20c7883a 	add	r3,r4,r3
   19614:	18c00204 	addi	r3,r3,8
   19618:	18c000c3 	ldbu	r3,3(r3)
   1961c:	1809883a 	mov	r4,r3
   19620:	e0fffd83 	ldbu	r3,-10(fp)
   19624:	00c6303a 	nor	r3,zero,r3
   19628:	20c6703a 	and	r3,r4,r3
   1962c:	1809883a 	mov	r4,r3
   19630:	e0fffc17 	ldw	r3,-16(fp)
   19634:	1885883a 	add	r2,r3,r2
   19638:	10800204 	addi	r2,r2,8
   1963c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   19640:	e0bffd03 	ldbu	r2,-12(fp)
   19644:	e0fffc17 	ldw	r3,-16(fp)
   19648:	1885883a 	add	r2,r3,r2
   1964c:	10800204 	addi	r2,r2,8
   19650:	108000c3 	ldbu	r2,3(r2)
   19654:	10803fcc 	andi	r2,r2,255
   19658:	1000091e 	bne	r2,zero,19680 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1965c:	e0bffc17 	ldw	r2,-16(fp)
   19660:	10800283 	ldbu	r2,10(r2)
   19664:	1007883a 	mov	r3,r2
   19668:	e0bffd43 	ldbu	r2,-11(fp)
   1966c:	0084303a 	nor	r2,zero,r2
   19670:	1884703a 	and	r2,r3,r2
   19674:	1007883a 	mov	r3,r2
   19678:	e0bffc17 	ldw	r2,-16(fp)
   1967c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   19680:	e0bffb17 	ldw	r2,-20(fp)
   19684:	10800104 	addi	r2,r2,4
   19688:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1968c:	e0bffb17 	ldw	r2,-20(fp)
   19690:	10800017 	ldw	r2,0(r2)
   19694:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   19698:	e0bffc17 	ldw	r2,-16(fp)
   1969c:	103fd91e 	bne	r2,zero,19604 <__alt_mem_descriptor_memory+0xdefd9604>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   196a0:	e037883a 	mov	sp,fp
   196a4:	df000017 	ldw	fp,0(sp)
   196a8:	dec00104 	addi	sp,sp,4
   196ac:	f800283a 	ret

000196b0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   196b0:	defffc04 	addi	sp,sp,-16
   196b4:	df000315 	stw	fp,12(sp)
   196b8:	df000304 	addi	fp,sp,12
   196bc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   196c0:	e0bfff17 	ldw	r2,-4(fp)
   196c4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   196c8:	e0bfff17 	ldw	r2,-4(fp)
   196cc:	108002c4 	addi	r2,r2,11
   196d0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   196d4:	e03ffe05 	stb	zero,-8(fp)
   196d8:	00000706 	br	196f8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   196dc:	e0bffd17 	ldw	r2,-12(fp)
   196e0:	10c00044 	addi	r3,r2,1
   196e4:	e0fffd15 	stw	r3,-12(fp)
   196e8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   196ec:	e0bffe03 	ldbu	r2,-8(fp)
   196f0:	10800044 	addi	r2,r2,1
   196f4:	e0bffe05 	stb	r2,-8(fp)
   196f8:	e0bffe03 	ldbu	r2,-8(fp)
   196fc:	108000f0 	cmpltui	r2,r2,3
   19700:	103ff61e 	bne	r2,zero,196dc <__alt_mem_descriptor_memory+0xdefd96dc>
        *ptbl++ = 0;
    }
}
   19704:	e037883a 	mov	sp,fp
   19708:	df000017 	ldw	fp,0(sp)
   1970c:	dec00104 	addi	sp,sp,4
   19710:	f800283a 	ret

00019714 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   19714:	defffb04 	addi	sp,sp,-20
   19718:	dfc00415 	stw	ra,16(sp)
   1971c:	df000315 	stw	fp,12(sp)
   19720:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   19724:	010001b4 	movhi	r4,6
   19728:	21321d04 	addi	r4,r4,-14220
   1972c:	0142d004 	movi	r5,2880
   19730:	0019a740 	call	19a74 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   19734:	008001b4 	movhi	r2,6
   19738:	10b21d04 	addi	r2,r2,-14220
   1973c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   19740:	008001b4 	movhi	r2,6
   19744:	10b22904 	addi	r2,r2,-14172
   19748:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1974c:	e03ffd0d 	sth	zero,-12(fp)
   19750:	00001306 	br	197a0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19754:	e0bffe17 	ldw	r2,-8(fp)
   19758:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1975c:	e0bffe17 	ldw	r2,-8(fp)
   19760:	e0ffff17 	ldw	r3,-4(fp)
   19764:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   19768:	e0bffe17 	ldw	r2,-8(fp)
   1976c:	00c00fc4 	movi	r3,63
   19770:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   19774:	e0bffe17 	ldw	r2,-8(fp)
   19778:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   1977c:	e0bffe17 	ldw	r2,-8(fp)
   19780:	10800c04 	addi	r2,r2,48
   19784:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   19788:	e0bfff17 	ldw	r2,-4(fp)
   1978c:	10800c04 	addi	r2,r2,48
   19790:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   19794:	e0bffd0b 	ldhu	r2,-12(fp)
   19798:	10800044 	addi	r2,r2,1
   1979c:	e0bffd0d 	sth	r2,-12(fp)
   197a0:	e0bffd0b 	ldhu	r2,-12(fp)
   197a4:	10800ef0 	cmpltui	r2,r2,59
   197a8:	103fea1e 	bne	r2,zero,19754 <__alt_mem_descriptor_memory+0xdefd9754>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   197ac:	e0bffe17 	ldw	r2,-8(fp)
   197b0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   197b4:	e0bffe17 	ldw	r2,-8(fp)
   197b8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   197bc:	e0bffe17 	ldw	r2,-8(fp)
   197c0:	00c00fc4 	movi	r3,63
   197c4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   197c8:	e0bffe17 	ldw	r2,-8(fp)
   197cc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   197d0:	008001b4 	movhi	r2,6
   197d4:	10b21d04 	addi	r2,r2,-14220
   197d8:	d0a86515 	stw	r2,-24172(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   197dc:	e037883a 	mov	sp,fp
   197e0:	dfc00117 	ldw	ra,4(sp)
   197e4:	df000017 	ldw	fp,0(sp)
   197e8:	dec00204 	addi	sp,sp,8
   197ec:	f800283a 	ret

000197f0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   197f0:	deffff04 	addi	sp,sp,-4
   197f4:	df000015 	stw	fp,0(sp)
   197f8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   197fc:	d0286815 	stw	zero,-24160(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   19800:	d0286605 	stb	zero,-24168(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   19804:	d0285805 	stb	zero,-24224(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   19808:	d0286045 	stb	zero,-24191(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1980c:	d0285845 	stb	zero,-24223(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   19810:	d0285d15 	stw	zero,-24204(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   19814:	d0285915 	stw	zero,-24220(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   19818:	d0286b15 	stw	zero,-24148(gp)
    OSIdleCtrMax  = 0L;
   1981c:	d0285e15 	stw	zero,-24200(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   19820:	d0286a05 	stb	zero,-24152(gp)
#endif
}
   19824:	e037883a 	mov	sp,fp
   19828:	df000017 	ldw	fp,0(sp)
   1982c:	dec00104 	addi	sp,sp,4
   19830:	f800283a 	ret

00019834 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   19834:	defffd04 	addi	sp,sp,-12
   19838:	df000215 	stw	fp,8(sp)
   1983c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   19840:	d0286405 	stb	zero,-24176(gp)
    prdytbl       = &OSRdyTbl[0];
   19844:	d0a86444 	addi	r2,gp,-24175
   19848:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1984c:	e03ffe05 	stb	zero,-8(fp)
   19850:	00000706 	br	19870 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   19854:	e0bfff17 	ldw	r2,-4(fp)
   19858:	10c00044 	addi	r3,r2,1
   1985c:	e0ffff15 	stw	r3,-4(fp)
   19860:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   19864:	e0bffe03 	ldbu	r2,-8(fp)
   19868:	10800044 	addi	r2,r2,1
   1986c:	e0bffe05 	stb	r2,-8(fp)
   19870:	e0bffe03 	ldbu	r2,-8(fp)
   19874:	108000f0 	cmpltui	r2,r2,3
   19878:	103ff61e 	bne	r2,zero,19854 <__alt_mem_descriptor_memory+0xdefd9854>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1987c:	d0285a45 	stb	zero,-24215(gp)
    OSPrioHighRdy = 0;
   19880:	d0285a05 	stb	zero,-24216(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   19884:	d0286215 	stw	zero,-24184(gp)
    OSTCBCur      = (OS_TCB *)0;
   19888:	d0286715 	stw	zero,-24164(gp)
}
   1988c:	e037883a 	mov	sp,fp
   19890:	df000017 	ldw	fp,0(sp)
   19894:	dec00104 	addi	sp,sp,4
   19898:	f800283a 	ret

0001989c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1989c:	defff804 	addi	sp,sp,-32
   198a0:	dfc00715 	stw	ra,28(sp)
   198a4:	df000615 	stw	fp,24(sp)
   198a8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   198ac:	00bfffd4 	movui	r2,65535
   198b0:	d8800015 	stw	r2,0(sp)
   198b4:	008001b4 	movhi	r2,6
   198b8:	10b01d04 	addi	r2,r2,-16268
   198bc:	d8800115 	stw	r2,4(sp)
   198c0:	00808004 	movi	r2,512
   198c4:	d8800215 	stw	r2,8(sp)
   198c8:	d8000315 	stw	zero,12(sp)
   198cc:	008000c4 	movi	r2,3
   198d0:	d8800415 	stw	r2,16(sp)
   198d4:	010000b4 	movhi	r4,2
   198d8:	21274b04 	addi	r4,r4,-25300
   198dc:	000b883a 	mov	r5,zero
   198e0:	018001b4 	movhi	r6,6
   198e4:	31b21c04 	addi	r6,r6,-14224
   198e8:	01c00504 	movi	r7,20
   198ec:	001e7300 	call	1e730 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   198f0:	01000504 	movi	r4,20
   198f4:	01400174 	movhi	r5,5
   198f8:	29769904 	addi	r5,r5,-9628
   198fc:	e1bfff04 	addi	r6,fp,-4
   19900:	001effc0 	call	1effc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   19904:	e037883a 	mov	sp,fp
   19908:	dfc00117 	ldw	ra,4(sp)
   1990c:	df000017 	ldw	fp,0(sp)
   19910:	dec00204 	addi	sp,sp,8
   19914:	f800283a 	ret

00019918 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   19918:	defff804 	addi	sp,sp,-32
   1991c:	dfc00715 	stw	ra,28(sp)
   19920:	df000615 	stw	fp,24(sp)
   19924:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   19928:	00bfff94 	movui	r2,65534
   1992c:	d8800015 	stw	r2,0(sp)
   19930:	008001b4 	movhi	r2,6
   19934:	10ada504 	addi	r2,r2,-18796
   19938:	d8800115 	stw	r2,4(sp)
   1993c:	00808004 	movi	r2,512
   19940:	d8800215 	stw	r2,8(sp)
   19944:	d8000315 	stw	zero,12(sp)
   19948:	008000c4 	movi	r2,3
   1994c:	d8800415 	stw	r2,16(sp)
   19950:	010000b4 	movhi	r4,2
   19954:	21276204 	addi	r4,r4,-25208
   19958:	000b883a 	mov	r5,zero
   1995c:	018001b4 	movhi	r6,6
   19960:	31afa404 	addi	r6,r6,-16752
   19964:	01c004c4 	movi	r7,19
   19968:	001e7300 	call	1e730 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1996c:	010004c4 	movi	r4,19
   19970:	01400174 	movhi	r5,5
   19974:	29769d04 	addi	r5,r5,-9612
   19978:	e1bfff04 	addi	r6,fp,-4
   1997c:	001effc0 	call	1effc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   19980:	e037883a 	mov	sp,fp
   19984:	dfc00117 	ldw	ra,4(sp)
   19988:	df000017 	ldw	fp,0(sp)
   1998c:	dec00204 	addi	sp,sp,8
   19990:	f800283a 	ret

00019994 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   19994:	defffb04 	addi	sp,sp,-20
   19998:	dfc00415 	stw	ra,16(sp)
   1999c:	df000315 	stw	fp,12(sp)
   199a0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   199a4:	010001b4 	movhi	r4,6
   199a8:	2134ed04 	addi	r4,r4,-11340
   199ac:	01414404 	movi	r5,1296
   199b0:	0019a740 	call	19a74 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   199b4:	010001b4 	movhi	r4,6
   199b8:	21363104 	addi	r4,r4,-10044
   199bc:	01401504 	movi	r5,84
   199c0:	0019a740 	call	19a74 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   199c4:	008001b4 	movhi	r2,6
   199c8:	10b4ed04 	addi	r2,r2,-11340
   199cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   199d0:	008001b4 	movhi	r2,6
   199d4:	10b50804 	addi	r2,r2,-11232
   199d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   199dc:	e03ffd05 	stb	zero,-12(fp)
   199e0:	00001106 	br	19a28 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   199e4:	e0bffe17 	ldw	r2,-8(fp)
   199e8:	e0ffff17 	ldw	r3,-4(fp)
   199ec:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   199f0:	e0bffe17 	ldw	r2,-8(fp)
   199f4:	00c00fc4 	movi	r3,63
   199f8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   199fc:	e0bffe17 	ldw	r2,-8(fp)
   19a00:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   19a04:	e0bffe17 	ldw	r2,-8(fp)
   19a08:	10801b04 	addi	r2,r2,108
   19a0c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   19a10:	e0bfff17 	ldw	r2,-4(fp)
   19a14:	10801b04 	addi	r2,r2,108
   19a18:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   19a1c:	e0bffd03 	ldbu	r2,-12(fp)
   19a20:	10800044 	addi	r2,r2,1
   19a24:	e0bffd05 	stb	r2,-12(fp)
   19a28:	e0bffd03 	ldbu	r2,-12(fp)
   19a2c:	108002f0 	cmpltui	r2,r2,11
   19a30:	103fec1e 	bne	r2,zero,199e4 <__alt_mem_descriptor_memory+0xdefd99e4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   19a34:	e0bffe17 	ldw	r2,-8(fp)
   19a38:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   19a3c:	e0bffe17 	ldw	r2,-8(fp)
   19a40:	00c00fc4 	movi	r3,63
   19a44:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   19a48:	e0bffe17 	ldw	r2,-8(fp)
   19a4c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   19a50:	d0285b15 	stw	zero,-24212(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   19a54:	008001b4 	movhi	r2,6
   19a58:	10b4ed04 	addi	r2,r2,-11340
   19a5c:	d0a85f15 	stw	r2,-24196(gp)
}
   19a60:	e037883a 	mov	sp,fp
   19a64:	dfc00117 	ldw	ra,4(sp)
   19a68:	df000017 	ldw	fp,0(sp)
   19a6c:	dec00204 	addi	sp,sp,8
   19a70:	f800283a 	ret

00019a74 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   19a74:	defffd04 	addi	sp,sp,-12
   19a78:	df000215 	stw	fp,8(sp)
   19a7c:	df000204 	addi	fp,sp,8
   19a80:	e13ffe15 	stw	r4,-8(fp)
   19a84:	2805883a 	mov	r2,r5
   19a88:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   19a8c:	00000706 	br	19aac <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   19a90:	e0bffe17 	ldw	r2,-8(fp)
   19a94:	10c00044 	addi	r3,r2,1
   19a98:	e0fffe15 	stw	r3,-8(fp)
   19a9c:	10000005 	stb	zero,0(r2)
        size--;
   19aa0:	e0bfff0b 	ldhu	r2,-4(fp)
   19aa4:	10bfffc4 	addi	r2,r2,-1
   19aa8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   19aac:	e0bfff0b 	ldhu	r2,-4(fp)
   19ab0:	103ff71e 	bne	r2,zero,19a90 <__alt_mem_descriptor_memory+0xdefd9a90>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   19ab4:	e037883a 	mov	sp,fp
   19ab8:	df000017 	ldw	fp,0(sp)
   19abc:	dec00104 	addi	sp,sp,4
   19ac0:	f800283a 	ret

00019ac4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   19ac4:	defffc04 	addi	sp,sp,-16
   19ac8:	df000315 	stw	fp,12(sp)
   19acc:	df000304 	addi	fp,sp,12
   19ad0:	e13ffd15 	stw	r4,-12(fp)
   19ad4:	e17ffe15 	stw	r5,-8(fp)
   19ad8:	3005883a 	mov	r2,r6
   19adc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   19ae0:	00000b06 	br	19b10 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   19ae4:	e0bffd17 	ldw	r2,-12(fp)
   19ae8:	10c00044 	addi	r3,r2,1
   19aec:	e0fffd15 	stw	r3,-12(fp)
   19af0:	e0fffe17 	ldw	r3,-8(fp)
   19af4:	19000044 	addi	r4,r3,1
   19af8:	e13ffe15 	stw	r4,-8(fp)
   19afc:	18c00003 	ldbu	r3,0(r3)
   19b00:	10c00005 	stb	r3,0(r2)
        size--;
   19b04:	e0bfff0b 	ldhu	r2,-4(fp)
   19b08:	10bfffc4 	addi	r2,r2,-1
   19b0c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   19b10:	e0bfff0b 	ldhu	r2,-4(fp)
   19b14:	103ff31e 	bne	r2,zero,19ae4 <__alt_mem_descriptor_memory+0xdefd9ae4>
        *pdest++ = *psrc++;
        size--;
    }
}
   19b18:	e037883a 	mov	sp,fp
   19b1c:	df000017 	ldw	fp,0(sp)
   19b20:	dec00104 	addi	sp,sp,4
   19b24:	f800283a 	ret

00019b28 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   19b28:	defffb04 	addi	sp,sp,-20
   19b2c:	dfc00415 	stw	ra,16(sp)
   19b30:	df000315 	stw	fp,12(sp)
   19b34:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19b38:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b3c:	0005303a 	rdctl	r2,status
   19b40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19b44:	e0fffe17 	ldw	r3,-8(fp)
   19b48:	00bfff84 	movi	r2,-2
   19b4c:	1884703a 	and	r2,r3,r2
   19b50:	1001703a 	wrctl	status,r2
  
  return context;
   19b54:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   19b58:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   19b5c:	d0a86603 	ldbu	r2,-24168(gp)
   19b60:	10803fcc 	andi	r2,r2,255
   19b64:	10001a1e 	bne	r2,zero,19bd0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   19b68:	d0a85803 	ldbu	r2,-24224(gp)
   19b6c:	10803fcc 	andi	r2,r2,255
   19b70:	1000171e 	bne	r2,zero,19bd0 <OS_Sched+0xa8>
            OS_SchedNew();
   19b74:	0019bf40 	call	19bf4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   19b78:	d0e85a03 	ldbu	r3,-24216(gp)
   19b7c:	d0a85a43 	ldbu	r2,-24215(gp)
   19b80:	18c03fcc 	andi	r3,r3,255
   19b84:	10803fcc 	andi	r2,r2,255
   19b88:	18801126 	beq	r3,r2,19bd0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   19b8c:	d0a85a03 	ldbu	r2,-24216(gp)
   19b90:	10c03fcc 	andi	r3,r2,255
   19b94:	008001b4 	movhi	r2,6
   19b98:	10b63104 	addi	r2,r2,-10044
   19b9c:	18c7883a 	add	r3,r3,r3
   19ba0:	18c7883a 	add	r3,r3,r3
   19ba4:	10c5883a 	add	r2,r2,r3
   19ba8:	10800017 	ldw	r2,0(r2)
   19bac:	d0a86215 	stw	r2,-24184(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   19bb0:	d0a86217 	ldw	r2,-24184(gp)
   19bb4:	10c00e17 	ldw	r3,56(r2)
   19bb8:	18c00044 	addi	r3,r3,1
   19bbc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   19bc0:	d0a85d17 	ldw	r2,-24204(gp)
   19bc4:	10800044 	addi	r2,r2,1
   19bc8:	d0a85d15 	stw	r2,-24204(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   19bcc:	003a9100 	call	3a910 <OSCtxSw>
   19bd0:	e0bffd17 	ldw	r2,-12(fp)
   19bd4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19bd8:	e0bfff17 	ldw	r2,-4(fp)
   19bdc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   19be0:	e037883a 	mov	sp,fp
   19be4:	dfc00117 	ldw	ra,4(sp)
   19be8:	df000017 	ldw	fp,0(sp)
   19bec:	dec00204 	addi	sp,sp,8
   19bf0:	f800283a 	ret

00019bf4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   19bf4:	defffe04 	addi	sp,sp,-8
   19bf8:	df000115 	stw	fp,4(sp)
   19bfc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   19c00:	d0a86403 	ldbu	r2,-24176(gp)
   19c04:	10c03fcc 	andi	r3,r2,255
   19c08:	00800174 	movhi	r2,5
   19c0c:	10b65904 	addi	r2,r2,-9884
   19c10:	10c5883a 	add	r2,r2,r3
   19c14:	10800003 	ldbu	r2,0(r2)
   19c18:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   19c1c:	e0bfff03 	ldbu	r2,-4(fp)
   19c20:	100490fa 	slli	r2,r2,3
   19c24:	1009883a 	mov	r4,r2
   19c28:	e0ffff03 	ldbu	r3,-4(fp)
   19c2c:	d0a86444 	addi	r2,gp,-24175
   19c30:	1885883a 	add	r2,r3,r2
   19c34:	10800003 	ldbu	r2,0(r2)
   19c38:	10c03fcc 	andi	r3,r2,255
   19c3c:	00800174 	movhi	r2,5
   19c40:	10b65904 	addi	r2,r2,-9884
   19c44:	10c5883a 	add	r2,r2,r3
   19c48:	10800003 	ldbu	r2,0(r2)
   19c4c:	2085883a 	add	r2,r4,r2
   19c50:	d0a85a05 	stb	r2,-24216(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   19c54:	e037883a 	mov	sp,fp
   19c58:	df000017 	ldw	fp,0(sp)
   19c5c:	dec00104 	addi	sp,sp,4
   19c60:	f800283a 	ret

00019c64 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   19c64:	defffc04 	addi	sp,sp,-16
   19c68:	df000315 	stw	fp,12(sp)
   19c6c:	df000304 	addi	fp,sp,12
   19c70:	e13ffe15 	stw	r4,-8(fp)
   19c74:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   19c78:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   19c7c:	00000b06 	br	19cac <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   19c80:	e0bffe17 	ldw	r2,-8(fp)
   19c84:	10c00044 	addi	r3,r2,1
   19c88:	e0fffe15 	stw	r3,-8(fp)
   19c8c:	e0ffff17 	ldw	r3,-4(fp)
   19c90:	19000044 	addi	r4,r3,1
   19c94:	e13fff15 	stw	r4,-4(fp)
   19c98:	18c00003 	ldbu	r3,0(r3)
   19c9c:	10c00005 	stb	r3,0(r2)
        len++;
   19ca0:	e0bffd03 	ldbu	r2,-12(fp)
   19ca4:	10800044 	addi	r2,r2,1
   19ca8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   19cac:	e0bfff17 	ldw	r2,-4(fp)
   19cb0:	10800003 	ldbu	r2,0(r2)
   19cb4:	10803fcc 	andi	r2,r2,255
   19cb8:	103ff11e 	bne	r2,zero,19c80 <__alt_mem_descriptor_memory+0xdefd9c80>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   19cbc:	e0bffe17 	ldw	r2,-8(fp)
   19cc0:	10000005 	stb	zero,0(r2)
    return (len);
   19cc4:	e0bffd03 	ldbu	r2,-12(fp)
}
   19cc8:	e037883a 	mov	sp,fp
   19ccc:	df000017 	ldw	fp,0(sp)
   19cd0:	dec00104 	addi	sp,sp,4
   19cd4:	f800283a 	ret

00019cd8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   19cd8:	defffd04 	addi	sp,sp,-12
   19cdc:	df000215 	stw	fp,8(sp)
   19ce0:	df000204 	addi	fp,sp,8
   19ce4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   19ce8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   19cec:	00000606 	br	19d08 <OS_StrLen+0x30>
        psrc++;
   19cf0:	e0bfff17 	ldw	r2,-4(fp)
   19cf4:	10800044 	addi	r2,r2,1
   19cf8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   19cfc:	e0bffe03 	ldbu	r2,-8(fp)
   19d00:	10800044 	addi	r2,r2,1
   19d04:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   19d08:	e0bfff17 	ldw	r2,-4(fp)
   19d0c:	10800003 	ldbu	r2,0(r2)
   19d10:	10803fcc 	andi	r2,r2,255
   19d14:	103ff61e 	bne	r2,zero,19cf0 <__alt_mem_descriptor_memory+0xdefd9cf0>
        psrc++;
        len++;
    }
    return (len);
   19d18:	e0bffe03 	ldbu	r2,-8(fp)
}
   19d1c:	e037883a 	mov	sp,fp
   19d20:	df000017 	ldw	fp,0(sp)
   19d24:	dec00104 	addi	sp,sp,4
   19d28:	f800283a 	ret

00019d2c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   19d2c:	defffa04 	addi	sp,sp,-24
   19d30:	dfc00515 	stw	ra,20(sp)
   19d34:	df000415 	stw	fp,16(sp)
   19d38:	df000404 	addi	fp,sp,16
   19d3c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19d40:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d44:	0005303a 	rdctl	r2,status
   19d48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d4c:	e0fffd17 	ldw	r3,-12(fp)
   19d50:	00bfff84 	movi	r2,-2
   19d54:	1884703a 	and	r2,r3,r2
   19d58:	1001703a 	wrctl	status,r2
  
  return context;
   19d5c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   19d60:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   19d64:	d0a85917 	ldw	r2,-24220(gp)
   19d68:	10800044 	addi	r2,r2,1
   19d6c:	d0a85915 	stw	r2,-24220(gp)
   19d70:	e0bffc17 	ldw	r2,-16(fp)
   19d74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d78:	e0bffe17 	ldw	r2,-8(fp)
   19d7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   19d80:	003adac0 	call	3adac <OSTaskIdleHook>
    }
   19d84:	003fef06 	br	19d44 <__alt_mem_descriptor_memory+0xdefd9d44>

00019d88 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   19d88:	defffa04 	addi	sp,sp,-24
   19d8c:	dfc00515 	stw	ra,20(sp)
   19d90:	df000415 	stw	fp,16(sp)
   19d94:	df000404 	addi	fp,sp,16
   19d98:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19d9c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   19da0:	00000206 	br	19dac <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   19da4:	01000504 	movi	r4,20
   19da8:	001f9280 	call	1f928 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   19dac:	d0a86a03 	ldbu	r2,-24152(gp)
   19db0:	10803fcc 	andi	r2,r2,255
   19db4:	103ffb26 	beq	r2,zero,19da4 <__alt_mem_descriptor_memory+0xdefd9da4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   19db8:	d0a85e17 	ldw	r2,-24200(gp)
   19dbc:	1009883a 	mov	r4,r2
   19dc0:	01401904 	movi	r5,100
   19dc4:	00152500 	call	15250 <__udivsi3>
   19dc8:	d0a85e15 	stw	r2,-24200(gp)
    if (OSIdleCtrMax == 0L) {
   19dcc:	d0a85e17 	ldw	r2,-24200(gp)
   19dd0:	1000031e 	bne	r2,zero,19de0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   19dd4:	d0286005 	stb	zero,-24192(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   19dd8:	01003fc4 	movi	r4,255
   19ddc:	001f57c0 	call	1f57c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19de0:	0005303a 	rdctl	r2,status
   19de4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19de8:	e0fffd17 	ldw	r3,-12(fp)
   19dec:	00bfff84 	movi	r2,-2
   19df0:	1884703a 	and	r2,r3,r2
   19df4:	1001703a 	wrctl	status,r2
  
  return context;
   19df8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   19dfc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   19e00:	d0a85917 	ldw	r2,-24220(gp)
   19e04:	d0a86b15 	stw	r2,-24148(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   19e08:	d0285915 	stw	zero,-24220(gp)
   19e0c:	e0bffc17 	ldw	r2,-16(fp)
   19e10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e14:	e0bffe17 	ldw	r2,-8(fp)
   19e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   19e1c:	d0e86b17 	ldw	r3,-24148(gp)
   19e20:	d0a85e17 	ldw	r2,-24200(gp)
   19e24:	1809883a 	mov	r4,r3
   19e28:	100b883a 	mov	r5,r2
   19e2c:	00152500 	call	15250 <__udivsi3>
   19e30:	1007883a 	mov	r3,r2
   19e34:	00801904 	movi	r2,100
   19e38:	10c5c83a 	sub	r2,r2,r3
   19e3c:	d0a86005 	stb	r2,-24192(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   19e40:	003ad300 	call	3ad30 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   19e44:	0019e540 	call	19e54 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   19e48:	01000284 	movi	r4,10
   19e4c:	001f9280 	call	1f928 <OSTimeDly>
    }
   19e50:	003fe306 	br	19de0 <__alt_mem_descriptor_memory+0xdefd9de0>

00019e54 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   19e54:	defffa04 	addi	sp,sp,-24
   19e58:	dfc00515 	stw	ra,20(sp)
   19e5c:	df000415 	stw	fp,16(sp)
   19e60:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   19e64:	e03ffc05 	stb	zero,-16(fp)
   19e68:	00002406 	br	19efc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   19e6c:	e0fffc03 	ldbu	r3,-16(fp)
   19e70:	e0bffe04 	addi	r2,fp,-8
   19e74:	1809883a 	mov	r4,r3
   19e78:	100b883a 	mov	r5,r2
   19e7c:	001f3b40 	call	1f3b4 <OSTaskStkChk>
   19e80:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   19e84:	e0bffc43 	ldbu	r2,-15(fp)
   19e88:	1000191e 	bne	r2,zero,19ef0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   19e8c:	e0fffc03 	ldbu	r3,-16(fp)
   19e90:	008001b4 	movhi	r2,6
   19e94:	10b63104 	addi	r2,r2,-10044
   19e98:	18c7883a 	add	r3,r3,r3
   19e9c:	18c7883a 	add	r3,r3,r3
   19ea0:	10c5883a 	add	r2,r2,r3
   19ea4:	10800017 	ldw	r2,0(r2)
   19ea8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   19eac:	e0bffd17 	ldw	r2,-12(fp)
   19eb0:	10000f26 	beq	r2,zero,19ef0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   19eb4:	e0bffd17 	ldw	r2,-12(fp)
   19eb8:	10800060 	cmpeqi	r2,r2,1
   19ebc:	10000c1e 	bne	r2,zero,19ef0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   19ec0:	e0bffd17 	ldw	r2,-12(fp)
   19ec4:	10c00217 	ldw	r3,8(r2)
   19ec8:	e0bffd17 	ldw	r2,-12(fp)
   19ecc:	10800317 	ldw	r2,12(r2)
   19ed0:	1085883a 	add	r2,r2,r2
   19ed4:	1085883a 	add	r2,r2,r2
   19ed8:	1887883a 	add	r3,r3,r2
   19edc:	e0bffd17 	ldw	r2,-12(fp)
   19ee0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   19ee4:	e0ffff17 	ldw	r3,-4(fp)
   19ee8:	e0bffd17 	ldw	r2,-12(fp)
   19eec:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   19ef0:	e0bffc03 	ldbu	r2,-16(fp)
   19ef4:	10800044 	addi	r2,r2,1
   19ef8:	e0bffc05 	stb	r2,-16(fp)
   19efc:	e0bffc03 	ldbu	r2,-16(fp)
   19f00:	10800570 	cmpltui	r2,r2,21
   19f04:	103fd91e 	bne	r2,zero,19e6c <__alt_mem_descriptor_memory+0xdefd9e6c>
#endif
                }
            }
        }
    }
}
   19f08:	e037883a 	mov	sp,fp
   19f0c:	dfc00117 	ldw	ra,4(sp)
   19f10:	df000017 	ldw	fp,0(sp)
   19f14:	dec00204 	addi	sp,sp,8
   19f18:	f800283a 	ret

00019f1c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   19f1c:	defff204 	addi	sp,sp,-56
   19f20:	dfc00d15 	stw	ra,52(sp)
   19f24:	df000c15 	stw	fp,48(sp)
   19f28:	df000c04 	addi	fp,sp,48
   19f2c:	e17ffc15 	stw	r5,-16(fp)
   19f30:	e1bffd15 	stw	r6,-12(fp)
   19f34:	3807883a 	mov	r3,r7
   19f38:	e0800417 	ldw	r2,16(fp)
   19f3c:	e13ffb05 	stb	r4,-20(fp)
   19f40:	e0fffe0d 	sth	r3,-8(fp)
   19f44:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19f48:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f4c:	0005303a 	rdctl	r2,status
   19f50:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f54:	e0fff617 	ldw	r3,-40(fp)
   19f58:	00bfff84 	movi	r2,-2
   19f5c:	1884703a 	and	r2,r3,r2
   19f60:	1001703a 	wrctl	status,r2
  
  return context;
   19f64:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   19f68:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   19f6c:	d0a85f17 	ldw	r2,-24196(gp)
   19f70:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   19f74:	e0bff517 	ldw	r2,-44(fp)
   19f78:	10009326 	beq	r2,zero,1a1c8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   19f7c:	e0bff517 	ldw	r2,-44(fp)
   19f80:	10800517 	ldw	r2,20(r2)
   19f84:	d0a85f15 	stw	r2,-24196(gp)
   19f88:	e0bff417 	ldw	r2,-48(fp)
   19f8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f90:	e0bff717 	ldw	r2,-36(fp)
   19f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   19f98:	e0bff517 	ldw	r2,-44(fp)
   19f9c:	e0fffc17 	ldw	r3,-16(fp)
   19fa0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   19fa4:	e0bff517 	ldw	r2,-44(fp)
   19fa8:	e0fffb03 	ldbu	r3,-20(fp)
   19fac:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   19fb0:	e0bff517 	ldw	r2,-44(fp)
   19fb4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   19fb8:	e0bff517 	ldw	r2,-44(fp)
   19fbc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   19fc0:	e0bff517 	ldw	r2,-44(fp)
   19fc4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   19fc8:	e0bff517 	ldw	r2,-44(fp)
   19fcc:	e0c00317 	ldw	r3,12(fp)
   19fd0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   19fd4:	e0bff517 	ldw	r2,-44(fp)
   19fd8:	e0c00217 	ldw	r3,8(fp)
   19fdc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   19fe0:	e0bff517 	ldw	r2,-44(fp)
   19fe4:	e0fffd17 	ldw	r3,-12(fp)
   19fe8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   19fec:	e0bff517 	ldw	r2,-44(fp)
   19ff0:	e0ffff0b 	ldhu	r3,-4(fp)
   19ff4:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   19ff8:	e0bff517 	ldw	r2,-44(fp)
   19ffc:	e0fffe0b 	ldhu	r3,-8(fp)
   1a000:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   1a004:	e0bff517 	ldw	r2,-44(fp)
   1a008:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1a00c:	e0bffb03 	ldbu	r2,-20(fp)
   1a010:	1004d0fa 	srli	r2,r2,3
   1a014:	1007883a 	mov	r3,r2
   1a018:	e0bff517 	ldw	r2,-44(fp)
   1a01c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1a020:	e0bffb03 	ldbu	r2,-20(fp)
   1a024:	108001cc 	andi	r2,r2,7
   1a028:	1007883a 	mov	r3,r2
   1a02c:	e0bff517 	ldw	r2,-44(fp)
   1a030:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   1a034:	e0bff517 	ldw	r2,-44(fp)
   1a038:	10800d03 	ldbu	r2,52(r2)
   1a03c:	10803fcc 	andi	r2,r2,255
   1a040:	00c00044 	movi	r3,1
   1a044:	1884983a 	sll	r2,r3,r2
   1a048:	1007883a 	mov	r3,r2
   1a04c:	e0bff517 	ldw	r2,-44(fp)
   1a050:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   1a054:	e0bff517 	ldw	r2,-44(fp)
   1a058:	10800cc3 	ldbu	r2,51(r2)
   1a05c:	10803fcc 	andi	r2,r2,255
   1a060:	00c00044 	movi	r3,1
   1a064:	1884983a 	sll	r2,r3,r2
   1a068:	1007883a 	mov	r3,r2
   1a06c:	e0bff517 	ldw	r2,-44(fp)
   1a070:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   1a074:	e0bff517 	ldw	r2,-44(fp)
   1a078:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1a07c:	e0bff517 	ldw	r2,-44(fp)
   1a080:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   1a084:	e0bff517 	ldw	r2,-44(fp)
   1a088:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1a08c:	e0bff517 	ldw	r2,-44(fp)
   1a090:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   1a094:	e0bff517 	ldw	r2,-44(fp)
   1a098:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1a09c:	e0bff517 	ldw	r2,-44(fp)
   1a0a0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   1a0a4:	e0bff517 	ldw	r2,-44(fp)
   1a0a8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1a0ac:	e0bff517 	ldw	r2,-44(fp)
   1a0b0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   1a0b4:	e0bff517 	ldw	r2,-44(fp)
   1a0b8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1a0bc:	e0bff517 	ldw	r2,-44(fp)
   1a0c0:	00c00fc4 	movi	r3,63
   1a0c4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1a0c8:	e0bff517 	ldw	r2,-44(fp)
   1a0cc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   1a0d0:	e13ff517 	ldw	r4,-44(fp)
   1a0d4:	003adc80 	call	3adc8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1a0d8:	e13ff517 	ldw	r4,-44(fp)
   1a0dc:	003acd40 	call	3acd4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0e0:	0005303a 	rdctl	r2,status
   1a0e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0e8:	e0fff817 	ldw	r3,-32(fp)
   1a0ec:	00bfff84 	movi	r2,-2
   1a0f0:	1884703a 	and	r2,r3,r2
   1a0f4:	1001703a 	wrctl	status,r2
  
  return context;
   1a0f8:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   1a0fc:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1a100:	e0fffb03 	ldbu	r3,-20(fp)
   1a104:	008001b4 	movhi	r2,6
   1a108:	10b63104 	addi	r2,r2,-10044
   1a10c:	18c7883a 	add	r3,r3,r3
   1a110:	18c7883a 	add	r3,r3,r3
   1a114:	10c5883a 	add	r2,r2,r3
   1a118:	e0fff517 	ldw	r3,-44(fp)
   1a11c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1a120:	d0e85b17 	ldw	r3,-24212(gp)
   1a124:	e0bff517 	ldw	r2,-44(fp)
   1a128:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1a12c:	e0bff517 	ldw	r2,-44(fp)
   1a130:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1a134:	d0a85b17 	ldw	r2,-24212(gp)
   1a138:	10000326 	beq	r2,zero,1a148 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1a13c:	d0a85b17 	ldw	r2,-24212(gp)
   1a140:	e0fff517 	ldw	r3,-44(fp)
   1a144:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1a148:	e0bff517 	ldw	r2,-44(fp)
   1a14c:	d0a85b15 	stw	r2,-24212(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1a150:	e0bff517 	ldw	r2,-44(fp)
   1a154:	10c00d83 	ldbu	r3,54(r2)
   1a158:	d0a86403 	ldbu	r2,-24176(gp)
   1a15c:	1884b03a 	or	r2,r3,r2
   1a160:	d0a86405 	stb	r2,-24176(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a164:	e0bff517 	ldw	r2,-44(fp)
   1a168:	10800d03 	ldbu	r2,52(r2)
   1a16c:	10c03fcc 	andi	r3,r2,255
   1a170:	e0bff517 	ldw	r2,-44(fp)
   1a174:	10800d03 	ldbu	r2,52(r2)
   1a178:	11003fcc 	andi	r4,r2,255
   1a17c:	d0a86444 	addi	r2,gp,-24175
   1a180:	2085883a 	add	r2,r4,r2
   1a184:	11000003 	ldbu	r4,0(r2)
   1a188:	e0bff517 	ldw	r2,-44(fp)
   1a18c:	10800d43 	ldbu	r2,53(r2)
   1a190:	2084b03a 	or	r2,r4,r2
   1a194:	1009883a 	mov	r4,r2
   1a198:	d0a86444 	addi	r2,gp,-24175
   1a19c:	1885883a 	add	r2,r3,r2
   1a1a0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1a1a4:	d0a86043 	ldbu	r2,-24191(gp)
   1a1a8:	10800044 	addi	r2,r2,1
   1a1ac:	d0a86045 	stb	r2,-24191(gp)
   1a1b0:	e0bff417 	ldw	r2,-48(fp)
   1a1b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a1b8:	e0bff917 	ldw	r2,-28(fp)
   1a1bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1a1c0:	0005883a 	mov	r2,zero
   1a1c4:	00000506 	br	1a1dc <OS_TCBInit+0x2c0>
   1a1c8:	e0bff417 	ldw	r2,-48(fp)
   1a1cc:	e0bffa15 	stw	r2,-24(fp)
   1a1d0:	e0bffa17 	ldw	r2,-24(fp)
   1a1d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1a1d8:	00801084 	movi	r2,66
}
   1a1dc:	e037883a 	mov	sp,fp
   1a1e0:	dfc00117 	ldw	ra,4(sp)
   1a1e4:	df000017 	ldw	fp,0(sp)
   1a1e8:	dec00204 	addi	sp,sp,8
   1a1ec:	f800283a 	ret

0001a1f0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1a1f0:	defffe04 	addi	sp,sp,-8
   1a1f4:	df000115 	stw	fp,4(sp)
   1a1f8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1a1fc:	d0a00b04 	addi	r2,gp,-32724
   1a200:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   1a204:	d0a00c04 	addi	r2,gp,-32720
   1a208:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1a20c:	d0a00d84 	addi	r2,gp,-32714
   1a210:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   1a214:	d0a00e04 	addi	r2,gp,-32712
   1a218:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1a21c:	d0a00d04 	addi	r2,gp,-32716
   1a220:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1a224:	d0a00e84 	addi	r2,gp,-32710
   1a228:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1a22c:	d0a00f04 	addi	r2,gp,-32708
   1a230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1a234:	d0a00f84 	addi	r2,gp,-32706
   1a238:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1a23c:	d0a01004 	addi	r2,gp,-32704
   1a240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1a244:	d0a01084 	addi	r2,gp,-32702
   1a248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1a24c:	d0a01104 	addi	r2,gp,-32700
   1a250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1a254:	d0a01184 	addi	r2,gp,-32698
   1a258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1a25c:	d0a01204 	addi	r2,gp,-32696
   1a260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1a264:	d0a01284 	addi	r2,gp,-32694
   1a268:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1a26c:	d0a01304 	addi	r2,gp,-32692
   1a270:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1a274:	d0a01384 	addi	r2,gp,-32690
   1a278:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1a27c:	d0a01404 	addi	r2,gp,-32688
   1a280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1a284:	d0a01484 	addi	r2,gp,-32686
   1a288:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1a28c:	d0a01504 	addi	r2,gp,-32684
   1a290:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1a294:	d0a01584 	addi	r2,gp,-32682
   1a298:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1a29c:	d0a01604 	addi	r2,gp,-32680
   1a2a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1a2a4:	d0a01684 	addi	r2,gp,-32678
   1a2a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1a2ac:	d0a01704 	addi	r2,gp,-32676
   1a2b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1a2b4:	d0a01784 	addi	r2,gp,-32674
   1a2b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1a2bc:	d0a01804 	addi	r2,gp,-32672
   1a2c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   1a2c4:	d0a01884 	addi	r2,gp,-32670
   1a2c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1a2cc:	d0a01904 	addi	r2,gp,-32668
   1a2d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   1a2d4:	d0a01984 	addi	r2,gp,-32666
   1a2d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1a2dc:	d0a01a04 	addi	r2,gp,-32664
   1a2e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1a2e4:	d0a01a84 	addi	r2,gp,-32662
   1a2e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1a2ec:	d0a01b04 	addi	r2,gp,-32660
   1a2f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1a2f4:	d0a01b84 	addi	r2,gp,-32658
   1a2f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1a2fc:	d0a01c04 	addi	r2,gp,-32656
   1a300:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1a304:	d0a01c84 	addi	r2,gp,-32654
   1a308:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1a30c:	d0a01d04 	addi	r2,gp,-32652
   1a310:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1a314:	d0a01d84 	addi	r2,gp,-32650
   1a318:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1a31c:	d0a01e04 	addi	r2,gp,-32648
   1a320:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1a324:	d0a01e84 	addi	r2,gp,-32646
   1a328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1a32c:	d0a01f04 	addi	r2,gp,-32644
   1a330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1a334:	d0a01f84 	addi	r2,gp,-32642
   1a338:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1a33c:	d0a02004 	addi	r2,gp,-32640
   1a340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1a344:	d0a02084 	addi	r2,gp,-32638
   1a348:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1a34c:	d0a02104 	addi	r2,gp,-32636
   1a350:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1a354:	d0a02184 	addi	r2,gp,-32634
   1a358:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1a35c:	d0a02204 	addi	r2,gp,-32632
   1a360:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1a364:	d0a02704 	addi	r2,gp,-32612
   1a368:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1a36c:	e037883a 	mov	sp,fp
   1a370:	df000017 	ldw	fp,0(sp)
   1a374:	dec00104 	addi	sp,sp,4
   1a378:	f800283a 	ret

0001a37c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   1a37c:	defff204 	addi	sp,sp,-56
   1a380:	df000d15 	stw	fp,52(sp)
   1a384:	df000d04 	addi	fp,sp,52
   1a388:	e13ffc15 	stw	r4,-16(fp)
   1a38c:	2807883a 	mov	r3,r5
   1a390:	3005883a 	mov	r2,r6
   1a394:	e1ffff15 	stw	r7,-4(fp)
   1a398:	e0fffd0d 	sth	r3,-12(fp)
   1a39c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1a3a0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a3a4:	e0bfff17 	ldw	r2,-4(fp)
   1a3a8:	1000021e 	bne	r2,zero,1a3b4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1a3ac:	0005883a 	mov	r2,zero
   1a3b0:	0000b006 	br	1a674 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1a3b4:	e0bffc17 	ldw	r2,-16(fp)
   1a3b8:	1000051e 	bne	r2,zero,1a3d0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a3bc:	e0bfff17 	ldw	r2,-4(fp)
   1a3c0:	00c01b84 	movi	r3,110
   1a3c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1a3c8:	0005883a 	mov	r2,zero
   1a3cc:	0000a906 	br	1a674 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1a3d0:	e0bffc17 	ldw	r2,-16(fp)
   1a3d4:	10800003 	ldbu	r2,0(r2)
   1a3d8:	10803fcc 	andi	r2,r2,255
   1a3dc:	10800160 	cmpeqi	r2,r2,5
   1a3e0:	1000051e 	bne	r2,zero,1a3f8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1a3e4:	e0bfff17 	ldw	r2,-4(fp)
   1a3e8:	00c00044 	movi	r3,1
   1a3ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1a3f0:	0005883a 	mov	r2,zero
   1a3f4:	00009f06 	br	1a674 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1a3f8:	e0fffe03 	ldbu	r3,-8(fp)
   1a3fc:	00bfe004 	movi	r2,-128
   1a400:	1884703a 	and	r2,r3,r2
   1a404:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1a408:	e0bff503 	ldbu	r2,-44(fp)
   1a40c:	10000626 	beq	r2,zero,1a428 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1a410:	e0bffe03 	ldbu	r2,-8(fp)
   1a414:	10801fcc 	andi	r2,r2,127
   1a418:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1a41c:	00800044 	movi	r2,1
   1a420:	e0bff385 	stb	r2,-50(fp)
   1a424:	00000106 	br	1a42c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1a428:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1a42c:	e0bfff17 	ldw	r2,-4(fp)
   1a430:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a434:	0005303a 	rdctl	r2,status
   1a438:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a43c:	e0fff617 	ldw	r3,-40(fp)
   1a440:	00bfff84 	movi	r2,-2
   1a444:	1884703a 	and	r2,r3,r2
   1a448:	1001703a 	wrctl	status,r2
  
  return context;
   1a44c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   1a450:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1a454:	e0bffe03 	ldbu	r2,-8(fp)
   1a458:	10c00060 	cmpeqi	r3,r2,1
   1a45c:	18005f1e 	bne	r3,zero,1a5dc <OSFlagAccept+0x260>
   1a460:	10c00088 	cmpgei	r3,r2,2
   1a464:	1800021e 	bne	r3,zero,1a470 <OSFlagAccept+0xf4>
   1a468:	10003f26 	beq	r2,zero,1a568 <OSFlagAccept+0x1ec>
   1a46c:	00007706 	br	1a64c <OSFlagAccept+0x2d0>
   1a470:	10c000a0 	cmpeqi	r3,r2,2
   1a474:	1800031e 	bne	r3,zero,1a484 <OSFlagAccept+0x108>
   1a478:	108000e0 	cmpeqi	r2,r2,3
   1a47c:	10001e1e 	bne	r2,zero,1a4f8 <OSFlagAccept+0x17c>
   1a480:	00007206 	br	1a64c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1a484:	e0bffc17 	ldw	r2,-16(fp)
   1a488:	10c0020b 	ldhu	r3,8(r2)
   1a48c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a490:	1884703a 	and	r2,r3,r2
   1a494:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1a498:	e0fff30b 	ldhu	r3,-52(fp)
   1a49c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a4a0:	18800d1e 	bne	r3,r2,1a4d8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a4a4:	e0bff383 	ldbu	r2,-50(fp)
   1a4a8:	10800058 	cmpnei	r2,r2,1
   1a4ac:	10000d1e 	bne	r2,zero,1a4e4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1a4b0:	e0bffc17 	ldw	r2,-16(fp)
   1a4b4:	1080020b 	ldhu	r2,8(r2)
   1a4b8:	1007883a 	mov	r3,r2
   1a4bc:	e0bff30b 	ldhu	r2,-52(fp)
   1a4c0:	0084303a 	nor	r2,zero,r2
   1a4c4:	1884703a 	and	r2,r3,r2
   1a4c8:	1007883a 	mov	r3,r2
   1a4cc:	e0bffc17 	ldw	r2,-16(fp)
   1a4d0:	10c0020d 	sth	r3,8(r2)
   1a4d4:	00000306 	br	1a4e4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a4d8:	e0bfff17 	ldw	r2,-4(fp)
   1a4dc:	00c01c04 	movi	r3,112
   1a4e0:	10c00005 	stb	r3,0(r2)
   1a4e4:	e0bff417 	ldw	r2,-48(fp)
   1a4e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4ec:	e0bff717 	ldw	r2,-36(fp)
   1a4f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a4f4:	00005e06 	br	1a670 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1a4f8:	e0bffc17 	ldw	r2,-16(fp)
   1a4fc:	10c0020b 	ldhu	r3,8(r2)
   1a500:	e0bffd0b 	ldhu	r2,-12(fp)
   1a504:	1884703a 	and	r2,r3,r2
   1a508:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1a50c:	e0bff30b 	ldhu	r2,-52(fp)
   1a510:	10000d26 	beq	r2,zero,1a548 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a514:	e0bff383 	ldbu	r2,-50(fp)
   1a518:	10800058 	cmpnei	r2,r2,1
   1a51c:	10000d1e 	bne	r2,zero,1a554 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1a520:	e0bffc17 	ldw	r2,-16(fp)
   1a524:	1080020b 	ldhu	r2,8(r2)
   1a528:	1007883a 	mov	r3,r2
   1a52c:	e0bff30b 	ldhu	r2,-52(fp)
   1a530:	0084303a 	nor	r2,zero,r2
   1a534:	1884703a 	and	r2,r3,r2
   1a538:	1007883a 	mov	r3,r2
   1a53c:	e0bffc17 	ldw	r2,-16(fp)
   1a540:	10c0020d 	sth	r3,8(r2)
   1a544:	00000306 	br	1a554 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a548:	e0bfff17 	ldw	r2,-4(fp)
   1a54c:	00c01c04 	movi	r3,112
   1a550:	10c00005 	stb	r3,0(r2)
   1a554:	e0bff417 	ldw	r2,-48(fp)
   1a558:	e0bff815 	stw	r2,-32(fp)
   1a55c:	e0bff817 	ldw	r2,-32(fp)
   1a560:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a564:	00004206 	br	1a670 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1a568:	e0bffc17 	ldw	r2,-16(fp)
   1a56c:	1080020b 	ldhu	r2,8(r2)
   1a570:	0084303a 	nor	r2,zero,r2
   1a574:	1007883a 	mov	r3,r2
   1a578:	e0bffd0b 	ldhu	r2,-12(fp)
   1a57c:	1884703a 	and	r2,r3,r2
   1a580:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1a584:	e0fff30b 	ldhu	r3,-52(fp)
   1a588:	e0bffd0b 	ldhu	r2,-12(fp)
   1a58c:	18800b1e 	bne	r3,r2,1a5bc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a590:	e0bff383 	ldbu	r2,-50(fp)
   1a594:	10800058 	cmpnei	r2,r2,1
   1a598:	10000b1e 	bne	r2,zero,1a5c8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1a59c:	e0bffc17 	ldw	r2,-16(fp)
   1a5a0:	10c0020b 	ldhu	r3,8(r2)
   1a5a4:	e0bff30b 	ldhu	r2,-52(fp)
   1a5a8:	1884b03a 	or	r2,r3,r2
   1a5ac:	1007883a 	mov	r3,r2
   1a5b0:	e0bffc17 	ldw	r2,-16(fp)
   1a5b4:	10c0020d 	sth	r3,8(r2)
   1a5b8:	00000306 	br	1a5c8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a5bc:	e0bfff17 	ldw	r2,-4(fp)
   1a5c0:	00c01c04 	movi	r3,112
   1a5c4:	10c00005 	stb	r3,0(r2)
   1a5c8:	e0bff417 	ldw	r2,-48(fp)
   1a5cc:	e0bff915 	stw	r2,-28(fp)
   1a5d0:	e0bff917 	ldw	r2,-28(fp)
   1a5d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a5d8:	00002506 	br	1a670 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1a5dc:	e0bffc17 	ldw	r2,-16(fp)
   1a5e0:	1080020b 	ldhu	r2,8(r2)
   1a5e4:	0084303a 	nor	r2,zero,r2
   1a5e8:	1007883a 	mov	r3,r2
   1a5ec:	e0bffd0b 	ldhu	r2,-12(fp)
   1a5f0:	1884703a 	and	r2,r3,r2
   1a5f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1a5f8:	e0bff30b 	ldhu	r2,-52(fp)
   1a5fc:	10000b26 	beq	r2,zero,1a62c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a600:	e0bff383 	ldbu	r2,-50(fp)
   1a604:	10800058 	cmpnei	r2,r2,1
   1a608:	10000b1e 	bne	r2,zero,1a638 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1a60c:	e0bffc17 	ldw	r2,-16(fp)
   1a610:	10c0020b 	ldhu	r3,8(r2)
   1a614:	e0bff30b 	ldhu	r2,-52(fp)
   1a618:	1884b03a 	or	r2,r3,r2
   1a61c:	1007883a 	mov	r3,r2
   1a620:	e0bffc17 	ldw	r2,-16(fp)
   1a624:	10c0020d 	sth	r3,8(r2)
   1a628:	00000306 	br	1a638 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a62c:	e0bfff17 	ldw	r2,-4(fp)
   1a630:	00c01c04 	movi	r3,112
   1a634:	10c00005 	stb	r3,0(r2)
   1a638:	e0bff417 	ldw	r2,-48(fp)
   1a63c:	e0bffa15 	stw	r2,-24(fp)
   1a640:	e0bffa17 	ldw	r2,-24(fp)
   1a644:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a648:	00000906 	br	1a670 <OSFlagAccept+0x2f4>
   1a64c:	e0bff417 	ldw	r2,-48(fp)
   1a650:	e0bffb15 	stw	r2,-20(fp)
   1a654:	e0bffb17 	ldw	r2,-20(fp)
   1a658:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1a65c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1a660:	e0bfff17 	ldw	r2,-4(fp)
   1a664:	00c01bc4 	movi	r3,111
   1a668:	10c00005 	stb	r3,0(r2)
             break;
   1a66c:	0001883a 	nop
    }
    return (flags_rdy);
   1a670:	e0bff30b 	ldhu	r2,-52(fp)
}
   1a674:	e037883a 	mov	sp,fp
   1a678:	df000017 	ldw	fp,0(sp)
   1a67c:	dec00104 	addi	sp,sp,4
   1a680:	f800283a 	ret

0001a684 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1a684:	defff804 	addi	sp,sp,-32
   1a688:	df000715 	stw	fp,28(sp)
   1a68c:	df000704 	addi	fp,sp,28
   1a690:	2005883a 	mov	r2,r4
   1a694:	e17fff15 	stw	r5,-4(fp)
   1a698:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1a69c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1a6a0:	e0bfff17 	ldw	r2,-4(fp)
   1a6a4:	1000021e 	bne	r2,zero,1a6b0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1a6a8:	0005883a 	mov	r2,zero
   1a6ac:	00003b06 	br	1a79c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1a6b0:	00800174 	movhi	r2,5
   1a6b4:	108f9004 	addi	r2,r2,15936
   1a6b8:	10800003 	ldbu	r2,0(r2)
   1a6bc:	10803fcc 	andi	r2,r2,255
   1a6c0:	10000526 	beq	r2,zero,1a6d8 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1a6c4:	e0bfff17 	ldw	r2,-4(fp)
   1a6c8:	00c00404 	movi	r3,16
   1a6cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1a6d0:	0005883a 	mov	r2,zero
   1a6d4:	00003106 	br	1a79c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a6d8:	0005303a 	rdctl	r2,status
   1a6dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a6e0:	e0fffb17 	ldw	r3,-20(fp)
   1a6e4:	00bfff84 	movi	r2,-2
   1a6e8:	1884703a 	and	r2,r3,r2
   1a6ec:	1001703a 	wrctl	status,r2
  
  return context;
   1a6f0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a6f4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1a6f8:	00800174 	movhi	r2,5
   1a6fc:	108f9304 	addi	r2,r2,15948
   1a700:	10800017 	ldw	r2,0(r2)
   1a704:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1a708:	e0bffa17 	ldw	r2,-24(fp)
   1a70c:	10001b26 	beq	r2,zero,1a77c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1a710:	00800174 	movhi	r2,5
   1a714:	108f9304 	addi	r2,r2,15948
   1a718:	10800017 	ldw	r2,0(r2)
   1a71c:	10c00117 	ldw	r3,4(r2)
   1a720:	00800174 	movhi	r2,5
   1a724:	108f9304 	addi	r2,r2,15948
   1a728:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1a72c:	e0bffa17 	ldw	r2,-24(fp)
   1a730:	00c00144 	movi	r3,5
   1a734:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1a738:	e0bffa17 	ldw	r2,-24(fp)
   1a73c:	e0fffe0b 	ldhu	r3,-8(fp)
   1a740:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1a744:	e0bffa17 	ldw	r2,-24(fp)
   1a748:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1a74c:	e0bffa17 	ldw	r2,-24(fp)
   1a750:	00c00fc4 	movi	r3,63
   1a754:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a758:	e0bffa17 	ldw	r2,-24(fp)
   1a75c:	100002c5 	stb	zero,11(r2)
   1a760:	e0bff917 	ldw	r2,-28(fp)
   1a764:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a768:	e0bffc17 	ldw	r2,-16(fp)
   1a76c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1a770:	e0bfff17 	ldw	r2,-4(fp)
   1a774:	10000005 	stb	zero,0(r2)
   1a778:	00000706 	br	1a798 <OSFlagCreate+0x114>
   1a77c:	e0bff917 	ldw	r2,-28(fp)
   1a780:	e0bffd15 	stw	r2,-12(fp)
   1a784:	e0bffd17 	ldw	r2,-12(fp)
   1a788:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1a78c:	e0bfff17 	ldw	r2,-4(fp)
   1a790:	00c01c84 	movi	r3,114
   1a794:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1a798:	e0bffa17 	ldw	r2,-24(fp)
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	df000017 	ldw	fp,0(sp)
   1a7a4:	dec00104 	addi	sp,sp,4
   1a7a8:	f800283a 	ret

0001a7ac <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1a7ac:	defff204 	addi	sp,sp,-56
   1a7b0:	dfc00d15 	stw	ra,52(sp)
   1a7b4:	df000c15 	stw	fp,48(sp)
   1a7b8:	df000c04 	addi	fp,sp,48
   1a7bc:	e13ffd15 	stw	r4,-12(fp)
   1a7c0:	2805883a 	mov	r2,r5
   1a7c4:	e1bfff15 	stw	r6,-4(fp)
   1a7c8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1a7cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a7d0:	e0bfff17 	ldw	r2,-4(fp)
   1a7d4:	1000021e 	bne	r2,zero,1a7e0 <OSFlagDel+0x34>
        return (pgrp);
   1a7d8:	e0bffd17 	ldw	r2,-12(fp)
   1a7dc:	00008a06 	br	1aa08 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1a7e0:	e0bffd17 	ldw	r2,-12(fp)
   1a7e4:	1000051e 	bne	r2,zero,1a7fc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a7e8:	e0bfff17 	ldw	r2,-4(fp)
   1a7ec:	00c01b84 	movi	r3,110
   1a7f0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a7f4:	e0bffd17 	ldw	r2,-12(fp)
   1a7f8:	00008306 	br	1aa08 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a7fc:	00800174 	movhi	r2,5
   1a800:	108f9004 	addi	r2,r2,15936
   1a804:	10800003 	ldbu	r2,0(r2)
   1a808:	10803fcc 	andi	r2,r2,255
   1a80c:	10000526 	beq	r2,zero,1a824 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1a810:	e0bfff17 	ldw	r2,-4(fp)
   1a814:	00c003c4 	movi	r3,15
   1a818:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a81c:	e0bffd17 	ldw	r2,-12(fp)
   1a820:	00007906 	br	1aa08 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1a824:	e0bffd17 	ldw	r2,-12(fp)
   1a828:	10800003 	ldbu	r2,0(r2)
   1a82c:	10803fcc 	andi	r2,r2,255
   1a830:	10800160 	cmpeqi	r2,r2,5
   1a834:	1000051e 	bne	r2,zero,1a84c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   1a838:	e0bfff17 	ldw	r2,-4(fp)
   1a83c:	00c00044 	movi	r3,1
   1a840:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a844:	e0bffd17 	ldw	r2,-12(fp)
   1a848:	00006f06 	br	1aa08 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a84c:	0005303a 	rdctl	r2,status
   1a850:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a854:	e0fff817 	ldw	r3,-32(fp)
   1a858:	00bfff84 	movi	r2,-2
   1a85c:	1884703a 	and	r2,r3,r2
   1a860:	1001703a 	wrctl	status,r2
  
  return context;
   1a864:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1a868:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1a86c:	e0bffd17 	ldw	r2,-12(fp)
   1a870:	10800117 	ldw	r2,4(r2)
   1a874:	10000326 	beq	r2,zero,1a884 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1a878:	00800044 	movi	r2,1
   1a87c:	e0bff405 	stb	r2,-48(fp)
   1a880:	00000106 	br	1a888 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1a884:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1a888:	e0bffe03 	ldbu	r2,-8(fp)
   1a88c:	10000326 	beq	r2,zero,1a89c <OSFlagDel+0xf0>
   1a890:	10800060 	cmpeqi	r2,r2,1
   1a894:	1000271e 	bne	r2,zero,1a934 <OSFlagDel+0x188>
   1a898:	00005006 	br	1a9dc <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1a89c:	e0bff403 	ldbu	r2,-48(fp)
   1a8a0:	10001a1e 	bne	r2,zero,1a90c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1a8a4:	e0bffd17 	ldw	r2,-12(fp)
   1a8a8:	00c00fc4 	movi	r3,63
   1a8ac:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a8b0:	e0bffd17 	ldw	r2,-12(fp)
   1a8b4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1a8b8:	e0bffd17 	ldw	r2,-12(fp)
   1a8bc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1a8c0:	00800174 	movhi	r2,5
   1a8c4:	108f9304 	addi	r2,r2,15948
   1a8c8:	10c00017 	ldw	r3,0(r2)
   1a8cc:	e0bffd17 	ldw	r2,-12(fp)
   1a8d0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1a8d4:	e0bffd17 	ldw	r2,-12(fp)
   1a8d8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1a8dc:	00800174 	movhi	r2,5
   1a8e0:	108f9304 	addi	r2,r2,15948
   1a8e4:	e0fffd17 	ldw	r3,-12(fp)
   1a8e8:	10c00015 	stw	r3,0(r2)
   1a8ec:	e0bff717 	ldw	r2,-36(fp)
   1a8f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8f4:	e0bff917 	ldw	r2,-28(fp)
   1a8f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1a8fc:	e0bfff17 	ldw	r2,-4(fp)
   1a900:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1a904:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1a908:	00003e06 	br	1aa04 <OSFlagDel+0x258>
   1a90c:	e0bff717 	ldw	r2,-36(fp)
   1a910:	e0bffa15 	stw	r2,-24(fp)
   1a914:	e0bffa17 	ldw	r2,-24(fp)
   1a918:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1a91c:	e0bfff17 	ldw	r2,-4(fp)
   1a920:	00c01244 	movi	r3,73
   1a924:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1a928:	e0bffd17 	ldw	r2,-12(fp)
   1a92c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1a930:	00003406 	br	1aa04 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1a934:	e0bffd17 	ldw	r2,-12(fp)
   1a938:	10800117 	ldw	r2,4(r2)
   1a93c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1a940:	00000606 	br	1a95c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1a944:	e13ff517 	ldw	r4,-44(fp)
   1a948:	000b883a 	mov	r5,zero
   1a94c:	001b9e80 	call	1b9e8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1a950:	e0bff517 	ldw	r2,-44(fp)
   1a954:	10800017 	ldw	r2,0(r2)
   1a958:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1a95c:	e0bff517 	ldw	r2,-44(fp)
   1a960:	103ff81e 	bne	r2,zero,1a944 <__alt_mem_descriptor_memory+0xdefda944>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1a964:	e0bffd17 	ldw	r2,-12(fp)
   1a968:	00c00fc4 	movi	r3,63
   1a96c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a970:	e0bffd17 	ldw	r2,-12(fp)
   1a974:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1a978:	e0bffd17 	ldw	r2,-12(fp)
   1a97c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1a980:	00800174 	movhi	r2,5
   1a984:	108f9304 	addi	r2,r2,15948
   1a988:	10c00017 	ldw	r3,0(r2)
   1a98c:	e0bffd17 	ldw	r2,-12(fp)
   1a990:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1a994:	e0bffd17 	ldw	r2,-12(fp)
   1a998:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1a99c:	00800174 	movhi	r2,5
   1a9a0:	108f9304 	addi	r2,r2,15948
   1a9a4:	e0fffd17 	ldw	r3,-12(fp)
   1a9a8:	10c00015 	stw	r3,0(r2)
   1a9ac:	e0bff717 	ldw	r2,-36(fp)
   1a9b0:	e0bffb15 	stw	r2,-20(fp)
   1a9b4:	e0bffb17 	ldw	r2,-20(fp)
   1a9b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1a9bc:	e0bff403 	ldbu	r2,-48(fp)
   1a9c0:	10800058 	cmpnei	r2,r2,1
   1a9c4:	1000011e 	bne	r2,zero,1a9cc <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1a9c8:	0019b280 	call	19b28 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1a9cc:	e0bfff17 	ldw	r2,-4(fp)
   1a9d0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1a9d4:	e03ff615 	stw	zero,-40(fp)
             break;
   1a9d8:	00000a06 	br	1aa04 <OSFlagDel+0x258>
   1a9dc:	e0bff717 	ldw	r2,-36(fp)
   1a9e0:	e0bffc15 	stw	r2,-16(fp)
   1a9e4:	e0bffc17 	ldw	r2,-16(fp)
   1a9e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1a9ec:	e0bfff17 	ldw	r2,-4(fp)
   1a9f0:	00c001c4 	movi	r3,7
   1a9f4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1a9f8:	e0bffd17 	ldw	r2,-12(fp)
   1a9fc:	e0bff615 	stw	r2,-40(fp)
             break;
   1aa00:	0001883a 	nop
    }
    return (pgrp_return);
   1aa04:	e0bff617 	ldw	r2,-40(fp)
}
   1aa08:	e037883a 	mov	sp,fp
   1aa0c:	dfc00117 	ldw	ra,4(sp)
   1aa10:	df000017 	ldw	fp,0(sp)
   1aa14:	dec00204 	addi	sp,sp,8
   1aa18:	f800283a 	ret

0001aa1c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1aa1c:	defff604 	addi	sp,sp,-40
   1aa20:	dfc00915 	stw	ra,36(sp)
   1aa24:	df000815 	stw	fp,32(sp)
   1aa28:	df000804 	addi	fp,sp,32
   1aa2c:	e13ffd15 	stw	r4,-12(fp)
   1aa30:	e17ffe15 	stw	r5,-8(fp)
   1aa34:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aa38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1aa3c:	e0bfff17 	ldw	r2,-4(fp)
   1aa40:	1000021e 	bne	r2,zero,1aa4c <OSFlagNameGet+0x30>
        return (0);
   1aa44:	0005883a 	mov	r2,zero
   1aa48:	00003b06 	br	1ab38 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1aa4c:	e0bffd17 	ldw	r2,-12(fp)
   1aa50:	1000051e 	bne	r2,zero,1aa68 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1aa54:	e0bfff17 	ldw	r2,-4(fp)
   1aa58:	00c01b84 	movi	r3,110
   1aa5c:	10c00005 	stb	r3,0(r2)
        return (0);
   1aa60:	0005883a 	mov	r2,zero
   1aa64:	00003406 	br	1ab38 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1aa68:	e0bffe17 	ldw	r2,-8(fp)
   1aa6c:	1000051e 	bne	r2,zero,1aa84 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1aa70:	e0bfff17 	ldw	r2,-4(fp)
   1aa74:	00c00304 	movi	r3,12
   1aa78:	10c00005 	stb	r3,0(r2)
        return (0);
   1aa7c:	0005883a 	mov	r2,zero
   1aa80:	00002d06 	br	1ab38 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1aa84:	00800174 	movhi	r2,5
   1aa88:	108f9004 	addi	r2,r2,15936
   1aa8c:	10800003 	ldbu	r2,0(r2)
   1aa90:	10803fcc 	andi	r2,r2,255
   1aa94:	10000526 	beq	r2,zero,1aaac <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1aa98:	e0bfff17 	ldw	r2,-4(fp)
   1aa9c:	00c00444 	movi	r3,17
   1aaa0:	10c00005 	stb	r3,0(r2)
        return (0);
   1aaa4:	0005883a 	mov	r2,zero
   1aaa8:	00002306 	br	1ab38 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aaac:	0005303a 	rdctl	r2,status
   1aab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aab4:	e0fffa17 	ldw	r3,-24(fp)
   1aab8:	00bfff84 	movi	r2,-2
   1aabc:	1884703a 	and	r2,r3,r2
   1aac0:	1001703a 	wrctl	status,r2
  
  return context;
   1aac4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1aac8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1aacc:	e0bffd17 	ldw	r2,-12(fp)
   1aad0:	10800003 	ldbu	r2,0(r2)
   1aad4:	10803fcc 	andi	r2,r2,255
   1aad8:	10800160 	cmpeqi	r2,r2,5
   1aadc:	1000091e 	bne	r2,zero,1ab04 <OSFlagNameGet+0xe8>
   1aae0:	e0bff817 	ldw	r2,-32(fp)
   1aae4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aae8:	e0bffb17 	ldw	r2,-20(fp)
   1aaec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1aaf0:	e0bfff17 	ldw	r2,-4(fp)
   1aaf4:	00c00044 	movi	r3,1
   1aaf8:	10c00005 	stb	r3,0(r2)
        return (0);
   1aafc:	0005883a 	mov	r2,zero
   1ab00:	00000d06 	br	1ab38 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1ab04:	e0bffd17 	ldw	r2,-12(fp)
   1ab08:	10800284 	addi	r2,r2,10
   1ab0c:	e13ffe17 	ldw	r4,-8(fp)
   1ab10:	100b883a 	mov	r5,r2
   1ab14:	0019c640 	call	19c64 <OS_StrCopy>
   1ab18:	e0bff905 	stb	r2,-28(fp)
   1ab1c:	e0bff817 	ldw	r2,-32(fp)
   1ab20:	e0bffc15 	stw	r2,-16(fp)
   1ab24:	e0bffc17 	ldw	r2,-16(fp)
   1ab28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ab2c:	e0bfff17 	ldw	r2,-4(fp)
   1ab30:	10000005 	stb	zero,0(r2)
    return (len);
   1ab34:	e0bff903 	ldbu	r2,-28(fp)
}
   1ab38:	e037883a 	mov	sp,fp
   1ab3c:	dfc00117 	ldw	ra,4(sp)
   1ab40:	df000017 	ldw	fp,0(sp)
   1ab44:	dec00204 	addi	sp,sp,8
   1ab48:	f800283a 	ret

0001ab4c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1ab4c:	defff504 	addi	sp,sp,-44
   1ab50:	dfc00a15 	stw	ra,40(sp)
   1ab54:	df000915 	stw	fp,36(sp)
   1ab58:	df000904 	addi	fp,sp,36
   1ab5c:	e13ffd15 	stw	r4,-12(fp)
   1ab60:	e17ffe15 	stw	r5,-8(fp)
   1ab64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ab68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1ab6c:	e0bfff17 	ldw	r2,-4(fp)
   1ab70:	1000011e 	bne	r2,zero,1ab78 <OSFlagNameSet+0x2c>
        return;
   1ab74:	00004406 	br	1ac88 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1ab78:	e0bffd17 	ldw	r2,-12(fp)
   1ab7c:	1000041e 	bne	r2,zero,1ab90 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1ab80:	e0bfff17 	ldw	r2,-4(fp)
   1ab84:	00c01b84 	movi	r3,110
   1ab88:	10c00005 	stb	r3,0(r2)
        return;
   1ab8c:	00003e06 	br	1ac88 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1ab90:	e0bffe17 	ldw	r2,-8(fp)
   1ab94:	1000041e 	bne	r2,zero,1aba8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1ab98:	e0bfff17 	ldw	r2,-4(fp)
   1ab9c:	00c00304 	movi	r3,12
   1aba0:	10c00005 	stb	r3,0(r2)
        return;
   1aba4:	00003806 	br	1ac88 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1aba8:	00800174 	movhi	r2,5
   1abac:	108f9004 	addi	r2,r2,15936
   1abb0:	10800003 	ldbu	r2,0(r2)
   1abb4:	10803fcc 	andi	r2,r2,255
   1abb8:	10000426 	beq	r2,zero,1abcc <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1abbc:	e0bfff17 	ldw	r2,-4(fp)
   1abc0:	00c00484 	movi	r3,18
   1abc4:	10c00005 	stb	r3,0(r2)
        return;
   1abc8:	00002f06 	br	1ac88 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1abcc:	0005303a 	rdctl	r2,status
   1abd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1abd4:	e0fff917 	ldw	r3,-28(fp)
   1abd8:	00bfff84 	movi	r2,-2
   1abdc:	1884703a 	and	r2,r3,r2
   1abe0:	1001703a 	wrctl	status,r2
  
  return context;
   1abe4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1abe8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1abec:	e0bffd17 	ldw	r2,-12(fp)
   1abf0:	10800003 	ldbu	r2,0(r2)
   1abf4:	10803fcc 	andi	r2,r2,255
   1abf8:	10800160 	cmpeqi	r2,r2,5
   1abfc:	1000081e 	bne	r2,zero,1ac20 <OSFlagNameSet+0xd4>
   1ac00:	e0bff717 	ldw	r2,-36(fp)
   1ac04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac08:	e0bffa17 	ldw	r2,-24(fp)
   1ac0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1ac10:	e0bfff17 	ldw	r2,-4(fp)
   1ac14:	00c00044 	movi	r3,1
   1ac18:	10c00005 	stb	r3,0(r2)
        return;
   1ac1c:	00001a06 	br	1ac88 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1ac20:	e13ffe17 	ldw	r4,-8(fp)
   1ac24:	0019cd80 	call	19cd8 <OS_StrLen>
   1ac28:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1ac2c:	e0bff803 	ldbu	r2,-32(fp)
   1ac30:	10800830 	cmpltui	r2,r2,32
   1ac34:	1000081e 	bne	r2,zero,1ac58 <OSFlagNameSet+0x10c>
   1ac38:	e0bff717 	ldw	r2,-36(fp)
   1ac3c:	e0bffb15 	stw	r2,-20(fp)
   1ac40:	e0bffb17 	ldw	r2,-20(fp)
   1ac44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1ac48:	e0bfff17 	ldw	r2,-4(fp)
   1ac4c:	00c01cc4 	movi	r3,115
   1ac50:	10c00005 	stb	r3,0(r2)
        return;
   1ac54:	00000c06 	br	1ac88 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1ac58:	e0bffd17 	ldw	r2,-12(fp)
   1ac5c:	10800284 	addi	r2,r2,10
   1ac60:	1009883a 	mov	r4,r2
   1ac64:	e17ffe17 	ldw	r5,-8(fp)
   1ac68:	0019c640 	call	19c64 <OS_StrCopy>
   1ac6c:	e0bff717 	ldw	r2,-36(fp)
   1ac70:	e0bffc15 	stw	r2,-16(fp)
   1ac74:	e0bffc17 	ldw	r2,-16(fp)
   1ac78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ac7c:	e0bfff17 	ldw	r2,-4(fp)
   1ac80:	10000005 	stb	zero,0(r2)
    return;
   1ac84:	0001883a 	nop
}
   1ac88:	e037883a 	mov	sp,fp
   1ac8c:	dfc00117 	ldw	ra,4(sp)
   1ac90:	df000017 	ldw	fp,0(sp)
   1ac94:	dec00204 	addi	sp,sp,8
   1ac98:	f800283a 	ret

0001ac9c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1ac9c:	deffe204 	addi	sp,sp,-120
   1aca0:	dfc01d15 	stw	ra,116(sp)
   1aca4:	df001c15 	stw	fp,112(sp)
   1aca8:	df001c04 	addi	fp,sp,112
   1acac:	e13ffc15 	stw	r4,-16(fp)
   1acb0:	2809883a 	mov	r4,r5
   1acb4:	3007883a 	mov	r3,r6
   1acb8:	3805883a 	mov	r2,r7
   1acbc:	e13ffd0d 	sth	r4,-12(fp)
   1acc0:	e0fffe05 	stb	r3,-8(fp)
   1acc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1acc8:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1accc:	e0800217 	ldw	r2,8(fp)
   1acd0:	1000021e 	bne	r2,zero,1acdc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1acd4:	0005883a 	mov	r2,zero
   1acd8:	00016706 	br	1b278 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1acdc:	e0bffc17 	ldw	r2,-16(fp)
   1ace0:	1000051e 	bne	r2,zero,1acf8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1ace4:	e0800217 	ldw	r2,8(fp)
   1ace8:	00c01b84 	movi	r3,110
   1acec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1acf0:	0005883a 	mov	r2,zero
   1acf4:	00016006 	br	1b278 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1acf8:	00800174 	movhi	r2,5
   1acfc:	108f9004 	addi	r2,r2,15936
   1ad00:	10800003 	ldbu	r2,0(r2)
   1ad04:	10803fcc 	andi	r2,r2,255
   1ad08:	10000526 	beq	r2,zero,1ad20 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1ad0c:	e0800217 	ldw	r2,8(fp)
   1ad10:	00c00084 	movi	r3,2
   1ad14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1ad18:	0005883a 	mov	r2,zero
   1ad1c:	00015606 	br	1b278 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1ad20:	00800174 	movhi	r2,5
   1ad24:	108f8204 	addi	r2,r2,15880
   1ad28:	10800003 	ldbu	r2,0(r2)
   1ad2c:	10803fcc 	andi	r2,r2,255
   1ad30:	10000526 	beq	r2,zero,1ad48 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1ad34:	e0800217 	ldw	r2,8(fp)
   1ad38:	00c00344 	movi	r3,13
   1ad3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1ad40:	0005883a 	mov	r2,zero
   1ad44:	00014c06 	br	1b278 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1ad48:	e0bffc17 	ldw	r2,-16(fp)
   1ad4c:	10800003 	ldbu	r2,0(r2)
   1ad50:	10803fcc 	andi	r2,r2,255
   1ad54:	10800160 	cmpeqi	r2,r2,5
   1ad58:	1000051e 	bne	r2,zero,1ad70 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   1ad5c:	e0800217 	ldw	r2,8(fp)
   1ad60:	00c00044 	movi	r3,1
   1ad64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1ad68:	0005883a 	mov	r2,zero
   1ad6c:	00014206 	br	1b278 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1ad70:	e0fffe03 	ldbu	r3,-8(fp)
   1ad74:	00bfe004 	movi	r2,-128
   1ad78:	1884703a 	and	r2,r3,r2
   1ad7c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1ad80:	e0bfe703 	ldbu	r2,-100(fp)
   1ad84:	10000626 	beq	r2,zero,1ada0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1ad88:	e0bffe03 	ldbu	r2,-8(fp)
   1ad8c:	10801fcc 	andi	r2,r2,127
   1ad90:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1ad94:	00800044 	movi	r2,1
   1ad98:	e0bfe505 	stb	r2,-108(fp)
   1ad9c:	00000106 	br	1ada4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   1ada0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ada4:	0005303a 	rdctl	r2,status
   1ada8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1adac:	e0ffe917 	ldw	r3,-92(fp)
   1adb0:	00bfff84 	movi	r2,-2
   1adb4:	1884703a 	and	r2,r3,r2
   1adb8:	1001703a 	wrctl	status,r2
  
  return context;
   1adbc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1adc0:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   1adc4:	e0bffe03 	ldbu	r2,-8(fp)
   1adc8:	10c00060 	cmpeqi	r3,r2,1
   1adcc:	1800921e 	bne	r3,zero,1b018 <OSFlagPend+0x37c>
   1add0:	10c00088 	cmpgei	r3,r2,2
   1add4:	1800021e 	bne	r3,zero,1ade0 <OSFlagPend+0x144>
   1add8:	10006126 	beq	r2,zero,1af60 <OSFlagPend+0x2c4>
   1addc:	0000bb06 	br	1b0cc <OSFlagPend+0x430>
   1ade0:	10c000a0 	cmpeqi	r3,r2,2
   1ade4:	1800031e 	bne	r3,zero,1adf4 <OSFlagPend+0x158>
   1ade8:	108000e0 	cmpeqi	r2,r2,3
   1adec:	10002f1e 	bne	r2,zero,1aeac <OSFlagPend+0x210>
   1adf0:	0000b606 	br	1b0cc <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1adf4:	e0bffc17 	ldw	r2,-16(fp)
   1adf8:	10c0020b 	ldhu	r3,8(r2)
   1adfc:	e0bffd0b 	ldhu	r2,-12(fp)
   1ae00:	1884703a 	and	r2,r3,r2
   1ae04:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1ae08:	e0ffe78b 	ldhu	r3,-98(fp)
   1ae0c:	e0bffd0b 	ldhu	r2,-12(fp)
   1ae10:	1880191e 	bne	r3,r2,1ae78 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1ae14:	e0bfe503 	ldbu	r2,-108(fp)
   1ae18:	10800058 	cmpnei	r2,r2,1
   1ae1c:	1000091e 	bne	r2,zero,1ae44 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1ae20:	e0bffc17 	ldw	r2,-16(fp)
   1ae24:	1080020b 	ldhu	r2,8(r2)
   1ae28:	1007883a 	mov	r3,r2
   1ae2c:	e0bfe78b 	ldhu	r2,-98(fp)
   1ae30:	0084303a 	nor	r2,zero,r2
   1ae34:	1884703a 	and	r2,r3,r2
   1ae38:	1007883a 	mov	r3,r2
   1ae3c:	e0bffc17 	ldw	r2,-16(fp)
   1ae40:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ae44:	00800174 	movhi	r2,5
   1ae48:	108f9104 	addi	r2,r2,15940
   1ae4c:	10800017 	ldw	r2,0(r2)
   1ae50:	e0ffe78b 	ldhu	r3,-98(fp)
   1ae54:	10c00b0d 	sth	r3,44(r2)
   1ae58:	e0bfe617 	ldw	r2,-104(fp)
   1ae5c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ae60:	e0bfea17 	ldw	r2,-88(fp)
   1ae64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ae68:	e0800217 	ldw	r2,8(fp)
   1ae6c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ae70:	e0bfe78b 	ldhu	r2,-98(fp)
   1ae74:	00010006 	br	1b278 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ae78:	e1bffd0b 	ldhu	r6,-12(fp)
   1ae7c:	e0fffe03 	ldbu	r3,-8(fp)
   1ae80:	e0bfff0b 	ldhu	r2,-4(fp)
   1ae84:	e17ff704 	addi	r5,fp,-36
   1ae88:	d8800015 	stw	r2,0(sp)
   1ae8c:	e13ffc17 	ldw	r4,-16(fp)
   1ae90:	180f883a 	mov	r7,r3
   1ae94:	001b7400 	call	1b740 <OS_FlagBlock>
   1ae98:	e0bfe617 	ldw	r2,-104(fp)
   1ae9c:	e0bfeb15 	stw	r2,-84(fp)
   1aea0:	e0bfeb17 	ldw	r2,-84(fp)
   1aea4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1aea8:	00009206 	br	1b0f4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1aeac:	e0bffc17 	ldw	r2,-16(fp)
   1aeb0:	10c0020b 	ldhu	r3,8(r2)
   1aeb4:	e0bffd0b 	ldhu	r2,-12(fp)
   1aeb8:	1884703a 	and	r2,r3,r2
   1aebc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1aec0:	e0bfe78b 	ldhu	r2,-98(fp)
   1aec4:	10001926 	beq	r2,zero,1af2c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1aec8:	e0bfe503 	ldbu	r2,-108(fp)
   1aecc:	10800058 	cmpnei	r2,r2,1
   1aed0:	1000091e 	bne	r2,zero,1aef8 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1aed4:	e0bffc17 	ldw	r2,-16(fp)
   1aed8:	1080020b 	ldhu	r2,8(r2)
   1aedc:	1007883a 	mov	r3,r2
   1aee0:	e0bfe78b 	ldhu	r2,-98(fp)
   1aee4:	0084303a 	nor	r2,zero,r2
   1aee8:	1884703a 	and	r2,r3,r2
   1aeec:	1007883a 	mov	r3,r2
   1aef0:	e0bffc17 	ldw	r2,-16(fp)
   1aef4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1aef8:	00800174 	movhi	r2,5
   1aefc:	108f9104 	addi	r2,r2,15940
   1af00:	10800017 	ldw	r2,0(r2)
   1af04:	e0ffe78b 	ldhu	r3,-98(fp)
   1af08:	10c00b0d 	sth	r3,44(r2)
   1af0c:	e0bfe617 	ldw	r2,-104(fp)
   1af10:	e0bfec15 	stw	r2,-80(fp)
   1af14:	e0bfec17 	ldw	r2,-80(fp)
   1af18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1af1c:	e0800217 	ldw	r2,8(fp)
   1af20:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1af24:	e0bfe78b 	ldhu	r2,-98(fp)
   1af28:	0000d306 	br	1b278 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1af2c:	e1bffd0b 	ldhu	r6,-12(fp)
   1af30:	e0fffe03 	ldbu	r3,-8(fp)
   1af34:	e0bfff0b 	ldhu	r2,-4(fp)
   1af38:	e17ff704 	addi	r5,fp,-36
   1af3c:	d8800015 	stw	r2,0(sp)
   1af40:	e13ffc17 	ldw	r4,-16(fp)
   1af44:	180f883a 	mov	r7,r3
   1af48:	001b7400 	call	1b740 <OS_FlagBlock>
   1af4c:	e0bfe617 	ldw	r2,-104(fp)
   1af50:	e0bfed15 	stw	r2,-76(fp)
   1af54:	e0bfed17 	ldw	r2,-76(fp)
   1af58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1af5c:	00006506 	br	1b0f4 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1af60:	e0bffc17 	ldw	r2,-16(fp)
   1af64:	1080020b 	ldhu	r2,8(r2)
   1af68:	0084303a 	nor	r2,zero,r2
   1af6c:	1007883a 	mov	r3,r2
   1af70:	e0bffd0b 	ldhu	r2,-12(fp)
   1af74:	1884703a 	and	r2,r3,r2
   1af78:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1af7c:	e0ffe78b 	ldhu	r3,-98(fp)
   1af80:	e0bffd0b 	ldhu	r2,-12(fp)
   1af84:	1880171e 	bne	r3,r2,1afe4 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1af88:	e0bfe503 	ldbu	r2,-108(fp)
   1af8c:	10800058 	cmpnei	r2,r2,1
   1af90:	1000071e 	bne	r2,zero,1afb0 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1af94:	e0bffc17 	ldw	r2,-16(fp)
   1af98:	10c0020b 	ldhu	r3,8(r2)
   1af9c:	e0bfe78b 	ldhu	r2,-98(fp)
   1afa0:	1884b03a 	or	r2,r3,r2
   1afa4:	1007883a 	mov	r3,r2
   1afa8:	e0bffc17 	ldw	r2,-16(fp)
   1afac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1afb0:	00800174 	movhi	r2,5
   1afb4:	108f9104 	addi	r2,r2,15940
   1afb8:	10800017 	ldw	r2,0(r2)
   1afbc:	e0ffe78b 	ldhu	r3,-98(fp)
   1afc0:	10c00b0d 	sth	r3,44(r2)
   1afc4:	e0bfe617 	ldw	r2,-104(fp)
   1afc8:	e0bfee15 	stw	r2,-72(fp)
   1afcc:	e0bfee17 	ldw	r2,-72(fp)
   1afd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1afd4:	e0800217 	ldw	r2,8(fp)
   1afd8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1afdc:	e0bfe78b 	ldhu	r2,-98(fp)
   1afe0:	0000a506 	br	1b278 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1afe4:	e1bffd0b 	ldhu	r6,-12(fp)
   1afe8:	e0fffe03 	ldbu	r3,-8(fp)
   1afec:	e0bfff0b 	ldhu	r2,-4(fp)
   1aff0:	e17ff704 	addi	r5,fp,-36
   1aff4:	d8800015 	stw	r2,0(sp)
   1aff8:	e13ffc17 	ldw	r4,-16(fp)
   1affc:	180f883a 	mov	r7,r3
   1b000:	001b7400 	call	1b740 <OS_FlagBlock>
   1b004:	e0bfe617 	ldw	r2,-104(fp)
   1b008:	e0bfef15 	stw	r2,-68(fp)
   1b00c:	e0bfef17 	ldw	r2,-68(fp)
   1b010:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1b014:	00003706 	br	1b0f4 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1b018:	e0bffc17 	ldw	r2,-16(fp)
   1b01c:	1080020b 	ldhu	r2,8(r2)
   1b020:	0084303a 	nor	r2,zero,r2
   1b024:	1007883a 	mov	r3,r2
   1b028:	e0bffd0b 	ldhu	r2,-12(fp)
   1b02c:	1884703a 	and	r2,r3,r2
   1b030:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1b034:	e0bfe78b 	ldhu	r2,-98(fp)
   1b038:	10001726 	beq	r2,zero,1b098 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1b03c:	e0bfe503 	ldbu	r2,-108(fp)
   1b040:	10800058 	cmpnei	r2,r2,1
   1b044:	1000071e 	bne	r2,zero,1b064 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1b048:	e0bffc17 	ldw	r2,-16(fp)
   1b04c:	10c0020b 	ldhu	r3,8(r2)
   1b050:	e0bfe78b 	ldhu	r2,-98(fp)
   1b054:	1884b03a 	or	r2,r3,r2
   1b058:	1007883a 	mov	r3,r2
   1b05c:	e0bffc17 	ldw	r2,-16(fp)
   1b060:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1b064:	00800174 	movhi	r2,5
   1b068:	108f9104 	addi	r2,r2,15940
   1b06c:	10800017 	ldw	r2,0(r2)
   1b070:	e0ffe78b 	ldhu	r3,-98(fp)
   1b074:	10c00b0d 	sth	r3,44(r2)
   1b078:	e0bfe617 	ldw	r2,-104(fp)
   1b07c:	e0bff015 	stw	r2,-64(fp)
   1b080:	e0bff017 	ldw	r2,-64(fp)
   1b084:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1b088:	e0800217 	ldw	r2,8(fp)
   1b08c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1b090:	e0bfe78b 	ldhu	r2,-98(fp)
   1b094:	00007806 	br	1b278 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1b098:	e1bffd0b 	ldhu	r6,-12(fp)
   1b09c:	e0fffe03 	ldbu	r3,-8(fp)
   1b0a0:	e0bfff0b 	ldhu	r2,-4(fp)
   1b0a4:	e17ff704 	addi	r5,fp,-36
   1b0a8:	d8800015 	stw	r2,0(sp)
   1b0ac:	e13ffc17 	ldw	r4,-16(fp)
   1b0b0:	180f883a 	mov	r7,r3
   1b0b4:	001b7400 	call	1b740 <OS_FlagBlock>
   1b0b8:	e0bfe617 	ldw	r2,-104(fp)
   1b0bc:	e0bff115 	stw	r2,-60(fp)
   1b0c0:	e0bff117 	ldw	r2,-60(fp)
   1b0c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1b0c8:	00000a06 	br	1b0f4 <OSFlagPend+0x458>
   1b0cc:	e0bfe617 	ldw	r2,-104(fp)
   1b0d0:	e0bff215 	stw	r2,-56(fp)
   1b0d4:	e0bff217 	ldw	r2,-56(fp)
   1b0d8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1b0dc:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1b0e0:	e0800217 	ldw	r2,8(fp)
   1b0e4:	00c01bc4 	movi	r3,111
   1b0e8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1b0ec:	e0bfe78b 	ldhu	r2,-98(fp)
   1b0f0:	00006106 	br	1b278 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   1b0f4:	0019b280 	call	19b28 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b0f8:	0005303a 	rdctl	r2,status
   1b0fc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b100:	e0fff317 	ldw	r3,-52(fp)
   1b104:	00bfff84 	movi	r2,-2
   1b108:	1884703a 	and	r2,r3,r2
   1b10c:	1001703a 	wrctl	status,r2
  
  return context;
   1b110:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   1b114:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1b118:	00800174 	movhi	r2,5
   1b11c:	108f9104 	addi	r2,r2,15940
   1b120:	10800017 	ldw	r2,0(r2)
   1b124:	10800c43 	ldbu	r2,49(r2)
   1b128:	10803fcc 	andi	r2,r2,255
   1b12c:	10002226 	beq	r2,zero,1b1b8 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1b130:	00800174 	movhi	r2,5
   1b134:	108f9104 	addi	r2,r2,15940
   1b138:	10800017 	ldw	r2,0(r2)
   1b13c:	10800c43 	ldbu	r2,49(r2)
   1b140:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1b144:	00800174 	movhi	r2,5
   1b148:	108f9104 	addi	r2,r2,15940
   1b14c:	10800017 	ldw	r2,0(r2)
   1b150:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1b154:	e0bff704 	addi	r2,fp,-36
   1b158:	1009883a 	mov	r4,r2
   1b15c:	001baf80 	call	1baf8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1b160:	00800174 	movhi	r2,5
   1b164:	108f9104 	addi	r2,r2,15940
   1b168:	10800017 	ldw	r2,0(r2)
   1b16c:	10000c05 	stb	zero,48(r2)
   1b170:	e0bfe617 	ldw	r2,-104(fp)
   1b174:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b178:	e0bff417 	ldw	r2,-48(fp)
   1b17c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1b180:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   1b184:	e0bfe803 	ldbu	r2,-96(fp)
   1b188:	108000a0 	cmpeqi	r2,r2,2
   1b18c:	10000426 	beq	r2,zero,1b1a0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1b190:	e0800217 	ldw	r2,8(fp)
   1b194:	00c00384 	movi	r3,14
   1b198:	10c00005 	stb	r3,0(r2)
                 break;
   1b19c:	00000406 	br	1b1b0 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1b1a0:	e0800217 	ldw	r2,8(fp)
   1b1a4:	00c00284 	movi	r3,10
   1b1a8:	10c00005 	stb	r3,0(r2)
                 break;
   1b1ac:	0001883a 	nop
        }
        return (flags_rdy);
   1b1b0:	e0bfe78b 	ldhu	r2,-98(fp)
   1b1b4:	00003006 	br	1b278 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1b1b8:	00800174 	movhi	r2,5
   1b1bc:	108f9104 	addi	r2,r2,15940
   1b1c0:	10800017 	ldw	r2,0(r2)
   1b1c4:	10800b0b 	ldhu	r2,44(r2)
   1b1c8:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1b1cc:	e0bfe503 	ldbu	r2,-108(fp)
   1b1d0:	10800058 	cmpnei	r2,r2,1
   1b1d4:	1000211e 	bne	r2,zero,1b25c <OSFlagPend+0x5c0>
        switch (wait_type) {
   1b1d8:	e0bffe03 	ldbu	r2,-8(fp)
   1b1dc:	10001616 	blt	r2,zero,1b238 <OSFlagPend+0x59c>
   1b1e0:	10c00090 	cmplti	r3,r2,2
   1b1e4:	18000c1e 	bne	r3,zero,1b218 <OSFlagPend+0x57c>
   1b1e8:	10800108 	cmpgei	r2,r2,4
   1b1ec:	1000121e 	bne	r2,zero,1b238 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1b1f0:	e0bffc17 	ldw	r2,-16(fp)
   1b1f4:	1080020b 	ldhu	r2,8(r2)
   1b1f8:	1007883a 	mov	r3,r2
   1b1fc:	e0bfe78b 	ldhu	r2,-98(fp)
   1b200:	0084303a 	nor	r2,zero,r2
   1b204:	1884703a 	and	r2,r3,r2
   1b208:	1007883a 	mov	r3,r2
   1b20c:	e0bffc17 	ldw	r2,-16(fp)
   1b210:	10c0020d 	sth	r3,8(r2)
                 break;
   1b214:	00001106 	br	1b25c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1b218:	e0bffc17 	ldw	r2,-16(fp)
   1b21c:	10c0020b 	ldhu	r3,8(r2)
   1b220:	e0bfe78b 	ldhu	r2,-98(fp)
   1b224:	1884b03a 	or	r2,r3,r2
   1b228:	1007883a 	mov	r3,r2
   1b22c:	e0bffc17 	ldw	r2,-16(fp)
   1b230:	10c0020d 	sth	r3,8(r2)
                 break;
   1b234:	00000906 	br	1b25c <OSFlagPend+0x5c0>
   1b238:	e0bfe617 	ldw	r2,-104(fp)
   1b23c:	e0bff515 	stw	r2,-44(fp)
   1b240:	e0bff517 	ldw	r2,-44(fp)
   1b244:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1b248:	e0800217 	ldw	r2,8(fp)
   1b24c:	00c01bc4 	movi	r3,111
   1b250:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1b254:	0005883a 	mov	r2,zero
   1b258:	00000706 	br	1b278 <OSFlagPend+0x5dc>
   1b25c:	e0bfe617 	ldw	r2,-104(fp)
   1b260:	e0bff615 	stw	r2,-40(fp)
   1b264:	e0bff617 	ldw	r2,-40(fp)
   1b268:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1b26c:	e0800217 	ldw	r2,8(fp)
   1b270:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1b274:	e0bfe78b 	ldhu	r2,-98(fp)
}
   1b278:	e037883a 	mov	sp,fp
   1b27c:	dfc00117 	ldw	ra,4(sp)
   1b280:	df000017 	ldw	fp,0(sp)
   1b284:	dec00204 	addi	sp,sp,8
   1b288:	f800283a 	ret

0001b28c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1b28c:	defffb04 	addi	sp,sp,-20
   1b290:	df000415 	stw	fp,16(sp)
   1b294:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1b298:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b29c:	0005303a 	rdctl	r2,status
   1b2a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2a4:	e0fffe17 	ldw	r3,-8(fp)
   1b2a8:	00bfff84 	movi	r2,-2
   1b2ac:	1884703a 	and	r2,r3,r2
   1b2b0:	1001703a 	wrctl	status,r2
  
  return context;
   1b2b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1b2b8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1b2bc:	00800174 	movhi	r2,5
   1b2c0:	108f9104 	addi	r2,r2,15940
   1b2c4:	10800017 	ldw	r2,0(r2)
   1b2c8:	10800b0b 	ldhu	r2,44(r2)
   1b2cc:	e0bffd0d 	sth	r2,-12(fp)
   1b2d0:	e0bffc17 	ldw	r2,-16(fp)
   1b2d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2d8:	e0bfff17 	ldw	r2,-4(fp)
   1b2dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1b2e0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1b2e4:	e037883a 	mov	sp,fp
   1b2e8:	df000017 	ldw	fp,0(sp)
   1b2ec:	dec00104 	addi	sp,sp,4
   1b2f0:	f800283a 	ret

0001b2f4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1b2f4:	deffef04 	addi	sp,sp,-68
   1b2f8:	dfc01015 	stw	ra,64(sp)
   1b2fc:	df000f15 	stw	fp,60(sp)
   1b300:	df000f04 	addi	fp,sp,60
   1b304:	e13ffc15 	stw	r4,-16(fp)
   1b308:	2807883a 	mov	r3,r5
   1b30c:	3005883a 	mov	r2,r6
   1b310:	e1ffff15 	stw	r7,-4(fp)
   1b314:	e0fffd0d 	sth	r3,-12(fp)
   1b318:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1b31c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1b320:	e0bfff17 	ldw	r2,-4(fp)
   1b324:	1000021e 	bne	r2,zero,1b330 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1b328:	0005883a 	mov	r2,zero
   1b32c:	0000ce06 	br	1b668 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1b330:	e0bffc17 	ldw	r2,-16(fp)
   1b334:	1000051e 	bne	r2,zero,1b34c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1b338:	e0bfff17 	ldw	r2,-4(fp)
   1b33c:	00c01b84 	movi	r3,110
   1b340:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b344:	0005883a 	mov	r2,zero
   1b348:	0000c706 	br	1b668 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1b34c:	e0bffc17 	ldw	r2,-16(fp)
   1b350:	10800003 	ldbu	r2,0(r2)
   1b354:	10803fcc 	andi	r2,r2,255
   1b358:	10800160 	cmpeqi	r2,r2,5
   1b35c:	1000051e 	bne	r2,zero,1b374 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1b360:	e0bfff17 	ldw	r2,-4(fp)
   1b364:	00c00044 	movi	r3,1
   1b368:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b36c:	0005883a 	mov	r2,zero
   1b370:	0000bd06 	br	1b668 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b374:	0005303a 	rdctl	r2,status
   1b378:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b37c:	e0fff617 	ldw	r3,-40(fp)
   1b380:	00bfff84 	movi	r2,-2
   1b384:	1884703a 	and	r2,r3,r2
   1b388:	1001703a 	wrctl	status,r2
  
  return context;
   1b38c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1b390:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1b394:	e0bffe03 	ldbu	r2,-8(fp)
   1b398:	10000326 	beq	r2,zero,1b3a8 <OSFlagPost+0xb4>
   1b39c:	10800060 	cmpeqi	r2,r2,1
   1b3a0:	10000b1e 	bne	r2,zero,1b3d0 <OSFlagPost+0xdc>
   1b3a4:	00001206 	br	1b3f0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1b3a8:	e0bffc17 	ldw	r2,-16(fp)
   1b3ac:	1080020b 	ldhu	r2,8(r2)
   1b3b0:	1007883a 	mov	r3,r2
   1b3b4:	e0bffd0b 	ldhu	r2,-12(fp)
   1b3b8:	0084303a 	nor	r2,zero,r2
   1b3bc:	1884703a 	and	r2,r3,r2
   1b3c0:	1007883a 	mov	r3,r2
   1b3c4:	e0bffc17 	ldw	r2,-16(fp)
   1b3c8:	10c0020d 	sth	r3,8(r2)
             break;
   1b3cc:	00001106 	br	1b414 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1b3d0:	e0bffc17 	ldw	r2,-16(fp)
   1b3d4:	10c0020b 	ldhu	r3,8(r2)
   1b3d8:	e0bffd0b 	ldhu	r2,-12(fp)
   1b3dc:	1884b03a 	or	r2,r3,r2
   1b3e0:	1007883a 	mov	r3,r2
   1b3e4:	e0bffc17 	ldw	r2,-16(fp)
   1b3e8:	10c0020d 	sth	r3,8(r2)
             break;
   1b3ec:	00000906 	br	1b414 <OSFlagPost+0x120>
   1b3f0:	e0bff317 	ldw	r2,-52(fp)
   1b3f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3f8:	e0bff717 	ldw	r2,-36(fp)
   1b3fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1b400:	e0bfff17 	ldw	r2,-4(fp)
   1b404:	00c01c44 	movi	r3,113
   1b408:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1b40c:	0005883a 	mov	r2,zero
   1b410:	00009506 	br	1b668 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1b414:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1b418:	e0bffc17 	ldw	r2,-16(fp)
   1b41c:	10800117 	ldw	r2,4(r2)
   1b420:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1b424:	00007406 	br	1b5f8 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   1b428:	e0bff117 	ldw	r2,-60(fp)
   1b42c:	10800483 	ldbu	r2,18(r2)
   1b430:	10803fcc 	andi	r2,r2,255
   1b434:	10c00060 	cmpeqi	r3,r2,1
   1b438:	18004d1e 	bne	r3,zero,1b570 <OSFlagPost+0x27c>
   1b43c:	10c00088 	cmpgei	r3,r2,2
   1b440:	1800021e 	bne	r3,zero,1b44c <OSFlagPost+0x158>
   1b444:	10003126 	beq	r2,zero,1b50c <OSFlagPost+0x218>
   1b448:	00005f06 	br	1b5c8 <OSFlagPost+0x2d4>
   1b44c:	10c000a0 	cmpeqi	r3,r2,2
   1b450:	1800031e 	bne	r3,zero,1b460 <OSFlagPost+0x16c>
   1b454:	108000e0 	cmpeqi	r2,r2,3
   1b458:	1000181e 	bne	r2,zero,1b4bc <OSFlagPost+0x1c8>
   1b45c:	00005a06 	br	1b5c8 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b460:	e0bffc17 	ldw	r2,-16(fp)
   1b464:	10c0020b 	ldhu	r3,8(r2)
   1b468:	e0bff117 	ldw	r2,-60(fp)
   1b46c:	1080040b 	ldhu	r2,16(r2)
   1b470:	1884703a 	and	r2,r3,r2
   1b474:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1b478:	e0bff117 	ldw	r2,-60(fp)
   1b47c:	1080040b 	ldhu	r2,16(r2)
   1b480:	10ffffcc 	andi	r3,r2,65535
   1b484:	e0bff40b 	ldhu	r2,-48(fp)
   1b488:	18800b1e 	bne	r3,r2,1b4b8 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b48c:	e0bff40b 	ldhu	r2,-48(fp)
   1b490:	e13ff117 	ldw	r4,-60(fp)
   1b494:	100b883a 	mov	r5,r2
   1b498:	001b9e80 	call	1b9e8 <OS_FlagTaskRdy>
   1b49c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1b4a0:	e0bff483 	ldbu	r2,-46(fp)
   1b4a4:	10800058 	cmpnei	r2,r2,1
   1b4a8:	1000031e 	bne	r2,zero,1b4b8 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b4ac:	00800044 	movi	r2,1
   1b4b0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b4b4:	00004d06 	br	1b5ec <OSFlagPost+0x2f8>
   1b4b8:	00004c06 	br	1b5ec <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b4bc:	e0bffc17 	ldw	r2,-16(fp)
   1b4c0:	10c0020b 	ldhu	r3,8(r2)
   1b4c4:	e0bff117 	ldw	r2,-60(fp)
   1b4c8:	1080040b 	ldhu	r2,16(r2)
   1b4cc:	1884703a 	and	r2,r3,r2
   1b4d0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1b4d4:	e0bff40b 	ldhu	r2,-48(fp)
   1b4d8:	10000b26 	beq	r2,zero,1b508 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b4dc:	e0bff40b 	ldhu	r2,-48(fp)
   1b4e0:	e13ff117 	ldw	r4,-60(fp)
   1b4e4:	100b883a 	mov	r5,r2
   1b4e8:	001b9e80 	call	1b9e8 <OS_FlagTaskRdy>
   1b4ec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1b4f0:	e0bff483 	ldbu	r2,-46(fp)
   1b4f4:	10800058 	cmpnei	r2,r2,1
   1b4f8:	1000031e 	bne	r2,zero,1b508 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b4fc:	00800044 	movi	r2,1
   1b500:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b504:	00003906 	br	1b5ec <OSFlagPost+0x2f8>
   1b508:	00003806 	br	1b5ec <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b50c:	e0bffc17 	ldw	r2,-16(fp)
   1b510:	1080020b 	ldhu	r2,8(r2)
   1b514:	0084303a 	nor	r2,zero,r2
   1b518:	1007883a 	mov	r3,r2
   1b51c:	e0bff117 	ldw	r2,-60(fp)
   1b520:	1080040b 	ldhu	r2,16(r2)
   1b524:	1884703a 	and	r2,r3,r2
   1b528:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1b52c:	e0bff117 	ldw	r2,-60(fp)
   1b530:	1080040b 	ldhu	r2,16(r2)
   1b534:	10ffffcc 	andi	r3,r2,65535
   1b538:	e0bff40b 	ldhu	r2,-48(fp)
   1b53c:	18800b1e 	bne	r3,r2,1b56c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b540:	e0bff40b 	ldhu	r2,-48(fp)
   1b544:	e13ff117 	ldw	r4,-60(fp)
   1b548:	100b883a 	mov	r5,r2
   1b54c:	001b9e80 	call	1b9e8 <OS_FlagTaskRdy>
   1b550:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1b554:	e0bff483 	ldbu	r2,-46(fp)
   1b558:	10800058 	cmpnei	r2,r2,1
   1b55c:	1000031e 	bne	r2,zero,1b56c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b560:	00800044 	movi	r2,1
   1b564:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b568:	00002006 	br	1b5ec <OSFlagPost+0x2f8>
   1b56c:	00001f06 	br	1b5ec <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b570:	e0bffc17 	ldw	r2,-16(fp)
   1b574:	1080020b 	ldhu	r2,8(r2)
   1b578:	0084303a 	nor	r2,zero,r2
   1b57c:	1007883a 	mov	r3,r2
   1b580:	e0bff117 	ldw	r2,-60(fp)
   1b584:	1080040b 	ldhu	r2,16(r2)
   1b588:	1884703a 	and	r2,r3,r2
   1b58c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1b590:	e0bff40b 	ldhu	r2,-48(fp)
   1b594:	10000b26 	beq	r2,zero,1b5c4 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b598:	e0bff40b 	ldhu	r2,-48(fp)
   1b59c:	e13ff117 	ldw	r4,-60(fp)
   1b5a0:	100b883a 	mov	r5,r2
   1b5a4:	001b9e80 	call	1b9e8 <OS_FlagTaskRdy>
   1b5a8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1b5ac:	e0bff483 	ldbu	r2,-46(fp)
   1b5b0:	10800058 	cmpnei	r2,r2,1
   1b5b4:	1000031e 	bne	r2,zero,1b5c4 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b5b8:	00800044 	movi	r2,1
   1b5bc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b5c0:	00000a06 	br	1b5ec <OSFlagPost+0x2f8>
   1b5c4:	00000906 	br	1b5ec <OSFlagPost+0x2f8>
   1b5c8:	e0bff317 	ldw	r2,-52(fp)
   1b5cc:	e0bff815 	stw	r2,-32(fp)
   1b5d0:	e0bff817 	ldw	r2,-32(fp)
   1b5d4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1b5d8:	e0bfff17 	ldw	r2,-4(fp)
   1b5dc:	00c01bc4 	movi	r3,111
   1b5e0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1b5e4:	0005883a 	mov	r2,zero
   1b5e8:	00001f06 	br	1b668 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1b5ec:	e0bff117 	ldw	r2,-60(fp)
   1b5f0:	10800017 	ldw	r2,0(r2)
   1b5f4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1b5f8:	e0bff117 	ldw	r2,-60(fp)
   1b5fc:	103f8a1e 	bne	r2,zero,1b428 <__alt_mem_descriptor_memory+0xdefdb428>
   1b600:	e0bff317 	ldw	r2,-52(fp)
   1b604:	e0bff915 	stw	r2,-28(fp)
   1b608:	e0bff917 	ldw	r2,-28(fp)
   1b60c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1b610:	e0bff203 	ldbu	r2,-56(fp)
   1b614:	10800058 	cmpnei	r2,r2,1
   1b618:	1000011e 	bne	r2,zero,1b620 <OSFlagPost+0x32c>
        OS_Sched();
   1b61c:	0019b280 	call	19b28 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b620:	0005303a 	rdctl	r2,status
   1b624:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b628:	e0fffa17 	ldw	r3,-24(fp)
   1b62c:	00bfff84 	movi	r2,-2
   1b630:	1884703a 	and	r2,r3,r2
   1b634:	1001703a 	wrctl	status,r2
  
  return context;
   1b638:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1b63c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1b640:	e0bffc17 	ldw	r2,-16(fp)
   1b644:	1080020b 	ldhu	r2,8(r2)
   1b648:	e0bff50d 	sth	r2,-44(fp)
   1b64c:	e0bff317 	ldw	r2,-52(fp)
   1b650:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b654:	e0bffb17 	ldw	r2,-20(fp)
   1b658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1b65c:	e0bfff17 	ldw	r2,-4(fp)
   1b660:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1b664:	e0bff50b 	ldhu	r2,-44(fp)
}
   1b668:	e037883a 	mov	sp,fp
   1b66c:	dfc00117 	ldw	ra,4(sp)
   1b670:	df000017 	ldw	fp,0(sp)
   1b674:	dec00204 	addi	sp,sp,8
   1b678:	f800283a 	ret

0001b67c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1b67c:	defff904 	addi	sp,sp,-28
   1b680:	df000615 	stw	fp,24(sp)
   1b684:	df000604 	addi	fp,sp,24
   1b688:	e13ffe15 	stw	r4,-8(fp)
   1b68c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1b690:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1b694:	e0bfff17 	ldw	r2,-4(fp)
   1b698:	1000021e 	bne	r2,zero,1b6a4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1b69c:	0005883a 	mov	r2,zero
   1b6a0:	00002306 	br	1b730 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1b6a4:	e0bffe17 	ldw	r2,-8(fp)
   1b6a8:	1000051e 	bne	r2,zero,1b6c0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1b6ac:	e0bfff17 	ldw	r2,-4(fp)
   1b6b0:	00c01b84 	movi	r3,110
   1b6b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b6b8:	0005883a 	mov	r2,zero
   1b6bc:	00001c06 	br	1b730 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1b6c0:	e0bffe17 	ldw	r2,-8(fp)
   1b6c4:	10800003 	ldbu	r2,0(r2)
   1b6c8:	10803fcc 	andi	r2,r2,255
   1b6cc:	10800160 	cmpeqi	r2,r2,5
   1b6d0:	1000051e 	bne	r2,zero,1b6e8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1b6d4:	e0bfff17 	ldw	r2,-4(fp)
   1b6d8:	00c00044 	movi	r3,1
   1b6dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b6e0:	0005883a 	mov	r2,zero
   1b6e4:	00001206 	br	1b730 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6e8:	0005303a 	rdctl	r2,status
   1b6ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6f0:	e0fffc17 	ldw	r3,-16(fp)
   1b6f4:	00bfff84 	movi	r2,-2
   1b6f8:	1884703a 	and	r2,r3,r2
   1b6fc:	1001703a 	wrctl	status,r2
  
  return context;
   1b700:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1b704:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1b708:	e0bffe17 	ldw	r2,-8(fp)
   1b70c:	1080020b 	ldhu	r2,8(r2)
   1b710:	e0bffb0d 	sth	r2,-20(fp)
   1b714:	e0bffa17 	ldw	r2,-24(fp)
   1b718:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b71c:	e0bffd17 	ldw	r2,-12(fp)
   1b720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b724:	e0bfff17 	ldw	r2,-4(fp)
   1b728:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1b72c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1b730:	e037883a 	mov	sp,fp
   1b734:	df000017 	ldw	fp,0(sp)
   1b738:	dec00104 	addi	sp,sp,4
   1b73c:	f800283a 	ret

0001b740 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1b740:	defff804 	addi	sp,sp,-32
   1b744:	df000715 	stw	fp,28(sp)
   1b748:	df000704 	addi	fp,sp,28
   1b74c:	e13ffb15 	stw	r4,-20(fp)
   1b750:	e17ffc15 	stw	r5,-16(fp)
   1b754:	3009883a 	mov	r4,r6
   1b758:	3807883a 	mov	r3,r7
   1b75c:	e0800117 	ldw	r2,4(fp)
   1b760:	e13ffd0d 	sth	r4,-12(fp)
   1b764:	e0fffe05 	stb	r3,-8(fp)
   1b768:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1b76c:	00800174 	movhi	r2,5
   1b770:	108f9104 	addi	r2,r2,15940
   1b774:	10c00017 	ldw	r3,0(r2)
   1b778:	00800174 	movhi	r2,5
   1b77c:	108f9104 	addi	r2,r2,15940
   1b780:	10800017 	ldw	r2,0(r2)
   1b784:	10800c03 	ldbu	r2,48(r2)
   1b788:	10800814 	ori	r2,r2,32
   1b78c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1b790:	00800174 	movhi	r2,5
   1b794:	108f9104 	addi	r2,r2,15940
   1b798:	10800017 	ldw	r2,0(r2)
   1b79c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1b7a0:	00800174 	movhi	r2,5
   1b7a4:	108f9104 	addi	r2,r2,15940
   1b7a8:	10800017 	ldw	r2,0(r2)
   1b7ac:	e0ffff0b 	ldhu	r3,-4(fp)
   1b7b0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1b7b4:	00800174 	movhi	r2,5
   1b7b8:	108f9104 	addi	r2,r2,15940
   1b7bc:	10800017 	ldw	r2,0(r2)
   1b7c0:	e0fffc17 	ldw	r3,-16(fp)
   1b7c4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1b7c8:	e0bffc17 	ldw	r2,-16(fp)
   1b7cc:	e0fffd0b 	ldhu	r3,-12(fp)
   1b7d0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1b7d4:	e0bffc17 	ldw	r2,-16(fp)
   1b7d8:	e0fffe03 	ldbu	r3,-8(fp)
   1b7dc:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1b7e0:	00800174 	movhi	r2,5
   1b7e4:	108f9104 	addi	r2,r2,15940
   1b7e8:	10c00017 	ldw	r3,0(r2)
   1b7ec:	e0bffc17 	ldw	r2,-16(fp)
   1b7f0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1b7f4:	e0bffb17 	ldw	r2,-20(fp)
   1b7f8:	10c00117 	ldw	r3,4(r2)
   1b7fc:	e0bffc17 	ldw	r2,-16(fp)
   1b800:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1b804:	e0bffc17 	ldw	r2,-16(fp)
   1b808:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1b80c:	e0bffc17 	ldw	r2,-16(fp)
   1b810:	e0fffb17 	ldw	r3,-20(fp)
   1b814:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1b818:	e0bffb17 	ldw	r2,-20(fp)
   1b81c:	10800117 	ldw	r2,4(r2)
   1b820:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1b824:	e0bff917 	ldw	r2,-28(fp)
   1b828:	10000326 	beq	r2,zero,1b838 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1b82c:	e0bff917 	ldw	r2,-28(fp)
   1b830:	e0fffc17 	ldw	r3,-16(fp)
   1b834:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1b838:	e0bffb17 	ldw	r2,-20(fp)
   1b83c:	e0fffc17 	ldw	r3,-16(fp)
   1b840:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1b844:	00800174 	movhi	r2,5
   1b848:	108f9104 	addi	r2,r2,15940
   1b84c:	10800017 	ldw	r2,0(r2)
   1b850:	10800d03 	ldbu	r2,52(r2)
   1b854:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1b858:	e0fffa03 	ldbu	r3,-24(fp)
   1b85c:	e13ffa03 	ldbu	r4,-24(fp)
   1b860:	00800174 	movhi	r2,5
   1b864:	108f8e44 	addi	r2,r2,15929
   1b868:	1105883a 	add	r2,r2,r4
   1b86c:	10800003 	ldbu	r2,0(r2)
   1b870:	1009883a 	mov	r4,r2
   1b874:	00800174 	movhi	r2,5
   1b878:	108f9104 	addi	r2,r2,15940
   1b87c:	10800017 	ldw	r2,0(r2)
   1b880:	10800d43 	ldbu	r2,53(r2)
   1b884:	0084303a 	nor	r2,zero,r2
   1b888:	2084703a 	and	r2,r4,r2
   1b88c:	1009883a 	mov	r4,r2
   1b890:	00800174 	movhi	r2,5
   1b894:	108f8e44 	addi	r2,r2,15929
   1b898:	10c5883a 	add	r2,r2,r3
   1b89c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1b8a0:	e0fffa03 	ldbu	r3,-24(fp)
   1b8a4:	00800174 	movhi	r2,5
   1b8a8:	108f8e44 	addi	r2,r2,15929
   1b8ac:	10c5883a 	add	r2,r2,r3
   1b8b0:	10800003 	ldbu	r2,0(r2)
   1b8b4:	10803fcc 	andi	r2,r2,255
   1b8b8:	10000e1e 	bne	r2,zero,1b8f4 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1b8bc:	00800174 	movhi	r2,5
   1b8c0:	108f9104 	addi	r2,r2,15940
   1b8c4:	10800017 	ldw	r2,0(r2)
   1b8c8:	10800d83 	ldbu	r2,54(r2)
   1b8cc:	0084303a 	nor	r2,zero,r2
   1b8d0:	1007883a 	mov	r3,r2
   1b8d4:	00800174 	movhi	r2,5
   1b8d8:	108f8e04 	addi	r2,r2,15928
   1b8dc:	10800003 	ldbu	r2,0(r2)
   1b8e0:	1884703a 	and	r2,r3,r2
   1b8e4:	1007883a 	mov	r3,r2
   1b8e8:	00800174 	movhi	r2,5
   1b8ec:	108f8e04 	addi	r2,r2,15928
   1b8f0:	10c00005 	stb	r3,0(r2)
    }
}
   1b8f4:	e037883a 	mov	sp,fp
   1b8f8:	df000017 	ldw	fp,0(sp)
   1b8fc:	dec00104 	addi	sp,sp,4
   1b900:	f800283a 	ret

0001b904 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1b904:	defffb04 	addi	sp,sp,-20
   1b908:	dfc00415 	stw	ra,16(sp)
   1b90c:	df000315 	stw	fp,12(sp)
   1b910:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1b914:	010001b4 	movhi	r4,6
   1b918:	2129bd04 	addi	r4,r4,-22796
   1b91c:	0140dc04 	movi	r5,880
   1b920:	0019a740 	call	19a74 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1b924:	008001b4 	movhi	r2,6
   1b928:	10a9bd04 	addi	r2,r2,-22796
   1b92c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1b930:	008001b4 	movhi	r2,6
   1b934:	10a9c804 	addi	r2,r2,-22752
   1b938:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1b93c:	e03ffd0d 	sth	zero,-12(fp)
   1b940:	00001306 	br	1b990 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1b944:	e0bffe17 	ldw	r2,-8(fp)
   1b948:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1b94c:	e0bffe17 	ldw	r2,-8(fp)
   1b950:	e0ffff17 	ldw	r3,-4(fp)
   1b954:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1b958:	e0bffe17 	ldw	r2,-8(fp)
   1b95c:	00c00fc4 	movi	r3,63
   1b960:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1b964:	e0bffe17 	ldw	r2,-8(fp)
   1b968:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1b96c:	e0bffe17 	ldw	r2,-8(fp)
   1b970:	10800b04 	addi	r2,r2,44
   1b974:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1b978:	e0bfff17 	ldw	r2,-4(fp)
   1b97c:	10800b04 	addi	r2,r2,44
   1b980:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1b984:	e0bffd0b 	ldhu	r2,-12(fp)
   1b988:	10800044 	addi	r2,r2,1
   1b98c:	e0bffd0d 	sth	r2,-12(fp)
   1b990:	e0bffd0b 	ldhu	r2,-12(fp)
   1b994:	108004f0 	cmpltui	r2,r2,19
   1b998:	103fea1e 	bne	r2,zero,1b944 <__alt_mem_descriptor_memory+0xdefdb944>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1b99c:	e0bffe17 	ldw	r2,-8(fp)
   1b9a0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1b9a4:	e0bffe17 	ldw	r2,-8(fp)
   1b9a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1b9ac:	e0bffe17 	ldw	r2,-8(fp)
   1b9b0:	00c00fc4 	movi	r3,63
   1b9b4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1b9b8:	e0bffe17 	ldw	r2,-8(fp)
   1b9bc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1b9c0:	00800174 	movhi	r2,5
   1b9c4:	108f9304 	addi	r2,r2,15948
   1b9c8:	00c001b4 	movhi	r3,6
   1b9cc:	18e9bd04 	addi	r3,r3,-22796
   1b9d0:	10c00015 	stw	r3,0(r2)
#endif
}
   1b9d4:	e037883a 	mov	sp,fp
   1b9d8:	dfc00117 	ldw	ra,4(sp)
   1b9dc:	df000017 	ldw	fp,0(sp)
   1b9e0:	dec00204 	addi	sp,sp,8
   1b9e4:	f800283a 	ret

0001b9e8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1b9e8:	defffa04 	addi	sp,sp,-24
   1b9ec:	dfc00515 	stw	ra,20(sp)
   1b9f0:	df000415 	stw	fp,16(sp)
   1b9f4:	df000404 	addi	fp,sp,16
   1b9f8:	e13ffe15 	stw	r4,-8(fp)
   1b9fc:	2805883a 	mov	r2,r5
   1ba00:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1ba04:	e0bffe17 	ldw	r2,-8(fp)
   1ba08:	10800217 	ldw	r2,8(r2)
   1ba0c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1ba10:	e0bffd17 	ldw	r2,-12(fp)
   1ba14:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1ba18:	e0bffd17 	ldw	r2,-12(fp)
   1ba1c:	e0ffff0b 	ldhu	r3,-4(fp)
   1ba20:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1ba24:	e0bffd17 	ldw	r2,-12(fp)
   1ba28:	10c00c03 	ldbu	r3,48(r2)
   1ba2c:	00bff7c4 	movi	r2,-33
   1ba30:	1884703a 	and	r2,r3,r2
   1ba34:	1007883a 	mov	r3,r2
   1ba38:	e0bffd17 	ldw	r2,-12(fp)
   1ba3c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1ba40:	e0bffd17 	ldw	r2,-12(fp)
   1ba44:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1ba48:	e0bffd17 	ldw	r2,-12(fp)
   1ba4c:	10800c03 	ldbu	r2,48(r2)
   1ba50:	10803fcc 	andi	r2,r2,255
   1ba54:	10001f1e 	bne	r2,zero,1bad4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1ba58:	e0bffd17 	ldw	r2,-12(fp)
   1ba5c:	10c00d83 	ldbu	r3,54(r2)
   1ba60:	00800174 	movhi	r2,5
   1ba64:	108f8e04 	addi	r2,r2,15928
   1ba68:	10800003 	ldbu	r2,0(r2)
   1ba6c:	1884b03a 	or	r2,r3,r2
   1ba70:	1007883a 	mov	r3,r2
   1ba74:	00800174 	movhi	r2,5
   1ba78:	108f8e04 	addi	r2,r2,15928
   1ba7c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1ba80:	e0bffd17 	ldw	r2,-12(fp)
   1ba84:	10800d03 	ldbu	r2,52(r2)
   1ba88:	10c03fcc 	andi	r3,r2,255
   1ba8c:	e0bffd17 	ldw	r2,-12(fp)
   1ba90:	10800d03 	ldbu	r2,52(r2)
   1ba94:	11003fcc 	andi	r4,r2,255
   1ba98:	00800174 	movhi	r2,5
   1ba9c:	108f8e44 	addi	r2,r2,15929
   1baa0:	1105883a 	add	r2,r2,r4
   1baa4:	11000003 	ldbu	r4,0(r2)
   1baa8:	e0bffd17 	ldw	r2,-12(fp)
   1baac:	10800d43 	ldbu	r2,53(r2)
   1bab0:	2084b03a 	or	r2,r4,r2
   1bab4:	1009883a 	mov	r4,r2
   1bab8:	00800174 	movhi	r2,5
   1babc:	108f8e44 	addi	r2,r2,15929
   1bac0:	10c5883a 	add	r2,r2,r3
   1bac4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1bac8:	00800044 	movi	r2,1
   1bacc:	e0bffc05 	stb	r2,-16(fp)
   1bad0:	00000106 	br	1bad8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   1bad4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1bad8:	e13ffe17 	ldw	r4,-8(fp)
   1badc:	001baf80 	call	1baf8 <OS_FlagUnlink>
    return (sched);
   1bae0:	e0bffc03 	ldbu	r2,-16(fp)
}
   1bae4:	e037883a 	mov	sp,fp
   1bae8:	dfc00117 	ldw	ra,4(sp)
   1baec:	df000017 	ldw	fp,0(sp)
   1baf0:	dec00204 	addi	sp,sp,8
   1baf4:	f800283a 	ret

0001baf8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1baf8:	defffa04 	addi	sp,sp,-24
   1bafc:	df000515 	stw	fp,20(sp)
   1bb00:	df000504 	addi	fp,sp,20
   1bb04:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1bb08:	e0bfff17 	ldw	r2,-4(fp)
   1bb0c:	10800117 	ldw	r2,4(r2)
   1bb10:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1bb14:	e0bfff17 	ldw	r2,-4(fp)
   1bb18:	10800017 	ldw	r2,0(r2)
   1bb1c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1bb20:	e0bffb17 	ldw	r2,-20(fp)
   1bb24:	10000b1e 	bne	r2,zero,1bb54 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1bb28:	e0bfff17 	ldw	r2,-4(fp)
   1bb2c:	10800317 	ldw	r2,12(r2)
   1bb30:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1bb34:	e0bffd17 	ldw	r2,-12(fp)
   1bb38:	e0fffc17 	ldw	r3,-16(fp)
   1bb3c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1bb40:	e0bffc17 	ldw	r2,-16(fp)
   1bb44:	10000b26 	beq	r2,zero,1bb74 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1bb48:	e0bffc17 	ldw	r2,-16(fp)
   1bb4c:	10000115 	stw	zero,4(r2)
   1bb50:	00000806 	br	1bb74 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1bb54:	e0bffb17 	ldw	r2,-20(fp)
   1bb58:	e0fffc17 	ldw	r3,-16(fp)
   1bb5c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1bb60:	e0bffc17 	ldw	r2,-16(fp)
   1bb64:	10000326 	beq	r2,zero,1bb74 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1bb68:	e0bffc17 	ldw	r2,-16(fp)
   1bb6c:	e0fffb17 	ldw	r3,-20(fp)
   1bb70:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1bb74:	e0bfff17 	ldw	r2,-4(fp)
   1bb78:	10800217 	ldw	r2,8(r2)
   1bb7c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1bb80:	e0bffe17 	ldw	r2,-8(fp)
   1bb84:	10000a15 	stw	zero,40(r2)
#endif
}
   1bb88:	e037883a 	mov	sp,fp
   1bb8c:	df000017 	ldw	fp,0(sp)
   1bb90:	dec00104 	addi	sp,sp,4
   1bb94:	f800283a 	ret

0001bb98 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1bb98:	defff404 	addi	sp,sp,-48
   1bb9c:	df000b15 	stw	fp,44(sp)
   1bba0:	df000b04 	addi	fp,sp,44
   1bba4:	e13ffc15 	stw	r4,-16(fp)
   1bba8:	e17ffd15 	stw	r5,-12(fp)
   1bbac:	e1bffe15 	stw	r6,-8(fp)
   1bbb0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1bbb4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1bbb8:	e0bfff17 	ldw	r2,-4(fp)
   1bbbc:	1000021e 	bne	r2,zero,1bbc8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1bbc0:	0005883a 	mov	r2,zero
   1bbc4:	00006d06 	br	1bd7c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1bbc8:	e0bffc17 	ldw	r2,-16(fp)
   1bbcc:	1000051e 	bne	r2,zero,1bbe4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1bbd0:	e0bfff17 	ldw	r2,-4(fp)
   1bbd4:	00c01884 	movi	r3,98
   1bbd8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1bbdc:	0005883a 	mov	r2,zero
   1bbe0:	00006606 	br	1bd7c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1bbe4:	e0bffc17 	ldw	r2,-16(fp)
   1bbe8:	108000cc 	andi	r2,r2,3
   1bbec:	10000526 	beq	r2,zero,1bc04 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1bbf0:	e0bfff17 	ldw	r2,-4(fp)
   1bbf4:	00c01884 	movi	r3,98
   1bbf8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1bbfc:	0005883a 	mov	r2,zero
   1bc00:	00005e06 	br	1bd7c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1bc04:	e0bffd17 	ldw	r2,-12(fp)
   1bc08:	108000a8 	cmpgeui	r2,r2,2
   1bc0c:	1000051e 	bne	r2,zero,1bc24 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1bc10:	e0bfff17 	ldw	r2,-4(fp)
   1bc14:	00c016c4 	movi	r3,91
   1bc18:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1bc1c:	0005883a 	mov	r2,zero
   1bc20:	00005606 	br	1bd7c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1bc24:	e0bffe17 	ldw	r2,-8(fp)
   1bc28:	10800128 	cmpgeui	r2,r2,4
   1bc2c:	1000051e 	bne	r2,zero,1bc44 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1bc30:	e0bfff17 	ldw	r2,-4(fp)
   1bc34:	00c01704 	movi	r3,92
   1bc38:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1bc3c:	0005883a 	mov	r2,zero
   1bc40:	00004e06 	br	1bd7c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc44:	0005303a 	rdctl	r2,status
   1bc48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc4c:	e0fffa17 	ldw	r3,-24(fp)
   1bc50:	00bfff84 	movi	r2,-2
   1bc54:	1884703a 	and	r2,r3,r2
   1bc58:	1001703a 	wrctl	status,r2
  
  return context;
   1bc5c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1bc60:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1bc64:	00800174 	movhi	r2,5
   1bc68:	108f8b04 	addi	r2,r2,15916
   1bc6c:	10800017 	ldw	r2,0(r2)
   1bc70:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1bc74:	00800174 	movhi	r2,5
   1bc78:	108f8b04 	addi	r2,r2,15916
   1bc7c:	10800017 	ldw	r2,0(r2)
   1bc80:	10000726 	beq	r2,zero,1bca0 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1bc84:	00800174 	movhi	r2,5
   1bc88:	108f8b04 	addi	r2,r2,15916
   1bc8c:	10800017 	ldw	r2,0(r2)
   1bc90:	10c00117 	ldw	r3,4(r2)
   1bc94:	00800174 	movhi	r2,5
   1bc98:	108f8b04 	addi	r2,r2,15916
   1bc9c:	10c00015 	stw	r3,0(r2)
   1bca0:	e0bff817 	ldw	r2,-32(fp)
   1bca4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bca8:	e0bffb17 	ldw	r2,-20(fp)
   1bcac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   1bcb0:	e0bff917 	ldw	r2,-28(fp)
   1bcb4:	1000051e 	bne	r2,zero,1bccc <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   1bcb8:	e0bfff17 	ldw	r2,-4(fp)
   1bcbc:	00c01684 	movi	r3,90
   1bcc0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1bcc4:	0005883a 	mov	r2,zero
   1bcc8:	00002c06 	br	1bd7c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1bccc:	e0bffc17 	ldw	r2,-16(fp)
   1bcd0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1bcd4:	e0fffc17 	ldw	r3,-16(fp)
   1bcd8:	e0bffe17 	ldw	r2,-8(fp)
   1bcdc:	1885883a 	add	r2,r3,r2
   1bce0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1bce4:	e03ff715 	stw	zero,-36(fp)
   1bce8:	00000c06 	br	1bd1c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1bcec:	e0bff617 	ldw	r2,-40(fp)
   1bcf0:	e0fff517 	ldw	r3,-44(fp)
   1bcf4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1bcf8:	e0bff517 	ldw	r2,-44(fp)
   1bcfc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1bd00:	e0fff517 	ldw	r3,-44(fp)
   1bd04:	e0bffe17 	ldw	r2,-8(fp)
   1bd08:	1885883a 	add	r2,r3,r2
   1bd0c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1bd10:	e0bff717 	ldw	r2,-36(fp)
   1bd14:	10800044 	addi	r2,r2,1
   1bd18:	e0bff715 	stw	r2,-36(fp)
   1bd1c:	e0bffd17 	ldw	r2,-12(fp)
   1bd20:	10bfffc4 	addi	r2,r2,-1
   1bd24:	e0fff717 	ldw	r3,-36(fp)
   1bd28:	18bff036 	bltu	r3,r2,1bcec <__alt_mem_descriptor_memory+0xdefdbcec>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1bd2c:	e0bff617 	ldw	r2,-40(fp)
   1bd30:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1bd34:	e0bff917 	ldw	r2,-28(fp)
   1bd38:	e0fffc17 	ldw	r3,-16(fp)
   1bd3c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1bd40:	e0bff917 	ldw	r2,-28(fp)
   1bd44:	e0fffc17 	ldw	r3,-16(fp)
   1bd48:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1bd4c:	e0bff917 	ldw	r2,-28(fp)
   1bd50:	e0fffd17 	ldw	r3,-12(fp)
   1bd54:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1bd58:	e0bff917 	ldw	r2,-28(fp)
   1bd5c:	e0fffd17 	ldw	r3,-12(fp)
   1bd60:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1bd64:	e0bff917 	ldw	r2,-28(fp)
   1bd68:	e0fffe17 	ldw	r3,-8(fp)
   1bd6c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1bd70:	e0bfff17 	ldw	r2,-4(fp)
   1bd74:	10000005 	stb	zero,0(r2)
    return (pmem);
   1bd78:	e0bff917 	ldw	r2,-28(fp)
}
   1bd7c:	e037883a 	mov	sp,fp
   1bd80:	df000017 	ldw	fp,0(sp)
   1bd84:	dec00104 	addi	sp,sp,4
   1bd88:	f800283a 	ret

0001bd8c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1bd8c:	defff804 	addi	sp,sp,-32
   1bd90:	df000715 	stw	fp,28(sp)
   1bd94:	df000704 	addi	fp,sp,28
   1bd98:	e13ffe15 	stw	r4,-8(fp)
   1bd9c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1bda0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1bda4:	e0bfff17 	ldw	r2,-4(fp)
   1bda8:	1000021e 	bne	r2,zero,1bdb4 <OSMemGet+0x28>
        return ((void *)0);
   1bdac:	0005883a 	mov	r2,zero
   1bdb0:	00002e06 	br	1be6c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1bdb4:	e0bffe17 	ldw	r2,-8(fp)
   1bdb8:	1000051e 	bne	r2,zero,1bdd0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1bdbc:	e0bfff17 	ldw	r2,-4(fp)
   1bdc0:	00c01804 	movi	r3,96
   1bdc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1bdc8:	0005883a 	mov	r2,zero
   1bdcc:	00002706 	br	1be6c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bdd0:	0005303a 	rdctl	r2,status
   1bdd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdd8:	e0fffb17 	ldw	r3,-20(fp)
   1bddc:	00bfff84 	movi	r2,-2
   1bde0:	1884703a 	and	r2,r3,r2
   1bde4:	1001703a 	wrctl	status,r2
  
  return context;
   1bde8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1bdec:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1bdf0:	e0bffe17 	ldw	r2,-8(fp)
   1bdf4:	10800417 	ldw	r2,16(r2)
   1bdf8:	10001426 	beq	r2,zero,1be4c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1bdfc:	e0bffe17 	ldw	r2,-8(fp)
   1be00:	10800117 	ldw	r2,4(r2)
   1be04:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1be08:	e0bffa17 	ldw	r2,-24(fp)
   1be0c:	10c00017 	ldw	r3,0(r2)
   1be10:	e0bffe17 	ldw	r2,-8(fp)
   1be14:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1be18:	e0bffe17 	ldw	r2,-8(fp)
   1be1c:	10800417 	ldw	r2,16(r2)
   1be20:	10ffffc4 	addi	r3,r2,-1
   1be24:	e0bffe17 	ldw	r2,-8(fp)
   1be28:	10c00415 	stw	r3,16(r2)
   1be2c:	e0bff917 	ldw	r2,-28(fp)
   1be30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be34:	e0bffc17 	ldw	r2,-16(fp)
   1be38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1be3c:	e0bfff17 	ldw	r2,-4(fp)
   1be40:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1be44:	e0bffa17 	ldw	r2,-24(fp)
   1be48:	00000806 	br	1be6c <OSMemGet+0xe0>
   1be4c:	e0bff917 	ldw	r2,-28(fp)
   1be50:	e0bffd15 	stw	r2,-12(fp)
   1be54:	e0bffd17 	ldw	r2,-12(fp)
   1be58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1be5c:	e0bfff17 	ldw	r2,-4(fp)
   1be60:	00c01744 	movi	r3,93
   1be64:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1be68:	0005883a 	mov	r2,zero
}
   1be6c:	e037883a 	mov	sp,fp
   1be70:	df000017 	ldw	fp,0(sp)
   1be74:	dec00104 	addi	sp,sp,4
   1be78:	f800283a 	ret

0001be7c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1be7c:	defff704 	addi	sp,sp,-36
   1be80:	dfc00815 	stw	ra,32(sp)
   1be84:	df000715 	stw	fp,28(sp)
   1be88:	df000704 	addi	fp,sp,28
   1be8c:	e13ffd15 	stw	r4,-12(fp)
   1be90:	e17ffe15 	stw	r5,-8(fp)
   1be94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1be98:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1be9c:	e0bfff17 	ldw	r2,-4(fp)
   1bea0:	1000021e 	bne	r2,zero,1beac <OSMemNameGet+0x30>
        return (0);
   1bea4:	0005883a 	mov	r2,zero
   1bea8:	00002d06 	br	1bf60 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1beac:	e0bffd17 	ldw	r2,-12(fp)
   1beb0:	1000051e 	bne	r2,zero,1bec8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1beb4:	e0bfff17 	ldw	r2,-4(fp)
   1beb8:	00c01804 	movi	r3,96
   1bebc:	10c00005 	stb	r3,0(r2)
        return (0);
   1bec0:	0005883a 	mov	r2,zero
   1bec4:	00002606 	br	1bf60 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1bec8:	e0bffe17 	ldw	r2,-8(fp)
   1becc:	1000051e 	bne	r2,zero,1bee4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1bed0:	e0bfff17 	ldw	r2,-4(fp)
   1bed4:	00c00304 	movi	r3,12
   1bed8:	10c00005 	stb	r3,0(r2)
        return (0);
   1bedc:	0005883a 	mov	r2,zero
   1bee0:	00001f06 	br	1bf60 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bee4:	00800174 	movhi	r2,5
   1bee8:	108f9004 	addi	r2,r2,15936
   1beec:	10800003 	ldbu	r2,0(r2)
   1bef0:	10803fcc 	andi	r2,r2,255
   1bef4:	10000526 	beq	r2,zero,1bf0c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1bef8:	e0bfff17 	ldw	r2,-4(fp)
   1befc:	00c00444 	movi	r3,17
   1bf00:	10c00005 	stb	r3,0(r2)
        return (0);
   1bf04:	0005883a 	mov	r2,zero
   1bf08:	00001506 	br	1bf60 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf0c:	0005303a 	rdctl	r2,status
   1bf10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf14:	e0fffb17 	ldw	r3,-20(fp)
   1bf18:	00bfff84 	movi	r2,-2
   1bf1c:	1884703a 	and	r2,r3,r2
   1bf20:	1001703a 	wrctl	status,r2
  
  return context;
   1bf24:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1bf28:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1bf2c:	e0bffd17 	ldw	r2,-12(fp)
   1bf30:	10800504 	addi	r2,r2,20
   1bf34:	e13ffe17 	ldw	r4,-8(fp)
   1bf38:	100b883a 	mov	r5,r2
   1bf3c:	0019c640 	call	19c64 <OS_StrCopy>
   1bf40:	e0bffa05 	stb	r2,-24(fp)
   1bf44:	e0bff917 	ldw	r2,-28(fp)
   1bf48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf4c:	e0bffc17 	ldw	r2,-16(fp)
   1bf50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1bf54:	e0bfff17 	ldw	r2,-4(fp)
   1bf58:	10000005 	stb	zero,0(r2)
    return (len);
   1bf5c:	e0bffa03 	ldbu	r2,-24(fp)
}
   1bf60:	e037883a 	mov	sp,fp
   1bf64:	dfc00117 	ldw	ra,4(sp)
   1bf68:	df000017 	ldw	fp,0(sp)
   1bf6c:	dec00204 	addi	sp,sp,8
   1bf70:	f800283a 	ret

0001bf74 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1bf74:	defff604 	addi	sp,sp,-40
   1bf78:	dfc00915 	stw	ra,36(sp)
   1bf7c:	df000815 	stw	fp,32(sp)
   1bf80:	df000804 	addi	fp,sp,32
   1bf84:	e13ffd15 	stw	r4,-12(fp)
   1bf88:	e17ffe15 	stw	r5,-8(fp)
   1bf8c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bf90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1bf94:	e0bfff17 	ldw	r2,-4(fp)
   1bf98:	1000011e 	bne	r2,zero,1bfa0 <OSMemNameSet+0x2c>
        return;
   1bf9c:	00003606 	br	1c078 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1bfa0:	e0bffd17 	ldw	r2,-12(fp)
   1bfa4:	1000041e 	bne	r2,zero,1bfb8 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1bfa8:	e0bfff17 	ldw	r2,-4(fp)
   1bfac:	00c01804 	movi	r3,96
   1bfb0:	10c00005 	stb	r3,0(r2)
        return;
   1bfb4:	00003006 	br	1c078 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1bfb8:	e0bffe17 	ldw	r2,-8(fp)
   1bfbc:	1000041e 	bne	r2,zero,1bfd0 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1bfc0:	e0bfff17 	ldw	r2,-4(fp)
   1bfc4:	00c00304 	movi	r3,12
   1bfc8:	10c00005 	stb	r3,0(r2)
        return;
   1bfcc:	00002a06 	br	1c078 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bfd0:	00800174 	movhi	r2,5
   1bfd4:	108f9004 	addi	r2,r2,15936
   1bfd8:	10800003 	ldbu	r2,0(r2)
   1bfdc:	10803fcc 	andi	r2,r2,255
   1bfe0:	10000426 	beq	r2,zero,1bff4 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1bfe4:	e0bfff17 	ldw	r2,-4(fp)
   1bfe8:	00c00484 	movi	r3,18
   1bfec:	10c00005 	stb	r3,0(r2)
        return;
   1bff0:	00002106 	br	1c078 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bff4:	0005303a 	rdctl	r2,status
   1bff8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bffc:	e0fffa17 	ldw	r3,-24(fp)
   1c000:	00bfff84 	movi	r2,-2
   1c004:	1884703a 	and	r2,r3,r2
   1c008:	1001703a 	wrctl	status,r2
  
  return context;
   1c00c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1c010:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1c014:	e13ffe17 	ldw	r4,-8(fp)
   1c018:	0019cd80 	call	19cd8 <OS_StrLen>
   1c01c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1c020:	e0bff903 	ldbu	r2,-28(fp)
   1c024:	10800830 	cmpltui	r2,r2,32
   1c028:	1000081e 	bne	r2,zero,1c04c <OSMemNameSet+0xd8>
   1c02c:	e0bff817 	ldw	r2,-32(fp)
   1c030:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c034:	e0bffb17 	ldw	r2,-20(fp)
   1c038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1c03c:	e0bfff17 	ldw	r2,-4(fp)
   1c040:	00c018c4 	movi	r3,99
   1c044:	10c00005 	stb	r3,0(r2)
        return;
   1c048:	00000b06 	br	1c078 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   1c04c:	e0bffd17 	ldw	r2,-12(fp)
   1c050:	10800504 	addi	r2,r2,20
   1c054:	1009883a 	mov	r4,r2
   1c058:	e17ffe17 	ldw	r5,-8(fp)
   1c05c:	0019c640 	call	19c64 <OS_StrCopy>
   1c060:	e0bff817 	ldw	r2,-32(fp)
   1c064:	e0bffc15 	stw	r2,-16(fp)
   1c068:	e0bffc17 	ldw	r2,-16(fp)
   1c06c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c070:	e0bfff17 	ldw	r2,-4(fp)
   1c074:	10000005 	stb	zero,0(r2)
}
   1c078:	e037883a 	mov	sp,fp
   1c07c:	dfc00117 	ldw	ra,4(sp)
   1c080:	df000017 	ldw	fp,0(sp)
   1c084:	dec00204 	addi	sp,sp,8
   1c088:	f800283a 	ret

0001c08c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1c08c:	defff904 	addi	sp,sp,-28
   1c090:	df000615 	stw	fp,24(sp)
   1c094:	df000604 	addi	fp,sp,24
   1c098:	e13ffe15 	stw	r4,-8(fp)
   1c09c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c0a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1c0a4:	e0bffe17 	ldw	r2,-8(fp)
   1c0a8:	1000021e 	bne	r2,zero,1c0b4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1c0ac:	00801804 	movi	r2,96
   1c0b0:	00002806 	br	1c154 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1c0b4:	e0bfff17 	ldw	r2,-4(fp)
   1c0b8:	1000021e 	bne	r2,zero,1c0c4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1c0bc:	008017c4 	movi	r2,95
   1c0c0:	00002406 	br	1c154 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c0c4:	0005303a 	rdctl	r2,status
   1c0c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0cc:	e0fffb17 	ldw	r3,-20(fp)
   1c0d0:	00bfff84 	movi	r2,-2
   1c0d4:	1884703a 	and	r2,r3,r2
   1c0d8:	1001703a 	wrctl	status,r2
  
  return context;
   1c0dc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c0e0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1c0e4:	e0bffe17 	ldw	r2,-8(fp)
   1c0e8:	10c00417 	ldw	r3,16(r2)
   1c0ec:	e0bffe17 	ldw	r2,-8(fp)
   1c0f0:	10800317 	ldw	r2,12(r2)
   1c0f4:	18800636 	bltu	r3,r2,1c110 <OSMemPut+0x84>
   1c0f8:	e0bffa17 	ldw	r2,-24(fp)
   1c0fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c100:	e0bffc17 	ldw	r2,-16(fp)
   1c104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   1c108:	00801784 	movi	r2,94
   1c10c:	00001106 	br	1c154 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1c110:	e0bffe17 	ldw	r2,-8(fp)
   1c114:	10c00117 	ldw	r3,4(r2)
   1c118:	e0bfff17 	ldw	r2,-4(fp)
   1c11c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1c120:	e0bffe17 	ldw	r2,-8(fp)
   1c124:	e0ffff17 	ldw	r3,-4(fp)
   1c128:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1c12c:	e0bffe17 	ldw	r2,-8(fp)
   1c130:	10800417 	ldw	r2,16(r2)
   1c134:	10c00044 	addi	r3,r2,1
   1c138:	e0bffe17 	ldw	r2,-8(fp)
   1c13c:	10c00415 	stw	r3,16(r2)
   1c140:	e0bffa17 	ldw	r2,-24(fp)
   1c144:	e0bffd15 	stw	r2,-12(fp)
   1c148:	e0bffd17 	ldw	r2,-12(fp)
   1c14c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1c150:	0005883a 	mov	r2,zero
}
   1c154:	e037883a 	mov	sp,fp
   1c158:	df000017 	ldw	fp,0(sp)
   1c15c:	dec00104 	addi	sp,sp,4
   1c160:	f800283a 	ret

0001c164 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1c164:	defffa04 	addi	sp,sp,-24
   1c168:	df000515 	stw	fp,20(sp)
   1c16c:	df000504 	addi	fp,sp,20
   1c170:	e13ffe15 	stw	r4,-8(fp)
   1c174:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c178:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1c17c:	e0bffe17 	ldw	r2,-8(fp)
   1c180:	1000021e 	bne	r2,zero,1c18c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1c184:	00801804 	movi	r2,96
   1c188:	00002c06 	br	1c23c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1c18c:	e0bfff17 	ldw	r2,-4(fp)
   1c190:	1000021e 	bne	r2,zero,1c19c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1c194:	00801844 	movi	r2,97
   1c198:	00002806 	br	1c23c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c19c:	0005303a 	rdctl	r2,status
   1c1a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c1a4:	e0fffc17 	ldw	r3,-16(fp)
   1c1a8:	00bfff84 	movi	r2,-2
   1c1ac:	1884703a 	and	r2,r3,r2
   1c1b0:	1001703a 	wrctl	status,r2
  
  return context;
   1c1b4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c1b8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1c1bc:	e0bffe17 	ldw	r2,-8(fp)
   1c1c0:	10c00017 	ldw	r3,0(r2)
   1c1c4:	e0bfff17 	ldw	r2,-4(fp)
   1c1c8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1c1cc:	e0bffe17 	ldw	r2,-8(fp)
   1c1d0:	10c00117 	ldw	r3,4(r2)
   1c1d4:	e0bfff17 	ldw	r2,-4(fp)
   1c1d8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1c1dc:	e0bffe17 	ldw	r2,-8(fp)
   1c1e0:	10c00217 	ldw	r3,8(r2)
   1c1e4:	e0bfff17 	ldw	r2,-4(fp)
   1c1e8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1c1ec:	e0bffe17 	ldw	r2,-8(fp)
   1c1f0:	10c00317 	ldw	r3,12(r2)
   1c1f4:	e0bfff17 	ldw	r2,-4(fp)
   1c1f8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1c1fc:	e0bffe17 	ldw	r2,-8(fp)
   1c200:	10c00417 	ldw	r3,16(r2)
   1c204:	e0bfff17 	ldw	r2,-4(fp)
   1c208:	10c00415 	stw	r3,16(r2)
   1c20c:	e0bffb17 	ldw	r2,-20(fp)
   1c210:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c214:	e0bffd17 	ldw	r2,-12(fp)
   1c218:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1c21c:	e0bfff17 	ldw	r2,-4(fp)
   1c220:	10c00317 	ldw	r3,12(r2)
   1c224:	e0bfff17 	ldw	r2,-4(fp)
   1c228:	10800417 	ldw	r2,16(r2)
   1c22c:	1887c83a 	sub	r3,r3,r2
   1c230:	e0bfff17 	ldw	r2,-4(fp)
   1c234:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1c238:	0005883a 	mov	r2,zero
}
   1c23c:	e037883a 	mov	sp,fp
   1c240:	df000017 	ldw	fp,0(sp)
   1c244:	dec00104 	addi	sp,sp,4
   1c248:	f800283a 	ret

0001c24c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1c24c:	defffc04 	addi	sp,sp,-16
   1c250:	dfc00315 	stw	ra,12(sp)
   1c254:	df000215 	stw	fp,8(sp)
   1c258:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1c25c:	010001b4 	movhi	r4,6
   1c260:	212a9904 	addi	r4,r4,-21916
   1c264:	01430c04 	movi	r5,3120
   1c268:	0019a740 	call	19a74 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1c26c:	008001b4 	movhi	r2,6
   1c270:	10aa9904 	addi	r2,r2,-21916
   1c274:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1c278:	e03fff0d 	sth	zero,-4(fp)
   1c27c:	00001306 	br	1c2cc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1c280:	e0bfff0b 	ldhu	r2,-4(fp)
   1c284:	10800044 	addi	r2,r2,1
   1c288:	10c00d24 	muli	r3,r2,52
   1c28c:	008001b4 	movhi	r2,6
   1c290:	10aa9904 	addi	r2,r2,-21916
   1c294:	1887883a 	add	r3,r3,r2
   1c298:	e0bffe17 	ldw	r2,-8(fp)
   1c29c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1c2a0:	e0bffe17 	ldw	r2,-8(fp)
   1c2a4:	00c00fc4 	movi	r3,63
   1c2a8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1c2ac:	e0bffe17 	ldw	r2,-8(fp)
   1c2b0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1c2b4:	e0bffe17 	ldw	r2,-8(fp)
   1c2b8:	10800d04 	addi	r2,r2,52
   1c2bc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1c2c0:	e0bfff0b 	ldhu	r2,-4(fp)
   1c2c4:	10800044 	addi	r2,r2,1
   1c2c8:	e0bfff0d 	sth	r2,-4(fp)
   1c2cc:	e0bfff0b 	ldhu	r2,-4(fp)
   1c2d0:	10800ef0 	cmpltui	r2,r2,59
   1c2d4:	103fea1e 	bne	r2,zero,1c280 <__alt_mem_descriptor_memory+0xdefdc280>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1c2d8:	e0bffe17 	ldw	r2,-8(fp)
   1c2dc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1c2e0:	e0bffe17 	ldw	r2,-8(fp)
   1c2e4:	00c00fc4 	movi	r3,63
   1c2e8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1c2ec:	e0bffe17 	ldw	r2,-8(fp)
   1c2f0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1c2f4:	00800174 	movhi	r2,5
   1c2f8:	108f8b04 	addi	r2,r2,15916
   1c2fc:	00c001b4 	movhi	r3,6
   1c300:	18ea9904 	addi	r3,r3,-21916
   1c304:	10c00015 	stw	r3,0(r2)
#endif
}
   1c308:	e037883a 	mov	sp,fp
   1c30c:	dfc00117 	ldw	ra,4(sp)
   1c310:	df000017 	ldw	fp,0(sp)
   1c314:	dec00204 	addi	sp,sp,8
   1c318:	f800283a 	ret

0001c31c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1c31c:	defff804 	addi	sp,sp,-32
   1c320:	df000715 	stw	fp,28(sp)
   1c324:	df000704 	addi	fp,sp,28
   1c328:	e13ffe15 	stw	r4,-8(fp)
   1c32c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c330:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1c334:	e0bfff17 	ldw	r2,-4(fp)
   1c338:	1000021e 	bne	r2,zero,1c344 <OSQAccept+0x28>
        return ((void *)0);
   1c33c:	0005883a 	mov	r2,zero
   1c340:	00004206 	br	1c44c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1c344:	e0bffe17 	ldw	r2,-8(fp)
   1c348:	1000051e 	bne	r2,zero,1c360 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1c34c:	e0bfff17 	ldw	r2,-4(fp)
   1c350:	00c00104 	movi	r3,4
   1c354:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c358:	0005883a 	mov	r2,zero
   1c35c:	00003b06 	br	1c44c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1c360:	e0bffe17 	ldw	r2,-8(fp)
   1c364:	10800003 	ldbu	r2,0(r2)
   1c368:	10803fcc 	andi	r2,r2,255
   1c36c:	108000a0 	cmpeqi	r2,r2,2
   1c370:	1000051e 	bne	r2,zero,1c388 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1c374:	e0bfff17 	ldw	r2,-4(fp)
   1c378:	00c00044 	movi	r3,1
   1c37c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c380:	0005883a 	mov	r2,zero
   1c384:	00003106 	br	1c44c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c388:	0005303a 	rdctl	r2,status
   1c38c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c390:	e0fffc17 	ldw	r3,-16(fp)
   1c394:	00bfff84 	movi	r2,-2
   1c398:	1884703a 	and	r2,r3,r2
   1c39c:	1001703a 	wrctl	status,r2
  
  return context;
   1c3a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1c3a4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1c3a8:	e0bffe17 	ldw	r2,-8(fp)
   1c3ac:	10800117 	ldw	r2,4(r2)
   1c3b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1c3b4:	e0bffb17 	ldw	r2,-20(fp)
   1c3b8:	1080058b 	ldhu	r2,22(r2)
   1c3bc:	10bfffcc 	andi	r2,r2,65535
   1c3c0:	10001926 	beq	r2,zero,1c428 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1c3c4:	e0bffb17 	ldw	r2,-20(fp)
   1c3c8:	10800417 	ldw	r2,16(r2)
   1c3cc:	11000104 	addi	r4,r2,4
   1c3d0:	e0fffb17 	ldw	r3,-20(fp)
   1c3d4:	19000415 	stw	r4,16(r3)
   1c3d8:	10800017 	ldw	r2,0(r2)
   1c3dc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1c3e0:	e0bffb17 	ldw	r2,-20(fp)
   1c3e4:	1080058b 	ldhu	r2,22(r2)
   1c3e8:	10bfffc4 	addi	r2,r2,-1
   1c3ec:	1007883a 	mov	r3,r2
   1c3f0:	e0bffb17 	ldw	r2,-20(fp)
   1c3f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1c3f8:	e0bffb17 	ldw	r2,-20(fp)
   1c3fc:	10c00417 	ldw	r3,16(r2)
   1c400:	e0bffb17 	ldw	r2,-20(fp)
   1c404:	10800217 	ldw	r2,8(r2)
   1c408:	1880041e 	bne	r3,r2,1c41c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1c40c:	e0bffb17 	ldw	r2,-20(fp)
   1c410:	10c00117 	ldw	r3,4(r2)
   1c414:	e0bffb17 	ldw	r2,-20(fp)
   1c418:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1c41c:	e0bfff17 	ldw	r2,-4(fp)
   1c420:	10000005 	stb	zero,0(r2)
   1c424:	00000406 	br	1c438 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1c428:	e0bfff17 	ldw	r2,-4(fp)
   1c42c:	00c007c4 	movi	r3,31
   1c430:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1c434:	e03ff915 	stw	zero,-28(fp)
   1c438:	e0bffa17 	ldw	r2,-24(fp)
   1c43c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c440:	e0bffd17 	ldw	r2,-12(fp)
   1c444:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1c448:	e0bff917 	ldw	r2,-28(fp)
}
   1c44c:	e037883a 	mov	sp,fp
   1c450:	df000017 	ldw	fp,0(sp)
   1c454:	dec00104 	addi	sp,sp,4
   1c458:	f800283a 	ret

0001c45c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1c45c:	defff404 	addi	sp,sp,-48
   1c460:	dfc00b15 	stw	ra,44(sp)
   1c464:	df000a15 	stw	fp,40(sp)
   1c468:	df000a04 	addi	fp,sp,40
   1c46c:	e13ffe15 	stw	r4,-8(fp)
   1c470:	2805883a 	mov	r2,r5
   1c474:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c478:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1c47c:	00800174 	movhi	r2,5
   1c480:	108f9004 	addi	r2,r2,15936
   1c484:	10800003 	ldbu	r2,0(r2)
   1c488:	10803fcc 	andi	r2,r2,255
   1c48c:	10000226 	beq	r2,zero,1c498 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1c490:	0005883a 	mov	r2,zero
   1c494:	00006b06 	br	1c644 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c498:	0005303a 	rdctl	r2,status
   1c49c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c4a0:	e0fff917 	ldw	r3,-28(fp)
   1c4a4:	00bfff84 	movi	r2,-2
   1c4a8:	1884703a 	and	r2,r3,r2
   1c4ac:	1001703a 	wrctl	status,r2
  
  return context;
   1c4b0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1c4b4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1c4b8:	00800174 	movhi	r2,5
   1c4bc:	108f8f04 	addi	r2,r2,15932
   1c4c0:	10800017 	ldw	r2,0(r2)
   1c4c4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1c4c8:	00800174 	movhi	r2,5
   1c4cc:	108f8f04 	addi	r2,r2,15932
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	10000726 	beq	r2,zero,1c4f4 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1c4d8:	00800174 	movhi	r2,5
   1c4dc:	108f8f04 	addi	r2,r2,15932
   1c4e0:	10800017 	ldw	r2,0(r2)
   1c4e4:	10c00117 	ldw	r3,4(r2)
   1c4e8:	00800174 	movhi	r2,5
   1c4ec:	108f8f04 	addi	r2,r2,15932
   1c4f0:	10c00015 	stw	r3,0(r2)
   1c4f4:	e0bff717 	ldw	r2,-36(fp)
   1c4f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c4fc:	e0bffa17 	ldw	r2,-24(fp)
   1c500:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1c504:	e0bff617 	ldw	r2,-40(fp)
   1c508:	10004d26 	beq	r2,zero,1c640 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c50c:	0005303a 	rdctl	r2,status
   1c510:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c514:	e0fffb17 	ldw	r3,-20(fp)
   1c518:	00bfff84 	movi	r2,-2
   1c51c:	1884703a 	and	r2,r3,r2
   1c520:	1001703a 	wrctl	status,r2
  
  return context;
   1c524:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   1c528:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1c52c:	00800174 	movhi	r2,5
   1c530:	108f8d04 	addi	r2,r2,15924
   1c534:	10800017 	ldw	r2,0(r2)
   1c538:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1c53c:	e0bff817 	ldw	r2,-32(fp)
   1c540:	10003126 	beq	r2,zero,1c608 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1c544:	00800174 	movhi	r2,5
   1c548:	108f8d04 	addi	r2,r2,15924
   1c54c:	10800017 	ldw	r2,0(r2)
   1c550:	10c00017 	ldw	r3,0(r2)
   1c554:	00800174 	movhi	r2,5
   1c558:	108f8d04 	addi	r2,r2,15924
   1c55c:	10c00015 	stw	r3,0(r2)
   1c560:	e0bff717 	ldw	r2,-36(fp)
   1c564:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c568:	e0bffc17 	ldw	r2,-16(fp)
   1c56c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1c570:	e0bff817 	ldw	r2,-32(fp)
   1c574:	e0fffe17 	ldw	r3,-8(fp)
   1c578:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1c57c:	e0bfff0b 	ldhu	r2,-4(fp)
   1c580:	1085883a 	add	r2,r2,r2
   1c584:	1085883a 	add	r2,r2,r2
   1c588:	1007883a 	mov	r3,r2
   1c58c:	e0bffe17 	ldw	r2,-8(fp)
   1c590:	10c7883a 	add	r3,r2,r3
   1c594:	e0bff817 	ldw	r2,-32(fp)
   1c598:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1c59c:	e0bff817 	ldw	r2,-32(fp)
   1c5a0:	e0fffe17 	ldw	r3,-8(fp)
   1c5a4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1c5a8:	e0bff817 	ldw	r2,-32(fp)
   1c5ac:	e0fffe17 	ldw	r3,-8(fp)
   1c5b0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1c5b4:	e0bff817 	ldw	r2,-32(fp)
   1c5b8:	e0ffff0b 	ldhu	r3,-4(fp)
   1c5bc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1c5c0:	e0bff817 	ldw	r2,-32(fp)
   1c5c4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1c5c8:	e0bff617 	ldw	r2,-40(fp)
   1c5cc:	00c00084 	movi	r3,2
   1c5d0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1c5d4:	e0bff617 	ldw	r2,-40(fp)
   1c5d8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1c5dc:	e0bff617 	ldw	r2,-40(fp)
   1c5e0:	e0fff817 	ldw	r3,-32(fp)
   1c5e4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1c5e8:	e0bff617 	ldw	r2,-40(fp)
   1c5ec:	00c00fc4 	movi	r3,63
   1c5f0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1c5f4:	e0bff617 	ldw	r2,-40(fp)
   1c5f8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1c5fc:	e13ff617 	ldw	r4,-40(fp)
   1c600:	00196b00 	call	196b0 <OS_EventWaitListInit>
   1c604:	00000e06 	br	1c640 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1c608:	00800174 	movhi	r2,5
   1c60c:	108f8f04 	addi	r2,r2,15932
   1c610:	10c00017 	ldw	r3,0(r2)
   1c614:	e0bff617 	ldw	r2,-40(fp)
   1c618:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1c61c:	00800174 	movhi	r2,5
   1c620:	108f8f04 	addi	r2,r2,15932
   1c624:	e0fff617 	ldw	r3,-40(fp)
   1c628:	10c00015 	stw	r3,0(r2)
   1c62c:	e0bff717 	ldw	r2,-36(fp)
   1c630:	e0bffd15 	stw	r2,-12(fp)
   1c634:	e0bffd17 	ldw	r2,-12(fp)
   1c638:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1c63c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1c640:	e0bff617 	ldw	r2,-40(fp)
}
   1c644:	e037883a 	mov	sp,fp
   1c648:	dfc00117 	ldw	ra,4(sp)
   1c64c:	df000017 	ldw	fp,0(sp)
   1c650:	dec00204 	addi	sp,sp,8
   1c654:	f800283a 	ret

0001c658 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1c658:	defff204 	addi	sp,sp,-56
   1c65c:	dfc00d15 	stw	ra,52(sp)
   1c660:	df000c15 	stw	fp,48(sp)
   1c664:	df000c04 	addi	fp,sp,48
   1c668:	e13ffd15 	stw	r4,-12(fp)
   1c66c:	2805883a 	mov	r2,r5
   1c670:	e1bfff15 	stw	r6,-4(fp)
   1c674:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1c678:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1c67c:	e0bfff17 	ldw	r2,-4(fp)
   1c680:	1000021e 	bne	r2,zero,1c68c <OSQDel+0x34>
        return (pevent);
   1c684:	e0bffd17 	ldw	r2,-12(fp)
   1c688:	0000a006 	br	1c90c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1c68c:	e0bffd17 	ldw	r2,-12(fp)
   1c690:	1000051e 	bne	r2,zero,1c6a8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1c694:	e0bfff17 	ldw	r2,-4(fp)
   1c698:	00c00104 	movi	r3,4
   1c69c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c6a0:	e0bffd17 	ldw	r2,-12(fp)
   1c6a4:	00009906 	br	1c90c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1c6a8:	e0bffd17 	ldw	r2,-12(fp)
   1c6ac:	10800003 	ldbu	r2,0(r2)
   1c6b0:	10803fcc 	andi	r2,r2,255
   1c6b4:	108000a0 	cmpeqi	r2,r2,2
   1c6b8:	1000051e 	bne	r2,zero,1c6d0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1c6bc:	e0bfff17 	ldw	r2,-4(fp)
   1c6c0:	00c00044 	movi	r3,1
   1c6c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c6c8:	e0bffd17 	ldw	r2,-12(fp)
   1c6cc:	00008f06 	br	1c90c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1c6d0:	00800174 	movhi	r2,5
   1c6d4:	108f9004 	addi	r2,r2,15936
   1c6d8:	10800003 	ldbu	r2,0(r2)
   1c6dc:	10803fcc 	andi	r2,r2,255
   1c6e0:	10000526 	beq	r2,zero,1c6f8 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1c6e4:	e0bfff17 	ldw	r2,-4(fp)
   1c6e8:	00c003c4 	movi	r3,15
   1c6ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c6f0:	e0bffd17 	ldw	r2,-12(fp)
   1c6f4:	00008506 	br	1c90c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c6f8:	0005303a 	rdctl	r2,status
   1c6fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c700:	e0fff817 	ldw	r3,-32(fp)
   1c704:	00bfff84 	movi	r2,-2
   1c708:	1884703a 	and	r2,r3,r2
   1c70c:	1001703a 	wrctl	status,r2
  
  return context;
   1c710:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1c714:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1c718:	e0bffd17 	ldw	r2,-12(fp)
   1c71c:	10800283 	ldbu	r2,10(r2)
   1c720:	10803fcc 	andi	r2,r2,255
   1c724:	10000326 	beq	r2,zero,1c734 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1c728:	00800044 	movi	r2,1
   1c72c:	e0bff405 	stb	r2,-48(fp)
   1c730:	00000106 	br	1c738 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1c734:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1c738:	e0bffe03 	ldbu	r2,-8(fp)
   1c73c:	10000326 	beq	r2,zero,1c74c <OSQDel+0xf4>
   1c740:	10800060 	cmpeqi	r2,r2,1
   1c744:	1000381e 	bne	r2,zero,1c828 <OSQDel+0x1d0>
   1c748:	00006506 	br	1c8e0 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1c74c:	e0bff403 	ldbu	r2,-48(fp)
   1c750:	1000261e 	bne	r2,zero,1c7ec <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1c754:	e0bffd17 	ldw	r2,-12(fp)
   1c758:	00c00fc4 	movi	r3,63
   1c75c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1c760:	e0bffd17 	ldw	r2,-12(fp)
   1c764:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1c768:	e0bffd17 	ldw	r2,-12(fp)
   1c76c:	10800117 	ldw	r2,4(r2)
   1c770:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   1c774:	00800174 	movhi	r2,5
   1c778:	108f8d04 	addi	r2,r2,15924
   1c77c:	10c00017 	ldw	r3,0(r2)
   1c780:	e0bff717 	ldw	r2,-36(fp)
   1c784:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1c788:	00800174 	movhi	r2,5
   1c78c:	108f8d04 	addi	r2,r2,15924
   1c790:	e0fff717 	ldw	r3,-36(fp)
   1c794:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1c798:	e0bffd17 	ldw	r2,-12(fp)
   1c79c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1c7a0:	00800174 	movhi	r2,5
   1c7a4:	108f8f04 	addi	r2,r2,15932
   1c7a8:	10c00017 	ldw	r3,0(r2)
   1c7ac:	e0bffd17 	ldw	r2,-12(fp)
   1c7b0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1c7b4:	e0bffd17 	ldw	r2,-12(fp)
   1c7b8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1c7bc:	00800174 	movhi	r2,5
   1c7c0:	108f8f04 	addi	r2,r2,15932
   1c7c4:	e0fffd17 	ldw	r3,-12(fp)
   1c7c8:	10c00015 	stw	r3,0(r2)
   1c7cc:	e0bff617 	ldw	r2,-40(fp)
   1c7d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c7d4:	e0bff917 	ldw	r2,-28(fp)
   1c7d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1c7dc:	e0bfff17 	ldw	r2,-4(fp)
   1c7e0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1c7e4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1c7e8:	00004706 	br	1c908 <OSQDel+0x2b0>
   1c7ec:	e0bff617 	ldw	r2,-40(fp)
   1c7f0:	e0bffa15 	stw	r2,-24(fp)
   1c7f4:	e0bffa17 	ldw	r2,-24(fp)
   1c7f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1c7fc:	e0bfff17 	ldw	r2,-4(fp)
   1c800:	00c01244 	movi	r3,73
   1c804:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1c808:	e0bffd17 	ldw	r2,-12(fp)
   1c80c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1c810:	00003d06 	br	1c908 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1c814:	e13ffd17 	ldw	r4,-12(fp)
   1c818:	000b883a 	mov	r5,zero
   1c81c:	01800104 	movi	r6,4
   1c820:	000f883a 	mov	r7,zero
   1c824:	00191100 	call	19110 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1c828:	e0bffd17 	ldw	r2,-12(fp)
   1c82c:	10800283 	ldbu	r2,10(r2)
   1c830:	10803fcc 	andi	r2,r2,255
   1c834:	103ff71e 	bne	r2,zero,1c814 <__alt_mem_descriptor_memory+0xdefdc814>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1c838:	e0bffd17 	ldw	r2,-12(fp)
   1c83c:	00c00fc4 	movi	r3,63
   1c840:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1c844:	e0bffd17 	ldw	r2,-12(fp)
   1c848:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1c84c:	e0bffd17 	ldw	r2,-12(fp)
   1c850:	10800117 	ldw	r2,4(r2)
   1c854:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   1c858:	00800174 	movhi	r2,5
   1c85c:	108f8d04 	addi	r2,r2,15924
   1c860:	10c00017 	ldw	r3,0(r2)
   1c864:	e0bff717 	ldw	r2,-36(fp)
   1c868:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1c86c:	00800174 	movhi	r2,5
   1c870:	108f8d04 	addi	r2,r2,15924
   1c874:	e0fff717 	ldw	r3,-36(fp)
   1c878:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1c87c:	e0bffd17 	ldw	r2,-12(fp)
   1c880:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1c884:	00800174 	movhi	r2,5
   1c888:	108f8f04 	addi	r2,r2,15932
   1c88c:	10c00017 	ldw	r3,0(r2)
   1c890:	e0bffd17 	ldw	r2,-12(fp)
   1c894:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1c898:	e0bffd17 	ldw	r2,-12(fp)
   1c89c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1c8a0:	00800174 	movhi	r2,5
   1c8a4:	108f8f04 	addi	r2,r2,15932
   1c8a8:	e0fffd17 	ldw	r3,-12(fp)
   1c8ac:	10c00015 	stw	r3,0(r2)
   1c8b0:	e0bff617 	ldw	r2,-40(fp)
   1c8b4:	e0bffb15 	stw	r2,-20(fp)
   1c8b8:	e0bffb17 	ldw	r2,-20(fp)
   1c8bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1c8c0:	e0bff403 	ldbu	r2,-48(fp)
   1c8c4:	10800058 	cmpnei	r2,r2,1
   1c8c8:	1000011e 	bne	r2,zero,1c8d0 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1c8cc:	0019b280 	call	19b28 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1c8d0:	e0bfff17 	ldw	r2,-4(fp)
   1c8d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1c8d8:	e03ff515 	stw	zero,-44(fp)
             break;
   1c8dc:	00000a06 	br	1c908 <OSQDel+0x2b0>
   1c8e0:	e0bff617 	ldw	r2,-40(fp)
   1c8e4:	e0bffc15 	stw	r2,-16(fp)
   1c8e8:	e0bffc17 	ldw	r2,-16(fp)
   1c8ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1c8f0:	e0bfff17 	ldw	r2,-4(fp)
   1c8f4:	00c001c4 	movi	r3,7
   1c8f8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1c8fc:	e0bffd17 	ldw	r2,-12(fp)
   1c900:	e0bff515 	stw	r2,-44(fp)
             break;
   1c904:	0001883a 	nop
    }
    return (pevent_return);
   1c908:	e0bff517 	ldw	r2,-44(fp)
}
   1c90c:	e037883a 	mov	sp,fp
   1c910:	dfc00117 	ldw	ra,4(sp)
   1c914:	df000017 	ldw	fp,0(sp)
   1c918:	dec00204 	addi	sp,sp,8
   1c91c:	f800283a 	ret

0001c920 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1c920:	defffa04 	addi	sp,sp,-24
   1c924:	df000515 	stw	fp,20(sp)
   1c928:	df000504 	addi	fp,sp,20
   1c92c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1c930:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1c934:	e0bfff17 	ldw	r2,-4(fp)
   1c938:	1000021e 	bne	r2,zero,1c944 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1c93c:	00800104 	movi	r2,4
   1c940:	00002106 	br	1c9c8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1c944:	e0bfff17 	ldw	r2,-4(fp)
   1c948:	10800003 	ldbu	r2,0(r2)
   1c94c:	10803fcc 	andi	r2,r2,255
   1c950:	108000a0 	cmpeqi	r2,r2,2
   1c954:	1000021e 	bne	r2,zero,1c960 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1c958:	00800044 	movi	r2,1
   1c95c:	00001a06 	br	1c9c8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c960:	0005303a 	rdctl	r2,status
   1c964:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c968:	e0fffd17 	ldw	r3,-12(fp)
   1c96c:	00bfff84 	movi	r2,-2
   1c970:	1884703a 	and	r2,r3,r2
   1c974:	1001703a 	wrctl	status,r2
  
  return context;
   1c978:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c97c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1c980:	e0bfff17 	ldw	r2,-4(fp)
   1c984:	10800117 	ldw	r2,4(r2)
   1c988:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1c98c:	e0bffc17 	ldw	r2,-16(fp)
   1c990:	10c00117 	ldw	r3,4(r2)
   1c994:	e0bffc17 	ldw	r2,-16(fp)
   1c998:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1c99c:	e0bffc17 	ldw	r2,-16(fp)
   1c9a0:	10c00117 	ldw	r3,4(r2)
   1c9a4:	e0bffc17 	ldw	r2,-16(fp)
   1c9a8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1c9ac:	e0bffc17 	ldw	r2,-16(fp)
   1c9b0:	1000058d 	sth	zero,22(r2)
   1c9b4:	e0bffb17 	ldw	r2,-20(fp)
   1c9b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c9bc:	e0bffe17 	ldw	r2,-8(fp)
   1c9c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1c9c4:	0005883a 	mov	r2,zero
}
   1c9c8:	e037883a 	mov	sp,fp
   1c9cc:	df000017 	ldw	fp,0(sp)
   1c9d0:	dec00104 	addi	sp,sp,4
   1c9d4:	f800283a 	ret

0001c9d8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1c9d8:	defff304 	addi	sp,sp,-52
   1c9dc:	dfc00c15 	stw	ra,48(sp)
   1c9e0:	df000b15 	stw	fp,44(sp)
   1c9e4:	df000b04 	addi	fp,sp,44
   1c9e8:	e13ffd15 	stw	r4,-12(fp)
   1c9ec:	2805883a 	mov	r2,r5
   1c9f0:	e1bfff15 	stw	r6,-4(fp)
   1c9f4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c9f8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1c9fc:	e0bfff17 	ldw	r2,-4(fp)
   1ca00:	1000021e 	bne	r2,zero,1ca0c <OSQPend+0x34>
        return ((void *)0);
   1ca04:	0005883a 	mov	r2,zero
   1ca08:	0000ad06 	br	1ccc0 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1ca0c:	e0bffd17 	ldw	r2,-12(fp)
   1ca10:	1000051e 	bne	r2,zero,1ca28 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1ca14:	e0bfff17 	ldw	r2,-4(fp)
   1ca18:	00c00104 	movi	r3,4
   1ca1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ca20:	0005883a 	mov	r2,zero
   1ca24:	0000a606 	br	1ccc0 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1ca28:	e0bffd17 	ldw	r2,-12(fp)
   1ca2c:	10800003 	ldbu	r2,0(r2)
   1ca30:	10803fcc 	andi	r2,r2,255
   1ca34:	108000a0 	cmpeqi	r2,r2,2
   1ca38:	1000051e 	bne	r2,zero,1ca50 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1ca3c:	e0bfff17 	ldw	r2,-4(fp)
   1ca40:	00c00044 	movi	r3,1
   1ca44:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ca48:	0005883a 	mov	r2,zero
   1ca4c:	00009c06 	br	1ccc0 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1ca50:	00800174 	movhi	r2,5
   1ca54:	108f9004 	addi	r2,r2,15936
   1ca58:	10800003 	ldbu	r2,0(r2)
   1ca5c:	10803fcc 	andi	r2,r2,255
   1ca60:	10000526 	beq	r2,zero,1ca78 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1ca64:	e0bfff17 	ldw	r2,-4(fp)
   1ca68:	00c00084 	movi	r3,2
   1ca6c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ca70:	0005883a 	mov	r2,zero
   1ca74:	00009206 	br	1ccc0 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1ca78:	00800174 	movhi	r2,5
   1ca7c:	108f8204 	addi	r2,r2,15880
   1ca80:	10800003 	ldbu	r2,0(r2)
   1ca84:	10803fcc 	andi	r2,r2,255
   1ca88:	10000526 	beq	r2,zero,1caa0 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1ca8c:	e0bfff17 	ldw	r2,-4(fp)
   1ca90:	00c00344 	movi	r3,13
   1ca94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ca98:	0005883a 	mov	r2,zero
   1ca9c:	00008806 	br	1ccc0 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1caa0:	0005303a 	rdctl	r2,status
   1caa4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1caa8:	e0fff817 	ldw	r3,-32(fp)
   1caac:	00bfff84 	movi	r2,-2
   1cab0:	1884703a 	and	r2,r3,r2
   1cab4:	1001703a 	wrctl	status,r2
  
  return context;
   1cab8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1cabc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1cac0:	e0bffd17 	ldw	r2,-12(fp)
   1cac4:	10800117 	ldw	r2,4(r2)
   1cac8:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1cacc:	e0bff717 	ldw	r2,-36(fp)
   1cad0:	1080058b 	ldhu	r2,22(r2)
   1cad4:	10bfffcc 	andi	r2,r2,65535
   1cad8:	10001e26 	beq	r2,zero,1cb54 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1cadc:	e0bff717 	ldw	r2,-36(fp)
   1cae0:	10800417 	ldw	r2,16(r2)
   1cae4:	11000104 	addi	r4,r2,4
   1cae8:	e0fff717 	ldw	r3,-36(fp)
   1caec:	19000415 	stw	r4,16(r3)
   1caf0:	10800017 	ldw	r2,0(r2)
   1caf4:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1caf8:	e0bff717 	ldw	r2,-36(fp)
   1cafc:	1080058b 	ldhu	r2,22(r2)
   1cb00:	10bfffc4 	addi	r2,r2,-1
   1cb04:	1007883a 	mov	r3,r2
   1cb08:	e0bff717 	ldw	r2,-36(fp)
   1cb0c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1cb10:	e0bff717 	ldw	r2,-36(fp)
   1cb14:	10c00417 	ldw	r3,16(r2)
   1cb18:	e0bff717 	ldw	r2,-36(fp)
   1cb1c:	10800217 	ldw	r2,8(r2)
   1cb20:	1880041e 	bne	r3,r2,1cb34 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   1cb24:	e0bff717 	ldw	r2,-36(fp)
   1cb28:	10c00117 	ldw	r3,4(r2)
   1cb2c:	e0bff717 	ldw	r2,-36(fp)
   1cb30:	10c00415 	stw	r3,16(r2)
   1cb34:	e0bff617 	ldw	r2,-40(fp)
   1cb38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb3c:	e0bff917 	ldw	r2,-28(fp)
   1cb40:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1cb44:	e0bfff17 	ldw	r2,-4(fp)
   1cb48:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1cb4c:	e0bff517 	ldw	r2,-44(fp)
   1cb50:	00005b06 	br	1ccc0 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1cb54:	00800174 	movhi	r2,5
   1cb58:	108f9104 	addi	r2,r2,15940
   1cb5c:	10c00017 	ldw	r3,0(r2)
   1cb60:	00800174 	movhi	r2,5
   1cb64:	108f9104 	addi	r2,r2,15940
   1cb68:	10800017 	ldw	r2,0(r2)
   1cb6c:	10800c03 	ldbu	r2,48(r2)
   1cb70:	10800114 	ori	r2,r2,4
   1cb74:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1cb78:	00800174 	movhi	r2,5
   1cb7c:	108f9104 	addi	r2,r2,15940
   1cb80:	10800017 	ldw	r2,0(r2)
   1cb84:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1cb88:	00800174 	movhi	r2,5
   1cb8c:	108f9104 	addi	r2,r2,15940
   1cb90:	10800017 	ldw	r2,0(r2)
   1cb94:	e0fffe0b 	ldhu	r3,-8(fp)
   1cb98:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1cb9c:	e13ffd17 	ldw	r4,-12(fp)
   1cba0:	00192a80 	call	192a8 <OS_EventTaskWait>
   1cba4:	e0bff617 	ldw	r2,-40(fp)
   1cba8:	e0bffa15 	stw	r2,-24(fp)
   1cbac:	e0bffa17 	ldw	r2,-24(fp)
   1cbb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1cbb4:	0019b280 	call	19b28 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cbb8:	0005303a 	rdctl	r2,status
   1cbbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cbc0:	e0fffb17 	ldw	r3,-20(fp)
   1cbc4:	00bfff84 	movi	r2,-2
   1cbc8:	1884703a 	and	r2,r3,r2
   1cbcc:	1001703a 	wrctl	status,r2
  
  return context;
   1cbd0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1cbd4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1cbd8:	00800174 	movhi	r2,5
   1cbdc:	108f9104 	addi	r2,r2,15940
   1cbe0:	10800017 	ldw	r2,0(r2)
   1cbe4:	10800c43 	ldbu	r2,49(r2)
   1cbe8:	10803fcc 	andi	r2,r2,255
   1cbec:	10000326 	beq	r2,zero,1cbfc <OSQPend+0x224>
   1cbf0:	108000a0 	cmpeqi	r2,r2,2
   1cbf4:	1000091e 	bne	r2,zero,1cc1c <OSQPend+0x244>
   1cbf8:	00000d06 	br	1cc30 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1cbfc:	00800174 	movhi	r2,5
   1cc00:	108f9104 	addi	r2,r2,15940
   1cc04:	10800017 	ldw	r2,0(r2)
   1cc08:	10800917 	ldw	r2,36(r2)
   1cc0c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1cc10:	e0bfff17 	ldw	r2,-4(fp)
   1cc14:	10000005 	stb	zero,0(r2)
             break;
   1cc18:	00001006 	br	1cc5c <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1cc1c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1cc20:	e0bfff17 	ldw	r2,-4(fp)
   1cc24:	00c00384 	movi	r3,14
   1cc28:	10c00005 	stb	r3,0(r2)
             break;
   1cc2c:	00000b06 	br	1cc5c <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1cc30:	00800174 	movhi	r2,5
   1cc34:	108f9104 	addi	r2,r2,15940
   1cc38:	10800017 	ldw	r2,0(r2)
   1cc3c:	1009883a 	mov	r4,r2
   1cc40:	e17ffd17 	ldw	r5,-12(fp)
   1cc44:	00195000 	call	19500 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1cc48:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1cc4c:	e0bfff17 	ldw	r2,-4(fp)
   1cc50:	00c00284 	movi	r3,10
   1cc54:	10c00005 	stb	r3,0(r2)
             break;
   1cc58:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1cc5c:	00800174 	movhi	r2,5
   1cc60:	108f9104 	addi	r2,r2,15940
   1cc64:	10800017 	ldw	r2,0(r2)
   1cc68:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1cc6c:	00800174 	movhi	r2,5
   1cc70:	108f9104 	addi	r2,r2,15940
   1cc74:	10800017 	ldw	r2,0(r2)
   1cc78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1cc7c:	00800174 	movhi	r2,5
   1cc80:	108f9104 	addi	r2,r2,15940
   1cc84:	10800017 	ldw	r2,0(r2)
   1cc88:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1cc8c:	00800174 	movhi	r2,5
   1cc90:	108f9104 	addi	r2,r2,15940
   1cc94:	10800017 	ldw	r2,0(r2)
   1cc98:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1cc9c:	00800174 	movhi	r2,5
   1cca0:	108f9104 	addi	r2,r2,15940
   1cca4:	10800017 	ldw	r2,0(r2)
   1cca8:	10000915 	stw	zero,36(r2)
   1ccac:	e0bff617 	ldw	r2,-40(fp)
   1ccb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ccb4:	e0bffc17 	ldw	r2,-16(fp)
   1ccb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1ccbc:	e0bff517 	ldw	r2,-44(fp)
}
   1ccc0:	e037883a 	mov	sp,fp
   1ccc4:	dfc00117 	ldw	ra,4(sp)
   1ccc8:	df000017 	ldw	fp,0(sp)
   1cccc:	dec00204 	addi	sp,sp,8
   1ccd0:	f800283a 	ret

0001ccd4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1ccd4:	defff604 	addi	sp,sp,-40
   1ccd8:	dfc00915 	stw	ra,36(sp)
   1ccdc:	df000815 	stw	fp,32(sp)
   1cce0:	df000804 	addi	fp,sp,32
   1cce4:	e13ffd15 	stw	r4,-12(fp)
   1cce8:	2805883a 	mov	r2,r5
   1ccec:	e1bfff15 	stw	r6,-4(fp)
   1ccf0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1ccf4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1ccf8:	e0bfff17 	ldw	r2,-4(fp)
   1ccfc:	1000021e 	bne	r2,zero,1cd08 <OSQPendAbort+0x34>
        return (0);
   1cd00:	0005883a 	mov	r2,zero
   1cd04:	00004906 	br	1ce2c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1cd08:	e0bffd17 	ldw	r2,-12(fp)
   1cd0c:	1000051e 	bne	r2,zero,1cd24 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1cd10:	e0bfff17 	ldw	r2,-4(fp)
   1cd14:	00c00104 	movi	r3,4
   1cd18:	10c00005 	stb	r3,0(r2)
        return (0);
   1cd1c:	0005883a 	mov	r2,zero
   1cd20:	00004206 	br	1ce2c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1cd24:	e0bffd17 	ldw	r2,-12(fp)
   1cd28:	10800003 	ldbu	r2,0(r2)
   1cd2c:	10803fcc 	andi	r2,r2,255
   1cd30:	108000a0 	cmpeqi	r2,r2,2
   1cd34:	1000051e 	bne	r2,zero,1cd4c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1cd38:	e0bfff17 	ldw	r2,-4(fp)
   1cd3c:	00c00044 	movi	r3,1
   1cd40:	10c00005 	stb	r3,0(r2)
        return (0);
   1cd44:	0005883a 	mov	r2,zero
   1cd48:	00003806 	br	1ce2c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cd4c:	0005303a 	rdctl	r2,status
   1cd50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cd54:	e0fffa17 	ldw	r3,-24(fp)
   1cd58:	00bfff84 	movi	r2,-2
   1cd5c:	1884703a 	and	r2,r3,r2
   1cd60:	1001703a 	wrctl	status,r2
  
  return context;
   1cd64:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1cd68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1cd6c:	e0bffd17 	ldw	r2,-12(fp)
   1cd70:	10800283 	ldbu	r2,10(r2)
   1cd74:	10803fcc 	andi	r2,r2,255
   1cd78:	10002526 	beq	r2,zero,1ce10 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1cd7c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1cd80:	e0bffe03 	ldbu	r2,-8(fp)
   1cd84:	10800060 	cmpeqi	r2,r2,1
   1cd88:	10000e26 	beq	r2,zero,1cdc4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1cd8c:	00000806 	br	1cdb0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1cd90:	e13ffd17 	ldw	r4,-12(fp)
   1cd94:	000b883a 	mov	r5,zero
   1cd98:	01800104 	movi	r6,4
   1cd9c:	01c00084 	movi	r7,2
   1cda0:	00191100 	call	19110 <OS_EventTaskRdy>
                     nbr_tasks++;
   1cda4:	e0bff803 	ldbu	r2,-32(fp)
   1cda8:	10800044 	addi	r2,r2,1
   1cdac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1cdb0:	e0bffd17 	ldw	r2,-12(fp)
   1cdb4:	10800283 	ldbu	r2,10(r2)
   1cdb8:	10803fcc 	andi	r2,r2,255
   1cdbc:	103ff41e 	bne	r2,zero,1cd90 <__alt_mem_descriptor_memory+0xdefdcd90>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1cdc0:	00000906 	br	1cde8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1cdc4:	e13ffd17 	ldw	r4,-12(fp)
   1cdc8:	000b883a 	mov	r5,zero
   1cdcc:	01800104 	movi	r6,4
   1cdd0:	01c00084 	movi	r7,2
   1cdd4:	00191100 	call	19110 <OS_EventTaskRdy>
                 nbr_tasks++;
   1cdd8:	e0bff803 	ldbu	r2,-32(fp)
   1cddc:	10800044 	addi	r2,r2,1
   1cde0:	e0bff805 	stb	r2,-32(fp)
                 break;
   1cde4:	0001883a 	nop
   1cde8:	e0bff917 	ldw	r2,-28(fp)
   1cdec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cdf0:	e0bffb17 	ldw	r2,-20(fp)
   1cdf4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1cdf8:	0019b280 	call	19b28 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1cdfc:	e0bfff17 	ldw	r2,-4(fp)
   1ce00:	00c00384 	movi	r3,14
   1ce04:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1ce08:	e0bff803 	ldbu	r2,-32(fp)
   1ce0c:	00000706 	br	1ce2c <OSQPendAbort+0x158>
   1ce10:	e0bff917 	ldw	r2,-28(fp)
   1ce14:	e0bffc15 	stw	r2,-16(fp)
   1ce18:	e0bffc17 	ldw	r2,-16(fp)
   1ce1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ce20:	e0bfff17 	ldw	r2,-4(fp)
   1ce24:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1ce28:	0005883a 	mov	r2,zero
}
   1ce2c:	e037883a 	mov	sp,fp
   1ce30:	dfc00117 	ldw	ra,4(sp)
   1ce34:	df000017 	ldw	fp,0(sp)
   1ce38:	dec00204 	addi	sp,sp,8
   1ce3c:	f800283a 	ret

0001ce40 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1ce40:	defff604 	addi	sp,sp,-40
   1ce44:	dfc00915 	stw	ra,36(sp)
   1ce48:	df000815 	stw	fp,32(sp)
   1ce4c:	df000804 	addi	fp,sp,32
   1ce50:	e13ffe15 	stw	r4,-8(fp)
   1ce54:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ce58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1ce5c:	e0bffe17 	ldw	r2,-8(fp)
   1ce60:	1000021e 	bne	r2,zero,1ce6c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1ce64:	00800104 	movi	r2,4
   1ce68:	00004a06 	br	1cf94 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1ce6c:	e0bffe17 	ldw	r2,-8(fp)
   1ce70:	10800003 	ldbu	r2,0(r2)
   1ce74:	10803fcc 	andi	r2,r2,255
   1ce78:	108000a0 	cmpeqi	r2,r2,2
   1ce7c:	1000021e 	bne	r2,zero,1ce88 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1ce80:	00800044 	movi	r2,1
   1ce84:	00004306 	br	1cf94 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ce88:	0005303a 	rdctl	r2,status
   1ce8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ce90:	e0fffa17 	ldw	r3,-24(fp)
   1ce94:	00bfff84 	movi	r2,-2
   1ce98:	1884703a 	and	r2,r3,r2
   1ce9c:	1001703a 	wrctl	status,r2
  
  return context;
   1cea0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1cea4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1cea8:	e0bffe17 	ldw	r2,-8(fp)
   1ceac:	10800283 	ldbu	r2,10(r2)
   1ceb0:	10803fcc 	andi	r2,r2,255
   1ceb4:	10000c26 	beq	r2,zero,1cee8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1ceb8:	e13ffe17 	ldw	r4,-8(fp)
   1cebc:	e17fff17 	ldw	r5,-4(fp)
   1cec0:	01800104 	movi	r6,4
   1cec4:	000f883a 	mov	r7,zero
   1cec8:	00191100 	call	19110 <OS_EventTaskRdy>
   1cecc:	e0bff817 	ldw	r2,-32(fp)
   1ced0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ced4:	e0bffb17 	ldw	r2,-20(fp)
   1ced8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1cedc:	0019b280 	call	19b28 <OS_Sched>
        return (OS_ERR_NONE);
   1cee0:	0005883a 	mov	r2,zero
   1cee4:	00002b06 	br	1cf94 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1cee8:	e0bffe17 	ldw	r2,-8(fp)
   1ceec:	10800117 	ldw	r2,4(r2)
   1cef0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1cef4:	e0bff917 	ldw	r2,-28(fp)
   1cef8:	10c0058b 	ldhu	r3,22(r2)
   1cefc:	e0bff917 	ldw	r2,-28(fp)
   1cf00:	1080050b 	ldhu	r2,20(r2)
   1cf04:	18ffffcc 	andi	r3,r3,65535
   1cf08:	10bfffcc 	andi	r2,r2,65535
   1cf0c:	18800636 	bltu	r3,r2,1cf28 <OSQPost+0xe8>
   1cf10:	e0bff817 	ldw	r2,-32(fp)
   1cf14:	e0bffc15 	stw	r2,-16(fp)
   1cf18:	e0bffc17 	ldw	r2,-16(fp)
   1cf1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1cf20:	00800784 	movi	r2,30
   1cf24:	00001b06 	br	1cf94 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1cf28:	e0bff917 	ldw	r2,-28(fp)
   1cf2c:	10800317 	ldw	r2,12(r2)
   1cf30:	11000104 	addi	r4,r2,4
   1cf34:	e0fff917 	ldw	r3,-28(fp)
   1cf38:	19000315 	stw	r4,12(r3)
   1cf3c:	e0ffff17 	ldw	r3,-4(fp)
   1cf40:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1cf44:	e0bff917 	ldw	r2,-28(fp)
   1cf48:	1080058b 	ldhu	r2,22(r2)
   1cf4c:	10800044 	addi	r2,r2,1
   1cf50:	1007883a 	mov	r3,r2
   1cf54:	e0bff917 	ldw	r2,-28(fp)
   1cf58:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1cf5c:	e0bff917 	ldw	r2,-28(fp)
   1cf60:	10c00317 	ldw	r3,12(r2)
   1cf64:	e0bff917 	ldw	r2,-28(fp)
   1cf68:	10800217 	ldw	r2,8(r2)
   1cf6c:	1880041e 	bne	r3,r2,1cf80 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1cf70:	e0bff917 	ldw	r2,-28(fp)
   1cf74:	10c00117 	ldw	r3,4(r2)
   1cf78:	e0bff917 	ldw	r2,-28(fp)
   1cf7c:	10c00315 	stw	r3,12(r2)
   1cf80:	e0bff817 	ldw	r2,-32(fp)
   1cf84:	e0bffd15 	stw	r2,-12(fp)
   1cf88:	e0bffd17 	ldw	r2,-12(fp)
   1cf8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1cf90:	0005883a 	mov	r2,zero
}
   1cf94:	e037883a 	mov	sp,fp
   1cf98:	dfc00117 	ldw	ra,4(sp)
   1cf9c:	df000017 	ldw	fp,0(sp)
   1cfa0:	dec00204 	addi	sp,sp,8
   1cfa4:	f800283a 	ret

0001cfa8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1cfa8:	defff604 	addi	sp,sp,-40
   1cfac:	dfc00915 	stw	ra,36(sp)
   1cfb0:	df000815 	stw	fp,32(sp)
   1cfb4:	df000804 	addi	fp,sp,32
   1cfb8:	e13ffe15 	stw	r4,-8(fp)
   1cfbc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1cfc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1cfc4:	e0bffe17 	ldw	r2,-8(fp)
   1cfc8:	1000021e 	bne	r2,zero,1cfd4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1cfcc:	00800104 	movi	r2,4
   1cfd0:	00004c06 	br	1d104 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1cfd4:	e0bffe17 	ldw	r2,-8(fp)
   1cfd8:	10800003 	ldbu	r2,0(r2)
   1cfdc:	10803fcc 	andi	r2,r2,255
   1cfe0:	108000a0 	cmpeqi	r2,r2,2
   1cfe4:	1000021e 	bne	r2,zero,1cff0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1cfe8:	00800044 	movi	r2,1
   1cfec:	00004506 	br	1d104 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cff0:	0005303a 	rdctl	r2,status
   1cff4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cff8:	e0fffa17 	ldw	r3,-24(fp)
   1cffc:	00bfff84 	movi	r2,-2
   1d000:	1884703a 	and	r2,r3,r2
   1d004:	1001703a 	wrctl	status,r2
  
  return context;
   1d008:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1d00c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1d010:	e0bffe17 	ldw	r2,-8(fp)
   1d014:	10800283 	ldbu	r2,10(r2)
   1d018:	10803fcc 	andi	r2,r2,255
   1d01c:	10000c26 	beq	r2,zero,1d050 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1d020:	e13ffe17 	ldw	r4,-8(fp)
   1d024:	e17fff17 	ldw	r5,-4(fp)
   1d028:	01800104 	movi	r6,4
   1d02c:	000f883a 	mov	r7,zero
   1d030:	00191100 	call	19110 <OS_EventTaskRdy>
   1d034:	e0bff817 	ldw	r2,-32(fp)
   1d038:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d03c:	e0bffb17 	ldw	r2,-20(fp)
   1d040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1d044:	0019b280 	call	19b28 <OS_Sched>
        return (OS_ERR_NONE);
   1d048:	0005883a 	mov	r2,zero
   1d04c:	00002d06 	br	1d104 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1d050:	e0bffe17 	ldw	r2,-8(fp)
   1d054:	10800117 	ldw	r2,4(r2)
   1d058:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1d05c:	e0bff917 	ldw	r2,-28(fp)
   1d060:	10c0058b 	ldhu	r3,22(r2)
   1d064:	e0bff917 	ldw	r2,-28(fp)
   1d068:	1080050b 	ldhu	r2,20(r2)
   1d06c:	18ffffcc 	andi	r3,r3,65535
   1d070:	10bfffcc 	andi	r2,r2,65535
   1d074:	18800636 	bltu	r3,r2,1d090 <OSQPostFront+0xe8>
   1d078:	e0bff817 	ldw	r2,-32(fp)
   1d07c:	e0bffc15 	stw	r2,-16(fp)
   1d080:	e0bffc17 	ldw	r2,-16(fp)
   1d084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1d088:	00800784 	movi	r2,30
   1d08c:	00001d06 	br	1d104 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1d090:	e0bff917 	ldw	r2,-28(fp)
   1d094:	10c00417 	ldw	r3,16(r2)
   1d098:	e0bff917 	ldw	r2,-28(fp)
   1d09c:	10800117 	ldw	r2,4(r2)
   1d0a0:	1880041e 	bne	r3,r2,1d0b4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1d0a4:	e0bff917 	ldw	r2,-28(fp)
   1d0a8:	10c00217 	ldw	r3,8(r2)
   1d0ac:	e0bff917 	ldw	r2,-28(fp)
   1d0b0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1d0b4:	e0bff917 	ldw	r2,-28(fp)
   1d0b8:	10800417 	ldw	r2,16(r2)
   1d0bc:	10ffff04 	addi	r3,r2,-4
   1d0c0:	e0bff917 	ldw	r2,-28(fp)
   1d0c4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1d0c8:	e0bff917 	ldw	r2,-28(fp)
   1d0cc:	10800417 	ldw	r2,16(r2)
   1d0d0:	e0ffff17 	ldw	r3,-4(fp)
   1d0d4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1d0d8:	e0bff917 	ldw	r2,-28(fp)
   1d0dc:	1080058b 	ldhu	r2,22(r2)
   1d0e0:	10800044 	addi	r2,r2,1
   1d0e4:	1007883a 	mov	r3,r2
   1d0e8:	e0bff917 	ldw	r2,-28(fp)
   1d0ec:	10c0058d 	sth	r3,22(r2)
   1d0f0:	e0bff817 	ldw	r2,-32(fp)
   1d0f4:	e0bffd15 	stw	r2,-12(fp)
   1d0f8:	e0bffd17 	ldw	r2,-12(fp)
   1d0fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1d100:	0005883a 	mov	r2,zero
}
   1d104:	e037883a 	mov	sp,fp
   1d108:	dfc00117 	ldw	ra,4(sp)
   1d10c:	df000017 	ldw	fp,0(sp)
   1d110:	dec00204 	addi	sp,sp,8
   1d114:	f800283a 	ret

0001d118 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1d118:	defff504 	addi	sp,sp,-44
   1d11c:	dfc00a15 	stw	ra,40(sp)
   1d120:	df000915 	stw	fp,36(sp)
   1d124:	df000904 	addi	fp,sp,36
   1d128:	e13ffd15 	stw	r4,-12(fp)
   1d12c:	e17ffe15 	stw	r5,-8(fp)
   1d130:	3005883a 	mov	r2,r6
   1d134:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d138:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d13c:	e0bffd17 	ldw	r2,-12(fp)
   1d140:	1000021e 	bne	r2,zero,1d14c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1d144:	00800104 	movi	r2,4
   1d148:	00007106 	br	1d310 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1d14c:	e0bffd17 	ldw	r2,-12(fp)
   1d150:	10800003 	ldbu	r2,0(r2)
   1d154:	10803fcc 	andi	r2,r2,255
   1d158:	108000a0 	cmpeqi	r2,r2,2
   1d15c:	1000021e 	bne	r2,zero,1d168 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1d160:	00800044 	movi	r2,1
   1d164:	00006a06 	br	1d310 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d168:	0005303a 	rdctl	r2,status
   1d16c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d170:	e0fff917 	ldw	r3,-28(fp)
   1d174:	00bfff84 	movi	r2,-2
   1d178:	1884703a 	and	r2,r3,r2
   1d17c:	1001703a 	wrctl	status,r2
  
  return context;
   1d180:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1d184:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1d188:	e0bffd17 	ldw	r2,-12(fp)
   1d18c:	10800283 	ldbu	r2,10(r2)
   1d190:	10803fcc 	andi	r2,r2,255
   1d194:	10001d26 	beq	r2,zero,1d20c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1d198:	e0bfff03 	ldbu	r2,-4(fp)
   1d19c:	1080004c 	andi	r2,r2,1
   1d1a0:	10000b26 	beq	r2,zero,1d1d0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1d1a4:	00000506 	br	1d1bc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1d1a8:	e13ffd17 	ldw	r4,-12(fp)
   1d1ac:	e17ffe17 	ldw	r5,-8(fp)
   1d1b0:	01800104 	movi	r6,4
   1d1b4:	000f883a 	mov	r7,zero
   1d1b8:	00191100 	call	19110 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1d1bc:	e0bffd17 	ldw	r2,-12(fp)
   1d1c0:	10800283 	ldbu	r2,10(r2)
   1d1c4:	10803fcc 	andi	r2,r2,255
   1d1c8:	103ff71e 	bne	r2,zero,1d1a8 <__alt_mem_descriptor_memory+0xdefdd1a8>
   1d1cc:	00000506 	br	1d1e4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1d1d0:	e13ffd17 	ldw	r4,-12(fp)
   1d1d4:	e17ffe17 	ldw	r5,-8(fp)
   1d1d8:	01800104 	movi	r6,4
   1d1dc:	000f883a 	mov	r7,zero
   1d1e0:	00191100 	call	19110 <OS_EventTaskRdy>
   1d1e4:	e0bff717 	ldw	r2,-36(fp)
   1d1e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d1ec:	e0bffa17 	ldw	r2,-24(fp)
   1d1f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1d1f4:	e0bfff03 	ldbu	r2,-4(fp)
   1d1f8:	1080010c 	andi	r2,r2,4
   1d1fc:	1000011e 	bne	r2,zero,1d204 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1d200:	0019b280 	call	19b28 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1d204:	0005883a 	mov	r2,zero
   1d208:	00004106 	br	1d310 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1d20c:	e0bffd17 	ldw	r2,-12(fp)
   1d210:	10800117 	ldw	r2,4(r2)
   1d214:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1d218:	e0bff817 	ldw	r2,-32(fp)
   1d21c:	10c0058b 	ldhu	r3,22(r2)
   1d220:	e0bff817 	ldw	r2,-32(fp)
   1d224:	1080050b 	ldhu	r2,20(r2)
   1d228:	18ffffcc 	andi	r3,r3,65535
   1d22c:	10bfffcc 	andi	r2,r2,65535
   1d230:	18800636 	bltu	r3,r2,1d24c <OSQPostOpt+0x134>
   1d234:	e0bff717 	ldw	r2,-36(fp)
   1d238:	e0bffb15 	stw	r2,-20(fp)
   1d23c:	e0bffb17 	ldw	r2,-20(fp)
   1d240:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1d244:	00800784 	movi	r2,30
   1d248:	00003106 	br	1d310 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1d24c:	e0bfff03 	ldbu	r2,-4(fp)
   1d250:	1080008c 	andi	r2,r2,2
   1d254:	10001326 	beq	r2,zero,1d2a4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1d258:	e0bff817 	ldw	r2,-32(fp)
   1d25c:	10c00417 	ldw	r3,16(r2)
   1d260:	e0bff817 	ldw	r2,-32(fp)
   1d264:	10800117 	ldw	r2,4(r2)
   1d268:	1880041e 	bne	r3,r2,1d27c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1d26c:	e0bff817 	ldw	r2,-32(fp)
   1d270:	10c00217 	ldw	r3,8(r2)
   1d274:	e0bff817 	ldw	r2,-32(fp)
   1d278:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1d27c:	e0bff817 	ldw	r2,-32(fp)
   1d280:	10800417 	ldw	r2,16(r2)
   1d284:	10ffff04 	addi	r3,r2,-4
   1d288:	e0bff817 	ldw	r2,-32(fp)
   1d28c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1d290:	e0bff817 	ldw	r2,-32(fp)
   1d294:	10800417 	ldw	r2,16(r2)
   1d298:	e0fffe17 	ldw	r3,-8(fp)
   1d29c:	10c00015 	stw	r3,0(r2)
   1d2a0:	00001006 	br	1d2e4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1d2a4:	e0bff817 	ldw	r2,-32(fp)
   1d2a8:	10800317 	ldw	r2,12(r2)
   1d2ac:	11000104 	addi	r4,r2,4
   1d2b0:	e0fff817 	ldw	r3,-32(fp)
   1d2b4:	19000315 	stw	r4,12(r3)
   1d2b8:	e0fffe17 	ldw	r3,-8(fp)
   1d2bc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1d2c0:	e0bff817 	ldw	r2,-32(fp)
   1d2c4:	10c00317 	ldw	r3,12(r2)
   1d2c8:	e0bff817 	ldw	r2,-32(fp)
   1d2cc:	10800217 	ldw	r2,8(r2)
   1d2d0:	1880041e 	bne	r3,r2,1d2e4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1d2d4:	e0bff817 	ldw	r2,-32(fp)
   1d2d8:	10c00117 	ldw	r3,4(r2)
   1d2dc:	e0bff817 	ldw	r2,-32(fp)
   1d2e0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1d2e4:	e0bff817 	ldw	r2,-32(fp)
   1d2e8:	1080058b 	ldhu	r2,22(r2)
   1d2ec:	10800044 	addi	r2,r2,1
   1d2f0:	1007883a 	mov	r3,r2
   1d2f4:	e0bff817 	ldw	r2,-32(fp)
   1d2f8:	10c0058d 	sth	r3,22(r2)
   1d2fc:	e0bff717 	ldw	r2,-36(fp)
   1d300:	e0bffc15 	stw	r2,-16(fp)
   1d304:	e0bffc17 	ldw	r2,-16(fp)
   1d308:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1d30c:	0005883a 	mov	r2,zero
}
   1d310:	e037883a 	mov	sp,fp
   1d314:	dfc00117 	ldw	ra,4(sp)
   1d318:	df000017 	ldw	fp,0(sp)
   1d31c:	dec00204 	addi	sp,sp,8
   1d320:	f800283a 	ret

0001d324 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1d324:	defff604 	addi	sp,sp,-40
   1d328:	df000915 	stw	fp,36(sp)
   1d32c:	df000904 	addi	fp,sp,36
   1d330:	e13ffe15 	stw	r4,-8(fp)
   1d334:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1d338:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1d33c:	e0bffe17 	ldw	r2,-8(fp)
   1d340:	1000021e 	bne	r2,zero,1d34c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1d344:	00800104 	movi	r2,4
   1d348:	00004906 	br	1d470 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1d34c:	e0bfff17 	ldw	r2,-4(fp)
   1d350:	1000021e 	bne	r2,zero,1d35c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1d354:	00800244 	movi	r2,9
   1d358:	00004506 	br	1d470 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1d35c:	e0bffe17 	ldw	r2,-8(fp)
   1d360:	10800003 	ldbu	r2,0(r2)
   1d364:	10803fcc 	andi	r2,r2,255
   1d368:	108000a0 	cmpeqi	r2,r2,2
   1d36c:	1000021e 	bne	r2,zero,1d378 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1d370:	00800044 	movi	r2,1
   1d374:	00003e06 	br	1d470 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d378:	0005303a 	rdctl	r2,status
   1d37c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d380:	e0fffc17 	ldw	r3,-16(fp)
   1d384:	00bfff84 	movi	r2,-2
   1d388:	1884703a 	and	r2,r3,r2
   1d38c:	1001703a 	wrctl	status,r2
  
  return context;
   1d390:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d394:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1d398:	e0bffe17 	ldw	r2,-8(fp)
   1d39c:	10c00283 	ldbu	r3,10(r2)
   1d3a0:	e0bfff17 	ldw	r2,-4(fp)
   1d3a4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1d3a8:	e0bffe17 	ldw	r2,-8(fp)
   1d3ac:	108002c4 	addi	r2,r2,11
   1d3b0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1d3b4:	e0bfff17 	ldw	r2,-4(fp)
   1d3b8:	10800204 	addi	r2,r2,8
   1d3bc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d3c0:	e03ff705 	stb	zero,-36(fp)
   1d3c4:	00000b06 	br	1d3f4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1d3c8:	e0bff917 	ldw	r2,-28(fp)
   1d3cc:	10c00044 	addi	r3,r2,1
   1d3d0:	e0fff915 	stw	r3,-28(fp)
   1d3d4:	e0fff817 	ldw	r3,-32(fp)
   1d3d8:	19000044 	addi	r4,r3,1
   1d3dc:	e13ff815 	stw	r4,-32(fp)
   1d3e0:	18c00003 	ldbu	r3,0(r3)
   1d3e4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d3e8:	e0bff703 	ldbu	r2,-36(fp)
   1d3ec:	10800044 	addi	r2,r2,1
   1d3f0:	e0bff705 	stb	r2,-36(fp)
   1d3f4:	e0bff703 	ldbu	r2,-36(fp)
   1d3f8:	108000f0 	cmpltui	r2,r2,3
   1d3fc:	103ff21e 	bne	r2,zero,1d3c8 <__alt_mem_descriptor_memory+0xdefdd3c8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1d400:	e0bffe17 	ldw	r2,-8(fp)
   1d404:	10800117 	ldw	r2,4(r2)
   1d408:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   1d40c:	e0bffb17 	ldw	r2,-20(fp)
   1d410:	1080058b 	ldhu	r2,22(r2)
   1d414:	10bfffcc 	andi	r2,r2,65535
   1d418:	10000626 	beq	r2,zero,1d434 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1d41c:	e0bffb17 	ldw	r2,-20(fp)
   1d420:	10800417 	ldw	r2,16(r2)
   1d424:	10c00017 	ldw	r3,0(r2)
   1d428:	e0bfff17 	ldw	r2,-4(fp)
   1d42c:	10c00015 	stw	r3,0(r2)
   1d430:	00000206 	br	1d43c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1d434:	e0bfff17 	ldw	r2,-4(fp)
   1d438:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1d43c:	e0bffb17 	ldw	r2,-20(fp)
   1d440:	10c0058b 	ldhu	r3,22(r2)
   1d444:	e0bfff17 	ldw	r2,-4(fp)
   1d448:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1d44c:	e0bffb17 	ldw	r2,-20(fp)
   1d450:	10c0050b 	ldhu	r3,20(r2)
   1d454:	e0bfff17 	ldw	r2,-4(fp)
   1d458:	10c0018d 	sth	r3,6(r2)
   1d45c:	e0bffa17 	ldw	r2,-24(fp)
   1d460:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d464:	e0bffd17 	ldw	r2,-12(fp)
   1d468:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1d46c:	0005883a 	mov	r2,zero
}
   1d470:	e037883a 	mov	sp,fp
   1d474:	df000017 	ldw	fp,0(sp)
   1d478:	dec00104 	addi	sp,sp,4
   1d47c:	f800283a 	ret

0001d480 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1d480:	defffb04 	addi	sp,sp,-20
   1d484:	dfc00415 	stw	ra,16(sp)
   1d488:	df000315 	stw	fp,12(sp)
   1d48c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1d490:	010001b4 	movhi	r4,6
   1d494:	212fa504 	addi	r4,r4,-16748
   1d498:	01407804 	movi	r5,480
   1d49c:	0019a740 	call	19a74 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1d4a0:	008001b4 	movhi	r2,6
   1d4a4:	10afa504 	addi	r2,r2,-16748
   1d4a8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1d4ac:	008001b4 	movhi	r2,6
   1d4b0:	10afab04 	addi	r2,r2,-16724
   1d4b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1d4b8:	e03ffd0d 	sth	zero,-12(fp)
   1d4bc:	00000c06 	br	1d4f0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1d4c0:	e0bffe17 	ldw	r2,-8(fp)
   1d4c4:	e0ffff17 	ldw	r3,-4(fp)
   1d4c8:	10c00015 	stw	r3,0(r2)
        pq1++;
   1d4cc:	e0bffe17 	ldw	r2,-8(fp)
   1d4d0:	10800604 	addi	r2,r2,24
   1d4d4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1d4d8:	e0bfff17 	ldw	r2,-4(fp)
   1d4dc:	10800604 	addi	r2,r2,24
   1d4e0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1d4e4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d4e8:	10800044 	addi	r2,r2,1
   1d4ec:	e0bffd0d 	sth	r2,-12(fp)
   1d4f0:	e0bffd0b 	ldhu	r2,-12(fp)
   1d4f4:	108004f0 	cmpltui	r2,r2,19
   1d4f8:	103ff11e 	bne	r2,zero,1d4c0 <__alt_mem_descriptor_memory+0xdefdd4c0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1d4fc:	e0bffe17 	ldw	r2,-8(fp)
   1d500:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1d504:	00800174 	movhi	r2,5
   1d508:	108f8d04 	addi	r2,r2,15924
   1d50c:	00c001b4 	movhi	r3,6
   1d510:	18efa504 	addi	r3,r3,-16748
   1d514:	10c00015 	stw	r3,0(r2)
#endif
}
   1d518:	e037883a 	mov	sp,fp
   1d51c:	dfc00117 	ldw	ra,4(sp)
   1d520:	df000017 	ldw	fp,0(sp)
   1d524:	dec00204 	addi	sp,sp,8
   1d528:	f800283a 	ret

0001d52c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1d52c:	defffa04 	addi	sp,sp,-24
   1d530:	df000515 	stw	fp,20(sp)
   1d534:	df000504 	addi	fp,sp,20
   1d538:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d53c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d540:	e0bfff17 	ldw	r2,-4(fp)
   1d544:	1000021e 	bne	r2,zero,1d550 <OSSemAccept+0x24>
        return (0);
   1d548:	0005883a 	mov	r2,zero
   1d54c:	00001f06 	br	1d5cc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d550:	e0bfff17 	ldw	r2,-4(fp)
   1d554:	10800003 	ldbu	r2,0(r2)
   1d558:	10803fcc 	andi	r2,r2,255
   1d55c:	108000e0 	cmpeqi	r2,r2,3
   1d560:	1000021e 	bne	r2,zero,1d56c <OSSemAccept+0x40>
        return (0);
   1d564:	0005883a 	mov	r2,zero
   1d568:	00001806 	br	1d5cc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d56c:	0005303a 	rdctl	r2,status
   1d570:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d574:	e0fffd17 	ldw	r3,-12(fp)
   1d578:	00bfff84 	movi	r2,-2
   1d57c:	1884703a 	and	r2,r3,r2
   1d580:	1001703a 	wrctl	status,r2
  
  return context;
   1d584:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1d588:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1d58c:	e0bfff17 	ldw	r2,-4(fp)
   1d590:	1080020b 	ldhu	r2,8(r2)
   1d594:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1d598:	e0bffc0b 	ldhu	r2,-16(fp)
   1d59c:	10000626 	beq	r2,zero,1d5b8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1d5a0:	e0bfff17 	ldw	r2,-4(fp)
   1d5a4:	1080020b 	ldhu	r2,8(r2)
   1d5a8:	10bfffc4 	addi	r2,r2,-1
   1d5ac:	1007883a 	mov	r3,r2
   1d5b0:	e0bfff17 	ldw	r2,-4(fp)
   1d5b4:	10c0020d 	sth	r3,8(r2)
   1d5b8:	e0bffb17 	ldw	r2,-20(fp)
   1d5bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d5c0:	e0bffe17 	ldw	r2,-8(fp)
   1d5c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1d5c8:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1d5cc:	e037883a 	mov	sp,fp
   1d5d0:	df000017 	ldw	fp,0(sp)
   1d5d4:	dec00104 	addi	sp,sp,4
   1d5d8:	f800283a 	ret

0001d5dc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1d5dc:	defff904 	addi	sp,sp,-28
   1d5e0:	dfc00615 	stw	ra,24(sp)
   1d5e4:	df000515 	stw	fp,20(sp)
   1d5e8:	df000504 	addi	fp,sp,20
   1d5ec:	2005883a 	mov	r2,r4
   1d5f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d5f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d5f8:	00800174 	movhi	r2,5
   1d5fc:	108f9004 	addi	r2,r2,15936
   1d600:	10800003 	ldbu	r2,0(r2)
   1d604:	10803fcc 	andi	r2,r2,255
   1d608:	10000226 	beq	r2,zero,1d614 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1d60c:	0005883a 	mov	r2,zero
   1d610:	00002d06 	br	1d6c8 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d614:	0005303a 	rdctl	r2,status
   1d618:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d61c:	e0fffd17 	ldw	r3,-12(fp)
   1d620:	00bfff84 	movi	r2,-2
   1d624:	1884703a 	and	r2,r3,r2
   1d628:	1001703a 	wrctl	status,r2
  
  return context;
   1d62c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1d630:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1d634:	00800174 	movhi	r2,5
   1d638:	108f8f04 	addi	r2,r2,15932
   1d63c:	10800017 	ldw	r2,0(r2)
   1d640:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1d644:	00800174 	movhi	r2,5
   1d648:	108f8f04 	addi	r2,r2,15932
   1d64c:	10800017 	ldw	r2,0(r2)
   1d650:	10000726 	beq	r2,zero,1d670 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1d654:	00800174 	movhi	r2,5
   1d658:	108f8f04 	addi	r2,r2,15932
   1d65c:	10800017 	ldw	r2,0(r2)
   1d660:	10c00117 	ldw	r3,4(r2)
   1d664:	00800174 	movhi	r2,5
   1d668:	108f8f04 	addi	r2,r2,15932
   1d66c:	10c00015 	stw	r3,0(r2)
   1d670:	e0bffb17 	ldw	r2,-20(fp)
   1d674:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d678:	e0bffe17 	ldw	r2,-8(fp)
   1d67c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1d680:	e0bffc17 	ldw	r2,-16(fp)
   1d684:	10000f26 	beq	r2,zero,1d6c4 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1d688:	e0bffc17 	ldw	r2,-16(fp)
   1d68c:	00c000c4 	movi	r3,3
   1d690:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1d694:	e0bffc17 	ldw	r2,-16(fp)
   1d698:	e0ffff0b 	ldhu	r3,-4(fp)
   1d69c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1d6a0:	e0bffc17 	ldw	r2,-16(fp)
   1d6a4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1d6a8:	e0bffc17 	ldw	r2,-16(fp)
   1d6ac:	00c00fc4 	movi	r3,63
   1d6b0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1d6b4:	e0bffc17 	ldw	r2,-16(fp)
   1d6b8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1d6bc:	e13ffc17 	ldw	r4,-16(fp)
   1d6c0:	00196b00 	call	196b0 <OS_EventWaitListInit>
    }
    return (pevent);
   1d6c4:	e0bffc17 	ldw	r2,-16(fp)
}
   1d6c8:	e037883a 	mov	sp,fp
   1d6cc:	dfc00117 	ldw	ra,4(sp)
   1d6d0:	df000017 	ldw	fp,0(sp)
   1d6d4:	dec00204 	addi	sp,sp,8
   1d6d8:	f800283a 	ret

0001d6dc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1d6dc:	defff304 	addi	sp,sp,-52
   1d6e0:	dfc00c15 	stw	ra,48(sp)
   1d6e4:	df000b15 	stw	fp,44(sp)
   1d6e8:	df000b04 	addi	fp,sp,44
   1d6ec:	e13ffd15 	stw	r4,-12(fp)
   1d6f0:	2805883a 	mov	r2,r5
   1d6f4:	e1bfff15 	stw	r6,-4(fp)
   1d6f8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d6fc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d700:	e0bfff17 	ldw	r2,-4(fp)
   1d704:	1000021e 	bne	r2,zero,1d710 <OSSemDel+0x34>
        return (pevent);
   1d708:	e0bffd17 	ldw	r2,-12(fp)
   1d70c:	00008806 	br	1d930 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1d710:	e0bffd17 	ldw	r2,-12(fp)
   1d714:	1000051e 	bne	r2,zero,1d72c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1d718:	e0bfff17 	ldw	r2,-4(fp)
   1d71c:	00c00104 	movi	r3,4
   1d720:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d724:	e0bffd17 	ldw	r2,-12(fp)
   1d728:	00008106 	br	1d930 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1d72c:	e0bffd17 	ldw	r2,-12(fp)
   1d730:	10800003 	ldbu	r2,0(r2)
   1d734:	10803fcc 	andi	r2,r2,255
   1d738:	108000e0 	cmpeqi	r2,r2,3
   1d73c:	1000051e 	bne	r2,zero,1d754 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1d740:	e0bfff17 	ldw	r2,-4(fp)
   1d744:	00c00044 	movi	r3,1
   1d748:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d74c:	e0bffd17 	ldw	r2,-12(fp)
   1d750:	00007706 	br	1d930 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d754:	00800174 	movhi	r2,5
   1d758:	108f9004 	addi	r2,r2,15936
   1d75c:	10800003 	ldbu	r2,0(r2)
   1d760:	10803fcc 	andi	r2,r2,255
   1d764:	10000526 	beq	r2,zero,1d77c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1d768:	e0bfff17 	ldw	r2,-4(fp)
   1d76c:	00c003c4 	movi	r3,15
   1d770:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d774:	e0bffd17 	ldw	r2,-12(fp)
   1d778:	00006d06 	br	1d930 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d77c:	0005303a 	rdctl	r2,status
   1d780:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d784:	e0fff817 	ldw	r3,-32(fp)
   1d788:	00bfff84 	movi	r2,-2
   1d78c:	1884703a 	and	r2,r3,r2
   1d790:	1001703a 	wrctl	status,r2
  
  return context;
   1d794:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1d798:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1d79c:	e0bffd17 	ldw	r2,-12(fp)
   1d7a0:	10800283 	ldbu	r2,10(r2)
   1d7a4:	10803fcc 	andi	r2,r2,255
   1d7a8:	10000326 	beq	r2,zero,1d7b8 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1d7ac:	00800044 	movi	r2,1
   1d7b0:	e0bff505 	stb	r2,-44(fp)
   1d7b4:	00000106 	br	1d7bc <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1d7b8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1d7bc:	e0bffe03 	ldbu	r2,-8(fp)
   1d7c0:	10000326 	beq	r2,zero,1d7d0 <OSSemDel+0xf4>
   1d7c4:	10800060 	cmpeqi	r2,r2,1
   1d7c8:	10002c1e 	bne	r2,zero,1d87c <OSSemDel+0x1a0>
   1d7cc:	00004d06 	br	1d904 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1d7d0:	e0bff503 	ldbu	r2,-44(fp)
   1d7d4:	10001a1e 	bne	r2,zero,1d840 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1d7d8:	e0bffd17 	ldw	r2,-12(fp)
   1d7dc:	00c00fc4 	movi	r3,63
   1d7e0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1d7e4:	e0bffd17 	ldw	r2,-12(fp)
   1d7e8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1d7ec:	e0bffd17 	ldw	r2,-12(fp)
   1d7f0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1d7f4:	00800174 	movhi	r2,5
   1d7f8:	108f8f04 	addi	r2,r2,15932
   1d7fc:	10c00017 	ldw	r3,0(r2)
   1d800:	e0bffd17 	ldw	r2,-12(fp)
   1d804:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1d808:	e0bffd17 	ldw	r2,-12(fp)
   1d80c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1d810:	00800174 	movhi	r2,5
   1d814:	108f8f04 	addi	r2,r2,15932
   1d818:	e0fffd17 	ldw	r3,-12(fp)
   1d81c:	10c00015 	stw	r3,0(r2)
   1d820:	e0bff717 	ldw	r2,-36(fp)
   1d824:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d828:	e0bff917 	ldw	r2,-28(fp)
   1d82c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1d830:	e0bfff17 	ldw	r2,-4(fp)
   1d834:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1d838:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1d83c:	00003b06 	br	1d92c <OSSemDel+0x250>
   1d840:	e0bff717 	ldw	r2,-36(fp)
   1d844:	e0bffa15 	stw	r2,-24(fp)
   1d848:	e0bffa17 	ldw	r2,-24(fp)
   1d84c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1d850:	e0bfff17 	ldw	r2,-4(fp)
   1d854:	00c01244 	movi	r3,73
   1d858:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1d85c:	e0bffd17 	ldw	r2,-12(fp)
   1d860:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1d864:	00003106 	br	1d92c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1d868:	e13ffd17 	ldw	r4,-12(fp)
   1d86c:	000b883a 	mov	r5,zero
   1d870:	01800044 	movi	r6,1
   1d874:	000f883a 	mov	r7,zero
   1d878:	00191100 	call	19110 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1d87c:	e0bffd17 	ldw	r2,-12(fp)
   1d880:	10800283 	ldbu	r2,10(r2)
   1d884:	10803fcc 	andi	r2,r2,255
   1d888:	103ff71e 	bne	r2,zero,1d868 <__alt_mem_descriptor_memory+0xdefdd868>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1d88c:	e0bffd17 	ldw	r2,-12(fp)
   1d890:	00c00fc4 	movi	r3,63
   1d894:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1d898:	e0bffd17 	ldw	r2,-12(fp)
   1d89c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1d8a0:	e0bffd17 	ldw	r2,-12(fp)
   1d8a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1d8a8:	00800174 	movhi	r2,5
   1d8ac:	108f8f04 	addi	r2,r2,15932
   1d8b0:	10c00017 	ldw	r3,0(r2)
   1d8b4:	e0bffd17 	ldw	r2,-12(fp)
   1d8b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1d8bc:	e0bffd17 	ldw	r2,-12(fp)
   1d8c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1d8c4:	00800174 	movhi	r2,5
   1d8c8:	108f8f04 	addi	r2,r2,15932
   1d8cc:	e0fffd17 	ldw	r3,-12(fp)
   1d8d0:	10c00015 	stw	r3,0(r2)
   1d8d4:	e0bff717 	ldw	r2,-36(fp)
   1d8d8:	e0bffb15 	stw	r2,-20(fp)
   1d8dc:	e0bffb17 	ldw	r2,-20(fp)
   1d8e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1d8e4:	e0bff503 	ldbu	r2,-44(fp)
   1d8e8:	10800058 	cmpnei	r2,r2,1
   1d8ec:	1000011e 	bne	r2,zero,1d8f4 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1d8f0:	0019b280 	call	19b28 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1d8f4:	e0bfff17 	ldw	r2,-4(fp)
   1d8f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1d8fc:	e03ff615 	stw	zero,-40(fp)
             break;
   1d900:	00000a06 	br	1d92c <OSSemDel+0x250>
   1d904:	e0bff717 	ldw	r2,-36(fp)
   1d908:	e0bffc15 	stw	r2,-16(fp)
   1d90c:	e0bffc17 	ldw	r2,-16(fp)
   1d910:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1d914:	e0bfff17 	ldw	r2,-4(fp)
   1d918:	00c001c4 	movi	r3,7
   1d91c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1d920:	e0bffd17 	ldw	r2,-12(fp)
   1d924:	e0bff615 	stw	r2,-40(fp)
             break;
   1d928:	0001883a 	nop
    }
    return (pevent_return);
   1d92c:	e0bff617 	ldw	r2,-40(fp)
}
   1d930:	e037883a 	mov	sp,fp
   1d934:	dfc00117 	ldw	ra,4(sp)
   1d938:	df000017 	ldw	fp,0(sp)
   1d93c:	dec00204 	addi	sp,sp,8
   1d940:	f800283a 	ret

0001d944 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1d944:	defff504 	addi	sp,sp,-44
   1d948:	dfc00a15 	stw	ra,40(sp)
   1d94c:	df000915 	stw	fp,36(sp)
   1d950:	df000904 	addi	fp,sp,36
   1d954:	e13ffd15 	stw	r4,-12(fp)
   1d958:	2805883a 	mov	r2,r5
   1d95c:	e1bfff15 	stw	r6,-4(fp)
   1d960:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d964:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1d968:	e0bfff17 	ldw	r2,-4(fp)
   1d96c:	1000011e 	bne	r2,zero,1d974 <OSSemPend+0x30>
        return;
   1d970:	00008906 	br	1db98 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d974:	e0bffd17 	ldw	r2,-12(fp)
   1d978:	1000041e 	bne	r2,zero,1d98c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1d97c:	e0bfff17 	ldw	r2,-4(fp)
   1d980:	00c00104 	movi	r3,4
   1d984:	10c00005 	stb	r3,0(r2)
        return;
   1d988:	00008306 	br	1db98 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d98c:	e0bffd17 	ldw	r2,-12(fp)
   1d990:	10800003 	ldbu	r2,0(r2)
   1d994:	10803fcc 	andi	r2,r2,255
   1d998:	108000e0 	cmpeqi	r2,r2,3
   1d99c:	1000041e 	bne	r2,zero,1d9b0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1d9a0:	e0bfff17 	ldw	r2,-4(fp)
   1d9a4:	00c00044 	movi	r3,1
   1d9a8:	10c00005 	stb	r3,0(r2)
        return;
   1d9ac:	00007a06 	br	1db98 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1d9b0:	00800174 	movhi	r2,5
   1d9b4:	108f9004 	addi	r2,r2,15936
   1d9b8:	10800003 	ldbu	r2,0(r2)
   1d9bc:	10803fcc 	andi	r2,r2,255
   1d9c0:	10000426 	beq	r2,zero,1d9d4 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1d9c4:	e0bfff17 	ldw	r2,-4(fp)
   1d9c8:	00c00084 	movi	r3,2
   1d9cc:	10c00005 	stb	r3,0(r2)
        return;
   1d9d0:	00007106 	br	1db98 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1d9d4:	00800174 	movhi	r2,5
   1d9d8:	108f8204 	addi	r2,r2,15880
   1d9dc:	10800003 	ldbu	r2,0(r2)
   1d9e0:	10803fcc 	andi	r2,r2,255
   1d9e4:	10000426 	beq	r2,zero,1d9f8 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1d9e8:	e0bfff17 	ldw	r2,-4(fp)
   1d9ec:	00c00344 	movi	r3,13
   1d9f0:	10c00005 	stb	r3,0(r2)
        return;
   1d9f4:	00006806 	br	1db98 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d9f8:	0005303a 	rdctl	r2,status
   1d9fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da00:	e0fff817 	ldw	r3,-32(fp)
   1da04:	00bfff84 	movi	r2,-2
   1da08:	1884703a 	and	r2,r3,r2
   1da0c:	1001703a 	wrctl	status,r2
  
  return context;
   1da10:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1da14:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1da18:	e0bffd17 	ldw	r2,-12(fp)
   1da1c:	1080020b 	ldhu	r2,8(r2)
   1da20:	10bfffcc 	andi	r2,r2,65535
   1da24:	10000d26 	beq	r2,zero,1da5c <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1da28:	e0bffd17 	ldw	r2,-12(fp)
   1da2c:	1080020b 	ldhu	r2,8(r2)
   1da30:	10bfffc4 	addi	r2,r2,-1
   1da34:	1007883a 	mov	r3,r2
   1da38:	e0bffd17 	ldw	r2,-12(fp)
   1da3c:	10c0020d 	sth	r3,8(r2)
   1da40:	e0bff717 	ldw	r2,-36(fp)
   1da44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da48:	e0bff917 	ldw	r2,-28(fp)
   1da4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1da50:	e0bfff17 	ldw	r2,-4(fp)
   1da54:	10000005 	stb	zero,0(r2)
        return;
   1da58:	00004f06 	br	1db98 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1da5c:	00800174 	movhi	r2,5
   1da60:	108f9104 	addi	r2,r2,15940
   1da64:	10c00017 	ldw	r3,0(r2)
   1da68:	00800174 	movhi	r2,5
   1da6c:	108f9104 	addi	r2,r2,15940
   1da70:	10800017 	ldw	r2,0(r2)
   1da74:	10800c03 	ldbu	r2,48(r2)
   1da78:	10800054 	ori	r2,r2,1
   1da7c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1da80:	00800174 	movhi	r2,5
   1da84:	108f9104 	addi	r2,r2,15940
   1da88:	10800017 	ldw	r2,0(r2)
   1da8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1da90:	00800174 	movhi	r2,5
   1da94:	108f9104 	addi	r2,r2,15940
   1da98:	10800017 	ldw	r2,0(r2)
   1da9c:	e0fffe0b 	ldhu	r3,-8(fp)
   1daa0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1daa4:	e13ffd17 	ldw	r4,-12(fp)
   1daa8:	00192a80 	call	192a8 <OS_EventTaskWait>
   1daac:	e0bff717 	ldw	r2,-36(fp)
   1dab0:	e0bffa15 	stw	r2,-24(fp)
   1dab4:	e0bffa17 	ldw	r2,-24(fp)
   1dab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1dabc:	0019b280 	call	19b28 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dac0:	0005303a 	rdctl	r2,status
   1dac4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dac8:	e0fffb17 	ldw	r3,-20(fp)
   1dacc:	00bfff84 	movi	r2,-2
   1dad0:	1884703a 	and	r2,r3,r2
   1dad4:	1001703a 	wrctl	status,r2
  
  return context;
   1dad8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1dadc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1dae0:	00800174 	movhi	r2,5
   1dae4:	108f9104 	addi	r2,r2,15940
   1dae8:	10800017 	ldw	r2,0(r2)
   1daec:	10800c43 	ldbu	r2,49(r2)
   1daf0:	10803fcc 	andi	r2,r2,255
   1daf4:	10000326 	beq	r2,zero,1db04 <OSSemPend+0x1c0>
   1daf8:	108000a0 	cmpeqi	r2,r2,2
   1dafc:	1000041e 	bne	r2,zero,1db10 <OSSemPend+0x1cc>
   1db00:	00000706 	br	1db20 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1db04:	e0bfff17 	ldw	r2,-4(fp)
   1db08:	10000005 	stb	zero,0(r2)
             break;
   1db0c:	00000e06 	br	1db48 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1db10:	e0bfff17 	ldw	r2,-4(fp)
   1db14:	00c00384 	movi	r3,14
   1db18:	10c00005 	stb	r3,0(r2)
             break;
   1db1c:	00000a06 	br	1db48 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1db20:	00800174 	movhi	r2,5
   1db24:	108f9104 	addi	r2,r2,15940
   1db28:	10800017 	ldw	r2,0(r2)
   1db2c:	1009883a 	mov	r4,r2
   1db30:	e17ffd17 	ldw	r5,-12(fp)
   1db34:	00195000 	call	19500 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1db38:	e0bfff17 	ldw	r2,-4(fp)
   1db3c:	00c00284 	movi	r3,10
   1db40:	10c00005 	stb	r3,0(r2)
             break;
   1db44:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1db48:	00800174 	movhi	r2,5
   1db4c:	108f9104 	addi	r2,r2,15940
   1db50:	10800017 	ldw	r2,0(r2)
   1db54:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1db58:	00800174 	movhi	r2,5
   1db5c:	108f9104 	addi	r2,r2,15940
   1db60:	10800017 	ldw	r2,0(r2)
   1db64:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1db68:	00800174 	movhi	r2,5
   1db6c:	108f9104 	addi	r2,r2,15940
   1db70:	10800017 	ldw	r2,0(r2)
   1db74:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1db78:	00800174 	movhi	r2,5
   1db7c:	108f9104 	addi	r2,r2,15940
   1db80:	10800017 	ldw	r2,0(r2)
   1db84:	10000815 	stw	zero,32(r2)
   1db88:	e0bff717 	ldw	r2,-36(fp)
   1db8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db90:	e0bffc17 	ldw	r2,-16(fp)
   1db94:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1db98:	e037883a 	mov	sp,fp
   1db9c:	dfc00117 	ldw	ra,4(sp)
   1dba0:	df000017 	ldw	fp,0(sp)
   1dba4:	dec00204 	addi	sp,sp,8
   1dba8:	f800283a 	ret

0001dbac <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1dbac:	defff604 	addi	sp,sp,-40
   1dbb0:	dfc00915 	stw	ra,36(sp)
   1dbb4:	df000815 	stw	fp,32(sp)
   1dbb8:	df000804 	addi	fp,sp,32
   1dbbc:	e13ffd15 	stw	r4,-12(fp)
   1dbc0:	2805883a 	mov	r2,r5
   1dbc4:	e1bfff15 	stw	r6,-4(fp)
   1dbc8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1dbcc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1dbd0:	e0bfff17 	ldw	r2,-4(fp)
   1dbd4:	1000021e 	bne	r2,zero,1dbe0 <OSSemPendAbort+0x34>
        return (0);
   1dbd8:	0005883a 	mov	r2,zero
   1dbdc:	00004906 	br	1dd04 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1dbe0:	e0bffd17 	ldw	r2,-12(fp)
   1dbe4:	1000051e 	bne	r2,zero,1dbfc <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1dbe8:	e0bfff17 	ldw	r2,-4(fp)
   1dbec:	00c00104 	movi	r3,4
   1dbf0:	10c00005 	stb	r3,0(r2)
        return (0);
   1dbf4:	0005883a 	mov	r2,zero
   1dbf8:	00004206 	br	1dd04 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1dbfc:	e0bffd17 	ldw	r2,-12(fp)
   1dc00:	10800003 	ldbu	r2,0(r2)
   1dc04:	10803fcc 	andi	r2,r2,255
   1dc08:	108000e0 	cmpeqi	r2,r2,3
   1dc0c:	1000051e 	bne	r2,zero,1dc24 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1dc10:	e0bfff17 	ldw	r2,-4(fp)
   1dc14:	00c00044 	movi	r3,1
   1dc18:	10c00005 	stb	r3,0(r2)
        return (0);
   1dc1c:	0005883a 	mov	r2,zero
   1dc20:	00003806 	br	1dd04 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dc24:	0005303a 	rdctl	r2,status
   1dc28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dc2c:	e0fffa17 	ldw	r3,-24(fp)
   1dc30:	00bfff84 	movi	r2,-2
   1dc34:	1884703a 	and	r2,r3,r2
   1dc38:	1001703a 	wrctl	status,r2
  
  return context;
   1dc3c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1dc40:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1dc44:	e0bffd17 	ldw	r2,-12(fp)
   1dc48:	10800283 	ldbu	r2,10(r2)
   1dc4c:	10803fcc 	andi	r2,r2,255
   1dc50:	10002526 	beq	r2,zero,1dce8 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1dc54:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1dc58:	e0bffe03 	ldbu	r2,-8(fp)
   1dc5c:	10800060 	cmpeqi	r2,r2,1
   1dc60:	10000e26 	beq	r2,zero,1dc9c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1dc64:	00000806 	br	1dc88 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1dc68:	e13ffd17 	ldw	r4,-12(fp)
   1dc6c:	000b883a 	mov	r5,zero
   1dc70:	01800044 	movi	r6,1
   1dc74:	01c00084 	movi	r7,2
   1dc78:	00191100 	call	19110 <OS_EventTaskRdy>
                     nbr_tasks++;
   1dc7c:	e0bff803 	ldbu	r2,-32(fp)
   1dc80:	10800044 	addi	r2,r2,1
   1dc84:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1dc88:	e0bffd17 	ldw	r2,-12(fp)
   1dc8c:	10800283 	ldbu	r2,10(r2)
   1dc90:	10803fcc 	andi	r2,r2,255
   1dc94:	103ff41e 	bne	r2,zero,1dc68 <__alt_mem_descriptor_memory+0xdefddc68>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1dc98:	00000906 	br	1dcc0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1dc9c:	e13ffd17 	ldw	r4,-12(fp)
   1dca0:	000b883a 	mov	r5,zero
   1dca4:	01800044 	movi	r6,1
   1dca8:	01c00084 	movi	r7,2
   1dcac:	00191100 	call	19110 <OS_EventTaskRdy>
                 nbr_tasks++;
   1dcb0:	e0bff803 	ldbu	r2,-32(fp)
   1dcb4:	10800044 	addi	r2,r2,1
   1dcb8:	e0bff805 	stb	r2,-32(fp)
                 break;
   1dcbc:	0001883a 	nop
   1dcc0:	e0bff917 	ldw	r2,-28(fp)
   1dcc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dcc8:	e0bffb17 	ldw	r2,-20(fp)
   1dccc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1dcd0:	0019b280 	call	19b28 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1dcd4:	e0bfff17 	ldw	r2,-4(fp)
   1dcd8:	00c00384 	movi	r3,14
   1dcdc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1dce0:	e0bff803 	ldbu	r2,-32(fp)
   1dce4:	00000706 	br	1dd04 <OSSemPendAbort+0x158>
   1dce8:	e0bff917 	ldw	r2,-28(fp)
   1dcec:	e0bffc15 	stw	r2,-16(fp)
   1dcf0:	e0bffc17 	ldw	r2,-16(fp)
   1dcf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1dcf8:	e0bfff17 	ldw	r2,-4(fp)
   1dcfc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1dd00:	0005883a 	mov	r2,zero
}
   1dd04:	e037883a 	mov	sp,fp
   1dd08:	dfc00117 	ldw	ra,4(sp)
   1dd0c:	df000017 	ldw	fp,0(sp)
   1dd10:	dec00204 	addi	sp,sp,8
   1dd14:	f800283a 	ret

0001dd18 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1dd18:	defff804 	addi	sp,sp,-32
   1dd1c:	dfc00715 	stw	ra,28(sp)
   1dd20:	df000615 	stw	fp,24(sp)
   1dd24:	df000604 	addi	fp,sp,24
   1dd28:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1dd2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1dd30:	e0bfff17 	ldw	r2,-4(fp)
   1dd34:	1000021e 	bne	r2,zero,1dd40 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1dd38:	00800104 	movi	r2,4
   1dd3c:	00003506 	br	1de14 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1dd40:	e0bfff17 	ldw	r2,-4(fp)
   1dd44:	10800003 	ldbu	r2,0(r2)
   1dd48:	10803fcc 	andi	r2,r2,255
   1dd4c:	108000e0 	cmpeqi	r2,r2,3
   1dd50:	1000021e 	bne	r2,zero,1dd5c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1dd54:	00800044 	movi	r2,1
   1dd58:	00002e06 	br	1de14 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dd5c:	0005303a 	rdctl	r2,status
   1dd60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dd64:	e0fffb17 	ldw	r3,-20(fp)
   1dd68:	00bfff84 	movi	r2,-2
   1dd6c:	1884703a 	and	r2,r3,r2
   1dd70:	1001703a 	wrctl	status,r2
  
  return context;
   1dd74:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1dd78:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1dd7c:	e0bfff17 	ldw	r2,-4(fp)
   1dd80:	10800283 	ldbu	r2,10(r2)
   1dd84:	10803fcc 	andi	r2,r2,255
   1dd88:	10000c26 	beq	r2,zero,1ddbc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1dd8c:	e13fff17 	ldw	r4,-4(fp)
   1dd90:	000b883a 	mov	r5,zero
   1dd94:	01800044 	movi	r6,1
   1dd98:	000f883a 	mov	r7,zero
   1dd9c:	00191100 	call	19110 <OS_EventTaskRdy>
   1dda0:	e0bffa17 	ldw	r2,-24(fp)
   1dda4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dda8:	e0bffc17 	ldw	r2,-16(fp)
   1ddac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1ddb0:	0019b280 	call	19b28 <OS_Sched>
        return (OS_ERR_NONE);
   1ddb4:	0005883a 	mov	r2,zero
   1ddb8:	00001606 	br	1de14 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1ddbc:	e0bfff17 	ldw	r2,-4(fp)
   1ddc0:	1080020b 	ldhu	r2,8(r2)
   1ddc4:	10ffffcc 	andi	r3,r2,65535
   1ddc8:	00bfffd4 	movui	r2,65535
   1ddcc:	18800c26 	beq	r3,r2,1de00 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1ddd0:	e0bfff17 	ldw	r2,-4(fp)
   1ddd4:	1080020b 	ldhu	r2,8(r2)
   1ddd8:	10800044 	addi	r2,r2,1
   1dddc:	1007883a 	mov	r3,r2
   1dde0:	e0bfff17 	ldw	r2,-4(fp)
   1dde4:	10c0020d 	sth	r3,8(r2)
   1dde8:	e0bffa17 	ldw	r2,-24(fp)
   1ddec:	e0bffd15 	stw	r2,-12(fp)
   1ddf0:	e0bffd17 	ldw	r2,-12(fp)
   1ddf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1ddf8:	0005883a 	mov	r2,zero
   1ddfc:	00000506 	br	1de14 <OSSemPost+0xfc>
   1de00:	e0bffa17 	ldw	r2,-24(fp)
   1de04:	e0bffe15 	stw	r2,-8(fp)
   1de08:	e0bffe17 	ldw	r2,-8(fp)
   1de0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1de10:	00800c84 	movi	r2,50
}
   1de14:	e037883a 	mov	sp,fp
   1de18:	dfc00117 	ldw	ra,4(sp)
   1de1c:	df000017 	ldw	fp,0(sp)
   1de20:	dec00204 	addi	sp,sp,8
   1de24:	f800283a 	ret

0001de28 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1de28:	defff704 	addi	sp,sp,-36
   1de2c:	df000815 	stw	fp,32(sp)
   1de30:	df000804 	addi	fp,sp,32
   1de34:	e13ffe15 	stw	r4,-8(fp)
   1de38:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1de3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1de40:	e0bffe17 	ldw	r2,-8(fp)
   1de44:	1000021e 	bne	r2,zero,1de50 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1de48:	00800104 	movi	r2,4
   1de4c:	00003606 	br	1df28 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1de50:	e0bfff17 	ldw	r2,-4(fp)
   1de54:	1000021e 	bne	r2,zero,1de60 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1de58:	00800244 	movi	r2,9
   1de5c:	00003206 	br	1df28 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1de60:	e0bffe17 	ldw	r2,-8(fp)
   1de64:	10800003 	ldbu	r2,0(r2)
   1de68:	10803fcc 	andi	r2,r2,255
   1de6c:	108000e0 	cmpeqi	r2,r2,3
   1de70:	1000021e 	bne	r2,zero,1de7c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1de74:	00800044 	movi	r2,1
   1de78:	00002b06 	br	1df28 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de7c:	0005303a 	rdctl	r2,status
   1de80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de84:	e0fffc17 	ldw	r3,-16(fp)
   1de88:	00bfff84 	movi	r2,-2
   1de8c:	1884703a 	and	r2,r3,r2
   1de90:	1001703a 	wrctl	status,r2
  
  return context;
   1de94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1de98:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1de9c:	e0bffe17 	ldw	r2,-8(fp)
   1dea0:	10c00283 	ldbu	r3,10(r2)
   1dea4:	e0bfff17 	ldw	r2,-4(fp)
   1dea8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1deac:	e0bffe17 	ldw	r2,-8(fp)
   1deb0:	108002c4 	addi	r2,r2,11
   1deb4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1deb8:	e0bfff17 	ldw	r2,-4(fp)
   1debc:	10800084 	addi	r2,r2,2
   1dec0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1dec4:	e03ffa05 	stb	zero,-24(fp)
   1dec8:	00000b06 	br	1def8 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1decc:	e0bff917 	ldw	r2,-28(fp)
   1ded0:	10c00044 	addi	r3,r2,1
   1ded4:	e0fff915 	stw	r3,-28(fp)
   1ded8:	e0fff817 	ldw	r3,-32(fp)
   1dedc:	19000044 	addi	r4,r3,1
   1dee0:	e13ff815 	stw	r4,-32(fp)
   1dee4:	18c00003 	ldbu	r3,0(r3)
   1dee8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1deec:	e0bffa03 	ldbu	r2,-24(fp)
   1def0:	10800044 	addi	r2,r2,1
   1def4:	e0bffa05 	stb	r2,-24(fp)
   1def8:	e0bffa03 	ldbu	r2,-24(fp)
   1defc:	108000f0 	cmpltui	r2,r2,3
   1df00:	103ff21e 	bne	r2,zero,1decc <__alt_mem_descriptor_memory+0xdefddecc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1df04:	e0bffe17 	ldw	r2,-8(fp)
   1df08:	10c0020b 	ldhu	r3,8(r2)
   1df0c:	e0bfff17 	ldw	r2,-4(fp)
   1df10:	10c0000d 	sth	r3,0(r2)
   1df14:	e0bffb17 	ldw	r2,-20(fp)
   1df18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1df1c:	e0bffd17 	ldw	r2,-12(fp)
   1df20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1df24:	0005883a 	mov	r2,zero
}
   1df28:	e037883a 	mov	sp,fp
   1df2c:	df000017 	ldw	fp,0(sp)
   1df30:	dec00104 	addi	sp,sp,4
   1df34:	f800283a 	ret

0001df38 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1df38:	defff904 	addi	sp,sp,-28
   1df3c:	df000615 	stw	fp,24(sp)
   1df40:	df000604 	addi	fp,sp,24
   1df44:	e13ffd15 	stw	r4,-12(fp)
   1df48:	2805883a 	mov	r2,r5
   1df4c:	e1bfff15 	stw	r6,-4(fp)
   1df50:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1df54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1df58:	e0bfff17 	ldw	r2,-4(fp)
   1df5c:	1000011e 	bne	r2,zero,1df64 <OSSemSet+0x2c>
        return;
   1df60:	00003006 	br	1e024 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1df64:	e0bffd17 	ldw	r2,-12(fp)
   1df68:	1000041e 	bne	r2,zero,1df7c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1df6c:	e0bfff17 	ldw	r2,-4(fp)
   1df70:	00c00104 	movi	r3,4
   1df74:	10c00005 	stb	r3,0(r2)
        return;
   1df78:	00002a06 	br	1e024 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1df7c:	e0bffd17 	ldw	r2,-12(fp)
   1df80:	10800003 	ldbu	r2,0(r2)
   1df84:	10803fcc 	andi	r2,r2,255
   1df88:	108000e0 	cmpeqi	r2,r2,3
   1df8c:	1000041e 	bne	r2,zero,1dfa0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1df90:	e0bfff17 	ldw	r2,-4(fp)
   1df94:	00c00044 	movi	r3,1
   1df98:	10c00005 	stb	r3,0(r2)
        return;
   1df9c:	00002106 	br	1e024 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dfa0:	0005303a 	rdctl	r2,status
   1dfa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dfa8:	e0fffb17 	ldw	r3,-20(fp)
   1dfac:	00bfff84 	movi	r2,-2
   1dfb0:	1884703a 	and	r2,r3,r2
   1dfb4:	1001703a 	wrctl	status,r2
  
  return context;
   1dfb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1dfbc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1dfc0:	e0bfff17 	ldw	r2,-4(fp)
   1dfc4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1dfc8:	e0bffd17 	ldw	r2,-12(fp)
   1dfcc:	1080020b 	ldhu	r2,8(r2)
   1dfd0:	10bfffcc 	andi	r2,r2,65535
   1dfd4:	10000426 	beq	r2,zero,1dfe8 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1dfd8:	e0bffd17 	ldw	r2,-12(fp)
   1dfdc:	e0fffe0b 	ldhu	r3,-8(fp)
   1dfe0:	10c0020d 	sth	r3,8(r2)
   1dfe4:	00000b06 	br	1e014 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1dfe8:	e0bffd17 	ldw	r2,-12(fp)
   1dfec:	10800283 	ldbu	r2,10(r2)
   1dff0:	10803fcc 	andi	r2,r2,255
   1dff4:	1000041e 	bne	r2,zero,1e008 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1dff8:	e0bffd17 	ldw	r2,-12(fp)
   1dffc:	e0fffe0b 	ldhu	r3,-8(fp)
   1e000:	10c0020d 	sth	r3,8(r2)
   1e004:	00000306 	br	1e014 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1e008:	e0bfff17 	ldw	r2,-4(fp)
   1e00c:	00c01244 	movi	r3,73
   1e010:	10c00005 	stb	r3,0(r2)
   1e014:	e0bffa17 	ldw	r2,-24(fp)
   1e018:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e01c:	e0bffc17 	ldw	r2,-16(fp)
   1e020:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1e024:	e037883a 	mov	sp,fp
   1e028:	df000017 	ldw	fp,0(sp)
   1e02c:	dec00104 	addi	sp,sp,4
   1e030:	f800283a 	ret

0001e034 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1e034:	defff104 	addi	sp,sp,-60
   1e038:	dfc00e15 	stw	ra,56(sp)
   1e03c:	df000d15 	stw	fp,52(sp)
   1e040:	df000d04 	addi	fp,sp,52
   1e044:	2007883a 	mov	r3,r4
   1e048:	2805883a 	mov	r2,r5
   1e04c:	e0fffe05 	stb	r3,-8(fp)
   1e050:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1e054:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1e058:	e0bffe03 	ldbu	r2,-8(fp)
   1e05c:	10800530 	cmpltui	r2,r2,20
   1e060:	1000051e 	bne	r2,zero,1e078 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1e064:	e0bffe03 	ldbu	r2,-8(fp)
   1e068:	10803fe0 	cmpeqi	r2,r2,255
   1e06c:	1000021e 	bne	r2,zero,1e078 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1e070:	00800a84 	movi	r2,42
   1e074:	00013a06 	br	1e560 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1e078:	e0bfff03 	ldbu	r2,-4(fp)
   1e07c:	10800530 	cmpltui	r2,r2,20
   1e080:	1000021e 	bne	r2,zero,1e08c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1e084:	00800a84 	movi	r2,42
   1e088:	00013506 	br	1e560 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e08c:	0005303a 	rdctl	r2,status
   1e090:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e094:	e0fff917 	ldw	r3,-28(fp)
   1e098:	00bfff84 	movi	r2,-2
   1e09c:	1884703a 	and	r2,r3,r2
   1e0a0:	1001703a 	wrctl	status,r2
  
  return context;
   1e0a4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e0a8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1e0ac:	e0ffff03 	ldbu	r3,-4(fp)
   1e0b0:	008001b4 	movhi	r2,6
   1e0b4:	10b63104 	addi	r2,r2,-10044
   1e0b8:	18c7883a 	add	r3,r3,r3
   1e0bc:	18c7883a 	add	r3,r3,r3
   1e0c0:	10c5883a 	add	r2,r2,r3
   1e0c4:	10800017 	ldw	r2,0(r2)
   1e0c8:	10000626 	beq	r2,zero,1e0e4 <OSTaskChangePrio+0xb0>
   1e0cc:	e0bff517 	ldw	r2,-44(fp)
   1e0d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e0d4:	e0bffa17 	ldw	r2,-24(fp)
   1e0d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1e0dc:	00800a04 	movi	r2,40
   1e0e0:	00011f06 	br	1e560 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1e0e4:	e0bffe03 	ldbu	r2,-8(fp)
   1e0e8:	10803fd8 	cmpnei	r2,r2,255
   1e0ec:	1000051e 	bne	r2,zero,1e104 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1e0f0:	00800174 	movhi	r2,5
   1e0f4:	108f9104 	addi	r2,r2,15940
   1e0f8:	10800017 	ldw	r2,0(r2)
   1e0fc:	10800c83 	ldbu	r2,50(r2)
   1e100:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1e104:	e0fffe03 	ldbu	r3,-8(fp)
   1e108:	008001b4 	movhi	r2,6
   1e10c:	10b63104 	addi	r2,r2,-10044
   1e110:	18c7883a 	add	r3,r3,r3
   1e114:	18c7883a 	add	r3,r3,r3
   1e118:	10c5883a 	add	r2,r2,r3
   1e11c:	10800017 	ldw	r2,0(r2)
   1e120:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1e124:	e0bff617 	ldw	r2,-40(fp)
   1e128:	1000061e 	bne	r2,zero,1e144 <OSTaskChangePrio+0x110>
   1e12c:	e0bff517 	ldw	r2,-44(fp)
   1e130:	e0bffb15 	stw	r2,-20(fp)
   1e134:	e0bffb17 	ldw	r2,-20(fp)
   1e138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1e13c:	00800a44 	movi	r2,41
   1e140:	00010706 	br	1e560 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1e144:	e0bff617 	ldw	r2,-40(fp)
   1e148:	10800058 	cmpnei	r2,r2,1
   1e14c:	1000061e 	bne	r2,zero,1e168 <OSTaskChangePrio+0x134>
   1e150:	e0bff517 	ldw	r2,-44(fp)
   1e154:	e0bffc15 	stw	r2,-16(fp)
   1e158:	e0bffc17 	ldw	r2,-16(fp)
   1e15c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1e160:	008010c4 	movi	r2,67
   1e164:	0000fe06 	br	1e560 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1e168:	e0bfff03 	ldbu	r2,-4(fp)
   1e16c:	1004d0fa 	srli	r2,r2,3
   1e170:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1e174:	e0bfff03 	ldbu	r2,-4(fp)
   1e178:	108001cc 	andi	r2,r2,7
   1e17c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1e180:	e0bff703 	ldbu	r2,-36(fp)
   1e184:	00c00044 	movi	r3,1
   1e188:	1884983a 	sll	r2,r3,r2
   1e18c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1e190:	e0bff743 	ldbu	r2,-35(fp)
   1e194:	00c00044 	movi	r3,1
   1e198:	1884983a 	sll	r2,r3,r2
   1e19c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1e1a0:	e0fffe03 	ldbu	r3,-8(fp)
   1e1a4:	008001b4 	movhi	r2,6
   1e1a8:	10b63104 	addi	r2,r2,-10044
   1e1ac:	18c7883a 	add	r3,r3,r3
   1e1b0:	18c7883a 	add	r3,r3,r3
   1e1b4:	10c5883a 	add	r2,r2,r3
   1e1b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1e1bc:	e0ffff03 	ldbu	r3,-4(fp)
   1e1c0:	008001b4 	movhi	r2,6
   1e1c4:	10b63104 	addi	r2,r2,-10044
   1e1c8:	18c7883a 	add	r3,r3,r3
   1e1cc:	18c7883a 	add	r3,r3,r3
   1e1d0:	10c5883a 	add	r2,r2,r3
   1e1d4:	e0fff617 	ldw	r3,-40(fp)
   1e1d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1e1dc:	e0bff617 	ldw	r2,-40(fp)
   1e1e0:	10800d03 	ldbu	r2,52(r2)
   1e1e4:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1e1e8:	e0bff617 	ldw	r2,-40(fp)
   1e1ec:	10800d83 	ldbu	r2,54(r2)
   1e1f0:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1e1f4:	e0bff617 	ldw	r2,-40(fp)
   1e1f8:	10800d43 	ldbu	r2,53(r2)
   1e1fc:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1e200:	e0fff803 	ldbu	r3,-32(fp)
   1e204:	00800174 	movhi	r2,5
   1e208:	108f8e44 	addi	r2,r2,15929
   1e20c:	10c5883a 	add	r2,r2,r3
   1e210:	10c00003 	ldbu	r3,0(r2)
   1e214:	e0bff883 	ldbu	r2,-30(fp)
   1e218:	1884703a 	and	r2,r3,r2
   1e21c:	10803fcc 	andi	r2,r2,255
   1e220:	10003726 	beq	r2,zero,1e300 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1e224:	e0fff803 	ldbu	r3,-32(fp)
   1e228:	e13ff803 	ldbu	r4,-32(fp)
   1e22c:	00800174 	movhi	r2,5
   1e230:	108f8e44 	addi	r2,r2,15929
   1e234:	1105883a 	add	r2,r2,r4
   1e238:	10800003 	ldbu	r2,0(r2)
   1e23c:	1009883a 	mov	r4,r2
   1e240:	e0bff883 	ldbu	r2,-30(fp)
   1e244:	0084303a 	nor	r2,zero,r2
   1e248:	2084703a 	and	r2,r4,r2
   1e24c:	1009883a 	mov	r4,r2
   1e250:	00800174 	movhi	r2,5
   1e254:	108f8e44 	addi	r2,r2,15929
   1e258:	10c5883a 	add	r2,r2,r3
   1e25c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1e260:	e0fff803 	ldbu	r3,-32(fp)
   1e264:	00800174 	movhi	r2,5
   1e268:	108f8e44 	addi	r2,r2,15929
   1e26c:	10c5883a 	add	r2,r2,r3
   1e270:	10800003 	ldbu	r2,0(r2)
   1e274:	10803fcc 	andi	r2,r2,255
   1e278:	10000b1e 	bne	r2,zero,1e2a8 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1e27c:	e0bff843 	ldbu	r2,-31(fp)
   1e280:	0084303a 	nor	r2,zero,r2
   1e284:	1007883a 	mov	r3,r2
   1e288:	00800174 	movhi	r2,5
   1e28c:	108f8e04 	addi	r2,r2,15928
   1e290:	10800003 	ldbu	r2,0(r2)
   1e294:	1884703a 	and	r2,r3,r2
   1e298:	1007883a 	mov	r3,r2
   1e29c:	00800174 	movhi	r2,5
   1e2a0:	108f8e04 	addi	r2,r2,15928
   1e2a4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1e2a8:	00800174 	movhi	r2,5
   1e2ac:	108f8e04 	addi	r2,r2,15928
   1e2b0:	10c00003 	ldbu	r3,0(r2)
   1e2b4:	e0bff783 	ldbu	r2,-34(fp)
   1e2b8:	1884b03a 	or	r2,r3,r2
   1e2bc:	1007883a 	mov	r3,r2
   1e2c0:	00800174 	movhi	r2,5
   1e2c4:	108f8e04 	addi	r2,r2,15928
   1e2c8:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1e2cc:	e0fff703 	ldbu	r3,-36(fp)
   1e2d0:	e13ff703 	ldbu	r4,-36(fp)
   1e2d4:	00800174 	movhi	r2,5
   1e2d8:	108f8e44 	addi	r2,r2,15929
   1e2dc:	1105883a 	add	r2,r2,r4
   1e2e0:	11000003 	ldbu	r4,0(r2)
   1e2e4:	e0bff7c3 	ldbu	r2,-33(fp)
   1e2e8:	2084b03a 	or	r2,r4,r2
   1e2ec:	1009883a 	mov	r4,r2
   1e2f0:	00800174 	movhi	r2,5
   1e2f4:	108f8e44 	addi	r2,r2,15929
   1e2f8:	10c5883a 	add	r2,r2,r3
   1e2fc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1e300:	e0bff617 	ldw	r2,-40(fp)
   1e304:	10800717 	ldw	r2,28(r2)
   1e308:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1e30c:	e0bff317 	ldw	r2,-52(fp)
   1e310:	10003326 	beq	r2,zero,1e3e0 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1e314:	e0bff803 	ldbu	r2,-32(fp)
   1e318:	e0fff803 	ldbu	r3,-32(fp)
   1e31c:	e13ff317 	ldw	r4,-52(fp)
   1e320:	20c7883a 	add	r3,r4,r3
   1e324:	18c00204 	addi	r3,r3,8
   1e328:	18c000c3 	ldbu	r3,3(r3)
   1e32c:	1809883a 	mov	r4,r3
   1e330:	e0fff883 	ldbu	r3,-30(fp)
   1e334:	00c6303a 	nor	r3,zero,r3
   1e338:	20c6703a 	and	r3,r4,r3
   1e33c:	1809883a 	mov	r4,r3
   1e340:	e0fff317 	ldw	r3,-52(fp)
   1e344:	1885883a 	add	r2,r3,r2
   1e348:	10800204 	addi	r2,r2,8
   1e34c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1e350:	e0bff803 	ldbu	r2,-32(fp)
   1e354:	e0fff317 	ldw	r3,-52(fp)
   1e358:	1885883a 	add	r2,r3,r2
   1e35c:	10800204 	addi	r2,r2,8
   1e360:	108000c3 	ldbu	r2,3(r2)
   1e364:	10803fcc 	andi	r2,r2,255
   1e368:	1000091e 	bne	r2,zero,1e390 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1e36c:	e0bff317 	ldw	r2,-52(fp)
   1e370:	10800283 	ldbu	r2,10(r2)
   1e374:	1007883a 	mov	r3,r2
   1e378:	e0bff843 	ldbu	r2,-31(fp)
   1e37c:	0084303a 	nor	r2,zero,r2
   1e380:	1884703a 	and	r2,r3,r2
   1e384:	1007883a 	mov	r3,r2
   1e388:	e0bff317 	ldw	r2,-52(fp)
   1e38c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1e390:	e0bff317 	ldw	r2,-52(fp)
   1e394:	10c00283 	ldbu	r3,10(r2)
   1e398:	e0bff783 	ldbu	r2,-34(fp)
   1e39c:	1884b03a 	or	r2,r3,r2
   1e3a0:	1007883a 	mov	r3,r2
   1e3a4:	e0bff317 	ldw	r2,-52(fp)
   1e3a8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1e3ac:	e0bff703 	ldbu	r2,-36(fp)
   1e3b0:	e0fff703 	ldbu	r3,-36(fp)
   1e3b4:	e13ff317 	ldw	r4,-52(fp)
   1e3b8:	20c7883a 	add	r3,r4,r3
   1e3bc:	18c00204 	addi	r3,r3,8
   1e3c0:	190000c3 	ldbu	r4,3(r3)
   1e3c4:	e0fff7c3 	ldbu	r3,-33(fp)
   1e3c8:	20c6b03a 	or	r3,r4,r3
   1e3cc:	1809883a 	mov	r4,r3
   1e3d0:	e0fff317 	ldw	r3,-52(fp)
   1e3d4:	1885883a 	add	r2,r3,r2
   1e3d8:	10800204 	addi	r2,r2,8
   1e3dc:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1e3e0:	e0bff617 	ldw	r2,-40(fp)
   1e3e4:	10800817 	ldw	r2,32(r2)
   1e3e8:	10004226 	beq	r2,zero,1e4f4 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1e3ec:	e0bff617 	ldw	r2,-40(fp)
   1e3f0:	10800817 	ldw	r2,32(r2)
   1e3f4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1e3f8:	e0bff417 	ldw	r2,-48(fp)
   1e3fc:	10800017 	ldw	r2,0(r2)
   1e400:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1e404:	00003906 	br	1e4ec <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1e408:	e0bff803 	ldbu	r2,-32(fp)
   1e40c:	e0fff803 	ldbu	r3,-32(fp)
   1e410:	e13ff317 	ldw	r4,-52(fp)
   1e414:	20c7883a 	add	r3,r4,r3
   1e418:	18c00204 	addi	r3,r3,8
   1e41c:	18c000c3 	ldbu	r3,3(r3)
   1e420:	1809883a 	mov	r4,r3
   1e424:	e0fff883 	ldbu	r3,-30(fp)
   1e428:	00c6303a 	nor	r3,zero,r3
   1e42c:	20c6703a 	and	r3,r4,r3
   1e430:	1809883a 	mov	r4,r3
   1e434:	e0fff317 	ldw	r3,-52(fp)
   1e438:	1885883a 	add	r2,r3,r2
   1e43c:	10800204 	addi	r2,r2,8
   1e440:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1e444:	e0bff803 	ldbu	r2,-32(fp)
   1e448:	e0fff317 	ldw	r3,-52(fp)
   1e44c:	1885883a 	add	r2,r3,r2
   1e450:	10800204 	addi	r2,r2,8
   1e454:	108000c3 	ldbu	r2,3(r2)
   1e458:	10803fcc 	andi	r2,r2,255
   1e45c:	1000091e 	bne	r2,zero,1e484 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1e460:	e0bff317 	ldw	r2,-52(fp)
   1e464:	10800283 	ldbu	r2,10(r2)
   1e468:	1007883a 	mov	r3,r2
   1e46c:	e0bff843 	ldbu	r2,-31(fp)
   1e470:	0084303a 	nor	r2,zero,r2
   1e474:	1884703a 	and	r2,r3,r2
   1e478:	1007883a 	mov	r3,r2
   1e47c:	e0bff317 	ldw	r2,-52(fp)
   1e480:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1e484:	e0bff317 	ldw	r2,-52(fp)
   1e488:	10c00283 	ldbu	r3,10(r2)
   1e48c:	e0bff783 	ldbu	r2,-34(fp)
   1e490:	1884b03a 	or	r2,r3,r2
   1e494:	1007883a 	mov	r3,r2
   1e498:	e0bff317 	ldw	r2,-52(fp)
   1e49c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1e4a0:	e0bff703 	ldbu	r2,-36(fp)
   1e4a4:	e0fff703 	ldbu	r3,-36(fp)
   1e4a8:	e13ff317 	ldw	r4,-52(fp)
   1e4ac:	20c7883a 	add	r3,r4,r3
   1e4b0:	18c00204 	addi	r3,r3,8
   1e4b4:	190000c3 	ldbu	r4,3(r3)
   1e4b8:	e0fff7c3 	ldbu	r3,-33(fp)
   1e4bc:	20c6b03a 	or	r3,r4,r3
   1e4c0:	1809883a 	mov	r4,r3
   1e4c4:	e0fff317 	ldw	r3,-52(fp)
   1e4c8:	1885883a 	add	r2,r3,r2
   1e4cc:	10800204 	addi	r2,r2,8
   1e4d0:	110000c5 	stb	r4,3(r2)
            pevents++;
   1e4d4:	e0bff417 	ldw	r2,-48(fp)
   1e4d8:	10800104 	addi	r2,r2,4
   1e4dc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1e4e0:	e0bff417 	ldw	r2,-48(fp)
   1e4e4:	10800017 	ldw	r2,0(r2)
   1e4e8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1e4ec:	e0bff317 	ldw	r2,-52(fp)
   1e4f0:	103fc51e 	bne	r2,zero,1e408 <__alt_mem_descriptor_memory+0xdefde408>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1e4f4:	e0bff617 	ldw	r2,-40(fp)
   1e4f8:	e0ffff03 	ldbu	r3,-4(fp)
   1e4fc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1e500:	e0bff617 	ldw	r2,-40(fp)
   1e504:	e0fff703 	ldbu	r3,-36(fp)
   1e508:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1e50c:	e0bff617 	ldw	r2,-40(fp)
   1e510:	e0fff743 	ldbu	r3,-35(fp)
   1e514:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1e518:	e0bff617 	ldw	r2,-40(fp)
   1e51c:	e0fff783 	ldbu	r3,-34(fp)
   1e520:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1e524:	e0bff617 	ldw	r2,-40(fp)
   1e528:	e0fff7c3 	ldbu	r3,-33(fp)
   1e52c:	10c00d45 	stb	r3,53(r2)
   1e530:	e0bff517 	ldw	r2,-44(fp)
   1e534:	e0bffd15 	stw	r2,-12(fp)
   1e538:	e0bffd17 	ldw	r2,-12(fp)
   1e53c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1e540:	00800174 	movhi	r2,5
   1e544:	108f8244 	addi	r2,r2,15881
   1e548:	10800003 	ldbu	r2,0(r2)
   1e54c:	10803fcc 	andi	r2,r2,255
   1e550:	10800058 	cmpnei	r2,r2,1
   1e554:	1000011e 	bne	r2,zero,1e55c <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1e558:	0019b280 	call	19b28 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1e55c:	0005883a 	mov	r2,zero
}
   1e560:	e037883a 	mov	sp,fp
   1e564:	dfc00117 	ldw	ra,4(sp)
   1e568:	df000017 	ldw	fp,0(sp)
   1e56c:	dec00204 	addi	sp,sp,8
   1e570:	f800283a 	ret

0001e574 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1e574:	deffee04 	addi	sp,sp,-72
   1e578:	dfc01115 	stw	ra,68(sp)
   1e57c:	df001015 	stw	fp,64(sp)
   1e580:	df001004 	addi	fp,sp,64
   1e584:	e13ffc15 	stw	r4,-16(fp)
   1e588:	e17ffd15 	stw	r5,-12(fp)
   1e58c:	e1bffe15 	stw	r6,-8(fp)
   1e590:	3805883a 	mov	r2,r7
   1e594:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1e598:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1e59c:	e0bfff03 	ldbu	r2,-4(fp)
   1e5a0:	10800570 	cmpltui	r2,r2,21
   1e5a4:	1000021e 	bne	r2,zero,1e5b0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1e5a8:	00800a84 	movi	r2,42
   1e5ac:	00005b06 	br	1e71c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e5b0:	0005303a 	rdctl	r2,status
   1e5b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e5b8:	e0fff617 	ldw	r3,-40(fp)
   1e5bc:	00bfff84 	movi	r2,-2
   1e5c0:	1884703a 	and	r2,r3,r2
   1e5c4:	1001703a 	wrctl	status,r2
  
  return context;
   1e5c8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e5cc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1e5d0:	00800174 	movhi	r2,5
   1e5d4:	108f9004 	addi	r2,r2,15936
   1e5d8:	10800003 	ldbu	r2,0(r2)
   1e5dc:	10803fcc 	andi	r2,r2,255
   1e5e0:	10000626 	beq	r2,zero,1e5fc <OSTaskCreate+0x88>
   1e5e4:	e0bff317 	ldw	r2,-52(fp)
   1e5e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e5ec:	e0bff717 	ldw	r2,-36(fp)
   1e5f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1e5f4:	00800f04 	movi	r2,60
   1e5f8:	00004806 	br	1e71c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1e5fc:	e0ffff03 	ldbu	r3,-4(fp)
   1e600:	008001b4 	movhi	r2,6
   1e604:	10b63104 	addi	r2,r2,-10044
   1e608:	18c7883a 	add	r3,r3,r3
   1e60c:	18c7883a 	add	r3,r3,r3
   1e610:	10c5883a 	add	r2,r2,r3
   1e614:	10800017 	ldw	r2,0(r2)
   1e618:	10003b1e 	bne	r2,zero,1e708 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1e61c:	e0ffff03 	ldbu	r3,-4(fp)
   1e620:	008001b4 	movhi	r2,6
   1e624:	10b63104 	addi	r2,r2,-10044
   1e628:	18c7883a 	add	r3,r3,r3
   1e62c:	18c7883a 	add	r3,r3,r3
   1e630:	10c5883a 	add	r2,r2,r3
   1e634:	00c00044 	movi	r3,1
   1e638:	10c00015 	stw	r3,0(r2)
   1e63c:	e0bff317 	ldw	r2,-52(fp)
   1e640:	e0bff815 	stw	r2,-32(fp)
   1e644:	e0bff817 	ldw	r2,-32(fp)
   1e648:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1e64c:	e13ffc17 	ldw	r4,-16(fp)
   1e650:	e17ffd17 	ldw	r5,-12(fp)
   1e654:	e1bffe17 	ldw	r6,-8(fp)
   1e658:	000f883a 	mov	r7,zero
   1e65c:	003a9e00 	call	3a9e0 <OSTaskStkInit>
   1e660:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1e664:	e0bfff03 	ldbu	r2,-4(fp)
   1e668:	d8000015 	stw	zero,0(sp)
   1e66c:	d8000115 	stw	zero,4(sp)
   1e670:	d8000215 	stw	zero,8(sp)
   1e674:	1009883a 	mov	r4,r2
   1e678:	e17ff417 	ldw	r5,-48(fp)
   1e67c:	000d883a 	mov	r6,zero
   1e680:	000f883a 	mov	r7,zero
   1e684:	0019f1c0 	call	19f1c <OS_TCBInit>
   1e688:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1e68c:	e0bff503 	ldbu	r2,-44(fp)
   1e690:	1000081e 	bne	r2,zero,1e6b4 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1e694:	00800174 	movhi	r2,5
   1e698:	108f8244 	addi	r2,r2,15881
   1e69c:	10800003 	ldbu	r2,0(r2)
   1e6a0:	10803fcc 	andi	r2,r2,255
   1e6a4:	10800058 	cmpnei	r2,r2,1
   1e6a8:	1000151e 	bne	r2,zero,1e700 <OSTaskCreate+0x18c>
                OS_Sched();
   1e6ac:	0019b280 	call	19b28 <OS_Sched>
   1e6b0:	00001306 	br	1e700 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e6b4:	0005303a 	rdctl	r2,status
   1e6b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e6bc:	e0fff917 	ldw	r3,-28(fp)
   1e6c0:	00bfff84 	movi	r2,-2
   1e6c4:	1884703a 	and	r2,r3,r2
   1e6c8:	1001703a 	wrctl	status,r2
  
  return context;
   1e6cc:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1e6d0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1e6d4:	e0ffff03 	ldbu	r3,-4(fp)
   1e6d8:	008001b4 	movhi	r2,6
   1e6dc:	10b63104 	addi	r2,r2,-10044
   1e6e0:	18c7883a 	add	r3,r3,r3
   1e6e4:	18c7883a 	add	r3,r3,r3
   1e6e8:	10c5883a 	add	r2,r2,r3
   1e6ec:	10000015 	stw	zero,0(r2)
   1e6f0:	e0bff317 	ldw	r2,-52(fp)
   1e6f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e6f8:	e0bffa17 	ldw	r2,-24(fp)
   1e6fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1e700:	e0bff503 	ldbu	r2,-44(fp)
   1e704:	00000506 	br	1e71c <OSTaskCreate+0x1a8>
   1e708:	e0bff317 	ldw	r2,-52(fp)
   1e70c:	e0bffb15 	stw	r2,-20(fp)
   1e710:	e0bffb17 	ldw	r2,-20(fp)
   1e714:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1e718:	00800a04 	movi	r2,40
}
   1e71c:	e037883a 	mov	sp,fp
   1e720:	dfc00117 	ldw	ra,4(sp)
   1e724:	df000017 	ldw	fp,0(sp)
   1e728:	dec00204 	addi	sp,sp,8
   1e72c:	f800283a 	ret

0001e730 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1e730:	deffec04 	addi	sp,sp,-80
   1e734:	dfc01315 	stw	ra,76(sp)
   1e738:	df001215 	stw	fp,72(sp)
   1e73c:	df001204 	addi	fp,sp,72
   1e740:	e13ffa15 	stw	r4,-24(fp)
   1e744:	e17ffb15 	stw	r5,-20(fp)
   1e748:	e1bffc15 	stw	r6,-16(fp)
   1e74c:	3809883a 	mov	r4,r7
   1e750:	e0c00217 	ldw	r3,8(fp)
   1e754:	e0800617 	ldw	r2,24(fp)
   1e758:	e13ffd05 	stb	r4,-12(fp)
   1e75c:	e0fffe0d 	sth	r3,-8(fp)
   1e760:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1e764:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1e768:	e0bffd03 	ldbu	r2,-12(fp)
   1e76c:	10800570 	cmpltui	r2,r2,21
   1e770:	1000021e 	bne	r2,zero,1e77c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1e774:	00800a84 	movi	r2,42
   1e778:	00006306 	br	1e908 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e77c:	0005303a 	rdctl	r2,status
   1e780:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e784:	e0fff417 	ldw	r3,-48(fp)
   1e788:	00bfff84 	movi	r2,-2
   1e78c:	1884703a 	and	r2,r3,r2
   1e790:	1001703a 	wrctl	status,r2
  
  return context;
   1e794:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e798:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1e79c:	00800174 	movhi	r2,5
   1e7a0:	108f9004 	addi	r2,r2,15936
   1e7a4:	10800003 	ldbu	r2,0(r2)
   1e7a8:	10803fcc 	andi	r2,r2,255
   1e7ac:	10000626 	beq	r2,zero,1e7c8 <OSTaskCreateExt+0x98>
   1e7b0:	e0bff117 	ldw	r2,-60(fp)
   1e7b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e7b8:	e0bff517 	ldw	r2,-44(fp)
   1e7bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1e7c0:	00800f04 	movi	r2,60
   1e7c4:	00005006 	br	1e908 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1e7c8:	e0fffd03 	ldbu	r3,-12(fp)
   1e7cc:	008001b4 	movhi	r2,6
   1e7d0:	10b63104 	addi	r2,r2,-10044
   1e7d4:	18c7883a 	add	r3,r3,r3
   1e7d8:	18c7883a 	add	r3,r3,r3
   1e7dc:	10c5883a 	add	r2,r2,r3
   1e7e0:	10800017 	ldw	r2,0(r2)
   1e7e4:	1000431e 	bne	r2,zero,1e8f4 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1e7e8:	e0fffd03 	ldbu	r3,-12(fp)
   1e7ec:	008001b4 	movhi	r2,6
   1e7f0:	10b63104 	addi	r2,r2,-10044
   1e7f4:	18c7883a 	add	r3,r3,r3
   1e7f8:	18c7883a 	add	r3,r3,r3
   1e7fc:	10c5883a 	add	r2,r2,r3
   1e800:	00c00044 	movi	r3,1
   1e804:	10c00015 	stw	r3,0(r2)
   1e808:	e0bff117 	ldw	r2,-60(fp)
   1e80c:	e0bff615 	stw	r2,-40(fp)
   1e810:	e0bff617 	ldw	r2,-40(fp)
   1e814:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1e818:	e0bfff0b 	ldhu	r2,-4(fp)
   1e81c:	e1000317 	ldw	r4,12(fp)
   1e820:	e1400417 	ldw	r5,16(fp)
   1e824:	100d883a 	mov	r6,r2
   1e828:	001f8bc0 	call	1f8bc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1e82c:	e0bfff0b 	ldhu	r2,-4(fp)
   1e830:	e13ffa17 	ldw	r4,-24(fp)
   1e834:	e17ffb17 	ldw	r5,-20(fp)
   1e838:	e1bffc17 	ldw	r6,-16(fp)
   1e83c:	100f883a 	mov	r7,r2
   1e840:	003a9e00 	call	3a9e0 <OSTaskStkInit>
   1e844:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1e848:	e13ffd03 	ldbu	r4,-12(fp)
   1e84c:	e1fffe0b 	ldhu	r7,-8(fp)
   1e850:	e0bfff0b 	ldhu	r2,-4(fp)
   1e854:	e0c00417 	ldw	r3,16(fp)
   1e858:	d8c00015 	stw	r3,0(sp)
   1e85c:	e0c00517 	ldw	r3,20(fp)
   1e860:	d8c00115 	stw	r3,4(sp)
   1e864:	d8800215 	stw	r2,8(sp)
   1e868:	e17ff217 	ldw	r5,-56(fp)
   1e86c:	e1800317 	ldw	r6,12(fp)
   1e870:	0019f1c0 	call	19f1c <OS_TCBInit>
   1e874:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1e878:	e0bff303 	ldbu	r2,-52(fp)
   1e87c:	1000081e 	bne	r2,zero,1e8a0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1e880:	00800174 	movhi	r2,5
   1e884:	108f8244 	addi	r2,r2,15881
   1e888:	10800003 	ldbu	r2,0(r2)
   1e88c:	10803fcc 	andi	r2,r2,255
   1e890:	10800058 	cmpnei	r2,r2,1
   1e894:	1000151e 	bne	r2,zero,1e8ec <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1e898:	0019b280 	call	19b28 <OS_Sched>
   1e89c:	00001306 	br	1e8ec <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e8a0:	0005303a 	rdctl	r2,status
   1e8a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e8a8:	e0fff717 	ldw	r3,-36(fp)
   1e8ac:	00bfff84 	movi	r2,-2
   1e8b0:	1884703a 	and	r2,r3,r2
   1e8b4:	1001703a 	wrctl	status,r2
  
  return context;
   1e8b8:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1e8bc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1e8c0:	e0fffd03 	ldbu	r3,-12(fp)
   1e8c4:	008001b4 	movhi	r2,6
   1e8c8:	10b63104 	addi	r2,r2,-10044
   1e8cc:	18c7883a 	add	r3,r3,r3
   1e8d0:	18c7883a 	add	r3,r3,r3
   1e8d4:	10c5883a 	add	r2,r2,r3
   1e8d8:	10000015 	stw	zero,0(r2)
   1e8dc:	e0bff117 	ldw	r2,-60(fp)
   1e8e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e8e4:	e0bff817 	ldw	r2,-32(fp)
   1e8e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1e8ec:	e0bff303 	ldbu	r2,-52(fp)
   1e8f0:	00000506 	br	1e908 <OSTaskCreateExt+0x1d8>
   1e8f4:	e0bff117 	ldw	r2,-60(fp)
   1e8f8:	e0bff915 	stw	r2,-28(fp)
   1e8fc:	e0bff917 	ldw	r2,-28(fp)
   1e900:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1e904:	00800a04 	movi	r2,40
}
   1e908:	e037883a 	mov	sp,fp
   1e90c:	dfc00117 	ldw	ra,4(sp)
   1e910:	df000017 	ldw	fp,0(sp)
   1e914:	dec00204 	addi	sp,sp,8
   1e918:	f800283a 	ret

0001e91c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1e91c:	defff404 	addi	sp,sp,-48
   1e920:	dfc00b15 	stw	ra,44(sp)
   1e924:	df000a15 	stw	fp,40(sp)
   1e928:	df000a04 	addi	fp,sp,40
   1e92c:	2005883a 	mov	r2,r4
   1e930:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1e934:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1e938:	00800174 	movhi	r2,5
   1e93c:	108f9004 	addi	r2,r2,15936
   1e940:	10800003 	ldbu	r2,0(r2)
   1e944:	10803fcc 	andi	r2,r2,255
   1e948:	10000226 	beq	r2,zero,1e954 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1e94c:	00801004 	movi	r2,64
   1e950:	0000e506 	br	1ece8 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1e954:	e0bfff03 	ldbu	r2,-4(fp)
   1e958:	10800518 	cmpnei	r2,r2,20
   1e95c:	1000021e 	bne	r2,zero,1e968 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1e960:	00800f84 	movi	r2,62
   1e964:	0000e006 	br	1ece8 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1e968:	e0bfff03 	ldbu	r2,-4(fp)
   1e96c:	10800530 	cmpltui	r2,r2,20
   1e970:	1000051e 	bne	r2,zero,1e988 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1e974:	e0bfff03 	ldbu	r2,-4(fp)
   1e978:	10803fe0 	cmpeqi	r2,r2,255
   1e97c:	1000021e 	bne	r2,zero,1e988 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1e980:	00800a84 	movi	r2,42
   1e984:	0000d806 	br	1ece8 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e988:	0005303a 	rdctl	r2,status
   1e98c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e990:	e0fff917 	ldw	r3,-28(fp)
   1e994:	00bfff84 	movi	r2,-2
   1e998:	1884703a 	and	r2,r3,r2
   1e99c:	1001703a 	wrctl	status,r2
  
  return context;
   1e9a0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1e9a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1e9a8:	e0bfff03 	ldbu	r2,-4(fp)
   1e9ac:	10803fd8 	cmpnei	r2,r2,255
   1e9b0:	1000051e 	bne	r2,zero,1e9c8 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1e9b4:	00800174 	movhi	r2,5
   1e9b8:	108f9104 	addi	r2,r2,15940
   1e9bc:	10800017 	ldw	r2,0(r2)
   1e9c0:	10800c83 	ldbu	r2,50(r2)
   1e9c4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1e9c8:	e0ffff03 	ldbu	r3,-4(fp)
   1e9cc:	008001b4 	movhi	r2,6
   1e9d0:	10b63104 	addi	r2,r2,-10044
   1e9d4:	18c7883a 	add	r3,r3,r3
   1e9d8:	18c7883a 	add	r3,r3,r3
   1e9dc:	10c5883a 	add	r2,r2,r3
   1e9e0:	10800017 	ldw	r2,0(r2)
   1e9e4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1e9e8:	e0bff717 	ldw	r2,-36(fp)
   1e9ec:	1000061e 	bne	r2,zero,1ea08 <OSTaskDel+0xec>
   1e9f0:	e0bff617 	ldw	r2,-40(fp)
   1e9f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e9f8:	e0bffa17 	ldw	r2,-24(fp)
   1e9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ea00:	008010c4 	movi	r2,67
   1ea04:	0000b806 	br	1ece8 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1ea08:	e0bff717 	ldw	r2,-36(fp)
   1ea0c:	10800058 	cmpnei	r2,r2,1
   1ea10:	1000061e 	bne	r2,zero,1ea2c <OSTaskDel+0x110>
   1ea14:	e0bff617 	ldw	r2,-40(fp)
   1ea18:	e0bffb15 	stw	r2,-20(fp)
   1ea1c:	e0bffb17 	ldw	r2,-20(fp)
   1ea20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1ea24:	00800f44 	movi	r2,61
   1ea28:	0000af06 	br	1ece8 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1ea2c:	e0bff717 	ldw	r2,-36(fp)
   1ea30:	10800d03 	ldbu	r2,52(r2)
   1ea34:	10c03fcc 	andi	r3,r2,255
   1ea38:	e0bff717 	ldw	r2,-36(fp)
   1ea3c:	10800d03 	ldbu	r2,52(r2)
   1ea40:	11003fcc 	andi	r4,r2,255
   1ea44:	00800174 	movhi	r2,5
   1ea48:	108f8e44 	addi	r2,r2,15929
   1ea4c:	1105883a 	add	r2,r2,r4
   1ea50:	10800003 	ldbu	r2,0(r2)
   1ea54:	1009883a 	mov	r4,r2
   1ea58:	e0bff717 	ldw	r2,-36(fp)
   1ea5c:	10800d43 	ldbu	r2,53(r2)
   1ea60:	0084303a 	nor	r2,zero,r2
   1ea64:	2084703a 	and	r2,r4,r2
   1ea68:	1009883a 	mov	r4,r2
   1ea6c:	00800174 	movhi	r2,5
   1ea70:	108f8e44 	addi	r2,r2,15929
   1ea74:	10c5883a 	add	r2,r2,r3
   1ea78:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1ea7c:	e0bff717 	ldw	r2,-36(fp)
   1ea80:	10800d03 	ldbu	r2,52(r2)
   1ea84:	10c03fcc 	andi	r3,r2,255
   1ea88:	00800174 	movhi	r2,5
   1ea8c:	108f8e44 	addi	r2,r2,15929
   1ea90:	10c5883a 	add	r2,r2,r3
   1ea94:	10800003 	ldbu	r2,0(r2)
   1ea98:	10803fcc 	andi	r2,r2,255
   1ea9c:	10000c1e 	bne	r2,zero,1ead0 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1eaa0:	e0bff717 	ldw	r2,-36(fp)
   1eaa4:	10800d83 	ldbu	r2,54(r2)
   1eaa8:	0084303a 	nor	r2,zero,r2
   1eaac:	1007883a 	mov	r3,r2
   1eab0:	00800174 	movhi	r2,5
   1eab4:	108f8e04 	addi	r2,r2,15928
   1eab8:	10800003 	ldbu	r2,0(r2)
   1eabc:	1884703a 	and	r2,r3,r2
   1eac0:	1007883a 	mov	r3,r2
   1eac4:	00800174 	movhi	r2,5
   1eac8:	108f8e04 	addi	r2,r2,15928
   1eacc:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1ead0:	e0bff717 	ldw	r2,-36(fp)
   1ead4:	10800717 	ldw	r2,28(r2)
   1ead8:	10000526 	beq	r2,zero,1eaf0 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1eadc:	e0bff717 	ldw	r2,-36(fp)
   1eae0:	10800717 	ldw	r2,28(r2)
   1eae4:	e13ff717 	ldw	r4,-36(fp)
   1eae8:	100b883a 	mov	r5,r2
   1eaec:	00195000 	call	19500 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1eaf0:	e0bff717 	ldw	r2,-36(fp)
   1eaf4:	10800817 	ldw	r2,32(r2)
   1eaf8:	10000526 	beq	r2,zero,1eb10 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1eafc:	e0bff717 	ldw	r2,-36(fp)
   1eb00:	10800817 	ldw	r2,32(r2)
   1eb04:	e13ff717 	ldw	r4,-36(fp)
   1eb08:	100b883a 	mov	r5,r2
   1eb0c:	00195b40 	call	195b4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1eb10:	e0bff717 	ldw	r2,-36(fp)
   1eb14:	10800a17 	ldw	r2,40(r2)
   1eb18:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1eb1c:	e0bff817 	ldw	r2,-32(fp)
   1eb20:	10000226 	beq	r2,zero,1eb2c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1eb24:	e13ff817 	ldw	r4,-32(fp)
   1eb28:	001baf80 	call	1baf8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1eb2c:	e0bff717 	ldw	r2,-36(fp)
   1eb30:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1eb34:	e0bff717 	ldw	r2,-36(fp)
   1eb38:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1eb3c:	e0bff717 	ldw	r2,-36(fp)
   1eb40:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1eb44:	00800174 	movhi	r2,5
   1eb48:	108f8204 	addi	r2,r2,15880
   1eb4c:	10800003 	ldbu	r2,0(r2)
   1eb50:	10803fcc 	andi	r2,r2,255
   1eb54:	10803fe0 	cmpeqi	r2,r2,255
   1eb58:	1000081e 	bne	r2,zero,1eb7c <OSTaskDel+0x260>
        OSLockNesting++;
   1eb5c:	00800174 	movhi	r2,5
   1eb60:	108f8204 	addi	r2,r2,15880
   1eb64:	10800003 	ldbu	r2,0(r2)
   1eb68:	10800044 	addi	r2,r2,1
   1eb6c:	1007883a 	mov	r3,r2
   1eb70:	00800174 	movhi	r2,5
   1eb74:	108f8204 	addi	r2,r2,15880
   1eb78:	10c00005 	stb	r3,0(r2)
   1eb7c:	e0bff617 	ldw	r2,-40(fp)
   1eb80:	e0bffc15 	stw	r2,-16(fp)
   1eb84:	e0bffc17 	ldw	r2,-16(fp)
   1eb88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1eb8c:	00190f40 	call	190f4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eb90:	0005303a 	rdctl	r2,status
   1eb94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eb98:	e0fffd17 	ldw	r3,-12(fp)
   1eb9c:	00bfff84 	movi	r2,-2
   1eba0:	1884703a 	and	r2,r3,r2
   1eba4:	1001703a 	wrctl	status,r2
  
  return context;
   1eba8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1ebac:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1ebb0:	00800174 	movhi	r2,5
   1ebb4:	108f8204 	addi	r2,r2,15880
   1ebb8:	10800003 	ldbu	r2,0(r2)
   1ebbc:	10803fcc 	andi	r2,r2,255
   1ebc0:	10000826 	beq	r2,zero,1ebe4 <OSTaskDel+0x2c8>
        OSLockNesting--;
   1ebc4:	00800174 	movhi	r2,5
   1ebc8:	108f8204 	addi	r2,r2,15880
   1ebcc:	10800003 	ldbu	r2,0(r2)
   1ebd0:	10bfffc4 	addi	r2,r2,-1
   1ebd4:	1007883a 	mov	r3,r2
   1ebd8:	00800174 	movhi	r2,5
   1ebdc:	108f8204 	addi	r2,r2,15880
   1ebe0:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1ebe4:	e13ff717 	ldw	r4,-36(fp)
   1ebe8:	003acf40 	call	3acf4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1ebec:	00800174 	movhi	r2,5
   1ebf0:	108f8a44 	addi	r2,r2,15913
   1ebf4:	10800003 	ldbu	r2,0(r2)
   1ebf8:	10bfffc4 	addi	r2,r2,-1
   1ebfc:	1007883a 	mov	r3,r2
   1ec00:	00800174 	movhi	r2,5
   1ec04:	108f8a44 	addi	r2,r2,15913
   1ec08:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1ec0c:	e0ffff03 	ldbu	r3,-4(fp)
   1ec10:	008001b4 	movhi	r2,6
   1ec14:	10b63104 	addi	r2,r2,-10044
   1ec18:	18c7883a 	add	r3,r3,r3
   1ec1c:	18c7883a 	add	r3,r3,r3
   1ec20:	10c5883a 	add	r2,r2,r3
   1ec24:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1ec28:	e0bff717 	ldw	r2,-36(fp)
   1ec2c:	10800617 	ldw	r2,24(r2)
   1ec30:	1000091e 	bne	r2,zero,1ec58 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1ec34:	e0bff717 	ldw	r2,-36(fp)
   1ec38:	10800517 	ldw	r2,20(r2)
   1ec3c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1ec40:	e0bff717 	ldw	r2,-36(fp)
   1ec44:	10c00517 	ldw	r3,20(r2)
   1ec48:	00800174 	movhi	r2,5
   1ec4c:	108f8504 	addi	r2,r2,15892
   1ec50:	10c00015 	stw	r3,0(r2)
   1ec54:	00000a06 	br	1ec80 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1ec58:	e0bff717 	ldw	r2,-36(fp)
   1ec5c:	10800617 	ldw	r2,24(r2)
   1ec60:	e0fff717 	ldw	r3,-36(fp)
   1ec64:	18c00517 	ldw	r3,20(r3)
   1ec68:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1ec6c:	e0bff717 	ldw	r2,-36(fp)
   1ec70:	10800517 	ldw	r2,20(r2)
   1ec74:	e0fff717 	ldw	r3,-36(fp)
   1ec78:	18c00617 	ldw	r3,24(r3)
   1ec7c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1ec80:	00800174 	movhi	r2,5
   1ec84:	108f8904 	addi	r2,r2,15908
   1ec88:	10c00017 	ldw	r3,0(r2)
   1ec8c:	e0bff717 	ldw	r2,-36(fp)
   1ec90:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1ec94:	00800174 	movhi	r2,5
   1ec98:	108f8904 	addi	r2,r2,15908
   1ec9c:	e0fff717 	ldw	r3,-36(fp)
   1eca0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1eca4:	e0bff717 	ldw	r2,-36(fp)
   1eca8:	00c00fc4 	movi	r3,63
   1ecac:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1ecb0:	e0bff717 	ldw	r2,-36(fp)
   1ecb4:	10001345 	stb	zero,77(r2)
   1ecb8:	e0bff617 	ldw	r2,-40(fp)
   1ecbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ecc0:	e0bffe17 	ldw	r2,-8(fp)
   1ecc4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1ecc8:	00800174 	movhi	r2,5
   1eccc:	108f8244 	addi	r2,r2,15881
   1ecd0:	10800003 	ldbu	r2,0(r2)
   1ecd4:	10803fcc 	andi	r2,r2,255
   1ecd8:	10800058 	cmpnei	r2,r2,1
   1ecdc:	1000011e 	bne	r2,zero,1ece4 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1ece0:	0019b280 	call	19b28 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ece4:	0005883a 	mov	r2,zero
}
   1ece8:	e037883a 	mov	sp,fp
   1ecec:	dfc00117 	ldw	ra,4(sp)
   1ecf0:	df000017 	ldw	fp,0(sp)
   1ecf4:	dec00204 	addi	sp,sp,8
   1ecf8:	f800283a 	ret

0001ecfc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1ecfc:	defff504 	addi	sp,sp,-44
   1ed00:	df000a15 	stw	fp,40(sp)
   1ed04:	df000a04 	addi	fp,sp,40
   1ed08:	2005883a 	mov	r2,r4
   1ed0c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ed10:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1ed14:	e0bfff03 	ldbu	r2,-4(fp)
   1ed18:	10800518 	cmpnei	r2,r2,20
   1ed1c:	1000021e 	bne	r2,zero,1ed28 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1ed20:	00800f84 	movi	r2,62
   1ed24:	00004706 	br	1ee44 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1ed28:	e0bfff03 	ldbu	r2,-4(fp)
   1ed2c:	10800530 	cmpltui	r2,r2,20
   1ed30:	1000051e 	bne	r2,zero,1ed48 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1ed34:	e0bfff03 	ldbu	r2,-4(fp)
   1ed38:	10803fe0 	cmpeqi	r2,r2,255
   1ed3c:	1000021e 	bne	r2,zero,1ed48 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1ed40:	00800a84 	movi	r2,42
   1ed44:	00003f06 	br	1ee44 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1ed48:	e0bfff03 	ldbu	r2,-4(fp)
   1ed4c:	10803fd8 	cmpnei	r2,r2,255
   1ed50:	1000131e 	bne	r2,zero,1eda0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ed54:	0005303a 	rdctl	r2,status
   1ed58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ed5c:	e0fff917 	ldw	r3,-28(fp)
   1ed60:	00bfff84 	movi	r2,-2
   1ed64:	1884703a 	and	r2,r3,r2
   1ed68:	1001703a 	wrctl	status,r2
  
  return context;
   1ed6c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1ed70:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1ed74:	00800174 	movhi	r2,5
   1ed78:	108f9104 	addi	r2,r2,15940
   1ed7c:	10800017 	ldw	r2,0(r2)
   1ed80:	10800dc3 	ldbu	r2,55(r2)
   1ed84:	e0bff705 	stb	r2,-36(fp)
   1ed88:	e0bff617 	ldw	r2,-40(fp)
   1ed8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ed90:	e0bffa17 	ldw	r2,-24(fp)
   1ed94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1ed98:	e0bff703 	ldbu	r2,-36(fp)
   1ed9c:	00002906 	br	1ee44 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eda0:	0005303a 	rdctl	r2,status
   1eda4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eda8:	e0fffb17 	ldw	r3,-20(fp)
   1edac:	00bfff84 	movi	r2,-2
   1edb0:	1884703a 	and	r2,r3,r2
   1edb4:	1001703a 	wrctl	status,r2
  
  return context;
   1edb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1edbc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1edc0:	e0ffff03 	ldbu	r3,-4(fp)
   1edc4:	008001b4 	movhi	r2,6
   1edc8:	10b63104 	addi	r2,r2,-10044
   1edcc:	18c7883a 	add	r3,r3,r3
   1edd0:	18c7883a 	add	r3,r3,r3
   1edd4:	10c5883a 	add	r2,r2,r3
   1edd8:	10800017 	ldw	r2,0(r2)
   1eddc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1ede0:	e0bff817 	ldw	r2,-32(fp)
   1ede4:	1000061e 	bne	r2,zero,1ee00 <OSTaskDelReq+0x104>
   1ede8:	e0bff617 	ldw	r2,-40(fp)
   1edec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1edf0:	e0bffc17 	ldw	r2,-16(fp)
   1edf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1edf8:	008010c4 	movi	r2,67
   1edfc:	00001106 	br	1ee44 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1ee00:	e0bff817 	ldw	r2,-32(fp)
   1ee04:	10800058 	cmpnei	r2,r2,1
   1ee08:	1000061e 	bne	r2,zero,1ee24 <OSTaskDelReq+0x128>
   1ee0c:	e0bff617 	ldw	r2,-40(fp)
   1ee10:	e0bffd15 	stw	r2,-12(fp)
   1ee14:	e0bffd17 	ldw	r2,-12(fp)
   1ee18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1ee1c:	00800f44 	movi	r2,61
   1ee20:	00000806 	br	1ee44 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1ee24:	e0bff817 	ldw	r2,-32(fp)
   1ee28:	00c00fc4 	movi	r3,63
   1ee2c:	10c00dc5 	stb	r3,55(r2)
   1ee30:	e0bff617 	ldw	r2,-40(fp)
   1ee34:	e0bffe15 	stw	r2,-8(fp)
   1ee38:	e0bffe17 	ldw	r2,-8(fp)
   1ee3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ee40:	0005883a 	mov	r2,zero
}
   1ee44:	e037883a 	mov	sp,fp
   1ee48:	df000017 	ldw	fp,0(sp)
   1ee4c:	dec00104 	addi	sp,sp,4
   1ee50:	f800283a 	ret

0001ee54 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1ee54:	defff404 	addi	sp,sp,-48
   1ee58:	dfc00b15 	stw	ra,44(sp)
   1ee5c:	df000a15 	stw	fp,40(sp)
   1ee60:	df000a04 	addi	fp,sp,40
   1ee64:	2005883a 	mov	r2,r4
   1ee68:	e17ffe15 	stw	r5,-8(fp)
   1ee6c:	e1bfff15 	stw	r6,-4(fp)
   1ee70:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1ee74:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1ee78:	e0bfff17 	ldw	r2,-4(fp)
   1ee7c:	1000021e 	bne	r2,zero,1ee88 <OSTaskNameGet+0x34>
        return (0);
   1ee80:	0005883a 	mov	r2,zero
   1ee84:	00005806 	br	1efe8 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1ee88:	e0bffd03 	ldbu	r2,-12(fp)
   1ee8c:	10800570 	cmpltui	r2,r2,21
   1ee90:	1000081e 	bne	r2,zero,1eeb4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1ee94:	e0bffd03 	ldbu	r2,-12(fp)
   1ee98:	10803fe0 	cmpeqi	r2,r2,255
   1ee9c:	1000051e 	bne	r2,zero,1eeb4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1eea0:	e0bfff17 	ldw	r2,-4(fp)
   1eea4:	00c00a84 	movi	r3,42
   1eea8:	10c00005 	stb	r3,0(r2)
            return (0);
   1eeac:	0005883a 	mov	r2,zero
   1eeb0:	00004d06 	br	1efe8 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1eeb4:	e0bffe17 	ldw	r2,-8(fp)
   1eeb8:	1000051e 	bne	r2,zero,1eed0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1eebc:	e0bfff17 	ldw	r2,-4(fp)
   1eec0:	00c00304 	movi	r3,12
   1eec4:	10c00005 	stb	r3,0(r2)
        return (0);
   1eec8:	0005883a 	mov	r2,zero
   1eecc:	00004606 	br	1efe8 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1eed0:	00800174 	movhi	r2,5
   1eed4:	108f9004 	addi	r2,r2,15936
   1eed8:	10800003 	ldbu	r2,0(r2)
   1eedc:	10803fcc 	andi	r2,r2,255
   1eee0:	10000526 	beq	r2,zero,1eef8 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1eee4:	e0bfff17 	ldw	r2,-4(fp)
   1eee8:	00c00444 	movi	r3,17
   1eeec:	10c00005 	stb	r3,0(r2)
        return (0);
   1eef0:	0005883a 	mov	r2,zero
   1eef4:	00003c06 	br	1efe8 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eef8:	0005303a 	rdctl	r2,status
   1eefc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ef00:	e0fff917 	ldw	r3,-28(fp)
   1ef04:	00bfff84 	movi	r2,-2
   1ef08:	1884703a 	and	r2,r3,r2
   1ef0c:	1001703a 	wrctl	status,r2
  
  return context;
   1ef10:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1ef14:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1ef18:	e0bffd03 	ldbu	r2,-12(fp)
   1ef1c:	10803fd8 	cmpnei	r2,r2,255
   1ef20:	1000051e 	bne	r2,zero,1ef38 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1ef24:	00800174 	movhi	r2,5
   1ef28:	108f9104 	addi	r2,r2,15940
   1ef2c:	10800017 	ldw	r2,0(r2)
   1ef30:	10800c83 	ldbu	r2,50(r2)
   1ef34:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ef38:	e0fffd03 	ldbu	r3,-12(fp)
   1ef3c:	008001b4 	movhi	r2,6
   1ef40:	10b63104 	addi	r2,r2,-10044
   1ef44:	18c7883a 	add	r3,r3,r3
   1ef48:	18c7883a 	add	r3,r3,r3
   1ef4c:	10c5883a 	add	r2,r2,r3
   1ef50:	10800017 	ldw	r2,0(r2)
   1ef54:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1ef58:	e0bff717 	ldw	r2,-36(fp)
   1ef5c:	1000091e 	bne	r2,zero,1ef84 <OSTaskNameGet+0x130>
   1ef60:	e0bff617 	ldw	r2,-40(fp)
   1ef64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ef68:	e0bffa17 	ldw	r2,-24(fp)
   1ef6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ef70:	e0bfff17 	ldw	r2,-4(fp)
   1ef74:	00c010c4 	movi	r3,67
   1ef78:	10c00005 	stb	r3,0(r2)
        return (0);
   1ef7c:	0005883a 	mov	r2,zero
   1ef80:	00001906 	br	1efe8 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1ef84:	e0bff717 	ldw	r2,-36(fp)
   1ef88:	10800058 	cmpnei	r2,r2,1
   1ef8c:	1000091e 	bne	r2,zero,1efb4 <OSTaskNameGet+0x160>
   1ef90:	e0bff617 	ldw	r2,-40(fp)
   1ef94:	e0bffb15 	stw	r2,-20(fp)
   1ef98:	e0bffb17 	ldw	r2,-20(fp)
   1ef9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1efa0:	e0bfff17 	ldw	r2,-4(fp)
   1efa4:	00c010c4 	movi	r3,67
   1efa8:	10c00005 	stb	r3,0(r2)
        return (0);
   1efac:	0005883a 	mov	r2,zero
   1efb0:	00000d06 	br	1efe8 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1efb4:	e0bff717 	ldw	r2,-36(fp)
   1efb8:	10801304 	addi	r2,r2,76
   1efbc:	e13ffe17 	ldw	r4,-8(fp)
   1efc0:	100b883a 	mov	r5,r2
   1efc4:	0019c640 	call	19c64 <OS_StrCopy>
   1efc8:	e0bff805 	stb	r2,-32(fp)
   1efcc:	e0bff617 	ldw	r2,-40(fp)
   1efd0:	e0bffc15 	stw	r2,-16(fp)
   1efd4:	e0bffc17 	ldw	r2,-16(fp)
   1efd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1efdc:	e0bfff17 	ldw	r2,-4(fp)
   1efe0:	10000005 	stb	zero,0(r2)
    return (len);
   1efe4:	e0bff803 	ldbu	r2,-32(fp)
}
   1efe8:	e037883a 	mov	sp,fp
   1efec:	dfc00117 	ldw	ra,4(sp)
   1eff0:	df000017 	ldw	fp,0(sp)
   1eff4:	dec00204 	addi	sp,sp,8
   1eff8:	f800283a 	ret

0001effc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1effc:	defff304 	addi	sp,sp,-52
   1f000:	dfc00c15 	stw	ra,48(sp)
   1f004:	df000b15 	stw	fp,44(sp)
   1f008:	df000b04 	addi	fp,sp,44
   1f00c:	2005883a 	mov	r2,r4
   1f010:	e17ffe15 	stw	r5,-8(fp)
   1f014:	e1bfff15 	stw	r6,-4(fp)
   1f018:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1f01c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1f020:	e0bfff17 	ldw	r2,-4(fp)
   1f024:	1000011e 	bne	r2,zero,1f02c <OSTaskNameSet+0x30>
        return;
   1f028:	00005f06 	br	1f1a8 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1f02c:	e0bffd03 	ldbu	r2,-12(fp)
   1f030:	10800570 	cmpltui	r2,r2,21
   1f034:	1000071e 	bne	r2,zero,1f054 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1f038:	e0bffd03 	ldbu	r2,-12(fp)
   1f03c:	10803fe0 	cmpeqi	r2,r2,255
   1f040:	1000041e 	bne	r2,zero,1f054 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1f044:	e0bfff17 	ldw	r2,-4(fp)
   1f048:	00c00a84 	movi	r3,42
   1f04c:	10c00005 	stb	r3,0(r2)
            return;
   1f050:	00005506 	br	1f1a8 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1f054:	e0bffe17 	ldw	r2,-8(fp)
   1f058:	1000041e 	bne	r2,zero,1f06c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1f05c:	e0bfff17 	ldw	r2,-4(fp)
   1f060:	00c00304 	movi	r3,12
   1f064:	10c00005 	stb	r3,0(r2)
        return;
   1f068:	00004f06 	br	1f1a8 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1f06c:	00800174 	movhi	r2,5
   1f070:	108f9004 	addi	r2,r2,15936
   1f074:	10800003 	ldbu	r2,0(r2)
   1f078:	10803fcc 	andi	r2,r2,255
   1f07c:	10000426 	beq	r2,zero,1f090 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1f080:	e0bfff17 	ldw	r2,-4(fp)
   1f084:	00c00484 	movi	r3,18
   1f088:	10c00005 	stb	r3,0(r2)
        return;
   1f08c:	00004606 	br	1f1a8 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f090:	0005303a 	rdctl	r2,status
   1f094:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f098:	e0fff817 	ldw	r3,-32(fp)
   1f09c:	00bfff84 	movi	r2,-2
   1f0a0:	1884703a 	and	r2,r3,r2
   1f0a4:	1001703a 	wrctl	status,r2
  
  return context;
   1f0a8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1f0ac:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1f0b0:	e0bffd03 	ldbu	r2,-12(fp)
   1f0b4:	10803fd8 	cmpnei	r2,r2,255
   1f0b8:	1000051e 	bne	r2,zero,1f0d0 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1f0bc:	00800174 	movhi	r2,5
   1f0c0:	108f9104 	addi	r2,r2,15940
   1f0c4:	10800017 	ldw	r2,0(r2)
   1f0c8:	10800c83 	ldbu	r2,50(r2)
   1f0cc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1f0d0:	e0fffd03 	ldbu	r3,-12(fp)
   1f0d4:	008001b4 	movhi	r2,6
   1f0d8:	10b63104 	addi	r2,r2,-10044
   1f0dc:	18c7883a 	add	r3,r3,r3
   1f0e0:	18c7883a 	add	r3,r3,r3
   1f0e4:	10c5883a 	add	r2,r2,r3
   1f0e8:	10800017 	ldw	r2,0(r2)
   1f0ec:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1f0f0:	e0bff617 	ldw	r2,-40(fp)
   1f0f4:	1000081e 	bne	r2,zero,1f118 <OSTaskNameSet+0x11c>
   1f0f8:	e0bff517 	ldw	r2,-44(fp)
   1f0fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f100:	e0bff917 	ldw	r2,-28(fp)
   1f104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1f108:	e0bfff17 	ldw	r2,-4(fp)
   1f10c:	00c010c4 	movi	r3,67
   1f110:	10c00005 	stb	r3,0(r2)
        return;
   1f114:	00002406 	br	1f1a8 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1f118:	e0bff617 	ldw	r2,-40(fp)
   1f11c:	10800058 	cmpnei	r2,r2,1
   1f120:	1000081e 	bne	r2,zero,1f144 <OSTaskNameSet+0x148>
   1f124:	e0bff517 	ldw	r2,-44(fp)
   1f128:	e0bffa15 	stw	r2,-24(fp)
   1f12c:	e0bffa17 	ldw	r2,-24(fp)
   1f130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1f134:	e0bfff17 	ldw	r2,-4(fp)
   1f138:	00c010c4 	movi	r3,67
   1f13c:	10c00005 	stb	r3,0(r2)
        return;
   1f140:	00001906 	br	1f1a8 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1f144:	e13ffe17 	ldw	r4,-8(fp)
   1f148:	0019cd80 	call	19cd8 <OS_StrLen>
   1f14c:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1f150:	e0bff703 	ldbu	r2,-36(fp)
   1f154:	10800830 	cmpltui	r2,r2,32
   1f158:	1000081e 	bne	r2,zero,1f17c <OSTaskNameSet+0x180>
   1f15c:	e0bff517 	ldw	r2,-44(fp)
   1f160:	e0bffb15 	stw	r2,-20(fp)
   1f164:	e0bffb17 	ldw	r2,-20(fp)
   1f168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1f16c:	e0bfff17 	ldw	r2,-4(fp)
   1f170:	00c01044 	movi	r3,65
   1f174:	10c00005 	stb	r3,0(r2)
        return;
   1f178:	00000b06 	br	1f1a8 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1f17c:	e0bff617 	ldw	r2,-40(fp)
   1f180:	10801304 	addi	r2,r2,76
   1f184:	1009883a 	mov	r4,r2
   1f188:	e17ffe17 	ldw	r5,-8(fp)
   1f18c:	0019c640 	call	19c64 <OS_StrCopy>
   1f190:	e0bff517 	ldw	r2,-44(fp)
   1f194:	e0bffc15 	stw	r2,-16(fp)
   1f198:	e0bffc17 	ldw	r2,-16(fp)
   1f19c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1f1a0:	e0bfff17 	ldw	r2,-4(fp)
   1f1a4:	10000005 	stb	zero,0(r2)
}
   1f1a8:	e037883a 	mov	sp,fp
   1f1ac:	dfc00117 	ldw	ra,4(sp)
   1f1b0:	df000017 	ldw	fp,0(sp)
   1f1b4:	dec00204 	addi	sp,sp,8
   1f1b8:	f800283a 	ret

0001f1bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1f1bc:	defff404 	addi	sp,sp,-48
   1f1c0:	dfc00b15 	stw	ra,44(sp)
   1f1c4:	df000a15 	stw	fp,40(sp)
   1f1c8:	df000a04 	addi	fp,sp,40
   1f1cc:	2005883a 	mov	r2,r4
   1f1d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1f1d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1f1d8:	e0bfff03 	ldbu	r2,-4(fp)
   1f1dc:	10800530 	cmpltui	r2,r2,20
   1f1e0:	1000021e 	bne	r2,zero,1f1ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1f1e4:	00800a84 	movi	r2,42
   1f1e8:	00006d06 	br	1f3a0 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f1ec:	0005303a 	rdctl	r2,status
   1f1f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f1f4:	e0fff817 	ldw	r3,-32(fp)
   1f1f8:	00bfff84 	movi	r2,-2
   1f1fc:	1884703a 	and	r2,r3,r2
   1f200:	1001703a 	wrctl	status,r2
  
  return context;
   1f204:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f208:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1f20c:	e0ffff03 	ldbu	r3,-4(fp)
   1f210:	008001b4 	movhi	r2,6
   1f214:	10b63104 	addi	r2,r2,-10044
   1f218:	18c7883a 	add	r3,r3,r3
   1f21c:	18c7883a 	add	r3,r3,r3
   1f220:	10c5883a 	add	r2,r2,r3
   1f224:	10800017 	ldw	r2,0(r2)
   1f228:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1f22c:	e0bff717 	ldw	r2,-36(fp)
   1f230:	1000061e 	bne	r2,zero,1f24c <OSTaskResume+0x90>
   1f234:	e0bff617 	ldw	r2,-40(fp)
   1f238:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f23c:	e0bff917 	ldw	r2,-28(fp)
   1f240:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1f244:	00801184 	movi	r2,70
   1f248:	00005506 	br	1f3a0 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1f24c:	e0bff717 	ldw	r2,-36(fp)
   1f250:	10800058 	cmpnei	r2,r2,1
   1f254:	1000061e 	bne	r2,zero,1f270 <OSTaskResume+0xb4>
   1f258:	e0bff617 	ldw	r2,-40(fp)
   1f25c:	e0bffa15 	stw	r2,-24(fp)
   1f260:	e0bffa17 	ldw	r2,-24(fp)
   1f264:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f268:	008010c4 	movi	r2,67
   1f26c:	00004c06 	br	1f3a0 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1f270:	e0bff717 	ldw	r2,-36(fp)
   1f274:	10800c03 	ldbu	r2,48(r2)
   1f278:	10803fcc 	andi	r2,r2,255
   1f27c:	1080020c 	andi	r2,r2,8
   1f280:	10004226 	beq	r2,zero,1f38c <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1f284:	e0bff717 	ldw	r2,-36(fp)
   1f288:	10c00c03 	ldbu	r3,48(r2)
   1f28c:	00bffdc4 	movi	r2,-9
   1f290:	1884703a 	and	r2,r3,r2
   1f294:	1007883a 	mov	r3,r2
   1f298:	e0bff717 	ldw	r2,-36(fp)
   1f29c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1f2a0:	e0bff717 	ldw	r2,-36(fp)
   1f2a4:	10800c03 	ldbu	r2,48(r2)
   1f2a8:	10803fcc 	andi	r2,r2,255
   1f2ac:	1000311e 	bne	r2,zero,1f374 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1f2b0:	e0bff717 	ldw	r2,-36(fp)
   1f2b4:	10800b8b 	ldhu	r2,46(r2)
   1f2b8:	10bfffcc 	andi	r2,r2,65535
   1f2bc:	1000281e 	bne	r2,zero,1f360 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1f2c0:	e0bff717 	ldw	r2,-36(fp)
   1f2c4:	10c00d83 	ldbu	r3,54(r2)
   1f2c8:	00800174 	movhi	r2,5
   1f2cc:	108f8e04 	addi	r2,r2,15928
   1f2d0:	10800003 	ldbu	r2,0(r2)
   1f2d4:	1884b03a 	or	r2,r3,r2
   1f2d8:	1007883a 	mov	r3,r2
   1f2dc:	00800174 	movhi	r2,5
   1f2e0:	108f8e04 	addi	r2,r2,15928
   1f2e4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1f2e8:	e0bff717 	ldw	r2,-36(fp)
   1f2ec:	10800d03 	ldbu	r2,52(r2)
   1f2f0:	10c03fcc 	andi	r3,r2,255
   1f2f4:	e0bff717 	ldw	r2,-36(fp)
   1f2f8:	10800d03 	ldbu	r2,52(r2)
   1f2fc:	11003fcc 	andi	r4,r2,255
   1f300:	00800174 	movhi	r2,5
   1f304:	108f8e44 	addi	r2,r2,15929
   1f308:	1105883a 	add	r2,r2,r4
   1f30c:	11000003 	ldbu	r4,0(r2)
   1f310:	e0bff717 	ldw	r2,-36(fp)
   1f314:	10800d43 	ldbu	r2,53(r2)
   1f318:	2084b03a 	or	r2,r4,r2
   1f31c:	1009883a 	mov	r4,r2
   1f320:	00800174 	movhi	r2,5
   1f324:	108f8e44 	addi	r2,r2,15929
   1f328:	10c5883a 	add	r2,r2,r3
   1f32c:	11000005 	stb	r4,0(r2)
   1f330:	e0bff617 	ldw	r2,-40(fp)
   1f334:	e0bffb15 	stw	r2,-20(fp)
   1f338:	e0bffb17 	ldw	r2,-20(fp)
   1f33c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1f340:	00800174 	movhi	r2,5
   1f344:	108f8244 	addi	r2,r2,15881
   1f348:	10800003 	ldbu	r2,0(r2)
   1f34c:	10803fcc 	andi	r2,r2,255
   1f350:	10800058 	cmpnei	r2,r2,1
   1f354:	10000b1e 	bne	r2,zero,1f384 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1f358:	0019b280 	call	19b28 <OS_Sched>
   1f35c:	00000906 	br	1f384 <OSTaskResume+0x1c8>
   1f360:	e0bff617 	ldw	r2,-40(fp)
   1f364:	e0bffc15 	stw	r2,-16(fp)
   1f368:	e0bffc17 	ldw	r2,-16(fp)
   1f36c:	1001703a 	wrctl	status,r2
   1f370:	00000406 	br	1f384 <OSTaskResume+0x1c8>
   1f374:	e0bff617 	ldw	r2,-40(fp)
   1f378:	e0bffd15 	stw	r2,-12(fp)
   1f37c:	e0bffd17 	ldw	r2,-12(fp)
   1f380:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1f384:	0005883a 	mov	r2,zero
   1f388:	00000506 	br	1f3a0 <OSTaskResume+0x1e4>
   1f38c:	e0bff617 	ldw	r2,-40(fp)
   1f390:	e0bffe15 	stw	r2,-8(fp)
   1f394:	e0bffe17 	ldw	r2,-8(fp)
   1f398:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1f39c:	00801104 	movi	r2,68
}
   1f3a0:	e037883a 	mov	sp,fp
   1f3a4:	dfc00117 	ldw	ra,4(sp)
   1f3a8:	df000017 	ldw	fp,0(sp)
   1f3ac:	dec00204 	addi	sp,sp,8
   1f3b0:	f800283a 	ret

0001f3b4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1f3b4:	defff304 	addi	sp,sp,-52
   1f3b8:	df000c15 	stw	fp,48(sp)
   1f3bc:	df000c04 	addi	fp,sp,48
   1f3c0:	2005883a 	mov	r2,r4
   1f3c4:	e17fff15 	stw	r5,-4(fp)
   1f3c8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1f3cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1f3d0:	e0bffe03 	ldbu	r2,-8(fp)
   1f3d4:	10800570 	cmpltui	r2,r2,21
   1f3d8:	1000051e 	bne	r2,zero,1f3f0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1f3dc:	e0bffe03 	ldbu	r2,-8(fp)
   1f3e0:	10803fe0 	cmpeqi	r2,r2,255
   1f3e4:	1000021e 	bne	r2,zero,1f3f0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1f3e8:	00800a84 	movi	r2,42
   1f3ec:	00005f06 	br	1f56c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1f3f0:	e0bfff17 	ldw	r2,-4(fp)
   1f3f4:	1000021e 	bne	r2,zero,1f400 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1f3f8:	00800244 	movi	r2,9
   1f3fc:	00005b06 	br	1f56c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1f400:	e0bfff17 	ldw	r2,-4(fp)
   1f404:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1f408:	e0bfff17 	ldw	r2,-4(fp)
   1f40c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f410:	0005303a 	rdctl	r2,status
   1f414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f418:	e0fff917 	ldw	r3,-28(fp)
   1f41c:	00bfff84 	movi	r2,-2
   1f420:	1884703a 	and	r2,r3,r2
   1f424:	1001703a 	wrctl	status,r2
  
  return context;
   1f428:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1f42c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1f430:	e0bffe03 	ldbu	r2,-8(fp)
   1f434:	10803fd8 	cmpnei	r2,r2,255
   1f438:	1000051e 	bne	r2,zero,1f450 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1f43c:	00800174 	movhi	r2,5
   1f440:	108f9104 	addi	r2,r2,15940
   1f444:	10800017 	ldw	r2,0(r2)
   1f448:	10800c83 	ldbu	r2,50(r2)
   1f44c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1f450:	e0fffe03 	ldbu	r3,-8(fp)
   1f454:	008001b4 	movhi	r2,6
   1f458:	10b63104 	addi	r2,r2,-10044
   1f45c:	18c7883a 	add	r3,r3,r3
   1f460:	18c7883a 	add	r3,r3,r3
   1f464:	10c5883a 	add	r2,r2,r3
   1f468:	10800017 	ldw	r2,0(r2)
   1f46c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1f470:	e0bff717 	ldw	r2,-36(fp)
   1f474:	1000061e 	bne	r2,zero,1f490 <OSTaskStkChk+0xdc>
   1f478:	e0bff617 	ldw	r2,-40(fp)
   1f47c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f480:	e0bffa17 	ldw	r2,-24(fp)
   1f484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f488:	008010c4 	movi	r2,67
   1f48c:	00003706 	br	1f56c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1f490:	e0bff717 	ldw	r2,-36(fp)
   1f494:	10800058 	cmpnei	r2,r2,1
   1f498:	1000061e 	bne	r2,zero,1f4b4 <OSTaskStkChk+0x100>
   1f49c:	e0bff617 	ldw	r2,-40(fp)
   1f4a0:	e0bffb15 	stw	r2,-20(fp)
   1f4a4:	e0bffb17 	ldw	r2,-20(fp)
   1f4a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f4ac:	008010c4 	movi	r2,67
   1f4b0:	00002e06 	br	1f56c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1f4b4:	e0bff717 	ldw	r2,-36(fp)
   1f4b8:	1080040b 	ldhu	r2,16(r2)
   1f4bc:	10bfffcc 	andi	r2,r2,65535
   1f4c0:	1080004c 	andi	r2,r2,1
   1f4c4:	1000061e 	bne	r2,zero,1f4e0 <OSTaskStkChk+0x12c>
   1f4c8:	e0bff617 	ldw	r2,-40(fp)
   1f4cc:	e0bffc15 	stw	r2,-16(fp)
   1f4d0:	e0bffc17 	ldw	r2,-16(fp)
   1f4d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1f4d8:	00801144 	movi	r2,69
   1f4dc:	00002306 	br	1f56c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1f4e0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1f4e4:	e0bff717 	ldw	r2,-36(fp)
   1f4e8:	10800317 	ldw	r2,12(r2)
   1f4ec:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1f4f0:	e0bff717 	ldw	r2,-36(fp)
   1f4f4:	10800217 	ldw	r2,8(r2)
   1f4f8:	e0bff415 	stw	r2,-48(fp)
   1f4fc:	e0bff617 	ldw	r2,-40(fp)
   1f500:	e0bffd15 	stw	r2,-12(fp)
   1f504:	e0bffd17 	ldw	r2,-12(fp)
   1f508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1f50c:	00000306 	br	1f51c <OSTaskStkChk+0x168>
        nfree++;
   1f510:	e0bff517 	ldw	r2,-44(fp)
   1f514:	10800044 	addi	r2,r2,1
   1f518:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1f51c:	e0bff417 	ldw	r2,-48(fp)
   1f520:	10c00104 	addi	r3,r2,4
   1f524:	e0fff415 	stw	r3,-48(fp)
   1f528:	10800017 	ldw	r2,0(r2)
   1f52c:	103ff826 	beq	r2,zero,1f510 <__alt_mem_descriptor_memory+0xdefdf510>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1f530:	e0bff517 	ldw	r2,-44(fp)
   1f534:	1085883a 	add	r2,r2,r2
   1f538:	1085883a 	add	r2,r2,r2
   1f53c:	1007883a 	mov	r3,r2
   1f540:	e0bfff17 	ldw	r2,-4(fp)
   1f544:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1f548:	e0fff817 	ldw	r3,-32(fp)
   1f54c:	e0bff517 	ldw	r2,-44(fp)
   1f550:	1885c83a 	sub	r2,r3,r2
   1f554:	1085883a 	add	r2,r2,r2
   1f558:	1085883a 	add	r2,r2,r2
   1f55c:	1007883a 	mov	r3,r2
   1f560:	e0bfff17 	ldw	r2,-4(fp)
   1f564:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1f568:	0005883a 	mov	r2,zero
}
   1f56c:	e037883a 	mov	sp,fp
   1f570:	df000017 	ldw	fp,0(sp)
   1f574:	dec00104 	addi	sp,sp,4
   1f578:	f800283a 	ret

0001f57c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1f57c:	defff504 	addi	sp,sp,-44
   1f580:	dfc00a15 	stw	ra,40(sp)
   1f584:	df000915 	stw	fp,36(sp)
   1f588:	df000904 	addi	fp,sp,36
   1f58c:	2005883a 	mov	r2,r4
   1f590:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f594:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1f598:	e0bfff03 	ldbu	r2,-4(fp)
   1f59c:	10800518 	cmpnei	r2,r2,20
   1f5a0:	1000021e 	bne	r2,zero,1f5ac <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1f5a4:	008011c4 	movi	r2,71
   1f5a8:	00007406 	br	1f77c <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1f5ac:	e0bfff03 	ldbu	r2,-4(fp)
   1f5b0:	10800530 	cmpltui	r2,r2,20
   1f5b4:	1000051e 	bne	r2,zero,1f5cc <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1f5b8:	e0bfff03 	ldbu	r2,-4(fp)
   1f5bc:	10803fe0 	cmpeqi	r2,r2,255
   1f5c0:	1000021e 	bne	r2,zero,1f5cc <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1f5c4:	00800a84 	movi	r2,42
   1f5c8:	00006c06 	br	1f77c <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f5cc:	0005303a 	rdctl	r2,status
   1f5d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f5d4:	e0fffb17 	ldw	r3,-20(fp)
   1f5d8:	00bfff84 	movi	r2,-2
   1f5dc:	1884703a 	and	r2,r3,r2
   1f5e0:	1001703a 	wrctl	status,r2
  
  return context;
   1f5e4:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1f5e8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1f5ec:	e0bfff03 	ldbu	r2,-4(fp)
   1f5f0:	10803fd8 	cmpnei	r2,r2,255
   1f5f4:	1000081e 	bne	r2,zero,1f618 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1f5f8:	00800174 	movhi	r2,5
   1f5fc:	108f9104 	addi	r2,r2,15940
   1f600:	10800017 	ldw	r2,0(r2)
   1f604:	10800c83 	ldbu	r2,50(r2)
   1f608:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1f60c:	00800044 	movi	r2,1
   1f610:	e0bff705 	stb	r2,-36(fp)
   1f614:	00000b06 	br	1f644 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1f618:	00800174 	movhi	r2,5
   1f61c:	108f9104 	addi	r2,r2,15940
   1f620:	10800017 	ldw	r2,0(r2)
   1f624:	10800c83 	ldbu	r2,50(r2)
   1f628:	10c03fcc 	andi	r3,r2,255
   1f62c:	e0bfff03 	ldbu	r2,-4(fp)
   1f630:	1880031e 	bne	r3,r2,1f640 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1f634:	00800044 	movi	r2,1
   1f638:	e0bff705 	stb	r2,-36(fp)
   1f63c:	00000106 	br	1f644 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1f640:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1f644:	e0ffff03 	ldbu	r3,-4(fp)
   1f648:	008001b4 	movhi	r2,6
   1f64c:	10b63104 	addi	r2,r2,-10044
   1f650:	18c7883a 	add	r3,r3,r3
   1f654:	18c7883a 	add	r3,r3,r3
   1f658:	10c5883a 	add	r2,r2,r3
   1f65c:	10800017 	ldw	r2,0(r2)
   1f660:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1f664:	e0bff917 	ldw	r2,-28(fp)
   1f668:	1000061e 	bne	r2,zero,1f684 <OSTaskSuspend+0x108>
   1f66c:	e0bff817 	ldw	r2,-32(fp)
   1f670:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f674:	e0bffc17 	ldw	r2,-16(fp)
   1f678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1f67c:	00801204 	movi	r2,72
   1f680:	00003e06 	br	1f77c <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1f684:	e0bff917 	ldw	r2,-28(fp)
   1f688:	10800058 	cmpnei	r2,r2,1
   1f68c:	1000061e 	bne	r2,zero,1f6a8 <OSTaskSuspend+0x12c>
   1f690:	e0bff817 	ldw	r2,-32(fp)
   1f694:	e0bffd15 	stw	r2,-12(fp)
   1f698:	e0bffd17 	ldw	r2,-12(fp)
   1f69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f6a0:	008010c4 	movi	r2,67
   1f6a4:	00003506 	br	1f77c <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1f6a8:	e0bff917 	ldw	r2,-28(fp)
   1f6ac:	10800d03 	ldbu	r2,52(r2)
   1f6b0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1f6b4:	e0fffa03 	ldbu	r3,-24(fp)
   1f6b8:	e13ffa03 	ldbu	r4,-24(fp)
   1f6bc:	00800174 	movhi	r2,5
   1f6c0:	108f8e44 	addi	r2,r2,15929
   1f6c4:	1105883a 	add	r2,r2,r4
   1f6c8:	10800003 	ldbu	r2,0(r2)
   1f6cc:	1009883a 	mov	r4,r2
   1f6d0:	e0bff917 	ldw	r2,-28(fp)
   1f6d4:	10800d43 	ldbu	r2,53(r2)
   1f6d8:	0084303a 	nor	r2,zero,r2
   1f6dc:	2084703a 	and	r2,r4,r2
   1f6e0:	1009883a 	mov	r4,r2
   1f6e4:	00800174 	movhi	r2,5
   1f6e8:	108f8e44 	addi	r2,r2,15929
   1f6ec:	10c5883a 	add	r2,r2,r3
   1f6f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1f6f4:	e0fffa03 	ldbu	r3,-24(fp)
   1f6f8:	00800174 	movhi	r2,5
   1f6fc:	108f8e44 	addi	r2,r2,15929
   1f700:	10c5883a 	add	r2,r2,r3
   1f704:	10800003 	ldbu	r2,0(r2)
   1f708:	10803fcc 	andi	r2,r2,255
   1f70c:	10000c1e 	bne	r2,zero,1f740 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1f710:	e0bff917 	ldw	r2,-28(fp)
   1f714:	10800d83 	ldbu	r2,54(r2)
   1f718:	0084303a 	nor	r2,zero,r2
   1f71c:	1007883a 	mov	r3,r2
   1f720:	00800174 	movhi	r2,5
   1f724:	108f8e04 	addi	r2,r2,15928
   1f728:	10800003 	ldbu	r2,0(r2)
   1f72c:	1884703a 	and	r2,r3,r2
   1f730:	1007883a 	mov	r3,r2
   1f734:	00800174 	movhi	r2,5
   1f738:	108f8e04 	addi	r2,r2,15928
   1f73c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1f740:	e0bff917 	ldw	r2,-28(fp)
   1f744:	10800c03 	ldbu	r2,48(r2)
   1f748:	10800214 	ori	r2,r2,8
   1f74c:	1007883a 	mov	r3,r2
   1f750:	e0bff917 	ldw	r2,-28(fp)
   1f754:	10c00c05 	stb	r3,48(r2)
   1f758:	e0bff817 	ldw	r2,-32(fp)
   1f75c:	e0bffe15 	stw	r2,-8(fp)
   1f760:	e0bffe17 	ldw	r2,-8(fp)
   1f764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1f768:	e0bff703 	ldbu	r2,-36(fp)
   1f76c:	10800058 	cmpnei	r2,r2,1
   1f770:	1000011e 	bne	r2,zero,1f778 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1f774:	0019b280 	call	19b28 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1f778:	0005883a 	mov	r2,zero
}
   1f77c:	e037883a 	mov	sp,fp
   1f780:	dfc00117 	ldw	ra,4(sp)
   1f784:	df000017 	ldw	fp,0(sp)
   1f788:	dec00204 	addi	sp,sp,8
   1f78c:	f800283a 	ret

0001f790 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1f790:	defff604 	addi	sp,sp,-40
   1f794:	dfc00915 	stw	ra,36(sp)
   1f798:	df000815 	stw	fp,32(sp)
   1f79c:	df000804 	addi	fp,sp,32
   1f7a0:	2005883a 	mov	r2,r4
   1f7a4:	e17fff15 	stw	r5,-4(fp)
   1f7a8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f7ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1f7b0:	e0bffe03 	ldbu	r2,-8(fp)
   1f7b4:	10800570 	cmpltui	r2,r2,21
   1f7b8:	1000051e 	bne	r2,zero,1f7d0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1f7bc:	e0bffe03 	ldbu	r2,-8(fp)
   1f7c0:	10803fe0 	cmpeqi	r2,r2,255
   1f7c4:	1000021e 	bne	r2,zero,1f7d0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1f7c8:	00800a84 	movi	r2,42
   1f7cc:	00003606 	br	1f8a8 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1f7d0:	e0bfff17 	ldw	r2,-4(fp)
   1f7d4:	1000021e 	bne	r2,zero,1f7e0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1f7d8:	00800244 	movi	r2,9
   1f7dc:	00003206 	br	1f8a8 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f7e0:	0005303a 	rdctl	r2,status
   1f7e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f7e8:	e0fffa17 	ldw	r3,-24(fp)
   1f7ec:	00bfff84 	movi	r2,-2
   1f7f0:	1884703a 	and	r2,r3,r2
   1f7f4:	1001703a 	wrctl	status,r2
  
  return context;
   1f7f8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f7fc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1f800:	e0bffe03 	ldbu	r2,-8(fp)
   1f804:	10803fd8 	cmpnei	r2,r2,255
   1f808:	1000051e 	bne	r2,zero,1f820 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1f80c:	00800174 	movhi	r2,5
   1f810:	108f9104 	addi	r2,r2,15940
   1f814:	10800017 	ldw	r2,0(r2)
   1f818:	10800c83 	ldbu	r2,50(r2)
   1f81c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1f820:	e0fffe03 	ldbu	r3,-8(fp)
   1f824:	008001b4 	movhi	r2,6
   1f828:	10b63104 	addi	r2,r2,-10044
   1f82c:	18c7883a 	add	r3,r3,r3
   1f830:	18c7883a 	add	r3,r3,r3
   1f834:	10c5883a 	add	r2,r2,r3
   1f838:	10800017 	ldw	r2,0(r2)
   1f83c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1f840:	e0bff917 	ldw	r2,-28(fp)
   1f844:	1000061e 	bne	r2,zero,1f860 <OSTaskQuery+0xd0>
   1f848:	e0bff817 	ldw	r2,-32(fp)
   1f84c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f850:	e0bffb17 	ldw	r2,-20(fp)
   1f854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1f858:	00800a44 	movi	r2,41
   1f85c:	00001206 	br	1f8a8 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1f860:	e0bff917 	ldw	r2,-28(fp)
   1f864:	10800058 	cmpnei	r2,r2,1
   1f868:	1000061e 	bne	r2,zero,1f884 <OSTaskQuery+0xf4>
   1f86c:	e0bff817 	ldw	r2,-32(fp)
   1f870:	e0bffc15 	stw	r2,-16(fp)
   1f874:	e0bffc17 	ldw	r2,-16(fp)
   1f878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f87c:	008010c4 	movi	r2,67
   1f880:	00000906 	br	1f8a8 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1f884:	e13fff17 	ldw	r4,-4(fp)
   1f888:	e17ff917 	ldw	r5,-28(fp)
   1f88c:	01801b04 	movi	r6,108
   1f890:	0019ac40 	call	19ac4 <OS_MemCopy>
   1f894:	e0bff817 	ldw	r2,-32(fp)
   1f898:	e0bffd15 	stw	r2,-12(fp)
   1f89c:	e0bffd17 	ldw	r2,-12(fp)
   1f8a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1f8a4:	0005883a 	mov	r2,zero
}
   1f8a8:	e037883a 	mov	sp,fp
   1f8ac:	dfc00117 	ldw	ra,4(sp)
   1f8b0:	df000017 	ldw	fp,0(sp)
   1f8b4:	dec00204 	addi	sp,sp,8
   1f8b8:	f800283a 	ret

0001f8bc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1f8bc:	defffc04 	addi	sp,sp,-16
   1f8c0:	df000315 	stw	fp,12(sp)
   1f8c4:	df000304 	addi	fp,sp,12
   1f8c8:	e13ffd15 	stw	r4,-12(fp)
   1f8cc:	e17ffe15 	stw	r5,-8(fp)
   1f8d0:	3005883a 	mov	r2,r6
   1f8d4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1f8d8:	e0bfff0b 	ldhu	r2,-4(fp)
   1f8dc:	1080004c 	andi	r2,r2,1
   1f8e0:	10000d26 	beq	r2,zero,1f918 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1f8e4:	e0bfff0b 	ldhu	r2,-4(fp)
   1f8e8:	1080008c 	andi	r2,r2,2
   1f8ec:	10000a26 	beq	r2,zero,1f918 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1f8f0:	00000706 	br	1f910 <OS_TaskStkClr+0x54>
                size--;
   1f8f4:	e0bffe17 	ldw	r2,-8(fp)
   1f8f8:	10bfffc4 	addi	r2,r2,-1
   1f8fc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1f900:	e0bffd17 	ldw	r2,-12(fp)
   1f904:	10c00104 	addi	r3,r2,4
   1f908:	e0fffd15 	stw	r3,-12(fp)
   1f90c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1f910:	e0bffe17 	ldw	r2,-8(fp)
   1f914:	103ff71e 	bne	r2,zero,1f8f4 <__alt_mem_descriptor_memory+0xdefdf8f4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1f918:	e037883a 	mov	sp,fp
   1f91c:	df000017 	ldw	fp,0(sp)
   1f920:	dec00104 	addi	sp,sp,4
   1f924:	f800283a 	ret

0001f928 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1f928:	defff904 	addi	sp,sp,-28
   1f92c:	dfc00615 	stw	ra,24(sp)
   1f930:	df000515 	stw	fp,20(sp)
   1f934:	df000504 	addi	fp,sp,20
   1f938:	2005883a 	mov	r2,r4
   1f93c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f940:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1f944:	00800174 	movhi	r2,5
   1f948:	108f9004 	addi	r2,r2,15936
   1f94c:	10800003 	ldbu	r2,0(r2)
   1f950:	10803fcc 	andi	r2,r2,255
   1f954:	10000126 	beq	r2,zero,1f95c <OSTimeDly+0x34>
        return;
   1f958:	00004006 	br	1fa5c <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1f95c:	e0bfff0b 	ldhu	r2,-4(fp)
   1f960:	10003e26 	beq	r2,zero,1fa5c <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f964:	0005303a 	rdctl	r2,status
   1f968:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f96c:	e0fffd17 	ldw	r3,-12(fp)
   1f970:	00bfff84 	movi	r2,-2
   1f974:	1884703a 	and	r2,r3,r2
   1f978:	1001703a 	wrctl	status,r2
  
  return context;
   1f97c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1f980:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1f984:	00800174 	movhi	r2,5
   1f988:	108f9104 	addi	r2,r2,15940
   1f98c:	10800017 	ldw	r2,0(r2)
   1f990:	10800d03 	ldbu	r2,52(r2)
   1f994:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1f998:	e0fffc03 	ldbu	r3,-16(fp)
   1f99c:	e13ffc03 	ldbu	r4,-16(fp)
   1f9a0:	00800174 	movhi	r2,5
   1f9a4:	108f8e44 	addi	r2,r2,15929
   1f9a8:	1105883a 	add	r2,r2,r4
   1f9ac:	10800003 	ldbu	r2,0(r2)
   1f9b0:	1009883a 	mov	r4,r2
   1f9b4:	00800174 	movhi	r2,5
   1f9b8:	108f9104 	addi	r2,r2,15940
   1f9bc:	10800017 	ldw	r2,0(r2)
   1f9c0:	10800d43 	ldbu	r2,53(r2)
   1f9c4:	0084303a 	nor	r2,zero,r2
   1f9c8:	2084703a 	and	r2,r4,r2
   1f9cc:	1009883a 	mov	r4,r2
   1f9d0:	00800174 	movhi	r2,5
   1f9d4:	108f8e44 	addi	r2,r2,15929
   1f9d8:	10c5883a 	add	r2,r2,r3
   1f9dc:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1f9e0:	e0fffc03 	ldbu	r3,-16(fp)
   1f9e4:	00800174 	movhi	r2,5
   1f9e8:	108f8e44 	addi	r2,r2,15929
   1f9ec:	10c5883a 	add	r2,r2,r3
   1f9f0:	10800003 	ldbu	r2,0(r2)
   1f9f4:	10803fcc 	andi	r2,r2,255
   1f9f8:	10000e1e 	bne	r2,zero,1fa34 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1f9fc:	00800174 	movhi	r2,5
   1fa00:	108f9104 	addi	r2,r2,15940
   1fa04:	10800017 	ldw	r2,0(r2)
   1fa08:	10800d83 	ldbu	r2,54(r2)
   1fa0c:	0084303a 	nor	r2,zero,r2
   1fa10:	1007883a 	mov	r3,r2
   1fa14:	00800174 	movhi	r2,5
   1fa18:	108f8e04 	addi	r2,r2,15928
   1fa1c:	10800003 	ldbu	r2,0(r2)
   1fa20:	1884703a 	and	r2,r3,r2
   1fa24:	1007883a 	mov	r3,r2
   1fa28:	00800174 	movhi	r2,5
   1fa2c:	108f8e04 	addi	r2,r2,15928
   1fa30:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1fa34:	00800174 	movhi	r2,5
   1fa38:	108f9104 	addi	r2,r2,15940
   1fa3c:	10800017 	ldw	r2,0(r2)
   1fa40:	e0ffff0b 	ldhu	r3,-4(fp)
   1fa44:	10c00b8d 	sth	r3,46(r2)
   1fa48:	e0bffb17 	ldw	r2,-20(fp)
   1fa4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fa50:	e0bffe17 	ldw	r2,-8(fp)
   1fa54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1fa58:	0019b280 	call	19b28 <OS_Sched>
    }
}
   1fa5c:	e037883a 	mov	sp,fp
   1fa60:	dfc00117 	ldw	ra,4(sp)
   1fa64:	df000017 	ldw	fp,0(sp)
   1fa68:	dec00204 	addi	sp,sp,8
   1fa6c:	f800283a 	ret

0001fa70 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1fa70:	defff704 	addi	sp,sp,-36
   1fa74:	dfc00815 	stw	ra,32(sp)
   1fa78:	df000715 	stw	fp,28(sp)
   1fa7c:	dc000615 	stw	r16,24(sp)
   1fa80:	df000704 	addi	fp,sp,28
   1fa84:	2011883a 	mov	r8,r4
   1fa88:	2809883a 	mov	r4,r5
   1fa8c:	3007883a 	mov	r3,r6
   1fa90:	3805883a 	mov	r2,r7
   1fa94:	e23ffb05 	stb	r8,-20(fp)
   1fa98:	e13ffc05 	stb	r4,-16(fp)
   1fa9c:	e0fffd05 	stb	r3,-12(fp)
   1faa0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1faa4:	00800174 	movhi	r2,5
   1faa8:	108f9004 	addi	r2,r2,15936
   1faac:	10800003 	ldbu	r2,0(r2)
   1fab0:	10803fcc 	andi	r2,r2,255
   1fab4:	10000226 	beq	r2,zero,1fac0 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
   1fab8:	00801544 	movi	r2,85
   1fabc:	00003e06 	br	1fbb8 <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1fac0:	e0bffb03 	ldbu	r2,-20(fp)
   1fac4:	1000081e 	bne	r2,zero,1fae8 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
   1fac8:	e0bffc03 	ldbu	r2,-16(fp)
   1facc:	1000061e 	bne	r2,zero,1fae8 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
   1fad0:	e0bffd03 	ldbu	r2,-12(fp)
   1fad4:	1000041e 	bne	r2,zero,1fae8 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
   1fad8:	e0bffe0b 	ldhu	r2,-8(fp)
   1fadc:	1000021e 	bne	r2,zero,1fae8 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
   1fae0:	00801504 	movi	r2,84
   1fae4:	00003406 	br	1fbb8 <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
   1fae8:	e0bffc03 	ldbu	r2,-16(fp)
   1faec:	10800f30 	cmpltui	r2,r2,60
   1faf0:	1000021e 	bne	r2,zero,1fafc <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1faf4:	00801444 	movi	r2,81
   1faf8:	00002f06 	br	1fbb8 <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
   1fafc:	e0bffd03 	ldbu	r2,-12(fp)
   1fb00:	10800f30 	cmpltui	r2,r2,60
   1fb04:	1000021e 	bne	r2,zero,1fb10 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1fb08:	00801484 	movi	r2,82
   1fb0c:	00002a06 	br	1fbb8 <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
   1fb10:	e0bffe0b 	ldhu	r2,-8(fp)
   1fb14:	1080fa30 	cmpltui	r2,r2,1000
   1fb18:	1000021e 	bne	r2,zero,1fb24 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
   1fb1c:	008014c4 	movi	r2,83
   1fb20:	00002506 	br	1fbb8 <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1fb24:	e0bffb03 	ldbu	r2,-20(fp)
   1fb28:	10c38424 	muli	r3,r2,3600
   1fb2c:	e0bffc03 	ldbu	r2,-16(fp)
   1fb30:	10800f24 	muli	r2,r2,60
   1fb34:	1887883a 	add	r3,r3,r2
   1fb38:	e0bffd03 	ldbu	r2,-12(fp)
   1fb3c:	1885883a 	add	r2,r3,r2
   1fb40:	14001924 	muli	r16,r2,100
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1fb44:	e0bffe0b 	ldhu	r2,-8(fp)
   1fb48:	10801924 	muli	r2,r2,100
   1fb4c:	10807d04 	addi	r2,r2,500
   1fb50:	1009883a 	mov	r4,r2
   1fb54:	0140fa04 	movi	r5,1000
   1fb58:	00152500 	call	15250 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1fb5c:	8085883a 	add	r2,r16,r2
   1fb60:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1fb64:	e0bffa17 	ldw	r2,-24(fp)
   1fb68:	1004d43a 	srli	r2,r2,16
   1fb6c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1fb70:	e0bffa17 	ldw	r2,-24(fp)
   1fb74:	10bfffcc 	andi	r2,r2,65535
   1fb78:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   1fb7c:	e0bffa17 	ldw	r2,-24(fp)
   1fb80:	10bfffcc 	andi	r2,r2,65535
   1fb84:	1009883a 	mov	r4,r2
   1fb88:	001f9280 	call	1f928 <OSTimeDly>
    while (loops > 0) {
   1fb8c:	00000706 	br	1fbac <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
   1fb90:	01200014 	movui	r4,32768
   1fb94:	001f9280 	call	1f928 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1fb98:	01200014 	movui	r4,32768
   1fb9c:	001f9280 	call	1f928 <OSTimeDly>
        loops--;
   1fba0:	e0bff90b 	ldhu	r2,-28(fp)
   1fba4:	10bfffc4 	addi	r2,r2,-1
   1fba8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1fbac:	e0bff90b 	ldhu	r2,-28(fp)
   1fbb0:	103ff71e 	bne	r2,zero,1fb90 <__alt_mem_descriptor_memory+0xdefdfb90>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1fbb4:	0005883a 	mov	r2,zero
}
   1fbb8:	e6ffff04 	addi	sp,fp,-4
   1fbbc:	dfc00217 	ldw	ra,8(sp)
   1fbc0:	df000117 	ldw	fp,4(sp)
   1fbc4:	dc000017 	ldw	r16,0(sp)
   1fbc8:	dec00304 	addi	sp,sp,12
   1fbcc:	f800283a 	ret

0001fbd0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1fbd0:	defff504 	addi	sp,sp,-44
   1fbd4:	dfc00a15 	stw	ra,40(sp)
   1fbd8:	df000915 	stw	fp,36(sp)
   1fbdc:	df000904 	addi	fp,sp,36
   1fbe0:	2005883a 	mov	r2,r4
   1fbe4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1fbe8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1fbec:	e0bfff03 	ldbu	r2,-4(fp)
   1fbf0:	10800530 	cmpltui	r2,r2,20
   1fbf4:	1000021e 	bne	r2,zero,1fc00 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1fbf8:	00800a84 	movi	r2,42
   1fbfc:	00006b06 	br	1fdac <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fc00:	0005303a 	rdctl	r2,status
   1fc04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fc08:	e0fff917 	ldw	r3,-28(fp)
   1fc0c:	00bfff84 	movi	r2,-2
   1fc10:	1884703a 	and	r2,r3,r2
   1fc14:	1001703a 	wrctl	status,r2
  
  return context;
   1fc18:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1fc1c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1fc20:	e0ffff03 	ldbu	r3,-4(fp)
   1fc24:	008001b4 	movhi	r2,6
   1fc28:	10b63104 	addi	r2,r2,-10044
   1fc2c:	18c7883a 	add	r3,r3,r3
   1fc30:	18c7883a 	add	r3,r3,r3
   1fc34:	10c5883a 	add	r2,r2,r3
   1fc38:	10800017 	ldw	r2,0(r2)
   1fc3c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1fc40:	e0bff817 	ldw	r2,-32(fp)
   1fc44:	1000061e 	bne	r2,zero,1fc60 <OSTimeDlyResume+0x90>
   1fc48:	e0bff717 	ldw	r2,-36(fp)
   1fc4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fc50:	e0bffa17 	ldw	r2,-24(fp)
   1fc54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1fc58:	008010c4 	movi	r2,67
   1fc5c:	00005306 	br	1fdac <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1fc60:	e0bff817 	ldw	r2,-32(fp)
   1fc64:	10800058 	cmpnei	r2,r2,1
   1fc68:	1000061e 	bne	r2,zero,1fc84 <OSTimeDlyResume+0xb4>
   1fc6c:	e0bff717 	ldw	r2,-36(fp)
   1fc70:	e0bffb15 	stw	r2,-20(fp)
   1fc74:	e0bffb17 	ldw	r2,-20(fp)
   1fc78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1fc7c:	008010c4 	movi	r2,67
   1fc80:	00004a06 	br	1fdac <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1fc84:	e0bff817 	ldw	r2,-32(fp)
   1fc88:	10800b8b 	ldhu	r2,46(r2)
   1fc8c:	10bfffcc 	andi	r2,r2,65535
   1fc90:	1000061e 	bne	r2,zero,1fcac <OSTimeDlyResume+0xdc>
   1fc94:	e0bff717 	ldw	r2,-36(fp)
   1fc98:	e0bffc15 	stw	r2,-16(fp)
   1fc9c:	e0bffc17 	ldw	r2,-16(fp)
   1fca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1fca4:	00801404 	movi	r2,80
   1fca8:	00004006 	br	1fdac <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1fcac:	e0bff817 	ldw	r2,-32(fp)
   1fcb0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1fcb4:	e0bff817 	ldw	r2,-32(fp)
   1fcb8:	10800c03 	ldbu	r2,48(r2)
   1fcbc:	10803fcc 	andi	r2,r2,255
   1fcc0:	10800dcc 	andi	r2,r2,55
   1fcc4:	10000b26 	beq	r2,zero,1fcf4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1fcc8:	e0bff817 	ldw	r2,-32(fp)
   1fccc:	10c00c03 	ldbu	r3,48(r2)
   1fcd0:	00bff204 	movi	r2,-56
   1fcd4:	1884703a 	and	r2,r3,r2
   1fcd8:	1007883a 	mov	r3,r2
   1fcdc:	e0bff817 	ldw	r2,-32(fp)
   1fce0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1fce4:	e0bff817 	ldw	r2,-32(fp)
   1fce8:	00c00044 	movi	r3,1
   1fcec:	10c00c45 	stb	r3,49(r2)
   1fcf0:	00000206 	br	1fcfc <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1fcf4:	e0bff817 	ldw	r2,-32(fp)
   1fcf8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1fcfc:	e0bff817 	ldw	r2,-32(fp)
   1fd00:	10800c03 	ldbu	r2,48(r2)
   1fd04:	10803fcc 	andi	r2,r2,255
   1fd08:	1080020c 	andi	r2,r2,8
   1fd0c:	1000221e 	bne	r2,zero,1fd98 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1fd10:	e0bff817 	ldw	r2,-32(fp)
   1fd14:	10c00d83 	ldbu	r3,54(r2)
   1fd18:	00800174 	movhi	r2,5
   1fd1c:	108f8e04 	addi	r2,r2,15928
   1fd20:	10800003 	ldbu	r2,0(r2)
   1fd24:	1884b03a 	or	r2,r3,r2
   1fd28:	1007883a 	mov	r3,r2
   1fd2c:	00800174 	movhi	r2,5
   1fd30:	108f8e04 	addi	r2,r2,15928
   1fd34:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1fd38:	e0bff817 	ldw	r2,-32(fp)
   1fd3c:	10800d03 	ldbu	r2,52(r2)
   1fd40:	10c03fcc 	andi	r3,r2,255
   1fd44:	e0bff817 	ldw	r2,-32(fp)
   1fd48:	10800d03 	ldbu	r2,52(r2)
   1fd4c:	11003fcc 	andi	r4,r2,255
   1fd50:	00800174 	movhi	r2,5
   1fd54:	108f8e44 	addi	r2,r2,15929
   1fd58:	1105883a 	add	r2,r2,r4
   1fd5c:	11000003 	ldbu	r4,0(r2)
   1fd60:	e0bff817 	ldw	r2,-32(fp)
   1fd64:	10800d43 	ldbu	r2,53(r2)
   1fd68:	2084b03a 	or	r2,r4,r2
   1fd6c:	1009883a 	mov	r4,r2
   1fd70:	00800174 	movhi	r2,5
   1fd74:	108f8e44 	addi	r2,r2,15929
   1fd78:	10c5883a 	add	r2,r2,r3
   1fd7c:	11000005 	stb	r4,0(r2)
   1fd80:	e0bff717 	ldw	r2,-36(fp)
   1fd84:	e0bffd15 	stw	r2,-12(fp)
   1fd88:	e0bffd17 	ldw	r2,-12(fp)
   1fd8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1fd90:	0019b280 	call	19b28 <OS_Sched>
   1fd94:	00000406 	br	1fda8 <OSTimeDlyResume+0x1d8>
   1fd98:	e0bff717 	ldw	r2,-36(fp)
   1fd9c:	e0bffe15 	stw	r2,-8(fp)
   1fda0:	e0bffe17 	ldw	r2,-8(fp)
   1fda4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1fda8:	0005883a 	mov	r2,zero
}
   1fdac:	e037883a 	mov	sp,fp
   1fdb0:	dfc00117 	ldw	ra,4(sp)
   1fdb4:	df000017 	ldw	fp,0(sp)
   1fdb8:	dec00204 	addi	sp,sp,8
   1fdbc:	f800283a 	ret

0001fdc0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1fdc0:	defffb04 	addi	sp,sp,-20
   1fdc4:	df000415 	stw	fp,16(sp)
   1fdc8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1fdcc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fdd0:	0005303a 	rdctl	r2,status
   1fdd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fdd8:	e0fffe17 	ldw	r3,-8(fp)
   1fddc:	00bfff84 	movi	r2,-2
   1fde0:	1884703a 	and	r2,r3,r2
   1fde4:	1001703a 	wrctl	status,r2
  
  return context;
   1fde8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1fdec:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1fdf0:	00800174 	movhi	r2,5
   1fdf4:	108f9204 	addi	r2,r2,15944
   1fdf8:	10800017 	ldw	r2,0(r2)
   1fdfc:	e0bffd15 	stw	r2,-12(fp)
   1fe00:	e0bffc17 	ldw	r2,-16(fp)
   1fe04:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe08:	e0bfff17 	ldw	r2,-4(fp)
   1fe0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1fe10:	e0bffd17 	ldw	r2,-12(fp)
}
   1fe14:	e037883a 	mov	sp,fp
   1fe18:	df000017 	ldw	fp,0(sp)
   1fe1c:	dec00104 	addi	sp,sp,4
   1fe20:	f800283a 	ret

0001fe24 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1fe24:	defffb04 	addi	sp,sp,-20
   1fe28:	df000415 	stw	fp,16(sp)
   1fe2c:	df000404 	addi	fp,sp,16
   1fe30:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1fe34:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fe38:	0005303a 	rdctl	r2,status
   1fe3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fe40:	e0fffd17 	ldw	r3,-12(fp)
   1fe44:	00bfff84 	movi	r2,-2
   1fe48:	1884703a 	and	r2,r3,r2
   1fe4c:	1001703a 	wrctl	status,r2
  
  return context;
   1fe50:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1fe54:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1fe58:	00800174 	movhi	r2,5
   1fe5c:	108f9204 	addi	r2,r2,15944
   1fe60:	e0ffff17 	ldw	r3,-4(fp)
   1fe64:	10c00015 	stw	r3,0(r2)
   1fe68:	e0bffc17 	ldw	r2,-16(fp)
   1fe6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe70:	e0bffe17 	ldw	r2,-8(fp)
   1fe74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1fe78:	e037883a 	mov	sp,fp
   1fe7c:	df000017 	ldw	fp,0(sp)
   1fe80:	dec00104 	addi	sp,sp,4
   1fe84:	f800283a 	ret

0001fe88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1fe88:	defffd04 	addi	sp,sp,-12
   1fe8c:	dfc00215 	stw	ra,8(sp)
   1fe90:	df000115 	stw	fp,4(sp)
   1fe94:	df000104 	addi	fp,sp,4
   1fe98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fe9c:	e13fff17 	ldw	r4,-4(fp)
   1fea0:	01400174 	movhi	r5,5
   1fea4:	29476b04 	addi	r5,r5,7596
   1fea8:	0039adc0 	call	39adc <alt_dev_llist_insert>
}
   1feac:	e037883a 	mov	sp,fp
   1feb0:	dfc00117 	ldw	ra,4(sp)
   1feb4:	df000017 	ldw	fp,0(sp)
   1feb8:	dec00204 	addi	sp,sp,8
   1febc:	f800283a 	ret

0001fec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1fec0:	defffd04 	addi	sp,sp,-12
   1fec4:	dfc00215 	stw	ra,8(sp)
   1fec8:	df000115 	stw	fp,4(sp)
   1fecc:	df000104 	addi	fp,sp,4
   1fed0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   1fed4:	003a8f00 	call	3a8f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1fed8:	00800044 	movi	r2,1
   1fedc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1fee0:	e037883a 	mov	sp,fp
   1fee4:	dfc00117 	ldw	ra,4(sp)
   1fee8:	df000017 	ldw	fp,0(sp)
   1feec:	dec00204 	addi	sp,sp,8
   1fef0:	f800283a 	ret

0001fef4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1fef4:	defffa04 	addi	sp,sp,-24
   1fef8:	dfc00515 	stw	ra,20(sp)
   1fefc:	df000415 	stw	fp,16(sp)
   1ff00:	df000404 	addi	fp,sp,16
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
   1ff04:	01080034 	movhi	r4,8192
   1ff08:	21001804 	addi	r4,r4,96
   1ff0c:	000b883a 	mov	r5,zero
   1ff10:	01800084 	movi	r6,2
   1ff14:	01c01904 	movi	r7,100
   1ff18:	0021c600 	call	21c60 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1ff1c:	01000174 	movhi	r4,5
   1ff20:	21020f04 	addi	r4,r4,2108
   1ff24:	000b883a 	mov	r5,zero
   1ff28:	01800104 	movi	r6,4
   1ff2c:	00202b40 	call	202b4 <altera_avalon_jtag_uart_init>
   1ff30:	01000174 	movhi	r4,5
   1ff34:	21020504 	addi	r4,r4,2068
   1ff38:	001fe880 	call	1fe88 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
   1ff3c:	00c00044 	movi	r3,1
   1ff40:	00880034 	movhi	r2,8192
   1ff44:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   1ff48:	01000174 	movhi	r4,5
   1ff4c:	21062004 	addi	r4,r4,6272
   1ff50:	000b883a 	mov	r5,zero
   1ff54:	01800044 	movi	r6,1
   1ff58:	0021b480 	call	21b48 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   1ff5c:	01000174 	movhi	r4,5
   1ff60:	21062c04 	addi	r4,r4,6320
   1ff64:	000b883a 	mov	r5,zero
   1ff68:	000d883a 	mov	r6,zero
   1ff6c:	0021b480 	call	21b48 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1ff70:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
   1ff74:	e03ffc15 	stw	zero,-16(fp)
   1ff78:	00800044 	movi	r2,1
   1ff7c:	e0bffd15 	stw	r2,-12(fp)
   1ff80:	e0bffd17 	ldw	r2,-12(fp)
   1ff84:	00800216 	blt	zero,r2,1ff90 <alt_sys_init+0x9c>
   1ff88:	00800044 	movi	r2,1
   1ff8c:	e0bffd15 	stw	r2,-12(fp)
   1ff90:	e03ffc15 	stw	zero,-16(fp)
   1ff94:	00006606 	br	20130 <alt_sys_init+0x23c>
   1ff98:	008001b4 	movhi	r2,6
   1ff9c:	10b64604 	addi	r2,r2,-9960
   1ffa0:	e0fffc17 	ldw	r3,-16(fp)
   1ffa4:	18c00724 	muli	r3,r3,28
   1ffa8:	10c5883a 	add	r2,r2,r3
   1ffac:	10000015 	stw	zero,0(r2)
   1ffb0:	008001b4 	movhi	r2,6
   1ffb4:	10b64604 	addi	r2,r2,-9960
   1ffb8:	e0fffc17 	ldw	r3,-16(fp)
   1ffbc:	18c00724 	muli	r3,r3,28
   1ffc0:	10c5883a 	add	r2,r2,r3
   1ffc4:	10800104 	addi	r2,r2,4
   1ffc8:	10000015 	stw	zero,0(r2)
   1ffcc:	d0e02817 	ldw	r3,-32608(gp)
   1ffd0:	008001b4 	movhi	r2,6
   1ffd4:	10b64604 	addi	r2,r2,-9960
   1ffd8:	e13ffc17 	ldw	r4,-16(fp)
   1ffdc:	21000724 	muli	r4,r4,28
   1ffe0:	1105883a 	add	r2,r2,r4
   1ffe4:	10800204 	addi	r2,r2,8
   1ffe8:	10c00015 	stw	r3,0(r2)
   1ffec:	008001b4 	movhi	r2,6
   1fff0:	10b64604 	addi	r2,r2,-9960
   1fff4:	e0fffc17 	ldw	r3,-16(fp)
   1fff8:	18c00724 	muli	r3,r3,28
   1fffc:	10c5883a 	add	r2,r2,r3
   20000:	10c00304 	addi	r3,r2,12
   20004:	008000b4 	movhi	r2,2
   20008:	10873a04 	addi	r2,r2,7400
   2000c:	18800015 	stw	r2,0(r3)
   20010:	e0bffc17 	ldw	r2,-16(fp)
   20014:	10c00724 	muli	r3,r2,28
   20018:	008001b4 	movhi	r2,6
   2001c:	10b64604 	addi	r2,r2,-9960
   20020:	1887883a 	add	r3,r3,r2
   20024:	00800174 	movhi	r2,5
   20028:	10875504 	addi	r2,r2,7508
   2002c:	e0bffe15 	stw	r2,-8(fp)
   20030:	e0ffff15 	stw	r3,-4(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   20034:	e0bfff17 	ldw	r2,-4(fp)
   20038:	e0fffe17 	ldw	r3,-8(fp)
   2003c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   20040:	e0bffe17 	ldw	r2,-8(fp)
   20044:	10c00017 	ldw	r3,0(r2)
   20048:	e0bfff17 	ldw	r2,-4(fp)
   2004c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   20050:	e0bffe17 	ldw	r2,-8(fp)
   20054:	10800017 	ldw	r2,0(r2)
   20058:	e0ffff17 	ldw	r3,-4(fp)
   2005c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   20060:	e0bffe17 	ldw	r2,-8(fp)
   20064:	e0ffff17 	ldw	r3,-4(fp)
   20068:	10c00015 	stw	r3,0(r2)
   2006c:	00800174 	movhi	r2,5
   20070:	108f9604 	addi	r2,r2,15960
   20074:	10800003 	ldbu	r2,0(r2)
   20078:	11003fcc 	andi	r4,r2,255
   2007c:	e0bffc17 	ldw	r2,-16(fp)
   20080:	10c00724 	muli	r3,r2,28
   20084:	008001b4 	movhi	r2,6
   20088:	10b64604 	addi	r2,r2,-9960
   2008c:	1887883a 	add	r3,r3,r2
   20090:	008001b4 	movhi	r2,6
   20094:	10b67e04 	addi	r2,r2,-9736
   20098:	21000324 	muli	r4,r4,12
   2009c:	1105883a 	add	r2,r2,r4
   200a0:	10c00015 	stw	r3,0(r2)
   200a4:	00800174 	movhi	r2,5
   200a8:	108f9604 	addi	r2,r2,15960
   200ac:	10800003 	ldbu	r2,0(r2)
   200b0:	10c03fcc 	andi	r3,r2,255
   200b4:	008001b4 	movhi	r2,6
   200b8:	10b67e04 	addi	r2,r2,-9736
   200bc:	18c00324 	muli	r3,r3,12
   200c0:	10c5883a 	add	r2,r2,r3
   200c4:	10c00104 	addi	r3,r2,4
   200c8:	00884134 	movhi	r2,8452
   200cc:	10880004 	addi	r2,r2,8192
   200d0:	18800015 	stw	r2,0(r3)
   200d4:	00800174 	movhi	r2,5
   200d8:	108f9604 	addi	r2,r2,15960
   200dc:	10800003 	ldbu	r2,0(r2)
   200e0:	10c03fcc 	andi	r3,r2,255
   200e4:	e0bffc17 	ldw	r2,-16(fp)
   200e8:	1009883a 	mov	r4,r2
   200ec:	008001b4 	movhi	r2,6
   200f0:	10b67e04 	addi	r2,r2,-9736
   200f4:	18c00324 	muli	r3,r3,12
   200f8:	10c5883a 	add	r2,r2,r3
   200fc:	10800204 	addi	r2,r2,8
   20100:	11000005 	stb	r4,0(r2)
   20104:	00800174 	movhi	r2,5
   20108:	108f9604 	addi	r2,r2,15960
   2010c:	10800003 	ldbu	r2,0(r2)
   20110:	10800044 	addi	r2,r2,1
   20114:	1007883a 	mov	r3,r2
   20118:	00800174 	movhi	r2,5
   2011c:	108f9604 	addi	r2,r2,15960
   20120:	10c00005 	stb	r3,0(r2)
   20124:	e0bffc17 	ldw	r2,-16(fp)
   20128:	10800044 	addi	r2,r2,1
   2012c:	e0bffc15 	stw	r2,-16(fp)
   20130:	e0fffc17 	ldw	r3,-16(fp)
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	18bf9716 	blt	r3,r2,1ff98 <__alt_mem_descriptor_memory+0xdefdff98>
}
   2013c:	e037883a 	mov	sp,fp
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	df000017 	ldw	fp,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret

00020150 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   20150:	defffa04 	addi	sp,sp,-24
   20154:	dfc00515 	stw	ra,20(sp)
   20158:	df000415 	stw	fp,16(sp)
   2015c:	df000404 	addi	fp,sp,16
   20160:	e13ffd15 	stw	r4,-12(fp)
   20164:	e17ffe15 	stw	r5,-8(fp)
   20168:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2016c:	e0bffd17 	ldw	r2,-12(fp)
   20170:	10800017 	ldw	r2,0(r2)
   20174:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20178:	e0bffc17 	ldw	r2,-16(fp)
   2017c:	10c00a04 	addi	r3,r2,40
   20180:	e0bffd17 	ldw	r2,-12(fp)
   20184:	10800217 	ldw	r2,8(r2)
   20188:	1809883a 	mov	r4,r3
   2018c:	e17ffe17 	ldw	r5,-8(fp)
   20190:	e1bfff17 	ldw	r6,-4(fp)
   20194:	100f883a 	mov	r7,r2
   20198:	00209080 	call	20908 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2019c:	e037883a 	mov	sp,fp
   201a0:	dfc00117 	ldw	ra,4(sp)
   201a4:	df000017 	ldw	fp,0(sp)
   201a8:	dec00204 	addi	sp,sp,8
   201ac:	f800283a 	ret

000201b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   201b0:	defffa04 	addi	sp,sp,-24
   201b4:	dfc00515 	stw	ra,20(sp)
   201b8:	df000415 	stw	fp,16(sp)
   201bc:	df000404 	addi	fp,sp,16
   201c0:	e13ffd15 	stw	r4,-12(fp)
   201c4:	e17ffe15 	stw	r5,-8(fp)
   201c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   201cc:	e0bffd17 	ldw	r2,-12(fp)
   201d0:	10800017 	ldw	r2,0(r2)
   201d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   201d8:	e0bffc17 	ldw	r2,-16(fp)
   201dc:	10c00a04 	addi	r3,r2,40
   201e0:	e0bffd17 	ldw	r2,-12(fp)
   201e4:	10800217 	ldw	r2,8(r2)
   201e8:	1809883a 	mov	r4,r3
   201ec:	e17ffe17 	ldw	r5,-8(fp)
   201f0:	e1bfff17 	ldw	r6,-4(fp)
   201f4:	100f883a 	mov	r7,r2
   201f8:	0020bbc0 	call	20bbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   201fc:	e037883a 	mov	sp,fp
   20200:	dfc00117 	ldw	ra,4(sp)
   20204:	df000017 	ldw	fp,0(sp)
   20208:	dec00204 	addi	sp,sp,8
   2020c:	f800283a 	ret

00020210 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   20210:	defffc04 	addi	sp,sp,-16
   20214:	dfc00315 	stw	ra,12(sp)
   20218:	df000215 	stw	fp,8(sp)
   2021c:	df000204 	addi	fp,sp,8
   20220:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20224:	e0bfff17 	ldw	r2,-4(fp)
   20228:	10800017 	ldw	r2,0(r2)
   2022c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20230:	e0bffe17 	ldw	r2,-8(fp)
   20234:	10c00a04 	addi	r3,r2,40
   20238:	e0bfff17 	ldw	r2,-4(fp)
   2023c:	10800217 	ldw	r2,8(r2)
   20240:	1809883a 	mov	r4,r3
   20244:	100b883a 	mov	r5,r2
   20248:	00207b40 	call	207b4 <altera_avalon_jtag_uart_close>
}
   2024c:	e037883a 	mov	sp,fp
   20250:	dfc00117 	ldw	ra,4(sp)
   20254:	df000017 	ldw	fp,0(sp)
   20258:	dec00204 	addi	sp,sp,8
   2025c:	f800283a 	ret

00020260 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   20260:	defffa04 	addi	sp,sp,-24
   20264:	dfc00515 	stw	ra,20(sp)
   20268:	df000415 	stw	fp,16(sp)
   2026c:	df000404 	addi	fp,sp,16
   20270:	e13ffd15 	stw	r4,-12(fp)
   20274:	e17ffe15 	stw	r5,-8(fp)
   20278:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2027c:	e0bffd17 	ldw	r2,-12(fp)
   20280:	10800017 	ldw	r2,0(r2)
   20284:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20288:	e0bffc17 	ldw	r2,-16(fp)
   2028c:	10800a04 	addi	r2,r2,40
   20290:	1009883a 	mov	r4,r2
   20294:	e17ffe17 	ldw	r5,-8(fp)
   20298:	e1bfff17 	ldw	r6,-4(fp)
   2029c:	002081c0 	call	2081c <altera_avalon_jtag_uart_ioctl>
}
   202a0:	e037883a 	mov	sp,fp
   202a4:	dfc00117 	ldw	ra,4(sp)
   202a8:	df000017 	ldw	fp,0(sp)
   202ac:	dec00204 	addi	sp,sp,8
   202b0:	f800283a 	ret

000202b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   202b4:	defff004 	addi	sp,sp,-64
   202b8:	dfc00f15 	stw	ra,60(sp)
   202bc:	df000e15 	stw	fp,56(sp)
   202c0:	df000e04 	addi	fp,sp,56
   202c4:	e13ff915 	stw	r4,-28(fp)
   202c8:	e17ffa15 	stw	r5,-24(fp)
   202cc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   202d0:	e0bff917 	ldw	r2,-28(fp)
   202d4:	10800c04 	addi	r2,r2,48
   202d8:	e0bff315 	stw	r2,-52(fp)
   202dc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   202e0:	e0fff40b 	ldhu	r3,-48(fp)
   202e4:	e0bff884 	addi	r2,fp,-30
   202e8:	1809883a 	mov	r4,r3
   202ec:	100b883a 	mov	r5,r2
   202f0:	001a6840 	call	1a684 <OSFlagCreate>
   202f4:	1007883a 	mov	r3,r2
   202f8:	e0bff317 	ldw	r2,-52(fp)
   202fc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   20300:	e0bff917 	ldw	r2,-28(fp)
   20304:	10800a04 	addi	r2,r2,40
   20308:	e0bff515 	stw	r2,-44(fp)
   2030c:	00800044 	movi	r2,1
   20310:	e0bff60d 	sth	r2,-40(fp)
   20314:	e0bff60b 	ldhu	r2,-40(fp)
   20318:	1009883a 	mov	r4,r2
   2031c:	001d5dc0 	call	1d5dc <OSSemCreate>
   20320:	1007883a 	mov	r3,r2
   20324:	e0bff517 	ldw	r2,-44(fp)
   20328:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   2032c:	e0bff917 	ldw	r2,-28(fp)
   20330:	10800b04 	addi	r2,r2,44
   20334:	e0bff715 	stw	r2,-36(fp)
   20338:	00800044 	movi	r2,1
   2033c:	e0bff80d 	sth	r2,-32(fp)
   20340:	e0bff80b 	ldhu	r2,-32(fp)
   20344:	1009883a 	mov	r4,r2
   20348:	001d5dc0 	call	1d5dc <OSSemCreate>
   2034c:	1007883a 	mov	r3,r2
   20350:	e0bff717 	ldw	r2,-36(fp)
   20354:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20358:	e0bff917 	ldw	r2,-28(fp)
   2035c:	00c00044 	movi	r3,1
   20360:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20364:	e0bff917 	ldw	r2,-28(fp)
   20368:	10800017 	ldw	r2,0(r2)
   2036c:	10800104 	addi	r2,r2,4
   20370:	1007883a 	mov	r3,r2
   20374:	e0bff917 	ldw	r2,-28(fp)
   20378:	10800817 	ldw	r2,32(r2)
   2037c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20380:	e0fffa17 	ldw	r3,-24(fp)
   20384:	e0bffb17 	ldw	r2,-20(fp)
   20388:	d8000015 	stw	zero,0(sp)
   2038c:	1809883a 	mov	r4,r3
   20390:	100b883a 	mov	r5,r2
   20394:	018000b4 	movhi	r6,2
   20398:	31810004 	addi	r6,r6,1024
   2039c:	e1fff917 	ldw	r7,-28(fp)
   203a0:	0039cf80 	call	39cf8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   203a4:	e0bff917 	ldw	r2,-28(fp)
   203a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   203ac:	e0bff917 	ldw	r2,-28(fp)
   203b0:	10c00204 	addi	r3,r2,8
   203b4:	00800174 	movhi	r2,5
   203b8:	108fce04 	addi	r2,r2,16184
   203bc:	10800017 	ldw	r2,0(r2)
   203c0:	1809883a 	mov	r4,r3
   203c4:	100b883a 	mov	r5,r2
   203c8:	018000b4 	movhi	r6,2
   203cc:	3181a904 	addi	r6,r6,1700
   203d0:	e1fff917 	ldw	r7,-28(fp)
   203d4:	00395f00 	call	395f0 <alt_alarm_start>
   203d8:	1000040e 	bge	r2,zero,203ec <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   203dc:	e0fff917 	ldw	r3,-28(fp)
   203e0:	00a00034 	movhi	r2,32768
   203e4:	10bfffc4 	addi	r2,r2,-1
   203e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   203ec:	e037883a 	mov	sp,fp
   203f0:	dfc00117 	ldw	ra,4(sp)
   203f4:	df000017 	ldw	fp,0(sp)
   203f8:	dec00204 	addi	sp,sp,8
   203fc:	f800283a 	ret

00020400 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20400:	defff204 	addi	sp,sp,-56
   20404:	dfc00d15 	stw	ra,52(sp)
   20408:	df000c15 	stw	fp,48(sp)
   2040c:	df000c04 	addi	fp,sp,48
   20410:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   2041c:	e0bff617 	ldw	r2,-40(fp)
   20420:	10800017 	ldw	r2,0(r2)
   20424:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20428:	e0bff717 	ldw	r2,-36(fp)
   2042c:	10800104 	addi	r2,r2,4
   20430:	10800037 	ldwio	r2,0(r2)
   20434:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20438:	e0bff817 	ldw	r2,-32(fp)
   2043c:	1080c00c 	andi	r2,r2,768
   20440:	1000011e 	bne	r2,zero,20448 <altera_avalon_jtag_uart_irq+0x48>
      break;
   20444:	00009206 	br	20690 <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20448:	e0bff817 	ldw	r2,-32(fp)
   2044c:	1080400c 	andi	r2,r2,256
   20450:	10004726 	beq	r2,zero,20570 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   20454:	00800074 	movhi	r2,1
   20458:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2045c:	e0bff617 	ldw	r2,-40(fp)
   20460:	10800d17 	ldw	r2,52(r2)
   20464:	10800044 	addi	r2,r2,1
   20468:	1081ffcc 	andi	r2,r2,2047
   2046c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   20470:	e0bff617 	ldw	r2,-40(fp)
   20474:	10c00e17 	ldw	r3,56(r2)
   20478:	e0bff917 	ldw	r2,-28(fp)
   2047c:	1880011e 	bne	r3,r2,20484 <altera_avalon_jtag_uart_irq+0x84>
          break;
   20480:	00002906 	br	20528 <altera_avalon_jtag_uart_irq+0x128>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20484:	e0bff717 	ldw	r2,-36(fp)
   20488:	10800037 	ldwio	r2,0(r2)
   2048c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20490:	e0bff417 	ldw	r2,-48(fp)
   20494:	10a0000c 	andi	r2,r2,32768
   20498:	1000011e 	bne	r2,zero,204a0 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   2049c:	00002206 	br	20528 <altera_avalon_jtag_uart_irq+0x128>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   204a0:	e0bff617 	ldw	r2,-40(fp)
   204a4:	10800d17 	ldw	r2,52(r2)
   204a8:	e0fff417 	ldw	r3,-48(fp)
   204ac:	1809883a 	mov	r4,r3
   204b0:	e0fff617 	ldw	r3,-40(fp)
   204b4:	1885883a 	add	r2,r3,r2
   204b8:	10801104 	addi	r2,r2,68
   204bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   204c0:	e0bff617 	ldw	r2,-40(fp)
   204c4:	10800d17 	ldw	r2,52(r2)
   204c8:	10800044 	addi	r2,r2,1
   204cc:	10c1ffcc 	andi	r3,r2,2047
   204d0:	e0bff617 	ldw	r2,-40(fp)
   204d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   204d8:	e0bff617 	ldw	r2,-40(fp)
   204dc:	10800c17 	ldw	r2,48(r2)
   204e0:	e0bffa15 	stw	r2,-24(fp)
   204e4:	00800044 	movi	r2,1
   204e8:	e0bffb0d 	sth	r2,-20(fp)
   204ec:	00800044 	movi	r2,1
   204f0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   204f4:	00800174 	movhi	r2,5
   204f8:	108f8244 	addi	r2,r2,15881
   204fc:	10800003 	ldbu	r2,0(r2)
   20500:	10803fcc 	andi	r2,r2,255
   20504:	103fd526 	beq	r2,zero,2045c <__alt_mem_descriptor_memory+0xdefe045c>
  {
    OSFlagPost (group, flags, opt, &err);
   20508:	e17ffb0b 	ldhu	r5,-20(fp)
   2050c:	e0fffb83 	ldbu	r3,-18(fp)
   20510:	e0bffdc4 	addi	r2,fp,-9
   20514:	e13ffa17 	ldw	r4,-24(fp)
   20518:	180d883a 	mov	r6,r3
   2051c:	100f883a 	mov	r7,r2
   20520:	001b2f40 	call	1b2f4 <OSFlagPost>
      }
   20524:	003fcd06 	br	2045c <__alt_mem_descriptor_memory+0xdefe045c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20528:	e0bff417 	ldw	r2,-48(fp)
   2052c:	10bfffec 	andhi	r2,r2,65535
   20530:	10000f26 	beq	r2,zero,20570 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20534:	e0bff617 	ldw	r2,-40(fp)
   20538:	10c00817 	ldw	r3,32(r2)
   2053c:	00bfff84 	movi	r2,-2
   20540:	1886703a 	and	r3,r3,r2
   20544:	e0bff617 	ldw	r2,-40(fp)
   20548:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2054c:	e0bff717 	ldw	r2,-36(fp)
   20550:	10800104 	addi	r2,r2,4
   20554:	1007883a 	mov	r3,r2
   20558:	e0bff617 	ldw	r2,-40(fp)
   2055c:	10800817 	ldw	r2,32(r2)
   20560:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20564:	e0bff717 	ldw	r2,-36(fp)
   20568:	10800104 	addi	r2,r2,4
   2056c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20570:	e0bff817 	ldw	r2,-32(fp)
   20574:	1080800c 	andi	r2,r2,512
   20578:	10004426 	beq	r2,zero,2068c <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2057c:	e0bff817 	ldw	r2,-32(fp)
   20580:	1004d43a 	srli	r2,r2,16
   20584:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20588:	00002706 	br	20628 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2058c:	e0bff717 	ldw	r2,-36(fp)
   20590:	e0fff617 	ldw	r3,-40(fp)
   20594:	18c01017 	ldw	r3,64(r3)
   20598:	e13ff617 	ldw	r4,-40(fp)
   2059c:	20c7883a 	add	r3,r4,r3
   205a0:	18c21104 	addi	r3,r3,2116
   205a4:	18c00003 	ldbu	r3,0(r3)
   205a8:	18c03fcc 	andi	r3,r3,255
   205ac:	18c0201c 	xori	r3,r3,128
   205b0:	18ffe004 	addi	r3,r3,-128
   205b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   205b8:	e0bff617 	ldw	r2,-40(fp)
   205bc:	10801017 	ldw	r2,64(r2)
   205c0:	10800044 	addi	r2,r2,1
   205c4:	10c1ffcc 	andi	r3,r2,2047
   205c8:	e0bff617 	ldw	r2,-40(fp)
   205cc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   205d0:	e0bff617 	ldw	r2,-40(fp)
   205d4:	10800c17 	ldw	r2,48(r2)
   205d8:	e0bffc15 	stw	r2,-16(fp)
   205dc:	00800084 	movi	r2,2
   205e0:	e0bffd0d 	sth	r2,-12(fp)
   205e4:	00800044 	movi	r2,1
   205e8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   205ec:	00800174 	movhi	r2,5
   205f0:	108f8244 	addi	r2,r2,15881
   205f4:	10800003 	ldbu	r2,0(r2)
   205f8:	10803fcc 	andi	r2,r2,255
   205fc:	10000726 	beq	r2,zero,2061c <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
   20600:	e17ffd0b 	ldhu	r5,-12(fp)
   20604:	e0fffd83 	ldbu	r3,-10(fp)
   20608:	e0bffe04 	addi	r2,fp,-8
   2060c:	e13ffc17 	ldw	r4,-16(fp)
   20610:	180d883a 	mov	r6,r3
   20614:	100f883a 	mov	r7,r2
   20618:	001b2f40 	call	1b2f4 <OSFlagPost>

        space--;
   2061c:	e0bff517 	ldw	r2,-44(fp)
   20620:	10bfffc4 	addi	r2,r2,-1
   20624:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20628:	e0bff517 	ldw	r2,-44(fp)
   2062c:	10000526 	beq	r2,zero,20644 <altera_avalon_jtag_uart_irq+0x244>
   20630:	e0bff617 	ldw	r2,-40(fp)
   20634:	10c01017 	ldw	r3,64(r2)
   20638:	e0bff617 	ldw	r2,-40(fp)
   2063c:	10800f17 	ldw	r2,60(r2)
   20640:	18bfd21e 	bne	r3,r2,2058c <__alt_mem_descriptor_memory+0xdefe058c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20644:	e0bff517 	ldw	r2,-44(fp)
   20648:	10001026 	beq	r2,zero,2068c <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2064c:	e0bff617 	ldw	r2,-40(fp)
   20650:	10c00817 	ldw	r3,32(r2)
   20654:	00bfff44 	movi	r2,-3
   20658:	1886703a 	and	r3,r3,r2
   2065c:	e0bff617 	ldw	r2,-40(fp)
   20660:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20664:	e0bff617 	ldw	r2,-40(fp)
   20668:	10800017 	ldw	r2,0(r2)
   2066c:	10800104 	addi	r2,r2,4
   20670:	1007883a 	mov	r3,r2
   20674:	e0bff617 	ldw	r2,-40(fp)
   20678:	10800817 	ldw	r2,32(r2)
   2067c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20680:	e0bff717 	ldw	r2,-36(fp)
   20684:	10800104 	addi	r2,r2,4
   20688:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2068c:	003f6606 	br	20428 <__alt_mem_descriptor_memory+0xdefe0428>
}
   20690:	e037883a 	mov	sp,fp
   20694:	dfc00117 	ldw	ra,4(sp)
   20698:	df000017 	ldw	fp,0(sp)
   2069c:	dec00204 	addi	sp,sp,8
   206a0:	f800283a 	ret

000206a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   206a4:	defff904 	addi	sp,sp,-28
   206a8:	dfc00615 	stw	ra,24(sp)
   206ac:	df000515 	stw	fp,20(sp)
   206b0:	df000504 	addi	fp,sp,20
   206b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   206b8:	e0bfff17 	ldw	r2,-4(fp)
   206bc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   206c0:	e0bffb17 	ldw	r2,-20(fp)
   206c4:	10800017 	ldw	r2,0(r2)
   206c8:	10800104 	addi	r2,r2,4
   206cc:	10800037 	ldwio	r2,0(r2)
   206d0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   206d4:	e0bffc17 	ldw	r2,-16(fp)
   206d8:	1081000c 	andi	r2,r2,1024
   206dc:	10000b26 	beq	r2,zero,2070c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   206e0:	e0bffb17 	ldw	r2,-20(fp)
   206e4:	10800017 	ldw	r2,0(r2)
   206e8:	10800104 	addi	r2,r2,4
   206ec:	1007883a 	mov	r3,r2
   206f0:	e0bffb17 	ldw	r2,-20(fp)
   206f4:	10800817 	ldw	r2,32(r2)
   206f8:	10810014 	ori	r2,r2,1024
   206fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20700:	e0bffb17 	ldw	r2,-20(fp)
   20704:	10000915 	stw	zero,36(r2)
   20708:	00002206 	br	20794 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2070c:	e0bffb17 	ldw	r2,-20(fp)
   20710:	10c00917 	ldw	r3,36(r2)
   20714:	00a00034 	movhi	r2,32768
   20718:	10bfff04 	addi	r2,r2,-4
   2071c:	10c01d36 	bltu	r2,r3,20794 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   20720:	e0bffb17 	ldw	r2,-20(fp)
   20724:	10800917 	ldw	r2,36(r2)
   20728:	10c00044 	addi	r3,r2,1
   2072c:	e0bffb17 	ldw	r2,-20(fp)
   20730:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   20734:	e0bffb17 	ldw	r2,-20(fp)
   20738:	10c00917 	ldw	r3,36(r2)
   2073c:	e0bffb17 	ldw	r2,-20(fp)
   20740:	10800117 	ldw	r2,4(r2)
   20744:	18801336 	bltu	r3,r2,20794 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   20748:	e0bffb17 	ldw	r2,-20(fp)
   2074c:	10800c17 	ldw	r2,48(r2)
   20750:	e0bffd15 	stw	r2,-12(fp)
   20754:	00800104 	movi	r2,4
   20758:	e0bffe0d 	sth	r2,-8(fp)
   2075c:	00800044 	movi	r2,1
   20760:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   20764:	00800174 	movhi	r2,5
   20768:	108f8244 	addi	r2,r2,15881
   2076c:	10800003 	ldbu	r2,0(r2)
   20770:	10803fcc 	andi	r2,r2,255
   20774:	10000726 	beq	r2,zero,20794 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   20778:	e17ffe0b 	ldhu	r5,-8(fp)
   2077c:	e0fffe83 	ldbu	r3,-6(fp)
   20780:	e0bffec4 	addi	r2,fp,-5
   20784:	e13ffd17 	ldw	r4,-12(fp)
   20788:	180d883a 	mov	r6,r3
   2078c:	100f883a 	mov	r7,r2
   20790:	001b2f40 	call	1b2f4 <OSFlagPost>
   20794:	00800174 	movhi	r2,5
   20798:	108fce04 	addi	r2,r2,16184
   2079c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   207a0:	e037883a 	mov	sp,fp
   207a4:	dfc00117 	ldw	ra,4(sp)
   207a8:	df000017 	ldw	fp,0(sp)
   207ac:	dec00204 	addi	sp,sp,8
   207b0:	f800283a 	ret

000207b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   207b4:	defffd04 	addi	sp,sp,-12
   207b8:	df000215 	stw	fp,8(sp)
   207bc:	df000204 	addi	fp,sp,8
   207c0:	e13ffe15 	stw	r4,-8(fp)
   207c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   207c8:	00000506 	br	207e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   207cc:	e0bfff17 	ldw	r2,-4(fp)
   207d0:	1090000c 	andi	r2,r2,16384
   207d4:	10000226 	beq	r2,zero,207e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   207d8:	00bffd44 	movi	r2,-11
   207dc:	00000b06 	br	2080c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   207e0:	e0bffe17 	ldw	r2,-8(fp)
   207e4:	10c01017 	ldw	r3,64(r2)
   207e8:	e0bffe17 	ldw	r2,-8(fp)
   207ec:	10800f17 	ldw	r2,60(r2)
   207f0:	18800526 	beq	r3,r2,20808 <altera_avalon_jtag_uart_close+0x54>
   207f4:	e0bffe17 	ldw	r2,-8(fp)
   207f8:	10c00917 	ldw	r3,36(r2)
   207fc:	e0bffe17 	ldw	r2,-8(fp)
   20800:	10800117 	ldw	r2,4(r2)
   20804:	18bff136 	bltu	r3,r2,207cc <__alt_mem_descriptor_memory+0xdefe07cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20808:	0005883a 	mov	r2,zero
}
   2080c:	e037883a 	mov	sp,fp
   20810:	df000017 	ldw	fp,0(sp)
   20814:	dec00104 	addi	sp,sp,4
   20818:	f800283a 	ret

0002081c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2081c:	defffa04 	addi	sp,sp,-24
   20820:	df000515 	stw	fp,20(sp)
   20824:	df000504 	addi	fp,sp,20
   20828:	e13ffd15 	stw	r4,-12(fp)
   2082c:	e17ffe15 	stw	r5,-8(fp)
   20830:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20834:	00bff9c4 	movi	r2,-25
   20838:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2083c:	e0bffe17 	ldw	r2,-8(fp)
   20840:	10da8060 	cmpeqi	r3,r2,27137
   20844:	1800031e 	bne	r3,zero,20854 <altera_avalon_jtag_uart_ioctl+0x38>
   20848:	109a80a0 	cmpeqi	r2,r2,27138
   2084c:	1000191e 	bne	r2,zero,208b4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   20850:	00002806 	br	208f4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20854:	e0bffd17 	ldw	r2,-12(fp)
   20858:	10c00117 	ldw	r3,4(r2)
   2085c:	00a00034 	movhi	r2,32768
   20860:	10bfffc4 	addi	r2,r2,-1
   20864:	18801226 	beq	r3,r2,208b0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   20868:	e0bfff17 	ldw	r2,-4(fp)
   2086c:	10800017 	ldw	r2,0(r2)
   20870:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20874:	e0bffc17 	ldw	r2,-16(fp)
   20878:	10800090 	cmplti	r2,r2,2
   2087c:	1000061e 	bne	r2,zero,20898 <altera_avalon_jtag_uart_ioctl+0x7c>
   20880:	e0fffc17 	ldw	r3,-16(fp)
   20884:	00a00034 	movhi	r2,32768
   20888:	10bfffc4 	addi	r2,r2,-1
   2088c:	18800226 	beq	r3,r2,20898 <altera_avalon_jtag_uart_ioctl+0x7c>
   20890:	e0bffc17 	ldw	r2,-16(fp)
   20894:	00000206 	br	208a0 <altera_avalon_jtag_uart_ioctl+0x84>
   20898:	00a00034 	movhi	r2,32768
   2089c:	10bfff84 	addi	r2,r2,-2
   208a0:	e0fffd17 	ldw	r3,-12(fp)
   208a4:	18800115 	stw	r2,4(r3)
      rc = 0;
   208a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   208ac:	00001106 	br	208f4 <altera_avalon_jtag_uart_ioctl+0xd8>
   208b0:	00001006 	br	208f4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   208b4:	e0bffd17 	ldw	r2,-12(fp)
   208b8:	10c00117 	ldw	r3,4(r2)
   208bc:	00a00034 	movhi	r2,32768
   208c0:	10bfffc4 	addi	r2,r2,-1
   208c4:	18800a26 	beq	r3,r2,208f0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   208c8:	e0bffd17 	ldw	r2,-12(fp)
   208cc:	10c00917 	ldw	r3,36(r2)
   208d0:	e0bffd17 	ldw	r2,-12(fp)
   208d4:	10800117 	ldw	r2,4(r2)
   208d8:	1885803a 	cmpltu	r2,r3,r2
   208dc:	10c03fcc 	andi	r3,r2,255
   208e0:	e0bfff17 	ldw	r2,-4(fp)
   208e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   208e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   208ec:	00000006 	br	208f0 <altera_avalon_jtag_uart_ioctl+0xd4>
   208f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   208f4:	e0bffb17 	ldw	r2,-20(fp)
}
   208f8:	e037883a 	mov	sp,fp
   208fc:	df000017 	ldw	fp,0(sp)
   20900:	dec00104 	addi	sp,sp,4
   20904:	f800283a 	ret

00020908 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20908:	deffec04 	addi	sp,sp,-80
   2090c:	dfc01315 	stw	ra,76(sp)
   20910:	df001215 	stw	fp,72(sp)
   20914:	df001204 	addi	fp,sp,72
   20918:	e13ffc15 	stw	r4,-16(fp)
   2091c:	e17ffd15 	stw	r5,-12(fp)
   20920:	e1bffe15 	stw	r6,-8(fp)
   20924:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20928:	e0bffd17 	ldw	r2,-12(fp)
   2092c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   20930:	e0bffc17 	ldw	r2,-16(fp)
   20934:	10800a17 	ldw	r2,40(r2)
   20938:	e0bff415 	stw	r2,-48(fp)
   2093c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   20940:	e0fff50b 	ldhu	r3,-44(fp)
   20944:	e0bffb04 	addi	r2,fp,-20
   20948:	e13ff417 	ldw	r4,-48(fp)
   2094c:	180b883a 	mov	r5,r3
   20950:	100d883a 	mov	r6,r2
   20954:	001d9440 	call	1d944 <OSSemPend>

  while (space > 0)
   20958:	00006506 	br	20af0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2095c:	e0bffc17 	ldw	r2,-16(fp)
   20960:	10800d17 	ldw	r2,52(r2)
   20964:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   20968:	e0bffc17 	ldw	r2,-16(fp)
   2096c:	10800e17 	ldw	r2,56(r2)
   20970:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   20974:	e0fff117 	ldw	r3,-60(fp)
   20978:	e0bff217 	ldw	r2,-56(fp)
   2097c:	18800536 	bltu	r3,r2,20994 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   20980:	e0fff117 	ldw	r3,-60(fp)
   20984:	e0bff217 	ldw	r2,-56(fp)
   20988:	1885c83a 	sub	r2,r3,r2
   2098c:	e0bff015 	stw	r2,-64(fp)
   20990:	00000406 	br	209a4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20994:	00c20004 	movi	r3,2048
   20998:	e0bff217 	ldw	r2,-56(fp)
   2099c:	1885c83a 	sub	r2,r3,r2
   209a0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   209a4:	e0bff017 	ldw	r2,-64(fp)
   209a8:	1000011e 	bne	r2,zero,209b0 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   209ac:	00001d06 	br	20a24 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   209b0:	e0fffe17 	ldw	r3,-8(fp)
   209b4:	e0bff017 	ldw	r2,-64(fp)
   209b8:	1880022e 	bgeu	r3,r2,209c4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   209bc:	e0bffe17 	ldw	r2,-8(fp)
   209c0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   209c4:	e0bff217 	ldw	r2,-56(fp)
   209c8:	10801104 	addi	r2,r2,68
   209cc:	e0fffc17 	ldw	r3,-16(fp)
   209d0:	1885883a 	add	r2,r3,r2
   209d4:	e13fef17 	ldw	r4,-68(fp)
   209d8:	100b883a 	mov	r5,r2
   209dc:	e1bff017 	ldw	r6,-64(fp)
   209e0:	0007c900 	call	7c90 <memcpy>
      ptr   += n;
   209e4:	e0ffef17 	ldw	r3,-68(fp)
   209e8:	e0bff017 	ldw	r2,-64(fp)
   209ec:	1885883a 	add	r2,r3,r2
   209f0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   209f4:	e0fffe17 	ldw	r3,-8(fp)
   209f8:	e0bff017 	ldw	r2,-64(fp)
   209fc:	1885c83a 	sub	r2,r3,r2
   20a00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20a04:	e0fff217 	ldw	r3,-56(fp)
   20a08:	e0bff017 	ldw	r2,-64(fp)
   20a0c:	1885883a 	add	r2,r3,r2
   20a10:	10c1ffcc 	andi	r3,r2,2047
   20a14:	e0bffc17 	ldw	r2,-16(fp)
   20a18:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   20a1c:	e0bffe17 	ldw	r2,-8(fp)
   20a20:	00bfce16 	blt	zero,r2,2095c <__alt_mem_descriptor_memory+0xdefe095c>

    /* If we read any data then return it */
    if (ptr != buffer)
   20a24:	e0ffef17 	ldw	r3,-68(fp)
   20a28:	e0bffd17 	ldw	r2,-12(fp)
   20a2c:	18800126 	beq	r3,r2,20a34 <altera_avalon_jtag_uart_read+0x12c>
      break;
   20a30:	00003106 	br	20af8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20a34:	e0bfff17 	ldw	r2,-4(fp)
   20a38:	1090000c 	andi	r2,r2,16384
   20a3c:	10000126 	beq	r2,zero,20a44 <altera_avalon_jtag_uart_read+0x13c>
      break;
   20a40:	00002d06 	br	20af8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   20a44:	00800174 	movhi	r2,5
   20a48:	108f8244 	addi	r2,r2,15881
   20a4c:	10800003 	ldbu	r2,0(r2)
   20a50:	10803fcc 	andi	r2,r2,255
   20a54:	10800058 	cmpnei	r2,r2,1
   20a58:	1000161e 	bne	r2,zero,20ab4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   20a5c:	e0bffc17 	ldw	r2,-16(fp)
   20a60:	10800c17 	ldw	r2,48(r2)
   20a64:	e0bff615 	stw	r2,-40(fp)
   20a68:	00800144 	movi	r2,5
   20a6c:	e0bff70d 	sth	r2,-36(fp)
   20a70:	00bfe0c4 	movi	r2,-125
   20a74:	e0bff785 	stb	r2,-34(fp)
   20a78:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   20a7c:	00800174 	movhi	r2,5
   20a80:	108f8244 	addi	r2,r2,15881
   20a84:	10800003 	ldbu	r2,0(r2)
   20a88:	10803fcc 	andi	r2,r2,255
   20a8c:	10001326 	beq	r2,zero,20adc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   20a90:	e17ff70b 	ldhu	r5,-36(fp)
   20a94:	e1bff783 	ldbu	r6,-34(fp)
   20a98:	e0fff80b 	ldhu	r3,-32(fp)
   20a9c:	e0bffb44 	addi	r2,fp,-19
   20aa0:	d8800015 	stw	r2,0(sp)
   20aa4:	e13ff617 	ldw	r4,-40(fp)
   20aa8:	180f883a 	mov	r7,r3
   20aac:	001ac9c0 	call	1ac9c <OSFlagPend>
   20ab0:	00000a06 	br	20adc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   20ab4:	0001883a 	nop
   20ab8:	e0bffc17 	ldw	r2,-16(fp)
   20abc:	10c00d17 	ldw	r3,52(r2)
   20ac0:	e0bff117 	ldw	r2,-60(fp)
   20ac4:	1880051e 	bne	r3,r2,20adc <altera_avalon_jtag_uart_read+0x1d4>
   20ac8:	e0bffc17 	ldw	r2,-16(fp)
   20acc:	10c00917 	ldw	r3,36(r2)
   20ad0:	e0bffc17 	ldw	r2,-16(fp)
   20ad4:	10800117 	ldw	r2,4(r2)
   20ad8:	18bff736 	bltu	r3,r2,20ab8 <__alt_mem_descriptor_memory+0xdefe0ab8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20adc:	e0bffc17 	ldw	r2,-16(fp)
   20ae0:	10c00d17 	ldw	r3,52(r2)
   20ae4:	e0bff117 	ldw	r2,-60(fp)
   20ae8:	1880011e 	bne	r3,r2,20af0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   20aec:	00000206 	br	20af8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20af0:	e0bffe17 	ldw	r2,-8(fp)
   20af4:	00bf9916 	blt	zero,r2,2095c <__alt_mem_descriptor_memory+0xdefe095c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   20af8:	e0bffc17 	ldw	r2,-16(fp)
   20afc:	10800a17 	ldw	r2,40(r2)
   20b00:	1009883a 	mov	r4,r2
   20b04:	001dd180 	call	1dd18 <OSSemPost>

  if (ptr != buffer)
   20b08:	e0ffef17 	ldw	r3,-68(fp)
   20b0c:	e0bffd17 	ldw	r2,-12(fp)
   20b10:	18801826 	beq	r3,r2,20b74 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20b14:	0005303a 	rdctl	r2,status
   20b18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b1c:	e0fff917 	ldw	r3,-28(fp)
   20b20:	00bfff84 	movi	r2,-2
   20b24:	1884703a 	and	r2,r3,r2
   20b28:	1001703a 	wrctl	status,r2
  
  return context;
   20b2c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   20b30:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20b34:	e0bffc17 	ldw	r2,-16(fp)
   20b38:	10800817 	ldw	r2,32(r2)
   20b3c:	10c00054 	ori	r3,r2,1
   20b40:	e0bffc17 	ldw	r2,-16(fp)
   20b44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20b48:	e0bffc17 	ldw	r2,-16(fp)
   20b4c:	10800017 	ldw	r2,0(r2)
   20b50:	10800104 	addi	r2,r2,4
   20b54:	1007883a 	mov	r3,r2
   20b58:	e0bffc17 	ldw	r2,-16(fp)
   20b5c:	10800817 	ldw	r2,32(r2)
   20b60:	18800035 	stwio	r2,0(r3)
   20b64:	e0bff317 	ldw	r2,-52(fp)
   20b68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20b6c:	e0bffa17 	ldw	r2,-24(fp)
   20b70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   20b74:	e0ffef17 	ldw	r3,-68(fp)
   20b78:	e0bffd17 	ldw	r2,-12(fp)
   20b7c:	18800426 	beq	r3,r2,20b90 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   20b80:	e0ffef17 	ldw	r3,-68(fp)
   20b84:	e0bffd17 	ldw	r2,-12(fp)
   20b88:	1885c83a 	sub	r2,r3,r2
   20b8c:	00000606 	br	20ba8 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   20b90:	e0bfff17 	ldw	r2,-4(fp)
   20b94:	1090000c 	andi	r2,r2,16384
   20b98:	10000226 	beq	r2,zero,20ba4 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   20b9c:	00bffd44 	movi	r2,-11
   20ba0:	00000106 	br	20ba8 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   20ba4:	00bffec4 	movi	r2,-5
}
   20ba8:	e037883a 	mov	sp,fp
   20bac:	dfc00117 	ldw	ra,4(sp)
   20bb0:	df000017 	ldw	fp,0(sp)
   20bb4:	dec00204 	addi	sp,sp,8
   20bb8:	f800283a 	ret

00020bbc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20bbc:	deffed04 	addi	sp,sp,-76
   20bc0:	dfc01215 	stw	ra,72(sp)
   20bc4:	df001115 	stw	fp,68(sp)
   20bc8:	df001104 	addi	fp,sp,68
   20bcc:	e13ffc15 	stw	r4,-16(fp)
   20bd0:	e17ffd15 	stw	r5,-12(fp)
   20bd4:	e1bffe15 	stw	r6,-8(fp)
   20bd8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20bdc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20be0:	e0bffd17 	ldw	r2,-12(fp)
   20be4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   20be8:	e0bffc17 	ldw	r2,-16(fp)
   20bec:	10800b17 	ldw	r2,44(r2)
   20bf0:	e0bff515 	stw	r2,-44(fp)
   20bf4:	e03ff60d 	sth	zero,-40(fp)
   20bf8:	e0fff60b 	ldhu	r3,-40(fp)
   20bfc:	e0bffbc4 	addi	r2,fp,-17
   20c00:	e13ff517 	ldw	r4,-44(fp)
   20c04:	180b883a 	mov	r5,r3
   20c08:	100d883a 	mov	r6,r2
   20c0c:	001d9440 	call	1d944 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20c10:	00003806 	br	20cf4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20c14:	e0bffc17 	ldw	r2,-16(fp)
   20c18:	10800f17 	ldw	r2,60(r2)
   20c1c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   20c20:	e0bffc17 	ldw	r2,-16(fp)
   20c24:	10801017 	ldw	r2,64(r2)
   20c28:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   20c2c:	e0fff317 	ldw	r3,-52(fp)
   20c30:	e0bff017 	ldw	r2,-64(fp)
   20c34:	1880062e 	bgeu	r3,r2,20c50 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   20c38:	e0fff017 	ldw	r3,-64(fp)
   20c3c:	e0bff317 	ldw	r2,-52(fp)
   20c40:	1885c83a 	sub	r2,r3,r2
   20c44:	10bfffc4 	addi	r2,r2,-1
   20c48:	e0bff115 	stw	r2,-60(fp)
   20c4c:	00000b06 	br	20c7c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   20c50:	e0bff017 	ldw	r2,-64(fp)
   20c54:	10000526 	beq	r2,zero,20c6c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   20c58:	00c20004 	movi	r3,2048
   20c5c:	e0bff317 	ldw	r2,-52(fp)
   20c60:	1885c83a 	sub	r2,r3,r2
   20c64:	e0bff115 	stw	r2,-60(fp)
   20c68:	00000406 	br	20c7c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   20c6c:	00c1ffc4 	movi	r3,2047
   20c70:	e0bff317 	ldw	r2,-52(fp)
   20c74:	1885c83a 	sub	r2,r3,r2
   20c78:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   20c7c:	e0bff117 	ldw	r2,-60(fp)
   20c80:	1000011e 	bne	r2,zero,20c88 <altera_avalon_jtag_uart_write+0xcc>
        break;
   20c84:	00001d06 	br	20cfc <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   20c88:	e0fffe17 	ldw	r3,-8(fp)
   20c8c:	e0bff117 	ldw	r2,-60(fp)
   20c90:	1880022e 	bgeu	r3,r2,20c9c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   20c94:	e0bffe17 	ldw	r2,-8(fp)
   20c98:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   20c9c:	e0bff317 	ldw	r2,-52(fp)
   20ca0:	10821104 	addi	r2,r2,2116
   20ca4:	e0fffc17 	ldw	r3,-16(fp)
   20ca8:	1885883a 	add	r2,r3,r2
   20cac:	1009883a 	mov	r4,r2
   20cb0:	e17ffd17 	ldw	r5,-12(fp)
   20cb4:	e1bff117 	ldw	r6,-60(fp)
   20cb8:	0007c900 	call	7c90 <memcpy>
      ptr   += n;
   20cbc:	e0fffd17 	ldw	r3,-12(fp)
   20cc0:	e0bff117 	ldw	r2,-60(fp)
   20cc4:	1885883a 	add	r2,r3,r2
   20cc8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   20ccc:	e0fffe17 	ldw	r3,-8(fp)
   20cd0:	e0bff117 	ldw	r2,-60(fp)
   20cd4:	1885c83a 	sub	r2,r3,r2
   20cd8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20cdc:	e0fff317 	ldw	r3,-52(fp)
   20ce0:	e0bff117 	ldw	r2,-60(fp)
   20ce4:	1885883a 	add	r2,r3,r2
   20ce8:	10c1ffcc 	andi	r3,r2,2047
   20cec:	e0bffc17 	ldw	r2,-16(fp)
   20cf0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20cf4:	e0bffe17 	ldw	r2,-8(fp)
   20cf8:	00bfc616 	blt	zero,r2,20c14 <__alt_mem_descriptor_memory+0xdefe0c14>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20cfc:	0005303a 	rdctl	r2,status
   20d00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d04:	e0fff717 	ldw	r3,-36(fp)
   20d08:	00bfff84 	movi	r2,-2
   20d0c:	1884703a 	and	r2,r3,r2
   20d10:	1001703a 	wrctl	status,r2
  
  return context;
   20d14:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   20d18:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20d1c:	e0bffc17 	ldw	r2,-16(fp)
   20d20:	10800817 	ldw	r2,32(r2)
   20d24:	10c00094 	ori	r3,r2,2
   20d28:	e0bffc17 	ldw	r2,-16(fp)
   20d2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20d30:	e0bffc17 	ldw	r2,-16(fp)
   20d34:	10800017 	ldw	r2,0(r2)
   20d38:	10800104 	addi	r2,r2,4
   20d3c:	1007883a 	mov	r3,r2
   20d40:	e0bffc17 	ldw	r2,-16(fp)
   20d44:	10800817 	ldw	r2,32(r2)
   20d48:	18800035 	stwio	r2,0(r3)
   20d4c:	e0bff417 	ldw	r2,-48(fp)
   20d50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20d54:	e0bff817 	ldw	r2,-32(fp)
   20d58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   20d5c:	e0bffe17 	ldw	r2,-8(fp)
   20d60:	00802e0e 	bge	zero,r2,20e1c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	1090000c 	andi	r2,r2,16384
   20d6c:	10000126 	beq	r2,zero,20d74 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   20d70:	00002c06 	br	20e24 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   20d74:	00800174 	movhi	r2,5
   20d78:	108f8244 	addi	r2,r2,15881
   20d7c:	10800003 	ldbu	r2,0(r2)
   20d80:	10803fcc 	andi	r2,r2,255
   20d84:	10800058 	cmpnei	r2,r2,1
   20d88:	1000161e 	bne	r2,zero,20de4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   20d8c:	e0bffc17 	ldw	r2,-16(fp)
   20d90:	10800c17 	ldw	r2,48(r2)
   20d94:	e0bff915 	stw	r2,-28(fp)
   20d98:	00800184 	movi	r2,6
   20d9c:	e0bffa0d 	sth	r2,-24(fp)
   20da0:	00bfe0c4 	movi	r2,-125
   20da4:	e0bffa85 	stb	r2,-22(fp)
   20da8:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   20dac:	00800174 	movhi	r2,5
   20db0:	108f8244 	addi	r2,r2,15881
   20db4:	10800003 	ldbu	r2,0(r2)
   20db8:	10803fcc 	andi	r2,r2,255
   20dbc:	10001326 	beq	r2,zero,20e0c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   20dc0:	e17ffa0b 	ldhu	r5,-24(fp)
   20dc4:	e1bffa83 	ldbu	r6,-22(fp)
   20dc8:	e0fffb0b 	ldhu	r3,-20(fp)
   20dcc:	e0bffb84 	addi	r2,fp,-18
   20dd0:	d8800015 	stw	r2,0(sp)
   20dd4:	e13ff917 	ldw	r4,-28(fp)
   20dd8:	180f883a 	mov	r7,r3
   20ddc:	001ac9c0 	call	1ac9c <OSFlagPend>
   20de0:	00000a06 	br	20e0c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   20de4:	0001883a 	nop
   20de8:	e0bffc17 	ldw	r2,-16(fp)
   20dec:	10c01017 	ldw	r3,64(r2)
   20df0:	e0bff017 	ldw	r2,-64(fp)
   20df4:	1880051e 	bne	r3,r2,20e0c <altera_avalon_jtag_uart_write+0x250>
   20df8:	e0bffc17 	ldw	r2,-16(fp)
   20dfc:	10c00917 	ldw	r3,36(r2)
   20e00:	e0bffc17 	ldw	r2,-16(fp)
   20e04:	10800117 	ldw	r2,4(r2)
   20e08:	18bff736 	bltu	r3,r2,20de8 <__alt_mem_descriptor_memory+0xdefe0de8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   20e0c:	e0bffc17 	ldw	r2,-16(fp)
   20e10:	10800917 	ldw	r2,36(r2)
   20e14:	10000126 	beq	r2,zero,20e1c <altera_avalon_jtag_uart_write+0x260>
         break;
   20e18:	00000206 	br	20e24 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   20e1c:	e0bffe17 	ldw	r2,-8(fp)
   20e20:	00bf7b16 	blt	zero,r2,20c10 <__alt_mem_descriptor_memory+0xdefe0c10>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   20e24:	e0bffc17 	ldw	r2,-16(fp)
   20e28:	10800b17 	ldw	r2,44(r2)
   20e2c:	1009883a 	mov	r4,r2
   20e30:	001dd180 	call	1dd18 <OSSemPost>

  if (ptr != start)
   20e34:	e0fffd17 	ldw	r3,-12(fp)
   20e38:	e0bff217 	ldw	r2,-56(fp)
   20e3c:	18800426 	beq	r3,r2,20e50 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   20e40:	e0fffd17 	ldw	r3,-12(fp)
   20e44:	e0bff217 	ldw	r2,-56(fp)
   20e48:	1885c83a 	sub	r2,r3,r2
   20e4c:	00000606 	br	20e68 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   20e50:	e0bfff17 	ldw	r2,-4(fp)
   20e54:	1090000c 	andi	r2,r2,16384
   20e58:	10000226 	beq	r2,zero,20e64 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   20e5c:	00bffd44 	movi	r2,-11
   20e60:	00000106 	br	20e68 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   20e64:	00bffec4 	movi	r2,-5
}
   20e68:	e037883a 	mov	sp,fp
   20e6c:	dfc00117 	ldw	ra,4(sp)
   20e70:	df000017 	ldw	fp,0(sp)
   20e74:	dec00204 	addi	sp,sp,8
   20e78:	f800283a 	ret

00020e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20e7c:	defffe04 	addi	sp,sp,-8
   20e80:	dfc00115 	stw	ra,4(sp)
   20e84:	df000015 	stw	fp,0(sp)
   20e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20e8c:	00800174 	movhi	r2,5
   20e90:	10876e04 	addi	r2,r2,7608
   20e94:	10800017 	ldw	r2,0(r2)
   20e98:	10000526 	beq	r2,zero,20eb0 <alt_get_errno+0x34>
   20e9c:	00800174 	movhi	r2,5
   20ea0:	10876e04 	addi	r2,r2,7608
   20ea4:	10800017 	ldw	r2,0(r2)
   20ea8:	103ee83a 	callr	r2
   20eac:	00000206 	br	20eb8 <alt_get_errno+0x3c>
   20eb0:	00800174 	movhi	r2,5
   20eb4:	108f7704 	addi	r2,r2,15836
}
   20eb8:	e037883a 	mov	sp,fp
   20ebc:	dfc00117 	ldw	ra,4(sp)
   20ec0:	df000017 	ldw	fp,0(sp)
   20ec4:	dec00204 	addi	sp,sp,8
   20ec8:	f800283a 	ret

00020ecc <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   20ecc:	defffc04 	addi	sp,sp,-16
   20ed0:	df000315 	stw	fp,12(sp)
   20ed4:	df000304 	addi	fp,sp,12
   20ed8:	e13ffe15 	stw	r4,-8(fp)
   20edc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   20ee0:	e0bffe17 	ldw	r2,-8(fp)
   20ee4:	10800317 	ldw	r2,12(r2)
   20ee8:	10800037 	ldwio	r2,0(r2)
   20eec:	1080040c 	andi	r2,r2,16
   20ef0:	10000226 	beq	r2,zero,20efc <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   20ef4:	00bffc04 	movi	r2,-16
   20ef8:	00003906 	br	20fe0 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   20efc:	e0bffe17 	ldw	r2,-8(fp)
   20f00:	10800317 	ldw	r2,12(r2)
   20f04:	10800404 	addi	r2,r2,16
   20f08:	e0fffe17 	ldw	r3,-8(fp)
   20f0c:	18c00317 	ldw	r3,12(r3)
   20f10:	18c00404 	addi	r3,r3,16
   20f14:	19000037 	ldwio	r4,0(r3)
   20f18:	00fff7c4 	movi	r3,-33
   20f1c:	20c6703a 	and	r3,r4,r3
   20f20:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   20f24:	e0bffe17 	ldw	r2,-8(fp)
   20f28:	10800317 	ldw	r2,12(r2)
   20f2c:	00c03fc4 	movi	r3,255
   20f30:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   20f34:	e0bffe17 	ldw	r2,-8(fp)
   20f38:	10800317 	ldw	r2,12(r2)
   20f3c:	10800804 	addi	r2,r2,32
   20f40:	e0ffff17 	ldw	r3,-4(fp)
   20f44:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   20f48:	e0bffe17 	ldw	r2,-8(fp)
   20f4c:	10800917 	ldw	r2,36(r2)
   20f50:	10001126 	beq	r2,zero,20f98 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   20f54:	e0bffe17 	ldw	r2,-8(fp)
   20f58:	10800317 	ldw	r2,12(r2)
   20f5c:	10800404 	addi	r2,r2,16
   20f60:	10800037 	ldwio	r2,0(r2)
   20f64:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   20f68:	e0bffe17 	ldw	r2,-8(fp)
   20f6c:	10c00b17 	ldw	r3,44(r2)
   20f70:	e0bffd17 	ldw	r2,-12(fp)
   20f74:	1884b03a 	or	r2,r3,r2
   20f78:	10801814 	ori	r2,r2,96
   20f7c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   20f80:	e0bffe17 	ldw	r2,-8(fp)
   20f84:	10800317 	ldw	r2,12(r2)
   20f88:	10800404 	addi	r2,r2,16
   20f8c:	e0fffd17 	ldw	r3,-12(fp)
   20f90:	10c00035 	stwio	r3,0(r2)
   20f94:	00001106 	br	20fdc <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   20f98:	e0bffe17 	ldw	r2,-8(fp)
   20f9c:	10800317 	ldw	r2,12(r2)
   20fa0:	10800404 	addi	r2,r2,16
   20fa4:	10800037 	ldwio	r2,0(r2)
   20fa8:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   20fac:	e0bffd17 	ldw	r2,-12(fp)
   20fb0:	10801814 	ori	r2,r2,96
   20fb4:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   20fb8:	e0fffd17 	ldw	r3,-12(fp)
   20fbc:	00bffbc4 	movi	r2,-17
   20fc0:	1884703a 	and	r2,r3,r2
   20fc4:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   20fc8:	e0bffe17 	ldw	r2,-8(fp)
   20fcc:	10800317 	ldw	r2,12(r2)
   20fd0:	10800404 	addi	r2,r2,16
   20fd4:	e0fffd17 	ldw	r3,-12(fp)
   20fd8:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   20fdc:	0005883a 	mov	r2,zero
}
   20fe0:	e037883a 	mov	sp,fp
   20fe4:	df000017 	ldw	fp,0(sp)
   20fe8:	dec00104 	addi	sp,sp,4
   20fec:	f800283a 	ret

00020ff0 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   20ff0:	defffc04 	addi	sp,sp,-16
   20ff4:	df000315 	stw	fp,12(sp)
   20ff8:	df000304 	addi	fp,sp,12
   20ffc:	e13ffe15 	stw	r4,-8(fp)
   21000:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   21004:	0001883a 	nop
   21008:	e0bffe17 	ldw	r2,-8(fp)
   2100c:	10800317 	ldw	r2,12(r2)
   21010:	10800037 	ldwio	r2,0(r2)
   21014:	1080040c 	andi	r2,r2,16
   21018:	103ffb1e 	bne	r2,zero,21008 <__alt_mem_descriptor_memory+0xdefe1008>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   2101c:	e0bffe17 	ldw	r2,-8(fp)
   21020:	10800317 	ldw	r2,12(r2)
   21024:	10800404 	addi	r2,r2,16
   21028:	e0fffe17 	ldw	r3,-8(fp)
   2102c:	18c00317 	ldw	r3,12(r3)
   21030:	18c00404 	addi	r3,r3,16
   21034:	19000037 	ldwio	r4,0(r3)
   21038:	00fff7c4 	movi	r3,-33
   2103c:	20c6703a 	and	r3,r4,r3
   21040:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   21044:	e0bffe17 	ldw	r2,-8(fp)
   21048:	10800317 	ldw	r2,12(r2)
   2104c:	00c03fc4 	movi	r3,255
   21050:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   21054:	e0bffe17 	ldw	r2,-8(fp)
   21058:	10800317 	ldw	r2,12(r2)
   2105c:	10800804 	addi	r2,r2,32
   21060:	e0ffff17 	ldw	r3,-4(fp)
   21064:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   21068:	e0bffe17 	ldw	r2,-8(fp)
   2106c:	10800317 	ldw	r2,12(r2)
   21070:	10800404 	addi	r2,r2,16
   21074:	e0fffe17 	ldw	r3,-8(fp)
   21078:	18c00317 	ldw	r3,12(r3)
   2107c:	18c00404 	addi	r3,r3,16
   21080:	18c00037 	ldwio	r3,0(r3)
   21084:	18c01814 	ori	r3,r3,96
   21088:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   2108c:	0001883a 	nop
   21090:	e0bffe17 	ldw	r2,-8(fp)
   21094:	10800317 	ldw	r2,12(r2)
   21098:	10800037 	ldwio	r2,0(r2)
   2109c:	1080040c 	andi	r2,r2,16
   210a0:	103ffb1e 	bne	r2,zero,21090 <__alt_mem_descriptor_memory+0xdefe1090>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   210a4:	e0bffe17 	ldw	r2,-8(fp)
   210a8:	10800317 	ldw	r2,12(r2)
   210ac:	10800404 	addi	r2,r2,16
   210b0:	e0fffe17 	ldw	r3,-8(fp)
   210b4:	18c00317 	ldw	r3,12(r3)
   210b8:	18c00404 	addi	r3,r3,16
   210bc:	19000037 	ldwio	r4,0(r3)
   210c0:	00fff7c4 	movi	r3,-33
   210c4:	20c6703a 	and	r3,r4,r3
   210c8:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   210cc:	e0bffe17 	ldw	r2,-8(fp)
   210d0:	10800317 	ldw	r2,12(r2)
   210d4:	10800037 	ldwio	r2,0(r2)
   210d8:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   210dc:	e0bffe17 	ldw	r2,-8(fp)
   210e0:	10800317 	ldw	r2,12(r2)
   210e4:	00c03fc4 	movi	r3,255
   210e8:	10c00035 	stwio	r3,0(r2)

  return status;
   210ec:	e0bffd03 	ldbu	r2,-12(fp)
}
   210f0:	e037883a 	mov	sp,fp
   210f4:	df000017 	ldw	fp,0(sp)
   210f8:	dec00104 	addi	sp,sp,4
   210fc:	f800283a 	ret

00021100 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   21100:	defff404 	addi	sp,sp,-48
   21104:	dfc00b15 	stw	ra,44(sp)
   21108:	df000a15 	stw	fp,40(sp)
   2110c:	df000a04 	addi	fp,sp,40
   21110:	e13ffb15 	stw	r4,-20(fp)
   21114:	e17ffc15 	stw	r5,-16(fp)
   21118:	e1bffd15 	stw	r6,-12(fp)
   2111c:	e1fffe15 	stw	r7,-8(fp)
   21120:	e0800217 	ldw	r2,8(fp)
   21124:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   21128:	e0bfff0b 	ldhu	r2,-4(fp)
   2112c:	d8800015 	stw	r2,0(sp)
   21130:	e0800317 	ldw	r2,12(fp)
   21134:	d8800115 	stw	r2,4(sp)
   21138:	e0800417 	ldw	r2,16(fp)
   2113c:	d8800215 	stw	r2,8(sp)
   21140:	d8000315 	stw	zero,12(sp)
   21144:	d8000415 	stw	zero,16(sp)
   21148:	e13ffb17 	ldw	r4,-20(fp)
   2114c:	e17ffc17 	ldw	r5,-16(fp)
   21150:	e1bffd17 	ldw	r6,-12(fp)
   21154:	e1fffe17 	ldw	r7,-8(fp)
   21158:	00211700 	call	21170 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   2115c:	e037883a 	mov	sp,fp
   21160:	dfc00117 	ldw	ra,4(sp)
   21164:	df000017 	ldw	fp,0(sp)
   21168:	dec00204 	addi	sp,sp,8
   2116c:	f800283a 	ret

00021170 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   21170:	defff204 	addi	sp,sp,-56
   21174:	dfc00d15 	stw	ra,52(sp)
   21178:	df000c15 	stw	fp,48(sp)
   2117c:	df000c04 	addi	fp,sp,48
   21180:	e13ffb15 	stw	r4,-20(fp)
   21184:	e17ffc15 	stw	r5,-16(fp)
   21188:	e1bffd15 	stw	r6,-12(fp)
   2118c:	e1fffe15 	stw	r7,-8(fp)
   21190:	e0800217 	ldw	r2,8(fp)
   21194:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   21198:	e0bfff0b 	ldhu	r2,-4(fp)
   2119c:	d8800015 	stw	r2,0(sp)
   211a0:	d8000115 	stw	zero,4(sp)
   211a4:	e0800317 	ldw	r2,12(fp)
   211a8:	d8800215 	stw	r2,8(sp)
   211ac:	e0800417 	ldw	r2,16(fp)
   211b0:	d8800315 	stw	r2,12(sp)
   211b4:	e0800517 	ldw	r2,20(fp)
   211b8:	d8800415 	stw	r2,16(sp)
   211bc:	e0800617 	ldw	r2,24(fp)
   211c0:	d8800515 	stw	r2,20(sp)
   211c4:	d8000615 	stw	zero,24(sp)
   211c8:	e13ffb17 	ldw	r4,-20(fp)
   211cc:	e17ffc17 	ldw	r5,-16(fp)
   211d0:	e1bffd17 	ldw	r6,-12(fp)
   211d4:	e1fffe17 	ldw	r7,-8(fp)
   211d8:	00216dc0 	call	216dc <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   211dc:	e037883a 	mov	sp,fp
   211e0:	dfc00117 	ldw	ra,4(sp)
   211e4:	df000017 	ldw	fp,0(sp)
   211e8:	dec00204 	addi	sp,sp,8
   211ec:	f800283a 	ret

000211f0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   211f0:	defff804 	addi	sp,sp,-32
   211f4:	dfc00715 	stw	ra,28(sp)
   211f8:	df000615 	stw	fp,24(sp)
   211fc:	df000604 	addi	fp,sp,24
   21200:	e13ffc15 	stw	r4,-16(fp)
   21204:	e17ffd15 	stw	r5,-12(fp)
   21208:	e1bffe15 	stw	r6,-8(fp)
   2120c:	3805883a 	mov	r2,r7
   21210:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   21214:	e0ffff0b 	ldhu	r3,-4(fp)
   21218:	e0800217 	ldw	r2,8(fp)
   2121c:	d8800015 	stw	r2,0(sp)
   21220:	d8000115 	stw	zero,4(sp)
   21224:	e13ffc17 	ldw	r4,-16(fp)
   21228:	e17ffd17 	ldw	r5,-12(fp)
   2122c:	e1bffe17 	ldw	r6,-8(fp)
   21230:	180f883a 	mov	r7,r3
   21234:	002124c0 	call	2124c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   21238:	e037883a 	mov	sp,fp
   2123c:	dfc00117 	ldw	ra,4(sp)
   21240:	df000017 	ldw	fp,0(sp)
   21244:	dec00204 	addi	sp,sp,8
   21248:	f800283a 	ret

0002124c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   2124c:	defff304 	addi	sp,sp,-52
   21250:	dfc00c15 	stw	ra,48(sp)
   21254:	df000b15 	stw	fp,44(sp)
   21258:	df000b04 	addi	fp,sp,44
   2125c:	e13ffc15 	stw	r4,-16(fp)
   21260:	e17ffd15 	stw	r5,-12(fp)
   21264:	e1bffe15 	stw	r6,-8(fp)
   21268:	3805883a 	mov	r2,r7
   2126c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   21270:	e0bfff0b 	ldhu	r2,-4(fp)
   21274:	d8800015 	stw	r2,0(sp)
   21278:	d8000115 	stw	zero,4(sp)
   2127c:	d8000215 	stw	zero,8(sp)
   21280:	e0800217 	ldw	r2,8(fp)
   21284:	d8800315 	stw	r2,12(sp)
   21288:	d8000415 	stw	zero,16(sp)
   2128c:	e0800317 	ldw	r2,12(fp)
   21290:	d8800515 	stw	r2,20(sp)
   21294:	d8000615 	stw	zero,24(sp)
   21298:	e13ffc17 	ldw	r4,-16(fp)
   2129c:	e17ffd17 	ldw	r5,-12(fp)
   212a0:	000d883a 	mov	r6,zero
   212a4:	e1fffe17 	ldw	r7,-8(fp)
   212a8:	00216dc0 	call	216dc <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   212ac:	e037883a 	mov	sp,fp
   212b0:	dfc00117 	ldw	ra,4(sp)
   212b4:	df000017 	ldw	fp,0(sp)
   212b8:	dec00204 	addi	sp,sp,8
   212bc:	f800283a 	ret

000212c0 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   212c0:	defff404 	addi	sp,sp,-48
   212c4:	dfc00b15 	stw	ra,44(sp)
   212c8:	df000a15 	stw	fp,40(sp)
   212cc:	df000a04 	addi	fp,sp,40
   212d0:	e13ffb15 	stw	r4,-20(fp)
   212d4:	e17ffc15 	stw	r5,-16(fp)
   212d8:	e1bffd15 	stw	r6,-12(fp)
   212dc:	3807883a 	mov	r3,r7
   212e0:	e0800517 	ldw	r2,20(fp)
   212e4:	e0fffe0d 	sth	r3,-8(fp)
   212e8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   212ec:	e1fffe0b 	ldhu	r7,-8(fp)
   212f0:	e0bfff03 	ldbu	r2,-4(fp)
   212f4:	e0c00217 	ldw	r3,8(fp)
   212f8:	d8c00015 	stw	r3,0(sp)
   212fc:	e0c00317 	ldw	r3,12(fp)
   21300:	d8c00115 	stw	r3,4(sp)
   21304:	e0c00417 	ldw	r3,16(fp)
   21308:	d8c00215 	stw	r3,8(sp)
   2130c:	d8000315 	stw	zero,12(sp)
   21310:	d8800415 	stw	r2,16(sp)
   21314:	e13ffb17 	ldw	r4,-20(fp)
   21318:	e17ffc17 	ldw	r5,-16(fp)
   2131c:	e1bffd17 	ldw	r6,-12(fp)
   21320:	00213380 	call	21338 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   21324:	e037883a 	mov	sp,fp
   21328:	dfc00117 	ldw	ra,4(sp)
   2132c:	df000017 	ldw	fp,0(sp)
   21330:	dec00204 	addi	sp,sp,8
   21334:	f800283a 	ret

00021338 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   21338:	defff204 	addi	sp,sp,-56
   2133c:	dfc00d15 	stw	ra,52(sp)
   21340:	df000c15 	stw	fp,48(sp)
   21344:	df000c04 	addi	fp,sp,48
   21348:	e13ffb15 	stw	r4,-20(fp)
   2134c:	e17ffc15 	stw	r5,-16(fp)
   21350:	e1bffd15 	stw	r6,-12(fp)
   21354:	3807883a 	mov	r3,r7
   21358:	e0800617 	ldw	r2,24(fp)
   2135c:	e0fffe0d 	sth	r3,-8(fp)
   21360:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   21364:	e0fffe0b 	ldhu	r3,-8(fp)
   21368:	e0bfff03 	ldbu	r2,-4(fp)
   2136c:	d8c00015 	stw	r3,0(sp)
   21370:	e0c00417 	ldw	r3,16(fp)
   21374:	d8c00115 	stw	r3,4(sp)
   21378:	e0c00217 	ldw	r3,8(fp)
   2137c:	d8c00215 	stw	r3,8(sp)
   21380:	e0c00317 	ldw	r3,12(fp)
   21384:	d8c00315 	stw	r3,12(sp)
   21388:	e0c00517 	ldw	r3,20(fp)
   2138c:	d8c00415 	stw	r3,16(sp)
   21390:	d8000515 	stw	zero,20(sp)
   21394:	d8800615 	stw	r2,24(sp)
   21398:	e13ffb17 	ldw	r4,-20(fp)
   2139c:	e17ffc17 	ldw	r5,-16(fp)
   213a0:	e1bffd17 	ldw	r6,-12(fp)
   213a4:	000f883a 	mov	r7,zero
   213a8:	00216dc0 	call	216dc <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   213ac:	e037883a 	mov	sp,fp
   213b0:	dfc00117 	ldw	ra,4(sp)
   213b4:	df000017 	ldw	fp,0(sp)
   213b8:	dec00204 	addi	sp,sp,8
   213bc:	f800283a 	ret

000213c0 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   213c0:	defffb04 	addi	sp,sp,-20
   213c4:	df000415 	stw	fp,16(sp)
   213c8:	df000404 	addi	fp,sp,16
   213cc:	e13ffc15 	stw	r4,-16(fp)
   213d0:	e17ffd15 	stw	r5,-12(fp)
   213d4:	e1bffe15 	stw	r6,-8(fp)
   213d8:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   213dc:	e0bffc17 	ldw	r2,-16(fp)
   213e0:	e0fffd17 	ldw	r3,-12(fp)
   213e4:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   213e8:	e0bffc17 	ldw	r2,-16(fp)
   213ec:	e0ffff17 	ldw	r3,-4(fp)
   213f0:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   213f4:	e0bffc17 	ldw	r2,-16(fp)
   213f8:	e0fffe17 	ldw	r3,-8(fp)
   213fc:	10c00b15 	stw	r3,44(r2)
}
   21400:	e037883a 	mov	sp,fp
   21404:	df000017 	ldw	fp,0(sp)
   21408:	dec00104 	addi	sp,sp,4
   2140c:	f800283a 	ret

00021410 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   21410:	defffd04 	addi	sp,sp,-12
   21414:	df000215 	stw	fp,8(sp)
   21418:	df000204 	addi	fp,sp,8
   2141c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   21420:	e0bfff17 	ldw	r2,-4(fp)
   21424:	10800317 	ldw	r2,12(r2)
   21428:	10800404 	addi	r2,r2,16
   2142c:	10800037 	ldwio	r2,0(r2)
   21430:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   21434:	e0bffe17 	ldw	r2,-8(fp)
   21438:	10800814 	ori	r2,r2,32
   2143c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   21440:	e0bfff17 	ldw	r2,-4(fp)
   21444:	10800317 	ldw	r2,12(r2)
   21448:	10800404 	addi	r2,r2,16
   2144c:	e0fffe17 	ldw	r3,-8(fp)
   21450:	10c00035 	stwio	r3,0(r2)
}
   21454:	e037883a 	mov	sp,fp
   21458:	df000017 	ldw	fp,0(sp)
   2145c:	dec00104 	addi	sp,sp,4
   21460:	f800283a 	ret

00021464 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   21464:	defffd04 	addi	sp,sp,-12
   21468:	df000215 	stw	fp,8(sp)
   2146c:	df000204 	addi	fp,sp,8
   21470:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   21474:	e0bfff17 	ldw	r2,-4(fp)
   21478:	10800317 	ldw	r2,12(r2)
   2147c:	10800404 	addi	r2,r2,16
   21480:	10800037 	ldwio	r2,0(r2)
   21484:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   21488:	e0fffe17 	ldw	r3,-8(fp)
   2148c:	00bff7c4 	movi	r2,-33
   21490:	1884703a 	and	r2,r3,r2
   21494:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   21498:	e0bfff17 	ldw	r2,-4(fp)
   2149c:	10800317 	ldw	r2,12(r2)
   214a0:	10800404 	addi	r2,r2,16
   214a4:	e0fffe17 	ldw	r3,-8(fp)
   214a8:	10c00035 	stwio	r3,0(r2)
}
   214ac:	e037883a 	mov	sp,fp
   214b0:	df000017 	ldw	fp,0(sp)
   214b4:	dec00104 	addi	sp,sp,4
   214b8:	f800283a 	ret

000214bc <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   214bc:	defffe04 	addi	sp,sp,-8
   214c0:	df000115 	stw	fp,4(sp)
   214c4:	df000104 	addi	fp,sp,4
   214c8:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   214cc:	e0bfff17 	ldw	r2,-4(fp)
   214d0:	10800784 	addi	r2,r2,30
   214d4:	10800023 	ldbuio	r2,0(r2)
   214d8:	10803fcc 	andi	r2,r2,255
   214dc:	10801fcc 	andi	r2,r2,127
   214e0:	10000226 	beq	r2,zero,214ec <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   214e4:	00bffec4 	movi	r2,-5
   214e8:	00000906 	br	21510 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   214ec:	e0bfff17 	ldw	r2,-4(fp)
   214f0:	108007c4 	addi	r2,r2,31
   214f4:	10800023 	ldbuio	r2,0(r2)
   214f8:	10803fcc 	andi	r2,r2,255
   214fc:	1080200c 	andi	r2,r2,128
   21500:	10000226 	beq	r2,zero,2150c <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   21504:	00bfe244 	movi	r2,-119
   21508:	00000106 	br	21510 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   2150c:	0005883a 	mov	r2,zero
}
   21510:	e037883a 	mov	sp,fp
   21514:	df000017 	ldw	fp,0(sp)
   21518:	dec00104 	addi	sp,sp,4
   2151c:	f800283a 	ret

00021520 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   21520:	defffc04 	addi	sp,sp,-16
   21524:	dfc00315 	stw	ra,12(sp)
   21528:	df000215 	stw	fp,8(sp)
   2152c:	df000204 	addi	fp,sp,8
   21530:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   21534:	e13fff17 	ldw	r4,-4(fp)
   21538:	d1602904 	addi	r5,gp,-32604
   2153c:	0039c380 	call	39c38 <alt_find_dev>
   21540:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   21544:	e0bffe17 	ldw	r2,-8(fp)
   21548:	1000041e 	bne	r2,zero,2155c <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   2154c:	0020e7c0 	call	20e7c <alt_get_errno>
   21550:	1007883a 	mov	r3,r2
   21554:	008004c4 	movi	r2,19
   21558:	18800015 	stw	r2,0(r3)
  }

  return dev;
   2155c:	e0bffe17 	ldw	r2,-8(fp)
}
   21560:	e037883a 	mov	sp,fp
   21564:	dfc00117 	ldw	ra,4(sp)
   21568:	df000017 	ldw	fp,0(sp)
   2156c:	dec00204 	addi	sp,sp,8
   21570:	f800283a 	ret

00021574 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   21574:	defff104 	addi	sp,sp,-60
   21578:	dfc00e15 	stw	ra,56(sp)
   2157c:	df000d15 	stw	fp,52(sp)
   21580:	df000d04 	addi	fp,sp,52
   21584:	e13ffa15 	stw	r4,-24(fp)
   21588:	e17ffb15 	stw	r5,-20(fp)
   2158c:	e1bffc15 	stw	r6,-16(fp)
   21590:	e1fffd15 	stw	r7,-12(fp)
   21594:	e0c00217 	ldw	r3,8(fp)
   21598:	e0800617 	ldw	r2,24(fp)
   2159c:	e0fffe0d 	sth	r3,-8(fp)
   215a0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   215a4:	e0fffe0b 	ldhu	r3,-8(fp)
   215a8:	e0bfff03 	ldbu	r2,-4(fp)
   215ac:	d8c00015 	stw	r3,0(sp)
   215b0:	e0c00317 	ldw	r3,12(fp)
   215b4:	d8c00115 	stw	r3,4(sp)
   215b8:	e0c00417 	ldw	r3,16(fp)
   215bc:	d8c00215 	stw	r3,8(sp)
   215c0:	e0c00517 	ldw	r3,20(fp)
   215c4:	d8c00315 	stw	r3,12(sp)
   215c8:	d8000415 	stw	zero,16(sp)
   215cc:	d8000515 	stw	zero,20(sp)
   215d0:	d8800615 	stw	r2,24(sp)
   215d4:	e13ffa17 	ldw	r4,-24(fp)
   215d8:	e17ffb17 	ldw	r5,-20(fp)
   215dc:	e1bffc17 	ldw	r6,-16(fp)
   215e0:	e1fffd17 	ldw	r7,-12(fp)
   215e4:	00216dc0 	call	216dc <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   215e8:	e037883a 	mov	sp,fp
   215ec:	dfc00117 	ldw	ra,4(sp)
   215f0:	df000017 	ldw	fp,0(sp)
   215f4:	dec00204 	addi	sp,sp,8
   215f8:	f800283a 	ret

000215fc <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   215fc:	defffc04 	addi	sp,sp,-16
   21600:	df000315 	stw	fp,12(sp)
   21604:	df000304 	addi	fp,sp,12
   21608:	e13ffe15 	stw	r4,-8(fp)
   2160c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   21610:	e0bffe17 	ldw	r2,-8(fp)
   21614:	10800317 	ldw	r2,12(r2)
   21618:	10800404 	addi	r2,r2,16
   2161c:	10800037 	ldwio	r2,0(r2)
   21620:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   21624:	e0fffd17 	ldw	r3,-12(fp)
   21628:	00a00434 	movhi	r2,32784
   2162c:	10bfffc4 	addi	r2,r2,-1
   21630:	1884703a 	and	r2,r3,r2
   21634:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   21638:	e0bfff17 	ldw	r2,-4(fp)
   2163c:	1004953a 	slli	r2,r2,20
   21640:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   21644:	e0bffd17 	ldw	r2,-12(fp)
   21648:	1884b03a 	or	r2,r3,r2
   2164c:	10800134 	orhi	r2,r2,4
   21650:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   21654:	e0bffe17 	ldw	r2,-8(fp)
   21658:	10800317 	ldw	r2,12(r2)
   2165c:	10800404 	addi	r2,r2,16
   21660:	e0fffd17 	ldw	r3,-12(fp)
   21664:	10c00035 	stwio	r3,0(r2)
  
  return;
   21668:	0001883a 	nop
}
   2166c:	e037883a 	mov	sp,fp
   21670:	df000017 	ldw	fp,0(sp)
   21674:	dec00104 	addi	sp,sp,4
   21678:	f800283a 	ret

0002167c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   2167c:	defffd04 	addi	sp,sp,-12
   21680:	df000215 	stw	fp,8(sp)
   21684:	df000204 	addi	fp,sp,8
   21688:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   2168c:	e0bfff17 	ldw	r2,-4(fp)
   21690:	10800317 	ldw	r2,12(r2)
   21694:	10800404 	addi	r2,r2,16
   21698:	10800037 	ldwio	r2,0(r2)
   2169c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   216a0:	e0fffe17 	ldw	r3,-8(fp)
   216a4:	00bfff34 	movhi	r2,65532
   216a8:	10bfffc4 	addi	r2,r2,-1
   216ac:	1884703a 	and	r2,r3,r2
   216b0:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   216b4:	e0bfff17 	ldw	r2,-4(fp)
   216b8:	10800317 	ldw	r2,12(r2)
   216bc:	10800404 	addi	r2,r2,16
   216c0:	e0fffe17 	ldw	r3,-8(fp)
   216c4:	10c00035 	stwio	r3,0(r2)
  
  return;
   216c8:	0001883a 	nop
}
   216cc:	e037883a 	mov	sp,fp
   216d0:	df000017 	ldw	fp,0(sp)
   216d4:	dec00104 	addi	sp,sp,4
   216d8:	f800283a 	ret

000216dc <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   216dc:	defff804 	addi	sp,sp,-32
   216e0:	dfc00715 	stw	ra,28(sp)
   216e4:	df000615 	stw	fp,24(sp)
   216e8:	df000604 	addi	fp,sp,24
   216ec:	e13ffa15 	stw	r4,-24(fp)
   216f0:	e17ffb15 	stw	r5,-20(fp)
   216f4:	e1bffc15 	stw	r6,-16(fp)
   216f8:	e1fffd15 	stw	r7,-12(fp)
   216fc:	e0c00217 	ldw	r3,8(fp)
   21700:	e0800817 	ldw	r2,32(fp)
   21704:	e0fffe0d 	sth	r3,-8(fp)
   21708:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   2170c:	e0bffb17 	ldw	r2,-20(fp)
   21710:	108007c4 	addi	r2,r2,31
   21714:	e0fffb17 	ldw	r3,-20(fp)
   21718:	18c007c3 	ldbu	r3,31(r3)
   2171c:	19003fcc 	andi	r4,r3,255
   21720:	00ffdfc4 	movi	r3,-129
   21724:	20c6703a 	and	r3,r4,r3
   21728:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   2172c:	e0bffa17 	ldw	r2,-24(fp)
   21730:	e0fffc17 	ldw	r3,-16(fp)
   21734:	19403fcc 	andi	r5,r3,255
   21738:	10c00003 	ldbu	r3,0(r2)
   2173c:	1806703a 	and	r3,r3,zero
   21740:	1809883a 	mov	r4,r3
   21744:	2807883a 	mov	r3,r5
   21748:	20c6b03a 	or	r3,r4,r3
   2174c:	10c00005 	stb	r3,0(r2)
   21750:	e0fffc17 	ldw	r3,-16(fp)
   21754:	1806d23a 	srli	r3,r3,8
   21758:	19403fcc 	andi	r5,r3,255
   2175c:	10c00043 	ldbu	r3,1(r2)
   21760:	1806703a 	and	r3,r3,zero
   21764:	1809883a 	mov	r4,r3
   21768:	2807883a 	mov	r3,r5
   2176c:	20c6b03a 	or	r3,r4,r3
   21770:	10c00045 	stb	r3,1(r2)
   21774:	e0fffc17 	ldw	r3,-16(fp)
   21778:	1806d43a 	srli	r3,r3,16
   2177c:	19403fcc 	andi	r5,r3,255
   21780:	10c00083 	ldbu	r3,2(r2)
   21784:	1806703a 	and	r3,r3,zero
   21788:	1809883a 	mov	r4,r3
   2178c:	2807883a 	mov	r3,r5
   21790:	20c6b03a 	or	r3,r4,r3
   21794:	10c00085 	stb	r3,2(r2)
   21798:	e0fffc17 	ldw	r3,-16(fp)
   2179c:	180ad63a 	srli	r5,r3,24
   217a0:	10c000c3 	ldbu	r3,3(r2)
   217a4:	1806703a 	and	r3,r3,zero
   217a8:	1809883a 	mov	r4,r3
   217ac:	2807883a 	mov	r3,r5
   217b0:	20c6b03a 	or	r3,r4,r3
   217b4:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   217b8:	e0bffa17 	ldw	r2,-24(fp)
   217bc:	e0fffd17 	ldw	r3,-12(fp)
   217c0:	19403fcc 	andi	r5,r3,255
   217c4:	10c00203 	ldbu	r3,8(r2)
   217c8:	1806703a 	and	r3,r3,zero
   217cc:	1809883a 	mov	r4,r3
   217d0:	2807883a 	mov	r3,r5
   217d4:	20c6b03a 	or	r3,r4,r3
   217d8:	10c00205 	stb	r3,8(r2)
   217dc:	e0fffd17 	ldw	r3,-12(fp)
   217e0:	1806d23a 	srli	r3,r3,8
   217e4:	19403fcc 	andi	r5,r3,255
   217e8:	10c00243 	ldbu	r3,9(r2)
   217ec:	1806703a 	and	r3,r3,zero
   217f0:	1809883a 	mov	r4,r3
   217f4:	2807883a 	mov	r3,r5
   217f8:	20c6b03a 	or	r3,r4,r3
   217fc:	10c00245 	stb	r3,9(r2)
   21800:	e0fffd17 	ldw	r3,-12(fp)
   21804:	1806d43a 	srli	r3,r3,16
   21808:	19403fcc 	andi	r5,r3,255
   2180c:	10c00283 	ldbu	r3,10(r2)
   21810:	1806703a 	and	r3,r3,zero
   21814:	1809883a 	mov	r4,r3
   21818:	2807883a 	mov	r3,r5
   2181c:	20c6b03a 	or	r3,r4,r3
   21820:	10c00285 	stb	r3,10(r2)
   21824:	e0fffd17 	ldw	r3,-12(fp)
   21828:	180ad63a 	srli	r5,r3,24
   2182c:	10c002c3 	ldbu	r3,11(r2)
   21830:	1806703a 	and	r3,r3,zero
   21834:	1809883a 	mov	r4,r3
   21838:	2807883a 	mov	r3,r5
   2183c:	20c6b03a 	or	r3,r4,r3
   21840:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   21844:	e0bffa17 	ldw	r2,-24(fp)
   21848:	e0fffb17 	ldw	r3,-20(fp)
   2184c:	19403fcc 	andi	r5,r3,255
   21850:	10c00403 	ldbu	r3,16(r2)
   21854:	1806703a 	and	r3,r3,zero
   21858:	1809883a 	mov	r4,r3
   2185c:	2807883a 	mov	r3,r5
   21860:	20c6b03a 	or	r3,r4,r3
   21864:	10c00405 	stb	r3,16(r2)
   21868:	e0fffb17 	ldw	r3,-20(fp)
   2186c:	1806d23a 	srli	r3,r3,8
   21870:	19403fcc 	andi	r5,r3,255
   21874:	10c00443 	ldbu	r3,17(r2)
   21878:	1806703a 	and	r3,r3,zero
   2187c:	1809883a 	mov	r4,r3
   21880:	2807883a 	mov	r3,r5
   21884:	20c6b03a 	or	r3,r4,r3
   21888:	10c00445 	stb	r3,17(r2)
   2188c:	e0fffb17 	ldw	r3,-20(fp)
   21890:	1806d43a 	srli	r3,r3,16
   21894:	19403fcc 	andi	r5,r3,255
   21898:	10c00483 	ldbu	r3,18(r2)
   2189c:	1806703a 	and	r3,r3,zero
   218a0:	1809883a 	mov	r4,r3
   218a4:	2807883a 	mov	r3,r5
   218a8:	20c6b03a 	or	r3,r4,r3
   218ac:	10c00485 	stb	r3,18(r2)
   218b0:	e0fffb17 	ldw	r3,-20(fp)
   218b4:	180ad63a 	srli	r5,r3,24
   218b8:	10c004c3 	ldbu	r3,19(r2)
   218bc:	1806703a 	and	r3,r3,zero
   218c0:	1809883a 	mov	r4,r3
   218c4:	2807883a 	mov	r3,r5
   218c8:	20c6b03a 	or	r3,r4,r3
   218cc:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   218d0:	e0bffa17 	ldw	r2,-24(fp)
   218d4:	10c00103 	ldbu	r3,4(r2)
   218d8:	1806703a 	and	r3,r3,zero
   218dc:	10c00105 	stb	r3,4(r2)
   218e0:	10c00143 	ldbu	r3,5(r2)
   218e4:	1806703a 	and	r3,r3,zero
   218e8:	10c00145 	stb	r3,5(r2)
   218ec:	10c00183 	ldbu	r3,6(r2)
   218f0:	1806703a 	and	r3,r3,zero
   218f4:	10c00185 	stb	r3,6(r2)
   218f8:	10c001c3 	ldbu	r3,7(r2)
   218fc:	1806703a 	and	r3,r3,zero
   21900:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   21904:	e0bffa17 	ldw	r2,-24(fp)
   21908:	10c00303 	ldbu	r3,12(r2)
   2190c:	1806703a 	and	r3,r3,zero
   21910:	10c00305 	stb	r3,12(r2)
   21914:	10c00343 	ldbu	r3,13(r2)
   21918:	1806703a 	and	r3,r3,zero
   2191c:	10c00345 	stb	r3,13(r2)
   21920:	10c00383 	ldbu	r3,14(r2)
   21924:	1806703a 	and	r3,r3,zero
   21928:	10c00385 	stb	r3,14(r2)
   2192c:	10c003c3 	ldbu	r3,15(r2)
   21930:	1806703a 	and	r3,r3,zero
   21934:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   21938:	e0bffa17 	ldw	r2,-24(fp)
   2193c:	10c00503 	ldbu	r3,20(r2)
   21940:	1806703a 	and	r3,r3,zero
   21944:	10c00505 	stb	r3,20(r2)
   21948:	10c00543 	ldbu	r3,21(r2)
   2194c:	1806703a 	and	r3,r3,zero
   21950:	10c00545 	stb	r3,21(r2)
   21954:	10c00583 	ldbu	r3,22(r2)
   21958:	1806703a 	and	r3,r3,zero
   2195c:	10c00585 	stb	r3,22(r2)
   21960:	10c005c3 	ldbu	r3,23(r2)
   21964:	1806703a 	and	r3,r3,zero
   21968:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   2196c:	e0bffa17 	ldw	r2,-24(fp)
   21970:	e0fffe17 	ldw	r3,-8(fp)
   21974:	19403fcc 	andi	r5,r3,255
   21978:	10c00603 	ldbu	r3,24(r2)
   2197c:	1806703a 	and	r3,r3,zero
   21980:	1809883a 	mov	r4,r3
   21984:	2807883a 	mov	r3,r5
   21988:	20c6b03a 	or	r3,r4,r3
   2198c:	10c00605 	stb	r3,24(r2)
   21990:	e0fffe17 	ldw	r3,-8(fp)
   21994:	1806d23a 	srli	r3,r3,8
   21998:	19403fcc 	andi	r5,r3,255
   2199c:	10c00643 	ldbu	r3,25(r2)
   219a0:	1806703a 	and	r3,r3,zero
   219a4:	1809883a 	mov	r4,r3
   219a8:	2807883a 	mov	r3,r5
   219ac:	20c6b03a 	or	r3,r4,r3
   219b0:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   219b4:	e0bffa17 	ldw	r2,-24(fp)
   219b8:	10c00703 	ldbu	r3,28(r2)
   219bc:	1806703a 	and	r3,r3,zero
   219c0:	10c00705 	stb	r3,28(r2)
   219c4:	10c00743 	ldbu	r3,29(r2)
   219c8:	1806703a 	and	r3,r3,zero
   219cc:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   219d0:	e0bffa17 	ldw	r2,-24(fp)
   219d4:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   219d8:	e0800617 	ldw	r2,24(fp)
   219dc:	1007883a 	mov	r3,r2
   219e0:	e0bffa17 	ldw	r2,-24(fp)
   219e4:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   219e8:	e0800717 	ldw	r2,28(fp)
   219ec:	1007883a 	mov	r3,r2
   219f0:	e0bffa17 	ldw	r2,-24(fp)
   219f4:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   219f8:	e0800317 	ldw	r2,12(fp)
   219fc:	10000226 	beq	r2,zero,21a08 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   21a00:	00bfe044 	movi	r2,-127
   21a04:	00000106 	br	21a0c <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   21a08:	00bfe004 	movi	r2,-128
   21a0c:	e0c00417 	ldw	r3,16(fp)
   21a10:	18000226 	beq	r3,zero,21a1c <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   21a14:	00c00084 	movi	r3,2
   21a18:	00000106 	br	21a20 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   21a1c:	0007883a 	mov	r3,zero
   21a20:	10c4b03a 	or	r2,r2,r3
   21a24:	1007883a 	mov	r3,r2
   21a28:	e0800517 	ldw	r2,20(fp)
   21a2c:	10000226 	beq	r2,zero,21a38 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   21a30:	00800104 	movi	r2,4
   21a34:	00000106 	br	21a3c <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   21a38:	0005883a 	mov	r2,zero
   21a3c:	1884b03a 	or	r2,r3,r2
   21a40:	1007883a 	mov	r3,r2
   21a44:	e0bfff03 	ldbu	r2,-4(fp)
   21a48:	10000426 	beq	r2,zero,21a5c <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   21a4c:	e0bfff03 	ldbu	r2,-4(fp)
   21a50:	108003cc 	andi	r2,r2,15
   21a54:	100490fa 	slli	r2,r2,3
   21a58:	00000106 	br	21a60 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   21a5c:	0005883a 	mov	r2,zero
   21a60:	1884b03a 	or	r2,r3,r2
   21a64:	1007883a 	mov	r3,r2
   21a68:	e0bffa17 	ldw	r2,-24(fp)
   21a6c:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   21a70:	e13ffa17 	ldw	r4,-24(fp)
   21a74:	01400804 	movi	r5,32
   21a78:	00399a80 	call	399a8 <alt_dcache_flush>
}
   21a7c:	e037883a 	mov	sp,fp
   21a80:	dfc00117 	ldw	ra,4(sp)
   21a84:	df000017 	ldw	fp,0(sp)
   21a88:	dec00204 	addi	sp,sp,8
   21a8c:	f800283a 	ret

00021a90 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   21a90:	defff904 	addi	sp,sp,-28
   21a94:	dfc00615 	stw	ra,24(sp)
   21a98:	df000515 	stw	fp,20(sp)
   21a9c:	df000504 	addi	fp,sp,20
   21aa0:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   21aa4:	e0bfff17 	ldw	r2,-4(fp)
   21aa8:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   21aac:	e0bffb17 	ldw	r2,-20(fp)
   21ab0:	10800317 	ldw	r2,12(r2)
   21ab4:	10800404 	addi	r2,r2,16
   21ab8:	e0fffb17 	ldw	r3,-20(fp)
   21abc:	18c00317 	ldw	r3,12(r3)
   21ac0:	18c00404 	addi	r3,r3,16
   21ac4:	18c00037 	ldwio	r3,0(r3)
   21ac8:	18e00034 	orhi	r3,r3,32768
   21acc:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   21ad0:	e0bffb17 	ldw	r2,-20(fp)
   21ad4:	10800317 	ldw	r2,12(r2)
   21ad8:	10800404 	addi	r2,r2,16
   21adc:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   21ae0:	e0bffb17 	ldw	r2,-20(fp)
   21ae4:	10800917 	ldw	r2,36(r2)
   21ae8:	10001226 	beq	r2,zero,21b34 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21aec:	0005303a 	rdctl	r2,status
   21af0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21af4:	e0fffd17 	ldw	r3,-12(fp)
   21af8:	00bfff84 	movi	r2,-2
   21afc:	1884703a 	and	r2,r3,r2
   21b00:	1001703a 	wrctl	status,r2
  
  return context;
   21b04:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   21b08:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   21b0c:	e0bffb17 	ldw	r2,-20(fp)
   21b10:	10800917 	ldw	r2,36(r2)
   21b14:	e0fffb17 	ldw	r3,-20(fp)
   21b18:	18c00a17 	ldw	r3,40(r3)
   21b1c:	1809883a 	mov	r4,r3
   21b20:	103ee83a 	callr	r2
   21b24:	e0bffc17 	ldw	r2,-16(fp)
   21b28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b2c:	e0bffe17 	ldw	r2,-8(fp)
   21b30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   21b34:	e037883a 	mov	sp,fp
   21b38:	dfc00117 	ldw	ra,4(sp)
   21b3c:	df000017 	ldw	fp,0(sp)
   21b40:	dec00204 	addi	sp,sp,8
   21b44:	f800283a 	ret

00021b48 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   21b48:	defffa04 	addi	sp,sp,-24
   21b4c:	dfc00515 	stw	ra,20(sp)
   21b50:	df000415 	stw	fp,16(sp)
   21b54:	df000404 	addi	fp,sp,16
   21b58:	e13ffd15 	stw	r4,-12(fp)
   21b5c:	e17ffe15 	stw	r5,-8(fp)
   21b60:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   21b64:	e0bffd17 	ldw	r2,-12(fp)
   21b68:	10800317 	ldw	r2,12(r2)
   21b6c:	10800404 	addi	r2,r2,16
   21b70:	00c00074 	movhi	r3,1
   21b74:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   21b78:	e0bffd17 	ldw	r2,-12(fp)
   21b7c:	10800317 	ldw	r2,12(r2)
   21b80:	10800404 	addi	r2,r2,16
   21b84:	00c00074 	movhi	r3,1
   21b88:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   21b8c:	e0bffd17 	ldw	r2,-12(fp)
   21b90:	10800317 	ldw	r2,12(r2)
   21b94:	10800404 	addi	r2,r2,16
   21b98:	0007883a 	mov	r3,zero
   21b9c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   21ba0:	e0bffd17 	ldw	r2,-12(fp)
   21ba4:	10800317 	ldw	r2,12(r2)
   21ba8:	00c03fc4 	movi	r3,255
   21bac:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   21bb0:	e13ffd17 	ldw	r4,-12(fp)
   21bb4:	d1602904 	addi	r5,gp,-32604
   21bb8:	0039adc0 	call	39adc <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   21bbc:	d8000015 	stw	zero,0(sp)
   21bc0:	e13ffe17 	ldw	r4,-8(fp)
   21bc4:	e17fff17 	ldw	r5,-4(fp)
   21bc8:	018000b4 	movhi	r6,2
   21bcc:	3186a404 	addi	r6,r6,6800
   21bd0:	e1fffd17 	ldw	r7,-12(fp)
   21bd4:	0039cf80 	call	39cf8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   21bd8:	e037883a 	mov	sp,fp
   21bdc:	dfc00117 	ldw	ra,4(sp)
   21be0:	df000017 	ldw	fp,0(sp)
   21be4:	dec00204 	addi	sp,sp,8
   21be8:	f800283a 	ret

00021bec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21bec:	defffa04 	addi	sp,sp,-24
   21bf0:	dfc00515 	stw	ra,20(sp)
   21bf4:	df000415 	stw	fp,16(sp)
   21bf8:	df000404 	addi	fp,sp,16
   21bfc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21c00:	0007883a 	mov	r3,zero
   21c04:	e0bfff17 	ldw	r2,-4(fp)
   21c08:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21c0c:	e0bfff17 	ldw	r2,-4(fp)
   21c10:	10800104 	addi	r2,r2,4
   21c14:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c18:	0005303a 	rdctl	r2,status
   21c1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c20:	e0fffd17 	ldw	r3,-12(fp)
   21c24:	00bfff84 	movi	r2,-2
   21c28:	1884703a 	and	r2,r3,r2
   21c2c:	1001703a 	wrctl	status,r2
  
  return context;
   21c30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21c34:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21c38:	003a5ec0 	call	3a5ec <alt_tick>
   21c3c:	e0bffc17 	ldw	r2,-16(fp)
   21c40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c44:	e0bffe17 	ldw	r2,-8(fp)
   21c48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   21c4c:	e037883a 	mov	sp,fp
   21c50:	dfc00117 	ldw	ra,4(sp)
   21c54:	df000017 	ldw	fp,0(sp)
   21c58:	dec00204 	addi	sp,sp,8
   21c5c:	f800283a 	ret

00021c60 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   21c60:	defff804 	addi	sp,sp,-32
   21c64:	dfc00715 	stw	ra,28(sp)
   21c68:	df000615 	stw	fp,24(sp)
   21c6c:	df000604 	addi	fp,sp,24
   21c70:	e13ffc15 	stw	r4,-16(fp)
   21c74:	e17ffd15 	stw	r5,-12(fp)
   21c78:	e1bffe15 	stw	r6,-8(fp)
   21c7c:	e1ffff15 	stw	r7,-4(fp)
   21c80:	e0bfff17 	ldw	r2,-4(fp)
   21c84:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21c88:	00800174 	movhi	r2,5
   21c8c:	108fce04 	addi	r2,r2,16184
   21c90:	10800017 	ldw	r2,0(r2)
   21c94:	1000041e 	bne	r2,zero,21ca8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   21c98:	00800174 	movhi	r2,5
   21c9c:	108fce04 	addi	r2,r2,16184
   21ca0:	e0fffb17 	ldw	r3,-20(fp)
   21ca4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21ca8:	e0bffc17 	ldw	r2,-16(fp)
   21cac:	10800104 	addi	r2,r2,4
   21cb0:	00c001c4 	movi	r3,7
   21cb4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21cb8:	d8000015 	stw	zero,0(sp)
   21cbc:	e13ffd17 	ldw	r4,-12(fp)
   21cc0:	e17ffe17 	ldw	r5,-8(fp)
   21cc4:	018000b4 	movhi	r6,2
   21cc8:	3186fb04 	addi	r6,r6,7148
   21ccc:	e1fffc17 	ldw	r7,-16(fp)
   21cd0:	0039cf80 	call	39cf8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21cd4:	e037883a 	mov	sp,fp
   21cd8:	dfc00117 	ldw	ra,4(sp)
   21cdc:	df000017 	ldw	fp,0(sp)
   21ce0:	dec00204 	addi	sp,sp,8
   21ce4:	f800283a 	ret

00021ce8 <altera_eth_tse_init>:
 * @Return ENP_HARDWARE on error, otherwise return SUCCESS
 */

error_t altera_eth_tse_init(
    alt_iniche_dev              *p_dev)
{
   21ce8:	defffa04 	addi	sp,sp,-24
   21cec:	dfc00515 	stw	ra,20(sp)
   21cf0:	df000415 	stw	fp,16(sp)
   21cf4:	df000404 	addi	fp,sp,16
   21cf8:	e13fff15 	stw	r4,-4(fp)
    int i;
    
    alt_tse_iniche_dev_driver_data *p_driver_data = 0;
   21cfc:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_system_info *psys_info = 0;
   21d00:	e03ffe15 	stw	zero,-8(fp)
    #ifdef PRINTIF
        dprintf("altera_eth_tse_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
   21d04:	e03ffc15 	stw	zero,-16(fp)
   21d08:	00001106 	br	21d50 <altera_eth_tse_init+0x68>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
   21d0c:	008001b4 	movhi	r2,6
   21d10:	10b67e04 	addi	r2,r2,-9736
   21d14:	e0fffc17 	ldw	r3,-16(fp)
   21d18:	18c00324 	muli	r3,r3,12
   21d1c:	10c5883a 	add	r2,r2,r3
   21d20:	10c00017 	ldw	r3,0(r2)
   21d24:	e0bfff17 	ldw	r2,-4(fp)
   21d28:	1880061e 	bne	r3,r2,21d44 <altera_eth_tse_init+0x5c>
            p_driver_data = &tse_iniche_dev_driver_data[i];
   21d2c:	e0bffc17 	ldw	r2,-16(fp)
   21d30:	10c00324 	muli	r3,r2,12
   21d34:	008001b4 	movhi	r2,6
   21d38:	10b67e04 	addi	r2,r2,-9736
   21d3c:	1885883a 	add	r2,r3,r2
   21d40:	e0bffd15 	stw	r2,-12(fp)
    #ifdef PRINTIF
        dprintf("altera_eth_tse_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
   21d44:	e0bffc17 	ldw	r2,-16(fp)
   21d48:	10800044 	addi	r2,r2,1
   21d4c:	e0bffc15 	stw	r2,-16(fp)
   21d50:	d0a86c03 	ldbu	r2,-24144(gp)
   21d54:	10803fcc 	andi	r2,r2,255
   21d58:	e0fffc17 	ldw	r3,-16(fp)
   21d5c:	18bfeb16 	blt	r3,r2,21d0c <__alt_mem_descriptor_memory+0xdefe1d0c>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
            p_driver_data = &tse_iniche_dev_driver_data[i];
        }
    }
    /* If pointer could not found */
    if(p_driver_data == 0) {
   21d60:	e0bffd17 	ldw	r2,-12(fp)
   21d64:	1000021e 	bne	r2,zero,21d70 <altera_eth_tse_init+0x88>
        return ENP_HARDWARE;
   21d68:	00bff744 	movi	r2,-35
   21d6c:	00002906 	br	21e14 <altera_eth_tse_init+0x12c>
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
   21d70:	e03ffc15 	stw	zero,-16(fp)
   21d74:	00001206 	br	21dc0 <altera_eth_tse_init+0xd8>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
   21d78:	00800174 	movhi	r2,5
   21d7c:	10bf9404 	addi	r2,r2,-432
   21d80:	e0fffc17 	ldw	r3,-16(fp)
   21d84:	18c01224 	muli	r3,r3,72
   21d88:	10c5883a 	add	r2,r2,r3
   21d8c:	10c00017 	ldw	r3,0(r2)
   21d90:	e0bffd17 	ldw	r2,-12(fp)
   21d94:	10800117 	ldw	r2,4(r2)
   21d98:	1880061e 	bne	r3,r2,21db4 <altera_eth_tse_init+0xcc>
            psys_info = &tse_mac_device[i];
   21d9c:	e0bffc17 	ldw	r2,-16(fp)
   21da0:	10c01224 	muli	r3,r2,72
   21da4:	00800174 	movhi	r2,5
   21da8:	10bf9404 	addi	r2,r2,-432
   21dac:	1885883a 	add	r2,r3,r2
   21db0:	e0bffe15 	stw	r2,-8(fp)
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
   21db4:	e0bffc17 	ldw	r2,-16(fp)
   21db8:	10800044 	addi	r2,r2,1
   21dbc:	e0bffc15 	stw	r2,-16(fp)
   21dc0:	00800174 	movhi	r2,5
   21dc4:	10872a04 	addi	r2,r2,7336
   21dc8:	10800003 	ldbu	r2,0(r2)
   21dcc:	10803fcc 	andi	r2,r2,255
   21dd0:	e0fffc17 	ldw	r3,-16(fp)
   21dd4:	18bfe816 	blt	r3,r2,21d78 <__alt_mem_descriptor_memory+0xdefe1d78>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
            psys_info = &tse_mac_device[i];
        }
    }
    /* If pointer could not found */
    if(psys_info == 0) {
   21dd8:	e0bffe17 	ldw	r2,-8(fp)
   21ddc:	1000021e 	bne	r2,zero,21de8 <altera_eth_tse_init+0x100>
        return ENP_HARDWARE;
   21de0:	00bff744 	movi	r2,-35
   21de4:	00000b06 	br	21e14 <altera_eth_tse_init+0x12c>
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
   21de8:	e0bfff17 	ldw	r2,-4(fp)
   21dec:	11000517 	ldw	r4,20(r2)
   21df0:	e0bffd17 	ldw	r2,-12(fp)
   21df4:	10800203 	ldbu	r2,8(r2)
   21df8:	10803fcc 	andi	r2,r2,255
   21dfc:	10801224 	muli	r2,r2,72
   21e00:	e0fffe17 	ldw	r3,-8(fp)
   21e04:	1885883a 	add	r2,r3,r2
   21e08:	100b883a 	mov	r5,r2
   21e0c:	0021e280 	call	21e28 <prep_tse_mac>
    
    return SUCCESS;
   21e10:	0005883a 	mov	r2,zero
}
   21e14:	e037883a 	mov	sp,fp
   21e18:	dfc00117 	ldw	ra,4(sp)
   21e1c:	df000017 	ldw	fp,0(sp)
   21e20:	dec00204 	addi	sp,sp,8
   21e24:	f800283a 	ret

00021e28 <prep_tse_mac>:
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
   21e28:	defffb04 	addi	sp,sp,-20
   21e2c:	dfc00415 	stw	ra,16(sp)
   21e30:	df000315 	stw	fp,12(sp)
   21e34:	df000304 	addi	fp,sp,12
   21e38:	e13ffe15 	stw	r4,-8(fp)
   21e3c:	e17fff15 	stw	r5,-4(fp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
   21e40:	01000174 	movhi	r4,5
   21e44:	2136b104 	addi	r4,r4,-9532
   21e48:	e17ffe17 	ldw	r5,-8(fp)
   21e4c:	00080f80 	call	80f8 <printf>
    {
        tse[index].sem = 0; /*Tx IDLE*/
   21e50:	008001b4 	movhi	r2,6
   21e54:	10b68a04 	addi	r2,r2,-9688
   21e58:	e0fffe17 	ldw	r3,-8(fp)
   21e5c:	18c01324 	muli	r3,r3,76
   21e60:	10c5883a 	add	r2,r2,r3
   21e64:	10800c04 	addi	r2,r2,48
   21e68:	10000015 	stw	zero,0(r2)
        tse[index].tse = (void *)psys_info;
   21e6c:	008001b4 	movhi	r2,6
   21e70:	10b68a04 	addi	r2,r2,-9688
   21e74:	e0fffe17 	ldw	r3,-8(fp)
   21e78:	18c01324 	muli	r3,r3,76
   21e7c:	10c5883a 	add	r2,r2,r3
   21e80:	10801204 	addi	r2,r2,72
   21e84:	e0ffff17 	ldw	r3,-4(fp)
   21e88:	10c00015 	stw	r3,0(r2)

        ifp = nets[index];
   21e8c:	008001b4 	movhi	r2,6
   21e90:	10b79b04 	addi	r2,r2,-8596
   21e94:	e0fffe17 	ldw	r3,-8(fp)
   21e98:	18c7883a 	add	r3,r3,r3
   21e9c:	18c7883a 	add	r3,r3,r3
   21ea0:	10c5883a 	add	r2,r2,r3
   21ea4:	10800017 	ldw	r2,0(r2)
   21ea8:	e0bffd15 	stw	r2,-12(fp)
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
   21eac:	e0bffd17 	ldw	r2,-12(fp)
   21eb0:	10802717 	ldw	r2,156(r2)
   21eb4:	00c00084 	movi	r3,2
   21eb8:	10c00615 	stw	r3,24(r2)
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
   21ebc:	e0bffd17 	ldw	r2,-12(fp)
   21ec0:	10802717 	ldw	r2,156(r2)
   21ec4:	00c00084 	movi	r3,2
   21ec8:	10c00715 	stw	r3,28(r2)
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
   21ecc:	e0bffd17 	ldw	r2,-12(fp)
   21ed0:	10c02717 	ldw	r3,156(r2)
   21ed4:	00800174 	movhi	r2,5
   21ed8:	108fbe04 	addi	r2,r2,16120
   21edc:	10800017 	ldw	r2,0(r2)
   21ee0:	18800815 	stw	r2,32(r3)
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
   21ee4:	e0bffd17 	ldw	r2,-12(fp)
   21ee8:	10c02717 	ldw	r3,156(r2)
   21eec:	e0bffe17 	ldw	r2,-8(fp)
   21ef0:	10801324 	muli	r2,r2,76
   21ef4:	11000604 	addi	r4,r2,24
   21ef8:	008001b4 	movhi	r2,6
   21efc:	10b68a04 	addi	r2,r2,-9688
   21f00:	2085883a 	add	r2,r4,r2
   21f04:	18800515 	stw	r2,20(r3)
        ifp->n_mib->ifDescr =       "Altera TSE MAC ethernet";
   21f08:	e0bffd17 	ldw	r2,-12(fp)
   21f0c:	10c02717 	ldw	r3,156(r2)
   21f10:	00800174 	movhi	r2,5
   21f14:	10b6b604 	addi	r2,r2,-9512
   21f18:	18800115 	stw	r2,4(r3)
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
   21f1c:	e0bffd17 	ldw	r2,-12(fp)
   21f20:	00c00404 	movi	r3,16
   21f24:	10c00815 	stw	r3,32(r2)
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
   21f28:	e0bffd17 	ldw	r2,-12(fp)
   21f2c:	00c00184 	movi	r3,6
   21f30:	10c01115 	stw	r3,68(r2)
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
   21f34:	e0bffd17 	ldw	r2,-12(fp)
   21f38:	10802717 	ldw	r2,156(r2)
   21f3c:	00c00184 	movi	r3,6
   21f40:	10c00215 	stw	r3,8(r2)
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
   21f44:	e0bffd17 	ldw	r2,-12(fp)
   21f48:	00c17a84 	movi	r3,1514
   21f4c:	10c00915 	stw	r3,36(r2)
    
        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
   21f50:	e0fffd17 	ldw	r3,-12(fp)
   21f54:	008000b4 	movhi	r2,2
   21f58:	10882204 	addi	r2,r2,8328
   21f5c:	18800215 	stw	r2,8(r3)
        ifp->pkt_send =     NULL;
   21f60:	e0bffd17 	ldw	r2,-12(fp)
   21f64:	10000415 	stw	zero,16(r2)
        ifp->raw_send =     tse_mac_raw_send;
   21f68:	e0fffd17 	ldw	r3,-12(fp)
   21f6c:	008000b4 	movhi	r2,2
   21f70:	108ab904 	addi	r2,r2,10980
   21f74:	18800315 	stw	r2,12(r3)
        ifp->n_close =      tse_mac_close;
   21f78:	e0fffd17 	ldw	r3,-12(fp)
   21f7c:	008000b4 	movhi	r2,2
   21f80:	108cab04 	addi	r2,r2,12972
   21f84:	18800515 	stw	r2,20(r3)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
   21f88:	e0fffd17 	ldw	r3,-12(fp)
   21f8c:	008000b4 	movhi	r2,2
   21f90:	108c9b04 	addi	r2,r2,12908
   21f94:	18800715 	stw	r2,28(r3)
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
   21f98:	e0bffd17 	ldw	r2,-12(fp)
   21f9c:	10802a17 	ldw	r2,168(r2)
   21fa0:	10c00214 	ori	r3,r2,8
   21fa4:	e0bffd17 	ldw	r2,-12(fp)
   21fa8:	10c02a15 	stw	r3,168(r2)
    #endif
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
   21fac:	008001b4 	movhi	r2,6
   21fb0:	10b79b04 	addi	r2,r2,-8596
   21fb4:	e0fffe17 	ldw	r3,-8(fp)
   21fb8:	18c7883a 	add	r3,r3,r3
   21fbc:	18c7883a 	add	r3,r3,r3
   21fc0:	10c5883a 	add	r2,r2,r3
   21fc4:	10800017 	ldw	r2,0(r2)
   21fc8:	10c02717 	ldw	r3,156(r2)
   21fcc:	e0bffe17 	ldw	r2,-8(fp)
   21fd0:	10801324 	muli	r2,r2,76
   21fd4:	11000604 	addi	r4,r2,24
   21fd8:	008001b4 	movhi	r2,6
   21fdc:	10b68a04 	addi	r2,r2,-9688
   21fe0:	2085883a 	add	r2,r4,r2
   21fe4:	18800515 	stw	r2,20(r3)
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
   21fe8:	e0bffe17 	ldw	r2,-8(fp)
   21fec:	10801324 	muli	r2,r2,76
   21ff0:	10c00604 	addi	r3,r2,24
   21ff4:	008001b4 	movhi	r2,6
   21ff8:	10b68a04 	addi	r2,r2,-9688
   21ffc:	1885883a 	add	r2,r3,r2
   22000:	e13ffd17 	ldw	r4,-12(fp)
   22004:	100b883a 	mov	r5,r2
   22008:	00063500 	call	6350 <get_mac_addr>
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
   2200c:	008001b4 	movhi	r2,6
   22010:	10b68a04 	addi	r2,r2,-9688
   22014:	e0fffe17 	ldw	r3,-8(fp)
   22018:	18c01324 	muli	r3,r3,76
   2201c:	10c5883a 	add	r2,r2,r3
   22020:	e0fffe17 	ldw	r3,-8(fp)
   22024:	10c00015 	stw	r3,0(r2)
        tse[index].netp = ifp;
   22028:	008001b4 	movhi	r2,6
   2202c:	10b68a04 	addi	r2,r2,-9688
   22030:	e0fffe17 	ldw	r3,-8(fp)
   22034:	18c01324 	muli	r3,r3,76
   22038:	10c5883a 	add	r2,r2,r3
   2203c:	10800804 	addi	r2,r2,32
   22040:	e0fffd17 	ldw	r3,-12(fp)
   22044:	10c00015 	stw	r3,0(r2)
        ifp->n_local = (void*)(&tse[index]);
   22048:	e0bffe17 	ldw	r2,-8(fp)
   2204c:	10c01324 	muli	r3,r2,76
   22050:	008001b4 	movhi	r2,6
   22054:	10b68a04 	addi	r2,r2,-9688
   22058:	1887883a 	add	r3,r3,r2
   2205c:	e0bffd17 	ldw	r2,-12(fp)
   22060:	10c02815 	stw	r3,160(r2)
    
        index++;
   22064:	e0bffe17 	ldw	r2,-8(fp)
   22068:	10800044 	addi	r2,r2,1
   2206c:	e0bffe15 	stw	r2,-8(fp)
   }
 
   return index;
   22070:	e0bffe17 	ldw	r2,-8(fp)
}
   22074:	e037883a 	mov	sp,fp
   22078:	dfc00117 	ldw	ra,4(sp)
   2207c:	df000017 	ldw	fp,0(sp)
   22080:	dec00204 	addi	sp,sp,8
   22084:	f800283a 	ret

00022088 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
   22088:	defff004 	addi	sp,sp,-64
   2208c:	dfc00f15 	stw	ra,60(sp)
   22090:	df000e15 	stw	fp,56(sp)
   22094:	df000e04 	addi	fp,sp,56
   22098:	e13fff15 	stw	r4,-4(fp)
   int dat;
   int speed, duplex, result, x;
   int status = SUCCESS;
   2209c:	e03ff815 	stw	zero,-32(fp)
   
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
   220a0:	008001b4 	movhi	r2,6
   220a4:	10b68a04 	addi	r2,r2,-9688
   220a8:	e0ffff17 	ldw	r3,-4(fp)
   220ac:	18c01324 	muli	r3,r3,76
   220b0:	10c5883a 	add	r2,r2,r3
   220b4:	10801204 	addi	r2,r2,72
   220b8:	10800017 	ldw	r2,0(r2)
   220bc:	e0bff915 	stw	r2,-28(fp)
   
   dprintf("[tse_mac_init]\n");
   220c0:	01000174 	movhi	r4,5
   220c4:	2136bc04 	addi	r4,r4,-9488
   220c8:	00083740 	call	8374 <puts>
#ifdef PRINTIF
    dprintf("tse_mac_init %d\n", iface);
#endif    

    if (tse_hw->ext_desc_mem == 1) {
   220cc:	e0bff917 	ldw	r2,-28(fp)
   220d0:	10800783 	ldbu	r2,30(r2)
   220d4:	10803fcc 	andi	r2,r2,255
   220d8:	10800058 	cmpnei	r2,r2,1
   220dc:	10000b1e 	bne	r2,zero,2210c <tse_mac_init+0x84>
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
   220e0:	e0bff917 	ldw	r2,-28(fp)
   220e4:	10800817 	ldw	r2,32(r2)
   220e8:	1009883a 	mov	r4,r2
   220ec:	008001b4 	movhi	r2,6
   220f0:	10b68a04 	addi	r2,r2,-9688
   220f4:	e0ffff17 	ldw	r3,-4(fp)
   220f8:	18c01324 	muli	r3,r3,76
   220fc:	10c5883a 	add	r2,r2,r3
   22100:	10800f04 	addi	r2,r2,60
   22104:	11000015 	stw	r4,0(r2)
   22108:	00001206 	br	22154 <tse_mac_init+0xcc>
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
   2210c:	01002804 	movi	r4,160
   22110:	003a7300 	call	3a730 <alt_uncached_malloc>
   22114:	e0bff515 	stw	r2,-44(fp)
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
   22118:	00000306 	br	22128 <tse_mac_init+0xa0>
        {
            temp_desc++;
   2211c:	e0bff517 	ldw	r2,-44(fp)
   22120:	10800044 	addi	r2,r2,1
   22124:	e0bff515 	stw	r2,-44(fp)
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
   22128:	e0bff517 	ldw	r2,-44(fp)
   2212c:	108007cc 	andi	r2,r2,31
   22130:	103ffa1e 	bne	r2,zero,2211c <__alt_mem_descriptor_memory+0xdefe211c>
        {
            temp_desc++;
        }
        tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
   22134:	008001b4 	movhi	r2,6
   22138:	10b68a04 	addi	r2,r2,-9688
   2213c:	e0ffff17 	ldw	r3,-4(fp)
   22140:	18c01324 	muli	r3,r3,76
   22144:	10c5883a 	add	r2,r2,r3
   22148:	10800f04 	addi	r2,r2,60
   2214c:	e0fff517 	ldw	r3,-44(fp)
   22150:	10c00015 	stw	r3,0(r2)
    }

   
   /* Get the Rx and Tx SGDMA addresses */
   sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
   22154:	e0bff917 	ldw	r2,-28(fp)
   22158:	10800517 	ldw	r2,20(r2)
   2215c:	1009883a 	mov	r4,r2
   22160:	00215200 	call	21520 <alt_avalon_sgdma_open>
   22164:	e0bffa15 	stw	r2,-24(fp)
   
   if(!sgdma_tx_dev) {
   22168:	e0bffa17 	ldw	r2,-24(fp)
   2216c:	1000051e 	bne	r2,zero,22184 <tse_mac_init+0xfc>
      dprintf("[altera_eth_tse_init] Error opening TX SGDMA\n");
   22170:	01000174 	movhi	r4,5
   22174:	2136c004 	addi	r4,r4,-9472
   22178:	00083740 	call	8374 <puts>
      return ENP_RESOURCE;
   2217c:	00bffa84 	movi	r2,-22
   22180:	00025306 	br	22ad0 <tse_mac_init+0xa48>
   }
  
   sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
   22184:	e0bff917 	ldw	r2,-28(fp)
   22188:	10800617 	ldw	r2,24(r2)
   2218c:	1009883a 	mov	r4,r2
   22190:	00215200 	call	21520 <alt_avalon_sgdma_open>
   22194:	e0bffb15 	stw	r2,-20(fp)
   if(!sgdma_rx_dev) {
   22198:	e0bffb17 	ldw	r2,-20(fp)
   2219c:	1000051e 	bne	r2,zero,221b4 <tse_mac_init+0x12c>
      dprintf("[altera_eth_tse_init] Error opening RX SGDMA\n");
   221a0:	01000174 	movhi	r4,5
   221a4:	2136cc04 	addi	r4,r4,-9424
   221a8:	00083740 	call	8374 <puts>
      return ENP_RESOURCE;
   221ac:	00bffa84 	movi	r2,-22
   221b0:	00024706 	br	22ad0 <tse_mac_init+0xa48>
   }

   /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
   tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
   221b4:	e0bfff17 	ldw	r2,-4(fp)
   221b8:	10801324 	muli	r2,r2,76
   221bc:	10c00104 	addi	r3,r2,4
   221c0:	008001b4 	movhi	r2,6
   221c4:	10b68a04 	addi	r2,r2,-9688
   221c8:	1889883a 	add	r4,r3,r2
   221cc:	e0bff917 	ldw	r2,-28(fp)
   221d0:	11400017 	ldw	r5,0(r2)
   221d4:	e0fffa17 	ldw	r3,-24(fp)
   221d8:	e0bffb17 	ldw	r2,-20(fp)
   221dc:	d8000015 	stw	zero,0(sp)
   221e0:	180d883a 	mov	r6,r3
   221e4:	100f883a 	mov	r7,r2
   221e8:	0000fa80 	call	fa8 <tse_mac_initTransInfo2>
                                   (unsigned int)sgdma_tx_dev,            
                                   (unsigned int)sgdma_rx_dev,
                                   0);

   /* Reset RX-side SGDMA */
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,
   221ec:	008001b4 	movhi	r2,6
   221f0:	10b68a04 	addi	r2,r2,-9688
   221f4:	e0ffff17 	ldw	r3,-4(fp)
   221f8:	18c01324 	muli	r3,r3,76
   221fc:	10c5883a 	add	r2,r2,r3
   22200:	10800304 	addi	r2,r2,12
   22204:	10800017 	ldw	r2,0(r2)
   22208:	10800317 	ldw	r2,12(r2)
   2220c:	10800404 	addi	r2,r2,16
   22210:	00c00074 	movhi	r3,1
   22214:	10c00035 	stwio	r3,0(r2)
     ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
   22218:	008001b4 	movhi	r2,6
   2221c:	10b68a04 	addi	r2,r2,-9688
   22220:	e0ffff17 	ldw	r3,-4(fp)
   22224:	18c01324 	muli	r3,r3,76
   22228:	10c5883a 	add	r2,r2,r3
   2222c:	10800304 	addi	r2,r2,12
   22230:	10800017 	ldw	r2,0(r2)
   22234:	10800317 	ldw	r2,12(r2)
   22238:	10800404 	addi	r2,r2,16
   2223c:	0007883a 	mov	r3,zero
   22240:	10c00035 	stwio	r3,0(r2)
   
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
   22244:	e0bff917 	ldw	r2,-28(fp)
   22248:	1080070b 	ldhu	r2,28(r2)
   2224c:	10ffffcc 	andi	r3,r2,65535
   22250:	008001b4 	movhi	r2,6
   22254:	10b68a04 	addi	r2,r2,-9688
   22258:	e13fff17 	ldw	r4,-4(fp)
   2225c:	21001324 	muli	r4,r4,76
   22260:	1105883a 	add	r2,r2,r4
   22264:	10800904 	addi	r2,r2,36
   22268:	10c00015 	stw	r3,0(r2)

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
   2226c:	008001b4 	movhi	r2,6
   22270:	10b68a04 	addi	r2,r2,-9688
   22274:	e0ffff17 	ldw	r3,-4(fp)
   22278:	18c01324 	muli	r3,r3,76
   2227c:	10c5883a 	add	r2,r2,r3
   22280:	10800104 	addi	r2,r2,4
   22284:	10800017 	ldw	r2,0(r2)
   22288:	1009883a 	mov	r4,r2
   2228c:	00024340 	call	2434 <getPHYSpeed>
   22290:	e0bffc15 	stw	r2,-16(fp)
   speed = (result >> 1) & 0x07;
   22294:	e0bffc17 	ldw	r2,-16(fp)
   22298:	1005d07a 	srai	r2,r2,1
   2229c:	108001cc 	andi	r2,r2,7
   222a0:	e0bffd15 	stw	r2,-12(fp)
   duplex = result & 0x01;
   222a4:	e0bffc17 	ldw	r2,-16(fp)
   222a8:	1080004c 	andi	r2,r2,1
   222ac:	e0bffe15 	stw	r2,-8(fp)
    
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
   222b0:	008001b4 	movhi	r2,6
   222b4:	10b68a04 	addi	r2,r2,-9688
   222b8:	e0ffff17 	ldw	r3,-4(fp)
   222bc:	18c01324 	muli	r3,r3,76
   222c0:	10c5883a 	add	r2,r2,r3
   222c4:	10800104 	addi	r2,r2,4
   222c8:	10800017 	ldw	r2,0(r2)
   222cc:	10800204 	addi	r2,r2,8
   222d0:	00c800c4 	movi	r3,8195
   222d4:	10c00035 	stwio	r3,0(r2)
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   222d8:	e03ff415 	stw	zero,-48(fp)
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
   222dc:	00000606 	br	222f8 <tse_mac_init+0x270>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
   222e0:	e0bff417 	ldw	r2,-48(fp)
   222e4:	10c00044 	addi	r3,r2,1
   222e8:	e0fff415 	stw	r3,-48(fp)
   222ec:	1089c450 	cmplti	r2,r2,10001
   222f0:	1000011e 	bne	r2,zero,222f8 <tse_mac_init+0x270>
       break;
   222f4:	00000b06 	br	22324 <tse_mac_init+0x29c>
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
   222f8:	008001b4 	movhi	r2,6
   222fc:	10b68a04 	addi	r2,r2,-9688
   22300:	e0ffff17 	ldw	r3,-4(fp)
   22304:	18c01324 	muli	r3,r3,76
   22308:	10c5883a 	add	r2,r2,r3
   2230c:	10800104 	addi	r2,r2,4
   22310:	10800017 	ldw	r2,0(r2)
   22314:	10800204 	addi	r2,r2,8
   22318:	10800037 	ldwio	r2,0(r2)
   2231c:	1088000c 	andi	r2,r2,8192
   22320:	103fef1e 	bne	r2,zero,222e0 <__alt_mem_descriptor_memory+0xdefe22e0>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
       break;
     }
   }
   if(x >= 10000) {
   22324:	e0bff417 	ldw	r2,-48(fp)
   22328:	1089c410 	cmplti	r2,r2,10000
   2232c:	1000031e 	bne	r2,zero,2233c <tse_mac_init+0x2b4>
     dprintf("TSEMAC SW reset bit never cleared!\n");
   22330:	01000174 	movhi	r4,5
   22334:	2136d804 	addi	r4,r4,-9376
   22338:	00083740 	call	8374 <puts>
   }

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
   2233c:	008001b4 	movhi	r2,6
   22340:	10b68a04 	addi	r2,r2,-9688
   22344:	e0ffff17 	ldw	r3,-4(fp)
   22348:	18c01324 	muli	r3,r3,76
   2234c:	10c5883a 	add	r2,r2,r3
   22350:	10800104 	addi	r2,r2,4
   22354:	10800017 	ldw	r2,0(r2)
   22358:	10800204 	addi	r2,r2,8
   2235c:	10800037 	ldwio	r2,0(r2)
   22360:	e0bff315 	stw	r2,-52(fp)
   if( (dat & 0x03) != 0 ) {
   22364:	e0bff317 	ldw	r2,-52(fp)
   22368:	108000cc 	andi	r2,r2,3
   2236c:	10000526 	beq	r2,zero,22384 <tse_mac_init+0x2fc>
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
   22370:	01000174 	movhi	r4,5
   22374:	2136e104 	addi	r4,r4,-9340
   22378:	e17ff317 	ldw	r5,-52(fp)
   2237c:	00080f80 	call	80f8 <printf>
   22380:	00000506 	br	22398 <tse_mac_init+0x310>
   } 
   else {
     dprintf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
   22384:	01000174 	movhi	r4,5
   22388:	2136f504 	addi	r4,r4,-9260
   2238c:	e17ff417 	ldw	r5,-48(fp)
   22390:	e1bff317 	ldw	r6,-52(fp)
   22394:	00080f80 	call	80f8 <printf>
  
    /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
    extern alt_u8 mac_group_count;
    extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
    if(tse_hw->use_shared_fifo == 1) {
   22398:	e0bff917 	ldw	r2,-28(fp)
   2239c:	10800903 	ldbu	r2,36(r2)
   223a0:	10803fcc 	andi	r2,r2,255
   223a4:	10800058 	cmpnei	r2,r2,1
   223a8:	1000351e 	bne	r2,zero,22480 <tse_mac_init+0x3f8>
      int channel_loop = 0;
   223ac:	e03ff615 	stw	zero,-40(fp)
      int mac_loop = 0;
   223b0:	e03ff715 	stw	zero,-36(fp)
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
   223b4:	e03ff615 	stw	zero,-40(fp)
   223b8:	00002b06 	br	22468 <tse_mac_init+0x3e0>
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
   223bc:	e03ff715 	stw	zero,-36(fp)
   223c0:	00001b06 	br	22430 <tse_mac_init+0x3a8>
          if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
   223c4:	00800174 	movhi	r2,5
   223c8:	10999704 	addi	r2,r2,26204
   223cc:	e0fff617 	ldw	r3,-40(fp)
   223d0:	18c7883a 	add	r3,r3,r3
   223d4:	18c7883a 	add	r3,r3,r3
   223d8:	10c5883a 	add	r2,r2,r3
   223dc:	10c00017 	ldw	r3,0(r2)
   223e0:	e0bff717 	ldw	r2,-36(fp)
   223e4:	10800044 	addi	r2,r2,1
   223e8:	1085883a 	add	r2,r2,r2
   223ec:	1085883a 	add	r2,r2,r2
   223f0:	1885883a 	add	r2,r3,r2
   223f4:	10800017 	ldw	r2,0(r2)
   223f8:	10c00217 	ldw	r3,8(r2)
   223fc:	e0bff917 	ldw	r2,-28(fp)
   22400:	1880081e 	bne	r3,r2,22424 <tse_mac_init+0x39c>
            tse[iface].channel = mac_loop;
   22404:	008001b4 	movhi	r2,6
   22408:	10b68a04 	addi	r2,r2,-9688
   2240c:	e0ffff17 	ldw	r3,-4(fp)
   22410:	18c01324 	muli	r3,r3,76
   22414:	10c5883a 	add	r2,r2,r3
   22418:	10800d04 	addi	r2,r2,52
   2241c:	e0fff717 	ldw	r3,-36(fp)
   22420:	10c00015 	stw	r3,0(r2)
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
   22424:	e0bff717 	ldw	r2,-36(fp)
   22428:	10800044 	addi	r2,r2,1
   2242c:	e0bff715 	stw	r2,-36(fp)
   22430:	00800174 	movhi	r2,5
   22434:	10999704 	addi	r2,r2,26204
   22438:	e0fff617 	ldw	r3,-40(fp)
   2243c:	18c7883a 	add	r3,r3,r3
   22440:	18c7883a 	add	r3,r3,r3
   22444:	10c5883a 	add	r2,r2,r3
   22448:	10800017 	ldw	r2,0(r2)
   2244c:	10800003 	ldbu	r2,0(r2)
   22450:	10803fcc 	andi	r2,r2,255
   22454:	e0fff717 	ldw	r3,-36(fp)
   22458:	18bfda16 	blt	r3,r2,223c4 <__alt_mem_descriptor_memory+0xdefe23c4>
      
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
   2245c:	e0bff617 	ldw	r2,-40(fp)
   22460:	10800044 	addi	r2,r2,1
   22464:	e0bff615 	stw	r2,-40(fp)
   22468:	00800174 	movhi	r2,5
   2246c:	108f6c84 	addi	r2,r2,15794
   22470:	10800003 	ldbu	r2,0(r2)
   22474:	10803fcc 	andi	r2,r2,255
   22478:	e0fff617 	ldw	r3,-40(fp)
   2247c:	18bfcf16 	blt	r3,r2,223bc <__alt_mem_descriptor_memory+0xdefe23bc>
        }
      }
    }
    /* End of Hack code */
  
  if(tse_hw->use_shared_fifo == 1) {
   22480:	e0bff917 	ldw	r2,-28(fp)
   22484:	10800903 	ldbu	r2,36(r2)
   22488:	10803fcc 	andi	r2,r2,255
   2248c:	10800058 	cmpnei	r2,r2,1
   22490:	10000f1e 	bne	r2,zero,224d0 <tse_mac_init+0x448>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
   22494:	e0bff917 	ldw	r2,-28(fp)
   22498:	10800d17 	ldw	r2,52(r2)
   2249c:	1007883a 	mov	r3,r2
   224a0:	e0bff917 	ldw	r2,-28(fp)
   224a4:	10800f17 	ldw	r2,60(r2)
   224a8:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
   224ac:	e0bff917 	ldw	r2,-28(fp)
   224b0:	10800d17 	ldw	r2,52(r2)
   224b4:	10800204 	addi	r2,r2,8
   224b8:	1007883a 	mov	r3,r2
   224bc:	e0bff917 	ldw	r2,-28(fp)
   224c0:	10800f17 	ldw	r2,60(r2)
   224c4:	10bfdd04 	addi	r2,r2,-140
   224c8:	18800035 	stwio	r2,0(r3)
   224cc:	00006006 	br	22650 <tse_mac_init+0x5c8>
  }
  else {
      /* Initialize MAC registers */
      IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse[iface].mi.base, ALTERA_TSE_MAC_MAX_FRAME_LENGTH); 
   224d0:	008001b4 	movhi	r2,6
   224d4:	10b68a04 	addi	r2,r2,-9688
   224d8:	e0ffff17 	ldw	r3,-4(fp)
   224dc:	18c01324 	muli	r3,r3,76
   224e0:	10c5883a 	add	r2,r2,r3
   224e4:	10800104 	addi	r2,r2,4
   224e8:	10800017 	ldw	r2,0(r2)
   224ec:	10800504 	addi	r2,r2,20
   224f0:	00c17b84 	movi	r3,1518
   224f4:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse[iface].mi.base, 8);
   224f8:	008001b4 	movhi	r2,6
   224fc:	10b68a04 	addi	r2,r2,-9688
   22500:	e0ffff17 	ldw	r3,-4(fp)
   22504:	18c01324 	muli	r3,r3,76
   22508:	10c5883a 	add	r2,r2,r3
   2250c:	10800104 	addi	r2,r2,4
   22510:	10800017 	ldw	r2,0(r2)
   22514:	10800b04 	addi	r2,r2,44
   22518:	00c00204 	movi	r3,8
   2251c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse[iface].mi.base, 8);
   22520:	008001b4 	movhi	r2,6
   22524:	10b68a04 	addi	r2,r2,-9688
   22528:	e0ffff17 	ldw	r3,-4(fp)
   2252c:	18c01324 	muli	r3,r3,76
   22530:	10c5883a 	add	r2,r2,r3
   22534:	10800104 	addi	r2,r2,4
   22538:	10800017 	ldw	r2,0(r2)
   2253c:	10800c04 	addi	r2,r2,48
   22540:	00c00204 	movi	r3,8
   22544:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse[iface].mi.base, 8);
   22548:	008001b4 	movhi	r2,6
   2254c:	10b68a04 	addi	r2,r2,-9688
   22550:	e0ffff17 	ldw	r3,-4(fp)
   22554:	18c01324 	muli	r3,r3,76
   22558:	10c5883a 	add	r2,r2,r3
   2255c:	10800104 	addi	r2,r2,4
   22560:	10800017 	ldw	r2,0(r2)
   22564:	10800d04 	addi	r2,r2,52
   22568:	00c00204 	movi	r3,8
   2256c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse[iface].mi.base,  3);
   22570:	008001b4 	movhi	r2,6
   22574:	10b68a04 	addi	r2,r2,-9688
   22578:	e0ffff17 	ldw	r3,-4(fp)
   2257c:	18c01324 	muli	r3,r3,76
   22580:	10c5883a 	add	r2,r2,r3
   22584:	10800104 	addi	r2,r2,4
   22588:	10800017 	ldw	r2,0(r2)
   2258c:	10800e04 	addi	r2,r2,56
   22590:	00c000c4 	movi	r3,3
   22594:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_tx_depth - 16); //1024/4;  
   22598:	008001b4 	movhi	r2,6
   2259c:	10b68a04 	addi	r2,r2,-9688
   225a0:	e0ffff17 	ldw	r3,-4(fp)
   225a4:	18c01324 	muli	r3,r3,76
   225a8:	10c5883a 	add	r2,r2,r3
   225ac:	10800104 	addi	r2,r2,4
   225b0:	10800017 	ldw	r2,0(r2)
   225b4:	10800904 	addi	r2,r2,36
   225b8:	e0fff917 	ldw	r3,-28(fp)
   225bc:	18c0010b 	ldhu	r3,4(r3)
   225c0:	18ffffcc 	andi	r3,r3,65535
   225c4:	18fffc04 	addi	r3,r3,-16
   225c8:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse[iface].mi.base,  0); //32/4; // start transmit when there are 48 bytes
   225cc:	008001b4 	movhi	r2,6
   225d0:	10b68a04 	addi	r2,r2,-9688
   225d4:	e0ffff17 	ldw	r3,-4(fp)
   225d8:	18c01324 	muli	r3,r3,76
   225dc:	10c5883a 	add	r2,r2,r3
   225e0:	10800104 	addi	r2,r2,4
   225e4:	10800017 	ldw	r2,0(r2)
   225e8:	10800a04 	addi	r2,r2,40
   225ec:	0007883a 	mov	r3,zero
   225f0:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_rx_depth - 16); //4000/4);
   225f4:	008001b4 	movhi	r2,6
   225f8:	10b68a04 	addi	r2,r2,-9688
   225fc:	e0ffff17 	ldw	r3,-4(fp)
   22600:	18c01324 	muli	r3,r3,76
   22604:	10c5883a 	add	r2,r2,r3
   22608:	10800104 	addi	r2,r2,4
   2260c:	10800017 	ldw	r2,0(r2)
   22610:	10800704 	addi	r2,r2,28
   22614:	e0fff917 	ldw	r3,-28(fp)
   22618:	18c0018b 	ldhu	r3,6(r3)
   2261c:	18ffffcc 	andi	r3,r3,65535
   22620:	18fffc04 	addi	r3,r3,-16
   22624:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse[iface].mi.base,  0);
   22628:	008001b4 	movhi	r2,6
   2262c:	10b68a04 	addi	r2,r2,-9688
   22630:	e0ffff17 	ldw	r3,-4(fp)
   22634:	18c01324 	muli	r3,r3,76
   22638:	10c5883a 	add	r2,r2,r3
   2263c:	10800104 	addi	r2,r2,4
   22640:	10800017 	ldw	r2,0(r2)
   22644:	10800804 	addi	r2,r2,32
   22648:	0007883a 	mov	r3,zero
   2264c:	10c00035 	stwio	r3,0(r2)
      tse[iface].rxShift16OK = 0;
    }
  } /* if(ETHHDR_BIAS == 0) */
 
  if(ETHHDR_BIAS == 2) {
    IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
   22650:	008001b4 	movhi	r2,6
   22654:	10b68a04 	addi	r2,r2,-9688
   22658:	e0ffff17 	ldw	r3,-4(fp)
   2265c:	18c01324 	muli	r3,r3,76
   22660:	10c5883a 	add	r2,r2,r3
   22664:	10800104 	addi	r2,r2,4
   22668:	10800017 	ldw	r2,0(r2)
   2266c:	10803a04 	addi	r2,r2,232
   22670:	00c00134 	movhi	r3,4
   22674:	10c00035 	stwio	r3,0(r2)
 
    /*
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
   22678:	008001b4 	movhi	r2,6
   2267c:	10b68a04 	addi	r2,r2,-9688
   22680:	e0ffff17 	ldw	r3,-4(fp)
   22684:	18c01324 	muli	r3,r3,76
   22688:	10c5883a 	add	r2,r2,r3
   2268c:	10800104 	addi	r2,r2,4
   22690:	10800017 	ldw	r2,0(r2)
   22694:	10803a04 	addi	r2,r2,232
   22698:	10800037 	ldwio	r2,0(r2)
   2269c:	1080012c 	andhi	r2,r2,4
   226a0:	10001e26 	beq	r2,zero,2271c <tse_mac_init+0x694>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
   226a4:	008001b4 	movhi	r2,6
   226a8:	10b68a04 	addi	r2,r2,-9688
   226ac:	e0ffff17 	ldw	r3,-4(fp)
   226b0:	18c01324 	muli	r3,r3,76
   226b4:	10c5883a 	add	r2,r2,r3
   226b8:	10800a04 	addi	r2,r2,40
   226bc:	00c00044 	movi	r3,1
   226c0:	10c00015 	stw	r3,0(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
   226c4:	008001b4 	movhi	r2,6
   226c8:	10b68a04 	addi	r2,r2,-9688
   226cc:	e0ffff17 	ldw	r3,-4(fp)
   226d0:	18c01324 	muli	r3,r3,76
   226d4:	10c5883a 	add	r2,r2,r3
   226d8:	10800104 	addi	r2,r2,4
   226dc:	10800017 	ldw	r2,0(r2)
   226e0:	10803b04 	addi	r2,r2,236
   226e4:	00c08034 	movhi	r3,512
   226e8:	10c00035 	stwio	r3,0(r2)
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
   226ec:	008001b4 	movhi	r2,6
   226f0:	10b68a04 	addi	r2,r2,-9688
   226f4:	e0ffff17 	ldw	r3,-4(fp)
   226f8:	18c01324 	muli	r3,r3,76
   226fc:	10c5883a 	add	r2,r2,r3
   22700:	10800104 	addi	r2,r2,4
   22704:	10800017 	ldw	r2,0(r2)
   22708:	10803b04 	addi	r2,r2,236
   2270c:	10800037 	ldwio	r2,0(r2)
   22710:	1080802c 	andhi	r2,r2,512
   22714:	10001d26 	beq	r2,zero,2278c <tse_mac_init+0x704>
   22718:	00000d06 	br	22750 <tse_mac_init+0x6c8>
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
    } 
    else {
      tse[iface].txShift16OK = 0;
   2271c:	008001b4 	movhi	r2,6
   22720:	10b68a04 	addi	r2,r2,-9688
   22724:	e0ffff17 	ldw	r3,-4(fp)
   22728:	18c01324 	muli	r3,r3,76
   2272c:	10c5883a 	add	r2,r2,r3
   22730:	10800a04 	addi	r2,r2,40
   22734:	10000015 	stw	zero,0(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
   22738:	01000174 	movhi	r4,5
   2273c:	2136fd04 	addi	r4,r4,-9228
   22740:	01400084 	movi	r5,2
   22744:	00080f80 	call	80f8 <printf>
      return ENP_LOGIC;
   22748:	00bffd44 	movi	r2,-11
   2274c:	0000e006 	br	22ad0 <tse_mac_init+0xa48>
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
   22750:	008001b4 	movhi	r2,6
   22754:	10b68a04 	addi	r2,r2,-9688
   22758:	e0ffff17 	ldw	r3,-4(fp)
   2275c:	18c01324 	muli	r3,r3,76
   22760:	10c5883a 	add	r2,r2,r3
   22764:	10800b04 	addi	r2,r2,44
   22768:	00c00044 	movi	r3,1
   2276c:	10c00015 	stw	r3,0(r2)
      return ENP_LOGIC;
    }
  } /* if(ETHHDR_BIAS == 2) */
  
  /* enable MAC */
  dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
   22770:	00810034 	movhi	r2,1024
   22774:	108080c4 	addi	r2,r2,515
   22778:	e0bff315 	stw	r2,-52(fp)
        ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
   2277c:	e0bffd17 	ldw	r2,-12(fp)
   22780:	10800058 	cmpnei	r2,r2,1
   22784:	1000171e 	bne	r2,zero,227e4 <tse_mac_init+0x75c>
   22788:	00000d06 	br	227c0 <tse_mac_init+0x738>
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
    } 
    else {
      tse[iface].rxShift16OK = 0;
   2278c:	008001b4 	movhi	r2,6
   22790:	10b68a04 	addi	r2,r2,-9688
   22794:	e0ffff17 	ldw	r3,-4(fp)
   22798:	18c01324 	muli	r3,r3,76
   2279c:	10c5883a 	add	r2,r2,r3
   227a0:	10800b04 	addi	r2,r2,44
   227a4:	10000015 	stw	zero,0(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
   227a8:	01000174 	movhi	r4,5
   227ac:	21371504 	addi	r4,r4,-9132
   227b0:	01400084 	movi	r5,2
   227b4:	00080f80 	call	80f8 <printf>
      return ENP_LOGIC;
   227b8:	00bffd44 	movi	r2,-11
   227bc:	0000c406 	br	22ad0 <tse_mac_init+0xa48>
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
    dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   227c0:	e0bff317 	ldw	r2,-52(fp)
   227c4:	10800214 	ori	r2,r2,8
   227c8:	e0bff315 	stw	r2,-52(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   227cc:	e0fff317 	ldw	r3,-52(fp)
   227d0:	00bf8034 	movhi	r2,65024
   227d4:	10bfffc4 	addi	r2,r2,-1
   227d8:	1884703a 	and	r2,r3,r2
   227dc:	e0bff315 	stw	r2,-52(fp)
   227e0:	00002106 	br	22868 <tse_mac_init+0x7e0>
  }
  /* 100 Mbps */
  else if(speed == 0x02) {
   227e4:	e0bffd17 	ldw	r2,-12(fp)
   227e8:	10800098 	cmpnei	r2,r2,2
   227ec:	10000a1e 	bne	r2,zero,22818 <tse_mac_init+0x790>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   227f0:	e0fff317 	ldw	r3,-52(fp)
   227f4:	00bffdc4 	movi	r2,-9
   227f8:	1884703a 	and	r2,r3,r2
   227fc:	e0bff315 	stw	r2,-52(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   22800:	e0fff317 	ldw	r3,-52(fp)
   22804:	00bf8034 	movhi	r2,65024
   22808:	10bfffc4 	addi	r2,r2,-1
   2280c:	1884703a 	and	r2,r3,r2
   22810:	e0bff315 	stw	r2,-52(fp)
   22814:	00001406 	br	22868 <tse_mac_init+0x7e0>
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
   22818:	e0bffd17 	ldw	r2,-12(fp)
   2281c:	10800118 	cmpnei	r2,r2,4
   22820:	1000081e 	bne	r2,zero,22844 <tse_mac_init+0x7bc>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   22824:	e0fff317 	ldw	r3,-52(fp)
   22828:	00bffdc4 	movi	r2,-9
   2282c:	1884703a 	and	r2,r3,r2
   22830:	e0bff315 	stw	r2,-52(fp)
	dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
   22834:	e0bff317 	ldw	r2,-52(fp)
   22838:	10808034 	orhi	r2,r2,512
   2283c:	e0bff315 	stw	r2,-52(fp)
   22840:	00000906 	br	22868 <tse_mac_init+0x7e0>
  }
  /* default to 100 Mbps if returned invalid speed */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   22844:	e0fff317 	ldw	r3,-52(fp)
   22848:	00bffdc4 	movi	r2,-9
   2284c:	1884703a 	and	r2,r3,r2
   22850:	e0bff315 	stw	r2,-52(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   22854:	e0fff317 	ldw	r3,-52(fp)
   22858:	00bf8034 	movhi	r2,65024
   2285c:	10bfffc4 	addi	r2,r2,-1
   22860:	1884703a 	and	r2,r3,r2
   22864:	e0bff315 	stw	r2,-52(fp)
  }
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
   22868:	e0bffe17 	ldw	r2,-8(fp)
   2286c:	1000041e 	bne	r2,zero,22880 <tse_mac_init+0x7f8>
    dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   22870:	e0bff317 	ldw	r2,-52(fp)
   22874:	10810014 	ori	r2,r2,1024
   22878:	e0bff315 	stw	r2,-52(fp)
   2287c:	00000406 	br	22890 <tse_mac_init+0x808>
  }
  /* Full Duplex */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   22880:	e0fff317 	ldw	r3,-52(fp)
   22884:	00beffc4 	movi	r2,-1025
   22888:	1884703a 	and	r2,r3,r2
   2288c:	e0bff315 	stw	r2,-52(fp)
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
   22890:	008001b4 	movhi	r2,6
   22894:	10b68a04 	addi	r2,r2,-9688
   22898:	e0ffff17 	ldw	r3,-4(fp)
   2289c:	18c01324 	muli	r3,r3,76
   228a0:	10c5883a 	add	r2,r2,r3
   228a4:	10800104 	addi	r2,r2,4
   228a8:	10800017 	ldw	r2,0(r2)
   228ac:	10800204 	addi	r2,r2,8
   228b0:	e0fff317 	ldw	r3,-52(fp)
   228b4:	10c00035 	stwio	r3,0(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
   228b8:	008001b4 	movhi	r2,6
   228bc:	10b68a04 	addi	r2,r2,-9688
   228c0:	e0ffff17 	ldw	r3,-4(fp)
   228c4:	18c01324 	muli	r3,r3,76
   228c8:	10c5883a 	add	r2,r2,r3
   228cc:	10800104 	addi	r2,r2,4
   228d0:	10800017 	ldw	r2,0(r2)
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
   228d4:	10800204 	addi	r2,r2,8
   228d8:	10800037 	ldwio	r2,0(r2)
   228dc:	01000174 	movhi	r4,5
   228e0:	21372d04 	addi	r4,r4,-9036
   228e4:	100b883a 	mov	r5,r2
   228e8:	00080f80 	call	80f8 <printf>
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
  
                          
#ifdef ALT_INICHE
   /* Set the MAC address */  
   IOWR_ALTERA_TSEMAC_MAC_0(tse[iface].mi.base,
   228ec:	008001b4 	movhi	r2,6
   228f0:	10b68a04 	addi	r2,r2,-9688
   228f4:	e0ffff17 	ldw	r3,-4(fp)
   228f8:	18c01324 	muli	r3,r3,76
   228fc:	10c5883a 	add	r2,r2,r3
   22900:	10800104 	addi	r2,r2,4
   22904:	10800017 	ldw	r2,0(r2)
   22908:	10c00304 	addi	r3,r2,12
   2290c:	008001b4 	movhi	r2,6
   22910:	10b68a04 	addi	r2,r2,-9688
   22914:	e13fff17 	ldw	r4,-4(fp)
   22918:	21001324 	muli	r4,r4,76
   2291c:	1105883a 	add	r2,r2,r4
   22920:	10800604 	addi	r2,r2,24
   22924:	10800003 	ldbu	r2,0(r2)
   22928:	11003fcc 	andi	r4,r2,255
   2292c:	008001b4 	movhi	r2,6
   22930:	10b68a04 	addi	r2,r2,-9688
   22934:	e17fff17 	ldw	r5,-4(fp)
   22938:	29401324 	muli	r5,r5,76
   2293c:	1145883a 	add	r2,r2,r5
   22940:	10800644 	addi	r2,r2,25
   22944:	10800003 	ldbu	r2,0(r2)
   22948:	10803fcc 	andi	r2,r2,255
   2294c:	1004923a 	slli	r2,r2,8
   22950:	2088b03a 	or	r4,r4,r2
   22954:	008001b4 	movhi	r2,6
   22958:	10b68a04 	addi	r2,r2,-9688
   2295c:	e17fff17 	ldw	r5,-4(fp)
   22960:	29401324 	muli	r5,r5,76
   22964:	1145883a 	add	r2,r2,r5
   22968:	10800684 	addi	r2,r2,26
   2296c:	10800003 	ldbu	r2,0(r2)
   22970:	10803fcc 	andi	r2,r2,255
   22974:	1004943a 	slli	r2,r2,16
   22978:	2088b03a 	or	r4,r4,r2
   2297c:	008001b4 	movhi	r2,6
   22980:	10b68a04 	addi	r2,r2,-9688
   22984:	e17fff17 	ldw	r5,-4(fp)
   22988:	29401324 	muli	r5,r5,76
   2298c:	1145883a 	add	r2,r2,r5
   22990:	108006c4 	addi	r2,r2,27
   22994:	10800003 	ldbu	r2,0(r2)
   22998:	10803fcc 	andi	r2,r2,255
   2299c:	1004963a 	slli	r2,r2,24
   229a0:	2084b03a 	or	r2,r4,r2
   229a4:	18800035 	stwio	r2,0(r3)
                           ((int)((unsigned char) tse[iface].mac_addr[0]) | 
                            (int)((unsigned char) tse[iface].mac_addr[1] <<  8) |
                            (int)((unsigned char) tse[iface].mac_addr[2] << 16) | 
                            (int)((unsigned char) tse[iface].mac_addr[3] << 24)));
  
   IOWR_ALTERA_TSEMAC_MAC_1(tse[iface].mi.base, 
   229a8:	008001b4 	movhi	r2,6
   229ac:	10b68a04 	addi	r2,r2,-9688
   229b0:	e0ffff17 	ldw	r3,-4(fp)
   229b4:	18c01324 	muli	r3,r3,76
   229b8:	10c5883a 	add	r2,r2,r3
   229bc:	10800104 	addi	r2,r2,4
   229c0:	10800017 	ldw	r2,0(r2)
   229c4:	10c00404 	addi	r3,r2,16
   229c8:	008001b4 	movhi	r2,6
   229cc:	10b68a04 	addi	r2,r2,-9688
   229d0:	e13fff17 	ldw	r4,-4(fp)
   229d4:	21001324 	muli	r4,r4,76
   229d8:	1105883a 	add	r2,r2,r4
   229dc:	10800704 	addi	r2,r2,28
   229e0:	10800003 	ldbu	r2,0(r2)
   229e4:	11003fcc 	andi	r4,r2,255
   229e8:	008001b4 	movhi	r2,6
   229ec:	10b68a04 	addi	r2,r2,-9688
   229f0:	e17fff17 	ldw	r5,-4(fp)
   229f4:	29401324 	muli	r5,r5,76
   229f8:	1145883a 	add	r2,r2,r5
   229fc:	10800744 	addi	r2,r2,29
   22a00:	10800003 	ldbu	r2,0(r2)
   22a04:	10803fcc 	andi	r2,r2,255
   22a08:	1004923a 	slli	r2,r2,8
   22a0c:	2084b03a 	or	r2,r4,r2
   22a10:	10bfffcc 	andi	r2,r2,65535
   22a14:	18800035 	stwio	r2,0(r3)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
   22a18:	008001b4 	movhi	r2,6
   22a1c:	10b79b04 	addi	r2,r2,-8596
   22a20:	e0ffff17 	ldw	r3,-4(fp)
   22a24:	18c7883a 	add	r3,r3,r3
   22a28:	18c7883a 	add	r3,r3,r3
   22a2c:	10c5883a 	add	r2,r2,r3
   22a30:	10800017 	ldw	r2,0(r2)
   22a34:	10802717 	ldw	r2,156(r2)
   22a38:	00c00044 	movi	r3,1
   22a3c:	10c00615 	stw	r3,24(r2)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
   22a40:	008001b4 	movhi	r2,6
   22a44:	10b79b04 	addi	r2,r2,-8596
   22a48:	e0ffff17 	ldw	r3,-4(fp)
   22a4c:	18c7883a 	add	r3,r3,r3
   22a50:	18c7883a 	add	r3,r3,r3
   22a54:	10c5883a 	add	r2,r2,r3
   22a58:	10800017 	ldw	r2,0(r2)
   22a5c:	10802717 	ldw	r2,156(r2)
   22a60:	00c00044 	movi	r3,1
   22a64:	10c00715 	stw	r3,28(r2)
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
   22a68:	008001b4 	movhi	r2,6
   22a6c:	10b68a04 	addi	r2,r2,-9688
   22a70:	e0ffff17 	ldw	r3,-4(fp)
   22a74:	18c01324 	muli	r3,r3,76
   22a78:	10c5883a 	add	r2,r2,r3
   22a7c:	10800304 	addi	r2,r2,12
   22a80:	11000017 	ldw	r4,0(r2)
        tse[iface].mi.rx_sgdma,
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,
        (void*)(&tse[iface]));
   22a84:	e0bfff17 	ldw	r2,-4(fp)
   22a88:	10c01324 	muli	r3,r2,76
   22a8c:	008001b4 	movhi	r2,6
   22a90:	10b68a04 	addi	r2,r2,-9688
   22a94:	1885883a 	add	r2,r3,r2
   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
   22a98:	014000b4 	movhi	r5,2
   22a9c:	294b7304 	addi	r5,r5,11724
   22aa0:	01800604 	movi	r6,24
   22aa4:	100f883a 	mov	r7,r2
   22aa8:	00213c00 	call	213c0 <alt_avalon_sgdma_register_callback>
        tse[iface].mi.rx_sgdma,
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,
        (void*)(&tse[iface]));
    
  status = tse_sgdma_read_init(&tse[iface]);
   22aac:	e0bfff17 	ldw	r2,-4(fp)
   22ab0:	10c01324 	muli	r3,r2,76
   22ab4:	008001b4 	movhi	r2,6
   22ab8:	10b68a04 	addi	r2,r2,-9688
   22abc:	1885883a 	add	r2,r3,r2
   22ac0:	1009883a 	mov	r4,r2
   22ac4:	0022e7c0 	call	22e7c <tse_sgdma_read_init>
   22ac8:	e0bff815 	stw	r2,-32(fp)
  
  return status;
   22acc:	e0bff817 	ldw	r2,-32(fp)
}
   22ad0:	e037883a 	mov	sp,fp
   22ad4:	dfc00117 	ldw	ra,4(sp)
   22ad8:	df000017 	ldw	fp,0(sp)
   22adc:	dec00204 	addi	sp,sp,8
   22ae0:	f800283a 	ret

00022ae4 <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned data_bytes)
{
   22ae4:	defe6504 	addi	sp,sp,-1644
   22ae8:	dfc19a15 	stw	ra,1640(sp)
   22aec:	df019915 	stw	fp,1636(sp)
   22af0:	df019904 	addi	fp,sp,1636
   22af4:	e13ffd15 	stw	r4,-12(fp)
   22af8:	e17ffe15 	stw	r5,-8(fp)
   22afc:	e1bfff15 	stw	r6,-4(fp)
   int result,i;
   unsigned len = data_bytes;
   22b00:	e0bfff17 	ldw	r2,-4(fp)
   22b04:	e0be6e15 	stw	r2,-1608(fp)

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;
   22b08:	e0bffd17 	ldw	r2,-12(fp)
   22b0c:	10802817 	ldw	r2,160(r2)
   22b10:	e0be6f15 	stw	r2,-1604(fp)

   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse_ptr->tse;
   22b14:	e0be6f17 	ldw	r2,-1604(fp)
   22b18:	10801217 	ldw	r2,72(r2)
   22b1c:	e0be7015 	stw	r2,-1600(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b20:	0005303a 	rdctl	r2,status
   22b24:	e0be7315 	stw	r2,-1588(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b28:	e0fe7317 	ldw	r3,-1588(fp)
   22b2c:	00bfff84 	movi	r2,-2
   22b30:	1884703a 	and	r2,r3,r2
   22b34:	1001703a 	wrctl	status,r2
  
  return context;
   22b38:	e0be7317 	ldw	r2,-1588(fp)
   unsigned int* ActualData;
   int cpu_sr;
   /* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
   char buf2[1560];

   OS_ENTER_CRITICAL();
   22b3c:	e0be7115 	stw	r2,-1596(fp)
   mi = &tse_ptr->mi;
   22b40:	e0be6f17 	ldw	r2,-1604(fp)
   22b44:	10800104 	addi	r2,r2,4
   22b48:	e0be7215 	stw	r2,-1592(fp)
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
   22b4c:	e0be6f17 	ldw	r2,-1604(fp)
   22b50:	10800c17 	ldw	r2,48(r2)
   22b54:	10000926 	beq	r2,zero,22b7c <tse_mac_raw_send+0x98>
   {
      dprintf("raw_send CALLED AGAIN!!!\n");
   22b58:	01000174 	movhi	r4,5
   22b5c:	21373904 	addi	r4,r4,-8988
   22b60:	00083740 	call	8374 <puts>
   22b64:	e0be7117 	ldw	r2,-1596(fp)
   22b68:	e0be7415 	stw	r2,-1584(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22b6c:	e0be7417 	ldw	r2,-1584(fp)
   22b70:	1001703a 	wrctl	status,r2
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
   22b74:	00bffa84 	movi	r2,-22
   22b78:	00008f06 	br	22db8 <tse_mac_raw_send+0x2d4>
   }
 
   tse_ptr->sem = 1;  
   22b7c:	e0be6f17 	ldw	r2,-1604(fp)
   22b80:	00c00044 	movi	r3,1
   22b84:	10c00c15 	stw	r3,48(r2)

   if(((unsigned long)data & 0x03) == 0) 
   22b88:	e0bffe17 	ldw	r2,-8(fp)
   22b8c:	108000cc 	andi	r2,r2,3
   22b90:	1000031e 	bne	r2,zero,22ba0 <tse_mac_raw_send+0xbc>
   { 
      /* 32-bit aligned start, then header starts ETHHDR_BIAS later => 16 bit shift is ok */    
      ActualData = (unsigned int*)data;  /* base driver will detect 16-bit shift. */
   22b94:	e0bffe17 	ldw	r2,-8(fp)
   22b98:	e0be6d15 	stw	r2,-1612(fp)
   22b9c:	00001406 	br	22bf0 <tse_mac_raw_send+0x10c>
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
   22ba0:	e03e6c15 	stw	zero,-1616(fp)
   22ba4:	00000d06 	br	22bdc <tse_mac_raw_send+0xf8>
         buf2[i] = IORD_8DIRECT(&data[i], 0);
   22ba8:	e0be6c17 	ldw	r2,-1616(fp)
   22bac:	e0fffe17 	ldw	r3,-8(fp)
   22bb0:	1885883a 	add	r2,r3,r2
   22bb4:	10800023 	ldbuio	r2,0(r2)
   22bb8:	10803fcc 	andi	r2,r2,255
   22bbc:	1009883a 	mov	r4,r2
   22bc0:	e0fe7704 	addi	r3,fp,-1572
   22bc4:	e0be6c17 	ldw	r2,-1616(fp)
   22bc8:	1885883a 	add	r2,r3,r2
   22bcc:	11000005 	stb	r4,0(r2)
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
   22bd0:	e0be6c17 	ldw	r2,-1616(fp)
   22bd4:	10800044 	addi	r2,r2,1
   22bd8:	e0be6c15 	stw	r2,-1616(fp)
   22bdc:	e0fe6c17 	ldw	r3,-1616(fp)
   22be0:	e0be6e17 	ldw	r2,-1608(fp)
   22be4:	18bff036 	bltu	r3,r2,22ba8 <__alt_mem_descriptor_memory+0xdefe2ba8>
         buf2[i] = IORD_8DIRECT(&data[i], 0);
      }
      ActualData = (unsigned int*)buf2;
   22be8:	e0be7704 	addi	r2,fp,-1572
   22bec:	e0be6d15 	stw	r2,-1612(fp)
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
   22bf0:	e13e6d17 	ldw	r4,-1612(fp)
   22bf4:	01400104 	movi	r5,4
   22bf8:	003a5200 	call	3a520 <alt_remap_cached>
   22bfc:	e0be6d15 	stw	r2,-1612(fp)

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
   22c00:	e0be7017 	ldw	r2,-1600(fp)
   22c04:	10800903 	ldbu	r2,36(r2)
   22c08:	10803fcc 	andi	r2,r2,255
   22c0c:	10800058 	cmpnei	r2,r2,1
   22c10:	1000251e 	bne	r2,zero,22ca8 <tse_mac_raw_send+0x1c4>
   22c14:	e0be6e17 	ldw	r2,-1608(fp)
   22c18:	108003f0 	cmpltui	r2,r2,15
   22c1c:	1000221e 	bne	r2,zero,22ca8 <tse_mac_raw_send+0x1c4>
   22c20:	e0be6f17 	ldw	r2,-1604(fp)
   22c24:	10800d17 	ldw	r2,52(r2)
   22c28:	1085883a 	add	r2,r2,r2
   22c2c:	1085883a 	add	r2,r2,r2
   22c30:	1007883a 	mov	r3,r2
   22c34:	e0be7017 	ldw	r2,-1600(fp)
   22c38:	10800b17 	ldw	r2,44(r2)
   22c3c:	1885883a 	add	r2,r3,r2
   22c40:	10800037 	ldwio	r2,0(r2)
   22c44:	10800388 	cmpgei	r2,r2,14
   22c48:	1000171e 	bne	r2,zero,22ca8 <tse_mac_raw_send+0x1c4>
   {
        /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
   22c4c:	e0be6f17 	ldw	r2,-1604(fp)
   22c50:	11000f17 	ldw	r4,60(r2)
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
   22c54:	e0be6f17 	ldw	r2,-1604(fp)
   22c58:	10800f17 	ldw	r2,60(r2)

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
   {
        /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
   22c5c:	11400804 	addi	r5,r2,32
   22c60:	e0be6e17 	ldw	r2,-1608(fp)
   22c64:	10ffffcc 	andi	r3,r2,65535
   22c68:	d8000015 	stw	zero,0(sp)
   22c6c:	00800044 	movi	r2,1
   22c70:	d8800115 	stw	r2,4(sp)
   22c74:	00800044 	movi	r2,1
   22c78:	d8800215 	stw	r2,8(sp)
   22c7c:	d8000315 	stw	zero,12(sp)
   22c80:	e1be6d17 	ldw	r6,-1612(fp)
   22c84:	180f883a 	mov	r7,r3
   22c88:	00212c00 	call	212c0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           0,                                        // don't read from constant address
           1,                                        // generate sop
           1,                                        // generate endofpacket signal
           0);                                       // atlantic channel (don't know/don't care: set to 0)

        tse_mac_sTxWrite(mi,tse_ptr->desc);
   22c8c:	e0be6f17 	ldw	r2,-1604(fp)
   22c90:	10800f17 	ldw	r2,60(r2)
   22c94:	e13e7217 	ldw	r4,-1592(fp)
   22c98:	100b883a 	mov	r5,r2
   22c9c:	00010080 	call	1008 <tse_mac_sTxWrite>
        result = 0;
   22ca0:	e03e6b15 	stw	zero,-1620(fp)
   22ca4:	00001c06 	br	22d18 <tse_mac_raw_send+0x234>
   }
   else if( len > ALTERA_TSE_MIN_MTU_SIZE ) {    
   22ca8:	e0be6e17 	ldw	r2,-1608(fp)
   22cac:	108003f0 	cmpltui	r2,r2,15
   22cb0:	1000171e 	bne	r2,zero,22d10 <tse_mac_raw_send+0x22c>

       /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
   22cb4:	e0be6f17 	ldw	r2,-1604(fp)
   22cb8:	11000f17 	ldw	r4,60(r2)
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
   22cbc:	e0be6f17 	ldw	r2,-1604(fp)
   22cc0:	10800f17 	ldw	r2,60(r2)
        result = 0;
   }
   else if( len > ALTERA_TSE_MIN_MTU_SIZE ) {    

       /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
   22cc4:	11400804 	addi	r5,r2,32
   22cc8:	e0be6e17 	ldw	r2,-1608(fp)
   22ccc:	10ffffcc 	andi	r3,r2,65535
   22cd0:	d8000015 	stw	zero,0(sp)
   22cd4:	00800044 	movi	r2,1
   22cd8:	d8800115 	stw	r2,4(sp)
   22cdc:	00800044 	movi	r2,1
   22ce0:	d8800215 	stw	r2,8(sp)
   22ce4:	d8000315 	stw	zero,12(sp)
   22ce8:	e1be6d17 	ldw	r6,-1612(fp)
   22cec:	180f883a 	mov	r7,r3
   22cf0:	00212c00 	call	212c0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           1,                                        // generate sop
           1,                                        // generate endofpacket signal
           0);                                       // atlantic channel (don't know/don't care: set to 0)
                  
    
       tse_mac_sTxWrite(mi,tse_ptr->desc);
   22cf4:	e0be6f17 	ldw	r2,-1604(fp)
   22cf8:	10800f17 	ldw	r2,60(r2)
   22cfc:	e13e7217 	ldw	r4,-1592(fp)
   22d00:	100b883a 	mov	r5,r2
   22d04:	00010080 	call	1008 <tse_mac_sTxWrite>
       result = 0;
   22d08:	e03e6b15 	stw	zero,-1620(fp)
   22d0c:	00000206 	br	22d18 <tse_mac_raw_send+0x234>

   } else {
       result = -3;
   22d10:	00bfff44 	movi	r2,-3
   22d14:	e0be6b15 	stw	r2,-1620(fp)
   }

   if(result < 0)   /* SGDMA not available */
   22d18:	e0be6b17 	ldw	r2,-1620(fp)
   22d1c:	1000120e 	bge	r2,zero,22d68 <tse_mac_raw_send+0x284>
   {
      dprintf("raw_send() SGDMA not available, ret=%d, len=%d\n",result, len);
   22d20:	01000174 	movhi	r4,5
   22d24:	21374004 	addi	r4,r4,-8960
   22d28:	e17e6b17 	ldw	r5,-1620(fp)
   22d2c:	e1be6e17 	ldw	r6,-1608(fp)
   22d30:	00080f80 	call	80f8 <printf>
      net->n_mib->ifOutDiscards++;
   22d34:	e0bffd17 	ldw	r2,-12(fp)
   22d38:	10802717 	ldw	r2,156(r2)
   22d3c:	10c01217 	ldw	r3,72(r2)
   22d40:	18c00044 	addi	r3,r3,1
   22d44:	10c01215 	stw	r3,72(r2)
      tse_ptr->sem = 0;
   22d48:	e0be6f17 	ldw	r2,-1604(fp)
   22d4c:	10000c15 	stw	zero,48(r2)
   22d50:	e0be7117 	ldw	r2,-1596(fp)
   22d54:	e0be7515 	stw	r2,-1580(fp)
   22d58:	e0be7517 	ldw	r2,-1580(fp)
   22d5c:	1001703a 	wrctl	status,r2

      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
   22d60:	00bffa84 	movi	r2,-22
   22d64:	00001406 	br	22db8 <tse_mac_raw_send+0x2d4>
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
   22d68:	e0bffd17 	ldw	r2,-12(fp)
   22d6c:	10802717 	ldw	r2,156(r2)
   22d70:	e0fffd17 	ldw	r3,-12(fp)
   22d74:	18c02717 	ldw	r3,156(r3)
   22d78:	19000f17 	ldw	r4,60(r3)
   22d7c:	e0ffff17 	ldw	r3,-4(fp)
   22d80:	20c7883a 	add	r3,r4,r3
   22d84:	10c00f15 	stw	r3,60(r2)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
   22d88:	e0bffd17 	ldw	r2,-12(fp)
   22d8c:	10802717 	ldw	r2,156(r2)
   22d90:	10c01017 	ldw	r3,64(r2)
   22d94:	18c00044 	addi	r3,r3,1
   22d98:	10c01015 	stw	r3,64(r2)
      tse_ptr->sem = 0;
   22d9c:	e0be6f17 	ldw	r2,-1604(fp)
   22da0:	10000c15 	stw	zero,48(r2)
   22da4:	e0be7117 	ldw	r2,-1596(fp)
   22da8:	e0be7615 	stw	r2,-1576(fp)
   22dac:	e0be7617 	ldw	r2,-1576(fp)
   22db0:	1001703a 	wrctl	status,r2

      OS_EXIT_CRITICAL();
      return SUCCESS;  /*success */
   22db4:	0005883a 	mov	r2,zero
   }
}
   22db8:	e037883a 	mov	sp,fp
   22dbc:	dfc00117 	ldw	ra,4(sp)
   22dc0:	df000017 	ldw	fp,0(sp)
   22dc4:	dec00204 	addi	sp,sp,8
   22dc8:	f800283a 	ret

00022dcc <tse_sgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
   22dcc:	defffa04 	addi	sp,sp,-24
   22dd0:	dfc00515 	stw	ra,20(sp)
   22dd4:	df000415 	stw	fp,16(sp)
   22dd8:	df000404 	addi	fp,sp,16
   22ddc:	e13fff15 	stw	r4,-4(fp)
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
   22de0:	e0bfff17 	ldw	r2,-4(fp)
   22de4:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 sgdma_status;
  
  /* Capture whether there are existing packets on stack rcv queue */
  int initial_rcvdq_len = rcvdq.q_len;
   22de8:	008001b4 	movhi	r2,6
   22dec:	10b6d604 	addi	r2,r2,-9384
   22df0:	10800217 	ldw	r2,8(r2)
   22df4:	e0bffd15 	stw	r2,-12(fp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  sgdma_status = IORD_ALTERA_AVALON_SGDMA_STATUS(tse_ptr->mi.rx_sgdma->base);
   22df8:	e0bffc17 	ldw	r2,-16(fp)
   22dfc:	10800317 	ldw	r2,12(r2)
   22e00:	10800317 	ldw	r2,12(r2)
   22e04:	10800037 	ldwio	r2,0(r2)
   22e08:	e0bffe05 	stb	r2,-8(fp)
  
  /* Why are we here; should we be? */
  if(sgdma_status & (ALTERA_AVALON_SGDMA_STATUS_CHAIN_COMPLETED_MSK | 
   22e0c:	e0bffe03 	ldbu	r2,-8(fp)
   22e10:	1080030c 	andi	r2,r2,12
   22e14:	10001426 	beq	r2,zero,22e68 <tse_sgdmaRx_isr+0x9c>
                     ALTERA_AVALON_SGDMA_STATUS_DESC_COMPLETED_MSK) ) {
    /* Handle received packet(s) */
    tse_mac_rcv(tse_ptr); 
   22e18:	e13ffc17 	ldw	r4,-16(fp)
   22e1c:	00230280 	call	23028 <tse_mac_rcv>
        tse_ptr->mi.rx_sgdma, 
        &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    }
#else
    /* Re-start SGDMA (always, if we have a single descriptor) */
    alt_avalon_sgdma_do_async_transfer(
   22e20:	e0bffc17 	ldw	r2,-16(fp)
   22e24:	10c00317 	ldw	r3,12(r2)
      tse_ptr->mi.rx_sgdma, 
      &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
   22e28:	e0bffc17 	ldw	r2,-16(fp)
   22e2c:	10800f17 	ldw	r2,60(r2)
        tse_ptr->mi.rx_sgdma, 
        &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    }
#else
    /* Re-start SGDMA (always, if we have a single descriptor) */
    alt_avalon_sgdma_do_async_transfer(
   22e30:	10801004 	addi	r2,r2,64
   22e34:	1809883a 	mov	r4,r3
   22e38:	100b883a 	mov	r5,r2
   22e3c:	0020ecc0 	call	20ecc <alt_avalon_sgdma_do_async_transfer>
      tse_ptr->mi.rx_sgdma, 
      &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
#endif
  
    /* Wake up Niche stack if there are new packets are on queue */
    if ((rcvdq.q_len) > initial_rcvdq_len) {
   22e40:	008001b4 	movhi	r2,6
   22e44:	10b6d604 	addi	r2,r2,-9384
   22e48:	10800217 	ldw	r2,8(r2)
   22e4c:	e0fffd17 	ldw	r3,-12(fp)
   22e50:	1880050e 	bge	r3,r2,22e68 <tse_sgdmaRx_isr+0x9c>
      SignalPktDemux();
   22e54:	00800174 	movhi	r2,5
   22e58:	108fc104 	addi	r2,r2,16132
   22e5c:	10800017 	ldw	r2,0(r2)
   22e60:	1009883a 	mov	r4,r2
   22e64:	001dd180 	call	1dd18 <OSSemPost>
    }  
  } /* if (valid SGDMA interrupt) */
}
   22e68:	e037883a 	mov	sp,fp
   22e6c:	dfc00117 	ldw	ra,4(sp)
   22e70:	df000017 	ldw	fp,0(sp)
   22e74:	dec00204 	addi	sp,sp,8
   22e78:	f800283a 	ret

00022e7c <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
   22e7c:	defffa04 	addi	sp,sp,-24
   22e80:	dfc00515 	stw	ra,20(sp)
   22e84:	df000415 	stw	fp,16(sp)
   22e88:	dc000315 	stw	r16,12(sp)
   22e8c:	df000404 	addi	fp,sp,16
   22e90:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
   22e94:	e0bffe17 	ldw	r2,-8(fp)
   22e98:	10000e15 	stw	zero,56(r2)
   22e9c:	00004406 	br	22fb0 <tse_sgdma_read_init+0x134>
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
   22ea0:	e0bffe17 	ldw	r2,-8(fp)
   22ea4:	14000e17 	ldw	r16,56(r2)
   22ea8:	01017f04 	movi	r4,1532
   22eac:	002a53c0 	call	2a53c <pk_alloc>
   22eb0:	1009883a 	mov	r4,r2
   22eb4:	e0fffe17 	ldw	r3,-8(fp)
   22eb8:	80800444 	addi	r2,r16,17
   22ebc:	1085883a 	add	r2,r2,r2
   22ec0:	1085883a 	add	r2,r2,r2
   22ec4:	1885883a 	add	r2,r3,r2
   22ec8:	11000015 	stw	r4,0(r2)
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	10800e17 	ldw	r2,56(r2)
   22ed4:	e0fffe17 	ldw	r3,-8(fp)
   22ed8:	10800444 	addi	r2,r2,17
   22edc:	1085883a 	add	r2,r2,r2
   22ee0:	1085883a 	add	r2,r2,r2
   22ee4:	1885883a 	add	r2,r3,r2
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	10000b1e 	bne	r2,zero,22f1c <tse_sgdma_read_init+0xa0>
    {
      dprintf("[tse_sgdma_read_init] Fatal error: No free packet buffers for RX\n");
   22ef0:	01000174 	movhi	r4,5
   22ef4:	21374c04 	addi	r4,r4,-8912
   22ef8:	00083740 	call	8374 <puts>
      tse_ptr->netp->n_mib->ifInDiscards++;
   22efc:	e0bffe17 	ldw	r2,-8(fp)
   22f00:	10800817 	ldw	r2,32(r2)
   22f04:	10802717 	ldw	r2,156(r2)
   22f08:	10c00c17 	ldw	r3,48(r2)
   22f0c:	18c00044 	addi	r3,r3,1
   22f10:	10c00c15 	stw	r3,48(r2)
      
      return ENP_NOBUFFER;
   22f14:	00bffac4 	movi	r2,-21
   22f18:	00003d06 	br	23010 <tse_sgdma_read_init+0x194>
    }
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
   22f1c:	e0bffe17 	ldw	r2,-8(fp)
   22f20:	10800e17 	ldw	r2,56(r2)
   22f24:	e0fffe17 	ldw	r3,-8(fp)
   22f28:	10800444 	addi	r2,r2,17
   22f2c:	1085883a 	add	r2,r2,r2
   22f30:	1085883a 	add	r2,r2,r2
   22f34:	1885883a 	add	r2,r3,r2
   22f38:	10800017 	ldw	r2,0(r2)
   22f3c:	10800117 	ldw	r2,4(r2)
   22f40:	1009883a 	mov	r4,r2
   22f44:	01400104 	movi	r5,4
   22f48:	003a5200 	call	3a520 <alt_remap_cached>
   22f4c:	e0bffd15 	stw	r2,-12(fp)

    alt_avalon_sgdma_construct_stream_to_mem_desc(
            (alt_sgdma_descriptor *) &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
   22f50:	e0bffe17 	ldw	r2,-8(fp)
   22f54:	10c00f17 	ldw	r3,60(r2)
   22f58:	e0bffe17 	ldw	r2,-8(fp)
   22f5c:	10800e17 	ldw	r2,56(r2)
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);

    alt_avalon_sgdma_construct_stream_to_mem_desc(
   22f60:	10800084 	addi	r2,r2,2
   22f64:	1004917a 	slli	r2,r2,5
   22f68:	1889883a 	add	r4,r3,r2
            (alt_sgdma_descriptor *) &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
            (alt_sgdma_descriptor *) &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST], // pointer to "next"
   22f6c:	e0bffe17 	ldw	r2,-8(fp)
   22f70:	10c00f17 	ldw	r3,60(r2)
   22f74:	e0bffe17 	ldw	r2,-8(fp)
   22f78:	10800e17 	ldw	r2,56(r2)
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);

    alt_avalon_sgdma_construct_stream_to_mem_desc(
   22f7c:	108000c4 	addi	r2,r2,3
   22f80:	1004917a 	slli	r2,r2,5
   22f84:	1885883a 	add	r2,r3,r2
   22f88:	d8000015 	stw	zero,0(sp)
   22f8c:	100b883a 	mov	r5,r2
   22f90:	e1bffd17 	ldw	r6,-12(fp)
   22f94:	000f883a 	mov	r7,zero
   22f98:	00211f00 	call	211f0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
   22f9c:	e0bffe17 	ldw	r2,-8(fp)
   22fa0:	10800e17 	ldw	r2,56(r2)
   22fa4:	10c00044 	addi	r3,r2,1
   22fa8:	e0bffe17 	ldw	r2,-8(fp)
   22fac:	10c00e15 	stw	r3,56(r2)
   22fb0:	e0bffe17 	ldw	r2,-8(fp)
   22fb4:	10800e17 	ldw	r2,56(r2)
   22fb8:	00bfb90e 	bge	zero,r2,22ea0 <__alt_mem_descriptor_memory+0xdefe2ea0>
            0,                          // read until EOP
            0);                         // don't write to constant address

  } // for

  dprintf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n", 
   22fbc:	e0bffe17 	ldw	r2,-8(fp)
   22fc0:	10800e17 	ldw	r2,56(r2)
   22fc4:	01000174 	movhi	r4,5
   22fc8:	21375d04 	addi	r4,r4,-8844
   22fcc:	100b883a 	mov	r5,r2
   22fd0:	00080f80 	call	80f8 <printf>
    tse_ptr->chain_loop);
   
  tse_ptr->chain_loop = 0;
   22fd4:	e0bffe17 	ldw	r2,-8(fp)
   22fd8:	10000e15 	stw	zero,56(r2)
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
   22fdc:	e0bffe17 	ldw	r2,-8(fp)
   22fe0:	10800f17 	ldw	r2,60(r2)
   22fe4:	10c01004 	addi	r3,r2,64
   22fe8:	e0bffe17 	ldw	r2,-8(fp)
   22fec:	10c01015 	stw	r3,64(r2)

  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->currdescriptor_ptr);
   22ff0:	e0bffe17 	ldw	r2,-8(fp)
   22ff4:	10c00104 	addi	r3,r2,4
   22ff8:	e0bffe17 	ldw	r2,-8(fp)
   22ffc:	10801017 	ldw	r2,64(r2)
   23000:	1809883a 	mov	r4,r3
   23004:	100b883a 	mov	r5,r2
   23008:	00010ec0 	call	10ec <tse_mac_aRxRead>
  
  return SUCCESS;
   2300c:	0005883a 	mov	r2,zero
}
   23010:	e6ffff04 	addi	sp,fp,-4
   23014:	dfc00217 	ldw	ra,8(sp)
   23018:	df000117 	ldw	fp,4(sp)
   2301c:	dc000017 	ldw	r16,0(sp)
   23020:	dec00304 	addi	sp,sp,12
   23024:	f800283a 	ret

00023028 <tse_mac_rcv>:
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

ALT_INLINE void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
   23028:	defff704 	addi	sp,sp,-36
   2302c:	dfc00815 	stw	ra,32(sp)
   23030:	df000715 	stw	fp,28(sp)
   23034:	df000704 	addi	fp,sp,28
   23038:	e13fff15 	stw	r4,-4(fp)
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
    &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
   2303c:	e0bfff17 	ldw	r2,-4(fp)
   23040:	10c00f17 	ldw	r3,60(r2)
   23044:	e0bfff17 	ldw	r2,-4(fp)
   23048:	10800e17 	ldw	r2,56(r2)
   2304c:	10800084 	addi	r2,r2,2
   23050:	1004917a 	slli	r2,r2,5
   23054:	1887883a 	add	r3,r3,r2
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
   23058:	e0bfff17 	ldw	r2,-4(fp)
   2305c:	10c01015 	stw	r3,64(r2)
    &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
  
  /* Grab status bits from descriptor under test. Bypass cache */
  desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
   23060:	e0bfff17 	ldw	r2,-4(fp)
   23064:	10801017 	ldw	r2,64(r2)
   23068:	10800704 	addi	r2,r2,28
   2306c:	10800037 	ldwio	r2,0(r2)
   23070:	1005d43a 	srai	r2,r2,16
   23074:	e0bff905 	stb	r2,-28(fp)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
   23078:	e0bfff17 	ldw	r2,-4(fp)
   2307c:	10801017 	ldw	r2,64(r2)
   23080:	10800704 	addi	r2,r2,28
   23084:	1080002b 	ldhuio	r2,0(r2)
   23088:	10bfffcc 	andi	r2,r2,65535
   2308c:	10bfff84 	addi	r2,r2,-2
   23090:	e0bffa15 	stw	r2,-24(fp)
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
   23094:	e0bfff17 	ldw	r2,-4(fp)
   23098:	10800817 	ldw	r2,32(r2)
   2309c:	10802717 	ldw	r2,156(r2)
   230a0:	e0ffff17 	ldw	r3,-4(fp)
   230a4:	18c00817 	ldw	r3,32(r3)
   230a8:	18c02717 	ldw	r3,156(r3)
   230ac:	19000917 	ldw	r4,36(r3)
   230b0:	e0fffa17 	ldw	r3,-24(fp)
   230b4:	20c7883a 	add	r3,r4,r3
   230b8:	10c00915 	stw	r3,36(r2)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
   230bc:	e0bfff17 	ldw	r2,-4(fp)
   230c0:	10800e17 	ldw	r2,56(r2)
   230c4:	e0ffff17 	ldw	r3,-4(fp)
   230c8:	10800444 	addi	r2,r2,17
   230cc:	1085883a 	add	r2,r2,r2
   230d0:	1085883a 	add	r2,r2,r2
   230d4:	1885883a 	add	r2,r3,r2
   230d8:	10800017 	ldw	r2,0(r2)
   230dc:	e0bffb15 	stw	r2,-20(fp)
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
   230e0:	e0bffb17 	ldw	r2,-20(fp)
   230e4:	10800117 	ldw	r2,4(r2)
   230e8:	10c00404 	addi	r3,r2,16
   230ec:	e0bffb17 	ldw	r2,-20(fp)
   230f0:	10c00315 	stw	r3,12(r2)
    rx_packet->nb_plen = pklen - 14;
   230f4:	e0bffa17 	ldw	r2,-24(fp)
   230f8:	10bffc84 	addi	r2,r2,-14
   230fc:	1007883a 	mov	r3,r2
   23100:	e0bffb17 	ldw	r2,-20(fp)
   23104:	10c00415 	stw	r3,16(r2)
    rx_packet->nb_tstamp = cticks;
   23108:	00800174 	movhi	r2,5
   2310c:	108fbe04 	addi	r2,r2,16120
   23110:	10800017 	ldw	r2,0(r2)
   23114:	1007883a 	mov	r3,r2
   23118:	e0bffb17 	ldw	r2,-20(fp)
   2311c:	10c00515 	stw	r3,20(r2)
    rx_packet->net = tse_ptr->netp;
   23120:	e0bfff17 	ldw	r2,-4(fp)
   23124:	10c00817 	ldw	r3,32(r2)
   23128:	e0bffb17 	ldw	r2,-20(fp)
   2312c:	10c00615 	stw	r3,24(r2)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
   23130:	e0bffb17 	ldw	r2,-20(fp)
   23134:	10800117 	ldw	r2,4(r2)
   23138:	10800084 	addi	r2,r2,2
   2313c:	e0bffc15 	stw	r2,-16(fp)
    rx_packet->type = eth->e_type;
   23140:	e0bffc17 	ldw	r2,-16(fp)
   23144:	10c0030b 	ldhu	r3,12(r2)
   23148:	e0bffb17 	ldw	r2,-20(fp)
   2314c:	10c0080d 	sth	r3,32(r2)
    
    if( (desc_status & 
   23150:	e0bff903 	ldbu	r2,-28(fp)
   23154:	10801fcc 	andi	r2,r2,127
   23158:	1000251e 	bne	r2,zero,231f0 <tse_mac_rcv+0x1c8>
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
   2315c:	01017f04 	movi	r4,1532
   23160:	002a53c0 	call	2a53c <pk_alloc>
   23164:	e0bffd15 	stw	r2,-12(fp)
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
   23168:	e0bffd17 	ldw	r2,-12(fp)
   2316c:	10000a1e 	bne	r2,zero,23198 <tse_mac_rcv+0x170>
        dprintf("No free buffers for rx\n");
   23170:	01000174 	movhi	r4,5
   23174:	21376e04 	addi	r4,r4,-8776
   23178:	00083740 	call	8374 <puts>
        tse_ptr->netp->n_mib->ifInDiscards++;
   2317c:	e0bfff17 	ldw	r2,-4(fp)
   23180:	10800817 	ldw	r2,32(r2)
   23184:	10802717 	ldw	r2,156(r2)
   23188:	10c00c17 	ldw	r3,48(r2)
   2318c:	18c00044 	addi	r3,r3,1
   23190:	10c00c15 	stw	r3,48(r2)
   23194:	00001906 	br	231fc <tse_mac_rcv+0x1d4>
      }
      else {
        putq(&rcvdq, tse_ptr->pkt_array[tse_ptr->chain_loop]);
   23198:	e0bfff17 	ldw	r2,-4(fp)
   2319c:	10800e17 	ldw	r2,56(r2)
   231a0:	e0ffff17 	ldw	r3,-4(fp)
   231a4:	10800444 	addi	r2,r2,17
   231a8:	1085883a 	add	r2,r2,r2
   231ac:	1085883a 	add	r2,r2,r2
   231b0:	1885883a 	add	r2,r3,r2
   231b4:	10800017 	ldw	r2,0(r2)
   231b8:	010001b4 	movhi	r4,6
   231bc:	2136d604 	addi	r4,r4,-9384
   231c0:	100b883a 	mov	r5,r2
   231c4:	002aacc0 	call	2aacc <putq>
        tse_ptr->pkt_array[tse_ptr->chain_loop] = replacement_pkt;
   231c8:	e0bfff17 	ldw	r2,-4(fp)
   231cc:	10800e17 	ldw	r2,56(r2)
   231d0:	e0ffff17 	ldw	r3,-4(fp)
   231d4:	10800444 	addi	r2,r2,17
   231d8:	1085883a 	add	r2,r2,r2
   231dc:	1085883a 	add	r2,r2,r2
   231e0:	1885883a 	add	r2,r3,r2
   231e4:	e0fffd17 	ldw	r3,-12(fp)
   231e8:	10c00015 	stw	r3,0(r2)
   231ec:	00000306 	br	231fc <tse_mac_rcv+0x1d4>
      }
    } /* if(descriptor had no errors) */ 
    else {
      dprintf("RX descriptor reported error. packet dropped\n");
   231f0:	01000174 	movhi	r4,5
   231f4:	21377404 	addi	r4,r4,-8752
   231f8:	00083740 	call	8374 <puts>
    }     
             
    uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
   231fc:	e0bfff17 	ldw	r2,-4(fp)
   23200:	10800e17 	ldw	r2,56(r2)
   23204:	e0ffff17 	ldw	r3,-4(fp)
   23208:	10800444 	addi	r2,r2,17
   2320c:	1085883a 	add	r2,r2,r2
   23210:	1085883a 	add	r2,r2,r2
   23214:	1885883a 	add	r2,r3,r2
   23218:	10800017 	ldw	r2,0(r2)
   2321c:	10800117 	ldw	r2,4(r2)
   23220:	1009883a 	mov	r4,r2
   23224:	01400104 	movi	r5,4
   23228:	003a5200 	call	3a520 <alt_remap_cached>
   2322c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Re-cycle previously constructed SGDMA buffer directly rather
     * than calling the SGDMA utility routines. This saves some call/return
     * overhead and only does cache-bypass writes of what we need
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->write_addr, 0, 
   23230:	e0bfff17 	ldw	r2,-4(fp)
   23234:	10801017 	ldw	r2,64(r2)
   23238:	10800204 	addi	r2,r2,8
   2323c:	e0fffe17 	ldw	r3,-8(fp)
   23240:	10c00035 	stwio	r3,0(r2)
     *   |31...24|23..16|15.....................0|
     *   |control|status|actual_bytes_transferred|
     * 
     * Set relevant control bits and ensure the rest are cleared.
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0, 
   23244:	e0bfff17 	ldw	r2,-4(fp)
   23248:	10801017 	ldw	r2,64(r2)
   2324c:	10800704 	addi	r2,r2,28
   23250:	00e04034 	movhi	r3,33024
   23254:	10c00035 	stwio	r3,0(r2)
    
    /* Grab next descriptor status */
    desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
#endif
  } /* while (descriptor terminated by EOP) */
} 
   23258:	e037883a 	mov	sp,fp
   2325c:	dfc00117 	ldw	ra,4(sp)
   23260:	df000017 	ldw	fp,0(sp)
   23264:	dec00204 	addi	sp,sp,8
   23268:	f800283a 	ret

0002326c <tse_mac_stats>:

int tse_mac_stats(void * pio, int iface)
{
   2326c:	defffc04 	addi	sp,sp,-16
   23270:	dfc00315 	stw	ra,12(sp)
   23274:	df000215 	stw	fp,8(sp)
   23278:	df000204 	addi	fp,sp,8
   2327c:	e13ffe15 	stw	r4,-8(fp)
   23280:	e17fff15 	stw	r5,-4(fp)
   ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
   23284:	e13ffe17 	ldw	r4,-8(fp)
   23288:	01400174 	movhi	r5,5
   2328c:	29778004 	addi	r5,r5,-8704
   23290:	002694c0 	call	2694c <ns_printf>
   return SUCCESS;
   23294:	0005883a 	mov	r2,zero
}
   23298:	e037883a 	mov	sp,fp
   2329c:	dfc00117 	ldw	ra,4(sp)
   232a0:	df000017 	ldw	fp,0(sp)
   232a4:	dec00204 	addi	sp,sp,8
   232a8:	f800283a 	ret

000232ac <tse_mac_close>:
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
   232ac:	defffc04 	addi	sp,sp,-16
   232b0:	dfc00315 	stw	ra,12(sp)
   232b4:	df000215 	stw	fp,8(sp)
   232b8:	df000204 	addi	fp,sp,8
   232bc:	e13fff15 	stw	r4,-4(fp)
  int state;
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
   232c0:	008001b4 	movhi	r2,6
   232c4:	10b79b04 	addi	r2,r2,-8596
   232c8:	e0ffff17 	ldw	r3,-4(fp)
   232cc:	18c7883a 	add	r3,r3,r3
   232d0:	18c7883a 	add	r3,r3,r3
   232d4:	10c5883a 	add	r2,r2,r3
   232d8:	10800017 	ldw	r2,0(r2)
   232dc:	10802717 	ldw	r2,156(r2)
   232e0:	00c00084 	movi	r3,2
   232e4:	10c00615 	stw	r3,24(r2)

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
   232e8:	008001b4 	movhi	r2,6
   232ec:	10b68a04 	addi	r2,r2,-9688
   232f0:	e0ffff17 	ldw	r3,-4(fp)
   232f4:	18c01324 	muli	r3,r3,76
   232f8:	10c5883a 	add	r2,r2,r3
   232fc:	10800304 	addi	r2,r2,12
   23300:	10800017 	ldw	r2,0(r2)
   23304:	1009883a 	mov	r4,r2
   23308:	000b883a 	mov	r5,zero
   2330c:	000d883a 	mov	r6,zero
   23310:	000f883a 	mov	r7,zero
   23314:	00213c00 	call	213c0 <alt_avalon_sgdma_register_callback>
   
  /* Disable Receive path on the device*/
  state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
   23318:	008001b4 	movhi	r2,6
   2331c:	10b68a04 	addi	r2,r2,-9688
   23320:	e0ffff17 	ldw	r3,-4(fp)
   23324:	18c01324 	muli	r3,r3,76
   23328:	10c5883a 	add	r2,r2,r3
   2332c:	10800104 	addi	r2,r2,4
   23330:	10800017 	ldw	r2,0(r2)
   23334:	10800204 	addi	r2,r2,8
   23338:	10800037 	ldwio	r2,0(r2)
   2333c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
   23340:	008001b4 	movhi	r2,6
   23344:	10b68a04 	addi	r2,r2,-9688
   23348:	e0ffff17 	ldw	r3,-4(fp)
   2334c:	18c01324 	muli	r3,r3,76
   23350:	10c5883a 	add	r2,r2,r3
   23354:	10800104 	addi	r2,r2,4
   23358:	10800017 	ldw	r2,0(r2)
   2335c:	10800204 	addi	r2,r2,8
   23360:	e13ffe17 	ldw	r4,-8(fp)
   23364:	00ffff44 	movi	r3,-3
   23368:	20c6703a 	and	r3,r4,r3
   2336c:	10c00035 	stwio	r3,0(r2)
  
  /* status = down */                                     
  nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
   23370:	008001b4 	movhi	r2,6
   23374:	10b79b04 	addi	r2,r2,-8596
   23378:	e0ffff17 	ldw	r3,-4(fp)
   2337c:	18c7883a 	add	r3,r3,r3
   23380:	18c7883a 	add	r3,r3,r3
   23384:	10c5883a 	add	r2,r2,r3
   23388:	10800017 	ldw	r2,0(r2)
   2338c:	10802717 	ldw	r2,156(r2)
   23390:	00c00084 	movi	r3,2
   23394:	10c00715 	stw	r3,28(r2)

  return SUCCESS;
   23398:	0005883a 	mov	r2,zero
}
   2339c:	e037883a 	mov	sp,fp
   233a0:	dfc00117 	ldw	ra,4(sp)
   233a4:	df000017 	ldw	fp,0(sp)
   233a8:	dec00204 	addi	sp,sp,8
   233ac:	f800283a 	ret

000233b0 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
   233b0:	defffd04 	addi	sp,sp,-12
   233b4:	dfc00215 	stw	ra,8(sp)
   233b8:	df000115 	stw	fp,4(sp)
   233bc:	df000104 	addi	fp,sp,4
   233c0:	e13fff15 	stw	r4,-4(fp)
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
   233c4:	e0bfff17 	ldw	r2,-4(fp)
   233c8:	10800808 	cmpgei	r2,r2,32
   233cc:	1000031e 	bne	r2,zero,233dc <close+0x2c>
   233d0:	e13fff17 	ldw	r4,-4(fp)
   233d4:	00398d80 	call	398d8 <alt_close>
   233d8:	00000206 	br	233e4 <close+0x34>
   233dc:	e13fff17 	ldw	r4,-4(fp)
   233e0:	002f38c0 	call	2f38c <t_socketclose>
}
   233e4:	e037883a 	mov	sp,fp
   233e8:	dfc00117 	ldw	ra,4(sp)
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00204 	addi	sp,sp,8
   233f4:	f800283a 	ret

000233f8 <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
   233f8:	defff504 	addi	sp,sp,-44
   233fc:	dfc00a15 	stw	ra,40(sp)
   23400:	df000915 	stw	fp,36(sp)
   23404:	df000904 	addi	fp,sp,36
   23408:	e13fff15 	stw	r4,-4(fp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
   2340c:	d0a02b17 	ldw	r2,-32596(gp)
   23410:	e0bff815 	stw	r2,-32(fp)
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
   23414:	d0a02b04 	addi	r2,gp,-32596
   23418:	e0bff915 	stw	r2,-28(fp)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
   2341c:	00003d06 	br	23514 <iniche_devices_init+0x11c>
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
   23420:	e0bff817 	ldw	r2,-32(fp)
   23424:	e0fff817 	ldw	r3,-32(fp)
   23428:	10c00415 	stw	r3,16(r2)
        p_dev->if_num = if_count;
   2342c:	e0bff817 	ldw	r2,-32(fp)
   23430:	e0ffff17 	ldw	r3,-4(fp)
   23434:	10c00515 	stw	r3,20(r2)
        p_dev->p_net = nets[p_dev->if_num];
   23438:	e0bff817 	ldw	r2,-32(fp)
   2343c:	10c00517 	ldw	r3,20(r2)
   23440:	008001b4 	movhi	r2,6
   23444:	10b79b04 	addi	r2,r2,-8596
   23448:	18c7883a 	add	r3,r3,r3
   2344c:	18c7883a 	add	r3,r3,r3
   23450:	10c5883a 	add	r2,r2,r3
   23454:	10c00017 	ldw	r3,0(r2)
   23458:	e0bff817 	ldw	r2,-32(fp)
   2345c:	10c00615 	stw	r3,24(r2)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
   23460:	e0bff817 	ldw	r2,-32(fp)
   23464:	10800317 	ldw	r2,12(r2)
   23468:	e13ff817 	ldw	r4,-32(fp)
   2346c:	103ee83a 	callr	r2

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
   23470:	e0bff817 	ldw	r2,-32(fp)
   23474:	10800617 	ldw	r2,24(r2)
   23478:	e0bffa15 	stw	r2,-24(fp)
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
   2347c:	e17ffb04 	addi	r5,fp,-20
   23480:	e1bffc04 	addi	r6,fp,-16
   23484:	e0fffd04 	addi	r3,fp,-12
   23488:	e0bffe04 	addi	r2,fp,-8
   2348c:	d8800015 	stw	r2,0(sp)
   23490:	e13ff817 	ldw	r4,-32(fp)
   23494:	180f883a 	mov	r7,r3
   23498:	00063a40 	call	63a4 <get_ip_addr>
   2349c:	10001726 	beq	r2,zero,234fc <iniche_devices_init+0x104>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
   234a0:	e0bffe17 	ldw	r2,-8(fp)
   234a4:	10000526 	beq	r2,zero,234bc <iniche_devices_init+0xc4>
                p_net->n_flags |= NF_DHCPC;
   234a8:	e0bffa17 	ldw	r2,-24(fp)
   234ac:	10802a17 	ldw	r2,168(r2)
   234b0:	10c04014 	ori	r3,r2,256
   234b4:	e0bffa17 	ldw	r2,-24(fp)
   234b8:	10c02a15 	stw	r3,168(r2)
            }
#endif
            p_net->n_ipaddr = ipaddr;
   234bc:	e0fffb17 	ldw	r3,-20(fp)
   234c0:	e0bffa17 	ldw	r2,-24(fp)
   234c4:	10c00a15 	stw	r3,40(r2)
            p_net->snmask = netmask;
   234c8:	e0fffc17 	ldw	r3,-16(fp)
   234cc:	e0bffa17 	ldw	r2,-24(fp)
   234d0:	10c00c15 	stw	r3,48(r2)
            p_net->n_defgw = gw;
   234d4:	e0fffd17 	ldw	r3,-12(fp)
   234d8:	e0bffa17 	ldw	r2,-24(fp)
   234dc:	10c00d15 	stw	r3,52(r2)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
   234e0:	e0fffa17 	ldw	r3,-24(fp)
   234e4:	00800134 	movhi	r2,4
   234e8:	10ac5a04 	addi	r2,r2,-20120
   234ec:	18802b15 	stw	r2,172(r3)
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
   234f0:	e0bffa17 	ldw	r2,-24(fp)
   234f4:	00c00084 	movi	r3,2
   234f8:	10c02f05 	stb	r3,188(r2)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
   234fc:	e0bfff17 	ldw	r2,-4(fp)
   23500:	10800044 	addi	r2,r2,1
   23504:	e0bfff15 	stw	r2,-4(fp)
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
   23508:	e0bff817 	ldw	r2,-32(fp)
   2350c:	10800017 	ldw	r2,0(r2)
   23510:	e0bff815 	stw	r2,-32(fp)
    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
   23514:	e0fff817 	ldw	r3,-32(fp)
   23518:	e0bff917 	ldw	r2,-28(fp)
   2351c:	18bfc01e 	bne	r3,r2,23420 <__alt_mem_descriptor_memory+0xdefe3420>
        /* Initialize next device. */
        if_count++;
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
    }

    return (if_count);
   23520:	e0bfff17 	ldw	r2,-4(fp)
}
   23524:	e037883a 	mov	sp,fp
   23528:	dfc00117 	ldw	ra,4(sp)
   2352c:	df000017 	ldw	fp,0(sp)
   23530:	dec00204 	addi	sp,sp,8
   23534:	f800283a 	ret

00023538 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
   23538:	defff904 	addi	sp,sp,-28
   2353c:	dfc00615 	stw	ra,24(sp)
   23540:	df000515 	stw	fp,20(sp)
   23544:	df000504 	addi	fp,sp,20
   23548:	e13ffd15 	stw	r4,-12(fp)
   2354c:	e17ffe15 	stw	r5,-8(fp)
   23550:	e1bfff15 	stw	r6,-4(fp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
   23554:	e0bffd17 	ldw	r2,-12(fp)
   23558:	10800808 	cmpgei	r2,r2,32
   2355c:	1000051e 	bne	r2,zero,23574 <read+0x3c>
   23560:	e13ffd17 	ldw	r4,-12(fp)
   23564:	e17ffe17 	ldw	r5,-8(fp)
   23568:	e1bfff17 	ldw	r6,-4(fp)
   2356c:	003a3c40 	call	3a3c4 <alt_read>
   23570:	00000806 	br	23594 <read+0x5c>
   23574:	e0bfff17 	ldw	r2,-4(fp)
   23578:	d8000015 	stw	zero,0(sp)
   2357c:	d8000115 	stw	zero,4(sp)
   23580:	e13ffd17 	ldw	r4,-12(fp)
   23584:	e17ffe17 	ldw	r5,-8(fp)
   23588:	100d883a 	mov	r6,r2
   2358c:	000f883a 	mov	r7,zero
   23590:	0025f000 	call	25f00 <bsd_recvfrom>
}
   23594:	e037883a 	mov	sp,fp
   23598:	dfc00117 	ldw	ra,4(sp)
   2359c:	df000017 	ldw	fp,0(sp)
   235a0:	dec00204 	addi	sp,sp,8
   235a4:	f800283a 	ret

000235a8 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
   235a8:	defffb04 	addi	sp,sp,-20
   235ac:	dfc00415 	stw	ra,16(sp)
   235b0:	df000315 	stw	fp,12(sp)
   235b4:	df000304 	addi	fp,sp,12
   235b8:	e13ffd15 	stw	r4,-12(fp)
   235bc:	e17ffe15 	stw	r5,-8(fp)
   235c0:	e1bfff15 	stw	r6,-4(fp)
  if (fd < ALT_MAX_FD)
   235c4:	e0bffd17 	ldw	r2,-12(fp)
   235c8:	10800808 	cmpgei	r2,r2,32
   235cc:	1000051e 	bne	r2,zero,235e4 <write+0x3c>
  {
    return alt_write (fd, ptr, len);
   235d0:	e13ffd17 	ldw	r4,-12(fp)
   235d4:	e17ffe17 	ldw	r5,-8(fp)
   235d8:	e1bfff17 	ldw	r6,-4(fp)
   235dc:	003a7f80 	call	3a7f8 <alt_write>
   235e0:	00000606 	br	235fc <write+0x54>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
   235e4:	e0bfff17 	ldw	r2,-4(fp)
   235e8:	e13ffd17 	ldw	r4,-12(fp)
   235ec:	e17ffe17 	ldw	r5,-8(fp)
   235f0:	100d883a 	mov	r6,r2
   235f4:	000f883a 	mov	r7,zero
   235f8:	002f0b80 	call	2f0b8 <t_send>
  }  
}
   235fc:	e037883a 	mov	sp,fp
   23600:	dfc00117 	ldw	ra,4(sp)
   23604:	df000017 	ldw	fp,0(sp)
   23608:	dec00204 	addi	sp,sp,8
   2360c:	f800283a 	ret

00023610 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
   23610:	defffc04 	addi	sp,sp,-16
   23614:	dfc00315 	stw	ra,12(sp)
   23618:	df000215 	stw	fp,8(sp)
   2361c:	df000204 	addi	fp,sp,8
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
   23620:	e03ffe15 	stw	zero,-8(fp)
   23624:	00004a06 	br	23750 <Netinit+0x140>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
   23628:	008001b4 	movhi	r2,6
   2362c:	10b79b04 	addi	r2,r2,-8596
   23630:	e0fffe17 	ldw	r3,-8(fp)
   23634:	18c7883a 	add	r3,r3,r3
   23638:	18c7883a 	add	r3,r3,r3
   2363c:	10c5883a 	add	r2,r2,r3
   23640:	10800017 	ldw	r2,0(r2)
   23644:	10802717 	ldw	r2,156(r2)
   23648:	10800217 	ldw	r2,8(r2)
   2364c:	10800198 	cmpnei	r2,r2,6
   23650:	1000241e 	bne	r2,zero,236e4 <Netinit+0xd4>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
   23654:	008001b4 	movhi	r2,6
   23658:	10b79b04 	addi	r2,r2,-8596
   2365c:	e0fffe17 	ldw	r3,-8(fp)
   23660:	18c7883a 	add	r3,r3,r3
   23664:	18c7883a 	add	r3,r3,r3
   23668:	10c5883a 	add	r2,r2,r3
   2366c:	10800017 	ldw	r2,0(r2)
   23670:	10800917 	ldw	r2,36(r2)
   23674:	1000091e 	bne	r2,zero,2369c <Netinit+0x8c>
            nets[i]->n_mtu = 1514;
   23678:	008001b4 	movhi	r2,6
   2367c:	10b79b04 	addi	r2,r2,-8596
   23680:	e0fffe17 	ldw	r3,-8(fp)
   23684:	18c7883a 	add	r3,r3,r3
   23688:	18c7883a 	add	r3,r3,r3
   2368c:	10c5883a 	add	r2,r2,r3
   23690:	10800017 	ldw	r2,0(r2)
   23694:	00c17a84 	movi	r3,1514
   23698:	10c00915 	stw	r3,36(r2)

         if (nets[i]->n_lnh == 0)
   2369c:	008001b4 	movhi	r2,6
   236a0:	10b79b04 	addi	r2,r2,-8596
   236a4:	e0fffe17 	ldw	r3,-8(fp)
   236a8:	18c7883a 	add	r3,r3,r3
   236ac:	18c7883a 	add	r3,r3,r3
   236b0:	10c5883a 	add	r2,r2,r3
   236b4:	10800017 	ldw	r2,0(r2)
   236b8:	10800817 	ldw	r2,32(r2)
   236bc:	1000091e 	bne	r2,zero,236e4 <Netinit+0xd4>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
   236c0:	008001b4 	movhi	r2,6
   236c4:	10b79b04 	addi	r2,r2,-8596
   236c8:	e0fffe17 	ldw	r3,-8(fp)
   236cc:	18c7883a 	add	r3,r3,r3
   236d0:	18c7883a 	add	r3,r3,r3
   236d4:	10c5883a 	add	r2,r2,r3
   236d8:	10800017 	ldw	r2,0(r2)
   236dc:	00c00404 	movi	r3,16
   236e0:	10c00815 	stw	r3,32(r2)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
   236e4:	008001b4 	movhi	r2,6
   236e8:	10b79b04 	addi	r2,r2,-8596
   236ec:	e0fffe17 	ldw	r3,-8(fp)
   236f0:	18c7883a 	add	r3,r3,r3
   236f4:	18c7883a 	add	r3,r3,r3
   236f8:	10c5883a 	add	r2,r2,r3
   236fc:	10800017 	ldw	r2,0(r2)
   23700:	10800817 	ldw	r2,32(r2)
   23704:	d0e86d17 	ldw	r3,-24140(gp)
   23708:	10c0010e 	bge	r2,r3,23710 <Netinit+0x100>
   2370c:	1805883a 	mov	r2,r3
   23710:	d0a86d15 	stw	r2,-24140(gp)
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   23714:	008001b4 	movhi	r2,6
   23718:	10b79b04 	addi	r2,r2,-8596
   2371c:	e0fffe17 	ldw	r3,-8(fp)
   23720:	18c7883a 	add	r3,r3,r3
   23724:	18c7883a 	add	r3,r3,r3
   23728:	10c5883a 	add	r2,r2,r3
   2372c:	10800017 	ldw	r2,0(r2)
   23730:	10800917 	ldw	r2,36(r2)
   23734:	d0e86e17 	ldw	r3,-24136(gp)
   23738:	10c0010e 	bge	r2,r3,23740 <Netinit+0x130>
   2373c:	1805883a 	mov	r2,r3
   23740:	d0a86e15 	stw	r2,-24136(gp)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
   23744:	e0bffe17 	ldw	r2,-8(fp)
   23748:	10800044 	addi	r2,r2,1
   2374c:	e0bffe15 	stw	r2,-8(fp)
   23750:	00800174 	movhi	r2,5
   23754:	108f9a04 	addi	r2,r2,15976
   23758:	10800017 	ldw	r2,0(r2)
   2375c:	1007883a 	mov	r3,r2
   23760:	e0bffe17 	ldw	r2,-8(fp)
   23764:	10ffb016 	blt	r2,r3,23628 <__alt_mem_descriptor_memory+0xdefe3628>
      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
   23768:	008001b4 	movhi	r2,6
   2376c:	10b6d604 	addi	r2,r2,-9384
   23770:	10000115 	stw	zero,4(r2)
   23774:	008001b4 	movhi	r2,6
   23778:	10b6d604 	addi	r2,r2,-9384
   2377c:	10c00117 	ldw	r3,4(r2)
   23780:	008001b4 	movhi	r2,6
   23784:	10b6d604 	addi	r2,r2,-9384
   23788:	10c00015 	stw	r3,0(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
   2378c:	008001b4 	movhi	r2,6
   23790:	10b6d604 	addi	r2,r2,-9384
   23794:	10000215 	stw	zero,8(r2)
   23798:	008001b4 	movhi	r2,6
   2379c:	10b6d604 	addi	r2,r2,-9384
   237a0:	10c00217 	ldw	r3,8(r2)
   237a4:	008001b4 	movhi	r2,6
   237a8:	10b6d604 	addi	r2,r2,-9384
   237ac:	10c00415 	stw	r3,16(r2)
   237b0:	008001b4 	movhi	r2,6
   237b4:	10b6d604 	addi	r2,r2,-9384
   237b8:	10c00417 	ldw	r3,16(r2)
   237bc:	008001b4 	movhi	r2,6
   237c0:	10b6d604 	addi	r2,r2,-9384
   237c4:	10c00315 	stw	r3,12(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   237c8:	01000084 	movi	r4,2
   237cc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   e = pk_init();
   237d0:	002a2b00 	call	2a2b0 <pk_init>
   237d4:	e0bfff15 	stw	r2,-4(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   237d8:	01000084 	movi	r4,2
   237dc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
   237e0:	e0bfff17 	ldw	r2,-4(fp)
   237e4:	10000226 	beq	r2,zero,237f0 <Netinit+0x1e0>
      return e;
   237e8:	e0bfff17 	ldw	r2,-4(fp)
   237ec:	00010106 	br	23bf4 <Netinit+0x5e4>

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
   237f0:	010000b4 	movhi	r4,2
   237f4:	210f5704 	addi	r4,r4,15708
   237f8:	00246c80 	call	246c8 <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
   237fc:	e03ffe15 	stw	zero,-8(fp)
   23800:	0000f506 	br	23bd8 <Netinit+0x5c8>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
   23804:	008001b4 	movhi	r2,6
   23808:	10b79b04 	addi	r2,r2,-8596
   2380c:	e0fffe17 	ldw	r3,-8(fp)
   23810:	18c7883a 	add	r3,r3,r3
   23814:	18c7883a 	add	r3,r3,r3
   23818:	10c5883a 	add	r2,r2,r3
   2381c:	10800017 	ldw	r2,0(r2)
   23820:	10800217 	ldw	r2,8(r2)
   23824:	10009126 	beq	r2,zero,23a6c <Netinit+0x45c>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
   23828:	008001b4 	movhi	r2,6
   2382c:	10b79b04 	addi	r2,r2,-8596
   23830:	e0fffe17 	ldw	r3,-8(fp)
   23834:	18c7883a 	add	r3,r3,r3
   23838:	18c7883a 	add	r3,r3,r3
   2383c:	10c5883a 	add	r2,r2,r3
   23840:	10800017 	ldw	r2,0(r2)
   23844:	10800217 	ldw	r2,8(r2)
   23848:	e13ffe17 	ldw	r4,-8(fp)
   2384c:	103ee83a 	callr	r2
   23850:	e0bfff15 	stw	r2,-4(fp)
   23854:	e0bfff17 	ldw	r2,-4(fp)
   23858:	10001026 	beq	r2,zero,2389c <Netinit+0x28c>
         {
            dprintf("init error %d on net[%d]\n", e, i);
   2385c:	01000174 	movhi	r4,5
   23860:	21378c04 	addi	r4,r4,-8656
   23864:	e17fff17 	ldw	r5,-4(fp)
   23868:	e1bffe17 	ldw	r6,-8(fp)
   2386c:	00080f80 	call	80f8 <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
   23870:	008001b4 	movhi	r2,6
   23874:	10b79b04 	addi	r2,r2,-8596
   23878:	e0fffe17 	ldw	r3,-8(fp)
   2387c:	18c7883a 	add	r3,r3,r3
   23880:	18c7883a 	add	r3,r3,r3
   23884:	10c5883a 	add	r2,r2,r3
   23888:	10800017 	ldw	r2,0(r2)
   2388c:	10802717 	ldw	r2,156(r2)
   23890:	00c00084 	movi	r3,2
   23894:	10c00715 	stw	r3,28(r2)
            continue;   /* ignore ifaces which fail */
   23898:	0000cc06 	br	23bcc <Netinit+0x5bc>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
   2389c:	008001b4 	movhi	r2,6
   238a0:	10b79b04 	addi	r2,r2,-8596
   238a4:	e0fffe17 	ldw	r3,-8(fp)
   238a8:	18c7883a 	add	r3,r3,r3
   238ac:	18c7883a 	add	r3,r3,r3
   238b0:	10c5883a 	add	r2,r2,r3
   238b4:	10800017 	ldw	r2,0(r2)
   238b8:	10802717 	ldw	r2,156(r2)
   238bc:	10800217 	ldw	r2,8(r2)
   238c0:	10800198 	cmpnei	r2,r2,6
   238c4:	1000111e 	bne	r2,zero,2390c <Netinit+0x2fc>
            nets[i]->n_flags |= NF_BCAST;
   238c8:	008001b4 	movhi	r2,6
   238cc:	10b79b04 	addi	r2,r2,-8596
   238d0:	e0fffe17 	ldw	r3,-8(fp)
   238d4:	18c7883a 	add	r3,r3,r3
   238d8:	18c7883a 	add	r3,r3,r3
   238dc:	10c5883a 	add	r2,r2,r3
   238e0:	11000017 	ldw	r4,0(r2)
   238e4:	008001b4 	movhi	r2,6
   238e8:	10b79b04 	addi	r2,r2,-8596
   238ec:	e0fffe17 	ldw	r3,-8(fp)
   238f0:	18c7883a 	add	r3,r3,r3
   238f4:	18c7883a 	add	r3,r3,r3
   238f8:	10c5883a 	add	r2,r2,r3
   238fc:	10800017 	ldw	r2,0(r2)
   23900:	10802a17 	ldw	r2,168(r2)
   23904:	10800054 	ori	r2,r2,1
   23908:	20802a15 	stw	r2,168(r4)

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
   2390c:	008001b4 	movhi	r2,6
   23910:	10b79b04 	addi	r2,r2,-8596
   23914:	e0fffe17 	ldw	r3,-8(fp)
   23918:	18c7883a 	add	r3,r3,r3
   2391c:	18c7883a 	add	r3,r3,r3
   23920:	10c5883a 	add	r2,r2,r3
   23924:	10800017 	ldw	r2,0(r2)
   23928:	10802717 	ldw	r2,156(r2)
   2392c:	00c00044 	movi	r3,1
   23930:	10c00615 	stw	r3,24(r2)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
   23934:	008001b4 	movhi	r2,6
   23938:	10b79b04 	addi	r2,r2,-8596
   2393c:	e0fffe17 	ldw	r3,-8(fp)
   23940:	18c7883a 	add	r3,r3,r3
   23944:	18c7883a 	add	r3,r3,r3
   23948:	10c5883a 	add	r2,r2,r3
   2394c:	10800017 	ldw	r2,0(r2)
   23950:	10800103 	ldbu	r2,4(r2)
   23954:	10803fcc 	andi	r2,r2,255
   23958:	1080201c 	xori	r2,r2,128
   2395c:	10bfe004 	addi	r2,r2,-128
   23960:	1000421e 	bne	r2,zero,23a6c <Netinit+0x45c>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
   23964:	008001b4 	movhi	r2,6
   23968:	10b79b04 	addi	r2,r2,-8596
   2396c:	e0fffe17 	ldw	r3,-8(fp)
   23970:	18c7883a 	add	r3,r3,r3
   23974:	18c7883a 	add	r3,r3,r3
   23978:	10c5883a 	add	r2,r2,r3
   2397c:	10800017 	ldw	r2,0(r2)
   23980:	10802717 	ldw	r2,156(r2)
   23984:	10800217 	ldw	r2,8(r2)
   23988:	10800198 	cmpnei	r2,r2,6
   2398c:	1000131e 	bne	r2,zero,239dc <Netinit+0x3cc>
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
   23990:	008001b4 	movhi	r2,6
   23994:	10b79b04 	addi	r2,r2,-8596
   23998:	e0fffe17 	ldw	r3,-8(fp)
   2399c:	18c7883a 	add	r3,r3,r3
   239a0:	18c7883a 	add	r3,r3,r3
   239a4:	10c5883a 	add	r2,r2,r3
   239a8:	10800017 	ldw	r2,0(r2)
   239ac:	00c01944 	movi	r3,101
   239b0:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 't';
   239b4:	008001b4 	movhi	r2,6
   239b8:	10b79b04 	addi	r2,r2,-8596
   239bc:	e0fffe17 	ldw	r3,-8(fp)
   239c0:	18c7883a 	add	r3,r3,r3
   239c4:	18c7883a 	add	r3,r3,r3
   239c8:	10c5883a 	add	r2,r2,r3
   239cc:	10800017 	ldw	r2,0(r2)
   239d0:	00c01d04 	movi	r3,116
   239d4:	10c00145 	stb	r3,5(r2)
   239d8:	00001206 	br	23a24 <Netinit+0x414>
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
   239dc:	008001b4 	movhi	r2,6
   239e0:	10b79b04 	addi	r2,r2,-8596
   239e4:	e0fffe17 	ldw	r3,-8(fp)
   239e8:	18c7883a 	add	r3,r3,r3
   239ec:	18c7883a 	add	r3,r3,r3
   239f0:	10c5883a 	add	r2,r2,r3
   239f4:	10800017 	ldw	r2,0(r2)
   239f8:	00c01a44 	movi	r3,105
   239fc:	10c00105 	stb	r3,4(r2)
               nets[i]->name[1] = 'f';
   23a00:	008001b4 	movhi	r2,6
   23a04:	10b79b04 	addi	r2,r2,-8596
   23a08:	e0fffe17 	ldw	r3,-8(fp)
   23a0c:	18c7883a 	add	r3,r3,r3
   23a10:	18c7883a 	add	r3,r3,r3
   23a14:	10c5883a 	add	r2,r2,r3
   23a18:	10800017 	ldw	r2,0(r2)
   23a1c:	00c01984 	movi	r3,102
   23a20:	10c00145 	stb	r3,5(r2)
            }
            nets[i]->name[2] = (char)(i + '1');
   23a24:	008001b4 	movhi	r2,6
   23a28:	10b79b04 	addi	r2,r2,-8596
   23a2c:	e0fffe17 	ldw	r3,-8(fp)
   23a30:	18c7883a 	add	r3,r3,r3
   23a34:	18c7883a 	add	r3,r3,r3
   23a38:	10c5883a 	add	r2,r2,r3
   23a3c:	10800017 	ldw	r2,0(r2)
   23a40:	e0fffe17 	ldw	r3,-8(fp)
   23a44:	18c00c44 	addi	r3,r3,49
   23a48:	10c00185 	stb	r3,6(r2)
            nets[i]->name[3] = '\0';
   23a4c:	008001b4 	movhi	r2,6
   23a50:	10b79b04 	addi	r2,r2,-8596
   23a54:	e0fffe17 	ldw	r3,-8(fp)
   23a58:	18c7883a 	add	r3,r3,r3
   23a5c:	18c7883a 	add	r3,r3,r3
   23a60:	10c5883a 	add	r2,r2,r3
   23a64:	10800017 	ldw	r2,0(r2)
   23a68:	100001c5 	stb	zero,7(r2)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
   23a6c:	e13ffe17 	ldw	r4,-8(fp)
   23a70:	0023c080 	call	23c08 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
   23a74:	008001b4 	movhi	r2,6
   23a78:	10b79b04 	addi	r2,r2,-8596
   23a7c:	e0fffe17 	ldw	r3,-8(fp)
   23a80:	18c7883a 	add	r3,r3,r3
   23a84:	18c7883a 	add	r3,r3,r3
   23a88:	10c5883a 	add	r2,r2,r3
   23a8c:	10800017 	ldw	r2,0(r2)
   23a90:	10800a17 	ldw	r2,40(r2)
   23a94:	10004d26 	beq	r2,zero,23bcc <Netinit+0x5bc>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
   23a98:	008001b4 	movhi	r2,6
   23a9c:	10b79b04 	addi	r2,r2,-8596
   23aa0:	e0fffe17 	ldw	r3,-8(fp)
   23aa4:	18c7883a 	add	r3,r3,r3
   23aa8:	18c7883a 	add	r3,r3,r3
   23aac:	10c5883a 	add	r2,r2,r3
   23ab0:	11000017 	ldw	r4,0(r2)
   23ab4:	008001b4 	movhi	r2,6
   23ab8:	10b79b04 	addi	r2,r2,-8596
   23abc:	e0fffe17 	ldw	r3,-8(fp)
   23ac0:	18c7883a 	add	r3,r3,r3
   23ac4:	18c7883a 	add	r3,r3,r3
   23ac8:	10c5883a 	add	r2,r2,r3
   23acc:	10800017 	ldw	r2,0(r2)
   23ad0:	11400a17 	ldw	r5,40(r2)
   23ad4:	008001b4 	movhi	r2,6
   23ad8:	10b79b04 	addi	r2,r2,-8596
   23adc:	e0fffe17 	ldw	r3,-8(fp)
   23ae0:	18c7883a 	add	r3,r3,r3
   23ae4:	18c7883a 	add	r3,r3,r3
   23ae8:	10c5883a 	add	r2,r2,r3
   23aec:	10800017 	ldw	r2,0(r2)
   23af0:	10800c17 	ldw	r2,48(r2)
   23af4:	0084303a 	nor	r2,zero,r2
   23af8:	2884b03a 	or	r2,r5,r2
   23afc:	20800e15 	stw	r2,56(r4)
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
   23b00:	008001b4 	movhi	r2,6
   23b04:	10b79b04 	addi	r2,r2,-8596
   23b08:	e0fffe17 	ldw	r3,-8(fp)
   23b0c:	18c7883a 	add	r3,r3,r3
   23b10:	18c7883a 	add	r3,r3,r3
   23b14:	10c5883a 	add	r2,r2,r3
   23b18:	11000017 	ldw	r4,0(r2)
   23b1c:	008001b4 	movhi	r2,6
   23b20:	10b79b04 	addi	r2,r2,-8596
   23b24:	e0fffe17 	ldw	r3,-8(fp)
   23b28:	18c7883a 	add	r3,r3,r3
   23b2c:	18c7883a 	add	r3,r3,r3
   23b30:	10c5883a 	add	r2,r2,r3
   23b34:	10800017 	ldw	r2,0(r2)
   23b38:	11400a17 	ldw	r5,40(r2)
   23b3c:	008001b4 	movhi	r2,6
   23b40:	10b79b04 	addi	r2,r2,-8596
   23b44:	e0fffe17 	ldw	r3,-8(fp)
   23b48:	18c7883a 	add	r3,r3,r3
   23b4c:	18c7883a 	add	r3,r3,r3
   23b50:	10c5883a 	add	r2,r2,r3
   23b54:	10800017 	ldw	r2,0(r2)
   23b58:	10800c17 	ldw	r2,48(r2)
   23b5c:	2884703a 	and	r2,r5,r2
   23b60:	20800f15 	stw	r2,60(r4)
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
   23b64:	008001b4 	movhi	r2,6
   23b68:	10b79b04 	addi	r2,r2,-8596
   23b6c:	e0fffe17 	ldw	r3,-8(fp)
   23b70:	18c7883a 	add	r3,r3,r3
   23b74:	18c7883a 	add	r3,r3,r3
   23b78:	10c5883a 	add	r2,r2,r3
   23b7c:	11000017 	ldw	r4,0(r2)
   23b80:	008001b4 	movhi	r2,6
   23b84:	10b79b04 	addi	r2,r2,-8596
   23b88:	e0fffe17 	ldw	r3,-8(fp)
   23b8c:	18c7883a 	add	r3,r3,r3
   23b90:	18c7883a 	add	r3,r3,r3
   23b94:	10c5883a 	add	r2,r2,r3
   23b98:	10800017 	ldw	r2,0(r2)
   23b9c:	11400a17 	ldw	r5,40(r2)
   23ba0:	008001b4 	movhi	r2,6
   23ba4:	10b79b04 	addi	r2,r2,-8596
   23ba8:	e0fffe17 	ldw	r3,-8(fp)
   23bac:	18c7883a 	add	r3,r3,r3
   23bb0:	18c7883a 	add	r3,r3,r3
   23bb4:	10c5883a 	add	r2,r2,r3
   23bb8:	10800017 	ldw	r2,0(r2)
   23bbc:	10800c17 	ldw	r2,48(r2)
   23bc0:	0084303a 	nor	r2,zero,r2
   23bc4:	2884b03a 	or	r2,r5,r2
   23bc8:	20801015 	stw	r2,64(r4)

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
   23bcc:	e0bffe17 	ldw	r2,-8(fp)
   23bd0:	10800044 	addi	r2,r2,1
   23bd4:	e0bffe15 	stw	r2,-8(fp)
   23bd8:	00800174 	movhi	r2,5
   23bdc:	108f9a04 	addi	r2,r2,15976
   23be0:	10800017 	ldw	r2,0(r2)
   23be4:	1007883a 	mov	r3,r2
   23be8:	e0bffe17 	ldw	r2,-8(fp)
   23bec:	10ff0516 	blt	r2,r3,23804 <__alt_mem_descriptor_memory+0xdefe3804>
#if defined(DYNAMIC_IFACES) && defined(IN_MENUS)
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
   23bf0:	0005883a 	mov	r2,zero
}
   23bf4:	e037883a 	mov	sp,fp
   23bf8:	dfc00117 	ldw	ra,4(sp)
   23bfc:	df000017 	ldw	fp,0(sp)
   23c00:	dec00204 	addi	sp,sp,8
   23c04:	f800283a 	ret

00023c08 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
   23c08:	defffc04 	addi	sp,sp,-16
   23c0c:	dfc00315 	stw	ra,12(sp)
   23c10:	df000215 	stw	fp,8(sp)
   23c14:	df000204 	addi	fp,sp,8
   23c18:	e13fff15 	stw	r4,-4(fp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
   23c1c:	008001b4 	movhi	r2,6
   23c20:	10b79b04 	addi	r2,r2,-8596
   23c24:	e0ffff17 	ldw	r3,-4(fp)
   23c28:	18c7883a 	add	r3,r3,r3
   23c2c:	18c7883a 	add	r3,r3,r3
   23c30:	10c5883a 	add	r2,r2,r3
   23c34:	10800017 	ldw	r2,0(r2)
   23c38:	10800c17 	ldw	r2,48(r2)
   23c3c:	10000126 	beq	r2,zero,23c44 <fixup_subnet_mask+0x3c>
      return;
   23c40:	00004106 	br	23d48 <fixup_subnet_mask+0x140>

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
   23c44:	008001b4 	movhi	r2,6
   23c48:	10b79b04 	addi	r2,r2,-8596
   23c4c:	e0ffff17 	ldw	r3,-4(fp)
   23c50:	18c7883a 	add	r3,r3,r3
   23c54:	18c7883a 	add	r3,r3,r3
   23c58:	10c5883a 	add	r2,r2,r3
   23c5c:	10800017 	ldw	r2,0(r2)
   23c60:	10800a17 	ldw	r2,40(r2)
   23c64:	1080200c 	andi	r2,r2,128
   23c68:	1000031e 	bne	r2,zero,23c78 <fixup_subnet_mask+0x70>
      smask = 0xFF000000L;
   23c6c:	00bfc034 	movhi	r2,65280
   23c70:	e0bffe15 	stw	r2,-8(fp)
   23c74:	00001f06 	br	23cf4 <fixup_subnet_mask+0xec>
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
   23c78:	008001b4 	movhi	r2,6
   23c7c:	10b79b04 	addi	r2,r2,-8596
   23c80:	e0ffff17 	ldw	r3,-4(fp)
   23c84:	18c7883a 	add	r3,r3,r3
   23c88:	18c7883a 	add	r3,r3,r3
   23c8c:	10c5883a 	add	r2,r2,r3
   23c90:	10800017 	ldw	r2,0(r2)
   23c94:	10800a17 	ldw	r2,40(r2)
   23c98:	1080300c 	andi	r2,r2,192
   23c9c:	10802018 	cmpnei	r2,r2,128
   23ca0:	1000031e 	bne	r2,zero,23cb0 <fixup_subnet_mask+0xa8>
      smask = 0xFFFF0000L;
   23ca4:	00bffff4 	movhi	r2,65535
   23ca8:	e0bffe15 	stw	r2,-8(fp)
   23cac:	00001106 	br	23cf4 <fixup_subnet_mask+0xec>
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
   23cb0:	008001b4 	movhi	r2,6
   23cb4:	10b79b04 	addi	r2,r2,-8596
   23cb8:	e0ffff17 	ldw	r3,-4(fp)
   23cbc:	18c7883a 	add	r3,r3,r3
   23cc0:	18c7883a 	add	r3,r3,r3
   23cc4:	10c5883a 	add	r2,r2,r3
   23cc8:	10800017 	ldw	r2,0(r2)
   23ccc:	10800a17 	ldw	r2,40(r2)
   23cd0:	1080380c 	andi	r2,r2,224
   23cd4:	10803018 	cmpnei	r2,r2,192
   23cd8:	1000031e 	bne	r2,zero,23ce8 <fixup_subnet_mask+0xe0>
      smask = 0xFFFFFF00L;
   23cdc:	00bfc004 	movi	r2,-256
   23ce0:	e0bffe15 	stw	r2,-8(fp)
   23ce4:	00000306 	br	23cf4 <fixup_subnet_mask+0xec>
   else
   {
      dtrap();    /* bad logic or setup values */
   23ce8:	002b0f40 	call	2b0f4 <dtrap>
      smask = 0xFFFFFF00L;
   23cec:	00bfc004 	movi	r2,-256
   23cf0:	e0bffe15 	stw	r2,-8(fp)
   }
   nets[netnum]->snmask = htonl(smask);
   23cf4:	008001b4 	movhi	r2,6
   23cf8:	10b79b04 	addi	r2,r2,-8596
   23cfc:	e0ffff17 	ldw	r3,-4(fp)
   23d00:	18c7883a 	add	r3,r3,r3
   23d04:	18c7883a 	add	r3,r3,r3
   23d08:	10c5883a 	add	r2,r2,r3
   23d0c:	10800017 	ldw	r2,0(r2)
   23d10:	e0fffe17 	ldw	r3,-8(fp)
   23d14:	1808d63a 	srli	r4,r3,24
   23d18:	e0fffe17 	ldw	r3,-8(fp)
   23d1c:	1806d23a 	srli	r3,r3,8
   23d20:	18ffc00c 	andi	r3,r3,65280
   23d24:	20c8b03a 	or	r4,r4,r3
   23d28:	e0fffe17 	ldw	r3,-8(fp)
   23d2c:	18ffc00c 	andi	r3,r3,65280
   23d30:	1806923a 	slli	r3,r3,8
   23d34:	20c8b03a 	or	r4,r4,r3
   23d38:	e0fffe17 	ldw	r3,-8(fp)
   23d3c:	1806963a 	slli	r3,r3,24
   23d40:	20c6b03a 	or	r3,r4,r3
   23d44:	10c00c15 	stw	r3,48(r2)
}
   23d48:	e037883a 	mov	sp,fp
   23d4c:	dfc00117 	ldw	ra,4(sp)
   23d50:	df000017 	ldw	fp,0(sp)
   23d54:	dec00204 	addi	sp,sp,8
   23d58:	f800283a 	ret

00023d5c <netclose>:
 * RETURNS: 
 */

void
netclose()
{
   23d5c:	defffc04 	addi	sp,sp,-16
   23d60:	dfc00315 	stw	ra,12(sp)
   23d64:	df000215 	stw	fp,8(sp)
   23d68:	df000204 	addi	fp,sp,8
   NET ifp;
   int index = 0;
   23d6c:	e03fff15 	stw	zero,-4(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
   23d70:	d0a86f17 	ldw	r2,-24132(gp)
   23d74:	1080010c 	andi	r2,r2,4
   23d78:	10000326 	beq	r2,zero,23d88 <netclose+0x2c>
   23d7c:	01000174 	movhi	r4,5
   23d80:	21379304 	addi	r4,r4,-8628
   23d84:	00083740 	call	8374 <puts>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
   23d88:	008001b4 	movhi	r2,6
   23d8c:	10b9dc04 	addi	r2,r2,-6288
   23d90:	10800017 	ldw	r2,0(r2)
   23d94:	e0bffe15 	stw	r2,-8(fp)
   23d98:	00002106 	br	23e20 <netclose+0xc4>
   {
      if (ifp->n_close)
   23d9c:	e0bffe17 	ldw	r2,-8(fp)
   23da0:	10800517 	ldw	r2,20(r2)
   23da4:	10000f26 	beq	r2,zero,23de4 <netclose+0x88>
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
   23da8:	e0bffe17 	ldw	r2,-8(fp)
   23dac:	10802717 	ldw	r2,156(r2)
   23db0:	10800117 	ldw	r2,4(r2)
   23db4:	01000174 	movhi	r4,5
   23db8:	21379804 	addi	r4,r4,-8608
   23dbc:	100b883a 	mov	r5,r2
   23dc0:	00080f80 	call	80f8 <printf>
         (*(ifp->n_close))(index++);
   23dc4:	e0bffe17 	ldw	r2,-8(fp)
   23dc8:	10c00517 	ldw	r3,20(r2)
   23dcc:	e0bfff17 	ldw	r2,-4(fp)
   23dd0:	11000044 	addi	r4,r2,1
   23dd4:	e13fff15 	stw	r4,-4(fp)
   23dd8:	1009883a 	mov	r4,r2
   23ddc:	183ee83a 	callr	r3
   23de0:	00000c06 	br	23e14 <netclose+0xb8>
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
   23de4:	d0a86f17 	ldw	r2,-24132(gp)
   23de8:	1080010c 	andi	r2,r2,4
   23dec:	10000626 	beq	r2,zero,23e08 <netclose+0xac>
   23df0:	e0bffe17 	ldw	r2,-8(fp)
   23df4:	10800104 	addi	r2,r2,4
   23df8:	01000174 	movhi	r4,5
   23dfc:	21379f04 	addi	r4,r4,-8580
   23e00:	100b883a 	mov	r5,r2
   23e04:	00080f80 	call	80f8 <printf>
#endif
         index++;
   23e08:	e0bfff17 	ldw	r2,-4(fp)
   23e0c:	10800044 	addi	r2,r2,1
   23e10:	e0bfff15 	stw	r2,-4(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
   23e14:	e0bffe17 	ldw	r2,-8(fp)
   23e18:	10800017 	ldw	r2,0(r2)
   23e1c:	e0bffe15 	stw	r2,-8(fp)
   23e20:	e0bffe17 	ldw	r2,-8(fp)
   23e24:	103fdd1e 	bne	r2,zero,23d9c <__alt_mem_descriptor_memory+0xdefe3d9c>
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
#endif
         index++;
      }
   }
}
   23e28:	e037883a 	mov	sp,fp
   23e2c:	dfc00117 	ldw	ra,4(sp)
   23e30:	df000017 	ldw	fp,0(sp)
   23e34:	dec00204 	addi	sp,sp,8
   23e38:	f800283a 	ret

00023e3c <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
   23e3c:	defff904 	addi	sp,sp,-28
   23e40:	dfc00615 	stw	ra,24(sp)
   23e44:	df000515 	stw	fp,20(sp)
   23e48:	df000504 	addi	fp,sp,20
   NET      ifc;                /* interface packet came from */
   IFMIB    mib;
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */
   23e4c:	e03ffb15 	stw	zero,-20(fp)

   while (rcvdq.q_len)
   23e50:	0000d906 	br	241b8 <pktdemux+0x37c>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
   23e54:	e0fffb17 	ldw	r3,-20(fp)
   23e58:	18800044 	addi	r2,r3,1
   23e5c:	e0bffb15 	stw	r2,-20(fp)
   23e60:	008001b4 	movhi	r2,6
   23e64:	10b84204 	addi	r2,r2,-7928
   23e68:	10800217 	ldw	r2,8(r2)
   23e6c:	10c0020e 	bge	r2,r3,23e78 <pktdemux+0x3c>
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
   23e70:	00273380 	call	27338 <tk_yield>
         pkts = 0;   /* reset counter */
   23e74:	e03ffb15 	stw	zero,-20(fp)
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
   23e78:	01000044 	movi	r4,1
   23e7c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
   23e80:	010001b4 	movhi	r4,6
   23e84:	2136d604 	addi	r4,r4,-9384
   23e88:	002aa140 	call	2aa14 <getq>
   23e8c:	e0bffc15 	stw	r2,-16(fp)
      UNLOCK_NET_RESOURCE(RXQ_RESID);
   23e90:	01000044 	movi	r4,1
   23e94:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
   23e98:	e0bffc17 	ldw	r2,-16(fp)
   23e9c:	1000031e 	bne	r2,zero,23eac <pktdemux+0x70>
   23ea0:	01000174 	movhi	r4,5
   23ea4:	2137a604 	addi	r4,r4,-8552
   23ea8:	00267380 	call	26738 <panic>
      ifc = pkt->net;
   23eac:	e0bffc17 	ldw	r2,-16(fp)
   23eb0:	10800617 	ldw	r2,24(r2)
   23eb4:	e0bffd15 	stw	r2,-12(fp)

      mib = ifc->n_mib;
   23eb8:	e0bffd17 	ldw	r2,-12(fp)
   23ebc:	10802717 	ldw	r2,156(r2)
   23ec0:	e0bffe15 	stw	r2,-8(fp)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
   23ec4:	e0bffc17 	ldw	r2,-16(fp)
   23ec8:	10800117 	ldw	r2,4(r2)
   23ecc:	10800084 	addi	r2,r2,2
   23ed0:	e13ffd17 	ldw	r4,-12(fp)
   23ed4:	100b883a 	mov	r5,r2
   23ed8:	003cc000 	call	3cc00 <isbcast>
   23edc:	10000626 	beq	r2,zero,23ef8 <pktdemux+0xbc>
         mib->ifInNUcastPkts++;
   23ee0:	e0bffe17 	ldw	r2,-8(fp)
   23ee4:	10800b17 	ldw	r2,44(r2)
   23ee8:	10c00044 	addi	r3,r2,1
   23eec:	e0bffe17 	ldw	r2,-8(fp)
   23ef0:	10c00b15 	stw	r3,44(r2)
   23ef4:	00000506 	br	23f0c <pktdemux+0xd0>
      else
         mib->ifInUcastPkts++;
   23ef8:	e0bffe17 	ldw	r2,-8(fp)
   23efc:	10800a17 	ldw	r2,40(r2)
   23f00:	10c00044 	addi	r3,r2,1
   23f04:	e0bffe17 	ldw	r2,-8(fp)
   23f08:	10c00a15 	stw	r3,40(r2)

      if(mib->ifAdminStatus == NI_DOWN)
   23f0c:	e0bffe17 	ldw	r2,-8(fp)
   23f10:	10800617 	ldw	r2,24(r2)
   23f14:	10800098 	cmpnei	r2,r2,2
   23f18:	10000c1e 	bne	r2,zero,23f4c <pktdemux+0x110>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   23f1c:	01000084 	movi	r4,2
   23f20:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
   23f24:	e13ffc17 	ldw	r4,-16(fp)
   23f28:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   23f2c:	01000084 	movi	r4,2
   23f30:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
   23f34:	e0bffe17 	ldw	r2,-8(fp)
   23f38:	10800c17 	ldw	r2,48(r2)
   23f3c:	10c00044 	addi	r3,r2,1
   23f40:	e0bffe17 	ldw	r2,-8(fp)
   23f44:	10c00c15 	stw	r3,48(r2)
         continue;      /* next packet */
   23f48:	00009b06 	br	241b8 <pktdemux+0x37c>
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
   23f4c:	e0bffc17 	ldw	r2,-16(fp)
   23f50:	10800117 	ldw	r2,4(r2)
   23f54:	10bfff04 	addi	r2,r2,-4
   23f58:	10800003 	ldbu	r2,0(r2)
   23f5c:	10803fcc 	andi	r2,r2,255
   23f60:	1080201c 	xori	r2,r2,128
   23f64:	10bfe004 	addi	r2,r2,-128
   23f68:	10801358 	cmpnei	r2,r2,77
   23f6c:	10000b1e 	bne	r2,zero,23f9c <pktdemux+0x160>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
   23f70:	e0bffc17 	ldw	r2,-16(fp)
   23f74:	10c00117 	ldw	r3,4(r2)
   23f78:	e0bffc17 	ldw	r2,-16(fp)
   23f7c:	10800217 	ldw	r2,8(r2)
   23f80:	1885883a 	add	r2,r3,r2
   23f84:	10800003 	ldbu	r2,0(r2)
         mib->ifInDiscards++;
         continue;      /* next packet */
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
   23f88:	10803fcc 	andi	r2,r2,255
   23f8c:	1080201c 	xori	r2,r2,128
   23f90:	10bfe004 	addi	r2,r2,-128
   23f94:	10801360 	cmpeqi	r2,r2,77
   23f98:	1000041e 	bne	r2,zero,23fac <pktdemux+0x170>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
      {
         dtrap();
   23f9c:	002b0f40 	call	2b0f4 <dtrap>
         panic("pktdemux: corrupt pkt");
   23fa0:	01000174 	movhi	r4,5
   23fa4:	2137ac04 	addi	r4,r4,-8528
   23fa8:	00267380 	call	26738 <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
   23fac:	e0bffd17 	ldw	r2,-12(fp)
   23fb0:	10802a17 	ldw	r2,168(r2)
   23fb4:	1080020c 	andi	r2,r2,8
   23fb8:	1000491e 	bne	r2,zero,240e0 <pktdemux+0x2a4>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
   23fbc:	e0bffd17 	ldw	r2,-12(fp)
   23fc0:	10802717 	ldw	r2,156(r2)
   23fc4:	10800217 	ldw	r2,8(r2)
   23fc8:	108001a0 	cmpeqi	r2,r2,6
   23fcc:	10003626 	beq	r2,zero,240a8 <pktdemux+0x26c>
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
   23fd0:	e0bffc17 	ldw	r2,-16(fp)
   23fd4:	10800117 	ldw	r2,4(r2)
   23fd8:	10800084 	addi	r2,r2,2
   23fdc:	e0bfff15 	stw	r2,-4(fp)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
   23fe0:	e0bfff17 	ldw	r2,-4(fp)
   23fe4:	10800304 	addi	r2,r2,12
   23fe8:	10800003 	ldbu	r2,0(r2)
   23fec:	10803fcc 	andi	r2,r2,255
   23ff0:	1080201c 	xori	r2,r2,128
   23ff4:	10bfe004 	addi	r2,r2,-128
   23ff8:	1004923a 	slli	r2,r2,8
   23ffc:	1007883a 	mov	r3,r2
   24000:	e0bfff17 	ldw	r2,-4(fp)
   24004:	10800344 	addi	r2,r2,13
   24008:	10800003 	ldbu	r2,0(r2)
   2400c:	10803fcc 	andi	r2,r2,255
   24010:	1080201c 	xori	r2,r2,128
   24014:	10bfe004 	addi	r2,r2,-128
   24018:	10803fcc 	andi	r2,r2,255
   2401c:	1885883a 	add	r2,r3,r2
   24020:	10bfffcc 	andi	r2,r2,65535
   24024:	1004d23a 	srli	r2,r2,8
   24028:	1007883a 	mov	r3,r2
   2402c:	e0bfff17 	ldw	r2,-4(fp)
   24030:	10800304 	addi	r2,r2,12
   24034:	10800003 	ldbu	r2,0(r2)
   24038:	10803fcc 	andi	r2,r2,255
   2403c:	1080201c 	xori	r2,r2,128
   24040:	10bfe004 	addi	r2,r2,-128
   24044:	1004923a 	slli	r2,r2,8
   24048:	1009883a 	mov	r4,r2
   2404c:	e0bfff17 	ldw	r2,-4(fp)
   24050:	10800344 	addi	r2,r2,13
   24054:	10800003 	ldbu	r2,0(r2)
   24058:	10803fcc 	andi	r2,r2,255
   2405c:	1080201c 	xori	r2,r2,128
   24060:	10bfe004 	addi	r2,r2,-128
   24064:	10803fcc 	andi	r2,r2,255
   24068:	2085883a 	add	r2,r4,r2
   2406c:	10bfffcc 	andi	r2,r2,65535
   24070:	1004923a 	slli	r2,r2,8
   24074:	1884b03a 	or	r2,r3,r2
   24078:	1007883a 	mov	r3,r2
   2407c:	e0bffc17 	ldw	r2,-16(fp)
   24080:	10c0080d 	sth	r3,32(r2)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
   24084:	e0bffc17 	ldw	r2,-16(fp)
   24088:	10800117 	ldw	r2,4(r2)
   2408c:	e0fffc17 	ldw	r3,-16(fp)
   24090:	18c00617 	ldw	r3,24(r3)
   24094:	18c00817 	ldw	r3,32(r3)
   24098:	10c7883a 	add	r3,r2,r3
   2409c:	e0bffc17 	ldw	r2,-16(fp)
   240a0:	10c00315 	stw	r3,12(r2)
#endif   /* IEEE_802_3 */
            break;
   240a4:	00000e06 	br	240e0 <pktdemux+0x2a4>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
   240a8:	e0bffd17 	ldw	r2,-12(fp)
   240ac:	10802717 	ldw	r2,156(r2)
   240b0:	10800217 	ldw	r2,8(r2)
   240b4:	01000174 	movhi	r4,5
   240b8:	2137b204 	addi	r4,r4,-8504
   240bc:	100b883a 	mov	r5,r2
   240c0:	00080f80 	call	80f8 <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
   240c4:	01000084 	movi	r4,2
   240c8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(pkt);
   240cc:	e13ffc17 	ldw	r4,-16(fp)
   240d0:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   240d4:	01000084 	movi	r4,2
   240d8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            continue;
   240dc:	00003606 	br	241b8 <pktdemux+0x37c>
         }
      }

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
   240e0:	e0bffc17 	ldw	r2,-16(fp)
   240e4:	1080080b 	ldhu	r2,32(r2)
   240e8:	10bfffcc 	andi	r2,r2,65535
   240ec:	10c00220 	cmpeqi	r3,r2,8
   240f0:	1800031e 	bne	r3,zero,24100 <pktdemux+0x2c4>
   240f4:	10818220 	cmpeqi	r2,r2,1544
   240f8:	1000081e 	bne	r2,zero,2411c <pktdemux+0x2e0>
   240fc:	00000e06 	br	24138 <pktdemux+0x2fc>
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
   24100:	0009883a 	mov	r4,zero
   24104:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
   24108:	e13ffc17 	ldw	r4,-16(fp)
   2410c:	0040a6c0 	call	40a6c <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
   24110:	0009883a 	mov	r4,zero
   24114:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         break;
   24118:	00002606 	br	241b4 <pktdemux+0x378>
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
   2411c:	0009883a 	mov	r4,zero
   24120:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         arprcv(pkt);
   24124:	e13ffc17 	ldw	r4,-16(fp)
   24128:	003c3d40 	call	3c3d4 <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
   2412c:	0009883a 	mov	r4,zero
   24130:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         break;
   24134:	00001f06 	br	241b4 <pktdemux+0x378>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
   24138:	d0a86f17 	ldw	r2,-24132(gp)
   2413c:	1081000c 	andi	r2,r2,1024
   24140:	10001026 	beq	r2,zero,24184 <pktdemux+0x348>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
   24144:	e0bffc17 	ldw	r2,-16(fp)
   24148:	1080080b 	ldhu	r2,32(r2)
   2414c:	10bfffcc 	andi	r2,r2,65535
   24150:	1004d23a 	srli	r2,r2,8
   24154:	10bfffcc 	andi	r2,r2,65535
   24158:	10c03fcc 	andi	r3,r2,255
   2415c:	e0bffc17 	ldw	r2,-16(fp)
   24160:	1080080b 	ldhu	r2,32(r2)
   24164:	10bfffcc 	andi	r2,r2,65535
   24168:	1004923a 	slli	r2,r2,8
   2416c:	10bfffcc 	andi	r2,r2,65535
   24170:	1884b03a 	or	r2,r3,r2
   24174:	01000174 	movhi	r4,5
   24178:	2137ba04 	addi	r4,r4,-8472
   2417c:	100b883a 	mov	r5,r2
   24180:	00080f80 	call	80f8 <printf>
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
   24184:	e0bffd17 	ldw	r2,-12(fp)
   24188:	10802717 	ldw	r2,156(r2)
   2418c:	10c00e17 	ldw	r3,56(r2)
   24190:	18c00044 	addi	r3,r3,1
   24194:	10c00e15 	stw	r3,56(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
   24198:	01000084 	movi	r4,2
   2419c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
   241a0:	e13ffc17 	ldw	r4,-16(fp)
   241a4:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   241a8:	01000084 	movi	r4,2
   241ac:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         break;
   241b0:	0001883a 	nop
      }
      continue;
   241b4:	0001883a 	nop
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
   241b8:	008001b4 	movhi	r2,6
   241bc:	10b6d604 	addi	r2,r2,-9384
   241c0:	10800217 	ldw	r2,8(r2)
   241c4:	103f231e 	bne	r2,zero,23e54 <__alt_mem_descriptor_memory+0xdefe3e54>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         break;
      }
      continue;
   }
}
   241c8:	e037883a 	mov	sp,fp
   241cc:	dfc00117 	ldw	ra,4(sp)
   241d0:	df000017 	ldw	fp,0(sp)
   241d4:	dec00204 	addi	sp,sp,8
   241d8:	f800283a 	ret

000241dc <c_older>:
 * RETURNS: the older of the two passed tick counts
 */

u_long
c_older(u_long ct1, u_long ct2)
{
   241dc:	defffd04 	addi	sp,sp,-12
   241e0:	df000215 	stw	fp,8(sp)
   241e4:	df000204 	addi	fp,sp,8
   241e8:	e13ffe15 	stw	r4,-8(fp)
   241ec:	e17fff15 	stw	r5,-4(fp)

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
   241f0:	00800174 	movhi	r2,5
   241f4:	108fbe04 	addi	r2,r2,16120
   241f8:	10800017 	ldw	r2,0(r2)
   241fc:	1000140e 	bge	r2,zero,24250 <c_older+0x74>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
   24200:	00800174 	movhi	r2,5
   24204:	108fbe04 	addi	r2,r2,16120
   24208:	10c00017 	ldw	r3,0(r2)

u_long
c_older(u_long ct1, u_long ct2)
{

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
   2420c:	e0bffe17 	ldw	r2,-8(fp)
   24210:	18800536 	bltu	r3,r2,24228 <c_older+0x4c>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
   24214:	00800174 	movhi	r2,5
   24218:	108fbe04 	addi	r2,r2,16120
   2421c:	10c00017 	ldw	r3,0(r2)
   24220:	e0bfff17 	ldw	r2,-4(fp)
   24224:	18800a2e 	bgeu	r3,r2,24250 <c_older+0x74>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
   24228:	00800174 	movhi	r2,5
   2422c:	108fbe04 	addi	r2,r2,16120
   24230:	10800017 	ldw	r2,0(r2)
u_long
c_older(u_long ct1, u_long ct2)
{

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
   24234:	e0fffe17 	ldw	r3,-8(fp)
   24238:	18800c36 	bltu	r3,r2,2426c <c_older+0x90>
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
   2423c:	00800174 	movhi	r2,5
   24240:	108fbe04 	addi	r2,r2,16120
   24244:	10800017 	ldw	r2,0(r2)
   24248:	e0ffff17 	ldw	r3,-4(fp)
   2424c:	18800736 	bltu	r3,r2,2426c <c_older+0x90>
   {
      if (ct1 < ct2)
   24250:	e0fffe17 	ldw	r3,-8(fp)
   24254:	e0bfff17 	ldw	r2,-4(fp)
   24258:	1880022e 	bgeu	r3,r2,24264 <c_older+0x88>
         return(ct1);      /* then smaller is oldest */
   2425c:	e0bffe17 	ldw	r2,-8(fp)
   24260:	00000806 	br	24284 <c_older+0xa8>
      else 
         return(ct2);
   24264:	e0bfff17 	ldw	r2,-4(fp)
   24268:	00000606 	br	24284 <c_older+0xa8>
   }

   /* else one is less than cticks, and one is greater.
   the larger value is then the oldest */
   if (ct1 >= ct2)
   2426c:	e0fffe17 	ldw	r3,-8(fp)
   24270:	e0bfff17 	ldw	r2,-4(fp)
   24274:	18800236 	bltu	r3,r2,24280 <c_older+0xa4>
      return(ct1);
   24278:	e0bffe17 	ldw	r2,-8(fp)
   2427c:	00000106 	br	24284 <c_older+0xa8>
   else
      return(ct2);
   24280:	e0bfff17 	ldw	r2,-4(fp)
}
   24284:	e037883a 	mov	sp,fp
   24288:	df000017 	ldw	fp,0(sp)
   2428c:	dec00104 	addi	sp,sp,4
   24290:	f800283a 	ret

00024294 <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
   24294:	defffb04 	addi	sp,sp,-20
   24298:	dfc00415 	stw	ra,16(sp)
   2429c:	df000315 	stw	fp,12(sp)
   242a0:	df000304 	addi	fp,sp,12
   242a4:	e13ffe15 	stw	r4,-8(fp)
   242a8:	e17fff15 	stw	r5,-4(fp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
   242ac:	e0bffe17 	ldw	r2,-8(fp)
   242b0:	10800617 	ldw	r2,24(r2)
   242b4:	10802717 	ldw	r2,156(r2)
   242b8:	e0bffd15 	stw	r2,-12(fp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
   242bc:	e0bffd17 	ldw	r2,-12(fp)
   242c0:	10800617 	ldw	r2,24(r2)
   242c4:	10800098 	cmpnei	r2,r2,2
   242c8:	1000081e 	bne	r2,zero,242ec <ip2mac+0x58>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   242cc:	01000084 	movi	r4,2
   242d0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);
   242d4:	e13ffe17 	ldw	r4,-8(fp)
   242d8:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   242dc:	01000084 	movi	r4,2
   242e0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return(ENP_NO_ROUTE);
   242e4:	00bff7c4 	movi	r2,-33
   242e8:	00004806 	br	2440c <ip2mac+0x178>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
   242ec:	e0bffe17 	ldw	r2,-8(fp)
   242f0:	10800617 	ldw	r2,24(r2)
   242f4:	10800817 	ldw	r2,32(r2)
   242f8:	10000826 	beq	r2,zero,2431c <ip2mac+0x88>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
   242fc:	e0bffd17 	ldw	r2,-12(fp)
   24300:	10800217 	ldw	r2,8(r2)
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
   24304:	108005e0 	cmpeqi	r2,r2,23
   24308:	1000041e 	bne	r2,zero,2431c <ip2mac+0x88>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   2430c:	e0bffd17 	ldw	r2,-12(fp)
   24310:	10800217 	ldw	r2,8(r2)
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
   24314:	10800718 	cmpnei	r2,r2,28
   24318:	1000291e 	bne	r2,zero,243c0 <ip2mac+0x12c>
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
   2431c:	e0bffd17 	ldw	r2,-12(fp)
   24320:	10801017 	ldw	r2,64(r2)
   24324:	10c00044 	addi	r3,r2,1
   24328:	e0bffd17 	ldw	r2,-12(fp)
   2432c:	10c01015 	stw	r3,64(r2)
      ifmib->ifOutOctets += pkt->nb_plen;
   24330:	e0bffd17 	ldw	r2,-12(fp)
   24334:	10c00f17 	ldw	r3,60(r2)
   24338:	e0bffe17 	ldw	r2,-8(fp)
   2433c:	10800417 	ldw	r2,16(r2)
   24340:	1887883a 	add	r3,r3,r2
   24344:	e0bffd17 	ldw	r2,-12(fp)
   24348:	10c00f15 	stw	r3,60(r2)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
   2434c:	e0bffe17 	ldw	r2,-8(fp)
   24350:	10800617 	ldw	r2,24(r2)
   24354:	10800417 	ldw	r2,16(r2)
   24358:	10000626 	beq	r2,zero,24374 <ip2mac+0xe0>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
   2435c:	e0bffe17 	ldw	r2,-8(fp)
   24360:	10800617 	ldw	r2,24(r2)
   24364:	10800417 	ldw	r2,16(r2)
   24368:	e13ffe17 	ldw	r4,-8(fp)
   2436c:	103ee83a 	callr	r2
   24370:	00001106 	br	243b8 <ip2mac+0x124>
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
   24374:	e0bffe17 	ldw	r2,-8(fp)
   24378:	10800617 	ldw	r2,24(r2)
   2437c:	10800317 	ldw	r2,12(r2)
   24380:	e0fffe17 	ldw	r3,-8(fp)
   24384:	19000617 	ldw	r4,24(r3)
   24388:	e0fffe17 	ldw	r3,-8(fp)
   2438c:	19400317 	ldw	r5,12(r3)
   24390:	e0fffe17 	ldw	r3,-8(fp)
   24394:	18c00417 	ldw	r3,16(r3)
   24398:	180d883a 	mov	r6,r3
   2439c:	103ee83a 	callr	r2
         LOCK_NET_RESOURCE(FREEQ_RESID);
   243a0:	01000084 	movi	r4,2
   243a4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);
   243a8:	e13ffe17 	ldw	r4,-8(fp)
   243ac:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   243b0:	01000084 	movi	r4,2
   243b4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      }
      return(SUCCESS);
   243b8:	0005883a 	mov	r2,zero
   243bc:	00001306 	br	2440c <ip2mac+0x178>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
   243c0:	e0bffe17 	ldw	r2,-8(fp)
   243c4:	10800617 	ldw	r2,24(r2)
   243c8:	10800a17 	ldw	r2,40(r2)
   243cc:	10000c1e 	bne	r2,zero,24400 <ip2mac+0x16c>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
   243d0:	e0bffe17 	ldw	r2,-8(fp)
   243d4:	10800717 	ldw	r2,28(r2)
   243d8:	10bfffe0 	cmpeqi	r2,r2,-1
   243dc:	1000081e 	bne	r2,zero,24400 <ip2mac+0x16c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   243e0:	01000084 	movi	r4,2
   243e4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);
   243e8:	e13ffe17 	ldw	r4,-8(fp)
   243ec:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   243f0:	01000084 	movi	r4,2
   243f4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return ENP_SENDERR;
   243f8:	00bff884 	movi	r2,-30
   243fc:	00000306 	br	2440c <ip2mac+0x178>
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
   24400:	e13ffe17 	ldw	r4,-8(fp)
   24404:	e17fff17 	ldw	r5,-4(fp)
   24408:	003c6400 	call	3c640 <send_via_arp>
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
   2440c:	e037883a 	mov	sp,fp
   24410:	dfc00117 	ldw	ra,4(sp)
   24414:	df000017 	ldw	fp,0(sp)
   24418:	dec00204 	addi	sp,sp,8
   2441c:	f800283a 	ret

00024420 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
   24420:	defffc04 	addi	sp,sp,-16
   24424:	dfc00315 	stw	ra,12(sp)
   24428:	df000215 	stw	fp,8(sp)
   2442c:	df000204 	addi	fp,sp,8
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
   24430:	e03ffe15 	stw	zero,-8(fp)
   24434:	00002a06 	br	244e0 <ip_startup+0xc0>
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
   24438:	e0bffe17 	ldw	r2,-8(fp)
   2443c:	10c03024 	muli	r3,r2,192
   24440:	008001b4 	movhi	r2,6
   24444:	10b6db04 	addi	r2,r2,-9364
   24448:	1889883a 	add	r4,r3,r2
   2444c:	008001b4 	movhi	r2,6
   24450:	10b79b04 	addi	r2,r2,-8596
   24454:	e0fffe17 	ldw	r3,-8(fp)
   24458:	18c7883a 	add	r3,r3,r3
   2445c:	18c7883a 	add	r3,r3,r3
   24460:	10c5883a 	add	r2,r2,r3
   24464:	11000015 	stw	r4,0(r2)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
   24468:	008001b4 	movhi	r2,6
   2446c:	10b79b04 	addi	r2,r2,-8596
   24470:	e0fffe17 	ldw	r3,-8(fp)
   24474:	18c7883a 	add	r3,r3,r3
   24478:	18c7883a 	add	r3,r3,r3
   2447c:	10c5883a 	add	r2,r2,r3
   24480:	11000017 	ldw	r4,0(r2)
   24484:	008001b4 	movhi	r2,6
   24488:	10b79b04 	addi	r2,r2,-8596
   2448c:	e0fffe17 	ldw	r3,-8(fp)
   24490:	18c7883a 	add	r3,r3,r3
   24494:	18c7883a 	add	r3,r3,r3
   24498:	10c5883a 	add	r2,r2,r3
   2449c:	10800017 	ldw	r2,0(r2)
   244a0:	10801204 	addi	r2,r2,72
   244a4:	20802715 	stw	r2,156(r4)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
   244a8:	008001b4 	movhi	r2,6
   244ac:	10b79b04 	addi	r2,r2,-8596
   244b0:	e0fffe17 	ldw	r3,-8(fp)
   244b4:	18c7883a 	add	r3,r3,r3
   244b8:	18c7883a 	add	r3,r3,r3
   244bc:	10c5883a 	add	r2,r2,r3
   244c0:	10800017 	ldw	r2,0(r2)
   244c4:	010001b4 	movhi	r4,6
   244c8:	2139dc04 	addi	r4,r4,-6288
   244cc:	100b883a 	mov	r5,r2
   244d0:	002aacc0 	call	2aacc <putq>
{
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
   244d4:	e0bffe17 	ldw	r2,-8(fp)
   244d8:	10800044 	addi	r2,r2,1
   244dc:	e0bffe15 	stw	r2,-8(fp)
   244e0:	e0bffe17 	ldw	r2,-8(fp)
   244e4:	10800110 	cmplti	r2,r2,4
   244e8:	103fd31e 	bne	r2,zero,24438 <__alt_mem_descriptor_memory+0xdefe4438>
      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
   244ec:	d0a87017 	ldw	r2,-24128(gp)
   244f0:	1009883a 	mov	r4,r2
   244f4:	0041ac00 	call	41ac0 <prep_ifaces>
   244f8:	d0a87015 	stw	r2,-24128(gp)

   if (ifNumber < 1)    /* no static interfaces? */
   244fc:	d0a87017 	ldw	r2,-24128(gp)
   24500:	1000031e 	bne	r2,zero,24510 <ip_startup+0xf0>
#ifdef DYNAMIC_IFACES
      /* print a debug message and hope user knows what he's doing */
      dprintf("unable to find any working interfaces");
#else /* static ifaces only */
      /* no static and no dynamic interfaces is probably a bug... */
      return("unable to find any working interfaces");
   24504:	00800174 	movhi	r2,5
   24508:	10b7cb04 	addi	r2,r2,-8404
   2450c:	00006906 	br	246b4 <ip_startup+0x294>
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
   24510:	d0a87017 	ldw	r2,-24128(gp)
   24514:	e0bffe15 	stw	r2,-8(fp)
   24518:	00001506 	br	24570 <ip_startup+0x150>
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
   2451c:	008001b4 	movhi	r2,6
   24520:	10b79b04 	addi	r2,r2,-8596
   24524:	e0fffe17 	ldw	r3,-8(fp)
   24528:	18c7883a 	add	r3,r3,r3
   2452c:	18c7883a 	add	r3,r3,r3
   24530:	10c5883a 	add	r2,r2,r3
   24534:	10800017 	ldw	r2,0(r2)
   24538:	010001b4 	movhi	r4,6
   2453c:	2139dc04 	addi	r4,r4,-6288
   24540:	100b883a 	mov	r5,r2
   24544:	002ab780 	call	2ab78 <qdel>
      nets[i] = NULL;               /* remove from array */
   24548:	008001b4 	movhi	r2,6
   2454c:	10b79b04 	addi	r2,r2,-8596
   24550:	e0fffe17 	ldw	r3,-8(fp)
   24554:	18c7883a 	add	r3,r3,r3
   24558:	18c7883a 	add	r3,r3,r3
   2455c:	10c5883a 	add	r2,r2,r3
   24560:	10000015 	stw	zero,0(r2)
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
   24564:	e0bffe17 	ldw	r2,-8(fp)
   24568:	10800044 	addi	r2,r2,1
   2456c:	e0bffe15 	stw	r2,-8(fp)
   24570:	e0bffe17 	ldw	r2,-8(fp)
   24574:	10800110 	cmplti	r2,r2,4
   24578:	103fe81e 	bne	r2,zero,2451c <__alt_mem_descriptor_memory+0xdefe451c>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
   2457c:	002b2240 	call	2b224 <clock_init>
   exit_hook(clock_c);
   24580:	010000f4 	movhi	r4,3
   24584:	212c9804 	addi	r4,r4,-19872
   24588:	00246c80 	call	246c8 <exit_hook>

   e = Netinit();    /* start net interface(s) */
   2458c:	00236100 	call	23610 <Netinit>
   24590:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   24594:	e0bfff17 	ldw	r2,-4(fp)
   24598:	10000326 	beq	r2,zero,245a8 <ip_startup+0x188>
   {
      return("unable to initialize net");
   2459c:	00800174 	movhi	r2,5
   245a0:	10b7d504 	addi	r2,r2,-8364
   245a4:	00004306 	br	246b4 <ip_startup+0x294>
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
   245a8:	003b7840 	call	3b784 <etainit>
   245ac:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   245b0:	e0bfff17 	ldw	r2,-4(fp)
   245b4:	10000426 	beq	r2,zero,245c8 <ip_startup+0x1a8>
   {
      ip_exit();
   245b8:	00247340 	call	24734 <ip_exit>
      return("unable to initialize arp");
   245bc:	00800174 	movhi	r2,5
   245c0:	10b7dc04 	addi	r2,r2,-8336
   245c4:	00003b06 	br	246b4 <ip_startup+0x294>
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
   245c8:	003cdf40 	call	3cdf4 <ip_init>
   245cc:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   245d0:	e0bfff17 	ldw	r2,-4(fp)
   245d4:	10000426 	beq	r2,zero,245e8 <ip_startup+0x1c8>
   {
      ip_exit();
   245d8:	00247340 	call	24734 <ip_exit>
      return("unable to initialize IP");
   245dc:	00800174 	movhi	r2,5
   245e0:	10b7e304 	addi	r2,r2,-8308
   245e4:	00003306 	br	246b4 <ip_startup+0x294>

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
   245e8:	00248840 	call	24884 <igmp_init>
   245ec:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   245f0:	e0bfff17 	ldw	r2,-4(fp)
   245f4:	10000326 	beq	r2,zero,24604 <ip_startup+0x1e4>
   {
      ip_exit();
   245f8:	00247340 	call	24734 <ip_exit>
      return(ipmcfail_str);
   245fc:	d0a02d17 	ldw	r2,-32588(gp)
   24600:	00002c06 	br	246b4 <ip_startup+0x294>
   }

   for (i = 0; i < (int)ifNumber; i++)
   24604:	e03ffe15 	stw	zero,-8(fp)
   24608:	00001c06 	br	2467c <ip_startup+0x25c>
   {
      if (nets[i]->n_mcastlist != NULL)
   2460c:	008001b4 	movhi	r2,6
   24610:	10b79b04 	addi	r2,r2,-8596
   24614:	e0fffe17 	ldw	r3,-8(fp)
   24618:	18c7883a 	add	r3,r3,r3
   2461c:	18c7883a 	add	r3,r3,r3
   24620:	10c5883a 	add	r2,r2,r3
   24624:	10800017 	ldw	r2,0(r2)
   24628:	10802b17 	ldw	r2,172(r2)
   2462c:	10001026 	beq	r2,zero,24670 <ip_startup+0x250>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
   24630:	008001b4 	movhi	r2,6
   24634:	10b79b04 	addi	r2,r2,-8596
   24638:	e0fffe17 	ldw	r3,-8(fp)
   2463c:	18c7883a 	add	r3,r3,r3
   24640:	18c7883a 	add	r3,r3,r3
   24644:	10c5883a 	add	r2,r2,r3
   24648:	10800017 	ldw	r2,0(r2)
   2464c:	01000174 	movhi	r4,5
   24650:	210f9e04 	addi	r4,r4,15992
   24654:	100b883a 	mov	r5,r2
   24658:	01800104 	movi	r6,4
   2465c:	00418080 	call	41808 <in_addmulti>
   24660:	1000031e 	bne	r2,zero,24670 <ip_startup+0x250>
      {
         ip_exit();
   24664:	00247340 	call	24734 <ip_exit>
         return(ipmcfail_str);
   24668:	d0a02d17 	ldw	r2,-32588(gp)
   2466c:	00001106 	br	246b4 <ip_startup+0x294>
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
   24670:	e0bffe17 	ldw	r2,-8(fp)
   24674:	10800044 	addi	r2,r2,1
   24678:	e0bffe15 	stw	r2,-8(fp)
   2467c:	d0a87017 	ldw	r2,-24128(gp)
   24680:	1007883a 	mov	r3,r2
   24684:	e0bffe17 	ldw	r2,-8(fp)
   24688:	10ffe016 	blt	r2,r3,2460c <__alt_mem_descriptor_memory+0xdefe460c>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
   2468c:	00389fc0 	call	389fc <tcpinit>
   24690:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   24694:	e0bfff17 	ldw	r2,-4(fp)
   24698:	10000426 	beq	r2,zero,246ac <ip_startup+0x28c>
   {
      ip_exit();
   2469c:	00247340 	call	24734 <ip_exit>
      return("unable to initialize TCP");
   246a0:	00800174 	movhi	r2,5
   246a4:	10b7e904 	addi	r2,r2,-8284
   246a8:	00000206 	br	246b4 <ip_startup+0x294>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
   246ac:	0041b700 	call	41b70 <evtmap_setup>
      return("unable to initialize IP Filter table");
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
   246b0:	0005883a 	mov	r2,zero
}
   246b4:	e037883a 	mov	sp,fp
   246b8:	dfc00117 	ldw	ra,4(sp)
   246bc:	df000017 	ldw	fp,0(sp)
   246c0:	dec00204 	addi	sp,sp,8
   246c4:	f800283a 	ret

000246c8 <exit_hook>:
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
   246c8:	defffd04 	addi	sp,sp,-12
   246cc:	dfc00215 	stw	ra,8(sp)
   246d0:	df000115 	stw	fp,4(sp)
   246d4:	df000104 	addi	fp,sp,4
   246d8:	e13fff15 	stw	r4,-4(fp)
   if (nclosers >= (NUMCLOSERS-1))
   246dc:	d0a87117 	ldw	r2,-24124(gp)
   246e0:	10800390 	cmplti	r2,r2,14
   246e4:	1000031e 	bne	r2,zero,246f4 <exit_hook+0x2c>
      panic("exit_hook");
   246e8:	01000174 	movhi	r4,5
   246ec:	2137f004 	addi	r4,r4,-8256
   246f0:	00267380 	call	26738 <panic>

   closers[++nclosers] = func;
   246f4:	d0a87117 	ldw	r2,-24124(gp)
   246f8:	10800044 	addi	r2,r2,1
   246fc:	d0a87115 	stw	r2,-24124(gp)
   24700:	d0e87117 	ldw	r3,-24124(gp)
   24704:	00800174 	movhi	r2,5
   24708:	10917a04 	addi	r2,r2,17896
   2470c:	18c7883a 	add	r3,r3,r3
   24710:	18c7883a 	add	r3,r3,r3
   24714:	10c5883a 	add	r2,r2,r3
   24718:	e0ffff17 	ldw	r3,-4(fp)
   2471c:	10c00015 	stw	r3,0(r2)
}
   24720:	e037883a 	mov	sp,fp
   24724:	dfc00117 	ldw	ra,4(sp)
   24728:	df000017 	ldw	fp,0(sp)
   2472c:	dec00204 	addi	sp,sp,8
   24730:	f800283a 	ret

00024734 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
   24734:	defffd04 	addi	sp,sp,-12
   24738:	dfc00215 	stw	ra,8(sp)
   2473c:	df000115 	stw	fp,4(sp)
   24740:	df000104 	addi	fp,sp,4
   int   n;

   for (n=nclosers; n; n--)
   24744:	d0a87117 	ldw	r2,-24124(gp)
   24748:	e0bfff15 	stw	r2,-4(fp)
   2474c:	00002506 	br	247e4 <ip_exit+0xb0>
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
   24750:	00800174 	movhi	r2,5
   24754:	10917a04 	addi	r2,r2,17896
   24758:	e0ffff17 	ldw	r3,-4(fp)
   2475c:	18c7883a 	add	r3,r3,r3
   24760:	18c7883a 	add	r3,r3,r3
   24764:	10c5883a 	add	r2,r2,r3
   24768:	10800017 	ldw	r2,0(r2)
   2476c:	01000174 	movhi	r4,5
   24770:	2137f304 	addi	r4,r4,-8244
   24774:	100b883a 	mov	r5,r2
   24778:	00080f80 	call	80f8 <printf>
#endif
      if(closers[n])
   2477c:	00800174 	movhi	r2,5
   24780:	10917a04 	addi	r2,r2,17896
   24784:	e0ffff17 	ldw	r3,-4(fp)
   24788:	18c7883a 	add	r3,r3,r3
   2478c:	18c7883a 	add	r3,r3,r3
   24790:	10c5883a 	add	r2,r2,r3
   24794:	10800017 	ldw	r2,0(r2)
   24798:	10000f26 	beq	r2,zero,247d8 <ip_exit+0xa4>
      {
         (*closers[n])();
   2479c:	00800174 	movhi	r2,5
   247a0:	10917a04 	addi	r2,r2,17896
   247a4:	e0ffff17 	ldw	r3,-4(fp)
   247a8:	18c7883a 	add	r3,r3,r3
   247ac:	18c7883a 	add	r3,r3,r3
   247b0:	10c5883a 	add	r2,r2,r3
   247b4:	10800017 	ldw	r2,0(r2)
   247b8:	103ee83a 	callr	r2
         closers[n] = NULL;
   247bc:	00800174 	movhi	r2,5
   247c0:	10917a04 	addi	r2,r2,17896
   247c4:	e0ffff17 	ldw	r3,-4(fp)
   247c8:	18c7883a 	add	r3,r3,r3
   247cc:	18c7883a 	add	r3,r3,r3
   247d0:	10c5883a 	add	r2,r2,r3
   247d4:	10000015 	stw	zero,0(r2)
void
ip_exit()
{
   int   n;

   for (n=nclosers; n; n--)
   247d8:	e0bfff17 	ldw	r2,-4(fp)
   247dc:	10bfffc4 	addi	r2,r2,-1
   247e0:	e0bfff15 	stw	r2,-4(fp)
   247e4:	e0bfff17 	ldw	r2,-4(fp)
   247e8:	103fd91e 	bne	r2,zero,24750 <__alt_mem_descriptor_memory+0xdefe4750>
      {
         (*closers[n])();
         closers[n] = NULL;
      }
   }
}
   247ec:	e037883a 	mov	sp,fp
   247f0:	dfc00117 	ldw	ra,4(sp)
   247f4:	df000017 	ldw	fp,0(sp)
   247f8:	dec00204 	addi	sp,sp,8
   247fc:	f800283a 	ret

00024800 <if_netnumber>:
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
   24800:	defffb04 	addi	sp,sp,-20
   24804:	dfc00415 	stw	ra,16(sp)
   24808:	df000315 	stw	fp,12(sp)
   2480c:	df000304 	addi	fp,sp,12
   24810:	e13fff15 	stw	r4,-4(fp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
   24814:	008001b4 	movhi	r2,6
   24818:	10b9dc04 	addi	r2,r2,-6288
   2481c:	10800017 	ldw	r2,0(r2)
   24820:	e0bffe15 	stw	r2,-8(fp)
   24824:	e03ffd15 	stw	zero,-12(fp)
   24828:	00000b06 	br	24858 <if_netnumber+0x58>
   {
      if(ifp == nptr)
   2482c:	e0fffe17 	ldw	r3,-8(fp)
   24830:	e0bfff17 	ldw	r2,-4(fp)
   24834:	1880021e 	bne	r3,r2,24840 <if_netnumber+0x40>
        return (int)i;
   24838:	e0bffd17 	ldw	r2,-12(fp)
   2483c:	00000c06 	br	24870 <if_netnumber+0x70>
if_netnumber(NET nptr)
{
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
   24840:	e0bffe17 	ldw	r2,-8(fp)
   24844:	10800017 	ldw	r2,0(r2)
   24848:	e0bffe15 	stw	r2,-8(fp)
   2484c:	e0bffd17 	ldw	r2,-12(fp)
   24850:	10800044 	addi	r2,r2,1
   24854:	e0bffd15 	stw	r2,-12(fp)
   24858:	e0bffe17 	ldw	r2,-8(fp)
   2485c:	103ff31e 	bne	r2,zero,2482c <__alt_mem_descriptor_memory+0xdefe482c>
   {
      if(ifp == nptr)
        return (int)i;
   }

   panic("bad net ptr");
   24860:	01000174 	movhi	r4,5
   24864:	2137fa04 	addi	r4,r4,-8216
   24868:	00267380 	call	26738 <panic>
   return 0;
   2486c:	0005883a 	mov	r2,zero
}
   24870:	e037883a 	mov	sp,fp
   24874:	dfc00117 	ldw	ra,4(sp)
   24878:	df000017 	ldw	fp,0(sp)
   2487c:	dec00204 	addi	sp,sp,8
   24880:	f800283a 	ret

00024884 <igmp_init>:
 *
 * OUTPUT: None.
 */

int igmp_init(void)
{
   24884:	defffe04 	addi	sp,sp,-8
   24888:	df000115 	stw	fp,4(sp)
   2488c:	df000104 	addi	fp,sp,4
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
   24890:	00804034 	movhi	r2,256
   24894:	10803804 	addi	r2,r2,224
   24898:	d0a87415 	stw	r2,-24112(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
   2489c:	00808034 	movhi	r2,512
   248a0:	10803804 	addi	r2,r2,224
   248a4:	d0a87515 	stw	r2,-24108(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
   248a8:	008001b4 	movhi	r2,6
   248ac:	10b9dc04 	addi	r2,r2,-6288
   248b0:	10800017 	ldw	r2,0(r2)
   248b4:	e0bfff15 	stw	r2,-4(fp)
   248b8:	00001006 	br	248fc <igmp_init+0x78>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
   248bc:	e0bfff17 	ldw	r2,-4(fp)
   248c0:	10802f03 	ldbu	r2,188(r2)
   248c4:	10803fcc 	andi	r2,r2,255
   248c8:	10800058 	cmpnei	r2,r2,1
   248cc:	1000041e 	bne	r2,zero,248e0 <igmp_init+0x5c>
      {
         ifp->igmpv1_rtr_present = 1;
   248d0:	e0bfff17 	ldw	r2,-4(fp)
   248d4:	00c00044 	movi	r3,1
   248d8:	10c02d05 	stb	r3,180(r2)
   248dc:	00000406 	br	248f0 <igmp_init+0x6c>
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
   248e0:	e0bfff17 	ldw	r2,-4(fp)
   248e4:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
   248e8:	e0bfff17 	ldw	r2,-4(fp)
   248ec:	10002e15 	stw	zero,184(r2)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
   248f0:	e0bfff17 	ldw	r2,-4(fp)
   248f4:	10800017 	ldw	r2,0(r2)
   248f8:	e0bfff15 	stw	r2,-4(fp)
   248fc:	e0bfff17 	ldw	r2,-4(fp)
   24900:	103fee1e 	bne	r2,zero,248bc <__alt_mem_descriptor_memory+0xdefe48bc>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
   24904:	00800174 	movhi	r2,5
   24908:	108fbe04 	addi	r2,r2,16120
   2490c:	10800017 	ldw	r2,0(r2)
   24910:	10800504 	addi	r2,r2,20
   24914:	d0a87315 	stw	r2,-24116(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
   24918:	d0287215 	stw	zero,-24120(gp)

   return IGMP_OK;
   2491c:	0005883a 	mov	r2,zero
}
   24920:	e037883a 	mov	sp,fp
   24924:	df000017 	ldw	fp,0(sp)
   24928:	dec00104 	addi	sp,sp,4
   2492c:	f800283a 	ret

00024930 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
   24930:	defffb04 	addi	sp,sp,-20
   24934:	dfc00415 	stw	ra,16(sp)
   24938:	df000315 	stw	fp,12(sp)
   2493c:	df000304 	addi	fp,sp,12
   24940:	e13fff15 	stw	r4,-4(fp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
   24944:	008001b4 	movhi	r2,6
   24948:	10b79f04 	addi	r2,r2,-8580
   2494c:	10800017 	ldw	r2,0(r2)
   24950:	10c00044 	addi	r3,r2,1
   24954:	008001b4 	movhi	r2,6
   24958:	10b79f04 	addi	r2,r2,-8580
   2495c:	10c00015 	stw	r3,0(r2)
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
   24960:	e13fff17 	ldw	r4,-4(fp)
   24964:	00251040 	call	25104 <igmp_validate>
   24968:	e0bffd15 	stw	r2,-12(fp)
   2496c:	e0bffd17 	ldw	r2,-12(fp)
   24970:	10000126 	beq	r2,zero,24978 <igmp_input+0x48>
   24974:	00001a06 	br	249e0 <igmp_input+0xb0>

   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
   24978:	e0bfff17 	ldw	r2,-4(fp)
   2497c:	10800617 	ldw	r2,24(r2)
   24980:	10802f03 	ldbu	r2,188(r2)
   24984:	e0bffe05 	stb	r2,-8(fp)
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
   24988:	e0bffe03 	ldbu	r2,-8(fp)
   2498c:	10c00060 	cmpeqi	r3,r2,1
   24990:	1800031e 	bne	r3,zero,249a0 <igmp_input+0x70>
   24994:	108000a0 	cmpeqi	r2,r2,2
   24998:	1000041e 	bne	r2,zero,249ac <igmp_input+0x7c>
   2499c:	00000606 	br	249b8 <igmp_input+0x88>
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
   249a0:	e13fff17 	ldw	r4,-4(fp)
   249a4:	00434a40 	call	434a4 <igmpv1_input>
   249a8:	00001406 	br	249fc <igmp_input+0xcc>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
   249ac:	e13fff17 	ldw	r4,-4(fp)
   249b0:	004376c0 	call	4376c <igmpv2_input>
   249b4:	00001106 	br	249fc <igmp_input+0xcc>
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
   249b8:	008001b4 	movhi	r2,6
   249bc:	10b79f04 	addi	r2,r2,-8580
   249c0:	10800d17 	ldw	r2,52(r2)
   249c4:	10c00044 	addi	r3,r2,1
   249c8:	008001b4 	movhi	r2,6
   249cc:	10b79f04 	addi	r2,r2,-8580
   249d0:	10c00d15 	stw	r3,52(r2)
         rc = IGMP_ERR;
   249d4:	00bfffc4 	movi	r2,-1
   249d8:	e0bffd15 	stw	r2,-12(fp)
         break;
   249dc:	0001883a 	nop
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   249e0:	01000084 	movi	r4,2
   249e4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   249e8:	e13fff17 	ldw	r4,-4(fp)
   249ec:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   249f0:	01000084 	movi	r4,2
   249f4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      
   return rc;
   249f8:	e0bffd17 	ldw	r2,-12(fp)
}
   249fc:	e037883a 	mov	sp,fp
   24a00:	dfc00117 	ldw	ra,4(sp)
   24a04:	df000017 	ldw	fp,0(sp)
   24a08:	dec00204 	addi	sp,sp,8
   24a0c:	f800283a 	ret

00024a10 <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
   24a10:	defffc04 	addi	sp,sp,-16
   24a14:	dfc00315 	stw	ra,12(sp)
   24a18:	df000215 	stw	fp,8(sp)
   24a1c:	df000204 	addi	fp,sp,8
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
   24a20:	0009883a 	mov	r4,zero
   24a24:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
   24a28:	d0a87217 	ldw	r2,-24120(gp)
   24a2c:	1000031e 	bne	r2,zero,24a3c <igmp_fasttimo+0x2c>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
   24a30:	0009883a 	mov	r4,zero
   24a34:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return;
   24a38:	00005006 	br	24b7c <igmp_fasttimo+0x16c>
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   24a3c:	008001b4 	movhi	r2,6
   24a40:	10b9dc04 	addi	r2,r2,-6288
   24a44:	10800017 	ldw	r2,0(r2)
   24a48:	e0bfff15 	stw	r2,-4(fp)
   24a4c:	00004106 	br	24b54 <igmp_fasttimo+0x144>
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
   24a50:	e0bfff17 	ldw	r2,-4(fp)
   24a54:	10802c17 	ldw	r2,176(r2)
   24a58:	e0bffe15 	stw	r2,-8(fp)
   24a5c:	00003806 	br	24b40 <igmp_fasttimo+0x130>
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
   24a60:	e0bffe17 	ldw	r2,-8(fp)
   24a64:	10800017 	ldw	r2,0(r2)
   24a68:	1000011e 	bne	r2,zero,24a70 <igmp_fasttimo+0x60>
               continue;
   24a6c:	00003106 	br	24b34 <igmp_fasttimo+0x124>

         if (inm->inm_timer == 0)   /* timer not set */
   24a70:	e0bffe17 	ldw	r2,-8(fp)
   24a74:	10800317 	ldw	r2,12(r2)
   24a78:	10002e26 	beq	r2,zero,24b34 <igmp_fasttimo+0x124>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
   24a7c:	e0bffe17 	ldw	r2,-8(fp)
   24a80:	10800317 	ldw	r2,12(r2)
   24a84:	10ffffc4 	addi	r3,r2,-1
   24a88:	e0bffe17 	ldw	r2,-8(fp)
   24a8c:	10c00315 	stw	r3,12(r2)
   24a90:	e0bffe17 	ldw	r2,-8(fp)
   24a94:	10800317 	ldw	r2,12(r2)
   24a98:	1000261e 	bne	r2,zero,24b34 <igmp_fasttimo+0x124>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
   24a9c:	e0bfff17 	ldw	r2,-4(fp)
   24aa0:	10802d03 	ldbu	r2,180(r2)
   24aa4:	10803fcc 	andi	r2,r2,255
   24aa8:	10000426 	beq	r2,zero,24abc <igmp_fasttimo+0xac>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
   24aac:	01000484 	movi	r4,18
   24ab0:	e17ffe17 	ldw	r5,-8(fp)
   24ab4:	0024b900 	call	24b90 <igmp_send>
   24ab8:	00000306 	br	24ac8 <igmp_fasttimo+0xb8>
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
   24abc:	01000584 	movi	r4,22
   24ac0:	e17ffe17 	ldw	r5,-8(fp)
   24ac4:	0024b900 	call	24b90 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
   24ac8:	e0bfff17 	ldw	r2,-4(fp)
   24acc:	10802f03 	ldbu	r2,188(r2)
   24ad0:	10803fcc 	andi	r2,r2,255
   24ad4:	10800098 	cmpnei	r2,r2,2
   24ad8:	1000131e 	bne	r2,zero,24b28 <igmp_fasttimo+0x118>
            {
               inm->last2send_report = IGMP_TRUE;
   24adc:	e0bffe17 	ldw	r2,-8(fp)
   24ae0:	00c00044 	movi	r3,1
   24ae4:	10c00405 	stb	r3,16(r2)
               
               if (ifp->igmpv1_rtr_present)
   24ae8:	e0bfff17 	ldw	r2,-4(fp)
   24aec:	10802d03 	ldbu	r2,180(r2)
   24af0:	10803fcc 	andi	r2,r2,255
   24af4:	10000c26 	beq	r2,zero,24b28 <igmp_fasttimo+0x118>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
   24af8:	e0bfff17 	ldw	r2,-4(fp)
   24afc:	10c02e17 	ldw	r3,184(r2)
   24b00:	00a71014 	movui	r2,40000
   24b04:	1887883a 	add	r3,r3,r2
   24b08:	00800174 	movhi	r2,5
   24b0c:	108fbe04 	addi	r2,r2,16120
   24b10:	10800017 	ldw	r2,0(r2)
   24b14:	1880042e 	bgeu	r3,r2,24b28 <igmp_fasttimo+0x118>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
   24b18:	e0bfff17 	ldw	r2,-4(fp)
   24b1c:	10002d05 	stb	zero,180(r2)
                     ifp->igmpv1_query_rcvd_time = 0;
   24b20:	e0bfff17 	ldw	r2,-4(fp)
   24b24:	10002e15 	stw	zero,184(r2)
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
   24b28:	d0a87217 	ldw	r2,-24120(gp)
   24b2c:	10bfffc4 	addi	r2,r2,-1
   24b30:	d0a87215 	stw	r2,-24120(gp)
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
   24b34:	e0bffe17 	ldw	r2,-8(fp)
   24b38:	10800517 	ldw	r2,20(r2)
   24b3c:	e0bffe15 	stw	r2,-8(fp)
   24b40:	e0bffe17 	ldw	r2,-8(fp)
   24b44:	103fc61e 	bne	r2,zero,24a60 <__alt_mem_descriptor_memory+0xdefe4a60>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   24b48:	e0bfff17 	ldw	r2,-4(fp)
   24b4c:	10800017 	ldw	r2,0(r2)
   24b50:	e0bfff15 	stw	r2,-4(fp)
   24b54:	e0bfff17 	ldw	r2,-4(fp)
   24b58:	103fbd1e 	bne	r2,zero,24a50 <__alt_mem_descriptor_memory+0xdefe4a50>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
   24b5c:	00800174 	movhi	r2,5
   24b60:	108fbe04 	addi	r2,r2,16120
   24b64:	10800017 	ldw	r2,0(r2)
   24b68:	10800504 	addi	r2,r2,20
   24b6c:	d0a87315 	stw	r2,-24116(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
   24b70:	0009883a 	mov	r4,zero
   24b74:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   
   return;
   24b78:	0001883a 	nop
}
   24b7c:	e037883a 	mov	sp,fp
   24b80:	dfc00117 	ldw	ra,4(sp)
   24b84:	df000017 	ldw	fp,0(sp)
   24b88:	dec00204 	addi	sp,sp,8
   24b8c:	f800283a 	ret

00024b90 <igmp_send>:
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
   24b90:	deffde04 	addi	sp,sp,-136
   24b94:	dfc02115 	stw	ra,132(sp)
   24b98:	df002015 	stw	fp,128(sp)
   24b9c:	df002004 	addi	fp,sp,128
   24ba0:	2005883a 	mov	r2,r4
   24ba4:	e17fff15 	stw	r5,-4(fp)
   24ba8:	e0bffe05 	stb	r2,-8(fp)
   struct igmp * igmp;
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
   24bac:	00800504 	movi	r2,20
   24bb0:	e0bffd05 	stb	r2,-12(fp)
   24bb4:	e03ffd45 	stb	zero,-11(fp)
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
   24bb8:	00800174 	movhi	r2,5
   24bbc:	108f9704 	addi	r2,r2,15964
   24bc0:	10800017 	ldw	r2,0(r2)
   24bc4:	10800704 	addi	r2,r2,28
   24bc8:	e0bfe205 	stb	r2,-120(fp)
   if ((type == IGMPv2_LEAVE_GROUP) || 
   24bcc:	e0bffe03 	ldbu	r2,-8(fp)
   24bd0:	108005e0 	cmpeqi	r2,r2,23
   24bd4:	1000031e 	bne	r2,zero,24be4 <igmp_send+0x54>
   24bd8:	e0bffe03 	ldbu	r2,-8(fp)
   24bdc:	10800598 	cmpnei	r2,r2,22
   24be0:	1000031e 	bne	r2,zero,24bf0 <igmp_send+0x60>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
   24be4:	e0bfe203 	ldbu	r2,-120(fp)
   24be8:	10800104 	addi	r2,r2,4
   24bec:	e0bfe205 	stb	r2,-120(fp)
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
   24bf0:	01000084 	movi	r4,2
   24bf4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
   24bf8:	e0bfe203 	ldbu	r2,-120(fp)
   24bfc:	1009883a 	mov	r4,r2
   24c00:	002a53c0 	call	2a53c <pk_alloc>
   24c04:	e0bfe315 	stw	r2,-116(fp)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
   24c08:	01000084 	movi	r4,2
   24c0c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
   24c10:	e0bfe317 	ldw	r2,-116(fp)
   24c14:	1000081e 	bne	r2,zero,24c38 <igmp_send+0xa8>
   {
      ++igmpstats.igmp_pkt_alloc_fail;
   24c18:	008001b4 	movhi	r2,6
   24c1c:	10b79f04 	addi	r2,r2,-8580
   24c20:	10800c17 	ldw	r2,48(r2)
   24c24:	10c00044 	addi	r3,r2,1
   24c28:	008001b4 	movhi	r2,6
   24c2c:	10b79f04 	addi	r2,r2,-8580
   24c30:	10c00c15 	stw	r3,48(r2)
   24c34:	00007a06 	br	24e20 <igmp_send+0x290>
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
   24c38:	e0bfe317 	ldw	r2,-116(fp)
   24c3c:	10800317 	ldw	r2,12(r2)
   24c40:	e0bfe415 	stw	r2,-112(fp)
   pip->ip_src = inm->inm_netp->n_ipaddr;
   24c44:	e0bfff17 	ldw	r2,-4(fp)
   24c48:	10800117 	ldw	r2,4(r2)
   24c4c:	10c00a17 	ldw	r3,40(r2)
   24c50:	e0bfe417 	ldw	r2,-112(fp)
   24c54:	10c00315 	stw	r3,12(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
   24c58:	e0bffe03 	ldbu	r2,-8(fp)
   24c5c:	108005d8 	cmpnei	r2,r2,23
   24c60:	1000041e 	bne	r2,zero,24c74 <igmp_send+0xe4>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
   24c64:	d0e87517 	ldw	r3,-24108(gp)
   24c68:	e0bfe417 	ldw	r2,-112(fp)
   24c6c:	10c00415 	stw	r3,16(r2)
   24c70:	00000406 	br	24c84 <igmp_send+0xf4>
   }
   else
      pip->ip_dest = inm->inm_addr;
   24c74:	e0bfff17 	ldw	r2,-4(fp)
   24c78:	10c00017 	ldw	r3,0(r2)
   24c7c:	e0bfe417 	ldw	r2,-112(fp)
   24c80:	10c00415 	stw	r3,16(r2)
   
   p->fhost = pip->ip_dest;
   24c84:	e0bfe417 	ldw	r2,-112(fp)
   24c88:	10c00417 	ldw	r3,16(r2)
   24c8c:	e0bfe317 	ldw	r2,-116(fp)
   24c90:	10c00715 	stw	r3,28(r2)

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
   24c94:	e0bfe317 	ldw	r2,-116(fp)
   24c98:	10800317 	ldw	r2,12(r2)
   24c9c:	10800504 	addi	r2,r2,20
   24ca0:	e0bfe015 	stw	r2,-128(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
   24ca4:	e0bffe03 	ldbu	r2,-8(fp)
   24ca8:	108005e0 	cmpeqi	r2,r2,23
   24cac:	1000031e 	bne	r2,zero,24cbc <igmp_send+0x12c>
   24cb0:	e0bffe03 	ldbu	r2,-8(fp)
   24cb4:	10800598 	cmpnei	r2,r2,22
   24cb8:	1000061e 	bne	r2,zero,24cd4 <igmp_send+0x144>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
   24cbc:	e0bfe017 	ldw	r2,-128(fp)
   24cc0:	10800104 	addi	r2,r2,4
   24cc4:	e0bfe015 	stw	r2,-128(fp)
      optp = &(opts [0]); /* one option (IP Router Alert) */
   24cc8:	e0bffd04 	addi	r2,fp,-12
   24ccc:	e0bfe115 	stw	r2,-124(fp)
   24cd0:	00000306 	br	24ce0 <igmp_send+0x150>
   }
   /* outgoing packet does not require any options */
   else 
      optp = &(opts [1]);
   24cd4:	e0bffd04 	addi	r2,fp,-12
   24cd8:	10800044 	addi	r2,r2,1
   24cdc:	e0bfe115 	stw	r2,-124(fp)
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
   24ce0:	e0bfe017 	ldw	r2,-128(fp)
   24ce4:	e0bfe515 	stw	r2,-108(fp)
   
   igmp->igmp_type = type;
   24ce8:	e0bfe517 	ldw	r2,-108(fp)
   24cec:	e0fffe03 	ldbu	r3,-8(fp)
   24cf0:	10c00005 	stb	r3,0(r2)
   igmp->igmp_code = 0;
   24cf4:	e0bfe517 	ldw	r2,-108(fp)
   24cf8:	10000045 	stb	zero,1(r2)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
   24cfc:	e0bfff17 	ldw	r2,-4(fp)
   24d00:	10c00017 	ldw	r3,0(r2)
   24d04:	e0bfe517 	ldw	r2,-108(fp)
   24d08:	10c00115 	stw	r3,4(r2)
   igmp->igmp_cksum = 0;
   24d0c:	e0bfe517 	ldw	r2,-108(fp)
   24d10:	1000008d 	sth	zero,2(r2)
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
   24d14:	e13fe517 	ldw	r4,-108(fp)
   24d18:	01400104 	movi	r5,4
   24d1c:	00263480 	call	26348 <cksum>
   24d20:	0084303a 	nor	r2,zero,r2
   24d24:	1007883a 	mov	r3,r2
   24d28:	e0bfe517 	ldw	r2,-108(fp)
   24d2c:	10c0008d 	sth	r3,2(r2)

   imop = &simo;
   24d30:	e0bfe704 	addi	r2,fp,-100
   24d34:	e0bfe615 	stw	r2,-104(fp)
   MEMSET(imop, 0, sizeof(simo));
   24d38:	e13fe617 	ldw	r4,-104(fp)
   24d3c:	000b883a 	mov	r5,zero
   24d40:	01801604 	movi	r6,88
   24d44:	0007f240 	call	7f24 <memset>
   imop->imo_multicast_netp = inm->inm_netp;
   24d48:	e0bfff17 	ldw	r2,-4(fp)
   24d4c:	10c00117 	ldw	r3,4(r2)
   24d50:	e0bfe617 	ldw	r2,-104(fp)
   24d54:	10c00015 	stw	r3,0(r2)
   imop->imo_multicast_ttl = 1;
   24d58:	e0bfe617 	ldw	r2,-104(fp)
   24d5c:	00c00044 	movi	r3,1
   24d60:	10c00105 	stb	r3,4(r2)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
   24d64:	e0bfe617 	ldw	r2,-104(fp)
   24d68:	10000145 	stb	zero,5(r2)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
   24d6c:	e0bfe317 	ldw	r2,-116(fp)
   24d70:	e0ffe017 	ldw	r3,-128(fp)
   24d74:	10c00315 	stw	r3,12(r2)
   p->nb_plen = sizeof(struct igmp);
   24d78:	e0bfe317 	ldw	r2,-116(fp)
   24d7c:	00c00204 	movi	r3,8
   24d80:	10c00415 	stw	r3,16(r2)
   p->imo = imop;
   24d84:	e0bfe317 	ldw	r2,-116(fp)
   24d88:	e0ffe617 	ldw	r3,-104(fp)
   24d8c:	10c00b15 	stw	r3,44(r2)
   
   ip_write2 (IGMP_PROT, p, optp);
   24d90:	01000084 	movi	r4,2
   24d94:	e17fe317 	ldw	r5,-116(fp)
   24d98:	e1bfe117 	ldw	r6,-124(fp)
   24d9c:	003d9a40 	call	3d9a4 <ip_write2>

   if (type == IGMPv2_LEAVE_GROUP)
   24da0:	e0bffe03 	ldbu	r2,-8(fp)
   24da4:	108005d8 	cmpnei	r2,r2,23
   24da8:	1000081e 	bne	r2,zero,24dcc <igmp_send+0x23c>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
   24dac:	008001b4 	movhi	r2,6
   24db0:	10b79f04 	addi	r2,r2,-8580
   24db4:	10801717 	ldw	r2,92(r2)
   24db8:	10c00044 	addi	r3,r2,1
   24dbc:	008001b4 	movhi	r2,6
   24dc0:	10b79f04 	addi	r2,r2,-8580
   24dc4:	10c01715 	stw	r3,92(r2)
   24dc8:	00001506 	br	24e20 <igmp_send+0x290>
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
   24dcc:	e0bffe03 	ldbu	r2,-8(fp)
   24dd0:	10800598 	cmpnei	r2,r2,22
   24dd4:	1000081e 	bne	r2,zero,24df8 <igmp_send+0x268>
      ++igmpstats.igmpv2mode_v2_reports_sent;
   24dd8:	008001b4 	movhi	r2,6
   24ddc:	10b79f04 	addi	r2,r2,-8580
   24de0:	10801817 	ldw	r2,96(r2)
   24de4:	10c00044 	addi	r3,r2,1
   24de8:	008001b4 	movhi	r2,6
   24dec:	10b79f04 	addi	r2,r2,-8580
   24df0:	10c01815 	stw	r3,96(r2)
   24df4:	00000a06 	br	24e20 <igmp_send+0x290>
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
   24df8:	e0bffe03 	ldbu	r2,-8(fp)
   24dfc:	10800498 	cmpnei	r2,r2,18
   24e00:	1000071e 	bne	r2,zero,24e20 <igmp_send+0x290>
      ++igmpstats.igmp_v1_reports_sent;
   24e04:	008001b4 	movhi	r2,6
   24e08:	10b79f04 	addi	r2,r2,-8580
   24e0c:	10801617 	ldw	r2,88(r2)
   24e10:	10c00044 	addi	r3,r2,1
   24e14:	008001b4 	movhi	r2,6
   24e18:	10b79f04 	addi	r2,r2,-8580
   24e1c:	10c01615 	stw	r3,88(r2)
}
   24e20:	e037883a 	mov	sp,fp
   24e24:	dfc00117 	ldw	ra,4(sp)
   24e28:	df000017 	ldw	fp,0(sp)
   24e2c:	dec00204 	addi	sp,sp,8
   24e30:	f800283a 	ret

00024e34 <igmp_joingroup>:
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
   24e34:	defffc04 	addi	sp,sp,-16
   24e38:	dfc00315 	stw	ra,12(sp)
   24e3c:	df000215 	stw	fp,8(sp)
   24e40:	df000204 	addi	fp,sp,8
   24e44:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
   24e48:	e0bfff17 	ldw	r2,-4(fp)
   24e4c:	10800117 	ldw	r2,4(r2)
   24e50:	e0bffe15 	stw	r2,-8(fp)

   if (inm->inm_addr == igmp_all_hosts_group)
   24e54:	e0bfff17 	ldw	r2,-4(fp)
   24e58:	10c00017 	ldw	r3,0(r2)
   24e5c:	d0a87417 	ldw	r2,-24112(gp)
   24e60:	1880031e 	bne	r3,r2,24e70 <igmp_joingroup+0x3c>
   {
      inm->inm_timer = 0;
   24e64:	e0bfff17 	ldw	r2,-4(fp)
   24e68:	10000315 	stw	zero,12(r2)
   24e6c:	00008006 	br	25070 <igmp_joingroup+0x23c>
   }
   else 
   {
      /* send unsolicited membership report in appropriate format */
      if (ifp->igmpv1_rtr_present)
   24e70:	e0bffe17 	ldw	r2,-8(fp)
   24e74:	10802d03 	ldbu	r2,180(r2)
   24e78:	10803fcc 	andi	r2,r2,255
   24e7c:	10003926 	beq	r2,zero,24f64 <igmp_joingroup+0x130>
      {
         /* always true for IGMPv1, may be true for IGMPv2 */
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
   24e80:	01000484 	movi	r4,18
   24e84:	e17fff17 	ldw	r5,-4(fp)
   24e88:	0024b900 	call	24b90 <igmp_send>
         /* set a delay timer (with a duration of 
          * IGMP_MAX_HOST_REPORT_DELAY) for a second unsolicited report */
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
   24e8c:	008001b4 	movhi	r2,6
   24e90:	10b9e104 	addi	r2,r2,-6268
   24e94:	10c00217 	ldw	r3,8(r2)
   24e98:	008001b4 	movhi	r2,6
   24e9c:	10b79b04 	addi	r2,r2,-8596
   24ea0:	10800017 	ldw	r2,0(r2)
   24ea4:	10800a17 	ldw	r2,40(r2)
   24ea8:	1008d63a 	srli	r4,r2,24
   24eac:	008001b4 	movhi	r2,6
   24eb0:	10b79b04 	addi	r2,r2,-8596
   24eb4:	10800017 	ldw	r2,0(r2)
   24eb8:	10800a17 	ldw	r2,40(r2)
   24ebc:	1004d23a 	srli	r2,r2,8
   24ec0:	10bfc00c 	andi	r2,r2,65280
   24ec4:	2088b03a 	or	r4,r4,r2
   24ec8:	008001b4 	movhi	r2,6
   24ecc:	10b79b04 	addi	r2,r2,-8596
   24ed0:	10800017 	ldw	r2,0(r2)
   24ed4:	10800a17 	ldw	r2,40(r2)
   24ed8:	10bfc00c 	andi	r2,r2,65280
   24edc:	1004923a 	slli	r2,r2,8
   24ee0:	2088b03a 	or	r4,r4,r2
   24ee4:	008001b4 	movhi	r2,6
   24ee8:	10b79b04 	addi	r2,r2,-8596
   24eec:	10800017 	ldw	r2,0(r2)
   24ef0:	10800a17 	ldw	r2,40(r2)
   24ef4:	1004963a 	slli	r2,r2,24
   24ef8:	2084b03a 	or	r2,r4,r2
   24efc:	1887883a 	add	r3,r3,r2
   24f00:	e0bfff17 	ldw	r2,-4(fp)
   24f04:	10800017 	ldw	r2,0(r2)
   24f08:	1008d63a 	srli	r4,r2,24
   24f0c:	e0bfff17 	ldw	r2,-4(fp)
   24f10:	10800017 	ldw	r2,0(r2)
   24f14:	1004d23a 	srli	r2,r2,8
   24f18:	10bfc00c 	andi	r2,r2,65280
   24f1c:	2088b03a 	or	r4,r4,r2
   24f20:	e0bfff17 	ldw	r2,-4(fp)
   24f24:	10800017 	ldw	r2,0(r2)
   24f28:	10bfc00c 	andi	r2,r2,65280
   24f2c:	1004923a 	slli	r2,r2,8
   24f30:	2088b03a 	or	r4,r4,r2
   24f34:	e0bfff17 	ldw	r2,-4(fp)
   24f38:	10800017 	ldw	r2,0(r2)
   24f3c:	1004963a 	slli	r2,r2,24
   24f40:	2084b03a 	or	r2,r4,r2
   24f44:	1885883a 	add	r2,r3,r2
   24f48:	1009883a 	mov	r4,r2
   24f4c:	01400c84 	movi	r5,50
   24f50:	00152580 	call	15258 <__umodsi3>
   24f54:	10c00044 	addi	r3,r2,1
   24f58:	e0bfff17 	ldw	r2,-4(fp)
   24f5c:	10c00315 	stw	r3,12(r2)
   24f60:	00003806 	br	25044 <igmp_joingroup+0x210>
      }
      else
      {
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
   24f64:	01000584 	movi	r4,22
   24f68:	e17fff17 	ldw	r5,-4(fp)
   24f6c:	0024b900 	call	24b90 <igmp_send>
         /* the delay time duration is the Unsolicited Report Interval */
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
   24f70:	008001b4 	movhi	r2,6
   24f74:	10b9e104 	addi	r2,r2,-6268
   24f78:	10c00217 	ldw	r3,8(r2)
   24f7c:	008001b4 	movhi	r2,6
   24f80:	10b79b04 	addi	r2,r2,-8596
   24f84:	10800017 	ldw	r2,0(r2)
   24f88:	10800a17 	ldw	r2,40(r2)
   24f8c:	1008d63a 	srli	r4,r2,24
   24f90:	008001b4 	movhi	r2,6
   24f94:	10b79b04 	addi	r2,r2,-8596
   24f98:	10800017 	ldw	r2,0(r2)
   24f9c:	10800a17 	ldw	r2,40(r2)
   24fa0:	1004d23a 	srli	r2,r2,8
   24fa4:	10bfc00c 	andi	r2,r2,65280
   24fa8:	2088b03a 	or	r4,r4,r2
   24fac:	008001b4 	movhi	r2,6
   24fb0:	10b79b04 	addi	r2,r2,-8596
   24fb4:	10800017 	ldw	r2,0(r2)
   24fb8:	10800a17 	ldw	r2,40(r2)
   24fbc:	10bfc00c 	andi	r2,r2,65280
   24fc0:	1004923a 	slli	r2,r2,8
   24fc4:	2088b03a 	or	r4,r4,r2
   24fc8:	008001b4 	movhi	r2,6
   24fcc:	10b79b04 	addi	r2,r2,-8596
   24fd0:	10800017 	ldw	r2,0(r2)
   24fd4:	10800a17 	ldw	r2,40(r2)
   24fd8:	1004963a 	slli	r2,r2,24
   24fdc:	2084b03a 	or	r2,r4,r2
   24fe0:	1887883a 	add	r3,r3,r2
   24fe4:	e0bfff17 	ldw	r2,-4(fp)
   24fe8:	10800017 	ldw	r2,0(r2)
   24fec:	1008d63a 	srli	r4,r2,24
   24ff0:	e0bfff17 	ldw	r2,-4(fp)
   24ff4:	10800017 	ldw	r2,0(r2)
   24ff8:	1004d23a 	srli	r2,r2,8
   24ffc:	10bfc00c 	andi	r2,r2,65280
   25000:	2088b03a 	or	r4,r4,r2
   25004:	e0bfff17 	ldw	r2,-4(fp)
   25008:	10800017 	ldw	r2,0(r2)
   2500c:	10bfc00c 	andi	r2,r2,65280
   25010:	1004923a 	slli	r2,r2,8
   25014:	2088b03a 	or	r4,r4,r2
   25018:	e0bfff17 	ldw	r2,-4(fp)
   2501c:	10800017 	ldw	r2,0(r2)
   25020:	1004963a 	slli	r2,r2,24
   25024:	2084b03a 	or	r2,r4,r2
   25028:	1885883a 	add	r2,r3,r2
   2502c:	1009883a 	mov	r4,r2
   25030:	01400c84 	movi	r5,50
   25034:	00152580 	call	15258 <__umodsi3>
   25038:	10c00044 	addi	r3,r2,1
   2503c:	e0bfff17 	ldw	r2,-4(fp)
   25040:	10c00315 	stw	r3,12(r2)
      }
      
      /* for IGMPv2, indicate that we were the last to send 
       * a Report for this multicast group (relevant for 
       * IGMPv2 only). */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
   25044:	e0bffe17 	ldw	r2,-8(fp)
   25048:	10802f03 	ldbu	r2,188(r2)
   2504c:	10803fcc 	andi	r2,r2,255
   25050:	10800098 	cmpnei	r2,r2,2
   25054:	1000031e 	bne	r2,zero,25064 <igmp_joingroup+0x230>
      {
         inm->last2send_report = IGMP_TRUE;
   25058:	e0bfff17 	ldw	r2,-4(fp)
   2505c:	00c00044 	movi	r3,1
   25060:	10c00405 	stb	r3,16(r2)
      }

      ++igmp_timers_are_running;
   25064:	d0a87217 	ldw	r2,-24120(gp)
   25068:	10800044 	addi	r2,r2,1
   2506c:	d0a87215 	stw	r2,-24120(gp)
   }
   
   return;
   25070:	0001883a 	nop
}     
   25074:	e037883a 	mov	sp,fp
   25078:	dfc00117 	ldw	ra,4(sp)
   2507c:	df000017 	ldw	fp,0(sp)
   25080:	dec00204 	addi	sp,sp,8
   25084:	f800283a 	ret

00025088 <igmp_leavegroup>:
 *
 * OUTPUT: None.
 */

void igmp_leavegroup (struct in_multi * inm)
{
   25088:	defffc04 	addi	sp,sp,-16
   2508c:	dfc00315 	stw	ra,12(sp)
   25090:	df000215 	stw	fp,8(sp)
   25094:	df000204 	addi	fp,sp,8
   25098:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = inm->inm_netp;
   2509c:	e0bfff17 	ldw	r2,-4(fp)
   250a0:	10800117 	ldw	r2,4(r2)
   250a4:	e0bffe15 	stw	r2,-8(fp)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
   250a8:	e0bffe17 	ldw	r2,-8(fp)
   250ac:	10802f03 	ldbu	r2,188(r2)
   250b0:	10803fcc 	andi	r2,r2,255
   250b4:	10800098 	cmpnei	r2,r2,2
   250b8:	10000c1e 	bne	r2,zero,250ec <igmp_leavegroup+0x64>
       !ifp->igmpv1_rtr_present)
   250bc:	e0bffe17 	ldw	r2,-8(fp)
   250c0:	10802d03 	ldbu	r2,180(r2)
{
   NET ifp;

   ifp = inm->inm_netp;

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
   250c4:	10803fcc 	andi	r2,r2,255
   250c8:	1000081e 	bne	r2,zero,250ec <igmp_leavegroup+0x64>
       !ifp->igmpv1_rtr_present)
   {
      if (inm->last2send_report == IGMP_TRUE)
   250cc:	e0bfff17 	ldw	r2,-4(fp)
   250d0:	10800403 	ldbu	r2,16(r2)
   250d4:	10803fcc 	andi	r2,r2,255
   250d8:	10800058 	cmpnei	r2,r2,1
   250dc:	1000031e 	bne	r2,zero,250ec <igmp_leavegroup+0x64>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
   250e0:	010005c4 	movi	r4,23
   250e4:	e17fff17 	ldw	r5,-4(fp)
   250e8:	0024b900 	call	24b90 <igmp_send>
   }
   
   return;
   250ec:	0001883a 	nop
}
   250f0:	e037883a 	mov	sp,fp
   250f4:	dfc00117 	ldw	ra,4(sp)
   250f8:	df000017 	ldw	fp,0(sp)
   250fc:	dec00204 	addi	sp,sp,8
   25100:	f800283a 	ret

00025104 <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
   25104:	defff604 	addi	sp,sp,-40
   25108:	dfc00915 	stw	ra,36(sp)
   2510c:	df000815 	stw	fp,32(sp)
   25110:	df000804 	addi	fp,sp,32
   25114:	e13fff15 	stw	r4,-4(fp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
   25118:	e0bfff17 	ldw	r2,-4(fp)
   2511c:	10800317 	ldw	r2,12(r2)
   25120:	e0bff815 	stw	r2,-32(fp)

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
   25124:	e0bfff17 	ldw	r2,-4(fp)
   25128:	10c00417 	ldw	r3,16(r2)
   2512c:	e0bff817 	ldw	r2,-32(fp)
   25130:	10800003 	ldbu	r2,0(r2)
   25134:	10803fcc 	andi	r2,r2,255
   25138:	108003cc 	andi	r2,r2,15
   2513c:	1085883a 	add	r2,r2,r2
   25140:	1085883a 	add	r2,r2,r2
   25144:	1885c83a 	sub	r2,r3,r2
   25148:	e0bff915 	stw	r2,-28(fp)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
   2514c:	e0bff917 	ldw	r2,-28(fp)
   25150:	10800220 	cmpeqi	r2,r2,8
   25154:	1000091e 	bne	r2,zero,2517c <igmp_validate+0x78>
   {
      ++igmpstats.igmp_badlen_rcvd;
   25158:	008001b4 	movhi	r2,6
   2515c:	10b79f04 	addi	r2,r2,-8580
   25160:	10800a17 	ldw	r2,40(r2)
   25164:	10c00044 	addi	r3,r2,1
   25168:	008001b4 	movhi	r2,6
   2516c:	10b79f04 	addi	r2,r2,-8580
   25170:	10c00a15 	stw	r3,40(r2)
      return ENP_BAD_HEADER;
   25174:	00bff804 	movi	r2,-32
   25178:	0000a306 	br	25408 <igmp_validate+0x304>
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
   2517c:	e0bff817 	ldw	r2,-32(fp)
   25180:	10800003 	ldbu	r2,0(r2)
   25184:	10803fcc 	andi	r2,r2,255
   25188:	108003cc 	andi	r2,r2,15
   2518c:	1085883a 	add	r2,r2,r2
   25190:	1085883a 	add	r2,r2,r2
   25194:	1007883a 	mov	r3,r2
   25198:	e0bff817 	ldw	r2,-32(fp)
   2519c:	10c5883a 	add	r2,r2,r3
   251a0:	e0bffa15 	stw	r2,-24(fp)
   osum = igmp->igmp_cksum;
   251a4:	e0bffa17 	ldw	r2,-24(fp)
   251a8:	1080008b 	ldhu	r2,2(r2)
   251ac:	e0bffb0d 	sth	r2,-20(fp)
   igmp->igmp_cksum = 0;
   251b0:	e0bffa17 	ldw	r2,-24(fp)
   251b4:	1000008d 	sth	zero,2(r2)
   xsum = ~cksum(igmp, igmplen>>1);
   251b8:	e0bff917 	ldw	r2,-28(fp)
   251bc:	1005d07a 	srai	r2,r2,1
   251c0:	e13ffa17 	ldw	r4,-24(fp)
   251c4:	100b883a 	mov	r5,r2
   251c8:	00263480 	call	26348 <cksum>
   251cc:	0084303a 	nor	r2,zero,r2
   251d0:	e0bffb8d 	sth	r2,-18(fp)
   if (xsum != osum)
   251d4:	e0fffb8b 	ldhu	r3,-18(fp)
   251d8:	e0bffb0b 	ldhu	r2,-20(fp)
   251dc:	18800c26 	beq	r3,r2,25210 <igmp_validate+0x10c>
   {
      igmp->igmp_cksum = osum;
   251e0:	e0bffa17 	ldw	r2,-24(fp)
   251e4:	e0fffb0b 	ldhu	r3,-20(fp)
   251e8:	10c0008d 	sth	r3,2(r2)
      ++igmpstats.igmp_badsum_rcvd;
   251ec:	008001b4 	movhi	r2,6
   251f0:	10b79f04 	addi	r2,r2,-8580
   251f4:	10800b17 	ldw	r2,44(r2)
   251f8:	10c00044 	addi	r3,r2,1
   251fc:	008001b4 	movhi	r2,6
   25200:	10b79f04 	addi	r2,r2,-8580
   25204:	10c00b15 	stw	r3,44(r2)
      return ENP_BAD_HEADER;
   25208:	00bff804 	movi	r2,-32
   2520c:	00007e06 	br	25408 <igmp_validate+0x304>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
   25210:	e0bffa17 	ldw	r2,-24(fp)
   25214:	10800003 	ldbu	r2,0(r2)
   25218:	e0bffc05 	stb	r2,-16(fp)
   mcgrp_addr = ntohl(igmp->igmp_group); 
   2521c:	e0bffa17 	ldw	r2,-24(fp)
   25220:	10800117 	ldw	r2,4(r2)
   25224:	1006d63a 	srli	r3,r2,24
   25228:	e0bffa17 	ldw	r2,-24(fp)
   2522c:	10800117 	ldw	r2,4(r2)
   25230:	1004d23a 	srli	r2,r2,8
   25234:	10bfc00c 	andi	r2,r2,65280
   25238:	1886b03a 	or	r3,r3,r2
   2523c:	e0bffa17 	ldw	r2,-24(fp)
   25240:	10800117 	ldw	r2,4(r2)
   25244:	10bfc00c 	andi	r2,r2,65280
   25248:	1004923a 	slli	r2,r2,8
   2524c:	1886b03a 	or	r3,r3,r2
   25250:	e0bffa17 	ldw	r2,-24(fp)
   25254:	10800117 	ldw	r2,4(r2)
   25258:	1004963a 	slli	r2,r2,24
   2525c:	1884b03a 	or	r2,r3,r2
   25260:	e0bffd15 	stw	r2,-12(fp)
   resp_time = igmp->igmp_code;
   25264:	e0bffa17 	ldw	r2,-24(fp)
   25268:	10800043 	ldbu	r2,1(r2)
   2526c:	e0bffe05 	stb	r2,-8(fp)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
   25270:	e0bffc03 	ldbu	r2,-16(fp)
   25274:	10800458 	cmpnei	r2,r2,17
   25278:	1000301e 	bne	r2,zero,2533c <igmp_validate+0x238>
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
   2527c:	e0bffe03 	ldbu	r2,-8(fp)
   25280:	10000426 	beq	r2,zero,25294 <igmp_validate+0x190>
   25284:	e0bffe03 	ldbu	r2,-8(fp)
   25288:	10000f26 	beq	r2,zero,252c8 <igmp_validate+0x1c4>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
   2528c:	e0bffd17 	ldw	r2,-12(fp)
   25290:	10000d1e 	bne	r2,zero,252c8 <igmp_validate+0x1c4>
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
   25294:	e0bff817 	ldw	r2,-32(fp)
   25298:	10c00417 	ldw	r3,16(r2)
   2529c:	d0a87417 	ldw	r2,-24112(gp)
   252a0:	18800926 	beq	r3,r2,252c8 <igmp_validate+0x1c4>
         {
            ++igmpstats.igmp_bad_queries_rcvd;
   252a4:	008001b4 	movhi	r2,6
   252a8:	10b79f04 	addi	r2,r2,-8580
   252ac:	10800e17 	ldw	r2,56(r2)
   252b0:	10c00044 	addi	r3,r2,1
   252b4:	008001b4 	movhi	r2,6
   252b8:	10b79f04 	addi	r2,r2,-8580
   252bc:	10c00e15 	stw	r3,56(r2)
            return ENP_BAD_HEADER;
   252c0:	00bff804 	movi	r2,-32
   252c4:	00005006 	br	25408 <igmp_validate+0x304>
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
   252c8:	e0bffe03 	ldbu	r2,-8(fp)
   252cc:	10001b26 	beq	r2,zero,2533c <igmp_validate+0x238>
   252d0:	e0bffd17 	ldw	r2,-12(fp)
   252d4:	10001926 	beq	r2,zero,2533c <igmp_validate+0x238>
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
   252d8:	e0bfff17 	ldw	r2,-4(fp)
   252dc:	10800617 	ldw	r2,24(r2)
   252e0:	10802f03 	ldbu	r2,188(r2)
   252e4:	10803fcc 	andi	r2,r2,255
   252e8:	10800058 	cmpnei	r2,r2,1
   252ec:	1000021e 	bne	r2,zero,252f8 <igmp_validate+0x1f4>
         {
            /* IGMPv1 code does not understand a IGMPv2 Group-
             * Specific Query */
            return ENP_BAD_HEADER; 
   252f0:	00bff804 	movi	r2,-32
   252f4:	00004406 	br	25408 <igmp_validate+0x304>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
   252f8:	e0bffd17 	ldw	r2,-12(fp)
   252fc:	10fc002c 	andhi	r3,r2,61440
   25300:	00b80034 	movhi	r2,57344
   25304:	1880041e 	bne	r3,r2,25318 <igmp_validate+0x214>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
   25308:	e0bffa17 	ldw	r2,-24(fp)
   2530c:	10c00117 	ldw	r3,4(r2)
   25310:	d0a87417 	ldw	r2,-24112(gp)
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
   25314:	1880091e 	bne	r3,r2,2533c <igmp_validate+0x238>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
   25318:	008001b4 	movhi	r2,6
   2531c:	10b79f04 	addi	r2,r2,-8580
   25320:	10801117 	ldw	r2,68(r2)
   25324:	10c00044 	addi	r3,r2,1
   25328:	008001b4 	movhi	r2,6
   2532c:	10b79f04 	addi	r2,r2,-8580
   25330:	10c01115 	stw	r3,68(r2)
            /* caller will free received packet */
            return ENP_BAD_HEADER;
   25334:	00bff804 	movi	r2,-32
   25338:	00003306 	br	25408 <igmp_validate+0x304>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
   2533c:	e0bffc03 	ldbu	r2,-16(fp)
   25340:	108004a0 	cmpeqi	r2,r2,18
   25344:	1000031e 	bne	r2,zero,25354 <igmp_validate+0x250>
   25348:	e0bffc03 	ldbu	r2,-16(fp)
   2534c:	10800598 	cmpnei	r2,r2,22
   25350:	1000121e 	bne	r2,zero,2539c <igmp_validate+0x298>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
   25354:	e0bffa17 	ldw	r2,-24(fp)
   25358:	10c00117 	ldw	r3,4(r2)
   2535c:	e0bff817 	ldw	r2,-32(fp)
   25360:	10800417 	ldw	r2,16(r2)
   25364:	1880041e 	bne	r3,r2,25378 <igmp_validate+0x274>
          (!IN_MULTICAST(mcgrp_addr)))
   25368:	e0bffd17 	ldw	r2,-12(fp)
   2536c:	10fc002c 	andhi	r3,r2,61440
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
   25370:	00b80034 	movhi	r2,57344
   25374:	18800926 	beq	r3,r2,2539c <igmp_validate+0x298>
          (!IN_MULTICAST(mcgrp_addr)))
      {
         ++igmpstats.igmp_bad_reports_rcvd;
   25378:	008001b4 	movhi	r2,6
   2537c:	10b79f04 	addi	r2,r2,-8580
   25380:	10800f17 	ldw	r2,60(r2)
   25384:	10c00044 	addi	r3,r2,1
   25388:	008001b4 	movhi	r2,6
   2538c:	10b79f04 	addi	r2,r2,-8580
   25390:	10c00f15 	stw	r3,60(r2)
         return ENP_BAD_HEADER;    
   25394:	00bff804 	movi	r2,-32
   25398:	00001b06 	br	25408 <igmp_validate+0x304>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
   2539c:	e0bffc03 	ldbu	r2,-16(fp)
   253a0:	108005e0 	cmpeqi	r2,r2,23
   253a4:	10000a1e 	bne	r2,zero,253d0 <igmp_validate+0x2cc>
   253a8:	e0bffc03 	ldbu	r2,-16(fp)
   253ac:	108005a0 	cmpeqi	r2,r2,22
   253b0:	1000071e 	bne	r2,zero,253d0 <igmp_validate+0x2cc>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
   253b4:	e0bffc03 	ldbu	r2,-16(fp)
   253b8:	10800458 	cmpnei	r2,r2,17
   253bc:	1000111e 	bne	r2,zero,25404 <igmp_validate+0x300>
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
   253c0:	e0bffa17 	ldw	r2,-24(fp)
   253c4:	10800043 	ldbu	r2,1(r2)
   253c8:	10803fcc 	andi	r2,r2,255
   253cc:	10000d26 	beq	r2,zero,25404 <igmp_validate+0x300>
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
   253d0:	e13ff817 	ldw	r4,-32(fp)
   253d4:	0043d1c0 	call	43d1c <igmpv2_chk4_rtr_alert_opt>
   253d8:	10803fcc 	andi	r2,r2,255
   253dc:	1000091e 	bne	r2,zero,25404 <igmp_validate+0x300>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
   253e0:	008001b4 	movhi	r2,6
   253e4:	10b79f04 	addi	r2,r2,-8580
   253e8:	10801417 	ldw	r2,80(r2)
   253ec:	10c00044 	addi	r3,r2,1
   253f0:	008001b4 	movhi	r2,6
   253f4:	10b79f04 	addi	r2,r2,-8580
   253f8:	10c01415 	stw	r3,80(r2)
         return ENP_BAD_HEADER;
   253fc:	00bff804 	movi	r2,-32
   25400:	00000106 	br	25408 <igmp_validate+0x304>
      }
   }
#endif   

   /* validation successful */
   return IGMP_OK;
   25404:	0005883a 	mov	r2,zero
}
   25408:	e037883a 	mov	sp,fp
   2540c:	dfc00117 	ldw	ra,4(sp)
   25410:	df000017 	ldw	fp,0(sp)
   25414:	dec00204 	addi	sp,sp,8
   25418:	f800283a 	ret

0002541c <igmp_print_stats>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
   2541c:	defffa04 	addi	sp,sp,-24
   25420:	dfc00515 	stw	ra,20(sp)
   25424:	df000415 	stw	fp,16(sp)
   25428:	df000404 	addi	fp,sp,16
   2542c:	e13fff15 	stw	r4,-4(fp)
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   25430:	008001b4 	movhi	r2,6
   25434:	10b9dc04 	addi	r2,r2,-6288
   25438:	10800017 	ldw	r2,0(r2)
   2543c:	e0bffe15 	stw	r2,-8(fp)
   25440:	00003b06 	br	25530 <igmp_print_stats+0x114>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
                 ifp->name, 
   25444:	e0bffe17 	ldw	r2,-8(fp)
   25448:	11800104 	addi	r6,r2,4
                 ifp->igmp_oper_mode, 
   2544c:	e0bffe17 	ldw	r2,-8(fp)
   25450:	10802f03 	ldbu	r2,188(r2)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
   25454:	10c03fcc 	andi	r3,r2,255
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
   25458:	e0bffe17 	ldw	r2,-8(fp)
   2545c:	10802f03 	ldbu	r2,188(r2)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
   25460:	10803fcc 	andi	r2,r2,255
   25464:	10800058 	cmpnei	r2,r2,1
   25468:	1000031e 	bne	r2,zero,25478 <igmp_print_stats+0x5c>
   2546c:	00800174 	movhi	r2,5
   25470:	10b7fd04 	addi	r2,r2,-8204
   25474:	00000206 	br	25480 <igmp_print_stats+0x64>
   25478:	00800174 	movhi	r2,5
   2547c:	10b7fe04 	addi	r2,r2,-8200
   25480:	d8800015 	stw	r2,0(sp)
   25484:	e13fff17 	ldw	r4,-4(fp)
   25488:	01400174 	movhi	r5,5
   2548c:	2977ff04 	addi	r5,r5,-8196
   25490:	180f883a 	mov	r7,r3
   25494:	002694c0 	call	2694c <ns_printf>
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
   25498:	e0bffe17 	ldw	r2,-8(fp)
   2549c:	10802f03 	ldbu	r2,188(r2)
   254a0:	10803fcc 	andi	r2,r2,255
   254a4:	10800098 	cmpnei	r2,r2,2
   254a8:	10001a1e 	bne	r2,zero,25514 <igmp_print_stats+0xf8>
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
                    ifp->igmpv1_rtr_present,
   254ac:	e0bffe17 	ldw	r2,-8(fp)
   254b0:	10802d03 	ldbu	r2,180(r2)
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
   254b4:	11803fcc 	andi	r6,r2,255
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
   254b8:	e0bffe17 	ldw	r2,-8(fp)
   254bc:	10802d03 	ldbu	r2,180(r2)
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
   254c0:	10803fcc 	andi	r2,r2,255
   254c4:	10800058 	cmpnei	r2,r2,1
   254c8:	1000031e 	bne	r2,zero,254d8 <igmp_print_stats+0xbc>
   254cc:	00800174 	movhi	r2,5
   254d0:	10b80404 	addi	r2,r2,-8176
   254d4:	00000206 	br	254e0 <igmp_print_stats+0xc4>
   254d8:	00800174 	movhi	r2,5
   254dc:	10b80604 	addi	r2,r2,-8168
   254e0:	e0fffe17 	ldw	r3,-8(fp)
   254e4:	19002e17 	ldw	r4,184(r3)
   254e8:	00c00174 	movhi	r3,5
   254ec:	18cfbe04 	addi	r3,r3,16120
   254f0:	18c00017 	ldw	r3,0(r3)
   254f4:	d9000015 	stw	r4,0(sp)
   254f8:	d8c00115 	stw	r3,4(sp)
   254fc:	e13fff17 	ldw	r4,-4(fp)
   25500:	01400174 	movhi	r5,5
   25504:	29780804 	addi	r5,r5,-8160
   25508:	100f883a 	mov	r7,r2
   2550c:	002694c0 	call	2694c <ns_printf>
   25510:	00000406 	br	25524 <igmp_print_stats+0x108>
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
   25514:	e13fff17 	ldw	r4,-4(fp)
   25518:	01400174 	movhi	r5,5
   2551c:	29781304 	addi	r5,r5,-8116
   25520:	002694c0 	call	2694c <ns_printf>
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   25524:	e0bffe17 	ldw	r2,-8(fp)
   25528:	10800017 	ldw	r2,0(r2)
   2552c:	e0bffe15 	stw	r2,-8(fp)
   25530:	e0bffe17 	ldw	r2,-8(fp)
   25534:	103fc31e 	bne	r2,zero,25444 <__alt_mem_descriptor_memory+0xdefe5444>
      }
      else ns_printf (pio, "\n");
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
   25538:	008001b4 	movhi	r2,6
   2553c:	10b79f04 	addi	r2,r2,-8580
   25540:	10c00017 	ldw	r3,0(r2)
   25544:	d0a87217 	ldw	r2,-24120(gp)
   25548:	e13fff17 	ldw	r4,-4(fp)
   2554c:	01400174 	movhi	r5,5
   25550:	29781404 	addi	r5,r5,-8112
   25554:	180d883a 	mov	r6,r3
   25558:	100f883a 	mov	r7,r2
   2555c:	002694c0 	call	2694c <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
   25560:	008001b4 	movhi	r2,6
   25564:	10b79f04 	addi	r2,r2,-8580
   25568:	10800117 	ldw	r2,4(r2)
   2556c:	e13fff17 	ldw	r4,-4(fp)
   25570:	01400174 	movhi	r5,5
   25574:	29782104 	addi	r5,r5,-8060
   25578:	100d883a 	mov	r6,r2
   2557c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
   25580:	008001b4 	movhi	r2,6
   25584:	10b79f04 	addi	r2,r2,-8580
   25588:	10800217 	ldw	r2,8(r2)
   2558c:	e13fff17 	ldw	r4,-4(fp)
   25590:	01400174 	movhi	r5,5
   25594:	29783204 	addi	r5,r5,-7992
   25598:	100d883a 	mov	r6,r2
   2559c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
   255a0:	008001b4 	movhi	r2,6
   255a4:	10b79f04 	addi	r2,r2,-8580
   255a8:	10800317 	ldw	r2,12(r2)
   255ac:	e13fff17 	ldw	r4,-4(fp)
   255b0:	01400174 	movhi	r5,5
   255b4:	29783e04 	addi	r5,r5,-7944
   255b8:	100d883a 	mov	r6,r2
   255bc:	002694c0 	call	2694c <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
   255c0:	008001b4 	movhi	r2,6
   255c4:	10b79f04 	addi	r2,r2,-8580
   255c8:	10800417 	ldw	r2,16(r2)
   255cc:	e13fff17 	ldw	r4,-4(fp)
   255d0:	01400174 	movhi	r5,5
   255d4:	29785104 	addi	r5,r5,-7868
   255d8:	100d883a 	mov	r6,r2
   255dc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
   255e0:	008001b4 	movhi	r2,6
   255e4:	10b79f04 	addi	r2,r2,-8580
   255e8:	10c00517 	ldw	r3,20(r2)
   255ec:	008001b4 	movhi	r2,6
   255f0:	10b79f04 	addi	r2,r2,-8580
   255f4:	10800617 	ldw	r2,24(r2)
   255f8:	e13fff17 	ldw	r4,-4(fp)
   255fc:	01400174 	movhi	r5,5
   25600:	29786204 	addi	r5,r5,-7800
   25604:	180d883a 	mov	r6,r3
   25608:	100f883a 	mov	r7,r2
   2560c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
   25610:	008001b4 	movhi	r2,6
   25614:	10b79f04 	addi	r2,r2,-8580
   25618:	10800717 	ldw	r2,28(r2)
   2561c:	e13fff17 	ldw	r4,-4(fp)
   25620:	01400174 	movhi	r5,5
   25624:	29783e04 	addi	r5,r5,-7944
   25628:	100d883a 	mov	r6,r2
   2562c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
   25630:	008001b4 	movhi	r2,6
   25634:	10b79f04 	addi	r2,r2,-8580
   25638:	10800817 	ldw	r2,32(r2)
   2563c:	e13fff17 	ldw	r4,-4(fp)
   25640:	01400174 	movhi	r5,5
   25644:	29787504 	addi	r5,r5,-7724
   25648:	100d883a 	mov	r6,r2
   2564c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
   25650:	008001b4 	movhi	r2,6
   25654:	10b79f04 	addi	r2,r2,-8580
   25658:	10800917 	ldw	r2,36(r2)
   2565c:	e13fff17 	ldw	r4,-4(fp)
   25660:	01400174 	movhi	r5,5
   25664:	29788604 	addi	r5,r5,-7656
   25668:	100d883a 	mov	r6,r2
   2566c:	002694c0 	call	2694c <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
   25670:	008001b4 	movhi	r2,6
   25674:	10b79f04 	addi	r2,r2,-8580
   25678:	10c01717 	ldw	r3,92(r2)
   2567c:	008001b4 	movhi	r2,6
   25680:	10b79f04 	addi	r2,r2,-8580
   25684:	10801817 	ldw	r2,96(r2)
   25688:	e13fff17 	ldw	r4,-4(fp)
   2568c:	01400174 	movhi	r5,5
   25690:	29789204 	addi	r5,r5,-7608
   25694:	180d883a 	mov	r6,r3
   25698:	100f883a 	mov	r7,r2
   2569c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
   256a0:	008001b4 	movhi	r2,6
   256a4:	10b79f04 	addi	r2,r2,-8580
   256a8:	10801617 	ldw	r2,88(r2)
   256ac:	e13fff17 	ldw	r4,-4(fp)
   256b0:	01400174 	movhi	r5,5
   256b4:	2978a504 	addi	r5,r5,-7532
   256b8:	100d883a 	mov	r6,r2
   256bc:	002694c0 	call	2694c <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
   256c0:	008001b4 	movhi	r2,6
   256c4:	10b79f04 	addi	r2,r2,-8580
   256c8:	10800a17 	ldw	r2,40(r2)
   256cc:	e13fff17 	ldw	r4,-4(fp)
   256d0:	01400174 	movhi	r5,5
   256d4:	2978b104 	addi	r5,r5,-7484
   256d8:	100d883a 	mov	r6,r2
   256dc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
   256e0:	008001b4 	movhi	r2,6
   256e4:	10b79f04 	addi	r2,r2,-8580
   256e8:	10800b17 	ldw	r2,44(r2)
   256ec:	e13fff17 	ldw	r4,-4(fp)
   256f0:	01400174 	movhi	r5,5
   256f4:	2978bd04 	addi	r5,r5,-7436
   256f8:	100d883a 	mov	r6,r2
   256fc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
   25700:	008001b4 	movhi	r2,6
   25704:	10b79f04 	addi	r2,r2,-8580
   25708:	10c00c17 	ldw	r3,48(r2)
   2570c:	008001b4 	movhi	r2,6
   25710:	10b79f04 	addi	r2,r2,-8580
   25714:	10800d17 	ldw	r2,52(r2)
   25718:	e13fff17 	ldw	r4,-4(fp)
   2571c:	01400174 	movhi	r5,5
   25720:	2978c904 	addi	r5,r5,-7388
   25724:	180d883a 	mov	r6,r3
   25728:	100f883a 	mov	r7,r2
   2572c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
   25730:	008001b4 	movhi	r2,6
   25734:	10b79f04 	addi	r2,r2,-8580
   25738:	10c00e17 	ldw	r3,56(r2)
   2573c:	008001b4 	movhi	r2,6
   25740:	10b79f04 	addi	r2,r2,-8580
   25744:	10800f17 	ldw	r2,60(r2)
   25748:	e13fff17 	ldw	r4,-4(fp)
   2574c:	01400174 	movhi	r5,5
   25750:	2978dd04 	addi	r5,r5,-7308
   25754:	180d883a 	mov	r6,r3
   25758:	100f883a 	mov	r7,r2
   2575c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
   25760:	008001b4 	movhi	r2,6
   25764:	10b79f04 	addi	r2,r2,-8580
   25768:	10801117 	ldw	r2,68(r2)
   2576c:	e13fff17 	ldw	r4,-4(fp)
   25770:	01400174 	movhi	r5,5
   25774:	2978ed04 	addi	r5,r5,-7244
   25778:	100d883a 	mov	r6,r2
   2577c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
   25780:	008001b4 	movhi	r2,6
   25784:	10b79f04 	addi	r2,r2,-8580
   25788:	10801217 	ldw	r2,72(r2)
   2578c:	e13fff17 	ldw	r4,-4(fp)
   25790:	01400174 	movhi	r5,5
   25794:	2978fa04 	addi	r5,r5,-7192
   25798:	100d883a 	mov	r6,r2
   2579c:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
   257a0:	008001b4 	movhi	r2,6
   257a4:	10b79f04 	addi	r2,r2,-8580
   257a8:	10801317 	ldw	r2,76(r2)
   257ac:	e13fff17 	ldw	r4,-4(fp)
   257b0:	01400174 	movhi	r5,5
   257b4:	29790d04 	addi	r5,r5,-7116
   257b8:	100d883a 	mov	r6,r2
   257bc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
   257c0:	008001b4 	movhi	r2,6
   257c4:	10b79f04 	addi	r2,r2,-8580
   257c8:	10801417 	ldw	r2,80(r2)
   257cc:	e13fff17 	ldw	r4,-4(fp)
   257d0:	01400174 	movhi	r5,5
   257d4:	29791e04 	addi	r5,r5,-7048
   257d8:	100d883a 	mov	r6,r2
   257dc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
   257e0:	008001b4 	movhi	r2,6
   257e4:	10b79f04 	addi	r2,r2,-8580
   257e8:	10801017 	ldw	r2,64(r2)
   257ec:	e13fff17 	ldw	r4,-4(fp)
   257f0:	01400174 	movhi	r5,5
   257f4:	29793004 	addi	r5,r5,-6976
   257f8:	100d883a 	mov	r6,r2
   257fc:	002694c0 	call	2694c <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
   25800:	008001b4 	movhi	r2,6
   25804:	10b79f04 	addi	r2,r2,-8580
   25808:	10801517 	ldw	r2,84(r2)
   2580c:	e13fff17 	ldw	r4,-4(fp)
   25810:	01400174 	movhi	r5,5
   25814:	29794004 	addi	r5,r5,-6912
   25818:	100d883a 	mov	r6,r2
   2581c:	002694c0 	call	2694c <ns_printf>
   
   return IGMP_OK;
   25820:	0005883a 	mov	r2,zero
}
   25824:	e037883a 	mov	sp,fp
   25828:	dfc00117 	ldw	ra,4(sp)
   2582c:	df000017 	ldw	fp,0(sp)
   25830:	dec00204 	addi	sp,sp,8
   25834:	f800283a 	ret

00025838 <bsd_accept>:
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
   25838:	defff404 	addi	sp,sp,-48
   2583c:	dfc00b15 	stw	ra,44(sp)
   25840:	df000a15 	stw	fp,40(sp)
   25844:	df000a04 	addi	fp,sp,40
   25848:	e13ffd15 	stw	r4,-12(fp)
   2584c:	e17ffe15 	stw	r5,-8(fp)
   25850:	e1bfff15 	stw	r6,-4(fp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
   25854:	e0bffd17 	ldw	r2,-12(fp)
   25858:	10bff804 	addi	r2,r2,-32
   2585c:	1085883a 	add	r2,r2,r2
   25860:	1085883a 	add	r2,r2,r2
   25864:	e0bff715 	stw	r2,-36(fp)
   SOC_CHECK(so);
   25868:	008001b4 	movhi	r2,6
   2586c:	10b8d804 	addi	r2,r2,-7328
   25870:	e0bff615 	stw	r2,-40(fp)
   25874:	00000706 	br	25894 <bsd_accept+0x5c>
   25878:	e0fff617 	ldw	r3,-40(fp)
   2587c:	e0bff717 	ldw	r2,-36(fp)
   25880:	1880011e 	bne	r3,r2,25888 <bsd_accept+0x50>
   25884:	00000506 	br	2589c <bsd_accept+0x64>
   25888:	e0bff617 	ldw	r2,-40(fp)
   2588c:	10800017 	ldw	r2,0(r2)
   25890:	e0bff615 	stw	r2,-40(fp)
   25894:	e0bff617 	ldw	r2,-40(fp)
   25898:	103ff71e 	bne	r2,zero,25878 <__alt_mem_descriptor_memory+0xdefe5878>
   2589c:	e0fff617 	ldw	r3,-40(fp)
   258a0:	e0bff717 	ldw	r2,-36(fp)
   258a4:	18800326 	beq	r3,r2,258b4 <bsd_accept+0x7c>
   258a8:	002b0f40 	call	2b0f4 <dtrap>
   258ac:	00bfffc4 	movi	r2,-1
   258b0:	00002406 	br	25944 <bsd_accept+0x10c>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
   258b4:	e0bffe17 	ldw	r2,-8(fp)
   258b8:	10000726 	beq	r2,zero,258d8 <bsd_accept+0xa0>
   {
      if (addrlen == 0)
   258bc:	e0bfff17 	ldw	r2,-4(fp)
   258c0:	1000051e 	bne	r2,zero,258d8 <bsd_accept+0xa0>
      {
         so->so_error = EFAULT;
   258c4:	e0bff717 	ldw	r2,-36(fp)
   258c8:	00c00384 	movi	r3,14
   258cc:	10c00615 	stw	r3,24(r2)
         return -1;
   258d0:	00bfffc4 	movi	r2,-1
   258d4:	00001b06 	br	25944 <bsd_accept+0x10c>
      }
   }

   lret = t_accept(s, &laddr, addrlen);
   258d8:	e0bff904 	addi	r2,fp,-28
   258dc:	e13ffd17 	ldw	r4,-12(fp)
   258e0:	100b883a 	mov	r5,r2
   258e4:	e1bfff17 	ldw	r6,-4(fp)
   258e8:	002e2580 	call	2e258 <t_accept>
   258ec:	e0bff815 	stw	r2,-32(fp)
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
   258f0:	e0bff817 	ldw	r2,-32(fp)
   258f4:	10bfffe0 	cmpeqi	r2,r2,-1
   258f8:	1000111e 	bne	r2,zero,25940 <bsd_accept+0x108>
   258fc:	e0bffe17 	ldw	r2,-8(fp)
   25900:	10000f26 	beq	r2,zero,25940 <bsd_accept+0x108>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
   25904:	e0bfff17 	ldw	r2,-4(fp)
   25908:	10800017 	ldw	r2,0(r2)
   2590c:	10800470 	cmpltui	r2,r2,17
   25910:	1000031e 	bne	r2,zero,25920 <bsd_accept+0xe8>
         *addrlen = sizeof(struct sockaddr_in);
   25914:	e0bfff17 	ldw	r2,-4(fp)
   25918:	00c00404 	movi	r3,16
   2591c:	10c00015 	stw	r3,0(r2)
      MEMCPY(addr, &laddr, *addrlen);
   25920:	e0bfff17 	ldw	r2,-4(fp)
   25924:	10800017 	ldw	r2,0(r2)
   25928:	1007883a 	mov	r3,r2
   2592c:	e0bff904 	addi	r2,fp,-28
   25930:	e13ffe17 	ldw	r4,-8(fp)
   25934:	100b883a 	mov	r5,r2
   25938:	180d883a 	mov	r6,r3
   2593c:	0007c900 	call	7c90 <memcpy>
   }

   return lret;
   25940:	e0bff817 	ldw	r2,-32(fp)
}
   25944:	e037883a 	mov	sp,fp
   25948:	dfc00117 	ldw	ra,4(sp)
   2594c:	df000017 	ldw	fp,0(sp)
   25950:	dec00204 	addi	sp,sp,8
   25954:	f800283a 	ret

00025958 <bsd_getpeername>:
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
   25958:	defff304 	addi	sp,sp,-52
   2595c:	dfc00c15 	stw	ra,48(sp)
   25960:	df000b15 	stw	fp,44(sp)
   25964:	df000b04 	addi	fp,sp,44
   25968:	e13ffd15 	stw	r4,-12(fp)
   2596c:	e17ffe15 	stw	r5,-8(fp)
   25970:	e1bfff15 	stw	r6,-4(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   25974:	e0bffd17 	ldw	r2,-12(fp)
   25978:	10bff804 	addi	r2,r2,-32
   2597c:	1085883a 	add	r2,r2,r2
   25980:	1085883a 	add	r2,r2,r2
   25984:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
   25988:	008001b4 	movhi	r2,6
   2598c:	10b8d804 	addi	r2,r2,-7328
   25990:	e0bff515 	stw	r2,-44(fp)
   25994:	00000706 	br	259b4 <bsd_getpeername+0x5c>
   25998:	e0fff517 	ldw	r3,-44(fp)
   2599c:	e0bff617 	ldw	r2,-40(fp)
   259a0:	1880011e 	bne	r3,r2,259a8 <bsd_getpeername+0x50>
   259a4:	00000506 	br	259bc <bsd_getpeername+0x64>
   259a8:	e0bff517 	ldw	r2,-44(fp)
   259ac:	10800017 	ldw	r2,0(r2)
   259b0:	e0bff515 	stw	r2,-44(fp)
   259b4:	e0bff517 	ldw	r2,-44(fp)
   259b8:	103ff71e 	bne	r2,zero,25998 <__alt_mem_descriptor_memory+0xdefe5998>
   259bc:	e0fff517 	ldw	r3,-44(fp)
   259c0:	e0bff617 	ldw	r2,-40(fp)
   259c4:	18800326 	beq	r3,r2,259d4 <bsd_getpeername+0x7c>
   259c8:	002b0f40 	call	2b0f4 <dtrap>
   259cc:	00bfffc4 	movi	r2,-1
   259d0:	00002406 	br	25a64 <bsd_getpeername+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
   259d4:	e0bfff17 	ldw	r2,-4(fp)
   259d8:	1000051e 	bne	r2,zero,259f0 <bsd_getpeername+0x98>
   {
      so->so_error = EFAULT;
   259dc:	e0bff617 	ldw	r2,-40(fp)
   259e0:	00c00384 	movi	r3,14
   259e4:	10c00615 	stw	r3,24(r2)
      return -1;
   259e8:	00bfffc4 	movi	r2,-1
   259ec:	00001d06 	br	25a64 <bsd_getpeername+0x10c>
   }
   lnamelen = *namelen;
   259f0:	e0bfff17 	ldw	r2,-4(fp)
   259f4:	10800017 	ldw	r2,0(r2)
   259f8:	e0bffc15 	stw	r2,-16(fp)

   lret = t_getpeername(s, &lname, &lnamelen);
   259fc:	e0fff804 	addi	r3,fp,-32
   25a00:	e0bffc04 	addi	r2,fp,-16
   25a04:	e13ffd17 	ldw	r4,-12(fp)
   25a08:	180b883a 	mov	r5,r3
   25a0c:	100d883a 	mov	r6,r2
   25a10:	002e7100 	call	2e710 <t_getpeername>
   25a14:	e0bff715 	stw	r2,-36(fp)
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
   25a18:	e0bff717 	ldw	r2,-36(fp)
   25a1c:	10bfffe0 	cmpeqi	r2,r2,-1
   25a20:	10000f1e 	bne	r2,zero,25a60 <bsd_getpeername+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
   25a24:	e0bffc17 	ldw	r2,-16(fp)
   25a28:	10800470 	cmpltui	r2,r2,17
   25a2c:	1000021e 	bne	r2,zero,25a38 <bsd_getpeername+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
   25a30:	00800404 	movi	r2,16
   25a34:	e0bffc15 	stw	r2,-16(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
   25a38:	e0bffc17 	ldw	r2,-16(fp)
   25a3c:	1007883a 	mov	r3,r2
   25a40:	e0bff804 	addi	r2,fp,-32
   25a44:	e13ffe17 	ldw	r4,-8(fp)
   25a48:	100b883a 	mov	r5,r2
   25a4c:	180d883a 	mov	r6,r3
   25a50:	0007c900 	call	7c90 <memcpy>
      *namelen = lnamelen;
   25a54:	e0fffc17 	ldw	r3,-16(fp)
   25a58:	e0bfff17 	ldw	r2,-4(fp)
   25a5c:	10c00015 	stw	r3,0(r2)
   }

   return lret;
   25a60:	e0bff717 	ldw	r2,-36(fp)
}
   25a64:	e037883a 	mov	sp,fp
   25a68:	dfc00117 	ldw	ra,4(sp)
   25a6c:	df000017 	ldw	fp,0(sp)
   25a70:	dec00204 	addi	sp,sp,8
   25a74:	f800283a 	ret

00025a78 <bsd_getsockname>:
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
   25a78:	defff304 	addi	sp,sp,-52
   25a7c:	dfc00c15 	stw	ra,48(sp)
   25a80:	df000b15 	stw	fp,44(sp)
   25a84:	df000b04 	addi	fp,sp,44
   25a88:	e13ffd15 	stw	r4,-12(fp)
   25a8c:	e17ffe15 	stw	r5,-8(fp)
   25a90:	e1bfff15 	stw	r6,-4(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   25a94:	e0bffd17 	ldw	r2,-12(fp)
   25a98:	10bff804 	addi	r2,r2,-32
   25a9c:	1085883a 	add	r2,r2,r2
   25aa0:	1085883a 	add	r2,r2,r2
   25aa4:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
   25aa8:	008001b4 	movhi	r2,6
   25aac:	10b8d804 	addi	r2,r2,-7328
   25ab0:	e0bff515 	stw	r2,-44(fp)
   25ab4:	00000706 	br	25ad4 <bsd_getsockname+0x5c>
   25ab8:	e0fff517 	ldw	r3,-44(fp)
   25abc:	e0bff617 	ldw	r2,-40(fp)
   25ac0:	1880011e 	bne	r3,r2,25ac8 <bsd_getsockname+0x50>
   25ac4:	00000506 	br	25adc <bsd_getsockname+0x64>
   25ac8:	e0bff517 	ldw	r2,-44(fp)
   25acc:	10800017 	ldw	r2,0(r2)
   25ad0:	e0bff515 	stw	r2,-44(fp)
   25ad4:	e0bff517 	ldw	r2,-44(fp)
   25ad8:	103ff71e 	bne	r2,zero,25ab8 <__alt_mem_descriptor_memory+0xdefe5ab8>
   25adc:	e0fff517 	ldw	r3,-44(fp)
   25ae0:	e0bff617 	ldw	r2,-40(fp)
   25ae4:	18800326 	beq	r3,r2,25af4 <bsd_getsockname+0x7c>
   25ae8:	002b0f40 	call	2b0f4 <dtrap>
   25aec:	00bfffc4 	movi	r2,-1
   25af0:	00002406 	br	25b84 <bsd_getsockname+0x10c>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
   25af4:	e0bfff17 	ldw	r2,-4(fp)
   25af8:	1000051e 	bne	r2,zero,25b10 <bsd_getsockname+0x98>
   {
      so->so_error = EFAULT;
   25afc:	e0bff617 	ldw	r2,-40(fp)
   25b00:	00c00384 	movi	r3,14
   25b04:	10c00615 	stw	r3,24(r2)
      return -1;
   25b08:	00bfffc4 	movi	r2,-1
   25b0c:	00001d06 	br	25b84 <bsd_getsockname+0x10c>
   }
   lnamelen = *namelen;
   25b10:	e0bfff17 	ldw	r2,-4(fp)
   25b14:	10800017 	ldw	r2,0(r2)
   25b18:	e0bffc15 	stw	r2,-16(fp)

   lret = t_getsockname(s, &lname, &lnamelen);
   25b1c:	e0fff804 	addi	r3,fp,-32
   25b20:	e0bffc04 	addi	r2,fp,-16
   25b24:	e13ffd17 	ldw	r4,-12(fp)
   25b28:	180b883a 	mov	r5,r3
   25b2c:	100d883a 	mov	r6,r2
   25b30:	002e7540 	call	2e754 <t_getsockname>
   25b34:	e0bff715 	stw	r2,-36(fp)
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
   25b38:	e0bff717 	ldw	r2,-36(fp)
   25b3c:	10bfffe0 	cmpeqi	r2,r2,-1
   25b40:	10000f1e 	bne	r2,zero,25b80 <bsd_getsockname+0x108>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
   25b44:	e0bffc17 	ldw	r2,-16(fp)
   25b48:	10800470 	cmpltui	r2,r2,17
   25b4c:	1000021e 	bne	r2,zero,25b58 <bsd_getsockname+0xe0>
         lnamelen = sizeof(struct sockaddr_in);
   25b50:	00800404 	movi	r2,16
   25b54:	e0bffc15 	stw	r2,-16(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
   25b58:	e0bffc17 	ldw	r2,-16(fp)
   25b5c:	1007883a 	mov	r3,r2
   25b60:	e0bff804 	addi	r2,fp,-32
   25b64:	e13ffe17 	ldw	r4,-8(fp)
   25b68:	100b883a 	mov	r5,r2
   25b6c:	180d883a 	mov	r6,r3
   25b70:	0007c900 	call	7c90 <memcpy>
      *namelen = lnamelen;
   25b74:	e0fffc17 	ldw	r3,-16(fp)
   25b78:	e0bfff17 	ldw	r2,-4(fp)
   25b7c:	10c00015 	stw	r3,0(r2)
   }

   return lret;
   25b80:	e0bff717 	ldw	r2,-36(fp)
}
   25b84:	e037883a 	mov	sp,fp
   25b88:	dfc00117 	ldw	ra,4(sp)
   25b8c:	df000017 	ldw	fp,0(sp)
   25b90:	dec00204 	addi	sp,sp,8
   25b94:	f800283a 	ret

00025b98 <bsd_i_sockoptlen>:
 * RETURNS: minimum length of the named socket option, in bytes
 */
int 
bsd_i_sockoptlen(int level,
                 int name)
{
   25b98:	defffd04 	addi	sp,sp,-12
   25b9c:	df000215 	stw	fp,8(sp)
   25ba0:	df000204 	addi	fp,sp,8
   25ba4:	e13ffe15 	stw	r4,-8(fp)
   25ba8:	e17fff15 	stw	r5,-4(fp)
   USE_ARG(level);

   switch (name)
   25bac:	e0bfff17 	ldw	r2,-4(fp)
   25bb0:	10c02020 	cmpeqi	r3,r2,128
   25bb4:	1800341e 	bne	r3,zero,25c88 <bsd_i_sockoptlen+0xf0>
   25bb8:	10c02048 	cmpgei	r3,r2,129
   25bbc:	18001a1e 	bne	r3,zero,25c28 <bsd_i_sockoptlen+0x90>
   25bc0:	10c00308 	cmpgei	r3,r2,12
   25bc4:	18000e1e 	bne	r3,zero,25c00 <bsd_i_sockoptlen+0x68>
   25bc8:	10c00288 	cmpgei	r3,r2,10
   25bcc:	1800361e 	bne	r3,zero,25ca8 <bsd_i_sockoptlen+0x110>
   25bd0:	10c00120 	cmpeqi	r3,r2,4
   25bd4:	1800301e 	bne	r3,zero,25c98 <bsd_i_sockoptlen+0x100>
   25bd8:	10c00148 	cmpgei	r3,r2,5
   25bdc:	1800031e 	bne	r3,zero,25bec <bsd_i_sockoptlen+0x54>
   25be0:	108000e0 	cmpeqi	r2,r2,3
   25be4:	1000341e 	bne	r2,zero,25cb8 <bsd_i_sockoptlen+0x120>
   25be8:	00003506 	br	25cc0 <bsd_i_sockoptlen+0x128>
   25bec:	10c00220 	cmpeqi	r3,r2,8
   25bf0:	1800291e 	bne	r3,zero,25c98 <bsd_i_sockoptlen+0x100>
   25bf4:	10800260 	cmpeqi	r2,r2,9
   25bf8:	1000291e 	bne	r2,zero,25ca0 <bsd_i_sockoptlen+0x108>
   25bfc:	00003006 	br	25cc0 <bsd_i_sockoptlen+0x128>
   25c00:	10c00420 	cmpeqi	r3,r2,16
   25c04:	1800241e 	bne	r3,zero,25c98 <bsd_i_sockoptlen+0x100>
   25c08:	10c00448 	cmpgei	r3,r2,17
   25c0c:	1800031e 	bne	r3,zero,25c1c <bsd_i_sockoptlen+0x84>
   25c10:	10800388 	cmpgei	r2,r2,14
   25c14:	10002a1e 	bne	r2,zero,25cc0 <bsd_i_sockoptlen+0x128>
   25c18:	00002506 	br	25cb0 <bsd_i_sockoptlen+0x118>
   25c1c:	10800820 	cmpeqi	r2,r2,32
   25c20:	10001d1e 	bne	r2,zero,25c98 <bsd_i_sockoptlen+0x100>
   25c24:	00002606 	br	25cc0 <bsd_i_sockoptlen+0x128>
   25c28:	10c401c8 	cmpgei	r3,r2,4103
   25c2c:	18000a1e 	bne	r3,zero,25c58 <bsd_i_sockoptlen+0xc0>
   25c30:	10c40148 	cmpgei	r3,r2,4101
   25c34:	1800161e 	bne	r3,zero,25c90 <bsd_i_sockoptlen+0xf8>
   25c38:	10c04020 	cmpeqi	r3,r2,256
   25c3c:	1800161e 	bne	r3,zero,25c98 <bsd_i_sockoptlen+0x100>
   25c40:	10c04010 	cmplti	r3,r2,256
   25c44:	18001e1e 	bne	r3,zero,25cc0 <bsd_i_sockoptlen+0x128>
   25c48:	10bbffc4 	addi	r2,r2,-4097
   25c4c:	108000a8 	cmpgeui	r2,r2,2
   25c50:	10001b1e 	bne	r2,zero,25cc0 <bsd_i_sockoptlen+0x128>
   25c54:	00001006 	br	25c98 <bsd_i_sockoptlen+0x100>
   25c58:	10c40588 	cmpgei	r3,r2,4118
   25c5c:	1800051e 	bne	r3,zero,25c74 <bsd_i_sockoptlen+0xdc>
   25c60:	10c40508 	cmpgei	r3,r2,4116
   25c64:	1800061e 	bne	r3,zero,25c80 <bsd_i_sockoptlen+0xe8>
   25c68:	10840248 	cmpgei	r2,r2,4105
   25c6c:	1000141e 	bne	r2,zero,25cc0 <bsd_i_sockoptlen+0x128>
   25c70:	00000906 	br	25c98 <bsd_i_sockoptlen+0x100>
   25c74:	108405a0 	cmpeqi	r2,r2,4118
   25c78:	1000071e 	bne	r2,zero,25c98 <bsd_i_sockoptlen+0x100>
   25c7c:	00001006 	br	25cc0 <bsd_i_sockoptlen+0x128>
   {
   case SO_BIO:
   case SO_NBIO:
      /* these don't use an option value */
      return 0;
   25c80:	0005883a 	mov	r2,zero
   25c84:	00000f06 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   case SO_LINGER:
      /* this option is a struct linger */
      return sizeof(struct linger);
   25c88:	00800204 	movi	r2,8
   25c8c:	00000d06 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
   25c90:	00800084 	movi	r2,2
   25c94:	00000b06 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   case SO_RCVBUF:
   case SO_NONBLOCK:
   case SO_ERROR:
   case SO_TYPE:
      /* these options are type int */
      return sizeof(int);
   25c98:	00800104 	movi	r2,4
   25c9c:	00000906 	br	25cc4 <bsd_i_sockoptlen+0x12c>
      return sizeof(int (*)());
#endif /* TCP_ZEROCOPY */
#ifdef IP_MULTICAST
   case IP_MULTICAST_IF:
      /* this option is type ip_addr */
      return sizeof(ip_addr);
   25ca0:	00800104 	movi	r2,4
   25ca4:	00000706 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
   25ca8:	00800044 	movi	r2,1
   25cac:	00000506 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      /* these options are struct ip_mreq */
      return sizeof(struct ip_mreq);
   25cb0:	00800204 	movi	r2,8
   25cb4:	00000306 	br	25cc4 <bsd_i_sockoptlen+0x12c>
 * IP_TTL_OPT == SOREUSEADDR. This causes a build erro
 * due to duplicate cases. Removing this one. They both
 * return the same value (sizeof(int)).
 */
  // case IP_TTL_OPT:
      return sizeof(int);
   25cb8:	00800104 	movi	r2,4
   25cbc:	00000106 	br	25cc4 <bsd_i_sockoptlen+0x12c>
   default:
      /* we don't know what type these options are */
      return 0;
   25cc0:	0005883a 	mov	r2,zero
   }
   
}
   25cc4:	e037883a 	mov	sp,fp
   25cc8:	df000017 	ldw	fp,0(sp)
   25ccc:	dec00104 	addi	sp,sp,4
   25cd0:	f800283a 	ret

00025cd4 <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
   25cd4:	defff504 	addi	sp,sp,-44
   25cd8:	dfc00a15 	stw	ra,40(sp)
   25cdc:	df000915 	stw	fp,36(sp)
   25ce0:	df000904 	addi	fp,sp,36
   25ce4:	e13ffc15 	stw	r4,-16(fp)
   25ce8:	e17ffd15 	stw	r5,-12(fp)
   25cec:	e1bffe15 	stw	r6,-8(fp)
   25cf0:	e1ffff15 	stw	r7,-4(fp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
   25cf4:	e0bffc17 	ldw	r2,-16(fp)
   25cf8:	10bff804 	addi	r2,r2,-32
   25cfc:	1085883a 	add	r2,r2,r2
   25d00:	1085883a 	add	r2,r2,r2
   25d04:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
   25d08:	008001b4 	movhi	r2,6
   25d0c:	10b8d804 	addi	r2,r2,-7328
   25d10:	e0bff815 	stw	r2,-32(fp)
   25d14:	00000706 	br	25d34 <bsd_getsockopt+0x60>
   25d18:	e0fff817 	ldw	r3,-32(fp)
   25d1c:	e0bff917 	ldw	r2,-28(fp)
   25d20:	1880011e 	bne	r3,r2,25d28 <bsd_getsockopt+0x54>
   25d24:	00000506 	br	25d3c <bsd_getsockopt+0x68>
   25d28:	e0bff817 	ldw	r2,-32(fp)
   25d2c:	10800017 	ldw	r2,0(r2)
   25d30:	e0bff815 	stw	r2,-32(fp)
   25d34:	e0bff817 	ldw	r2,-32(fp)
   25d38:	103ff71e 	bne	r2,zero,25d18 <__alt_mem_descriptor_memory+0xdefe5d18>
   25d3c:	e0fff817 	ldw	r3,-32(fp)
   25d40:	e0bff917 	ldw	r2,-28(fp)
   25d44:	18800326 	beq	r3,r2,25d54 <bsd_getsockopt+0x80>
   25d48:	002b0f40 	call	2b0f4 <dtrap>
   25d4c:	00bfffc4 	movi	r2,-1
   25d50:	00001d06 	br	25dc8 <bsd_getsockopt+0xf4>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
   25d54:	e13ffd17 	ldw	r4,-12(fp)
   25d58:	e17ffe17 	ldw	r5,-8(fp)
   25d5c:	0025b980 	call	25b98 <bsd_i_sockoptlen>
   25d60:	e0bffa15 	stw	r2,-24(fp)
   if ((optlen == NULL) || (*optlen < loptlen))
   25d64:	e0800217 	ldw	r2,8(fp)
   25d68:	10000426 	beq	r2,zero,25d7c <bsd_getsockopt+0xa8>
   25d6c:	e0800217 	ldw	r2,8(fp)
   25d70:	10c00017 	ldw	r3,0(r2)
   25d74:	e0bffa17 	ldw	r2,-24(fp)
   25d78:	1880050e 	bge	r3,r2,25d90 <bsd_getsockopt+0xbc>
   {
      so->so_error = EFAULT;
   25d7c:	e0bff917 	ldw	r2,-28(fp)
   25d80:	00c00384 	movi	r3,14
   25d84:	10c00615 	stw	r3,24(r2)
      return -1;
   25d88:	00bfffc4 	movi	r2,-1
   25d8c:	00000e06 	br	25dc8 <bsd_getsockopt+0xf4>
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
   25d90:	e0bffa17 	ldw	r2,-24(fp)
   25d94:	d8800015 	stw	r2,0(sp)
   25d98:	e13ffc17 	ldw	r4,-16(fp)
   25d9c:	e17ffd17 	ldw	r5,-12(fp)
   25da0:	e1bffe17 	ldw	r6,-8(fp)
   25da4:	e1ffff17 	ldw	r7,-4(fp)
   25da8:	002eb280 	call	2eb28 <t_getsockopt>
   25dac:	e0bffb15 	stw	r2,-20(fp)

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
   25db0:	e0bffb17 	ldw	r2,-20(fp)
   25db4:	1000031e 	bne	r2,zero,25dc4 <bsd_getsockopt+0xf0>
   {
      *optlen = loptlen;
   25db8:	e0800217 	ldw	r2,8(fp)
   25dbc:	e0fffa17 	ldw	r3,-24(fp)
   25dc0:	10c00015 	stw	r3,0(r2)
   }

   return e;
   25dc4:	e0bffb17 	ldw	r2,-20(fp)
   
}
   25dc8:	e037883a 	mov	sp,fp
   25dcc:	dfc00117 	ldw	ra,4(sp)
   25dd0:	df000017 	ldw	fp,0(sp)
   25dd4:	dec00204 	addi	sp,sp,8
   25dd8:	f800283a 	ret

00025ddc <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
   25ddc:	defff504 	addi	sp,sp,-44
   25de0:	dfc00815 	stw	ra,32(sp)
   25de4:	df000715 	stw	fp,28(sp)
   25de8:	df000704 	addi	fp,sp,28
   25dec:	e13ffe15 	stw	r4,-8(fp)
   25df0:	e1800215 	stw	r6,8(fp)
   25df4:	e1c00315 	stw	r7,12(fp)
   25df8:	e17fff15 	stw	r5,-4(fp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
   25dfc:	e0bffe17 	ldw	r2,-8(fp)
   25e00:	10bff804 	addi	r2,r2,-32
   25e04:	1085883a 	add	r2,r2,r2
   25e08:	1085883a 	add	r2,r2,r2
   25e0c:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
   25e10:	008001b4 	movhi	r2,6
   25e14:	10b8d804 	addi	r2,r2,-7328
   25e18:	e0bffa15 	stw	r2,-24(fp)
   25e1c:	00000706 	br	25e3c <bsd_ioctl+0x60>
   25e20:	e0fffa17 	ldw	r3,-24(fp)
   25e24:	e0bffb17 	ldw	r2,-20(fp)
   25e28:	1880011e 	bne	r3,r2,25e30 <bsd_ioctl+0x54>
   25e2c:	00000506 	br	25e44 <bsd_ioctl+0x68>
   25e30:	e0bffa17 	ldw	r2,-24(fp)
   25e34:	10800017 	ldw	r2,0(r2)
   25e38:	e0bffa15 	stw	r2,-24(fp)
   25e3c:	e0bffa17 	ldw	r2,-24(fp)
   25e40:	103ff71e 	bne	r2,zero,25e20 <__alt_mem_descriptor_memory+0xdefe5e20>
   25e44:	e0fffa17 	ldw	r3,-24(fp)
   25e48:	e0bffb17 	ldw	r2,-20(fp)
   25e4c:	18800326 	beq	r3,r2,25e5c <bsd_ioctl+0x80>
   25e50:	002b0f40 	call	2b0f4 <dtrap>
   25e54:	00bfffc4 	movi	r2,-1
   25e58:	00001706 	br	25eb8 <bsd_ioctl+0xdc>

   va_start(argptr, request);
   25e5c:	e0800204 	addi	r2,fp,8
   25e60:	e0bffc15 	stw	r2,-16(fp)

   switch (request)
   25e64:	e0bfff17 	ldw	r2,-4(fp)
   25e68:	108405a0 	cmpeqi	r2,r2,4118
   25e6c:	10000e26 	beq	r2,zero,25ea8 <bsd_ioctl+0xcc>
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
   25e70:	e0bffc17 	ldw	r2,-16(fp)
   25e74:	10c00104 	addi	r3,r2,4
   25e78:	e0fffc15 	stw	r3,-16(fp)
   25e7c:	10800017 	ldw	r2,0(r2)
   25e80:	e0bffd15 	stw	r2,-12(fp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
   25e84:	e0fffd04 	addi	r3,fp,-12
   25e88:	00800104 	movi	r2,4
   25e8c:	d8800015 	stw	r2,0(sp)
   25e90:	e13ffe17 	ldw	r4,-8(fp)
   25e94:	017fffc4 	movi	r5,-1
   25e98:	01840584 	movi	r6,4118
   25e9c:	180f883a 	mov	r7,r3
   25ea0:	002e96c0 	call	2e96c <t_setsockopt>
   25ea4:	00000406 	br	25eb8 <bsd_ioctl+0xdc>
   default:
      so->so_error = EINVAL;
   25ea8:	e0bffb17 	ldw	r2,-20(fp)
   25eac:	00c00584 	movi	r3,22
   25eb0:	10c00615 	stw	r3,24(r2)
      return -1;
   25eb4:	00bfffc4 	movi	r2,-1
   }
}
   25eb8:	e037883a 	mov	sp,fp
   25ebc:	dfc00117 	ldw	ra,4(sp)
   25ec0:	df000017 	ldw	fp,0(sp)
   25ec4:	dec00404 	addi	sp,sp,16
   25ec8:	f800283a 	ret

00025ecc <bsd_inet_ntoa>:
 * RETURNS: pointer to null-terminated string containing dotted-decimal
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
   25ecc:	defffd04 	addi	sp,sp,-12
   25ed0:	dfc00215 	stw	ra,8(sp)
   25ed4:	df000115 	stw	fp,4(sp)
   25ed8:	df000104 	addi	fp,sp,4
   25edc:	e13fff15 	stw	r4,-4(fp)
   return print_ipad(in.s_addr);
   25ee0:	e0bfff17 	ldw	r2,-4(fp)
   25ee4:	1009883a 	mov	r4,r2
   25ee8:	00265840 	call	26584 <print_ipad>
}
   25eec:	e037883a 	mov	sp,fp
   25ef0:	dfc00117 	ldw	ra,4(sp)
   25ef4:	df000017 	ldw	fp,0(sp)
   25ef8:	dec00204 	addi	sp,sp,8
   25efc:	f800283a 	ret

00025f00 <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
   25f00:	defff004 	addi	sp,sp,-64
   25f04:	dfc00f15 	stw	ra,60(sp)
   25f08:	df000e15 	stw	fp,56(sp)
   25f0c:	df000e04 	addi	fp,sp,56
   25f10:	e13ffc15 	stw	r4,-16(fp)
   25f14:	e17ffd15 	stw	r5,-12(fp)
   25f18:	e1bffe15 	stw	r6,-8(fp)
   25f1c:	e1ffff15 	stw	r7,-4(fp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
   25f20:	e03ffb15 	stw	zero,-20(fp)
   int lret;

   so = LONG2SO(s);
   25f24:	e0bffc17 	ldw	r2,-16(fp)
   25f28:	10bff804 	addi	r2,r2,-32
   25f2c:	1085883a 	add	r2,r2,r2
   25f30:	1085883a 	add	r2,r2,r2
   25f34:	e0bff515 	stw	r2,-44(fp)
   SOC_CHECK(so);
   25f38:	008001b4 	movhi	r2,6
   25f3c:	10b8d804 	addi	r2,r2,-7328
   25f40:	e0bff415 	stw	r2,-48(fp)
   25f44:	00000706 	br	25f64 <bsd_recvfrom+0x64>
   25f48:	e0fff417 	ldw	r3,-48(fp)
   25f4c:	e0bff517 	ldw	r2,-44(fp)
   25f50:	1880011e 	bne	r3,r2,25f58 <bsd_recvfrom+0x58>
   25f54:	00000506 	br	25f6c <bsd_recvfrom+0x6c>
   25f58:	e0bff417 	ldw	r2,-48(fp)
   25f5c:	10800017 	ldw	r2,0(r2)
   25f60:	e0bff415 	stw	r2,-48(fp)
   25f64:	e0bff417 	ldw	r2,-48(fp)
   25f68:	103ff71e 	bne	r2,zero,25f48 <__alt_mem_descriptor_memory+0xdefe5f48>
   25f6c:	e0fff417 	ldw	r3,-48(fp)
   25f70:	e0bff517 	ldw	r2,-44(fp)
   25f74:	18800326 	beq	r3,r2,25f84 <bsd_recvfrom+0x84>
   25f78:	002b0f40 	call	2b0f4 <dtrap>
   25f7c:	00bfffc4 	movi	r2,-1
   25f80:	00002b06 	br	26030 <bsd_recvfrom+0x130>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
   25f84:	e0800217 	ldw	r2,8(fp)
   25f88:	10000a26 	beq	r2,zero,25fb4 <bsd_recvfrom+0xb4>
   {
      if (fromlen == NULL)
   25f8c:	e0800317 	ldw	r2,12(fp)
   25f90:	1000051e 	bne	r2,zero,25fa8 <bsd_recvfrom+0xa8>
      {
         so->so_error = EFAULT;
   25f94:	e0bff517 	ldw	r2,-44(fp)
   25f98:	00c00384 	movi	r3,14
   25f9c:	10c00615 	stw	r3,24(r2)
         return -1;
   25fa0:	00bfffc4 	movi	r2,-1
   25fa4:	00002206 	br	26030 <bsd_recvfrom+0x130>
      }
      lfromlen = *fromlen;
   25fa8:	e0800317 	ldw	r2,12(fp)
   25fac:	10800017 	ldw	r2,0(r2)
   25fb0:	e0bffb15 	stw	r2,-20(fp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
   25fb4:	e0bff704 	addi	r2,fp,-36
   25fb8:	d8800015 	stw	r2,0(sp)
   25fbc:	e0bffb04 	addi	r2,fp,-20
   25fc0:	d8800115 	stw	r2,4(sp)
   25fc4:	e13ffc17 	ldw	r4,-16(fp)
   25fc8:	e17ffd17 	ldw	r5,-12(fp)
   25fcc:	e1bffe17 	ldw	r6,-8(fp)
   25fd0:	e1ffff17 	ldw	r7,-4(fp)
   25fd4:	002ed900 	call	2ed90 <t_recvfrom>
   25fd8:	e0bff615 	stw	r2,-40(fp)
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
   25fdc:	e0bff617 	ldw	r2,-40(fp)
   25fe0:	10bfffe0 	cmpeqi	r2,r2,-1
   25fe4:	1000111e 	bne	r2,zero,2602c <bsd_recvfrom+0x12c>
   25fe8:	e0800217 	ldw	r2,8(fp)
   25fec:	10000f26 	beq	r2,zero,2602c <bsd_recvfrom+0x12c>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
   25ff0:	e0bffb17 	ldw	r2,-20(fp)
   25ff4:	10800470 	cmpltui	r2,r2,17
   25ff8:	1000021e 	bne	r2,zero,26004 <bsd_recvfrom+0x104>
         lfromlen = sizeof(struct sockaddr_in);
   25ffc:	00800404 	movi	r2,16
   26000:	e0bffb15 	stw	r2,-20(fp)
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
   26004:	e0bffb17 	ldw	r2,-20(fp)
   26008:	1007883a 	mov	r3,r2
   2600c:	e0bff704 	addi	r2,fp,-36
   26010:	e1000217 	ldw	r4,8(fp)
   26014:	100b883a 	mov	r5,r2
   26018:	180d883a 	mov	r6,r3
   2601c:	0007c900 	call	7c90 <memcpy>
      *fromlen = lfromlen;
   26020:	e0fffb17 	ldw	r3,-20(fp)
   26024:	e0800317 	ldw	r2,12(fp)
   26028:	10c00015 	stw	r3,0(r2)
   }

   return lret;
   2602c:	e0bff617 	ldw	r2,-40(fp)
}
   26030:	e037883a 	mov	sp,fp
   26034:	dfc00117 	ldw	ra,4(sp)
   26038:	df000017 	ldw	fp,0(sp)
   2603c:	dec00204 	addi	sp,sp,8
   26040:	f800283a 	ret

00026044 <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
   26044:	defff804 	addi	sp,sp,-32
   26048:	dfc00715 	stw	ra,28(sp)
   2604c:	df000615 	stw	fp,24(sp)
   26050:	df000604 	addi	fp,sp,24
   26054:	e13ffc15 	stw	r4,-16(fp)
   26058:	e17ffd15 	stw	r5,-12(fp)
   2605c:	e1bffe15 	stw	r6,-8(fp)
   26060:	e1ffff15 	stw	r7,-4(fp)
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
   26064:	e0800217 	ldw	r2,8(fp)
   26068:	10004b26 	beq	r2,zero,26198 <bsd_select+0x154>
       * million (i.e. any number of microseconds up to one second).
       * So we scale tv_usec from microseconds to something reasonable
       * based on TPS, multiply it by TPS, then scale it the rest of
       * the way to ticks-per-second.
       */
      tps = TPS;
   2606c:	00801904 	movi	r2,100
   26070:	e0bffb15 	stw	r2,-20(fp)
      if (tps >= 1000)
   26074:	e0bffb17 	ldw	r2,-20(fp)
   26078:	1080fa10 	cmplti	r2,r2,1000
   2607c:	10000e1e 	bne	r2,zero,260b8 <bsd_select+0x74>
      {
         ltv = (((timeout->tv_usec + 50) / 100) * tps) / 10000;
   26080:	e0800217 	ldw	r2,8(fp)
   26084:	10800117 	ldw	r2,4(r2)
   26088:	10800c84 	addi	r2,r2,50
   2608c:	1009883a 	mov	r4,r2
   26090:	01401904 	movi	r5,100
   26094:	00151a00 	call	151a0 <__divsi3>
   26098:	1007883a 	mov	r3,r2
   2609c:	e0bffb17 	ldw	r2,-20(fp)
   260a0:	1885383a 	mul	r2,r3,r2
   260a4:	1009883a 	mov	r4,r2
   260a8:	0149c404 	movi	r5,10000
   260ac:	00151a00 	call	151a0 <__divsi3>
   260b0:	e0bffa15 	stw	r2,-24(fp)
   260b4:	00003106 	br	2617c <bsd_select+0x138>
      }
      else if (tps >= 100)
   260b8:	e0bffb17 	ldw	r2,-20(fp)
   260bc:	10801910 	cmplti	r2,r2,100
   260c0:	10000e1e 	bne	r2,zero,260fc <bsd_select+0xb8>
      {
         ltv = (((timeout->tv_usec + 500) / 1000) * tps) / 1000;
   260c4:	e0800217 	ldw	r2,8(fp)
   260c8:	10800117 	ldw	r2,4(r2)
   260cc:	10807d04 	addi	r2,r2,500
   260d0:	1009883a 	mov	r4,r2
   260d4:	0140fa04 	movi	r5,1000
   260d8:	00151a00 	call	151a0 <__divsi3>
   260dc:	1007883a 	mov	r3,r2
   260e0:	e0bffb17 	ldw	r2,-20(fp)
   260e4:	1885383a 	mul	r2,r3,r2
   260e8:	1009883a 	mov	r4,r2
   260ec:	0140fa04 	movi	r5,1000
   260f0:	00151a00 	call	151a0 <__divsi3>
   260f4:	e0bffa15 	stw	r2,-24(fp)
   260f8:	00002006 	br	2617c <bsd_select+0x138>
      }
      else if (tps >= 10)
   260fc:	e0bffb17 	ldw	r2,-20(fp)
   26100:	10800290 	cmplti	r2,r2,10
   26104:	10000e1e 	bne	r2,zero,26140 <bsd_select+0xfc>
      {
         ltv = (((timeout->tv_usec + 5000) / 10000) * tps) / 100;
   26108:	e0800217 	ldw	r2,8(fp)
   2610c:	10800117 	ldw	r2,4(r2)
   26110:	1084e204 	addi	r2,r2,5000
   26114:	1009883a 	mov	r4,r2
   26118:	0149c404 	movi	r5,10000
   2611c:	00151a00 	call	151a0 <__divsi3>
   26120:	1007883a 	mov	r3,r2
   26124:	e0bffb17 	ldw	r2,-20(fp)
   26128:	1885383a 	mul	r2,r3,r2
   2612c:	1009883a 	mov	r4,r2
   26130:	01401904 	movi	r5,100
   26134:	00151a00 	call	151a0 <__divsi3>
   26138:	e0bffa15 	stw	r2,-24(fp)
   2613c:	00000f06 	br	2617c <bsd_select+0x138>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
   26140:	e0800217 	ldw	r2,8(fp)
   26144:	10c00117 	ldw	r3,4(r2)
   26148:	00b0d414 	movui	r2,50000
   2614c:	1885883a 	add	r2,r3,r2
   26150:	1009883a 	mov	r4,r2
   26154:	014000b4 	movhi	r5,2
   26158:	2961a804 	addi	r5,r5,-31072
   2615c:	00151a00 	call	151a0 <__divsi3>
   26160:	1007883a 	mov	r3,r2
   26164:	e0bffb17 	ldw	r2,-20(fp)
   26168:	1885383a 	mul	r2,r3,r2
   2616c:	1009883a 	mov	r4,r2
   26170:	01400284 	movi	r5,10
   26174:	00151a00 	call	151a0 <__divsi3>
   26178:	e0bffa15 	stw	r2,-24(fp)
      }
      ltv += (timeout->tv_sec * TPS);
   2617c:	e0800217 	ldw	r2,8(fp)
   26180:	10800017 	ldw	r2,0(r2)
   26184:	10801924 	muli	r2,r2,100
   26188:	e0fffa17 	ldw	r3,-24(fp)
   2618c:	1885883a 	add	r2,r3,r2
   26190:	e0bffa15 	stw	r2,-24(fp)
   26194:	00000206 	br	261a0 <bsd_select+0x15c>
   }
   else {
      /*
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
   26198:	00bfffc4 	movi	r2,-1
   2619c:	e0bffa15 	stw	r2,-24(fp)
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
   261a0:	e13ffd17 	ldw	r4,-12(fp)
   261a4:	e17ffe17 	ldw	r5,-8(fp)
   261a8:	e1bfff17 	ldw	r6,-4(fp)
   261ac:	e1fffa17 	ldw	r7,-24(fp)
   261b0:	00328080 	call	32808 <t_select>
}
   261b4:	e037883a 	mov	sp,fp
   261b8:	dfc00117 	ldw	ra,4(sp)
   261bc:	df000017 	ldw	fp,0(sp)
   261c0:	dec00204 	addi	sp,sp,8
   261c4:	f800283a 	ret

000261c8 <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
   261c8:	defff704 	addi	sp,sp,-36
   261cc:	dfc00815 	stw	ra,32(sp)
   261d0:	df000715 	stw	fp,28(sp)
   261d4:	df000704 	addi	fp,sp,28
   261d8:	e13ffc15 	stw	r4,-16(fp)
   261dc:	e17ffd15 	stw	r5,-12(fp)
   261e0:	e1bffe15 	stw	r6,-8(fp)
   261e4:	e1ffff15 	stw	r7,-4(fp)
   struct socket * so;

   so = LONG2SO(s);
   261e8:	e0bffc17 	ldw	r2,-16(fp)
   261ec:	10bff804 	addi	r2,r2,-32
   261f0:	1085883a 	add	r2,r2,r2
   261f4:	1085883a 	add	r2,r2,r2
   261f8:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
   261fc:	008001b4 	movhi	r2,6
   26200:	10b8d804 	addi	r2,r2,-7328
   26204:	e0bffa15 	stw	r2,-24(fp)
   26208:	00000706 	br	26228 <bsd_setsockopt+0x60>
   2620c:	e0fffa17 	ldw	r3,-24(fp)
   26210:	e0bffb17 	ldw	r2,-20(fp)
   26214:	1880011e 	bne	r3,r2,2621c <bsd_setsockopt+0x54>
   26218:	00000506 	br	26230 <bsd_setsockopt+0x68>
   2621c:	e0bffa17 	ldw	r2,-24(fp)
   26220:	10800017 	ldw	r2,0(r2)
   26224:	e0bffa15 	stw	r2,-24(fp)
   26228:	e0bffa17 	ldw	r2,-24(fp)
   2622c:	103ff71e 	bne	r2,zero,2620c <__alt_mem_descriptor_memory+0xdefe620c>
   26230:	e0fffa17 	ldw	r3,-24(fp)
   26234:	e0bffb17 	ldw	r2,-20(fp)
   26238:	18800326 	beq	r3,r2,26248 <bsd_setsockopt+0x80>
   2623c:	002b0f40 	call	2b0f4 <dtrap>
   26240:	00bfffc4 	movi	r2,-1
   26244:	00001206 	br	26290 <bsd_setsockopt+0xc8>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
   26248:	e13ffd17 	ldw	r4,-12(fp)
   2624c:	e17ffe17 	ldw	r5,-8(fp)
   26250:	0025b980 	call	25b98 <bsd_i_sockoptlen>
   26254:	1007883a 	mov	r3,r2
   26258:	e0800217 	ldw	r2,8(fp)
   2625c:	10c0050e 	bge	r2,r3,26274 <bsd_setsockopt+0xac>
   {
      so->so_error = EFAULT;
   26260:	e0bffb17 	ldw	r2,-20(fp)
   26264:	00c00384 	movi	r3,14
   26268:	10c00615 	stw	r3,24(r2)
      return -1;
   2626c:	00bfffc4 	movi	r2,-1
   26270:	00000706 	br	26290 <bsd_setsockopt+0xc8>
   }

   return t_setsockopt(s, level, name, opt, optlen);
   26274:	e0800217 	ldw	r2,8(fp)
   26278:	d8800015 	stw	r2,0(sp)
   2627c:	e13ffc17 	ldw	r4,-16(fp)
   26280:	e17ffd17 	ldw	r5,-12(fp)
   26284:	e1bffe17 	ldw	r6,-8(fp)
   26288:	e1ffff17 	ldw	r7,-4(fp)
   2628c:	002e96c0 	call	2e96c <t_setsockopt>
}
   26290:	e037883a 	mov	sp,fp
   26294:	dfc00117 	ldw	ra,4(sp)
   26298:	df000017 	ldw	fp,0(sp)
   2629c:	dec00204 	addi	sp,sp,8
   262a0:	f800283a 	ret

000262a4 <ccksum>:
 * be done in 16-bit chunks.
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
   262a4:	defffa04 	addi	sp,sp,-24
   262a8:	df000515 	stw	fp,20(sp)
   262ac:	df000504 	addi	fp,sp,20
   262b0:	e13ffe15 	stw	r4,-8(fp)
   262b4:	e17fff15 	stw	r5,-4(fp)
   unsigned short *addr = (unsigned short *)ptr;
   262b8:	e0bffe17 	ldw	r2,-8(fp)
   262bc:	e0bffb15 	stw	r2,-20(fp)
   unsigned long sum = 0;
   262c0:	e03ffc15 	stw	zero,-16(fp)
   int count = (int)words;
   262c4:	e0bfff17 	ldw	r2,-4(fp)
   262c8:	e0bffd15 	stw	r2,-12(fp)

   while (--count >= 0)
   262cc:	00000806 	br	262f0 <ccksum+0x4c>
   {
      /*  This is the inner loop */
      sum += *addr++;
   262d0:	e0bffb17 	ldw	r2,-20(fp)
   262d4:	10c00084 	addi	r3,r2,2
   262d8:	e0fffb15 	stw	r3,-20(fp)
   262dc:	1080000b 	ldhu	r2,0(r2)
   262e0:	10bfffcc 	andi	r2,r2,65535
   262e4:	e0fffc17 	ldw	r3,-16(fp)
   262e8:	1885883a 	add	r2,r3,r2
   262ec:	e0bffc15 	stw	r2,-16(fp)
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
   262f0:	e0bffd17 	ldw	r2,-12(fp)
   262f4:	10bfffc4 	addi	r2,r2,-1
   262f8:	e0bffd15 	stw	r2,-12(fp)
   262fc:	e0bffd17 	ldw	r2,-12(fp)
   26300:	103ff30e 	bge	r2,zero,262d0 <__alt_mem_descriptor_memory+0xdefe62d0>
      /*  This is the inner loop */
      sum += *addr++;
   }

   /*  Fold 32-bit sum to 16 bits */
   sum = (sum & 0xffff) + (sum >> 16);
   26304:	e0bffc17 	ldw	r2,-16(fp)
   26308:	10ffffcc 	andi	r3,r2,65535
   2630c:	e0bffc17 	ldw	r2,-16(fp)
   26310:	1004d43a 	srli	r2,r2,16
   26314:	1885883a 	add	r2,r3,r2
   26318:	e0bffc15 	stw	r2,-16(fp)
   sum = (sum & 0xffff) + (sum >> 16);
   2631c:	e0bffc17 	ldw	r2,-16(fp)
   26320:	10ffffcc 	andi	r3,r2,65535
   26324:	e0bffc17 	ldw	r2,-16(fp)
   26328:	1004d43a 	srli	r2,r2,16
   2632c:	1885883a 	add	r2,r3,r2
   26330:	e0bffc15 	stw	r2,-16(fp)

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
   26334:	e0bffc17 	ldw	r2,-16(fp)
}
   26338:	e037883a 	mov	sp,fp
   2633c:	df000017 	ldw	fp,0(sp)
   26340:	dec00104 	addi	sp,sp,4
   26344:	f800283a 	ret

00026348 <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
   26348:	defffc04 	addi	sp,sp,-16
   2634c:	dfc00315 	stw	ra,12(sp)
   26350:	df000215 	stw	fp,8(sp)
   26354:	df000204 	addi	fp,sp,8
   26358:	e13ffe15 	stw	r4,-8(fp)
   2635c:	e17fff15 	stw	r5,-4(fp)
   switch (cksum_select)
   26360:	d0a02e17 	ldw	r2,-32584(gp)
   26364:	108000a0 	cmpeqi	r2,r2,2
   26368:	1000041e 	bne	r2,zero,2637c <cksum+0x34>
   {
      case 1:
      default:
         return (ccksum(ptr, count));
   2636c:	e13ffe17 	ldw	r4,-8(fp)
   26370:	e17fff17 	ldw	r5,-4(fp)
   26374:	00262a40 	call	262a4 <ccksum>
   26378:	00000306 	br	26388 <cksum+0x40>
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
   2637c:	e13ffe17 	ldw	r4,-8(fp)
   26380:	e17fff17 	ldw	r5,-4(fp)
   26384:	002af600 	call	2af60 <asm_cksum>
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
   26388:	e037883a 	mov	sp,fp
   2638c:	dfc00117 	ldw	ra,4(sp)
   26390:	df000017 	ldw	fp,0(sp)
   26394:	dec00204 	addi	sp,sp,8
   26398:	f800283a 	ret

0002639c <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
   2639c:	defffe04 	addi	sp,sp,-8
   263a0:	dfc00115 	stw	ra,4(sp)
   263a4:	df000015 	stw	fp,0(sp)
   263a8:	d839883a 	mov	fp,sp
   dtrap();
   263ac:	002b0f40 	call	2b0f4 <dtrap>
   return 0;
   263b0:	0005883a 	mov	r2,zero
}
   263b4:	e037883a 	mov	sp,fp
   263b8:	dfc00117 	ldw	ra,4(sp)
   263bc:	df000017 	ldw	fp,0(sp)
   263c0:	dec00204 	addi	sp,sp,8
   263c4:	f800283a 	ret

000263c8 <nextarg>:
 * RETURNS:  pointer to next arg in string 
 */

char *   
nextarg(char * argp)
{
   263c8:	defffe04 	addi	sp,sp,-8
   263cc:	df000115 	stw	fp,4(sp)
   263d0:	df000104 	addi	fp,sp,4
   263d4:	e13fff15 	stw	r4,-4(fp)
   while (*argp > ' ')argp++; /* scan past current arg */
   263d8:	00000306 	br	263e8 <nextarg+0x20>
   263dc:	e0bfff17 	ldw	r2,-4(fp)
   263e0:	10800044 	addi	r2,r2,1
   263e4:	e0bfff15 	stw	r2,-4(fp)
   263e8:	e0bfff17 	ldw	r2,-4(fp)
   263ec:	10800003 	ldbu	r2,0(r2)
   263f0:	10803fcc 	andi	r2,r2,255
   263f4:	1080201c 	xori	r2,r2,128
   263f8:	10bfe004 	addi	r2,r2,-128
   263fc:	10800848 	cmpgei	r2,r2,33
   26400:	103ff61e 	bne	r2,zero,263dc <__alt_mem_descriptor_memory+0xdefe63dc>
      while (*argp == ' ')argp++;   /* scan past spaces */
   26404:	00000306 	br	26414 <nextarg+0x4c>
   26408:	e0bfff17 	ldw	r2,-4(fp)
   2640c:	10800044 	addi	r2,r2,1
   26410:	e0bfff15 	stw	r2,-4(fp)
   26414:	e0bfff17 	ldw	r2,-4(fp)
   26418:	10800003 	ldbu	r2,0(r2)
   2641c:	10803fcc 	andi	r2,r2,255
   26420:	1080201c 	xori	r2,r2,128
   26424:	10bfe004 	addi	r2,r2,-128
   26428:	10800820 	cmpeqi	r2,r2,32
   2642c:	103ff61e 	bne	r2,zero,26408 <__alt_mem_descriptor_memory+0xdefe6408>
      return (argp);
   26430:	e0bfff17 	ldw	r2,-4(fp)
}
   26434:	e037883a 	mov	sp,fp
   26438:	df000017 	ldw	fp,0(sp)
   2643c:	dec00104 	addi	sp,sp,4
   26440:	f800283a 	ret

00026444 <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
   26444:	defff804 	addi	sp,sp,-32
   26448:	dfc00715 	stw	ra,28(sp)
   2644c:	df000615 	stw	fp,24(sp)
   26450:	df000604 	addi	fp,sp,24
   26454:	e13ffd15 	stw	r4,-12(fp)
   26458:	e17ffe15 	stw	r5,-8(fp)
   2645c:	e1bfff15 	stw	r6,-4(fp)
   u_char * data  =  (u_char *)buffer;
   26460:	e0bffe17 	ldw	r2,-8(fp)
   26464:	e0bffa15 	stw	r2,-24(fp)
   unsigned int count;
   char  c;

   while (len)
   26468:	00003f06 	br	26568 <hexdump+0x124>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
   2646c:	e03ffb15 	stw	zero,-20(fp)
   26470:	00000d06 	br	264a8 <hexdump+0x64>
         ns_printf(pio, "%02x ", *(data + count));
   26474:	e0fffa17 	ldw	r3,-24(fp)
   26478:	e0bffb17 	ldw	r2,-20(fp)
   2647c:	1885883a 	add	r2,r3,r2
   26480:	10800003 	ldbu	r2,0(r2)
   26484:	10803fcc 	andi	r2,r2,255
   26488:	e13ffd17 	ldw	r4,-12(fp)
   2648c:	01400174 	movhi	r5,5
   26490:	29795004 	addi	r5,r5,-6848
   26494:	100d883a 	mov	r6,r2
   26498:	002694c0 	call	2694c <ns_printf>
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
   2649c:	e0bffb17 	ldw	r2,-20(fp)
   264a0:	10800044 	addi	r2,r2,1
   264a4:	e0bffb15 	stw	r2,-20(fp)
   264a8:	e0bffb17 	ldw	r2,-20(fp)
   264ac:	10800428 	cmpgeui	r2,r2,16
   264b0:	1000031e 	bne	r2,zero,264c0 <hexdump+0x7c>
   264b4:	e0fffb17 	ldw	r3,-20(fp)
   264b8:	e0bfff17 	ldw	r2,-4(fp)
   264bc:	18bfed36 	bltu	r3,r2,26474 <__alt_mem_descriptor_memory+0xdefe6474>
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
   264c0:	e03ffb15 	stw	zero,-20(fp)
   264c4:	00001606 	br	26520 <hexdump+0xdc>
      {
         c = *(data + count);
   264c8:	e0fffa17 	ldw	r3,-24(fp)
   264cc:	e0bffb17 	ldw	r2,-20(fp)
   264d0:	1885883a 	add	r2,r3,r2
   264d4:	10800003 	ldbu	r2,0(r2)
   264d8:	e0bffc05 	stb	r2,-16(fp)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
   264dc:	e0bffc07 	ldb	r2,-16(fp)
   264e0:	10800810 	cmplti	r2,r2,32
   264e4:	1000051e 	bne	r2,zero,264fc <hexdump+0xb8>
   264e8:	e0bffc07 	ldb	r2,-16(fp)
   264ec:	10801fe0 	cmpeqi	r2,r2,127
   264f0:	1000021e 	bne	r2,zero,264fc <hexdump+0xb8>
   264f4:	e0bffc07 	ldb	r2,-16(fp)
   264f8:	00000106 	br	26500 <hexdump+0xbc>
   264fc:	00800b84 	movi	r2,46
   26500:	e13ffd17 	ldw	r4,-12(fp)
   26504:	01400174 	movhi	r5,5
   26508:	29795204 	addi	r5,r5,-6840
   2650c:	100d883a 	mov	r6,r2
   26510:	002694c0 	call	2694c <ns_printf>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
   26514:	e0bffb17 	ldw	r2,-20(fp)
   26518:	10800044 	addi	r2,r2,1
   2651c:	e0bffb15 	stw	r2,-20(fp)
   26520:	e0bffb17 	ldw	r2,-20(fp)
   26524:	10800428 	cmpgeui	r2,r2,16
   26528:	1000031e 	bne	r2,zero,26538 <hexdump+0xf4>
   2652c:	e0fffb17 	ldw	r3,-20(fp)
   26530:	e0bfff17 	ldw	r2,-4(fp)
   26534:	18bfe436 	bltu	r3,r2,264c8 <__alt_mem_descriptor_memory+0xdefe64c8>
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
   26538:	e13ffd17 	ldw	r4,-12(fp)
   2653c:	01400174 	movhi	r5,5
   26540:	29795304 	addi	r5,r5,-6836
   26544:	002694c0 	call	2694c <ns_printf>
      len -= count;
   26548:	e0ffff17 	ldw	r3,-4(fp)
   2654c:	e0bffb17 	ldw	r2,-20(fp)
   26550:	1885c83a 	sub	r2,r3,r2
   26554:	e0bfff15 	stw	r2,-4(fp)
      data += count;
   26558:	e0fffa17 	ldw	r3,-24(fp)
   2655c:	e0bffb17 	ldw	r2,-20(fp)
   26560:	1885883a 	add	r2,r3,r2
   26564:	e0bffa15 	stw	r2,-24(fp)
{
   u_char * data  =  (u_char *)buffer;
   unsigned int count;
   char  c;

   while (len)
   26568:	e0bfff17 	ldw	r2,-4(fp)
   2656c:	103fbf1e 	bne	r2,zero,2646c <__alt_mem_descriptor_memory+0xdefe646c>
      }
      ns_printf(pio,"\n");
      len -= count;
      data += count;
   }
}
   26570:	e037883a 	mov	sp,fp
   26574:	dfc00117 	ldw	ra,4(sp)
   26578:	df000017 	ldw	fp,0(sp)
   2657c:	dec00204 	addi	sp,sp,8
   26580:	f800283a 	ret

00026584 <print_ipad>:

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
   26584:	defffa04 	addi	sp,sp,-24
   26588:	dfc00515 	stw	ra,20(sp)
   2658c:	df000415 	stw	fp,16(sp)
   26590:	df000404 	addi	fp,sp,16
   26594:	e13fff15 	stw	r4,-4(fp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   26598:	e0bfff17 	ldw	r2,-4(fp)
   2659c:	e0bffe15 	stw	r2,-8(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
    ip.ip.ipchar[0],
   265a0:	e0bffe03 	ldbu	r2,-8(fp)
print_ipad(unsigned long ipaddr)
{
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
   265a4:	11803fcc 	andi	r6,r2,255
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
   265a8:	e0bffe43 	ldbu	r2,-7(fp)
print_ipad(unsigned long ipaddr)
{
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
   265ac:	11c03fcc 	andi	r7,r2,255
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
   265b0:	e0bffe83 	ldbu	r2,-6(fp)
print_ipad(unsigned long ipaddr)
{
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
   265b4:	10c03fcc 	andi	r3,r2,255
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
    ip.ip.ipchar[3]);
   265b8:	e0bffec3 	ldbu	r2,-5(fp)
print_ipad(unsigned long ipaddr)
{
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
   265bc:	10803fcc 	andi	r2,r2,255
   265c0:	d8c00015 	stw	r3,0(sp)
   265c4:	d8800115 	stw	r2,4(sp)
   265c8:	010001b4 	movhi	r4,6
   265cc:	2137bc84 	addi	r4,r4,-8462
   265d0:	01400174 	movhi	r5,5
   265d4:	29795404 	addi	r5,r5,-6832
   265d8:	00084bc0 	call	84bc <sprintf>
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
    ip.ip.ipchar[3]);

   return ipreturn;
   265dc:	008001b4 	movhi	r2,6
   265e0:	10b7bc84 	addi	r2,r2,-8462
}
   265e4:	e037883a 	mov	sp,fp
   265e8:	dfc00117 	ldw	ra,4(sp)
   265ec:	df000017 	ldw	fp,0(sp)
   265f0:	dec00204 	addi	sp,sp,8
   265f4:	f800283a 	ret

000265f8 <print_uptime>:

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
   265f8:	defff804 	addi	sp,sp,-32
   265fc:	dfc00715 	stw	ra,28(sp)
   26600:	df000615 	stw	fp,24(sp)
   26604:	df000604 	addi	fp,sp,24
   26608:	e13fff15 	stw	r4,-4(fp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
   2660c:	e0bfff17 	ldw	r2,-4(fp)
   26610:	1009883a 	mov	r4,r2
   26614:	01401904 	movi	r5,100
   26618:	00152500 	call	15250 <__udivsi3>
   2661c:	e0bfff15 	stw	r2,-4(fp)
   seconds = (unsigned)(timetick%60);
   26620:	e0bfff17 	ldw	r2,-4(fp)
   26624:	1009883a 	mov	r4,r2
   26628:	01400f04 	movi	r5,60
   2662c:	00152580 	call	15258 <__umodsi3>
   26630:	e0bffc15 	stw	r2,-16(fp)
   timetick = timetick/60;    /* turn timetick into minutes */
   26634:	e0bfff17 	ldw	r2,-4(fp)
   26638:	1009883a 	mov	r4,r2
   2663c:	01400f04 	movi	r5,60
   26640:	00152500 	call	15250 <__udivsi3>
   26644:	e0bfff15 	stw	r2,-4(fp)
   minutes = (unsigned)(timetick%60);
   26648:	e0bfff17 	ldw	r2,-4(fp)
   2664c:	1009883a 	mov	r4,r2
   26650:	01400f04 	movi	r5,60
   26654:	00152580 	call	15258 <__umodsi3>
   26658:	e0bffd15 	stw	r2,-12(fp)
   timetick = timetick/60;    /* turn timetick into hours */
   2665c:	e0bfff17 	ldw	r2,-4(fp)
   26660:	1009883a 	mov	r4,r2
   26664:	01400f04 	movi	r5,60
   26668:	00152500 	call	15250 <__udivsi3>
   2666c:	e0bfff15 	stw	r2,-4(fp)
   hours = (unsigned)(timetick%24);
   26670:	e0bfff17 	ldw	r2,-4(fp)
   26674:	1009883a 	mov	r4,r2
   26678:	01400604 	movi	r5,24
   2667c:	00152580 	call	15258 <__umodsi3>
   26680:	e0bffe15 	stw	r2,-8(fp)
   timetick = timetick/24;    /* turn timetick into days */
   26684:	e0bfff17 	ldw	r2,-4(fp)
   26688:	1009883a 	mov	r4,r2
   2668c:	01400604 	movi	r5,24
   26690:	00152500 	call	15250 <__udivsi3>
   26694:	e0bfff15 	stw	r2,-4(fp)

   if (timetick)  /* Is there a whole number of days? */
   26698:	e0bfff17 	ldw	r2,-4(fp)
   2669c:	10000c26 	beq	r2,zero,266d0 <print_uptime+0xd8>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
   266a0:	e0bffd17 	ldw	r2,-12(fp)
   266a4:	d8800015 	stw	r2,0(sp)
   266a8:	e0bffc17 	ldw	r2,-16(fp)
   266ac:	d8800115 	stw	r2,4(sp)
   266b0:	01000174 	movhi	r4,5
   266b4:	21118904 	addi	r4,r4,17956
   266b8:	01400174 	movhi	r5,5
   266bc:	29795704 	addi	r5,r5,-6820
   266c0:	e1bfff17 	ldw	r6,-4(fp)
   266c4:	e1fffe17 	ldw	r7,-8(fp)
   266c8:	00084bc0 	call	84bc <sprintf>
   266cc:	00001306 	br	2671c <print_uptime+0x124>
    timetick, hours, minutes, seconds);
   else if (hours)
   266d0:	e0bffe17 	ldw	r2,-8(fp)
   266d4:	10000a26 	beq	r2,zero,26700 <print_uptime+0x108>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
   266d8:	e0bffc17 	ldw	r2,-16(fp)
   266dc:	d8800015 	stw	r2,0(sp)
   266e0:	01000174 	movhi	r4,5
   266e4:	21118904 	addi	r4,r4,17956
   266e8:	01400174 	movhi	r5,5
   266ec:	29795d04 	addi	r5,r5,-6796
   266f0:	e1bffe17 	ldw	r6,-8(fp)
   266f4:	e1fffd17 	ldw	r7,-12(fp)
   266f8:	00084bc0 	call	84bc <sprintf>
   266fc:	00000706 	br	2671c <print_uptime+0x124>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
   26700:	01000174 	movhi	r4,5
   26704:	21118904 	addi	r4,r4,17956
   26708:	01400174 	movhi	r5,5
   2670c:	29796204 	addi	r5,r5,-6776
   26710:	e1bffd17 	ldw	r6,-12(fp)
   26714:	e1fffc17 	ldw	r7,-16(fp)
   26718:	00084bc0 	call	84bc <sprintf>
   return tistring;
   2671c:	00800174 	movhi	r2,5
   26720:	10918904 	addi	r2,r2,17956
}
   26724:	e037883a 	mov	sp,fp
   26728:	dfc00117 	ldw	ra,4(sp)
   2672c:	df000017 	ldw	fp,0(sp)
   26730:	dec00204 	addi	sp,sp,8
   26734:	f800283a 	ret

00026738 <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
   26738:	defffd04 	addi	sp,sp,-12
   2673c:	dfc00215 	stw	ra,8(sp)
   26740:	df000115 	stw	fp,4(sp)
   26744:	df000104 	addi	fp,sp,4
   26748:	e13fff15 	stw	r4,-4(fp)
   dprintf("panic: %s\n", msg);
   2674c:	01000174 	movhi	r4,5
   26750:	21396704 	addi	r4,r4,-6756
   26754:	e17fff17 	ldw	r5,-4(fp)
   26758:	00080f80 	call	80f8 <printf>
   dtrap();                   /* try to hook debugger */
   2675c:	002b0f40 	call	2b0f4 <dtrap>
   netexit(1);                /* try to clean up */
   26760:	01000044 	movi	r4,1
   26764:	0041b480 	call	41b48 <netexit>
}
   26768:	e037883a 	mov	sp,fp
   2676c:	dfc00117 	ldw	ra,4(sp)
   26770:	df000017 	ldw	fp,0(sp)
   26774:	dec00204 	addi	sp,sp,8
   26778:	f800283a 	ret

0002677c <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
   2677c:	defffb04 	addi	sp,sp,-20
   26780:	df000415 	stw	fp,16(sp)
   26784:	df000404 	addi	fp,sp,16
   26788:	e13ffe15 	stw	r4,-8(fp)
   2678c:	2805883a 	mov	r2,r5
   26790:	e0bfff05 	stb	r2,-4(fp)
   int   i;
   char *   out   =  eth_prt_buf;
   26794:	008001b4 	movhi	r2,6
   26798:	10b7b804 	addi	r2,r2,-8480
   2679c:	e0bffd15 	stw	r2,-12(fp)

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
   267a0:	e03ffc15 	stw	zero,-16(fp)
   267a4:	00003f06 	br	268a4 <print_eth+0x128>
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
   267a8:	e0bffe17 	ldw	r2,-8(fp)
   267ac:	10800003 	ldbu	r2,0(r2)
   267b0:	10803fcc 	andi	r2,r2,255
   267b4:	1004d13a 	srli	r2,r2,4
   267b8:	10800c04 	addi	r2,r2,48
   267bc:	1007883a 	mov	r3,r2
   267c0:	e0bffd17 	ldw	r2,-12(fp)
   267c4:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
   267c8:	e0bffd17 	ldw	r2,-12(fp)
   267cc:	10800003 	ldbu	r2,0(r2)
   267d0:	10803fcc 	andi	r2,r2,255
   267d4:	1080201c 	xori	r2,r2,128
   267d8:	10bfe004 	addi	r2,r2,-128
   267dc:	10800e90 	cmplti	r2,r2,58
   267e0:	1000061e 	bne	r2,zero,267fc <print_eth+0x80>
         (*out) += 7;
   267e4:	e0bffd17 	ldw	r2,-12(fp)
   267e8:	10800003 	ldbu	r2,0(r2)
   267ec:	108001c4 	addi	r2,r2,7
   267f0:	1007883a 	mov	r3,r2
   267f4:	e0bffd17 	ldw	r2,-12(fp)
   267f8:	10c00005 	stb	r3,0(r2)
      out++;
   267fc:	e0bffd17 	ldw	r2,-12(fp)
   26800:	10800044 	addi	r2,r2,1
   26804:	e0bffd15 	stw	r2,-12(fp)

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
   26808:	e0bffe17 	ldw	r2,-8(fp)
   2680c:	10800003 	ldbu	r2,0(r2)
   26810:	108003cc 	andi	r2,r2,15
   26814:	10800c04 	addi	r2,r2,48
   26818:	1007883a 	mov	r3,r2
   2681c:	e0bffd17 	ldw	r2,-12(fp)
   26820:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
   26824:	e0bffd17 	ldw	r2,-12(fp)
   26828:	10800003 	ldbu	r2,0(r2)
   2682c:	10803fcc 	andi	r2,r2,255
   26830:	1080201c 	xori	r2,r2,128
   26834:	10bfe004 	addi	r2,r2,-128
   26838:	10800e90 	cmplti	r2,r2,58
   2683c:	1000061e 	bne	r2,zero,26858 <print_eth+0xdc>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
   26840:	e0bffd17 	ldw	r2,-12(fp)
   26844:	10800003 	ldbu	r2,0(r2)
   26848:	108001c4 	addi	r2,r2,7
   2684c:	1007883a 	mov	r3,r2
   26850:	e0bffd17 	ldw	r2,-12(fp)
   26854:	10c00005 	stb	r3,0(r2)
      out++;
   26858:	e0bffd17 	ldw	r2,-12(fp)
   2685c:	10800044 	addi	r2,r2,1
   26860:	e0bffd15 	stw	r2,-12(fp)

      /* optional spacer character */
      if (spacer && i < 5)
   26864:	e0bfff07 	ldb	r2,-4(fp)
   26868:	10000826 	beq	r2,zero,2688c <print_eth+0x110>
   2686c:	e0bffc17 	ldw	r2,-16(fp)
   26870:	10800148 	cmpgei	r2,r2,5
   26874:	1000051e 	bne	r2,zero,2688c <print_eth+0x110>
         *out++ = spacer;
   26878:	e0bffd17 	ldw	r2,-12(fp)
   2687c:	10c00044 	addi	r3,r2,1
   26880:	e0fffd15 	stw	r3,-12(fp)
   26884:	e0ffff03 	ldbu	r3,-4(fp)
   26888:	10c00005 	stb	r3,0(r2)
      addr++;
   2688c:	e0bffe17 	ldw	r2,-8(fp)
   26890:	10800044 	addi	r2,r2,1
   26894:	e0bffe15 	stw	r2,-8(fp)
{
   int   i;
   char *   out   =  eth_prt_buf;

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
   26898:	e0bffc17 	ldw	r2,-16(fp)
   2689c:	10800044 	addi	r2,r2,1
   268a0:	e0bffc15 	stw	r2,-16(fp)
   268a4:	e0bffc17 	ldw	r2,-16(fp)
   268a8:	10800190 	cmplti	r2,r2,6
   268ac:	103fbe1e 	bne	r2,zero,267a8 <__alt_mem_descriptor_memory+0xdefe67a8>
      /* optional spacer character */
      if (spacer && i < 5)
         *out++ = spacer;
      addr++;
   }
   *out = 0;
   268b0:	e0bffd17 	ldw	r2,-12(fp)
   268b4:	10000005 	stb	zero,0(r2)
   return eth_prt_buf;
   268b8:	008001b4 	movhi	r2,6
   268bc:	10b7b804 	addi	r2,r2,-8480
}
   268c0:	e037883a 	mov	sp,fp
   268c4:	df000017 	ldw	fp,0(sp)
   268c8:	dec00104 	addi	sp,sp,4
   268cc:	f800283a 	ret

000268d0 <uslash>:
 * RETURNS:  pointer to formatted text
 */

char *   
uslash(char * path)
{
   268d0:	defffd04 	addi	sp,sp,-12
   268d4:	df000215 	stw	fp,8(sp)
   268d8:	df000204 	addi	fp,sp,8
   268dc:	e13fff15 	stw	r4,-4(fp)
   char *   cp;

   for (cp = path; *cp; cp++)
   268e0:	e0bfff17 	ldw	r2,-4(fp)
   268e4:	e0bffe15 	stw	r2,-8(fp)
   268e8:	00000d06 	br	26920 <uslash+0x50>
      if (*cp == '\\')
   268ec:	e0bffe17 	ldw	r2,-8(fp)
   268f0:	10800003 	ldbu	r2,0(r2)
   268f4:	10803fcc 	andi	r2,r2,255
   268f8:	1080201c 	xori	r2,r2,128
   268fc:	10bfe004 	addi	r2,r2,-128
   26900:	10801718 	cmpnei	r2,r2,92
   26904:	1000031e 	bne	r2,zero,26914 <uslash+0x44>
      *cp = '/';
   26908:	e0bffe17 	ldw	r2,-8(fp)
   2690c:	00c00bc4 	movi	r3,47
   26910:	10c00005 	stb	r3,0(r2)
char *   
uslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
   26914:	e0bffe17 	ldw	r2,-8(fp)
   26918:	10800044 	addi	r2,r2,1
   2691c:	e0bffe15 	stw	r2,-8(fp)
   26920:	e0bffe17 	ldw	r2,-8(fp)
   26924:	10800003 	ldbu	r2,0(r2)
   26928:	10803fcc 	andi	r2,r2,255
   2692c:	1080201c 	xori	r2,r2,128
   26930:	10bfe004 	addi	r2,r2,-128
   26934:	103fed1e 	bne	r2,zero,268ec <__alt_mem_descriptor_memory+0xdefe68ec>
      if (*cp == '\\')
      *cp = '/';
   return path;
   26938:	e0bfff17 	ldw	r2,-4(fp)
}
   2693c:	e037883a 	mov	sp,fp
   26940:	df000017 	ldw	fp,0(sp)
   26944:	dec00104 	addi	sp,sp,4
   26948:	f800283a 	ret

0002694c <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
   2694c:	defff304 	addi	sp,sp,-52
   26950:	dfc00a15 	stw	ra,40(sp)
   26954:	df000915 	stw	fp,36(sp)
   26958:	dc400815 	stw	r17,32(sp)
   2695c:	dc000715 	stw	r16,28(sp)
   26960:	df000904 	addi	fp,sp,36
   26964:	e13ffc15 	stw	r4,-16(fp)
   26968:	e1800215 	stw	r6,8(fp)
   2696c:	e1c00315 	stw	r7,12(fp)
   26970:	e17ffd15 	stw	r5,-12(fp)
   char *   outbuf=NULL;
   26974:	e03ff815 	stw	zero,-32(fp)
   int   ret_value   ;
   int   buf_size =  MAXIOSIZE   ;
   26978:	00802704 	movi	r2,156
   2697c:	e0bff715 	stw	r2,-36(fp)
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
   26980:	e0bffc17 	ldw	r2,-16(fp)
   26984:	e0bff915 	stw	r2,-28(fp)
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
   26988:	e0bff917 	ldw	r2,-28(fp)
   2698c:	1000091e 	bne	r2,zero,269b4 <ns_printf+0x68>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
   26990:	e0800204 	addi	r2,fp,8
   26994:	e0bffb15 	stw	r2,-20(fp)
      ret_value = vprintf(format,argList);
   26998:	e0bffb17 	ldw	r2,-20(fp)
   2699c:	e13ffd17 	ldw	r4,-12(fp)
   269a0:	100b883a 	mov	r5,r2
   269a4:	0049d480 	call	49d48 <vprintf>
   269a8:	e0bffa15 	stw	r2,-24(fp)
      va_end(argList);
      return ret_value;
   269ac:	e0bffa17 	ldw	r2,-24(fp)
   269b0:	00003b06 	br	26aa0 <ns_printf+0x154>
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
   269b4:	e0bff917 	ldw	r2,-28(fp)
   269b8:	10800117 	ldw	r2,4(r2)
   269bc:	1000021e 	bne	r2,zero,269c8 <ns_printf+0x7c>
   {
      /* Programming mistake. Output function not set. */
      return -1;
   269c0:	00bfffc4 	movi	r2,-1
   269c4:	00003606 	br	26aa0 <ns_printf+0x154>

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
   269c8:	e13ffd17 	ldw	r4,-12(fp)
   269cc:	0008d080 	call	8d08 <strlen>
   269d0:	e0bffa15 	stw	r2,-24(fp)
   if (ret_value >= MAXIOSIZE)
   269d4:	e0bffa17 	ldw	r2,-24(fp)
   269d8:	10802710 	cmplti	r2,r2,156
   269dc:	1000041e 	bne	r2,zero,269f0 <ns_printf+0xa4>
   {
      buf_size += ret_value ;
   269e0:	e0fff717 	ldw	r3,-36(fp)
   269e4:	e0bffa17 	ldw	r2,-24(fp)
   269e8:	1885883a 	add	r2,r3,r2
   269ec:	e0bff715 	stw	r2,-36(fp)
   }

   outbuf=(char *)npalloc(buf_size); 
   269f0:	e0bff717 	ldw	r2,-36(fp)
   269f4:	1009883a 	mov	r4,r2
   269f8:	002bce00 	call	2bce0 <npalloc>
   269fc:	e0bff815 	stw	r2,-32(fp)

   if (outbuf == NULL)
   26a00:	e0bff817 	ldw	r2,-32(fp)
   26a04:	1000021e 	bne	r2,zero,26a10 <ns_printf+0xc4>
   {
      return -2;
   26a08:	00bfff84 	movi	r2,-2
   26a0c:	00002406 	br	26aa0 <ns_printf+0x154>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
   26a10:	e0800204 	addi	r2,fp,8
   26a14:	e0bffb15 	stw	r2,-20(fp)
   ret_value = vsprintf(outbuf,format,argList);
   26a18:	e0bffb17 	ldw	r2,-20(fp)
   26a1c:	e13ff817 	ldw	r4,-32(fp)
   26a20:	e17ffd17 	ldw	r5,-12(fp)
   26a24:	100d883a 	mov	r6,r2
   26a28:	0049dcc0 	call	49dcc <vsprintf>
   26a2c:	e0bffa15 	stw	r2,-24(fp)
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
   26a30:	e13ff817 	ldw	r4,-32(fp)
   26a34:	0008d080 	call	8d08 <strlen>
   26a38:	1007883a 	mov	r3,r2
   26a3c:	e0bff717 	ldw	r2,-36(fp)
   26a40:	10c0080e 	bge	r2,r3,26a64 <ns_printf+0x118>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
   26a44:	01000174 	movhi	r4,5
   26a48:	21396a04 	addi	r4,r4,-6744
   26a4c:	00267380 	call	26738 <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
   26a50:	e0bff717 	ldw	r2,-36(fp)
   26a54:	10bfffc4 	addi	r2,r2,-1
   26a58:	e0fff817 	ldw	r3,-32(fp)
   26a5c:	1885883a 	add	r2,r3,r2
   26a60:	10000005 	stb	zero,0(r2)
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
   26a64:	e0bff917 	ldw	r2,-28(fp)
   26a68:	14000117 	ldw	r16,4(r2)
   26a6c:	e0bff917 	ldw	r2,-28(fp)
   26a70:	14400217 	ldw	r17,8(r2)
   26a74:	e13ff817 	ldw	r4,-32(fp)
   26a78:	0008d080 	call	8d08 <strlen>
   26a7c:	8809883a 	mov	r4,r17
   26a80:	e17ff817 	ldw	r5,-32(fp)
   26a84:	100d883a 	mov	r6,r2
   26a88:	803ee83a 	callr	r16
   26a8c:	e0bffa15 	stw	r2,-24(fp)

   /* Free memory for the output string */
   npfree(outbuf); 
   26a90:	e13ff817 	ldw	r4,-32(fp)
   26a94:	002bd140 	call	2bd14 <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
   26a98:	00273380 	call	27338 <tk_yield>

   return ret_value ;
   26a9c:	e0bffa17 	ldw	r2,-24(fp)
}
   26aa0:	e6fffe04 	addi	sp,fp,-8
   26aa4:	dfc00317 	ldw	ra,12(sp)
   26aa8:	df000217 	ldw	fp,8(sp)
   26aac:	dc400117 	ldw	r17,4(sp)
   26ab0:	dc000017 	ldw	r16,0(sp)
   26ab4:	dec00604 	addi	sp,sp,24
   26ab8:	f800283a 	ret

00026abc <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
   26abc:	defffb04 	addi	sp,sp,-20
   26ac0:	dfc00415 	stw	ra,16(sp)
   26ac4:	df000315 	stw	fp,12(sp)
   26ac8:	df000304 	addi	fp,sp,12
   26acc:	e13ffd15 	stw	r4,-12(fp)
   26ad0:	e17ffe15 	stw	r5,-8(fp)
   26ad4:	e1bfff15 	stw	r6,-4(fp)
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
   26ad8:	01000174 	movhi	r4,5
   26adc:	21397104 	addi	r4,r4,-6716
   26ae0:	e17ffe17 	ldw	r5,-8(fp)
   26ae4:	00080f80 	call	80f8 <printf>
   USE_ARG(s);
   return len;
   26ae8:	e0bfff17 	ldw	r2,-4(fp)
}
   26aec:	e037883a 	mov	sp,fp
   26af0:	dfc00117 	ldw	ra,4(sp)
   26af4:	df000017 	ldw	fp,0(sp)
   26af8:	dec00204 	addi	sp,sp,8
   26afc:	f800283a 	ret

00026b00 <con_page>:
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
   26b00:	defffa04 	addi	sp,sp,-24
   26b04:	dfc00515 	stw	ra,20(sp)
   26b08:	df000415 	stw	fp,16(sp)
   26b0c:	df000404 	addi	fp,sp,16
   26b10:	e13ffe15 	stw	r4,-8(fp)
   26b14:	e17fff15 	stw	r5,-4(fp)
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
   26b18:	e0bffe17 	ldw	r2,-8(fp)
   26b1c:	e0bffc15 	stw	r2,-16(fp)

   if (lines % 20 == 0)   /* Time to get user input */
   26b20:	e0bfff17 	ldw	r2,-4(fp)
   26b24:	1009883a 	mov	r4,r2
   26b28:	01400504 	movi	r5,20
   26b2c:	00151f40 	call	151f4 <__modsi3>
   26b30:	1000231e 	bne	r2,zero,26bc0 <con_page+0xc0>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
   26b34:	e0bffc17 	ldw	r2,-16(fp)
   26b38:	10002126 	beq	r2,zero,26bc0 <con_page+0xc0>
   26b3c:	e0bffc17 	ldw	r2,-16(fp)
   26b40:	10800317 	ldw	r2,12(r2)
   26b44:	10001e26 	beq	r2,zero,26bc0 <con_page+0xc0>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
   26b48:	e13ffc17 	ldw	r4,-16(fp)
   26b4c:	01400174 	movhi	r5,5
   26b50:	29797204 	addi	r5,r5,-6712
   26b54:	002694c0 	call	2694c <ns_printf>

         do 
         {
            ch = (pio->getch)(pio->id);
   26b58:	e0bffc17 	ldw	r2,-16(fp)
   26b5c:	10800317 	ldw	r2,12(r2)
   26b60:	e0fffc17 	ldw	r3,-16(fp)
   26b64:	18c00217 	ldw	r3,8(r3)
   26b68:	1809883a 	mov	r4,r3
   26b6c:	103ee83a 	callr	r2
   26b70:	e0bffd15 	stw	r2,-12(fp)
            if (ch == 0)
   26b74:	e0bffd17 	ldw	r2,-12(fp)
   26b78:	1000011e 	bne	r2,zero,26b80 <con_page+0x80>
               tk_yield();    /* Give timeslice to other processes */
   26b7c:	00273380 	call	27338 <tk_yield>
         } while (ch == 0) ;
   26b80:	e0bffd17 	ldw	r2,-12(fp)
   26b84:	103ff426 	beq	r2,zero,26b58 <__alt_mem_descriptor_memory+0xdefe6b58>

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
   26b88:	e0bffd17 	ldw	r2,-12(fp)
   26b8c:	10bfffd8 	cmpnei	r2,r2,-1
   26b90:	1000021e 	bne	r2,zero,26b9c <con_page+0x9c>
            return 1 ;
   26b94:	00800044 	movi	r2,1
   26b98:	00000a06 	br	26bc4 <con_page+0xc4>

         ns_printf(pio,"\n");
   26b9c:	e13ffc17 	ldw	r4,-16(fp)
   26ba0:	01400174 	movhi	r5,5
   26ba4:	29795304 	addi	r5,r5,-6836
   26ba8:	002694c0 	call	2694c <ns_printf>
         if (ch == 27)   /* ESC key pressed */
   26bac:	e0bffd17 	ldw	r2,-12(fp)
   26bb0:	108006d8 	cmpnei	r2,r2,27
   26bb4:	1000021e 	bne	r2,zero,26bc0 <con_page+0xc0>
            return 1 ;
   26bb8:	00800044 	movi	r2,1
   26bbc:	00000106 	br	26bc4 <con_page+0xc4>
      }
   }
   return  0;
   26bc0:	0005883a 	mov	r2,zero
}
   26bc4:	e037883a 	mov	sp,fp
   26bc8:	dfc00117 	ldw	ra,4(sp)
   26bcc:	df000017 	ldw	fp,0(sp)
   26bd0:	dec00204 	addi	sp,sp,8
   26bd4:	f800283a 	ret

00026bd8 <parse_args>:

char **parse_args(char *buf, int argc, int *pargc_index)
{
   26bd8:	defff704 	addi	sp,sp,-36
   26bdc:	dfc00815 	stw	ra,32(sp)
   26be0:	df000715 	stw	fp,28(sp)
   26be4:	df000704 	addi	fp,sp,28
   26be8:	e13ffd15 	stw	r4,-12(fp)
   26bec:	e17ffe15 	stw	r5,-8(fp)
   26bf0:	e1bfff15 	stw	r6,-4(fp)
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
   26bf4:	e0bffd17 	ldw	r2,-12(fp)
   26bf8:	e0bffa15 	stw	r2,-24(fp)
   char **pargv = NULL;
   26bfc:	e03ffb15 	stw	zero,-20(fp)
   *pargc_index = 0;
   26c00:	e0bfff17 	ldw	r2,-4(fp)
   26c04:	10000015 	stw	zero,0(r2)
   if (buf == NULL)
   26c08:	e0bffd17 	ldw	r2,-12(fp)
   26c0c:	1000021e 	bne	r2,zero,26c18 <parse_args+0x40>
   {
      return (NULL);
   26c10:	0005883a 	mov	r2,zero
   26c14:	00006d06 	br	26dcc <parse_args+0x1f4>
   }
   len = strlen(buf);
   26c18:	e13ffd17 	ldw	r4,-12(fp)
   26c1c:	0008d080 	call	8d08 <strlen>
   26c20:	e0bffc15 	stw	r2,-16(fp)
   if (len <= 0)
   26c24:	e0bffc17 	ldw	r2,-16(fp)
   26c28:	00800216 	blt	zero,r2,26c34 <parse_args+0x5c>
   {
      return (NULL);
   26c2c:	0005883a 	mov	r2,zero
   26c30:	00006606 	br	26dcc <parse_args+0x1f4>
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
   26c34:	e0bffe17 	ldw	r2,-8(fp)
   26c38:	1085883a 	add	r2,r2,r2
   26c3c:	1085883a 	add	r2,r2,r2
   26c40:	1009883a 	mov	r4,r2
   26c44:	002bce00 	call	2bce0 <npalloc>
   26c48:	e0bffb15 	stw	r2,-20(fp)
   if (pargv == NULL)
   26c4c:	e0bffb17 	ldw	r2,-20(fp)
   26c50:	1000021e 	bne	r2,zero,26c5c <parse_args+0x84>
   {
      return (NULL);
   26c54:	0005883a 	mov	r2,zero
   26c58:	00005c06 	br	26dcc <parse_args+0x1f4>
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   26c5c:	00000306 	br	26c6c <parse_args+0x94>
   {
      bp++;
   26c60:	e0bffa17 	ldw	r2,-24(fp)
   26c64:	10800044 	addi	r2,r2,1
   26c68:	e0bffa15 	stw	r2,-24(fp)
   if (pargv == NULL)
   {
      return (NULL);
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   26c6c:	e0bffa17 	ldw	r2,-24(fp)
   26c70:	10800003 	ldbu	r2,0(r2)
   26c74:	10803fcc 	andi	r2,r2,255
   26c78:	1080201c 	xori	r2,r2,128
   26c7c:	10bfe004 	addi	r2,r2,-128
   26c80:	10800820 	cmpeqi	r2,r2,32
   26c84:	103ff61e 	bne	r2,zero,26c60 <__alt_mem_descriptor_memory+0xdefe6c60>
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   26c88:	00003006 	br	26d4c <parse_args+0x174>
   {
      pargv[(*pargc_index)] = bp;
   26c8c:	e0bfff17 	ldw	r2,-4(fp)
   26c90:	10800017 	ldw	r2,0(r2)
   26c94:	1085883a 	add	r2,r2,r2
   26c98:	1085883a 	add	r2,r2,r2
   26c9c:	1007883a 	mov	r3,r2
   26ca0:	e0bffb17 	ldw	r2,-20(fp)
   26ca4:	10c5883a 	add	r2,r2,r3
   26ca8:	e0fffa17 	ldw	r3,-24(fp)
   26cac:	10c00015 	stw	r3,0(r2)
      (*pargc_index)++;
   26cb0:	e0bfff17 	ldw	r2,-4(fp)
   26cb4:	10800017 	ldw	r2,0(r2)
   26cb8:	10c00044 	addi	r3,r2,1
   26cbc:	e0bfff17 	ldw	r2,-4(fp)
   26cc0:	10c00015 	stw	r3,0(r2)
      while (*bp != ' ' && *bp != '\0')
   26cc4:	00000306 	br	26cd4 <parse_args+0xfc>
      {
         bp++; 
   26cc8:	e0bffa17 	ldw	r2,-24(fp)
   26ccc:	10800044 	addi	r2,r2,1
   26cd0:	e0bffa15 	stw	r2,-24(fp)
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   {
      pargv[(*pargc_index)] = bp;
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
   26cd4:	e0bffa17 	ldw	r2,-24(fp)
   26cd8:	10800003 	ldbu	r2,0(r2)
   26cdc:	10803fcc 	andi	r2,r2,255
   26ce0:	1080201c 	xori	r2,r2,128
   26ce4:	10bfe004 	addi	r2,r2,-128
   26ce8:	10800820 	cmpeqi	r2,r2,32
   26cec:	1000061e 	bne	r2,zero,26d08 <parse_args+0x130>
   26cf0:	e0bffa17 	ldw	r2,-24(fp)
   26cf4:	10800003 	ldbu	r2,0(r2)
   26cf8:	10803fcc 	andi	r2,r2,255
   26cfc:	1080201c 	xori	r2,r2,128
   26d00:	10bfe004 	addi	r2,r2,-128
   26d04:	103ff01e 	bne	r2,zero,26cc8 <__alt_mem_descriptor_memory+0xdefe6cc8>
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
   26d08:	00000306 	br	26d18 <parse_args+0x140>
      {
         bp++; 
   26d0c:	e0bffa17 	ldw	r2,-24(fp)
   26d10:	10800044 	addi	r2,r2,1
   26d14:	e0bffa15 	stw	r2,-24(fp)
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
   26d18:	e0bffa17 	ldw	r2,-24(fp)
   26d1c:	10800003 	ldbu	r2,0(r2)
   26d20:	10803fcc 	andi	r2,r2,255
   26d24:	1080201c 	xori	r2,r2,128
   26d28:	10bfe004 	addi	r2,r2,-128
   26d2c:	10800818 	cmpnei	r2,r2,32
   26d30:	1000061e 	bne	r2,zero,26d4c <parse_args+0x174>
   26d34:	e0bffa17 	ldw	r2,-24(fp)
   26d38:	10800003 	ldbu	r2,0(r2)
   26d3c:	10803fcc 	andi	r2,r2,255
   26d40:	1080201c 	xori	r2,r2,128
   26d44:	10bfe004 	addi	r2,r2,-128
   26d48:	103ff01e 	bne	r2,zero,26d0c <__alt_mem_descriptor_memory+0xdefe6d0c>
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   26d4c:	e0bffa17 	ldw	r2,-24(fp)
   26d50:	10800003 	ldbu	r2,0(r2)
   26d54:	10803fcc 	andi	r2,r2,255
   26d58:	1080201c 	xori	r2,r2,128
   26d5c:	10bfe004 	addi	r2,r2,-128
   26d60:	10000426 	beq	r2,zero,26d74 <parse_args+0x19c>
   26d64:	e0bfff17 	ldw	r2,-4(fp)
   26d68:	10c00017 	ldw	r3,0(r2)
   26d6c:	e0bffe17 	ldw	r2,-8(fp)
   26d70:	18bfc616 	blt	r3,r2,26c8c <__alt_mem_descriptor_memory+0xdefe6c8c>
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
   26d74:	e03ff915 	stw	zero,-28(fp)
   26d78:	00001006 	br	26dbc <parse_args+0x1e4>
   {
      if (buf[i] == ' ')
   26d7c:	e0bff917 	ldw	r2,-28(fp)
   26d80:	e0fffd17 	ldw	r3,-12(fp)
   26d84:	1885883a 	add	r2,r3,r2
   26d88:	10800003 	ldbu	r2,0(r2)
   26d8c:	10803fcc 	andi	r2,r2,255
   26d90:	1080201c 	xori	r2,r2,128
   26d94:	10bfe004 	addi	r2,r2,-128
   26d98:	10800818 	cmpnei	r2,r2,32
   26d9c:	1000041e 	bne	r2,zero,26db0 <parse_args+0x1d8>
         buf[i] = '\0';
   26da0:	e0bff917 	ldw	r2,-28(fp)
   26da4:	e0fffd17 	ldw	r3,-12(fp)
   26da8:	1885883a 	add	r2,r3,r2
   26dac:	10000005 	stb	zero,0(r2)
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
   26db0:	e0bff917 	ldw	r2,-28(fp)
   26db4:	10800044 	addi	r2,r2,1
   26db8:	e0bff915 	stw	r2,-28(fp)
   26dbc:	e0fff917 	ldw	r3,-28(fp)
   26dc0:	e0bffc17 	ldw	r2,-16(fp)
   26dc4:	18bfed16 	blt	r3,r2,26d7c <__alt_mem_descriptor_memory+0xdefe6d7c>
   {
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
   26dc8:	e0bffb17 	ldw	r2,-20(fp)
}
   26dcc:	e037883a 	mov	sp,fp
   26dd0:	dfc00117 	ldw	ra,4(sp)
   26dd4:	df000017 	ldw	fp,0(sp)
   26dd8:	dec00204 	addi	sp,sp,8
   26ddc:	f800283a 	ret

00026de0 <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
   26de0:	defffc04 	addi	sp,sp,-16
   26de4:	dfc00315 	stw	ra,12(sp)
   26de8:	df000215 	stw	fp,8(sp)
   26dec:	df000204 	addi	fp,sp,8
   int   i;
   int   e;

   iniche_net_ready = FALSE;
   26df0:	d0287815 	stw	zero,-24096(gp)

   e = prep_modules();
   26df4:	003b18c0 	call	3b18c <prep_modules>
   26df8:	e0bfff15 	stw	r2,-4(fp)

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
   26dfc:	e03ffe15 	stw	zero,-8(fp)
   26e00:	00001a06 	br	26e6c <netmain+0x8c>
   {
      e = TK_NEWTASK(&nettasks[i]);
   26e04:	e0bffe17 	ldw	r2,-8(fp)
   26e08:	10c00624 	muli	r3,r2,24
   26e0c:	00800174 	movhi	r2,5
   26e10:	10863804 	addi	r2,r2,6368
   26e14:	1885883a 	add	r2,r3,r2
   26e18:	1009883a 	mov	r4,r2
   26e1c:	002b4d00 	call	2b4d0 <TK_NEWTASK>
   26e20:	e0bfff15 	stw	r2,-4(fp)
      if (e != 0)
   26e24:	e0bfff17 	ldw	r2,-4(fp)
   26e28:	10000d26 	beq	r2,zero,26e60 <netmain+0x80>
      {
         dprintf("task create error\n");
   26e2c:	01000174 	movhi	r4,5
   26e30:	21398404 	addi	r4,r4,-6640
   26e34:	00083740 	call	8374 <puts>
         panic((char *)&nettasks[i].name);
   26e38:	e0bffe17 	ldw	r2,-8(fp)
   26e3c:	10800624 	muli	r2,r2,24
   26e40:	10c00104 	addi	r3,r2,4
   26e44:	00800174 	movhi	r2,5
   26e48:	10863804 	addi	r2,r2,6368
   26e4c:	1885883a 	add	r2,r3,r2
   26e50:	1009883a 	mov	r4,r2
   26e54:	00267380 	call	26738 <panic>
         return -1;  /* compiler warnings */
   26e58:	00bfffc4 	movi	r2,-1
   26e5c:	00001306 	br	26eac <netmain+0xcc>
   iniche_net_ready = FALSE;

   e = prep_modules();

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
   26e60:	e0bffe17 	ldw	r2,-8(fp)
   26e64:	10800044 	addi	r2,r2,1
   26e68:	e0bffe15 	stw	r2,-8(fp)
   26e6c:	d0a02f17 	ldw	r2,-32580(gp)
   26e70:	e0fffe17 	ldw	r3,-8(fp)
   26e74:	18bfe316 	blt	r3,r2,26e04 <__alt_mem_descriptor_memory+0xdefe6e04>
         panic((char *)&nettasks[i].name);
         return -1;  /* compiler warnings */
      }
   }
   
   e = create_apptasks();
   26e78:	003b6380 	call	3b638 <create_apptasks>
   26e7c:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0) 
   26e80:	e0bfff17 	ldw	r2,-4(fp)
   26e84:	10000826 	beq	r2,zero,26ea8 <netmain+0xc8>
   {
      dprintf("task create error\n");
   26e88:	01000174 	movhi	r4,5
   26e8c:	21398404 	addi	r4,r4,-6640
   26e90:	00083740 	call	8374 <puts>
      panic("netmain");
   26e94:	01000174 	movhi	r4,5
   26e98:	21398904 	addi	r4,r4,-6620
   26e9c:	00267380 	call	26738 <panic>
      return -1;  /* compiler warnings */
   26ea0:	00bfffc4 	movi	r2,-1
   26ea4:	00000106 	br	26eac <netmain+0xcc>
#ifdef MAIN_TASK_IS_NET
   tk_netmain(TK_NETMAINPARM);
   panic("net task return");
   return -1;
#else
   return 0;
   26ea8:	0005883a 	mov	r2,zero
#endif
#endif   /* NO_INET_STACK */
}
   26eac:	e037883a 	mov	sp,fp
   26eb0:	dfc00117 	ldw	ra,4(sp)
   26eb4:	df000017 	ldw	fp,0(sp)
   26eb8:	dec00204 	addi	sp,sp,8
   26ebc:	f800283a 	ret

00026ec0 <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
   26ec0:	defffc04 	addi	sp,sp,-16
   26ec4:	dfc00315 	stw	ra,12(sp)
   26ec8:	df000215 	stw	fp,8(sp)
   26ecc:	df000204 	addi	fp,sp,8
   26ed0:	e13fff15 	stw	r4,-4(fp)
   netmain_init(); /* initialize all modules */
   26ed4:	003ade80 	call	3ade8 <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
   26ed8:	00800044 	movi	r2,1
   26edc:	d0a87815 	stw	r2,-24096(gp)

   for (;;)
   {
      TK_NETRX_BLOCK();
   26ee0:	00800174 	movhi	r2,5
   26ee4:	108fc104 	addi	r2,r2,16132
   26ee8:	10800017 	ldw	r2,0(r2)
   26eec:	1009883a 	mov	r4,r2
   26ef0:	01401904 	movi	r5,100
   26ef4:	e1bffe04 	addi	r6,fp,-8
   26ef8:	001d9440 	call	1d944 <OSSemPend>
   26efc:	e0bffe03 	ldbu	r2,-8(fp)
   26f00:	10803fcc 	andi	r2,r2,255
   26f04:	10000526 	beq	r2,zero,26f1c <tk_netmain+0x5c>
   26f08:	e0bffe03 	ldbu	r2,-8(fp)
   26f0c:	10803fcc 	andi	r2,r2,255
   26f10:	108002a0 	cmpeqi	r2,r2,10
   26f14:	1000011e 	bne	r2,zero,26f1c <tk_netmain+0x5c>
   26f18:	002b0f40 	call	2b0f4 <dtrap>
      netmain_wakes++;  /* count wakeups */
   26f1c:	d0a87617 	ldw	r2,-24104(gp)
   26f20:	10800044 	addi	r2,r2,1
   26f24:	d0a87615 	stw	r2,-24104(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
   26f28:	008001b4 	movhi	r2,6
   26f2c:	10b6d604 	addi	r2,r2,-9384
   26f30:	10800217 	ldw	r2,8(r2)
   26f34:	10000126 	beq	r2,zero,26f3c <tk_netmain+0x7c>
         pktdemux();
   26f38:	0023e3c0 	call	23e3c <pktdemux>
       * vital to a clean shutdown 
       */
#ifdef USE_LCD
      update_display();
#endif
   }
   26f3c:	003fe806 	br	26ee0 <__alt_mem_descriptor_memory+0xdefe6ee0>

00026f40 <tk_nettick>:
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   26f40:	defffd04 	addi	sp,sp,-12
   26f44:	dfc00215 	stw	ra,8(sp)
   26f48:	df000115 	stw	fp,4(sp)
   26f4c:	df000104 	addi	fp,sp,4
   26f50:	e13fff15 	stw	r4,-4(fp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
   26f54:	00000306 	br	26f64 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
   26f58:	00298580 	call	29858 <dhc_second>
#endif
      TK_SLEEP(1);
   26f5c:	01000084 	movi	r4,2
   26f60:	001f9280 	call	1f928 <OSTimeDly>

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
   26f64:	d0a87817 	ldw	r2,-24096(gp)
   26f68:	103ffb26 	beq	r2,zero,26f58 <__alt_mem_descriptor_memory+0xdefe6f58>
      TK_SLEEP(1);
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
   26f6c:	01000084 	movi	r4,2
   26f70:	001f9280 	call	1f928 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
   26f74:	d0a87717 	ldw	r2,-24100(gp)
   26f78:	10800044 	addi	r2,r2,1
   26f7c:	d0a87715 	stw	r2,-24100(gp)
      inet_timer();  /* let various timeouts occur */
   26f80:	003b1e00 	call	3b1e0 <inet_timer>
      /* do not kill timers on net_system_exit. They may be
       * vital to a clean shutdown 
       */
   }
   26f84:	003ff906 	br	26f6c <__alt_mem_descriptor_memory+0xdefe6f6c>

00026f88 <TK_OSTimeDly>:
u_char   TK_OSTaskQuery(void);



void TK_OSTimeDly(void)
{
   26f88:	defffe04 	addi	sp,sp,-8
   26f8c:	dfc00115 	stw	ra,4(sp)
   26f90:	df000015 	stw	fp,0(sp)
   26f94:	d839883a 	mov	fp,sp
   OSTimeDly(2);
   26f98:	01000084 	movi	r4,2
   26f9c:	001f9280 	call	1f928 <OSTimeDly>
}
   26fa0:	e037883a 	mov	sp,fp
   26fa4:	dfc00117 	ldw	ra,4(sp)
   26fa8:	df000017 	ldw	fp,0(sp)
   26fac:	dec00204 	addi	sp,sp,8
   26fb0:	f800283a 	ret

00026fb4 <TK_OSTaskResume>:



void TK_OSTaskResume(u_char * Id)
{
   26fb4:	defffc04 	addi	sp,sp,-16
   26fb8:	dfc00315 	stw	ra,12(sp)
   26fbc:	df000215 	stw	fp,8(sp)
   26fc0:	df000204 	addi	fp,sp,8
   26fc4:	e13fff15 	stw	r4,-4(fp)
INT8U err;

   err = OSTaskResume(*Id);
   26fc8:	e0bfff17 	ldw	r2,-4(fp)
   26fcc:	10800003 	ldbu	r2,0(r2)
   26fd0:	10803fcc 	andi	r2,r2,255
   26fd4:	1009883a 	mov	r4,r2
   26fd8:	001f1bc0 	call	1f1bc <OSTaskResume>
   26fdc:	e0bffe05 	stb	r2,-8(fp)
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
   26fe0:	e0bffe03 	ldbu	r2,-8(fp)
   26fe4:	10000a26 	beq	r2,zero,27010 <TK_OSTaskResume+0x5c>
   26fe8:	e0bffe03 	ldbu	r2,-8(fp)
   26fec:	10801120 	cmpeqi	r2,r2,68
   26ff0:	1000071e 	bne	r2,zero,27010 <TK_OSTaskResume+0x5c>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
   26ff4:	01000174 	movhi	r4,5
   26ff8:	21398b04 	addi	r4,r4,-6612
   26ffc:	00083740 	call	8374 <puts>
      dtrap();
   27000:	002b0f40 	call	2b0f4 <dtrap>
      panic("TK_OSTaskResume");      
   27004:	01000174 	movhi	r4,5
   27008:	21399804 	addi	r4,r4,-6560
   2700c:	00267380 	call	26738 <panic>
   }
#endif
}
   27010:	e037883a 	mov	sp,fp
   27014:	dfc00117 	ldw	ra,4(sp)
   27018:	df000017 	ldw	fp,0(sp)
   2701c:	dec00204 	addi	sp,sp,8
   27020:	f800283a 	ret

00027024 <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
   27024:	defffb04 	addi	sp,sp,-20
   27028:	dfc00415 	stw	ra,16(sp)
   2702c:	df000315 	stw	fp,12(sp)
   27030:	df000304 	addi	fp,sp,12
   27034:	e13fff15 	stw	r4,-4(fp)
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
   27038:	e03ffd15 	stw	zero,-12(fp)
   2703c:	00005106 	br	27184 <tcp_sleep+0x160>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
   27040:	008001b4 	movhi	r2,6
   27044:	10b88604 	addi	r2,r2,-7656
   27048:	e0fffd17 	ldw	r3,-12(fp)
   2704c:	18c00324 	muli	r3,r3,12
   27050:	10c5883a 	add	r2,r2,r3
   27054:	10800104 	addi	r2,r2,4
   27058:	10800017 	ldw	r2,0(r2)
   2705c:	1000461e 	bne	r2,zero,27178 <tcp_sleep+0x154>
      {
         global_TCPwakeup_set[i].soc_event = event;
   27060:	008001b4 	movhi	r2,6
   27064:	10b88604 	addi	r2,r2,-7656
   27068:	e0fffd17 	ldw	r3,-12(fp)
   2706c:	18c00324 	muli	r3,r3,12
   27070:	10c5883a 	add	r2,r2,r3
   27074:	10800104 	addi	r2,r2,4
   27078:	e0ffff17 	ldw	r3,-4(fp)
   2707c:	10c00015 	stw	r3,0(r2)
         global_TCPwakeup_set[i].ctick = cticks;
   27080:	00800174 	movhi	r2,5
   27084:	108fbe04 	addi	r2,r2,16120
   27088:	10c00017 	ldw	r3,0(r2)
   2708c:	008001b4 	movhi	r2,6
   27090:	10b88604 	addi	r2,r2,-7656
   27094:	e13ffd17 	ldw	r4,-12(fp)
   27098:	21000324 	muli	r4,r4,12
   2709c:	1105883a 	add	r2,r2,r4
   270a0:	10c00015 	stw	r3,0(r2)
         if (i > global_TCPwakeup_setIndx)
   270a4:	00800174 	movhi	r2,5
   270a8:	108fbd04 	addi	r2,r2,16116
   270ac:	10c00017 	ldw	r3,0(r2)
   270b0:	e0bffd17 	ldw	r2,-12(fp)
   270b4:	1880040e 	bge	r3,r2,270c8 <tcp_sleep+0xa4>
            global_TCPwakeup_setIndx = i;
   270b8:	00800174 	movhi	r2,5
   270bc:	108fbd04 	addi	r2,r2,16116
   270c0:	e0fffd17 	ldw	r3,-12(fp)
   270c4:	10c00015 	stw	r3,0(r2)

         tcp_sleep_count++;
   270c8:	00800174 	movhi	r2,5
   270cc:	108fb904 	addi	r2,r2,16100
   270d0:	10800017 	ldw	r2,0(r2)
   270d4:	10c00044 	addi	r3,r2,1
   270d8:	00800174 	movhi	r2,5
   270dc:	108fb904 	addi	r2,r2,16100
   270e0:	10c00015 	stw	r3,0(r2)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
   270e4:	0009883a 	mov	r4,zero
   270e8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
   270ec:	008001b4 	movhi	r2,6
   270f0:	10b88604 	addi	r2,r2,-7656
   270f4:	e0fffd17 	ldw	r3,-12(fp)
   270f8:	18c00324 	muli	r3,r3,12
   270fc:	10c5883a 	add	r2,r2,r3
   27100:	10800204 	addi	r2,r2,8
   27104:	10c00017 	ldw	r3,0(r2)
   27108:	e0bffe04 	addi	r2,fp,-8
   2710c:	1809883a 	mov	r4,r3
   27110:	01401904 	movi	r5,100
   27114:	100d883a 	mov	r6,r2
   27118:	001d9440 	call	1d944 <OSSemPend>
         if (err == 10)
   2711c:	e0bffe03 	ldbu	r2,-8(fp)
   27120:	10803fcc 	andi	r2,r2,255
   27124:	10800298 	cmpnei	r2,r2,10
   27128:	1000101e 	bne	r2,zero,2716c <tcp_sleep+0x148>
         {
            ++tcp_sleep_timeout;
   2712c:	d0a87a17 	ldw	r2,-24088(gp)
   27130:	10800044 	addi	r2,r2,1
   27134:	d0a87a15 	stw	r2,-24088(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
   27138:	008001b4 	movhi	r2,6
   2713c:	10b88604 	addi	r2,r2,-7656
   27140:	e0fffd17 	ldw	r3,-12(fp)
   27144:	18c00324 	muli	r3,r3,12
   27148:	10c5883a 	add	r2,r2,r3
   2714c:	10000015 	stw	zero,0(r2)
            global_TCPwakeup_set[i].soc_event = NULL;
   27150:	008001b4 	movhi	r2,6
   27154:	10b88604 	addi	r2,r2,-7656
   27158:	e0fffd17 	ldw	r3,-12(fp)
   2715c:	18c00324 	muli	r3,r3,12
   27160:	10c5883a 	add	r2,r2,r3
   27164:	10800104 	addi	r2,r2,4
   27168:	10000015 	stw	zero,0(r2)
         }

         /* Regain the lock */
         LOCK_NET_RESOURCE(NET_RESID);
   2716c:	0009883a 	mov	r4,zero
   27170:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   27174:	00000f06 	br	271b4 <tcp_sleep+0x190>
tcp_sleep(void * event)
{
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
   27178:	e0bffd17 	ldw	r2,-12(fp)
   2717c:	10800044 	addi	r2,r2,1
   27180:	e0bffd15 	stw	r2,-12(fp)
   27184:	e0bffd17 	ldw	r2,-12(fp)
   27188:	10800510 	cmplti	r2,r2,20
   2718c:	103fac1e 	bne	r2,zero,27040 <__alt_mem_descriptor_memory+0xdefe7040>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
   27190:	00800174 	movhi	r2,5
   27194:	108fbd04 	addi	r2,r2,16116
   27198:	e0fffd17 	ldw	r3,-12(fp)
   2719c:	10c00015 	stw	r3,0(r2)

   UNLOCK_NET_RESOURCE(NET_RESID);
   271a0:	0009883a 	mov	r4,zero
   271a4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   TK_YIELD();
   271a8:	00273380 	call	27338 <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
   271ac:	0009883a 	mov	r4,zero
   271b0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
}
   271b4:	e037883a 	mov	sp,fp
   271b8:	dfc00117 	ldw	ra,4(sp)
   271bc:	df000017 	ldw	fp,0(sp)
   271c0:	dec00204 	addi	sp,sp,8
   271c4:	f800283a 	ret

000271c8 <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
   271c8:	defffc04 	addi	sp,sp,-16
   271cc:	dfc00315 	stw	ra,12(sp)
   271d0:	df000215 	stw	fp,8(sp)
   271d4:	df000204 	addi	fp,sp,8
   271d8:	e13fff15 	stw	r4,-4(fp)
   int i;

   OSSchedLock();
   271dc:	0018c400 	call	18c40 <OSSchedLock>

   for (i = 0; i < GLOBWAKE_SZ; i++)
   271e0:	e03ffe15 	stw	zero,-8(fp)
   271e4:	00003006 	br	272a8 <tcp_wakeup+0xe0>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
   271e8:	008001b4 	movhi	r2,6
   271ec:	10b88604 	addi	r2,r2,-7656
   271f0:	e0fffe17 	ldw	r3,-8(fp)
   271f4:	18c00324 	muli	r3,r3,12
   271f8:	10c5883a 	add	r2,r2,r3
   271fc:	10800017 	ldw	r2,0(r2)
   27200:	10002626 	beq	r2,zero,2729c <tcp_wakeup+0xd4>
          (global_TCPwakeup_set[i].soc_event == event))
   27204:	008001b4 	movhi	r2,6
   27208:	10b88604 	addi	r2,r2,-7656
   2720c:	e0fffe17 	ldw	r3,-8(fp)
   27210:	18c00324 	muli	r3,r3,12
   27214:	10c5883a 	add	r2,r2,r3
   27218:	10800104 	addi	r2,r2,4
   2721c:	10c00017 	ldw	r3,0(r2)

   OSSchedLock();

   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
   27220:	e0bfff17 	ldw	r2,-4(fp)
   27224:	18801d1e 	bne	r3,r2,2729c <tcp_wakeup+0xd4>
          (global_TCPwakeup_set[i].soc_event == event))
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
   27228:	008001b4 	movhi	r2,6
   2722c:	10b88604 	addi	r2,r2,-7656
   27230:	e0fffe17 	ldw	r3,-8(fp)
   27234:	18c00324 	muli	r3,r3,12
   27238:	10c5883a 	add	r2,r2,r3
   2723c:	10800204 	addi	r2,r2,8
   27240:	10800017 	ldw	r2,0(r2)
   27244:	1009883a 	mov	r4,r2
   27248:	001dd180 	call	1dd18 <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
   2724c:	008001b4 	movhi	r2,6
   27250:	10b88604 	addi	r2,r2,-7656
   27254:	e0fffe17 	ldw	r3,-8(fp)
   27258:	18c00324 	muli	r3,r3,12
   2725c:	10c5883a 	add	r2,r2,r3
   27260:	10000015 	stw	zero,0(r2)
         global_TCPwakeup_set[i].soc_event = NULL;
   27264:	008001b4 	movhi	r2,6
   27268:	10b88604 	addi	r2,r2,-7656
   2726c:	e0fffe17 	ldw	r3,-8(fp)
   27270:	18c00324 	muli	r3,r3,12
   27274:	10c5883a 	add	r2,r2,r3
   27278:	10800104 	addi	r2,r2,4
   2727c:	10000015 	stw	zero,0(r2)

         tcp_wakeup_count++;
   27280:	00800174 	movhi	r2,5
   27284:	108fba04 	addi	r2,r2,16104
   27288:	10800017 	ldw	r2,0(r2)
   2728c:	10c00044 	addi	r3,r2,1
   27290:	00800174 	movhi	r2,5
   27294:	108fba04 	addi	r2,r2,16104
   27298:	10c00015 	stw	r3,0(r2)
{
   int i;

   OSSchedLock();

   for (i = 0; i < GLOBWAKE_SZ; i++)
   2729c:	e0bffe17 	ldw	r2,-8(fp)
   272a0:	10800044 	addi	r2,r2,1
   272a4:	e0bffe15 	stw	r2,-8(fp)
   272a8:	e0bffe17 	ldw	r2,-8(fp)
   272ac:	10800510 	cmplti	r2,r2,20
   272b0:	103fcd1e 	bne	r2,zero,271e8 <__alt_mem_descriptor_memory+0xdefe71e8>

         tcp_wakeup_count++;
      }
   }

   OSSchedUnlock();
   272b4:	0018cc80 	call	18cc8 <OSSchedUnlock>
}
   272b8:	e037883a 	mov	sp,fp
   272bc:	dfc00117 	ldw	ra,4(sp)
   272c0:	df000017 	ldw	fp,0(sp)
   272c4:	dec00204 	addi	sp,sp,8
   272c8:	f800283a 	ret

000272cc <TK_OSTaskQuery>:



u_char TK_OSTaskQuery(void)
{
   272cc:	deffe204 	addi	sp,sp,-120
   272d0:	dfc01d15 	stw	ra,116(sp)
   272d4:	df001c15 	stw	fp,112(sp)
   272d8:	df001c04 	addi	fp,sp,112
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
   272dc:	e0bfe504 	addi	r2,fp,-108
   272e0:	01003fc4 	movi	r4,255
   272e4:	100b883a 	mov	r5,r2
   272e8:	001f7900 	call	1f790 <OSTaskQuery>
   272ec:	e0bfe405 	stb	r2,-112(fp)

   if (err == OS_NO_ERR)
   272f0:	e0bfe403 	ldbu	r2,-112(fp)
   272f4:	1000041e 	bne	r2,zero,27308 <TK_OSTaskQuery+0x3c>
   {
      task_prio = task_data.OSTCBPrio;
   272f8:	e0bff183 	ldbu	r2,-58(fp)
   272fc:	e0bfe445 	stb	r2,-111(fp)
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
   27300:	e0bfe443 	ldbu	r2,-111(fp)
   27304:	00000706 	br	27324 <TK_OSTaskQuery+0x58>
   {
      task_prio = task_data.OSTCBPrio;
   }
   else
   {
      dprintf("ChronOS API call failure, unable to identify task!");
   27308:	01000174 	movhi	r4,5
   2730c:	21399c04 	addi	r4,r4,-6544
   27310:	00080f80 	call	80f8 <printf>
      panic("TK_OSTaskQuery");
   27314:	01000174 	movhi	r4,5
   27318:	2139a904 	addi	r4,r4,-6492
   2731c:	00267380 	call	26738 <panic>
      return 0;
   27320:	0005883a 	mov	r2,zero
   }
   
   return task_prio;
}
   27324:	e037883a 	mov	sp,fp
   27328:	dfc00117 	ldw	ra,4(sp)
   2732c:	df000017 	ldw	fp,0(sp)
   27330:	dec00204 	addi	sp,sp,8
   27334:	f800283a 	ret

00027338 <tk_yield>:



void
tk_yield(void)
{
   27338:	defffe04 	addi	sp,sp,-8
   2733c:	dfc00115 	stw	ra,4(sp)
   27340:	df000015 	stw	fp,0(sp)
   27344:	d839883a 	mov	fp,sp
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
   27348:	01000044 	movi	r4,1
   2734c:	001f9280 	call	1f928 <OSTimeDly>
}
   27350:	e037883a 	mov	sp,fp
   27354:	dfc00117 	ldw	ra,4(sp)
   27358:	df000017 	ldw	fp,0(sp)
   2735c:	dec00204 	addi	sp,sp,8
   27360:	f800283a 	ret

00027364 <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
   27364:	deffef04 	addi	sp,sp,-68
   27368:	dfc01015 	stw	ra,64(sp)
   2736c:	df000f15 	stw	fp,60(sp)
   27370:	df000f04 	addi	fp,sp,60
   27374:	e13fff15 	stw	r4,-4(fp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
   27378:	e13fff17 	ldw	r4,-4(fp)
   2737c:	01400174 	movhi	r5,5
   27380:	2979ad04 	addi	r5,r5,-6476
   27384:	002694c0 	call	2694c <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
   27388:	00800174 	movhi	r2,5
   2738c:	108f8704 	addi	r2,r2,15900
   27390:	10800017 	ldw	r2,0(r2)
   27394:	e13fff17 	ldw	r4,-4(fp)
   27398:	01400174 	movhi	r5,5
   2739c:	2979b304 	addi	r5,r5,-6452
   273a0:	100d883a 	mov	r6,r2
   273a4:	002694c0 	call	2694c <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
   273a8:	e13fff17 	ldw	r4,-4(fp)
   273ac:	01400174 	movhi	r5,5
   273b0:	2979bb04 	addi	r5,r5,-6420
   273b4:	002694c0 	call	2694c <ns_printf>

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
   273b8:	e03ff215 	stw	zero,-56(fp)
   273bc:	00005106 	br	27504 <tk_stats+0x1a0>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
   273c0:	008001b4 	movhi	r2,6
   273c4:	10b63104 	addi	r2,r2,-10044
   273c8:	e0fff217 	ldw	r3,-56(fp)
   273cc:	18c7883a 	add	r3,r3,r3
   273d0:	18c7883a 	add	r3,r3,r3
   273d4:	10c5883a 	add	r2,r2,r3
   273d8:	10800017 	ldw	r2,0(r2)
   273dc:	e0bff415 	stw	r2,-48(fp)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
   273e0:	e0bff417 	ldw	r2,-48(fp)
   273e4:	10000326 	beq	r2,zero,273f4 <tk_stats+0x90>
   273e8:	e0bff417 	ldw	r2,-48(fp)
   273ec:	10800058 	cmpnei	r2,r2,1
   273f0:	1000011e 	bne	r2,zero,273f8 <tk_stats+0x94>
         continue;
   273f4:	00004006 	br	274f8 <tk_stats+0x194>

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
   273f8:	e0bff417 	ldw	r2,-48(fp)
   273fc:	10800c83 	ldbu	r2,50(r2)
   27400:	11003fcc 	andi	r4,r2,255
   27404:	e0fff604 	addi	r3,fp,-40
   27408:	e0bffe44 	addi	r2,fp,-7
   2740c:	180b883a 	mov	r5,r3
   27410:	100d883a 	mov	r6,r2
   27414:	001ee540 	call	1ee54 <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
   27418:	e0bff417 	ldw	r2,-48(fp)
   2741c:	10800c83 	ldbu	r2,50(r2)
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
   27420:	10c03fcc 	andi	r3,r2,255
                     name, tcb->OSTCBPrio, tcb->OSTCBStat);
   27424:	e0bff417 	ldw	r2,-48(fp)
   27428:	10800c03 	ldbu	r2,48(r2)
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
   2742c:	10803fcc 	andi	r2,r2,255
   27430:	e1bff604 	addi	r6,fp,-40
   27434:	d8800015 	stw	r2,0(sp)
   27438:	e13fff17 	ldw	r4,-4(fp)
   2743c:	01400174 	movhi	r5,5
   27440:	2979cb04 	addi	r5,r5,-6356
   27444:	180f883a 	mov	r7,r3
   27448:	002694c0 	call	2694c <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
   2744c:	e0bff417 	ldw	r2,-48(fp)
   27450:	10800217 	ldw	r2,8(r2)
   27454:	10002426 	beq	r2,zero,274e8 <tk_stats+0x184>
   27458:	e0bff417 	ldw	r2,-48(fp)
   2745c:	10800317 	ldw	r2,12(r2)
   27460:	10002126 	beq	r2,zero,274e8 <tk_stats+0x184>
      {
         sp = tcb->OSTCBStkBottom + 1;
   27464:	e0bff417 	ldw	r2,-48(fp)
   27468:	10800217 	ldw	r2,8(r2)
   2746c:	10800104 	addi	r2,r2,4
   27470:	e0bff315 	stw	r2,-52(fp)
         while(*sp == 0)
   27474:	00000306 	br	27484 <tk_stats+0x120>
            sp++;
   27478:	e0bff317 	ldw	r2,-52(fp)
   2747c:	10800104 	addi	r2,r2,4
   27480:	e0bff315 	stw	r2,-52(fp)
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
      {
         sp = tcb->OSTCBStkBottom + 1;
         while(*sp == 0)
   27484:	e0bff317 	ldw	r2,-52(fp)
   27488:	10800017 	ldw	r2,0(r2)
   2748c:	103ffa26 	beq	r2,zero,27478 <__alt_mem_descriptor_memory+0xdefe7478>
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
   27490:	e0bff417 	ldw	r2,-48(fp)
   27494:	10800317 	ldw	r2,12(r2)
   27498:	e0fff317 	ldw	r3,-52(fp)
   2749c:	e13ff417 	ldw	r4,-48(fp)
   274a0:	21000217 	ldw	r4,8(r4)
   274a4:	1907c83a 	sub	r3,r3,r4
   274a8:	1807d0ba 	srai	r3,r3,2
   274ac:	10c5c83a 	sub	r2,r2,r3
   274b0:	1085883a 	add	r2,r2,r2
   274b4:	1085883a 	add	r2,r2,r2
   274b8:	e0bff515 	stw	r2,-44(fp)
         ns_printf(pio, "%6d,      %6d\n",
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
   274bc:	e0bff417 	ldw	r2,-48(fp)
   274c0:	10800317 	ldw	r2,12(r2)
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
         ns_printf(pio, "%6d,      %6d\n",
   274c4:	1085883a 	add	r2,r2,r2
   274c8:	1085883a 	add	r2,r2,r2
   274cc:	e13fff17 	ldw	r4,-4(fp)
   274d0:	01400174 	movhi	r5,5
   274d4:	2979d304 	addi	r5,r5,-6324
   274d8:	100d883a 	mov	r6,r2
   274dc:	e1fff517 	ldw	r7,-44(fp)
   274e0:	002694c0 	call	2694c <ns_printf>
   274e4:	00000406 	br	274f8 <tk_stats+0x194>
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
   274e8:	e13fff17 	ldw	r4,-4(fp)
   274ec:	01400174 	movhi	r5,5
   274f0:	2979d704 	addi	r5,r5,-6308
   274f4:	002694c0 	call	2694c <ns_printf>
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
   274f8:	e0bff217 	ldw	r2,-56(fp)
   274fc:	10800044 	addi	r2,r2,1
   27500:	e0bff215 	stw	r2,-56(fp)
   27504:	e0bff217 	ldw	r2,-56(fp)
   27508:	10800550 	cmplti	r2,r2,21
   2750c:	103fac1e 	bne	r2,zero,273c0 <__alt_mem_descriptor_memory+0xdefe73c0>
      {
         ns_printf(pio, "No stack data\n");
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
   27510:	00800174 	movhi	r2,5
   27514:	108fb904 	addi	r2,r2,16100
   27518:	10c00017 	ldw	r3,0(r2)
   2751c:	00800174 	movhi	r2,5
   27520:	108fba04 	addi	r2,r2,16104
   27524:	10800017 	ldw	r2,0(r2)
   27528:	e13fff17 	ldw	r4,-4(fp)
   2752c:	01400174 	movhi	r5,5
   27530:	2979db04 	addi	r5,r5,-6292
   27534:	180d883a 	mov	r6,r3
   27538:	100f883a 	mov	r7,r2
   2753c:	002694c0 	call	2694c <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
   27540:	00800174 	movhi	r2,5
   27544:	108fbd04 	addi	r2,r2,16116
   27548:	10c00017 	ldw	r3,0(r2)
   2754c:	d0a87a17 	ldw	r2,-24088(gp)
   27550:	e13fff17 	ldw	r4,-4(fp)
   27554:	01400174 	movhi	r5,5
   27558:	2979e704 	addi	r5,r5,-6244
   2755c:	180d883a 	mov	r6,r3
   27560:	100f883a 	mov	r7,r2
   27564:	002694c0 	call	2694c <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
   27568:	0005883a 	mov	r2,zero
}
   2756c:	e037883a 	mov	sp,fp
   27570:	dfc00117 	ldw	ra,4(sp)
   27574:	df000017 	ldw	fp,0(sp)
   27578:	dec00204 	addi	sp,sp,8
   2757c:	f800283a 	ret

00027580 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
   27580:	defffa04 	addi	sp,sp,-24
   27584:	dfc00515 	stw	ra,20(sp)
   27588:	df000415 	stw	fp,16(sp)
   2758c:	df000404 	addi	fp,sp,16
   27590:	e13fff15 	stw	r4,-4(fp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;
   27594:	e03ffc15 	stw	zero,-16(fp)

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
   27598:	01000d84 	movi	r4,54
   2759c:	e17fff17 	ldw	r5,-4(fp)
   275a0:	002a1f00 	call	2a1f0 <find_opt>
   275a4:	e0bffd15 	stw	r2,-12(fp)
   275a8:	e0bffd17 	ldw	r2,-12(fp)
   275ac:	10001026 	beq	r2,zero,275f0 <dhc_get_srv_ipaddr+0x70>
   {
      opts++;
   275b0:	e0bffd17 	ldw	r2,-12(fp)
   275b4:	10800044 	addi	r2,r2,1
   275b8:	e0bffd15 	stw	r2,-12(fp)
      optlen = *opts;
   275bc:	e0bffd17 	ldw	r2,-12(fp)
   275c0:	10800003 	ldbu	r2,0(r2)
   275c4:	e0bffe05 	stb	r2,-8(fp)
      opts++;
   275c8:	e0bffd17 	ldw	r2,-12(fp)
   275cc:	10800044 	addi	r2,r2,1
   275d0:	e0bffd15 	stw	r2,-12(fp)
      srv_ipaddr = dh_getlong(opts);
   275d4:	e13ffd17 	ldw	r4,-12(fp)
   275d8:	002953c0 	call	2953c <dh_getlong>
   275dc:	e0bffc15 	stw	r2,-16(fp)
      opts += optlen;
   275e0:	e0bffe03 	ldbu	r2,-8(fp)
   275e4:	e0fffd17 	ldw	r3,-12(fp)
   275e8:	1885883a 	add	r2,r3,r2
   275ec:	e0bffd15 	stw	r2,-12(fp)
   }

   return (srv_ipaddr);
   275f0:	e0bffc17 	ldw	r2,-16(fp)
} 
   275f4:	e037883a 	mov	sp,fp
   275f8:	dfc00117 	ldw	ra,4(sp)
   275fc:	df000017 	ldw	fp,0(sp)
   27600:	dec00204 	addi	sp,sp,8
   27604:	f800283a 	ret

00027608 <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
   27608:	defffc04 	addi	sp,sp,-16
   2760c:	dfc00315 	stw	ra,12(sp)
   27610:	df000215 	stw	fp,8(sp)
   27614:	df000204 	addi	fp,sp,8
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
   27618:	00bfff44 	movi	r2,-3
   2761c:	d8800015 	stw	r2,0(sp)
   27620:	0009883a 	mov	r4,zero
   27624:	014010c4 	movi	r5,67
   27628:	01801104 	movi	r6,68
   2762c:	01c000b4 	movhi	r7,2
   27630:	39ddbf04 	addi	r7,r7,30460
   27634:	002ac780 	call	2ac78 <udp_open>
   27638:	d0a87b15 	stw	r2,-24084(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
   2763c:	d0a87b17 	ldw	r2,-24084(gp)
   27640:	1000021e 	bne	r2,zero,2764c <dhc_init+0x44>
      return ENP_RESOURCE;
   27644:	00bffa84 	movi	r2,-22
   27648:	00001606 	br	276a4 <dhc_init+0x9c>

   for (i = 0; i < MAXNETS; i++)
   2764c:	e03fff15 	stw	zero,-4(fp)
   27650:	00001006 	br	27694 <dhc_init+0x8c>
   {
      dhc_states[i].state = DHCS_UNUSED;
   27654:	008001b4 	movhi	r2,6
   27658:	10b7c104 	addi	r2,r2,-8444
   2765c:	e0ffff17 	ldw	r3,-4(fp)
   27660:	18c00f24 	muli	r3,r3,60
   27664:	10c5883a 	add	r2,r2,r3
   27668:	10000015 	stw	zero,0(r2)
      dhc_states[i].tries = 0;
   2766c:	008001b4 	movhi	r2,6
   27670:	10b7c104 	addi	r2,r2,-8444
   27674:	e0ffff17 	ldw	r3,-4(fp)
   27678:	18c00f24 	muli	r3,r3,60
   2767c:	10c5883a 	add	r2,r2,r3
   27680:	10800104 	addi	r2,r2,4
   27684:	10000015 	stw	zero,0(r2)
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
      return ENP_RESOURCE;

   for (i = 0; i < MAXNETS; i++)
   27688:	e0bfff17 	ldw	r2,-4(fp)
   2768c:	10800044 	addi	r2,r2,1
   27690:	e0bfff15 	stw	r2,-4(fp)
   27694:	e0bfff17 	ldw	r2,-4(fp)
   27698:	10800110 	cmplti	r2,r2,4
   2769c:	103fed1e 	bne	r2,zero,27654 <__alt_mem_descriptor_memory+0xdefe7654>
   {
      dhc_states[i].state = DHCS_UNUSED;
      dhc_states[i].tries = 0;
   }

   return 0;
   276a0:	0005883a 	mov	r2,zero
}
   276a4:	e037883a 	mov	sp,fp
   276a8:	dfc00117 	ldw	ra,4(sp)
   276ac:	df000017 	ldw	fp,0(sp)
   276b0:	dec00204 	addi	sp,sp,8
   276b4:	f800283a 	ret

000276b8 <dhc_set_callback>:
 * RETURNS: 
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
   276b8:	defffd04 	addi	sp,sp,-12
   276bc:	df000215 	stw	fp,8(sp)
   276c0:	df000204 	addi	fp,sp,8
   276c4:	e13ffe15 	stw	r4,-8(fp)
   276c8:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].callback = routine;
   276cc:	008001b4 	movhi	r2,6
   276d0:	10b7c104 	addi	r2,r2,-8444
   276d4:	e0fffe17 	ldw	r3,-8(fp)
   276d8:	18c00f24 	muli	r3,r3,60
   276dc:	10c5883a 	add	r2,r2,r3
   276e0:	10800e04 	addi	r2,r2,56
   276e4:	e0ffff17 	ldw	r3,-4(fp)
   276e8:	10c00015 	stw	r3,0(r2)
}
   276ec:	e037883a 	mov	sp,fp
   276f0:	df000017 	ldw	fp,0(sp)
   276f4:	dec00104 	addi	sp,sp,4
   276f8:	f800283a 	ret

000276fc <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
   276fc:	defff504 	addi	sp,sp,-44
   27700:	dfc00a15 	stw	ra,40(sp)
   27704:	df000915 	stw	fp,36(sp)
   27708:	dc000815 	stw	r16,32(sp)
   2770c:	df000904 	addi	fp,sp,36
   27710:	e13ffd15 	stw	r4,-12(fp)
   27714:	e17ffe15 	stw	r5,-8(fp)
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
   27718:	e0bffd17 	ldw	r2,-12(fp)
   2771c:	10800417 	ldw	r2,16(r2)
   27720:	e0bff815 	stw	r2,-32(fp)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
   27724:	e03ff715 	stw	zero,-36(fp)
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
   27728:	e0bffe17 	ldw	r2,-8(fp)
   2772c:	10bfff60 	cmpeqi	r2,r2,-3
   27730:	1000031e 	bne	r2,zero,27740 <dhc_upcall+0x44>
   {
      dtrap();
   27734:	002b0f40 	call	2b0f4 <dtrap>
      return ENP_LOGIC;    /* internal logic error */
   27738:	00bffd44 	movi	r2,-11
   2773c:	0001d806 	br	27ea0 <dhc_upcall+0x7a4>
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
   27740:	e0bffd17 	ldw	r2,-12(fp)
   27744:	10800617 	ldw	r2,24(r2)
   27748:	1009883a 	mov	r4,r2
   2774c:	00248000 	call	24800 <if_netnumber>
   27750:	e0bff915 	stw	r2,-28(fp)
   if (dhc_states[iface].state == DHCS_UNUSED)
   27754:	008001b4 	movhi	r2,6
   27758:	10b7c104 	addi	r2,r2,-8444
   2775c:	e0fff917 	ldw	r3,-28(fp)
   27760:	18c00f24 	muli	r3,r3,60
   27764:	10c5883a 	add	r2,r2,r3
   27768:	10800017 	ldw	r2,0(r2)
   2776c:	1000021e 	bne	r2,zero,27778 <dhc_upcall+0x7c>
      return ENP_NOT_MINE;
   27770:	00800084 	movi	r2,2
   27774:	0001ca06 	br	27ea0 <dhc_upcall+0x7a4>

   bp = (struct bootp *)pkt->nb_prot;
   27778:	e0bffd17 	ldw	r2,-12(fp)
   2777c:	10800317 	ldw	r2,12(r2)
   27780:	e0bffa15 	stw	r2,-24(fp)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
   27784:	e0bff817 	ldw	r2,-32(fp)
   27788:	10803b30 	cmpltui	r2,r2,236
   2778c:	10000b1e 	bne	r2,zero,277bc <dhc_upcall+0xc0>
       (bp->op != BOOTREPLY) ||
   27790:	e0bffa17 	ldw	r2,-24(fp)
   27794:	10800003 	ldbu	r2,0(r2)
      return ENP_NOT_MINE;

   bp = (struct bootp *)pkt->nb_prot;

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
   27798:	10803fcc 	andi	r2,r2,255
   2779c:	10800098 	cmpnei	r2,r2,2
   277a0:	1000061e 	bne	r2,zero,277bc <dhc_upcall+0xc0>
       (bp->op != BOOTREPLY) ||
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
   277a4:	e0bffa17 	ldw	r2,-24(fp)
   277a8:	10803b04 	addi	r2,r2,236
   277ac:	10c00017 	ldw	r3,0(r2)

   bp = (struct bootp *)pkt->nb_prot;

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
       (bp->op != BOOTREPLY) ||
   277b0:	0098d534 	movhi	r2,25428
   277b4:	10a098c4 	addi	r2,r2,-32157
   277b8:	18800626 	beq	r3,r2,277d4 <dhc_upcall+0xd8>
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
   {
      dtrap();
   277bc:	002b0f40 	call	2b0f4 <dtrap>
      dsc_errors++;
   277c0:	d0a87c17 	ldw	r2,-24080(gp)
   277c4:	10800044 	addi	r2,r2,1
   277c8:	d0a87c15 	stw	r2,-24080(gp)
      return ENP_NOT_MINE;
   277cc:	00800084 	movi	r2,2
   277d0:	0001b306 	br	27ea0 <dhc_upcall+0x7a4>
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
   277d4:	e0bffa17 	ldw	r2,-24(fp)
   277d8:	11000704 	addi	r4,r2,28
   277dc:	e0bffd17 	ldw	r2,-12(fp)
   277e0:	10800617 	ldw	r2,24(r2)
   277e4:	10c01717 	ldw	r3,92(r2)
   277e8:	e0bffd17 	ldw	r2,-12(fp)
   277ec:	10800617 	ldw	r2,24(r2)
   277f0:	10801117 	ldw	r2,68(r2)
   277f4:	180b883a 	mov	r5,r3
   277f8:	100d883a 	mov	r6,r2
   277fc:	004989c0 	call	4989c <memcmp>
   27800:	10000226 	beq	r2,zero,2780c <dhc_upcall+0x110>
      return ENP_NOT_MINE;    /* not an error, just ignore it */
   27804:	00800084 	movi	r2,2
   27808:	0001a506 	br	27ea0 <dhc_upcall+0x7a4>

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
   2780c:	e0bffa17 	ldw	r2,-24(fp)
   27810:	10803c04 	addi	r2,r2,240
   27814:	01000d44 	movi	r4,53
   27818:	100b883a 	mov	r5,r2
   2781c:	002a1f00 	call	2a1f0 <find_opt>
   27820:	e0bffb15 	stw	r2,-20(fp)
   if (opts && *opts == DHOP_TYPE)
   27824:	e0bffb17 	ldw	r2,-20(fp)
   27828:	10001026 	beq	r2,zero,2786c <dhc_upcall+0x170>
   2782c:	e0bffb17 	ldw	r2,-20(fp)
   27830:	10800003 	ldbu	r2,0(r2)
   27834:	10803fcc 	andi	r2,r2,255
   27838:	10800d58 	cmpnei	r2,r2,53
   2783c:	10000b1e 	bne	r2,zero,2786c <dhc_upcall+0x170>
   {
      dhcptype = *(opts+2);
   27840:	e0bffb17 	ldw	r2,-20(fp)
   27844:	10800084 	addi	r2,r2,2
   27848:	10800003 	ldbu	r2,0(r2)
   2784c:	10803fcc 	andi	r2,r2,255
   27850:	e0bff715 	stw	r2,-36(fp)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
   27854:	e0bffa17 	ldw	r2,-24(fp)
   27858:	10800003 	ldbu	r2,0(r2)
   2785c:	10800114 	ori	r2,r2,4
   27860:	1007883a 	mov	r3,r2
   27864:	e0bffa17 	ldw	r2,-24(fp)
   27868:	10c00005 	stb	r3,0(r2)
   }

   if (isdhcp(bp))
   2786c:	e0bffa17 	ldw	r2,-24(fp)
   27870:	10800003 	ldbu	r2,0(r2)
   27874:	10803fcc 	andi	r2,r2,255
   27878:	1080010c 	andi	r2,r2,4
   2787c:	10016726 	beq	r2,zero,27e1c <dhc_upcall+0x720>
   {
      switch (dhcptype)
   27880:	e0bff717 	ldw	r2,-36(fp)
   27884:	10c00148 	cmpgei	r3,r2,5
   27888:	1800051e 	bne	r3,zero,278a0 <dhc_upcall+0x1a4>
   2788c:	10c000c8 	cmpgei	r3,r2,3
   27890:	1800051e 	bne	r3,zero,278a8 <dhc_upcall+0x1ac>
   27894:	10800060 	cmpeqi	r2,r2,1
   27898:	1000031e 	bne	r2,zero,278a8 <dhc_upcall+0x1ac>
   2789c:	00000706 	br	278bc <dhc_upcall+0x1c0>
   278a0:	108001e0 	cmpeqi	r2,r2,7
   278a4:	10000526 	beq	r2,zero,278bc <dhc_upcall+0x1c0>
      {
      case DHCP_DISCOVER:
      case DHCP_REQUEST:
      case DHCP_DECLINE:
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
   278a8:	d0a87c17 	ldw	r2,-24080(gp)
   278ac:	10800044 	addi	r2,r2,1
   278b0:	d0a87c15 	stw	r2,-24080(gp)
         return ENP_NOT_MINE;
   278b4:	00800084 	movi	r2,2
   278b8:	00017906 	br	27ea0 <dhc_upcall+0x7a4>
      }

      switch (dhc_states[iface].state)
   278bc:	008001b4 	movhi	r2,6
   278c0:	10b7c104 	addi	r2,r2,-8444
   278c4:	e0fff917 	ldw	r3,-28(fp)
   278c8:	18c00f24 	muli	r3,r3,60
   278cc:	10c5883a 	add	r2,r2,r3
   278d0:	10800017 	ldw	r2,0(r2)
   278d4:	10c00268 	cmpgeui	r3,r2,9
   278d8:	1801461e 	bne	r3,zero,27df4 <dhc_upcall+0x6f8>
   278dc:	100690ba 	slli	r3,r2,2
   278e0:	008000b4 	movhi	r2,2
   278e4:	109e3d04 	addi	r2,r2,30964
   278e8:	1885883a 	add	r2,r3,r2
   278ec:	10800017 	ldw	r2,0(r2)
   278f0:	1000683a 	jmp	r2
   278f4:	00027df4 	movhi	zero,2551
   278f8:	00027918 	cmpnei	zero,zero,2532
   278fc:	00027918 	cmpnei	zero,zero,2532
   27900:	00027b4c 	andi	zero,zero,2541
   27904:	0002792c 	andhi	zero,zero,2532
   27908:	00027aa0 	cmpeqi	zero,zero,2538
   2790c:	00027918 	cmpnei	zero,zero,2532
   27910:	00027aa0 	cmpeqi	zero,zero,2538
   27914:	00027aa0 	cmpeqi	zero,zero,2538
      case DHCS_INITREBOOT:
         /* How can we receive any response when we never sent one */
      case DHCS_BOUND:
         /* If there are multiple DHCP Servers, and one of them is slow
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
   27918:	d0a87c17 	ldw	r2,-24080(gp)
   2791c:	10800044 	addi	r2,r2,1
   27920:	d0a87c15 	stw	r2,-24080(gp)
         return ENP_NOT_MINE;
   27924:	00800084 	movi	r2,2
   27928:	00015d06 	br	27ea0 <dhc_upcall+0x7a4>
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
   2792c:	e0bff717 	ldw	r2,-36(fp)
   27930:	10800098 	cmpnei	r2,r2,2
   27934:	10004f1e 	bne	r2,zero,27a74 <dhc_upcall+0x378>
         {
            dsc_offers++;
   27938:	d0a87e17 	ldw	r2,-24072(gp)
   2793c:	10800044 	addi	r2,r2,1
   27940:	d0a87e15 	stw	r2,-24072(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
   27944:	e0bffa17 	ldw	r2,-24(fp)
   27948:	10803c04 	addi	r2,r2,240
   2794c:	1009883a 	mov	r4,r2
   27950:	00275800 	call	27580 <dhc_get_srv_ipaddr>
   27954:	1009883a 	mov	r4,r2
   27958:	008001b4 	movhi	r2,6
   2795c:	10b7c104 	addi	r2,r2,-8444
   27960:	e0fff917 	ldw	r3,-28(fp)
   27964:	18c00f24 	muli	r3,r3,60
   27968:	10c5883a 	add	r2,r2,r3
   2796c:	10800d04 	addi	r2,r2,52
   27970:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
   27974:	008001b4 	movhi	r2,6
   27978:	10b7c104 	addi	r2,r2,-8444
   2797c:	e0fff917 	ldw	r3,-28(fp)
   27980:	18c00f24 	muli	r3,r3,60
   27984:	10c5883a 	add	r2,r2,r3
   27988:	10800d04 	addi	r2,r2,52
   2798c:	10800017 	ldw	r2,0(r2)
   27990:	10000d1e 	bne	r2,zero,279c8 <dhc_upcall+0x2cc>
            {
               dtrap(); /* didn't receive server-identifier option */
   27994:	002b0f40 	call	2b0f4 <dtrap>
               dsc_errors++;
   27998:	d0a87c17 	ldw	r2,-24080(gp)
   2799c:	10800044 	addi	r2,r2,1
   279a0:	d0a87c15 	stw	r2,-24080(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
   279a4:	e0bffd17 	ldw	r2,-12(fp)
   279a8:	10c00717 	ldw	r3,28(r2)
   279ac:	008001b4 	movhi	r2,6
   279b0:	10b7c104 	addi	r2,r2,-8444
   279b4:	e13ff917 	ldw	r4,-28(fp)
   279b8:	21000f24 	muli	r4,r4,60
   279bc:	1105883a 	add	r2,r2,r4
   279c0:	10800d04 	addi	r2,r2,52
   279c4:	10c00015 	stw	r3,0(r2)
            }

            if (bp->hops)
   279c8:	e0bffa17 	ldw	r2,-24(fp)
   279cc:	108000c3 	ldbu	r2,3(r2)
   279d0:	10803fcc 	andi	r2,r2,255
   279d4:	10000a26 	beq	r2,zero,27a00 <dhc_upcall+0x304>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
   279d8:	e0bffd17 	ldw	r2,-12(fp)
   279dc:	10c00717 	ldw	r3,28(r2)
   279e0:	008001b4 	movhi	r2,6
   279e4:	10b7c104 	addi	r2,r2,-8444
   279e8:	e13ff917 	ldw	r4,-28(fp)
   279ec:	21000f24 	muli	r4,r4,60
   279f0:	1105883a 	add	r2,r2,r4
   279f4:	10800c04 	addi	r2,r2,48
   279f8:	10c00015 	stw	r3,0(r2)
   279fc:	00000706 	br	27a1c <dhc_upcall+0x320>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
   27a00:	008001b4 	movhi	r2,6
   27a04:	10b7c104 	addi	r2,r2,-8444
   27a08:	e0fff917 	ldw	r3,-28(fp)
   27a0c:	18c00f24 	muli	r3,r3,60
   27a10:	10c5883a 	add	r2,r2,r3
   27a14:	10800c04 	addi	r2,r2,48
   27a18:	10000015 	stw	zero,0(r2)

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
   27a1c:	e0bffd17 	ldw	r2,-12(fp)
   27a20:	10800417 	ldw	r2,16(r2)
   27a24:	e13ff917 	ldw	r4,-28(fp)
   27a28:	e17ffa17 	ldw	r5,-24(fp)
   27a2c:	100d883a 	mov	r6,r2
   27a30:	00285540 	call	28554 <dhc_rx_offer>
   27a34:	e0bffc15 	stw	r2,-16(fp)
            if (e)
   27a38:	e0bffc17 	ldw	r2,-16(fp)
   27a3c:	10000926 	beq	r2,zero,27a64 <dhc_upcall+0x368>
            {
               dsc_errors++;
   27a40:	d0a87c17 	ldw	r2,-24080(gp)
   27a44:	10800044 	addi	r2,r2,1
   27a48:	d0a87c15 	stw	r2,-24080(gp)
               dhc_set_state(iface,DHCS_INIT);
   27a4c:	e13ff917 	ldw	r4,-28(fp)
   27a50:	01400044 	movi	r5,1
   27a54:	002a1440 	call	2a144 <dhc_set_state>
               dtrap();
   27a58:	002b0f40 	call	2b0f4 <dtrap>
               return ENP_NOT_MINE;
   27a5c:	00800084 	movi	r2,2
   27a60:	00010f06 	br	27ea0 <dhc_upcall+0x7a4>
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
   27a64:	e13ff917 	ldw	r4,-28(fp)
   27a68:	01400144 	movi	r5,5
   27a6c:	002a1440 	call	2a144 <dhc_set_state>
            dsc_errors++;
            if ( dhcptype == DHCP_NAK ) 
               dsc_naks++;
            return ENP_NOT_MINE;
         }
         break;
   27a70:	0000e906 	br	27e18 <dhc_upcall+0x71c>
             * Report an error and remain in SELECTING state, so that 
             * an OFFER packet from another DHCP server can be 
             * accepted. If we timeout waiting for a OFFER packet, 
             * then dhc_second() will transition to DHCS_INIT state. 
             */
            dsc_errors++;
   27a74:	d0a87c17 	ldw	r2,-24080(gp)
   27a78:	10800044 	addi	r2,r2,1
   27a7c:	d0a87c15 	stw	r2,-24080(gp)
            if ( dhcptype == DHCP_NAK ) 
   27a80:	e0bff717 	ldw	r2,-36(fp)
   27a84:	10800198 	cmpnei	r2,r2,6
   27a88:	1000031e 	bne	r2,zero,27a98 <dhc_upcall+0x39c>
               dsc_naks++;
   27a8c:	d0a88417 	ldw	r2,-24048(gp)
   27a90:	10800044 	addi	r2,r2,1
   27a94:	d0a88415 	stw	r2,-24048(gp)
            return ENP_NOT_MINE;
   27a98:	00800084 	movi	r2,2
   27a9c:	00010006 	br	27ea0 <dhc_upcall+0x7a4>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
   27aa0:	008001b4 	movhi	r2,6
   27aa4:	10b7c104 	addi	r2,r2,-8444
   27aa8:	e0fff917 	ldw	r3,-28(fp)
   27aac:	18c00f24 	muli	r3,r3,60
   27ab0:	10c5883a 	add	r2,r2,r3
   27ab4:	10800d04 	addi	r2,r2,52
   27ab8:	14000017 	ldw	r16,0(r2)
             dhc_get_srv_ipaddr(&bp->options[4]) )
   27abc:	e0bffa17 	ldw	r2,-24(fp)
   27ac0:	10803c04 	addi	r2,r2,240
   27ac4:	1009883a 	mov	r4,r2
   27ac8:	00275800 	call	27580 <dhc_get_srv_ipaddr>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
   27acc:	80800526 	beq	r16,r2,27ae4 <dhc_upcall+0x3e8>
             dhc_get_srv_ipaddr(&bp->options[4]) )
         {
            dsc_errors++;
   27ad0:	d0a87c17 	ldw	r2,-24080(gp)
   27ad4:	10800044 	addi	r2,r2,1
   27ad8:	d0a87c15 	stw	r2,-24080(gp)
            return ENP_NOT_MINE;
   27adc:	00800084 	movi	r2,2
   27ae0:	0000ef06 	br	27ea0 <dhc_upcall+0x7a4>
         }
         if (dhc_states[iface].rly_ipaddr &&
   27ae4:	008001b4 	movhi	r2,6
   27ae8:	10b7c104 	addi	r2,r2,-8444
   27aec:	e0fff917 	ldw	r3,-28(fp)
   27af0:	18c00f24 	muli	r3,r3,60
   27af4:	10c5883a 	add	r2,r2,r3
   27af8:	10800c04 	addi	r2,r2,48
   27afc:	10800017 	ldw	r2,0(r2)
   27b00:	10001226 	beq	r2,zero,27b4c <dhc_upcall+0x450>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
   27b04:	008001b4 	movhi	r2,6
   27b08:	10b7c104 	addi	r2,r2,-8444
   27b0c:	e0fff917 	ldw	r3,-28(fp)
   27b10:	18c00f24 	muli	r3,r3,60
   27b14:	10c5883a 	add	r2,r2,r3
   27b18:	10800c04 	addi	r2,r2,48
   27b1c:	10c00017 	ldw	r3,0(r2)
   27b20:	e0bffd17 	ldw	r2,-12(fp)
   27b24:	10800717 	ldw	r2,28(r2)
             dhc_get_srv_ipaddr(&bp->options[4]) )
         {
            dsc_errors++;
            return ENP_NOT_MINE;
         }
         if (dhc_states[iface].rly_ipaddr &&
   27b28:	18800826 	beq	r3,r2,27b4c <dhc_upcall+0x450>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
   27b2c:	d0a88717 	ldw	r2,-24036(gp)
   27b30:	10800044 	addi	r2,r2,1
   27b34:	d0a88715 	stw	r2,-24036(gp)
            dsc_errors++;
   27b38:	d0a87c17 	ldw	r2,-24080(gp)
   27b3c:	10800044 	addi	r2,r2,1
   27b40:	d0a87c15 	stw	r2,-24080(gp)
            return ENP_NOT_MINE;
   27b44:	00800084 	movi	r2,2
   27b48:	0000d506 	br	27ea0 <dhc_upcall+0x7a4>
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
   27b4c:	e0bff717 	ldw	r2,-36(fp)
   27b50:	10800158 	cmpnei	r2,r2,5
   27b54:	1000871e 	bne	r2,zero,27d74 <dhc_upcall+0x678>
         {
            dsc_acks++;
   27b58:	d0a88017 	ldw	r2,-24064(gp)
   27b5c:	10800044 	addi	r2,r2,1
   27b60:	d0a88015 	stw	r2,-24064(gp)
            dhc_extract_opts(iface,&bp->options[4]);
   27b64:	e0bffa17 	ldw	r2,-24(fp)
   27b68:	10803c04 	addi	r2,r2,240
   27b6c:	e13ff917 	ldw	r4,-28(fp)
   27b70:	100b883a 	mov	r5,r2
   27b74:	00295e80 	call	295e8 <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
   27b78:	008001b4 	movhi	r2,6
   27b7c:	10b7c104 	addi	r2,r2,-8444
   27b80:	e0fff917 	ldw	r3,-28(fp)
   27b84:	18c00f24 	muli	r3,r3,60
   27b88:	10c5883a 	add	r2,r2,r3
   27b8c:	10800504 	addi	r2,r2,20
   27b90:	10800017 	ldw	r2,0(r2)
   27b94:	10bfffd8 	cmpnei	r2,r2,-1
   27b98:	1000111e 	bne	r2,zero,27be0 <dhc_upcall+0x4e4>
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
   27b9c:	008001b4 	movhi	r2,6
   27ba0:	10b7c104 	addi	r2,r2,-8444
   27ba4:	e0fff917 	ldw	r3,-28(fp)
   27ba8:	18c00f24 	muli	r3,r3,60
   27bac:	10c5883a 	add	r2,r2,r3
   27bb0:	10800604 	addi	r2,r2,24
   27bb4:	00ffffc4 	movi	r3,-1
   27bb8:	10c00015 	stw	r3,0(r2)
               dhc_states[iface].t2 = DHC_INFINITY ;
   27bbc:	008001b4 	movhi	r2,6
   27bc0:	10b7c104 	addi	r2,r2,-8444
   27bc4:	e0fff917 	ldw	r3,-28(fp)
   27bc8:	18c00f24 	muli	r3,r3,60
   27bcc:	10c5883a 	add	r2,r2,r3
   27bd0:	10800704 	addi	r2,r2,28
   27bd4:	00ffffc4 	movi	r3,-1
   27bd8:	10c00015 	stw	r3,0(r2)
   27bdc:	00001f06 	br	27c5c <dhc_upcall+0x560>
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
   27be0:	008001b4 	movhi	r2,6
   27be4:	10b7c104 	addi	r2,r2,-8444
   27be8:	e0fff917 	ldw	r3,-28(fp)
   27bec:	18c00f24 	muli	r3,r3,60
   27bf0:	10c5883a 	add	r2,r2,r3
   27bf4:	10800504 	addi	r2,r2,20
   27bf8:	10800017 	ldw	r2,0(r2)
   27bfc:	1006d07a 	srli	r3,r2,1
   27c00:	008001b4 	movhi	r2,6
   27c04:	10b7c104 	addi	r2,r2,-8444
   27c08:	e13ff917 	ldw	r4,-28(fp)
   27c0c:	21000f24 	muli	r4,r4,60
   27c10:	1105883a 	add	r2,r2,r4
   27c14:	10800604 	addi	r2,r2,24
   27c18:	10c00015 	stw	r3,0(r2)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
   27c1c:	008001b4 	movhi	r2,6
   27c20:	10b7c104 	addi	r2,r2,-8444
   27c24:	e0fff917 	ldw	r3,-28(fp)
   27c28:	18c00f24 	muli	r3,r3,60
   27c2c:	10c5883a 	add	r2,r2,r3
   27c30:	10800504 	addi	r2,r2,20
   27c34:	10800017 	ldw	r2,0(r2)
   27c38:	1004d0fa 	srli	r2,r2,3
   27c3c:	10c001e4 	muli	r3,r2,7
   27c40:	008001b4 	movhi	r2,6
   27c44:	10b7c104 	addi	r2,r2,-8444
   27c48:	e13ff917 	ldw	r4,-28(fp)
   27c4c:	21000f24 	muli	r4,r4,60
   27c50:	1105883a 	add	r2,r2,r4
   27c54:	10800704 	addi	r2,r2,28
   27c58:	10c00015 	stw	r3,0(r2)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
   27c5c:	00800174 	movhi	r2,5
   27c60:	108fbe04 	addi	r2,r2,16120
   27c64:	10c00017 	ldw	r3,0(r2)
   27c68:	008001b4 	movhi	r2,6
   27c6c:	10b7c104 	addi	r2,r2,-8444
   27c70:	e13ff917 	ldw	r4,-28(fp)
   27c74:	21000f24 	muli	r4,r4,60
   27c78:	1105883a 	add	r2,r2,r4
   27c7c:	10800804 	addi	r2,r2,32
   27c80:	10c00015 	stw	r3,0(r2)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
   27c84:	e0bffa17 	ldw	r2,-24(fp)
   27c88:	10803c04 	addi	r2,r2,240
   27c8c:	1009883a 	mov	r4,r2
   27c90:	00275800 	call	27580 <dhc_get_srv_ipaddr>
   27c94:	1009883a 	mov	r4,r2
   27c98:	008001b4 	movhi	r2,6
   27c9c:	10b7c104 	addi	r2,r2,-8444
   27ca0:	e0fff917 	ldw	r3,-28(fp)
   27ca4:	18c00f24 	muli	r3,r3,60
   27ca8:	10c5883a 	add	r2,r2,r3
   27cac:	10800d04 	addi	r2,r2,52
   27cb0:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
   27cb4:	008001b4 	movhi	r2,6
   27cb8:	10b7c104 	addi	r2,r2,-8444
   27cbc:	e0fff917 	ldw	r3,-28(fp)
   27cc0:	18c00f24 	muli	r3,r3,60
   27cc4:	10c5883a 	add	r2,r2,r3
   27cc8:	10800d04 	addi	r2,r2,52
   27ccc:	10800017 	ldw	r2,0(r2)
   27cd0:	10000d1e 	bne	r2,zero,27d08 <dhc_upcall+0x60c>
            {
               dtrap(); /* didn't receive server-identifier option */
   27cd4:	002b0f40 	call	2b0f4 <dtrap>
               dsc_errors++;
   27cd8:	d0a87c17 	ldw	r2,-24080(gp)
   27cdc:	10800044 	addi	r2,r2,1
   27ce0:	d0a87c15 	stw	r2,-24080(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
   27ce4:	e0bffd17 	ldw	r2,-12(fp)
   27ce8:	10c00717 	ldw	r3,28(r2)
   27cec:	008001b4 	movhi	r2,6
   27cf0:	10b7c104 	addi	r2,r2,-8444
   27cf4:	e13ff917 	ldw	r4,-28(fp)
   27cf8:	21000f24 	muli	r4,r4,60
   27cfc:	1105883a 	add	r2,r2,r4
   27d00:	10800d04 	addi	r2,r2,52
   27d04:	10c00015 	stw	r3,0(r2)
            }
            if (bp->hops)
   27d08:	e0bffa17 	ldw	r2,-24(fp)
   27d0c:	108000c3 	ldbu	r2,3(r2)
   27d10:	10803fcc 	andi	r2,r2,255
   27d14:	10000a26 	beq	r2,zero,27d40 <dhc_upcall+0x644>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
   27d18:	e0bffd17 	ldw	r2,-12(fp)
   27d1c:	10c00717 	ldw	r3,28(r2)
   27d20:	008001b4 	movhi	r2,6
   27d24:	10b7c104 	addi	r2,r2,-8444
   27d28:	e13ff917 	ldw	r4,-28(fp)
   27d2c:	21000f24 	muli	r4,r4,60
   27d30:	1105883a 	add	r2,r2,r4
   27d34:	10800c04 	addi	r2,r2,48
   27d38:	10c00015 	stw	r3,0(r2)
   27d3c:	00000706 	br	27d5c <dhc_upcall+0x660>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
   27d40:	008001b4 	movhi	r2,6
   27d44:	10b7c104 	addi	r2,r2,-8444
   27d48:	e0fff917 	ldw	r3,-28(fp)
   27d4c:	18c00f24 	muli	r3,r3,60
   27d50:	10c5883a 	add	r2,r2,r3
   27d54:	10800c04 	addi	r2,r2,48
   27d58:	10000015 	stw	zero,0(r2)

            dhc_setip(iface);
   27d5c:	e13ff917 	ldw	r4,-28(fp)
   27d60:	00290d40 	call	290d4 <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
   27d64:	e13ff917 	ldw	r4,-28(fp)
   27d68:	01400184 	movi	r5,6
   27d6c:	002a1440 	call	2a144 <dhc_set_state>
   27d70:	00001f06 	br	27df0 <dhc_upcall+0x6f4>
         }
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
   27d74:	e0bff717 	ldw	r2,-36(fp)
   27d78:	10800198 	cmpnei	r2,r2,6
   27d7c:	1000071e 	bne	r2,zero,27d9c <dhc_upcall+0x6a0>
         {
            dhc_set_state(iface,DHCS_INIT);
   27d80:	e13ff917 	ldw	r4,-28(fp)
   27d84:	01400044 	movi	r5,1
   27d88:	002a1440 	call	2a144 <dhc_set_state>
            dsc_naks++;
   27d8c:	d0a88417 	ldw	r2,-24048(gp)
   27d90:	10800044 	addi	r2,r2,1
   27d94:	d0a88415 	stw	r2,-24048(gp)
   27d98:	00001506 	br	27df0 <dhc_upcall+0x6f4>
         {
            /* In REQUESTING state, we might receive a retransmitted
             * OFFER, which we should discard, but it's not an error,
             * so we log it.
             */
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
   27d9c:	008001b4 	movhi	r2,6
   27da0:	10b7c104 	addi	r2,r2,-8444
   27da4:	e0fff917 	ldw	r3,-28(fp)
   27da8:	18c00f24 	muli	r3,r3,60
   27dac:	10c5883a 	add	r2,r2,r3
   27db0:	10800017 	ldw	r2,0(r2)
   27db4:	10800158 	cmpnei	r2,r2,5
   27db8:	1000081e 	bne	r2,zero,27ddc <dhc_upcall+0x6e0>
   27dbc:	e0bff717 	ldw	r2,-36(fp)
   27dc0:	10800098 	cmpnei	r2,r2,2
   27dc4:	1000051e 	bne	r2,zero,27ddc <dhc_upcall+0x6e0>
                (dhcptype == DHCP_OFFER))
            {
               dsc_offers++;
   27dc8:	d0a87e17 	ldw	r2,-24072(gp)
   27dcc:	10800044 	addi	r2,r2,1
   27dd0:	d0a87e15 	stw	r2,-24072(gp)
               return ENP_NOT_MINE;
   27dd4:	00800084 	movi	r2,2
   27dd8:	00003106 	br	27ea0 <dhc_upcall+0x7a4>
             * only receive ACK or NAK, and in REQUESTING state we
             * should only receive ACK or NAK or OFFER; these are
             * accounted for above, so we log whatever this is as an
             * error and discard it with no change to our state.
             */
            dsc_errors++;
   27ddc:	d0a87c17 	ldw	r2,-24080(gp)
   27de0:	10800044 	addi	r2,r2,1
   27de4:	d0a87c15 	stw	r2,-24080(gp)
            return ENP_NOT_MINE;
   27de8:	00800084 	movi	r2,2
   27dec:	00002c06 	br	27ea0 <dhc_upcall+0x7a4>
         }
         break;
   27df0:	00000906 	br	27e18 <dhc_upcall+0x71c>
      default:    /* bad state */
         dtrap();
   27df4:	002b0f40 	call	2b0f4 <dtrap>
         dhc_set_state(iface,DHCS_INIT);
   27df8:	e13ff917 	ldw	r4,-28(fp)
   27dfc:	01400044 	movi	r5,1
   27e00:	002a1440 	call	2a144 <dhc_set_state>
         dsc_errors++;
   27e04:	d0a87c17 	ldw	r2,-24080(gp)
   27e08:	10800044 	addi	r2,r2,1
   27e0c:	d0a87c15 	stw	r2,-24080(gp)
         return -1;
   27e10:	00bfffc4 	movi	r2,-1
   27e14:	00002206 	br	27ea0 <dhc_upcall+0x7a4>
   27e18:	00001e06 	br	27e94 <dhc_upcall+0x798>
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
   27e1c:	d0a88117 	ldw	r2,-24060(gp)
   27e20:	10800044 	addi	r2,r2,1
   27e24:	d0a88115 	stw	r2,-24060(gp)
      dhc_extract_opts(iface,&bp->options[4]);
   27e28:	e0bffa17 	ldw	r2,-24(fp)
   27e2c:	10803c04 	addi	r2,r2,240
   27e30:	e13ff917 	ldw	r4,-28(fp)
   27e34:	100b883a 	mov	r5,r2
   27e38:	00295e80 	call	295e8 <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
   27e3c:	e0bffa17 	ldw	r2,-24(fp)
   27e40:	10c00417 	ldw	r3,16(r2)
   27e44:	008001b4 	movhi	r2,6
   27e48:	10b7c104 	addi	r2,r2,-8444
   27e4c:	e13ff917 	ldw	r4,-28(fp)
   27e50:	21000f24 	muli	r4,r4,60
   27e54:	1105883a 	add	r2,r2,r4
   27e58:	10800904 	addi	r2,r2,36
   27e5c:	10c00015 	stw	r3,0(r2)
      dhc_setip(iface);
   27e60:	e13ff917 	ldw	r4,-28(fp)
   27e64:	00290d40 	call	290d4 <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
   27e68:	e13ff917 	ldw	r4,-28(fp)
   27e6c:	01400184 	movi	r5,6
   27e70:	002a1440 	call	2a144 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
   27e74:	008001b4 	movhi	r2,6
   27e78:	10b7c104 	addi	r2,r2,-8444
   27e7c:	e0fff917 	ldw	r3,-28(fp)
   27e80:	18c00f24 	muli	r3,r3,60
   27e84:	10c5883a 	add	r2,r2,r3
   27e88:	10800604 	addi	r2,r2,24
   27e8c:	00ffffc4 	movi	r3,-1
   27e90:	10c00015 	stw	r3,0(r2)
   }

   udp_free(pkt);
   27e94:	e13ffd17 	ldw	r4,-12(fp)
   27e98:	00434640 	call	43464 <udp_free>
   return 0;
   27e9c:	0005883a 	mov	r2,zero
}
   27ea0:	e6ffff04 	addi	sp,fp,-4
   27ea4:	dfc00217 	ldw	ra,8(sp)
   27ea8:	df000117 	ldw	fp,4(sp)
   27eac:	dc000017 	ldw	r16,0(sp)
   27eb0:	dec00304 	addi	sp,sp,12
   27eb4:	f800283a 	ret

00027eb8 <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
   27eb8:	defffb04 	addi	sp,sp,-20
   27ebc:	dfc00415 	stw	ra,16(sp)
   27ec0:	df000315 	stw	fp,12(sp)
   27ec4:	df000304 	addi	fp,sp,12
   27ec8:	e13ffe15 	stw	r4,-8(fp)
   27ecc:	e17fff15 	stw	r5,-4(fp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
   27ed0:	e13fff17 	ldw	r4,-4(fp)
   27ed4:	000b883a 	mov	r5,zero
   27ed8:	01804b04 	movi	r6,300
   27edc:	0007f240 	call	7f24 <memset>
   outbp->op = BOOTREQUEST;
   27ee0:	e0bfff17 	ldw	r2,-4(fp)
   27ee4:	00c00044 	movi	r3,1
   27ee8:	10c00005 	stb	r3,0(r2)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
   27eec:	008001b4 	movhi	r2,6
   27ef0:	10b79b04 	addi	r2,r2,-8596
   27ef4:	e0fffe17 	ldw	r3,-8(fp)
   27ef8:	18c7883a 	add	r3,r3,r3
   27efc:	18c7883a 	add	r3,r3,r3
   27f00:	10c5883a 	add	r2,r2,r3
   27f04:	10800017 	ldw	r2,0(r2)
   27f08:	10802717 	ldw	r2,156(r2)
   27f0c:	10800217 	ldw	r2,8(r2)
   27f10:	10c005e0 	cmpeqi	r3,r2,23
   27f14:	1800081e 	bne	r3,zero,27f38 <dhc_buildheader+0x80>
   27f18:	10c00720 	cmpeqi	r3,r2,28
   27f1c:	1800061e 	bne	r3,zero,27f38 <dhc_buildheader+0x80>
   27f20:	108001a0 	cmpeqi	r2,r2,6
   27f24:	10000826 	beq	r2,zero,27f48 <dhc_buildheader+0x90>
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
   27f28:	e0bfff17 	ldw	r2,-4(fp)
   27f2c:	00c00044 	movi	r3,1
   27f30:	10c00045 	stb	r3,1(r2)
   break;
   27f34:	00000706 	br	27f54 <dhc_buildheader+0x9c>
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
   27f38:	e0bfff17 	ldw	r2,-4(fp)
   27f3c:	00c00504 	movi	r3,20
   27f40:	10c00045 	stb	r3,1(r2)
   break;
   27f44:	00000306 	br	27f54 <dhc_buildheader+0x9c>
      default:
      dtrap();
   27f48:	002b0f40 	call	2b0f4 <dtrap>
      return ENP_LOGIC;             /* this shouldn't happen */
   27f4c:	00bffd44 	movi	r2,-11
   27f50:	00004d06 	br	28088 <dhc_buildheader+0x1d0>
   }

   addrlen = min(16, nets[iface]->n_hal);
   27f54:	008001b4 	movhi	r2,6
   27f58:	10b79b04 	addi	r2,r2,-8596
   27f5c:	e0fffe17 	ldw	r3,-8(fp)
   27f60:	18c7883a 	add	r3,r3,r3
   27f64:	18c7883a 	add	r3,r3,r3
   27f68:	10c5883a 	add	r2,r2,r3
   27f6c:	10800017 	ldw	r2,0(r2)
   27f70:	10801117 	ldw	r2,68(r2)
   27f74:	10c00470 	cmpltui	r3,r2,17
   27f78:	1800011e 	bne	r3,zero,27f80 <dhc_buildheader+0xc8>
   27f7c:	00800404 	movi	r2,16
   27f80:	e0bffd15 	stw	r2,-12(fp)
   outbp->hlen = (u_char)addrlen;
   27f84:	e0bffd17 	ldw	r2,-12(fp)
   27f88:	1007883a 	mov	r3,r2
   27f8c:	e0bfff17 	ldw	r2,-4(fp)
   27f90:	10c00085 	stb	r3,2(r2)
   outbp->hops = 0;
   27f94:	e0bfff17 	ldw	r2,-4(fp)
   27f98:	100000c5 	stb	zero,3(r2)
   if(dhc_states[iface].state == DHCS_RENEWING) 
   27f9c:	008001b4 	movhi	r2,6
   27fa0:	10b7c104 	addi	r2,r2,-8444
   27fa4:	e0fffe17 	ldw	r3,-8(fp)
   27fa8:	18c00f24 	muli	r3,r3,60
   27fac:	10c5883a 	add	r2,r2,r3
   27fb0:	10800017 	ldw	r2,0(r2)
   27fb4:	108001d8 	cmpnei	r2,r2,7
   27fb8:	1000031e 	bne	r2,zero,27fc8 <dhc_buildheader+0x110>
      outbp->flags = 0; /* Renewing needs unicast */
   27fbc:	e0bfff17 	ldw	r2,-4(fp)
   27fc0:	1000028d 	sth	zero,10(r2)
   27fc4:	00000306 	br	27fd4 <dhc_buildheader+0x11c>
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
   27fc8:	e0bfff17 	ldw	r2,-4(fp)
   27fcc:	00c02004 	movi	r3,128
   27fd0:	10c0028d 	sth	r3,10(r2)
   outbp->xid = dhc_states[iface].xid;
   27fd4:	008001b4 	movhi	r2,6
   27fd8:	10b7c104 	addi	r2,r2,-8444
   27fdc:	e0fffe17 	ldw	r3,-8(fp)
   27fe0:	18c00f24 	muli	r3,r3,60
   27fe4:	10c5883a 	add	r2,r2,r3
   27fe8:	10800204 	addi	r2,r2,8
   27fec:	10c00017 	ldw	r3,0(r2)
   27ff0:	e0bfff17 	ldw	r2,-4(fp)
   27ff4:	10c00115 	stw	r3,4(r2)
   outbp->secs = dhc_states[iface].secs;
   27ff8:	008001b4 	movhi	r2,6
   27ffc:	10b7c104 	addi	r2,r2,-8444
   28000:	e0fffe17 	ldw	r3,-8(fp)
   28004:	18c00f24 	muli	r3,r3,60
   28008:	10c5883a 	add	r2,r2,r3
   2800c:	10800304 	addi	r2,r2,12
   28010:	10c0000b 	ldhu	r3,0(r2)
   28014:	e0bfff17 	ldw	r2,-4(fp)
   28018:	10c0020d 	sth	r3,8(r2)
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
   2801c:	008001b4 	movhi	r2,6
   28020:	10b79b04 	addi	r2,r2,-8596
   28024:	e0fffe17 	ldw	r3,-8(fp)
   28028:	18c7883a 	add	r3,r3,r3
   2802c:	18c7883a 	add	r3,r3,r3
   28030:	10c5883a 	add	r2,r2,r3
   28034:	10800017 	ldw	r2,0(r2)
   28038:	10801717 	ldw	r2,92(r2)
   2803c:	1000031e 	bne	r2,zero,2804c <dhc_buildheader+0x194>
   {
      dtrap();
   28040:	002b0f40 	call	2b0f4 <dtrap>
      return ENP_LOGIC;
   28044:	00bffd44 	movi	r2,-11
   28048:	00000f06 	br	28088 <dhc_buildheader+0x1d0>
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
   2804c:	e0bfff17 	ldw	r2,-4(fp)
   28050:	11000704 	addi	r4,r2,28
   28054:	008001b4 	movhi	r2,6
   28058:	10b79b04 	addi	r2,r2,-8596
   2805c:	e0fffe17 	ldw	r3,-8(fp)
   28060:	18c7883a 	add	r3,r3,r3
   28064:	18c7883a 	add	r3,r3,r3
   28068:	10c5883a 	add	r2,r2,r3
   2806c:	10800017 	ldw	r2,0(r2)
   28070:	10c01717 	ldw	r3,92(r2)
   28074:	e0bffd17 	ldw	r2,-12(fp)
   28078:	180b883a 	mov	r5,r3
   2807c:	100d883a 	mov	r6,r2
   28080:	0007c900 	call	7c90 <memcpy>

   /* return success */
   return 0;
   28084:	0005883a 	mov	r2,zero
}
   28088:	e037883a 	mov	sp,fp
   2808c:	dfc00117 	ldw	ra,4(sp)
   28090:	df000017 	ldw	fp,0(sp)
   28094:	dec00204 	addi	sp,sp,8
   28098:	f800283a 	ret

0002809c <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
   2809c:	defff604 	addi	sp,sp,-40
   280a0:	dfc00915 	stw	ra,36(sp)
   280a4:	df000815 	stw	fp,32(sp)
   280a8:	df000804 	addi	fp,sp,32
   280ac:	e13fff15 	stw	r4,-4(fp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
   280b0:	01004b04 	movi	r4,300
   280b4:	000b883a 	mov	r5,zero
   280b8:	004337c0 	call	4337c <udp_alloc>
   280bc:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
   280c0:	e0bffa17 	ldw	r2,-24(fp)
   280c4:	1000021e 	bne	r2,zero,280d0 <dhc_discover+0x34>
      return ENP_NOMEM;
   280c8:	00bffb04 	movi	r2,-20
   280cc:	00011c06 	br	28540 <dhc_discover+0x4a4>
   pkt->nb_plen = sizeof(struct bootp);
   280d0:	e0bffa17 	ldw	r2,-24(fp)
   280d4:	00c04b04 	movi	r3,300
   280d8:	10c00415 	stw	r3,16(r2)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
   280dc:	d0a03017 	ldw	r2,-32576(gp)
   280e0:	10c00044 	addi	r3,r2,1
   280e4:	d0e03015 	stw	r3,-32576(gp)
   280e8:	1009883a 	mov	r4,r2
   280ec:	008001b4 	movhi	r2,6
   280f0:	10b7c104 	addi	r2,r2,-8444
   280f4:	e0ffff17 	ldw	r3,-4(fp)
   280f8:	18c00f24 	muli	r3,r3,60
   280fc:	10c5883a 	add	r2,r2,r3
   28100:	10800204 	addi	r2,r2,8
   28104:	11000015 	stw	r4,0(r2)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
   28108:	003b0dc0 	call	3b0dc <sysuptime>
   2810c:	1009883a 	mov	r4,r2
   28110:	01401904 	movi	r5,100
   28114:	00152500 	call	15250 <__udivsi3>
   28118:	1009883a 	mov	r4,r2
   2811c:	008001b4 	movhi	r2,6
   28120:	10b7c104 	addi	r2,r2,-8444
   28124:	e0ffff17 	ldw	r3,-4(fp)
   28128:	18c00f24 	muli	r3,r3,60
   2812c:	10c5883a 	add	r2,r2,r3
   28130:	10800304 	addi	r2,r2,12
   28134:	1100000d 	sth	r4,0(r2)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
   28138:	e0bffa17 	ldw	r2,-24(fp)
   2813c:	10800317 	ldw	r2,12(r2)
   28140:	e0bffb15 	stw	r2,-20(fp)
   e = dhc_buildheader(iface,outbp);
   28144:	e13fff17 	ldw	r4,-4(fp)
   28148:	e17ffb17 	ldw	r5,-20(fp)
   2814c:	0027eb80 	call	27eb8 <dhc_buildheader>
   28150:	e0bffc15 	stw	r2,-16(fp)
   if (e)
   28154:	e0bffc17 	ldw	r2,-16(fp)
   28158:	10000226 	beq	r2,zero,28164 <dhc_discover+0xc8>
      return e;
   2815c:	e0bffc17 	ldw	r2,-16(fp)
   28160:	0000f706 	br	28540 <dhc_discover+0x4a4>

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   28164:	e0bffb17 	ldw	r2,-20(fp)
   28168:	10c03b04 	addi	r3,r2,236
   2816c:	0098d534 	movhi	r2,25428
   28170:	10a098c4 	addi	r2,r2,-32157
   28174:	18800015 	stw	r2,0(r3)
   opts = &outbp->options[4];    /* encode options after cookie */
   28178:	e0bffb17 	ldw	r2,-20(fp)
   2817c:	10803c04 	addi	r2,r2,240
   28180:	e0bff815 	stw	r2,-32(fp)
   *opts++ = DHOP_TYPE;
   28184:	e0bff817 	ldw	r2,-32(fp)
   28188:	10c00044 	addi	r3,r2,1
   2818c:	e0fff815 	stw	r3,-32(fp)
   28190:	00c00d44 	movi	r3,53
   28194:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
   28198:	e0bff817 	ldw	r2,-32(fp)
   2819c:	10c00044 	addi	r3,r2,1
   281a0:	e0fff815 	stw	r3,-32(fp)
   281a4:	00c00044 	movi	r3,1
   281a8:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_DISCOVER;
   281ac:	e0bff817 	ldw	r2,-32(fp)
   281b0:	10c00044 	addi	r3,r2,1
   281b4:	e0fff815 	stw	r3,-32(fp)
   281b8:	00c00044 	movi	r3,1
   281bc:	10c00005 	stb	r3,0(r2)
   leasetime = -1L ;    /* ask for infinite lease */
   281c0:	00bfffc4 	movi	r2,-1
   281c4:	e0bffd15 	stw	r2,-12(fp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
   281c8:	e0bff817 	ldw	r2,-32(fp)
   281cc:	10c00044 	addi	r3,r2,1
   281d0:	e0fff815 	stw	r3,-32(fp)
   281d4:	00c00cc4 	movi	r3,51
   281d8:	10c00005 	stb	r3,0(r2)
   281dc:	e0bff817 	ldw	r2,-32(fp)
   281e0:	10c00044 	addi	r3,r2,1
   281e4:	e0fff815 	stw	r3,-32(fp)
   281e8:	00c00104 	movi	r3,4
   281ec:	10c00005 	stb	r3,0(r2)
   281f0:	e0bff817 	ldw	r2,-32(fp)
   281f4:	108000c4 	addi	r2,r2,3
   281f8:	e0fffd04 	addi	r3,fp,-12
   281fc:	18c00003 	ldbu	r3,0(r3)
   28200:	10c00005 	stb	r3,0(r2)
   28204:	e0bff817 	ldw	r2,-32(fp)
   28208:	10c00084 	addi	r3,r2,2
   2820c:	e0bffd04 	addi	r2,fp,-12
   28210:	10800044 	addi	r2,r2,1
   28214:	10800003 	ldbu	r2,0(r2)
   28218:	18800005 	stb	r2,0(r3)
   2821c:	e0bff817 	ldw	r2,-32(fp)
   28220:	10c00044 	addi	r3,r2,1
   28224:	e0bffd04 	addi	r2,fp,-12
   28228:	10800084 	addi	r2,r2,2
   2822c:	10800003 	ldbu	r2,0(r2)
   28230:	18800005 	stb	r2,0(r3)
   28234:	e0bffd04 	addi	r2,fp,-12
   28238:	108000c4 	addi	r2,r2,3
   2823c:	10800003 	ldbu	r2,0(r2)
   28240:	1007883a 	mov	r3,r2
   28244:	e0bff817 	ldw	r2,-32(fp)
   28248:	10c00005 	stb	r3,0(r2)
   2824c:	e0bff817 	ldw	r2,-32(fp)
   28250:	10800104 	addi	r2,r2,4
   28254:	e0bff815 	stw	r2,-32(fp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
   28258:	008001b4 	movhi	r2,6
   2825c:	10b79b04 	addi	r2,r2,-8596
   28260:	e0ffff17 	ldw	r3,-4(fp)
   28264:	18c7883a 	add	r3,r3,r3
   28268:	18c7883a 	add	r3,r3,r3
   2826c:	10c5883a 	add	r2,r2,r3
   28270:	10800017 	ldw	r2,0(r2)
   28274:	10800a17 	ldw	r2,40(r2)
   28278:	10004e26 	beq	r2,zero,283b4 <dhc_discover+0x318>
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
   2827c:	008001b4 	movhi	r2,6
   28280:	10b79b04 	addi	r2,r2,-8596
   28284:	e0ffff17 	ldw	r3,-4(fp)
   28288:	18c7883a 	add	r3,r3,r3
   2828c:	18c7883a 	add	r3,r3,r3
   28290:	10c5883a 	add	r2,r2,r3
   28294:	10800017 	ldw	r2,0(r2)
   28298:	10800a17 	ldw	r2,40(r2)
   2829c:	1008d63a 	srli	r4,r2,24
   282a0:	008001b4 	movhi	r2,6
   282a4:	10b79b04 	addi	r2,r2,-8596
   282a8:	e0ffff17 	ldw	r3,-4(fp)
   282ac:	18c7883a 	add	r3,r3,r3
   282b0:	18c7883a 	add	r3,r3,r3
   282b4:	10c5883a 	add	r2,r2,r3
   282b8:	10800017 	ldw	r2,0(r2)
   282bc:	10800a17 	ldw	r2,40(r2)
   282c0:	1004d23a 	srli	r2,r2,8
   282c4:	10bfc00c 	andi	r2,r2,65280
   282c8:	2088b03a 	or	r4,r4,r2
   282cc:	008001b4 	movhi	r2,6
   282d0:	10b79b04 	addi	r2,r2,-8596
   282d4:	e0ffff17 	ldw	r3,-4(fp)
   282d8:	18c7883a 	add	r3,r3,r3
   282dc:	18c7883a 	add	r3,r3,r3
   282e0:	10c5883a 	add	r2,r2,r3
   282e4:	10800017 	ldw	r2,0(r2)
   282e8:	10800a17 	ldw	r2,40(r2)
   282ec:	10bfc00c 	andi	r2,r2,65280
   282f0:	1004923a 	slli	r2,r2,8
   282f4:	2088b03a 	or	r4,r4,r2
   282f8:	008001b4 	movhi	r2,6
   282fc:	10b79b04 	addi	r2,r2,-8596
   28300:	e0ffff17 	ldw	r3,-4(fp)
   28304:	18c7883a 	add	r3,r3,r3
   28308:	18c7883a 	add	r3,r3,r3
   2830c:	10c5883a 	add	r2,r2,r3
   28310:	10800017 	ldw	r2,0(r2)
   28314:	10800a17 	ldw	r2,40(r2)
   28318:	1004963a 	slli	r2,r2,24
   2831c:	2084b03a 	or	r2,r4,r2
   28320:	e0bffe15 	stw	r2,-8(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
   28324:	e0bff817 	ldw	r2,-32(fp)
   28328:	10c00044 	addi	r3,r2,1
   2832c:	e0fff815 	stw	r3,-32(fp)
   28330:	00c00c84 	movi	r3,50
   28334:	10c00005 	stb	r3,0(r2)
   28338:	e0bff817 	ldw	r2,-32(fp)
   2833c:	10c00044 	addi	r3,r2,1
   28340:	e0fff815 	stw	r3,-32(fp)
   28344:	00c00104 	movi	r3,4
   28348:	10c00005 	stb	r3,0(r2)
   2834c:	e0bff817 	ldw	r2,-32(fp)
   28350:	108000c4 	addi	r2,r2,3
   28354:	e0fffe04 	addi	r3,fp,-8
   28358:	18c00003 	ldbu	r3,0(r3)
   2835c:	10c00005 	stb	r3,0(r2)
   28360:	e0bff817 	ldw	r2,-32(fp)
   28364:	10c00084 	addi	r3,r2,2
   28368:	e0bffe04 	addi	r2,fp,-8
   2836c:	10800044 	addi	r2,r2,1
   28370:	10800003 	ldbu	r2,0(r2)
   28374:	18800005 	stb	r2,0(r3)
   28378:	e0bff817 	ldw	r2,-32(fp)
   2837c:	10c00044 	addi	r3,r2,1
   28380:	e0bffe04 	addi	r2,fp,-8
   28384:	10800084 	addi	r2,r2,2
   28388:	10800003 	ldbu	r2,0(r2)
   2838c:	18800005 	stb	r2,0(r3)
   28390:	e0bffe04 	addi	r2,fp,-8
   28394:	108000c4 	addi	r2,r2,3
   28398:	10800003 	ldbu	r2,0(r2)
   2839c:	1007883a 	mov	r3,r2
   283a0:	e0bff817 	ldw	r2,-32(fp)
   283a4:	10c00005 	stb	r3,0(r2)
   283a8:	e0bff817 	ldw	r2,-32(fp)
   283ac:	10800104 	addi	r2,r2,4
   283b0:	e0bff815 	stw	r2,-32(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
   283b4:	d0a03217 	ldw	r2,-32568(gp)
   283b8:	00801a0e 	bge	zero,r2,28424 <dhc_discover+0x388>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
   283bc:	e0bff817 	ldw	r2,-32(fp)
   283c0:	10c00044 	addi	r3,r2,1
   283c4:	e0fff815 	stw	r3,-32(fp)
   283c8:	00c00dc4 	movi	r3,55
   283cc:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
   283d0:	e0bff817 	ldw	r2,-32(fp)
   283d4:	10c00044 	addi	r3,r2,1
   283d8:	e0fff815 	stw	r3,-32(fp)
   283dc:	d0e03217 	ldw	r3,-32568(gp)
   283e0:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
   283e4:	e03ff915 	stw	zero,-28(fp)
   283e8:	00000b06 	br	28418 <dhc_discover+0x37c>
         *opts++ = reqlist[i];
   283ec:	e0bff817 	ldw	r2,-32(fp)
   283f0:	10c00044 	addi	r3,r2,1
   283f4:	e0fff815 	stw	r3,-32(fp)
   283f8:	e13ff917 	ldw	r4,-28(fp)
   283fc:	d0e03104 	addi	r3,gp,-32572
   28400:	20c7883a 	add	r3,r4,r3
   28404:	18c00003 	ldbu	r3,0(r3)
   28408:	10c00005 	stb	r3,0(r2)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
   2840c:	e0bff917 	ldw	r2,-28(fp)
   28410:	10800044 	addi	r2,r2,1
   28414:	e0bff915 	stw	r2,-28(fp)
   28418:	d0a03217 	ldw	r2,-32568(gp)
   2841c:	e0fff917 	ldw	r3,-28(fp)
   28420:	18bff216 	blt	r3,r2,283ec <__alt_mem_descriptor_memory+0xdefe83ec>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
   28424:	e0bff817 	ldw	r2,-32(fp)
   28428:	10c00044 	addi	r3,r2,1
   2842c:	e0fff815 	stw	r3,-32(fp)
   28430:	00ffffc4 	movi	r3,-1
   28434:	10c00005 	stb	r3,0(r2)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
   28438:	00800174 	movhi	r2,5
   2843c:	108fbe04 	addi	r2,r2,16120
   28440:	10c00017 	ldw	r3,0(r2)
   28444:	008001b4 	movhi	r2,6
   28448:	10b7c104 	addi	r2,r2,-8444
   2844c:	e13fff17 	ldw	r4,-4(fp)
   28450:	21000f24 	muli	r4,r4,60
   28454:	1105883a 	add	r2,r2,r4
   28458:	10800404 	addi	r2,r2,16
   2845c:	10c00015 	stw	r3,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
   28460:	e0bffa17 	ldw	r2,-24(fp)
   28464:	00ffffc4 	movi	r3,-1
   28468:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
   2846c:	008001b4 	movhi	r2,6
   28470:	10b79b04 	addi	r2,r2,-8596
   28474:	e0ffff17 	ldw	r3,-4(fp)
   28478:	18c7883a 	add	r3,r3,r3
   2847c:	18c7883a 	add	r3,r3,r3
   28480:	10c5883a 	add	r2,r2,r3
   28484:	10c00017 	ldw	r3,0(r2)
   28488:	e0bffa17 	ldw	r2,-24(fp)
   2848c:	10c00615 	stw	r3,24(r2)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
   28490:	008001b4 	movhi	r2,6
   28494:	10b7c104 	addi	r2,r2,-8444
   28498:	e0ffff17 	ldw	r3,-4(fp)
   2849c:	18c00f24 	muli	r3,r3,60
   284a0:	10c5883a 	add	r2,r2,r3
   284a4:	10800017 	ldw	r2,0(r2)
   284a8:	10800120 	cmpeqi	r2,r2,4
   284ac:	1000031e 	bne	r2,zero,284bc <dhc_discover+0x420>
      dhc_set_state(iface, DHCS_SELECTING);
   284b0:	e13fff17 	ldw	r4,-4(fp)
   284b4:	01400104 	movi	r5,4
   284b8:	002a1440 	call	2a144 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   284bc:	010010c4 	movi	r4,67
   284c0:	01401104 	movi	r5,68
   284c4:	e1bffa17 	ldw	r6,-24(fp)
   284c8:	0042f240 	call	42f24 <udp_send>
   dsc_discovers++;
   284cc:	d0a87d17 	ldw	r2,-24076(gp)
   284d0:	10800044 	addi	r2,r2,1
   284d4:	d0a87d15 	stw	r2,-24076(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
   284d8:	00800174 	movhi	r2,5
   284dc:	108fbe04 	addi	r2,r2,16120
   284e0:	10c00017 	ldw	r3,0(r2)
   284e4:	008001b4 	movhi	r2,6
   284e8:	10b7c104 	addi	r2,r2,-8444
   284ec:	e13fff17 	ldw	r4,-4(fp)
   284f0:	21000f24 	muli	r4,r4,60
   284f4:	1105883a 	add	r2,r2,r4
   284f8:	10800404 	addi	r2,r2,16
   284fc:	10c00015 	stw	r3,0(r2)
   dhc_states[iface].tries++;
   28500:	008001b4 	movhi	r2,6
   28504:	10b7c104 	addi	r2,r2,-8444
   28508:	e0ffff17 	ldw	r3,-4(fp)
   2850c:	18c00f24 	muli	r3,r3,60
   28510:	10c5883a 	add	r2,r2,r3
   28514:	10800104 	addi	r2,r2,4
   28518:	10800017 	ldw	r2,0(r2)
   2851c:	10c00044 	addi	r3,r2,1
   28520:	008001b4 	movhi	r2,6
   28524:	10b7c104 	addi	r2,r2,-8444
   28528:	e13fff17 	ldw	r4,-4(fp)
   2852c:	21000f24 	muli	r4,r4,60
   28530:	1105883a 	add	r2,r2,r4
   28534:	10800104 	addi	r2,r2,4
   28538:	10c00015 	stw	r3,0(r2)

   return 0;
   2853c:	0005883a 	mov	r2,zero
}
   28540:	e037883a 	mov	sp,fp
   28544:	dfc00117 	ldw	ra,4(sp)
   28548:	df000017 	ldw	fp,0(sp)
   2854c:	dec00204 	addi	sp,sp,8
   28550:	f800283a 	ret

00028554 <dhc_rx_offer>:
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
   28554:	defff904 	addi	sp,sp,-28
   28558:	dfc00615 	stw	ra,24(sp)
   2855c:	df000515 	stw	fp,20(sp)
   28560:	df000504 	addi	fp,sp,20
   28564:	e13ffd15 	stw	r4,-12(fp)
   28568:	e17ffe15 	stw	r5,-8(fp)
   2856c:	e1bfff15 	stw	r6,-4(fp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
   28570:	008001b4 	movhi	r2,6
   28574:	10b7c104 	addi	r2,r2,-8444
   28578:	e0fffd17 	ldw	r3,-12(fp)
   2857c:	18c00f24 	muli	r3,r3,60
   28580:	10c5883a 	add	r2,r2,r3
   28584:	10800204 	addi	r2,r2,8
   28588:	10c00017 	ldw	r3,0(r2)
   2858c:	e0bffe17 	ldw	r2,-8(fp)
   28590:	10800117 	ldw	r2,4(r2)
   28594:	18800226 	beq	r3,r2,285a0 <dhc_rx_offer+0x4c>
      return ENP_NOT_MINE;
   28598:	00800084 	movi	r2,2
   2859c:	00002106 	br	28624 <dhc_rx_offer+0xd0>

   opts = &bp->options[4];    /* examine options after cookie */
   285a0:	e0bffe17 	ldw	r2,-8(fp)
   285a4:	10803c04 	addi	r2,r2,240
   285a8:	e0bffb15 	stw	r2,-20(fp)
   e = dhc_extract_opts(iface,opts);
   285ac:	e13ffd17 	ldw	r4,-12(fp)
   285b0:	e17ffb17 	ldw	r5,-20(fp)
   285b4:	00295e80 	call	295e8 <dhc_extract_opts>
   285b8:	e0bffc15 	stw	r2,-16(fp)
   if (e)   /* parse error? */
   285bc:	e0bffc17 	ldw	r2,-16(fp)
   285c0:	10000326 	beq	r2,zero,285d0 <dhc_rx_offer+0x7c>
   {
      dtrap();
   285c4:	002b0f40 	call	2b0f4 <dtrap>
      return e;
   285c8:	e0bffc17 	ldw	r2,-16(fp)
   285cc:	00001506 	br	28624 <dhc_rx_offer+0xd0>
   }
   if (!bp->yiaddr)  /* require an IP address */
   285d0:	e0bffe17 	ldw	r2,-8(fp)
   285d4:	10800417 	ldw	r2,16(r2)
   285d8:	1000061e 	bne	r2,zero,285f4 <dhc_rx_offer+0xa0>
   {
      dhc_decline(iface,bp, bplen);
   285dc:	e13ffd17 	ldw	r4,-12(fp)
   285e0:	e17ffe17 	ldw	r5,-8(fp)
   285e4:	e1bfff17 	ldw	r6,-4(fp)
   285e8:	00294340 	call	29434 <dhc_decline>
      return ENP_NOT_MINE;
   285ec:	00800084 	movi	r2,2
   285f0:	00000c06 	br	28624 <dhc_rx_offer+0xd0>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
   285f4:	e0bffe17 	ldw	r2,-8(fp)
   285f8:	10c00417 	ldw	r3,16(r2)
   285fc:	008001b4 	movhi	r2,6
   28600:	10b7c104 	addi	r2,r2,-8444
   28604:	e13ffd17 	ldw	r4,-12(fp)
   28608:	21000f24 	muli	r4,r4,60
   2860c:	1105883a 	add	r2,r2,r4
   28610:	10800904 	addi	r2,r2,36
   28614:	10c00015 	stw	r3,0(r2)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
   28618:	e13ffd17 	ldw	r4,-12(fp)
   2861c:	000b883a 	mov	r5,zero
   28620:	00286380 	call	28638 <dhc_request>
}
   28624:	e037883a 	mov	sp,fp
   28628:	dfc00117 	ldw	ra,4(sp)
   2862c:	df000017 	ldw	fp,0(sp)
   28630:	dec00204 	addi	sp,sp,8
   28634:	f800283a 	ret

00028638 <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
   28638:	defff404 	addi	sp,sp,-48
   2863c:	dfc00b15 	stw	ra,44(sp)
   28640:	df000a15 	stw	fp,40(sp)
   28644:	df000a04 	addi	fp,sp,40
   28648:	e13ffe15 	stw	r4,-8(fp)
   2864c:	e17fff15 	stw	r5,-4(fp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
   28650:	01008904 	movi	r4,548
   28654:	000b883a 	mov	r5,zero
   28658:	004337c0 	call	4337c <udp_alloc>
   2865c:	e0bff815 	stw	r2,-32(fp)
   if (!pkt) 
   28660:	e0bff817 	ldw	r2,-32(fp)
   28664:	1000021e 	bne	r2,zero,28670 <dhc_request+0x38>
      return ENP_NOMEM;
   28668:	00bffb04 	movi	r2,-20
   2866c:	00029406 	br	290c0 <dhc_request+0xa88>
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
   28670:	e0bff817 	ldw	r2,-32(fp)
   28674:	00c03b04 	movi	r3,236
   28678:	10c00415 	stw	r3,16(r2)

   if ( xid_flag == TRUE )
   2867c:	e0bfff17 	ldw	r2,-4(fp)
   28680:	10800058 	cmpnei	r2,r2,1
   28684:	1000121e 	bne	r2,zero,286d0 <dhc_request+0x98>
   {
      dhc_states[iface].xid  = xids++;
   28688:	d0a03017 	ldw	r2,-32576(gp)
   2868c:	10c00044 	addi	r3,r2,1
   28690:	d0e03015 	stw	r3,-32576(gp)
   28694:	1009883a 	mov	r4,r2
   28698:	008001b4 	movhi	r2,6
   2869c:	10b7c104 	addi	r2,r2,-8444
   286a0:	e0fffe17 	ldw	r3,-8(fp)
   286a4:	18c00f24 	muli	r3,r3,60
   286a8:	10c5883a 	add	r2,r2,r3
   286ac:	10800204 	addi	r2,r2,8
   286b0:	11000015 	stw	r4,0(r2)
      dhc_states[iface].secs = 0;
   286b4:	008001b4 	movhi	r2,6
   286b8:	10b7c104 	addi	r2,r2,-8444
   286bc:	e0fffe17 	ldw	r3,-8(fp)
   286c0:	18c00f24 	muli	r3,r3,60
   286c4:	10c5883a 	add	r2,r2,r3
   286c8:	10800304 	addi	r2,r2,12
   286cc:	1000000d 	sth	zero,0(r2)
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
   286d0:	e0bff817 	ldw	r2,-32(fp)
   286d4:	10800317 	ldw	r2,12(r2)
   286d8:	e0bff915 	stw	r2,-28(fp)
   e     = dhc_buildheader(iface,outbp);
   286dc:	e13ffe17 	ldw	r4,-8(fp)
   286e0:	e17ff917 	ldw	r5,-28(fp)
   286e4:	0027eb80 	call	27eb8 <dhc_buildheader>
   286e8:	e0bffa15 	stw	r2,-24(fp)
   if (e)
   286ec:	e0bffa17 	ldw	r2,-24(fp)
   286f0:	10000226 	beq	r2,zero,286fc <dhc_request+0xc4>
      return e;
   286f4:	e0bffa17 	ldw	r2,-24(fp)
   286f8:	00027106 	br	290c0 <dhc_request+0xa88>

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   286fc:	e0bff917 	ldw	r2,-28(fp)
   28700:	10c03b04 	addi	r3,r2,236
   28704:	0098d534 	movhi	r2,25428
   28708:	10a098c4 	addi	r2,r2,-32157
   2870c:	18800015 	stw	r2,0(r3)
   opts    = &outbp->options[4];    /* encode options after cookie */
   28710:	e0bff917 	ldw	r2,-28(fp)
   28714:	10803c04 	addi	r2,r2,240
   28718:	e0bff615 	stw	r2,-40(fp)
   *opts++ = DHOP_TYPE;
   2871c:	e0bff617 	ldw	r2,-40(fp)
   28720:	10c00044 	addi	r3,r2,1
   28724:	e0fff615 	stw	r3,-40(fp)
   28728:	00c00d44 	movi	r3,53
   2872c:	10c00005 	stb	r3,0(r2)
   *opts++ = 1;   /* length of option field */
   28730:	e0bff617 	ldw	r2,-40(fp)
   28734:	10c00044 	addi	r3,r2,1
   28738:	e0fff615 	stw	r3,-40(fp)
   2873c:	00c00044 	movi	r3,1
   28740:	10c00005 	stb	r3,0(r2)
   *opts++ = DHCP_REQUEST;
   28744:	e0bff617 	ldw	r2,-40(fp)
   28748:	10c00044 	addi	r3,r2,1
   2874c:	e0fff615 	stw	r3,-40(fp)
   28750:	00c000c4 	movi	r3,3
   28754:	10c00005 	stb	r3,0(r2)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
   28758:	008001b4 	movhi	r2,6
   2875c:	10b7c104 	addi	r2,r2,-8444
   28760:	e0fffe17 	ldw	r3,-8(fp)
   28764:	18c00f24 	muli	r3,r3,60
   28768:	10c5883a 	add	r2,r2,r3
   2876c:	10800017 	ldw	r2,0(r2)
   28770:	10800120 	cmpeqi	r2,r2,4
   28774:	1000181e 	bne	r2,zero,287d8 <dhc_request+0x1a0>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
   28778:	008001b4 	movhi	r2,6
   2877c:	10b7c104 	addi	r2,r2,-8444
   28780:	e0fffe17 	ldw	r3,-8(fp)
   28784:	18c00f24 	muli	r3,r3,60
   28788:	10c5883a 	add	r2,r2,r3
   2878c:	10800017 	ldw	r2,0(r2)
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
   28790:	10800160 	cmpeqi	r2,r2,5
   28794:	1000101e 	bne	r2,zero,287d8 <dhc_request+0x1a0>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
   28798:	008001b4 	movhi	r2,6
   2879c:	10b7c104 	addi	r2,r2,-8444
   287a0:	e0fffe17 	ldw	r3,-8(fp)
   287a4:	18c00f24 	muli	r3,r3,60
   287a8:	10c5883a 	add	r2,r2,r3
   287ac:	10800017 	ldw	r2,0(r2)
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
       (dhc_states[iface].state == DHCS_REQUESTING) ||
   287b0:	108000e0 	cmpeqi	r2,r2,3
   287b4:	1000081e 	bne	r2,zero,287d8 <dhc_request+0x1a0>
       (dhc_states[iface].state == DHCS_REBOOTING) ||
       (dhc_states[iface].state == DHCS_INITREBOOT))
   287b8:	008001b4 	movhi	r2,6
   287bc:	10b7c104 	addi	r2,r2,-8444
   287c0:	e0fffe17 	ldw	r3,-8(fp)
   287c4:	18c00f24 	muli	r3,r3,60
   287c8:	10c5883a 	add	r2,r2,r3
   287cc:	10800017 	ldw	r2,0(r2)
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
   287d0:	10800098 	cmpnei	r2,r2,2
   287d4:	10004a1e 	bne	r2,zero,28900 <dhc_request+0x2c8>
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
   287d8:	008001b4 	movhi	r2,6
   287dc:	10b7c104 	addi	r2,r2,-8444
   287e0:	e0fffe17 	ldw	r3,-8(fp)
   287e4:	18c00f24 	muli	r3,r3,60
   287e8:	10c5883a 	add	r2,r2,r3
   287ec:	10800904 	addi	r2,r2,36
   287f0:	10800017 	ldw	r2,0(r2)
   287f4:	1006d63a 	srli	r3,r2,24
   287f8:	008001b4 	movhi	r2,6
   287fc:	10b7c104 	addi	r2,r2,-8444
   28800:	e13ffe17 	ldw	r4,-8(fp)
   28804:	21000f24 	muli	r4,r4,60
   28808:	1105883a 	add	r2,r2,r4
   2880c:	10800904 	addi	r2,r2,36
   28810:	10800017 	ldw	r2,0(r2)
   28814:	1004d23a 	srli	r2,r2,8
   28818:	10bfc00c 	andi	r2,r2,65280
   2881c:	1886b03a 	or	r3,r3,r2
   28820:	008001b4 	movhi	r2,6
   28824:	10b7c104 	addi	r2,r2,-8444
   28828:	e13ffe17 	ldw	r4,-8(fp)
   2882c:	21000f24 	muli	r4,r4,60
   28830:	1105883a 	add	r2,r2,r4
   28834:	10800904 	addi	r2,r2,36
   28838:	10800017 	ldw	r2,0(r2)
   2883c:	10bfc00c 	andi	r2,r2,65280
   28840:	1004923a 	slli	r2,r2,8
   28844:	1886b03a 	or	r3,r3,r2
   28848:	008001b4 	movhi	r2,6
   2884c:	10b7c104 	addi	r2,r2,-8444
   28850:	e13ffe17 	ldw	r4,-8(fp)
   28854:	21000f24 	muli	r4,r4,60
   28858:	1105883a 	add	r2,r2,r4
   2885c:	10800904 	addi	r2,r2,36
   28860:	10800017 	ldw	r2,0(r2)
   28864:	1004963a 	slli	r2,r2,24
   28868:	1884b03a 	or	r2,r3,r2
   2886c:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
   28870:	e0bff617 	ldw	r2,-40(fp)
   28874:	10c00044 	addi	r3,r2,1
   28878:	e0fff615 	stw	r3,-40(fp)
   2887c:	00c00c84 	movi	r3,50
   28880:	10c00005 	stb	r3,0(r2)
   28884:	e0bff617 	ldw	r2,-40(fp)
   28888:	10c00044 	addi	r3,r2,1
   2888c:	e0fff615 	stw	r3,-40(fp)
   28890:	00c00104 	movi	r3,4
   28894:	10c00005 	stb	r3,0(r2)
   28898:	e0bff617 	ldw	r2,-40(fp)
   2889c:	108000c4 	addi	r2,r2,3
   288a0:	e0fffd04 	addi	r3,fp,-12
   288a4:	18c00003 	ldbu	r3,0(r3)
   288a8:	10c00005 	stb	r3,0(r2)
   288ac:	e0bff617 	ldw	r2,-40(fp)
   288b0:	10c00084 	addi	r3,r2,2
   288b4:	e0bffd04 	addi	r2,fp,-12
   288b8:	10800044 	addi	r2,r2,1
   288bc:	10800003 	ldbu	r2,0(r2)
   288c0:	18800005 	stb	r2,0(r3)
   288c4:	e0bff617 	ldw	r2,-40(fp)
   288c8:	10c00044 	addi	r3,r2,1
   288cc:	e0bffd04 	addi	r2,fp,-12
   288d0:	10800084 	addi	r2,r2,2
   288d4:	10800003 	ldbu	r2,0(r2)
   288d8:	18800005 	stb	r2,0(r3)
   288dc:	e0bffd04 	addi	r2,fp,-12
   288e0:	108000c4 	addi	r2,r2,3
   288e4:	10800003 	ldbu	r2,0(r2)
   288e8:	1007883a 	mov	r3,r2
   288ec:	e0bff617 	ldw	r2,-40(fp)
   288f0:	10c00005 	stb	r3,0(r2)
   288f4:	e0bff617 	ldw	r2,-40(fp)
   288f8:	10800104 	addi	r2,r2,4
   288fc:	e0bff615 	stw	r2,-40(fp)
   }
   if (dhc_states[iface].snmask)
   28900:	008001b4 	movhi	r2,6
   28904:	10b7c104 	addi	r2,r2,-8444
   28908:	e0fffe17 	ldw	r3,-8(fp)
   2890c:	18c00f24 	muli	r3,r3,60
   28910:	10c5883a 	add	r2,r2,r3
   28914:	10800a04 	addi	r2,r2,40
   28918:	10800017 	ldw	r2,0(r2)
   2891c:	10004a26 	beq	r2,zero,28a48 <dhc_request+0x410>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
   28920:	008001b4 	movhi	r2,6
   28924:	10b7c104 	addi	r2,r2,-8444
   28928:	e0fffe17 	ldw	r3,-8(fp)
   2892c:	18c00f24 	muli	r3,r3,60
   28930:	10c5883a 	add	r2,r2,r3
   28934:	10800a04 	addi	r2,r2,40
   28938:	10800017 	ldw	r2,0(r2)
   2893c:	1006d63a 	srli	r3,r2,24
   28940:	008001b4 	movhi	r2,6
   28944:	10b7c104 	addi	r2,r2,-8444
   28948:	e13ffe17 	ldw	r4,-8(fp)
   2894c:	21000f24 	muli	r4,r4,60
   28950:	1105883a 	add	r2,r2,r4
   28954:	10800a04 	addi	r2,r2,40
   28958:	10800017 	ldw	r2,0(r2)
   2895c:	1004d23a 	srli	r2,r2,8
   28960:	10bfc00c 	andi	r2,r2,65280
   28964:	1886b03a 	or	r3,r3,r2
   28968:	008001b4 	movhi	r2,6
   2896c:	10b7c104 	addi	r2,r2,-8444
   28970:	e13ffe17 	ldw	r4,-8(fp)
   28974:	21000f24 	muli	r4,r4,60
   28978:	1105883a 	add	r2,r2,r4
   2897c:	10800a04 	addi	r2,r2,40
   28980:	10800017 	ldw	r2,0(r2)
   28984:	10bfc00c 	andi	r2,r2,65280
   28988:	1004923a 	slli	r2,r2,8
   2898c:	1886b03a 	or	r3,r3,r2
   28990:	008001b4 	movhi	r2,6
   28994:	10b7c104 	addi	r2,r2,-8444
   28998:	e13ffe17 	ldw	r4,-8(fp)
   2899c:	21000f24 	muli	r4,r4,60
   289a0:	1105883a 	add	r2,r2,r4
   289a4:	10800a04 	addi	r2,r2,40
   289a8:	10800017 	ldw	r2,0(r2)
   289ac:	1004963a 	slli	r2,r2,24
   289b0:	1884b03a 	or	r2,r3,r2
   289b4:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
   289b8:	e0bff617 	ldw	r2,-40(fp)
   289bc:	10c00044 	addi	r3,r2,1
   289c0:	e0fff615 	stw	r3,-40(fp)
   289c4:	00c00044 	movi	r3,1
   289c8:	10c00005 	stb	r3,0(r2)
   289cc:	e0bff617 	ldw	r2,-40(fp)
   289d0:	10c00044 	addi	r3,r2,1
   289d4:	e0fff615 	stw	r3,-40(fp)
   289d8:	00c00104 	movi	r3,4
   289dc:	10c00005 	stb	r3,0(r2)
   289e0:	e0bff617 	ldw	r2,-40(fp)
   289e4:	108000c4 	addi	r2,r2,3
   289e8:	e0fffd04 	addi	r3,fp,-12
   289ec:	18c00003 	ldbu	r3,0(r3)
   289f0:	10c00005 	stb	r3,0(r2)
   289f4:	e0bff617 	ldw	r2,-40(fp)
   289f8:	10c00084 	addi	r3,r2,2
   289fc:	e0bffd04 	addi	r2,fp,-12
   28a00:	10800044 	addi	r2,r2,1
   28a04:	10800003 	ldbu	r2,0(r2)
   28a08:	18800005 	stb	r2,0(r3)
   28a0c:	e0bff617 	ldw	r2,-40(fp)
   28a10:	10c00044 	addi	r3,r2,1
   28a14:	e0bffd04 	addi	r2,fp,-12
   28a18:	10800084 	addi	r2,r2,2
   28a1c:	10800003 	ldbu	r2,0(r2)
   28a20:	18800005 	stb	r2,0(r3)
   28a24:	e0bffd04 	addi	r2,fp,-12
   28a28:	108000c4 	addi	r2,r2,3
   28a2c:	10800003 	ldbu	r2,0(r2)
   28a30:	1007883a 	mov	r3,r2
   28a34:	e0bff617 	ldw	r2,-40(fp)
   28a38:	10c00005 	stb	r3,0(r2)
   28a3c:	e0bff617 	ldw	r2,-40(fp)
   28a40:	10800104 	addi	r2,r2,4
   28a44:	e0bff615 	stw	r2,-40(fp)
   }
   if (dhc_states[iface].defgw)
   28a48:	008001b4 	movhi	r2,6
   28a4c:	10b7c104 	addi	r2,r2,-8444
   28a50:	e0fffe17 	ldw	r3,-8(fp)
   28a54:	18c00f24 	muli	r3,r3,60
   28a58:	10c5883a 	add	r2,r2,r3
   28a5c:	10800b04 	addi	r2,r2,44
   28a60:	10800017 	ldw	r2,0(r2)
   28a64:	10004a26 	beq	r2,zero,28b90 <dhc_request+0x558>
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
   28a68:	008001b4 	movhi	r2,6
   28a6c:	10b7c104 	addi	r2,r2,-8444
   28a70:	e0fffe17 	ldw	r3,-8(fp)
   28a74:	18c00f24 	muli	r3,r3,60
   28a78:	10c5883a 	add	r2,r2,r3
   28a7c:	10800b04 	addi	r2,r2,44
   28a80:	10800017 	ldw	r2,0(r2)
   28a84:	1006d63a 	srli	r3,r2,24
   28a88:	008001b4 	movhi	r2,6
   28a8c:	10b7c104 	addi	r2,r2,-8444
   28a90:	e13ffe17 	ldw	r4,-8(fp)
   28a94:	21000f24 	muli	r4,r4,60
   28a98:	1105883a 	add	r2,r2,r4
   28a9c:	10800b04 	addi	r2,r2,44
   28aa0:	10800017 	ldw	r2,0(r2)
   28aa4:	1004d23a 	srli	r2,r2,8
   28aa8:	10bfc00c 	andi	r2,r2,65280
   28aac:	1886b03a 	or	r3,r3,r2
   28ab0:	008001b4 	movhi	r2,6
   28ab4:	10b7c104 	addi	r2,r2,-8444
   28ab8:	e13ffe17 	ldw	r4,-8(fp)
   28abc:	21000f24 	muli	r4,r4,60
   28ac0:	1105883a 	add	r2,r2,r4
   28ac4:	10800b04 	addi	r2,r2,44
   28ac8:	10800017 	ldw	r2,0(r2)
   28acc:	10bfc00c 	andi	r2,r2,65280
   28ad0:	1004923a 	slli	r2,r2,8
   28ad4:	1886b03a 	or	r3,r3,r2
   28ad8:	008001b4 	movhi	r2,6
   28adc:	10b7c104 	addi	r2,r2,-8444
   28ae0:	e13ffe17 	ldw	r4,-8(fp)
   28ae4:	21000f24 	muli	r4,r4,60
   28ae8:	1105883a 	add	r2,r2,r4
   28aec:	10800b04 	addi	r2,r2,44
   28af0:	10800017 	ldw	r2,0(r2)
   28af4:	1004963a 	slli	r2,r2,24
   28af8:	1884b03a 	or	r2,r3,r2
   28afc:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
   28b00:	e0bff617 	ldw	r2,-40(fp)
   28b04:	10c00044 	addi	r3,r2,1
   28b08:	e0fff615 	stw	r3,-40(fp)
   28b0c:	00c000c4 	movi	r3,3
   28b10:	10c00005 	stb	r3,0(r2)
   28b14:	e0bff617 	ldw	r2,-40(fp)
   28b18:	10c00044 	addi	r3,r2,1
   28b1c:	e0fff615 	stw	r3,-40(fp)
   28b20:	00c00104 	movi	r3,4
   28b24:	10c00005 	stb	r3,0(r2)
   28b28:	e0bff617 	ldw	r2,-40(fp)
   28b2c:	108000c4 	addi	r2,r2,3
   28b30:	e0fffd04 	addi	r3,fp,-12
   28b34:	18c00003 	ldbu	r3,0(r3)
   28b38:	10c00005 	stb	r3,0(r2)
   28b3c:	e0bff617 	ldw	r2,-40(fp)
   28b40:	10c00084 	addi	r3,r2,2
   28b44:	e0bffd04 	addi	r2,fp,-12
   28b48:	10800044 	addi	r2,r2,1
   28b4c:	10800003 	ldbu	r2,0(r2)
   28b50:	18800005 	stb	r2,0(r3)
   28b54:	e0bff617 	ldw	r2,-40(fp)
   28b58:	10c00044 	addi	r3,r2,1
   28b5c:	e0bffd04 	addi	r2,fp,-12
   28b60:	10800084 	addi	r2,r2,2
   28b64:	10800003 	ldbu	r2,0(r2)
   28b68:	18800005 	stb	r2,0(r3)
   28b6c:	e0bffd04 	addi	r2,fp,-12
   28b70:	108000c4 	addi	r2,r2,3
   28b74:	10800003 	ldbu	r2,0(r2)
   28b78:	1007883a 	mov	r3,r2
   28b7c:	e0bff617 	ldw	r2,-40(fp)
   28b80:	10c00005 	stb	r3,0(r2)
   28b84:	e0bff617 	ldw	r2,-40(fp)
   28b88:	10800104 	addi	r2,r2,4
   28b8c:	e0bff615 	stw	r2,-40(fp)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
   28b90:	008001b4 	movhi	r2,6
   28b94:	10b7c104 	addi	r2,r2,-8444
   28b98:	e0fffe17 	ldw	r3,-8(fp)
   28b9c:	18c00f24 	muli	r3,r3,60
   28ba0:	10c5883a 	add	r2,r2,r3
   28ba4:	10800504 	addi	r2,r2,20
   28ba8:	10800017 	ldw	r2,0(r2)
   28bac:	10003826 	beq	r2,zero,28c90 <dhc_request+0x658>
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
   28bb0:	e0bff617 	ldw	r2,-40(fp)
   28bb4:	10c00044 	addi	r3,r2,1
   28bb8:	e0fff615 	stw	r3,-40(fp)
   28bbc:	00c00cc4 	movi	r3,51
   28bc0:	10c00005 	stb	r3,0(r2)
   28bc4:	e0bff617 	ldw	r2,-40(fp)
   28bc8:	10c00044 	addi	r3,r2,1
   28bcc:	e0fff615 	stw	r3,-40(fp)
   28bd0:	00c00104 	movi	r3,4
   28bd4:	10c00005 	stb	r3,0(r2)
   28bd8:	e0bff617 	ldw	r2,-40(fp)
   28bdc:	10c000c4 	addi	r3,r2,3
   28be0:	e0bffe17 	ldw	r2,-8(fp)
   28be4:	10800f24 	muli	r2,r2,60
   28be8:	11000504 	addi	r4,r2,20
   28bec:	008001b4 	movhi	r2,6
   28bf0:	10b7c104 	addi	r2,r2,-8444
   28bf4:	2085883a 	add	r2,r4,r2
   28bf8:	10800003 	ldbu	r2,0(r2)
   28bfc:	18800005 	stb	r2,0(r3)
   28c00:	e0bff617 	ldw	r2,-40(fp)
   28c04:	10c00084 	addi	r3,r2,2
   28c08:	e0bffe17 	ldw	r2,-8(fp)
   28c0c:	10800f24 	muli	r2,r2,60
   28c10:	11000504 	addi	r4,r2,20
   28c14:	008001b4 	movhi	r2,6
   28c18:	10b7c104 	addi	r2,r2,-8444
   28c1c:	2085883a 	add	r2,r4,r2
   28c20:	10800044 	addi	r2,r2,1
   28c24:	10800003 	ldbu	r2,0(r2)
   28c28:	18800005 	stb	r2,0(r3)
   28c2c:	e0bff617 	ldw	r2,-40(fp)
   28c30:	10c00044 	addi	r3,r2,1
   28c34:	e0bffe17 	ldw	r2,-8(fp)
   28c38:	10800f24 	muli	r2,r2,60
   28c3c:	11000504 	addi	r4,r2,20
   28c40:	008001b4 	movhi	r2,6
   28c44:	10b7c104 	addi	r2,r2,-8444
   28c48:	2085883a 	add	r2,r4,r2
   28c4c:	10800084 	addi	r2,r2,2
   28c50:	10800003 	ldbu	r2,0(r2)
   28c54:	18800005 	stb	r2,0(r3)
   28c58:	e0bffe17 	ldw	r2,-8(fp)
   28c5c:	10800f24 	muli	r2,r2,60
   28c60:	10c00504 	addi	r3,r2,20
   28c64:	008001b4 	movhi	r2,6
   28c68:	10b7c104 	addi	r2,r2,-8444
   28c6c:	1885883a 	add	r2,r3,r2
   28c70:	108000c4 	addi	r2,r2,3
   28c74:	10800003 	ldbu	r2,0(r2)
   28c78:	1007883a 	mov	r3,r2
   28c7c:	e0bff617 	ldw	r2,-40(fp)
   28c80:	10c00005 	stb	r3,0(r2)
   28c84:	e0bff617 	ldw	r2,-40(fp)
   28c88:	10800104 	addi	r2,r2,4
   28c8c:	e0bff615 	stw	r2,-40(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
   28c90:	d0a03217 	ldw	r2,-32568(gp)
   28c94:	00801a0e 	bge	zero,r2,28d00 <dhc_request+0x6c8>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
   28c98:	e0bff617 	ldw	r2,-40(fp)
   28c9c:	10c00044 	addi	r3,r2,1
   28ca0:	e0fff615 	stw	r3,-40(fp)
   28ca4:	00c00dc4 	movi	r3,55
   28ca8:	10c00005 	stb	r3,0(r2)
      *opts++ = (u_char)reqlist_len ;
   28cac:	e0bff617 	ldw	r2,-40(fp)
   28cb0:	10c00044 	addi	r3,r2,1
   28cb4:	e0fff615 	stw	r3,-40(fp)
   28cb8:	d0e03217 	ldw	r3,-32568(gp)
   28cbc:	10c00005 	stb	r3,0(r2)

      for (i=0 ; i < reqlist_len ; i++ )
   28cc0:	e03ff715 	stw	zero,-36(fp)
   28cc4:	00000b06 	br	28cf4 <dhc_request+0x6bc>
         *opts++ = reqlist[i];
   28cc8:	e0bff617 	ldw	r2,-40(fp)
   28ccc:	10c00044 	addi	r3,r2,1
   28cd0:	e0fff615 	stw	r3,-40(fp)
   28cd4:	e13ff717 	ldw	r4,-36(fp)
   28cd8:	d0e03104 	addi	r3,gp,-32572
   28cdc:	20c7883a 	add	r3,r4,r3
   28ce0:	18c00003 	ldbu	r3,0(r3)
   28ce4:	10c00005 	stb	r3,0(r2)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
   28ce8:	e0bff717 	ldw	r2,-36(fp)
   28cec:	10800044 	addi	r2,r2,1
   28cf0:	e0bff715 	stw	r2,-36(fp)
   28cf4:	d0a03217 	ldw	r2,-32568(gp)
   28cf8:	e0fff717 	ldw	r3,-36(fp)
   28cfc:	18bff216 	blt	r3,r2,28cc8 <__alt_mem_descriptor_memory+0xdefe8cc8>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
   28d00:	008001b4 	movhi	r2,6
   28d04:	10b7c104 	addi	r2,r2,-8444
   28d08:	e0fffe17 	ldw	r3,-8(fp)
   28d0c:	18c00f24 	muli	r3,r3,60
   28d10:	10c5883a 	add	r2,r2,r3
   28d14:	10800017 	ldw	r2,0(r2)
   28d18:	108001e0 	cmpeqi	r2,r2,7
   28d1c:	1000081e 	bne	r2,zero,28d40 <dhc_request+0x708>
       || (dhc_states[iface].state == DHCS_REBINDING))
   28d20:	008001b4 	movhi	r2,6
   28d24:	10b7c104 	addi	r2,r2,-8444
   28d28:	e0fffe17 	ldw	r3,-8(fp)
   28d2c:	18c00f24 	muli	r3,r3,60
   28d30:	10c5883a 	add	r2,r2,r3
   28d34:	10800017 	ldw	r2,0(r2)
   28d38:	10800218 	cmpnei	r2,r2,8
   28d3c:	10000a1e 	bne	r2,zero,28d68 <dhc_request+0x730>
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
   28d40:	008001b4 	movhi	r2,6
   28d44:	10b79b04 	addi	r2,r2,-8596
   28d48:	e0fffe17 	ldw	r3,-8(fp)
   28d4c:	18c7883a 	add	r3,r3,r3
   28d50:	18c7883a 	add	r3,r3,r3
   28d54:	10c5883a 	add	r2,r2,r3
   28d58:	10800017 	ldw	r2,0(r2)
   28d5c:	10c00a17 	ldw	r3,40(r2)
   28d60:	e0bff917 	ldw	r2,-28(fp)
   28d64:	10c00315 	stw	r3,12(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
   28d68:	008001b4 	movhi	r2,6
   28d6c:	10b7c104 	addi	r2,r2,-8444
   28d70:	e0fffe17 	ldw	r3,-8(fp)
   28d74:	18c00f24 	muli	r3,r3,60
   28d78:	10c5883a 	add	r2,r2,r3
   28d7c:	10800017 	ldw	r2,0(r2)
   28d80:	10800120 	cmpeqi	r2,r2,4
   28d84:	1000081e 	bne	r2,zero,28da8 <dhc_request+0x770>
       (dhc_states[iface].state == DHCS_REQUESTING))
   28d88:	008001b4 	movhi	r2,6
   28d8c:	10b7c104 	addi	r2,r2,-8444
   28d90:	e0fffe17 	ldw	r3,-8(fp)
   28d94:	18c00f24 	muli	r3,r3,60
   28d98:	10c5883a 	add	r2,r2,r3
   28d9c:	10800017 	ldw	r2,0(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
   28da0:	10800158 	cmpnei	r2,r2,5
   28da4:	10004a1e 	bne	r2,zero,28ed0 <dhc_request+0x898>
       (dhc_states[iface].state == DHCS_REQUESTING))
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
   28da8:	008001b4 	movhi	r2,6
   28dac:	10b7c104 	addi	r2,r2,-8444
   28db0:	e0fffe17 	ldw	r3,-8(fp)
   28db4:	18c00f24 	muli	r3,r3,60
   28db8:	10c5883a 	add	r2,r2,r3
   28dbc:	10800d04 	addi	r2,r2,52
   28dc0:	10800017 	ldw	r2,0(r2)
   28dc4:	1006d63a 	srli	r3,r2,24
   28dc8:	008001b4 	movhi	r2,6
   28dcc:	10b7c104 	addi	r2,r2,-8444
   28dd0:	e13ffe17 	ldw	r4,-8(fp)
   28dd4:	21000f24 	muli	r4,r4,60
   28dd8:	1105883a 	add	r2,r2,r4
   28ddc:	10800d04 	addi	r2,r2,52
   28de0:	10800017 	ldw	r2,0(r2)
   28de4:	1004d23a 	srli	r2,r2,8
   28de8:	10bfc00c 	andi	r2,r2,65280
   28dec:	1886b03a 	or	r3,r3,r2
   28df0:	008001b4 	movhi	r2,6
   28df4:	10b7c104 	addi	r2,r2,-8444
   28df8:	e13ffe17 	ldw	r4,-8(fp)
   28dfc:	21000f24 	muli	r4,r4,60
   28e00:	1105883a 	add	r2,r2,r4
   28e04:	10800d04 	addi	r2,r2,52
   28e08:	10800017 	ldw	r2,0(r2)
   28e0c:	10bfc00c 	andi	r2,r2,65280
   28e10:	1004923a 	slli	r2,r2,8
   28e14:	1886b03a 	or	r3,r3,r2
   28e18:	008001b4 	movhi	r2,6
   28e1c:	10b7c104 	addi	r2,r2,-8444
   28e20:	e13ffe17 	ldw	r4,-8(fp)
   28e24:	21000f24 	muli	r4,r4,60
   28e28:	1105883a 	add	r2,r2,r4
   28e2c:	10800d04 	addi	r2,r2,52
   28e30:	10800017 	ldw	r2,0(r2)
   28e34:	1004963a 	slli	r2,r2,24
   28e38:	1884b03a 	or	r2,r3,r2
   28e3c:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
   28e40:	e0bff617 	ldw	r2,-40(fp)
   28e44:	10c00044 	addi	r3,r2,1
   28e48:	e0fff615 	stw	r3,-40(fp)
   28e4c:	00c00d84 	movi	r3,54
   28e50:	10c00005 	stb	r3,0(r2)
   28e54:	e0bff617 	ldw	r2,-40(fp)
   28e58:	10c00044 	addi	r3,r2,1
   28e5c:	e0fff615 	stw	r3,-40(fp)
   28e60:	00c00104 	movi	r3,4
   28e64:	10c00005 	stb	r3,0(r2)
   28e68:	e0bff617 	ldw	r2,-40(fp)
   28e6c:	108000c4 	addi	r2,r2,3
   28e70:	e0fffd04 	addi	r3,fp,-12
   28e74:	18c00003 	ldbu	r3,0(r3)
   28e78:	10c00005 	stb	r3,0(r2)
   28e7c:	e0bff617 	ldw	r2,-40(fp)
   28e80:	10c00084 	addi	r3,r2,2
   28e84:	e0bffd04 	addi	r2,fp,-12
   28e88:	10800044 	addi	r2,r2,1
   28e8c:	10800003 	ldbu	r2,0(r2)
   28e90:	18800005 	stb	r2,0(r3)
   28e94:	e0bff617 	ldw	r2,-40(fp)
   28e98:	10c00044 	addi	r3,r2,1
   28e9c:	e0bffd04 	addi	r2,fp,-12
   28ea0:	10800084 	addi	r2,r2,2
   28ea4:	10800003 	ldbu	r2,0(r2)
   28ea8:	18800005 	stb	r2,0(r3)
   28eac:	e0bffd04 	addi	r2,fp,-12
   28eb0:	108000c4 	addi	r2,r2,3
   28eb4:	10800003 	ldbu	r2,0(r2)
   28eb8:	1007883a 	mov	r3,r2
   28ebc:	e0bff617 	ldw	r2,-40(fp)
   28ec0:	10c00005 	stb	r3,0(r2)
   28ec4:	e0bff617 	ldw	r2,-40(fp)
   28ec8:	10800104 	addi	r2,r2,4
   28ecc:	e0bff615 	stw	r2,-40(fp)
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
   28ed0:	e0bff617 	ldw	r2,-40(fp)
   28ed4:	10c00044 	addi	r3,r2,1
   28ed8:	e0fff615 	stw	r3,-40(fp)
   28edc:	00c01444 	movi	r3,81
   28ee0:	10c00005 	stb	r3,0(r2)
   28ee4:	00800184 	movi	r2,6
   28ee8:	e0bffb15 	stw	r2,-20(fp)
   28eec:	e0bff617 	ldw	r2,-40(fp)
   28ef0:	10c00044 	addi	r3,r2,1
   28ef4:	e0fff615 	stw	r3,-40(fp)
   28ef8:	e0fffb17 	ldw	r3,-20(fp)
   28efc:	10c00005 	stb	r3,0(r2)
   28f00:	e0bffb17 	ldw	r2,-20(fp)
   28f04:	e13ff617 	ldw	r4,-40(fp)
   28f08:	01400174 	movhi	r5,5
   28f0c:	2979f504 	addi	r5,r5,-6188
   28f10:	100d883a 	mov	r6,r2
   28f14:	00499d80 	call	499d8 <strncpy>
   28f18:	e0bffb17 	ldw	r2,-20(fp)
   28f1c:	e0fff617 	ldw	r3,-40(fp)
   28f20:	1885883a 	add	r2,r3,r2
   28f24:	e0bff615 	stw	r2,-40(fp)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
   28f28:	e0bff617 	ldw	r2,-40(fp)
   28f2c:	10c00044 	addi	r3,r2,1
   28f30:	e0fff615 	stw	r3,-40(fp)
   28f34:	00c00f04 	movi	r3,60
   28f38:	10c00005 	stb	r3,0(r2)
   28f3c:	00800174 	movhi	r2,5
   28f40:	10877204 	addi	r2,r2,7624
   28f44:	10800017 	ldw	r2,0(r2)
   28f48:	1009883a 	mov	r4,r2
   28f4c:	0008d080 	call	8d08 <strlen>
   28f50:	e0bffc15 	stw	r2,-16(fp)
   28f54:	e0bff617 	ldw	r2,-40(fp)
   28f58:	10c00044 	addi	r3,r2,1
   28f5c:	e0fff615 	stw	r3,-40(fp)
   28f60:	e0fffc17 	ldw	r3,-16(fp)
   28f64:	10c00005 	stb	r3,0(r2)
   28f68:	00800174 	movhi	r2,5
   28f6c:	10877204 	addi	r2,r2,7624
   28f70:	10c00017 	ldw	r3,0(r2)
   28f74:	e0bffc17 	ldw	r2,-16(fp)
   28f78:	e13ff617 	ldw	r4,-40(fp)
   28f7c:	180b883a 	mov	r5,r3
   28f80:	100d883a 	mov	r6,r2
   28f84:	00499d80 	call	499d8 <strncpy>
   28f88:	e0bffc17 	ldw	r2,-16(fp)
   28f8c:	e0fff617 	ldw	r3,-40(fp)
   28f90:	1885883a 	add	r2,r3,r2
   28f94:	e0bff615 	stw	r2,-40(fp)

   *opts++ = DHOP_END;  /* Mark the end of options */
   28f98:	e0bff617 	ldw	r2,-40(fp)
   28f9c:	10c00044 	addi	r3,r2,1
   28fa0:	e0fff615 	stw	r3,-40(fp)
   28fa4:	00ffffc4 	movi	r3,-1
   28fa8:	10c00005 	stb	r3,0(r2)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
   28fac:	008001b4 	movhi	r2,6
   28fb0:	10b7c104 	addi	r2,r2,-8444
   28fb4:	e0fffe17 	ldw	r3,-8(fp)
   28fb8:	18c00f24 	muli	r3,r3,60
   28fbc:	10c5883a 	add	r2,r2,r3
   28fc0:	10800017 	ldw	r2,0(r2)
   28fc4:	108001d8 	cmpnei	r2,r2,7
   28fc8:	10000a1e 	bne	r2,zero,28ff4 <dhc_request+0x9bc>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
   28fcc:	008001b4 	movhi	r2,6
   28fd0:	10b7c104 	addi	r2,r2,-8444
   28fd4:	e0fffe17 	ldw	r3,-8(fp)
   28fd8:	18c00f24 	muli	r3,r3,60
   28fdc:	10c5883a 	add	r2,r2,r3
   28fe0:	10800d04 	addi	r2,r2,52
   28fe4:	10c00017 	ldw	r3,0(r2)
   28fe8:	e0bff817 	ldw	r2,-32(fp)
   28fec:	10c00715 	stw	r3,28(r2)
   28ff0:	00000306 	br	29000 <dhc_request+0x9c8>
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
   28ff4:	e0bff817 	ldw	r2,-32(fp)
   28ff8:	00ffffc4 	movi	r3,-1
   28ffc:	10c00715 	stw	r3,28(r2)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
   29000:	008001b4 	movhi	r2,6
   29004:	10b79b04 	addi	r2,r2,-8596
   29008:	e0fffe17 	ldw	r3,-8(fp)
   2900c:	18c7883a 	add	r3,r3,r3
   29010:	18c7883a 	add	r3,r3,r3
   29014:	10c5883a 	add	r2,r2,r3
   29018:	10c00017 	ldw	r3,0(r2)
   2901c:	e0bff817 	ldw	r2,-32(fp)
   29020:	10c00615 	stw	r3,24(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
   29024:	e0fff617 	ldw	r3,-40(fp)
   29028:	e0bff917 	ldw	r2,-28(fp)
   2902c:	1885c83a 	sub	r2,r3,r2
   29030:	1007883a 	mov	r3,r2
   29034:	e0bff817 	ldw	r2,-32(fp)
   29038:	10c00415 	stw	r3,16(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   2903c:	010010c4 	movi	r4,67
   29040:	01401104 	movi	r5,68
   29044:	e1bff817 	ldw	r6,-32(fp)
   29048:	0042f240 	call	42f24 <udp_send>
   dsc_requests++;
   2904c:	d0a87f17 	ldw	r2,-24068(gp)
   29050:	10800044 	addi	r2,r2,1
   29054:	d0a87f15 	stw	r2,-24068(gp)

   dhc_states[iface].last_tick = cticks;
   29058:	00800174 	movhi	r2,5
   2905c:	108fbe04 	addi	r2,r2,16120
   29060:	10c00017 	ldw	r3,0(r2)
   29064:	008001b4 	movhi	r2,6
   29068:	10b7c104 	addi	r2,r2,-8444
   2906c:	e13ffe17 	ldw	r4,-8(fp)
   29070:	21000f24 	muli	r4,r4,60
   29074:	1105883a 	add	r2,r2,r4
   29078:	10800404 	addi	r2,r2,16
   2907c:	10c00015 	stw	r3,0(r2)
   dhc_states[iface].tries++;
   29080:	008001b4 	movhi	r2,6
   29084:	10b7c104 	addi	r2,r2,-8444
   29088:	e0fffe17 	ldw	r3,-8(fp)
   2908c:	18c00f24 	muli	r3,r3,60
   29090:	10c5883a 	add	r2,r2,r3
   29094:	10800104 	addi	r2,r2,4
   29098:	10800017 	ldw	r2,0(r2)
   2909c:	10c00044 	addi	r3,r2,1
   290a0:	008001b4 	movhi	r2,6
   290a4:	10b7c104 	addi	r2,r2,-8444
   290a8:	e13ffe17 	ldw	r4,-8(fp)
   290ac:	21000f24 	muli	r4,r4,60
   290b0:	1105883a 	add	r2,r2,r4
   290b4:	10800104 	addi	r2,r2,4
   290b8:	10c00015 	stw	r3,0(r2)

   return 0;   /* return OK code */
   290bc:	0005883a 	mov	r2,zero
}
   290c0:	e037883a 	mov	sp,fp
   290c4:	dfc00117 	ldw	ra,4(sp)
   290c8:	df000017 	ldw	fp,0(sp)
   290cc:	dec00204 	addi	sp,sp,8
   290d0:	f800283a 	ret

000290d4 <dhc_setip>:
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
   290d4:	defffd04 	addi	sp,sp,-12
   290d8:	dfc00215 	stw	ra,8(sp)
   290dc:	df000115 	stw	fp,4(sp)
   290e0:	df000104 	addi	fp,sp,4
   290e4:	e13fff15 	stw	r4,-4(fp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
   290e8:	008001b4 	movhi	r2,6
   290ec:	10b79b04 	addi	r2,r2,-8596
   290f0:	e0ffff17 	ldw	r3,-4(fp)
   290f4:	18c7883a 	add	r3,r3,r3
   290f8:	18c7883a 	add	r3,r3,r3
   290fc:	10c5883a 	add	r2,r2,r3
   29100:	10c00017 	ldw	r3,0(r2)
   29104:	008001b4 	movhi	r2,6
   29108:	10b7c104 	addi	r2,r2,-8444
   2910c:	e13fff17 	ldw	r4,-4(fp)
   29110:	21000f24 	muli	r4,r4,60
   29114:	1105883a 	add	r2,r2,r4
   29118:	10800904 	addi	r2,r2,36
   2911c:	10800017 	ldw	r2,0(r2)
   29120:	18800a15 	stw	r2,40(r3)
   nets[iface]->snmask   = dhc_states[iface].snmask;
   29124:	008001b4 	movhi	r2,6
   29128:	10b79b04 	addi	r2,r2,-8596
   2912c:	e0ffff17 	ldw	r3,-4(fp)
   29130:	18c7883a 	add	r3,r3,r3
   29134:	18c7883a 	add	r3,r3,r3
   29138:	10c5883a 	add	r2,r2,r3
   2913c:	10c00017 	ldw	r3,0(r2)
   29140:	008001b4 	movhi	r2,6
   29144:	10b7c104 	addi	r2,r2,-8444
   29148:	e13fff17 	ldw	r4,-4(fp)
   2914c:	21000f24 	muli	r4,r4,60
   29150:	1105883a 	add	r2,r2,r4
   29154:	10800a04 	addi	r2,r2,40
   29158:	10800017 	ldw	r2,0(r2)
   2915c:	18800c15 	stw	r2,48(r3)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
   29160:	008001b4 	movhi	r2,6
   29164:	10b79b04 	addi	r2,r2,-8596
   29168:	e0ffff17 	ldw	r3,-4(fp)
   2916c:	18c7883a 	add	r3,r3,r3
   29170:	18c7883a 	add	r3,r3,r3
   29174:	10c5883a 	add	r2,r2,r3
   29178:	10c00017 	ldw	r3,0(r2)
   2917c:	008001b4 	movhi	r2,6
   29180:	10b7c104 	addi	r2,r2,-8444
   29184:	e13fff17 	ldw	r4,-4(fp)
   29188:	21000f24 	muli	r4,r4,60
   2918c:	1105883a 	add	r2,r2,r4
   29190:	10800b04 	addi	r2,r2,44
   29194:	10800017 	ldw	r2,0(r2)
   29198:	18800d15 	stw	r2,52(r3)

   if ( nets[iface]->snmask == 0 )
   2919c:	008001b4 	movhi	r2,6
   291a0:	10b79b04 	addi	r2,r2,-8596
   291a4:	e0ffff17 	ldw	r3,-4(fp)
   291a8:	18c7883a 	add	r3,r3,r3
   291ac:	18c7883a 	add	r3,r3,r3
   291b0:	10c5883a 	add	r2,r2,r3
   291b4:	10800017 	ldw	r2,0(r2)
   291b8:	10800c17 	ldw	r2,48(r2)
   291bc:	1000111e 	bne	r2,zero,29204 <dhc_setip+0x130>
   {
      fixup_subnet_mask(iface);
   291c0:	e13fff17 	ldw	r4,-4(fp)
   291c4:	0023c080 	call	23c08 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
   291c8:	008001b4 	movhi	r2,6
   291cc:	10b79b04 	addi	r2,r2,-8596
   291d0:	e0ffff17 	ldw	r3,-4(fp)
   291d4:	18c7883a 	add	r3,r3,r3
   291d8:	18c7883a 	add	r3,r3,r3
   291dc:	10c5883a 	add	r2,r2,r3
   291e0:	10800017 	ldw	r2,0(r2)
   291e4:	10c00c17 	ldw	r3,48(r2)
   291e8:	008001b4 	movhi	r2,6
   291ec:	10b7c104 	addi	r2,r2,-8444
   291f0:	e13fff17 	ldw	r4,-4(fp)
   291f4:	21000f24 	muli	r4,r4,60
   291f8:	1105883a 	add	r2,r2,r4
   291fc:	10800a04 	addi	r2,r2,40
   29200:	10c00015 	stw	r3,0(r2)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
   29204:	008001b4 	movhi	r2,6
   29208:	10b79b04 	addi	r2,r2,-8596
   2920c:	e0ffff17 	ldw	r3,-4(fp)
   29210:	18c7883a 	add	r3,r3,r3
   29214:	18c7883a 	add	r3,r3,r3
   29218:	10c5883a 	add	r2,r2,r3
   2921c:	11000017 	ldw	r4,0(r2)
   29220:	008001b4 	movhi	r2,6
   29224:	10b79b04 	addi	r2,r2,-8596
   29228:	e0ffff17 	ldw	r3,-4(fp)
   2922c:	18c7883a 	add	r3,r3,r3
   29230:	18c7883a 	add	r3,r3,r3
   29234:	10c5883a 	add	r2,r2,r3
   29238:	10800017 	ldw	r2,0(r2)
   2923c:	11400a17 	ldw	r5,40(r2)
   29240:	008001b4 	movhi	r2,6
   29244:	10b79b04 	addi	r2,r2,-8596
   29248:	e0ffff17 	ldw	r3,-4(fp)
   2924c:	18c7883a 	add	r3,r3,r3
   29250:	18c7883a 	add	r3,r3,r3
   29254:	10c5883a 	add	r2,r2,r3
   29258:	10800017 	ldw	r2,0(r2)
   2925c:	10800c17 	ldw	r2,48(r2)
   29260:	0084303a 	nor	r2,zero,r2
   29264:	2884b03a 	or	r2,r5,r2
   29268:	20800e15 	stw	r2,56(r4)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
   2926c:	008001b4 	movhi	r2,6
   29270:	10b79b04 	addi	r2,r2,-8596
   29274:	e0ffff17 	ldw	r3,-4(fp)
   29278:	18c7883a 	add	r3,r3,r3
   2927c:	18c7883a 	add	r3,r3,r3
   29280:	10c5883a 	add	r2,r2,r3
   29284:	11000017 	ldw	r4,0(r2)
   29288:	008001b4 	movhi	r2,6
   2928c:	10b79b04 	addi	r2,r2,-8596
   29290:	e0ffff17 	ldw	r3,-4(fp)
   29294:	18c7883a 	add	r3,r3,r3
   29298:	18c7883a 	add	r3,r3,r3
   2929c:	10c5883a 	add	r2,r2,r3
   292a0:	10800017 	ldw	r2,0(r2)
   292a4:	11400a17 	ldw	r5,40(r2)
   292a8:	008001b4 	movhi	r2,6
   292ac:	10b79b04 	addi	r2,r2,-8596
   292b0:	e0ffff17 	ldw	r3,-4(fp)
   292b4:	18c7883a 	add	r3,r3,r3
   292b8:	18c7883a 	add	r3,r3,r3
   292bc:	10c5883a 	add	r2,r2,r3
   292c0:	10800017 	ldw	r2,0(r2)
   292c4:	10800c17 	ldw	r2,48(r2)
   292c8:	2884703a 	and	r2,r5,r2
   292cc:	20800f15 	stw	r2,60(r4)
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
   292d0:	008001b4 	movhi	r2,6
   292d4:	10b79b04 	addi	r2,r2,-8596
   292d8:	e0ffff17 	ldw	r3,-4(fp)
   292dc:	18c7883a 	add	r3,r3,r3
   292e0:	18c7883a 	add	r3,r3,r3
   292e4:	10c5883a 	add	r2,r2,r3
   292e8:	11000017 	ldw	r4,0(r2)
   292ec:	008001b4 	movhi	r2,6
   292f0:	10b79b04 	addi	r2,r2,-8596
   292f4:	e0ffff17 	ldw	r3,-4(fp)
   292f8:	18c7883a 	add	r3,r3,r3
   292fc:	18c7883a 	add	r3,r3,r3
   29300:	10c5883a 	add	r2,r2,r3
   29304:	10800017 	ldw	r2,0(r2)
   29308:	11400a17 	ldw	r5,40(r2)
   2930c:	008001b4 	movhi	r2,6
   29310:	10b79b04 	addi	r2,r2,-8596
   29314:	e0ffff17 	ldw	r3,-4(fp)
   29318:	18c7883a 	add	r3,r3,r3
   2931c:	18c7883a 	add	r3,r3,r3
   29320:	10c5883a 	add	r2,r2,r3
   29324:	10800017 	ldw	r2,0(r2)
   29328:	10800c17 	ldw	r2,48(r2)
   2932c:	0084303a 	nor	r2,zero,r2
   29330:	2884b03a 	or	r2,r5,r2
   29334:	20801015 	stw	r2,64(r4)

   return 0;   /* return OK code */
   29338:	0005883a 	mov	r2,zero
}
   2933c:	e037883a 	mov	sp,fp
   29340:	dfc00117 	ldw	ra,4(sp)
   29344:	df000017 	ldw	fp,0(sp)
   29348:	dec00204 	addi	sp,sp,8
   2934c:	f800283a 	ret

00029350 <dhc_resetip>:
 * RETURNS: Returns 0 if ok, else non-zero error. 
 */

int
dhc_resetip(int iface)
{
   29350:	defffe04 	addi	sp,sp,-8
   29354:	df000115 	stw	fp,4(sp)
   29358:	df000104 	addi	fp,sp,4
   2935c:	e13fff15 	stw	r4,-4(fp)
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
   29360:	008001b4 	movhi	r2,6
   29364:	10b79b04 	addi	r2,r2,-8596
   29368:	e0ffff17 	ldw	r3,-4(fp)
   2936c:	18c7883a 	add	r3,r3,r3
   29370:	18c7883a 	add	r3,r3,r3
   29374:	10c5883a 	add	r2,r2,r3
   29378:	10800017 	ldw	r2,0(r2)
   2937c:	10000a15 	stw	zero,40(r2)
   nets[iface]->snmask   = 0;
   29380:	008001b4 	movhi	r2,6
   29384:	10b79b04 	addi	r2,r2,-8596
   29388:	e0ffff17 	ldw	r3,-4(fp)
   2938c:	18c7883a 	add	r3,r3,r3
   29390:	18c7883a 	add	r3,r3,r3
   29394:	10c5883a 	add	r2,r2,r3
   29398:	10800017 	ldw	r2,0(r2)
   2939c:	10000c15 	stw	zero,48(r2)
   nets[iface]->n_defgw  = 0;
   293a0:	008001b4 	movhi	r2,6
   293a4:	10b79b04 	addi	r2,r2,-8596
   293a8:	e0ffff17 	ldw	r3,-4(fp)
   293ac:	18c7883a 	add	r3,r3,r3
   293b0:	18c7883a 	add	r3,r3,r3
   293b4:	10c5883a 	add	r2,r2,r3
   293b8:	10800017 	ldw	r2,0(r2)
   293bc:	10000d15 	stw	zero,52(r2)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
   293c0:	008001b4 	movhi	r2,6
   293c4:	10b79b04 	addi	r2,r2,-8596
   293c8:	e0ffff17 	ldw	r3,-4(fp)
   293cc:	18c7883a 	add	r3,r3,r3
   293d0:	18c7883a 	add	r3,r3,r3
   293d4:	10c5883a 	add	r2,r2,r3
   293d8:	10800017 	ldw	r2,0(r2)
   293dc:	10000e15 	stw	zero,56(r2)
   nets[iface]->n_netbr42  = 0;
   293e0:	008001b4 	movhi	r2,6
   293e4:	10b79b04 	addi	r2,r2,-8596
   293e8:	e0ffff17 	ldw	r3,-4(fp)
   293ec:	18c7883a 	add	r3,r3,r3
   293f0:	18c7883a 	add	r3,r3,r3
   293f4:	10c5883a 	add	r2,r2,r3
   293f8:	10800017 	ldw	r2,0(r2)
   293fc:	10000f15 	stw	zero,60(r2)
   nets[iface]->n_subnetbr = 0;
   29400:	008001b4 	movhi	r2,6
   29404:	10b79b04 	addi	r2,r2,-8596
   29408:	e0ffff17 	ldw	r3,-4(fp)
   2940c:	18c7883a 	add	r3,r3,r3
   29410:	18c7883a 	add	r3,r3,r3
   29414:	10c5883a 	add	r2,r2,r3
   29418:	10800017 	ldw	r2,0(r2)
   2941c:	10001015 	stw	zero,64(r2)

   return 0;   /* return OK code */
   29420:	0005883a 	mov	r2,zero
}
   29424:	e037883a 	mov	sp,fp
   29428:	df000017 	ldw	fp,0(sp)
   2942c:	dec00104 	addi	sp,sp,4
   29430:	f800283a 	ret

00029434 <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
   29434:	defff804 	addi	sp,sp,-32
   29438:	dfc00715 	stw	ra,28(sp)
   2943c:	df000615 	stw	fp,24(sp)
   29440:	df000604 	addi	fp,sp,24
   29444:	e13ffd15 	stw	r4,-12(fp)
   29448:	e17ffe15 	stw	r5,-8(fp)
   2944c:	e1bfff15 	stw	r6,-4(fp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
   29450:	e0bfff17 	ldw	r2,-4(fp)
   29454:	1009883a 	mov	r4,r2
   29458:	000b883a 	mov	r5,zero
   2945c:	004337c0 	call	4337c <udp_alloc>
   29460:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
   29464:	e0bffa17 	ldw	r2,-24(fp)
   29468:	1000021e 	bne	r2,zero,29474 <dhc_decline+0x40>
      return ENP_NOMEM;
   2946c:	00bffb04 	movi	r2,-20
   29470:	00002d06 	br	29528 <dhc_decline+0xf4>
   pkt->nb_plen = bplen;
   29474:	e0bffa17 	ldw	r2,-24(fp)
   29478:	e0ffff17 	ldw	r3,-4(fp)
   2947c:	10c00415 	stw	r3,16(r2)

   outbp = (struct bootp *)pkt->nb_prot;
   29480:	e0bffa17 	ldw	r2,-24(fp)
   29484:	10800317 	ldw	r2,12(r2)
   29488:	e0bffb15 	stw	r2,-20(fp)
   MEMCPY(outbp, bp, bplen);
   2948c:	e13ffb17 	ldw	r4,-20(fp)
   29490:	e17ffe17 	ldw	r5,-8(fp)
   29494:	e1bfff17 	ldw	r6,-4(fp)
   29498:	0007c900 	call	7c90 <memcpy>
   outbp->op = BOOTREQUEST;
   2949c:	e0bffb17 	ldw	r2,-20(fp)
   294a0:	00c00044 	movi	r3,1
   294a4:	10c00005 	stb	r3,0(r2)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
   294a8:	e0bffb17 	ldw	r2,-20(fp)
   294ac:	10803c04 	addi	r2,r2,240
   294b0:	01000d44 	movi	r4,53
   294b4:	100b883a 	mov	r5,r2
   294b8:	002a1f00 	call	2a1f0 <find_opt>
   294bc:	e0bffc15 	stw	r2,-16(fp)
   opts += 2;     /* point to actual op code */
   294c0:	e0bffc17 	ldw	r2,-16(fp)
   294c4:	10800084 	addi	r2,r2,2
   294c8:	e0bffc15 	stw	r2,-16(fp)
   *opts = DHCP_DECLINE;   /* overwrite op code */
   294cc:	e0bffc17 	ldw	r2,-16(fp)
   294d0:	00c00104 	movi	r3,4
   294d4:	10c00005 	stb	r3,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
   294d8:	e0bffa17 	ldw	r2,-24(fp)
   294dc:	00ffffc4 	movi	r3,-1
   294e0:	10c00715 	stw	r3,28(r2)
   pkt->net = nets[iface];    /* send out caller speced net */
   294e4:	008001b4 	movhi	r2,6
   294e8:	10b79b04 	addi	r2,r2,-8596
   294ec:	e0fffd17 	ldw	r3,-12(fp)
   294f0:	18c7883a 	add	r3,r3,r3
   294f4:	18c7883a 	add	r3,r3,r3
   294f8:	10c5883a 	add	r2,r2,r3
   294fc:	10c00017 	ldw	r3,0(r2)
   29500:	e0bffa17 	ldw	r2,-24(fp)
   29504:	10c00615 	stw	r3,24(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   29508:	010010c4 	movi	r4,67
   2950c:	01401104 	movi	r5,68
   29510:	e1bffa17 	ldw	r6,-24(fp)
   29514:	0042f240 	call	42f24 <udp_send>
   dsc_declines++;   /* count declines sent */
   29518:	d0a88217 	ldw	r2,-24056(gp)
   2951c:	10800044 	addi	r2,r2,1
   29520:	d0a88215 	stw	r2,-24056(gp)
   return 0;
   29524:	0005883a 	mov	r2,zero
}
   29528:	e037883a 	mov	sp,fp
   2952c:	dfc00117 	ldw	ra,4(sp)
   29530:	df000017 	ldw	fp,0(sp)
   29534:	dec00204 	addi	sp,sp,8
   29538:	f800283a 	ret

0002953c <dh_getlong>:
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
   2953c:	defffc04 	addi	sp,sp,-16
   29540:	df000315 	stw	fp,12(sp)
   29544:	df000304 	addi	fp,sp,12
   29548:	e13fff15 	stw	r4,-4(fp)
     long  v;
     u_char * p2 =  (u_char *)&v;
   2954c:	e0bffe04 	addi	r2,fp,-8
   29550:	e0bffd15 	stw	r2,-12(fp)

   *p2++ = *ptr++;
   29554:	e0bffd17 	ldw	r2,-12(fp)
   29558:	10c00044 	addi	r3,r2,1
   2955c:	e0fffd15 	stw	r3,-12(fp)
   29560:	e0ffff17 	ldw	r3,-4(fp)
   29564:	19000044 	addi	r4,r3,1
   29568:	e13fff15 	stw	r4,-4(fp)
   2956c:	18c00003 	ldbu	r3,0(r3)
   29570:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
   29574:	e0bffd17 	ldw	r2,-12(fp)
   29578:	10c00044 	addi	r3,r2,1
   2957c:	e0fffd15 	stw	r3,-12(fp)
   29580:	e0ffff17 	ldw	r3,-4(fp)
   29584:	19000044 	addi	r4,r3,1
   29588:	e13fff15 	stw	r4,-4(fp)
   2958c:	18c00003 	ldbu	r3,0(r3)
   29590:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
   29594:	e0bffd17 	ldw	r2,-12(fp)
   29598:	10c00044 	addi	r3,r2,1
   2959c:	e0fffd15 	stw	r3,-12(fp)
   295a0:	e0ffff17 	ldw	r3,-4(fp)
   295a4:	19000044 	addi	r4,r3,1
   295a8:	e13fff15 	stw	r4,-4(fp)
   295ac:	18c00003 	ldbu	r3,0(r3)
   295b0:	10c00005 	stb	r3,0(r2)
   *p2++ = *ptr++;
   295b4:	e0bffd17 	ldw	r2,-12(fp)
   295b8:	10c00044 	addi	r3,r2,1
   295bc:	e0fffd15 	stw	r3,-12(fp)
   295c0:	e0ffff17 	ldw	r3,-4(fp)
   295c4:	19000044 	addi	r4,r3,1
   295c8:	e13fff15 	stw	r4,-4(fp)
   295cc:	18c00003 	ldbu	r3,0(r3)
   295d0:	10c00005 	stb	r3,0(r2)

   return v;
   295d4:	e0bffe17 	ldw	r2,-8(fp)
}
   295d8:	e037883a 	mov	sp,fp
   295dc:	df000017 	ldw	fp,0(sp)
   295e0:	dec00104 	addi	sp,sp,4
   295e4:	f800283a 	ret

000295e8 <dhc_extract_opts>:
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
   295e8:	defff904 	addi	sp,sp,-28
   295ec:	dfc00615 	stw	ra,24(sp)
   295f0:	df000515 	stw	fp,20(sp)
   295f4:	dc000415 	stw	r16,16(sp)
   295f8:	df000504 	addi	fp,sp,20
   295fc:	e13ffd15 	stw	r4,-12(fp)
   29600:	e17ffe15 	stw	r5,-8(fp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
   29604:	e0bffe17 	ldw	r2,-8(fp)
   29608:	10804e04 	addi	r2,r2,312
   2960c:	e0bffb15 	stw	r2,-20(fp)
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
   29610:	008001b4 	movhi	r2,6
   29614:	10b7c104 	addi	r2,r2,-8444
   29618:	e0fffd17 	ldw	r3,-12(fp)
   2961c:	18c00f24 	muli	r3,r3,60
   29620:	10c5883a 	add	r2,r2,r3
   29624:	10800a04 	addi	r2,r2,40
   29628:	10000015 	stw	zero,0(r2)
   dhc_states[iface].defgw = 0; 
   2962c:	008001b4 	movhi	r2,6
   29630:	10b7c104 	addi	r2,r2,-8444
   29634:	e0fffd17 	ldw	r3,-12(fp)
   29638:	18c00f24 	muli	r3,r3,60
   2963c:	10c5883a 	add	r2,r2,r3
   29640:	10800b04 	addi	r2,r2,44
   29644:	10000015 	stw	zero,0(r2)
   dhc_states[iface].lease = 0; 
   29648:	008001b4 	movhi	r2,6
   2964c:	10b7c104 	addi	r2,r2,-8444
   29650:	e0fffd17 	ldw	r3,-12(fp)
   29654:	18c00f24 	muli	r3,r3,60
   29658:	10c5883a 	add	r2,r2,r3
   2965c:	10800504 	addi	r2,r2,20
   29660:	10000015 	stw	zero,0(r2)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
   29664:	00007106 	br	2982c <dhc_extract_opts+0x244>
   {
      switch (*opts++)
   29668:	e0bffe17 	ldw	r2,-8(fp)
   2966c:	10c00044 	addi	r3,r2,1
   29670:	e0fffe15 	stw	r3,-8(fp)
   29674:	10800003 	ldbu	r2,0(r2)
   29678:	10803fcc 	andi	r2,r2,255
   2967c:	10c000e0 	cmpeqi	r3,r2,3
   29680:	1800201e 	bne	r3,zero,29704 <dhc_extract_opts+0x11c>
   29684:	10c00108 	cmpgei	r3,r2,4
   29688:	1800041e 	bne	r3,zero,2969c <dhc_extract_opts+0xb4>
   2968c:	10006726 	beq	r2,zero,2982c <dhc_extract_opts+0x244>
   29690:	10800060 	cmpeqi	r2,r2,1
   29694:	10000a1e 	bne	r2,zero,296c0 <dhc_extract_opts+0xd8>
   29698:	00005c06 	br	2980c <dhc_extract_opts+0x224>
   2969c:	10c00ce0 	cmpeqi	r3,r2,51
   296a0:	18002f1e 	bne	r3,zero,29760 <dhc_extract_opts+0x178>
   296a4:	10c03fe0 	cmpeqi	r3,r2,255
   296a8:	1800031e 	bne	r3,zero,296b8 <dhc_extract_opts+0xd0>
   296ac:	108001a0 	cmpeqi	r2,r2,6
   296b0:	10004c1e 	bne	r2,zero,297e4 <dhc_extract_opts+0x1fc>
   296b4:	00005506 	br	2980c <dhc_extract_opts+0x224>
      {
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
   296b8:	0005883a 	mov	r2,zero
   296bc:	00006006 	br	29840 <dhc_extract_opts+0x258>
      case DHOP_SNMASK:
         opts++;
   296c0:	e0bffe17 	ldw	r2,-8(fp)
   296c4:	10800044 	addi	r2,r2,1
   296c8:	e0bffe15 	stw	r2,-8(fp)
         dhc_states[iface].snmask = dh_getlong(opts);
   296cc:	e13ffe17 	ldw	r4,-8(fp)
   296d0:	002953c0 	call	2953c <dh_getlong>
   296d4:	1009883a 	mov	r4,r2
   296d8:	008001b4 	movhi	r2,6
   296dc:	10b7c104 	addi	r2,r2,-8444
   296e0:	e0fffd17 	ldw	r3,-12(fp)
   296e4:	18c00f24 	muli	r3,r3,60
   296e8:	10c5883a 	add	r2,r2,r3
   296ec:	10800a04 	addi	r2,r2,40
   296f0:	11000015 	stw	r4,0(r2)
         opts += 4;
   296f4:	e0bffe17 	ldw	r2,-8(fp)
   296f8:	10800104 	addi	r2,r2,4
   296fc:	e0bffe15 	stw	r2,-8(fp)
         break;
   29700:	00004a06 	br	2982c <dhc_extract_opts+0x244>
      case DHOP_ROUTER:
         optlen = *opts++;
   29704:	e0bffe17 	ldw	r2,-8(fp)
   29708:	10c00044 	addi	r3,r2,1
   2970c:	e0fffe15 	stw	r3,-8(fp)
   29710:	10800003 	ldbu	r2,0(r2)
   29714:	e0bffc05 	stb	r2,-16(fp)
         if (optlen >= 4)
   29718:	e0bffc03 	ldbu	r2,-16(fp)
   2971c:	10800130 	cmpltui	r2,r2,4
   29720:	10000a1e 	bne	r2,zero,2974c <dhc_extract_opts+0x164>
            dhc_states[iface].defgw = dh_getlong(opts);
   29724:	e13ffe17 	ldw	r4,-8(fp)
   29728:	002953c0 	call	2953c <dh_getlong>
   2972c:	1009883a 	mov	r4,r2
   29730:	008001b4 	movhi	r2,6
   29734:	10b7c104 	addi	r2,r2,-8444
   29738:	e0fffd17 	ldw	r3,-12(fp)
   2973c:	18c00f24 	muli	r3,r3,60
   29740:	10c5883a 	add	r2,r2,r3
   29744:	10800b04 	addi	r2,r2,44
   29748:	11000015 	stw	r4,0(r2)
         opts += optlen;
   2974c:	e0bffc03 	ldbu	r2,-16(fp)
   29750:	e0fffe17 	ldw	r3,-8(fp)
   29754:	1885883a 	add	r2,r3,r2
   29758:	e0bffe15 	stw	r2,-8(fp)
         break;
   2975c:	00003306 	br	2982c <dhc_extract_opts+0x244>
      case DHOP_LEASE:
         opts++;
   29760:	e0bffe17 	ldw	r2,-8(fp)
   29764:	10800044 	addi	r2,r2,1
   29768:	e0bffe15 	stw	r2,-8(fp)
         dhc_states[iface].lease = htonl(dh_getlong(opts));
   2976c:	e13ffe17 	ldw	r4,-8(fp)
   29770:	002953c0 	call	2953c <dh_getlong>
   29774:	1004d63a 	srli	r2,r2,24
   29778:	1021883a 	mov	r16,r2
   2977c:	e13ffe17 	ldw	r4,-8(fp)
   29780:	002953c0 	call	2953c <dh_getlong>
   29784:	1005d23a 	srai	r2,r2,8
   29788:	10bfc00c 	andi	r2,r2,65280
   2978c:	80a0b03a 	or	r16,r16,r2
   29790:	e13ffe17 	ldw	r4,-8(fp)
   29794:	002953c0 	call	2953c <dh_getlong>
   29798:	10bfc00c 	andi	r2,r2,65280
   2979c:	1004923a 	slli	r2,r2,8
   297a0:	80a0b03a 	or	r16,r16,r2
   297a4:	e13ffe17 	ldw	r4,-8(fp)
   297a8:	002953c0 	call	2953c <dh_getlong>
   297ac:	1004963a 	slli	r2,r2,24
   297b0:	8084b03a 	or	r2,r16,r2
   297b4:	1009883a 	mov	r4,r2
   297b8:	008001b4 	movhi	r2,6
   297bc:	10b7c104 	addi	r2,r2,-8444
   297c0:	e0fffd17 	ldw	r3,-12(fp)
   297c4:	18c00f24 	muli	r3,r3,60
   297c8:	10c5883a 	add	r2,r2,r3
   297cc:	10800504 	addi	r2,r2,20
   297d0:	11000015 	stw	r4,0(r2)
         opts += 4;
   297d4:	e0bffe17 	ldw	r2,-8(fp)
   297d8:	10800104 	addi	r2,r2,4
   297dc:	e0bffe15 	stw	r2,-8(fp)
         break;
   297e0:	00001206 	br	2982c <dhc_extract_opts+0x244>
      case DHOP_DNSRV:
         optlen = *opts++;
   297e4:	e0bffe17 	ldw	r2,-8(fp)
   297e8:	10c00044 	addi	r3,r2,1
   297ec:	e0fffe15 	stw	r3,-8(fp)
   297f0:	10800003 	ldbu	r2,0(r2)
   297f4:	e0bffc05 	stb	r2,-16(fp)
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
   297f8:	e0bffc03 	ldbu	r2,-16(fp)
   297fc:	e0fffe17 	ldw	r3,-8(fp)
   29800:	1885883a 	add	r2,r3,r2
   29804:	e0bffe15 	stw	r2,-8(fp)
         break;
   29808:	00000806 	br	2982c <dhc_extract_opts+0x244>
      default:
         opts += ((*opts) + 1);
   2980c:	e0bffe17 	ldw	r2,-8(fp)
   29810:	10800003 	ldbu	r2,0(r2)
   29814:	10803fcc 	andi	r2,r2,255
   29818:	10800044 	addi	r2,r2,1
   2981c:	e0fffe17 	ldw	r3,-8(fp)
   29820:	1885883a 	add	r2,r3,r2
   29824:	e0bffe15 	stw	r2,-8(fp)
         break;
   29828:	0001883a 	nop
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
   2982c:	e0bffe17 	ldw	r2,-8(fp)
   29830:	e0fffb17 	ldw	r3,-20(fp)
   29834:	18bf8c2e 	bgeu	r3,r2,29668 <__alt_mem_descriptor_memory+0xdefe9668>
      default:
         opts += ((*opts) + 1);
         break;
      }
   }
   dtrap();
   29838:	002b0f40 	call	2b0f4 <dtrap>
   return -1;
   2983c:	00bfffc4 	movi	r2,-1
}
   29840:	e6ffff04 	addi	sp,fp,-4
   29844:	dfc00217 	ldw	ra,8(sp)
   29848:	df000117 	ldw	fp,4(sp)
   2984c:	dc000017 	ldw	r16,0(sp)
   29850:	dec00304 	addi	sp,sp,12
   29854:	f800283a 	ret

00029858 <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
   29858:	defffa04 	addi	sp,sp,-24
   2985c:	dfc00515 	stw	ra,20(sp)
   29860:	df000415 	stw	fp,16(sp)
   29864:	df000404 	addi	fp,sp,16
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
   29868:	e03ffc15 	stw	zero,-16(fp)
   2986c:	00014d06 	br	29da4 <dhc_second+0x54c>
   {
      switch (dhc_states[iface].state)
   29870:	008001b4 	movhi	r2,6
   29874:	10b7c104 	addi	r2,r2,-8444
   29878:	e0fffc17 	ldw	r3,-16(fp)
   2987c:	18c00f24 	muli	r3,r3,60
   29880:	10c5883a 	add	r2,r2,r3
   29884:	10800017 	ldw	r2,0(r2)
   29888:	10c00268 	cmpgeui	r3,r2,9
   2988c:	1801411e 	bne	r3,zero,29d94 <dhc_second+0x53c>
   29890:	100690ba 	slli	r3,r2,2
   29894:	008000f4 	movhi	r2,3
   29898:	10a62a04 	addi	r2,r2,-26456
   2989c:	1885883a 	add	r2,r3,r2
   298a0:	10800017 	ldw	r2,0(r2)
   298a4:	1000683a 	jmp	r2
   298a8:	00029d94 	movui	zero,2678
   298ac:	000298cc 	andi	zero,zero,2659
   298b0:	000298fc 	xorhi	zero,zero,2659
   298b4:	0002992c 	andhi	zero,zero,2660
   298b8:	0002992c 	andhi	zero,zero,2660
   298bc:	0002992c 	andhi	zero,zero,2660
   298c0:	00029b8c 	andi	zero,zero,2670
   298c4:	00029c40 	call	29c4 <getPHYSpeed+0x590>
   298c8:	00029a54 	movui	zero,2665
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
   298cc:	e13ffc17 	ldw	r4,-16(fp)
   298d0:	002809c0 	call	2809c <dhc_discover>
   298d4:	e0bfff15 	stw	r2,-4(fp)
         /* Error while sending a discover packet */
         if (e)
   298d8:	e0bfff17 	ldw	r2,-4(fp)
   298dc:	10000326 	beq	r2,zero,298ec <dhc_second+0x94>
         {
            dtrap();
   298e0:	002b0f40 	call	2b0f4 <dtrap>
            return e;
   298e4:	e0bfff17 	ldw	r2,-4(fp)
   298e8:	00013206 	br	29db4 <dhc_second+0x55c>
         }
         dhc_set_state(iface,DHCS_SELECTING);
   298ec:	e13ffc17 	ldw	r4,-16(fp)
   298f0:	01400104 	movi	r5,4
   298f4:	002a1440 	call	2a144 <dhc_set_state>
         break;
   298f8:	00012706 	br	29d98 <dhc_second+0x540>
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
   298fc:	e13ffc17 	ldw	r4,-16(fp)
   29900:	0029e480 	call	29e48 <dhc_reclaim>
   29904:	e0bfff15 	stw	r2,-4(fp)
         if (e)
   29908:	e0bfff17 	ldw	r2,-4(fp)
   2990c:	10000326 	beq	r2,zero,2991c <dhc_second+0xc4>
         {
            dtrap();
   29910:	002b0f40 	call	2b0f4 <dtrap>
            return e;
   29914:	e0bfff17 	ldw	r2,-4(fp)
   29918:	00012606 	br	29db4 <dhc_second+0x55c>
         }
         dhc_set_state(iface,DHCS_REBOOTING);
   2991c:	e13ffc17 	ldw	r4,-16(fp)
   29920:	014000c4 	movi	r5,3
   29924:	002a1440 	call	2a144 <dhc_set_state>
         break;
   29928:	00011b06 	br	29d98 <dhc_second+0x540>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
   2992c:	008001b4 	movhi	r2,6
   29930:	10b7c104 	addi	r2,r2,-8444
   29934:	e0fffc17 	ldw	r3,-16(fp)
   29938:	18c00f24 	muli	r3,r3,60
   2993c:	10c5883a 	add	r2,r2,r3
   29940:	10800104 	addi	r2,r2,4
   29944:	10800017 	ldw	r2,0(r2)
   29948:	e0bffd15 	stw	r2,-12(fp)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
   2994c:	e0bffd17 	ldw	r2,-12(fp)
   29950:	10800110 	cmplti	r2,r2,4
   29954:	1000021e 	bne	r2,zero,29960 <dhc_second+0x108>
            tries= DHC_MAX_TRIES;
   29958:	00800104 	movi	r2,4
   2995c:	e0bffd15 	stw	r2,-12(fp)
         if ( cticks > (dhc_states[iface].last_tick + 
   29960:	008001b4 	movhi	r2,6
   29964:	10b7c104 	addi	r2,r2,-8444
   29968:	e0fffc17 	ldw	r3,-16(fp)
   2996c:	18c00f24 	muli	r3,r3,60
   29970:	10c5883a 	add	r2,r2,r3
   29974:	10800404 	addi	r2,r2,16
   29978:	10c00017 	ldw	r3,0(r2)
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
   2997c:	01006404 	movi	r4,400
   29980:	e0bffd17 	ldw	r2,-12(fp)
   29984:	2084983a 	sll	r2,r4,r2
         tries = dhc_states[iface].tries ;

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
            tries= DHC_MAX_TRIES;
         if ( cticks > (dhc_states[iface].last_tick + 
   29988:	1887883a 	add	r3,r3,r2
   2998c:	00800174 	movhi	r2,5
   29990:	108fbe04 	addi	r2,r2,16120
   29994:	10800017 	ldw	r2,0(r2)
   29998:	1880192e 	bgeu	r3,r2,29a00 <dhc_second+0x1a8>
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
   2999c:	008001b4 	movhi	r2,6
   299a0:	10b7c104 	addi	r2,r2,-8444
   299a4:	e0fffc17 	ldw	r3,-16(fp)
   299a8:	18c00f24 	muli	r3,r3,60
   299ac:	10c5883a 	add	r2,r2,r3
   299b0:	10800017 	ldw	r2,0(r2)
   299b4:	10c00120 	cmpeqi	r3,r2,4
   299b8:	1800051e 	bne	r3,zero,299d0 <dhc_second+0x178>
   299bc:	10c00160 	cmpeqi	r3,r2,5
   299c0:	1800061e 	bne	r3,zero,299dc <dhc_second+0x184>
   299c4:	108000e0 	cmpeqi	r2,r2,3
   299c8:	1000081e 	bne	r2,zero,299ec <dhc_second+0x194>
   299cc:	00000a06 	br	299f8 <dhc_second+0x1a0>
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
   299d0:	e13ffc17 	ldw	r4,-16(fp)
   299d4:	002809c0 	call	2809c <dhc_discover>
               break;
   299d8:	00000906 	br	29a00 <dhc_second+0x1a8>
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
   299dc:	e13ffc17 	ldw	r4,-16(fp)
   299e0:	000b883a 	mov	r5,zero
   299e4:	00286380 	call	28638 <dhc_request>
               break;
   299e8:	00000506 	br	29a00 <dhc_second+0x1a8>
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
   299ec:	e13ffc17 	ldw	r4,-16(fp)
   299f0:	0029e480 	call	29e48 <dhc_reclaim>
               break;
   299f4:	00000206 	br	29a00 <dhc_second+0x1a8>
            default:
               dtrap(); /* bogus state */
   299f8:	002b0f40 	call	2b0f4 <dtrap>
               break;
   299fc:	0001883a 	nop
            }
         }
         if ( tries == DHC_MAX_TRIES && 
   29a00:	e0bffd17 	ldw	r2,-12(fp)
   29a04:	10800118 	cmpnei	r2,r2,4
   29a08:	1000111e 	bne	r2,zero,29a50 <dhc_second+0x1f8>
             (dhc_states[iface].state !=DHCS_SELECTING) )
   29a0c:	008001b4 	movhi	r2,6
   29a10:	10b7c104 	addi	r2,r2,-8444
   29a14:	e0fffc17 	ldw	r3,-16(fp)
   29a18:	18c00f24 	muli	r3,r3,60
   29a1c:	10c5883a 	add	r2,r2,r3
   29a20:	10800017 	ldw	r2,0(r2)
            default:
               dtrap(); /* bogus state */
               break;
            }
         }
         if ( tries == DHC_MAX_TRIES && 
   29a24:	10800120 	cmpeqi	r2,r2,4
   29a28:	1000091e 	bne	r2,zero,29a50 <dhc_second+0x1f8>
             (dhc_states[iface].state !=DHCS_SELECTING) )
         {
            /* We have tried enough. Restart from INIT state */
            dhc_set_state(iface,DHCS_RESTARTING);
   29a2c:	e13ffc17 	ldw	r4,-16(fp)
   29a30:	01400244 	movi	r5,9
   29a34:	002a1440 	call	2a144 <dhc_set_state>
            dhc_resetip(iface);
   29a38:	e13ffc17 	ldw	r4,-16(fp)
   29a3c:	00293500 	call	29350 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
   29a40:	e13ffc17 	ldw	r4,-16(fp)
   29a44:	01400044 	movi	r5,1
   29a48:	002a1440 	call	2a144 <dhc_set_state>
         }
         break;
   29a4c:	0000d206 	br	29d98 <dhc_second+0x540>
   29a50:	0000d106 	br	29d98 <dhc_second+0x540>
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
   29a54:	008001b4 	movhi	r2,6
   29a58:	10b7c104 	addi	r2,r2,-8444
   29a5c:	e0fffc17 	ldw	r3,-16(fp)
   29a60:	18c00f24 	muli	r3,r3,60
   29a64:	10c5883a 	add	r2,r2,r3
   29a68:	10800504 	addi	r2,r2,20
   29a6c:	10800017 	ldw	r2,0(r2)
   29a70:	10c01924 	muli	r3,r2,100
   29a74:	008001b4 	movhi	r2,6
   29a78:	10b7c104 	addi	r2,r2,-8444
   29a7c:	e13ffc17 	ldw	r4,-16(fp)
   29a80:	21000f24 	muli	r4,r4,60
   29a84:	1105883a 	add	r2,r2,r4
   29a88:	10800804 	addi	r2,r2,32
   29a8c:	10800017 	ldw	r2,0(r2)
   29a90:	1887883a 	add	r3,r3,r2
   29a94:	00800174 	movhi	r2,5
   29a98:	108fbe04 	addi	r2,r2,16120
   29a9c:	10800017 	ldw	r2,0(r2)
   29aa0:	10c0302e 	bgeu	r2,r3,29b64 <dhc_second+0x30c>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
   29aa4:	008001b4 	movhi	r2,6
   29aa8:	10b7c104 	addi	r2,r2,-8444
   29aac:	e0fffc17 	ldw	r3,-16(fp)
   29ab0:	18c00f24 	muli	r3,r3,60
   29ab4:	10c5883a 	add	r2,r2,r3
   29ab8:	10800804 	addi	r2,r2,32
   29abc:	10c00017 	ldw	r3,0(r2)
             dhc_states[iface].lease*TPS - 
   29ac0:	008001b4 	movhi	r2,6
   29ac4:	10b7c104 	addi	r2,r2,-8444
   29ac8:	e13ffc17 	ldw	r4,-16(fp)
   29acc:	21000f24 	muli	r4,r4,60
   29ad0:	1105883a 	add	r2,r2,r4
   29ad4:	10800504 	addi	r2,r2,20
   29ad8:	10800017 	ldw	r2,0(r2)
   29adc:	10801924 	muli	r2,r2,100
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
   29ae0:	1887883a 	add	r3,r3,r2
             dhc_states[iface].lease*TPS - 
             dhc_states[iface].last_tick)/2;
   29ae4:	008001b4 	movhi	r2,6
   29ae8:	10b7c104 	addi	r2,r2,-8444
   29aec:	e13ffc17 	ldw	r4,-16(fp)
   29af0:	21000f24 	muli	r4,r4,60
   29af4:	1105883a 	add	r2,r2,r4
   29af8:	10800404 	addi	r2,r2,16
   29afc:	10800017 	ldw	r2,0(r2)
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
             dhc_states[iface].lease*TPS - 
   29b00:	1885c83a 	sub	r2,r3,r2
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
   29b04:	1004d07a 	srli	r2,r2,1
   29b08:	e0bffe15 	stw	r2,-8(fp)
             dhc_states[iface].lease*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
   29b0c:	e0bffe17 	ldw	r2,-8(fp)
   29b10:	1085dc28 	cmpgeui	r2,r2,6000
   29b14:	1000021e 	bne	r2,zero,29b20 <dhc_second+0x2c8>
               half_time = 60*TPS;
   29b18:	0085dc04 	movi	r2,6000
   29b1c:	e0bffe15 	stw	r2,-8(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
   29b20:	008001b4 	movhi	r2,6
   29b24:	10b7c104 	addi	r2,r2,-8444
   29b28:	e0fffc17 	ldw	r3,-16(fp)
   29b2c:	18c00f24 	muli	r3,r3,60
   29b30:	10c5883a 	add	r2,r2,r3
   29b34:	10800404 	addi	r2,r2,16
   29b38:	10c00017 	ldw	r3,0(r2)
   29b3c:	e0bffe17 	ldw	r2,-8(fp)
   29b40:	1887883a 	add	r3,r3,r2
   29b44:	00800174 	movhi	r2,5
   29b48:	108fbe04 	addi	r2,r2,16120
   29b4c:	10800017 	ldw	r2,0(r2)
   29b50:	18800d2e 	bgeu	r3,r2,29b88 <dhc_second+0x330>
            {
               dhc_request(iface,FALSE);
   29b54:	e13ffc17 	ldw	r4,-16(fp)
   29b58:	000b883a 	mov	r5,zero
   29b5c:	00286380 	call	28638 <dhc_request>
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
            dhc_resetip(iface);
            dhc_set_state(iface,DHCS_INIT);
         }
         break;
   29b60:	00008d06 	br	29d98 <dhc_second+0x540>
            }
         }
         else
         {
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
   29b64:	e13ffc17 	ldw	r4,-16(fp)
   29b68:	01400244 	movi	r5,9
   29b6c:	002a1440 	call	2a144 <dhc_set_state>
            dhc_resetip(iface);
   29b70:	e13ffc17 	ldw	r4,-16(fp)
   29b74:	00293500 	call	29350 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
   29b78:	e13ffc17 	ldw	r4,-16(fp)
   29b7c:	01400044 	movi	r5,1
   29b80:	002a1440 	call	2a144 <dhc_set_state>
         }
         break;
   29b84:	00008406 	br	29d98 <dhc_second+0x540>
   29b88:	00008306 	br	29d98 <dhc_second+0x540>

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
   29b8c:	008001b4 	movhi	r2,6
   29b90:	10b7c104 	addi	r2,r2,-8444
   29b94:	e0fffc17 	ldw	r3,-16(fp)
   29b98:	18c00f24 	muli	r3,r3,60
   29b9c:	10c5883a 	add	r2,r2,r3
   29ba0:	10800604 	addi	r2,r2,24
   29ba4:	10800017 	ldw	r2,0(r2)
   29ba8:	10bfffe0 	cmpeqi	r2,r2,-1
   29bac:	1000231e 	bne	r2,zero,29c3c <dhc_second+0x3e4>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
   29bb0:	008001b4 	movhi	r2,6
   29bb4:	10b7c104 	addi	r2,r2,-8444
   29bb8:	e0fffc17 	ldw	r3,-16(fp)
   29bbc:	18c00f24 	muli	r3,r3,60
   29bc0:	10c5883a 	add	r2,r2,r3
   29bc4:	10800604 	addi	r2,r2,24
   29bc8:	10800017 	ldw	r2,0(r2)
   29bcc:	10c01924 	muli	r3,r2,100
   29bd0:	008001b4 	movhi	r2,6
   29bd4:	10b7c104 	addi	r2,r2,-8444
   29bd8:	e13ffc17 	ldw	r4,-16(fp)
   29bdc:	21000f24 	muli	r4,r4,60
   29be0:	1105883a 	add	r2,r2,r4
   29be4:	10800804 	addi	r2,r2,32
   29be8:	10800017 	ldw	r2,0(r2)
   29bec:	1887883a 	add	r3,r3,r2
   29bf0:	00800174 	movhi	r2,5
   29bf4:	108fbe04 	addi	r2,r2,16120
   29bf8:	10800017 	ldw	r2,0(r2)
         }
         break;

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
   29bfc:	18800f2e 	bgeu	r3,r2,29c3c <dhc_second+0x3e4>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
   29c00:	e13ffc17 	ldw	r4,-16(fp)
   29c04:	014001c4 	movi	r5,7
   29c08:	002a1440 	call	2a144 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
   29c0c:	e13ffc17 	ldw	r4,-16(fp)
   29c10:	0029e480 	call	29e48 <dhc_reclaim>
   29c14:	e0bfff15 	stw	r2,-4(fp)
            if (e)
   29c18:	e0bfff17 	ldw	r2,-4(fp)
   29c1c:	10000326 	beq	r2,zero,29c2c <dhc_second+0x3d4>
            {
               dtrap();
   29c20:	002b0f40 	call	2b0f4 <dtrap>
               return e;
   29c24:	e0bfff17 	ldw	r2,-4(fp)
   29c28:	00006206 	br	29db4 <dhc_second+0x55c>
            }
            dsc_renew++;
   29c2c:	d0a88517 	ldw	r2,-24044(gp)
   29c30:	10800044 	addi	r2,r2,1
   29c34:	d0a88515 	stw	r2,-24044(gp)
         }
         break;
   29c38:	00005706 	br	29d98 <dhc_second+0x540>
   29c3c:	00005606 	br	29d98 <dhc_second+0x540>
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
   29c40:	008001b4 	movhi	r2,6
   29c44:	10b7c104 	addi	r2,r2,-8444
   29c48:	e0fffc17 	ldw	r3,-16(fp)
   29c4c:	18c00f24 	muli	r3,r3,60
   29c50:	10c5883a 	add	r2,r2,r3
   29c54:	10800704 	addi	r2,r2,28
   29c58:	10800017 	ldw	r2,0(r2)
   29c5c:	10c01924 	muli	r3,r2,100
   29c60:	008001b4 	movhi	r2,6
   29c64:	10b7c104 	addi	r2,r2,-8444
   29c68:	e13ffc17 	ldw	r4,-16(fp)
   29c6c:	21000f24 	muli	r4,r4,60
   29c70:	1105883a 	add	r2,r2,r4
   29c74:	10800804 	addi	r2,r2,32
   29c78:	10800017 	ldw	r2,0(r2)
   29c7c:	1887883a 	add	r3,r3,r2
   29c80:	00800174 	movhi	r2,5
   29c84:	108fbe04 	addi	r2,r2,16120
   29c88:	10800017 	ldw	r2,0(r2)
   29c8c:	10c0302e 	bgeu	r2,r3,29d50 <dhc_second+0x4f8>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
   29c90:	008001b4 	movhi	r2,6
   29c94:	10b7c104 	addi	r2,r2,-8444
   29c98:	e0fffc17 	ldw	r3,-16(fp)
   29c9c:	18c00f24 	muli	r3,r3,60
   29ca0:	10c5883a 	add	r2,r2,r3
   29ca4:	10800804 	addi	r2,r2,32
   29ca8:	10c00017 	ldw	r3,0(r2)
             dhc_states[iface].t2*TPS - 
   29cac:	008001b4 	movhi	r2,6
   29cb0:	10b7c104 	addi	r2,r2,-8444
   29cb4:	e13ffc17 	ldw	r4,-16(fp)
   29cb8:	21000f24 	muli	r4,r4,60
   29cbc:	1105883a 	add	r2,r2,r4
   29cc0:	10800704 	addi	r2,r2,28
   29cc4:	10800017 	ldw	r2,0(r2)
   29cc8:	10801924 	muli	r2,r2,100
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
   29ccc:	1887883a 	add	r3,r3,r2
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;
   29cd0:	008001b4 	movhi	r2,6
   29cd4:	10b7c104 	addi	r2,r2,-8444
   29cd8:	e13ffc17 	ldw	r4,-16(fp)
   29cdc:	21000f24 	muli	r4,r4,60
   29ce0:	1105883a 	add	r2,r2,r4
   29ce4:	10800404 	addi	r2,r2,16
   29ce8:	10800017 	ldw	r2,0(r2)
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
             dhc_states[iface].t2*TPS - 
   29cec:	1885c83a 	sub	r2,r3,r2
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
   29cf0:	1004d07a 	srli	r2,r2,1
   29cf4:	e0bffe15 	stw	r2,-8(fp)
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
   29cf8:	e0bffe17 	ldw	r2,-8(fp)
   29cfc:	1085dc28 	cmpgeui	r2,r2,6000
   29d00:	1000021e 	bne	r2,zero,29d0c <dhc_second+0x4b4>
               half_time = 60*TPS;
   29d04:	0085dc04 	movi	r2,6000
   29d08:	e0bffe15 	stw	r2,-8(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
   29d0c:	008001b4 	movhi	r2,6
   29d10:	10b7c104 	addi	r2,r2,-8444
   29d14:	e0fffc17 	ldw	r3,-16(fp)
   29d18:	18c00f24 	muli	r3,r3,60
   29d1c:	10c5883a 	add	r2,r2,r3
   29d20:	10800404 	addi	r2,r2,16
   29d24:	10c00017 	ldw	r3,0(r2)
   29d28:	e0bffe17 	ldw	r2,-8(fp)
   29d2c:	1887883a 	add	r3,r3,r2
   29d30:	00800174 	movhi	r2,5
   29d34:	108fbe04 	addi	r2,r2,16120
   29d38:	10800017 	ldw	r2,0(r2)
   29d3c:	1880142e 	bgeu	r3,r2,29d90 <dhc_second+0x538>
            {
               dhc_request(iface,FALSE);
   29d40:	e13ffc17 	ldw	r4,-16(fp)
   29d44:	000b883a 	mov	r5,zero
   29d48:	00286380 	call	28638 <dhc_request>
               dtrap();
               return e;
            }
            dsc_rebind++;
         }
         break;
   29d4c:	00001206 	br	29d98 <dhc_second+0x540>
         {
            /* No Response has come from the Server that assigned our 
             * IP. Hence send a broadcast packet to see if we can 
             * lease this IP from some other server 
             */
            dhc_set_state(iface,DHCS_REBINDING);
   29d50:	e13ffc17 	ldw	r4,-16(fp)
   29d54:	01400204 	movi	r5,8
   29d58:	002a1440 	call	2a144 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
   29d5c:	e13ffc17 	ldw	r4,-16(fp)
   29d60:	01400044 	movi	r5,1
   29d64:	00286380 	call	28638 <dhc_request>
   29d68:	e0bfff15 	stw	r2,-4(fp)
            if (e)
   29d6c:	e0bfff17 	ldw	r2,-4(fp)
   29d70:	10000326 	beq	r2,zero,29d80 <dhc_second+0x528>
            {
               dtrap();
   29d74:	002b0f40 	call	2b0f4 <dtrap>
               return e;
   29d78:	e0bfff17 	ldw	r2,-4(fp)
   29d7c:	00000d06 	br	29db4 <dhc_second+0x55c>
            }
            dsc_rebind++;
   29d80:	d0a88617 	ldw	r2,-24040(gp)
   29d84:	10800044 	addi	r2,r2,1
   29d88:	d0a88615 	stw	r2,-24040(gp)
         }
         break;
   29d8c:	00000206 	br	29d98 <dhc_second+0x540>
   29d90:	00000106 	br	29d98 <dhc_second+0x540>
      case DHCS_UNUSED:
      default:
         continue;
   29d94:	0001883a 	nop
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
   29d98:	e0bffc17 	ldw	r2,-16(fp)
   29d9c:	10800044 	addi	r2,r2,1
   29da0:	e0bffc15 	stw	r2,-16(fp)
   29da4:	e0bffc17 	ldw	r2,-16(fp)
   29da8:	10800110 	cmplti	r2,r2,4
   29dac:	103eb01e 	bne	r2,zero,29870 <__alt_mem_descriptor_memory+0xdefe9870>
      case DHCS_UNUSED:
      default:
         continue;
      }
   }
   return 0;
   29db0:	0005883a 	mov	r2,zero
}
   29db4:	e037883a 	mov	sp,fp
   29db8:	dfc00117 	ldw	ra,4(sp)
   29dbc:	df000017 	ldw	fp,0(sp)
   29dc0:	dec00204 	addi	sp,sp,8
   29dc4:	f800283a 	ret

00029dc8 <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
   29dc8:	defffd04 	addi	sp,sp,-12
   29dcc:	dfc00215 	stw	ra,8(sp)
   29dd0:	df000115 	stw	fp,4(sp)
   29dd4:	df000104 	addi	fp,sp,4
   29dd8:	e13fff15 	stw	r4,-4(fp)
   if (iface < 0 || iface > MAXNETS)
   29ddc:	e0bfff17 	ldw	r2,-4(fp)
   29de0:	10000316 	blt	r2,zero,29df0 <dhc_halt+0x28>
   29de4:	e0bfff17 	ldw	r2,-4(fp)
   29de8:	10800150 	cmplti	r2,r2,5
   29dec:	1000021e 	bne	r2,zero,29df8 <dhc_halt+0x30>
   {
      dtrap();
   29df0:	002b0f40 	call	2b0f4 <dtrap>
      return;
   29df4:	00000f06 	br	29e34 <dhc_halt+0x6c>
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
   29df8:	e0bfff17 	ldw	r2,-4(fp)
   29dfc:	10c00f24 	muli	r3,r2,60
   29e00:	008001b4 	movhi	r2,6
   29e04:	10b7c104 	addi	r2,r2,-8444
   29e08:	1885883a 	add	r2,r3,r2
   29e0c:	1009883a 	mov	r4,r2
   29e10:	000b883a 	mov	r5,zero
   29e14:	01800f04 	movi	r6,60
   29e18:	0007f240 	call	7f24 <memset>
   dhc_states[iface].state = DHCS_UNUSED;
   29e1c:	008001b4 	movhi	r2,6
   29e20:	10b7c104 	addi	r2,r2,-8444
   29e24:	e0ffff17 	ldw	r3,-4(fp)
   29e28:	18c00f24 	muli	r3,r3,60
   29e2c:	10c5883a 	add	r2,r2,r3
   29e30:	10000015 	stw	zero,0(r2)
}
   29e34:	e037883a 	mov	sp,fp
   29e38:	dfc00117 	ldw	ra,4(sp)
   29e3c:	df000017 	ldw	fp,0(sp)
   29e40:	dec00204 	addi	sp,sp,8
   29e44:	f800283a 	ret

00029e48 <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
   29e48:	defffc04 	addi	sp,sp,-16
   29e4c:	dfc00315 	stw	ra,12(sp)
   29e50:	df000215 	stw	fp,8(sp)
   29e54:	df000204 	addi	fp,sp,8
   29e58:	e13fff15 	stw	r4,-4(fp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
   29e5c:	008001b4 	movhi	r2,6
   29e60:	10b79b04 	addi	r2,r2,-8596
   29e64:	e0ffff17 	ldw	r3,-4(fp)
   29e68:	18c7883a 	add	r3,r3,r3
   29e6c:	18c7883a 	add	r3,r3,r3
   29e70:	10c5883a 	add	r2,r2,r3
   29e74:	10800017 	ldw	r2,0(r2)
   29e78:	10800a17 	ldw	r2,40(r2)
   29e7c:	1000031e 	bne	r2,zero,29e8c <dhc_reclaim+0x44>
   {
      dtrap();    /* programming bug? */
   29e80:	002b0f40 	call	2b0f4 <dtrap>
      return ENP_LOGIC;
   29e84:	00bffd44 	movi	r2,-11
   29e88:	00005806 	br	29fec <dhc_reclaim+0x1a4>
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
   29e8c:	008001b4 	movhi	r2,6
   29e90:	10b79b04 	addi	r2,r2,-8596
   29e94:	e0ffff17 	ldw	r3,-4(fp)
   29e98:	18c7883a 	add	r3,r3,r3
   29e9c:	18c7883a 	add	r3,r3,r3
   29ea0:	10c5883a 	add	r2,r2,r3
   29ea4:	10800017 	ldw	r2,0(r2)
   29ea8:	10c00a17 	ldw	r3,40(r2)
   29eac:	008001b4 	movhi	r2,6
   29eb0:	10b7c104 	addi	r2,r2,-8444
   29eb4:	e13fff17 	ldw	r4,-4(fp)
   29eb8:	21000f24 	muli	r4,r4,60
   29ebc:	1105883a 	add	r2,r2,r4
   29ec0:	10800904 	addi	r2,r2,36
   29ec4:	10c00015 	stw	r3,0(r2)
   dhc_states[iface].snmask = nets[iface]->snmask;
   29ec8:	008001b4 	movhi	r2,6
   29ecc:	10b79b04 	addi	r2,r2,-8596
   29ed0:	e0ffff17 	ldw	r3,-4(fp)
   29ed4:	18c7883a 	add	r3,r3,r3
   29ed8:	18c7883a 	add	r3,r3,r3
   29edc:	10c5883a 	add	r2,r2,r3
   29ee0:	10800017 	ldw	r2,0(r2)
   29ee4:	10c00c17 	ldw	r3,48(r2)
   29ee8:	008001b4 	movhi	r2,6
   29eec:	10b7c104 	addi	r2,r2,-8444
   29ef0:	e13fff17 	ldw	r4,-4(fp)
   29ef4:	21000f24 	muli	r4,r4,60
   29ef8:	1105883a 	add	r2,r2,r4
   29efc:	10800a04 	addi	r2,r2,40
   29f00:	10c00015 	stw	r3,0(r2)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
   29f04:	008001b4 	movhi	r2,6
   29f08:	10b79b04 	addi	r2,r2,-8596
   29f0c:	e0ffff17 	ldw	r3,-4(fp)
   29f10:	18c7883a 	add	r3,r3,r3
   29f14:	18c7883a 	add	r3,r3,r3
   29f18:	10c5883a 	add	r2,r2,r3
   29f1c:	10800017 	ldw	r2,0(r2)
   29f20:	10c00d17 	ldw	r3,52(r2)
   29f24:	008001b4 	movhi	r2,6
   29f28:	10b7c104 	addi	r2,r2,-8444
   29f2c:	e13fff17 	ldw	r4,-4(fp)
   29f30:	21000f24 	muli	r4,r4,60
   29f34:	1105883a 	add	r2,r2,r4
   29f38:	10800b04 	addi	r2,r2,44
   29f3c:	10c00015 	stw	r3,0(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
   29f40:	008001b4 	movhi	r2,6
   29f44:	10b7c104 	addi	r2,r2,-8444
   29f48:	e0ffff17 	ldw	r3,-4(fp)
   29f4c:	18c00f24 	muli	r3,r3,60
   29f50:	10c5883a 	add	r2,r2,r3
   29f54:	10800c04 	addi	r2,r2,48
   29f58:	10800017 	ldw	r2,0(r2)
   29f5c:	10002026 	beq	r2,zero,29fe0 <dhc_reclaim+0x198>
   {
      if (dhc_states[iface].srv_ipaddr)
   29f60:	008001b4 	movhi	r2,6
   29f64:	10b7c104 	addi	r2,r2,-8444
   29f68:	e0ffff17 	ldw	r3,-4(fp)
   29f6c:	18c00f24 	muli	r3,r3,60
   29f70:	10c5883a 	add	r2,r2,r3
   29f74:	10800d04 	addi	r2,r2,52
   29f78:	10800017 	ldw	r2,0(r2)
   29f7c:	10001726 	beq	r2,zero,29fdc <dhc_reclaim+0x194>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
   29f80:	008001b4 	movhi	r2,6
   29f84:	10b7c104 	addi	r2,r2,-8444
   29f88:	e0ffff17 	ldw	r3,-4(fp)
   29f8c:	18c00f24 	muli	r3,r3,60
   29f90:	10c5883a 	add	r2,r2,r3
   29f94:	10800d04 	addi	r2,r2,52
   29f98:	11000017 	ldw	r4,0(r2)
   29f9c:	008001b4 	movhi	r2,6
   29fa0:	10b7c104 	addi	r2,r2,-8444
   29fa4:	e0ffff17 	ldw	r3,-4(fp)
   29fa8:	18c00f24 	muli	r3,r3,60
   29fac:	10c5883a 	add	r2,r2,r3
   29fb0:	10800c04 	addi	r2,r2,48
   29fb4:	10c00017 	ldw	r3,0(r2)
   29fb8:	00800084 	movi	r2,2
   29fbc:	d8800015 	stw	r2,0(sp)
   29fc0:	017fffc4 	movi	r5,-1
   29fc4:	180d883a 	mov	r6,r3
   29fc8:	e1ffff17 	ldw	r7,-4(fp)
   29fcc:	00422100 	call	42210 <add_route>
   29fd0:	1000031e 	bne	r2,zero,29fe0 <dhc_reclaim+0x198>
             dhc_states[iface].rly_ipaddr, iface, IPRP_LOCAL))
         {
            /* route was not added. check this case */
            dtrap(); 
   29fd4:	002b0f40 	call	2b0f4 <dtrap>
   29fd8:	00000106 	br	29fe0 <dhc_reclaim+0x198>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
   29fdc:	002b0f40 	call	2b0f4 <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
   29fe0:	e13fff17 	ldw	r4,-4(fp)
   29fe4:	01400044 	movi	r5,1
   29fe8:	00286380 	call	28638 <dhc_request>
}
   29fec:	e037883a 	mov	sp,fp
   29ff0:	dfc00117 	ldw	ra,4(sp)
   29ff4:	df000017 	ldw	fp,0(sp)
   29ff8:	dec00204 	addi	sp,sp,8
   29ffc:	f800283a 	ret

0002a000 <dhc_state_init>:
 * RETURNS: void
 */

void 
dhc_state_init(int iface, int init_flag)
{
   2a000:	defffb04 	addi	sp,sp,-20
   2a004:	dfc00415 	stw	ra,16(sp)
   2a008:	df000315 	stw	fp,12(sp)
   2a00c:	df000304 	addi	fp,sp,12
   2a010:	e13ffe15 	stw	r4,-8(fp)
   2a014:	e17fff15 	stw	r5,-4(fp)
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
   2a018:	e0bfff17 	ldw	r2,-4(fp)
   2a01c:	10800058 	cmpnei	r2,r2,1
   2a020:	1000021e 	bne	r2,zero,2a02c <dhc_state_init+0x2c>
   2a024:	00800044 	movi	r2,1
   2a028:	00000106 	br	2a030 <dhc_state_init+0x30>
   2a02c:	00800084 	movi	r2,2
   2a030:	e0bffd15 	stw	r2,-12(fp)
   
   dhc_set_state(iface, state);
   2a034:	e13ffe17 	ldw	r4,-8(fp)
   2a038:	e17ffd17 	ldw	r5,-12(fp)
   2a03c:	002a1440 	call	2a144 <dhc_set_state>
}
   2a040:	e037883a 	mov	sp,fp
   2a044:	dfc00117 	ldw	ra,4(sp)
   2a048:	df000017 	ldw	fp,0(sp)
   2a04c:	dec00204 	addi	sp,sp,8
   2a050:	f800283a 	ret

0002a054 <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
   2a054:	defffe04 	addi	sp,sp,-8
   2a058:	df000115 	stw	fp,4(sp)
   2a05c:	df000104 	addi	fp,sp,4
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   2a060:	e03fff15 	stw	zero,-4(fp)
   2a064:	00001506 	br	2a0bc <dhc_alldone+0x68>
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
   2a068:	008001b4 	movhi	r2,6
   2a06c:	10b7c104 	addi	r2,r2,-8444
   2a070:	e0ffff17 	ldw	r3,-4(fp)
   2a074:	18c00f24 	muli	r3,r3,60
   2a078:	10c5883a 	add	r2,r2,r3
   2a07c:	10800017 	ldw	r2,0(r2)
   2a080:	10000826 	beq	r2,zero,2a0a4 <dhc_alldone+0x50>
          ( dhc_states[i].state == DHCS_BOUND  )  )
   2a084:	008001b4 	movhi	r2,6
   2a088:	10b7c104 	addi	r2,r2,-8444
   2a08c:	e0ffff17 	ldw	r3,-4(fp)
   2a090:	18c00f24 	muli	r3,r3,60
   2a094:	10c5883a 	add	r2,r2,r3
   2a098:	10800017 	ldw	r2,0(r2)
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
   2a09c:	10800198 	cmpnei	r2,r2,6
   2a0a0:	1000041e 	bne	r2,zero,2a0b4 <dhc_alldone+0x60>

int 
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   2a0a4:	e0bfff17 	ldw	r2,-4(fp)
   2a0a8:	10800044 	addi	r2,r2,1
   2a0ac:	e0bfff15 	stw	r2,-4(fp)
   2a0b0:	00000206 	br	2a0bc <dhc_alldone+0x68>
      {
         continue ;
      }
      else
      {
         return FALSE ;
   2a0b4:	0005883a 	mov	r2,zero
   2a0b8:	00000406 	br	2a0cc <dhc_alldone+0x78>

int 
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   2a0bc:	e0bfff17 	ldw	r2,-4(fp)
   2a0c0:	10800110 	cmplti	r2,r2,4
   2a0c4:	103fe81e 	bne	r2,zero,2a068 <__alt_mem_descriptor_memory+0xdefea068>
      else
      {
         return FALSE ;
      }
   }
   return TRUE ;
   2a0c8:	00800044 	movi	r2,1
}
   2a0cc:	e037883a 	mov	sp,fp
   2a0d0:	df000017 	ldw	fp,0(sp)
   2a0d4:	dec00104 	addi	sp,sp,4
   2a0d8:	f800283a 	ret

0002a0dc <dhc_ifacedone>:
 * RETURNS: 
 */

int 
dhc_ifacedone(int iface)
{
   2a0dc:	defffe04 	addi	sp,sp,-8
   2a0e0:	df000115 	stw	fp,4(sp)
   2a0e4:	df000104 	addi	fp,sp,4
   2a0e8:	e13fff15 	stw	r4,-4(fp)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
   2a0ec:	008001b4 	movhi	r2,6
   2a0f0:	10b7c104 	addi	r2,r2,-8444
   2a0f4:	e0ffff17 	ldw	r3,-4(fp)
   2a0f8:	18c00f24 	muli	r3,r3,60
   2a0fc:	10c5883a 	add	r2,r2,r3
   2a100:	10800017 	ldw	r2,0(r2)
   2a104:	10000826 	beq	r2,zero,2a128 <dhc_ifacedone+0x4c>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
   2a108:	008001b4 	movhi	r2,6
   2a10c:	10b7c104 	addi	r2,r2,-8444
   2a110:	e0ffff17 	ldw	r3,-4(fp)
   2a114:	18c00f24 	muli	r3,r3,60
   2a118:	10c5883a 	add	r2,r2,r3
   2a11c:	10800017 	ldw	r2,0(r2)
 */

int 
dhc_ifacedone(int iface)
{
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
   2a120:	10800198 	cmpnei	r2,r2,6
   2a124:	1000021e 	bne	r2,zero,2a130 <dhc_ifacedone+0x54>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
   {
      return TRUE ;
   2a128:	00800044 	movi	r2,1
   2a12c:	00000106 	br	2a134 <dhc_ifacedone+0x58>
   }
   else
   {
      return FALSE ;
   2a130:	0005883a 	mov	r2,zero
   }
}
   2a134:	e037883a 	mov	sp,fp
   2a138:	df000017 	ldw	fp,0(sp)
   2a13c:	dec00104 	addi	sp,sp,4
   2a140:	f800283a 	ret

0002a144 <dhc_set_state>:
 *
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
   2a144:	defffc04 	addi	sp,sp,-16
   2a148:	dfc00315 	stw	ra,12(sp)
   2a14c:	df000215 	stw	fp,8(sp)
   2a150:	df000204 	addi	fp,sp,8
   2a154:	e13ffe15 	stw	r4,-8(fp)
   2a158:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].state = state; /* Set the new state */
   2a15c:	e0ffff17 	ldw	r3,-4(fp)
   2a160:	008001b4 	movhi	r2,6
   2a164:	10b7c104 	addi	r2,r2,-8444
   2a168:	e13ffe17 	ldw	r4,-8(fp)
   2a16c:	21000f24 	muli	r4,r4,60
   2a170:	1105883a 	add	r2,r2,r4
   2a174:	10c00015 	stw	r3,0(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
   2a178:	008001b4 	movhi	r2,6
   2a17c:	10b7c104 	addi	r2,r2,-8444
   2a180:	e0fffe17 	ldw	r3,-8(fp)
   2a184:	18c00f24 	muli	r3,r3,60
   2a188:	10c5883a 	add	r2,r2,r3
   2a18c:	10800104 	addi	r2,r2,4
   2a190:	10000015 	stw	zero,0(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
   2a194:	008001b4 	movhi	r2,6
   2a198:	10b7c104 	addi	r2,r2,-8444
   2a19c:	e0fffe17 	ldw	r3,-8(fp)
   2a1a0:	18c00f24 	muli	r3,r3,60
   2a1a4:	10c5883a 	add	r2,r2,r3
   2a1a8:	10800e04 	addi	r2,r2,56
   2a1ac:	10800017 	ldw	r2,0(r2)
   2a1b0:	10000a26 	beq	r2,zero,2a1dc <dhc_set_state+0x98>
      dhc_states[iface].callback(iface,state);
   2a1b4:	008001b4 	movhi	r2,6
   2a1b8:	10b7c104 	addi	r2,r2,-8444
   2a1bc:	e0fffe17 	ldw	r3,-8(fp)
   2a1c0:	18c00f24 	muli	r3,r3,60
   2a1c4:	10c5883a 	add	r2,r2,r3
   2a1c8:	10800e04 	addi	r2,r2,56
   2a1cc:	10800017 	ldw	r2,0(r2)
   2a1d0:	e13ffe17 	ldw	r4,-8(fp)
   2a1d4:	e17fff17 	ldw	r5,-4(fp)
   2a1d8:	103ee83a 	callr	r2
}
   2a1dc:	e037883a 	mov	sp,fp
   2a1e0:	dfc00117 	ldw	ra,4(sp)
   2a1e4:	df000017 	ldw	fp,0(sp)
   2a1e8:	dec00204 	addi	sp,sp,8
   2a1ec:	f800283a 	ret

0002a1f0 <find_opt>:
 * RETURNS:  Return pointer to that code if found, NULL if not found.
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
   2a1f0:	defffc04 	addi	sp,sp,-16
   2a1f4:	df000315 	stw	fp,12(sp)
   2a1f8:	df000304 	addi	fp,sp,12
   2a1fc:	2005883a 	mov	r2,r4
   2a200:	e17fff15 	stw	r5,-4(fp)
   2a204:	e0bffe05 	stb	r2,-8(fp)
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
   2a208:	e0bfff17 	ldw	r2,-4(fp)
   2a20c:	10804e04 	addi	r2,r2,312
   2a210:	e0bffd15 	stw	r2,-12(fp)

   while (opts < end)
   2a214:	00001e06 	br	2a290 <find_opt+0xa0>
   {
      if (*opts == opcode) /* found it */
   2a218:	e0bfff17 	ldw	r2,-4(fp)
   2a21c:	10800003 	ldbu	r2,0(r2)
   2a220:	10c03fcc 	andi	r3,r2,255
   2a224:	e0bffe03 	ldbu	r2,-8(fp)
   2a228:	1880021e 	bne	r3,r2,2a234 <find_opt+0x44>
         return opts;
   2a22c:	e0bfff17 	ldw	r2,-4(fp)
   2a230:	00001b06 	br	2a2a0 <find_opt+0xb0>
      if (*opts == DHOP_END)  /* end of options; opcode not found */
   2a234:	e0bfff17 	ldw	r2,-4(fp)
   2a238:	10800003 	ldbu	r2,0(r2)
   2a23c:	10803fcc 	andi	r2,r2,255
   2a240:	10803fd8 	cmpnei	r2,r2,255
   2a244:	1000021e 	bne	r2,zero,2a250 <find_opt+0x60>
         return NULL;
   2a248:	0005883a 	mov	r2,zero
   2a24c:	00001406 	br	2a2a0 <find_opt+0xb0>
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
   2a250:	e0bfff17 	ldw	r2,-4(fp)
   2a254:	10800003 	ldbu	r2,0(r2)
   2a258:	10803fcc 	andi	r2,r2,255
   2a25c:	1000041e 	bne	r2,zero,2a270 <find_opt+0x80>
         opts++;
   2a260:	e0bfff17 	ldw	r2,-4(fp)
   2a264:	10800044 	addi	r2,r2,1
   2a268:	e0bfff15 	stw	r2,-4(fp)
   2a26c:	00000806 	br	2a290 <find_opt+0xa0>
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
   2a270:	e0bfff17 	ldw	r2,-4(fp)
   2a274:	10800044 	addi	r2,r2,1
   2a278:	10800003 	ldbu	r2,0(r2)
   2a27c:	10803fcc 	andi	r2,r2,255
   2a280:	10800084 	addi	r2,r2,2
   2a284:	e0ffff17 	ldw	r3,-4(fp)
   2a288:	1885883a 	add	r2,r3,r2
   2a28c:	e0bfff15 	stw	r2,-4(fp)
u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */

   while (opts < end)
   2a290:	e0ffff17 	ldw	r3,-4(fp)
   2a294:	e0bffd17 	ldw	r2,-12(fp)
   2a298:	18bfdf36 	bltu	r3,r2,2a218 <__alt_mem_descriptor_memory+0xdefea218>
         opts++;
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
   }
   /* no DHOP_END option?? */
   return NULL;
   2a29c:	0005883a 	mov	r2,zero
}
   2a2a0:	e037883a 	mov	sp,fp
   2a2a4:	df000017 	ldw	fp,0(sp)
   2a2a8:	dec00104 	addi	sp,sp,4
   2a2ac:	f800283a 	ret

0002a2b0 <pk_init>:
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
   2a2b0:	defff804 	addi	sp,sp,-32
   2a2b4:	dfc00715 	stw	ra,28(sp)
   2a2b8:	df000615 	stw	fp,24(sp)
   2a2bc:	df000604 	addi	fp,sp,24
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
   2a2c0:	d0e03517 	ldw	r3,-32556(gp)
   2a2c4:	d0a03317 	ldw	r2,-32564(gp)
   2a2c8:	1885883a 	add	r2,r3,r2
   2a2cc:	e0bffd15 	stw	r2,-12(fp)
   u_char align_req;
   
#ifdef ALIGN_BUFS
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
   2a2d0:	e03ffe05 	stb	zero,-8(fp)
#endif

   for (i = 0; i < numpkts; i++)
   2a2d4:	e03ffa15 	stw	zero,-24(fp)
   2a2d8:	00007f06 	br	2a4d8 <pk_init+0x228>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
   2a2dc:	01000d04 	movi	r4,52
   2a2e0:	002bce00 	call	2bce0 <npalloc>
   2a2e4:	e0bfff15 	stw	r2,-4(fp)
      if (packet == NULL)
   2a2e8:	e0bfff17 	ldw	r2,-4(fp)
   2a2ec:	1000011e 	bne	r2,zero,2a2f4 <pk_init+0x44>
         goto no_pkt_buf;
   2a2f0:	00008806 	br	2a514 <pk_init+0x264>

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
   2a2f4:	e0bffa17 	ldw	r2,-24(fp)
   2a2f8:	10800f30 	cmpltui	r2,r2,60
   2a2fc:	1000051e 	bne	r2,zero,2a314 <pk_init+0x64>
      {
         dprintf("pk_init: bad define\n");
   2a300:	01000174 	movhi	r4,5
   2a304:	2139f704 	addi	r4,r4,-6180
   2a308:	00083740 	call	8374 <puts>
         return -1;
   2a30c:	00bfffc4 	movi	r2,-1
   2a310:	00008506 	br	2a528 <pk_init+0x278>
      }
      pktlog[i] = packet;     /* save for debugging */
   2a314:	008001b4 	movhi	r2,6
   2a318:	10b80604 	addi	r2,r2,-8168
   2a31c:	e0fffa17 	ldw	r3,-24(fp)
   2a320:	18c7883a 	add	r3,r3,r3
   2a324:	18c7883a 	add	r3,r3,r3
   2a328:	10c5883a 	add	r2,r2,r3
   2a32c:	e0ffff17 	ldw	r3,-4(fp)
   2a330:	10c00015 	stw	r3,0(r2)
#endif

      packet->nb_tstamp = 0L;
   2a334:	e0bfff17 	ldw	r2,-4(fp)
   2a338:	10000515 	stw	zero,20(r2)

      if (i < bigbufs)
   2a33c:	d0a03517 	ldw	r2,-32556(gp)
   2a340:	e0fffa17 	ldw	r3,-24(fp)
   2a344:	1880312e 	bgeu	r3,r2,2a40c <pk_init+0x15c>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
   2a348:	d0a03617 	ldw	r2,-32552(gp)
   2a34c:	10800144 	addi	r2,r2,5
   2a350:	1009883a 	mov	r4,r2
   2a354:	002bd500 	call	2bd50 <ncpalloc>
   2a358:	1007883a 	mov	r3,r2
   2a35c:	e0bfff17 	ldw	r2,-4(fp)
   2a360:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
   2a364:	e0bfff17 	ldw	r2,-4(fp)
   2a368:	10800117 	ldw	r2,4(r2)
   2a36c:	1000011e 	bne	r2,zero,2a374 <pk_init+0xc4>
               goto no_pkt_buf;
   2a370:	00006806 	br	2a514 <pk_init+0x264>

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
   2a374:	e03ffb15 	stw	zero,-20(fp)
   2a378:	00000906 	br	2a3a0 <pk_init+0xf0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
   2a37c:	e0bfff17 	ldw	r2,-4(fp)
   2a380:	10c00117 	ldw	r3,4(r2)
   2a384:	e0bffb17 	ldw	r2,-20(fp)
   2a388:	1885883a 	add	r2,r3,r2
   2a38c:	00c01344 	movi	r3,77
   2a390:	10c00005 	stb	r3,0(r2)
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
   2a394:	e0bffb17 	ldw	r2,-20(fp)
   2a398:	10800044 	addi	r2,r2,1
   2a39c:	e0bffb15 	stw	r2,-20(fp)
   2a3a0:	e0bffb17 	ldw	r2,-20(fp)
   2a3a4:	10800110 	cmplti	r2,r2,4
   2a3a8:	103ff41e 	bne	r2,zero,2a37c <__alt_mem_descriptor_memory+0xdefea37c>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
   2a3ac:	e0bfff17 	ldw	r2,-4(fp)
   2a3b0:	10c00117 	ldw	r3,4(r2)
   2a3b4:	d0a03617 	ldw	r2,-32552(gp)
   2a3b8:	10800104 	addi	r2,r2,4
   2a3bc:	1885883a 	add	r2,r3,r2
   2a3c0:	00c01344 	movi	r3,77
   2a3c4:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
   2a3c8:	e0bfff17 	ldw	r2,-4(fp)
   2a3cc:	10800117 	ldw	r2,4(r2)
   2a3d0:	10c00104 	addi	r3,r2,4
   2a3d4:	e0bfff17 	ldw	r2,-4(fp)
   2a3d8:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
   2a3dc:	e0bfff17 	ldw	r2,-4(fp)
   2a3e0:	10800117 	ldw	r2,4(r2)
   2a3e4:	1000011e 	bne	r2,zero,2a3ec <pk_init+0x13c>
            goto no_pkt_buf;
   2a3e8:	00004a06 	br	2a514 <pk_init+0x264>
         packet->nb_blen = bigbufsiz;
   2a3ec:	d0e03617 	ldw	r3,-32552(gp)
   2a3f0:	e0bfff17 	ldw	r2,-4(fp)
   2a3f4:	10c00215 	stw	r3,8(r2)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
   2a3f8:	010001b4 	movhi	r4,6
   2a3fc:	21384204 	addi	r4,r4,-7928
   2a400:	e17fff17 	ldw	r5,-4(fp)
   2a404:	002aacc0 	call	2aacc <putq>
   2a408:	00003006 	br	2a4cc <pk_init+0x21c>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
   2a40c:	d0a03417 	ldw	r2,-32560(gp)
   2a410:	10800144 	addi	r2,r2,5
   2a414:	1009883a 	mov	r4,r2
   2a418:	002bd500 	call	2bd50 <ncpalloc>
   2a41c:	1007883a 	mov	r3,r2
   2a420:	e0bfff17 	ldw	r2,-4(fp)
   2a424:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
   2a428:	e0bfff17 	ldw	r2,-4(fp)
   2a42c:	10800117 	ldw	r2,4(r2)
   2a430:	1000011e 	bne	r2,zero,2a438 <pk_init+0x188>
               goto no_pkt_buf;
   2a434:	00003706 	br	2a514 <pk_init+0x264>

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
   2a438:	e03ffc15 	stw	zero,-16(fp)
   2a43c:	00000906 	br	2a464 <pk_init+0x1b4>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
   2a440:	e0bfff17 	ldw	r2,-4(fp)
   2a444:	10c00117 	ldw	r3,4(r2)
   2a448:	e0bffc17 	ldw	r2,-16(fp)
   2a44c:	1885883a 	add	r2,r3,r2
   2a450:	00c01344 	movi	r3,77
   2a454:	10c00005 	stb	r3,0(r2)
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
   2a458:	e0bffc17 	ldw	r2,-16(fp)
   2a45c:	10800044 	addi	r2,r2,1
   2a460:	e0bffc15 	stw	r2,-16(fp)
   2a464:	e0bffc17 	ldw	r2,-16(fp)
   2a468:	10800110 	cmplti	r2,r2,4
   2a46c:	103ff41e 	bne	r2,zero,2a440 <__alt_mem_descriptor_memory+0xdefea440>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
   2a470:	e0bfff17 	ldw	r2,-4(fp)
   2a474:	10c00117 	ldw	r3,4(r2)
   2a478:	d0a03417 	ldw	r2,-32560(gp)
   2a47c:	10800104 	addi	r2,r2,4
   2a480:	1885883a 	add	r2,r3,r2
   2a484:	00c01344 	movi	r3,77
   2a488:	10c00005 	stb	r3,0(r2)
            packet->nb_buff += ALIGN_TYPE;
   2a48c:	e0bfff17 	ldw	r2,-4(fp)
   2a490:	10800117 	ldw	r2,4(r2)
   2a494:	10c00104 	addi	r3,r2,4
   2a498:	e0bfff17 	ldw	r2,-4(fp)
   2a49c:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
   2a4a0:	e0bfff17 	ldw	r2,-4(fp)
   2a4a4:	10800117 	ldw	r2,4(r2)
   2a4a8:	1000011e 	bne	r2,zero,2a4b0 <pk_init+0x200>
            goto no_pkt_buf;
   2a4ac:	00001906 	br	2a514 <pk_init+0x264>
         packet->nb_blen = lilbufsiz;
   2a4b0:	d0e03417 	ldw	r3,-32560(gp)
   2a4b4:	e0bfff17 	ldw	r2,-4(fp)
   2a4b8:	10c00215 	stw	r3,8(r2)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
   2a4bc:	010001b4 	movhi	r4,6
   2a4c0:	2137fd04 	addi	r4,r4,-8204
   2a4c4:	e17fff17 	ldw	r5,-4(fp)
   2a4c8:	002aacc0 	call	2aacc <putq>
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
   2a4cc:	e0bffa17 	ldw	r2,-24(fp)
   2a4d0:	10800044 	addi	r2,r2,1
   2a4d4:	e0bffa15 	stw	r2,-24(fp)
   2a4d8:	e0fffa17 	ldw	r3,-24(fp)
   2a4dc:	e0bffd17 	ldw	r2,-12(fp)
   2a4e0:	18bf7e36 	bltu	r3,r2,2a2dc <__alt_mem_descriptor_memory+0xdefea2dc>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
         q_add(&lilfreeq, packet);        /* save it in little free queue */
      }
   }
   bigfreeq.q_min = bigbufs;
   2a4e4:	d0a03517 	ldw	r2,-32556(gp)
   2a4e8:	1007883a 	mov	r3,r2
   2a4ec:	008001b4 	movhi	r2,6
   2a4f0:	10b84204 	addi	r2,r2,-7928
   2a4f4:	10c00415 	stw	r3,16(r2)
   lilfreeq.q_min = lilbufs;
   2a4f8:	d0a03317 	ldw	r2,-32564(gp)
   2a4fc:	1007883a 	mov	r3,r2
   2a500:	008001b4 	movhi	r2,6
   2a504:	10b7fd04 	addi	r2,r2,-8204
   2a508:	10c00415 	stw	r3,16(r2)
   heap_curr_mem_hi_watermark = 0;
   /* set the heap's access type to blocking */
   heap_type = HEAP_ACCESS_BLOCKING;
#endif

   return 0;
   2a50c:	0005883a 	mov	r2,zero
   2a510:	00000506 	br	2a528 <pk_init+0x278>

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
   2a514:	01000174 	movhi	r4,5
   2a518:	2139fc04 	addi	r4,r4,-6160
   2a51c:	e17ffa17 	ldw	r5,-24(fp)
   2a520:	00080f80 	call	80f8 <printf>
#endif
   return(-1);
   2a524:	00bfffc4 	movi	r2,-1
}
   2a528:	e037883a 	mov	sp,fp
   2a52c:	dfc00117 	ldw	ra,4(sp)
   2a530:	df000017 	ldw	fp,0(sp)
   2a534:	dec00204 	addi	sp,sp,8
   2a538:	f800283a 	ret

0002a53c <pk_alloc>:
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
   2a53c:	defffc04 	addi	sp,sp,-16
   2a540:	dfc00315 	stw	ra,12(sp)
   2a544:	df000215 	stw	fp,8(sp)
   2a548:	df000204 	addi	fp,sp,8
   2a54c:	e13fff15 	stw	r4,-4(fp)
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
   2a550:	d0e03617 	ldw	r3,-32552(gp)
   2a554:	e0bfff17 	ldw	r2,-4(fp)
   2a558:	1880022e 	bgeu	r3,r2,2a564 <pk_alloc+0x28>
   {
#ifdef HEAPBUFS
      if ((p = pk_alloc_heapbuf (len)) == NULL)
         return NULL;
#else
      return(NULL);
   2a55c:	0005883a 	mov	r2,zero
   2a560:	00002406 	br	2a5f4 <pk_alloc+0xb8>
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
   2a564:	d0e03417 	ldw	r3,-32560(gp)
   2a568:	e0bfff17 	ldw	r2,-4(fp)
   2a56c:	18800436 	bltu	r3,r2,2a580 <pk_alloc+0x44>
   2a570:	008001b4 	movhi	r2,6
   2a574:	10b7fd04 	addi	r2,r2,-8204
   2a578:	10800217 	ldw	r2,8(r2)
   2a57c:	1000051e 	bne	r2,zero,2a594 <pk_alloc+0x58>
         p = (PACKET)getq(&bigfreeq);
   2a580:	010001b4 	movhi	r4,6
   2a584:	21384204 	addi	r4,r4,-7928
   2a588:	002aa140 	call	2aa14 <getq>
   2a58c:	e0bffe15 	stw	r2,-8(fp)
   2a590:	00000406 	br	2a5a4 <pk_alloc+0x68>
      else
         p = (PACKET)getq(&lilfreeq);
   2a594:	010001b4 	movhi	r4,6
   2a598:	2137fd04 	addi	r4,r4,-8204
   2a59c:	002aa140 	call	2aa14 <getq>
   2a5a0:	e0bffe15 	stw	r2,-8(fp)

      if (!p)
   2a5a4:	e0bffe17 	ldw	r2,-8(fp)
   2a5a8:	1000021e 	bne	r2,zero,2a5b4 <pk_alloc+0x78>
         return NULL;
   2a5ac:	0005883a 	mov	r2,zero
   2a5b0:	00001006 	br	2a5f4 <pk_alloc+0xb8>
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
   2a5b4:	e0bffe17 	ldw	r2,-8(fp)
   2a5b8:	10c00117 	ldw	r3,4(r2)
   2a5bc:	00800174 	movhi	r2,5
   2a5c0:	108f9704 	addi	r2,r2,15964
   2a5c4:	10800017 	ldw	r2,0(r2)
   2a5c8:	1887883a 	add	r3,r3,r2
   2a5cc:	e0bffe17 	ldw	r2,-8(fp)
   2a5d0:	10c00315 	stw	r3,12(r2)
   p->nb_plen = 0;   /* no protocol data there yet */
   2a5d4:	e0bffe17 	ldw	r2,-8(fp)
   2a5d8:	10000415 	stw	zero,16(r2)
   p->net = NULL;
   2a5dc:	e0bffe17 	ldw	r2,-8(fp)
   2a5e0:	10000615 	stw	zero,24(r2)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
   2a5e4:	e0bffe17 	ldw	r2,-8(fp)
   2a5e8:	00c00044 	movi	r3,1
   2a5ec:	10c00915 	stw	r3,36(r2)

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
   2a5f0:	e0bffe17 	ldw	r2,-8(fp)
}
   2a5f4:	e037883a 	mov	sp,fp
   2a5f8:	dfc00117 	ldw	ra,4(sp)
   2a5fc:	df000017 	ldw	fp,0(sp)
   2a600:	dec00204 	addi	sp,sp,8
   2a604:	f800283a 	ret

0002a608 <pk_validate>:
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
   2a608:	defffb04 	addi	sp,sp,-20
   2a60c:	dfc00415 	stw	ra,16(sp)
   2a610:	df000315 	stw	fp,12(sp)
   2a614:	df000304 	addi	fp,sp,12
   2a618:	e13fff15 	stw	r4,-4(fp)
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
   2a61c:	e0bfff17 	ldw	r2,-4(fp)
   2a620:	10800017 	ldw	r2,0(r2)
   2a624:	10000e26 	beq	r2,zero,2a660 <pk_validate+0x58>
   2a628:	e0bfff17 	ldw	r2,-4(fp)
   2a62c:	10800917 	ldw	r2,36(r2)
   2a630:	10000b26 	beq	r2,zero,2a660 <pk_validate+0x58>
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
   2a634:	002b2e40 	call	2b2e4 <irq_Mask>
   2a638:	008001b4 	movhi	r2,6
   2a63c:	10b80204 	addi	r2,r2,-8184
   2a640:	10800317 	ldw	r2,12(r2)
   2a644:	10c00044 	addi	r3,r2,1
   2a648:	008001b4 	movhi	r2,6
   2a64c:	10b80204 	addi	r2,r2,-8184
   2a650:	10c00315 	stw	r3,12(r2)
   2a654:	002b3400 	call	2b340 <irq_Unmask>
      return -1;
   2a658:	00bfffc4 	movi	r2,-1
   2a65c:	00008806 	br	2a880 <pk_validate+0x278>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
   2a660:	e0bfff17 	ldw	r2,-4(fp)
   2a664:	10c00217 	ldw	r3,8(r2)
   2a668:	d0a03617 	ldw	r2,-32552(gp)
   2a66c:	1880201e 	bne	r3,r2,2a6f0 <pk_validate+0xe8>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
   2a670:	002b2e40 	call	2b2e4 <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
   2a674:	008001b4 	movhi	r2,6
   2a678:	10b84204 	addi	r2,r2,-7928
   2a67c:	10800017 	ldw	r2,0(r2)
   2a680:	e0bffd15 	stw	r2,-12(fp)
   2a684:	00001606 	br	2a6e0 <pk_validate+0xd8>
            if (p == pkt)
   2a688:	e0fffd17 	ldw	r3,-12(fp)
   2a68c:	e0bfff17 	ldw	r2,-4(fp)
   2a690:	1880101e 	bne	r3,r2,2a6d4 <pk_validate+0xcc>
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
   2a694:	01000174 	movhi	r4,5
   2a698:	213a0704 	addi	r4,r4,-6116
   2a69c:	e17fff17 	ldw	r5,-4(fp)
   2a6a0:	00080f80 	call	80f8 <printf>
               EXIT_CRIT_SECTION(&bigfreeq);
   2a6a4:	002b3400 	call	2b340 <irq_Unmask>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
   2a6a8:	002b2e40 	call	2b2e4 <irq_Mask>
   2a6ac:	008001b4 	movhi	r2,6
   2a6b0:	10b80204 	addi	r2,r2,-8184
   2a6b4:	10800217 	ldw	r2,8(r2)
   2a6b8:	10c00044 	addi	r3,r2,1
   2a6bc:	008001b4 	movhi	r2,6
   2a6c0:	10b80204 	addi	r2,r2,-8184
   2a6c4:	10c00215 	stw	r3,8(r2)
   2a6c8:	002b3400 	call	2b340 <irq_Unmask>
               return -1;
   2a6cc:	00bfffc4 	movi	r2,-1
   2a6d0:	00006b06 	br	2a880 <pk_validate+0x278>
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
      {
         ENTER_CRIT_SECTION(&bigfreeq);
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
   2a6d4:	e0bffd17 	ldw	r2,-12(fp)
   2a6d8:	10800017 	ldw	r2,0(r2)
   2a6dc:	e0bffd15 	stw	r2,-12(fp)
   2a6e0:	e0bffd17 	ldw	r2,-12(fp)
   2a6e4:	103fe81e 	bne	r2,zero,2a688 <__alt_mem_descriptor_memory+0xdefea688>
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
               EXIT_CRIT_SECTION(&bigfreeq);
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
               return -1;
            }
         EXIT_CRIT_SECTION(&bigfreeq);
   2a6e8:	002b3400 	call	2b340 <irq_Unmask>
   2a6ec:	00002f06 	br	2a7ac <pk_validate+0x1a4>
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
   2a6f0:	e0bfff17 	ldw	r2,-4(fp)
   2a6f4:	10c00217 	ldw	r3,8(r2)
   2a6f8:	d0a03417 	ldw	r2,-32560(gp)
   2a6fc:	1880201e 	bne	r3,r2,2a780 <pk_validate+0x178>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
   2a700:	002b2e40 	call	2b2e4 <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
   2a704:	008001b4 	movhi	r2,6
   2a708:	10b7fd04 	addi	r2,r2,-8204
   2a70c:	10800017 	ldw	r2,0(r2)
   2a710:	e0bffd15 	stw	r2,-12(fp)
   2a714:	00001606 	br	2a770 <pk_validate+0x168>
            if (p == pkt)
   2a718:	e0fffd17 	ldw	r3,-12(fp)
   2a71c:	e0bfff17 	ldw	r2,-4(fp)
   2a720:	1880101e 	bne	r3,r2,2a764 <pk_validate+0x15c>
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
   2a724:	01000174 	movhi	r4,5
   2a728:	213a1104 	addi	r4,r4,-6076
   2a72c:	e17fff17 	ldw	r5,-4(fp)
   2a730:	00080f80 	call	80f8 <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
   2a734:	002b3400 	call	2b340 <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
   2a738:	002b2e40 	call	2b2e4 <irq_Mask>
   2a73c:	008001b4 	movhi	r2,6
   2a740:	10b80204 	addi	r2,r2,-8184
   2a744:	10800217 	ldw	r2,8(r2)
   2a748:	10c00044 	addi	r3,r2,1
   2a74c:	008001b4 	movhi	r2,6
   2a750:	10b80204 	addi	r2,r2,-8184
   2a754:	10c00215 	stw	r3,8(r2)
   2a758:	002b3400 	call	2b340 <irq_Unmask>
            return -1;
   2a75c:	00bfffc4 	movi	r2,-1
   2a760:	00004706 	br	2a880 <pk_validate+0x278>
         EXIT_CRIT_SECTION(&bigfreeq);
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
      {
         ENTER_CRIT_SECTION(&lilfreeq);
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
   2a764:	e0bffd17 	ldw	r2,-12(fp)
   2a768:	10800017 	ldw	r2,0(r2)
   2a76c:	e0bffd15 	stw	r2,-12(fp)
   2a770:	e0bffd17 	ldw	r2,-12(fp)
   2a774:	103fe81e 	bne	r2,zero,2a718 <__alt_mem_descriptor_memory+0xdefea718>
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
            EXIT_CRIT_SECTION(&lilfreeq);
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
            return -1;
         }
         EXIT_CRIT_SECTION(&lilfreeq);
   2a778:	002b3400 	call	2b340 <irq_Unmask>
   2a77c:	00000b06 	br	2a7ac <pk_validate+0x1a4>
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
   2a780:	002b2e40 	call	2b2e4 <irq_Mask>
   2a784:	008001b4 	movhi	r2,6
   2a788:	10b80204 	addi	r2,r2,-8184
   2a78c:	10800017 	ldw	r2,0(r2)
   2a790:	10c00044 	addi	r3,r2,1
   2a794:	008001b4 	movhi	r2,6
   2a798:	10b80204 	addi	r2,r2,-8184
   2a79c:	10c00015 	stw	r3,0(r2)
   2a7a0:	002b3400 	call	2b340 <irq_Unmask>
         return -1;
   2a7a4:	00bfffc4 	movi	r2,-1
   2a7a8:	00003506 	br	2a880 <pk_validate+0x278>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
   2a7ac:	00800104 	movi	r2,4
   2a7b0:	e0bffe15 	stw	r2,-8(fp)
   2a7b4:	00001906 	br	2a81c <pk_validate+0x214>
   {
      if (*(pkt->nb_buff - j) != 'M')
   2a7b8:	e0bfff17 	ldw	r2,-4(fp)
   2a7bc:	10c00117 	ldw	r3,4(r2)
   2a7c0:	e0bffe17 	ldw	r2,-8(fp)
   2a7c4:	0085c83a 	sub	r2,zero,r2
   2a7c8:	1885883a 	add	r2,r3,r2
   2a7cc:	10800003 	ldbu	r2,0(r2)
   2a7d0:	10803fcc 	andi	r2,r2,255
   2a7d4:	1080201c 	xori	r2,r2,128
   2a7d8:	10bfe004 	addi	r2,r2,-128
   2a7dc:	10801360 	cmpeqi	r2,r2,77
   2a7e0:	10000b1e 	bne	r2,zero,2a810 <pk_validate+0x208>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
   2a7e4:	002b2e40 	call	2b2e4 <irq_Mask>
   2a7e8:	008001b4 	movhi	r2,6
   2a7ec:	10b80204 	addi	r2,r2,-8184
   2a7f0:	10800117 	ldw	r2,4(r2)
   2a7f4:	10c00044 	addi	r3,r2,1
   2a7f8:	008001b4 	movhi	r2,6
   2a7fc:	10b80204 	addi	r2,r2,-8184
   2a800:	10c00115 	stw	r3,4(r2)
   2a804:	002b3400 	call	2b340 <irq_Unmask>
         return -1;
   2a808:	00bfffc4 	movi	r2,-1
   2a80c:	00001c06 	br	2a880 <pk_validate+0x278>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
   2a810:	e0bffe17 	ldw	r2,-8(fp)
   2a814:	10bfffc4 	addi	r2,r2,-1
   2a818:	e0bffe15 	stw	r2,-8(fp)
   2a81c:	e0bffe17 	ldw	r2,-8(fp)
   2a820:	00bfe516 	blt	zero,r2,2a7b8 <__alt_mem_descriptor_memory+0xdefea7b8>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
         return -1;
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
   2a824:	e0bfff17 	ldw	r2,-4(fp)
   2a828:	10c00117 	ldw	r3,4(r2)
   2a82c:	e0bfff17 	ldw	r2,-4(fp)
   2a830:	10800217 	ldw	r2,8(r2)
   2a834:	1885883a 	add	r2,r3,r2
   2a838:	10800003 	ldbu	r2,0(r2)
   2a83c:	10803fcc 	andi	r2,r2,255
   2a840:	1080201c 	xori	r2,r2,128
   2a844:	10bfe004 	addi	r2,r2,-128
   2a848:	10801360 	cmpeqi	r2,r2,77
   2a84c:	10000b1e 	bne	r2,zero,2a87c <pk_validate+0x274>
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
   2a850:	002b2e40 	call	2b2e4 <irq_Mask>
   2a854:	008001b4 	movhi	r2,6
   2a858:	10b80204 	addi	r2,r2,-8184
   2a85c:	10800117 	ldw	r2,4(r2)
   2a860:	10c00044 	addi	r3,r2,1
   2a864:	008001b4 	movhi	r2,6
   2a868:	10b80204 	addi	r2,r2,-8184
   2a86c:	10c00115 	stw	r3,4(r2)
   2a870:	002b3400 	call	2b340 <irq_Unmask>
      return -1;
   2a874:	00bfffc4 	movi	r2,-1
   2a878:	00000106 	br	2a880 <pk_validate+0x278>
   }
#endif /* NPDEBUG */

   return 0;
   2a87c:	0005883a 	mov	r2,zero
}
   2a880:	e037883a 	mov	sp,fp
   2a884:	dfc00117 	ldw	ra,4(sp)
   2a888:	df000017 	ldw	fp,0(sp)
   2a88c:	dec00204 	addi	sp,sp,8
   2a890:	f800283a 	ret

0002a894 <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
   2a894:	defffc04 	addi	sp,sp,-16
   2a898:	dfc00315 	stw	ra,12(sp)
   2a89c:	df000215 	stw	fp,8(sp)
   2a8a0:	df000204 	addi	fp,sp,8
   2a8a4:	e13fff15 	stw	r4,-4(fp)
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
   2a8a8:	e13fff17 	ldw	r4,-4(fp)
   2a8ac:	002a6080 	call	2a608 <pk_validate>
   2a8b0:	e0bffe15 	stw	r2,-8(fp)
      if (e)
   2a8b4:	e0bffe17 	ldw	r2,-8(fp)
   2a8b8:	10000126 	beq	r2,zero,2a8c0 <pk_free+0x2c>
         {
            pkt = pknext;
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
   2a8bc:	00001906 	br	2a924 <pk_free+0x90>
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
   2a8c0:	e0bfff17 	ldw	r2,-4(fp)
   2a8c4:	10800917 	ldw	r2,36(r2)
   2a8c8:	113fffc4 	addi	r4,r2,-1
   2a8cc:	e0ffff17 	ldw	r3,-4(fp)
   2a8d0:	19000915 	stw	r4,36(r3)
   2a8d4:	108000b0 	cmpltui	r2,r2,2
   2a8d8:	1000011e 	bne	r2,zero,2a8e0 <pk_free+0x4c>
         return;  /* packet was cloned, don't delete yet */
   2a8dc:	00001106 	br	2a924 <pk_free+0x90>
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
   2a8e0:	e0bfff17 	ldw	r2,-4(fp)
   2a8e4:	10c00217 	ldw	r3,8(r2)
   2a8e8:	d0a03617 	ldw	r2,-32552(gp)
   2a8ec:	1880051e 	bne	r3,r2,2a904 <pk_free+0x70>
            q_add(&bigfreeq, (qp)pkt);
   2a8f0:	010001b4 	movhi	r4,6
   2a8f4:	21384204 	addi	r4,r4,-7928
   2a8f8:	e17fff17 	ldw	r5,-4(fp)
   2a8fc:	002aacc0 	call	2aacc <putq>
   2a900:	00000806 	br	2a924 <pk_free+0x90>
         else if (pkt->nb_blen == lilbufsiz)
   2a904:	e0bfff17 	ldw	r2,-4(fp)
   2a908:	10c00217 	ldw	r3,8(r2)
   2a90c:	d0a03417 	ldw	r2,-32560(gp)
   2a910:	1880041e 	bne	r3,r2,2a924 <pk_free+0x90>
            q_add(&lilfreeq, (qp)pkt);
   2a914:	010001b4 	movhi	r4,6
   2a918:	2137fd04 	addi	r4,r4,-8204
   2a91c:	e17fff17 	ldw	r5,-4(fp)
   2a920:	002aacc0 	call	2aacc <putq>
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
   2a924:	e037883a 	mov	sp,fp
   2a928:	dfc00117 	ldw	ra,4(sp)
   2a92c:	df000017 	ldw	fp,0(sp)
   2a930:	dec00204 	addi	sp,sp,8
   2a934:	f800283a 	ret

0002a938 <pk_get_max_intrsafe_buf_len>:
 *
 * OUTPUT: This function always returns the length of a big buffer (bigbufsiz).
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
   2a938:	deffff04 	addi	sp,sp,-4
   2a93c:	df000015 	stw	fp,0(sp)
   2a940:	d839883a 	mov	fp,sp
   return bigbufsiz;
   2a944:	d0a03617 	ldw	r2,-32552(gp)
}
   2a948:	e037883a 	mov	sp,fp
   2a94c:	df000017 	ldw	fp,0(sp)
   2a950:	dec00104 	addi	sp,sp,4
   2a954:	f800283a 	ret

0002a958 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
   2a958:	defff904 	addi	sp,sp,-28
   2a95c:	dfc00615 	stw	ra,24(sp)
   2a960:	df000515 	stw	fp,20(sp)
   2a964:	df000504 	addi	fp,sp,20
   2a968:	e13fff15 	stw	r4,-4(fp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
   2a96c:	01000084 	movi	r4,2
   2a970:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
   2a974:	002b2e40 	call	2b2e4 <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
   2a978:	008001b4 	movhi	r2,6
   2a97c:	10b80204 	addi	r2,r2,-8184
   2a980:	10c00017 	ldw	r3,0(r2)
   2a984:	e0fffb15 	stw	r3,-20(fp)
   2a988:	10c00117 	ldw	r3,4(r2)
   2a98c:	e0fffc15 	stw	r3,-16(fp)
   2a990:	10c00217 	ldw	r3,8(r2)
   2a994:	e0fffd15 	stw	r3,-12(fp)
   2a998:	10800317 	ldw	r2,12(r2)
   2a99c:	e0bffe15 	stw	r2,-8(fp)
   EXIT_CRIT_SECTION(&memestats);
   2a9a0:	002b3400 	call	2b340 <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2a9a4:	01000084 	movi	r4,2
   2a9a8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
   2a9ac:	e13fff17 	ldw	r4,-4(fp)
   2a9b0:	01400174 	movhi	r5,5
   2a9b4:	297a1b04 	addi	r5,r5,-6036
   2a9b8:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
   2a9bc:	e0fffb17 	ldw	r3,-20(fp)
   2a9c0:	e0bffc17 	ldw	r2,-16(fp)
   2a9c4:	e13fff17 	ldw	r4,-4(fp)
   2a9c8:	01400174 	movhi	r5,5
   2a9cc:	297a2404 	addi	r5,r5,-6000
   2a9d0:	180d883a 	mov	r6,r3
   2a9d4:	100f883a 	mov	r7,r2
   2a9d8:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
   2a9dc:	e0fffd17 	ldw	r3,-12(fp)
   2a9e0:	e0bffe17 	ldw	r2,-8(fp)
   2a9e4:	e13fff17 	ldw	r4,-4(fp)
   2a9e8:	01400174 	movhi	r5,5
   2a9ec:	297a3104 	addi	r5,r5,-5948
   2a9f0:	180d883a 	mov	r6,r3
   2a9f4:	100f883a 	mov	r7,r2
   2a9f8:	002694c0 	call	2694c <ns_printf>

   return 0;
   2a9fc:	0005883a 	mov	r2,zero
}
   2aa00:	e037883a 	mov	sp,fp
   2aa04:	dfc00117 	ldw	ra,4(sp)
   2aa08:	df000017 	ldw	fp,0(sp)
   2aa0c:	dec00204 	addi	sp,sp,8
   2aa10:	f800283a 	ret

0002aa14 <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
   2aa14:	defffc04 	addi	sp,sp,-16
   2aa18:	dfc00315 	stw	ra,12(sp)
   2aa1c:	df000215 	stw	fp,8(sp)
   2aa20:	df000204 	addi	fp,sp,8
   2aa24:	e13fff15 	stw	r4,-4(fp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
   2aa28:	002b2e40 	call	2b2e4 <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
   2aa2c:	e0bfff17 	ldw	r2,-4(fp)
   2aa30:	10800017 	ldw	r2,0(r2)
   2aa34:	e0bffe15 	stw	r2,-8(fp)
   2aa38:	e0bffe17 	ldw	r2,-8(fp)
   2aa3c:	1000031e 	bne	r2,zero,2aa4c <getq+0x38>
   {
      EXIT_CRIT_SECTION(q);
   2aa40:	002b3400 	call	2b340 <irq_Unmask>
      return (0);             /* yes, show none */
   2aa44:	0005883a 	mov	r2,zero
   2aa48:	00001b06 	br	2aab8 <getq+0xa4>
   }

   q->q_head = temp->qe_next; /* else unlink */
   2aa4c:	e0bffe17 	ldw	r2,-8(fp)
   2aa50:	10c00017 	ldw	r3,0(r2)
   2aa54:	e0bfff17 	ldw	r2,-4(fp)
   2aa58:	10c00015 	stw	r3,0(r2)
   temp->qe_next = 0;         /* avoid dangling pointers */
   2aa5c:	e0bffe17 	ldw	r2,-8(fp)
   2aa60:	10000015 	stw	zero,0(r2)
   if (q->q_head == 0)        /* queue empty? */
   2aa64:	e0bfff17 	ldw	r2,-4(fp)
   2aa68:	10800017 	ldw	r2,0(r2)
   2aa6c:	1000021e 	bne	r2,zero,2aa78 <getq+0x64>
      q->q_tail = 0;          /* yes, update tail pointer too */
   2aa70:	e0bfff17 	ldw	r2,-4(fp)
   2aa74:	10000115 	stw	zero,4(r2)
   q->q_len--;                /* update queue length */
   2aa78:	e0bfff17 	ldw	r2,-4(fp)
   2aa7c:	10800217 	ldw	r2,8(r2)
   2aa80:	10ffffc4 	addi	r3,r2,-1
   2aa84:	e0bfff17 	ldw	r2,-4(fp)
   2aa88:	10c00215 	stw	r3,8(r2)
   if (q->q_len < q->q_min)
   2aa8c:	e0bfff17 	ldw	r2,-4(fp)
   2aa90:	10c00217 	ldw	r3,8(r2)
   2aa94:	e0bfff17 	ldw	r2,-4(fp)
   2aa98:	10800417 	ldw	r2,16(r2)
   2aa9c:	1880040e 	bge	r3,r2,2aab0 <getq+0x9c>
      q->q_min = q->q_len;
   2aaa0:	e0bfff17 	ldw	r2,-4(fp)
   2aaa4:	10c00217 	ldw	r3,8(r2)
   2aaa8:	e0bfff17 	ldw	r2,-4(fp)
   2aaac:	10c00415 	stw	r3,16(r2)

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
   2aab0:	002b3400 	call	2b340 <irq_Unmask>

   return ((void*)temp);
   2aab4:	e0bffe17 	ldw	r2,-8(fp)
}
   2aab8:	e037883a 	mov	sp,fp
   2aabc:	dfc00117 	ldw	ra,4(sp)
   2aac0:	df000017 	ldw	fp,0(sp)
   2aac4:	dec00204 	addi	sp,sp,8
   2aac8:	f800283a 	ret

0002aacc <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
   2aacc:	defffc04 	addi	sp,sp,-16
   2aad0:	dfc00315 	stw	ra,12(sp)
   2aad4:	df000215 	stw	fp,8(sp)
   2aad8:	df000204 	addi	fp,sp,8
   2aadc:	e13ffe15 	stw	r4,-8(fp)
   2aae0:	e17fff15 	stw	r5,-4(fp)
   ENTER_CRIT_SECTION(q);
   2aae4:	002b2e40 	call	2b2e4 <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
   2aae8:	e0bfff17 	ldw	r2,-4(fp)
   2aaec:	10000015 	stw	zero,0(r2)
   2aaf0:	e0bffe17 	ldw	r2,-8(fp)
   2aaf4:	10800017 	ldw	r2,0(r2)
   2aaf8:	1000041e 	bne	r2,zero,2ab0c <putq+0x40>
   2aafc:	e0bffe17 	ldw	r2,-8(fp)
   2ab00:	e0ffff17 	ldw	r3,-4(fp)
   2ab04:	10c00015 	stw	r3,0(r2)
   2ab08:	00000406 	br	2ab1c <putq+0x50>
   2ab0c:	e0bffe17 	ldw	r2,-8(fp)
   2ab10:	10800117 	ldw	r2,4(r2)
   2ab14:	e0ffff17 	ldw	r3,-4(fp)
   2ab18:	10c00015 	stw	r3,0(r2)
   2ab1c:	e0bffe17 	ldw	r2,-8(fp)
   2ab20:	e0ffff17 	ldw	r3,-4(fp)
   2ab24:	10c00115 	stw	r3,4(r2)
   2ab28:	e0bffe17 	ldw	r2,-8(fp)
   2ab2c:	10800217 	ldw	r2,8(r2)
   2ab30:	10c00044 	addi	r3,r2,1
   2ab34:	e0bffe17 	ldw	r2,-8(fp)
   2ab38:	10c00215 	stw	r3,8(r2)
   2ab3c:	e0bffe17 	ldw	r2,-8(fp)
   2ab40:	10800217 	ldw	r2,8(r2)
   2ab44:	e0fffe17 	ldw	r3,-8(fp)
   2ab48:	18c00317 	ldw	r3,12(r3)
   2ab4c:	1880040e 	bge	r3,r2,2ab60 <putq+0x94>
   2ab50:	e0bffe17 	ldw	r2,-8(fp)
   2ab54:	10c00217 	ldw	r3,8(r2)
   2ab58:	e0bffe17 	ldw	r2,-8(fp)
   2ab5c:	10c00315 	stw	r3,12(r2)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
   2ab60:	002b3400 	call	2b340 <irq_Unmask>
}
   2ab64:	e037883a 	mov	sp,fp
   2ab68:	dfc00117 	ldw	ra,4(sp)
   2ab6c:	df000017 	ldw	fp,0(sp)
   2ab70:	dec00204 	addi	sp,sp,8
   2ab74:	f800283a 	ret

0002ab78 <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
   2ab78:	defffa04 	addi	sp,sp,-24
   2ab7c:	dfc00515 	stw	ra,20(sp)
   2ab80:	df000415 	stw	fp,16(sp)
   2ab84:	df000404 	addi	fp,sp,16
   2ab88:	e13ffe15 	stw	r4,-8(fp)
   2ab8c:	e17fff15 	stw	r5,-4(fp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
   2ab90:	002b2e40 	call	2b2e4 <irq_Mask>
   qptr = q->q_head;
   2ab94:	e0bffe17 	ldw	r2,-8(fp)
   2ab98:	10800017 	ldw	r2,0(r2)
   2ab9c:	e0bffc15 	stw	r2,-16(fp)
   qlast = NULL;
   2aba0:	e03ffd15 	stw	zero,-12(fp)
   while (qptr)
   2aba4:	00002b06 	br	2ac54 <qdel+0xdc>
   {
      if (qptr == (qp)elt)
   2aba8:	e0fffc17 	ldw	r3,-16(fp)
   2abac:	e0bfff17 	ldw	r2,-4(fp)
   2abb0:	1880231e 	bne	r3,r2,2ac40 <qdel+0xc8>
      {
         /* found our item; dequeue it */
         if (qlast)
   2abb4:	e0bffd17 	ldw	r2,-12(fp)
   2abb8:	10000526 	beq	r2,zero,2abd0 <qdel+0x58>
            qlast->qe_next = qptr->qe_next;
   2abbc:	e0bffc17 	ldw	r2,-16(fp)
   2abc0:	10c00017 	ldw	r3,0(r2)
   2abc4:	e0bffd17 	ldw	r2,-12(fp)
   2abc8:	10c00015 	stw	r3,0(r2)
   2abcc:	00000406 	br	2abe0 <qdel+0x68>
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
   2abd0:	e0bffc17 	ldw	r2,-16(fp)
   2abd4:	10c00017 	ldw	r3,0(r2)
   2abd8:	e0bffe17 	ldw	r2,-8(fp)
   2abdc:	10c00015 	stw	r3,0(r2)

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
   2abe0:	e0bffe17 	ldw	r2,-8(fp)
   2abe4:	10c00117 	ldw	r3,4(r2)
   2abe8:	e0bfff17 	ldw	r2,-4(fp)
   2abec:	1880031e 	bne	r3,r2,2abfc <qdel+0x84>
            q->q_tail = qlast;
   2abf0:	e0bffe17 	ldw	r2,-8(fp)
   2abf4:	e0fffd17 	ldw	r3,-12(fp)
   2abf8:	10c00115 	stw	r3,4(r2)

         /* fix queue counters */
         q->q_len--;
   2abfc:	e0bffe17 	ldw	r2,-8(fp)
   2ac00:	10800217 	ldw	r2,8(r2)
   2ac04:	10ffffc4 	addi	r3,r2,-1
   2ac08:	e0bffe17 	ldw	r2,-8(fp)
   2ac0c:	10c00215 	stw	r3,8(r2)
         if (q->q_len < q->q_min)
   2ac10:	e0bffe17 	ldw	r2,-8(fp)
   2ac14:	10c00217 	ldw	r3,8(r2)
   2ac18:	e0bffe17 	ldw	r2,-8(fp)
   2ac1c:	10800417 	ldw	r2,16(r2)
   2ac20:	1880040e 	bge	r3,r2,2ac34 <qdel+0xbc>
            q->q_min = q->q_len;
   2ac24:	e0bffe17 	ldw	r2,-8(fp)
   2ac28:	10c00217 	ldw	r3,8(r2)
   2ac2c:	e0bffe17 	ldw	r2,-8(fp)
   2ac30:	10c00415 	stw	r3,16(r2)
         EXIT_CRIT_SECTION(q);   /* restore int state */
   2ac34:	002b3400 	call	2b340 <irq_Unmask>
         return (qp)elt;   /* success exit point */
   2ac38:	e0bfff17 	ldw	r2,-4(fp)
   2ac3c:	00000906 	br	2ac64 <qdel+0xec>
      }
      qlast = qptr;
   2ac40:	e0bffc17 	ldw	r2,-16(fp)
   2ac44:	e0bffd15 	stw	r2,-12(fp)
      qptr = qptr->qe_next;
   2ac48:	e0bffc17 	ldw	r2,-16(fp)
   2ac4c:	10800017 	ldw	r2,0(r2)
   2ac50:	e0bffc15 	stw	r2,-16(fp)

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
   qptr = q->q_head;
   qlast = NULL;
   while (qptr)
   2ac54:	e0bffc17 	ldw	r2,-16(fp)
   2ac58:	103fd31e 	bne	r2,zero,2aba8 <__alt_mem_descriptor_memory+0xdefeaba8>
         return (qp)elt;   /* success exit point */
      }
      qlast = qptr;
      qptr = qptr->qe_next;
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
   2ac5c:	002b3400 	call	2b340 <irq_Unmask>
   return NULL;   /* item not found in queue */
   2ac60:	0005883a 	mov	r2,zero
}
   2ac64:	e037883a 	mov	sp,fp
   2ac68:	dfc00117 	ldw	ra,4(sp)
   2ac6c:	df000017 	ldw	fp,0(sp)
   2ac70:	dec00204 	addi	sp,sp,8
   2ac74:	f800283a 	ret

0002ac78 <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
   2ac78:	defff404 	addi	sp,sp,-48
   2ac7c:	dfc00b15 	stw	ra,44(sp)
   2ac80:	df000a15 	stw	fp,40(sp)
   2ac84:	df000a04 	addi	fp,sp,40
   2ac88:	e13ffc15 	stw	r4,-16(fp)
   2ac8c:	2807883a 	mov	r3,r5
   2ac90:	3005883a 	mov	r2,r6
   2ac94:	e1ffff15 	stw	r7,-4(fp)
   2ac98:	e0fffd0d 	sth	r3,-12(fp)
   2ac9c:	e0bffe0d 	sth	r2,-8(fp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
   2aca0:	00800174 	movhi	r2,5
   2aca4:	108f9904 	addi	r2,r2,15972
   2aca8:	10800017 	ldw	r2,0(r2)
   2acac:	1080010c 	andi	r2,r2,4
   2acb0:	10001526 	beq	r2,zero,2ad08 <udp_open+0x90>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
   2acb4:	e0bffc17 	ldw	r2,-16(fp)
   2acb8:	12003fcc 	andi	r8,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
   2acbc:	e0bffc17 	ldw	r2,-16(fp)
   2acc0:	1004d23a 	srli	r2,r2,8
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
   2acc4:	11803fcc 	andi	r6,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
   2acc8:	e0bffc17 	ldw	r2,-16(fp)
   2accc:	1004d43a 	srli	r2,r2,16
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
   2acd0:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
   2acd4:	e0bffc17 	ldw	r2,-16(fp)
   2acd8:	100ad63a 	srli	r5,r2,24
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
   2acdc:	e13ffe0b 	ldhu	r4,-8(fp)
   2ace0:	e0fffd0b 	ldhu	r3,-12(fp)
   2ace4:	e0800217 	ldw	r2,8(fp)
   2ace8:	d9400015 	stw	r5,0(sp)
   2acec:	d9000115 	stw	r4,4(sp)
   2acf0:	d8c00215 	stw	r3,8(sp)
   2acf4:	d8800315 	stw	r2,12(sp)
   2acf8:	01000174 	movhi	r4,5
   2acfc:	213a3d04 	addi	r4,r4,-5900
   2ad00:	400b883a 	mov	r5,r8
   2ad04:	00080f80 	call	80f8 <printf>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   2ad08:	0009883a 	mov	r4,zero
   2ad0c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   ocon = NULL;
   2ad10:	e03ffb15 	stw	zero,-20(fp)
   for (con = firstudp; con; con = con->u_next)
   2ad14:	d0a88817 	ldw	r2,-24032(gp)
   2ad18:	e0bffa15 	stw	r2,-24(fp)
   2ad1c:	00002206 	br	2ada8 <udp_open+0x130>
   {
      ocon = con;       /* remember last con in list */
   2ad20:	e0bffa17 	ldw	r2,-24(fp)
   2ad24:	e0bffb15 	stw	r2,-20(fp)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
   2ad28:	e0bffa17 	ldw	r2,-24(fp)
   2ad2c:	1080018b 	ldhu	r2,6(r2)
   2ad30:	10ffffcc 	andi	r3,r2,65535
   2ad34:	e0bffe0b 	ldhu	r2,-8(fp)
   2ad38:	1880181e 	bne	r3,r2,2ad9c <udp_open+0x124>
   2ad3c:	e0bffa17 	ldw	r2,-24(fp)
   2ad40:	1080020b 	ldhu	r2,8(r2)
   2ad44:	10ffffcc 	andi	r3,r2,65535
   2ad48:	e0bffd0b 	ldhu	r2,-12(fp)
   2ad4c:	1880131e 	bne	r3,r2,2ad9c <udp_open+0x124>
          con->u_lhost == 0 && con->u_fhost == fhost)
   2ad50:	e0bffa17 	ldw	r2,-24(fp)
   2ad54:	10800317 	ldw	r2,12(r2)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
   2ad58:	1000101e 	bne	r2,zero,2ad9c <udp_open+0x124>
          con->u_lhost == 0 && con->u_fhost == fhost)
   2ad5c:	e0bffa17 	ldw	r2,-24(fp)
   2ad60:	10c00417 	ldw	r3,16(r2)
   2ad64:	e0bffc17 	ldw	r2,-16(fp)
   2ad68:	18800c1e 	bne	r3,r2,2ad9c <udp_open+0x124>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
   2ad6c:	00800174 	movhi	r2,5
   2ad70:	108f9904 	addi	r2,r2,15972
   2ad74:	10800017 	ldw	r2,0(r2)
   2ad78:	1080050c 	andi	r2,r2,20
   2ad7c:	10000326 	beq	r2,zero,2ad8c <udp_open+0x114>
            dprintf("UDP: Connection already exists.\n");
   2ad80:	01000174 	movhi	r4,5
   2ad84:	213a4c04 	addi	r4,r4,-5840
   2ad88:	00083740 	call	8374 <puts>
#endif
         UNLOCK_NET_RESOURCE(NET_RESID);
   2ad8c:	0009883a 	mov	r4,zero
   2ad90:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return(NULL);
   2ad94:	0005883a 	mov	r2,zero
   2ad98:	00003706 	br	2ae78 <udp_open+0x200>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
   2ad9c:	e0bffa17 	ldw	r2,-24(fp)
   2ada0:	10800017 	ldw	r2,0(r2)
   2ada4:	e0bffa15 	stw	r2,-24(fp)
   2ada8:	e0bffa17 	ldw	r2,-24(fp)
   2adac:	103fdc1e 	bne	r2,zero,2ad20 <__alt_mem_descriptor_memory+0xdefead20>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return(NULL);
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
   2adb0:	01000804 	movi	r4,32
   2adb4:	002bce00 	call	2bce0 <npalloc>
   2adb8:	e0bffa15 	stw	r2,-24(fp)
   if (con == 0)
   2adbc:	e0bffa17 	ldw	r2,-24(fp)
   2adc0:	10000c1e 	bne	r2,zero,2adf4 <udp_open+0x17c>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
   2adc4:	00800174 	movhi	r2,5
   2adc8:	108f9904 	addi	r2,r2,15972
   2adcc:	10800017 	ldw	r2,0(r2)
   2add0:	1080010c 	andi	r2,r2,4
   2add4:	10000326 	beq	r2,zero,2ade4 <udp_open+0x16c>
         dprintf("UDP: Couldn't allocate conn storage.\n");
   2add8:	01000174 	movhi	r4,5
   2addc:	213a5404 	addi	r4,r4,-5808
   2ade0:	00083740 	call	8374 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
   2ade4:	0009883a 	mov	r4,zero
   2ade8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return(NULL);
   2adec:	0005883a 	mov	r2,zero
   2adf0:	00002106 	br	2ae78 <udp_open+0x200>
   }

   if (ocon)   /* ocon is end of list */
   2adf4:	e0bffb17 	ldw	r2,-20(fp)
   2adf8:	10000426 	beq	r2,zero,2ae0c <udp_open+0x194>
      ocon->u_next = con;  /* add new connection to end */
   2adfc:	e0bffb17 	ldw	r2,-20(fp)
   2ae00:	e0fffa17 	ldw	r3,-24(fp)
   2ae04:	10c00015 	stw	r3,0(r2)
   2ae08:	00000206 	br	2ae14 <udp_open+0x19c>
   else  /* no list, start one */
      firstudp = con;
   2ae0c:	e0bffa17 	ldw	r2,-24(fp)
   2ae10:	d0a88815 	stw	r2,-24032(gp)

   con->u_next = 0;
   2ae14:	e0bffa17 	ldw	r2,-24(fp)
   2ae18:	10000015 	stw	zero,0(r2)

   con->u_lport = lsock;      /* fill in connection info */
   2ae1c:	e0bffa17 	ldw	r2,-24(fp)
   2ae20:	e0fffe0b 	ldhu	r3,-8(fp)
   2ae24:	10c0018d 	sth	r3,6(r2)
   con->u_fport = fsock;
   2ae28:	e0bffa17 	ldw	r2,-24(fp)
   2ae2c:	e0fffd0b 	ldhu	r3,-12(fp)
   2ae30:	10c0020d 	sth	r3,8(r2)
   con->u_lhost = 0;
   2ae34:	e0bffa17 	ldw	r2,-24(fp)
   2ae38:	10000315 	stw	zero,12(r2)
   con->u_fhost = fhost;
   2ae3c:	e0bffa17 	ldw	r2,-24(fp)
   2ae40:	e0fffc17 	ldw	r3,-16(fp)
   2ae44:	10c00415 	stw	r3,16(r2)
   con->u_rcv   = handler;
   2ae48:	e0bffa17 	ldw	r2,-24(fp)
   2ae4c:	e0ffff17 	ldw	r3,-4(fp)
   2ae50:	10c00515 	stw	r3,20(r2)
   con->u_data  = data;
   2ae54:	e0bffa17 	ldw	r2,-24(fp)
   2ae58:	e0c00217 	ldw	r3,8(fp)
   2ae5c:	10c00615 	stw	r3,24(r2)
   con->u_flags = UDPCF_V4;
   2ae60:	e0bffa17 	ldw	r2,-24(fp)
   2ae64:	00c00044 	movi	r3,1
   2ae68:	10c0010d 	sth	r3,4(r2)

   UNLOCK_NET_RESOURCE(NET_RESID);
   2ae6c:	0009883a 	mov	r4,zero
   2ae70:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return(con);
   2ae74:	e0bffa17 	ldw	r2,-24(fp)
}
   2ae78:	e037883a 	mov	sp,fp
   2ae7c:	dfc00117 	ldw	ra,4(sp)
   2ae80:	df000017 	ldw	fp,0(sp)
   2ae84:	dec00204 	addi	sp,sp,8
   2ae88:	f800283a 	ret

0002ae8c <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
   2ae8c:	defffb04 	addi	sp,sp,-20
   2ae90:	dfc00415 	stw	ra,16(sp)
   2ae94:	df000315 	stw	fp,12(sp)
   2ae98:	df000304 	addi	fp,sp,12
   2ae9c:	e13fff15 	stw	r4,-4(fp)
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
   2aea0:	e0bfff17 	ldw	r2,-4(fp)
   2aea4:	10000226 	beq	r2,zero,2aeb0 <udp_close+0x24>
   2aea8:	d0a88817 	ldw	r2,-24032(gp)
   2aeac:	1000021e 	bne	r2,zero,2aeb8 <udp_close+0x2c>
   {
      dtrap(); /* bad programming! */
   2aeb0:	002b0f40 	call	2b0f4 <dtrap>
      return;
   2aeb4:	00002506 	br	2af4c <udp_close+0xc0>
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   2aeb8:	0009883a 	mov	r4,zero
   2aebc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   2aec0:	e03ffe15 	stw	zero,-8(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
   2aec4:	d0a88817 	ldw	r2,-24032(gp)
   2aec8:	e0bffd15 	stw	r2,-12(fp)
   2aecc:	00000906 	br	2aef4 <udp_close+0x68>
   {
      if (pcon == con)  /* found connection to delete */
   2aed0:	e0fffd17 	ldw	r3,-12(fp)
   2aed4:	e0bfff17 	ldw	r2,-4(fp)
   2aed8:	1880011e 	bne	r3,r2,2aee0 <udp_close+0x54>
      break;
   2aedc:	00000706 	br	2aefc <udp_close+0x70>
      lcon = pcon;   /* remember last connection */
   2aee0:	e0bffd17 	ldw	r2,-12(fp)
   2aee4:	e0bffe15 	stw	r2,-8(fp)
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
   2aee8:	e0bffd17 	ldw	r2,-12(fp)
   2aeec:	10800017 	ldw	r2,0(r2)
   2aef0:	e0bffd15 	stw	r2,-12(fp)
   2aef4:	e0bffd17 	ldw	r2,-12(fp)
   2aef8:	103ff51e 	bne	r2,zero,2aed0 <__alt_mem_descriptor_memory+0xdefeaed0>
      if (pcon == con)  /* found connection to delete */
      break;
      lcon = pcon;   /* remember last connection */
   }

   if (!pcon)
   2aefc:	e0bffd17 	ldw	r2,-12(fp)
   2af00:	1000041e 	bne	r2,zero,2af14 <udp_close+0x88>
   {
      dtrap(); /* prog error - connenction not in list */
   2af04:	002b0f40 	call	2b0f4 <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
   2af08:	0009883a 	mov	r4,zero
   2af0c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return;
   2af10:	00000e06 	br	2af4c <udp_close+0xc0>
   }

   if (lcon)   /* in con is not head of list */
   2af14:	e0bffe17 	ldw	r2,-8(fp)
   2af18:	10000526 	beq	r2,zero,2af30 <udp_close+0xa4>
      lcon->u_next = con->u_next;   /* unlink */
   2af1c:	e0bfff17 	ldw	r2,-4(fp)
   2af20:	10c00017 	ldw	r3,0(r2)
   2af24:	e0bffe17 	ldw	r2,-8(fp)
   2af28:	10c00015 	stw	r3,0(r2)
   2af2c:	00000306 	br	2af3c <udp_close+0xb0>
   else
      firstudp = con->u_next; /* remove from head */
   2af30:	e0bfff17 	ldw	r2,-4(fp)
   2af34:	10800017 	ldw	r2,0(r2)
   2af38:	d0a88815 	stw	r2,-24032(gp)

   UC_FREE(con);  /* free memory for structure */
   2af3c:	e13fff17 	ldw	r4,-4(fp)
   2af40:	002bd140 	call	2bd14 <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
   2af44:	0009883a 	mov	r4,zero
   2af48:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
}
   2af4c:	e037883a 	mov	sp,fp
   2af50:	dfc00117 	ldw	ra,4(sp)
   2af54:	df000017 	ldw	fp,0(sp)
   2af58:	dec00204 	addi	sp,sp,8
   2af5c:	f800283a 	ret

0002af60 <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
   2af60:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
   2af64:	0140620e 	bge	zero,r5,2b0f0 <done>

      mov   r6, zero		       /* carry accumulator */
   2af68:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
   2af6c:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
   2af70:	18000326 	beq	r3,zero,2af80 <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
   2af74:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
   2af78:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
   2af7c:	297fffc4 	addi	r5,r5,-1

0002af80 <asm1>:
   2af80:	02c000f4 	movhi	r11,3
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
   2af84:	5aec2b04 	addi	r11,r11,-20308
      andi  r9, r5, 1		       /* r9 = last halfword flag */
   2af88:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
   2af8c:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
   2af90:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
   2af94:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
   2af98:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
   2af9c:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
   2afa0:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
   2afa4:	5800683a 	jmp	r11

0002afa8 <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
   2afa8:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
   2afac:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
   2afb0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2afb4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2afb8:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
   2afbc:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
   2afc0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2afc4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2afc8:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
   2afcc:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
   2afd0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2afd4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2afd8:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
   2afdc:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
   2afe0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2afe4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2afe8:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
   2afec:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
   2aff0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2aff4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2aff8:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
   2affc:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
   2b000:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b004:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b008:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
   2b00c:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
   2b010:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b014:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b018:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
   2b01c:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
   2b020:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b024:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b028:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
   2b02c:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
   2b030:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b034:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b038:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
   2b03c:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
   2b040:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b044:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b048:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
   2b04c:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
   2b050:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b054:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b058:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
   2b05c:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
   2b060:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b064:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b068:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
   2b06c:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
   2b070:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b074:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b078:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
   2b07c:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
   2b080:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b084:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b088:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
   2b08c:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
   2b090:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b094:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b098:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
   2b09c:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
   2b0a0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b0a4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b0a8:	418d883a 	add	r6,r8,r6

0002b0ac <loop0>:
loop0:
      subi  r5, r5, 16
   2b0ac:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
   2b0b0:	283fbd0e 	bge	r5,zero,2afa8 <__alt_mem_descriptor_memory+0xdefeafa8>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
   2b0b4:	48000426 	beq	r9,zero,2b0c8 <fold>
      ldhu  r7, 0(r4)
   2b0b8:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
   2b0bc:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
   2b0c0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
   2b0c4:	418d883a 	add	r6,r8,r6

0002b0c8 <fold>:
      
fold:
      srli  r7, r2, 16
   2b0c8:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
   2b0cc:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
   2b0d0:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
   2b0d4:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
   2b0d8:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
   2b0dc:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
   2b0e0:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
   2b0e4:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
   2b0e8:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
   2b0ec:	3885883a 	add	r2,r7,r2

0002b0f0 <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
   2b0f0:	f800283a 	ret

0002b0f4 <dtrap>:
void irq_Unmask(void);

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
   2b0f4:	defffe04 	addi	sp,sp,-8
   2b0f8:	dfc00115 	stw	ra,4(sp)
   2b0fc:	df000015 	stw	fp,0(sp)
   2b100:	d839883a 	mov	fp,sp
   printf("dtrap - needs breakpoint\n");
   2b104:	01000174 	movhi	r4,5
   2b108:	213a5e04 	addi	r4,r4,-5768
   2b10c:	00083740 	call	8374 <puts>
}
   2b110:	e037883a 	mov	sp,fp
   2b114:	dfc00117 	ldw	ra,4(sp)
   2b118:	df000017 	ldw	fp,0(sp)
   2b11c:	dec00204 	addi	sp,sp,8
   2b120:	f800283a 	ret

0002b124 <kbhit>:

int
kbhit()
{
   2b124:	defffd04 	addi	sp,sp,-12
   2b128:	dfc00215 	stw	ra,8(sp)
   2b12c:	df000115 	stw	fp,4(sp)
   2b130:	df000104 	addi	fp,sp,4
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
   2b134:	d0a88c17 	ldw	r2,-24016(gp)
   2b138:	10000b1e 	bne	r2,zero,2b168 <kbhit+0x44>
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
   2b13c:	0009883a 	mov	r4,zero
   2b140:	01400104 	movi	r5,4
   2b144:	01900004 	movi	r6,16384
   2b148:	003b6e40 	call	3b6e4 <fcntl>
   2b14c:	10000426 	beq	r2,zero,2b160 <kbhit+0x3c>
      {
         printf("F_SETFL failed.\n");
   2b150:	01000174 	movhi	r4,5
   2b154:	213a6504 	addi	r4,r4,-5740
   2b158:	00083740 	call	8374 <puts>
         dtrap();
   2b15c:	002b0f40 	call	2b0f4 <dtrap>
      }
      kbd_init = 1; 
   2b160:	00800044 	movi	r2,1
   2b164:	d0a88c15 	stw	r2,-24016(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
   2b168:	d0a03717 	ldw	r2,-32548(gp)
   2b16c:	10bfffd8 	cmpnei	r2,r2,-1
   2b170:	10000d1e 	bne	r2,zero,2b1a8 <kbhit+0x84>
   {
      kb = getchar();
   2b174:	00800174 	movhi	r2,5
   2b178:	10872d04 	addi	r2,r2,7348
   2b17c:	10800017 	ldw	r2,0(r2)
   2b180:	10800117 	ldw	r2,4(r2)
   2b184:	1009883a 	mov	r4,r2
   2b188:	00074380 	call	7438 <getc>
   2b18c:	e0bfff15 	stw	r2,-4(fp)
      if (kb < 0)       /* any error means no character present */
   2b190:	e0bfff17 	ldw	r2,-4(fp)
   2b194:	1000020e 	bge	r2,zero,2b1a0 <kbhit+0x7c>
         return (FALSE);
   2b198:	0005883a 	mov	r2,zero
   2b19c:	00000306 	br	2b1ac <kbhit+0x88>
         
      /* there was a character, and we read it. */
      kb_last = kb;
   2b1a0:	e0bfff17 	ldw	r2,-4(fp)
   2b1a4:	d0a03715 	stw	r2,-32548(gp)
   }

   return (TRUE);
   2b1a8:	00800044 	movi	r2,1
}
   2b1ac:	e037883a 	mov	sp,fp
   2b1b0:	dfc00117 	ldw	ra,4(sp)
   2b1b4:	df000017 	ldw	fp,0(sp)
   2b1b8:	dec00204 	addi	sp,sp,8
   2b1bc:	f800283a 	ret

0002b1c0 <getch>:

int 
getch()
{
   2b1c0:	defffd04 	addi	sp,sp,-12
   2b1c4:	dfc00215 	stw	ra,8(sp)
   2b1c8:	df000115 	stw	fp,4(sp)
   2b1cc:	df000104 	addi	fp,sp,4
int chr;

   if(kb_last != EOF)
   2b1d0:	d0a03717 	ldw	r2,-32548(gp)
   2b1d4:	10bfffe0 	cmpeqi	r2,r2,-1
   2b1d8:	1000051e 	bne	r2,zero,2b1f0 <getch+0x30>
   {
      chr = kb_last;
   2b1dc:	d0a03717 	ldw	r2,-32548(gp)
   2b1e0:	e0bfff15 	stw	r2,-4(fp)
      kb_last = EOF;
   2b1e4:	00bfffc4 	movi	r2,-1
   2b1e8:	d0a03715 	stw	r2,-32548(gp)
   2b1ec:	00000706 	br	2b20c <getch+0x4c>
   }
   else
      chr = getchar();
   2b1f0:	00800174 	movhi	r2,5
   2b1f4:	10872d04 	addi	r2,r2,7348
   2b1f8:	10800017 	ldw	r2,0(r2)
   2b1fc:	10800117 	ldw	r2,4(r2)
   2b200:	1009883a 	mov	r4,r2
   2b204:	00074380 	call	7438 <getc>
   2b208:	e0bfff15 	stw	r2,-4(fp)

   return chr;
   2b20c:	e0bfff17 	ldw	r2,-4(fp)
}
   2b210:	e037883a 	mov	sp,fp
   2b214:	dfc00117 	ldw	ra,4(sp)
   2b218:	df000017 	ldw	fp,0(sp)
   2b21c:	dec00204 	addi	sp,sp,8
   2b220:	f800283a 	ret

0002b224 <clock_init>:
int OS_TPS;
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
   2b224:	deffff04 	addi	sp,sp,-4
   2b228:	df000015 	stw	fp,0(sp)
   2b22c:	d839883a 	mov	fp,sp
   OS_TPS = OS_TICKS_PER_SEC;
   2b230:	00801904 	movi	r2,100
   2b234:	d0a88e15 	stw	r2,-24008(gp)
   cticks_factor = 0;
   2b238:	d0288d15 	stw	zero,-24012(gp)
   cticks = 0;
   2b23c:	00800174 	movhi	r2,5
   2b240:	108fbe04 	addi	r2,r2,16120
   2b244:	10000015 	stw	zero,0(r2)
   cticks_initialized = 1;
   2b248:	00800044 	movi	r2,1
   2b24c:	d0a88915 	stw	r2,-24028(gp)
}
   2b250:	e037883a 	mov	sp,fp
   2b254:	df000017 	ldw	fp,0(sp)
   2b258:	dec00104 	addi	sp,sp,4
   2b25c:	f800283a 	ret

0002b260 <clock_c>:

/* undo effects of clock_init (i.e. restore ISR vector) 
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
   2b260:	deffff04 	addi	sp,sp,-4
   2b264:	df000015 	stw	fp,0(sp)
   2b268:	d839883a 	mov	fp,sp
   /* null */ ;
}
   2b26c:	e037883a 	mov	sp,fp
   2b270:	df000017 	ldw	fp,0(sp)
   2b274:	dec00104 	addi	sp,sp,4
   2b278:	f800283a 	ret

0002b27c <cticks_hook>:
 * Use the uCOS-II/Altera HAL BSP's timer and scale cticks as per TPS.
 */

void
cticks_hook(void)
{
   2b27c:	deffff04 	addi	sp,sp,-4
   2b280:	df000015 	stw	fp,0(sp)
   2b284:	d839883a 	mov	fp,sp
   if (cticks_initialized) 
   2b288:	d0a88917 	ldw	r2,-24028(gp)
   2b28c:	10001126 	beq	r2,zero,2b2d4 <cticks_hook+0x58>
   {
      cticks_factor += TPS;
   2b290:	d0a88d17 	ldw	r2,-24012(gp)
   2b294:	10801904 	addi	r2,r2,100
   2b298:	d0a88d15 	stw	r2,-24012(gp)
      if (cticks_factor >= OS_TPS)
   2b29c:	d0e88d17 	ldw	r3,-24012(gp)
   2b2a0:	d0a88e17 	ldw	r2,-24008(gp)
   2b2a4:	18800b16 	blt	r3,r2,2b2d4 <cticks_hook+0x58>
      {
         cticks++;
   2b2a8:	00800174 	movhi	r2,5
   2b2ac:	108fbe04 	addi	r2,r2,16120
   2b2b0:	10800017 	ldw	r2,0(r2)
   2b2b4:	10c00044 	addi	r3,r2,1
   2b2b8:	00800174 	movhi	r2,5
   2b2bc:	108fbe04 	addi	r2,r2,16120
   2b2c0:	10c00015 	stw	r3,0(r2)
         cticks_factor -= OS_TPS;
   2b2c4:	d0e88d17 	ldw	r3,-24012(gp)
   2b2c8:	d0a88e17 	ldw	r2,-24008(gp)
   2b2cc:	1885c83a 	sub	r2,r3,r2
   2b2d0:	d0a88d15 	stw	r2,-24012(gp)
#ifdef USE_LCD
         update_display();
#endif
      }
   }
}
   2b2d4:	e037883a 	mov	sp,fp
   2b2d8:	df000017 	ldw	fp,0(sp)
   2b2dc:	dec00104 	addi	sp,sp,4
   2b2e0:	f800283a 	ret

0002b2e4 <irq_Mask>:
 * ENTER_CRIT_SECTION() and enable them in EXIT_CRIT_SECTION()
 * because calls to ENTER_CRIT_SECTION() can be nested."
 */
void
irq_Mask(void)
{
   2b2e4:	defffd04 	addi	sp,sp,-12
   2b2e8:	df000215 	stw	fp,8(sp)
   2b2ec:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b2f0:	0005303a 	rdctl	r2,status
   2b2f4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b2f8:	e0ffff17 	ldw	r3,-4(fp)
   2b2fc:	00bfff84 	movi	r2,-2
   2b300:	1884703a 	and	r2,r3,r2
   2b304:	1001703a 	wrctl	status,r2
  
  return context;
   2b308:	e0bfff17 	ldw	r2,-4(fp)
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
   2b30c:	e0bffe15 	stw	r2,-8(fp)
	
   if (++irq_level == 1)
   2b310:	d0a88a17 	ldw	r2,-24024(gp)
   2b314:	10800044 	addi	r2,r2,1
   2b318:	d0a88a15 	stw	r2,-24024(gp)
   2b31c:	d0a88a17 	ldw	r2,-24024(gp)
   2b320:	10800058 	cmpnei	r2,r2,1
   2b324:	1000021e 	bne	r2,zero,2b330 <irq_Mask+0x4c>
   {
      cpu_statusreg = local_cpu_statusreg;
   2b328:	e0bffe17 	ldw	r2,-8(fp)
   2b32c:	d0a88b15 	stw	r2,-24020(gp)
   }
}
   2b330:	e037883a 	mov	sp,fp
   2b334:	df000017 	ldw	fp,0(sp)
   2b338:	dec00104 	addi	sp,sp,4
   2b33c:	f800283a 	ret

0002b340 <irq_Unmask>:


/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
   2b340:	defffe04 	addi	sp,sp,-8
   2b344:	df000115 	stw	fp,4(sp)
   2b348:	df000104 	addi	fp,sp,4
   if (--irq_level == 0)
   2b34c:	d0a88a17 	ldw	r2,-24024(gp)
   2b350:	10bfffc4 	addi	r2,r2,-1
   2b354:	d0a88a15 	stw	r2,-24024(gp)
   2b358:	d0a88a17 	ldw	r2,-24024(gp)
   2b35c:	1000041e 	bne	r2,zero,2b370 <irq_Unmask+0x30>
   {
      alt_irq_enable_all(cpu_statusreg);
   2b360:	d0a88b17 	ldw	r2,-24020(gp)
   2b364:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b368:	e0bfff17 	ldw	r2,-4(fp)
   2b36c:	1001703a 	wrctl	status,r2
   }
}
   2b370:	e037883a 	mov	sp,fp
   2b374:	df000017 	ldw	fp,0(sp)
   2b378:	dec00104 	addi	sp,sp,4
   2b37c:	f800283a 	ret

0002b380 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
   2b380:	defffb04 	addi	sp,sp,-20
   2b384:	dfc00415 	stw	ra,16(sp)
   2b388:	df000315 	stw	fp,12(sp)
   2b38c:	df000304 	addi	fp,sp,12
   2b390:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
   2b394:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
   2b398:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
   2b39c:	e0bfff17 	ldw	r2,-4(fp)
   2b3a0:	10002316 	blt	r2,zero,2b430 <LOCK_NET_RESOURCE+0xb0>
   2b3a4:	e0bfff17 	ldw	r2,-4(fp)
   2b3a8:	10800408 	cmpgei	r2,r2,16
   2b3ac:	1000201e 	bne	r2,zero,2b430 <LOCK_NET_RESOURCE+0xb0>
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
   2b3b0:	008001b4 	movhi	r2,6
   2b3b4:	10b8c204 	addi	r2,r2,-7416
   2b3b8:	e0ffff17 	ldw	r3,-4(fp)
   2b3bc:	18c7883a 	add	r3,r3,r3
   2b3c0:	18c7883a 	add	r3,r3,r3
   2b3c4:	10c5883a 	add	r2,r2,r3
   2b3c8:	10c00017 	ldw	r3,0(r2)
   2b3cc:	e0bffe04 	addi	r2,fp,-8
   2b3d0:	1809883a 	mov	r4,r3
   2b3d4:	000b883a 	mov	r5,zero
   2b3d8:	100d883a 	mov	r6,r2
   2b3dc:	001d9440 	call	1d944 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
   2b3e0:	e0bffe03 	ldbu	r2,-8(fp)
   2b3e4:	10803fcc 	andi	r2,r2,255
   2b3e8:	10800298 	cmpnei	r2,r2,10
   2b3ec:	10000a1e 	bne	r2,zero,2b418 <LOCK_NET_RESOURCE+0x98>
   2b3f0:	e0bffd17 	ldw	r2,-12(fp)
   2b3f4:	10800044 	addi	r2,r2,1
   2b3f8:	e0bffd15 	stw	r2,-12(fp)
   2b3fc:	e0bffd17 	ldw	r2,-12(fp)
   2b400:	1080fa50 	cmplti	r2,r2,1001
   2b404:	1000041e 	bne	r2,zero,2b418 <LOCK_NET_RESOURCE+0x98>
         {
            panic("lock NET");   /* fatal */
   2b408:	01000174 	movhi	r4,5
   2b40c:	213a6904 	addi	r4,r4,-5724
   2b410:	00267380 	call	26738 <panic>
   2b414:	00000706 	br	2b434 <LOCK_NET_RESOURCE+0xb4>
            return;
         }
      } while (error == 10);
   2b418:	e0bffe03 	ldbu	r2,-8(fp)
   2b41c:	10803fcc 	andi	r2,r2,255
   2b420:	108002a0 	cmpeqi	r2,r2,10
   2b424:	103fe21e 	bne	r2,zero,2b3b0 <__alt_mem_descriptor_memory+0xdefeb3b0>
LOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;
   int   errct = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   2b428:	0001883a 	nop
   2b42c:	00000106 	br	2b434 <LOCK_NET_RESOURCE+0xb4>
            return;
         }
      } while (error == 10);
   }
   else
      dtrap();
   2b430:	002b0f40 	call	2b0f4 <dtrap>
}
   2b434:	e037883a 	mov	sp,fp
   2b438:	dfc00117 	ldw	ra,4(sp)
   2b43c:	df000017 	ldw	fp,0(sp)
   2b440:	dec00204 	addi	sp,sp,8
   2b444:	f800283a 	ret

0002b448 <UNLOCK_NET_RESOURCE>:

void
UNLOCK_NET_RESOURCE(int resid)
{
   2b448:	defffc04 	addi	sp,sp,-16
   2b44c:	dfc00315 	stw	ra,12(sp)
   2b450:	df000215 	stw	fp,8(sp)
   2b454:	df000204 	addi	fp,sp,8
   2b458:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
   2b45c:	e03ffe05 	stb	zero,-8(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
   2b460:	e0bfff17 	ldw	r2,-4(fp)
   2b464:	10001416 	blt	r2,zero,2b4b8 <UNLOCK_NET_RESOURCE+0x70>
   2b468:	e0bfff17 	ldw	r2,-4(fp)
   2b46c:	10800408 	cmpgei	r2,r2,16
   2b470:	1000111e 	bne	r2,zero,2b4b8 <UNLOCK_NET_RESOURCE+0x70>
   {
      error = OSSemPost(resid_semaphore[resid]);
   2b474:	008001b4 	movhi	r2,6
   2b478:	10b8c204 	addi	r2,r2,-7416
   2b47c:	e0ffff17 	ldw	r3,-4(fp)
   2b480:	18c7883a 	add	r3,r3,r3
   2b484:	18c7883a 	add	r3,r3,r3
   2b488:	10c5883a 	add	r2,r2,r3
   2b48c:	10800017 	ldw	r2,0(r2)
   2b490:	1009883a 	mov	r4,r2
   2b494:	001dd180 	call	1dd18 <OSSemPost>
   2b498:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
   2b49c:	e0bffe03 	ldbu	r2,-8(fp)
   2b4a0:	10000426 	beq	r2,zero,2b4b4 <UNLOCK_NET_RESOURCE+0x6c>
      {
         panic("unlock NET");
   2b4a4:	01000174 	movhi	r4,5
   2b4a8:	213a6c04 	addi	r4,r4,-5712
   2b4ac:	00267380 	call	26738 <panic>
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
      if (error != OS_NO_ERR)
   2b4b0:	00000206 	br	2b4bc <UNLOCK_NET_RESOURCE+0x74>
   2b4b4:	00000106 	br	2b4bc <UNLOCK_NET_RESOURCE+0x74>
      {
         panic("unlock NET");
      }
   }
   else
      dtrap();
   2b4b8:	002b0f40 	call	2b0f4 <dtrap>
}
   2b4bc:	e037883a 	mov	sp,fp
   2b4c0:	dfc00117 	ldw	ra,4(sp)
   2b4c4:	df000017 	ldw	fp,0(sp)
   2b4c8:	dec00204 	addi	sp,sp,8
   2b4cc:	f800283a 	ret

0002b4d0 <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
   2b4d0:	deffee04 	addi	sp,sp,-72
   2b4d4:	dfc01115 	stw	ra,68(sp)
   2b4d8:	df001015 	stw	fp,64(sp)
   2b4dc:	df001004 	addi	fp,sp,64
   2b4e0:	e13fff15 	stw	r4,-4(fp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
   2b4e4:	e0bfff17 	ldw	r2,-4(fp)
   2b4e8:	10800417 	ldw	r2,16(r2)
   2b4ec:	1009883a 	mov	r4,r2
   2b4f0:	002bce00 	call	2bce0 <npalloc>
   2b4f4:	e0bff515 	stw	r2,-44(fp)
   if(!stack)
   2b4f8:	e0bff517 	ldw	r2,-44(fp)
   2b4fc:	1000031e 	bne	r2,zero,2b50c <TK_NEWTASK+0x3c>
      panic("stack alloc");
   2b500:	01000174 	movhi	r4,5
   2b504:	213a6f04 	addi	r4,r4,-5700
   2b508:	00267380 	call	26738 <panic>

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
   2b50c:	e0bfff17 	ldw	r2,-4(fp)
   2b510:	11000217 	ldw	r4,8(r2)
      nettask->entry,
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
   2b514:	e0bfff17 	ldw	r2,-4(fp)
   2b518:	10800417 	ldw	r2,16(r2)
   2b51c:	1004d0ba 	srli	r2,r2,2
   2b520:	1085883a 	add	r2,r2,r2
   2b524:	1085883a 	add	r2,r2,r2
   2b528:	10bfff04 	addi	r2,r2,-4
   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
   2b52c:	e0fff517 	ldw	r3,-44(fp)
   2b530:	188d883a 	add	r6,r3,r2
      nettask->entry,
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority,
   2b534:	e0bfff17 	ldw	r2,-4(fp)
   2b538:	10800317 	ldw	r2,12(r2)
   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
   2b53c:	11c03fcc 	andi	r7,r2,255
      nettask->entry,
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority,
      nettask->priority,
   2b540:	e0bfff17 	ldw	r2,-4(fp)
   2b544:	10800317 	ldw	r2,12(r2)
   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
   2b548:	10ffffcc 	andi	r3,r2,65535
      NULL,
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority,
      nettask->priority,
      stack, 
      (INT32U)nettask->stacksize / sizeof(OS_STK),
   2b54c:	e0bfff17 	ldw	r2,-4(fp)
   2b550:	10800417 	ldw	r2,16(r2)
   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
   2b554:	1004d0ba 	srli	r2,r2,2
   2b558:	d8c00015 	stw	r3,0(sp)
   2b55c:	e0fff517 	ldw	r3,-44(fp)
   2b560:	d8c00115 	stw	r3,4(sp)
   2b564:	d8800215 	stw	r2,8(sp)
   2b568:	d8000315 	stw	zero,12(sp)
   2b56c:	008000c4 	movi	r2,3
   2b570:	d8800415 	stw	r2,16(sp)
   2b574:	000b883a 	mov	r5,zero
   2b578:	001e7300 	call	1e730 <OSTaskCreateExt>
   2b57c:	e0bff605 	stb	r2,-40(fp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
   2b580:	e0bff603 	ldbu	r2,-40(fp)
   2b584:	10803fcc 	andi	r2,r2,255
   2b588:	10800a18 	cmpnei	r2,r2,40
   2b58c:	1000191e 	bne	r2,zero,2b5f4 <TK_NEWTASK+0x124>
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, (INT8U*)curr_task, &err);
   2b590:	e0bfff17 	ldw	r2,-4(fp)
   2b594:	10800317 	ldw	r2,12(r2)
   2b598:	11003fcc 	andi	r4,r2,255
   2b59c:	e0fff684 	addi	r3,fp,-38
   2b5a0:	e0bff644 	addi	r2,fp,-39
   2b5a4:	180b883a 	mov	r5,r3
   2b5a8:	100d883a 	mov	r6,r2
   2b5ac:	001ee540 	call	1ee54 <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
   2b5b0:	e03ffe45 	stb	zero,-7(fp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
   2b5b4:	e0bfff17 	ldw	r2,-4(fp)
   2b5b8:	11400117 	ldw	r5,4(r2)
   2b5bc:	e0bfff17 	ldw	r2,-4(fp)
   2b5c0:	11800317 	ldw	r6,12(r2)
   2b5c4:	e0bfff17 	ldw	r2,-4(fp)
   2b5c8:	10800317 	ldw	r2,12(r2)
   2b5cc:	e0fff684 	addi	r3,fp,-38
   2b5d0:	d8800015 	stw	r2,0(sp)
   2b5d4:	01000174 	movhi	r4,5
   2b5d8:	213a7204 	addi	r4,r4,-5688
   2b5dc:	180f883a 	mov	r7,r3
   2b5e0:	00080f80 	call	80f8 <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
   2b5e4:	01000174 	movhi	r4,5
   2b5e8:	213a8a04 	addi	r4,r4,-5592
   2b5ec:	00083740 	call	8374 <puts>
   2b5f0:	00002006 	br	2b674 <TK_NEWTASK+0x1a4>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
   2b5f4:	e0bff603 	ldbu	r2,-40(fp)
   2b5f8:	10803fcc 	andi	r2,r2,255
   2b5fc:	10800a98 	cmpnei	r2,r2,42
   2b600:	10000e1e 	bne	r2,zero,2b63c <TK_NEWTASK+0x16c>
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
   2b604:	e0bfff17 	ldw	r2,-4(fp)
   2b608:	10c00117 	ldw	r3,4(r2)
   2b60c:	e0bfff17 	ldw	r2,-4(fp)
   2b610:	10800317 	ldw	r2,12(r2)
   2b614:	01000174 	movhi	r4,5
   2b618:	213ab204 	addi	r4,r4,-5432
   2b61c:	180b883a 	mov	r5,r3
   2b620:	100d883a 	mov	r6,r2
   2b624:	01c00504 	movi	r7,20
   2b628:	00080f80 	call	80f8 <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
   2b62c:	01000174 	movhi	r4,5
   2b630:	213acf04 	addi	r4,r4,-5316
   2b634:	00083740 	call	8374 <puts>
   2b638:	00000e06 	br	2b674 <TK_NEWTASK+0x1a4>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
   2b63c:	e0bff603 	ldbu	r2,-40(fp)
   2b640:	10803fcc 	andi	r2,r2,255
   2b644:	10000b26 	beq	r2,zero,2b674 <TK_NEWTASK+0x1a4>
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
   2b648:	e0bff603 	ldbu	r2,-40(fp)
   2b64c:	10c03fcc 	andi	r3,r2,255
   2b650:	e0bfff17 	ldw	r2,-4(fp)
   2b654:	10800117 	ldw	r2,4(r2)
   2b658:	01000174 	movhi	r4,5
   2b65c:	213aee04 	addi	r4,r4,-5192
   2b660:	180b883a 	mov	r5,r3
   2b664:	100d883a 	mov	r6,r2
   2b668:	00080f80 	call	80f8 <printf>
             error, nettask->name);
      return (-1);
   2b66c:	00bfffc4 	movi	r2,-1
   2b670:	00001b06 	br	2b6e0 <TK_NEWTASK+0x210>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, (INT8U*)&nettask->name[0], &error);
   2b674:	e0bfff17 	ldw	r2,-4(fp)
   2b678:	10800317 	ldw	r2,12(r2)
   2b67c:	11003fcc 	andi	r4,r2,255
   2b680:	e0bfff17 	ldw	r2,-4(fp)
   2b684:	10c00117 	ldw	r3,4(r2)
   2b688:	e0bff604 	addi	r2,fp,-40
   2b68c:	180b883a 	mov	r5,r3
   2b690:	100d883a 	mov	r6,r2
   2b694:	001effc0 	call	1effc <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
   2b698:	e0bfff17 	ldw	r2,-4(fp)
   2b69c:	e0fff517 	ldw	r3,-44(fp)
   2b6a0:	10c00515 	stw	r3,20(r2)
   *nettask->tk_ptr = (INT8U)nettask->priority;  
   2b6a4:	e0bfff17 	ldw	r2,-4(fp)
   2b6a8:	10800017 	ldw	r2,0(r2)
   2b6ac:	e0ffff17 	ldw	r3,-4(fp)
   2b6b0:	18c00317 	ldw	r3,12(r3)
   2b6b4:	10c00005 	stb	r3,0(r2)

   printf("Created \"%s\" task (Prio: %d)\n",
   2b6b8:	e0bfff17 	ldw	r2,-4(fp)
   2b6bc:	10c00117 	ldw	r3,4(r2)
   2b6c0:	e0bfff17 	ldw	r2,-4(fp)
   2b6c4:	10800317 	ldw	r2,12(r2)
   2b6c8:	01000174 	movhi	r4,5
   2b6cc:	213afc04 	addi	r4,r4,-5136
   2b6d0:	180b883a 	mov	r5,r3
   2b6d4:	100d883a 	mov	r6,r2
   2b6d8:	00080f80 	call	80f8 <printf>
         (char *)nettask->name, nettask->priority);

   return (0);
   2b6dc:	0005883a 	mov	r2,zero
}
   2b6e0:	e037883a 	mov	sp,fp
   2b6e4:	dfc00117 	ldw	ra,4(sp)
   2b6e8:	df000017 	ldw	fp,0(sp)
   2b6ec:	dec00204 	addi	sp,sp,8
   2b6f0:	f800283a 	ret

0002b6f4 <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
   2b6f4:	defffb04 	addi	sp,sp,-20
   2b6f8:	dfc00415 	stw	ra,16(sp)
   2b6fc:	df000315 	stw	fp,12(sp)
   2b700:	df000304 	addi	fp,sp,12
   2b704:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
   2b708:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
   2b70c:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= semid) && (semid <= MAX_SEMID))
   2b710:	e0bfff17 	ldw	r2,-4(fp)
   2b714:	108001a8 	cmpgeui	r2,r2,6
   2b718:	10001f1e 	bne	r2,zero,2b798 <wait_app_sem+0xa4>
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
   2b71c:	008001b4 	movhi	r2,6
   2b720:	10b8d204 	addi	r2,r2,-7352
   2b724:	e0ffff17 	ldw	r3,-4(fp)
   2b728:	18c7883a 	add	r3,r3,r3
   2b72c:	18c7883a 	add	r3,r3,r3
   2b730:	10c5883a 	add	r2,r2,r3
   2b734:	10c00017 	ldw	r3,0(r2)
   2b738:	e0bffe04 	addi	r2,fp,-8
   2b73c:	1809883a 	mov	r4,r3
   2b740:	000b883a 	mov	r5,zero
   2b744:	100d883a 	mov	r6,r2
   2b748:	001d9440 	call	1d944 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
   2b74c:	e0bffe03 	ldbu	r2,-8(fp)
   2b750:	10803fcc 	andi	r2,r2,255
   2b754:	10800298 	cmpnei	r2,r2,10
   2b758:	10000a1e 	bne	r2,zero,2b784 <wait_app_sem+0x90>
   2b75c:	e0bffd17 	ldw	r2,-12(fp)
   2b760:	10800044 	addi	r2,r2,1
   2b764:	e0bffd15 	stw	r2,-12(fp)
   2b768:	e0bffd17 	ldw	r2,-12(fp)
   2b76c:	1080fa50 	cmplti	r2,r2,1001
   2b770:	1000041e 	bne	r2,zero,2b784 <wait_app_sem+0x90>
         {
            panic("lock NET");   /* fatal */
   2b774:	01000174 	movhi	r4,5
   2b778:	213a6904 	addi	r4,r4,-5724
   2b77c:	00267380 	call	26738 <panic>
   2b780:	00000606 	br	2b79c <wait_app_sem+0xa8>
            return;
         }
      } while (error == 10);
   2b784:	e0bffe03 	ldbu	r2,-8(fp)
   2b788:	10803fcc 	andi	r2,r2,255
   2b78c:	108002a0 	cmpeqi	r2,r2,10
   2b790:	103fe21e 	bne	r2,zero,2b71c <__alt_mem_descriptor_memory+0xdefeb71c>
   2b794:	00000106 	br	2b79c <wait_app_sem+0xa8>
   }
   else
      dtrap();
   2b798:	002b0f40 	call	2b0f4 <dtrap>
}
   2b79c:	e037883a 	mov	sp,fp
   2b7a0:	dfc00117 	ldw	ra,4(sp)
   2b7a4:	df000017 	ldw	fp,0(sp)
   2b7a8:	dec00204 	addi	sp,sp,8
   2b7ac:	f800283a 	ret

0002b7b0 <post_app_sem>:
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
   2b7b0:	defffc04 	addi	sp,sp,-16
   2b7b4:	dfc00315 	stw	ra,12(sp)
   2b7b8:	df000215 	stw	fp,8(sp)
   2b7bc:	df000204 	addi	fp,sp,8
   2b7c0:	e13fff15 	stw	r4,-4(fp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
   2b7c4:	e0bfff17 	ldw	r2,-4(fp)
   2b7c8:	108001a8 	cmpgeui	r2,r2,6
   2b7cc:	1000101e 	bne	r2,zero,2b810 <post_app_sem+0x60>
   {
      error = OSSemPost(app_semaphore[semid]);
   2b7d0:	008001b4 	movhi	r2,6
   2b7d4:	10b8d204 	addi	r2,r2,-7352
   2b7d8:	e0ffff17 	ldw	r3,-4(fp)
   2b7dc:	18c7883a 	add	r3,r3,r3
   2b7e0:	18c7883a 	add	r3,r3,r3
   2b7e4:	10c5883a 	add	r2,r2,r3
   2b7e8:	10800017 	ldw	r2,0(r2)
   2b7ec:	1009883a 	mov	r4,r2
   2b7f0:	001dd180 	call	1dd18 <OSSemPost>
   2b7f4:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
   2b7f8:	e0bffe03 	ldbu	r2,-8(fp)
   2b7fc:	10000526 	beq	r2,zero,2b814 <post_app_sem+0x64>
      {
         panic("unlock NET");
   2b800:	01000174 	movhi	r4,5
   2b804:	213a6c04 	addi	r4,r4,-5712
   2b808:	00267380 	call	26738 <panic>
   2b80c:	00000106 	br	2b814 <post_app_sem+0x64>
      }
   }
   else
      dtrap();
   2b810:	002b0f40 	call	2b0f4 <dtrap>
}
   2b814:	e037883a 	mov	sp,fp
   2b818:	dfc00117 	ldw	ra,4(sp)
   2b81c:	df000017 	ldw	fp,0(sp)
   2b820:	dec00204 	addi	sp,sp,8
   2b824:	f800283a 	ret

0002b828 <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
   2b828:	defffd04 	addi	sp,sp,-12
   2b82c:	dfc00215 	stw	ra,8(sp)
   2b830:	df000115 	stw	fp,4(sp)
   2b834:	df000104 	addi	fp,sp,4
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
   2b838:	01000044 	movi	r4,1
   2b83c:	001d5dc0 	call	1d5dc <OSSemCreate>
   2b840:	d0a89615 	stw	r2,-23976(gp)
   if (!mheap_sem_ptr)
   2b844:	d0a89617 	ldw	r2,-23976(gp)
   2b848:	1000031e 	bne	r2,zero,2b858 <alt_iniche_init+0x30>
      panic("mheap_sem_ptr create err"); 
   2b84c:	01000174 	movhi	r4,5
   2b850:	213b0404 	addi	r4,r4,-5104
   2b854:	00267380 	call	26738 <panic>

   rcvdq_sem_ptr = OSSemCreate(0);
   2b858:	0009883a 	mov	r4,zero
   2b85c:	001d5dc0 	call	1d5dc <OSSemCreate>
   2b860:	d0a89715 	stw	r2,-23972(gp)
   if (!rcvdq_sem_ptr)
   2b864:	d0a89717 	ldw	r2,-23972(gp)
   2b868:	1000031e 	bne	r2,zero,2b878 <alt_iniche_init+0x50>
      panic("rcvdq_sem_ptr create err"); 
   2b86c:	01000174 	movhi	r4,5
   2b870:	213b0b04 	addi	r4,r4,-5076
   2b874:	00267380 	call	26738 <panic>

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
   2b878:	e03fff15 	stw	zero,-4(fp)
   2b87c:	00001806 	br	2b8e0 <alt_iniche_init+0xb8>
   {
      resid_semaphore[i] = OSSemCreate(1);
   2b880:	01000044 	movi	r4,1
   2b884:	001d5dc0 	call	1d5dc <OSSemCreate>
   2b888:	1009883a 	mov	r4,r2
   2b88c:	008001b4 	movhi	r2,6
   2b890:	10b8c204 	addi	r2,r2,-7416
   2b894:	e0ffff17 	ldw	r3,-4(fp)
   2b898:	18c7883a 	add	r3,r3,r3
   2b89c:	18c7883a 	add	r3,r3,r3
   2b8a0:	10c5883a 	add	r2,r2,r3
   2b8a4:	11000015 	stw	r4,0(r2)
      if (!resid_semaphore[i])
   2b8a8:	008001b4 	movhi	r2,6
   2b8ac:	10b8c204 	addi	r2,r2,-7416
   2b8b0:	e0ffff17 	ldw	r3,-4(fp)
   2b8b4:	18c7883a 	add	r3,r3,r3
   2b8b8:	18c7883a 	add	r3,r3,r3
   2b8bc:	10c5883a 	add	r2,r2,r3
   2b8c0:	10800017 	ldw	r2,0(r2)
   2b8c4:	1000031e 	bne	r2,zero,2b8d4 <alt_iniche_init+0xac>
         panic("resid_semaphore create err");  
   2b8c8:	01000174 	movhi	r4,5
   2b8cc:	213b1204 	addi	r4,r4,-5048
   2b8d0:	00267380 	call	26738 <panic>
   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
   2b8d4:	e0bfff17 	ldw	r2,-4(fp)
   2b8d8:	10800044 	addi	r2,r2,1
   2b8dc:	e0bfff15 	stw	r2,-4(fp)
   2b8e0:	e0bfff17 	ldw	r2,-4(fp)
   2b8e4:	10800410 	cmplti	r2,r2,16
   2b8e8:	103fe51e 	bne	r2,zero,2b880 <__alt_mem_descriptor_memory+0xdefeb880>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
   2b8ec:	e03fff15 	stw	zero,-4(fp)
   2b8f0:	00001806 	br	2b954 <alt_iniche_init+0x12c>
   {
      app_semaphore[i] = OSSemCreate(1);
   2b8f4:	01000044 	movi	r4,1
   2b8f8:	001d5dc0 	call	1d5dc <OSSemCreate>
   2b8fc:	1009883a 	mov	r4,r2
   2b900:	008001b4 	movhi	r2,6
   2b904:	10b8d204 	addi	r2,r2,-7352
   2b908:	e0ffff17 	ldw	r3,-4(fp)
   2b90c:	18c7883a 	add	r3,r3,r3
   2b910:	18c7883a 	add	r3,r3,r3
   2b914:	10c5883a 	add	r2,r2,r3
   2b918:	11000015 	stw	r4,0(r2)
      if (!app_semaphore[i])
   2b91c:	008001b4 	movhi	r2,6
   2b920:	10b8d204 	addi	r2,r2,-7352
   2b924:	e0ffff17 	ldw	r3,-4(fp)
   2b928:	18c7883a 	add	r3,r3,r3
   2b92c:	18c7883a 	add	r3,r3,r3
   2b930:	10c5883a 	add	r2,r2,r3
   2b934:	10800017 	ldw	r2,0(r2)
   2b938:	1000031e 	bne	r2,zero,2b948 <alt_iniche_init+0x120>
         panic("app_semaphore create err");  
   2b93c:	01000174 	movhi	r4,5
   2b940:	213b1904 	addi	r4,r4,-5020
   2b944:	00267380 	call	26738 <panic>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
   2b948:	e0bfff17 	ldw	r2,-4(fp)
   2b94c:	10800044 	addi	r2,r2,1
   2b950:	e0bfff15 	stw	r2,-4(fp)
   2b954:	e0bfff17 	ldw	r2,-4(fp)
   2b958:	10800190 	cmplti	r2,r2,6
   2b95c:	103fe51e 	bne	r2,zero,2b8f4 <__alt_mem_descriptor_memory+0xdefeb8f4>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
   2b960:	e03fff15 	stw	zero,-4(fp)
   2b964:	00002506 	br	2b9fc <alt_iniche_init+0x1d4>
   {
      global_TCPwakeup_set[i].ctick = 0;
   2b968:	008001b4 	movhi	r2,6
   2b96c:	10b88604 	addi	r2,r2,-7656
   2b970:	e0ffff17 	ldw	r3,-4(fp)
   2b974:	18c00324 	muli	r3,r3,12
   2b978:	10c5883a 	add	r2,r2,r3
   2b97c:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].soc_event = NULL;
   2b980:	008001b4 	movhi	r2,6
   2b984:	10b88604 	addi	r2,r2,-7656
   2b988:	e0ffff17 	ldw	r3,-4(fp)
   2b98c:	18c00324 	muli	r3,r3,12
   2b990:	10c5883a 	add	r2,r2,r3
   2b994:	10800104 	addi	r2,r2,4
   2b998:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
   2b99c:	0009883a 	mov	r4,zero
   2b9a0:	001d5dc0 	call	1d5dc <OSSemCreate>
   2b9a4:	1009883a 	mov	r4,r2
   2b9a8:	008001b4 	movhi	r2,6
   2b9ac:	10b88604 	addi	r2,r2,-7656
   2b9b0:	e0ffff17 	ldw	r3,-4(fp)
   2b9b4:	18c00324 	muli	r3,r3,12
   2b9b8:	10c5883a 	add	r2,r2,r3
   2b9bc:	10800204 	addi	r2,r2,8
   2b9c0:	11000015 	stw	r4,0(r2)
      if (!global_TCPwakeup_set[i].semaphore)
   2b9c4:	008001b4 	movhi	r2,6
   2b9c8:	10b88604 	addi	r2,r2,-7656
   2b9cc:	e0ffff17 	ldw	r3,-4(fp)
   2b9d0:	18c00324 	muli	r3,r3,12
   2b9d4:	10c5883a 	add	r2,r2,r3
   2b9d8:	10800204 	addi	r2,r2,8
   2b9dc:	10800017 	ldw	r2,0(r2)
   2b9e0:	1000031e 	bne	r2,zero,2b9f0 <alt_iniche_init+0x1c8>
         panic("globwake_semaphore create err");  
   2b9e4:	01000174 	movhi	r4,5
   2b9e8:	213b2004 	addi	r4,r4,-4992
   2b9ec:	00267380 	call	26738 <panic>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
   2b9f0:	e0bfff17 	ldw	r2,-4(fp)
   2b9f4:	10800044 	addi	r2,r2,1
   2b9f8:	e0bfff15 	stw	r2,-4(fp)
   2b9fc:	e0bfff17 	ldw	r2,-4(fp)
   2ba00:	10800510 	cmplti	r2,r2,20
   2ba04:	103fd81e 	bne	r2,zero,2b968 <__alt_mem_descriptor_memory+0xdefeb968>
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
   }
   global_TCPwakeup_setIndx = 0;
   2ba08:	00800174 	movhi	r2,5
   2ba0c:	108fbd04 	addi	r2,r2,16116
   2ba10:	10000015 	stw	zero,0(r2)
#endif  /* TCPWAKE_RTOS */
}
   2ba14:	e037883a 	mov	sp,fp
   2ba18:	dfc00117 	ldw	ra,4(sp)
   2ba1c:	df000017 	ldw	fp,0(sp)
   2ba20:	dec00204 	addi	sp,sp,8
   2ba24:	f800283a 	ret

0002ba28 <pre_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
pre_task_setup()
{
   2ba28:	deffff04 	addi	sp,sp,-4
   2ba2c:	df000015 	stw	fp,0(sp)
   2ba30:	d839883a 	mov	fp,sp
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
   2ba34:	00800174 	movhi	r2,5
   2ba38:	10875f04 	addi	r2,r2,7548
   2ba3c:	00c00784 	movi	r3,30
   2ba40:	10c00015 	stw	r3,0(r2)
   lilbufs = MAXLILPKTS;
   2ba44:	00800174 	movhi	r2,5
   2ba48:	10875d04 	addi	r2,r2,7540
   2ba4c:	00c00784 	movi	r3,30
   2ba50:	10c00015 	stw	r3,0(r2)
   bigbufsiz = BIGBUFSIZE;
   2ba54:	00800174 	movhi	r2,5
   2ba58:	10876004 	addi	r2,r2,7552
   2ba5c:	00c18004 	movi	r3,1536
   2ba60:	10c00015 	stw	r3,0(r2)
   lilbufsiz = LILBUFSIZE;
   2ba64:	00800174 	movhi	r2,5
   2ba68:	10875e04 	addi	r2,r2,7544
   2ba6c:	00c02004 	movi	r3,128
   2ba70:	10c00015 	stw	r3,0(r2)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
   2ba74:	00800174 	movhi	r2,5
   2ba78:	108fe004 	addi	r2,r2,16256
   2ba7c:	00c000f4 	movhi	r3,3
   2ba80:	18eeaf04 	addi	r3,r3,-17732
   2ba84:	10c00015 	stw	r3,0(r2)
#endif   /* NOTDEF */

#endif   /* USE_PPP */


   return NULL;
   2ba88:	0005883a 	mov	r2,zero
}
   2ba8c:	e037883a 	mov	sp,fp
   2ba90:	df000017 	ldw	fp,0(sp)
   2ba94:	dec00104 	addi	sp,sp,4
   2ba98:	f800283a 	ret

0002ba9c <post_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
post_task_setup()
{
   2ba9c:	deffff04 	addi	sp,sp,-4
   2baa0:	df000015 	stw	fp,0(sp)
   2baa4:	d839883a 	mov	fp,sp
   return NULL;
   2baa8:	0005883a 	mov	r2,zero
}
   2baac:	e037883a 	mov	sp,fp
   2bab0:	df000017 	ldw	fp,0(sp)
   2bab4:	dec00104 	addi	sp,sp,4
   2bab8:	f800283a 	ret

0002babc <prep_armintcp>:

#endif  /* INCLUDE_NVPARMS */

int 
prep_armintcp(int ifaces_found)
{
   2babc:	defffd04 	addi	sp,sp,-12
   2bac0:	dfc00215 	stw	ra,8(sp)
   2bac4:	df000115 	stw	fp,4(sp)
   2bac8:	df000104 	addi	fp,sp,4
   2bacc:	e13fff15 	stw	r4,-4(fp)
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
   2bad0:	e13fff17 	ldw	r4,-4(fp)
   2bad4:	00233f80 	call	233f8 <iniche_devices_init>
   2bad8:	e0bfff15 	stw	r2,-4(fp)

#ifdef USE_SLIP
   ifaces_found = prep_slip(ifaces_found);
#endif

   return ifaces_found;
   2badc:	e0bfff17 	ldw	r2,-4(fp)
}
   2bae0:	e037883a 	mov	sp,fp
   2bae4:	dfc00117 	ldw	ra,4(sp)
   2bae8:	df000017 	ldw	fp,0(sp)
   2baec:	dec00204 	addi	sp,sp,8
   2baf0:	f800283a 	ret

0002baf4 <npalloc_base>:
#endif


char *
npalloc_base(unsigned size, int cacheable)
{
   2baf4:	defff804 	addi	sp,sp,-32
   2baf8:	dfc00715 	stw	ra,28(sp)
   2bafc:	df000615 	stw	fp,24(sp)
   2bb00:	df000604 	addi	fp,sp,24
   2bb04:	e13ffe15 	stw	r4,-8(fp)
   2bb08:	e17fff15 	stw	r5,-4(fp)
char * ptr;
void *(*alloc_rtn)(size_t size) = cacheable ? malloc : alt_uncached_malloc;
   2bb0c:	e0bfff17 	ldw	r2,-4(fp)
   2bb10:	10000326 	beq	r2,zero,2bb20 <npalloc_base+0x2c>
   2bb14:	00800034 	movhi	r2,0
   2bb18:	109d3004 	addi	r2,r2,29888
   2bb1c:	00000206 	br	2bb28 <npalloc_base+0x34>
   2bb20:	00800134 	movhi	r2,4
   2bb24:	10a9cc04 	addi	r2,r2,-22736
   2bb28:	e0bffb15 	stw	r2,-20(fp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
   2bb2c:	d0e89617 	ldw	r3,-23976(gp)
   2bb30:	e0bffd04 	addi	r2,fp,-12
   2bb34:	1809883a 	mov	r4,r3
   2bb38:	000b883a 	mov	r5,zero
   2bb3c:	100d883a 	mov	r6,r2
   2bb40:	001d9440 	call	1d944 <OSSemPend>
   if(err)
   2bb44:	e0bffd03 	ldbu	r2,-12(fp)
   2bb48:	10803fcc 	andi	r2,r2,255
   2bb4c:	10001626 	beq	r2,zero,2bba8 <npalloc_base+0xb4>
   {
      int errct = 0;
   2bb50:	e03ffa15 	stw	zero,-24(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
   2bb54:	00001006 	br	2bb98 <npalloc_base+0xa4>
      {
         if(errct++ > 1000)
   2bb58:	e0bffa17 	ldw	r2,-24(fp)
   2bb5c:	10c00044 	addi	r3,r2,1
   2bb60:	e0fffa15 	stw	r3,-24(fp)
   2bb64:	1080fa50 	cmplti	r2,r2,1001
   2bb68:	1000051e 	bne	r2,zero,2bb80 <npalloc_base+0x8c>
         {
            panic("npalloc");    /* fatal? */
   2bb6c:	01000174 	movhi	r4,5
   2bb70:	213b2804 	addi	r4,r4,-4960
   2bb74:	00267380 	call	26738 <panic>
            return NULL;
   2bb78:	0005883a 	mov	r2,zero
   2bb7c:	00001b06 	br	2bbec <npalloc_base+0xf8>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
   2bb80:	d0e89617 	ldw	r3,-23976(gp)
   2bb84:	e0bffd04 	addi	r2,fp,-12
   2bb88:	1809883a 	mov	r4,r3
   2bb8c:	000b883a 	mov	r5,zero
   2bb90:	100d883a 	mov	r6,r2
   2bb94:	001d9440 	call	1d944 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
   2bb98:	e0bffd03 	ldbu	r2,-12(fp)
   2bb9c:	10803fcc 	andi	r2,r2,255
   2bba0:	108002a0 	cmpeqi	r2,r2,10
   2bba4:	103fec1e 	bne	r2,zero,2bb58 <__alt_mem_descriptor_memory+0xdefebb58>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, alloc_rtn);
#else
   ptr = (*alloc_rtn)(size);
   2bba8:	e0bffb17 	ldw	r2,-20(fp)
   2bbac:	e13ffe17 	ldw	r4,-8(fp)
   2bbb0:	103ee83a 	callr	r2
   2bbb4:	e0bffc15 	stw	r2,-16(fp)
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
   2bbb8:	d0a89617 	ldw	r2,-23976(gp)
   2bbbc:	1009883a 	mov	r4,r2
   2bbc0:	001dd180 	call	1dd18 <OSSemPost>
   2bbc4:	e0bffd05 	stb	r2,-12(fp)
#endif
   
   if(!ptr)
   2bbc8:	e0bffc17 	ldw	r2,-16(fp)
   2bbcc:	1000021e 	bne	r2,zero,2bbd8 <npalloc_base+0xe4>
      return NULL;
   2bbd0:	0005883a 	mov	r2,zero
   2bbd4:	00000506 	br	2bbec <npalloc_base+0xf8>

   MEMSET(ptr, 0, size);
   2bbd8:	e13ffc17 	ldw	r4,-16(fp)
   2bbdc:	000b883a 	mov	r5,zero
   2bbe0:	e1bffe17 	ldw	r6,-8(fp)
   2bbe4:	0007f240 	call	7f24 <memset>
   return ptr;      
   2bbe8:	e0bffc17 	ldw	r2,-16(fp)
}
   2bbec:	e037883a 	mov	sp,fp
   2bbf0:	dfc00117 	ldw	ra,4(sp)
   2bbf4:	df000017 	ldw	fp,0(sp)
   2bbf8:	dec00204 	addi	sp,sp,8
   2bbfc:	f800283a 	ret

0002bc00 <npfree_base>:

void
npfree_base(void *ptr, int cacheable)
{
   2bc00:	defff904 	addi	sp,sp,-28
   2bc04:	dfc00615 	stw	ra,24(sp)
   2bc08:	df000515 	stw	fp,20(sp)
   2bc0c:	df000504 	addi	fp,sp,20
   2bc10:	e13ffe15 	stw	r4,-8(fp)
   2bc14:	e17fff15 	stw	r5,-4(fp)
   void (*free_rtn)(void *ptr) = cacheable ? free : alt_uncached_free;
   2bc18:	e0bfff17 	ldw	r2,-4(fp)
   2bc1c:	10000326 	beq	r2,zero,2bc2c <npfree_base+0x2c>
   2bc20:	00800034 	movhi	r2,0
   2bc24:	109d3504 	addi	r2,r2,29908
   2bc28:	00000206 	br	2bc34 <npfree_base+0x34>
   2bc2c:	00800134 	movhi	r2,4
   2bc30:	10a9bc04 	addi	r2,r2,-22800
   2bc34:	e0bffc15 	stw	r2,-16(fp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
   2bc38:	d0e89617 	ldw	r3,-23976(gp)
   2bc3c:	e0bffd04 	addi	r2,fp,-12
   2bc40:	1809883a 	mov	r4,r3
   2bc44:	000b883a 	mov	r5,zero
   2bc48:	100d883a 	mov	r6,r2
   2bc4c:	001d9440 	call	1d944 <OSSemPend>
   if (err)
   2bc50:	e0bffd03 	ldbu	r2,-12(fp)
   2bc54:	10803fcc 	andi	r2,r2,255
   2bc58:	10001526 	beq	r2,zero,2bcb0 <npfree_base+0xb0>
   {
      int errct = 0;
   2bc5c:	e03ffb15 	stw	zero,-20(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
   2bc60:	00000f06 	br	2bca0 <npfree_base+0xa0>
      {
         if (errct++ > 1000)
   2bc64:	e0bffb17 	ldw	r2,-20(fp)
   2bc68:	10c00044 	addi	r3,r2,1
   2bc6c:	e0fffb15 	stw	r3,-20(fp)
   2bc70:	1080fa50 	cmplti	r2,r2,1001
   2bc74:	1000041e 	bne	r2,zero,2bc88 <npfree_base+0x88>
         {
            panic("npfree");    /* fatal? */
   2bc78:	01000174 	movhi	r4,5
   2bc7c:	213b2a04 	addi	r4,r4,-4952
   2bc80:	00267380 	call	26738 <panic>
            return;
   2bc84:	00001106 	br	2bccc <npfree_base+0xcc>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
   2bc88:	d0e89617 	ldw	r3,-23976(gp)
   2bc8c:	e0bffd04 	addi	r2,fp,-12
   2bc90:	1809883a 	mov	r4,r3
   2bc94:	000b883a 	mov	r5,zero
   2bc98:	100d883a 	mov	r6,r2
   2bc9c:	001d9440 	call	1d944 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
   2bca0:	e0bffd03 	ldbu	r2,-12(fp)
   2bca4:	10803fcc 	andi	r2,r2,255
   2bca8:	108002a0 	cmpeqi	r2,r2,10
   2bcac:	103fed1e 	bne	r2,zero,2bc64 <__alt_mem_descriptor_memory+0xdefebc64>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free_rtn);
#else
   (*free_rtn)(ptr);
   2bcb0:	e0bffc17 	ldw	r2,-16(fp)
   2bcb4:	e13ffe17 	ldw	r4,-8(fp)
   2bcb8:	103ee83a 	callr	r2
#endif

   err = OSSemPost(mheap_sem_ptr);
   2bcbc:	d0a89617 	ldw	r2,-23976(gp)
   2bcc0:	1009883a 	mov	r4,r2
   2bcc4:	001dd180 	call	1dd18 <OSSemPost>
   2bcc8:	e0bffd05 	stb	r2,-12(fp)
#else
   (*free_rtn)(ptr);
#endif
#endif

}
   2bccc:	e037883a 	mov	sp,fp
   2bcd0:	dfc00117 	ldw	ra,4(sp)
   2bcd4:	df000017 	ldw	fp,0(sp)
   2bcd8:	dec00204 	addi	sp,sp,8
   2bcdc:	f800283a 	ret

0002bce0 <npalloc>:

char *
npalloc(unsigned size)
{
   2bce0:	defffd04 	addi	sp,sp,-12
   2bce4:	dfc00215 	stw	ra,8(sp)
   2bce8:	df000115 	stw	fp,4(sp)
   2bcec:	df000104 	addi	fp,sp,4
   2bcf0:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 1);
   2bcf4:	e13fff17 	ldw	r4,-4(fp)
   2bcf8:	01400044 	movi	r5,1
   2bcfc:	002baf40 	call	2baf4 <npalloc_base>
}
   2bd00:	e037883a 	mov	sp,fp
   2bd04:	dfc00117 	ldw	ra,4(sp)
   2bd08:	df000017 	ldw	fp,0(sp)
   2bd0c:	dec00204 	addi	sp,sp,8
   2bd10:	f800283a 	ret

0002bd14 <npfree>:

void
npfree(void *ptr)
{
   2bd14:	defffd04 	addi	sp,sp,-12
   2bd18:	dfc00215 	stw	ra,8(sp)
   2bd1c:	df000115 	stw	fp,4(sp)
   2bd20:	df000104 	addi	fp,sp,4
   2bd24:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
   2bd28:	e0bfff17 	ldw	r2,-4(fp)
   2bd2c:	10000326 	beq	r2,zero,2bd3c <npfree+0x28>
      npfree_base(ptr, 1);
   2bd30:	e13fff17 	ldw	r4,-4(fp)
   2bd34:	01400044 	movi	r5,1
   2bd38:	002bc000 	call	2bc00 <npfree_base>
   }
}
   2bd3c:	e037883a 	mov	sp,fp
   2bd40:	dfc00117 	ldw	ra,4(sp)
   2bd44:	df000017 	ldw	fp,0(sp)
   2bd48:	dec00204 	addi	sp,sp,8
   2bd4c:	f800283a 	ret

0002bd50 <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
   2bd50:	defffd04 	addi	sp,sp,-12
   2bd54:	dfc00215 	stw	ra,8(sp)
   2bd58:	df000115 	stw	fp,4(sp)
   2bd5c:	df000104 	addi	fp,sp,4
   2bd60:	e13fff15 	stw	r4,-4(fp)
   return npalloc_base(size, 0);
   2bd64:	e13fff17 	ldw	r4,-4(fp)
   2bd68:	000b883a 	mov	r5,zero
   2bd6c:	002baf40 	call	2baf4 <npalloc_base>
}
   2bd70:	e037883a 	mov	sp,fp
   2bd74:	dfc00117 	ldw	ra,4(sp)
   2bd78:	df000017 	ldw	fp,0(sp)
   2bd7c:	dec00204 	addi	sp,sp,8
   2bd80:	f800283a 	ret

0002bd84 <ncpfree>:

void ncpfree(void *ptr)
{
   2bd84:	defffd04 	addi	sp,sp,-12
   2bd88:	dfc00215 	stw	ra,8(sp)
   2bd8c:	df000115 	stw	fp,4(sp)
   2bd90:	df000104 	addi	fp,sp,4
   2bd94:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
   2bd98:	e0bfff17 	ldw	r2,-4(fp)
   2bd9c:	10000326 	beq	r2,zero,2bdac <ncpfree+0x28>
      npfree_base(ptr, 0);
   2bda0:	e13fff17 	ldw	r4,-4(fp)
   2bda4:	000b883a 	mov	r5,zero
   2bda8:	002bc000 	call	2bc00 <npfree_base>
   }
}
   2bdac:	e037883a 	mov	sp,fp
   2bdb0:	dfc00117 	ldw	ra,4(sp)
   2bdb4:	df000017 	ldw	fp,0(sp)
   2bdb8:	dec00204 	addi	sp,sp,8
   2bdbc:	f800283a 	ret

0002bdc0 <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
   2bdc0:	defffc04 	addi	sp,sp,-16
   2bdc4:	dfc00315 	stw	ra,12(sp)
   2bdc8:	df000215 	stw	fp,8(sp)
   2bdcc:	df000204 	addi	fp,sp,8
   2bdd0:	e13ffe15 	stw	r4,-8(fp)
   2bdd4:	e17fff15 	stw	r5,-4(fp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
   2bdd8:	e0bffe17 	ldw	r2,-8(fp)
   2bddc:	108000a0 	cmpeqi	r2,r2,2
   2bde0:	1000031e 	bne	r2,zero,2bdf0 <pffindtype+0x30>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
   2bde4:	002b0f40 	call	2b0f4 <dtrap>
         return NULL;
   2bde8:	0005883a 	mov	r2,zero
   2bdec:	00001306 	br	2be3c <pffindtype+0x7c>
      }
   }

   if (type == SOCK_STREAM)
   2bdf0:	e0bfff17 	ldw	r2,-4(fp)
   2bdf4:	10800058 	cmpnei	r2,r2,1
   2bdf8:	1000031e 	bne	r2,zero,2be08 <pffindtype+0x48>
      return &tcp_protosw;
   2bdfc:	00800174 	movhi	r2,5
   2be00:	10864404 	addi	r2,r2,6416
   2be04:	00000d06 	br	2be3c <pffindtype+0x7c>
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
   2be08:	e0bfff17 	ldw	r2,-4(fp)
   2be0c:	10800098 	cmpnei	r2,r2,2
   2be10:	1000031e 	bne	r2,zero,2be20 <pffindtype+0x60>
      return &udp_protosw;
   2be14:	00800174 	movhi	r2,5
   2be18:	10864a04 	addi	r2,r2,6440
   2be1c:	00000706 	br	2be3c <pffindtype+0x7c>
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
   2be20:	e0bfff17 	ldw	r2,-4(fp)
   2be24:	108000d8 	cmpnei	r2,r2,3
   2be28:	1000031e 	bne	r2,zero,2be38 <pffindtype+0x78>
      return &rawip_protosw;
   2be2c:	00800174 	movhi	r2,5
   2be30:	10865004 	addi	r2,r2,6464
   2be34:	00000106 	br	2be3c <pffindtype+0x7c>
#endif  /* IP_RAW */
   else
      return NULL;
   2be38:	0005883a 	mov	r2,zero
}
   2be3c:	e037883a 	mov	sp,fp
   2be40:	dfc00117 	ldw	ra,4(sp)
   2be44:	df000017 	ldw	fp,0(sp)
   2be48:	dec00204 	addi	sp,sp,8
   2be4c:	f800283a 	ret

0002be50 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
   2be50:	defffb04 	addi	sp,sp,-20
   2be54:	dfc00415 	stw	ra,16(sp)
   2be58:	df000315 	stw	fp,12(sp)
   2be5c:	df000304 	addi	fp,sp,12
   2be60:	e13ffd15 	stw	r4,-12(fp)
   2be64:	e17ffe15 	stw	r5,-8(fp)
   2be68:	e1bfff15 	stw	r6,-4(fp)
#ifdef IP_RAW
   if (type == SOCK_RAW)
   2be6c:	e0bfff17 	ldw	r2,-4(fp)
   2be70:	108000d8 	cmpnei	r2,r2,3
   2be74:	1000041e 	bne	r2,zero,2be88 <pffindproto+0x38>
      return(pffindtype(domain, type));
   2be78:	e13ffd17 	ldw	r4,-12(fp)
   2be7c:	e17fff17 	ldw	r5,-4(fp)
   2be80:	002bdc00 	call	2bdc0 <pffindtype>
   2be84:	00001c06 	br	2bef8 <pffindproto+0xa8>
#endif

   switch (protocol)
   2be88:	e0bffe17 	ldw	r2,-8(fp)
   2be8c:	10c001a0 	cmpeqi	r3,r2,6
   2be90:	1800041e 	bne	r3,zero,2bea4 <pffindproto+0x54>
   2be94:	10c00460 	cmpeqi	r3,r2,17
   2be98:	1800091e 	bne	r3,zero,2bec0 <pffindproto+0x70>
   2be9c:	10001226 	beq	r2,zero,2bee8 <pffindproto+0x98>
   2bea0:	00000e06 	br	2bedc <pffindproto+0x8c>
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
   2bea4:	e0bfff17 	ldw	r2,-4(fp)
   2bea8:	10800058 	cmpnei	r2,r2,1
   2beac:	1000011e 	bne	r2,zero,2beb4 <pffindproto+0x64>
         break;
   2beb0:	00000e06 	br	2beec <pffindproto+0x9c>
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
   2beb4:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   2beb8:	0005883a 	mov	r2,zero
   2bebc:	00000e06 	br	2bef8 <pffindproto+0xa8>
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
   2bec0:	e0bfff17 	ldw	r2,-4(fp)
   2bec4:	10800098 	cmpnei	r2,r2,2
   2bec8:	1000011e 	bne	r2,zero,2bed0 <pffindproto+0x80>
         break;
   2becc:	00000706 	br	2beec <pffindproto+0x9c>
      /* IPPROTO_UDP protocol on non-SOCK_DGRAM type socket */
      dtrap();
   2bed0:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   2bed4:	0005883a 	mov	r2,zero
   2bed8:	00000706 	br	2bef8 <pffindproto+0xa8>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
   2bedc:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   2bee0:	0005883a 	mov	r2,zero
   2bee4:	00000406 	br	2bef8 <pffindproto+0xa8>
      dtrap();
      return NULL;
#endif /* BSD_SOCKETS */
   case 0:
      /* let protocol default based on socket type */
      break;
   2bee8:	0001883a 	nop
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
      return NULL;
   }
   return(pffindtype(domain, type));   /* map to findtype */
   2beec:	e13ffd17 	ldw	r4,-12(fp)
   2bef0:	e17fff17 	ldw	r5,-4(fp)
   2bef4:	002bdc00 	call	2bdc0 <pffindtype>
}
   2bef8:	e037883a 	mov	sp,fp
   2befc:	dfc00117 	ldw	ra,4(sp)
   2bf00:	df000017 	ldw	fp,0(sp)
   2bf04:	dec00204 	addi	sp,sp,8
   2bf08:	f800283a 	ret

0002bf0c <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
   2bf0c:	defffa04 	addi	sp,sp,-24
   2bf10:	dfc00515 	stw	ra,20(sp)
   2bf14:	df000415 	stw	fp,16(sp)
   2bf18:	df000404 	addi	fp,sp,16
   2bf1c:	e13ffe15 	stw	r4,-8(fp)
   2bf20:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;
   PACKET pkt = NULL;
   2bf24:	e03ffc15 	stw	zero,-16(fp)

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
   2bf28:	e0bffe17 	ldw	r2,-8(fp)
   2bf2c:	0080030e 	bge	zero,r2,2bf3c <m_getnbuf+0x30>
   2bf30:	e0bffe17 	ldw	r2,-8(fp)
   2bf34:	10800390 	cmplti	r2,r2,14
   2bf38:	1000011e 	bne	r2,zero,2bf40 <m_getnbuf+0x34>
   {
      dtrap(); /* is this OK? */
   2bf3c:	002b0f40 	call	2b0f4 <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
   2bf40:	e0bfff17 	ldw	r2,-4(fp)
   2bf44:	10000d26 	beq	r2,zero,2bf7c <m_getnbuf+0x70>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   2bf48:	01000084 	movi	r4,2
   2bf4c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
   2bf50:	e0bfff17 	ldw	r2,-4(fp)
   2bf54:	10800e04 	addi	r2,r2,56
   2bf58:	1009883a 	mov	r4,r2
   2bf5c:	002a53c0 	call	2a53c <pk_alloc>
   2bf60:	e0bffc15 	stw	r2,-16(fp)

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2bf64:	01000084 	movi	r4,2
   2bf68:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      if (!pkt)
   2bf6c:	e0bffc17 	ldw	r2,-16(fp)
   2bf70:	1000021e 	bne	r2,zero,2bf7c <m_getnbuf+0x70>
         return NULL;
   2bf74:	0005883a 	mov	r2,zero
   2bf78:	00004106 	br	2c080 <m_getnbuf+0x174>
   }

   m = (struct mbuf *)getq(&mfreeq);
   2bf7c:	010001b4 	movhi	r4,6
   2bf80:	2138f104 	addi	r4,r4,-7228
   2bf84:	002aa140 	call	2aa14 <getq>
   2bf88:	e0bffd15 	stw	r2,-12(fp)
   if (!m)
   2bf8c:	e0bffd17 	ldw	r2,-12(fp)
   2bf90:	10000a1e 	bne	r2,zero,2bfbc <m_getnbuf+0xb0>
   {
      if (pkt) 
   2bf94:	e0bffc17 	ldw	r2,-16(fp)
   2bf98:	10000626 	beq	r2,zero,2bfb4 <m_getnbuf+0xa8>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   2bf9c:	01000084 	movi	r4,2
   2bfa0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);
   2bfa4:	e13ffc17 	ldw	r4,-16(fp)
   2bfa8:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2bfac:	01000084 	movi	r4,2
   2bfb0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      }
      return NULL;
   2bfb4:	0005883a 	mov	r2,zero
   2bfb8:	00003106 	br	2c080 <m_getnbuf+0x174>
   }
   m->m_type = type;
   2bfbc:	e0bffd17 	ldw	r2,-12(fp)
   2bfc0:	e0fffe17 	ldw	r3,-8(fp)
   2bfc4:	10c00815 	stw	r3,32(r2)
   if (len == 0)
   2bfc8:	e0bfff17 	ldw	r2,-4(fp)
   2bfcc:	1000071e 	bne	r2,zero,2bfec <m_getnbuf+0xe0>
   {
      m->pkt = NULL;
   2bfd0:	e0bffd17 	ldw	r2,-12(fp)
   2bfd4:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
   2bfd8:	e0bffd17 	ldw	r2,-12(fp)
   2bfdc:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
   2bfe0:	e0bffd17 	ldw	r2,-12(fp)
   2bfe4:	10000515 	stw	zero,20(r2)
   2bfe8:	00001506 	br	2c040 <m_getnbuf+0x134>
   }
   else
   {
      m->pkt = pkt;
   2bfec:	e0bffd17 	ldw	r2,-12(fp)
   2bff0:	e0fffc17 	ldw	r3,-16(fp)
   2bff4:	10c00115 	stw	r3,4(r2)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
   2bff8:	e0bffc17 	ldw	r2,-16(fp)
   2bffc:	10800117 	ldw	r2,4(r2)
   2c000:	10c00e04 	addi	r3,r2,56
   2c004:	e0bffc17 	ldw	r2,-16(fp)
   2c008:	10c00315 	stw	r3,12(r2)
   2c00c:	e0bffc17 	ldw	r2,-16(fp)
   2c010:	10c00317 	ldw	r3,12(r2)
   2c014:	e0bffd17 	ldw	r2,-12(fp)
   2c018:	10c00315 	stw	r3,12(r2)
   2c01c:	e0bffd17 	ldw	r2,-12(fp)
   2c020:	10c00317 	ldw	r3,12(r2)
   2c024:	e0bffd17 	ldw	r2,-12(fp)
   2c028:	10c00415 	stw	r3,16(r2)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
   2c02c:	e0bffc17 	ldw	r2,-16(fp)
   2c030:	10800217 	ldw	r2,8(r2)
   2c034:	10fff204 	addi	r3,r2,-56
   2c038:	e0bffd17 	ldw	r2,-12(fp)
   2c03c:	10c00515 	stw	r3,20(r2)
   }
   m->m_len = 0;
   2c040:	e0bffd17 	ldw	r2,-12(fp)
   2c044:	10000215 	stw	zero,8(r2)
   m->m_next = m->m_act = NULL;
   2c048:	e0bffd17 	ldw	r2,-12(fp)
   2c04c:	10000715 	stw	zero,28(r2)
   2c050:	e0bffd17 	ldw	r2,-12(fp)
   2c054:	10c00717 	ldw	r3,28(r2)
   2c058:	e0bffd17 	ldw	r2,-12(fp)
   2c05c:	10c00615 	stw	r3,24(r2)
   mbstat.allocs++;        /* maintain local statistics */
   2c060:	d0a89a17 	ldw	r2,-23960(gp)
   2c064:	10800044 	addi	r2,r2,1
   2c068:	d0a89a15 	stw	r2,-23960(gp)
   putq(&mbufq, (qp)m);
   2c06c:	010001b4 	movhi	r4,6
   2c070:	2138ec04 	addi	r4,r4,-7248
   2c074:	e17ffd17 	ldw	r5,-12(fp)
   2c078:	002aacc0 	call	2aacc <putq>
   return m;
   2c07c:	e0bffd17 	ldw	r2,-12(fp)
}
   2c080:	e037883a 	mov	sp,fp
   2c084:	dfc00117 	ldw	ra,4(sp)
   2c088:	df000017 	ldw	fp,0(sp)
   2c08c:	dec00204 	addi	sp,sp,8
   2c090:	f800283a 	ret

0002c094 <m_free>:
 */


struct mbuf *  
m_free(struct mbuf * m)
{
   2c094:	defffc04 	addi	sp,sp,-16
   2c098:	dfc00315 	stw	ra,12(sp)
   2c09c:	df000215 	stw	fp,8(sp)
   2c0a0:	df000204 	addi	fp,sp,8
   2c0a4:	e13fff15 	stw	r4,-4(fp)
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
   2c0a8:	008001b4 	movhi	r2,6
   2c0ac:	10b8ec04 	addi	r2,r2,-7248
   2c0b0:	10800217 	ldw	r2,8(r2)
   2c0b4:	00800316 	blt	zero,r2,2c0c4 <m_free+0x30>
      panic("mfree: q_len");
   2c0b8:	01000174 	movhi	r4,5
   2c0bc:	213b2c04 	addi	r4,r4,-4944
   2c0c0:	00267380 	call	26738 <panic>

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
   2c0c4:	e0bfff17 	ldw	r2,-4(fp)
   2c0c8:	10800817 	ldw	r2,32(r2)
   2c0cc:	0080040e 	bge	zero,r2,2c0e0 <m_free+0x4c>
   2c0d0:	e0bfff17 	ldw	r2,-4(fp)
   2c0d4:	10800817 	ldw	r2,32(r2)
   2c0d8:	10800390 	cmplti	r2,r2,14
   2c0dc:	10000a1e 	bne	r2,zero,2c108 <m_free+0x74>
   {
      if (m->m_type == MT_FREE)
   2c0e0:	e0bfff17 	ldw	r2,-4(fp)
   2c0e4:	10800817 	ldw	r2,32(r2)
   2c0e8:	1000041e 	bne	r2,zero,2c0fc <m_free+0x68>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
   2c0ec:	002b0f40 	call	2b0f4 <dtrap>
         return m->m_next; /* seems harmless, though.... */
   2c0f0:	e0bfff17 	ldw	r2,-4(fp)
   2c0f4:	10800617 	ldw	r2,24(r2)
   2c0f8:	00002506 	br	2c190 <m_free+0xfc>
      }
      else
         panic("m_free: type");
   2c0fc:	01000174 	movhi	r4,5
   2c100:	213b3004 	addi	r4,r4,-4928
   2c104:	00267380 	call	26738 <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
   2c108:	e0bfff17 	ldw	r2,-4(fp)
   2c10c:	10800617 	ldw	r2,24(r2)
   2c110:	e0bffe15 	stw	r2,-8(fp)

   if (qdel(&mbufq, m) == NULL)
   2c114:	010001b4 	movhi	r4,6
   2c118:	2138ec04 	addi	r4,r4,-7248
   2c11c:	e17fff17 	ldw	r5,-4(fp)
   2c120:	002ab780 	call	2ab78 <qdel>
   2c124:	1000031e 	bne	r2,zero,2c134 <m_free+0xa0>
      panic("m_free: missing");
   2c128:	01000174 	movhi	r4,5
   2c12c:	213b3404 	addi	r4,r4,-4912
   2c130:	00267380 	call	26738 <panic>

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
   2c134:	e0bfff17 	ldw	r2,-4(fp)
   2c138:	10000815 	stw	zero,32(r2)

   if (m->pkt)
   2c13c:	e0bfff17 	ldw	r2,-4(fp)
   2c140:	10800117 	ldw	r2,4(r2)
   2c144:	10000826 	beq	r2,zero,2c168 <m_free+0xd4>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   2c148:	01000084 	movi	r4,2
   2c14c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
   2c150:	e0bfff17 	ldw	r2,-4(fp)
   2c154:	10800117 	ldw	r2,4(r2)
   2c158:	1009883a 	mov	r4,r2
   2c15c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2c160:	01000084 	movi	r4,2
   2c164:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
   2c168:	d0a89b04 	addi	r2,gp,-23956
   2c16c:	10800017 	ldw	r2,0(r2)
   2c170:	10c00044 	addi	r3,r2,1
   2c174:	d0a89b04 	addi	r2,gp,-23956
   2c178:	10c00015 	stw	r3,0(r2)
   putq(&mfreeq, (qp)m);
   2c17c:	010001b4 	movhi	r4,6
   2c180:	2138f104 	addi	r4,r4,-7228
   2c184:	e17fff17 	ldw	r5,-4(fp)
   2c188:	002aacc0 	call	2aacc <putq>
   return nextptr;
   2c18c:	e0bffe17 	ldw	r2,-8(fp)
}
   2c190:	e037883a 	mov	sp,fp
   2c194:	dfc00117 	ldw	ra,4(sp)
   2c198:	df000017 	ldw	fp,0(sp)
   2c19c:	dec00204 	addi	sp,sp,8
   2c1a0:	f800283a 	ret

0002c1a4 <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
   2c1a4:	defffd04 	addi	sp,sp,-12
   2c1a8:	dfc00215 	stw	ra,8(sp)
   2c1ac:	df000115 	stw	fp,4(sp)
   2c1b0:	df000104 	addi	fp,sp,4
   2c1b4:	e13fff15 	stw	r4,-4(fp)
   while (m != NULL)
   2c1b8:	00000306 	br	2c1c8 <m_freem+0x24>
      m = m_free(m);
   2c1bc:	e13fff17 	ldw	r4,-4(fp)
   2c1c0:	002c0940 	call	2c094 <m_free>
   2c1c4:	e0bfff15 	stw	r2,-4(fp)
 */

void
m_freem(struct mbuf * m)
{
   while (m != NULL)
   2c1c8:	e0bfff17 	ldw	r2,-4(fp)
   2c1cc:	103ffb1e 	bne	r2,zero,2c1bc <__alt_mem_descriptor_memory+0xdefec1bc>
      m = m_free(m);
}
   2c1d0:	e037883a 	mov	sp,fp
   2c1d4:	dfc00117 	ldw	ra,4(sp)
   2c1d8:	df000017 	ldw	fp,0(sp)
   2c1dc:	dec00204 	addi	sp,sp,8
   2c1e0:	f800283a 	ret

0002c1e4 <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
   2c1e4:	defff704 	addi	sp,sp,-36
   2c1e8:	dfc00815 	stw	ra,32(sp)
   2c1ec:	df000715 	stw	fp,28(sp)
   2c1f0:	df000704 	addi	fp,sp,28
   2c1f4:	e13ffd15 	stw	r4,-12(fp)
   2c1f8:	e17ffe15 	stw	r5,-8(fp)
   2c1fc:	e1bfff15 	stw	r6,-4(fp)
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
   2c200:	e0bfff17 	ldw	r2,-4(fp)
   2c204:	1000021e 	bne	r2,zero,2c210 <m_copy+0x2c>
      return NULL;
   2c208:	0005883a 	mov	r2,zero
   2c20c:	0000ac06 	br	2c4c0 <m_copy+0x2dc>

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
   2c210:	e0bffe17 	ldw	r2,-8(fp)
   2c214:	10000516 	blt	r2,zero,2c22c <m_copy+0x48>
   2c218:	e0bfff17 	ldw	r2,-4(fp)
   2c21c:	1000060e 	bge	r2,zero,2c238 <m_copy+0x54>
   2c220:	e0bfff17 	ldw	r2,-4(fp)
   2c224:	10bfffe0 	cmpeqi	r2,r2,-1
   2c228:	1000031e 	bne	r2,zero,2c238 <m_copy+0x54>
   {
      dtrap();
   2c22c:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   2c230:	0005883a 	mov	r2,zero
   2c234:	0000a206 	br	2c4c0 <m_copy+0x2dc>
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   2c238:	00001306 	br	2c288 <m_copy+0xa4>
   {
      if (!m)
   2c23c:	e0bffd17 	ldw	r2,-12(fp)
   2c240:	1000031e 	bne	r2,zero,2c250 <m_copy+0x6c>
      {
         dtrap();
   2c244:	002b0f40 	call	2b0f4 <dtrap>
         return NULL;
   2c248:	0005883a 	mov	r2,zero
   2c24c:	00009c06 	br	2c4c0 <m_copy+0x2dc>
      }
      if (off < (int)m->m_len)
   2c250:	e0bffd17 	ldw	r2,-12(fp)
   2c254:	10800217 	ldw	r2,8(r2)
   2c258:	1007883a 	mov	r3,r2
   2c25c:	e0bffe17 	ldw	r2,-8(fp)
   2c260:	10c0010e 	bge	r2,r3,2c268 <m_copy+0x84>
         break;
   2c264:	00000a06 	br	2c290 <m_copy+0xac>
      off -= m->m_len;
   2c268:	e0fffe17 	ldw	r3,-8(fp)
   2c26c:	e0bffd17 	ldw	r2,-12(fp)
   2c270:	10800217 	ldw	r2,8(r2)
   2c274:	1885c83a 	sub	r2,r3,r2
   2c278:	e0bffe15 	stw	r2,-8(fp)
      m = m->m_next;
   2c27c:	e0bffd17 	ldw	r2,-12(fp)
   2c280:	10800617 	ldw	r2,24(r2)
   2c284:	e0bffd15 	stw	r2,-12(fp)
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   2c288:	e0bffe17 	ldw	r2,-8(fp)
   2c28c:	00bfeb16 	blt	zero,r2,2c23c <__alt_mem_descriptor_memory+0xdefec23c>
         break;
      off -= m->m_len;
      m = m->m_next;
   }

   head = tail = NULL;
   2c290:	e03ffb15 	stw	zero,-20(fp)
   2c294:	e0bffb17 	ldw	r2,-20(fp)
   2c298:	e0bffa15 	stw	r2,-24(fp)

   while (len > 0)
   2c29c:	00008106 	br	2c4a4 <m_copy+0x2c0>
   {
      if (m == NULL) /* at end of queue? */
   2c2a0:	e0bffd17 	ldw	r2,-12(fp)
   2c2a4:	1000051e 	bne	r2,zero,2c2bc <m_copy+0xd8>
      {
         panic("m_copy: bad len");
   2c2a8:	01000174 	movhi	r4,5
   2c2ac:	213b3804 	addi	r4,r4,-4896
   2c2b0:	00267380 	call	26738 <panic>
         return NULL;
   2c2b4:	0005883a 	mov	r2,zero
   2c2b8:	00008106 	br	2c4c0 <m_copy+0x2dc>
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
   2c2bc:	e0bffd17 	ldw	r2,-12(fp)
   2c2c0:	10c00217 	ldw	r3,8(r2)
   2c2c4:	e0bffe17 	ldw	r2,-8(fp)
   2c2c8:	1885c83a 	sub	r2,r3,r2
   2c2cc:	e0ffff17 	ldw	r3,-4(fp)
   2c2d0:	1880010e 	bge	r3,r2,2c2d8 <m_copy+0xf4>
   2c2d4:	1805883a 	mov	r2,r3
   2c2d8:	e0bffc15 	stw	r2,-16(fp)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
   2c2dc:	e0bffe17 	ldw	r2,-8(fp)
   2c2e0:	108000cc 	andi	r2,r2,3
   2c2e4:	1000051e 	bne	r2,zero,2c2fc <m_copy+0x118>
          (m->pkt->inuse != 1))
   2c2e8:	e0bffd17 	ldw	r2,-12(fp)
   2c2ec:	10800117 	ldw	r2,4(r2)
   2c2f0:	10800917 	ldw	r2,36(r2)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
   2c2f4:	10800060 	cmpeqi	r2,r2,1
   2c2f8:	1000261e 	bne	r2,zero,2c394 <m_copy+0x1b0>
          (m->pkt->inuse != 1))
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
   2c2fc:	e0bffd17 	ldw	r2,-12(fp)
   2c300:	10800817 	ldw	r2,32(r2)
   2c304:	1009883a 	mov	r4,r2
   2c308:	e17ffc17 	ldw	r5,-16(fp)
   2c30c:	002bf0c0 	call	2bf0c <m_getnbuf>
   2c310:	e0bff915 	stw	r2,-28(fp)
   2c314:	e0bff917 	ldw	r2,-28(fp)
   2c318:	1000011e 	bne	r2,zero,2c320 <m_copy+0x13c>
            goto nospace;
   2c31c:	00006506 	br	2c4b4 <m_copy+0x2d0>
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
   2c320:	e0bff917 	ldw	r2,-28(fp)
   2c324:	11000317 	ldw	r4,12(r2)
   2c328:	e0bffd17 	ldw	r2,-12(fp)
   2c32c:	10c00317 	ldw	r3,12(r2)
   2c330:	e0bffe17 	ldw	r2,-8(fp)
   2c334:	1887883a 	add	r3,r3,r2
   2c338:	e0bffc17 	ldw	r2,-16(fp)
   2c33c:	180b883a 	mov	r5,r3
   2c340:	100d883a 	mov	r6,r2
   2c344:	0007c900 	call	7c90 <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
   2c348:	e0fffc17 	ldw	r3,-16(fp)
   2c34c:	e0bff917 	ldw	r2,-28(fp)
   2c350:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mcopies++;
   2c354:	008001b4 	movhi	r2,6
   2c358:	10b90b04 	addi	r2,r2,-7124
   2c35c:	10802e17 	ldw	r2,184(r2)
   2c360:	10c00044 	addi	r3,r2,1
   2c364:	008001b4 	movhi	r2,6
   2c368:	10b90b04 	addi	r2,r2,-7124
   2c36c:	10c02e15 	stw	r3,184(r2)
         tcpstat.tcps_mcopiedbytes += tocopy;
   2c370:	008001b4 	movhi	r2,6
   2c374:	10b90b04 	addi	r2,r2,-7124
   2c378:	10c03017 	ldw	r3,192(r2)
   2c37c:	e0bffc17 	ldw	r2,-16(fp)
   2c380:	1887883a 	add	r3,r3,r2
   2c384:	008001b4 	movhi	r2,6
   2c388:	10b90b04 	addi	r2,r2,-7124
   2c38c:	10c03015 	stw	r3,192(r2)
   2c390:	00003206 	br	2c45c <m_copy+0x278>
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
   2c394:	e0bffd17 	ldw	r2,-12(fp)
   2c398:	10800817 	ldw	r2,32(r2)
   2c39c:	1009883a 	mov	r4,r2
   2c3a0:	000b883a 	mov	r5,zero
   2c3a4:	002bf0c0 	call	2bf0c <m_getnbuf>
   2c3a8:	e0bff915 	stw	r2,-28(fp)
   2c3ac:	e0bff917 	ldw	r2,-28(fp)
   2c3b0:	1000011e 	bne	r2,zero,2c3b8 <m_copy+0x1d4>
            goto nospace;
   2c3b4:	00003f06 	br	2c4b4 <m_copy+0x2d0>

         m->pkt->inuse++;     /* bump pkt use count to clone it */
   2c3b8:	e0bffd17 	ldw	r2,-12(fp)
   2c3bc:	10800117 	ldw	r2,4(r2)
   2c3c0:	10c00917 	ldw	r3,36(r2)
   2c3c4:	18c00044 	addi	r3,r3,1
   2c3c8:	10c00915 	stw	r3,36(r2)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
   2c3cc:	e0bffd17 	ldw	r2,-12(fp)
   2c3d0:	10c00117 	ldw	r3,4(r2)
   2c3d4:	e0bff917 	ldw	r2,-28(fp)
   2c3d8:	10c00115 	stw	r3,4(r2)
         nb->m_base = m->m_base;
   2c3dc:	e0bffd17 	ldw	r2,-12(fp)
   2c3e0:	10c00417 	ldw	r3,16(r2)
   2c3e4:	e0bff917 	ldw	r2,-28(fp)
   2c3e8:	10c00415 	stw	r3,16(r2)
         nb->m_memsz = m->m_memsz;
   2c3ec:	e0bffd17 	ldw	r2,-12(fp)
   2c3f0:	10c00517 	ldw	r3,20(r2)
   2c3f4:	e0bff917 	ldw	r2,-28(fp)
   2c3f8:	10c00515 	stw	r3,20(r2)
         nb->m_data = m->m_data + off;
   2c3fc:	e0bffd17 	ldw	r2,-12(fp)
   2c400:	10c00317 	ldw	r3,12(r2)
   2c404:	e0bffe17 	ldw	r2,-8(fp)
   2c408:	1887883a 	add	r3,r3,r2
   2c40c:	e0bff917 	ldw	r2,-28(fp)
   2c410:	10c00315 	stw	r3,12(r2)
         nb->m_len = tocopy;
   2c414:	e0fffc17 	ldw	r3,-16(fp)
   2c418:	e0bff917 	ldw	r2,-28(fp)
   2c41c:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mclones++;
   2c420:	008001b4 	movhi	r2,6
   2c424:	10b90b04 	addi	r2,r2,-7124
   2c428:	10802f17 	ldw	r2,188(r2)
   2c42c:	10c00044 	addi	r3,r2,1
   2c430:	008001b4 	movhi	r2,6
   2c434:	10b90b04 	addi	r2,r2,-7124
   2c438:	10c02f15 	stw	r3,188(r2)
         tcpstat.tcps_mclonedbytes += tocopy;
   2c43c:	008001b4 	movhi	r2,6
   2c440:	10b90b04 	addi	r2,r2,-7124
   2c444:	10c03117 	ldw	r3,196(r2)
   2c448:	e0bffc17 	ldw	r2,-16(fp)
   2c44c:	1887883a 	add	r3,r3,r2
   2c450:	008001b4 	movhi	r2,6
   2c454:	10b90b04 	addi	r2,r2,-7124
   2c458:	10c03115 	stw	r3,196(r2)
      }

      len -= tocopy;
   2c45c:	e0ffff17 	ldw	r3,-4(fp)
   2c460:	e0bffc17 	ldw	r2,-16(fp)
   2c464:	1885c83a 	sub	r2,r3,r2
   2c468:	e0bfff15 	stw	r2,-4(fp)
      off = 0;
   2c46c:	e03ffe15 	stw	zero,-8(fp)
      if (tail)      /* head & tail are set by first pass thru loop */
   2c470:	e0bffb17 	ldw	r2,-20(fp)
   2c474:	10000426 	beq	r2,zero,2c488 <m_copy+0x2a4>
         tail->m_next = nb;
   2c478:	e0bffb17 	ldw	r2,-20(fp)
   2c47c:	e0fff917 	ldw	r3,-28(fp)
   2c480:	10c00615 	stw	r3,24(r2)
   2c484:	00000206 	br	2c490 <m_copy+0x2ac>
      else
         head = nb;
   2c488:	e0bff917 	ldw	r2,-28(fp)
   2c48c:	e0bffa15 	stw	r2,-24(fp)
      tail = nb;     /* always make new mbuf the tail */
   2c490:	e0bff917 	ldw	r2,-28(fp)
   2c494:	e0bffb15 	stw	r2,-20(fp)
      m = m->m_next;
   2c498:	e0bffd17 	ldw	r2,-12(fp)
   2c49c:	10800617 	ldw	r2,24(r2)
   2c4a0:	e0bffd15 	stw	r2,-12(fp)
      m = m->m_next;
   }

   head = tail = NULL;

   while (len > 0)
   2c4a4:	e0bfff17 	ldw	r2,-4(fp)
   2c4a8:	00bf7d16 	blt	zero,r2,2c2a0 <__alt_mem_descriptor_memory+0xdefec2a0>
      tail = nb;     /* always make new mbuf the tail */
      m = m->m_next;

   }

   return head;
   2c4ac:	e0bffa17 	ldw	r2,-24(fp)
   2c4b0:	00000306 	br	2c4c0 <m_copy+0x2dc>

nospace:
   m_freem (head);
   2c4b4:	e13ffa17 	ldw	r4,-24(fp)
   2c4b8:	002c1a40 	call	2c1a4 <m_freem>
   return NULL;
   2c4bc:	0005883a 	mov	r2,zero
}
   2c4c0:	e037883a 	mov	sp,fp
   2c4c4:	dfc00117 	ldw	ra,4(sp)
   2c4c8:	df000017 	ldw	fp,0(sp)
   2c4cc:	dec00204 	addi	sp,sp,8
   2c4d0:	f800283a 	ret

0002c4d4 <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
   2c4d4:	defffb04 	addi	sp,sp,-20
   2c4d8:	df000415 	stw	fp,16(sp)
   2c4dc:	df000404 	addi	fp,sp,16
   2c4e0:	e13ffe15 	stw	r4,-8(fp)
   2c4e4:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
   2c4e8:	e0bffe17 	ldw	r2,-8(fp)
   2c4ec:	e0bffc15 	stw	r2,-16(fp)
   2c4f0:	e0bffc17 	ldw	r2,-16(fp)
   2c4f4:	1000011e 	bne	r2,zero,2c4fc <m_adj+0x28>
      return;
   2c4f8:	00006306 	br	2c688 <m_adj+0x1b4>

   if (len >= 0) 
   2c4fc:	e0bfff17 	ldw	r2,-4(fp)
   2c500:	10002316 	blt	r2,zero,2c590 <m_adj+0xbc>
   {
      while (m != NULL && len > 0) 
   2c504:	00001d06 	br	2c57c <m_adj+0xa8>
      {
         if (m->m_len <= (unsigned)len)
   2c508:	e0bffc17 	ldw	r2,-16(fp)
   2c50c:	10800217 	ldw	r2,8(r2)
   2c510:	e0ffff17 	ldw	r3,-4(fp)
   2c514:	18800b36 	bltu	r3,r2,2c544 <m_adj+0x70>
         {
            len -= m->m_len;
   2c518:	e0ffff17 	ldw	r3,-4(fp)
   2c51c:	e0bffc17 	ldw	r2,-16(fp)
   2c520:	10800217 	ldw	r2,8(r2)
   2c524:	1885c83a 	sub	r2,r3,r2
   2c528:	e0bfff15 	stw	r2,-4(fp)
            m->m_len = 0;
   2c52c:	e0bffc17 	ldw	r2,-16(fp)
   2c530:	10000215 	stw	zero,8(r2)
            m = m->m_next;
   2c534:	e0bffc17 	ldw	r2,-16(fp)
   2c538:	10800617 	ldw	r2,24(r2)
   2c53c:	e0bffc15 	stw	r2,-16(fp)
   2c540:	00000e06 	br	2c57c <m_adj+0xa8>
         }
         else
         {
            m->m_len -= len;
   2c544:	e0bffc17 	ldw	r2,-16(fp)
   2c548:	10c00217 	ldw	r3,8(r2)
   2c54c:	e0bfff17 	ldw	r2,-4(fp)
   2c550:	1887c83a 	sub	r3,r3,r2
   2c554:	e0bffc17 	ldw	r2,-16(fp)
   2c558:	10c00215 	stw	r3,8(r2)
            m->m_data += len;
   2c55c:	e0bffc17 	ldw	r2,-16(fp)
   2c560:	10c00317 	ldw	r3,12(r2)
   2c564:	e0bfff17 	ldw	r2,-4(fp)
   2c568:	1887883a 	add	r3,r3,r2
   2c56c:	e0bffc17 	ldw	r2,-16(fp)
   2c570:	10c00315 	stw	r3,12(r2)
            break;
   2c574:	0001883a 	nop
   2c578:	00004306 	br	2c688 <m_adj+0x1b4>
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
   2c57c:	e0bffc17 	ldw	r2,-16(fp)
   2c580:	10004126 	beq	r2,zero,2c688 <m_adj+0x1b4>
   2c584:	e0bfff17 	ldw	r2,-4(fp)
   2c588:	00bfdf16 	blt	zero,r2,2c508 <__alt_mem_descriptor_memory+0xdefec508>
   2c58c:	00003e06 	br	2c688 <m_adj+0x1b4>
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
   2c590:	e0bfff17 	ldw	r2,-4(fp)
   2c594:	0085c83a 	sub	r2,zero,r2
   2c598:	e0bfff15 	stw	r2,-4(fp)
      count = 0;
   2c59c:	e03ffd15 	stw	zero,-12(fp)
      for (;;) 
      {
         count += m->m_len;
   2c5a0:	e0bffc17 	ldw	r2,-16(fp)
   2c5a4:	10c00217 	ldw	r3,8(r2)
   2c5a8:	e0bffd17 	ldw	r2,-12(fp)
   2c5ac:	1885883a 	add	r2,r3,r2
   2c5b0:	e0bffd15 	stw	r2,-12(fp)
         if (m->m_next == (struct mbuf *)0)
   2c5b4:	e0bffc17 	ldw	r2,-16(fp)
   2c5b8:	10800617 	ldw	r2,24(r2)
   2c5bc:	1000061e 	bne	r2,zero,2c5d8 <m_adj+0x104>
            break;
   2c5c0:	0001883a 	nop
         m = m->m_next;
      }
      if (m->m_len >= (unsigned)len)
   2c5c4:	e0bffc17 	ldw	r2,-16(fp)
   2c5c8:	10c00217 	ldw	r3,8(r2)
   2c5cc:	e0bfff17 	ldw	r2,-4(fp)
   2c5d0:	18800c36 	bltu	r3,r2,2c604 <m_adj+0x130>
   2c5d4:	00000406 	br	2c5e8 <m_adj+0x114>
      for (;;) 
      {
         count += m->m_len;
         if (m->m_next == (struct mbuf *)0)
            break;
         m = m->m_next;
   2c5d8:	e0bffc17 	ldw	r2,-16(fp)
   2c5dc:	10800617 	ldw	r2,24(r2)
   2c5e0:	e0bffc15 	stw	r2,-16(fp)
      }
   2c5e4:	003fee06 	br	2c5a0 <__alt_mem_descriptor_memory+0xdefec5a0>
      if (m->m_len >= (unsigned)len)
      {
         m->m_len -= len;
   2c5e8:	e0bffc17 	ldw	r2,-16(fp)
   2c5ec:	10c00217 	ldw	r3,8(r2)
   2c5f0:	e0bfff17 	ldw	r2,-4(fp)
   2c5f4:	1887c83a 	sub	r3,r3,r2
   2c5f8:	e0bffc17 	ldw	r2,-16(fp)
   2c5fc:	10c00215 	stw	r3,8(r2)
         return;
   2c600:	00002106 	br	2c688 <m_adj+0x1b4>
      }
      count -= len;
   2c604:	e0fffd17 	ldw	r3,-12(fp)
   2c608:	e0bfff17 	ldw	r2,-4(fp)
   2c60c:	1885c83a 	sub	r2,r3,r2
   2c610:	e0bffd15 	stw	r2,-12(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
   2c614:	e0bffe17 	ldw	r2,-8(fp)
   2c618:	e0bffc15 	stw	r2,-16(fp)
   2c61c:	00001006 	br	2c660 <m_adj+0x18c>
      {
         if (m->m_len >= (unsigned)count)
   2c620:	e0bffc17 	ldw	r2,-16(fp)
   2c624:	10c00217 	ldw	r3,8(r2)
   2c628:	e0bffd17 	ldw	r2,-12(fp)
   2c62c:	18800436 	bltu	r3,r2,2c640 <m_adj+0x16c>
         {
            m->m_len = count;
   2c630:	e0fffd17 	ldw	r3,-12(fp)
   2c634:	e0bffc17 	ldw	r2,-16(fp)
   2c638:	10c00215 	stw	r3,8(r2)
            break;
   2c63c:	00000a06 	br	2c668 <m_adj+0x194>
         }
         count -= m->m_len;
   2c640:	e0fffd17 	ldw	r3,-12(fp)
   2c644:	e0bffc17 	ldw	r2,-16(fp)
   2c648:	10800217 	ldw	r2,8(r2)
   2c64c:	1885c83a 	sub	r2,r3,r2
   2c650:	e0bffd15 	stw	r2,-12(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
   2c654:	e0bffc17 	ldw	r2,-16(fp)
   2c658:	10800617 	ldw	r2,24(r2)
   2c65c:	e0bffc15 	stw	r2,-16(fp)
   2c660:	e0bffc17 	ldw	r2,-16(fp)
   2c664:	103fee1e 	bne	r2,zero,2c620 <__alt_mem_descriptor_memory+0xdefec620>
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
   2c668:	00000206 	br	2c674 <m_adj+0x1a0>
         m->m_len = 0;
   2c66c:	e0bffc17 	ldw	r2,-16(fp)
   2c670:	10000215 	stw	zero,8(r2)
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
   2c674:	e0bffc17 	ldw	r2,-16(fp)
   2c678:	10800617 	ldw	r2,24(r2)
   2c67c:	e0bffc15 	stw	r2,-16(fp)
   2c680:	e0bffc17 	ldw	r2,-16(fp)
   2c684:	103ff91e 	bne	r2,zero,2c66c <__alt_mem_descriptor_memory+0xdefec66c>
         m->m_len = 0;
   }
}
   2c688:	e037883a 	mov	sp,fp
   2c68c:	df000017 	ldw	fp,0(sp)
   2c690:	dec00104 	addi	sp,sp,4
   2c694:	f800283a 	ret

0002c698 <mbuf_len>:
 * RETURNS: 
 */

int
mbuf_len (struct mbuf * m)
{
   2c698:	defffd04 	addi	sp,sp,-12
   2c69c:	df000215 	stw	fp,8(sp)
   2c6a0:	df000204 	addi	fp,sp,8
   2c6a4:	e13fff15 	stw	r4,-4(fp)
   int   len   =  0;
   2c6a8:	e03ffe15 	stw	zero,-8(fp)

   while (m)
   2c6ac:	00000806 	br	2c6d0 <mbuf_len+0x38>
   {
      len += m->m_len;
   2c6b0:	e0bfff17 	ldw	r2,-4(fp)
   2c6b4:	10c00217 	ldw	r3,8(r2)
   2c6b8:	e0bffe17 	ldw	r2,-8(fp)
   2c6bc:	1885883a 	add	r2,r3,r2
   2c6c0:	e0bffe15 	stw	r2,-8(fp)
      m = m->m_next;
   2c6c4:	e0bfff17 	ldw	r2,-4(fp)
   2c6c8:	10800617 	ldw	r2,24(r2)
   2c6cc:	e0bfff15 	stw	r2,-4(fp)
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
   2c6d0:	e0bfff17 	ldw	r2,-4(fp)
   2c6d4:	103ff61e 	bne	r2,zero,2c6b0 <__alt_mem_descriptor_memory+0xdefec6b0>
   {
      len += m->m_len;
      m = m->m_next;
   }
   return len;
   2c6d8:	e0bffe17 	ldw	r2,-8(fp)
}
   2c6dc:	e037883a 	mov	sp,fp
   2c6e0:	df000017 	ldw	fp,0(sp)
   2c6e4:	dec00104 	addi	sp,sp,4
   2c6e8:	f800283a 	ret

0002c6ec <dtom>:
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
   2c6ec:	defffb04 	addi	sp,sp,-20
   2c6f0:	dfc00415 	stw	ra,16(sp)
   2c6f4:	df000315 	stw	fp,12(sp)
   2c6f8:	df000304 	addi	fp,sp,12
   2c6fc:	e13fff15 	stw	r4,-4(fp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
   2c700:	008001b4 	movhi	r2,6
   2c704:	10b8ec04 	addi	r2,r2,-7248
   2c708:	10800017 	ldw	r2,0(r2)
   2c70c:	e0bffd15 	stw	r2,-12(fp)
   2c710:	00001206 	br	2c75c <dtom+0x70>
   {
      m = (struct mbuf *)qptr;
   2c714:	e0bffd17 	ldw	r2,-12(fp)
   2c718:	e0bffe15 	stw	r2,-8(fp)

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
   2c71c:	e0bffe17 	ldw	r2,-8(fp)
   2c720:	10800417 	ldw	r2,16(r2)
   2c724:	e0ffff17 	ldw	r3,-4(fp)
   2c728:	18800936 	bltu	r3,r2,2c750 <dtom+0x64>
   2c72c:	e0bffe17 	ldw	r2,-8(fp)
   2c730:	10c00417 	ldw	r3,16(r2)
   2c734:	e0bffe17 	ldw	r2,-8(fp)
   2c738:	10800517 	ldw	r2,20(r2)
   2c73c:	1885883a 	add	r2,r3,r2
   2c740:	e0ffff17 	ldw	r3,-4(fp)
   2c744:	1880022e 	bgeu	r3,r2,2c750 <dtom+0x64>
         return (struct mbuf *)qptr;
   2c748:	e0bffd17 	ldw	r2,-12(fp)
   2c74c:	00000906 	br	2c774 <dtom+0x88>
dtom(void * data)
{
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
   2c750:	e0bffd17 	ldw	r2,-12(fp)
   2c754:	10800017 	ldw	r2,0(r2)
   2c758:	e0bffd15 	stw	r2,-12(fp)
   2c75c:	e0bffd17 	ldw	r2,-12(fp)
   2c760:	103fec1e 	bne	r2,zero,2c714 <__alt_mem_descriptor_memory+0xdefec714>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
   2c764:	01000174 	movhi	r4,5
   2c768:	213b3c04 	addi	r4,r4,-4880
   2c76c:	00267380 	call	26738 <panic>
   return NULL;
   2c770:	0005883a 	mov	r2,zero
}
   2c774:	e037883a 	mov	sp,fp
   2c778:	dfc00117 	ldw	ra,4(sp)
   2c77c:	df000017 	ldw	fp,0(sp)
   2c780:	dec00204 	addi	sp,sp,8
   2c784:	f800283a 	ret

0002c788 <remque>:
};


void
remque (void * arg)
{
   2c788:	defffd04 	addi	sp,sp,-12
   2c78c:	df000215 	stw	fp,8(sp)
   2c790:	df000204 	addi	fp,sp,8
   2c794:	e13fff15 	stw	r4,-4(fp)
   struct bsdq *  old;

   old = (struct bsdq *)arg;
   2c798:	e0bfff17 	ldw	r2,-4(fp)
   2c79c:	e0bffe15 	stw	r2,-8(fp)
   if (!old->prev) return;
   2c7a0:	e0bffe17 	ldw	r2,-8(fp)
   2c7a4:	10800117 	ldw	r2,4(r2)
   2c7a8:	1000011e 	bne	r2,zero,2c7b0 <remque+0x28>
   2c7ac:	00000d06 	br	2c7e4 <remque+0x5c>
      old->prev->next = old->next;
   2c7b0:	e0bffe17 	ldw	r2,-8(fp)
   2c7b4:	10800117 	ldw	r2,4(r2)
   2c7b8:	e0fffe17 	ldw	r3,-8(fp)
   2c7bc:	18c00017 	ldw	r3,0(r3)
   2c7c0:	10c00015 	stw	r3,0(r2)
   if (old->next)
   2c7c4:	e0bffe17 	ldw	r2,-8(fp)
   2c7c8:	10800017 	ldw	r2,0(r2)
   2c7cc:	10000526 	beq	r2,zero,2c7e4 <remque+0x5c>
      old->next->prev = old->prev;
   2c7d0:	e0bffe17 	ldw	r2,-8(fp)
   2c7d4:	10800017 	ldw	r2,0(r2)
   2c7d8:	e0fffe17 	ldw	r3,-8(fp)
   2c7dc:	18c00117 	ldw	r3,4(r3)
   2c7e0:	10c00115 	stw	r3,4(r2)
}
   2c7e4:	e037883a 	mov	sp,fp
   2c7e8:	df000017 	ldw	fp,0(sp)
   2c7ec:	dec00104 	addi	sp,sp,4
   2c7f0:	f800283a 	ret

0002c7f4 <insque>:
 * RETURNS: 
 */

void
insque(void * n, void * p)
{
   2c7f4:	defffb04 	addi	sp,sp,-20
   2c7f8:	df000415 	stw	fp,16(sp)
   2c7fc:	df000404 	addi	fp,sp,16
   2c800:	e13ffe15 	stw	r4,-8(fp)
   2c804:	e17fff15 	stw	r5,-4(fp)
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
   2c808:	e0bffe17 	ldw	r2,-8(fp)
   2c80c:	e0bffc15 	stw	r2,-16(fp)
   prev = (struct bsdq *)p;
   2c810:	e0bfff17 	ldw	r2,-4(fp)
   2c814:	e0bffd15 	stw	r2,-12(fp)
   newe->next = prev->next;
   2c818:	e0bffd17 	ldw	r2,-12(fp)
   2c81c:	10c00017 	ldw	r3,0(r2)
   2c820:	e0bffc17 	ldw	r2,-16(fp)
   2c824:	10c00015 	stw	r3,0(r2)
   newe->prev = prev;
   2c828:	e0bffc17 	ldw	r2,-16(fp)
   2c82c:	e0fffd17 	ldw	r3,-12(fp)
   2c830:	10c00115 	stw	r3,4(r2)
   prev->next = newe;
   2c834:	e0bffd17 	ldw	r2,-12(fp)
   2c838:	e0fffc17 	ldw	r3,-16(fp)
   2c83c:	10c00015 	stw	r3,0(r2)
   if (newe->next)
   2c840:	e0bffc17 	ldw	r2,-16(fp)
   2c844:	10800017 	ldw	r2,0(r2)
   2c848:	10000426 	beq	r2,zero,2c85c <insque+0x68>
      newe->next->prev = newe;
   2c84c:	e0bffc17 	ldw	r2,-16(fp)
   2c850:	10800017 	ldw	r2,0(r2)
   2c854:	e0fffc17 	ldw	r3,-16(fp)
   2c858:	10c00115 	stw	r3,4(r2)
}
   2c85c:	e037883a 	mov	sp,fp
   2c860:	df000017 	ldw	fp,0(sp)
   2c864:	dec00104 	addi	sp,sp,4
   2c868:	f800283a 	ret

0002c86c <nptcp_init>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
   2c86c:	defffb04 	addi	sp,sp,-20
   2c870:	dfc00415 	stw	ra,16(sp)
   2c874:	df000315 	stw	fp,12(sp)
   2c878:	df000304 	addi	fp,sp,12
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
   2c87c:	00800174 	movhi	r2,5
   2c880:	10875d04 	addi	r2,r2,7540
   2c884:	10c00017 	ldw	r3,0(r2)
   2c888:	00800174 	movhi	r2,5
   2c88c:	10875f04 	addi	r2,r2,7548
   2c890:	10800017 	ldw	r2,0(r2)
   2c894:	1885883a 	add	r2,r3,r2
   2c898:	1085883a 	add	r2,r2,r2
   2c89c:	108000c4 	addi	r2,r2,3
   2c8a0:	e0bffe15 	stw	r2,-8(fp)
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   2c8a4:	010001b4 	movhi	r4,6
   2c8a8:	2138d804 	addi	r4,r4,-7328
   2c8ac:	000b883a 	mov	r5,zero
   2c8b0:	01800504 	movi	r6,20
   2c8b4:	0007f240 	call	7f24 <memset>
   MEMSET(&mbufq, 0, sizeof(mbufq));
   2c8b8:	010001b4 	movhi	r4,6
   2c8bc:	2138ec04 	addi	r4,r4,-7248
   2c8c0:	000b883a 	mov	r5,zero
   2c8c4:	01800504 	movi	r6,20
   2c8c8:	0007f240 	call	7f24 <memset>
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   2c8cc:	010001b4 	movhi	r4,6
   2c8d0:	2138f104 	addi	r4,r4,-7228
   2c8d4:	000b883a 	mov	r5,zero
   2c8d8:	01800504 	movi	r6,20
   2c8dc:	0007f240 	call	7f24 <memset>
   for (i = 0; i < (int)bufcount; i++)
   2c8e0:	e03ffd15 	stw	zero,-12(fp)
   2c8e4:	00001506 	br	2c93c <nptcp_init+0xd0>
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
   2c8e8:	01000904 	movi	r4,36
   2c8ec:	002bce00 	call	2bce0 <npalloc>
   2c8f0:	e0bfff15 	stw	r2,-4(fp)
      if (!m)  /* malloc error, bail out */
   2c8f4:	e0bfff17 	ldw	r2,-4(fp)
   2c8f8:	1000031e 	bne	r2,zero,2c908 <nptcp_init+0x9c>
         panic("tcpinit");
   2c8fc:	01000174 	movhi	r4,5
   2c900:	213b3e04 	addi	r4,r4,-4872
   2c904:	00267380 	call	26738 <panic>
      m->m_type = MT_FREE;
   2c908:	e0bfff17 	ldw	r2,-4(fp)
   2c90c:	10000815 	stw	zero,32(r2)
      m->m_len = 0;
   2c910:	e0bfff17 	ldw	r2,-4(fp)
   2c914:	10000215 	stw	zero,8(r2)
      m->m_data = NULL;
   2c918:	e0bfff17 	ldw	r2,-4(fp)
   2c91c:	10000315 	stw	zero,12(r2)
      putq(&mfreeq, (qp)m);
   2c920:	010001b4 	movhi	r4,6
   2c924:	2138f104 	addi	r4,r4,-7228
   2c928:	e17fff17 	ldw	r5,-4(fp)
   2c92c:	002aacc0 	call	2aacc <putq>
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
   2c930:	e0bffd17 	ldw	r2,-12(fp)
   2c934:	10800044 	addi	r2,r2,1
   2c938:	e0bffd15 	stw	r2,-12(fp)
   2c93c:	e0bffe17 	ldw	r2,-8(fp)
   2c940:	e0fffd17 	ldw	r3,-12(fp)
   2c944:	18bfe816 	blt	r3,r2,2c8e8 <__alt_mem_descriptor_memory+0xdefec8e8>
      m->m_type = MT_FREE;
      m->m_len = 0;
      m->m_data = NULL;
      putq(&mfreeq, (qp)m);
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
   2c948:	e0fffe17 	ldw	r3,-8(fp)
   2c94c:	008001b4 	movhi	r2,6
   2c950:	10b8f104 	addi	r2,r2,-7228
   2c954:	10c00415 	stw	r3,16(r2)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
   2c958:	0036fec0 	call	36fec <tcp_init>

#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
   2c95c:	0005883a 	mov	r2,zero
}
   2c960:	e037883a 	mov	sp,fp
   2c964:	dfc00117 	ldw	ra,4(sp)
   2c968:	df000017 	ldw	fp,0(sp)
   2c96c:	dec00204 	addi	sp,sp,8
   2c970:	f800283a 	ret

0002c974 <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
   2c974:	defff904 	addi	sp,sp,-28
   2c978:	dfc00615 	stw	ra,24(sp)
   2c97c:	df000515 	stw	fp,20(sp)
   2c980:	df000504 	addi	fp,sp,20
   2c984:	e13fff15 	stw	r4,-4(fp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   2c988:	e0bfff17 	ldw	r2,-4(fp)
   2c98c:	10800317 	ldw	r2,12(r2)
   2c990:	e0bffb15 	stw	r2,-20(fp)
   len = ntohs(bip->ip_len);  /* get length in local endian */
   2c994:	e0bffb17 	ldw	r2,-20(fp)
   2c998:	1080008b 	ldhu	r2,2(r2)
   2c99c:	10bfffcc 	andi	r2,r2,65535
   2c9a0:	1004d23a 	srli	r2,r2,8
   2c9a4:	1007883a 	mov	r3,r2
   2c9a8:	e0bffb17 	ldw	r2,-20(fp)
   2c9ac:	1080008b 	ldhu	r2,2(r2)
   2c9b0:	10bfffcc 	andi	r2,r2,65535
   2c9b4:	1004923a 	slli	r2,r2,8
   2c9b8:	1884b03a 	or	r2,r3,r2
   2c9bc:	e0bffc0d 	sth	r2,-16(fp)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   2c9c0:	e0bffb17 	ldw	r2,-20(fp)
   2c9c4:	10800003 	ldbu	r2,0(r2)
   2c9c8:	10803fcc 	andi	r2,r2,255
   2c9cc:	108003cc 	andi	r2,r2,15
   2c9d0:	1085883a 	add	r2,r2,r2
   2c9d4:	1085883a 	add	r2,r2,r2
   2c9d8:	1007883a 	mov	r3,r2
   2c9dc:	e0bffb17 	ldw	r2,-20(fp)
   2c9e0:	10c5883a 	add	r2,r2,r3
   2c9e4:	e0bffd15 	stw	r2,-12(fp)
   if (tcp_cksum(bip) != tcpp->th_sum)
   2c9e8:	e13ffb17 	ldw	r4,-20(fp)
   2c9ec:	0045ca00 	call	45ca0 <tcp_cksum>
   2c9f0:	1007883a 	mov	r3,r2
   2c9f4:	e0bffd17 	ldw	r2,-12(fp)
   2c9f8:	1080040b 	ldhu	r2,16(r2)
   2c9fc:	18ffffcc 	andi	r3,r3,65535
   2ca00:	10bfffcc 	andi	r2,r2,65535
   2ca04:	18801626 	beq	r3,r2,2ca60 <tcp_rcv+0xec>
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
   2ca08:	008001b4 	movhi	r2,6
   2ca0c:	10b8dd04 	addi	r2,r2,-7308
   2ca10:	10800d17 	ldw	r2,52(r2)
   2ca14:	10c00044 	addi	r3,r2,1
   2ca18:	008001b4 	movhi	r2,6
   2ca1c:	10b8dd04 	addi	r2,r2,-7308
   2ca20:	10c00d15 	stw	r3,52(r2)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
   2ca24:	008001b4 	movhi	r2,6
   2ca28:	10b90b04 	addi	r2,r2,-7124
   2ca2c:	10801c17 	ldw	r2,112(r2)
   2ca30:	10c00044 	addi	r3,r2,1
   2ca34:	008001b4 	movhi	r2,6
   2ca38:	10b90b04 	addi	r2,r2,-7124
   2ca3c:	10c01c15 	stw	r3,112(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   2ca40:	01000084 	movi	r4,2
   2ca44:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
   2ca48:	e13fff17 	ldw	r4,-4(fp)
   2ca4c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2ca50:	01000084 	movi	r4,2
   2ca54:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
   2ca58:	00bff804 	movi	r2,-32
   2ca5c:	00003406 	br	2cb30 <tcp_rcv+0x1bc>
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
   2ca60:	01000044 	movi	r4,1
   2ca64:	000b883a 	mov	r5,zero
   2ca68:	002bf0c0 	call	2bf0c <m_getnbuf>
   2ca6c:	e0bffe15 	stw	r2,-8(fp)
   if (!m_in){
   2ca70:	e0bffe17 	ldw	r2,-8(fp)
   2ca74:	1000081e 	bne	r2,zero,2ca98 <tcp_rcv+0x124>
      LOCK_NET_RESOURCE(FREEQ_RESID);
   2ca78:	01000084 	movi	r4,2
   2ca7c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);
   2ca80:	e13fff17 	ldw	r4,-4(fp)
   2ca84:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2ca88:	01000084 	movi	r4,2
   2ca8c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;  
   2ca90:	00bffa84 	movi	r2,-22
   2ca94:	00002606 	br	2cb30 <tcp_rcv+0x1bc>
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   2ca98:	e0bffb17 	ldw	r2,-20(fp)
   2ca9c:	10800003 	ldbu	r2,0(r2)
   2caa0:	10803fcc 	andi	r2,r2,255
   2caa4:	108003cc 	andi	r2,r2,15
   2caa8:	1085883a 	add	r2,r2,r2
   2caac:	1085883a 	add	r2,r2,r2
   2cab0:	1007883a 	mov	r3,r2
   2cab4:	e0bffc0b 	ldhu	r2,-16(fp)
   2cab8:	10c5c83a 	sub	r2,r2,r3
   2cabc:	e0bffc0d 	sth	r2,-16(fp)
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
   2cac0:	e0bffb17 	ldw	r2,-20(fp)
   2cac4:	e0fffc0b 	ldhu	r3,-16(fp)
   2cac8:	10c0008d 	sth	r3,2(r2)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   2cacc:	e0bffe17 	ldw	r2,-8(fp)
   2cad0:	e0ffff17 	ldw	r3,-4(fp)
   2cad4:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
   2cad8:	e0bfff17 	ldw	r2,-4(fp)
   2cadc:	10c00317 	ldw	r3,12(r2)
   2cae0:	e0bffe17 	ldw	r2,-8(fp)
   2cae4:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
   2cae8:	e0bfff17 	ldw	r2,-4(fp)
   2caec:	10c00417 	ldw	r3,16(r2)
   2caf0:	e0bffe17 	ldw	r2,-8(fp)
   2caf4:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;     /* ??? */
   2caf8:	e0bfff17 	ldw	r2,-4(fp)
   2cafc:	10c00117 	ldw	r3,4(r2)
   2cb00:	e0bffe17 	ldw	r2,-8(fp)
   2cb04:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
   2cb08:	e0bfff17 	ldw	r2,-4(fp)
   2cb0c:	10c00217 	ldw	r3,8(r2)
   2cb10:	e0bffe17 	ldw	r2,-8(fp)
   2cb14:	10c00515 	stw	r3,20(r2)

   tcp_input(m_in, pkt->net);
   2cb18:	e0bfff17 	ldw	r2,-4(fp)
   2cb1c:	10800617 	ldw	r2,24(r2)
   2cb20:	e13ffe17 	ldw	r4,-8(fp)
   2cb24:	100b883a 	mov	r5,r2
   2cb28:	00334980 	call	33498 <tcp_input>

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
   2cb2c:	0005883a 	mov	r2,zero
}
   2cb30:	e037883a 	mov	sp,fp
   2cb34:	dfc00117 	ldw	ra,4(sp)
   2cb38:	df000017 	ldw	fp,0(sp)
   2cb3c:	dec00204 	addi	sp,sp,8
   2cb40:	f800283a 	ret

0002cb44 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
   2cb44:	defff404 	addi	sp,sp,-48
   2cb48:	dfc00b15 	stw	ra,44(sp)
   2cb4c:	df000a15 	stw	fp,40(sp)
   2cb50:	df000a04 	addi	fp,sp,40
   2cb54:	e13ffe15 	stw	r4,-8(fp)
   2cb58:	e17fff15 	stw	r5,-4(fp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
   2cb5c:	e0bffe17 	ldw	r2,-8(fp)
   2cb60:	10800617 	ldw	r2,24(r2)
   2cb64:	10010f26 	beq	r2,zero,2cfa4 <ip_output+0x460>
   {
      m1 = data;
   2cb68:	e0bffe17 	ldw	r2,-8(fp)
   2cb6c:	e0bff615 	stw	r2,-40(fp)
      m2 = data->m_next;
   2cb70:	e0bffe17 	ldw	r2,-8(fp)
   2cb74:	10800617 	ldw	r2,24(r2)
   2cb78:	e0bff715 	stw	r2,-36(fp)

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
   2cb7c:	00003606 	br	2cc58 <ip_output+0x114>
      {
         pkt = m1->pkt;
   2cb80:	e0bff617 	ldw	r2,-40(fp)
   2cb84:	10800117 	ldw	r2,4(r2)
   2cb88:	e0bffa15 	stw	r2,-24(fp)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
   2cb8c:	e0bffa17 	ldw	r2,-24(fp)
   2cb90:	10c00117 	ldw	r3,4(r2)
   2cb94:	e0bffa17 	ldw	r2,-24(fp)
   2cb98:	10800217 	ldw	r2,8(r2)
   2cb9c:	1885883a 	add	r2,r3,r2
             (m1->m_data + m1->m_len + m2->m_len))
   2cba0:	e0fff617 	ldw	r3,-40(fp)
   2cba4:	19000317 	ldw	r4,12(r3)
   2cba8:	e0fff617 	ldw	r3,-40(fp)
   2cbac:	19400217 	ldw	r5,8(r3)
   2cbb0:	e0fff717 	ldw	r3,-36(fp)
   2cbb4:	18c00217 	ldw	r3,8(r3)
   2cbb8:	28c7883a 	add	r3,r5,r3
   2cbbc:	20c7883a 	add	r3,r4,r3

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
      {
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
   2cbc0:	1880242e 	bgeu	r3,r2,2cc54 <ip_output+0x110>
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
   2cbc4:	e0bff617 	ldw	r2,-40(fp)
   2cbc8:	10c00317 	ldw	r3,12(r2)
   2cbcc:	e0bff617 	ldw	r2,-40(fp)
   2cbd0:	10800217 	ldw	r2,8(r2)
   2cbd4:	1889883a 	add	r4,r3,r2
   2cbd8:	e0bff717 	ldw	r2,-36(fp)
   2cbdc:	10c00317 	ldw	r3,12(r2)
   2cbe0:	e0bff717 	ldw	r2,-36(fp)
   2cbe4:	10800217 	ldw	r2,8(r2)
   2cbe8:	180b883a 	mov	r5,r3
   2cbec:	100d883a 	mov	r6,r2
   2cbf0:	0007c900 	call	7c90 <memcpy>
            m1->m_len += m2->m_len;
   2cbf4:	e0bff617 	ldw	r2,-40(fp)
   2cbf8:	10c00217 	ldw	r3,8(r2)
   2cbfc:	e0bff717 	ldw	r2,-36(fp)
   2cc00:	10800217 	ldw	r2,8(r2)
   2cc04:	1887883a 	add	r3,r3,r2
   2cc08:	e0bff617 	ldw	r2,-40(fp)
   2cc0c:	10c00215 	stw	r3,8(r2)
            m1->m_next = m2->m_next;
   2cc10:	e0bff717 	ldw	r2,-36(fp)
   2cc14:	10c00617 	ldw	r3,24(r2)
   2cc18:	e0bff617 	ldw	r2,-40(fp)
   2cc1c:	10c00615 	stw	r3,24(r2)
            m_free(m2);    /* free this m2.... */
   2cc20:	e13ff717 	ldw	r4,-36(fp)
   2cc24:	002c0940 	call	2c094 <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
   2cc28:	e0bff617 	ldw	r2,-40(fp)
   2cc2c:	10800617 	ldw	r2,24(r2)
   2cc30:	e0bff715 	stw	r2,-36(fp)
            tcpstat.tcps_oappends++;
   2cc34:	008001b4 	movhi	r2,6
   2cc38:	10b90b04 	addi	r2,r2,-7124
   2cc3c:	10803317 	ldw	r2,204(r2)
   2cc40:	10c00044 	addi	r3,r2,1
   2cc44:	008001b4 	movhi	r2,6
   2cc48:	10b90b04 	addi	r2,r2,-7124
   2cc4c:	10c03315 	stw	r3,204(r2)
   2cc50:	00000106 	br	2cc58 <ip_output+0x114>
         }
         else     /* if won't fit, fall to next copy */
            break;
   2cc54:	00000606 	br	2cc70 <ip_output+0x12c>
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
   2cc58:	e0bff717 	ldw	r2,-36(fp)
   2cc5c:	10000426 	beq	r2,zero,2cc70 <ip_output+0x12c>
   2cc60:	e0bff717 	ldw	r2,-36(fp)
   2cc64:	10800217 	ldw	r2,8(r2)
   2cc68:	108002b0 	cmpltui	r2,r2,10
   2cc6c:	103fc41e 	bne	r2,zero,2cb80 <__alt_mem_descriptor_memory+0xdefecb80>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
   2cc70:	00005906 	br	2cdd8 <ip_output+0x294>
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
   2cc74:	e0bff717 	ldw	r2,-36(fp)
   2cc78:	10800317 	ldw	r2,12(r2)
   2cc7c:	1007883a 	mov	r3,r2
   2cc80:	e0bff717 	ldw	r2,-36(fp)
   2cc84:	10800117 	ldw	r2,4(r2)
   2cc88:	10800117 	ldw	r2,4(r2)
   2cc8c:	1885c83a 	sub	r2,r3,r2
   2cc90:	e0bffb15 	stw	r2,-20(fp)
         if (e < MaxLnh)
   2cc94:	00800174 	movhi	r2,5
   2cc98:	108f9704 	addi	r2,r2,15964
   2cc9c:	10800017 	ldw	r2,0(r2)
   2cca0:	e0fffb17 	ldw	r3,-20(fp)
   2cca4:	18800b0e 	bge	r3,r2,2ccd4 <ip_output+0x190>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
   2cca8:	00800174 	movhi	r2,5
   2ccac:	108f9704 	addi	r2,r2,15964
   2ccb0:	10800017 	ldw	r2,0(r2)
   2ccb4:	01000174 	movhi	r4,5
   2ccb8:	213b4004 	addi	r4,r4,-4864
   2ccbc:	100b883a 	mov	r5,r2
   2ccc0:	e1bffb17 	ldw	r6,-20(fp)
   2ccc4:	00080f80 	call	80f8 <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
   2ccc8:	01000174 	movhi	r4,5
   2cccc:	213b4604 	addi	r4,r4,-4840
   2ccd0:	00267380 	call	26738 <panic>
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
   2ccd4:	e0bff617 	ldw	r2,-40(fp)
   2ccd8:	10c00217 	ldw	r3,8(r2)
   2ccdc:	00800174 	movhi	r2,5
   2cce0:	108f9704 	addi	r2,r2,15964
   2cce4:	10800017 	ldw	r2,0(r2)
   2cce8:	e13ffb17 	ldw	r4,-20(fp)
   2ccec:	2085c83a 	sub	r2,r4,r2
   2ccf0:	18803b2e 	bgeu	r3,r2,2cde0 <ip_output+0x29c>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
   2ccf4:	e0bff617 	ldw	r2,-40(fp)
   2ccf8:	10800217 	ldw	r2,8(r2)
   2ccfc:	108000cc 	andi	r2,r2,3
   2cd00:	1000371e 	bne	r2,zero,2cde0 <ip_output+0x29c>
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
   2cd04:	e0bff717 	ldw	r2,-36(fp)
   2cd08:	10800317 	ldw	r2,12(r2)
   2cd0c:	1007883a 	mov	r3,r2
   2cd10:	e0bff717 	ldw	r2,-36(fp)
   2cd14:	10800117 	ldw	r2,4(r2)
   2cd18:	10800117 	ldw	r2,4(r2)
   2cd1c:	1885c83a 	sub	r2,r3,r2
   2cd20:	10800e18 	cmpnei	r2,r2,56
   2cd24:	10002e1e 	bne	r2,zero,2cde0 <ip_output+0x29c>
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
   2cd28:	e0bff717 	ldw	r2,-36(fp)
   2cd2c:	10c00317 	ldw	r3,12(r2)
   2cd30:	e0bff617 	ldw	r2,-40(fp)
   2cd34:	10800217 	ldw	r2,8(r2)
   2cd38:	0085c83a 	sub	r2,zero,r2
   2cd3c:	1889883a 	add	r4,r3,r2
   2cd40:	e0bff617 	ldw	r2,-40(fp)
   2cd44:	10c00317 	ldw	r3,12(r2)
   2cd48:	e0bff617 	ldw	r2,-40(fp)
   2cd4c:	10800217 	ldw	r2,8(r2)
   2cd50:	180b883a 	mov	r5,r3
   2cd54:	100d883a 	mov	r6,r2
   2cd58:	0007c900 	call	7c90 <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
   2cd5c:	e0bff717 	ldw	r2,-36(fp)
   2cd60:	10c00317 	ldw	r3,12(r2)
   2cd64:	e0bff617 	ldw	r2,-40(fp)
   2cd68:	10800217 	ldw	r2,8(r2)
   2cd6c:	0085c83a 	sub	r2,zero,r2
   2cd70:	1887883a 	add	r3,r3,r2
   2cd74:	e0bff717 	ldw	r2,-36(fp)
   2cd78:	10c00315 	stw	r3,12(r2)
            m2->m_len += m1->m_len;
   2cd7c:	e0bff717 	ldw	r2,-36(fp)
   2cd80:	10c00217 	ldw	r3,8(r2)
   2cd84:	e0bff617 	ldw	r2,-40(fp)
   2cd88:	10800217 	ldw	r2,8(r2)
   2cd8c:	1887883a 	add	r3,r3,r2
   2cd90:	e0bff717 	ldw	r2,-36(fp)
   2cd94:	10c00215 	stw	r3,8(r2)
            m_free(m1);    /* free head (copied) mbuf */
   2cd98:	e13ff617 	ldw	r4,-40(fp)
   2cd9c:	002c0940 	call	2c094 <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
   2cda0:	e0bff717 	ldw	r2,-36(fp)
   2cda4:	e0bff615 	stw	r2,-40(fp)
   2cda8:	e0bff617 	ldw	r2,-40(fp)
   2cdac:	e0bffe15 	stw	r2,-8(fp)
            m2 = m2->m_next;  /* loop to while(m2) test */
   2cdb0:	e0bff717 	ldw	r2,-36(fp)
   2cdb4:	10800617 	ldw	r2,24(r2)
   2cdb8:	e0bff715 	stw	r2,-36(fp)
            tcpstat.tcps_oprepends++;
   2cdbc:	008001b4 	movhi	r2,6
   2cdc0:	10b90b04 	addi	r2,r2,-7124
   2cdc4:	10803217 	ldw	r2,200(r2)
   2cdc8:	10c00044 	addi	r3,r2,1
   2cdcc:	008001b4 	movhi	r2,6
   2cdd0:	10b90b04 	addi	r2,r2,-7124
   2cdd4:	10c03215 	stw	r3,200(r2)
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
   2cdd8:	e0bff717 	ldw	r2,-36(fp)
   2cddc:	103fa51e 	bne	r2,zero,2cc74 <__alt_mem_descriptor_memory+0xdefecc74>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      if (m2)  /* If all else fails, brute force copy: */
   2cde0:	e0bff717 	ldw	r2,-36(fp)
   2cde4:	10006f26 	beq	r2,zero,2cfa4 <ip_output+0x460>
      {
         total = 0;
   2cde8:	e03ff915 	stw	zero,-28(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
   2cdec:	e0bff617 	ldw	r2,-40(fp)
   2cdf0:	e0bff815 	stw	r2,-32(fp)
   2cdf4:	00000806 	br	2ce18 <ip_output+0x2d4>
            total += mtmp->m_len;
   2cdf8:	e0bff817 	ldw	r2,-32(fp)
   2cdfc:	10c00217 	ldw	r3,8(r2)
   2ce00:	e0bff917 	ldw	r2,-28(fp)
   2ce04:	1885883a 	add	r2,r3,r2
   2ce08:	e0bff915 	stw	r2,-28(fp)
      }

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
   2ce0c:	e0bff817 	ldw	r2,-32(fp)
   2ce10:	10800617 	ldw	r2,24(r2)
   2ce14:	e0bff815 	stw	r2,-32(fp)
   2ce18:	e0bff817 	ldw	r2,-32(fp)
   2ce1c:	103ff61e 	bne	r2,zero,2cdf8 <__alt_mem_descriptor_memory+0xdefecdf8>
            total += mtmp->m_len;
         LOCK_NET_RESOURCE(FREEQ_RESID);
   2ce20:	01000084 	movi	r4,2
   2ce24:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
   2ce28:	e0bff917 	ldw	r2,-28(fp)
   2ce2c:	10800e04 	addi	r2,r2,56
   2ce30:	1009883a 	mov	r4,r2
   2ce34:	002a53c0 	call	2a53c <pk_alloc>
   2ce38:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2ce3c:	01000084 	movi	r4,2
   2ce40:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         if (!pkt)
   2ce44:	e0bffa17 	ldw	r2,-24(fp)
   2ce48:	1000021e 	bne	r2,zero,2ce54 <ip_output+0x310>
            return ENOBUFS;
   2ce4c:	00801a44 	movi	r2,105
   2ce50:	0000aa06 	br	2d0fc <ip_output+0x5b8>
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
   2ce54:	e0bffa17 	ldw	r2,-24(fp)
   2ce58:	10c00117 	ldw	r3,4(r2)
   2ce5c:	00800174 	movhi	r2,5
   2ce60:	108f9704 	addi	r2,r2,15964
   2ce64:	10800017 	ldw	r2,0(r2)
   2ce68:	1887883a 	add	r3,r3,r2
   2ce6c:	e0bffa17 	ldw	r2,-24(fp)
   2ce70:	10c00315 	stw	r3,12(r2)

         mtmp = m1;
   2ce74:	e0bff617 	ldw	r2,-40(fp)
   2ce78:	e0bff815 	stw	r2,-32(fp)
         while (mtmp)
   2ce7c:	00002806 	br	2cf20 <ip_output+0x3dc>
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
   2ce80:	e0bffa17 	ldw	r2,-24(fp)
   2ce84:	11000317 	ldw	r4,12(r2)
   2ce88:	e0bff817 	ldw	r2,-32(fp)
   2ce8c:	10c00317 	ldw	r3,12(r2)
   2ce90:	e0bff817 	ldw	r2,-32(fp)
   2ce94:	10800217 	ldw	r2,8(r2)
   2ce98:	180b883a 	mov	r5,r3
   2ce9c:	100d883a 	mov	r6,r2
   2cea0:	0007c900 	call	7c90 <memcpy>
            pkt->nb_prot += mtmp->m_len;
   2cea4:	e0bffa17 	ldw	r2,-24(fp)
   2cea8:	10c00317 	ldw	r3,12(r2)
   2ceac:	e0bff817 	ldw	r2,-32(fp)
   2ceb0:	10800217 	ldw	r2,8(r2)
   2ceb4:	1887883a 	add	r3,r3,r2
   2ceb8:	e0bffa17 	ldw	r2,-24(fp)
   2cebc:	10c00315 	stw	r3,12(r2)
            pkt->nb_plen += mtmp->m_len;
   2cec0:	e0bffa17 	ldw	r2,-24(fp)
   2cec4:	10c00417 	ldw	r3,16(r2)
   2cec8:	e0bff817 	ldw	r2,-32(fp)
   2cecc:	10800217 	ldw	r2,8(r2)
   2ced0:	1887883a 	add	r3,r3,r2
   2ced4:	e0bffa17 	ldw	r2,-24(fp)
   2ced8:	10c00415 	stw	r3,16(r2)
            m2 = mtmp;
   2cedc:	e0bff817 	ldw	r2,-32(fp)
   2cee0:	e0bff715 	stw	r2,-36(fp)
            mtmp = mtmp->m_next;
   2cee4:	e0bff817 	ldw	r2,-32(fp)
   2cee8:	10800617 	ldw	r2,24(r2)
   2ceec:	e0bff815 	stw	r2,-32(fp)
            if (m2 != data)   /* save original head */
   2cef0:	e0fff717 	ldw	r3,-36(fp)
   2cef4:	e0bffe17 	ldw	r2,-8(fp)
   2cef8:	18800226 	beq	r3,r2,2cf04 <ip_output+0x3c0>
               m_free(m2);
   2cefc:	e13ff717 	ldw	r4,-36(fp)
   2cf00:	002c0940 	call	2c094 <m_free>
            tcpstat.tcps_ocopies++;
   2cf04:	008001b4 	movhi	r2,6
   2cf08:	10b90b04 	addi	r2,r2,-7124
   2cf0c:	10803417 	ldw	r2,208(r2)
   2cf10:	10c00044 	addi	r3,r2,1
   2cf14:	008001b4 	movhi	r2,6
   2cf18:	10b90b04 	addi	r2,r2,-7124
   2cf1c:	10c03415 	stw	r3,208(r2)
         if (!pkt)
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;

         mtmp = m1;
         while (mtmp)
   2cf20:	e0bff817 	ldw	r2,-32(fp)
   2cf24:	103fd61e 	bne	r2,zero,2ce80 <__alt_mem_descriptor_memory+0xdefece80>
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
            tcpstat.tcps_ocopies++;
         }
         pkt->nb_prot -= total;     /* fix data pointer */
   2cf28:	e0bffa17 	ldw	r2,-24(fp)
   2cf2c:	10c00317 	ldw	r3,12(r2)
   2cf30:	e0bff917 	ldw	r2,-28(fp)
   2cf34:	0085c83a 	sub	r2,zero,r2
   2cf38:	1887883a 	add	r3,r3,r2
   2cf3c:	e0bffa17 	ldw	r2,-24(fp)
   2cf40:	10c00315 	stw	r3,12(r2)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
   2cf44:	01000084 	movi	r4,2
   2cf48:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
   2cf4c:	e0bffe17 	ldw	r2,-8(fp)
   2cf50:	10800117 	ldw	r2,4(r2)
   2cf54:	1009883a 	mov	r4,r2
   2cf58:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2cf5c:	01000084 	movi	r4,2
   2cf60:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
   2cf64:	e0bffe17 	ldw	r2,-8(fp)
   2cf68:	e0fffa17 	ldw	r3,-24(fp)
   2cf6c:	10c00115 	stw	r3,4(r2)
         data->m_len = pkt->nb_plen;
   2cf70:	e0bffa17 	ldw	r2,-24(fp)
   2cf74:	10c00417 	ldw	r3,16(r2)
   2cf78:	e0bffe17 	ldw	r2,-8(fp)
   2cf7c:	10c00215 	stw	r3,8(r2)
         data->m_next = NULL;
   2cf80:	e0bffe17 	ldw	r2,-8(fp)
   2cf84:	10000615 	stw	zero,24(r2)
         data->m_data = pkt->nb_prot;
   2cf88:	e0bffa17 	ldw	r2,-24(fp)
   2cf8c:	10c00317 	ldw	r3,12(r2)
   2cf90:	e0bffe17 	ldw	r2,-8(fp)
   2cf94:	10c00315 	stw	r3,12(r2)
         data->m_len = total;
   2cf98:	e0fff917 	ldw	r3,-28(fp)
   2cf9c:	e0bffe17 	ldw	r2,-8(fp)
   2cfa0:	10c00215 	stw	r3,8(r2)
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
   2cfa4:	e0bffe17 	ldw	r2,-8(fp)
   2cfa8:	10c00317 	ldw	r3,12(r2)
   2cfac:	e0bffe17 	ldw	r2,-8(fp)
   2cfb0:	10800117 	ldw	r2,4(r2)
   2cfb4:	11000117 	ldw	r4,4(r2)
   2cfb8:	00800174 	movhi	r2,5
   2cfbc:	108f9704 	addi	r2,r2,15964
   2cfc0:	10800017 	ldw	r2,0(r2)
   2cfc4:	2085883a 	add	r2,r4,r2
   2cfc8:	1880032e 	bgeu	r3,r2,2cfd8 <ip_output+0x494>
      panic("ip_output: overflow");
   2cfcc:	01000174 	movhi	r4,5
   2cfd0:	213b4b04 	addi	r4,r4,-4820
   2cfd4:	00267380 	call	26738 <panic>

   pkt = data->pkt;
   2cfd8:	e0bffe17 	ldw	r2,-8(fp)
   2cfdc:	10800117 	ldw	r2,4(r2)
   2cfe0:	e0bffa15 	stw	r2,-24(fp)

   /* do we have options? */
   if (so_optsPack)
   2cfe4:	e0bfff17 	ldw	r2,-4(fp)
   2cfe8:	10000326 	beq	r2,zero,2cff8 <ip_output+0x4b4>
	   pkt->soxopts = so_optsPack;   /* yup */
   2cfec:	e0bffa17 	ldw	r2,-24(fp)
   2cff0:	e0ffff17 	ldw	r3,-4(fp)
   2cff4:	10c00c15 	stw	r3,48(r2)
      panic("ip_output: no so_optsPack for the IPv6 scope");     
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
   2cff8:	e0bffe17 	ldw	r2,-8(fp)
   2cffc:	10800317 	ldw	r2,12(r2)
   2d000:	e0bffc15 	stw	r2,-16(fp)
   pkt->fhost = bip->ip_dest;
   2d004:	e0bffc17 	ldw	r2,-16(fp)
   2d008:	10c00417 	ldw	r3,16(r2)
   2d00c:	e0bffa17 	ldw	r2,-24(fp)
   2d010:	10c00715 	stw	r3,28(r2)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
   2d014:	e0bffc17 	ldw	r2,-16(fp)
   2d018:	00c01144 	movi	r3,69
   2d01c:	10c00005 	stb	r3,0(r2)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
   2d020:	e0bffc17 	ldw	r2,-16(fp)
   2d024:	1080008b 	ldhu	r2,2(r2)
   2d028:	10bfffcc 	andi	r2,r2,65535
   2d02c:	1004d23a 	srli	r2,r2,8
   2d030:	1007883a 	mov	r3,r2
   2d034:	e0bffc17 	ldw	r2,-16(fp)
   2d038:	1080008b 	ldhu	r2,2(r2)
   2d03c:	10bfffcc 	andi	r2,r2,65535
   2d040:	1004923a 	slli	r2,r2,8
   2d044:	1884b03a 	or	r2,r3,r2
   2d048:	1007883a 	mov	r3,r2
   2d04c:	e0bffc17 	ldw	r2,-16(fp)
   2d050:	10c0008d 	sth	r3,2(r2)
   tcpp = (struct tcphdr *)ip_data(bip);
   2d054:	e0bffc17 	ldw	r2,-16(fp)
   2d058:	10800003 	ldbu	r2,0(r2)
   2d05c:	10803fcc 	andi	r2,r2,255
   2d060:	108003cc 	andi	r2,r2,15
   2d064:	1085883a 	add	r2,r2,r2
   2d068:	1085883a 	add	r2,r2,r2
   2d06c:	1007883a 	mov	r3,r2
   2d070:	e0bffc17 	ldw	r2,-16(fp)
   2d074:	10c5883a 	add	r2,r2,r3
   2d078:	e0bffd15 	stw	r2,-12(fp)
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
   2d07c:	e13ffc17 	ldw	r4,-16(fp)
   2d080:	0045ca00 	call	45ca0 <tcp_cksum>
   2d084:	1007883a 	mov	r3,r2
   2d088:	e0bffd17 	ldw	r2,-12(fp)
   2d08c:	10c0040d 	sth	r3,16(r2)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
   2d090:	e0bffc17 	ldw	r2,-16(fp)
   2d094:	10c00504 	addi	r3,r2,20
   2d098:	e0bffa17 	ldw	r2,-24(fp)
   2d09c:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen = data->m_len - sizeof(struct ip);
   2d0a0:	e0bffe17 	ldw	r2,-8(fp)
   2d0a4:	10800217 	ldw	r2,8(r2)
   2d0a8:	10fffb04 	addi	r3,r2,-20
   2d0ac:	e0bffa17 	ldw	r2,-24(fp)
   2d0b0:	10c00415 	stw	r3,16(r2)

   e = ip_write(IPPROTO_TCP, pkt);
   2d0b4:	01000184 	movi	r4,6
   2d0b8:	e17ffa17 	ldw	r5,-24(fp)
   2d0bc:	003d78c0 	call	3d78c <ip_write>
   2d0c0:	e0bffb15 	stw	r2,-20(fp)

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
   2d0c4:	e0bffe17 	ldw	r2,-8(fp)
   2d0c8:	10000115 	stw	zero,4(r2)
   m_freem(data);
   2d0cc:	e13ffe17 	ldw	r4,-8(fp)
   2d0d0:	002c1a40 	call	2c1a4 <m_freem>

   if (e < 0)
   2d0d4:	e0bffb17 	ldw	r2,-20(fp)
   2d0d8:	1000070e 	bge	r2,zero,2d0f8 <ip_output+0x5b4>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
   2d0dc:	e0bffb17 	ldw	r2,-20(fp)
   2d0e0:	10bffa98 	cmpnei	r2,r2,-22
   2d0e4:	1000021e 	bne	r2,zero,2d0f0 <ip_output+0x5ac>
         return 0;
   2d0e8:	0005883a 	mov	r2,zero
   2d0ec:	00000306 	br	2d0fc <ip_output+0x5b8>
      return e;
   2d0f0:	e0bffb17 	ldw	r2,-20(fp)
   2d0f4:	00000106 	br	2d0fc <ip_output+0x5b8>
   }
   else
      return 0;
   2d0f8:	0005883a 	mov	r2,zero
}
   2d0fc:	e037883a 	mov	sp,fp
   2d100:	dfc00117 	ldw	ra,4(sp)
   2d104:	df000017 	ldw	fp,0(sp)
   2d108:	dec00204 	addi	sp,sp,8
   2d10c:	f800283a 	ret

0002d110 <in_broadcast>:
 * RETURNS: TRUE if broadcast, else FALSE
 */

int
in_broadcast(u_long ipaddr)   /* passed in net endian */
{
   2d110:	defffe04 	addi	sp,sp,-8
   2d114:	df000115 	stw	fp,4(sp)
   2d118:	df000104 	addi	fp,sp,4
   2d11c:	e13fff15 	stw	r4,-4(fp)
   if (ipaddr == 0xffffffff)
   2d120:	e0bfff17 	ldw	r2,-4(fp)
   2d124:	10bfffd8 	cmpnei	r2,r2,-1
   2d128:	1000021e 	bne	r2,zero,2d134 <in_broadcast+0x24>
      return TRUE;
   2d12c:	00800044 	movi	r2,1
   2d130:	00000106 	br	2d138 <in_broadcast+0x28>

   return FALSE;
   2d134:	0005883a 	mov	r2,zero
}
   2d138:	e037883a 	mov	sp,fp
   2d13c:	df000017 	ldw	fp,0(sp)
   2d140:	dec00104 	addi	sp,sp,4
   2d144:	f800283a 	ret

0002d148 <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
   2d148:	defffb04 	addi	sp,sp,-20
   2d14c:	dfc00415 	stw	ra,16(sp)
   2d150:	df000315 	stw	fp,12(sp)
   2d154:	df000304 	addi	fp,sp,12
   2d158:	e13ffe15 	stw	r4,-8(fp)
   2d15c:	e17fff15 	stw	r5,-4(fp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
   2d160:	e0bffe17 	ldw	r2,-8(fp)
   2d164:	10800003 	ldbu	r2,0(r2)
   2d168:	10803fcc 	andi	r2,r2,255
   2d16c:	108003cc 	andi	r2,r2,15
   2d170:	1085883a 	add	r2,r2,r2
   2d174:	1085883a 	add	r2,r2,r2
   2d178:	e0bffd15 	stw	r2,-12(fp)

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
   2d17c:	e0bffd17 	ldw	r2,-12(fp)
   2d180:	10800548 	cmpgei	r2,r2,21
   2d184:	1000011e 	bne	r2,zero,2d18c <np_stripoptions+0x44>
      return;
   2d188:	00002606 	br	2d224 <np_stripoptions+0xdc>

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
   2d18c:	e0bffd17 	ldw	r2,-12(fp)
   2d190:	10bffb04 	addi	r2,r2,-20
   2d194:	e0bffd15 	stw	r2,-12(fp)

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
   2d198:	e0bffe17 	ldw	r2,-8(fp)
   2d19c:	1080008b 	ldhu	r2,2(r2)
   2d1a0:	e0fffd17 	ldw	r3,-12(fp)
   2d1a4:	10c5c83a 	sub	r2,r2,r3
   2d1a8:	1007883a 	mov	r3,r2
   2d1ac:	e0bffe17 	ldw	r2,-8(fp)
   2d1b0:	10c0008d 	sth	r3,2(r2)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
   2d1b4:	e0bffe17 	ldw	r2,-8(fp)
   2d1b8:	10800003 	ldbu	r2,0(r2)
   2d1bc:	1007883a 	mov	r3,r2
   2d1c0:	00bffc04 	movi	r2,-16
   2d1c4:	1884703a 	and	r2,r3,r2
   2d1c8:	10800154 	ori	r2,r2,5
   2d1cc:	1007883a 	mov	r3,r2
   2d1d0:	e0bffe17 	ldw	r2,-8(fp)
   2d1d4:	10c00005 	stb	r3,0(r2)

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
   2d1d8:	e0bffd17 	ldw	r2,-12(fp)
   2d1dc:	e0fffe17 	ldw	r3,-8(fp)
   2d1e0:	1885883a 	add	r2,r3,r2
   2d1e4:	1009883a 	mov	r4,r2
   2d1e8:	e17ffe17 	ldw	r5,-8(fp)
   2d1ec:	01800504 	movi	r6,20
   2d1f0:	0007dc80 	call	7dc8 <memmove>
   m->m_len -= ihlen;
   2d1f4:	e0bfff17 	ldw	r2,-4(fp)
   2d1f8:	10c00217 	ldw	r3,8(r2)
   2d1fc:	e0bffd17 	ldw	r2,-12(fp)
   2d200:	1887c83a 	sub	r3,r3,r2
   2d204:	e0bfff17 	ldw	r2,-4(fp)
   2d208:	10c00215 	stw	r3,8(r2)
   m->m_data += ihlen;
   2d20c:	e0bfff17 	ldw	r2,-4(fp)
   2d210:	10c00317 	ldw	r3,12(r2)
   2d214:	e0bffd17 	ldw	r2,-12(fp)
   2d218:	1887883a 	add	r3,r3,r2
   2d21c:	e0bfff17 	ldw	r2,-4(fp)
   2d220:	10c00315 	stw	r3,12(r2)
}
   2d224:	e037883a 	mov	sp,fp
   2d228:	dfc00117 	ldw	ra,4(sp)
   2d22c:	df000017 	ldw	fp,0(sp)
   2d230:	dec00204 	addi	sp,sp,8
   2d234:	f800283a 	ret

0002d238 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
   2d238:	defff304 	addi	sp,sp,-52
   2d23c:	dfc00c15 	stw	ra,48(sp)
   2d240:	df000b15 	stw	fp,44(sp)
   2d244:	df000b04 	addi	fp,sp,44
   2d248:	e13ffe15 	stw	r4,-8(fp)
   2d24c:	e17fff15 	stw	r5,-4(fp)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
   2d250:	e0bfff17 	ldw	r2,-4(fp)
   2d254:	10800617 	ldw	r2,24(r2)
   2d258:	1006d63a 	srli	r3,r2,24
   2d25c:	e0bfff17 	ldw	r2,-4(fp)
   2d260:	10800617 	ldw	r2,24(r2)
   2d264:	1004d23a 	srli	r2,r2,8
   2d268:	10bfc00c 	andi	r2,r2,65280
   2d26c:	1886b03a 	or	r3,r3,r2
   2d270:	e0bfff17 	ldw	r2,-4(fp)
   2d274:	10800617 	ldw	r2,24(r2)
   2d278:	10bfc00c 	andi	r2,r2,65280
   2d27c:	1004923a 	slli	r2,r2,8
   2d280:	1886b03a 	or	r3,r3,r2
   2d284:	e0bfff17 	ldw	r2,-4(fp)
   2d288:	10800617 	ldw	r2,24(r2)
   2d28c:	1004963a 	slli	r2,r2,24
   2d290:	1884b03a 	or	r2,r3,r2
   2d294:	e0bff815 	stw	r2,-32(fp)
   lhost = htonl(pdp->dip.ip_src);
   2d298:	e0bfff17 	ldw	r2,-4(fp)
   2d29c:	10800517 	ldw	r2,20(r2)
   2d2a0:	1006d63a 	srli	r3,r2,24
   2d2a4:	e0bfff17 	ldw	r2,-4(fp)
   2d2a8:	10800517 	ldw	r2,20(r2)
   2d2ac:	1004d23a 	srli	r2,r2,8
   2d2b0:	10bfc00c 	andi	r2,r2,65280
   2d2b4:	1886b03a 	or	r3,r3,r2
   2d2b8:	e0bfff17 	ldw	r2,-4(fp)
   2d2bc:	10800517 	ldw	r2,20(r2)
   2d2c0:	10bfc00c 	andi	r2,r2,65280
   2d2c4:	1004923a 	slli	r2,r2,8
   2d2c8:	1886b03a 	or	r3,r3,r2
   2d2cc:	e0bfff17 	ldw	r2,-4(fp)
   2d2d0:	10800517 	ldw	r2,20(r2)
   2d2d4:	1004963a 	slli	r2,r2,24
   2d2d8:	1884b03a 	or	r2,r3,r2
   2d2dc:	e0bff915 	stw	r2,-28(fp)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
   2d2e0:	e0bfff17 	ldw	r2,-4(fp)
   2d2e4:	10800704 	addi	r2,r2,28
   2d2e8:	1080000b 	ldhu	r2,0(r2)
   2d2ec:	10bfffcc 	andi	r2,r2,65535
   2d2f0:	1004d23a 	srli	r2,r2,8
   2d2f4:	1007883a 	mov	r3,r2
   2d2f8:	e0bfff17 	ldw	r2,-4(fp)
   2d2fc:	10800704 	addi	r2,r2,28
   2d300:	1080000b 	ldhu	r2,0(r2)
   2d304:	10bfffcc 	andi	r2,r2,65535
   2d308:	1004923a 	slli	r2,r2,8
   2d30c:	1884b03a 	or	r2,r3,r2
   2d310:	e0bffa0d 	sth	r2,-24(fp)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
   2d314:	e0bfff17 	ldw	r2,-4(fp)
   2d318:	10800784 	addi	r2,r2,30
   2d31c:	1080000b 	ldhu	r2,0(r2)
   2d320:	10bfffcc 	andi	r2,r2,65535
   2d324:	1004d23a 	srli	r2,r2,8
   2d328:	1007883a 	mov	r3,r2
   2d32c:	e0bfff17 	ldw	r2,-4(fp)
   2d330:	10800784 	addi	r2,r2,30
   2d334:	1080000b 	ldhu	r2,0(r2)
   2d338:	10bfffcc 	andi	r2,r2,65535
   2d33c:	1004923a 	slli	r2,r2,8
   2d340:	1884b03a 	or	r2,r3,r2
   2d344:	e0bffa8d 	sth	r2,-22(fp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
   2d348:	e0bfff17 	ldw	r2,-4(fp)
   2d34c:	10800043 	ldbu	r2,1(r2)
   2d350:	10803fcc 	andi	r2,r2,255
   2d354:	1080201c 	xori	r2,r2,128
   2d358:	10bfe004 	addi	r2,r2,-128
   2d35c:	10800118 	cmpnei	r2,r2,4
   2d360:	1000011e 	bne	r2,zero,2d368 <so_icmpdu+0x130>
    {
       goto done;
   2d364:	00007506 	br	2d53c <so_icmpdu+0x304>
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
   2d368:	e0bfff17 	ldw	r2,-4(fp)
   2d36c:	10800443 	ldbu	r2,17(r2)
   2d370:	10803fcc 	andi	r2,r2,255
   2d374:	10800198 	cmpnei	r2,r2,6
   2d378:	1000251e 	bne	r2,zero,2d410 <so_icmpdu+0x1d8>
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
   2d37c:	e0fffa8b 	ldhu	r3,-22(fp)
   2d380:	e0bffa0b 	ldhu	r2,-24(fp)
   2d384:	d8800015 	stw	r2,0(sp)
   2d388:	00800044 	movi	r2,1
   2d38c:	d8800115 	stw	r2,4(sp)
   2d390:	010001b4 	movhi	r4,6
   2d394:	21390004 	addi	r4,r4,-7168
   2d398:	e17ff817 	ldw	r5,-32(fp)
   2d39c:	180d883a 	mov	r6,r3
   2d3a0:	e1fff917 	ldw	r7,-28(fp)
   2d3a4:	00464580 	call	46458 <in_pcblookup>
   2d3a8:	e0bffb15 	stw	r2,-20(fp)
      if (inp == 0)
   2d3ac:	e0bffb17 	ldw	r2,-20(fp)
   2d3b0:	1000011e 	bne	r2,zero,2d3b8 <so_icmpdu+0x180>
         goto done;
   2d3b4:	00006106 	br	2d53c <so_icmpdu+0x304>
      so = inp->inp_socket;
   2d3b8:	e0bffb17 	ldw	r2,-20(fp)
   2d3bc:	10800817 	ldw	r2,32(r2)
   2d3c0:	e0bffc15 	stw	r2,-16(fp)
      if (so == 0)
   2d3c4:	e0bffc17 	ldw	r2,-16(fp)
   2d3c8:	1000011e 	bne	r2,zero,2d3d0 <so_icmpdu+0x198>
         goto done;
   2d3cc:	00005b06 	br	2d53c <so_icmpdu+0x304>
      tp = intotcpcb(inp);
   2d3d0:	e0bffb17 	ldw	r2,-20(fp)
   2d3d4:	10800917 	ldw	r2,36(r2)
   2d3d8:	e0bffd15 	stw	r2,-12(fp)
      if (tp)
   2d3dc:	e0bffd17 	ldw	r2,-12(fp)
   2d3e0:	10000726 	beq	r2,zero,2d400 <so_icmpdu+0x1c8>
      {
         if (tp->t_state <= TCPS_LISTEN)
   2d3e4:	e0bffd17 	ldw	r2,-12(fp)
   2d3e8:	10800217 	ldw	r2,8(r2)
   2d3ec:	10800088 	cmpgei	r2,r2,2
   2d3f0:	1000011e 	bne	r2,zero,2d3f8 <so_icmpdu+0x1c0>
         {
            goto done;
   2d3f4:	00005106 	br	2d53c <so_icmpdu+0x304>
               goto done;
        }
   }
#endif

         tcp_close(tp);
   2d3f8:	e13ffd17 	ldw	r4,-12(fp)
   2d3fc:	00377100 	call	37710 <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
   2d400:	e0bffc17 	ldw	r2,-16(fp)
   2d404:	00c01bc4 	movi	r3,111
   2d408:	10c00615 	stw	r3,24(r2)
   2d40c:	00004b06 	br	2d53c <so_icmpdu+0x304>
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
   2d410:	e0bfff17 	ldw	r2,-4(fp)
   2d414:	10800443 	ldbu	r2,17(r2)
   2d418:	10803fcc 	andi	r2,r2,255
   2d41c:	10800458 	cmpnei	r2,r2,17
   2d420:	1000451e 	bne	r2,zero,2d538 <so_icmpdu+0x300>
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
   2d424:	00800174 	movhi	r2,5
   2d428:	108fb204 	addi	r2,r2,16072
   2d42c:	10800017 	ldw	r2,0(r2)
   2d430:	e0bff715 	stw	r2,-36(fp)
   2d434:	00002206 	br	2d4c0 <so_icmpdu+0x288>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
   2d438:	e0bff717 	ldw	r2,-36(fp)
   2d43c:	1080020b 	ldhu	r2,8(r2)
   2d440:	10ffffcc 	andi	r3,r2,65535
   2d444:	e0bffa8b 	ldhu	r2,-22(fp)
   2d448:	18800426 	beq	r3,r2,2d45c <so_icmpdu+0x224>
   2d44c:	e0bff717 	ldw	r2,-36(fp)
   2d450:	1080020b 	ldhu	r2,8(r2)
   2d454:	10bfffcc 	andi	r2,r2,65535
   2d458:	1000161e 	bne	r2,zero,2d4b4 <so_icmpdu+0x27c>
             (tmp->u_fhost == htonl(fhost)) &&
   2d45c:	e0bff717 	ldw	r2,-36(fp)
   2d460:	10c00417 	ldw	r3,16(r2)
   2d464:	e0bff817 	ldw	r2,-32(fp)
   2d468:	1008d63a 	srli	r4,r2,24
   2d46c:	e0bff817 	ldw	r2,-32(fp)
   2d470:	1004d23a 	srli	r2,r2,8
   2d474:	10bfc00c 	andi	r2,r2,65280
   2d478:	2088b03a 	or	r4,r4,r2
   2d47c:	e0bff817 	ldw	r2,-32(fp)
   2d480:	10bfc00c 	andi	r2,r2,65280
   2d484:	1004923a 	slli	r2,r2,8
   2d488:	2088b03a 	or	r4,r4,r2
   2d48c:	e0bff817 	ldw	r2,-32(fp)
   2d490:	1004963a 	slli	r2,r2,24
   2d494:	2084b03a 	or	r2,r4,r2
   else if(pdp->dip.ip_prot == UDP_PROT)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
   2d498:	1880061e 	bne	r3,r2,2d4b4 <so_icmpdu+0x27c>
             (tmp->u_fhost == htonl(fhost)) &&
             (tmp->u_lport == lport))
   2d49c:	e0bff717 	ldw	r2,-36(fp)
   2d4a0:	1080018b 	ldhu	r2,6(r2)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
             (tmp->u_fhost == htonl(fhost)) &&
   2d4a4:	10ffffcc 	andi	r3,r2,65535
   2d4a8:	e0bffa0b 	ldhu	r2,-24(fp)
   2d4ac:	1880011e 	bne	r3,r2,2d4b4 <so_icmpdu+0x27c>
             (tmp->u_lport == lport))
         {
            break;   /* found our UDP table entry */
   2d4b0:	00000506 	br	2d4c8 <so_icmpdu+0x290>
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
   2d4b4:	e0bff717 	ldw	r2,-36(fp)
   2d4b8:	10800017 	ldw	r2,0(r2)
   2d4bc:	e0bff715 	stw	r2,-36(fp)
   2d4c0:	e0bff717 	ldw	r2,-36(fp)
   2d4c4:	103fdc1e 	bne	r2,zero,2d438 <__alt_mem_descriptor_memory+0xdefed438>
             (tmp->u_fhost == htonl(fhost)) &&
             (tmp->u_lport == lport))
         {
            break;   /* found our UDP table entry */
         }
      if (!tmp) 
   2d4c8:	e0bff717 	ldw	r2,-36(fp)
   2d4cc:	1000011e 	bne	r2,zero,2d4d4 <so_icmpdu+0x29c>
         goto done;
   2d4d0:	00001a06 	br	2d53c <so_icmpdu+0x304>
      so = (struct socket *)tmp->u_data;
   2d4d4:	e0bff717 	ldw	r2,-36(fp)
   2d4d8:	10800617 	ldw	r2,24(r2)
   2d4dc:	e0bffc15 	stw	r2,-16(fp)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
   2d4e0:	e0bffc17 	ldw	r2,-16(fp)
   2d4e4:	10800983 	ldbu	r2,38(r2)
   2d4e8:	10803fcc 	andi	r2,r2,255
   2d4ec:	1080201c 	xori	r2,r2,128
   2d4f0:	10bfe004 	addi	r2,r2,-128
   2d4f4:	108000a0 	cmpeqi	r2,r2,2
   2d4f8:	1000011e 	bne	r2,zero,2d500 <so_icmpdu+0x2c8>
         goto done;
   2d4fc:	00000f06 	br	2d53c <so_icmpdu+0x304>
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
   2d500:	e0bffc17 	ldw	r2,-16(fp)
   2d504:	00c01bc4 	movi	r3,111
   2d508:	10c00615 	stw	r3,24(r2)
      /* do a select() notify on socket here */
      sorwakeup(so);
   2d50c:	e0bffc17 	ldw	r2,-16(fp)
   2d510:	10800a04 	addi	r2,r2,40
   2d514:	e13ffc17 	ldw	r4,-16(fp)
   2d518:	100b883a 	mov	r5,r2
   2d51c:	0031d740 	call	31d74 <sbwakeup>
      sowwakeup(so);
   2d520:	e0bffc17 	ldw	r2,-16(fp)
   2d524:	10801204 	addi	r2,r2,72
   2d528:	e13ffc17 	ldw	r4,-16(fp)
   2d52c:	100b883a 	mov	r5,r2
   2d530:	0031d740 	call	31d74 <sbwakeup>
   2d534:	00000106 	br	2d53c <so_icmpdu+0x304>
   }
#endif   /* UDP_SOCKETS */
   else
      goto done;
   2d538:	0001883a 	nop
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   2d53c:	01000084 	movi	r4,2
   2d540:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
   2d544:	e13ffe17 	ldw	r4,-8(fp)
   2d548:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   2d54c:	01000084 	movi	r4,2
   2d550:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return;
   2d554:	0001883a 	nop
}
   2d558:	e037883a 	mov	sp,fp
   2d55c:	dfc00117 	ldw	ra,4(sp)
   2d560:	df000017 	ldw	fp,0(sp)
   2d564:	dec00204 	addi	sp,sp,8
   2d568:	f800283a 	ret

0002d56c <tcp_tick>:
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
   2d56c:	defffe04 	addi	sp,sp,-8
   2d570:	dfc00115 	stw	ra,4(sp)
   2d574:	df000015 	stw	fp,0(sp)
   2d578:	d839883a 	mov	fp,sp
   /* guard against re-entry */
   if (in_tcptick)
   2d57c:	d0a89917 	ldw	r2,-23964(gp)
   2d580:	10000126 	beq	r2,zero,2d588 <tcp_tick+0x1c>
      return;
   2d584:	00001506 	br	2d5dc <tcp_tick+0x70>
   in_tcptick++;
   2d588:	d0a89917 	ldw	r2,-23964(gp)
   2d58c:	10800044 	addi	r2,r2,1
   2d590:	d0a89915 	stw	r2,-23964(gp)

   LOCK_NET_RESOURCE(NET_RESID);
   2d594:	0009883a 	mov	r4,zero
   2d598:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
   2d59c:	00800174 	movhi	r2,5
   2d5a0:	108fbe04 	addi	r2,r2,16120
   2d5a4:	10c00017 	ldw	r3,0(r2)
   2d5a8:	d0a89817 	ldw	r2,-23968(gp)
   2d5ac:	18800636 	bltu	r3,r2,2d5c8 <tcp_tick+0x5c>
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
   2d5b0:	00379340 	call	37934 <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
   2d5b4:	00800174 	movhi	r2,5
   2d5b8:	108fbe04 	addi	r2,r2,16120
   2d5bc:	10800017 	ldw	r2,0(r2)
   2d5c0:	10800c84 	addi	r2,r2,50
   2d5c4:	d0a89815 	stw	r2,-23968(gp)

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
   2d5c8:	0009883a 	mov	r4,zero
   2d5cc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   in_tcptick--;
   2d5d0:	d0a89917 	ldw	r2,-23964(gp)
   2d5d4:	10bfffc4 	addi	r2,r2,-1
   2d5d8:	d0a89915 	stw	r2,-23964(gp)
}
   2d5dc:	e037883a 	mov	sp,fp
   2d5e0:	dfc00117 	ldw	ra,4(sp)
   2d5e4:	df000017 	ldw	fp,0(sp)
   2d5e8:	dec00204 	addi	sp,sp,8
   2d5ec:	f800283a 	ret

0002d5f0 <rawip_lookup>:
 *          or NULL if no matching raw IP endpoint is found.
 */

struct ipraw_ep *
rawip_lookup(struct socket * so)
{
   2d5f0:	defffd04 	addi	sp,sp,-12
   2d5f4:	df000215 	stw	fp,8(sp)
   2d5f8:	df000204 	addi	fp,sp,8
   2d5fc:	e13fff15 	stw	r4,-4(fp)
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
   2d600:	00800174 	movhi	r2,5
   2d604:	108fe504 	addi	r2,r2,16276
   2d608:	10800017 	ldw	r2,0(r2)
   2d60c:	e0bffe15 	stw	r2,-8(fp)
   2d610:	00000906 	br	2d638 <rawip_lookup+0x48>
      if (tmp->ipr_data == (void*)so)
   2d614:	e0bffe17 	ldw	r2,-8(fp)
   2d618:	10c00417 	ldw	r3,16(r2)
   2d61c:	e0bfff17 	ldw	r2,-4(fp)
   2d620:	1880021e 	bne	r3,r2,2d62c <rawip_lookup+0x3c>
      return (tmp);
   2d624:	e0bffe17 	ldw	r2,-8(fp)
   2d628:	00000606 	br	2d644 <rawip_lookup+0x54>
struct ipraw_ep *
rawip_lookup(struct socket * so)
{
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
   2d62c:	e0bffe17 	ldw	r2,-8(fp)
   2d630:	10800017 	ldw	r2,0(r2)
   2d634:	e0bffe15 	stw	r2,-8(fp)
   2d638:	e0bffe17 	ldw	r2,-8(fp)
   2d63c:	103ff51e 	bne	r2,zero,2d614 <__alt_mem_descriptor_memory+0xdefed614>
      if (tmp->ipr_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
   2d640:	0005883a 	mov	r2,zero
}
   2d644:	e037883a 	mov	sp,fp
   2d648:	df000017 	ldw	fp,0(sp)
   2d64c:	dec00104 	addi	sp,sp,4
   2d650:	f800283a 	ret

0002d654 <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
   2d654:	defff504 	addi	sp,sp,-44
   2d658:	dfc00a15 	stw	ra,40(sp)
   2d65c:	df000915 	stw	fp,36(sp)
   2d660:	df000904 	addi	fp,sp,36
   2d664:	e13ffe15 	stw	r4,-8(fp)
   2d668:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   2d66c:	e0bfff17 	ldw	r2,-4(fp)
   2d670:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
   2d674:	0009883a 	mov	r4,zero
   2d678:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
   2d67c:	e0bff717 	ldw	r2,-36(fp)
   2d680:	10c00a17 	ldw	r3,40(r2)
   2d684:	e0bffe17 	ldw	r2,-8(fp)
   2d688:	10800417 	ldw	r2,16(r2)
   2d68c:	1887883a 	add	r3,r3,r2
   2d690:	e0bff717 	ldw	r2,-36(fp)
   2d694:	10800b17 	ldw	r2,44(r2)
   2d698:	18800436 	bltu	r3,r2,2d6ac <rawip_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   2d69c:	0009883a 	mov	r4,zero
   2d6a0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   2d6a4:	00801a44 	movi	r2,105
   2d6a8:	00005706 	br	2d808 <rawip_soinput+0x1b4>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
   2d6ac:	01000044 	movi	r4,1
   2d6b0:	000b883a 	mov	r5,zero
   2d6b4:	002bf0c0 	call	2bf0c <m_getnbuf>
   2d6b8:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
   2d6bc:	e0bff817 	ldw	r2,-32(fp)
   2d6c0:	1000041e 	bne	r2,zero,2d6d4 <rawip_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   2d6c4:	0009883a 	mov	r4,zero
   2d6c8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   2d6cc:	00801a44 	movi	r2,105
   2d6d0:	00004d06 	br	2d808 <rawip_soinput+0x1b4>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   2d6d4:	e0bff817 	ldw	r2,-32(fp)
   2d6d8:	e0fffe17 	ldw	r3,-8(fp)
   2d6dc:	10c00115 	stw	r3,4(r2)
   m_in->m_base = pkt->nb_buff;
   2d6e0:	e0bffe17 	ldw	r2,-8(fp)
   2d6e4:	10c00117 	ldw	r3,4(r2)
   2d6e8:	e0bff817 	ldw	r2,-32(fp)
   2d6ec:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
   2d6f0:	e0bffe17 	ldw	r2,-8(fp)
   2d6f4:	10c00217 	ldw	r3,8(r2)
   2d6f8:	e0bff817 	ldw	r2,-32(fp)
   2d6fc:	10c00515 	stw	r3,20(r2)
   m_in->m_data = pkt->nb_prot;
   2d700:	e0bffe17 	ldw	r2,-8(fp)
   2d704:	10c00317 	ldw	r3,12(r2)
   2d708:	e0bff817 	ldw	r2,-32(fp)
   2d70c:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
   2d710:	e0bffe17 	ldw	r2,-8(fp)
   2d714:	10c00417 	ldw	r3,16(r2)
   2d718:	e0bff817 	ldw	r2,-32(fp)
   2d71c:	10c00215 	stw	r3,8(r2)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
   2d720:	e0bff717 	ldw	r2,-36(fp)
   2d724:	10800417 	ldw	r2,16(r2)
   2d728:	1088000c 	andi	r2,r2,8192
   2d72c:	1000141e 	bne	r2,zero,2d780 <rawip_soinput+0x12c>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
   2d730:	e0bffe17 	ldw	r2,-8(fp)
   2d734:	10800317 	ldw	r2,12(r2)
   2d738:	10800003 	ldbu	r2,0(r2)
   2d73c:	10803fcc 	andi	r2,r2,255
   2d740:	108003cc 	andi	r2,r2,15
   2d744:	1085883a 	add	r2,r2,r2
   2d748:	1085883a 	add	r2,r2,r2
   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
   {
      unsigned int ihl = 
   2d74c:	e0bff915 	stw	r2,-28(fp)
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
      m_in->m_data += ihl;
   2d750:	e0bff817 	ldw	r2,-32(fp)
   2d754:	10c00317 	ldw	r3,12(r2)
   2d758:	e0bff917 	ldw	r2,-28(fp)
   2d75c:	1887883a 	add	r3,r3,r2
   2d760:	e0bff817 	ldw	r2,-32(fp)
   2d764:	10c00315 	stw	r3,12(r2)
      m_in->m_len -= ihl;
   2d768:	e0bff817 	ldw	r2,-32(fp)
   2d76c:	10c00217 	ldw	r3,8(r2)
   2d770:	e0bff917 	ldw	r2,-28(fp)
   2d774:	1887c83a 	sub	r3,r3,r2
   2d778:	e0bff817 	ldw	r2,-32(fp)
   2d77c:	10c00215 	stw	r3,8(r2)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
   2d780:	e0bffe17 	ldw	r2,-8(fp)
   2d784:	10800717 	ldw	r2,28(r2)
   2d788:	e0bffb15 	stw	r2,-20(fp)
   sin.sin_port = 0;
   2d78c:	e03ffa8d 	sth	zero,-22(fp)
   sin.sin_family = AF_INET;
   2d790:	00800084 	movi	r2,2
   2d794:	e0bffa0d 	sth	r2,-24(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
   2d798:	e0bff717 	ldw	r2,-36(fp)
   2d79c:	10c00a04 	addi	r3,r2,40
   2d7a0:	e0bffa04 	addi	r2,fp,-24
   2d7a4:	1809883a 	mov	r4,r3
   2d7a8:	100b883a 	mov	r5,r2
   2d7ac:	e1bff817 	ldw	r6,-32(fp)
   2d7b0:	00320980 	call	32098 <sbappendaddr>
   2d7b4:	1000081e 	bne	r2,zero,2d7d8 <rawip_soinput+0x184>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
   2d7b8:	e0bff817 	ldw	r2,-32(fp)
   2d7bc:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
   2d7c0:	e13ff817 	ldw	r4,-32(fp)
   2d7c4:	002c0940 	call	2c094 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
   2d7c8:	0009883a 	mov	r4,zero
   2d7cc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   2d7d0:	00801a44 	movi	r2,105
   2d7d4:	00000c06 	br	2d808 <rawip_soinput+0x1b4>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
   2d7d8:	e0bff717 	ldw	r2,-36(fp)
   2d7dc:	10800a04 	addi	r2,r2,40
   2d7e0:	1009883a 	mov	r4,r2
   2d7e4:	00271c80 	call	271c8 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
   2d7e8:	e0bff717 	ldw	r2,-36(fp)
   2d7ec:	10800a04 	addi	r2,r2,40
   2d7f0:	e13ff717 	ldw	r4,-36(fp)
   2d7f4:	100b883a 	mov	r5,r2
   2d7f8:	0031d740 	call	31d74 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
   2d7fc:	0009883a 	mov	r4,zero
   2d800:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return 0;
   2d804:	0005883a 	mov	r2,zero
}
   2d808:	e037883a 	mov	sp,fp
   2d80c:	dfc00117 	ldw	ra,4(sp)
   2d810:	df000017 	ldw	fp,0(sp)
   2d814:	dec00204 	addi	sp,sp,8
   2d818:	f800283a 	ret

0002d81c <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
   2d81c:	deffef04 	addi	sp,sp,-68
   2d820:	dfc01015 	stw	ra,64(sp)
   2d824:	df000f15 	stw	fp,60(sp)
   2d828:	dc000e15 	stw	r16,56(sp)
   2d82c:	df000f04 	addi	fp,sp,60
   2d830:	e13ffc15 	stw	r4,-16(fp)
   2d834:	e17ffd15 	stw	r5,-12(fp)
   2d838:	e1bffe15 	stw	r6,-8(fp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
   2d83c:	e0bffc17 	ldw	r2,-16(fp)
   2d840:	10800717 	ldw	r2,28(r2)
   2d844:	e0bff615 	stw	r2,-40(fp)

   switch (req) 
   2d848:	e0bff617 	ldw	r2,-40(fp)
   2d84c:	10800468 	cmpgeui	r2,r2,17
   2d850:	1001ba1e 	bne	r2,zero,2df3c <rawip_usrreq+0x720>
   2d854:	e0bff617 	ldw	r2,-40(fp)
   2d858:	100690ba 	slli	r3,r2,2
   2d85c:	008000f4 	movhi	r2,3
   2d860:	10b61c04 	addi	r2,r2,-10128
   2d864:	1885883a 	add	r2,r3,r2
   2d868:	10800017 	ldw	r2,0(r2)
   2d86c:	1000683a 	jmp	r2
   2d870:	0002d8b4 	movhi	zero,2914
   2d874:	0002d93c 	xorhi	zero,zero,2916
   2d878:	0002d978 	rdprs	zero,zero,2917
   2d87c:	0002df3c 	xorhi	zero,zero,2940
   2d880:	0002d978 	rdprs	zero,zero,2917
   2d884:	0002df3c 	xorhi	zero,zero,2940
   2d888:	0002df30 	cmpltui	zero,zero,2940
   2d88c:	0002df3c 	xorhi	zero,zero,2940
   2d890:	0002df30 	cmpltui	zero,zero,2940
   2d894:	0002db00 	call	2db0 <getPHYSpeed+0x97c>
   2d898:	0002df3c 	xorhi	zero,zero,2940
   2d89c:	0002df3c 	xorhi	zero,zero,2940
   2d8a0:	0002df3c 	xorhi	zero,zero,2940
   2d8a4:	0002df3c 	xorhi	zero,zero,2940
   2d8a8:	0002df3c 	xorhi	zero,zero,2940
   2d8ac:	0002de9c 	xori	zero,zero,2938
   2d8b0:	0002de9c 	xori	zero,zero,2938
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
   2d8b4:	e0bffc17 	ldw	r2,-16(fp)
   2d8b8:	10800417 	ldw	r2,16(r2)
   2d8bc:	1088000c 	andi	r2,r2,8192
   2d8c0:	1009883a 	mov	r4,r2
   2d8c4:	004204c0 	call	4204c <ip_raw_maxalloc>

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
   2d8c8:	1007883a 	mov	r3,r2
   2d8cc:	e0bffc17 	ldw	r2,-16(fp)
   2d8d0:	10c01315 	stw	r3,76(r2)
   2d8d4:	e0bffc17 	ldw	r2,-16(fp)
   2d8d8:	10c01317 	ldw	r3,76(r2)
   2d8dc:	e0bffc17 	ldw	r2,-16(fp)
   2d8e0:	10c00b15 	stw	r3,44(r2)
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
   2d8e4:	e0bffe17 	ldw	r2,-8(fp)
   2d8e8:	e0bff705 	stb	r2,-36(fp)
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
   2d8ec:	0009883a 	mov	r4,zero
   2d8f0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
   2d8f4:	e0fff703 	ldbu	r3,-36(fp)
   2d8f8:	e0bffc17 	ldw	r2,-16(fp)
   2d8fc:	d8800015 	stw	r2,0(sp)
   2d900:	1809883a 	mov	r4,r3
   2d904:	000b883a 	mov	r5,zero
   2d908:	000d883a 	mov	r6,zero
   2d90c:	01c000f4 	movhi	r7,3
   2d910:	39f59504 	addi	r7,r7,-10668
   2d914:	0041b980 	call	41b98 <ip_raw_open>
   2d918:	e0bff815 	stw	r2,-32(fp)
      LOCK_NET_RESOURCE(NET_RESID);
   2d91c:	0009883a 	mov	r4,zero
   2d920:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      if (!ep)
   2d924:	e0bff817 	ldw	r2,-32(fp)
   2d928:	1000021e 	bne	r2,zero,2d934 <rawip_usrreq+0x118>
         return(EINVAL);
   2d92c:	00800584 	movi	r2,22
   2d930:	00018306 	br	2df40 <rawip_usrreq+0x724>
      return 0;
   2d934:	0005883a 	mov	r2,zero
   2d938:	00018106 	br	2df40 <rawip_usrreq+0x724>
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
   2d93c:	e13ffc17 	ldw	r4,-16(fp)
   2d940:	002d5f00 	call	2d5f0 <rawip_lookup>
   2d944:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
   2d948:	e0bff817 	ldw	r2,-32(fp)
   2d94c:	1000021e 	bne	r2,zero,2d958 <rawip_usrreq+0x13c>
         return(EINVAL);
   2d950:	00800584 	movi	r2,22
   2d954:	00017a06 	br	2df40 <rawip_usrreq+0x724>
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
   2d958:	0009883a 	mov	r4,zero
   2d95c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
   2d960:	e13ff817 	ldw	r4,-32(fp)
   2d964:	0041c780 	call	41c78 <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
   2d968:	0009883a 	mov	r4,zero
   2d96c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      return 0;
   2d970:	0005883a 	mov	r2,zero
   2d974:	00017206 	br	2df40 <rawip_usrreq+0x724>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
   2d978:	e0bffe17 	ldw	r2,-8(fp)
   2d97c:	1000021e 	bne	r2,zero,2d988 <rawip_usrreq+0x16c>
         return(EINVAL);
   2d980:	00800584 	movi	r2,22
   2d984:	00016e06 	br	2df40 <rawip_usrreq+0x724>
      sin = mtod(nam, struct sockaddr_in *);
   2d988:	e0bffe17 	ldw	r2,-8(fp)
   2d98c:	10800317 	ldw	r2,12(r2)
   2d990:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
   2d994:	e0bff917 	ldw	r2,-28(fp)
   2d998:	1000021e 	bne	r2,zero,2d9a4 <rawip_usrreq+0x188>
         return(EINVAL);
   2d99c:	00800584 	movi	r2,22
   2d9a0:	00016706 	br	2df40 <rawip_usrreq+0x724>
      if (nam->m_len != sizeof (*sin))
   2d9a4:	e0bffe17 	ldw	r2,-8(fp)
   2d9a8:	10800217 	ldw	r2,8(r2)
   2d9ac:	10800420 	cmpeqi	r2,r2,16
   2d9b0:	1000021e 	bne	r2,zero,2d9bc <rawip_usrreq+0x1a0>
         return(EINVAL);
   2d9b4:	00800584 	movi	r2,22
   2d9b8:	00016106 	br	2df40 <rawip_usrreq+0x724>
      ep = rawip_lookup(so);
   2d9bc:	e13ffc17 	ldw	r4,-16(fp)
   2d9c0:	002d5f00 	call	2d5f0 <rawip_lookup>
   2d9c4:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
   2d9c8:	e0bff817 	ldw	r2,-32(fp)
   2d9cc:	1000021e 	bne	r2,zero,2d9d8 <rawip_usrreq+0x1bc>
         return(EINVAL);
   2d9d0:	00800584 	movi	r2,22
   2d9d4:	00015a06 	br	2df40 <rawip_usrreq+0x724>
      if (req == PRU_BIND)
   2d9d8:	e0bff617 	ldw	r2,-40(fp)
   2d9dc:	10800098 	cmpnei	r2,r2,2
   2d9e0:	10001f1e 	bne	r2,zero,2da60 <rawip_usrreq+0x244>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
   2d9e4:	e0bff917 	ldw	r2,-28(fp)
   2d9e8:	10800117 	ldw	r2,4(r2)
   2d9ec:	1000021e 	bne	r2,zero,2d9f8 <rawip_usrreq+0x1dc>
         {
            lhost = 0L;
   2d9f0:	e03ff415 	stw	zero,-48(fp)
   2d9f4:	00001606 	br	2da50 <rawip_usrreq+0x234>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
   2d9f8:	e0bff917 	ldw	r2,-28(fp)
   2d9fc:	10800117 	ldw	r2,4(r2)
   2da00:	e0bff415 	stw	r2,-48(fp)
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2da04:	008001b4 	movhi	r2,6
   2da08:	10b9dc04 	addi	r2,r2,-6288
   2da0c:	10800017 	ldw	r2,0(r2)
   2da10:	e0bff515 	stw	r2,-44(fp)
   2da14:	00000806 	br	2da38 <rawip_usrreq+0x21c>
               if (ifp->n_ipaddr == lhost)
   2da18:	e0bff517 	ldw	r2,-44(fp)
   2da1c:	10c00a17 	ldw	r3,40(r2)
   2da20:	e0bff417 	ldw	r2,-48(fp)
   2da24:	1880011e 	bne	r3,r2,2da2c <rawip_usrreq+0x210>
                  break;
   2da28:	00000506 	br	2da40 <rawip_usrreq+0x224>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2da2c:	e0bff517 	ldw	r2,-44(fp)
   2da30:	10800017 	ldw	r2,0(r2)
   2da34:	e0bff515 	stw	r2,-44(fp)
   2da38:	e0bff517 	ldw	r2,-44(fp)
   2da3c:	103ff61e 	bne	r2,zero,2da18 <__alt_mem_descriptor_memory+0xdefeda18>
               if (ifp->n_ipaddr == lhost)
                  break;
            if (ifp == NULL)
   2da40:	e0bff517 	ldw	r2,-44(fp)
   2da44:	1000021e 	bne	r2,zero,2da50 <rawip_usrreq+0x234>
               return(EADDRNOTAVAIL);
   2da48:	00801f44 	movi	r2,125
   2da4c:	00013c06 	br	2df40 <rawip_usrreq+0x724>
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
   2da50:	e0bff817 	ldw	r2,-32(fp)
   2da54:	e0fff417 	ldw	r3,-48(fp)
   2da58:	10c00115 	stw	r3,4(r2)
   2da5c:	00002606 	br	2daf8 <rawip_usrreq+0x2dc>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
   2da60:	e0bff917 	ldw	r2,-28(fp)
   2da64:	10800117 	ldw	r2,4(r2)
   2da68:	1000021e 	bne	r2,zero,2da74 <rawip_usrreq+0x258>
            fhost = 0L;
   2da6c:	e03ff315 	stw	zero,-52(fp)
   2da70:	00000306 	br	2da80 <rawip_usrreq+0x264>
         else
            fhost = sin->sin_addr.s_addr;
   2da74:	e0bff917 	ldw	r2,-28(fp)
   2da78:	10800117 	ldw	r2,4(r2)
   2da7c:	e0bff315 	stw	r2,-52(fp)
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
   2da80:	e0bff817 	ldw	r2,-32(fp)
   2da84:	e0fff317 	ldw	r3,-52(fp)
   2da88:	10c00215 	stw	r3,8(r2)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
   2da8c:	e0bff317 	ldw	r2,-52(fp)
   2da90:	10000e26 	beq	r2,zero,2dacc <rawip_usrreq+0x2b0>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
   2da94:	e0bffc17 	ldw	r2,-16(fp)
   2da98:	10c0088b 	ldhu	r3,34(r2)
   2da9c:	00bffcc4 	movi	r2,-13
   2daa0:	1884703a 	and	r2,r3,r2
   2daa4:	1007883a 	mov	r3,r2
   2daa8:	e0bffc17 	ldw	r2,-16(fp)
   2daac:	10c0088d 	sth	r3,34(r2)
            so->so_state |= SS_ISCONNECTED;
   2dab0:	e0bffc17 	ldw	r2,-16(fp)
   2dab4:	1080088b 	ldhu	r2,34(r2)
   2dab8:	10800094 	ori	r2,r2,2
   2dabc:	1007883a 	mov	r3,r2
   2dac0:	e0bffc17 	ldw	r2,-16(fp)
   2dac4:	10c0088d 	sth	r3,34(r2)
   2dac8:	00000706 	br	2dae8 <rawip_usrreq+0x2cc>
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
   2dacc:	e0bffc17 	ldw	r2,-16(fp)
   2dad0:	10c0088b 	ldhu	r3,34(r2)
   2dad4:	00bfff44 	movi	r2,-3
   2dad8:	1884703a 	and	r2,r3,r2
   2dadc:	1007883a 	mov	r3,r2
   2dae0:	e0bffc17 	ldw	r2,-16(fp)
   2dae4:	10c0088d 	sth	r3,34(r2)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
   2dae8:	e0bffc17 	ldw	r2,-16(fp)
   2daec:	10800a04 	addi	r2,r2,40
   2daf0:	1009883a 	mov	r4,r2
   2daf4:	003244c0 	call	3244c <sbflush>
      }
      return 0;
   2daf8:	0005883a 	mov	r2,zero
   2dafc:	00011006 	br	2df40 <rawip_usrreq+0x724>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
   2db00:	e0bffd17 	ldw	r2,-12(fp)
   2db04:	1000021e 	bne	r2,zero,2db10 <rawip_usrreq+0x2f4>
         return(EINVAL);
   2db08:	00800584 	movi	r2,22
   2db0c:	00010c06 	br	2df40 <rawip_usrreq+0x724>

      ep = rawip_lookup(so);
   2db10:	e13ffc17 	ldw	r4,-16(fp)
   2db14:	002d5f00 	call	2d5f0 <rawip_lookup>
   2db18:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
   2db1c:	e0bff817 	ldw	r2,-32(fp)
   2db20:	1000041e 	bne	r2,zero,2db34 <rawip_usrreq+0x318>
      {
         m_free(m);
   2db24:	e13ffd17 	ldw	r4,-12(fp)
   2db28:	002c0940 	call	2c094 <m_free>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
   2db2c:	00801bc4 	movi	r2,111
   2db30:	00010306 	br	2df40 <rawip_usrreq+0x724>
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
   2db34:	e0bffe17 	ldw	r2,-8(fp)
   2db38:	10000b1e 	bne	r2,zero,2db68 <rawip_usrreq+0x34c>
      {
         if (!(so->so_state & SS_ISCONNECTED))
   2db3c:	e0bffc17 	ldw	r2,-16(fp)
   2db40:	1080088b 	ldhu	r2,34(r2)
   2db44:	10bfffcc 	andi	r2,r2,65535
   2db48:	1080008c 	andi	r2,r2,2
   2db4c:	1000021e 	bne	r2,zero,2db58 <rawip_usrreq+0x33c>
            return (ENOTCONN);
   2db50:	00802004 	movi	r2,128
   2db54:	0000fa06 	br	2df40 <rawip_usrreq+0x724>
         fhost = ep->ipr_faddr;
   2db58:	e0bff817 	ldw	r2,-32(fp)
   2db5c:	10800217 	ldw	r2,8(r2)
   2db60:	e0bff315 	stw	r2,-52(fp)
   2db64:	00001406 	br	2dbb8 <rawip_usrreq+0x39c>
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
   2db68:	e0bffc17 	ldw	r2,-16(fp)
   2db6c:	1080088b 	ldhu	r2,34(r2)
   2db70:	10bfffcc 	andi	r2,r2,65535
   2db74:	1080008c 	andi	r2,r2,2
   2db78:	10000226 	beq	r2,zero,2db84 <rawip_usrreq+0x368>
            return (EISCONN);
   2db7c:	00801fc4 	movi	r2,127
   2db80:	0000ef06 	br	2df40 <rawip_usrreq+0x724>
         if (nam->m_len != sizeof (*sin))
   2db84:	e0bffe17 	ldw	r2,-8(fp)
   2db88:	10800217 	ldw	r2,8(r2)
   2db8c:	10800420 	cmpeqi	r2,r2,16
   2db90:	1000031e 	bne	r2,zero,2dba0 <rawip_usrreq+0x384>
         {
            dtrap();
   2db94:	002b0f40 	call	2b0f4 <dtrap>
            return (EINVAL);
   2db98:	00800584 	movi	r2,22
   2db9c:	0000e806 	br	2df40 <rawip_usrreq+0x724>
         }
         sin = mtod(nam, struct sockaddr_in *);
   2dba0:	e0bffe17 	ldw	r2,-8(fp)
   2dba4:	10800317 	ldw	r2,12(r2)
   2dba8:	e0bff915 	stw	r2,-28(fp)
         fhost = sin->sin_addr.s_addr;
   2dbac:	e0bff917 	ldw	r2,-28(fp)
   2dbb0:	10800117 	ldw	r2,4(r2)
   2dbb4:	e0bff315 	stw	r2,-52(fp)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
   2dbb8:	e0bffd17 	ldw	r2,-12(fp)
   2dbbc:	14000217 	ldw	r16,8(r2)
   2dbc0:	e0bffc17 	ldw	r2,-16(fp)
   2dbc4:	10800417 	ldw	r2,16(r2)
   2dbc8:	1088000c 	andi	r2,r2,8192
   2dbcc:	1009883a 	mov	r4,r2
   2dbd0:	004204c0 	call	4204c <ip_raw_maxalloc>
   2dbd4:	1400032e 	bgeu	r2,r16,2dbe4 <rawip_usrreq+0x3c8>
      {
         dtrap(); /* should never happen */
   2dbd8:	002b0f40 	call	2b0f4 <dtrap>
         return EMSGSIZE;  /* try to recover */
   2dbdc:	00801e84 	movi	r2,122
   2dbe0:	0000d706 	br	2df40 <rawip_usrreq+0x724>
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
   2dbe4:	e0bffd17 	ldw	r2,-12(fp)
   2dbe8:	10800217 	ldw	r2,8(r2)
   2dbec:	1007883a 	mov	r3,r2
   2dbf0:	e0bffc17 	ldw	r2,-16(fp)
   2dbf4:	10800417 	ldw	r2,16(r2)
   2dbf8:	1088000c 	andi	r2,r2,8192
   2dbfc:	1809883a 	mov	r4,r3
   2dc00:	100b883a 	mov	r5,r2
   2dc04:	0041f4c0 	call	41f4c <ip_raw_alloc>
   2dc08:	e0bffa15 	stw	r2,-24(fp)
      if (!pkt)
   2dc0c:	e0bffa17 	ldw	r2,-24(fp)
   2dc10:	1000041e 	bne	r2,zero,2dc24 <rawip_usrreq+0x408>
      {
         m_free(m);
   2dc14:	e13ffd17 	ldw	r4,-12(fp)
   2dc18:	002c0940 	call	2c094 <m_free>
         return ENOBUFS;   /* report buffer shortages */
   2dc1c:	00801a44 	movi	r2,105
   2dc20:	0000c706 	br	2df40 <rawip_usrreq+0x724>
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
   2dc24:	e0bffa17 	ldw	r2,-24(fp)
   2dc28:	11000317 	ldw	r4,12(r2)
   2dc2c:	e0bffd17 	ldw	r2,-12(fp)
   2dc30:	10c00317 	ldw	r3,12(r2)
   2dc34:	e0bffd17 	ldw	r2,-12(fp)
   2dc38:	10800217 	ldw	r2,8(r2)
   2dc3c:	180b883a 	mov	r5,r3
   2dc40:	100d883a 	mov	r6,r2
   2dc44:	0007c900 	call	7c90 <memcpy>
      pkt->nb_plen = m->m_len;
   2dc48:	e0bffd17 	ldw	r2,-12(fp)
   2dc4c:	10c00217 	ldw	r3,8(r2)
   2dc50:	e0bffa17 	ldw	r2,-24(fp)
   2dc54:	10c00415 	stw	r3,16(r2)
      /* finished with mbuf, free it now */
      m_free(m);
   2dc58:	e13ffd17 	ldw	r4,-12(fp)
   2dc5c:	002c0940 	call	2c094 <m_free>
      pkt->fhost = fhost;
   2dc60:	e0bffa17 	ldw	r2,-24(fp)
   2dc64:	e0fff317 	ldw	r3,-52(fp)
   2dc68:	10c00715 	stw	r3,28(r2)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
   2dc6c:	e0bff317 	ldw	r2,-52(fp)
   2dc70:	10bfffd8 	cmpnei	r2,r2,-1
   2dc74:	1000481e 	bne	r2,zero,2dd98 <rawip_usrreq+0x57c>
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
   2dc78:	e0bff817 	ldw	r2,-32(fp)
   2dc7c:	10800117 	ldw	r2,4(r2)
   2dc80:	10001226 	beq	r2,zero,2dccc <rawip_usrreq+0x4b0>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dc84:	008001b4 	movhi	r2,6
   2dc88:	10b9dc04 	addi	r2,r2,-6288
   2dc8c:	10800017 	ldw	r2,0(r2)
   2dc90:	e0bff515 	stw	r2,-44(fp)
   2dc94:	00000a06 	br	2dcc0 <rawip_usrreq+0x4a4>
               if (ifp->n_ipaddr == ep->ipr_laddr)
   2dc98:	e0bff517 	ldw	r2,-44(fp)
   2dc9c:	10c00a17 	ldw	r3,40(r2)
   2dca0:	e0bff817 	ldw	r2,-32(fp)
   2dca4:	10800117 	ldw	r2,4(r2)
   2dca8:	1880021e 	bne	r3,r2,2dcb4 <rawip_usrreq+0x498>
                  break;
   2dcac:	0001883a 	nop
   2dcb0:	00001d06 	br	2dd28 <rawip_usrreq+0x50c>
      if (fhost == 0xffffffff)
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dcb4:	e0bff517 	ldw	r2,-44(fp)
   2dcb8:	10800017 	ldw	r2,0(r2)
   2dcbc:	e0bff515 	stw	r2,-44(fp)
   2dcc0:	e0bff517 	ldw	r2,-44(fp)
   2dcc4:	103ff41e 	bne	r2,zero,2dc98 <__alt_mem_descriptor_memory+0xdefedc98>
   2dcc8:	00001706 	br	2dd28 <rawip_usrreq+0x50c>
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dccc:	008001b4 	movhi	r2,6
   2dcd0:	10b9dc04 	addi	r2,r2,-6288
   2dcd4:	10800017 	ldw	r2,0(r2)
   2dcd8:	e0bff515 	stw	r2,-44(fp)
   2dcdc:	00001006 	br	2dd20 <rawip_usrreq+0x504>
               if ((ifp->n_flags & NF_BCAST) &&
   2dce0:	e0bff517 	ldw	r2,-44(fp)
   2dce4:	10802a17 	ldw	r2,168(r2)
   2dce8:	1080004c 	andi	r2,r2,1
   2dcec:	10000926 	beq	r2,zero,2dd14 <rawip_usrreq+0x4f8>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   2dcf0:	e0bff517 	ldw	r2,-44(fp)
   2dcf4:	10802717 	ldw	r2,156(r2)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if ((ifp->n_flags & NF_BCAST) &&
   2dcf8:	10000626 	beq	r2,zero,2dd14 <rawip_usrreq+0x4f8>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   2dcfc:	e0bff517 	ldw	r2,-44(fp)
   2dd00:	10802717 	ldw	r2,156(r2)
   2dd04:	10800617 	ldw	r2,24(r2)
   2dd08:	10800058 	cmpnei	r2,r2,1
   2dd0c:	1000011e 	bne	r2,zero,2dd14 <rawip_usrreq+0x4f8>
                  break;
   2dd10:	00000506 	br	2dd28 <rawip_usrreq+0x50c>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dd14:	e0bff517 	ldw	r2,-44(fp)
   2dd18:	10800017 	ldw	r2,0(r2)
   2dd1c:	e0bff515 	stw	r2,-44(fp)
   2dd20:	e0bff517 	ldw	r2,-44(fp)
   2dd24:	103fee1e 	bne	r2,zero,2dce0 <__alt_mem_descriptor_memory+0xdefedce0>
               if ((ifp->n_flags & NF_BCAST) &&
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
   2dd28:	e0bff517 	ldw	r2,-44(fp)
   2dd2c:	1000171e 	bne	r2,zero,2dd8c <rawip_usrreq+0x570>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dd30:	008001b4 	movhi	r2,6
   2dd34:	10b9dc04 	addi	r2,r2,-6288
   2dd38:	10800017 	ldw	r2,0(r2)
   2dd3c:	e0bff515 	stw	r2,-44(fp)
   2dd40:	00000c06 	br	2dd74 <rawip_usrreq+0x558>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   2dd44:	e0bff517 	ldw	r2,-44(fp)
   2dd48:	10802717 	ldw	r2,156(r2)
   2dd4c:	10000626 	beq	r2,zero,2dd68 <rawip_usrreq+0x54c>
   2dd50:	e0bff517 	ldw	r2,-44(fp)
   2dd54:	10802717 	ldw	r2,156(r2)
   2dd58:	10800617 	ldw	r2,24(r2)
   2dd5c:	10800058 	cmpnei	r2,r2,1
   2dd60:	1000011e 	bne	r2,zero,2dd68 <rawip_usrreq+0x54c>
                  break;
   2dd64:	00000506 	br	2dd7c <rawip_usrreq+0x560>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   2dd68:	e0bff517 	ldw	r2,-44(fp)
   2dd6c:	10800017 	ldw	r2,0(r2)
   2dd70:	e0bff515 	stw	r2,-44(fp)
   2dd74:	e0bff517 	ldw	r2,-44(fp)
   2dd78:	103ff21e 	bne	r2,zero,2dd44 <__alt_mem_descriptor_memory+0xdefedd44>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
            if (ifp == NULL)
   2dd7c:	e0bff517 	ldw	r2,-44(fp)
   2dd80:	1000021e 	bne	r2,zero,2dd8c <rawip_usrreq+0x570>
               return(EADDRNOTAVAIL);
   2dd84:	00801f44 	movi	r2,125
   2dd88:	00006d06 	br	2df40 <rawip_usrreq+0x724>
         }
         pkt->net = ifp;
   2dd8c:	e0bffa17 	ldw	r2,-24(fp)
   2dd90:	e0fff517 	ldw	r3,-44(fp)
   2dd94:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
   2dd98:	e0bffc17 	ldw	r2,-16(fp)
   2dd9c:	10800317 	ldw	r2,12(r2)
   2dda0:	10000426 	beq	r2,zero,2ddb4 <rawip_usrreq+0x598>
         pkt->imo = so->inp_moptions;
   2dda4:	e0bffc17 	ldw	r2,-16(fp)
   2dda8:	10c00317 	ldw	r3,12(r2)
   2ddac:	e0bffa17 	ldw	r2,-24(fp)
   2ddb0:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
   2ddb4:	e0bffc17 	ldw	r2,-16(fp)
   2ddb8:	10800417 	ldw	r2,16(r2)
   2ddbc:	1088000c 	andi	r2,r2,8192
   2ddc0:	10000826 	beq	r2,zero,2dde4 <rawip_usrreq+0x5c8>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
   2ddc4:	0009883a 	mov	r4,zero
   2ddc8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
   2ddcc:	e13ffa17 	ldw	r4,-24(fp)
   2ddd0:	003dd200 	call	3dd20 <ip_raw_write>
   2ddd4:	e0bff215 	stw	r2,-56(fp)
         LOCK_NET_RESOURCE(NET_RESID);
   2ddd8:	0009883a 	mov	r4,zero
   2dddc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   2dde0:	00002806 	br	2de84 <rawip_usrreq+0x668>
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
   2dde4:	e0bffa17 	ldw	r2,-24(fp)
   2dde8:	10800317 	ldw	r2,12(r2)
   2ddec:	10bffb04 	addi	r2,r2,-20
   2ddf0:	e0bffb15 	stw	r2,-20(fp)
         if (ep->ipr_laddr)
   2ddf4:	e0bff817 	ldw	r2,-32(fp)
   2ddf8:	10800117 	ldw	r2,4(r2)
   2ddfc:	10000526 	beq	r2,zero,2de14 <rawip_usrreq+0x5f8>
            pip->ip_src = ep->ipr_laddr;
   2de00:	e0bff817 	ldw	r2,-32(fp)
   2de04:	10c00117 	ldw	r3,4(r2)
   2de08:	e0bffb17 	ldw	r2,-20(fp)
   2de0c:	10c00315 	stw	r3,12(r2)
   2de10:	00000e06 	br	2de4c <rawip_usrreq+0x630>
         else
         {
            if (fhost == 0xffffffff)
   2de14:	e0bff317 	ldw	r2,-52(fp)
   2de18:	10bfffd8 	cmpnei	r2,r2,-1
   2de1c:	1000061e 	bne	r2,zero,2de38 <rawip_usrreq+0x61c>
               pip->ip_src = pkt->net->n_ipaddr;
   2de20:	e0bffa17 	ldw	r2,-24(fp)
   2de24:	10800617 	ldw	r2,24(r2)
   2de28:	10c00a17 	ldw	r3,40(r2)
   2de2c:	e0bffb17 	ldw	r2,-20(fp)
   2de30:	10c00315 	stw	r3,12(r2)
   2de34:	00000506 	br	2de4c <rawip_usrreq+0x630>
            else
               pip->ip_src = ip_mymach(fhost);
   2de38:	e13ff317 	ldw	r4,-52(fp)
   2de3c:	003e7c40 	call	3e7c4 <ip_mymach>
   2de40:	1007883a 	mov	r3,r2
   2de44:	e0bffb17 	ldw	r2,-20(fp)
   2de48:	10c00315 	stw	r3,12(r2)
         }
         pip->ip_dest = fhost;
   2de4c:	e0bffb17 	ldw	r2,-20(fp)
   2de50:	e0fff317 	ldw	r3,-52(fp)
   2de54:	10c00415 	stw	r3,16(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
   2de58:	0009883a 	mov	r4,zero
   2de5c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
   2de60:	e0bff817 	ldw	r2,-32(fp)
   2de64:	10800503 	ldbu	r2,20(r2)
   2de68:	10803fcc 	andi	r2,r2,255
   2de6c:	1009883a 	mov	r4,r2
   2de70:	e17ffa17 	ldw	r5,-24(fp)
   2de74:	003d78c0 	call	3d78c <ip_write>
   2de78:	e0bff215 	stw	r2,-56(fp)
         LOCK_NET_RESOURCE(NET_RESID);
   2de7c:	0009883a 	mov	r4,zero
   2de80:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      }         
      if (e < 0) 
   2de84:	e0bff217 	ldw	r2,-56(fp)
   2de88:	1000020e 	bge	r2,zero,2de94 <rawip_usrreq+0x678>
         return(e);
   2de8c:	e0bff217 	ldw	r2,-56(fp)
   2de90:	00002b06 	br	2df40 <rawip_usrreq+0x724>
      return 0;
   2de94:	0005883a 	mov	r2,zero
   2de98:	00002906 	br	2df40 <rawip_usrreq+0x724>
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
   2de9c:	e0bffe17 	ldw	r2,-8(fp)
   2dea0:	1000021e 	bne	r2,zero,2deac <rawip_usrreq+0x690>
         return(EINVAL);
   2dea4:	00800584 	movi	r2,22
   2dea8:	00002506 	br	2df40 <rawip_usrreq+0x724>
      sin = mtod(nam, struct sockaddr_in *);
   2deac:	e0bffe17 	ldw	r2,-8(fp)
   2deb0:	10800317 	ldw	r2,12(r2)
   2deb4:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
   2deb8:	e0bff917 	ldw	r2,-28(fp)
   2debc:	1000021e 	bne	r2,zero,2dec8 <rawip_usrreq+0x6ac>
         return(EINVAL);
   2dec0:	00800584 	movi	r2,22
   2dec4:	00001e06 	br	2df40 <rawip_usrreq+0x724>
      ep = rawip_lookup(so);
   2dec8:	e13ffc17 	ldw	r4,-16(fp)
   2decc:	002d5f00 	call	2d5f0 <rawip_lookup>
   2ded0:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
   2ded4:	e0bff817 	ldw	r2,-32(fp)
   2ded8:	1000021e 	bne	r2,zero,2dee4 <rawip_usrreq+0x6c8>
         return(EINVAL);
   2dedc:	00800584 	movi	r2,22
   2dee0:	00001706 	br	2df40 <rawip_usrreq+0x724>
      sin->sin_port = 0;
   2dee4:	e0bff917 	ldw	r2,-28(fp)
   2dee8:	1000008d 	sth	zero,2(r2)
      nam->m_len = sizeof(*sin);
   2deec:	e0bffe17 	ldw	r2,-8(fp)
   2def0:	00c00404 	movi	r3,16
   2def4:	10c00215 	stw	r3,8(r2)
      if (req == PRU_SOCKADDR)
   2def8:	e0bff617 	ldw	r2,-40(fp)
   2defc:	108003d8 	cmpnei	r2,r2,15
   2df00:	1000051e 	bne	r2,zero,2df18 <rawip_usrreq+0x6fc>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
   2df04:	e0bff817 	ldw	r2,-32(fp)
   2df08:	10c00117 	ldw	r3,4(r2)
   2df0c:	e0bff917 	ldw	r2,-28(fp)
   2df10:	10c00115 	stw	r3,4(r2)
   2df14:	00000406 	br	2df28 <rawip_usrreq+0x70c>
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
   2df18:	e0bff817 	ldw	r2,-32(fp)
   2df1c:	10c00217 	ldw	r3,8(r2)
   2df20:	e0bff917 	ldw	r2,-28(fp)
   2df24:	10c00115 	stw	r3,4(r2)
      }
      return 0;
   2df28:	0005883a 	mov	r2,zero
   2df2c:	00000406 	br	2df40 <rawip_usrreq+0x724>
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
   2df30:	002b0f40 	call	2b0f4 <dtrap>
      return 0;
   2df34:	0005883a 	mov	r2,zero
   2df38:	00000106 	br	2df40 <rawip_usrreq+0x724>
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   2df3c:	008017c4 	movi	r2,95
   }
}
   2df40:	e6ffff04 	addi	sp,fp,-4
   2df44:	dfc00217 	ldw	ra,8(sp)
   2df48:	df000117 	ldw	fp,4(sp)
   2df4c:	dc000017 	ldw	r16,0(sp)
   2df50:	dec00304 	addi	sp,sp,12
   2df54:	f800283a 	ret

0002df58 <DOMAIN_CHECK>:
 */

#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
   2df58:	defffc04 	addi	sp,sp,-16
   2df5c:	dfc00315 	stw	ra,12(sp)
   2df60:	df000215 	stw	fp,8(sp)
   2df64:	df000204 	addi	fp,sp,8
   2df68:	e13ffe15 	stw	r4,-8(fp)
   2df6c:	e17fff15 	stw	r5,-4(fp)
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
   2df70:	e0bffe17 	ldw	r2,-8(fp)
   2df74:	10800517 	ldw	r2,20(r2)
   2df78:	10800098 	cmpnei	r2,r2,2
   2df7c:	1000041e 	bne	r2,zero,2df90 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
   2df80:	e0bfff17 	ldw	r2,-4(fp)
#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
   2df84:	10800428 	cmpgeui	r2,r2,16
   2df88:	1000011e 	bne	r2,zero,2df90 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
   {
      dtrap(); /* programmer passed wrong structure */
   2df8c:	002b0f40 	call	2b0f4 <dtrap>
      (size != sizeof(struct sockaddr_in6)))
   {
      dtrap(); /* programmer passed wrong structure */
   }
#endif   /* IP_V6 */
}
   2df90:	e037883a 	mov	sp,fp
   2df94:	dfc00117 	ldw	ra,4(sp)
   2df98:	df000017 	ldw	fp,0(sp)
   2df9c:	dec00204 	addi	sp,sp,8
   2dfa0:	f800283a 	ret

0002dfa4 <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
   2dfa4:	defffa04 	addi	sp,sp,-24
   2dfa8:	dfc00515 	stw	ra,20(sp)
   2dfac:	df000415 	stw	fp,16(sp)
   2dfb0:	df000404 	addi	fp,sp,16
   2dfb4:	e13ffd15 	stw	r4,-12(fp)
   2dfb8:	e17ffe15 	stw	r5,-8(fp)
   2dfbc:	e1bfff15 	stw	r6,-4(fp)
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
   2dfc0:	0009883a 	mov	r4,zero
   2dfc4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
   2dfc8:	e13ffd17 	ldw	r4,-12(fp)
   2dfcc:	e17ffe17 	ldw	r5,-8(fp)
   2dfd0:	e1bfff17 	ldw	r6,-4(fp)
   2dfd4:	002f5700 	call	2f570 <socreate>
   2dfd8:	e0bffc15 	stw	r2,-16(fp)
   2dfdc:	e0bffc17 	ldw	r2,-16(fp)
   2dfe0:	1000041e 	bne	r2,zero,2dff4 <t_socket+0x50>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
   2dfe4:	0009883a 	mov	r4,zero
   2dfe8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
   2dfec:	00bfffc4 	movi	r2,-1
   2dff0:	00000706 	br	2e010 <t_socket+0x6c>
   }
   SOC_RANGE(so);
   so->so_error = 0;
   2dff4:	e0bffc17 	ldw	r2,-16(fp)
   2dff8:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
   2dffc:	0009883a 	mov	r4,zero
   2e000:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
   2e004:	e0bffc17 	ldw	r2,-16(fp)
   2e008:	1004d0ba 	srli	r2,r2,2
   2e00c:	10800804 	addi	r2,r2,32
}
   2e010:	e037883a 	mov	sp,fp
   2e014:	dfc00117 	ldw	ra,4(sp)
   2e018:	df000017 	ldw	fp,0(sp)
   2e01c:	dec00204 	addi	sp,sp,8
   2e020:	f800283a 	ret

0002e024 <t_bind>:

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
   2e024:	defff204 	addi	sp,sp,-56
   2e028:	dfc00d15 	stw	ra,52(sp)
   2e02c:	df000c15 	stw	fp,48(sp)
   2e030:	df000c04 	addi	fp,sp,48
   2e034:	e13ffd15 	stw	r4,-12(fp)
   2e038:	e17ffe15 	stw	r5,-8(fp)
   2e03c:	e1bfff15 	stw	r6,-4(fp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
   2e040:	e0bffd17 	ldw	r2,-12(fp)
   2e044:	10bff804 	addi	r2,r2,-32
   2e048:	1085883a 	add	r2,r2,r2
   2e04c:	1085883a 	add	r2,r2,r2
   2e050:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
   2e054:	008001b4 	movhi	r2,6
   2e058:	10b8d804 	addi	r2,r2,-7328
   2e05c:	e0bff515 	stw	r2,-44(fp)
   2e060:	00000706 	br	2e080 <t_bind+0x5c>
   2e064:	e0fff517 	ldw	r3,-44(fp)
   2e068:	e0bff617 	ldw	r2,-40(fp)
   2e06c:	1880011e 	bne	r3,r2,2e074 <t_bind+0x50>
   2e070:	00000506 	br	2e088 <t_bind+0x64>
   2e074:	e0bff517 	ldw	r2,-44(fp)
   2e078:	10800017 	ldw	r2,0(r2)
   2e07c:	e0bff515 	stw	r2,-44(fp)
   2e080:	e0bff517 	ldw	r2,-44(fp)
   2e084:	103ff71e 	bne	r2,zero,2e064 <__alt_mem_descriptor_memory+0xdefee064>
   2e088:	e0fff517 	ldw	r3,-44(fp)
   2e08c:	e0bff617 	ldw	r2,-40(fp)
   2e090:	18800326 	beq	r3,r2,2e0a0 <t_bind+0x7c>
   2e094:	002b0f40 	call	2b0f4 <dtrap>
   2e098:	00bfffc4 	movi	r2,-1
   2e09c:	00003406 	br	2e170 <t_bind+0x14c>
   DOMAIN_CHECK(so, addrlen);
   2e0a0:	e13ff617 	ldw	r4,-40(fp)
   2e0a4:	e17fff17 	ldw	r5,-4(fp)
   2e0a8:	002df580 	call	2df58 <DOMAIN_CHECK>

   so->so_error = 0;
   2e0ac:	e0bff617 	ldw	r2,-40(fp)
   2e0b0:	10000615 	stw	zero,24(r2)
   if (addr == (struct sockaddr *)NULL) 
   2e0b4:	e0bffe17 	ldw	r2,-8(fp)
   2e0b8:	10000d1e 	bne	r2,zero,2e0f0 <t_bind+0xcc>
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
   2e0bc:	e0bff904 	addi	r2,fp,-28
   2e0c0:	1009883a 	mov	r4,r2
   2e0c4:	000b883a 	mov	r5,zero
   2e0c8:	01800404 	movi	r6,16
   2e0cc:	0007f240 	call	7f24 <memset>
      addrlen = sizeof(sa);
   2e0d0:	00800404 	movi	r2,16
   2e0d4:	e0bfff15 	stw	r2,-4(fp)
      sa.sa_family = so->so_domain;
   2e0d8:	e0bff617 	ldw	r2,-40(fp)
   2e0dc:	10800517 	ldw	r2,20(r2)
   2e0e0:	e0bff90d 	sth	r2,-28(fp)
      sap = &sa;
   2e0e4:	e0bff904 	addi	r2,fp,-28
   2e0e8:	e0bff415 	stw	r2,-48(fp)
   2e0ec:	00000206 	br	2e0f8 <t_bind+0xd4>
   } else
      sap = addr;
   2e0f0:	e0bffe17 	ldw	r2,-8(fp)
   2e0f4:	e0bff415 	stw	r2,-48(fp)

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
   2e0f8:	e13ff417 	ldw	r4,-48(fp)
   2e0fc:	e17fff17 	ldw	r5,-4(fp)
   2e100:	01800244 	movi	r6,9
   2e104:	002f44c0 	call	2f44c <sockargs>
   2e108:	e0bff715 	stw	r2,-36(fp)
   2e10c:	e0bff717 	ldw	r2,-36(fp)
   2e110:	1000051e 	bne	r2,zero,2e128 <t_bind+0x104>
   {
      so->so_error = ENOMEM;
   2e114:	e0bff617 	ldw	r2,-40(fp)
   2e118:	00c00304 	movi	r3,12
   2e11c:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e120:	00bfffc4 	movi	r2,-1
   2e124:	00001206 	br	2e170 <t_bind+0x14c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
   2e128:	0009883a 	mov	r4,zero
   2e12c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
   2e130:	e13ff617 	ldw	r4,-40(fp)
   2e134:	e17ff717 	ldw	r5,-36(fp)
   2e138:	002f7240 	call	2f724 <sobind>
   2e13c:	e0bff815 	stw	r2,-32(fp)
   m_freem(nam);
   2e140:	e13ff717 	ldw	r4,-36(fp)
   2e144:	002c1a40 	call	2c1a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
   2e148:	0009883a 	mov	r4,zero
   2e14c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (err) 
   2e150:	e0bff817 	ldw	r2,-32(fp)
   2e154:	10000526 	beq	r2,zero,2e16c <t_bind+0x148>
   {
      so->so_error = err;
   2e158:	e0bff617 	ldw	r2,-40(fp)
   2e15c:	e0fff817 	ldw	r3,-32(fp)
   2e160:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e164:	00bfffc4 	movi	r2,-1
   2e168:	00000106 	br	2e170 <t_bind+0x14c>
   }
   return 0;
   2e16c:	0005883a 	mov	r2,zero
}
   2e170:	e037883a 	mov	sp,fp
   2e174:	dfc00117 	ldw	ra,4(sp)
   2e178:	df000017 	ldw	fp,0(sp)
   2e17c:	dec00204 	addi	sp,sp,8
   2e180:	f800283a 	ret

0002e184 <t_listen>:
 */

int
t_listen(long s, 
   int   backlog)
{
   2e184:	defff904 	addi	sp,sp,-28
   2e188:	dfc00615 	stw	ra,24(sp)
   2e18c:	df000515 	stw	fp,20(sp)
   2e190:	df000504 	addi	fp,sp,20
   2e194:	e13ffe15 	stw	r4,-8(fp)
   2e198:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
   2e19c:	e0bffe17 	ldw	r2,-8(fp)
   2e1a0:	10bff804 	addi	r2,r2,-32
   2e1a4:	1085883a 	add	r2,r2,r2
   2e1a8:	1085883a 	add	r2,r2,r2
   2e1ac:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
   2e1b0:	008001b4 	movhi	r2,6
   2e1b4:	10b8d804 	addi	r2,r2,-7328
   2e1b8:	e0bffb15 	stw	r2,-20(fp)
   2e1bc:	00000706 	br	2e1dc <t_listen+0x58>
   2e1c0:	e0fffb17 	ldw	r3,-20(fp)
   2e1c4:	e0bffc17 	ldw	r2,-16(fp)
   2e1c8:	1880011e 	bne	r3,r2,2e1d0 <t_listen+0x4c>
   2e1cc:	00000506 	br	2e1e4 <t_listen+0x60>
   2e1d0:	e0bffb17 	ldw	r2,-20(fp)
   2e1d4:	10800017 	ldw	r2,0(r2)
   2e1d8:	e0bffb15 	stw	r2,-20(fp)
   2e1dc:	e0bffb17 	ldw	r2,-20(fp)
   2e1e0:	103ff71e 	bne	r2,zero,2e1c0 <__alt_mem_descriptor_memory+0xdefee1c0>
   2e1e4:	e0fffb17 	ldw	r3,-20(fp)
   2e1e8:	e0bffc17 	ldw	r2,-16(fp)
   2e1ec:	18800326 	beq	r3,r2,2e1fc <t_listen+0x78>
   2e1f0:	002b0f40 	call	2b0f4 <dtrap>
   2e1f4:	00bfffc4 	movi	r2,-1
   2e1f8:	00001206 	br	2e244 <t_listen+0xc0>
   so->so_error = 0;
   2e1fc:	e0bffc17 	ldw	r2,-16(fp)
   2e200:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
   2e204:	0009883a 	mov	r4,zero
   2e208:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
   2e20c:	e13ffc17 	ldw	r4,-16(fp)
   2e210:	e17fff17 	ldw	r5,-4(fp)
   2e214:	002f7800 	call	2f780 <solisten>
   2e218:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
   2e21c:	0009883a 	mov	r4,zero
   2e220:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
   2e224:	e0bffd17 	ldw	r2,-12(fp)
   2e228:	10000526 	beq	r2,zero,2e240 <t_listen+0xbc>
   {
      so->so_error = err;
   2e22c:	e0bffc17 	ldw	r2,-16(fp)
   2e230:	e0fffd17 	ldw	r3,-12(fp)
   2e234:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e238:	00bfffc4 	movi	r2,-1
   2e23c:	00000106 	br	2e244 <t_listen+0xc0>
   }
   return 0;
   2e240:	0005883a 	mov	r2,zero
}
   2e244:	e037883a 	mov	sp,fp
   2e248:	dfc00117 	ldw	ra,4(sp)
   2e24c:	df000017 	ldw	fp,0(sp)
   2e250:	dec00204 	addi	sp,sp,8
   2e254:	f800283a 	ret

0002e258 <t_accept>:

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
   2e258:	defff704 	addi	sp,sp,-36
   2e25c:	dfc00815 	stw	ra,32(sp)
   2e260:	df000715 	stw	fp,28(sp)
   2e264:	df000704 	addi	fp,sp,28
   2e268:	e13ffd15 	stw	r4,-12(fp)
   2e26c:	e17ffe15 	stw	r5,-8(fp)
   2e270:	e1bfff15 	stw	r6,-4(fp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   2e274:	e0bffd17 	ldw	r2,-12(fp)
   2e278:	10bff804 	addi	r2,r2,-32
   2e27c:	1085883a 	add	r2,r2,r2
   2e280:	1085883a 	add	r2,r2,r2
   2e284:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
   2e288:	008001b4 	movhi	r2,6
   2e28c:	10b8d804 	addi	r2,r2,-7328
   2e290:	e0bff915 	stw	r2,-28(fp)
   2e294:	00000706 	br	2e2b4 <t_accept+0x5c>
   2e298:	e0fff917 	ldw	r3,-28(fp)
   2e29c:	e0bffa17 	ldw	r2,-24(fp)
   2e2a0:	1880011e 	bne	r3,r2,2e2a8 <t_accept+0x50>
   2e2a4:	00000506 	br	2e2bc <t_accept+0x64>
   2e2a8:	e0bff917 	ldw	r2,-28(fp)
   2e2ac:	10800017 	ldw	r2,0(r2)
   2e2b0:	e0bff915 	stw	r2,-28(fp)
   2e2b4:	e0bff917 	ldw	r2,-28(fp)
   2e2b8:	103ff71e 	bne	r2,zero,2e298 <__alt_mem_descriptor_memory+0xdefee298>
   2e2bc:	e0fff917 	ldw	r3,-28(fp)
   2e2c0:	e0bffa17 	ldw	r2,-24(fp)
   2e2c4:	18800326 	beq	r3,r2,2e2d4 <t_accept+0x7c>
   2e2c8:	002b0f40 	call	2b0f4 <dtrap>
   2e2cc:	00bfffc4 	movi	r2,-1
   2e2d0:	00007006 	br	2e494 <t_accept+0x23c>
   DOMAIN_CHECK(so, *addrlen);
   2e2d4:	e0bfff17 	ldw	r2,-4(fp)
   2e2d8:	10800017 	ldw	r2,0(r2)
   2e2dc:	e13ffa17 	ldw	r4,-24(fp)
   2e2e0:	100b883a 	mov	r5,r2
   2e2e4:	002df580 	call	2df58 <DOMAIN_CHECK>

   so->so_error = 0;
   2e2e8:	e0bffa17 	ldw	r2,-24(fp)
   2e2ec:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
   2e2f0:	e0bffa17 	ldw	r2,-24(fp)
   2e2f4:	10800417 	ldw	r2,16(r2)
   2e2f8:	1080008c 	andi	r2,r2,2
   2e2fc:	1000051e 	bne	r2,zero,2e314 <t_accept+0xbc>
   {
      so->so_error = EINVAL;
   2e300:	e0bffa17 	ldw	r2,-24(fp)
   2e304:	00c00584 	movi	r3,22
   2e308:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   2e30c:	00bfffc4 	movi	r2,-1
   2e310:	00006006 	br	2e494 <t_accept+0x23c>
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
   2e314:	e0bffa17 	ldw	r2,-24(fp)
   2e318:	1080088b 	ldhu	r2,34(r2)
   2e31c:	10bfffcc 	andi	r2,r2,65535
   2e320:	1080400c 	andi	r2,r2,256
   2e324:	10000b26 	beq	r2,zero,2e354 <t_accept+0xfc>
   2e328:	e0bffa17 	ldw	r2,-24(fp)
   2e32c:	10801e43 	ldbu	r2,121(r2)
   2e330:	10803fcc 	andi	r2,r2,255
   2e334:	1080201c 	xori	r2,r2,128
   2e338:	10bfe004 	addi	r2,r2,-128
   2e33c:	1000051e 	bne	r2,zero,2e354 <t_accept+0xfc>
   {
      so->so_error = EWOULDBLOCK;
   2e340:	e0bffa17 	ldw	r2,-24(fp)
   2e344:	00c002c4 	movi	r3,11
   2e348:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   2e34c:	00bfffc4 	movi	r2,-1
   2e350:	00005006 	br	2e494 <t_accept+0x23c>
   }
   LOCK_NET_RESOURCE(NET_RESID);
   2e354:	0009883a 	mov	r4,zero
   2e358:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
   2e35c:	00001006 	br	2e3a0 <t_accept+0x148>
   {
      if (so->so_state & SS_CANTRCVMORE)
   2e360:	e0bffa17 	ldw	r2,-24(fp)
   2e364:	1080088b 	ldhu	r2,34(r2)
   2e368:	10bfffcc 	andi	r2,r2,65535
   2e36c:	1080080c 	andi	r2,r2,32
   2e370:	10000726 	beq	r2,zero,2e390 <t_accept+0x138>
      {
         so->so_error = ECONNABORTED;
   2e374:	e0bffa17 	ldw	r2,-24(fp)
   2e378:	00c01c44 	movi	r3,113
   2e37c:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE(NET_RESID);
   2e380:	0009883a 	mov	r4,zero
   2e384:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
   2e388:	00bfffc4 	movi	r2,-1
   2e38c:	00004106 	br	2e494 <t_accept+0x23c>
      }
      tcp_sleep ((char *)&so->so_timeo);
   2e390:	e0bffa17 	ldw	r2,-24(fp)
   2e394:	10800904 	addi	r2,r2,36
   2e398:	1009883a 	mov	r4,r2
   2e39c:	00270240 	call	27024 <tcp_sleep>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
   2e3a0:	e0bffa17 	ldw	r2,-24(fp)
   2e3a4:	10801e43 	ldbu	r2,121(r2)
   2e3a8:	10803fcc 	andi	r2,r2,255
   2e3ac:	1080201c 	xori	r2,r2,128
   2e3b0:	10bfe004 	addi	r2,r2,-128
   2e3b4:	1000031e 	bne	r2,zero,2e3c4 <t_accept+0x16c>
   2e3b8:	e0bffa17 	ldw	r2,-24(fp)
   2e3bc:	10800617 	ldw	r2,24(r2)
   2e3c0:	103fe726 	beq	r2,zero,2e360 <__alt_mem_descriptor_memory+0xdefee360>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return SOCKET_ERROR;
      }
      tcp_sleep ((char *)&so->so_timeo);
   }
   if (so->so_error)
   2e3c4:	e0bffa17 	ldw	r2,-24(fp)
   2e3c8:	10800617 	ldw	r2,24(r2)
   2e3cc:	10000426 	beq	r2,zero,2e3e0 <t_accept+0x188>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
   2e3d0:	0009883a 	mov	r4,zero
   2e3d4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
   2e3d8:	00bfffc4 	movi	r2,-1
   2e3dc:	00002d06 	br	2e494 <t_accept+0x23c>
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
   2e3e0:	01000244 	movi	r4,9
   2e3e4:	01400404 	movi	r5,16
   2e3e8:	002bf0c0 	call	2bf0c <m_getnbuf>
   2e3ec:	e0bffb15 	stw	r2,-20(fp)
   if (nam == NULL) 
   2e3f0:	e0bffb17 	ldw	r2,-20(fp)
   2e3f4:	1000071e 	bne	r2,zero,2e414 <t_accept+0x1bc>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   2e3f8:	0009883a 	mov	r4,zero
   2e3fc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
   2e400:	e0bffa17 	ldw	r2,-24(fp)
   2e404:	00c00304 	movi	r3,12
   2e408:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   2e40c:	00bfffc4 	movi	r2,-1
   2e410:	00002006 	br	2e494 <t_accept+0x23c>
   }
   { 
      struct socket *aso = so->so_q;
   2e414:	e0bffa17 	ldw	r2,-24(fp)
   2e418:	10801d17 	ldw	r2,116(r2)
   2e41c:	e0bffc15 	stw	r2,-16(fp)
      if (soqremque (aso, 1) == 0)
   2e420:	e13ffc17 	ldw	r4,-16(fp)
   2e424:	01400044 	movi	r5,1
   2e428:	0031b200 	call	31b20 <soqremque>
   2e42c:	1000031e 	bne	r2,zero,2e43c <t_accept+0x1e4>
         panic("accept");
   2e430:	01000174 	movhi	r4,5
   2e434:	213b5004 	addi	r4,r4,-4800
   2e438:	00267380 	call	26738 <panic>
      so = aso;
   2e43c:	e0bffc17 	ldw	r2,-16(fp)
   2e440:	e0bffa15 	stw	r2,-24(fp)
   }
   (void)soaccept (so, nam);
   2e444:	e13ffa17 	ldw	r4,-24(fp)
   2e448:	e17ffb17 	ldw	r5,-20(fp)
   2e44c:	002fc7c0 	call	2fc7c <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
   2e450:	e0bffe17 	ldw	r2,-8(fp)
   2e454:	10000826 	beq	r2,zero,2e478 <t_accept+0x220>
      MEMCPY(addr, nam->m_data, *addrlen);
   2e458:	e0bffb17 	ldw	r2,-20(fp)
   2e45c:	10c00317 	ldw	r3,12(r2)
   2e460:	e0bfff17 	ldw	r2,-4(fp)
   2e464:	10800017 	ldw	r2,0(r2)
   2e468:	e13ffe17 	ldw	r4,-8(fp)
   2e46c:	180b883a 	mov	r5,r3
   2e470:	100d883a 	mov	r6,r2
   2e474:	0007c900 	call	7c90 <memcpy>
   m_freem (nam);
   2e478:	e13ffb17 	ldw	r4,-20(fp)
   2e47c:	002c1a40 	call	2c1a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
   2e480:	0009883a 	mov	r4,zero
   2e484:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
   2e488:	e0bffa17 	ldw	r2,-24(fp)
   2e48c:	1004d0ba 	srli	r2,r2,2
   2e490:	10800804 	addi	r2,r2,32
}
   2e494:	e037883a 	mov	sp,fp
   2e498:	dfc00117 	ldw	ra,4(sp)
   2e49c:	df000017 	ldw	fp,0(sp)
   2e4a0:	dec00204 	addi	sp,sp,8
   2e4a4:	f800283a 	ret

0002e4a8 <t_connect>:

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
   2e4a8:	defff804 	addi	sp,sp,-32
   2e4ac:	dfc00715 	stw	ra,28(sp)
   2e4b0:	df000615 	stw	fp,24(sp)
   2e4b4:	df000604 	addi	fp,sp,24
   2e4b8:	e13ffd15 	stw	r4,-12(fp)
   2e4bc:	e17ffe15 	stw	r5,-8(fp)
   2e4c0:	e1bfff15 	stw	r6,-4(fp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   2e4c4:	e0bffd17 	ldw	r2,-12(fp)
   2e4c8:	10bff804 	addi	r2,r2,-32
   2e4cc:	1085883a 	add	r2,r2,r2
   2e4d0:	1085883a 	add	r2,r2,r2
   2e4d4:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
   2e4d8:	008001b4 	movhi	r2,6
   2e4dc:	10b8d804 	addi	r2,r2,-7328
   2e4e0:	e0bffa15 	stw	r2,-24(fp)
   2e4e4:	00000706 	br	2e504 <t_connect+0x5c>
   2e4e8:	e0fffa17 	ldw	r3,-24(fp)
   2e4ec:	e0bffb17 	ldw	r2,-20(fp)
   2e4f0:	1880011e 	bne	r3,r2,2e4f8 <t_connect+0x50>
   2e4f4:	00000506 	br	2e50c <t_connect+0x64>
   2e4f8:	e0bffa17 	ldw	r2,-24(fp)
   2e4fc:	10800017 	ldw	r2,0(r2)
   2e500:	e0bffa15 	stw	r2,-24(fp)
   2e504:	e0bffa17 	ldw	r2,-24(fp)
   2e508:	103ff71e 	bne	r2,zero,2e4e8 <__alt_mem_descriptor_memory+0xdefee4e8>
   2e50c:	e0fffa17 	ldw	r3,-24(fp)
   2e510:	e0bffb17 	ldw	r2,-20(fp)
   2e514:	18800326 	beq	r3,r2,2e524 <t_connect+0x7c>
   2e518:	002b0f40 	call	2b0f4 <dtrap>
   2e51c:	00bfffc4 	movi	r2,-1
   2e520:	00007606 	br	2e6fc <t_connect+0x254>
   DOMAIN_CHECK(so, addrlen);
   2e524:	e13ffb17 	ldw	r4,-20(fp)
   2e528:	e17fff17 	ldw	r5,-4(fp)
   2e52c:	002df580 	call	2df58 <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
   2e530:	e0bffb17 	ldw	r2,-20(fp)
   2e534:	1080088b 	ldhu	r2,34(r2)
   2e538:	10bfffcc 	andi	r2,r2,65535
   2e53c:	1080400c 	andi	r2,r2,256
   2e540:	10002426 	beq	r2,zero,2e5d4 <t_connect+0x12c>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
   2e544:	e0bffb17 	ldw	r2,-20(fp)
   2e548:	1080088b 	ldhu	r2,34(r2)
   2e54c:	10bfffcc 	andi	r2,r2,65535
   2e550:	1080010c 	andi	r2,r2,4
   2e554:	10000526 	beq	r2,zero,2e56c <t_connect+0xc4>
      {
         so->so_error = EINPROGRESS;
   2e558:	e0bffb17 	ldw	r2,-20(fp)
   2e55c:	00c01dc4 	movi	r3,119
   2e560:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
   2e564:	00bfffc4 	movi	r2,-1
   2e568:	00006406 	br	2e6fc <t_connect+0x254>
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
   2e56c:	e0bffb17 	ldw	r2,-20(fp)
   2e570:	1080088b 	ldhu	r2,34(r2)
   2e574:	10bfffcc 	andi	r2,r2,65535
   2e578:	1080008c 	andi	r2,r2,2
   2e57c:	10000426 	beq	r2,zero,2e590 <t_connect+0xe8>
      {
         so->so_error = 0;
   2e580:	e0bffb17 	ldw	r2,-20(fp)
   2e584:	10000615 	stw	zero,24(r2)
         return 0;
   2e588:	0005883a 	mov	r2,zero
   2e58c:	00005b06 	br	2e6fc <t_connect+0x254>
      }
      if (so->so_state & SS_WASCONNECTING)
   2e590:	e0bffb17 	ldw	r2,-20(fp)
   2e594:	1080088b 	ldhu	r2,34(r2)
   2e598:	10bfffcc 	andi	r2,r2,65535
   2e59c:	1088000c 	andi	r2,r2,8192
   2e5a0:	10000c26 	beq	r2,zero,2e5d4 <t_connect+0x12c>
      {
         so->so_state &= ~SS_WASCONNECTING;
   2e5a4:	e0bffb17 	ldw	r2,-20(fp)
   2e5a8:	10c0088b 	ldhu	r3,34(r2)
   2e5ac:	00b7ffc4 	movi	r2,-8193
   2e5b0:	1884703a 	and	r2,r3,r2
   2e5b4:	1007883a 	mov	r3,r2
   2e5b8:	e0bffb17 	ldw	r2,-20(fp)
   2e5bc:	10c0088d 	sth	r3,34(r2)
         if (so->so_error) /* connect error - maybe timeout */
   2e5c0:	e0bffb17 	ldw	r2,-20(fp)
   2e5c4:	10800617 	ldw	r2,24(r2)
   2e5c8:	10000226 	beq	r2,zero,2e5d4 <t_connect+0x12c>
            return SOCKET_ERROR;
   2e5cc:	00bfffc4 	movi	r2,-1
   2e5d0:	00004a06 	br	2e6fc <t_connect+0x254>
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
   2e5d4:	e0bffb17 	ldw	r2,-20(fp)
   2e5d8:	10000615 	stw	zero,24(r2)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
   2e5dc:	e13ffe17 	ldw	r4,-8(fp)
   2e5e0:	e17fff17 	ldw	r5,-4(fp)
   2e5e4:	01800244 	movi	r6,9
   2e5e8:	002f44c0 	call	2f44c <sockargs>
   2e5ec:	e0bffc15 	stw	r2,-16(fp)
   2e5f0:	e0bffc17 	ldw	r2,-16(fp)
   2e5f4:	1000051e 	bne	r2,zero,2e60c <t_connect+0x164>
       == NULL)
   {
      so->so_error = ENOMEM;
   2e5f8:	e0bffb17 	ldw	r2,-20(fp)
   2e5fc:	00c00304 	movi	r3,12
   2e600:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e604:	00bfffc4 	movi	r2,-1
   2e608:	00003c06 	br	2e6fc <t_connect+0x254>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   2e60c:	0009883a 	mov	r4,zero
   2e610:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
   2e614:	e13ffb17 	ldw	r4,-20(fp)
   2e618:	e17ffc17 	ldw	r5,-16(fp)
   2e61c:	002fd140 	call	2fd14 <soconnect>
   2e620:	1007883a 	mov	r3,r2
   2e624:	e0bffb17 	ldw	r2,-20(fp)
   2e628:	10c00615 	stw	r3,24(r2)
   2e62c:	e0bffb17 	ldw	r2,-20(fp)
   2e630:	10800617 	ldw	r2,24(r2)
   2e634:	10000126 	beq	r2,zero,2e63c <t_connect+0x194>
      goto bad;
   2e638:	00001b06 	br	2e6a8 <t_connect+0x200>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
   2e63c:	e0bffb17 	ldw	r2,-20(fp)
   2e640:	1080088b 	ldhu	r2,34(r2)
   2e644:	10bfffcc 	andi	r2,r2,65535
   2e648:	1080400c 	andi	r2,r2,256
   2e64c:	10000926 	beq	r2,zero,2e674 <t_connect+0x1cc>
   2e650:	e0bffb17 	ldw	r2,-20(fp)
   2e654:	1080088b 	ldhu	r2,34(r2)
   2e658:	10bfffcc 	andi	r2,r2,65535
   2e65c:	1080010c 	andi	r2,r2,4
   2e660:	10000426 	beq	r2,zero,2e674 <t_connect+0x1cc>
   {
      so->so_error = EINPROGRESS;
   2e664:	e0bffb17 	ldw	r2,-20(fp)
   2e668:	00c01dc4 	movi	r3,119
   2e66c:	10c00615 	stw	r3,24(r2)
      goto bad;
   2e670:	00000d06 	br	2e6a8 <t_connect+0x200>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   2e674:	00000406 	br	2e688 <t_connect+0x1e0>
   {
      tcp_sleep ((char *)&so->so_timeo);
   2e678:	e0bffb17 	ldw	r2,-20(fp)
   2e67c:	10800904 	addi	r2,r2,36
   2e680:	1009883a 	mov	r4,r2
   2e684:	00270240 	call	27024 <tcp_sleep>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   2e688:	e0bffb17 	ldw	r2,-20(fp)
   2e68c:	1080088b 	ldhu	r2,34(r2)
   2e690:	10bfffcc 	andi	r2,r2,65535
   2e694:	1080010c 	andi	r2,r2,4
   2e698:	10000326 	beq	r2,zero,2e6a8 <t_connect+0x200>
   2e69c:	e0bffb17 	ldw	r2,-20(fp)
   2e6a0:	10800617 	ldw	r2,24(r2)
   2e6a4:	103ff426 	beq	r2,zero,2e678 <__alt_mem_descriptor_memory+0xdefee678>
   {
      tcp_sleep ((char *)&so->so_timeo);
   }
bad:
   if (so->so_error != EINPROGRESS)
   2e6a8:	e0bffb17 	ldw	r2,-20(fp)
   2e6ac:	10800617 	ldw	r2,24(r2)
   2e6b0:	10801de0 	cmpeqi	r2,r2,119
   2e6b4:	1000071e 	bne	r2,zero,2e6d4 <t_connect+0x22c>
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
   2e6b8:	e0bffb17 	ldw	r2,-20(fp)
   2e6bc:	10c0088b 	ldhu	r3,34(r2)
   2e6c0:	00b7fec4 	movi	r2,-8197
   2e6c4:	1884703a 	and	r2,r3,r2
   2e6c8:	1007883a 	mov	r3,r2
   2e6cc:	e0bffb17 	ldw	r2,-20(fp)
   2e6d0:	10c0088d 	sth	r3,34(r2)
   m_freem (nam);
   2e6d4:	e13ffc17 	ldw	r4,-16(fp)
   2e6d8:	002c1a40 	call	2c1a4 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
   2e6dc:	0009883a 	mov	r4,zero
   2e6e0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (so->so_error)
   2e6e4:	e0bffb17 	ldw	r2,-20(fp)
   2e6e8:	10800617 	ldw	r2,24(r2)
   2e6ec:	10000226 	beq	r2,zero,2e6f8 <t_connect+0x250>
   {
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;
   2e6f0:	00bfffc4 	movi	r2,-1
   2e6f4:	00000106 	br	2e6fc <t_connect+0x254>

   }
      return 0;
   2e6f8:	0005883a 	mov	r2,zero
}
   2e6fc:	e037883a 	mov	sp,fp
   2e700:	dfc00117 	ldw	ra,4(sp)
   2e704:	df000017 	ldw	fp,0(sp)
   2e708:	dec00204 	addi	sp,sp,8
   2e70c:	f800283a 	ret

0002e710 <t_getpeername>:
 * RETURNS: 
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
   2e710:	defffb04 	addi	sp,sp,-20
   2e714:	dfc00415 	stw	ra,16(sp)
   2e718:	df000315 	stw	fp,12(sp)
   2e71c:	df000304 	addi	fp,sp,12
   2e720:	e13ffd15 	stw	r4,-12(fp)
   2e724:	e17ffe15 	stw	r5,-8(fp)
   2e728:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
   2e72c:	e13ffd17 	ldw	r4,-12(fp)
   2e730:	e17ffe17 	ldw	r5,-8(fp)
   2e734:	e1bfff17 	ldw	r6,-4(fp)
   2e738:	01c00404 	movi	r7,16
   2e73c:	002e7980 	call	2e798 <t_getname>
}
   2e740:	e037883a 	mov	sp,fp
   2e744:	dfc00117 	ldw	ra,4(sp)
   2e748:	df000017 	ldw	fp,0(sp)
   2e74c:	dec00204 	addi	sp,sp,8
   2e750:	f800283a 	ret

0002e754 <t_getsockname>:
 * RETURNS: 
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
   2e754:	defffb04 	addi	sp,sp,-20
   2e758:	dfc00415 	stw	ra,16(sp)
   2e75c:	df000315 	stw	fp,12(sp)
   2e760:	df000304 	addi	fp,sp,12
   2e764:	e13ffd15 	stw	r4,-12(fp)
   2e768:	e17ffe15 	stw	r5,-8(fp)
   2e76c:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
   2e770:	e13ffd17 	ldw	r4,-12(fp)
   2e774:	e17ffe17 	ldw	r5,-8(fp)
   2e778:	e1bfff17 	ldw	r6,-4(fp)
   2e77c:	01c003c4 	movi	r7,15
   2e780:	002e7980 	call	2e798 <t_getname>
}
   2e784:	e037883a 	mov	sp,fp
   2e788:	dfc00117 	ldw	ra,4(sp)
   2e78c:	df000017 	ldw	fp,0(sp)
   2e790:	dec00204 	addi	sp,sp,8
   2e794:	f800283a 	ret

0002e798 <t_getname>:
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
   2e798:	defff604 	addi	sp,sp,-40
   2e79c:	dfc00915 	stw	ra,36(sp)
   2e7a0:	df000815 	stw	fp,32(sp)
   2e7a4:	df000804 	addi	fp,sp,32
   2e7a8:	e13ffc15 	stw	r4,-16(fp)
   2e7ac:	e17ffd15 	stw	r5,-12(fp)
   2e7b0:	e1bffe15 	stw	r6,-8(fp)
   2e7b4:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
   2e7b8:	e0bffc17 	ldw	r2,-16(fp)
   2e7bc:	10bff804 	addi	r2,r2,-32
   2e7c0:	1085883a 	add	r2,r2,r2
   2e7c4:	1085883a 	add	r2,r2,r2
   2e7c8:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
   2e7cc:	008001b4 	movhi	r2,6
   2e7d0:	10b8d804 	addi	r2,r2,-7328
   2e7d4:	e0bff815 	stw	r2,-32(fp)
   2e7d8:	00000706 	br	2e7f8 <t_getname+0x60>
   2e7dc:	e0fff817 	ldw	r3,-32(fp)
   2e7e0:	e0bff917 	ldw	r2,-28(fp)
   2e7e4:	1880011e 	bne	r3,r2,2e7ec <t_getname+0x54>
   2e7e8:	00000506 	br	2e800 <t_getname+0x68>
   2e7ec:	e0bff817 	ldw	r2,-32(fp)
   2e7f0:	10800017 	ldw	r2,0(r2)
   2e7f4:	e0bff815 	stw	r2,-32(fp)
   2e7f8:	e0bff817 	ldw	r2,-32(fp)
   2e7fc:	103ff71e 	bne	r2,zero,2e7dc <__alt_mem_descriptor_memory+0xdefee7dc>
   2e800:	e0fff817 	ldw	r3,-32(fp)
   2e804:	e0bff917 	ldw	r2,-28(fp)
   2e808:	18800326 	beq	r3,r2,2e818 <t_getname+0x80>
   2e80c:	002b0f40 	call	2b0f4 <dtrap>
   2e810:	00bfffc4 	movi	r2,-1
   2e814:	00005006 	br	2e958 <t_getname+0x1c0>

   so->so_error = 0;
   2e818:	e0bff917 	ldw	r2,-28(fp)
   2e81c:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
   2e820:	e0bfff17 	ldw	r2,-4(fp)
   2e824:	10800418 	cmpnei	r2,r2,16
   2e828:	10000a1e 	bne	r2,zero,2e854 <t_getname+0xbc>
   2e82c:	e0bff917 	ldw	r2,-28(fp)
   2e830:	1080088b 	ldhu	r2,34(r2)
   2e834:	10bfffcc 	andi	r2,r2,65535
   2e838:	1080008c 	andi	r2,r2,2
   2e83c:	1000051e 	bne	r2,zero,2e854 <t_getname+0xbc>
   {
      so->so_error = ENOTCONN;
   2e840:	e0bff917 	ldw	r2,-28(fp)
   2e844:	00c02004 	movi	r3,128
   2e848:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e84c:	00bfffc4 	movi	r2,-1
   2e850:	00004106 	br	2e958 <t_getname+0x1c0>
   }
   LOCK_NET_RESOURCE(NET_RESID);
   2e854:	0009883a 	mov	r4,zero
   2e858:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
   2e85c:	01000244 	movi	r4,9
   2e860:	01400404 	movi	r5,16
   2e864:	002bf0c0 	call	2bf0c <m_getnbuf>
   2e868:	e0bffa15 	stw	r2,-24(fp)
   if (m == NULL) 
   2e86c:	e0bffa17 	ldw	r2,-24(fp)
   2e870:	1000071e 	bne	r2,zero,2e890 <t_getname+0xf8>
   {
      so->so_error = ENOMEM;
   2e874:	e0bff917 	ldw	r2,-28(fp)
   2e878:	00c00304 	movi	r3,12
   2e87c:	10c00615 	stw	r3,24(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
   2e880:	0009883a 	mov	r4,zero
   2e884:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
   2e888:	00bfffc4 	movi	r2,-1
   2e88c:	00003206 	br	2e958 <t_getname+0x1c0>
   }
   so->so_req = opcode;
   2e890:	e0bff917 	ldw	r2,-28(fp)
   2e894:	e0ffff17 	ldw	r3,-4(fp)
   2e898:	10c00715 	stw	r3,28(r2)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
   2e89c:	e0bff917 	ldw	r2,-28(fp)
   2e8a0:	10800217 	ldw	r2,8(r2)
   2e8a4:	10800317 	ldw	r2,12(r2)
   2e8a8:	e13ff917 	ldw	r4,-28(fp)
   2e8ac:	000b883a 	mov	r5,zero
   2e8b0:	e1bffa17 	ldw	r6,-24(fp)
   2e8b4:	103ee83a 	callr	r2
   2e8b8:	e0bffb15 	stw	r2,-20(fp)
   2e8bc:	e0bffb17 	ldw	r2,-20(fp)
   2e8c0:	10000126 	beq	r2,zero,2e8c8 <t_getname+0x130>
      goto bad;
   2e8c4:	00001806 	br	2e928 <t_getname+0x190>

#ifdef IP_V4
   if(so->so_domain == AF_INET)
   2e8c8:	e0bff917 	ldw	r2,-28(fp)
   2e8cc:	10800517 	ldw	r2,20(r2)
   2e8d0:	10800098 	cmpnei	r2,r2,2
   2e8d4:	1000141e 	bne	r2,zero,2e928 <t_getname+0x190>
   {
      if(*addrlen < sizeof(struct sockaddr_in))
   2e8d8:	e0bffe17 	ldw	r2,-8(fp)
   2e8dc:	10800017 	ldw	r2,0(r2)
   2e8e0:	10800428 	cmpgeui	r2,r2,16
   2e8e4:	1000071e 	bne	r2,zero,2e904 <t_getname+0x16c>
      {
         dtrap();    /* programming error */
   2e8e8:	002b0f40 	call	2b0f4 <dtrap>
         m_freem(m);
   2e8ec:	e13ffa17 	ldw	r4,-24(fp)
   2e8f0:	002c1a40 	call	2c1a4 <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
   2e8f4:	0009883a 	mov	r4,zero
   2e8f8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return EINVAL;
   2e8fc:	00800584 	movi	r2,22
   2e900:	00001506 	br	2e958 <t_getname+0x1c0>
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
   2e904:	e0bffa17 	ldw	r2,-24(fp)
   2e908:	10800317 	ldw	r2,12(r2)
   2e90c:	e13ffd17 	ldw	r4,-12(fp)
   2e910:	100b883a 	mov	r5,r2
   2e914:	01800404 	movi	r6,16
   2e918:	0007c900 	call	7c90 <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
   2e91c:	e0bffe17 	ldw	r2,-8(fp)
   2e920:	00c00404 	movi	r3,16
   2e924:	10c00015 	stw	r3,0(r2)
   }
#endif   /* IP_V6 */


bad:
   m_freem(m);
   2e928:	e13ffa17 	ldw	r4,-24(fp)
   2e92c:	002c1a40 	call	2c1a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
   2e930:	0009883a 	mov	r4,zero
   2e934:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (err) 
   2e938:	e0bffb17 	ldw	r2,-20(fp)
   2e93c:	10000526 	beq	r2,zero,2e954 <t_getname+0x1bc>
   {
      so->so_error = err;
   2e940:	e0bff917 	ldw	r2,-28(fp)
   2e944:	e0fffb17 	ldw	r3,-20(fp)
   2e948:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2e94c:	00bfffc4 	movi	r2,-1
   2e950:	00000106 	br	2e958 <t_getname+0x1c0>
   }
   return 0;
   2e954:	0005883a 	mov	r2,zero
}
   2e958:	e037883a 	mov	sp,fp
   2e95c:	dfc00117 	ldw	ra,4(sp)
   2e960:	df000017 	ldw	fp,0(sp)
   2e964:	dec00204 	addi	sp,sp,8
   2e968:	f800283a 	ret

0002e96c <t_setsockopt>:
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
   2e96c:	defff704 	addi	sp,sp,-36
   2e970:	dfc00815 	stw	ra,32(sp)
   2e974:	df000715 	stw	fp,28(sp)
   2e978:	df000704 	addi	fp,sp,28
   2e97c:	e13ffc15 	stw	r4,-16(fp)
   2e980:	e17ffd15 	stw	r5,-12(fp)
   2e984:	e1bffe15 	stw	r6,-8(fp)
   2e988:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   2e98c:	e0bffc17 	ldw	r2,-16(fp)
   2e990:	10bff804 	addi	r2,r2,-32
   2e994:	1085883a 	add	r2,r2,r2
   2e998:	1085883a 	add	r2,r2,r2
   2e99c:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
   2e9a0:	008001b4 	movhi	r2,6
   2e9a4:	10b8d804 	addi	r2,r2,-7328
   2e9a8:	e0bff915 	stw	r2,-28(fp)
   2e9ac:	00000706 	br	2e9cc <t_setsockopt+0x60>
   2e9b0:	e0fff917 	ldw	r3,-28(fp)
   2e9b4:	e0bffa17 	ldw	r2,-24(fp)
   2e9b8:	1880011e 	bne	r3,r2,2e9c0 <t_setsockopt+0x54>
   2e9bc:	00000506 	br	2e9d4 <t_setsockopt+0x68>
   2e9c0:	e0bff917 	ldw	r2,-28(fp)
   2e9c4:	10800017 	ldw	r2,0(r2)
   2e9c8:	e0bff915 	stw	r2,-28(fp)
   2e9cc:	e0bff917 	ldw	r2,-28(fp)
   2e9d0:	103ff71e 	bne	r2,zero,2e9b0 <__alt_mem_descriptor_memory+0xdefee9b0>
   2e9d4:	e0fff917 	ldw	r3,-28(fp)
   2e9d8:	e0bffa17 	ldw	r2,-24(fp)
   2e9dc:	18800326 	beq	r3,r2,2e9ec <t_setsockopt+0x80>
   2e9e0:	002b0f40 	call	2b0f4 <dtrap>
   2e9e4:	00bfffc4 	movi	r2,-1
   2e9e8:	00004a06 	br	2eb14 <t_setsockopt+0x1a8>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
   2e9ec:	0009883a 	mov	r4,zero
   2e9f0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   so->so_error = 0;
   2e9f4:	e0bffa17 	ldw	r2,-24(fp)
   2e9f8:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
   2e9fc:	e0bffd17 	ldw	r2,-12(fp)
   2ea00:	10800060 	cmpeqi	r2,r2,1
   2ea04:	10000e1e 	bne	r2,zero,2ea40 <t_setsockopt+0xd4>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
   2ea08:	e13ffa17 	ldw	r4,-24(fp)
   2ea0c:	e17ffe17 	ldw	r5,-8(fp)
   2ea10:	e1bfff17 	ldw	r6,-4(fp)
   2ea14:	0030c840 	call	30c84 <sosetopt>
   2ea18:	e0bffb15 	stw	r2,-20(fp)
   2ea1c:	e0bffb17 	ldw	r2,-20(fp)
   2ea20:	10003926 	beq	r2,zero,2eb08 <t_setsockopt+0x19c>
      {
         so->so_error = err;
   2ea24:	e0bffa17 	ldw	r2,-24(fp)
   2ea28:	e0fffb17 	ldw	r3,-20(fp)
   2ea2c:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
   2ea30:	0009883a 	mov	r4,zero
   2ea34:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
   2ea38:	00bfffc4 	movi	r2,-1
   2ea3c:	00003506 	br	2eb14 <t_setsockopt+0x1a8>
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
   2ea40:	e0bffa17 	ldw	r2,-24(fp)
   2ea44:	10801f17 	ldw	r2,124(r2)
   2ea48:	10000f1e 	bne	r2,zero,2ea88 <t_setsockopt+0x11c>
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
   2ea4c:	01000104 	movi	r4,4
   2ea50:	002bce00 	call	2bce0 <npalloc>
   2ea54:	1007883a 	mov	r3,r2
   2ea58:	e0bffa17 	ldw	r2,-24(fp)
   2ea5c:	10c01f15 	stw	r3,124(r2)
         if (!so->so_optsPack) 
   2ea60:	e0bffa17 	ldw	r2,-24(fp)
   2ea64:	10801f17 	ldw	r2,124(r2)
   2ea68:	1000071e 	bne	r2,zero,2ea88 <t_setsockopt+0x11c>
         {
            so->so_error = ENOMEM;
   2ea6c:	e0bffa17 	ldw	r2,-24(fp)
   2ea70:	00c00304 	movi	r3,12
   2ea74:	10c00615 	stw	r3,24(r2)
            UNLOCK_NET_RESOURCE (NET_RESID);
   2ea78:	0009883a 	mov	r4,zero
   2ea7c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            return SOCKET_ERROR;
   2ea80:	00bfffc4 	movi	r2,-1
   2ea84:	00002306 	br	2eb14 <t_setsockopt+0x1a8>
         }
      }
      
      if (name == IP_TTL_OPT)
   2ea88:	e0bffe17 	ldw	r2,-8(fp)
   2ea8c:	10800118 	cmpnei	r2,r2,4
   2ea90:	1000061e 	bne	r2,zero,2eaac <t_setsockopt+0x140>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
   2ea94:	e0bffa17 	ldw	r2,-24(fp)
   2ea98:	10801f17 	ldw	r2,124(r2)
   2ea9c:	e0ffff17 	ldw	r3,-4(fp)
   2eaa0:	18c00017 	ldw	r3,0(r3)
   2eaa4:	10c00045 	stb	r3,1(r2)
   2eaa8:	00001706 	br	2eb08 <t_setsockopt+0x19c>
      else
      if (name == IP_TOS)
   2eaac:	e0bffe17 	ldw	r2,-8(fp)
   2eab0:	108000d8 	cmpnei	r2,r2,3
   2eab4:	1000061e 	bne	r2,zero,2ead0 <t_setsockopt+0x164>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
   2eab8:	e0bffa17 	ldw	r2,-24(fp)
   2eabc:	10801f17 	ldw	r2,124(r2)
   2eac0:	e0ffff17 	ldw	r3,-4(fp)
   2eac4:	18c00017 	ldw	r3,0(r3)
   2eac8:	10c00005 	stb	r3,0(r2)
   2eacc:	00000e06 	br	2eb08 <t_setsockopt+0x19c>
	   else
	   if (name == IP_SCOPEID)
   2ead0:	e0bffe17 	ldw	r2,-8(fp)
   2ead4:	10800398 	cmpnei	r2,r2,14
   2ead8:	1000071e 	bne	r2,zero,2eaf8 <t_setsockopt+0x18c>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
   2eadc:	e0bffa17 	ldw	r2,-24(fp)
   2eae0:	10801f17 	ldw	r2,124(r2)
   2eae4:	e0ffff17 	ldw	r3,-4(fp)
   2eae8:	18c00017 	ldw	r3,0(r3)
   2eaec:	18c03fcc 	andi	r3,r3,255
   2eaf0:	10c00115 	stw	r3,4(r2)
   2eaf4:	00000406 	br	2eb08 <t_setsockopt+0x19c>
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
   2eaf8:	0009883a 	mov	r4,zero
   2eafc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
   2eb00:	00bfffc4 	movi	r2,-1
   2eb04:	00000306 	br	2eb14 <t_setsockopt+0x1a8>
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
   2eb08:	0009883a 	mov	r4,zero
   2eb0c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return 0;
   2eb10:	0005883a 	mov	r2,zero
}
   2eb14:	e037883a 	mov	sp,fp
   2eb18:	dfc00117 	ldw	ra,4(sp)
   2eb1c:	df000017 	ldw	fp,0(sp)
   2eb20:	dec00204 	addi	sp,sp,8
   2eb24:	f800283a 	ret

0002eb28 <t_getsockopt>:
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
   2eb28:	defff704 	addi	sp,sp,-36
   2eb2c:	dfc00815 	stw	ra,32(sp)
   2eb30:	df000715 	stw	fp,28(sp)
   2eb34:	df000704 	addi	fp,sp,28
   2eb38:	e13ffc15 	stw	r4,-16(fp)
   2eb3c:	e17ffd15 	stw	r5,-12(fp)
   2eb40:	e1bffe15 	stw	r6,-8(fp)
   2eb44:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   2eb48:	e0bffc17 	ldw	r2,-16(fp)
   2eb4c:	10bff804 	addi	r2,r2,-32
   2eb50:	1085883a 	add	r2,r2,r2
   2eb54:	1085883a 	add	r2,r2,r2
   2eb58:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
   2eb5c:	008001b4 	movhi	r2,6
   2eb60:	10b8d804 	addi	r2,r2,-7328
   2eb64:	e0bff915 	stw	r2,-28(fp)
   2eb68:	00000706 	br	2eb88 <t_getsockopt+0x60>
   2eb6c:	e0fff917 	ldw	r3,-28(fp)
   2eb70:	e0bffa17 	ldw	r2,-24(fp)
   2eb74:	1880011e 	bne	r3,r2,2eb7c <t_getsockopt+0x54>
   2eb78:	00000506 	br	2eb90 <t_getsockopt+0x68>
   2eb7c:	e0bff917 	ldw	r2,-28(fp)
   2eb80:	10800017 	ldw	r2,0(r2)
   2eb84:	e0bff915 	stw	r2,-28(fp)
   2eb88:	e0bff917 	ldw	r2,-28(fp)
   2eb8c:	103ff71e 	bne	r2,zero,2eb6c <__alt_mem_descriptor_memory+0xdefeeb6c>
   2eb90:	e0fff917 	ldw	r3,-28(fp)
   2eb94:	e0bffa17 	ldw	r2,-24(fp)
   2eb98:	18800326 	beq	r3,r2,2eba8 <t_getsockopt+0x80>
   2eb9c:	002b0f40 	call	2b0f4 <dtrap>
   2eba0:	00bfffc4 	movi	r2,-1
   2eba4:	00003d06 	br	2ec9c <t_getsockopt+0x174>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
   2eba8:	0009883a 	mov	r4,zero
   2ebac:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
   2ebb0:	e0bffd17 	ldw	r2,-12(fp)
   2ebb4:	10800060 	cmpeqi	r2,r2,1
   2ebb8:	10000e1e 	bne	r2,zero,2ebf4 <t_getsockopt+0xcc>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
   2ebbc:	e13ffa17 	ldw	r4,-24(fp)
   2ebc0:	e17ffe17 	ldw	r5,-8(fp)
   2ebc4:	e1bfff17 	ldw	r6,-4(fp)
   2ebc8:	00310b40 	call	310b4 <sogetopt>
   2ebcc:	e0bffb15 	stw	r2,-20(fp)
   2ebd0:	e0bffb17 	ldw	r2,-20(fp)
   2ebd4:	10002c26 	beq	r2,zero,2ec88 <t_getsockopt+0x160>
      {
         so->so_error = err;
   2ebd8:	e0bffa17 	ldw	r2,-24(fp)
   2ebdc:	e0fffb17 	ldw	r3,-20(fp)
   2ebe0:	10c00615 	stw	r3,24(r2)
         UNLOCK_NET_RESOURCE (NET_RESID);
   2ebe4:	0009883a 	mov	r4,zero
   2ebe8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
   2ebec:	00bfffc4 	movi	r2,-1
   2ebf0:	00002a06 	br	2ec9c <t_getsockopt+0x174>
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
   2ebf4:	e0bffe17 	ldw	r2,-8(fp)
   2ebf8:	10800118 	cmpnei	r2,r2,4
   2ebfc:	10000e1e 	bne	r2,zero,2ec38 <t_getsockopt+0x110>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
   2ec00:	e0bffa17 	ldw	r2,-24(fp)
   2ec04:	10801f17 	ldw	r2,124(r2)
   2ec08:	1000041e 	bne	r2,zero,2ec1c <t_getsockopt+0xf4>
   2ec0c:	e0bfff17 	ldw	r2,-4(fp)
   2ec10:	00c01004 	movi	r3,64
   2ec14:	10c00015 	stw	r3,0(r2)
   2ec18:	00001b06 	br	2ec88 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
   2ec1c:	e0bffa17 	ldw	r2,-24(fp)
   2ec20:	10801f17 	ldw	r2,124(r2)
   2ec24:	10800043 	ldbu	r2,1(r2)
   2ec28:	10c03fcc 	andi	r3,r2,255
   2ec2c:	e0bfff17 	ldw	r2,-4(fp)
   2ec30:	10c00015 	stw	r3,0(r2)
   2ec34:	00001406 	br	2ec88 <t_getsockopt+0x160>
      }
      else if (name == IP_TOS)
   2ec38:	e0bffe17 	ldw	r2,-8(fp)
   2ec3c:	108000d8 	cmpnei	r2,r2,3
   2ec40:	10000d1e 	bne	r2,zero,2ec78 <t_getsockopt+0x150>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
   2ec44:	e0bffa17 	ldw	r2,-24(fp)
   2ec48:	10801f17 	ldw	r2,124(r2)
   2ec4c:	1000031e 	bne	r2,zero,2ec5c <t_getsockopt+0x134>
   2ec50:	e0bfff17 	ldw	r2,-4(fp)
   2ec54:	10000015 	stw	zero,0(r2)
   2ec58:	00000b06 	br	2ec88 <t_getsockopt+0x160>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
   2ec5c:	e0bffa17 	ldw	r2,-24(fp)
   2ec60:	10801f17 	ldw	r2,124(r2)
   2ec64:	10800003 	ldbu	r2,0(r2)
   2ec68:	10c03fcc 	andi	r3,r2,255
   2ec6c:	e0bfff17 	ldw	r2,-4(fp)
   2ec70:	10c00015 	stw	r3,0(r2)
   2ec74:	00000406 	br	2ec88 <t_getsockopt+0x160>
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
   2ec78:	0009883a 	mov	r4,zero
   2ec7c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
   2ec80:	00bfffc4 	movi	r2,-1
   2ec84:	00000506 	br	2ec9c <t_getsockopt+0x174>
      }
   }   
   so->so_error = 0;
   2ec88:	e0bffa17 	ldw	r2,-24(fp)
   2ec8c:	10000615 	stw	zero,24(r2)

   UNLOCK_NET_RESOURCE (NET_RESID);
   2ec90:	0009883a 	mov	r4,zero
   2ec94:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return 0;
   2ec98:	0005883a 	mov	r2,zero
}
   2ec9c:	e037883a 	mov	sp,fp
   2eca0:	dfc00117 	ldw	ra,4(sp)
   2eca4:	df000017 	ldw	fp,0(sp)
   2eca8:	dec00204 	addi	sp,sp,8
   2ecac:	f800283a 	ret

0002ecb0 <t_recv>:
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
   2ecb0:	defff604 	addi	sp,sp,-40
   2ecb4:	dfc00915 	stw	ra,36(sp)
   2ecb8:	df000815 	stw	fp,32(sp)
   2ecbc:	df000804 	addi	fp,sp,32
   2ecc0:	e13ffc15 	stw	r4,-16(fp)
   2ecc4:	e17ffd15 	stw	r5,-12(fp)
   2ecc8:	e1bffe15 	stw	r6,-8(fp)
   2eccc:	e1ffff15 	stw	r7,-4(fp)
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
   2ecd0:	e0bffe17 	ldw	r2,-8(fp)
   2ecd4:	e0bff915 	stw	r2,-28(fp)

   so = LONG2SO(s);
   2ecd8:	e0bffc17 	ldw	r2,-16(fp)
   2ecdc:	10bff804 	addi	r2,r2,-32
   2ece0:	1085883a 	add	r2,r2,r2
   2ece4:	1085883a 	add	r2,r2,r2
   2ece8:	e0bffa15 	stw	r2,-24(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   2ecec:	e0bffa17 	ldw	r2,-24(fp)
   2ecf0:	1080088b 	ldhu	r2,34(r2)
   2ecf4:	10bfffcc 	andi	r2,r2,65535
   2ecf8:	1080038c 	andi	r2,r2,14
   2ecfc:	108000a0 	cmpeqi	r2,r2,2
   2ed00:	1000051e 	bne	r2,zero,2ed18 <t_recv+0x68>
   {
      so->so_error = EPIPE;
   2ed04:	e0bffa17 	ldw	r2,-24(fp)
   2ed08:	00c00804 	movi	r3,32
   2ed0c:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   2ed10:	00bfffc4 	movi	r2,-1
   2ed14:	00001906 	br	2ed7c <t_recv+0xcc>
   }
   so->so_error = 0;
   2ed18:	e0bffa17 	ldw	r2,-24(fp)
   2ed1c:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
   2ed20:	0009883a 	mov	r4,zero
   2ed24:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
   2ed28:	e0fffe04 	addi	r3,fp,-8
   2ed2c:	e0bfff17 	ldw	r2,-4(fp)
   2ed30:	d8800015 	stw	r2,0(sp)
   2ed34:	e13ffa17 	ldw	r4,-24(fp)
   2ed38:	000b883a 	mov	r5,zero
   2ed3c:	e1bffd17 	ldw	r6,-12(fp)
   2ed40:	180f883a 	mov	r7,r3
   2ed44:	00303b00 	call	303b0 <soreceive>
   2ed48:	e0bffb15 	stw	r2,-20(fp)
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
   2ed4c:	0009883a 	mov	r4,zero
   2ed50:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if(err)
   2ed54:	e0bffb17 	ldw	r2,-20(fp)
   2ed58:	10000526 	beq	r2,zero,2ed70 <t_recv+0xc0>
   {
      so->so_error = err;
   2ed5c:	e0bffa17 	ldw	r2,-24(fp)
   2ed60:	e0fffb17 	ldw	r3,-20(fp)
   2ed64:	10c00615 	stw	r3,24(r2)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   2ed68:	00bfffc4 	movi	r2,-1
   2ed6c:	00000306 	br	2ed7c <t_recv+0xcc>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
   2ed70:	e0bffe17 	ldw	r2,-8(fp)
   2ed74:	e0fff917 	ldw	r3,-28(fp)
   2ed78:	1885c83a 	sub	r2,r3,r2
}
   2ed7c:	e037883a 	mov	sp,fp
   2ed80:	dfc00117 	ldw	ra,4(sp)
   2ed84:	df000017 	ldw	fp,0(sp)
   2ed88:	dec00204 	addi	sp,sp,8
   2ed8c:	f800283a 	ret

0002ed90 <t_recvfrom>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
   2ed90:	defff404 	addi	sp,sp,-48
   2ed94:	dfc00b15 	stw	ra,44(sp)
   2ed98:	df000a15 	stw	fp,40(sp)
   2ed9c:	df000a04 	addi	fp,sp,40
   2eda0:	e13ffc15 	stw	r4,-16(fp)
   2eda4:	e17ffd15 	stw	r5,-12(fp)
   2eda8:	e1bffe15 	stw	r6,-8(fp)
   2edac:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
   2edb0:	e03ffb15 	stw	zero,-20(fp)
   int   err;
   int   sendlen = len;
   2edb4:	e0bffe17 	ldw	r2,-8(fp)
   2edb8:	e0bff815 	stw	r2,-32(fp)

   so = LONG2SO(s);
   2edbc:	e0bffc17 	ldw	r2,-16(fp)
   2edc0:	10bff804 	addi	r2,r2,-32
   2edc4:	1085883a 	add	r2,r2,r2
   2edc8:	1085883a 	add	r2,r2,r2
   2edcc:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
   2edd0:	008001b4 	movhi	r2,6
   2edd4:	10b8d804 	addi	r2,r2,-7328
   2edd8:	e0bff715 	stw	r2,-36(fp)
   2eddc:	00000706 	br	2edfc <t_recvfrom+0x6c>
   2ede0:	e0fff717 	ldw	r3,-36(fp)
   2ede4:	e0bff917 	ldw	r2,-28(fp)
   2ede8:	1880011e 	bne	r3,r2,2edf0 <t_recvfrom+0x60>
   2edec:	00000506 	br	2ee04 <t_recvfrom+0x74>
   2edf0:	e0bff717 	ldw	r2,-36(fp)
   2edf4:	10800017 	ldw	r2,0(r2)
   2edf8:	e0bff715 	stw	r2,-36(fp)
   2edfc:	e0bff717 	ldw	r2,-36(fp)
   2ee00:	103ff71e 	bne	r2,zero,2ede0 <__alt_mem_descriptor_memory+0xdefeede0>
   2ee04:	e0fff717 	ldw	r3,-36(fp)
   2ee08:	e0bff917 	ldw	r2,-28(fp)
   2ee0c:	18800326 	beq	r3,r2,2ee1c <t_recvfrom+0x8c>
   2ee10:	002b0f40 	call	2b0f4 <dtrap>
   2ee14:	00bfffc4 	movi	r2,-1
   2ee18:	00002606 	br	2eeb4 <t_recvfrom+0x124>
   so->so_error = 0;
   2ee1c:	e0bff917 	ldw	r2,-28(fp)
   2ee20:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
   2ee24:	0009883a 	mov	r4,zero
   2ee28:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
   2ee2c:	e17ffb04 	addi	r5,fp,-20
   2ee30:	e0fffe04 	addi	r3,fp,-8
   2ee34:	e0bfff17 	ldw	r2,-4(fp)
   2ee38:	d8800015 	stw	r2,0(sp)
   2ee3c:	e13ff917 	ldw	r4,-28(fp)
   2ee40:	e1bffd17 	ldw	r6,-12(fp)
   2ee44:	180f883a 	mov	r7,r3
   2ee48:	00303b00 	call	303b0 <soreceive>
   2ee4c:	e0bffa15 	stw	r2,-24(fp)

   /* copy sender info from mbuf to sockaddr */
   if (sender)
   2ee50:	e0bffb17 	ldw	r2,-20(fp)
   2ee54:	10000b26 	beq	r2,zero,2ee84 <t_recvfrom+0xf4>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
   2ee58:	e0bffb17 	ldw	r2,-20(fp)
   2ee5c:	10c00317 	ldw	r3,12(r2)
   2ee60:	e0800317 	ldw	r2,12(fp)
   2ee64:	10800017 	ldw	r2,0(r2)
   2ee68:	e1000217 	ldw	r4,8(fp)
   2ee6c:	180b883a 	mov	r5,r3
   2ee70:	100d883a 	mov	r6,r2
   2ee74:	0007c900 	call	7c90 <memcpy>
      m_freem (sender);
   2ee78:	e0bffb17 	ldw	r2,-20(fp)
   2ee7c:	1009883a 	mov	r4,r2
   2ee80:	002c1a40 	call	2c1a4 <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
   2ee84:	0009883a 	mov	r4,zero
   2ee88:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if(err)
   2ee8c:	e0bffa17 	ldw	r2,-24(fp)
   2ee90:	10000526 	beq	r2,zero,2eea8 <t_recvfrom+0x118>
   {
      so->so_error = err;
   2ee94:	e0bff917 	ldw	r2,-28(fp)
   2ee98:	e0fffa17 	ldw	r3,-24(fp)
   2ee9c:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2eea0:	00bfffc4 	movi	r2,-1
   2eea4:	00000306 	br	2eeb4 <t_recvfrom+0x124>
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
   2eea8:	e0bffe17 	ldw	r2,-8(fp)
   2eeac:	e0fff817 	ldw	r3,-32(fp)
   2eeb0:	1885c83a 	sub	r2,r3,r2
}
   2eeb4:	e037883a 	mov	sp,fp
   2eeb8:	dfc00117 	ldw	ra,4(sp)
   2eebc:	df000017 	ldw	fp,0(sp)
   2eec0:	dec00204 	addi	sp,sp,8
   2eec4:	f800283a 	ret

0002eec8 <t_sendto>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
   2eec8:	defff404 	addi	sp,sp,-48
   2eecc:	dfc00b15 	stw	ra,44(sp)
   2eed0:	df000a15 	stw	fp,40(sp)
   2eed4:	df000a04 	addi	fp,sp,40
   2eed8:	e13ffc15 	stw	r4,-16(fp)
   2eedc:	e17ffd15 	stw	r5,-12(fp)
   2eee0:	e1bffe15 	stw	r6,-8(fp)
   2eee4:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
   2eee8:	e0bffc17 	ldw	r2,-16(fp)
   2eeec:	10bff804 	addi	r2,r2,-32
   2eef0:	1085883a 	add	r2,r2,r2
   2eef4:	1085883a 	add	r2,r2,r2
   2eef8:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
   2eefc:	008001b4 	movhi	r2,6
   2ef00:	10b8d804 	addi	r2,r2,-7328
   2ef04:	e0bff815 	stw	r2,-32(fp)
   2ef08:	00000706 	br	2ef28 <t_sendto+0x60>
   2ef0c:	e0fff817 	ldw	r3,-32(fp)
   2ef10:	e0bff917 	ldw	r2,-28(fp)
   2ef14:	1880011e 	bne	r3,r2,2ef1c <t_sendto+0x54>
   2ef18:	00000506 	br	2ef30 <t_sendto+0x68>
   2ef1c:	e0bff817 	ldw	r2,-32(fp)
   2ef20:	10800017 	ldw	r2,0(r2)
   2ef24:	e0bff815 	stw	r2,-32(fp)
   2ef28:	e0bff817 	ldw	r2,-32(fp)
   2ef2c:	103ff71e 	bne	r2,zero,2ef0c <__alt_mem_descriptor_memory+0xdefeef0c>
   2ef30:	e0fff817 	ldw	r3,-32(fp)
   2ef34:	e0bff917 	ldw	r2,-28(fp)
   2ef38:	18800326 	beq	r3,r2,2ef48 <t_sendto+0x80>
   2ef3c:	002b0f40 	call	2b0f4 <dtrap>
   2ef40:	00bfffc4 	movi	r2,-1
   2ef44:	00005706 	br	2f0a4 <t_sendto+0x1dc>
   so->so_error = 0;
   2ef48:	e0bff917 	ldw	r2,-28(fp)
   2ef4c:	10000615 	stw	zero,24(r2)

   switch (so->so_type)
   2ef50:	e0bff917 	ldw	r2,-28(fp)
   2ef54:	10800983 	ldbu	r2,38(r2)
   2ef58:	10803fcc 	andi	r2,r2,255
   2ef5c:	1080201c 	xori	r2,r2,128
   2ef60:	10bfe004 	addi	r2,r2,-128
   2ef64:	10c000a0 	cmpeqi	r3,r2,2
   2ef68:	18000a1e 	bne	r3,zero,2ef94 <t_sendto+0xcc>
   2ef6c:	10c000e0 	cmpeqi	r3,r2,3
   2ef70:	18000b1e 	bne	r3,zero,2efa0 <t_sendto+0xd8>
   2ef74:	10800060 	cmpeqi	r2,r2,1
   2ef78:	10001026 	beq	r2,zero,2efbc <t_sendto+0xf4>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
   2ef7c:	e13ffc17 	ldw	r4,-16(fp)
   2ef80:	e17ffd17 	ldw	r5,-12(fp)
   2ef84:	e1bffe17 	ldw	r6,-8(fp)
   2ef88:	e1ffff17 	ldw	r7,-4(fp)
   2ef8c:	002f0b80 	call	2f0b8 <t_send>
   2ef90:	00004406 	br	2f0a4 <t_sendto+0x1dc>
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
   2ef94:	00434380 	call	43438 <udp_maxalloc>
   2ef98:	e0bffb15 	stw	r2,-20(fp)
      break;
   2ef9c:	00000d06 	br	2efd4 <t_sendto+0x10c>
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
   2efa0:	e0bff917 	ldw	r2,-28(fp)
   2efa4:	10800417 	ldw	r2,16(r2)
   2efa8:	1088000c 	andi	r2,r2,8192
   2efac:	1009883a 	mov	r4,r2
   2efb0:	004204c0 	call	4204c <ip_raw_maxalloc>
   2efb4:	e0bffb15 	stw	r2,-20(fp)
      break;
   2efb8:	00000606 	br	2efd4 <t_sendto+0x10c>
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
   2efbc:	002b0f40 	call	2b0f4 <dtrap>
      so->so_error = EFAULT;
   2efc0:	e0bff917 	ldw	r2,-28(fp)
   2efc4:	00c00384 	movi	r3,14
   2efc8:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2efcc:	00bfffc4 	movi	r2,-1
   2efd0:	00003406 	br	2f0a4 <t_sendto+0x1dc>
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
   2efd4:	e0fffb17 	ldw	r3,-20(fp)
   2efd8:	e0bffe17 	ldw	r2,-8(fp)
   2efdc:	1880050e 	bge	r3,r2,2eff4 <t_sendto+0x12c>
   {
      so->so_error = EMSGSIZE;
   2efe0:	e0bff917 	ldw	r2,-28(fp)
   2efe4:	00c01e84 	movi	r3,122
   2efe8:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2efec:	00bfffc4 	movi	r2,-1
   2eff0:	00002c06 	br	2f0a4 <t_sendto+0x1dc>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
   2eff4:	e0800217 	ldw	r2,8(fp)
   2eff8:	10000c26 	beq	r2,zero,2f02c <t_sendto+0x164>
   {
      name = sockargs(to, tolen, MT_SONAME);
   2effc:	e1000217 	ldw	r4,8(fp)
   2f000:	e1400317 	ldw	r5,12(fp)
   2f004:	01800244 	movi	r6,9
   2f008:	002f44c0 	call	2f44c <sockargs>
   2f00c:	e0bff715 	stw	r2,-36(fp)
      if(name == NULL)
   2f010:	e0bff717 	ldw	r2,-36(fp)
   2f014:	1000061e 	bne	r2,zero,2f030 <t_sendto+0x168>
      {
         so->so_error = ENOMEM;
   2f018:	e0bff917 	ldw	r2,-28(fp)
   2f01c:	00c00304 	movi	r3,12
   2f020:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
   2f024:	00bfffc4 	movi	r2,-1
   2f028:	00001e06 	br	2f0a4 <t_sendto+0x1dc>
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
   2f02c:	e03ff715 	stw	zero,-36(fp)
   
   sendlen = len;
   2f030:	e0bffe17 	ldw	r2,-8(fp)
   2f034:	e0bffb15 	stw	r2,-20(fp)

   LOCK_NET_RESOURCE(NET_RESID);
   2f038:	0009883a 	mov	r4,zero
   2f03c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
   2f040:	e0fffb04 	addi	r3,fp,-20
   2f044:	e0bfff17 	ldw	r2,-4(fp)
   2f048:	d8800015 	stw	r2,0(sp)
   2f04c:	e13ff917 	ldw	r4,-28(fp)
   2f050:	e17ff717 	ldw	r5,-36(fp)
   2f054:	e1bffd17 	ldw	r6,-12(fp)
   2f058:	180f883a 	mov	r7,r3
   2f05c:	002fe640 	call	2fe64 <sosend>
   2f060:	e0bffa15 	stw	r2,-24(fp)

   if (name)
   2f064:	e0bff717 	ldw	r2,-36(fp)
   2f068:	10000226 	beq	r2,zero,2f074 <t_sendto+0x1ac>
      m_freem(name);
   2f06c:	e13ff717 	ldw	r4,-36(fp)
   2f070:	002c1a40 	call	2c1a4 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
   2f074:	0009883a 	mov	r4,zero
   2f078:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (err != 0)
   2f07c:	e0bffa17 	ldw	r2,-24(fp)
   2f080:	10000526 	beq	r2,zero,2f098 <t_sendto+0x1d0>
   {
      so->so_error = err;
   2f084:	e0bff917 	ldw	r2,-28(fp)
   2f088:	e0fffa17 	ldw	r3,-24(fp)
   2f08c:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2f090:	00bfffc4 	movi	r2,-1
   2f094:	00000306 	br	2f0a4 <t_sendto+0x1dc>
   }

   return (len - sendlen);
   2f098:	e0bffb17 	ldw	r2,-20(fp)
   2f09c:	e0fffe17 	ldw	r3,-8(fp)
   2f0a0:	1885c83a 	sub	r2,r3,r2
}
   2f0a4:	e037883a 	mov	sp,fp
   2f0a8:	dfc00117 	ldw	ra,4(sp)
   2f0ac:	df000017 	ldw	fp,0(sp)
   2f0b0:	dec00204 	addi	sp,sp,8
   2f0b4:	f800283a 	ret

0002f0b8 <t_send>:
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
   2f0b8:	defff104 	addi	sp,sp,-60
   2f0bc:	dfc00e15 	stw	ra,56(sp)
   2f0c0:	df000d15 	stw	fp,52(sp)
   2f0c4:	df000d04 	addi	fp,sp,52
   2f0c8:	e13ffc15 	stw	r4,-16(fp)
   2f0cc:	e17ffd15 	stw	r5,-12(fp)
   2f0d0:	e1bffe15 	stw	r6,-8(fp)
   2f0d4:	e1ffff15 	stw	r7,-4(fp)
   struct socket *   so;
   int   e;       /* error holder */
   int   total_sent  =  0;
   2f0d8:	e03ff515 	stw	zero,-44(fp)
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
   2f0dc:	e0bffc17 	ldw	r2,-16(fp)
   2f0e0:	10bff804 	addi	r2,r2,-32
   2f0e4:	1085883a 	add	r2,r2,r2
   2f0e8:	1085883a 	add	r2,r2,r2
   2f0ec:	e0bff715 	stw	r2,-36(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   2f0f0:	e0bff717 	ldw	r2,-36(fp)
   2f0f4:	1080088b 	ldhu	r2,34(r2)
   2f0f8:	10bfffcc 	andi	r2,r2,65535
   2f0fc:	1080038c 	andi	r2,r2,14
   2f100:	108000a0 	cmpeqi	r2,r2,2
   2f104:	1000051e 	bne	r2,zero,2f11c <t_send+0x64>
   {
      so->so_error = EPIPE;
   2f108:	e0bff717 	ldw	r2,-36(fp)
   2f10c:	00c00804 	movi	r3,32
   2f110:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2f114:	00bfffc4 	movi	r2,-1
   2f118:	00006206 	br	2f2a4 <t_send+0x1ec>
   }
   so->so_error = 0;
   2f11c:	e0bff717 	ldw	r2,-36(fp)
   2f120:	10000615 	stw	zero,24(r2)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
   2f124:	e0bff717 	ldw	r2,-36(fp)
   2f128:	10800983 	ldbu	r2,38(r2)
   2f12c:	10803fcc 	andi	r2,r2,255
   2f130:	1080201c 	xori	r2,r2,128
   2f134:	10bfe004 	addi	r2,r2,-128
   2f138:	10800060 	cmpeqi	r2,r2,1
   2f13c:	1000081e 	bne	r2,zero,2f160 <t_send+0xa8>
      return(t_sendto(s, buf, len, flags, NULL, 0));
   2f140:	d8000015 	stw	zero,0(sp)
   2f144:	d8000115 	stw	zero,4(sp)
   2f148:	e13ffc17 	ldw	r4,-16(fp)
   2f14c:	e17ffd17 	ldw	r5,-12(fp)
   2f150:	e1bffe17 	ldw	r6,-8(fp)
   2f154:	e1ffff17 	ldw	r7,-4(fp)
   2f158:	002eec80 	call	2eec8 <t_sendto>
   2f15c:	00005106 	br	2f2a4 <t_send+0x1ec>

   maxpkt = TCP_MSS;
   2f160:	00816d04 	movi	r2,1460
   2f164:	e0bff615 	stw	r2,-40(fp)
   if(so->so_pcb)
   2f168:	e0bff717 	ldw	r2,-36(fp)
   2f16c:	10800117 	ldw	r2,4(r2)
   2f170:	10000c26 	beq	r2,zero,2f1a4 <t_send+0xec>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
   2f174:	e0bff717 	ldw	r2,-36(fp)
   2f178:	10800117 	ldw	r2,4(r2)
   2f17c:	10800917 	ldw	r2,36(r2)
   2f180:	e0bff815 	stw	r2,-32(fp)
      if(tp->t_maxseg)              /* Make sure it's set */
   2f184:	e0bff817 	ldw	r2,-32(fp)
   2f188:	10800a0b 	ldhu	r2,40(r2)
   2f18c:	10bfffcc 	andi	r2,r2,65535
   2f190:	10000426 	beq	r2,zero,2f1a4 <t_send+0xec>
         maxpkt = tp->t_maxseg;
   2f194:	e0bff817 	ldw	r2,-32(fp)
   2f198:	10800a0b 	ldhu	r2,40(r2)
   2f19c:	10bfffcc 	andi	r2,r2,65535
   2f1a0:	e0bff615 	stw	r2,-40(fp)
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
   2f1a4:	00003c06 	br	2f298 <t_send+0x1e0>
   {
      if (len > maxpkt)
   2f1a8:	e0bffe17 	ldw	r2,-8(fp)
   2f1ac:	e0fff617 	ldw	r3,-40(fp)
   2f1b0:	1880030e 	bge	r3,r2,2f1c0 <t_send+0x108>
         sendlen = maxpkt;  /* take biggest block we can */
   2f1b4:	e0bff617 	ldw	r2,-40(fp)
   2f1b8:	e0bffb15 	stw	r2,-20(fp)
   2f1bc:	00000206 	br	2f1c8 <t_send+0x110>
      else
         sendlen = len;
   2f1c0:	e0bffe17 	ldw	r2,-8(fp)
   2f1c4:	e0bffb15 	stw	r2,-20(fp)
      sent = sendlen;
   2f1c8:	e0bffb17 	ldw	r2,-20(fp)
   2f1cc:	e0bff915 	stw	r2,-28(fp)

      LOCK_NET_RESOURCE(NET_RESID);
   2f1d0:	0009883a 	mov	r4,zero
   2f1d4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
   2f1d8:	e0fffb04 	addi	r3,fp,-20
   2f1dc:	e0bfff17 	ldw	r2,-4(fp)
   2f1e0:	d8800015 	stw	r2,0(sp)
   2f1e4:	e13ff717 	ldw	r4,-36(fp)
   2f1e8:	000b883a 	mov	r5,zero
   2f1ec:	e1bffd17 	ldw	r6,-12(fp)
   2f1f0:	180f883a 	mov	r7,r3
   2f1f4:	002fe640 	call	2fe64 <sosend>
   2f1f8:	e0bffa15 	stw	r2,-24(fp)
      UNLOCK_NET_RESOURCE(NET_RESID);
   2f1fc:	0009883a 	mov	r4,zero
   2f200:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
   2f204:	e0bffa17 	ldw	r2,-24(fp)
   2f208:	10001026 	beq	r2,zero,2f24c <t_send+0x194>
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
   2f20c:	e0bffa17 	ldw	r2,-24(fp)
   2f210:	10801a60 	cmpeqi	r2,r2,105
   2f214:	1000031e 	bne	r2,zero,2f224 <t_send+0x16c>
   2f218:	e0bffa17 	ldw	r2,-24(fp)
   2f21c:	108002d8 	cmpnei	r2,r2,11
   2f220:	1000051e 	bne	r2,zero,2f238 <t_send+0x180>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
   2f224:	e0bff517 	ldw	r2,-44(fp)
   2f228:	10000326 	beq	r2,zero,2f238 <t_send+0x180>
            {
               so->so_error = 0;
   2f22c:	e0bff717 	ldw	r2,-36(fp)
   2f230:	10000615 	stw	zero,24(r2)
               break;      /* break out of while(len) loop */
   2f234:	00001a06 	br	2f2a0 <t_send+0x1e8>
            }
         }
         so->so_error = e;
   2f238:	e0bff717 	ldw	r2,-36(fp)
   2f23c:	e0fffa17 	ldw	r3,-24(fp)
   2f240:	10c00615 	stw	r3,24(r2)
         return SOCKET_ERROR;
   2f244:	00bfffc4 	movi	r2,-1
   2f248:	00001606 	br	2f2a4 <t_send+0x1ec>
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
   2f24c:	e0bffb17 	ldw	r2,-20(fp)
   2f250:	10000126 	beq	r2,zero,2f258 <t_send+0x1a0>
         break;         /* break out of while(len) loop */
   2f254:	00001206 	br	2f2a0 <t_send+0x1e8>

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
   2f258:	e0bffb17 	ldw	r2,-20(fp)
   2f25c:	e0fff917 	ldw	r3,-28(fp)
   2f260:	1885c83a 	sub	r2,r3,r2
   2f264:	e0bff915 	stw	r2,-28(fp)
      buf += sent;
   2f268:	e0bff917 	ldw	r2,-28(fp)
   2f26c:	e0fffd17 	ldw	r3,-12(fp)
   2f270:	1885883a 	add	r2,r3,r2
   2f274:	e0bffd15 	stw	r2,-12(fp)
      len -= sent;
   2f278:	e0fffe17 	ldw	r3,-8(fp)
   2f27c:	e0bff917 	ldw	r2,-28(fp)
   2f280:	1885c83a 	sub	r2,r3,r2
   2f284:	e0bffe15 	stw	r2,-8(fp)
      total_sent += sent;
   2f288:	e0fff517 	ldw	r3,-44(fp)
   2f28c:	e0bff917 	ldw	r2,-28(fp)
   2f290:	1885883a 	add	r2,r3,r2
   2f294:	e0bff515 	stw	r2,-44(fp)
         maxpkt = tp->t_maxseg;
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
   2f298:	e0bffe17 	ldw	r2,-8(fp)
   2f29c:	103fc21e 	bne	r2,zero,2f1a8 <__alt_mem_descriptor_memory+0xdefef1a8>
      len -= sent;
      total_sent += sent;
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
   2f2a0:	e0bff517 	ldw	r2,-44(fp)
}
   2f2a4:	e037883a 	mov	sp,fp
   2f2a8:	dfc00117 	ldw	ra,4(sp)
   2f2ac:	df000017 	ldw	fp,0(sp)
   2f2b0:	dec00204 	addi	sp,sp,8
   2f2b4:	f800283a 	ret

0002f2b8 <t_shutdown>:
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
   2f2b8:	defff904 	addi	sp,sp,-28
   2f2bc:	dfc00615 	stw	ra,24(sp)
   2f2c0:	df000515 	stw	fp,20(sp)
   2f2c4:	df000504 	addi	fp,sp,20
   2f2c8:	e13ffe15 	stw	r4,-8(fp)
   2f2cc:	e17fff15 	stw	r5,-4(fp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
   2f2d0:	e0bffe17 	ldw	r2,-8(fp)
   2f2d4:	10bff804 	addi	r2,r2,-32
   2f2d8:	1085883a 	add	r2,r2,r2
   2f2dc:	1085883a 	add	r2,r2,r2
   2f2e0:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
   2f2e4:	008001b4 	movhi	r2,6
   2f2e8:	10b8d804 	addi	r2,r2,-7328
   2f2ec:	e0bffb15 	stw	r2,-20(fp)
   2f2f0:	00000706 	br	2f310 <t_shutdown+0x58>
   2f2f4:	e0fffb17 	ldw	r3,-20(fp)
   2f2f8:	e0bffc17 	ldw	r2,-16(fp)
   2f2fc:	1880011e 	bne	r3,r2,2f304 <t_shutdown+0x4c>
   2f300:	00000506 	br	2f318 <t_shutdown+0x60>
   2f304:	e0bffb17 	ldw	r2,-20(fp)
   2f308:	10800017 	ldw	r2,0(r2)
   2f30c:	e0bffb15 	stw	r2,-20(fp)
   2f310:	e0bffb17 	ldw	r2,-20(fp)
   2f314:	103ff71e 	bne	r2,zero,2f2f4 <__alt_mem_descriptor_memory+0xdefef2f4>
   2f318:	e0fffb17 	ldw	r3,-20(fp)
   2f31c:	e0bffc17 	ldw	r2,-16(fp)
   2f320:	18800326 	beq	r3,r2,2f330 <t_shutdown+0x78>
   2f324:	002b0f40 	call	2b0f4 <dtrap>
   2f328:	00bfffc4 	movi	r2,-1
   2f32c:	00001206 	br	2f378 <t_shutdown+0xc0>
   so->so_error = 0;
   2f330:	e0bffc17 	ldw	r2,-16(fp)
   2f334:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
   2f338:	0009883a 	mov	r4,zero
   2f33c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
   2f340:	e13ffc17 	ldw	r4,-16(fp)
   2f344:	e17fff17 	ldw	r5,-4(fp)
   2f348:	0030af40 	call	30af4 <soshutdown>
   2f34c:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
   2f350:	0009883a 	mov	r4,zero
   2f354:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (err != 0)
   2f358:	e0bffd17 	ldw	r2,-12(fp)
   2f35c:	10000526 	beq	r2,zero,2f374 <t_shutdown+0xbc>
   {
      so->so_error = err;
   2f360:	e0bffc17 	ldw	r2,-16(fp)
   2f364:	e0fffd17 	ldw	r3,-12(fp)
   2f368:	10c00615 	stw	r3,24(r2)
      return SOCKET_ERROR;
   2f36c:	00bfffc4 	movi	r2,-1
   2f370:	00000106 	br	2f378 <t_shutdown+0xc0>
   }
   return 0;
   2f374:	0005883a 	mov	r2,zero
}
   2f378:	e037883a 	mov	sp,fp
   2f37c:	dfc00117 	ldw	ra,4(sp)
   2f380:	df000017 	ldw	fp,0(sp)
   2f384:	dec00204 	addi	sp,sp,8
   2f388:	f800283a 	ret

0002f38c <t_socketclose>:
 * RETURNS: 
 */

int
t_socketclose(long s)
{
   2f38c:	defffa04 	addi	sp,sp,-24
   2f390:	dfc00515 	stw	ra,20(sp)
   2f394:	df000415 	stw	fp,16(sp)
   2f398:	df000404 	addi	fp,sp,16
   2f39c:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   2f3a0:	e0bfff17 	ldw	r2,-4(fp)
   2f3a4:	10bff804 	addi	r2,r2,-32
   2f3a8:	1085883a 	add	r2,r2,r2
   2f3ac:	1085883a 	add	r2,r2,r2
   2f3b0:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
   2f3b4:	008001b4 	movhi	r2,6
   2f3b8:	10b8d804 	addi	r2,r2,-7328
   2f3bc:	e0bffc15 	stw	r2,-16(fp)
   2f3c0:	00000706 	br	2f3e0 <t_socketclose+0x54>
   2f3c4:	e0fffc17 	ldw	r3,-16(fp)
   2f3c8:	e0bffd17 	ldw	r2,-12(fp)
   2f3cc:	1880011e 	bne	r3,r2,2f3d4 <t_socketclose+0x48>
   2f3d0:	00000506 	br	2f3e8 <t_socketclose+0x5c>
   2f3d4:	e0bffc17 	ldw	r2,-16(fp)
   2f3d8:	10800017 	ldw	r2,0(r2)
   2f3dc:	e0bffc15 	stw	r2,-16(fp)
   2f3e0:	e0bffc17 	ldw	r2,-16(fp)
   2f3e4:	103ff71e 	bne	r2,zero,2f3c4 <__alt_mem_descriptor_memory+0xdefef3c4>
   2f3e8:	e0fffc17 	ldw	r3,-16(fp)
   2f3ec:	e0bffd17 	ldw	r2,-12(fp)
   2f3f0:	18800326 	beq	r3,r2,2f400 <t_socketclose+0x74>
   2f3f4:	002b0f40 	call	2b0f4 <dtrap>
   2f3f8:	00bfffc4 	movi	r2,-1
   2f3fc:	00000e06 	br	2f438 <t_socketclose+0xac>
   so->so_error = 0;
   2f400:	e0bffd17 	ldw	r2,-12(fp)
   2f404:	10000615 	stw	zero,24(r2)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
   2f408:	0009883a 	mov	r4,zero
   2f40c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   err = soclose(so);
   2f410:	e13ffd17 	ldw	r4,-12(fp)
   2f414:	002f96c0 	call	2f96c <soclose>
   2f418:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
   2f41c:	0009883a 	mov	r4,zero
   2f420:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
   2f424:	e0bffe17 	ldw	r2,-8(fp)
   2f428:	10000226 	beq	r2,zero,2f434 <t_socketclose+0xa8>
   {
      /* do not do the following assignment since the socket structure
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
   2f42c:	00bfffc4 	movi	r2,-1
   2f430:	00000106 	br	2f438 <t_socketclose+0xac>
   }
   return 0;
   2f434:	0005883a 	mov	r2,zero
}
   2f438:	e037883a 	mov	sp,fp
   2f43c:	dfc00117 	ldw	ra,4(sp)
   2f440:	df000017 	ldw	fp,0(sp)
   2f444:	dec00204 	addi	sp,sp,8
   2f448:	f800283a 	ret

0002f44c <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
   2f44c:	defffa04 	addi	sp,sp,-24
   2f450:	dfc00515 	stw	ra,20(sp)
   2f454:	df000415 	stw	fp,16(sp)
   2f458:	df000404 	addi	fp,sp,16
   2f45c:	e13ffd15 	stw	r4,-12(fp)
   2f460:	e17ffe15 	stw	r5,-8(fp)
   2f464:	e1bfff15 	stw	r6,-4(fp)
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
   2f468:	0009883a 	mov	r4,zero
   2f46c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
   2f470:	e13fff17 	ldw	r4,-4(fp)
   2f474:	e17ffe17 	ldw	r5,-8(fp)
   2f478:	002bf0c0 	call	2bf0c <m_getnbuf>
   2f47c:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
   2f480:	0009883a 	mov	r4,zero
   2f484:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (m == NULL)
   2f488:	e0bffc17 	ldw	r2,-16(fp)
   2f48c:	1000021e 	bne	r2,zero,2f498 <sockargs+0x4c>
      return NULL;
   2f490:	0005883a 	mov	r2,zero
   2f494:	00000b06 	br	2f4c4 <sockargs+0x78>
   m->m_len = arglen;
   2f498:	e0fffe17 	ldw	r3,-8(fp)
   2f49c:	e0bffc17 	ldw	r2,-16(fp)
   2f4a0:	10c00215 	stw	r3,8(r2)
   MEMCPY(mtod (m, char *), arg, arglen);
   2f4a4:	e0bffc17 	ldw	r2,-16(fp)
   2f4a8:	10c00317 	ldw	r3,12(r2)
   2f4ac:	e0bffe17 	ldw	r2,-8(fp)
   2f4b0:	1809883a 	mov	r4,r3
   2f4b4:	e17ffd17 	ldw	r5,-12(fp)
   2f4b8:	100d883a 	mov	r6,r2
   2f4bc:	0007c900 	call	7c90 <memcpy>
   return m;
   2f4c0:	e0bffc17 	ldw	r2,-16(fp)
}
   2f4c4:	e037883a 	mov	sp,fp
   2f4c8:	dfc00117 	ldw	ra,4(sp)
   2f4cc:	df000017 	ldw	fp,0(sp)
   2f4d0:	dec00204 	addi	sp,sp,8
   2f4d4:	f800283a 	ret

0002f4d8 <t_errno>:
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
   2f4d8:	defffa04 	addi	sp,sp,-24
   2f4dc:	dfc00515 	stw	ra,20(sp)
   2f4e0:	df000415 	stw	fp,16(sp)
   2f4e4:	df000404 	addi	fp,sp,16
   2f4e8:	e13fff15 	stw	r4,-4(fp)
   struct socket *so = LONG2SO(s);
   2f4ec:	e0bfff17 	ldw	r2,-4(fp)
   2f4f0:	10bff804 	addi	r2,r2,-32
   2f4f4:	1085883a 	add	r2,r2,r2
   2f4f8:	1085883a 	add	r2,r2,r2
   2f4fc:	e0bffe15 	stw	r2,-8(fp)
   struct socket *tmp;
   int errcode = ENOTSOCK;
   2f500:	00801b04 	movi	r2,108
   2f504:	e0bffd15 	stw	r2,-12(fp)

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
   2f508:	0009883a 	mov	r4,zero
   2f50c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
   2f510:	008001b4 	movhi	r2,6
   2f514:	10b8d804 	addi	r2,r2,-7328
   2f518:	e0bffc15 	stw	r2,-16(fp)
   2f51c:	00000a06 	br	2f548 <t_errno+0x70>
   {
      if (tmp == so)  /* found socket, return error */
   2f520:	e0fffc17 	ldw	r3,-16(fp)
   2f524:	e0bffe17 	ldw	r2,-8(fp)
   2f528:	1880041e 	bne	r3,r2,2f53c <t_errno+0x64>
      {
         errcode = so->so_error;
   2f52c:	e0bffe17 	ldw	r2,-8(fp)
   2f530:	10800617 	ldw	r2,24(r2)
   2f534:	e0bffd15 	stw	r2,-12(fp)
         break;
   2f538:	00000506 	br	2f550 <t_errno+0x78>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
   2f53c:	e0bffc17 	ldw	r2,-16(fp)
   2f540:	10800017 	ldw	r2,0(r2)
   2f544:	e0bffc15 	stw	r2,-16(fp)
   2f548:	e0bffc17 	ldw	r2,-16(fp)
   2f54c:	103ff41e 	bne	r2,zero,2f520 <__alt_mem_descriptor_memory+0xdefef520>
         errcode = so->so_error;
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
   2f550:	0009883a 	mov	r4,zero
   2f554:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   return errcode;
   2f558:	e0bffd17 	ldw	r2,-12(fp)
}
   2f55c:	e037883a 	mov	sp,fp
   2f560:	dfc00117 	ldw	ra,4(sp)
   2f564:	df000017 	ldw	fp,0(sp)
   2f568:	dec00204 	addi	sp,sp,8
   2f56c:	f800283a 	ret

0002f570 <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
   2f570:	defff704 	addi	sp,sp,-36
   2f574:	dfc00815 	stw	ra,32(sp)
   2f578:	df000715 	stw	fp,28(sp)
   2f57c:	df000704 	addi	fp,sp,28
   2f580:	e13ffd15 	stw	r4,-12(fp)
   2f584:	e17ffe15 	stw	r5,-8(fp)
   2f588:	e1bfff15 	stw	r6,-4(fp)
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
   2f58c:	e0bfff17 	ldw	r2,-4(fp)
   2f590:	10000626 	beq	r2,zero,2f5ac <socreate+0x3c>
      prp = pffindproto(dom, proto, type);
   2f594:	e13ffd17 	ldw	r4,-12(fp)
   2f598:	e17fff17 	ldw	r5,-4(fp)
   2f59c:	e1bffe17 	ldw	r6,-8(fp)
   2f5a0:	002be500 	call	2be50 <pffindproto>
   2f5a4:	e0bff915 	stw	r2,-28(fp)
   2f5a8:	00000406 	br	2f5bc <socreate+0x4c>
   else
      prp = pffindtype(dom, type);
   2f5ac:	e13ffd17 	ldw	r4,-12(fp)
   2f5b0:	e17ffe17 	ldw	r5,-8(fp)
   2f5b4:	002bdc00 	call	2bdc0 <pffindtype>
   2f5b8:	e0bff915 	stw	r2,-28(fp)
   if (prp == 0)
   2f5bc:	e0bff917 	ldw	r2,-28(fp)
   2f5c0:	1000021e 	bne	r2,zero,2f5cc <socreate+0x5c>
      return NULL;
   2f5c4:	0005883a 	mov	r2,zero
   2f5c8:	00005106 	br	2f710 <socreate+0x1a0>
   if (prp->pr_type != type)
   2f5cc:	e0bff917 	ldw	r2,-28(fp)
   2f5d0:	1080000b 	ldhu	r2,0(r2)
   2f5d4:	10ffffcc 	andi	r3,r2,65535
   2f5d8:	18e0001c 	xori	r3,r3,32768
   2f5dc:	18e00004 	addi	r3,r3,-32768
   2f5e0:	e0bffe17 	ldw	r2,-8(fp)
   2f5e4:	18800226 	beq	r3,r2,2f5f0 <socreate+0x80>
      return NULL;
   2f5e8:	0005883a 	mov	r2,zero
   2f5ec:	00004806 	br	2f710 <socreate+0x1a0>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
   2f5f0:	01002104 	movi	r4,132
   2f5f4:	002bce00 	call	2bce0 <npalloc>
   2f5f8:	e0bffa15 	stw	r2,-24(fp)
   2f5fc:	e0bffa17 	ldw	r2,-24(fp)
   2f600:	1000021e 	bne	r2,zero,2f60c <socreate+0x9c>
      return NULL;
   2f604:	0005883a 	mov	r2,zero
   2f608:	00004106 	br	2f710 <socreate+0x1a0>
   so->next = NULL;
   2f60c:	e0bffa17 	ldw	r2,-24(fp)
   2f610:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
   2f614:	010001b4 	movhi	r4,6
   2f618:	2138d804 	addi	r4,r4,-7328
   2f61c:	e17ffa17 	ldw	r5,-24(fp)
   2f620:	002aacc0 	call	2aacc <putq>

   so->so_options = socket_defaults;
   2f624:	d0a0390b 	ldhu	r2,-32540(gp)
   2f628:	10ffffcc 	andi	r3,r2,65535
   2f62c:	e0bffa17 	ldw	r2,-24(fp)
   2f630:	10c00415 	stw	r3,16(r2)
   so->so_domain = dom;
   2f634:	e0bffa17 	ldw	r2,-24(fp)
   2f638:	e0fffd17 	ldw	r3,-12(fp)
   2f63c:	10c00515 	stw	r3,20(r2)
   so->so_state = 0;
   2f640:	e0bffa17 	ldw	r2,-24(fp)
   2f644:	1000088d 	sth	zero,34(r2)
   so->so_type = (char)type;
   2f648:	e0bffe17 	ldw	r2,-8(fp)
   2f64c:	1007883a 	mov	r3,r2
   2f650:	e0bffa17 	ldw	r2,-24(fp)
   2f654:	10c00985 	stb	r3,38(r2)
   so->so_proto = prp;
   2f658:	e0bffa17 	ldw	r2,-24(fp)
   2f65c:	e0fff917 	ldw	r3,-28(fp)
   2f660:	10c00215 	stw	r3,8(r2)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
   2f664:	e0bffa17 	ldw	r2,-24(fp)
   2f668:	10000315 	stw	zero,12(r2)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
   2f66c:	e0bffa17 	ldw	r2,-24(fp)
   2f670:	10000715 	stw	zero,28(r2)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
   2f674:	e0bff917 	ldw	r2,-28(fp)
   2f678:	10800317 	ldw	r2,12(r2)
   2f67c:	e0ffff17 	ldw	r3,-4(fp)
   2f680:	e13ffa17 	ldw	r4,-24(fp)
   2f684:	000b883a 	mov	r5,zero
   2f688:	180d883a 	mov	r6,r3
   2f68c:	103ee83a 	callr	r2
   2f690:	e0bffb15 	stw	r2,-20(fp)
   if (error) goto bad;
   2f694:	e0bffb17 	ldw	r2,-20(fp)
   2f698:	10000126 	beq	r2,zero,2f6a0 <socreate+0x130>
   2f69c:	00000d06 	br	2f6d4 <socreate+0x164>

   if (so_evtmap)
   2f6a0:	00800174 	movhi	r2,5
   2f6a4:	108fe404 	addi	r2,r2,16272
   2f6a8:	10800003 	ldbu	r2,0(r2)
   2f6ac:	10803fcc 	andi	r2,r2,255
   2f6b0:	10001626 	beq	r2,zero,2f70c <socreate+0x19c>
   {                       
      rc = (*so_evtmap_create) (so);
   2f6b4:	00800174 	movhi	r2,5
   2f6b8:	108fe204 	addi	r2,r2,16264
   2f6bc:	10800017 	ldw	r2,0(r2)
   2f6c0:	e13ffa17 	ldw	r4,-24(fp)
   2f6c4:	103ee83a 	callr	r2
   2f6c8:	e0bffc15 	stw	r2,-16(fp)
      if (rc != 0)
   2f6cc:	e0bffc17 	ldw	r2,-16(fp)
   2f6d0:	10000a26 	beq	r2,zero,2f6fc <socreate+0x18c>
      {
bad:   
         so->so_state |= SS_NOFDREF;
   2f6d4:	e0bffa17 	ldw	r2,-24(fp)
   2f6d8:	1080088b 	ldhu	r2,34(r2)
   2f6dc:	10800054 	ori	r2,r2,1
   2f6e0:	1007883a 	mov	r3,r2
   2f6e4:	e0bffa17 	ldw	r2,-24(fp)
   2f6e8:	10c0088d 	sth	r3,34(r2)
         sofree (so);
   2f6ec:	e13ffa17 	ldw	r4,-24(fp)
   2f6f0:	002f8500 	call	2f850 <sofree>
         return NULL;   
   2f6f4:	0005883a 	mov	r2,zero
   2f6f8:	00000506 	br	2f710 <socreate+0x1a0>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
   2f6fc:	00272cc0 	call	272cc <TK_OSTaskQuery>
   2f700:	1007883a 	mov	r3,r2
   2f704:	e0bffa17 	ldw	r2,-24(fp)
   2f708:	10c02005 	stb	r3,128(r2)
   }

   return so;
   2f70c:	e0bffa17 	ldw	r2,-24(fp)
}
   2f710:	e037883a 	mov	sp,fp
   2f714:	dfc00117 	ldw	ra,4(sp)
   2f718:	df000017 	ldw	fp,0(sp)
   2f71c:	dec00204 	addi	sp,sp,8
   2f720:	f800283a 	ret

0002f724 <sobind>:
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
   2f724:	defffb04 	addi	sp,sp,-20
   2f728:	dfc00415 	stw	ra,16(sp)
   2f72c:	df000315 	stw	fp,12(sp)
   2f730:	df000304 	addi	fp,sp,12
   2f734:	e13ffe15 	stw	r4,-8(fp)
   2f738:	e17fff15 	stw	r5,-4(fp)
   int   error;

   so->so_req = PRU_BIND;
   2f73c:	e0bffe17 	ldw	r2,-8(fp)
   2f740:	00c00084 	movi	r3,2
   2f744:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
   2f748:	e0bffe17 	ldw	r2,-8(fp)
   2f74c:	10800217 	ldw	r2,8(r2)
   2f750:	10800317 	ldw	r2,12(r2)
   2f754:	e13ffe17 	ldw	r4,-8(fp)
   2f758:	000b883a 	mov	r5,zero
   2f75c:	e1bfff17 	ldw	r6,-4(fp)
   2f760:	103ee83a 	callr	r2
   2f764:	e0bffd15 	stw	r2,-12(fp)
   return (error);
   2f768:	e0bffd17 	ldw	r2,-12(fp)
}
   2f76c:	e037883a 	mov	sp,fp
   2f770:	dfc00117 	ldw	ra,4(sp)
   2f774:	df000017 	ldw	fp,0(sp)
   2f778:	dec00204 	addi	sp,sp,8
   2f77c:	f800283a 	ret

0002f780 <solisten>:
 */

int
solisten(struct socket * so, 
   int   backlog)
{
   2f780:	defffb04 	addi	sp,sp,-20
   2f784:	dfc00415 	stw	ra,16(sp)
   2f788:	df000315 	stw	fp,12(sp)
   2f78c:	df000304 	addi	fp,sp,12
   2f790:	e13ffe15 	stw	r4,-8(fp)
   2f794:	e17fff15 	stw	r5,-4(fp)
   int   error;

   so->so_req = PRU_LISTEN;
   2f798:	e0bffe17 	ldw	r2,-8(fp)
   2f79c:	00c000c4 	movi	r3,3
   2f7a0:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so,
   2f7a4:	e0bffe17 	ldw	r2,-8(fp)
   2f7a8:	10800217 	ldw	r2,8(r2)
   2f7ac:	10800317 	ldw	r2,12(r2)
   2f7b0:	e13ffe17 	ldw	r4,-8(fp)
   2f7b4:	000b883a 	mov	r5,zero
   2f7b8:	000d883a 	mov	r6,zero
   2f7bc:	103ee83a 	callr	r2
   2f7c0:	e0bffd15 	stw	r2,-12(fp)
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
   2f7c4:	e0bffd17 	ldw	r2,-12(fp)
   2f7c8:	10000226 	beq	r2,zero,2f7d4 <solisten+0x54>
   {
      return (error);
   2f7cc:	e0bffd17 	ldw	r2,-12(fp)
   2f7d0:	00001a06 	br	2f83c <solisten+0xbc>
   }
   if (so->so_q == 0) 
   2f7d4:	e0bffe17 	ldw	r2,-8(fp)
   2f7d8:	10801d17 	ldw	r2,116(r2)
   2f7dc:	10000b1e 	bne	r2,zero,2f80c <solisten+0x8c>
   {
      so->so_q = so;
   2f7e0:	e0bffe17 	ldw	r2,-8(fp)
   2f7e4:	e0fffe17 	ldw	r3,-8(fp)
   2f7e8:	10c01d15 	stw	r3,116(r2)
      so->so_q0 = so;
   2f7ec:	e0bffe17 	ldw	r2,-8(fp)
   2f7f0:	e0fffe17 	ldw	r3,-8(fp)
   2f7f4:	10c01c15 	stw	r3,112(r2)
      so->so_options |= SO_ACCEPTCONN;
   2f7f8:	e0bffe17 	ldw	r2,-8(fp)
   2f7fc:	10800417 	ldw	r2,16(r2)
   2f800:	10c00094 	ori	r3,r2,2
   2f804:	e0bffe17 	ldw	r2,-8(fp)
   2f808:	10c00415 	stw	r3,16(r2)
   }
   if (backlog < 0)
   2f80c:	e0bfff17 	ldw	r2,-4(fp)
   2f810:	1000010e 	bge	r2,zero,2f818 <solisten+0x98>
      backlog = 0;
   2f814:	e03fff15 	stw	zero,-4(fp)
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
   2f818:	e0bfff17 	ldw	r2,-4(fp)
   2f81c:	10800188 	cmpgei	r2,r2,6
   2f820:	1000021e 	bne	r2,zero,2f82c <solisten+0xac>
   2f824:	e0bfff17 	ldw	r2,-4(fp)
   2f828:	00000106 	br	2f830 <solisten+0xb0>
   2f82c:	00800144 	movi	r2,5
   2f830:	e0fffe17 	ldw	r3,-8(fp)
   2f834:	18801e85 	stb	r2,122(r3)
   return 0;
   2f838:	0005883a 	mov	r2,zero
}
   2f83c:	e037883a 	mov	sp,fp
   2f840:	dfc00117 	ldw	ra,4(sp)
   2f844:	df000017 	ldw	fp,0(sp)
   2f848:	dec00204 	addi	sp,sp,8
   2f84c:	f800283a 	ret

0002f850 <sofree>:
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
   2f850:	defffd04 	addi	sp,sp,-12
   2f854:	dfc00215 	stw	ra,8(sp)
   2f858:	df000115 	stw	fp,4(sp)
   2f85c:	df000104 	addi	fp,sp,4
   2f860:	e13fff15 	stw	r4,-4(fp)
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
   2f864:	e0bfff17 	ldw	r2,-4(fp)
   2f868:	10800117 	ldw	r2,4(r2)
   2f86c:	1000051e 	bne	r2,zero,2f884 <sofree+0x34>
   2f870:	e0bfff17 	ldw	r2,-4(fp)
   2f874:	1080088b 	ldhu	r2,34(r2)
   2f878:	10bfffcc 	andi	r2,r2,65535
   2f87c:	1080004c 	andi	r2,r2,1
   2f880:	1000011e 	bne	r2,zero,2f888 <sofree+0x38>
      return;
   2f884:	00003406 	br	2f958 <sofree+0x108>
   if (so->so_head) 
   2f888:	e0bfff17 	ldw	r2,-4(fp)
   2f88c:	10801b17 	ldw	r2,108(r2)
   2f890:	10000d26 	beq	r2,zero,2f8c8 <sofree+0x78>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
   2f894:	e13fff17 	ldw	r4,-4(fp)
   2f898:	000b883a 	mov	r5,zero
   2f89c:	0031b200 	call	31b20 <soqremque>
   2f8a0:	1000071e 	bne	r2,zero,2f8c0 <sofree+0x70>
   2f8a4:	e13fff17 	ldw	r4,-4(fp)
   2f8a8:	01400044 	movi	r5,1
   2f8ac:	0031b200 	call	31b20 <soqremque>
   2f8b0:	1000031e 	bne	r2,zero,2f8c0 <sofree+0x70>
         panic("sofree");
   2f8b4:	01000174 	movhi	r4,5
   2f8b8:	213b5204 	addi	r4,r4,-4792
   2f8bc:	00267380 	call	26738 <panic>
      so->so_head = 0;
   2f8c0:	e0bfff17 	ldw	r2,-4(fp)
   2f8c4:	10001b15 	stw	zero,108(r2)
   }
   sbrelease(&so->so_snd);
   2f8c8:	e0bfff17 	ldw	r2,-4(fp)
   2f8cc:	10801204 	addi	r2,r2,72
   2f8d0:	1009883a 	mov	r4,r2
   2f8d4:	0031ee00 	call	31ee0 <sbrelease>
   sorflush(so);
   2f8d8:	e13fff17 	ldw	r4,-4(fp)
   2f8dc:	0030b8c0 	call	30b8c <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
   2f8e0:	e0bfff17 	ldw	r2,-4(fp)
   2f8e4:	10800317 	ldw	r2,12(r2)
   2f8e8:	10000426 	beq	r2,zero,2f8fc <sofree+0xac>
	   ip_freemoptions(so->inp_moptions);
   2f8ec:	e0bfff17 	ldw	r2,-4(fp)
   2f8f0:	10800317 	ldw	r2,12(r2)
   2f8f4:	1009883a 	mov	r4,r2
   2f8f8:	00446680 	call	44668 <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
   2f8fc:	e0bfff17 	ldw	r2,-4(fp)
   2f900:	10801f17 	ldw	r2,124(r2)
   2f904:	10000426 	beq	r2,zero,2f918 <sofree+0xc8>
      SOCOPT_FREE(so->so_optsPack);
   2f908:	e0bfff17 	ldw	r2,-4(fp)
   2f90c:	10801f17 	ldw	r2,124(r2)
   2f910:	1009883a 	mov	r4,r2
   2f914:	002bd140 	call	2bd14 <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   2f918:	010001b4 	movhi	r4,6
   2f91c:	2138d804 	addi	r4,r4,-7328
   2f920:	e17fff17 	ldw	r5,-4(fp)
   2f924:	002ab780 	call	2ab78 <qdel>
   
   if (so_evtmap)  
   2f928:	00800174 	movhi	r2,5
   2f92c:	108fe404 	addi	r2,r2,16272
   2f930:	10800003 	ldbu	r2,0(r2)
   2f934:	10803fcc 	andi	r2,r2,255
   2f938:	10000526 	beq	r2,zero,2f950 <sofree+0x100>
      (*so_evtmap_delete) (so);
   2f93c:	00800174 	movhi	r2,5
   2f940:	108fe304 	addi	r2,r2,16268
   2f944:	10800017 	ldw	r2,0(r2)
   2f948:	e13fff17 	ldw	r4,-4(fp)
   2f94c:	103ee83a 	callr	r2
   
   SOC_FREE(so);
   2f950:	e13fff17 	ldw	r4,-4(fp)
   2f954:	002bd140 	call	2bd14 <npfree>
}
   2f958:	e037883a 	mov	sp,fp
   2f95c:	dfc00117 	ldw	ra,4(sp)
   2f960:	df000017 	ldw	fp,0(sp)
   2f964:	dec00204 	addi	sp,sp,8
   2f968:	f800283a 	ret

0002f96c <soclose>:
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
   2f96c:	defff904 	addi	sp,sp,-28
   2f970:	dfc00615 	stw	ra,24(sp)
   2f974:	df000515 	stw	fp,20(sp)
   2f978:	df000504 	addi	fp,sp,20
   2f97c:	e13fff15 	stw	r4,-4(fp)
   int   error =  0;
   2f980:	e03ffb15 	stw	zero,-20(fp)
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
   2f984:	008001b4 	movhi	r2,6
   2f988:	10b8d804 	addi	r2,r2,-7328
   2f98c:	10800017 	ldw	r2,0(r2)
   2f990:	e0bffc15 	stw	r2,-16(fp)
   2f994:	00000706 	br	2f9b4 <soclose+0x48>
   {
      if (so == tmpso)
   2f998:	e0ffff17 	ldw	r3,-4(fp)
   2f99c:	e0bffc17 	ldw	r2,-16(fp)
   2f9a0:	1880011e 	bne	r3,r2,2f9a8 <soclose+0x3c>
         break;
   2f9a4:	00000506 	br	2f9bc <soclose+0x50>
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
   2f9a8:	e0bffc17 	ldw	r2,-16(fp)
   2f9ac:	10800017 	ldw	r2,0(r2)
   2f9b0:	e0bffc15 	stw	r2,-16(fp)
   2f9b4:	e0bffc17 	ldw	r2,-16(fp)
   2f9b8:	103ff71e 	bne	r2,zero,2f998 <__alt_mem_descriptor_memory+0xdefef998>
   {
      if (so == tmpso)
         break;
   }
   if ( tmpso == NULL)
   2f9bc:	e0bffc17 	ldw	r2,-16(fp)
   2f9c0:	1000021e 	bne	r2,zero,2f9cc <soclose+0x60>
      return EINVAL;
   2f9c4:	00800584 	movi	r2,22
   2f9c8:	00009306 	br	2fc18 <soclose+0x2ac>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   2f9cc:	e0bfff17 	ldw	r2,-4(fp)
   2f9d0:	10800417 	ldw	r2,16(r2)
   2f9d4:	1080008c 	andi	r2,r2,2
   2f9d8:	10001226 	beq	r2,zero,2fa24 <soclose+0xb8>
   {
      while (so->so_q0 != so)
   2f9dc:	00000406 	br	2f9f0 <soclose+0x84>
         (void) soabort(so->so_q0);
   2f9e0:	e0bfff17 	ldw	r2,-4(fp)
   2f9e4:	10801c17 	ldw	r2,112(r2)
   2f9e8:	1009883a 	mov	r4,r2
   2f9ec:	002fc2c0 	call	2fc2c <soabort>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
   2f9f0:	e0bfff17 	ldw	r2,-4(fp)
   2f9f4:	10c01c17 	ldw	r3,112(r2)
   2f9f8:	e0bfff17 	ldw	r2,-4(fp)
   2f9fc:	18bff81e 	bne	r3,r2,2f9e0 <__alt_mem_descriptor_memory+0xdefef9e0>
         (void) soabort(so->so_q0);
      while (so->so_q != so)
   2fa00:	00000406 	br	2fa14 <soclose+0xa8>
         (void) soabort(so->so_q);
   2fa04:	e0bfff17 	ldw	r2,-4(fp)
   2fa08:	10801d17 	ldw	r2,116(r2)
   2fa0c:	1009883a 	mov	r4,r2
   2fa10:	002fc2c0 	call	2fc2c <soabort>
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
         (void) soabort(so->so_q0);
      while (so->so_q != so)
   2fa14:	e0bfff17 	ldw	r2,-4(fp)
   2fa18:	10c01d17 	ldw	r3,116(r2)
   2fa1c:	e0bfff17 	ldw	r2,-4(fp)
   2fa20:	18bff81e 	bne	r3,r2,2fa04 <__alt_mem_descriptor_memory+0xdefefa04>
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
   2fa24:	e0bfff17 	ldw	r2,-4(fp)
   2fa28:	10800983 	ldbu	r2,38(r2)
   2fa2c:	10803fcc 	andi	r2,r2,255
   2fa30:	1080201c 	xori	r2,r2,128
   2fa34:	10bfe004 	addi	r2,r2,-128
   2fa38:	10800060 	cmpeqi	r2,r2,1
   2fa3c:	10000c1e 	bne	r2,zero,2fa70 <soclose+0x104>
   { 
      so->so_req = PRU_DETACH;
   2fa40:	e0bfff17 	ldw	r2,-4(fp)
   2fa44:	00c00044 	movi	r3,1
   2fa48:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so,
   2fa4c:	e0bfff17 	ldw	r2,-4(fp)
   2fa50:	10800217 	ldw	r2,8(r2)
   2fa54:	10800317 	ldw	r2,12(r2)
   2fa58:	e13fff17 	ldw	r4,-4(fp)
   2fa5c:	000b883a 	mov	r5,zero
   2fa60:	000d883a 	mov	r6,zero
   2fa64:	103ee83a 	callr	r2
   2fa68:	e0bffb15 	stw	r2,-20(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
   2fa6c:	00005b06 	br	2fbdc <soclose+0x270>
   }

   if (so->so_pcb == 0)
   2fa70:	e0bfff17 	ldw	r2,-4(fp)
   2fa74:	10800117 	ldw	r2,4(r2)
   2fa78:	1000011e 	bne	r2,zero,2fa80 <soclose+0x114>
      goto discard;
   2fa7c:	00005706 	br	2fbdc <soclose+0x270>
   if (so->so_state & SS_ISCONNECTED) 
   2fa80:	e0bfff17 	ldw	r2,-4(fp)
   2fa84:	1080088b 	ldhu	r2,34(r2)
   2fa88:	10bfffcc 	andi	r2,r2,65535
   2fa8c:	1080008c 	andi	r2,r2,2
   2fa90:	10004026 	beq	r2,zero,2fb94 <soclose+0x228>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
   2fa94:	e0bfff17 	ldw	r2,-4(fp)
   2fa98:	1080088b 	ldhu	r2,34(r2)
   2fa9c:	10bfffcc 	andi	r2,r2,65535
   2faa0:	1080020c 	andi	r2,r2,8
   2faa4:	1000061e 	bne	r2,zero,2fac0 <soclose+0x154>
      {
         error = sodisconnect(so);
   2faa8:	e13fff17 	ldw	r4,-4(fp)
   2faac:	002fdcc0 	call	2fdcc <sodisconnect>
   2fab0:	e0bffb15 	stw	r2,-20(fp)
         if (error)
   2fab4:	e0bffb17 	ldw	r2,-20(fp)
   2fab8:	10000126 	beq	r2,zero,2fac0 <soclose+0x154>
            goto drop;
   2fabc:	00003506 	br	2fb94 <soclose+0x228>
      }
      if (so->so_options & SO_LINGER) 
   2fac0:	e0bfff17 	ldw	r2,-4(fp)
   2fac4:	10800417 	ldw	r2,16(r2)
   2fac8:	1080200c 	andi	r2,r2,128
   2facc:	10002626 	beq	r2,zero,2fb68 <soclose+0x1fc>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
   2fad0:	e0bfff17 	ldw	r2,-4(fp)
   2fad4:	1080088b 	ldhu	r2,34(r2)
   2fad8:	10bfffcc 	andi	r2,r2,65535
   2fadc:	1080020c 	andi	r2,r2,8
   2fae0:	10000626 	beq	r2,zero,2fafc <soclose+0x190>
             (so->so_state & SS_NBIO))
   2fae4:	e0bfff17 	ldw	r2,-4(fp)
   2fae8:	1080088b 	ldhu	r2,34(r2)
   2faec:	10bfffcc 	andi	r2,r2,65535
   2faf0:	1080400c 	andi	r2,r2,256
         if (error)
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
   2faf4:	10000126 	beq	r2,zero,2fafc <soclose+0x190>
             (so->so_state & SS_NBIO))
         {
            goto drop;
   2faf8:	00002606 	br	2fb94 <soclose+0x228>
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
   2fafc:	e0bfff17 	ldw	r2,-4(fp)
   2fb00:	1080080b 	ldhu	r2,32(r2)
   2fb04:	10bfffcc 	andi	r2,r2,65535
   2fb08:	10a0001c 	xori	r2,r2,32768
   2fb0c:	10a00004 	addi	r2,r2,-32768
   2fb10:	10c01924 	muli	r3,r2,100
   2fb14:	00800174 	movhi	r2,5
   2fb18:	108fbe04 	addi	r2,r2,16120
   2fb1c:	10800017 	ldw	r2,0(r2)
   2fb20:	1885883a 	add	r2,r3,r2
   2fb24:	e0bffd15 	stw	r2,-12(fp)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
   2fb28:	00000406 	br	2fb3c <soclose+0x1d0>
         {
            tcp_sleep((char *)&so->so_timeo);
   2fb2c:	e0bfff17 	ldw	r2,-4(fp)
   2fb30:	10800904 	addi	r2,r2,36
   2fb34:	1009883a 	mov	r4,r2
   2fb38:	00270240 	call	27024 <tcp_sleep>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
   2fb3c:	e0bfff17 	ldw	r2,-4(fp)
   2fb40:	1080088b 	ldhu	r2,34(r2)
   2fb44:	10bfffcc 	andi	r2,r2,65535
   2fb48:	1080008c 	andi	r2,r2,2
   2fb4c:	10001126 	beq	r2,zero,2fb94 <soclose+0x228>
   2fb50:	00800174 	movhi	r2,5
   2fb54:	108fbe04 	addi	r2,r2,16120
   2fb58:	10c00017 	ldw	r3,0(r2)
   2fb5c:	e0bffd17 	ldw	r2,-12(fp)
   2fb60:	18bff236 	bltu	r3,r2,2fb2c <__alt_mem_descriptor_memory+0xdefefb2c>
   2fb64:	00000b06 	br	2fb94 <soclose+0x228>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
   2fb68:	e0bfff17 	ldw	r2,-4(fp)
   2fb6c:	10801217 	ldw	r2,72(r2)
   2fb70:	10000826 	beq	r2,zero,2fb94 <soclose+0x228>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
   2fb74:	e0bfff17 	ldw	r2,-4(fp)
   2fb78:	1080088b 	ldhu	r2,34(r2)
   2fb7c:	10800054 	ori	r2,r2,1
   2fb80:	1007883a 	mov	r3,r2
   2fb84:	e0bfff17 	ldw	r2,-4(fp)
   2fb88:	10c0088d 	sth	r3,34(r2)
            return 0;
   2fb8c:	0005883a 	mov	r2,zero
   2fb90:	00002106 	br	2fc18 <soclose+0x2ac>
         }
      }
   }
drop:
   if (so->so_pcb) 
   2fb94:	e0bfff17 	ldw	r2,-4(fp)
   2fb98:	10800117 	ldw	r2,4(r2)
   2fb9c:	10000f26 	beq	r2,zero,2fbdc <soclose+0x270>
   {
      int   error2;
      so->so_req = PRU_DETACH;
   2fba0:	e0bfff17 	ldw	r2,-4(fp)
   2fba4:	00c00044 	movi	r3,1
   2fba8:	10c00715 	stw	r3,28(r2)
      error2 = (*so->so_proto->pr_usrreq)(so,
   2fbac:	e0bfff17 	ldw	r2,-4(fp)
   2fbb0:	10800217 	ldw	r2,8(r2)
   2fbb4:	10800317 	ldw	r2,12(r2)
   2fbb8:	e13fff17 	ldw	r4,-4(fp)
   2fbbc:	000b883a 	mov	r5,zero
   2fbc0:	000d883a 	mov	r6,zero
   2fbc4:	103ee83a 	callr	r2
   2fbc8:	e0bffe15 	stw	r2,-8(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
   2fbcc:	e0bffb17 	ldw	r2,-20(fp)
   2fbd0:	1000021e 	bne	r2,zero,2fbdc <soclose+0x270>
         error = error2;
   2fbd4:	e0bffe17 	ldw	r2,-8(fp)
   2fbd8:	e0bffb15 	stw	r2,-20(fp)
   }
discard:
   if (so->so_state & SS_NOFDREF)
   2fbdc:	e0bfff17 	ldw	r2,-4(fp)
   2fbe0:	1080088b 	ldhu	r2,34(r2)
   2fbe4:	10bfffcc 	andi	r2,r2,65535
   2fbe8:	1080004c 	andi	r2,r2,1
   2fbec:	10000126 	beq	r2,zero,2fbf4 <soclose+0x288>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
   2fbf0:	002b0f40 	call	2b0f4 <dtrap>
   }
   so->so_state |= SS_NOFDREF;
   2fbf4:	e0bfff17 	ldw	r2,-4(fp)
   2fbf8:	1080088b 	ldhu	r2,34(r2)
   2fbfc:	10800054 	ori	r2,r2,1
   2fc00:	1007883a 	mov	r3,r2
   2fc04:	e0bfff17 	ldw	r2,-4(fp)
   2fc08:	10c0088d 	sth	r3,34(r2)
   sofree(so);
   2fc0c:	e13fff17 	ldw	r4,-4(fp)
   2fc10:	002f8500 	call	2f850 <sofree>
   return (error);
   2fc14:	e0bffb17 	ldw	r2,-20(fp)
}
   2fc18:	e037883a 	mov	sp,fp
   2fc1c:	dfc00117 	ldw	ra,4(sp)
   2fc20:	df000017 	ldw	fp,0(sp)
   2fc24:	dec00204 	addi	sp,sp,8
   2fc28:	f800283a 	ret

0002fc2c <soabort>:
 * RETURNS: 
 */

int
soabort(struct socket * so)
{
   2fc2c:	defffd04 	addi	sp,sp,-12
   2fc30:	dfc00215 	stw	ra,8(sp)
   2fc34:	df000115 	stw	fp,4(sp)
   2fc38:	df000104 	addi	fp,sp,4
   2fc3c:	e13fff15 	stw	r4,-4(fp)
   so->so_req = PRU_ABORT;
   2fc40:	e0bfff17 	ldw	r2,-4(fp)
   2fc44:	00c00284 	movi	r3,10
   2fc48:	10c00715 	stw	r3,28(r2)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
   2fc4c:	e0bfff17 	ldw	r2,-4(fp)
   2fc50:	10800217 	ldw	r2,8(r2)
   2fc54:	10800317 	ldw	r2,12(r2)
   2fc58:	e13fff17 	ldw	r4,-4(fp)
   2fc5c:	000b883a 	mov	r5,zero
   2fc60:	000d883a 	mov	r6,zero
   2fc64:	103ee83a 	callr	r2
}
   2fc68:	e037883a 	mov	sp,fp
   2fc6c:	dfc00117 	ldw	ra,4(sp)
   2fc70:	df000017 	ldw	fp,0(sp)
   2fc74:	dec00204 	addi	sp,sp,8
   2fc78:	f800283a 	ret

0002fc7c <soaccept>:
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
   2fc7c:	defffb04 	addi	sp,sp,-20
   2fc80:	dfc00415 	stw	ra,16(sp)
   2fc84:	df000315 	stw	fp,12(sp)
   2fc88:	df000304 	addi	fp,sp,12
   2fc8c:	e13ffe15 	stw	r4,-8(fp)
   2fc90:	e17fff15 	stw	r5,-4(fp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
   2fc94:	e0bffe17 	ldw	r2,-8(fp)
   2fc98:	1080088b 	ldhu	r2,34(r2)
   2fc9c:	10bfffcc 	andi	r2,r2,65535
   2fca0:	1080004c 	andi	r2,r2,1
   2fca4:	1000031e 	bne	r2,zero,2fcb4 <soaccept+0x38>
      panic("soaccept");
   2fca8:	01000174 	movhi	r4,5
   2fcac:	213b5404 	addi	r4,r4,-4784
   2fcb0:	00267380 	call	26738 <panic>
   so->so_state &= ~SS_NOFDREF;
   2fcb4:	e0bffe17 	ldw	r2,-8(fp)
   2fcb8:	10c0088b 	ldhu	r3,34(r2)
   2fcbc:	00bfff84 	movi	r2,-2
   2fcc0:	1884703a 	and	r2,r3,r2
   2fcc4:	1007883a 	mov	r3,r2
   2fcc8:	e0bffe17 	ldw	r2,-8(fp)
   2fccc:	10c0088d 	sth	r3,34(r2)
   so->so_req = PRU_ACCEPT;
   2fcd0:	e0bffe17 	ldw	r2,-8(fp)
   2fcd4:	00c00144 	movi	r3,5
   2fcd8:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
   2fcdc:	e0bffe17 	ldw	r2,-8(fp)
   2fce0:	10800217 	ldw	r2,8(r2)
   2fce4:	10800317 	ldw	r2,12(r2)
   2fce8:	e13ffe17 	ldw	r4,-8(fp)
   2fcec:	000b883a 	mov	r5,zero
   2fcf0:	e1bfff17 	ldw	r6,-4(fp)
   2fcf4:	103ee83a 	callr	r2
   2fcf8:	e0bffd15 	stw	r2,-12(fp)

   return (error);
   2fcfc:	e0bffd17 	ldw	r2,-12(fp)
}
   2fd00:	e037883a 	mov	sp,fp
   2fd04:	dfc00117 	ldw	ra,4(sp)
   2fd08:	df000017 	ldw	fp,0(sp)
   2fd0c:	dec00204 	addi	sp,sp,8
   2fd10:	f800283a 	ret

0002fd14 <soconnect>:
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
   2fd14:	defffb04 	addi	sp,sp,-20
   2fd18:	dfc00415 	stw	ra,16(sp)
   2fd1c:	df000315 	stw	fp,12(sp)
   2fd20:	df000304 	addi	fp,sp,12
   2fd24:	e13ffe15 	stw	r4,-8(fp)
   2fd28:	e17fff15 	stw	r5,-4(fp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
   2fd2c:	e0bffe17 	ldw	r2,-8(fp)
   2fd30:	10800417 	ldw	r2,16(r2)
   2fd34:	1080008c 	andi	r2,r2,2
   2fd38:	10000226 	beq	r2,zero,2fd44 <soconnect+0x30>
      return (EOPNOTSUPP);
   2fd3c:	008017c4 	movi	r2,95
   2fd40:	00001d06 	br	2fdb8 <soconnect+0xa4>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
   2fd44:	e0bffe17 	ldw	r2,-8(fp)
   2fd48:	1080088b 	ldhu	r2,34(r2)
   2fd4c:	10bfffcc 	andi	r2,r2,65535
   2fd50:	1080018c 	andi	r2,r2,6
   2fd54:	10000c26 	beq	r2,zero,2fd88 <soconnect+0x74>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
   2fd58:	e0bffe17 	ldw	r2,-8(fp)
   2fd5c:	10800217 	ldw	r2,8(r2)
   2fd60:	1080010b 	ldhu	r2,4(r2)
   2fd64:	10bfffcc 	andi	r2,r2,65535
   2fd68:	1080010c 	andi	r2,r2,4
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
   2fd6c:	1000031e 	bne	r2,zero,2fd7c <soconnect+0x68>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
       (sodisconnect(so) != 0)))
   2fd70:	e13ffe17 	ldw	r4,-8(fp)
   2fd74:	002fdcc0 	call	2fdcc <sodisconnect>
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
   2fd78:	10000326 	beq	r2,zero,2fd88 <soconnect+0x74>
       (sodisconnect(so) != 0)))
   {
      error = EISCONN;
   2fd7c:	00801fc4 	movi	r2,127
   2fd80:	e0bffd15 	stw	r2,-12(fp)
   2fd84:	00000b06 	br	2fdb4 <soconnect+0xa0>
   }
   else
   {
      so->so_req = PRU_CONNECT;
   2fd88:	e0bffe17 	ldw	r2,-8(fp)
   2fd8c:	00c00104 	movi	r3,4
   2fd90:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
   2fd94:	e0bffe17 	ldw	r2,-8(fp)
   2fd98:	10800217 	ldw	r2,8(r2)
   2fd9c:	10800317 	ldw	r2,12(r2)
   2fda0:	e13ffe17 	ldw	r4,-8(fp)
   2fda4:	000b883a 	mov	r5,zero
   2fda8:	e1bfff17 	ldw	r6,-4(fp)
   2fdac:	103ee83a 	callr	r2
   2fdb0:	e0bffd15 	stw	r2,-12(fp)
   }
   return error;
   2fdb4:	e0bffd17 	ldw	r2,-12(fp)
}
   2fdb8:	e037883a 	mov	sp,fp
   2fdbc:	dfc00117 	ldw	ra,4(sp)
   2fdc0:	df000017 	ldw	fp,0(sp)
   2fdc4:	dec00204 	addi	sp,sp,8
   2fdc8:	f800283a 	ret

0002fdcc <sodisconnect>:
 * RETURNS: 
 */

int
sodisconnect(struct socket * so)
{
   2fdcc:	defffc04 	addi	sp,sp,-16
   2fdd0:	dfc00315 	stw	ra,12(sp)
   2fdd4:	df000215 	stw	fp,8(sp)
   2fdd8:	df000204 	addi	fp,sp,8
   2fddc:	e13fff15 	stw	r4,-4(fp)
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
   2fde0:	e0bfff17 	ldw	r2,-4(fp)
   2fde4:	1080088b 	ldhu	r2,34(r2)
   2fde8:	10bfffcc 	andi	r2,r2,65535
   2fdec:	1080008c 	andi	r2,r2,2
   2fdf0:	1000031e 	bne	r2,zero,2fe00 <sodisconnect+0x34>
   {
      error = ENOTCONN;
   2fdf4:	00802004 	movi	r2,128
   2fdf8:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
   2fdfc:	00001306 	br	2fe4c <sodisconnect+0x80>
   }
   if (so->so_state & SS_ISDISCONNECTING) 
   2fe00:	e0bfff17 	ldw	r2,-4(fp)
   2fe04:	1080088b 	ldhu	r2,34(r2)
   2fe08:	10bfffcc 	andi	r2,r2,65535
   2fe0c:	1080020c 	andi	r2,r2,8
   2fe10:	10000326 	beq	r2,zero,2fe20 <sodisconnect+0x54>
   {
      error = EALREADY;
   2fe14:	00801e04 	movi	r2,120
   2fe18:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
   2fe1c:	00000b06 	br	2fe4c <sodisconnect+0x80>
   }
   so->so_req = PRU_DISCONNECT;
   2fe20:	e0bfff17 	ldw	r2,-4(fp)
   2fe24:	00c00184 	movi	r3,6
   2fe28:	10c00715 	stw	r3,28(r2)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
   2fe2c:	e0bfff17 	ldw	r2,-4(fp)
   2fe30:	10800217 	ldw	r2,8(r2)
   2fe34:	10800317 	ldw	r2,12(r2)
   2fe38:	e13fff17 	ldw	r4,-4(fp)
   2fe3c:	000b883a 	mov	r5,zero
   2fe40:	000d883a 	mov	r6,zero
   2fe44:	103ee83a 	callr	r2
   2fe48:	e0bffe15 	stw	r2,-8(fp)

bad:
   return (error);
   2fe4c:	e0bffe17 	ldw	r2,-8(fp)
}
   2fe50:	e037883a 	mov	sp,fp
   2fe54:	dfc00117 	ldw	ra,4(sp)
   2fe58:	df000017 	ldw	fp,0(sp)
   2fe5c:	dec00204 	addi	sp,sp,8
   2fe60:	f800283a 	ret

0002fe64 <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
   2fe64:	defff204 	addi	sp,sp,-56
   2fe68:	dfc00d15 	stw	ra,52(sp)
   2fe6c:	df000c15 	stw	fp,48(sp)
   2fe70:	df000c04 	addi	fp,sp,48
   2fe74:	e13ffc15 	stw	r4,-16(fp)
   2fe78:	e17ffd15 	stw	r5,-12(fp)
   2fe7c:	e1bffe15 	stw	r6,-8(fp)
   2fe80:	e1ffff15 	stw	r7,-4(fp)
   struct mbuf *head = (struct mbuf *)NULL;
   2fe84:	e03ff415 	stw	zero,-48(fp)
   struct mbuf *m;
   int   space;
   int   resid;
   int   len;
   int   error = 0;
   2fe88:	e03ff815 	stw	zero,-32(fp)
   int   dontroute;
   int   first = 1;
   2fe8c:	00800044 	movi	r2,1
   2fe90:	e0bff915 	stw	r2,-28(fp)

   resid = *data_length;
   2fe94:	e0bfff17 	ldw	r2,-4(fp)
   2fe98:	10800017 	ldw	r2,0(r2)
   2fe9c:	e0bff715 	stw	r2,-36(fp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
   2fea0:	e0bff717 	ldw	r2,-36(fp)
   2fea4:	1000020e 	bge	r2,zero,2feb0 <sosend+0x4c>
      return (EINVAL);
   2fea8:	00800584 	movi	r2,22
   2feac:	00013b06 	br	3039c <sosend+0x538>

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
   2feb0:	e0bffc17 	ldw	r2,-16(fp)
   2feb4:	10800217 	ldw	r2,8(r2)
   2feb8:	1080010b 	ldhu	r2,4(r2)
   2febc:	10bfffcc 	andi	r2,r2,65535
   2fec0:	1080004c 	andi	r2,r2,1
   2fec4:	10000726 	beq	r2,zero,2fee4 <sosend+0x80>
   2fec8:	e0bffc17 	ldw	r2,-16(fp)
   2fecc:	10801317 	ldw	r2,76(r2)
   2fed0:	1007883a 	mov	r3,r2
   2fed4:	e0bff717 	ldw	r2,-36(fp)
   2fed8:	1880020e 	bge	r3,r2,2fee4 <sosend+0x80>
      return (EMSGSIZE);
   2fedc:	00801e84 	movi	r2,122
   2fee0:	00012e06 	br	3039c <sosend+0x538>

   dontroute = (flags & MSG_DONTROUTE) &&
   2fee4:	e0800217 	ldw	r2,8(fp)
   2fee8:	1080010c 	andi	r2,r2,4
               ((so->so_options & SO_DONTROUTE) == 0) &&
   2feec:	10000c26 	beq	r2,zero,2ff20 <sosend+0xbc>
   2fef0:	e0bffc17 	ldw	r2,-16(fp)
   2fef4:	10800417 	ldw	r2,16(r2)
   2fef8:	1080040c 	andi	r2,r2,16
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
      return (EMSGSIZE);

   dontroute = (flags & MSG_DONTROUTE) &&
   2fefc:	1000081e 	bne	r2,zero,2ff20 <sosend+0xbc>
               ((so->so_options & SO_DONTROUTE) == 0) &&
               (so->so_proto->pr_flags & PR_ATOMIC);
   2ff00:	e0bffc17 	ldw	r2,-16(fp)
   2ff04:	10800217 	ldw	r2,8(r2)
   2ff08:	1080010b 	ldhu	r2,4(r2)
   2ff0c:	10bfffcc 	andi	r2,r2,65535
   2ff10:	1080004c 	andi	r2,r2,1

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
      return (EMSGSIZE);

   dontroute = (flags & MSG_DONTROUTE) &&
               ((so->so_options & SO_DONTROUTE) == 0) &&
   2ff14:	10000226 	beq	r2,zero,2ff20 <sosend+0xbc>
   2ff18:	00800044 	movi	r2,1
   2ff1c:	00000106 	br	2ff24 <sosend+0xc0>
   2ff20:	0005883a 	mov	r2,zero
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
      return (EMSGSIZE);

   dontroute = (flags & MSG_DONTROUTE) &&
   2ff24:	e0bffa15 	stw	r2,-24(fp)
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
   2ff28:	00000406 	br	2ff3c <sosend+0xd8>
   2ff2c:	e0bffc17 	ldw	r2,-16(fp)
   2ff30:	10801904 	addi	r2,r2,100
   2ff34:	1009883a 	mov	r4,r2
   2ff38:	00270240 	call	27024 <tcp_sleep>
   2ff3c:	e0bffc17 	ldw	r2,-16(fp)
   2ff40:	1080190b 	ldhu	r2,100(r2)
   2ff44:	10bfffcc 	andi	r2,r2,65535
   2ff48:	1080004c 	andi	r2,r2,1
   2ff4c:	103ff71e 	bne	r2,zero,2ff2c <__alt_mem_descriptor_memory+0xdefeff2c>
   2ff50:	e0bffc17 	ldw	r2,-16(fp)
   2ff54:	1080190b 	ldhu	r2,100(r2)
   2ff58:	10800054 	ori	r2,r2,1
   2ff5c:	1007883a 	mov	r3,r2
   2ff60:	e0bffc17 	ldw	r2,-16(fp)
   2ff64:	10c0190d 	sth	r3,100(r2)
   do 
   {
      if (so->so_error) 
   2ff68:	e0bffc17 	ldw	r2,-16(fp)
   2ff6c:	10800617 	ldw	r2,24(r2)
   2ff70:	10000626 	beq	r2,zero,2ff8c <sosend+0x128>
      {
         error = so->so_error;
   2ff74:	e0bffc17 	ldw	r2,-16(fp)
   2ff78:	10800617 	ldw	r2,24(r2)
   2ff7c:	e0bff815 	stw	r2,-32(fp)
         so->so_error = 0;          /* ??? */
   2ff80:	e0bffc17 	ldw	r2,-16(fp)
   2ff84:	10000615 	stw	zero,24(r2)
         goto release;
   2ff88:	0000f406 	br	3035c <sosend+0x4f8>
      }
      if (so->so_state & SS_CANTSENDMORE)
   2ff8c:	e0bffc17 	ldw	r2,-16(fp)
   2ff90:	1080088b 	ldhu	r2,34(r2)
   2ff94:	10bfffcc 	andi	r2,r2,65535
   2ff98:	1080040c 	andi	r2,r2,16
   2ff9c:	10000326 	beq	r2,zero,2ffac <sosend+0x148>
         snderr(EPIPE);
   2ffa0:	00800804 	movi	r2,32
   2ffa4:	e0bff815 	stw	r2,-32(fp)
   2ffa8:	0000ec06 	br	3035c <sosend+0x4f8>
      if ((so->so_state & SS_ISCONNECTED) == 0) 
   2ffac:	e0bffc17 	ldw	r2,-16(fp)
   2ffb0:	1080088b 	ldhu	r2,34(r2)
   2ffb4:	10bfffcc 	andi	r2,r2,65535
   2ffb8:	1080008c 	andi	r2,r2,2
   2ffbc:	10000e1e 	bne	r2,zero,2fff8 <sosend+0x194>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
   2ffc0:	e0bffc17 	ldw	r2,-16(fp)
   2ffc4:	10800217 	ldw	r2,8(r2)
   2ffc8:	1080010b 	ldhu	r2,4(r2)
   2ffcc:	10bfffcc 	andi	r2,r2,65535
   2ffd0:	1080010c 	andi	r2,r2,4
   2ffd4:	10000326 	beq	r2,zero,2ffe4 <sosend+0x180>
            snderr(ENOTCONN);
   2ffd8:	00802004 	movi	r2,128
   2ffdc:	e0bff815 	stw	r2,-32(fp)
   2ffe0:	0000de06 	br	3035c <sosend+0x4f8>
         if (nam == 0)
   2ffe4:	e0bffd17 	ldw	r2,-12(fp)
   2ffe8:	1000031e 	bne	r2,zero,2fff8 <sosend+0x194>
            snderr(EDESTADDRREQ);
   2ffec:	00801e44 	movi	r2,121
   2fff0:	e0bff815 	stw	r2,-32(fp)
   2fff4:	0000d906 	br	3035c <sosend+0x4f8>
      }
      if (flags & MSG_OOB)
   2fff8:	e0800217 	ldw	r2,8(fp)
   2fffc:	1080004c 	andi	r2,r2,1
   30000:	10000326 	beq	r2,zero,30010 <sosend+0x1ac>
         space = 1024;
   30004:	00810004 	movi	r2,1024
   30008:	e0bff615 	stw	r2,-40(fp)
   3000c:	00004806 	br	30130 <sosend+0x2cc>
      else 
      {
         space = (int)sbspace(&so->so_snd);
   30010:	e0bffc17 	ldw	r2,-16(fp)
   30014:	10801317 	ldw	r2,76(r2)
   30018:	1007883a 	mov	r3,r2
   3001c:	e0bffc17 	ldw	r2,-16(fp)
   30020:	10801217 	ldw	r2,72(r2)
   30024:	1885c83a 	sub	r2,r3,r2
   30028:	10000616 	blt	r2,zero,30044 <sosend+0x1e0>
   3002c:	e0bffc17 	ldw	r2,-16(fp)
   30030:	10c01317 	ldw	r3,76(r2)
   30034:	e0bffc17 	ldw	r2,-16(fp)
   30038:	10801217 	ldw	r2,72(r2)
   3003c:	1885c83a 	sub	r2,r3,r2
   30040:	00000106 	br	30048 <sosend+0x1e4>
   30044:	0005883a 	mov	r2,zero
   30048:	e0bff615 	stw	r2,-40(fp)
         if ((sosendallatonce(so) && (space < resid)) ||
   3004c:	e0bffc17 	ldw	r2,-16(fp)
   30050:	10800217 	ldw	r2,8(r2)
   30054:	1080010b 	ldhu	r2,4(r2)
   30058:	10bfffcc 	andi	r2,r2,65535
   3005c:	1080004c 	andi	r2,r2,1
   30060:	10000326 	beq	r2,zero,30070 <sosend+0x20c>
   30064:	e0fff617 	ldw	r3,-40(fp)
   30068:	e0bff717 	ldw	r2,-36(fp)
   3006c:	18801216 	blt	r3,r2,300b8 <sosend+0x254>
   30070:	e0bff717 	ldw	r2,-36(fp)
   30074:	10815e10 	cmplti	r2,r2,1400
   30078:	10002d1e 	bne	r2,zero,30130 <sosend+0x2cc>
             ((resid >= CLBYTES) && (space < CLBYTES) &&
   3007c:	e0bff617 	ldw	r2,-40(fp)
   30080:	10815e08 	cmpgei	r2,r2,1400
   30084:	10002a1e 	bne	r2,zero,30130 <sosend+0x2cc>
              (so->so_snd.sb_cc >= CLBYTES) &&
   30088:	e0bffc17 	ldw	r2,-16(fp)
   3008c:	10801217 	ldw	r2,72(r2)
         space = 1024;
      else 
      {
         space = (int)sbspace(&so->so_snd);
         if ((sosendallatonce(so) && (space < resid)) ||
             ((resid >= CLBYTES) && (space < CLBYTES) &&
   30090:	10815e30 	cmpltui	r2,r2,1400
   30094:	1000261e 	bne	r2,zero,30130 <sosend+0x2cc>
              (so->so_snd.sb_cc >= CLBYTES) &&
              ((so->so_state & SS_NBIO) == 0) &&
   30098:	e0bffc17 	ldw	r2,-16(fp)
   3009c:	1080088b 	ldhu	r2,34(r2)
   300a0:	10bfffcc 	andi	r2,r2,65535
   300a4:	1080400c 	andi	r2,r2,256
      else 
      {
         space = (int)sbspace(&so->so_snd);
         if ((sosendallatonce(so) && (space < resid)) ||
             ((resid >= CLBYTES) && (space < CLBYTES) &&
              (so->so_snd.sb_cc >= CLBYTES) &&
   300a8:	1000211e 	bne	r2,zero,30130 <sosend+0x2cc>
              ((so->so_state & SS_NBIO) == 0) &&
              ((flags & MSG_DONTWAIT) == 0)))
   300ac:	e0800217 	ldw	r2,8(fp)
   300b0:	1080080c 	andi	r2,r2,32
      {
         space = (int)sbspace(&so->so_snd);
         if ((sosendallatonce(so) && (space < resid)) ||
             ((resid >= CLBYTES) && (space < CLBYTES) &&
              (so->so_snd.sb_cc >= CLBYTES) &&
              ((so->so_state & SS_NBIO) == 0) &&
   300b4:	10001e1e 	bne	r2,zero,30130 <sosend+0x2cc>
              ((flags & MSG_DONTWAIT) == 0)))
         {
            if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
   300b8:	e0bffc17 	ldw	r2,-16(fp)
   300bc:	1080088b 	ldhu	r2,34(r2)
   300c0:	10bfffcc 	andi	r2,r2,65535
   300c4:	1080400c 	andi	r2,r2,256
   300c8:	1000031e 	bne	r2,zero,300d8 <sosend+0x274>
   300cc:	e0800217 	ldw	r2,8(fp)
   300d0:	1080080c 	andi	r2,r2,32
   300d4:	10000626 	beq	r2,zero,300f0 <sosend+0x28c>
            {
               if (first)
   300d8:	e0bff917 	ldw	r2,-28(fp)
   300dc:	10000326 	beq	r2,zero,300ec <sosend+0x288>
                  error = EWOULDBLOCK;
   300e0:	008002c4 	movi	r2,11
   300e4:	e0bff815 	stw	r2,-32(fp)
               goto release;
   300e8:	00009c06 	br	3035c <sosend+0x4f8>
   300ec:	00009b06 	br	3035c <sosend+0x4f8>
            }
            sbunlock(&so->so_snd);
   300f0:	e0bffc17 	ldw	r2,-16(fp)
   300f4:	10c0190b 	ldhu	r3,100(r2)
   300f8:	00bfff84 	movi	r2,-2
   300fc:	1884703a 	and	r2,r3,r2
   30100:	1007883a 	mov	r3,r2
   30104:	e0bffc17 	ldw	r2,-16(fp)
   30108:	10c0190d 	sth	r3,100(r2)
   3010c:	e0bffc17 	ldw	r2,-16(fp)
   30110:	10801904 	addi	r2,r2,100
   30114:	1009883a 	mov	r4,r2
   30118:	00271c80 	call	271c8 <tcp_wakeup>
            sbwait(&so->so_snd);
   3011c:	e0bffc17 	ldw	r2,-16(fp)
   30120:	10801204 	addi	r2,r2,72
   30124:	1009883a 	mov	r4,r2
   30128:	0031d0c0 	call	31d0c <sbwait>
            goto restart;
   3012c:	003f7e06 	br	2ff28 <__alt_mem_descriptor_memory+0xdefeff28>
         }
      }
      if ( space <= 0 ) 
   30130:	e0bff617 	ldw	r2,-40(fp)
   30134:	00801e16 	blt	zero,r2,301b0 <sosend+0x34c>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
   30138:	e0bffc17 	ldw	r2,-16(fp)
   3013c:	1080088b 	ldhu	r2,34(r2)
   30140:	10bfffcc 	andi	r2,r2,65535
   30144:	1080400c 	andi	r2,r2,256
   30148:	1000031e 	bne	r2,zero,30158 <sosend+0x2f4>
   3014c:	e0800217 	ldw	r2,8(fp)
   30150:	1080080c 	andi	r2,r2,32
   30154:	10000626 	beq	r2,zero,30170 <sosend+0x30c>
         {
            if (first)     /* report first error */
   30158:	e0bff917 	ldw	r2,-28(fp)
   3015c:	10000326 	beq	r2,zero,3016c <sosend+0x308>
               error = EWOULDBLOCK;
   30160:	008002c4 	movi	r2,11
   30164:	e0bff815 	stw	r2,-32(fp)
            goto release;
   30168:	00007c06 	br	3035c <sosend+0x4f8>
   3016c:	00007b06 	br	3035c <sosend+0x4f8>
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
   30170:	e0bffc17 	ldw	r2,-16(fp)
   30174:	10c0190b 	ldhu	r3,100(r2)
   30178:	00bfff84 	movi	r2,-2
   3017c:	1884703a 	and	r2,r3,r2
   30180:	1007883a 	mov	r3,r2
   30184:	e0bffc17 	ldw	r2,-16(fp)
   30188:	10c0190d 	sth	r3,100(r2)
   3018c:	e0bffc17 	ldw	r2,-16(fp)
   30190:	10801904 	addi	r2,r2,100
   30194:	1009883a 	mov	r4,r2
   30198:	00271c80 	call	271c8 <tcp_wakeup>
         sbwait(&so->so_snd);
   3019c:	e0bffc17 	ldw	r2,-16(fp)
   301a0:	10801204 	addi	r2,r2,72
   301a4:	1009883a 	mov	r4,r2
   301a8:	0031d0c0 	call	31d0c <sbwait>
         goto restart;
   301ac:	003f5e06 	br	2ff28 <__alt_mem_descriptor_memory+0xdefeff28>
      }

      while (space > 0) 
   301b0:	00004306 	br	302c0 <sosend+0x45c>
      {
         len = resid;
   301b4:	e0bff717 	ldw	r2,-36(fp)
   301b8:	e0bffb15 	stw	r2,-20(fp)
         if ( so->so_type == SOCK_STREAM )
   301bc:	e0bffc17 	ldw	r2,-16(fp)
   301c0:	10800983 	ldbu	r2,38(r2)
   301c4:	10803fcc 	andi	r2,r2,255
   301c8:	1080201c 	xori	r2,r2,128
   301cc:	10bfe004 	addi	r2,r2,-128
   301d0:	10800058 	cmpnei	r2,r2,1
   301d4:	1000171e 	bne	r2,zero,30234 <sosend+0x3d0>
         {
            m = m_getwithdata(MT_TXDATA, len);
   301d8:	01000084 	movi	r4,2
   301dc:	e17ffb17 	ldw	r5,-20(fp)
   301e0:	002bf0c0 	call	2bf0c <m_getnbuf>
   301e4:	e0bff515 	stw	r2,-44(fp)
            if (!m)   
   301e8:	e0bff517 	ldw	r2,-44(fp)
   301ec:	1000031e 	bne	r2,zero,301fc <sosend+0x398>
               snderr(ENOBUFS);
   301f0:	00801a44 	movi	r2,105
   301f4:	e0bff815 	stw	r2,-32(fp)
   301f8:	00005806 	br	3035c <sosend+0x4f8>
            MEMCPY(m->m_data, data, len);
   301fc:	e0bff517 	ldw	r2,-44(fp)
   30200:	10c00317 	ldw	r3,12(r2)
   30204:	e0bffb17 	ldw	r2,-20(fp)
   30208:	1809883a 	mov	r4,r3
   3020c:	e17ffe17 	ldw	r5,-8(fp)
   30210:	100d883a 	mov	r6,r2
   30214:	0007c900 	call	7c90 <memcpy>
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
   30218:	e0bffc17 	ldw	r2,-16(fp)
   3021c:	1080190b 	ldhu	r2,100(r2)
   30220:	10802014 	ori	r2,r2,128
   30224:	1007883a 	mov	r3,r2
   30228:	e0bffc17 	ldw	r2,-16(fp)
   3022c:	10c0190d 	sth	r3,100(r2)
   30230:	00000706 	br	30250 <sosend+0x3ec>
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
   30234:	01000084 	movi	r4,2
   30238:	000b883a 	mov	r5,zero
   3023c:	002bf0c0 	call	2bf0c <m_getnbuf>
   30240:	e0bff515 	stw	r2,-44(fp)
            m->m_data = data;
   30244:	e0bff517 	ldw	r2,-44(fp)
   30248:	e0fffe17 	ldw	r3,-8(fp)
   3024c:	10c00315 	stw	r3,12(r2)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
   30250:	e0bfff17 	ldw	r2,-4(fp)
   30254:	10c00017 	ldw	r3,0(r2)
   30258:	e0bffb17 	ldw	r2,-20(fp)
   3025c:	1887c83a 	sub	r3,r3,r2
   30260:	e0bfff17 	ldw	r2,-4(fp)
   30264:	10c00015 	stw	r3,0(r2)
         resid -= len;
   30268:	e0fff717 	ldw	r3,-36(fp)
   3026c:	e0bffb17 	ldw	r2,-20(fp)
   30270:	1885c83a 	sub	r2,r3,r2
   30274:	e0bff715 	stw	r2,-36(fp)
         data += len;
   30278:	e0bffb17 	ldw	r2,-20(fp)
   3027c:	e0fffe17 	ldw	r3,-8(fp)
   30280:	1885883a 	add	r2,r3,r2
   30284:	e0bffe15 	stw	r2,-8(fp)
         m->m_len = len;
   30288:	e0fffb17 	ldw	r3,-20(fp)
   3028c:	e0bff517 	ldw	r2,-44(fp)
   30290:	10c00215 	stw	r3,8(r2)
         if (head == (struct mbuf *)NULL)
   30294:	e0bff417 	ldw	r2,-48(fp)
   30298:	1000021e 	bne	r2,zero,302a4 <sosend+0x440>
            head = m;
   3029c:	e0bff517 	ldw	r2,-44(fp)
   302a0:	e0bff415 	stw	r2,-48(fp)
         if (error)
   302a4:	e0bff817 	ldw	r2,-32(fp)
   302a8:	10000126 	beq	r2,zero,302b0 <sosend+0x44c>
            goto release;
   302ac:	00002b06 	br	3035c <sosend+0x4f8>
         if (*data_length <= 0)
   302b0:	e0bfff17 	ldw	r2,-4(fp)
   302b4:	10800017 	ldw	r2,0(r2)
   302b8:	00800116 	blt	zero,r2,302c0 <sosend+0x45c>
            break;
   302bc:	00000206 	br	302c8 <sosend+0x464>
         sbunlock(&so->so_snd);
         sbwait(&so->so_snd);
         goto restart;
      }

      while (space > 0) 
   302c0:	e0bff617 	ldw	r2,-40(fp)
   302c4:	00bfbb16 	blt	zero,r2,301b4 <__alt_mem_descriptor_memory+0xdeff01b4>
            goto release;
         if (*data_length <= 0)
            break;
      }

      if (dontroute)
   302c8:	e0bffa17 	ldw	r2,-24(fp)
   302cc:	10000526 	beq	r2,zero,302e4 <sosend+0x480>
         so->so_options |= SO_DONTROUTE;
   302d0:	e0bffc17 	ldw	r2,-16(fp)
   302d4:	10800417 	ldw	r2,16(r2)
   302d8:	10c00414 	ori	r3,r2,16
   302dc:	e0bffc17 	ldw	r2,-16(fp)
   302e0:	10c00415 	stw	r3,16(r2)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
   302e4:	e0800217 	ldw	r2,8(fp)
   302e8:	1080004c 	andi	r2,r2,1
   302ec:	10000226 	beq	r2,zero,302f8 <sosend+0x494>
   302f0:	00800384 	movi	r2,14
   302f4:	00000106 	br	302fc <sosend+0x498>
   302f8:	00800244 	movi	r2,9
   302fc:	e0fffc17 	ldw	r3,-16(fp)
   30300:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
   30304:	e0bffc17 	ldw	r2,-16(fp)
   30308:	10800217 	ldw	r2,8(r2)
   3030c:	10800317 	ldw	r2,12(r2)
   30310:	e13ffc17 	ldw	r4,-16(fp)
   30314:	e17ff417 	ldw	r5,-48(fp)
   30318:	e1bffd17 	ldw	r6,-12(fp)
   3031c:	103ee83a 	callr	r2
   30320:	e0bff815 	stw	r2,-32(fp)

      if (dontroute)
   30324:	e0bffa17 	ldw	r2,-24(fp)
   30328:	10000626 	beq	r2,zero,30344 <sosend+0x4e0>
         so->so_options &= ~SO_DONTROUTE;
   3032c:	e0bffc17 	ldw	r2,-16(fp)
   30330:	10c00417 	ldw	r3,16(r2)
   30334:	00bffbc4 	movi	r2,-17
   30338:	1886703a 	and	r3,r3,r2
   3033c:	e0bffc17 	ldw	r2,-16(fp)
   30340:	10c00415 	stw	r3,16(r2)

      head = (struct mbuf *)NULL;
   30344:	e03ff415 	stw	zero,-48(fp)
      first = 0;
   30348:	e03ff915 	stw	zero,-28(fp)
   } while ((resid != 0) && (error == 0));
   3034c:	e0bff717 	ldw	r2,-36(fp)
   30350:	10000226 	beq	r2,zero,3035c <sosend+0x4f8>
   30354:	e0bff817 	ldw	r2,-32(fp)
   30358:	103f0326 	beq	r2,zero,2ff68 <__alt_mem_descriptor_memory+0xdefeff68>

release:
   sbunlock(&so->so_snd);  
   3035c:	e0bffc17 	ldw	r2,-16(fp)
   30360:	10c0190b 	ldhu	r3,100(r2)
   30364:	00bfff84 	movi	r2,-2
   30368:	1884703a 	and	r2,r3,r2
   3036c:	1007883a 	mov	r3,r2
   30370:	e0bffc17 	ldw	r2,-16(fp)
   30374:	10c0190d 	sth	r3,100(r2)
   30378:	e0bffc17 	ldw	r2,-16(fp)
   3037c:	10801904 	addi	r2,r2,100
   30380:	1009883a 	mov	r4,r2
   30384:	00271c80 	call	271c8 <tcp_wakeup>
   if (head)
   30388:	e0bff417 	ldw	r2,-48(fp)
   3038c:	10000226 	beq	r2,zero,30398 <sosend+0x534>
      m_freem(head);
   30390:	e13ff417 	ldw	r4,-48(fp)
   30394:	002c1a40 	call	2c1a4 <m_freem>
   return error;
   30398:	e0bff817 	ldw	r2,-32(fp)
}
   3039c:	e037883a 	mov	sp,fp
   303a0:	dfc00117 	ldw	ra,4(sp)
   303a4:	df000017 	ldw	fp,0(sp)
   303a8:	dec00204 	addi	sp,sp,8
   303ac:	f800283a 	ret

000303b0 <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
   303b0:	defff204 	addi	sp,sp,-56
   303b4:	dfc00d15 	stw	ra,52(sp)
   303b8:	df000c15 	stw	fp,48(sp)
   303bc:	df000c04 	addi	fp,sp,48
   303c0:	e13ffc15 	stw	r4,-16(fp)
   303c4:	e17ffd15 	stw	r5,-12(fp)
   303c8:	e1bffe15 	stw	r6,-8(fp)
   303cc:	e1ffff15 	stw	r7,-4(fp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
   303d0:	e03ff615 	stw	zero,-40(fp)
   int   offset;
   struct protosw *  pr =  so->so_proto;
   303d4:	e0bffc17 	ldw	r2,-16(fp)
   303d8:	10800217 	ldw	r2,8(r2)
   303dc:	e0bffa15 	stw	r2,-24(fp)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
   303e0:	e0bffd17 	ldw	r2,-12(fp)
   303e4:	10000226 	beq	r2,zero,303f0 <soreceive+0x40>
      *aname = 0;
   303e8:	e0bffd17 	ldw	r2,-12(fp)
   303ec:	10000015 	stw	zero,0(r2)
   if (flags & MSG_OOB) 
   303f0:	e0800217 	ldw	r2,8(fp)
   303f4:	1080004c 	andi	r2,r2,1
   303f8:	10004126 	beq	r2,zero,30500 <soreceive+0x150>
   {
      m = m_get (M_WAIT, MT_RXDATA);
   303fc:	01000044 	movi	r4,1
   30400:	000b883a 	mov	r5,zero
   30404:	002bf0c0 	call	2bf0c <m_getnbuf>
   30408:	e0bff415 	stw	r2,-48(fp)
      if (m == NULL)
   3040c:	e0bff417 	ldw	r2,-48(fp)
   30410:	1000021e 	bne	r2,zero,3041c <soreceive+0x6c>
         return ENOBUFS;
   30414:	00801a44 	movi	r2,105
   30418:	0001b106 	br	30ae0 <soreceive+0x730>
      lflags = flags & MSG_PEEK;
   3041c:	e0800217 	ldw	r2,8(fp)
   30420:	1080008c 	andi	r2,r2,2
   30424:	e0bffb15 	stw	r2,-20(fp)

      so->so_req = PRU_RCVOOB;
   30428:	e0bffc17 	ldw	r2,-16(fp)
   3042c:	00c00344 	movi	r3,13
   30430:	10c00715 	stw	r3,28(r2)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
   30434:	e0bffa17 	ldw	r2,-24(fp)
   30438:	10800317 	ldw	r2,12(r2)
   3043c:	e0fffb17 	ldw	r3,-20(fp)
   30440:	e13ffc17 	ldw	r4,-16(fp)
   30444:	e17ff417 	ldw	r5,-48(fp)
   30448:	180d883a 	mov	r6,r3
   3044c:	103ee83a 	callr	r2
   30450:	e0bff615 	stw	r2,-40(fp)
      if (error == 0)
   30454:	e0bff617 	ldw	r2,-40(fp)
   30458:	1000231e 	bne	r2,zero,304e8 <soreceive+0x138>
      {
         do 
         {
            len = *datalen;
   3045c:	e0bfff17 	ldw	r2,-4(fp)
   30460:	10800017 	ldw	r2,0(r2)
   30464:	e0bff515 	stw	r2,-44(fp)
            if (len > (int)m->m_len)
   30468:	e0bff417 	ldw	r2,-48(fp)
   3046c:	10800217 	ldw	r2,8(r2)
   30470:	1007883a 	mov	r3,r2
   30474:	e0bff517 	ldw	r2,-44(fp)
   30478:	1880030e 	bge	r3,r2,30488 <soreceive+0xd8>
               len = m->m_len;
   3047c:	e0bff417 	ldw	r2,-48(fp)
   30480:	10800217 	ldw	r2,8(r2)
   30484:	e0bff515 	stw	r2,-44(fp)

            MEMCPY(data, mtod(m, char*), len);
   30488:	e0bff417 	ldw	r2,-48(fp)
   3048c:	10c00317 	ldw	r3,12(r2)
   30490:	e0bff517 	ldw	r2,-44(fp)
   30494:	e13ffe17 	ldw	r4,-8(fp)
   30498:	180b883a 	mov	r5,r3
   3049c:	100d883a 	mov	r6,r2
   304a0:	0007c900 	call	7c90 <memcpy>
            data += len;
   304a4:	e0bff517 	ldw	r2,-44(fp)
   304a8:	e0fffe17 	ldw	r3,-8(fp)
   304ac:	1885883a 	add	r2,r3,r2
   304b0:	e0bffe15 	stw	r2,-8(fp)
            *datalen = len;
   304b4:	e0bfff17 	ldw	r2,-4(fp)
   304b8:	e0fff517 	ldw	r3,-44(fp)
   304bc:	10c00015 	stw	r3,0(r2)
            m = m_free(m);
   304c0:	e13ff417 	ldw	r4,-48(fp)
   304c4:	002c0940 	call	2c094 <m_free>
   304c8:	e0bff415 	stw	r2,-48(fp)
         } while (*datalen && (error == 0) && m);
   304cc:	e0bfff17 	ldw	r2,-4(fp)
   304d0:	10800017 	ldw	r2,0(r2)
   304d4:	10000426 	beq	r2,zero,304e8 <soreceive+0x138>
   304d8:	e0bff617 	ldw	r2,-40(fp)
   304dc:	1000021e 	bne	r2,zero,304e8 <soreceive+0x138>
   304e0:	e0bff417 	ldw	r2,-48(fp)
   304e4:	103fdd1e 	bne	r2,zero,3045c <__alt_mem_descriptor_memory+0xdeff045c>
      }

      if (m)
   304e8:	e0bff417 	ldw	r2,-48(fp)
   304ec:	10000226 	beq	r2,zero,304f8 <soreceive+0x148>
         m_freem(m);
   304f0:	e13ff417 	ldw	r4,-48(fp)
   304f4:	002c1a40 	call	2c1a4 <m_freem>
      return (error);
   304f8:	e0bff617 	ldw	r2,-40(fp)
   304fc:	00017806 	br	30ae0 <soreceive+0x730>
   }

restart:
   sblock (&so->so_rcv);
   30500:	00000406 	br	30514 <soreceive+0x164>
   30504:	e0bffc17 	ldw	r2,-16(fp)
   30508:	10801104 	addi	r2,r2,68
   3050c:	1009883a 	mov	r4,r2
   30510:	00270240 	call	27024 <tcp_sleep>
   30514:	e0bffc17 	ldw	r2,-16(fp)
   30518:	1080110b 	ldhu	r2,68(r2)
   3051c:	10bfffcc 	andi	r2,r2,65535
   30520:	1080004c 	andi	r2,r2,1
   30524:	103ff71e 	bne	r2,zero,30504 <__alt_mem_descriptor_memory+0xdeff0504>
   30528:	e0bffc17 	ldw	r2,-16(fp)
   3052c:	1080110b 	ldhu	r2,68(r2)
   30530:	10800054 	ori	r2,r2,1
   30534:	1007883a 	mov	r3,r2
   30538:	e0bffc17 	ldw	r2,-16(fp)
   3053c:	10c0110d 	sth	r3,68(r2)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
   30540:	e0bffc17 	ldw	r2,-16(fp)
   30544:	10800a17 	ldw	r2,40(r2)
   30548:	10003c1e 	bne	r2,zero,3063c <soreceive+0x28c>
   {
      if (so->so_error) 
   3054c:	e0bffc17 	ldw	r2,-16(fp)
   30550:	10800617 	ldw	r2,24(r2)
   30554:	10000626 	beq	r2,zero,30570 <soreceive+0x1c0>
      {
         error = so->so_error;
   30558:	e0bffc17 	ldw	r2,-16(fp)
   3055c:	10800617 	ldw	r2,24(r2)
   30560:	e0bff615 	stw	r2,-40(fp)
         so->so_error = 0;
   30564:	e0bffc17 	ldw	r2,-16(fp)
   30568:	10000615 	stw	zero,24(r2)
         goto release;
   3056c:	00015006 	br	30ab0 <soreceive+0x700>
      }
      if (so->so_state & SS_CANTRCVMORE)
   30570:	e0bffc17 	ldw	r2,-16(fp)
   30574:	1080088b 	ldhu	r2,34(r2)
   30578:	10bfffcc 	andi	r2,r2,65535
   3057c:	1080080c 	andi	r2,r2,32
   30580:	10000126 	beq	r2,zero,30588 <soreceive+0x1d8>
         goto release;
   30584:	00014a06 	br	30ab0 <soreceive+0x700>
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
   30588:	e0bffc17 	ldw	r2,-16(fp)
   3058c:	1080088b 	ldhu	r2,34(r2)
   30590:	10bfffcc 	andi	r2,r2,65535
   30594:	1080008c 	andi	r2,r2,2
   30598:	1000091e 	bne	r2,zero,305c0 <soreceive+0x210>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
   3059c:	e0bffc17 	ldw	r2,-16(fp)
   305a0:	10800217 	ldw	r2,8(r2)
   305a4:	1080010b 	ldhu	r2,4(r2)
   305a8:	10bfffcc 	andi	r2,r2,65535
   305ac:	1080010c 	andi	r2,r2,4
         so->so_error = 0;
         goto release;
      }
      if (so->so_state & SS_CANTRCVMORE)
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
   305b0:	10000326 	beq	r2,zero,305c0 <soreceive+0x210>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
      {
         error = ENOTCONN;
   305b4:	00802004 	movi	r2,128
   305b8:	e0bff615 	stw	r2,-40(fp)
         goto release;
   305bc:	00013c06 	br	30ab0 <soreceive+0x700>
      }
      if (*datalen == 0)
   305c0:	e0bfff17 	ldw	r2,-4(fp)
   305c4:	10800017 	ldw	r2,0(r2)
   305c8:	1000011e 	bne	r2,zero,305d0 <soreceive+0x220>
         goto release;
   305cc:	00013806 	br	30ab0 <soreceive+0x700>
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
   305d0:	e0bffc17 	ldw	r2,-16(fp)
   305d4:	1080088b 	ldhu	r2,34(r2)
   305d8:	10bfffcc 	andi	r2,r2,65535
   305dc:	1080400c 	andi	r2,r2,256
   305e0:	1000031e 	bne	r2,zero,305f0 <soreceive+0x240>
   305e4:	e0800217 	ldw	r2,8(fp)
   305e8:	1080080c 	andi	r2,r2,32
   305ec:	10000326 	beq	r2,zero,305fc <soreceive+0x24c>
      {
         error = EWOULDBLOCK;
   305f0:	008002c4 	movi	r2,11
   305f4:	e0bff615 	stw	r2,-40(fp)
         goto release;
   305f8:	00012d06 	br	30ab0 <soreceive+0x700>
      }
      sbunlock(&so->so_rcv);
   305fc:	e0bffc17 	ldw	r2,-16(fp)
   30600:	10c0110b 	ldhu	r3,68(r2)
   30604:	00bfff84 	movi	r2,-2
   30608:	1884703a 	and	r2,r3,r2
   3060c:	1007883a 	mov	r3,r2
   30610:	e0bffc17 	ldw	r2,-16(fp)
   30614:	10c0110d 	sth	r3,68(r2)
   30618:	e0bffc17 	ldw	r2,-16(fp)
   3061c:	10801104 	addi	r2,r2,68
   30620:	1009883a 	mov	r4,r2
   30624:	00271c80 	call	271c8 <tcp_wakeup>
      sbwait(&so->so_rcv);
   30628:	e0bffc17 	ldw	r2,-16(fp)
   3062c:	10800a04 	addi	r2,r2,40
   30630:	1009883a 	mov	r4,r2
   30634:	0031d0c0 	call	31d0c <sbwait>
      goto restart;
   30638:	003fb106 	br	30500 <__alt_mem_descriptor_memory+0xdeff0500>
   }
   m = so->so_rcv.sb_mb;
   3063c:	e0bffc17 	ldw	r2,-16(fp)
   30640:	10801017 	ldw	r2,64(r2)
   30644:	e0bff415 	stw	r2,-48(fp)
   if (m == 0)
   30648:	e0bff417 	ldw	r2,-48(fp)
   3064c:	1000031e 	bne	r2,zero,3065c <soreceive+0x2ac>
      panic("sorecv 1");
   30650:	01000174 	movhi	r4,5
   30654:	213b5704 	addi	r4,r4,-4772
   30658:	00267380 	call	26738 <panic>
   nextrecord = m->m_act;
   3065c:	e0bff417 	ldw	r2,-48(fp)
   30660:	10800717 	ldw	r2,28(r2)
   30664:	e0bff815 	stw	r2,-32(fp)
   if (pr->pr_flags & PR_ADDR) 
   30668:	e0bffa17 	ldw	r2,-24(fp)
   3066c:	1080010b 	ldhu	r2,4(r2)
   30670:	10bfffcc 	andi	r2,r2,65535
   30674:	1080008c 	andi	r2,r2,2
   30678:	10004226 	beq	r2,zero,30784 <soreceive+0x3d4>
   {
      if (m->m_type != MT_SONAME) 
   3067c:	e0bff417 	ldw	r2,-48(fp)
   30680:	10800817 	ldw	r2,32(r2)
   30684:	10800260 	cmpeqi	r2,r2,9
   30688:	1000091e 	bne	r2,zero,306b0 <soreceive+0x300>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
   3068c:	e0bff417 	ldw	r2,-48(fp)
   30690:	10800817 	ldw	r2,32(r2)
   30694:	01000174 	movhi	r4,5
   30698:	213b5a04 	addi	r4,r4,-4760
   3069c:	100b883a 	mov	r5,r2
   306a0:	00080f80 	call	80f8 <printf>
         panic("sorecv 2");
   306a4:	01000174 	movhi	r4,5
   306a8:	213b6004 	addi	r4,r4,-4736
   306ac:	00267380 	call	26738 <panic>
      }
      if (flags & MSG_PEEK) 
   306b0:	e0800217 	ldw	r2,8(fp)
   306b4:	1080008c 	andi	r2,r2,2
   306b8:	10000f26 	beq	r2,zero,306f8 <soreceive+0x348>
      {
         if (aname)
   306bc:	e0bffd17 	ldw	r2,-12(fp)
   306c0:	10000926 	beq	r2,zero,306e8 <soreceive+0x338>
            *aname = m_copy (m, 0, m->m_len);
   306c4:	e0bff417 	ldw	r2,-48(fp)
   306c8:	10800217 	ldw	r2,8(r2)
   306cc:	e13ff417 	ldw	r4,-48(fp)
   306d0:	000b883a 	mov	r5,zero
   306d4:	100d883a 	mov	r6,r2
   306d8:	002c1e40 	call	2c1e4 <m_copy>
   306dc:	1007883a 	mov	r3,r2
   306e0:	e0bffd17 	ldw	r2,-12(fp)
   306e4:	10c00015 	stw	r3,0(r2)
         m = m->m_next;
   306e8:	e0bff417 	ldw	r2,-48(fp)
   306ec:	10800617 	ldw	r2,24(r2)
   306f0:	e0bff415 	stw	r2,-48(fp)
   306f4:	00002306 	br	30784 <soreceive+0x3d4>
      } else 
      {
         sbfree (&so->so_rcv, m);
   306f8:	e0bffc17 	ldw	r2,-16(fp)
   306fc:	10c00a17 	ldw	r3,40(r2)
   30700:	e0bff417 	ldw	r2,-48(fp)
   30704:	10800217 	ldw	r2,8(r2)
   30708:	1887c83a 	sub	r3,r3,r2
   3070c:	e0bffc17 	ldw	r2,-16(fp)
   30710:	10c00a15 	stw	r3,40(r2)
         if (aname) 
   30714:	e0bffd17 	ldw	r2,-12(fp)
   30718:	10000d26 	beq	r2,zero,30750 <soreceive+0x3a0>
         {
            *aname = m;
   3071c:	e0bffd17 	ldw	r2,-12(fp)
   30720:	e0fff417 	ldw	r3,-48(fp)
   30724:	10c00015 	stw	r3,0(r2)
            m = m->m_next;
   30728:	e0bff417 	ldw	r2,-48(fp)
   3072c:	10800617 	ldw	r2,24(r2)
   30730:	e0bff415 	stw	r2,-48(fp)
            (*aname)->m_next = 0;
   30734:	e0bffd17 	ldw	r2,-12(fp)
   30738:	10800017 	ldw	r2,0(r2)
   3073c:	10000615 	stw	zero,24(r2)
            so->so_rcv.sb_mb = m;
   30740:	e0bffc17 	ldw	r2,-16(fp)
   30744:	e0fff417 	ldw	r3,-48(fp)
   30748:	10c01015 	stw	r3,64(r2)
   3074c:	00000806 	br	30770 <soreceive+0x3c0>
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
   30750:	e13ff417 	ldw	r4,-48(fp)
   30754:	002c0940 	call	2c094 <m_free>
   30758:	1007883a 	mov	r3,r2
   3075c:	e0bffc17 	ldw	r2,-16(fp)
   30760:	10c01015 	stw	r3,64(r2)
            m = so->so_rcv.sb_mb;
   30764:	e0bffc17 	ldw	r2,-16(fp)
   30768:	10801017 	ldw	r2,64(r2)
   3076c:	e0bff415 	stw	r2,-48(fp)
         }
         if (m)
   30770:	e0bff417 	ldw	r2,-48(fp)
   30774:	10000326 	beq	r2,zero,30784 <soreceive+0x3d4>
            m->m_act = nextrecord;
   30778:	e0bff417 	ldw	r2,-48(fp)
   3077c:	e0fff817 	ldw	r3,-32(fp)
   30780:	10c00715 	stw	r3,28(r2)
      }
   }
   moff = 0;
   30784:	e03ff915 	stw	zero,-28(fp)
   offset = 0;
   30788:	e03ff715 	stw	zero,-36(fp)
   while (m && (*datalen > 0) && (error == 0))
   3078c:	00009e06 	br	30a08 <soreceive+0x658>
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
   30790:	e0bff417 	ldw	r2,-48(fp)
   30794:	10800817 	ldw	r2,32(r2)
   30798:	10800060 	cmpeqi	r2,r2,1
   3079c:	1000071e 	bne	r2,zero,307bc <soreceive+0x40c>
   307a0:	e0bff417 	ldw	r2,-48(fp)
   307a4:	10800817 	ldw	r2,32(r2)
   307a8:	108000e0 	cmpeqi	r2,r2,3
   307ac:	1000031e 	bne	r2,zero,307bc <soreceive+0x40c>
         panic("sorecv 3");
   307b0:	01000174 	movhi	r4,5
   307b4:	213b6304 	addi	r4,r4,-4724
   307b8:	00267380 	call	26738 <panic>
      len = *datalen;
   307bc:	e0bfff17 	ldw	r2,-4(fp)
   307c0:	10800017 	ldw	r2,0(r2)
   307c4:	e0bff515 	stw	r2,-44(fp)
      so->so_state &= ~SS_RCVATMARK;
   307c8:	e0bffc17 	ldw	r2,-16(fp)
   307cc:	10c0088b 	ldhu	r3,34(r2)
   307d0:	00bfefc4 	movi	r2,-65
   307d4:	1884703a 	and	r2,r3,r2
   307d8:	1007883a 	mov	r3,r2
   307dc:	e0bffc17 	ldw	r2,-16(fp)
   307e0:	10c0088d 	sth	r3,34(r2)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
   307e4:	e0bffc17 	ldw	r2,-16(fp)
   307e8:	10801a17 	ldw	r2,104(r2)
   307ec:	10000c26 	beq	r2,zero,30820 <soreceive+0x470>
   307f0:	e0bffc17 	ldw	r2,-16(fp)
   307f4:	10c01a17 	ldw	r3,104(r2)
   307f8:	e0bff717 	ldw	r2,-36(fp)
   307fc:	1885c83a 	sub	r2,r3,r2
   30800:	1007883a 	mov	r3,r2
   30804:	e0bff517 	ldw	r2,-44(fp)
   30808:	1880050e 	bge	r3,r2,30820 <soreceive+0x470>
         len = (int)(so->so_oobmark - offset);
   3080c:	e0bffc17 	ldw	r2,-16(fp)
   30810:	10c01a17 	ldw	r3,104(r2)
   30814:	e0bff717 	ldw	r2,-36(fp)
   30818:	1885c83a 	sub	r2,r3,r2
   3081c:	e0bff515 	stw	r2,-44(fp)
      if (len > (int)(m->m_len - moff))
   30820:	e0bff417 	ldw	r2,-48(fp)
   30824:	10c00217 	ldw	r3,8(r2)
   30828:	e0bff917 	ldw	r2,-28(fp)
   3082c:	1885c83a 	sub	r2,r3,r2
   30830:	1007883a 	mov	r3,r2
   30834:	e0bff517 	ldw	r2,-44(fp)
   30838:	1880050e 	bge	r3,r2,30850 <soreceive+0x4a0>
         len = m->m_len - moff;
   3083c:	e0bff417 	ldw	r2,-48(fp)
   30840:	10c00217 	ldw	r3,8(r2)
   30844:	e0bff917 	ldw	r2,-28(fp)
   30848:	1885c83a 	sub	r2,r3,r2
   3084c:	e0bff515 	stw	r2,-44(fp)
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
   30850:	e0bff417 	ldw	r2,-48(fp)
   30854:	10c00317 	ldw	r3,12(r2)
   30858:	e0bff917 	ldw	r2,-28(fp)
   3085c:	1887883a 	add	r3,r3,r2
   30860:	e0bff517 	ldw	r2,-44(fp)
   30864:	e13ffe17 	ldw	r4,-8(fp)
   30868:	180b883a 	mov	r5,r3
   3086c:	100d883a 	mov	r6,r2
   30870:	0007c900 	call	7c90 <memcpy>
      data += len;
   30874:	e0bff517 	ldw	r2,-44(fp)
   30878:	e0fffe17 	ldw	r3,-8(fp)
   3087c:	1885883a 	add	r2,r3,r2
   30880:	e0bffe15 	stw	r2,-8(fp)
      *datalen -= len;
   30884:	e0bfff17 	ldw	r2,-4(fp)
   30888:	10c00017 	ldw	r3,0(r2)
   3088c:	e0bff517 	ldw	r2,-44(fp)
   30890:	1887c83a 	sub	r3,r3,r2
   30894:	e0bfff17 	ldw	r2,-4(fp)
   30898:	10c00015 	stw	r3,0(r2)

      if (len == (int)(m->m_len - moff))
   3089c:	e0bff417 	ldw	r2,-48(fp)
   308a0:	10c00217 	ldw	r3,8(r2)
   308a4:	e0bff917 	ldw	r2,-28(fp)
   308a8:	1885c83a 	sub	r2,r3,r2
   308ac:	1007883a 	mov	r3,r2
   308b0:	e0bff517 	ldw	r2,-44(fp)
   308b4:	1880201e 	bne	r3,r2,30938 <soreceive+0x588>
      {
         if (flags & MSG_PEEK) 
   308b8:	e0800217 	ldw	r2,8(fp)
   308bc:	1080008c 	andi	r2,r2,2
   308c0:	10000526 	beq	r2,zero,308d8 <soreceive+0x528>
         {
            m = m->m_next;
   308c4:	e0bff417 	ldw	r2,-48(fp)
   308c8:	10800617 	ldw	r2,24(r2)
   308cc:	e0bff415 	stw	r2,-48(fp)
            moff = 0;
   308d0:	e03ff915 	stw	zero,-28(fp)
   308d4:	00003206 	br	309a0 <soreceive+0x5f0>
         } else 
         {
            nextrecord = m->m_act;
   308d8:	e0bff417 	ldw	r2,-48(fp)
   308dc:	10800717 	ldw	r2,28(r2)
   308e0:	e0bff815 	stw	r2,-32(fp)
            sbfree(&so->so_rcv, m);
   308e4:	e0bffc17 	ldw	r2,-16(fp)
   308e8:	10c00a17 	ldw	r3,40(r2)
   308ec:	e0bff417 	ldw	r2,-48(fp)
   308f0:	10800217 	ldw	r2,8(r2)
   308f4:	1887c83a 	sub	r3,r3,r2
   308f8:	e0bffc17 	ldw	r2,-16(fp)
   308fc:	10c00a15 	stw	r3,40(r2)
            {
               MFREE(m, so->so_rcv.sb_mb);
   30900:	e13ff417 	ldw	r4,-48(fp)
   30904:	002c0940 	call	2c094 <m_free>
   30908:	1007883a 	mov	r3,r2
   3090c:	e0bffc17 	ldw	r2,-16(fp)
   30910:	10c01015 	stw	r3,64(r2)
               m = so->so_rcv.sb_mb;
   30914:	e0bffc17 	ldw	r2,-16(fp)
   30918:	10801017 	ldw	r2,64(r2)
   3091c:	e0bff415 	stw	r2,-48(fp)
            }
            if (m)
   30920:	e0bff417 	ldw	r2,-48(fp)
   30924:	10001e26 	beq	r2,zero,309a0 <soreceive+0x5f0>
               m->m_act = nextrecord;
   30928:	e0bff417 	ldw	r2,-48(fp)
   3092c:	e0fff817 	ldw	r3,-32(fp)
   30930:	10c00715 	stw	r3,28(r2)
   30934:	00001a06 	br	309a0 <soreceive+0x5f0>
         }
      } else 
      {
         if (flags & MSG_PEEK)
   30938:	e0800217 	ldw	r2,8(fp)
   3093c:	1080008c 	andi	r2,r2,2
   30940:	10000526 	beq	r2,zero,30958 <soreceive+0x5a8>
            moff += len;
   30944:	e0fff917 	ldw	r3,-28(fp)
   30948:	e0bff517 	ldw	r2,-44(fp)
   3094c:	1885883a 	add	r2,r3,r2
   30950:	e0bff915 	stw	r2,-28(fp)
   30954:	00001206 	br	309a0 <soreceive+0x5f0>
         else 
         {
            m->m_data += len;
   30958:	e0bff417 	ldw	r2,-48(fp)
   3095c:	10c00317 	ldw	r3,12(r2)
   30960:	e0bff517 	ldw	r2,-44(fp)
   30964:	1887883a 	add	r3,r3,r2
   30968:	e0bff417 	ldw	r2,-48(fp)
   3096c:	10c00315 	stw	r3,12(r2)
            m->m_len -= len;
   30970:	e0bff417 	ldw	r2,-48(fp)
   30974:	10c00217 	ldw	r3,8(r2)
   30978:	e0bff517 	ldw	r2,-44(fp)
   3097c:	1887c83a 	sub	r3,r3,r2
   30980:	e0bff417 	ldw	r2,-48(fp)
   30984:	10c00215 	stw	r3,8(r2)
            so->so_rcv.sb_cc -= len;
   30988:	e0bffc17 	ldw	r2,-16(fp)
   3098c:	10c00a17 	ldw	r3,40(r2)
   30990:	e0bff517 	ldw	r2,-44(fp)
   30994:	1887c83a 	sub	r3,r3,r2
   30998:	e0bffc17 	ldw	r2,-16(fp)
   3099c:	10c00a15 	stw	r3,40(r2)
         }
      }
      if (so->so_oobmark) 
   309a0:	e0bffc17 	ldw	r2,-16(fp)
   309a4:	10801a17 	ldw	r2,104(r2)
   309a8:	10001726 	beq	r2,zero,30a08 <soreceive+0x658>
      {
         if ((flags & MSG_PEEK) == 0) 
   309ac:	e0800217 	ldw	r2,8(fp)
   309b0:	1080008c 	andi	r2,r2,2
   309b4:	1000101e 	bne	r2,zero,309f8 <soreceive+0x648>
         {
            so->so_oobmark -= len;
   309b8:	e0bffc17 	ldw	r2,-16(fp)
   309bc:	10c01a17 	ldw	r3,104(r2)
   309c0:	e0bff517 	ldw	r2,-44(fp)
   309c4:	1887c83a 	sub	r3,r3,r2
   309c8:	e0bffc17 	ldw	r2,-16(fp)
   309cc:	10c01a15 	stw	r3,104(r2)
            if (so->so_oobmark == 0) 
   309d0:	e0bffc17 	ldw	r2,-16(fp)
   309d4:	10801a17 	ldw	r2,104(r2)
   309d8:	10000b1e 	bne	r2,zero,30a08 <soreceive+0x658>
            {
               so->so_state |= SS_RCVATMARK;
   309dc:	e0bffc17 	ldw	r2,-16(fp)
   309e0:	1080088b 	ldhu	r2,34(r2)
   309e4:	10801014 	ori	r2,r2,64
   309e8:	1007883a 	mov	r3,r2
   309ec:	e0bffc17 	ldw	r2,-16(fp)
   309f0:	10c0088d 	sth	r3,34(r2)
               break;
   309f4:	00000b06 	br	30a24 <soreceive+0x674>
            }
         } else
            offset += len;
   309f8:	e0fff717 	ldw	r3,-36(fp)
   309fc:	e0bff517 	ldw	r2,-44(fp)
   30a00:	1885883a 	add	r2,r3,r2
   30a04:	e0bff715 	stw	r2,-36(fp)
            m->m_act = nextrecord;
      }
   }
   moff = 0;
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
   30a08:	e0bff417 	ldw	r2,-48(fp)
   30a0c:	10000526 	beq	r2,zero,30a24 <soreceive+0x674>
   30a10:	e0bfff17 	ldw	r2,-4(fp)
   30a14:	10800017 	ldw	r2,0(r2)
   30a18:	0080020e 	bge	zero,r2,30a24 <soreceive+0x674>
   30a1c:	e0bff617 	ldw	r2,-40(fp)
   30a20:	103f5b26 	beq	r2,zero,30790 <__alt_mem_descriptor_memory+0xdeff0790>
         } else
            offset += len;
      }
   }

   if ((flags & MSG_PEEK) == 0) 
   30a24:	e0800217 	ldw	r2,8(fp)
   30a28:	1080008c 	andi	r2,r2,2
   30a2c:	1000201e 	bne	r2,zero,30ab0 <soreceive+0x700>
   {
      if (m == 0)
   30a30:	e0bff417 	ldw	r2,-48(fp)
   30a34:	1000041e 	bne	r2,zero,30a48 <soreceive+0x698>
         so->so_rcv.sb_mb = nextrecord;
   30a38:	e0bffc17 	ldw	r2,-16(fp)
   30a3c:	e0fff817 	ldw	r3,-32(fp)
   30a40:	10c01015 	stw	r3,64(r2)
   30a44:	00000906 	br	30a6c <soreceive+0x6bc>
      else if (pr->pr_flags & PR_ATOMIC)
   30a48:	e0bffa17 	ldw	r2,-24(fp)
   30a4c:	1080010b 	ldhu	r2,4(r2)
   30a50:	10bfffcc 	andi	r2,r2,65535
   30a54:	1080004c 	andi	r2,r2,1
   30a58:	10000426 	beq	r2,zero,30a6c <soreceive+0x6bc>
         (void) sbdroprecord(&so->so_rcv);
   30a5c:	e0bffc17 	ldw	r2,-16(fp)
   30a60:	10800a04 	addi	r2,r2,40
   30a64:	1009883a 	mov	r4,r2
   30a68:	003277c0 	call	3277c <sbdroprecord>
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
   30a6c:	e0bffa17 	ldw	r2,-24(fp)
   30a70:	1080010b 	ldhu	r2,4(r2)
   30a74:	10bfffcc 	andi	r2,r2,65535
   30a78:	1080020c 	andi	r2,r2,8
   30a7c:	10000c26 	beq	r2,zero,30ab0 <soreceive+0x700>
   30a80:	e0bffc17 	ldw	r2,-16(fp)
   30a84:	10800117 	ldw	r2,4(r2)
   30a88:	10000926 	beq	r2,zero,30ab0 <soreceive+0x700>
      {
         so->so_req = PRU_RCVD;
   30a8c:	e0bffc17 	ldw	r2,-16(fp)
   30a90:	00c00204 	movi	r3,8
   30a94:	10c00715 	stw	r3,28(r2)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
   30a98:	e0bffa17 	ldw	r2,-24(fp)
   30a9c:	10800317 	ldw	r2,12(r2)
   30aa0:	e13ffc17 	ldw	r4,-16(fp)
   30aa4:	000b883a 	mov	r5,zero
   30aa8:	000d883a 	mov	r6,zero
   30aac:	103ee83a 	callr	r2
          (struct mbuf *)0);
      }
   }
release:
   sbunlock(&so->so_rcv);
   30ab0:	e0bffc17 	ldw	r2,-16(fp)
   30ab4:	10c0110b 	ldhu	r3,68(r2)
   30ab8:	00bfff84 	movi	r2,-2
   30abc:	1884703a 	and	r2,r3,r2
   30ac0:	1007883a 	mov	r3,r2
   30ac4:	e0bffc17 	ldw	r2,-16(fp)
   30ac8:	10c0110d 	sth	r3,68(r2)
   30acc:	e0bffc17 	ldw	r2,-16(fp)
   30ad0:	10801104 	addi	r2,r2,68
   30ad4:	1009883a 	mov	r4,r2
   30ad8:	00271c80 	call	271c8 <tcp_wakeup>
   return (error);
   30adc:	e0bff617 	ldw	r2,-40(fp)
}
   30ae0:	e037883a 	mov	sp,fp
   30ae4:	dfc00117 	ldw	ra,4(sp)
   30ae8:	df000017 	ldw	fp,0(sp)
   30aec:	dec00204 	addi	sp,sp,8
   30af0:	f800283a 	ret

00030af4 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
   30af4:	defffc04 	addi	sp,sp,-16
   30af8:	dfc00315 	stw	ra,12(sp)
   30afc:	df000215 	stw	fp,8(sp)
   30b00:	df000204 	addi	fp,sp,8
   30b04:	e13ffe15 	stw	r4,-8(fp)
   30b08:	e17fff15 	stw	r5,-4(fp)
   how++;   /* convert 0,1,2 into 1,2,3 */
   30b0c:	e0bfff17 	ldw	r2,-4(fp)
   30b10:	10800044 	addi	r2,r2,1
   30b14:	e0bfff15 	stw	r2,-4(fp)
   if (how & 1)   /* caller wanted READ or BOTH */
   30b18:	e0bfff17 	ldw	r2,-4(fp)
   30b1c:	1080004c 	andi	r2,r2,1
   30b20:	10000226 	beq	r2,zero,30b2c <soshutdown+0x38>
      sorflush(so);
   30b24:	e13ffe17 	ldw	r4,-8(fp)
   30b28:	0030b8c0 	call	30b8c <sorflush>

   if (how & 2)   /* caller wanted WRITE or BOTH */
   30b2c:	e0bfff17 	ldw	r2,-4(fp)
   30b30:	1080008c 	andi	r2,r2,2
   30b34:	10000f26 	beq	r2,zero,30b74 <soshutdown+0x80>
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
   30b38:	e0bffe17 	ldw	r2,-8(fp)
   30b3c:	10801204 	addi	r2,r2,72
   30b40:	1009883a 	mov	r4,r2
   30b44:	003244c0 	call	3244c <sbflush>
      so->so_req = PRU_SHUTDOWN;
   30b48:	e0bffe17 	ldw	r2,-8(fp)
   30b4c:	00c001c4 	movi	r3,7
   30b50:	10c00715 	stw	r3,28(r2)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
   30b54:	e0bffe17 	ldw	r2,-8(fp)
   30b58:	10800217 	ldw	r2,8(r2)
   30b5c:	10800317 	ldw	r2,12(r2)
   30b60:	e13ffe17 	ldw	r4,-8(fp)
   30b64:	000b883a 	mov	r5,zero
   30b68:	000d883a 	mov	r6,zero
   30b6c:	103ee83a 	callr	r2
   30b70:	00000106 	br	30b78 <soshutdown+0x84>
   }

   return 0;
   30b74:	0005883a 	mov	r2,zero
}
   30b78:	e037883a 	mov	sp,fp
   30b7c:	dfc00117 	ldw	ra,4(sp)
   30b80:	df000017 	ldw	fp,0(sp)
   30b84:	dec00204 	addi	sp,sp,8
   30b88:	f800283a 	ret

00030b8c <sorflush>:
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
   30b8c:	defffb04 	addi	sp,sp,-20
   30b90:	dfc00415 	stw	ra,16(sp)
   30b94:	df000315 	stw	fp,12(sp)
   30b98:	df000304 	addi	fp,sp,12
   30b9c:	e13fff15 	stw	r4,-4(fp)
   struct sockbuf *sb =  &so->so_rcv;
   30ba0:	e0bfff17 	ldw	r2,-4(fp)
   30ba4:	10800a04 	addi	r2,r2,40
   30ba8:	e0bffd15 	stw	r2,-12(fp)
   int   s;

   sblock(sb);
   30bac:	00000406 	br	30bc0 <sorflush+0x34>
   30bb0:	e0bffd17 	ldw	r2,-12(fp)
   30bb4:	10800704 	addi	r2,r2,28
   30bb8:	1009883a 	mov	r4,r2
   30bbc:	00270240 	call	27024 <tcp_sleep>
   30bc0:	e0bffd17 	ldw	r2,-12(fp)
   30bc4:	1080070b 	ldhu	r2,28(r2)
   30bc8:	10bfffcc 	andi	r2,r2,65535
   30bcc:	1080004c 	andi	r2,r2,1
   30bd0:	103ff71e 	bne	r2,zero,30bb0 <__alt_mem_descriptor_memory+0xdeff0bb0>
   30bd4:	e0bffd17 	ldw	r2,-12(fp)
   30bd8:	1080070b 	ldhu	r2,28(r2)
   30bdc:	10800054 	ori	r2,r2,1
   30be0:	1007883a 	mov	r3,r2
   30be4:	e0bffd17 	ldw	r2,-12(fp)
   30be8:	10c0070d 	sth	r3,28(r2)
   socantrcvmore(so);
   30bec:	e13fff17 	ldw	r4,-4(fp)
   30bf0:	0031c800 	call	31c80 <socantrcvmore>
   sbunlock(sb);
   30bf4:	e0bffd17 	ldw	r2,-12(fp)
   30bf8:	10c0070b 	ldhu	r3,28(r2)
   30bfc:	00bfff84 	movi	r2,-2
   30c00:	1884703a 	and	r2,r3,r2
   30c04:	1007883a 	mov	r3,r2
   30c08:	e0bffd17 	ldw	r2,-12(fp)
   30c0c:	10c0070d 	sth	r3,28(r2)
   30c10:	e0bffd17 	ldw	r2,-12(fp)
   30c14:	10800704 	addi	r2,r2,28
   30c18:	1009883a 	mov	r4,r2
   30c1c:	00271c80 	call	271c8 <tcp_wakeup>
   sbrelease(sb);
   30c20:	e13ffd17 	ldw	r4,-12(fp)
   30c24:	0031ee00 	call	31ee0 <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
   30c28:	e13ffd17 	ldw	r4,-12(fp)
   30c2c:	000b883a 	mov	r5,zero
   30c30:	01800804 	movi	r6,32
   30c34:	0007f240 	call	7f24 <memset>
   s = so->so_error;
   30c38:	e0bfff17 	ldw	r2,-4(fp)
   30c3c:	10800617 	ldw	r2,24(r2)
   30c40:	e0bffe15 	stw	r2,-8(fp)
   so->so_error = ESHUTDOWN;
   30c44:	e0bfff17 	ldw	r2,-4(fp)
   30c48:	00c01b84 	movi	r3,110
   30c4c:	10c00615 	stw	r3,24(r2)
   sorwakeup(so);
   30c50:	e0bfff17 	ldw	r2,-4(fp)
   30c54:	10800a04 	addi	r2,r2,40
   30c58:	e13fff17 	ldw	r4,-4(fp)
   30c5c:	100b883a 	mov	r5,r2
   30c60:	0031d740 	call	31d74 <sbwakeup>
   so->so_error = s;
   30c64:	e0bfff17 	ldw	r2,-4(fp)
   30c68:	e0fffe17 	ldw	r3,-8(fp)
   30c6c:	10c00615 	stw	r3,24(r2)
}
   30c70:	e037883a 	mov	sp,fp
   30c74:	dfc00117 	ldw	ra,4(sp)
   30c78:	df000017 	ldw	fp,0(sp)
   30c7c:	dec00204 	addi	sp,sp,8
   30c80:	f800283a 	ret

00030c84 <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
   30c84:	defff604 	addi	sp,sp,-40
   30c88:	dfc00915 	stw	ra,36(sp)
   30c8c:	df000815 	stw	fp,32(sp)
   30c90:	df000804 	addi	fp,sp,32
   30c94:	e13ffd15 	stw	r4,-12(fp)
   30c98:	e17ffe15 	stw	r5,-8(fp)
   30c9c:	e1bfff15 	stw	r6,-4(fp)
   int   error =  0;
   30ca0:	e03ff815 	stw	zero,-32(fp)

   switch (optname) 
   30ca4:	e0bffe17 	ldw	r2,-8(fp)
   30ca8:	10c08020 	cmpeqi	r3,r2,512
   30cac:	18003b1e 	bne	r3,zero,30d9c <sosetopt+0x118>
   30cb0:	10c08048 	cmpgei	r3,r2,513
   30cb4:	1800171e 	bne	r3,zero,30d14 <sosetopt+0x90>
   30cb8:	10c00388 	cmpgei	r3,r2,14
   30cbc:	1800091e 	bne	r3,zero,30ce4 <sosetopt+0x60>
   30cc0:	10c00248 	cmpgei	r3,r2,9
   30cc4:	1800841e 	bne	r3,zero,30ed8 <sosetopt+0x254>
   30cc8:	10c00120 	cmpeqi	r3,r2,4
   30ccc:	1800331e 	bne	r3,zero,30d9c <sosetopt+0x118>
   30cd0:	10c00220 	cmpeqi	r3,r2,8
   30cd4:	1800311e 	bne	r3,zero,30d9c <sosetopt+0x118>
   30cd8:	108000a0 	cmpeqi	r2,r2,2
   30cdc:	1000841e 	bne	r2,zero,30ef0 <sosetopt+0x26c>
   30ce0:	0000eb06 	br	31090 <sosetopt+0x40c>
   30ce4:	10c00820 	cmpeqi	r3,r2,32
   30ce8:	18002c1e 	bne	r3,zero,30d9c <sosetopt+0x118>
   30cec:	10c00848 	cmpgei	r3,r2,33
   30cf0:	1800031e 	bne	r3,zero,30d00 <sosetopt+0x7c>
   30cf4:	10800420 	cmpeqi	r2,r2,16
   30cf8:	1000281e 	bne	r2,zero,30d9c <sosetopt+0x118>
   30cfc:	0000e406 	br	31090 <sosetopt+0x40c>
   30d00:	10c02020 	cmpeqi	r3,r2,128
   30d04:	1800201e 	bne	r3,zero,30d88 <sosetopt+0x104>
   30d08:	10804020 	cmpeqi	r2,r2,256
   30d0c:	1000231e 	bne	r2,zero,30d9c <sosetopt+0x118>
   30d10:	0000df06 	br	31090 <sosetopt+0x40c>
   30d14:	10c40520 	cmpeqi	r3,r2,4116
   30d18:	1800491e 	bne	r3,zero,30e40 <sosetopt+0x1bc>
   30d1c:	10c40548 	cmpgei	r3,r2,4117
   30d20:	18000b1e 	bne	r3,zero,30d50 <sosetopt+0xcc>
   30d24:	10c401a0 	cmpeqi	r3,r2,4102
   30d28:	1800401e 	bne	r3,zero,30e2c <sosetopt+0x1a8>
   30d2c:	10c401c8 	cmpgei	r3,r2,4103
   30d30:	1800041e 	bne	r3,zero,30d44 <sosetopt+0xc0>
   30d34:	10bbffc4 	addi	r2,r2,-4097
   30d38:	108000a8 	cmpgeui	r2,r2,2
   30d3c:	1000d41e 	bne	r2,zero,31090 <sosetopt+0x40c>
   30d40:	00002806 	br	30de4 <sosetopt+0x160>
   30d44:	10840420 	cmpeqi	r2,r2,4112
   30d48:	1000aa1e 	bne	r2,zero,30ff4 <sosetopt+0x370>
   30d4c:	0000d006 	br	31090 <sosetopt+0x40c>
   30d50:	10c800e0 	cmpeqi	r3,r2,8195
   30d54:	1800a71e 	bne	r3,zero,30ff4 <sosetopt+0x370>
   30d58:	10c80108 	cmpgei	r3,r2,8196
   30d5c:	1800051e 	bne	r3,zero,30d74 <sosetopt+0xf0>
   30d60:	10c40560 	cmpeqi	r3,r2,4117
   30d64:	18003d1e 	bne	r3,zero,30e5c <sosetopt+0x1d8>
   30d68:	108405a0 	cmpeqi	r2,r2,4118
   30d6c:	1000431e 	bne	r2,zero,30e7c <sosetopt+0x1f8>
   30d70:	0000c706 	br	31090 <sosetopt+0x40c>
   30d74:	10c80120 	cmpeqi	r3,r2,8196
   30d78:	1800721e 	bne	r3,zero,30f44 <sosetopt+0x2c0>
   30d7c:	10900020 	cmpeqi	r2,r2,16384
   30d80:	1000061e 	bne	r2,zero,30d9c <sosetopt+0x118>
   30d84:	0000c206 	br	31090 <sosetopt+0x40c>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
   30d88:	e0bfff17 	ldw	r2,-4(fp)
   30d8c:	10800117 	ldw	r2,4(r2)
   30d90:	1007883a 	mov	r3,r2
   30d94:	e0bffd17 	ldw	r2,-12(fp)
   30d98:	10c0080d 	sth	r3,32(r2)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
   30d9c:	e0bfff17 	ldw	r2,-4(fp)
   30da0:	10800017 	ldw	r2,0(r2)
   30da4:	10000726 	beq	r2,zero,30dc4 <sosetopt+0x140>
         so->so_options |= optname;
   30da8:	e0bffd17 	ldw	r2,-12(fp)
   30dac:	10c00417 	ldw	r3,16(r2)
   30db0:	e0bffe17 	ldw	r2,-8(fp)
   30db4:	1886b03a 	or	r3,r3,r2
   30db8:	e0bffd17 	ldw	r2,-12(fp)
   30dbc:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~optname;
      break;
   30dc0:	0000b606 	br	3109c <sosetopt+0x418>
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
         so->so_options |= optname;
      else
         so->so_options &= ~optname;
   30dc4:	e0bffd17 	ldw	r2,-12(fp)
   30dc8:	10800417 	ldw	r2,16(r2)
   30dcc:	e0fffe17 	ldw	r3,-8(fp)
   30dd0:	00c6303a 	nor	r3,zero,r3
   30dd4:	10c6703a 	and	r3,r2,r3
   30dd8:	e0bffd17 	ldw	r2,-12(fp)
   30ddc:	10c00415 	stw	r3,16(r2)
      break;
   30de0:	0000ae06 	br	3109c <sosetopt+0x418>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
   30de4:	e0bffe17 	ldw	r2,-8(fp)
   30de8:	10840058 	cmpnei	r2,r2,4097
   30dec:	1000031e 	bne	r2,zero,30dfc <sosetopt+0x178>
   30df0:	e0bffd17 	ldw	r2,-12(fp)
   30df4:	10801204 	addi	r2,r2,72
   30df8:	00000206 	br	30e04 <sosetopt+0x180>
   30dfc:	e0bffd17 	ldw	r2,-12(fp)
   30e00:	10800a04 	addi	r2,r2,40
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
   30e04:	e0ffff17 	ldw	r3,-4(fp)
   30e08:	18c00017 	ldw	r3,0(r3)
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
   30e0c:	1009883a 	mov	r4,r2
   30e10:	180b883a 	mov	r5,r3
   30e14:	0031e900 	call	31e90 <sbreserve>
   30e18:	1000031e 	bne	r2,zero,30e28 <sosetopt+0x1a4>
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
      {
         error = ENOBUFS;
   30e1c:	00801a44 	movi	r2,105
   30e20:	e0bff815 	stw	r2,-32(fp)
         goto bad;
   30e24:	00009d06 	br	3109c <sosetopt+0x418>
      }
      break;
   30e28:	00009c06 	br	3109c <sosetopt+0x418>

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
   30e2c:	e0bfff17 	ldw	r2,-4(fp)
   30e30:	10c0000b 	ldhu	r3,0(r2)
   30e34:	e0bffd17 	ldw	r2,-12(fp)
   30e38:	10c0118d 	sth	r3,70(r2)
      break;
   30e3c:	00009706 	br	3109c <sosetopt+0x418>

   case SO_NBIO:     /* set socket into NON-blocking mode */
      so->so_state |= SS_NBIO;
   30e40:	e0bffd17 	ldw	r2,-12(fp)
   30e44:	1080088b 	ldhu	r2,34(r2)
   30e48:	10804014 	ori	r2,r2,256
   30e4c:	1007883a 	mov	r3,r2
   30e50:	e0bffd17 	ldw	r2,-12(fp)
   30e54:	10c0088d 	sth	r3,34(r2)
      break;
   30e58:	00009006 	br	3109c <sosetopt+0x418>

   case SO_BIO:   /* set socket into blocking mode */
      so->so_state &= ~SS_NBIO;
   30e5c:	e0bffd17 	ldw	r2,-12(fp)
   30e60:	10c0088b 	ldhu	r3,34(r2)
   30e64:	00bfbfc4 	movi	r2,-257
   30e68:	1884703a 	and	r2,r3,r2
   30e6c:	1007883a 	mov	r3,r2
   30e70:	e0bffd17 	ldw	r2,-12(fp)
   30e74:	10c0088d 	sth	r3,34(r2)
      break;
   30e78:	00008806 	br	3109c <sosetopt+0x418>

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
   30e7c:	e0bfff17 	ldw	r2,-4(fp)
   30e80:	1000031e 	bne	r2,zero,30e90 <sosetopt+0x20c>
      {
         error = ENP_PARAM;
   30e84:	00bffd84 	movi	r2,-10
   30e88:	e0bff815 	stw	r2,-32(fp)
         break;
   30e8c:	00008306 	br	3109c <sosetopt+0x418>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
   30e90:	e0bfff17 	ldw	r2,-4(fp)
   30e94:	10800017 	ldw	r2,0(r2)
   30e98:	10000726 	beq	r2,zero,30eb8 <sosetopt+0x234>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
   30e9c:	e0bffd17 	ldw	r2,-12(fp)
   30ea0:	1080088b 	ldhu	r2,34(r2)
   30ea4:	10804014 	ori	r2,r2,256
   30ea8:	1007883a 	mov	r3,r2
   30eac:	e0bffd17 	ldw	r2,-12(fp)
   30eb0:	10c0088d 	sth	r3,34(r2)
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
      break;
   30eb4:	00007906 	br	3109c <sosetopt+0x418>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
   30eb8:	e0bffd17 	ldw	r2,-12(fp)
   30ebc:	10c0088b 	ldhu	r3,34(r2)
   30ec0:	00bfbfc4 	movi	r2,-257
   30ec4:	1884703a 	and	r2,r3,r2
   30ec8:	1007883a 	mov	r3,r2
   30ecc:	e0bffd17 	ldw	r2,-12(fp)
   30ed0:	10c0088d 	sth	r3,34(r2)
      break;
   30ed4:	00007106 	br	3109c <sosetopt+0x418>
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
   30ed8:	e13ffe17 	ldw	r4,-8(fp)
   30edc:	e17ffd17 	ldw	r5,-12(fp)
   30ee0:	e1bfff17 	ldw	r6,-4(fp)
   30ee4:	0043fa00 	call	43fa0 <ip_setmoptions>
   30ee8:	e0bff815 	stw	r2,-32(fp)
      break;
   30eec:	00006b06 	br	3109c <sosetopt+0x418>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
   30ef0:	e0bfff17 	ldw	r2,-4(fp)
   30ef4:	1000031e 	bne	r2,zero,30f04 <sosetopt+0x280>
      {
         error = ENP_PARAM;
   30ef8:	00bffd84 	movi	r2,-10
   30efc:	e0bff815 	stw	r2,-32(fp)
         break;
   30f00:	00006606 	br	3109c <sosetopt+0x418>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
   30f04:	e0bfff17 	ldw	r2,-4(fp)
   30f08:	10800017 	ldw	r2,0(r2)
   30f0c:	10000626 	beq	r2,zero,30f28 <sosetopt+0x2a4>
         so->so_options |= SO_HDRINCL;
   30f10:	e0bffd17 	ldw	r2,-12(fp)
   30f14:	10800417 	ldw	r2,16(r2)
   30f18:	10c80014 	ori	r3,r2,8192
   30f1c:	e0bffd17 	ldw	r2,-12(fp)
   30f20:	10c00415 	stw	r3,16(r2)
      else
         so->so_options &= ~SO_HDRINCL;
      break;
   30f24:	00005d06 	br	3109c <sosetopt+0x418>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
         so->so_options |= SO_HDRINCL;
      else
         so->so_options &= ~SO_HDRINCL;
   30f28:	e0bffd17 	ldw	r2,-12(fp)
   30f2c:	10c00417 	ldw	r3,16(r2)
   30f30:	00b7ffc4 	movi	r2,-8193
   30f34:	1886703a 	and	r3,r3,r2
   30f38:	e0bffd17 	ldw	r2,-12(fp)
   30f3c:	10c00415 	stw	r3,16(r2)
      break;
   30f40:	00005606 	br	3109c <sosetopt+0x418>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
   30f44:	e0bffd17 	ldw	r2,-12(fp)
   30f48:	10800983 	ldbu	r2,38(r2)
   30f4c:	10803fcc 	andi	r2,r2,255
   30f50:	1080201c 	xori	r2,r2,128
   30f54:	10bfe004 	addi	r2,r2,-128
   30f58:	10800060 	cmpeqi	r2,r2,1
   30f5c:	1000031e 	bne	r2,zero,30f6c <sosetopt+0x2e8>
      {
         error = EINVAL;
   30f60:	00800584 	movi	r2,22
   30f64:	e0bff815 	stw	r2,-32(fp)
         break;
   30f68:	00004c06 	br	3109c <sosetopt+0x418>
      }
      inp = (struct inpcb *)(so->so_pcb);
   30f6c:	e0bffd17 	ldw	r2,-12(fp)
   30f70:	10800117 	ldw	r2,4(r2)
   30f74:	e0bff915 	stw	r2,-28(fp)
      tp = intotcpcb(inp);
   30f78:	e0bff917 	ldw	r2,-28(fp)
   30f7c:	10800917 	ldw	r2,36(r2)
   30f80:	e0bffa15 	stw	r2,-24(fp)
      if(!tp)
   30f84:	e0bffa17 	ldw	r2,-24(fp)
   30f88:	1000031e 	bne	r2,zero,30f98 <sosetopt+0x314>
      {
         error = ENOTCONN;
   30f8c:	00802004 	movi	r2,128
   30f90:	e0bff815 	stw	r2,-32(fp)
         break;
   30f94:	00004106 	br	3109c <sosetopt+0x418>
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
   30f98:	e0bfff17 	ldw	r2,-4(fp)
   30f9c:	1000031e 	bne	r2,zero,30fac <sosetopt+0x328>
      {
         error = ENP_PARAM;
   30fa0:	00bffd84 	movi	r2,-10
   30fa4:	e0bff815 	stw	r2,-32(fp)
         break;
   30fa8:	00003c06 	br	3109c <sosetopt+0x418>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
   30fac:	e0bfff17 	ldw	r2,-4(fp)
   30fb0:	10800017 	ldw	r2,0(r2)
   30fb4:	10000726 	beq	r2,zero,30fd4 <sosetopt+0x350>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
   30fb8:	e0bffa17 	ldw	r2,-24(fp)
   30fbc:	10800b0b 	ldhu	r2,44(r2)
   30fc0:	10800114 	ori	r2,r2,4
   30fc4:	1007883a 	mov	r3,r2
   30fc8:	e0bffa17 	ldw	r2,-24(fp)
   30fcc:	10c00b0d 	sth	r3,44(r2)
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */

      break;
   30fd0:	00003206 	br	3109c <sosetopt+0x418>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
   30fd4:	e0bffa17 	ldw	r2,-24(fp)
   30fd8:	10c00b0b 	ldhu	r3,44(r2)
   30fdc:	00bffec4 	movi	r2,-5
   30fe0:	1884703a 	and	r2,r3,r2
   30fe4:	1007883a 	mov	r3,r2
   30fe8:	e0bffa17 	ldw	r2,-24(fp)
   30fec:	10c00b0d 	sth	r3,44(r2)

      break;
   30ff0:	00002a06 	br	3109c <sosetopt+0x418>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
   30ff4:	e0bffd17 	ldw	r2,-12(fp)
   30ff8:	10800983 	ldbu	r2,38(r2)
   30ffc:	10803fcc 	andi	r2,r2,255
   31000:	1080201c 	xori	r2,r2,128
   31004:	10bfe004 	addi	r2,r2,-128
   31008:	10800060 	cmpeqi	r2,r2,1
   3100c:	1000031e 	bne	r2,zero,3101c <sosetopt+0x398>
      {
         error = EINVAL;
   31010:	00800584 	movi	r2,22
   31014:	e0bff815 	stw	r2,-32(fp)
         break;
   31018:	00002006 	br	3109c <sosetopt+0x418>
      }
      inp = (struct inpcb *)(so->so_pcb);
   3101c:	e0bffd17 	ldw	r2,-12(fp)
   31020:	10800117 	ldw	r2,4(r2)
   31024:	e0bffb15 	stw	r2,-20(fp)
      tp = intotcpcb(inp);
   31028:	e0bffb17 	ldw	r2,-20(fp)
   3102c:	10800917 	ldw	r2,36(r2)
   31030:	e0bffc15 	stw	r2,-16(fp)
      if(!tp)
   31034:	e0bffc17 	ldw	r2,-16(fp)
   31038:	1000031e 	bne	r2,zero,31048 <sosetopt+0x3c4>
      {
         error = ENOTCONN;
   3103c:	00802004 	movi	r2,128
   31040:	e0bff815 	stw	r2,-32(fp)
         break;
   31044:	00001506 	br	3109c <sosetopt+0x418>
      }
      if (tp->t_state != TCPS_CLOSED)
   31048:	e0bffc17 	ldw	r2,-16(fp)
   3104c:	10800217 	ldw	r2,8(r2)
   31050:	10000326 	beq	r2,zero,31060 <sosetopt+0x3dc>
      {
         error = EINVAL;
   31054:	00800584 	movi	r2,22
   31058:	e0bff815 	stw	r2,-32(fp)
         break;
   3105c:	00000f06 	br	3109c <sosetopt+0x418>
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
   31060:	e0bfff17 	ldw	r2,-4(fp)
   31064:	10800017 	ldw	r2,0(r2)
   31068:	1007883a 	mov	r3,r2
   3106c:	e0bffc17 	ldw	r2,-16(fp)
   31070:	10c00a0d 	sth	r3,40(r2)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
   31074:	e0bffc17 	ldw	r2,-16(fp)
   31078:	10800b0b 	ldhu	r2,44(r2)
   3107c:	10810014 	ori	r2,r2,1024
   31080:	1007883a 	mov	r3,r2
   31084:	e0bffc17 	ldw	r2,-16(fp)
   31088:	10c00b0d 	sth	r3,44(r2)
      break;
   3108c:	00000306 	br	3109c <sosetopt+0x418>
   }
   default:
      error = ENOPROTOOPT;
   31090:	00801b44 	movi	r2,109
   31094:	e0bff815 	stw	r2,-32(fp)
      break;
   31098:	0001883a 	nop
   }
bad:
   return (error);
   3109c:	e0bff817 	ldw	r2,-32(fp)
}
   310a0:	e037883a 	mov	sp,fp
   310a4:	dfc00117 	ldw	ra,4(sp)
   310a8:	df000017 	ldw	fp,0(sp)
   310ac:	dec00204 	addi	sp,sp,8
   310b0:	f800283a 	ret

000310b4 <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
   310b4:	defff504 	addi	sp,sp,-44
   310b8:	dfc00a15 	stw	ra,40(sp)
   310bc:	df000915 	stw	fp,36(sp)
   310c0:	df000904 	addi	fp,sp,36
   310c4:	e13ffd15 	stw	r4,-12(fp)
   310c8:	e17ffe15 	stw	r5,-8(fp)
   310cc:	e1bfff15 	stw	r6,-4(fp)
   int   error =  0;
   310d0:	e03ff715 	stw	zero,-36(fp)

   /* sanity check the val parameter */
   if (!val)
   310d4:	e0bfff17 	ldw	r2,-4(fp)
   310d8:	1000021e 	bne	r2,zero,310e4 <sogetopt+0x30>
   {
      return ENP_PARAM;
   310dc:	00bffd84 	movi	r2,-10
   310e0:	00011906 	br	31548 <sogetopt+0x494>
   }

   switch (optname) 
   310e4:	e0bffe17 	ldw	r2,-8(fp)
   310e8:	10c400e0 	cmpeqi	r3,r2,4099
   310ec:	1800701e 	bne	r3,zero,312b0 <sogetopt+0x1fc>
   310f0:	10c40108 	cmpgei	r3,r2,4100
   310f4:	1800201e 	bne	r3,zero,31178 <sogetopt+0xc4>
   310f8:	10c00420 	cmpeqi	r3,r2,16
   310fc:	1800641e 	bne	r3,zero,31290 <sogetopt+0x1dc>
   31100:	10c00448 	cmpgei	r3,r2,17
   31104:	18000c1e 	bne	r3,zero,31138 <sogetopt+0x84>
   31108:	10c00220 	cmpeqi	r3,r2,8
   3110c:	1800601e 	bne	r3,zero,31290 <sogetopt+0x1dc>
   31110:	10c00248 	cmpgei	r3,r2,9
   31114:	1800051e 	bne	r3,zero,3112c <sogetopt+0x78>
   31118:	10c000a0 	cmpeqi	r3,r2,2
   3111c:	1800d61e 	bne	r3,zero,31478 <sogetopt+0x3c4>
   31120:	10800120 	cmpeqi	r2,r2,4
   31124:	10005a1e 	bne	r2,zero,31290 <sogetopt+0x1dc>
   31128:	00010406 	br	3153c <sogetopt+0x488>
   3112c:	10800308 	cmpgei	r2,r2,12
   31130:	1001021e 	bne	r2,zero,3153c <sogetopt+0x488>
   31134:	0000ca06 	br	31460 <sogetopt+0x3ac>
   31138:	10c04020 	cmpeqi	r3,r2,256
   3113c:	1800541e 	bne	r3,zero,31290 <sogetopt+0x1dc>
   31140:	10c04048 	cmpgei	r3,r2,257
   31144:	1800051e 	bne	r3,zero,3115c <sogetopt+0xa8>
   31148:	10c00820 	cmpeqi	r3,r2,32
   3114c:	1800501e 	bne	r3,zero,31290 <sogetopt+0x1dc>
   31150:	10802020 	cmpeqi	r2,r2,128
   31154:	10003f1e 	bne	r2,zero,31254 <sogetopt+0x1a0>
   31158:	0000f806 	br	3153c <sogetopt+0x488>
   3115c:	10c40060 	cmpeqi	r3,r2,4097
   31160:	18005f1e 	bne	r3,zero,312e0 <sogetopt+0x22c>
   31164:	10c40088 	cmpgei	r3,r2,4098
   31168:	1800631e 	bne	r3,zero,312f8 <sogetopt+0x244>
   3116c:	10808020 	cmpeqi	r2,r2,512
   31170:	1000471e 	bne	r2,zero,31290 <sogetopt+0x1dc>
   31174:	0000f106 	br	3153c <sogetopt+0x488>
   31178:	10c40420 	cmpeqi	r3,r2,4112
   3117c:	18007f1e 	bne	r3,zero,3137c <sogetopt+0x2c8>
   31180:	10c40448 	cmpgei	r3,r2,4113
   31184:	1800101e 	bne	r3,zero,311c8 <sogetopt+0x114>
   31188:	10c401a0 	cmpeqi	r3,r2,4102
   3118c:	18009b1e 	bne	r3,zero,313fc <sogetopt+0x348>
   31190:	10c401c8 	cmpgei	r3,r2,4103
   31194:	1800051e 	bne	r3,zero,311ac <sogetopt+0xf8>
   31198:	10c40120 	cmpeqi	r3,r2,4100
   3119c:	18004a1e 	bne	r3,zero,312c8 <sogetopt+0x214>
   311a0:	10840160 	cmpeqi	r2,r2,4101
   311a4:	1000901e 	bne	r2,zero,313e8 <sogetopt+0x334>
   311a8:	0000e406 	br	3153c <sogetopt+0x488>
   311ac:	10c40220 	cmpeqi	r3,r2,4104
   311b0:	1800631e 	bne	r3,zero,31340 <sogetopt+0x28c>
   311b4:	10c40210 	cmplti	r3,r2,4104
   311b8:	1800691e 	bne	r3,zero,31360 <sogetopt+0x2ac>
   311bc:	10840260 	cmpeqi	r2,r2,4105
   311c0:	1000931e 	bne	r2,zero,31410 <sogetopt+0x35c>
   311c4:	0000dd06 	br	3153c <sogetopt+0x488>
   311c8:	10c404e0 	cmpeqi	r3,r2,4115
   311cc:	18000e1e 	bne	r3,zero,31208 <sogetopt+0x154>
   311d0:	10c40508 	cmpgei	r3,r2,4116
   311d4:	1800051e 	bne	r3,zero,311ec <sogetopt+0x138>
   311d8:	10c40460 	cmpeqi	r3,r2,4113
   311dc:	18004c1e 	bne	r3,zero,31310 <sogetopt+0x25c>
   311e0:	108404a0 	cmpeqi	r2,r2,4114
   311e4:	1000501e 	bne	r2,zero,31328 <sogetopt+0x274>
   311e8:	0000d406 	br	3153c <sogetopt+0x488>
   311ec:	10c800e0 	cmpeqi	r3,r2,8195
   311f0:	1800621e 	bne	r3,zero,3137c <sogetopt+0x2c8>
   311f4:	10c80120 	cmpeqi	r3,r2,8196
   311f8:	1800aa1e 	bne	r3,zero,314a4 <sogetopt+0x3f0>
   311fc:	108405a0 	cmpeqi	r2,r2,4118
   31200:	10008b1e 	bne	r2,zero,31430 <sogetopt+0x37c>
   31204:	0000cd06 	br	3153c <sogetopt+0x488>
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
   31208:	e0bffd17 	ldw	r2,-12(fp)
   3120c:	1080088b 	ldhu	r2,34(r2)
   31210:	10bfffcc 	andi	r2,r2,65535
   31214:	1080008c 	andi	r2,r2,2
   31218:	10000726 	beq	r2,zero,31238 <sogetopt+0x184>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
   3121c:	e0bffd17 	ldw	r2,-12(fp)
   31220:	10800117 	ldw	r2,4(r2)
   31224:	10800a17 	ldw	r2,40(r2)
   31228:	10c00a17 	ldw	r3,40(r2)
   3122c:	e0bfff17 	ldw	r2,-4(fp)
   31230:	10c00015 	stw	r3,0(r2)
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
   31234:	0000c306 	br	31544 <sogetopt+0x490>
      if (so->so_state & SS_ISCONNECTED)
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
   31238:	008001b4 	movhi	r2,6
   3123c:	10b79b04 	addi	r2,r2,-8596
   31240:	10800017 	ldw	r2,0(r2)
   31244:	10c00a17 	ldw	r3,40(r2)
   31248:	e0bfff17 	ldw	r2,-4(fp)
   3124c:	10c00015 	stw	r3,0(r2)
      break;
   31250:	0000bc06 	br	31544 <sogetopt+0x490>
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
   31254:	e0bfff17 	ldw	r2,-4(fp)
   31258:	e0bff815 	stw	r2,-32(fp)
         l->l_onoff = so->so_options & SO_LINGER;
   3125c:	e0bffd17 	ldw	r2,-12(fp)
   31260:	10800417 	ldw	r2,16(r2)
   31264:	10c0200c 	andi	r3,r2,128
   31268:	e0bff817 	ldw	r2,-32(fp)
   3126c:	10c00015 	stw	r3,0(r2)
         l->l_linger = so->so_linger;
   31270:	e0bffd17 	ldw	r2,-12(fp)
   31274:	1080080b 	ldhu	r2,32(r2)
   31278:	10ffffcc 	andi	r3,r2,65535
   3127c:	18e0001c 	xori	r3,r3,32768
   31280:	18e00004 	addi	r3,r3,-32768
   31284:	e0bff817 	ldw	r2,-32(fp)
   31288:	10c00115 	stw	r3,4(r2)
      }
      break;
   3128c:	0000ad06 	br	31544 <sogetopt+0x490>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
   31290:	e0bffd17 	ldw	r2,-12(fp)
   31294:	10c00417 	ldw	r3,16(r2)
   31298:	e0bffe17 	ldw	r2,-8(fp)
   3129c:	1884703a 	and	r2,r3,r2
   312a0:	1007883a 	mov	r3,r2
   312a4:	e0bfff17 	ldw	r2,-4(fp)
   312a8:	10c00015 	stw	r3,0(r2)
      break;
   312ac:	0000a506 	br	31544 <sogetopt+0x490>

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
   312b0:	e0bffd17 	ldw	r2,-12(fp)
   312b4:	10801617 	ldw	r2,88(r2)
   312b8:	1007883a 	mov	r3,r2
   312bc:	e0bfff17 	ldw	r2,-4(fp)
   312c0:	10c00015 	stw	r3,0(r2)
      break;
   312c4:	00009f06 	br	31544 <sogetopt+0x490>

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
   312c8:	e0bffd17 	ldw	r2,-12(fp)
   312cc:	10800e17 	ldw	r2,56(r2)
   312d0:	1007883a 	mov	r3,r2
   312d4:	e0bfff17 	ldw	r2,-4(fp)
   312d8:	10c00015 	stw	r3,0(r2)
      break;
   312dc:	00009906 	br	31544 <sogetopt+0x490>

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
   312e0:	e0bffd17 	ldw	r2,-12(fp)
   312e4:	10801317 	ldw	r2,76(r2)
   312e8:	1007883a 	mov	r3,r2
   312ec:	e0bfff17 	ldw	r2,-4(fp)
   312f0:	10c00015 	stw	r3,0(r2)
      break;
   312f4:	00009306 	br	31544 <sogetopt+0x490>

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
   312f8:	e0bffd17 	ldw	r2,-12(fp)
   312fc:	10800b17 	ldw	r2,44(r2)
   31300:	1007883a 	mov	r3,r2
   31304:	e0bfff17 	ldw	r2,-4(fp)
   31308:	10c00015 	stw	r3,0(r2)
      break;
   3130c:	00008d06 	br	31544 <sogetopt+0x490>

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
   31310:	e0bffd17 	ldw	r2,-12(fp)
   31314:	10800a17 	ldw	r2,40(r2)
   31318:	1007883a 	mov	r3,r2
   3131c:	e0bfff17 	ldw	r2,-4(fp)
   31320:	10c00015 	stw	r3,0(r2)
      break;
   31324:	00008706 	br	31544 <sogetopt+0x490>

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
   31328:	e0bffd17 	ldw	r2,-12(fp)
   3132c:	10801217 	ldw	r2,72(r2)
   31330:	1007883a 	mov	r3,r2
   31334:	e0bfff17 	ldw	r2,-4(fp)
   31338:	10c00015 	stw	r3,0(r2)
      break;
   3133c:	00008106 	br	31544 <sogetopt+0x490>

   case SO_TYPE:
      *(int *)val = so->so_type;
   31340:	e0bffd17 	ldw	r2,-12(fp)
   31344:	10800983 	ldbu	r2,38(r2)
   31348:	10c03fcc 	andi	r3,r2,255
   3134c:	18c0201c 	xori	r3,r3,128
   31350:	18ffe004 	addi	r3,r3,-128
   31354:	e0bfff17 	ldw	r2,-4(fp)
   31358:	10c00015 	stw	r3,0(r2)
      break;
   3135c:	00007906 	br	31544 <sogetopt+0x490>

   case SO_ERROR:
      *(int *)val = so->so_error;
   31360:	e0bffd17 	ldw	r2,-12(fp)
   31364:	10c00617 	ldw	r3,24(r2)
   31368:	e0bfff17 	ldw	r2,-4(fp)
   3136c:	10c00015 	stw	r3,0(r2)
      so->so_error = 0;
   31370:	e0bffd17 	ldw	r2,-12(fp)
   31374:	10000615 	stw	zero,24(r2)
      break;
   31378:	00007206 	br	31544 <sogetopt+0x490>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
   3137c:	e0bffd17 	ldw	r2,-12(fp)
   31380:	10800983 	ldbu	r2,38(r2)
   31384:	10803fcc 	andi	r2,r2,255
   31388:	1080201c 	xori	r2,r2,128
   3138c:	10bfe004 	addi	r2,r2,-128
   31390:	10800060 	cmpeqi	r2,r2,1
   31394:	1000031e 	bne	r2,zero,313a4 <sogetopt+0x2f0>
      {
         error = EINVAL;
   31398:	00800584 	movi	r2,22
   3139c:	e0bff715 	stw	r2,-36(fp)
         break;
   313a0:	00006806 	br	31544 <sogetopt+0x490>
      }
      inp = (struct inpcb *)(so->so_pcb);
   313a4:	e0bffd17 	ldw	r2,-12(fp)
   313a8:	10800117 	ldw	r2,4(r2)
   313ac:	e0bff915 	stw	r2,-28(fp)
      tp = intotcpcb(inp);
   313b0:	e0bff917 	ldw	r2,-28(fp)
   313b4:	10800917 	ldw	r2,36(r2)
   313b8:	e0bffa15 	stw	r2,-24(fp)
      if(!tp)
   313bc:	e0bffa17 	ldw	r2,-24(fp)
   313c0:	1000031e 	bne	r2,zero,313d0 <sogetopt+0x31c>
      {
         error = ENOTCONN;
   313c4:	00802004 	movi	r2,128
   313c8:	e0bff715 	stw	r2,-36(fp)
         break;
   313cc:	00005d06 	br	31544 <sogetopt+0x490>
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
   313d0:	e0bffa17 	ldw	r2,-24(fp)
   313d4:	10800a0b 	ldhu	r2,40(r2)
   313d8:	10ffffcc 	andi	r3,r2,65535
   313dc:	e0bfff17 	ldw	r2,-4(fp)
   313e0:	10c00015 	stw	r3,0(r2)
      break;
   313e4:	00005706 	br	31544 <sogetopt+0x490>
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
   313e8:	e0bffd17 	ldw	r2,-12(fp)
   313ec:	10c0198b 	ldhu	r3,102(r2)
   313f0:	e0bfff17 	ldw	r2,-4(fp)
   313f4:	10c0000d 	sth	r3,0(r2)
      break;
   313f8:	00005206 	br	31544 <sogetopt+0x490>

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
   313fc:	e0bffd17 	ldw	r2,-12(fp)
   31400:	10c0118b 	ldhu	r3,70(r2)
   31404:	e0bfff17 	ldw	r2,-4(fp)
   31408:	10c0000d 	sth	r3,0(r2)
      break;
   3140c:	00004d06 	br	31544 <sogetopt+0x490>

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
   31410:	e0bffd17 	ldw	r2,-12(fp)
   31414:	108009c3 	ldbu	r2,39(r2)
   31418:	10c03fcc 	andi	r3,r2,255
   3141c:	18c0201c 	xori	r3,r3,128
   31420:	18ffe004 	addi	r3,r3,-128
   31424:	e0bfff17 	ldw	r2,-4(fp)
   31428:	10c00015 	stw	r3,0(r2)
      break;
   3142c:	00004506 	br	31544 <sogetopt+0x490>

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
   31430:	e0bffd17 	ldw	r2,-12(fp)
   31434:	1080088b 	ldhu	r2,34(r2)
   31438:	10bfffcc 	andi	r2,r2,65535
   3143c:	1080400c 	andi	r2,r2,256
   31440:	10000426 	beq	r2,zero,31454 <sogetopt+0x3a0>
         *(int *)val = 1;   /* return 1 in val */
   31444:	e0bfff17 	ldw	r2,-4(fp)
   31448:	00c00044 	movi	r3,1
   3144c:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;     /* return 0 in val */
      break;
   31450:	00003c06 	br	31544 <sogetopt+0x490>
   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
         *(int *)val = 1;   /* return 1 in val */
      else
         *(int *)val = 0;     /* return 0 in val */
   31454:	e0bfff17 	ldw	r2,-4(fp)
   31458:	10000015 	stw	zero,0(r2)
      break;
   3145c:	00003906 	br	31544 <sogetopt+0x490>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
   31460:	e13ffe17 	ldw	r4,-8(fp)
   31464:	e17ffd17 	ldw	r5,-12(fp)
   31468:	e1bfff17 	ldw	r6,-4(fp)
   3146c:	00445600 	call	44560 <ip_getmoptions>
   31470:	e0bff715 	stw	r2,-36(fp)
      break;
   31474:	00003306 	br	31544 <sogetopt+0x490>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
   31478:	e0bffd17 	ldw	r2,-12(fp)
   3147c:	10800417 	ldw	r2,16(r2)
   31480:	1088000c 	andi	r2,r2,8192
   31484:	10000426 	beq	r2,zero,31498 <sogetopt+0x3e4>
         *(int *)val = 1;
   31488:	e0bfff17 	ldw	r2,-4(fp)
   3148c:	00c00044 	movi	r3,1
   31490:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;
      break;
   31494:	00002b06 	br	31544 <sogetopt+0x490>
   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
         *(int *)val = 1;
      else
         *(int *)val = 0;
   31498:	e0bfff17 	ldw	r2,-4(fp)
   3149c:	10000015 	stw	zero,0(r2)
      break;
   314a0:	00002806 	br	31544 <sogetopt+0x490>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
   314a4:	e0bffd17 	ldw	r2,-12(fp)
   314a8:	10800983 	ldbu	r2,38(r2)
   314ac:	10803fcc 	andi	r2,r2,255
   314b0:	1080201c 	xori	r2,r2,128
   314b4:	10bfe004 	addi	r2,r2,-128
   314b8:	10800060 	cmpeqi	r2,r2,1
   314bc:	1000031e 	bne	r2,zero,314cc <sogetopt+0x418>
      {
         error = EINVAL;
   314c0:	00800584 	movi	r2,22
   314c4:	e0bff715 	stw	r2,-36(fp)
         break;
   314c8:	00001e06 	br	31544 <sogetopt+0x490>
      }
      inp = (struct inpcb *)(so->so_pcb);
   314cc:	e0bffd17 	ldw	r2,-12(fp)
   314d0:	10800117 	ldw	r2,4(r2)
   314d4:	e0bffb15 	stw	r2,-20(fp)
      tp = intotcpcb(inp);
   314d8:	e0bffb17 	ldw	r2,-20(fp)
   314dc:	10800917 	ldw	r2,36(r2)
   314e0:	e0bffc15 	stw	r2,-16(fp)
      if (!tp)
   314e4:	e0bffc17 	ldw	r2,-16(fp)
   314e8:	1000031e 	bne	r2,zero,314f8 <sogetopt+0x444>
      {
         error = ENOTCONN;
   314ec:	00802004 	movi	r2,128
   314f0:	e0bff715 	stw	r2,-36(fp)
         break;
   314f4:	00001306 	br	31544 <sogetopt+0x490>
      }
      /* try to make sure that the argument pointer is valid */
      if (val == NULL)
   314f8:	e0bfff17 	ldw	r2,-4(fp)
   314fc:	1000031e 	bne	r2,zero,3150c <sogetopt+0x458>
      {
         error = ENP_PARAM;
   31500:	00bffd84 	movi	r2,-10
   31504:	e0bff715 	stw	r2,-36(fp)
         break;
   31508:	00000e06 	br	31544 <sogetopt+0x490>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
   3150c:	e0bffc17 	ldw	r2,-16(fp)
   31510:	10800b0b 	ldhu	r2,44(r2)
   31514:	10bfffcc 	andi	r2,r2,65535
   31518:	1080010c 	andi	r2,r2,4
   3151c:	10000426 	beq	r2,zero,31530 <sogetopt+0x47c>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
   31520:	e0bfff17 	ldw	r2,-4(fp)
   31524:	00c00044 	movi	r3,1
   31528:	10c00015 	stw	r3,0(r2)
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */

      break;
   3152c:	00000506 	br	31544 <sogetopt+0x490>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
   31530:	e0bfff17 	ldw	r2,-4(fp)
   31534:	10000015 	stw	zero,0(r2)

      break;
   31538:	00000206 	br	31544 <sogetopt+0x490>
   }

   default:
      return ENOPROTOOPT;
   3153c:	00801b44 	movi	r2,109
   31540:	00000106 	br	31548 <sogetopt+0x494>
   }
   return error;     /* no error */
   31544:	e0bff717 	ldw	r2,-36(fp)
}
   31548:	e037883a 	mov	sp,fp
   3154c:	dfc00117 	ldw	ra,4(sp)
   31550:	df000017 	ldw	fp,0(sp)
   31554:	dec00204 	addi	sp,sp,8
   31558:	f800283a 	ret

0003155c <sohasoutofband>:
 * RETURNS: 
 */

void
sohasoutofband(struct socket * so)
{
   3155c:	defffd04 	addi	sp,sp,-12
   31560:	dfc00215 	stw	ra,8(sp)
   31564:	df000115 	stw	fp,4(sp)
   31568:	df000104 	addi	fp,sp,4
   3156c:	e13fff15 	stw	r4,-4(fp)
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
   31570:	e0bfff17 	ldw	r2,-4(fp)
   31574:	00c03644 	movi	r3,217
   31578:	10c00615 	stw	r3,24(r2)
   sorwakeup (so);
   3157c:	e0bfff17 	ldw	r2,-4(fp)
   31580:	10800a04 	addi	r2,r2,40
   31584:	e13fff17 	ldw	r4,-4(fp)
   31588:	100b883a 	mov	r5,r2
   3158c:	0031d740 	call	31d74 <sbwakeup>
}
   31590:	e037883a 	mov	sp,fp
   31594:	dfc00117 	ldw	ra,4(sp)
   31598:	df000017 	ldw	fp,0(sp)
   3159c:	dec00204 	addi	sp,sp,8
   315a0:	f800283a 	ret

000315a4 <soisconnecting>:
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
   315a4:	defffd04 	addi	sp,sp,-12
   315a8:	dfc00215 	stw	ra,8(sp)
   315ac:	df000115 	stw	fp,4(sp)
   315b0:	df000104 	addi	fp,sp,4
   315b4:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
   315b8:	e0bfff17 	ldw	r2,-4(fp)
   315bc:	10c0088b 	ldhu	r3,34(r2)
   315c0:	00bffd44 	movi	r2,-11
   315c4:	1884703a 	and	r2,r3,r2
   315c8:	1007883a 	mov	r3,r2
   315cc:	e0bfff17 	ldw	r2,-4(fp)
   315d0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTING;
   315d4:	e0bfff17 	ldw	r2,-4(fp)
   315d8:	1080088b 	ldhu	r2,34(r2)
   315dc:	10800114 	ori	r2,r2,4
   315e0:	1007883a 	mov	r3,r2
   315e4:	e0bfff17 	ldw	r2,-4(fp)
   315e8:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
   315ec:	e0bfff17 	ldw	r2,-4(fp)
   315f0:	10800904 	addi	r2,r2,36
   315f4:	1009883a 	mov	r4,r2
   315f8:	00271c80 	call	271c8 <tcp_wakeup>
}
   315fc:	e037883a 	mov	sp,fp
   31600:	dfc00117 	ldw	ra,4(sp)
   31604:	df000017 	ldw	fp,0(sp)
   31608:	dec00204 	addi	sp,sp,8
   3160c:	f800283a 	ret

00031610 <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
   31610:	defffc04 	addi	sp,sp,-16
   31614:	dfc00315 	stw	ra,12(sp)
   31618:	df000215 	stw	fp,8(sp)
   3161c:	df000204 	addi	fp,sp,8
   31620:	e13fff15 	stw	r4,-4(fp)
   struct socket *   head  =  so->so_head;
   31624:	e0bfff17 	ldw	r2,-4(fp)
   31628:	10801b17 	ldw	r2,108(r2)
   3162c:	e0bffe15 	stw	r2,-8(fp)

   if (head) 
   31630:	e0bffe17 	ldw	r2,-8(fp)
   31634:	10001426 	beq	r2,zero,31688 <soisconnected+0x78>
   {
      if (soqremque(so, 0) == 0)
   31638:	e13fff17 	ldw	r4,-4(fp)
   3163c:	000b883a 	mov	r5,zero
   31640:	0031b200 	call	31b20 <soqremque>
   31644:	1000031e 	bne	r2,zero,31654 <soisconnected+0x44>
         panic("soisconnected");
   31648:	01000174 	movhi	r4,5
   3164c:	213b6604 	addi	r4,r4,-4712
   31650:	00267380 	call	26738 <panic>
      soqinsque(head, so, 1);
   31654:	e13ffe17 	ldw	r4,-8(fp)
   31658:	e17fff17 	ldw	r5,-4(fp)
   3165c:	01800044 	movi	r6,1
   31660:	0031a780 	call	31a78 <soqinsque>
      sorwakeup(head);
   31664:	e0bffe17 	ldw	r2,-8(fp)
   31668:	10800a04 	addi	r2,r2,40
   3166c:	e13ffe17 	ldw	r4,-8(fp)
   31670:	100b883a 	mov	r5,r2
   31674:	0031d740 	call	31d74 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
   31678:	e0bffe17 	ldw	r2,-8(fp)
   3167c:	10800904 	addi	r2,r2,36
   31680:	1009883a 	mov	r4,r2
   31684:	00271c80 	call	271c8 <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
   31688:	e0bfff17 	ldw	r2,-4(fp)
   3168c:	10c0088b 	ldhu	r3,34(r2)
   31690:	00bffcc4 	movi	r2,-13
   31694:	1884703a 	and	r2,r3,r2
   31698:	1007883a 	mov	r3,r2
   3169c:	e0bfff17 	ldw	r2,-4(fp)
   316a0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTED;
   316a4:	e0bfff17 	ldw	r2,-4(fp)
   316a8:	1080088b 	ldhu	r2,34(r2)
   316ac:	10800094 	ori	r2,r2,2
   316b0:	1007883a 	mov	r3,r2
   316b4:	e0bfff17 	ldw	r2,-4(fp)
   316b8:	10c0088d 	sth	r3,34(r2)
   so->so_error = 0;
   316bc:	e0bfff17 	ldw	r2,-4(fp)
   316c0:	10000615 	stw	zero,24(r2)
   tcp_wakeup  ((char *)&so->so_timeo);
   316c4:	e0bfff17 	ldw	r2,-4(fp)
   316c8:	10800904 	addi	r2,r2,36
   316cc:	1009883a 	mov	r4,r2
   316d0:	00271c80 	call	271c8 <tcp_wakeup>
   sorwakeup (so);
   316d4:	e0bfff17 	ldw	r2,-4(fp)
   316d8:	10800a04 	addi	r2,r2,40
   316dc:	e13fff17 	ldw	r4,-4(fp)
   316e0:	100b883a 	mov	r5,r2
   316e4:	0031d740 	call	31d74 <sbwakeup>
   sowwakeup (so);
   316e8:	e0bfff17 	ldw	r2,-4(fp)
   316ec:	10801204 	addi	r2,r2,72
   316f0:	e13fff17 	ldw	r4,-4(fp)
   316f4:	100b883a 	mov	r5,r2
   316f8:	0031d740 	call	31d74 <sbwakeup>
}
   316fc:	e037883a 	mov	sp,fp
   31700:	dfc00117 	ldw	ra,4(sp)
   31704:	df000017 	ldw	fp,0(sp)
   31708:	dec00204 	addi	sp,sp,8
   3170c:	f800283a 	ret

00031710 <soisdisconnecting>:
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
   31710:	defffd04 	addi	sp,sp,-12
   31714:	dfc00215 	stw	ra,8(sp)
   31718:	df000115 	stw	fp,4(sp)
   3171c:	df000104 	addi	fp,sp,4
   31720:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~SS_ISCONNECTING;
   31724:	e0bfff17 	ldw	r2,-4(fp)
   31728:	10c0088b 	ldhu	r3,34(r2)
   3172c:	00bffec4 	movi	r2,-5
   31730:	1884703a 	and	r2,r3,r2
   31734:	1007883a 	mov	r3,r2
   31738:	e0bfff17 	ldw	r2,-4(fp)
   3173c:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
   31740:	e0bfff17 	ldw	r2,-4(fp)
   31744:	1080088b 	ldhu	r2,34(r2)
   31748:	10800e14 	ori	r2,r2,56
   3174c:	1007883a 	mov	r3,r2
   31750:	e0bfff17 	ldw	r2,-4(fp)
   31754:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup  ((char *)&so->so_timeo);   
   31758:	e0bfff17 	ldw	r2,-4(fp)
   3175c:	10800904 	addi	r2,r2,36
   31760:	1009883a 	mov	r4,r2
   31764:	00271c80 	call	271c8 <tcp_wakeup>
   sowwakeup (so);
   31768:	e0bfff17 	ldw	r2,-4(fp)
   3176c:	10801204 	addi	r2,r2,72
   31770:	e13fff17 	ldw	r4,-4(fp)
   31774:	100b883a 	mov	r5,r2
   31778:	0031d740 	call	31d74 <sbwakeup>
   sorwakeup (so);
   3177c:	e0bfff17 	ldw	r2,-4(fp)
   31780:	10800a04 	addi	r2,r2,40
   31784:	e13fff17 	ldw	r4,-4(fp)
   31788:	100b883a 	mov	r5,r2
   3178c:	0031d740 	call	31d74 <sbwakeup>
}
   31790:	e037883a 	mov	sp,fp
   31794:	dfc00117 	ldw	ra,4(sp)
   31798:	df000017 	ldw	fp,0(sp)
   3179c:	dec00204 	addi	sp,sp,8
   317a0:	f800283a 	ret

000317a4 <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
   317a4:	defffd04 	addi	sp,sp,-12
   317a8:	dfc00215 	stw	ra,8(sp)
   317ac:	df000115 	stw	fp,4(sp)
   317b0:	df000104 	addi	fp,sp,4
   317b4:	e13fff15 	stw	r4,-4(fp)
   if (so->so_state & SS_ISCONNECTING)
   317b8:	e0bfff17 	ldw	r2,-4(fp)
   317bc:	1080088b 	ldhu	r2,34(r2)
   317c0:	10bfffcc 	andi	r2,r2,65535
   317c4:	1080010c 	andi	r2,r2,4
   317c8:	10000626 	beq	r2,zero,317e4 <soisdisconnected+0x40>
      so->so_state |= SS_WASCONNECTING;
   317cc:	e0bfff17 	ldw	r2,-4(fp)
   317d0:	1080088b 	ldhu	r2,34(r2)
   317d4:	10880014 	ori	r2,r2,8192
   317d8:	1007883a 	mov	r3,r2
   317dc:	e0bfff17 	ldw	r2,-4(fp)
   317e0:	10c0088d 	sth	r3,34(r2)
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
   317e4:	e0bfff17 	ldw	r2,-4(fp)
   317e8:	10c0088b 	ldhu	r3,34(r2)
   317ec:	00bffc44 	movi	r2,-15
   317f0:	1884703a 	and	r2,r3,r2
   317f4:	1007883a 	mov	r3,r2
   317f8:	e0bfff17 	ldw	r2,-4(fp)
   317fc:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
   31800:	e0bfff17 	ldw	r2,-4(fp)
   31804:	1080088b 	ldhu	r2,34(r2)
   31808:	10800c14 	ori	r2,r2,48
   3180c:	1007883a 	mov	r3,r2
   31810:	e0bfff17 	ldw	r2,-4(fp)
   31814:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
   31818:	e0bfff17 	ldw	r2,-4(fp)
   3181c:	10800904 	addi	r2,r2,36
   31820:	1009883a 	mov	r4,r2
   31824:	00271c80 	call	271c8 <tcp_wakeup>
   sowwakeup (so);
   31828:	e0bfff17 	ldw	r2,-4(fp)
   3182c:	10801204 	addi	r2,r2,72
   31830:	e13fff17 	ldw	r4,-4(fp)
   31834:	100b883a 	mov	r5,r2
   31838:	0031d740 	call	31d74 <sbwakeup>
   sorwakeup (so);
   3183c:	e0bfff17 	ldw	r2,-4(fp)
   31840:	10800a04 	addi	r2,r2,40
   31844:	e13fff17 	ldw	r4,-4(fp)
   31848:	100b883a 	mov	r5,r2
   3184c:	0031d740 	call	31d74 <sbwakeup>
}
   31850:	e037883a 	mov	sp,fp
   31854:	dfc00117 	ldw	ra,4(sp)
   31858:	df000017 	ldw	fp,0(sp)
   3185c:	dec00204 	addi	sp,sp,8
   31860:	f800283a 	ret

00031864 <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
   31864:	defffb04 	addi	sp,sp,-20
   31868:	dfc00415 	stw	ra,16(sp)
   3186c:	df000315 	stw	fp,12(sp)
   31870:	df000304 	addi	fp,sp,12
   31874:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
   31878:	e0bfff17 	ldw	r2,-4(fp)
   3187c:	10801e43 	ldbu	r2,121(r2)
   31880:	10c03fcc 	andi	r3,r2,255
   31884:	18c0201c 	xori	r3,r3,128
   31888:	18ffe004 	addi	r3,r3,-128
   3188c:	e0bfff17 	ldw	r2,-4(fp)
   31890:	10801e03 	ldbu	r2,120(r2)
   31894:	10803fcc 	andi	r2,r2,255
   31898:	1080201c 	xori	r2,r2,128
   3189c:	10bfe004 	addi	r2,r2,-128
   318a0:	1889883a 	add	r4,r3,r2
   318a4:	e0bfff17 	ldw	r2,-4(fp)
   318a8:	10801e83 	ldbu	r2,122(r2)
   318ac:	10c03fcc 	andi	r3,r2,255
   318b0:	18c0201c 	xori	r3,r3,128
   318b4:	18ffe004 	addi	r3,r3,-128
   318b8:	1805883a 	mov	r2,r3
   318bc:	1085883a 	add	r2,r2,r2
   318c0:	10c5883a 	add	r2,r2,r3
   318c4:	1006d7fa 	srli	r3,r2,31
   318c8:	1885883a 	add	r2,r3,r2
   318cc:	1005d07a 	srai	r2,r2,1
   318d0:	1100010e 	bge	r2,r4,318d8 <sonewconn+0x74>
      goto bad;
   318d4:	00006206 	br	31a60 <sonewconn+0x1fc>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
   318d8:	01002104 	movi	r4,132
   318dc:	002bce00 	call	2bce0 <npalloc>
   318e0:	e0bffd15 	stw	r2,-12(fp)
   318e4:	e0bffd17 	ldw	r2,-12(fp)
   318e8:	1000011e 	bne	r2,zero,318f0 <sonewconn+0x8c>
      goto bad;
   318ec:	00005c06 	br	31a60 <sonewconn+0x1fc>
   so->next = NULL;
   318f0:	e0bffd17 	ldw	r2,-12(fp)
   318f4:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
   318f8:	010001b4 	movhi	r4,6
   318fc:	2138d804 	addi	r4,r4,-7328
   31900:	e17ffd17 	ldw	r5,-12(fp)
   31904:	002aacc0 	call	2aacc <putq>
   so->so_type = head->so_type;
   31908:	e0bfff17 	ldw	r2,-4(fp)
   3190c:	10c00983 	ldbu	r3,38(r2)
   31910:	e0bffd17 	ldw	r2,-12(fp)
   31914:	10c00985 	stb	r3,38(r2)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
   31918:	e0bfff17 	ldw	r2,-4(fp)
   3191c:	10c00417 	ldw	r3,16(r2)
   31920:	00bfff44 	movi	r2,-3
   31924:	1886703a 	and	r3,r3,r2
   31928:	e0bffd17 	ldw	r2,-12(fp)
   3192c:	10c00415 	stw	r3,16(r2)
   so->so_linger = head->so_linger;
   31930:	e0bfff17 	ldw	r2,-4(fp)
   31934:	10c0080b 	ldhu	r3,32(r2)
   31938:	e0bffd17 	ldw	r2,-12(fp)
   3193c:	10c0080d 	sth	r3,32(r2)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
   31940:	e0bfff17 	ldw	r2,-4(fp)
   31944:	1080088b 	ldhu	r2,34(r2)
   31948:	10800054 	ori	r2,r2,1
   3194c:	1007883a 	mov	r3,r2
   31950:	e0bffd17 	ldw	r2,-12(fp)
   31954:	10c0088d 	sth	r3,34(r2)
   so->so_proto = head->so_proto;
   31958:	e0bfff17 	ldw	r2,-4(fp)
   3195c:	10c00217 	ldw	r3,8(r2)
   31960:	e0bffd17 	ldw	r2,-12(fp)
   31964:	10c00215 	stw	r3,8(r2)
   so->so_timeo = head->so_timeo;
   31968:	e0bfff17 	ldw	r2,-4(fp)
   3196c:	10c0090b 	ldhu	r3,36(r2)
   31970:	e0bffd17 	ldw	r2,-12(fp)
   31974:	10c0090d 	sth	r3,36(r2)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
   31978:	00800174 	movhi	r2,5
   3197c:	10876804 	addi	r2,r2,7584
   31980:	10c00017 	ldw	r3,0(r2)
   31984:	e0bffd17 	ldw	r2,-12(fp)
   31988:	10c00b15 	stw	r3,44(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
   3198c:	00800174 	movhi	r2,5
   31990:	10876704 	addi	r2,r2,7580
   31994:	10c00017 	ldw	r3,0(r2)
   31998:	e0bffd17 	ldw	r2,-12(fp)
   3199c:	10c01315 	stw	r3,76(r2)
   soqinsque (head, so, 0);
   319a0:	e13fff17 	ldw	r4,-4(fp)
   319a4:	e17ffd17 	ldw	r5,-12(fp)
   319a8:	000d883a 	mov	r6,zero
   319ac:	0031a780 	call	31a78 <soqinsque>
   so->so_req = PRU_ATTACH;
   319b0:	e0bffd17 	ldw	r2,-12(fp)
   319b4:	10000715 	stw	zero,28(r2)
   so->so_domain = head->so_domain;
   319b8:	e0bfff17 	ldw	r2,-4(fp)
   319bc:	10c00517 	ldw	r3,20(r2)
   319c0:	e0bffd17 	ldw	r2,-12(fp)
   319c4:	10c00515 	stw	r3,20(r2)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
   319c8:	e0bffd17 	ldw	r2,-12(fp)
   319cc:	10800217 	ldw	r2,8(r2)
   319d0:	10800317 	ldw	r2,12(r2)
   319d4:	e13ffd17 	ldw	r4,-12(fp)
   319d8:	000b883a 	mov	r5,zero
   319dc:	000d883a 	mov	r6,zero
   319e0:	103ee83a 	callr	r2
   319e4:	10000126 	beq	r2,zero,319ec <sonewconn+0x188>
      goto bad2;
   319e8:	00001406 	br	31a3c <sonewconn+0x1d8>
   if (so_evtmap)
   319ec:	00800174 	movhi	r2,5
   319f0:	108fe404 	addi	r2,r2,16272
   319f4:	10800003 	ldbu	r2,0(r2)
   319f8:	10803fcc 	andi	r2,r2,255
   319fc:	10000d26 	beq	r2,zero,31a34 <sonewconn+0x1d0>
   {
      rc = (*so_evtmap_create) (so);                       
   31a00:	00800174 	movhi	r2,5
   31a04:	108fe204 	addi	r2,r2,16264
   31a08:	10800017 	ldw	r2,0(r2)
   31a0c:	e13ffd17 	ldw	r4,-12(fp)
   31a10:	103ee83a 	callr	r2
   31a14:	e0bffe15 	stw	r2,-8(fp)
      if (rc != 0) goto bad2;
   31a18:	e0bffe17 	ldw	r2,-8(fp)
   31a1c:	10000126 	beq	r2,zero,31a24 <sonewconn+0x1c0>
   31a20:	00000606 	br	31a3c <sonewconn+0x1d8>
      so->owner = head->owner;
   31a24:	e0bfff17 	ldw	r2,-4(fp)
   31a28:	10c02003 	ldbu	r3,128(r2)
   31a2c:	e0bffd17 	ldw	r2,-12(fp)
   31a30:	10c02005 	stb	r3,128(r2)
   }
   return (so);
   31a34:	e0bffd17 	ldw	r2,-12(fp)
   31a38:	00000a06 	br	31a64 <sonewconn+0x200>
   
bad2:
   (void) soqremque (so, 0);
   31a3c:	e13ffd17 	ldw	r4,-12(fp)
   31a40:	000b883a 	mov	r5,zero
   31a44:	0031b200 	call	31b20 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   31a48:	010001b4 	movhi	r4,6
   31a4c:	2138d804 	addi	r4,r4,-7328
   31a50:	e17ffd17 	ldw	r5,-12(fp)
   31a54:	002ab780 	call	2ab78 <qdel>
   SOC_FREE(so);  /* Free the socket structure */
   31a58:	e13ffd17 	ldw	r4,-12(fp)
   31a5c:	002bd140 	call	2bd14 <npfree>
bad:
   return ((struct socket *)0);
   31a60:	0005883a 	mov	r2,zero
}
   31a64:	e037883a 	mov	sp,fp
   31a68:	dfc00117 	ldw	ra,4(sp)
   31a6c:	df000017 	ldw	fp,0(sp)
   31a70:	dec00204 	addi	sp,sp,8
   31a74:	f800283a 	ret

00031a78 <soqinsque>:

void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
   31a78:	defffc04 	addi	sp,sp,-16
   31a7c:	df000315 	stw	fp,12(sp)
   31a80:	df000304 	addi	fp,sp,12
   31a84:	e13ffd15 	stw	r4,-12(fp)
   31a88:	e17ffe15 	stw	r5,-8(fp)
   31a8c:	e1bfff15 	stw	r6,-4(fp)
   so->so_head = head;
   31a90:	e0bffe17 	ldw	r2,-8(fp)
   31a94:	e0fffd17 	ldw	r3,-12(fp)
   31a98:	10c01b15 	stw	r3,108(r2)
   if (q == 0) 
   31a9c:	e0bfff17 	ldw	r2,-4(fp)
   31aa0:	10000e1e 	bne	r2,zero,31adc <soqinsque+0x64>
   {
      head->so_q0len++;
   31aa4:	e0bffd17 	ldw	r2,-12(fp)
   31aa8:	10801e03 	ldbu	r2,120(r2)
   31aac:	10800044 	addi	r2,r2,1
   31ab0:	1007883a 	mov	r3,r2
   31ab4:	e0bffd17 	ldw	r2,-12(fp)
   31ab8:	10c01e05 	stb	r3,120(r2)
      so->so_q0 = head->so_q0;
   31abc:	e0bffd17 	ldw	r2,-12(fp)
   31ac0:	10c01c17 	ldw	r3,112(r2)
   31ac4:	e0bffe17 	ldw	r2,-8(fp)
   31ac8:	10c01c15 	stw	r3,112(r2)
      head->so_q0 = so;
   31acc:	e0bffd17 	ldw	r2,-12(fp)
   31ad0:	e0fffe17 	ldw	r3,-8(fp)
   31ad4:	10c01c15 	stw	r3,112(r2)
   31ad8:	00000d06 	br	31b10 <soqinsque+0x98>
   } else 
   {
      head->so_qlen++;
   31adc:	e0bffd17 	ldw	r2,-12(fp)
   31ae0:	10801e43 	ldbu	r2,121(r2)
   31ae4:	10800044 	addi	r2,r2,1
   31ae8:	1007883a 	mov	r3,r2
   31aec:	e0bffd17 	ldw	r2,-12(fp)
   31af0:	10c01e45 	stb	r3,121(r2)
      so->so_q = head->so_q;
   31af4:	e0bffd17 	ldw	r2,-12(fp)
   31af8:	10c01d17 	ldw	r3,116(r2)
   31afc:	e0bffe17 	ldw	r2,-8(fp)
   31b00:	10c01d15 	stw	r3,116(r2)
      head->so_q = so;
   31b04:	e0bffd17 	ldw	r2,-12(fp)
   31b08:	e0fffe17 	ldw	r3,-8(fp)
   31b0c:	10c01d15 	stw	r3,116(r2)
   }
}
   31b10:	e037883a 	mov	sp,fp
   31b14:	df000017 	ldw	fp,0(sp)
   31b18:	dec00104 	addi	sp,sp,4
   31b1c:	f800283a 	ret

00031b20 <soqremque>:
 * RETURNS: 
 */

int
soqremque(struct socket * so, int q)
{
   31b20:	defffa04 	addi	sp,sp,-24
   31b24:	df000515 	stw	fp,20(sp)
   31b28:	df000504 	addi	fp,sp,20
   31b2c:	e13ffe15 	stw	r4,-8(fp)
   31b30:	e17fff15 	stw	r5,-4(fp)
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
   31b34:	e0bffe17 	ldw	r2,-8(fp)
   31b38:	10801b17 	ldw	r2,108(r2)
   31b3c:	e0bffc15 	stw	r2,-16(fp)
   prev = head;
   31b40:	e0bffc17 	ldw	r2,-16(fp)
   31b44:	e0bffb15 	stw	r2,-20(fp)
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
   31b48:	e0bfff17 	ldw	r2,-4(fp)
   31b4c:	10000326 	beq	r2,zero,31b5c <soqremque+0x3c>
   31b50:	e0bffb17 	ldw	r2,-20(fp)
   31b54:	10801d17 	ldw	r2,116(r2)
   31b58:	00000206 	br	31b64 <soqremque+0x44>
   31b5c:	e0bffb17 	ldw	r2,-20(fp)
   31b60:	10801c17 	ldw	r2,112(r2)
   31b64:	e0bffd15 	stw	r2,-12(fp)
      if (next == so)
   31b68:	e0fffd17 	ldw	r3,-12(fp)
   31b6c:	e0bffe17 	ldw	r2,-8(fp)
   31b70:	1880041e 	bne	r3,r2,31b84 <soqremque+0x64>
         break;
   31b74:	0001883a 	nop
      if (next == head)
         return (0);
      prev = next;
   }
   if (q == 0) 
   31b78:	e0bfff17 	ldw	r2,-4(fp)
   31b7c:	1000141e 	bne	r2,zero,31bd0 <soqremque+0xb0>
   31b80:	00000806 	br	31ba4 <soqremque+0x84>
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
      if (next == so)
         break;
      if (next == head)
   31b84:	e0fffd17 	ldw	r3,-12(fp)
   31b88:	e0bffc17 	ldw	r2,-16(fp)
   31b8c:	1880021e 	bne	r3,r2,31b98 <soqremque+0x78>
         return (0);
   31b90:	0005883a 	mov	r2,zero
   31b94:	00002106 	br	31c1c <soqremque+0xfc>
      prev = next;
   31b98:	e0bffd17 	ldw	r2,-12(fp)
   31b9c:	e0bffb15 	stw	r2,-20(fp)
   }
   31ba0:	003fe906 	br	31b48 <__alt_mem_descriptor_memory+0xdeff1b48>
   if (q == 0) 
   {
      prev->so_q0 = next->so_q0;
   31ba4:	e0bffd17 	ldw	r2,-12(fp)
   31ba8:	10c01c17 	ldw	r3,112(r2)
   31bac:	e0bffb17 	ldw	r2,-20(fp)
   31bb0:	10c01c15 	stw	r3,112(r2)
      head->so_q0len--;
   31bb4:	e0bffc17 	ldw	r2,-16(fp)
   31bb8:	10801e03 	ldbu	r2,120(r2)
   31bbc:	10bfffc4 	addi	r2,r2,-1
   31bc0:	1007883a 	mov	r3,r2
   31bc4:	e0bffc17 	ldw	r2,-16(fp)
   31bc8:	10c01e05 	stb	r3,120(r2)
   31bcc:	00000a06 	br	31bf8 <soqremque+0xd8>
   } else 
   {
      prev->so_q = next->so_q;
   31bd0:	e0bffd17 	ldw	r2,-12(fp)
   31bd4:	10c01d17 	ldw	r3,116(r2)
   31bd8:	e0bffb17 	ldw	r2,-20(fp)
   31bdc:	10c01d15 	stw	r3,116(r2)
      head->so_qlen--;
   31be0:	e0bffc17 	ldw	r2,-16(fp)
   31be4:	10801e43 	ldbu	r2,121(r2)
   31be8:	10bfffc4 	addi	r2,r2,-1
   31bec:	1007883a 	mov	r3,r2
   31bf0:	e0bffc17 	ldw	r2,-16(fp)
   31bf4:	10c01e45 	stb	r3,121(r2)
   }
   next->so_q0 = next->so_q = 0;
   31bf8:	e0bffd17 	ldw	r2,-12(fp)
   31bfc:	10001d15 	stw	zero,116(r2)
   31c00:	e0bffd17 	ldw	r2,-12(fp)
   31c04:	10c01d17 	ldw	r3,116(r2)
   31c08:	e0bffd17 	ldw	r2,-12(fp)
   31c0c:	10c01c15 	stw	r3,112(r2)
   next->so_head = 0;
   31c10:	e0bffd17 	ldw	r2,-12(fp)
   31c14:	10001b15 	stw	zero,108(r2)
   return 1;
   31c18:	00800044 	movi	r2,1
}
   31c1c:	e037883a 	mov	sp,fp
   31c20:	df000017 	ldw	fp,0(sp)
   31c24:	dec00104 	addi	sp,sp,4
   31c28:	f800283a 	ret

00031c2c <socantsendmore>:
 * RETURNS: 
 */

void
socantsendmore(struct socket * so)
{
   31c2c:	defffd04 	addi	sp,sp,-12
   31c30:	dfc00215 	stw	ra,8(sp)
   31c34:	df000115 	stw	fp,4(sp)
   31c38:	df000104 	addi	fp,sp,4
   31c3c:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTSENDMORE;
   31c40:	e0bfff17 	ldw	r2,-4(fp)
   31c44:	1080088b 	ldhu	r2,34(r2)
   31c48:	10800414 	ori	r2,r2,16
   31c4c:	1007883a 	mov	r3,r2
   31c50:	e0bfff17 	ldw	r2,-4(fp)
   31c54:	10c0088d 	sth	r3,34(r2)
   sowwakeup(so);
   31c58:	e0bfff17 	ldw	r2,-4(fp)
   31c5c:	10801204 	addi	r2,r2,72
   31c60:	e13fff17 	ldw	r4,-4(fp)
   31c64:	100b883a 	mov	r5,r2
   31c68:	0031d740 	call	31d74 <sbwakeup>
}
   31c6c:	e037883a 	mov	sp,fp
   31c70:	dfc00117 	ldw	ra,4(sp)
   31c74:	df000017 	ldw	fp,0(sp)
   31c78:	dec00204 	addi	sp,sp,8
   31c7c:	f800283a 	ret

00031c80 <socantrcvmore>:
 * RETURNS: 
 */

void
socantrcvmore(struct socket * so)
{
   31c80:	defffd04 	addi	sp,sp,-12
   31c84:	dfc00215 	stw	ra,8(sp)
   31c88:	df000115 	stw	fp,4(sp)
   31c8c:	df000104 	addi	fp,sp,4
   31c90:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTRCVMORE;
   31c94:	e0bfff17 	ldw	r2,-4(fp)
   31c98:	1080088b 	ldhu	r2,34(r2)
   31c9c:	10800814 	ori	r2,r2,32
   31ca0:	1007883a 	mov	r3,r2
   31ca4:	e0bfff17 	ldw	r2,-4(fp)
   31ca8:	10c0088d 	sth	r3,34(r2)
   sorwakeup(so);
   31cac:	e0bfff17 	ldw	r2,-4(fp)
   31cb0:	10800a04 	addi	r2,r2,40
   31cb4:	e13fff17 	ldw	r4,-4(fp)
   31cb8:	100b883a 	mov	r5,r2
   31cbc:	0031d740 	call	31d74 <sbwakeup>
}
   31cc0:	e037883a 	mov	sp,fp
   31cc4:	dfc00117 	ldw	ra,4(sp)
   31cc8:	df000017 	ldw	fp,0(sp)
   31ccc:	dec00204 	addi	sp,sp,8
   31cd0:	f800283a 	ret

00031cd4 <sbselqueue>:
 * RETURNS: 
 */

void
sbselqueue(struct sockbuf * sb)
{
   31cd4:	defffe04 	addi	sp,sp,-8
   31cd8:	df000115 	stw	fp,4(sp)
   31cdc:	df000104 	addi	fp,sp,4
   31ce0:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_SEL;
   31ce4:	e0bfff17 	ldw	r2,-4(fp)
   31ce8:	1080070b 	ldhu	r2,28(r2)
   31cec:	10800214 	ori	r2,r2,8
   31cf0:	1007883a 	mov	r3,r2
   31cf4:	e0bfff17 	ldw	r2,-4(fp)
   31cf8:	10c0070d 	sth	r3,28(r2)
}
   31cfc:	e037883a 	mov	sp,fp
   31d00:	df000017 	ldw	fp,0(sp)
   31d04:	dec00104 	addi	sp,sp,4
   31d08:	f800283a 	ret

00031d0c <sbwait>:
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
   31d0c:	defffd04 	addi	sp,sp,-12
   31d10:	dfc00215 	stw	ra,8(sp)
   31d14:	df000115 	stw	fp,4(sp)
   31d18:	df000104 	addi	fp,sp,4
   31d1c:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_WAIT;
   31d20:	e0bfff17 	ldw	r2,-4(fp)
   31d24:	1080070b 	ldhu	r2,28(r2)
   31d28:	10800114 	ori	r2,r2,4
   31d2c:	1007883a 	mov	r3,r2
   31d30:	e0bfff17 	ldw	r2,-4(fp)
   31d34:	10c0070d 	sth	r3,28(r2)
   tcp_sleep ((char *)&sb->sb_cc);
   31d38:	e0bfff17 	ldw	r2,-4(fp)
   31d3c:	1009883a 	mov	r4,r2
   31d40:	00270240 	call	27024 <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
   31d44:	e0bfff17 	ldw	r2,-4(fp)
   31d48:	10c0070b 	ldhu	r3,28(r2)
   31d4c:	00bffec4 	movi	r2,-5
   31d50:	1884703a 	and	r2,r3,r2
   31d54:	1007883a 	mov	r3,r2
   31d58:	e0bfff17 	ldw	r2,-4(fp)
   31d5c:	10c0070d 	sth	r3,28(r2)
}
   31d60:	e037883a 	mov	sp,fp
   31d64:	dfc00117 	ldw	ra,4(sp)
   31d68:	df000017 	ldw	fp,0(sp)
   31d6c:	dec00204 	addi	sp,sp,8
   31d70:	f800283a 	ret

00031d74 <sbwakeup>:
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
   31d74:	defffc04 	addi	sp,sp,-16
   31d78:	dfc00315 	stw	ra,12(sp)
   31d7c:	df000215 	stw	fp,8(sp)
   31d80:	df000204 	addi	fp,sp,8
   31d84:	e13ffe15 	stw	r4,-8(fp)
   31d88:	e17fff15 	stw	r5,-4(fp)
   if (sb->sb_flags & SB_SEL) 
   31d8c:	e0bfff17 	ldw	r2,-4(fp)
   31d90:	1080070b 	ldhu	r2,28(r2)
   31d94:	10bfffcc 	andi	r2,r2,65535
   31d98:	1080020c 	andi	r2,r2,8
   31d9c:	10000d26 	beq	r2,zero,31dd4 <sbwakeup+0x60>
   {
      select_wait = 0;
   31da0:	00800174 	movhi	r2,5
   31da4:	108fc604 	addi	r2,r2,16152
   31da8:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
   31dac:	01000174 	movhi	r4,5
   31db0:	210fc604 	addi	r4,r4,16152
   31db4:	00271c80 	call	271c8 <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
   31db8:	e0bfff17 	ldw	r2,-4(fp)
   31dbc:	10c0070b 	ldhu	r3,28(r2)
   31dc0:	00bffdc4 	movi	r2,-9
   31dc4:	1884703a 	and	r2,r3,r2
   31dc8:	1007883a 	mov	r3,r2
   31dcc:	e0bfff17 	ldw	r2,-4(fp)
   31dd0:	10c0070d 	sth	r3,28(r2)
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
   31dd4:	e0bfff17 	ldw	r2,-4(fp)
   31dd8:	1080070b 	ldhu	r2,28(r2)
   31ddc:	10bfffcc 	andi	r2,r2,65535
   31de0:	1080010c 	andi	r2,r2,4
   31de4:	10000326 	beq	r2,zero,31df4 <sbwakeup+0x80>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
   31de8:	e0bfff17 	ldw	r2,-4(fp)
   31dec:	1009883a 	mov	r4,r2
   31df0:	00271c80 	call	271c8 <tcp_wakeup>
   }
#endif   /* SOCK_WAKEALWAYS */
}
   31df4:	e037883a 	mov	sp,fp
   31df8:	dfc00117 	ldw	ra,4(sp)
   31dfc:	df000017 	ldw	fp,0(sp)
   31e00:	dec00204 	addi	sp,sp,8
   31e04:	f800283a 	ret

00031e08 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
   31e08:	defffb04 	addi	sp,sp,-20
   31e0c:	dfc00415 	stw	ra,16(sp)
   31e10:	df000315 	stw	fp,12(sp)
   31e14:	df000304 	addi	fp,sp,12
   31e18:	e13ffd15 	stw	r4,-12(fp)
   31e1c:	e17ffe15 	stw	r5,-8(fp)
   31e20:	e1bfff15 	stw	r6,-4(fp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
   31e24:	e0bffd17 	ldw	r2,-12(fp)
   31e28:	10801204 	addi	r2,r2,72
   31e2c:	1009883a 	mov	r4,r2
   31e30:	e17ffe17 	ldw	r5,-8(fp)
   31e34:	0031e900 	call	31e90 <sbreserve>
   31e38:	1000011e 	bne	r2,zero,31e40 <soreserve+0x38>
      goto bad;
   31e3c:	00000e06 	br	31e78 <soreserve+0x70>
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
   31e40:	e0bffd17 	ldw	r2,-12(fp)
   31e44:	10800a04 	addi	r2,r2,40
   31e48:	1009883a 	mov	r4,r2
   31e4c:	e17fff17 	ldw	r5,-4(fp)
   31e50:	0031e900 	call	31e90 <sbreserve>
   31e54:	1000061e 	bne	r2,zero,31e70 <soreserve+0x68>
      goto bad2;
   31e58:	0001883a 	nop
   return (0);
bad2:
   sbrelease(&so->so_snd);
   31e5c:	e0bffd17 	ldw	r2,-12(fp)
   31e60:	10801204 	addi	r2,r2,72
   31e64:	1009883a 	mov	r4,r2
   31e68:	0031ee00 	call	31ee0 <sbrelease>
   31e6c:	00000206 	br	31e78 <soreserve+0x70>
{
   if (sbreserve(&so->so_snd, sndcc) == 0)
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
      goto bad2;
   return (0);
   31e70:	0005883a 	mov	r2,zero
   31e74:	00000106 	br	31e7c <soreserve+0x74>
bad2:
   sbrelease(&so->so_snd);
bad:
   return (ENOBUFS);
   31e78:	00801a44 	movi	r2,105
}
   31e7c:	e037883a 	mov	sp,fp
   31e80:	dfc00117 	ldw	ra,4(sp)
   31e84:	df000017 	ldw	fp,0(sp)
   31e88:	dec00204 	addi	sp,sp,8
   31e8c:	f800283a 	ret

00031e90 <sbreserve>:
 * RETURNS: 
 */

int
sbreserve(struct sockbuf * sb, u_long cc)
{
   31e90:	defffd04 	addi	sp,sp,-12
   31e94:	df000215 	stw	fp,8(sp)
   31e98:	df000204 	addi	fp,sp,8
   31e9c:	e13ffe15 	stw	r4,-8(fp)
   31ea0:	e17fff15 	stw	r5,-4(fp)
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
   31ea4:	e0bffe17 	ldw	r2,-8(fp)
   31ea8:	e0ffff17 	ldw	r3,-4(fp)
   31eac:	10c00115 	stw	r3,4(r2)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
   31eb0:	e0bfff17 	ldw	r2,-4(fp)
   31eb4:	1085883a 	add	r2,r2,r2
   31eb8:	10d00070 	cmpltui	r3,r2,16385
   31ebc:	1800011e 	bne	r3,zero,31ec4 <sbreserve+0x34>
   31ec0:	00900004 	movi	r2,16384
   31ec4:	e0fffe17 	ldw	r3,-8(fp)
   31ec8:	18800315 	stw	r2,12(r3)
   return (1);
   31ecc:	00800044 	movi	r2,1
}
   31ed0:	e037883a 	mov	sp,fp
   31ed4:	df000017 	ldw	fp,0(sp)
   31ed8:	dec00104 	addi	sp,sp,4
   31edc:	f800283a 	ret

00031ee0 <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
   31ee0:	defffd04 	addi	sp,sp,-12
   31ee4:	dfc00215 	stw	ra,8(sp)
   31ee8:	df000115 	stw	fp,4(sp)
   31eec:	df000104 	addi	fp,sp,4
   31ef0:	e13fff15 	stw	r4,-4(fp)
   sbflush(sb);
   31ef4:	e13fff17 	ldw	r4,-4(fp)
   31ef8:	003244c0 	call	3244c <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
   31efc:	e0bfff17 	ldw	r2,-4(fp)
   31f00:	10000315 	stw	zero,12(r2)
   31f04:	e0bfff17 	ldw	r2,-4(fp)
   31f08:	10c00317 	ldw	r3,12(r2)
   31f0c:	e0bfff17 	ldw	r2,-4(fp)
   31f10:	10c00115 	stw	r3,4(r2)
}
   31f14:	e037883a 	mov	sp,fp
   31f18:	dfc00117 	ldw	ra,4(sp)
   31f1c:	df000017 	ldw	fp,0(sp)
   31f20:	dec00204 	addi	sp,sp,8
   31f24:	f800283a 	ret

00031f28 <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
   31f28:	defffb04 	addi	sp,sp,-20
   31f2c:	dfc00415 	stw	ra,16(sp)
   31f30:	df000315 	stw	fp,12(sp)
   31f34:	df000304 	addi	fp,sp,12
   31f38:	e13ffe15 	stw	r4,-8(fp)
   31f3c:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  n;

   if (m == 0)
   31f40:	e0bfff17 	ldw	r2,-4(fp)
   31f44:	1000011e 	bne	r2,zero,31f4c <sbappend+0x24>
      return;
   31f48:	00001906 	br	31fb0 <sbappend+0x88>
   ENTER_CRIT_SECTION(sb);
   31f4c:	002b2e40 	call	2b2e4 <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
   31f50:	e0bffe17 	ldw	r2,-8(fp)
   31f54:	10800617 	ldw	r2,24(r2)
   31f58:	e0bffd15 	stw	r2,-12(fp)
   31f5c:	e0bffd17 	ldw	r2,-12(fp)
   31f60:	10000e26 	beq	r2,zero,31f9c <sbappend+0x74>
   {
      while (n->m_act)
   31f64:	00000306 	br	31f74 <sbappend+0x4c>
         n = n->m_act;
   31f68:	e0bffd17 	ldw	r2,-12(fp)
   31f6c:	10800717 	ldw	r2,28(r2)
   31f70:	e0bffd15 	stw	r2,-12(fp)
   if (m == 0)
      return;
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
   31f74:	e0bffd17 	ldw	r2,-12(fp)
   31f78:	10800717 	ldw	r2,28(r2)
   31f7c:	103ffa1e 	bne	r2,zero,31f68 <__alt_mem_descriptor_memory+0xdeff1f68>
         n = n->m_act;
      while (n->m_next)
   31f80:	00000306 	br	31f90 <sbappend+0x68>
         n = n->m_next;
   31f84:	e0bffd17 	ldw	r2,-12(fp)
   31f88:	10800617 	ldw	r2,24(r2)
   31f8c:	e0bffd15 	stw	r2,-12(fp)
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
         n = n->m_act;
      while (n->m_next)
   31f90:	e0bffd17 	ldw	r2,-12(fp)
   31f94:	10800617 	ldw	r2,24(r2)
   31f98:	103ffa1e 	bne	r2,zero,31f84 <__alt_mem_descriptor_memory+0xdeff1f84>
         n = n->m_next;
   }
   sbcompress(sb, m, n);
   31f9c:	e13ffe17 	ldw	r4,-8(fp)
   31fa0:	e17fff17 	ldw	r5,-4(fp)
   31fa4:	e1bffd17 	ldw	r6,-12(fp)
   31fa8:	00322740 	call	32274 <sbcompress>
   EXIT_CRIT_SECTION(sb);
   31fac:	002b3400 	call	2b340 <irq_Unmask>
}
   31fb0:	e037883a 	mov	sp,fp
   31fb4:	dfc00117 	ldw	ra,4(sp)
   31fb8:	df000017 	ldw	fp,0(sp)
   31fbc:	dec00204 	addi	sp,sp,8
   31fc0:	f800283a 	ret

00031fc4 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
   31fc4:	defffb04 	addi	sp,sp,-20
   31fc8:	dfc00415 	stw	ra,16(sp)
   31fcc:	df000315 	stw	fp,12(sp)
   31fd0:	df000304 	addi	fp,sp,12
   31fd4:	e13ffe15 	stw	r4,-8(fp)
   31fd8:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;

   if (m0 == 0)
   31fdc:	e0bfff17 	ldw	r2,-4(fp)
   31fe0:	1000011e 	bne	r2,zero,31fe8 <sbappendrecord+0x24>
      return;
   31fe4:	00002706 	br	32084 <sbappendrecord+0xc0>
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
   31fe8:	002b2e40 	call	2b2e4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
   31fec:	e0bffe17 	ldw	r2,-8(fp)
   31ff0:	10800617 	ldw	r2,24(r2)
   31ff4:	e0bffd15 	stw	r2,-12(fp)
   31ff8:	e0bffd17 	ldw	r2,-12(fp)
   31ffc:	10000726 	beq	r2,zero,3201c <sbappendrecord+0x58>
      while (m->m_act)
   32000:	00000306 	br	32010 <sbappendrecord+0x4c>
      m = m->m_act;
   32004:	e0bffd17 	ldw	r2,-12(fp)
   32008:	10800717 	ldw	r2,28(r2)
   3200c:	e0bffd15 	stw	r2,-12(fp)

   if (m0 == 0)
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
   if ((m = sb->sb_mb) != NULL)
      while (m->m_act)
   32010:	e0bffd17 	ldw	r2,-12(fp)
   32014:	10800717 	ldw	r2,28(r2)
   32018:	103ffa1e 	bne	r2,zero,32004 <__alt_mem_descriptor_memory+0xdeff2004>
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
   3201c:	e0bffe17 	ldw	r2,-8(fp)
   32020:	10c00017 	ldw	r3,0(r2)
   32024:	e0bfff17 	ldw	r2,-4(fp)
   32028:	10800217 	ldw	r2,8(r2)
   3202c:	1887883a 	add	r3,r3,r2
   32030:	e0bffe17 	ldw	r2,-8(fp)
   32034:	10c00015 	stw	r3,0(r2)
   if (m)
   32038:	e0bffd17 	ldw	r2,-12(fp)
   3203c:	10000426 	beq	r2,zero,32050 <sbappendrecord+0x8c>
      m->m_act = m0;
   32040:	e0bffd17 	ldw	r2,-12(fp)
   32044:	e0ffff17 	ldw	r3,-4(fp)
   32048:	10c00715 	stw	r3,28(r2)
   3204c:	00000306 	br	3205c <sbappendrecord+0x98>
   else
      sb->sb_mb = m0;
   32050:	e0bffe17 	ldw	r2,-8(fp)
   32054:	e0ffff17 	ldw	r3,-4(fp)
   32058:	10c00615 	stw	r3,24(r2)
   m = m0->m_next;
   3205c:	e0bfff17 	ldw	r2,-4(fp)
   32060:	10800617 	ldw	r2,24(r2)
   32064:	e0bffd15 	stw	r2,-12(fp)
   m0->m_next = 0;
   32068:	e0bfff17 	ldw	r2,-4(fp)
   3206c:	10000615 	stw	zero,24(r2)
   sbcompress(sb, m, m0);
   32070:	e13ffe17 	ldw	r4,-8(fp)
   32074:	e17ffd17 	ldw	r5,-12(fp)
   32078:	e1bfff17 	ldw	r6,-4(fp)
   3207c:	00322740 	call	32274 <sbcompress>
   EXIT_CRIT_SECTION(sb);
   32080:	002b3400 	call	2b340 <irq_Unmask>
}
   32084:	e037883a 	mov	sp,fp
   32088:	dfc00117 	ldw	ra,4(sp)
   3208c:	df000017 	ldw	fp,0(sp)
   32090:	dec00204 	addi	sp,sp,8
   32094:	f800283a 	ret

00032098 <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
   32098:	defff804 	addi	sp,sp,-32
   3209c:	dfc00715 	stw	ra,28(sp)
   320a0:	df000615 	stw	fp,24(sp)
   320a4:	df000604 	addi	fp,sp,24
   320a8:	e13ffd15 	stw	r4,-12(fp)
   320ac:	e17ffe15 	stw	r5,-8(fp)
   320b0:	e1bfff15 	stw	r6,-4(fp)
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);
   320b4:	00800404 	movi	r2,16
   320b8:	e0bffc15 	stw	r2,-16(fp)

   ENTER_CRIT_SECTION(sb);
   320bc:	002b2e40 	call	2b2e4 <irq_Mask>
   for (m = m0; m; m = m->m_next)
   320c0:	e0bfff17 	ldw	r2,-4(fp)
   320c4:	e0bffa15 	stw	r2,-24(fp)
   320c8:	00000806 	br	320ec <sbappendaddr+0x54>
      space += m->m_len;
   320cc:	e0bffa17 	ldw	r2,-24(fp)
   320d0:	10c00217 	ldw	r3,8(r2)
   320d4:	e0bffc17 	ldw	r2,-16(fp)
   320d8:	1885883a 	add	r2,r3,r2
   320dc:	e0bffc15 	stw	r2,-16(fp)
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
   320e0:	e0bffa17 	ldw	r2,-24(fp)
   320e4:	10800617 	ldw	r2,24(r2)
   320e8:	e0bffa15 	stw	r2,-24(fp)
   320ec:	e0bffa17 	ldw	r2,-24(fp)
   320f0:	103ff61e 	bne	r2,zero,320cc <__alt_mem_descriptor_memory+0xdeff20cc>
      space += m->m_len;
   if (space > (int)sbspace(sb))
   320f4:	e0bffd17 	ldw	r2,-12(fp)
   320f8:	10800117 	ldw	r2,4(r2)
   320fc:	1007883a 	mov	r3,r2
   32100:	e0bffd17 	ldw	r2,-12(fp)
   32104:	10800017 	ldw	r2,0(r2)
   32108:	1885c83a 	sub	r2,r3,r2
   3210c:	10000716 	blt	r2,zero,3212c <sbappendaddr+0x94>
   32110:	e0bffd17 	ldw	r2,-12(fp)
   32114:	10c00117 	ldw	r3,4(r2)
   32118:	e0bffd17 	ldw	r2,-12(fp)
   3211c:	10800017 	ldw	r2,0(r2)
   32120:	1885c83a 	sub	r2,r3,r2
   32124:	1007883a 	mov	r3,r2
   32128:	00000106 	br	32130 <sbappendaddr+0x98>
   3212c:	0007883a 	mov	r3,zero
   32130:	e0bffc17 	ldw	r2,-16(fp)
   32134:	1880030e 	bge	r3,r2,32144 <sbappendaddr+0xac>
   {
      EXIT_CRIT_SECTION(sb);
   32138:	002b3400 	call	2b340 <irq_Unmask>
      return (0);
   3213c:	0005883a 	mov	r2,zero
   32140:	00004706 	br	32260 <sbappendaddr+0x1c8>
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
   32144:	01000244 	movi	r4,9
   32148:	01400404 	movi	r5,16
   3214c:	002bf0c0 	call	2bf0c <m_getnbuf>
   32150:	e0bffa15 	stw	r2,-24(fp)
   32154:	e0bffa17 	ldw	r2,-24(fp)
   32158:	1000031e 	bne	r2,zero,32168 <sbappendaddr+0xd0>
   {
      EXIT_CRIT_SECTION(sb);
   3215c:	002b3400 	call	2b340 <irq_Unmask>
      return 0;
   32160:	0005883a 	mov	r2,zero
   32164:	00003e06 	br	32260 <sbappendaddr+0x1c8>
   }
   *mtod(m, struct sockaddr *) = *asa;
   32168:	e0bffa17 	ldw	r2,-24(fp)
   3216c:	10800317 	ldw	r2,12(r2)
   32170:	e0fffe17 	ldw	r3,-8(fp)
   32174:	1900000b 	ldhu	r4,0(r3)
   32178:	1100000d 	sth	r4,0(r2)
   3217c:	1900008b 	ldhu	r4,2(r3)
   32180:	1100008d 	sth	r4,2(r2)
   32184:	1900010b 	ldhu	r4,4(r3)
   32188:	1100010d 	sth	r4,4(r2)
   3218c:	1900018b 	ldhu	r4,6(r3)
   32190:	1100018d 	sth	r4,6(r2)
   32194:	1900020b 	ldhu	r4,8(r3)
   32198:	1100020d 	sth	r4,8(r2)
   3219c:	1900028b 	ldhu	r4,10(r3)
   321a0:	1100028d 	sth	r4,10(r2)
   321a4:	1900030b 	ldhu	r4,12(r3)
   321a8:	1100030d 	sth	r4,12(r2)
   321ac:	18c0038b 	ldhu	r3,14(r3)
   321b0:	10c0038d 	sth	r3,14(r2)
   m->m_len = sizeof (*asa);
   321b4:	e0bffa17 	ldw	r2,-24(fp)
   321b8:	00c00404 	movi	r3,16
   321bc:	10c00215 	stw	r3,8(r2)
   sballoc (sb, m);
   321c0:	e0bffd17 	ldw	r2,-12(fp)
   321c4:	10c00017 	ldw	r3,0(r2)
   321c8:	e0bffa17 	ldw	r2,-24(fp)
   321cc:	10800217 	ldw	r2,8(r2)
   321d0:	1887883a 	add	r3,r3,r2
   321d4:	e0bffd17 	ldw	r2,-12(fp)
   321d8:	10c00015 	stw	r3,0(r2)
   if ((n = sb->sb_mb) != NULL) 
   321dc:	e0bffd17 	ldw	r2,-12(fp)
   321e0:	10800617 	ldw	r2,24(r2)
   321e4:	e0bffb15 	stw	r2,-20(fp)
   321e8:	e0bffb17 	ldw	r2,-20(fp)
   321ec:	10000b26 	beq	r2,zero,3221c <sbappendaddr+0x184>
   {
      while (n->m_act)
   321f0:	00000306 	br	32200 <sbappendaddr+0x168>
         n = n->m_act;
   321f4:	e0bffb17 	ldw	r2,-20(fp)
   321f8:	10800717 	ldw	r2,28(r2)
   321fc:	e0bffb15 	stw	r2,-20(fp)
   *mtod(m, struct sockaddr *) = *asa;
   m->m_len = sizeof (*asa);
   sballoc (sb, m);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
   32200:	e0bffb17 	ldw	r2,-20(fp)
   32204:	10800717 	ldw	r2,28(r2)
   32208:	103ffa1e 	bne	r2,zero,321f4 <__alt_mem_descriptor_memory+0xdeff21f4>
         n = n->m_act;
      n->m_act = m;
   3220c:	e0bffb17 	ldw	r2,-20(fp)
   32210:	e0fffa17 	ldw	r3,-24(fp)
   32214:	10c00715 	stw	r3,28(r2)
   32218:	00000306 	br	32228 <sbappendaddr+0x190>
   } else
      sb->sb_mb = m;
   3221c:	e0bffd17 	ldw	r2,-12(fp)
   32220:	e0fffa17 	ldw	r3,-24(fp)
   32224:	10c00615 	stw	r3,24(r2)
   if (m->m_next)
   32228:	e0bffa17 	ldw	r2,-24(fp)
   3222c:	10800617 	ldw	r2,24(r2)
   32230:	10000326 	beq	r2,zero,32240 <sbappendaddr+0x1a8>
      m = m->m_next;
   32234:	e0bffa17 	ldw	r2,-24(fp)
   32238:	10800617 	ldw	r2,24(r2)
   3223c:	e0bffa15 	stw	r2,-24(fp)
   if (m0)
   32240:	e0bfff17 	ldw	r2,-4(fp)
   32244:	10000426 	beq	r2,zero,32258 <sbappendaddr+0x1c0>
      sbcompress(sb, m0, m);
   32248:	e13ffd17 	ldw	r4,-12(fp)
   3224c:	e17fff17 	ldw	r5,-4(fp)
   32250:	e1bffa17 	ldw	r6,-24(fp)
   32254:	00322740 	call	32274 <sbcompress>

   EXIT_CRIT_SECTION(sb);
   32258:	002b3400 	call	2b340 <irq_Unmask>
   return (1);
   3225c:	00800044 	movi	r2,1
}
   32260:	e037883a 	mov	sp,fp
   32264:	dfc00117 	ldw	ra,4(sp)
   32268:	df000017 	ldw	fp,0(sp)
   3226c:	dec00204 	addi	sp,sp,8
   32270:	f800283a 	ret

00032274 <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
   32274:	defffb04 	addi	sp,sp,-20
   32278:	dfc00415 	stw	ra,16(sp)
   3227c:	df000315 	stw	fp,12(sp)
   32280:	df000304 	addi	fp,sp,12
   32284:	e13ffd15 	stw	r4,-12(fp)
   32288:	e17ffe15 	stw	r5,-8(fp)
   3228c:	e1bfff15 	stw	r6,-4(fp)

   while (m) 
   32290:	00006706 	br	32430 <sbcompress+0x1bc>
   {
      if (m->m_len == 0) 
   32294:	e0bffe17 	ldw	r2,-8(fp)
   32298:	10800217 	ldw	r2,8(r2)
   3229c:	1000041e 	bne	r2,zero,322b0 <sbcompress+0x3c>
      {
         m = m_free(m);
   322a0:	e13ffe17 	ldw	r4,-8(fp)
   322a4:	002c0940 	call	2c094 <m_free>
   322a8:	e0bffe15 	stw	r2,-8(fp)
         continue;
   322ac:	00006006 	br	32430 <sbcompress+0x1bc>
      }
      if (m->m_type != MT_RXDATA && 
   322b0:	e0bffe17 	ldw	r2,-8(fp)
   322b4:	10800817 	ldw	r2,32(r2)
   322b8:	10800060 	cmpeqi	r2,r2,1
   322bc:	1000111e 	bne	r2,zero,32304 <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
   322c0:	e0bffe17 	ldw	r2,-8(fp)
   322c4:	10800817 	ldw	r2,32(r2)
      if (m->m_len == 0) 
      {
         m = m_free(m);
         continue;
      }
      if (m->m_type != MT_RXDATA && 
   322c8:	108000a0 	cmpeqi	r2,r2,2
   322cc:	10000d1e 	bne	r2,zero,32304 <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
          m->m_type != MT_SONAME) 
   322d0:	e0bffe17 	ldw	r2,-8(fp)
   322d4:	10800817 	ldw	r2,32(r2)
      {
         m = m_free(m);
         continue;
      }
      if (m->m_type != MT_RXDATA && 
          m->m_type != MT_TXDATA && 
   322d8:	10800260 	cmpeqi	r2,r2,9
   322dc:	1000091e 	bne	r2,zero,32304 <sbcompress+0x90>
          m->m_type != MT_SONAME) 
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
   322e0:	e0bffe17 	ldw	r2,-8(fp)
   322e4:	10800817 	ldw	r2,32(r2)
   322e8:	01000174 	movhi	r4,5
   322ec:	213b6a04 	addi	r4,r4,-4696
   322f0:	100b883a 	mov	r5,r2
   322f4:	00080f80 	call	80f8 <printf>
         panic ("sbcomp:bad");
   322f8:	01000174 	movhi	r4,5
   322fc:	213b6f04 	addi	r4,r4,-4676
   32300:	00267380 	call	26738 <panic>
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
   32304:	e0bfff17 	ldw	r2,-4(fp)
   32308:	10003226 	beq	r2,zero,323d4 <sbcompress+0x160>
   3230c:	e0bffd17 	ldw	r2,-12(fp)
   32310:	1080070b 	ldhu	r2,28(r2)
   32314:	10bfffcc 	andi	r2,r2,65535
   32318:	1080200c 	andi	r2,r2,128
   3231c:	10002d26 	beq	r2,zero,323d4 <sbcompress+0x160>
          ((n->m_len + m->m_len) <
   32320:	e0bfff17 	ldw	r2,-4(fp)
   32324:	10c00217 	ldw	r3,8(r2)
   32328:	e0bffe17 	ldw	r2,-8(fp)
   3232c:	10800217 	ldw	r2,8(r2)
   32330:	1887883a 	add	r3,r3,r2
          n->m_memsz - (n->m_data - n->m_base) ) ) 
   32334:	e0bfff17 	ldw	r2,-4(fp)
   32338:	10800517 	ldw	r2,20(r2)
   3233c:	e13fff17 	ldw	r4,-4(fp)
   32340:	21000417 	ldw	r4,16(r4)
   32344:	200b883a 	mov	r5,r4
   32348:	e13fff17 	ldw	r4,-4(fp)
   3234c:	21000317 	ldw	r4,12(r4)
   32350:	2909c83a 	sub	r4,r5,r4
   32354:	1105883a 	add	r2,r2,r4
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
   32358:	18801e2e 	bgeu	r3,r2,323d4 <sbcompress+0x160>
          ((n->m_len + m->m_len) <
          n->m_memsz - (n->m_data - n->m_base) ) ) 
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
   3235c:	e0bfff17 	ldw	r2,-4(fp)
   32360:	10c00317 	ldw	r3,12(r2)
   32364:	e0bfff17 	ldw	r2,-4(fp)
   32368:	10800217 	ldw	r2,8(r2)
   3236c:	1889883a 	add	r4,r3,r2
   32370:	e0bffe17 	ldw	r2,-8(fp)
   32374:	10c00317 	ldw	r3,12(r2)
   32378:	e0bffe17 	ldw	r2,-8(fp)
   3237c:	10800217 	ldw	r2,8(r2)
   32380:	180b883a 	mov	r5,r3
   32384:	100d883a 	mov	r6,r2
   32388:	0007c900 	call	7c90 <memcpy>
         sballoc(sb, m);
   3238c:	e0bffd17 	ldw	r2,-12(fp)
   32390:	10c00017 	ldw	r3,0(r2)
   32394:	e0bffe17 	ldw	r2,-8(fp)
   32398:	10800217 	ldw	r2,8(r2)
   3239c:	1887883a 	add	r3,r3,r2
   323a0:	e0bffd17 	ldw	r2,-12(fp)
   323a4:	10c00015 	stw	r3,0(r2)
         n->m_len += m->m_len;
   323a8:	e0bfff17 	ldw	r2,-4(fp)
   323ac:	10c00217 	ldw	r3,8(r2)
   323b0:	e0bffe17 	ldw	r2,-8(fp)
   323b4:	10800217 	ldw	r2,8(r2)
   323b8:	1887883a 	add	r3,r3,r2
   323bc:	e0bfff17 	ldw	r2,-4(fp)
   323c0:	10c00215 	stw	r3,8(r2)
         m = m_free(m);
   323c4:	e13ffe17 	ldw	r4,-8(fp)
   323c8:	002c0940 	call	2c094 <m_free>
   323cc:	e0bffe15 	stw	r2,-8(fp)
         continue;
   323d0:	00001706 	br	32430 <sbcompress+0x1bc>
      }
      sballoc(sb, m);
   323d4:	e0bffd17 	ldw	r2,-12(fp)
   323d8:	10c00017 	ldw	r3,0(r2)
   323dc:	e0bffe17 	ldw	r2,-8(fp)
   323e0:	10800217 	ldw	r2,8(r2)
   323e4:	1887883a 	add	r3,r3,r2
   323e8:	e0bffd17 	ldw	r2,-12(fp)
   323ec:	10c00015 	stw	r3,0(r2)
      if (n)
   323f0:	e0bfff17 	ldw	r2,-4(fp)
   323f4:	10000426 	beq	r2,zero,32408 <sbcompress+0x194>
         n->m_next = m;
   323f8:	e0bfff17 	ldw	r2,-4(fp)
   323fc:	e0fffe17 	ldw	r3,-8(fp)
   32400:	10c00615 	stw	r3,24(r2)
   32404:	00000306 	br	32414 <sbcompress+0x1a0>
      else
         sb->sb_mb = m;
   32408:	e0bffd17 	ldw	r2,-12(fp)
   3240c:	e0fffe17 	ldw	r3,-8(fp)
   32410:	10c00615 	stw	r3,24(r2)
      n = m;
   32414:	e0bffe17 	ldw	r2,-8(fp)
   32418:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
   3241c:	e0bffe17 	ldw	r2,-8(fp)
   32420:	10800617 	ldw	r2,24(r2)
   32424:	e0bffe15 	stw	r2,-8(fp)
      n->m_next = 0;
   32428:	e0bfff17 	ldw	r2,-4(fp)
   3242c:	10000615 	stw	zero,24(r2)
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{

   while (m) 
   32430:	e0bffe17 	ldw	r2,-8(fp)
   32434:	103f971e 	bne	r2,zero,32294 <__alt_mem_descriptor_memory+0xdeff2294>
         sb->sb_mb = m;
      n = m;
      m = m->m_next;
      n->m_next = 0;
   }
}
   32438:	e037883a 	mov	sp,fp
   3243c:	dfc00117 	ldw	ra,4(sp)
   32440:	df000017 	ldw	fp,0(sp)
   32444:	dec00204 	addi	sp,sp,8
   32448:	f800283a 	ret

0003244c <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
   3244c:	defffd04 	addi	sp,sp,-12
   32450:	dfc00215 	stw	ra,8(sp)
   32454:	df000115 	stw	fp,4(sp)
   32458:	df000104 	addi	fp,sp,4
   3245c:	e13fff15 	stw	r4,-4(fp)
   ENTER_CRIT_SECTION(sb);
   32460:	002b2e40 	call	2b2e4 <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
   32464:	e0bfff17 	ldw	r2,-4(fp)
   32468:	1080070b 	ldhu	r2,28(r2)
   3246c:	10bfffcc 	andi	r2,r2,65535
   32470:	1080004c 	andi	r2,r2,1
   32474:	10000326 	beq	r2,zero,32484 <sbflush+0x38>
      panic("sbflush");
   32478:	01000174 	movhi	r4,5
   3247c:	213b7204 	addi	r4,r4,-4664
   32480:	00267380 	call	26738 <panic>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
   32484:	00000506 	br	3249c <sbflush+0x50>
      sbdrop (sb, (int)sb->sb_cc);
   32488:	e0bfff17 	ldw	r2,-4(fp)
   3248c:	10800017 	ldw	r2,0(r2)
   32490:	e13fff17 	ldw	r4,-4(fp)
   32494:	100b883a 	mov	r5,r2
   32498:	00324cc0 	call	324cc <sbdrop>
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
   3249c:	e0bfff17 	ldw	r2,-4(fp)
   324a0:	10800217 	ldw	r2,8(r2)
   324a4:	103ff81e 	bne	r2,zero,32488 <__alt_mem_descriptor_memory+0xdeff2488>
   324a8:	e0bfff17 	ldw	r2,-4(fp)
   324ac:	10800017 	ldw	r2,0(r2)
   324b0:	103ff51e 	bne	r2,zero,32488 <__alt_mem_descriptor_memory+0xdeff2488>
      sbdrop (sb, (int)sb->sb_cc);
   EXIT_CRIT_SECTION(sb);
   324b4:	002b3400 	call	2b340 <irq_Unmask>
}
   324b8:	e037883a 	mov	sp,fp
   324bc:	dfc00117 	ldw	ra,4(sp)
   324c0:	df000017 	ldw	fp,0(sp)
   324c4:	dec00204 	addi	sp,sp,8
   324c8:	f800283a 	ret

000324cc <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
   324cc:	defff904 	addi	sp,sp,-28
   324d0:	dfc00615 	stw	ra,24(sp)
   324d4:	df000515 	stw	fp,20(sp)
   324d8:	df000504 	addi	fp,sp,20
   324dc:	e13ffe15 	stw	r4,-8(fp)
   324e0:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
   324e4:	002b2e40 	call	2b2e4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
   324e8:	e0bffe17 	ldw	r2,-8(fp)
   324ec:	10800617 	ldw	r2,24(r2)
   324f0:	e0bffb15 	stw	r2,-20(fp)
   324f4:	e0bffb17 	ldw	r2,-20(fp)
   324f8:	10000426 	beq	r2,zero,3250c <sbdrop+0x40>
      next = m->m_act;
   324fc:	e0bffb17 	ldw	r2,-20(fp)
   32500:	10800717 	ldw	r2,28(r2)
   32504:	e0bffc15 	stw	r2,-16(fp)
   32508:	00000106 	br	32510 <sbdrop+0x44>
   else
      next = NULL;
   3250c:	e03ffc15 	stw	zero,-16(fp)
   while (len > 0) 
   32510:	00003506 	br	325e8 <sbdrop+0x11c>
   {
      if (m == 0) 
   32514:	e0bffb17 	ldw	r2,-20(fp)
   32518:	10000b1e 	bne	r2,zero,32548 <sbdrop+0x7c>
      {
         if (next == 0)
   3251c:	e0bffc17 	ldw	r2,-16(fp)
   32520:	1000031e 	bne	r2,zero,32530 <sbdrop+0x64>
            panic("sbdrop");
   32524:	01000174 	movhi	r4,5
   32528:	213b7404 	addi	r4,r4,-4656
   3252c:	00267380 	call	26738 <panic>
         m = next;
   32530:	e0bffc17 	ldw	r2,-16(fp)
   32534:	e0bffb15 	stw	r2,-20(fp)
         next = m->m_act;
   32538:	e0bffb17 	ldw	r2,-20(fp)
   3253c:	10800717 	ldw	r2,28(r2)
   32540:	e0bffc15 	stw	r2,-16(fp)
         continue;
   32544:	00002806 	br	325e8 <sbdrop+0x11c>
      }
      if (m->m_len > (unsigned)len) 
   32548:	e0bffb17 	ldw	r2,-20(fp)
   3254c:	10800217 	ldw	r2,8(r2)
   32550:	e0ffff17 	ldw	r3,-4(fp)
   32554:	1880132e 	bgeu	r3,r2,325a4 <sbdrop+0xd8>
      {
         m->m_len -= len;
   32558:	e0bffb17 	ldw	r2,-20(fp)
   3255c:	10c00217 	ldw	r3,8(r2)
   32560:	e0bfff17 	ldw	r2,-4(fp)
   32564:	1887c83a 	sub	r3,r3,r2
   32568:	e0bffb17 	ldw	r2,-20(fp)
   3256c:	10c00215 	stw	r3,8(r2)
         m->m_data += len;
   32570:	e0bffb17 	ldw	r2,-20(fp)
   32574:	10c00317 	ldw	r3,12(r2)
   32578:	e0bfff17 	ldw	r2,-4(fp)
   3257c:	1887883a 	add	r3,r3,r2
   32580:	e0bffb17 	ldw	r2,-20(fp)
   32584:	10c00315 	stw	r3,12(r2)
         sb->sb_cc -= len;
   32588:	e0bffe17 	ldw	r2,-8(fp)
   3258c:	10c00017 	ldw	r3,0(r2)
   32590:	e0bfff17 	ldw	r2,-4(fp)
   32594:	1887c83a 	sub	r3,r3,r2
   32598:	e0bffe17 	ldw	r2,-8(fp)
   3259c:	10c00015 	stw	r3,0(r2)
         break;
   325a0:	00001306 	br	325f0 <sbdrop+0x124>
      }
      len -= m->m_len;
   325a4:	e0ffff17 	ldw	r3,-4(fp)
   325a8:	e0bffb17 	ldw	r2,-20(fp)
   325ac:	10800217 	ldw	r2,8(r2)
   325b0:	1885c83a 	sub	r2,r3,r2
   325b4:	e0bfff15 	stw	r2,-4(fp)
      sbfree (sb, m);
   325b8:	e0bffe17 	ldw	r2,-8(fp)
   325bc:	10c00017 	ldw	r3,0(r2)
   325c0:	e0bffb17 	ldw	r2,-20(fp)
   325c4:	10800217 	ldw	r2,8(r2)
   325c8:	1887c83a 	sub	r3,r3,r2
   325cc:	e0bffe17 	ldw	r2,-8(fp)
   325d0:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
   325d4:	e13ffb17 	ldw	r4,-20(fp)
   325d8:	002c0940 	call	2c094 <m_free>
   325dc:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
   325e0:	e0bffd17 	ldw	r2,-12(fp)
   325e4:	e0bffb15 	stw	r2,-20(fp)
   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
   325e8:	e0bfff17 	ldw	r2,-4(fp)
   325ec:	00bfc916 	blt	zero,r2,32514 <__alt_mem_descriptor_memory+0xdeff2514>
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
   325f0:	00000c06 	br	32624 <sbdrop+0x158>
   {
      sbfree(sb, m);
   325f4:	e0bffe17 	ldw	r2,-8(fp)
   325f8:	10c00017 	ldw	r3,0(r2)
   325fc:	e0bffb17 	ldw	r2,-20(fp)
   32600:	10800217 	ldw	r2,8(r2)
   32604:	1887c83a 	sub	r3,r3,r2
   32608:	e0bffe17 	ldw	r2,-8(fp)
   3260c:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
   32610:	e13ffb17 	ldw	r4,-20(fp)
   32614:	002c0940 	call	2c094 <m_free>
   32618:	e0bffd15 	stw	r2,-12(fp)
      m = mn;
   3261c:	e0bffd17 	ldw	r2,-12(fp)
   32620:	e0bffb15 	stw	r2,-20(fp)
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
   32624:	e0bffb17 	ldw	r2,-20(fp)
   32628:	10000326 	beq	r2,zero,32638 <sbdrop+0x16c>
   3262c:	e0bffb17 	ldw	r2,-20(fp)
   32630:	10800217 	ldw	r2,8(r2)
   32634:	103fef26 	beq	r2,zero,325f4 <__alt_mem_descriptor_memory+0xdeff25f4>
   {
      sbfree(sb, m);
      MFREE(m, mn);
      m = mn;
   }
   if (m) 
   32638:	e0bffb17 	ldw	r2,-20(fp)
   3263c:	10000726 	beq	r2,zero,3265c <sbdrop+0x190>
   {
      sb->sb_mb = m;
   32640:	e0bffe17 	ldw	r2,-8(fp)
   32644:	e0fffb17 	ldw	r3,-20(fp)
   32648:	10c00615 	stw	r3,24(r2)
      m->m_act = next;
   3264c:	e0bffb17 	ldw	r2,-20(fp)
   32650:	e0fffc17 	ldw	r3,-16(fp)
   32654:	10c00715 	stw	r3,28(r2)
   32658:	00000306 	br	32668 <sbdrop+0x19c>
   } else
      sb->sb_mb = next;
   3265c:	e0bffe17 	ldw	r2,-8(fp)
   32660:	e0fffc17 	ldw	r3,-16(fp)
   32664:	10c00615 	stw	r3,24(r2)
   EXIT_CRIT_SECTION(sb);
   32668:	002b3400 	call	2b340 <irq_Unmask>
}
   3266c:	e037883a 	mov	sp,fp
   32670:	dfc00117 	ldw	ra,4(sp)
   32674:	df000017 	ldw	fp,0(sp)
   32678:	dec00204 	addi	sp,sp,8
   3267c:	f800283a 	ret

00032680 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
   32680:	defff904 	addi	sp,sp,-28
   32684:	dfc00615 	stw	ra,24(sp)
   32688:	df000515 	stw	fp,20(sp)
   3268c:	df000504 	addi	fp,sp,20
   32690:	e13ffe15 	stw	r4,-8(fp)
   32694:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
   32698:	002b2e40 	call	2b2e4 <irq_Mask>
   len = mbuf_len(m);
   3269c:	e13fff17 	ldw	r4,-4(fp)
   326a0:	002c6980 	call	2c698 <mbuf_len>
   326a4:	e0bffd15 	stw	r2,-12(fp)
   if (len > 0)
   326a8:	e0bffd17 	ldw	r2,-12(fp)
   326ac:	0080070e 	bge	zero,r2,326cc <sbdropend+0x4c>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
   326b0:	e0bffe17 	ldw	r2,-8(fp)
   326b4:	10c00617 	ldw	r3,24(r2)
   326b8:	e0bffd17 	ldw	r2,-12(fp)
   326bc:	0085c83a 	sub	r2,zero,r2
   326c0:	1809883a 	mov	r4,r3
   326c4:	100b883a 	mov	r5,r2
   326c8:	002c4d40 	call	2c4d4 <m_adj>
   nmb = sb->sb_mb;
   326cc:	e0bffe17 	ldw	r2,-8(fp)
   326d0:	10800617 	ldw	r2,24(r2)
   326d4:	e0bffb15 	stw	r2,-20(fp)
   pmb = NULL;
   326d8:	e03ffc15 	stw	zero,-16(fp)
   if (sb->sb_mb->m_len == 0)
   326dc:	e0bffe17 	ldw	r2,-8(fp)
   326e0:	10800617 	ldw	r2,24(r2)
   326e4:	10800217 	ldw	r2,8(r2)
   326e8:	1000021e 	bne	r2,zero,326f4 <sbdropend+0x74>
      sb->sb_mb = NULL;
   326ec:	e0bffe17 	ldw	r2,-8(fp)
   326f0:	10000615 	stw	zero,24(r2)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
   326f4:	00000506 	br	3270c <sbdropend+0x8c>
   {
      pmb = nmb;  /* Remember previous */
   326f8:	e0bffb17 	ldw	r2,-20(fp)
   326fc:	e0bffc15 	stw	r2,-16(fp)
      nmb = nmb->m_next;    
   32700:	e0bffb17 	ldw	r2,-20(fp)
   32704:	10800617 	ldw	r2,24(r2)
   32708:	e0bffb15 	stw	r2,-20(fp)
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
   nmb = sb->sb_mb;
   pmb = NULL;
   if (sb->sb_mb->m_len == 0)
      sb->sb_mb = NULL;
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
   3270c:	e0bffb17 	ldw	r2,-20(fp)
   32710:	10000326 	beq	r2,zero,32720 <sbdropend+0xa0>
   32714:	e0bffb17 	ldw	r2,-20(fp)
   32718:	10800217 	ldw	r2,8(r2)
   3271c:	103ff61e 	bne	r2,zero,326f8 <__alt_mem_descriptor_memory+0xdeff26f8>
   {
      pmb = nmb;  /* Remember previous */
      nmb = nmb->m_next;    
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
   32720:	e0bffb17 	ldw	r2,-20(fp)
   32724:	10000926 	beq	r2,zero,3274c <sbdropend+0xcc>
   32728:	e0bffb17 	ldw	r2,-20(fp)
   3272c:	10800217 	ldw	r2,8(r2)
   32730:	1000061e 	bne	r2,zero,3274c <sbdropend+0xcc>
   {                             /* are zeroes */ 
      if (pmb != NULL)
   32734:	e0bffc17 	ldw	r2,-16(fp)
   32738:	10000226 	beq	r2,zero,32744 <sbdropend+0xc4>
         pmb->m_next = NULL;
   3273c:	e0bffc17 	ldw	r2,-16(fp)
   32740:	10000615 	stw	zero,24(r2)
      m_freem(nmb);            
   32744:	e13ffb17 	ldw	r4,-20(fp)
   32748:	002c1a40 	call	2c1a4 <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
   3274c:	e0bffe17 	ldw	r2,-8(fp)
   32750:	10c00017 	ldw	r3,0(r2)
   32754:	e0bffd17 	ldw	r2,-12(fp)
   32758:	1887c83a 	sub	r3,r3,r2
   3275c:	e0bffe17 	ldw	r2,-8(fp)
   32760:	10c00015 	stw	r3,0(r2)
   EXIT_CRIT_SECTION(sb);
   32764:	002b3400 	call	2b340 <irq_Unmask>
}
   32768:	e037883a 	mov	sp,fp
   3276c:	dfc00117 	ldw	ra,4(sp)
   32770:	df000017 	ldw	fp,0(sp)
   32774:	dec00204 	addi	sp,sp,8
   32778:	f800283a 	ret

0003277c <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
   3277c:	defffb04 	addi	sp,sp,-20
   32780:	dfc00415 	stw	ra,16(sp)
   32784:	df000315 	stw	fp,12(sp)
   32788:	df000304 	addi	fp,sp,12
   3278c:	e13fff15 	stw	r4,-4(fp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
   32790:	002b2e40 	call	2b2e4 <irq_Mask>
   m = sb->sb_mb;
   32794:	e0bfff17 	ldw	r2,-4(fp)
   32798:	10800617 	ldw	r2,24(r2)
   3279c:	e0bffd15 	stw	r2,-12(fp)
   if (m)
   327a0:	e0bffd17 	ldw	r2,-12(fp)
   327a4:	10001226 	beq	r2,zero,327f0 <sbdroprecord+0x74>
   {  sb->sb_mb = m->m_act;
   327a8:	e0bffd17 	ldw	r2,-12(fp)
   327ac:	10c00717 	ldw	r3,28(r2)
   327b0:	e0bfff17 	ldw	r2,-4(fp)
   327b4:	10c00615 	stw	r3,24(r2)
      do 
      {  sbfree(sb, m);
   327b8:	e0bfff17 	ldw	r2,-4(fp)
   327bc:	10c00017 	ldw	r3,0(r2)
   327c0:	e0bffd17 	ldw	r2,-12(fp)
   327c4:	10800217 	ldw	r2,8(r2)
   327c8:	1887c83a 	sub	r3,r3,r2
   327cc:	e0bfff17 	ldw	r2,-4(fp)
   327d0:	10c00015 	stw	r3,0(r2)
         MFREE(m, mn);
   327d4:	e13ffd17 	ldw	r4,-12(fp)
   327d8:	002c0940 	call	2c094 <m_free>
   327dc:	e0bffe15 	stw	r2,-8(fp)
      } while ((m = mn) != NULL);
   327e0:	e0bffe17 	ldw	r2,-8(fp)
   327e4:	e0bffd15 	stw	r2,-12(fp)
   327e8:	e0bffd17 	ldw	r2,-12(fp)
   327ec:	103ff21e 	bne	r2,zero,327b8 <__alt_mem_descriptor_memory+0xdeff27b8>
         }
   EXIT_CRIT_SECTION(sb);
   327f0:	002b3400 	call	2b340 <irq_Unmask>
}
   327f4:	e037883a 	mov	sp,fp
   327f8:	dfc00117 	ldw	ra,4(sp)
   327fc:	df000017 	ldw	fp,0(sp)
   32800:	dec00204 	addi	sp,sp,8
   32804:	f800283a 	ret

00032808 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
   32808:	defe7204 	addi	sp,sp,-1592
   3280c:	dfc18d15 	stw	ra,1588(sp)
   32810:	df018c15 	stw	fp,1584(sp)
   32814:	df018c04 	addi	fp,sp,1584
   32818:	e13ffc15 	stw	r4,-16(fp)
   3281c:	e17ffd15 	stw	r5,-12(fp)
   32820:	e1bffe15 	stw	r6,-8(fp)
   32824:	e1ffff15 	stw	r7,-4(fp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;
   32828:	e03e7415 	stw	zero,-1584(fp)

   MEMSET(&obits, 0, sizeof(obits));
   3282c:	e0be7604 	addi	r2,fp,-1576
   32830:	1009883a 	mov	r4,r2
   32834:	000b883a 	mov	r5,zero
   32838:	0180c304 	movi	r6,780
   3283c:	0007f240 	call	7f24 <memset>
   MEMSET(&ibits, 0, sizeof(ibits));
   32840:	e0bf3904 	addi	r2,fp,-796
   32844:	1009883a 	mov	r4,r2
   32848:	000b883a 	mov	r5,zero
   3284c:	0180c304 	movi	r6,780
   32850:	0007f240 	call	7f24 <memset>

   if (in)
   32854:	e0bffc17 	ldw	r2,-16(fp)
   32858:	10000526 	beq	r2,zero,32870 <t_select+0x68>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
   3285c:	e0bf3904 	addi	r2,fp,-796
   32860:	1009883a 	mov	r4,r2
   32864:	e17ffc17 	ldw	r5,-16(fp)
   32868:	01804104 	movi	r6,260
   3286c:	0007c900 	call	7c90 <memcpy>
   if (out)
   32870:	e0bffd17 	ldw	r2,-12(fp)
   32874:	10000626 	beq	r2,zero,32890 <t_select+0x88>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
   32878:	e0bf3904 	addi	r2,fp,-796
   3287c:	10804104 	addi	r2,r2,260
   32880:	1009883a 	mov	r4,r2
   32884:	e17ffd17 	ldw	r5,-12(fp)
   32888:	01804104 	movi	r6,260
   3288c:	0007c900 	call	7c90 <memcpy>
   if (ex)
   32890:	e0bffe17 	ldw	r2,-8(fp)
   32894:	10000626 	beq	r2,zero,328b0 <t_select+0xa8>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   32898:	e0bf3904 	addi	r2,fp,-796
   3289c:	10808204 	addi	r2,r2,520
   328a0:	1009883a 	mov	r4,r2
   328a4:	e17ffe17 	ldw	r5,-8(fp)
   328a8:	01804104 	movi	r6,260
   328ac:	0007c900 	call	7c90 <memcpy>
   tmo = cticks + tv;
   328b0:	00800174 	movhi	r2,5
   328b4:	108fbe04 	addi	r2,r2,16120
   328b8:	10c00017 	ldw	r3,0(r2)
   328bc:	e0bfff17 	ldw	r2,-4(fp)
   328c0:	1885883a 	add	r2,r3,r2
   328c4:	e0be7515 	stw	r2,-1580(fp)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
   328c8:	e0bf3917 	ldw	r2,-796(fp)
   328cc:	10000d1e 	bne	r2,zero,32904 <t_select+0xfc>
   328d0:	e0bf7a17 	ldw	r2,-536(fp)
   328d4:	10000b1e 	bne	r2,zero,32904 <t_select+0xfc>
       (ibits[2].fd_count == 0))
   328d8:	e0bfbb17 	ldw	r2,-276(fp)
   if (ex)
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   tmo = cticks + tv;

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
   328dc:	1000091e 	bne	r2,zero,32904 <t_select+0xfc>
       (ibits[2].fd_count == 0))
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
   328e0:	e0bfff17 	ldw	r2,-4(fp)
   328e4:	0080060e 	bge	zero,r2,32900 <t_select+0xf8>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
   328e8:	e0bfff17 	ldw	r2,-4(fp)
   328ec:	10800044 	addi	r2,r2,1
   328f0:	10bfffcc 	andi	r2,r2,65535
   328f4:	1009883a 	mov	r4,r2
   328f8:	001f9280 	call	1f928 <OSTimeDly>

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
       (ibits[2].fd_count == 0))
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
   328fc:	00001e06 	br	32978 <t_select+0x170>
   32900:	00001d06 	br	32978 <t_select+0x170>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
   32904:	0009883a 	mov	r4,zero
   32908:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      while ((retval = sock_selscan(ibits, obits)) == 0)
   3290c:	00001006 	br	32950 <t_select+0x148>
      {
         if (tv != -1L) 
   32910:	e0bfff17 	ldw	r2,-4(fp)
   32914:	10bfffe0 	cmpeqi	r2,r2,-1
   32918:	1000061e 	bne	r2,zero,32934 <t_select+0x12c>
         {
            if (tmo <= cticks)
   3291c:	00800174 	movhi	r2,5
   32920:	108fbe04 	addi	r2,r2,16120
   32924:	10c00017 	ldw	r3,0(r2)
   32928:	e0be7517 	ldw	r2,-1580(fp)
   3292c:	18800136 	bltu	r3,r2,32934 <t_select+0x12c>
               break;
   32930:	00000f06 	br	32970 <t_select+0x168>
         }
         select_wait = 1;
   32934:	00800174 	movhi	r2,5
   32938:	108fc604 	addi	r2,r2,16152
   3293c:	00c00044 	movi	r3,1
   32940:	10c0000d 	sth	r3,0(r2)
         tcp_sleep (&select_wait);
   32944:	01000174 	movhi	r4,5
   32948:	210fc604 	addi	r4,r4,16152
   3294c:	00270240 	call	27024 <tcp_sleep>
      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
      while ((retval = sock_selscan(ibits, obits)) == 0)
   32950:	e0ff3904 	addi	r3,fp,-796
   32954:	e0be7604 	addi	r2,fp,-1576
   32958:	1809883a 	mov	r4,r3
   3295c:	100b883a 	mov	r5,r2
   32960:	00329f40 	call	329f4 <sock_selscan>
   32964:	e0be7415 	stw	r2,-1584(fp)
   32968:	e0be7417 	ldw	r2,-1584(fp)
   3296c:	103fe826 	beq	r2,zero,32910 <__alt_mem_descriptor_memory+0xdeff2910>
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
   32970:	0009883a 	mov	r4,zero
   32974:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
   32978:	e0be7417 	ldw	r2,-1584(fp)
   3297c:	10001716 	blt	r2,zero,329dc <t_select+0x1d4>
   {
      if (in)
   32980:	e0bffc17 	ldw	r2,-16(fp)
   32984:	10000526 	beq	r2,zero,3299c <t_select+0x194>
         MEMCPY(in, &obits[0], sizeof(fd_set));
   32988:	e0be7604 	addi	r2,fp,-1576
   3298c:	e13ffc17 	ldw	r4,-16(fp)
   32990:	100b883a 	mov	r5,r2
   32994:	01804104 	movi	r6,260
   32998:	0007c900 	call	7c90 <memcpy>
      if (out)
   3299c:	e0bffd17 	ldw	r2,-12(fp)
   329a0:	10000626 	beq	r2,zero,329bc <t_select+0x1b4>
         MEMCPY(out, &obits[1], sizeof(fd_set));
   329a4:	e0be7604 	addi	r2,fp,-1576
   329a8:	10804104 	addi	r2,r2,260
   329ac:	e13ffd17 	ldw	r4,-12(fp)
   329b0:	100b883a 	mov	r5,r2
   329b4:	01804104 	movi	r6,260
   329b8:	0007c900 	call	7c90 <memcpy>
      if (ex)
   329bc:	e0bffe17 	ldw	r2,-8(fp)
   329c0:	10000626 	beq	r2,zero,329dc <t_select+0x1d4>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
   329c4:	e0be7604 	addi	r2,fp,-1576
   329c8:	10808204 	addi	r2,r2,520
   329cc:	e13ffe17 	ldw	r4,-8(fp)
   329d0:	100b883a 	mov	r5,r2
   329d4:	01804104 	movi	r6,260
   329d8:	0007c900 	call	7c90 <memcpy>
   }
   return retval;
   329dc:	e0be7417 	ldw	r2,-1584(fp)
}
   329e0:	e037883a 	mov	sp,fp
   329e4:	dfc00117 	ldw	ra,4(sp)
   329e8:	df000017 	ldw	fp,0(sp)
   329ec:	dec00204 	addi	sp,sp,8
   329f0:	f800283a 	ret

000329f4 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
   329f4:	defff604 	addi	sp,sp,-40
   329f8:	dfc00915 	stw	ra,36(sp)
   329fc:	df000815 	stw	fp,32(sp)
   32a00:	df000804 	addi	fp,sp,32
   32a04:	e13ffe15 	stw	r4,-8(fp)
   32a08:	e17fff15 	stw	r5,-4(fp)
   fd_set *in, *out;
   int   which;
   int   sock;
   int   flag  =  0;
   32a0c:	e03ffa15 	stw	zero,-24(fp)
   int   num_sel  =  0;
   32a10:	e03ffb15 	stw	zero,-20(fp)

   for (which = 0; which < 3; which++)
   32a14:	e03ff815 	stw	zero,-32(fp)
   32a18:	00003d06 	br	32b10 <sock_selscan+0x11c>
   {
      switch (which)
   32a1c:	e0bff817 	ldw	r2,-32(fp)
   32a20:	10c00060 	cmpeqi	r3,r2,1
   32a24:	1800061e 	bne	r3,zero,32a40 <sock_selscan+0x4c>
   32a28:	10c000a0 	cmpeqi	r3,r2,2
   32a2c:	1800071e 	bne	r3,zero,32a4c <sock_selscan+0x58>
   32a30:	1000081e 	bne	r2,zero,32a54 <sock_selscan+0x60>
      {
      case 0:
         flag = SOREAD; break;
   32a34:	00800044 	movi	r2,1
   32a38:	e0bffa15 	stw	r2,-24(fp)
   32a3c:	00000506 	br	32a54 <sock_selscan+0x60>

      case 1:
         flag = SOWRITE; break;
   32a40:	00800084 	movi	r2,2
   32a44:	e0bffa15 	stw	r2,-24(fp)
   32a48:	00000206 	br	32a54 <sock_selscan+0x60>

      case 2:
         flag = 0; break;
   32a4c:	e03ffa15 	stw	zero,-24(fp)
   32a50:	0001883a 	nop
      }
      in = &ibits [which];
   32a54:	e0bff817 	ldw	r2,-32(fp)
   32a58:	10804124 	muli	r2,r2,260
   32a5c:	e0fffe17 	ldw	r3,-8(fp)
   32a60:	1885883a 	add	r2,r3,r2
   32a64:	e0bffc15 	stw	r2,-16(fp)
      out = &obits [which];
   32a68:	e0bff817 	ldw	r2,-32(fp)
   32a6c:	10804124 	muli	r2,r2,260
   32a70:	e0ffff17 	ldw	r3,-4(fp)
   32a74:	1885883a 	add	r2,r3,r2
   32a78:	e0bffd15 	stw	r2,-12(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
   32a7c:	e03ff915 	stw	zero,-28(fp)
   32a80:	00001b06 	br	32af0 <sock_selscan+0xfc>
      {
         if (sock_select (in->fd_array[sock], flag))
   32a84:	e0fffc17 	ldw	r3,-16(fp)
   32a88:	e0bff917 	ldw	r2,-28(fp)
   32a8c:	10800044 	addi	r2,r2,1
   32a90:	1085883a 	add	r2,r2,r2
   32a94:	1085883a 	add	r2,r2,r2
   32a98:	1885883a 	add	r2,r3,r2
   32a9c:	10800017 	ldw	r2,0(r2)
   32aa0:	1009883a 	mov	r4,r2
   32aa4:	e17ffa17 	ldw	r5,-24(fp)
   32aa8:	0032b340 	call	32b34 <sock_select>
   32aac:	10000d26 	beq	r2,zero,32ae4 <sock_selscan+0xf0>
         {
            FD_SET(in->fd_array[sock], out);
   32ab0:	e0fffc17 	ldw	r3,-16(fp)
   32ab4:	e0bff917 	ldw	r2,-28(fp)
   32ab8:	10800044 	addi	r2,r2,1
   32abc:	1085883a 	add	r2,r2,r2
   32ac0:	1085883a 	add	r2,r2,r2
   32ac4:	1885883a 	add	r2,r3,r2
   32ac8:	10800017 	ldw	r2,0(r2)
   32acc:	1009883a 	mov	r4,r2
   32ad0:	e17ffd17 	ldw	r5,-12(fp)
   32ad4:	0032f440 	call	32f44 <ifd_set>
            num_sel++;
   32ad8:	e0bffb17 	ldw	r2,-20(fp)
   32adc:	10800044 	addi	r2,r2,1
   32ae0:	e0bffb15 	stw	r2,-20(fp)
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
   32ae4:	e0bff917 	ldw	r2,-28(fp)
   32ae8:	10800044 	addi	r2,r2,1
   32aec:	e0bff915 	stw	r2,-28(fp)
   32af0:	e0bffc17 	ldw	r2,-16(fp)
   32af4:	10800017 	ldw	r2,0(r2)
   32af8:	1007883a 	mov	r3,r2
   32afc:	e0bff917 	ldw	r2,-28(fp)
   32b00:	10ffe016 	blt	r2,r3,32a84 <__alt_mem_descriptor_memory+0xdeff2a84>
   int   which;
   int   sock;
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
   32b04:	e0bff817 	ldw	r2,-32(fp)
   32b08:	10800044 	addi	r2,r2,1
   32b0c:	e0bff815 	stw	r2,-32(fp)
   32b10:	e0bff817 	ldw	r2,-32(fp)
   32b14:	108000d0 	cmplti	r2,r2,3
   32b18:	103fc01e 	bne	r2,zero,32a1c <__alt_mem_descriptor_memory+0xdeff2a1c>
            FD_SET(in->fd_array[sock], out);
            num_sel++;
         }
      }
   }
   return num_sel;
   32b1c:	e0bffb17 	ldw	r2,-20(fp)
}
   32b20:	e037883a 	mov	sp,fp
   32b24:	dfc00117 	ldw	ra,4(sp)
   32b28:	df000017 	ldw	fp,0(sp)
   32b2c:	dec00204 	addi	sp,sp,8
   32b30:	f800283a 	ret

00032b34 <sock_select>:
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
   32b34:	defffa04 	addi	sp,sp,-24
   32b38:	dfc00515 	stw	ra,20(sp)
   32b3c:	df000415 	stw	fp,16(sp)
   32b40:	df000404 	addi	fp,sp,16
   32b44:	e13ffe15 	stw	r4,-8(fp)
   32b48:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so;
   int   ready =  0;
   32b4c:	e03ffc15 	stw	zero,-16(fp)

   so = LONG2SO(sock);
   32b50:	e0bffe17 	ldw	r2,-8(fp)
   32b54:	10bff804 	addi	r2,r2,-32
   32b58:	1085883a 	add	r2,r2,r2
   32b5c:	1085883a 	add	r2,r2,r2
   32b60:	e0bffd15 	stw	r2,-12(fp)

   switch (flag) 
   32b64:	e0bfff17 	ldw	r2,-4(fp)
   32b68:	10c00060 	cmpeqi	r3,r2,1
   32b6c:	1800041e 	bne	r3,zero,32b80 <sock_select+0x4c>
   32b70:	10c000a0 	cmpeqi	r3,r2,2
   32b74:	1800201e 	bne	r3,zero,32bf8 <sock_select+0xc4>
   32b78:	10004326 	beq	r2,zero,32c88 <sock_select+0x154>
   32b7c:	00006006 	br	32d00 <sock_select+0x1cc>
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
   32b80:	e0bffd17 	ldw	r2,-12(fp)
   32b84:	10800a17 	ldw	r2,40(r2)
   32b88:	10000326 	beq	r2,zero,32b98 <sock_select+0x64>
      {
         ready = 1;
   32b8c:	00800044 	movi	r2,1
   32b90:	e0bffc15 	stw	r2,-16(fp)
         break;
   32b94:	00005a06 	br	32d00 <sock_select+0x1cc>
      }
      if (so->so_state & SS_CANTRCVMORE)
   32b98:	e0bffd17 	ldw	r2,-12(fp)
   32b9c:	1080088b 	ldhu	r2,34(r2)
   32ba0:	10bfffcc 	andi	r2,r2,65535
   32ba4:	1080080c 	andi	r2,r2,32
   32ba8:	10000326 	beq	r2,zero,32bb8 <sock_select+0x84>
      {  ready = 1;
   32bac:	00800044 	movi	r2,1
   32bb0:	e0bffc15 	stw	r2,-16(fp)
         break;
   32bb4:	00005206 	br	32d00 <sock_select+0x1cc>
      }
      if (so->so_qlen)  /* attach is ready */
   32bb8:	e0bffd17 	ldw	r2,-12(fp)
   32bbc:	10801e43 	ldbu	r2,121(r2)
   32bc0:	10803fcc 	andi	r2,r2,255
   32bc4:	1080201c 	xori	r2,r2,128
   32bc8:	10bfe004 	addi	r2,r2,-128
   32bcc:	10000326 	beq	r2,zero,32bdc <sock_select+0xa8>
      {
         ready = 1;
   32bd0:	00800044 	movi	r2,1
   32bd4:	e0bffc15 	stw	r2,-16(fp)
         break;
   32bd8:	00004906 	br	32d00 <sock_select+0x1cc>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
   32bdc:	e0bffd17 	ldw	r2,-12(fp)
   32be0:	1080110b 	ldhu	r2,68(r2)
   32be4:	10800214 	ori	r2,r2,8
   32be8:	1007883a 	mov	r3,r2
   32bec:	e0bffd17 	ldw	r2,-12(fp)
   32bf0:	10c0110d 	sth	r3,68(r2)
      break;
   32bf4:	00004206 	br	32d00 <sock_select+0x1cc>

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
   32bf8:	e0bffd17 	ldw	r2,-12(fp)
   32bfc:	10801317 	ldw	r2,76(r2)
   32c00:	1007883a 	mov	r3,r2
   32c04:	e0bffd17 	ldw	r2,-12(fp)
   32c08:	10801217 	ldw	r2,72(r2)
   32c0c:	1885c83a 	sub	r2,r3,r2
   32c10:	10001816 	blt	r2,zero,32c74 <sock_select+0x140>
   32c14:	e0bffd17 	ldw	r2,-12(fp)
   32c18:	10c01317 	ldw	r3,76(r2)
   32c1c:	e0bffd17 	ldw	r2,-12(fp)
   32c20:	10801217 	ldw	r2,72(r2)
   32c24:	18801326 	beq	r3,r2,32c74 <sock_select+0x140>
          ((((so)->so_state&SS_ISCONNECTED) || 
   32c28:	e0bffd17 	ldw	r2,-12(fp)
   32c2c:	1080088b 	ldhu	r2,34(r2)
   32c30:	10bfffcc 	andi	r2,r2,65535
   32c34:	1080008c 	andi	r2,r2,2
      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
      break;

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
   32c38:	10000b1e 	bne	r2,zero,32c68 <sock_select+0x134>
          ((((so)->so_state&SS_ISCONNECTED) || 
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
   32c3c:	e0bffd17 	ldw	r2,-12(fp)
   32c40:	10800217 	ldw	r2,8(r2)
   32c44:	1080010b 	ldhu	r2,4(r2)
   32c48:	10bfffcc 	andi	r2,r2,65535
   32c4c:	1080010c 	andi	r2,r2,4
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
      break;

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
          ((((so)->so_state&SS_ISCONNECTED) || 
   32c50:	10000526 	beq	r2,zero,32c68 <sock_select+0x134>
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
           ((so)->so_state & SS_CANTSENDMORE)))
   32c54:	e0bffd17 	ldw	r2,-12(fp)
   32c58:	1080088b 	ldhu	r2,34(r2)
   32c5c:	10bfffcc 	andi	r2,r2,65535
   32c60:	1080040c 	andi	r2,r2,16
      break;

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
          ((((so)->so_state&SS_ISCONNECTED) || 
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
   32c64:	10000326 	beq	r2,zero,32c74 <sock_select+0x140>
           ((so)->so_state & SS_CANTSENDMORE)))
      {
         ready = 1;
   32c68:	00800044 	movi	r2,1
   32c6c:	e0bffc15 	stw	r2,-16(fp)
         break;
   32c70:	00002306 	br	32d00 <sock_select+0x1cc>
      }
      sbselqueue (&so->so_snd);
   32c74:	e0bffd17 	ldw	r2,-12(fp)
   32c78:	10801204 	addi	r2,r2,72
   32c7c:	1009883a 	mov	r4,r2
   32c80:	0031cd40 	call	31cd4 <sbselqueue>
      break;
   32c84:	00001e06 	br	32d00 <sock_select+0x1cc>

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
   32c88:	e0bffd17 	ldw	r2,-12(fp)
   32c8c:	10801a17 	ldw	r2,104(r2)
   32c90:	1000051e 	bne	r2,zero,32ca8 <sock_select+0x174>
   32c94:	e0bffd17 	ldw	r2,-12(fp)
   32c98:	1080088b 	ldhu	r2,34(r2)
   32c9c:	10bfffcc 	andi	r2,r2,65535
   32ca0:	1080100c 	andi	r2,r2,64
   32ca4:	10000326 	beq	r2,zero,32cb4 <sock_select+0x180>
      {
         ready = 1;
   32ca8:	00800044 	movi	r2,1
   32cac:	e0bffc15 	stw	r2,-16(fp)
         break;
   32cb0:	00001306 	br	32d00 <sock_select+0x1cc>
      }
      if (so->so_error &&
   32cb4:	e0bffd17 	ldw	r2,-12(fp)
   32cb8:	10800617 	ldw	r2,24(r2)
   32cbc:	10000b26 	beq	r2,zero,32cec <sock_select+0x1b8>
          (so->so_error != EINPROGRESS) &&
   32cc0:	e0bffd17 	ldw	r2,-12(fp)
   32cc4:	10800617 	ldw	r2,24(r2)
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
      {
         ready = 1;
         break;
      }
      if (so->so_error &&
   32cc8:	10801de0 	cmpeqi	r2,r2,119
   32ccc:	1000071e 	bne	r2,zero,32cec <sock_select+0x1b8>
          (so->so_error != EINPROGRESS) &&
          (so->so_error != EWOULDBLOCK))
   32cd0:	e0bffd17 	ldw	r2,-12(fp)
   32cd4:	10800617 	ldw	r2,24(r2)
      {
         ready = 1;
         break;
      }
      if (so->so_error &&
          (so->so_error != EINPROGRESS) &&
   32cd8:	108002e0 	cmpeqi	r2,r2,11
   32cdc:	1000031e 	bne	r2,zero,32cec <sock_select+0x1b8>
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
   32ce0:	00800044 	movi	r2,1
   32ce4:	e0bffc15 	stw	r2,-16(fp)
         break;
   32ce8:	00000506 	br	32d00 <sock_select+0x1cc>
      }
      sbselqueue(&so->so_rcv);
   32cec:	e0bffd17 	ldw	r2,-12(fp)
   32cf0:	10800a04 	addi	r2,r2,40
   32cf4:	1009883a 	mov	r4,r2
   32cf8:	0031cd40 	call	31cd4 <sbselqueue>
      break;
   32cfc:	0001883a 	nop
   }

   return ready;
   32d00:	e0bffc17 	ldw	r2,-16(fp)
}
   32d04:	e037883a 	mov	sp,fp
   32d08:	dfc00117 	ldw	ra,4(sp)
   32d0c:	df000017 	ldw	fp,0(sp)
   32d10:	dec00204 	addi	sp,sp,8
   32d14:	f800283a 	ret

00032d18 <in_pcbnotify>:
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   32d18:	defff804 	addi	sp,sp,-32
   32d1c:	dfc00715 	stw	ra,28(sp)
   32d20:	df000615 	stw	fp,24(sp)
   32d24:	df000604 	addi	fp,sp,24
   32d28:	e13ffc15 	stw	r4,-16(fp)
   32d2c:	e17ffd15 	stw	r5,-12(fp)
   32d30:	e1bffe15 	stw	r6,-8(fp)
   32d34:	e1ffff15 	stw	r7,-4(fp)
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
   32d38:	e0bffc17 	ldw	r2,-16(fp)
   32d3c:	10800017 	ldw	r2,0(r2)
   32d40:	e0bffa15 	stw	r2,-24(fp)
   32d44:	00001c06 	br	32db8 <in_pcbnotify+0xa0>
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
   32d48:	e0bffa17 	ldw	r2,-24(fp)
   32d4c:	10c00317 	ldw	r3,12(r2)
   32d50:	e0bffd17 	ldw	r2,-12(fp)
   32d54:	10800017 	ldw	r2,0(r2)
   32d58:	1880031e 	bne	r3,r2,32d68 <in_pcbnotify+0x50>
          inp->inp_socket == 0) 
   32d5c:	e0bffa17 	ldw	r2,-24(fp)
   32d60:	10800817 	ldw	r2,32(r2)
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
   32d64:	1000041e 	bne	r2,zero,32d78 <in_pcbnotify+0x60>
          inp->inp_socket == 0) 
      {
         inp = inp->inp_next;
   32d68:	e0bffa17 	ldw	r2,-24(fp)
   32d6c:	10800017 	ldw	r2,0(r2)
   32d70:	e0bffa15 	stw	r2,-24(fp)
         continue;
   32d74:	00001006 	br	32db8 <in_pcbnotify+0xa0>
      }
      if (errnum) 
   32d78:	e0bffe17 	ldw	r2,-8(fp)
   32d7c:	10000426 	beq	r2,zero,32d90 <in_pcbnotify+0x78>
         inp->inp_socket->so_error = errnum;
   32d80:	e0bffa17 	ldw	r2,-24(fp)
   32d84:	10800817 	ldw	r2,32(r2)
   32d88:	e0fffe17 	ldw	r3,-8(fp)
   32d8c:	10c00615 	stw	r3,24(r2)
      oinp = inp;
   32d90:	e0bffa17 	ldw	r2,-24(fp)
   32d94:	e0bffb15 	stw	r2,-20(fp)
      inp = inp->inp_next;
   32d98:	e0bffa17 	ldw	r2,-24(fp)
   32d9c:	10800017 	ldw	r2,0(r2)
   32da0:	e0bffa15 	stw	r2,-24(fp)
      if (notify)
   32da4:	e0bfff17 	ldw	r2,-4(fp)
   32da8:	10000326 	beq	r2,zero,32db8 <in_pcbnotify+0xa0>
         (*notify)(oinp);
   32dac:	e0bfff17 	ldw	r2,-4(fp)
   32db0:	e13ffb17 	ldw	r4,-20(fp)
   32db4:	103ee83a 	callr	r2
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
   32db8:	e0fffa17 	ldw	r3,-24(fp)
   32dbc:	e0bffc17 	ldw	r2,-16(fp)
   32dc0:	18bfe11e 	bne	r3,r2,32d48 <__alt_mem_descriptor_memory+0xdeff2d48>
      oinp = inp;
      inp = inp->inp_next;
      if (notify)
         (*notify)(oinp);
   }
}
   32dc4:	e037883a 	mov	sp,fp
   32dc8:	dfc00117 	ldw	ra,4(sp)
   32dcc:	df000017 	ldw	fp,0(sp)
   32dd0:	dec00204 	addi	sp,sp,8
   32dd4:	f800283a 	ret

00032dd8 <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
   32dd8:	defffd04 	addi	sp,sp,-12
   32ddc:	dfc00215 	stw	ra,8(sp)
   32de0:	df000115 	stw	fp,4(sp)
   32de4:	df000104 	addi	fp,sp,4
   32de8:	e13fff15 	stw	r4,-4(fp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
   32dec:	e0bfff17 	ldw	r2,-4(fp)
   32df0:	10800817 	ldw	r2,32(r2)
   32df4:	10800904 	addi	r2,r2,36
   32df8:	1009883a 	mov	r4,r2
   32dfc:	00271c80 	call	271c8 <tcp_wakeup>
   sorwakeup(inp->inp_socket);
   32e00:	e0bfff17 	ldw	r2,-4(fp)
   32e04:	10c00817 	ldw	r3,32(r2)
   32e08:	e0bfff17 	ldw	r2,-4(fp)
   32e0c:	10800817 	ldw	r2,32(r2)
   32e10:	10800a04 	addi	r2,r2,40
   32e14:	1809883a 	mov	r4,r3
   32e18:	100b883a 	mov	r5,r2
   32e1c:	0031d740 	call	31d74 <sbwakeup>
   sowwakeup(inp->inp_socket);
   32e20:	e0bfff17 	ldw	r2,-4(fp)
   32e24:	10c00817 	ldw	r3,32(r2)
   32e28:	e0bfff17 	ldw	r2,-4(fp)
   32e2c:	10800817 	ldw	r2,32(r2)
   32e30:	10801204 	addi	r2,r2,72
   32e34:	1809883a 	mov	r4,r3
   32e38:	100b883a 	mov	r5,r2
   32e3c:	0031d740 	call	31d74 <sbwakeup>
}
   32e40:	e037883a 	mov	sp,fp
   32e44:	dfc00117 	ldw	ra,4(sp)
   32e48:	df000017 	ldw	fp,0(sp)
   32e4c:	dec00204 	addi	sp,sp,8
   32e50:	f800283a 	ret

00032e54 <ifd_clr>:
 * compacts the fd_set.
 */

void
ifd_clr(long sock, fd_set *set)
{
   32e54:	defffb04 	addi	sp,sp,-20
   32e58:	dfc00415 	stw	ra,16(sp)
   32e5c:	df000315 	stw	fp,12(sp)
   32e60:	df000304 	addi	fp,sp,12
   32e64:	e13ffe15 	stw	r4,-8(fp)
   32e68:	e17fff15 	stw	r5,-4(fp)
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
   32e6c:	e03ffd15 	stw	zero,-12(fp)
   32e70:	00002a06 	br	32f1c <ifd_clr+0xc8>
   {
      if (set->fd_array[i] == sock)
   32e74:	e0ffff17 	ldw	r3,-4(fp)
   32e78:	e0bffd17 	ldw	r2,-12(fp)
   32e7c:	10800044 	addi	r2,r2,1
   32e80:	1085883a 	add	r2,r2,r2
   32e84:	1085883a 	add	r2,r2,r2
   32e88:	1885883a 	add	r2,r3,r2
   32e8c:	10c00017 	ldw	r3,0(r2)
   32e90:	e0bffe17 	ldw	r2,-8(fp)
   32e94:	18801e1e 	bne	r3,r2,32f10 <ifd_clr+0xbc>
      {
         while (i + 1 < set->fd_count)
   32e98:	00001206 	br	32ee4 <ifd_clr+0x90>
         {
            set->fd_array[i] = set->fd_array[i + 1];
   32e9c:	e0bffd17 	ldw	r2,-12(fp)
   32ea0:	10800044 	addi	r2,r2,1
   32ea4:	e0ffff17 	ldw	r3,-4(fp)
   32ea8:	10800044 	addi	r2,r2,1
   32eac:	1085883a 	add	r2,r2,r2
   32eb0:	1085883a 	add	r2,r2,r2
   32eb4:	1885883a 	add	r2,r3,r2
   32eb8:	10c00017 	ldw	r3,0(r2)
   32ebc:	e13fff17 	ldw	r4,-4(fp)
   32ec0:	e0bffd17 	ldw	r2,-12(fp)
   32ec4:	10800044 	addi	r2,r2,1
   32ec8:	1085883a 	add	r2,r2,r2
   32ecc:	1085883a 	add	r2,r2,r2
   32ed0:	2085883a 	add	r2,r4,r2
   32ed4:	10c00015 	stw	r3,0(r2)
            i++;
   32ed8:	e0bffd17 	ldw	r2,-12(fp)
   32edc:	10800044 	addi	r2,r2,1
   32ee0:	e0bffd15 	stw	r2,-12(fp)

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
      {
         while (i + 1 < set->fd_count)
   32ee4:	e0bffd17 	ldw	r2,-12(fp)
   32ee8:	10c00044 	addi	r3,r2,1
   32eec:	e0bfff17 	ldw	r2,-4(fp)
   32ef0:	10800017 	ldw	r2,0(r2)
   32ef4:	18bfe936 	bltu	r3,r2,32e9c <__alt_mem_descriptor_memory+0xdeff2e9c>
         {
            set->fd_array[i] = set->fd_array[i + 1];
            i++;
         }
         set->fd_count--;
   32ef8:	e0bfff17 	ldw	r2,-4(fp)
   32efc:	10800017 	ldw	r2,0(r2)
   32f00:	10ffffc4 	addi	r3,r2,-1
   32f04:	e0bfff17 	ldw	r2,-4(fp)
   32f08:	10c00015 	stw	r3,0(r2)
         return;
   32f0c:	00000806 	br	32f30 <ifd_clr+0xdc>
void
ifd_clr(long sock, fd_set *set)
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
   32f10:	e0bffd17 	ldw	r2,-12(fp)
   32f14:	10800044 	addi	r2,r2,1
   32f18:	e0bffd15 	stw	r2,-12(fp)
   32f1c:	e0bfff17 	ldw	r2,-4(fp)
   32f20:	10800017 	ldw	r2,0(r2)
   32f24:	e0fffd17 	ldw	r3,-12(fp)
   32f28:	18bfd236 	bltu	r3,r2,32e74 <__alt_mem_descriptor_memory+0xdeff2e74>
         return;
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
   32f2c:	002b0f40 	call	2b0f4 <dtrap>
#endif
}
   32f30:	e037883a 	mov	sp,fp
   32f34:	dfc00117 	ldw	ra,4(sp)
   32f38:	df000017 	ldw	fp,0(sp)
   32f3c:	dec00204 	addi	sp,sp,8
   32f40:	f800283a 	ret

00032f44 <ifd_set>:
 * called if the fd_set structure is already full.
 */

void
ifd_set(long sock, fd_set *set)
{
   32f44:	defffc04 	addi	sp,sp,-16
   32f48:	dfc00315 	stw	ra,12(sp)
   32f4c:	df000215 	stw	fp,8(sp)
   32f50:	df000204 	addi	fp,sp,8
   32f54:	e13ffe15 	stw	r4,-8(fp)
   32f58:	e17fff15 	stw	r5,-4(fp)
   if (set->fd_count < FD_SETSIZE)
   32f5c:	e0bfff17 	ldw	r2,-4(fp)
   32f60:	10800017 	ldw	r2,0(r2)
   32f64:	10801028 	cmpgeui	r2,r2,64
   32f68:	10000d1e 	bne	r2,zero,32fa0 <ifd_set+0x5c>
      set->fd_array[set->fd_count++] = sock;
   32f6c:	e0bfff17 	ldw	r2,-4(fp)
   32f70:	10800017 	ldw	r2,0(r2)
   32f74:	11000044 	addi	r4,r2,1
   32f78:	e0ffff17 	ldw	r3,-4(fp)
   32f7c:	19000015 	stw	r4,0(r3)
   32f80:	e0ffff17 	ldw	r3,-4(fp)
   32f84:	10800044 	addi	r2,r2,1
   32f88:	1085883a 	add	r2,r2,r2
   32f8c:	1085883a 	add	r2,r2,r2
   32f90:	1885883a 	add	r2,r3,r2
   32f94:	e0fffe17 	ldw	r3,-8(fp)
   32f98:	10c00015 	stw	r3,0(r2)
   32f9c:	00000106 	br	32fa4 <ifd_set+0x60>
#ifdef NPDEBUG
   else
      dtrap();
   32fa0:	002b0f40 	call	2b0f4 <dtrap>
#endif
}
   32fa4:	e037883a 	mov	sp,fp
   32fa8:	dfc00117 	ldw	ra,4(sp)
   32fac:	df000017 	ldw	fp,0(sp)
   32fb0:	dec00204 	addi	sp,sp,8
   32fb4:	f800283a 	ret

00032fb8 <ifd_isset>:
 * Tests if a socket is a member of a file descriptor set.
 */

int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   32fb8:	defffc04 	addi	sp,sp,-16
   32fbc:	df000315 	stw	fp,12(sp)
   32fc0:	df000304 	addi	fp,sp,12
   32fc4:	e13ffe15 	stw	r4,-8(fp)
   32fc8:	e17fff15 	stw	r5,-4(fp)
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
   32fcc:	e03ffd15 	stw	zero,-12(fp)
   32fd0:	00000e06 	br	3300c <ifd_isset+0x54>
   {
      if (set->fd_array[i] == sock)
   32fd4:	e0ffff17 	ldw	r3,-4(fp)
   32fd8:	e0bffd17 	ldw	r2,-12(fp)
   32fdc:	10800044 	addi	r2,r2,1
   32fe0:	1085883a 	add	r2,r2,r2
   32fe4:	1085883a 	add	r2,r2,r2
   32fe8:	1885883a 	add	r2,r3,r2
   32fec:	10c00017 	ldw	r3,0(r2)
   32ff0:	e0bffe17 	ldw	r2,-8(fp)
   32ff4:	1880021e 	bne	r3,r2,33000 <ifd_isset+0x48>
         return TRUE;
   32ff8:	00800044 	movi	r2,1
   32ffc:	00000806 	br	33020 <ifd_isset+0x68>
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
   33000:	e0bffd17 	ldw	r2,-12(fp)
   33004:	10800044 	addi	r2,r2,1
   33008:	e0bffd15 	stw	r2,-12(fp)
   3300c:	e0bfff17 	ldw	r2,-4(fp)
   33010:	10800017 	ldw	r2,0(r2)
   33014:	e0fffd17 	ldw	r3,-12(fp)
   33018:	18bfee36 	bltu	r3,r2,32fd4 <__alt_mem_descriptor_memory+0xdeff2fd4>
   {
      if (set->fd_array[i] == sock)
         return TRUE;
   }
   return FALSE;
   3301c:	0005883a 	mov	r2,zero
}
   33020:	e037883a 	mov	sp,fp
   33024:	df000017 	ldw	fp,0(sp)
   33028:	dec00104 	addi	sp,sp,4
   3302c:	f800283a 	ret

00033030 <ifd_get>:
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
   33030:	defffc04 	addi	sp,sp,-16
   33034:	dfc00315 	stw	ra,12(sp)
   33038:	df000215 	stw	fp,8(sp)
   3303c:	df000204 	addi	fp,sp,8
   33040:	e13ffe15 	stw	r4,-8(fp)
   33044:	e17fff15 	stw	r5,-4(fp)
   if (i < set->fd_count)
   33048:	e0bfff17 	ldw	r2,-4(fp)
   3304c:	10800017 	ldw	r2,0(r2)
   33050:	e0fffe17 	ldw	r3,-8(fp)
   33054:	1880082e 	bgeu	r3,r2,33078 <ifd_get+0x48>
      return set->fd_array[i];
   33058:	e0ffff17 	ldw	r3,-4(fp)
   3305c:	e0bffe17 	ldw	r2,-8(fp)
   33060:	10800044 	addi	r2,r2,1
   33064:	1085883a 	add	r2,r2,r2
   33068:	1085883a 	add	r2,r2,r2
   3306c:	1885883a 	add	r2,r3,r2
   33070:	10800017 	ldw	r2,0(r2)
   33074:	00000206 	br	33080 <ifd_get+0x50>
   else
   {
#ifdef NPDEBUG
      dtrap();
   33078:	002b0f40 	call	2b0f4 <dtrap>
#endif
      return INVALID_SOCKET;
   3307c:	00bfffc4 	movi	r2,-1
   }
}
   33080:	e037883a 	mov	sp,fp
   33084:	dfc00117 	ldw	ra,4(sp)
   33088:	df000017 	ldw	fp,0(sp)
   3308c:	dec00204 	addi	sp,sp,8
   33090:	f800283a 	ret

00033094 <tcp_reass>:

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
   33094:	defff504 	addi	sp,sp,-44
   33098:	dfc00a15 	stw	ra,40(sp)
   3309c:	df000915 	stw	fp,36(sp)
   330a0:	df000904 	addi	fp,sp,36
   330a4:	e13ffd15 	stw	r4,-12(fp)
   330a8:	e17ffe15 	stw	r5,-8(fp)
   330ac:	e1bfff15 	stw	r6,-4(fp)
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
   330b0:	e0bffd17 	ldw	r2,-12(fp)
   330b4:	10800d17 	ldw	r2,52(r2)
   330b8:	10800817 	ldw	r2,32(r2)
   330bc:	e0bff815 	stw	r2,-32(fp)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
   330c0:	e0bffe17 	ldw	r2,-8(fp)
   330c4:	1000011e 	bne	r2,zero,330cc <tcp_reass+0x38>
      goto present;
   330c8:	0000a106 	br	33350 <tcp_reass+0x2bc>

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
   330cc:	e0bffd17 	ldw	r2,-12(fp)
   330d0:	10800017 	ldw	r2,0(r2)
   330d4:	e0bff715 	stw	r2,-36(fp)
   330d8:	00000a06 	br	33104 <tcp_reass+0x70>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
   330dc:	e0bff717 	ldw	r2,-36(fp)
   330e0:	10c00617 	ldw	r3,24(r2)
   330e4:	e0bffe17 	ldw	r2,-8(fp)
   330e8:	10800617 	ldw	r2,24(r2)
   330ec:	1885c83a 	sub	r2,r3,r2
   330f0:	0080010e 	bge	zero,r2,330f8 <tcp_reass+0x64>
      break;
   330f4:	00000606 	br	33110 <tcp_reass+0x7c>

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
       q = (struct tcpiphdr *)q->ti_next)
   330f8:	e0bff717 	ldw	r2,-36(fp)
   330fc:	10800017 	ldw	r2,0(r2)
   33100:	e0bff715 	stw	r2,-36(fp)
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
   33104:	e0fff717 	ldw	r3,-36(fp)
   33108:	e0bffd17 	ldw	r2,-12(fp)
   3310c:	18bff31e 	bne	r3,r2,330dc <__alt_mem_descriptor_memory+0xdeff30dc>
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
   33110:	e0bff717 	ldw	r2,-36(fp)
   33114:	10c00117 	ldw	r3,4(r2)
   33118:	e0bffd17 	ldw	r2,-12(fp)
   3311c:	18803f26 	beq	r3,r2,3321c <tcp_reass+0x188>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
   33120:	e0bff717 	ldw	r2,-36(fp)
   33124:	10800117 	ldw	r2,4(r2)
   33128:	e0bff715 	stw	r2,-36(fp)
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
   3312c:	e0bff717 	ldw	r2,-36(fp)
   33130:	10c00617 	ldw	r3,24(r2)
   33134:	e0bff717 	ldw	r2,-36(fp)
   33138:	1080028b 	ldhu	r2,10(r2)
   3313c:	10bfffcc 	andi	r2,r2,65535
   33140:	1887883a 	add	r3,r3,r2
   33144:	e0bffe17 	ldw	r2,-8(fp)
   33148:	10800617 	ldw	r2,24(r2)
   3314c:	1885c83a 	sub	r2,r3,r2
   33150:	e0bff915 	stw	r2,-28(fp)
      if (i > 0) 
   33154:	e0bff917 	ldw	r2,-28(fp)
   33158:	00802d0e 	bge	zero,r2,33210 <tcp_reass+0x17c>
      {
         if (i >= (long)ti->ti_len) 
   3315c:	e0bffe17 	ldw	r2,-8(fp)
   33160:	1080028b 	ldhu	r2,10(r2)
   33164:	10bfffcc 	andi	r2,r2,65535
   33168:	e0fff917 	ldw	r3,-28(fp)
   3316c:	18801816 	blt	r3,r2,331d0 <tcp_reass+0x13c>
         {
            tcpstat.tcps_rcvduppack++;
   33170:	008001b4 	movhi	r2,6
   33174:	10b90b04 	addi	r2,r2,-7124
   33178:	10801f17 	ldw	r2,124(r2)
   3317c:	10c00044 	addi	r3,r2,1
   33180:	008001b4 	movhi	r2,6
   33184:	10b90b04 	addi	r2,r2,-7124
   33188:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
   3318c:	008001b4 	movhi	r2,6
   33190:	10b90b04 	addi	r2,r2,-7124
   33194:	10c02017 	ldw	r3,128(r2)
   33198:	e0bffe17 	ldw	r2,-8(fp)
   3319c:	1080028b 	ldhu	r2,10(r2)
   331a0:	10bfffcc 	andi	r2,r2,65535
   331a4:	1887883a 	add	r3,r3,r2
   331a8:	008001b4 	movhi	r2,6
   331ac:	10b90b04 	addi	r2,r2,-7124
   331b0:	10c02015 	stw	r3,128(r2)
            GOTO_DROP;
   331b4:	008025c4 	movi	r2,151
   331b8:	d0a89e15 	stw	r2,-23944(gp)
   331bc:	0001883a 	nop
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
   331c0:	e13fff17 	ldw	r4,-4(fp)
   331c4:	002c1a40 	call	2c1a4 <m_freem>
   return (0);
   331c8:	0005883a 	mov	r2,zero
   331cc:	0000ad06 	br	33484 <tcp_reass+0x3f0>
         {
            tcpstat.tcps_rcvduppack++;
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
            GOTO_DROP;
         }
         m_adj (ti_mbuf, (int)i);
   331d0:	e13fff17 	ldw	r4,-4(fp)
   331d4:	e17ff917 	ldw	r5,-28(fp)
   331d8:	002c4d40 	call	2c4d4 <m_adj>
         ti->ti_len -= (short)i;
   331dc:	e0bffe17 	ldw	r2,-8(fp)
   331e0:	1080028b 	ldhu	r2,10(r2)
   331e4:	e0fff917 	ldw	r3,-28(fp)
   331e8:	10c5c83a 	sub	r2,r2,r3
   331ec:	1007883a 	mov	r3,r2
   331f0:	e0bffe17 	ldw	r2,-8(fp)
   331f4:	10c0028d 	sth	r3,10(r2)
         ti->ti_seq += (tcp_seq)i;
   331f8:	e0bffe17 	ldw	r2,-8(fp)
   331fc:	10c00617 	ldw	r3,24(r2)
   33200:	e0bff917 	ldw	r2,-28(fp)
   33204:	1887883a 	add	r3,r3,r2
   33208:	e0bffe17 	ldw	r2,-8(fp)
   3320c:	10c00615 	stw	r3,24(r2)
      }
      q = (struct tcpiphdr *)(q->ti_next);
   33210:	e0bff717 	ldw	r2,-36(fp)
   33214:	10800017 	ldw	r2,0(r2)
   33218:	e0bff715 	stw	r2,-36(fp)
   }
   tcpstat.tcps_rcvoopack++;
   3321c:	008001b4 	movhi	r2,6
   33220:	10b90b04 	addi	r2,r2,-7124
   33224:	10802317 	ldw	r2,140(r2)
   33228:	10c00044 	addi	r3,r2,1
   3322c:	008001b4 	movhi	r2,6
   33230:	10b90b04 	addi	r2,r2,-7124
   33234:	10c02315 	stw	r3,140(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
   33238:	008001b4 	movhi	r2,6
   3323c:	10b90b04 	addi	r2,r2,-7124
   33240:	10c02417 	ldw	r3,144(r2)
   33244:	e0bffe17 	ldw	r2,-8(fp)
   33248:	1080028b 	ldhu	r2,10(r2)
   3324c:	10bfffcc 	andi	r2,r2,65535
   33250:	1887883a 	add	r3,r3,r2
   33254:	008001b4 	movhi	r2,6
   33258:	10b90b04 	addi	r2,r2,-7124
   3325c:	10c02415 	stw	r3,144(r2)

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
   33260:	00003306 	br	33330 <tcp_reass+0x29c>
   {
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
   33264:	e0bffe17 	ldw	r2,-8(fp)
   33268:	10c00617 	ldw	r3,24(r2)
   3326c:	e0bffe17 	ldw	r2,-8(fp)
   33270:	1080028b 	ldhu	r2,10(r2)
   33274:	10bfffcc 	andi	r2,r2,65535
   33278:	1887883a 	add	r3,r3,r2
   3327c:	e0bff717 	ldw	r2,-36(fp)
   33280:	10800617 	ldw	r2,24(r2)
   33284:	1885c83a 	sub	r2,r3,r2
   33288:	e0bffa15 	stw	r2,-24(fp)
      if (i <= 0)
   3328c:	e0bffa17 	ldw	r2,-24(fp)
   33290:	00800116 	blt	zero,r2,33298 <tcp_reass+0x204>
         break;
   33294:	00002906 	br	3333c <tcp_reass+0x2a8>
      if (i < (int)(q->ti_len))
   33298:	e0bff717 	ldw	r2,-36(fp)
   3329c:	1080028b 	ldhu	r2,10(r2)
   332a0:	10bfffcc 	andi	r2,r2,65535
   332a4:	e0fffa17 	ldw	r3,-24(fp)
   332a8:	1880130e 	bge	r3,r2,332f8 <tcp_reass+0x264>
      {
         q->ti_seq += i;
   332ac:	e0bff717 	ldw	r2,-36(fp)
   332b0:	10c00617 	ldw	r3,24(r2)
   332b4:	e0bffa17 	ldw	r2,-24(fp)
   332b8:	1887883a 	add	r3,r3,r2
   332bc:	e0bff717 	ldw	r2,-36(fp)
   332c0:	10c00615 	stw	r3,24(r2)
         q->ti_len -= (u_short)i;
   332c4:	e0bff717 	ldw	r2,-36(fp)
   332c8:	1080028b 	ldhu	r2,10(r2)
   332cc:	e0fffa17 	ldw	r3,-24(fp)
   332d0:	10c5c83a 	sub	r2,r2,r3
   332d4:	1007883a 	mov	r3,r2
   332d8:	e0bff717 	ldw	r2,-36(fp)
   332dc:	10c0028d 	sth	r3,10(r2)
         m_adj (dtom(q), (int)i);
   332e0:	e13ff717 	ldw	r4,-36(fp)
   332e4:	002c6ec0 	call	2c6ec <dtom>
   332e8:	1009883a 	mov	r4,r2
   332ec:	e17ffa17 	ldw	r5,-24(fp)
   332f0:	002c4d40 	call	2c4d4 <m_adj>
         break;
   332f4:	00001106 	br	3333c <tcp_reass+0x2a8>
      }
      q = (struct tcpiphdr *)q->ti_next;
   332f8:	e0bff717 	ldw	r2,-36(fp)
   332fc:	10800017 	ldw	r2,0(r2)
   33300:	e0bff715 	stw	r2,-36(fp)
      m = dtom(q->ti_prev);
   33304:	e0bff717 	ldw	r2,-36(fp)
   33308:	10800117 	ldw	r2,4(r2)
   3330c:	1009883a 	mov	r4,r2
   33310:	002c6ec0 	call	2c6ec <dtom>
   33314:	e0bffb15 	stw	r2,-20(fp)
      remque (q->ti_prev);
   33318:	e0bff717 	ldw	r2,-36(fp)
   3331c:	10800117 	ldw	r2,4(r2)
   33320:	1009883a 	mov	r4,r2
   33324:	002c7880 	call	2c788 <remque>
      m_freem (m);
   33328:	e13ffb17 	ldw	r4,-20(fp)
   3332c:	002c1a40 	call	2c1a4 <m_freem>

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
   33330:	e0fff717 	ldw	r3,-36(fp)
   33334:	e0bffd17 	ldw	r2,-12(fp)
   33338:	18bfca1e 	bne	r3,r2,33264 <__alt_mem_descriptor_memory+0xdeff3264>
   }

   /*
    * Stick new segment in its place.
    */
   insque(ti, q->ti_prev);
   3333c:	e0bff717 	ldw	r2,-36(fp)
   33340:	10800117 	ldw	r2,4(r2)
   33344:	e13ffe17 	ldw	r4,-8(fp)
   33348:	100b883a 	mov	r5,r2
   3334c:	002c7f40 	call	2c7f4 <insque>
present:
   /*
    * Present data to user, advancing rcv_nxt through
    * completed sequence space.
    */
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
   33350:	e0bffd17 	ldw	r2,-12(fp)
   33354:	10800217 	ldw	r2,8(r2)
   33358:	108000c8 	cmpgei	r2,r2,3
   3335c:	1000021e 	bne	r2,zero,33368 <tcp_reass+0x2d4>
      return (0);
   33360:	0005883a 	mov	r2,zero
   33364:	00004706 	br	33484 <tcp_reass+0x3f0>
   ti = tp->seg_next;
   33368:	e0bffd17 	ldw	r2,-12(fp)
   3336c:	10800017 	ldw	r2,0(r2)
   33370:	e0bffe15 	stw	r2,-8(fp)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
   33374:	e0fffe17 	ldw	r3,-8(fp)
   33378:	e0bffd17 	ldw	r2,-12(fp)
   3337c:	18800526 	beq	r3,r2,33394 <tcp_reass+0x300>
   33380:	e0bffe17 	ldw	r2,-8(fp)
   33384:	10c00617 	ldw	r3,24(r2)
   33388:	e0bffd17 	ldw	r2,-12(fp)
   3338c:	10801617 	ldw	r2,88(r2)
   33390:	18800226 	beq	r3,r2,3339c <tcp_reass+0x308>
      return (0);
   33394:	0005883a 	mov	r2,zero
   33398:	00003a06 	br	33484 <tcp_reass+0x3f0>
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
   3339c:	e0bffd17 	ldw	r2,-12(fp)
   333a0:	10800217 	ldw	r2,8(r2)
   333a4:	108000d8 	cmpnei	r2,r2,3
   333a8:	1000061e 	bne	r2,zero,333c4 <tcp_reass+0x330>
   333ac:	e0bffe17 	ldw	r2,-8(fp)
   333b0:	1080028b 	ldhu	r2,10(r2)
   333b4:	10bfffcc 	andi	r2,r2,65535
   333b8:	10000226 	beq	r2,zero,333c4 <tcp_reass+0x330>
      return (0);
   333bc:	0005883a 	mov	r2,zero
   333c0:	00003006 	br	33484 <tcp_reass+0x3f0>
   do 
   {
      tp->rcv_nxt += ti->ti_len;
   333c4:	e0bffd17 	ldw	r2,-12(fp)
   333c8:	10c01617 	ldw	r3,88(r2)
   333cc:	e0bffe17 	ldw	r2,-8(fp)
   333d0:	1080028b 	ldhu	r2,10(r2)
   333d4:	10bfffcc 	andi	r2,r2,65535
   333d8:	1887883a 	add	r3,r3,r2
   333dc:	e0bffd17 	ldw	r2,-12(fp)
   333e0:	10c01615 	stw	r3,88(r2)
      flags = ti->ti_flags & TH_FIN;
   333e4:	e0bffe17 	ldw	r2,-8(fp)
   333e8:	10800843 	ldbu	r2,33(r2)
   333ec:	10803fcc 	andi	r2,r2,255
   333f0:	1080004c 	andi	r2,r2,1
   333f4:	e0bffc15 	stw	r2,-16(fp)
      remque(ti);
   333f8:	e13ffe17 	ldw	r4,-8(fp)
   333fc:	002c7880 	call	2c788 <remque>
      m = dtom(ti);
   33400:	e13ffe17 	ldw	r4,-8(fp)
   33404:	002c6ec0 	call	2c6ec <dtom>
   33408:	e0bffb15 	stw	r2,-20(fp)
      ti = (struct tcpiphdr *)ti->ti_next;
   3340c:	e0bffe17 	ldw	r2,-8(fp)
   33410:	10800017 	ldw	r2,0(r2)
   33414:	e0bffe15 	stw	r2,-8(fp)
      if (so->so_state & SS_CANTRCVMORE)
   33418:	e0bff817 	ldw	r2,-32(fp)
   3341c:	1080088b 	ldhu	r2,34(r2)
   33420:	10bfffcc 	andi	r2,r2,65535
   33424:	1080080c 	andi	r2,r2,32
   33428:	10000326 	beq	r2,zero,33438 <tcp_reass+0x3a4>
         m_freem (m);
   3342c:	e13ffb17 	ldw	r4,-20(fp)
   33430:	002c1a40 	call	2c1a4 <m_freem>
   33434:	00000506 	br	3344c <tcp_reass+0x3b8>
      else
         sbappend (&so->so_rcv, m);
   33438:	e0bff817 	ldw	r2,-32(fp)
   3343c:	10800a04 	addi	r2,r2,40
   33440:	1009883a 	mov	r4,r2
   33444:	e17ffb17 	ldw	r5,-20(fp)
   33448:	0031f280 	call	31f28 <sbappend>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
   3344c:	e0fffe17 	ldw	r3,-8(fp)
   33450:	e0bffd17 	ldw	r2,-12(fp)
   33454:	18800526 	beq	r3,r2,3346c <tcp_reass+0x3d8>
   33458:	e0bffe17 	ldw	r2,-8(fp)
   3345c:	10c00617 	ldw	r3,24(r2)
   33460:	e0bffd17 	ldw	r2,-12(fp)
   33464:	10801617 	ldw	r2,88(r2)
   33468:	18bfd626 	beq	r3,r2,333c4 <__alt_mem_descriptor_memory+0xdeff33c4>
      sorwakeup(so);
   3346c:	e0bff817 	ldw	r2,-32(fp)
   33470:	10800a04 	addi	r2,r2,40
   33474:	e13ff817 	ldw	r4,-32(fp)
   33478:	100b883a 	mov	r5,r2
   3347c:	0031d740 	call	31d74 <sbwakeup>
   return (flags);
   33480:	e0bffc17 	ldw	r2,-16(fp)
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
   return (0);
}
   33484:	e037883a 	mov	sp,fp
   33488:	dfc00117 	ldw	ra,4(sp)
   3348c:	df000017 	ldw	fp,0(sp)
   33490:	dec00204 	addi	sp,sp,8
   33494:	f800283a 	ret

00033498 <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
   33498:	deffdf04 	addi	sp,sp,-132
   3349c:	dfc02015 	stw	ra,128(sp)
   334a0:	df001f15 	stw	fp,124(sp)
   334a4:	df001f04 	addi	fp,sp,124
   334a8:	e13ffe15 	stw	r4,-8(fp)
   334ac:	e17fff15 	stw	r5,-4(fp)
   ip6_addr    ip6_src;
   ip6_addr    ip6_dst;
#endif   /* IP_V6 */
   struct tcpiphdr * ti;
   struct inpcb * inp;
   struct mbuf *  om =  0;
   334b0:	e03fe515 	stw	zero,-108(fp)
   int   len,  tlen, off;
   struct tcpcb * tp =  0;
   334b4:	e03fe615 	stw	zero,-104(fp)
   int   tiflags;
   struct socket *   so =  NULL;
   334b8:	e03fe815 	stw	zero,-96(fp)
   int   todrop,  acked,   ourfinisacked, needoutput  =  0;
   334bc:	e03feb15 	stw	zero,-84(fp)
   int   dropsocket  =  0;
   334c0:	e03fec15 	stw	zero,-80(fp)
   long  iss   =  0;
   334c4:	e03fed15 	stw	zero,-76(fp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
   334c8:	008001b4 	movhi	r2,6
   334cc:	10b90b04 	addi	r2,r2,-7124
   334d0:	10801917 	ldw	r2,100(r2)
   334d4:	10c00044 	addi	r3,r2,1
   334d8:	008001b4 	movhi	r2,6
   334dc:	10b90b04 	addi	r2,r2,-7124
   334e0:	10c01915 	stw	r3,100(r2)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
   334e4:	008001b4 	movhi	r2,6
   334e8:	10b8dd04 	addi	r2,r2,-7308
   334ec:	10800917 	ldw	r2,36(r2)
   334f0:	10c00044 	addi	r3,r2,1
   334f4:	008001b4 	movhi	r2,6
   334f8:	10b8dd04 	addi	r2,r2,-7308
   334fc:	10c00915 	stw	r3,36(r2)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
   33500:	e0bffe17 	ldw	r2,-8(fp)
   33504:	10800317 	ldw	r2,12(r2)
   33508:	e0bfe315 	stw	r2,-116(fp)
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
   3350c:	e0bfe317 	ldw	r2,-116(fp)
   33510:	10800003 	ldbu	r2,0(r2)
   33514:	10803fcc 	andi	r2,r2,255
   33518:	108011b0 	cmpltui	r2,r2,70
   3351c:	1000061e 	bne	r2,zero,33538 <tcp_input+0xa0>
      {
         np_stripoptions(pip, (struct mbuf *)m);
   33520:	e13fe317 	ldw	r4,-116(fp)
   33524:	e17ffe17 	ldw	r5,-8(fp)
   33528:	002d1480 	call	2d148 <np_stripoptions>
         pip = mtod(m, struct ip *);
   3352c:	e0bffe17 	ldw	r2,-8(fp)
   33530:	10800317 	ldw	r2,12(r2)
   33534:	e0bfe315 	stw	r2,-116(fp)
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
   33538:	e0bffe17 	ldw	r2,-8(fp)
   3353c:	10800217 	ldw	r2,8(r2)
   33540:	10800a28 	cmpgeui	r2,r2,40
   33544:	1000081e 	bne	r2,zero,33568 <tcp_input+0xd0>
      {
         tcpstat.tcps_rcvshort++;
   33548:	008001b4 	movhi	r2,6
   3354c:	10b90b04 	addi	r2,r2,-7124
   33550:	10801e17 	ldw	r2,120(r2)
   33554:	10c00044 	addi	r3,r2,1
   33558:	008001b4 	movhi	r2,6
   3355c:	10b90b04 	addi	r2,r2,-7124
   33560:	10c01e15 	stw	r3,120(r2)
         return;
   33564:	00089d06 	br	357dc <tcp_input+0x2344>
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
   33568:	e0bfe317 	ldw	r2,-116(fp)
   3356c:	1080008b 	ldhu	r2,2(r2)
   33570:	10bfffcc 	andi	r2,r2,65535
   33574:	e0bff115 	stw	r2,-60(fp)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
   33578:	e0bffe17 	ldw	r2,-8(fp)
   3357c:	10800317 	ldw	r2,12(r2)
   33580:	e0bff215 	stw	r2,-56(fp)
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
   33584:	e0bffe17 	ldw	r2,-8(fp)
   33588:	10800117 	ldw	r2,4(r2)
   3358c:	10800117 	ldw	r2,4(r2)
   33590:	e0fff217 	ldw	r3,-56(fp)
   33594:	1880032e 	bgeu	r3,r2,335a4 <tcp_input+0x10c>
      {
         panic("tcp_input");
   33598:	01000174 	movhi	r4,5
   3359c:	213b7604 	addi	r4,r4,-4648
   335a0:	00267380 	call	26738 <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
   335a4:	e0bff217 	ldw	r2,-56(fp)
   335a8:	10800803 	ldbu	r2,32(r2)
   335ac:	10803fcc 	andi	r2,r2,255
   335b0:	1004d13a 	srli	r2,r2,4
   335b4:	10803fcc 	andi	r2,r2,255
   335b8:	1085883a 	add	r2,r2,r2
   335bc:	1085883a 	add	r2,r2,r2
   335c0:	e0bff315 	stw	r2,-52(fp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
   335c4:	e0bff317 	ldw	r2,-52(fp)
   335c8:	10800530 	cmpltui	r2,r2,20
   335cc:	1000031e 	bne	r2,zero,335dc <tcp_input+0x144>
   335d0:	e0bff317 	ldw	r2,-52(fp)
   335d4:	e0fff117 	ldw	r3,-60(fp)
   335d8:	1880110e 	bge	r3,r2,33620 <tcp_input+0x188>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
   335dc:	008001b4 	movhi	r2,6
   335e0:	10b90b04 	addi	r2,r2,-7124
   335e4:	10801d17 	ldw	r2,116(r2)
   335e8:	10c00044 	addi	r3,r2,1
   335ec:	008001b4 	movhi	r2,6
   335f0:	10b90b04 	addi	r2,r2,-7124
   335f4:	10c01d15 	stw	r3,116(r2)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
   335f8:	008001b4 	movhi	r2,6
   335fc:	10b8dd04 	addi	r2,r2,-7308
   33600:	10800d17 	ldw	r2,52(r2)
   33604:	10c00044 	addi	r3,r2,1
   33608:	008001b4 	movhi	r2,6
   3360c:	10b8dd04 	addi	r2,r2,-7308
   33610:	10c00d15 	stw	r3,52(r2)
      GOTO_DROP;
   33614:	00805784 	movi	r2,350
   33618:	d0a89e15 	stw	r2,-23944(gp)
   3361c:	00086406 	br	357b0 <tcp_input+0x2318>
   }
   tlen -= (int)off;
   33620:	e0fff117 	ldw	r3,-60(fp)
   33624:	e0bff317 	ldw	r2,-52(fp)
   33628:	1885c83a 	sub	r2,r3,r2
   3362c:	e0bff115 	stw	r2,-60(fp)
   ti->ti_len = (u_short)tlen;
   33630:	e0bff117 	ldw	r2,-60(fp)
   33634:	1007883a 	mov	r3,r2
   33638:	e0bff217 	ldw	r2,-56(fp)
   3363c:	10c0028d 	sth	r3,10(r2)
   if (off > sizeof (struct tcphdr)) 
   33640:	e0bff317 	ldw	r2,-52(fp)
   33644:	10800570 	cmpltui	r2,r2,21
   33648:	1000331e 	bne	r2,zero,33718 <tcp_input+0x280>
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
   3364c:	e0bff317 	ldw	r2,-52(fp)
   33650:	10bffb04 	addi	r2,r2,-20
   33654:	e0bff415 	stw	r2,-48(fp)
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
   33658:	01000044 	movi	r4,1
   3365c:	e17ff417 	ldw	r5,-48(fp)
   33660:	002bf0c0 	call	2bf0c <m_getnbuf>
   33664:	e0bfe515 	stw	r2,-108(fp)
      if (om == 0)
   33668:	e0bfe517 	ldw	r2,-108(fp)
   3366c:	1000031e 	bne	r2,zero,3367c <tcp_input+0x1e4>
         GOTO_DROP;
   33670:	00805a84 	movi	r2,362
   33674:	d0a89e15 	stw	r2,-23944(gp)
   33678:	00084d06 	br	357b0 <tcp_input+0x2318>
      om->m_len = olen;       /* set mbuf length */
   3367c:	e0fff417 	ldw	r3,-48(fp)
   33680:	e0bfe517 	ldw	r2,-108(fp)
   33684:	10c00215 	stw	r3,8(r2)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
   33688:	e0bffe17 	ldw	r2,-8(fp)
   3368c:	10800117 	ldw	r2,4(r2)
   33690:	1080080b 	ldhu	r2,32(r2)
   33694:	10ffffcc 	andi	r3,r2,65535
   33698:	00b76194 	movui	r2,56710
   3369c:	1880051e 	bne	r3,r2,336b4 <tcp_input+0x21c>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
   336a0:	e0bffe17 	ldw	r2,-8(fp)
   336a4:	10800317 	ldw	r2,12(r2)
   336a8:	10800504 	addi	r2,r2,20
   336ac:	e0bfee15 	stw	r2,-72(fp)
   336b0:	00000406 	br	336c4 <tcp_input+0x22c>
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
   336b4:	e0bffe17 	ldw	r2,-8(fp)
   336b8:	10800317 	ldw	r2,12(r2)
   336bc:	10800a04 	addi	r2,r2,40
   336c0:	e0bfee15 	stw	r2,-72(fp)
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
   336c4:	e0bfe517 	ldw	r2,-108(fp)
   336c8:	10c00317 	ldw	r3,12(r2)
   336cc:	e0bff417 	ldw	r2,-48(fp)
   336d0:	1809883a 	mov	r4,r3
   336d4:	e17fee17 	ldw	r5,-72(fp)
   336d8:	100d883a 	mov	r6,r2
   336dc:	0007c900 	call	7c90 <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
   336e0:	e0bffe17 	ldw	r2,-8(fp)
   336e4:	10c00317 	ldw	r3,12(r2)
   336e8:	e0bfe517 	ldw	r2,-108(fp)
   336ec:	10800217 	ldw	r2,8(r2)
   336f0:	1887883a 	add	r3,r3,r2
   336f4:	e0bffe17 	ldw	r2,-8(fp)
   336f8:	10c00315 	stw	r3,12(r2)
      m->m_len -= om->m_len;
   336fc:	e0bffe17 	ldw	r2,-8(fp)
   33700:	10c00217 	ldw	r3,8(r2)
   33704:	e0bfe517 	ldw	r2,-108(fp)
   33708:	10800217 	ldw	r2,8(r2)
   3370c:	1887c83a 	sub	r3,r3,r2
   33710:	e0bffe17 	ldw	r2,-8(fp)
   33714:	10c00215 	stw	r3,8(r2)
   }
   tiflags = ti->ti_flags;
   33718:	e0bff217 	ldw	r2,-56(fp)
   3371c:	10800843 	ldbu	r2,33(r2)
   33720:	10803fcc 	andi	r2,r2,255
   33724:	e0bfe715 	stw	r2,-100(fp)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
   33728:	e0bff217 	ldw	r2,-56(fp)
   3372c:	10800617 	ldw	r2,24(r2)
   33730:	1006d63a 	srli	r3,r2,24
   33734:	e0bff217 	ldw	r2,-56(fp)
   33738:	10800617 	ldw	r2,24(r2)
   3373c:	1004d23a 	srli	r2,r2,8
   33740:	10bfc00c 	andi	r2,r2,65280
   33744:	1886b03a 	or	r3,r3,r2
   33748:	e0bff217 	ldw	r2,-56(fp)
   3374c:	10800617 	ldw	r2,24(r2)
   33750:	10bfc00c 	andi	r2,r2,65280
   33754:	1004923a 	slli	r2,r2,8
   33758:	1886b03a 	or	r3,r3,r2
   3375c:	e0bff217 	ldw	r2,-56(fp)
   33760:	10800617 	ldw	r2,24(r2)
   33764:	1004963a 	slli	r2,r2,24
   33768:	1886b03a 	or	r3,r3,r2
   3376c:	e0bff217 	ldw	r2,-56(fp)
   33770:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = ntohl(ti->ti_ack);
   33774:	e0bff217 	ldw	r2,-56(fp)
   33778:	10800717 	ldw	r2,28(r2)
   3377c:	1006d63a 	srli	r3,r2,24
   33780:	e0bff217 	ldw	r2,-56(fp)
   33784:	10800717 	ldw	r2,28(r2)
   33788:	1004d23a 	srli	r2,r2,8
   3378c:	10bfc00c 	andi	r2,r2,65280
   33790:	1886b03a 	or	r3,r3,r2
   33794:	e0bff217 	ldw	r2,-56(fp)
   33798:	10800717 	ldw	r2,28(r2)
   3379c:	10bfc00c 	andi	r2,r2,65280
   337a0:	1004923a 	slli	r2,r2,8
   337a4:	1886b03a 	or	r3,r3,r2
   337a8:	e0bff217 	ldw	r2,-56(fp)
   337ac:	10800717 	ldw	r2,28(r2)
   337b0:	1004963a 	slli	r2,r2,24
   337b4:	1886b03a 	or	r3,r3,r2
   337b8:	e0bff217 	ldw	r2,-56(fp)
   337bc:	10c00715 	stw	r3,28(r2)
   ti->ti_urp = ntohs(ti->ti_urp);
   337c0:	e0bff217 	ldw	r2,-56(fp)
   337c4:	1080098b 	ldhu	r2,38(r2)
   337c8:	10bfffcc 	andi	r2,r2,65535
   337cc:	1004d23a 	srli	r2,r2,8
   337d0:	1007883a 	mov	r3,r2
   337d4:	e0bff217 	ldw	r2,-56(fp)
   337d8:	1080098b 	ldhu	r2,38(r2)
   337dc:	10bfffcc 	andi	r2,r2,65535
   337e0:	1004923a 	slli	r2,r2,8
   337e4:	1884b03a 	or	r2,r3,r2
   337e8:	1007883a 	mov	r3,r2
   337ec:	e0bff217 	ldw	r2,-56(fp)
   337f0:	10c0098d 	sth	r3,38(r2)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
   337f4:	e0bffe17 	ldw	r2,-8(fp)
   337f8:	10800117 	ldw	r2,4(r2)
   337fc:	1080080b 	ldhu	r2,32(r2)
   33800:	10bfffcc 	andi	r2,r2,65535
   33804:	10800220 	cmpeqi	r2,r2,8
   33808:	10002026 	beq	r2,zero,3388c <tcp_input+0x3f4>
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
   3380c:	e0bffe17 	ldw	r2,-8(fp)
   33810:	10800317 	ldw	r2,12(r2)
   33814:	10c00a04 	addi	r3,r2,40
   33818:	e0bffe17 	ldw	r2,-8(fp)
   3381c:	10c00315 	stw	r3,12(r2)
      m->m_len -= 40;
   33820:	e0bffe17 	ldw	r2,-8(fp)
   33824:	10800217 	ldw	r2,8(r2)
   33828:	10fff604 	addi	r3,r2,-40
   3382c:	e0bffe17 	ldw	r2,-8(fp)
   33830:	10c00215 	stw	r3,8(r2)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
   33834:	e0bff217 	ldw	r2,-56(fp)
   33838:	11400317 	ldw	r5,12(r2)
   3383c:	e0bff217 	ldw	r2,-56(fp)
   33840:	1080050b 	ldhu	r2,20(r2)
   33844:	11bfffcc 	andi	r6,r2,65535
   33848:	e0bff217 	ldw	r2,-56(fp)
   3384c:	10c00417 	ldw	r3,16(r2)
         ti->ti_dst.s_addr, ti->ti_dport, INPLOOKUP_WILDCARD);
   33850:	e0bff217 	ldw	r2,-56(fp)
   33854:	1080058b 	ldhu	r2,22(r2)
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
      m->m_len -= 40;

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
   33858:	10bfffcc 	andi	r2,r2,65535
   3385c:	d8800015 	stw	r2,0(sp)
   33860:	00800044 	movi	r2,1
   33864:	d8800115 	stw	r2,4(sp)
   33868:	010001b4 	movhi	r4,6
   3386c:	21390004 	addi	r4,r4,-7168
   33870:	180f883a 	mov	r7,r3
   33874:	00464580 	call	46458 <in_pcblookup>
   33878:	e0bfe415 	stw	r2,-112(fp)
         ti->ti_dst.s_addr, ti->ti_dport, INPLOOKUP_WILDCARD);
      break;
   3387c:	0001883a 	nop
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
   33880:	e0bfe417 	ldw	r2,-112(fp)
   33884:	1000061e 	bne	r2,zero,338a0 <tcp_input+0x408>
   33888:	00000206 	br	33894 <tcp_input+0x3fc>
      inp = ip6_pcblookup(&tcb, &ip6_src, ti->ti_sport, 
         &ip6_dst, ti->ti_dport, INPLOOKUP_WILDCARD);
      break;
#endif   /* IP_V6 */
   default:
      dtrap();
   3388c:	002b0f40 	call	2b0f4 <dtrap>
      return;
   33890:	0007d206 	br	357dc <tcp_input+0x2344>
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
      GOTO_DROPWITHRESET;
   33894:	00806b04 	movi	r2,428
   33898:	d0a89e15 	stw	r2,-23944(gp)
   3389c:	00078206 	br	356a8 <tcp_input+0x2210>
   tp = intotcpcb (inp);
   338a0:	e0bfe417 	ldw	r2,-112(fp)
   338a4:	10800917 	ldw	r2,36(r2)
   338a8:	e0bfe615 	stw	r2,-104(fp)
   if (tp == 0)
   338ac:	e0bfe617 	ldw	r2,-104(fp)
   338b0:	1000031e 	bne	r2,zero,338c0 <tcp_input+0x428>
      GOTO_DROPWITHRESET;
   338b4:	00806bc4 	movi	r2,431
   338b8:	d0a89e15 	stw	r2,-23944(gp)
   338bc:	00077a06 	br	356a8 <tcp_input+0x2210>
   if (tp->t_state == TCPS_CLOSED)
   338c0:	e0bfe617 	ldw	r2,-104(fp)
   338c4:	10800217 	ldw	r2,8(r2)
   338c8:	1000031e 	bne	r2,zero,338d8 <tcp_input+0x440>
      GOTO_DROP;
   338cc:	00806c44 	movi	r2,433
   338d0:	d0a89e15 	stw	r2,-23944(gp)
   338d4:	0007b606 	br	357b0 <tcp_input+0x2318>
   so = inp->inp_socket;
   338d8:	e0bfe417 	ldw	r2,-112(fp)
   338dc:	10800817 	ldw	r2,32(r2)
   338e0:	e0bfe815 	stw	r2,-96(fp)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
   338e4:	e0bff217 	ldw	r2,-56(fp)
   338e8:	1080088b 	ldhu	r2,34(r2)
   338ec:	10bfffcc 	andi	r2,r2,65535
   338f0:	1004d23a 	srli	r2,r2,8
   338f4:	10bfffcc 	andi	r2,r2,65535
   338f8:	10c03fcc 	andi	r3,r2,255
   338fc:	e0bff217 	ldw	r2,-56(fp)
   33900:	1080088b 	ldhu	r2,34(r2)
   33904:	10bfffcc 	andi	r2,r2,65535
   33908:	1004923a 	slli	r2,r2,8
   3390c:	10bfffcc 	andi	r2,r2,65535
   33910:	1884b03a 	or	r2,r3,r2
   33914:	e0bff515 	stw	r2,-44(fp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
   33918:	e0bfe817 	ldw	r2,-96(fp)
   3391c:	10800417 	ldw	r2,16(r2)
   33920:	1080008c 	andi	r2,r2,2
   33924:	10002d26 	beq	r2,zero,339dc <tcp_input+0x544>
   {
      so = sonewconn(so);
   33928:	e13fe817 	ldw	r4,-96(fp)
   3392c:	00318640 	call	31864 <sonewconn>
   33930:	e0bfe815 	stw	r2,-96(fp)
      if (so == 0)
   33934:	e0bfe817 	ldw	r2,-96(fp)
   33938:	1000031e 	bne	r2,zero,33948 <tcp_input+0x4b0>
         GOTO_DROP;
   3393c:	00807344 	movi	r2,461
   33940:	d0a89e15 	stw	r2,-23944(gp)
   33944:	00079a06 	br	357b0 <tcp_input+0x2318>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
   33948:	e0bfec17 	ldw	r2,-80(fp)
   3394c:	10800044 	addi	r2,r2,1
   33950:	e0bfec15 	stw	r2,-80(fp)

      inp = (struct inpcb *)so->so_pcb;
   33954:	e0bfe817 	ldw	r2,-96(fp)
   33958:	10800117 	ldw	r2,4(r2)
   3395c:	e0bfe415 	stw	r2,-112(fp)
      inp->ifp = ifp;      /* save iface to peer */
   33960:	e0bfe417 	ldw	r2,-112(fp)
   33964:	e0ffff17 	ldw	r3,-4(fp)
   33968:	10c00a15 	stw	r3,40(r2)

      switch(so->so_domain)
   3396c:	e0bfe817 	ldw	r2,-96(fp)
   33970:	10800517 	ldw	r2,20(r2)
   33974:	108000a0 	cmpeqi	r2,r2,2
   33978:	10000e26 	beq	r2,zero,339b4 <tcp_input+0x51c>
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
   3397c:	e0bfe417 	ldw	r2,-112(fp)
   33980:	e0fff217 	ldw	r3,-56(fp)
   33984:	18c00417 	ldw	r3,16(r3)
   33988:	10c00415 	stw	r3,16(r2)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
   3398c:	e0bfff17 	ldw	r2,-4(fp)
   33990:	10c00917 	ldw	r3,36(r2)
   33994:	e0bfff17 	ldw	r2,-4(fp)
   33998:	10800817 	ldw	r2,32(r2)
   3399c:	013ff604 	movi	r4,-40
   339a0:	2085c83a 	sub	r2,r4,r2
   339a4:	1887883a 	add	r3,r3,r2
   339a8:	e0bfe417 	ldw	r2,-112(fp)
   339ac:	10c00615 	stw	r3,24(r2)
#endif   /* IP_PMTU */
         break;
   339b0:	0001883a 	nop
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
   339b4:	e0bff217 	ldw	r2,-56(fp)
   339b8:	10c0058b 	ldhu	r3,22(r2)
   339bc:	e0bfe417 	ldw	r2,-112(fp)
   339c0:	10c0078d 	sth	r3,30(r2)
      tp = intotcpcb(inp);
   339c4:	e0bfe417 	ldw	r2,-112(fp)
   339c8:	10800917 	ldw	r2,36(r2)
   339cc:	e0bfe615 	stw	r2,-104(fp)
      tp->t_state = TCPS_LISTEN;
   339d0:	e0bfe617 	ldw	r2,-104(fp)
   339d4:	00c00044 	movi	r3,1
   339d8:	10c00215 	stw	r3,8(r2)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
   339dc:	e0bfe617 	ldw	r2,-104(fp)
   339e0:	10001d15 	stw	zero,116(r2)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
   339e4:	00800174 	movhi	r2,5
   339e8:	10876504 	addi	r2,r2,7572
   339ec:	10c00017 	ldw	r3,0(r2)
   339f0:	e0bfe617 	ldw	r2,-104(fp)
   339f4:	10c00515 	stw	r3,20(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
   339f8:	e0bfe517 	ldw	r2,-108(fp)
   339fc:	10000926 	beq	r2,zero,33a24 <tcp_input+0x58c>
   33a00:	e0bfe617 	ldw	r2,-104(fp)
   33a04:	10800217 	ldw	r2,8(r2)
   33a08:	10800060 	cmpeqi	r2,r2,1
   33a0c:	1000051e 	bne	r2,zero,33a24 <tcp_input+0x58c>
   {
      tcp_dooptions(tp, om, ti);
   33a10:	e13fe617 	ldw	r4,-104(fp)
   33a14:	e17fe517 	ldw	r5,-108(fp)
   33a18:	e1bff217 	ldw	r6,-56(fp)
   33a1c:	00357f00 	call	357f0 <tcp_dooptions>
      om = 0;
   33a20:	e03fe515 	stw	zero,-108(fp)
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
   33a24:	e0bff217 	ldw	r2,-56(fp)
   33a28:	10c00717 	ldw	r3,28(r2)
   33a2c:	e0bfe617 	ldw	r2,-104(fp)
   33a30:	10800e17 	ldw	r2,56(r2)
   33a34:	1885c83a 	sub	r2,r3,r2
   33a38:	e0bff615 	stw	r2,-40(fp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
   33a3c:	e0bfe817 	ldw	r2,-96(fp)
   33a40:	10800b17 	ldw	r2,44(r2)
   33a44:	1007883a 	mov	r3,r2
   33a48:	e0bfe817 	ldw	r2,-96(fp)
   33a4c:	10800a17 	ldw	r2,40(r2)
   33a50:	1885c83a 	sub	r2,r3,r2
   33a54:	10000616 	blt	r2,zero,33a70 <tcp_input+0x5d8>
   33a58:	e0bfe817 	ldw	r2,-96(fp)
   33a5c:	10c00b17 	ldw	r3,44(r2)
   33a60:	e0bfe817 	ldw	r2,-96(fp)
   33a64:	10800a17 	ldw	r2,40(r2)
   33a68:	1885c83a 	sub	r2,r3,r2
   33a6c:	00000106 	br	33a74 <tcp_input+0x5dc>
   33a70:	0005883a 	mov	r2,zero
   33a74:	e0bfef15 	stw	r2,-68(fp)
      if (win < 0)
   33a78:	e0bfef17 	ldw	r2,-68(fp)
   33a7c:	1000010e 	bge	r2,zero,33a84 <tcp_input+0x5ec>
         win = 0;
   33a80:	e03fef15 	stw	zero,-68(fp)
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
   33a84:	e0bfe617 	ldw	r2,-104(fp)
   33a88:	10c01917 	ldw	r3,100(r2)
   33a8c:	e0bfe617 	ldw	r2,-104(fp)
   33a90:	10801617 	ldw	r2,88(r2)
   33a94:	1885c83a 	sub	r2,r3,r2
   33a98:	e0ffef17 	ldw	r3,-68(fp)
   33a9c:	10c0012e 	bgeu	r2,r3,33aa4 <tcp_input+0x60c>
   33aa0:	1805883a 	mov	r2,r3
   33aa4:	e0ffe617 	ldw	r3,-104(fp)
   33aa8:	18801515 	stw	r2,84(r3)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
   33aac:	e0bfe617 	ldw	r2,-104(fp)
   33ab0:	10800217 	ldw	r2,8(r2)
   33ab4:	10800118 	cmpnei	r2,r2,4
   33ab8:	1001041e 	bne	r2,zero,33ecc <tcp_input+0xa34>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
   33abc:	e0bfe717 	ldw	r2,-100(fp)
   33ac0:	10800dcc 	andi	r2,r2,55
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
   33ac4:	10800418 	cmpnei	r2,r2,16
   33ac8:	1001001e 	bne	r2,zero,33ecc <tcp_input+0xa34>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
       (ti->ti_seq == tp->rcv_nxt) &&
   33acc:	e0bff217 	ldw	r2,-56(fp)
   33ad0:	10c00617 	ldw	r3,24(r2)
   33ad4:	e0bfe617 	ldw	r2,-104(fp)
   33ad8:	10801617 	ldw	r2,88(r2)
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
   33adc:	1880fb1e 	bne	r3,r2,33ecc <tcp_input+0xa34>
       (ti->ti_seq == tp->rcv_nxt) &&
   33ae0:	e0bff517 	ldw	r2,-44(fp)
   33ae4:	1000f926 	beq	r2,zero,33ecc <tcp_input+0xa34>
       (rx_win && rx_win == tp->snd_wnd) &&
   33ae8:	e0bfe617 	ldw	r2,-104(fp)
   33aec:	10c01417 	ldw	r3,80(r2)
   33af0:	e0bff517 	ldw	r2,-44(fp)
   33af4:	1880f51e 	bne	r3,r2,33ecc <tcp_input+0xa34>
       (tp->snd_nxt == tp->snd_max))
   33af8:	e0bfe617 	ldw	r2,-104(fp)
   33afc:	10c00f17 	ldw	r3,60(r2)
   33b00:	e0bfe617 	ldw	r2,-104(fp)
   33b04:	10801a17 	ldw	r2,104(r2)
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
       (ti->ti_seq == tp->rcv_nxt) &&
       (rx_win && rx_win == tp->snd_wnd) &&
   33b08:	1880f01e 	bne	r3,r2,33ecc <tcp_input+0xa34>
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
   33b0c:	e0bff217 	ldw	r2,-56(fp)
   33b10:	1080028b 	ldhu	r2,10(r2)
   33b14:	10bfffcc 	andi	r2,r2,65535
   33b18:	1000621e 	bne	r2,zero,33ca4 <tcp_input+0x80c>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
   33b1c:	e0bff217 	ldw	r2,-56(fp)
   33b20:	10c00717 	ldw	r3,28(r2)
   33b24:	e0bfe617 	ldw	r2,-104(fp)
   33b28:	10800e17 	ldw	r2,56(r2)
   33b2c:	1885c83a 	sub	r2,r3,r2
   33b30:	0080e60e 	bge	zero,r2,33ecc <tcp_input+0xa34>
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
   33b34:	e0bff217 	ldw	r2,-56(fp)
   33b38:	10c00717 	ldw	r3,28(r2)
   33b3c:	e0bfe617 	ldw	r2,-104(fp)
   33b40:	10801a17 	ldw	r2,104(r2)
   33b44:	1885c83a 	sub	r2,r3,r2
       (rx_win && rx_win == tp->snd_wnd) &&
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
   33b48:	0080e016 	blt	zero,r2,33ecc <tcp_input+0xa34>
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
             tp->snd_cwnd >= tp->snd_wnd) 
   33b4c:	e0bfe617 	ldw	r2,-104(fp)
   33b50:	10c01b17 	ldw	r3,108(r2)
   33b54:	e0bfe617 	ldw	r2,-104(fp)
   33b58:	10801417 	ldw	r2,80(r2)
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
             SEQ_LEQ(ti->ti_ack, tp->snd_max) &&
   33b5c:	1880db36 	bltu	r3,r2,33ecc <tcp_input+0xa34>
             tp->snd_cwnd >= tp->snd_wnd) 
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
   33b60:	008001b4 	movhi	r2,6
   33b64:	10b90b04 	addi	r2,r2,-7124
   33b68:	10803517 	ldw	r2,212(r2)
   33b6c:	10c00044 	addi	r3,r2,1
   33b70:	008001b4 	movhi	r2,6
   33b74:	10b90b04 	addi	r2,r2,-7124
   33b78:	10c03515 	stw	r3,212(r2)
            if (tp->t_rttick && 
   33b7c:	e0bfe617 	ldw	r2,-104(fp)
   33b80:	10801e17 	ldw	r2,120(r2)
   33b84:	10000826 	beq	r2,zero,33ba8 <tcp_input+0x710>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
   33b88:	e0bff217 	ldw	r2,-56(fp)
   33b8c:	10c00717 	ldw	r3,28(r2)
   33b90:	e0bfe617 	ldw	r2,-104(fp)
   33b94:	10801f17 	ldw	r2,124(r2)
   33b98:	1885c83a 	sub	r2,r3,r2
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
            if (tp->t_rttick && 
   33b9c:	0080020e 	bge	zero,r2,33ba8 <tcp_input+0x710>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
   33ba0:	e13fe617 	ldw	r4,-104(fp)
   33ba4:	0035a880 	call	35a88 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
   33ba8:	008001b4 	movhi	r2,6
   33bac:	10b90b04 	addi	r2,r2,-7124
   33bb0:	10802b17 	ldw	r2,172(r2)
   33bb4:	10c00044 	addi	r3,r2,1
   33bb8:	008001b4 	movhi	r2,6
   33bbc:	10b90b04 	addi	r2,r2,-7124
   33bc0:	10c02b15 	stw	r3,172(r2)
            tcpstat.tcps_rcvackbyte += acked;
   33bc4:	008001b4 	movhi	r2,6
   33bc8:	10b90b04 	addi	r2,r2,-7124
   33bcc:	10c02c17 	ldw	r3,176(r2)
   33bd0:	e0bff617 	ldw	r2,-40(fp)
   33bd4:	1887883a 	add	r3,r3,r2
   33bd8:	008001b4 	movhi	r2,6
   33bdc:	10b90b04 	addi	r2,r2,-7124
   33be0:	10c02c15 	stw	r3,176(r2)
            sbdrop(&so->so_snd, acked);
   33be4:	e0bfe817 	ldw	r2,-96(fp)
   33be8:	10801204 	addi	r2,r2,72
   33bec:	1009883a 	mov	r4,r2
   33bf0:	e17ff617 	ldw	r5,-40(fp)
   33bf4:	00324cc0 	call	324cc <sbdrop>
            tp->snd_una = ti->ti_ack;
   33bf8:	e0bff217 	ldw	r2,-56(fp)
   33bfc:	10c00717 	ldw	r3,28(r2)
   33c00:	e0bfe617 	ldw	r2,-104(fp)
   33c04:	10c00e15 	stw	r3,56(r2)
            m_freem(m);
   33c08:	e13ffe17 	ldw	r4,-8(fp)
   33c0c:	002c1a40 	call	2c1a4 <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
   33c10:	e0bfe617 	ldw	r2,-104(fp)
   33c14:	10c00e17 	ldw	r3,56(r2)
   33c18:	e0bfe617 	ldw	r2,-104(fp)
   33c1c:	10801a17 	ldw	r2,104(r2)
   33c20:	1880031e 	bne	r3,r2,33c30 <tcp_input+0x798>
               tp->t_timer[TCPT_REXMT] = 0;
   33c24:	e0bfe617 	ldw	r2,-104(fp)
   33c28:	10000315 	stw	zero,12(r2)
   33c2c:	00000706 	br	33c4c <tcp_input+0x7b4>
            else if (tp->t_timer[TCPT_PERSIST] == 0)
   33c30:	e0bfe617 	ldw	r2,-104(fp)
   33c34:	10800417 	ldw	r2,16(r2)
   33c38:	1000041e 	bne	r2,zero,33c4c <tcp_input+0x7b4>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
   33c3c:	e0bfe617 	ldw	r2,-104(fp)
   33c40:	10c00817 	ldw	r3,32(r2)
   33c44:	e0bfe617 	ldw	r2,-104(fp)
   33c48:	10c00315 	stw	r3,12(r2)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
   33c4c:	e0bfe817 	ldw	r2,-96(fp)
   33c50:	1080190b 	ldhu	r2,100(r2)
   33c54:	10bfffcc 	andi	r2,r2,65535
   33c58:	1080030c 	andi	r2,r2,12
   33c5c:	10000526 	beq	r2,zero,33c74 <tcp_input+0x7dc>
               sowwakeup(so);
   33c60:	e0bfe817 	ldw	r2,-96(fp)
   33c64:	10801204 	addi	r2,r2,72
   33c68:	e13fe817 	ldw	r4,-96(fp)
   33c6c:	100b883a 	mov	r5,r2
   33c70:	0031d740 	call	31d74 <sbwakeup>

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
   33c74:	e0bfe817 	ldw	r2,-96(fp)
   33c78:	10801217 	ldw	r2,72(r2)
   33c7c:	e0ffe617 	ldw	r3,-104(fp)
   33c80:	19000f17 	ldw	r4,60(r3)
   33c84:	e0ffe617 	ldw	r3,-104(fp)
   33c88:	18c00e17 	ldw	r3,56(r3)
   33c8c:	20c7c83a 	sub	r3,r4,r3
   33c90:	1880032e 	bgeu	r3,r2,33ca0 <tcp_input+0x808>
               (void) tcp_output(tp);
   33c94:	e13fe617 	ldw	r4,-104(fp)
   33c98:	0035e200 	call	35e20 <tcp_output>
            return;
   33c9c:	0006cf06 	br	357dc <tcp_input+0x2344>
   33ca0:	0006ce06 	br	357dc <tcp_input+0x2344>
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
   33ca4:	e0bff217 	ldw	r2,-56(fp)
   33ca8:	10c00717 	ldw	r3,28(r2)
   33cac:	e0bfe617 	ldw	r2,-104(fp)
   33cb0:	10800e17 	ldw	r2,56(r2)
   33cb4:	1880851e 	bne	r3,r2,33ecc <tcp_input+0xa34>
          tp->seg_next == (struct tcpiphdr *)tp &&
   33cb8:	e0bfe617 	ldw	r2,-104(fp)
   33cbc:	10c00017 	ldw	r3,0(r2)
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
               (void) tcp_output(tp);
            return;
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
   33cc0:	e0bfe617 	ldw	r2,-104(fp)
   33cc4:	1880811e 	bne	r3,r2,33ecc <tcp_input+0xa34>
          tp->seg_next == (struct tcpiphdr *)tp &&
          ti->ti_len <= sbspace(&so->so_rcv))
   33cc8:	e0bff217 	ldw	r2,-56(fp)
   33ccc:	1080028b 	ldhu	r2,10(r2)
   33cd0:	10ffffcc 	andi	r3,r2,65535
   33cd4:	e0bfe817 	ldw	r2,-96(fp)
   33cd8:	10800b17 	ldw	r2,44(r2)
   33cdc:	1009883a 	mov	r4,r2
   33ce0:	e0bfe817 	ldw	r2,-96(fp)
   33ce4:	10800a17 	ldw	r2,40(r2)
   33ce8:	2085c83a 	sub	r2,r4,r2
   33cec:	10000616 	blt	r2,zero,33d08 <tcp_input+0x870>
   33cf0:	e0bfe817 	ldw	r2,-96(fp)
   33cf4:	11000b17 	ldw	r4,44(r2)
   33cf8:	e0bfe817 	ldw	r2,-96(fp)
   33cfc:	10800a17 	ldw	r2,40(r2)
   33d00:	2085c83a 	sub	r2,r4,r2
   33d04:	00000106 	br	33d0c <tcp_input+0x874>
   33d08:	0005883a 	mov	r2,zero
               (void) tcp_output(tp);
            return;
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
          tp->seg_next == (struct tcpiphdr *)tp &&
   33d0c:	10c06f36 	bltu	r2,r3,33ecc <tcp_input+0xa34>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
   33d10:	e0bfe617 	ldw	r2,-104(fp)
   33d14:	10801517 	ldw	r2,84(r2)
   33d18:	10000c1e 	bne	r2,zero,33d4c <tcp_input+0x8b4>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
   33d1c:	008001b4 	movhi	r2,6
   33d20:	10b90b04 	addi	r2,r2,-7124
   33d24:	10802817 	ldw	r2,160(r2)
   33d28:	10c00044 	addi	r3,r2,1
   33d2c:	008001b4 	movhi	r2,6
   33d30:	10b90b04 	addi	r2,r2,-7124
   33d34:	10c02815 	stw	r3,160(r2)
            m_freem (m);      /* free the received mbuf */
   33d38:	e13ffe17 	ldw	r4,-8(fp)
   33d3c:	002c1a40 	call	2c1a4 <m_freem>
            tcp_output(tp);   /* send the ack now... */
   33d40:	e13fe617 	ldw	r4,-104(fp)
   33d44:	0035e200 	call	35e20 <tcp_output>
            return;
   33d48:	0006a406 	br	357dc <tcp_input+0x2344>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
   33d4c:	008001b4 	movhi	r2,6
   33d50:	10b90b04 	addi	r2,r2,-7124
   33d54:	10803617 	ldw	r2,216(r2)
   33d58:	10c00044 	addi	r3,r2,1
   33d5c:	008001b4 	movhi	r2,6
   33d60:	10b90b04 	addi	r2,r2,-7124
   33d64:	10c03615 	stw	r3,216(r2)
         tp->rcv_nxt += ti->ti_len;
   33d68:	e0bfe617 	ldw	r2,-104(fp)
   33d6c:	10c01617 	ldw	r3,88(r2)
   33d70:	e0bff217 	ldw	r2,-56(fp)
   33d74:	1080028b 	ldhu	r2,10(r2)
   33d78:	10bfffcc 	andi	r2,r2,65535
   33d7c:	1887883a 	add	r3,r3,r2
   33d80:	e0bfe617 	ldw	r2,-104(fp)
   33d84:	10c01615 	stw	r3,88(r2)
         tcpstat.tcps_rcvpack++;
   33d88:	008001b4 	movhi	r2,6
   33d8c:	10b90b04 	addi	r2,r2,-7124
   33d90:	10801a17 	ldw	r2,104(r2)
   33d94:	10c00044 	addi	r3,r2,1
   33d98:	008001b4 	movhi	r2,6
   33d9c:	10b90b04 	addi	r2,r2,-7124
   33da0:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
   33da4:	008001b4 	movhi	r2,6
   33da8:	10b90b04 	addi	r2,r2,-7124
   33dac:	10c01b17 	ldw	r3,108(r2)
   33db0:	e0bff217 	ldw	r2,-56(fp)
   33db4:	1080028b 	ldhu	r2,10(r2)
   33db8:	10bfffcc 	andi	r2,r2,65535
   33dbc:	1887883a 	add	r3,r3,r2
   33dc0:	008001b4 	movhi	r2,6
   33dc4:	10b90b04 	addi	r2,r2,-7124
   33dc8:	10c01b15 	stw	r3,108(r2)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
   33dcc:	e0bfe817 	ldw	r2,-96(fp)
   33dd0:	10800a04 	addi	r2,r2,40
   33dd4:	1009883a 	mov	r4,r2
   33dd8:	e17ffe17 	ldw	r5,-8(fp)
   33ddc:	0031f280 	call	31f28 <sbappend>
         sorwakeup(so);
   33de0:	e0bfe817 	ldw	r2,-96(fp)
   33de4:	10800a04 	addi	r2,r2,40
   33de8:	e13fe817 	ldw	r4,-96(fp)
   33dec:	100b883a 	mov	r5,r2
   33df0:	0031d740 	call	31d74 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
   33df4:	e0bfe717 	ldw	r2,-100(fp)
   33df8:	1080020c 	andi	r2,r2,8
   33dfc:	10000726 	beq	r2,zero,33e1c <tcp_input+0x984>
            tp->t_flags |= TF_ACKNOW;
   33e00:	e0bfe617 	ldw	r2,-104(fp)
   33e04:	10800b0b 	ldhu	r2,44(r2)
   33e08:	10800054 	ori	r2,r2,1
   33e0c:	1007883a 	mov	r3,r2
   33e10:	e0bfe617 	ldw	r2,-104(fp)
   33e14:	10c00b0d 	sth	r3,44(r2)
   33e18:	00000606 	br	33e34 <tcp_input+0x99c>
         else
            tp->t_flags |= TF_DELACK;
   33e1c:	e0bfe617 	ldw	r2,-104(fp)
   33e20:	10800b0b 	ldhu	r2,44(r2)
   33e24:	10800094 	ori	r2,r2,2
   33e28:	1007883a 	mov	r3,r2
   33e2c:	e0bfe617 	ldw	r2,-104(fp)
   33e30:	10c00b0d 	sth	r3,44(r2)

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));
   33e34:	e0bfe617 	ldw	r2,-104(fp)
   33e38:	10c01517 	ldw	r3,84(r2)
   33e3c:	e0bfe617 	ldw	r2,-104(fp)
   33e40:	11001617 	ldw	r4,88(r2)
   33e44:	e0bfe617 	ldw	r2,-104(fp)
   33e48:	10801917 	ldw	r2,100(r2)
   33e4c:	2085c83a 	sub	r2,r4,r2
   33e50:	1885883a 	add	r2,r3,r2
   33e54:	e0bff715 	stw	r2,-36(fp)

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
   33e58:	e0bfe617 	ldw	r2,-104(fp)
   33e5c:	10800a0b 	ldhu	r2,40(r2)
   33e60:	10bfffcc 	andi	r2,r2,65535
   33e64:	1085883a 	add	r2,r2,r2
   33e68:	1007883a 	mov	r3,r2
   33e6c:	e0bff717 	ldw	r2,-36(fp)
   33e70:	10c0050e 	bge	r2,r3,33e88 <tcp_input+0x9f0>
             (tp->t_flags & TF_ACKNOW))
   33e74:	e0bfe617 	ldw	r2,-104(fp)
   33e78:	10800b0b 	ldhu	r2,44(r2)
   33e7c:	10bfffcc 	andi	r2,r2,65535
   33e80:	1080004c 	andi	r2,r2,1
            tp->t_flags |= TF_DELACK;

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
   33e84:	10001026 	beq	r2,zero,33ec8 <tcp_input+0xa30>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
   33e88:	e0bfe617 	ldw	r2,-104(fp)
   33e8c:	10800b0b 	ldhu	r2,44(r2)
   33e90:	10800054 	ori	r2,r2,1
   33e94:	1007883a 	mov	r3,r2
   33e98:	e0bfe617 	ldw	r2,-104(fp)
   33e9c:	10c00b0d 	sth	r3,44(r2)
            tp->t_flags &= ~TF_DELACK;
   33ea0:	e0bfe617 	ldw	r2,-104(fp)
   33ea4:	10c00b0b 	ldhu	r3,44(r2)
   33ea8:	00bfff44 	movi	r2,-3
   33eac:	1884703a 	and	r2,r3,r2
   33eb0:	1007883a 	mov	r3,r2
   33eb4:	e0bfe617 	ldw	r2,-104(fp)
   33eb8:	10c00b0d 	sth	r3,44(r2)
            tcp_output(tp);   /* send the ack now... */
   33ebc:	e13fe617 	ldw	r4,-104(fp)
   33ec0:	0035e200 	call	35e20 <tcp_output>
         }

         return;
   33ec4:	00064506 	br	357dc <tcp_input+0x2344>
   33ec8:	00064406 	br	357dc <tcp_input+0x2344>
      }
   }

   switch (tp->t_state) 
   33ecc:	e0bfe617 	ldw	r2,-104(fp)
   33ed0:	10800217 	ldw	r2,8(r2)
   33ed4:	10c00060 	cmpeqi	r3,r2,1
   33ed8:	1800031e 	bne	r3,zero,33ee8 <tcp_input+0xa50>
   33edc:	108000a0 	cmpeqi	r2,r2,2
   33ee0:	1000b01e 	bne	r2,zero,341a4 <tcp_input+0xd0c>
   33ee4:	00018506 	br	344fc <tcp_input+0x1064>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
   33ee8:	e0bfe717 	ldw	r2,-100(fp)
   33eec:	1080010c 	andi	r2,r2,4
   33ef0:	10000326 	beq	r2,zero,33f00 <tcp_input+0xa68>
            GOTO_DROP;
   33ef4:	0080bec4 	movi	r2,763
   33ef8:	d0a89e15 	stw	r2,-23944(gp)
   33efc:	00062c06 	br	357b0 <tcp_input+0x2318>
         if (tiflags & TH_ACK)
   33f00:	e0bfe717 	ldw	r2,-100(fp)
   33f04:	1080040c 	andi	r2,r2,16
   33f08:	10000326 	beq	r2,zero,33f18 <tcp_input+0xa80>
            GOTO_DROPWITHRESET;
   33f0c:	0080bf44 	movi	r2,765
   33f10:	d0a89e15 	stw	r2,-23944(gp)
   33f14:	0005e406 	br	356a8 <tcp_input+0x2210>
         if ((tiflags & TH_SYN) == 0)
   33f18:	e0bfe717 	ldw	r2,-100(fp)
   33f1c:	1080008c 	andi	r2,r2,2
   33f20:	1000031e 	bne	r2,zero,33f30 <tcp_input+0xa98>
            GOTO_DROP;
   33f24:	0080bfc4 	movi	r2,767
   33f28:	d0a89e15 	stw	r2,-23944(gp)
   33f2c:	00062006 	br	357b0 <tcp_input+0x2318>
         if(in_broadcast(ti->ti_dst.s_addr))
   33f30:	e0bff217 	ldw	r2,-56(fp)
   33f34:	10800417 	ldw	r2,16(r2)
   33f38:	1009883a 	mov	r4,r2
   33f3c:	002d1100 	call	2d110 <in_broadcast>
   33f40:	10000326 	beq	r2,zero,33f50 <tcp_input+0xab8>
            GOTO_DROP;
   33f44:	0080c044 	movi	r2,769
   33f48:	d0a89e15 	stw	r2,-23944(gp)
   33f4c:	00061806 	br	357b0 <tcp_input+0x2318>
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
   33f50:	01000244 	movi	r4,9
   33f54:	01400404 	movi	r5,16
   33f58:	002bf0c0 	call	2bf0c <m_getnbuf>
   33f5c:	e0bffa15 	stw	r2,-24(fp)
         if (am == NULL)
   33f60:	e0bffa17 	ldw	r2,-24(fp)
   33f64:	1000031e 	bne	r2,zero,33f74 <tcp_input+0xadc>
            GOTO_DROP;
   33f68:	0080c104 	movi	r2,772
   33f6c:	d0a89e15 	stw	r2,-23944(gp)
   33f70:	00060f06 	br	357b0 <tcp_input+0x2318>

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
   33f74:	e0bfe417 	ldw	r2,-112(fp)
   33f78:	10800817 	ldw	r2,32(r2)
   33f7c:	10800517 	ldw	r2,20(r2)
   33f80:	10800098 	cmpnei	r2,r2,2
   33f84:	10002c1e 	bne	r2,zero,34038 <tcp_input+0xba0>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
   33f88:	e0bffa17 	ldw	r2,-24(fp)
   33f8c:	00c00404 	movi	r3,16
   33f90:	10c00215 	stw	r3,8(r2)
         sin = mtod(am, struct sockaddr_in *);
   33f94:	e0bffa17 	ldw	r2,-24(fp)
   33f98:	10800317 	ldw	r2,12(r2)
   33f9c:	e0bffb15 	stw	r2,-20(fp)
         sin->sin_family = AF_INET;
   33fa0:	e0bffb17 	ldw	r2,-20(fp)
   33fa4:	00c00084 	movi	r3,2
   33fa8:	10c0000d 	sth	r3,0(r2)
         sin->sin_addr = ti->ti_src;
   33fac:	e0bffb17 	ldw	r2,-20(fp)
   33fb0:	e0fff217 	ldw	r3,-56(fp)
   33fb4:	18c00317 	ldw	r3,12(r3)
   33fb8:	10c00115 	stw	r3,4(r2)
         sin->sin_port = ti->ti_sport;
   33fbc:	e0bff217 	ldw	r2,-56(fp)
   33fc0:	10c0050b 	ldhu	r3,20(r2)
   33fc4:	e0bffb17 	ldw	r2,-20(fp)
   33fc8:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
   33fcc:	e0bfe417 	ldw	r2,-112(fp)
   33fd0:	10800417 	ldw	r2,16(r2)
   33fd4:	e0bffd15 	stw	r2,-12(fp)
         if (inp->inp_laddr.s_addr == INADDR_ANY)
   33fd8:	e0bfe417 	ldw	r2,-112(fp)
   33fdc:	10800417 	ldw	r2,16(r2)
   33fe0:	1000041e 	bne	r2,zero,33ff4 <tcp_input+0xb5c>
            inp->inp_laddr = ti->ti_dst;
   33fe4:	e0bfe417 	ldw	r2,-112(fp)
   33fe8:	e0fff217 	ldw	r3,-56(fp)
   33fec:	18c00417 	ldw	r3,16(r3)
   33ff0:	10c00415 	stw	r3,16(r2)
         if (in_pcbconnect (inp, am)) 
   33ff4:	e13fe417 	ldw	r4,-112(fp)
   33ff8:	e17ffa17 	ldw	r5,-24(fp)
   33ffc:	00461280 	call	46128 <in_pcbconnect>
   34000:	10000826 	beq	r2,zero,34024 <tcp_input+0xb8c>
         {
            inp->inp_laddr = laddr;
   34004:	e0bfe417 	ldw	r2,-112(fp)
   34008:	e0fffd17 	ldw	r3,-12(fp)
   3400c:	10c00415 	stw	r3,16(r2)
            (void) m_free(am);
   34010:	e13ffa17 	ldw	r4,-24(fp)
   34014:	002c0940 	call	2c094 <m_free>
            GOTO_DROP;
   34018:	0080c684 	movi	r2,794
   3401c:	d0a89e15 	stw	r2,-23944(gp)
   34020:	0005e306 	br	357b0 <tcp_input+0x2318>
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
   34024:	e0bfe417 	ldw	r2,-112(fp)
   34028:	e0ffff17 	ldw	r3,-4(fp)
   3402c:	10c00a15 	stw	r3,40(r2)
         
         (void) m_free (am);
   34030:	e13ffa17 	ldw	r4,-24(fp)
   34034:	002c0940 	call	2c094 <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
   34038:	e13fe617 	ldw	r4,-104(fp)
   3403c:	00370440 	call	37044 <tcp_template>
   34040:	1007883a 	mov	r3,r2
   34044:	e0bfe617 	ldw	r2,-104(fp)
   34048:	10c00c15 	stw	r3,48(r2)
         if (tp->t_template == 0) 
   3404c:	e0bfe617 	ldw	r2,-104(fp)
   34050:	10800c17 	ldw	r2,48(r2)
   34054:	1000071e 	bne	r2,zero,34074 <tcp_input+0xbdc>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
   34058:	e13fe617 	ldw	r4,-104(fp)
   3405c:	01401a44 	movi	r5,105
   34060:	00376640 	call	37664 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
   34064:	e03fec15 	stw	zero,-80(fp)
            GOTO_DROP;
   34068:	0080d1c4 	movi	r2,839
   3406c:	d0a89e15 	stw	r2,-23944(gp)
   34070:	0005cf06 	br	357b0 <tcp_input+0x2318>
         }
         if (om) 
   34074:	e0bfe517 	ldw	r2,-108(fp)
   34078:	10000526 	beq	r2,zero,34090 <tcp_input+0xbf8>
         {
            tcp_dooptions(tp, om, ti);
   3407c:	e13fe617 	ldw	r4,-104(fp)
   34080:	e17fe517 	ldw	r5,-108(fp)
   34084:	e1bff217 	ldw	r6,-56(fp)
   34088:	00357f00 	call	357f0 <tcp_dooptions>
            om = 0;
   3408c:	e03fe515 	stw	zero,-108(fp)
         }
         if (iss)
   34090:	e0bfed17 	ldw	r2,-76(fp)
   34094:	10000426 	beq	r2,zero,340a8 <tcp_input+0xc10>
            tp->iss = iss;
   34098:	e0ffed17 	ldw	r3,-76(fp)
   3409c:	e0bfe617 	ldw	r2,-104(fp)
   340a0:	10c01315 	stw	r3,76(r2)
   340a4:	00000506 	br	340bc <tcp_input+0xc24>
         else
            tp->iss = tcp_iss;
   340a8:	00800174 	movhi	r2,5
   340ac:	108fcb04 	addi	r2,r2,16172
   340b0:	10c00017 	ldw	r3,0(r2)
   340b4:	e0bfe617 	ldw	r2,-104(fp)
   340b8:	10c01315 	stw	r3,76(r2)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
   340bc:	00800174 	movhi	r2,5
   340c0:	108fcb04 	addi	r2,r2,16172
   340c4:	10c00017 	ldw	r3,0(r2)
   340c8:	00be9fd4 	movui	r2,64127
   340cc:	1887883a 	add	r3,r3,r2
   340d0:	00800174 	movhi	r2,5
   340d4:	108fcb04 	addi	r2,r2,16172
   340d8:	10c00015 	stw	r3,0(r2)
         tp->irs = ti->ti_seq;
   340dc:	e0bff217 	ldw	r2,-56(fp)
   340e0:	10c00617 	ldw	r3,24(r2)
   340e4:	e0bfe617 	ldw	r2,-104(fp)
   340e8:	10c01815 	stw	r3,96(r2)
         tcp_sendseqinit(tp);
   340ec:	e0bfe617 	ldw	r2,-104(fp)
   340f0:	10c01317 	ldw	r3,76(r2)
   340f4:	e0bfe617 	ldw	r2,-104(fp)
   340f8:	10c01015 	stw	r3,64(r2)
   340fc:	e0bfe617 	ldw	r2,-104(fp)
   34100:	10c01017 	ldw	r3,64(r2)
   34104:	e0bfe617 	ldw	r2,-104(fp)
   34108:	10c01a15 	stw	r3,104(r2)
   3410c:	e0bfe617 	ldw	r2,-104(fp)
   34110:	10c01a17 	ldw	r3,104(r2)
   34114:	e0bfe617 	ldw	r2,-104(fp)
   34118:	10c00f15 	stw	r3,60(r2)
   3411c:	e0bfe617 	ldw	r2,-104(fp)
   34120:	10c00f17 	ldw	r3,60(r2)
   34124:	e0bfe617 	ldw	r2,-104(fp)
   34128:	10c00e15 	stw	r3,56(r2)
         tcp_rcvseqinit(tp);
   3412c:	e0bfe617 	ldw	r2,-104(fp)
   34130:	10801817 	ldw	r2,96(r2)
   34134:	10c00044 	addi	r3,r2,1
   34138:	e0bfe617 	ldw	r2,-104(fp)
   3413c:	10c01615 	stw	r3,88(r2)
   34140:	e0bfe617 	ldw	r2,-104(fp)
   34144:	10c01617 	ldw	r3,88(r2)
   34148:	e0bfe617 	ldw	r2,-104(fp)
   3414c:	10c01915 	stw	r3,100(r2)
         tp->t_flags |= TF_ACKNOW;
   34150:	e0bfe617 	ldw	r2,-104(fp)
   34154:	10800b0b 	ldhu	r2,44(r2)
   34158:	10800054 	ori	r2,r2,1
   3415c:	1007883a 	mov	r3,r2
   34160:	e0bfe617 	ldw	r2,-104(fp)
   34164:	10c00b0d 	sth	r3,44(r2)
         tp->t_state = TCPS_SYN_RECEIVED;
   34168:	e0bfe617 	ldw	r2,-104(fp)
   3416c:	00c000c4 	movi	r3,3
   34170:	10c00215 	stw	r3,8(r2)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
   34174:	e0bfe617 	ldw	r2,-104(fp)
   34178:	00c02584 	movi	r3,150
   3417c:	10c00515 	stw	r3,20(r2)
         dropsocket = 0;      /* committed to socket */
   34180:	e03fec15 	stw	zero,-80(fp)
         tcpstat.tcps_accepts++;
   34184:	008001b4 	movhi	r2,6
   34188:	10b90b04 	addi	r2,r2,-7124
   3418c:	10800117 	ldw	r2,4(r2)
   34190:	10c00044 	addi	r3,r2,1
   34194:	008001b4 	movhi	r2,6
   34198:	10b90b04 	addi	r2,r2,-7124
   3419c:	10c00115 	stw	r3,4(r2)
         goto trimthenstep6;
   341a0:	00009106 	br	343e8 <tcp_input+0xf50>
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
   341a4:	e0bfe417 	ldw	r2,-112(fp)
   341a8:	e0ffff17 	ldw	r3,-4(fp)
   341ac:	10c00a15 	stw	r3,40(r2)
      if ((tiflags & TH_ACK) &&
   341b0:	e0bfe717 	ldw	r2,-100(fp)
   341b4:	1080040c 	andi	r2,r2,16
   341b8:	10000f26 	beq	r2,zero,341f8 <tcp_input+0xd60>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
   341bc:	e0bff217 	ldw	r2,-56(fp)
   341c0:	10c00717 	ldw	r3,28(r2)
   341c4:	e0bfe617 	ldw	r2,-104(fp)
   341c8:	10801317 	ldw	r2,76(r2)
   341cc:	1885c83a 	sub	r2,r3,r2
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
      if ((tiflags & TH_ACK) &&
   341d0:	0080060e 	bge	zero,r2,341ec <tcp_input+0xd54>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
          SEQ_GT(ti->ti_ack, tp->snd_max)))
   341d4:	e0bff217 	ldw	r2,-56(fp)
   341d8:	10c00717 	ldw	r3,28(r2)
   341dc:	e0bfe617 	ldw	r2,-104(fp)
   341e0:	10801a17 	ldw	r2,104(r2)
   341e4:	1885c83a 	sub	r2,r3,r2
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
      if ((tiflags & TH_ACK) &&
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
   341e8:	0080030e 	bge	zero,r2,341f8 <tcp_input+0xd60>
          SEQ_GT(ti->ti_ack, tp->snd_max)))
      {
         GOTO_DROPWITHRESET;
   341ec:	0080dc04 	movi	r2,880
   341f0:	d0a89e15 	stw	r2,-23944(gp)
   341f4:	00052c06 	br	356a8 <tcp_input+0x2210>
      }
      if (tiflags & TH_RST) 
   341f8:	e0bfe717 	ldw	r2,-100(fp)
   341fc:	1080010c 	andi	r2,r2,4
   34200:	10000926 	beq	r2,zero,34228 <tcp_input+0xd90>
      {
         if (tiflags & TH_ACK)
   34204:	e0bfe717 	ldw	r2,-100(fp)
   34208:	1080040c 	andi	r2,r2,16
   3420c:	10000326 	beq	r2,zero,3421c <tcp_input+0xd84>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
   34210:	e13fe617 	ldw	r4,-104(fp)
   34214:	01401bc4 	movi	r5,111
   34218:	00376640 	call	37664 <tcp_drop>
         GOTO_DROP;
   3421c:	0080dd84 	movi	r2,886
   34220:	d0a89e15 	stw	r2,-23944(gp)
   34224:	00056206 	br	357b0 <tcp_input+0x2318>
      }
      if ((tiflags & TH_SYN) == 0)
   34228:	e0bfe717 	ldw	r2,-100(fp)
   3422c:	1080008c 	andi	r2,r2,2
   34230:	1000031e 	bne	r2,zero,34240 <tcp_input+0xda8>
         GOTO_DROP;
   34234:	0080de44 	movi	r2,889
   34238:	d0a89e15 	stw	r2,-23944(gp)
   3423c:	00055c06 	br	357b0 <tcp_input+0x2318>
      if (tiflags & TH_ACK) 
   34240:	e0bfe717 	ldw	r2,-100(fp)
   34244:	1080040c 	andi	r2,r2,16
   34248:	10000e26 	beq	r2,zero,34284 <tcp_input+0xdec>
      {
         tp->snd_una = ti->ti_ack;
   3424c:	e0bff217 	ldw	r2,-56(fp)
   34250:	10c00717 	ldw	r3,28(r2)
   34254:	e0bfe617 	ldw	r2,-104(fp)
   34258:	10c00e15 	stw	r3,56(r2)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
   3425c:	e0bfe617 	ldw	r2,-104(fp)
   34260:	10c00f17 	ldw	r3,60(r2)
   34264:	e0bfe617 	ldw	r2,-104(fp)
   34268:	10800e17 	ldw	r2,56(r2)
   3426c:	1885c83a 	sub	r2,r3,r2
   34270:	1000040e 	bge	r2,zero,34284 <tcp_input+0xdec>
            tp->snd_nxt = tp->snd_una;
   34274:	e0bfe617 	ldw	r2,-104(fp)
   34278:	10c00e17 	ldw	r3,56(r2)
   3427c:	e0bfe617 	ldw	r2,-104(fp)
   34280:	10c00f15 	stw	r3,60(r2)
      }
      tp->t_timer[TCPT_REXMT] = 0;
   34284:	e0bfe617 	ldw	r2,-104(fp)
   34288:	10000315 	stw	zero,12(r2)
      tp->irs = ti->ti_seq;
   3428c:	e0bff217 	ldw	r2,-56(fp)
   34290:	10c00617 	ldw	r3,24(r2)
   34294:	e0bfe617 	ldw	r2,-104(fp)
   34298:	10c01815 	stw	r3,96(r2)
      tcp_rcvseqinit(tp);
   3429c:	e0bfe617 	ldw	r2,-104(fp)
   342a0:	10801817 	ldw	r2,96(r2)
   342a4:	10c00044 	addi	r3,r2,1
   342a8:	e0bfe617 	ldw	r2,-104(fp)
   342ac:	10c01615 	stw	r3,88(r2)
   342b0:	e0bfe617 	ldw	r2,-104(fp)
   342b4:	10c01617 	ldw	r3,88(r2)
   342b8:	e0bfe617 	ldw	r2,-104(fp)
   342bc:	10c01915 	stw	r3,100(r2)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
   342c0:	e0bfe417 	ldw	r2,-112(fp)
   342c4:	10c00417 	ldw	r3,16(r2)
   342c8:	e0bff217 	ldw	r2,-56(fp)
   342cc:	10800417 	ldw	r2,16(r2)
   342d0:	18801726 	beq	r3,r2,34330 <tcp_input+0xe98>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
   342d4:	e0bffe17 	ldw	r2,-8(fp)
   342d8:	10800117 	ldw	r2,4(r2)
   342dc:	10800617 	ldw	r2,24(r2)
   342e0:	10001326 	beq	r2,zero,34330 <tcp_input+0xe98>
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
   342e4:	e0bffe17 	ldw	r2,-8(fp)
   342e8:	10800117 	ldw	r2,4(r2)
   342ec:	10800617 	ldw	r2,24(r2)
   342f0:	10c00a17 	ldw	r3,40(r2)
   342f4:	e0bff217 	ldw	r2,-56(fp)
   342f8:	10800417 	ldw	r2,16(r2)
   342fc:	18800c1e 	bne	r3,r2,34330 <tcp_input+0xe98>
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
   34300:	e0bfe417 	ldw	r2,-112(fp)
   34304:	e0fff217 	ldw	r3,-56(fp)
   34308:	18c00417 	ldw	r3,16(r3)
   3430c:	10c00415 	stw	r3,16(r2)
            if (tp->t_template != NULL)
   34310:	e0bfe617 	ldw	r2,-104(fp)
   34314:	10800c17 	ldw	r2,48(r2)
   34318:	10000526 	beq	r2,zero,34330 <tcp_input+0xe98>
               tp->t_template->ti_src = ti->ti_dst;
   3431c:	e0bfe617 	ldw	r2,-104(fp)
   34320:	10800c17 	ldw	r2,48(r2)
   34324:	e0fff217 	ldw	r3,-56(fp)
   34328:	18c00417 	ldw	r3,16(r3)
   3432c:	10c00315 	stw	r3,12(r2)
         }
      }
      tp->t_flags |= TF_ACKNOW;
   34330:	e0bfe617 	ldw	r2,-104(fp)
   34334:	10800b0b 	ldhu	r2,44(r2)
   34338:	10800054 	ori	r2,r2,1
   3433c:	1007883a 	mov	r3,r2
   34340:	e0bfe617 	ldw	r2,-104(fp)
   34344:	10c00b0d 	sth	r3,44(r2)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
   34348:	e0bfe717 	ldw	r2,-100(fp)
   3434c:	1080040c 	andi	r2,r2,16
   34350:	10002226 	beq	r2,zero,343dc <tcp_input+0xf44>
   34354:	e0bfe617 	ldw	r2,-104(fp)
   34358:	10c00e17 	ldw	r3,56(r2)
   3435c:	e0bfe617 	ldw	r2,-104(fp)
   34360:	10801317 	ldw	r2,76(r2)
   34364:	1885c83a 	sub	r2,r3,r2
   34368:	00801c0e 	bge	zero,r2,343dc <tcp_input+0xf44>
      {
         tcpstat.tcps_connects++;
   3436c:	008001b4 	movhi	r2,6
   34370:	10b90b04 	addi	r2,r2,-7124
   34374:	10800217 	ldw	r2,8(r2)
   34378:	10c00044 	addi	r3,r2,1
   3437c:	008001b4 	movhi	r2,6
   34380:	10b90b04 	addi	r2,r2,-7124
   34384:	10c00215 	stw	r3,8(r2)
         tp->t_state = TCPS_ESTABLISHED;
   34388:	e0bfe617 	ldw	r2,-104(fp)
   3438c:	00c00104 	movi	r3,4
   34390:	10c00215 	stw	r3,8(r2)
         soisconnected (so);
   34394:	e13fe817 	ldw	r4,-96(fp)
   34398:	00316100 	call	31610 <soisconnected>
         tp->t_maxseg = tcp_mss(so);
   3439c:	e13fe817 	ldw	r4,-96(fp)
   343a0:	0035d280 	call	35d28 <tcp_mss>
   343a4:	1007883a 	mov	r3,r2
   343a8:	e0bfe617 	ldw	r2,-104(fp)
   343ac:	10c00a0d 	sth	r3,40(r2)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
   343b0:	e13fe617 	ldw	r4,-104(fp)
   343b4:	000b883a 	mov	r5,zero
   343b8:	e1bffe17 	ldw	r6,-8(fp)
   343bc:	00330940 	call	33094 <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
   343c0:	e0bfe617 	ldw	r2,-104(fp)
   343c4:	10801e17 	ldw	r2,120(r2)
   343c8:	10000326 	beq	r2,zero,343d8 <tcp_input+0xf40>
         {
            tcp_xmit_timer(tp);
   343cc:	e13fe617 	ldw	r4,-104(fp)
   343d0:	0035a880 	call	35a88 <tcp_xmit_timer>
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
   343d4:	00000406 	br	343e8 <tcp_input+0xf50>
   343d8:	00000306 	br	343e8 <tcp_input+0xf50>
         {
            tcp_xmit_timer(tp);
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
   343dc:	e0bfe617 	ldw	r2,-104(fp)
   343e0:	00c000c4 	movi	r3,3
   343e4:	10c00215 	stw	r3,8(r2)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
   343e8:	e0bff217 	ldw	r2,-56(fp)
   343ec:	10800617 	ldw	r2,24(r2)
   343f0:	10c00044 	addi	r3,r2,1
   343f4:	e0bff217 	ldw	r2,-56(fp)
   343f8:	10c00615 	stw	r3,24(r2)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
   343fc:	e0bff217 	ldw	r2,-56(fp)
   34400:	1080028b 	ldhu	r2,10(r2)
   34404:	10bfffcc 	andi	r2,r2,65535
   34408:	e0ffe617 	ldw	r3,-104(fp)
   3440c:	18c01517 	ldw	r3,84(r3)
   34410:	1880302e 	bgeu	r3,r2,344d4 <tcp_input+0x103c>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
   34414:	e0bff217 	ldw	r2,-56(fp)
   34418:	1080028b 	ldhu	r2,10(r2)
   3441c:	10ffffcc 	andi	r3,r2,65535
   34420:	e0bfe617 	ldw	r2,-104(fp)
   34424:	10801517 	ldw	r2,84(r2)
   34428:	10bfffcc 	andi	r2,r2,65535
   3442c:	1885c83a 	sub	r2,r3,r2
   34430:	e0bfe915 	stw	r2,-92(fp)
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
   34434:	e0bffe17 	ldw	r2,-8(fp)
   34438:	10800217 	ldw	r2,8(r2)
   3443c:	10000626 	beq	r2,zero,34458 <tcp_input+0xfc0>
         {
            m_adj(m, -todrop);
   34440:	e0bfe917 	ldw	r2,-92(fp)
   34444:	0085c83a 	sub	r2,zero,r2
   34448:	e13ffe17 	ldw	r4,-8(fp)
   3444c:	100b883a 	mov	r5,r2
   34450:	002c4d40 	call	2c4d4 <m_adj>
   34454:	00000706 	br	34474 <tcp_input+0xfdc>
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
   34458:	e0bffe17 	ldw	r2,-8(fp)
   3445c:	10c00617 	ldw	r3,24(r2)
   34460:	e0bfe917 	ldw	r2,-92(fp)
   34464:	0085c83a 	sub	r2,zero,r2
   34468:	1809883a 	mov	r4,r3
   3446c:	100b883a 	mov	r5,r2
   34470:	002c4d40 	call	2c4d4 <m_adj>
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
   34474:	e0bfe617 	ldw	r2,-104(fp)
   34478:	10801517 	ldw	r2,84(r2)
   3447c:	1007883a 	mov	r3,r2
   34480:	e0bff217 	ldw	r2,-56(fp)
   34484:	10c0028d 	sth	r3,10(r2)
         tiflags &= ~TH_FIN;
   34488:	e0ffe717 	ldw	r3,-100(fp)
   3448c:	00bfff84 	movi	r2,-2
   34490:	1884703a 	and	r2,r3,r2
   34494:	e0bfe715 	stw	r2,-100(fp)
         tcpstat.tcps_rcvpackafterwin++;
   34498:	008001b4 	movhi	r2,6
   3449c:	10b90b04 	addi	r2,r2,-7124
   344a0:	10802517 	ldw	r2,148(r2)
   344a4:	10c00044 	addi	r3,r2,1
   344a8:	008001b4 	movhi	r2,6
   344ac:	10b90b04 	addi	r2,r2,-7124
   344b0:	10c02515 	stw	r3,148(r2)
         tcpstat.tcps_rcvbyteafterwin += todrop;
   344b4:	008001b4 	movhi	r2,6
   344b8:	10b90b04 	addi	r2,r2,-7124
   344bc:	10c02617 	ldw	r3,152(r2)
   344c0:	e0bfe917 	ldw	r2,-92(fp)
   344c4:	1887883a 	add	r3,r3,r2
   344c8:	008001b4 	movhi	r2,6
   344cc:	10b90b04 	addi	r2,r2,-7124
   344d0:	10c02615 	stw	r3,152(r2)
      }
      tp->snd_wl1 = ti->ti_seq - 1;
   344d4:	e0bff217 	ldw	r2,-56(fp)
   344d8:	10800617 	ldw	r2,24(r2)
   344dc:	10ffffc4 	addi	r3,r2,-1
   344e0:	e0bfe617 	ldw	r2,-104(fp)
   344e4:	10c01115 	stw	r3,68(r2)
      tp->rcv_up = ti->ti_seq;
   344e8:	e0bff217 	ldw	r2,-56(fp)
   344ec:	10c00617 	ldw	r3,24(r2)
   344f0:	e0bfe617 	ldw	r2,-104(fp)
   344f4:	10c01715 	stw	r3,92(r2)
      goto step6;
   344f8:	0002f206 	br	350c4 <tcp_input+0x1c2c>
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
   344fc:	e0bfe617 	ldw	r2,-104(fp)
   34500:	10c01617 	ldw	r3,88(r2)
   34504:	e0bff217 	ldw	r2,-56(fp)
   34508:	10800617 	ldw	r2,24(r2)
   3450c:	1885c83a 	sub	r2,r3,r2
   34510:	e0bfe915 	stw	r2,-92(fp)
   if (todrop > 0) 
   34514:	e0bfe917 	ldw	r2,-92(fp)
   34518:	0080910e 	bge	zero,r2,34760 <tcp_input+0x12c8>
   {
      if (tiflags & TH_SYN) 
   3451c:	e0bfe717 	ldw	r2,-100(fp)
   34520:	1080008c 	andi	r2,r2,2
   34524:	10001c26 	beq	r2,zero,34598 <tcp_input+0x1100>
      {
         tiflags &= ~TH_SYN;
   34528:	e0ffe717 	ldw	r3,-100(fp)
   3452c:	00bfff44 	movi	r2,-3
   34530:	1884703a 	and	r2,r3,r2
   34534:	e0bfe715 	stw	r2,-100(fp)
         ti->ti_seq++;
   34538:	e0bff217 	ldw	r2,-56(fp)
   3453c:	10800617 	ldw	r2,24(r2)
   34540:	10c00044 	addi	r3,r2,1
   34544:	e0bff217 	ldw	r2,-56(fp)
   34548:	10c00615 	stw	r3,24(r2)
         if (ti->ti_urp > 1) 
   3454c:	e0bff217 	ldw	r2,-56(fp)
   34550:	1080098b 	ldhu	r2,38(r2)
   34554:	10bfffcc 	andi	r2,r2,65535
   34558:	108000b0 	cmpltui	r2,r2,2
   3455c:	1000071e 	bne	r2,zero,3457c <tcp_input+0x10e4>
            ti->ti_urp--;
   34560:	e0bff217 	ldw	r2,-56(fp)
   34564:	1080098b 	ldhu	r2,38(r2)
   34568:	10bfffc4 	addi	r2,r2,-1
   3456c:	1007883a 	mov	r3,r2
   34570:	e0bff217 	ldw	r2,-56(fp)
   34574:	10c0098d 	sth	r3,38(r2)
   34578:	00000406 	br	3458c <tcp_input+0x10f4>
         else
            tiflags &= ~TH_URG;
   3457c:	e0ffe717 	ldw	r3,-100(fp)
   34580:	00bff7c4 	movi	r2,-33
   34584:	1884703a 	and	r2,r3,r2
   34588:	e0bfe715 	stw	r2,-100(fp)
         todrop--;
   3458c:	e0bfe917 	ldw	r2,-92(fp)
   34590:	10bfffc4 	addi	r2,r2,-1
   34594:	e0bfe915 	stw	r2,-92(fp)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
   34598:	e0bff217 	ldw	r2,-56(fp)
   3459c:	1080028b 	ldhu	r2,10(r2)
   345a0:	10ffffcc 	andi	r3,r2,65535
   345a4:	e0bfe917 	ldw	r2,-92(fp)
   345a8:	18800816 	blt	r3,r2,345cc <tcp_input+0x1134>
          ((todrop == (int)ti->ti_len) && 
   345ac:	e0bff217 	ldw	r2,-56(fp)
   345b0:	1080028b 	ldhu	r2,10(r2)
   345b4:	10ffffcc 	andi	r3,r2,65535
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
   345b8:	e0bfe917 	ldw	r2,-92(fp)
   345bc:	1880351e 	bne	r3,r2,34694 <tcp_input+0x11fc>
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
   345c0:	e0bfe717 	ldw	r2,-100(fp)
   345c4:	1080004c 	andi	r2,r2,1
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
   345c8:	1000321e 	bne	r2,zero,34694 <tcp_input+0x11fc>
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
   345cc:	008001b4 	movhi	r2,6
   345d0:	10b90b04 	addi	r2,r2,-7124
   345d4:	10801f17 	ldw	r2,124(r2)
   345d8:	10c00044 	addi	r3,r2,1
   345dc:	008001b4 	movhi	r2,6
   345e0:	10b90b04 	addi	r2,r2,-7124
   345e4:	10c01f15 	stw	r3,124(r2)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
   345e8:	008001b4 	movhi	r2,6
   345ec:	10b90b04 	addi	r2,r2,-7124
   345f0:	10c02017 	ldw	r3,128(r2)
   345f4:	e0bff217 	ldw	r2,-56(fp)
   345f8:	1080028b 	ldhu	r2,10(r2)
   345fc:	10bfffcc 	andi	r2,r2,65535
   34600:	1887883a 	add	r3,r3,r2
   34604:	008001b4 	movhi	r2,6
   34608:	10b90b04 	addi	r2,r2,-7124
   3460c:	10c02015 	stw	r3,128(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
   34610:	e0bfe717 	ldw	r2,-100(fp)
   34614:	1080004c 	andi	r2,r2,1
   34618:	10000626 	beq	r2,zero,34634 <tcp_input+0x119c>
   3461c:	e0bff217 	ldw	r2,-56(fp)
   34620:	1080028b 	ldhu	r2,10(r2)
   34624:	10bfffcc 	andi	r2,r2,65535
   34628:	10c00044 	addi	r3,r2,1
   3462c:	e0bfe917 	ldw	r2,-92(fp)
   34630:	18800926 	beq	r3,r2,34658 <tcp_input+0x11c0>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
   34634:	e0bfe717 	ldw	r2,-100(fp)
   34638:	1080010c 	andi	r2,r2,4
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
   3463c:	10040926 	beq	r2,zero,35664 <tcp_input+0x21cc>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
   34640:	e0bff217 	ldw	r2,-56(fp)
   34644:	10c00617 	ldw	r3,24(r2)
   34648:	e0bfe617 	ldw	r2,-104(fp)
   3464c:	10801617 	ldw	r2,88(r2)
   34650:	10bfffc4 	addi	r2,r2,-1
   34654:	1884031e 	bne	r3,r2,35664 <tcp_input+0x21cc>
         {
            todrop = ti->ti_len;
   34658:	e0bff217 	ldw	r2,-56(fp)
   3465c:	1080028b 	ldhu	r2,10(r2)
   34660:	10bfffcc 	andi	r2,r2,65535
   34664:	e0bfe915 	stw	r2,-92(fp)
            tiflags &= ~TH_FIN;
   34668:	e0ffe717 	ldw	r3,-100(fp)
   3466c:	00bfff84 	movi	r2,-2
   34670:	1884703a 	and	r2,r3,r2
   34674:	e0bfe715 	stw	r2,-100(fp)
            tp->t_flags |= TF_ACKNOW;
   34678:	e0bfe617 	ldw	r2,-104(fp)
   3467c:	10800b0b 	ldhu	r2,44(r2)
   34680:	10800054 	ori	r2,r2,1
   34684:	1007883a 	mov	r3,r2
   34688:	e0bfe617 	ldw	r2,-104(fp)
   3468c:	10c00b0d 	sth	r3,44(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
   34690:	00000f06 	br	346d0 <tcp_input+0x1238>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
   34694:	008001b4 	movhi	r2,6
   34698:	10b90b04 	addi	r2,r2,-7124
   3469c:	10802117 	ldw	r2,132(r2)
   346a0:	10c00044 	addi	r3,r2,1
   346a4:	008001b4 	movhi	r2,6
   346a8:	10b90b04 	addi	r2,r2,-7124
   346ac:	10c02115 	stw	r3,132(r2)
         tcpstat.tcps_rcvpartdupbyte += todrop;
   346b0:	008001b4 	movhi	r2,6
   346b4:	10b90b04 	addi	r2,r2,-7124
   346b8:	10c02217 	ldw	r3,136(r2)
   346bc:	e0bfe917 	ldw	r2,-92(fp)
   346c0:	1887883a 	add	r3,r3,r2
   346c4:	008001b4 	movhi	r2,6
   346c8:	10b90b04 	addi	r2,r2,-7124
   346cc:	10c02215 	stw	r3,136(r2)
      }
      m_adj(m, todrop);
   346d0:	e13ffe17 	ldw	r4,-8(fp)
   346d4:	e17fe917 	ldw	r5,-92(fp)
   346d8:	002c4d40 	call	2c4d4 <m_adj>
      ti->ti_seq += todrop;
   346dc:	e0bff217 	ldw	r2,-56(fp)
   346e0:	10c00617 	ldw	r3,24(r2)
   346e4:	e0bfe917 	ldw	r2,-92(fp)
   346e8:	1887883a 	add	r3,r3,r2
   346ec:	e0bff217 	ldw	r2,-56(fp)
   346f0:	10c00615 	stw	r3,24(r2)
      ti->ti_len -= (u_short)todrop;
   346f4:	e0bff217 	ldw	r2,-56(fp)
   346f8:	1080028b 	ldhu	r2,10(r2)
   346fc:	e0ffe917 	ldw	r3,-92(fp)
   34700:	10c5c83a 	sub	r2,r2,r3
   34704:	1007883a 	mov	r3,r2
   34708:	e0bff217 	ldw	r2,-56(fp)
   3470c:	10c0028d 	sth	r3,10(r2)
      if (ti->ti_urp > (u_short)todrop)
   34710:	e0bff217 	ldw	r2,-56(fp)
   34714:	1080098b 	ldhu	r2,38(r2)
   34718:	e0ffe917 	ldw	r3,-92(fp)
   3471c:	10bfffcc 	andi	r2,r2,65535
   34720:	18ffffcc 	andi	r3,r3,65535
   34724:	1880082e 	bgeu	r3,r2,34748 <tcp_input+0x12b0>
         ti->ti_urp -= (u_short)todrop;
   34728:	e0bff217 	ldw	r2,-56(fp)
   3472c:	1080098b 	ldhu	r2,38(r2)
   34730:	e0ffe917 	ldw	r3,-92(fp)
   34734:	10c5c83a 	sub	r2,r2,r3
   34738:	1007883a 	mov	r3,r2
   3473c:	e0bff217 	ldw	r2,-56(fp)
   34740:	10c0098d 	sth	r3,38(r2)
   34744:	00000606 	br	34760 <tcp_input+0x12c8>
      else 
      {
         tiflags &= ~TH_URG;
   34748:	e0ffe717 	ldw	r3,-100(fp)
   3474c:	00bff7c4 	movi	r2,-33
   34750:	1884703a 	and	r2,r3,r2
   34754:	e0bfe715 	stw	r2,-100(fp)
         ti->ti_urp = 0;
   34758:	e0bff217 	ldw	r2,-56(fp)
   3475c:	1000098d 	sth	zero,38(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
   34760:	e0bfe817 	ldw	r2,-96(fp)
   34764:	1080088b 	ldhu	r2,34(r2)
   34768:	10bfffcc 	andi	r2,r2,65535
   3476c:	1080004c 	andi	r2,r2,1
   34770:	10001526 	beq	r2,zero,347c8 <tcp_input+0x1330>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   34774:	e0bfe617 	ldw	r2,-104(fp)
   34778:	10800217 	ldw	r2,8(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
   3477c:	10800190 	cmplti	r2,r2,6
   34780:	1000111e 	bne	r2,zero,347c8 <tcp_input+0x1330>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   34784:	e0bff217 	ldw	r2,-56(fp)
   34788:	1080028b 	ldhu	r2,10(r2)
   3478c:	10bfffcc 	andi	r2,r2,65535
   34790:	10000d26 	beq	r2,zero,347c8 <tcp_input+0x1330>
   {
      tp = tcp_close(tp);
   34794:	e13fe617 	ldw	r4,-104(fp)
   34798:	00377100 	call	37710 <tcp_close>
   3479c:	e0bfe615 	stw	r2,-104(fp)
      tcpstat.tcps_rcvafterclose++;
   347a0:	008001b4 	movhi	r2,6
   347a4:	10b90b04 	addi	r2,r2,-7124
   347a8:	10802717 	ldw	r2,156(r2)
   347ac:	10c00044 	addi	r3,r2,1
   347b0:	008001b4 	movhi	r2,6
   347b4:	10b90b04 	addi	r2,r2,-7124
   347b8:	10c02715 	stw	r3,156(r2)
      GOTO_DROPWITHRESET;
   347bc:	00810444 	movi	r2,1041
   347c0:	d0a89e15 	stw	r2,-23944(gp)
   347c4:	0003b806 	br	356a8 <tcp_input+0x2210>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
   347c8:	e0bff217 	ldw	r2,-56(fp)
   347cc:	10c00617 	ldw	r3,24(r2)
   347d0:	e0bff217 	ldw	r2,-56(fp)
   347d4:	1080028b 	ldhu	r2,10(r2)
   347d8:	10bfffcc 	andi	r2,r2,65535
   347dc:	10a0001c 	xori	r2,r2,32768
   347e0:	10a00004 	addi	r2,r2,-32768
   347e4:	1887883a 	add	r3,r3,r2
   347e8:	e0bfe617 	ldw	r2,-104(fp)
   347ec:	11001617 	ldw	r4,88(r2)
   347f0:	e0bfe617 	ldw	r2,-104(fp)
   347f4:	10801517 	ldw	r2,84(r2)
   347f8:	2085883a 	add	r2,r4,r2
   347fc:	1885c83a 	sub	r2,r3,r2
   34800:	e0bfe915 	stw	r2,-92(fp)
   if (todrop > 0) 
   34804:	e0bfe917 	ldw	r2,-92(fp)
   34808:	0080690e 	bge	zero,r2,349b0 <tcp_input+0x1518>
   {
      tcpstat.tcps_rcvpackafterwin++;
   3480c:	008001b4 	movhi	r2,6
   34810:	10b90b04 	addi	r2,r2,-7124
   34814:	10802517 	ldw	r2,148(r2)
   34818:	10c00044 	addi	r3,r2,1
   3481c:	008001b4 	movhi	r2,6
   34820:	10b90b04 	addi	r2,r2,-7124
   34824:	10c02515 	stw	r3,148(r2)
      if (todrop >= (int)ti->ti_len) 
   34828:	e0bff217 	ldw	r2,-56(fp)
   3482c:	1080028b 	ldhu	r2,10(r2)
   34830:	10bfffcc 	andi	r2,r2,65535
   34834:	e0ffe917 	ldw	r3,-92(fp)
   34838:	18803a16 	blt	r3,r2,34924 <tcp_input+0x148c>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
   3483c:	008001b4 	movhi	r2,6
   34840:	10b90b04 	addi	r2,r2,-7124
   34844:	10c02617 	ldw	r3,152(r2)
   34848:	e0bff217 	ldw	r2,-56(fp)
   3484c:	1080028b 	ldhu	r2,10(r2)
   34850:	10bfffcc 	andi	r2,r2,65535
   34854:	1887883a 	add	r3,r3,r2
   34858:	008001b4 	movhi	r2,6
   3485c:	10b90b04 	addi	r2,r2,-7124
   34860:	10c02615 	stw	r3,152(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
   34864:	e0bfe717 	ldw	r2,-100(fp)
   34868:	1080008c 	andi	r2,r2,2
   3486c:	10001726 	beq	r2,zero,348cc <tcp_input+0x1434>
             tp->t_state == TCPS_TIME_WAIT &&
   34870:	e0bfe617 	ldw	r2,-104(fp)
   34874:	10800217 	ldw	r2,8(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
   34878:	10800298 	cmpnei	r2,r2,10
   3487c:	1000131e 	bne	r2,zero,348cc <tcp_input+0x1434>
             tp->t_state == TCPS_TIME_WAIT &&
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
   34880:	e0bff217 	ldw	r2,-56(fp)
   34884:	10c00617 	ldw	r3,24(r2)
   34888:	e0bfe617 	ldw	r2,-104(fp)
   3488c:	10801617 	ldw	r2,88(r2)
   34890:	1885c83a 	sub	r2,r3,r2
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
             tp->t_state == TCPS_TIME_WAIT &&
   34894:	00800d0e 	bge	zero,r2,348cc <tcp_input+0x1434>
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
   34898:	e0bfe617 	ldw	r2,-104(fp)
   3489c:	10c01617 	ldw	r3,88(r2)
   348a0:	008000b4 	movhi	r2,2
   348a4:	10bd3fc4 	addi	r2,r2,-2817
   348a8:	1885883a 	add	r2,r3,r2
   348ac:	e0bfed15 	stw	r2,-76(fp)
            if (iss & 0xff000000)
   348b0:	e0bfed17 	ldw	r2,-76(fp)
   348b4:	10bfc02c 	andhi	r2,r2,65280
   348b8:	10000126 	beq	r2,zero,348c0 <tcp_input+0x1428>
            {
               iss = 0L;
   348bc:	e03fed15 	stw	zero,-76(fp)
            }
            (void) tcp_close(tp);
   348c0:	e13fe617 	ldw	r4,-104(fp)
   348c4:	00377100 	call	37710 <tcp_close>
            goto findpcb;
   348c8:	003bca06 	br	337f4 <__alt_mem_descriptor_memory+0xdeff37f4>
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
   348cc:	e0bfe617 	ldw	r2,-104(fp)
   348d0:	10801517 	ldw	r2,84(r2)
   348d4:	1003631e 	bne	r2,zero,35664 <tcp_input+0x21cc>
   348d8:	e0bff217 	ldw	r2,-56(fp)
   348dc:	10c00617 	ldw	r3,24(r2)
   348e0:	e0bfe617 	ldw	r2,-104(fp)
   348e4:	10801617 	ldw	r2,88(r2)
   348e8:	18835e1e 	bne	r3,r2,35664 <tcp_input+0x21cc>
         {
            tp->t_flags |= TF_ACKNOW;
   348ec:	e0bfe617 	ldw	r2,-104(fp)
   348f0:	10800b0b 	ldhu	r2,44(r2)
   348f4:	10800054 	ori	r2,r2,1
   348f8:	1007883a 	mov	r3,r2
   348fc:	e0bfe617 	ldw	r2,-104(fp)
   34900:	10c00b0d 	sth	r3,44(r2)
            tcpstat.tcps_rcvwinprobe++;
   34904:	008001b4 	movhi	r2,6
   34908:	10b90b04 	addi	r2,r2,-7124
   3490c:	10802817 	ldw	r2,160(r2)
   34910:	10c00044 	addi	r3,r2,1
   34914:	008001b4 	movhi	r2,6
   34918:	10b90b04 	addi	r2,r2,-7124
   3491c:	10c02815 	stw	r3,160(r2)
   34920:	00000806 	br	34944 <tcp_input+0x14ac>
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
   34924:	008001b4 	movhi	r2,6
   34928:	10b90b04 	addi	r2,r2,-7124
   3492c:	10c02617 	ldw	r3,152(r2)
   34930:	e0bfe917 	ldw	r2,-92(fp)
   34934:	1887883a 	add	r3,r3,r2
   34938:	008001b4 	movhi	r2,6
   3493c:	10b90b04 	addi	r2,r2,-7124
   34940:	10c02615 	stw	r3,152(r2)
      /* XXX work around m_adj bug */
      if (m->m_len) 
   34944:	e0bffe17 	ldw	r2,-8(fp)
   34948:	10800217 	ldw	r2,8(r2)
   3494c:	10000626 	beq	r2,zero,34968 <tcp_input+0x14d0>
      {
         m_adj(m, -todrop);
   34950:	e0bfe917 	ldw	r2,-92(fp)
   34954:	0085c83a 	sub	r2,zero,r2
   34958:	e13ffe17 	ldw	r4,-8(fp)
   3495c:	100b883a 	mov	r5,r2
   34960:	002c4d40 	call	2c4d4 <m_adj>
   34964:	00000706 	br	34984 <tcp_input+0x14ec>
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
   34968:	e0bffe17 	ldw	r2,-8(fp)
   3496c:	10c00617 	ldw	r3,24(r2)
   34970:	e0bfe917 	ldw	r2,-92(fp)
   34974:	0085c83a 	sub	r2,zero,r2
   34978:	1809883a 	mov	r4,r3
   3497c:	100b883a 	mov	r5,r2
   34980:	002c4d40 	call	2c4d4 <m_adj>
      }
      ti->ti_len -= (u_short)todrop;
   34984:	e0bff217 	ldw	r2,-56(fp)
   34988:	1080028b 	ldhu	r2,10(r2)
   3498c:	e0ffe917 	ldw	r3,-92(fp)
   34990:	10c5c83a 	sub	r2,r2,r3
   34994:	1007883a 	mov	r3,r2
   34998:	e0bff217 	ldw	r2,-56(fp)
   3499c:	10c0028d 	sth	r3,10(r2)
      tiflags &= ~(TH_PUSH|TH_FIN);
   349a0:	e0ffe717 	ldw	r3,-100(fp)
   349a4:	00bffd84 	movi	r2,-10
   349a8:	1884703a 	and	r2,r3,r2
   349ac:	e0bfe715 	stw	r2,-100(fp)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
   349b0:	e0bfe717 	ldw	r2,-100(fp)
   349b4:	1080010c 	andi	r2,r2,4
   349b8:	10003426 	beq	r2,zero,34a8c <tcp_input+0x15f4>
   {
      switch (tp->t_state) 
   349bc:	e0bfe617 	ldw	r2,-104(fp)
   349c0:	10800217 	ldw	r2,8(r2)
   349c4:	10bfff44 	addi	r2,r2,-3
   349c8:	10c00228 	cmpgeui	r3,r2,8
   349cc:	18002f1e 	bne	r3,zero,34a8c <tcp_input+0x15f4>
   349d0:	100690ba 	slli	r3,r2,2
   349d4:	008000f4 	movhi	r2,3
   349d8:	10927a04 	addi	r2,r2,18920
   349dc:	1885883a 	add	r2,r3,r2
   349e0:	10800017 	ldw	r2,0(r2)
   349e4:	1000683a 	jmp	r2
   349e8:	00034a08 	cmpgei	zero,zero,3368
   349ec:	00034a18 	cmpnei	zero,zero,3368
   349f0:	00034a34 	movhi	zero,3368
   349f4:	00034a34 	movhi	zero,3368
   349f8:	00034a78 	rdprs	zero,zero,3369
   349fc:	00034a78 	rdprs	zero,zero,3369
   34a00:	00034a34 	movhi	zero,3368
   34a04:	00034a78 	rdprs	zero,zero,3369
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
   34a08:	e0bfe817 	ldw	r2,-96(fp)
   34a0c:	00c01bc4 	movi	r3,111
   34a10:	10c00615 	stw	r3,24(r2)
         goto close;
   34a14:	00000a06 	br	34a40 <tcp_input+0x15a8>
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
   34a18:	008001b4 	movhi	r2,6
   34a1c:	10b8dd04 	addi	r2,r2,-7308
   34a20:	10800717 	ldw	r2,28(r2)
   34a24:	10c00044 	addi	r3,r2,1
   34a28:	008001b4 	movhi	r2,6
   34a2c:	10b8dd04 	addi	r2,r2,-7308
   34a30:	10c00715 	stw	r3,28(r2)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
   34a34:	e0bfe817 	ldw	r2,-96(fp)
   34a38:	00c01a04 	movi	r3,104
   34a3c:	10c00615 	stw	r3,24(r2)
         close:
         tp->t_state = TCPS_CLOSED;
   34a40:	e0bfe617 	ldw	r2,-104(fp)
   34a44:	10000215 	stw	zero,8(r2)
         tcpstat.tcps_drops++;
   34a48:	008001b4 	movhi	r2,6
   34a4c:	10b90b04 	addi	r2,r2,-7124
   34a50:	10800317 	ldw	r2,12(r2)
   34a54:	10c00044 	addi	r3,r2,1
   34a58:	008001b4 	movhi	r2,6
   34a5c:	10b90b04 	addi	r2,r2,-7124
   34a60:	10c00315 	stw	r3,12(r2)
         SETTP(tp, tcp_close(tp));
   34a64:	e13fe617 	ldw	r4,-104(fp)
   34a68:	00377100 	call	37710 <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
   34a6c:	00812204 	movi	r2,1160
   34a70:	d0a89e15 	stw	r2,-23944(gp)
   34a74:	00034e06 	br	357b0 <tcp_input+0x2318>
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
   34a78:	e13fe617 	ldw	r4,-104(fp)
   34a7c:	00377100 	call	37710 <tcp_close>
         GOTO_DROP;
   34a80:	00812384 	movi	r2,1166
   34a84:	d0a89e15 	stw	r2,-23944(gp)
   34a88:	00034906 	br	357b0 <tcp_input+0x2318>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
   34a8c:	e0bfe717 	ldw	r2,-100(fp)
   34a90:	1080008c 	andi	r2,r2,2
   34a94:	10000726 	beq	r2,zero,34ab4 <tcp_input+0x161c>
   {
      tp = tcp_drop(tp, ECONNRESET);
   34a98:	e13fe617 	ldw	r4,-104(fp)
   34a9c:	01401a04 	movi	r5,104
   34aa0:	00376640 	call	37664 <tcp_drop>
   34aa4:	e0bfe615 	stw	r2,-104(fp)
      GOTO_DROPWITHRESET;
   34aa8:	00812b04 	movi	r2,1196
   34aac:	d0a89e15 	stw	r2,-23944(gp)
   34ab0:	0002fd06 	br	356a8 <tcp_input+0x2210>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
   34ab4:	e0bfe717 	ldw	r2,-100(fp)
   34ab8:	1080040c 	andi	r2,r2,16
   34abc:	1000031e 	bne	r2,zero,34acc <tcp_input+0x1634>
      GOTO_DROP;
   34ac0:	00812d04 	movi	r2,1204
   34ac4:	d0a89e15 	stw	r2,-23944(gp)
   34ac8:	00033906 	br	357b0 <tcp_input+0x2318>

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
   34acc:	e0bfe617 	ldw	r2,-104(fp)
   34ad0:	10800217 	ldw	r2,8(r2)
   34ad4:	10c000e0 	cmpeqi	r3,r2,3
   34ad8:	1800051e 	bne	r3,zero,34af0 <tcp_input+0x1658>
   34adc:	10c000d0 	cmplti	r3,r2,3
   34ae0:	1801781e 	bne	r3,zero,350c4 <tcp_input+0x1c2c>
   34ae4:	108002c8 	cmpgei	r2,r2,11
   34ae8:	1001761e 	bne	r2,zero,350c4 <tcp_input+0x1c2c>
   34aec:	00003006 	br	34bb0 <tcp_input+0x1718>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
   34af0:	e0bfe617 	ldw	r2,-104(fp)
   34af4:	10c00e17 	ldw	r3,56(r2)
   34af8:	e0bff217 	ldw	r2,-56(fp)
   34afc:	10800717 	ldw	r2,28(r2)
   34b00:	1885c83a 	sub	r2,r3,r2
   34b04:	00800616 	blt	zero,r2,34b20 <tcp_input+0x1688>
          SEQ_GT(ti->ti_ack, tp->snd_max))
   34b08:	e0bff217 	ldw	r2,-56(fp)
   34b0c:	10c00717 	ldw	r3,28(r2)
   34b10:	e0bfe617 	ldw	r2,-104(fp)
   34b14:	10801a17 	ldw	r2,104(r2)
   34b18:	1885c83a 	sub	r2,r3,r2
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
   34b1c:	00800a0e 	bge	zero,r2,34b48 <tcp_input+0x16b0>
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
   34b20:	008001b4 	movhi	r2,6
   34b24:	10b8dd04 	addi	r2,r2,-7308
   34b28:	10800717 	ldw	r2,28(r2)
   34b2c:	10c00044 	addi	r3,r2,1
   34b30:	008001b4 	movhi	r2,6
   34b34:	10b8dd04 	addi	r2,r2,-7308
   34b38:	10c00715 	stw	r3,28(r2)
         GOTO_DROPWITHRESET;
   34b3c:	00813184 	movi	r2,1222
   34b40:	d0a89e15 	stw	r2,-23944(gp)
   34b44:	0002d806 	br	356a8 <tcp_input+0x2210>
      }
      tcpstat.tcps_connects++;
   34b48:	008001b4 	movhi	r2,6
   34b4c:	10b90b04 	addi	r2,r2,-7124
   34b50:	10800217 	ldw	r2,8(r2)
   34b54:	10c00044 	addi	r3,r2,1
   34b58:	008001b4 	movhi	r2,6
   34b5c:	10b90b04 	addi	r2,r2,-7124
   34b60:	10c00215 	stw	r3,8(r2)
      tp->t_state = TCPS_ESTABLISHED;
   34b64:	e0bfe617 	ldw	r2,-104(fp)
   34b68:	00c00104 	movi	r3,4
   34b6c:	10c00215 	stw	r3,8(r2)
      soisconnected(so);
   34b70:	e13fe817 	ldw	r4,-96(fp)
   34b74:	00316100 	call	31610 <soisconnected>
      tp->t_maxseg = tcp_mss(so);
   34b78:	e13fe817 	ldw	r4,-96(fp)
   34b7c:	0035d280 	call	35d28 <tcp_mss>
   34b80:	1007883a 	mov	r3,r2
   34b84:	e0bfe617 	ldw	r2,-104(fp)
   34b88:	10c00a0d 	sth	r3,40(r2)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
   34b8c:	e13fe617 	ldw	r4,-104(fp)
   34b90:	000b883a 	mov	r5,zero
   34b94:	e1bffe17 	ldw	r6,-8(fp)
   34b98:	00330940 	call	33094 <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
   34b9c:	e0bff217 	ldw	r2,-56(fp)
   34ba0:	10800617 	ldw	r2,24(r2)
   34ba4:	10ffffc4 	addi	r3,r2,-1
   34ba8:	e0bfe617 	ldw	r2,-104(fp)
   34bac:	10c01115 	stw	r3,68(r2)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
   34bb0:	e0bff217 	ldw	r2,-56(fp)
   34bb4:	10c00717 	ldw	r3,28(r2)
   34bb8:	e0bfe617 	ldw	r2,-104(fp)
   34bbc:	10800e17 	ldw	r2,56(r2)
   34bc0:	1885c83a 	sub	r2,r3,r2
   34bc4:	00806316 	blt	zero,r2,34d54 <tcp_input+0x18bc>
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
   34bc8:	e0bff217 	ldw	r2,-56(fp)
   34bcc:	1080028b 	ldhu	r2,10(r2)
   34bd0:	10bfffcc 	andi	r2,r2,65535
   34bd4:	10005c1e 	bne	r2,zero,34d48 <tcp_input+0x18b0>
   34bd8:	e0bfe617 	ldw	r2,-104(fp)
   34bdc:	10c01417 	ldw	r3,80(r2)
   34be0:	e0bff517 	ldw	r2,-44(fp)
   34be4:	1880581e 	bne	r3,r2,34d48 <tcp_input+0x18b0>
         {
            tcpstat.tcps_rcvdupack++;
   34be8:	008001b4 	movhi	r2,6
   34bec:	10b90b04 	addi	r2,r2,-7124
   34bf0:	10802917 	ldw	r2,164(r2)
   34bf4:	10c00044 	addi	r3,r2,1
   34bf8:	008001b4 	movhi	r2,6
   34bfc:	10b90b04 	addi	r2,r2,-7124
   34c00:	10c02915 	stw	r3,164(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
   34c04:	e0bfe617 	ldw	r2,-104(fp)
   34c08:	10800317 	ldw	r2,12(r2)
   34c0c:	10000526 	beq	r2,zero,34c24 <tcp_input+0x178c>
                ti->ti_ack != tp->snd_una)
   34c10:	e0bff217 	ldw	r2,-56(fp)
   34c14:	10c00717 	ldw	r3,28(r2)
   34c18:	e0bfe617 	ldw	r2,-104(fp)
   34c1c:	10800e17 	ldw	r2,56(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
   34c20:	18800326 	beq	r3,r2,34c30 <tcp_input+0x1798>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
   34c24:	e0bfe617 	ldw	r2,-104(fp)
   34c28:	10000915 	stw	zero,36(r2)
   34c2c:	00004406 	br	34d40 <tcp_input+0x18a8>
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
   34c30:	e0bfe617 	ldw	r2,-104(fp)
   34c34:	10800917 	ldw	r2,36(r2)
   34c38:	10c00044 	addi	r3,r2,1
   34c3c:	e0bfe617 	ldw	r2,-104(fp)
   34c40:	10c00915 	stw	r3,36(r2)
   34c44:	e0bfe617 	ldw	r2,-104(fp)
   34c48:	10c00917 	ldw	r3,36(r2)
   34c4c:	d0a03983 	ldbu	r2,-32538(gp)
   34c50:	10803fcc 	andi	r2,r2,255
   34c54:	1080201c 	xori	r2,r2,128
   34c58:	10bfe004 	addi	r2,r2,-128
   34c5c:	1880381e 	bne	r3,r2,34d40 <tcp_input+0x18a8>
            {
               tcp_seq onxt = tp->snd_nxt;
   34c60:	e0bfe617 	ldw	r2,-104(fp)
   34c64:	10800f17 	ldw	r2,60(r2)
   34c68:	e0bff815 	stw	r2,-32(fp)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
   34c6c:	e0bfe617 	ldw	r2,-104(fp)
   34c70:	11001417 	ldw	r4,80(r2)
   34c74:	e0bfe617 	ldw	r2,-104(fp)
   34c78:	10c01b17 	ldw	r3,108(r2)
   34c7c:	2005883a 	mov	r2,r4
   34c80:	1880012e 	bgeu	r3,r2,34c88 <tcp_input+0x17f0>
   34c84:	1805883a 	mov	r2,r3
   34c88:	1006d07a 	srli	r3,r2,1
               tp->t_maxseg;
   34c8c:	e0bfe617 	ldw	r2,-104(fp)
   34c90:	10800a0b 	ldhu	r2,40(r2)
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
            {
               tcp_seq onxt = tp->snd_nxt;
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
   34c94:	10bfffcc 	andi	r2,r2,65535
   34c98:	1809883a 	mov	r4,r3
   34c9c:	100b883a 	mov	r5,r2
   34ca0:	00152500 	call	15250 <__udivsi3>
               tp->t_dupacks = 0;
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
            {
               tcp_seq onxt = tp->snd_nxt;
               u_short  win   =
   34ca4:	e0bff00d 	sth	r2,-64(fp)
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;

               if (win < 2)
   34ca8:	e0bff00b 	ldhu	r2,-64(fp)
   34cac:	108000a8 	cmpgeui	r2,r2,2
   34cb0:	1000021e 	bne	r2,zero,34cbc <tcp_input+0x1824>
                  win = 2;
   34cb4:	00800084 	movi	r2,2
   34cb8:	e0bff00d 	sth	r2,-64(fp)
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
   34cbc:	e0bfe617 	ldw	r2,-104(fp)
   34cc0:	10c00a0b 	ldhu	r3,40(r2)
   34cc4:	e0bff00b 	ldhu	r2,-64(fp)
   34cc8:	1885383a 	mul	r2,r3,r2
   34ccc:	10ffffcc 	andi	r3,r2,65535
   34cd0:	e0bfe617 	ldw	r2,-104(fp)
   34cd4:	10c01c15 	stw	r3,112(r2)

               tp->t_timer[TCPT_REXMT] = 0;
   34cd8:	e0bfe617 	ldw	r2,-104(fp)
   34cdc:	10000315 	stw	zero,12(r2)
               tp->t_rttick = 0;
   34ce0:	e0bfe617 	ldw	r2,-104(fp)
   34ce4:	10001e15 	stw	zero,120(r2)
               tp->snd_nxt = ti->ti_ack;
   34ce8:	e0bff217 	ldw	r2,-56(fp)
   34cec:	10c00717 	ldw	r3,28(r2)
   34cf0:	e0bfe617 	ldw	r2,-104(fp)
   34cf4:	10c00f15 	stw	r3,60(r2)
               tp->snd_cwnd = tp->t_maxseg;
   34cf8:	e0bfe617 	ldw	r2,-104(fp)
   34cfc:	10800a0b 	ldhu	r2,40(r2)
   34d00:	10ffffcc 	andi	r3,r2,65535
   34d04:	e0bfe617 	ldw	r2,-104(fp)
   34d08:	10c01b15 	stw	r3,108(r2)
               (void) tcp_output(tp);
   34d0c:	e13fe617 	ldw	r4,-104(fp)
   34d10:	0035e200 	call	35e20 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
   34d14:	e0bfe617 	ldw	r2,-104(fp)
   34d18:	10800f17 	ldw	r2,60(r2)
   34d1c:	e0fff817 	ldw	r3,-32(fp)
   34d20:	1885c83a 	sub	r2,r3,r2
   34d24:	0080030e 	bge	zero,r2,34d34 <tcp_input+0x189c>
                  tp->snd_nxt = onxt;
   34d28:	e0bfe617 	ldw	r2,-104(fp)
   34d2c:	e0fff817 	ldw	r3,-32(fp)
   34d30:	10c00f15 	stw	r3,60(r2)
               GOTO_DROP;
   34d34:	00814544 	movi	r2,1301
   34d38:	d0a89e15 	stw	r2,-23944(gp)
   34d3c:	00029c06 	br	357b0 <tcp_input+0x2318>
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
   34d40:	0001883a 	nop
                  tp->snd_nxt = onxt;
               GOTO_DROP;
            }
         } else
            tp->t_dupacks = 0;
         break;
   34d44:	0000df06 	br	350c4 <tcp_input+0x1c2c>
               if (SEQ_GT(onxt, tp->snd_nxt))
                  tp->snd_nxt = onxt;
               GOTO_DROP;
            }
         } else
            tp->t_dupacks = 0;
   34d48:	e0bfe617 	ldw	r2,-104(fp)
   34d4c:	10000915 	stw	zero,36(r2)
         break;
   34d50:	0000dc06 	br	350c4 <tcp_input+0x1c2c>
      }
      tp->t_dupacks = 0;
   34d54:	e0bfe617 	ldw	r2,-104(fp)
   34d58:	10000915 	stw	zero,36(r2)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
   34d5c:	e0bff217 	ldw	r2,-56(fp)
   34d60:	10c00717 	ldw	r3,28(r2)
   34d64:	e0bfe617 	ldw	r2,-104(fp)
   34d68:	10801a17 	ldw	r2,104(r2)
   34d6c:	1885c83a 	sub	r2,r3,r2
   34d70:	0080080e 	bge	zero,r2,34d94 <tcp_input+0x18fc>
      {
         tcpstat.tcps_rcvacktoomuch++;
   34d74:	008001b4 	movhi	r2,6
   34d78:	10b90b04 	addi	r2,r2,-7124
   34d7c:	10802a17 	ldw	r2,168(r2)
   34d80:	10c00044 	addi	r3,r2,1
   34d84:	008001b4 	movhi	r2,6
   34d88:	10b90b04 	addi	r2,r2,-7124
   34d8c:	10c02a15 	stw	r3,168(r2)
         goto dropafterack;
   34d90:	00023406 	br	35664 <tcp_input+0x21cc>
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
   34d94:	e0bff217 	ldw	r2,-56(fp)
   34d98:	10c00717 	ldw	r3,28(r2)
   34d9c:	e0bfe617 	ldw	r2,-104(fp)
   34da0:	10800e17 	ldw	r2,56(r2)
   34da4:	1885c83a 	sub	r2,r3,r2
   34da8:	e0bff615 	stw	r2,-40(fp)
      tcpstat.tcps_rcvackpack++;
   34dac:	008001b4 	movhi	r2,6
   34db0:	10b90b04 	addi	r2,r2,-7124
   34db4:	10802b17 	ldw	r2,172(r2)
   34db8:	10c00044 	addi	r3,r2,1
   34dbc:	008001b4 	movhi	r2,6
   34dc0:	10b90b04 	addi	r2,r2,-7124
   34dc4:	10c02b15 	stw	r3,172(r2)
      tcpstat.tcps_rcvackbyte += acked;
   34dc8:	008001b4 	movhi	r2,6
   34dcc:	10b90b04 	addi	r2,r2,-7124
   34dd0:	10c02c17 	ldw	r3,176(r2)
   34dd4:	e0bff617 	ldw	r2,-40(fp)
   34dd8:	1887883a 	add	r3,r3,r2
   34ddc:	008001b4 	movhi	r2,6
   34de0:	10b90b04 	addi	r2,r2,-7124
   34de4:	10c02c15 	stw	r3,176(r2)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
   34de8:	e0bfe617 	ldw	r2,-104(fp)
   34dec:	10801e17 	ldw	r2,120(r2)
   34df0:	10000826 	beq	r2,zero,34e14 <tcp_input+0x197c>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
   34df4:	e0bff217 	ldw	r2,-56(fp)
   34df8:	10c00717 	ldw	r3,28(r2)
   34dfc:	e0bfe617 	ldw	r2,-104(fp)
   34e00:	10801f17 	ldw	r2,124(r2)
   34e04:	1885c83a 	sub	r2,r3,r2
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
   34e08:	0080020e 	bge	zero,r2,34e14 <tcp_input+0x197c>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
         tcp_xmit_timer(tp);
   34e0c:	e13fe617 	ldw	r4,-104(fp)
   34e10:	0035a880 	call	35a88 <tcp_xmit_timer>
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
   34e14:	e0bff217 	ldw	r2,-56(fp)
   34e18:	10c00717 	ldw	r3,28(r2)
   34e1c:	e0bfe617 	ldw	r2,-104(fp)
   34e20:	10801a17 	ldw	r2,104(r2)
   34e24:	1880051e 	bne	r3,r2,34e3c <tcp_input+0x19a4>
      {
         tp->t_timer[TCPT_REXMT] = 0;
   34e28:	e0bfe617 	ldw	r2,-104(fp)
   34e2c:	10000315 	stw	zero,12(r2)
         needoutput = 1;
   34e30:	00800044 	movi	r2,1
   34e34:	e0bfeb15 	stw	r2,-84(fp)
   34e38:	00000706 	br	34e58 <tcp_input+0x19c0>
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
   34e3c:	e0bfe617 	ldw	r2,-104(fp)
   34e40:	10800417 	ldw	r2,16(r2)
   34e44:	1000041e 	bne	r2,zero,34e58 <tcp_input+0x19c0>
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
   34e48:	e0bfe617 	ldw	r2,-104(fp)
   34e4c:	10c00817 	ldw	r3,32(r2)
   34e50:	e0bfe617 	ldw	r2,-104(fp)
   34e54:	10c00315 	stw	r3,12(r2)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
   34e58:	e0bfe617 	ldw	r2,-104(fp)
   34e5c:	10801b17 	ldw	r2,108(r2)
   34e60:	e0bff915 	stw	r2,-28(fp)
         u_short  incr  =  tp->t_maxseg;
   34e64:	e0bfe617 	ldw	r2,-104(fp)
   34e68:	10800a0b 	ldhu	r2,40(r2)
   34e6c:	e0bff08d 	sth	r2,-62(fp)

         if (cw > tp->snd_ssthresh)
   34e70:	e0bfe617 	ldw	r2,-104(fp)
   34e74:	10c01c17 	ldw	r3,112(r2)
   34e78:	e0bff917 	ldw	r2,-28(fp)
   34e7c:	18800a2e 	bgeu	r3,r2,34ea8 <tcp_input+0x1a10>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
   34e80:	e0fff08b 	ldhu	r3,-62(fp)
   34e84:	e0bff08b 	ldhu	r2,-62(fp)
   34e88:	1885383a 	mul	r2,r3,r2
   34e8c:	1009883a 	mov	r4,r2
   34e90:	e17ff917 	ldw	r5,-28(fp)
   34e94:	00152500 	call	15250 <__udivsi3>
   34e98:	10c00428 	cmpgeui	r3,r2,16
   34e9c:	1800011e 	bne	r3,zero,34ea4 <tcp_input+0x1a0c>
   34ea0:	00800404 	movi	r2,16
   34ea4:	e0bff08d 	sth	r2,-62(fp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
   34ea8:	e0fff08b 	ldhu	r3,-62(fp)
   34eac:	e0bff917 	ldw	r2,-28(fp)
   34eb0:	1885883a 	add	r2,r3,r2
   34eb4:	10d80070 	cmpltui	r3,r2,24577
   34eb8:	1800011e 	bne	r3,zero,34ec0 <tcp_input+0x1a28>
   34ebc:	00980004 	movi	r2,24576
   34ec0:	e0ffe617 	ldw	r3,-104(fp)
   34ec4:	18801b15 	stw	r2,108(r3)
      }
      if (acked > (int)so->so_snd.sb_cc) 
   34ec8:	e0bfe817 	ldw	r2,-96(fp)
   34ecc:	10801217 	ldw	r2,72(r2)
   34ed0:	1007883a 	mov	r3,r2
   34ed4:	e0bff617 	ldw	r2,-40(fp)
   34ed8:	1880120e 	bge	r3,r2,34f24 <tcp_input+0x1a8c>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
   34edc:	e0bfe617 	ldw	r2,-104(fp)
   34ee0:	10c01417 	ldw	r3,80(r2)
   34ee4:	e0bfe817 	ldw	r2,-96(fp)
   34ee8:	10801217 	ldw	r2,72(r2)
   34eec:	10bfffcc 	andi	r2,r2,65535
   34ef0:	1887c83a 	sub	r3,r3,r2
   34ef4:	e0bfe617 	ldw	r2,-104(fp)
   34ef8:	10c01415 	stw	r3,80(r2)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
   34efc:	e0bfe817 	ldw	r2,-96(fp)
   34f00:	10c01204 	addi	r3,r2,72
   34f04:	e0bfe817 	ldw	r2,-96(fp)
   34f08:	10801217 	ldw	r2,72(r2)
   34f0c:	1809883a 	mov	r4,r3
   34f10:	100b883a 	mov	r5,r2
   34f14:	00324cc0 	call	324cc <sbdrop>
         ourfinisacked = 1;
   34f18:	00800044 	movi	r2,1
   34f1c:	e0bfea15 	stw	r2,-88(fp)
   34f20:	00000d06 	br	34f58 <tcp_input+0x1ac0>
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
   34f24:	e0bfe817 	ldw	r2,-96(fp)
   34f28:	10801204 	addi	r2,r2,72
   34f2c:	1009883a 	mov	r4,r2
   34f30:	e17ff617 	ldw	r5,-40(fp)
   34f34:	00324cc0 	call	324cc <sbdrop>
         tp->snd_wnd -= (u_short)acked;
   34f38:	e0bfe617 	ldw	r2,-104(fp)
   34f3c:	10c01417 	ldw	r3,80(r2)
   34f40:	e0bff617 	ldw	r2,-40(fp)
   34f44:	10bfffcc 	andi	r2,r2,65535
   34f48:	1887c83a 	sub	r3,r3,r2
   34f4c:	e0bfe617 	ldw	r2,-104(fp)
   34f50:	10c01415 	stw	r3,80(r2)
         ourfinisacked = 0;
   34f54:	e03fea15 	stw	zero,-88(fp)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
   34f58:	e0bfe817 	ldw	r2,-96(fp)
   34f5c:	1080190b 	ldhu	r2,100(r2)
   34f60:	10bfffcc 	andi	r2,r2,65535
   34f64:	1080030c 	andi	r2,r2,12
   34f68:	10000526 	beq	r2,zero,34f80 <tcp_input+0x1ae8>
         sowwakeup(so);
   34f6c:	e0bfe817 	ldw	r2,-96(fp)
   34f70:	10801204 	addi	r2,r2,72
   34f74:	e13fe817 	ldw	r4,-96(fp)
   34f78:	100b883a 	mov	r5,r2
   34f7c:	0031d740 	call	31d74 <sbwakeup>

      tp->snd_una = ti->ti_ack;
   34f80:	e0bff217 	ldw	r2,-56(fp)
   34f84:	10c00717 	ldw	r3,28(r2)
   34f88:	e0bfe617 	ldw	r2,-104(fp)
   34f8c:	10c00e15 	stw	r3,56(r2)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
   34f90:	e0bfe617 	ldw	r2,-104(fp)
   34f94:	10c00f17 	ldw	r3,60(r2)
   34f98:	e0bfe617 	ldw	r2,-104(fp)
   34f9c:	10800e17 	ldw	r2,56(r2)
   34fa0:	1885c83a 	sub	r2,r3,r2
   34fa4:	1000040e 	bge	r2,zero,34fb8 <tcp_input+0x1b20>
         tp->snd_nxt = tp->snd_una;
   34fa8:	e0bfe617 	ldw	r2,-104(fp)
   34fac:	10c00e17 	ldw	r3,56(r2)
   34fb0:	e0bfe617 	ldw	r2,-104(fp)
   34fb4:	10c00f15 	stw	r3,60(r2)


      switch (tp->t_state) 
   34fb8:	e0bfe617 	ldw	r2,-104(fp)
   34fbc:	10800217 	ldw	r2,8(r2)
   34fc0:	10c001e0 	cmpeqi	r3,r2,7
   34fc4:	18001d1e 	bne	r3,zero,3503c <tcp_input+0x1ba4>
   34fc8:	10c00208 	cmpgei	r3,r2,8
   34fcc:	1800031e 	bne	r3,zero,34fdc <tcp_input+0x1b44>
   34fd0:	108001a0 	cmpeqi	r2,r2,6
   34fd4:	1000061e 	bne	r2,zero,34ff0 <tcp_input+0x1b58>
   34fd8:	00003a06 	br	350c4 <tcp_input+0x1c2c>
   34fdc:	10c00220 	cmpeqi	r3,r2,8
   34fe0:	1800281e 	bne	r3,zero,35084 <tcp_input+0x1bec>
   34fe4:	108002a0 	cmpeqi	r2,r2,10
   34fe8:	10002e1e 	bne	r2,zero,350a4 <tcp_input+0x1c0c>
   34fec:	00003506 	br	350c4 <tcp_input+0x1c2c>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
   34ff0:	e0bfea17 	ldw	r2,-88(fp)
   34ff4:	10001026 	beq	r2,zero,35038 <tcp_input+0x1ba0>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
   34ff8:	e0bfe817 	ldw	r2,-96(fp)
   34ffc:	1080088b 	ldhu	r2,34(r2)
   35000:	10bfffcc 	andi	r2,r2,65535
   35004:	1080080c 	andi	r2,r2,32
   35008:	10000726 	beq	r2,zero,35028 <tcp_input+0x1b90>
            {
               soisdisconnected(so);
   3500c:	e13fe817 	ldw	r4,-96(fp)
   35010:	00317a40 	call	317a4 <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
   35014:	00800174 	movhi	r2,5
   35018:	108fca04 	addi	r2,r2,16168
   3501c:	10c00017 	ldw	r3,0(r2)
   35020:	e0bfe617 	ldw	r2,-104(fp)
   35024:	10c00615 	stw	r3,24(r2)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
   35028:	e0bfe617 	ldw	r2,-104(fp)
   3502c:	00c00244 	movi	r3,9
   35030:	10c00215 	stw	r3,8(r2)
         }
         break;
   35034:	00002306 	br	350c4 <tcp_input+0x1c2c>
   35038:	00002206 	br	350c4 <tcp_input+0x1c2c>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
   3503c:	e0bfea17 	ldw	r2,-88(fp)
   35040:	10000f26 	beq	r2,zero,35080 <tcp_input+0x1be8>
         {
            tp->t_state = TCPS_TIME_WAIT;
   35044:	e0bfe617 	ldw	r2,-104(fp)
   35048:	00c00284 	movi	r3,10
   3504c:	10c00215 	stw	r3,8(r2)
            tcp_canceltimers(tp);
   35050:	e13fe617 	ldw	r4,-104(fp)
   35054:	0037bac0 	call	37bac <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
   35058:	00800174 	movhi	r2,5
   3505c:	10876204 	addi	r2,r2,7560
   35060:	10800017 	ldw	r2,0(r2)
   35064:	1085883a 	add	r2,r2,r2
   35068:	1007883a 	mov	r3,r2
   3506c:	e0bfe617 	ldw	r2,-104(fp)
   35070:	10c00615 	stw	r3,24(r2)
            soisdisconnected(so);
   35074:	e13fe817 	ldw	r4,-96(fp)
   35078:	00317a40 	call	317a4 <soisdisconnected>
         }
         break;
   3507c:	00001106 	br	350c4 <tcp_input+0x1c2c>
   35080:	00001006 	br	350c4 <tcp_input+0x1c2c>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
   35084:	e0bfea17 	ldw	r2,-88(fp)
   35088:	10000526 	beq	r2,zero,350a0 <tcp_input+0x1c08>
         {
            SETTP(tp, tcp_close(tp));
   3508c:	e13fe617 	ldw	r4,-104(fp)
   35090:	00377100 	call	37710 <tcp_close>
            GOTO_DROP;
   35094:	00816644 	movi	r2,1433
   35098:	d0a89e15 	stw	r2,-23944(gp)
   3509c:	0001c406 	br	357b0 <tcp_input+0x2318>
         }
         break;
   350a0:	00000806 	br	350c4 <tcp_input+0x1c2c>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
   350a4:	00800174 	movhi	r2,5
   350a8:	10876204 	addi	r2,r2,7560
   350ac:	10800017 	ldw	r2,0(r2)
   350b0:	1085883a 	add	r2,r2,r2
   350b4:	1007883a 	mov	r3,r2
   350b8:	e0bfe617 	ldw	r2,-104(fp)
   350bc:	10c00615 	stw	r3,24(r2)
         goto dropafterack;
   350c0:	00016806 	br	35664 <tcp_input+0x21cc>
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
   350c4:	e0bfe717 	ldw	r2,-100(fp)
   350c8:	1080040c 	andi	r2,r2,16
   350cc:	10004426 	beq	r2,zero,351e0 <tcp_input+0x1d48>
       /*
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
   350d0:	e0bfe617 	ldw	r2,-104(fp)
   350d4:	10c01117 	ldw	r3,68(r2)
   350d8:	e0bff217 	ldw	r2,-56(fp)
   350dc:	10800617 	ldw	r2,24(r2)
   350e0:	1885c83a 	sub	r2,r3,r2
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
   350e4:	10001416 	blt	r2,zero,35138 <tcp_input+0x1ca0>
       /*
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
   350e8:	e0bfe617 	ldw	r2,-104(fp)
   350ec:	10c01117 	ldw	r3,68(r2)
   350f0:	e0bff217 	ldw	r2,-56(fp)
   350f4:	10800617 	ldw	r2,24(r2)
   350f8:	1880391e 	bne	r3,r2,351e0 <tcp_input+0x1d48>
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
   350fc:	e0bfe617 	ldw	r2,-104(fp)
   35100:	10c01217 	ldw	r3,72(r2)
   35104:	e0bff217 	ldw	r2,-56(fp)
   35108:	10800717 	ldw	r2,28(r2)
   3510c:	1885c83a 	sub	r2,r3,r2
       /*
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
   35110:	10000916 	blt	r2,zero,35138 <tcp_input+0x1ca0>
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   35114:	e0bfe617 	ldw	r2,-104(fp)
   35118:	10c01217 	ldw	r3,72(r2)
   3511c:	e0bff217 	ldw	r2,-56(fp)
   35120:	10800717 	ldw	r2,28(r2)
        * Altera Niche Stack Nios port modification:
        * Add parenthesis to remove implicit order of operation
        * & possible build warnings.
        */
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
   35124:	18802e1e 	bne	r3,r2,351e0 <tcp_input+0x1d48>
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   35128:	e0bfe617 	ldw	r2,-104(fp)
   3512c:	10c01417 	ldw	r3,80(r2)
   35130:	e0bff517 	ldw	r2,-44(fp)
   35134:	18802a2e 	bgeu	r3,r2,351e0 <tcp_input+0x1d48>
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
   35138:	e0bff217 	ldw	r2,-56(fp)
   3513c:	1080028b 	ldhu	r2,10(r2)
   35140:	10bfffcc 	andi	r2,r2,65535
   35144:	1000101e 	bne	r2,zero,35188 <tcp_input+0x1cf0>
          (tp->snd_wl2 == ti->ti_ack) &&
   35148:	e0bfe617 	ldw	r2,-104(fp)
   3514c:	10c01217 	ldw	r3,72(r2)
   35150:	e0bff217 	ldw	r2,-56(fp)
   35154:	10800717 	ldw	r2,28(r2)
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
   35158:	18800b1e 	bne	r3,r2,35188 <tcp_input+0x1cf0>
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
   3515c:	e0bfe617 	ldw	r2,-104(fp)
   35160:	10c01417 	ldw	r3,80(r2)
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
          (tp->snd_wl2 == ti->ti_ack) &&
   35164:	e0bff517 	ldw	r2,-44(fp)
   35168:	1880072e 	bgeu	r3,r2,35188 <tcp_input+0x1cf0>
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
   3516c:	008001b4 	movhi	r2,6
   35170:	10b90b04 	addi	r2,r2,-7124
   35174:	10802d17 	ldw	r2,180(r2)
   35178:	10c00044 	addi	r3,r2,1
   3517c:	008001b4 	movhi	r2,6
   35180:	10b90b04 	addi	r2,r2,-7124
   35184:	10c02d15 	stw	r3,180(r2)
      }
      tp->snd_wnd = rx_win;
   35188:	e0bfe617 	ldw	r2,-104(fp)
   3518c:	e0fff517 	ldw	r3,-44(fp)
   35190:	10c01415 	stw	r3,80(r2)
      tp->snd_wl1 = ti->ti_seq;
   35194:	e0bff217 	ldw	r2,-56(fp)
   35198:	10c00617 	ldw	r3,24(r2)
   3519c:	e0bfe617 	ldw	r2,-104(fp)
   351a0:	10c01115 	stw	r3,68(r2)
      tp->snd_wl2 = ti->ti_ack;
   351a4:	e0bff217 	ldw	r2,-56(fp)
   351a8:	10c00717 	ldw	r3,28(r2)
   351ac:	e0bfe617 	ldw	r2,-104(fp)
   351b0:	10c01215 	stw	r3,72(r2)
      if (tp->snd_wnd > tp->max_sndwnd)
   351b4:	e0bfe617 	ldw	r2,-104(fp)
   351b8:	10801417 	ldw	r2,80(r2)
   351bc:	e0ffe617 	ldw	r3,-104(fp)
   351c0:	18c02317 	ldw	r3,140(r3)
   351c4:	1880042e 	bgeu	r3,r2,351d8 <tcp_input+0x1d40>
         tp->max_sndwnd = tp->snd_wnd;
   351c8:	e0bfe617 	ldw	r2,-104(fp)
   351cc:	10c01417 	ldw	r3,80(r2)
   351d0:	e0bfe617 	ldw	r2,-104(fp)
   351d4:	10c02315 	stw	r3,140(r2)
      needoutput = 1;
   351d8:	00800044 	movi	r2,1
   351dc:	e0bfeb15 	stw	r2,-84(fp)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
   351e0:	e0bfe717 	ldw	r2,-100(fp)
   351e4:	1080080c 	andi	r2,r2,32
   351e8:	10005726 	beq	r2,zero,35348 <tcp_input+0x1eb0>
   351ec:	e0bff217 	ldw	r2,-56(fp)
   351f0:	1080098b 	ldhu	r2,38(r2)
   351f4:	10bfffcc 	andi	r2,r2,65535
   351f8:	10005326 	beq	r2,zero,35348 <tcp_input+0x1eb0>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   351fc:	e0bfe617 	ldw	r2,-104(fp)
   35200:	10800217 	ldw	r2,8(r2)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
   35204:	10800288 	cmpgei	r2,r2,10
   35208:	10004f1e 	bne	r2,zero,35348 <tcp_input+0x1eb0>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
   3520c:	e0bff217 	ldw	r2,-56(fp)
   35210:	1080098b 	ldhu	r2,38(r2)
   35214:	10ffffcc 	andi	r3,r2,65535
   35218:	e0bfe817 	ldw	r2,-96(fp)
   3521c:	10800a17 	ldw	r2,40(r2)
   35220:	1885883a 	add	r2,r3,r2
   35224:	10900070 	cmpltui	r2,r2,16385
   35228:	1000071e 	bne	r2,zero,35248 <tcp_input+0x1db0>
      {
         ti->ti_urp = 0;         /* XXX */
   3522c:	e0bff217 	ldw	r2,-56(fp)
   35230:	1000098d 	sth	zero,38(r2)
         tiflags &= ~TH_URG;     /* XXX */
   35234:	e0ffe717 	ldw	r3,-100(fp)
   35238:	00bff7c4 	movi	r2,-33
   3523c:	1884703a 	and	r2,r3,r2
   35240:	e0bfe715 	stw	r2,-100(fp)
         goto dodata;         /* XXX */
   35244:	00004a06 	br	35370 <tcp_input+0x1ed8>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
   35248:	e0bff217 	ldw	r2,-56(fp)
   3524c:	10c00617 	ldw	r3,24(r2)
   35250:	e0bff217 	ldw	r2,-56(fp)
   35254:	1080098b 	ldhu	r2,38(r2)
   35258:	10bfffcc 	andi	r2,r2,65535
   3525c:	1887883a 	add	r3,r3,r2
   35260:	e0bfe617 	ldw	r2,-104(fp)
   35264:	10801717 	ldw	r2,92(r2)
   35268:	1885c83a 	sub	r2,r3,r2
   3526c:	0080250e 	bge	zero,r2,35304 <tcp_input+0x1e6c>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
   35270:	e0bff217 	ldw	r2,-56(fp)
   35274:	10c00617 	ldw	r3,24(r2)
   35278:	e0bff217 	ldw	r2,-56(fp)
   3527c:	1080098b 	ldhu	r2,38(r2)
   35280:	10bfffcc 	andi	r2,r2,65535
   35284:	1887883a 	add	r3,r3,r2
   35288:	e0bfe617 	ldw	r2,-104(fp)
   3528c:	10c01715 	stw	r3,92(r2)
         so->so_oobmark = so->so_rcv.sb_cc +
   35290:	e0bfe817 	ldw	r2,-96(fp)
   35294:	10c00a17 	ldw	r3,40(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
   35298:	e0bfe617 	ldw	r2,-104(fp)
   3529c:	11001717 	ldw	r4,92(r2)
   352a0:	e0bfe617 	ldw	r2,-104(fp)
   352a4:	10801617 	ldw	r2,88(r2)
   352a8:	2085c83a 	sub	r2,r4,r2
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
         so->so_oobmark = so->so_rcv.sb_cc +
   352ac:	1885883a 	add	r2,r3,r2
         (tp->rcv_up - tp->rcv_nxt) - 1;
   352b0:	10ffffc4 	addi	r3,r2,-1
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
         so->so_oobmark = so->so_rcv.sb_cc +
   352b4:	e0bfe817 	ldw	r2,-96(fp)
   352b8:	10c01a15 	stw	r3,104(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
         if (so->so_oobmark == 0)
   352bc:	e0bfe817 	ldw	r2,-96(fp)
   352c0:	10801a17 	ldw	r2,104(r2)
   352c4:	1000061e 	bne	r2,zero,352e0 <tcp_input+0x1e48>
            so->so_state |= SS_RCVATMARK;
   352c8:	e0bfe817 	ldw	r2,-96(fp)
   352cc:	1080088b 	ldhu	r2,34(r2)
   352d0:	10801014 	ori	r2,r2,64
   352d4:	1007883a 	mov	r3,r2
   352d8:	e0bfe817 	ldw	r2,-96(fp)
   352dc:	10c0088d 	sth	r3,34(r2)
         sohasoutofband(so);
   352e0:	e13fe817 	ldw	r4,-96(fp)
   352e4:	003155c0 	call	3155c <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
   352e8:	e0bfe617 	ldw	r2,-104(fp)
   352ec:	10c02403 	ldbu	r3,144(r2)
   352f0:	00bfff04 	movi	r2,-4
   352f4:	1884703a 	and	r2,r3,r2
   352f8:	1007883a 	mov	r3,r2
   352fc:	e0bfe617 	ldw	r2,-104(fp)
   35300:	10c02405 	stb	r3,144(r2)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
   35304:	e0bff217 	ldw	r2,-56(fp)
   35308:	1100098b 	ldhu	r4,38(r2)
   3530c:	e0bff217 	ldw	r2,-56(fp)
   35310:	10c0028b 	ldhu	r3,10(r2)
   35314:	20bfffcc 	andi	r2,r4,65535
   35318:	18ffffcc 	andi	r3,r3,65535
   3531c:	18800936 	bltu	r3,r2,35344 <tcp_input+0x1eac>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
   35320:	e0bfe817 	ldw	r2,-96(fp)
   35324:	10800417 	ldw	r2,16(r2)
   35328:	1080400c 	andi	r2,r2,256
   3532c:	1000051e 	bne	r2,zero,35344 <tcp_input+0x1eac>
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
   35330:	e13fe817 	ldw	r4,-96(fp)
   35334:	e17ff217 	ldw	r5,-56(fp)
   35338:	e1bffe17 	ldw	r6,-8(fp)
   3533c:	00359640 	call	35964 <tcp_pulloutofband>
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
   35340:	00000b06 	br	35370 <tcp_input+0x1ed8>
   35344:	00000a06 	br	35370 <tcp_input+0x1ed8>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
   35348:	e0bfe617 	ldw	r2,-104(fp)
   3534c:	10c01617 	ldw	r3,88(r2)
   35350:	e0bfe617 	ldw	r2,-104(fp)
   35354:	10801717 	ldw	r2,92(r2)
   35358:	1885c83a 	sub	r2,r3,r2
   3535c:	0080040e 	bge	zero,r2,35370 <tcp_input+0x1ed8>
      tp->rcv_up = tp->rcv_nxt;
   35360:	e0bfe617 	ldw	r2,-104(fp)
   35364:	10c01617 	ldw	r3,88(r2)
   35368:	e0bfe617 	ldw	r2,-104(fp)
   3536c:	10c01715 	stw	r3,92(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
   35370:	e0bff217 	ldw	r2,-56(fp)
   35374:	1080028b 	ldhu	r2,10(r2)
   35378:	10bfffcc 	andi	r2,r2,65535
   3537c:	1000031e 	bne	r2,zero,3538c <tcp_input+0x1ef4>
   35380:	e0bfe717 	ldw	r2,-100(fp)
   35384:	1080004c 	andi	r2,r2,1
   35388:	10005f26 	beq	r2,zero,35508 <tcp_input+0x2070>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   3538c:	e0bfe617 	ldw	r2,-104(fp)
   35390:	10800217 	ldw	r2,8(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
   35394:	10800288 	cmpgei	r2,r2,10
   35398:	10005b1e 	bne	r2,zero,35508 <tcp_input+0x2070>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
   3539c:	e0bff217 	ldw	r2,-56(fp)
   353a0:	10c00617 	ldw	r3,24(r2)
   353a4:	e0bfe617 	ldw	r2,-104(fp)
   353a8:	10801617 	ldw	r2,88(r2)
   353ac:	1880371e 	bne	r3,r2,3548c <tcp_input+0x1ff4>
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
   353b0:	e0bfe617 	ldw	r2,-104(fp)
   353b4:	10c00017 	ldw	r3,0(r2)
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
   353b8:	e0bfe617 	ldw	r2,-104(fp)
   353bc:	1880331e 	bne	r3,r2,3548c <tcp_input+0x1ff4>
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
         (tp->t_state == TCPS_ESTABLISHED))
   353c0:	e0bfe617 	ldw	r2,-104(fp)
   353c4:	10800217 	ldw	r2,8(r2)
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
         (tp->seg_next == (struct tcpiphdr *)(tp) ) &&
   353c8:	10800118 	cmpnei	r2,r2,4
   353cc:	10002f1e 	bne	r2,zero,3548c <tcp_input+0x1ff4>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
   353d0:	e0bfe617 	ldw	r2,-104(fp)
   353d4:	10800b0b 	ldhu	r2,44(r2)
   353d8:	10800054 	ori	r2,r2,1
   353dc:	1007883a 	mov	r3,r2
   353e0:	e0bfe617 	ldw	r2,-104(fp)
   353e4:	10c00b0d 	sth	r3,44(r2)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
   353e8:	e0bfe617 	ldw	r2,-104(fp)
   353ec:	10c01617 	ldw	r3,88(r2)
   353f0:	e0bff217 	ldw	r2,-56(fp)
   353f4:	1080028b 	ldhu	r2,10(r2)
   353f8:	10bfffcc 	andi	r2,r2,65535
   353fc:	1887883a 	add	r3,r3,r2
   35400:	e0bfe617 	ldw	r2,-104(fp)
   35404:	10c01615 	stw	r3,88(r2)
         tiflags = ti->ti_flags & TH_FIN;
   35408:	e0bff217 	ldw	r2,-56(fp)
   3540c:	10800843 	ldbu	r2,33(r2)
   35410:	10803fcc 	andi	r2,r2,255
   35414:	1080004c 	andi	r2,r2,1
   35418:	e0bfe715 	stw	r2,-100(fp)
         tcpstat.tcps_rcvpack++;
   3541c:	008001b4 	movhi	r2,6
   35420:	10b90b04 	addi	r2,r2,-7124
   35424:	10801a17 	ldw	r2,104(r2)
   35428:	10c00044 	addi	r3,r2,1
   3542c:	008001b4 	movhi	r2,6
   35430:	10b90b04 	addi	r2,r2,-7124
   35434:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
   35438:	008001b4 	movhi	r2,6
   3543c:	10b90b04 	addi	r2,r2,-7124
   35440:	10c01b17 	ldw	r3,108(r2)
   35444:	e0bff217 	ldw	r2,-56(fp)
   35448:	1080028b 	ldhu	r2,10(r2)
   3544c:	10bfffcc 	andi	r2,r2,65535
   35450:	1887883a 	add	r3,r3,r2
   35454:	008001b4 	movhi	r2,6
   35458:	10b90b04 	addi	r2,r2,-7124
   3545c:	10c01b15 	stw	r3,108(r2)
         sbappend(&so->so_rcv, (m));
   35460:	e0bfe817 	ldw	r2,-96(fp)
   35464:	10800a04 	addi	r2,r2,40
   35468:	1009883a 	mov	r4,r2
   3546c:	e17ffe17 	ldw	r5,-8(fp)
   35470:	0031f280 	call	31f28 <sbappend>
         sorwakeup(so);
   35474:	e0bfe817 	ldw	r2,-96(fp)
   35478:	10800a04 	addi	r2,r2,40
   3547c:	e13fe817 	ldw	r4,-96(fp)
   35480:	100b883a 	mov	r5,r2
   35484:	0031d740 	call	31d74 <sbwakeup>
   35488:	00000b06 	br	354b8 <tcp_input+0x2020>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
   3548c:	e13fe617 	ldw	r4,-104(fp)
   35490:	e17ff217 	ldw	r5,-56(fp)
   35494:	e1bffe17 	ldw	r6,-8(fp)
   35498:	00330940 	call	33094 <tcp_reass>
   3549c:	e0bfe715 	stw	r2,-100(fp)
         tp->t_flags |= TF_ACKNOW;
   354a0:	e0bfe617 	ldw	r2,-104(fp)
   354a4:	10800b0b 	ldhu	r2,44(r2)
   354a8:	10800054 	ori	r2,r2,1
   354ac:	1007883a 	mov	r3,r2
   354b0:	e0bfe617 	ldw	r2,-104(fp)
   354b4:	10c00b0d 	sth	r3,44(r2)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
   354b8:	e0bfe817 	ldw	r2,-96(fp)
   354bc:	10c00b17 	ldw	r3,44(r2)
   354c0:	e0bfe617 	ldw	r2,-104(fp)
   354c4:	11001617 	ldw	r4,88(r2)
   354c8:	e0bfe617 	ldw	r2,-104(fp)
   354cc:	10801917 	ldw	r2,100(r2)
   354d0:	2085c83a 	sub	r2,r4,r2
   354d4:	1885883a 	add	r2,r3,r2
   354d8:	e0bffc15 	stw	r2,-16(fp)
      if (len > (int)tp->max_rcvd)
   354dc:	e0bfe617 	ldw	r2,-104(fp)
   354e0:	10802217 	ldw	r2,136(r2)
   354e4:	1007883a 	mov	r3,r2
   354e8:	e0bffc17 	ldw	r2,-16(fp)
   354ec:	1880050e 	bge	r3,r2,35504 <tcp_input+0x206c>
         tp->max_rcvd = (u_short)len;
   354f0:	e0bffc17 	ldw	r2,-16(fp)
   354f4:	10ffffcc 	andi	r3,r2,65535
   354f8:	e0bfe617 	ldw	r2,-104(fp)
   354fc:	10c02215 	stw	r3,136(r2)
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
      if (len > (int)tp->max_rcvd)
   35500:	00000706 	br	35520 <tcp_input+0x2088>
   35504:	00000606 	br	35520 <tcp_input+0x2088>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
   35508:	e13ffe17 	ldw	r4,-8(fp)
   3550c:	002c1a40 	call	2c1a4 <m_freem>
      tiflags &= ~TH_FIN;
   35510:	e0ffe717 	ldw	r3,-100(fp)
   35514:	00bfff84 	movi	r2,-2
   35518:	1884703a 	and	r2,r3,r2
   3551c:	e0bfe715 	stw	r2,-100(fp)

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
   35520:	e0bfe717 	ldw	r2,-100(fp)
   35524:	1080004c 	andi	r2,r2,1
   35528:	10004326 	beq	r2,zero,35638 <tcp_input+0x21a0>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   3552c:	e0bfe617 	ldw	r2,-104(fp)
   35530:	10800217 	ldw	r2,8(r2)
   35534:	10800288 	cmpgei	r2,r2,10
   35538:	10000d1e 	bne	r2,zero,35570 <tcp_input+0x20d8>
      {
         socantrcvmore(so);
   3553c:	e13fe817 	ldw	r4,-96(fp)
   35540:	0031c800 	call	31c80 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
   35544:	e0bfe617 	ldw	r2,-104(fp)
   35548:	10800b0b 	ldhu	r2,44(r2)
   3554c:	10800054 	ori	r2,r2,1
   35550:	1007883a 	mov	r3,r2
   35554:	e0bfe617 	ldw	r2,-104(fp)
   35558:	10c00b0d 	sth	r3,44(r2)
         tp->rcv_nxt++;
   3555c:	e0bfe617 	ldw	r2,-104(fp)
   35560:	10801617 	ldw	r2,88(r2)
   35564:	10c00044 	addi	r3,r2,1
   35568:	e0bfe617 	ldw	r2,-104(fp)
   3556c:	10c01615 	stw	r3,88(r2)
      }
      switch (tp->t_state) 
   35570:	e0bfe617 	ldw	r2,-104(fp)
   35574:	10800217 	ldw	r2,8(r2)
   35578:	10bfff44 	addi	r2,r2,-3
   3557c:	10c00228 	cmpgeui	r3,r2,8
   35580:	18002d1e 	bne	r3,zero,35638 <tcp_input+0x21a0>
   35584:	100690ba 	slli	r3,r2,2
   35588:	008000f4 	movhi	r2,3
   3558c:	10956704 	addi	r2,r2,21916
   35590:	1885883a 	add	r2,r3,r2
   35594:	10800017 	ldw	r2,0(r2)
   35598:	1000683a 	jmp	r2
   3559c:	000355bc 	xorhi	zero,zero,3414
   355a0:	000355bc 	xorhi	zero,zero,3414
   355a4:	00035638 	rdprs	zero,zero,3416
   355a8:	000355cc 	andi	zero,zero,3415
   355ac:	00035638 	rdprs	zero,zero,3416
   355b0:	00035638 	rdprs	zero,zero,3416
   355b4:	000355dc 	xori	zero,zero,3415
   355b8:	00035618 	cmpnei	zero,zero,3416
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
   355bc:	e0bfe617 	ldw	r2,-104(fp)
   355c0:	00c00144 	movi	r3,5
   355c4:	10c00215 	stw	r3,8(r2)
         break;
   355c8:	00001b06 	br	35638 <tcp_input+0x21a0>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
   355cc:	e0bfe617 	ldw	r2,-104(fp)
   355d0:	00c001c4 	movi	r3,7
   355d4:	10c00215 	stw	r3,8(r2)
         break;
   355d8:	00001706 	br	35638 <tcp_input+0x21a0>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
   355dc:	e0bfe617 	ldw	r2,-104(fp)
   355e0:	00c00284 	movi	r3,10
   355e4:	10c00215 	stw	r3,8(r2)
         tcp_canceltimers(tp);
   355e8:	e13fe617 	ldw	r4,-104(fp)
   355ec:	0037bac0 	call	37bac <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
   355f0:	00800174 	movhi	r2,5
   355f4:	10876204 	addi	r2,r2,7560
   355f8:	10800017 	ldw	r2,0(r2)
   355fc:	1085883a 	add	r2,r2,r2
   35600:	1007883a 	mov	r3,r2
   35604:	e0bfe617 	ldw	r2,-104(fp)
   35608:	10c00615 	stw	r3,24(r2)
         soisdisconnected(so);
   3560c:	e13fe817 	ldw	r4,-96(fp)
   35610:	00317a40 	call	317a4 <soisdisconnected>
         break;
   35614:	00000806 	br	35638 <tcp_input+0x21a0>

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
   35618:	00800174 	movhi	r2,5
   3561c:	10876204 	addi	r2,r2,7560
   35620:	10800017 	ldw	r2,0(r2)
   35624:	1085883a 	add	r2,r2,r2
   35628:	1007883a 	mov	r3,r2
   3562c:	e0bfe617 	ldw	r2,-104(fp)
   35630:	10c00615 	stw	r3,24(r2)
         break;
   35634:	0001883a 	nop
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
   35638:	e0bfeb17 	ldw	r2,-84(fp)
   3563c:	1000051e 	bne	r2,zero,35654 <tcp_input+0x21bc>
   35640:	e0bfe617 	ldw	r2,-104(fp)
   35644:	10800b0b 	ldhu	r2,44(r2)
   35648:	10bfffcc 	andi	r2,r2,65535
   3564c:	1080004c 	andi	r2,r2,1
   35650:	10000326 	beq	r2,zero,35660 <tcp_input+0x21c8>
      (void) tcp_output(tp);
   35654:	e13fe617 	ldw	r4,-104(fp)
   35658:	0035e200 	call	35e20 <tcp_output>
   return;
   3565c:	00005f06 	br	357dc <tcp_input+0x2344>
   35660:	00005e06 	br	357dc <tcp_input+0x2344>
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
   35664:	e0bfe717 	ldw	r2,-100(fp)
   35668:	1080010c 	andi	r2,r2,4
   3566c:	10000326 	beq	r2,zero,3567c <tcp_input+0x21e4>
      GOTO_DROP;
   35670:	0081a904 	movi	r2,1700
   35674:	d0a89e15 	stw	r2,-23944(gp)
   35678:	00004d06 	br	357b0 <tcp_input+0x2318>
   m_freem (m);
   3567c:	e13ffe17 	ldw	r4,-8(fp)
   35680:	002c1a40 	call	2c1a4 <m_freem>
   tp->t_flags |= TF_ACKNOW;
   35684:	e0bfe617 	ldw	r2,-104(fp)
   35688:	10800b0b 	ldhu	r2,44(r2)
   3568c:	10800054 	ori	r2,r2,1
   35690:	1007883a 	mov	r3,r2
   35694:	e0bfe617 	ldw	r2,-104(fp)
   35698:	10c00b0d 	sth	r3,44(r2)
   (void) tcp_output (tp);
   3569c:	e13fe617 	ldw	r4,-104(fp)
   356a0:	0035e200 	call	35e20 <tcp_output>
   return;
   356a4:	00004d06 	br	357dc <tcp_input+0x2344>

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
   356a8:	008001b4 	movhi	r2,6
   356ac:	10b8dd04 	addi	r2,r2,-7308
   356b0:	10800d17 	ldw	r2,52(r2)
   356b4:	10c00044 	addi	r3,r2,1
   356b8:	008001b4 	movhi	r2,6
   356bc:	10b8dd04 	addi	r2,r2,-7308
   356c0:	10c00d15 	stw	r3,52(r2)
   if (om) 
   356c4:	e0bfe517 	ldw	r2,-108(fp)
   356c8:	10000326 	beq	r2,zero,356d8 <tcp_input+0x2240>
   {
      (void) m_free(om);
   356cc:	e13fe517 	ldw	r4,-108(fp)
   356d0:	002c0940 	call	2c094 <m_free>
      om = 0;
   356d4:	e03fe515 	stw	zero,-108(fp)
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
   356d8:	e0bfe717 	ldw	r2,-100(fp)
   356dc:	1080010c 	andi	r2,r2,4
   356e0:	10000326 	beq	r2,zero,356f0 <tcp_input+0x2258>
      GOTO_DROP;
   356e4:	0081ad04 	movi	r2,1716
   356e8:	d0a89e15 	stw	r2,-23944(gp)
   356ec:	00003006 	br	357b0 <tcp_input+0x2318>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
   356f0:	e0bff217 	ldw	r2,-56(fp)
   356f4:	10800417 	ldw	r2,16(r2)
   356f8:	1009883a 	mov	r4,r2
   356fc:	002d1100 	call	2d110 <in_broadcast>
   35700:	10000326 	beq	r2,zero,35710 <tcp_input+0x2278>
      GOTO_DROP;
   35704:	0081af44 	movi	r2,1725
   35708:	d0a89e15 	stw	r2,-23944(gp)
   3570c:	00002806 	br	357b0 <tcp_input+0x2318>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
   35710:	e0bfe717 	ldw	r2,-100(fp)
   35714:	1080040c 	andi	r2,r2,16
   35718:	10000c26 	beq	r2,zero,3574c <tcp_input+0x22b4>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
   3571c:	e0bff217 	ldw	r2,-56(fp)
   35720:	10c00717 	ldw	r3,28(r2)
   35724:	00800104 	movi	r2,4
   35728:	d8800015 	stw	r2,0(sp)
   3572c:	e0bffe17 	ldw	r2,-8(fp)
   35730:	d8800115 	stw	r2,4(sp)
   35734:	e13fe617 	ldw	r4,-104(fp)
   35738:	e17ff217 	ldw	r5,-56(fp)
   3573c:	000d883a 	mov	r6,zero
   35740:	180f883a 	mov	r7,r3
   35744:	003714c0 	call	3714c <tcp_respond>
   35748:	00001306 	br	35798 <tcp_input+0x2300>
   else
   {
      if (tiflags & TH_SYN)
   3574c:	e0bfe717 	ldw	r2,-100(fp)
   35750:	1080008c 	andi	r2,r2,2
   35754:	10000526 	beq	r2,zero,3576c <tcp_input+0x22d4>
         ti->ti_seq++;
   35758:	e0bff217 	ldw	r2,-56(fp)
   3575c:	10800617 	ldw	r2,24(r2)
   35760:	10c00044 	addi	r3,r2,1
   35764:	e0bff217 	ldw	r2,-56(fp)
   35768:	10c00615 	stw	r3,24(r2)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
   3576c:	e0bff217 	ldw	r2,-56(fp)
   35770:	10c00617 	ldw	r3,24(r2)
   35774:	00800504 	movi	r2,20
   35778:	d8800015 	stw	r2,0(sp)
   3577c:	e0bffe17 	ldw	r2,-8(fp)
   35780:	d8800115 	stw	r2,4(sp)
   35784:	e13fe617 	ldw	r4,-104(fp)
   35788:	e17ff217 	ldw	r5,-56(fp)
   3578c:	180d883a 	mov	r6,r3
   35790:	000f883a 	mov	r7,zero
   35794:	003714c0 	call	3714c <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
   35798:	e0bfec17 	ldw	r2,-80(fp)
   3579c:	10000326 	beq	r2,zero,357ac <tcp_input+0x2314>
      (void) soabort(so);
   357a0:	e13fe817 	ldw	r4,-96(fp)
   357a4:	002fc2c0 	call	2fc2c <soabort>
   return;
   357a8:	00000c06 	br	357dc <tcp_input+0x2344>
   357ac:	00000b06 	br	357dc <tcp_input+0x2344>

drop:
   if (om)
   357b0:	e0bfe517 	ldw	r2,-108(fp)
   357b4:	10000226 	beq	r2,zero,357c0 <tcp_input+0x2328>
      (void) m_free(om);
   357b8:	e13fe517 	ldw	r4,-108(fp)
   357bc:	002c0940 	call	2c094 <m_free>
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
   357c0:	e13ffe17 	ldw	r4,-8(fp)
   357c4:	002c1a40 	call	2c1a4 <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
   357c8:	e0bfec17 	ldw	r2,-80(fp)
   357cc:	10000226 	beq	r2,zero,357d8 <tcp_input+0x2340>
      (void) soabort(so);
   357d0:	e13fe817 	ldw	r4,-96(fp)
   357d4:	002fc2c0 	call	2fc2c <soabort>
   return;
   357d8:	0001883a 	nop
}
   357dc:	e037883a 	mov	sp,fp
   357e0:	dfc00117 	ldw	ra,4(sp)
   357e4:	df000017 	ldw	fp,0(sp)
   357e8:	dec00204 	addi	sp,sp,8
   357ec:	f800283a 	ret

000357f0 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
   357f0:	defff504 	addi	sp,sp,-44
   357f4:	dfc00a15 	stw	ra,40(sp)
   357f8:	df000915 	stw	fp,36(sp)
   357fc:	df000904 	addi	fp,sp,36
   35800:	e13ffd15 	stw	r4,-12(fp)
   35804:	e17ffe15 	stw	r5,-8(fp)
   35808:	e1bfff15 	stw	r6,-4(fp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
   3580c:	e0bffd17 	ldw	r2,-12(fp)
   35810:	10800d17 	ldw	r2,52(r2)
   35814:	10800817 	ldw	r2,32(r2)
   35818:	e0bffa15 	stw	r2,-24(fp)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   3581c:	e0bffe17 	ldw	r2,-8(fp)
   35820:	10800317 	ldw	r2,12(r2)
   35824:	e0bff715 	stw	r2,-36(fp)
   cnt = om->m_len;
   35828:	e0bffe17 	ldw	r2,-8(fp)
   3582c:	10800217 	ldw	r2,8(r2)
   35830:	e0bff915 	stw	r2,-28(fp)
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
   35834:	00004106 	br	3593c <tcp_dooptions+0x14c>
   {
      opt = cp[0];
   35838:	e0bff717 	ldw	r2,-36(fp)
   3583c:	10800003 	ldbu	r2,0(r2)
   35840:	10803fcc 	andi	r2,r2,255
   35844:	e0bffb15 	stw	r2,-20(fp)
      if (opt == TCPOPT_EOL)
   35848:	e0bffb17 	ldw	r2,-20(fp)
   3584c:	1000011e 	bne	r2,zero,35854 <tcp_dooptions+0x64>
         break;
   35850:	00003c06 	br	35944 <tcp_dooptions+0x154>
      if (opt == TCPOPT_NOP)
   35854:	e0bffb17 	ldw	r2,-20(fp)
   35858:	10800058 	cmpnei	r2,r2,1
   3585c:	1000031e 	bne	r2,zero,3586c <tcp_dooptions+0x7c>
         optlen = 1;
   35860:	00800044 	movi	r2,1
   35864:	e0bff815 	stw	r2,-32(fp)
   35868:	00000806 	br	3588c <tcp_dooptions+0x9c>
      else 
      {
         optlen = cp[1];
   3586c:	e0bff717 	ldw	r2,-36(fp)
   35870:	10800044 	addi	r2,r2,1
   35874:	10800003 	ldbu	r2,0(r2)
   35878:	10803fcc 	andi	r2,r2,255
   3587c:	e0bff815 	stw	r2,-32(fp)
         if (optlen <= 0)
   35880:	e0bff817 	ldw	r2,-32(fp)
   35884:	00800116 	blt	zero,r2,3588c <tcp_dooptions+0x9c>
            break;
   35888:	00002e06 	br	35944 <tcp_dooptions+0x154>
      }

      switch (opt) 
   3588c:	e0bffb17 	ldw	r2,-20(fp)
   35890:	108000a0 	cmpeqi	r2,r2,2
   35894:	1000011e 	bne	r2,zero,3589c <tcp_dooptions+0xac>
         }
         break;
#endif   /* TCP_TIMESTAMP */

      default:
         break;
   35898:	00002006 	br	3591c <tcp_dooptions+0x12c>
      switch (opt) 
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
   3589c:	e0bff817 	ldw	r2,-32(fp)
   358a0:	10800120 	cmpeqi	r2,r2,4
   358a4:	1000011e 	bne	r2,zero,358ac <tcp_dooptions+0xbc>
            continue;
   358a8:	00001c06 	br	3591c <tcp_dooptions+0x12c>
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
   358ac:	e0bfff17 	ldw	r2,-4(fp)
   358b0:	10800843 	ldbu	r2,33(r2)
   358b4:	10803fcc 	andi	r2,r2,255
   358b8:	1080008c 	andi	r2,r2,2
   358bc:	1000011e 	bne	r2,zero,358c4 <tcp_dooptions+0xd4>
            continue;
   358c0:	00001606 	br	3591c <tcp_dooptions+0x12c>
         mssval = *(u_short *)(cp + 2);
   358c4:	e0bff717 	ldw	r2,-36(fp)
   358c8:	1080008b 	ldhu	r2,2(r2)
   358cc:	e0bffc0d 	sth	r2,-16(fp)
         mssval = ntohs(mssval);
   358d0:	e0bffc0b 	ldhu	r2,-16(fp)
   358d4:	1004d23a 	srli	r2,r2,8
   358d8:	1007883a 	mov	r3,r2
   358dc:	e0bffc0b 	ldhu	r2,-16(fp)
   358e0:	1004923a 	slli	r2,r2,8
   358e4:	1884b03a 	or	r2,r3,r2
   358e8:	e0bffc0d 	sth	r2,-16(fp)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
   358ec:	e13ffa17 	ldw	r4,-24(fp)
   358f0:	0035d280 	call	35d28 <tcp_mss>
   358f4:	10ffffcc 	andi	r3,r2,65535
   358f8:	e0bffc0b 	ldhu	r2,-16(fp)
   358fc:	1880032e 	bgeu	r3,r2,3590c <tcp_dooptions+0x11c>
   35900:	e13ffa17 	ldw	r4,-24(fp)
   35904:	0035d280 	call	35d28 <tcp_mss>
   35908:	00000106 	br	35910 <tcp_dooptions+0x120>
   3590c:	e0bffc0b 	ldhu	r2,-16(fp)
   35910:	e0fffd17 	ldw	r3,-12(fp)
   35914:	18800a0d 	sth	r2,40(r3)
         break;
   35918:	0001883a 	nop
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
   3591c:	e0fff917 	ldw	r3,-28(fp)
   35920:	e0bff817 	ldw	r2,-32(fp)
   35924:	1885c83a 	sub	r2,r3,r2
   35928:	e0bff915 	stw	r2,-28(fp)
   3592c:	e0bff817 	ldw	r2,-32(fp)
   35930:	e0fff717 	ldw	r3,-36(fp)
   35934:	1885883a 	add	r2,r3,r2
   35938:	e0bff715 	stw	r2,-36(fp)
   3593c:	e0bff917 	ldw	r2,-28(fp)
   35940:	00bfbd16 	blt	zero,r2,35838 <__alt_mem_descriptor_memory+0xdeff5838>

      default:
         break;
      }
   }
   (void) m_free(om);
   35944:	e13ffe17 	ldw	r4,-8(fp)
   35948:	002c0940 	call	2c094 <m_free>
      if(!gotstamp)
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
   3594c:	0001883a 	nop
}
   35950:	e037883a 	mov	sp,fp
   35954:	dfc00117 	ldw	ra,4(sp)
   35958:	df000017 	ldw	fp,0(sp)
   3595c:	dec00204 	addi	sp,sp,8
   35960:	f800283a 	ret

00035964 <tcp_pulloutofband>:

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
   35964:	defff804 	addi	sp,sp,-32
   35968:	dfc00715 	stw	ra,28(sp)
   3596c:	df000615 	stw	fp,24(sp)
   35970:	df000604 	addi	fp,sp,24
   35974:	e13ffd15 	stw	r4,-12(fp)
   35978:	e17ffe15 	stw	r5,-8(fp)
   3597c:	e1bfff15 	stw	r6,-4(fp)
   int   cnt   =  ti->ti_urp  -  1;
   35980:	e0bffe17 	ldw	r2,-8(fp)
   35984:	1080098b 	ldhu	r2,38(r2)
   35988:	10bfffcc 	andi	r2,r2,65535
   3598c:	10bfffc4 	addi	r2,r2,-1
   35990:	e0bffa15 	stw	r2,-24(fp)

   /**m = dtom(ti);**/
   while (cnt >= 0) 
   35994:	00003206 	br	35a60 <tcp_pulloutofband+0xfc>
   {
      if (m->m_len > (unsigned)cnt) 
   35998:	e0bfff17 	ldw	r2,-4(fp)
   3599c:	10800217 	ldw	r2,8(r2)
   359a0:	e0fffa17 	ldw	r3,-24(fp)
   359a4:	1880232e 	bgeu	r3,r2,35a34 <tcp_pulloutofband+0xd0>
      {
         char *   cp =  mtod(m,  char *) +  cnt;
   359a8:	e0bfff17 	ldw	r2,-4(fp)
   359ac:	10c00317 	ldw	r3,12(r2)
   359b0:	e0bffa17 	ldw	r2,-24(fp)
   359b4:	1885883a 	add	r2,r3,r2
   359b8:	e0bffb15 	stw	r2,-20(fp)
         struct tcpcb * tp =  sototcpcb(so);
   359bc:	e0bffd17 	ldw	r2,-12(fp)
   359c0:	10800117 	ldw	r2,4(r2)
   359c4:	10800917 	ldw	r2,36(r2)
   359c8:	e0bffc15 	stw	r2,-16(fp)

         tp->t_iobc = *cp;
   359cc:	e0bffb17 	ldw	r2,-20(fp)
   359d0:	10c00003 	ldbu	r3,0(r2)
   359d4:	e0bffc17 	ldw	r2,-16(fp)
   359d8:	10c02445 	stb	r3,145(r2)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
   359dc:	e0bffc17 	ldw	r2,-16(fp)
   359e0:	10802403 	ldbu	r2,144(r2)
   359e4:	10800054 	ori	r2,r2,1
   359e8:	1007883a 	mov	r3,r2
   359ec:	e0bffc17 	ldw	r2,-16(fp)
   359f0:	10c02405 	stb	r3,144(r2)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
   359f4:	e0bffb17 	ldw	r2,-20(fp)
   359f8:	11400044 	addi	r5,r2,1
   359fc:	e0bfff17 	ldw	r2,-4(fp)
   35a00:	10c00217 	ldw	r3,8(r2)
   35a04:	e0bffa17 	ldw	r2,-24(fp)
   35a08:	1885c83a 	sub	r2,r3,r2
   35a0c:	10bfffc4 	addi	r2,r2,-1
   35a10:	e13ffb17 	ldw	r4,-20(fp)
   35a14:	100d883a 	mov	r6,r2
   35a18:	0007c900 	call	7c90 <memcpy>
         m->m_len--;
   35a1c:	e0bfff17 	ldw	r2,-4(fp)
   35a20:	10800217 	ldw	r2,8(r2)
   35a24:	10ffffc4 	addi	r3,r2,-1
   35a28:	e0bfff17 	ldw	r2,-4(fp)
   35a2c:	10c00215 	stw	r3,8(r2)
         return;
   35a30:	00001006 	br	35a74 <tcp_pulloutofband+0x110>
      }
      cnt -= m->m_len;
   35a34:	e0fffa17 	ldw	r3,-24(fp)
   35a38:	e0bfff17 	ldw	r2,-4(fp)
   35a3c:	10800217 	ldw	r2,8(r2)
   35a40:	1885c83a 	sub	r2,r3,r2
   35a44:	e0bffa15 	stw	r2,-24(fp)
      m = m->m_next;
   35a48:	e0bfff17 	ldw	r2,-4(fp)
   35a4c:	10800617 	ldw	r2,24(r2)
   35a50:	e0bfff15 	stw	r2,-4(fp)
      if (m == 0)
   35a54:	e0bfff17 	ldw	r2,-4(fp)
   35a58:	1000011e 	bne	r2,zero,35a60 <tcp_pulloutofband+0xfc>
         break;
   35a5c:	00000206 	br	35a68 <tcp_pulloutofband+0x104>
   struct mbuf *  m)
{
   int   cnt   =  ti->ti_urp  -  1;

   /**m = dtom(ti);**/
   while (cnt >= 0) 
   35a60:	e0bffa17 	ldw	r2,-24(fp)
   35a64:	103fcc0e 	bge	r2,zero,35998 <__alt_mem_descriptor_memory+0xdeff5998>
      cnt -= m->m_len;
      m = m->m_next;
      if (m == 0)
         break;
   }
   panic("tcp_pulloutofband");
   35a68:	01000174 	movhi	r4,5
   35a6c:	213b7904 	addi	r4,r4,-4636
   35a70:	00267380 	call	26738 <panic>
}
   35a74:	e037883a 	mov	sp,fp
   35a78:	dfc00117 	ldw	ra,4(sp)
   35a7c:	df000017 	ldw	fp,0(sp)
   35a80:	dec00204 	addi	sp,sp,8
   35a84:	f800283a 	ret

00035a88 <tcp_xmit_timer>:
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
   35a88:	defffb04 	addi	sp,sp,-20
   35a8c:	dfc00415 	stw	ra,16(sp)
   35a90:	df000315 	stw	fp,12(sp)
   35a94:	df000304 	addi	fp,sp,12
   35a98:	e13fff15 	stw	r4,-4(fp)
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
   35a9c:	e0bfff17 	ldw	r2,-4(fp)
   35aa0:	10801e17 	ldw	r2,120(r2)
   35aa4:	1000021e 	bne	r2,zero,35ab0 <tcp_xmit_timer+0x28>
   35aa8:	002b0f40 	call	2b0f4 <dtrap>
   35aac:	00008606 	br	35cc8 <tcp_xmit_timer+0x240>
#endif

   tcpstat.tcps_rttupdated++;
   35ab0:	008001b4 	movhi	r2,6
   35ab4:	10b90b04 	addi	r2,r2,-7124
   35ab8:	10800717 	ldw	r2,28(r2)
   35abc:	10c00044 	addi	r3,r2,1
   35ac0:	008001b4 	movhi	r2,6
   35ac4:	10b90b04 	addi	r2,r2,-7124
   35ac8:	10c00715 	stw	r3,28(r2)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
   35acc:	00800174 	movhi	r2,5
   35ad0:	108fbe04 	addi	r2,r2,16120
   35ad4:	10c00017 	ldw	r3,0(r2)
   35ad8:	e0bfff17 	ldw	r2,-4(fp)
   35adc:	10801e17 	ldw	r2,120(r2)
   35ae0:	1885c83a 	sub	r2,r3,r2
   35ae4:	1009883a 	mov	r4,r2
   35ae8:	01400c84 	movi	r5,50
   35aec:	00152500 	call	15250 <__udivsi3>
   35af0:	e0bffe15 	stw	r2,-8(fp)
   if(tp->t_srtt != 0)
   35af4:	e0bfff17 	ldw	r2,-4(fp)
   35af8:	10802017 	ldw	r2,128(r2)
   35afc:	10004626 	beq	r2,zero,35c18 <tcp_xmit_timer+0x190>
   {
      if(rtt == 0)      /* fast path for small round trip */
   35b00:	e0bffe17 	ldw	r2,-8(fp)
   35b04:	1000131e 	bne	r2,zero,35b54 <tcp_xmit_timer+0xcc>
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
   35b08:	e0bfff17 	ldw	r2,-4(fp)
   35b0c:	10802017 	ldw	r2,128(r2)
   35b10:	10800090 	cmplti	r2,r2,2
   35b14:	1000051e 	bne	r2,zero,35b2c <tcp_xmit_timer+0xa4>
            tp->t_srtt--;
   35b18:	e0bfff17 	ldw	r2,-4(fp)
   35b1c:	10802017 	ldw	r2,128(r2)
   35b20:	10ffffc4 	addi	r3,r2,-1
   35b24:	e0bfff17 	ldw	r2,-4(fp)
   35b28:	10c02015 	stw	r3,128(r2)
         if(tp->t_rttvar > 1)
   35b2c:	e0bfff17 	ldw	r2,-4(fp)
   35b30:	10802117 	ldw	r2,132(r2)
   35b34:	10800090 	cmplti	r2,r2,2
   35b38:	1000441e 	bne	r2,zero,35c4c <tcp_xmit_timer+0x1c4>
            tp->t_rttvar--;
   35b3c:	e0bfff17 	ldw	r2,-4(fp)
   35b40:	10802117 	ldw	r2,132(r2)
   35b44:	10ffffc4 	addi	r3,r2,-1
   35b48:	e0bfff17 	ldw	r2,-4(fp)
   35b4c:	10c02115 	stw	r3,132(r2)
   35b50:	00003e06 	br	35c4c <tcp_xmit_timer+0x1c4>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
   35b54:	e0bffe17 	ldw	r2,-8(fp)
   35b58:	10bfffc4 	addi	r2,r2,-1
   35b5c:	1085883a 	add	r2,r2,r2
   35b60:	1085883a 	add	r2,r2,r2
   35b64:	1007883a 	mov	r3,r2
   35b68:	e0bfff17 	ldw	r2,-4(fp)
   35b6c:	10802017 	ldw	r2,128(r2)
   35b70:	1005d0fa 	srai	r2,r2,3
   35b74:	1885c83a 	sub	r2,r3,r2
   35b78:	e0bffd15 	stw	r2,-12(fp)
      if ((tp->t_srtt += delta) <= 0)
   35b7c:	e0bfff17 	ldw	r2,-4(fp)
   35b80:	10c02017 	ldw	r3,128(r2)
   35b84:	e0bffd17 	ldw	r2,-12(fp)
   35b88:	1887883a 	add	r3,r3,r2
   35b8c:	e0bfff17 	ldw	r2,-4(fp)
   35b90:	10c02015 	stw	r3,128(r2)
   35b94:	e0bfff17 	ldw	r2,-4(fp)
   35b98:	10802017 	ldw	r2,128(r2)
   35b9c:	00800316 	blt	zero,r2,35bac <tcp_xmit_timer+0x124>
         tp->t_srtt = 1;
   35ba0:	e0bfff17 	ldw	r2,-4(fp)
   35ba4:	00c00044 	movi	r3,1
   35ba8:	10c02015 	stw	r3,128(r2)
       * (scaled by 4).  The following is equivalent
       * to rfc793 smoothing with an alpha of .75
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
   35bac:	e0bffd17 	ldw	r2,-12(fp)
   35bb0:	1000030e 	bge	r2,zero,35bc0 <tcp_xmit_timer+0x138>
         delta = -delta;
   35bb4:	e0bffd17 	ldw	r2,-12(fp)
   35bb8:	0085c83a 	sub	r2,zero,r2
   35bbc:	e0bffd15 	stw	r2,-12(fp)
      delta -= (short)(tp->t_rttvar >> 1);
   35bc0:	e0bfff17 	ldw	r2,-4(fp)
   35bc4:	10802117 	ldw	r2,132(r2)
   35bc8:	1005d07a 	srai	r2,r2,1
   35bcc:	10bfffcc 	andi	r2,r2,65535
   35bd0:	10a0001c 	xori	r2,r2,32768
   35bd4:	10a00004 	addi	r2,r2,-32768
   35bd8:	e0fffd17 	ldw	r3,-12(fp)
   35bdc:	1885c83a 	sub	r2,r3,r2
   35be0:	e0bffd15 	stw	r2,-12(fp)
      if ((tp->t_rttvar += delta) <= 0)
   35be4:	e0bfff17 	ldw	r2,-4(fp)
   35be8:	10c02117 	ldw	r3,132(r2)
   35bec:	e0bffd17 	ldw	r2,-12(fp)
   35bf0:	1887883a 	add	r3,r3,r2
   35bf4:	e0bfff17 	ldw	r2,-4(fp)
   35bf8:	10c02115 	stw	r3,132(r2)
   35bfc:	e0bfff17 	ldw	r2,-4(fp)
   35c00:	10802117 	ldw	r2,132(r2)
   35c04:	00801116 	blt	zero,r2,35c4c <tcp_xmit_timer+0x1c4>
         tp->t_rttvar = 1;
   35c08:	e0bfff17 	ldw	r2,-4(fp)
   35c0c:	00c00044 	movi	r3,1
   35c10:	10c02115 	stw	r3,132(r2)
   35c14:	00000d06 	br	35c4c <tcp_xmit_timer+0x1c4>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
   35c18:	e0bffe17 	ldw	r2,-8(fp)
   35c1c:	00800216 	blt	zero,r2,35c28 <tcp_xmit_timer+0x1a0>
         rtt = 1;
   35c20:	00800044 	movi	r2,1
   35c24:	e0bffe15 	stw	r2,-8(fp)
      tp->t_srtt = rtt << 3;
   35c28:	e0bffe17 	ldw	r2,-8(fp)
   35c2c:	100690fa 	slli	r3,r2,3
   35c30:	e0bfff17 	ldw	r2,-4(fp)
   35c34:	10c02015 	stw	r3,128(r2)
      tp->t_rttvar = rtt << 1;
   35c38:	e0bffe17 	ldw	r2,-8(fp)
   35c3c:	1085883a 	add	r2,r2,r2
   35c40:	1007883a 	mov	r3,r2
   35c44:	e0bfff17 	ldw	r2,-4(fp)
   35c48:	10c02115 	stw	r3,132(r2)
   }
   tp->t_rttick = 0;       /* clear RT timer */
   35c4c:	e0bfff17 	ldw	r2,-4(fp)
   35c50:	10001e15 	stw	zero,120(r2)
   tp->t_rxtshift = 0;
   35c54:	e0bfff17 	ldw	r2,-4(fp)
   35c58:	10000715 	stw	zero,28(r2)
   TCPT_RANGESET(tp->t_rxtcur, 
   35c5c:	e0bfff17 	ldw	r2,-4(fp)
   35c60:	10802017 	ldw	r2,128(r2)
   35c64:	1007d0ba 	srai	r3,r2,2
   35c68:	e0bfff17 	ldw	r2,-4(fp)
   35c6c:	10802117 	ldw	r2,132(r2)
   35c70:	1885883a 	add	r2,r3,r2
   35c74:	1005d07a 	srai	r2,r2,1
   35c78:	10ffffcc 	andi	r3,r2,65535
   35c7c:	18e0001c 	xori	r3,r3,32768
   35c80:	18e00004 	addi	r3,r3,-32768
   35c84:	e0bfff17 	ldw	r2,-4(fp)
   35c88:	10c00815 	stw	r3,32(r2)
   35c8c:	e0bfff17 	ldw	r2,-4(fp)
   35c90:	10800817 	ldw	r2,32(r2)
   35c94:	10800088 	cmpgei	r2,r2,2
   35c98:	1000041e 	bne	r2,zero,35cac <tcp_xmit_timer+0x224>
   35c9c:	e0bfff17 	ldw	r2,-4(fp)
   35ca0:	00c00084 	movi	r3,2
   35ca4:	10c00815 	stw	r3,32(r2)
   35ca8:	00000706 	br	35cc8 <tcp_xmit_timer+0x240>
   35cac:	e0bfff17 	ldw	r2,-4(fp)
   35cb0:	10800817 	ldw	r2,32(r2)
   35cb4:	10802050 	cmplti	r2,r2,129
   35cb8:	1000031e 	bne	r2,zero,35cc8 <tcp_xmit_timer+0x240>
   35cbc:	e0bfff17 	ldw	r2,-4(fp)
   35cc0:	00c02004 	movi	r3,128
   35cc4:	10c00815 	stw	r3,32(r2)
    ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1,
    TCPTV_MIN, TCPTV_REXMTMAX);
}
   35cc8:	e037883a 	mov	sp,fp
   35ccc:	dfc00117 	ldw	ra,4(sp)
   35cd0:	df000017 	ldw	fp,0(sp)
   35cd4:	dec00204 	addi	sp,sp,8
   35cd8:	f800283a 	ret

00035cdc <ip4_tcpmss>:


#ifdef IP_V4
int
ip4_tcpmss(struct socket * so)
{
   35cdc:	defffd04 	addi	sp,sp,-12
   35ce0:	df000215 	stw	fp,8(sp)
   35ce4:	df000204 	addi	fp,sp,8
   35ce8:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = so->so_pcb->ifp;
   35cec:	e0bfff17 	ldw	r2,-4(fp)
   35cf0:	10800117 	ldw	r2,4(r2)
   35cf4:	10800a17 	ldw	r2,40(r2)
   35cf8:	e0bffe15 	stw	r2,-8(fp)
   return(ifp->n_mtu - (40 + ifp->n_lnh));
   35cfc:	e0bffe17 	ldw	r2,-8(fp)
   35d00:	10c00917 	ldw	r3,36(r2)
   35d04:	e0bffe17 	ldw	r2,-8(fp)
   35d08:	10800817 	ldw	r2,32(r2)
   35d0c:	013ff604 	movi	r4,-40
   35d10:	2085c83a 	sub	r2,r4,r2
   35d14:	1885883a 	add	r2,r3,r2
}
   35d18:	e037883a 	mov	sp,fp
   35d1c:	df000017 	ldw	fp,0(sp)
   35d20:	dec00104 	addi	sp,sp,4
   35d24:	f800283a 	ret

00035d28 <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
   35d28:	defffa04 	addi	sp,sp,-24
   35d2c:	dfc00515 	stw	ra,20(sp)
   35d30:	df000415 	stw	fp,16(sp)
   35d34:	df000404 	addi	fp,sp,16
   35d38:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
   35d3c:	e0bfff17 	ldw	r2,-4(fp)
   35d40:	10000726 	beq	r2,zero,35d60 <tcp_mss+0x38>
       (so->so_pcb == NULL) ||
   35d44:	e0bfff17 	ldw	r2,-4(fp)
   35d48:	10800117 	ldw	r2,4(r2)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
   35d4c:	10000426 	beq	r2,zero,35d60 <tcp_mss+0x38>
       (so->so_pcb == NULL) ||
       (so->so_pcb->ifp == NULL))
   35d50:	e0bfff17 	ldw	r2,-4(fp)
   35d54:	10800117 	ldw	r2,4(r2)
   35d58:	10800a17 	ldw	r2,40(r2)
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
       (so->so_pcb == NULL) ||
   35d5c:	1000061e 	bne	r2,zero,35d78 <tcp_mss+0x50>
       (so->so_pcb->ifp == NULL))
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
   35d60:	e0bfff17 	ldw	r2,-4(fp)
   35d64:	10800517 	ldw	r2,20(r2)
   35d68:	10800098 	cmpnei	r2,r2,2
   35d6c:	1000021e 	bne	r2,zero,35d78 <tcp_mss+0x50>
         return TCP_MSS;            /* user defined */
   35d70:	00816d04 	movi	r2,1460
   35d74:	00002506 	br	35e0c <tcp_mss+0xe4>
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
   35d78:	e13fff17 	ldw	r4,-4(fp)
   35d7c:	0035cdc0 	call	35cdc <ip4_tcpmss>
   35d80:	e0bffc15 	stw	r2,-16(fp)
#endif         /* end of dual mode */
#else          /* no IP_v4, assume V6 only */
      mss = ip6_tcpmss(so, ifp);
#endif         /* end messy domain defines */

   if (mss > TCP_MSS)    /* check upper limit from compile */
   35d84:	e0bffc17 	ldw	r2,-16(fp)
   35d88:	10816d50 	cmplti	r2,r2,1461
   35d8c:	1000021e 	bne	r2,zero,35d98 <tcp_mss+0x70>
      mss = TCP_MSS;
   35d90:	00816d04 	movi	r2,1460
   35d94:	e0bffc15 	stw	r2,-16(fp)

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
   35d98:	e0bfff17 	ldw	r2,-4(fp)
   35d9c:	10800117 	ldw	r2,4(r2)
   35da0:	e0bffd15 	stw	r2,-12(fp)
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
   35da4:	e0bffd17 	ldw	r2,-12(fp)
   35da8:	10800917 	ldw	r2,36(r2)
   35dac:	e0bffe15 	stw	r2,-8(fp)
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
   35db0:	e0bffe17 	ldw	r2,-8(fp)
   35db4:	10800b0b 	ldhu	r2,44(r2)
   35db8:	10bfffcc 	andi	r2,r2,65535
   35dbc:	1081000c 	andi	r2,r2,1024
   35dc0:	10000426 	beq	r2,zero,35dd4 <tcp_mss+0xac>
      return tp->t_maxseg;    /* yup */
   35dc4:	e0bffe17 	ldw	r2,-8(fp)
   35dc8:	10800a0b 	ldhu	r2,40(r2)
   35dcc:	10bfffcc 	andi	r2,r2,65535
   35dd0:	00000e06 	br	35e0c <tcp_mss+0xe4>
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
   35dd4:	e0bffe17 	ldw	r2,-8(fp)
   35dd8:	10800a0b 	ldhu	r2,40(r2)
   35ddc:	10bfffcc 	andi	r2,r2,65535
   35de0:	10000926 	beq	r2,zero,35e08 <tcp_mss+0xe0>
   35de4:	e0bffe17 	ldw	r2,-8(fp)
   35de8:	10800a0b 	ldhu	r2,40(r2)
   35dec:	10ffffcc 	andi	r3,r2,65535
   35df0:	e0bffc17 	ldw	r2,-16(fp)
   35df4:	1880040e 	bge	r3,r2,35e08 <tcp_mss+0xe0>
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
   35df8:	e0bffe17 	ldw	r2,-8(fp)
   35dfc:	10800a0b 	ldhu	r2,40(r2)
   35e00:	10bfffcc 	andi	r2,r2,65535
   35e04:	e0bffc15 	stw	r2,-16(fp)
   }

   return mss;
   35e08:	e0bffc17 	ldw	r2,-16(fp)
}
   35e0c:	e037883a 	mov	sp,fp
   35e10:	dfc00117 	ldw	ra,4(sp)
   35e14:	df000017 	ldw	fp,0(sp)
   35e18:	dec00204 	addi	sp,sp,8
   35e1c:	f800283a 	ret

00035e20 <tcp_output>:
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
   35e20:	deffe804 	addi	sp,sp,-96
   35e24:	dfc01715 	stw	ra,92(sp)
   35e28:	df001615 	stw	fp,88(sp)
   35e2c:	df001604 	addi	fp,sp,88
   35e30:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
   35e34:	e0bfff17 	ldw	r2,-4(fp)
   35e38:	10800d17 	ldw	r2,52(r2)
   35e3c:	10800817 	ldw	r2,32(r2)
   35e40:	e0bff215 	stw	r2,-56(fp)
   int   len;
   long  win;
   int   off,  flags,   error;
   struct mbuf *  m;
   struct tcpiphdr * ti;
   unsigned optlen = 0;
   35e44:	e03fee15 	stw	zero,-72(fp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
   35e48:	e0bfff17 	ldw	r2,-4(fp)
   35e4c:	10c01a17 	ldw	r3,104(r2)
   35e50:	e0bfff17 	ldw	r2,-4(fp)
   35e54:	10800e17 	ldw	r2,56(r2)
   35e58:	1885003a 	cmpeq	r2,r3,r2
   35e5c:	10803fcc 	andi	r2,r2,255
   35e60:	e0bff315 	stw	r2,-52(fp)

again:
   sendalot = 0;
   35e64:	e03fef15 	stw	zero,-68(fp)
   off = (int)(tp->snd_nxt - tp->snd_una);
   35e68:	e0bfff17 	ldw	r2,-4(fp)
   35e6c:	10c00f17 	ldw	r3,60(r2)
   35e70:	e0bfff17 	ldw	r2,-4(fp)
   35e74:	10800e17 	ldw	r2,56(r2)
   35e78:	1885c83a 	sub	r2,r3,r2
   35e7c:	e0bff415 	stw	r2,-48(fp)
   win = (long)tp->snd_wnd;   /* set basic send window */
   35e80:	e0bfff17 	ldw	r2,-4(fp)
   35e84:	10801417 	ldw	r2,80(r2)
   35e88:	e0bfeb15 	stw	r2,-84(fp)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
   35e8c:	e0bfff17 	ldw	r2,-4(fp)
   35e90:	10801b17 	ldw	r2,108(r2)
   35e94:	1007883a 	mov	r3,r2
   35e98:	e0bfeb17 	ldw	r2,-84(fp)
   35e9c:	1880060e 	bge	r3,r2,35eb8 <tcp_output+0x98>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
   35ea0:	e0bfff17 	ldw	r2,-4(fp)
   35ea4:	10801b17 	ldw	r2,108(r2)
   35ea8:	1007883a 	mov	r3,r2
   35eac:	00bfff04 	movi	r2,-4
   35eb0:	1884703a 	and	r2,r3,r2
   35eb4:	e0bfeb15 	stw	r2,-84(fp)
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
   35eb8:	e0bfff17 	ldw	r2,-4(fp)
   35ebc:	10800a83 	ldbu	r2,42(r2)
   35ec0:	10803fcc 	andi	r2,r2,255
   35ec4:	1080201c 	xori	r2,r2,128
   35ec8:	10bfe004 	addi	r2,r2,-128
   35ecc:	10000926 	beq	r2,zero,35ef4 <tcp_output+0xd4>
   {
      if (win == 0)
   35ed0:	e0bfeb17 	ldw	r2,-84(fp)
   35ed4:	1000031e 	bne	r2,zero,35ee4 <tcp_output+0xc4>
         win = 1;
   35ed8:	00800044 	movi	r2,1
   35edc:	e0bfeb15 	stw	r2,-84(fp)
   35ee0:	00000406 	br	35ef4 <tcp_output+0xd4>
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
   35ee4:	e0bfff17 	ldw	r2,-4(fp)
   35ee8:	10000415 	stw	zero,16(r2)
         tp->t_rxtshift = 0;
   35eec:	e0bfff17 	ldw	r2,-4(fp)
   35ef0:	10000715 	stw	zero,28(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
   35ef4:	e0bff217 	ldw	r2,-56(fp)
   35ef8:	10801217 	ldw	r2,72(r2)
   35efc:	e0ffeb17 	ldw	r3,-84(fp)
   35f00:	1880012e 	bgeu	r3,r2,35f08 <tcp_output+0xe8>
   35f04:	1805883a 	mov	r2,r3
   35f08:	1007883a 	mov	r3,r2
   35f0c:	e0bff417 	ldw	r2,-48(fp)
   35f10:	1885c83a 	sub	r2,r3,r2
   35f14:	e0bfea15 	stw	r2,-88(fp)
   }

   flags = tcp_outflags[tp->t_state];
   35f18:	e0bfff17 	ldw	r2,-4(fp)
   35f1c:	10c00217 	ldw	r3,8(r2)
   35f20:	00800174 	movhi	r2,5
   35f24:	10865604 	addi	r2,r2,6488
   35f28:	10c5883a 	add	r2,r2,r3
   35f2c:	10800003 	ldbu	r2,0(r2)
   35f30:	10803fcc 	andi	r2,r2,255
   35f34:	e0bfec15 	stw	r2,-80(fp)
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
   35f38:	e0bfec17 	ldw	r2,-80(fp)
   35f3c:	1080008c 	andi	r2,r2,2
   35f40:	10000926 	beq	r2,zero,35f68 <tcp_output+0x148>
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
   35f44:	e0ffee17 	ldw	r3,-72(fp)
   35f48:	d0a89f04 	addi	r2,gp,-23940
   35f4c:	1885883a 	add	r2,r3,r2
   35f50:	e13fff17 	ldw	r4,-4(fp)
   35f54:	100b883a 	mov	r5,r2
   35f58:	e1bfec17 	ldw	r6,-80(fp)
   35f5c:	e1fff217 	ldw	r7,-56(fp)
   35f60:	0036f240 	call	36f24 <bld_options>
   35f64:	e0bfee15 	stw	r2,-72(fp)
   }
#endif

   if (len < 0)
   35f68:	e0bfea17 	ldw	r2,-88(fp)
   35f6c:	1000090e 	bge	r2,zero,35f94 <tcp_output+0x174>
       * cancel pending retransmit and pull snd_nxt
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
   35f70:	e03fea15 	stw	zero,-88(fp)
      if (win == 0) 
   35f74:	e0bfeb17 	ldw	r2,-84(fp)
   35f78:	1000061e 	bne	r2,zero,35f94 <tcp_output+0x174>
      {
         tp->t_timer[TCPT_REXMT] = 0;
   35f7c:	e0bfff17 	ldw	r2,-4(fp)
   35f80:	10000315 	stw	zero,12(r2)
         tp->snd_nxt = tp->snd_una;
   35f84:	e0bfff17 	ldw	r2,-4(fp)
   35f88:	10c00e17 	ldw	r3,56(r2)
   35f8c:	e0bfff17 	ldw	r2,-4(fp)
   35f90:	10c00f15 	stw	r3,60(r2)
      }
   }

   if (len > (int)tp->t_maxseg)
   35f94:	e0bfff17 	ldw	r2,-4(fp)
   35f98:	10800a0b 	ldhu	r2,40(r2)
   35f9c:	10ffffcc 	andi	r3,r2,65535
   35fa0:	e0bfea17 	ldw	r2,-88(fp)
   35fa4:	1880060e 	bge	r3,r2,35fc0 <tcp_output+0x1a0>
   {
      len = tp->t_maxseg;
   35fa8:	e0bfff17 	ldw	r2,-4(fp)
   35fac:	10800a0b 	ldhu	r2,40(r2)
   35fb0:	10bfffcc 	andi	r2,r2,65535
   35fb4:	e0bfea15 	stw	r2,-88(fp)
      sendalot = 1;
   35fb8:	00800044 	movi	r2,1
   35fbc:	e0bfef15 	stw	r2,-68(fp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
   35fc0:	e0bfff17 	ldw	r2,-4(fp)
   35fc4:	10c00f17 	ldw	r3,60(r2)
   35fc8:	e0bfea17 	ldw	r2,-88(fp)
   35fcc:	1887883a 	add	r3,r3,r2
   35fd0:	e0bfff17 	ldw	r2,-4(fp)
   35fd4:	11000e17 	ldw	r4,56(r2)
   35fd8:	e0bff217 	ldw	r2,-56(fp)
   35fdc:	10801217 	ldw	r2,72(r2)
   35fe0:	2085883a 	add	r2,r4,r2
   35fe4:	1885c83a 	sub	r2,r3,r2
   35fe8:	1000040e 	bge	r2,zero,35ffc <tcp_output+0x1dc>
      flags &= ~TH_FIN;
   35fec:	e0ffec17 	ldw	r3,-80(fp)
   35ff0:	00bfff84 	movi	r2,-2
   35ff4:	1884703a 	and	r2,r3,r2
   35ff8:	e0bfec15 	stw	r2,-80(fp)
   win = (long)(sbspace(&so->so_rcv));
   35ffc:	e0bff217 	ldw	r2,-56(fp)
   36000:	10800b17 	ldw	r2,44(r2)
   36004:	1007883a 	mov	r3,r2
   36008:	e0bff217 	ldw	r2,-56(fp)
   3600c:	10800a17 	ldw	r2,40(r2)
   36010:	1885c83a 	sub	r2,r3,r2
   36014:	10000616 	blt	r2,zero,36030 <tcp_output+0x210>
   36018:	e0bff217 	ldw	r2,-56(fp)
   3601c:	10c00b17 	ldw	r3,44(r2)
   36020:	e0bff217 	ldw	r2,-56(fp)
   36024:	10800a17 	ldw	r2,40(r2)
   36028:	1885c83a 	sub	r2,r3,r2
   3602c:	00000106 	br	36034 <tcp_output+0x214>
   36030:	0005883a 	mov	r2,zero
   36034:	e0bfeb15 	stw	r2,-84(fp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
   36038:	e0bfec17 	ldw	r2,-80(fp)
   3603c:	1080004c 	andi	r2,r2,1
   36040:	10000d26 	beq	r2,zero,36078 <tcp_output+0x258>
       (so->so_snd.sb_cc == 0) &&
   36044:	e0bff217 	ldw	r2,-56(fp)
   36048:	10801217 	ldw	r2,72(r2)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
   3604c:	10000a1e 	bne	r2,zero,36078 <tcp_output+0x258>
       (so->so_snd.sb_cc == 0) &&
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
   36050:	e0bfff17 	ldw	r2,-4(fp)
   36054:	10800b0b 	ldhu	r2,44(r2)
   36058:	10bfffcc 	andi	r2,r2,65535
   3605c:	1080040c 	andi	r2,r2,16
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
       (so->so_snd.sb_cc == 0) &&
   36060:	10007026 	beq	r2,zero,36224 <tcp_output+0x404>
       ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
   36064:	e0bfff17 	ldw	r2,-4(fp)
   36068:	10c00f17 	ldw	r3,60(r2)
   3606c:	e0bfff17 	ldw	r2,-4(fp)
   36070:	10800e17 	ldw	r2,56(r2)
   36074:	18806b26 	beq	r3,r2,36224 <tcp_output+0x404>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
   36078:	e0bfff17 	ldw	r2,-4(fp)
   3607c:	10800b0b 	ldhu	r2,44(r2)
   36080:	10bfffcc 	andi	r2,r2,65535
   36084:	1080004c 	andi	r2,r2,1
   36088:	10000126 	beq	r2,zero,36090 <tcp_output+0x270>
      goto send;
   3608c:	00006506 	br	36224 <tcp_output+0x404>
   if (flags & (TH_SYN|TH_RST))
   36090:	e0bfec17 	ldw	r2,-80(fp)
   36094:	1080018c 	andi	r2,r2,6
   36098:	10000126 	beq	r2,zero,360a0 <tcp_output+0x280>
      goto send;
   3609c:	00006106 	br	36224 <tcp_output+0x404>
   if (SEQ_GT(tp->snd_up, tp->snd_una))
   360a0:	e0bfff17 	ldw	r2,-4(fp)
   360a4:	10c01017 	ldw	r3,64(r2)
   360a8:	e0bfff17 	ldw	r2,-4(fp)
   360ac:	10800e17 	ldw	r2,56(r2)
   360b0:	1885c83a 	sub	r2,r3,r2
   360b4:	0080010e 	bge	zero,r2,360bc <tcp_output+0x29c>
      goto send;
   360b8:	00005a06 	br	36224 <tcp_output+0x404>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
   360bc:	e0bfea17 	ldw	r2,-88(fp)
   360c0:	10002926 	beq	r2,zero,36168 <tcp_output+0x348>
   {
      if (len == (int)tp->t_maxseg)
   360c4:	e0bfff17 	ldw	r2,-4(fp)
   360c8:	10800a0b 	ldhu	r2,40(r2)
   360cc:	10ffffcc 	andi	r3,r2,65535
   360d0:	e0bfea17 	ldw	r2,-88(fp)
   360d4:	1880011e 	bne	r3,r2,360dc <tcp_output+0x2bc>
         goto send;
   360d8:	00005206 	br	36224 <tcp_output+0x404>
      if ((idle || tp->t_flags & TF_NODELAY) &&
   360dc:	e0bff317 	ldw	r2,-52(fp)
   360e0:	1000051e 	bne	r2,zero,360f8 <tcp_output+0x2d8>
   360e4:	e0bfff17 	ldw	r2,-4(fp)
   360e8:	10800b0b 	ldhu	r2,44(r2)
   360ec:	10bfffcc 	andi	r2,r2,65535
   360f0:	1080010c 	andi	r2,r2,4
   360f4:	10000726 	beq	r2,zero,36114 <tcp_output+0x2f4>
          len + off >= (int)so->so_snd.sb_cc)
   360f8:	e0ffea17 	ldw	r3,-88(fp)
   360fc:	e0bff417 	ldw	r2,-48(fp)
   36100:	1885883a 	add	r2,r3,r2
   36104:	e0fff217 	ldw	r3,-56(fp)
   36108:	18c01217 	ldw	r3,72(r3)
    */
   if (len)
   {
      if (len == (int)tp->t_maxseg)
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
   3610c:	10c00116 	blt	r2,r3,36114 <tcp_output+0x2f4>
          len + off >= (int)so->so_snd.sb_cc)
      {
         goto send;
   36110:	00004406 	br	36224 <tcp_output+0x404>
      }
      if (tp->t_force)
   36114:	e0bfff17 	ldw	r2,-4(fp)
   36118:	10800a83 	ldbu	r2,42(r2)
   3611c:	10803fcc 	andi	r2,r2,255
   36120:	1080201c 	xori	r2,r2,128
   36124:	10bfe004 	addi	r2,r2,-128
   36128:	10000126 	beq	r2,zero,36130 <tcp_output+0x310>
         goto send;
   3612c:	00003d06 	br	36224 <tcp_output+0x404>
      if (len >= (int)(tp->max_sndwnd / 2))
   36130:	e0bfff17 	ldw	r2,-4(fp)
   36134:	10802317 	ldw	r2,140(r2)
   36138:	1004d07a 	srli	r2,r2,1
   3613c:	1007883a 	mov	r3,r2
   36140:	e0bfea17 	ldw	r2,-88(fp)
   36144:	10c00116 	blt	r2,r3,3614c <tcp_output+0x32c>
         goto send;
   36148:	00003606 	br	36224 <tcp_output+0x404>
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
   3614c:	e0bfff17 	ldw	r2,-4(fp)
   36150:	10c00f17 	ldw	r3,60(r2)
   36154:	e0bfff17 	ldw	r2,-4(fp)
   36158:	10801a17 	ldw	r2,104(r2)
   3615c:	1885c83a 	sub	r2,r3,r2
   36160:	1000010e 	bge	r2,zero,36168 <tcp_output+0x348>
         goto send;
   36164:	00002f06 	br	36224 <tcp_output+0x404>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
   36168:	e0bfeb17 	ldw	r2,-84(fp)
   3616c:	00801e0e 	bge	zero,r2,361e8 <tcp_output+0x3c8>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
   36170:	e0bfff17 	ldw	r2,-4(fp)
   36174:	10c01617 	ldw	r3,88(r2)
   36178:	e0bfff17 	ldw	r2,-4(fp)
   3617c:	10801917 	ldw	r2,100(r2)
   36180:	1885c83a 	sub	r2,r3,r2
   36184:	1007883a 	mov	r3,r2
   36188:	e0bfeb17 	ldw	r2,-84(fp)
   3618c:	1885883a 	add	r2,r3,r2
   36190:	e0bffd15 	stw	r2,-12(fp)

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
   36194:	e0bff217 	ldw	r2,-56(fp)
   36198:	10800a17 	ldw	r2,40(r2)
   3619c:	1000081e 	bne	r2,zero,361c0 <tcp_output+0x3a0>
   361a0:	e0bfff17 	ldw	r2,-4(fp)
   361a4:	10800a0b 	ldhu	r2,40(r2)
   361a8:	10bfffcc 	andi	r2,r2,65535
   361ac:	1085883a 	add	r2,r2,r2
   361b0:	1007883a 	mov	r3,r2
   361b4:	e0bffd17 	ldw	r2,-12(fp)
   361b8:	10c00116 	blt	r2,r3,361c0 <tcp_output+0x3a0>
         goto send;
   361bc:	00001906 	br	36224 <tcp_output+0x404>
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
   361c0:	e0bffd17 	ldw	r2,-12(fp)
   361c4:	10c01924 	muli	r3,r2,100
   361c8:	e0bff217 	ldw	r2,-56(fp)
   361cc:	10800b17 	ldw	r2,44(r2)
   361d0:	1809883a 	mov	r4,r3
   361d4:	100b883a 	mov	r5,r2
   361d8:	00152500 	call	15250 <__udivsi3>
   361dc:	108008f0 	cmpltui	r2,r2,35
   361e0:	1000011e 	bne	r2,zero,361e8 <tcp_output+0x3c8>
         goto send;
   361e4:	00000f06 	br	36224 <tcp_output+0x404>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
   361e8:	e0bff217 	ldw	r2,-56(fp)
   361ec:	10801217 	ldw	r2,72(r2)
   361f0:	10000a26 	beq	r2,zero,3621c <tcp_output+0x3fc>
   361f4:	e0bfff17 	ldw	r2,-4(fp)
   361f8:	10800317 	ldw	r2,12(r2)
   361fc:	1000071e 	bne	r2,zero,3621c <tcp_output+0x3fc>
       tp->t_timer[TCPT_PERSIST] == 0) 
   36200:	e0bfff17 	ldw	r2,-4(fp)
   36204:	10800417 	ldw	r2,16(r2)
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
   36208:	1000041e 	bne	r2,zero,3621c <tcp_output+0x3fc>
       tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tp->t_rxtshift = 0;
   3620c:	e0bfff17 	ldw	r2,-4(fp)
   36210:	10000715 	stw	zero,28(r2)
      tcp_setpersist(tp);
   36214:	e13fff17 	ldw	r4,-4(fp)
   36218:	0036e280 	call	36e28 <tcp_setpersist>
   }

   /*
    * No reason to send a segment, just return.
    */
   return (0);
   3621c:	0005883a 	mov	r2,zero
   36220:	0002fc06 	br	36e14 <tcp_output+0xff4>

send:
   ENTER_CRIT_SECTION(tp);
   36224:	002b2e40 	call	2b2e4 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
   36228:	e0bff417 	ldw	r2,-48(fp)
   3622c:	e0bff115 	stw	r2,-60(fp)
   sendm = so->so_snd.sb_mb;
   36230:	e0bff217 	ldw	r2,-56(fp)
   36234:	10801817 	ldw	r2,96(r2)
   36238:	e0bff015 	stw	r2,-64(fp)
   if (len)
   3623c:	e0bfea17 	ldw	r2,-88(fp)
   36240:	10005826 	beq	r2,zero,363a4 <tcp_output+0x584>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
   36244:	00000b06 	br	36274 <tcp_output+0x454>
      {
         bufoff -= sendm->m_len;
   36248:	e0fff117 	ldw	r3,-60(fp)
   3624c:	e0bff017 	ldw	r2,-64(fp)
   36250:	10800217 	ldw	r2,8(r2)
   36254:	1885c83a 	sub	r2,r3,r2
   36258:	e0bff115 	stw	r2,-60(fp)
         if (bufoff < 0)   /* if off is in this buffer, break */
   3625c:	e0bff117 	ldw	r2,-60(fp)
   36260:	1000010e 	bge	r2,zero,36268 <tcp_output+0x448>
            break;
   36264:	00000506 	br	3627c <tcp_output+0x45c>
         sendm = sendm->m_next;
   36268:	e0bff017 	ldw	r2,-64(fp)
   3626c:	10800617 	ldw	r2,24(r2)
   36270:	e0bff015 	stw	r2,-64(fp)
   bufoff = off;
   sendm = so->so_snd.sb_mb;
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
   36274:	e0bff017 	ldw	r2,-64(fp)
   36278:	103ff31e 	bne	r2,zero,36248 <__alt_mem_descriptor_memory+0xdeff6248>
         bufoff -= sendm->m_len;
         if (bufoff < 0)   /* if off is in this buffer, break */
            break;
         sendm = sendm->m_next;
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
   3627c:	e0bff017 	ldw	r2,-64(fp)
   36280:	1000011e 	bne	r2,zero,36288 <tcp_output+0x468>
   36284:	002b0f40 	call	2b0f4 <dtrap>
      bufoff += sendm->m_len; /* index to next data to send in msend */
   36288:	e0bff017 	ldw	r2,-64(fp)
   3628c:	10c00217 	ldw	r3,8(r2)
   36290:	e0bff117 	ldw	r2,-60(fp)
   36294:	1885883a 	add	r2,r3,r2
   36298:	e0bff115 	stw	r2,-60(fp)

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
   3629c:	e0bff017 	ldw	r2,-64(fp)
   362a0:	10800617 	ldw	r2,24(r2)
   362a4:	10000b26 	beq	r2,zero,362d4 <tcp_output+0x4b4>
   362a8:	e0bff017 	ldw	r2,-64(fp)
   362ac:	10800217 	ldw	r2,8(r2)
   362b0:	1007883a 	mov	r3,r2
   362b4:	e0bfea17 	ldw	r2,-88(fp)
   362b8:	1880060e 	bge	r3,r2,362d4 <tcp_output+0x4b4>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
   362bc:	e0ffec17 	ldw	r3,-80(fp)
   362c0:	00bfff84 	movi	r2,-2
   362c4:	1884703a 	and	r2,r3,r2
   362c8:	e0bfec15 	stw	r2,-80(fp)
         sendalot = 1;     /* set to send more segments */
   362cc:	00800044 	movi	r2,1
   362d0:	e0bfef15 	stw	r2,-68(fp)
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
   362d4:	e0bfec17 	ldw	r2,-80(fp)
   362d8:	1080004c 	andi	r2,r2,1
   362dc:	10000826 	beq	r2,zero,36300 <tcp_output+0x4e0>
   362e0:	e0bff217 	ldw	r2,-56(fp)
   362e4:	10801217 	ldw	r2,72(r2)
   362e8:	e0ffea17 	ldw	r3,-88(fp)
   362ec:	1880042e 	bgeu	r3,r2,36300 <tcp_output+0x4e0>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
   362f0:	e0ffec17 	ldw	r3,-80(fp)
   362f4:	00bfff84 	movi	r2,-2
   362f8:	1884703a 	and	r2,r3,r2
   362fc:	e0bfec15 	stw	r2,-80(fp)
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
   36300:	e0bff017 	ldw	r2,-64(fp)
   36304:	10800217 	ldw	r2,8(r2)
   36308:	e0ffea17 	ldw	r3,-88(fp)
   3630c:	1880010e 	bge	r3,r2,36314 <tcp_output+0x4f4>
   36310:	1805883a 	mov	r2,r3
   36314:	e0bfea15 	stw	r2,-88(fp)
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
   36318:	e0bff117 	ldw	r2,-60(fp)
   3631c:	1000081e 	bne	r2,zero,36340 <tcp_output+0x520>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
   36320:	e0bff017 	ldw	r2,-64(fp)
   36324:	10800317 	ldw	r2,12(r2)
   36328:	1007883a 	mov	r3,r2
   3632c:	e0bff017 	ldw	r2,-64(fp)
   36330:	10800417 	ldw	r2,16(r2)
   36334:	1885c83a 	sub	r2,r3,r2
   36338:	108000cc 	andi	r2,r2,3
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
   3633c:	10001926 	beq	r2,zero,363a4 <tcp_output+0x584>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
   36340:	e0bff017 	ldw	r2,-64(fp)
   36344:	10c00217 	ldw	r3,8(r2)
   36348:	e0bff117 	ldw	r2,-60(fp)
   3634c:	1885c83a 	sub	r2,r3,r2
   36350:	e0ffea17 	ldw	r3,-88(fp)
   36354:	1880010e 	bge	r3,r2,3635c <tcp_output+0x53c>
   36358:	1805883a 	mov	r2,r3
   3635c:	e0bfea15 	stw	r2,-88(fp)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
   36360:	00800174 	movhi	r2,5
   36364:	10875e04 	addi	r2,r2,7544
   36368:	10800017 	ldw	r2,0(r2)
   3636c:	10bff204 	addi	r2,r2,-56
   36370:	1007883a 	mov	r3,r2
   36374:	e0bfea17 	ldw	r2,-88(fp)
   36378:	18800a0e 	bge	r3,r2,363a4 <tcp_output+0x584>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
   3637c:	008001b4 	movhi	r2,6
   36380:	10b84204 	addi	r2,r2,-7928
   36384:	10800217 	ldw	r2,8(r2)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
   36388:	10800088 	cmpgei	r2,r2,2
   3638c:	1000051e 	bne	r2,zero,363a4 <tcp_output+0x584>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
         {
            len = lilbufsiz - HDRSLEN;
   36390:	00800174 	movhi	r2,5
   36394:	10875e04 	addi	r2,r2,7544
   36398:	10800017 	ldw	r2,0(r2)
   3639c:	10bff204 	addi	r2,r2,-56
   363a0:	e0bfea15 	stw	r2,-88(fp)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
   363a4:	e0bfea17 	ldw	r2,-88(fp)
   363a8:	10003626 	beq	r2,zero,36484 <tcp_output+0x664>
   363ac:	e0bff117 	ldw	r2,-60(fp)
   363b0:	1000341e 	bne	r2,zero,36484 <tcp_output+0x664>
       (sendm->pkt->inuse == 1) &&
   363b4:	e0bff017 	ldw	r2,-64(fp)
   363b8:	10800117 	ldw	r2,4(r2)
   363bc:	10800917 	ldw	r2,36(r2)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
   363c0:	10800058 	cmpnei	r2,r2,1
   363c4:	10002f1e 	bne	r2,zero,36484 <tcp_output+0x664>
       (sendm->pkt->inuse == 1) &&
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
   363c8:	e0bff017 	ldw	r2,-64(fp)
   363cc:	10800317 	ldw	r2,12(r2)
   363d0:	1007883a 	mov	r3,r2
   363d4:	e0bff017 	ldw	r2,-64(fp)
   363d8:	10800417 	ldw	r2,16(r2)
   363dc:	1885c83a 	sub	r2,r3,r2
   363e0:	108000cc 	andi	r2,r2,3

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
       (sendm->pkt->inuse == 1) &&
   363e4:	1000271e 	bne	r2,zero,36484 <tcp_output+0x664>
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
   363e8:	e0bfee17 	ldw	r2,-72(fp)
   363ec:	1000251e 	bne	r2,zero,36484 <tcp_output+0x664>
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
   363f0:	01000084 	movi	r4,2
   363f4:	000b883a 	mov	r5,zero
   363f8:	002bf0c0 	call	2bf0c <m_getnbuf>
   363fc:	e0bfed15 	stw	r2,-76(fp)
      if (!m)
   36400:	e0bfed17 	ldw	r2,-76(fp)
   36404:	1000031e 	bne	r2,zero,36414 <tcp_output+0x5f4>
      {
         EXIT_CRIT_SECTION(tp);
   36408:	002b3400 	call	2b340 <irq_Unmask>
         return (ENOBUFS);
   3640c:	00801a44 	movi	r2,105
   36410:	00028006 	br	36e14 <tcp_output+0xff4>
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
   36414:	e0bff017 	ldw	r2,-64(fp)
   36418:	10c00117 	ldw	r3,4(r2)
   3641c:	e0bfed17 	ldw	r2,-76(fp)
   36420:	10c00115 	stw	r3,4(r2)
      m->pkt->inuse++;     /* bump packet's use count */
   36424:	e0bfed17 	ldw	r2,-76(fp)
   36428:	10800117 	ldw	r2,4(r2)
   3642c:	10c00917 	ldw	r3,36(r2)
   36430:	18c00044 	addi	r3,r3,1
   36434:	10c00915 	stw	r3,36(r2)
      m->m_base = sendm->m_base; /* clone mbuf members */
   36438:	e0bff017 	ldw	r2,-64(fp)
   3643c:	10c00417 	ldw	r3,16(r2)
   36440:	e0bfed17 	ldw	r2,-76(fp)
   36444:	10c00415 	stw	r3,16(r2)
      m->m_memsz = sendm->m_memsz;
   36448:	e0bff017 	ldw	r2,-64(fp)
   3644c:	10c00517 	ldw	r3,20(r2)
   36450:	e0bfed17 	ldw	r2,-76(fp)
   36454:	10c00515 	stw	r3,20(r2)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
   36458:	e0bfea17 	ldw	r2,-88(fp)
   3645c:	10800a04 	addi	r2,r2,40
   36460:	1007883a 	mov	r3,r2
   36464:	e0bfed17 	ldw	r2,-76(fp)
   36468:	10c00215 	stw	r3,8(r2)
      m->m_data = sendm->m_data - TCPIPHDRSZ;
   3646c:	e0bff017 	ldw	r2,-64(fp)
   36470:	10800317 	ldw	r2,12(r2)
   36474:	10fff604 	addi	r3,r2,-40
   36478:	e0bfed17 	ldw	r2,-76(fp)
   3647c:	10c00315 	stw	r3,12(r2)
   36480:	00002b06 	br	36530 <tcp_output+0x710>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
   36484:	00800174 	movhi	r2,5
   36488:	108f9704 	addi	r2,r2,15964
   3648c:	10800017 	ldw	r2,0(r2)
   36490:	10800a04 	addi	r2,r2,40
   36494:	010000c4 	movi	r4,3
   36498:	100b883a 	mov	r5,r2
   3649c:	002bf0c0 	call	2bf0c <m_getnbuf>
   364a0:	e0bfed15 	stw	r2,-76(fp)
      if (m ==(struct mbuf *)NULL)
   364a4:	e0bfed17 	ldw	r2,-76(fp)
   364a8:	1000031e 	bne	r2,zero,364b8 <tcp_output+0x698>
      {
         EXIT_CRIT_SECTION(tp);
   364ac:	002b3400 	call	2b340 <irq_Unmask>
         return ENOBUFS;
   364b0:	00801a44 	movi	r2,105
   364b4:	00025706 	br	36e14 <tcp_output+0xff4>
      }

      m->m_len = TCPIPHDRSZ;
   364b8:	e0bfed17 	ldw	r2,-76(fp)
   364bc:	00c00a04 	movi	r3,40
   364c0:	10c00215 	stw	r3,8(r2)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
   364c4:	e0bfed17 	ldw	r2,-76(fp)
   364c8:	10c00317 	ldw	r3,12(r2)
   364cc:	00800174 	movhi	r2,5
   364d0:	108f9704 	addi	r2,r2,15964
   364d4:	10800017 	ldw	r2,0(r2)
   364d8:	1887883a 	add	r3,r3,r2
   364dc:	e0bfed17 	ldw	r2,-76(fp)
   364e0:	10c00315 	stw	r3,12(r2)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
   364e4:	e0bfea17 	ldw	r2,-88(fp)
   364e8:	10001126 	beq	r2,zero,36530 <tcp_output+0x710>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
   364ec:	e0bff217 	ldw	r2,-56(fp)
   364f0:	10801817 	ldw	r2,96(r2)
   364f4:	1009883a 	mov	r4,r2
   364f8:	e17ff417 	ldw	r5,-48(fp)
   364fc:	e1bfea17 	ldw	r6,-88(fp)
   36500:	002c1e40 	call	2c1e4 <m_copy>
   36504:	1007883a 	mov	r3,r2
   36508:	e0bfed17 	ldw	r2,-76(fp)
   3650c:	10c00615 	stw	r3,24(r2)
         if (m->m_next == 0)
   36510:	e0bfed17 	ldw	r2,-76(fp)
   36514:	10800617 	ldw	r2,24(r2)
   36518:	1000051e 	bne	r2,zero,36530 <tcp_output+0x710>
         {
            m_freem(m);
   3651c:	e13fed17 	ldw	r4,-76(fp)
   36520:	002c1a40 	call	2c1a4 <m_freem>
            EXIT_CRIT_SECTION(tp);
   36524:	002b3400 	call	2b340 <irq_Unmask>
            return ENOBUFS;
   36528:	00801a44 	movi	r2,105
   3652c:	00023906 	br	36e14 <tcp_output+0xff4>
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
   36530:	002b3400 	call	2b340 <irq_Unmask>

   if (len) 
   36534:	e0bfea17 	ldw	r2,-88(fp)
   36538:	10003726 	beq	r2,zero,36618 <tcp_output+0x7f8>
   {
      if (tp->t_force && len == 1)
   3653c:	e0bfff17 	ldw	r2,-4(fp)
   36540:	10800a83 	ldbu	r2,42(r2)
   36544:	10803fcc 	andi	r2,r2,255
   36548:	1080201c 	xori	r2,r2,128
   3654c:	10bfe004 	addi	r2,r2,-128
   36550:	10000b26 	beq	r2,zero,36580 <tcp_output+0x760>
   36554:	e0bfea17 	ldw	r2,-88(fp)
   36558:	10800058 	cmpnei	r2,r2,1
   3655c:	1000081e 	bne	r2,zero,36580 <tcp_output+0x760>
         tcpstat.tcps_sndprobe++;
   36560:	008001b4 	movhi	r2,6
   36564:	10b90b04 	addi	r2,r2,-7124
   36568:	10801517 	ldw	r2,84(r2)
   3656c:	10c00044 	addi	r3,r2,1
   36570:	008001b4 	movhi	r2,6
   36574:	10b90b04 	addi	r2,r2,-7124
   36578:	10c01515 	stw	r3,84(r2)
   3657c:	00005306 	br	366cc <tcp_output+0x8ac>
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
   36580:	e0bfff17 	ldw	r2,-4(fp)
   36584:	10c00f17 	ldw	r3,60(r2)
   36588:	e0bfff17 	ldw	r2,-4(fp)
   3658c:	10801a17 	ldw	r2,104(r2)
   36590:	1885c83a 	sub	r2,r3,r2
   36594:	1000100e 	bge	r2,zero,365d8 <tcp_output+0x7b8>
      {
         tcpstat.tcps_sndrexmitpack++;
   36598:	008001b4 	movhi	r2,6
   3659c:	10b90b04 	addi	r2,r2,-7124
   365a0:	10801217 	ldw	r2,72(r2)
   365a4:	10c00044 	addi	r3,r2,1
   365a8:	008001b4 	movhi	r2,6
   365ac:	10b90b04 	addi	r2,r2,-7124
   365b0:	10c01215 	stw	r3,72(r2)
         tcpstat.tcps_sndrexmitbyte += len;
   365b4:	008001b4 	movhi	r2,6
   365b8:	10b90b04 	addi	r2,r2,-7124
   365bc:	10c01317 	ldw	r3,76(r2)
   365c0:	e0bfea17 	ldw	r2,-88(fp)
   365c4:	1887883a 	add	r3,r3,r2
   365c8:	008001b4 	movhi	r2,6
   365cc:	10b90b04 	addi	r2,r2,-7124
   365d0:	10c01315 	stw	r3,76(r2)
   365d4:	00003d06 	br	366cc <tcp_output+0x8ac>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
   365d8:	008001b4 	movhi	r2,6
   365dc:	10b90b04 	addi	r2,r2,-7124
   365e0:	10801017 	ldw	r2,64(r2)
   365e4:	10c00044 	addi	r3,r2,1
   365e8:	008001b4 	movhi	r2,6
   365ec:	10b90b04 	addi	r2,r2,-7124
   365f0:	10c01015 	stw	r3,64(r2)
         tcpstat.tcps_sndbyte += len;
   365f4:	008001b4 	movhi	r2,6
   365f8:	10b90b04 	addi	r2,r2,-7124
   365fc:	10c01117 	ldw	r3,68(r2)
   36600:	e0bfea17 	ldw	r2,-88(fp)
   36604:	1887883a 	add	r3,r3,r2
   36608:	008001b4 	movhi	r2,6
   3660c:	10b90b04 	addi	r2,r2,-7124
   36610:	10c01115 	stw	r3,68(r2)
   36614:	00002d06 	br	366cc <tcp_output+0x8ac>
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
   36618:	e0bfff17 	ldw	r2,-4(fp)
   3661c:	10800b0b 	ldhu	r2,44(r2)
   36620:	10bfffcc 	andi	r2,r2,65535
   36624:	1080004c 	andi	r2,r2,1
   36628:	10000826 	beq	r2,zero,3664c <tcp_output+0x82c>
   {
      tcpstat.tcps_sndacks++;
   3662c:	008001b4 	movhi	r2,6
   36630:	10b90b04 	addi	r2,r2,-7124
   36634:	10801417 	ldw	r2,80(r2)
   36638:	10c00044 	addi	r3,r2,1
   3663c:	008001b4 	movhi	r2,6
   36640:	10b90b04 	addi	r2,r2,-7124
   36644:	10c01415 	stw	r3,80(r2)
   36648:	00002006 	br	366cc <tcp_output+0x8ac>
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
   3664c:	e0bfec17 	ldw	r2,-80(fp)
   36650:	108001cc 	andi	r2,r2,7
   36654:	10000826 	beq	r2,zero,36678 <tcp_output+0x858>
      tcpstat.tcps_sndctrl++;
   36658:	008001b4 	movhi	r2,6
   3665c:	10b90b04 	addi	r2,r2,-7124
   36660:	10801817 	ldw	r2,96(r2)
   36664:	10c00044 	addi	r3,r2,1
   36668:	008001b4 	movhi	r2,6
   3666c:	10b90b04 	addi	r2,r2,-7124
   36670:	10c01815 	stw	r3,96(r2)
   36674:	00001506 	br	366cc <tcp_output+0x8ac>
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
   36678:	e0bfff17 	ldw	r2,-4(fp)
   3667c:	10c01017 	ldw	r3,64(r2)
   36680:	e0bfff17 	ldw	r2,-4(fp)
   36684:	10800e17 	ldw	r2,56(r2)
   36688:	1885c83a 	sub	r2,r3,r2
   3668c:	0080080e 	bge	zero,r2,366b0 <tcp_output+0x890>
      tcpstat.tcps_sndurg++;
   36690:	008001b4 	movhi	r2,6
   36694:	10b90b04 	addi	r2,r2,-7124
   36698:	10801617 	ldw	r2,88(r2)
   3669c:	10c00044 	addi	r3,r2,1
   366a0:	008001b4 	movhi	r2,6
   366a4:	10b90b04 	addi	r2,r2,-7124
   366a8:	10c01615 	stw	r3,88(r2)
   366ac:	00000706 	br	366cc <tcp_output+0x8ac>
   else
      tcpstat.tcps_sndwinup++;
   366b0:	008001b4 	movhi	r2,6
   366b4:	10b90b04 	addi	r2,r2,-7124
   366b8:	10801717 	ldw	r2,92(r2)
   366bc:	10c00044 	addi	r3,r2,1
   366c0:	008001b4 	movhi	r2,6
   366c4:	10b90b04 	addi	r2,r2,-7124
   366c8:	10c01715 	stw	r3,92(r2)

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
   366cc:	e0bfed17 	ldw	r2,-76(fp)
   366d0:	10800317 	ldw	r2,12(r2)
   366d4:	e0bff515 	stw	r2,-44(fp)
   if ((char *)ti < m->pkt->nb_buff)
   366d8:	e0bfed17 	ldw	r2,-76(fp)
   366dc:	10800117 	ldw	r2,4(r2)
   366e0:	10800117 	ldw	r2,4(r2)
   366e4:	e0fff517 	ldw	r3,-44(fp)
   366e8:	1880032e 	bgeu	r3,r2,366f8 <tcp_output+0x8d8>
   {
      panic("tcp_out- packet ptr underflow\n");
   366ec:	01000174 	movhi	r4,5
   366f0:	213b7e04 	addi	r4,r4,-4616
   366f4:	00267380 	call	26738 <panic>
   }
   tcp_mbuf = m;        /* flag TCP header mbuf */
   366f8:	e0bfed17 	ldw	r2,-76(fp)
   366fc:	e0bff615 	stw	r2,-40(fp)
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
   36700:	e0bfff17 	ldw	r2,-4(fp)
   36704:	10800c17 	ldw	r2,48(r2)
   36708:	1000031e 	bne	r2,zero,36718 <tcp_output+0x8f8>
      panic("tcp_output");
   3670c:	01000174 	movhi	r4,5
   36710:	213b8604 	addi	r4,r4,-4584
   36714:	00267380 	call	26738 <panic>

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
   36718:	e0bfff17 	ldw	r2,-4(fp)
   3671c:	10800c17 	ldw	r2,48(r2)
   36720:	e13ff517 	ldw	r4,-44(fp)
   36724:	100b883a 	mov	r5,r2
   36728:	01800a04 	movi	r6,40
   3672c:	0007c900 	call	7c90 <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
   36730:	e0bfec17 	ldw	r2,-80(fp)
   36734:	1080004c 	andi	r2,r2,1
   36738:	10000f26 	beq	r2,zero,36778 <tcp_output+0x958>
   3673c:	e0bfff17 	ldw	r2,-4(fp)
   36740:	10800b0b 	ldhu	r2,44(r2)
   36744:	10bfffcc 	andi	r2,r2,65535
   36748:	1080040c 	andi	r2,r2,16
   3674c:	10000a26 	beq	r2,zero,36778 <tcp_output+0x958>
       tp->snd_nxt == tp->snd_max)
   36750:	e0bfff17 	ldw	r2,-4(fp)
   36754:	10c00f17 	ldw	r3,60(r2)
   36758:	e0bfff17 	ldw	r2,-4(fp)
   3675c:	10801a17 	ldw	r2,104(r2)
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
   36760:	1880051e 	bne	r3,r2,36778 <tcp_output+0x958>
       tp->snd_nxt == tp->snd_max)
   {
      tp->snd_nxt--;
   36764:	e0bfff17 	ldw	r2,-4(fp)
   36768:	10800f17 	ldw	r2,60(r2)
   3676c:	10ffffc4 	addi	r3,r2,-1
   36770:	e0bfff17 	ldw	r2,-4(fp)
   36774:	10c00f15 	stw	r3,60(r2)
   }

   ti->ti_seq = htonl(tp->snd_nxt);
   36778:	e0bfff17 	ldw	r2,-4(fp)
   3677c:	10800f17 	ldw	r2,60(r2)
   36780:	1006d63a 	srli	r3,r2,24
   36784:	e0bfff17 	ldw	r2,-4(fp)
   36788:	10800f17 	ldw	r2,60(r2)
   3678c:	1004d23a 	srli	r2,r2,8
   36790:	10bfc00c 	andi	r2,r2,65280
   36794:	1886b03a 	or	r3,r3,r2
   36798:	e0bfff17 	ldw	r2,-4(fp)
   3679c:	10800f17 	ldw	r2,60(r2)
   367a0:	10bfc00c 	andi	r2,r2,65280
   367a4:	1004923a 	slli	r2,r2,8
   367a8:	1886b03a 	or	r3,r3,r2
   367ac:	e0bfff17 	ldw	r2,-4(fp)
   367b0:	10800f17 	ldw	r2,60(r2)
   367b4:	1004963a 	slli	r2,r2,24
   367b8:	1886b03a 	or	r3,r3,r2
   367bc:	e0bff517 	ldw	r2,-44(fp)
   367c0:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(tp->rcv_nxt);
   367c4:	e0bfff17 	ldw	r2,-4(fp)
   367c8:	10801617 	ldw	r2,88(r2)
   367cc:	1006d63a 	srli	r3,r2,24
   367d0:	e0bfff17 	ldw	r2,-4(fp)
   367d4:	10801617 	ldw	r2,88(r2)
   367d8:	1004d23a 	srli	r2,r2,8
   367dc:	10bfc00c 	andi	r2,r2,65280
   367e0:	1886b03a 	or	r3,r3,r2
   367e4:	e0bfff17 	ldw	r2,-4(fp)
   367e8:	10801617 	ldw	r2,88(r2)
   367ec:	10bfc00c 	andi	r2,r2,65280
   367f0:	1004923a 	slli	r2,r2,8
   367f4:	1886b03a 	or	r3,r3,r2
   367f8:	e0bfff17 	ldw	r2,-4(fp)
   367fc:	10801617 	ldw	r2,88(r2)
   36800:	1004963a 	slli	r2,r2,24
   36804:	1886b03a 	or	r3,r3,r2
   36808:	e0bff517 	ldw	r2,-44(fp)
   3680c:	10c00715 	stw	r3,28(r2)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
   36810:	e0bfec17 	ldw	r2,-80(fp)
   36814:	1080008c 	andi	r2,r2,2
   36818:	10002326 	beq	r2,zero,368a8 <tcp_output+0xa88>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
   3681c:	e0bff217 	ldw	r2,-56(fp)
   36820:	10800117 	ldw	r2,4(r2)
   36824:	e0bff715 	stw	r2,-36(fp)

      switch(so->so_domain)
   36828:	e0bff217 	ldw	r2,-56(fp)
   3682c:	10800517 	ldw	r2,20(r2)
   36830:	108000a0 	cmpeqi	r2,r2,2
   36834:	10001b26 	beq	r2,zero,368a4 <tcp_output+0xa84>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
   36838:	e0bfec17 	ldw	r2,-80(fp)
   3683c:	1080040c 	andi	r2,r2,16
   36840:	1000161e 	bne	r2,zero,3689c <tcp_output+0xa7c>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
   36844:	e0bff517 	ldw	r2,-44(fp)
   36848:	10c00417 	ldw	r3,16(r2)
   3684c:	e0bffe04 	addi	r2,fp,-8
   36850:	1809883a 	mov	r4,r3
   36854:	100b883a 	mov	r5,r2
   36858:	003eaf40 	call	3eaf4 <iproute>
   3685c:	e0bff815 	stw	r2,-32(fp)
               if(ifp)
   36860:	e0bff817 	ldw	r2,-32(fp)
   36864:	10000a26 	beq	r2,zero,36890 <tcp_output+0xa70>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
   36868:	e0bff817 	ldw	r2,-32(fp)
   3686c:	10c00917 	ldw	r3,36(r2)
   36870:	e0bff817 	ldw	r2,-32(fp)
   36874:	10800817 	ldw	r2,32(r2)
   36878:	013ff604 	movi	r4,-40
   3687c:	2085c83a 	sub	r2,r4,r2
   36880:	1887883a 	add	r3,r3,r2
   36884:	e0bff717 	ldw	r2,-36(fp)
   36888:	10c00615 	stw	r3,24(r2)
   3688c:	00000306 	br	3689c <tcp_output+0xa7c>
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
   36890:	e0bff717 	ldw	r2,-36(fp)
   36894:	00c09104 	movi	r3,580
   36898:	10c00615 	stw	r3,24(r2)
            }
#endif   /* IP_PMTU */
         }
         break;
   3689c:	0001883a 	nop
   368a0:	00000106 	br	368a8 <tcp_output+0xa88>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
   368a4:	002b0f40 	call	2b0f4 <dtrap>
      }
   }

   /* fill in options if any are set */
   if (optlen)
   368a8:	e0bfee17 	ldw	r2,-72(fp)
   368ac:	10002b26 	beq	r2,zero,3695c <tcp_output+0xb3c>
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
   368b0:	01000084 	movi	r4,2
   368b4:	01404004 	movi	r5,256
   368b8:	002bf0c0 	call	2bf0c <m_getnbuf>
   368bc:	e0bff915 	stw	r2,-28(fp)
      if (mopt == NULL) 
   368c0:	e0bff917 	ldw	r2,-28(fp)
   368c4:	1000041e 	bne	r2,zero,368d8 <tcp_output+0xab8>
      {
         m_freem(m);
   368c8:	e13fed17 	ldw	r4,-76(fp)
   368cc:	002c1a40 	call	2c1a4 <m_freem>
         return (ENOBUFS);
   368d0:	00801a44 	movi	r2,105
   368d4:	00014f06 	br	36e14 <tcp_output+0xff4>
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
   368d8:	e0bff617 	ldw	r2,-40(fp)
   368dc:	10c00617 	ldw	r3,24(r2)
   368e0:	e0bff917 	ldw	r2,-28(fp)
   368e4:	10c00615 	stw	r3,24(r2)
      tcp_mbuf->m_next = mopt;
   368e8:	e0bff617 	ldw	r2,-40(fp)
   368ec:	e0fff917 	ldw	r3,-28(fp)
   368f0:	10c00615 	stw	r3,24(r2)

      /* extend options to aligned address */
      while(optlen & 0x03)
   368f4:	00000606 	br	36910 <tcp_output+0xaf0>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
   368f8:	e0bfee17 	ldw	r2,-72(fp)
   368fc:	10c00044 	addi	r3,r2,1
   36900:	e0ffee15 	stw	r3,-72(fp)
   36904:	d0e89f04 	addi	r3,gp,-23940
   36908:	10c5883a 	add	r2,r2,r3
   3690c:	10000005 	stb	zero,0(r2)
      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
   36910:	e0bfee17 	ldw	r2,-72(fp)
   36914:	108000cc 	andi	r2,r2,3
   36918:	103ff71e 	bne	r2,zero,368f8 <__alt_mem_descriptor_memory+0xdeff68f8>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
   3691c:	e0bff917 	ldw	r2,-28(fp)
   36920:	10800317 	ldw	r2,12(r2)
   36924:	1009883a 	mov	r4,r2
   36928:	d1689f04 	addi	r5,gp,-23940
   3692c:	e1bfee17 	ldw	r6,-72(fp)
   36930:	0007c900 	call	7c90 <memcpy>
      mopt->m_len = optlen;
   36934:	e0bff917 	ldw	r2,-28(fp)
   36938:	e0ffee17 	ldw	r3,-72(fp)
   3693c:	10c00215 	stw	r3,8(r2)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
   36940:	e0bfee17 	ldw	r2,-72(fp)
   36944:	10800504 	addi	r2,r2,20
   36948:	1004d0ba 	srli	r2,r2,2
   3694c:	1004913a 	slli	r2,r2,4
   36950:	1007883a 	mov	r3,r2
   36954:	e0bff517 	ldw	r2,-44(fp)
   36958:	10c00805 	stb	r3,32(r2)
   }

   ti->ti_flags = (u_char)flags;
   3695c:	e0bfec17 	ldw	r2,-80(fp)
   36960:	1007883a 	mov	r3,r2
   36964:	e0bff517 	ldw	r2,-44(fp)
   36968:	10c00845 	stb	r3,33(r2)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
   3696c:	e0bff217 	ldw	r2,-56(fp)
   36970:	10800b17 	ldw	r2,44(r2)
   36974:	1004d0ba 	srli	r2,r2,2
   36978:	1007883a 	mov	r3,r2
   3697c:	e0bfeb17 	ldw	r2,-84(fp)
   36980:	10c0060e 	bge	r2,r3,3699c <tcp_output+0xb7c>
   36984:	e0bfff17 	ldw	r2,-4(fp)
   36988:	10800a0b 	ldhu	r2,40(r2)
   3698c:	10bfffcc 	andi	r2,r2,65535
   36990:	e0ffeb17 	ldw	r3,-84(fp)
   36994:	1880010e 	bge	r3,r2,3699c <tcp_output+0xb7c>
      win = 0;
   36998:	e03feb15 	stw	zero,-84(fp)
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
   3699c:	e0bfff17 	ldw	r2,-4(fp)
   369a0:	10c01917 	ldw	r3,100(r2)
   369a4:	e0bfff17 	ldw	r2,-4(fp)
   369a8:	10801617 	ldw	r2,88(r2)
   369ac:	1885c83a 	sub	r2,r3,r2
   369b0:	1007883a 	mov	r3,r2
   369b4:	e0bfeb17 	ldw	r2,-84(fp)
   369b8:	10c0060e 	bge	r2,r3,369d4 <tcp_output+0xbb4>
      win = (long)(tp->rcv_adv - tp->rcv_nxt);
   369bc:	e0bfff17 	ldw	r2,-4(fp)
   369c0:	10c01917 	ldw	r3,100(r2)
   369c4:	e0bfff17 	ldw	r2,-4(fp)
   369c8:	10801617 	ldw	r2,88(r2)
   369cc:	1885c83a 	sub	r2,r3,r2
   369d0:	e0bfeb15 	stw	r2,-84(fp)

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
   369d4:	008001b4 	movhi	r2,6
   369d8:	10b84204 	addi	r2,r2,-7928
   369dc:	10800217 	ldw	r2,8(r2)
   369e0:	1000021e 	bne	r2,zero,369ec <tcp_output+0xbcc>
   {
      win = 0;
   369e4:	e03feb15 	stw	zero,-84(fp)
   369e8:	00001406 	br	36a3c <tcp_output+0xc1c>
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
   369ec:	008001b4 	movhi	r2,6
   369f0:	10b84204 	addi	r2,r2,-7928
   369f4:	10800217 	ldw	r2,8(r2)
   369f8:	10ffffc4 	addi	r3,r2,-1
   369fc:	00800174 	movhi	r2,5
   36a00:	10876004 	addi	r2,r2,7552
   36a04:	10800017 	ldw	r2,0(r2)
   36a08:	1887383a 	mul	r3,r3,r2
   36a0c:	e0bfeb17 	ldw	r2,-84(fp)
   36a10:	18800a0e 	bge	r3,r2,36a3c <tcp_output+0xc1c>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
   36a14:	008001b4 	movhi	r2,6
   36a18:	10b84204 	addi	r2,r2,-7928
   36a1c:	10800217 	ldw	r2,8(r2)
   36a20:	10bfffc4 	addi	r2,r2,-1
   36a24:	1007883a 	mov	r3,r2
   36a28:	00800174 	movhi	r2,5
   36a2c:	10876004 	addi	r2,r2,7552
   36a30:	10800017 	ldw	r2,0(r2)
   36a34:	1885383a 	mul	r2,r3,r2
   36a38:	e0bfeb15 	stw	r2,-84(fp)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
   36a3c:	e0bfeb17 	ldw	r2,-84(fp)
   36a40:	10bfffcc 	andi	r2,r2,65535
   36a44:	1004d23a 	srli	r2,r2,8
   36a48:	1007883a 	mov	r3,r2
   36a4c:	e0bfeb17 	ldw	r2,-84(fp)
   36a50:	10bfffcc 	andi	r2,r2,65535
   36a54:	1004923a 	slli	r2,r2,8
   36a58:	1884b03a 	or	r2,r3,r2
   36a5c:	1007883a 	mov	r3,r2
   36a60:	e0bff517 	ldw	r2,-44(fp)
   36a64:	10c0088d 	sth	r3,34(r2)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
   36a68:	e0bfff17 	ldw	r2,-4(fp)
   36a6c:	10c01017 	ldw	r3,64(r2)
   36a70:	e0bfff17 	ldw	r2,-4(fp)
   36a74:	10800f17 	ldw	r2,60(r2)
   36a78:	1885c83a 	sub	r2,r3,r2
   36a7c:	00801c0e 	bge	zero,r2,36af0 <tcp_output+0xcd0>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
   36a80:	e0bfff17 	ldw	r2,-4(fp)
   36a84:	10801017 	ldw	r2,64(r2)
   36a88:	1007883a 	mov	r3,r2
   36a8c:	e0bfff17 	ldw	r2,-4(fp)
   36a90:	10800f17 	ldw	r2,60(r2)
   36a94:	1885c83a 	sub	r2,r3,r2
   36a98:	10bfffcc 	andi	r2,r2,65535
   36a9c:	1004d23a 	srli	r2,r2,8
   36aa0:	1007883a 	mov	r3,r2
   36aa4:	e0bfff17 	ldw	r2,-4(fp)
   36aa8:	10801017 	ldw	r2,64(r2)
   36aac:	1009883a 	mov	r4,r2
   36ab0:	e0bfff17 	ldw	r2,-4(fp)
   36ab4:	10800f17 	ldw	r2,60(r2)
   36ab8:	2085c83a 	sub	r2,r4,r2
   36abc:	10bfffcc 	andi	r2,r2,65535
   36ac0:	1004923a 	slli	r2,r2,8
   36ac4:	1884b03a 	or	r2,r3,r2
   36ac8:	1007883a 	mov	r3,r2
   36acc:	e0bff517 	ldw	r2,-44(fp)
   36ad0:	10c0098d 	sth	r3,38(r2)
      ti->ti_flags |= TH_URG;
   36ad4:	e0bff517 	ldw	r2,-44(fp)
   36ad8:	10800843 	ldbu	r2,33(r2)
   36adc:	10800814 	ori	r2,r2,32
   36ae0:	1007883a 	mov	r3,r2
   36ae4:	e0bff517 	ldw	r2,-44(fp)
   36ae8:	10c00845 	stb	r3,33(r2)
   36aec:	00000406 	br	36b00 <tcp_output+0xce0>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
   36af0:	e0bfff17 	ldw	r2,-4(fp)
   36af4:	10c00e17 	ldw	r3,56(r2)
   36af8:	e0bfff17 	ldw	r2,-4(fp)
   36afc:	10c01015 	stw	r3,64(r2)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
   36b00:	e0bfea17 	ldw	r2,-88(fp)
   36b04:	10000c26 	beq	r2,zero,36b38 <tcp_output+0xd18>
   36b08:	e0fff417 	ldw	r3,-48(fp)
   36b0c:	e0bfea17 	ldw	r2,-88(fp)
   36b10:	1885883a 	add	r2,r3,r2
   36b14:	e0fff217 	ldw	r3,-56(fp)
   36b18:	18c01217 	ldw	r3,72(r3)
   36b1c:	10c0061e 	bne	r2,r3,36b38 <tcp_output+0xd18>
      ti->ti_flags |= TH_PUSH;
   36b20:	e0bff517 	ldw	r2,-44(fp)
   36b24:	10800843 	ldbu	r2,33(r2)
   36b28:	10800214 	ori	r2,r2,8
   36b2c:	1007883a 	mov	r3,r2
   36b30:	e0bff517 	ldw	r2,-44(fp)
   36b34:	10c00845 	stb	r3,33(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
   36b38:	e0bfff17 	ldw	r2,-4(fp)
   36b3c:	10800a83 	ldbu	r2,42(r2)
   36b40:	10803fcc 	andi	r2,r2,255
   36b44:	1080201c 	xori	r2,r2,128
   36b48:	10bfe004 	addi	r2,r2,-128
   36b4c:	10000326 	beq	r2,zero,36b5c <tcp_output+0xd3c>
   36b50:	e0bfff17 	ldw	r2,-4(fp)
   36b54:	10800417 	ldw	r2,16(r2)
   36b58:	1000501e 	bne	r2,zero,36c9c <tcp_output+0xe7c>
   {
      tcp_seq startseq = tp->snd_nxt;
   36b5c:	e0bfff17 	ldw	r2,-4(fp)
   36b60:	10800f17 	ldw	r2,60(r2)
   36b64:	e0bffa15 	stw	r2,-24(fp)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
   36b68:	e0bfec17 	ldw	r2,-80(fp)
   36b6c:	1080008c 	andi	r2,r2,2
   36b70:	10000526 	beq	r2,zero,36b88 <tcp_output+0xd68>
         tp->snd_nxt++;
   36b74:	e0bfff17 	ldw	r2,-4(fp)
   36b78:	10800f17 	ldw	r2,60(r2)
   36b7c:	10c00044 	addi	r3,r2,1
   36b80:	e0bfff17 	ldw	r2,-4(fp)
   36b84:	10c00f15 	stw	r3,60(r2)

      if (flags & TH_FIN)
   36b88:	e0bfec17 	ldw	r2,-80(fp)
   36b8c:	1080004c 	andi	r2,r2,1
   36b90:	10000b26 	beq	r2,zero,36bc0 <tcp_output+0xda0>
      {
         tp->snd_nxt++;
   36b94:	e0bfff17 	ldw	r2,-4(fp)
   36b98:	10800f17 	ldw	r2,60(r2)
   36b9c:	10c00044 	addi	r3,r2,1
   36ba0:	e0bfff17 	ldw	r2,-4(fp)
   36ba4:	10c00f15 	stw	r3,60(r2)
         tp->t_flags |= TF_SENTFIN;
   36ba8:	e0bfff17 	ldw	r2,-4(fp)
   36bac:	10800b0b 	ldhu	r2,44(r2)
   36bb0:	10800414 	ori	r2,r2,16
   36bb4:	1007883a 	mov	r3,r2
   36bb8:	e0bfff17 	ldw	r2,-4(fp)
   36bbc:	10c00b0d 	sth	r3,44(r2)
      }
      tp->snd_nxt += len;
   36bc0:	e0bfff17 	ldw	r2,-4(fp)
   36bc4:	10c00f17 	ldw	r3,60(r2)
   36bc8:	e0bfea17 	ldw	r2,-88(fp)
   36bcc:	1887883a 	add	r3,r3,r2
   36bd0:	e0bfff17 	ldw	r2,-4(fp)
   36bd4:	10c00f15 	stw	r3,60(r2)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
   36bd8:	e0bfff17 	ldw	r2,-4(fp)
   36bdc:	10c00f17 	ldw	r3,60(r2)
   36be0:	e0bfff17 	ldw	r2,-4(fp)
   36be4:	10801a17 	ldw	r2,104(r2)
   36be8:	1885c83a 	sub	r2,r3,r2
   36bec:	0080160e 	bge	zero,r2,36c48 <tcp_output+0xe28>
      {
         tp->snd_max = tp->snd_nxt;
   36bf0:	e0bfff17 	ldw	r2,-4(fp)
   36bf4:	10c00f17 	ldw	r3,60(r2)
   36bf8:	e0bfff17 	ldw	r2,-4(fp)
   36bfc:	10c01a15 	stw	r3,104(r2)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
   36c00:	e0bfff17 	ldw	r2,-4(fp)
   36c04:	10801e17 	ldw	r2,120(r2)
   36c08:	10000f1e 	bne	r2,zero,36c48 <tcp_output+0xe28>
         {
            tp->t_rttick = cticks;
   36c0c:	00800174 	movhi	r2,5
   36c10:	108fbe04 	addi	r2,r2,16120
   36c14:	10c00017 	ldw	r3,0(r2)
   36c18:	e0bfff17 	ldw	r2,-4(fp)
   36c1c:	10c01e15 	stw	r3,120(r2)
            tp->t_rtseq = startseq;
   36c20:	e0bfff17 	ldw	r2,-4(fp)
   36c24:	e0fffa17 	ldw	r3,-24(fp)
   36c28:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_segstimed++;
   36c2c:	008001b4 	movhi	r2,6
   36c30:	10b90b04 	addi	r2,r2,-7124
   36c34:	10800617 	ldw	r2,24(r2)
   36c38:	10c00044 	addi	r3,r2,1
   36c3c:	008001b4 	movhi	r2,6
   36c40:	10b90b04 	addi	r2,r2,-7124
   36c44:	10c00615 	stw	r3,24(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
   36c48:	e0bfff17 	ldw	r2,-4(fp)
   36c4c:	10800317 	ldw	r2,12(r2)
   36c50:	1000111e 	bne	r2,zero,36c98 <tcp_output+0xe78>
          tp->snd_nxt != tp->snd_una) 
   36c54:	e0bfff17 	ldw	r2,-4(fp)
   36c58:	10c00f17 	ldw	r3,60(r2)
   36c5c:	e0bfff17 	ldw	r2,-4(fp)
   36c60:	10800e17 	ldw	r2,56(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
   36c64:	18800c26 	beq	r3,r2,36c98 <tcp_output+0xe78>
          tp->snd_nxt != tp->snd_una) 
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
   36c68:	e0bfff17 	ldw	r2,-4(fp)
   36c6c:	10c00817 	ldw	r3,32(r2)
   36c70:	e0bfff17 	ldw	r2,-4(fp)
   36c74:	10c00315 	stw	r3,12(r2)
         if (tp->t_timer[TCPT_PERSIST]) 
   36c78:	e0bfff17 	ldw	r2,-4(fp)
   36c7c:	10800417 	ldw	r2,16(r2)
   36c80:	10000526 	beq	r2,zero,36c98 <tcp_output+0xe78>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
   36c84:	e0bfff17 	ldw	r2,-4(fp)
   36c88:	10000415 	stw	zero,16(r2)
            tp->t_rxtshift = 0;
   36c8c:	e0bfff17 	ldw	r2,-4(fp)
   36c90:	10000715 	stw	zero,28(r2)
   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
   {
   36c94:	00000f06 	br	36cd4 <tcp_output+0xeb4>
   36c98:	00000e06 	br	36cd4 <tcp_output+0xeb4>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
   36c9c:	e0bfff17 	ldw	r2,-4(fp)
   36ca0:	10c00f17 	ldw	r3,60(r2)
   36ca4:	e0bfea17 	ldw	r2,-88(fp)
   36ca8:	1887883a 	add	r3,r3,r2
   36cac:	e0bfff17 	ldw	r2,-4(fp)
   36cb0:	10801a17 	ldw	r2,104(r2)
   36cb4:	1885c83a 	sub	r2,r3,r2
   36cb8:	0080060e 	bge	zero,r2,36cd4 <tcp_output+0xeb4>
         tp->snd_max = tp->snd_nxt + len;
   36cbc:	e0bfff17 	ldw	r2,-4(fp)
   36cc0:	10c00f17 	ldw	r3,60(r2)
   36cc4:	e0bfea17 	ldw	r2,-88(fp)
   36cc8:	1887883a 	add	r3,r3,r2
   36ccc:	e0bfff17 	ldw	r2,-4(fp)
   36cd0:	10c01a15 	stw	r3,104(r2)
   tcp_trace("tcp_output: sending, state %d, tcpcb: %x",
    tp->t_state, tp );
#endif

#ifdef MUTE_WARNS
   error = 0;
   36cd4:	e03ffb15 	stw	zero,-20(fp)
   if(so->so_domain != AF_INET6)
#endif   /* IP_V6 */
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
   36cd8:	e0bfed17 	ldw	r2,-76(fp)
   36cdc:	10800317 	ldw	r2,12(r2)
   36ce0:	e0bffc15 	stw	r2,-16(fp)
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
   36ce4:	e0bfee17 	ldw	r2,-72(fp)
   36ce8:	1007883a 	mov	r3,r2
   36cec:	e0bfea17 	ldw	r2,-88(fp)
   36cf0:	1885883a 	add	r2,r3,r2
   36cf4:	10800a04 	addi	r2,r2,40
   36cf8:	1007883a 	mov	r3,r2
   36cfc:	e0bffc17 	ldw	r2,-16(fp)
   36d00:	10c0008d 	sth	r3,2(r2)
      error = ip_output(m, so->so_optsPack);
   36d04:	e0bff217 	ldw	r2,-56(fp)
   36d08:	10801f17 	ldw	r2,124(r2)
   36d0c:	e13fed17 	ldw	r4,-76(fp)
   36d10:	100b883a 	mov	r5,r2
   36d14:	002cb440 	call	2cb44 <ip_output>
   36d18:	e0bffb15 	stw	r2,-20(fp)
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
   36d1c:	e0bffb17 	ldw	r2,-20(fp)
   36d20:	10001326 	beq	r2,zero,36d70 <tcp_output+0xf50>
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
   36d24:	e0bffb17 	ldw	r2,-20(fp)
   36d28:	10801a58 	cmpnei	r2,r2,105
   36d2c:	10000e1e 	bne	r2,zero,36d68 <tcp_output+0xf48>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
   36d30:	e0bfed17 	ldw	r2,-76(fp)
   36d34:	10800817 	ldw	r2,32(r2)
   36d38:	1000031e 	bne	r2,zero,36d48 <tcp_output+0xf28>
            m = m->m_next;
   36d3c:	e0bfed17 	ldw	r2,-76(fp)
   36d40:	10800617 	ldw	r2,24(r2)
   36d44:	e0bfed15 	stw	r2,-76(fp)
         m_freem(m); /* free the mbuf chain */
   36d48:	e13fed17 	ldw	r4,-76(fp)
   36d4c:	002c1a40 	call	2c1a4 <m_freem>
         tcp_quench(tp->t_inpcb);
   36d50:	e0bfff17 	ldw	r2,-4(fp)
   36d54:	10800d17 	ldw	r2,52(r2)
   36d58:	1009883a 	mov	r4,r2
   36d5c:	00378000 	call	37800 <tcp_quench>
         return (error);
   36d60:	e0bffb17 	ldw	r2,-20(fp)
   36d64:	00002b06 	br	36e14 <tcp_output+0xff4>
      }
      return (error);
   36d68:	e0bffb17 	ldw	r2,-20(fp)
   36d6c:	00002906 	br	36e14 <tcp_output+0xff4>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
   36d70:	008001b4 	movhi	r2,6
   36d74:	10b8dd04 	addi	r2,r2,-7308
   36d78:	10800a17 	ldw	r2,40(r2)
   36d7c:	10c00044 	addi	r3,r2,1
   36d80:	008001b4 	movhi	r2,6
   36d84:	10b8dd04 	addi	r2,r2,-7308
   36d88:	10c00a15 	stw	r3,40(r2)
   tcpstat.tcps_sndtotal++;
   36d8c:	008001b4 	movhi	r2,6
   36d90:	10b90b04 	addi	r2,r2,-7124
   36d94:	10800f17 	ldw	r2,60(r2)
   36d98:	10c00044 	addi	r3,r2,1
   36d9c:	008001b4 	movhi	r2,6
   36da0:	10b90b04 	addi	r2,r2,-7124
   36da4:	10c00f15 	stw	r3,60(r2)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
   36da8:	e0bfeb17 	ldw	r2,-84(fp)
   36dac:	00800e0e 	bge	zero,r2,36de8 <tcp_output+0xfc8>
   36db0:	e0bfff17 	ldw	r2,-4(fp)
   36db4:	10c01617 	ldw	r3,88(r2)
   36db8:	e0bfeb17 	ldw	r2,-84(fp)
   36dbc:	1887883a 	add	r3,r3,r2
   36dc0:	e0bfff17 	ldw	r2,-4(fp)
   36dc4:	10801917 	ldw	r2,100(r2)
   36dc8:	1885c83a 	sub	r2,r3,r2
   36dcc:	0080060e 	bge	zero,r2,36de8 <tcp_output+0xfc8>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
   36dd0:	e0bfff17 	ldw	r2,-4(fp)
   36dd4:	10c01617 	ldw	r3,88(r2)
   36dd8:	e0bfeb17 	ldw	r2,-84(fp)
   36ddc:	1887883a 	add	r3,r3,r2
   36de0:	e0bfff17 	ldw	r2,-4(fp)
   36de4:	10c01915 	stw	r3,100(r2)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
   36de8:	e0bfff17 	ldw	r2,-4(fp)
   36dec:	10c00b0b 	ldhu	r3,44(r2)
   36df0:	00bfef04 	movi	r2,-68
   36df4:	1884703a 	and	r2,r3,r2
   36df8:	1007883a 	mov	r3,r2
   36dfc:	e0bfff17 	ldw	r2,-4(fp)
   36e00:	10c00b0d 	sth	r3,44(r2)
   if (sendalot)
   36e04:	e0bfef17 	ldw	r2,-68(fp)
   36e08:	10000126 	beq	r2,zero,36e10 <tcp_output+0xff0>
      goto again;
   36e0c:	003c1506 	br	35e64 <__alt_mem_descriptor_memory+0xdeff5e64>
   return (0);
   36e10:	0005883a 	mov	r2,zero
}
   36e14:	e037883a 	mov	sp,fp
   36e18:	dfc00117 	ldw	ra,4(sp)
   36e1c:	df000017 	ldw	fp,0(sp)
   36e20:	dec00204 	addi	sp,sp,8
   36e24:	f800283a 	ret

00036e28 <tcp_setpersist>:
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
   36e28:	defffc04 	addi	sp,sp,-16
   36e2c:	dfc00315 	stw	ra,12(sp)
   36e30:	df000215 	stw	fp,8(sp)
   36e34:	df000204 	addi	fp,sp,8
   36e38:	e13fff15 	stw	r4,-4(fp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
   36e3c:	e0bfff17 	ldw	r2,-4(fp)
   36e40:	10802017 	ldw	r2,128(r2)
   36e44:	1007d0ba 	srai	r3,r2,2
   36e48:	e0bfff17 	ldw	r2,-4(fp)
   36e4c:	10802117 	ldw	r2,132(r2)
   36e50:	1885883a 	add	r2,r3,r2
   36e54:	1005d07a 	srai	r2,r2,1
   36e58:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_timer[TCPT_REXMT])
   36e5c:	e0bfff17 	ldw	r2,-4(fp)
   36e60:	10800317 	ldw	r2,12(r2)
   36e64:	10000326 	beq	r2,zero,36e74 <tcp_setpersist+0x4c>
      panic("tcp_output REXMT");
   36e68:	01000174 	movhi	r4,5
   36e6c:	213b8904 	addi	r4,r4,-4572
   36e70:	00267380 	call	26738 <panic>
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
   36e74:	e0bffe17 	ldw	r2,-8(fp)
   36e78:	1009883a 	mov	r4,r2
   36e7c:	e0bfff17 	ldw	r2,-4(fp)
   36e80:	10c00717 	ldw	r3,28(r2)
   36e84:	00800174 	movhi	r2,5
   36e88:	108658c4 	addi	r2,r2,6499
   36e8c:	10c5883a 	add	r2,r2,r3
   36e90:	10800003 	ldbu	r2,0(r2)
   36e94:	10803fcc 	andi	r2,r2,255
   36e98:	2085383a 	mul	r2,r4,r2
   36e9c:	10ffffcc 	andi	r3,r2,65535
   36ea0:	18e0001c 	xori	r3,r3,32768
   36ea4:	18e00004 	addi	r3,r3,-32768
   36ea8:	e0bfff17 	ldw	r2,-4(fp)
   36eac:	10c00415 	stw	r3,16(r2)
   36eb0:	e0bfff17 	ldw	r2,-4(fp)
   36eb4:	10800417 	ldw	r2,16(r2)
   36eb8:	10800288 	cmpgei	r2,r2,10
   36ebc:	1000041e 	bne	r2,zero,36ed0 <tcp_setpersist+0xa8>
   36ec0:	e0bfff17 	ldw	r2,-4(fp)
   36ec4:	00c00284 	movi	r3,10
   36ec8:	10c00415 	stw	r3,16(r2)
   36ecc:	00000706 	br	36eec <tcp_setpersist+0xc4>
   36ed0:	e0bfff17 	ldw	r2,-4(fp)
   36ed4:	10800417 	ldw	r2,16(r2)
   36ed8:	10801e50 	cmplti	r2,r2,121
   36edc:	1000031e 	bne	r2,zero,36eec <tcp_setpersist+0xc4>
   36ee0:	e0bfff17 	ldw	r2,-4(fp)
   36ee4:	00c01e04 	movi	r3,120
   36ee8:	10c00415 	stw	r3,16(r2)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
   36eec:	e0bfff17 	ldw	r2,-4(fp)
   36ef0:	10800717 	ldw	r2,28(r2)
   36ef4:	10800308 	cmpgei	r2,r2,12
   36ef8:	1000051e 	bne	r2,zero,36f10 <tcp_setpersist+0xe8>
      tp->t_rxtshift++;
   36efc:	e0bfff17 	ldw	r2,-4(fp)
   36f00:	10800717 	ldw	r2,28(r2)
   36f04:	10c00044 	addi	r3,r2,1
   36f08:	e0bfff17 	ldw	r2,-4(fp)
   36f0c:	10c00715 	stw	r3,28(r2)

}
   36f10:	e037883a 	mov	sp,fp
   36f14:	dfc00117 	ldw	ra,4(sp)
   36f18:	df000017 	ldw	fp,0(sp)
   36f1c:	dec00204 	addi	sp,sp,8
   36f20:	f800283a 	ret

00036f24 <bld_options>:
 * RETURNS: length of option data added to buffer
 */

static int
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
   36f24:	defff804 	addi	sp,sp,-32
   36f28:	dfc00715 	stw	ra,28(sp)
   36f2c:	df000615 	stw	fp,24(sp)
   36f30:	df000604 	addi	fp,sp,24
   36f34:	e13ffc15 	stw	r4,-16(fp)
   36f38:	e17ffd15 	stw	r5,-12(fp)
   36f3c:	e1bffe15 	stw	r6,-8(fp)
   36f40:	e1ffff15 	stw	r7,-4(fp)
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
   36f44:	e0bffc17 	ldw	r2,-16(fp)
   36f48:	10800b0b 	ldhu	r2,44(r2)
   36f4c:	10bfffcc 	andi	r2,r2,65535
   36f50:	1080020c 	andi	r2,r2,8
   36f54:	10000226 	beq	r2,zero,36f60 <bld_options+0x3c>
      return 0;
   36f58:	0005883a 	mov	r2,zero
   36f5c:	00001e06 	br	36fd8 <bld_options+0xb4>

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
   36f60:	e0bffe17 	ldw	r2,-8(fp)
   36f64:	1080008c 	andi	r2,r2,2
   36f68:	10001926 	beq	r2,zero,36fd0 <bld_options+0xac>
   {
      mss   =  (u_short)tcp_mss(so);
   36f6c:	e13fff17 	ldw	r4,-4(fp)
   36f70:	0035d280 	call	35d28 <tcp_mss>
   36f74:	e0bffb0d 	sth	r2,-20(fp)

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
   36f78:	e0bffd17 	ldw	r2,-12(fp)
   36f7c:	00c00084 	movi	r3,2
   36f80:	10c00005 	stb	r3,0(r2)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
   36f84:	e0bffd17 	ldw	r2,-12(fp)
   36f88:	10800044 	addi	r2,r2,1
   36f8c:	00c00104 	movi	r3,4
   36f90:	10c00005 	stb	r3,0(r2)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
   36f94:	e0bffd17 	ldw	r2,-12(fp)
   36f98:	10800084 	addi	r2,r2,2
   36f9c:	e0fffb0b 	ldhu	r3,-20(fp)
   36fa0:	1806d23a 	srli	r3,r3,8
   36fa4:	10c00005 	stb	r3,0(r2)
      *(cp + 3)  = (u_char) (mss & 0xff);
   36fa8:	e0bffd17 	ldw	r2,-12(fp)
   36fac:	108000c4 	addi	r2,r2,3
   36fb0:	e0fffb0b 	ldhu	r3,-20(fp)
   36fb4:	10c00005 	stb	r3,0(r2)
      len = 4;
   36fb8:	00800104 	movi	r2,4
   36fbc:	e0bffa15 	stw	r2,-24(fp)
      cp += 4;
   36fc0:	e0bffd17 	ldw	r2,-12(fp)
   36fc4:	10800104 	addi	r2,r2,4
   36fc8:	e0bffd15 	stw	r2,-12(fp)
   36fcc:	00000106 	br	36fd4 <bld_options+0xb0>
   }
   else
      len = 0;
   36fd0:	e03ffa15 	stw	zero,-24(fp)
      len += 10;
   }
#endif   /* TCP_TIMESTAMP */

   USE_ARG(so);
   return len;
   36fd4:	e0bffa17 	ldw	r2,-24(fp)
}
   36fd8:	e037883a 	mov	sp,fp
   36fdc:	dfc00117 	ldw	ra,4(sp)
   36fe0:	df000017 	ldw	fp,0(sp)
   36fe4:	dec00204 	addi	sp,sp,8
   36fe8:	f800283a 	ret

00036fec <tcp_init>:
 * RETURNS: 
 */

void
tcp_init()
{
   36fec:	deffff04 	addi	sp,sp,-4
   36ff0:	df000015 	stw	fp,0(sp)
   36ff4:	d839883a 	mov	fp,sp
   tcp_iss = 1;      /* wrong */
   36ff8:	00800174 	movhi	r2,5
   36ffc:	108fcb04 	addi	r2,r2,16172
   37000:	00c00044 	movi	r3,1
   37004:	10c00015 	stw	r3,0(r2)
   tcb.inp_next = tcb.inp_prev = &tcb;
   37008:	008001b4 	movhi	r2,6
   3700c:	10b90004 	addi	r2,r2,-7168
   37010:	00c001b4 	movhi	r3,6
   37014:	18f90004 	addi	r3,r3,-7168
   37018:	10c00115 	stw	r3,4(r2)
   3701c:	008001b4 	movhi	r2,6
   37020:	10b90004 	addi	r2,r2,-7168
   37024:	10c00117 	ldw	r3,4(r2)
   37028:	008001b4 	movhi	r2,6
   3702c:	10b90004 	addi	r2,r2,-7168
   37030:	10c00015 	stw	r3,0(r2)
}
   37034:	e037883a 	mov	sp,fp
   37038:	df000017 	ldw	fp,0(sp)
   3703c:	dec00104 	addi	sp,sp,4
   37040:	f800283a 	ret

00037044 <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
   37044:	defffb04 	addi	sp,sp,-20
   37048:	dfc00415 	stw	ra,16(sp)
   3704c:	df000315 	stw	fp,12(sp)
   37050:	df000304 	addi	fp,sp,12
   37054:	e13fff15 	stw	r4,-4(fp)
   struct inpcb * inp   =  tp->t_inpcb;
   37058:	e0bfff17 	ldw	r2,-4(fp)
   3705c:	10800d17 	ldw	r2,52(r2)
   37060:	e0bffe15 	stw	r2,-8(fp)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
   37064:	e0bfff17 	ldw	r2,-4(fp)
   37068:	10800c17 	ldw	r2,48(r2)
   3706c:	e0bffd15 	stw	r2,-12(fp)
   37070:	e0bffd17 	ldw	r2,-12(fp)
   37074:	1000071e 	bne	r2,zero,37094 <tcp_template+0x50>
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
   37078:	01000a04 	movi	r4,40
   3707c:	002bce00 	call	2bce0 <npalloc>
   37080:	e0bffd15 	stw	r2,-12(fp)
      if (n == NULL)
   37084:	e0bffd17 	ldw	r2,-12(fp)
   37088:	1000021e 	bne	r2,zero,37094 <tcp_template+0x50>
         return (0);
   3708c:	0005883a 	mov	r2,zero
   37090:	00002906 	br	37138 <tcp_template+0xf4>
   }
   n->ti_next = n->ti_prev = 0;
   37094:	e0bffd17 	ldw	r2,-12(fp)
   37098:	10000115 	stw	zero,4(r2)
   3709c:	e0bffd17 	ldw	r2,-12(fp)
   370a0:	10c00117 	ldw	r3,4(r2)
   370a4:	e0bffd17 	ldw	r2,-12(fp)
   370a8:	10c00015 	stw	r3,0(r2)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   370ac:	e0bffd17 	ldw	r2,-12(fp)
   370b0:	00c50004 	movi	r3,5120
   370b4:	10c0028d 	sth	r3,10(r2)
   n->ti_src = inp->inp_laddr;
   370b8:	e0bffd17 	ldw	r2,-12(fp)
   370bc:	e0fffe17 	ldw	r3,-8(fp)
   370c0:	18c00417 	ldw	r3,16(r3)
   370c4:	10c00315 	stw	r3,12(r2)
   n->ti_dst = inp->inp_faddr;
   370c8:	e0bffd17 	ldw	r2,-12(fp)
   370cc:	e0fffe17 	ldw	r3,-8(fp)
   370d0:	18c00317 	ldw	r3,12(r3)
   370d4:	10c00415 	stw	r3,16(r2)
   n->ti_sport = inp->inp_lport;
   370d8:	e0bffe17 	ldw	r2,-8(fp)
   370dc:	10c0078b 	ldhu	r3,30(r2)
   370e0:	e0bffd17 	ldw	r2,-12(fp)
   370e4:	10c0050d 	sth	r3,20(r2)
   n->ti_dport = inp->inp_fport;
   370e8:	e0bffe17 	ldw	r2,-8(fp)
   370ec:	10c0070b 	ldhu	r3,28(r2)
   370f0:	e0bffd17 	ldw	r2,-12(fp)
   370f4:	10c0058d 	sth	r3,22(r2)
   n->ti_seq = 0;
   370f8:	e0bffd17 	ldw	r2,-12(fp)
   370fc:	10000615 	stw	zero,24(r2)
   n->ti_ack = 0;
   37100:	e0bffd17 	ldw	r2,-12(fp)
   37104:	10000715 	stw	zero,28(r2)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
   37108:	e0bffd17 	ldw	r2,-12(fp)
   3710c:	00c01404 	movi	r3,80
   37110:	10c00805 	stb	r3,32(r2)
   n->ti_flags = 0;
   37114:	e0bffd17 	ldw	r2,-12(fp)
   37118:	10000845 	stb	zero,33(r2)
   n->ti_win = 0;
   3711c:	e0bffd17 	ldw	r2,-12(fp)
   37120:	1000088d 	sth	zero,34(r2)
   n->ti_sum = 0;
   37124:	e0bffd17 	ldw	r2,-12(fp)
   37128:	1000090d 	sth	zero,36(r2)
   n->ti_urp = 0;
   3712c:	e0bffd17 	ldw	r2,-12(fp)
   37130:	1000098d 	sth	zero,38(r2)
   return (n);
   37134:	e0bffd17 	ldw	r2,-12(fp)
}
   37138:	e037883a 	mov	sp,fp
   3713c:	dfc00117 	ldw	ra,4(sp)
   37140:	df000017 	ldw	fp,0(sp)
   37144:	dec00204 	addi	sp,sp,8
   37148:	f800283a 	ret

0003714c <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
   3714c:	defff204 	addi	sp,sp,-56
   37150:	dfc00d15 	stw	ra,52(sp)
   37154:	df000c15 	stw	fp,48(sp)
   37158:	df000c04 	addi	fp,sp,48
   3715c:	e13ffc15 	stw	r4,-16(fp)
   37160:	e17ffd15 	stw	r5,-12(fp)
   37164:	e1bffe15 	stw	r6,-8(fp)
   37168:	e1ffff15 	stw	r7,-4(fp)
   int      tlen;       /* tcp data len - 0 or 1 */
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
   3716c:	e03ff615 	stw	zero,-40(fp)
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
   37170:	e0bffc17 	ldw	r2,-16(fp)
   37174:	10001726 	beq	r2,zero,371d4 <tcp_respond+0x88>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
   37178:	e0bffc17 	ldw	r2,-16(fp)
   3717c:	10800d17 	ldw	r2,52(r2)
   37180:	10800817 	ldw	r2,32(r2)
   37184:	10800b17 	ldw	r2,44(r2)
   37188:	1007883a 	mov	r3,r2
   3718c:	e0bffc17 	ldw	r2,-16(fp)
   37190:	10800d17 	ldw	r2,52(r2)
   37194:	10800817 	ldw	r2,32(r2)
   37198:	10800a17 	ldw	r2,40(r2)
   3719c:	1885c83a 	sub	r2,r3,r2
   371a0:	10000a16 	blt	r2,zero,371cc <tcp_respond+0x80>
   371a4:	e0bffc17 	ldw	r2,-16(fp)
   371a8:	10800d17 	ldw	r2,52(r2)
   371ac:	10800817 	ldw	r2,32(r2)
   371b0:	10c00b17 	ldw	r3,44(r2)
   371b4:	e0bffc17 	ldw	r2,-16(fp)
   371b8:	10800d17 	ldw	r2,52(r2)
   371bc:	10800817 	ldw	r2,32(r2)
   371c0:	10800a17 	ldw	r2,40(r2)
   371c4:	1885c83a 	sub	r2,r3,r2
   371c8:	00000106 	br	371d0 <tcp_respond+0x84>
   371cc:	0005883a 	mov	r2,zero
   371d0:	e0bff615 	stw	r2,-40(fp)

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
   371d4:	e0800217 	ldw	r2,8(fp)
   371d8:	1000271e 	bne	r2,zero,37278 <tcp_respond+0x12c>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
   371dc:	010000c4 	movi	r4,3
   371e0:	01401004 	movi	r5,64
   371e4:	002bf0c0 	call	2bf0c <m_getnbuf>
   371e8:	e0bff715 	stw	r2,-36(fp)
      if (m == NULL)
   371ec:	e0bff717 	ldw	r2,-36(fp)
   371f0:	1000011e 	bne	r2,zero,371f8 <tcp_respond+0xac>
         return;
   371f4:	0000d306 	br	37544 <tcp_respond+0x3f8>
      tlen = 1;   /* Keepalives have one byte of data */
   371f8:	00800044 	movi	r2,1
   371fc:	e0bff415 	stw	r2,-48(fp)
      m->m_len = TCPIPHDRSZ + tlen;
   37200:	e0bff417 	ldw	r2,-48(fp)
   37204:	10800a04 	addi	r2,r2,40
   37208:	1007883a 	mov	r3,r2
   3720c:	e0bff717 	ldw	r2,-36(fp)
   37210:	10c00215 	stw	r3,8(r2)
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
   37214:	e0bff717 	ldw	r2,-36(fp)
   37218:	10800317 	ldw	r2,12(r2)
   3721c:	e0bff815 	stw	r2,-32(fp)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
   37220:	e0bff717 	ldw	r2,-36(fp)
   37224:	10800117 	ldw	r2,4(r2)
   37228:	10800117 	ldw	r2,4(r2)
   3722c:	e0fff817 	ldw	r3,-32(fp)
   37230:	1880032e 	bgeu	r3,r2,37240 <tcp_respond+0xf4>
      {
         panic("tcp_respond- packet ptr underflow\n");
   37234:	01000174 	movhi	r4,5
   37238:	213b8e04 	addi	r4,r4,-4552
   3723c:	00267380 	call	26738 <panic>
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
   37240:	e13ff817 	ldw	r4,-32(fp)
   37244:	e17ffd17 	ldw	r5,-12(fp)
   37248:	01800a04 	movi	r6,40
   3724c:	0007c900 	call	7c90 <memcpy>
      ti = tmp_thdr;
   37250:	e0bff817 	ldw	r2,-32(fp)
   37254:	e0bffd15 	stw	r2,-12(fp)
      flags = TH_ACK;
   37258:	00800404 	movi	r2,16
   3725c:	e0800215 	stw	r2,8(fp)
      domain = tp->t_inpcb->inp_socket->so_domain;
   37260:	e0bffc17 	ldw	r2,-16(fp)
   37264:	10800d17 	ldw	r2,52(r2)
   37268:	10800817 	ldw	r2,32(r2)
   3726c:	10800517 	ldw	r2,20(r2)
   37270:	e0bff515 	stw	r2,-44(fp)
   37274:	00003b06 	br	37364 <tcp_respond+0x218>
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
   37278:	e0800317 	ldw	r2,12(fp)
   3727c:	e0bff715 	stw	r2,-36(fp)
      if(m->pkt->type == IPTP)   /* IPv4 packet */
   37280:	e0bff717 	ldw	r2,-36(fp)
   37284:	10800117 	ldw	r2,4(r2)
   37288:	1080080b 	ldhu	r2,32(r2)
   3728c:	10bfffcc 	andi	r2,r2,65535
   37290:	10800218 	cmpnei	r2,r2,8
   37294:	1000031e 	bne	r2,zero,372a4 <tcp_respond+0x158>
         domain = AF_INET;
   37298:	00800084 	movi	r2,2
   3729c:	e0bff515 	stw	r2,-44(fp)
   372a0:	00000206 	br	372ac <tcp_respond+0x160>
      else
         domain = AF_INET6;
   372a4:	008000c4 	movi	r2,3
   372a8:	e0bff515 	stw	r2,-44(fp)

      m_freem(m->m_next);
   372ac:	e0bff717 	ldw	r2,-36(fp)
   372b0:	10800617 	ldw	r2,24(r2)
   372b4:	1009883a 	mov	r4,r2
   372b8:	002c1a40 	call	2c1a4 <m_freem>
      m->m_next = 0;
   372bc:	e0bff717 	ldw	r2,-36(fp)
   372c0:	10000615 	stw	zero,24(r2)
      tlen = 0;         /* NO data */
   372c4:	e03ff415 	stw	zero,-48(fp)
      m->m_len = TCPIPHDRSZ;
   372c8:	e0bff717 	ldw	r2,-36(fp)
   372cc:	00c00a04 	movi	r3,40
   372d0:	10c00215 	stw	r3,8(r2)
      xchg(ti->ti_dport, ti->ti_sport, u_short);
   372d4:	e0bffd17 	ldw	r2,-12(fp)
   372d8:	1080058b 	ldhu	r2,22(r2)
   372dc:	e0bff90d 	sth	r2,-28(fp)
   372e0:	e0bffd17 	ldw	r2,-12(fp)
   372e4:	10c0050b 	ldhu	r3,20(r2)
   372e8:	e0bffd17 	ldw	r2,-12(fp)
   372ec:	10c0058d 	sth	r3,22(r2)
   372f0:	e0bffd17 	ldw	r2,-12(fp)
   372f4:	e0fff90b 	ldhu	r3,-28(fp)
   372f8:	10c0050d 	sth	r3,20(r2)
      if(m->pkt->type == IPTP)
   372fc:	e0bff717 	ldw	r2,-36(fp)
   37300:	10800117 	ldw	r2,4(r2)
   37304:	1080080b 	ldhu	r2,32(r2)
   37308:	10bfffcc 	andi	r2,r2,65535
   3730c:	10800218 	cmpnei	r2,r2,8
   37310:	10000a1e 	bne	r2,zero,3733c <tcp_respond+0x1f0>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
   37314:	e0bffd17 	ldw	r2,-12(fp)
   37318:	10800417 	ldw	r2,16(r2)
   3731c:	e0bffa15 	stw	r2,-24(fp)
   37320:	e0bffd17 	ldw	r2,-12(fp)
   37324:	10c00317 	ldw	r3,12(r2)
   37328:	e0bffd17 	ldw	r2,-12(fp)
   3732c:	10c00415 	stw	r3,16(r2)
   37330:	e0bffd17 	ldw	r2,-12(fp)
   37334:	e0fffa17 	ldw	r3,-24(fp)
   37338:	10c00315 	stw	r3,12(r2)
      if (flags & TH_RST)  /* count resets in MIB */
   3733c:	e0800217 	ldw	r2,8(fp)
   37340:	1080010c 	andi	r2,r2,4
   37344:	10000726 	beq	r2,zero,37364 <tcp_respond+0x218>
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   37348:	008001b4 	movhi	r2,6
   3734c:	10b8dd04 	addi	r2,r2,-7308
   37350:	10800e17 	ldw	r2,56(r2)
   37354:	10c00044 	addi	r3,r2,1
   37358:	008001b4 	movhi	r2,6
   3735c:	10b8dd04 	addi	r2,r2,-7308
   37360:	10c00e15 	stw	r3,56(r2)
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
   37364:	e0bfff17 	ldw	r2,-4(fp)
   37368:	1006d63a 	srli	r3,r2,24
   3736c:	e0bfff17 	ldw	r2,-4(fp)
   37370:	1004d23a 	srli	r2,r2,8
   37374:	10bfc00c 	andi	r2,r2,65280
   37378:	1886b03a 	or	r3,r3,r2
   3737c:	e0bfff17 	ldw	r2,-4(fp)
   37380:	10bfc00c 	andi	r2,r2,65280
   37384:	1004923a 	slli	r2,r2,8
   37388:	1886b03a 	or	r3,r3,r2
   3738c:	e0bfff17 	ldw	r2,-4(fp)
   37390:	1004963a 	slli	r2,r2,24
   37394:	1886b03a 	or	r3,r3,r2
   37398:	e0bffd17 	ldw	r2,-12(fp)
   3739c:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(ack);
   373a0:	e0bffe17 	ldw	r2,-8(fp)
   373a4:	1006d63a 	srli	r3,r2,24
   373a8:	e0bffe17 	ldw	r2,-8(fp)
   373ac:	1004d23a 	srli	r2,r2,8
   373b0:	10bfc00c 	andi	r2,r2,65280
   373b4:	1886b03a 	or	r3,r3,r2
   373b8:	e0bffe17 	ldw	r2,-8(fp)
   373bc:	10bfc00c 	andi	r2,r2,65280
   373c0:	1004923a 	slli	r2,r2,8
   373c4:	1886b03a 	or	r3,r3,r2
   373c8:	e0bffe17 	ldw	r2,-8(fp)
   373cc:	1004963a 	slli	r2,r2,24
   373d0:	1886b03a 	or	r3,r3,r2
   373d4:	e0bffd17 	ldw	r2,-12(fp)
   373d8:	10c00715 	stw	r3,28(r2)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   373dc:	e0bffd17 	ldw	r2,-12(fp)
   373e0:	00c01404 	movi	r3,80
   373e4:	10c00805 	stb	r3,32(r2)
   ti->ti_flags = (u_char)flags;
   373e8:	e0800217 	ldw	r2,8(fp)
   373ec:	1007883a 	mov	r3,r2
   373f0:	e0bffd17 	ldw	r2,-12(fp)
   373f4:	10c00845 	stb	r3,33(r2)
   ti->ti_win = htons((u_short)win);
   373f8:	e0bff617 	ldw	r2,-40(fp)
   373fc:	10bfffcc 	andi	r2,r2,65535
   37400:	1004d23a 	srli	r2,r2,8
   37404:	1007883a 	mov	r3,r2
   37408:	e0bff617 	ldw	r2,-40(fp)
   3740c:	10bfffcc 	andi	r2,r2,65535
   37410:	1004923a 	slli	r2,r2,8
   37414:	1884b03a 	or	r2,r3,r2
   37418:	1007883a 	mov	r3,r2
   3741c:	e0bffd17 	ldw	r2,-12(fp)
   37420:	10c0088d 	sth	r3,34(r2)
   ti->ti_urp = 0;
   37424:	e0bffd17 	ldw	r2,-12(fp)
   37428:	1000098d 	sth	zero,38(r2)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
   3742c:	e0bff517 	ldw	r2,-44(fp)
   37430:	108000a0 	cmpeqi	r2,r2,2
   37434:	10004026 	beq	r2,zero,37538 <tcp_respond+0x3ec>
#ifdef IP_V4
      case AF_INET:
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));
   37438:	e0bffd17 	ldw	r2,-12(fp)
   3743c:	e0bffb15 	stw	r2,-20(fp)

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
   37440:	e0bff417 	ldw	r2,-48(fp)
   37444:	10800a04 	addi	r2,r2,40
   37448:	1007883a 	mov	r3,r2
   3744c:	e0bffb17 	ldw	r2,-20(fp)
   37450:	10c0008d 	sth	r3,2(r2)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
   37454:	e0bff717 	ldw	r2,-36(fp)
   37458:	10800117 	ldw	r2,4(r2)
   3745c:	10c00117 	ldw	r3,4(r2)
   37460:	00800174 	movhi	r2,5
   37464:	108f9704 	addi	r2,r2,15964
   37468:	10800017 	ldw	r2,0(r2)
   3746c:	1885883a 	add	r2,r3,r2
   37470:	e0fffb17 	ldw	r3,-20(fp)
   37474:	18800436 	bltu	r3,r2,37488 <tcp_respond+0x33c>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
   37478:	e0bff717 	ldw	r2,-36(fp)
   3747c:	e0fffb17 	ldw	r3,-20(fp)
   37480:	10c00315 	stw	r3,12(r2)
   37484:	00001306 	br	374d4 <tcp_respond+0x388>
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
   37488:	e0bff717 	ldw	r2,-36(fp)
   3748c:	10c00117 	ldw	r3,4(r2)
   37490:	e0bff717 	ldw	r2,-36(fp)
   37494:	10800117 	ldw	r2,4(r2)
   37498:	11000117 	ldw	r4,4(r2)
   3749c:	00800174 	movhi	r2,5
   374a0:	108f9704 	addi	r2,r2,15964
   374a4:	10800017 	ldw	r2,0(r2)
   374a8:	2085883a 	add	r2,r4,r2
   374ac:	18800315 	stw	r2,12(r3)
   374b0:	18c00317 	ldw	r3,12(r3)
   374b4:	e0bff717 	ldw	r2,-36(fp)
   374b8:	10c00315 	stw	r3,12(r2)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
   374bc:	e0bff717 	ldw	r2,-36(fp)
   374c0:	10800317 	ldw	r2,12(r2)
   374c4:	1009883a 	mov	r4,r2
   374c8:	e17ffb17 	ldw	r5,-20(fp)
   374cc:	01800a04 	movi	r6,40
   374d0:	0007dc80 	call	7dc8 <memmove>

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
   374d4:	e0bffc17 	ldw	r2,-16(fp)
   374d8:	1000031e 	bne	r2,zero,374e8 <tcp_respond+0x39c>
              m_freem(m);
   374dc:	e13ff717 	ldw	r4,-36(fp)
   374e0:	002c1a40 	call	2c1a4 <m_freem>
   374e4:	00001306 	br	37534 <tcp_respond+0x3e8>
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
   374e8:	e0bffc17 	ldw	r2,-16(fp)
   374ec:	10800d17 	ldw	r2,52(r2)
   374f0:	10000c26 	beq	r2,zero,37524 <tcp_respond+0x3d8>
   374f4:	e0bffc17 	ldw	r2,-16(fp)
   374f8:	10800d17 	ldw	r2,52(r2)
   374fc:	10800817 	ldw	r2,32(r2)
   37500:	10000826 	beq	r2,zero,37524 <tcp_respond+0x3d8>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
   37504:	e0bffc17 	ldw	r2,-16(fp)
   37508:	10800d17 	ldw	r2,52(r2)
   3750c:	10800817 	ldw	r2,32(r2)
   37510:	10801f17 	ldw	r2,124(r2)
   37514:	e13ff717 	ldw	r4,-36(fp)
   37518:	100b883a 	mov	r5,r2
   3751c:	002cb440 	call	2cb44 <ip_output>
   37520:	00000406 	br	37534 <tcp_respond+0x3e8>
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
   37524:	e13ff717 	ldw	r4,-36(fp)
   37528:	000b883a 	mov	r5,zero
   3752c:	002cb440 	call	2cb44 <ip_output>
		 }

         break;
   37530:	00000306 	br	37540 <tcp_respond+0x3f4>
   37534:	00000206 	br	37540 <tcp_respond+0x3f4>

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
   37538:	002b0f40 	call	2b0f4 <dtrap>
         break;
   3753c:	0001883a 	nop
   }
   return;
   37540:	0001883a 	nop
}
   37544:	e037883a 	mov	sp,fp
   37548:	dfc00117 	ldw	ra,4(sp)
   3754c:	df000017 	ldw	fp,0(sp)
   37550:	dec00204 	addi	sp,sp,8
   37554:	f800283a 	ret

00037558 <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
   37558:	defffb04 	addi	sp,sp,-20
   3755c:	dfc00415 	stw	ra,16(sp)
   37560:	df000315 	stw	fp,12(sp)
   37564:	df000304 	addi	fp,sp,12
   37568:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
   3756c:	01002504 	movi	r4,148
   37570:	002bce00 	call	2bce0 <npalloc>
   37574:	e0bffd15 	stw	r2,-12(fp)
   if (tp == NULL)
   37578:	e0bffd17 	ldw	r2,-12(fp)
   3757c:	1000021e 	bne	r2,zero,37588 <tcp_newtcpcb+0x30>
      return (struct tcpcb *)NULL;
   37580:	0005883a 	mov	r2,zero
   37584:	00003206 	br	37650 <tcp_newtcpcb+0xf8>
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
   37588:	e0bffd17 	ldw	r2,-12(fp)
   3758c:	e0fffd17 	ldw	r3,-12(fp)
   37590:	10c00115 	stw	r3,4(r2)
   37594:	e0bffd17 	ldw	r2,-12(fp)
   37598:	10c00117 	ldw	r3,4(r2)
   3759c:	e0bffd17 	ldw	r2,-12(fp)
   375a0:	10c00015 	stw	r3,0(r2)
   tp->t_maxseg = TCP_MSS;
   375a4:	e0bffd17 	ldw	r2,-12(fp)
   375a8:	00c16d04 	movi	r3,1460
   375ac:	10c00a0d 	sth	r3,40(r2)
   tp->t_flags = 0;        /* sends options! */
   375b0:	e0bffd17 	ldw	r2,-12(fp)
   375b4:	10000b0d 	sth	zero,44(r2)
   tp->t_inpcb = inp;
   375b8:	e0bffd17 	ldw	r2,-12(fp)
   375bc:	e0ffff17 	ldw	r3,-4(fp)
   375c0:	10c00d15 	stw	r3,52(r2)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
   375c4:	e0bffd17 	ldw	r2,-12(fp)
   375c8:	10002015 	stw	zero,128(r2)
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
   375cc:	e0bffd17 	ldw	r2,-12(fp)
   375d0:	00c00604 	movi	r3,24
   375d4:	10c02115 	stw	r3,132(r2)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
   375d8:	00800304 	movi	r2,12
   375dc:	e0bffe0d 	sth	r2,-8(fp)
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
   375e0:	e0fffe0f 	ldh	r3,-8(fp)
   375e4:	e0bffd17 	ldw	r2,-12(fp)
   375e8:	10c00815 	stw	r3,32(r2)
   375ec:	e0bffd17 	ldw	r2,-12(fp)
   375f0:	10800817 	ldw	r2,32(r2)
   375f4:	10800088 	cmpgei	r2,r2,2
   375f8:	1000041e 	bne	r2,zero,3760c <tcp_newtcpcb+0xb4>
   375fc:	e0bffd17 	ldw	r2,-12(fp)
   37600:	00c00084 	movi	r3,2
   37604:	10c00815 	stw	r3,32(r2)
   37608:	00000706 	br	37628 <tcp_newtcpcb+0xd0>
   3760c:	e0bffd17 	ldw	r2,-12(fp)
   37610:	10800817 	ldw	r2,32(r2)
   37614:	10802050 	cmplti	r2,r2,129
   37618:	1000031e 	bne	r2,zero,37628 <tcp_newtcpcb+0xd0>
   3761c:	e0bffd17 	ldw	r2,-12(fp)
   37620:	00c02004 	movi	r3,128
   37624:	10c00815 	stw	r3,32(r2)

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
   37628:	e0bffd17 	ldw	r2,-12(fp)
   3762c:	00c2da04 	movi	r3,2920
   37630:	10c01b15 	stw	r3,108(r2)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
   37634:	e0bffd17 	ldw	r2,-12(fp)
   37638:	00ffffd4 	movui	r3,65535
   3763c:	10c01c15 	stw	r3,112(r2)

   inp->inp_ppcb = (char *)tp;
   37640:	e0bfff17 	ldw	r2,-4(fp)
   37644:	e0fffd17 	ldw	r3,-12(fp)
   37648:	10c00915 	stw	r3,36(r2)
   return (tp);
   3764c:	e0bffd17 	ldw	r2,-12(fp)
}
   37650:	e037883a 	mov	sp,fp
   37654:	dfc00117 	ldw	ra,4(sp)
   37658:	df000017 	ldw	fp,0(sp)
   3765c:	dec00204 	addi	sp,sp,8
   37660:	f800283a 	ret

00037664 <tcp_drop>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
   37664:	defffb04 	addi	sp,sp,-20
   37668:	dfc00415 	stw	ra,16(sp)
   3766c:	df000315 	stw	fp,12(sp)
   37670:	df000304 	addi	fp,sp,12
   37674:	e13ffe15 	stw	r4,-8(fp)
   37678:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
   3767c:	e0bffe17 	ldw	r2,-8(fp)
   37680:	10800d17 	ldw	r2,52(r2)
   37684:	10800817 	ldw	r2,32(r2)
   37688:	e0bffd15 	stw	r2,-12(fp)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
   3768c:	e0bffe17 	ldw	r2,-8(fp)
   37690:	10800217 	ldw	r2,8(r2)
   37694:	108000d0 	cmplti	r2,r2,3
   37698:	10000c1e 	bne	r2,zero,376cc <tcp_drop+0x68>
   {
      tp->t_state = TCPS_CLOSED;
   3769c:	e0bffe17 	ldw	r2,-8(fp)
   376a0:	10000215 	stw	zero,8(r2)
      (void) tcp_output(tp);
   376a4:	e13ffe17 	ldw	r4,-8(fp)
   376a8:	0035e200 	call	35e20 <tcp_output>
      tcpstat.tcps_drops++;
   376ac:	008001b4 	movhi	r2,6
   376b0:	10b90b04 	addi	r2,r2,-7124
   376b4:	10800317 	ldw	r2,12(r2)
   376b8:	10c00044 	addi	r3,r2,1
   376bc:	008001b4 	movhi	r2,6
   376c0:	10b90b04 	addi	r2,r2,-7124
   376c4:	10c00315 	stw	r3,12(r2)
   376c8:	00000706 	br	376e8 <tcp_drop+0x84>
   }
   else
      tcpstat.tcps_conndrops++;
   376cc:	008001b4 	movhi	r2,6
   376d0:	10b90b04 	addi	r2,r2,-7124
   376d4:	10800417 	ldw	r2,16(r2)
   376d8:	10c00044 	addi	r3,r2,1
   376dc:	008001b4 	movhi	r2,6
   376e0:	10b90b04 	addi	r2,r2,-7124
   376e4:	10c00415 	stw	r3,16(r2)
   so->so_error = err;
   376e8:	e0bffd17 	ldw	r2,-12(fp)
   376ec:	e0ffff17 	ldw	r3,-4(fp)
   376f0:	10c00615 	stw	r3,24(r2)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
   376f4:	e13ffe17 	ldw	r4,-8(fp)
   376f8:	00377100 	call	37710 <tcp_close>
}
   376fc:	e037883a 	mov	sp,fp
   37700:	dfc00117 	ldw	ra,4(sp)
   37704:	df000017 	ldw	fp,0(sp)
   37708:	dec00204 	addi	sp,sp,8
   3770c:	f800283a 	ret

00037710 <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
   37710:	defff904 	addi	sp,sp,-28
   37714:	dfc00615 	stw	ra,24(sp)
   37718:	df000515 	stw	fp,20(sp)
   3771c:	df000504 	addi	fp,sp,20
   37720:	e13fff15 	stw	r4,-4(fp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
   37724:	e0bfff17 	ldw	r2,-4(fp)
   37728:	10800d17 	ldw	r2,52(r2)
   3772c:	e0bffc15 	stw	r2,-16(fp)
   struct socket *   so =  inp->inp_socket;
   37730:	e0bffc17 	ldw	r2,-16(fp)
   37734:	10800817 	ldw	r2,32(r2)
   37738:	e0bffd15 	stw	r2,-12(fp)
   struct mbuf *  m;

   t = tp->seg_next;
   3773c:	e0bfff17 	ldw	r2,-4(fp)
   37740:	10800017 	ldw	r2,0(r2)
   37744:	e0bffb15 	stw	r2,-20(fp)
   while (t != (struct tcpiphdr *)tp) 
   37748:	00000e06 	br	37784 <tcp_close+0x74>
   {
      t = (struct tcpiphdr *)t->ti_next;
   3774c:	e0bffb17 	ldw	r2,-20(fp)
   37750:	10800017 	ldw	r2,0(r2)
   37754:	e0bffb15 	stw	r2,-20(fp)
      m = dtom(t->ti_prev);
   37758:	e0bffb17 	ldw	r2,-20(fp)
   3775c:	10800117 	ldw	r2,4(r2)
   37760:	1009883a 	mov	r4,r2
   37764:	002c6ec0 	call	2c6ec <dtom>
   37768:	e0bffe15 	stw	r2,-8(fp)
      remque(t->ti_prev);
   3776c:	e0bffb17 	ldw	r2,-20(fp)
   37770:	10800117 	ldw	r2,4(r2)
   37774:	1009883a 	mov	r4,r2
   37778:	002c7880 	call	2c788 <remque>
      m_freem (m);
   3777c:	e13ffe17 	ldw	r4,-8(fp)
   37780:	002c1a40 	call	2c1a4 <m_freem>
   struct inpcb * inp   =  tp->t_inpcb;
   struct socket *   so =  inp->inp_socket;
   struct mbuf *  m;

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
   37784:	e0fffb17 	ldw	r3,-20(fp)
   37788:	e0bfff17 	ldw	r2,-4(fp)
   3778c:	18bfef1e 	bne	r3,r2,3774c <__alt_mem_descriptor_memory+0xdeff774c>
      t = (struct tcpiphdr *)t->ti_next;
      m = dtom(t->ti_prev);
      remque(t->ti_prev);
      m_freem (m);
   }
   if (tp->t_template)
   37790:	e0bfff17 	ldw	r2,-4(fp)
   37794:	10800c17 	ldw	r2,48(r2)
   37798:	10000426 	beq	r2,zero,377ac <tcp_close+0x9c>
      TPH_FREE (tp->t_template);
   3779c:	e0bfff17 	ldw	r2,-4(fp)
   377a0:	10800c17 	ldw	r2,48(r2)
   377a4:	1009883a 	mov	r4,r2
   377a8:	002bd140 	call	2bd14 <npfree>
   TCB_FREE (tp);
   377ac:	e13fff17 	ldw	r4,-4(fp)
   377b0:	002bd140 	call	2bd14 <npfree>
   inp->inp_ppcb = 0;
   377b4:	e0bffc17 	ldw	r2,-16(fp)
   377b8:	10000915 	stw	zero,36(r2)
   soisdisconnected(so);
   377bc:	e13ffd17 	ldw	r4,-12(fp)
   377c0:	00317a40 	call	317a4 <soisdisconnected>
   in_pcbdetach(inp);
   377c4:	e13ffc17 	ldw	r4,-16(fp)
   377c8:	0045ec80 	call	45ec8 <in_pcbdetach>
   tcpstat.tcps_closed++;
   377cc:	008001b4 	movhi	r2,6
   377d0:	10b90b04 	addi	r2,r2,-7124
   377d4:	10800517 	ldw	r2,20(r2)
   377d8:	10c00044 	addi	r3,r2,1
   377dc:	008001b4 	movhi	r2,6
   377e0:	10b90b04 	addi	r2,r2,-7124
   377e4:	10c00515 	stw	r3,20(r2)
   return ((struct tcpcb *)0);
   377e8:	0005883a 	mov	r2,zero
}
   377ec:	e037883a 	mov	sp,fp
   377f0:	dfc00117 	ldw	ra,4(sp)
   377f4:	df000017 	ldw	fp,0(sp)
   377f8:	dec00204 	addi	sp,sp,8
   377fc:	f800283a 	ret

00037800 <tcp_quench>:
 * RETURNS: 
 */

void
tcp_quench(struct inpcb * inp)
{
   37800:	defffd04 	addi	sp,sp,-12
   37804:	df000215 	stw	fp,8(sp)
   37808:	df000204 	addi	fp,sp,8
   3780c:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp =  intotcpcb(inp);
   37810:	e0bfff17 	ldw	r2,-4(fp)
   37814:	10800917 	ldw	r2,36(r2)
   37818:	e0bffe15 	stw	r2,-8(fp)

   if (tp)
   3781c:	e0bffe17 	ldw	r2,-8(fp)
   37820:	10000526 	beq	r2,zero,37838 <tcp_quench+0x38>
      tp->snd_cwnd = tp->t_maxseg;
   37824:	e0bffe17 	ldw	r2,-8(fp)
   37828:	10800a0b 	ldhu	r2,40(r2)
   3782c:	10ffffcc 	andi	r3,r2,65535
   37830:	e0bffe17 	ldw	r2,-8(fp)
   37834:	10c01b15 	stw	r3,108(r2)
}
   37838:	e037883a 	mov	sp,fp
   3783c:	df000017 	ldw	fp,0(sp)
   37840:	dec00104 	addi	sp,sp,4
   37844:	f800283a 	ret

00037848 <tcp_putseq>:

/* tcp_putseq()  */

u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
   37848:	defffc04 	addi	sp,sp,-16
   3784c:	df000315 	stw	fp,12(sp)
   37850:	df000304 	addi	fp,sp,12
   37854:	e13ffe15 	stw	r4,-8(fp)
   37858:	e17fff15 	stw	r5,-4(fp)
   int   i;

   cp += 3;                /* do low byte first */
   3785c:	e0bffe17 	ldw	r2,-8(fp)
   37860:	108000c4 	addi	r2,r2,3
   37864:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
   37868:	e03ffd15 	stw	zero,-12(fp)
   3786c:	00000b06 	br	3789c <tcp_putseq+0x54>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
   37870:	e0bffe17 	ldw	r2,-8(fp)
   37874:	10ffffc4 	addi	r3,r2,-1
   37878:	e0fffe15 	stw	r3,-8(fp)
   3787c:	e0ffff17 	ldw	r3,-4(fp)
   37880:	10c00005 	stb	r3,0(r2)
      seq >>= 8;
   37884:	e0bfff17 	ldw	r2,-4(fp)
   37888:	1004d23a 	srli	r2,r2,8
   3788c:	e0bfff15 	stw	r2,-4(fp)
tcp_putseq(u_char * cp, tcp_seq seq)
{
   int   i;

   cp += 3;                /* do low byte first */
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
   37890:	e0bffd17 	ldw	r2,-12(fp)
   37894:	10800044 	addi	r2,r2,1
   37898:	e0bffd15 	stw	r2,-12(fp)
   3789c:	e0bffd17 	ldw	r2,-12(fp)
   378a0:	10800110 	cmplti	r2,r2,4
   378a4:	103ff21e 	bne	r2,zero,37870 <__alt_mem_descriptor_memory+0xdeff7870>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
      seq >>= 8;
   }
   return (cp + 5);
   378a8:	e0bffe17 	ldw	r2,-8(fp)
   378ac:	10800144 	addi	r2,r2,5
}
   378b0:	e037883a 	mov	sp,fp
   378b4:	df000017 	ldw	fp,0(sp)
   378b8:	dec00104 	addi	sp,sp,4
   378bc:	f800283a 	ret

000378c0 <tcp_getseq>:
 * RETURNS: a long in local endian
 */

u_long
tcp_getseq(u_char * cp)
{
   378c0:	defffc04 	addi	sp,sp,-16
   378c4:	df000315 	stw	fp,12(sp)
   378c8:	df000304 	addi	fp,sp,12
   378cc:	e13fff15 	stw	r4,-4(fp)
   int i;
   ulong seq = 0;
   378d0:	e03ffe15 	stw	zero,-8(fp)

   for(i = 0; i < 4; i++)
   378d4:	e03ffd15 	stw	zero,-12(fp)
   378d8:	00000e06 	br	37914 <tcp_getseq+0x54>
   {
      seq <<= 8;
   378dc:	e0bffe17 	ldw	r2,-8(fp)
   378e0:	1004923a 	slli	r2,r2,8
   378e4:	e0bffe15 	stw	r2,-8(fp)
      seq += (u_long)*(cp++);
   378e8:	e0bfff17 	ldw	r2,-4(fp)
   378ec:	10c00044 	addi	r3,r2,1
   378f0:	e0ffff15 	stw	r3,-4(fp)
   378f4:	10800003 	ldbu	r2,0(r2)
   378f8:	10803fcc 	andi	r2,r2,255
   378fc:	e0fffe17 	ldw	r3,-8(fp)
   37900:	1885883a 	add	r2,r3,r2
   37904:	e0bffe15 	stw	r2,-8(fp)
tcp_getseq(u_char * cp)
{
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
   37908:	e0bffd17 	ldw	r2,-12(fp)
   3790c:	10800044 	addi	r2,r2,1
   37910:	e0bffd15 	stw	r2,-12(fp)
   37914:	e0bffd17 	ldw	r2,-12(fp)
   37918:	10800110 	cmplti	r2,r2,4
   3791c:	103fef1e 	bne	r2,zero,378dc <__alt_mem_descriptor_memory+0xdeff78dc>
   {
      seq <<= 8;
      seq += (u_long)*(cp++);
   }
   return seq;
   37920:	e0bffe17 	ldw	r2,-8(fp)
}
   37924:	e037883a 	mov	sp,fp
   37928:	df000017 	ldw	fp,0(sp)
   3792c:	dec00104 	addi	sp,sp,4
   37930:	f800283a 	ret

00037934 <tcp_slowtimo>:
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
   37934:	defff704 	addi	sp,sp,-36
   37938:	dfc00815 	stw	ra,32(sp)
   3793c:	df000715 	stw	fp,28(sp)
   37940:	df000704 	addi	fp,sp,28
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
   37944:	d0a03c17 	ldw	r2,-32528(gp)
   37948:	100490fa 	slli	r2,r2,3
   3794c:	d0a8a015 	stw	r2,-23936(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
   37950:	008001b4 	movhi	r2,6
   37954:	10b8d804 	addi	r2,r2,-7328
   37958:	10800017 	ldw	r2,0(r2)
   3795c:	e0bffa15 	stw	r2,-24(fp)
   37960:	00008306 	br	37b70 <tcp_slowtimo+0x23c>
   {
      sonext = so->next;
   37964:	e0bffa17 	ldw	r2,-24(fp)
   37968:	10800017 	ldw	r2,0(r2)
   3796c:	e0bffb15 	stw	r2,-20(fp)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
   37970:	e0bffa17 	ldw	r2,-24(fp)
   37974:	10800983 	ldbu	r2,38(r2)
   37978:	10803fcc 	andi	r2,r2,255
   3797c:	1080201c 	xori	r2,r2,128
   37980:	10bfe004 	addi	r2,r2,-128
   37984:	10800058 	cmpnei	r2,r2,1
   37988:	1000491e 	bne	r2,zero,37ab0 <tcp_slowtimo+0x17c>
      {
         ip = so->so_pcb;
   3798c:	e0bffa17 	ldw	r2,-24(fp)
   37990:	10800117 	ldw	r2,4(r2)
   37994:	e0bffc15 	stw	r2,-16(fp)
         if (!ip)
   37998:	e0bffc17 	ldw	r2,-16(fp)
   3799c:	1000011e 	bne	r2,zero,379a4 <tcp_slowtimo+0x70>
            continue;
   379a0:	00007106 	br	37b68 <tcp_slowtimo+0x234>
         ipnxt = ip->inp_next;
   379a4:	e0bffc17 	ldw	r2,-16(fp)
   379a8:	10800017 	ldw	r2,0(r2)
   379ac:	e0bffd15 	stw	r2,-12(fp)

         tp = intotcpcb(so->so_pcb);
   379b0:	e0bffa17 	ldw	r2,-24(fp)
   379b4:	10800117 	ldw	r2,4(r2)
   379b8:	10800917 	ldw	r2,36(r2)
   379bc:	e0bffe15 	stw	r2,-8(fp)
         if (!tp)
   379c0:	e0bffe17 	ldw	r2,-8(fp)
   379c4:	1000011e 	bne	r2,zero,379cc <tcp_slowtimo+0x98>
            continue;
   379c8:	00006706 	br	37b68 <tcp_slowtimo+0x234>

         for (i = 0; i < TCPT_NTIMERS; i++) 
   379cc:	e03ff915 	stw	zero,-28(fp)
   379d0:	00002f06 	br	37a90 <tcp_slowtimo+0x15c>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
   379d4:	e0fffe17 	ldw	r3,-8(fp)
   379d8:	e0bff917 	ldw	r2,-28(fp)
   379dc:	108000c4 	addi	r2,r2,3
   379e0:	1085883a 	add	r2,r2,r2
   379e4:	1085883a 	add	r2,r2,r2
   379e8:	1885883a 	add	r2,r3,r2
   379ec:	10800017 	ldw	r2,0(r2)
   379f0:	10002426 	beq	r2,zero,37a84 <tcp_slowtimo+0x150>
   379f4:	e0fffe17 	ldw	r3,-8(fp)
   379f8:	e0bff917 	ldw	r2,-28(fp)
   379fc:	108000c4 	addi	r2,r2,3
   37a00:	1085883a 	add	r2,r2,r2
   37a04:	1085883a 	add	r2,r2,r2
   37a08:	1885883a 	add	r2,r3,r2
   37a0c:	10800017 	ldw	r2,0(r2)
   37a10:	10ffffc4 	addi	r3,r2,-1
   37a14:	e13ffe17 	ldw	r4,-8(fp)
   37a18:	e0bff917 	ldw	r2,-28(fp)
   37a1c:	108000c4 	addi	r2,r2,3
   37a20:	1085883a 	add	r2,r2,r2
   37a24:	1085883a 	add	r2,r2,r2
   37a28:	2085883a 	add	r2,r4,r2
   37a2c:	10c00015 	stw	r3,0(r2)
   37a30:	e0fffe17 	ldw	r3,-8(fp)
   37a34:	e0bff917 	ldw	r2,-28(fp)
   37a38:	108000c4 	addi	r2,r2,3
   37a3c:	1085883a 	add	r2,r2,r2
   37a40:	1085883a 	add	r2,r2,r2
   37a44:	1885883a 	add	r2,r3,r2
   37a48:	10800017 	ldw	r2,0(r2)
   37a4c:	10000d1e 	bne	r2,zero,37a84 <tcp_slowtimo+0x150>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
   37a50:	e0bffa17 	ldw	r2,-24(fp)
   37a54:	00c004c4 	movi	r3,19
   37a58:	10c00715 	stw	r3,28(r2)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
   37a5c:	e0bff917 	ldw	r2,-28(fp)
   37a60:	e13ffa17 	ldw	r4,-24(fp)
   37a64:	000b883a 	mov	r5,zero
   37a68:	100d883a 	mov	r6,r2
   37a6c:	00380800 	call	38080 <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
   37a70:	e0bffd17 	ldw	r2,-12(fp)
   37a74:	10c00117 	ldw	r3,4(r2)
   37a78:	e0bffc17 	ldw	r2,-16(fp)
   37a7c:	18800126 	beq	r3,r2,37a84 <tcp_slowtimo+0x150>
                  goto tpgone;
   37a80:	00003906 	br	37b68 <tcp_slowtimo+0x234>

         tp = intotcpcb(so->so_pcb);
         if (!tp)
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
   37a84:	e0bff917 	ldw	r2,-28(fp)
   37a88:	10800044 	addi	r2,r2,1
   37a8c:	e0bff915 	stw	r2,-28(fp)
   37a90:	e0bff917 	ldw	r2,-28(fp)
   37a94:	10800110 	cmplti	r2,r2,4
   37a98:	103fce1e 	bne	r2,zero,379d4 <__alt_mem_descriptor_memory+0xdeff79d4>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
   37a9c:	e0bffe17 	ldw	r2,-8(fp)
   37aa0:	10801d17 	ldw	r2,116(r2)
   37aa4:	10c00044 	addi	r3,r2,1
   37aa8:	e0bffe17 	ldw	r2,-8(fp)
   37aac:	10c01d15 	stw	r3,116(r2)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
   37ab0:	e0bffa17 	ldw	r2,-24(fp)
   37ab4:	10800a04 	addi	r2,r2,40
   37ab8:	e0bfff15 	stw	r2,-4(fp)
      if (sb->sb_flags & SB_SEL) 
   37abc:	e0bfff17 	ldw	r2,-4(fp)
   37ac0:	1080070b 	ldhu	r2,28(r2)
   37ac4:	10bfffcc 	andi	r2,r2,65535
   37ac8:	1080020c 	andi	r2,r2,8
   37acc:	10000d26 	beq	r2,zero,37b04 <tcp_slowtimo+0x1d0>
      {
         select_wait = 0;
   37ad0:	00800174 	movhi	r2,5
   37ad4:	108fc604 	addi	r2,r2,16152
   37ad8:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
   37adc:	01000174 	movhi	r4,5
   37ae0:	210fc604 	addi	r4,r4,16152
   37ae4:	00271c80 	call	271c8 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
   37ae8:	e0bfff17 	ldw	r2,-4(fp)
   37aec:	10c0070b 	ldhu	r3,28(r2)
   37af0:	00bffdc4 	movi	r2,-9
   37af4:	1884703a 	and	r2,r3,r2
   37af8:	1007883a 	mov	r3,r2
   37afc:	e0bfff17 	ldw	r2,-4(fp)
   37b00:	10c0070d 	sth	r3,28(r2)
      }
      sb = &so->so_snd;
   37b04:	e0bffa17 	ldw	r2,-24(fp)
   37b08:	10801204 	addi	r2,r2,72
   37b0c:	e0bfff15 	stw	r2,-4(fp)
      if (sb->sb_flags & SB_SEL) 
   37b10:	e0bfff17 	ldw	r2,-4(fp)
   37b14:	1080070b 	ldhu	r2,28(r2)
   37b18:	10bfffcc 	andi	r2,r2,65535
   37b1c:	1080020c 	andi	r2,r2,8
   37b20:	10000d26 	beq	r2,zero,37b58 <tcp_slowtimo+0x224>
      {
         select_wait = 0;         
   37b24:	00800174 	movhi	r2,5
   37b28:	108fc604 	addi	r2,r2,16152
   37b2c:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
   37b30:	01000174 	movhi	r4,5
   37b34:	210fc604 	addi	r4,r4,16152
   37b38:	00271c80 	call	271c8 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
   37b3c:	e0bfff17 	ldw	r2,-4(fp)
   37b40:	10c0070b 	ldhu	r3,28(r2)
   37b44:	00bffdc4 	movi	r2,-9
   37b48:	1884703a 	and	r2,r3,r2
   37b4c:	1007883a 	mov	r3,r2
   37b50:	e0bfff17 	ldw	r2,-4(fp)
   37b54:	10c0070d 	sth	r3,28(r2)
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
   37b58:	e0bffa17 	ldw	r2,-24(fp)
   37b5c:	10800904 	addi	r2,r2,36
   37b60:	1009883a 	mov	r4,r2
   37b64:	00271c80 	call	271c8 <tcp_wakeup>
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
   37b68:	e0bffb17 	ldw	r2,-20(fp)
   37b6c:	e0bffa15 	stw	r2,-24(fp)
   37b70:	e0bffa17 	ldw	r2,-24(fp)
   37b74:	103f7b1e 	bne	r2,zero,37964 <__alt_mem_descriptor_memory+0xdeff7964>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
   37b78:	d0e8a117 	ldw	r3,-23932(gp)
   37b7c:	00be9fd4 	movui	r2,64127
   37b80:	1885883a 	add	r2,r3,r2
   37b84:	d0a8a115 	stw	r2,-23932(gp)

   if (tcp_iss & 0xff000000)
   37b88:	d0a8a117 	ldw	r2,-23932(gp)
   37b8c:	10bfc02c 	andhi	r2,r2,65280
   37b90:	10000126 	beq	r2,zero,37b98 <tcp_slowtimo+0x264>
      tcp_iss = 0L;
   37b94:	d028a115 	stw	zero,-23932(gp)
}
   37b98:	e037883a 	mov	sp,fp
   37b9c:	dfc00117 	ldw	ra,4(sp)
   37ba0:	df000017 	ldw	fp,0(sp)
   37ba4:	dec00204 	addi	sp,sp,8
   37ba8:	f800283a 	ret

00037bac <tcp_canceltimers>:
 * RETURNS: 
 */

void
tcp_canceltimers(struct tcpcb * tp)
{
   37bac:	defffd04 	addi	sp,sp,-12
   37bb0:	df000215 	stw	fp,8(sp)
   37bb4:	df000204 	addi	fp,sp,8
   37bb8:	e13fff15 	stw	r4,-4(fp)
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
   37bbc:	e03ffe15 	stw	zero,-8(fp)
   37bc0:	00000a06 	br	37bec <tcp_canceltimers+0x40>
      tp->t_timer[i] = 0;
   37bc4:	e0ffff17 	ldw	r3,-4(fp)
   37bc8:	e0bffe17 	ldw	r2,-8(fp)
   37bcc:	108000c4 	addi	r2,r2,3
   37bd0:	1085883a 	add	r2,r2,r2
   37bd4:	1085883a 	add	r2,r2,r2
   37bd8:	1885883a 	add	r2,r3,r2
   37bdc:	10000015 	stw	zero,0(r2)
void
tcp_canceltimers(struct tcpcb * tp)
{
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
   37be0:	e0bffe17 	ldw	r2,-8(fp)
   37be4:	10800044 	addi	r2,r2,1
   37be8:	e0bffe15 	stw	r2,-8(fp)
   37bec:	e0bffe17 	ldw	r2,-8(fp)
   37bf0:	10800110 	cmplti	r2,r2,4
   37bf4:	103ff31e 	bne	r2,zero,37bc4 <__alt_mem_descriptor_memory+0xdeff7bc4>
      tp->t_timer[i] = 0;
}
   37bf8:	e037883a 	mov	sp,fp
   37bfc:	df000017 	ldw	fp,0(sp)
   37c00:	dec00104 	addi	sp,sp,4
   37c04:	f800283a 	ret

00037c08 <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
   37c08:	defff804 	addi	sp,sp,-32
   37c0c:	dfc00715 	stw	ra,28(sp)
   37c10:	df000615 	stw	fp,24(sp)
   37c14:	df000604 	addi	fp,sp,24
   37c18:	e13ffe15 	stw	r4,-8(fp)
   37c1c:	e17fff15 	stw	r5,-4(fp)
   int   rexmt;

   switch (timer) 
   37c20:	e0bfff17 	ldw	r2,-4(fp)
   37c24:	10c00060 	cmpeqi	r3,r2,1
   37c28:	1800b21e 	bne	r3,zero,37ef4 <tcp_timers+0x2ec>
   37c2c:	10c00088 	cmpgei	r3,r2,2
   37c30:	1800021e 	bne	r3,zero,37c3c <tcp_timers+0x34>
   37c34:	10001826 	beq	r2,zero,37c98 <tcp_timers+0x90>
   37c38:	00010b06 	br	38068 <tcp_timers+0x460>
   37c3c:	10c000a0 	cmpeqi	r3,r2,2
   37c40:	1800bd1e 	bne	r3,zero,37f38 <tcp_timers+0x330>
   37c44:	108000e0 	cmpeqi	r2,r2,3
   37c48:	10010726 	beq	r2,zero,38068 <tcp_timers+0x460>
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
   37c4c:	e0bffe17 	ldw	r2,-8(fp)
   37c50:	10800217 	ldw	r2,8(r2)
   37c54:	108002a0 	cmpeqi	r2,r2,10
   37c58:	10000b1e 	bne	r2,zero,37c88 <tcp_timers+0x80>
          tp->t_idle <= tcp_maxidle)
   37c5c:	e0bffe17 	ldw	r2,-8(fp)
   37c60:	10801d17 	ldw	r2,116(r2)
   37c64:	d0e8a017 	ldw	r3,-23936(gp)
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
   37c68:	18800716 	blt	r3,r2,37c88 <tcp_timers+0x80>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
   37c6c:	d0a03c17 	ldw	r2,-32528(gp)
   37c70:	10ffffcc 	andi	r3,r2,65535
   37c74:	18e0001c 	xori	r3,r3,32768
   37c78:	18e00004 	addi	r3,r3,-32768
   37c7c:	e0bffe17 	ldw	r2,-8(fp)
   37c80:	10c00615 	stw	r3,24(r2)
      }
      else
         tp = tcp_close(tp);
      break;
   37c84:	0000f806 	br	38068 <tcp_timers+0x460>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
      }
      else
         tp = tcp_close(tp);
   37c88:	e13ffe17 	ldw	r4,-8(fp)
   37c8c:	00377100 	call	37710 <tcp_close>
   37c90:	e0bffe15 	stw	r2,-8(fp)
      break;
   37c94:	0000f406 	br	38068 <tcp_timers+0x460>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
   37c98:	008001b4 	movhi	r2,6
   37c9c:	10b8dd04 	addi	r2,r2,-7308
   37ca0:	10800b17 	ldw	r2,44(r2)
   37ca4:	10c00044 	addi	r3,r2,1
   37ca8:	008001b4 	movhi	r2,6
   37cac:	10b8dd04 	addi	r2,r2,-7308
   37cb0:	10c00b15 	stw	r3,44(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
   37cb4:	e0bffe17 	ldw	r2,-8(fp)
   37cb8:	10800717 	ldw	r2,28(r2)
   37cbc:	10c00044 	addi	r3,r2,1
   37cc0:	e0bffe17 	ldw	r2,-8(fp)
   37cc4:	10c00715 	stw	r3,28(r2)
   37cc8:	e0bffe17 	ldw	r2,-8(fp)
   37ccc:	10800717 	ldw	r2,28(r2)
   37cd0:	10800350 	cmplti	r2,r2,13
   37cd4:	10000f1e 	bne	r2,zero,37d14 <tcp_timers+0x10c>
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
   37cd8:	e0bffe17 	ldw	r2,-8(fp)
   37cdc:	00c00304 	movi	r3,12
   37ce0:	10c00715 	stw	r3,28(r2)
         tcpstat.tcps_timeoutdrop++;
   37ce4:	008001b4 	movhi	r2,6
   37ce8:	10b90b04 	addi	r2,r2,-7124
   37cec:	10800917 	ldw	r2,36(r2)
   37cf0:	10c00044 	addi	r3,r2,1
   37cf4:	008001b4 	movhi	r2,6
   37cf8:	10b90b04 	addi	r2,r2,-7124
   37cfc:	10c00915 	stw	r3,36(r2)
         tp = tcp_drop(tp, ETIMEDOUT);
   37d00:	e13ffe17 	ldw	r4,-8(fp)
   37d04:	01401d04 	movi	r5,116
   37d08:	00376640 	call	37664 <tcp_drop>
   37d0c:	e0bffe15 	stw	r2,-8(fp)
         break;
   37d10:	0000d506 	br	38068 <tcp_timers+0x460>
      }
      tcpstat.tcps_rexmttimeo++;
   37d14:	008001b4 	movhi	r2,6
   37d18:	10b90b04 	addi	r2,r2,-7124
   37d1c:	10800a17 	ldw	r2,40(r2)
   37d20:	10c00044 	addi	r3,r2,1
   37d24:	008001b4 	movhi	r2,6
   37d28:	10b90b04 	addi	r2,r2,-7124
   37d2c:	10c00a15 	stw	r3,40(r2)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
   37d30:	e0bffe17 	ldw	r2,-8(fp)
   37d34:	10802017 	ldw	r2,128(r2)
   37d38:	1007d0ba 	srai	r3,r2,2
   37d3c:	e0bffe17 	ldw	r2,-8(fp)
   37d40:	10802117 	ldw	r2,132(r2)
   37d44:	1885883a 	add	r2,r3,r2
   37d48:	1005d07a 	srai	r2,r2,1
   37d4c:	e0bffd15 	stw	r2,-12(fp)
      rexmt *= tcp_backoff[tp->t_rxtshift];
   37d50:	e0bffe17 	ldw	r2,-8(fp)
   37d54:	10c00717 	ldw	r3,28(r2)
   37d58:	00800174 	movhi	r2,5
   37d5c:	108658c4 	addi	r2,r2,6499
   37d60:	10c5883a 	add	r2,r2,r3
   37d64:	10800003 	ldbu	r2,0(r2)
   37d68:	10803fcc 	andi	r2,r2,255
   37d6c:	e0fffd17 	ldw	r3,-12(fp)
   37d70:	1885383a 	mul	r2,r3,r2
   37d74:	e0bffd15 	stw	r2,-12(fp)
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
   37d78:	e0bffd17 	ldw	r2,-12(fp)
   37d7c:	10ffffcc 	andi	r3,r2,65535
   37d80:	18e0001c 	xori	r3,r3,32768
   37d84:	18e00004 	addi	r3,r3,-32768
   37d88:	e0bffe17 	ldw	r2,-8(fp)
   37d8c:	10c00815 	stw	r3,32(r2)
   37d90:	e0bffe17 	ldw	r2,-8(fp)
   37d94:	10800817 	ldw	r2,32(r2)
   37d98:	10800088 	cmpgei	r2,r2,2
   37d9c:	1000041e 	bne	r2,zero,37db0 <tcp_timers+0x1a8>
   37da0:	e0bffe17 	ldw	r2,-8(fp)
   37da4:	00c00084 	movi	r3,2
   37da8:	10c00815 	stw	r3,32(r2)
   37dac:	00000706 	br	37dcc <tcp_timers+0x1c4>
   37db0:	e0bffe17 	ldw	r2,-8(fp)
   37db4:	10800817 	ldw	r2,32(r2)
   37db8:	10802050 	cmplti	r2,r2,129
   37dbc:	1000031e 	bne	r2,zero,37dcc <tcp_timers+0x1c4>
   37dc0:	e0bffe17 	ldw	r2,-8(fp)
   37dc4:	00c02004 	movi	r3,128
   37dc8:	10c00815 	stw	r3,32(r2)
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
   37dcc:	e0bffe17 	ldw	r2,-8(fp)
   37dd0:	10c00817 	ldw	r3,32(r2)
   37dd4:	e0bffe17 	ldw	r2,-8(fp)
   37dd8:	10c00315 	stw	r3,12(r2)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
   37ddc:	e0bffe17 	ldw	r2,-8(fp)
   37de0:	10800717 	ldw	r2,28(r2)
   37de4:	10800110 	cmplti	r2,r2,4
   37de8:	10000f1e 	bne	r2,zero,37e28 <tcp_timers+0x220>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
   37dec:	e0bffe17 	ldw	r2,-8(fp)
   37df0:	10800b0b 	ldhu	r2,44(r2)
   37df4:	10bfffcc 	andi	r2,r2,65535
   37df8:	1080400c 	andi	r2,r2,256
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
   37dfc:	10000a1e 	bne	r2,zero,37e28 <tcp_timers+0x220>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
   37e00:	e0bffe17 	ldw	r2,-8(fp)
   37e04:	10c02117 	ldw	r3,132(r2)
   37e08:	e0bffe17 	ldw	r2,-8(fp)
   37e0c:	10802017 	ldw	r2,128(r2)
   37e10:	1005d0ba 	srai	r2,r2,2
   37e14:	1887883a 	add	r3,r3,r2
   37e18:	e0bffe17 	ldw	r2,-8(fp)
   37e1c:	10c02115 	stw	r3,132(r2)
         tp->t_srtt = 0;
   37e20:	e0bffe17 	ldw	r2,-8(fp)
   37e24:	10002015 	stw	zero,128(r2)
      }
      tp->snd_nxt = tp->snd_una;
   37e28:	e0bffe17 	ldw	r2,-8(fp)
   37e2c:	10c00e17 	ldw	r3,56(r2)
   37e30:	e0bffe17 	ldw	r2,-8(fp)
   37e34:	10c00f15 	stw	r3,60(r2)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
   37e38:	e0bffe17 	ldw	r2,-8(fp)
   37e3c:	10001e15 	stw	zero,120(r2)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
   37e40:	e0bffe17 	ldw	r2,-8(fp)
   37e44:	10800d17 	ldw	r2,52(r2)
   37e48:	10800817 	ldw	r2,32(r2)
   37e4c:	10800417 	ldw	r2,16(r2)
   37e50:	1090000c 	andi	r2,r2,16384
   37e54:	1000241e 	bne	r2,zero,37ee8 <tcp_timers+0x2e0>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
   37e58:	e0bffe17 	ldw	r2,-8(fp)
   37e5c:	11001417 	ldw	r4,80(r2)
   37e60:	e0bffe17 	ldw	r2,-8(fp)
   37e64:	10c01b17 	ldw	r3,108(r2)
   37e68:	2005883a 	mov	r2,r4
   37e6c:	1880012e 	bgeu	r3,r2,37e74 <tcp_timers+0x26c>
   37e70:	1805883a 	mov	r2,r3
   37e74:	e0bffc15 	stw	r2,-16(fp)
         win = win / 2 / tp->t_maxseg;
   37e78:	e0bffc17 	ldw	r2,-16(fp)
   37e7c:	1006d07a 	srli	r3,r2,1
   37e80:	e0bffe17 	ldw	r2,-8(fp)
   37e84:	10800a0b 	ldhu	r2,40(r2)
   37e88:	10bfffcc 	andi	r2,r2,65535
   37e8c:	1809883a 	mov	r4,r3
   37e90:	100b883a 	mov	r5,r2
   37e94:	00152500 	call	15250 <__udivsi3>
   37e98:	e0bffc15 	stw	r2,-16(fp)
         if (win < 2)
   37e9c:	e0bffc17 	ldw	r2,-16(fp)
   37ea0:	108000a8 	cmpgeui	r2,r2,2
   37ea4:	1000021e 	bne	r2,zero,37eb0 <tcp_timers+0x2a8>
            win = 2;
   37ea8:	00800084 	movi	r2,2
   37eac:	e0bffc15 	stw	r2,-16(fp)
         tp->snd_cwnd = tp->t_maxseg;
   37eb0:	e0bffe17 	ldw	r2,-8(fp)
   37eb4:	10800a0b 	ldhu	r2,40(r2)
   37eb8:	10ffffcc 	andi	r3,r2,65535
   37ebc:	e0bffe17 	ldw	r2,-8(fp)
   37ec0:	10c01b15 	stw	r3,108(r2)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
   37ec4:	e0bffc17 	ldw	r2,-16(fp)
   37ec8:	10ffffcc 	andi	r3,r2,65535
   37ecc:	e0bffe17 	ldw	r2,-8(fp)
   37ed0:	10800a0b 	ldhu	r2,40(r2)
   37ed4:	10bfffcc 	andi	r2,r2,65535
   37ed8:	1885383a 	mul	r2,r3,r2
   37edc:	1007883a 	mov	r3,r2
   37ee0:	e0bffe17 	ldw	r2,-8(fp)
   37ee4:	10c01c15 	stw	r3,112(r2)
      }
      (void) tcp_output(tp);
   37ee8:	e13ffe17 	ldw	r4,-8(fp)
   37eec:	0035e200 	call	35e20 <tcp_output>
      break;
   37ef0:	00005d06 	br	38068 <tcp_timers+0x460>
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
   37ef4:	008001b4 	movhi	r2,6
   37ef8:	10b90b04 	addi	r2,r2,-7124
   37efc:	10800b17 	ldw	r2,44(r2)
   37f00:	10c00044 	addi	r3,r2,1
   37f04:	008001b4 	movhi	r2,6
   37f08:	10b90b04 	addi	r2,r2,-7124
   37f0c:	10c00b15 	stw	r3,44(r2)
      tcp_setpersist(tp);
   37f10:	e13ffe17 	ldw	r4,-8(fp)
   37f14:	0036e280 	call	36e28 <tcp_setpersist>
      tp->t_force = 1;
   37f18:	e0bffe17 	ldw	r2,-8(fp)
   37f1c:	00c00044 	movi	r3,1
   37f20:	10c00a85 	stb	r3,42(r2)
      (void) tcp_output(tp);
   37f24:	e13ffe17 	ldw	r4,-8(fp)
   37f28:	0035e200 	call	35e20 <tcp_output>
      tp->t_force = 0;
   37f2c:	e0bffe17 	ldw	r2,-8(fp)
   37f30:	10000a85 	stb	zero,42(r2)
      break;
   37f34:	00004c06 	br	38068 <tcp_timers+0x460>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
   37f38:	008001b4 	movhi	r2,6
   37f3c:	10b90b04 	addi	r2,r2,-7124
   37f40:	10800c17 	ldw	r2,48(r2)
   37f44:	10c00044 	addi	r3,r2,1
   37f48:	008001b4 	movhi	r2,6
   37f4c:	10b90b04 	addi	r2,r2,-7124
   37f50:	10c00c15 	stw	r3,48(r2)
      if (tp->t_state < TCPS_ESTABLISHED)
   37f54:	e0bffe17 	ldw	r2,-8(fp)
   37f58:	10800217 	ldw	r2,8(r2)
   37f5c:	10800108 	cmpgei	r2,r2,4
   37f60:	1000011e 	bne	r2,zero,37f68 <tcp_timers+0x360>
         goto dropit;
   37f64:	00003406 	br	38038 <tcp_timers+0x430>
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
   37f68:	e0bffe17 	ldw	r2,-8(fp)
   37f6c:	10800d17 	ldw	r2,52(r2)
   37f70:	10800817 	ldw	r2,32(r2)
   37f74:	10800417 	ldw	r2,16(r2)
   37f78:	1080020c 	andi	r2,r2,8
   37f7c:	10002726 	beq	r2,zero,3801c <tcp_timers+0x414>
          tp->t_state <= TCPS_CLOSE_WAIT) 
   37f80:	e0bffe17 	ldw	r2,-8(fp)
   37f84:	10800217 	ldw	r2,8(r2)
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
      if (tp->t_state < TCPS_ESTABLISHED)
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
   37f88:	10800188 	cmpgei	r2,r2,6
   37f8c:	1000231e 	bne	r2,zero,3801c <tcp_timers+0x414>
          tp->t_state <= TCPS_CLOSE_WAIT) 
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
   37f90:	e0bffe17 	ldw	r2,-8(fp)
   37f94:	10c01d17 	ldw	r3,116(r2)
   37f98:	d1203b17 	ldw	r4,-32532(gp)
   37f9c:	d0a8a017 	ldw	r2,-23936(gp)
   37fa0:	2085883a 	add	r2,r4,r2
   37fa4:	18800116 	blt	r3,r2,37fac <tcp_timers+0x3a4>
            goto dropit;
   37fa8:	00002306 	br	38038 <tcp_timers+0x430>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
   37fac:	008001b4 	movhi	r2,6
   37fb0:	10b90b04 	addi	r2,r2,-7124
   37fb4:	10800d17 	ldw	r2,52(r2)
   37fb8:	10c00044 	addi	r3,r2,1
   37fbc:	008001b4 	movhi	r2,6
   37fc0:	10b90b04 	addi	r2,r2,-7124
   37fc4:	10c00d15 	stw	r3,52(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
   37fc8:	e0bffe17 	ldw	r2,-8(fp)
   37fcc:	11400c17 	ldw	r5,48(r2)
   37fd0:	e0bffe17 	ldw	r2,-8(fp)
   37fd4:	10801617 	ldw	r2,88(r2)
   37fd8:	10ffffc4 	addi	r3,r2,-1
            tp->snd_una - 1, 0, (struct mbuf *)NULL);
   37fdc:	e0bffe17 	ldw	r2,-8(fp)
   37fe0:	10800e17 	ldw	r2,56(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
   37fe4:	10bfffc4 	addi	r2,r2,-1
   37fe8:	d8000015 	stw	zero,0(sp)
   37fec:	d8000115 	stw	zero,4(sp)
   37ff0:	e13ffe17 	ldw	r4,-8(fp)
   37ff4:	180d883a 	mov	r6,r3
   37ff8:	100f883a 	mov	r7,r2
   37ffc:	003714c0 	call	3714c <tcp_respond>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
   38000:	d0a03c17 	ldw	r2,-32528(gp)
   38004:	10ffffcc 	andi	r3,r2,65535
   38008:	18e0001c 	xori	r3,r3,32768
   3800c:	18e00004 	addi	r3,r3,-32768
   38010:	e0bffe17 	ldw	r2,-8(fp)
   38014:	10c00515 	stw	r3,20(r2)
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
   38018:	00001306 	br	38068 <tcp_timers+0x460>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
   3801c:	d0a03b17 	ldw	r2,-32532(gp)
   38020:	10ffffcc 	andi	r3,r2,65535
   38024:	18e0001c 	xori	r3,r3,32768
   38028:	18e00004 	addi	r3,r3,-32768
   3802c:	e0bffe17 	ldw	r2,-8(fp)
   38030:	10c00515 	stw	r3,20(r2)
      break;
   38034:	00000c06 	br	38068 <tcp_timers+0x460>
      dropit:
      tcpstat.tcps_keepdrops++;
   38038:	008001b4 	movhi	r2,6
   3803c:	10b90b04 	addi	r2,r2,-7124
   38040:	10800e17 	ldw	r2,56(r2)
   38044:	10c00044 	addi	r3,r2,1
   38048:	008001b4 	movhi	r2,6
   3804c:	10b90b04 	addi	r2,r2,-7124
   38050:	10c00e15 	stw	r3,56(r2)
      tp = tcp_drop (tp, ETIMEDOUT);
   38054:	e13ffe17 	ldw	r4,-8(fp)
   38058:	01401d04 	movi	r5,116
   3805c:	00376640 	call	37664 <tcp_drop>
   38060:	e0bffe15 	stw	r2,-8(fp)
      break;
   38064:	0001883a 	nop
   }
   return tp;
   38068:	e0bffe17 	ldw	r2,-8(fp)
}
   3806c:	e037883a 	mov	sp,fp
   38070:	dfc00117 	ldw	ra,4(sp)
   38074:	df000017 	ldw	fp,0(sp)
   38078:	dec00204 	addi	sp,sp,8
   3807c:	f800283a 	ret

00038080 <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
   38080:	defff604 	addi	sp,sp,-40
   38084:	dfc00915 	stw	ra,36(sp)
   38088:	df000815 	stw	fp,32(sp)
   3808c:	df000804 	addi	fp,sp,32
   38090:	e13ffd15 	stw	r4,-12(fp)
   38094:	e17ffe15 	stw	r5,-8(fp)
   38098:	e1bfff15 	stw	r6,-4(fp)
   struct inpcb * inp;
   struct tcpcb * tp;
   int   error =  0;
   3809c:	e03ff915 	stw	zero,-28(fp)

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
   380a0:	e0bffd17 	ldw	r2,-12(fp)
   380a4:	10800717 	ldw	r2,28(r2)
   380a8:	e0bffa15 	stw	r2,-24(fp)
   inp = sotoinpcb(so);
   380ac:	e0bffd17 	ldw	r2,-12(fp)
   380b0:	10800117 	ldw	r2,4(r2)
   380b4:	e0bffb15 	stw	r2,-20(fp)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
   380b8:	e0bffb17 	ldw	r2,-20(fp)
   380bc:	1000041e 	bne	r2,zero,380d0 <tcp_usrreq+0x50>
   380c0:	e0bffa17 	ldw	r2,-24(fp)
   380c4:	10000226 	beq	r2,zero,380d0 <tcp_usrreq+0x50>
   {
      return (EINVAL);
   380c8:	00800584 	movi	r2,22
   380cc:	00019906 	br	38734 <tcp_usrreq+0x6b4>
   }

   if (inp)
   380d0:	e0bffb17 	ldw	r2,-20(fp)
   380d4:	10000426 	beq	r2,zero,380e8 <tcp_usrreq+0x68>
      tp = intotcpcb(inp);
   380d8:	e0bffb17 	ldw	r2,-20(fp)
   380dc:	10800917 	ldw	r2,36(r2)
   380e0:	e0bff815 	stw	r2,-32(fp)
   380e4:	00000706 	br	38104 <tcp_usrreq+0x84>
   else  /* inp and tp not set, make sure this is OK: */
   { 
      if (req == PRU_ATTACH)
   380e8:	e0bffa17 	ldw	r2,-24(fp)
   380ec:	1000021e 	bne	r2,zero,380f8 <tcp_usrreq+0x78>
         tp = NULL;  /* stifle compiler warnings about using unassigned tp*/
   380f0:	e03ff815 	stw	zero,-32(fp)
   380f4:	00000306 	br	38104 <tcp_usrreq+0x84>
      else
      {
         dtrap(); /* programming error? */
   380f8:	002b0f40 	call	2b0f4 <dtrap>
         return EINVAL;
   380fc:	00800584 	movi	r2,22
   38100:	00018c06 	br	38734 <tcp_usrreq+0x6b4>
      }
   }

   switch (req) 
   38104:	e0bffa17 	ldw	r2,-24(fp)
   38108:	10800528 	cmpgeui	r2,r2,20
   3810c:	1001851e 	bne	r2,zero,38724 <tcp_usrreq+0x6a4>
   38110:	e0bffa17 	ldw	r2,-24(fp)
   38114:	100690ba 	slli	r3,r2,2
   38118:	00800134 	movhi	r2,4
   3811c:	10a04b04 	addi	r2,r2,-32468
   38120:	1885883a 	add	r2,r3,r2
   38124:	10800017 	ldw	r2,0(r2)
   38128:	1000683a 	jmp	r2
   3812c:	0003817c 	xorhi	zero,zero,3589
   38130:	000381e4 	muli	zero,zero,3591
   38134:	0003820c 	andi	zero,zero,3592
   38138:	00038244 	movi	zero,3593
   3813c:	00038280 	call	3828 <alt_tse_mac_group_init+0x220>
   38140:	000383fc 	xorhi	zero,zero,3599
   38144:	000383f0 	cmpltui	zero,zero,3599
   38148:	000384ac 	andhi	zero,zero,3602
   3814c:	000384dc 	xori	zero,zero,3603
   38150:	000384e8 	cmpgeui	zero,zero,3603
   38154:	00038548 	cmpgei	zero,zero,3605
   38158:	00038724 	muli	zero,zero,3612
   3815c:	00038558 	cmpnei	zero,zero,3605
   38160:	00038564 	muli	zero,zero,3605
   38164:	00038620 	cmpeqi	zero,zero,3608
   38168:	000386f0 	cmpltui	zero,zero,3611
   3816c:	00038700 	call	3870 <alt_tse_mac_group_init+0x268>
   38170:	000383e4 	muli	zero,zero,3599
   38174:	00038724 	muli	zero,zero,3612
   38178:	00038710 	cmplti	zero,zero,3612
   /*
    * TCP attaches to socket via PRU_ATTACH, reserving space,
    * and an internet control block.
    */
   case PRU_ATTACH:
      if (inp) 
   3817c:	e0bffb17 	ldw	r2,-20(fp)
   38180:	10000326 	beq	r2,zero,38190 <tcp_usrreq+0x110>
      {
         error = EISCONN;
   38184:	00801fc4 	movi	r2,127
   38188:	e0bff915 	stw	r2,-28(fp)
         break;
   3818c:	00016806 	br	38730 <tcp_usrreq+0x6b0>
      }
      error = tcp_attach(so);
   38190:	e13ffd17 	ldw	r4,-12(fp)
   38194:	00387480 	call	38748 <tcp_attach>
   38198:	e0bff915 	stw	r2,-28(fp)
      if (error)
   3819c:	e0bff917 	ldw	r2,-28(fp)
   381a0:	10000126 	beq	r2,zero,381a8 <tcp_usrreq+0x128>
         break;
   381a4:	00016206 	br	38730 <tcp_usrreq+0x6b0>
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
   381a8:	e0bffd17 	ldw	r2,-12(fp)
   381ac:	10800417 	ldw	r2,16(r2)
   381b0:	1080200c 	andi	r2,r2,128
   381b4:	10000a26 	beq	r2,zero,381e0 <tcp_usrreq+0x160>
   381b8:	e0bffd17 	ldw	r2,-12(fp)
   381bc:	1080080b 	ldhu	r2,32(r2)
   381c0:	10bfffcc 	andi	r2,r2,65535
   381c4:	10a0001c 	xori	r2,r2,32768
   381c8:	10a00004 	addi	r2,r2,-32768
   381cc:	1000041e 	bne	r2,zero,381e0 <tcp_usrreq+0x160>
         so->so_linger = TCP_LINGERTIME;
   381d0:	e0bffd17 	ldw	r2,-12(fp)
   381d4:	00c01e04 	movi	r3,120
   381d8:	10c0080d 	sth	r3,32(r2)
#ifdef   DO_TCPTRACE
      SETTP(tp, sototcpcb(so));
#endif
      break;
   381dc:	00015406 	br	38730 <tcp_usrreq+0x6b0>
   381e0:	00015306 	br	38730 <tcp_usrreq+0x6b0>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
   381e4:	e0bff817 	ldw	r2,-32(fp)
   381e8:	10800217 	ldw	r2,8(r2)
   381ec:	10800090 	cmplti	r2,r2,2
   381f0:	1000031e 	bne	r2,zero,38200 <tcp_usrreq+0x180>
         SETTP(tp, tcp_disconnect(tp));
   381f4:	e13ff817 	ldw	r4,-32(fp)
   381f8:	00388600 	call	38860 <tcp_disconnect>
      else
         SETTP(tp, tcp_close(tp));
      break;
   381fc:	00014c06 	br	38730 <tcp_usrreq+0x6b0>
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
         SETTP(tp, tcp_disconnect(tp));
      else
         SETTP(tp, tcp_close(tp));
   38200:	e13ff817 	ldw	r4,-32(fp)
   38204:	00377100 	call	37710 <tcp_close>
      break;
   38208:	00014906 	br	38730 <tcp_usrreq+0x6b0>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
   3820c:	e0bffb17 	ldw	r2,-20(fp)
   38210:	10800817 	ldw	r2,32(r2)
   38214:	10800517 	ldw	r2,20(r2)
   38218:	10800098 	cmpnei	r2,r2,2
   3821c:	1000051e 	bne	r2,zero,38234 <tcp_usrreq+0x1b4>
      {
         error = in_pcbbind(inp, nam);
   38220:	e13ffb17 	ldw	r4,-20(fp)
   38224:	e17fff17 	ldw	r5,-4(fp)
   38228:	0045f1c0 	call	45f1c <in_pcbbind>
   3822c:	e0bff915 	stw	r2,-28(fp)
         break;
   38230:	00013f06 	br	38730 <tcp_usrreq+0x6b0>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
   38234:	002b0f40 	call	2b0f4 <dtrap>
      error = EINVAL;
   38238:	00800584 	movi	r2,22
   3823c:	e0bff915 	stw	r2,-28(fp)
      break;
   38240:	00013b06 	br	38730 <tcp_usrreq+0x6b0>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
   38244:	e0bffb17 	ldw	r2,-20(fp)
   38248:	1080078b 	ldhu	r2,30(r2)
   3824c:	10bfffcc 	andi	r2,r2,65535
   38250:	1000041e 	bne	r2,zero,38264 <tcp_usrreq+0x1e4>
         error = in_pcbbind(inp, (struct mbuf *)0);
   38254:	e13ffb17 	ldw	r4,-20(fp)
   38258:	000b883a 	mov	r5,zero
   3825c:	0045f1c0 	call	45f1c <in_pcbbind>
   38260:	e0bff915 	stw	r2,-28(fp)
      if (error == 0)
   38264:	e0bff917 	ldw	r2,-28(fp)
   38268:	1000041e 	bne	r2,zero,3827c <tcp_usrreq+0x1fc>
         tp->t_state = TCPS_LISTEN;
   3826c:	e0bff817 	ldw	r2,-32(fp)
   38270:	00c00044 	movi	r3,1
   38274:	10c00215 	stw	r3,8(r2)
      break;
   38278:	00012d06 	br	38730 <tcp_usrreq+0x6b0>
   3827c:	00012c06 	br	38730 <tcp_usrreq+0x6b0>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
   38280:	e0bffb17 	ldw	r2,-20(fp)
   38284:	1080078b 	ldhu	r2,30(r2)
   38288:	10bfffcc 	andi	r2,r2,65535
   3828c:	1000071e 	bne	r2,zero,382ac <tcp_usrreq+0x22c>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
   38290:	e13ffb17 	ldw	r4,-20(fp)
   38294:	000b883a 	mov	r5,zero
   38298:	0045f1c0 	call	45f1c <in_pcbbind>
   3829c:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
   382a0:	e0bff917 	ldw	r2,-28(fp)
   382a4:	10000126 	beq	r2,zero,382ac <tcp_usrreq+0x22c>
            break;
   382a8:	00012106 	br	38730 <tcp_usrreq+0x6b0>
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
   382ac:	e13ffb17 	ldw	r4,-20(fp)
   382b0:	e17fff17 	ldw	r5,-4(fp)
   382b4:	00461280 	call	46128 <in_pcbconnect>
   382b8:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
   382bc:	e0bff917 	ldw	r2,-28(fp)
   382c0:	10000126 	beq	r2,zero,382c8 <tcp_usrreq+0x248>
         break;
   382c4:	00011a06 	br	38730 <tcp_usrreq+0x6b0>
      tp->t_template = tcp_template(tp);
   382c8:	e13ff817 	ldw	r4,-32(fp)
   382cc:	00370440 	call	37044 <tcp_template>
   382d0:	1007883a 	mov	r3,r2
   382d4:	e0bff817 	ldw	r2,-32(fp)
   382d8:	10c00c15 	stw	r3,48(r2)
      if (tp->t_template == 0) 
   382dc:	e0bff817 	ldw	r2,-32(fp)
   382e0:	10800c17 	ldw	r2,48(r2)
   382e4:	1000051e 	bne	r2,zero,382fc <tcp_usrreq+0x27c>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
   382e8:	e13ffb17 	ldw	r4,-20(fp)
   382ec:	00463000 	call	46300 <in_pcbdisconnect>
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
         ip6_pcbdisconnect(inp);
#endif   /* end v6 only */

         error = ENOBUFS;
   382f0:	00801a44 	movi	r2,105
   382f4:	e0bff915 	stw	r2,-28(fp)
         break;
   382f8:	00010d06 	br	38730 <tcp_usrreq+0x6b0>
      }

      soisconnecting(so);
   382fc:	e13ffd17 	ldw	r4,-12(fp)
   38300:	00315a40 	call	315a4 <soisconnecting>
      tcpstat.tcps_connattempt++;
   38304:	008001b4 	movhi	r2,6
   38308:	10b90b04 	addi	r2,r2,-7124
   3830c:	10800017 	ldw	r2,0(r2)
   38310:	10c00044 	addi	r3,r2,1
   38314:	008001b4 	movhi	r2,6
   38318:	10b90b04 	addi	r2,r2,-7124
   3831c:	10c00015 	stw	r3,0(r2)
      tp->t_state = TCPS_SYN_SENT;
   38320:	e0bff817 	ldw	r2,-32(fp)
   38324:	00c00084 	movi	r3,2
   38328:	10c00215 	stw	r3,8(r2)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
   3832c:	e0bff817 	ldw	r2,-32(fp)
   38330:	00c02584 	movi	r3,150
   38334:	10c00515 	stw	r3,20(r2)
      tp->iss = tcp_iss; 
   38338:	00800174 	movhi	r2,5
   3833c:	108fcb04 	addi	r2,r2,16172
   38340:	10c00017 	ldw	r3,0(r2)
   38344:	e0bff817 	ldw	r2,-32(fp)
   38348:	10c01315 	stw	r3,76(r2)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
   3834c:	00800174 	movhi	r2,5
   38350:	108fcb04 	addi	r2,r2,16172
   38354:	10c00017 	ldw	r3,0(r2)
   38358:	00be9fd4 	movui	r2,64127
   3835c:	1887883a 	add	r3,r3,r2
   38360:	00800174 	movhi	r2,5
   38364:	108fcb04 	addi	r2,r2,16172
   38368:	10c00015 	stw	r3,0(r2)
      tcp_sendseqinit(tp);
   3836c:	e0bff817 	ldw	r2,-32(fp)
   38370:	10c01317 	ldw	r3,76(r2)
   38374:	e0bff817 	ldw	r2,-32(fp)
   38378:	10c01015 	stw	r3,64(r2)
   3837c:	e0bff817 	ldw	r2,-32(fp)
   38380:	10c01017 	ldw	r3,64(r2)
   38384:	e0bff817 	ldw	r2,-32(fp)
   38388:	10c01a15 	stw	r3,104(r2)
   3838c:	e0bff817 	ldw	r2,-32(fp)
   38390:	10c01a17 	ldw	r3,104(r2)
   38394:	e0bff817 	ldw	r2,-32(fp)
   38398:	10c00f15 	stw	r3,60(r2)
   3839c:	e0bff817 	ldw	r2,-32(fp)
   383a0:	10c00f17 	ldw	r3,60(r2)
   383a4:	e0bff817 	ldw	r2,-32(fp)
   383a8:	10c00e15 	stw	r3,56(r2)
      error = tcp_output(tp);
   383ac:	e13ff817 	ldw	r4,-32(fp)
   383b0:	0035e200 	call	35e20 <tcp_output>
   383b4:	e0bff915 	stw	r2,-28(fp)
      if (!error)
   383b8:	e0bff917 	ldw	r2,-28(fp)
   383bc:	1000081e 	bne	r2,zero,383e0 <tcp_usrreq+0x360>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
   383c0:	008001b4 	movhi	r2,6
   383c4:	10b8dd04 	addi	r2,r2,-7308
   383c8:	10800417 	ldw	r2,16(r2)
   383cc:	10c00044 	addi	r3,r2,1
   383d0:	008001b4 	movhi	r2,6
   383d4:	10b8dd04 	addi	r2,r2,-7308
   383d8:	10c00415 	stw	r3,16(r2)
      break;
   383dc:	0000d406 	br	38730 <tcp_usrreq+0x6b0>
   383e0:	0000d306 	br	38730 <tcp_usrreq+0x6b0>

   /*
    * Create a TCP connection between two sockets.
    */
   case PRU_CONNECT2:
      error = EOPNOTSUPP;
   383e4:	008017c4 	movi	r2,95
   383e8:	e0bff915 	stw	r2,-28(fp)
      break;
   383ec:	0000d006 	br	38730 <tcp_usrreq+0x6b0>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
   383f0:	e13ff817 	ldw	r4,-32(fp)
   383f4:	00388600 	call	38860 <tcp_disconnect>
      break;
   383f8:	0000cd06 	br	38730 <tcp_usrreq+0x6b0>
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
   383fc:	e0bfff17 	ldw	r2,-4(fp)
   38400:	10800317 	ldw	r2,12(r2)
   38404:	e0bffc15 	stw	r2,-16(fp)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
   38408:	e0bffd17 	ldw	r2,-12(fp)
   3840c:	10800517 	ldw	r2,20(r2)
   38410:	10800098 	cmpnei	r2,r2,2
   38414:	10000e1e 	bne	r2,zero,38450 <tcp_usrreq+0x3d0>
         {
            nam->m_len = sizeof (struct sockaddr_in);
   38418:	e0bfff17 	ldw	r2,-4(fp)
   3841c:	00c00404 	movi	r3,16
   38420:	10c00215 	stw	r3,8(r2)
            sin->sin_family = AF_INET;
   38424:	e0bffc17 	ldw	r2,-16(fp)
   38428:	00c00084 	movi	r3,2
   3842c:	10c0000d 	sth	r3,0(r2)
            sin->sin_port = inp->inp_fport;
   38430:	e0bffb17 	ldw	r2,-20(fp)
   38434:	10c0070b 	ldhu	r3,28(r2)
   38438:	e0bffc17 	ldw	r2,-16(fp)
   3843c:	10c0008d 	sth	r3,2(r2)
            sin->sin_addr = inp->inp_faddr;
   38440:	e0bffc17 	ldw	r2,-16(fp)
   38444:	e0fffb17 	ldw	r3,-20(fp)
   38448:	18c00317 	ldw	r3,12(r3)
   3844c:	10c00115 	stw	r3,4(r2)
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
   38450:	e0bffd17 	ldw	r2,-12(fp)
   38454:	10800517 	ldw	r2,20(r2)
   38458:	108000a0 	cmpeqi	r2,r2,2
   3845c:	10000b1e 	bne	r2,zero,3848c <tcp_usrreq+0x40c>
              !(so->so_domain == AF_INET6)
   38460:	e0bffd17 	ldw	r2,-12(fp)
   38464:	10800517 	ldw	r2,20(r2)
            sin->sin_family = AF_INET;
            sin->sin_port = inp->inp_fport;
            sin->sin_addr = inp->inp_faddr;
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
   38468:	108000e0 	cmpeqi	r2,r2,3
   3846c:	1000071e 	bne	r2,zero,3848c <tcp_usrreq+0x40c>
              !(so->so_domain == AF_INET6)
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
   38470:	e0bffd17 	ldw	r2,-12(fp)
   38474:	10800517 	ldw	r2,20(r2)
   38478:	01000174 	movhi	r4,5
   3847c:	213b9704 	addi	r4,r4,-4516
   38480:	100b883a 	mov	r5,r2
   38484:	00080f80 	call	80f8 <printf>
            dtrap();
   38488:	002b0f40 	call	2b0f4 <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
   3848c:	008001b4 	movhi	r2,6
   38490:	10b8dd04 	addi	r2,r2,-7308
   38494:	10800517 	ldw	r2,20(r2)
   38498:	10c00044 	addi	r3,r2,1
   3849c:	008001b4 	movhi	r2,6
   384a0:	10b8dd04 	addi	r2,r2,-7308
   384a4:	10c00515 	stw	r3,20(r2)
         break;
   384a8:	0000a106 	br	38730 <tcp_usrreq+0x6b0>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
   384ac:	e13ffd17 	ldw	r4,-12(fp)
   384b0:	0031c2c0 	call	31c2c <socantsendmore>
      tp = tcp_usrclosed(tp);
   384b4:	e13ff817 	ldw	r4,-32(fp)
   384b8:	003892c0 	call	3892c <tcp_usrclosed>
   384bc:	e0bff815 	stw	r2,-32(fp)
      if (tp)
   384c0:	e0bff817 	ldw	r2,-32(fp)
   384c4:	10000426 	beq	r2,zero,384d8 <tcp_usrreq+0x458>
         error = tcp_output(tp);
   384c8:	e13ff817 	ldw	r4,-32(fp)
   384cc:	0035e200 	call	35e20 <tcp_output>
   384d0:	e0bff915 	stw	r2,-28(fp)
      break;
   384d4:	00009606 	br	38730 <tcp_usrreq+0x6b0>
   384d8:	00009506 	br	38730 <tcp_usrreq+0x6b0>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
   384dc:	e13ff817 	ldw	r4,-32(fp)
   384e0:	0035e200 	call	35e20 <tcp_output>
      break;
   384e4:	00009206 	br	38730 <tcp_usrreq+0x6b0>
   /*
    * Do a send by putting data in output queue and updating urgent
    * marker if URG set.  Possibly send more data.
    */
   case PRU_SEND:
      if (so->so_pcb == NULL)
   384e8:	e0bffd17 	ldw	r2,-12(fp)
   384ec:	10800117 	ldw	r2,4(r2)
   384f0:	1000031e 	bne	r2,zero,38500 <tcp_usrreq+0x480>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
   384f4:	00800804 	movi	r2,32
   384f8:	e0bff915 	stw	r2,-28(fp)
         break;
   384fc:	00008c06 	br	38730 <tcp_usrreq+0x6b0>
      }
      sbappend(&so->so_snd, m);
   38500:	e0bffd17 	ldw	r2,-12(fp)
   38504:	10801204 	addi	r2,r2,72
   38508:	1009883a 	mov	r4,r2
   3850c:	e17ffe17 	ldw	r5,-8(fp)
   38510:	0031f280 	call	31f28 <sbappend>
      error = tcp_output(tp);
   38514:	e13ff817 	ldw	r4,-32(fp)
   38518:	0035e200 	call	35e20 <tcp_output>
   3851c:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
   38520:	e0bff917 	ldw	r2,-28(fp)
   38524:	10801a58 	cmpnei	r2,r2,105
   38528:	1000061e 	bne	r2,zero,38544 <tcp_usrreq+0x4c4>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
   3852c:	e0bffd17 	ldw	r2,-12(fp)
   38530:	10801204 	addi	r2,r2,72
   38534:	1009883a 	mov	r4,r2
   38538:	e17ffe17 	ldw	r5,-8(fp)
   3853c:	00326800 	call	32680 <sbdropend>
      break;
   38540:	00007b06 	br	38730 <tcp_usrreq+0x6b0>
   38544:	00007a06 	br	38730 <tcp_usrreq+0x6b0>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
   38548:	e13ff817 	ldw	r4,-32(fp)
   3854c:	01401c44 	movi	r5,113
   38550:	00376640 	call	37664 <tcp_drop>
      break;
   38554:	00007606 	br	38730 <tcp_usrreq+0x6b0>

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
   38558:	002b0f40 	call	2b0f4 <dtrap>
      return (0);
   3855c:	0005883a 	mov	r2,zero
   38560:	00007406 	br	38734 <tcp_usrreq+0x6b4>

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
   38564:	e0bffd17 	ldw	r2,-12(fp)
   38568:	10801a17 	ldw	r2,104(r2)
   3856c:	1000051e 	bne	r2,zero,38584 <tcp_usrreq+0x504>
          (so->so_state & SS_RCVATMARK) == 0) ||
   38570:	e0bffd17 	ldw	r2,-12(fp)
   38574:	1080088b 	ldhu	r2,34(r2)
   38578:	10bfffcc 	andi	r2,r2,65535
   3857c:	1080100c 	andi	r2,r2,64
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
      return (0);

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
   38580:	10000926 	beq	r2,zero,385a8 <tcp_usrreq+0x528>
          (so->so_state & SS_RCVATMARK) == 0) ||
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
   38584:	e0bffd17 	ldw	r2,-12(fp)
   38588:	10800417 	ldw	r2,16(r2)
   3858c:	1080400c 	andi	r2,r2,256
      dtrap();    /* does this ever happen? */
      return (0);

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
          (so->so_state & SS_RCVATMARK) == 0) ||
   38590:	1000051e 	bne	r2,zero,385a8 <tcp_usrreq+0x528>
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
   38594:	e0bff817 	ldw	r2,-32(fp)
   38598:	10802403 	ldbu	r2,144(r2)
   3859c:	10803fcc 	andi	r2,r2,255
   385a0:	1080008c 	andi	r2,r2,2

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
          (so->so_state & SS_RCVATMARK) == 0) ||
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
   385a4:	10000326 	beq	r2,zero,385b4 <tcp_usrreq+0x534>
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
       {
         error = EINVAL;
   385a8:	00800584 	movi	r2,22
   385ac:	e0bff915 	stw	r2,-28(fp)
         break;
   385b0:	00005f06 	br	38730 <tcp_usrreq+0x6b0>
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
   385b4:	e0bff817 	ldw	r2,-32(fp)
   385b8:	10802403 	ldbu	r2,144(r2)
   385bc:	10803fcc 	andi	r2,r2,255
   385c0:	1080004c 	andi	r2,r2,1
   385c4:	1000031e 	bne	r2,zero,385d4 <tcp_usrreq+0x554>
      {
         error = EWOULDBLOCK;
   385c8:	008002c4 	movi	r2,11
   385cc:	e0bff915 	stw	r2,-28(fp)
         break;
   385d0:	00005706 	br	38730 <tcp_usrreq+0x6b0>
      }
      m->m_len = 1;
   385d4:	e0bffe17 	ldw	r2,-8(fp)
   385d8:	00c00044 	movi	r3,1
   385dc:	10c00215 	stw	r3,8(r2)
      *mtod(m, char *) = tp->t_iobc;
   385e0:	e0bffe17 	ldw	r2,-8(fp)
   385e4:	10800317 	ldw	r2,12(r2)
   385e8:	e0fff817 	ldw	r3,-32(fp)
   385ec:	18c02443 	ldbu	r3,145(r3)
   385f0:	10c00005 	stb	r3,0(r2)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
   385f4:	e0bfff17 	ldw	r2,-4(fp)
   385f8:	1080008c 	andi	r2,r2,2
   385fc:	1000071e 	bne	r2,zero,3861c <tcp_usrreq+0x59c>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
   38600:	e0bff817 	ldw	r2,-32(fp)
   38604:	10802403 	ldbu	r2,144(r2)
   38608:	108000dc 	xori	r2,r2,3
   3860c:	1007883a 	mov	r3,r2
   38610:	e0bff817 	ldw	r2,-32(fp)
   38614:	10c02405 	stb	r3,144(r2)
      break;
   38618:	00004506 	br	38730 <tcp_usrreq+0x6b0>
   3861c:	00004406 	br	38730 <tcp_usrreq+0x6b0>

   case PRU_SENDOOB:
      if (so->so_pcb == NULL)
   38620:	e0bffd17 	ldw	r2,-12(fp)
   38624:	10800117 	ldw	r2,4(r2)
   38628:	1000031e 	bne	r2,zero,38638 <tcp_usrreq+0x5b8>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
   3862c:	00800804 	movi	r2,32
   38630:	e0bff915 	stw	r2,-28(fp)
         break;
   38634:	00003e06 	br	38730 <tcp_usrreq+0x6b0>
      }
      if (sbspace(&so->so_snd) == 0) 
   38638:	e0bffd17 	ldw	r2,-12(fp)
   3863c:	10801317 	ldw	r2,76(r2)
   38640:	1007883a 	mov	r3,r2
   38644:	e0bffd17 	ldw	r2,-12(fp)
   38648:	10801217 	ldw	r2,72(r2)
   3864c:	1885c83a 	sub	r2,r3,r2
   38650:	10000516 	blt	r2,zero,38668 <tcp_usrreq+0x5e8>
   38654:	e0bffd17 	ldw	r2,-12(fp)
   38658:	10c01317 	ldw	r3,76(r2)
   3865c:	e0bffd17 	ldw	r2,-12(fp)
   38660:	10801217 	ldw	r2,72(r2)
   38664:	1880051e 	bne	r3,r2,3867c <tcp_usrreq+0x5fc>
      {
         m_freem(m);
   38668:	e13ffe17 	ldw	r4,-8(fp)
   3866c:	002c1a40 	call	2c1a4 <m_freem>
         error = ENOBUFS;
   38670:	00801a44 	movi	r2,105
   38674:	e0bff915 	stw	r2,-28(fp)
         break;
   38678:	00002d06 	br	38730 <tcp_usrreq+0x6b0>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
   3867c:	e0bffd17 	ldw	r2,-12(fp)
   38680:	10801204 	addi	r2,r2,72
   38684:	1009883a 	mov	r4,r2
   38688:	e17ffe17 	ldw	r5,-8(fp)
   3868c:	0031f280 	call	31f28 <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
   38690:	e0bff817 	ldw	r2,-32(fp)
   38694:	10c00e17 	ldw	r3,56(r2)
   38698:	e0bffd17 	ldw	r2,-12(fp)
   3869c:	10801217 	ldw	r2,72(r2)
   386a0:	1887883a 	add	r3,r3,r2
   386a4:	e0bff817 	ldw	r2,-32(fp)
   386a8:	10c01015 	stw	r3,64(r2)
      tp->t_force = 1;
   386ac:	e0bff817 	ldw	r2,-32(fp)
   386b0:	00c00044 	movi	r3,1
   386b4:	10c00a85 	stb	r3,42(r2)
      error = tcp_output(tp);
   386b8:	e13ff817 	ldw	r4,-32(fp)
   386bc:	0035e200 	call	35e20 <tcp_output>
   386c0:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
   386c4:	e0bff917 	ldw	r2,-28(fp)
   386c8:	10801a58 	cmpnei	r2,r2,105
   386cc:	1000051e 	bne	r2,zero,386e4 <tcp_usrreq+0x664>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
   386d0:	e0bffd17 	ldw	r2,-12(fp)
   386d4:	10801204 	addi	r2,r2,72
   386d8:	1009883a 	mov	r4,r2
   386dc:	e17ffe17 	ldw	r5,-8(fp)
   386e0:	00326800 	call	32680 <sbdropend>
      tp->t_force = 0;
   386e4:	e0bff817 	ldw	r2,-32(fp)
   386e8:	10000a85 	stb	zero,42(r2)
      break;
   386ec:	00001006 	br	38730 <tcp_usrreq+0x6b0>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
   386f0:	e13ffb17 	ldw	r4,-20(fp)
   386f4:	e17fff17 	ldw	r5,-4(fp)
   386f8:	00463580 	call	46358 <in_setsockaddr>
         in_setsockaddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setsockaddr(inp, nam);
#endif
      break;         
   386fc:	00000c06 	br	38730 <tcp_usrreq+0x6b0>

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
   38700:	e13ffb17 	ldw	r4,-20(fp)
   38704:	e17fff17 	ldw	r5,-4(fp)
   38708:	00463d80 	call	463d8 <in_setpeeraddr>
         in_setpeeraddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setpeeraddr(inp, nam);
#endif
      break;
   3870c:	00000806 	br	38730 <tcp_usrreq+0x6b0>

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
   38710:	e0bfff17 	ldw	r2,-4(fp)
   38714:	e13ff817 	ldw	r4,-32(fp)
   38718:	100b883a 	mov	r5,r2
   3871c:	0037c080 	call	37c08 <tcp_timers>
#ifdef DO_TCPTRACE
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;
   38720:	00000306 	br	38730 <tcp_usrreq+0x6b0>

      default:
      panic("tcp_usrreq");
   38724:	01000174 	movhi	r4,5
   38728:	213b9f04 	addi	r4,r4,-4484
   3872c:	00267380 	call	26738 <panic>
#ifdef DO_TCPTRACE
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
   38730:	e0bff917 	ldw	r2,-28(fp)
}
   38734:	e037883a 	mov	sp,fp
   38738:	dfc00117 	ldw	ra,4(sp)
   3873c:	df000017 	ldw	fp,0(sp)
   38740:	dec00204 	addi	sp,sp,8
   38744:	f800283a 	ret

00038748 <tcp_attach>:
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
   38748:	defff904 	addi	sp,sp,-28
   3874c:	dfc00615 	stw	ra,24(sp)
   38750:	df000515 	stw	fp,20(sp)
   38754:	df000504 	addi	fp,sp,20
   38758:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
   3875c:	e0bfff17 	ldw	r2,-4(fp)
   38760:	10801317 	ldw	r2,76(r2)
   38764:	10000326 	beq	r2,zero,38774 <tcp_attach+0x2c>
   38768:	e0bfff17 	ldw	r2,-4(fp)
   3876c:	10800b17 	ldw	r2,44(r2)
   38770:	10000b1e 	bne	r2,zero,387a0 <tcp_attach+0x58>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
   38774:	d0e03d17 	ldw	r3,-32524(gp)
   38778:	d0a03e17 	ldw	r2,-32520(gp)
   3877c:	e13fff17 	ldw	r4,-4(fp)
   38780:	180b883a 	mov	r5,r3
   38784:	100d883a 	mov	r6,r2
   38788:	0031e080 	call	31e08 <soreserve>
   3878c:	e0bffb15 	stw	r2,-20(fp)
      if (error)
   38790:	e0bffb17 	ldw	r2,-20(fp)
   38794:	10000226 	beq	r2,zero,387a0 <tcp_attach+0x58>
         return (error);
   38798:	e0bffb17 	ldw	r2,-20(fp)
   3879c:	00002b06 	br	3884c <tcp_attach+0x104>
   }
   error = in_pcballoc(so, &tcb);
   387a0:	e13fff17 	ldw	r4,-4(fp)
   387a4:	014001b4 	movhi	r5,6
   387a8:	29790004 	addi	r5,r5,-7168
   387ac:	0045e400 	call	45e40 <in_pcballoc>
   387b0:	e0bffb15 	stw	r2,-20(fp)
   if (error)
   387b4:	e0bffb17 	ldw	r2,-20(fp)
   387b8:	10000226 	beq	r2,zero,387c4 <tcp_attach+0x7c>
      return (error);
   387bc:	e0bffb17 	ldw	r2,-20(fp)
   387c0:	00002206 	br	3884c <tcp_attach+0x104>
   inp = sotoinpcb(so);
   387c4:	e0bfff17 	ldw	r2,-4(fp)
   387c8:	10800117 	ldw	r2,4(r2)
   387cc:	e0bffc15 	stw	r2,-16(fp)
   tp = tcp_newtcpcb(inp);
   387d0:	e13ffc17 	ldw	r4,-16(fp)
   387d4:	00375580 	call	37558 <tcp_newtcpcb>
   387d8:	e0bffd15 	stw	r2,-12(fp)
   if (tp == 0) 
   387dc:	e0bffd17 	ldw	r2,-12(fp)
   387e0:	1000171e 	bne	r2,zero,38840 <tcp_attach+0xf8>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
   387e4:	e0bfff17 	ldw	r2,-4(fp)
   387e8:	1080088b 	ldhu	r2,34(r2)
   387ec:	10bfffcc 	andi	r2,r2,65535
   387f0:	1080004c 	andi	r2,r2,1
   387f4:	e0bffe15 	stw	r2,-8(fp)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
   387f8:	e0bfff17 	ldw	r2,-4(fp)
   387fc:	10c0088b 	ldhu	r3,34(r2)
   38800:	00bfff84 	movi	r2,-2
   38804:	1884703a 	and	r2,r3,r2
   38808:	1007883a 	mov	r3,r2
   3880c:	e0bfff17 	ldw	r2,-4(fp)
   38810:	10c0088d 	sth	r3,34(r2)
      in_pcbdetach(inp);
   38814:	e13ffc17 	ldw	r4,-16(fp)
   38818:	0045ec80 	call	45ec8 <in_pcbdetach>
      so->so_state |= nofd;
   3881c:	e0bfff17 	ldw	r2,-4(fp)
   38820:	1080088b 	ldhu	r2,34(r2)
   38824:	e0fffe17 	ldw	r3,-8(fp)
   38828:	10c4b03a 	or	r2,r2,r3
   3882c:	1007883a 	mov	r3,r2
   38830:	e0bfff17 	ldw	r2,-4(fp)
   38834:	10c0088d 	sth	r3,34(r2)
      return (ENOBUFS);
   38838:	00801a44 	movi	r2,105
   3883c:	00000306 	br	3884c <tcp_attach+0x104>
   }
   tp->t_state = TCPS_CLOSED;
   38840:	e0bffd17 	ldw	r2,-12(fp)
   38844:	10000215 	stw	zero,8(r2)
   return (0);
   38848:	0005883a 	mov	r2,zero
}
   3884c:	e037883a 	mov	sp,fp
   38850:	dfc00117 	ldw	ra,4(sp)
   38854:	df000017 	ldw	fp,0(sp)
   38858:	dec00204 	addi	sp,sp,8
   3885c:	f800283a 	ret

00038860 <tcp_disconnect>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
   38860:	defffc04 	addi	sp,sp,-16
   38864:	dfc00315 	stw	ra,12(sp)
   38868:	df000215 	stw	fp,8(sp)
   3886c:	df000204 	addi	fp,sp,8
   38870:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
   38874:	e0bfff17 	ldw	r2,-4(fp)
   38878:	10800d17 	ldw	r2,52(r2)
   3887c:	10800817 	ldw	r2,32(r2)
   38880:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_state < TCPS_ESTABLISHED)
   38884:	e0bfff17 	ldw	r2,-4(fp)
   38888:	10800217 	ldw	r2,8(r2)
   3888c:	10800108 	cmpgei	r2,r2,4
   38890:	1000041e 	bne	r2,zero,388a4 <tcp_disconnect+0x44>
      tp = tcp_close(tp);
   38894:	e13fff17 	ldw	r4,-4(fp)
   38898:	00377100 	call	37710 <tcp_close>
   3889c:	e0bfff15 	stw	r2,-4(fp)
   388a0:	00001c06 	br	38914 <tcp_disconnect+0xb4>
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
   388a4:	e0bffe17 	ldw	r2,-8(fp)
   388a8:	10800417 	ldw	r2,16(r2)
   388ac:	1080200c 	andi	r2,r2,128
   388b0:	10000b26 	beq	r2,zero,388e0 <tcp_disconnect+0x80>
   388b4:	e0bffe17 	ldw	r2,-8(fp)
   388b8:	1080080b 	ldhu	r2,32(r2)
   388bc:	10bfffcc 	andi	r2,r2,65535
   388c0:	10a0001c 	xori	r2,r2,32768
   388c4:	10a00004 	addi	r2,r2,-32768
   388c8:	1000051e 	bne	r2,zero,388e0 <tcp_disconnect+0x80>
      tp = tcp_drop(tp, 0);
   388cc:	e13fff17 	ldw	r4,-4(fp)
   388d0:	000b883a 	mov	r5,zero
   388d4:	00376640 	call	37664 <tcp_drop>
   388d8:	e0bfff15 	stw	r2,-4(fp)
   388dc:	00000d06 	br	38914 <tcp_disconnect+0xb4>
   else 
   {
      soisdisconnecting(so);
   388e0:	e13ffe17 	ldw	r4,-8(fp)
   388e4:	00317100 	call	31710 <soisdisconnecting>
      sbflush(&so->so_rcv);
   388e8:	e0bffe17 	ldw	r2,-8(fp)
   388ec:	10800a04 	addi	r2,r2,40
   388f0:	1009883a 	mov	r4,r2
   388f4:	003244c0 	call	3244c <sbflush>
      tp = tcp_usrclosed(tp);
   388f8:	e13fff17 	ldw	r4,-4(fp)
   388fc:	003892c0 	call	3892c <tcp_usrclosed>
   38900:	e0bfff15 	stw	r2,-4(fp)
      if (tp)
   38904:	e0bfff17 	ldw	r2,-4(fp)
   38908:	10000226 	beq	r2,zero,38914 <tcp_disconnect+0xb4>
         (void) tcp_output(tp);
   3890c:	e13fff17 	ldw	r4,-4(fp)
   38910:	0035e200 	call	35e20 <tcp_output>
   }
   return (tp);
   38914:	e0bfff17 	ldw	r2,-4(fp)
}
   38918:	e037883a 	mov	sp,fp
   3891c:	dfc00117 	ldw	ra,4(sp)
   38920:	df000017 	ldw	fp,0(sp)
   38924:	dec00204 	addi	sp,sp,8
   38928:	f800283a 	ret

0003892c <tcp_usrclosed>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
   3892c:	defffd04 	addi	sp,sp,-12
   38930:	dfc00215 	stw	ra,8(sp)
   38934:	df000115 	stw	fp,4(sp)
   38938:	df000104 	addi	fp,sp,4
   3893c:	e13fff15 	stw	r4,-4(fp)

   switch (tp->t_state) 
   38940:	e0bfff17 	ldw	r2,-4(fp)
   38944:	10800217 	ldw	r2,8(r2)
   38948:	10c001a8 	cmpgeui	r3,r2,6
   3894c:	18001a1e 	bne	r3,zero,389b8 <tcp_usrclosed+0x8c>
   38950:	100690ba 	slli	r3,r2,2
   38954:	00800134 	movhi	r2,4
   38958:	10a25a04 	addi	r2,r2,-30360
   3895c:	1885883a 	add	r2,r3,r2
   38960:	10800017 	ldw	r2,0(r2)
   38964:	1000683a 	jmp	r2
   38968:	00038980 	call	3898 <alt_tse_mac_group_init+0x290>
   3896c:	00038980 	call	3898 <alt_tse_mac_group_init+0x290>
   38970:	00038980 	call	3898 <alt_tse_mac_group_init+0x290>
   38974:	00038998 	cmpnei	zero,zero,3622
   38978:	00038998 	cmpnei	zero,zero,3622
   3897c:	000389a8 	cmpgeui	zero,zero,3622
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
   38980:	e0bfff17 	ldw	r2,-4(fp)
   38984:	10000215 	stw	zero,8(r2)
      tp = tcp_close(tp);
   38988:	e13fff17 	ldw	r4,-4(fp)
   3898c:	00377100 	call	37710 <tcp_close>
   38990:	e0bfff15 	stw	r2,-4(fp)
      break;
   38994:	00000806 	br	389b8 <tcp_usrclosed+0x8c>

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
   38998:	e0bfff17 	ldw	r2,-4(fp)
   3899c:	00c00184 	movi	r3,6
   389a0:	10c00215 	stw	r3,8(r2)
      break;
   389a4:	00000406 	br	389b8 <tcp_usrclosed+0x8c>

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
   389a8:	e0bfff17 	ldw	r2,-4(fp)
   389ac:	00c00204 	movi	r3,8
   389b0:	10c00215 	stw	r3,8(r2)
      break;
   389b4:	0001883a 	nop
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
   389b8:	e0bfff17 	ldw	r2,-4(fp)
   389bc:	10000926 	beq	r2,zero,389e4 <tcp_usrclosed+0xb8>
   389c0:	e0bfff17 	ldw	r2,-4(fp)
   389c4:	10800217 	ldw	r2,8(r2)
   389c8:	10800250 	cmplti	r2,r2,9
   389cc:	1000051e 	bne	r2,zero,389e4 <tcp_usrclosed+0xb8>
      soisdisconnected(tp->t_inpcb->inp_socket);
   389d0:	e0bfff17 	ldw	r2,-4(fp)
   389d4:	10800d17 	ldw	r2,52(r2)
   389d8:	10800817 	ldw	r2,32(r2)
   389dc:	1009883a 	mov	r4,r2
   389e0:	00317a40 	call	317a4 <soisdisconnected>
   return (tp);
   389e4:	e0bfff17 	ldw	r2,-4(fp)
}
   389e8:	e037883a 	mov	sp,fp
   389ec:	dfc00117 	ldw	ra,4(sp)
   389f0:	df000017 	ldw	fp,0(sp)
   389f4:	dec00204 	addi	sp,sp,8
   389f8:	f800283a 	ret

000389fc <tcpinit>:
 * RETURNS: 0 if OK, else one of the ENP_ error codes
 */

int
tcpinit(void)
{
   389fc:	defffd04 	addi	sp,sp,-12
   38a00:	dfc00215 	stw	ra,8(sp)
   38a04:	df000115 	stw	fp,4(sp)
   38a08:	df000104 	addi	fp,sp,4
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
   38a0c:	002c86c0 	call	2c86c <nptcp_init>
   38a10:	e0bfff15 	stw	r2,-4(fp)
   if (e)
   38a14:	e0bfff17 	ldw	r2,-4(fp)
   38a18:	10000226 	beq	r2,zero,38a24 <tcpinit+0x28>
      return e;
   38a1c:	e0bfff17 	ldw	r2,-4(fp)
   38a20:	00000106 	br	38a28 <tcpinit+0x2c>

   return 0;   /* good return */
   38a24:	0005883a 	mov	r2,zero
}
   38a28:	e037883a 	mov	sp,fp
   38a2c:	dfc00117 	ldw	ra,4(sp)
   38a30:	df000017 	ldw	fp,0(sp)
   38a34:	dec00204 	addi	sp,sp,8
   38a38:	f800283a 	ret

00038a3c <udp_lookup>:
 * RETURNS: 
 */

UDPCONN
udp_lookup(struct socket * so)
{
   38a3c:	defffd04 	addi	sp,sp,-12
   38a40:	df000215 	stw	fp,8(sp)
   38a44:	df000204 	addi	fp,sp,8
   38a48:	e13fff15 	stw	r4,-4(fp)
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
   38a4c:	00800174 	movhi	r2,5
   38a50:	108fb204 	addi	r2,r2,16072
   38a54:	10800017 	ldw	r2,0(r2)
   38a58:	e0bffe15 	stw	r2,-8(fp)
   38a5c:	00000906 	br	38a84 <udp_lookup+0x48>
      if (tmp->u_data == (void*)so)
   38a60:	e0bffe17 	ldw	r2,-8(fp)
   38a64:	10c00617 	ldw	r3,24(r2)
   38a68:	e0bfff17 	ldw	r2,-4(fp)
   38a6c:	1880021e 	bne	r3,r2,38a78 <udp_lookup+0x3c>
      return (tmp);
   38a70:	e0bffe17 	ldw	r2,-8(fp)
   38a74:	00000606 	br	38a90 <udp_lookup+0x54>
UDPCONN
udp_lookup(struct socket * so)
{
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
   38a78:	e0bffe17 	ldw	r2,-8(fp)
   38a7c:	10800017 	ldw	r2,0(r2)
   38a80:	e0bffe15 	stw	r2,-8(fp)
   38a84:	e0bffe17 	ldw	r2,-8(fp)
   38a88:	103ff51e 	bne	r2,zero,38a60 <__alt_mem_descriptor_memory+0xdeff8a60>
      if (tmp->u_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
   38a8c:	0005883a 	mov	r2,zero
}
   38a90:	e037883a 	mov	sp,fp
   38a94:	df000017 	ldw	fp,0(sp)
   38a98:	dec00104 	addi	sp,sp,4
   38a9c:	f800283a 	ret

00038aa0 <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
   38aa0:	defff504 	addi	sp,sp,-44
   38aa4:	dfc00a15 	stw	ra,40(sp)
   38aa8:	df000915 	stw	fp,36(sp)
   38aac:	df000904 	addi	fp,sp,36
   38ab0:	e13ffe15 	stw	r4,-8(fp)
   38ab4:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   38ab8:	e0bfff17 	ldw	r2,-4(fp)
   38abc:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
   38ac0:	0009883a 	mov	r4,zero
   38ac4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
   38ac8:	e0bff717 	ldw	r2,-36(fp)
   38acc:	10c00a17 	ldw	r3,40(r2)
   38ad0:	e0bffe17 	ldw	r2,-8(fp)
   38ad4:	10800417 	ldw	r2,16(r2)
   38ad8:	1887883a 	add	r3,r3,r2
   38adc:	e0bff717 	ldw	r2,-36(fp)
   38ae0:	10800b17 	ldw	r2,44(r2)
   38ae4:	18800436 	bltu	r3,r2,38af8 <udp_soinput+0x58>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   38ae8:	0009883a 	mov	r4,zero
   38aec:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   38af0:	00801a44 	movi	r2,105
   38af4:	00004d06 	br	38c2c <udp_soinput+0x18c>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
   38af8:	01000044 	movi	r4,1
   38afc:	000b883a 	mov	r5,zero
   38b00:	002bf0c0 	call	2bf0c <m_getnbuf>
   38b04:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
   38b08:	e0bff817 	ldw	r2,-32(fp)
   38b0c:	1000041e 	bne	r2,zero,38b20 <udp_soinput+0x80>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   38b10:	0009883a 	mov	r4,zero
   38b14:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   38b18:	00801a44 	movi	r2,105
   38b1c:	00004306 	br	38c2c <udp_soinput+0x18c>
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   38b20:	e0bff817 	ldw	r2,-32(fp)
   38b24:	e0fffe17 	ldw	r3,-8(fp)
   38b28:	10c00115 	stw	r3,4(r2)
   m_in->m_data = pkt->nb_prot;
   38b2c:	e0bffe17 	ldw	r2,-8(fp)
   38b30:	10c00317 	ldw	r3,12(r2)
   38b34:	e0bff817 	ldw	r2,-32(fp)
   38b38:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
   38b3c:	e0bffe17 	ldw	r2,-8(fp)
   38b40:	10c00417 	ldw	r3,16(r2)
   38b44:	e0bff817 	ldw	r2,-32(fp)
   38b48:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;
   38b4c:	e0bffe17 	ldw	r2,-8(fp)
   38b50:	10c00117 	ldw	r3,4(r2)
   38b54:	e0bff817 	ldw	r2,-32(fp)
   38b58:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
   38b5c:	e0bffe17 	ldw	r2,-8(fp)
   38b60:	10c00217 	ldw	r3,8(r2)
   38b64:	e0bff817 	ldw	r2,-32(fp)
   38b68:	10c00515 	stw	r3,20(r2)

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
   38b6c:	e0bffe17 	ldw	r2,-8(fp)
   38b70:	10800717 	ldw	r2,28(r2)
   38b74:	e0bffb15 	stw	r2,-20(fp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   38b78:	e0bffe17 	ldw	r2,-8(fp)
   38b7c:	10800317 	ldw	r2,12(r2)
   38b80:	10bffe04 	addi	r2,r2,-8
   38b84:	e0bff915 	stw	r2,-28(fp)
   sin.sin_port = htons(udpp->ud_srcp);
   38b88:	e0bff917 	ldw	r2,-28(fp)
   38b8c:	1080000b 	ldhu	r2,0(r2)
   38b90:	10bfffcc 	andi	r2,r2,65535
   38b94:	1004d23a 	srli	r2,r2,8
   38b98:	1007883a 	mov	r3,r2
   38b9c:	e0bff917 	ldw	r2,-28(fp)
   38ba0:	1080000b 	ldhu	r2,0(r2)
   38ba4:	10bfffcc 	andi	r2,r2,65535
   38ba8:	1004923a 	slli	r2,r2,8
   38bac:	1884b03a 	or	r2,r3,r2
   38bb0:	e0bffa8d 	sth	r2,-22(fp)
   sin.sin_family = AF_INET;
   38bb4:	00800084 	movi	r2,2
   38bb8:	e0bffa0d 	sth	r2,-24(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
   38bbc:	e0bff717 	ldw	r2,-36(fp)
   38bc0:	10c00a04 	addi	r3,r2,40
   38bc4:	e0bffa04 	addi	r2,fp,-24
   38bc8:	1809883a 	mov	r4,r3
   38bcc:	100b883a 	mov	r5,r2
   38bd0:	e1bff817 	ldw	r6,-32(fp)
   38bd4:	00320980 	call	32098 <sbappendaddr>
   38bd8:	1000081e 	bne	r2,zero,38bfc <udp_soinput+0x15c>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
   38bdc:	e0bff817 	ldw	r2,-32(fp)
   38be0:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
   38be4:	e13ff817 	ldw	r4,-32(fp)
   38be8:	002c0940 	call	2c094 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
   38bec:	0009883a 	mov	r4,zero
   38bf0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
   38bf4:	00801a44 	movi	r2,105
   38bf8:	00000c06 	br	38c2c <udp_soinput+0x18c>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
   38bfc:	e0bff717 	ldw	r2,-36(fp)
   38c00:	10800a04 	addi	r2,r2,40
   38c04:	1009883a 	mov	r4,r2
   38c08:	00271c80 	call	271c8 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
   38c0c:	e0bff717 	ldw	r2,-36(fp)
   38c10:	10800a04 	addi	r2,r2,40
   38c14:	e13ff717 	ldw	r4,-36(fp)
   38c18:	100b883a 	mov	r5,r2
   38c1c:	0031d740 	call	31d74 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
   38c20:	0009883a 	mov	r4,zero
   38c24:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return 0;
   38c28:	0005883a 	mov	r2,zero
}
   38c2c:	e037883a 	mov	sp,fp
   38c30:	dfc00117 	ldw	ra,4(sp)
   38c34:	df000017 	ldw	fp,0(sp)
   38c38:	dec00204 	addi	sp,sp,8
   38c3c:	f800283a 	ret

00038c40 <udp_usrreq>:

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
   38c40:	defff804 	addi	sp,sp,-32
   38c44:	dfc00715 	stw	ra,28(sp)
   38c48:	df000615 	stw	fp,24(sp)
   38c4c:	df000604 	addi	fp,sp,24
   38c50:	e13ffd15 	stw	r4,-12(fp)
   38c54:	e17ffe15 	stw	r5,-8(fp)
   38c58:	e1bfff15 	stw	r6,-4(fp)
   UDPCONN udpconn = (UDPCONN)NULL;
   38c5c:	e03ffb15 	stw	zero,-20(fp)
   int   req;

   req = so->so_req;    /* get request from socket struct */
   38c60:	e0bffd17 	ldw	r2,-12(fp)
   38c64:	10800717 	ldw	r2,28(r2)
   38c68:	e0bffc15 	stw	r2,-16(fp)

   switch (req) 
   38c6c:	e0bffc17 	ldw	r2,-16(fp)
   38c70:	10800468 	cmpgeui	r2,r2,17
   38c74:	10007b1e 	bne	r2,zero,38e64 <udp_usrreq+0x224>
   38c78:	e0bffc17 	ldw	r2,-16(fp)
   38c7c:	100690ba 	slli	r3,r2,2
   38c80:	00800134 	movhi	r2,4
   38c84:	10a32504 	addi	r2,r2,-29548
   38c88:	1885883a 	add	r2,r3,r2
   38c8c:	10800017 	ldw	r2,0(r2)
   38c90:	1000683a 	jmp	r2
   38c94:	00038cd8 	cmpnei	zero,zero,3635
   38c98:	00038d5c 	xori	zero,zero,3637
   38c9c:	00038d98 	cmpnei	zero,zero,3638
   38ca0:	00038e64 	muli	zero,zero,3641
   38ca4:	00038d98 	cmpnei	zero,zero,3638
   38ca8:	00038e64 	muli	zero,zero,3641
   38cac:	00038e58 	cmpnei	zero,zero,3641
   38cb0:	00038e64 	muli	zero,zero,3641
   38cb4:	00038e58 	cmpnei	zero,zero,3641
   38cb8:	00038dd8 	cmpnei	zero,zero,3639
   38cbc:	00038e64 	muli	zero,zero,3641
   38cc0:	00038e64 	muli	zero,zero,3641
   38cc4:	00038e64 	muli	zero,zero,3641
   38cc8:	00038e64 	muli	zero,zero,3641
   38ccc:	00038e64 	muli	zero,zero,3641
   38cd0:	00038e18 	cmpnei	zero,zero,3640
   38cd4:	00038e18 	cmpnei	zero,zero,3640
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
   38cd8:	00434380 	call	43438 <udp_maxalloc>
   38cdc:	1007883a 	mov	r3,r2
   38ce0:	e0bffd17 	ldw	r2,-12(fp)
   38ce4:	10c01315 	stw	r3,76(r2)
   38ce8:	e0bffd17 	ldw	r2,-12(fp)
   38cec:	10c01317 	ldw	r3,76(r2)
   38cf0:	e0bffd17 	ldw	r2,-12(fp)
   38cf4:	10c00b15 	stw	r3,44(r2)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
   38cf8:	e0bffd17 	ldw	r2,-12(fp)
   38cfc:	10800517 	ldw	r2,20(r2)
   38d00:	10800098 	cmpnei	r2,r2,2
   38d04:	10000f1e 	bne	r2,zero,38d44 <udp_usrreq+0x104>
        UNLOCK_NET_RESOURCE(NET_RESID);
   38d08:	0009883a 	mov	r4,zero
   38d0c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
   38d10:	00432b40 	call	432b4 <udp_socket>
   38d14:	10ffffcc 	andi	r3,r2,65535
   38d18:	e0bffd17 	ldw	r2,-12(fp)
   38d1c:	d8800015 	stw	r2,0(sp)
   38d20:	0009883a 	mov	r4,zero
   38d24:	000b883a 	mov	r5,zero
   38d28:	180d883a 	mov	r6,r3
   38d2c:	01c00134 	movhi	r7,4
   38d30:	39e2a804 	addi	r7,r7,-30048
   38d34:	002ac780 	call	2ac78 <udp_open>
   38d38:	e0bffb15 	stw	r2,-20(fp)
        LOCK_NET_RESOURCE(NET_RESID);
   38d3c:	0009883a 	mov	r4,zero
   38d40:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
   38d44:	e0bffb17 	ldw	r2,-20(fp)
   38d48:	1000021e 	bne	r2,zero,38d54 <udp_usrreq+0x114>
         return(EINVAL);
   38d4c:	00800584 	movi	r2,22
   38d50:	00004506 	br	38e68 <udp_usrreq+0x228>
      return 0;
   38d54:	0005883a 	mov	r2,zero
   38d58:	00004306 	br	38e68 <udp_usrreq+0x228>
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
   38d5c:	e13ffd17 	ldw	r4,-12(fp)
   38d60:	0038a3c0 	call	38a3c <udp_lookup>
   38d64:	e0bffb15 	stw	r2,-20(fp)
      if (!udpconn)
   38d68:	e0bffb17 	ldw	r2,-20(fp)
   38d6c:	1000021e 	bne	r2,zero,38d78 <udp_usrreq+0x138>
         return(EINVAL);
   38d70:	00800584 	movi	r2,22
   38d74:	00003c06 	br	38e68 <udp_usrreq+0x228>
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
   38d78:	0009883a 	mov	r4,zero
   38d7c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
   38d80:	e13ffb17 	ldw	r4,-20(fp)
   38d84:	002ae8c0 	call	2ae8c <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
   38d88:	0009883a 	mov	r4,zero
   38d8c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      return 0;
   38d90:	0005883a 	mov	r2,zero
   38d94:	00003406 	br	38e68 <udp_usrreq+0x228>
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
   38d98:	e0bfff17 	ldw	r2,-4(fp)
   38d9c:	1000021e 	bne	r2,zero,38da8 <udp_usrreq+0x168>
         return(EINVAL);
   38da0:	00800584 	movi	r2,22
   38da4:	00003006 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
   38da8:	e0bffd17 	ldw	r2,-12(fp)
   38dac:	10800517 	ldw	r2,20(r2)
   38db0:	10800098 	cmpnei	r2,r2,2
   38db4:	1000051e 	bne	r2,zero,38dcc <udp_usrreq+0x18c>
        return udp4_sockbind(so, nam, req );
   38db8:	e13ffd17 	ldw	r4,-12(fp)
   38dbc:	e17fff17 	ldw	r5,-4(fp)
   38dc0:	e1bffc17 	ldw	r6,-16(fp)
   38dc4:	0038e7c0 	call	38e7c <udp4_sockbind>
   38dc8:	00002706 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockbind(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
   38dcc:	002b0f40 	call	2b0f4 <dtrap>
      return EINVAL;
   38dd0:	00800584 	movi	r2,22
   38dd4:	00002406 	br	38e68 <udp_usrreq+0x228>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
   38dd8:	e0bffe17 	ldw	r2,-8(fp)
   38ddc:	1000021e 	bne	r2,zero,38de8 <udp_usrreq+0x1a8>
         return(EINVAL);
   38de0:	00800584 	movi	r2,22
   38de4:	00002006 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
   38de8:	e0bffd17 	ldw	r2,-12(fp)
   38dec:	10800517 	ldw	r2,20(r2)
   38df0:	10800098 	cmpnei	r2,r2,2
   38df4:	1000051e 	bne	r2,zero,38e0c <udp_usrreq+0x1cc>
        return udp4_socksend(so, m, nam );
   38df8:	e13ffd17 	ldw	r4,-12(fp)
   38dfc:	e17ffe17 	ldw	r5,-8(fp)
   38e00:	e1bfff17 	ldw	r6,-4(fp)
   38e04:	00391540 	call	39154 <udp4_socksend>
   38e08:	00001706 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_socksend(so, m, nam);
      }
#endif
      dtrap();   /* invalid address */
   38e0c:	002b0f40 	call	2b0f4 <dtrap>
      return EINVAL;
   38e10:	00800584 	movi	r2,22
   38e14:	00001406 	br	38e68 <udp_usrreq+0x228>

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
   38e18:	e0bfff17 	ldw	r2,-4(fp)
   38e1c:	1000021e 	bne	r2,zero,38e28 <udp_usrreq+0x1e8>
         return(EINVAL);
   38e20:	00800584 	movi	r2,22
   38e24:	00001006 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
   38e28:	e0bffd17 	ldw	r2,-12(fp)
   38e2c:	10800517 	ldw	r2,20(r2)
   38e30:	10800098 	cmpnei	r2,r2,2
   38e34:	1000051e 	bne	r2,zero,38e4c <udp_usrreq+0x20c>
        return udp4_sockaddr(so, nam, req );
   38e38:	e13ffd17 	ldw	r4,-12(fp)
   38e3c:	e17fff17 	ldw	r5,-4(fp)
   38e40:	e1bffc17 	ldw	r6,-16(fp)
   38e44:	00394c80 	call	394c8 <udp4_sockaddr>
   38e48:	00000706 	br	38e68 <udp_usrreq+0x228>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
   38e4c:	002b0f40 	call	2b0f4 <dtrap>
      return EINVAL;
   38e50:	00800584 	movi	r2,22
   38e54:	00000406 	br	38e68 <udp_usrreq+0x228>

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
   38e58:	002b0f40 	call	2b0f4 <dtrap>
      return 0;
   38e5c:	0005883a 	mov	r2,zero
   38e60:	00000106 	br	38e68 <udp_usrreq+0x228>
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   38e64:	008017c4 	movi	r2,95
   }
}
   38e68:	e037883a 	mov	sp,fp
   38e6c:	dfc00117 	ldw	ra,4(sp)
   38e70:	df000017 	ldw	fp,0(sp)
   38e74:	dec00204 	addi	sp,sp,8
   38e78:	f800283a 	ret

00038e7c <udp4_sockbind>:

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
   38e7c:	defff304 	addi	sp,sp,-52
   38e80:	dfc00c15 	stw	ra,48(sp)
   38e84:	df000b15 	stw	fp,44(sp)
   38e88:	df000b04 	addi	fp,sp,44
   38e8c:	e13ffd15 	stw	r4,-12(fp)
   38e90:	e17ffe15 	stw	r5,-8(fp)
   38e94:	e1bfff15 	stw	r6,-4(fp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
   38e98:	e0bffe17 	ldw	r2,-8(fp)
   38e9c:	10800317 	ldw	r2,12(r2)
   38ea0:	e0bffa15 	stw	r2,-24(fp)
  if (sin == NULL)
   38ea4:	e0bffa17 	ldw	r2,-24(fp)
   38ea8:	1000021e 	bne	r2,zero,38eb4 <udp4_sockbind+0x38>
    return(EINVAL);
   38eac:	00800584 	movi	r2,22
   38eb0:	0000a306 	br	39140 <udp4_sockbind+0x2c4>
  if (nam->m_len != sizeof (*sin))
   38eb4:	e0bffe17 	ldw	r2,-8(fp)
   38eb8:	10800217 	ldw	r2,8(r2)
   38ebc:	10800420 	cmpeqi	r2,r2,16
   38ec0:	1000021e 	bne	r2,zero,38ecc <udp4_sockbind+0x50>
    return(EINVAL);
   38ec4:	00800584 	movi	r2,22
   38ec8:	00009d06 	br	39140 <udp4_sockbind+0x2c4>
  udpconn = udp_lookup(so);
   38ecc:	e13ffd17 	ldw	r4,-12(fp)
   38ed0:	0038a3c0 	call	38a3c <udp_lookup>
   38ed4:	e0bffb15 	stw	r2,-20(fp)
  if (!udpconn)
   38ed8:	e0bffb17 	ldw	r2,-20(fp)
   38edc:	1000021e 	bne	r2,zero,38ee8 <udp4_sockbind+0x6c>
     return(EINVAL);
   38ee0:	00800584 	movi	r2,22
   38ee4:	00009606 	br	39140 <udp4_sockbind+0x2c4>
  if (req == PRU_BIND)
   38ee8:	e0bfff17 	ldw	r2,-4(fp)
   38eec:	10800098 	cmpnei	r2,r2,2
   38ef0:	1000541e 	bne	r2,zero,39044 <udp4_sockbind+0x1c8>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
   38ef4:	e0bffa17 	ldw	r2,-24(fp)
   38ef8:	1080008b 	ldhu	r2,2(r2)
   38efc:	10bfffcc 	andi	r2,r2,65535
   38f00:	10000b1e 	bne	r2,zero,38f30 <udp4_sockbind+0xb4>
    {
      if (udpconn->u_lport != 0)
   38f04:	e0bffb17 	ldw	r2,-20(fp)
   38f08:	1080018b 	ldhu	r2,6(r2)
   38f0c:	10bfffcc 	andi	r2,r2,65535
   38f10:	10000426 	beq	r2,zero,38f24 <udp4_sockbind+0xa8>
        lport = udpconn->u_lport;
   38f14:	e0bffb17 	ldw	r2,-20(fp)
   38f18:	1080018b 	ldhu	r2,6(r2)
   38f1c:	e0bff60d 	sth	r2,-40(fp)
   38f20:	00000e06 	br	38f5c <udp4_sockbind+0xe0>
      else
        lport = udp_socket();
   38f24:	00432b40 	call	432b4 <udp_socket>
   38f28:	e0bff60d 	sth	r2,-40(fp)
   38f2c:	00000b06 	br	38f5c <udp4_sockbind+0xe0>
    }
    else
    {
      lport = ntohs(sin->sin_port);
   38f30:	e0bffa17 	ldw	r2,-24(fp)
   38f34:	1080008b 	ldhu	r2,2(r2)
   38f38:	10bfffcc 	andi	r2,r2,65535
   38f3c:	1004d23a 	srli	r2,r2,8
   38f40:	1007883a 	mov	r3,r2
   38f44:	e0bffa17 	ldw	r2,-24(fp)
   38f48:	1080008b 	ldhu	r2,2(r2)
   38f4c:	10bfffcc 	andi	r2,r2,65535
   38f50:	1004923a 	slli	r2,r2,8
   38f54:	1884b03a 	or	r2,r3,r2
   38f58:	e0bff60d 	sth	r2,-40(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
   38f5c:	e0bffa17 	ldw	r2,-24(fp)
   38f60:	10800117 	ldw	r2,4(r2)
   38f64:	1000021e 	bne	r2,zero,38f70 <udp4_sockbind+0xf4>
    {
      lhost = 0L;
   38f68:	e03ff815 	stw	zero,-32(fp)
   38f6c:	00001606 	br	38fc8 <udp4_sockbind+0x14c>
    }
    else
    {
      lhost = sin->sin_addr.s_addr;
   38f70:	e0bffa17 	ldw	r2,-24(fp)
   38f74:	10800117 	ldw	r2,4(r2)
   38f78:	e0bff815 	stw	r2,-32(fp)
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   38f7c:	008001b4 	movhi	r2,6
   38f80:	10b9dc04 	addi	r2,r2,-6288
   38f84:	10800017 	ldw	r2,0(r2)
   38f88:	e0bff915 	stw	r2,-28(fp)
   38f8c:	00000806 	br	38fb0 <udp4_sockbind+0x134>
        if (ifp->n_ipaddr == lhost)
   38f90:	e0bff917 	ldw	r2,-28(fp)
   38f94:	10c00a17 	ldw	r3,40(r2)
   38f98:	e0bff817 	ldw	r2,-32(fp)
   38f9c:	1880011e 	bne	r3,r2,38fa4 <udp4_sockbind+0x128>
          break;
   38fa0:	00000506 	br	38fb8 <udp4_sockbind+0x13c>
    else
    {
      lhost = sin->sin_addr.s_addr;
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   38fa4:	e0bff917 	ldw	r2,-28(fp)
   38fa8:	10800017 	ldw	r2,0(r2)
   38fac:	e0bff915 	stw	r2,-28(fp)
   38fb0:	e0bff917 	ldw	r2,-28(fp)
   38fb4:	103ff61e 	bne	r2,zero,38f90 <__alt_mem_descriptor_memory+0xdeff8f90>
        if (ifp->n_ipaddr == lhost)
          break;
      if (ifp == NULL)
   38fb8:	e0bff917 	ldw	r2,-28(fp)
   38fbc:	1000021e 	bne	r2,zero,38fc8 <udp4_sockbind+0x14c>
        return(EADDRNOTAVAIL);
   38fc0:	00801f44 	movi	r2,125
   38fc4:	00005e06 	br	39140 <udp4_sockbind+0x2c4>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
   38fc8:	e0bffd17 	ldw	r2,-12(fp)
   38fcc:	10800417 	ldw	r2,16(r2)
   38fd0:	1080010c 	andi	r2,r2,4
   38fd4:	1000141e 	bne	r2,zero,39028 <udp4_sockbind+0x1ac>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
   38fd8:	00800174 	movhi	r2,5
   38fdc:	108fb204 	addi	r2,r2,16072
   38fe0:	10800017 	ldw	r2,0(r2)
   38fe4:	e0bff515 	stw	r2,-44(fp)
   38fe8:	00000d06 	br	39020 <udp4_sockbind+0x1a4>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
   38fec:	e0bff517 	ldw	r2,-44(fp)
   38ff0:	1080018b 	ldhu	r2,6(r2)
   38ff4:	10ffffcc 	andi	r3,r2,65535
   38ff8:	e0bff60b 	ldhu	r2,-40(fp)
   38ffc:	1880051e 	bne	r3,r2,39014 <udp4_sockbind+0x198>
   39000:	e0fff517 	ldw	r3,-44(fp)
   39004:	e0bffb17 	ldw	r2,-20(fp)
   39008:	18800226 	beq	r3,r2,39014 <udp4_sockbind+0x198>
          return(EADDRINUSE);
   3900c:	00801c04 	movi	r2,112
   39010:	00004b06 	br	39140 <udp4_sockbind+0x2c4>

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
   39014:	e0bff517 	ldw	r2,-44(fp)
   39018:	10800017 	ldw	r2,0(r2)
   3901c:	e0bff515 	stw	r2,-44(fp)
   39020:	e0bff517 	ldw	r2,-44(fp)
   39024:	103ff11e 	bne	r2,zero,38fec <__alt_mem_descriptor_memory+0xdeff8fec>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
          return(EADDRINUSE);
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
   39028:	e0bffb17 	ldw	r2,-20(fp)
   3902c:	e0fff60b 	ldhu	r3,-40(fp)
   39030:	10c0018d 	sth	r3,6(r2)
    udpconn->u_lhost = lhost;
   39034:	e0bffb17 	ldw	r2,-20(fp)
   39038:	e0fff817 	ldw	r3,-32(fp)
   3903c:	10c00315 	stw	r3,12(r2)
   39040:	00003e06 	br	3913c <udp4_sockbind+0x2c0>
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
   39044:	e0bffa17 	ldw	r2,-24(fp)
   39048:	1080008b 	ldhu	r2,2(r2)
   3904c:	10bfffcc 	andi	r2,r2,65535
   39050:	1004d23a 	srli	r2,r2,8
   39054:	1007883a 	mov	r3,r2
   39058:	e0bffa17 	ldw	r2,-24(fp)
   3905c:	1080008b 	ldhu	r2,2(r2)
   39060:	10bfffcc 	andi	r2,r2,65535
   39064:	1004923a 	slli	r2,r2,8
   39068:	1884b03a 	or	r2,r3,r2
   3906c:	e0bffc0d 	sth	r2,-16(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
   39070:	e0bffa17 	ldw	r2,-24(fp)
   39074:	10800117 	ldw	r2,4(r2)
   39078:	1000021e 	bne	r2,zero,39084 <udp4_sockbind+0x208>
      fhost = 0L;
   3907c:	e03ff715 	stw	zero,-36(fp)
   39080:	00000306 	br	39090 <udp4_sockbind+0x214>
    else
      fhost = sin->sin_addr.s_addr;
   39084:	e0bffa17 	ldw	r2,-24(fp)
   39088:	10800117 	ldw	r2,4(r2)
   3908c:	e0bff715 	stw	r2,-36(fp)
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
   39090:	e13ff717 	ldw	r4,-36(fp)
   39094:	003e7c40 	call	3e7c4 <ip_mymach>
   39098:	e0bff815 	stw	r2,-32(fp)
    if (lhost == 0)
   3909c:	e0bff817 	ldw	r2,-32(fp)
   390a0:	1000021e 	bne	r2,zero,390ac <udp4_sockbind+0x230>
      return(ENETUNREACH);
   390a4:	00801c84 	movi	r2,114
   390a8:	00002506 	br	39140 <udp4_sockbind+0x2c4>
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
   390ac:	e0bffb17 	ldw	r2,-20(fp)
   390b0:	1080018b 	ldhu	r2,6(r2)
   390b4:	e0bff60d 	sth	r2,-40(fp)
    if (lport == 0)
   390b8:	e0bff60b 	ldhu	r2,-40(fp)
   390bc:	1000021e 	bne	r2,zero,390c8 <udp4_sockbind+0x24c>
      lport = udp_socket();
   390c0:	00432b40 	call	432b4 <udp_socket>
   390c4:	e0bff60d 	sth	r2,-40(fp)
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
   390c8:	e0bffb17 	ldw	r2,-20(fp)
   390cc:	e0fff817 	ldw	r3,-32(fp)
   390d0:	10c00315 	stw	r3,12(r2)
    udpconn->u_lport = lport;
   390d4:	e0bffb17 	ldw	r2,-20(fp)
   390d8:	e0fff60b 	ldhu	r3,-40(fp)
   390dc:	10c0018d 	sth	r3,6(r2)
    udpconn->u_fhost = fhost;
   390e0:	e0bffb17 	ldw	r2,-20(fp)
   390e4:	e0fff717 	ldw	r3,-36(fp)
   390e8:	10c00415 	stw	r3,16(r2)
    udpconn->u_fport = fport;
   390ec:	e0bffb17 	ldw	r2,-20(fp)
   390f0:	e0fffc0b 	ldhu	r3,-16(fp)
   390f4:	10c0020d 	sth	r3,8(r2)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
   390f8:	e0bffd17 	ldw	r2,-12(fp)
   390fc:	10c0088b 	ldhu	r3,34(r2)
   39100:	00bffcc4 	movi	r2,-13
   39104:	1884703a 	and	r2,r3,r2
   39108:	1007883a 	mov	r3,r2
   3910c:	e0bffd17 	ldw	r2,-12(fp)
   39110:	10c0088d 	sth	r3,34(r2)
    so->so_state |= SS_ISCONNECTED;
   39114:	e0bffd17 	ldw	r2,-12(fp)
   39118:	1080088b 	ldhu	r2,34(r2)
   3911c:	10800094 	ori	r2,r2,2
   39120:	1007883a 	mov	r3,r2
   39124:	e0bffd17 	ldw	r2,-12(fp)
   39128:	10c0088d 	sth	r3,34(r2)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
   3912c:	e0bffd17 	ldw	r2,-12(fp)
   39130:	10800a04 	addi	r2,r2,40
   39134:	1009883a 	mov	r4,r2
   39138:	003244c0 	call	3244c <sbflush>
  }
  return 0;
   3913c:	0005883a 	mov	r2,zero
}
   39140:	e037883a 	mov	sp,fp
   39144:	dfc00117 	ldw	ra,4(sp)
   39148:	df000017 	ldw	fp,0(sp)
   3914c:	dec00204 	addi	sp,sp,8
   39150:	f800283a 	ret

00039154 <udp4_socksend>:

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
   39154:	defff304 	addi	sp,sp,-52
   39158:	dfc00c15 	stw	ra,48(sp)
   3915c:	df000b15 	stw	fp,44(sp)
   39160:	dc000a15 	stw	r16,40(sp)
   39164:	df000b04 	addi	fp,sp,44
   39168:	e13ffc15 	stw	r4,-16(fp)
   3916c:	e17ffd15 	stw	r5,-12(fp)
   39170:	e1bffe15 	stw	r6,-8(fp)
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
   39174:	e13ffc17 	ldw	r4,-16(fp)
   39178:	0038a3c0 	call	38a3c <udp_lookup>
   3917c:	e0bff815 	stw	r2,-32(fp)
  if (!udpconn)
   39180:	e0bff817 	ldw	r2,-32(fp)
   39184:	1000041e 	bne	r2,zero,39198 <udp4_socksend+0x44>
  {
    m_free(m);
   39188:	e13ffd17 	ldw	r4,-12(fp)
   3918c:	002c0940 	call	2c094 <m_free>
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
   39190:	00801bc4 	movi	r2,111
   39194:	0000c606 	br	394b0 <udp4_socksend+0x35c>
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
   39198:	e0bffe17 	ldw	r2,-8(fp)
   3919c:	10000e1e 	bne	r2,zero,391d8 <udp4_socksend+0x84>
  { 
    if (so->so_state & SS_ISCONNECTED)
   391a0:	e0bffc17 	ldw	r2,-16(fp)
   391a4:	1080088b 	ldhu	r2,34(r2)
   391a8:	10bfffcc 	andi	r2,r2,65535
   391ac:	1080008c 	andi	r2,r2,2
   391b0:	10000726 	beq	r2,zero,391d0 <udp4_socksend+0x7c>
    {
      fport = udpconn->u_fport;
   391b4:	e0bff817 	ldw	r2,-32(fp)
   391b8:	1080020b 	ldhu	r2,8(r2)
   391bc:	e0bff50d 	sth	r2,-44(fp)
      fhost = udpconn->u_fhost;
   391c0:	e0bff817 	ldw	r2,-32(fp)
   391c4:	10800417 	ldw	r2,16(r2)
   391c8:	e0bff615 	stw	r2,-40(fp)
   391cc:	00002806 	br	39270 <udp4_socksend+0x11c>
    }
    else
      return (EINVAL);
   391d0:	00800584 	movi	r2,22
   391d4:	0000b606 	br	394b0 <udp4_socksend+0x35c>
  }
  else if(nam->m_len != sizeof (*sin))
   391d8:	e0bffe17 	ldw	r2,-8(fp)
   391dc:	10800217 	ldw	r2,8(r2)
   391e0:	10800420 	cmpeqi	r2,r2,16
   391e4:	1000031e 	bne	r2,zero,391f4 <udp4_socksend+0xa0>
  {
    dtrap();
   391e8:	002b0f40 	call	2b0f4 <dtrap>
    return (EINVAL);
   391ec:	00800584 	movi	r2,22
   391f0:	0000af06 	br	394b0 <udp4_socksend+0x35c>
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
   391f4:	e0bffe17 	ldw	r2,-8(fp)
   391f8:	10800317 	ldw	r2,12(r2)
   391fc:	e0bff915 	stw	r2,-28(fp)
    fhost = sin->sin_addr.s_addr;
   39200:	e0bff917 	ldw	r2,-28(fp)
   39204:	10800117 	ldw	r2,4(r2)
   39208:	e0bff615 	stw	r2,-40(fp)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
   3920c:	e0bff917 	ldw	r2,-28(fp)
   39210:	1080008b 	ldhu	r2,2(r2)
   39214:	10bfffcc 	andi	r2,r2,65535
   39218:	10000c26 	beq	r2,zero,3924c <udp4_socksend+0xf8>
      fport = ntohs(sin->sin_port);
   3921c:	e0bff917 	ldw	r2,-28(fp)
   39220:	1080008b 	ldhu	r2,2(r2)
   39224:	10bfffcc 	andi	r2,r2,65535
   39228:	1004d23a 	srli	r2,r2,8
   3922c:	1007883a 	mov	r3,r2
   39230:	e0bff917 	ldw	r2,-28(fp)
   39234:	1080008b 	ldhu	r2,2(r2)
   39238:	10bfffcc 	andi	r2,r2,65535
   3923c:	1004923a 	slli	r2,r2,8
   39240:	1884b03a 	or	r2,r3,r2
   39244:	e0bff50d 	sth	r2,-44(fp)
   39248:	00000906 	br	39270 <udp4_socksend+0x11c>
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
   3924c:	e0bff817 	ldw	r2,-32(fp)
   39250:	1080020b 	ldhu	r2,8(r2)
   39254:	10bfffcc 	andi	r2,r2,65535
   39258:	1000021e 	bne	r2,zero,39264 <udp4_socksend+0x110>
        return (EINVAL);
   3925c:	00800584 	movi	r2,22
   39260:	00009306 	br	394b0 <udp4_socksend+0x35c>
      fport = udpconn->u_fport;
   39264:	e0bff817 	ldw	r2,-32(fp)
   39268:	1080020b 	ldhu	r2,8(r2)
   3926c:	e0bff50d 	sth	r2,-44(fp)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
   39270:	e0bffd17 	ldw	r2,-12(fp)
   39274:	14000217 	ldw	r16,8(r2)
   39278:	00434380 	call	43438 <udp_maxalloc>
   3927c:	1400032e 	bgeu	r2,r16,3928c <udp4_socksend+0x138>
  {
    dtrap(); /* should never happen */
   39280:	002b0f40 	call	2b0f4 <dtrap>
    return EMSGSIZE;  /* try to recover */
   39284:	00801e84 	movi	r2,122
   39288:	00008906 	br	394b0 <udp4_socksend+0x35c>
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
   3928c:	e0bffd17 	ldw	r2,-12(fp)
   39290:	10800217 	ldw	r2,8(r2)
   39294:	1009883a 	mov	r4,r2
   39298:	000b883a 	mov	r5,zero
   3929c:	004337c0 	call	4337c <udp_alloc>
   392a0:	e0bffa15 	stw	r2,-24(fp)
  if (!pkt)
   392a4:	e0bffa17 	ldw	r2,-24(fp)
   392a8:	1000041e 	bne	r2,zero,392bc <udp4_socksend+0x168>
  {
    m_free(m);
   392ac:	e13ffd17 	ldw	r4,-12(fp)
   392b0:	002c0940 	call	2c094 <m_free>
    return ENOBUFS;   /* report buffer shortages */
   392b4:	00801a44 	movi	r2,105
   392b8:	00007d06 	br	394b0 <udp4_socksend+0x35c>
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
   392bc:	e0bffa17 	ldw	r2,-24(fp)
   392c0:	11000317 	ldw	r4,12(r2)
   392c4:	e0bffd17 	ldw	r2,-12(fp)
   392c8:	10c00317 	ldw	r3,12(r2)
   392cc:	e0bffd17 	ldw	r2,-12(fp)
   392d0:	10800217 	ldw	r2,8(r2)
   392d4:	180b883a 	mov	r5,r3
   392d8:	100d883a 	mov	r6,r2
   392dc:	0007c900 	call	7c90 <memcpy>
  pkt->nb_plen = m->m_len;
   392e0:	e0bffd17 	ldw	r2,-12(fp)
   392e4:	10c00217 	ldw	r3,8(r2)
   392e8:	e0bffa17 	ldw	r2,-24(fp)
   392ec:	10c00415 	stw	r3,16(r2)
  /* finished with mbuf, free it now */
  m_free(m);
   392f0:	e13ffd17 	ldw	r4,-12(fp)
   392f4:	002c0940 	call	2c094 <m_free>
  pkt->fhost = fhost;
   392f8:	e0bffa17 	ldw	r2,-24(fp)
   392fc:	e0fff617 	ldw	r3,-40(fp)
   39300:	10c00715 	stw	r3,28(r2)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
   39304:	e0bff617 	ldw	r2,-40(fp)
   39308:	10bfffd8 	cmpnei	r2,r2,-1
   3930c:	1000481e 	bne	r2,zero,39430 <udp4_socksend+0x2dc>
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
   39310:	e0bff817 	ldw	r2,-32(fp)
   39314:	10800317 	ldw	r2,12(r2)
   39318:	10001226 	beq	r2,zero,39364 <udp4_socksend+0x210>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3931c:	008001b4 	movhi	r2,6
   39320:	10b9dc04 	addi	r2,r2,-6288
   39324:	10800017 	ldw	r2,0(r2)
   39328:	e0bff715 	stw	r2,-36(fp)
   3932c:	00000a06 	br	39358 <udp4_socksend+0x204>
        if (ifp->n_ipaddr == udpconn->u_lhost)
   39330:	e0bff717 	ldw	r2,-36(fp)
   39334:	10c00a17 	ldw	r3,40(r2)
   39338:	e0bff817 	ldw	r2,-32(fp)
   3933c:	10800317 	ldw	r2,12(r2)
   39340:	1880021e 	bne	r3,r2,3934c <udp4_socksend+0x1f8>
          break;
   39344:	0001883a 	nop
   39348:	00001d06 	br	393c0 <udp4_socksend+0x26c>
  if (fhost == 0xffffffff)
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3934c:	e0bff717 	ldw	r2,-36(fp)
   39350:	10800017 	ldw	r2,0(r2)
   39354:	e0bff715 	stw	r2,-36(fp)
   39358:	e0bff717 	ldw	r2,-36(fp)
   3935c:	103ff41e 	bne	r2,zero,39330 <__alt_mem_descriptor_memory+0xdeff9330>
   39360:	00001706 	br	393c0 <udp4_socksend+0x26c>
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   39364:	008001b4 	movhi	r2,6
   39368:	10b9dc04 	addi	r2,r2,-6288
   3936c:	10800017 	ldw	r2,0(r2)
   39370:	e0bff715 	stw	r2,-36(fp)
   39374:	00001006 	br	393b8 <udp4_socksend+0x264>
        if ((ifp->n_flags & NF_BCAST) &&
   39378:	e0bff717 	ldw	r2,-36(fp)
   3937c:	10802a17 	ldw	r2,168(r2)
   39380:	1080004c 	andi	r2,r2,1
   39384:	10000926 	beq	r2,zero,393ac <udp4_socksend+0x258>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   39388:	e0bff717 	ldw	r2,-36(fp)
   3938c:	10802717 	ldw	r2,156(r2)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if ((ifp->n_flags & NF_BCAST) &&
   39390:	10000626 	beq	r2,zero,393ac <udp4_socksend+0x258>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   39394:	e0bff717 	ldw	r2,-36(fp)
   39398:	10802717 	ldw	r2,156(r2)
   3939c:	10800617 	ldw	r2,24(r2)
   393a0:	10800058 	cmpnei	r2,r2,1
   393a4:	1000011e 	bne	r2,zero,393ac <udp4_socksend+0x258>
           break;
   393a8:	00000506 	br	393c0 <udp4_socksend+0x26c>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   393ac:	e0bff717 	ldw	r2,-36(fp)
   393b0:	10800017 	ldw	r2,0(r2)
   393b4:	e0bff715 	stw	r2,-36(fp)
   393b8:	e0bff717 	ldw	r2,-36(fp)
   393bc:	103fee1e 	bne	r2,zero,39378 <__alt_mem_descriptor_memory+0xdeff9378>
        if ((ifp->n_flags & NF_BCAST) &&
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
   393c0:	e0bff717 	ldw	r2,-36(fp)
   393c4:	1000171e 	bne	r2,zero,39424 <udp4_socksend+0x2d0>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   393c8:	008001b4 	movhi	r2,6
   393cc:	10b9dc04 	addi	r2,r2,-6288
   393d0:	10800017 	ldw	r2,0(r2)
   393d4:	e0bff715 	stw	r2,-36(fp)
   393d8:	00000c06 	br	3940c <udp4_socksend+0x2b8>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
   393dc:	e0bff717 	ldw	r2,-36(fp)
   393e0:	10802717 	ldw	r2,156(r2)
   393e4:	10000626 	beq	r2,zero,39400 <udp4_socksend+0x2ac>
   393e8:	e0bff717 	ldw	r2,-36(fp)
   393ec:	10802717 	ldw	r2,156(r2)
   393f0:	10800617 	ldw	r2,24(r2)
   393f4:	10800058 	cmpnei	r2,r2,1
   393f8:	1000011e 	bne	r2,zero,39400 <udp4_socksend+0x2ac>
          break;
   393fc:	00000506 	br	39414 <udp4_socksend+0x2c0>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   39400:	e0bff717 	ldw	r2,-36(fp)
   39404:	10800017 	ldw	r2,0(r2)
   39408:	e0bff715 	stw	r2,-36(fp)
   3940c:	e0bff717 	ldw	r2,-36(fp)
   39410:	103ff21e 	bne	r2,zero,393dc <__alt_mem_descriptor_memory+0xdeff93dc>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
          break;
      if (ifp == NULL)
   39414:	e0bff717 	ldw	r2,-36(fp)
   39418:	1000021e 	bne	r2,zero,39424 <udp4_socksend+0x2d0>
        return(EADDRNOTAVAIL);
   3941c:	00801f44 	movi	r2,125
   39420:	00002306 	br	394b0 <udp4_socksend+0x35c>
    }
    pkt->net = ifp;
   39424:	e0bffa17 	ldw	r2,-24(fp)
   39428:	e0fff717 	ldw	r3,-36(fp)
   3942c:	10c00615 	stw	r3,24(r2)
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
   39430:	e0bffc17 	ldw	r2,-16(fp)
   39434:	10800317 	ldw	r2,12(r2)
   39438:	10000426 	beq	r2,zero,3944c <udp4_socksend+0x2f8>
     pkt->imo = so->inp_moptions;
   3943c:	e0bffc17 	ldw	r2,-16(fp)
   39440:	10c00317 	ldw	r3,12(r2)
   39444:	e0bffa17 	ldw	r2,-24(fp)
   39448:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
   3944c:	e0bffc17 	ldw	r2,-16(fp)
   39450:	10801f17 	ldw	r2,124(r2)
   39454:	10000426 	beq	r2,zero,39468 <udp4_socksend+0x314>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
   39458:	e0bffc17 	ldw	r2,-16(fp)
   3945c:	10c01f17 	ldw	r3,124(r2)
   39460:	e0bffa17 	ldw	r2,-24(fp)
   39464:	10c00c15 	stw	r3,48(r2)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
   39468:	0009883a 	mov	r4,zero
   3946c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
   39470:	e0fff50b 	ldhu	r3,-44(fp)
   39474:	e0bff817 	ldw	r2,-32(fp)
   39478:	1080018b 	ldhu	r2,6(r2)
   3947c:	10bfffcc 	andi	r2,r2,65535
   39480:	1809883a 	mov	r4,r3
   39484:	100b883a 	mov	r5,r2
   39488:	e1bffa17 	ldw	r6,-24(fp)
   3948c:	0042f240 	call	42f24 <udp_send>
   39490:	e0bffb15 	stw	r2,-20(fp)
  LOCK_NET_RESOURCE(NET_RESID);
   39494:	0009883a 	mov	r4,zero
   39498:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
  if (e < 0) 
   3949c:	e0bffb17 	ldw	r2,-20(fp)
   394a0:	1000020e 	bge	r2,zero,394ac <udp4_socksend+0x358>
     return(e);
   394a4:	e0bffb17 	ldw	r2,-20(fp)
   394a8:	00000106 	br	394b0 <udp4_socksend+0x35c>
  return 0;
   394ac:	0005883a 	mov	r2,zero
}
   394b0:	e6ffff04 	addi	sp,fp,-4
   394b4:	dfc00217 	ldw	ra,8(sp)
   394b8:	df000117 	ldw	fp,4(sp)
   394bc:	dc000017 	ldw	r16,0(sp)
   394c0:	dec00304 	addi	sp,sp,12
   394c4:	f800283a 	ret

000394c8 <udp4_sockaddr>:

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
   394c8:	defff904 	addi	sp,sp,-28
   394cc:	dfc00615 	stw	ra,24(sp)
   394d0:	df000515 	stw	fp,20(sp)
   394d4:	df000504 	addi	fp,sp,20
   394d8:	e13ffd15 	stw	r4,-12(fp)
   394dc:	e17ffe15 	stw	r5,-8(fp)
   394e0:	e1bfff15 	stw	r6,-4(fp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
   394e4:	e0bffe17 	ldw	r2,-8(fp)
   394e8:	10800317 	ldw	r2,12(r2)
   394ec:	e0bffb15 	stw	r2,-20(fp)
  if (sin == NULL)
   394f0:	e0bffb17 	ldw	r2,-20(fp)
   394f4:	1000021e 	bne	r2,zero,39500 <udp4_sockaddr+0x38>
     return(EINVAL);
   394f8:	00800584 	movi	r2,22
   394fc:	00003706 	br	395dc <udp4_sockaddr+0x114>
  udpconn = udp_lookup(so);
   39500:	e13ffd17 	ldw	r4,-12(fp)
   39504:	0038a3c0 	call	38a3c <udp_lookup>
   39508:	e0bffc15 	stw	r2,-16(fp)
  if (!udpconn)
   3950c:	e0bffc17 	ldw	r2,-16(fp)
   39510:	1000021e 	bne	r2,zero,3951c <udp4_sockaddr+0x54>
     return(EINVAL);
   39514:	00800584 	movi	r2,22
   39518:	00003006 	br	395dc <udp4_sockaddr+0x114>
  nam->m_len = sizeof(*sin);
   3951c:	e0bffe17 	ldw	r2,-8(fp)
   39520:	00c00404 	movi	r3,16
   39524:	10c00215 	stw	r3,8(r2)
  if (req == PRU_SOCKADDR)
   39528:	e0bfff17 	ldw	r2,-4(fp)
   3952c:	108003d8 	cmpnei	r2,r2,15
   39530:	1000151e 	bne	r2,zero,39588 <udp4_sockaddr+0xc0>
  {
     sin->sin_family = AF_INET;
   39534:	e0bffb17 	ldw	r2,-20(fp)
   39538:	00c00084 	movi	r3,2
   3953c:	10c0000d 	sth	r3,0(r2)
     sin->sin_port = htons(udpconn->u_lport);
   39540:	e0bffc17 	ldw	r2,-16(fp)
   39544:	1080018b 	ldhu	r2,6(r2)
   39548:	10bfffcc 	andi	r2,r2,65535
   3954c:	1004d23a 	srli	r2,r2,8
   39550:	1007883a 	mov	r3,r2
   39554:	e0bffc17 	ldw	r2,-16(fp)
   39558:	1080018b 	ldhu	r2,6(r2)
   3955c:	10bfffcc 	andi	r2,r2,65535
   39560:	1004923a 	slli	r2,r2,8
   39564:	1884b03a 	or	r2,r3,r2
   39568:	1007883a 	mov	r3,r2
   3956c:	e0bffb17 	ldw	r2,-20(fp)
   39570:	10c0008d 	sth	r3,2(r2)
     sin->sin_addr.s_addr = udpconn->u_lhost;
   39574:	e0bffc17 	ldw	r2,-16(fp)
   39578:	10c00317 	ldw	r3,12(r2)
   3957c:	e0bffb17 	ldw	r2,-20(fp)
   39580:	10c00115 	stw	r3,4(r2)
   39584:	00001406 	br	395d8 <udp4_sockaddr+0x110>
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
   39588:	e0bffb17 	ldw	r2,-20(fp)
   3958c:	00c00084 	movi	r3,2
   39590:	10c0000d 	sth	r3,0(r2)
    sin->sin_port = htons(udpconn->u_fport);
   39594:	e0bffc17 	ldw	r2,-16(fp)
   39598:	1080020b 	ldhu	r2,8(r2)
   3959c:	10bfffcc 	andi	r2,r2,65535
   395a0:	1004d23a 	srli	r2,r2,8
   395a4:	1007883a 	mov	r3,r2
   395a8:	e0bffc17 	ldw	r2,-16(fp)
   395ac:	1080020b 	ldhu	r2,8(r2)
   395b0:	10bfffcc 	andi	r2,r2,65535
   395b4:	1004923a 	slli	r2,r2,8
   395b8:	1884b03a 	or	r2,r3,r2
   395bc:	1007883a 	mov	r3,r2
   395c0:	e0bffb17 	ldw	r2,-20(fp)
   395c4:	10c0008d 	sth	r3,2(r2)
    sin->sin_addr.s_addr = udpconn->u_fhost;
   395c8:	e0bffc17 	ldw	r2,-16(fp)
   395cc:	10c00417 	ldw	r3,16(r2)
   395d0:	e0bffb17 	ldw	r2,-20(fp)
   395d4:	10c00115 	stw	r3,4(r2)
  }
  return 0;
   395d8:	0005883a 	mov	r2,zero
}
   395dc:	e037883a 	mov	sp,fp
   395e0:	dfc00117 	ldw	ra,4(sp)
   395e4:	df000017 	ldw	fp,0(sp)
   395e8:	dec00204 	addi	sp,sp,8
   395ec:	f800283a 	ret

000395f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   395f0:	defff504 	addi	sp,sp,-44
   395f4:	df000a15 	stw	fp,40(sp)
   395f8:	df000a04 	addi	fp,sp,40
   395fc:	e13ffc15 	stw	r4,-16(fp)
   39600:	e17ffd15 	stw	r5,-12(fp)
   39604:	e1bffe15 	stw	r6,-8(fp)
   39608:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3960c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   39610:	00800174 	movhi	r2,5
   39614:	108fce04 	addi	r2,r2,16184
   39618:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3961c:	10003f26 	beq	r2,zero,3971c <alt_alarm_start+0x12c>
  {
    if (alarm)
   39620:	e0bffc17 	ldw	r2,-16(fp)
   39624:	10003b26 	beq	r2,zero,39714 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   39628:	e0bffc17 	ldw	r2,-16(fp)
   3962c:	e0fffe17 	ldw	r3,-8(fp)
   39630:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   39634:	e0bffc17 	ldw	r2,-16(fp)
   39638:	e0ffff17 	ldw	r3,-4(fp)
   3963c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   39640:	0005303a 	rdctl	r2,status
   39644:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   39648:	e0fff817 	ldw	r3,-32(fp)
   3964c:	00bfff84 	movi	r2,-2
   39650:	1884703a 	and	r2,r3,r2
   39654:	1001703a 	wrctl	status,r2
  
  return context;
   39658:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3965c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   39660:	00800174 	movhi	r2,5
   39664:	108fcf04 	addi	r2,r2,16188
   39668:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3966c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   39670:	e0fffd17 	ldw	r3,-12(fp)
   39674:	e0bff617 	ldw	r2,-40(fp)
   39678:	1885883a 	add	r2,r3,r2
   3967c:	10c00044 	addi	r3,r2,1
   39680:	e0bffc17 	ldw	r2,-16(fp)
   39684:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   39688:	e0bffc17 	ldw	r2,-16(fp)
   3968c:	10c00217 	ldw	r3,8(r2)
   39690:	e0bff617 	ldw	r2,-40(fp)
   39694:	1880042e 	bgeu	r3,r2,396a8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   39698:	e0bffc17 	ldw	r2,-16(fp)
   3969c:	00c00044 	movi	r3,1
   396a0:	10c00405 	stb	r3,16(r2)
   396a4:	00000206 	br	396b0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   396a8:	e0bffc17 	ldw	r2,-16(fp)
   396ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   396b0:	e0fffc17 	ldw	r3,-16(fp)
   396b4:	00800174 	movhi	r2,5
   396b8:	10877004 	addi	r2,r2,7616
   396bc:	e0bff915 	stw	r2,-28(fp)
   396c0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   396c4:	e0bffa17 	ldw	r2,-24(fp)
   396c8:	e0fff917 	ldw	r3,-28(fp)
   396cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   396d0:	e0bff917 	ldw	r2,-28(fp)
   396d4:	10c00017 	ldw	r3,0(r2)
   396d8:	e0bffa17 	ldw	r2,-24(fp)
   396dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   396e0:	e0bff917 	ldw	r2,-28(fp)
   396e4:	10800017 	ldw	r2,0(r2)
   396e8:	e0fffa17 	ldw	r3,-24(fp)
   396ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   396f0:	e0bff917 	ldw	r2,-28(fp)
   396f4:	e0fffa17 	ldw	r3,-24(fp)
   396f8:	10c00015 	stw	r3,0(r2)
   396fc:	e0bff717 	ldw	r2,-36(fp)
   39700:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   39704:	e0bffb17 	ldw	r2,-20(fp)
   39708:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3970c:	0005883a 	mov	r2,zero
   39710:	00000306 	br	39720 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   39714:	00bffa84 	movi	r2,-22
   39718:	00000106 	br	39720 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   3971c:	00bfde84 	movi	r2,-134
  }
}
   39720:	e037883a 	mov	sp,fp
   39724:	df000017 	ldw	fp,0(sp)
   39728:	dec00104 	addi	sp,sp,4
   3972c:	f800283a 	ret

00039730 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   39730:	defffa04 	addi	sp,sp,-24
   39734:	dfc00515 	stw	ra,20(sp)
   39738:	df000415 	stw	fp,16(sp)
   3973c:	df000404 	addi	fp,sp,16
   39740:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   39744:	008000c4 	movi	r2,3
   39748:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   3974c:	e0fffd17 	ldw	r3,-12(fp)
   39750:	008003f4 	movhi	r2,15
   39754:	10909004 	addi	r2,r2,16960
   39758:	1885383a 	mul	r2,r3,r2
   3975c:	01017db4 	movhi	r4,1526
   39760:	21384004 	addi	r4,r4,-7936
   39764:	100b883a 	mov	r5,r2
   39768:	00152500 	call	15250 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   3976c:	01200034 	movhi	r4,32768
   39770:	213fffc4 	addi	r4,r4,-1
   39774:	100b883a 	mov	r5,r2
   39778:	00152500 	call	15250 <__udivsi3>
   3977c:	e13fff17 	ldw	r4,-4(fp)
   39780:	100b883a 	mov	r5,r2
   39784:	00152500 	call	15250 <__udivsi3>
   39788:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   3978c:	e0bffe17 	ldw	r2,-8(fp)
   39790:	10002a26 	beq	r2,zero,3983c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   39794:	e03ffc15 	stw	zero,-16(fp)
   39798:	00001706 	br	397f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   3979c:	00a00034 	movhi	r2,32768
   397a0:	10bfffc4 	addi	r2,r2,-1
   397a4:	10bfffc4 	addi	r2,r2,-1
   397a8:	103ffe1e 	bne	r2,zero,397a4 <__alt_mem_descriptor_memory+0xdeff97a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   397ac:	e0fffd17 	ldw	r3,-12(fp)
   397b0:	008003f4 	movhi	r2,15
   397b4:	10909004 	addi	r2,r2,16960
   397b8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   397bc:	01017db4 	movhi	r4,1526
   397c0:	21384004 	addi	r4,r4,-7936
   397c4:	100b883a 	mov	r5,r2
   397c8:	00152500 	call	15250 <__udivsi3>
   397cc:	01200034 	movhi	r4,32768
   397d0:	213fffc4 	addi	r4,r4,-1
   397d4:	100b883a 	mov	r5,r2
   397d8:	00152500 	call	15250 <__udivsi3>
   397dc:	1007883a 	mov	r3,r2
   397e0:	e0bfff17 	ldw	r2,-4(fp)
   397e4:	10c5c83a 	sub	r2,r2,r3
   397e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   397ec:	e0bffc17 	ldw	r2,-16(fp)
   397f0:	10800044 	addi	r2,r2,1
   397f4:	e0bffc15 	stw	r2,-16(fp)
   397f8:	e0fffc17 	ldw	r3,-16(fp)
   397fc:	e0bffe17 	ldw	r2,-8(fp)
   39800:	18bfe616 	blt	r3,r2,3979c <__alt_mem_descriptor_memory+0xdeff979c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   39804:	e0fffd17 	ldw	r3,-12(fp)
   39808:	008003f4 	movhi	r2,15
   3980c:	10909004 	addi	r2,r2,16960
   39810:	1885383a 	mul	r2,r3,r2
   39814:	01017db4 	movhi	r4,1526
   39818:	21384004 	addi	r4,r4,-7936
   3981c:	100b883a 	mov	r5,r2
   39820:	00152500 	call	15250 <__udivsi3>
   39824:	1007883a 	mov	r3,r2
   39828:	e0bfff17 	ldw	r2,-4(fp)
   3982c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   39830:	10bfffc4 	addi	r2,r2,-1
   39834:	103ffe1e 	bne	r2,zero,39830 <__alt_mem_descriptor_memory+0xdeff9830>
   39838:	00000d06 	br	39870 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   3983c:	e0fffd17 	ldw	r3,-12(fp)
   39840:	008003f4 	movhi	r2,15
   39844:	10909004 	addi	r2,r2,16960
   39848:	1885383a 	mul	r2,r3,r2
   3984c:	01017db4 	movhi	r4,1526
   39850:	21384004 	addi	r4,r4,-7936
   39854:	100b883a 	mov	r5,r2
   39858:	00152500 	call	15250 <__udivsi3>
   3985c:	1007883a 	mov	r3,r2
   39860:	e0bfff17 	ldw	r2,-4(fp)
   39864:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   39868:	10bfffc4 	addi	r2,r2,-1
   3986c:	00bffe16 	blt	zero,r2,39868 <__alt_mem_descriptor_memory+0xdeff9868>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   39870:	0005883a 	mov	r2,zero
}
   39874:	e037883a 	mov	sp,fp
   39878:	dfc00117 	ldw	ra,4(sp)
   3987c:	df000017 	ldw	fp,0(sp)
   39880:	dec00204 	addi	sp,sp,8
   39884:	f800283a 	ret

00039888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39888:	defffe04 	addi	sp,sp,-8
   3988c:	dfc00115 	stw	ra,4(sp)
   39890:	df000015 	stw	fp,0(sp)
   39894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39898:	00800174 	movhi	r2,5
   3989c:	10876e04 	addi	r2,r2,7608
   398a0:	10800017 	ldw	r2,0(r2)
   398a4:	10000526 	beq	r2,zero,398bc <alt_get_errno+0x34>
   398a8:	00800174 	movhi	r2,5
   398ac:	10876e04 	addi	r2,r2,7608
   398b0:	10800017 	ldw	r2,0(r2)
   398b4:	103ee83a 	callr	r2
   398b8:	00000206 	br	398c4 <alt_get_errno+0x3c>
   398bc:	00800174 	movhi	r2,5
   398c0:	108f7704 	addi	r2,r2,15836
}
   398c4:	e037883a 	mov	sp,fp
   398c8:	dfc00117 	ldw	ra,4(sp)
   398cc:	df000017 	ldw	fp,0(sp)
   398d0:	dec00204 	addi	sp,sp,8
   398d4:	f800283a 	ret

000398d8 <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   398d8:	defffb04 	addi	sp,sp,-20
   398dc:	dfc00415 	stw	ra,16(sp)
   398e0:	df000315 	stw	fp,12(sp)
   398e4:	df000304 	addi	fp,sp,12
   398e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   398ec:	e0bfff17 	ldw	r2,-4(fp)
   398f0:	10000616 	blt	r2,zero,3990c <alt_close+0x34>
   398f4:	e0bfff17 	ldw	r2,-4(fp)
   398f8:	10c00324 	muli	r3,r2,12
   398fc:	00800174 	movhi	r2,5
   39900:	10866604 	addi	r2,r2,6552
   39904:	1885883a 	add	r2,r3,r2
   39908:	00000106 	br	39910 <alt_close+0x38>
   3990c:	0005883a 	mov	r2,zero
   39910:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   39914:	e0bffd17 	ldw	r2,-12(fp)
   39918:	10001926 	beq	r2,zero,39980 <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   3991c:	e0bffd17 	ldw	r2,-12(fp)
   39920:	10800017 	ldw	r2,0(r2)
   39924:	10800417 	ldw	r2,16(r2)
   39928:	10000626 	beq	r2,zero,39944 <alt_close+0x6c>
   3992c:	e0bffd17 	ldw	r2,-12(fp)
   39930:	10800017 	ldw	r2,0(r2)
   39934:	10800417 	ldw	r2,16(r2)
   39938:	e13ffd17 	ldw	r4,-12(fp)
   3993c:	103ee83a 	callr	r2
   39940:	00000106 	br	39948 <alt_close+0x70>
   39944:	0005883a 	mov	r2,zero
   39948:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   3994c:	e13fff17 	ldw	r4,-4(fp)
   39950:	003a4c00 	call	3a4c0 <alt_release_fd>
    if (rval < 0)
   39954:	e0bffe17 	ldw	r2,-8(fp)
   39958:	1000070e 	bge	r2,zero,39978 <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
   3995c:	00398880 	call	39888 <alt_get_errno>
   39960:	1007883a 	mov	r3,r2
   39964:	e0bffe17 	ldw	r2,-8(fp)
   39968:	0085c83a 	sub	r2,zero,r2
   3996c:	18800015 	stw	r2,0(r3)
      return -1;
   39970:	00bfffc4 	movi	r2,-1
   39974:	00000706 	br	39994 <alt_close+0xbc>
    }
    return 0;
   39978:	0005883a 	mov	r2,zero
   3997c:	00000506 	br	39994 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39980:	00398880 	call	39888 <alt_get_errno>
   39984:	1007883a 	mov	r3,r2
   39988:	00801444 	movi	r2,81
   3998c:	18800015 	stw	r2,0(r3)
    return -1;
   39990:	00bfffc4 	movi	r2,-1
  }
}
   39994:	e037883a 	mov	sp,fp
   39998:	dfc00117 	ldw	ra,4(sp)
   3999c:	df000017 	ldw	fp,0(sp)
   399a0:	dec00204 	addi	sp,sp,8
   399a4:	f800283a 	ret

000399a8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   399a8:	defffb04 	addi	sp,sp,-20
   399ac:	df000415 	stw	fp,16(sp)
   399b0:	df000404 	addi	fp,sp,16
   399b4:	e13ffe15 	stw	r4,-8(fp)
   399b8:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   399bc:	e0fffe17 	ldw	r3,-8(fp)
   399c0:	e0bfff17 	ldw	r2,-4(fp)
   399c4:	1885883a 	add	r2,r3,r2
   399c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   399cc:	e0bffe17 	ldw	r2,-8(fp)
   399d0:	e0bffc15 	stw	r2,-16(fp)
   399d4:	00000506 	br	399ec <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   399d8:	e0bffc17 	ldw	r2,-16(fp)
   399dc:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   399e0:	e0bffc17 	ldw	r2,-16(fp)
   399e4:	10800804 	addi	r2,r2,32
   399e8:	e0bffc15 	stw	r2,-16(fp)
   399ec:	e0fffc17 	ldw	r3,-16(fp)
   399f0:	e0bffd17 	ldw	r2,-12(fp)
   399f4:	18bff836 	bltu	r3,r2,399d8 <__alt_mem_descriptor_memory+0xdeff99d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   399f8:	e0bffe17 	ldw	r2,-8(fp)
   399fc:	108007cc 	andi	r2,r2,31
   39a00:	10000226 	beq	r2,zero,39a0c <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   39a04:	e0bffc17 	ldw	r2,-16(fp)
   39a08:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   39a0c:	e037883a 	mov	sp,fp
   39a10:	df000017 	ldw	fp,0(sp)
   39a14:	dec00104 	addi	sp,sp,4
   39a18:	f800283a 	ret

00039a1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   39a1c:	defffe04 	addi	sp,sp,-8
   39a20:	df000115 	stw	fp,4(sp)
   39a24:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   39a28:	e03fff15 	stw	zero,-4(fp)
   39a2c:	00000506 	br	39a44 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   39a30:	e0bfff17 	ldw	r2,-4(fp)
   39a34:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   39a38:	e0bfff17 	ldw	r2,-4(fp)
   39a3c:	10800804 	addi	r2,r2,32
   39a40:	e0bfff15 	stw	r2,-4(fp)
   39a44:	e0bfff17 	ldw	r2,-4(fp)
   39a48:	10820030 	cmpltui	r2,r2,2048
   39a4c:	103ff81e 	bne	r2,zero,39a30 <__alt_mem_descriptor_memory+0xdeff9a30>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   39a50:	e037883a 	mov	sp,fp
   39a54:	df000017 	ldw	fp,0(sp)
   39a58:	dec00104 	addi	sp,sp,4
   39a5c:	f800283a 	ret

00039a60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   39a60:	defffc04 	addi	sp,sp,-16
   39a64:	df000315 	stw	fp,12(sp)
   39a68:	df000304 	addi	fp,sp,12
   39a6c:	e13ffd15 	stw	r4,-12(fp)
   39a70:	e17ffe15 	stw	r5,-8(fp)
   39a74:	e1bfff15 	stw	r6,-4(fp)
  return len;
   39a78:	e0bfff17 	ldw	r2,-4(fp)
}
   39a7c:	e037883a 	mov	sp,fp
   39a80:	df000017 	ldw	fp,0(sp)
   39a84:	dec00104 	addi	sp,sp,4
   39a88:	f800283a 	ret

00039a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39a8c:	defffe04 	addi	sp,sp,-8
   39a90:	dfc00115 	stw	ra,4(sp)
   39a94:	df000015 	stw	fp,0(sp)
   39a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39a9c:	00800174 	movhi	r2,5
   39aa0:	10876e04 	addi	r2,r2,7608
   39aa4:	10800017 	ldw	r2,0(r2)
   39aa8:	10000526 	beq	r2,zero,39ac0 <alt_get_errno+0x34>
   39aac:	00800174 	movhi	r2,5
   39ab0:	10876e04 	addi	r2,r2,7608
   39ab4:	10800017 	ldw	r2,0(r2)
   39ab8:	103ee83a 	callr	r2
   39abc:	00000206 	br	39ac8 <alt_get_errno+0x3c>
   39ac0:	00800174 	movhi	r2,5
   39ac4:	108f7704 	addi	r2,r2,15836
}
   39ac8:	e037883a 	mov	sp,fp
   39acc:	dfc00117 	ldw	ra,4(sp)
   39ad0:	df000017 	ldw	fp,0(sp)
   39ad4:	dec00204 	addi	sp,sp,8
   39ad8:	f800283a 	ret

00039adc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   39adc:	defffa04 	addi	sp,sp,-24
   39ae0:	dfc00515 	stw	ra,20(sp)
   39ae4:	df000415 	stw	fp,16(sp)
   39ae8:	df000404 	addi	fp,sp,16
   39aec:	e13ffe15 	stw	r4,-8(fp)
   39af0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   39af4:	e0bffe17 	ldw	r2,-8(fp)
   39af8:	10000326 	beq	r2,zero,39b08 <alt_dev_llist_insert+0x2c>
   39afc:	e0bffe17 	ldw	r2,-8(fp)
   39b00:	10800217 	ldw	r2,8(r2)
   39b04:	1000061e 	bne	r2,zero,39b20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   39b08:	0039a8c0 	call	39a8c <alt_get_errno>
   39b0c:	1007883a 	mov	r3,r2
   39b10:	00800584 	movi	r2,22
   39b14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   39b18:	00bffa84 	movi	r2,-22
   39b1c:	00001306 	br	39b6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   39b20:	e0bffe17 	ldw	r2,-8(fp)
   39b24:	e0ffff17 	ldw	r3,-4(fp)
   39b28:	e0fffc15 	stw	r3,-16(fp)
   39b2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   39b30:	e0bffd17 	ldw	r2,-12(fp)
   39b34:	e0fffc17 	ldw	r3,-16(fp)
   39b38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   39b3c:	e0bffc17 	ldw	r2,-16(fp)
   39b40:	10c00017 	ldw	r3,0(r2)
   39b44:	e0bffd17 	ldw	r2,-12(fp)
   39b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   39b4c:	e0bffc17 	ldw	r2,-16(fp)
   39b50:	10800017 	ldw	r2,0(r2)
   39b54:	e0fffd17 	ldw	r3,-12(fp)
   39b58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   39b5c:	e0bffc17 	ldw	r2,-16(fp)
   39b60:	e0fffd17 	ldw	r3,-12(fp)
   39b64:	10c00015 	stw	r3,0(r2)

  return 0;  
   39b68:	0005883a 	mov	r2,zero
}
   39b6c:	e037883a 	mov	sp,fp
   39b70:	dfc00117 	ldw	ra,4(sp)
   39b74:	df000017 	ldw	fp,0(sp)
   39b78:	dec00204 	addi	sp,sp,8
   39b7c:	f800283a 	ret

00039b80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   39b80:	defffd04 	addi	sp,sp,-12
   39b84:	dfc00215 	stw	ra,8(sp)
   39b88:	df000115 	stw	fp,4(sp)
   39b8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   39b90:	00800174 	movhi	r2,5
   39b94:	10a83b04 	addi	r2,r2,-24340
   39b98:	e0bfff15 	stw	r2,-4(fp)
   39b9c:	00000606 	br	39bb8 <_do_ctors+0x38>
        (*ctor) (); 
   39ba0:	e0bfff17 	ldw	r2,-4(fp)
   39ba4:	10800017 	ldw	r2,0(r2)
   39ba8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   39bac:	e0bfff17 	ldw	r2,-4(fp)
   39bb0:	10bfff04 	addi	r2,r2,-4
   39bb4:	e0bfff15 	stw	r2,-4(fp)
   39bb8:	e0ffff17 	ldw	r3,-4(fp)
   39bbc:	00800174 	movhi	r2,5
   39bc0:	10a83c04 	addi	r2,r2,-24336
   39bc4:	18bff62e 	bgeu	r3,r2,39ba0 <__alt_mem_descriptor_memory+0xdeff9ba0>
        (*ctor) (); 
}
   39bc8:	e037883a 	mov	sp,fp
   39bcc:	dfc00117 	ldw	ra,4(sp)
   39bd0:	df000017 	ldw	fp,0(sp)
   39bd4:	dec00204 	addi	sp,sp,8
   39bd8:	f800283a 	ret

00039bdc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   39bdc:	defffd04 	addi	sp,sp,-12
   39be0:	dfc00215 	stw	ra,8(sp)
   39be4:	df000115 	stw	fp,4(sp)
   39be8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   39bec:	00800174 	movhi	r2,5
   39bf0:	10a83b04 	addi	r2,r2,-24340
   39bf4:	e0bfff15 	stw	r2,-4(fp)
   39bf8:	00000606 	br	39c14 <_do_dtors+0x38>
        (*dtor) (); 
   39bfc:	e0bfff17 	ldw	r2,-4(fp)
   39c00:	10800017 	ldw	r2,0(r2)
   39c04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   39c08:	e0bfff17 	ldw	r2,-4(fp)
   39c0c:	10bfff04 	addi	r2,r2,-4
   39c10:	e0bfff15 	stw	r2,-4(fp)
   39c14:	e0ffff17 	ldw	r3,-4(fp)
   39c18:	00800174 	movhi	r2,5
   39c1c:	10a83c04 	addi	r2,r2,-24336
   39c20:	18bff62e 	bgeu	r3,r2,39bfc <__alt_mem_descriptor_memory+0xdeff9bfc>
        (*dtor) (); 
}
   39c24:	e037883a 	mov	sp,fp
   39c28:	dfc00117 	ldw	ra,4(sp)
   39c2c:	df000017 	ldw	fp,0(sp)
   39c30:	dec00204 	addi	sp,sp,8
   39c34:	f800283a 	ret

00039c38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   39c38:	defffa04 	addi	sp,sp,-24
   39c3c:	dfc00515 	stw	ra,20(sp)
   39c40:	df000415 	stw	fp,16(sp)
   39c44:	df000404 	addi	fp,sp,16
   39c48:	e13ffe15 	stw	r4,-8(fp)
   39c4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   39c50:	e0bfff17 	ldw	r2,-4(fp)
   39c54:	10800017 	ldw	r2,0(r2)
   39c58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   39c5c:	e13ffe17 	ldw	r4,-8(fp)
   39c60:	0008d080 	call	8d08 <strlen>
   39c64:	10800044 	addi	r2,r2,1
   39c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   39c6c:	00000d06 	br	39ca4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   39c70:	e0bffc17 	ldw	r2,-16(fp)
   39c74:	10c00217 	ldw	r3,8(r2)
   39c78:	e0bffd17 	ldw	r2,-12(fp)
   39c7c:	1809883a 	mov	r4,r3
   39c80:	e17ffe17 	ldw	r5,-8(fp)
   39c84:	100d883a 	mov	r6,r2
   39c88:	004989c0 	call	4989c <memcmp>
   39c8c:	1000021e 	bne	r2,zero,39c98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   39c90:	e0bffc17 	ldw	r2,-16(fp)
   39c94:	00000706 	br	39cb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   39c98:	e0bffc17 	ldw	r2,-16(fp)
   39c9c:	10800017 	ldw	r2,0(r2)
   39ca0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   39ca4:	e0fffc17 	ldw	r3,-16(fp)
   39ca8:	e0bfff17 	ldw	r2,-4(fp)
   39cac:	18bff01e 	bne	r3,r2,39c70 <__alt_mem_descriptor_memory+0xdeff9c70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   39cb0:	0005883a 	mov	r2,zero
}
   39cb4:	e037883a 	mov	sp,fp
   39cb8:	dfc00117 	ldw	ra,4(sp)
   39cbc:	df000017 	ldw	fp,0(sp)
   39cc0:	dec00204 	addi	sp,sp,8
   39cc4:	f800283a 	ret

00039cc8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   39cc8:	defffe04 	addi	sp,sp,-8
   39ccc:	dfc00115 	stw	ra,4(sp)
   39cd0:	df000015 	stw	fp,0(sp)
   39cd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   39cd8:	0009883a 	mov	r4,zero
   39cdc:	01440004 	movi	r5,4096
   39ce0:	00482f80 	call	482f8 <alt_icache_flush>
#endif
}
   39ce4:	e037883a 	mov	sp,fp
   39ce8:	dfc00117 	ldw	ra,4(sp)
   39cec:	df000017 	ldw	fp,0(sp)
   39cf0:	dec00204 	addi	sp,sp,8
   39cf4:	f800283a 	ret

00039cf8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   39cf8:	defff904 	addi	sp,sp,-28
   39cfc:	dfc00615 	stw	ra,24(sp)
   39d00:	df000515 	stw	fp,20(sp)
   39d04:	df000504 	addi	fp,sp,20
   39d08:	e13ffc15 	stw	r4,-16(fp)
   39d0c:	e17ffd15 	stw	r5,-12(fp)
   39d10:	e1bffe15 	stw	r6,-8(fp)
   39d14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   39d18:	e0800217 	ldw	r2,8(fp)
   39d1c:	d8800015 	stw	r2,0(sp)
   39d20:	e13ffc17 	ldw	r4,-16(fp)
   39d24:	e17ffd17 	ldw	r5,-12(fp)
   39d28:	e1bffe17 	ldw	r6,-8(fp)
   39d2c:	e1ffff17 	ldw	r7,-4(fp)
   39d30:	0039ed80 	call	39ed8 <alt_iic_isr_register>
}  
   39d34:	e037883a 	mov	sp,fp
   39d38:	dfc00117 	ldw	ra,4(sp)
   39d3c:	df000017 	ldw	fp,0(sp)
   39d40:	dec00204 	addi	sp,sp,8
   39d44:	f800283a 	ret

00039d48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   39d48:	defff904 	addi	sp,sp,-28
   39d4c:	df000615 	stw	fp,24(sp)
   39d50:	df000604 	addi	fp,sp,24
   39d54:	e13ffe15 	stw	r4,-8(fp)
   39d58:	e17fff15 	stw	r5,-4(fp)
   39d5c:	e0bfff17 	ldw	r2,-4(fp)
   39d60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   39d64:	0005303a 	rdctl	r2,status
   39d68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   39d6c:	e0fffb17 	ldw	r3,-20(fp)
   39d70:	00bfff84 	movi	r2,-2
   39d74:	1884703a 	and	r2,r3,r2
   39d78:	1001703a 	wrctl	status,r2
  
  return context;
   39d7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   39d80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   39d84:	e0bffa17 	ldw	r2,-24(fp)
   39d88:	00c00044 	movi	r3,1
   39d8c:	1884983a 	sll	r2,r3,r2
   39d90:	1007883a 	mov	r3,r2
   39d94:	00800174 	movhi	r2,5
   39d98:	108fcd04 	addi	r2,r2,16180
   39d9c:	10800017 	ldw	r2,0(r2)
   39da0:	1886b03a 	or	r3,r3,r2
   39da4:	00800174 	movhi	r2,5
   39da8:	108fcd04 	addi	r2,r2,16180
   39dac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   39db0:	00800174 	movhi	r2,5
   39db4:	108fcd04 	addi	r2,r2,16180
   39db8:	10800017 	ldw	r2,0(r2)
   39dbc:	100170fa 	wrctl	ienable,r2
   39dc0:	e0bffc17 	ldw	r2,-16(fp)
   39dc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   39dc8:	e0bffd17 	ldw	r2,-12(fp)
   39dcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   39dd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   39dd4:	0001883a 	nop
}
   39dd8:	e037883a 	mov	sp,fp
   39ddc:	df000017 	ldw	fp,0(sp)
   39de0:	dec00104 	addi	sp,sp,4
   39de4:	f800283a 	ret

00039de8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   39de8:	defff904 	addi	sp,sp,-28
   39dec:	df000615 	stw	fp,24(sp)
   39df0:	df000604 	addi	fp,sp,24
   39df4:	e13ffe15 	stw	r4,-8(fp)
   39df8:	e17fff15 	stw	r5,-4(fp)
   39dfc:	e0bfff17 	ldw	r2,-4(fp)
   39e00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   39e04:	0005303a 	rdctl	r2,status
   39e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   39e0c:	e0fffb17 	ldw	r3,-20(fp)
   39e10:	00bfff84 	movi	r2,-2
   39e14:	1884703a 	and	r2,r3,r2
   39e18:	1001703a 	wrctl	status,r2
  
  return context;
   39e1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   39e20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   39e24:	e0bffa17 	ldw	r2,-24(fp)
   39e28:	00c00044 	movi	r3,1
   39e2c:	1884983a 	sll	r2,r3,r2
   39e30:	0084303a 	nor	r2,zero,r2
   39e34:	1007883a 	mov	r3,r2
   39e38:	00800174 	movhi	r2,5
   39e3c:	108fcd04 	addi	r2,r2,16180
   39e40:	10800017 	ldw	r2,0(r2)
   39e44:	1886703a 	and	r3,r3,r2
   39e48:	00800174 	movhi	r2,5
   39e4c:	108fcd04 	addi	r2,r2,16180
   39e50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   39e54:	00800174 	movhi	r2,5
   39e58:	108fcd04 	addi	r2,r2,16180
   39e5c:	10800017 	ldw	r2,0(r2)
   39e60:	100170fa 	wrctl	ienable,r2
   39e64:	e0bffc17 	ldw	r2,-16(fp)
   39e68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   39e6c:	e0bffd17 	ldw	r2,-12(fp)
   39e70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   39e74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   39e78:	0001883a 	nop
}
   39e7c:	e037883a 	mov	sp,fp
   39e80:	df000017 	ldw	fp,0(sp)
   39e84:	dec00104 	addi	sp,sp,4
   39e88:	f800283a 	ret

00039e8c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   39e8c:	defffc04 	addi	sp,sp,-16
   39e90:	df000315 	stw	fp,12(sp)
   39e94:	df000304 	addi	fp,sp,12
   39e98:	e13ffe15 	stw	r4,-8(fp)
   39e9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   39ea0:	000530fa 	rdctl	r2,ienable
   39ea4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   39ea8:	e0bfff17 	ldw	r2,-4(fp)
   39eac:	00c00044 	movi	r3,1
   39eb0:	1884983a 	sll	r2,r3,r2
   39eb4:	1007883a 	mov	r3,r2
   39eb8:	e0bffd17 	ldw	r2,-12(fp)
   39ebc:	1884703a 	and	r2,r3,r2
   39ec0:	1004c03a 	cmpne	r2,r2,zero
   39ec4:	10803fcc 	andi	r2,r2,255
}
   39ec8:	e037883a 	mov	sp,fp
   39ecc:	df000017 	ldw	fp,0(sp)
   39ed0:	dec00104 	addi	sp,sp,4
   39ed4:	f800283a 	ret

00039ed8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   39ed8:	defff504 	addi	sp,sp,-44
   39edc:	dfc00a15 	stw	ra,40(sp)
   39ee0:	df000915 	stw	fp,36(sp)
   39ee4:	df000904 	addi	fp,sp,36
   39ee8:	e13ffc15 	stw	r4,-16(fp)
   39eec:	e17ffd15 	stw	r5,-12(fp)
   39ef0:	e1bffe15 	stw	r6,-8(fp)
   39ef4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   39ef8:	00bffa84 	movi	r2,-22
   39efc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   39f00:	e0bffd17 	ldw	r2,-12(fp)
   39f04:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   39f08:	e0bff817 	ldw	r2,-32(fp)
   39f0c:	10800808 	cmpgei	r2,r2,32
   39f10:	1000271e 	bne	r2,zero,39fb0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   39f14:	0005303a 	rdctl	r2,status
   39f18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   39f1c:	e0fffa17 	ldw	r3,-24(fp)
   39f20:	00bfff84 	movi	r2,-2
   39f24:	1884703a 	and	r2,r3,r2
   39f28:	1001703a 	wrctl	status,r2
  
  return context;
   39f2c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   39f30:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   39f34:	008001b4 	movhi	r2,6
   39f38:	10b94304 	addi	r2,r2,-6900
   39f3c:	e0fff817 	ldw	r3,-32(fp)
   39f40:	180690fa 	slli	r3,r3,3
   39f44:	10c5883a 	add	r2,r2,r3
   39f48:	e0fffe17 	ldw	r3,-8(fp)
   39f4c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   39f50:	008001b4 	movhi	r2,6
   39f54:	10b94304 	addi	r2,r2,-6900
   39f58:	e0fff817 	ldw	r3,-32(fp)
   39f5c:	180690fa 	slli	r3,r3,3
   39f60:	10c5883a 	add	r2,r2,r3
   39f64:	10800104 	addi	r2,r2,4
   39f68:	e0ffff17 	ldw	r3,-4(fp)
   39f6c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   39f70:	e0bffe17 	ldw	r2,-8(fp)
   39f74:	10000526 	beq	r2,zero,39f8c <alt_iic_isr_register+0xb4>
   39f78:	e0bff817 	ldw	r2,-32(fp)
   39f7c:	e13ffc17 	ldw	r4,-16(fp)
   39f80:	100b883a 	mov	r5,r2
   39f84:	0039d480 	call	39d48 <alt_ic_irq_enable>
   39f88:	00000406 	br	39f9c <alt_iic_isr_register+0xc4>
   39f8c:	e0bff817 	ldw	r2,-32(fp)
   39f90:	e13ffc17 	ldw	r4,-16(fp)
   39f94:	100b883a 	mov	r5,r2
   39f98:	0039de80 	call	39de8 <alt_ic_irq_disable>
   39f9c:	e0bff715 	stw	r2,-36(fp)
   39fa0:	e0bff917 	ldw	r2,-28(fp)
   39fa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   39fa8:	e0bffb17 	ldw	r2,-20(fp)
   39fac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   39fb0:	e0bff717 	ldw	r2,-36(fp)
}
   39fb4:	e037883a 	mov	sp,fp
   39fb8:	dfc00117 	ldw	ra,4(sp)
   39fbc:	df000017 	ldw	fp,0(sp)
   39fc0:	dec00204 	addi	sp,sp,8
   39fc4:	f800283a 	ret

00039fc8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   39fc8:	defff904 	addi	sp,sp,-28
   39fcc:	dfc00615 	stw	ra,24(sp)
   39fd0:	df000515 	stw	fp,20(sp)
   39fd4:	df000504 	addi	fp,sp,20
   39fd8:	e13ffc15 	stw	r4,-16(fp)
   39fdc:	e17ffd15 	stw	r5,-12(fp)
   39fe0:	e1bffe15 	stw	r6,-8(fp)
   39fe4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   39fe8:	e13ffd17 	ldw	r4,-12(fp)
   39fec:	e17ffe17 	ldw	r5,-8(fp)
   39ff0:	e1bfff17 	ldw	r6,-4(fp)
   39ff4:	003a21c0 	call	3a21c <open>
   39ff8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   39ffc:	e0bffb17 	ldw	r2,-20(fp)
   3a000:	10001c16 	blt	r2,zero,3a074 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   3a004:	00800174 	movhi	r2,5
   3a008:	10866604 	addi	r2,r2,6552
   3a00c:	e0fffb17 	ldw	r3,-20(fp)
   3a010:	18c00324 	muli	r3,r3,12
   3a014:	10c5883a 	add	r2,r2,r3
   3a018:	10c00017 	ldw	r3,0(r2)
   3a01c:	e0bffc17 	ldw	r2,-16(fp)
   3a020:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3a024:	00800174 	movhi	r2,5
   3a028:	10866604 	addi	r2,r2,6552
   3a02c:	e0fffb17 	ldw	r3,-20(fp)
   3a030:	18c00324 	muli	r3,r3,12
   3a034:	10c5883a 	add	r2,r2,r3
   3a038:	10800104 	addi	r2,r2,4
   3a03c:	10c00017 	ldw	r3,0(r2)
   3a040:	e0bffc17 	ldw	r2,-16(fp)
   3a044:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3a048:	00800174 	movhi	r2,5
   3a04c:	10866604 	addi	r2,r2,6552
   3a050:	e0fffb17 	ldw	r3,-20(fp)
   3a054:	18c00324 	muli	r3,r3,12
   3a058:	10c5883a 	add	r2,r2,r3
   3a05c:	10800204 	addi	r2,r2,8
   3a060:	10c00017 	ldw	r3,0(r2)
   3a064:	e0bffc17 	ldw	r2,-16(fp)
   3a068:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3a06c:	e13ffb17 	ldw	r4,-20(fp)
   3a070:	003a4c00 	call	3a4c0 <alt_release_fd>
  }
} 
   3a074:	e037883a 	mov	sp,fp
   3a078:	dfc00117 	ldw	ra,4(sp)
   3a07c:	df000017 	ldw	fp,0(sp)
   3a080:	dec00204 	addi	sp,sp,8
   3a084:	f800283a 	ret

0003a088 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3a088:	defffb04 	addi	sp,sp,-20
   3a08c:	dfc00415 	stw	ra,16(sp)
   3a090:	df000315 	stw	fp,12(sp)
   3a094:	df000304 	addi	fp,sp,12
   3a098:	e13ffd15 	stw	r4,-12(fp)
   3a09c:	e17ffe15 	stw	r5,-8(fp)
   3a0a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3a0a4:	01000174 	movhi	r4,5
   3a0a8:	21066904 	addi	r4,r4,6564
   3a0ac:	e17ffd17 	ldw	r5,-12(fp)
   3a0b0:	01800044 	movi	r6,1
   3a0b4:	01c07fc4 	movi	r7,511
   3a0b8:	0039fc80 	call	39fc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3a0bc:	01000174 	movhi	r4,5
   3a0c0:	21066604 	addi	r4,r4,6552
   3a0c4:	e17ffe17 	ldw	r5,-8(fp)
   3a0c8:	000d883a 	mov	r6,zero
   3a0cc:	01c07fc4 	movi	r7,511
   3a0d0:	0039fc80 	call	39fc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3a0d4:	01000174 	movhi	r4,5
   3a0d8:	21066c04 	addi	r4,r4,6576
   3a0dc:	e17fff17 	ldw	r5,-4(fp)
   3a0e0:	01800044 	movi	r6,1
   3a0e4:	01c07fc4 	movi	r7,511
   3a0e8:	0039fc80 	call	39fc8 <alt_open_fd>
}  
   3a0ec:	e037883a 	mov	sp,fp
   3a0f0:	dfc00117 	ldw	ra,4(sp)
   3a0f4:	df000017 	ldw	fp,0(sp)
   3a0f8:	dec00204 	addi	sp,sp,8
   3a0fc:	f800283a 	ret

0003a100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a100:	defffe04 	addi	sp,sp,-8
   3a104:	dfc00115 	stw	ra,4(sp)
   3a108:	df000015 	stw	fp,0(sp)
   3a10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a110:	00800174 	movhi	r2,5
   3a114:	10876e04 	addi	r2,r2,7608
   3a118:	10800017 	ldw	r2,0(r2)
   3a11c:	10000526 	beq	r2,zero,3a134 <alt_get_errno+0x34>
   3a120:	00800174 	movhi	r2,5
   3a124:	10876e04 	addi	r2,r2,7608
   3a128:	10800017 	ldw	r2,0(r2)
   3a12c:	103ee83a 	callr	r2
   3a130:	00000206 	br	3a13c <alt_get_errno+0x3c>
   3a134:	00800174 	movhi	r2,5
   3a138:	108f7704 	addi	r2,r2,15836
}
   3a13c:	e037883a 	mov	sp,fp
   3a140:	dfc00117 	ldw	ra,4(sp)
   3a144:	df000017 	ldw	fp,0(sp)
   3a148:	dec00204 	addi	sp,sp,8
   3a14c:	f800283a 	ret

0003a150 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3a150:	defffd04 	addi	sp,sp,-12
   3a154:	df000215 	stw	fp,8(sp)
   3a158:	df000204 	addi	fp,sp,8
   3a15c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3a160:	e0bfff17 	ldw	r2,-4(fp)
   3a164:	10800217 	ldw	r2,8(r2)
   3a168:	10d00034 	orhi	r3,r2,16384
   3a16c:	e0bfff17 	ldw	r2,-4(fp)
   3a170:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3a174:	e03ffe15 	stw	zero,-8(fp)
   3a178:	00001d06 	br	3a1f0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3a17c:	00800174 	movhi	r2,5
   3a180:	10866604 	addi	r2,r2,6552
   3a184:	e0fffe17 	ldw	r3,-8(fp)
   3a188:	18c00324 	muli	r3,r3,12
   3a18c:	10c5883a 	add	r2,r2,r3
   3a190:	10c00017 	ldw	r3,0(r2)
   3a194:	e0bfff17 	ldw	r2,-4(fp)
   3a198:	10800017 	ldw	r2,0(r2)
   3a19c:	1880111e 	bne	r3,r2,3a1e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3a1a0:	00800174 	movhi	r2,5
   3a1a4:	10866604 	addi	r2,r2,6552
   3a1a8:	e0fffe17 	ldw	r3,-8(fp)
   3a1ac:	18c00324 	muli	r3,r3,12
   3a1b0:	10c5883a 	add	r2,r2,r3
   3a1b4:	10800204 	addi	r2,r2,8
   3a1b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3a1bc:	1000090e 	bge	r2,zero,3a1e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   3a1c0:	e0bffe17 	ldw	r2,-8(fp)
   3a1c4:	10c00324 	muli	r3,r2,12
   3a1c8:	00800174 	movhi	r2,5
   3a1cc:	10866604 	addi	r2,r2,6552
   3a1d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3a1d4:	e0bfff17 	ldw	r2,-4(fp)
   3a1d8:	18800226 	beq	r3,r2,3a1e4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3a1dc:	00bffcc4 	movi	r2,-13
   3a1e0:	00000a06 	br	3a20c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3a1e4:	e0bffe17 	ldw	r2,-8(fp)
   3a1e8:	10800044 	addi	r2,r2,1
   3a1ec:	e0bffe15 	stw	r2,-8(fp)
   3a1f0:	00800174 	movhi	r2,5
   3a1f4:	10876d04 	addi	r2,r2,7604
   3a1f8:	10800017 	ldw	r2,0(r2)
   3a1fc:	1007883a 	mov	r3,r2
   3a200:	e0bffe17 	ldw	r2,-8(fp)
   3a204:	18bfdd2e 	bgeu	r3,r2,3a17c <__alt_mem_descriptor_memory+0xdeffa17c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3a208:	0005883a 	mov	r2,zero
}
   3a20c:	e037883a 	mov	sp,fp
   3a210:	df000017 	ldw	fp,0(sp)
   3a214:	dec00104 	addi	sp,sp,4
   3a218:	f800283a 	ret

0003a21c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3a21c:	defff604 	addi	sp,sp,-40
   3a220:	dfc00915 	stw	ra,36(sp)
   3a224:	df000815 	stw	fp,32(sp)
   3a228:	df000804 	addi	fp,sp,32
   3a22c:	e13ffd15 	stw	r4,-12(fp)
   3a230:	e17ffe15 	stw	r5,-8(fp)
   3a234:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3a238:	00bfffc4 	movi	r2,-1
   3a23c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   3a240:	00bffb44 	movi	r2,-19
   3a244:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   3a248:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3a24c:	e13ffd17 	ldw	r4,-12(fp)
   3a250:	01400174 	movhi	r5,5
   3a254:	29476b04 	addi	r5,r5,7596
   3a258:	0039c380 	call	39c38 <alt_find_dev>
   3a25c:	e0bff815 	stw	r2,-32(fp)
   3a260:	e0bff817 	ldw	r2,-32(fp)
   3a264:	1000051e 	bne	r2,zero,3a27c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3a268:	e13ffd17 	ldw	r4,-12(fp)
   3a26c:	00480e80 	call	480e8 <alt_find_file>
   3a270:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   3a274:	00800044 	movi	r2,1
   3a278:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3a27c:	e0bff817 	ldw	r2,-32(fp)
   3a280:	10002926 	beq	r2,zero,3a328 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3a284:	e13ff817 	ldw	r4,-32(fp)
   3a288:	00481fc0 	call	481fc <alt_get_fd>
   3a28c:	e0bff915 	stw	r2,-28(fp)
   3a290:	e0bff917 	ldw	r2,-28(fp)
   3a294:	1000030e 	bge	r2,zero,3a2a4 <open+0x88>
    {
      status = index;
   3a298:	e0bff917 	ldw	r2,-28(fp)
   3a29c:	e0bffa15 	stw	r2,-24(fp)
   3a2a0:	00002306 	br	3a330 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   3a2a4:	e0bff917 	ldw	r2,-28(fp)
   3a2a8:	10c00324 	muli	r3,r2,12
   3a2ac:	00800174 	movhi	r2,5
   3a2b0:	10866604 	addi	r2,r2,6552
   3a2b4:	1885883a 	add	r2,r3,r2
   3a2b8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3a2bc:	e0fffe17 	ldw	r3,-8(fp)
   3a2c0:	00900034 	movhi	r2,16384
   3a2c4:	10bfffc4 	addi	r2,r2,-1
   3a2c8:	1886703a 	and	r3,r3,r2
   3a2cc:	e0bffc17 	ldw	r2,-16(fp)
   3a2d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3a2d4:	e0bffb17 	ldw	r2,-20(fp)
   3a2d8:	1000051e 	bne	r2,zero,3a2f0 <open+0xd4>
   3a2dc:	e13ffc17 	ldw	r4,-16(fp)
   3a2e0:	003a1500 	call	3a150 <alt_file_locked>
   3a2e4:	e0bffa15 	stw	r2,-24(fp)
   3a2e8:	e0bffa17 	ldw	r2,-24(fp)
   3a2ec:	10001016 	blt	r2,zero,3a330 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3a2f0:	e0bff817 	ldw	r2,-32(fp)
   3a2f4:	10800317 	ldw	r2,12(r2)
   3a2f8:	10000826 	beq	r2,zero,3a31c <open+0x100>
   3a2fc:	e0bff817 	ldw	r2,-32(fp)
   3a300:	10800317 	ldw	r2,12(r2)
   3a304:	e13ffc17 	ldw	r4,-16(fp)
   3a308:	e17ffd17 	ldw	r5,-12(fp)
   3a30c:	e1bffe17 	ldw	r6,-8(fp)
   3a310:	e1ffff17 	ldw	r7,-4(fp)
   3a314:	103ee83a 	callr	r2
   3a318:	00000106 	br	3a320 <open+0x104>
   3a31c:	0005883a 	mov	r2,zero
   3a320:	e0bffa15 	stw	r2,-24(fp)
   3a324:	00000206 	br	3a330 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3a328:	00bffb44 	movi	r2,-19
   3a32c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3a330:	e0bffa17 	ldw	r2,-24(fp)
   3a334:	1000090e 	bge	r2,zero,3a35c <open+0x140>
  {
    alt_release_fd (index);  
   3a338:	e13ff917 	ldw	r4,-28(fp)
   3a33c:	003a4c00 	call	3a4c0 <alt_release_fd>
    ALT_ERRNO = -status;
   3a340:	003a1000 	call	3a100 <alt_get_errno>
   3a344:	1007883a 	mov	r3,r2
   3a348:	e0bffa17 	ldw	r2,-24(fp)
   3a34c:	0085c83a 	sub	r2,zero,r2
   3a350:	18800015 	stw	r2,0(r3)
    return -1;
   3a354:	00bfffc4 	movi	r2,-1
   3a358:	00000106 	br	3a360 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   3a35c:	e0bff917 	ldw	r2,-28(fp)
}
   3a360:	e037883a 	mov	sp,fp
   3a364:	dfc00117 	ldw	ra,4(sp)
   3a368:	df000017 	ldw	fp,0(sp)
   3a36c:	dec00204 	addi	sp,sp,8
   3a370:	f800283a 	ret

0003a374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a374:	defffe04 	addi	sp,sp,-8
   3a378:	dfc00115 	stw	ra,4(sp)
   3a37c:	df000015 	stw	fp,0(sp)
   3a380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a384:	00800174 	movhi	r2,5
   3a388:	10876e04 	addi	r2,r2,7608
   3a38c:	10800017 	ldw	r2,0(r2)
   3a390:	10000526 	beq	r2,zero,3a3a8 <alt_get_errno+0x34>
   3a394:	00800174 	movhi	r2,5
   3a398:	10876e04 	addi	r2,r2,7608
   3a39c:	10800017 	ldw	r2,0(r2)
   3a3a0:	103ee83a 	callr	r2
   3a3a4:	00000206 	br	3a3b0 <alt_get_errno+0x3c>
   3a3a8:	00800174 	movhi	r2,5
   3a3ac:	108f7704 	addi	r2,r2,15836
}
   3a3b0:	e037883a 	mov	sp,fp
   3a3b4:	dfc00117 	ldw	ra,4(sp)
   3a3b8:	df000017 	ldw	fp,0(sp)
   3a3bc:	dec00204 	addi	sp,sp,8
   3a3c0:	f800283a 	ret

0003a3c4 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3a3c4:	defff904 	addi	sp,sp,-28
   3a3c8:	dfc00615 	stw	ra,24(sp)
   3a3cc:	df000515 	stw	fp,20(sp)
   3a3d0:	df000504 	addi	fp,sp,20
   3a3d4:	e13ffd15 	stw	r4,-12(fp)
   3a3d8:	e17ffe15 	stw	r5,-8(fp)
   3a3dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a3e0:	e0bffd17 	ldw	r2,-12(fp)
   3a3e4:	10000616 	blt	r2,zero,3a400 <alt_read+0x3c>
   3a3e8:	e0bffd17 	ldw	r2,-12(fp)
   3a3ec:	10c00324 	muli	r3,r2,12
   3a3f0:	00800174 	movhi	r2,5
   3a3f4:	10866604 	addi	r2,r2,6552
   3a3f8:	1885883a 	add	r2,r3,r2
   3a3fc:	00000106 	br	3a404 <alt_read+0x40>
   3a400:	0005883a 	mov	r2,zero
   3a404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a408:	e0bffb17 	ldw	r2,-20(fp)
   3a40c:	10002226 	beq	r2,zero,3a498 <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a410:	e0bffb17 	ldw	r2,-20(fp)
   3a414:	10800217 	ldw	r2,8(r2)
   3a418:	108000cc 	andi	r2,r2,3
   3a41c:	10800060 	cmpeqi	r2,r2,1
   3a420:	1000181e 	bne	r2,zero,3a484 <alt_read+0xc0>
        (fd->dev->read))
   3a424:	e0bffb17 	ldw	r2,-20(fp)
   3a428:	10800017 	ldw	r2,0(r2)
   3a42c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a430:	10001426 	beq	r2,zero,3a484 <alt_read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3a434:	e0bffb17 	ldw	r2,-20(fp)
   3a438:	10800017 	ldw	r2,0(r2)
   3a43c:	10800517 	ldw	r2,20(r2)
   3a440:	e0ffff17 	ldw	r3,-4(fp)
   3a444:	e13ffb17 	ldw	r4,-20(fp)
   3a448:	e17ffe17 	ldw	r5,-8(fp)
   3a44c:	180d883a 	mov	r6,r3
   3a450:	103ee83a 	callr	r2
   3a454:	e0bffc15 	stw	r2,-16(fp)
   3a458:	e0bffc17 	ldw	r2,-16(fp)
   3a45c:	1000070e 	bge	r2,zero,3a47c <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
   3a460:	003a3740 	call	3a374 <alt_get_errno>
   3a464:	1007883a 	mov	r3,r2
   3a468:	e0bffc17 	ldw	r2,-16(fp)
   3a46c:	0085c83a 	sub	r2,zero,r2
   3a470:	18800015 	stw	r2,0(r3)
          return -1;
   3a474:	00bfffc4 	movi	r2,-1
   3a478:	00000c06 	br	3a4ac <alt_read+0xe8>
        }
        return rval;
   3a47c:	e0bffc17 	ldw	r2,-16(fp)
   3a480:	00000a06 	br	3a4ac <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3a484:	003a3740 	call	3a374 <alt_get_errno>
   3a488:	1007883a 	mov	r3,r2
   3a48c:	00800344 	movi	r2,13
   3a490:	18800015 	stw	r2,0(r3)
   3a494:	00000406 	br	3a4a8 <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3a498:	003a3740 	call	3a374 <alt_get_errno>
   3a49c:	1007883a 	mov	r3,r2
   3a4a0:	00801444 	movi	r2,81
   3a4a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a4a8:	00bfffc4 	movi	r2,-1
}
   3a4ac:	e037883a 	mov	sp,fp
   3a4b0:	dfc00117 	ldw	ra,4(sp)
   3a4b4:	df000017 	ldw	fp,0(sp)
   3a4b8:	dec00204 	addi	sp,sp,8
   3a4bc:	f800283a 	ret

0003a4c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3a4c0:	defffe04 	addi	sp,sp,-8
   3a4c4:	df000115 	stw	fp,4(sp)
   3a4c8:	df000104 	addi	fp,sp,4
   3a4cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3a4d0:	e0bfff17 	ldw	r2,-4(fp)
   3a4d4:	108000d0 	cmplti	r2,r2,3
   3a4d8:	10000d1e 	bne	r2,zero,3a510 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   3a4dc:	00800174 	movhi	r2,5
   3a4e0:	10866604 	addi	r2,r2,6552
   3a4e4:	e0ffff17 	ldw	r3,-4(fp)
   3a4e8:	18c00324 	muli	r3,r3,12
   3a4ec:	10c5883a 	add	r2,r2,r3
   3a4f0:	10800204 	addi	r2,r2,8
   3a4f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3a4f8:	00800174 	movhi	r2,5
   3a4fc:	10866604 	addi	r2,r2,6552
   3a500:	e0ffff17 	ldw	r3,-4(fp)
   3a504:	18c00324 	muli	r3,r3,12
   3a508:	10c5883a 	add	r2,r2,r3
   3a50c:	10000015 	stw	zero,0(r2)
  }
}
   3a510:	e037883a 	mov	sp,fp
   3a514:	df000017 	ldw	fp,0(sp)
   3a518:	dec00104 	addi	sp,sp,4
   3a51c:	f800283a 	ret

0003a520 <alt_remap_cached>:
 * Return a pointer that should be used to access the cached memory.
 */

void* 
alt_remap_cached(volatile void* ptr, alt_u32 len)
{
   3a520:	defffd04 	addi	sp,sp,-12
   3a524:	df000215 	stw	fp,8(sp)
   3a528:	df000204 	addi	fp,sp,8
   3a52c:	e13ffe15 	stw	r4,-8(fp)
   3a530:	e17fff15 	stw	r5,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  return (void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK);
   3a534:	e0fffe17 	ldw	r3,-8(fp)
   3a538:	00a00034 	movhi	r2,32768
   3a53c:	10bfffc4 	addi	r2,r2,-1
   3a540:	1884703a 	and	r2,r3,r2
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  return (void*) ptr;
#endif /* No data cache */
}
   3a544:	e037883a 	mov	sp,fp
   3a548:	df000017 	ldw	fp,0(sp)
   3a54c:	dec00104 	addi	sp,sp,4
   3a550:	f800283a 	ret

0003a554 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3a554:	defffa04 	addi	sp,sp,-24
   3a558:	df000515 	stw	fp,20(sp)
   3a55c:	df000504 	addi	fp,sp,20
   3a560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3a564:	0005303a 	rdctl	r2,status
   3a568:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3a56c:	e0fffc17 	ldw	r3,-16(fp)
   3a570:	00bfff84 	movi	r2,-2
   3a574:	1884703a 	and	r2,r3,r2
   3a578:	1001703a 	wrctl	status,r2
  
  return context;
   3a57c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3a580:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3a584:	e0bfff17 	ldw	r2,-4(fp)
   3a588:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3a58c:	e0bffd17 	ldw	r2,-12(fp)
   3a590:	10800017 	ldw	r2,0(r2)
   3a594:	e0fffd17 	ldw	r3,-12(fp)
   3a598:	18c00117 	ldw	r3,4(r3)
   3a59c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3a5a0:	e0bffd17 	ldw	r2,-12(fp)
   3a5a4:	10800117 	ldw	r2,4(r2)
   3a5a8:	e0fffd17 	ldw	r3,-12(fp)
   3a5ac:	18c00017 	ldw	r3,0(r3)
   3a5b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3a5b4:	e0bffd17 	ldw	r2,-12(fp)
   3a5b8:	e0fffd17 	ldw	r3,-12(fp)
   3a5bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3a5c0:	e0bffd17 	ldw	r2,-12(fp)
   3a5c4:	e0fffd17 	ldw	r3,-12(fp)
   3a5c8:	10c00015 	stw	r3,0(r2)
   3a5cc:	e0bffb17 	ldw	r2,-20(fp)
   3a5d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3a5d4:	e0bffe17 	ldw	r2,-8(fp)
   3a5d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3a5dc:	e037883a 	mov	sp,fp
   3a5e0:	df000017 	ldw	fp,0(sp)
   3a5e4:	dec00104 	addi	sp,sp,4
   3a5e8:	f800283a 	ret

0003a5ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3a5ec:	defffb04 	addi	sp,sp,-20
   3a5f0:	dfc00415 	stw	ra,16(sp)
   3a5f4:	df000315 	stw	fp,12(sp)
   3a5f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3a5fc:	d0a04617 	ldw	r2,-32488(gp)
   3a600:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3a604:	d0a8a517 	ldw	r2,-23916(gp)
   3a608:	10800044 	addi	r2,r2,1
   3a60c:	d0a8a515 	stw	r2,-23916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3a610:	00002e06 	br	3a6cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3a614:	e0bffd17 	ldw	r2,-12(fp)
   3a618:	10800017 	ldw	r2,0(r2)
   3a61c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3a620:	e0bffd17 	ldw	r2,-12(fp)
   3a624:	10800403 	ldbu	r2,16(r2)
   3a628:	10803fcc 	andi	r2,r2,255
   3a62c:	10000426 	beq	r2,zero,3a640 <alt_tick+0x54>
   3a630:	d0a8a517 	ldw	r2,-23916(gp)
   3a634:	1000021e 	bne	r2,zero,3a640 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   3a638:	e0bffd17 	ldw	r2,-12(fp)
   3a63c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3a640:	e0bffd17 	ldw	r2,-12(fp)
   3a644:	10800217 	ldw	r2,8(r2)
   3a648:	d0e8a517 	ldw	r3,-23916(gp)
   3a64c:	18801d36 	bltu	r3,r2,3a6c4 <alt_tick+0xd8>
   3a650:	e0bffd17 	ldw	r2,-12(fp)
   3a654:	10800403 	ldbu	r2,16(r2)
   3a658:	10803fcc 	andi	r2,r2,255
   3a65c:	1000191e 	bne	r2,zero,3a6c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3a660:	e0bffd17 	ldw	r2,-12(fp)
   3a664:	10800317 	ldw	r2,12(r2)
   3a668:	e0fffd17 	ldw	r3,-12(fp)
   3a66c:	18c00517 	ldw	r3,20(r3)
   3a670:	1809883a 	mov	r4,r3
   3a674:	103ee83a 	callr	r2
   3a678:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3a67c:	e0bfff17 	ldw	r2,-4(fp)
   3a680:	1000031e 	bne	r2,zero,3a690 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   3a684:	e13ffd17 	ldw	r4,-12(fp)
   3a688:	003a5540 	call	3a554 <alt_alarm_stop>
   3a68c:	00000d06 	br	3a6c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3a690:	e0bffd17 	ldw	r2,-12(fp)
   3a694:	10c00217 	ldw	r3,8(r2)
   3a698:	e0bfff17 	ldw	r2,-4(fp)
   3a69c:	1887883a 	add	r3,r3,r2
   3a6a0:	e0bffd17 	ldw	r2,-12(fp)
   3a6a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3a6a8:	e0bffd17 	ldw	r2,-12(fp)
   3a6ac:	10c00217 	ldw	r3,8(r2)
   3a6b0:	d0a8a517 	ldw	r2,-23916(gp)
   3a6b4:	1880032e 	bgeu	r3,r2,3a6c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3a6b8:	e0bffd17 	ldw	r2,-12(fp)
   3a6bc:	00c00044 	movi	r3,1
   3a6c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   3a6c4:	e0bffe17 	ldw	r2,-8(fp)
   3a6c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3a6cc:	e0fffd17 	ldw	r3,-12(fp)
   3a6d0:	d0a04604 	addi	r2,gp,-32488
   3a6d4:	18bfcf1e 	bne	r3,r2,3a614 <__alt_mem_descriptor_memory+0xdeffa614>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3a6d8:	0018eb80 	call	18eb8 <OSTimeTick>
}
   3a6dc:	e037883a 	mov	sp,fp
   3a6e0:	dfc00117 	ldw	ra,4(sp)
   3a6e4:	df000017 	ldw	fp,0(sp)
   3a6e8:	dec00204 	addi	sp,sp,8
   3a6ec:	f800283a 	ret

0003a6f0 <alt_uncached_free>:
 * Free a block of uncached memory.
 */

void 
alt_uncached_free(volatile void* ptr)
{
   3a6f0:	defffd04 	addi	sp,sp,-12
   3a6f4:	dfc00215 	stw	ra,8(sp)
   3a6f8:	df000115 	stw	fp,4(sp)
   3a6fc:	df000104 	addi	fp,sp,4
   3a700:	e13fff15 	stw	r4,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
   3a704:	e0ffff17 	ldw	r3,-4(fp)
   3a708:	00a00034 	movhi	r2,32768
   3a70c:	10bfffc4 	addi	r2,r2,-1
   3a710:	1884703a 	and	r2,r3,r2
   3a714:	1009883a 	mov	r4,r2
   3a718:	00074d40 	call	74d4 <free>
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  free((void*)ptr);
#endif /* No data cache */
}
   3a71c:	e037883a 	mov	sp,fp
   3a720:	dfc00117 	ldw	ra,4(sp)
   3a724:	df000017 	ldw	fp,0(sp)
   3a728:	dec00204 	addi	sp,sp,8
   3a72c:	f800283a 	ret

0003a730 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
   3a730:	defffa04 	addi	sp,sp,-24
   3a734:	dfc00515 	stw	ra,20(sp)
   3a738:	df000415 	stw	fp,16(sp)
   3a73c:	df000404 	addi	fp,sp,16
   3a740:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
   3a744:	e0bfff17 	ldw	r2,-4(fp)
   3a748:	108007c4 	addi	r2,r2,31
   3a74c:	1004d17a 	srli	r2,r2,5
   3a750:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
   3a754:	e0bffc17 	ldw	r2,-16(fp)
   3a758:	1004917a 	slli	r2,r2,5
   3a75c:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
   3a760:	01000804 	movi	r4,32
   3a764:	e17ffd17 	ldw	r5,-12(fp)
   3a768:	00496cc0 	call	496cc <memalign>
   3a76c:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
   3a770:	e0bffe17 	ldw	r2,-8(fp)
   3a774:	1000021e 	bne	r2,zero,3a780 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
   3a778:	0005883a 	mov	r2,zero
   3a77c:	00000506 	br	3a794 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
   3a780:	e13ffe17 	ldw	r4,-8(fp)
   3a784:	e17ffd17 	ldw	r5,-12(fp)
   3a788:	00399a80 	call	399a8 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
   3a78c:	e0bffe17 	ldw	r2,-8(fp)
   3a790:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
   3a794:	e037883a 	mov	sp,fp
   3a798:	dfc00117 	ldw	ra,4(sp)
   3a79c:	df000017 	ldw	fp,0(sp)
   3a7a0:	dec00204 	addi	sp,sp,8
   3a7a4:	f800283a 	ret

0003a7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a7a8:	defffe04 	addi	sp,sp,-8
   3a7ac:	dfc00115 	stw	ra,4(sp)
   3a7b0:	df000015 	stw	fp,0(sp)
   3a7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a7b8:	00800174 	movhi	r2,5
   3a7bc:	10876e04 	addi	r2,r2,7608
   3a7c0:	10800017 	ldw	r2,0(r2)
   3a7c4:	10000526 	beq	r2,zero,3a7dc <alt_get_errno+0x34>
   3a7c8:	00800174 	movhi	r2,5
   3a7cc:	10876e04 	addi	r2,r2,7608
   3a7d0:	10800017 	ldw	r2,0(r2)
   3a7d4:	103ee83a 	callr	r2
   3a7d8:	00000206 	br	3a7e4 <alt_get_errno+0x3c>
   3a7dc:	00800174 	movhi	r2,5
   3a7e0:	108f7704 	addi	r2,r2,15836
}
   3a7e4:	e037883a 	mov	sp,fp
   3a7e8:	dfc00117 	ldw	ra,4(sp)
   3a7ec:	df000017 	ldw	fp,0(sp)
   3a7f0:	dec00204 	addi	sp,sp,8
   3a7f4:	f800283a 	ret

0003a7f8 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3a7f8:	defff904 	addi	sp,sp,-28
   3a7fc:	dfc00615 	stw	ra,24(sp)
   3a800:	df000515 	stw	fp,20(sp)
   3a804:	df000504 	addi	fp,sp,20
   3a808:	e13ffd15 	stw	r4,-12(fp)
   3a80c:	e17ffe15 	stw	r5,-8(fp)
   3a810:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a814:	e0bffd17 	ldw	r2,-12(fp)
   3a818:	10000616 	blt	r2,zero,3a834 <alt_write+0x3c>
   3a81c:	e0bffd17 	ldw	r2,-12(fp)
   3a820:	10c00324 	muli	r3,r2,12
   3a824:	00800174 	movhi	r2,5
   3a828:	10866604 	addi	r2,r2,6552
   3a82c:	1885883a 	add	r2,r3,r2
   3a830:	00000106 	br	3a838 <alt_write+0x40>
   3a834:	0005883a 	mov	r2,zero
   3a838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a83c:	e0bffb17 	ldw	r2,-20(fp)
   3a840:	10002126 	beq	r2,zero,3a8c8 <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3a844:	e0bffb17 	ldw	r2,-20(fp)
   3a848:	10800217 	ldw	r2,8(r2)
   3a84c:	108000cc 	andi	r2,r2,3
   3a850:	10001826 	beq	r2,zero,3a8b4 <alt_write+0xbc>
   3a854:	e0bffb17 	ldw	r2,-20(fp)
   3a858:	10800017 	ldw	r2,0(r2)
   3a85c:	10800617 	ldw	r2,24(r2)
   3a860:	10001426 	beq	r2,zero,3a8b4 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3a864:	e0bffb17 	ldw	r2,-20(fp)
   3a868:	10800017 	ldw	r2,0(r2)
   3a86c:	10800617 	ldw	r2,24(r2)
   3a870:	e0ffff17 	ldw	r3,-4(fp)
   3a874:	e13ffb17 	ldw	r4,-20(fp)
   3a878:	e17ffe17 	ldw	r5,-8(fp)
   3a87c:	180d883a 	mov	r6,r3
   3a880:	103ee83a 	callr	r2
   3a884:	e0bffc15 	stw	r2,-16(fp)
   3a888:	e0bffc17 	ldw	r2,-16(fp)
   3a88c:	1000070e 	bge	r2,zero,3a8ac <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
   3a890:	003a7a80 	call	3a7a8 <alt_get_errno>
   3a894:	1007883a 	mov	r3,r2
   3a898:	e0bffc17 	ldw	r2,-16(fp)
   3a89c:	0085c83a 	sub	r2,zero,r2
   3a8a0:	18800015 	stw	r2,0(r3)
        return -1;
   3a8a4:	00bfffc4 	movi	r2,-1
   3a8a8:	00000c06 	br	3a8dc <alt_write+0xe4>
      }
      return rval;
   3a8ac:	e0bffc17 	ldw	r2,-16(fp)
   3a8b0:	00000a06 	br	3a8dc <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3a8b4:	003a7a80 	call	3a7a8 <alt_get_errno>
   3a8b8:	1007883a 	mov	r3,r2
   3a8bc:	00800344 	movi	r2,13
   3a8c0:	18800015 	stw	r2,0(r3)
   3a8c4:	00000406 	br	3a8d8 <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3a8c8:	003a7a80 	call	3a7a8 <alt_get_errno>
   3a8cc:	1007883a 	mov	r3,r2
   3a8d0:	00801444 	movi	r2,81
   3a8d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a8d8:	00bfffc4 	movi	r2,-1
}
   3a8dc:	e037883a 	mov	sp,fp
   3a8e0:	dfc00117 	ldw	ra,4(sp)
   3a8e4:	df000017 	ldw	fp,0(sp)
   3a8e8:	dec00204 	addi	sp,sp,8
   3a8ec:	f800283a 	ret

0003a8f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   3a8f0:	deffff04 	addi	sp,sp,-4
   3a8f4:	df000015 	stw	fp,0(sp)
   3a8f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3a8fc:	000170fa 	wrctl	ienable,zero
}
   3a900:	e037883a 	mov	sp,fp
   3a904:	df000017 	ldw	fp,0(sp)
   3a908:	dec00104 	addi	sp,sp,4
   3a90c:	f800283a 	ret

0003a910 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   3a910:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   3a914:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   3a918:	d1286717 	ldw	r4,-24164(gp)

      stw ra,  0(sp)
   3a91c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   3a920:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   3a924:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   3a928:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   3a92c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   3a930:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   3a934:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   3a938:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   3a93c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   3a940:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   3a944:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   3a948:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   3a94c:	003ad140 	call	3ad14 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   3a950:	d1286217 	ldw	r4,-24184(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   3a954:	d1685a07 	ldb	r5,-24216(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   3a958:	d1286715 	stw	r4,-24164(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   3a95c:	d1685a45 	stb	r5,-24215(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   3a960:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   3a964:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   3a968:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   3a96c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   3a970:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   3a974:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   3a978:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   3a97c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   3a980:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   3a984:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   3a988:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   3a98c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   3a990:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   3a994:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   3a998:	f800283a 	ret

0003a99c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   3a99c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   3a9a0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   3a9a4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   3a9a8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   3a9ac:	003ad140 	call	3ad14 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   3a9b0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   3a9b4:	d4a85845 	stb	r18,-24223(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   3a9b8:	003fe506 	br	3a950 <__alt_mem_descriptor_memory+0xdeffa950>

0003a9bc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   3a9bc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   3a9c0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   3a9c4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   3a9c8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   3a9cc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   3a9d0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   3a9d4:	dec00204 	addi	sp,sp,8

      callr r2
   3a9d8:	103ee83a 	callr	r2

      nop
   3a9dc:	0001883a 	nop

0003a9e0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   3a9e0:	defff704 	addi	sp,sp,-36
   3a9e4:	dfc00815 	stw	ra,32(sp)
   3a9e8:	df000715 	stw	fp,28(sp)
   3a9ec:	df000704 	addi	fp,sp,28
   3a9f0:	e13ffc15 	stw	r4,-16(fp)
   3a9f4:	e17ffd15 	stw	r5,-12(fp)
   3a9f8:	e1bffe15 	stw	r6,-8(fp)
   3a9fc:	3805883a 	mov	r2,r7
   3aa00:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   3aa04:	e0fffe17 	ldw	r3,-8(fp)
   3aa08:	00bfff04 	movi	r2,-4
   3aa0c:	1884703a 	and	r2,r3,r2
   3aa10:	10bef704 	addi	r2,r2,-1060
   3aa14:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   3aa18:	e0bff917 	ldw	r2,-28(fp)
   3aa1c:	10000015 	stw	zero,0(r2)
   3aa20:	e0bff917 	ldw	r2,-28(fp)
   3aa24:	10c0bb04 	addi	r3,r2,748
   3aa28:	e0bff917 	ldw	r2,-28(fp)
   3aa2c:	10c00115 	stw	r3,4(r2)
   3aa30:	e0bff917 	ldw	r2,-28(fp)
   3aa34:	10c0d504 	addi	r3,r2,852
   3aa38:	e0bff917 	ldw	r2,-28(fp)
   3aa3c:	10c00215 	stw	r3,8(r2)
   3aa40:	e0bff917 	ldw	r2,-28(fp)
   3aa44:	10c0ef04 	addi	r3,r2,956
   3aa48:	e0bff917 	ldw	r2,-28(fp)
   3aa4c:	10c00315 	stw	r3,12(r2)
   3aa50:	e0bff917 	ldw	r2,-28(fp)
   3aa54:	10000415 	stw	zero,16(r2)
   3aa58:	e0bff917 	ldw	r2,-28(fp)
   3aa5c:	10800504 	addi	r2,r2,20
   3aa60:	1009883a 	mov	r4,r2
   3aa64:	000b883a 	mov	r5,zero
   3aa68:	01800644 	movi	r6,25
   3aa6c:	0007f240 	call	7f24 <memset>
   3aa70:	e0bff917 	ldw	r2,-28(fp)
   3aa74:	10000c15 	stw	zero,48(r2)
   3aa78:	e0fff917 	ldw	r3,-28(fp)
   3aa7c:	00800174 	movhi	r2,5
   3aa80:	10bba504 	addi	r2,r2,-4460
   3aa84:	18800d15 	stw	r2,52(r3)
   3aa88:	e0bff917 	ldw	r2,-28(fp)
   3aa8c:	10000e15 	stw	zero,56(r2)
   3aa90:	e0bff917 	ldw	r2,-28(fp)
   3aa94:	10000f15 	stw	zero,60(r2)
   3aa98:	e0bff917 	ldw	r2,-28(fp)
   3aa9c:	10001015 	stw	zero,64(r2)
   3aaa0:	e0bff917 	ldw	r2,-28(fp)
   3aaa4:	10001115 	stw	zero,68(r2)
   3aaa8:	e0bff917 	ldw	r2,-28(fp)
   3aaac:	10001215 	stw	zero,72(r2)
   3aab0:	e0bff917 	ldw	r2,-28(fp)
   3aab4:	10001315 	stw	zero,76(r2)
   3aab8:	e0bff917 	ldw	r2,-28(fp)
   3aabc:	10001415 	stw	zero,80(r2)
   3aac0:	e0bff917 	ldw	r2,-28(fp)
   3aac4:	10001515 	stw	zero,84(r2)
   3aac8:	e0bff917 	ldw	r2,-28(fp)
   3aacc:	10001615 	stw	zero,88(r2)
   3aad0:	e0bff917 	ldw	r2,-28(fp)
   3aad4:	10001715 	stw	zero,92(r2)
   3aad8:	e0bff917 	ldw	r2,-28(fp)
   3aadc:	10001805 	stb	zero,96(r2)
   3aae0:	e0bff917 	ldw	r2,-28(fp)
   3aae4:	10801f04 	addi	r2,r2,124
   3aae8:	1009883a 	mov	r4,r2
   3aaec:	000b883a 	mov	r5,zero
   3aaf0:	01800904 	movi	r6,36
   3aaf4:	0007f240 	call	7f24 <memset>
   3aaf8:	e0bff917 	ldw	r2,-28(fp)
   3aafc:	10002815 	stw	zero,160(r2)
   3ab00:	e0bff917 	ldw	r2,-28(fp)
   3ab04:	00c00044 	movi	r3,1
   3ab08:	10c02915 	stw	r3,164(r2)
   3ab0c:	10002a15 	stw	zero,168(r2)
   3ab10:	e0bff917 	ldw	r2,-28(fp)
   3ab14:	00ccc384 	movi	r3,13070
   3ab18:	10c02b0d 	sth	r3,172(r2)
   3ab1c:	e0bff917 	ldw	r2,-28(fp)
   3ab20:	00eaf344 	movi	r3,-21555
   3ab24:	10c02b8d 	sth	r3,174(r2)
   3ab28:	e0bff917 	ldw	r2,-28(fp)
   3ab2c:	00c48d04 	movi	r3,4660
   3ab30:	10c02c0d 	sth	r3,176(r2)
   3ab34:	e0bff917 	ldw	r2,-28(fp)
   3ab38:	00f99b44 	movi	r3,-6547
   3ab3c:	10c02c8d 	sth	r3,178(r2)
   3ab40:	e0bff917 	ldw	r2,-28(fp)
   3ab44:	00f7bb04 	movi	r3,-8468
   3ab48:	10c02d0d 	sth	r3,180(r2)
   3ab4c:	e0bff917 	ldw	r2,-28(fp)
   3ab50:	00c00144 	movi	r3,5
   3ab54:	10c02d8d 	sth	r3,182(r2)
   3ab58:	e0bff917 	ldw	r2,-28(fp)
   3ab5c:	00c002c4 	movi	r3,11
   3ab60:	10c02e0d 	sth	r3,184(r2)
   3ab64:	e0bff917 	ldw	r2,-28(fp)
   3ab68:	10002f15 	stw	zero,188(r2)
   3ab6c:	e0bff917 	ldw	r2,-28(fp)
   3ab70:	10003015 	stw	zero,192(r2)
   3ab74:	e0bff917 	ldw	r2,-28(fp)
   3ab78:	10003115 	stw	zero,196(r2)
   3ab7c:	e0bff917 	ldw	r2,-28(fp)
   3ab80:	10003215 	stw	zero,200(r2)
   3ab84:	e0bff917 	ldw	r2,-28(fp)
   3ab88:	10003315 	stw	zero,204(r2)
   3ab8c:	e0bff917 	ldw	r2,-28(fp)
   3ab90:	10003415 	stw	zero,208(r2)
   3ab94:	e0bff917 	ldw	r2,-28(fp)
   3ab98:	10003e15 	stw	zero,248(r2)
   3ab9c:	e0bff917 	ldw	r2,-28(fp)
   3aba0:	10003f15 	stw	zero,252(r2)
   3aba4:	e0bff917 	ldw	r2,-28(fp)
   3aba8:	10004015 	stw	zero,256(r2)
   3abac:	e0bff917 	ldw	r2,-28(fp)
   3abb0:	10004115 	stw	zero,260(r2)
   3abb4:	e0bff917 	ldw	r2,-28(fp)
   3abb8:	10004215 	stw	zero,264(r2)
   3abbc:	e0bff917 	ldw	r2,-28(fp)
   3abc0:	10004315 	stw	zero,268(r2)
   3abc4:	e0bff917 	ldw	r2,-28(fp)
   3abc8:	10004415 	stw	zero,272(r2)
   3abcc:	e0bff917 	ldw	r2,-28(fp)
   3abd0:	10004515 	stw	zero,276(r2)
   3abd4:	e0bff917 	ldw	r2,-28(fp)
   3abd8:	10004615 	stw	zero,280(r2)
   3abdc:	e0bff917 	ldw	r2,-28(fp)
   3abe0:	10004715 	stw	zero,284(r2)
   3abe4:	e0bff917 	ldw	r2,-28(fp)
   3abe8:	10003505 	stb	zero,212(r2)
   3abec:	e0bff917 	ldw	r2,-28(fp)
   3abf0:	10003705 	stb	zero,220(r2)
   3abf4:	e0bff917 	ldw	r2,-28(fp)
   3abf8:	10003d15 	stw	zero,244(r2)
   3abfc:	e0bff917 	ldw	r2,-28(fp)
   3ac00:	10005215 	stw	zero,328(r2)
   3ac04:	e0bff917 	ldw	r2,-28(fp)
   3ac08:	10005315 	stw	zero,332(r2)
   3ac0c:	e0bff917 	ldw	r2,-28(fp)
   3ac10:	10005415 	stw	zero,336(r2)
   3ac14:	e0bff917 	ldw	r2,-28(fp)
   3ac18:	10005515 	stw	zero,340(r2)
   3ac1c:	e0bff917 	ldw	r2,-28(fp)
   3ac20:	1000b515 	stw	zero,724(r2)
   3ac24:	e0bff917 	ldw	r2,-28(fp)
   3ac28:	10007515 	stw	zero,468(r2)
   3ac2c:	e0bff917 	ldw	r2,-28(fp)
   3ac30:	1000b715 	stw	zero,732(r2)
   3ac34:	e0bff917 	ldw	r2,-28(fp)
   3ac38:	1000b815 	stw	zero,736(r2)
   3ac3c:	e0bff917 	ldw	r2,-28(fp)
   3ac40:	1000b915 	stw	zero,740(r2)
   3ac44:	e0bff917 	ldw	r2,-28(fp)
   3ac48:	1000ba15 	stw	zero,744(r2)
   3ac4c:	e0bff917 	ldw	r2,-28(fp)
   3ac50:	1080bb04 	addi	r2,r2,748
   3ac54:	1009883a 	mov	r4,r2
   3ac58:	000b883a 	mov	r5,zero
   3ac5c:	01804e04 	movi	r6,312
   3ac60:	0007f240 	call	7f24 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   3ac64:	e0bff917 	ldw	r2,-28(fp)
   3ac68:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   3ac6c:	e0bffa17 	ldw	r2,-24(fp)
   3ac70:	10bff304 	addi	r2,r2,-52
   3ac74:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   3ac78:	e0bffb17 	ldw	r2,-20(fp)
   3ac7c:	10800c04 	addi	r2,r2,48
   3ac80:	e0fffc17 	ldw	r3,-16(fp)
   3ac84:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   3ac88:	e0bffb17 	ldw	r2,-20(fp)
   3ac8c:	10800b04 	addi	r2,r2,44
   3ac90:	e0fffd17 	ldw	r3,-12(fp)
   3ac94:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   3ac98:	e0bffb17 	ldw	r2,-20(fp)
   3ac9c:	10800a04 	addi	r2,r2,40
   3aca0:	e0fff917 	ldw	r3,-28(fp)
   3aca4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   3aca8:	00800134 	movhi	r2,4
   3acac:	10aa6f04 	addi	r2,r2,-22084
   3acb0:	10c00104 	addi	r3,r2,4
   3acb4:	e0bffb17 	ldw	r2,-20(fp)
   3acb8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   3acbc:	e0bffb17 	ldw	r2,-20(fp)
}
   3acc0:	e037883a 	mov	sp,fp
   3acc4:	dfc00117 	ldw	ra,4(sp)
   3acc8:	df000017 	ldw	fp,0(sp)
   3accc:	dec00204 	addi	sp,sp,8
   3acd0:	f800283a 	ret

0003acd4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   3acd4:	defffe04 	addi	sp,sp,-8
   3acd8:	df000115 	stw	fp,4(sp)
   3acdc:	df000104 	addi	fp,sp,4
   3ace0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   3ace4:	e037883a 	mov	sp,fp
   3ace8:	df000017 	ldw	fp,0(sp)
   3acec:	dec00104 	addi	sp,sp,4
   3acf0:	f800283a 	ret

0003acf4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   3acf4:	defffe04 	addi	sp,sp,-8
   3acf8:	df000115 	stw	fp,4(sp)
   3acfc:	df000104 	addi	fp,sp,4
   3ad00:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   3ad04:	e037883a 	mov	sp,fp
   3ad08:	df000017 	ldw	fp,0(sp)
   3ad0c:	dec00104 	addi	sp,sp,4
   3ad10:	f800283a 	ret

0003ad14 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   3ad14:	deffff04 	addi	sp,sp,-4
   3ad18:	df000015 	stw	fp,0(sp)
   3ad1c:	d839883a 	mov	fp,sp
}
   3ad20:	e037883a 	mov	sp,fp
   3ad24:	df000017 	ldw	fp,0(sp)
   3ad28:	dec00104 	addi	sp,sp,4
   3ad2c:	f800283a 	ret

0003ad30 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   3ad30:	deffff04 	addi	sp,sp,-4
   3ad34:	df000015 	stw	fp,0(sp)
   3ad38:	d839883a 	mov	fp,sp
}
   3ad3c:	e037883a 	mov	sp,fp
   3ad40:	df000017 	ldw	fp,0(sp)
   3ad44:	dec00104 	addi	sp,sp,4
   3ad48:	f800283a 	ret

0003ad4c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   3ad4c:	defffe04 	addi	sp,sp,-8
   3ad50:	dfc00115 	stw	ra,4(sp)
   3ad54:	df000015 	stw	fp,0(sp)
   3ad58:	d839883a 	mov	fp,sp
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
   3ad5c:	002b27c0 	call	2b27c <cticks_hook>
#endif
}
   3ad60:	e037883a 	mov	sp,fp
   3ad64:	dfc00117 	ldw	ra,4(sp)
   3ad68:	df000017 	ldw	fp,0(sp)
   3ad6c:	dec00204 	addi	sp,sp,8
   3ad70:	f800283a 	ret

0003ad74 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   3ad74:	deffff04 	addi	sp,sp,-4
   3ad78:	df000015 	stw	fp,0(sp)
   3ad7c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   3ad80:	e037883a 	mov	sp,fp
   3ad84:	df000017 	ldw	fp,0(sp)
   3ad88:	dec00104 	addi	sp,sp,4
   3ad8c:	f800283a 	ret

0003ad90 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   3ad90:	deffff04 	addi	sp,sp,-4
   3ad94:	df000015 	stw	fp,0(sp)
   3ad98:	d839883a 	mov	fp,sp
}
   3ad9c:	e037883a 	mov	sp,fp
   3ada0:	df000017 	ldw	fp,0(sp)
   3ada4:	dec00104 	addi	sp,sp,4
   3ada8:	f800283a 	ret

0003adac <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   3adac:	deffff04 	addi	sp,sp,-4
   3adb0:	df000015 	stw	fp,0(sp)
   3adb4:	d839883a 	mov	fp,sp
}
   3adb8:	e037883a 	mov	sp,fp
   3adbc:	df000017 	ldw	fp,0(sp)
   3adc0:	dec00104 	addi	sp,sp,4
   3adc4:	f800283a 	ret

0003adc8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   3adc8:	defffe04 	addi	sp,sp,-8
   3adcc:	df000115 	stw	fp,4(sp)
   3add0:	df000104 	addi	fp,sp,4
   3add4:	e13fff15 	stw	r4,-4(fp)
}
   3add8:	e037883a 	mov	sp,fp
   3addc:	df000017 	ldw	fp,0(sp)
   3ade0:	dec00104 	addi	sp,sp,4
   3ade4:	f800283a 	ret

0003ade8 <netmain_init>:
 * RETURNS: 
 */

void 
netmain_init(void)
{
   3ade8:	defffb04 	addi	sp,sp,-20
   3adec:	dfc00415 	stw	ra,16(sp)
   3adf0:	df000315 	stw	fp,12(sp)
   3adf4:	dc000215 	stw	r16,8(sp)
   3adf8:	df000304 	addi	fp,sp,12
   int   e = 0;
   3adfc:	e03ffd15 	stw	zero,-12(fp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
   3ae00:	d0a04817 	ldw	r2,-32480(gp)
   3ae04:	1009883a 	mov	r4,r2
   3ae08:	00083740 	call	8374 <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
   3ae0c:	01000174 	movhi	r4,5
   3ae10:	213bb104 	addi	r4,r4,-4412
   3ae14:	00083740 	call	8374 <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
   3ae18:	002ba280 	call	2ba28 <pre_task_setup>
   3ae1c:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
   3ae20:	e0bffe17 	ldw	r2,-8(fp)
   3ae24:	10000226 	beq	r2,zero,3ae30 <netmain_init+0x48>
      panic(msg);
   3ae28:	e13ffe17 	ldw	r4,-8(fp)
   3ae2c:	00267380 	call	26738 <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
   3ae30:	00244200 	call	24420 <ip_startup>
   3ae34:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
   3ae38:	e0bffe17 	ldw	r2,-8(fp)
   3ae3c:	10000726 	beq	r2,zero,3ae5c <netmain_init+0x74>
   {
      printf("inet startup error: %s\n", msg);
   3ae40:	01000174 	movhi	r4,5
   3ae44:	213bc304 	addi	r4,r4,-4340
   3ae48:	e17ffe17 	ldw	r5,-8(fp)
   3ae4c:	00080f80 	call	80f8 <printf>
      panic("IP");
   3ae50:	01000174 	movhi	r4,5
   3ae54:	213bc904 	addi	r4,r4,-4316
   3ae58:	00267380 	call	26738 <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
   3ae5c:	00451540 	call	45154 <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
   3ae60:	00446ec0 	call	446ec <u_mctest_init>

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
   3ae64:	00800174 	movhi	r2,5
   3ae68:	108f9904 	addi	r2,r2,15972
   3ae6c:	10000015 	stw	zero,0(r2)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
   3ae70:	008001b4 	movhi	r2,6
   3ae74:	10b9dc04 	addi	r2,r2,-6288
   3ae78:	10800017 	ldw	r2,0(r2)
   3ae7c:	14000104 	addi	r16,r2,4
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
   3ae80:	008001b4 	movhi	r2,6
   3ae84:	10b9dc04 	addi	r2,r2,-6288
   3ae88:	10800017 	ldw	r2,0(r2)
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
   3ae8c:	10800a17 	ldw	r2,40(r2)
   3ae90:	1009883a 	mov	r4,r2
   3ae94:	00265840 	call	26584 <print_ipad>
   3ae98:	01000174 	movhi	r4,5
   3ae9c:	213bca04 	addi	r4,r4,-4312
   3aea0:	800b883a 	mov	r5,r16
   3aea4:	100d883a 	mov	r6,r2
   3aea8:	00080f80 	call	80f8 <printf>
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
   3aeac:	002ba9c0 	call	2ba9c <post_task_setup>
   3aeb0:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
   3aeb4:	e0bffe17 	ldw	r2,-8(fp)
   3aeb8:	10000226 	beq	r2,zero,3aec4 <netmain_init+0xdc>
      panic(msg);
   3aebc:	e13ffe17 	ldw	r4,-8(fp)
   3aec0:	00267380 	call	26738 <panic>
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
   3aec4:	0044ddc0 	call	44ddc <dhc_setup>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
   3aec8:	e6ffff04 	addi	sp,fp,-4
   3aecc:	dfc00217 	ldw	ra,8(sp)
   3aed0:	df000117 	ldw	fp,4(sp)
   3aed4:	dc000017 	ldw	r16,0(sp)
   3aed8:	dec00304 	addi	sp,sp,12
   3aedc:	f800283a 	ret

0003aee0 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
   3aee0:	defffb04 	addi	sp,sp,-20
   3aee4:	dfc00415 	stw	ra,16(sp)
   3aee8:	df000315 	stw	fp,12(sp)
   3aeec:	dc000215 	stw	r16,8(sp)
   3aef0:	df000304 	addi	fp,sp,12
   3aef4:	e13ffd15 	stw	r4,-12(fp)
   3aef8:	e17ffe15 	stw	r5,-8(fp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   3aefc:	e0bffe17 	ldw	r2,-8(fp)
   3af00:	10800003 	ldbu	r2,0(r2)
   3af04:	10c03fcc 	andi	r3,r2,255
   3af08:	18c0201c 	xori	r3,r3,128
   3af0c:	18ffe004 	addi	r3,r3,-128
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
   3af10:	00800174 	movhi	r2,5
   3af14:	1086c604 	addi	r2,r2,6936
   3af18:	18c7883a 	add	r3,r3,r3
   3af1c:	18c7883a 	add	r3,r3,r3
   3af20:	10c5883a 	add	r2,r2,r3
   3af24:	14000017 	ldw	r16,0(r2)
   3af28:	e0bffd17 	ldw	r2,-12(fp)
   3af2c:	10800717 	ldw	r2,28(r2)
   3af30:	1009883a 	mov	r4,r2
   3af34:	00265840 	call	26584 <print_ipad>
   3af38:	01000174 	movhi	r4,5
   3af3c:	213bda04 	addi	r4,r4,-4248
   3af40:	800b883a 	mov	r5,r16
   3af44:	100d883a 	mov	r6,r2
   3af48:	00080f80 	call	80f8 <printf>
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   dprintf(prompt);
   3af4c:	d0a04917 	ldw	r2,-32476(gp)
   3af50:	1009883a 	mov	r4,r2
   3af54:	00080f80 	call	80f8 <printf>
}
   3af58:	e6ffff04 	addi	sp,fp,-4
   3af5c:	dfc00217 	ldw	ra,8(sp)
   3af60:	df000117 	ldw	fp,4(sp)
   3af64:	dc000017 	ldw	r16,0(sp)
   3af68:	dec00304 	addi	sp,sp,12
   3af6c:	f800283a 	ret

0003af70 <station_state>:
 * RETURNS: 
 */

int
station_state(void * pio)
{
   3af70:	defff904 	addi	sp,sp,-28
   3af74:	dfc00615 	stw	ra,24(sp)
   3af78:	df000515 	stw	fp,20(sp)
   3af7c:	dc000415 	stw	r16,16(sp)
   3af80:	df000504 	addi	fp,sp,20
   3af84:	e13ffe15 	stw	r4,-8(fp)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
   3af88:	e03ffc15 	stw	zero,-16(fp)
   3af8c:	008001b4 	movhi	r2,6
   3af90:	10b9dc04 	addi	r2,r2,-6288
   3af94:	10800017 	ldw	r2,0(r2)
   3af98:	e0bffd15 	stw	r2,-12(fp)
   3af9c:	00002506 	br	3b034 <station_state+0xc4>
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
   3afa0:	e0bffd17 	ldw	r2,-12(fp)
   3afa4:	14000104 	addi	r16,r2,4
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
   3afa8:	e0bffd17 	ldw	r2,-12(fp)
   3afac:	10800a17 	ldw	r2,40(r2)
   3afb0:	1009883a 	mov	r4,r2
   3afb4:	00265840 	call	26584 <print_ipad>
   3afb8:	d8800015 	stw	r2,0(sp)
   3afbc:	e13ffe17 	ldw	r4,-8(fp)
   3afc0:	01400174 	movhi	r5,5
   3afc4:	297be304 	addi	r5,r5,-4212
   3afc8:	e1bffc17 	ldw	r6,-16(fp)
   3afcc:	800f883a 	mov	r7,r16
   3afd0:	002694c0 	call	2694c <ns_printf>
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
   3afd4:	e0bffd17 	ldw	r2,-12(fp)
   3afd8:	10800c17 	ldw	r2,48(r2)
   3afdc:	1009883a 	mov	r4,r2
   3afe0:	00265840 	call	26584 <print_ipad>
   3afe4:	e13ffe17 	ldw	r4,-8(fp)
   3afe8:	01400174 	movhi	r5,5
   3afec:	297bea04 	addi	r5,r5,-4184
   3aff0:	100d883a 	mov	r6,r2
   3aff4:	002694c0 	call	2694c <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
   3aff8:	e0bffd17 	ldw	r2,-12(fp)
   3affc:	10800d17 	ldw	r2,52(r2)
   3b000:	1009883a 	mov	r4,r2
   3b004:	00265840 	call	26584 <print_ipad>
   3b008:	e13ffe17 	ldw	r4,-8(fp)
   3b00c:	01400174 	movhi	r5,5
   3b010:	297bed04 	addi	r5,r5,-4172
   3b014:	100d883a 	mov	r6,r2
   3b018:	002694c0 	call	2694c <ns_printf>
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
   3b01c:	e0bffd17 	ldw	r2,-12(fp)
   3b020:	10800017 	ldw	r2,0(r2)
   3b024:	e0bffd15 	stw	r2,-12(fp)
   3b028:	e0bffc17 	ldw	r2,-16(fp)
   3b02c:	10800044 	addi	r2,r2,1
   3b030:	e0bffc15 	stw	r2,-16(fp)
   3b034:	e0bffd17 	ldw	r2,-12(fp)
   3b038:	103fd91e 	bne	r2,zero,3afa0 <__alt_mem_descriptor_memory+0xdeffafa0>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
   3b03c:	00800174 	movhi	r2,5
   3b040:	108fbe04 	addi	r2,r2,16120
   3b044:	10800017 	ldw	r2,0(r2)
   3b048:	e13ffe17 	ldw	r4,-8(fp)
   3b04c:	01400174 	movhi	r5,5
   3b050:	297bf004 	addi	r5,r5,-4160
   3b054:	100d883a 	mov	r6,r2
   3b058:	002694c0 	call	2694c <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
   3b05c:	d0e04a17 	ldw	r3,-32472(gp)
   3b060:	d0a04a17 	ldw	r2,-32472(gp)
   3b064:	108002a4 	muli	r2,r2,10
   3b068:	e13ffe17 	ldw	r4,-8(fp)
   3b06c:	01400174 	movhi	r5,5
   3b070:	297bf604 	addi	r5,r5,-4136
   3b074:	180d883a 	mov	r6,r3
   3b078:	100f883a 	mov	r7,r2
   3b07c:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
   3b080:	d0a8a617 	ldw	r2,-23912(gp)
   3b084:	1009883a 	mov	r4,r2
   3b088:	00265840 	call	26584 <print_ipad>
   3b08c:	e13ffe17 	ldw	r4,-8(fp)
   3b090:	01400174 	movhi	r5,5
   3b094:	297c0204 	addi	r5,r5,-4088
   3b098:	100d883a 	mov	r6,r2
   3b09c:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
   3b0a0:	d0a04b17 	ldw	r2,-32468(gp)
   3b0a4:	e13ffe17 	ldw	r4,-8(fp)
   3b0a8:	01400174 	movhi	r5,5
   3b0ac:	297c0904 	addi	r5,r5,-4060
   3b0b0:	100d883a 	mov	r6,r2
   3b0b4:	002694c0 	call	2694c <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
   3b0b8:	e13ffe17 	ldw	r4,-8(fp)
   3b0bc:	003b65c0 	call	3b65c <task_stats>

   return 0;
   3b0c0:	0005883a 	mov	r2,zero
}
   3b0c4:	e6ffff04 	addi	sp,fp,-4
   3b0c8:	dfc00217 	ldw	ra,8(sp)
   3b0cc:	df000117 	ldw	fp,4(sp)
   3b0d0:	dc000017 	ldw	r16,0(sp)
   3b0d4:	dec00304 	addi	sp,sp,12
   3b0d8:	f800283a 	ret

0003b0dc <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
   3b0dc:	defffe04 	addi	sp,sp,-8
   3b0e0:	dfc00115 	stw	ra,4(sp)
   3b0e4:	df000015 	stw	fp,0(sp)
   3b0e8:	d839883a 	mov	fp,sp
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
   3b0ec:	00800174 	movhi	r2,5
   3b0f0:	108fbe04 	addi	r2,r2,16120
   3b0f4:	10800017 	ldw	r2,0(r2)
   3b0f8:	1009883a 	mov	r4,r2
   3b0fc:	01401904 	movi	r5,100
   3b100:	00152500 	call	15250 <__udivsi3>
   3b104:	10801924 	muli	r2,r2,100
}
   3b108:	e037883a 	mov	sp,fp
   3b10c:	dfc00117 	ldw	ra,4(sp)
   3b110:	df000017 	ldw	fp,0(sp)
   3b114:	dec00204 	addi	sp,sp,8
   3b118:	f800283a 	ret

0003b11c <packet_check>:

static int inside_pktdemux = 0; 

void
packet_check(void)
{
   3b11c:	defffe04 	addi	sp,sp,-8
   3b120:	dfc00115 	stw	ra,4(sp)
   3b124:	df000015 	stw	fp,0(sp)
   3b128:	d839883a 	mov	fp,sp
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
   3b12c:	d0a8a717 	ldw	r2,-23908(gp)
   3b130:	10000126 	beq	r2,zero,3b138 <packet_check+0x1c>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   3b134:	00000706 	br	3b154 <packet_check+0x38>
   inside_pktdemux++;   /* set re-entrany flag */
   3b138:	d0a8a717 	ldw	r2,-23908(gp)
   3b13c:	10800044 	addi	r2,r2,1
   3b140:	d0a8a715 	stw	r2,-23908(gp)
   pktdemux();          /* process low level packet input */
   3b144:	0023e3c0 	call	23e3c <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
   3b148:	d0a8a717 	ldw	r2,-23908(gp)
   3b14c:	10bfffc4 	addi	r2,r2,-1
   3b150:	d0a8a715 	stw	r2,-23908(gp)
}
   3b154:	e037883a 	mov	sp,fp
   3b158:	dfc00117 	ldw	ra,4(sp)
   3b15c:	df000017 	ldw	fp,0(sp)
   3b160:	dec00204 	addi	sp,sp,8
   3b164:	f800283a 	ret

0003b168 <mcastlist>:
 * RETURNS: 
 */

int
mcastlist(struct in_multi * multi_ptr)
{
   3b168:	defffe04 	addi	sp,sp,-8
   3b16c:	df000115 	stw	fp,4(sp)
   3b170:	df000104 	addi	fp,sp,4
   3b174:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(multi_ptr);

   return 0;
   3b178:	0005883a 	mov	r2,zero
}
   3b17c:	e037883a 	mov	sp,fp
   3b180:	df000017 	ldw	fp,0(sp)
   3b184:	dec00104 	addi	sp,sp,4
   3b188:	f800283a 	ret

0003b18c <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
   3b18c:	defffd04 	addi	sp,sp,-12
   3b190:	dfc00215 	stw	ra,8(sp)
   3b194:	df000115 	stw	fp,4(sp)
   3b198:	df000104 	addi	fp,sp,4
#ifdef IP_V6
   ip6_addr host;
   int i;
#endif

int e = 0;
   3b19c:	e03fff15 	stw	zero,-4(fp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
   3b1a0:	0047f540 	call	47f54 <prep_vfs>
   3b1a4:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0)
   3b1a8:	e0bfff17 	ldw	r2,-4(fp)
   3b1ac:	10000626 	beq	r2,zero,3b1c8 <prep_modules+0x3c>
   {
      dprintf("VFS Module prep failed\n");
   3b1b0:	01000174 	movhi	r4,5
   3b1b4:	213c1104 	addi	r4,r4,-4028
   3b1b8:	00083740 	call	8374 <puts>
      panic("prep_modules");
   3b1bc:	01000174 	movhi	r4,5
   3b1c0:	213c1704 	addi	r4,r4,-4004
   3b1c4:	00267380 	call	26738 <panic>
   {
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
   3b1c8:	0005883a 	mov	r2,zero
}
   3b1cc:	e037883a 	mov	sp,fp
   3b1d0:	dfc00117 	ldw	ra,4(sp)
   3b1d4:	df000017 	ldw	fp,0(sp)
   3b1d8:	dec00204 	addi	sp,sp,8
   3b1dc:	f800283a 	ret

0003b1e0 <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
   3b1e0:	defffe04 	addi	sp,sp,-8
   3b1e4:	dfc00115 	stw	ra,4(sp)
   3b1e8:	df000015 	stw	fp,0(sp)
   3b1ec:	d839883a 	mov	fp,sp
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
   3b1f0:	00800174 	movhi	r2,5
   3b1f4:	108fdf04 	addi	r2,r2,16252
   3b1f8:	10c00017 	ldw	r3,0(r2)
   3b1fc:	00800174 	movhi	r2,5
   3b200:	108fbe04 	addi	r2,r2,16120
   3b204:	10800017 	ldw	r2,0(r2)
   3b208:	1880012e 	bgeu	r3,r2,3b210 <inet_timer+0x30>
      ip_reasm_process_timer_tick ();
   3b20c:	00403140 	call	40314 <ip_reasm_process_timer_tick>
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
   3b210:	002d56c0 	call	2d56c <tcp_tick>
#endif

#ifdef INICHE_TIMERS    /* interval timers? */
   check_interval_timers();
   3b214:	003b2a00 	call	3b2a0 <check_interval_timers>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
   3b218:	00800174 	movhi	r2,5
   3b21c:	108f9d04 	addi	r2,r2,15988
   3b220:	10c00017 	ldw	r3,0(r2)
   3b224:	00800174 	movhi	r2,5
   3b228:	108fbe04 	addi	r2,r2,16120
   3b22c:	10800017 	ldw	r2,0(r2)
   3b230:	1880012e 	bgeu	r3,r2,3b238 <inet_timer+0x58>
      igmp_fasttimo();
   3b234:	0024a100 	call	24a10 <igmp_fasttimo>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
   3b238:	d0e8a817 	ldw	r3,-23904(gp)
   3b23c:	00800174 	movhi	r2,5
   3b240:	108fbe04 	addi	r2,r2,16120
   3b244:	10800017 	ldw	r2,0(r2)
   3b248:	18800636 	bltu	r3,r2,3b264 <inet_timer+0x84>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   3b24c:	00800174 	movhi	r2,5
   3b250:	108fbe04 	addi	r2,r2,16120
   3b254:	10800017 	ldw	r2,0(r2)
   3b258:	10c0fa04 	addi	r3,r2,1000
   3b25c:	d0a8a817 	ldw	r2,-23904(gp)
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
   3b260:	18800a2e 	bgeu	r3,r2,3b28c <inet_timer+0xac>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   {
      nextppp = cticks + TPS;
   3b264:	00800174 	movhi	r2,5
   3b268:	108fbe04 	addi	r2,r2,16120
   3b26c:	10800017 	ldw	r2,0(r2)
   3b270:	10801904 	addi	r2,r2,100
   3b274:	d0a8a815 	stw	r2,-23904(gp)

      if (port_1s_callout != NULL)
   3b278:	d0a8a917 	ldw	r2,-23900(gp)
   3b27c:	10000226 	beq	r2,zero,3b288 <inet_timer+0xa8>
         (*port_1s_callout)();
   3b280:	d0a8a917 	ldw	r2,-23900(gp)
   3b284:	103ee83a 	callr	r2

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
   3b288:	00298580 	call	29858 <dhc_second>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
   3b28c:	e037883a 	mov	sp,fp
   3b290:	dfc00117 	ldw	ra,4(sp)
   3b294:	df000017 	ldw	fp,0(sp)
   3b298:	dec00204 	addi	sp,sp,8
   3b29c:	f800283a 	ret

0003b2a0 <check_interval_timers>:

static int numtimers = 0;     /* number of active timers */

static void
check_interval_timers(void)
{
   3b2a0:	defffc04 	addi	sp,sp,-16
   3b2a4:	dfc00315 	stw	ra,12(sp)
   3b2a8:	df000215 	stw	fp,8(sp)
   3b2ac:	df000204 	addi	fp,sp,8
   int   i;
   int   found = 0;  /* number of valid timers found */
   3b2b0:	e03fff15 	stw	zero,-4(fp)

   /* if no timers, just return */
   if (numtimers > 0)
   3b2b4:	d0a8aa17 	ldw	r2,-23896(gp)
   3b2b8:	0080590e 	bge	zero,r2,3b420 <check_interval_timers+0x180>
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
   3b2bc:	e03ffe15 	stw	zero,-8(fp)
   3b2c0:	00005406 	br	3b414 <check_interval_timers+0x174>
      {
         if (intimers[i].callback)   /* is this timer active? */
   3b2c4:	008001b4 	movhi	r2,6
   3b2c8:	10b98304 	addi	r2,r2,-6644
   3b2cc:	e0fffe17 	ldw	r3,-8(fp)
   3b2d0:	18c00524 	muli	r3,r3,20
   3b2d4:	10c5883a 	add	r2,r2,r3
   3b2d8:	10800017 	ldw	r2,0(r2)
   3b2dc:	10004a26 	beq	r2,zero,3b408 <check_interval_timers+0x168>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
   3b2e0:	008001b4 	movhi	r2,6
   3b2e4:	10b98304 	addi	r2,r2,-6644
   3b2e8:	e0fffe17 	ldw	r3,-8(fp)
   3b2ec:	18c00524 	muli	r3,r3,20
   3b2f0:	10c5883a 	add	r2,r2,r3
   3b2f4:	10800304 	addi	r2,r2,12
   3b2f8:	10c00017 	ldw	r3,0(r2)
   3b2fc:	00800174 	movhi	r2,5
   3b300:	108fbe04 	addi	r2,r2,16120
   3b304:	10800017 	ldw	r2,0(r2)
   3b308:	1880382e 	bgeu	r3,r2,3b3ec <check_interval_timers+0x14c>
   3b30c:	008001b4 	movhi	r2,6
   3b310:	10b98304 	addi	r2,r2,-6644
   3b314:	e0fffe17 	ldw	r3,-8(fp)
   3b318:	18c00524 	muli	r3,r3,20
   3b31c:	10c5883a 	add	r2,r2,r3
   3b320:	10800404 	addi	r2,r2,16
   3b324:	10800017 	ldw	r2,0(r2)
   3b328:	1000301e 	bne	r2,zero,3b3ec <check_interval_timers+0x14c>
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
   3b32c:	008001b4 	movhi	r2,6
   3b330:	10b98304 	addi	r2,r2,-6644
   3b334:	e0fffe17 	ldw	r3,-8(fp)
   3b338:	18c00524 	muli	r3,r3,20
   3b33c:	10c5883a 	add	r2,r2,r3
   3b340:	10800204 	addi	r2,r2,8
   3b344:	10c00017 	ldw	r3,0(r2)
   3b348:	00800174 	movhi	r2,5
   3b34c:	108fbe04 	addi	r2,r2,16120
   3b350:	10800017 	ldw	r2,0(r2)
   3b354:	1887883a 	add	r3,r3,r2
   3b358:	008001b4 	movhi	r2,6
   3b35c:	10b98304 	addi	r2,r2,-6644
   3b360:	e13ffe17 	ldw	r4,-8(fp)
   3b364:	21000524 	muli	r4,r4,20
   3b368:	1105883a 	add	r2,r2,r4
   3b36c:	10800304 	addi	r2,r2,12
   3b370:	10c00015 	stw	r3,0(r2)
               intimers[i].inuse = TRUE;
   3b374:	008001b4 	movhi	r2,6
   3b378:	10b98304 	addi	r2,r2,-6644
   3b37c:	e0fffe17 	ldw	r3,-8(fp)
   3b380:	18c00524 	muli	r3,r3,20
   3b384:	10c5883a 	add	r2,r2,r3
   3b388:	10800404 	addi	r2,r2,16
   3b38c:	00c00044 	movi	r3,1
   3b390:	10c00015 	stw	r3,0(r2)
               intimers[i].callback(intimers[i].parm);      /* call user routine */
   3b394:	008001b4 	movhi	r2,6
   3b398:	10b98304 	addi	r2,r2,-6644
   3b39c:	e0fffe17 	ldw	r3,-8(fp)
   3b3a0:	18c00524 	muli	r3,r3,20
   3b3a4:	10c5883a 	add	r2,r2,r3
   3b3a8:	10c00017 	ldw	r3,0(r2)
   3b3ac:	008001b4 	movhi	r2,6
   3b3b0:	10b98304 	addi	r2,r2,-6644
   3b3b4:	e13ffe17 	ldw	r4,-8(fp)
   3b3b8:	21000524 	muli	r4,r4,20
   3b3bc:	1105883a 	add	r2,r2,r4
   3b3c0:	10800104 	addi	r2,r2,4
   3b3c4:	10800017 	ldw	r2,0(r2)
   3b3c8:	1009883a 	mov	r4,r2
   3b3cc:	183ee83a 	callr	r3
               intimers[i].inuse = FALSE;
   3b3d0:	008001b4 	movhi	r2,6
   3b3d4:	10b98304 	addi	r2,r2,-6644
   3b3d8:	e0fffe17 	ldw	r3,-8(fp)
   3b3dc:	18c00524 	muli	r3,r3,20
   3b3e0:	10c5883a 	add	r2,r2,r3
   3b3e4:	10800404 	addi	r2,r2,16
   3b3e8:	10000015 	stw	zero,0(r2)
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
   3b3ec:	e0bfff17 	ldw	r2,-4(fp)
   3b3f0:	10800044 	addi	r2,r2,1
   3b3f4:	e0bfff15 	stw	r2,-4(fp)
   3b3f8:	d0a8aa17 	ldw	r2,-23896(gp)
   3b3fc:	e0ffff17 	ldw	r3,-4(fp)
   3b400:	18800116 	blt	r3,r2,3b408 <check_interval_timers+0x168>
               break;
   3b404:	00000606 	br	3b420 <check_interval_timers+0x180>

   /* if no timers, just return */
   if (numtimers > 0)
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
   3b408:	e0bffe17 	ldw	r2,-8(fp)
   3b40c:	10800044 	addi	r2,r2,1
   3b410:	e0bffe15 	stw	r2,-8(fp)
   3b414:	e0bffe17 	ldw	r2,-8(fp)
   3b418:	10800150 	cmplti	r2,r2,5
   3b41c:	103fa91e 	bne	r2,zero,3b2c4 <__alt_mem_descriptor_memory+0xdeffb2c4>
            if (++found >= numtimers)
               break;
         }
      }
   }
}
   3b420:	e037883a 	mov	sp,fp
   3b424:	dfc00117 	ldw	ra,4(sp)
   3b428:	df000017 	ldw	fp,0(sp)
   3b42c:	dec00204 	addi	sp,sp,8
   3b430:	f800283a 	ret

0003b434 <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   3b434:	defffa04 	addi	sp,sp,-24
   3b438:	dfc00515 	stw	ra,20(sp)
   3b43c:	df000415 	stw	fp,16(sp)
   3b440:	df000404 	addi	fp,sp,16
   3b444:	e13ffd15 	stw	r4,-12(fp)
   3b448:	e17ffe15 	stw	r5,-8(fp)
   3b44c:	e1bfff15 	stw	r6,-4(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
   3b450:	e03ffc15 	stw	zero,-16(fp)
   3b454:	00004806 	br	3b578 <in_timerset+0x144>
   {
      if(intimers[i].callback == NULL)
   3b458:	008001b4 	movhi	r2,6
   3b45c:	10b98304 	addi	r2,r2,-6644
   3b460:	e0fffc17 	ldw	r3,-16(fp)
   3b464:	18c00524 	muli	r3,r3,20
   3b468:	10c5883a 	add	r2,r2,r3
   3b46c:	10800017 	ldw	r2,0(r2)
   3b470:	10003e1e 	bne	r2,zero,3b56c <in_timerset+0x138>
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
   3b474:	008001b4 	movhi	r2,6
   3b478:	10b98304 	addi	r2,r2,-6644
   3b47c:	e0fffc17 	ldw	r3,-16(fp)
   3b480:	18c00524 	muli	r3,r3,20
   3b484:	10c5883a 	add	r2,r2,r3
   3b488:	e0fffd17 	ldw	r3,-12(fp)
   3b48c:	10c00015 	stw	r3,0(r2)
         intimers[i].parm = parm;
   3b490:	008001b4 	movhi	r2,6
   3b494:	10b98304 	addi	r2,r2,-6644
   3b498:	e0fffc17 	ldw	r3,-16(fp)
   3b49c:	18c00524 	muli	r3,r3,20
   3b4a0:	10c5883a 	add	r2,r2,r3
   3b4a4:	10800104 	addi	r2,r2,4
   3b4a8:	e0ffff17 	ldw	r3,-4(fp)
   3b4ac:	10c00015 	stw	r3,0(r2)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
   3b4b0:	e0bffe17 	ldw	r2,-8(fp)
   3b4b4:	10801924 	muli	r2,r2,100
   3b4b8:	1009883a 	mov	r4,r2
   3b4bc:	0140fa04 	movi	r5,1000
   3b4c0:	00151a00 	call	151a0 <__divsi3>
   3b4c4:	1009883a 	mov	r4,r2
   3b4c8:	008001b4 	movhi	r2,6
   3b4cc:	10b98304 	addi	r2,r2,-6644
   3b4d0:	e0fffc17 	ldw	r3,-16(fp)
   3b4d4:	18c00524 	muli	r3,r3,20
   3b4d8:	10c5883a 	add	r2,r2,r3
   3b4dc:	10800204 	addi	r2,r2,8
   3b4e0:	11000015 	stw	r4,0(r2)
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
   3b4e4:	008001b4 	movhi	r2,6
   3b4e8:	10b98304 	addi	r2,r2,-6644
   3b4ec:	e0fffc17 	ldw	r3,-16(fp)
   3b4f0:	18c00524 	muli	r3,r3,20
   3b4f4:	10c5883a 	add	r2,r2,r3
   3b4f8:	10800204 	addi	r2,r2,8
   3b4fc:	10c00017 	ldw	r3,0(r2)
   3b500:	00800174 	movhi	r2,5
   3b504:	108fbe04 	addi	r2,r2,16120
   3b508:	10800017 	ldw	r2,0(r2)
   3b50c:	1887883a 	add	r3,r3,r2
   3b510:	008001b4 	movhi	r2,6
   3b514:	10b98304 	addi	r2,r2,-6644
   3b518:	e13ffc17 	ldw	r4,-16(fp)
   3b51c:	21000524 	muli	r4,r4,20
   3b520:	1105883a 	add	r2,r2,r4
   3b524:	10800304 	addi	r2,r2,12
   3b528:	10c00015 	stw	r3,0(r2)
		 intimers[i].inuse = FALSE;
   3b52c:	008001b4 	movhi	r2,6
   3b530:	10b98304 	addi	r2,r2,-6644
   3b534:	e0fffc17 	ldw	r3,-16(fp)
   3b538:	18c00524 	muli	r3,r3,20
   3b53c:	10c5883a 	add	r2,r2,r3
   3b540:	10800404 	addi	r2,r2,16
   3b544:	10000015 	stw	zero,0(r2)
         numtimers++;
   3b548:	d0a8aa17 	ldw	r2,-23896(gp)
   3b54c:	10800044 	addi	r2,r2,1
   3b550:	d0a8aa15 	stw	r2,-23896(gp)
         return (long)&intimers[i];
   3b554:	e0bffc17 	ldw	r2,-16(fp)
   3b558:	10c00524 	muli	r3,r2,20
   3b55c:	008001b4 	movhi	r2,6
   3b560:	10b98304 	addi	r2,r2,-6644
   3b564:	1885883a 	add	r2,r3,r2
   3b568:	00000706 	br	3b588 <in_timerset+0x154>
long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
   3b56c:	e0bffc17 	ldw	r2,-16(fp)
   3b570:	10800044 	addi	r2,r2,1
   3b574:	e0bffc15 	stw	r2,-16(fp)
   3b578:	e0bffc17 	ldw	r2,-16(fp)
   3b57c:	10800150 	cmplti	r2,r2,5
   3b580:	103fb51e 	bne	r2,zero,3b458 <__alt_mem_descriptor_memory+0xdeffb458>
		 intimers[i].inuse = FALSE;
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
   3b584:	0005883a 	mov	r2,zero
}
   3b588:	e037883a 	mov	sp,fp
   3b58c:	dfc00117 	ldw	ra,4(sp)
   3b590:	df000017 	ldw	fp,0(sp)
   3b594:	dec00204 	addi	sp,sp,8
   3b598:	f800283a 	ret

0003b59c <in_timerkill>:
 */


int
in_timerkill(long timer)
{
   3b59c:	defffc04 	addi	sp,sp,-16
   3b5a0:	dfc00315 	stw	ra,12(sp)
   3b5a4:	df000215 	stw	fp,8(sp)
   3b5a8:	df000204 	addi	fp,sp,8
   3b5ac:	e13fff15 	stw	r4,-4(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
   3b5b0:	e03ffe15 	stw	zero,-8(fp)
   3b5b4:	00001606 	br	3b610 <in_timerkill+0x74>
   {
      if(timer == (long)&intimers[i])
   3b5b8:	e0bffe17 	ldw	r2,-8(fp)
   3b5bc:	10c00524 	muli	r3,r2,20
   3b5c0:	008001b4 	movhi	r2,6
   3b5c4:	10b98304 	addi	r2,r2,-6644
   3b5c8:	1885883a 	add	r2,r3,r2
   3b5cc:	1007883a 	mov	r3,r2
   3b5d0:	e0bfff17 	ldw	r2,-4(fp)
   3b5d4:	18800b1e 	bne	r3,r2,3b604 <in_timerkill+0x68>
      {
         intimers[i].callback = NULL;
   3b5d8:	008001b4 	movhi	r2,6
   3b5dc:	10b98304 	addi	r2,r2,-6644
   3b5e0:	e0fffe17 	ldw	r3,-8(fp)
   3b5e4:	18c00524 	muli	r3,r3,20
   3b5e8:	10c5883a 	add	r2,r2,r3
   3b5ec:	10000015 	stw	zero,0(r2)
         numtimers--;
   3b5f0:	d0a8aa17 	ldw	r2,-23896(gp)
   3b5f4:	10bfffc4 	addi	r2,r2,-1
   3b5f8:	d0a8aa15 	stw	r2,-23896(gp)
         return 0;      /* OK return */
   3b5fc:	0005883a 	mov	r2,zero
   3b600:	00000806 	br	3b624 <in_timerkill+0x88>
int
in_timerkill(long timer)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
   3b604:	e0bffe17 	ldw	r2,-8(fp)
   3b608:	10800044 	addi	r2,r2,1
   3b60c:	e0bffe15 	stw	r2,-8(fp)
   3b610:	e0bffe17 	ldw	r2,-8(fp)
   3b614:	10800150 	cmplti	r2,r2,5
   3b618:	103fe71e 	bne	r2,zero,3b5b8 <__alt_mem_descriptor_memory+0xdeffb5b8>
         intimers[i].callback = NULL;
         numtimers--;
         return 0;      /* OK return */
      }
   }
   dtrap();    /* timer to kill not found */
   3b61c:	002b0f40 	call	2b0f4 <dtrap>
   return ENP_PARAM;
   3b620:	00bffd84 	movi	r2,-10
}
   3b624:	e037883a 	mov	sp,fp
   3b628:	dfc00117 	ldw	ra,4(sp)
   3b62c:	df000017 	ldw	fp,0(sp)
   3b630:	dec00204 	addi	sp,sp,8
   3b634:	f800283a 	ret

0003b638 <create_apptasks>:
#endif
/* per-application thread definitions */

int
create_apptasks(void)
{
   3b638:	defffe04 	addi	sp,sp,-8
   3b63c:	df000115 	stw	fp,4(sp)
   3b640:	df000104 	addi	fp,sp,4
int e = 0;
   3b644:	e03fff15 	stw	zero,-4(fp)
#endif
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
   3b648:	e0bfff17 	ldw	r2,-4(fp)
}
   3b64c:	e037883a 	mov	sp,fp
   3b650:	df000017 	ldw	fp,0(sp)
   3b654:	dec00104 	addi	sp,sp,4
   3b658:	f800283a 	ret

0003b65c <task_stats>:
 */


void
task_stats(void * pio)
{
   3b65c:	defffd04 	addi	sp,sp,-12
   3b660:	dfc00215 	stw	ra,8(sp)
   3b664:	df000115 	stw	fp,4(sp)
   3b668:	df000104 	addi	fp,sp,4
   3b66c:	e13fff15 	stw	r4,-4(fp)
   ns_printf(pio, "Task wakeups:");
   3b670:	e13fff17 	ldw	r4,-4(fp)
   3b674:	01400174 	movhi	r5,5
   3b678:	297c1b04 	addi	r5,r5,-3988
   3b67c:	002694c0 	call	2694c <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
   3b680:	00800174 	movhi	r2,5
   3b684:	108fa004 	addi	r2,r2,16000
   3b688:	10800017 	ldw	r2,0(r2)
   3b68c:	e13fff17 	ldw	r4,-4(fp)
   3b690:	01400174 	movhi	r5,5
   3b694:	297c1f04 	addi	r5,r5,-3972
   3b698:	100d883a 	mov	r6,r2
   3b69c:	002694c0 	call	2694c <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
   3b6a0:	00800174 	movhi	r2,5
   3b6a4:	108fa104 	addi	r2,r2,16004
   3b6a8:	10800017 	ldw	r2,0(r2)
   3b6ac:	e13fff17 	ldw	r4,-4(fp)
   3b6b0:	01400174 	movhi	r5,5
   3b6b4:	297c2304 	addi	r5,r5,-3956
   3b6b8:	100d883a 	mov	r6,r2
   3b6bc:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
   3b6c0:	e13fff17 	ldw	r4,-4(fp)
   3b6c4:	01400174 	movhi	r5,5
   3b6c8:	297c2704 	addi	r5,r5,-3940
   3b6cc:	002694c0 	call	2694c <ns_printf>
}
   3b6d0:	e037883a 	mov	sp,fp
   3b6d4:	dfc00117 	ldw	ra,4(sp)
   3b6d8:	df000017 	ldw	fp,0(sp)
   3b6dc:	dec00204 	addi	sp,sp,8
   3b6e0:	f800283a 	ret

0003b6e4 <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
   3b6e4:	defff804 	addi	sp,sp,-32
   3b6e8:	dfc00515 	stw	ra,20(sp)
   3b6ec:	df000415 	stw	fp,16(sp)
   3b6f0:	df000404 	addi	fp,sp,16
   3b6f4:	e13ffe15 	stw	r4,-8(fp)
   3b6f8:	e1800215 	stw	r6,8(fp)
   3b6fc:	e1c00315 	stw	r7,12(fp)
   3b700:	e17fff15 	stw	r5,-4(fp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
   3b704:	e0bffe17 	ldw	r2,-8(fp)
   3b708:	10800808 	cmpgei	r2,r2,32
   3b70c:	10000c1e 	bne	r2,zero,3b740 <fcntl+0x5c>
  {
    va_start(argp, cmd);
   3b710:	e0800204 	addi	r2,fp,8
   3b714:	e0bffd15 	stw	r2,-12(fp)
    flags = va_arg(argp, long);
   3b718:	e0bffd17 	ldw	r2,-12(fp)
   3b71c:	10c00104 	addi	r3,r2,4
   3b720:	e0fffd15 	stw	r3,-12(fp)
   3b724:	10800017 	ldw	r2,0(r2)
   3b728:	e0bffc15 	stw	r2,-16(fp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
   3b72c:	e13ffe17 	ldw	r4,-8(fp)
   3b730:	e17fff17 	ldw	r5,-4(fp)
   3b734:	e1bffc17 	ldw	r6,-16(fp)
   3b738:	0047fc80 	call	47fc8 <alt_fcntl>
   3b73c:	00000c06 	br	3b770 <fcntl+0x8c>
  }
  else
  {
    va_start(argp, cmd);
   3b740:	e0800204 	addi	r2,fp,8
   3b744:	e0bffd15 	stw	r2,-12(fp)
    flags = va_arg(argp, long);
   3b748:	e0bffd17 	ldw	r2,-12(fp)
   3b74c:	10c00104 	addi	r3,r2,4
   3b750:	e0fffd15 	stw	r3,-12(fp)
   3b754:	10800017 	ldw	r2,0(r2)
   3b758:	e0bffc15 	stw	r2,-16(fp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
   3b75c:	e0bfff17 	ldw	r2,-4(fp)
   3b760:	e13ffe17 	ldw	r4,-8(fp)
   3b764:	100b883a 	mov	r5,r2
   3b768:	e1bffc17 	ldw	r6,-16(fp)
   3b76c:	0025ddc0 	call	25ddc <bsd_ioctl>
  }
}
   3b770:	e037883a 	mov	sp,fp
   3b774:	dfc00117 	ldw	ra,4(sp)
   3b778:	df000017 	ldw	fp,0(sp)
   3b77c:	dec00404 	addi	sp,sp,16
   3b780:	f800283a 	ret

0003b784 <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
   3b784:	defffe04 	addi	sp,sp,-8
   3b788:	dfc00115 	stw	ra,4(sp)
   3b78c:	df000015 	stw	fp,0(sp)
   3b790:	d839883a 	mov	fp,sp
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
   3b794:	01018204 	movi	r4,1544
   3b798:	003ccd40 	call	3ccd4 <reg_type>
   3b79c:	10000526 	beq	r2,zero,3b7b4 <etainit+0x30>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
   3b7a0:	01000174 	movhi	r4,5
   3b7a4:	213c2804 	addi	r4,r4,-3936
   3b7a8:	00083740 	call	8374 <puts>
#endif
      return (1);
   3b7ac:	00800044 	movi	r2,1
   3b7b0:	00000106 	br	3b7b8 <etainit+0x34>
   }
   return (0);
   3b7b4:	0005883a 	mov	r2,zero
}
   3b7b8:	e037883a 	mov	sp,fp
   3b7bc:	dfc00117 	ldw	ra,4(sp)
   3b7c0:	df000017 	ldw	fp,0(sp)
   3b7c4:	dec00204 	addi	sp,sp,8
   3b7c8:	f800283a 	ret

0003b7cc <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
   3b7cc:	defff904 	addi	sp,sp,-28
   3b7d0:	dfc00615 	stw	ra,24(sp)
   3b7d4:	df000515 	stw	fp,20(sp)
   3b7d8:	df000504 	addi	fp,sp,20
   3b7dc:	e13ffe15 	stw	r4,-8(fp)
   3b7e0:	e17fff15 	stw	r5,-4(fp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   3b7e4:	e0bffe17 	ldw	r2,-8(fp)
   3b7e8:	10800617 	ldw	r2,24(r2)
   3b7ec:	10802717 	ldw	r2,156(r2)
   3b7f0:	e0bffc15 	stw	r2,-16(fp)
   int err;

   tp->lasttime = cticks;
   3b7f4:	00800174 	movhi	r2,5
   3b7f8:	108fbe04 	addi	r2,r2,16120
   3b7fc:	10c00017 	ldw	r3,0(r2)
   3b800:	e0bfff17 	ldw	r2,-4(fp)
   3b804:	10c00615 	stw	r3,24(r2)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
   3b808:	e0bffe17 	ldw	r2,-8(fp)
   3b80c:	10800317 	ldw	r2,12(r2)
   3b810:	10fffc04 	addi	r3,r2,-16
   3b814:	e0bffe17 	ldw	r2,-8(fp)
   3b818:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen += ETHHDR_SIZE;
   3b81c:	e0bffe17 	ldw	r2,-8(fp)
   3b820:	10800417 	ldw	r2,16(r2)
   3b824:	10c00404 	addi	r3,r2,16
   3b828:	e0bffe17 	ldw	r2,-8(fp)
   3b82c:	10c00415 	stw	r3,16(r2)
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
   3b830:	e0bffe17 	ldw	r2,-8(fp)
   3b834:	10800317 	ldw	r2,12(r2)
   3b838:	10800084 	addi	r2,r2,2
   3b83c:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
   3b840:	e0bffe17 	ldw	r2,-8(fp)
   3b844:	10800117 	ldw	r2,4(r2)
   3b848:	e0fffd17 	ldw	r3,-12(fp)
   3b84c:	1880032e 	bgeu	r3,r2,3b85c <et_send+0x90>
      panic("et_send: prepend");
   3b850:	01000174 	movhi	r4,5
   3b854:	213c3404 	addi	r4,r4,-3888
   3b858:	00267380 	call	26738 <panic>

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
   3b85c:	e0bfff17 	ldw	r2,-4(fp)
   3b860:	10800104 	addi	r2,r2,4
   3b864:	e13ffd17 	ldw	r4,-12(fp)
   3b868:	100b883a 	mov	r5,r2
   3b86c:	01800184 	movi	r6,6
   3b870:	0007dc80 	call	7dc8 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
   3b874:	e0bffd17 	ldw	r2,-12(fp)
   3b878:	10c00184 	addi	r3,r2,6
   3b87c:	e0bffc17 	ldw	r2,-16(fp)
   3b880:	10800517 	ldw	r2,20(r2)
   3b884:	1809883a 	mov	r4,r3
   3b888:	100b883a 	mov	r5,r2
   3b88c:	01800184 	movi	r6,6
   3b890:	0007dc80 	call	7dc8 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
   3b894:	e0bfff17 	ldw	r2,-4(fp)
   3b898:	1080070b 	ldhu	r2,28(r2)
   3b89c:	10bfffcc 	andi	r2,r2,65535
   3b8a0:	108000cc 	andi	r2,r2,3
   3b8a4:	108000a0 	cmpeqi	r2,r2,2
   3b8a8:	1000041e 	bne	r2,zero,3b8bc <et_send+0xf0>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
   3b8ac:	e0bffd17 	ldw	r2,-12(fp)
   3b8b0:	10800304 	addi	r2,r2,12
   3b8b4:	00c00204 	movi	r3,8
   3b8b8:	10c00005 	stb	r3,0(r2)
   3b8bc:	e0bffd17 	ldw	r2,-12(fp)
   3b8c0:	10800344 	addi	r2,r2,13
   3b8c4:	10000005 	stb	zero,0(r2)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
   3b8c8:	e0bffe17 	ldw	r2,-8(fp)
   3b8cc:	10800617 	ldw	r2,24(r2)
   3b8d0:	10800417 	ldw	r2,16(r2)
   3b8d4:	10000726 	beq	r2,zero,3b8f4 <et_send+0x128>
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
   3b8d8:	e0bffe17 	ldw	r2,-8(fp)
   3b8dc:	10800617 	ldw	r2,24(r2)
   3b8e0:	10800417 	ldw	r2,16(r2)
   3b8e4:	e13ffe17 	ldw	r4,-8(fp)
   3b8e8:	103ee83a 	callr	r2
   3b8ec:	e0bffb15 	stw	r2,-20(fp)
   3b8f0:	00001206 	br	3b93c <et_send+0x170>
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
   3b8f4:	e0bffe17 	ldw	r2,-8(fp)
   3b8f8:	10800617 	ldw	r2,24(r2)
   3b8fc:	10800317 	ldw	r2,12(r2)
   3b900:	e0fffe17 	ldw	r3,-8(fp)
   3b904:	19000617 	ldw	r4,24(r3)
   3b908:	e0fffe17 	ldw	r3,-8(fp)
   3b90c:	19400317 	ldw	r5,12(r3)
   3b910:	e0fffe17 	ldw	r3,-8(fp)
   3b914:	18c00417 	ldw	r3,16(r3)
   3b918:	180d883a 	mov	r6,r3
   3b91c:	103ee83a 	callr	r2
   3b920:	e0bffb15 	stw	r2,-20(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3b924:	01000084 	movi	r4,2
   3b928:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);
   3b92c:	e13ffe17 	ldw	r4,-8(fp)
   3b930:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3b934:	01000084 	movi	r4,2
   3b938:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   }

   return (err);
   3b93c:	e0bffb17 	ldw	r2,-20(fp)
}
   3b940:	e037883a 	mov	sp,fp
   3b944:	dfc00117 	ldw	ra,4(sp)
   3b948:	df000017 	ldw	fp,0(sp)
   3b94c:	dec00204 	addi	sp,sp,8
   3b950:	f800283a 	ret

0003b954 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
   3b954:	defffb04 	addi	sp,sp,-20
   3b958:	dfc00415 	stw	ra,16(sp)
   3b95c:	df000315 	stw	fp,12(sp)
   3b960:	df000304 	addi	fp,sp,12
   3b964:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
   3b968:	e0bfff17 	ldw	r2,-4(fp)
   3b96c:	10800417 	ldw	r2,16(r2)
   3b970:	e0bffd15 	stw	r2,-12(fp)
   entry->pending = (PACKET)NULL;
   3b974:	e0bfff17 	ldw	r2,-4(fp)
   3b978:	10000415 	stw	zero,16(r2)

   LOCK_NET_RESOURCE(FREEQ_RESID);
   3b97c:	01000084 	movi	r4,2
   3b980:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
   3b984:	00000906 	br	3b9ac <arp_free_pending+0x58>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
   3b988:	e0bffd17 	ldw	r2,-12(fp)
   3b98c:	10800017 	ldw	r2,0(r2)
   3b990:	e0bffe15 	stw	r2,-8(fp)
      tmppkt->next = (PACKET)NULL;
   3b994:	e0bffd17 	ldw	r2,-12(fp)
   3b998:	10000015 	stw	zero,0(r2)
      pk_free(tmppkt);               /* free current packet */
   3b99c:	e13ffd17 	ldw	r4,-12(fp)
   3b9a0:	002a8940 	call	2a894 <pk_free>
      tmppkt = nextpkt;              /* process the next packet */
   3b9a4:	e0bffe17 	ldw	r2,-8(fp)
   3b9a8:	e0bffd15 	stw	r2,-12(fp)
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);

   /* free all pending packets */
   while (tmppkt)
   3b9ac:	e0bffd17 	ldw	r2,-12(fp)
   3b9b0:	103ff51e 	bne	r2,zero,3b988 <__alt_mem_descriptor_memory+0xdeffb988>
      tmppkt->next = (PACKET)NULL;
      pk_free(tmppkt);               /* free current packet */
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
   3b9b4:	e0bfff17 	ldw	r2,-4(fp)
   3b9b8:	10000015 	stw	zero,0(r2)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3b9bc:	01000084 	movi	r4,2
   3b9c0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
}
   3b9c4:	e037883a 	mov	sp,fp
   3b9c8:	dfc00117 	ldw	ra,4(sp)
   3b9cc:	df000017 	ldw	fp,0(sp)
   3b9d0:	dec00204 	addi	sp,sp,8
   3b9d4:	f800283a 	ret

0003b9d8 <arp_send_pending>:
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
   3b9d8:	defffc04 	addi	sp,sp,-16
   3b9dc:	dfc00315 	stw	ra,12(sp)
   3b9e0:	df000215 	stw	fp,8(sp)
   3b9e4:	df000204 	addi	fp,sp,8
   3b9e8:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt = entry->pending;
   3b9ec:	e0bfff17 	ldw	r2,-4(fp)
   3b9f0:	10800417 	ldw	r2,16(r2)
   3b9f4:	e0bffe15 	stw	r2,-8(fp)

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
   3b9f8:	00000906 	br	3ba20 <arp_send_pending+0x48>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
   3b9fc:	e0bffe17 	ldw	r2,-8(fp)
   3ba00:	10c00017 	ldw	r3,0(r2)
   3ba04:	e0bfff17 	ldw	r2,-4(fp)
   3ba08:	10c00415 	stw	r3,16(r2)
      tmppkt->next = (PACKET)NULL;
   3ba0c:	e0bffe17 	ldw	r2,-8(fp)
   3ba10:	10000015 	stw	zero,0(r2)
      et_send(tmppkt, entry);          /* try send again */
   3ba14:	e13ffe17 	ldw	r4,-8(fp)
   3ba18:	e17fff17 	ldw	r5,-4(fp)
   3ba1c:	003b7cc0 	call	3b7cc <et_send>
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
   3ba20:	e0bfff17 	ldw	r2,-4(fp)
   3ba24:	10800417 	ldw	r2,16(r2)
   3ba28:	e0bffe15 	stw	r2,-8(fp)
   3ba2c:	e0bffe17 	ldw	r2,-8(fp)
   3ba30:	103ff21e 	bne	r2,zero,3b9fc <__alt_mem_descriptor_memory+0xdeffb9fc>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
      tmppkt->next = (PACKET)NULL;
      et_send(tmppkt, entry);          /* try send again */
   }
}
   3ba34:	e037883a 	mov	sp,fp
   3ba38:	dfc00117 	ldw	ra,4(sp)
   3ba3c:	df000017 	ldw	fp,0(sp)
   3ba40:	dec00204 	addi	sp,sp,8
   3ba44:	f800283a 	ret

0003ba48 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
   3ba48:	defff404 	addi	sp,sp,-48
   3ba4c:	dfc00b15 	stw	ra,44(sp)
   3ba50:	df000a15 	stw	fp,40(sp)
   3ba54:	df000a04 	addi	fp,sp,40
   3ba58:	e13ffe15 	stw	r4,-8(fp)
   3ba5c:	e17fff15 	stw	r5,-4(fp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
   3ba60:	e0bffe17 	ldw	r2,-8(fp)
   3ba64:	10800617 	ldw	r2,24(r2)
   3ba68:	e0bff615 	stw	r2,-40(fp)
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   3ba6c:	e0bffe17 	ldw	r2,-8(fp)
   3ba70:	10800617 	ldw	r2,24(r2)
   3ba74:	10802717 	ldw	r2,156(r2)
   3ba78:	e0bff715 	stw	r2,-36(fp)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
   3ba7c:	e0bfff17 	ldw	r2,-4(fp)
   3ba80:	10bfffe0 	cmpeqi	r2,r2,-1
   3ba84:	1000191e 	bne	r2,zero,3baec <send_arp+0xa4>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask)))
   3ba88:	e0bff617 	ldw	r2,-40(fp)
   3ba8c:	10800c17 	ldw	r2,48(r2)
   3ba90:	0086303a 	nor	r3,zero,r2
   3ba94:	e0bfff17 	ldw	r2,-4(fp)
   3ba98:	1886703a 	and	r3,r3,r2
   3ba9c:	e0bff617 	ldw	r2,-40(fp)
   3baa0:	10800c17 	ldw	r2,48(r2)
   3baa4:	0084303a 	nor	r2,zero,r2
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
   3baa8:	18801026 	beq	r3,r2,3baec <send_arp+0xa4>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask)))
       || (IN_MULTICAST(ntohl(dest_ip)) ))
   3baac:	e0bfff17 	ldw	r2,-4(fp)
   3bab0:	1006d63a 	srli	r3,r2,24
   3bab4:	e0bfff17 	ldw	r2,-4(fp)
   3bab8:	1004d23a 	srli	r2,r2,8
   3babc:	10bfc00c 	andi	r2,r2,65280
   3bac0:	1886b03a 	or	r3,r3,r2
   3bac4:	e0bfff17 	ldw	r2,-4(fp)
   3bac8:	10bfc00c 	andi	r2,r2,65280
   3bacc:	1004923a 	slli	r2,r2,8
   3bad0:	1886b03a 	or	r3,r3,r2
   3bad4:	e0bfff17 	ldw	r2,-4(fp)
   3bad8:	1004963a 	slli	r2,r2,24
   3badc:	1884b03a 	or	r2,r3,r2
   3bae0:	10fc002c 	andhi	r3,r2,61440
   3bae4:	00b80034 	movhi	r2,57344
   3bae8:	1880391e 	bne	r3,r2,3bbd0 <send_arp+0x188>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
   3baec:	e0bffe17 	ldw	r2,-8(fp)
   3baf0:	10800617 	ldw	r2,24(r2)
   3baf4:	e13fff17 	ldw	r4,-4(fp)
   3baf8:	100b883a 	mov	r5,r2
   3bafc:	003c0100 	call	3c010 <make_arp_entry>
   3bb00:	e0bff915 	stw	r2,-28(fp)

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
   3bb04:	e0bff917 	ldw	r2,-28(fp)
   3bb08:	10800104 	addi	r2,r2,4
   3bb0c:	1009883a 	mov	r4,r2
   3bb10:	01403fc4 	movi	r5,255
   3bb14:	01800184 	movi	r6,6
   3bb18:	0007f240 	call	7f24 <memset>
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
   3bb1c:	e0bffe17 	ldw	r2,-8(fp)
   3bb20:	10800617 	ldw	r2,24(r2)
   3bb24:	10802b17 	ldw	r2,172(r2)
   3bb28:	10002526 	beq	r2,zero,3bbc0 <send_arp+0x178>
   3bb2c:	e0bfff17 	ldw	r2,-4(fp)
   3bb30:	1006d63a 	srli	r3,r2,24
   3bb34:	e0bfff17 	ldw	r2,-4(fp)
   3bb38:	1004d23a 	srli	r2,r2,8
   3bb3c:	10bfc00c 	andi	r2,r2,65280
   3bb40:	1886b03a 	or	r3,r3,r2
   3bb44:	e0bfff17 	ldw	r2,-4(fp)
   3bb48:	10bfc00c 	andi	r2,r2,65280
   3bb4c:	1004923a 	slli	r2,r2,8
   3bb50:	1886b03a 	or	r3,r3,r2
   3bb54:	e0bfff17 	ldw	r2,-4(fp)
   3bb58:	1004963a 	slli	r2,r2,24
   3bb5c:	1884b03a 	or	r2,r3,r2
   3bb60:	10fc002c 	andhi	r3,r2,61440
   3bb64:	00b80034 	movhi	r2,57344
   3bb68:	1880151e 	bne	r3,r2,3bbc0 <send_arp+0x178>
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
   3bb6c:	e0bfff17 	ldw	r2,-4(fp)
   3bb70:	e0bffd15 	stw	r2,-12(fp)
         oldest->t_phy_addr[0] = 0x01;
   3bb74:	e0bff917 	ldw	r2,-28(fp)
   3bb78:	00c00044 	movi	r3,1
   3bb7c:	10c00105 	stb	r3,4(r2)
         oldest->t_phy_addr[1] = 0x00;
   3bb80:	e0bff917 	ldw	r2,-28(fp)
   3bb84:	10000145 	stb	zero,5(r2)
         oldest->t_phy_addr[2] = 0x5e;
   3bb88:	e0bff917 	ldw	r2,-28(fp)
   3bb8c:	00c01784 	movi	r3,94
   3bb90:	10c00185 	stb	r3,6(r2)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
   3bb94:	e0bffd43 	ldbu	r2,-11(fp)
   3bb98:	10801fcc 	andi	r2,r2,127
   3bb9c:	1007883a 	mov	r3,r2
   3bba0:	e0bff917 	ldw	r2,-28(fp)
   3bba4:	10c001c5 	stb	r3,7(r2)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
   3bba8:	e0fffd83 	ldbu	r3,-10(fp)
   3bbac:	e0bff917 	ldw	r2,-28(fp)
   3bbb0:	10c00205 	stb	r3,8(r2)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
   3bbb4:	e0fffdc3 	ldbu	r3,-9(fp)
   3bbb8:	e0bff917 	ldw	r2,-28(fp)
   3bbbc:	10c00245 	stb	r3,9(r2)
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
   3bbc0:	e13ffe17 	ldw	r4,-8(fp)
   3bbc4:	e17ff917 	ldw	r5,-28(fp)
   3bbc8:	003b7cc0 	call	3b7cc <et_send>
   3bbcc:	0000ae06 	br	3be88 <send_arp+0x440>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
   3bbd0:	e0bffe17 	ldw	r2,-8(fp)
   3bbd4:	10c00717 	ldw	r3,28(r2)
   3bbd8:	e0bffe17 	ldw	r2,-8(fp)
   3bbdc:	10800617 	ldw	r2,24(r2)
   3bbe0:	10800a17 	ldw	r2,40(r2)
   3bbe4:	18800d1e 	bne	r3,r2,3bc1c <send_arp+0x1d4>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
   3bbe8:	e0bffe17 	ldw	r2,-8(fp)
   3bbec:	10800717 	ldw	r2,28(r2)
   3bbf0:	10803fcc 	andi	r2,r2,255

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
   3bbf4:	10801fe0 	cmpeqi	r2,r2,127
   3bbf8:	1000081e 	bne	r2,zero,3bc1c <send_arp+0x1d4>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3bbfc:	01000084 	movi	r4,2
   3bc00:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);
   3bc04:	e13ffe17 	ldw	r4,-8(fp)
   3bc08:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3bc0c:	01000084 	movi	r4,2
   3bc10:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_NO_ROUTE;
   3bc14:	00bff7c4 	movi	r2,-33
   3bc18:	00009b06 	br	3be88 <send_arp+0x440>
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
   3bc1c:	01000084 	movi	r4,2
   3bc20:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
   3bc24:	01000c04 	movi	r4,48
   3bc28:	002a53c0 	call	2a53c <pk_alloc>
   3bc2c:	e0bff815 	stw	r2,-32(fp)
   if (!arppkt)
   3bc30:	e0bff817 	ldw	r2,-32(fp)
   3bc34:	1000061e 	bne	r2,zero,3bc50 <send_arp+0x208>
   {
      pk_free(pkt);
   3bc38:	e13ffe17 	ldw	r4,-8(fp)
   3bc3c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3bc40:	01000084 	movi	r4,2
   3bc44:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
   3bc48:	00bffa84 	movi	r2,-22
   3bc4c:	00008e06 	br	3be88 <send_arp+0x440>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3bc50:	01000084 	movi	r4,2
   3bc54:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
   3bc58:	e0bff817 	ldw	r2,-32(fp)
   3bc5c:	10c00117 	ldw	r3,4(r2)
   3bc60:	e0bff817 	ldw	r2,-32(fp)
   3bc64:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
   3bc68:	e0bff817 	ldw	r2,-32(fp)
   3bc6c:	00c00c04 	movi	r3,48
   3bc70:	10c00415 	stw	r3,16(r2)
   arppkt->net = pkt->net;
   3bc74:	e0bffe17 	ldw	r2,-8(fp)
   3bc78:	10c00617 	ldw	r3,24(r2)
   3bc7c:	e0bff817 	ldw	r2,-32(fp)
   3bc80:	10c00615 	stw	r3,24(r2)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
   3bc84:	e0bffe17 	ldw	r2,-8(fp)
   3bc88:	10800617 	ldw	r2,24(r2)
   3bc8c:	e13fff17 	ldw	r4,-4(fp)
   3bc90:	100b883a 	mov	r5,r2
   3bc94:	003c0100 	call	3c010 <make_arp_entry>
   3bc98:	e0bff915 	stw	r2,-28(fp)

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
   3bc9c:	e0bff917 	ldw	r2,-28(fp)
   3bca0:	e0fffe17 	ldw	r3,-8(fp)
   3bca4:	10c00415 	stw	r3,16(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
   3bca8:	e0bff817 	ldw	r2,-32(fp)
   3bcac:	10800117 	ldw	r2,4(r2)
   3bcb0:	10800084 	addi	r2,r2,2
   3bcb4:	e0bffa15 	stw	r2,-24(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
   3bcb8:	e0bff817 	ldw	r2,-32(fp)
   3bcbc:	10800117 	ldw	r2,4(r2)
   3bcc0:	10800404 	addi	r2,r2,16
   3bcc4:	e0bffb15 	stw	r2,-20(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
   3bcc8:	e0bffb17 	ldw	r2,-20(fp)
   3bccc:	00c04004 	movi	r3,256
   3bcd0:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   3bcd4:	e0bffb17 	ldw	r2,-20(fp)
   3bcd8:	00c00204 	movi	r3,8
   3bcdc:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
   3bce0:	e0bffb17 	ldw	r2,-20(fp)
   3bce4:	00c00184 	movi	r3,6
   3bce8:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
   3bcec:	e0bffb17 	ldw	r2,-20(fp)
   3bcf0:	00c00104 	movi	r3,4
   3bcf4:	10c00145 	stb	r3,5(r2)
   arphdr->ar_op = ARREQ;
   3bcf8:	e0bffb17 	ldw	r2,-20(fp)
   3bcfc:	00c04004 	movi	r3,256
   3bd00:	10c0018d 	sth	r3,6(r2)
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   3bd04:	e0bffb17 	ldw	r2,-20(fp)
   3bd08:	e0ffff17 	ldw	r3,-4(fp)
   3bd0c:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   3bd10:	e0bffe17 	ldw	r2,-8(fp)
   3bd14:	10800617 	ldw	r2,24(r2)
   3bd18:	10c00a17 	ldw	r3,40(r2)
   3bd1c:	e0bffb17 	ldw	r2,-20(fp)
   3bd20:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
   3bd24:	e0bffb17 	ldw	r2,-20(fp)
   3bd28:	10c00204 	addi	r3,r2,8
   3bd2c:	e0bff717 	ldw	r2,-36(fp)
   3bd30:	10800517 	ldw	r2,20(r2)
   3bd34:	1809883a 	mov	r4,r3
   3bd38:	100b883a 	mov	r5,r2
   3bd3c:	01800184 	movi	r6,6
   3bd40:	0007dc80 	call	7dc8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
   3bd44:	e13ffa17 	ldw	r4,-24(fp)
   3bd48:	01403fc4 	movi	r5,255
   3bd4c:	01800184 	movi	r6,6
   3bd50:	0007f240 	call	7f24 <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
   3bd54:	e0bffa17 	ldw	r2,-24(fp)
   3bd58:	10c00184 	addi	r3,r2,6
   3bd5c:	e0bff717 	ldw	r2,-36(fp)
   3bd60:	10800517 	ldw	r2,20(r2)
   3bd64:	1809883a 	mov	r4,r3
   3bd68:	100b883a 	mov	r5,r2
   3bd6c:	01800184 	movi	r6,6
   3bd70:	0007dc80 	call	7dc8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
   3bd74:	e0bffa17 	ldw	r2,-24(fp)
   3bd78:	10800304 	addi	r2,r2,12
   3bd7c:	00c00204 	movi	r3,8
   3bd80:	10c00005 	stb	r3,0(r2)
   3bd84:	e0bffa17 	ldw	r2,-24(fp)
   3bd88:	10800344 	addi	r2,r2,13
   3bd8c:	00c00184 	movi	r3,6
   3bd90:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
   3bd94:	e0bffb17 	ldw	r2,-20(fp)
   3bd98:	e0bffc15 	stw	r2,-16(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
   3bd9c:	e0bffc17 	ldw	r2,-16(fp)
   3bda0:	10c00204 	addi	r3,r2,8
   3bda4:	e0bffb17 	ldw	r2,-20(fp)
   3bda8:	10800204 	addi	r2,r2,8
   3bdac:	1809883a 	mov	r4,r3
   3bdb0:	100b883a 	mov	r5,r2
   3bdb4:	01800184 	movi	r6,6
   3bdb8:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
   3bdbc:	e0bffc17 	ldw	r2,-16(fp)
   3bdc0:	10c00384 	addi	r3,r2,14
   3bdc4:	e0bffb17 	ldw	r2,-20(fp)
   3bdc8:	10800404 	addi	r2,r2,16
   3bdcc:	1809883a 	mov	r4,r3
   3bdd0:	100b883a 	mov	r5,r2
   3bdd4:	01800104 	movi	r6,4
   3bdd8:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
   3bddc:	e0bffc17 	ldw	r2,-16(fp)
   3bde0:	10c00484 	addi	r3,r2,18
   3bde4:	e0bffb17 	ldw	r2,-20(fp)
   3bde8:	10800504 	addi	r2,r2,20
   3bdec:	1809883a 	mov	r4,r3
   3bdf0:	100b883a 	mov	r5,r2
   3bdf4:	01800184 	movi	r6,6
   3bdf8:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
   3bdfc:	e0bffc17 	ldw	r2,-16(fp)
   3be00:	10c00604 	addi	r3,r2,24
   3be04:	e0bffb17 	ldw	r2,-20(fp)
   3be08:	10800704 	addi	r2,r2,28
   3be0c:	1809883a 	mov	r4,r3
   3be10:	100b883a 	mov	r5,r2
   3be14:	01800104 	movi	r6,4
   3be18:	0007dc80 	call	7dc8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
   3be1c:	e0bff617 	ldw	r2,-40(fp)
   3be20:	10800417 	ldw	r2,16(r2)
   3be24:	10000526 	beq	r2,zero,3be3c <send_arp+0x3f4>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
   3be28:	e0bff617 	ldw	r2,-40(fp)
   3be2c:	10800417 	ldw	r2,16(r2)
   3be30:	e13ff817 	ldw	r4,-32(fp)
   3be34:	103ee83a 	callr	r2
   3be38:	00000f06 	br	3be78 <send_arp+0x430>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
   3be3c:	e0bff617 	ldw	r2,-40(fp)
   3be40:	10800317 	ldw	r2,12(r2)
   3be44:	e0fff817 	ldw	r3,-32(fp)
   3be48:	19000617 	ldw	r4,24(r3)
   3be4c:	e0fff817 	ldw	r3,-32(fp)
   3be50:	18c00117 	ldw	r3,4(r3)
   3be54:	180b883a 	mov	r5,r3
   3be58:	01800c04 	movi	r6,48
   3be5c:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3be60:	01000084 	movi	r4,2
   3be64:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
   3be68:	e13ff817 	ldw	r4,-32(fp)
   3be6c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3be70:	01000084 	movi	r4,2
   3be74:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
   3be78:	d0a8af17 	ldw	r2,-23876(gp)
   3be7c:	10800044 	addi	r2,r2,1
   3be80:	d0a8af15 	stw	r2,-23876(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
   3be84:	00800044 	movi	r2,1
}
   3be88:	e037883a 	mov	sp,fp
   3be8c:	dfc00117 	ldw	ra,4(sp)
   3be90:	df000017 	ldw	fp,0(sp)
   3be94:	dec00204 	addi	sp,sp,8
   3be98:	f800283a 	ret

0003be9c <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
   3be9c:	defff804 	addi	sp,sp,-32
   3bea0:	dfc00715 	stw	ra,28(sp)
   3bea4:	df000615 	stw	fp,24(sp)
   3bea8:	df000604 	addi	fp,sp,24
   3beac:	e13fff15 	stw	r4,-4(fp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
   3beb0:	e03ffb15 	stw	zero,-20(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
   3beb4:	e03ffc15 	stw	zero,-16(fp)
   struct arptabent *empty  = (struct arptabent *)NULL;
   3beb8:	e03ffd15 	stw	zero,-12(fp)
   unsigned long lticks = cticks;
   3bebc:	00800174 	movhi	r2,5
   3bec0:	108fbe04 	addi	r2,r2,16120
   3bec4:	10800017 	ldw	r2,0(r2)
   3bec8:	e0bffe15 	stw	r2,-8(fp)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3becc:	008001b4 	movhi	r2,6
   3bed0:	10b99c04 	addi	r2,r2,-6544
   3bed4:	e0bffa15 	stw	r2,-24(fp)
   3bed8:	00003b06 	br	3bfc8 <find_oldest_arp+0x12c>
   {
      /* age out old, pending entries */
      if (tp->pending)
   3bedc:	e0bffa17 	ldw	r2,-24(fp)
   3bee0:	10800417 	ldw	r2,16(r2)
   3bee4:	10000b26 	beq	r2,zero,3bf14 <find_oldest_arp+0x78>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
   3bee8:	e0bffa17 	ldw	r2,-24(fp)
   3beec:	10800517 	ldw	r2,20(r2)
   3bef0:	e0fffe17 	ldw	r3,-8(fp)
   3bef4:	1885c83a 	sub	r2,r3,r2
   3bef8:	10801970 	cmpltui	r2,r2,101
   3befc:	1000171e 	bne	r2,zero,3bf5c <find_oldest_arp+0xc0>
         {
            arp_free_pending(tp);   /* free pending packets */
   3bf00:	e13ffa17 	ldw	r4,-24(fp)
   3bf04:	003b9540 	call	3b954 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
   3bf08:	e0bffa17 	ldw	r2,-24(fp)
   3bf0c:	10000015 	stw	zero,0(r2)
   3bf10:	00001206 	br	3bf5c <find_oldest_arp+0xc0>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
   3bf14:	e0bffa17 	ldw	r2,-24(fp)
   3bf18:	10800017 	ldw	r2,0(r2)
   3bf1c:	10000f26 	beq	r2,zero,3bf5c <find_oldest_arp+0xc0>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
   3bf20:	e0bffa17 	ldw	r2,-24(fp)
   3bf24:	10800517 	ldw	r2,20(r2)
   3bf28:	e0fffe17 	ldw	r3,-8(fp)
   3bf2c:	1885c83a 	sub	r2,r3,r2
   3bf30:	1007883a 	mov	r3,r2
   3bf34:	d0a04c17 	ldw	r2,-32464(gp)
         {
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
      }
      else if ((tp->t_pro_addr != 0) &&
   3bf38:	18800816 	blt	r3,r2,3bf5c <find_oldest_arp+0xc0>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
               ((int)(lticks - tp->lasttime)   >= TPS))
   3bf3c:	e0bffa17 	ldw	r2,-24(fp)
   3bf40:	10800617 	ldw	r2,24(r2)
   3bf44:	e0fffe17 	ldw	r3,-8(fp)
   3bf48:	1885c83a 	sub	r2,r3,r2
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
      }
      else if ((tp->t_pro_addr != 0) &&
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
   3bf4c:	10801910 	cmplti	r2,r2,100
   3bf50:	1000021e 	bne	r2,zero,3bf5c <find_oldest_arp+0xc0>
               ((int)(lticks - tp->lasttime)   >= TPS))
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
   3bf54:	e0bffa17 	ldw	r2,-24(fp)
   3bf58:	10000015 	stw	zero,0(r2)
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
   3bf5c:	e0bffa17 	ldw	r2,-24(fp)
   3bf60:	10c00017 	ldw	r3,0(r2)
   3bf64:	e0bfff17 	ldw	r2,-4(fp)
   3bf68:	1880031e 	bne	r3,r2,3bf78 <find_oldest_arp+0xdc>
      {
         exact = tp;
   3bf6c:	e0bffa17 	ldw	r2,-24(fp)
   3bf70:	e0bffb15 	stw	r2,-20(fp)
   3bf74:	00001106 	br	3bfbc <find_oldest_arp+0x120>
      }
      else if (tp->t_pro_addr != 0)
   3bf78:	e0bffa17 	ldw	r2,-24(fp)
   3bf7c:	10800017 	ldw	r2,0(r2)
   3bf80:	10000a26 	beq	r2,zero,3bfac <find_oldest_arp+0x110>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
   3bf84:	e0bffc17 	ldw	r2,-16(fp)
   3bf88:	10000526 	beq	r2,zero,3bfa0 <find_oldest_arp+0x104>
   3bf8c:	e0bffa17 	ldw	r2,-24(fp)
   3bf90:	10c00617 	ldw	r3,24(r2)
   3bf94:	e0bffc17 	ldw	r2,-16(fp)
   3bf98:	10800617 	ldw	r2,24(r2)
   3bf9c:	1880072e 	bgeu	r3,r2,3bfbc <find_oldest_arp+0x120>
            oldest = tp;
   3bfa0:	e0bffa17 	ldw	r2,-24(fp)
   3bfa4:	e0bffc15 	stw	r2,-16(fp)
   3bfa8:	00000406 	br	3bfbc <find_oldest_arp+0x120>
      }
      else if (!empty)
   3bfac:	e0bffd17 	ldw	r2,-12(fp)
   3bfb0:	1000021e 	bne	r2,zero,3bfbc <find_oldest_arp+0x120>
         empty = tp;          /* grab first empty slot */
   3bfb4:	e0bffa17 	ldw	r2,-24(fp)
   3bfb8:	e0bffd15 	stw	r2,-12(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3bfbc:	e0bffa17 	ldw	r2,-24(fp)
   3bfc0:	10800804 	addi	r2,r2,32
   3bfc4:	e0bffa15 	stw	r2,-24(fp)
   3bfc8:	e0fffa17 	ldw	r3,-24(fp)
   3bfcc:	008001b4 	movhi	r2,6
   3bfd0:	10b9dc04 	addi	r2,r2,-6288
   3bfd4:	18bfc136 	bltu	r3,r2,3bedc <__alt_mem_descriptor_memory+0xdeffbedc>
      }
      else if (!empty)
         empty = tp;          /* grab first empty slot */
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
   3bfd8:	e0bffb17 	ldw	r2,-20(fp)
   3bfdc:	1000061e 	bne	r2,zero,3bff8 <find_oldest_arp+0x15c>
   3bfe0:	e0bffd17 	ldw	r2,-12(fp)
   3bfe4:	10000226 	beq	r2,zero,3bff0 <find_oldest_arp+0x154>
   3bfe8:	e0bffd17 	ldw	r2,-12(fp)
   3bfec:	00000306 	br	3bffc <find_oldest_arp+0x160>
   3bff0:	e0bffc17 	ldw	r2,-16(fp)
   3bff4:	00000106 	br	3bffc <find_oldest_arp+0x160>
   3bff8:	e0bffb17 	ldw	r2,-20(fp)
}
   3bffc:	e037883a 	mov	sp,fp
   3c000:	dfc00117 	ldw	ra,4(sp)
   3c004:	df000017 	ldw	fp,0(sp)
   3c008:	dec00204 	addi	sp,sp,8
   3c00c:	f800283a 	ret

0003c010 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
   3c010:	defffa04 	addi	sp,sp,-24
   3c014:	dfc00515 	stw	ra,20(sp)
   3c018:	df000415 	stw	fp,16(sp)
   3c01c:	df000404 	addi	fp,sp,16
   3c020:	e13ffe15 	stw	r4,-8(fp)
   3c024:	e17fff15 	stw	r5,-4(fp)
   struct arptabent *oldest;
   unsigned long lticks = cticks;
   3c028:	00800174 	movhi	r2,5
   3c02c:	108fbe04 	addi	r2,r2,16120
   3c030:	10800017 	ldw	r2,0(r2)
   3c034:	e0bffc15 	stw	r2,-16(fp)

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
   3c038:	e13ffe17 	ldw	r4,-8(fp)
   3c03c:	003be9c0 	call	3be9c <find_oldest_arp>
   3c040:	e0bffd15 	stw	r2,-12(fp)

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
   3c044:	e0bffd17 	ldw	r2,-12(fp)
   3c048:	10800417 	ldw	r2,16(r2)
   3c04c:	10000626 	beq	r2,zero,3c068 <make_arp_entry+0x58>
   3c050:	e0bffd17 	ldw	r2,-12(fp)
   3c054:	10c00017 	ldw	r3,0(r2)
   3c058:	e0bffe17 	ldw	r2,-8(fp)
   3c05c:	18800226 	beq	r3,r2,3c068 <make_arp_entry+0x58>
   {
      arp_free_pending(oldest);
   3c060:	e13ffd17 	ldw	r4,-12(fp)
   3c064:	003b9540 	call	3b954 <arp_free_pending>
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
   3c068:	e0bffd17 	ldw	r2,-12(fp)
   3c06c:	e0fffe17 	ldw	r3,-8(fp)
   3c070:	10c00015 	stw	r3,0(r2)
   oldest->net = net;
   3c074:	e0bffd17 	ldw	r2,-12(fp)
   3c078:	e0ffff17 	ldw	r3,-4(fp)
   3c07c:	10c00315 	stw	r3,12(r2)
   oldest->flags = 0;
   3c080:	e0bffd17 	ldw	r2,-12(fp)
   3c084:	1000070d 	sth	zero,28(r2)
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
   3c088:	e0bffd17 	ldw	r2,-12(fp)
   3c08c:	10800104 	addi	r2,r2,4
   3c090:	1009883a 	mov	r4,r2
   3c094:	000b883a 	mov	r5,zero
   3c098:	01800184 	movi	r6,6
   3c09c:	0007f240 	call	7f24 <memset>
   oldest->createtime = oldest->lasttime = lticks;
   3c0a0:	e0bffd17 	ldw	r2,-12(fp)
   3c0a4:	e0fffc17 	ldw	r3,-16(fp)
   3c0a8:	10c00615 	stw	r3,24(r2)
   3c0ac:	e0bffd17 	ldw	r2,-12(fp)
   3c0b0:	10c00617 	ldw	r3,24(r2)
   3c0b4:	e0bffd17 	ldw	r2,-12(fp)
   3c0b8:	10c00515 	stw	r3,20(r2)

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
   3c0bc:	d0a8ab17 	ldw	r2,-23892(gp)
   3c0c0:	1000071e 	bne	r2,zero,3c0e0 <make_arp_entry+0xd0>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
   3c0c4:	01000134 	movhi	r4,4
   3c0c8:	2131f204 	addi	r4,r4,-14392
   3c0cc:	0149c404 	movi	r5,10000
   3c0d0:	000d883a 	mov	r6,zero
   3c0d4:	003b4340 	call	3b434 <in_timerset>
   3c0d8:	d0a8ab15 	stw	r2,-23892(gp)
   3c0dc:	00000706 	br	3c0fc <make_arp_entry+0xec>
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
   3c0e0:	d0a8ab17 	ldw	r2,-23892(gp)
   3c0e4:	1009883a 	mov	r4,r2
              ((struct intimer *)arp_timer)->interval + lticks;
   3c0e8:	d0a8ab17 	ldw	r2,-23892(gp)
   3c0ec:	10c00217 	ldw	r3,8(r2)
   3c0f0:	e0bffc17 	ldw	r2,-16(fp)
   3c0f4:	1885883a 	add	r2,r3,r2
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
   3c0f8:	20800315 	stw	r2,12(r4)
              ((struct intimer *)arp_timer)->interval + lticks;
   }

   return oldest;
   3c0fc:	e0bffd17 	ldw	r2,-12(fp)
}
   3c100:	e037883a 	mov	sp,fp
   3c104:	dfc00117 	ldw	ra,4(sp)
   3c108:	df000017 	ldw	fp,0(sp)
   3c10c:	dec00204 	addi	sp,sp,8
   3c110:	f800283a 	ret

0003c114 <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
   3c114:	defff704 	addi	sp,sp,-36
   3c118:	dfc00815 	stw	ra,32(sp)
   3c11c:	df000715 	stw	fp,28(sp)
   3c120:	df000704 	addi	fp,sp,28
   3c124:	e13fff15 	stw	r4,-4(fp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
   3c128:	01000084 	movi	r4,2
   3c12c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
   3c130:	01000c04 	movi	r4,48
   3c134:	002a53c0 	call	2a53c <pk_alloc>
   3c138:	e0bff915 	stw	r2,-28(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c13c:	01000084 	movi	r4,2
   3c140:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (!outpkt)
   3c144:	e0bff917 	ldw	r2,-28(fp)
   3c148:	1000021e 	bne	r2,zero,3c154 <arpReply+0x40>
   {
      dtrap();
   3c14c:	002b0f40 	call	2b0f4 <dtrap>
      return;
   3c150:	00009b06 	br	3c3c0 <arpReply+0x2ac>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
   3c154:	e0bfff17 	ldw	r2,-4(fp)
   3c158:	10c00617 	ldw	r3,24(r2)
   3c15c:	e0bff917 	ldw	r2,-28(fp)
   3c160:	10c00615 	stw	r3,24(r2)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
   3c164:	e0bfff17 	ldw	r2,-4(fp)
   3c168:	10800317 	ldw	r2,12(r2)
   3c16c:	10bffc84 	addi	r2,r2,-14
   3c170:	e0bffa15 	stw	r2,-24(fp)
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
   3c174:	e0bff917 	ldw	r2,-28(fp)
   3c178:	10800117 	ldw	r2,4(r2)
   3c17c:	10800084 	addi	r2,r2,2
   3c180:	e0bffb15 	stw	r2,-20(fp)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
   3c184:	e0bffb17 	ldw	r2,-20(fp)
   3c188:	10800304 	addi	r2,r2,12
   3c18c:	00c00204 	movi	r3,8
   3c190:	10c00005 	stb	r3,0(r2)
   3c194:	e0bffb17 	ldw	r2,-20(fp)
   3c198:	10800344 	addi	r2,r2,13
   3c19c:	00c00184 	movi	r3,6
   3c1a0:	10c00005 	stb	r3,0(r2)
      in = (struct arp_hdr *)(pkt->nb_prot);
   3c1a4:	e0bfff17 	ldw	r2,-4(fp)
   3c1a8:	10800317 	ldw	r2,12(r2)
   3c1ac:	e0bffc15 	stw	r2,-16(fp)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
   3c1b0:	e0bff917 	ldw	r2,-28(fp)
   3c1b4:	10800117 	ldw	r2,4(r2)
   3c1b8:	10800404 	addi	r2,r2,16
   3c1bc:	e0bffd15 	stw	r2,-12(fp)
      outpkt->nb_plen = arpsize;
   3c1c0:	e0bff917 	ldw	r2,-28(fp)
   3c1c4:	00c00c04 	movi	r3,48
   3c1c8:	10c00415 	stw	r3,16(r2)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
   3c1cc:	e0bffd17 	ldw	r2,-12(fp)
   3c1d0:	00c04004 	movi	r3,256
   3c1d4:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
   3c1d8:	e0bffd17 	ldw	r2,-12(fp)
   3c1dc:	00c00204 	movi	r3,8
   3c1e0:	10c0008d 	sth	r3,2(r2)
   out->ar_hln = 6;
   3c1e4:	e0bffd17 	ldw	r2,-12(fp)
   3c1e8:	00c00184 	movi	r3,6
   3c1ec:	10c00105 	stb	r3,4(r2)
   out->ar_pln = 4;
   3c1f0:	e0bffd17 	ldw	r2,-12(fp)
   3c1f4:	00c00104 	movi	r3,4
   3c1f8:	10c00145 	stb	r3,5(r2)
   out->ar_op = ARREP;
   3c1fc:	e0bffd17 	ldw	r2,-12(fp)
   3c200:	00c08004 	movi	r3,512
   3c204:	10c0018d 	sth	r3,6(r2)
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
   3c208:	e0bffc17 	ldw	r2,-16(fp)
   3c20c:	10c00417 	ldw	r3,16(r2)
   3c210:	e0bffd17 	ldw	r2,-12(fp)
   3c214:	10c00715 	stw	r3,28(r2)
   out->ar_spa = in->ar_tpa;
   3c218:	e0bffc17 	ldw	r2,-16(fp)
   3c21c:	10c00717 	ldw	r3,28(r2)
   3c220:	e0bffd17 	ldw	r2,-12(fp)
   3c224:	10c00415 	stw	r3,16(r2)
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
   3c228:	e0bffd17 	ldw	r2,-12(fp)
   3c22c:	10c00504 	addi	r3,r2,20
   3c230:	e0bffc17 	ldw	r2,-16(fp)
   3c234:	10800204 	addi	r2,r2,8
   3c238:	1809883a 	mov	r4,r3
   3c23c:	100b883a 	mov	r5,r2
   3c240:	01800184 	movi	r6,6
   3c244:	0007dc80 	call	7dc8 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
   3c248:	e0bffd17 	ldw	r2,-12(fp)
   3c24c:	10c00204 	addi	r3,r2,8
   3c250:	e0bff917 	ldw	r2,-28(fp)
   3c254:	10800617 	ldw	r2,24(r2)
   3c258:	10802717 	ldw	r2,156(r2)
   3c25c:	10800517 	ldw	r2,20(r2)
   3c260:	1809883a 	mov	r4,r3
   3c264:	100b883a 	mov	r5,r2
   3c268:	01800184 	movi	r6,6
   3c26c:	0007dc80 	call	7dc8 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
   3c270:	e0bffa17 	ldw	r2,-24(fp)
   3c274:	10800184 	addi	r2,r2,6
   3c278:	e13ffb17 	ldw	r4,-20(fp)
   3c27c:	100b883a 	mov	r5,r2
   3c280:	01800184 	movi	r6,6
   3c284:	0007dc80 	call	7dc8 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
   3c288:	e0bffb17 	ldw	r2,-20(fp)
   3c28c:	10c00184 	addi	r3,r2,6
   3c290:	e0bff917 	ldw	r2,-28(fp)
   3c294:	10800617 	ldw	r2,24(r2)
   3c298:	10802717 	ldw	r2,156(r2)
   3c29c:	10800517 	ldw	r2,20(r2)
   3c2a0:	1809883a 	mov	r4,r3
   3c2a4:	100b883a 	mov	r5,r2
   3c2a8:	01800184 	movi	r6,6
   3c2ac:	0007dc80 	call	7dc8 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
   3c2b0:	e0bffd17 	ldw	r2,-12(fp)
   3c2b4:	e0bffe15 	stw	r2,-8(fp)
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
   3c2b8:	e0bffe17 	ldw	r2,-8(fp)
   3c2bc:	10c00204 	addi	r3,r2,8
   3c2c0:	e0bffd17 	ldw	r2,-12(fp)
   3c2c4:	10800204 	addi	r2,r2,8
   3c2c8:	1809883a 	mov	r4,r3
   3c2cc:	100b883a 	mov	r5,r2
   3c2d0:	01800184 	movi	r6,6
   3c2d4:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
   3c2d8:	e0bffe17 	ldw	r2,-8(fp)
   3c2dc:	10c00384 	addi	r3,r2,14
   3c2e0:	e0bffd17 	ldw	r2,-12(fp)
   3c2e4:	10800404 	addi	r2,r2,16
   3c2e8:	1809883a 	mov	r4,r3
   3c2ec:	100b883a 	mov	r5,r2
   3c2f0:	01800104 	movi	r6,4
   3c2f4:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
   3c2f8:	e0bffe17 	ldw	r2,-8(fp)
   3c2fc:	10c00484 	addi	r3,r2,18
   3c300:	e0bffd17 	ldw	r2,-12(fp)
   3c304:	10800504 	addi	r2,r2,20
   3c308:	1809883a 	mov	r4,r3
   3c30c:	100b883a 	mov	r5,r2
   3c310:	01800184 	movi	r6,6
   3c314:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
   3c318:	e0bffe17 	ldw	r2,-8(fp)
   3c31c:	10c00604 	addi	r3,r2,24
   3c320:	e0bffd17 	ldw	r2,-12(fp)
   3c324:	10800704 	addi	r2,r2,28
   3c328:	1809883a 	mov	r4,r3
   3c32c:	100b883a 	mov	r5,r2
   3c330:	01800104 	movi	r6,4
   3c334:	0007dc80 	call	7dc8 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
   3c338:	e0bff917 	ldw	r2,-28(fp)
   3c33c:	10800617 	ldw	r2,24(r2)
   3c340:	10800417 	ldw	r2,16(r2)
   3c344:	10000a26 	beq	r2,zero,3c370 <arpReply+0x25c>
   {
      outpkt->nb_prot = outpkt->nb_buff;
   3c348:	e0bff917 	ldw	r2,-28(fp)
   3c34c:	10c00117 	ldw	r3,4(r2)
   3c350:	e0bff917 	ldw	r2,-28(fp)
   3c354:	10c00315 	stw	r3,12(r2)
      outpkt->net->pkt_send(outpkt);
   3c358:	e0bff917 	ldw	r2,-28(fp)
   3c35c:	10800617 	ldw	r2,24(r2)
   3c360:	10800417 	ldw	r2,16(r2)
   3c364:	e13ff917 	ldw	r4,-28(fp)
   3c368:	103ee83a 	callr	r2
   3c36c:	00001106 	br	3c3b4 <arpReply+0x2a0>
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
   3c370:	e0bff917 	ldw	r2,-28(fp)
   3c374:	10800617 	ldw	r2,24(r2)
   3c378:	10800317 	ldw	r2,12(r2)
   3c37c:	e0ffff17 	ldw	r3,-4(fp)
   3c380:	19000617 	ldw	r4,24(r3)
   3c384:	e0fff917 	ldw	r3,-28(fp)
   3c388:	19400117 	ldw	r5,4(r3)
   3c38c:	e0fff917 	ldw	r3,-28(fp)
   3c390:	18c00417 	ldw	r3,16(r3)
   3c394:	180d883a 	mov	r6,r3
   3c398:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3c39c:	01000084 	movi	r4,2
   3c3a0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
   3c3a4:	e13ff917 	ldw	r4,-28(fp)
   3c3a8:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c3ac:	01000084 	movi	r4,2
   3c3b0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
   3c3b4:	d0a8b117 	ldw	r2,-23868(gp)
   3c3b8:	10800044 	addi	r2,r2,1
   3c3bc:	d0a8b115 	stw	r2,-23868(gp)
}
   3c3c0:	e037883a 	mov	sp,fp
   3c3c4:	dfc00117 	ldw	ra,4(sp)
   3c3c8:	df000017 	ldw	fp,0(sp)
   3c3cc:	dec00204 	addi	sp,sp,8
   3c3d0:	f800283a 	ret

0003c3d4 <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
   3c3d4:	defff904 	addi	sp,sp,-28
   3c3d8:	dfc00615 	stw	ra,24(sp)
   3c3dc:	df000515 	stw	fp,20(sp)
   3c3e0:	df000504 	addi	fp,sp,20
   3c3e4:	e13fff15 	stw	r4,-4(fp)
   char *eth;
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
   3c3e8:	e0bfff17 	ldw	r2,-4(fp)
   3c3ec:	10800317 	ldw	r2,12(r2)
   3c3f0:	10bffc84 	addi	r2,r2,-14
   3c3f4:	e0bffc15 	stw	r2,-16(fp)
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
   3c3f8:	e0bfff17 	ldw	r2,-4(fp)
   3c3fc:	10800317 	ldw	r2,12(r2)
   3c400:	e0bffd15 	stw	r2,-12(fp)
#endif   /* IEEE_802_3_ONLY */
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
   3c404:	e0bffd17 	ldw	r2,-12(fp)
   3c408:	e0bffe15 	stw	r2,-8(fp)
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
   3c40c:	e0bffd17 	ldw	r2,-12(fp)
   3c410:	10c00704 	addi	r3,r2,28
   3c414:	e0bffe17 	ldw	r2,-8(fp)
   3c418:	10800604 	addi	r2,r2,24
   3c41c:	1809883a 	mov	r4,r3
   3c420:	100b883a 	mov	r5,r2
   3c424:	01800104 	movi	r6,4
   3c428:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
   3c42c:	e0bffd17 	ldw	r2,-12(fp)
   3c430:	10c00504 	addi	r3,r2,20
   3c434:	e0bffe17 	ldw	r2,-8(fp)
   3c438:	10800484 	addi	r2,r2,18
   3c43c:	1809883a 	mov	r4,r3
   3c440:	100b883a 	mov	r5,r2
   3c444:	01800184 	movi	r6,6
   3c448:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
   3c44c:	e0bffd17 	ldw	r2,-12(fp)
   3c450:	10c00404 	addi	r3,r2,16
   3c454:	e0bffe17 	ldw	r2,-8(fp)
   3c458:	10800384 	addi	r2,r2,14
   3c45c:	1809883a 	mov	r4,r3
   3c460:	100b883a 	mov	r5,r2
   3c464:	01800104 	movi	r6,4
   3c468:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
   3c46c:	e0bffd17 	ldw	r2,-12(fp)
   3c470:	10c00204 	addi	r3,r2,8
   3c474:	e0bffe17 	ldw	r2,-8(fp)
   3c478:	10800204 	addi	r2,r2,8
   3c47c:	1809883a 	mov	r4,r3
   3c480:	100b883a 	mov	r5,r2
   3c484:	01800184 	movi	r6,6
   3c488:	0007dc80 	call	7dc8 <memmove>
#endif
   USE_ARG(eth);

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
   3c48c:	e0bffd17 	ldw	r2,-12(fp)
   3c490:	10c00717 	ldw	r3,28(r2)
   3c494:	e0bfff17 	ldw	r2,-4(fp)
   3c498:	10800617 	ldw	r2,24(r2)
   3c49c:	10800a17 	ldw	r2,40(r2)
   3c4a0:	18801c26 	beq	r3,r2,3c514 <arprcv+0x140>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
   3c4a4:	e0bffd17 	ldw	r2,-12(fp)
   3c4a8:	10800717 	ldw	r2,28(r2)
   3c4ac:	1006d63a 	srli	r3,r2,24
   3c4b0:	e0bffd17 	ldw	r2,-12(fp)
   3c4b4:	10800717 	ldw	r2,28(r2)
   3c4b8:	1004d23a 	srli	r2,r2,8
   3c4bc:	10bfc00c 	andi	r2,r2,65280
   3c4c0:	1886b03a 	or	r3,r3,r2
   3c4c4:	e0bffd17 	ldw	r2,-12(fp)
   3c4c8:	10800717 	ldw	r2,28(r2)
   3c4cc:	10bfc00c 	andi	r2,r2,65280
   3c4d0:	1004923a 	slli	r2,r2,8
   3c4d4:	1886b03a 	or	r3,r3,r2
   3c4d8:	e0bffd17 	ldw	r2,-12(fp)
   3c4dc:	10800717 	ldw	r2,28(r2)
   3c4e0:	1004963a 	slli	r2,r2,24
   3c4e4:	1884b03a 	or	r2,r3,r2
   3c4e8:	10fc002c 	andhi	r3,r2,61440
#endif
   USE_ARG(eth);

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
   3c4ec:	00b80034 	movhi	r2,57344
   3c4f0:	18800826 	beq	r3,r2,3c514 <arprcv+0x140>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
#else
   if (arphdr->ar_tpa != pkt->net->n_ipaddr)
#endif /* IP_MULTICAST */
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3c4f4:	01000084 	movi	r4,2
   3c4f8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
   3c4fc:	e13fff17 	ldw	r4,-4(fp)
   3c500:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c504:	01000084 	movi	r4,2
   3c508:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return (ENP_NOT_MINE);
   3c50c:	00800084 	movi	r2,2
   3c510:	00004606 	br	3c62c <arprcv+0x258>
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
   3c514:	e0bffd17 	ldw	r2,-12(fp)
   3c518:	1080018b 	ldhu	r2,6(r2)
   3c51c:	10bfffcc 	andi	r2,r2,65535
   3c520:	10804018 	cmpnei	r2,r2,256
   3c524:	10000d1e 	bne	r2,zero,3c55c <arprcv+0x188>
   {
      arpReqsIn++;   /* count these */
   3c528:	d0a8ae17 	ldw	r2,-23880(gp)
   3c52c:	10800044 	addi	r2,r2,1
   3c530:	d0a8ae15 	stw	r2,-23880(gp)
      arpReply(pkt); /* send arp reply */
   3c534:	e13fff17 	ldw	r4,-4(fp)
   3c538:	003c1140 	call	3c114 <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
   3c53c:	e0bffd17 	ldw	r2,-12(fp)
   3c540:	10c00417 	ldw	r3,16(r2)
   3c544:	e0bfff17 	ldw	r2,-4(fp)
   3c548:	10800617 	ldw	r2,24(r2)
   3c54c:	1809883a 	mov	r4,r3
   3c550:	100b883a 	mov	r5,r2
   3c554:	003c0100 	call	3c010 <make_arp_entry>
   3c558:	00000306 	br	3c568 <arprcv+0x194>
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
   3c55c:	d0a8b017 	ldw	r2,-23872(gp)
   3c560:	10800044 	addi	r2,r2,1
   3c564:	d0a8b015 	stw	r2,-23872(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3c568:	008001b4 	movhi	r2,6
   3c56c:	10b99c04 	addi	r2,r2,-6544
   3c570:	e0bffb15 	stw	r2,-20(fp)
   3c574:	00002206 	br	3c600 <arprcv+0x22c>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
   3c578:	e0bffb17 	ldw	r2,-20(fp)
   3c57c:	10c00017 	ldw	r3,0(r2)
   3c580:	e0bffd17 	ldw	r2,-12(fp)
   3c584:	10800417 	ldw	r2,16(r2)
   3c588:	18801a1e 	bne	r3,r2,3c5f4 <arprcv+0x220>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
   3c58c:	e0bffb17 	ldw	r2,-20(fp)
   3c590:	10c00104 	addi	r3,r2,4
   3c594:	e0bffd17 	ldw	r2,-12(fp)
   3c598:	10800204 	addi	r2,r2,8
   3c59c:	1809883a 	mov	r4,r3
   3c5a0:	100b883a 	mov	r5,r2
   3c5a4:	01800184 	movi	r6,6
   3c5a8:	0007dc80 	call	7dc8 <memmove>
         tp->lasttime = cticks;
   3c5ac:	00800174 	movhi	r2,5
   3c5b0:	108fbe04 	addi	r2,r2,16120
   3c5b4:	10c00017 	ldw	r3,0(r2)
   3c5b8:	e0bffb17 	ldw	r2,-20(fp)
   3c5bc:	10c00615 	stw	r3,24(r2)
         if (tp->pending)     /* packet waiting for this IP entry? */
   3c5c0:	e0bffb17 	ldw	r2,-20(fp)
   3c5c4:	10800417 	ldw	r2,16(r2)
   3c5c8:	10000226 	beq	r2,zero,3c5d4 <arprcv+0x200>
         {
            arp_send_pending(tp);
   3c5cc:	e13ffb17 	ldw	r4,-20(fp)
   3c5d0:	003b9d80 	call	3b9d8 <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3c5d4:	01000084 	movi	r4,2
   3c5d8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(pkt);
   3c5dc:	e13fff17 	ldw	r4,-4(fp)
   3c5e0:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c5e4:	01000084 	movi	r4,2
   3c5e8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

         return (0);
   3c5ec:	0005883a 	mov	r2,zero
   3c5f0:	00000e06 	br	3c62c <arprcv+0x258>
      arpRepsIn++;
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3c5f4:	e0bffb17 	ldw	r2,-20(fp)
   3c5f8:	10800804 	addi	r2,r2,32
   3c5fc:	e0bffb15 	stw	r2,-20(fp)
   3c600:	e0fffb17 	ldw	r3,-20(fp)
   3c604:	008001b4 	movhi	r2,6
   3c608:	10b9dc04 	addi	r2,r2,-6288
   3c60c:	18bfda36 	bltu	r3,r2,3c578 <__alt_mem_descriptor_memory+0xdeffc578>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   3c610:	01000084 	movi	r4,2
   3c614:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(pkt);
   3c618:	e13fff17 	ldw	r4,-4(fp)
   3c61c:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c620:	01000084 	movi	r4,2
   3c624:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   return ENP_NOT_MINE;
   3c628:	00800084 	movi	r2,2
}
   3c62c:	e037883a 	mov	sp,fp
   3c630:	dfc00117 	ldw	ra,4(sp)
   3c634:	df000017 	ldw	fp,0(sp)
   3c638:	dec00204 	addi	sp,sp,8
   3c63c:	f800283a 	ret

0003c640 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
   3c640:	defff804 	addi	sp,sp,-32
   3c644:	dfc00715 	stw	ra,28(sp)
   3c648:	df000615 	stw	fp,24(sp)
   3c64c:	df000604 	addi	fp,sp,24
   3c650:	e13ffe15 	stw	r4,-8(fp)
   3c654:	e17fff15 	stw	r5,-4(fp)
   struct arptabent *tp;
   unsigned long lticks = cticks;
   3c658:	00800174 	movhi	r2,5
   3c65c:	108fbe04 	addi	r2,r2,16120
   3c660:	10800017 	ldw	r2,0(r2)
   3c664:	e0bffd15 	stw	r2,-12(fp)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
   3c668:	e0bfff17 	ldw	r2,-4(fp)
   3c66c:	1000081e 	bne	r2,zero,3c690 <send_via_arp+0x50>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3c670:	01000084 	movi	r4,2
   3c674:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(pkt);
   3c678:	e13ffe17 	ldw	r4,-8(fp)
   3c67c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c680:	01000084 	movi	r4,2
   3c684:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return SEND_DROPPED; 
   3c688:	00bffa84 	movi	r2,-22
   3c68c:	00004906 	br	3c7b4 <send_via_arp+0x174>
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
   3c690:	d0a8ad17 	ldw	r2,-23884(gp)
   3c694:	e0fffd17 	ldw	r3,-12(fp)
   3c698:	1885c83a 	sub	r2,r3,r2
   3c69c:	10801970 	cmpltui	r2,r2,101
   3c6a0:	1000011e 	bne	r2,zero,3c6a8 <send_via_arp+0x68>
      arpcache = (struct arptabent *)NULL;
   3c6a4:	d028ac15 	stw	zero,-23888(gp)

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
   3c6a8:	d0a8ac17 	ldw	r2,-23888(gp)
   3c6ac:	10000726 	beq	r2,zero,3c6cc <send_via_arp+0x8c>
   3c6b0:	d0a8ac17 	ldw	r2,-23888(gp)
   3c6b4:	10c00017 	ldw	r3,0(r2)
   3c6b8:	e0bfff17 	ldw	r2,-4(fp)
   3c6bc:	1880031e 	bne	r3,r2,3c6cc <send_via_arp+0x8c>
      tp = arpcache;
   3c6c0:	d0a8ac17 	ldw	r2,-23888(gp)
   3c6c4:	e0bffa15 	stw	r2,-24(fp)
   3c6c8:	00000306 	br	3c6d8 <send_via_arp+0x98>
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
   3c6cc:	e13fff17 	ldw	r4,-4(fp)
   3c6d0:	003be9c0 	call	3be9c <find_oldest_arp>
   3c6d4:	e0bffa15 	stw	r2,-24(fp)
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
   3c6d8:	e0bffa17 	ldw	r2,-24(fp)
   3c6dc:	10c00017 	ldw	r3,0(r2)
   3c6e0:	e0bfff17 	ldw	r2,-4(fp)
   3c6e4:	18802e1e 	bne	r3,r2,3c7a0 <send_via_arp+0x160>
   {
      if (tp->pending)  /* arp already pending for this IP? */
   3c6e8:	e0bffa17 	ldw	r2,-24(fp)
   3c6ec:	10800417 	ldw	r2,16(r2)
   3c6f0:	10002226 	beq	r2,zero,3c77c <send_via_arp+0x13c>
      {
         if (lilfreeq.q_len < 2)
   3c6f4:	008001b4 	movhi	r2,6
   3c6f8:	10b7fd04 	addi	r2,r2,-8204
   3c6fc:	10800217 	ldw	r2,8(r2)
   3c700:	10800088 	cmpgei	r2,r2,2
   3c704:	1000091e 	bne	r2,zero,3c72c <send_via_arp+0xec>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3c708:	01000084 	movi	r4,2
   3c70c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
   3c710:	e13ffe17 	ldw	r4,-8(fp)
   3c714:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c718:	01000084 	movi	r4,2
   3c71c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            err = SEND_DROPPED;    /* pkts already waiting for this IP entry */
   3c720:	00bffa84 	movi	r2,-22
   3c724:	e0bffb15 	stw	r2,-20(fp)
   3c728:	00002106 	br	3c7b0 <send_via_arp+0x170>
         }
         else
         {
            PACKET tmppkt=tp->pending;
   3c72c:	e0bffa17 	ldw	r2,-24(fp)
   3c730:	10800417 	ldw	r2,16(r2)
   3c734:	e0bffc15 	stw	r2,-16(fp)

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
   3c738:	00000306 	br	3c748 <send_via_arp+0x108>
               tmppkt = tmppkt->next;
   3c73c:	e0bffc17 	ldw	r2,-16(fp)
   3c740:	10800017 	ldw	r2,0(r2)
   3c744:	e0bffc15 	stw	r2,-16(fp)
         else
         {
            PACKET tmppkt=tp->pending;

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
   3c748:	e0bffc17 	ldw	r2,-16(fp)
   3c74c:	10800017 	ldw	r2,0(r2)
   3c750:	103ffa1e 	bne	r2,zero,3c73c <__alt_mem_descriptor_memory+0xdeffc73c>
               tmppkt = tmppkt->next;
            tmppkt->next = pkt;      /* add new pkt to end of list */
   3c754:	e0bffc17 	ldw	r2,-16(fp)
   3c758:	e0fffe17 	ldw	r3,-8(fp)
   3c75c:	10c00015 	stw	r3,0(r2)
            if (pkt->next)
   3c760:	e0bffe17 	ldw	r2,-8(fp)
   3c764:	10800017 	ldw	r2,0(r2)
   3c768:	10000126 	beq	r2,zero,3c770 <send_via_arp+0x130>
            {
               dtrap();              /* chain of pkts to be sent ??? */
   3c76c:	002b0f40 	call	2b0f4 <dtrap>
            }
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
   3c770:	00800044 	movi	r2,1
   3c774:	e0bffb15 	stw	r2,-20(fp)
   3c778:	00000d06 	br	3c7b0 <send_via_arp+0x170>
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
   3c77c:	e0bffa17 	ldw	r2,-24(fp)
   3c780:	d0a8ac15 	stw	r2,-23888(gp)
         cachetime = lticks;  /* mark time we cached */
   3c784:	e0bffd17 	ldw	r2,-12(fp)
   3c788:	d0a8ad15 	stw	r2,-23884(gp)
         err = et_send(pkt, tp);
   3c78c:	e13ffe17 	ldw	r4,-8(fp)
   3c790:	e17ffa17 	ldw	r5,-24(fp)
   3c794:	003b7cc0 	call	3b7cc <et_send>
   3c798:	e0bffb15 	stw	r2,-20(fp)
   3c79c:	00000406 	br	3c7b0 <send_via_arp+0x170>
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
   3c7a0:	e13ffe17 	ldw	r4,-8(fp)
   3c7a4:	e17fff17 	ldw	r5,-4(fp)
   3c7a8:	003ba480 	call	3ba48 <send_arp>
   3c7ac:	e0bffb15 	stw	r2,-20(fp)

   return (err);
   3c7b0:	e0bffb17 	ldw	r2,-20(fp)
}
   3c7b4:	e037883a 	mov	sp,fp
   3c7b8:	dfc00117 	ldw	ra,4(sp)
   3c7bc:	df000017 	ldw	fp,0(sp)
   3c7c0:	dec00204 	addi	sp,sp,8
   3c7c4:	f800283a 	ret

0003c7c8 <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
   3c7c8:	defffa04 	addi	sp,sp,-24
   3c7cc:	dfc00515 	stw	ra,20(sp)
   3c7d0:	df000415 	stw	fp,16(sp)
   3c7d4:	df000404 	addi	fp,sp,16
   3c7d8:	e13fff15 	stw	r4,-4(fp)
   struct arptabent *tp;
   int arp_count = 0;
   3c7dc:	e03ffd15 	stw	zero,-12(fp)
   unsigned long lticks = cticks;
   3c7e0:	00800174 	movhi	r2,5
   3c7e4:	108fbe04 	addi	r2,r2,16120
   3c7e8:	10800017 	ldw	r2,0(r2)
   3c7ec:	e0bffe15 	stw	r2,-8(fp)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3c7f0:	008001b4 	movhi	r2,6
   3c7f4:	10b99c04 	addi	r2,r2,-6544
   3c7f8:	e0bffc15 	stw	r2,-16(fp)
   3c7fc:	00002706 	br	3c89c <cb_arpent_tmo+0xd4>
   {
      if (tp->t_pro_addr != 0)
   3c800:	e0bffc17 	ldw	r2,-16(fp)
   3c804:	10800017 	ldw	r2,0(r2)
   3c808:	10002126 	beq	r2,zero,3c890 <cb_arpent_tmo+0xc8>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
   3c80c:	e0bffc17 	ldw	r2,-16(fp)
   3c810:	10800417 	ldw	r2,16(r2)
   3c814:	10000b26 	beq	r2,zero,3c844 <cb_arpent_tmo+0x7c>
   3c818:	e0bffc17 	ldw	r2,-16(fp)
   3c81c:	10800517 	ldw	r2,20(r2)
   3c820:	e0fffe17 	ldw	r3,-8(fp)
   3c824:	1885c83a 	sub	r2,r3,r2
   3c828:	10801970 	cmpltui	r2,r2,101
   3c82c:	1000051e 	bne	r2,zero,3c844 <cb_arpent_tmo+0x7c>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
   3c830:	e13ffc17 	ldw	r4,-16(fp)
   3c834:	003b9540 	call	3b954 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
   3c838:	e0bffc17 	ldw	r2,-16(fp)
   3c83c:	10000015 	stw	zero,0(r2)
   3c840:	00001306 	br	3c890 <cb_arpent_tmo+0xc8>
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
   3c844:	e0bffc17 	ldw	r2,-16(fp)
   3c848:	10800517 	ldw	r2,20(r2)
   3c84c:	e0fffe17 	ldw	r3,-8(fp)
   3c850:	1885c83a 	sub	r2,r3,r2
   3c854:	1007883a 	mov	r3,r2
   3c858:	d0a04c17 	ldw	r2,-32464(gp)
   3c85c:	18800916 	blt	r3,r2,3c884 <cb_arpent_tmo+0xbc>
                  ((int)(lticks - tp->lasttime)   >= TPS))
   3c860:	e0bffc17 	ldw	r2,-16(fp)
   3c864:	10800617 	ldw	r2,24(r2)
   3c868:	e0fffe17 	ldw	r3,-8(fp)
   3c86c:	1885c83a 	sub	r2,r3,r2
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
   3c870:	10801910 	cmplti	r2,r2,100
   3c874:	1000031e 	bne	r2,zero,3c884 <cb_arpent_tmo+0xbc>
                  ((int)(lticks - tp->lasttime)   >= TPS))
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
   3c878:	e0bffc17 	ldw	r2,-16(fp)
   3c87c:	10000015 	stw	zero,0(r2)
   3c880:	00000306 	br	3c890 <cb_arpent_tmo+0xc8>
         }
         else
            arp_count++;
   3c884:	e0bffd17 	ldw	r2,-12(fp)
   3c888:	10800044 	addi	r2,r2,1
   3c88c:	e0bffd15 	stw	r2,-12(fp)
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   3c890:	e0bffc17 	ldw	r2,-16(fp)
   3c894:	10800804 	addi	r2,r2,32
   3c898:	e0bffc15 	stw	r2,-16(fp)
   3c89c:	e0fffc17 	ldw	r3,-16(fp)
   3c8a0:	008001b4 	movhi	r2,6
   3c8a4:	10b9dc04 	addi	r2,r2,-6288
   3c8a8:	18bfd536 	bltu	r3,r2,3c800 <__alt_mem_descriptor_memory+0xdeffc800>
            arp_count++;
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
   3c8ac:	e0bffd17 	ldw	r2,-12(fp)
   3c8b0:	1000041e 	bne	r2,zero,3c8c4 <cb_arpent_tmo+0xfc>
   {
      in_timerkill(arp_timer);
   3c8b4:	d0a8ab17 	ldw	r2,-23892(gp)
   3c8b8:	1009883a 	mov	r4,r2
   3c8bc:	003b59c0 	call	3b59c <in_timerkill>
      arp_timer = 0;
   3c8c0:	d028ab15 	stw	zero,-23892(gp)
   }
      
   USE_ARG(arg);
}
   3c8c4:	e037883a 	mov	sp,fp
   3c8c8:	dfc00117 	ldw	ra,4(sp)
   3c8cc:	df000017 	ldw	fp,0(sp)
   3c8d0:	dec00204 	addi	sp,sp,8
   3c8d4:	f800283a 	ret

0003c8d8 <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
   3c8d8:	defff704 	addi	sp,sp,-36
   3c8dc:	dfc00815 	stw	ra,32(sp)
   3c8e0:	df000715 	stw	fp,28(sp)
   3c8e4:	df000704 	addi	fp,sp,28
   3c8e8:	e13ffe15 	stw	r4,-8(fp)
   3c8ec:	e17fff15 	stw	r5,-4(fp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
   3c8f0:	e0bffe17 	ldw	r2,-8(fp)
   3c8f4:	10802717 	ldw	r2,156(r2)
   3c8f8:	e0bff915 	stw	r2,-28(fp)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
   3c8fc:	01000084 	movi	r4,2
   3c900:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
   3c904:	01000c04 	movi	r4,48
   3c908:	002a53c0 	call	2a53c <pk_alloc>
   3c90c:	e0bffa15 	stw	r2,-24(fp)
   if (!arppkt)
   3c910:	e0bffa17 	ldw	r2,-24(fp)
   3c914:	1000041e 	bne	r2,zero,3c928 <grat_arp+0x50>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c918:	01000084 	movi	r4,2
   3c91c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
   3c920:	00bffa84 	movi	r2,-22
   3c924:	00009506 	br	3cb7c <grat_arp+0x2a4>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3c928:	01000084 	movi	r4,2
   3c92c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
   3c930:	e0bffa17 	ldw	r2,-24(fp)
   3c934:	10c00117 	ldw	r3,4(r2)
   3c938:	e0bffa17 	ldw	r2,-24(fp)
   3c93c:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
   3c940:	e0bffa17 	ldw	r2,-24(fp)
   3c944:	00c00c04 	movi	r3,48
   3c948:	10c00415 	stw	r3,16(r2)
   arppkt->net = net;
   3c94c:	e0bffa17 	ldw	r2,-24(fp)
   3c950:	e0fffe17 	ldw	r3,-8(fp)
   3c954:	10c00615 	stw	r3,24(r2)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
   3c958:	e0bffa17 	ldw	r2,-24(fp)
   3c95c:	10800117 	ldw	r2,4(r2)
   3c960:	10800084 	addi	r2,r2,2
   3c964:	e0bffb15 	stw	r2,-20(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
   3c968:	e0bffa17 	ldw	r2,-24(fp)
   3c96c:	10800117 	ldw	r2,4(r2)
   3c970:	10800404 	addi	r2,r2,16
   3c974:	e0bffc15 	stw	r2,-16(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
   3c978:	e0bffc17 	ldw	r2,-16(fp)
   3c97c:	00c04004 	movi	r3,256
   3c980:	10c0000d 	sth	r3,0(r2)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   3c984:	e0bffc17 	ldw	r2,-16(fp)
   3c988:	00c00204 	movi	r3,8
   3c98c:	10c0008d 	sth	r3,2(r2)
   arphdr->ar_hln = 6;
   3c990:	e0bffc17 	ldw	r2,-16(fp)
   3c994:	00c00184 	movi	r3,6
   3c998:	10c00105 	stb	r3,4(r2)
   arphdr->ar_pln = 4;
   3c99c:	e0bffc17 	ldw	r2,-16(fp)
   3c9a0:	00c00104 	movi	r3,4
   3c9a4:	10c00145 	stb	r3,5(r2)
   
   /* ARP req? */
   if (flag == 0)
   3c9a8:	e0bfff17 	ldw	r2,-4(fp)
   3c9ac:	1000041e 	bne	r2,zero,3c9c0 <grat_arp+0xe8>
      /* yup */
      arphdr->ar_op = ARREQ;
   3c9b0:	e0bffc17 	ldw	r2,-16(fp)
   3c9b4:	00c04004 	movi	r3,256
   3c9b8:	10c0018d 	sth	r3,6(r2)
   3c9bc:	00000306 	br	3c9cc <grat_arp+0xf4>
   else
     /* nope */
      arphdr->ar_op = ARREP;
   3c9c0:	e0bffc17 	ldw	r2,-16(fp)
   3c9c4:	00c08004 	movi	r3,512
   3c9c8:	10c0018d 	sth	r3,6(r2)
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
   3c9cc:	e0bffe17 	ldw	r2,-8(fp)
   3c9d0:	10c00a17 	ldw	r3,40(r2)
   3c9d4:	e0bffc17 	ldw	r2,-16(fp)
   3c9d8:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
   3c9dc:	e0bffe17 	ldw	r2,-8(fp)
   3c9e0:	10c00a17 	ldw	r3,40(r2)
   3c9e4:	e0bffc17 	ldw	r2,-16(fp)
   3c9e8:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
   3c9ec:	e0bffc17 	ldw	r2,-16(fp)
   3c9f0:	10c00204 	addi	r3,r2,8
   3c9f4:	e0bff917 	ldw	r2,-28(fp)
   3c9f8:	10800517 	ldw	r2,20(r2)
   3c9fc:	1809883a 	mov	r4,r3
   3ca00:	100b883a 	mov	r5,r2
   3ca04:	01800184 	movi	r6,6
   3ca08:	0007dc80 	call	7dc8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
   3ca0c:	e13ffb17 	ldw	r4,-20(fp)
   3ca10:	01403fc4 	movi	r5,255
   3ca14:	01800184 	movi	r6,6
   3ca18:	0007f240 	call	7f24 <memset>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
   3ca1c:	e0bffb17 	ldw	r2,-20(fp)
   3ca20:	10c00184 	addi	r3,r2,6
   3ca24:	e0bff917 	ldw	r2,-28(fp)
   3ca28:	10800517 	ldw	r2,20(r2)
   3ca2c:	1809883a 	mov	r4,r3
   3ca30:	100b883a 	mov	r5,r2
   3ca34:	01800184 	movi	r6,6
   3ca38:	0007dc80 	call	7dc8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
   3ca3c:	e0bffb17 	ldw	r2,-20(fp)
   3ca40:	10800304 	addi	r2,r2,12
   3ca44:	00c00204 	movi	r3,8
   3ca48:	10c00005 	stb	r3,0(r2)
   3ca4c:	e0bffb17 	ldw	r2,-20(fp)
   3ca50:	10800344 	addi	r2,r2,13
   3ca54:	00c00184 	movi	r3,6
   3ca58:	10c00005 	stb	r3,0(r2)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
   3ca5c:	e0bffc17 	ldw	r2,-16(fp)
   3ca60:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
   3ca64:	e0bffd17 	ldw	r2,-12(fp)
   3ca68:	10c00204 	addi	r3,r2,8
   3ca6c:	e0bffc17 	ldw	r2,-16(fp)
   3ca70:	10800204 	addi	r2,r2,8
   3ca74:	1809883a 	mov	r4,r3
   3ca78:	100b883a 	mov	r5,r2
   3ca7c:	01800184 	movi	r6,6
   3ca80:	0007dc80 	call	7dc8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
   3ca84:	e0bffd17 	ldw	r2,-12(fp)
   3ca88:	10c00384 	addi	r3,r2,14
   3ca8c:	e0bffc17 	ldw	r2,-16(fp)
   3ca90:	10800404 	addi	r2,r2,16
   3ca94:	1809883a 	mov	r4,r3
   3ca98:	100b883a 	mov	r5,r2
   3ca9c:	01800104 	movi	r6,4
   3caa0:	0007dc80 	call	7dc8 <memmove>

   /* ARP req? */
   if (flag == 0)
   3caa4:	e0bfff17 	ldw	r2,-4(fp)
   3caa8:	1000091e 	bne	r2,zero,3cad0 <grat_arp+0x1f8>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
   3caac:	e0bffd17 	ldw	r2,-12(fp)
   3cab0:	10c00484 	addi	r3,r2,18
   3cab4:	e0bffc17 	ldw	r2,-16(fp)
   3cab8:	10800504 	addi	r2,r2,20
   3cabc:	1809883a 	mov	r4,r3
   3cac0:	100b883a 	mov	r5,r2
   3cac4:	01800184 	movi	r6,6
   3cac8:	0007dc80 	call	7dc8 <memmove>
   3cacc:	00000806 	br	3caf0 <grat_arp+0x218>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
   3cad0:	e0bffd17 	ldw	r2,-12(fp)
   3cad4:	10c00484 	addi	r3,r2,18
   3cad8:	e0bffc17 	ldw	r2,-16(fp)
   3cadc:	10800204 	addi	r2,r2,8
   3cae0:	1809883a 	mov	r4,r3
   3cae4:	100b883a 	mov	r5,r2
   3cae8:	01800184 	movi	r6,6
   3caec:	0007dc80 	call	7dc8 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
   3caf0:	e0bffd17 	ldw	r2,-12(fp)
   3caf4:	10c00604 	addi	r3,r2,24
   3caf8:	e0bffc17 	ldw	r2,-16(fp)
   3cafc:	10800704 	addi	r2,r2,28
   3cb00:	1809883a 	mov	r4,r3
   3cb04:	100b883a 	mov	r5,r2
   3cb08:	01800104 	movi	r6,4
   3cb0c:	0007dc80 	call	7dc8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
   3cb10:	e0bffe17 	ldw	r2,-8(fp)
   3cb14:	10800417 	ldw	r2,16(r2)
   3cb18:	10000526 	beq	r2,zero,3cb30 <grat_arp+0x258>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
   3cb1c:	e0bffe17 	ldw	r2,-8(fp)
   3cb20:	10800417 	ldw	r2,16(r2)
   3cb24:	e13ffa17 	ldw	r4,-24(fp)
   3cb28:	103ee83a 	callr	r2
   3cb2c:	00000f06 	br	3cb6c <grat_arp+0x294>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
   3cb30:	e0bffe17 	ldw	r2,-8(fp)
   3cb34:	10800317 	ldw	r2,12(r2)
   3cb38:	e0fffa17 	ldw	r3,-24(fp)
   3cb3c:	19000617 	ldw	r4,24(r3)
   3cb40:	e0fffa17 	ldw	r3,-24(fp)
   3cb44:	18c00117 	ldw	r3,4(r3)
   3cb48:	180b883a 	mov	r5,r3
   3cb4c:	01800c04 	movi	r6,48
   3cb50:	103ee83a 	callr	r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3cb54:	01000084 	movi	r4,2
   3cb58:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
   3cb5c:	e13ffa17 	ldw	r4,-24(fp)
   3cb60:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3cb64:	01000084 	movi	r4,2
   3cb68:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
   3cb6c:	d0a8af17 	ldw	r2,-23876(gp)
   3cb70:	10800044 	addi	r2,r2,1
   3cb74:	d0a8af15 	stw	r2,-23876(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
   3cb78:	00800044 	movi	r2,1
}
   3cb7c:	e037883a 	mov	sp,fp
   3cb80:	dfc00117 	ldw	ra,4(sp)
   3cb84:	df000017 	ldw	fp,0(sp)
   3cb88:	dec00204 	addi	sp,sp,8
   3cb8c:	f800283a 	ret

0003cb90 <if_getbynum>:
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
   3cb90:	defffc04 	addi	sp,sp,-16
   3cb94:	dfc00315 	stw	ra,12(sp)
   3cb98:	df000215 	stw	fp,8(sp)
   3cb9c:	df000204 	addi	fp,sp,8
   3cba0:	e13fff15 	stw	r4,-4(fp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3cba4:	008001b4 	movhi	r2,6
   3cba8:	10b9dc04 	addi	r2,r2,-6288
   3cbac:	10800017 	ldw	r2,0(r2)
   3cbb0:	e0bffe15 	stw	r2,-8(fp)
   3cbb4:	00000906 	br	3cbdc <if_getbynum+0x4c>
   {
      if(ifnum-- == 0)
   3cbb8:	e0bfff17 	ldw	r2,-4(fp)
   3cbbc:	10ffffc4 	addi	r3,r2,-1
   3cbc0:	e0ffff15 	stw	r3,-4(fp)
   3cbc4:	1000021e 	bne	r2,zero,3cbd0 <if_getbynum+0x40>
         return ifp;
   3cbc8:	e0bffe17 	ldw	r2,-8(fp)
   3cbcc:	00000706 	br	3cbec <if_getbynum+0x5c>

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3cbd0:	e0bffe17 	ldw	r2,-8(fp)
   3cbd4:	10800017 	ldw	r2,0(r2)
   3cbd8:	e0bffe15 	stw	r2,-8(fp)
   3cbdc:	e0bffe17 	ldw	r2,-8(fp)
   3cbe0:	103ff51e 	bne	r2,zero,3cbb8 <__alt_mem_descriptor_memory+0xdeffcbb8>
   {
      if(ifnum-- == 0)
         return ifp;
   }
   dtrap();
   3cbe4:	002b0f40 	call	2b0f4 <dtrap>
   return NULL;   /* list is not long enough */
   3cbe8:	0005883a 	mov	r2,zero
}
   3cbec:	e037883a 	mov	sp,fp
   3cbf0:	dfc00117 	ldw	ra,4(sp)
   3cbf4:	df000017 	ldw	fp,0(sp)
   3cbf8:	dec00204 	addi	sp,sp,8
   3cbfc:	f800283a 	ret

0003cc00 <isbcast>:
 * RETURNS:  Returns TRUE if broadcast, else false. 
 */

int
isbcast(NET ifc, unsigned char * addr)
{
   3cc00:	defffd04 	addi	sp,sp,-12
   3cc04:	df000215 	stw	fp,8(sp)
   3cc08:	df000204 	addi	fp,sp,8
   3cc0c:	e13ffe15 	stw	r4,-8(fp)
   3cc10:	e17fff15 	stw	r5,-4(fp)
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
   3cc14:	e0bfff17 	ldw	r2,-4(fp)
   3cc18:	108000cc 	andi	r2,r2,3
   3cc1c:	10000e26 	beq	r2,zero,3cc58 <isbcast+0x58>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
   3cc20:	e0bfff17 	ldw	r2,-4(fp)
   3cc24:	1080000b 	ldhu	r2,0(r2)
   3cc28:	10ffffcc 	andi	r3,r2,65535
   3cc2c:	00bfffd4 	movui	r2,65535
   3cc30:	18800226 	beq	r3,r2,3cc3c <isbcast+0x3c>
         return(FALSE);
   3cc34:	0005883a 	mov	r2,zero
   3cc38:	00002206 	br	3ccc4 <isbcast+0xc4>
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
   3cc3c:	e0bfff17 	ldw	r2,-4(fp)
   3cc40:	10800084 	addi	r2,r2,2
   3cc44:	10800017 	ldw	r2,0(r2)
   3cc48:	10bfffe0 	cmpeqi	r2,r2,-1
   3cc4c:	1000101e 	bne	r2,zero,3cc90 <isbcast+0x90>
         return FALSE;
   3cc50:	0005883a 	mov	r2,zero
   3cc54:	00001b06 	br	3ccc4 <isbcast+0xc4>
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
   3cc58:	e0bfff17 	ldw	r2,-4(fp)
   3cc5c:	10800017 	ldw	r2,0(r2)
   3cc60:	10bfffe0 	cmpeqi	r2,r2,-1
   3cc64:	1000021e 	bne	r2,zero,3cc70 <isbcast+0x70>
         return FALSE;
   3cc68:	0005883a 	mov	r2,zero
   3cc6c:	00001506 	br	3ccc4 <isbcast+0xc4>

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
   3cc70:	e0bfff17 	ldw	r2,-4(fp)
   3cc74:	10800104 	addi	r2,r2,4
   3cc78:	1080000b 	ldhu	r2,0(r2)
   3cc7c:	10ffffcc 	andi	r3,r2,65535
   3cc80:	00bfffd4 	movui	r2,65535
   3cc84:	18800226 	beq	r3,r2,3cc90 <isbcast+0x90>
         return(FALSE);
   3cc88:	0005883a 	mov	r2,zero
   3cc8c:	00000d06 	br	3ccc4 <isbcast+0xc4>
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
   3cc90:	e0bffe17 	ldw	r2,-8(fp)
   3cc94:	10802717 	ldw	r2,156(r2)
   3cc98:	10800217 	ldw	r2,8(r2)
   3cc9c:	108005e0 	cmpeqi	r2,r2,23
   3cca0:	1000051e 	bne	r2,zero,3ccb8 <isbcast+0xb8>
       (ifc->n_mib->ifType == SLIP))
   3cca4:	e0bffe17 	ldw	r2,-8(fp)
   3cca8:	10802717 	ldw	r2,156(r2)
   3ccac:	10800217 	ldw	r2,8(r2)
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
         return(FALSE);
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
   3ccb0:	10800718 	cmpnei	r2,r2,28
   3ccb4:	1000021e 	bne	r2,zero,3ccc0 <isbcast+0xc0>
       (ifc->n_mib->ifType == SLIP))
   {
      return FALSE;
   3ccb8:	0005883a 	mov	r2,zero
   3ccbc:	00000106 	br	3ccc4 <isbcast+0xc4>
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
   3ccc0:	00800044 	movi	r2,1
}
   3ccc4:	e037883a 	mov	sp,fp
   3ccc8:	df000017 	ldw	fp,0(sp)
   3cccc:	dec00104 	addi	sp,sp,4
   3ccd0:	f800283a 	ret

0003ccd4 <reg_type>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
   3ccd4:	defffb04 	addi	sp,sp,-20
   3ccd8:	dfc00415 	stw	ra,16(sp)
   3ccdc:	df000315 	stw	fp,12(sp)
   3cce0:	df000304 	addi	fp,sp,12
   3cce4:	2005883a 	mov	r2,r4
   3cce8:	e0bfff0d 	sth	r2,-4(fp)
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3ccec:	008001b4 	movhi	r2,6
   3ccf0:	10b9dc04 	addi	r2,r2,-6288
   3ccf4:	10800017 	ldw	r2,0(r2)
   3ccf8:	e0bffd15 	stw	r2,-12(fp)
   3ccfc:	00001106 	br	3cd44 <reg_type+0x70>
   {
      if (ifp->n_reg_type)    /* make sure call exists */
   3cd00:	e0bffd17 	ldw	r2,-12(fp)
   3cd04:	10800617 	ldw	r2,24(r2)
   3cd08:	10000b26 	beq	r2,zero,3cd38 <reg_type+0x64>
      {
         e = (ifp->n_reg_type)(type, ifp);
   3cd0c:	e0bffd17 	ldw	r2,-12(fp)
   3cd10:	10800617 	ldw	r2,24(r2)
   3cd14:	e0ffff0b 	ldhu	r3,-4(fp)
   3cd18:	1809883a 	mov	r4,r3
   3cd1c:	e17ffd17 	ldw	r5,-12(fp)
   3cd20:	103ee83a 	callr	r2
   3cd24:	e0bffe15 	stw	r2,-8(fp)
         if (e)
   3cd28:	e0bffe17 	ldw	r2,-8(fp)
   3cd2c:	10000226 	beq	r2,zero,3cd38 <reg_type+0x64>
            return e;   /* bails out if error */
   3cd30:	e0bffe17 	ldw	r2,-8(fp)
   3cd34:	00000606 	br	3cd50 <reg_type+0x7c>
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   3cd38:	e0bffd17 	ldw	r2,-12(fp)
   3cd3c:	10800017 	ldw	r2,0(r2)
   3cd40:	e0bffd15 	stw	r2,-12(fp)
   3cd44:	e0bffd17 	ldw	r2,-12(fp)
   3cd48:	103fed1e 	bne	r2,zero,3cd00 <__alt_mem_descriptor_memory+0xdeffcd00>
         e = (ifp->n_reg_type)(type, ifp);
         if (e)
            return e;   /* bails out if error */
      }
   }
   return 0;   /* OK code */
   3cd4c:	0005883a 	mov	r2,zero
}
   3cd50:	e037883a 	mov	sp,fp
   3cd54:	dfc00117 	ldw	ra,4(sp)
   3cd58:	df000017 	ldw	fp,0(sp)
   3cd5c:	dec00204 	addi	sp,sp,8
   3cd60:	f800283a 	ret

0003cd64 <if_killsocks>:
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
   3cd64:	defffa04 	addi	sp,sp,-24
   3cd68:	dfc00515 	stw	ra,20(sp)
   3cd6c:	df000415 	stw	fp,16(sp)
   3cd70:	df000404 	addi	fp,sp,16
   3cd74:	e13fff15 	stw	r4,-4(fp)
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   3cd78:	008001b4 	movhi	r2,6
   3cd7c:	10b8d804 	addi	r2,r2,-7328
   3cd80:	10800017 	ldw	r2,0(r2)
   3cd84:	e0bffc15 	stw	r2,-16(fp)
   while(so)
   3cd88:	00001306 	br	3cdd8 <if_killsocks+0x74>
   {
      if(so->so_pcb)
   3cd8c:	e0bffc17 	ldw	r2,-16(fp)
   3cd90:	10800117 	ldw	r2,4(r2)
   3cd94:	10000526 	beq	r2,zero,3cdac <if_killsocks+0x48>
         so_ifp = so->so_pcb->ifp;
   3cd98:	e0bffc17 	ldw	r2,-16(fp)
   3cd9c:	10800117 	ldw	r2,4(r2)
   3cda0:	10800a17 	ldw	r2,40(r2)
   3cda4:	e0bffd15 	stw	r2,-12(fp)
   3cda8:	00000106 	br	3cdb0 <if_killsocks+0x4c>
      else
         so_ifp = NULL;
   3cdac:	e03ffd15 	stw	zero,-12(fp)
      next = (struct socket *)so->next;
   3cdb0:	e0bffc17 	ldw	r2,-16(fp)
   3cdb4:	10800017 	ldw	r2,0(r2)
   3cdb8:	e0bffe15 	stw	r2,-8(fp)
      if (so_ifp == ifp)
   3cdbc:	e0fffd17 	ldw	r3,-12(fp)
   3cdc0:	e0bfff17 	ldw	r2,-4(fp)
   3cdc4:	1880021e 	bne	r3,r2,3cdd0 <if_killsocks+0x6c>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
   3cdc8:	e13ffc17 	ldw	r4,-16(fp)
   3cdcc:	002fc2c0 	call	2fc2c <soabort>
      }
      so = next;
   3cdd0:	e0bffe17 	ldw	r2,-8(fp)
   3cdd4:	e0bffc15 	stw	r2,-16(fp)
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   while(so)
   3cdd8:	e0bffc17 	ldw	r2,-16(fp)
   3cddc:	103feb1e 	bne	r2,zero,3cd8c <__alt_mem_descriptor_memory+0xdeffcd8c>
          */
         soabort(so);
      }
      so = next;
   }
}
   3cde0:	e037883a 	mov	sp,fp
   3cde4:	dfc00117 	ldw	ra,4(sp)
   3cde8:	df000017 	ldw	fp,0(sp)
   3cdec:	dec00204 	addi	sp,sp,8
   3cdf0:	f800283a 	ret

0003cdf4 <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
   3cdf4:	defffe04 	addi	sp,sp,-8
   3cdf8:	dfc00115 	stw	ra,4(sp)
   3cdfc:	df000015 	stw	fp,0(sp)
   3ce00:	d839883a 	mov	fp,sp

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
   3ce04:	01000204 	movi	r4,8
   3ce08:	003ccd40 	call	3ccd4 <reg_type>
   3ce0c:	10000526 	beq	r2,zero,3ce24 <ip_init+0x30>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
   3ce10:	01000174 	movhi	r4,5
   3ce14:	213c3904 	addi	r4,r4,-3868
   3ce18:	00083740 	call	8374 <puts>
#endif
      return(1);
   3ce1c:	00800044 	movi	r2,1
   3ce20:	00002906 	br	3cec8 <ip_init+0xd4>
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
   3ce24:	010001b4 	movhi	r4,6
   3ce28:	2139e104 	addi	r4,r4,-6268
   3ce2c:	000b883a 	mov	r5,zero
   3ce30:	01801404 	movi	r6,80
   3ce34:	0007f240 	call	7f24 <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
   3ce38:	008001b4 	movhi	r2,6
   3ce3c:	10b9e104 	addi	r2,r2,-6268
   3ce40:	00c00084 	movi	r3,2
   3ce44:	10c00015 	stw	r3,0(r2)
   ip_mib.ipDefaultTTL = IP_TTL;
   3ce48:	008001b4 	movhi	r2,6
   3ce4c:	10b9e104 	addi	r2,r2,-6268
   3ce50:	00c01004 	movi	r3,64
   3ce54:	10c00115 	stw	r3,4(r2)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
   3ce58:	d0a04e17 	ldw	r2,-32456(gp)
   3ce5c:	10800f24 	muli	r2,r2,60
   3ce60:	1009883a 	mov	r4,r2
   3ce64:	002bce00 	call	2bce0 <npalloc>
   3ce68:	d0a8b215 	stw	r2,-23864(gp)
   if (!rt_mib)
   3ce6c:	d0a8b217 	ldw	r2,-23864(gp)
   3ce70:	1000051e 	bne	r2,zero,3ce88 <ip_init+0x94>
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
   3ce74:	01000174 	movhi	r4,5
   3ce78:	213c4604 	addi	r4,r4,-3816
   3ce7c:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
   3ce80:	00bffb04 	movi	r2,-20
   3ce84:	00001006 	br	3cec8 <ip_init+0xd4>
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
   3ce88:	d0e8b217 	ldw	r3,-23864(gp)
   3ce8c:	d0a04e17 	ldw	r2,-32456(gp)
   3ce90:	10800f24 	muli	r2,r2,60
   3ce94:	1809883a 	mov	r4,r3
   3ce98:	000b883a 	mov	r5,zero
   3ce9c:	100d883a 	mov	r6,r2
   3cea0:	0007f240 	call	7f24 <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
   3cea4:	008001b4 	movhi	r2,6
   3cea8:	10b9e104 	addi	r2,r2,-6268
   3ceac:	00c00044 	movi	r3,1
   3ceb0:	10c00015 	stw	r3,0(r2)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
   3ceb4:	008001b4 	movhi	r2,6
   3ceb8:	10b9e104 	addi	r2,r2,-6268
   3cebc:	00c01e04 	movi	r3,120
   3cec0:	10c00c15 	stw	r3,48(r2)
      return(1);
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
   3cec4:	0005883a 	mov	r2,zero
}
   3cec8:	e037883a 	mov	sp,fp
   3cecc:	dfc00117 	ldw	ra,4(sp)
   3ced0:	df000017 	ldw	fp,0(sp)
   3ced4:	dec00204 	addi	sp,sp,8
   3ced8:	f800283a 	ret

0003cedc <ip_bldhead>:
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
   3cedc:	defff804 	addi	sp,sp,-32
   3cee0:	dfc00715 	stw	ra,28(sp)
   3cee4:	df000615 	stw	fp,24(sp)
   3cee8:	df000604 	addi	fp,sp,24
   3ceec:	e13ffc15 	stw	r4,-16(fp)
   3cef0:	e17ffd15 	stw	r5,-12(fp)
   3cef4:	3007883a 	mov	r3,r6
   3cef8:	3805883a 	mov	r2,r7
   3cefc:	e0fffe05 	stb	r3,-8(fp)
   3cf00:	e0bfff0d 	sth	r2,-4(fp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
   3cf04:	e0bffc17 	ldw	r2,-16(fp)
   3cf08:	10800317 	ldw	r2,12(r2)
   3cf0c:	10fffb04 	addi	r3,r2,-20
   3cf10:	e0bffc17 	ldw	r2,-16(fp)
   3cf14:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
   3cf18:	e0bffc17 	ldw	r2,-16(fp)
   3cf1c:	10800417 	ldw	r2,16(r2)
   3cf20:	10c00504 	addi	r3,r2,20
   3cf24:	e0bffc17 	ldw	r2,-16(fp)
   3cf28:	10c00415 	stw	r3,16(r2)

   pip = (struct ip*)p->nb_prot;
   3cf2c:	e0bffc17 	ldw	r2,-16(fp)
   3cf30:	10800317 	ldw	r2,12(r2)
   3cf34:	e0bffa15 	stw	r2,-24(fp)

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   3cf38:	e0bffa17 	ldw	r2,-24(fp)
   3cf3c:	00c01144 	movi	r3,69
   3cf40:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   3cf44:	e0bffa17 	ldw	r2,-24(fp)
   3cf48:	e0ffff0b 	ldhu	r3,-4(fp)
   3cf4c:	10c0018d 	sth	r3,6(r2)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
   3cf50:	e0bffd17 	ldw	r2,-12(fp)
   3cf54:	10bfffcc 	andi	r2,r2,65535
   3cf58:	1004d23a 	srli	r2,r2,8
   3cf5c:	1007883a 	mov	r3,r2
   3cf60:	e0bffd17 	ldw	r2,-12(fp)
   3cf64:	10bfffcc 	andi	r2,r2,65535
   3cf68:	1004923a 	slli	r2,r2,8
   3cf6c:	1884b03a 	or	r2,r3,r2
   3cf70:	1007883a 	mov	r3,r2
   3cf74:	e0bffa17 	ldw	r2,-24(fp)
   3cf78:	10c0010d 	sth	r3,4(r2)
   pip->ip_len = htons((unshort)p->nb_plen);
   3cf7c:	e0bffc17 	ldw	r2,-16(fp)
   3cf80:	10800417 	ldw	r2,16(r2)
   3cf84:	10bfffcc 	andi	r2,r2,65535
   3cf88:	1004d23a 	srli	r2,r2,8
   3cf8c:	1007883a 	mov	r3,r2
   3cf90:	e0bffc17 	ldw	r2,-16(fp)
   3cf94:	10800417 	ldw	r2,16(r2)
   3cf98:	10bfffcc 	andi	r2,r2,65535
   3cf9c:	1004923a 	slli	r2,r2,8
   3cfa0:	1884b03a 	or	r2,r3,r2
   3cfa4:	1007883a 	mov	r3,r2
   3cfa8:	e0bffa17 	ldw	r2,-24(fp)
   3cfac:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
   3cfb0:	e0bffa17 	ldw	r2,-24(fp)
   3cfb4:	e0fffe03 	ldbu	r3,-8(fp)
   3cfb8:	10c00245 	stb	r3,9(r2)

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
   3cfbc:	e0bffc17 	ldw	r2,-16(fp)
   3cfc0:	10800c17 	ldw	r2,48(r2)
   3cfc4:	e0bffb15 	stw	r2,-20(fp)
   3cfc8:	e0bffb17 	ldw	r2,-20(fp)
   3cfcc:	10001126 	beq	r2,zero,3d014 <ip_bldhead+0x138>
   {
	  /* yup */
	  if (sopts->ip_ttl)
   3cfd0:	e0bffb17 	ldw	r2,-20(fp)
   3cfd4:	10800043 	ldbu	r2,1(r2)
   3cfd8:	10803fcc 	andi	r2,r2,255
   3cfdc:	10000526 	beq	r2,zero,3cff4 <ip_bldhead+0x118>
         pip->ip_time = sopts->ip_ttl;
   3cfe0:	e0bffb17 	ldw	r2,-20(fp)
   3cfe4:	10c00043 	ldbu	r3,1(r2)
   3cfe8:	e0bffa17 	ldw	r2,-24(fp)
   3cfec:	10c00205 	stb	r3,8(r2)
   3cff0:	00000306 	br	3d000 <ip_bldhead+0x124>
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
   3cff4:	e0bffa17 	ldw	r2,-24(fp)
   3cff8:	00c01004 	movi	r3,64
   3cffc:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
   3d000:	e0bffb17 	ldw	r2,-20(fp)
   3d004:	10c00003 	ldbu	r3,0(r2)
   3d008:	e0bffa17 	ldw	r2,-24(fp)
   3d00c:	10c00045 	stb	r3,1(r2)
   3d010:	00000506 	br	3d028 <ip_bldhead+0x14c>
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
   3d014:	e0bffa17 	ldw	r2,-24(fp)
   3d018:	00c01004 	movi	r3,64
   3d01c:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
   3d020:	e0bffa17 	ldw	r2,-24(fp)
   3d024:	10000045 	stb	zero,1(r2)
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
   3d028:	e0bffa17 	ldw	r2,-24(fp)
   3d02c:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
   3d030:	e13ffa17 	ldw	r4,-24(fp)
   3d034:	01400284 	movi	r5,10
   3d038:	00263480 	call	26348 <cksum>
   3d03c:	0084303a 	nor	r2,zero,r2
   3d040:	1007883a 	mov	r3,r2
   3d044:	e0bffa17 	ldw	r2,-24(fp)
   3d048:	10c0028d 	sth	r3,10(r2)
}
   3d04c:	e037883a 	mov	sp,fp
   3d050:	dfc00117 	ldw	ra,4(sp)
   3d054:	df000017 	ldw	fp,0(sp)
   3d058:	dec00204 	addi	sp,sp,8
   3d05c:	f800283a 	ret

0003d060 <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
   3d060:	defff004 	addi	sp,sp,-64
   3d064:	dfc00f15 	stw	ra,60(sp)
   3d068:	df000e15 	stw	fp,56(sp)
   3d06c:	df000e04 	addi	fp,sp,56
   3d070:	e13fff15 	stw	r4,-4(fp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
   3d074:	e0bfff17 	ldw	r2,-4(fp)
   3d078:	10800717 	ldw	r2,28(r2)
   3d07c:	1006d63a 	srli	r3,r2,24
   3d080:	e0bfff17 	ldw	r2,-4(fp)
   3d084:	10800717 	ldw	r2,28(r2)
   3d088:	1004d23a 	srli	r2,r2,8
   3d08c:	10bfc00c 	andi	r2,r2,65280
   3d090:	1886b03a 	or	r3,r3,r2
   3d094:	e0bfff17 	ldw	r2,-4(fp)
   3d098:	10800717 	ldw	r2,28(r2)
   3d09c:	10bfc00c 	andi	r2,r2,65280
   3d0a0:	1004923a 	slli	r2,r2,8
   3d0a4:	1886b03a 	or	r3,r3,r2
   3d0a8:	e0bfff17 	ldw	r2,-4(fp)
   3d0ac:	10800717 	ldw	r2,28(r2)
   3d0b0:	1004963a 	slli	r2,r2,24
   3d0b4:	1884b03a 	or	r2,r3,r2
   3d0b8:	10fc002c 	andhi	r3,r2,61440
   3d0bc:	00b80034 	movhi	r2,57344
   3d0c0:	1880ac1e 	bne	r3,r2,3d374 <ip_write_internal+0x314>
   {
      if (p->imo != NULL)
   3d0c4:	e0bfff17 	ldw	r2,-4(fp)
   3d0c8:	10800b17 	ldw	r2,44(r2)
   3d0cc:	10001426 	beq	r2,zero,3d120 <ip_write_internal+0xc0>
         if (p->imo->imo_multicast_netp)
   3d0d0:	e0bfff17 	ldw	r2,-4(fp)
   3d0d4:	10800b17 	ldw	r2,44(r2)
   3d0d8:	10800017 	ldw	r2,0(r2)
   3d0dc:	10000626 	beq	r2,zero,3d0f8 <ip_write_internal+0x98>
            p->net = p->imo->imo_multicast_netp;
   3d0e0:	e0bfff17 	ldw	r2,-4(fp)
   3d0e4:	10800b17 	ldw	r2,44(r2)
   3d0e8:	10c00017 	ldw	r3,0(r2)
   3d0ec:	e0bfff17 	ldw	r2,-4(fp)
   3d0f0:	10c00615 	stw	r3,24(r2)
   3d0f4:	00002706 	br	3d194 <ip_write_internal+0x134>
         else
            p->net = iproute(p->fhost, &firsthop);
   3d0f8:	e0bfff17 	ldw	r2,-4(fp)
   3d0fc:	10c00717 	ldw	r3,28(r2)
   3d100:	e0bffe04 	addi	r2,fp,-8
   3d104:	1809883a 	mov	r4,r3
   3d108:	100b883a 	mov	r5,r2
   3d10c:	003eaf40 	call	3eaf4 <iproute>
   3d110:	1007883a 	mov	r3,r2
   3d114:	e0bfff17 	ldw	r2,-4(fp)
   3d118:	10c00615 	stw	r3,24(r2)
   3d11c:	00001d06 	br	3d194 <ip_write_internal+0x134>
      else
      {
         for (i = 0; i < ifNumber; i++)
   3d120:	e03ff515 	stw	zero,-44(fp)
   3d124:	00001606 	br	3d180 <ip_write_internal+0x120>
            if (nets[i]->n_mcastlist)
   3d128:	008001b4 	movhi	r2,6
   3d12c:	10b79b04 	addi	r2,r2,-8596
   3d130:	e0fff517 	ldw	r3,-44(fp)
   3d134:	18c7883a 	add	r3,r3,r3
   3d138:	18c7883a 	add	r3,r3,r3
   3d13c:	10c5883a 	add	r2,r2,r3
   3d140:	10800017 	ldw	r2,0(r2)
   3d144:	10802b17 	ldw	r2,172(r2)
   3d148:	10000a26 	beq	r2,zero,3d174 <ip_write_internal+0x114>
            {
               p->net = nets[i];
   3d14c:	008001b4 	movhi	r2,6
   3d150:	10b79b04 	addi	r2,r2,-8596
   3d154:	e0fff517 	ldw	r3,-44(fp)
   3d158:	18c7883a 	add	r3,r3,r3
   3d15c:	18c7883a 	add	r3,r3,r3
   3d160:	10c5883a 	add	r2,r2,r3
   3d164:	10c00017 	ldw	r3,0(r2)
   3d168:	e0bfff17 	ldw	r2,-4(fp)
   3d16c:	10c00615 	stw	r3,24(r2)
               break;
   3d170:	00000806 	br	3d194 <ip_write_internal+0x134>
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
   3d174:	e0bff517 	ldw	r2,-44(fp)
   3d178:	10800044 	addi	r2,r2,1
   3d17c:	e0bff515 	stw	r2,-44(fp)
   3d180:	00800174 	movhi	r2,5
   3d184:	108f9a04 	addi	r2,r2,15976
   3d188:	10800017 	ldw	r2,0(r2)
   3d18c:	e0fff517 	ldw	r3,-44(fp)
   3d190:	18bfe536 	bltu	r3,r2,3d128 <__alt_mem_descriptor_memory+0xdeffd128>
               break;
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
   3d194:	e0bfff17 	ldw	r2,-4(fp)
   3d198:	10800617 	ldw	r2,24(r2)
   3d19c:	10000426 	beq	r2,zero,3d1b0 <ip_write_internal+0x150>
   3d1a0:	e0bfff17 	ldw	r2,-4(fp)
   3d1a4:	10800617 	ldw	r2,24(r2)
   3d1a8:	10802b17 	ldw	r2,172(r2)
   3d1ac:	10002c1e 	bne	r2,zero,3d260 <ip_write_internal+0x200>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
   3d1b0:	00800174 	movhi	r2,5
   3d1b4:	108f9904 	addi	r2,r2,15972
   3d1b8:	10800017 	ldw	r2,0(r2)
   3d1bc:	1080840c 	andi	r2,r2,528
   3d1c0:	10001826 	beq	r2,zero,3d224 <ip_write_internal+0x1c4>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d1c4:	e0bfff17 	ldw	r2,-4(fp)
   3d1c8:	11800417 	ldw	r6,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d1cc:	e0bfff17 	ldw	r2,-4(fp)
   3d1d0:	10800717 	ldw	r2,28(r2)
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d1d4:	11c03fcc 	andi	r7,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d1d8:	e0bfff17 	ldw	r2,-4(fp)
   3d1dc:	10800717 	ldw	r2,28(r2)
   3d1e0:	1004d23a 	srli	r2,r2,8
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d1e4:	11003fcc 	andi	r4,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d1e8:	e0bfff17 	ldw	r2,-4(fp)
   3d1ec:	10800717 	ldw	r2,28(r2)
   3d1f0:	1004d43a 	srli	r2,r2,16
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d1f4:	10c03fcc 	andi	r3,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d1f8:	e0bfff17 	ldw	r2,-4(fp)
   3d1fc:	10800717 	ldw	r2,28(r2)
   3d200:	1004d63a 	srli	r2,r2,24
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d204:	d9000015 	stw	r4,0(sp)
   3d208:	d8c00115 	stw	r3,4(sp)
   3d20c:	d8800215 	stw	r2,8(sp)
   3d210:	01000174 	movhi	r4,5
   3d214:	213c5004 	addi	r4,r4,-3776
   3d218:	e17fff17 	ldw	r5,-4(fp)
   3d21c:	00080f80 	call	80f8 <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
   3d220:	002b0f40 	call	2b0f4 <dtrap>
         }
#endif
         ip_mib.ipOutNoRoutes++;
   3d224:	008001b4 	movhi	r2,6
   3d228:	10b9e104 	addi	r2,r2,-6268
   3d22c:	10800b17 	ldw	r2,44(r2)
   3d230:	10c00044 	addi	r3,r2,1
   3d234:	008001b4 	movhi	r2,6
   3d238:	10b9e104 	addi	r2,r2,-6268
   3d23c:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3d240:	01000084 	movi	r4,2
   3d244:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   3d248:	e13fff17 	ldw	r4,-4(fp)
   3d24c:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d250:	01000084 	movi	r4,2
   3d254:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
   3d258:	00bff7c4 	movi	r2,-33
   3d25c:	00014606 	br	3d778 <ip_write_internal+0x718>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
   3d260:	e0bfff17 	ldw	r2,-4(fp)
   3d264:	10c00717 	ldw	r3,28(r2)
   3d268:	e0bfff17 	ldw	r2,-4(fp)
   3d26c:	10800617 	ldw	r2,24(r2)
   3d270:	1809883a 	mov	r4,r3
   3d274:	100b883a 	mov	r5,r2
   3d278:	0041a5c0 	call	41a5c <lookup_mcast>
   3d27c:	e0bff715 	stw	r2,-36(fp)
      if ((inm != NULL) &&
   3d280:	e0bff717 	ldw	r2,-36(fp)
   3d284:	10001d26 	beq	r2,zero,3d2fc <ip_write_internal+0x29c>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
   3d288:	e0bfff17 	ldw	r2,-4(fp)
   3d28c:	10800b17 	ldw	r2,44(r2)
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
      if ((inm != NULL) &&
   3d290:	10000526 	beq	r2,zero,3d2a8 <ip_write_internal+0x248>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
   3d294:	e0bfff17 	ldw	r2,-4(fp)
   3d298:	10800b17 	ldw	r2,44(r2)
   3d29c:	10800143 	ldbu	r2,5(r2)
   3d2a0:	10803fcc 	andi	r2,r2,255
   3d2a4:	10001526 	beq	r2,zero,3d2fc <ip_write_internal+0x29c>
      {
         p->type = IPTP;
   3d2a8:	e0bfff17 	ldw	r2,-4(fp)
   3d2ac:	00c00204 	movi	r3,8
   3d2b0:	10c0080d 	sth	r3,32(r2)
         pkt2 = ip_copypkt(p);
   3d2b4:	e13fff17 	ldw	r4,-4(fp)
   3d2b8:	003ed180 	call	3ed18 <ip_copypkt>
   3d2bc:	e0bff815 	stw	r2,-32(fp)
         if (pkt2)
   3d2c0:	e0bff817 	ldw	r2,-32(fp)
   3d2c4:	10000d26 	beq	r2,zero,3d2fc <ip_write_internal+0x29c>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
   3d2c8:	01000044 	movi	r4,1
   3d2cc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
   3d2d0:	010001b4 	movhi	r4,6
   3d2d4:	2136d604 	addi	r4,r4,-9384
   3d2d8:	e17ff817 	ldw	r5,-32(fp)
   3d2dc:	002aacc0 	call	2aacc <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
   3d2e0:	01000044 	movi	r4,1
   3d2e4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
   3d2e8:	00800174 	movhi	r2,5
   3d2ec:	108fc104 	addi	r2,r2,16132
   3d2f0:	10800017 	ldw	r2,0(r2)
   3d2f4:	1009883a 	mov	r4,r2
   3d2f8:	001dd180 	call	1dd18 <OSSemPost>
       * Also, multicasts addressed to the loopback interface
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
   3d2fc:	e0bfff17 	ldw	r2,-4(fp)
   3d300:	10800317 	ldw	r2,12(r2)
   3d304:	e0bff915 	stw	r2,-28(fp)
      if ((pip->ip_time == 0) || 
   3d308:	e0bff917 	ldw	r2,-28(fp)
   3d30c:	10800203 	ldbu	r2,8(r2)
   3d310:	10803fcc 	andi	r2,r2,255
   3d314:	10000b26 	beq	r2,zero,3d344 <ip_write_internal+0x2e4>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
   3d318:	e0bfff17 	ldw	r2,-4(fp)
   3d31c:	10800717 	ldw	r2,28(r2)
   3d320:	10803fcc 	andi	r2,r2,255
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
      if ((pip->ip_time == 0) || 
   3d324:	10801fe0 	cmpeqi	r2,r2,127
   3d328:	1000061e 	bne	r2,zero,3d344 <ip_write_internal+0x2e4>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
          (p->fhost == p->net->n_ipaddr))
   3d32c:	e0bfff17 	ldw	r2,-4(fp)
   3d330:	10c00717 	ldw	r3,28(r2)
   3d334:	e0bfff17 	ldw	r2,-4(fp)
   3d338:	10800617 	ldw	r2,24(r2)
   3d33c:	10800a17 	ldw	r2,40(r2)
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
      if ((pip->ip_time == 0) || 
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
   3d340:	1880081e 	bne	r3,r2,3d364 <ip_write_internal+0x304>
          (p->fhost == p->net->n_ipaddr))
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3d344:	01000084 	movi	r4,2
   3d348:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   3d34c:	e13fff17 	ldw	r4,-4(fp)
   3d350:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d354:	01000084 	movi	r4,2
   3d358:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return(SUCCESS);
   3d35c:	0005883a 	mov	r2,zero
   3d360:	00010506 	br	3d778 <ip_write_internal+0x718>
      }

      firsthop = p->fhost;
   3d364:	e0bfff17 	ldw	r2,-4(fp)
   3d368:	10800717 	ldw	r2,28(r2)
   3d36c:	e0bffe15 	stw	r2,-8(fp)

      goto sendit;
   3d370:	00004006 	br	3d474 <ip_write_internal+0x414>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
   3d374:	e0bfff17 	ldw	r2,-4(fp)
   3d378:	10800717 	ldw	r2,28(r2)
   3d37c:	10bfffd8 	cmpnei	r2,r2,-1
   3d380:	1000041e 	bne	r2,zero,3d394 <ip_write_internal+0x334>
   {
      firsthop = p->fhost;
   3d384:	e0bfff17 	ldw	r2,-4(fp)
   3d388:	10800717 	ldw	r2,28(r2)
   3d38c:	e0bffe15 	stw	r2,-8(fp)
   3d390:	00003806 	br	3d474 <ip_write_internal+0x414>
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
   3d394:	e0bfff17 	ldw	r2,-4(fp)
   3d398:	10c00717 	ldw	r3,28(r2)
   3d39c:	e0bffe04 	addi	r2,fp,-8
   3d3a0:	1809883a 	mov	r4,r3
   3d3a4:	100b883a 	mov	r5,r2
   3d3a8:	003eaf40 	call	3eaf4 <iproute>
   3d3ac:	1007883a 	mov	r3,r2
   3d3b0:	e0bfff17 	ldw	r2,-4(fp)
   3d3b4:	10c00615 	stw	r3,24(r2)
      if (p->net == NULL)
   3d3b8:	e0bfff17 	ldw	r2,-4(fp)
   3d3bc:	10800617 	ldw	r2,24(r2)
   3d3c0:	10002c1e 	bne	r2,zero,3d474 <ip_write_internal+0x414>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
   3d3c4:	00800174 	movhi	r2,5
   3d3c8:	108f9904 	addi	r2,r2,15972
   3d3cc:	10800017 	ldw	r2,0(r2)
   3d3d0:	1080840c 	andi	r2,r2,528
   3d3d4:	10001826 	beq	r2,zero,3d438 <ip_write_internal+0x3d8>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d3d8:	e0bfff17 	ldw	r2,-4(fp)
   3d3dc:	11800417 	ldw	r6,16(r2)
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d3e0:	e0bfff17 	ldw	r2,-4(fp)
   3d3e4:	10800717 	ldw	r2,28(r2)
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d3e8:	11c03fcc 	andi	r7,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d3ec:	e0bfff17 	ldw	r2,-4(fp)
   3d3f0:	10800717 	ldw	r2,28(r2)
   3d3f4:	1004d23a 	srli	r2,r2,8
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d3f8:	11003fcc 	andi	r4,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d3fc:	e0bfff17 	ldw	r2,-4(fp)
   3d400:	10800717 	ldw	r2,28(r2)
   3d404:	1004d43a 	srli	r2,r2,16
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d408:	10c03fcc 	andi	r3,r2,255
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
   3d40c:	e0bfff17 	ldw	r2,-4(fp)
   3d410:	10800717 	ldw	r2,28(r2)
   3d414:	1004d63a 	srli	r2,r2,24
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
   3d418:	d9000015 	stw	r4,0(sp)
   3d41c:	d8c00115 	stw	r3,4(sp)
   3d420:	d8800215 	stw	r2,8(sp)
   3d424:	01000174 	movhi	r4,5
   3d428:	213c5004 	addi	r4,r4,-3776
   3d42c:	e17fff17 	ldw	r5,-4(fp)
   3d430:	00080f80 	call	80f8 <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
   3d434:	002b0f40 	call	2b0f4 <dtrap>
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
   3d438:	008001b4 	movhi	r2,6
   3d43c:	10b9e104 	addi	r2,r2,-6268
   3d440:	10800b17 	ldw	r2,44(r2)
   3d444:	10c00044 	addi	r3,r2,1
   3d448:	008001b4 	movhi	r2,6
   3d44c:	10b9e104 	addi	r2,r2,-6268
   3d450:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3d454:	01000084 	movi	r4,2
   3d458:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   3d45c:	e13fff17 	ldw	r4,-4(fp)
   3d460:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d464:	01000084 	movi	r4,2
   3d468:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
   3d46c:	00bff7c4 	movi	r2,-33
   3d470:	0000c106 	br	3d778 <ip_write_internal+0x718>
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
   3d474:	00800174 	movhi	r2,5
   3d478:	108f9904 	addi	r2,r2,15972
   3d47c:	10800017 	ldw	r2,0(r2)
   3d480:	1080800c 	andi	r2,r2,512
   3d484:	10002426 	beq	r2,zero,3d518 <ip_write_internal+0x4b8>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
   3d488:	e0bfff17 	ldw	r2,-4(fp)
   3d48c:	11400417 	ldw	r5,16(r2)
       p->nb_plen, PUSH_IPADDR(p->fhost));
   3d490:	e0bfff17 	ldw	r2,-4(fp)
   3d494:	10800717 	ldw	r2,28(r2)
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
   3d498:	11803fcc 	andi	r6,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
   3d49c:	e0bfff17 	ldw	r2,-4(fp)
   3d4a0:	10800717 	ldw	r2,28(r2)
   3d4a4:	1004d23a 	srli	r2,r2,8
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
   3d4a8:	11c03fcc 	andi	r7,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
   3d4ac:	e0bfff17 	ldw	r2,-4(fp)
   3d4b0:	10800717 	ldw	r2,28(r2)
   3d4b4:	1004d43a 	srli	r2,r2,16
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
   3d4b8:	10c03fcc 	andi	r3,r2,255
       p->nb_plen, PUSH_IPADDR(p->fhost));
   3d4bc:	e0bfff17 	ldw	r2,-4(fp)
   3d4c0:	10800717 	ldw	r2,28(r2)
   3d4c4:	1004d63a 	srli	r2,r2,24
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
   3d4c8:	d8c00015 	stw	r3,0(sp)
   3d4cc:	d8800115 	stw	r2,4(sp)
   3d4d0:	01000174 	movhi	r4,5
   3d4d4:	213c6004 	addi	r4,r4,-3712
   3d4d8:	00080f80 	call	80f8 <printf>
       p->nb_plen, PUSH_IPADDR(p->fhost));
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
   3d4dc:	e0bffe17 	ldw	r2,-8(fp)
   3d4e0:	11403fcc 	andi	r5,r2,255
   3d4e4:	e0bffe17 	ldw	r2,-8(fp)
   3d4e8:	1004d23a 	srli	r2,r2,8
   3d4ec:	11803fcc 	andi	r6,r2,255
   3d4f0:	e0bffe17 	ldw	r2,-8(fp)
   3d4f4:	1004d43a 	srli	r2,r2,16
   3d4f8:	10c03fcc 	andi	r3,r2,255
   3d4fc:	e0bffe17 	ldw	r2,-8(fp)
   3d500:	1004d63a 	srli	r2,r2,24
   3d504:	d8800015 	stw	r2,0(sp)
   3d508:	01000174 	movhi	r4,5
   3d50c:	213c6904 	addi	r4,r4,-3676
   3d510:	180f883a 	mov	r7,r3
   3d514:	00080f80 	call	80f8 <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
   3d518:	e0bfff17 	ldw	r2,-4(fp)
   3d51c:	10800617 	ldw	r2,24(r2)
   3d520:	10c00a17 	ldw	r3,40(r2)
   3d524:	e0bfff17 	ldw	r2,-4(fp)
   3d528:	10800717 	ldw	r2,28(r2)
   3d52c:	1880291e 	bne	r3,r2,3d5d4 <ip_write_internal+0x574>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
   3d530:	e0bfff17 	ldw	r2,-4(fp)
   3d534:	10800717 	ldw	r2,28(r2)
   3d538:	10803fcc 	andi	r2,r2,255
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
   3d53c:	10801fe0 	cmpeqi	r2,r2,127
   3d540:	1000241e 	bne	r2,zero,3d5d4 <ip_write_internal+0x574>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
   {
      if (!(p->net->n_flags & NF_NBPROT))
   3d544:	e0bfff17 	ldw	r2,-4(fp)
   3d548:	10800617 	ldw	r2,24(r2)
   3d54c:	10802a17 	ldw	r2,168(r2)
   3d550:	1080020c 	andi	r2,r2,8
   3d554:	1000091e 	bne	r2,zero,3d57c <ip_write_internal+0x51c>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
   3d558:	002b0f40 	call	2b0f4 <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3d55c:	01000084 	movi	r4,2
   3d560:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   3d564:	e13fff17 	ldw	r4,-4(fp)
   3d568:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d56c:	01000084 	movi	r4,2
   3d570:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
   3d574:	00bffd44 	movi	r2,-11
   3d578:	00007f06 	br	3d778 <ip_write_internal+0x718>
      }
      p->type = IPTP;
   3d57c:	e0bfff17 	ldw	r2,-4(fp)
   3d580:	00c00204 	movi	r3,8
   3d584:	10c0080d 	sth	r3,32(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
   3d588:	0009883a 	mov	r4,zero
   3d58c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
   3d590:	01000044 	movi	r4,1
   3d594:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
   3d598:	010001b4 	movhi	r4,6
   3d59c:	2136d604 	addi	r4,r4,-9384
   3d5a0:	e17fff17 	ldw	r5,-4(fp)
   3d5a4:	002aacc0 	call	2aacc <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
   3d5a8:	01000044 	movi	r4,1
   3d5ac:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
   3d5b0:	0009883a 	mov	r4,zero
   3d5b4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
   3d5b8:	00800174 	movhi	r2,5
   3d5bc:	108fc104 	addi	r2,r2,16132
   3d5c0:	10800017 	ldw	r2,0(r2)
   3d5c4:	1009883a 	mov	r4,r2
   3d5c8:	001dd180 	call	1dd18 <OSSemPost>

      return SUCCESS;
   3d5cc:	0005883a 	mov	r2,zero
   3d5d0:	00006906 	br	3d778 <ip_write_internal+0x718>
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
   3d5d4:	e0bfff17 	ldw	r2,-4(fp)
   3d5d8:	10800a17 	ldw	r2,40(r2)
   3d5dc:	1080040c 	andi	r2,r2,16
   3d5e0:	1005003a 	cmpeq	r2,r2,zero
   3d5e4:	e0bffa05 	stb	r2,-24(fp)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
   3d5e8:	002a9380 	call	2a938 <pk_get_max_intrsafe_buf_len>
   3d5ec:	e0bffb15 	stw	r2,-20(fp)
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
   3d5f0:	e0bffa03 	ldbu	r2,-24(fp)
   3d5f4:	1000081e 	bne	r2,zero,3d618 <ip_write_internal+0x5b8>
       limit = MIN(maxbuflen,p->net->n_mtu);
   3d5f8:	e0bfff17 	ldw	r2,-4(fp)
   3d5fc:	10800617 	ldw	r2,24(r2)
   3d600:	10800917 	ldw	r2,36(r2)
   3d604:	e0fffb17 	ldw	r3,-20(fp)
   3d608:	1880012e 	bgeu	r3,r2,3d610 <ip_write_internal+0x5b0>
   3d60c:	1805883a 	mov	r2,r3
   3d610:	e0bff615 	stw	r2,-40(fp)
   3d614:	00000406 	br	3d628 <ip_write_internal+0x5c8>
   else
       limit = p->net->n_mtu;
   3d618:	e0bfff17 	ldw	r2,-4(fp)
   3d61c:	10800617 	ldw	r2,24(r2)
   3d620:	10800917 	ldw	r2,36(r2)
   3d624:	e0bff615 	stw	r2,-40(fp)

   if ((p->nb_plen + p->net->n_lnh) > limit)
   3d628:	e0bfff17 	ldw	r2,-4(fp)
   3d62c:	10800417 	ldw	r2,16(r2)
   3d630:	e0ffff17 	ldw	r3,-4(fp)
   3d634:	18c00617 	ldw	r3,24(r3)
   3d638:	18c00817 	ldw	r3,32(r3)
   3d63c:	10c5883a 	add	r2,r2,r3
   3d640:	e0fff617 	ldw	r3,-40(fp)
   3d644:	1880072e 	bgeu	r3,r2,3d664 <ip_write_internal+0x604>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
   3d648:	e0bffe17 	ldw	r2,-8(fp)
   3d64c:	e13fff17 	ldw	r4,-4(fp)
   3d650:	100b883a 	mov	r5,r2
   3d654:	003e2080 	call	3e208 <ip_fragment>
   3d658:	e0bffc15 	stw	r2,-16(fp)
      IN_PROFILER(PF_IP, PF_EXIT);
      return(err);
   3d65c:	e0bffc17 	ldw	r2,-16(fp)
   3d660:	00004506 	br	3d778 <ip_write_internal+0x718>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
   3d664:	e0bffa03 	ldbu	r2,-24(fp)
   3d668:	10003f1e 	bne	r2,zero,3d768 <ip_write_internal+0x708>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3d66c:	01000084 	movi	r4,2
   3d670:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
   3d674:	e0bfff17 	ldw	r2,-4(fp)
   3d678:	10800417 	ldw	r2,16(r2)
   3d67c:	e0ffff17 	ldw	r3,-4(fp)
   3d680:	18c00617 	ldw	r3,24(r3)
   3d684:	18c00817 	ldw	r3,32(r3)
   3d688:	10c5883a 	add	r2,r2,r3
   3d68c:	1009883a 	mov	r4,r2
   3d690:	002a53c0 	call	2a53c <pk_alloc>
   3d694:	e0bffd15 	stw	r2,-12(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d698:	01000084 	movi	r4,2
   3d69c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
   3d6a0:	e0bffd17 	ldw	r2,-12(fp)
   3d6a4:	1000081e 	bne	r2,zero,3d6c8 <ip_write_internal+0x668>
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3d6a8:	01000084 	movi	r4,2
   3d6ac:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   3d6b0:	e13fff17 	ldw	r4,-4(fp)
   3d6b4:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d6b8:	01000084 	movi	r4,2
   3d6bc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NOBUFFER;
   3d6c0:	00bffac4 	movi	r2,-21
   3d6c4:	00002c06 	br	3d778 <ip_write_internal+0x718>
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
   3d6c8:	e0bffd17 	ldw	r2,-12(fp)
   3d6cc:	10800117 	ldw	r2,4(r2)
   3d6d0:	e0ffff17 	ldw	r3,-4(fp)
   3d6d4:	18c00617 	ldw	r3,24(r3)
   3d6d8:	18c00817 	ldw	r3,32(r3)
   3d6dc:	10c7883a 	add	r3,r2,r3
   3d6e0:	e0bffd17 	ldw	r2,-12(fp)
   3d6e4:	10c00315 	stw	r3,12(r2)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
   3d6e8:	e0bffd17 	ldw	r2,-12(fp)
   3d6ec:	11000317 	ldw	r4,12(r2)
   3d6f0:	e0bfff17 	ldw	r2,-4(fp)
   3d6f4:	10c00317 	ldw	r3,12(r2)
   3d6f8:	e0bfff17 	ldw	r2,-4(fp)
   3d6fc:	10800417 	ldw	r2,16(r2)
   3d700:	180b883a 	mov	r5,r3
   3d704:	100d883a 	mov	r6,r2
   3d708:	0007c900 	call	7c90 <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
   3d70c:	e0bfff17 	ldw	r2,-4(fp)
   3d710:	10c00417 	ldw	r3,16(r2)
   3d714:	e0bffd17 	ldw	r2,-12(fp)
   3d718:	10c00415 	stw	r3,16(r2)
            newpkt->net = p->net;
   3d71c:	e0bfff17 	ldw	r2,-4(fp)
   3d720:	10c00617 	ldw	r3,24(r2)
   3d724:	e0bffd17 	ldw	r2,-12(fp)
   3d728:	10c00615 	stw	r3,24(r2)
            newpkt->fhost = p->fhost;
   3d72c:	e0bfff17 	ldw	r2,-4(fp)
   3d730:	10c00717 	ldw	r3,28(r2)
   3d734:	e0bffd17 	ldw	r2,-12(fp)
   3d738:	10c00715 	stw	r3,28(r2)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3d73c:	01000084 	movi	r4,2
   3d740:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   3d744:	e13fff17 	ldw	r4,-4(fp)
   3d748:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3d74c:	01000084 	movi	r4,2
   3d750:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
   3d754:	e0bffe17 	ldw	r2,-8(fp)
   3d758:	e13ffd17 	ldw	r4,-12(fp)
   3d75c:	100b883a 	mov	r5,r2
   3d760:	00242940 	call	24294 <ip2mac>
   3d764:	00000406 	br	3d778 <ip_write_internal+0x718>
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
   3d768:	e0bffe17 	ldw	r2,-8(fp)
   3d76c:	e13fff17 	ldw	r4,-4(fp)
   3d770:	100b883a 	mov	r5,r2
   3d774:	00242940 	call	24294 <ip2mac>
      }
   }
}
   3d778:	e037883a 	mov	sp,fp
   3d77c:	dfc00117 	ldw	ra,4(sp)
   3d780:	df000017 	ldw	fp,0(sp)
   3d784:	dec00204 	addi	sp,sp,8
   3d788:	f800283a 	ret

0003d78c <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
   3d78c:	defff904 	addi	sp,sp,-28
   3d790:	dfc00615 	stw	ra,24(sp)
   3d794:	df000515 	stw	fp,20(sp)
   3d798:	df000504 	addi	fp,sp,20
   3d79c:	2005883a 	mov	r2,r4
   3d7a0:	e17fff15 	stw	r5,-4(fp)
   3d7a4:	e0bffe05 	stb	r2,-8(fp)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
   3d7a8:	008001b4 	movhi	r2,6
   3d7ac:	10b9e104 	addi	r2,r2,-6268
   3d7b0:	10800917 	ldw	r2,36(r2)
   3d7b4:	10c00044 	addi	r3,r2,1
   3d7b8:	008001b4 	movhi	r2,6
   3d7bc:	10b9e104 	addi	r2,r2,-6268
   3d7c0:	10c00915 	stw	r3,36(r2)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
   3d7c4:	e0bfff17 	ldw	r2,-4(fp)
   3d7c8:	10800317 	ldw	r2,12(r2)
   3d7cc:	10fffb04 	addi	r3,r2,-20
   3d7d0:	e0bfff17 	ldw	r2,-4(fp)
   3d7d4:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
   3d7d8:	e0bfff17 	ldw	r2,-4(fp)
   3d7dc:	10800417 	ldw	r2,16(r2)
   3d7e0:	10c00504 	addi	r3,r2,20
   3d7e4:	e0bfff17 	ldw	r2,-4(fp)
   3d7e8:	10c00415 	stw	r3,16(r2)
   pip = (struct ip*)(p->nb_prot);
   3d7ec:	e0bfff17 	ldw	r2,-4(fp)
   3d7f0:	10800317 	ldw	r2,12(r2)
   3d7f4:	e0bffc15 	stw	r2,-16(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   3d7f8:	e0bffc17 	ldw	r2,-16(fp)
   3d7fc:	00c01144 	movi	r3,69
   3d800:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   3d804:	e0bffc17 	ldw	r2,-16(fp)
   3d808:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
   3d80c:	d0a04d17 	ldw	r2,-32460(gp)
   3d810:	10bfffcc 	andi	r2,r2,65535
   3d814:	1004d23a 	srli	r2,r2,8
   3d818:	1007883a 	mov	r3,r2
   3d81c:	d0a04d17 	ldw	r2,-32460(gp)
   3d820:	10bfffcc 	andi	r2,r2,65535
   3d824:	1004923a 	slli	r2,r2,8
   3d828:	1884b03a 	or	r2,r3,r2
   3d82c:	1007883a 	mov	r3,r2
   3d830:	e0bffc17 	ldw	r2,-16(fp)
   3d834:	10c0010d 	sth	r3,4(r2)
   uid++;
   3d838:	d0a04d17 	ldw	r2,-32460(gp)
   3d83c:	10800044 	addi	r2,r2,1
   3d840:	d0a04d15 	stw	r2,-32460(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
   3d844:	e0bfff17 	ldw	r2,-4(fp)
   3d848:	10800417 	ldw	r2,16(r2)
   3d84c:	10bfffcc 	andi	r2,r2,65535
   3d850:	1004d23a 	srli	r2,r2,8
   3d854:	1007883a 	mov	r3,r2
   3d858:	e0bfff17 	ldw	r2,-4(fp)
   3d85c:	10800417 	ldw	r2,16(r2)
   3d860:	10bfffcc 	andi	r2,r2,65535
   3d864:	1004923a 	slli	r2,r2,8
   3d868:	1884b03a 	or	r2,r3,r2
   3d86c:	1007883a 	mov	r3,r2
   3d870:	e0bffc17 	ldw	r2,-16(fp)
   3d874:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
   3d878:	e0bffc17 	ldw	r2,-16(fp)
   3d87c:	e0fffe03 	ldbu	r3,-8(fp)
   3d880:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   3d884:	e0bffc17 	ldw	r2,-16(fp)
   3d888:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
   3d88c:	00801004 	movi	r2,64
   3d890:	e0bffb05 	stb	r2,-20(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
   3d894:	e0bfff17 	ldw	r2,-4(fp)
   3d898:	10800717 	ldw	r2,28(r2)
   3d89c:	1006d63a 	srli	r3,r2,24
   3d8a0:	e0bfff17 	ldw	r2,-4(fp)
   3d8a4:	10800717 	ldw	r2,28(r2)
   3d8a8:	1004d23a 	srli	r2,r2,8
   3d8ac:	10bfc00c 	andi	r2,r2,65280
   3d8b0:	1886b03a 	or	r3,r3,r2
   3d8b4:	e0bfff17 	ldw	r2,-4(fp)
   3d8b8:	10800717 	ldw	r2,28(r2)
   3d8bc:	10bfc00c 	andi	r2,r2,65280
   3d8c0:	1004923a 	slli	r2,r2,8
   3d8c4:	1886b03a 	or	r3,r3,r2
   3d8c8:	e0bfff17 	ldw	r2,-4(fp)
   3d8cc:	10800717 	ldw	r2,28(r2)
   3d8d0:	1004963a 	slli	r2,r2,24
   3d8d4:	1884b03a 	or	r2,r3,r2
   3d8d8:	10fc002c 	andhi	r3,r2,61440
   3d8dc:	00b80034 	movhi	r2,57344
   3d8e0:	1880071e 	bne	r3,r2,3d900 <ip_write+0x174>
   3d8e4:	e0bfff17 	ldw	r2,-4(fp)
   3d8e8:	10800b17 	ldw	r2,44(r2)
   3d8ec:	10000426 	beq	r2,zero,3d900 <ip_write+0x174>
      ttl = p->imo->imo_multicast_ttl;
   3d8f0:	e0bfff17 	ldw	r2,-4(fp)
   3d8f4:	10800b17 	ldw	r2,44(r2)
   3d8f8:	10800103 	ldbu	r2,4(r2)
   3d8fc:	e0bffb05 	stb	r2,-20(fp)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
   3d900:	e0bfff17 	ldw	r2,-4(fp)
   3d904:	10800c17 	ldw	r2,48(r2)
   3d908:	e0bffd15 	stw	r2,-12(fp)
   3d90c:	e0bffd17 	ldw	r2,-12(fp)
   3d910:	10001126 	beq	r2,zero,3d958 <ip_write+0x1cc>
   {
	  /* yup */
	  if (sopts->ip_ttl)
   3d914:	e0bffd17 	ldw	r2,-12(fp)
   3d918:	10800043 	ldbu	r2,1(r2)
   3d91c:	10803fcc 	andi	r2,r2,255
   3d920:	10000526 	beq	r2,zero,3d938 <ip_write+0x1ac>
         pip->ip_time = sopts->ip_ttl;
   3d924:	e0bffd17 	ldw	r2,-12(fp)
   3d928:	10c00043 	ldbu	r3,1(r2)
   3d92c:	e0bffc17 	ldw	r2,-16(fp)
   3d930:	10c00205 	stb	r3,8(r2)
   3d934:	00000306 	br	3d944 <ip_write+0x1b8>
	  else
         pip->ip_time = ttl;
   3d938:	e0bffc17 	ldw	r2,-16(fp)
   3d93c:	e0fffb03 	ldbu	r3,-20(fp)
   3d940:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
   3d944:	e0bffd17 	ldw	r2,-12(fp)
   3d948:	10c00003 	ldbu	r3,0(r2)
   3d94c:	e0bffc17 	ldw	r2,-16(fp)
   3d950:	10c00045 	stb	r3,1(r2)
   3d954:	00000506 	br	3d96c <ip_write+0x1e0>
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
   3d958:	e0bffc17 	ldw	r2,-16(fp)
   3d95c:	e0fffb03 	ldbu	r3,-20(fp)
   3d960:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
   3d964:	e0bffc17 	ldw	r2,-16(fp)
   3d968:	10000045 	stb	zero,1(r2)
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
   3d96c:	e13ffc17 	ldw	r4,-16(fp)
   3d970:	01400284 	movi	r5,10
   3d974:	00263480 	call	26348 <cksum>
   3d978:	0084303a 	nor	r2,zero,r2
   3d97c:	1007883a 	mov	r3,r2
   3d980:	e0bffc17 	ldw	r2,-16(fp)
   3d984:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
   3d988:	e13fff17 	ldw	r4,-4(fp)
   3d98c:	003d0600 	call	3d060 <ip_write_internal>
}
   3d990:	e037883a 	mov	sp,fp
   3d994:	dfc00117 	ldw	ra,4(sp)
   3d998:	df000017 	ldw	fp,0(sp)
   3d99c:	dec00204 	addi	sp,sp,8
   3d9a0:	f800283a 	ret

0003d9a4 <ip_write2>:
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
   3d9a4:	defff604 	addi	sp,sp,-40
   3d9a8:	dfc00915 	stw	ra,36(sp)
   3d9ac:	df000815 	stw	fp,32(sp)
   3d9b0:	df000804 	addi	fp,sp,32
   3d9b4:	2005883a 	mov	r2,r4
   3d9b8:	e17ffe15 	stw	r5,-8(fp)
   3d9bc:	e1bfff15 	stw	r6,-4(fp)
   3d9c0:	e0bffd05 	stb	r2,-12(fp)
   struct ip * pip;
   u_char ttl;
   struct ip_socopts * sopts;
   u_char iphlen = sizeof (struct ip);
   3d9c4:	00800504 	movi	r2,20
   3d9c8:	e0bff845 	stb	r2,-31(fp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
   3d9cc:	008001b4 	movhi	r2,6
   3d9d0:	10b9e104 	addi	r2,r2,-6268
   3d9d4:	10800917 	ldw	r2,36(r2)
   3d9d8:	10c00044 	addi	r3,r2,1
   3d9dc:	008001b4 	movhi	r2,6
   3d9e0:	10b9e104 	addi	r2,r2,-6268
   3d9e4:	10c00915 	stw	r3,36(r2)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
   3d9e8:	e0bfff17 	ldw	r2,-4(fp)
   3d9ec:	e0bff915 	stw	r2,-28(fp)
   3d9f0:	00000d06 	br	3da28 <ip_write2+0x84>
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
   3d9f4:	e0bff917 	ldw	r2,-28(fp)
   3d9f8:	10800003 	ldbu	r2,0(r2)
   3d9fc:	10803fcc 	andi	r2,r2,255
   3da00:	10800520 	cmpeqi	r2,r2,20
   3da04:	1000011e 	bne	r2,zero,3da0c <ip_write2+0x68>
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
            break;
         default:
            break;
   3da08:	00000406 	br	3da1c <ip_write2+0x78>
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
   3da0c:	e0bff843 	ldbu	r2,-31(fp)
   3da10:	10800104 	addi	r2,r2,4
   3da14:	e0bff845 	stb	r2,-31(fp)
            break;
   3da18:	0001883a 	nop
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
   3da1c:	e0bff917 	ldw	r2,-28(fp)
   3da20:	10800044 	addi	r2,r2,1
   3da24:	e0bff915 	stw	r2,-28(fp)
   3da28:	e0bff917 	ldw	r2,-28(fp)
   3da2c:	10800003 	ldbu	r2,0(r2)
   3da30:	10803fcc 	andi	r2,r2,255
   3da34:	103fef1e 	bne	r2,zero,3d9f4 <__alt_mem_descriptor_memory+0xdeffd9f4>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
   3da38:	e0bff843 	ldbu	r2,-31(fp)
   3da3c:	108000cc 	andi	r2,r2,3
   3da40:	10000726 	beq	r2,zero,3da60 <ip_write2+0xbc>
      iphlen_pad = 4 - (iphlen & 0x3);
   3da44:	e0bff843 	ldbu	r2,-31(fp)
   3da48:	108000cc 	andi	r2,r2,3
   3da4c:	1007883a 	mov	r3,r2
   3da50:	00800104 	movi	r2,4
   3da54:	10c5c83a 	sub	r2,r2,r3
   3da58:	e0bffa05 	stb	r2,-24(fp)
   3da5c:	00000106 	br	3da64 <ip_write2+0xc0>
   else iphlen_pad = 0; /* no header padding required */
   3da60:	e03ffa05 	stb	zero,-24(fp)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
   3da64:	e0bffe17 	ldw	r2,-8(fp)
   3da68:	10c00317 	ldw	r3,12(r2)
   3da6c:	e13ff843 	ldbu	r4,-31(fp)
   3da70:	e0bffa03 	ldbu	r2,-24(fp)
   3da74:	2085883a 	add	r2,r4,r2
   3da78:	0085c83a 	sub	r2,zero,r2
   3da7c:	1887883a 	add	r3,r3,r2
   3da80:	e0bffe17 	ldw	r2,-8(fp)
   3da84:	10c00315 	stw	r3,12(r2)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
   3da88:	e0bffe17 	ldw	r2,-8(fp)
   3da8c:	10800417 	ldw	r2,16(r2)
   3da90:	e13ff843 	ldbu	r4,-31(fp)
   3da94:	e0fffa03 	ldbu	r3,-24(fp)
   3da98:	20c7883a 	add	r3,r4,r3
   3da9c:	10c7883a 	add	r3,r2,r3
   3daa0:	e0bffe17 	ldw	r2,-8(fp)
   3daa4:	10c00415 	stw	r3,16(r2)
   pip = (struct ip *) (p->nb_prot);
   3daa8:	e0bffe17 	ldw	r2,-8(fp)
   3daac:	10800317 	ldw	r2,12(r2)
   3dab0:	e0bffb15 	stw	r2,-20(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   3dab4:	e0fff843 	ldbu	r3,-31(fp)
   3dab8:	e0bffa03 	ldbu	r2,-24(fp)
   3dabc:	1885883a 	add	r2,r3,r2
   3dac0:	1005d0ba 	srai	r2,r2,2
   3dac4:	10801014 	ori	r2,r2,64
   3dac8:	1007883a 	mov	r3,r2
   3dacc:	e0bffb17 	ldw	r2,-20(fp)
   3dad0:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   3dad4:	e0bffb17 	ldw	r2,-20(fp)
   3dad8:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
   3dadc:	d0a04d17 	ldw	r2,-32460(gp)
   3dae0:	10bfffcc 	andi	r2,r2,65535
   3dae4:	1004d23a 	srli	r2,r2,8
   3dae8:	1007883a 	mov	r3,r2
   3daec:	d0a04d17 	ldw	r2,-32460(gp)
   3daf0:	10bfffcc 	andi	r2,r2,65535
   3daf4:	1004923a 	slli	r2,r2,8
   3daf8:	1884b03a 	or	r2,r3,r2
   3dafc:	1007883a 	mov	r3,r2
   3db00:	e0bffb17 	ldw	r2,-20(fp)
   3db04:	10c0010d 	sth	r3,4(r2)
   uid++;
   3db08:	d0a04d17 	ldw	r2,-32460(gp)
   3db0c:	10800044 	addi	r2,r2,1
   3db10:	d0a04d15 	stw	r2,-32460(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
   3db14:	e0bffe17 	ldw	r2,-8(fp)
   3db18:	10800417 	ldw	r2,16(r2)
   3db1c:	10bfffcc 	andi	r2,r2,65535
   3db20:	1004d23a 	srli	r2,r2,8
   3db24:	1007883a 	mov	r3,r2
   3db28:	e0bffe17 	ldw	r2,-8(fp)
   3db2c:	10800417 	ldw	r2,16(r2)
   3db30:	10bfffcc 	andi	r2,r2,65535
   3db34:	1004923a 	slli	r2,r2,8
   3db38:	1884b03a 	or	r2,r3,r2
   3db3c:	1007883a 	mov	r3,r2
   3db40:	e0bffb17 	ldw	r2,-20(fp)
   3db44:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
   3db48:	e0bffb17 	ldw	r2,-20(fp)
   3db4c:	e0fffd03 	ldbu	r3,-12(fp)
   3db50:	10c00245 	stb	r3,9(r2)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   3db54:	e0bffb17 	ldw	r2,-20(fp)
   3db58:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
   3db5c:	00801004 	movi	r2,64
   3db60:	e0bff805 	stb	r2,-32(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
   3db64:	e0bffe17 	ldw	r2,-8(fp)
   3db68:	10800717 	ldw	r2,28(r2)
   3db6c:	1006d63a 	srli	r3,r2,24
   3db70:	e0bffe17 	ldw	r2,-8(fp)
   3db74:	10800717 	ldw	r2,28(r2)
   3db78:	1004d23a 	srli	r2,r2,8
   3db7c:	10bfc00c 	andi	r2,r2,65280
   3db80:	1886b03a 	or	r3,r3,r2
   3db84:	e0bffe17 	ldw	r2,-8(fp)
   3db88:	10800717 	ldw	r2,28(r2)
   3db8c:	10bfc00c 	andi	r2,r2,65280
   3db90:	1004923a 	slli	r2,r2,8
   3db94:	1886b03a 	or	r3,r3,r2
   3db98:	e0bffe17 	ldw	r2,-8(fp)
   3db9c:	10800717 	ldw	r2,28(r2)
   3dba0:	1004963a 	slli	r2,r2,24
   3dba4:	1884b03a 	or	r2,r3,r2
   3dba8:	10fc002c 	andhi	r3,r2,61440
   3dbac:	00b80034 	movhi	r2,57344
   3dbb0:	1880071e 	bne	r3,r2,3dbd0 <ip_write2+0x22c>
   3dbb4:	e0bffe17 	ldw	r2,-8(fp)
   3dbb8:	10800b17 	ldw	r2,44(r2)
   3dbbc:	10000426 	beq	r2,zero,3dbd0 <ip_write2+0x22c>
      ttl = p->imo->imo_multicast_ttl;
   3dbc0:	e0bffe17 	ldw	r2,-8(fp)
   3dbc4:	10800b17 	ldw	r2,44(r2)
   3dbc8:	10800103 	ldbu	r2,4(r2)
   3dbcc:	e0bff805 	stb	r2,-32(fp)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
   3dbd0:	e0bffe17 	ldw	r2,-8(fp)
   3dbd4:	10800c17 	ldw	r2,48(r2)
   3dbd8:	e0bffc15 	stw	r2,-16(fp)
   3dbdc:	e0bffc17 	ldw	r2,-16(fp)
   3dbe0:	10001126 	beq	r2,zero,3dc28 <ip_write2+0x284>
   {
      if (sopts->ip_ttl)
   3dbe4:	e0bffc17 	ldw	r2,-16(fp)
   3dbe8:	10800043 	ldbu	r2,1(r2)
   3dbec:	10803fcc 	andi	r2,r2,255
   3dbf0:	10000526 	beq	r2,zero,3dc08 <ip_write2+0x264>
         pip->ip_time = sopts->ip_ttl;
   3dbf4:	e0bffc17 	ldw	r2,-16(fp)
   3dbf8:	10c00043 	ldbu	r3,1(r2)
   3dbfc:	e0bffb17 	ldw	r2,-20(fp)
   3dc00:	10c00205 	stb	r3,8(r2)
   3dc04:	00000306 	br	3dc14 <ip_write2+0x270>
      else
         pip->ip_time = ttl;
   3dc08:	e0bffb17 	ldw	r2,-20(fp)
   3dc0c:	e0fff803 	ldbu	r3,-32(fp)
   3dc10:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = sopts->ip_tos;
   3dc14:	e0bffc17 	ldw	r2,-16(fp)
   3dc18:	10c00003 	ldbu	r3,0(r2)
   3dc1c:	e0bffb17 	ldw	r2,-20(fp)
   3dc20:	10c00045 	stb	r3,1(r2)
   3dc24:	00000506 	br	3dc3c <ip_write2+0x298>
   }
   else
   {
      pip->ip_time = ttl;
   3dc28:	e0bffb17 	ldw	r2,-20(fp)
   3dc2c:	e0fff803 	ldbu	r3,-32(fp)
   3dc30:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
   3dc34:	e0bffb17 	ldw	r2,-20(fp)
   3dc38:	10000045 	stb	zero,1(r2)
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
   3dc3c:	e0bffe17 	ldw	r2,-8(fp)
   3dc40:	10800317 	ldw	r2,12(r2)
   3dc44:	10800504 	addi	r2,r2,20
   3dc48:	e0bff915 	stw	r2,-28(fp)
   3dc4c:	00001006 	br	3dc90 <ip_write2+0x2ec>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
   3dc50:	e0bfff17 	ldw	r2,-4(fp)
   3dc54:	10800003 	ldbu	r2,0(r2)
   3dc58:	10803fcc 	andi	r2,r2,255
   3dc5c:	10800520 	cmpeqi	r2,r2,20
   3dc60:	1000011e 	bne	r2,zero,3dc68 <ip_write2+0x2c4>
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
            break;
         default:
            break;
   3dc64:	00000706 	br	3dc84 <ip_write2+0x2e0>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
   3dc68:	e0bff917 	ldw	r2,-28(fp)
   3dc6c:	00c12504 	movi	r3,1172
   3dc70:	10c00015 	stw	r3,0(r2)
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
   3dc74:	e0bff917 	ldw	r2,-28(fp)
   3dc78:	10800104 	addi	r2,r2,4
   3dc7c:	e0bff915 	stw	r2,-28(fp)
            break;
   3dc80:	0001883a 	nop
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
   3dc84:	e0bfff17 	ldw	r2,-4(fp)
   3dc88:	10800044 	addi	r2,r2,1
   3dc8c:	e0bfff15 	stw	r2,-4(fp)
   3dc90:	e0bfff17 	ldw	r2,-4(fp)
   3dc94:	10800003 	ldbu	r2,0(r2)
   3dc98:	10803fcc 	andi	r2,r2,255
   3dc9c:	103fec1e 	bne	r2,zero,3dc50 <__alt_mem_descriptor_memory+0xdeffdc50>
            break;
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
   3dca0:	e03ffa45 	stb	zero,-23(fp)
   3dca4:	00000706 	br	3dcc4 <ip_write2+0x320>
   3dca8:	e0bffa43 	ldbu	r2,-23(fp)
   3dcac:	e0fff917 	ldw	r3,-28(fp)
   3dcb0:	1885883a 	add	r2,r3,r2
   3dcb4:	10000005 	stb	zero,0(r2)
   3dcb8:	e0bffa43 	ldbu	r2,-23(fp)
   3dcbc:	10800044 	addi	r2,r2,1
   3dcc0:	e0bffa45 	stb	r2,-23(fp)
   3dcc4:	e0fffa43 	ldbu	r3,-23(fp)
   3dcc8:	e0bffa03 	ldbu	r2,-24(fp)
   3dccc:	18bff636 	bltu	r3,r2,3dca8 <__alt_mem_descriptor_memory+0xdeffdca8>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
   3dcd0:	e0fff843 	ldbu	r3,-31(fp)
   3dcd4:	e0bffa03 	ldbu	r2,-24(fp)
   3dcd8:	1885883a 	add	r2,r3,r2
   3dcdc:	1006d7fa 	srli	r3,r2,31
   3dce0:	1885883a 	add	r2,r3,r2
   3dce4:	1005d07a 	srai	r2,r2,1
   3dce8:	e13ffb17 	ldw	r4,-20(fp)
   3dcec:	100b883a 	mov	r5,r2
   3dcf0:	00263480 	call	26348 <cksum>
   3dcf4:	0084303a 	nor	r2,zero,r2
   3dcf8:	1007883a 	mov	r3,r2
   3dcfc:	e0bffb17 	ldw	r2,-20(fp)
   3dd00:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal (p));
   3dd04:	e13ffe17 	ldw	r4,-8(fp)
   3dd08:	003d0600 	call	3d060 <ip_write_internal>
}
   3dd0c:	e037883a 	mov	sp,fp
   3dd10:	dfc00117 	ldw	ra,4(sp)
   3dd14:	df000017 	ldw	fp,0(sp)
   3dd18:	dec00204 	addi	sp,sp,8
   3dd1c:	f800283a 	ret

0003dd20 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
   3dd20:	defffc04 	addi	sp,sp,-16
   3dd24:	dfc00315 	stw	ra,12(sp)
   3dd28:	df000215 	stw	fp,8(sp)
   3dd2c:	df000204 	addi	fp,sp,8
   3dd30:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
   3dd34:	008001b4 	movhi	r2,6
   3dd38:	10b9e104 	addi	r2,r2,-6268
   3dd3c:	10800917 	ldw	r2,36(r2)
   3dd40:	10c00044 	addi	r3,r2,1
   3dd44:	008001b4 	movhi	r2,6
   3dd48:	10b9e104 	addi	r2,r2,-6268
   3dd4c:	10c00915 	stw	r3,36(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
   3dd50:	e0bfff17 	ldw	r2,-4(fp)
   3dd54:	10800317 	ldw	r2,12(r2)
   3dd58:	e0bffe15 	stw	r2,-8(fp)
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
   3dd5c:	e0bffe17 	ldw	r2,-8(fp)
   3dd60:	1080010b 	ldhu	r2,4(r2)
   3dd64:	10bfffcc 	andi	r2,r2,65535
   3dd68:	10000e1e 	bne	r2,zero,3dda4 <ip_raw_write+0x84>
   {
      pip->ip_id = htons((unshort)uid);
   3dd6c:	d0a04d17 	ldw	r2,-32460(gp)
   3dd70:	10bfffcc 	andi	r2,r2,65535
   3dd74:	1004d23a 	srli	r2,r2,8
   3dd78:	1007883a 	mov	r3,r2
   3dd7c:	d0a04d17 	ldw	r2,-32460(gp)
   3dd80:	10bfffcc 	andi	r2,r2,65535
   3dd84:	1004923a 	slli	r2,r2,8
   3dd88:	1884b03a 	or	r2,r3,r2
   3dd8c:	1007883a 	mov	r3,r2
   3dd90:	e0bffe17 	ldw	r2,-8(fp)
   3dd94:	10c0010d 	sth	r3,4(r2)
      uid++;
   3dd98:	d0a04d17 	ldw	r2,-32460(gp)
   3dd9c:	10800044 	addi	r2,r2,1
   3dda0:	d0a04d15 	stw	r2,-32460(gp)
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   3dda4:	e0bffe17 	ldw	r2,-8(fp)
   3dda8:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
   3ddac:	e13ffe17 	ldw	r4,-8(fp)
   3ddb0:	01400284 	movi	r5,10
   3ddb4:	00263480 	call	26348 <cksum>
   3ddb8:	0084303a 	nor	r2,zero,r2
   3ddbc:	1007883a 	mov	r3,r2
   3ddc0:	e0bffe17 	ldw	r2,-8(fp)
   3ddc4:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
   3ddc8:	e13fff17 	ldw	r4,-4(fp)
   3ddcc:	003d0600 	call	3d060 <ip_write_internal>
}
   3ddd0:	e037883a 	mov	sp,fp
   3ddd4:	dfc00117 	ldw	ra,4(sp)
   3ddd8:	df000017 	ldw	fp,0(sp)
   3dddc:	dec00204 	addi	sp,sp,8
   3dde0:	f800283a 	ret

0003dde4 <ip_fragment_lc>:
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
   3dde4:	defff104 	addi	sp,sp,-60
   3dde8:	dfc00e15 	stw	ra,56(sp)
   3ddec:	df000d15 	stw	fp,52(sp)
   3ddf0:	df000d04 	addi	fp,sp,52
   3ddf4:	e13ffe15 	stw	r4,-8(fp)
   3ddf8:	e17fff15 	stw	r5,-4(fp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   3ddfc:	008001b4 	movhi	r2,6
   3de00:	10b9e104 	addi	r2,r2,-6268
   3de04:	10801017 	ldw	r2,64(r2)
   3de08:	10c00044 	addi	r3,r2,1
   3de0c:	008001b4 	movhi	r2,6
   3de10:	10b9e104 	addi	r2,r2,-6268
   3de14:	10c01015 	stw	r3,64(r2)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   3de18:	e0bffe17 	ldw	r2,-8(fp)
   3de1c:	10800317 	ldw	r2,12(r2)
   3de20:	e0bff815 	stw	r2,-32(fp)
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
   3de24:	e0bff817 	ldw	r2,-32(fp)
   3de28:	10800003 	ldbu	r2,0(r2)
   3de2c:	10803fcc 	andi	r2,r2,255
   3de30:	108003cc 	andi	r2,r2,15
   3de34:	1085883a 	add	r2,r2,r2
   3de38:	1085883a 	add	r2,r2,r2
   3de3c:	e0bff915 	stw	r2,-28(fp)
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
   3de40:	e0bffe17 	ldw	r2,-8(fp)
   3de44:	10800417 	ldw	r2,16(r2)
   3de48:	1007883a 	mov	r3,r2
   3de4c:	e0bff917 	ldw	r2,-28(fp)
   3de50:	1885c83a 	sub	r2,r3,r2
   3de54:	e0bff515 	stw	r2,-44(fp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
   3de58:	e0bffe17 	ldw	r2,-8(fp)
   3de5c:	10800617 	ldw	r2,24(r2)
   3de60:	10c00917 	ldw	r3,36(r2)
   3de64:	e0bffe17 	ldw	r2,-8(fp)
   3de68:	10800617 	ldw	r2,24(r2)
   3de6c:	11000817 	ldw	r4,32(r2)
   3de70:	e0bff917 	ldw	r2,-28(fp)
   3de74:	2085883a 	add	r2,r4,r2
   3de78:	013ffe04 	movi	r4,-8
   3de7c:	2085c83a 	sub	r2,r4,r2
   3de80:	1885883a 	add	r2,r3,r2
   3de84:	e0bffa15 	stw	r2,-24(fp)
   if (maxipsize < 64)  /* to small to use */
   3de88:	e0bffa17 	ldw	r2,-24(fp)
   3de8c:	10801028 	cmpgeui	r2,r2,64
   3de90:	1000031e 	bne	r2,zero,3dea0 <ip_fragment_lc+0xbc>
   {
      dtrap();    /* probably bad programming */
   3de94:	002b0f40 	call	2b0f4 <dtrap>
      return ENP_LOGIC;
   3de98:	00bffd44 	movi	r2,-11
   3de9c:	0000d506 	br	3e1f4 <ip_fragment_lc+0x410>
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
   3dea0:	e0bffe17 	ldw	r2,-8(fp)
   3dea4:	10800417 	ldw	r2,16(r2)
   3dea8:	1009883a 	mov	r4,r2
   3deac:	e17ffa17 	ldw	r5,-24(fp)
   3deb0:	00152500 	call	15250 <__udivsi3>
   3deb4:	10800044 	addi	r2,r2,1
   3deb8:	e0bffb15 	stw	r2,-20(fp)
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
   3debc:	e0bffe17 	ldw	r2,-8(fp)
   3dec0:	10c00417 	ldw	r3,16(r2)
   3dec4:	e0bffb17 	ldw	r2,-20(fp)
   3dec8:	1885883a 	add	r2,r3,r2
   3decc:	10bfffc4 	addi	r2,r2,-1
   3ded0:	1009883a 	mov	r4,r2
   3ded4:	e17ffb17 	ldw	r5,-20(fp)
   3ded8:	00152500 	call	15250 <__udivsi3>
   3dedc:	10c001c4 	addi	r3,r2,7
   3dee0:	00bffe04 	movi	r2,-8
   3dee4:	1884703a 	and	r2,r3,r2
   3dee8:	e0bffc15 	stw	r2,-16(fp)
   foffset = 0;
   3deec:	e03ff315 	stw	zero,-52(fp)

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
   3def0:	e0bff817 	ldw	r2,-32(fp)
   3def4:	1080018b 	ldhu	r2,6(r2)
   3def8:	10bfffcc 	andi	r2,r2,65535
   3defc:	1004d23a 	srli	r2,r2,8
   3df00:	1007883a 	mov	r3,r2
   3df04:	e0bff817 	ldw	r2,-32(fp)
   3df08:	1080018b 	ldhu	r2,6(r2)
   3df0c:	10bfffcc 	andi	r2,r2,65535
   3df10:	1004923a 	slli	r2,r2,8
   3df14:	1884b03a 	or	r2,r3,r2
   3df18:	e0bffd0d 	sth	r2,-12(fp)
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
   3df1c:	e0fffd0b 	ldhu	r3,-12(fp)
   3df20:	00bffff4 	movhi	r2,65535
   3df24:	1087ffc4 	addi	r2,r2,8191
   3df28:	1884703a 	and	r2,r3,r2
   3df2c:	10000826 	beq	r2,zero,3df50 <ip_fragment_lc+0x16c>
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
   3df30:	e0fffd0b 	ldhu	r3,-12(fp)
   3df34:	00bffff4 	movhi	r2,65535
   3df38:	1087ffc4 	addi	r2,r2,8191
   3df3c:	1884703a 	and	r2,r3,r2
   3df40:	e0bff315 	stw	r2,-52(fp)
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
   3df44:	e0bff317 	ldw	r2,-52(fp)
   3df48:	100490fa 	slli	r2,r2,3
   3df4c:	e0bff315 	stw	r2,-52(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   3df50:	e0bffe17 	ldw	r2,-8(fp)
   3df54:	e0bff615 	stw	r2,-40(fp)
   e = 0;
   3df58:	e03ff715 	stw	zero,-36(fp)
   while (left > 1)  /* more data left to send? */
   3df5c:	0000a106 	br	3e1e4 <ip_fragment_lc+0x400>
   {
      p = pkt2;  /* move next fragment up */
   3df60:	e0bff617 	ldw	r2,-40(fp)
   3df64:	e0bffe15 	stw	r2,-8(fp)
      pip = (struct ip *)(p->nb_prot);
   3df68:	e0bffe17 	ldw	r2,-8(fp)
   3df6c:	10800317 	ldw	r2,12(r2)
   3df70:	e0bff815 	stw	r2,-32(fp)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
   3df74:	e0bffc17 	ldw	r2,-16(fp)
   3df78:	e0fff517 	ldw	r3,-44(fp)
   3df7c:	1880010e 	bge	r3,r2,3df84 <ip_fragment_lc+0x1a0>
   3df80:	1805883a 	mov	r2,r3
   3df84:	e0fff917 	ldw	r3,-28(fp)
   3df88:	10c5883a 	add	r2,r2,r3
   3df8c:	1007883a 	mov	r3,r2
   3df90:	e0bffe17 	ldw	r2,-8(fp)
   3df94:	10c00415 	stw	r3,16(r2)
      left -= fragsize; /* decrement count of bytes left to send */
   3df98:	e0fff517 	ldw	r3,-44(fp)
   3df9c:	e0bffc17 	ldw	r2,-16(fp)
   3dfa0:	1885c83a 	sub	r2,r3,r2
   3dfa4:	e0bff515 	stw	r2,-44(fp)

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
   3dfa8:	e0bffe17 	ldw	r2,-8(fp)
   3dfac:	10800417 	ldw	r2,16(r2)
   3dfb0:	10bfffcc 	andi	r2,r2,65535
   3dfb4:	1004d23a 	srli	r2,r2,8
   3dfb8:	1007883a 	mov	r3,r2
   3dfbc:	e0bffe17 	ldw	r2,-8(fp)
   3dfc0:	10800417 	ldw	r2,16(r2)
   3dfc4:	10bfffcc 	andi	r2,r2,65535
   3dfc8:	1004923a 	slli	r2,r2,8
   3dfcc:	1884b03a 	or	r2,r3,r2
   3dfd0:	1007883a 	mov	r3,r2
   3dfd4:	e0bff817 	ldw	r2,-32(fp)
   3dfd8:	10c0008d 	sth	r3,2(r2)

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
   3dfdc:	e0bff317 	ldw	r2,-52(fp)
   3dfe0:	1004d0fa 	srli	r2,r2,3
   3dfe4:	e0bff40d 	sth	r2,-48(fp)
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
   3dfe8:	e0bff517 	ldw	r2,-44(fp)
   3dfec:	10800090 	cmplti	r2,r2,2
   3dff0:	1000021e 	bne	r2,zero,3dffc <ip_fragment_lc+0x218>
   3dff4:	00880004 	movi	r2,8192
   3dff8:	00000106 	br	3e000 <ip_fragment_lc+0x21c>
   3dffc:	0005883a 	mov	r2,zero
   3e000:	e0fff40b 	ldhu	r3,-48(fp)
   3e004:	10c4b03a 	or	r2,r2,r3
   3e008:	e0bff40d 	sth	r2,-48(fp)

      if ( tmp_fraginfo & IP_FLG_MF )             
   3e00c:	e0bffd0b 	ldhu	r2,-12(fp)
   3e010:	1088000c 	andi	r2,r2,8192
   3e014:	10000326 	beq	r2,zero,3e024 <ip_fragment_lc+0x240>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
   3e018:	e0bff40b 	ldhu	r2,-48(fp)
   3e01c:	10880014 	ori	r2,r2,8192
   3e020:	e0bff40d 	sth	r2,-48(fp)
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
   3e024:	e0bff40b 	ldhu	r2,-48(fp)
   3e028:	1004d23a 	srli	r2,r2,8
   3e02c:	1007883a 	mov	r3,r2
   3e030:	e0bff40b 	ldhu	r2,-48(fp)
   3e034:	1004923a 	slli	r2,r2,8
   3e038:	1884b03a 	or	r2,r3,r2
   3e03c:	1007883a 	mov	r3,r2
   3e040:	e0bff817 	ldw	r2,-32(fp)
   3e044:	10c0018d 	sth	r3,6(r2)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
   3e048:	e0bff517 	ldw	r2,-44(fp)
   3e04c:	10800090 	cmplti	r2,r2,2
   3e050:	10003f1e 	bne	r2,zero,3e150 <ip_fragment_lc+0x36c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3e054:	01000084 	movi	r4,2
   3e058:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
   3e05c:	e0fff517 	ldw	r3,-44(fp)
   3e060:	e0bff917 	ldw	r2,-28(fp)
   3e064:	1887883a 	add	r3,r3,r2
   3e068:	00800174 	movhi	r2,5
   3e06c:	108f9704 	addi	r2,r2,15964
   3e070:	10800017 	ldw	r2,0(r2)
   3e074:	1885883a 	add	r2,r3,r2
   3e078:	1009883a 	mov	r4,r2
   3e07c:	002a53c0 	call	2a53c <pk_alloc>
   3e080:	e0bff615 	stw	r2,-40(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e084:	01000084 	movi	r4,2
   3e088:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         if (!pkt2)
   3e08c:	e0bff617 	ldw	r2,-40(fp)
   3e090:	1000101e 	bne	r2,zero,3e0d4 <ip_fragment_lc+0x2f0>
         {
            dtrap();
   3e094:	002b0f40 	call	2b0f4 <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3e098:	01000084 	movi	r4,2
   3e09c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   3e0a0:	e13ffe17 	ldw	r4,-8(fp)
   3e0a4:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e0a8:	01000084 	movi	r4,2
   3e0ac:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
   3e0b0:	008001b4 	movhi	r2,6
   3e0b4:	10b9e104 	addi	r2,r2,-6268
   3e0b8:	10801117 	ldw	r2,68(r2)
   3e0bc:	10c00044 	addi	r3,r2,1
   3e0c0:	008001b4 	movhi	r2,6
   3e0c4:	10b9e104 	addi	r2,r2,-6268
   3e0c8:	10c01115 	stw	r3,68(r2)
            return ENP_RESOURCE;
   3e0cc:	00bffa84 	movi	r2,-22
   3e0d0:	00004806 	br	3e1f4 <ip_fragment_lc+0x410>
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
   3e0d4:	e0bffe17 	ldw	r2,-8(fp)
   3e0d8:	10c00617 	ldw	r3,24(r2)
   3e0dc:	e0bff617 	ldw	r2,-40(fp)
   3e0e0:	10c00615 	stw	r3,24(r2)
         pkt2->fhost = p->fhost;
   3e0e4:	e0bffe17 	ldw	r2,-8(fp)
   3e0e8:	10c00717 	ldw	r3,28(r2)
   3e0ec:	e0bff617 	ldw	r2,-40(fp)
   3e0f0:	10c00715 	stw	r3,28(r2)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
   3e0f4:	e0bff617 	ldw	r2,-40(fp)
   3e0f8:	11000317 	ldw	r4,12(r2)
   3e0fc:	e0bffe17 	ldw	r2,-8(fp)
   3e100:	10c00317 	ldw	r3,12(r2)
   3e104:	e0bff917 	ldw	r2,-28(fp)
   3e108:	180b883a 	mov	r5,r3
   3e10c:	100d883a 	mov	r6,r2
   3e110:	0007c900 	call	7c90 <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
   3e114:	e0bff617 	ldw	r2,-40(fp)
   3e118:	10c00317 	ldw	r3,12(r2)
   3e11c:	e0bff917 	ldw	r2,-28(fp)
   3e120:	188b883a 	add	r5,r3,r2
   3e124:	e0bffe17 	ldw	r2,-8(fp)
   3e128:	10c00317 	ldw	r3,12(r2)
   3e12c:	e13ff917 	ldw	r4,-28(fp)
   3e130:	e0bffc17 	ldw	r2,-16(fp)
   3e134:	2085883a 	add	r2,r4,r2
   3e138:	1887883a 	add	r3,r3,r2
   3e13c:	e0bff517 	ldw	r2,-44(fp)
   3e140:	2809883a 	mov	r4,r5
   3e144:	180b883a 	mov	r5,r3
   3e148:	100d883a 	mov	r6,r2
   3e14c:	0007c900 	call	7c90 <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
   3e150:	e0bff817 	ldw	r2,-32(fp)
   3e154:	1000028d 	sth	zero,10(r2)
      pip->ip_chksum = ~cksum(pip, 10);
   3e158:	e13ff817 	ldw	r4,-32(fp)
   3e15c:	01400284 	movi	r5,10
   3e160:	00263480 	call	26348 <cksum>
   3e164:	0084303a 	nor	r2,zero,r2
   3e168:	1007883a 	mov	r3,r2
   3e16c:	e0bff817 	ldw	r2,-32(fp)
   3e170:	10c0028d 	sth	r3,10(r2)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
   3e174:	e13ffe17 	ldw	r4,-8(fp)
   3e178:	e17fff17 	ldw	r5,-4(fp)
   3e17c:	00242940 	call	24294 <ip2mac>
   3e180:	e0bff715 	stw	r2,-36(fp)
      ip_mib.ipFragCreates++;
   3e184:	008001b4 	movhi	r2,6
   3e188:	10b9e104 	addi	r2,r2,-6268
   3e18c:	10801217 	ldw	r2,72(r2)
   3e190:	10c00044 	addi	r3,r2,1
   3e194:	008001b4 	movhi	r2,6
   3e198:	10b9e104 	addi	r2,r2,-6268
   3e19c:	10c01215 	stw	r3,72(r2)
      if (e < 0)
   3e1a0:	e0bff717 	ldw	r2,-36(fp)
   3e1a4:	10000b0e 	bge	r2,zero,3e1d4 <ip_fragment_lc+0x3f0>
      {
         if (left > 1) 
   3e1a8:	e0bff517 	ldw	r2,-44(fp)
   3e1ac:	10800090 	cmplti	r2,r2,2
   3e1b0:	1000061e 	bne	r2,zero,3e1cc <ip_fragment_lc+0x3e8>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3e1b4:	01000084 	movi	r4,2
   3e1b8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
   3e1bc:	e13ff617 	ldw	r4,-40(fp)
   3e1c0:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e1c4:	01000084 	movi	r4,2
   3e1c8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         }
         return e;
   3e1cc:	e0bff717 	ldw	r2,-36(fp)
   3e1d0:	00000806 	br	3e1f4 <ip_fragment_lc+0x410>
      }
      foffset += fragsize;    /* offset for next fragment */
   3e1d4:	e0fff317 	ldw	r3,-52(fp)
   3e1d8:	e0bffc17 	ldw	r2,-16(fp)
   3e1dc:	1885883a 	add	r2,r3,r2
   3e1e0:	e0bff315 	stw	r2,-52(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
   3e1e4:	e0bff517 	ldw	r2,-44(fp)
   3e1e8:	10800088 	cmpgei	r2,r2,2
   3e1ec:	103f5c1e 	bne	r2,zero,3df60 <__alt_mem_descriptor_memory+0xdeffdf60>
         }
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
   }
   return e;
   3e1f0:	e0bff717 	ldw	r2,-36(fp)
}
   3e1f4:	e037883a 	mov	sp,fp
   3e1f8:	dfc00117 	ldw	ra,4(sp)
   3e1fc:	df000017 	ldw	fp,0(sp)
   3e200:	dec00204 	addi	sp,sp,8
   3e204:	f800283a 	ret

0003e208 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
   3e208:	defff004 	addi	sp,sp,-64
   3e20c:	dfc00f15 	stw	ra,60(sp)
   3e210:	df000e15 	stw	fp,56(sp)
   3e214:	df000e04 	addi	fp,sp,56
   3e218:	e13ffe15 	stw	r4,-8(fp)
   3e21c:	e17fff15 	stw	r5,-4(fp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
   3e220:	e0bffe17 	ldw	r2,-8(fp)
   3e224:	10800317 	ldw	r2,12(r2)
   3e228:	e0bff515 	stw	r2,-44(fp)
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
   3e22c:	e0bff517 	ldw	r2,-44(fp)
   3e230:	1080018b 	ldhu	r2,6(r2)
   3e234:	10bfffcc 	andi	r2,r2,65535
   3e238:	1004d23a 	srli	r2,r2,8
   3e23c:	10bfffcc 	andi	r2,r2,65535
   3e240:	10c03fcc 	andi	r3,r2,255
   3e244:	e0bff517 	ldw	r2,-44(fp)
   3e248:	1080018b 	ldhu	r2,6(r2)
   3e24c:	10bfffcc 	andi	r2,r2,65535
   3e250:	1004923a 	slli	r2,r2,8
   3e254:	10bfffcc 	andi	r2,r2,65535
   3e258:	1884b03a 	or	r2,r3,r2
   3e25c:	1090000c 	andi	r2,r2,16384
   3e260:	10001b26 	beq	r2,zero,3e2d0 <ip_fragment+0xc8>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3e264:	01000084 	movi	r4,2
   3e268:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   3e26c:	e13ffe17 	ldw	r4,-8(fp)
   3e270:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e274:	01000084 	movi	r4,2
   3e278:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
   3e27c:	008001b4 	movhi	r2,6
   3e280:	10b9e104 	addi	r2,r2,-6268
   3e284:	10801117 	ldw	r2,68(r2)
   3e288:	10c00044 	addi	r3,r2,1
   3e28c:	008001b4 	movhi	r2,6
   3e290:	10b9e104 	addi	r2,r2,-6268
   3e294:	10c01115 	stw	r3,68(r2)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
   3e298:	e0bff517 	ldw	r2,-44(fp)
   3e29c:	11000317 	ldw	r4,12(r2)
   3e2a0:	e0bffe17 	ldw	r2,-8(fp)
   3e2a4:	10800617 	ldw	r2,24(r2)
   3e2a8:	10c00a17 	ldw	r3,40(r2)
   3e2ac:	e0bffe17 	ldw	r2,-8(fp)
   3e2b0:	10800617 	ldw	r2,24(r2)
   3e2b4:	d8800015 	stw	r2,0(sp)
   3e2b8:	180b883a 	mov	r5,r3
   3e2bc:	e1bff517 	ldw	r6,-44(fp)
   3e2c0:	01c00104 	movi	r7,4
   3e2c4:	0048fe00 	call	48fe0 <icmp_destun>
#endif   /* FULL_ICMP */
      return 0;
   3e2c8:	0005883a 	mov	r2,zero
   3e2cc:	00013806 	br	3e7b0 <ip_fragment+0x5a8>
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
   3e2d0:	002a9380 	call	2a938 <pk_get_max_intrsafe_buf_len>
   3e2d4:	e0bff615 	stw	r2,-40(fp)

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
   3e2d8:	e0bffe17 	ldw	r2,-8(fp)
   3e2dc:	10800617 	ldw	r2,24(r2)
   3e2e0:	10800917 	ldw	r2,36(r2)
   3e2e4:	1007883a 	mov	r3,r2
   3e2e8:	e0bff617 	ldw	r2,-40(fp)
   3e2ec:	10c0022e 	bgeu	r2,r3,3e2f8 <ip_fragment+0xf0>
   3e2f0:	e0bff617 	ldw	r2,-40(fp)
   3e2f4:	00000306 	br	3e304 <ip_fragment+0xfc>
   3e2f8:	e0bffe17 	ldw	r2,-8(fp)
   3e2fc:	10800617 	ldw	r2,24(r2)
   3e300:	10800917 	ldw	r2,36(r2)
   3e304:	e0bff70d 	sth	r2,-36(fp)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
   3e308:	e0bff517 	ldw	r2,-44(fp)
   3e30c:	10800003 	ldbu	r2,0(r2)
   3e310:	108003cc 	andi	r2,r2,15
   3e314:	1085883a 	add	r2,r2,r2
   3e318:	1085883a 	add	r2,r2,r2
   3e31c:	e0bff785 	stb	r2,-34(fp)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
   3e320:	e0bffe17 	ldw	r2,-8(fp)
   3e324:	10800617 	ldw	r2,24(r2)
   3e328:	10800817 	ldw	r2,32(r2)
   3e32c:	e0bff7c5 	stb	r2,-33(fp)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
   3e330:	e0bff783 	ldbu	r2,-34(fp)
   3e334:	e0fff70b 	ldhu	r3,-36(fp)
   3e338:	1885c83a 	sub	r2,r3,r2
   3e33c:	1007883a 	mov	r3,r2
   3e340:	e0bff7c3 	ldbu	r2,-33(fp)
   3e344:	1885c83a 	sub	r2,r3,r2
   3e348:	e0bff80d 	sth	r2,-32(fp)

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
   3e34c:	e0fff80b 	ldhu	r3,-32(fp)
   3e350:	00bffe04 	movi	r2,-8
   3e354:	1884703a 	and	r2,r3,r2
   3e358:	e0bff80d 	sth	r2,-32(fp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
   3e35c:	e0bff517 	ldw	r2,-44(fp)
   3e360:	1080008b 	ldhu	r2,2(r2)
   3e364:	10bfffcc 	andi	r2,r2,65535
   3e368:	1004d23a 	srli	r2,r2,8
   3e36c:	1007883a 	mov	r3,r2
   3e370:	e0bff517 	ldw	r2,-44(fp)
   3e374:	1080008b 	ldhu	r2,2(r2)
   3e378:	10bfffcc 	andi	r2,r2,65535
   3e37c:	1004923a 	slli	r2,r2,8
   3e380:	1884b03a 	or	r2,r3,r2
   3e384:	1007883a 	mov	r3,r2
   3e388:	e0bff783 	ldbu	r2,-34(fp)
   3e38c:	1885c83a 	sub	r2,r3,r2
   3e390:	e0bff88d 	sth	r2,-30(fp)
   num_frags = (total_payload_len / useable_payload_len);
   3e394:	e0fff88b 	ldhu	r3,-30(fp)
   3e398:	e0bff80b 	ldhu	r2,-32(fp)
   3e39c:	1809883a 	mov	r4,r3
   3e3a0:	100b883a 	mov	r5,r2
   3e3a4:	00152500 	call	15250 <__udivsi3>
   3e3a8:	e0bff30d 	sth	r2,-52(fp)
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
   3e3ac:	e0fff88b 	ldhu	r3,-30(fp)
   3e3b0:	e0bff80b 	ldhu	r2,-32(fp)
   3e3b4:	1809883a 	mov	r4,r3
   3e3b8:	100b883a 	mov	r5,r2
   3e3bc:	00152580 	call	15258 <__umodsi3>
   3e3c0:	e0bff90d 	sth	r2,-28(fp)
   3e3c4:	e0bff90b 	ldhu	r2,-28(fp)
   3e3c8:	10000326 	beq	r2,zero,3e3d8 <ip_fragment+0x1d0>
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
   3e3cc:	e0bff30b 	ldhu	r2,-52(fp)
   3e3d0:	10800044 	addi	r2,r2,1
   3e3d4:	e0bff30d 	sth	r2,-52(fp)
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
   3e3d8:	e0bff30b 	ldhu	r2,-52(fp)
   3e3dc:	10800128 	cmpgeui	r2,r2,4
   3e3e0:	1000081e 	bne	r2,zero,3e404 <ip_fragment+0x1fc>
   3e3e4:	e0bffe17 	ldw	r2,-8(fp)
   3e3e8:	10800a17 	ldw	r2,40(r2)
   3e3ec:	1080040c 	andi	r2,r2,16
   3e3f0:	1000041e 	bne	r2,zero,3e404 <ip_fragment+0x1fc>
   {
      return (ip_fragment_lc (p, firsthop));
   3e3f4:	e13ffe17 	ldw	r4,-8(fp)
   3e3f8:	e17fff17 	ldw	r5,-4(fp)
   3e3fc:	003dde40 	call	3dde4 <ip_fragment_lc>
   3e400:	0000eb06 	br	3e7b0 <ip_fragment+0x5a8>
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   3e404:	e0bff517 	ldw	r2,-44(fp)
   3e408:	1080018b 	ldhu	r2,6(r2)
   3e40c:	10bfffcc 	andi	r2,r2,65535
   3e410:	1004d23a 	srli	r2,r2,8
   3e414:	10bfffcc 	andi	r2,r2,65535
   3e418:	10c03fcc 	andi	r3,r2,255
   3e41c:	e0bff517 	ldw	r2,-44(fp)
   3e420:	1080018b 	ldhu	r2,6(r2)
   3e424:	10bfffcc 	andi	r2,r2,65535
   3e428:	1004923a 	slli	r2,r2,8
   3e42c:	10bfffcc 	andi	r2,r2,65535
   3e430:	1884b03a 	or	r2,r3,r2
   3e434:	100490fa 	slli	r2,r2,3
   3e438:	e0bff98d 	sth	r2,-26(fp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
   3e43c:	e0bff517 	ldw	r2,-44(fp)
   3e440:	1080018b 	ldhu	r2,6(r2)
   3e444:	10bfffcc 	andi	r2,r2,65535
   3e448:	1004d23a 	srli	r2,r2,8
   3e44c:	1007883a 	mov	r3,r2
   3e450:	e0bff517 	ldw	r2,-44(fp)
   3e454:	1080018b 	ldhu	r2,6(r2)
   3e458:	10bfffcc 	andi	r2,r2,65535
   3e45c:	1004923a 	slli	r2,r2,8
   3e460:	1884b03a 	or	r2,r3,r2
   3e464:	1088000c 	andi	r2,r2,8192
   3e468:	e0bffa0d 	sth	r2,-24(fp)
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
   3e46c:	e03ff38d 	sth	zero,-50(fp)
   3e470:	0000be06 	br	3e76c <ip_fragment+0x564>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
   3e474:	01000084 	movi	r4,2
   3e478:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
   3e47c:	e0fff80b 	ldhu	r3,-32(fp)
   3e480:	e0bff783 	ldbu	r2,-34(fp)
   3e484:	1887883a 	add	r3,r3,r2
   3e488:	e0bff7c3 	ldbu	r2,-33(fp)
   3e48c:	1885883a 	add	r2,r3,r2
   3e490:	1009883a 	mov	r4,r2
   3e494:	002a53c0 	call	2a53c <pk_alloc>
   3e498:	e0bffb15 	stw	r2,-20(fp)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e49c:	01000084 	movi	r4,2
   3e4a0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
   3e4a4:	e0bffb17 	ldw	r2,-20(fp)
   3e4a8:	10000f1e 	bne	r2,zero,3e4e8 <ip_fragment+0x2e0>
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
   3e4ac:	01000084 	movi	r4,2
   3e4b0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   3e4b4:	e13ffe17 	ldw	r4,-8(fp)
   3e4b8:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e4bc:	01000084 	movi	r4,2
   3e4c0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
   3e4c4:	008001b4 	movhi	r2,6
   3e4c8:	10b9e104 	addi	r2,r2,-6268
   3e4cc:	10801117 	ldw	r2,68(r2)
   3e4d0:	10c00044 	addi	r3,r2,1
   3e4d4:	008001b4 	movhi	r2,6
   3e4d8:	10b9e104 	addi	r2,r2,-6268
   3e4dc:	10c01115 	stw	r3,68(r2)
         return ENP_NOBUFFER;
   3e4e0:	00bffac4 	movi	r2,-21
   3e4e4:	0000b206 	br	3e7b0 <ip_fragment+0x5a8>
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
   3e4e8:	e0bffb17 	ldw	r2,-20(fp)
   3e4ec:	10c00117 	ldw	r3,4(r2)
   3e4f0:	e0bff7c3 	ldbu	r2,-33(fp)
   3e4f4:	1889883a 	add	r4,r3,r2
   3e4f8:	e0bffe17 	ldw	r2,-8(fp)
   3e4fc:	10c00317 	ldw	r3,12(r2)
   3e500:	e0bff783 	ldbu	r2,-34(fp)
   3e504:	180b883a 	mov	r5,r3
   3e508:	100d883a 	mov	r6,r2
   3e50c:	0007c900 	call	7c90 <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
   3e510:	e0fff38b 	ldhu	r3,-50(fp)
   3e514:	e0bff30b 	ldhu	r2,-52(fp)
   3e518:	10bfffc4 	addi	r2,r2,-1
   3e51c:	1880030e 	bge	r3,r2,3e52c <ip_fragment+0x324>
         {
            amt_to_copy = useable_payload_len;
   3e520:	e0bff80b 	ldhu	r2,-32(fp)
   3e524:	e0bff40d 	sth	r2,-48(fp)
   3e528:	00000606 	br	3e544 <ip_fragment+0x33c>
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
   3e52c:	e0bff90b 	ldhu	r2,-28(fp)
   3e530:	1000021e 	bne	r2,zero,3e53c <ip_fragment+0x334>
   3e534:	e0bff80b 	ldhu	r2,-32(fp)
   3e538:	00000106 	br	3e540 <ip_fragment+0x338>
   3e53c:	e0bff90b 	ldhu	r2,-28(fp)
   3e540:	e0bff40d 	sth	r2,-48(fp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
   3e544:	e0bffb17 	ldw	r2,-20(fp)
   3e548:	10c00117 	ldw	r3,4(r2)
   3e54c:	e13ff7c3 	ldbu	r4,-33(fp)
   3e550:	e0bff783 	ldbu	r2,-34(fp)
   3e554:	2085883a 	add	r2,r4,r2
   3e558:	188d883a 	add	r6,r3,r2
   3e55c:	e0bffe17 	ldw	r2,-8(fp)
   3e560:	10c00317 	ldw	r3,12(r2)
   3e564:	e0bff783 	ldbu	r2,-34(fp)
   3e568:	e17ff80b 	ldhu	r5,-32(fp)
   3e56c:	e13ff38b 	ldhu	r4,-50(fp)
   3e570:	2909383a 	mul	r4,r5,r4
   3e574:	1105883a 	add	r2,r2,r4
   3e578:	1887883a 	add	r3,r3,r2
   3e57c:	e0bff40b 	ldhu	r2,-48(fp)
   3e580:	3009883a 	mov	r4,r6
   3e584:	180b883a 	mov	r5,r3
   3e588:	100d883a 	mov	r6,r2
   3e58c:	0007c900 	call	7c90 <memcpy>

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
   3e590:	e0bffb17 	ldw	r2,-20(fp)
   3e594:	10c00117 	ldw	r3,4(r2)
   3e598:	e0bff7c3 	ldbu	r2,-33(fp)
   3e59c:	1887883a 	add	r3,r3,r2
   3e5a0:	e0bffb17 	ldw	r2,-20(fp)
   3e5a4:	10c00315 	stw	r3,12(r2)
         newpkt->nb_plen = iphlen + amt_to_copy;
   3e5a8:	e0fff783 	ldbu	r3,-34(fp)
   3e5ac:	e0bff40b 	ldhu	r2,-48(fp)
   3e5b0:	1885883a 	add	r2,r3,r2
   3e5b4:	1007883a 	mov	r3,r2
   3e5b8:	e0bffb17 	ldw	r2,-20(fp)
   3e5bc:	10c00415 	stw	r3,16(r2)
         newpkt->net = p->net;
   3e5c0:	e0bffe17 	ldw	r2,-8(fp)
   3e5c4:	10c00617 	ldw	r3,24(r2)
   3e5c8:	e0bffb17 	ldw	r2,-20(fp)
   3e5cc:	10c00615 	stw	r3,24(r2)
         newpkt->fhost = p->fhost;
   3e5d0:	e0bffe17 	ldw	r2,-8(fp)
   3e5d4:	10c00717 	ldw	r3,28(r2)
   3e5d8:	e0bffb17 	ldw	r2,-20(fp)
   3e5dc:	10c00715 	stw	r3,28(r2)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
   3e5e0:	e0bffb17 	ldw	r2,-20(fp)
   3e5e4:	00c20004 	movi	r3,2048
   3e5e8:	10c0080d 	sth	r3,32(r2)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
   3e5ec:	e0bffb17 	ldw	r2,-20(fp)
   3e5f0:	10800317 	ldw	r2,12(r2)
   3e5f4:	e0bffc15 	stw	r2,-16(fp)
         newpip->ip_len = htons(newpkt->nb_plen);
   3e5f8:	e0bffb17 	ldw	r2,-20(fp)
   3e5fc:	10800417 	ldw	r2,16(r2)
   3e600:	1004d23a 	srli	r2,r2,8
   3e604:	10803fcc 	andi	r2,r2,255
   3e608:	1007883a 	mov	r3,r2
   3e60c:	e0bffb17 	ldw	r2,-20(fp)
   3e610:	10800417 	ldw	r2,16(r2)
   3e614:	1004923a 	slli	r2,r2,8
   3e618:	1884b03a 	or	r2,r3,r2
   3e61c:	1007883a 	mov	r3,r2
   3e620:	e0bffc17 	ldw	r2,-16(fp)
   3e624:	10c0008d 	sth	r3,2(r2)
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
   3e628:	e0fff98b 	ldhu	r3,-26(fp)
   3e62c:	e13ff80b 	ldhu	r4,-32(fp)
   3e630:	e0bff38b 	ldhu	r2,-50(fp)
   3e634:	2085383a 	mul	r2,r4,r2
   3e638:	1885883a 	add	r2,r3,r2
   3e63c:	1005d2fa 	srai	r2,r2,11
   3e640:	10803fcc 	andi	r2,r2,255
   3e644:	100b883a 	mov	r5,r2
   3e648:	e0fff98b 	ldhu	r3,-26(fp)
   3e64c:	e13ff80b 	ldhu	r4,-32(fp)
   3e650:	e0bff38b 	ldhu	r2,-50(fp)
   3e654:	2085383a 	mul	r2,r4,r2
   3e658:	1885883a 	add	r2,r3,r2
   3e65c:	1005d0fa 	srai	r2,r2,3
   3e660:	1004923a 	slli	r2,r2,8
   3e664:	2884b03a 	or	r2,r5,r2
   3e668:	1007883a 	mov	r3,r2
   3e66c:	e0bffc17 	ldw	r2,-16(fp)
   3e670:	10c0018d 	sth	r3,6(r2)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
   3e674:	e0fff38b 	ldhu	r3,-50(fp)
   3e678:	e0bff30b 	ldhu	r2,-52(fp)
   3e67c:	10bfffc4 	addi	r2,r2,-1
   3e680:	1880070e 	bge	r3,r2,3e6a0 <ip_fragment+0x498>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
   3e684:	e0bffc17 	ldw	r2,-16(fp)
   3e688:	1080018b 	ldhu	r2,6(r2)
   3e68c:	10800814 	ori	r2,r2,32
   3e690:	1007883a 	mov	r3,r2
   3e694:	e0bffc17 	ldw	r2,-16(fp)
   3e698:	10c0018d 	sth	r3,6(r2)
   3e69c:	00000806 	br	3e6c0 <ip_fragment+0x4b8>
         }
         else
         {
            if (parent_mf)
   3e6a0:	e0bffa0b 	ldhu	r2,-24(fp)
   3e6a4:	10000626 	beq	r2,zero,3e6c0 <ip_fragment+0x4b8>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
   3e6a8:	e0bffc17 	ldw	r2,-16(fp)
   3e6ac:	1080018b 	ldhu	r2,6(r2)
   3e6b0:	10800814 	ori	r2,r2,32
   3e6b4:	1007883a 	mov	r3,r2
   3e6b8:	e0bffc17 	ldw	r2,-16(fp)
   3e6bc:	10c0018d 	sth	r3,6(r2)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
   3e6c0:	e0bffc17 	ldw	r2,-16(fp)
   3e6c4:	1000028d 	sth	zero,10(r2)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
   3e6c8:	e0bff783 	ldbu	r2,-34(fp)
   3e6cc:	1004d07a 	srli	r2,r2,1
   3e6d0:	10803fcc 	andi	r2,r2,255
   3e6d4:	e13ffc17 	ldw	r4,-16(fp)
   3e6d8:	100b883a 	mov	r5,r2
   3e6dc:	00263480 	call	26348 <cksum>
   3e6e0:	0084303a 	nor	r2,zero,r2
   3e6e4:	1007883a 	mov	r3,r2
   3e6e8:	e0bffc17 	ldw	r2,-16(fp)
   3e6ec:	10c0028d 	sth	r3,10(r2)

         ip_mib.ipFragCreates++;
   3e6f0:	008001b4 	movhi	r2,6
   3e6f4:	10b9e104 	addi	r2,r2,-6268
   3e6f8:	10801217 	ldw	r2,72(r2)
   3e6fc:	10c00044 	addi	r3,r2,1
   3e700:	008001b4 	movhi	r2,6
   3e704:	10b9e104 	addi	r2,r2,-6268
   3e708:	10c01215 	stw	r3,72(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
   3e70c:	e13ffb17 	ldw	r4,-20(fp)
   3e710:	e17fff17 	ldw	r5,-4(fp)
   3e714:	00242940 	call	24294 <ip2mac>
   3e718:	e0bffd15 	stw	r2,-12(fp)
         if (e < 0)
   3e71c:	e0bffd17 	ldw	r2,-12(fp)
   3e720:	10000f0e 	bge	r2,zero,3e760 <ip_fragment+0x558>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
   3e724:	01000084 	movi	r4,2
   3e728:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   3e72c:	e13ffe17 	ldw	r4,-8(fp)
   3e730:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e734:	01000084 	movi	r4,2
   3e738:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
   3e73c:	008001b4 	movhi	r2,6
   3e740:	10b9e104 	addi	r2,r2,-6268
   3e744:	10801117 	ldw	r2,68(r2)
   3e748:	10c00044 	addi	r3,r2,1
   3e74c:	008001b4 	movhi	r2,6
   3e750:	10b9e104 	addi	r2,r2,-6268
   3e754:	10c01115 	stw	r3,68(r2)
            return e;
   3e758:	e0bffd17 	ldw	r2,-12(fp)
   3e75c:	00001406 	br	3e7b0 <ip_fragment+0x5a8>
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
   3e760:	e0bff38b 	ldhu	r2,-50(fp)
   3e764:	10800044 	addi	r2,r2,1
   3e768:	e0bff38d 	sth	r2,-50(fp)
   3e76c:	e0fff38b 	ldhu	r3,-50(fp)
   3e770:	e0bff30b 	ldhu	r2,-52(fp)
   3e774:	18bf3f36 	bltu	r3,r2,3e474 <__alt_mem_descriptor_memory+0xdeffe474>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   3e778:	01000084 	movi	r4,2
   3e77c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   3e780:	e13ffe17 	ldw	r4,-8(fp)
   3e784:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3e788:	01000084 	movi	r4,2
   3e78c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   3e790:	008001b4 	movhi	r2,6
   3e794:	10b9e104 	addi	r2,r2,-6268
   3e798:	10801017 	ldw	r2,64(r2)
   3e79c:	10c00044 	addi	r3,r2,1
   3e7a0:	008001b4 	movhi	r2,6
   3e7a4:	10b9e104 	addi	r2,r2,-6268
   3e7a8:	10c01015 	stw	r3,64(r2)

   return 0;
   3e7ac:	0005883a 	mov	r2,zero
}
   3e7b0:	e037883a 	mov	sp,fp
   3e7b4:	dfc00117 	ldw	ra,4(sp)
   3e7b8:	df000017 	ldw	fp,0(sp)
   3e7bc:	dec00204 	addi	sp,sp,8
   3e7c0:	f800283a 	ret

0003e7c4 <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
   3e7c4:	defffa04 	addi	sp,sp,-24
   3e7c8:	dfc00515 	stw	ra,20(sp)
   3e7cc:	df000415 	stw	fp,16(sp)
   3e7d0:	df000404 	addi	fp,sp,16
   3e7d4:	e13fff15 	stw	r4,-4(fp)

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
   3e7d8:	e0bffe04 	addi	r2,fp,-8
   3e7dc:	e13fff17 	ldw	r4,-4(fp)
   3e7e0:	100b883a 	mov	r5,r2
   3e7e4:	003eaf40 	call	3eaf4 <iproute>
   3e7e8:	e0bffd15 	stw	r2,-12(fp)
   if (tnet == 0)
   3e7ec:	e0bffd17 	ldw	r2,-12(fp)
   3e7f0:	1000161e 	bne	r2,zero,3e84c <ip_mymach+0x88>
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
   3e7f4:	00800174 	movhi	r2,5
   3e7f8:	108f9904 	addi	r2,r2,15972
   3e7fc:	10800017 	ldw	r2,0(r2)
   3e800:	1080050c 	andi	r2,r2,20
   3e804:	10000f26 	beq	r2,zero,3e844 <ip_mymach+0x80>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
   3e808:	e0bfff17 	ldw	r2,-4(fp)
   3e80c:	11403fcc 	andi	r5,r2,255
   3e810:	e0bfff17 	ldw	r2,-4(fp)
   3e814:	1004d23a 	srli	r2,r2,8
   3e818:	11803fcc 	andi	r6,r2,255
   3e81c:	e0bfff17 	ldw	r2,-4(fp)
   3e820:	1004d43a 	srli	r2,r2,16
   3e824:	10c03fcc 	andi	r3,r2,255
   3e828:	e0bfff17 	ldw	r2,-4(fp)
   3e82c:	1004d63a 	srli	r2,r2,24
   3e830:	d8800015 	stw	r2,0(sp)
   3e834:	01000174 	movhi	r4,5
   3e838:	213c6e04 	addi	r4,r4,-3656
   3e83c:	180f883a 	mov	r7,r3
   3e840:	00080f80 	call	80f8 <printf>
#endif   /* NPDEBUG */
      return 0L;
   3e844:	0005883a 	mov	r2,zero
   3e848:	00000206 	br	3e854 <ip_mymach+0x90>
   }
   return tnet->n_ipaddr;
   3e84c:	e0bffd17 	ldw	r2,-12(fp)
   3e850:	10800a17 	ldw	r2,40(r2)
#endif /* MULTI_HOMED */
}
   3e854:	e037883a 	mov	sp,fp
   3e858:	dfc00117 	ldw	ra,4(sp)
   3e85c:	df000017 	ldw	fp,0(sp)
   3e860:	dec00204 	addi	sp,sp,8
   3e864:	f800283a 	ret

0003e868 <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
   3e868:	defff704 	addi	sp,sp,-36
   3e86c:	dfc00815 	stw	ra,32(sp)
   3e870:	df000715 	stw	fp,28(sp)
   3e874:	df000704 	addi	fp,sp,28
   3e878:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
   3e87c:	e0bfff17 	ldw	r2,-4(fp)
   3e880:	10800317 	ldw	r2,12(r2)
   3e884:	e0bffc15 	stw	r2,-16(fp)
   osum = pip->ip_chksum;
   3e888:	e0bffc17 	ldw	r2,-16(fp)
   3e88c:	1080028b 	ldhu	r2,10(r2)
   3e890:	e0bffd0d 	sth	r2,-12(fp)
   pip->ip_chksum = 0;
   3e894:	e0bffc17 	ldw	r2,-16(fp)
   3e898:	1000028d 	sth	zero,10(r2)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
   3e89c:	e0bffc17 	ldw	r2,-16(fp)
   3e8a0:	10800003 	ldbu	r2,0(r2)
   3e8a4:	10803fcc 	andi	r2,r2,255
   3e8a8:	108003cc 	andi	r2,r2,15
   3e8ac:	1085883a 	add	r2,r2,r2
   3e8b0:	1085883a 	add	r2,r2,r2
   3e8b4:	1005d07a 	srai	r2,r2,1
   3e8b8:	e13ffc17 	ldw	r4,-16(fp)
   3e8bc:	100b883a 	mov	r5,r2
   3e8c0:	00263480 	call	26348 <cksum>
   3e8c4:	0084303a 	nor	r2,zero,r2
   3e8c8:	e0bffd8d 	sth	r2,-10(fp)

   if (osum != xsum)          /* trap here if checksum is wrong */
   3e8cc:	e0fffd0b 	ldhu	r3,-12(fp)
   3e8d0:	e0bffd8b 	ldhu	r2,-10(fp)
   3e8d4:	18800126 	beq	r3,r2,3e8dc <ip_dump+0x74>
   {
      dtrap();
   3e8d8:	002b0f40 	call	2b0f4 <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
   3e8dc:	0009883a 	mov	r4,zero
   3e8e0:	01400174 	movhi	r5,5
   3e8e4:	297c7704 	addi	r5,r5,-3620
   3e8e8:	002694c0 	call	2694c <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   3e8ec:	e0bffc17 	ldw	r2,-16(fp)
   3e8f0:	e0bffe15 	stw	r2,-8(fp)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   3e8f4:	e0bffe17 	ldw	r2,-8(fp)
   3e8f8:	10800003 	ldbu	r2,0(r2)
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
   3e8fc:	11803fcc 	andi	r6,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   3e900:	e0bffe17 	ldw	r2,-8(fp)
   3e904:	10800044 	addi	r2,r2,1
   3e908:	10800003 	ldbu	r2,0(r2)
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
   3e90c:	11c03fcc 	andi	r7,r2,255
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   3e910:	e0bffc17 	ldw	r2,-16(fp)
   3e914:	1080008b 	ldhu	r2,2(r2)
   3e918:	10bfffcc 	andi	r2,r2,65535
   3e91c:	1004d23a 	srli	r2,r2,8
   3e920:	10bfffcc 	andi	r2,r2,65535
   3e924:	10c03fcc 	andi	r3,r2,255
   3e928:	e0bffc17 	ldw	r2,-16(fp)
   3e92c:	1080008b 	ldhu	r2,2(r2)
   3e930:	10bfffcc 	andi	r2,r2,65535
   3e934:	1004923a 	slli	r2,r2,8
   3e938:	10bfffcc 	andi	r2,r2,65535
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
   3e93c:	1886b03a 	or	r3,r3,r2
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   3e940:	e0bffc17 	ldw	r2,-16(fp)
   3e944:	1080010b 	ldhu	r2,4(r2)
   3e948:	10bfffcc 	andi	r2,r2,65535
   3e94c:	1004d23a 	srli	r2,r2,8
   3e950:	10bfffcc 	andi	r2,r2,65535
   3e954:	11003fcc 	andi	r4,r2,255
   3e958:	e0bffc17 	ldw	r2,-16(fp)
   3e95c:	1080010b 	ldhu	r2,4(r2)
   3e960:	10bfffcc 	andi	r2,r2,65535
   3e964:	1004923a 	slli	r2,r2,8
   3e968:	10bfffcc 	andi	r2,r2,65535
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
   3e96c:	2084b03a 	or	r2,r4,r2
   3e970:	d8c00015 	stw	r3,0(sp)
   3e974:	d8800115 	stw	r2,4(sp)
   3e978:	0009883a 	mov	r4,zero
   3e97c:	01400174 	movhi	r5,5
   3e980:	297c7c04 	addi	r5,r5,-3600
   3e984:	002694c0 	call	2694c <ns_printf>
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
   3e988:	e0bffe17 	ldw	r2,-8(fp)
   3e98c:	10800184 	addi	r2,r2,6
   3e990:	1080000b 	ldhu	r2,0(r2)
   3e994:	10bfffcc 	andi	r2,r2,65535
   3e998:	1004d23a 	srli	r2,r2,8
   3e99c:	10bfffcc 	andi	r2,r2,65535
   3e9a0:	10c03fcc 	andi	r3,r2,255
   3e9a4:	e0bffe17 	ldw	r2,-8(fp)
   3e9a8:	10800184 	addi	r2,r2,6
   3e9ac:	1080000b 	ldhu	r2,0(r2)
   3e9b0:	10bfffcc 	andi	r2,r2,65535
   3e9b4:	1004923a 	slli	r2,r2,8
   3e9b8:	10bfffcc 	andi	r2,r2,65535

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
   3e9bc:	188cb03a 	or	r6,r3,r2
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
   3e9c0:	e0bffc17 	ldw	r2,-16(fp)
   3e9c4:	10800203 	ldbu	r2,8(r2)

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
   3e9c8:	11c03fcc 	andi	r7,r2,255
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
   3e9cc:	e0bffc17 	ldw	r2,-16(fp)
   3e9d0:	10800243 	ldbu	r2,9(r2)

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
   3e9d4:	11003fcc 	andi	r4,r2,255
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
    htons(osum), (osum==xsum)?"ok":"bad");
   3e9d8:	e0bffd0b 	ldhu	r2,-12(fp)
   3e9dc:	1004d23a 	srli	r2,r2,8
   3e9e0:	10bfffcc 	andi	r2,r2,65535
   3e9e4:	10c03fcc 	andi	r3,r2,255
   3e9e8:	e0bffd0b 	ldhu	r2,-12(fp)
   3e9ec:	1004923a 	slli	r2,r2,8
   3e9f0:	10bfffcc 	andi	r2,r2,65535

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
   3e9f4:	1886b03a 	or	r3,r3,r2
   3e9f8:	e17ffd0b 	ldhu	r5,-12(fp)
   3e9fc:	e0bffd8b 	ldhu	r2,-10(fp)
   3ea00:	2880031e 	bne	r5,r2,3ea10 <ip_dump+0x1a8>
   3ea04:	00800174 	movhi	r2,5
   3ea08:	10bc8804 	addi	r2,r2,-3552
   3ea0c:	00000206 	br	3ea18 <ip_dump+0x1b0>
   3ea10:	00800174 	movhi	r2,5
   3ea14:	10bc8904 	addi	r2,r2,-3548
   3ea18:	d9000015 	stw	r4,0(sp)
   3ea1c:	d8c00115 	stw	r3,4(sp)
   3ea20:	d8800215 	stw	r2,8(sp)
   3ea24:	0009883a 	mov	r4,zero
   3ea28:	01400174 	movhi	r5,5
   3ea2c:	297c8a04 	addi	r5,r5,-3544
   3ea30:	002694c0 	call	2694c <ns_printf>
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
    htons(osum), (osum==xsum)?"ok":"bad");
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
   3ea34:	e0bffc17 	ldw	r2,-16(fp)
   3ea38:	10800317 	ldw	r2,12(r2)
   3ea3c:	11803fcc 	andi	r6,r2,255
   3ea40:	e0bffc17 	ldw	r2,-16(fp)
   3ea44:	10800317 	ldw	r2,12(r2)
   3ea48:	1004d23a 	srli	r2,r2,8
   3ea4c:	11c03fcc 	andi	r7,r2,255
   3ea50:	e0bffc17 	ldw	r2,-16(fp)
   3ea54:	10800317 	ldw	r2,12(r2)
   3ea58:	1004d43a 	srli	r2,r2,16
   3ea5c:	10c03fcc 	andi	r3,r2,255
   3ea60:	e0bffc17 	ldw	r2,-16(fp)
   3ea64:	10800317 	ldw	r2,12(r2)
   3ea68:	1004d63a 	srli	r2,r2,24
   3ea6c:	d8c00015 	stw	r3,0(sp)
   3ea70:	d8800115 	stw	r2,4(sp)
   3ea74:	0009883a 	mov	r4,zero
   3ea78:	01400174 	movhi	r5,5
   3ea7c:	297c9a04 	addi	r5,r5,-3480
   3ea80:	002694c0 	call	2694c <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
   3ea84:	e0bffc17 	ldw	r2,-16(fp)
   3ea88:	10800417 	ldw	r2,16(r2)
   3ea8c:	11803fcc 	andi	r6,r2,255
   3ea90:	e0bffc17 	ldw	r2,-16(fp)
   3ea94:	10800417 	ldw	r2,16(r2)
   3ea98:	1004d23a 	srli	r2,r2,8
   3ea9c:	11c03fcc 	andi	r7,r2,255
   3eaa0:	e0bffc17 	ldw	r2,-16(fp)
   3eaa4:	10800417 	ldw	r2,16(r2)
   3eaa8:	1004d43a 	srli	r2,r2,16
   3eaac:	10c03fcc 	andi	r3,r2,255
   3eab0:	e0bffc17 	ldw	r2,-16(fp)
   3eab4:	10800417 	ldw	r2,16(r2)
   3eab8:	1004d63a 	srli	r2,r2,24
   3eabc:	d8c00015 	stw	r3,0(sp)
   3eac0:	d8800115 	stw	r2,4(sp)
   3eac4:	0009883a 	mov	r4,zero
   3eac8:	01400174 	movhi	r5,5
   3eacc:	297c9f04 	addi	r5,r5,-3460
   3ead0:	002694c0 	call	2694c <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
   3ead4:	e0bffc17 	ldw	r2,-16(fp)
   3ead8:	e0fffd0b 	ldhu	r3,-12(fp)
   3eadc:	10c0028d 	sth	r3,10(r2)
}
   3eae0:	e037883a 	mov	sp,fp
   3eae4:	dfc00117 	ldw	ra,4(sp)
   3eae8:	df000017 	ldw	fp,0(sp)
   3eaec:	dec00204 	addi	sp,sp,8
   3eaf0:	f800283a 	ret

0003eaf4 <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
   3eaf4:	defff804 	addi	sp,sp,-32
   3eaf8:	dfc00715 	stw	ra,28(sp)
   3eafc:	df000615 	stw	fp,24(sp)
   3eb00:	df000604 	addi	fp,sp,24
   3eb04:	e13ffe15 	stw	r4,-8(fp)
   3eb08:	e17fff15 	stw	r5,-4(fp)
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
   3eb0c:	e0bffe17 	ldw	r2,-8(fp)
   3eb10:	1000021e 	bne	r2,zero,3eb1c <iproute+0x28>
      return NULL;
   3eb14:	0005883a 	mov	r2,zero
   3eb18:	00007a06 	br	3ed04 <iproute+0x210>
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
   3eb1c:	d0a8b217 	ldw	r2,-23864(gp)
   3eb20:	1000021e 	bne	r2,zero,3eb2c <iproute+0x38>
      return NULL;
   3eb24:	0005883a 	mov	r2,zero
   3eb28:	00007606 	br	3ed04 <iproute+0x210>
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
   3eb2c:	00800174 	movhi	r2,5
   3eb30:	108fe604 	addi	r2,r2,16280
   3eb34:	10800017 	ldw	r2,0(r2)
   3eb38:	10001826 	beq	r2,zero,3eb9c <iproute+0xa8>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
   3eb3c:	00800174 	movhi	r2,5
   3eb40:	108fe604 	addi	r2,r2,16280
   3eb44:	10800017 	ldw	r2,0(r2)
   3eb48:	10c00017 	ldw	r3,0(r2)
   3eb4c:	e0bffe17 	ldw	r2,-8(fp)
   3eb50:	1880121e 	bne	r3,r2,3eb9c <iproute+0xa8>
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
   3eb54:	00800174 	movhi	r2,5
   3eb58:	108fe604 	addi	r2,r2,16280
   3eb5c:	10800017 	ldw	r2,0(r2)
   3eb60:	10c00617 	ldw	r3,24(r2)
   3eb64:	e0bfff17 	ldw	r2,-4(fp)
   3eb68:	10c00015 	stw	r3,0(r2)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
   3eb6c:	00800174 	movhi	r2,5
   3eb70:	108fe604 	addi	r2,r2,16280
   3eb74:	10c00017 	ldw	r3,0(r2)
   3eb78:	00800174 	movhi	r2,5
   3eb7c:	108fbe04 	addi	r2,r2,16120
   3eb80:	10800017 	ldw	r2,0(r2)
   3eb84:	18800915 	stw	r2,36(r3)
         return(cachedRoute->ifp); /* net to send on */
   3eb88:	00800174 	movhi	r2,5
   3eb8c:	108fe604 	addi	r2,r2,16280
   3eb90:	10800017 	ldw	r2,0(r2)
   3eb94:	10800e17 	ldw	r2,56(r2)
   3eb98:	00005a06 	br	3ed04 <iproute+0x210>
      }
   }

   rtp = rt_lookup(host);
   3eb9c:	e13ffe17 	ldw	r4,-8(fp)
   3eba0:	00420a40 	call	420a4 <rt_lookup>
   3eba4:	e0bffd15 	stw	r2,-12(fp)
   if(rtp)
   3eba8:	e0bffd17 	ldw	r2,-12(fp)
   3ebac:	10000b26 	beq	r2,zero,3ebdc <iproute+0xe8>
   {
      cachedRoute = rtp;
   3ebb0:	00800174 	movhi	r2,5
   3ebb4:	108fe604 	addi	r2,r2,16280
   3ebb8:	e0fffd17 	ldw	r3,-12(fp)
   3ebbc:	10c00015 	stw	r3,0(r2)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
   3ebc0:	e0bffd17 	ldw	r2,-12(fp)
   3ebc4:	10c00617 	ldw	r3,24(r2)
   3ebc8:	e0bfff17 	ldw	r2,-4(fp)
   3ebcc:	10c00015 	stw	r3,0(r2)
      return(rtp->ifp);             /* return pointer to net */
   3ebd0:	e0bffd17 	ldw	r2,-12(fp)
   3ebd4:	10800e17 	ldw	r2,56(r2)
   3ebd8:	00004a06 	br	3ed04 <iproute+0x210>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
   3ebdc:	008001b4 	movhi	r2,6
   3ebe0:	10b9dc04 	addi	r2,r2,-6288
   3ebe4:	10800017 	ldw	r2,0(r2)
   3ebe8:	e0bffc15 	stw	r2,-16(fp)
   i = 0;
   3ebec:	e03ffb15 	stw	zero,-20(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
   3ebf0:	00002906 	br	3ec98 <iproute+0x1a4>
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
   3ebf4:	e0bffc17 	ldw	r2,-16(fp)
   3ebf8:	10800c17 	ldw	r2,48(r2)
   3ebfc:	10002026 	beq	r2,zero,3ec80 <iproute+0x18c>
         (ifp->n_ipaddr != 0) && 
   3ec00:	e0bffc17 	ldw	r2,-16(fp)
   3ec04:	10800a17 	ldw	r2,40(r2)
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
   3ec08:	10001d26 	beq	r2,zero,3ec80 <iproute+0x18c>
         (ifp->n_ipaddr != 0) && 
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
   3ec0c:	e0bffc17 	ldw	r2,-16(fp)
   3ec10:	10c00a17 	ldw	r3,40(r2)
   3ec14:	e0bffe17 	ldw	r2,-8(fp)
   3ec18:	1886f03a 	xor	r3,r3,r2
   3ec1c:	e0bffc17 	ldw	r2,-16(fp)
   3ec20:	10800c17 	ldw	r2,48(r2)
   3ec24:	1884703a 	and	r2,r3,r2
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
         (ifp->n_ipaddr != 0) && 
   3ec28:	1000151e 	bne	r2,zero,3ec80 <iproute+0x18c>
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
   3ec2c:	00800044 	movi	r2,1
   3ec30:	d8800015 	stw	r2,0(sp)
   3ec34:	e13ffe17 	ldw	r4,-8(fp)
   3ec38:	017fffc4 	movi	r5,-1
   3ec3c:	e1bffe17 	ldw	r6,-8(fp)
   3ec40:	e1fffb17 	ldw	r7,-20(fp)
   3ec44:	00422100 	call	42210 <add_route>
   3ec48:	1007883a 	mov	r3,r2
   3ec4c:	00800174 	movhi	r2,5
   3ec50:	108fe604 	addi	r2,r2,16280
   3ec54:	10c00015 	stw	r3,0(r2)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
   3ec58:	00800174 	movhi	r2,5
   3ec5c:	108fe604 	addi	r2,r2,16280
   3ec60:	10800017 	ldw	r2,0(r2)
   3ec64:	1000011e 	bne	r2,zero,3ec6c <iproute+0x178>
            dtrap();
   3ec68:	002b0f40 	call	2b0f4 <dtrap>
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
   3ec6c:	e0bfff17 	ldw	r2,-4(fp)
   3ec70:	e0fffe17 	ldw	r3,-8(fp)
   3ec74:	10c00015 	stw	r3,0(r2)
         return ifp;
   3ec78:	e0bffc17 	ldw	r2,-16(fp)
   3ec7c:	00002106 	br	3ed04 <iproute+0x210>
    * well.  
    */
   ifp = (NET)(netlist.q_head);
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
   3ec80:	e0bffc17 	ldw	r2,-16(fp)
   3ec84:	10800017 	ldw	r2,0(r2)
   3ec88:	e0bffc15 	stw	r2,-16(fp)
   3ec8c:	e0bffb17 	ldw	r2,-20(fp)
   3ec90:	10800044 	addi	r2,r2,1
   3ec94:	e0bffb15 	stw	r2,-20(fp)
   3ec98:	e0bffc17 	ldw	r2,-16(fp)
   3ec9c:	103fd51e 	bne	r2,zero,3ebf4 <__alt_mem_descriptor_memory+0xdeffebf4>
#endif   /* IP_LOOPBACK */

   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
   3eca0:	008001b4 	movhi	r2,6
   3eca4:	10b9dc04 	addi	r2,r2,-6288
   3eca8:	10800017 	ldw	r2,0(r2)
   3ecac:	e0bffc15 	stw	r2,-16(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
   3ecb0:	00000c06 	br	3ece4 <iproute+0x1f0>
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
   3ecb4:	e0bffc17 	ldw	r2,-16(fp)
   3ecb8:	10800d17 	ldw	r2,52(r2)
   3ecbc:	10000626 	beq	r2,zero,3ecd8 <iproute+0x1e4>
      {
         *hop1 = ifp->n_defgw;
   3ecc0:	e0bffc17 	ldw	r2,-16(fp)
   3ecc4:	10c00d17 	ldw	r3,52(r2)
   3ecc8:	e0bfff17 	ldw	r2,-4(fp)
   3eccc:	10c00015 	stw	r3,0(r2)
         return ifp;
   3ecd0:	e0bffc17 	ldw	r2,-16(fp)
   3ecd4:	00000b06 	br	3ed04 <iproute+0x210>
   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
   3ecd8:	e0bffc17 	ldw	r2,-16(fp)
   3ecdc:	10800017 	ldw	r2,0(r2)
   3ece0:	e0bffc15 	stw	r2,-16(fp)
   3ece4:	e0bffc17 	ldw	r2,-16(fp)
   3ece8:	103ff21e 	bne	r2,zero,3ecb4 <__alt_mem_descriptor_memory+0xdeffecb4>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
   3ecec:	e0bfff17 	ldw	r2,-4(fp)
   3ecf0:	e0fffe17 	ldw	r3,-8(fp)
   3ecf4:	10c00015 	stw	r3,0(r2)
   return((NET)(netlist.q_head));
   3ecf8:	008001b4 	movhi	r2,6
   3ecfc:	10b9dc04 	addi	r2,r2,-6288
   3ed00:	10800017 	ldw	r2,0(r2)
#endif   /* STRICT_SUBNETTING */
}
   3ed04:	e037883a 	mov	sp,fp
   3ed08:	dfc00117 	ldw	ra,4(sp)
   3ed0c:	df000017 	ldw	fp,0(sp)
   3ed10:	dec00204 	addi	sp,sp,8
   3ed14:	f800283a 	ret

0003ed18 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
   3ed18:	defffb04 	addi	sp,sp,-20
   3ed1c:	dfc00415 	stw	ra,16(sp)
   3ed20:	df000315 	stw	fp,12(sp)
   3ed24:	df000304 	addi	fp,sp,12
   3ed28:	e13fff15 	stw	r4,-4(fp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
   3ed2c:	e0bfff17 	ldw	r2,-4(fp)
   3ed30:	10800417 	ldw	r2,16(r2)
   3ed34:	e0ffff17 	ldw	r3,-4(fp)
   3ed38:	18c00317 	ldw	r3,12(r3)
   3ed3c:	1809883a 	mov	r4,r3
   3ed40:	e0ffff17 	ldw	r3,-4(fp)
   3ed44:	18c00117 	ldw	r3,4(r3)
   3ed48:	20c7c83a 	sub	r3,r4,r3
   3ed4c:	10c5883a 	add	r2,r2,r3
   3ed50:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   3ed54:	01000084 	movi	r4,2
   3ed58:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
   3ed5c:	e0bffd17 	ldw	r2,-12(fp)
   3ed60:	1009883a 	mov	r4,r2
   3ed64:	002a53c0 	call	2a53c <pk_alloc>
   3ed68:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   3ed6c:	01000084 	movi	r4,2
   3ed70:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (np == NULL)
   3ed74:	e0bffe17 	ldw	r2,-8(fp)
   3ed78:	1000061e 	bne	r2,zero,3ed94 <ip_copypkt+0x7c>
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
   3ed7c:	01000174 	movhi	r4,5
   3ed80:	213ca404 	addi	r4,r4,-3440
   3ed84:	e17ffd17 	ldw	r5,-12(fp)
   3ed88:	00080f80 	call	80f8 <printf>
#endif
      return NULL;
   3ed8c:	0005883a 	mov	r2,zero
   3ed90:	00002806 	br	3ee34 <ip_copypkt+0x11c>
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
   3ed94:	e0bffe17 	ldw	r2,-8(fp)
   3ed98:	11000117 	ldw	r4,4(r2)
   3ed9c:	e0bfff17 	ldw	r2,-4(fp)
   3eda0:	10c00117 	ldw	r3,4(r2)
   3eda4:	e0bffd17 	ldw	r2,-12(fp)
   3eda8:	180b883a 	mov	r5,r3
   3edac:	100d883a 	mov	r6,r2
   3edb0:	0007c900 	call	7c90 <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
   3edb4:	e0bffe17 	ldw	r2,-8(fp)
   3edb8:	10800117 	ldw	r2,4(r2)
   3edbc:	e0ffff17 	ldw	r3,-4(fp)
   3edc0:	18c00317 	ldw	r3,12(r3)
   3edc4:	1809883a 	mov	r4,r3
   3edc8:	e0ffff17 	ldw	r3,-4(fp)
   3edcc:	18c00117 	ldw	r3,4(r3)
   3edd0:	20c7c83a 	sub	r3,r4,r3
   3edd4:	10c7883a 	add	r3,r2,r3
   3edd8:	e0bffe17 	ldw	r2,-8(fp)
   3eddc:	10c00315 	stw	r3,12(r2)
   np->nb_plen = p->nb_plen;
   3ede0:	e0bfff17 	ldw	r2,-4(fp)
   3ede4:	10c00417 	ldw	r3,16(r2)
   3ede8:	e0bffe17 	ldw	r2,-8(fp)
   3edec:	10c00415 	stw	r3,16(r2)
   np->net = p->net;
   3edf0:	e0bfff17 	ldw	r2,-4(fp)
   3edf4:	10c00617 	ldw	r3,24(r2)
   3edf8:	e0bffe17 	ldw	r2,-8(fp)
   3edfc:	10c00615 	stw	r3,24(r2)
   np->fhost = p->fhost;
   3ee00:	e0bfff17 	ldw	r2,-4(fp)
   3ee04:	10c00717 	ldw	r3,28(r2)
   3ee08:	e0bffe17 	ldw	r2,-8(fp)
   3ee0c:	10c00715 	stw	r3,28(r2)
   np->type = p->type;
   3ee10:	e0bfff17 	ldw	r2,-4(fp)
   3ee14:	10c0080b 	ldhu	r3,32(r2)
   3ee18:	e0bffe17 	ldw	r2,-8(fp)
   3ee1c:	10c0080d 	sth	r3,32(r2)
   np->nb_tstamp = p->nb_tstamp;
   3ee20:	e0bfff17 	ldw	r2,-4(fp)
   3ee24:	10c00517 	ldw	r3,20(r2)
   3ee28:	e0bffe17 	ldw	r2,-8(fp)
   3ee2c:	10c00515 	stw	r3,20(r2)

   /* return pointer to the copy */
   return np;
   3ee30:	e0bffe17 	ldw	r2,-8(fp)
}
   3ee34:	e037883a 	mov	sp,fp
   3ee38:	dfc00117 	ldw	ra,4(sp)
   3ee3c:	df000017 	ldw	fp,0(sp)
   3ee40:	dec00204 	addi	sp,sp,8
   3ee44:	f800283a 	ret

0003ee48 <ip_reasm_match_frag_with_ire>:
packet being processed.  If no such entry is found, this function returns 
NULL.
*/

IREP ip_reasm_match_frag_with_ire (struct ip * pip)
{
   3ee48:	defffa04 	addi	sp,sp,-24
   3ee4c:	df000515 	stw	fp,20(sp)
   3ee50:	df000504 	addi	fp,sp,20
   3ee54:	e13fff15 	stw	r4,-4(fp)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
   3ee58:	e0bfff17 	ldw	r2,-4(fp)
   3ee5c:	10800317 	ldw	r2,12(r2)
   3ee60:	e0bffc15 	stw	r2,-16(fp)
   dest = pip->ip_dest;
   3ee64:	e0bfff17 	ldw	r2,-4(fp)
   3ee68:	10800417 	ldw	r2,16(r2)
   3ee6c:	e0bffd15 	stw	r2,-12(fp)
   prot = pip->ip_prot;
   3ee70:	e0bfff17 	ldw	r2,-4(fp)
   3ee74:	10800243 	ldbu	r2,9(r2)
   3ee78:	e0bffe05 	stb	r2,-8(fp)
   id = pip->ip_id;
   3ee7c:	e0bfff17 	ldw	r2,-4(fp)
   3ee80:	1080010b 	ldhu	r2,4(r2)
   3ee84:	e0bffe8d 	sth	r2,-6(fp)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   3ee88:	d0a8b417 	ldw	r2,-23856(gp)
   3ee8c:	e0bffb15 	stw	r2,-20(fp)
   3ee90:	00001706 	br	3eef0 <ip_reasm_match_frag_with_ire+0xa8>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
   3ee94:	e0bffb17 	ldw	r2,-20(fp)
   3ee98:	10c00117 	ldw	r3,4(r2)
   3ee9c:	e0bffc17 	ldw	r2,-16(fp)
   3eea0:	1880101e 	bne	r3,r2,3eee4 <ip_reasm_match_frag_with_ire+0x9c>
   3eea4:	e0bffb17 	ldw	r2,-20(fp)
   3eea8:	10c00217 	ldw	r3,8(r2)
   3eeac:	e0bffd17 	ldw	r2,-12(fp)
   3eeb0:	18800c1e 	bne	r3,r2,3eee4 <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
   3eeb4:	e0bffb17 	ldw	r2,-20(fp)
   3eeb8:	10800383 	ldbu	r2,14(r2)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
   3eebc:	10c03fcc 	andi	r3,r2,255
   3eec0:	e0bffe03 	ldbu	r2,-8(fp)
   3eec4:	1880071e 	bne	r3,r2,3eee4 <ip_reasm_match_frag_with_ire+0x9c>
          (tmpp->prot == prot) && (tmpp->id == id))
   3eec8:	e0bffb17 	ldw	r2,-20(fp)
   3eecc:	1080030b 	ldhu	r2,12(r2)
   3eed0:	10ffffcc 	andi	r3,r2,65535
   3eed4:	e0bffe8b 	ldhu	r2,-6(fp)
   3eed8:	1880021e 	bne	r3,r2,3eee4 <ip_reasm_match_frag_with_ire+0x9c>
         {
         return tmpp; /* we've found a match */
   3eedc:	e0bffb17 	ldw	r2,-20(fp)
   3eee0:	00000606 	br	3eefc <ip_reasm_match_frag_with_ire+0xb4>
   prot = pip->ip_prot;
   id = pip->ip_id;

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   3eee4:	e0bffb17 	ldw	r2,-20(fp)
   3eee8:	10800017 	ldw	r2,0(r2)
   3eeec:	e0bffb15 	stw	r2,-20(fp)
   3eef0:	e0bffb17 	ldw	r2,-20(fp)
   3eef4:	103fe71e 	bne	r2,zero,3ee94 <__alt_mem_descriptor_memory+0xdeffee94>
         return tmpp; /* we've found a match */
         }
      }

   /* no match found */
   return NULL;
   3eef8:	0005883a 	mov	r2,zero
}
   3eefc:	e037883a 	mov	sp,fp
   3ef00:	df000017 	ldw	fp,0(sp)
   3ef04:	dec00104 	addi	sp,sp,4
   3ef08:	f800283a 	ret

0003ef0c <ip_reasm_determine_type_of_frag>:
OUTPUT: One of the various IP_FRAGTYPE values (IP_CP, IP_FF, IP_MF, 
or IP_LF)
*/

IP_FRAGTYPE ip_reasm_determine_type_of_frag (struct ip * pip)
{
   3ef0c:	defffc04 	addi	sp,sp,-16
   3ef10:	df000315 	stw	fp,12(sp)
   3ef14:	df000304 	addi	fp,sp,12
   3ef18:	e13fff15 	stw	r4,-4(fp)
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
   3ef1c:	e0bfff17 	ldw	r2,-4(fp)
   3ef20:	1080018b 	ldhu	r2,6(r2)
   3ef24:	10bfffcc 	andi	r2,r2,65535
   3ef28:	1004d23a 	srli	r2,r2,8
   3ef2c:	10bfffcc 	andi	r2,r2,65535
   3ef30:	10c03fcc 	andi	r3,r2,255
   3ef34:	e0bfff17 	ldw	r2,-4(fp)
   3ef38:	1080018b 	ldhu	r2,6(r2)
   3ef3c:	10bfffcc 	andi	r2,r2,65535
   3ef40:	1004923a 	slli	r2,r2,8
   3ef44:	10bfffcc 	andi	r2,r2,65535
   3ef48:	1884b03a 	or	r2,r3,r2
   3ef4c:	1088000c 	andi	r2,r2,8192
   3ef50:	1005d37a 	srai	r2,r2,13
   3ef54:	e0bffe0d 	sth	r2,-8(fp)
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
   3ef58:	e0bfff17 	ldw	r2,-4(fp)
   3ef5c:	1080018b 	ldhu	r2,6(r2)
   3ef60:	10bfffcc 	andi	r2,r2,65535
   3ef64:	1004d23a 	srli	r2,r2,8
   3ef68:	1007883a 	mov	r3,r2
   3ef6c:	e0bfff17 	ldw	r2,-4(fp)
   3ef70:	1080018b 	ldhu	r2,6(r2)
   3ef74:	10bfffcc 	andi	r2,r2,65535
   3ef78:	1004923a 	slli	r2,r2,8
   3ef7c:	1884b03a 	or	r2,r3,r2
   3ef80:	1087ffcc 	andi	r2,r2,8191
   3ef84:	e0bffe8d 	sth	r2,-6(fp)

  if (mf == 0)
   3ef88:	e0bffe0b 	ldhu	r2,-8(fp)
   3ef8c:	1000071e 	bne	r2,zero,3efac <ip_reasm_determine_type_of_frag+0xa0>
     {
     if (foff == 0) {rc = IP_CP;}
   3ef90:	e0bffe8b 	ldhu	r2,-6(fp)
   3ef94:	1000021e 	bne	r2,zero,3efa0 <ip_reasm_determine_type_of_frag+0x94>
   3ef98:	e03ffd15 	stw	zero,-12(fp)
   3ef9c:	00000a06 	br	3efc8 <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_LF;}
   3efa0:	00800144 	movi	r2,5
   3efa4:	e0bffd15 	stw	r2,-12(fp)
   3efa8:	00000706 	br	3efc8 <ip_reasm_determine_type_of_frag+0xbc>
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
   3efac:	e0bffe8b 	ldhu	r2,-6(fp)
   3efb0:	1000031e 	bne	r2,zero,3efc0 <ip_reasm_determine_type_of_frag+0xb4>
   3efb4:	00800044 	movi	r2,1
   3efb8:	e0bffd15 	stw	r2,-12(fp)
   3efbc:	00000206 	br	3efc8 <ip_reasm_determine_type_of_frag+0xbc>
     else {rc = IP_MF;}
   3efc0:	008000c4 	movi	r2,3
   3efc4:	e0bffd15 	stw	r2,-12(fp)
     }

  return rc;
   3efc8:	e0bffd17 	ldw	r2,-12(fp)
}
   3efcc:	e037883a 	mov	sp,fp
   3efd0:	df000017 	ldw	fp,0(sp)
   3efd4:	dec00104 	addi	sp,sp,4
   3efd8:	f800283a 	ret

0003efdc <ip_reasm_check_mem_useage>:
OUTPUT: ENP_RESOURCE, if the increment request can't be allowed; 
otherwise it returns IPREASM_OK.
*/

int ip_reasm_check_mem_useage (u_short increment)
{
   3efdc:	defffe04 	addi	sp,sp,-8
   3efe0:	df000115 	stw	fp,4(sp)
   3efe4:	df000104 	addi	fp,sp,4
   3efe8:	2005883a 	mov	r2,r4
   3efec:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
   3eff0:	d0a8b317 	ldw	r2,-23860(gp)
   3eff4:	00c001b4 	movhi	r3,6
   3eff8:	1880072e 	bgeu	r3,r2,3f018 <ip_reasm_check_mem_useage+0x3c>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
   3effc:	008001b4 	movhi	r2,6
   3f000:	10b9f504 	addi	r2,r2,-6188
   3f004:	10800217 	ldw	r2,8(r2)
   3f008:	10c00044 	addi	r3,r2,1
   3f00c:	008001b4 	movhi	r2,6
   3f010:	10b9f504 	addi	r2,r2,-6188
   3f014:	10c00215 	stw	r3,8(r2)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
   3f018:	d0e8b317 	ldw	r3,-23860(gp)
   3f01c:	008001b4 	movhi	r2,6
   3f020:	18800526 	beq	r3,r2,3f038 <ip_reasm_check_mem_useage+0x5c>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
   3f024:	e0ffff0b 	ldhu	r3,-4(fp)
   3f028:	d0a8b317 	ldw	r2,-23860(gp)
   3f02c:	1885883a 	add	r2,r3,r2
      ++ire_stats.bad_max_mem;
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
   3f030:	00c001b4 	movhi	r3,6
   3f034:	1880092e 	bgeu	r3,r2,3f05c <ip_reasm_check_mem_useage+0x80>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
   3f038:	008001b4 	movhi	r2,6
   3f03c:	10b9f504 	addi	r2,r2,-6188
   3f040:	10800317 	ldw	r2,12(r2)
   3f044:	10c00044 	addi	r3,r2,1
   3f048:	008001b4 	movhi	r2,6
   3f04c:	10b9f504 	addi	r2,r2,-6188
   3f050:	10c00315 	stw	r3,12(r2)
      return ENP_RESOURCE;
   3f054:	00bffa84 	movi	r2,-22
   3f058:	00000106 	br	3f060 <ip_reasm_check_mem_useage+0x84>
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
   3f05c:	0005883a 	mov	r2,zero
}
   3f060:	e037883a 	mov	sp,fp
   3f064:	df000017 	ldw	fp,0(sp)
   3f068:	dec00104 	addi	sp,sp,4
   3f06c:	f800283a 	ret

0003f070 <ip_reasm_incr_mem_useage>:
system exceeding the maximum limit or if the system has already exceeded 
the prespecified limit for memory useage; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
   3f070:	defffe04 	addi	sp,sp,-8
   3f074:	df000115 	stw	fp,4(sp)
   3f078:	df000104 	addi	fp,sp,4
   3f07c:	2005883a 	mov	r2,r4
   3f080:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
   3f084:	d0a8b317 	ldw	r2,-23860(gp)
   3f088:	00c001b4 	movhi	r3,6
   3f08c:	1880092e 	bgeu	r3,r2,3f0b4 <ip_reasm_incr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
   3f090:	008001b4 	movhi	r2,6
   3f094:	10b9f504 	addi	r2,r2,-6188
   3f098:	10800217 	ldw	r2,8(r2)
   3f09c:	10c00044 	addi	r3,r2,1
   3f0a0:	008001b4 	movhi	r2,6
   3f0a4:	10b9f504 	addi	r2,r2,-6188
   3f0a8:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
   3f0ac:	00bffa84 	movi	r2,-22
   3f0b0:	00001306 	br	3f100 <ip_reasm_incr_mem_useage+0x90>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
   3f0b4:	e0ffff0b 	ldhu	r3,-4(fp)
   3f0b8:	d0a8b317 	ldw	r2,-23860(gp)
   3f0bc:	1885883a 	add	r2,r3,r2
   3f0c0:	00c001b4 	movhi	r3,6
   3f0c4:	1880092e 	bgeu	r3,r2,3f0ec <ip_reasm_incr_mem_useage+0x7c>
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
   3f0c8:	008001b4 	movhi	r2,6
   3f0cc:	10b9f504 	addi	r2,r2,-6188
   3f0d0:	10800417 	ldw	r2,16(r2)
   3f0d4:	10c00044 	addi	r3,r2,1
   3f0d8:	008001b4 	movhi	r2,6
   3f0dc:	10b9f504 	addi	r2,r2,-6188
   3f0e0:	10c00415 	stw	r3,16(r2)
      return ENP_RESOURCE;
   3f0e4:	00bffa84 	movi	r2,-22
   3f0e8:	00000506 	br	3f100 <ip_reasm_incr_mem_useage+0x90>
   }

   ipr_curr_mem += increment;
   3f0ec:	e0ffff0b 	ldhu	r3,-4(fp)
   3f0f0:	d0a8b317 	ldw	r2,-23860(gp)
   3f0f4:	1885883a 	add	r2,r3,r2
   3f0f8:	d0a8b315 	stw	r2,-23860(gp)

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
   3f0fc:	0005883a 	mov	r2,zero
}
   3f100:	e037883a 	mov	sp,fp
   3f104:	df000017 	ldw	fp,0(sp)
   3f108:	dec00104 	addi	sp,sp,4
   3f10c:	f800283a 	ret

0003f110 <ip_reasm_decr_mem_useage>:
exceeded the prespecified limit for memory useage; otherwise, it returns 
IPREASM_OK.
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
   3f110:	defffe04 	addi	sp,sp,-8
   3f114:	df000115 	stw	fp,4(sp)
   3f118:	df000104 	addi	fp,sp,4
   3f11c:	2005883a 	mov	r2,r4
   3f120:	e0bfff0d 	sth	r2,-4(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
   3f124:	d0a8b317 	ldw	r2,-23860(gp)
   3f128:	00c001b4 	movhi	r3,6
   3f12c:	1880092e 	bgeu	r3,r2,3f154 <ip_reasm_decr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
   3f130:	008001b4 	movhi	r2,6
   3f134:	10b9f504 	addi	r2,r2,-6188
   3f138:	10800217 	ldw	r2,8(r2)
   3f13c:	10c00044 	addi	r3,r2,1
   3f140:	008001b4 	movhi	r2,6
   3f144:	10b9f504 	addi	r2,r2,-6188
   3f148:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
   3f14c:	00bffa84 	movi	r2,-22
   3f150:	00001106 	br	3f198 <ip_reasm_decr_mem_useage+0x88>
   }
   if (ipr_curr_mem < decrement)
   3f154:	e0bfff0b 	ldhu	r2,-4(fp)
   3f158:	d0e8b317 	ldw	r3,-23860(gp)
   3f15c:	1880092e 	bgeu	r3,r2,3f184 <ip_reasm_decr_mem_useage+0x74>
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
   3f160:	008001b4 	movhi	r2,6
   3f164:	10b9f504 	addi	r2,r2,-6188
   3f168:	10800517 	ldw	r2,20(r2)
   3f16c:	10c00044 	addi	r3,r2,1
   3f170:	008001b4 	movhi	r2,6
   3f174:	10b9f504 	addi	r2,r2,-6188
   3f178:	10c00515 	stw	r3,20(r2)
      return ENP_RESOURCE;
   3f17c:	00bffa84 	movi	r2,-22
   3f180:	00000506 	br	3f198 <ip_reasm_decr_mem_useage+0x88>
   }

   ipr_curr_mem -= decrement;
   3f184:	d0e8b317 	ldw	r3,-23860(gp)
   3f188:	e0bfff0b 	ldhu	r2,-4(fp)
   3f18c:	1885c83a 	sub	r2,r3,r2
   3f190:	d0a8b315 	stw	r2,-23860(gp)

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
   3f194:	0005883a 	mov	r2,zero
}
   3f198:	e037883a 	mov	sp,fp
   3f19c:	df000017 	ldw	fp,0(sp)
   3f1a0:	dec00104 	addi	sp,sp,4
   3f1a4:	f800283a 	ret

0003f1a8 <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
   3f1a8:	defff704 	addi	sp,sp,-36
   3f1ac:	dfc00815 	stw	ra,32(sp)
   3f1b0:	df000715 	stw	fp,28(sp)
   3f1b4:	df000704 	addi	fp,sp,28
   3f1b8:	e13fff15 	stw	r4,-4(fp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
   3f1bc:	e0bfff17 	ldw	r2,-4(fp)
   3f1c0:	10800217 	ldw	r2,8(r2)
   3f1c4:	10802204 	addi	r2,r2,136
   3f1c8:	10bfffcc 	andi	r2,r2,65535
   3f1cc:	1009883a 	mov	r4,r2
   3f1d0:	003efdc0 	call	3efdc <ip_reasm_check_mem_useage>
   3f1d4:	e0bff915 	stw	r2,-28(fp)
   3f1d8:	e0bff917 	ldw	r2,-28(fp)
   3f1dc:	10000f26 	beq	r2,zero,3f21c <ip_reasm_process_first_fragment+0x74>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
   3f1e0:	01000084 	movi	r4,2
   3f1e4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free (p);
   3f1e8:	e13fff17 	ldw	r4,-4(fp)
   3f1ec:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f1f0:	01000084 	movi	r4,2
   3f1f4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
   3f1f8:	008001b4 	movhi	r2,6
   3f1fc:	10b9e104 	addi	r2,r2,-6268
   3f200:	10800f17 	ldw	r2,60(r2)
   3f204:	10c00044 	addi	r3,r2,1
   3f208:	008001b4 	movhi	r2,6
   3f20c:	10b9e104 	addi	r2,r2,-6268
   3f210:	10c00f15 	stw	r3,60(r2)
      return rc;
   3f214:	e0bff917 	ldw	r2,-28(fp)
   3f218:	00008c06 	br	3f44c <ip_reasm_process_first_fragment+0x2a4>
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
   3f21c:	01002204 	movi	r4,136
   3f220:	002bce00 	call	2bce0 <npalloc>
   3f224:	e0bffa15 	stw	r2,-24(fp)
   if (irep == 0) 
   3f228:	e0bffa17 	ldw	r2,-24(fp)
   3f22c:	10000f1e 	bne	r2,zero,3f26c <ip_reasm_process_first_fragment+0xc4>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
   3f230:	01000084 	movi	r4,2
   3f234:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free (p);
   3f238:	e13fff17 	ldw	r4,-4(fp)
   3f23c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f240:	01000084 	movi	r4,2
   3f244:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
   3f248:	008001b4 	movhi	r2,6
   3f24c:	10b9e104 	addi	r2,r2,-6268
   3f250:	10800f17 	ldw	r2,60(r2)
   3f254:	10c00044 	addi	r3,r2,1
   3f258:	008001b4 	movhi	r2,6
   3f25c:	10b9e104 	addi	r2,r2,-6268
   3f260:	10c00f15 	stw	r3,60(r2)
      return ENP_RESOURCE;
   3f264:	00bffa84 	movi	r2,-22
   3f268:	00007806 	br	3f44c <ip_reasm_process_first_fragment+0x2a4>
   }

   pip = ip_head(p);
   3f26c:	e0bfff17 	ldw	r2,-4(fp)
   3f270:	10800317 	ldw	r2,12(r2)
   3f274:	e0bffb15 	stw	r2,-20(fp)
   iphlen = ip_hlen(pip);
   3f278:	e0bffb17 	ldw	r2,-20(fp)
   3f27c:	10800003 	ldbu	r2,0(r2)
   3f280:	108003cc 	andi	r2,r2,15
   3f284:	1085883a 	add	r2,r2,r2
   3f288:	1085883a 	add	r2,r2,r2
   3f28c:	e0bffc05 	stb	r2,-16(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
   3f290:	e13ffb17 	ldw	r4,-20(fp)
   3f294:	003ef0c0 	call	3ef0c <ip_reasm_determine_type_of_frag>
   3f298:	e0bffd15 	stw	r2,-12(fp)
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   3f29c:	e0bffb17 	ldw	r2,-20(fp)
   3f2a0:	1080018b 	ldhu	r2,6(r2)
   3f2a4:	10bfffcc 	andi	r2,r2,65535
   3f2a8:	1004d23a 	srli	r2,r2,8
   3f2ac:	10bfffcc 	andi	r2,r2,65535
   3f2b0:	10c03fcc 	andi	r3,r2,255
   3f2b4:	e0bffb17 	ldw	r2,-20(fp)
   3f2b8:	1080018b 	ldhu	r2,6(r2)
   3f2bc:	10bfffcc 	andi	r2,r2,65535
   3f2c0:	1004923a 	slli	r2,r2,8
   3f2c4:	10bfffcc 	andi	r2,r2,65535
   3f2c8:	1884b03a 	or	r2,r3,r2
   3f2cc:	100490fa 	slli	r2,r2,3
   3f2d0:	e0bffe0d 	sth	r2,-8(fp)
   total_len = ntohs(pip->ip_len);
   3f2d4:	e0bffb17 	ldw	r2,-20(fp)
   3f2d8:	1080008b 	ldhu	r2,2(r2)
   3f2dc:	10bfffcc 	andi	r2,r2,65535
   3f2e0:	1004d23a 	srli	r2,r2,8
   3f2e4:	1007883a 	mov	r3,r2
   3f2e8:	e0bffb17 	ldw	r2,-20(fp)
   3f2ec:	1080008b 	ldhu	r2,2(r2)
   3f2f0:	10bfffcc 	andi	r2,r2,65535
   3f2f4:	1004923a 	slli	r2,r2,8
   3f2f8:	1884b03a 	or	r2,r3,r2
   3f2fc:	e0bffe8d 	sth	r2,-6(fp)

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
   3f300:	e0bffb17 	ldw	r2,-20(fp)
   3f304:	10c00317 	ldw	r3,12(r2)
   3f308:	e0bffa17 	ldw	r2,-24(fp)
   3f30c:	10c00115 	stw	r3,4(r2)
   irep->dest = pip->ip_dest;
   3f310:	e0bffb17 	ldw	r2,-20(fp)
   3f314:	10c00417 	ldw	r3,16(r2)
   3f318:	e0bffa17 	ldw	r2,-24(fp)
   3f31c:	10c00215 	stw	r3,8(r2)
   irep->prot = pip->ip_prot;
   3f320:	e0bffb17 	ldw	r2,-20(fp)
   3f324:	10c00243 	ldbu	r3,9(r2)
   3f328:	e0bffa17 	ldw	r2,-24(fp)
   3f32c:	10c00385 	stb	r3,14(r2)
   irep->id = pip->ip_id;
   3f330:	e0bffb17 	ldw	r2,-20(fp)
   3f334:	10c0010b 	ldhu	r3,4(r2)
   3f338:	e0bffa17 	ldw	r2,-24(fp)
   3f33c:	10c0030d 	sth	r3,12(r2)
   if (ftype == IP_LF)
   3f340:	e0bffd17 	ldw	r2,-12(fp)
   3f344:	10800158 	cmpnei	r2,r2,5
   3f348:	10000a1e 	bne	r2,zero,3f374 <ip_reasm_process_first_fragment+0x1cc>
      {
      irep->length = frag_offset + (total_len - iphlen);
   3f34c:	e0bffc03 	ldbu	r2,-16(fp)
   3f350:	e0fffe8b 	ldhu	r3,-6(fp)
   3f354:	1885c83a 	sub	r2,r3,r2
   3f358:	1007883a 	mov	r3,r2
   3f35c:	e0bffe0b 	ldhu	r2,-8(fp)
   3f360:	1885883a 	add	r2,r3,r2
   3f364:	1007883a 	mov	r3,r2
   3f368:	e0bffa17 	ldw	r2,-24(fp)
   3f36c:	10c0040d 	sth	r3,16(r2)
   3f370:	00000a06 	br	3f39c <ip_reasm_process_first_fragment+0x1f4>
      }
   else if (ftype == IP_FF)
   3f374:	e0bffd17 	ldw	r2,-12(fp)
   3f378:	10800058 	cmpnei	r2,r2,1
   3f37c:	1000071e 	bne	r2,zero,3f39c <ip_reasm_process_first_fragment+0x1f4>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
   3f380:	e0bfff17 	ldw	r2,-4(fp)
   3f384:	10c00117 	ldw	r3,4(r2)
   3f388:	e0bffa17 	ldw	r2,-24(fp)
   3f38c:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
   3f390:	e0bffa17 	ldw	r2,-24(fp)
   3f394:	e0fffb17 	ldw	r3,-20(fp)
   3f398:	10c02015 	stw	r3,128(r2)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
   3f39c:	e0bffc03 	ldbu	r2,-16(fp)
   3f3a0:	e0fffe8b 	ldhu	r3,-6(fp)
   3f3a4:	1885c83a 	sub	r2,r3,r2
   3f3a8:	1007883a 	mov	r3,r2
   3f3ac:	e0bffa17 	ldw	r2,-24(fp)
   3f3b0:	10c0048d 	sth	r3,18(r2)
   irep->age = 0;
   3f3b4:	e0bffa17 	ldw	r2,-24(fp)
   3f3b8:	10000515 	stw	zero,20(r2)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
   3f3bc:	e0bffa17 	ldw	r2,-24(fp)
   3f3c0:	10802103 	ldbu	r2,132(r2)
   3f3c4:	10800054 	ori	r2,r2,1
   3f3c8:	1007883a 	mov	r3,r2
   3f3cc:	e0bffa17 	ldw	r2,-24(fp)
   3f3d0:	10c02105 	stb	r3,132(r2)

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
   3f3d4:	e0bffa17 	ldw	r2,-24(fp)
   3f3d8:	e0ffff17 	ldw	r3,-4(fp)
   3f3dc:	10c00715 	stw	r3,28(r2)
   irep->rfq.frag_offset[0] = frag_offset;
   3f3e0:	e0bffa17 	ldw	r2,-24(fp)
   3f3e4:	e0fffe0b 	ldhu	r3,-8(fp)
   3f3e8:	10c0170d 	sth	r3,92(r2)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
   3f3ec:	e0bfff17 	ldw	r2,-4(fp)
   3f3f0:	10c00317 	ldw	r3,12(r2)
   3f3f4:	e0bffc03 	ldbu	r2,-16(fp)
   3f3f8:	1887883a 	add	r3,r3,r2
   3f3fc:	e0bfff17 	ldw	r2,-4(fp)
   3f400:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
   3f404:	e0bfff17 	ldw	r2,-4(fp)
   3f408:	10c00417 	ldw	r3,16(r2)
   3f40c:	e0bffc03 	ldbu	r2,-16(fp)
   3f410:	1887c83a 	sub	r3,r3,r2
   3f414:	e0bfff17 	ldw	r2,-4(fp)
   3f418:	10c00415 	stw	r3,16(r2)

   /* insert at start of global IRE list */
   irep->next = h_ireq;
   3f41c:	d0e8b417 	ldw	r3,-23856(gp)
   3f420:	e0bffa17 	ldw	r2,-24(fp)
   3f424:	10c00015 	stw	r3,0(r2)
   h_ireq = irep;
   3f428:	e0bffa17 	ldw	r2,-24(fp)
   3f42c:	d0a8b415 	stw	r2,-23856(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
   3f430:	e0bfff17 	ldw	r2,-4(fp)
   3f434:	10800217 	ldw	r2,8(r2)
   3f438:	10802204 	addi	r2,r2,136
   3f43c:	10bfffcc 	andi	r2,r2,65535
   3f440:	1009883a 	mov	r4,r2
   3f444:	003f0700 	call	3f070 <ip_reasm_incr_mem_useage>

   return IPREASM_OK;
   3f448:	0005883a 	mov	r2,zero
}
   3f44c:	e037883a 	mov	sp,fp
   3f450:	dfc00117 	ldw	ra,4(sp)
   3f454:	df000017 	ldw	fp,0(sp)
   3f458:	dec00204 	addi	sp,sp,8
   3f45c:	f800283a 	ret

0003f460 <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
   3f460:	defff904 	addi	sp,sp,-28
   3f464:	dfc00615 	stw	ra,24(sp)
   3f468:	df000515 	stw	fp,20(sp)
   3f46c:	df000504 	addi	fp,sp,20
   3f470:	e13fff15 	stw	r4,-4(fp)
   IREP irep;
   struct ip * pip;
   int rc1, rc2;

   pip = ip_head(p);
   3f474:	e0bfff17 	ldw	r2,-4(fp)
   3f478:	10800317 	ldw	r2,12(r2)
   3f47c:	e0bffb15 	stw	r2,-20(fp)

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
   3f480:	e13ffb17 	ldw	r4,-20(fp)
   3f484:	003ee480 	call	3ee48 <ip_reasm_match_frag_with_ire>
   3f488:	e0bffc15 	stw	r2,-16(fp)

   if (!irep)
   3f48c:	e0bffc17 	ldw	r2,-16(fp)
   3f490:	1000071e 	bne	r2,zero,3f4b0 <ip_reassm+0x50>
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
   3f494:	e13fff17 	ldw	r4,-4(fp)
   3f498:	003f1a80 	call	3f1a8 <ip_reasm_process_first_fragment>
   3f49c:	e0bffd15 	stw	r2,-12(fp)
   3f4a0:	e0bffd17 	ldw	r2,-12(fp)
   3f4a4:	10000a26 	beq	r2,zero,3f4d0 <ip_reassm+0x70>
      {
         /* ip_reasm_process_first_fragment () will free the packet */
         return rc1;
   3f4a8:	e0bffd17 	ldw	r2,-12(fp)
   3f4ac:	00000906 	br	3f4d4 <ip_reassm+0x74>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
   3f4b0:	e13fff17 	ldw	r4,-4(fp)
   3f4b4:	e17ffc17 	ldw	r5,-16(fp)
   3f4b8:	003fa480 	call	3fa48 <ip_reasm_process_subsequent_fragments>
   3f4bc:	e0bffe15 	stw	r2,-8(fp)
   3f4c0:	e0bffe17 	ldw	r2,-8(fp)
   3f4c4:	10000226 	beq	r2,zero,3f4d0 <ip_reassm+0x70>
      {
         /* ip_reasm_process_subsequent_fragments () has already deleted the IRE entry */
         return rc2;
   3f4c8:	e0bffe17 	ldw	r2,-8(fp)
   3f4cc:	00000106 	br	3f4d4 <ip_reassm+0x74>
      }
   }

   return IPREASM_OK;
   3f4d0:	0005883a 	mov	r2,zero
}
   3f4d4:	e037883a 	mov	sp,fp
   3f4d8:	dfc00117 	ldw	ra,4(sp)
   3f4dc:	df000017 	ldw	fp,0(sp)
   3f4e0:	dec00204 	addi	sp,sp,8
   3f4e4:	f800283a 	ret

0003f4e8 <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
   3f4e8:	defff204 	addi	sp,sp,-56
   3f4ec:	dfc00d15 	stw	ra,52(sp)
   3f4f0:	df000c15 	stw	fp,48(sp)
   3f4f4:	df000c04 	addi	fp,sp,48
   3f4f8:	e13ffc15 	stw	r4,-16(fp)
   3f4fc:	e17ffd15 	stw	r5,-12(fp)
   3f500:	e1bffe15 	stw	r6,-8(fp)
   3f504:	e1ffff15 	stw	r7,-4(fp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
   3f508:	e13ffd17 	ldw	r4,-12(fp)
   3f50c:	003ff740 	call	3ff74 <ip_reasm_find_ire>
   3f510:	10803fcc 	andi	r2,r2,255
   3f514:	10800060 	cmpeqi	r2,r2,1
   3f518:	10000f1e 	bne	r2,zero,3f558 <ip_reasm_compute_overlap+0x70>
      {
      ++ire_stats.bad_irep;
   3f51c:	008001b4 	movhi	r2,6
   3f520:	10b9f504 	addi	r2,r2,-6188
   3f524:	10800017 	ldw	r2,0(r2)
   3f528:	10c00044 	addi	r3,r2,1
   3f52c:	008001b4 	movhi	r2,6
   3f530:	10b9f504 	addi	r2,r2,-6188
   3f534:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
   3f538:	01000084 	movi	r4,2
   3f53c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free (p);
   3f540:	e13ffc17 	ldw	r4,-16(fp)
   3f544:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f548:	01000084 	movi	r4,2
   3f54c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return IPREASM_DROP_FRAG_BAD_PARAM;
   3f550:	00800044 	movi	r2,1
   3f554:	00013706 	br	3fa34 <ip_reasm_compute_overlap+0x54c>
      }

   jrip = ip_head(p);
   3f558:	e0bffc17 	ldw	r2,-16(fp)
   3f55c:	10800317 	ldw	r2,12(r2)
   3f560:	e0bff715 	stw	r2,-36(fp)
   iphlen = ip_hlen (jrip);
   3f564:	e0bff717 	ldw	r2,-36(fp)
   3f568:	10800003 	ldbu	r2,0(r2)
   3f56c:	108003cc 	andi	r2,r2,15
   3f570:	1085883a 	add	r2,r2,r2
   3f574:	1085883a 	add	r2,r2,r2
   3f578:	e0bff805 	stb	r2,-32(fp)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   3f57c:	e0bff717 	ldw	r2,-36(fp)
   3f580:	1080018b 	ldhu	r2,6(r2)
   3f584:	10bfffcc 	andi	r2,r2,65535
   3f588:	1004d23a 	srli	r2,r2,8
   3f58c:	10bfffcc 	andi	r2,r2,65535
   3f590:	10c03fcc 	andi	r3,r2,255
   3f594:	e0bff717 	ldw	r2,-36(fp)
   3f598:	1080018b 	ldhu	r2,6(r2)
   3f59c:	10bfffcc 	andi	r2,r2,65535
   3f5a0:	1004923a 	slli	r2,r2,8
   3f5a4:	10bfffcc 	andi	r2,r2,65535
   3f5a8:	1884b03a 	or	r2,r3,r2
   3f5ac:	100490fa 	slli	r2,r2,3
   3f5b0:	e0bff50d 	sth	r2,-44(fp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
   3f5b4:	e0bff717 	ldw	r2,-36(fp)
   3f5b8:	1080008b 	ldhu	r2,2(r2)
   3f5bc:	10bfffcc 	andi	r2,r2,65535
   3f5c0:	1004d23a 	srli	r2,r2,8
   3f5c4:	1007883a 	mov	r3,r2
   3f5c8:	e0bff717 	ldw	r2,-36(fp)
   3f5cc:	1080008b 	ldhu	r2,2(r2)
   3f5d0:	10bfffcc 	andi	r2,r2,65535
   3f5d4:	1004923a 	slli	r2,r2,8
   3f5d8:	1884b03a 	or	r2,r3,r2
   3f5dc:	1007883a 	mov	r3,r2
   3f5e0:	e0bff803 	ldbu	r2,-32(fp)
   3f5e4:	1885c83a 	sub	r2,r3,r2
   3f5e8:	1007883a 	mov	r3,r2
   3f5ec:	e0bff50b 	ldhu	r2,-44(fp)
   3f5f0:	1885883a 	add	r2,r3,r2
   3f5f4:	10bfffc4 	addi	r2,r2,-1
   3f5f8:	e0bff58d 	sth	r2,-42(fp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
   3f5fc:	e0bffc17 	ldw	r2,-16(fp)
   3f600:	10c00317 	ldw	r3,12(r2)
   3f604:	e0bff803 	ldbu	r2,-32(fp)
   3f608:	1887883a 	add	r3,r3,r2
   3f60c:	e0bffc17 	ldw	r2,-16(fp)
   3f610:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
   3f614:	e0bffc17 	ldw	r2,-16(fp)
   3f618:	10c00417 	ldw	r3,16(r2)
   3f61c:	e0bff803 	ldbu	r2,-32(fp)
   3f620:	1887c83a 	sub	r3,r3,r2
   3f624:	e0bffc17 	ldw	r2,-16(fp)
   3f628:	10c00415 	stw	r3,16(r2)

   *frag_offsetp = jrstart;
   3f62c:	e0800217 	ldw	r2,8(fp)
   3f630:	e0fff50b 	ldhu	r3,-44(fp)
   3f634:	10c0000d 	sth	r3,0(r2)
   *indexp = INVALID_FRAG_INDEX;
   3f638:	e0bffe17 	ldw	r2,-8(fp)
   3f63c:	00c00404 	movi	r3,16
   3f640:	10c0000d 	sth	r3,0(r2)
   *last_rfqpp = 0;
   3f644:	e0bfff17 	ldw	r2,-4(fp)
   3f648:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
   3f64c:	e0800317 	ldw	r2,12(fp)
   3f650:	10000005 	stb	zero,0(r2)

   rfqp = &(irep->rfq);
   3f654:	e0bffd17 	ldw	r2,-12(fp)
   3f658:	10800604 	addi	r2,r2,24
   3f65c:	e0bff415 	stw	r2,-48(fp)

   while (rfqp)
   3f660:	0000ee06 	br	3fa1c <ip_reasm_compute_overlap+0x534>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   3f664:	e03ff60d 	sth	zero,-40(fp)
   3f668:	0000de06 	br	3f9e4 <ip_reasm_compute_overlap+0x4fc>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
   3f66c:	e0bff60b 	ldhu	r2,-40(fp)
   3f670:	e0fff417 	ldw	r3,-48(fp)
   3f674:	10800044 	addi	r2,r2,1
   3f678:	1085883a 	add	r2,r2,r2
   3f67c:	1085883a 	add	r2,r2,r2
   3f680:	1885883a 	add	r2,r3,r2
   3f684:	10800017 	ldw	r2,0(r2)
   3f688:	e0bff915 	stw	r2,-28(fp)
   3f68c:	e0bff917 	ldw	r2,-28(fp)
   3f690:	1000c026 	beq	r2,zero,3f994 <ip_reasm_compute_overlap+0x4ac>
            {
            currstart = rfqp->frag_offset[i];
   3f694:	e0bff60b 	ldhu	r2,-40(fp)
   3f698:	e0fff417 	ldw	r3,-48(fp)
   3f69c:	10800884 	addi	r2,r2,34
   3f6a0:	1085883a 	add	r2,r2,r2
   3f6a4:	1885883a 	add	r2,r3,r2
   3f6a8:	1080000b 	ldhu	r2,0(r2)
   3f6ac:	e0bffa0d 	sth	r2,-24(fp)
            currend = currstart + currpkt->nb_plen - 1;
   3f6b0:	e0bff917 	ldw	r2,-28(fp)
   3f6b4:	10800417 	ldw	r2,16(r2)
   3f6b8:	1007883a 	mov	r3,r2
   3f6bc:	e0bffa0b 	ldhu	r2,-24(fp)
   3f6c0:	1885883a 	add	r2,r3,r2
   3f6c4:	10bfffc4 	addi	r2,r2,-1
   3f6c8:	e0bffa8d 	sth	r2,-22(fp)

            if (currstart < jrstart)
   3f6cc:	e0fffa0b 	ldhu	r3,-24(fp)
   3f6d0:	e0bff50b 	ldhu	r2,-44(fp)
   3f6d4:	18802b2e 	bgeu	r3,r2,3f784 <ip_reasm_compute_overlap+0x29c>
               {
               if (currend < jrend) /* cases A1 and A2 */
   3f6d8:	e0fffa8b 	ldhu	r3,-22(fp)
   3f6dc:	e0bff58b 	ldhu	r2,-42(fp)
   3f6e0:	1880202e 	bgeu	r3,r2,3f764 <ip_reasm_compute_overlap+0x27c>
                  {
                  if (currend < jrstart) /* A1 */
   3f6e4:	e0fffa8b 	ldhu	r3,-22(fp)
   3f6e8:	e0bff50b 	ldhu	r2,-44(fp)
   3f6ec:	1880ba36 	bltu	r3,r2,3f9d8 <ip_reasm_compute_overlap+0x4f0>
                     {
                     /* the just received fragment partially overlaps current 
                      * fragment on the latter's right; increment start 
                      * pointer and decrement length of just received fragment.
                      * Move on to the next fragment in the RFQ. */
                     drop_len = (currend - jrstart) + 1;
   3f6f0:	e0fffa8b 	ldhu	r3,-22(fp)
   3f6f4:	e0bff50b 	ldhu	r2,-44(fp)
   3f6f8:	1885c83a 	sub	r2,r3,r2
   3f6fc:	10800044 	addi	r2,r2,1
   3f700:	e0bffb0d 	sth	r2,-20(fp)
                     p->nb_prot += drop_len;
   3f704:	e0bffc17 	ldw	r2,-16(fp)
   3f708:	10c00317 	ldw	r3,12(r2)
   3f70c:	e0bffb0b 	ldhu	r2,-20(fp)
   3f710:	1887883a 	add	r3,r3,r2
   3f714:	e0bffc17 	ldw	r2,-16(fp)
   3f718:	10c00315 	stw	r3,12(r2)
                     p->nb_plen -= drop_len;
   3f71c:	e0bffc17 	ldw	r2,-16(fp)
   3f720:	10c00417 	ldw	r3,16(r2)
   3f724:	e0bffb0b 	ldhu	r2,-20(fp)
   3f728:	1887c83a 	sub	r3,r3,r2
   3f72c:	e0bffc17 	ldw	r2,-16(fp)
   3f730:	10c00415 	stw	r3,16(r2)
                     jrstart += drop_len;
   3f734:	e0fff50b 	ldhu	r3,-44(fp)
   3f738:	e0bffb0b 	ldhu	r2,-20(fp)
   3f73c:	1885883a 	add	r2,r3,r2
   3f740:	e0bff50d 	sth	r2,-44(fp)
                     jrend = jrstart + p->nb_plen - 1;
   3f744:	e0bffc17 	ldw	r2,-16(fp)
   3f748:	10800417 	ldw	r2,16(r2)
   3f74c:	1007883a 	mov	r3,r2
   3f750:	e0bff50b 	ldhu	r2,-44(fp)
   3f754:	1885883a 	add	r2,r3,r2
   3f758:	10bfffc4 	addi	r2,r2,-1
   3f75c:	e0bff58d 	sth	r2,-42(fp)
   3f760:	00009d06 	br	3f9d8 <ip_reasm_compute_overlap+0x4f0>
               else
                  {
                  /* currend is greater than or equal to jrend (cases E1 and E2).
                   * The current fragment is a superset of the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
   3f764:	01000084 	movi	r4,2
   3f768:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
                  pk_free (p);
   3f76c:	e13ffc17 	ldw	r4,-16(fp)
   3f770:	002a8940 	call	2a894 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f774:	01000084 	movi	r4,2
   3f778:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
   3f77c:	0005883a 	mov	r2,zero
   3f780:	0000ac06 	br	3fa34 <ip_reasm_compute_overlap+0x54c>
                  }
               }
            else if (currstart > jrstart)
   3f784:	e0bffa0b 	ldhu	r2,-24(fp)
   3f788:	e0fff50b 	ldhu	r3,-44(fp)
   3f78c:	18804e2e 	bgeu	r3,r2,3f8c8 <ip_reasm_compute_overlap+0x3e0>
               {
               if (currend > jrend) /* cases B1 and B2 */
   3f790:	e0bffa8b 	ldhu	r2,-22(fp)
   3f794:	e0fff58b 	ldhu	r3,-42(fp)
   3f798:	1880112e 	bgeu	r3,r2,3f7e0 <ip_reasm_compute_overlap+0x2f8>
                  {
                  if (currstart > jrend) /* B1 */
   3f79c:	e0bffa0b 	ldhu	r2,-24(fp)
   3f7a0:	e0fff58b 	ldhu	r3,-42(fp)
   3f7a4:	18808c36 	bltu	r3,r2,3f9d8 <ip_reasm_compute_overlap+0x4f0>
                     {
                     /* just received fragment partially overlaps current 
                      * fragment on the latter's left; decrement length of 
                      * just received fragment.  Move on to the next fragment 
                      * in the RFQ. */
                     p->nb_plen = currstart - jrstart;
   3f7a8:	e0fffa0b 	ldhu	r3,-24(fp)
   3f7ac:	e0bff50b 	ldhu	r2,-44(fp)
   3f7b0:	1885c83a 	sub	r2,r3,r2
   3f7b4:	1007883a 	mov	r3,r2
   3f7b8:	e0bffc17 	ldw	r2,-16(fp)
   3f7bc:	10c00415 	stw	r3,16(r2)
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
   3f7c0:	e0bffc17 	ldw	r2,-16(fp)
   3f7c4:	10800417 	ldw	r2,16(r2)
   3f7c8:	1007883a 	mov	r3,r2
   3f7cc:	e0bff50b 	ldhu	r2,-44(fp)
   3f7d0:	1885883a 	add	r2,r3,r2
   3f7d4:	10bfffc4 	addi	r2,r2,-1
   3f7d8:	e0bff58d 	sth	r2,-42(fp)
   3f7dc:	00007e06 	br	3f9d8 <ip_reasm_compute_overlap+0x4f0>
                     }
                  }
               else if (currend == jrend) /* F1 */
   3f7e0:	e0fffa8b 	ldhu	r3,-22(fp)
   3f7e4:	e0bff58b 	ldhu	r2,-42(fp)
   3f7e8:	18800e1e 	bne	r3,r2,3f824 <ip_reasm_compute_overlap+0x33c>
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
   3f7ec:	e0fffa0b 	ldhu	r3,-24(fp)
   3f7f0:	e0bff50b 	ldhu	r2,-44(fp)
   3f7f4:	1885c83a 	sub	r2,r3,r2
   3f7f8:	1007883a 	mov	r3,r2
   3f7fc:	e0bffc17 	ldw	r2,-16(fp)
   3f800:	10c00415 	stw	r3,16(r2)
                  jrend = jrstart + p->nb_plen - 1;
   3f804:	e0bffc17 	ldw	r2,-16(fp)
   3f808:	10800417 	ldw	r2,16(r2)
   3f80c:	1007883a 	mov	r3,r2
   3f810:	e0bff50b 	ldhu	r2,-44(fp)
   3f814:	1885883a 	add	r2,r3,r2
   3f818:	10bfffc4 	addi	r2,r2,-1
   3f81c:	e0bff58d 	sth	r2,-42(fp)
   3f820:	00006d06 	br	3f9d8 <ip_reasm_compute_overlap+0x4f0>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
   3f824:	e0bff917 	ldw	r2,-28(fp)
   3f828:	10800217 	ldw	r2,8(r2)
   3f82c:	10bfffcc 	andi	r2,r2,65535
   3f830:	1009883a 	mov	r4,r2
   3f834:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
   3f838:	e0bffd17 	ldw	r2,-12(fp)
   3f83c:	1080048b 	ldhu	r2,18(r2)
   3f840:	e0fff917 	ldw	r3,-28(fp)
   3f844:	18c00417 	ldw	r3,16(r3)
   3f848:	10c5c83a 	sub	r2,r2,r3
   3f84c:	1007883a 	mov	r3,r2
   3f850:	e0bffd17 	ldw	r2,-12(fp)
   3f854:	10c0048d 	sth	r3,18(r2)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
   3f858:	01000084 	movi	r4,2
   3f85c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
   3f860:	e13ff917 	ldw	r4,-28(fp)
   3f864:	002a8940 	call	2a894 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f868:	01000084 	movi	r4,2
   3f86c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
   3f870:	e0bff60b 	ldhu	r2,-40(fp)
   3f874:	e0fff417 	ldw	r3,-48(fp)
   3f878:	10800044 	addi	r2,r2,1
   3f87c:	1085883a 	add	r2,r2,r2
   3f880:	1085883a 	add	r2,r2,r2
   3f884:	1885883a 	add	r2,r3,r2
   3f888:	10000015 	stw	zero,0(r2)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
   3f88c:	e0bffe17 	ldw	r2,-8(fp)
   3f890:	1080000b 	ldhu	r2,0(r2)
   3f894:	10bfffcc 	andi	r2,r2,65535
   3f898:	10800418 	cmpnei	r2,r2,16
   3f89c:	1000061e 	bne	r2,zero,3f8b8 <ip_reasm_compute_overlap+0x3d0>
                     {
                     *indexp = i;
   3f8a0:	e0bffe17 	ldw	r2,-8(fp)
   3f8a4:	e0fff60b 	ldhu	r3,-40(fp)
   3f8a8:	10c0000d 	sth	r3,0(r2)
                     *last_rfqpp = rfqp;
   3f8ac:	e0bfff17 	ldw	r2,-4(fp)
   3f8b0:	e0fff417 	ldw	r3,-48(fp)
   3f8b4:	10c00015 	stw	r3,0(r2)
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
   3f8b8:	e0800317 	ldw	r2,12(fp)
   3f8bc:	00c00044 	movi	r3,1
   3f8c0:	10c00005 	stb	r3,0(r2)
   3f8c4:	00004406 	br	3f9d8 <ip_reasm_compute_overlap+0x4f0>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
   3f8c8:	e0fffa8b 	ldhu	r3,-22(fp)
   3f8cc:	e0bff58b 	ldhu	r2,-42(fp)
   3f8d0:	1880081e 	bne	r3,r2,3f8f4 <ip_reasm_compute_overlap+0x40c>
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
   3f8d4:	01000084 	movi	r4,2
   3f8d8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
                  pk_free (p);
   3f8dc:	e13ffc17 	ldw	r4,-16(fp)
   3f8e0:	002a8940 	call	2a894 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f8e4:	01000084 	movi	r4,2
   3f8e8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
   3f8ec:	0005883a 	mov	r2,zero
   3f8f0:	00005006 	br	3fa34 <ip_reasm_compute_overlap+0x54c>
                  }
               else if (currend > jrend) /* case D1 */
   3f8f4:	e0bffa8b 	ldhu	r2,-22(fp)
   3f8f8:	e0fff58b 	ldhu	r3,-42(fp)
   3f8fc:	1880082e 	bgeu	r3,r2,3f920 <ip_reasm_compute_overlap+0x438>
                  {
                  /* current fragment is a superset of just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
   3f900:	01000084 	movi	r4,2
   3f904:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
                  pk_free (p);
   3f908:	e13ffc17 	ldw	r4,-16(fp)
   3f90c:	002a8940 	call	2a894 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3f910:	01000084 	movi	r4,2
   3f914:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
   3f918:	0005883a 	mov	r2,zero
   3f91c:	00004506 	br	3fa34 <ip_reasm_compute_overlap+0x54c>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
   3f920:	e0fffa8b 	ldhu	r3,-22(fp)
   3f924:	e0bff50b 	ldhu	r2,-44(fp)
   3f928:	1885c83a 	sub	r2,r3,r2
   3f92c:	10800044 	addi	r2,r2,1
   3f930:	e0bffb0d 	sth	r2,-20(fp)
                  p->nb_prot += drop_len;
   3f934:	e0bffc17 	ldw	r2,-16(fp)
   3f938:	10c00317 	ldw	r3,12(r2)
   3f93c:	e0bffb0b 	ldhu	r2,-20(fp)
   3f940:	1887883a 	add	r3,r3,r2
   3f944:	e0bffc17 	ldw	r2,-16(fp)
   3f948:	10c00315 	stw	r3,12(r2)
                  p->nb_plen -= drop_len;
   3f94c:	e0bffc17 	ldw	r2,-16(fp)
   3f950:	10c00417 	ldw	r3,16(r2)
   3f954:	e0bffb0b 	ldhu	r2,-20(fp)
   3f958:	1887c83a 	sub	r3,r3,r2
   3f95c:	e0bffc17 	ldw	r2,-16(fp)
   3f960:	10c00415 	stw	r3,16(r2)
                  jrstart += drop_len;
   3f964:	e0fff50b 	ldhu	r3,-44(fp)
   3f968:	e0bffb0b 	ldhu	r2,-20(fp)
   3f96c:	1885883a 	add	r2,r3,r2
   3f970:	e0bff50d 	sth	r2,-44(fp)
                  jrend = jrstart + p->nb_plen - 1;
   3f974:	e0bffc17 	ldw	r2,-16(fp)
   3f978:	10800417 	ldw	r2,16(r2)
   3f97c:	1007883a 	mov	r3,r2
   3f980:	e0bff50b 	ldhu	r2,-44(fp)
   3f984:	1885883a 	add	r2,r3,r2
   3f988:	10bfffc4 	addi	r2,r2,-1
   3f98c:	e0bff58d 	sth	r2,-42(fp)
   3f990:	00001106 	br	3f9d8 <ip_reasm_compute_overlap+0x4f0>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
   3f994:	e0bffe17 	ldw	r2,-8(fp)
   3f998:	1080000b 	ldhu	r2,0(r2)
   3f99c:	10bfffcc 	andi	r2,r2,65535
   3f9a0:	10800418 	cmpnei	r2,r2,16
   3f9a4:	1000061e 	bne	r2,zero,3f9c0 <ip_reasm_compute_overlap+0x4d8>
               {
               *indexp = i;
   3f9a8:	e0bffe17 	ldw	r2,-8(fp)
   3f9ac:	e0fff60b 	ldhu	r3,-40(fp)
   3f9b0:	10c0000d 	sth	r3,0(r2)
               *last_rfqpp = rfqp;               
   3f9b4:	e0bfff17 	ldw	r2,-4(fp)
   3f9b8:	e0fff417 	ldw	r3,-48(fp)
   3f9bc:	10c00015 	stw	r3,0(r2)
               }
            if (irep->flags & IPR_RFQ_COMPACT)
   3f9c0:	e0bffd17 	ldw	r2,-12(fp)
   3f9c4:	10802103 	ldbu	r2,132(r2)
   3f9c8:	10803fcc 	andi	r2,r2,255
   3f9cc:	1080004c 	andi	r2,r2,1
   3f9d0:	10000126 	beq	r2,zero,3f9d8 <ip_reasm_compute_overlap+0x4f0>
               {
               break;
   3f9d4:	00000606 	br	3f9f0 <ip_reasm_compute_overlap+0x508>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   3f9d8:	e0bff60b 	ldhu	r2,-40(fp)
   3f9dc:	10800044 	addi	r2,r2,1
   3f9e0:	e0bff60d 	sth	r2,-40(fp)
   3f9e4:	e0bff60b 	ldhu	r2,-40(fp)
   3f9e8:	10800430 	cmpltui	r2,r2,16
   3f9ec:	103f1f1e 	bne	r2,zero,3f66c <__alt_mem_descriptor_memory+0xdefff66c>
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
   3f9f0:	e0bffe17 	ldw	r2,-8(fp)
   3f9f4:	1080000b 	ldhu	r2,0(r2)
   3f9f8:	10bfffcc 	andi	r2,r2,65535
   3f9fc:	10800418 	cmpnei	r2,r2,16
   3fa00:	1000031e 	bne	r2,zero,3fa10 <ip_reasm_compute_overlap+0x528>
         {
         *last_rfqpp = rfqp;
   3fa04:	e0bfff17 	ldw	r2,-4(fp)
   3fa08:	e0fff417 	ldw	r3,-48(fp)
   3fa0c:	10c00015 	stw	r3,0(r2)
         }
      rfqp = rfqp->next;
   3fa10:	e0bff417 	ldw	r2,-48(fp)
   3fa14:	10800017 	ldw	r2,0(r2)
   3fa18:	e0bff415 	stw	r2,-48(fp)
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);

   while (rfqp)
   3fa1c:	e0bff417 	ldw	r2,-48(fp)
   3fa20:	103f101e 	bne	r2,zero,3f664 <__alt_mem_descriptor_memory+0xdefff664>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
   3fa24:	e0800217 	ldw	r2,8(fp)
   3fa28:	e0fff50b 	ldhu	r3,-44(fp)
   3fa2c:	10c0000d 	sth	r3,0(r2)

   return IPREASM_ACCEPT_FRAG;
   3fa30:	00800084 	movi	r2,2
}
   3fa34:	e037883a 	mov	sp,fp
   3fa38:	dfc00117 	ldw	ra,4(sp)
   3fa3c:	df000017 	ldw	fp,0(sp)
   3fa40:	dec00204 	addi	sp,sp,8
   3fa44:	f800283a 	ret

0003fa48 <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
   3fa48:	defff104 	addi	sp,sp,-60
   3fa4c:	dfc00e15 	stw	ra,56(sp)
   3fa50:	df000d15 	stw	fp,52(sp)
   3fa54:	df000d04 	addi	fp,sp,52
   3fa58:	e13ffe15 	stw	r4,-8(fp)
   3fa5c:	e17fff15 	stw	r5,-4(fp)
   PACKET reassy_pkt;
   struct ip * pip;
   RFQP new_rfqp = 0;
   3fa60:	e03ff515 	stw	zero,-44(fp)
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
   3fa64:	e13fff17 	ldw	r4,-4(fp)
   3fa68:	003ff740 	call	3ff74 <ip_reasm_find_ire>
   3fa6c:	10803fcc 	andi	r2,r2,255
   3fa70:	10800060 	cmpeqi	r2,r2,1
   3fa74:	1000161e 	bne	r2,zero,3fad0 <ip_reasm_process_subsequent_fragments+0x88>
      {
      ++ire_stats.bad_irep;
   3fa78:	008001b4 	movhi	r2,6
   3fa7c:	10b9f504 	addi	r2,r2,-6188
   3fa80:	10800017 	ldw	r2,0(r2)
   3fa84:	10c00044 	addi	r3,r2,1
   3fa88:	008001b4 	movhi	r2,6
   3fa8c:	10b9f504 	addi	r2,r2,-6188
   3fa90:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
   3fa94:	01000084 	movi	r4,2
   3fa98:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free (p);
   3fa9c:	e13ffe17 	ldw	r4,-8(fp)
   3faa0:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3faa4:	01000084 	movi	r4,2
   3faa8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
   3faac:	008001b4 	movhi	r2,6
   3fab0:	10b9e104 	addi	r2,r2,-6268
   3fab4:	10800f17 	ldw	r2,60(r2)
   3fab8:	10c00044 	addi	r3,r2,1
   3fabc:	008001b4 	movhi	r2,6
   3fac0:	10b9e104 	addi	r2,r2,-6268
   3fac4:	10c00f15 	stw	r3,60(r2)
      return ENP_PARAM;
   3fac8:	00bffd84 	movi	r2,-10
   3facc:	00012406 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
      }

   pip = ip_head(p);
   3fad0:	e0bffe17 	ldw	r2,-8(fp)
   3fad4:	10800317 	ldw	r2,12(r2)
   3fad8:	e0bff615 	stw	r2,-40(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
   3fadc:	e13ff617 	ldw	r4,-40(fp)
   3fae0:	003ef0c0 	call	3ef0c <ip_reasm_determine_type_of_frag>
   3fae4:	e0bff715 	stw	r2,-36(fp)
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
   3fae8:	e0bff717 	ldw	r2,-36(fp)
   3faec:	10800158 	cmpnei	r2,r2,5
   3faf0:	1000251e 	bne	r2,zero,3fb88 <ip_reasm_process_subsequent_fragments+0x140>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
   3faf4:	e0bff617 	ldw	r2,-40(fp)
   3faf8:	1080018b 	ldhu	r2,6(r2)
   3fafc:	10bfffcc 	andi	r2,r2,65535
   3fb00:	1004d23a 	srli	r2,r2,8
   3fb04:	10bfffcc 	andi	r2,r2,65535
   3fb08:	10c03fcc 	andi	r3,r2,255
   3fb0c:	e0bff617 	ldw	r2,-40(fp)
   3fb10:	1080018b 	ldhu	r2,6(r2)
   3fb14:	10bfffcc 	andi	r2,r2,65535
   3fb18:	1004923a 	slli	r2,r2,8
   3fb1c:	10bfffcc 	andi	r2,r2,65535
   3fb20:	1884b03a 	or	r2,r3,r2
   3fb24:	100490fa 	slli	r2,r2,3
   3fb28:	1007883a 	mov	r3,r2
   3fb2c:	e0bff617 	ldw	r2,-40(fp)
   3fb30:	1080008b 	ldhu	r2,2(r2)
   3fb34:	10bfffcc 	andi	r2,r2,65535
   3fb38:	1004d23a 	srli	r2,r2,8
   3fb3c:	1009883a 	mov	r4,r2
   3fb40:	e0bff617 	ldw	r2,-40(fp)
   3fb44:	1080008b 	ldhu	r2,2(r2)
   3fb48:	10bfffcc 	andi	r2,r2,65535
   3fb4c:	1004923a 	slli	r2,r2,8
   3fb50:	2084b03a 	or	r2,r4,r2
   3fb54:	1009883a 	mov	r4,r2
   3fb58:	e0bff617 	ldw	r2,-40(fp)
   3fb5c:	10800003 	ldbu	r2,0(r2)
   3fb60:	10803fcc 	andi	r2,r2,255
   3fb64:	108003cc 	andi	r2,r2,15
   3fb68:	1085883a 	add	r2,r2,r2
   3fb6c:	1085883a 	add	r2,r2,r2
   3fb70:	2085c83a 	sub	r2,r4,r2
   3fb74:	1885883a 	add	r2,r3,r2
   3fb78:	1007883a 	mov	r3,r2
   3fb7c:	e0bfff17 	ldw	r2,-4(fp)
   3fb80:	10c0040d 	sth	r3,16(r2)
   3fb84:	00000a06 	br	3fbb0 <ip_reasm_process_subsequent_fragments+0x168>
      }
   else if (ftype == IP_FF)
   3fb88:	e0bff717 	ldw	r2,-36(fp)
   3fb8c:	10800058 	cmpnei	r2,r2,1
   3fb90:	1000071e 	bne	r2,zero,3fbb0 <ip_reasm_process_subsequent_fragments+0x168>
      {
      irep->l2_hdr = p->nb_buff;
   3fb94:	e0bffe17 	ldw	r2,-8(fp)
   3fb98:	10c00117 	ldw	r3,4(r2)
   3fb9c:	e0bfff17 	ldw	r2,-4(fp)
   3fba0:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
   3fba4:	e0bfff17 	ldw	r2,-4(fp)
   3fba8:	e0fff617 	ldw	r3,-40(fp)
   3fbac:	10c02015 	stw	r3,128(r2)
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
   3fbb0:	e1bffb04 	addi	r6,fp,-20
   3fbb4:	e0fffc04 	addi	r3,fp,-16
   3fbb8:	e0bffd04 	addi	r2,fp,-12
   3fbbc:	d8800015 	stw	r2,0(sp)
   3fbc0:	e0bffd84 	addi	r2,fp,-10
   3fbc4:	d8800115 	stw	r2,4(sp)
   3fbc8:	e13ffe17 	ldw	r4,-8(fp)
   3fbcc:	e17fff17 	ldw	r5,-4(fp)
   3fbd0:	180f883a 	mov	r7,r3
   3fbd4:	003f4e80 	call	3f4e8 <ip_reasm_compute_overlap>
   3fbd8:	e0bff815 	stw	r2,-32(fp)
   3fbdc:	e0bff817 	ldw	r2,-32(fp)
   3fbe0:	108000a0 	cmpeqi	r2,r2,2
   3fbe4:	1000091e 	bne	r2,zero,3fc0c <ip_reasm_process_subsequent_fragments+0x1c4>
      {
      switch (rc2)
   3fbe8:	e0bff817 	ldw	r2,-32(fp)
   3fbec:	10c00060 	cmpeqi	r3,r2,1
   3fbf0:	1800031e 	bne	r3,zero,3fc00 <ip_reasm_process_subsequent_fragments+0x1b8>
   3fbf4:	00800436 	bltu	zero,r2,3fc08 <ip_reasm_process_subsequent_fragments+0x1c0>
         {
         case IPREASM_DROP_FRAG_DUPLICATE:
            /* this isn't really an error, since it indicates that the received 
             * fragment's information is a duplicate of what is present in the 
             * already queued fragments */
            return IPREASM_OK;
   3fbf8:	0005883a 	mov	r2,zero
   3fbfc:	0000d806 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
         case IPREASM_DROP_FRAG_BAD_PARAM:
            /* this is a real error */
            return ENP_PARAM;
   3fc00:	00bffd84 	movi	r2,-10
   3fc04:	0000d606 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
          * Altera Niche Stack Nios port modification:
          * Handle IPREASM_ACCEPT_FRAG case (will never
          * get here per if() above) to remove build warning.
          */
         case IPREASM_ACCEPT_FRAG:
            while(0);
   3fc08:	0001883a 	nop
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
   3fc0c:	e0bffe17 	ldw	r2,-8(fp)
   3fc10:	10800217 	ldw	r2,8(r2)
   3fc14:	10bfffcc 	andi	r2,r2,65535
   3fc18:	1009883a 	mov	r4,r2
   3fc1c:	003efdc0 	call	3efdc <ip_reasm_check_mem_useage>
   3fc20:	e0bff915 	stw	r2,-28(fp)
   3fc24:	e0bff917 	ldw	r2,-28(fp)
   3fc28:	10001126 	beq	r2,zero,3fc70 <ip_reasm_process_subsequent_fragments+0x228>
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
   3fc2c:	01000084 	movi	r4,2
   3fc30:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free (p);
   3fc34:	e13ffe17 	ldw	r4,-8(fp)
   3fc38:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3fc3c:	01000084 	movi	r4,2
   3fc40:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
   3fc44:	e13fff17 	ldw	r4,-4(fp)
   3fc48:	00403f40 	call	403f4 <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
   3fc4c:	008001b4 	movhi	r2,6
   3fc50:	10b9e104 	addi	r2,r2,-6268
   3fc54:	10800f17 	ldw	r2,60(r2)
   3fc58:	10c00044 	addi	r3,r2,1
   3fc5c:	008001b4 	movhi	r2,6
   3fc60:	10b9e104 	addi	r2,r2,-6268
   3fc64:	10c00f15 	stw	r3,60(r2)
      return rc;
   3fc68:	e0bff917 	ldw	r2,-28(fp)
   3fc6c:	0000bc06 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
   3fc70:	e0bffb0b 	ldhu	r2,-20(fp)
   3fc74:	10bfffcc 	andi	r2,r2,65535
   3fc78:	10800420 	cmpeqi	r2,r2,16
   3fc7c:	1000121e 	bne	r2,zero,3fcc8 <ip_reasm_process_subsequent_fragments+0x280>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
   3fc80:	e0fffc17 	ldw	r3,-16(fp)
   3fc84:	e0bffb0b 	ldhu	r2,-20(fp)
   3fc88:	10bfffcc 	andi	r2,r2,65535
   3fc8c:	10800044 	addi	r2,r2,1
   3fc90:	1085883a 	add	r2,r2,r2
   3fc94:	1085883a 	add	r2,r2,r2
   3fc98:	1885883a 	add	r2,r3,r2
   3fc9c:	e0fffe17 	ldw	r3,-8(fp)
   3fca0:	10c00015 	stw	r3,0(r2)
      rfqp->frag_offset[index] = frag_offset;
   3fca4:	e13ffc17 	ldw	r4,-16(fp)
   3fca8:	e0bffb0b 	ldhu	r2,-20(fp)
   3fcac:	10bfffcc 	andi	r2,r2,65535
   3fcb0:	e0fffd0b 	ldhu	r3,-12(fp)
   3fcb4:	10800884 	addi	r2,r2,34
   3fcb8:	1085883a 	add	r2,r2,r2
   3fcbc:	2085883a 	add	r2,r4,r2
   3fcc0:	10c0000d 	sth	r3,0(r2)
   3fcc4:	00003906 	br	3fdac <ip_reasm_process_subsequent_fragments+0x364>
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
   3fcc8:	e0bffe17 	ldw	r2,-8(fp)
   3fccc:	10800217 	ldw	r2,8(r2)
   3fcd0:	10801904 	addi	r2,r2,100
   3fcd4:	10bfffcc 	andi	r2,r2,65535
   3fcd8:	1009883a 	mov	r4,r2
   3fcdc:	003efdc0 	call	3efdc <ip_reasm_check_mem_useage>
   3fce0:	e0bff915 	stw	r2,-28(fp)
   3fce4:	e0bff917 	ldw	r2,-28(fp)
   3fce8:	10001126 	beq	r2,zero,3fd30 <ip_reasm_process_subsequent_fragments+0x2e8>
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
   3fcec:	01000084 	movi	r4,2
   3fcf0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free (p);
   3fcf4:	e13ffe17 	ldw	r4,-8(fp)
   3fcf8:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3fcfc:	01000084 	movi	r4,2
   3fd00:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
   3fd04:	e13fff17 	ldw	r4,-4(fp)
   3fd08:	00403f40 	call	403f4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
   3fd0c:	008001b4 	movhi	r2,6
   3fd10:	10b9e104 	addi	r2,r2,-6268
   3fd14:	10800f17 	ldw	r2,60(r2)
   3fd18:	10c00044 	addi	r3,r2,1
   3fd1c:	008001b4 	movhi	r2,6
   3fd20:	10b9e104 	addi	r2,r2,-6268
   3fd24:	10c00f15 	stw	r3,60(r2)
         return rc;
   3fd28:	e0bff917 	ldw	r2,-28(fp)
   3fd2c:	00008c06 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
   3fd30:	01001904 	movi	r4,100
   3fd34:	002bce00 	call	2bce0 <npalloc>
   3fd38:	e0bff515 	stw	r2,-44(fp)
      if (new_rfqp == 0)
   3fd3c:	e0bff517 	ldw	r2,-44(fp)
   3fd40:	1000111e 	bne	r2,zero,3fd88 <ip_reasm_process_subsequent_fragments+0x340>
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
   3fd44:	01000084 	movi	r4,2
   3fd48:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free (p);
   3fd4c:	e13ffe17 	ldw	r4,-8(fp)
   3fd50:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3fd54:	01000084 	movi	r4,2
   3fd58:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
   3fd5c:	e13fff17 	ldw	r4,-4(fp)
   3fd60:	00403f40 	call	403f4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
   3fd64:	008001b4 	movhi	r2,6
   3fd68:	10b9e104 	addi	r2,r2,-6268
   3fd6c:	10800f17 	ldw	r2,60(r2)
   3fd70:	10c00044 	addi	r3,r2,1
   3fd74:	008001b4 	movhi	r2,6
   3fd78:	10b9e104 	addi	r2,r2,-6268
   3fd7c:	10c00f15 	stw	r3,60(r2)
         return ENP_RESOURCE;
   3fd80:	00bffa84 	movi	r2,-22
   3fd84:	00007606 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
         }
      else
         {
         new_rfqp->bufp[0] = p;
   3fd88:	e0bff517 	ldw	r2,-44(fp)
   3fd8c:	e0fffe17 	ldw	r3,-8(fp)
   3fd90:	10c00115 	stw	r3,4(r2)
         new_rfqp->frag_offset[0] = frag_offset;
   3fd94:	e0fffd0b 	ldhu	r3,-12(fp)
   3fd98:	e0bff517 	ldw	r2,-44(fp)
   3fd9c:	10c0110d 	sth	r3,68(r2)
         rfqp->next = new_rfqp;
   3fda0:	e0bffc17 	ldw	r2,-16(fp)
   3fda4:	e0fff517 	ldw	r3,-44(fp)
   3fda8:	10c00015 	stw	r3,0(r2)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
   3fdac:	e0bffd83 	ldbu	r2,-10(fp)
   3fdb0:	10803fcc 	andi	r2,r2,255
   3fdb4:	10001426 	beq	r2,zero,3fe08 <ip_reasm_process_subsequent_fragments+0x3c0>
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
   3fdb8:	e13fff17 	ldw	r4,-4(fp)
   3fdbc:	00405a40 	call	405a4 <ip_reasm_mark_compact_rfq>
   3fdc0:	e0bff915 	stw	r2,-28(fp)
   3fdc4:	e0bff917 	ldw	r2,-28(fp)
   3fdc8:	10000f26 	beq	r2,zero,3fe08 <ip_reasm_process_subsequent_fragments+0x3c0>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
   3fdcc:	01000084 	movi	r4,2
   3fdd0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free (p);
   3fdd4:	e13ffe17 	ldw	r4,-8(fp)
   3fdd8:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3fddc:	01000084 	movi	r4,2
   3fde0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
   3fde4:	008001b4 	movhi	r2,6
   3fde8:	10b9e104 	addi	r2,r2,-6268
   3fdec:	10800f17 	ldw	r2,60(r2)
   3fdf0:	10c00044 	addi	r3,r2,1
   3fdf4:	008001b4 	movhi	r2,6
   3fdf8:	10b9e104 	addi	r2,r2,-6268
   3fdfc:	10c00f15 	stw	r3,60(r2)
            return rc;
   3fe00:	e0bff917 	ldw	r2,-28(fp)
   3fe04:	00005606 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
   3fe08:	e0bfff17 	ldw	r2,-4(fp)
   3fe0c:	1080048b 	ldhu	r2,18(r2)
   3fe10:	e0fffe17 	ldw	r3,-8(fp)
   3fe14:	18c00417 	ldw	r3,16(r3)
   3fe18:	10c5883a 	add	r2,r2,r3
   3fe1c:	1007883a 	mov	r3,r2
   3fe20:	e0bfff17 	ldw	r2,-4(fp)
   3fe24:	10c0048d 	sth	r3,18(r2)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
   3fe28:	e0bffe17 	ldw	r2,-8(fp)
   3fe2c:	10800217 	ldw	r2,8(r2)
   3fe30:	1007883a 	mov	r3,r2
   3fe34:	e0bff517 	ldw	r2,-44(fp)
   3fe38:	1000021e 	bne	r2,zero,3fe44 <ip_reasm_process_subsequent_fragments+0x3fc>
   3fe3c:	0005883a 	mov	r2,zero
   3fe40:	00000106 	br	3fe48 <ip_reasm_process_subsequent_fragments+0x400>
   3fe44:	00801904 	movi	r2,100
   3fe48:	1885883a 	add	r2,r3,r2
   3fe4c:	10bfffcc 	andi	r2,r2,65535
   3fe50:	1009883a 	mov	r4,r2
   3fe54:	003f0700 	call	3f070 <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
   3fe58:	e0bfff17 	ldw	r2,-4(fp)
   3fe5c:	1080040b 	ldhu	r2,16(r2)
   3fe60:	10bfffcc 	andi	r2,r2,65535
   3fe64:	10003d26 	beq	r2,zero,3ff5c <ip_reasm_process_subsequent_fragments+0x514>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
   3fe68:	e0bfff17 	ldw	r2,-4(fp)
   3fe6c:	10c0048b 	ldhu	r3,18(r2)
   3fe70:	e0bfff17 	ldw	r2,-4(fp)
   3fe74:	1080040b 	ldhu	r2,16(r2)
   3fe78:	18ffffcc 	andi	r3,r3,65535
   3fe7c:	10bfffcc 	andi	r2,r2,65535
   3fe80:	1880361e 	bne	r3,r2,3ff5c <ip_reasm_process_subsequent_fragments+0x514>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
   3fe84:	e0bfff17 	ldw	r2,-4(fp)
   3fe88:	10802017 	ldw	r2,128(r2)
   3fe8c:	e0bff615 	stw	r2,-40(fp)
         LOCK_NET_RESOURCE (FREEQ_RESID);
   3fe90:	01000084 	movi	r4,2
   3fe94:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
   3fe98:	e0bfff17 	ldw	r2,-4(fp)
   3fe9c:	1080040b 	ldhu	r2,16(r2)
   3fea0:	10ffffcc 	andi	r3,r2,65535
   3fea4:	e0bfff17 	ldw	r2,-4(fp)
   3fea8:	10802017 	ldw	r2,128(r2)
   3feac:	1009883a 	mov	r4,r2
   3feb0:	e0bfff17 	ldw	r2,-4(fp)
   3feb4:	10801f17 	ldw	r2,124(r2)
   3feb8:	2085c83a 	sub	r2,r4,r2
   3febc:	1887883a 	add	r3,r3,r2
   3fec0:	e0bff617 	ldw	r2,-40(fp)
   3fec4:	10800003 	ldbu	r2,0(r2)
   3fec8:	10803fcc 	andi	r2,r2,255
   3fecc:	108003cc 	andi	r2,r2,15
   3fed0:	1085883a 	add	r2,r2,r2
   3fed4:	1085883a 	add	r2,r2,r2
   3fed8:	1885883a 	add	r2,r3,r2
   3fedc:	1009883a 	mov	r4,r2
   3fee0:	002a53c0 	call	2a53c <pk_alloc>
   3fee4:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
   3fee8:	01000084 	movi	r4,2
   3feec:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
   3fef0:	e0bffa17 	ldw	r2,-24(fp)
   3fef4:	10000b1e 	bne	r2,zero,3ff24 <ip_reasm_process_subsequent_fragments+0x4dc>
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
   3fef8:	e13fff17 	ldw	r4,-4(fp)
   3fefc:	00403f40 	call	403f4 <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
   3ff00:	008001b4 	movhi	r2,6
   3ff04:	10b9e104 	addi	r2,r2,-6268
   3ff08:	10800f17 	ldw	r2,60(r2)
   3ff0c:	10c00044 	addi	r3,r2,1
   3ff10:	008001b4 	movhi	r2,6
   3ff14:	10b9e104 	addi	r2,r2,-6268
   3ff18:	10c00f15 	stw	r3,60(r2)
            return ENP_NOBUFFER;
   3ff1c:	00bffac4 	movi	r2,-21
   3ff20:	00000f06 	br	3ff60 <ip_reasm_process_subsequent_fragments+0x518>
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
   3ff24:	e13ffa17 	ldw	r4,-24(fp)
   3ff28:	e17fff17 	ldw	r5,-4(fp)
   3ff2c:	003ffcc0 	call	3ffcc <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
   3ff30:	e13fff17 	ldw	r4,-4(fp)
   3ff34:	00403f40 	call	403f4 <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
   3ff38:	008001b4 	movhi	r2,6
   3ff3c:	10b9e104 	addi	r2,r2,-6268
   3ff40:	10800e17 	ldw	r2,56(r2)
   3ff44:	10c00044 	addi	r3,r2,1
   3ff48:	008001b4 	movhi	r2,6
   3ff4c:	10b9e104 	addi	r2,r2,-6268
   3ff50:	10c00e15 	stw	r3,56(r2)
            ip_demux (reassy_pkt);
   3ff54:	e13ffa17 	ldw	r4,-24(fp)
   3ff58:	00414140 	call	41414 <ip_demux>
      {
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
   3ff5c:	0005883a 	mov	r2,zero
}
   3ff60:	e037883a 	mov	sp,fp
   3ff64:	dfc00117 	ldw	ra,4(sp)
   3ff68:	df000017 	ldw	fp,0(sp)
   3ff6c:	dec00204 	addi	sp,sp,8
   3ff70:	f800283a 	ret

0003ff74 <ip_reasm_find_ire>:
OUTPUT: This function returns a IPREASM_TRUE if the IRE exists in the master 
IRE list; otherwise, it returns a IPREASM_FALSE.
*/

u_char ip_reasm_find_ire (IREP irep)
{
   3ff74:	defffd04 	addi	sp,sp,-12
   3ff78:	df000215 	stw	fp,8(sp)
   3ff7c:	df000204 	addi	fp,sp,8
   3ff80:	e13fff15 	stw	r4,-4(fp)
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   3ff84:	d0a8b417 	ldw	r2,-23856(gp)
   3ff88:	e0bffe15 	stw	r2,-8(fp)
   3ff8c:	00000806 	br	3ffb0 <ip_reasm_find_ire+0x3c>
      {
      if (tmpp == irep) 
   3ff90:	e0fffe17 	ldw	r3,-8(fp)
   3ff94:	e0bfff17 	ldw	r2,-4(fp)
   3ff98:	1880021e 	bne	r3,r2,3ffa4 <ip_reasm_find_ire+0x30>
         {
         return IPREASM_TRUE;
   3ff9c:	00800044 	movi	r2,1
   3ffa0:	00000606 	br	3ffbc <ip_reasm_find_ire+0x48>
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   3ffa4:	e0bffe17 	ldw	r2,-8(fp)
   3ffa8:	10800017 	ldw	r2,0(r2)
   3ffac:	e0bffe15 	stw	r2,-8(fp)
   3ffb0:	e0bffe17 	ldw	r2,-8(fp)
   3ffb4:	103ff61e 	bne	r2,zero,3ff90 <__alt_mem_descriptor_memory+0xdeffff90>
         {
         return IPREASM_TRUE;
         }
      }

   return IPREASM_FALSE;
   3ffb8:	0005883a 	mov	r2,zero
}
   3ffbc:	e037883a 	mov	sp,fp
   3ffc0:	df000017 	ldw	fp,0(sp)
   3ffc4:	dec00104 	addi	sp,sp,4
   3ffc8:	f800283a 	ret

0003ffcc <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
   3ffcc:	defff504 	addi	sp,sp,-44
   3ffd0:	dfc00a15 	stw	ra,40(sp)
   3ffd4:	df000915 	stw	fp,36(sp)
   3ffd8:	df000904 	addi	fp,sp,36
   3ffdc:	e13ffe15 	stw	r4,-8(fp)
   3ffe0:	e17fff15 	stw	r5,-4(fp)
   RFQP rfqp;
   u_short i;
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;
   3ffe4:	e03ff915 	stw	zero,-28(fp)

   pip = (struct ip *) irep->l3_hdr;
   3ffe8:	e0bfff17 	ldw	r2,-4(fp)
   3ffec:	10802017 	ldw	r2,128(r2)
   3fff0:	e0bffa15 	stw	r2,-24(fp)
   iphlen = ip_hlen (pip);
   3fff4:	e0bffa17 	ldw	r2,-24(fp)
   3fff8:	10800003 	ldbu	r2,0(r2)
   3fffc:	108003cc 	andi	r2,r2,15
   40000:	1085883a 	add	r2,r2,r2
   40004:	1085883a 	add	r2,r2,r2
   40008:	e0bffb05 	stb	r2,-20(fp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
   4000c:	e0bfff17 	ldw	r2,-4(fp)
   40010:	10802017 	ldw	r2,128(r2)
   40014:	1007883a 	mov	r3,r2
   40018:	e0bfff17 	ldw	r2,-4(fp)
   4001c:	10801f17 	ldw	r2,124(r2)
   40020:	1885c83a 	sub	r2,r3,r2
   40024:	1007883a 	mov	r3,r2
   40028:	e0bffb03 	ldbu	r2,-20(fp)
   4002c:	1885883a 	add	r2,r3,r2
   40030:	e0bffb45 	stb	r2,-19(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
   40034:	e0bffe17 	ldw	r2,-8(fp)
   40038:	11000117 	ldw	r4,4(r2)
   4003c:	e0bfff17 	ldw	r2,-4(fp)
   40040:	10c01f17 	ldw	r3,124(r2)
   40044:	e0bffb43 	ldbu	r2,-19(fp)
   40048:	180b883a 	mov	r5,r3
   4004c:	100d883a 	mov	r6,r2
   40050:	0007c900 	call	7c90 <memcpy>

   rfqp = &(irep->rfq);
   40054:	e0bfff17 	ldw	r2,-4(fp)
   40058:	10800604 	addi	r2,r2,24
   4005c:	e0bff715 	stw	r2,-36(fp)
   writep = reassy_pkt->nb_buff + offset;
   40060:	e0bffe17 	ldw	r2,-8(fp)
   40064:	10c00117 	ldw	r3,4(r2)
   40068:	e0bffb43 	ldbu	r2,-19(fp)
   4006c:	1885883a 	add	r2,r3,r2
   40070:	e0bffc15 	stw	r2,-16(fp)

   while (rfqp)
   40074:	00004306 	br	40184 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1b8>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   40078:	e03ff80d 	sth	zero,-32(fp)
   4007c:	00003b06 	br	4016c <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1a0>
         {
         if ((p = rfqp->bufp [i]) != 0)
   40080:	e0bff80b 	ldhu	r2,-32(fp)
   40084:	e0fff717 	ldw	r3,-36(fp)
   40088:	10800044 	addi	r2,r2,1
   4008c:	1085883a 	add	r2,r2,r2
   40090:	1085883a 	add	r2,r2,r2
   40094:	1885883a 	add	r2,r3,r2
   40098:	10800017 	ldw	r2,0(r2)
   4009c:	e0bffd15 	stw	r2,-12(fp)
   400a0:	e0bffd17 	ldw	r2,-12(fp)
   400a4:	10002826 	beq	r2,zero,40148 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x17c>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
   400a8:	e0bff80b 	ldhu	r2,-32(fp)
   400ac:	e0fff717 	ldw	r3,-36(fp)
   400b0:	10800884 	addi	r2,r2,34
   400b4:	1085883a 	add	r2,r2,r2
   400b8:	1885883a 	add	r2,r3,r2
   400bc:	1080000b 	ldhu	r2,0(r2)
   400c0:	10bfffcc 	andi	r2,r2,65535
   400c4:	e0fffc17 	ldw	r3,-16(fp)
   400c8:	1889883a 	add	r4,r3,r2
   400cc:	e0bffd17 	ldw	r2,-12(fp)
   400d0:	10c00317 	ldw	r3,12(r2)
   400d4:	e0bffd17 	ldw	r2,-12(fp)
   400d8:	10800417 	ldw	r2,16(r2)
   400dc:	180b883a 	mov	r5,r3
   400e0:	100d883a 	mov	r6,r2
   400e4:	0007c900 	call	7c90 <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
   400e8:	e0bff917 	ldw	r2,-28(fp)
   400ec:	1000031e 	bne	r2,zero,400fc <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x130>
   400f0:	e0bffd17 	ldw	r2,-12(fp)
   400f4:	e0bff915 	stw	r2,-28(fp)
   400f8:	00000b06 	br	40128 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x15c>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
   400fc:	e0bffd17 	ldw	r2,-12(fp)
   40100:	10800217 	ldw	r2,8(r2)
   40104:	10bfffcc 	andi	r2,r2,65535
   40108:	1009883a 	mov	r4,r2
   4010c:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
   40110:	01000084 	movi	r4,2
   40114:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
               pk_free (p);
   40118:	e13ffd17 	ldw	r4,-12(fp)
   4011c:	002a8940 	call	2a894 <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
   40120:	01000084 	movi	r4,2
   40124:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
   40128:	e0bff80b 	ldhu	r2,-32(fp)
   4012c:	e0fff717 	ldw	r3,-36(fp)
   40130:	10800044 	addi	r2,r2,1
   40134:	1085883a 	add	r2,r2,r2
   40138:	1085883a 	add	r2,r2,r2
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10000015 	stw	zero,0(r2)
   40144:	00000606 	br	40160 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x194>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
   40148:	e0bfff17 	ldw	r2,-4(fp)
   4014c:	10802103 	ldbu	r2,132(r2)
   40150:	10803fcc 	andi	r2,r2,255
   40154:	1080004c 	andi	r2,r2,1
   40158:	10000126 	beq	r2,zero,40160 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x194>
               {
               break;
   4015c:	00000606 	br	40178 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1ac>
   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   40160:	e0bff80b 	ldhu	r2,-32(fp)
   40164:	10800044 	addi	r2,r2,1
   40168:	e0bff80d 	sth	r2,-32(fp)
   4016c:	e0bff80b 	ldhu	r2,-32(fp)
   40170:	10800430 	cmpltui	r2,r2,16
   40174:	103fc21e 	bne	r2,zero,40080 <__alt_mem_descriptor_memory+0xdf000080>
               break;
               }
            }
          }

      rfqp = rfqp->next;
   40178:	e0bff717 	ldw	r2,-36(fp)
   4017c:	10800017 	ldw	r2,0(r2)
   40180:	e0bff715 	stw	r2,-36(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
   40184:	e0bff717 	ldw	r2,-36(fp)
   40188:	103fbb1e 	bne	r2,zero,40078 <__alt_mem_descriptor_memory+0xdf000078>
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
   4018c:	e0bffe17 	ldw	r2,-8(fp)
   40190:	10800117 	ldw	r2,4(r2)
   40194:	e0ffff17 	ldw	r3,-4(fp)
   40198:	18c02017 	ldw	r3,128(r3)
   4019c:	1809883a 	mov	r4,r3
   401a0:	e0ffff17 	ldw	r3,-4(fp)
   401a4:	18c01f17 	ldw	r3,124(r3)
   401a8:	20c7c83a 	sub	r3,r4,r3
   401ac:	10c7883a 	add	r3,r2,r3
   401b0:	e0bffe17 	ldw	r2,-8(fp)
   401b4:	10c00315 	stw	r3,12(r2)
   reassy_pkt->nb_plen = irep->length + iphlen;
   401b8:	e0bfff17 	ldw	r2,-4(fp)
   401bc:	1080040b 	ldhu	r2,16(r2)
   401c0:	10ffffcc 	andi	r3,r2,65535
   401c4:	e0bffb03 	ldbu	r2,-20(fp)
   401c8:	1885883a 	add	r2,r3,r2
   401cc:	1007883a 	mov	r3,r2
   401d0:	e0bffe17 	ldw	r2,-8(fp)
   401d4:	10c00415 	stw	r3,16(r2)
   reassy_pkt->nb_tstamp = cticks;
   401d8:	00800174 	movhi	r2,5
   401dc:	108fbe04 	addi	r2,r2,16120
   401e0:	10800017 	ldw	r2,0(r2)
   401e4:	1007883a 	mov	r3,r2
   401e8:	e0bffe17 	ldw	r2,-8(fp)
   401ec:	10c00515 	stw	r3,20(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
   401f0:	e0bffe17 	ldw	r2,-8(fp)
   401f4:	10c00a17 	ldw	r3,40(r2)
   401f8:	e0bff917 	ldw	r2,-28(fp)
   401fc:	10800a17 	ldw	r2,40(r2)
   40200:	108000cc 	andi	r2,r2,3
   40204:	1886b03a 	or	r3,r3,r2
   40208:	e0bffe17 	ldw	r2,-8(fp)
   4020c:	10c00a15 	stw	r3,40(r2)
   reassy_pkt->net = sav_pkt->net;
   40210:	e0bff917 	ldw	r2,-28(fp)
   40214:	10c00617 	ldw	r3,24(r2)
   40218:	e0bffe17 	ldw	r2,-8(fp)
   4021c:	10c00615 	stw	r3,24(r2)
   reassy_pkt->type = sav_pkt->type;
   40220:	e0bff917 	ldw	r2,-28(fp)
   40224:	10c0080b 	ldhu	r3,32(r2)
   40228:	e0bffe17 	ldw	r2,-8(fp)
   4022c:	10c0080d 	sth	r3,32(r2)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
   40230:	e0bff917 	ldw	r2,-28(fp)
   40234:	10800217 	ldw	r2,8(r2)
   40238:	10bfffcc 	andi	r2,r2,65535
   4023c:	1009883a 	mov	r4,r2
   40240:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
   40244:	01000084 	movi	r4,2
   40248:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
   4024c:	e13ff917 	ldw	r4,-28(fp)
   40250:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
   40254:	01000084 	movi	r4,2
   40258:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
   4025c:	e0bffe17 	ldw	r2,-8(fp)
   40260:	10800317 	ldw	r2,12(r2)
   40264:	e0bffa15 	stw	r2,-24(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
   40268:	e0bffe17 	ldw	r2,-8(fp)
   4026c:	10800417 	ldw	r2,16(r2)
   40270:	1004d23a 	srli	r2,r2,8
   40274:	10803fcc 	andi	r2,r2,255
   40278:	1007883a 	mov	r3,r2
   4027c:	e0bffe17 	ldw	r2,-8(fp)
   40280:	10800417 	ldw	r2,16(r2)
   40284:	1004923a 	slli	r2,r2,8
   40288:	1884b03a 	or	r2,r3,r2
   4028c:	1007883a 	mov	r3,r2
   40290:	e0bffa17 	ldw	r2,-24(fp)
   40294:	10c0008d 	sth	r3,2(r2)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   40298:	e0bffa17 	ldw	r2,-24(fp)
   4029c:	10c0018b 	ldhu	r3,6(r2)
   402a0:	00bff7c4 	movi	r2,-33
   402a4:	1884703a 	and	r2,r3,r2
   402a8:	1007883a 	mov	r3,r2
   402ac:	e0bffa17 	ldw	r2,-24(fp)
   402b0:	10c0018d 	sth	r3,6(r2)
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
   402b4:	e0bffa17 	ldw	r2,-24(fp)
   402b8:	1080018b 	ldhu	r2,6(r2)
   402bc:	1080380c 	andi	r2,r2,224
   402c0:	1007883a 	mov	r3,r2
   402c4:	e0bffa17 	ldw	r2,-24(fp)
   402c8:	10c0018d 	sth	r3,6(r2)
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
   402cc:	e0bffa17 	ldw	r2,-24(fp)
   402d0:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
   402d4:	e0bffb03 	ldbu	r2,-20(fp)
   402d8:	1004d07a 	srli	r2,r2,1
   402dc:	10803fcc 	andi	r2,r2,255
   402e0:	e13ffa17 	ldw	r4,-24(fp)
   402e4:	100b883a 	mov	r5,r2
   402e8:	00263480 	call	26348 <cksum>
   402ec:	0084303a 	nor	r2,zero,r2
   402f0:	1007883a 	mov	r3,r2
   402f4:	e0bffa17 	ldw	r2,-24(fp)
   402f8:	10c0028d 	sth	r3,10(r2)

   return IPREASM_OK;
   402fc:	0005883a 	mov	r2,zero
}
   40300:	e037883a 	mov	sp,fp
   40304:	dfc00117 	ldw	ra,4(sp)
   40308:	df000017 	ldw	fp,0(sp)
   4030c:	dec00204 	addi	sp,sp,8
   40310:	f800283a 	ret

00040314 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
   40314:	defffc04 	addi	sp,sp,-16
   40318:	dfc00315 	stw	ra,12(sp)
   4031c:	df000215 	stw	fp,8(sp)
   40320:	df000204 	addi	fp,sp,8
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
   40324:	0009883a 	mov	r4,zero
   40328:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
   4032c:	d0a8b417 	ldw	r2,-23856(gp)
   40330:	e0bffe15 	stw	r2,-8(fp)
   40334:	00002006 	br	403b8 <ip_reasm_process_timer_tick+0xa4>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
   40338:	e0bffe17 	ldw	r2,-8(fp)
   4033c:	10800017 	ldw	r2,0(r2)
   40340:	e0bfff15 	stw	r2,-4(fp)
      ++tmpp->age;
   40344:	e0bffe17 	ldw	r2,-8(fp)
   40348:	10800517 	ldw	r2,20(r2)
   4034c:	10c00044 	addi	r3,r2,1
   40350:	e0bffe17 	ldw	r2,-8(fp)
   40354:	10c00515 	stw	r3,20(r2)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
   40358:	e0bffe17 	ldw	r2,-8(fp)
   4035c:	10800517 	ldw	r2,20(r2)
   40360:	10801e18 	cmpnei	r2,r2,120
   40364:	1000121e 	bne	r2,zero,403b0 <ip_reasm_process_timer_tick+0x9c>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
   40368:	008001b4 	movhi	r2,6
   4036c:	10b9f504 	addi	r2,r2,-6188
   40370:	10800117 	ldw	r2,4(r2)
   40374:	10c00044 	addi	r3,r2,1
   40378:	008001b4 	movhi	r2,6
   4037c:	10b9f504 	addi	r2,r2,-6188
   40380:	10c00115 	stw	r3,4(r2)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
   40384:	e13ffe17 	ldw	r4,-8(fp)
   40388:	0040a1c0 	call	40a1c <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
   4038c:	e13ffe17 	ldw	r4,-8(fp)
   40390:	00403f40 	call	403f4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
   40394:	008001b4 	movhi	r2,6
   40398:	10b9e104 	addi	r2,r2,-6268
   4039c:	10800f17 	ldw	r2,60(r2)
   403a0:	10c00044 	addi	r3,r2,1
   403a4:	008001b4 	movhi	r2,6
   403a8:	10b9e104 	addi	r2,r2,-6268
   403ac:	10c00f15 	stw	r3,60(r2)
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
   403b0:	e0bfff17 	ldw	r2,-4(fp)
   403b4:	e0bffe15 	stw	r2,-8(fp)
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	103fde1e 	bne	r2,zero,40338 <__alt_mem_descriptor_memory+0xdf000338>
         ++ip_mib.ipReasmFails;
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
   403c0:	00800174 	movhi	r2,5
   403c4:	108fbe04 	addi	r2,r2,16120
   403c8:	10800017 	ldw	r2,0(r2)
   403cc:	10801904 	addi	r2,r2,100
   403d0:	d0a8b515 	stw	r2,-23852(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
   403d4:	0009883a 	mov	r4,zero
   403d8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
   403dc:	0005883a 	mov	r2,zero
}
   403e0:	e037883a 	mov	sp,fp
   403e4:	dfc00117 	ldw	ra,4(sp)
   403e8:	df000017 	ldw	fp,0(sp)
   403ec:	dec00204 	addi	sp,sp,8
   403f0:	f800283a 	ret

000403f4 <ip_reasm_delete_ire>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
   403f4:	defff604 	addi	sp,sp,-40
   403f8:	dfc00915 	stw	ra,36(sp)
   403fc:	df000815 	stw	fp,32(sp)
   40400:	df000804 	addi	fp,sp,32
   40404:	e13fff15 	stw	r4,-4(fp)
   RFQP rfqp, first_rfqp, prev_rfqp;
   u_short i;
   PACKET p;
   IREP tmpp;
   IREP prev_tmpp = 0;
   40408:	e03ffb15 	stw	zero,-20(fp)

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   4040c:	d0a8b417 	ldw	r2,-23856(gp)
   40410:	e0bffa15 	stw	r2,-24(fp)
   40414:	00001406 	br	40468 <ip_reasm_delete_ire+0x74>
      {
      if (tmpp == irep) 
   40418:	e0fffa17 	ldw	r3,-24(fp)
   4041c:	e0bfff17 	ldw	r2,-4(fp)
   40420:	18800c1e 	bne	r3,r2,40454 <ip_reasm_delete_ire+0x60>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
   40424:	d0a8b417 	ldw	r2,-23856(gp)
   40428:	e0fffa17 	ldw	r3,-24(fp)
   4042c:	1880041e 	bne	r3,r2,40440 <ip_reasm_delete_ire+0x4c>
   40430:	e0bfff17 	ldw	r2,-4(fp)
   40434:	10800017 	ldw	r2,0(r2)
   40438:	d0a8b415 	stw	r2,-23856(gp)
         else prev_tmpp->next = irep->next;
         break;
   4043c:	00000c06 	br	40470 <ip_reasm_delete_ire+0x7c>
      {
      if (tmpp == irep) 
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
         else prev_tmpp->next = irep->next;
   40440:	e0bfff17 	ldw	r2,-4(fp)
   40444:	10c00017 	ldw	r3,0(r2)
   40448:	e0bffb17 	ldw	r2,-20(fp)
   4044c:	10c00015 	stw	r3,0(r2)
         break;
   40450:	00000706 	br	40470 <ip_reasm_delete_ire+0x7c>
         }
      prev_tmpp = tmpp;
   40454:	e0bffa17 	ldw	r2,-24(fp)
   40458:	e0bffb15 	stw	r2,-20(fp)
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   4045c:	e0bffa17 	ldw	r2,-24(fp)
   40460:	10800017 	ldw	r2,0(r2)
   40464:	e0bffa15 	stw	r2,-24(fp)
   40468:	e0bffa17 	ldw	r2,-24(fp)
   4046c:	103fea1e 	bne	r2,zero,40418 <__alt_mem_descriptor_memory+0xdf000418>
      prev_tmpp = tmpp;
      }

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
   40470:	e0bffa17 	ldw	r2,-24(fp)
   40474:	1000091e 	bne	r2,zero,4049c <ip_reasm_delete_ire+0xa8>
      {
      ++ire_stats.bad_irep;
   40478:	008001b4 	movhi	r2,6
   4047c:	10b9f504 	addi	r2,r2,-6188
   40480:	10800017 	ldw	r2,0(r2)
   40484:	10c00044 	addi	r3,r2,1
   40488:	008001b4 	movhi	r2,6
   4048c:	10b9f504 	addi	r2,r2,-6188
   40490:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
   40494:	00bffd84 	movi	r2,-10
   40498:	00003d06 	br	40590 <ip_reasm_delete_ire+0x19c>
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
   4049c:	e0bfff17 	ldw	r2,-4(fp)
   404a0:	10800604 	addi	r2,r2,24
   404a4:	e0bffc15 	stw	r2,-16(fp)
   404a8:	e0bffc17 	ldw	r2,-16(fp)
   404ac:	e0bff815 	stw	r2,-32(fp)

   while (rfqp)
   404b0:	00003006 	br	40574 <ip_reasm_delete_ire+0x180>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   404b4:	e03ff90d 	sth	zero,-28(fp)
   404b8:	00001f06 	br	40538 <ip_reasm_delete_ire+0x144>
         {
         if ((p = rfqp->bufp [i]) != 0)
   404bc:	e0bff90b 	ldhu	r2,-28(fp)
   404c0:	e0fff817 	ldw	r3,-32(fp)
   404c4:	10800044 	addi	r2,r2,1
   404c8:	1085883a 	add	r2,r2,r2
   404cc:	1085883a 	add	r2,r2,r2
   404d0:	1885883a 	add	r2,r3,r2
   404d4:	10800017 	ldw	r2,0(r2)
   404d8:	e0bffd15 	stw	r2,-12(fp)
   404dc:	e0bffd17 	ldw	r2,-12(fp)
   404e0:	10000c26 	beq	r2,zero,40514 <ip_reasm_delete_ire+0x120>
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
   404e4:	e0bffd17 	ldw	r2,-12(fp)
   404e8:	10800217 	ldw	r2,8(r2)
   404ec:	10bfffcc 	andi	r2,r2,65535
   404f0:	1009883a 	mov	r4,r2
   404f4:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
   404f8:	01000084 	movi	r4,2
   404fc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free (p);
   40500:	e13ffd17 	ldw	r4,-12(fp)
   40504:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
   40508:	01000084 	movi	r4,2
   4050c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   40510:	00000606 	br	4052c <ip_reasm_delete_ire+0x138>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
   40514:	e0bfff17 	ldw	r2,-4(fp)
   40518:	10802103 	ldbu	r2,132(r2)
   4051c:	10803fcc 	andi	r2,r2,255
   40520:	1080004c 	andi	r2,r2,1
   40524:	10000126 	beq	r2,zero,4052c <ip_reasm_delete_ire+0x138>
               {
               break;
   40528:	00000606 	br	40544 <ip_reasm_delete_ire+0x150>
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   4052c:	e0bff90b 	ldhu	r2,-28(fp)
   40530:	10800044 	addi	r2,r2,1
   40534:	e0bff90d 	sth	r2,-28(fp)
   40538:	e0bff90b 	ldhu	r2,-28(fp)
   4053c:	10800430 	cmpltui	r2,r2,16
   40540:	103fde1e 	bne	r2,zero,404bc <__alt_mem_descriptor_memory+0xdf0004bc>
               break;
               }
            }
          }

       prev_rfqp = rfqp;
   40544:	e0bff817 	ldw	r2,-32(fp)
   40548:	e0bffe15 	stw	r2,-8(fp)
       rfqp = rfqp->next;
   4054c:	e0bff817 	ldw	r2,-32(fp)
   40550:	10800017 	ldw	r2,0(r2)
   40554:	e0bff815 	stw	r2,-32(fp)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
   40558:	e0fffe17 	ldw	r3,-8(fp)
   4055c:	e0bffc17 	ldw	r2,-16(fp)
   40560:	18800426 	beq	r3,r2,40574 <ip_reasm_delete_ire+0x180>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
   40564:	01001904 	movi	r4,100
   40568:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
   4056c:	e13ffe17 	ldw	r4,-8(fp)
   40570:	002bd140 	call	2bd14 <npfree>

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
   40574:	e0bff817 	ldw	r2,-32(fp)
   40578:	103fce1e 	bne	r2,zero,404b4 <__alt_mem_descriptor_memory+0xdf0004b4>
          IPR_FREE (prev_rfqp);
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
   4057c:	01002204 	movi	r4,136
   40580:	003f1100 	call	3f110 <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
   40584:	e13fff17 	ldw	r4,-4(fp)
   40588:	002bd140 	call	2bd14 <npfree>

   return IPREASM_OK;
   4058c:	0005883a 	mov	r2,zero
}
   40590:	e037883a 	mov	sp,fp
   40594:	dfc00117 	ldw	ra,4(sp)
   40598:	df000017 	ldw	fp,0(sp)
   4059c:	dec00204 	addi	sp,sp,8
   405a0:	f800283a 	ret

000405a4 <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
   405a4:	defffb04 	addi	sp,sp,-20
   405a8:	dfc00415 	stw	ra,16(sp)
   405ac:	df000315 	stw	fp,12(sp)
   405b0:	df000304 	addi	fp,sp,12
   405b4:	e13fff15 	stw	r4,-4(fp)
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
   405b8:	e03ffe85 	stb	zero,-6(fp)
   u_char compact = IPREASM_TRUE;
   405bc:	00800044 	movi	r2,1
   405c0:	e0bffec5 	stb	r2,-5(fp)

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
   405c4:	e13fff17 	ldw	r4,-4(fp)
   405c8:	003ff740 	call	3ff74 <ip_reasm_find_ire>
   405cc:	10803fcc 	andi	r2,r2,255
   405d0:	10800060 	cmpeqi	r2,r2,1
   405d4:	1000091e 	bne	r2,zero,405fc <ip_reasm_mark_compact_rfq+0x58>
   {
      ++ire_stats.bad_irep;
   405d8:	008001b4 	movhi	r2,6
   405dc:	10b9f504 	addi	r2,r2,-6188
   405e0:	10800017 	ldw	r2,0(r2)
   405e4:	10c00044 	addi	r3,r2,1
   405e8:	008001b4 	movhi	r2,6
   405ec:	10b9f504 	addi	r2,r2,-6188
   405f0:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
   405f4:	00bffd84 	movi	r2,-10
   405f8:	00003106 	br	406c0 <ip_reasm_mark_compact_rfq+0x11c>
   }

   rfqp = &(irep->rfq);
   405fc:	e0bfff17 	ldw	r2,-4(fp)
   40600:	10800604 	addi	r2,r2,24
   40604:	e0bffd15 	stw	r2,-12(fp)

   while (rfqp)
   40608:	00001a06 	br	40674 <ip_reasm_mark_compact_rfq+0xd0>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   4060c:	e03ffe0d 	sth	zero,-8(fp)
   40610:	00001206 	br	4065c <ip_reasm_mark_compact_rfq+0xb8>
         {
         if (rfqp->bufp [i] == 0)
   40614:	e0bffe0b 	ldhu	r2,-8(fp)
   40618:	e0fffd17 	ldw	r3,-12(fp)
   4061c:	10800044 	addi	r2,r2,1
   40620:	1085883a 	add	r2,r2,r2
   40624:	1085883a 	add	r2,r2,r2
   40628:	1885883a 	add	r2,r3,r2
   4062c:	10800017 	ldw	r2,0(r2)
   40630:	1000031e 	bne	r2,zero,40640 <ip_reasm_mark_compact_rfq+0x9c>
            {            
            empty_slot_discovered = IPREASM_TRUE;
   40634:	00800044 	movi	r2,1
   40638:	e0bffe85 	stb	r2,-6(fp)
   4063c:	00000406 	br	40650 <ip_reasm_mark_compact_rfq+0xac>
            }
         else
            {
            if (empty_slot_discovered) 
   40640:	e0bffe83 	ldbu	r2,-6(fp)
   40644:	10000226 	beq	r2,zero,40650 <ip_reasm_mark_compact_rfq+0xac>
               {
               compact = IPREASM_FALSE;
   40648:	e03ffec5 	stb	zero,-5(fp)
               break;
   4064c:	00000606 	br	40668 <ip_reasm_mark_compact_rfq+0xc4>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
   40650:	e0bffe0b 	ldhu	r2,-8(fp)
   40654:	10800044 	addi	r2,r2,1
   40658:	e0bffe0d 	sth	r2,-8(fp)
   4065c:	e0bffe0b 	ldhu	r2,-8(fp)
   40660:	10800430 	cmpltui	r2,r2,16
   40664:	103feb1e 	bne	r2,zero,40614 <__alt_mem_descriptor_memory+0xdf000614>
               compact = IPREASM_FALSE;
               break;
               }
            }
          }
       rfqp = rfqp->next;
   40668:	e0bffd17 	ldw	r2,-12(fp)
   4066c:	10800017 	ldw	r2,0(r2)
   40670:	e0bffd15 	stw	r2,-12(fp)
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);

   while (rfqp)
   40674:	e0bffd17 	ldw	r2,-12(fp)
   40678:	103fe41e 	bne	r2,zero,4060c <__alt_mem_descriptor_memory+0xdf00060c>
            }
          }
       rfqp = rfqp->next;
      }

   if (compact) 
   4067c:	e0bffec3 	ldbu	r2,-5(fp)
   40680:	10000726 	beq	r2,zero,406a0 <ip_reasm_mark_compact_rfq+0xfc>
      {
      irep->flags |= IPR_RFQ_COMPACT;
   40684:	e0bfff17 	ldw	r2,-4(fp)
   40688:	10802103 	ldbu	r2,132(r2)
   4068c:	10800054 	ori	r2,r2,1
   40690:	1007883a 	mov	r3,r2
   40694:	e0bfff17 	ldw	r2,-4(fp)
   40698:	10c02105 	stb	r3,132(r2)
   4069c:	00000706 	br	406bc <ip_reasm_mark_compact_rfq+0x118>
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
   406a0:	e0bfff17 	ldw	r2,-4(fp)
   406a4:	10c02103 	ldbu	r3,132(r2)
   406a8:	00bfff84 	movi	r2,-2
   406ac:	1884703a 	and	r2,r3,r2
   406b0:	1007883a 	mov	r3,r2
   406b4:	e0bfff17 	ldw	r2,-4(fp)
   406b8:	10c02105 	stb	r3,132(r2)
      }

   return IPREASM_OK;
   406bc:	0005883a 	mov	r2,zero
}
   406c0:	e037883a 	mov	sp,fp
   406c4:	dfc00117 	ldw	ra,4(sp)
   406c8:	df000017 	ldw	fp,0(sp)
   406cc:	dec00204 	addi	sp,sp,8
   406d0:	f800283a 	ret

000406d4 <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
   406d4:	deffec04 	addi	sp,sp,-80
   406d8:	dfc01315 	stw	ra,76(sp)
   406dc:	df001215 	stw	fp,72(sp)
   406e0:	dc001115 	stw	r16,68(sp)
   406e4:	df001204 	addi	fp,sp,72
   406e8:	e13ffe15 	stw	r4,-8(fp)
   unsigned long ticks_elapsed = cticks;
   406ec:	00800174 	movhi	r2,5
   406f0:	108fbe04 	addi	r2,r2,16120
   406f4:	10800017 	ldw	r2,0(r2)
   406f8:	e0bffc15 	stw	r2,-16(fp)
   u_short size_ire = sizeof(IRE);
   406fc:	00802204 	movi	r2,136
   40700:	e0bffd0d 	sth	r2,-12(fp)
   u_short size_rfq = sizeof(RFQ);
   40704:	00801904 	movi	r2,100
   40708:	e0bffd8d 	sth	r2,-10(fp)
   IREP tmpp;
   u_short count = 0;
   4070c:	e03ff90d 	sth	zero,-28(fp)
   RFQP rfqp;
   u_short frag_count = 0;
   40710:	e03ffb0d 	sth	zero,-20(fp)
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
   40714:	e13ffe17 	ldw	r4,-8(fp)
   40718:	01400174 	movhi	r5,5
   4071c:	297cb004 	addi	r5,r5,-3392
   40720:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   40724:	d428b317 	ldw	r16,-23860(gp)
   40728:	e0bffc17 	ldw	r2,-16(fp)
   4072c:	1009883a 	mov	r4,r2
   40730:	01401904 	movi	r5,100
   40734:	00152500 	call	15250 <__udivsi3>
   40738:	1009883a 	mov	r4,r2
   4073c:	e0fffd0b 	ldhu	r3,-12(fp)
   40740:	e0bffd8b 	ldhu	r2,-10(fp)
   40744:	d9000015 	stw	r4,0(sp)
   40748:	d8c00115 	stw	r3,4(sp)
   4074c:	d8800215 	stw	r2,8(sp)
   40750:	e13ffe17 	ldw	r4,-8(fp)
   40754:	01400174 	movhi	r5,5
   40758:	297cb704 	addi	r5,r5,-3364
   4075c:	800d883a 	mov	r6,r16
   40760:	e1fffc17 	ldw	r7,-16(fp)
   40764:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
   40768:	008001b4 	movhi	r2,6
   4076c:	10b9f504 	addi	r2,r2,-6188
   40770:	11800117 	ldw	r6,4(r2)
   40774:	008001b4 	movhi	r2,6
   40778:	10b9f504 	addi	r2,r2,-6188
   4077c:	11c00017 	ldw	r7,0(r2)
   40780:	008001b4 	movhi	r2,6
   40784:	10b9f504 	addi	r2,r2,-6188
   40788:	11400217 	ldw	r5,8(r2)
   4078c:	008001b4 	movhi	r2,6
   40790:	10b9f504 	addi	r2,r2,-6188
   40794:	11000317 	ldw	r4,12(r2)
   40798:	008001b4 	movhi	r2,6
   4079c:	10b9f504 	addi	r2,r2,-6188
   407a0:	10c00417 	ldw	r3,16(r2)
   407a4:	008001b4 	movhi	r2,6
   407a8:	10b9f504 	addi	r2,r2,-6188
   407ac:	10800517 	ldw	r2,20(r2)
   407b0:	d9400015 	stw	r5,0(sp)
   407b4:	d9000115 	stw	r4,4(sp)
   407b8:	d8c00215 	stw	r3,8(sp)
   407bc:	d8800315 	stw	r2,12(sp)
   407c0:	e13ffe17 	ldw	r4,-8(fp)
   407c4:	01400174 	movhi	r5,5
   407c8:	297cc704 	addi	r5,r5,-3300
   407cc:	002694c0 	call	2694c <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   407d0:	d0a8b417 	ldw	r2,-23856(gp)
   407d4:	e13ffe17 	ldw	r4,-8(fp)
   407d8:	01400174 	movhi	r5,5
   407dc:	297cdc04 	addi	r5,r5,-3216
   407e0:	100d883a 	mov	r6,r2
   407e4:	002694c0 	call	2694c <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   407e8:	d0a8b417 	ldw	r2,-23856(gp)
   407ec:	e0bff815 	stw	r2,-32(fp)
   407f0:	00007b06 	br	409e0 <ipr_stats+0x30c>
      {
      ++count;
   407f4:	e0bff90b 	ldhu	r2,-28(fp)
   407f8:	10800044 	addi	r2,r2,1
   407fc:	e0bff90d 	sth	r2,-28(fp)
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
   40800:	e0bff817 	ldw	r2,-32(fp)
   40804:	10800604 	addi	r2,r2,24
   40808:	e0bffa15 	stw	r2,-24(fp)
      while (rfqp)
   4080c:	00001d06 	br	40884 <ipr_stats+0x1b0>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
   40810:	e03ffb8d 	sth	zero,-18(fp)
   40814:	00001506 	br	4086c <ipr_stats+0x198>
            {
            if (rfqp->bufp [i] != 0)
   40818:	e0bffb8b 	ldhu	r2,-18(fp)
   4081c:	e0fffa17 	ldw	r3,-24(fp)
   40820:	10800044 	addi	r2,r2,1
   40824:	1085883a 	add	r2,r2,r2
   40828:	1085883a 	add	r2,r2,r2
   4082c:	1885883a 	add	r2,r3,r2
   40830:	10800017 	ldw	r2,0(r2)
   40834:	10000426 	beq	r2,zero,40848 <ipr_stats+0x174>
               {
               ++frag_count;            
   40838:	e0bffb0b 	ldhu	r2,-20(fp)
   4083c:	10800044 	addi	r2,r2,1
   40840:	e0bffb0d 	sth	r2,-20(fp)
   40844:	00000606 	br	40860 <ipr_stats+0x18c>
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
   40848:	e0bff817 	ldw	r2,-32(fp)
   4084c:	10802103 	ldbu	r2,132(r2)
   40850:	10803fcc 	andi	r2,r2,255
   40854:	1080004c 	andi	r2,r2,1
   40858:	10000126 	beq	r2,zero,40860 <ipr_stats+0x18c>
                  {
                  break;
   4085c:	00000606 	br	40878 <ipr_stats+0x1a4>
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
   40860:	e0bffb8b 	ldhu	r2,-18(fp)
   40864:	10800044 	addi	r2,r2,1
   40868:	e0bffb8d 	sth	r2,-18(fp)
   4086c:	e0bffb8b 	ldhu	r2,-18(fp)
   40870:	10800430 	cmpltui	r2,r2,16
   40874:	103fe81e 	bne	r2,zero,40818 <__alt_mem_descriptor_memory+0xdf000818>
                  {
                  break;
                  }
               }
            }
         rfqp = rfqp->next;
   40878:	e0bffa17 	ldw	r2,-24(fp)
   4087c:	10800017 	ldw	r2,0(r2)
   40880:	e0bffa15 	stw	r2,-24(fp)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
   40884:	e0bffa17 	ldw	r2,-24(fp)
   40888:	103fe11e 	bne	r2,zero,40810 <__alt_mem_descriptor_memory+0xdf000810>
                  }
               }
            }
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
   4088c:	e33ffb0b 	ldhu	r12,-20(fp)
   40890:	e0bff817 	ldw	r2,-32(fp)
   40894:	10800117 	ldw	r2,4(r2)
   40898:	1006d63a 	srli	r3,r2,24
   4089c:	e0bff817 	ldw	r2,-32(fp)
   408a0:	10800117 	ldw	r2,4(r2)
   408a4:	1004d23a 	srli	r2,r2,8
   408a8:	10bfc00c 	andi	r2,r2,65280
   408ac:	1886b03a 	or	r3,r3,r2
   408b0:	e0bff817 	ldw	r2,-32(fp)
   408b4:	10800117 	ldw	r2,4(r2)
   408b8:	10bfc00c 	andi	r2,r2,65280
   408bc:	1004923a 	slli	r2,r2,8
   408c0:	1886b03a 	or	r3,r3,r2
   408c4:	e0bff817 	ldw	r2,-32(fp)
   408c8:	10800117 	ldw	r2,4(r2)
   408cc:	1004963a 	slli	r2,r2,24
   408d0:	1896b03a 	or	r11,r3,r2
   408d4:	e0bff817 	ldw	r2,-32(fp)
   408d8:	10800217 	ldw	r2,8(r2)
   408dc:	1006d63a 	srli	r3,r2,24
   408e0:	e0bff817 	ldw	r2,-32(fp)
   408e4:	10800217 	ldw	r2,8(r2)
   408e8:	1004d23a 	srli	r2,r2,8
   408ec:	10bfc00c 	andi	r2,r2,65280
   408f0:	1886b03a 	or	r3,r3,r2
   408f4:	e0bff817 	ldw	r2,-32(fp)
   408f8:	10800217 	ldw	r2,8(r2)
   408fc:	10bfc00c 	andi	r2,r2,65280
   40900:	1004923a 	slli	r2,r2,8
   40904:	1886b03a 	or	r3,r3,r2
   40908:	e0bff817 	ldw	r2,-32(fp)
   4090c:	10800217 	ldw	r2,8(r2)
   40910:	1004963a 	slli	r2,r2,24
   40914:	1894b03a 	or	r10,r3,r2
   40918:	e0bff817 	ldw	r2,-32(fp)
   4091c:	10800383 	ldbu	r2,14(r2)
   40920:	12403fcc 	andi	r9,r2,255
   40924:	e0bff817 	ldw	r2,-32(fp)
   40928:	1080030b 	ldhu	r2,12(r2)
   4092c:	10bfffcc 	andi	r2,r2,65535
   40930:	1004d23a 	srli	r2,r2,8
   40934:	10bfffcc 	andi	r2,r2,65535
   40938:	10c03fcc 	andi	r3,r2,255
   4093c:	e0bff817 	ldw	r2,-32(fp)
   40940:	1080030b 	ldhu	r2,12(r2)
   40944:	10bfffcc 	andi	r2,r2,65535
   40948:	1004923a 	slli	r2,r2,8
   4094c:	10bfffcc 	andi	r2,r2,65535
   40950:	1890b03a 	or	r8,r3,r2
   40954:	e0bff817 	ldw	r2,-32(fp)
   40958:	1080040b 	ldhu	r2,16(r2)
   4095c:	11ffffcc 	andi	r7,r2,65535
   40960:	e0bff817 	ldw	r2,-32(fp)
   40964:	1080048b 	ldhu	r2,18(r2)
   40968:	11bfffcc 	andi	r6,r2,65535
   4096c:	e0bff817 	ldw	r2,-32(fp)
   40970:	11400517 	ldw	r5,20(r2)
   40974:	e0bff817 	ldw	r2,-32(fp)
   40978:	11001f17 	ldw	r4,124(r2)
   4097c:	e0bff817 	ldw	r2,-32(fp)
   40980:	10c02017 	ldw	r3,128(r2)
   40984:	e0bff817 	ldw	r2,-32(fp)
   40988:	10802103 	ldbu	r2,132(r2)
   4098c:	10803fcc 	andi	r2,r2,255
   40990:	1080004c 	andi	r2,r2,1
   40994:	dac00015 	stw	r11,0(sp)
   40998:	da800115 	stw	r10,4(sp)
   4099c:	da400215 	stw	r9,8(sp)
   409a0:	da000315 	stw	r8,12(sp)
   409a4:	d9c00415 	stw	r7,16(sp)
   409a8:	d9800515 	stw	r6,20(sp)
   409ac:	d9400615 	stw	r5,24(sp)
   409b0:	d9000715 	stw	r4,28(sp)
   409b4:	d8c00815 	stw	r3,32(sp)
   409b8:	d8800915 	stw	r2,36(sp)
   409bc:	e13ffe17 	ldw	r4,-8(fp)
   409c0:	01400174 	movhi	r5,5
   409c4:	297ce204 	addi	r5,r5,-3192
   409c8:	e1bff817 	ldw	r6,-32(fp)
   409cc:	600f883a 	mov	r7,r12
   409d0:	002694c0 	call	2694c <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
   409d4:	e0bff817 	ldw	r2,-32(fp)
   409d8:	10800017 	ldw	r2,0(r2)
   409dc:	e0bff815 	stw	r2,-32(fp)
   409e0:	e0bff817 	ldw	r2,-32(fp)
   409e4:	103f831e 	bne	r2,zero,407f4 <__alt_mem_descriptor_memory+0xdf0007f4>
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
   409e8:	e0bff90b 	ldhu	r2,-28(fp)
   409ec:	e13ffe17 	ldw	r4,-8(fp)
   409f0:	01400174 	movhi	r5,5
   409f4:	297cfd04 	addi	r5,r5,-3084
   409f8:	100d883a 	mov	r6,r2
   409fc:	002694c0 	call	2694c <ns_printf>

   return IPREASM_OK;
   40a00:	0005883a 	mov	r2,zero
}
   40a04:	e6ffff04 	addi	sp,fp,-4
   40a08:	dfc00217 	ldw	ra,8(sp)
   40a0c:	df000117 	ldw	fp,4(sp)
   40a10:	dc000017 	ldw	r16,0(sp)
   40a14:	dec00304 	addi	sp,sp,12
   40a18:	f800283a 	ret

00040a1c <ip_reasm_send_icmp_timex>:
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
   40a1c:	defffc04 	addi	sp,sp,-16
   40a20:	dfc00315 	stw	ra,12(sp)
   40a24:	df000215 	stw	fp,8(sp)
   40a28:	df000204 	addi	fp,sp,8
   40a2c:	e13fff15 	stw	r4,-4(fp)

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
   40a30:	e0bfff17 	ldw	r2,-4(fp)
   40a34:	10801f17 	ldw	r2,124(r2)
   40a38:	10000626 	beq	r2,zero,40a54 <ip_reasm_send_icmp_timex+0x38>
      {
      pip = (struct ip *) irep->l3_hdr;
   40a3c:	e0bfff17 	ldw	r2,-4(fp)
   40a40:	10802017 	ldw	r2,128(r2)
   40a44:	e0bffe15 	stw	r2,-8(fp)
      icmp_timex (pip, TIMEX_REASSY_FAILED);
   40a48:	e13ffe17 	ldw	r4,-8(fp)
   40a4c:	01400044 	movi	r5,1
   40a50:	00492e80 	call	492e8 <icmp_timex>
      }

   return IPREASM_OK;
   40a54:	0005883a 	mov	r2,zero
}
   40a58:	e037883a 	mov	sp,fp
   40a5c:	dfc00117 	ldw	ra,4(sp)
   40a60:	df000017 	ldw	fp,0(sp)
   40a64:	dec00204 	addi	sp,sp,8
   40a68:	f800283a 	ret

00040a6c <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
   40a6c:	defff404 	addi	sp,sp,-48
   40a70:	dfc00b15 	stw	ra,44(sp)
   40a74:	df000a15 	stw	fp,40(sp)
   40a78:	dc000915 	stw	r16,36(sp)
   40a7c:	df000a04 	addi	fp,sp,40
   40a80:	e13ffe15 	stw	r4,-8(fp)
   unsigned hdrlen;  /* length of IP header including options */
   unsigned len;     /* total length including IP header */
   unsigned short int num_pkts;
   PACKET * pktp;
   unsigned char i;
   int rcvrc = -1;
   40a84:	00bfffc4 	movi	r2,-1
   40a88:	e0bff715 	stw	r2,-36(fp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   40a8c:	00800174 	movhi	r2,5
   40a90:	108f9904 	addi	r2,r2,15972
   40a94:	10800017 	ldw	r2,0(r2)
   40a98:	1081000c 	andi	r2,r2,1024
   40a9c:	10001026 	beq	r2,zero,40ae0 <ip_rcv+0x74>
   40aa0:	00800174 	movhi	r2,5
   40aa4:	108f9904 	addi	r2,r2,15972
   40aa8:	10800017 	ldw	r2,0(r2)
   40aac:	1080800c 	andi	r2,r2,512
   40ab0:	10000b26 	beq	r2,zero,40ae0 <ip_rcv+0x74>
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
         p->nb_plen, net_num(p->net));
   40ab4:	e0bffe17 	ldw	r2,-8(fp)
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
   40ab8:	14000417 	ldw	r16,16(r2)
         p->nb_plen, net_num(p->net));
   40abc:	e0bffe17 	ldw	r2,-8(fp)
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
   40ac0:	10800617 	ldw	r2,24(r2)
   40ac4:	1009883a 	mov	r4,r2
   40ac8:	00248000 	call	24800 <if_netnumber>
   40acc:	01000174 	movhi	r4,5
   40ad0:	213d0604 	addi	r4,r4,-3048
   40ad4:	800b883a 	mov	r5,r16
   40ad8:	100d883a 	mov	r6,r2
   40adc:	00080f80 	call	80f8 <printf>
         p->nb_plen, net_num(p->net));
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   ip_mib.ipInReceives++;
   40ae0:	008001b4 	movhi	r2,6
   40ae4:	10b9e104 	addi	r2,r2,-6268
   40ae8:	10800217 	ldw	r2,8(r2)
   40aec:	10c00044 	addi	r3,r2,1
   40af0:	008001b4 	movhi	r2,6
   40af4:	10b9e104 	addi	r2,r2,-6268
   40af8:	10c00215 	stw	r3,8(r2)
   pip = ip_head(p);
   40afc:	e0bffe17 	ldw	r2,-8(fp)
   40b00:	10800317 	ldw	r2,12(r2)
   40b04:	e0bff815 	stw	r2,-32(fp)

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
   40b08:	e0bffe17 	ldw	r2,-8(fp)
   40b0c:	10800417 	ldw	r2,16(r2)
   40b10:	e0fff817 	ldw	r3,-32(fp)
   40b14:	18c0008b 	ldhu	r3,2(r3)
   40b18:	18ffffcc 	andi	r3,r3,65535
   40b1c:	1806d23a 	srli	r3,r3,8
   40b20:	18ffffcc 	andi	r3,r3,65535
   40b24:	19003fcc 	andi	r4,r3,255
   40b28:	e0fff817 	ldw	r3,-32(fp)
   40b2c:	18c0008b 	ldhu	r3,2(r3)
   40b30:	18ffffcc 	andi	r3,r3,65535
   40b34:	1806923a 	slli	r3,r3,8
   40b38:	18ffffcc 	andi	r3,r3,65535
   40b3c:	20c6b03a 	or	r3,r4,r3
   40b40:	10c0252e 	bgeu	r2,r3,40bd8 <ip_rcv+0x16c>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   40b44:	00800174 	movhi	r2,5
   40b48:	108f9904 	addi	r2,r2,15972
   40b4c:	10800017 	ldw	r2,0(r2)
   40b50:	1081000c 	andi	r2,r2,1024
   40b54:	10001026 	beq	r2,zero,40b98 <ip_rcv+0x12c>
   40b58:	00800174 	movhi	r2,5
   40b5c:	108f9904 	addi	r2,r2,15972
   40b60:	10800017 	ldw	r2,0(r2)
   40b64:	1080800c 	andi	r2,r2,512
   40b68:	10000b26 	beq	r2,zero,40b98 <ip_rcv+0x12c>
      {
         dprintf("ip_rcv: bad pkt len\n");
   40b6c:	01000174 	movhi	r4,5
   40b70:	213d0f04 	addi	r4,r4,-3012
   40b74:	00083740 	call	8374 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
   40b78:	00800174 	movhi	r2,5
   40b7c:	108f9904 	addi	r2,r2,15972
   40b80:	10800017 	ldw	r2,0(r2)
   40b84:	1080008c 	andi	r2,r2,2
   40b88:	10000326 	beq	r2,zero,40b98 <ip_rcv+0x12c>
   40b8c:	e0bffe17 	ldw	r2,-8(fp)
   40b90:	1009883a 	mov	r4,r2
   40b94:	003e8680 	call	3e868 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
   40b98:	008001b4 	movhi	r2,6
   40b9c:	10b9e104 	addi	r2,r2,-6268
   40ba0:	10800317 	ldw	r2,12(r2)
   40ba4:	10c00044 	addi	r3,r2,1
   40ba8:	008001b4 	movhi	r2,6
   40bac:	10b9e104 	addi	r2,r2,-6268
   40bb0:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   40bb4:	01000084 	movi	r4,2
   40bb8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   40bbc:	e0bffe17 	ldw	r2,-8(fp)
   40bc0:	1009883a 	mov	r4,r2
   40bc4:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   40bc8:	01000084 	movi	r4,2
   40bcc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   40bd0:	00bff804 	movi	r2,-32
   40bd4:	00009506 	br	40e2c <ip_rcv+0x3c0>
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
   40bd8:	e0bff817 	ldw	r2,-32(fp)
   40bdc:	1080008b 	ldhu	r2,2(r2)
   40be0:	10bfffcc 	andi	r2,r2,65535
   40be4:	1004d23a 	srli	r2,r2,8
   40be8:	10bfffcc 	andi	r2,r2,65535
   40bec:	10c03fcc 	andi	r3,r2,255
   40bf0:	e0bff817 	ldw	r2,-32(fp)
   40bf4:	1080008b 	ldhu	r2,2(r2)
   40bf8:	10bfffcc 	andi	r2,r2,65535
   40bfc:	1004923a 	slli	r2,r2,8
   40c00:	10bfffcc 	andi	r2,r2,65535
   40c04:	1884b03a 	or	r2,r3,r2
   40c08:	e0bff915 	stw	r2,-28(fp)
   p->nb_plen = len;       /* fix pkt len */
   40c0c:	e0bffe17 	ldw	r2,-8(fp)
   40c10:	e0fff917 	ldw	r3,-28(fp)
   40c14:	10c00415 	stw	r3,16(r2)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
   40c18:	e0bff817 	ldw	r2,-32(fp)
   40c1c:	10800003 	ldbu	r2,0(r2)
   40c20:	10803fcc 	andi	r2,r2,255
   40c24:	1004d13a 	srli	r2,r2,4
   40c28:	10803fcc 	andi	r2,r2,255
   40c2c:	10800120 	cmpeqi	r2,r2,4
   40c30:	1000251e 	bne	r2,zero,40cc8 <ip_rcv+0x25c>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   40c34:	00800174 	movhi	r2,5
   40c38:	108f9904 	addi	r2,r2,15972
   40c3c:	10800017 	ldw	r2,0(r2)
   40c40:	1081000c 	andi	r2,r2,1024
   40c44:	10001026 	beq	r2,zero,40c88 <ip_rcv+0x21c>
   40c48:	00800174 	movhi	r2,5
   40c4c:	108f9904 	addi	r2,r2,15972
   40c50:	10800017 	ldw	r2,0(r2)
   40c54:	1080800c 	andi	r2,r2,512
   40c58:	10000b26 	beq	r2,zero,40c88 <ip_rcv+0x21c>
      {
         dprintf("ip_rcv: bad version number\n");
   40c5c:	01000174 	movhi	r4,5
   40c60:	213d1404 	addi	r4,r4,-2992
   40c64:	00083740 	call	8374 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
   40c68:	00800174 	movhi	r2,5
   40c6c:	108f9904 	addi	r2,r2,15972
   40c70:	10800017 	ldw	r2,0(r2)
   40c74:	1080008c 	andi	r2,r2,2
   40c78:	10000326 	beq	r2,zero,40c88 <ip_rcv+0x21c>
   40c7c:	e0bffe17 	ldw	r2,-8(fp)
   40c80:	1009883a 	mov	r4,r2
   40c84:	003e8680 	call	3e868 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
   40c88:	008001b4 	movhi	r2,6
   40c8c:	10b9e104 	addi	r2,r2,-6268
   40c90:	10800317 	ldw	r2,12(r2)
   40c94:	10c00044 	addi	r3,r2,1
   40c98:	008001b4 	movhi	r2,6
   40c9c:	10b9e104 	addi	r2,r2,-6268
   40ca0:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   40ca4:	01000084 	movi	r4,2
   40ca8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   40cac:	e0bffe17 	ldw	r2,-8(fp)
   40cb0:	1009883a 	mov	r4,r2
   40cb4:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   40cb8:	01000084 	movi	r4,2
   40cbc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   40cc0:	00bff804 	movi	r2,-32
   40cc4:	00005906 	br	40e2c <ip_rcv+0x3c0>
   }

   csum = pip->ip_chksum;
   40cc8:	e0bff817 	ldw	r2,-32(fp)
   40ccc:	1080028b 	ldhu	r2,10(r2)
   40cd0:	e0bffa0d 	sth	r2,-24(fp)
   pip->ip_chksum = 0;
   40cd4:	e0bff817 	ldw	r2,-32(fp)
   40cd8:	1000028d 	sth	zero,10(r2)
   hdrlen = ip_hlen(pip);
   40cdc:	e0bff817 	ldw	r2,-32(fp)
   40ce0:	10800003 	ldbu	r2,0(r2)
   40ce4:	10803fcc 	andi	r2,r2,255
   40ce8:	108003cc 	andi	r2,r2,15
   40cec:	1085883a 	add	r2,r2,r2
   40cf0:	1085883a 	add	r2,r2,r2
   40cf4:	e0bffb15 	stw	r2,-20(fp)
   tempsum = ~cksum(pip, hdrlen >> 1);
   40cf8:	e0bffb17 	ldw	r2,-20(fp)
   40cfc:	1004d07a 	srli	r2,r2,1
   40d00:	e13ff817 	ldw	r4,-32(fp)
   40d04:	100b883a 	mov	r5,r2
   40d08:	00263480 	call	26348 <cksum>
   40d0c:	0084303a 	nor	r2,zero,r2
   40d10:	e0bffc0d 	sth	r2,-16(fp)

   if (csum != tempsum)
   40d14:	e0fffa0b 	ldhu	r3,-24(fp)
   40d18:	e0bffc0b 	ldhu	r2,-16(fp)
   40d1c:	18802826 	beq	r3,r2,40dc0 <ip_rcv+0x354>
   {
      pip->ip_chksum = csum;
   40d20:	e0bff817 	ldw	r2,-32(fp)
   40d24:	e0fffa0b 	ldhu	r3,-24(fp)
   40d28:	10c0028d 	sth	r3,10(r2)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   40d2c:	00800174 	movhi	r2,5
   40d30:	108f9904 	addi	r2,r2,15972
   40d34:	10800017 	ldw	r2,0(r2)
   40d38:	1081000c 	andi	r2,r2,1024
   40d3c:	10001026 	beq	r2,zero,40d80 <ip_rcv+0x314>
   40d40:	00800174 	movhi	r2,5
   40d44:	108f9904 	addi	r2,r2,15972
   40d48:	10800017 	ldw	r2,0(r2)
   40d4c:	1080800c 	andi	r2,r2,512
   40d50:	10000b26 	beq	r2,zero,40d80 <ip_rcv+0x314>
      {
         dprintf("ip_rcv: bad xsum\n");
   40d54:	01000174 	movhi	r4,5
   40d58:	213d1b04 	addi	r4,r4,-2964
   40d5c:	00083740 	call	8374 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
   40d60:	00800174 	movhi	r2,5
   40d64:	108f9904 	addi	r2,r2,15972
   40d68:	10800017 	ldw	r2,0(r2)
   40d6c:	1080008c 	andi	r2,r2,2
   40d70:	10000326 	beq	r2,zero,40d80 <ip_rcv+0x314>
   40d74:	e0bffe17 	ldw	r2,-8(fp)
   40d78:	1009883a 	mov	r4,r2
   40d7c:	003e8680 	call	3e868 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
   40d80:	008001b4 	movhi	r2,6
   40d84:	10b9e104 	addi	r2,r2,-6268
   40d88:	10800317 	ldw	r2,12(r2)
   40d8c:	10c00044 	addi	r3,r2,1
   40d90:	008001b4 	movhi	r2,6
   40d94:	10b9e104 	addi	r2,r2,-6268
   40d98:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   40d9c:	01000084 	movi	r4,2
   40da0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   40da4:	e0bffe17 	ldw	r2,-8(fp)
   40da8:	1009883a 	mov	r4,r2
   40dac:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   40db0:	01000084 	movi	r4,2
   40db4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   40db8:	00bff804 	movi	r2,-32
   40dbc:	00001b06 	br	40e2c <ip_rcv+0x3c0>
   }

   pip->ip_chksum = csum;
   40dc0:	e0bff817 	ldw	r2,-32(fp)
   40dc4:	e0fffa0b 	ldhu	r3,-24(fp)
   40dc8:	10c0028d 	sth	r3,10(r2)
#endif

    /* start off by assuming that we will only process the "current" packet;
     * these values may get overwritten by the NAT module if it returns
     * more than one packet back to this function (ip_rcv ()) */
    num_pkts = 1;
   40dcc:	00800044 	movi	r2,1
   40dd0:	e0bffc8d 	sth	r2,-14(fp)
    pktp = &p;
   40dd4:	e0bffe04 	addi	r2,fp,-8
   40dd8:	e0bffd15 	stw	r2,-12(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
   40ddc:	e03ff605 	stb	zero,-40(fp)
   40de0:	00000d06 	br	40e18 <ip_rcv+0x3ac>
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
   40de4:	e0bff603 	ldbu	r2,-40(fp)
   40de8:	1085883a 	add	r2,r2,r2
   40dec:	1085883a 	add	r2,r2,r2
   40df0:	1007883a 	mov	r3,r2
   40df4:	e0bffd17 	ldw	r2,-12(fp)
   40df8:	10c5883a 	add	r2,r2,r3
   40dfc:	10800017 	ldw	r2,0(r2)
   40e00:	1009883a 	mov	r4,r2
   40e04:	0040e440 	call	40e44 <ip_rcv_phase2>
   40e08:	e0bff715 	stw	r2,-36(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
   40e0c:	e0bff603 	ldbu	r2,-40(fp)
   40e10:	10800044 	addi	r2,r2,1
   40e14:	e0bff605 	stb	r2,-40(fp)
   40e18:	e0bff603 	ldbu	r2,-40(fp)
   40e1c:	10ffffcc 	andi	r3,r2,65535
   40e20:	e0bffc8b 	ldhu	r2,-14(fp)
   40e24:	18bfef36 	bltu	r3,r2,40de4 <__alt_mem_descriptor_memory+0xdf000de4>
   if (pktp != &p) nat_free (pktp);
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
   40e28:	e0bff717 	ldw	r2,-36(fp)
}
   40e2c:	e6ffff04 	addi	sp,fp,-4
   40e30:	dfc00217 	ldw	ra,8(sp)
   40e34:	df000117 	ldw	fp,4(sp)
   40e38:	dc000017 	ldw	r16,0(sp)
   40e3c:	dec00304 	addi	sp,sp,12
   40e40:	f800283a 	ret

00040e44 <ip_rcv_phase2>:


int ip_rcv_phase2 (PACKET p)
{
   40e44:	defff504 	addi	sp,sp,-44
   40e48:	dfc00a15 	stw	ra,40(sp)
   40e4c:	df000915 	stw	fp,36(sp)
   40e50:	df000904 	addi	fp,sp,36
   40e54:	e13fff15 	stw	r4,-4(fp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
   40e58:	e0bfff17 	ldw	r2,-4(fp)
   40e5c:	10800317 	ldw	r2,12(r2)
   40e60:	e0bff815 	stw	r2,-32(fp)
   nt = p->net;      /* which interface it came in on */
   40e64:	e0bfff17 	ldw	r2,-4(fp)
   40e68:	10800617 	ldw	r2,24(r2)
   40e6c:	e0bff915 	stw	r2,-28(fp)

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
   40e70:	e0bff817 	ldw	r2,-32(fp)
   40e74:	10800417 	ldw	r2,16(r2)
   40e78:	1006d63a 	srli	r3,r2,24
   40e7c:	e0bff817 	ldw	r2,-32(fp)
   40e80:	10800417 	ldw	r2,16(r2)
   40e84:	1004d23a 	srli	r2,r2,8
   40e88:	10bfc00c 	andi	r2,r2,65280
   40e8c:	1886b03a 	or	r3,r3,r2
   40e90:	e0bff817 	ldw	r2,-32(fp)
   40e94:	10800417 	ldw	r2,16(r2)
   40e98:	10bfc00c 	andi	r2,r2,65280
   40e9c:	1004923a 	slli	r2,r2,8
   40ea0:	1886b03a 	or	r3,r3,r2
   40ea4:	e0bff817 	ldw	r2,-32(fp)
   40ea8:	10800417 	ldw	r2,16(r2)
   40eac:	1004963a 	slli	r2,r2,24
   40eb0:	1884b03a 	or	r2,r3,r2
   40eb4:	10fc002c 	andhi	r3,r2,61440
   40eb8:	00b80034 	movhi	r2,57344
   40ebc:	1880181e 	bne	r3,r2,40f20 <ip_rcv_phase2+0xdc>
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
   40ec0:	e0bff817 	ldw	r2,-32(fp)
   40ec4:	10800417 	ldw	r2,16(r2)
   40ec8:	1009883a 	mov	r4,r2
   40ecc:	e17ff917 	ldw	r5,-28(fp)
   40ed0:	0041a5c0 	call	41a5c <lookup_mcast>
   40ed4:	e0bffa15 	stw	r2,-24(fp)
      if (inm == NULL) 
   40ed8:	e0bffa17 	ldw	r2,-24(fp)
   40edc:	10000f1e 	bne	r2,zero,40f1c <ip_rcv_phase2+0xd8>
      {
         ip_mib.ipOutNoRoutes++;
   40ee0:	008001b4 	movhi	r2,6
   40ee4:	10b9e104 	addi	r2,r2,-6268
   40ee8:	10800b17 	ldw	r2,44(r2)
   40eec:	10c00044 	addi	r3,r2,1
   40ef0:	008001b4 	movhi	r2,6
   40ef4:	10b9e104 	addi	r2,r2,-6268
   40ef8:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
   40efc:	01000084 	movi	r4,2
   40f00:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   40f04:	e13fff17 	ldw	r4,-4(fp)
   40f08:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   40f0c:	01000084 	movi	r4,2
   40f10:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NOT_MINE);
   40f14:	00800084 	movi	r2,2
   40f18:	00013906 	br	41400 <ip_rcv_phase2+0x5bc>
      }
      else
         goto ours;
   40f1c:	0000fa06 	br	41308 <ip_rcv_phase2+0x4c4>
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
   40f20:	e0bff817 	ldw	r2,-32(fp)
   40f24:	10c00417 	ldw	r3,16(r2)
   40f28:	e0bff917 	ldw	r2,-28(fp)
   40f2c:	10800a17 	ldw	r2,40(r2)
   40f30:	1880f526 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
   40f34:	e0bff817 	ldw	r2,-32(fp)
   40f38:	10800417 	ldw	r2,16(r2)
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
   40f3c:	10bfffe0 	cmpeqi	r2,r2,-1
   40f40:	1000f11e 	bne	r2,zero,41308 <ip_rcv_phase2+0x4c4>
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
   40f44:	e0bff817 	ldw	r2,-32(fp)
   40f48:	10c00417 	ldw	r3,16(r2)
   40f4c:	e0bff917 	ldw	r2,-28(fp)
   40f50:	10800e17 	ldw	r2,56(r2)
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
   40f54:	1880ec26 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
   40f58:	e0bff817 	ldw	r2,-32(fp)
   40f5c:	10c00417 	ldw	r3,16(r2)
   40f60:	e0bff917 	ldw	r2,-28(fp)
   40f64:	10800f17 	ldw	r2,60(r2)
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
   40f68:	1880e726 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
   40f6c:	e0bff817 	ldw	r2,-32(fp)
   40f70:	10c00417 	ldw	r3,16(r2)
   40f74:	e0bff917 	ldw	r2,-28(fp)
   40f78:	10801017 	ldw	r2,64(r2)
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
   40f7c:	1880e226 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   40f80:	e0bff917 	ldw	r2,-28(fp)
   40f84:	10c00a17 	ldw	r3,40(r2)
   40f88:	e0bff917 	ldw	r2,-28(fp)
   40f8c:	10800c17 	ldw	r2,48(r2)
   40f90:	0084303a 	nor	r2,zero,r2
   40f94:	1884703a 	and	r2,r3,r2

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
       (pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
       (pip->ip_dest != nt->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
   40f98:	1000db26 	beq	r2,zero,41308 <ip_rcv_phase2+0x4c4>
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   40f9c:	00800174 	movhi	r2,5
   40fa0:	108f9904 	addi	r2,r2,15972
   40fa4:	10800017 	ldw	r2,0(r2)
   40fa8:	1081000c 	andi	r2,r2,1024
   40fac:	10001826 	beq	r2,zero,41010 <ip_rcv_phase2+0x1cc>
   40fb0:	00800174 	movhi	r2,5
   40fb4:	108f9904 	addi	r2,r2,15972
   40fb8:	10800017 	ldw	r2,0(r2)
   40fbc:	1080800c 	andi	r2,r2,512
   40fc0:	10001326 	beq	r2,zero,41010 <ip_rcv_phase2+0x1cc>
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
       PUSH_IPADDR(pip->ip_dest));
   40fc4:	e0bff817 	ldw	r2,-32(fp)
   40fc8:	10800417 	ldw	r2,16(r2)
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
   40fcc:	11403fcc 	andi	r5,r2,255
       PUSH_IPADDR(pip->ip_dest));
   40fd0:	e0bff817 	ldw	r2,-32(fp)
   40fd4:	10800417 	ldw	r2,16(r2)
   40fd8:	1004d23a 	srli	r2,r2,8
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
   40fdc:	11803fcc 	andi	r6,r2,255
       PUSH_IPADDR(pip->ip_dest));
   40fe0:	e0bff817 	ldw	r2,-32(fp)
   40fe4:	10800417 	ldw	r2,16(r2)
   40fe8:	1004d43a 	srli	r2,r2,16
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
   40fec:	10c03fcc 	andi	r3,r2,255
       PUSH_IPADDR(pip->ip_dest));
   40ff0:	e0bff817 	ldw	r2,-32(fp)
   40ff4:	10800417 	ldw	r2,16(r2)
   40ff8:	1004d63a 	srli	r2,r2,24
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
   40ffc:	d8800015 	stw	r2,0(sp)
   41000:	01000174 	movhi	r4,5
   41004:	213d2004 	addi	r4,r4,-2944
   41008:	180f883a 	mov	r7,r3
   4100c:	00080f80 	call	80f8 <printf>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
   41010:	008001b4 	movhi	r2,6
   41014:	10b9e104 	addi	r2,r2,-6268
   41018:	10800017 	ldw	r2,0(r2)
   4101c:	10800098 	cmpnei	r2,r2,2
   41020:	10000f1e 	bne	r2,zero,41060 <ip_rcv_phase2+0x21c>
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
   41024:	008001b4 	movhi	r2,6
   41028:	10b9e104 	addi	r2,r2,-6268
   4102c:	10800a17 	ldw	r2,40(r2)
   41030:	10c00044 	addi	r3,r2,1
   41034:	008001b4 	movhi	r2,6
   41038:	10b9e104 	addi	r2,r2,-6268
   4103c:	10c00a15 	stw	r3,40(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
   41040:	01000084 	movi	r4,2
   41044:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
         pk_free(p);
   41048:	e13fff17 	ldw	r4,-4(fp)
   4104c:	002a8940 	call	2a894 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
   41050:	01000084 	movi	r4,2
   41054:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_NO_ROUTE;
   41058:	00bff7c4 	movi	r2,-33
   4105c:	0000e806 	br	41400 <ip_rcv_phase2+0x5bc>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
   41060:	008001b4 	movhi	r2,6
   41064:	10b9e104 	addi	r2,r2,-6268
   41068:	10800517 	ldw	r2,20(r2)
   4106c:	10c00044 	addi	r3,r2,1
   41070:	008001b4 	movhi	r2,6
   41074:	10b9e104 	addi	r2,r2,-6268
   41078:	10c00515 	stw	r3,20(r2)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
   4107c:	e0bff817 	ldw	r2,-32(fp)
   41080:	10800203 	ldbu	r2,8(r2)
   41084:	10803fcc 	andi	r2,r2,255
   41088:	108000a8 	cmpgeui	r2,r2,2
   4108c:	10001b1e 	bne	r2,zero,410fc <ip_rcv_phase2+0x2b8>
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
   41090:	008001b4 	movhi	r2,6
   41094:	10b9e104 	addi	r2,r2,-6268
   41098:	10800a17 	ldw	r2,40(r2)
   4109c:	10c00044 	addi	r3,r2,1
   410a0:	008001b4 	movhi	r2,6
   410a4:	10b9e104 	addi	r2,r2,-6268
   410a8:	10c00a15 	stw	r3,40(r2)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
   410ac:	e0bff817 	ldw	r2,-32(fp)
   410b0:	11000317 	ldw	r4,12(r2)
   410b4:	e0bfff17 	ldw	r2,-4(fp)
   410b8:	10800617 	ldw	r2,24(r2)
   410bc:	10c00a17 	ldw	r3,40(r2)
   410c0:	e0bfff17 	ldw	r2,-4(fp)
   410c4:	10800617 	ldw	r2,24(r2)
   410c8:	d8800015 	stw	r2,0(sp)
   410cc:	180b883a 	mov	r5,r3
   410d0:	e1bff817 	ldw	r6,-32(fp)
   410d4:	01c2c004 	movi	r7,2816
   410d8:	0048fe00 	call	48fe0 <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
   410dc:	01000084 	movi	r4,2
   410e0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   410e4:	e13fff17 	ldw	r4,-4(fp)
   410e8:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   410ec:	01000084 	movi	r4,2
   410f0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
   410f4:	00bff7c4 	movi	r2,-33
   410f8:	0000c106 	br	41400 <ip_rcv_phase2+0x5bc>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
   410fc:	e0bff817 	ldw	r2,-32(fp)
   41100:	10c00417 	ldw	r3,16(r2)
   41104:	e0bfff17 	ldw	r2,-4(fp)
   41108:	10c00715 	stw	r3,28(r2)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
   4110c:	e0bfff17 	ldw	r2,-4(fp)
   41110:	10c00717 	ldw	r3,28(r2)
   41114:	e0bffe04 	addi	r2,fp,-8
   41118:	1809883a 	mov	r4,r3
   4111c:	100b883a 	mov	r5,r2
   41120:	003eaf40 	call	3eaf4 <iproute>
   41124:	e0bffb15 	stw	r2,-20(fp)
   41128:	e0bffb17 	ldw	r2,-20(fp)
   4112c:	10000f1e 	bne	r2,zero,4116c <ip_rcv_phase2+0x328>
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
   41130:	008001b4 	movhi	r2,6
   41134:	10b9e104 	addi	r2,r2,-6268
   41138:	10800b17 	ldw	r2,44(r2)
   4113c:	10c00044 	addi	r3,r2,1
   41140:	008001b4 	movhi	r2,6
   41144:	10b9e104 	addi	r2,r2,-6268
   41148:	10c00b15 	stw	r3,44(r2)
            LOCK_NET_RESOURCE(FREEQ_RESID);
   4114c:	01000084 	movi	r4,2
   41150:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
            pk_free(p);
   41154:	e13fff17 	ldw	r4,-4(fp)
   41158:	002a8940 	call	2a894 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
   4115c:	01000084 	movi	r4,2
   41160:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
   41164:	00bff7c4 	movi	r2,-33
   41168:	0000a506 	br	41400 <ip_rcv_phase2+0x5bc>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
   4116c:	e0bff817 	ldw	r2,-32(fp)
   41170:	10c00417 	ldw	r3,16(r2)
   41174:	e0bffb17 	ldw	r2,-20(fp)
   41178:	10800a17 	ldw	r2,40(r2)
   4117c:	1880011e 	bne	r3,r2,41184 <ip_rcv_phase2+0x340>
            goto ours;
   41180:	00006106 	br	41308 <ip_rcv_phase2+0x4c4>

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
   41184:	e0bff817 	ldw	r2,-32(fp)
   41188:	10c00417 	ldw	r3,16(r2)
   4118c:	e0bffb17 	ldw	r2,-20(fp)
   41190:	10800e17 	ldw	r2,56(r2)
   41194:	18805c26 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
            (pip->ip_dest == p->net->n_netbr))
   41198:	e0bff817 	ldw	r2,-32(fp)
   4119c:	10c00417 	ldw	r3,16(r2)
   411a0:	e0bfff17 	ldw	r2,-4(fp)
   411a4:	10800617 	ldw	r2,24(r2)
   411a8:	10800e17 	ldw	r2,56(r2)
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
   411ac:	18805626 	beq	r3,r2,41308 <ip_rcv_phase2+0x4c4>
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
   411b0:	e0bfff17 	ldw	r2,-4(fp)
   411b4:	e0fffb17 	ldw	r3,-20(fp)
   411b8:	10c00615 	stw	r3,24(r2)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
   411bc:	e0bfff17 	ldw	r2,-4(fp)
   411c0:	10800417 	ldw	r2,16(r2)
   411c4:	e0ffff17 	ldw	r3,-4(fp)
   411c8:	18c00617 	ldw	r3,24(r3)
   411cc:	18c00817 	ldw	r3,32(r3)
   411d0:	10c5883a 	add	r2,r2,r3
   411d4:	e0fffb17 	ldw	r3,-20(fp)
   411d8:	18c00917 	ldw	r3,36(r3)
   411dc:	1880362e 	bgeu	r3,r2,412b8 <ip_rcv_phase2+0x474>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
   411e0:	e0bff817 	ldw	r2,-32(fp)
   411e4:	1080018b 	ldhu	r2,6(r2)
   411e8:	10bfffcc 	andi	r2,r2,65535
   411ec:	1004d23a 	srli	r2,r2,8
   411f0:	10bfffcc 	andi	r2,r2,65535
   411f4:	10c03fcc 	andi	r3,r2,255
   411f8:	e0bff817 	ldw	r2,-32(fp)
   411fc:	1080018b 	ldhu	r2,6(r2)
   41200:	10bfffcc 	andi	r2,r2,65535
   41204:	1004923a 	slli	r2,r2,8
   41208:	10bfffcc 	andi	r2,r2,65535
   4120c:	1884b03a 	or	r2,r3,r2
   41210:	1090000c 	andi	r2,r2,16384
   41214:	10001b26 	beq	r2,zero,41284 <ip_rcv_phase2+0x440>
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
   41218:	e0bff817 	ldw	r2,-32(fp)
   4121c:	11000317 	ldw	r4,12(r2)
   41220:	e0bfff17 	ldw	r2,-4(fp)
   41224:	10800617 	ldw	r2,24(r2)
   41228:	10c00a17 	ldw	r3,40(r2)
   4122c:	e0bfff17 	ldw	r2,-4(fp)
   41230:	10800617 	ldw	r2,24(r2)
   41234:	d8800015 	stw	r2,0(sp)
   41238:	180b883a 	mov	r5,r3
   4123c:	e1bff817 	ldw	r6,-32(fp)
   41240:	01c00104 	movi	r7,4
   41244:	0048fe00 	call	48fe0 <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
   41248:	008001b4 	movhi	r2,6
   4124c:	10b9e104 	addi	r2,r2,-6268
   41250:	10801117 	ldw	r2,68(r2)
   41254:	10c00044 	addi	r3,r2,1
   41258:	008001b4 	movhi	r2,6
   4125c:	10b9e104 	addi	r2,r2,-6268
   41260:	10c01115 	stw	r3,68(r2)
               LOCK_NET_RESOURCE(FREEQ_RESID);
   41264:	01000084 	movi	r4,2
   41268:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
               pk_free(p);
   4126c:	e13fff17 	ldw	r4,-4(fp)
   41270:	002a8940 	call	2a894 <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
   41274:	01000084 	movi	r4,2
   41278:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
   4127c:	00bffd44 	movi	r2,-11
   41280:	00005f06 	br	41400 <ip_rcv_phase2+0x5bc>
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
   41284:	e0bff817 	ldw	r2,-32(fp)
   41288:	10800203 	ldbu	r2,8(r2)
   4128c:	10bfffc4 	addi	r2,r2,-1
   41290:	1007883a 	mov	r3,r2
   41294:	e0bff817 	ldw	r2,-32(fp)
   41298:	10c00205 	stb	r3,8(r2)
            err = ip_fragment(p, firsthop);
   4129c:	e0bffe17 	ldw	r2,-8(fp)
   412a0:	e13fff17 	ldw	r4,-4(fp)
   412a4:	100b883a 	mov	r5,r2
   412a8:	003e2080 	call	3e208 <ip_fragment>
   412ac:	e0bffc15 	stw	r2,-16(fp)
            IN_PROFILER(PF_IP, PF_EXIT);
            return(err);
   412b0:	e0bffc17 	ldw	r2,-16(fp)
   412b4:	00005206 	br	41400 <ip_rcv_phase2+0x5bc>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
   412b8:	e0bff817 	ldw	r2,-32(fp)
   412bc:	10800203 	ldbu	r2,8(r2)
   412c0:	10bfffc4 	addi	r2,r2,-1
   412c4:	1007883a 	mov	r3,r2
   412c8:	e0bff817 	ldw	r2,-32(fp)
   412cc:	10c00205 	stb	r3,8(r2)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
   412d0:	e0bff817 	ldw	r2,-32(fp)
   412d4:	1000028d 	sth	zero,10(r2)
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
   412d8:	e13ff817 	ldw	r4,-32(fp)
   412dc:	01400284 	movi	r5,10
   412e0:	00263480 	call	26348 <cksum>
   412e4:	0084303a 	nor	r2,zero,r2
   412e8:	1007883a 	mov	r3,r2
   412ec:	e0bff817 	ldw	r2,-32(fp)
   412f0:	10c0028d 	sth	r3,10(r2)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
   412f4:	e0bffe17 	ldw	r2,-8(fp)
   412f8:	e13fff17 	ldw	r4,-4(fp)
   412fc:	100b883a 	mov	r5,r2
   41300:	00242940 	call	24294 <ip2mac>
   41304:	00003e06 	br	41400 <ip_rcv_phase2+0x5bc>
#if defined (IP_MULTICAST) || defined (IP_ROUTING)
ours:
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
   41308:	e0bff817 	ldw	r2,-32(fp)
   4130c:	1080018b 	ldhu	r2,6(r2)
   41310:	10bfffcc 	andi	r2,r2,65535
   41314:	1004d23a 	srli	r2,r2,8
   41318:	1007883a 	mov	r3,r2
   4131c:	e0bff817 	ldw	r2,-32(fp)
   41320:	1080018b 	ldhu	r2,6(r2)
   41324:	10bfffcc 	andi	r2,r2,65535
   41328:	1004923a 	slli	r2,r2,8
   4132c:	1884b03a 	or	r2,r3,r2
   41330:	e0bffd0d 	sth	r2,-12(fp)
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
   41334:	e0bffd0b 	ldhu	r2,-12(fp)
   41338:	1088000c 	andi	r2,r2,8192
   4133c:	1000051e 	bne	r2,zero,41354 <ip_rcv_phase2+0x510>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   41340:	e0fffd0b 	ldhu	r3,-12(fp)
   41344:	00bffff4 	movhi	r2,65535
   41348:	1087ffc4 	addi	r2,r2,8191
   4134c:	1884703a 	and	r2,r3,r2
ours:
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
   41350:	10002926 	beq	r2,zero,413f8 <ip_rcv_phase2+0x5b4>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   41354:	00800174 	movhi	r2,5
   41358:	108f9904 	addi	r2,r2,15972
   4135c:	10800017 	ldw	r2,0(r2)
   41360:	1081000c 	andi	r2,r2,1024
   41364:	10001a26 	beq	r2,zero,413d0 <ip_rcv_phase2+0x58c>
   41368:	00800174 	movhi	r2,5
   4136c:	108f9904 	addi	r2,r2,15972
   41370:	10800017 	ldw	r2,0(r2)
   41374:	1080800c 	andi	r2,r2,512
   41378:	10001526 	beq	r2,zero,413d0 <ip_rcv_phase2+0x58c>
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
          PUSH_IPADDR(pip->ip_src));
   4137c:	e0bff817 	ldw	r2,-32(fp)
   41380:	10800317 	ldw	r2,12(r2)
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
   41384:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(pip->ip_src));
   41388:	e0bff817 	ldw	r2,-32(fp)
   4138c:	10800317 	ldw	r2,12(r2)
   41390:	1004d23a 	srli	r2,r2,8
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
   41394:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(pip->ip_src));
   41398:	e0bff817 	ldw	r2,-32(fp)
   4139c:	10800317 	ldw	r2,12(r2)
   413a0:	1004d43a 	srli	r2,r2,16
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
   413a4:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(pip->ip_src));
   413a8:	e0bff817 	ldw	r2,-32(fp)
   413ac:	10800317 	ldw	r2,12(r2)
   413b0:	1004d63a 	srli	r2,r2,24
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
   413b4:	d8800015 	stw	r2,0(sp)
   413b8:	01000174 	movhi	r4,5
   413bc:	213d2c04 	addi	r4,r4,-2896
   413c0:	180f883a 	mov	r7,r3
   413c4:	00080f80 	call	80f8 <printf>
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
   413c8:	e13fff17 	ldw	r4,-4(fp)
   413cc:	003e8680 	call	3e868 <ip_dump>
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
   413d0:	008001b4 	movhi	r2,6
   413d4:	10b9e104 	addi	r2,r2,-6268
   413d8:	10800d17 	ldw	r2,52(r2)
   413dc:	10c00044 	addi	r3,r2,1
   413e0:	008001b4 	movhi	r2,6
   413e4:	10b9e104 	addi	r2,r2,-6268
   413e8:	10c00d15 	stw	r3,52(r2)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
   413ec:	e13fff17 	ldw	r4,-4(fp)
   413f0:	003f4600 	call	3f460 <ip_reassm>
   413f4:	00000206 	br	41400 <ip_rcv_phase2+0x5bc>
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
   413f8:	e13fff17 	ldw	r4,-4(fp)
   413fc:	00414140 	call	41414 <ip_demux>
}
   41400:	e037883a 	mov	sp,fp
   41404:	dfc00117 	ldw	ra,4(sp)
   41408:	df000017 	ldw	fp,0(sp)
   4140c:	dec00204 	addi	sp,sp,8
   41410:	f800283a 	ret

00041414 <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
   41414:	defff904 	addi	sp,sp,-28
   41418:	dfc00615 	stw	ra,24(sp)
   4141c:	df000515 	stw	fp,20(sp)
   41420:	df000504 	addi	fp,sp,20
   41424:	e13fff15 	stw	r4,-4(fp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
   41428:	e0bfff17 	ldw	r2,-4(fp)
   4142c:	10800317 	ldw	r2,12(r2)
   41430:	e0bffe15 	stw	r2,-8(fp)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
   41434:	e0bffe17 	ldw	r2,-8(fp)
   41438:	10800003 	ldbu	r2,0(r2)
   4143c:	10803fcc 	andi	r2,r2,255
   41440:	10801160 	cmpeqi	r2,r2,69
   41444:	1000131e 	bne	r2,zero,41494 <ip_demux+0x80>
   {
      if((pip->ip_ver_ihl < 0x45) ||
   41448:	e0bffe17 	ldw	r2,-8(fp)
   4144c:	10800003 	ldbu	r2,0(r2)
   41450:	10803fcc 	andi	r2,r2,255
   41454:	10801170 	cmpltui	r2,r2,69
   41458:	1000051e 	bne	r2,zero,41470 <ip_demux+0x5c>
         (pip->ip_ver_ihl > 0x47))
   4145c:	e0bffe17 	ldw	r2,-8(fp)
   41460:	10800003 	ldbu	r2,0(r2)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
   {
      if((pip->ip_ver_ihl < 0x45) ||
   41464:	10803fcc 	andi	r2,r2,255
   41468:	10801230 	cmpltui	r2,r2,72
   4146c:	1000091e 	bne	r2,zero,41494 <ip_demux+0x80>
         (pip->ip_ver_ihl > 0x47))
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
   41470:	e0bffe17 	ldw	r2,-8(fp)
   41474:	10800003 	ldbu	r2,0(r2)
   41478:	10803fcc 	andi	r2,r2,255
   4147c:	01000174 	movhi	r4,5
   41480:	213d3504 	addi	r4,r4,-2860
   41484:	100b883a 	mov	r5,r2
   41488:	00080f80 	call	80f8 <printf>
         return ENP_LOGIC;
   4148c:	00bffd44 	movi	r2,-11
   41490:	0000d806 	br	417f4 <ip_demux+0x3e0>

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
   41494:	e0bffe17 	ldw	r2,-8(fp)
   41498:	10c00317 	ldw	r3,12(r2)
   4149c:	e0bfff17 	ldw	r2,-4(fp)
   414a0:	10c00715 	stw	r3,28(r2)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   414a4:	00800174 	movhi	r2,5
   414a8:	108f9904 	addi	r2,r2,15972
   414ac:	10800017 	ldw	r2,0(r2)
   414b0:	1081000c 	andi	r2,r2,1024
   414b4:	10002226 	beq	r2,zero,41540 <ip_demux+0x12c>
   414b8:	00800174 	movhi	r2,5
   414bc:	108f9904 	addi	r2,r2,15972
   414c0:	10800017 	ldw	r2,0(r2)
   414c4:	1080800c 	andi	r2,r2,512
   414c8:	10001d26 	beq	r2,zero,41540 <ip_demux+0x12c>
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
   414cc:	e0bffe17 	ldw	r2,-8(fp)
   414d0:	10800243 	ldbu	r2,9(r2)
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
   414d4:	11403fcc 	andi	r5,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
   414d8:	e0bffe17 	ldw	r2,-8(fp)
   414dc:	10800317 	ldw	r2,12(r2)
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
   414e0:	11803fcc 	andi	r6,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
   414e4:	e0bffe17 	ldw	r2,-8(fp)
   414e8:	10800317 	ldw	r2,12(r2)
   414ec:	1004d23a 	srli	r2,r2,8
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
   414f0:	11c03fcc 	andi	r7,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
   414f4:	e0bffe17 	ldw	r2,-8(fp)
   414f8:	10800317 	ldw	r2,12(r2)
   414fc:	1004d43a 	srli	r2,r2,16
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
   41500:	10c03fcc 	andi	r3,r2,255
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
   41504:	e0bffe17 	ldw	r2,-8(fp)
   41508:	10800317 	ldw	r2,12(r2)
   4150c:	1004d63a 	srli	r2,r2,24
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
   41510:	d8c00015 	stw	r3,0(sp)
   41514:	d8800115 	stw	r2,4(sp)
   41518:	01000174 	movhi	r4,5
   4151c:	213d3c04 	addi	r4,r4,-2832
   41520:	00080f80 	call	80f8 <printf>
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
   41524:	00800174 	movhi	r2,5
   41528:	108f9904 	addi	r2,r2,15972
   4152c:	10800017 	ldw	r2,0(r2)
   41530:	1080008c 	andi	r2,r2,2
   41534:	10000226 	beq	r2,zero,41540 <ip_demux+0x12c>
   41538:	e13fff17 	ldw	r4,-4(fp)
   4153c:	003e8680 	call	3e868 <ip_dump>
   }
#endif

   switch (pip->ip_prot)
   41540:	e0bffe17 	ldw	r2,-8(fp)
   41544:	10800243 	ldbu	r2,9(r2)
   41548:	10803fcc 	andi	r2,r2,255
   4154c:	10c000a0 	cmpeqi	r3,r2,2
   41550:	18001f1e 	bne	r3,zero,415d0 <ip_demux+0x1bc>
   41554:	10c000c8 	cmpgei	r3,r2,3
   41558:	1800031e 	bne	r3,zero,41568 <ip_demux+0x154>
   4155c:	10800060 	cmpeqi	r2,r2,1
   41560:	1000101e 	bne	r2,zero,415a4 <ip_demux+0x190>
   41564:	00003006 	br	41628 <ip_demux+0x214>
   41568:	10c001a0 	cmpeqi	r3,r2,6
   4156c:	1800231e 	bne	r3,zero,415fc <ip_demux+0x1e8>
   41570:	10800460 	cmpeqi	r2,r2,17
   41574:	10002c26 	beq	r2,zero,41628 <ip_demux+0x214>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
   41578:	008001b4 	movhi	r2,6
   4157c:	10b9e104 	addi	r2,r2,-6268
   41580:	10800817 	ldw	r2,32(r2)
   41584:	10c00044 	addi	r3,r2,1
   41588:	008001b4 	movhi	r2,6
   4158c:	10b9e104 	addi	r2,r2,-6268
   41590:	10c00815 	stw	r3,32(r2)
      err = udpdemux(p);
   41594:	e13fff17 	ldw	r4,-4(fp)
   41598:	00427280 	call	42728 <udpdemux>
   4159c:	e0bffd15 	stw	r2,-12(fp)
      break;
   415a0:	00002c06 	br	41654 <ip_demux+0x240>
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
   415a4:	008001b4 	movhi	r2,6
   415a8:	10b9e104 	addi	r2,r2,-6268
   415ac:	10800817 	ldw	r2,32(r2)
   415b0:	10c00044 	addi	r3,r2,1
   415b4:	008001b4 	movhi	r2,6
   415b8:	10b9e104 	addi	r2,r2,-6268
   415bc:	10c00815 	stw	r3,32(r2)
      err = icmprcv(p);
   415c0:	e13fff17 	ldw	r4,-4(fp)
   415c4:	00484200 	call	48420 <icmprcv>
   415c8:	e0bffd15 	stw	r2,-12(fp)
      break;
   415cc:	00002106 	br	41654 <ip_demux+0x240>
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
   415d0:	008001b4 	movhi	r2,6
   415d4:	10b9e104 	addi	r2,r2,-6268
   415d8:	10800817 	ldw	r2,32(r2)
   415dc:	10c00044 	addi	r3,r2,1
   415e0:	008001b4 	movhi	r2,6
   415e4:	10b9e104 	addi	r2,r2,-6268
   415e8:	10c00815 	stw	r3,32(r2)
      err = igmp_input(p);
   415ec:	e13fff17 	ldw	r4,-4(fp)
   415f0:	00249300 	call	24930 <igmp_input>
   415f4:	e0bffd15 	stw	r2,-12(fp)
      break;
   415f8:	00001606 	br	41654 <ip_demux+0x240>
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
   415fc:	008001b4 	movhi	r2,6
   41600:	10b9e104 	addi	r2,r2,-6268
   41604:	10800817 	ldw	r2,32(r2)
   41608:	10c00044 	addi	r3,r2,1
   4160c:	008001b4 	movhi	r2,6
   41610:	10b9e104 	addi	r2,r2,-6268
   41614:	10c00815 	stw	r3,32(r2)
      err = tcp_rcv(p);
   41618:	e13fff17 	ldw	r4,-4(fp)
   4161c:	002c9740 	call	2c974 <tcp_rcv>
   41620:	e0bffd15 	stw	r2,-12(fp)
      break;
   41624:	00000b06 	br	41654 <ip_demux+0x240>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
   41628:	008001b4 	movhi	r2,6
   4162c:	10b9e104 	addi	r2,r2,-6268
   41630:	10800817 	ldw	r2,32(r2)
   41634:	10c00044 	addi	r3,r2,1
   41638:	008001b4 	movhi	r2,6
   4163c:	10b9e104 	addi	r2,r2,-6268
   41640:	10c00815 	stw	r3,32(r2)
      err = ip_raw_input(p);
   41644:	e13fff17 	ldw	r4,-4(fp)
   41648:	0041d300 	call	41d30 <ip_raw_input>
   4164c:	e0bffd15 	stw	r2,-12(fp)
      break;
   41650:	0001883a 	nop
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
   41654:	e0bffd17 	ldw	r2,-12(fp)
   41658:	10bffda0 	cmpeqi	r2,r2,-10
   4165c:	1000021e 	bne	r2,zero,41668 <ip_demux+0x254>
   {
      return err;
   41660:	e0bffd17 	ldw	r2,-12(fp)
   41664:	00006306 	br	417f4 <ip_demux+0x3e0>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
   41668:	e0bffe17 	ldw	r2,-8(fp)
   4166c:	10800417 	ldw	r2,16(r2)
   41670:	10bfffe0 	cmpeqi	r2,r2,-1
   41674:	1000511e 	bne	r2,zero,417bc <ip_demux+0x3a8>
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
   41678:	e0bffe17 	ldw	r2,-8(fp)
   4167c:	10800417 	ldw	r2,16(r2)
   41680:	1006d63a 	srli	r3,r2,24
   41684:	e0bffe17 	ldw	r2,-8(fp)
   41688:	10800417 	ldw	r2,16(r2)
   4168c:	1004d23a 	srli	r2,r2,8
   41690:	10bfc00c 	andi	r2,r2,65280
   41694:	1886b03a 	or	r3,r3,r2
   41698:	e0bffe17 	ldw	r2,-8(fp)
   4169c:	10800417 	ldw	r2,16(r2)
   416a0:	10bfc00c 	andi	r2,r2,65280
   416a4:	1004923a 	slli	r2,r2,8
   416a8:	1886b03a 	or	r3,r3,r2
   416ac:	e0bffe17 	ldw	r2,-8(fp)
   416b0:	10800417 	ldw	r2,16(r2)
   416b4:	1004963a 	slli	r2,r2,24
   416b8:	1884b03a 	or	r2,r3,r2
   416bc:	10fc002c 	andhi	r3,r2,61440

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
   416c0:	00b80034 	movhi	r2,57344
   416c4:	18803d26 	beq	r3,r2,417bc <ip_demux+0x3a8>
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
   416c8:	e0bffe17 	ldw	r2,-8(fp)
   416cc:	10c00417 	ldw	r3,16(r2)
   416d0:	e0bfff17 	ldw	r2,-4(fp)
   416d4:	10800617 	ldw	r2,24(r2)
   416d8:	10800e17 	ldw	r2,56(r2)
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
   416dc:	18803726 	beq	r3,r2,417bc <ip_demux+0x3a8>
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
   416e0:	e0bffe17 	ldw	r2,-8(fp)
   416e4:	10c00417 	ldw	r3,16(r2)
   416e8:	e0bfff17 	ldw	r2,-4(fp)
   416ec:	10800617 	ldw	r2,24(r2)
   416f0:	10800f17 	ldw	r2,60(r2)
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
   416f4:	18803126 	beq	r3,r2,417bc <ip_demux+0x3a8>
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
   416f8:	e0bffe17 	ldw	r2,-8(fp)
   416fc:	10c00417 	ldw	r3,16(r2)
   41700:	e0bfff17 	ldw	r2,-4(fp)
   41704:	10800617 	ldw	r2,24(r2)
   41708:	10801017 	ldw	r2,64(r2)
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
   4170c:	18802b26 	beq	r3,r2,417bc <ip_demux+0x3a8>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
   41710:	e0bfff17 	ldw	r2,-4(fp)
   41714:	10800617 	ldw	r2,24(r2)
   41718:	10c00a17 	ldw	r3,40(r2)
   4171c:	e0bfff17 	ldw	r2,-4(fp)
   41720:	10800617 	ldw	r2,24(r2)
   41724:	10801017 	ldw	r2,64(r2)
#ifdef IP_MULTICAST
       (!(IN_MULTICAST(ntohl(pip->ip_dest)))) && /* multicast address */
#endif /* IP_MULTICAST */
       (pip->ip_dest != p->net->n_netbr) &&   /* All subnet broadcast */
       (pip->ip_dest != p->net->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
   41728:	18802426 	beq	r3,r2,417bc <ip_demux+0x3a8>
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   4172c:	00800174 	movhi	r2,5
   41730:	108f9904 	addi	r2,r2,15972
   41734:	10800017 	ldw	r2,0(r2)
   41738:	1081000c 	andi	r2,r2,1024
   4173c:	10001326 	beq	r2,zero,4178c <ip_demux+0x378>
   41740:	00800174 	movhi	r2,5
   41744:	108f9904 	addi	r2,r2,15972
   41748:	10800017 	ldw	r2,0(r2)
   4174c:	1080800c 	andi	r2,r2,512
   41750:	10000e26 	beq	r2,zero,4178c <ip_demux+0x378>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
   41754:	e0bffe17 	ldw	r2,-8(fp)
   41758:	10800243 	ldbu	r2,9(r2)
   4175c:	10803fcc 	andi	r2,r2,255
   41760:	01000174 	movhi	r4,5
   41764:	213d4604 	addi	r4,r4,-2792
   41768:	100b883a 	mov	r5,r2
   4176c:	00080f80 	call	80f8 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
   41770:	00800174 	movhi	r2,5
   41774:	108f9904 	addi	r2,r2,15972
   41778:	10800017 	ldw	r2,0(r2)
   4177c:	1080008c 	andi	r2,r2,2
   41780:	10000226 	beq	r2,zero,4178c <ip_demux+0x378>
   41784:	e13fff17 	ldw	r4,-4(fp)
   41788:	003e8680 	call	3e868 <ip_dump>
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
   4178c:	e0bffe17 	ldw	r2,-8(fp)
   41790:	11000317 	ldw	r4,12(r2)
   41794:	e0bfff17 	ldw	r2,-4(fp)
   41798:	10800617 	ldw	r2,24(r2)
   4179c:	10c00a17 	ldw	r3,40(r2)
   417a0:	e0bfff17 	ldw	r2,-4(fp)
   417a4:	10800617 	ldw	r2,24(r2)
   417a8:	d8800015 	stw	r2,0(sp)
   417ac:	180b883a 	mov	r5,r3
   417b0:	e1bffe17 	ldw	r6,-8(fp)
   417b4:	01c00084 	movi	r7,2
   417b8:	0048fe00 	call	48fe0 <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
   417bc:	008001b4 	movhi	r2,6
   417c0:	10b9e104 	addi	r2,r2,-6268
   417c4:	10800617 	ldw	r2,24(r2)
   417c8:	10c00044 	addi	r3,r2,1
   417cc:	008001b4 	movhi	r2,6
   417d0:	10b9e104 	addi	r2,r2,-6268
   417d4:	10c00615 	stw	r3,24(r2)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   417d8:	01000084 	movi	r4,2
   417dc:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   417e0:	e13fff17 	ldw	r4,-4(fp)
   417e4:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   417e8:	01000084 	movi	r4,2
   417ec:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return ENP_NOT_MINE;
   417f0:	00800084 	movi	r2,2
}
   417f4:	e037883a 	mov	sp,fp
   417f8:	dfc00117 	ldw	ra,4(sp)
   417fc:	df000017 	ldw	fp,0(sp)
   41800:	dec00204 	addi	sp,sp,8
   41804:	f800283a 	ret

00041808 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
   41808:	defff904 	addi	sp,sp,-28
   4180c:	dfc00615 	stw	ra,24(sp)
   41810:	df000515 	stw	fp,20(sp)
   41814:	df000504 	addi	fp,sp,20
   41818:	e13ffd15 	stw	r4,-12(fp)
   4181c:	e17ffe15 	stw	r5,-8(fp)
   41820:	e1bfff15 	stw	r6,-4(fp)
   struct in_multi *inm = (struct in_multi *)NULL;
   41824:	e03ffb15 	stw	zero,-20(fp)
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
   41828:	e0bffd17 	ldw	r2,-12(fp)
   4182c:	10000326 	beq	r2,zero,4183c <in_addmulti+0x34>
   41830:	e0bffd17 	ldw	r2,-12(fp)
   41834:	10800017 	ldw	r2,0(r2)
   41838:	1000021e 	bne	r2,zero,41844 <in_addmulti+0x3c>
      return ((struct in_multi *)NULL);  
   4183c:	0005883a 	mov	r2,zero
   41840:	00003f06 	br	41940 <in_addmulti+0x138>

   ENTER_CRIT_SECTION(netp);
   41844:	002b2e40 	call	2b2e4 <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
   41848:	e0bfff17 	ldw	r2,-4(fp)
   4184c:	108001a0 	cmpeqi	r2,r2,6
   41850:	1000061e 	bne	r2,zero,4186c <in_addmulti+0x64>
      inm = lookup_mcast(*ap, netp);
   41854:	e0bffd17 	ldw	r2,-12(fp)
   41858:	10800017 	ldw	r2,0(r2)
   4185c:	1009883a 	mov	r4,r2
   41860:	e17ffe17 	ldw	r5,-8(fp)
   41864:	0041a5c0 	call	41a5c <lookup_mcast>
   41868:	e0bffb15 	stw	r2,-20(fp)
#endif

   if (inm != (struct in_multi *)NULL) 
   4186c:	e0bffb17 	ldw	r2,-20(fp)
   41870:	10000626 	beq	r2,zero,4188c <in_addmulti+0x84>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
   41874:	e0bffb17 	ldw	r2,-20(fp)
   41878:	10800217 	ldw	r2,8(r2)
   4187c:	10c00044 	addi	r3,r2,1
   41880:	e0bffb17 	ldw	r2,-20(fp)
   41884:	10c00215 	stw	r3,8(r2)
   41888:	00002b06 	br	41938 <in_addmulti+0x130>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
   4188c:	01000604 	movi	r4,24
   41890:	002bce00 	call	2bce0 <npalloc>
   41894:	e0bffb15 	stw	r2,-20(fp)

      if (inm == (struct in_multi *)NULL) 
   41898:	e0bffb17 	ldw	r2,-20(fp)
   4189c:	1000031e 	bne	r2,zero,418ac <in_addmulti+0xa4>
      {
         EXIT_CRIT_SECTION(netp);
   418a0:	002b3400 	call	2b340 <irq_Unmask>
         return ((struct in_multi *)NULL);
   418a4:	0005883a 	mov	r2,zero
   418a8:	00002506 	br	41940 <in_addmulti+0x138>
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
   418ac:	e0bfff17 	ldw	r2,-4(fp)
   418b0:	108001a0 	cmpeqi	r2,r2,6
   418b4:	1000041e 	bne	r2,zero,418c8 <in_addmulti+0xc0>
         inm->inm_addr = *ap;
   418b8:	e0bffd17 	ldw	r2,-12(fp)
   418bc:	10c00017 	ldw	r3,0(r2)
   418c0:	e0bffb17 	ldw	r2,-20(fp)
   418c4:	10c00015 	stw	r3,0(r2)
#endif
      inm->inm_netp = netp;
   418c8:	e0bffb17 	ldw	r2,-20(fp)
   418cc:	e0fffe17 	ldw	r3,-8(fp)
   418d0:	10c00115 	stw	r3,4(r2)
      inm->inm_refcount = 1;
   418d4:	e0bffb17 	ldw	r2,-20(fp)
   418d8:	00c00044 	movi	r3,1
   418dc:	10c00215 	stw	r3,8(r2)
      inm->inm_next = netp->mc_list;
   418e0:	e0bffe17 	ldw	r2,-8(fp)
   418e4:	10c02c17 	ldw	r3,176(r2)
   418e8:	e0bffb17 	ldw	r2,-20(fp)
   418ec:	10c00515 	stw	r3,20(r2)
      netp->mc_list = inm;
   418f0:	e0bffe17 	ldw	r2,-8(fp)
   418f4:	e0fffb17 	ldw	r3,-20(fp)
   418f8:	10c02c15 	stw	r3,176(r2)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
   418fc:	e0bffe17 	ldw	r2,-8(fp)
   41900:	10802b17 	ldw	r2,172(r2)
   41904:	10000626 	beq	r2,zero,41920 <in_addmulti+0x118>
         error = netp->n_mcastlist(inm);
   41908:	e0bffe17 	ldw	r2,-8(fp)
   4190c:	10802b17 	ldw	r2,172(r2)
   41910:	e13ffb17 	ldw	r4,-20(fp)
   41914:	103ee83a 	callr	r2
   41918:	e0bffc15 	stw	r2,-16(fp)
   4191c:	00000106 	br	41924 <in_addmulti+0x11c>
      else
         error = 0;
   41920:	e03ffc15 	stw	zero,-16(fp)
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
   41924:	e0bffb17 	ldw	r2,-20(fp)
   41928:	10800017 	ldw	r2,0(r2)
   4192c:	10000226 	beq	r2,zero,41938 <in_addmulti+0x130>
   41930:	e13ffb17 	ldw	r4,-20(fp)
   41934:	0024e340 	call	24e34 <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
   41938:	002b3400 	call	2b340 <irq_Unmask>
   USE_ARG(error);

   return (inm);
   4193c:	e0bffb17 	ldw	r2,-20(fp)
}
   41940:	e037883a 	mov	sp,fp
   41944:	dfc00117 	ldw	ra,4(sp)
   41948:	df000017 	ldw	fp,0(sp)
   4194c:	dec00204 	addi	sp,sp,8
   41950:	f800283a 	ret

00041954 <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
   41954:	defffa04 	addi	sp,sp,-24
   41958:	dfc00515 	stw	ra,20(sp)
   4195c:	df000415 	stw	fp,16(sp)
   41960:	df000404 	addi	fp,sp,16
   41964:	e13fff15 	stw	r4,-4(fp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
   41968:	e0bfff17 	ldw	r2,-4(fp)
   4196c:	10800117 	ldw	r2,4(r2)
   41970:	e0bffe15 	stw	r2,-8(fp)
   int error;

   ENTER_CRIT_SECTION(inm);
   41974:	002b2e40 	call	2b2e4 <irq_Mask>
   if (--inm->inm_refcount == 0) 
   41978:	e0bfff17 	ldw	r2,-4(fp)
   4197c:	10800217 	ldw	r2,8(r2)
   41980:	10ffffc4 	addi	r3,r2,-1
   41984:	e0bfff17 	ldw	r2,-4(fp)
   41988:	10c00215 	stw	r3,8(r2)
   4198c:	e0bfff17 	ldw	r2,-4(fp)
   41990:	10800217 	ldw	r2,8(r2)
   41994:	10002b1e 	bne	r2,zero,41a44 <in_delmulti+0xf0>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
   41998:	e0bffe17 	ldw	r2,-8(fp)
   4199c:	10802c17 	ldw	r2,176(r2)
   419a0:	e0bffc15 	stw	r2,-16(fp)
   419a4:	00001406 	br	419f8 <in_delmulti+0xa4>
      {
         if(p == inm)   /* inm is first in mc_list */
   419a8:	e0fffc17 	ldw	r3,-16(fp)
   419ac:	e0bfff17 	ldw	r2,-4(fp)
   419b0:	1880051e 	bne	r3,r2,419c8 <in_delmulti+0x74>
         {
            netp->mc_list = p->inm_next;  /* unlink */
   419b4:	e0bffc17 	ldw	r2,-16(fp)
   419b8:	10c00517 	ldw	r3,20(r2)
   419bc:	e0bffe17 	ldw	r2,-8(fp)
   419c0:	10c02c15 	stw	r3,176(r2)
            break;
   419c4:	00000e06 	br	41a00 <in_delmulti+0xac>
         }
         else if(p->inm_next == inm)   /* inm is next */
   419c8:	e0bffc17 	ldw	r2,-16(fp)
   419cc:	10c00517 	ldw	r3,20(r2)
   419d0:	e0bfff17 	ldw	r2,-4(fp)
   419d4:	1880051e 	bne	r3,r2,419ec <in_delmulti+0x98>
         {
            p->inm_next = inm->inm_next;  /* unlink */
   419d8:	e0bfff17 	ldw	r2,-4(fp)
   419dc:	10c00517 	ldw	r3,20(r2)
   419e0:	e0bffc17 	ldw	r2,-16(fp)
   419e4:	10c00515 	stw	r3,20(r2)
            break;
   419e8:	00000506 	br	41a00 <in_delmulti+0xac>

   ENTER_CRIT_SECTION(inm);
   if (--inm->inm_refcount == 0) 
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
   419ec:	e0bffc17 	ldw	r2,-16(fp)
   419f0:	10800517 	ldw	r2,20(r2)
   419f4:	e0bffc15 	stw	r2,-16(fp)
   419f8:	e0bffc17 	ldw	r2,-16(fp)
   419fc:	103fea1e 	bne	r2,zero,419a8 <__alt_mem_descriptor_memory+0xdf0019a8>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
   41a00:	e0bffe17 	ldw	r2,-8(fp)
   41a04:	10802b17 	ldw	r2,172(r2)
   41a08:	10000626 	beq	r2,zero,41a24 <in_delmulti+0xd0>
         error = netp->n_mcastlist(inm);
   41a0c:	e0bffe17 	ldw	r2,-8(fp)
   41a10:	10802b17 	ldw	r2,172(r2)
   41a14:	e13fff17 	ldw	r4,-4(fp)
   41a18:	103ee83a 	callr	r2
   41a1c:	e0bffd15 	stw	r2,-12(fp)
   41a20:	00000106 	br	41a28 <in_delmulti+0xd4>
      else
         error = 0;
   41a24:	e03ffd15 	stw	zero,-12(fp)
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
   41a28:	e0bfff17 	ldw	r2,-4(fp)
   41a2c:	10800017 	ldw	r2,0(r2)
   41a30:	10000226 	beq	r2,zero,41a3c <in_delmulti+0xe8>
   41a34:	e13fff17 	ldw	r4,-4(fp)
   41a38:	00250880 	call	25088 <igmp_leavegroup>
#endif      

      IM_FREE(inm);
   41a3c:	e13fff17 	ldw	r4,-4(fp)
   41a40:	002bd140 	call	2bd14 <npfree>
   }

   EXIT_CRIT_SECTION(inm);
   41a44:	002b3400 	call	2b340 <irq_Unmask>
   USE_ARG(error);
}
   41a48:	e037883a 	mov	sp,fp
   41a4c:	dfc00117 	ldw	ra,4(sp)
   41a50:	df000017 	ldw	fp,0(sp)
   41a54:	dec00204 	addi	sp,sp,8
   41a58:	f800283a 	ret

00041a5c <lookup_mcast>:
 * RETURNS: pointer to mcast addr structure, or NULL if not found.
 */

struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
   41a5c:	defffc04 	addi	sp,sp,-16
   41a60:	df000315 	stw	fp,12(sp)
   41a64:	df000304 	addi	fp,sp,12
   41a68:	e13ffe15 	stw	r4,-8(fp)
   41a6c:	e17fff15 	stw	r5,-4(fp)
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
   41a70:	e0bfff17 	ldw	r2,-4(fp)
   41a74:	10802c17 	ldw	r2,176(r2)
   41a78:	e0bffd15 	stw	r2,-12(fp)
   41a7c:	00000906 	br	41aa4 <lookup_mcast+0x48>
   {
      if(imp->inm_addr == addr)
   41a80:	e0bffd17 	ldw	r2,-12(fp)
   41a84:	10c00017 	ldw	r3,0(r2)
   41a88:	e0bffe17 	ldw	r2,-8(fp)
   41a8c:	1880021e 	bne	r3,r2,41a98 <lookup_mcast+0x3c>
         return imp;
   41a90:	e0bffd17 	ldw	r2,-12(fp)
   41a94:	00000606 	br	41ab0 <lookup_mcast+0x54>
struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
   41a98:	e0bffd17 	ldw	r2,-12(fp)
   41a9c:	10800517 	ldw	r2,20(r2)
   41aa0:	e0bffd15 	stw	r2,-12(fp)
   41aa4:	e0bffd17 	ldw	r2,-12(fp)
   41aa8:	103ff51e 	bne	r2,zero,41a80 <__alt_mem_descriptor_memory+0xdf001a80>
   {
      if(imp->inm_addr == addr)
         return imp;
   }
   return NULL;   /* addr not found in mcast list */
   41aac:	0005883a 	mov	r2,zero
}
   41ab0:	e037883a 	mov	sp,fp
   41ab4:	df000017 	ldw	fp,0(sp)
   41ab8:	dec00104 	addi	sp,sp,4
   41abc:	f800283a 	ret

00041ac0 <prep_ifaces>:
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
   41ac0:	defffd04 	addi	sp,sp,-12
   41ac4:	dfc00215 	stw	ra,8(sp)
   41ac8:	df000115 	stw	fp,4(sp)
   41acc:	df000104 	addi	fp,sp,4
   41ad0:	e13fff15 	stw	r4,-4(fp)
   if (port_prep)
   41ad4:	d0a8b617 	ldw	r2,-23848(gp)
   41ad8:	10000426 	beq	r2,zero,41aec <prep_ifaces+0x2c>
      ifaces_found = port_prep(ifaces_found);
   41adc:	d0a8b617 	ldw	r2,-23848(gp)
   41ae0:	e13fff17 	ldw	r4,-4(fp)
   41ae4:	103ee83a 	callr	r2
   41ae8:	e0bfff15 	stw	r2,-4(fp)

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
   41aec:	e0ffff17 	ldw	r3,-4(fp)
   41af0:	00800174 	movhi	r2,5
   41af4:	108f9a04 	addi	r2,r2,15976
   41af8:	10c00015 	stw	r3,0(r2)

   initmsg("prepped %u interface%s, initializing...\n", 
   41afc:	e0bfff17 	ldw	r2,-4(fp)
   41b00:	10800058 	cmpnei	r2,r2,1
   41b04:	1000031e 	bne	r2,zero,41b14 <prep_ifaces+0x54>
   41b08:	00800174 	movhi	r2,5
   41b0c:	10bd4e04 	addi	r2,r2,-2760
   41b10:	00000206 	br	41b1c <prep_ifaces+0x5c>
   41b14:	00800174 	movhi	r2,5
   41b18:	10bd4f04 	addi	r2,r2,-2756
   41b1c:	01000174 	movhi	r4,5
   41b20:	213d5004 	addi	r4,r4,-2752
   41b24:	e17fff17 	ldw	r5,-4(fp)
   41b28:	100d883a 	mov	r6,r2
   41b2c:	00080f80 	call	80f8 <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
   41b30:	e0bfff17 	ldw	r2,-4(fp)
}
   41b34:	e037883a 	mov	sp,fp
   41b38:	dfc00117 	ldw	ra,4(sp)
   41b3c:	df000017 	ldw	fp,0(sp)
   41b40:	dec00204 	addi	sp,sp,8
   41b44:	f800283a 	ret

00041b48 <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
   41b48:	defffd04 	addi	sp,sp,-12
   41b4c:	dfc00215 	stw	ra,8(sp)
   41b50:	df000115 	stw	fp,4(sp)
   41b54:	df000104 	addi	fp,sp,4
   41b58:	e13fff15 	stw	r4,-4(fp)
   net_system_exit = TRUE; /* set flag for shutting down */
   41b5c:	00800044 	movi	r2,1
   41b60:	d0a8b715 	stw	r2,-23844(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
   41b64:	00247340 	call	24734 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
   41b68:	e13fff17 	ldw	r4,-4(fp)
   41b6c:	00496940 	call	49694 <exit>

00041b70 <evtmap_setup>:
 * INPUT: None.
 * OUTPUT: None
 */
 
void evtmap_setup (void)
{
   41b70:	deffff04 	addi	sp,sp,-4
   41b74:	df000015 	stw	fp,0(sp)
   41b78:	d839883a 	mov	fp,sp
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
   41b7c:	d028ba05 	stb	zero,-23832(gp)
   so_evtmap_create = 0;
   41b80:	d028b815 	stw	zero,-23840(gp)
   so_evtmap_delete = 0;
   41b84:	d028b915 	stw	zero,-23836(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
   41b88:	e037883a 	mov	sp,fp
   41b8c:	df000017 	ldw	fp,0(sp)
   41b90:	dec00104 	addi	sp,sp,4
   41b94:	f800283a 	ret

00041b98 <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
   41b98:	defff904 	addi	sp,sp,-28
   41b9c:	dfc00615 	stw	ra,24(sp)
   41ba0:	df000515 	stw	fp,20(sp)
   41ba4:	df000504 	addi	fp,sp,20
   41ba8:	2005883a 	mov	r2,r4
   41bac:	e17ffd15 	stw	r5,-12(fp)
   41bb0:	e1bffe15 	stw	r6,-8(fp)
   41bb4:	e1ffff15 	stw	r7,-4(fp)
   41bb8:	e0bffc05 	stb	r2,-16(fp)
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
   41bbc:	0009883a 	mov	r4,zero
   41bc0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
   41bc4:	01000604 	movi	r4,24
   41bc8:	002bce00 	call	2bce0 <npalloc>
   41bcc:	e0bffb15 	stw	r2,-20(fp)
   if (ep == NULL)
   41bd0:	e0bffb17 	ldw	r2,-20(fp)
   41bd4:	10000c1e 	bne	r2,zero,41c08 <ip_raw_open+0x70>
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
   41bd8:	00800174 	movhi	r2,5
   41bdc:	108f9904 	addi	r2,r2,15972
   41be0:	10800017 	ldw	r2,0(r2)
   41be4:	1080010c 	andi	r2,r2,4
   41be8:	10000326 	beq	r2,zero,41bf8 <ip_raw_open+0x60>
         dprintf("IP: Couldn't allocate ep storage.\n");
   41bec:	01000174 	movhi	r4,5
   41bf0:	213d5b04 	addi	r4,r4,-2708
   41bf4:	00083740 	call	8374 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
   41bf8:	0009883a 	mov	r4,zero
   41bfc:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ep;
   41c00:	e0bffb17 	ldw	r2,-20(fp)
   41c04:	00001706 	br	41c64 <ip_raw_open+0xcc>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
   41c08:	e0bffb17 	ldw	r2,-20(fp)
   41c0c:	e0fffd17 	ldw	r3,-12(fp)
   41c10:	10c00115 	stw	r3,4(r2)
   ep->ipr_faddr = faddr;
   41c14:	e0bffb17 	ldw	r2,-20(fp)
   41c18:	e0fffe17 	ldw	r3,-8(fp)
   41c1c:	10c00215 	stw	r3,8(r2)
   ep->ipr_prot = prot;
   41c20:	e0bffb17 	ldw	r2,-20(fp)
   41c24:	e0fffc03 	ldbu	r3,-16(fp)
   41c28:	10c00505 	stb	r3,20(r2)
   ep->ipr_rcv = handler;
   41c2c:	e0bffb17 	ldw	r2,-20(fp)
   41c30:	e0ffff17 	ldw	r3,-4(fp)
   41c34:	10c00315 	stw	r3,12(r2)
   ep->ipr_data = data;
   41c38:	e0bffb17 	ldw	r2,-20(fp)
   41c3c:	e0c00217 	ldw	r3,8(fp)
   41c40:	10c00415 	stw	r3,16(r2)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
   41c44:	d0e8bb17 	ldw	r3,-23828(gp)
   41c48:	e0bffb17 	ldw	r2,-20(fp)
   41c4c:	10c00015 	stw	r3,0(r2)
   ipraw_eps = ep;
   41c50:	e0bffb17 	ldw	r2,-20(fp)
   41c54:	d0a8bb15 	stw	r2,-23828(gp)

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
   41c58:	0009883a 	mov	r4,zero
   41c5c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return ep;
   41c60:	e0bffb17 	ldw	r2,-20(fp)
}
   41c64:	e037883a 	mov	sp,fp
   41c68:	dfc00117 	ldw	ra,4(sp)
   41c6c:	df000017 	ldw	fp,0(sp)
   41c70:	dec00204 	addi	sp,sp,8
   41c74:	f800283a 	ret

00041c78 <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
   41c78:	defffb04 	addi	sp,sp,-20
   41c7c:	dfc00415 	stw	ra,16(sp)
   41c80:	df000315 	stw	fp,12(sp)
   41c84:	df000304 	addi	fp,sp,12
   41c88:	e13fff15 	stw	r4,-4(fp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
   41c8c:	0009883a 	mov	r4,zero
   41c90:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
   41c94:	e03ffd15 	stw	zero,-12(fp)
   41c98:	d0a8bb17 	ldw	r2,-23828(gp)
   41c9c:	e0bffe15 	stw	r2,-8(fp)
   41ca0:	00000906 	br	41cc8 <ip_raw_close+0x50>
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
   41ca4:	e0fffe17 	ldw	r3,-8(fp)
   41ca8:	e0bfff17 	ldw	r2,-4(fp)
   41cac:	1880011e 	bne	r3,r2,41cb4 <ip_raw_close+0x3c>
         break;
   41cb0:	00000706 	br	41cd0 <ip_raw_close+0x58>
      prev_ep = curr_ep;
   41cb4:	e0bffe17 	ldw	r2,-8(fp)
   41cb8:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
   41cbc:	e0bffe17 	ldw	r2,-8(fp)
   41cc0:	10800017 	ldw	r2,0(r2)
   41cc4:	e0bffe15 	stw	r2,-8(fp)
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
   41cc8:	e0bffe17 	ldw	r2,-8(fp)
   41ccc:	103ff51e 	bne	r2,zero,41ca4 <__alt_mem_descriptor_memory+0xdf001ca4>
         break;
      prev_ep = curr_ep;
   }

   /* if we didn't find it, we can't close it, so just return */
   if (curr_ep == NULL)
   41cd0:	e0bffe17 	ldw	r2,-8(fp)
   41cd4:	1000041e 	bne	r2,zero,41ce8 <ip_raw_close+0x70>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
   41cd8:	002b0f40 	call	2b0f4 <dtrap>
#endif /* NPDEBUG */
      UNLOCK_NET_RESOURCE(NET_RESID);
   41cdc:	0009883a 	mov	r4,zero
   41ce0:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return;
   41ce4:	00000d06 	br	41d1c <ip_raw_close+0xa4>
   }

   /* unlink it from the list */
   if (prev_ep)
   41ce8:	e0bffd17 	ldw	r2,-12(fp)
   41cec:	10000426 	beq	r2,zero,41d00 <ip_raw_close+0x88>
      prev_ep = curr_ep->ipr_next;
   41cf0:	e0bffe17 	ldw	r2,-8(fp)
   41cf4:	10800017 	ldw	r2,0(r2)
   41cf8:	e0bffd15 	stw	r2,-12(fp)
   41cfc:	00000306 	br	41d0c <ip_raw_close+0x94>
   else
      ipraw_eps = curr_ep->ipr_next;
   41d00:	e0bffe17 	ldw	r2,-8(fp)
   41d04:	10800017 	ldw	r2,0(r2)
   41d08:	d0a8bb15 	stw	r2,-23828(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
   41d0c:	e13ffe17 	ldw	r4,-8(fp)
   41d10:	002bd140 	call	2bd14 <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
   41d14:	0009883a 	mov	r4,zero
   41d18:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
}
   41d1c:	e037883a 	mov	sp,fp
   41d20:	dfc00117 	ldw	ra,4(sp)
   41d24:	df000017 	ldw	fp,0(sp)
   41d28:	dec00204 	addi	sp,sp,8
   41d2c:	f800283a 	ret

00041d30 <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
   41d30:	defff604 	addi	sp,sp,-40
   41d34:	dfc00915 	stw	ra,36(sp)
   41d38:	df000815 	stw	fp,32(sp)
   41d3c:	df000804 	addi	fp,sp,32
   41d40:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;              /* the internet header */
   struct ipraw_ep * ep;
   struct ipraw_ep * next_ep;
   struct ipraw_ep * matched_ep = NULL;
   41d44:	e03ff915 	stw	zero,-28(fp)
   int err;
   int delivered;

   /* start out expecting to not deliver the packet */
   delivered = 0;
   41d48:	e03ffb15 	stw	zero,-20(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
   41d4c:	e0bfff17 	ldw	r2,-4(fp)
   41d50:	10800317 	ldw	r2,12(r2)
   41d54:	e0bffc15 	stw	r2,-16(fp)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
   41d58:	d0a8bb17 	ldw	r2,-23828(gp)
   41d5c:	e0bff815 	stw	r2,-32(fp)
   41d60:	00004906 	br	41e88 <ip_raw_input+0x158>
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
   41d64:	e0bff817 	ldw	r2,-32(fp)
   41d68:	10800017 	ldw	r2,0(r2)
   41d6c:	e0bffd15 	stw	r2,-12(fp)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
   41d70:	e0bff817 	ldw	r2,-32(fp)
   41d74:	10800503 	ldbu	r2,20(r2)
   41d78:	10803fcc 	andi	r2,r2,255
   41d7c:	10000826 	beq	r2,zero,41da0 <ip_raw_input+0x70>
   41d80:	e0bff817 	ldw	r2,-32(fp)
   41d84:	10c00503 	ldbu	r3,20(r2)
   41d88:	e0bffc17 	ldw	r2,-16(fp)
   41d8c:	10800243 	ldbu	r2,9(r2)
   41d90:	18c03fcc 	andi	r3,r3,255
   41d94:	10803fcc 	andi	r2,r2,255
   41d98:	18800126 	beq	r3,r2,41da0 <ip_raw_input+0x70>
         continue;
   41d9c:	00003806 	br	41e80 <ip_raw_input+0x150>
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
   41da0:	e0bff817 	ldw	r2,-32(fp)
   41da4:	10800117 	ldw	r2,4(r2)
   41da8:	10000626 	beq	r2,zero,41dc4 <ip_raw_input+0x94>
   41dac:	e0bff817 	ldw	r2,-32(fp)
   41db0:	10c00117 	ldw	r3,4(r2)
   41db4:	e0bffc17 	ldw	r2,-16(fp)
   41db8:	10800417 	ldw	r2,16(r2)
   41dbc:	18800126 	beq	r3,r2,41dc4 <ip_raw_input+0x94>
         continue;
   41dc0:	00002f06 	br	41e80 <ip_raw_input+0x150>
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
   41dc4:	e0bff817 	ldw	r2,-32(fp)
   41dc8:	10800217 	ldw	r2,8(r2)
   41dcc:	10000626 	beq	r2,zero,41de8 <ip_raw_input+0xb8>
   41dd0:	e0bff817 	ldw	r2,-32(fp)
   41dd4:	10c00217 	ldw	r3,8(r2)
   41dd8:	e0bffc17 	ldw	r2,-16(fp)
   41ddc:	10800317 	ldw	r2,12(r2)
   41de0:	18800126 	beq	r3,r2,41de8 <ip_raw_input+0xb8>
         continue;
   41de4:	00002606 	br	41e80 <ip_raw_input+0x150>

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
   41de8:	e0bff817 	ldw	r2,-32(fp)
   41dec:	10800317 	ldw	r2,12(r2)
   41df0:	10002326 	beq	r2,zero,41e80 <ip_raw_input+0x150>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
   41df4:	e0bff917 	ldw	r2,-28(fp)
   41df8:	10001f26 	beq	r2,zero,41e78 <ip_raw_input+0x148>
   41dfc:	e0bff917 	ldw	r2,-28(fp)
   41e00:	10800317 	ldw	r2,12(r2)
   41e04:	10001c26 	beq	r2,zero,41e78 <ip_raw_input+0x148>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
   41e08:	e13fff17 	ldw	r4,-4(fp)
   41e0c:	003ed180 	call	3ed18 <ip_copypkt>
   41e10:	e0bffe15 	stw	r2,-8(fp)
            if (p2)
   41e14:	e0bffe17 	ldw	r2,-8(fp)
   41e18:	10001726 	beq	r2,zero,41e78 <ip_raw_input+0x148>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
   41e1c:	0009883a 	mov	r4,zero
   41e20:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
   41e24:	e0bff917 	ldw	r2,-28(fp)
   41e28:	10800317 	ldw	r2,12(r2)
   41e2c:	e0fff917 	ldw	r3,-28(fp)
   41e30:	18c00417 	ldw	r3,16(r3)
   41e34:	e13ffe17 	ldw	r4,-8(fp)
   41e38:	180b883a 	mov	r5,r3
   41e3c:	103ee83a 	callr	r2
   41e40:	e0bffa15 	stw	r2,-24(fp)
               LOCK_NET_RESOURCE(NET_RESID);
   41e44:	0009883a 	mov	r4,zero
   41e48:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
               if (err)
   41e4c:	e0bffa17 	ldw	r2,-24(fp)
   41e50:	10000726 	beq	r2,zero,41e70 <ip_raw_input+0x140>
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
   41e54:	01000084 	movi	r4,2
   41e58:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
                  pk_free(p2);
   41e5c:	e13ffe17 	ldw	r4,-8(fp)
   41e60:	002a8940 	call	2a894 <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
   41e64:	01000084 	movi	r4,2
   41e68:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   41e6c:	00000206 	br	41e78 <ip_raw_input+0x148>
               }
               else
                  delivered = 1;
   41e70:	00800044 	movi	r2,1
   41e74:	e0bffb15 	stw	r2,-20(fp)
            }
         }
         matched_ep = ep;
   41e78:	e0bff817 	ldw	r2,-32(fp)
   41e7c:	e0bff915 	stw	r2,-28(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
   41e80:	e0bffd17 	ldw	r2,-12(fp)
   41e84:	e0bff815 	stw	r2,-32(fp)
   41e88:	e0bff817 	ldw	r2,-32(fp)
   41e8c:	103fb51e 	bne	r2,zero,41d64 <__alt_mem_descriptor_memory+0xdf001d64>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
   41e90:	e0bff917 	ldw	r2,-28(fp)
   41e94:	10001526 	beq	r2,zero,41eec <ip_raw_input+0x1bc>
   41e98:	e0bff917 	ldw	r2,-28(fp)
   41e9c:	10800317 	ldw	r2,12(r2)
   41ea0:	10001226 	beq	r2,zero,41eec <ip_raw_input+0x1bc>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
   41ea4:	0009883a 	mov	r4,zero
   41ea8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
   41eac:	e0bff917 	ldw	r2,-28(fp)
   41eb0:	10800317 	ldw	r2,12(r2)
   41eb4:	e0fff917 	ldw	r3,-28(fp)
   41eb8:	18c00417 	ldw	r3,16(r3)
   41ebc:	e13fff17 	ldw	r4,-4(fp)
   41ec0:	180b883a 	mov	r5,r3
   41ec4:	103ee83a 	callr	r2
   41ec8:	e0bffa15 	stw	r2,-24(fp)
      LOCK_NET_RESOURCE(NET_RESID);
   41ecc:	0009883a 	mov	r4,zero
   41ed0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      if (err == 0)
   41ed4:	e0bffa17 	ldw	r2,-24(fp)
   41ed8:	1000031e 	bne	r2,zero,41ee8 <ip_raw_input+0x1b8>
         delivered = 1;
   41edc:	00800044 	movi	r2,1
   41ee0:	e0bffb15 	stw	r2,-20(fp)
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
      LOCK_NET_RESOURCE(NET_RESID);
      if (err == 0)
   41ee4:	00000a06 	br	41f10 <ip_raw_input+0x1e0>
   41ee8:	00000906 	br	41f10 <ip_raw_input+0x1e0>
         delivered = 1;
   }
   else
   {
      err = ENP_PARAM;
   41eec:	00bffd84 	movi	r2,-10
   41ef0:	e0bffa15 	stw	r2,-24(fp)
      ip_mib.ipUnknownProtos++;
   41ef4:	008001b4 	movhi	r2,6
   41ef8:	10b9e104 	addi	r2,r2,-6268
   41efc:	10800617 	ldw	r2,24(r2)
   41f00:	10c00044 	addi	r3,r2,1
   41f04:	008001b4 	movhi	r2,6
   41f08:	10b9e104 	addi	r2,r2,-6268
   41f0c:	10c00615 	stw	r3,24(r2)
   }

   if (!delivered)
   41f10:	e0bffb17 	ldw	r2,-20(fp)
   41f14:	1000071e 	bne	r2,zero,41f34 <ip_raw_input+0x204>
      ip_mib.ipInDelivers--;
   41f18:	008001b4 	movhi	r2,6
   41f1c:	10b9e104 	addi	r2,r2,-6268
   41f20:	10800817 	ldw	r2,32(r2)
   41f24:	10ffffc4 	addi	r3,r2,-1
   41f28:	008001b4 	movhi	r2,6
   41f2c:	10b9e104 	addi	r2,r2,-6268
   41f30:	10c00815 	stw	r3,32(r2)

   return err;
   41f34:	e0bffa17 	ldw	r2,-24(fp)
}
   41f38:	e037883a 	mov	sp,fp
   41f3c:	dfc00117 	ldw	ra,4(sp)
   41f40:	df000017 	ldw	fp,0(sp)
   41f44:	dec00204 	addi	sp,sp,8
   41f48:	f800283a 	ret

00041f4c <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
   41f4c:	defffa04 	addi	sp,sp,-24
   41f50:	dfc00515 	stw	ra,20(sp)
   41f54:	df000415 	stw	fp,16(sp)
   41f58:	df000404 	addi	fp,sp,16
   41f5c:	e13ffe15 	stw	r4,-8(fp)
   41f60:	e17fff15 	stw	r5,-4(fp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
   41f64:	e0bffe17 	ldw	r2,-8(fp)
   41f68:	10c00044 	addi	r3,r2,1
   41f6c:	00bfff84 	movi	r2,-2
   41f70:	1884703a 	and	r2,r3,r2
   41f74:	e0bffc15 	stw	r2,-16(fp)
   if (!hdrincl)
   41f78:	e0bfff17 	ldw	r2,-4(fp)
   41f7c:	1000031e 	bne	r2,zero,41f8c <ip_raw_alloc+0x40>
      len += IPHSIZ;
   41f80:	e0bffc17 	ldw	r2,-16(fp)
   41f84:	10800504 	addi	r2,r2,20
   41f88:	e0bffc15 	stw	r2,-16(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   41f8c:	01000084 	movi	r4,2
   41f90:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
   41f94:	00800174 	movhi	r2,5
   41f98:	108f9704 	addi	r2,r2,15964
   41f9c:	10c00017 	ldw	r3,0(r2)
   41fa0:	e0bffc17 	ldw	r2,-16(fp)
   41fa4:	1885883a 	add	r2,r3,r2
   41fa8:	1009883a 	mov	r4,r2
   41fac:	002a53c0 	call	2a53c <pk_alloc>
   41fb0:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   41fb4:	01000084 	movi	r4,2
   41fb8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   if (p)
   41fbc:	e0bffd17 	ldw	r2,-12(fp)
   41fc0:	10000c26 	beq	r2,zero,41ff4 <ip_raw_alloc+0xa8>
   {
      if (!hdrincl)
   41fc4:	e0bfff17 	ldw	r2,-4(fp)
   41fc8:	10000a1e 	bne	r2,zero,41ff4 <ip_raw_alloc+0xa8>
      {
         p->nb_prot += IPHSIZ;
   41fcc:	e0bffd17 	ldw	r2,-12(fp)
   41fd0:	10800317 	ldw	r2,12(r2)
   41fd4:	10c00504 	addi	r3,r2,20
   41fd8:	e0bffd17 	ldw	r2,-12(fp)
   41fdc:	10c00315 	stw	r3,12(r2)
         p->nb_plen -= IPHSIZ;
   41fe0:	e0bffd17 	ldw	r2,-12(fp)
   41fe4:	10800417 	ldw	r2,16(r2)
   41fe8:	10fffb04 	addi	r3,r2,-20
   41fec:	e0bffd17 	ldw	r2,-12(fp)
   41ff0:	10c00415 	stw	r3,16(r2)
      }
   }
   return p;
   41ff4:	e0bffd17 	ldw	r2,-12(fp)
}
   41ff8:	e037883a 	mov	sp,fp
   41ffc:	dfc00117 	ldw	ra,4(sp)
   42000:	df000017 	ldw	fp,0(sp)
   42004:	dec00204 	addi	sp,sp,8
   42008:	f800283a 	ret

0004200c <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
   4200c:	defffd04 	addi	sp,sp,-12
   42010:	dfc00215 	stw	ra,8(sp)
   42014:	df000115 	stw	fp,4(sp)
   42018:	df000104 	addi	fp,sp,4
   4201c:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   42020:	01000084 	movi	r4,2
   42024:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   42028:	e13fff17 	ldw	r4,-4(fp)
   4202c:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   42030:	01000084 	movi	r4,2
   42034:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
}
   42038:	e037883a 	mov	sp,fp
   4203c:	dfc00117 	ldw	ra,4(sp)
   42040:	df000017 	ldw	fp,0(sp)
   42044:	dec00204 	addi	sp,sp,8
   42048:	f800283a 	ret

0004204c <ip_raw_maxalloc>:
 *          for 
 */

int
ip_raw_maxalloc(int hdrincl)
{
   4204c:	defffd04 	addi	sp,sp,-12
   42050:	df000215 	stw	fp,8(sp)
   42054:	df000204 	addi	fp,sp,8
   42058:	e13fff15 	stw	r4,-4(fp)
   int len;

   len = bigbufsiz - MaxLnh;
   4205c:	00800174 	movhi	r2,5
   42060:	10876004 	addi	r2,r2,7552
   42064:	10c00017 	ldw	r3,0(r2)
   42068:	00800174 	movhi	r2,5
   4206c:	108f9704 	addi	r2,r2,15964
   42070:	10800017 	ldw	r2,0(r2)
   42074:	1885c83a 	sub	r2,r3,r2
   42078:	e0bffe15 	stw	r2,-8(fp)
   if (!hdrincl)
   4207c:	e0bfff17 	ldw	r2,-4(fp)
   42080:	1000031e 	bne	r2,zero,42090 <ip_raw_maxalloc+0x44>
      len -= IPHSIZ;
   42084:	e0bffe17 	ldw	r2,-8(fp)
   42088:	10bffb04 	addi	r2,r2,-20
   4208c:	e0bffe15 	stw	r2,-8(fp)
   return len;
   42090:	e0bffe17 	ldw	r2,-8(fp)
}
   42094:	e037883a 	mov	sp,fp
   42098:	df000017 	ldw	fp,0(sp)
   4209c:	dec00104 	addi	sp,sp,4
   420a0:	f800283a 	ret

000420a4 <rt_lookup>:
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
   420a4:	defff804 	addi	sp,sp,-32
   420a8:	df000715 	stw	fp,28(sp)
   420ac:	df000704 	addi	fp,sp,28
   420b0:	e13fff15 	stw	r4,-4(fp)
   RTMIB    rtp;
   RTMIB    netmatch;
   unsigned char max_bits_matched = 0;
   420b4:	e03ffb05 	stb	zero,-20(fp)
   unsigned char curr_bits_matched;
   ip_addr  entry_mask;
   unsigned long int bitcount_mask;
   unsigned long int extracted_bit;

   netmatch = NULL;
   420b8:	e03ffa15 	stw	zero,-24(fp)

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   420bc:	00800174 	movhi	r2,5
   420c0:	108fdc04 	addi	r2,r2,16240
   420c4:	10800017 	ldw	r2,0(r2)
   420c8:	e0bff915 	stw	r2,-28(fp)
   420cc:	00003a06 	br	421b8 <rt_lookup+0x114>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
   420d0:	e0bff917 	ldw	r2,-28(fp)
   420d4:	10800617 	ldw	r2,24(r2)
   420d8:	1000011e 	bne	r2,zero,420e0 <rt_lookup+0x3c>
         continue;
   420dc:	00003306 	br	421ac <rt_lookup+0x108>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
   420e0:	e0bff917 	ldw	r2,-28(fp)
   420e4:	10800a17 	ldw	r2,40(r2)
   420e8:	e0bffd15 	stw	r2,-12(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
   420ec:	e0bff917 	ldw	r2,-28(fp)
   420f0:	10c00017 	ldw	r3,0(r2)
   420f4:	e0bfff17 	ldw	r2,-4(fp)
   420f8:	1886f03a 	xor	r3,r3,r2
   420fc:	e0bffd17 	ldw	r2,-12(fp)
   42100:	1884703a 	and	r2,r3,r2
   42104:	1000291e 	bne	r2,zero,421ac <rt_lookup+0x108>
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
   42108:	e03ffb45 	stb	zero,-19(fp)
   4210c:	00a00034 	movhi	r2,32768
   42110:	e0bffc15 	stw	r2,-16(fp)
   42114:	00001806 	br	42178 <rt_lookup+0xd4>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
   42118:	e0bffd17 	ldw	r2,-12(fp)
   4211c:	1006d63a 	srli	r3,r2,24
   42120:	e0bffd17 	ldw	r2,-12(fp)
   42124:	1004d23a 	srli	r2,r2,8
   42128:	10bfc00c 	andi	r2,r2,65280
   4212c:	1886b03a 	or	r3,r3,r2
   42130:	e0bffd17 	ldw	r2,-12(fp)
   42134:	10bfc00c 	andi	r2,r2,65280
   42138:	1004923a 	slli	r2,r2,8
   4213c:	1886b03a 	or	r3,r3,r2
   42140:	e0bffd17 	ldw	r2,-12(fp)
   42144:	1004963a 	slli	r2,r2,24
   42148:	1886b03a 	or	r3,r3,r2
   4214c:	e0bffc17 	ldw	r2,-16(fp)
   42150:	1884703a 	and	r2,r3,r2
   42154:	e0bffe15 	stw	r2,-8(fp)
            if (extracted_bit) ++curr_bits_matched;
   42158:	e0bffe17 	ldw	r2,-8(fp)
   4215c:	10000326 	beq	r2,zero,4216c <rt_lookup+0xc8>
   42160:	e0bffb43 	ldbu	r2,-19(fp)
   42164:	10800044 	addi	r2,r2,1
   42168:	e0bffb45 	stb	r2,-19(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
   4216c:	e0bffc17 	ldw	r2,-16(fp)
   42170:	1004d07a 	srli	r2,r2,1
   42174:	e0bffc15 	stw	r2,-16(fp)
   42178:	e0bffc17 	ldw	r2,-16(fp)
   4217c:	103fe61e 	bne	r2,zero,42118 <__alt_mem_descriptor_memory+0xdf002118>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
         }
         if (curr_bits_matched > max_bits_matched)
   42180:	e0bffb43 	ldbu	r2,-19(fp)
   42184:	e0fffb03 	ldbu	r3,-20(fp)
   42188:	1880082e 	bgeu	r3,r2,421ac <rt_lookup+0x108>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
   4218c:	e0bffb43 	ldbu	r2,-19(fp)
   42190:	e0bffb05 	stb	r2,-20(fp)
            netmatch = rtp;
   42194:	e0bff917 	ldw	r2,-28(fp)
   42198:	e0bffa15 	stw	r2,-24(fp)
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
   4219c:	e0bffb03 	ldbu	r2,-20(fp)
   421a0:	10800818 	cmpnei	r2,r2,32
   421a4:	1000011e 	bne	r2,zero,421ac <rt_lookup+0x108>
               break;
   421a8:	00000d06 	br	421e0 <rt_lookup+0x13c>
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   421ac:	e0bff917 	ldw	r2,-28(fp)
   421b0:	10800f04 	addi	r2,r2,60
   421b4:	e0bff915 	stw	r2,-28(fp)
   421b8:	00800174 	movhi	r2,5
   421bc:	108fdc04 	addi	r2,r2,16240
   421c0:	10c00017 	ldw	r3,0(r2)
   421c4:	00800174 	movhi	r2,5
   421c8:	10877804 	addi	r2,r2,7648
   421cc:	10800017 	ldw	r2,0(r2)
   421d0:	10800f24 	muli	r2,r2,60
   421d4:	1885883a 	add	r2,r3,r2
   421d8:	e0fff917 	ldw	r3,-28(fp)
   421dc:	18bfbc36 	bltu	r3,r2,420d0 <__alt_mem_descriptor_memory+0xdf0020d0>
               break;
         }
      }
   }

   if (netmatch)
   421e0:	e0bffa17 	ldw	r2,-24(fp)
   421e4:	10000526 	beq	r2,zero,421fc <rt_lookup+0x158>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
   421e8:	00800174 	movhi	r2,5
   421ec:	108fbe04 	addi	r2,r2,16120
   421f0:	10c00017 	ldw	r3,0(r2)
   421f4:	e0bffa17 	ldw	r2,-24(fp)
   421f8:	10c00915 	stw	r3,36(r2)

   return netmatch;
   421fc:	e0bffa17 	ldw	r2,-24(fp)
}
   42200:	e037883a 	mov	sp,fp
   42204:	df000017 	ldw	fp,0(sp)
   42208:	dec00104 	addi	sp,sp,4
   4220c:	f800283a 	ret

00042210 <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
   42210:	defff704 	addi	sp,sp,-36
   42214:	dfc00815 	stw	ra,32(sp)
   42218:	df000715 	stw	fp,28(sp)
   4221c:	df000704 	addi	fp,sp,28
   42220:	e13ffc15 	stw	r4,-16(fp)
   42224:	e17ffd15 	stw	r5,-12(fp)
   42228:	e1bffe15 	stw	r6,-8(fp)
   4222c:	e1ffff15 	stw	r7,-4(fp)
   RTMIB rtp;           /* scratch route table entrry pointer */
   RTMIB newrt;         /* best entry for new route */
   struct net * ifp;    /* interface (net) for nexthop */

   newrt = NULL;     /* may be replaced with empty or more expendable entry */
   42230:	e03ffa15 	stw	zero,-24(fp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
   42234:	e13fff17 	ldw	r4,-4(fp)
   42238:	003cb900 	call	3cb90 <if_getbynum>
   4223c:	e0bffb15 	stw	r2,-20(fp)
   if(!ifp)
   42240:	e0bffb17 	ldw	r2,-20(fp)
   42244:	1000021e 	bne	r2,zero,42250 <add_route+0x40>
      return NULL;
   42248:	0005883a 	mov	r2,zero
   4224c:	0000e606 	br	425e8 <add_route+0x3d8>

   if (rt_mib == NULL)
   42250:	00800174 	movhi	r2,5
   42254:	108fdc04 	addi	r2,r2,16240
   42258:	10800017 	ldw	r2,0(r2)
   4225c:	1000021e 	bne	r2,zero,42268 <add_route+0x58>
      return NULL;
   42260:	0005883a 	mov	r2,zero
   42264:	0000e006 	br	425e8 <add_route+0x3d8>

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
   42268:	e0bffc17 	ldw	r2,-16(fp)
   4226c:	10000226 	beq	r2,zero,42278 <add_route+0x68>
   42270:	e0bffd17 	ldw	r2,-12(fp)
   42274:	1000211e 	bne	r2,zero,422fc <add_route+0xec>
   {
      dtrap();    /* bad configuration? */
   42278:	002b0f40 	call	2b0f4 <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
	      htonl(dest), htonl(mask) );
   4227c:	e0bffc17 	ldw	r2,-16(fp)
   42280:	1006d63a 	srli	r3,r2,24
   42284:	e0bffc17 	ldw	r2,-16(fp)
   42288:	1004d23a 	srli	r2,r2,8
   4228c:	10bfc00c 	andi	r2,r2,65280
   42290:	1886b03a 	or	r3,r3,r2
   42294:	e0bffc17 	ldw	r2,-16(fp)
   42298:	10bfc00c 	andi	r2,r2,65280
   4229c:	1004923a 	slli	r2,r2,8
   422a0:	1886b03a 	or	r3,r3,r2
   422a4:	e0bffc17 	ldw	r2,-16(fp)
   422a8:	1004963a 	slli	r2,r2,24
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
   {
      dtrap();    /* bad configuration? */
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
   422ac:	188ab03a 	or	r5,r3,r2
	      htonl(dest), htonl(mask) );
   422b0:	e0bffd17 	ldw	r2,-12(fp)
   422b4:	1006d63a 	srli	r3,r2,24
   422b8:	e0bffd17 	ldw	r2,-12(fp)
   422bc:	1004d23a 	srli	r2,r2,8
   422c0:	10bfc00c 	andi	r2,r2,65280
   422c4:	1886b03a 	or	r3,r3,r2
   422c8:	e0bffd17 	ldw	r2,-12(fp)
   422cc:	10bfc00c 	andi	r2,r2,65280
   422d0:	1004923a 	slli	r2,r2,8
   422d4:	1886b03a 	or	r3,r3,r2
   422d8:	e0bffd17 	ldw	r2,-12(fp)
   422dc:	1004963a 	slli	r2,r2,24
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
   {
      dtrap();    /* bad configuration? */
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
   422e0:	1884b03a 	or	r2,r3,r2
   422e4:	01000174 	movhi	r4,5
   422e8:	213d6404 	addi	r4,r4,-2672
   422ec:	100d883a 	mov	r6,r2
   422f0:	00080f80 	call	80f8 <printf>
	      htonl(dest), htonl(mask) );
      return NULL;
   422f4:	0005883a 	mov	r2,zero
   422f8:	0000bb06 	br	425e8 <add_route+0x3d8>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   422fc:	00800174 	movhi	r2,5
   42300:	108fdc04 	addi	r2,r2,16240
   42304:	10800017 	ldw	r2,0(r2)
   42308:	e0bff915 	stw	r2,-28(fp)
   4230c:	00006c06 	br	424c0 <add_route+0x2b0>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
   42310:	e0bff917 	ldw	r2,-28(fp)
   42314:	10c00017 	ldw	r3,0(r2)
   42318:	e0bffc17 	ldw	r2,-16(fp)
   4231c:	1880171e 	bne	r3,r2,4237c <add_route+0x16c>
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
   42320:	e0bff917 	ldw	r2,-28(fp)
   42324:	e0fffe17 	ldw	r3,-8(fp)
   42328:	10c00615 	stw	r3,24(r2)
         rtp->ipRouteAge = cticks;           /* timestamp it */
   4232c:	00800174 	movhi	r2,5
   42330:	108fbe04 	addi	r2,r2,16120
   42334:	10c00017 	ldw	r3,0(r2)
   42338:	e0bff917 	ldw	r2,-28(fp)
   4233c:	10c00915 	stw	r3,36(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
   42340:	e0bfff17 	ldw	r2,-4(fp)
   42344:	10c00044 	addi	r3,r2,1
   42348:	e0bff917 	ldw	r2,-28(fp)
   4234c:	10c00115 	stw	r3,4(r2)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
   42350:	e0bff917 	ldw	r2,-28(fp)
   42354:	e0c00217 	ldw	r3,8(fp)
   42358:	10c00815 	stw	r3,32(r2)
         rtp->ipRouteMask = mask;
   4235c:	e0bff917 	ldw	r2,-28(fp)
   42360:	e0fffd17 	ldw	r3,-12(fp)
   42364:	10c00a15 	stw	r3,40(r2)
         rtp->ifp = ifp;
   42368:	e0bff917 	ldw	r2,-28(fp)
   4236c:	e0fffb17 	ldw	r3,-20(fp)
   42370:	10c00e15 	stw	r3,56(r2)
         return(rtp);   /* just update and exit */
   42374:	e0bff917 	ldw	r2,-28(fp)
   42378:	00009b06 	br	425e8 <add_route+0x3d8>
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
   4237c:	e0bffa17 	ldw	r2,-24(fp)
   42380:	10000326 	beq	r2,zero,42390 <add_route+0x180>
   42384:	e0bffa17 	ldw	r2,-24(fp)
   42388:	10800817 	ldw	r2,32(r2)
   4238c:	10004926 	beq	r2,zero,424b4 <add_route+0x2a4>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
   42390:	e0bff917 	ldw	r2,-28(fp)
   42394:	10800617 	ldw	r2,24(r2)
   42398:	1000051e 	bne	r2,zero,423b0 <add_route+0x1a0>
         {
            newrt = rtp;   /* record empty route for use */
   4239c:	e0bff917 	ldw	r2,-28(fp)
   423a0:	e0bffa15 	stw	r2,-24(fp)
            newrt->ipRouteProto = 0;
   423a4:	e0bffa17 	ldw	r2,-24(fp)
   423a8:	10000815 	stw	zero,32(r2)
            continue;
   423ac:	00004106 	br	424b4 <add_route+0x2a4>
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
   423b0:	00800174 	movhi	r2,5
   423b4:	1086cc04 	addi	r2,r2,6960
   423b8:	e0c00217 	ldw	r3,8(fp)
   423bc:	10c5883a 	add	r2,r2,r3
   423c0:	11000003 	ldbu	r4,0(r2)
   423c4:	e0bff917 	ldw	r2,-28(fp)
   423c8:	10c00817 	ldw	r3,32(r2)
   423cc:	00800174 	movhi	r2,5
   423d0:	1086cc04 	addi	r2,r2,6960
   423d4:	10c5883a 	add	r2,r2,r3
   423d8:	10800003 	ldbu	r2,0(r2)
   423dc:	20c03fcc 	andi	r3,r4,255
   423e0:	10803fcc 	andi	r2,r2,255
   423e4:	18803336 	bltu	r3,r2,424b4 <add_route+0x2a4>
         {
            if (!newrt)
   423e8:	e0bffa17 	ldw	r2,-24(fp)
   423ec:	1000031e 	bne	r2,zero,423fc <add_route+0x1ec>
            {
               newrt = rtp;
   423f0:	e0bff917 	ldw	r2,-28(fp)
   423f4:	e0bffa15 	stw	r2,-24(fp)
               continue;
   423f8:	00002e06 	br	424b4 <add_route+0x2a4>
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
   423fc:	e0bff917 	ldw	r2,-28(fp)
   42400:	10c00817 	ldw	r3,32(r2)
   42404:	00800174 	movhi	r2,5
   42408:	1086cc04 	addi	r2,r2,6960
   4240c:	10c5883a 	add	r2,r2,r3
   42410:	11000003 	ldbu	r4,0(r2)
                rtp_priority[newrt->ipRouteProto])
   42414:	e0bffa17 	ldw	r2,-24(fp)
   42418:	10c00817 	ldw	r3,32(r2)
   4241c:	00800174 	movhi	r2,5
   42420:	1086cc04 	addi	r2,r2,6960
   42424:	10c5883a 	add	r2,r2,r3
   42428:	10800003 	ldbu	r2,0(r2)
               newrt = rtp;
               continue;
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
   4242c:	20c03fcc 	andi	r3,r4,255
   42430:	10803fcc 	andi	r2,r2,255
   42434:	1880032e 	bgeu	r3,r2,42444 <add_route+0x234>
                rtp_priority[newrt->ipRouteProto])
            {
               newrt = rtp;   /* save lower priority entry for recycle */
   42438:	e0bff917 	ldw	r2,-28(fp)
   4243c:	e0bffa15 	stw	r2,-24(fp)
   42440:	00001c06 	br	424b4 <add_route+0x2a4>
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
   42444:	e0bff917 	ldw	r2,-28(fp)
   42448:	10c00817 	ldw	r3,32(r2)
   4244c:	00800174 	movhi	r2,5
   42450:	1086cc04 	addi	r2,r2,6960
   42454:	10c5883a 	add	r2,r2,r3
   42458:	11000003 	ldbu	r4,0(r2)
                rtp_priority[newrt->ipRouteProto])
   4245c:	e0bffa17 	ldw	r2,-24(fp)
   42460:	10c00817 	ldw	r3,32(r2)
   42464:	00800174 	movhi	r2,5
   42468:	1086cc04 	addi	r2,r2,6960
   4246c:	10c5883a 	add	r2,r2,r3
   42470:	10800003 	ldbu	r2,0(r2)
            if (rtp_priority[rtp->ipRouteProto] < 
                rtp_priority[newrt->ipRouteProto])
            {
               newrt = rtp;   /* save lower priority entry for recycle */
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
   42474:	20c03fcc 	andi	r3,r4,255
   42478:	10803fcc 	andi	r2,r2,255
   4247c:	18800d1e 	bne	r3,r2,424b4 <add_route+0x2a4>
                rtp_priority[newrt->ipRouteProto])
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
   42480:	e0bff917 	ldw	r2,-28(fp)
   42484:	10c00917 	ldw	r3,36(r2)
   42488:	e0bffa17 	ldw	r2,-24(fp)
   4248c:	10800917 	ldw	r2,36(r2)
   42490:	1809883a 	mov	r4,r3
   42494:	100b883a 	mov	r5,r2
   42498:	00241dc0 	call	241dc <c_older>
   4249c:	1007883a 	mov	r3,r2
   424a0:	e0bff917 	ldw	r2,-28(fp)
   424a4:	10800917 	ldw	r2,36(r2)
   424a8:	1880021e 	bne	r3,r2,424b4 <add_route+0x2a4>
                  newrt = rtp;   /* got an older one */
   424ac:	e0bff917 	ldw	r2,-28(fp)
   424b0:	e0bffa15 	stw	r2,-24(fp)
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   424b4:	e0bff917 	ldw	r2,-28(fp)
   424b8:	10800f04 	addi	r2,r2,60
   424bc:	e0bff915 	stw	r2,-28(fp)
   424c0:	00800174 	movhi	r2,5
   424c4:	108fdc04 	addi	r2,r2,16240
   424c8:	10c00017 	ldw	r3,0(r2)
   424cc:	00800174 	movhi	r2,5
   424d0:	10877804 	addi	r2,r2,7648
   424d4:	10800017 	ldw	r2,0(r2)
   424d8:	10800f24 	muli	r2,r2,60
   424dc:	1885883a 	add	r2,r3,r2
   424e0:	e0fff917 	ldw	r3,-28(fp)
   424e4:	18bf8a36 	bltu	r3,r2,42310 <__alt_mem_descriptor_memory+0xdf002310>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
   424e8:	e0bffa17 	ldw	r2,-24(fp)
   424ec:	10002926 	beq	r2,zero,42594 <add_route+0x384>
      rtp = newrt;   /* create new entry in lowest priority slot */
   424f0:	e0bffa17 	ldw	r2,-24(fp)
   424f4:	e0bff915 	stw	r2,-28(fp)
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
   424f8:	e0bff917 	ldw	r2,-28(fp)
   424fc:	e0fffb17 	ldw	r3,-20(fp)
   42500:	10c00e15 	stw	r3,56(r2)
   rtp->ipRouteDest = dest;
   42504:	e0bff917 	ldw	r2,-28(fp)
   42508:	e0fffc17 	ldw	r3,-16(fp)
   4250c:	10c00015 	stw	r3,0(r2)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
   42510:	e13ffb17 	ldw	r4,-20(fp)
   42514:	00248000 	call	24800 <if_netnumber>
   42518:	10c00044 	addi	r3,r2,1
   4251c:	e0bff917 	ldw	r2,-28(fp)
   42520:	10c00115 	stw	r3,4(r2)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
   42524:	008001b4 	movhi	r2,6
   42528:	10b9e104 	addi	r2,r2,-6268
   4252c:	10800117 	ldw	r2,4(r2)
   42530:	1007883a 	mov	r3,r2
   42534:	e0bff917 	ldw	r2,-28(fp)
   42538:	10c00215 	stw	r3,8(r2)
   rtp->ipRouteMetric2 = -1;
   4253c:	e0bff917 	ldw	r2,-28(fp)
   42540:	00ffffc4 	movi	r3,-1
   42544:	10c00315 	stw	r3,12(r2)
   rtp->ipRouteMetric3 = -1;
   42548:	e0bff917 	ldw	r2,-28(fp)
   4254c:	00ffffc4 	movi	r3,-1
   42550:	10c00415 	stw	r3,16(r2)
   rtp->ipRouteMetric4 = -1;
   42554:	e0bff917 	ldw	r2,-28(fp)
   42558:	00ffffc4 	movi	r3,-1
   4255c:	10c00515 	stw	r3,20(r2)
   rtp->ipRouteNextHop = nexthop;
   42560:	e0bff917 	ldw	r2,-28(fp)
   42564:	e0fffe17 	ldw	r3,-8(fp)
   42568:	10c00615 	stw	r3,24(r2)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
   4256c:	e0bff917 	ldw	r2,-28(fp)
   42570:	e0c00217 	ldw	r3,8(fp)
   42574:	10c00815 	stw	r3,32(r2)

   if ((dest & mask) == (nexthop & mask))
   42578:	e0fffc17 	ldw	r3,-16(fp)
   4257c:	e0bffe17 	ldw	r2,-8(fp)
   42580:	1886f03a 	xor	r3,r3,r2
   42584:	e0bffd17 	ldw	r2,-12(fp)
   42588:	1884703a 	and	r2,r3,r2
   4258c:	1000071e 	bne	r2,zero,425ac <add_route+0x39c>
   42590:	00000206 	br	4259c <add_route+0x38c>

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
      rtp = newrt;   /* create new entry in lowest priority slot */
   else  /* all slots have higher priority, new entry looses */
      return NULL;
   42594:	0005883a 	mov	r2,zero
   42598:	00001306 	br	425e8 <add_route+0x3d8>
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
      rtp->ipRouteType = IPRT_DIRECT;
   4259c:	e0bff917 	ldw	r2,-28(fp)
   425a0:	00c000c4 	movi	r3,3
   425a4:	10c00715 	stw	r3,28(r2)
   425a8:	00000306 	br	425b8 <add_route+0x3a8>
   else
      rtp->ipRouteType = IPRT_INDIRECT;
   425ac:	e0bff917 	ldw	r2,-28(fp)
   425b0:	00c00104 	movi	r3,4
   425b4:	10c00715 	stw	r3,28(r2)

   rtp->ipRouteAge = cticks;        /* timestamp it */
   425b8:	00800174 	movhi	r2,5
   425bc:	108fbe04 	addi	r2,r2,16120
   425c0:	10c00017 	ldw	r3,0(r2)
   425c4:	e0bff917 	ldw	r2,-28(fp)
   425c8:	10c00915 	stw	r3,36(r2)
   rtp->ipRouteMask = mask;
   425cc:	e0bff917 	ldw	r2,-28(fp)
   425d0:	e0fffd17 	ldw	r3,-12(fp)
   425d4:	10c00a15 	stw	r3,40(r2)
   rtp->ipRouteMetric5 = -1;
   425d8:	e0bff917 	ldw	r2,-28(fp)
   425dc:	00ffffc4 	movi	r3,-1
   425e0:	10c00b15 	stw	r3,44(r2)
   return(rtp);
   425e4:	e0bff917 	ldw	r2,-28(fp)
}
   425e8:	e037883a 	mov	sp,fp
   425ec:	dfc00117 	ldw	ra,4(sp)
   425f0:	df000017 	ldw	fp,0(sp)
   425f4:	dec00204 	addi	sp,sp,8
   425f8:	f800283a 	ret

000425fc <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
   425fc:	defff804 	addi	sp,sp,-32
   42600:	dfc00715 	stw	ra,28(sp)
   42604:	df000615 	stw	fp,24(sp)
   42608:	df000604 	addi	fp,sp,24
   4260c:	e13ffd15 	stw	r4,-12(fp)
   42610:	e17ffe15 	stw	r5,-8(fp)
   42614:	e1bfff15 	stw	r6,-4(fp)
   RTMIB rtp;
   int   retval   =  0;
   42618:	e03ffb15 	stw	zero,-20(fp)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
   4261c:	e0bfff17 	ldw	r2,-4(fp)
   42620:	10bfffd8 	cmpnei	r2,r2,-1
   42624:	1000021e 	bne	r2,zero,42630 <del_route+0x34>
      ifp = NULL;    /* wildcard */
   42628:	e03ffc15 	stw	zero,-16(fp)
   4262c:	00000306 	br	4263c <del_route+0x40>
   else
      ifp = if_getbynum(iface);
   42630:	e13fff17 	ldw	r4,-4(fp)
   42634:	003cb900 	call	3cb90 <if_getbynum>
   42638:	e0bffc15 	stw	r2,-16(fp)

   if (rt_mib == NULL)     /* Make sure we're up */
   4263c:	00800174 	movhi	r2,5
   42640:	108fdc04 	addi	r2,r2,16240
   42644:	10800017 	ldw	r2,0(r2)
   42648:	1000021e 	bne	r2,zero,42654 <del_route+0x58>
      return 0;
   4264c:	0005883a 	mov	r2,zero
   42650:	00003006 	br	42714 <del_route+0x118>

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   42654:	00800174 	movhi	r2,5
   42658:	108fdc04 	addi	r2,r2,16240
   4265c:	10800017 	ldw	r2,0(r2)
   42660:	e0bffa15 	stw	r2,-24(fp)
   42664:	00002006 	br	426e8 <del_route+0xec>
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
   42668:	e0bffa17 	ldw	r2,-24(fp)
   4266c:	10800617 	ldw	r2,24(r2)
   42670:	1000011e 	bne	r2,zero,42678 <del_route+0x7c>
         continue;
   42674:	00001906 	br	426dc <del_route+0xe0>
      if(ifp != NULL && ifp != rtp->ifp)
   42678:	e0bffc17 	ldw	r2,-16(fp)
   4267c:	10000526 	beq	r2,zero,42694 <del_route+0x98>
   42680:	e0bffa17 	ldw	r2,-24(fp)
   42684:	10c00e17 	ldw	r3,56(r2)
   42688:	e0bffc17 	ldw	r2,-16(fp)
   4268c:	18800126 	beq	r3,r2,42694 <del_route+0x98>
         continue;   /* interface didn't match */
   42690:	00001206 	br	426dc <del_route+0xe0>
      if ((rtp->ipRouteDest & mask) == (dest & mask))
   42694:	e0bffa17 	ldw	r2,-24(fp)
   42698:	10c00017 	ldw	r3,0(r2)
   4269c:	e0bffd17 	ldw	r2,-12(fp)
   426a0:	1886f03a 	xor	r3,r3,r2
   426a4:	e0bffe17 	ldw	r2,-8(fp)
   426a8:	1884703a 	and	r2,r3,r2
   426ac:	1000071e 	bne	r2,zero,426cc <del_route+0xd0>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
   426b0:	e13ffa17 	ldw	r4,-24(fp)
   426b4:	000b883a 	mov	r5,zero
   426b8:	01800f04 	movi	r6,60
   426bc:	0007f240 	call	7f24 <memset>
         retval++;
   426c0:	e0bffb17 	ldw	r2,-20(fp)
   426c4:	10800044 	addi	r2,r2,1
   426c8:	e0bffb15 	stw	r2,-20(fp)
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
   426cc:	d0e8bc17 	ldw	r3,-23824(gp)
   426d0:	e0bffa17 	ldw	r2,-24(fp)
   426d4:	1880011e 	bne	r3,r2,426dc <del_route+0xe0>
         cachedRoute = NULL;
   426d8:	d028bc15 	stw	zero,-23824(gp)
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   426dc:	e0bffa17 	ldw	r2,-24(fp)
   426e0:	10800f04 	addi	r2,r2,60
   426e4:	e0bffa15 	stw	r2,-24(fp)
   426e8:	00800174 	movhi	r2,5
   426ec:	108fdc04 	addi	r2,r2,16240
   426f0:	10c00017 	ldw	r3,0(r2)
   426f4:	00800174 	movhi	r2,5
   426f8:	10877804 	addi	r2,r2,7648
   426fc:	10800017 	ldw	r2,0(r2)
   42700:	10800f24 	muli	r2,r2,60
   42704:	1885883a 	add	r2,r3,r2
   42708:	e0fffa17 	ldw	r3,-24(fp)
   4270c:	18bfd636 	bltu	r3,r2,42668 <__alt_mem_descriptor_memory+0xdf002668>
         retval++;
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
         cachedRoute = NULL;
   }
   return retval;
   42710:	e0bffb17 	ldw	r2,-20(fp)
}
   42714:	e037883a 	mov	sp,fp
   42718:	dfc00117 	ldw	ra,4(sp)
   4271c:	df000017 	ldw	fp,0(sp)
   42720:	dec00204 	addi	sp,sp,8
   42724:	f800283a 	ret

00042728 <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
   42728:	deffec04 	addi	sp,sp,-80
   4272c:	dfc01315 	stw	ra,76(sp)
   42730:	df001215 	stw	fp,72(sp)
   42734:	df001204 	addi	fp,sp,72
   42738:	e13fff15 	stw	r4,-4(fp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
   4273c:	e0bfff17 	ldw	r2,-4(fp)
   42740:	10800317 	ldw	r2,12(r2)
   42744:	e0bff615 	stw	r2,-40(fp)
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
   42748:	e0bff617 	ldw	r2,-40(fp)
   4274c:	10800003 	ldbu	r2,0(r2)
   42750:	10803fcc 	andi	r2,r2,255
   42754:	108003cc 	andi	r2,r2,15
   42758:	1085883a 	add	r2,r2,r2
   4275c:	1085883a 	add	r2,r2,r2
   42760:	1007883a 	mov	r3,r2
   42764:	e0bff617 	ldw	r2,-40(fp)
   42768:	10c5883a 	add	r2,r2,r3
   4276c:	e0bff715 	stw	r2,-36(fp)
   plen = htons(pup->ud_len);
   42770:	e0bff717 	ldw	r2,-36(fp)
   42774:	1080010b 	ldhu	r2,4(r2)
   42778:	10bfffcc 	andi	r2,r2,65535
   4277c:	1004d23a 	srli	r2,r2,8
   42780:	10bfffcc 	andi	r2,r2,65535
   42784:	10c03fcc 	andi	r3,r2,255
   42788:	e0bff717 	ldw	r2,-36(fp)
   4278c:	1080010b 	ldhu	r2,4(r2)
   42790:	10bfffcc 	andi	r2,r2,65535
   42794:	1004923a 	slli	r2,r2,8
   42798:	10bfffcc 	andi	r2,r2,65535
   4279c:	1884b03a 	or	r2,r3,r2
   427a0:	e0bff815 	stw	r2,-32(fp)

   if (plen > p->nb_plen)
   427a4:	e0bfff17 	ldw	r2,-4(fp)
   427a8:	10c00417 	ldw	r3,16(r2)
   427ac:	e0bff817 	ldw	r2,-32(fp)
   427b0:	1880282e 	bgeu	r3,r2,42854 <udpdemux+0x12c>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   427b4:	00800174 	movhi	r2,5
   427b8:	108f9904 	addi	r2,r2,15972
   427bc:	10800017 	ldw	r2,0(r2)
   427c0:	1081000c 	andi	r2,r2,1024
   427c4:	10001826 	beq	r2,zero,42828 <udpdemux+0x100>
   427c8:	00800174 	movhi	r2,5
   427cc:	108f9904 	addi	r2,r2,15972
   427d0:	10800017 	ldw	r2,0(r2)
   427d4:	1080400c 	andi	r2,r2,256
   427d8:	10001326 	beq	r2,zero,42828 <udpdemux+0x100>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
   427dc:	e0bfff17 	ldw	r2,-4(fp)
   427e0:	11400417 	ldw	r5,16(r2)
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
   427e4:	e0bff717 	ldw	r2,-36(fp)
   427e8:	1080010b 	ldhu	r2,4(r2)
   427ec:	10bfffcc 	andi	r2,r2,65535
   427f0:	1004d23a 	srli	r2,r2,8
   427f4:	10bfffcc 	andi	r2,r2,65535
   427f8:	10c03fcc 	andi	r3,r2,255
   427fc:	e0bff717 	ldw	r2,-36(fp)
   42800:	1080010b 	ldhu	r2,4(r2)
   42804:	10bfffcc 	andi	r2,r2,65535
   42808:	1004923a 	slli	r2,r2,8
   4280c:	10bfffcc 	andi	r2,r2,65535
   42810:	1884b03a 	or	r2,r3,r2
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
   42814:	10800204 	addi	r2,r2,8
   42818:	01000174 	movhi	r4,5
   4281c:	213d7204 	addi	r4,r4,-2616
   42820:	100d883a 	mov	r6,r2
   42824:	00080f80 	call	80f8 <printf>
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
#endif
      udp_mib.udpInErrors++;
   42828:	008001b4 	movhi	r2,6
   4282c:	10b9fb04 	addi	r2,r2,-6164
   42830:	10800217 	ldw	r2,8(r2)
   42834:	10c00044 	addi	r3,r2,1
   42838:	008001b4 	movhi	r2,6
   4283c:	10b9fb04 	addi	r2,r2,-6164
   42840:	10c00215 	stw	r3,8(r2)
      udp_free(p);
   42844:	e13fff17 	ldw	r4,-4(fp)
   42848:	00434640 	call	43464 <udp_free>
      return ENP_BAD_HEADER;
   4284c:	00bff804 	movi	r2,-32
   42850:	0001af06 	br	42f10 <udpdemux+0x7e8>
   }

   osum = pup->ud_cksum;
   42854:	e0bff717 	ldw	r2,-36(fp)
   42858:	1080018b 	ldhu	r2,6(r2)
   4285c:	e0bff90d 	sth	r2,-28(fp)
   /* did other guy use checksumming? */
   if (osum)
   42860:	e0bff90b 	ldhu	r2,-28(fp)
   42864:	10005e26 	beq	r2,zero,429e0 <udpdemux+0x2b8>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
   42868:	e0bff817 	ldw	r2,-32(fp)
   4286c:	1080004c 	andi	r2,r2,1
   42870:	10000426 	beq	r2,zero,42884 <udpdemux+0x15c>
   42874:	e0fff717 	ldw	r3,-36(fp)
   42878:	e0bff817 	ldw	r2,-32(fp)
   4287c:	1885883a 	add	r2,r3,r2
   42880:	10000005 	stb	zero,0(r2)
         php.ph_src = p->fhost;
   42884:	e0bfff17 	ldw	r2,-4(fp)
   42888:	10800717 	ldw	r2,28(r2)
   4288c:	e0bffc15 	stw	r2,-16(fp)
      php.ph_dest = pip->ip_dest;
   42890:	e0bff617 	ldw	r2,-40(fp)
   42894:	10800417 	ldw	r2,16(r2)
   42898:	e0bffd15 	stw	r2,-12(fp)
      php.ph_zero = 0;
   4289c:	e03ffe05 	stb	zero,-8(fp)
      php.ph_prot = UDP_PROT;
   428a0:	00800444 	movi	r2,17
   428a4:	e0bffe45 	stb	r2,-7(fp)
      php.ph_len  = pup->ud_len;
   428a8:	e0bff717 	ldw	r2,-36(fp)
   428ac:	1080010b 	ldhu	r2,4(r2)
   428b0:	e0bffe8d 	sth	r2,-6(fp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
   428b4:	e0bffc04 	addi	r2,fp,-16
   428b8:	1009883a 	mov	r4,r2
   428bc:	01400184 	movi	r5,6
   428c0:	00263480 	call	26348 <cksum>
   428c4:	1007883a 	mov	r3,r2
   428c8:	e0bff717 	ldw	r2,-36(fp)
   428cc:	10c0018d 	sth	r3,6(r2)
      xsum = ~cksum(pup, (plen+1)>>1);
   428d0:	e0bff817 	ldw	r2,-32(fp)
   428d4:	10800044 	addi	r2,r2,1
   428d8:	1004d07a 	srli	r2,r2,1
   428dc:	e13ff717 	ldw	r4,-36(fp)
   428e0:	100b883a 	mov	r5,r2
   428e4:	00263480 	call	26348 <cksum>
   428e8:	0084303a 	nor	r2,zero,r2
   428ec:	e0bff30d 	sth	r2,-52(fp)
      if (!xsum)
   428f0:	e0bff30b 	ldhu	r2,-52(fp)
   428f4:	1000021e 	bne	r2,zero,42900 <udpdemux+0x1d8>
         xsum = 0xffff;
   428f8:	00bfffc4 	movi	r2,-1
   428fc:	e0bff30d 	sth	r2,-52(fp)
      pup->ud_cksum = osum;
   42900:	e0bff717 	ldw	r2,-36(fp)
   42904:	e0fff90b 	ldhu	r3,-28(fp)
   42908:	10c0018d 	sth	r3,6(r2)
      if (xsum != osum)
   4290c:	e0fff30b 	ldhu	r3,-52(fp)
   42910:	e0bff90b 	ldhu	r2,-28(fp)
   42914:	18803226 	beq	r3,r2,429e0 <udpdemux+0x2b8>
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   42918:	00800174 	movhi	r2,5
   4291c:	108f9904 	addi	r2,r2,15972
   42920:	10800017 	ldw	r2,0(r2)
   42924:	1081000c 	andi	r2,r2,1024
   42928:	10002226 	beq	r2,zero,429b4 <udpdemux+0x28c>
   4292c:	00800174 	movhi	r2,5
   42930:	108f9904 	addi	r2,r2,15972
   42934:	10800017 	ldw	r2,0(r2)
   42938:	1080400c 	andi	r2,r2,256
   4293c:	10001d26 	beq	r2,zero,429b4 <udpdemux+0x28c>
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
   42940:	e17ff90b 	ldhu	r5,-28(fp)
   42944:	e1bff30b 	ldhu	r6,-52(fp)
                    osum, xsum, PUSH_IPADDR(p->fhost));
   42948:	e0bfff17 	ldw	r2,-4(fp)
   4294c:	10800717 	ldw	r2,28(r2)
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
   42950:	11c03fcc 	andi	r7,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
   42954:	e0bfff17 	ldw	r2,-4(fp)
   42958:	10800717 	ldw	r2,28(r2)
   4295c:	1004d23a 	srli	r2,r2,8
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
   42960:	11003fcc 	andi	r4,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
   42964:	e0bfff17 	ldw	r2,-4(fp)
   42968:	10800717 	ldw	r2,28(r2)
   4296c:	1004d43a 	srli	r2,r2,16
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
   42970:	10c03fcc 	andi	r3,r2,255
                    osum, xsum, PUSH_IPADDR(p->fhost));
   42974:	e0bfff17 	ldw	r2,-4(fp)
   42978:	10800717 	ldw	r2,28(r2)
   4297c:	1004d63a 	srli	r2,r2,24
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
   42980:	d9000015 	stw	r4,0(sp)
   42984:	d8c00115 	stw	r3,4(sp)
   42988:	d8800215 	stw	r2,8(sp)
   4298c:	01000174 	movhi	r4,5
   42990:	213d7c04 	addi	r4,r4,-2576
   42994:	00080f80 	call	80f8 <printf>
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
   42998:	00800174 	movhi	r2,5
   4299c:	108f9904 	addi	r2,r2,15972
   429a0:	10800017 	ldw	r2,0(r2)
   429a4:	1080008c 	andi	r2,r2,2
   429a8:	10000226 	beq	r2,zero,429b4 <udpdemux+0x28c>
               ip_dump(p);
   429ac:	e13fff17 	ldw	r4,-4(fp)
   429b0:	003e8680 	call	3e868 <ip_dump>
         }
#endif
         udp_mib.udpInErrors++;
   429b4:	008001b4 	movhi	r2,6
   429b8:	10b9fb04 	addi	r2,r2,-6164
   429bc:	10800217 	ldw	r2,8(r2)
   429c0:	10c00044 	addi	r3,r2,1
   429c4:	008001b4 	movhi	r2,6
   429c8:	10b9fb04 	addi	r2,r2,-6164
   429cc:	10c00215 	stw	r3,8(r2)
         udp_free(p);
   429d0:	e13fff17 	ldw	r4,-4(fp)
   429d4:	00434640 	call	43464 <udp_free>
         return ENP_BAD_HEADER;
   429d8:	00bff804 	movi	r2,-32
   429dc:	00014c06 	br	42f10 <udpdemux+0x7e8>
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
   429e0:	e13ff717 	ldw	r4,-36(fp)
   429e4:	00431c40 	call	431c4 <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   429e8:	e0bff617 	ldw	r2,-40(fp)
   429ec:	10800003 	ldbu	r2,0(r2)
   429f0:	10803fcc 	andi	r2,r2,255
   429f4:	108003cc 	andi	r2,r2,15
   429f8:	1085883a 	add	r2,r2,r2
   429fc:	1085883a 	add	r2,r2,r2
   42a00:	10800204 	addi	r2,r2,8
   42a04:	e0bff415 	stw	r2,-48(fp)
   p->nb_plen -= e;
   42a08:	e0bfff17 	ldw	r2,-4(fp)
   42a0c:	10c00417 	ldw	r3,16(r2)
   42a10:	e0bff417 	ldw	r2,-48(fp)
   42a14:	1887c83a 	sub	r3,r3,r2
   42a18:	e0bfff17 	ldw	r2,-4(fp)
   42a1c:	10c00415 	stw	r3,16(r2)
   p->nb_prot += e;
   42a20:	e0bfff17 	ldw	r2,-4(fp)
   42a24:	10c00317 	ldw	r3,12(r2)
   42a28:	e0bff417 	ldw	r2,-48(fp)
   42a2c:	1887883a 	add	r3,r3,r2
   42a30:	e0bfff17 	ldw	r2,-4(fp)
   42a34:	10c00315 	stw	r3,12(r2)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   42a38:	00800174 	movhi	r2,5
   42a3c:	108f9904 	addi	r2,r2,15972
   42a40:	10800017 	ldw	r2,0(r2)
   42a44:	1081000c 	andi	r2,r2,1024
   42a48:	10002126 	beq	r2,zero,42ad0 <udpdemux+0x3a8>
   42a4c:	00800174 	movhi	r2,5
   42a50:	108f9904 	addi	r2,r2,15972
   42a54:	10800017 	ldw	r2,0(r2)
   42a58:	1080400c 	andi	r2,r2,256
   42a5c:	10001c26 	beq	r2,zero,42ad0 <udpdemux+0x3a8>
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
   42a60:	e0bfff17 	ldw	r2,-4(fp)
   42a64:	10800717 	ldw	r2,28(r2)
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
   42a68:	11803fcc 	andi	r6,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
   42a6c:	e0bfff17 	ldw	r2,-4(fp)
   42a70:	10800717 	ldw	r2,28(r2)
   42a74:	1004d23a 	srli	r2,r2,8
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
   42a78:	11c03fcc 	andi	r7,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
   42a7c:	e0bfff17 	ldw	r2,-4(fp)
   42a80:	10800717 	ldw	r2,28(r2)
   42a84:	1004d43a 	srli	r2,r2,16
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
   42a88:	11403fcc 	andi	r5,r2,255
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
   42a8c:	e0bfff17 	ldw	r2,-4(fp)
   42a90:	10800717 	ldw	r2,28(r2)
   42a94:	1008d63a 	srli	r4,r2,24
   42a98:	e0bff717 	ldw	r2,-36(fp)
   42a9c:	1080000b 	ldhu	r2,0(r2)
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
   42aa0:	10ffffcc 	andi	r3,r2,65535
       plen, PUSH_IPADDR(p->fhost), pup->ud_srcp, pup->ud_dstp);
   42aa4:	e0bff717 	ldw	r2,-36(fp)
   42aa8:	1080008b 	ldhu	r2,2(r2)
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
   42aac:	10bfffcc 	andi	r2,r2,65535
   42ab0:	d9400015 	stw	r5,0(sp)
   42ab4:	d9000115 	stw	r4,4(sp)
   42ab8:	d8c00215 	stw	r3,8(sp)
   42abc:	d8800315 	stw	r2,12(sp)
   42ac0:	01000174 	movhi	r4,5
   42ac4:	213d8a04 	addi	r4,r4,-2520
   42ac8:	e17ff817 	ldw	r5,-32(fp)
   42acc:	00080f80 	call	80f8 <printf>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
   42ad0:	00800174 	movhi	r2,5
   42ad4:	108fb204 	addi	r2,r2,16072
   42ad8:	10800017 	ldw	r2,0(r2)
   42adc:	e0bff215 	stw	r2,-56(fp)
   42ae0:	0000ab06 	br	42d90 <udpdemux+0x668>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
   42ae4:	e0bff217 	ldw	r2,-56(fp)
   42ae8:	1080018b 	ldhu	r2,6(r2)
   42aec:	10bfffcc 	andi	r2,r2,65535
   42af0:	10000826 	beq	r2,zero,42b14 <udpdemux+0x3ec>
   42af4:	e0bff217 	ldw	r2,-56(fp)
   42af8:	10c0018b 	ldhu	r3,6(r2)
   42afc:	e0bff717 	ldw	r2,-36(fp)
   42b00:	1080008b 	ldhu	r2,2(r2)
   42b04:	18ffffcc 	andi	r3,r3,65535
   42b08:	10bfffcc 	andi	r2,r2,65535
   42b0c:	18800126 	beq	r3,r2,42b14 <udpdemux+0x3ec>
         continue;
   42b10:	00009c06 	br	42d84 <udpdemux+0x65c>
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
   42b14:	e0bff217 	ldw	r2,-56(fp)
   42b18:	1080020b 	ldhu	r2,8(r2)
   42b1c:	10bfffcc 	andi	r2,r2,65535
   42b20:	10000826 	beq	r2,zero,42b44 <udpdemux+0x41c>
   42b24:	e0bff217 	ldw	r2,-56(fp)
   42b28:	10c0020b 	ldhu	r3,8(r2)
   42b2c:	e0bff717 	ldw	r2,-36(fp)
   42b30:	1080000b 	ldhu	r2,0(r2)
   42b34:	18ffffcc 	andi	r3,r3,65535
   42b38:	10bfffcc 	andi	r2,r2,65535
   42b3c:	18800126 	beq	r3,r2,42b44 <udpdemux+0x41c>
         continue;
   42b40:	00009006 	br	42d84 <udpdemux+0x65c>
      if (con->u_fhost && (con->u_fhost != p->fhost))
   42b44:	e0bff217 	ldw	r2,-56(fp)
   42b48:	10800417 	ldw	r2,16(r2)
   42b4c:	10000626 	beq	r2,zero,42b68 <udpdemux+0x440>
   42b50:	e0bff217 	ldw	r2,-56(fp)
   42b54:	10c00417 	ldw	r3,16(r2)
   42b58:	e0bfff17 	ldw	r2,-4(fp)
   42b5c:	10800717 	ldw	r2,28(r2)
   42b60:	18800126 	beq	r3,r2,42b68 <udpdemux+0x440>
         continue;
   42b64:	00008706 	br	42d84 <udpdemux+0x65c>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
   42b68:	e0bff617 	ldw	r2,-40(fp)
   42b6c:	10800417 	ldw	r2,16(r2)
   42b70:	1006d63a 	srli	r3,r2,24
   42b74:	e0bff617 	ldw	r2,-40(fp)
   42b78:	10800417 	ldw	r2,16(r2)
   42b7c:	1004d23a 	srli	r2,r2,8
   42b80:	10bfc00c 	andi	r2,r2,65280
   42b84:	1886b03a 	or	r3,r3,r2
   42b88:	e0bff617 	ldw	r2,-40(fp)
   42b8c:	10800417 	ldw	r2,16(r2)
   42b90:	10bfc00c 	andi	r2,r2,65280
   42b94:	1004923a 	slli	r2,r2,8
   42b98:	1886b03a 	or	r3,r3,r2
   42b9c:	e0bff617 	ldw	r2,-40(fp)
   42ba0:	10800417 	ldw	r2,16(r2)
   42ba4:	1004963a 	slli	r2,r2,24
   42ba8:	1884b03a 	or	r2,r3,r2
   42bac:	10fc002c 	andhi	r3,r2,61440
   42bb0:	00b80034 	movhi	r2,57344
   42bb4:	1880301e 	bne	r3,r2,42c78 <udpdemux+0x550>
      {
         struct socket *soptr = (struct socket *)con->u_data;
   42bb8:	e0bff217 	ldw	r2,-56(fp)
   42bbc:	10800617 	ldw	r2,24(r2)
   42bc0:	e0bffa15 	stw	r2,-24(fp)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
   42bc4:	e0bff217 	ldw	r2,-56(fp)
   42bc8:	10c00517 	ldw	r3,20(r2)
   42bcc:	00800134 	movhi	r2,4
   42bd0:	10a2a804 	addi	r2,r2,-30048
   42bd4:	1880281e 	bne	r3,r2,42c78 <udpdemux+0x550>
   42bd8:	e0bffa17 	ldw	r2,-24(fp)
   42bdc:	10800317 	ldw	r2,12(r2)
   42be0:	10002526 	beq	r2,zero,42c78 <udpdemux+0x550>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;
   42be4:	e0bffa17 	ldw	r2,-24(fp)
   42be8:	10800317 	ldw	r2,12(r2)
   42bec:	e0bffb15 	stw	r2,-20(fp)

            for (i = 0; i < imo->imo_num_memberships; ++i)
   42bf0:	e03ff50d 	sth	zero,-44(fp)
   42bf4:	00001a06 	br	42c60 <udpdemux+0x538>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
   42bf8:	e0bff50b 	ldhu	r2,-44(fp)
   42bfc:	e0fffb17 	ldw	r3,-20(fp)
   42c00:	10800084 	addi	r2,r2,2
   42c04:	1085883a 	add	r2,r2,r2
   42c08:	1085883a 	add	r2,r2,r2
   42c0c:	1885883a 	add	r2,r3,r2
   42c10:	10800017 	ldw	r2,0(r2)
   42c14:	10c00117 	ldw	r3,4(r2)
   42c18:	e0bfff17 	ldw	r2,-4(fp)
   42c1c:	10800617 	ldw	r2,24(r2)
   42c20:	18800c1e 	bne	r3,r2,42c54 <udpdemux+0x52c>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
   42c24:	e0bff50b 	ldhu	r2,-44(fp)
   42c28:	e0fffb17 	ldw	r3,-20(fp)
   42c2c:	10800084 	addi	r2,r2,2
   42c30:	1085883a 	add	r2,r2,r2
   42c34:	1085883a 	add	r2,r2,r2
   42c38:	1885883a 	add	r2,r3,r2
   42c3c:	10800017 	ldw	r2,0(r2)
   42c40:	10c00017 	ldw	r3,0(r2)
   42c44:	e0bff617 	ldw	r2,-40(fp)
   42c48:	10800417 	ldw	r2,16(r2)
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
   42c4c:	1880011e 	bne	r3,r2,42c54 <udpdemux+0x52c>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
               {
                  goto found;
   42c50:	00000906 	br	42c78 <udpdemux+0x550>
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
   42c54:	e0bff50b 	ldhu	r2,-44(fp)
   42c58:	10800044 	addi	r2,r2,1
   42c5c:	e0bff50d 	sth	r2,-44(fp)
   42c60:	e0bffb17 	ldw	r2,-20(fp)
   42c64:	1080018b 	ldhu	r2,6(r2)
   42c68:	10bfffcc 	andi	r2,r2,65535
   42c6c:	e0fff50b 	ldhu	r3,-44(fp)
   42c70:	18bfe136 	bltu	r3,r2,42bf8 <__alt_mem_descriptor_memory+0xdf002bf8>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
               {
                  goto found;
               }
            }
            continue;
   42c74:	00004306 	br	42d84 <udpdemux+0x65c>
#endif /* INCLUDE_TCP */

      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
   42c78:	e0bff617 	ldw	r2,-40(fp)
   42c7c:	10800417 	ldw	r2,16(r2)
   42c80:	1006d63a 	srli	r3,r2,24
   42c84:	e0bff617 	ldw	r2,-40(fp)
   42c88:	10800417 	ldw	r2,16(r2)
   42c8c:	1004d23a 	srli	r2,r2,8
   42c90:	10bfc00c 	andi	r2,r2,65280
   42c94:	1886b03a 	or	r3,r3,r2
   42c98:	e0bff617 	ldw	r2,-40(fp)
   42c9c:	10800417 	ldw	r2,16(r2)
   42ca0:	10bfc00c 	andi	r2,r2,65280
   42ca4:	1004923a 	slli	r2,r2,8
   42ca8:	1886b03a 	or	r3,r3,r2
   42cac:	e0bff617 	ldw	r2,-40(fp)
   42cb0:	10800417 	ldw	r2,16(r2)
   42cb4:	1004963a 	slli	r2,r2,24
   42cb8:	1884b03a 	or	r2,r3,r2
   42cbc:	10fc002c 	andhi	r3,r2,61440
   42cc0:	00b80034 	movhi	r2,57344
   42cc4:	18800926 	beq	r3,r2,42cec <udpdemux+0x5c4>
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
   42cc8:	e0bff217 	ldw	r2,-56(fp)
   42ccc:	10800317 	ldw	r2,12(r2)
   42cd0:	10000626 	beq	r2,zero,42cec <udpdemux+0x5c4>
   42cd4:	e0bff217 	ldw	r2,-56(fp)
   42cd8:	10c00317 	ldw	r3,12(r2)
   42cdc:	e0bff617 	ldw	r2,-40(fp)
   42ce0:	10800417 	ldw	r2,16(r2)
   42ce4:	18800126 	beq	r3,r2,42cec <udpdemux+0x5c4>
            continue;
   42ce8:	00002606 	br	42d84 <udpdemux+0x65c>
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
   42cec:	008001b4 	movhi	r2,6
   42cf0:	10b9fb04 	addi	r2,r2,-6164
   42cf4:	10800017 	ldw	r2,0(r2)
   42cf8:	10c00044 	addi	r3,r2,1
   42cfc:	008001b4 	movhi	r2,6
   42d00:	10b9fb04 	addi	r2,r2,-6164
   42d04:	10c00015 	stw	r3,0(r2)
      if (con->u_rcv)         /* if upcall address is set... */
   42d08:	e0bff217 	ldw	r2,-56(fp)
   42d0c:	10800517 	ldw	r2,20(r2)
   42d10:	10000d26 	beq	r2,zero,42d48 <udpdemux+0x620>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
   42d14:	0009883a 	mov	r4,zero
   42d18:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
   42d1c:	e0bff217 	ldw	r2,-56(fp)
   42d20:	10800517 	ldw	r2,20(r2)
   42d24:	e0fff217 	ldw	r3,-56(fp)
   42d28:	18c00617 	ldw	r3,24(r3)
   42d2c:	e13fff17 	ldw	r4,-4(fp)
   42d30:	180b883a 	mov	r5,r3
   42d34:	103ee83a 	callr	r2
   42d38:	e0bff415 	stw	r2,-48(fp)
         LOCK_NET_RESOURCE(NET_RESID);
   42d3c:	0009883a 	mov	r4,zero
   42d40:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   42d44:	00000206 	br	42d50 <udpdemux+0x628>
      }
      else
         e = ENP_LOGIC;
   42d48:	00bffd44 	movi	r2,-11
   42d4c:	e0bff415 	stw	r2,-48(fp)

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
   42d50:	e0bff417 	ldw	r2,-48(fp)
   42d54:	10000926 	beq	r2,zero,42d7c <udpdemux+0x654>
      {
         udp_mib.udpInErrors++;
   42d58:	008001b4 	movhi	r2,6
   42d5c:	10b9fb04 	addi	r2,r2,-6164
   42d60:	10800217 	ldw	r2,8(r2)
   42d64:	10c00044 	addi	r3,r2,1
   42d68:	008001b4 	movhi	r2,6
   42d6c:	10b9fb04 	addi	r2,r2,-6164
   42d70:	10c00215 	stw	r3,8(r2)
         udp_free(p);
   42d74:	e13fff17 	ldw	r4,-4(fp)
   42d78:	00434640 	call	43464 <udp_free>
      }

      return(e);
   42d7c:	e0bff417 	ldw	r2,-48(fp)
   42d80:	00006306 	br	42f10 <udpdemux+0x7e8>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
   42d84:	e0bff217 	ldw	r2,-56(fp)
   42d88:	10800017 	ldw	r2,0(r2)
   42d8c:	e0bff215 	stw	r2,-56(fp)
   42d90:	e0bff217 	ldw	r2,-56(fp)
   42d94:	103f531e 	bne	r2,zero,42ae4 <__alt_mem_descriptor_memory+0xdf002ae4>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
   42d98:	e0bff617 	ldw	r2,-40(fp)
   42d9c:	10800417 	ldw	r2,16(r2)
   42da0:	10bfffe0 	cmpeqi	r2,r2,-1
   42da4:	1000121e 	bne	r2,zero,42df0 <udpdemux+0x6c8>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
   42da8:	e0bff617 	ldw	r2,-40(fp)
   42dac:	10c00417 	ldw	r3,16(r2)
   42db0:	e0bfff17 	ldw	r2,-4(fp)
   42db4:	10800617 	ldw	r2,24(r2)
   42db8:	10800e17 	ldw	r2,56(r2)

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
   42dbc:	18800c26 	beq	r3,r2,42df0 <udpdemux+0x6c8>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
   42dc0:	e0bff617 	ldw	r2,-40(fp)
   42dc4:	10c00417 	ldw	r3,16(r2)
   42dc8:	e0bfff17 	ldw	r2,-4(fp)
   42dcc:	10800617 	ldw	r2,24(r2)
   42dd0:	10800f17 	ldw	r2,60(r2)
   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
   42dd4:	18800626 	beq	r3,r2,42df0 <udpdemux+0x6c8>
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   42dd8:	e0bff617 	ldw	r2,-40(fp)
   42ddc:	10c00417 	ldw	r3,16(r2)
   42de0:	e0bfff17 	ldw	r2,-4(fp)
   42de4:	10800617 	ldw	r2,24(r2)
   42de8:	10801017 	ldw	r2,64(r2)
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
   42dec:	1880181e 	bne	r3,r2,42e50 <udpdemux+0x728>
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   42df0:	00800174 	movhi	r2,5
   42df4:	108f9904 	addi	r2,r2,15972
   42df8:	10800017 	ldw	r2,0(r2)
   42dfc:	1081000c 	andi	r2,r2,1024
   42e00:	10000826 	beq	r2,zero,42e24 <udpdemux+0x6fc>
   42e04:	00800174 	movhi	r2,5
   42e08:	108f9904 	addi	r2,r2,15972
   42e0c:	10800017 	ldw	r2,0(r2)
   42e10:	1080400c 	andi	r2,r2,256
   42e14:	10000326 	beq	r2,zero,42e24 <udpdemux+0x6fc>
         dprintf("UDP: ignoring ip broadcast\n");
   42e18:	01000174 	movhi	r4,5
   42e1c:	213d9404 	addi	r4,r4,-2480
   42e20:	00083740 	call	8374 <puts>
#endif
      udp_mib.udpInErrors++;
   42e24:	008001b4 	movhi	r2,6
   42e28:	10b9fb04 	addi	r2,r2,-6164
   42e2c:	10800217 	ldw	r2,8(r2)
   42e30:	10c00044 	addi	r3,r2,1
   42e34:	008001b4 	movhi	r2,6
   42e38:	10b9fb04 	addi	r2,r2,-6164
   42e3c:	10c00215 	stw	r3,8(r2)
      udp_free(p);
   42e40:	e13fff17 	ldw	r4,-4(fp)
   42e44:	00434640 	call	43464 <udp_free>
      return ENP_NOT_MINE;
   42e48:	00800084 	movi	r2,2
   42e4c:	00003006 	br	42f10 <udpdemux+0x7e8>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   42e50:	00800174 	movhi	r2,5
   42e54:	108f9904 	addi	r2,r2,15972
   42e58:	10800017 	ldw	r2,0(r2)
   42e5c:	1081000c 	andi	r2,r2,1024
   42e60:	10001326 	beq	r2,zero,42eb0 <udpdemux+0x788>
   42e64:	00800174 	movhi	r2,5
   42e68:	108f9904 	addi	r2,r2,15972
   42e6c:	10800017 	ldw	r2,0(r2)
   42e70:	1080400c 	andi	r2,r2,256
   42e74:	10000e26 	beq	r2,zero,42eb0 <udpdemux+0x788>
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
   42e78:	e0bff717 	ldw	r2,-36(fp)
   42e7c:	1080008b 	ldhu	r2,2(r2)
   42e80:	10bfffcc 	andi	r2,r2,65535
   42e84:	01000174 	movhi	r4,5
   42e88:	213d9b04 	addi	r4,r4,-2452
   42e8c:	100b883a 	mov	r5,r2
   42e90:	00080f80 	call	80f8 <printf>
      if (NDEBUG & DUMP) 
   42e94:	00800174 	movhi	r2,5
   42e98:	108f9904 	addi	r2,r2,15972
   42e9c:	10800017 	ldw	r2,0(r2)
   42ea0:	1080008c 	andi	r2,r2,2
   42ea4:	10000226 	beq	r2,zero,42eb0 <udpdemux+0x788>
         ip_dump(p);
   42ea8:	e13fff17 	ldw	r4,-4(fp)
   42eac:	003e8680 	call	3e868 <ip_dump>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
   42eb0:	e13ff717 	ldw	r4,-36(fp)
   42eb4:	00431c40 	call	431c4 <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
   42eb8:	e0bfff17 	ldw	r2,-4(fp)
   42ebc:	11000717 	ldw	r4,28(r2)
   42ec0:	e0bfff17 	ldw	r2,-4(fp)
   42ec4:	10800617 	ldw	r2,24(r2)
   42ec8:	10c00a17 	ldw	r3,40(r2)
   42ecc:	e0bfff17 	ldw	r2,-4(fp)
   42ed0:	10800617 	ldw	r2,24(r2)
   42ed4:	d8800015 	stw	r2,0(sp)
   42ed8:	180b883a 	mov	r5,r3
   42edc:	e1bff617 	ldw	r6,-40(fp)
   42ee0:	01c000c4 	movi	r7,3
   42ee4:	0048fe00 	call	48fe0 <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
   42ee8:	008001b4 	movhi	r2,6
   42eec:	10b9fb04 	addi	r2,r2,-6164
   42ef0:	10800117 	ldw	r2,4(r2)
   42ef4:	10c00044 	addi	r3,r2,1
   42ef8:	008001b4 	movhi	r2,6
   42efc:	10b9fb04 	addi	r2,r2,-6164
   42f00:	10c00115 	stw	r3,4(r2)
   udp_free(p);
   42f04:	e13fff17 	ldw	r4,-4(fp)
   42f08:	00434640 	call	43464 <udp_free>
   return ENP_NOT_MINE;
   42f0c:	00800084 	movi	r2,2
}
   42f10:	e037883a 	mov	sp,fp
   42f14:	dfc00117 	ldw	ra,4(sp)
   42f18:	df000017 	ldw	fp,0(sp)
   42f1c:	dec00204 	addi	sp,sp,8
   42f20:	f800283a 	ret

00042f24 <udp_send>:
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
   42f24:	deffef04 	addi	sp,sp,-68
   42f28:	dfc01015 	stw	ra,64(sp)
   42f2c:	df000f15 	stw	fp,60(sp)
   42f30:	df000f04 	addi	fp,sp,60
   42f34:	2007883a 	mov	r3,r4
   42f38:	2805883a 	mov	r2,r5
   42f3c:	e1bfff15 	stw	r6,-4(fp)
   42f40:	e0fffd0d 	sth	r3,-12(fp)
   42f44:	e0bffe0d 	sth	r2,-8(fp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
   42f48:	00800174 	movhi	r2,5
   42f4c:	108f9904 	addi	r2,r2,15972
   42f50:	10800017 	ldw	r2,0(r2)
   42f54:	1080410c 	andi	r2,r2,260
   42f58:	10001a26 	beq	r2,zero,42fc4 <udp_send+0xa0>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
   42f5c:	e0bfff17 	ldw	r2,-4(fp)
   42f60:	12000417 	ldw	r8,16(r2)
   42f64:	e1bffe0b 	ldhu	r6,-8(fp)
    PUSH_IPADDR(p->fhost), fport);
   42f68:	e0bfff17 	ldw	r2,-4(fp)
   42f6c:	10800717 	ldw	r2,28(r2)
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
   42f70:	11c03fcc 	andi	r7,r2,255
    PUSH_IPADDR(p->fhost), fport);
   42f74:	e0bfff17 	ldw	r2,-4(fp)
   42f78:	10800717 	ldw	r2,28(r2)
   42f7c:	1004d23a 	srli	r2,r2,8
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
   42f80:	11403fcc 	andi	r5,r2,255
    PUSH_IPADDR(p->fhost), fport);
   42f84:	e0bfff17 	ldw	r2,-4(fp)
   42f88:	10800717 	ldw	r2,28(r2)
   42f8c:	1004d43a 	srli	r2,r2,16
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
   42f90:	11003fcc 	andi	r4,r2,255
    PUSH_IPADDR(p->fhost), fport);
   42f94:	e0bfff17 	ldw	r2,-4(fp)
   42f98:	10800717 	ldw	r2,28(r2)
   42f9c:	1006d63a 	srli	r3,r2,24
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
   42fa0:	e0bffd0b 	ldhu	r2,-12(fp)
   42fa4:	d9400015 	stw	r5,0(sp)
   42fa8:	d9000115 	stw	r4,4(sp)
   42fac:	d8c00215 	stw	r3,8(sp)
   42fb0:	d8800315 	stw	r2,12(sp)
   42fb4:	01000174 	movhi	r4,5
   42fb8:	213da204 	addi	r4,r4,-2424
   42fbc:	400b883a 	mov	r5,r8
   42fc0:	00080f80 	call	80f8 <printf>
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   42fc4:	0009883a 	mov	r4,zero
   42fc8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
   42fcc:	e0bfff17 	ldw	r2,-4(fp)
   42fd0:	10800317 	ldw	r2,12(r2)
   42fd4:	10fffe04 	addi	r3,r2,-8
   42fd8:	e0bfff17 	ldw	r2,-4(fp)
   42fdc:	10c00315 	stw	r3,12(r2)
   pup = (struct udp*)p->nb_prot;
   42fe0:	e0bfff17 	ldw	r2,-4(fp)
   42fe4:	10800317 	ldw	r2,12(r2)
   42fe8:	e0bff615 	stw	r2,-40(fp)
   udplen = p->nb_plen + sizeof(struct udp);
   42fec:	e0bfff17 	ldw	r2,-4(fp)
   42ff0:	10800417 	ldw	r2,16(r2)
   42ff4:	10800204 	addi	r2,r2,8
   42ff8:	e0bff715 	stw	r2,-36(fp)
   p->nb_plen = udplen;
   42ffc:	e0fff717 	ldw	r3,-36(fp)
   43000:	e0bfff17 	ldw	r2,-4(fp)
   43004:	10c00415 	stw	r3,16(r2)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
   43008:	e0bff717 	ldw	r2,-36(fp)
   4300c:	1080004c 	andi	r2,r2,1
   43010:	10000426 	beq	r2,zero,43024 <udp_send+0x100>
   43014:	e0bff717 	ldw	r2,-36(fp)
   43018:	e0fff617 	ldw	r3,-40(fp)
   4301c:	1885883a 	add	r2,r3,r2
   43020:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
   43024:	e0bff717 	ldw	r2,-36(fp)
   43028:	1007883a 	mov	r3,r2
   4302c:	e0bff617 	ldw	r2,-40(fp)
   43030:	10c0010d 	sth	r3,4(r2)
   pup->ud_srcp = lport;
   43034:	e0bff617 	ldw	r2,-40(fp)
   43038:	e0fffe0b 	ldhu	r3,-8(fp)
   4303c:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = fport;
   43040:	e0bff617 	ldw	r2,-40(fp)
   43044:	e0fffd0b 	ldhu	r3,-12(fp)
   43048:	10c0008d 	sth	r3,2(r2)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
   4304c:	e13ff617 	ldw	r4,-40(fp)
   43050:	00431c40 	call	431c4 <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
   43054:	e0bfff17 	ldw	r2,-4(fp)
   43058:	10800717 	ldw	r2,28(r2)
   4305c:	10bfffd8 	cmpnei	r2,r2,-1
   43060:	10000f1e 	bne	r2,zero,430a0 <udp_send+0x17c>
   {
      if (!p->net)
   43064:	e0bfff17 	ldw	r2,-4(fp)
   43068:	10800617 	ldw	r2,24(r2)
   4306c:	1000071e 	bne	r2,zero,4308c <udp_send+0x168>
      {
         dtrap();    /* programmer forgot to select iface */
   43070:	002b0f40 	call	2b0f4 <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
   43074:	e13fff17 	ldw	r4,-4(fp)
   43078:	00434640 	call	43464 <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
   4307c:	0009883a 	mov	r4,zero
   43080:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
         return ENP_NO_IFACE;
   43084:	00bff784 	movi	r2,-34
   43088:	00004906 	br	431b0 <udp_send+0x28c>
      }
      src_ip = p->net->n_ipaddr;
   4308c:	e0bfff17 	ldw	r2,-4(fp)
   43090:	10800617 	ldw	r2,24(r2)
   43094:	10800a17 	ldw	r2,40(r2)
   43098:	e0bff515 	stw	r2,-44(fp)
   4309c:	00000506 	br	430b4 <udp_send+0x190>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
   430a0:	e0bfff17 	ldw	r2,-4(fp)
   430a4:	10800717 	ldw	r2,28(r2)
   430a8:	1009883a 	mov	r4,r2
   430ac:	003e7c40 	call	3e7c4 <ip_mymach>
   430b0:	e0bff515 	stw	r2,-44(fp)
   php.ph_src = src_ip;
   430b4:	e0bff517 	ldw	r2,-44(fp)
   430b8:	e0bffa15 	stw	r2,-24(fp)
   php.ph_dest = p->fhost;
   430bc:	e0bfff17 	ldw	r2,-4(fp)
   430c0:	10800717 	ldw	r2,28(r2)
   430c4:	e0bffb15 	stw	r2,-20(fp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   430c8:	e03ffc05 	stb	zero,-16(fp)
   php.ph_prot = UDP_PROT;
   430cc:	00800444 	movi	r2,17
   430d0:	e0bffc45 	stb	r2,-15(fp)
   php.ph_len = pup->ud_len;
   430d4:	e0bff617 	ldw	r2,-40(fp)
   430d8:	1080010b 	ldhu	r2,4(r2)
   430dc:	e0bffc8d 	sth	r2,-14(fp)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
   430e0:	e0bffa04 	addi	r2,fp,-24
   430e4:	1009883a 	mov	r4,r2
   430e8:	01400184 	movi	r5,6
   430ec:	00263480 	call	26348 <cksum>
   430f0:	1007883a 	mov	r3,r2
   430f4:	e0bff617 	ldw	r2,-40(fp)
   430f8:	10c0018d 	sth	r3,6(r2)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
   430fc:	e0bff717 	ldw	r2,-36(fp)
   43100:	10800044 	addi	r2,r2,1
   43104:	1005d07a 	srai	r2,r2,1
   43108:	e13ff617 	ldw	r4,-40(fp)
   4310c:	100b883a 	mov	r5,r2
   43110:	00263480 	call	26348 <cksum>
   43114:	0084303a 	nor	r2,zero,r2
   43118:	1007883a 	mov	r3,r2
   4311c:	e0bff617 	ldw	r2,-40(fp)
   43120:	10c0018d 	sth	r3,6(r2)
   if (pup->ud_cksum == 0)
   43124:	e0bff617 	ldw	r2,-40(fp)
   43128:	1080018b 	ldhu	r2,6(r2)
   4312c:	10bfffcc 	andi	r2,r2,65535
   43130:	1000031e 	bne	r2,zero,43140 <udp_send+0x21c>
      pup->ud_cksum = 0xffff;
   43134:	e0bff617 	ldw	r2,-40(fp)
   43138:	00ffffc4 	movi	r3,-1
   4313c:	10c0018d 	sth	r3,6(r2)
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
   43140:	e0bfff17 	ldw	r2,-4(fp)
   43144:	10800317 	ldw	r2,12(r2)
   43148:	10bffb04 	addi	r2,r2,-20
   4314c:	e0bff815 	stw	r2,-32(fp)
   pip->ip_src = src_ip;
   43150:	e0bff817 	ldw	r2,-32(fp)
   43154:	e0fff517 	ldw	r3,-44(fp)
   43158:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = p->fhost;
   4315c:	e0bfff17 	ldw	r2,-4(fp)
   43160:	10c00717 	ldw	r3,28(r2)
   43164:	e0bff817 	ldw	r2,-32(fp)
   43168:	10c00415 	stw	r3,16(r2)

   udp_mib.udpOutDatagrams++;
   4316c:	008001b4 	movhi	r2,6
   43170:	10b9fb04 	addi	r2,r2,-6164
   43174:	10800317 	ldw	r2,12(r2)
   43178:	10c00044 	addi	r3,r2,1
   4317c:	008001b4 	movhi	r2,6
   43180:	10b9fb04 	addi	r2,r2,-6164
   43184:	10c00315 	stw	r3,12(r2)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
   43188:	e0fff717 	ldw	r3,-36(fp)
   4318c:	e0bfff17 	ldw	r2,-4(fp)
   43190:	10c00415 	stw	r3,16(r2)
   e = ip_write(UDP_PROT, p);
   43194:	01000444 	movi	r4,17
   43198:	e17fff17 	ldw	r5,-4(fp)
   4319c:	003d78c0 	call	3d78c <ip_write>
   431a0:	e0bff915 	stw	r2,-28(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
   431a4:	0009883a 	mov	r4,zero
   431a8:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   return e;
   431ac:	e0bff917 	ldw	r2,-28(fp)
}
   431b0:	e037883a 	mov	sp,fp
   431b4:	dfc00117 	ldw	ra,4(sp)
   431b8:	df000017 	ldw	fp,0(sp)
   431bc:	dec00204 	addi	sp,sp,8
   431c0:	f800283a 	ret

000431c4 <udpswap>:
 */

#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{
   431c4:	defffe04 	addi	sp,sp,-8
   431c8:	df000115 	stw	fp,4(sp)
   431cc:	df000104 	addi	fp,sp,4
   431d0:	e13fff15 	stw	r4,-4(fp)

   pup->ud_srcp = htons(pup->ud_srcp);
   431d4:	e0bfff17 	ldw	r2,-4(fp)
   431d8:	1080000b 	ldhu	r2,0(r2)
   431dc:	10bfffcc 	andi	r2,r2,65535
   431e0:	1004d23a 	srli	r2,r2,8
   431e4:	1007883a 	mov	r3,r2
   431e8:	e0bfff17 	ldw	r2,-4(fp)
   431ec:	1080000b 	ldhu	r2,0(r2)
   431f0:	10bfffcc 	andi	r2,r2,65535
   431f4:	1004923a 	slli	r2,r2,8
   431f8:	1884b03a 	or	r2,r3,r2
   431fc:	1007883a 	mov	r3,r2
   43200:	e0bfff17 	ldw	r2,-4(fp)
   43204:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = htons(pup->ud_dstp);
   43208:	e0bfff17 	ldw	r2,-4(fp)
   4320c:	1080008b 	ldhu	r2,2(r2)
   43210:	10bfffcc 	andi	r2,r2,65535
   43214:	1004d23a 	srli	r2,r2,8
   43218:	1007883a 	mov	r3,r2
   4321c:	e0bfff17 	ldw	r2,-4(fp)
   43220:	1080008b 	ldhu	r2,2(r2)
   43224:	10bfffcc 	andi	r2,r2,65535
   43228:	1004923a 	slli	r2,r2,8
   4322c:	1884b03a 	or	r2,r3,r2
   43230:	1007883a 	mov	r3,r2
   43234:	e0bfff17 	ldw	r2,-4(fp)
   43238:	10c0008d 	sth	r3,2(r2)
   pup->ud_len = htons(pup->ud_len);
   4323c:	e0bfff17 	ldw	r2,-4(fp)
   43240:	1080010b 	ldhu	r2,4(r2)
   43244:	10bfffcc 	andi	r2,r2,65535
   43248:	1004d23a 	srli	r2,r2,8
   4324c:	1007883a 	mov	r3,r2
   43250:	e0bfff17 	ldw	r2,-4(fp)
   43254:	1080010b 	ldhu	r2,4(r2)
   43258:	10bfffcc 	andi	r2,r2,65535
   4325c:	1004923a 	slli	r2,r2,8
   43260:	1884b03a 	or	r2,r3,r2
   43264:	1007883a 	mov	r3,r2
   43268:	e0bfff17 	ldw	r2,-4(fp)
   4326c:	10c0010d 	sth	r3,4(r2)
   pup->ud_cksum = htons(pup->ud_cksum);
   43270:	e0bfff17 	ldw	r2,-4(fp)
   43274:	1080018b 	ldhu	r2,6(r2)
   43278:	10bfffcc 	andi	r2,r2,65535
   4327c:	1004d23a 	srli	r2,r2,8
   43280:	1007883a 	mov	r3,r2
   43284:	e0bfff17 	ldw	r2,-4(fp)
   43288:	1080018b 	ldhu	r2,6(r2)
   4328c:	10bfffcc 	andi	r2,r2,65535
   43290:	1004923a 	slli	r2,r2,8
   43294:	1884b03a 	or	r2,r3,r2
   43298:	1007883a 	mov	r3,r2
   4329c:	e0bfff17 	ldw	r2,-4(fp)
   432a0:	10c0018d 	sth	r3,6(r2)
}
   432a4:	e037883a 	mov	sp,fp
   432a8:	df000017 	ldw	fp,0(sp)
   432ac:	dec00104 	addi	sp,sp,4
   432b0:	f800283a 	ret

000432b4 <udp_socket>:
#define  MINSOCKET   1200
static unshort usocket = 0;   /* next socket to grab */

unshort
udp_socket(void)
{
   432b4:	defffe04 	addi	sp,sp,-8
   432b8:	df000115 	stw	fp,4(sp)
   432bc:	df000104 	addi	fp,sp,4
   UDPCONN tmp;

   if (usocket < MINSOCKET)
   432c0:	d0a8bd0b 	ldhu	r2,-23820(gp)
   432c4:	10bfffcc 	andi	r2,r2,65535
   432c8:	10812c28 	cmpgeui	r2,r2,1200
   432cc:	10000c1e 	bne	r2,zero,43300 <udp_socket+0x4c>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
   432d0:	00800174 	movhi	r2,5
   432d4:	108fbe04 	addi	r2,r2,16120
   432d8:	10800017 	ldw	r2,0(r2)
   432dc:	109fffcc 	andi	r2,r2,32767
   432e0:	d0a8bd0d 	sth	r2,-23820(gp)
      if (usocket < MINSOCKET)
   432e4:	d0a8bd0b 	ldhu	r2,-23820(gp)
   432e8:	10bfffcc 	andi	r2,r2,65535
   432ec:	10812c28 	cmpgeui	r2,r2,1200
   432f0:	1000031e 	bne	r2,zero,43300 <udp_socket+0x4c>
         usocket += MINSOCKET;
   432f4:	d0a8bd0b 	ldhu	r2,-23820(gp)
   432f8:	10812c04 	addi	r2,r2,1200
   432fc:	d0a8bd0d 	sth	r2,-23820(gp)
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
   43300:	00800174 	movhi	r2,5
   43304:	108fb204 	addi	r2,r2,16072
   43308:	10800017 	ldw	r2,0(r2)
   4330c:	e0bfff15 	stw	r2,-4(fp)
   43310:	00001106 	br	43358 <udp_socket+0xa4>
   {
      if (tmp->u_lport == usocket)
   43314:	e0bfff17 	ldw	r2,-4(fp)
   43318:	10c0018b 	ldhu	r3,6(r2)
   4331c:	d0a8bd0b 	ldhu	r2,-23820(gp)
   43320:	18ffffcc 	andi	r3,r3,65535
   43324:	10bfffcc 	andi	r2,r2,65535
   43328:	1880081e 	bne	r3,r2,4334c <udp_socket+0x98>
      {
         usocket++;     /* bump socket number */
   4332c:	d0a8bd0b 	ldhu	r2,-23820(gp)
   43330:	10800044 	addi	r2,r2,1
   43334:	d0a8bd0d 	sth	r2,-23820(gp)
         tmp = firstudp;   /* restart scan */
   43338:	00800174 	movhi	r2,5
   4333c:	108fb204 	addi	r2,r2,16072
   43340:	10800017 	ldw	r2,0(r2)
   43344:	e0bfff15 	stw	r2,-4(fp)
         continue;
   43348:	0001883a 	nop
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
   4334c:	e0bfff17 	ldw	r2,-4(fp)
   43350:	10800017 	ldw	r2,0(r2)
   43354:	e0bfff15 	stw	r2,-4(fp)
   43358:	e0bfff17 	ldw	r2,-4(fp)
   4335c:	103fed1e 	bne	r2,zero,43314 <__alt_mem_descriptor_memory+0xdf003314>
         usocket++;     /* bump socket number */
         tmp = firstudp;   /* restart scan */
         continue;
      }
   }
   return usocket++;
   43360:	d0a8bd0b 	ldhu	r2,-23820(gp)
   43364:	10c00044 	addi	r3,r2,1
   43368:	d0e8bd0d 	sth	r3,-23820(gp)
}
   4336c:	e037883a 	mov	sp,fp
   43370:	df000017 	ldw	fp,0(sp)
   43374:	dec00104 	addi	sp,sp,4
   43378:	f800283a 	ret

0004337c <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
   4337c:	defffa04 	addi	sp,sp,-24
   43380:	dfc00515 	stw	ra,20(sp)
   43384:	df000415 	stw	fp,16(sp)
   43388:	df000404 	addi	fp,sp,16
   4338c:	e13ffe15 	stw	r4,-8(fp)
   43390:	e17fff15 	stw	r5,-4(fp)
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
   43394:	e0bffe17 	ldw	r2,-8(fp)
   43398:	10800244 	addi	r2,r2,9
   4339c:	1007883a 	mov	r3,r2
   433a0:	00bfff84 	movi	r2,-2
   433a4:	1884703a 	and	r2,r3,r2
   433a8:	e0bffc15 	stw	r2,-16(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   433ac:	01000084 	movi	r4,2
   433b0:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
   433b4:	e0bffc17 	ldw	r2,-16(fp)
   433b8:	10c00904 	addi	r3,r2,36
   433bc:	e0bfff17 	ldw	r2,-4(fp)
   433c0:	1885883a 	add	r2,r3,r2
   433c4:	1009883a 	mov	r4,r2
   433c8:	002a53c0 	call	2a53c <pk_alloc>
   433cc:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   433d0:	01000084 	movi	r4,2
   433d4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
   433d8:	e0bffd17 	ldw	r2,-12(fp)
   433dc:	10001026 	beq	r2,zero,43420 <udp_alloc+0xa4>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
   433e0:	e0bfff17 	ldw	r2,-4(fp)
   433e4:	1005d0ba 	srai	r2,r2,2
   433e8:	10800704 	addi	r2,r2,28
   433ec:	e0bffc15 	stw	r2,-16(fp)
      p->nb_prot += len;
   433f0:	e0bffd17 	ldw	r2,-12(fp)
   433f4:	10c00317 	ldw	r3,12(r2)
   433f8:	e0bffc17 	ldw	r2,-16(fp)
   433fc:	1887883a 	add	r3,r3,r2
   43400:	e0bffd17 	ldw	r2,-12(fp)
   43404:	10c00315 	stw	r3,12(r2)
      p->nb_plen -= len;
   43408:	e0bffd17 	ldw	r2,-12(fp)
   4340c:	10c00417 	ldw	r3,16(r2)
   43410:	e0bffc17 	ldw	r2,-16(fp)
   43414:	1887c83a 	sub	r3,r3,r2
   43418:	e0bffd17 	ldw	r2,-12(fp)
   4341c:	10c00415 	stw	r3,16(r2)
   }

   return (p);
   43420:	e0bffd17 	ldw	r2,-12(fp)
}
   43424:	e037883a 	mov	sp,fp
   43428:	dfc00117 	ldw	ra,4(sp)
   4342c:	df000017 	ldw	fp,0(sp)
   43430:	dec00204 	addi	sp,sp,8
   43434:	f800283a 	ret

00043438 <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
   43438:	deffff04 	addi	sp,sp,-4
   4343c:	df000015 	stw	fp,0(sp)
   43440:	d839883a 	mov	fp,sp
    * created is ((2^16 - 1) - (size of IP and UDP headers)) */
   return (0xFFFF - (sizeof (struct ip) + sizeof (struct udp)));
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
   43444:	00800174 	movhi	r2,5
   43448:	10876004 	addi	r2,r2,7552
   4344c:	10800017 	ldw	r2,0(r2)
   43450:	10bff704 	addi	r2,r2,-36
#endif
}
   43454:	e037883a 	mov	sp,fp
   43458:	df000017 	ldw	fp,0(sp)
   4345c:	dec00104 	addi	sp,sp,4
   43460:	f800283a 	ret

00043464 <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
   43464:	defffd04 	addi	sp,sp,-12
   43468:	dfc00215 	stw	ra,8(sp)
   4346c:	df000115 	stw	fp,4(sp)
   43470:	df000104 	addi	fp,sp,4
   43474:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   43478:	01000084 	movi	r4,2
   4347c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   43480:	e13fff17 	ldw	r4,-4(fp)
   43484:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   43488:	01000084 	movi	r4,2
   4348c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
}
   43490:	e037883a 	mov	sp,fp
   43494:	dfc00117 	ldw	ra,4(sp)
   43498:	df000017 	ldw	fp,0(sp)
   4349c:	dec00204 	addi	sp,sp,8
   434a0:	f800283a 	ret

000434a4 <igmpv1_input>:
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
   434a4:	defff804 	addi	sp,sp,-32
   434a8:	dfc00715 	stw	ra,28(sp)
   434ac:	df000615 	stw	fp,24(sp)
   434b0:	df000604 	addi	fp,sp,24
   434b4:	e13fff15 	stw	r4,-4(fp)
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
   434b8:	e0bfff17 	ldw	r2,-4(fp)
   434bc:	10800617 	ldw	r2,24(r2)
   434c0:	e0bffc15 	stw	r2,-16(fp)
   int rc;
         
   pip = ip_head (p);
   434c4:	e0bfff17 	ldw	r2,-4(fp)
   434c8:	10800317 	ldw	r2,12(r2)
   434cc:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));
   434d0:	e0bffd17 	ldw	r2,-12(fp)
   434d4:	10800003 	ldbu	r2,0(r2)
   434d8:	10803fcc 	andi	r2,r2,255
   434dc:	108003cc 	andi	r2,r2,15
   434e0:	1085883a 	add	r2,r2,r2
   434e4:	1085883a 	add	r2,r2,r2
   434e8:	1007883a 	mov	r3,r2
   434ec:	e0bffd17 	ldw	r2,-12(fp)
   434f0:	10c5883a 	add	r2,r2,r3
   434f4:	e0bffe15 	stw	r2,-8(fp)

   switch (igmp->igmp_type) 
   434f8:	e0bffe17 	ldw	r2,-8(fp)
   434fc:	10800003 	ldbu	r2,0(r2)
   43500:	10803fcc 	andi	r2,r2,255
   43504:	10c00460 	cmpeqi	r3,r2,17
   43508:	1800031e 	bne	r3,zero,43518 <igmpv1_input+0x74>
   4350c:	108004a0 	cmpeqi	r2,r2,18
   43510:	10005c1e 	bne	r2,zero,43684 <igmpv1_input+0x1e0>
   43514:	00007f06 	br	43714 <igmpv1_input+0x270>
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
   43518:	008001b4 	movhi	r2,6
   4351c:	10b79f04 	addi	r2,r2,-8580
   43520:	10800117 	ldw	r2,4(r2)
   43524:	10c00044 	addi	r3,r2,1
   43528:	008001b4 	movhi	r2,6
   4352c:	10b79f04 	addi	r2,r2,-8580
   43530:	10c00115 	stw	r3,4(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
   43534:	e0bffc17 	ldw	r2,-16(fp)
   43538:	10802c17 	ldw	r2,176(r2)
   4353c:	e0bffa15 	stw	r2,-24(fp)
   43540:	00004c06 	br	43674 <igmpv1_input+0x1d0>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
   43544:	e0bffa17 	ldw	r2,-24(fp)
   43548:	10800017 	ldw	r2,0(r2)
   4354c:	1000011e 	bne	r2,zero,43554 <igmpv1_input+0xb0>
            continue;
   43550:	00004506 	br	43668 <igmpv1_input+0x1c4>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
   43554:	e0bffa17 	ldw	r2,-24(fp)
   43558:	10c00017 	ldw	r3,0(r2)
   4355c:	00800174 	movhi	r2,5
   43560:	108f9e04 	addi	r2,r2,15992
   43564:	10800017 	ldw	r2,0(r2)
   43568:	18803f26 	beq	r3,r2,43668 <igmpv1_input+0x1c4>
         {
            if (inm->inm_timer == 0)
   4356c:	e0bffa17 	ldw	r2,-24(fp)
   43570:	10800317 	ldw	r2,12(r2)
   43574:	10003c1e 	bne	r2,zero,43668 <igmpv1_input+0x1c4>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
   43578:	008001b4 	movhi	r2,6
   4357c:	10b9e104 	addi	r2,r2,-6268
   43580:	10c00217 	ldw	r3,8(r2)
   43584:	008001b4 	movhi	r2,6
   43588:	10b79b04 	addi	r2,r2,-8596
   4358c:	10800017 	ldw	r2,0(r2)
   43590:	10800a17 	ldw	r2,40(r2)
   43594:	1008d63a 	srli	r4,r2,24
   43598:	008001b4 	movhi	r2,6
   4359c:	10b79b04 	addi	r2,r2,-8596
   435a0:	10800017 	ldw	r2,0(r2)
   435a4:	10800a17 	ldw	r2,40(r2)
   435a8:	1004d23a 	srli	r2,r2,8
   435ac:	10bfc00c 	andi	r2,r2,65280
   435b0:	2088b03a 	or	r4,r4,r2
   435b4:	008001b4 	movhi	r2,6
   435b8:	10b79b04 	addi	r2,r2,-8596
   435bc:	10800017 	ldw	r2,0(r2)
   435c0:	10800a17 	ldw	r2,40(r2)
   435c4:	10bfc00c 	andi	r2,r2,65280
   435c8:	1004923a 	slli	r2,r2,8
   435cc:	2088b03a 	or	r4,r4,r2
   435d0:	008001b4 	movhi	r2,6
   435d4:	10b79b04 	addi	r2,r2,-8596
   435d8:	10800017 	ldw	r2,0(r2)
   435dc:	10800a17 	ldw	r2,40(r2)
   435e0:	1004963a 	slli	r2,r2,24
   435e4:	2084b03a 	or	r2,r4,r2
   435e8:	1887883a 	add	r3,r3,r2
   435ec:	e0bffa17 	ldw	r2,-24(fp)
   435f0:	10800017 	ldw	r2,0(r2)
   435f4:	1008d63a 	srli	r4,r2,24
   435f8:	e0bffa17 	ldw	r2,-24(fp)
   435fc:	10800017 	ldw	r2,0(r2)
   43600:	1004d23a 	srli	r2,r2,8
   43604:	10bfc00c 	andi	r2,r2,65280
   43608:	2088b03a 	or	r4,r4,r2
   4360c:	e0bffa17 	ldw	r2,-24(fp)
   43610:	10800017 	ldw	r2,0(r2)
   43614:	10bfc00c 	andi	r2,r2,65280
   43618:	1004923a 	slli	r2,r2,8
   4361c:	2088b03a 	or	r4,r4,r2
   43620:	e0bffa17 	ldw	r2,-24(fp)
   43624:	10800017 	ldw	r2,0(r2)
   43628:	1004963a 	slli	r2,r2,24
   4362c:	2084b03a 	or	r2,r4,r2
   43630:	1885883a 	add	r2,r3,r2
   43634:	1009883a 	mov	r4,r2
   43638:	01400c84 	movi	r5,50
   4363c:	00152580 	call	15258 <__umodsi3>
   43640:	10c00044 	addi	r3,r2,1
   43644:	e0bffa17 	ldw	r2,-24(fp)
   43648:	10c00315 	stw	r3,12(r2)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
   4364c:	00800174 	movhi	r2,5
   43650:	108f9c04 	addi	r2,r2,15984
   43654:	10800017 	ldw	r2,0(r2)
   43658:	10c00044 	addi	r3,r2,1
   4365c:	00800174 	movhi	r2,5
   43660:	108f9c04 	addi	r2,r2,15984
   43664:	10c00015 	stw	r3,0(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
   43668:	e0bffa17 	ldw	r2,-24(fp)
   4366c:	10800517 	ldw	r2,20(r2)
   43670:	e0bffa15 	stw	r2,-24(fp)
   43674:	e0bffa17 	ldw	r2,-24(fp)
   43678:	103fb21e 	bne	r2,zero,43544 <__alt_mem_descriptor_memory+0xdf003544>
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
            }   
         }
      }
      rc = IGMP_OK;
   4367c:	e03ffb15 	stw	zero,-20(fp)
      break;
   43680:	00002e06 	br	4373c <igmpv1_input+0x298>

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
   43684:	008001b4 	movhi	r2,6
   43688:	10b79f04 	addi	r2,r2,-8580
   4368c:	10800217 	ldw	r2,8(r2)
   43690:	10c00044 	addi	r3,r2,1
   43694:	008001b4 	movhi	r2,6
   43698:	10b79f04 	addi	r2,r2,-8580
   4369c:	10c00215 	stw	r3,8(r2)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
   436a0:	e0bffe17 	ldw	r2,-8(fp)
   436a4:	10800117 	ldw	r2,4(r2)
   436a8:	1009883a 	mov	r4,r2
   436ac:	e17ffc17 	ldw	r5,-16(fp)
   436b0:	0041a5c0 	call	41a5c <lookup_mcast>
   436b4:	e0bffa15 	stw	r2,-24(fp)
      if (inm != NULL) 
   436b8:	e0bffa17 	ldw	r2,-24(fp)
   436bc:	10001326 	beq	r2,zero,4370c <igmpv1_input+0x268>
      {
         if (inm->inm_timer > 0)
   436c0:	e0bffa17 	ldw	r2,-24(fp)
   436c4:	10800317 	ldw	r2,12(r2)
   436c8:	10001026 	beq	r2,zero,4370c <igmpv1_input+0x268>
         {
            inm->inm_timer = 0;
   436cc:	e0bffa17 	ldw	r2,-24(fp)
   436d0:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
   436d4:	00800174 	movhi	r2,5
   436d8:	108f9c04 	addi	r2,r2,15984
   436dc:	10800017 	ldw	r2,0(r2)
   436e0:	10ffffc4 	addi	r3,r2,-1
   436e4:	00800174 	movhi	r2,5
   436e8:	108f9c04 	addi	r2,r2,15984
   436ec:	10c00015 	stw	r3,0(r2)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
   436f0:	008001b4 	movhi	r2,6
   436f4:	10b79f04 	addi	r2,r2,-8580
   436f8:	10800317 	ldw	r2,12(r2)
   436fc:	10c00044 	addi	r3,r2,1
   43700:	008001b4 	movhi	r2,6
   43704:	10b79f04 	addi	r2,r2,-8580
   43708:	10c00315 	stw	r3,12(r2)
         }
      }
      rc = IGMP_OK;
   4370c:	e03ffb15 	stw	zero,-20(fp)
      break;
   43710:	00000a06 	br	4373c <igmpv1_input+0x298>
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
   43714:	008001b4 	movhi	r2,6
   43718:	10b79f04 	addi	r2,r2,-8580
   4371c:	10801017 	ldw	r2,64(r2)
   43720:	10c00044 	addi	r3,r2,1
   43724:	008001b4 	movhi	r2,6
   43728:	10b79f04 	addi	r2,r2,-8580
   4372c:	10c01015 	stw	r3,64(r2)
      rc = IGMP_ERR;
   43730:	00bfffc4 	movi	r2,-1
   43734:	e0bffb15 	stw	r2,-20(fp)
      break;   
   43738:	0001883a 	nop
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   4373c:	01000084 	movi	r4,2
   43740:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   43744:	e13fff17 	ldw	r4,-4(fp)
   43748:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   4374c:	01000084 	movi	r4,2
   43750:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      
   return rc;
   43754:	e0bffb17 	ldw	r2,-20(fp)
}
   43758:	e037883a 	mov	sp,fp
   4375c:	dfc00117 	ldw	ra,4(sp)
   43760:	df000017 	ldw	fp,0(sp)
   43764:	dec00204 	addi	sp,sp,8
   43768:	f800283a 	ret

0004376c <igmpv2_input>:
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
   4376c:	defff904 	addi	sp,sp,-28
   43770:	dfc00615 	stw	ra,24(sp)
   43774:	df000515 	stw	fp,20(sp)
   43778:	df000504 	addi	fp,sp,20
   4377c:	e13fff15 	stw	r4,-4(fp)
   struct igmp * igmp;
   struct ip * pip;
   u_char type;
   int rc;

   pip = ip_head (p);    
   43780:	e0bfff17 	ldw	r2,-4(fp)
   43784:	10800317 	ldw	r2,12(r2)
   43788:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));   
   4378c:	e0bffc17 	ldw	r2,-16(fp)
   43790:	10800003 	ldbu	r2,0(r2)
   43794:	10803fcc 	andi	r2,r2,255
   43798:	108003cc 	andi	r2,r2,15
   4379c:	1085883a 	add	r2,r2,r2
   437a0:	1085883a 	add	r2,r2,r2
   437a4:	1007883a 	mov	r3,r2
   437a8:	e0bffc17 	ldw	r2,-16(fp)
   437ac:	10c5883a 	add	r2,r2,r3
   437b0:	e0bffd15 	stw	r2,-12(fp)
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;
   437b4:	e0bffd17 	ldw	r2,-12(fp)
   437b8:	10800003 	ldbu	r2,0(r2)
   437bc:	e0bffe05 	stb	r2,-8(fp)

   switch (type) 
   437c0:	e0bffe03 	ldbu	r2,-8(fp)
   437c4:	10c004a0 	cmpeqi	r3,r2,18
   437c8:	18000e1e 	bne	r3,zero,43804 <igmpv2_input+0x98>
   437cc:	10c004c8 	cmpgei	r3,r2,19
   437d0:	1800031e 	bne	r3,zero,437e0 <igmpv2_input+0x74>
   437d4:	10800460 	cmpeqi	r2,r2,17
   437d8:	1000061e 	bne	r2,zero,437f4 <igmpv2_input+0x88>
   437dc:	00001606 	br	43838 <igmpv2_input+0xcc>
   437e0:	10c005a0 	cmpeqi	r3,r2,22
   437e4:	1800071e 	bne	r3,zero,43804 <igmpv2_input+0x98>
   437e8:	108005e0 	cmpeqi	r2,r2,23
   437ec:	1000091e 	bne	r2,zero,43814 <igmpv2_input+0xa8>
   437f0:	00001106 	br	43838 <igmpv2_input+0xcc>
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
   437f4:	e13fff17 	ldw	r4,-4(fp)
   437f8:	00439d40 	call	439d4 <igmpv2_process_query>
   437fc:	e0bffb15 	stw	r2,-20(fp)
         break;
   43800:	00001706 	br	43860 <igmpv2_input+0xf4>

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
   43804:	e13fff17 	ldw	r4,-4(fp)
   43808:	00438900 	call	43890 <igmpv2_process_report>
   4380c:	e0bffb15 	stw	r2,-20(fp)
         break;
   43810:	00001306 	br	43860 <igmpv2_input+0xf4>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
   43814:	008001b4 	movhi	r2,6
   43818:	10b79f04 	addi	r2,r2,-8580
   4381c:	10800917 	ldw	r2,36(r2)
   43820:	10c00044 	addi	r3,r2,1
   43824:	008001b4 	movhi	r2,6
   43828:	10b79f04 	addi	r2,r2,-8580
   4382c:	10c00915 	stw	r3,36(r2)
         rc = IGMP_OK;
   43830:	e03ffb15 	stw	zero,-20(fp)
         break;               
   43834:	00000a06 	br	43860 <igmpv2_input+0xf4>

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
   43838:	008001b4 	movhi	r2,6
   4383c:	10b79f04 	addi	r2,r2,-8580
   43840:	10801517 	ldw	r2,84(r2)
   43844:	10c00044 	addi	r3,r2,1
   43848:	008001b4 	movhi	r2,6
   4384c:	10b79f04 	addi	r2,r2,-8580
   43850:	10c01515 	stw	r3,84(r2)
         rc = IGMP_ERR;         
   43854:	00bfffc4 	movi	r2,-1
   43858:	e0bffb15 	stw	r2,-20(fp)
         break;
   4385c:	0001883a 	nop
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
   43860:	01000084 	movi	r4,2
   43864:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   pk_free(p);
   43868:	e13fff17 	ldw	r4,-4(fp)
   4386c:	002a8940 	call	2a894 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   43870:	01000084 	movi	r4,2
   43874:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
   
   return rc;
   43878:	e0bffb17 	ldw	r2,-20(fp)
}
   4387c:	e037883a 	mov	sp,fp
   43880:	dfc00117 	ldw	ra,4(sp)
   43884:	df000017 	ldw	fp,0(sp)
   43888:	dec00204 	addi	sp,sp,8
   4388c:	f800283a 	ret

00043890 <igmpv2_process_report>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
   43890:	defff904 	addi	sp,sp,-28
   43894:	dfc00615 	stw	ra,24(sp)
   43898:	df000515 	stw	fp,20(sp)
   4389c:	df000504 	addi	fp,sp,20
   438a0:	e13fff15 	stw	r4,-4(fp)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
   438a4:	e0bfff17 	ldw	r2,-4(fp)
   438a8:	10800617 	ldw	r2,24(r2)
   438ac:	e0bffb15 	stw	r2,-20(fp)
   pip = ip_head (p);
   438b0:	e0bfff17 	ldw	r2,-4(fp)
   438b4:	10800317 	ldw	r2,12(r2)
   438b8:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));   
   438bc:	e0bffc17 	ldw	r2,-16(fp)
   438c0:	10800003 	ldbu	r2,0(r2)
   438c4:	10803fcc 	andi	r2,r2,255
   438c8:	108003cc 	andi	r2,r2,15
   438cc:	1085883a 	add	r2,r2,r2
   438d0:	1085883a 	add	r2,r2,r2
   438d4:	1007883a 	mov	r3,r2
   438d8:	e0bffc17 	ldw	r2,-16(fp)
   438dc:	10c5883a 	add	r2,r2,r3
   438e0:	e0bffd15 	stw	r2,-12(fp)
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
   438e4:	e0bffd17 	ldw	r2,-12(fp)
   438e8:	10800117 	ldw	r2,4(r2)
   438ec:	1009883a 	mov	r4,r2
   438f0:	e17ffb17 	ldw	r5,-20(fp)
   438f4:	0041a5c0 	call	41a5c <lookup_mcast>
   438f8:	e0bffe15 	stw	r2,-8(fp)
   if (inm != NULL) 
   438fc:	e0bffe17 	ldw	r2,-8(fp)
   43900:	10002726 	beq	r2,zero,439a0 <igmpv2_process_report+0x110>
   {
      if (inm->inm_timer != 0)
   43904:	e0bffe17 	ldw	r2,-8(fp)
   43908:	10800317 	ldw	r2,12(r2)
   4390c:	10001c26 	beq	r2,zero,43980 <igmpv2_process_report+0xf0>
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
   43910:	e0bffb17 	ldw	r2,-20(fp)
   43914:	10802d03 	ldbu	r2,180(r2)
   43918:	10803fcc 	andi	r2,r2,255
   4391c:	10000526 	beq	r2,zero,43934 <igmpv2_process_report+0xa4>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
   43920:	e0bffd17 	ldw	r2,-12(fp)
   43924:	10800003 	ldbu	r2,0(r2)
   if (inm != NULL) 
   {
      if (inm->inm_timer != 0)
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
   43928:	10803fcc 	andi	r2,r2,255
   4392c:	108005a0 	cmpeqi	r2,r2,22
   43930:	1000221e 	bne	r2,zero,439bc <igmpv2_process_report+0x12c>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
   43934:	e0bffe17 	ldw	r2,-8(fp)
   43938:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
   4393c:	00800174 	movhi	r2,5
   43940:	108f9c04 	addi	r2,r2,15984
   43944:	10800017 	ldw	r2,0(r2)
   43948:	10ffffc4 	addi	r3,r2,-1
   4394c:	00800174 	movhi	r2,5
   43950:	108f9c04 	addi	r2,r2,15984
   43954:	10c00015 	stw	r3,0(r2)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
   43958:	e0bffe17 	ldw	r2,-8(fp)
   4395c:	10000405 	stb	zero,16(r2)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
   43960:	008001b4 	movhi	r2,6
   43964:	10b79f04 	addi	r2,r2,-8580
   43968:	10800717 	ldw	r2,28(r2)
   4396c:	10c00044 	addi	r3,r2,1
   43970:	008001b4 	movhi	r2,6
   43974:	10b79f04 	addi	r2,r2,-8580
   43978:	10c00715 	stw	r3,28(r2)
   4397c:	00000f06 	br	439bc <igmpv2_process_report+0x12c>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
   43980:	008001b4 	movhi	r2,6
   43984:	10b79f04 	addi	r2,r2,-8580
   43988:	10800817 	ldw	r2,32(r2)
   4398c:	10c00044 	addi	r3,r2,1
   43990:	008001b4 	movhi	r2,6
   43994:	10b79f04 	addi	r2,r2,-8580
   43998:	10c00815 	stw	r3,32(r2)
   4399c:	00000706 	br	439bc <igmpv2_process_report+0x12c>
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
   439a0:	008001b4 	movhi	r2,6
   439a4:	10b79f04 	addi	r2,r2,-8580
   439a8:	10801317 	ldw	r2,76(r2)
   439ac:	10c00044 	addi	r3,r2,1
   439b0:	008001b4 	movhi	r2,6
   439b4:	10b79f04 	addi	r2,r2,-8580
   439b8:	10c01315 	stw	r3,76(r2)
   }
   
   return IGMP_OK;   
   439bc:	0005883a 	mov	r2,zero
}
   439c0:	e037883a 	mov	sp,fp
   439c4:	dfc00117 	ldw	ra,4(sp)
   439c8:	df000017 	ldw	fp,0(sp)
   439cc:	dec00204 	addi	sp,sp,8
   439d0:	f800283a 	ret

000439d4 <igmpv2_process_query>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
   439d4:	defff804 	addi	sp,sp,-32
   439d8:	dfc00715 	stw	ra,28(sp)
   439dc:	df000615 	stw	fp,24(sp)
   439e0:	df000604 	addi	fp,sp,24
   439e4:	e13fff15 	stw	r4,-4(fp)
   NET netp;
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;

   netp = p->net;
   439e8:	e0bfff17 	ldw	r2,-4(fp)
   439ec:	10800617 	ldw	r2,24(r2)
   439f0:	e0bffc15 	stw	r2,-16(fp)
   pip = ip_head (p);
   439f4:	e0bfff17 	ldw	r2,-4(fp)
   439f8:	10800317 	ldw	r2,12(r2)
   439fc:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));
   43a00:	e0bffd17 	ldw	r2,-12(fp)
   43a04:	10800003 	ldbu	r2,0(r2)
   43a08:	10803fcc 	andi	r2,r2,255
   43a0c:	108003cc 	andi	r2,r2,15
   43a10:	1085883a 	add	r2,r2,r2
   43a14:	1085883a 	add	r2,r2,r2
   43a18:	1007883a 	mov	r3,r2
   43a1c:	e0bffd17 	ldw	r2,-12(fp)
   43a20:	10c5883a 	add	r2,r2,r3
   43a24:	e0bffe15 	stw	r2,-8(fp)

   if (igmp->igmp_code == 0)
   43a28:	e0bffe17 	ldw	r2,-8(fp)
   43a2c:	10800043 	ldbu	r2,1(r2)
   43a30:	10803fcc 	andi	r2,r2,255
   43a34:	1000141e 	bne	r2,zero,43a88 <igmpv2_process_query+0xb4>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
   43a38:	e0bffc17 	ldw	r2,-16(fp)
   43a3c:	00c00044 	movi	r3,1
   43a40:	10c02d05 	stb	r3,180(r2)
      netp->igmpv1_query_rcvd_time = cticks;      
   43a44:	00800174 	movhi	r2,5
   43a48:	108fbe04 	addi	r2,r2,16120
   43a4c:	10c00017 	ldw	r3,0(r2)
   43a50:	e0bffc17 	ldw	r2,-16(fp)
   43a54:	10c02e15 	stw	r3,184(r2)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
   43a58:	008001b4 	movhi	r2,6
   43a5c:	10b79f04 	addi	r2,r2,-8580
   43a60:	10800417 	ldw	r2,16(r2)
   43a64:	10c00044 	addi	r3,r2,1
   43a68:	008001b4 	movhi	r2,6
   43a6c:	10b79f04 	addi	r2,r2,-8580
   43a70:	10c00415 	stw	r3,16(r2)
      /* set maximum time to respond to the equivalent of 10 
       * seconds worth of "ticks" (the timeout routine is
       * intended to be invoked PR_FASTHZ (5) times a second,
       * so each tick is equal to 200 ms) */
      max_resp_time = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;
   43a74:	00800c84 	movi	r2,50
   43a78:	e0bffa0d 	sth	r2,-24(fp)
      process_all = IGMP_TRUE;
   43a7c:	00800044 	movi	r2,1
   43a80:	e0bffa85 	stb	r2,-22(fp)
   43a84:	00001d06 	br	43afc <igmpv2_process_query+0x128>
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
   43a88:	e0bffe17 	ldw	r2,-8(fp)
   43a8c:	10800117 	ldw	r2,4(r2)
   43a90:	10000a1e 	bne	r2,zero,43abc <igmpv2_process_query+0xe8>
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
   43a94:	008001b4 	movhi	r2,6
   43a98:	10b79f04 	addi	r2,r2,-8580
   43a9c:	10800517 	ldw	r2,20(r2)
   43aa0:	10c00044 	addi	r3,r2,1
   43aa4:	008001b4 	movhi	r2,6
   43aa8:	10b79f04 	addi	r2,r2,-8580
   43aac:	10c00515 	stw	r3,20(r2)
         process_all = IGMP_TRUE;
   43ab0:	00800044 	movi	r2,1
   43ab4:	e0bffa85 	stb	r2,-22(fp)
   43ab8:	00000806 	br	43adc <igmpv2_process_query+0x108>
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
   43abc:	008001b4 	movhi	r2,6
   43ac0:	10b79f04 	addi	r2,r2,-8580
   43ac4:	10800617 	ldw	r2,24(r2)
   43ac8:	10c00044 	addi	r3,r2,1
   43acc:	008001b4 	movhi	r2,6
   43ad0:	10b79f04 	addi	r2,r2,-8580
   43ad4:	10c00615 	stw	r3,24(r2)
         process_all = IGMP_FALSE;
   43ad8:	e03ffa85 	stb	zero,-22(fp)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
   43adc:	e0bffe17 	ldw	r2,-8(fp)
   43ae0:	10800043 	ldbu	r2,1(r2)
   43ae4:	10803fcc 	andi	r2,r2,255
   43ae8:	10800164 	muli	r2,r2,5
   43aec:	1009883a 	mov	r4,r2
   43af0:	01400284 	movi	r5,10
   43af4:	00151a00 	call	151a0 <__divsi3>
   43af8:	e0bffa0d 	sth	r2,-24(fp)
   
   /* process all entries in a link's multicast address linked
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   43afc:	e0bffa83 	ldbu	r2,-22(fp)
   43b00:	10001826 	beq	r2,zero,43b64 <igmpv2_process_query+0x190>
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
   43b04:	e0bffc17 	ldw	r2,-16(fp)
   43b08:	10802c17 	ldw	r2,176(r2)
   43b0c:	e0bffb15 	stw	r2,-20(fp)
   43b10:	00001106 	br	43b58 <igmpv2_process_query+0x184>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
   43b14:	e0bffb17 	ldw	r2,-20(fp)
   43b18:	10800017 	ldw	r2,0(r2)
   43b1c:	1000011e 	bne	r2,zero,43b24 <igmpv2_process_query+0x150>
   43b20:	00000a06 	br	43b4c <igmpv2_process_query+0x178>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
   43b24:	e0bffb17 	ldw	r2,-20(fp)
   43b28:	10c00017 	ldw	r3,0(r2)
   43b2c:	00800174 	movhi	r2,5
   43b30:	108f9e04 	addi	r2,r2,15992
   43b34:	10800017 	ldw	r2,0(r2)
   43b38:	18800426 	beq	r3,r2,43b4c <igmpv2_process_query+0x178>
            igmpv2_chk_set_timer (inm, max_resp_time);
   43b3c:	e0bffa0b 	ldhu	r2,-24(fp)
   43b40:	e13ffb17 	ldw	r4,-20(fp)
   43b44:	100b883a 	mov	r5,r2
   43b48:	0043bcc0 	call	43bcc <igmpv2_chk_set_timer>
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
   43b4c:	e0bffb17 	ldw	r2,-20(fp)
   43b50:	10800517 	ldw	r2,20(r2)
   43b54:	e0bffb15 	stw	r2,-20(fp)
   43b58:	e0bffb17 	ldw	r2,-20(fp)
   43b5c:	103fed1e 	bne	r2,zero,43b14 <__alt_mem_descriptor_memory+0xdf003b14>
   43b60:	00001406 	br	43bb4 <igmpv2_process_query+0x1e0>
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
   43b64:	e0bffe17 	ldw	r2,-8(fp)
   43b68:	10800117 	ldw	r2,4(r2)
   43b6c:	1009883a 	mov	r4,r2
   43b70:	e17ffc17 	ldw	r5,-16(fp)
   43b74:	0041a5c0 	call	41a5c <lookup_mcast>
   43b78:	e0bffb15 	stw	r2,-20(fp)
      if (inm != NULL)
   43b7c:	e0bffb17 	ldw	r2,-20(fp)
   43b80:	10000526 	beq	r2,zero,43b98 <igmpv2_process_query+0x1c4>
         igmpv2_chk_set_timer (inm, max_resp_time);
   43b84:	e0bffa0b 	ldhu	r2,-24(fp)
   43b88:	e13ffb17 	ldw	r4,-20(fp)
   43b8c:	100b883a 	mov	r5,r2
   43b90:	0043bcc0 	call	43bcc <igmpv2_chk_set_timer>
   43b94:	00000706 	br	43bb4 <igmpv2_process_query+0x1e0>
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
   43b98:	008001b4 	movhi	r2,6
   43b9c:	10b79f04 	addi	r2,r2,-8580
   43ba0:	10801217 	ldw	r2,72(r2)
   43ba4:	10c00044 	addi	r3,r2,1
   43ba8:	008001b4 	movhi	r2,6
   43bac:	10b79f04 	addi	r2,r2,-8580
   43bb0:	10c01215 	stw	r3,72(r2)
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
   43bb4:	0005883a 	mov	r2,zero
}
   43bb8:	e037883a 	mov	sp,fp
   43bbc:	dfc00117 	ldw	ra,4(sp)
   43bc0:	df000017 	ldw	fp,0(sp)
   43bc4:	dec00204 	addi	sp,sp,8
   43bc8:	f800283a 	ret

00043bcc <igmpv2_chk_set_timer>:
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
   43bcc:	defffc04 	addi	sp,sp,-16
   43bd0:	dfc00315 	stw	ra,12(sp)
   43bd4:	df000215 	stw	fp,8(sp)
   43bd8:	df000204 	addi	fp,sp,8
   43bdc:	e13ffe15 	stw	r4,-8(fp)
   43be0:	2805883a 	mov	r2,r5
   43be4:	e0bfff0d 	sth	r2,-4(fp)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
   43be8:	e0bffe17 	ldw	r2,-8(fp)
   43bec:	10800317 	ldw	r2,12(r2)
   43bf0:	e0ffff0b 	ldhu	r3,-4(fp)
   43bf4:	18800336 	bltu	r3,r2,43c04 <igmpv2_chk_set_timer+0x38>
       (inm->inm_timer == 0))
   43bf8:	e0bffe17 	ldw	r2,-8(fp)
   43bfc:	10800317 	ldw	r2,12(r2)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
   43c00:	1000401e 	bne	r2,zero,43d04 <igmpv2_chk_set_timer+0x138>
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
   43c04:	e0bffe17 	ldw	r2,-8(fp)
   43c08:	10800317 	ldw	r2,12(r2)
   43c0c:	1000071e 	bne	r2,zero,43c2c <igmpv2_chk_set_timer+0x60>
   43c10:	00800174 	movhi	r2,5
   43c14:	108f9c04 	addi	r2,r2,15984
   43c18:	10800017 	ldw	r2,0(r2)
   43c1c:	10c00044 	addi	r3,r2,1
   43c20:	00800174 	movhi	r2,5
   43c24:	108f9c04 	addi	r2,r2,15984
   43c28:	10c00015 	stw	r3,0(r2)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
   43c2c:	008001b4 	movhi	r2,6
   43c30:	10b9e104 	addi	r2,r2,-6268
   43c34:	10c00217 	ldw	r3,8(r2)
   43c38:	008001b4 	movhi	r2,6
   43c3c:	10b79b04 	addi	r2,r2,-8596
   43c40:	10800017 	ldw	r2,0(r2)
   43c44:	10800a17 	ldw	r2,40(r2)
   43c48:	1008d63a 	srli	r4,r2,24
   43c4c:	008001b4 	movhi	r2,6
   43c50:	10b79b04 	addi	r2,r2,-8596
   43c54:	10800017 	ldw	r2,0(r2)
   43c58:	10800a17 	ldw	r2,40(r2)
   43c5c:	1004d23a 	srli	r2,r2,8
   43c60:	10bfc00c 	andi	r2,r2,65280
   43c64:	2088b03a 	or	r4,r4,r2
   43c68:	008001b4 	movhi	r2,6
   43c6c:	10b79b04 	addi	r2,r2,-8596
   43c70:	10800017 	ldw	r2,0(r2)
   43c74:	10800a17 	ldw	r2,40(r2)
   43c78:	10bfc00c 	andi	r2,r2,65280
   43c7c:	1004923a 	slli	r2,r2,8
   43c80:	2088b03a 	or	r4,r4,r2
   43c84:	008001b4 	movhi	r2,6
   43c88:	10b79b04 	addi	r2,r2,-8596
   43c8c:	10800017 	ldw	r2,0(r2)
   43c90:	10800a17 	ldw	r2,40(r2)
   43c94:	1004963a 	slli	r2,r2,24
   43c98:	2084b03a 	or	r2,r4,r2
   43c9c:	1887883a 	add	r3,r3,r2
   43ca0:	e0bffe17 	ldw	r2,-8(fp)
   43ca4:	10800017 	ldw	r2,0(r2)
   43ca8:	1008d63a 	srli	r4,r2,24
   43cac:	e0bffe17 	ldw	r2,-8(fp)
   43cb0:	10800017 	ldw	r2,0(r2)
   43cb4:	1004d23a 	srli	r2,r2,8
   43cb8:	10bfc00c 	andi	r2,r2,65280
   43cbc:	2088b03a 	or	r4,r4,r2
   43cc0:	e0bffe17 	ldw	r2,-8(fp)
   43cc4:	10800017 	ldw	r2,0(r2)
   43cc8:	10bfc00c 	andi	r2,r2,65280
   43ccc:	1004923a 	slli	r2,r2,8
   43cd0:	2088b03a 	or	r4,r4,r2
   43cd4:	e0bffe17 	ldw	r2,-8(fp)
   43cd8:	10800017 	ldw	r2,0(r2)
   43cdc:	1004963a 	slli	r2,r2,24
   43ce0:	2084b03a 	or	r2,r4,r2
   43ce4:	1887883a 	add	r3,r3,r2
   43ce8:	e0bfff0b 	ldhu	r2,-4(fp)
   43cec:	1809883a 	mov	r4,r3
   43cf0:	100b883a 	mov	r5,r2
   43cf4:	00152580 	call	15258 <__umodsi3>
   43cf8:	10c00044 	addi	r3,r2,1
   43cfc:	e0bffe17 	ldw	r2,-8(fp)
   43d00:	10c00315 	stw	r3,12(r2)
   }

   return;
   43d04:	0001883a 	nop
}
   43d08:	e037883a 	mov	sp,fp
   43d0c:	dfc00117 	ldw	ra,4(sp)
   43d10:	df000017 	ldw	fp,0(sp)
   43d14:	dec00204 	addi	sp,sp,8
   43d18:	f800283a 	ret

00043d1c <igmpv2_chk4_rtr_alert_opt>:
 *         the IP Router Alert option in the received
 *         packet, and IGMP_FALSE otherwise.
 */

u_char igmpv2_chk4_rtr_alert_opt (struct ip * pip)
{
   43d1c:	defffb04 	addi	sp,sp,-20
   43d20:	df000415 	stw	fp,16(sp)
   43d24:	df000404 	addi	fp,sp,16
   43d28:	e13fff15 	stw	r4,-4(fp)
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
   43d2c:	e0bfff17 	ldw	r2,-4(fp)
   43d30:	10800003 	ldbu	r2,0(r2)
   43d34:	108003cc 	andi	r2,r2,15
   43d38:	1085883a 	add	r2,r2,r2
   43d3c:	1085883a 	add	r2,r2,r2
   43d40:	10bffb04 	addi	r2,r2,-20
   43d44:	e0bffd05 	stb	r2,-12(fp)

   if (total_optlen > 0)
   43d48:	e0bffd03 	ldbu	r2,-12(fp)
   43d4c:	10003e26 	beq	r2,zero,43e48 <igmpv2_chk4_rtr_alert_opt+0x12c>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
   43d50:	e0bfff17 	ldw	r2,-4(fp)
   43d54:	10800504 	addi	r2,r2,20
   43d58:	e0bffc15 	stw	r2,-16(fp)
  
      while (total_optlen > 0)
   43d5c:	00003806 	br	43e40 <igmpv2_chk4_rtr_alert_opt+0x124>
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
   43d60:	e0bffc17 	ldw	r2,-16(fp)
   43d64:	10800003 	ldbu	r2,0(r2)
   43d68:	108007cc 	andi	r2,r2,31
   43d6c:	e0bffd85 	stb	r2,-10(fp)
         switch (optval)
   43d70:	e0bffd83 	ldbu	r2,-10(fp)
   43d74:	10c00060 	cmpeqi	r3,r2,1
   43d78:	1800071e 	bne	r3,zero,43d98 <igmpv2_chk4_rtr_alert_opt+0x7c>
   43d7c:	10c00520 	cmpeqi	r3,r2,20
   43d80:	1800081e 	bne	r3,zero,43da4 <igmpv2_chk4_rtr_alert_opt+0x88>
   43d84:	1000201e 	bne	r2,zero,43e08 <igmpv2_chk4_rtr_alert_opt+0xec>
         {
            case EOL_OPT:
               /* we've encountered the End of Option List option, 
                * and so setting optlen isn't necessary */
               optlen = 1;
   43d88:	00800044 	movi	r2,1
   43d8c:	e0bffd45 	stb	r2,-11(fp)
               /* we're done - we couldn't locate the IP Router Alert 
                * option in this IP header */
               return IGMP_FALSE;
   43d90:	0005883a 	mov	r2,zero
   43d94:	00002d06 	br	43e4c <igmpv2_chk4_rtr_alert_opt+0x130>
         
            case NOOP_OPT:
               /* skip past the one byte of the No Operation option */
               optlen = 1;
   43d98:	00800044 	movi	r2,1
   43d9c:	e0bffd45 	stb	r2,-11(fp)
               break;
   43da0:	00001f06 	br	43e20 <igmpv2_chk4_rtr_alert_opt+0x104>
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
   43da4:	e0bffc17 	ldw	r2,-16(fp)
   43da8:	e0bffe15 	stw	r2,-8(fp)
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
   43dac:	e0bffe17 	ldw	r2,-8(fp)
   43db0:	10800017 	ldw	r2,0(r2)
   43db4:	1006d63a 	srli	r3,r2,24
   43db8:	e0bffe17 	ldw	r2,-8(fp)
   43dbc:	10800017 	ldw	r2,0(r2)
   43dc0:	1004d23a 	srli	r2,r2,8
   43dc4:	10bfc00c 	andi	r2,r2,65280
   43dc8:	1886b03a 	or	r3,r3,r2
   43dcc:	e0bffe17 	ldw	r2,-8(fp)
   43dd0:	10800017 	ldw	r2,0(r2)
   43dd4:	10bfc00c 	andi	r2,r2,65280
   43dd8:	1004923a 	slli	r2,r2,8
   43ddc:	1886b03a 	or	r3,r3,r2
   43de0:	e0bffe17 	ldw	r2,-8(fp)
   43de4:	10800017 	ldw	r2,0(r2)
   43de8:	1004963a 	slli	r2,r2,24
   43dec:	1886b03a 	or	r3,r3,r2
   43df0:	00a50134 	movhi	r2,37892
   43df4:	1880021e 	bne	r3,r2,43e00 <igmpv2_chk4_rtr_alert_opt+0xe4>
                  /* found the option, return success */
                  return IGMP_TRUE;
   43df8:	00800044 	movi	r2,1
   43dfc:	00001306 	br	43e4c <igmpv2_chk4_rtr_alert_opt+0x130>
               else return IGMP_FALSE;
   43e00:	0005883a 	mov	r2,zero
   43e04:	00001106 	br	43e4c <igmpv2_chk4_rtr_alert_opt+0x130>
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
   43e08:	e0bffc17 	ldw	r2,-16(fp)
   43e0c:	10800044 	addi	r2,r2,1
   43e10:	10800003 	ldbu	r2,0(r2)
   43e14:	10800084 	addi	r2,r2,2
   43e18:	e0bffd45 	stb	r2,-11(fp)
               break;
   43e1c:	0001883a 	nop
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
   43e20:	e0bffd43 	ldbu	r2,-11(fp)
   43e24:	e0fffc17 	ldw	r3,-16(fp)
   43e28:	1885883a 	add	r2,r3,r2
   43e2c:	e0bffc15 	stw	r2,-16(fp)
         total_optlen -= optlen;
   43e30:	e0fffd03 	ldbu	r3,-12(fp)
   43e34:	e0bffd43 	ldbu	r2,-11(fp)
   43e38:	1885c83a 	sub	r2,r3,r2
   43e3c:	e0bffd05 	stb	r2,-12(fp)
   if (total_optlen > 0)
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  
      while (total_optlen > 0)
   43e40:	e0bffd03 	ldbu	r2,-12(fp)
   43e44:	103fc61e 	bne	r2,zero,43d60 <__alt_mem_descriptor_memory+0xdf003d60>
         total_optlen -= optlen;
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
   43e48:	0005883a 	mov	r2,zero
}
   43e4c:	e037883a 	mov	sp,fp
   43e50:	df000017 	ldw	fp,0(sp)
   43e54:	dec00104 	addi	sp,sp,4
   43e58:	f800283a 	ret

00043e5c <IPADDR_TO_NETP>:
 * RETURNS: 
 */

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
   43e5c:	defffc04 	addi	sp,sp,-16
   43e60:	df000315 	stw	fp,12(sp)
   43e64:	df000304 	addi	fp,sp,12
   43e68:	e13ffe15 	stw	r4,-8(fp)
   43e6c:	e17fff15 	stw	r5,-4(fp)
   u_short  idx   =  0;
   43e70:	e03ffd0d 	sth	zero,-12(fp)
   *netp = nets[idx];
   43e74:	e0fffd0b 	ldhu	r3,-12(fp)
   43e78:	008001b4 	movhi	r2,6
   43e7c:	10b79b04 	addi	r2,r2,-8596
   43e80:	18c7883a 	add	r3,r3,r3
   43e84:	18c7883a 	add	r3,r3,r3
   43e88:	10c5883a 	add	r2,r2,r3
   43e8c:	10c00017 	ldw	r3,0(r2)
   43e90:	e0bfff17 	ldw	r2,-4(fp)
   43e94:	10c00015 	stw	r3,0(r2)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   43e98:	e0bffe17 	ldw	r2,-8(fp)
   43e9c:	10001f1e 	bne	r2,zero,43f1c <IPADDR_TO_NETP+0xc0>
   {
      for (idx = 0; idx < ifNumber; idx++)
   43ea0:	e03ffd0d 	sth	zero,-12(fp)
   43ea4:	00001706 	br	43f04 <IPADDR_TO_NETP+0xa8>
      {
         if (nets[idx]->n_mcastlist)
   43ea8:	e0fffd0b 	ldhu	r3,-12(fp)
   43eac:	008001b4 	movhi	r2,6
   43eb0:	10b79b04 	addi	r2,r2,-8596
   43eb4:	18c7883a 	add	r3,r3,r3
   43eb8:	18c7883a 	add	r3,r3,r3
   43ebc:	10c5883a 	add	r2,r2,r3
   43ec0:	10800017 	ldw	r2,0(r2)
   43ec4:	10802b17 	ldw	r2,172(r2)
   43ec8:	10000b26 	beq	r2,zero,43ef8 <IPADDR_TO_NETP+0x9c>
         {
            *netp = nets[idx];
   43ecc:	e0fffd0b 	ldhu	r3,-12(fp)
   43ed0:	008001b4 	movhi	r2,6
   43ed4:	10b79b04 	addi	r2,r2,-8596
   43ed8:	18c7883a 	add	r3,r3,r3
   43edc:	18c7883a 	add	r3,r3,r3
   43ee0:	10c5883a 	add	r2,r2,r3
   43ee4:	10c00017 	ldw	r3,0(r2)
   43ee8:	e0bfff17 	ldw	r2,-4(fp)
   43eec:	10c00015 	stw	r3,0(r2)
            break;
   43ef0:	0001883a 	nop
   43ef4:	00002606 	br	43f90 <IPADDR_TO_NETP+0x134>
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
   43ef8:	e0bffd0b 	ldhu	r2,-12(fp)
   43efc:	10800044 	addi	r2,r2,1
   43f00:	e0bffd0d 	sth	r2,-12(fp)
   43f04:	e0fffd0b 	ldhu	r3,-12(fp)
   43f08:	00800174 	movhi	r2,5
   43f0c:	108f9a04 	addi	r2,r2,15976
   43f10:	10800017 	ldw	r2,0(r2)
   43f14:	18bfe436 	bltu	r3,r2,43ea8 <__alt_mem_descriptor_memory+0xdf003ea8>
   43f18:	00001d06 	br	43f90 <IPADDR_TO_NETP+0x134>
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
   43f1c:	00001406 	br	43f70 <IPADDR_TO_NETP+0x114>
      {
         idx++;
   43f20:	e0bffd0b 	ldhu	r2,-12(fp)
   43f24:	10800044 	addi	r2,r2,1
   43f28:	e0bffd0d 	sth	r2,-12(fp)
         if (idx >= ifNumber)
   43f2c:	e0fffd0b 	ldhu	r3,-12(fp)
   43f30:	00800174 	movhi	r2,5
   43f34:	108f9a04 	addi	r2,r2,15976
   43f38:	10800017 	ldw	r2,0(r2)
   43f3c:	18800336 	bltu	r3,r2,43f4c <IPADDR_TO_NETP+0xf0>
         {
            *netp = NULL;
   43f40:	e0bfff17 	ldw	r2,-4(fp)
   43f44:	10000015 	stw	zero,0(r2)
            break;
   43f48:	00001106 	br	43f90 <IPADDR_TO_NETP+0x134>
         }
         else
            *netp = nets[idx];
   43f4c:	e0fffd0b 	ldhu	r3,-12(fp)
   43f50:	008001b4 	movhi	r2,6
   43f54:	10b79b04 	addi	r2,r2,-8596
   43f58:	18c7883a 	add	r3,r3,r3
   43f5c:	18c7883a 	add	r3,r3,r3
   43f60:	10c5883a 	add	r2,r2,r3
   43f64:	10c00017 	ldw	r3,0(r2)
   43f68:	e0bfff17 	ldw	r2,-4(fp)
   43f6c:	10c00015 	stw	r3,0(r2)
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
   43f70:	e0bfff17 	ldw	r2,-4(fp)
   43f74:	10800017 	ldw	r2,0(r2)
   43f78:	10000526 	beq	r2,zero,43f90 <IPADDR_TO_NETP+0x134>
   43f7c:	e0bfff17 	ldw	r2,-4(fp)
   43f80:	10800017 	ldw	r2,0(r2)
   43f84:	10c00a17 	ldw	r3,40(r2)
   43f88:	e0bffe17 	ldw	r2,-8(fp)
   43f8c:	18bfe41e 	bne	r3,r2,43f20 <__alt_mem_descriptor_memory+0xdf003f20>
         }
         else
            *netp = nets[idx];
      }
   }
}
   43f90:	e037883a 	mov	sp,fp
   43f94:	df000017 	ldw	fp,0(sp)
   43f98:	dec00104 	addi	sp,sp,4
   43f9c:	f800283a 	ret

00043fa0 <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
   43fa0:	defff304 	addi	sp,sp,-52
   43fa4:	dfc00c15 	stw	ra,48(sp)
   43fa8:	df000b15 	stw	fp,44(sp)
   43fac:	dc000a15 	stw	r16,40(sp)
   43fb0:	df000b04 	addi	fp,sp,44
   43fb4:	e13ffc15 	stw	r4,-16(fp)
   43fb8:	e17ffd15 	stw	r5,-12(fp)
   43fbc:	e1bffe15 	stw	r6,-8(fp)
   int   error =  0;
   43fc0:	e03ff515 	stw	zero,-44(fp)
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
   43fc4:	e03ffb15 	stw	zero,-20(fp)
   struct ip_moptions * imo   =  so->inp_moptions;
   43fc8:	e0bffd17 	ldw	r2,-12(fp)
   43fcc:	10800317 	ldw	r2,12(r2)
   43fd0:	e0bff715 	stw	r2,-36(fp)
   struct ip_moptions **imop  =  &so->inp_moptions;
   43fd4:	e0bffd17 	ldw	r2,-12(fp)
   43fd8:	10800304 	addi	r2,r2,12
   43fdc:	e0bff815 	stw	r2,-32(fp)
   ip_addr addr;


   if (imo == NULL) 
   43fe0:	e0bff717 	ldw	r2,-36(fp)
   43fe4:	1000141e 	bne	r2,zero,44038 <ip_setmoptions+0x98>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
   43fe8:	01001604 	movi	r4,88
   43fec:	002bce00 	call	2bce0 <npalloc>
   43ff0:	e0bff715 	stw	r2,-36(fp)

      if (imo == NULL)
   43ff4:	e0bff717 	ldw	r2,-36(fp)
   43ff8:	1000021e 	bne	r2,zero,44004 <ip_setmoptions+0x64>
         return (ENOBUFS);
   43ffc:	00801a44 	movi	r2,105
   44000:	00015106 	br	44548 <ip_setmoptions+0x5a8>
      *imop = imo;
   44004:	e0bff817 	ldw	r2,-32(fp)
   44008:	e0fff717 	ldw	r3,-36(fp)
   4400c:	10c00015 	stw	r3,0(r2)
      imo->imo_multicast_netp = NULL;
   44010:	e0bff717 	ldw	r2,-36(fp)
   44014:	10000015 	stw	zero,0(r2)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
   44018:	e0bff717 	ldw	r2,-36(fp)
   4401c:	00c00044 	movi	r3,1
   44020:	10c00105 	stb	r3,4(r2)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
   44024:	e0bff717 	ldw	r2,-36(fp)
   44028:	00c00044 	movi	r3,1
   4402c:	10c00145 	stb	r3,5(r2)
      imo->imo_num_memberships = 0;
   44030:	e0bff717 	ldw	r2,-36(fp)
   44034:	1000018d 	sth	zero,6(r2)
   }

   switch (optname) 
   44038:	e0bffc17 	ldw	r2,-16(fp)
   4403c:	10bffdc4 	addi	r2,r2,-9
   44040:	10c00168 	cmpgeui	r3,r2,5
   44044:	1801251e 	bne	r3,zero,444dc <ip_setmoptions+0x53c>
   44048:	100690ba 	slli	r3,r2,2
   4404c:	00800134 	movhi	r2,4
   44050:	10901804 	addi	r2,r2,16480
   44054:	1885883a 	add	r2,r3,r2
   44058:	10800017 	ldw	r2,0(r2)
   4405c:	1000683a 	jmp	r2
   44060:	00044074 	movhi	zero,4353
   44064:	000440e0 	cmpeqi	zero,zero,4355
   44068:	000440f4 	movhi	zero,4355
   4406c:	00044128 	cmpgeui	zero,zero,4356
   44070:	000442f8 	rdprs	zero,zero,4363

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
   44074:	e0bffe17 	ldw	r2,-8(fp)
   44078:	10800017 	ldw	r2,0(r2)
   4407c:	e0bff915 	stw	r2,-28(fp)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
   44080:	e0bff917 	ldw	r2,-28(fp)
   44084:	1000031e 	bne	r2,zero,44094 <ip_setmoptions+0xf4>
      {
         imo->imo_multicast_netp = NULL;
   44088:	e0bff717 	ldw	r2,-36(fp)
   4408c:	10000015 	stw	zero,0(r2)
         break;
   44090:	00011506 	br	444e8 <ip_setmoptions+0x548>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
   44094:	e0bffb04 	addi	r2,fp,-20
   44098:	e13ff917 	ldw	r4,-28(fp)
   4409c:	100b883a 	mov	r5,r2
   440a0:	0043e5c0 	call	43e5c <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
   440a4:	e0bffb17 	ldw	r2,-20(fp)
   440a8:	10000326 	beq	r2,zero,440b8 <ip_setmoptions+0x118>
   440ac:	e0bffb17 	ldw	r2,-20(fp)
   440b0:	10802b17 	ldw	r2,172(r2)
   440b4:	1000031e 	bne	r2,zero,440c4 <ip_setmoptions+0x124>
      {
         error = EADDRNOTAVAIL;
   440b8:	00801f44 	movi	r2,125
   440bc:	e0bff515 	stw	r2,-44(fp)
         break;
   440c0:	00010906 	br	444e8 <ip_setmoptions+0x548>
      }
      if (addr != AADDR) 
   440c4:	e0bff917 	ldw	r2,-28(fp)
   440c8:	10000426 	beq	r2,zero,440dc <ip_setmoptions+0x13c>
         imo->imo_multicast_netp = netp;
   440cc:	e0fffb17 	ldw	r3,-20(fp)
   440d0:	e0bff717 	ldw	r2,-36(fp)
   440d4:	10c00015 	stw	r3,0(r2)
      break;
   440d8:	00010306 	br	444e8 <ip_setmoptions+0x548>
   440dc:	00010206 	br	444e8 <ip_setmoptions+0x548>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
   440e0:	e0bffe17 	ldw	r2,-8(fp)
   440e4:	10c00003 	ldbu	r3,0(r2)
   440e8:	e0bff717 	ldw	r2,-36(fp)
   440ec:	10c00105 	stb	r3,4(r2)
      break;
   440f0:	0000fd06 	br	444e8 <ip_setmoptions+0x548>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
   440f4:	e0bffe17 	ldw	r2,-8(fp)
   440f8:	10800003 	ldbu	r2,0(r2)
   440fc:	10803fcc 	andi	r2,r2,255
   44100:	108000b0 	cmpltui	r2,r2,2
   44104:	1000031e 	bne	r2,zero,44114 <ip_setmoptions+0x174>
      {
         error = EINVAL;
   44108:	00800584 	movi	r2,22
   4410c:	e0bff515 	stw	r2,-44(fp)
         break;
   44110:	0000f506 	br	444e8 <ip_setmoptions+0x548>
      }
      imo->imo_multicast_loop = *(u_char *)(val);
   44114:	e0bffe17 	ldw	r2,-8(fp)
   44118:	10c00003 	ldbu	r3,0(r2)
   4411c:	e0bff717 	ldw	r2,-36(fp)
   44120:	10c00145 	stb	r3,5(r2)
      break;
   44124:	0000f006 	br	444e8 <ip_setmoptions+0x548>
   case IP_ADD_MEMBERSHIP:
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
   44128:	e0bffe17 	ldw	r2,-8(fp)
   4412c:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
   44130:	e0bffa17 	ldw	r2,-24(fp)
   44134:	10800017 	ldw	r2,0(r2)
   44138:	1006d63a 	srli	r3,r2,24
   4413c:	e0bffa17 	ldw	r2,-24(fp)
   44140:	10800017 	ldw	r2,0(r2)
   44144:	1004d23a 	srli	r2,r2,8
   44148:	10bfc00c 	andi	r2,r2,65280
   4414c:	1886b03a 	or	r3,r3,r2
   44150:	e0bffa17 	ldw	r2,-24(fp)
   44154:	10800017 	ldw	r2,0(r2)
   44158:	10bfc00c 	andi	r2,r2,65280
   4415c:	1004923a 	slli	r2,r2,8
   44160:	1886b03a 	or	r3,r3,r2
   44164:	e0bffa17 	ldw	r2,-24(fp)
   44168:	10800017 	ldw	r2,0(r2)
   4416c:	1004963a 	slli	r2,r2,24
   44170:	1884b03a 	or	r2,r3,r2
   44174:	10fc002c 	andhi	r3,r2,61440
   44178:	00b80034 	movhi	r2,57344
   4417c:	18800326 	beq	r3,r2,4418c <ip_setmoptions+0x1ec>
      {
         error = EINVAL;
   44180:	00800584 	movi	r2,22
   44184:	e0bff515 	stw	r2,-44(fp)
         break;
   44188:	0000d706 	br	444e8 <ip_setmoptions+0x548>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
   4418c:	e0bffa17 	ldw	r2,-24(fp)
   44190:	10c00117 	ldw	r3,4(r2)
   44194:	e0bffb04 	addi	r2,fp,-20
   44198:	1809883a 	mov	r4,r3
   4419c:	100b883a 	mov	r5,r2
   441a0:	0043e5c0 	call	43e5c <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
   441a4:	e0bffb17 	ldw	r2,-20(fp)
   441a8:	10000326 	beq	r2,zero,441b8 <ip_setmoptions+0x218>
   441ac:	e0bffb17 	ldw	r2,-20(fp)
   441b0:	10802b17 	ldw	r2,172(r2)
   441b4:	1000031e 	bne	r2,zero,441c4 <ip_setmoptions+0x224>
      {
         error = EADDRNOTAVAIL;
   441b8:	00801f44 	movi	r2,125
   441bc:	e0bff515 	stw	r2,-44(fp)
         break;
   441c0:	0000c906 	br	444e8 <ip_setmoptions+0x548>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
   441c4:	e03ff60d 	sth	zero,-40(fp)
   441c8:	00001906 	br	44230 <ip_setmoptions+0x290>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
   441cc:	e0bff60b 	ldhu	r2,-40(fp)
   441d0:	e0fff717 	ldw	r3,-36(fp)
   441d4:	10800084 	addi	r2,r2,2
   441d8:	1085883a 	add	r2,r2,r2
   441dc:	1085883a 	add	r2,r2,r2
   441e0:	1885883a 	add	r2,r3,r2
   441e4:	10800017 	ldw	r2,0(r2)
   441e8:	10c00117 	ldw	r3,4(r2)
   441ec:	e0bffb17 	ldw	r2,-20(fp)
   441f0:	18800c1e 	bne	r3,r2,44224 <ip_setmoptions+0x284>
             imo->imo_membership[i]->inm_addr
   441f4:	e0bff60b 	ldhu	r2,-40(fp)
   441f8:	e0fff717 	ldw	r3,-36(fp)
   441fc:	10800084 	addi	r2,r2,2
   44200:	1085883a 	add	r2,r2,r2
   44204:	1085883a 	add	r2,r2,r2
   44208:	1885883a 	add	r2,r3,r2
   4420c:	10800017 	ldw	r2,0(r2)
   44210:	10c00017 	ldw	r3,0(r2)
             == mreq->imr_multiaddr)
   44214:	e0bffa17 	ldw	r2,-24(fp)
   44218:	10800017 	ldw	r2,0(r2)
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
   4421c:	1880011e 	bne	r3,r2,44224 <ip_setmoptions+0x284>
             imo->imo_membership[i]->inm_addr
             == mreq->imr_multiaddr)
         {
            break;
   44220:	00000806 	br	44244 <ip_setmoptions+0x2a4>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
   44224:	e0bff60b 	ldhu	r2,-40(fp)
   44228:	10800044 	addi	r2,r2,1
   4422c:	e0bff60d 	sth	r2,-40(fp)
   44230:	e0bff717 	ldw	r2,-36(fp)
   44234:	1080018b 	ldhu	r2,6(r2)
   44238:	10bfffcc 	andi	r2,r2,65535
   4423c:	e0fff60b 	ldhu	r3,-40(fp)
   44240:	18bfe236 	bltu	r3,r2,441cc <__alt_mem_descriptor_memory+0xdf0041cc>
             == mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i < imo->imo_num_memberships) 
   44244:	e0bff717 	ldw	r2,-36(fp)
   44248:	1080018b 	ldhu	r2,6(r2)
   4424c:	10bfffcc 	andi	r2,r2,65535
   44250:	e0fff60b 	ldhu	r3,-40(fp)
   44254:	1880032e 	bgeu	r3,r2,44264 <ip_setmoptions+0x2c4>
      {
         error = EADDRINUSE;
   44258:	00801c04 	movi	r2,112
   4425c:	e0bff515 	stw	r2,-44(fp)
         break;
   44260:	0000a106 	br	444e8 <ip_setmoptions+0x548>
      }
      if (i == IP_MAX_MEMBERSHIPS) 
   44264:	e0bff60b 	ldhu	r2,-40(fp)
   44268:	10800518 	cmpnei	r2,r2,20
   4426c:	1000031e 	bne	r2,zero,4427c <ip_setmoptions+0x2dc>
      {
         error = ETOOMANYREFS;
   44270:	00802044 	movi	r2,129
   44274:	e0bff515 	stw	r2,-44(fp)
         break;
   44278:	00009b06 	br	444e8 <ip_setmoptions+0x548>
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
   4427c:	e43ff60b 	ldhu	r16,-40(fp)
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
   44280:	e0fffa17 	ldw	r3,-24(fp)
   44284:	e0bffb17 	ldw	r2,-20(fp)
   44288:	1809883a 	mov	r4,r3
   4428c:	100b883a 	mov	r5,r2
   44290:	01800104 	movi	r6,4
   44294:	00418080 	call	41808 <in_addmulti>
   44298:	1009883a 	mov	r4,r2
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
   4429c:	e0fff717 	ldw	r3,-36(fp)
   442a0:	80800084 	addi	r2,r16,2
   442a4:	1085883a 	add	r2,r2,r2
   442a8:	1085883a 	add	r2,r2,r2
   442ac:	1885883a 	add	r2,r3,r2
   442b0:	11000015 	stw	r4,0(r2)
   442b4:	e0fff717 	ldw	r3,-36(fp)
   442b8:	80800084 	addi	r2,r16,2
   442bc:	1085883a 	add	r2,r2,r2
   442c0:	1085883a 	add	r2,r2,r2
   442c4:	1885883a 	add	r2,r3,r2
   442c8:	10800017 	ldw	r2,0(r2)
   442cc:	1000031e 	bne	r2,zero,442dc <ip_setmoptions+0x33c>
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
      {
         error = ENOBUFS;
   442d0:	00801a44 	movi	r2,105
   442d4:	e0bff515 	stw	r2,-44(fp)
         break;
   442d8:	00008306 	br	444e8 <ip_setmoptions+0x548>
      }
      ++imo->imo_num_memberships;
   442dc:	e0bff717 	ldw	r2,-36(fp)
   442e0:	1080018b 	ldhu	r2,6(r2)
   442e4:	10800044 	addi	r2,r2,1
   442e8:	1007883a 	mov	r3,r2
   442ec:	e0bff717 	ldw	r2,-36(fp)
   442f0:	10c0018d 	sth	r3,6(r2)
      break;
   442f4:	00007c06 	br	444e8 <ip_setmoptions+0x548>
   case IP_DROP_MEMBERSHIP:
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
   442f8:	e0bffe17 	ldw	r2,-8(fp)
   442fc:	e0bffa15 	stw	r2,-24(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
   44300:	e0bffa17 	ldw	r2,-24(fp)
   44304:	10800017 	ldw	r2,0(r2)
   44308:	1006d63a 	srli	r3,r2,24
   4430c:	e0bffa17 	ldw	r2,-24(fp)
   44310:	10800017 	ldw	r2,0(r2)
   44314:	1004d23a 	srli	r2,r2,8
   44318:	10bfc00c 	andi	r2,r2,65280
   4431c:	1886b03a 	or	r3,r3,r2
   44320:	e0bffa17 	ldw	r2,-24(fp)
   44324:	10800017 	ldw	r2,0(r2)
   44328:	10bfc00c 	andi	r2,r2,65280
   4432c:	1004923a 	slli	r2,r2,8
   44330:	1886b03a 	or	r3,r3,r2
   44334:	e0bffa17 	ldw	r2,-24(fp)
   44338:	10800017 	ldw	r2,0(r2)
   4433c:	1004963a 	slli	r2,r2,24
   44340:	1884b03a 	or	r2,r3,r2
   44344:	10fc002c 	andhi	r3,r2,61440
   44348:	00b80034 	movhi	r2,57344
   4434c:	18800326 	beq	r3,r2,4435c <ip_setmoptions+0x3bc>
      {
         error = EINVAL;
   44350:	00800584 	movi	r2,22
   44354:	e0bff515 	stw	r2,-44(fp)
         break;
   44358:	00006306 	br	444e8 <ip_setmoptions+0x548>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
   4435c:	e0bffa17 	ldw	r2,-24(fp)
   44360:	10c00117 	ldw	r3,4(r2)
   44364:	e0bffb04 	addi	r2,fp,-20
   44368:	1809883a 	mov	r4,r3
   4436c:	100b883a 	mov	r5,r2
   44370:	0043e5c0 	call	43e5c <IPADDR_TO_NETP>
      if (netp == NULL) 
   44374:	e0bffb17 	ldw	r2,-20(fp)
   44378:	1000031e 	bne	r2,zero,44388 <ip_setmoptions+0x3e8>
      {
         error = EADDRNOTAVAIL;
   4437c:	00801f44 	movi	r2,125
   44380:	e0bff515 	stw	r2,-44(fp)
         break;
   44384:	00005806 	br	444e8 <ip_setmoptions+0x548>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
   44388:	e03ff60d 	sth	zero,-40(fp)
   4438c:	00001b06 	br	443fc <ip_setmoptions+0x45c>
      {
         if ((netp == NULL ||
   44390:	e0bffb17 	ldw	r2,-20(fp)
   44394:	10000a26 	beq	r2,zero,443c0 <ip_setmoptions+0x420>
             imo->imo_membership[i]->inm_netp == netp) &&
   44398:	e0bff60b 	ldhu	r2,-40(fp)
   4439c:	e0fff717 	ldw	r3,-36(fp)
   443a0:	10800084 	addi	r2,r2,2
   443a4:	1085883a 	add	r2,r2,r2
   443a8:	1085883a 	add	r2,r2,r2
   443ac:	1885883a 	add	r2,r3,r2
   443b0:	10800017 	ldw	r2,0(r2)
   443b4:	10c00117 	ldw	r3,4(r2)
   443b8:	e0bffb17 	ldw	r2,-20(fp)
      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
      {
         if ((netp == NULL ||
   443bc:	18800c1e 	bne	r3,r2,443f0 <ip_setmoptions+0x450>
             imo->imo_membership[i]->inm_netp == netp) &&
             imo->imo_membership[i]->inm_addr ==
   443c0:	e0bff60b 	ldhu	r2,-40(fp)
   443c4:	e0fff717 	ldw	r3,-36(fp)
   443c8:	10800084 	addi	r2,r2,2
   443cc:	1085883a 	add	r2,r2,r2
   443d0:	1085883a 	add	r2,r2,r2
   443d4:	1885883a 	add	r2,r3,r2
   443d8:	10800017 	ldw	r2,0(r2)
   443dc:	10c00017 	ldw	r3,0(r2)
             mreq->imr_multiaddr)
   443e0:	e0bffa17 	ldw	r2,-24(fp)
   443e4:	10800017 	ldw	r2,0(r2)
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
      {
         if ((netp == NULL ||
             imo->imo_membership[i]->inm_netp == netp) &&
   443e8:	1880011e 	bne	r3,r2,443f0 <ip_setmoptions+0x450>
             imo->imo_membership[i]->inm_addr ==
             mreq->imr_multiaddr)
         {
            break;
   443ec:	00000806 	br	44410 <ip_setmoptions+0x470>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
   443f0:	e0bff60b 	ldhu	r2,-40(fp)
   443f4:	10800044 	addi	r2,r2,1
   443f8:	e0bff60d 	sth	r2,-40(fp)
   443fc:	e0bff717 	ldw	r2,-36(fp)
   44400:	1080018b 	ldhu	r2,6(r2)
   44404:	10bfffcc 	andi	r2,r2,65535
   44408:	e0fff60b 	ldhu	r3,-40(fp)
   4440c:	18bfe036 	bltu	r3,r2,44390 <__alt_mem_descriptor_memory+0xdf004390>
             mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i == imo->imo_num_memberships) 
   44410:	e0bff717 	ldw	r2,-36(fp)
   44414:	1080018b 	ldhu	r2,6(r2)
   44418:	10ffffcc 	andi	r3,r2,65535
   4441c:	e0bff60b 	ldhu	r2,-40(fp)
   44420:	1880031e 	bne	r3,r2,44430 <ip_setmoptions+0x490>
      {
         error = EADDRNOTAVAIL;
   44424:	00801f44 	movi	r2,125
   44428:	e0bff515 	stw	r2,-44(fp)
         break;
   4442c:	00002e06 	br	444e8 <ip_setmoptions+0x548>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
   44430:	e0bff60b 	ldhu	r2,-40(fp)
   44434:	e0fff717 	ldw	r3,-36(fp)
   44438:	10800084 	addi	r2,r2,2
   4443c:	1085883a 	add	r2,r2,r2
   44440:	1085883a 	add	r2,r2,r2
   44444:	1885883a 	add	r2,r3,r2
   44448:	10800017 	ldw	r2,0(r2)
   4444c:	1009883a 	mov	r4,r2
   44450:	00419540 	call	41954 <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
   44454:	e0bff60b 	ldhu	r2,-40(fp)
   44458:	10800044 	addi	r2,r2,1
   4445c:	e0bff60d 	sth	r2,-40(fp)
   44460:	00001206 	br	444ac <ip_setmoptions+0x50c>
         imo->imo_membership[i-1] = imo->imo_membership[i];
   44464:	e0bff60b 	ldhu	r2,-40(fp)
   44468:	117fffc4 	addi	r5,r2,-1
   4446c:	e0bff60b 	ldhu	r2,-40(fp)
   44470:	e0fff717 	ldw	r3,-36(fp)
   44474:	10800084 	addi	r2,r2,2
   44478:	1085883a 	add	r2,r2,r2
   4447c:	1085883a 	add	r2,r2,r2
   44480:	1885883a 	add	r2,r3,r2
   44484:	10c00017 	ldw	r3,0(r2)
   44488:	e13ff717 	ldw	r4,-36(fp)
   4448c:	28800084 	addi	r2,r5,2
   44490:	1085883a 	add	r2,r2,r2
   44494:	1085883a 	add	r2,r2,r2
   44498:	2085883a 	add	r2,r4,r2
   4449c:	10c00015 	stw	r3,0(r2)
       */
      in_delmulti(imo->imo_membership[i]);
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
   444a0:	e0bff60b 	ldhu	r2,-40(fp)
   444a4:	10800044 	addi	r2,r2,1
   444a8:	e0bff60d 	sth	r2,-40(fp)
   444ac:	e0bff717 	ldw	r2,-36(fp)
   444b0:	1080018b 	ldhu	r2,6(r2)
   444b4:	10bfffcc 	andi	r2,r2,65535
   444b8:	e0fff60b 	ldhu	r3,-40(fp)
   444bc:	18bfe936 	bltu	r3,r2,44464 <__alt_mem_descriptor_memory+0xdf004464>
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
   444c0:	e0bff717 	ldw	r2,-36(fp)
   444c4:	1080018b 	ldhu	r2,6(r2)
   444c8:	10bfffc4 	addi	r2,r2,-1
   444cc:	1007883a 	mov	r3,r2
   444d0:	e0bff717 	ldw	r2,-36(fp)
   444d4:	10c0018d 	sth	r3,6(r2)
      break;
   444d8:	00000306 	br	444e8 <ip_setmoptions+0x548>

      default:
      error = EOPNOTSUPP;
   444dc:	008017c4 	movi	r2,95
   444e0:	e0bff515 	stw	r2,-44(fp)
      break;
   444e4:	0001883a 	nop
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
   444e8:	e0bff717 	ldw	r2,-36(fp)
   444ec:	10800017 	ldw	r2,0(r2)
   444f0:	1000141e 	bne	r2,zero,44544 <ip_setmoptions+0x5a4>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
   444f4:	e0bff717 	ldw	r2,-36(fp)
   444f8:	10800103 	ldbu	r2,4(r2)
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
   444fc:	10803fcc 	andi	r2,r2,255
   44500:	10800058 	cmpnei	r2,r2,1
   44504:	10000f1e 	bne	r2,zero,44544 <ip_setmoptions+0x5a4>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
   44508:	e0bff717 	ldw	r2,-36(fp)
   4450c:	10800143 	ldbu	r2,5(r2)

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
   44510:	10803fcc 	andi	r2,r2,255
   44514:	10800058 	cmpnei	r2,r2,1
   44518:	10000a1e 	bne	r2,zero,44544 <ip_setmoptions+0x5a4>
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
       imo->imo_num_memberships == 0) 
   4451c:	e0bff717 	ldw	r2,-36(fp)
   44520:	1080018b 	ldhu	r2,6(r2)
      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
   44524:	10bfffcc 	andi	r2,r2,65535
   44528:	1000061e 	bne	r2,zero,44544 <ip_setmoptions+0x5a4>
       imo->imo_num_memberships == 0) 
   {
      IM_FREE(*imop);
   4452c:	e0bff817 	ldw	r2,-32(fp)
   44530:	10800017 	ldw	r2,0(r2)
   44534:	1009883a 	mov	r4,r2
   44538:	002bd140 	call	2bd14 <npfree>
      *imop = NULL;
   4453c:	e0bff817 	ldw	r2,-32(fp)
   44540:	10000015 	stw	zero,0(r2)
   }
   return (error);
   44544:	e0bff517 	ldw	r2,-44(fp)
}
   44548:	e6ffff04 	addi	sp,fp,-4
   4454c:	dfc00217 	ldw	ra,8(sp)
   44550:	df000117 	ldw	fp,4(sp)
   44554:	dc000017 	ldw	r16,0(sp)
   44558:	dec00304 	addi	sp,sp,12
   4455c:	f800283a 	ret

00044560 <ip_getmoptions>:
 * RETURNS: 
 */

int
ip_getmoptions(int optname, struct socket * so, void * val)
{
   44560:	defff804 	addi	sp,sp,-32
   44564:	df000715 	stw	fp,28(sp)
   44568:	df000704 	addi	fp,sp,28
   4456c:	e13ffd15 	stw	r4,-12(fp)
   44570:	e17ffe15 	stw	r5,-8(fp)
   44574:	e1bfff15 	stw	r6,-4(fp)
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
   44578:	e0bffe17 	ldw	r2,-8(fp)
   4457c:	10800317 	ldw	r2,12(r2)
   44580:	e0bff915 	stw	r2,-28(fp)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
   44584:	e0bffd17 	ldw	r2,-12(fp)
   44588:	10c002a0 	cmpeqi	r3,r2,10
   4458c:	1800151e 	bne	r3,zero,445e4 <ip_getmoptions+0x84>
   44590:	10c002e0 	cmpeqi	r3,r2,11
   44594:	1800211e 	bne	r3,zero,4461c <ip_getmoptions+0xbc>
   44598:	10800260 	cmpeqi	r2,r2,9
   4459c:	10002d26 	beq	r2,zero,44654 <ip_getmoptions+0xf4>
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
   445a0:	e0bfff17 	ldw	r2,-4(fp)
   445a4:	e0bffa15 	stw	r2,-24(fp)
      if (imo == NULL || imo->imo_multicast_netp == NULL)
   445a8:	e0bff917 	ldw	r2,-28(fp)
   445ac:	10000326 	beq	r2,zero,445bc <ip_getmoptions+0x5c>
   445b0:	e0bff917 	ldw	r2,-28(fp)
   445b4:	10800017 	ldw	r2,0(r2)
   445b8:	1000031e 	bne	r2,zero,445c8 <ip_getmoptions+0x68>
         *addr = AADDR;
   445bc:	e0bffa17 	ldw	r2,-24(fp)
   445c0:	10000015 	stw	zero,0(r2)
   445c4:	00000506 	br	445dc <ip_getmoptions+0x7c>
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
   445c8:	e0bff917 	ldw	r2,-28(fp)
   445cc:	10800017 	ldw	r2,0(r2)
   445d0:	10c00a17 	ldw	r3,40(r2)
   445d4:	e0bffa17 	ldw	r2,-24(fp)
   445d8:	10c00015 	stw	r3,0(r2)
      return (0);
   445dc:	0005883a 	mov	r2,zero
   445e0:	00001d06 	br	44658 <ip_getmoptions+0xf8>

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
   445e4:	e0bfff17 	ldw	r2,-4(fp)
   445e8:	e0bffb15 	stw	r2,-20(fp)
      if (imo == NULL)
   445ec:	e0bff917 	ldw	r2,-28(fp)
   445f0:	1000041e 	bne	r2,zero,44604 <ip_getmoptions+0xa4>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
   445f4:	e0bffb17 	ldw	r2,-20(fp)
   445f8:	00c00044 	movi	r3,1
   445fc:	10c00005 	stb	r3,0(r2)
   44600:	00000406 	br	44614 <ip_getmoptions+0xb4>
      else
         *ttl = imo->imo_multicast_ttl;
   44604:	e0bff917 	ldw	r2,-28(fp)
   44608:	10c00103 	ldbu	r3,4(r2)
   4460c:	e0bffb17 	ldw	r2,-20(fp)
   44610:	10c00005 	stb	r3,0(r2)
      return (0);
   44614:	0005883a 	mov	r2,zero
   44618:	00000f06 	br	44658 <ip_getmoptions+0xf8>

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
   4461c:	e0bfff17 	ldw	r2,-4(fp)
   44620:	e0bffc15 	stw	r2,-16(fp)
      if (imo == NULL)
   44624:	e0bff917 	ldw	r2,-28(fp)
   44628:	1000041e 	bne	r2,zero,4463c <ip_getmoptions+0xdc>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
   4462c:	e0bffc17 	ldw	r2,-16(fp)
   44630:	00c00044 	movi	r3,1
   44634:	10c00005 	stb	r3,0(r2)
   44638:	00000406 	br	4464c <ip_getmoptions+0xec>
      else
         *loop = imo->imo_multicast_loop;
   4463c:	e0bff917 	ldw	r2,-28(fp)
   44640:	10c00143 	ldbu	r3,5(r2)
   44644:	e0bffc17 	ldw	r2,-16(fp)
   44648:	10c00005 	stb	r3,0(r2)
      return (0);
   4464c:	0005883a 	mov	r2,zero
   44650:	00000106 	br	44658 <ip_getmoptions+0xf8>

      default:
      return (EOPNOTSUPP);
   44654:	008017c4 	movi	r2,95
   }
}
   44658:	e037883a 	mov	sp,fp
   4465c:	df000017 	ldw	fp,0(sp)
   44660:	dec00104 	addi	sp,sp,4
   44664:	f800283a 	ret

00044668 <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
   44668:	defffc04 	addi	sp,sp,-16
   4466c:	dfc00315 	stw	ra,12(sp)
   44670:	df000215 	stw	fp,8(sp)
   44674:	df000204 	addi	fp,sp,8
   44678:	e13fff15 	stw	r4,-4(fp)
   u_short  i;

   if (imo != NULL) 
   4467c:	e0bfff17 	ldw	r2,-4(fp)
   44680:	10001526 	beq	r2,zero,446d8 <ip_freemoptions+0x70>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
   44684:	e03ffe0d 	sth	zero,-8(fp)
   44688:	00000c06 	br	446bc <ip_freemoptions+0x54>
         in_delmulti(imo->imo_membership[i]);
   4468c:	e0bffe0b 	ldhu	r2,-8(fp)
   44690:	e0ffff17 	ldw	r3,-4(fp)
   44694:	10800084 	addi	r2,r2,2
   44698:	1085883a 	add	r2,r2,r2
   4469c:	1085883a 	add	r2,r2,r2
   446a0:	1885883a 	add	r2,r3,r2
   446a4:	10800017 	ldw	r2,0(r2)
   446a8:	1009883a 	mov	r4,r2
   446ac:	00419540 	call	41954 <in_delmulti>
{
   u_short  i;

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
   446b0:	e0bffe0b 	ldhu	r2,-8(fp)
   446b4:	10800044 	addi	r2,r2,1
   446b8:	e0bffe0d 	sth	r2,-8(fp)
   446bc:	e0bfff17 	ldw	r2,-4(fp)
   446c0:	1080018b 	ldhu	r2,6(r2)
   446c4:	10bfffcc 	andi	r2,r2,65535
   446c8:	e0fffe0b 	ldhu	r3,-8(fp)
   446cc:	18bfef36 	bltu	r3,r2,4468c <__alt_mem_descriptor_memory+0xdf00468c>
         in_delmulti(imo->imo_membership[i]);
      npfree(imo);
   446d0:	e13fff17 	ldw	r4,-4(fp)
   446d4:	002bd140 	call	2bd14 <npfree>
   }
}
   446d8:	e037883a 	mov	sp,fp
   446dc:	dfc00117 	ldw	ra,4(sp)
   446e0:	df000017 	ldw	fp,0(sp)
   446e4:	dec00204 	addi	sp,sp,8
   446e8:	f800283a 	ret

000446ec <u_mctest_init>:
 *
 * RETURNS: 
 */

void u_mctest_init()
{
   446ec:	defffe04 	addi	sp,sp,-8
   446f0:	dfc00115 	stw	ra,4(sp)
   446f4:	df000015 	stw	fp,0(sp)
   446f8:	d839883a 	mov	fp,sp
   printf("mctest init called\n");
   446fc:	01000174 	movhi	r4,5
   44700:	213dac04 	addi	r4,r4,-2384
   44704:	00083740 	call	8374 <puts>
// altera changes end (cadler@altera.com)
   install_menu(u_mctest_menu);
// altera changes begin (cadler@altera.com)
#endif //IN_MENUS
// altera changes end (cadler@altera.com)
}
   44708:	e037883a 	mov	sp,fp
   4470c:	dfc00117 	ldw	ra,4(sp)
   44710:	df000017 	ldw	fp,0(sp)
   44714:	dec00204 	addi	sp,sp,8
   44718:	f800283a 	ret

0004471c <u_mctest_run>:
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
   4471c:	defede04 	addi	sp,sp,-1160
   44720:	dfc12115 	stw	ra,1156(sp)
   44724:	df012015 	stw	fp,1152(sp)
   44728:	df012004 	addi	fp,sp,1152
   4472c:	e13fff15 	stw	r4,-4(fp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
   44730:	009cdcf4 	movhi	r2,29555
   44734:	10995344 	addi	r2,r2,25933
   44738:	e0bff215 	stw	r2,-56(fp)
   4473c:	00881974 	movhi	r2,8293
   44740:	1099d844 	addi	r2,r2,26465
   44744:	e0bff315 	stw	r2,-52(fp)
   44748:	00989b74 	movhi	r2,25197
   4474c:	109d5b84 	addi	r2,r2,30062
   44750:	e0bff415 	stw	r2,-48(fp)
   44754:	00880eb4 	movhi	r2,8250
   44758:	109c9944 	addi	r2,r2,29285
   4475c:	e0bff515 	stw	r2,-44(fp)
   44760:	00880834 	movhi	r2,8224
   44764:	10880804 	addi	r2,r2,8224
   44768:	e0bff615 	stw	r2,-40(fp)
   4476c:	00880834 	movhi	r2,8224
   44770:	10880804 	addi	r2,r2,8224
   44774:	e0bff715 	stw	r2,-36(fp)
   44778:	00880834 	movhi	r2,8224
   4477c:	10880804 	addi	r2,r2,8224
   44780:	e0bff815 	stw	r2,-32(fp)
   44784:	00800804 	movi	r2,32
   44788:	e0bff90d 	sth	r2,-28(fp)
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
   4478c:	01000084 	movi	r4,2
   44790:	01400084 	movi	r5,2
   44794:	000d883a 	mov	r6,zero
   44798:	002dfa40 	call	2dfa4 <t_socket>
   4479c:	e0bee315 	stw	r2,-1140(fp)

   if (s == INVALID_SOCKET) 
   447a0:	e0bee317 	ldw	r2,-1140(fp)
   447a4:	10bfffd8 	cmpnei	r2,r2,-1
   447a8:	1000091e 	bne	r2,zero,447d0 <u_mctest_run+0xb4>
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
   447ac:	e13ee317 	ldw	r4,-1140(fp)
   447b0:	002f4d80 	call	2f4d8 <t_errno>
   447b4:	e13fff17 	ldw	r4,-4(fp)
   447b8:	01400174 	movhi	r5,5
   447bc:	297db104 	addi	r5,r5,-2364
   447c0:	100d883a 	mov	r6,r2
   447c4:	002694c0 	call	2694c <ns_printf>
      exit(1);
   447c8:	01000044 	movi	r4,1
   447cc:	00496940 	call	49694 <exit>
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
   447d0:	00800044 	movi	r2,1
   447d4:	e0bffa15 	stw	r2,-24(fp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
   447d8:	e0fffa04 	addi	r3,fp,-24
   447dc:	00800104 	movi	r2,4
   447e0:	d8800015 	stw	r2,0(sp)
   447e4:	e13ee317 	ldw	r4,-1140(fp)
   447e8:	017fffc4 	movi	r5,-1
   447ec:	01800104 	movi	r6,4
   447f0:	180f883a 	mov	r7,r3
   447f4:	002e96c0 	call	2e96c <t_setsockopt>
   447f8:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   447fc:	e0bee417 	ldw	r2,-1136(fp)
   44800:	10bfffd8 	cmpnei	r2,r2,-1
   44804:	1000071e 	bne	r2,zero,44824 <u_mctest_run+0x108>
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
   44808:	e13ee317 	ldw	r4,-1140(fp)
   4480c:	002f4d80 	call	2f4d8 <t_errno>
   44810:	e13fff17 	ldw	r4,-4(fp)
   44814:	01400174 	movhi	r5,5
   44818:	297db804 	addi	r5,r5,-2336
   4481c:	100d883a 	mov	r6,r2
   44820:	002694c0 	call	2694c <ns_printf>
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
   44824:	00800084 	movi	r2,2
   44828:	e0bee60d 	sth	r2,-1128(fp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
   4482c:	e03ee715 	stw	zero,-1124(fp)
   stLocal.sin_port =   htons(TEST_PORT);
   44830:	00a00344 	movi	r2,-32755
   44834:	e0bee68d 	sth	r2,-1126(fp)
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
   44838:	e0bee604 	addi	r2,fp,-1128
   4483c:	e13ee317 	ldw	r4,-1140(fp)
   44840:	100b883a 	mov	r5,r2
   44844:	01800404 	movi	r6,16
   44848:	002e0240 	call	2e024 <t_bind>
   4484c:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   44850:	e0bee417 	ldw	r2,-1136(fp)
   44854:	10bfffd8 	cmpnei	r2,r2,-1
   44858:	1000061e 	bne	r2,zero,44874 <u_mctest_run+0x158>
   {
      printf ("t_bind() failed, Err: %d\n",
   4485c:	e13ee317 	ldw	r4,-1140(fp)
   44860:	002f4d80 	call	2f4d8 <t_errno>
   44864:	01000174 	movhi	r4,5
   44868:	213dc404 	addi	r4,r4,-2288
   4486c:	100b883a 	mov	r5,r2
   44870:	00080f80 	call	80f8 <printf>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
   44874:	e13fff17 	ldw	r4,-4(fp)
   44878:	01400174 	movhi	r5,5
   4487c:	297dcb04 	addi	r5,r5,-2260
   44880:	01800174 	movhi	r6,5
   44884:	31bdd304 	addi	r6,r6,-2228
   44888:	002694c0 	call	2694c <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
   4488c:	01000174 	movhi	r4,5
   44890:	213dd304 	addi	r4,r4,-2228
   44894:	00458200 	call	45820 <inet_addr>
   44898:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   4489c:	008001b4 	movhi	r2,6
   448a0:	10b6db04 	addi	r2,r2,-9364
   448a4:	10800a17 	ldw	r2,40(r2)
   448a8:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
   448ac:	e0fffb04 	addi	r3,fp,-20
   448b0:	00800204 	movi	r2,8
   448b4:	d8800015 	stw	r2,0(sp)
   448b8:	e13ee317 	ldw	r4,-1140(fp)
   448bc:	000b883a 	mov	r5,zero
   448c0:	01800304 	movi	r6,12
   448c4:	180f883a 	mov	r7,r3
   448c8:	002e96c0 	call	2e96c <t_setsockopt>
   448cc:	e0bee415 	stw	r2,-1136(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   448d0:	e0bee417 	ldw	r2,-1136(fp)
   448d4:	10bfffd8 	cmpnei	r2,r2,-1
   448d8:	1000071e 	bne	r2,zero,448f8 <u_mctest_run+0x1dc>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
   448dc:	e13ee317 	ldw	r4,-1140(fp)
   448e0:	002f4d80 	call	2f4d8 <t_errno>
   448e4:	e13fff17 	ldw	r4,-4(fp)
   448e8:	01400174 	movhi	r5,5
   448ec:	297dd604 	addi	r5,r5,-2216
   448f0:	100d883a 	mov	r6,r2
   448f4:	002694c0 	call	2694c <ns_printf>
                     t_errno(s));
   } 
   tk_yield();
   448f8:	00273380 	call	27338 <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
   448fc:	e13fff17 	ldw	r4,-4(fp)
   44900:	01400174 	movhi	r5,5
   44904:	297dcb04 	addi	r5,r5,-2260
   44908:	01800174 	movhi	r6,5
   4490c:	31bde304 	addi	r6,r6,-2164
   44910:	002694c0 	call	2694c <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
   44914:	01000174 	movhi	r4,5
   44918:	213de304 	addi	r4,r4,-2164
   4491c:	00458200 	call	45820 <inet_addr>
   44920:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   44924:	008001b4 	movhi	r2,6
   44928:	10b6db04 	addi	r2,r2,-9364
   4492c:	10800a17 	ldw	r2,40(r2)
   44930:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
   44934:	e0fffb04 	addi	r3,fp,-20
   44938:	00800204 	movi	r2,8
   4493c:	d8800015 	stw	r2,0(sp)
   44940:	e13ee317 	ldw	r4,-1140(fp)
   44944:	000b883a 	mov	r5,zero
   44948:	01800304 	movi	r6,12
   4494c:	180f883a 	mov	r7,r3
   44950:	002e96c0 	call	2e96c <t_setsockopt>
   44954:	e0bee415 	stw	r2,-1136(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   44958:	e0bee417 	ldw	r2,-1136(fp)
   4495c:	10bfffd8 	cmpnei	r2,r2,-1
   44960:	1000071e 	bne	r2,zero,44980 <u_mctest_run+0x264>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
   44964:	e13ee317 	ldw	r4,-1140(fp)
   44968:	002f4d80 	call	2f4d8 <t_errno>
   4496c:	e13fff17 	ldw	r4,-4(fp)
   44970:	01400174 	movhi	r5,5
   44974:	297dd604 	addi	r5,r5,-2216
   44978:	100d883a 	mov	r6,r2
   4497c:	002694c0 	call	2694c <ns_printf>
                     t_errno(s));
   }
   tk_yield();
   44980:	00273380 	call	27338 <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
   44984:	e13fff17 	ldw	r4,-4(fp)
   44988:	01400174 	movhi	r5,5
   4498c:	297dcb04 	addi	r5,r5,-2260
   44990:	01800174 	movhi	r6,5
   44994:	31bde604 	addi	r6,r6,-2152
   44998:	002694c0 	call	2694c <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
   4499c:	01000174 	movhi	r4,5
   449a0:	213de604 	addi	r4,r4,-2152
   449a4:	00458200 	call	45820 <inet_addr>
   449a8:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   449ac:	008001b4 	movhi	r2,6
   449b0:	10b6db04 	addi	r2,r2,-9364
   449b4:	10800a17 	ldw	r2,40(r2)
   449b8:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
   449bc:	e0fffb04 	addi	r3,fp,-20
   449c0:	00800204 	movi	r2,8
   449c4:	d8800015 	stw	r2,0(sp)
   449c8:	e13ee317 	ldw	r4,-1140(fp)
   449cc:	000b883a 	mov	r5,zero
   449d0:	01800304 	movi	r6,12
   449d4:	180f883a 	mov	r7,r3
   449d8:	002e96c0 	call	2e96c <t_setsockopt>
   449dc:	e0bee415 	stw	r2,-1136(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   449e0:	e0bee417 	ldw	r2,-1136(fp)
   449e4:	10bfffd8 	cmpnei	r2,r2,-1
   449e8:	1000071e 	bne	r2,zero,44a08 <u_mctest_run+0x2ec>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
   449ec:	e13ee317 	ldw	r4,-1140(fp)
   449f0:	002f4d80 	call	2f4d8 <t_errno>
   449f4:	e13fff17 	ldw	r4,-4(fp)
   449f8:	01400174 	movhi	r5,5
   449fc:	297dd604 	addi	r5,r5,-2216
   44a00:	100d883a 	mov	r6,r2
   44a04:	002694c0 	call	2694c <ns_printf>
                     t_errno(s));
   }
   tk_yield();
   44a08:	00273380 	call	27338 <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
   44a0c:	00800084 	movi	r2,2
   44a10:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
   44a14:	e0fffd04 	addi	r3,fp,-12
   44a18:	00800044 	movi	r2,1
   44a1c:	d8800015 	stw	r2,0(sp)
   44a20:	e13ee317 	ldw	r4,-1140(fp)
   44a24:	000b883a 	mov	r5,zero
   44a28:	01800284 	movi	r6,10
   44a2c:	180f883a 	mov	r7,r3
   44a30:	002e96c0 	call	2e96c <t_setsockopt>
   44a34:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   44a38:	e0bee417 	ldw	r2,-1136(fp)
   44a3c:	10bfffd8 	cmpnei	r2,r2,-1
   44a40:	1000071e 	bne	r2,zero,44a60 <u_mctest_run+0x344>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
   44a44:	e13ee317 	ldw	r4,-1140(fp)
   44a48:	002f4d80 	call	2f4d8 <t_errno>
   44a4c:	e13fff17 	ldw	r4,-4(fp)
   44a50:	01400174 	movhi	r5,5
   44a54:	297de904 	addi	r5,r5,-2140
   44a58:	100d883a 	mov	r6,r2
   44a5c:	002694c0 	call	2694c <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
   44a60:	00800044 	movi	r2,1
   44a64:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
   44a68:	e0fffd04 	addi	r3,fp,-12
   44a6c:	00800044 	movi	r2,1
   44a70:	d8800015 	stw	r2,0(sp)
   44a74:	e13ee317 	ldw	r4,-1140(fp)
   44a78:	000b883a 	mov	r5,zero
   44a7c:	018002c4 	movi	r6,11
   44a80:	180f883a 	mov	r7,r3
   44a84:	002e96c0 	call	2e96c <t_setsockopt>
   44a88:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   44a8c:	e0bee417 	ldw	r2,-1136(fp)
   44a90:	10bfffd8 	cmpnei	r2,r2,-1
   44a94:	1000071e 	bne	r2,zero,44ab4 <u_mctest_run+0x398>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
   44a98:	e13ee317 	ldw	r4,-1140(fp)
   44a9c:	002f4d80 	call	2f4d8 <t_errno>
   44aa0:	e13fff17 	ldw	r4,-4(fp)
   44aa4:	01400174 	movhi	r5,5
   44aa8:	297df604 	addi	r5,r5,-2088
   44aac:	100d883a 	mov	r6,r2
   44ab0:	002694c0 	call	2694c <ns_printf>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
   44ab4:	00800084 	movi	r2,2
   44ab8:	e0beea0d 	sth	r2,-1112(fp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   44abc:	01000174 	movhi	r4,5
   44ac0:	213de304 	addi	r4,r4,-2164
   44ac4:	00458200 	call	45820 <inet_addr>
   44ac8:	e0beeb15 	stw	r2,-1108(fp)
   stTo.sin_port =        htons(TEST_PORT);
   44acc:	00a00344 	movi	r2,-32755
   44ad0:	e0beea8d 	sth	r2,-1110(fp)
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
   44ad4:	e13fff17 	ldw	r4,-4(fp)
   44ad8:	01400174 	movhi	r5,5
   44adc:	297e0304 	addi	r5,r5,-2036
   44ae0:	01800174 	movhi	r6,5
   44ae4:	31bde304 	addi	r6,r6,-2164
   44ae8:	002694c0 	call	2694c <ns_printf>
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
   44aec:	e03ee215 	stw	zero,-1144(fp)
   44af0:	00008906 	br	44d18 <u_mctest_run+0x5fc>
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
   44af4:	d0a04f17 	ldw	r2,-32452(gp)
   44af8:	10c00044 	addi	r3,r2,1
   44afc:	d0e04f15 	stw	r3,-32452(gp)
   44b00:	e0fff204 	addi	r3,fp,-56
   44b04:	18c00404 	addi	r3,r3,16
   44b08:	1809883a 	mov	r4,r3
   44b0c:	01400174 	movhi	r5,5
   44b10:	297e1204 	addi	r5,r5,-1976
   44b14:	100d883a 	mov	r6,r2
   44b18:	00084bc0 	call	84bc <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
   44b1c:	e0fff204 	addi	r3,fp,-56
   44b20:	e0beea04 	addi	r2,fp,-1112
   44b24:	d8800015 	stw	r2,0(sp)
   44b28:	00800404 	movi	r2,16
   44b2c:	d8800115 	stw	r2,4(sp)
   44b30:	e13ee317 	ldw	r4,-1140(fp)
   44b34:	180b883a 	mov	r5,r3
   44b38:	01800784 	movi	r6,30
   44b3c:	000f883a 	mov	r7,zero
   44b40:	002eec80 	call	2eec8 <t_sendto>
   44b44:	e0bee415 	stw	r2,-1136(fp)
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
   44b48:	e0bee417 	ldw	r2,-1136(fp)
   44b4c:	1000080e 	bge	r2,zero,44b70 <u_mctest_run+0x454>
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
   44b50:	e13ee317 	ldw	r4,-1140(fp)
   44b54:	002f4d80 	call	2f4d8 <t_errno>
   44b58:	e13fff17 	ldw	r4,-4(fp)
   44b5c:	01400174 	movhi	r5,5
   44b60:	297e1304 	addi	r5,r5,-1972
   44b64:	100d883a 	mov	r6,r2
   44b68:	002694c0 	call	2694c <ns_printf>
         /*     exit(1); */
         goto exitloop;
   44b6c:	00006d06 	br	44d24 <u_mctest_run+0x608>
      }

      /* make the socket non-blocking */
      iTmp = 1;
   44b70:	00800044 	movi	r2,1
   44b74:	e0bffa15 	stw	r2,-24(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
   44b78:	e0fffa04 	addi	r3,fp,-24
   44b7c:	00800104 	movi	r2,4
   44b80:	d8800015 	stw	r2,0(sp)
   44b84:	e13ee317 	ldw	r4,-1140(fp)
   44b88:	017fffc4 	movi	r5,-1
   44b8c:	01840584 	movi	r6,4118
   44b90:	180f883a 	mov	r7,r3
   44b94:	002e96c0 	call	2e96c <t_setsockopt>
   44b98:	e0bee415 	stw	r2,-1136(fp)
      if (iRet == SOCKET_ERROR) 
   44b9c:	e0bee417 	ldw	r2,-1136(fp)
   44ba0:	10bfffd8 	cmpnei	r2,r2,-1
   44ba4:	1000071e 	bne	r2,zero,44bc4 <u_mctest_run+0x4a8>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
   44ba8:	e13ee317 	ldw	r4,-1140(fp)
   44bac:	002f4d80 	call	2f4d8 <t_errno>
   44bb0:	e13fff17 	ldw	r4,-4(fp)
   44bb4:	01400174 	movhi	r5,5
   44bb8:	297e1b04 	addi	r5,r5,-1940
   44bbc:	100d883a 	mov	r6,r2
   44bc0:	002694c0 	call	2694c <ns_printf>
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
   44bc4:	00800174 	movhi	r2,5
   44bc8:	108fbe04 	addi	r2,r2,16120
   44bcc:	10800017 	ldw	r2,0(r2)
   44bd0:	10807d04 	addi	r2,r2,500
   44bd4:	e0bee515 	stw	r2,-1132(fp)

      while (cticks < endtime)
   44bd8:	00003306 	br	44ca8 <u_mctest_run+0x58c>
      {
         int sa_size = sizeof(struct sockaddr_in);
   44bdc:	00800404 	movi	r2,16
   44be0:	e0bffe15 	stw	r2,-8(fp)
         tk_yield();
   44be4:	00273380 	call	27338 <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
   44be8:	e0fef204 	addi	r3,fp,-1080
   44bec:	e0beee04 	addi	r2,fp,-1096
   44bf0:	d8800015 	stw	r2,0(sp)
   44bf4:	e0bffe04 	addi	r2,fp,-8
   44bf8:	d8800115 	stw	r2,4(sp)
   44bfc:	e13ee317 	ldw	r4,-1140(fp)
   44c00:	180b883a 	mov	r5,r3
   44c04:	01810004 	movi	r6,1024
   44c08:	000f883a 	mov	r7,zero
   44c0c:	002ed900 	call	2ed90 <t_recvfrom>
   44c10:	e0bee415 	stw	r2,-1136(fp)
         if (iRet < 0) 
   44c14:	e0bee417 	ldw	r2,-1136(fp)
   44c18:	10000c0e 	bge	r2,zero,44c4c <u_mctest_run+0x530>
         {
            if (t_errno(s) != EWOULDBLOCK)
   44c1c:	e13ee317 	ldw	r4,-1140(fp)
   44c20:	002f4d80 	call	2f4d8 <t_errno>
   44c24:	108002e0 	cmpeqi	r2,r2,11
   44c28:	1000081e 	bne	r2,zero,44c4c <u_mctest_run+0x530>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
   44c2c:	e13ee317 	ldw	r4,-1140(fp)
   44c30:	002f4d80 	call	2f4d8 <t_errno>
   44c34:	e13fff17 	ldw	r4,-4(fp)
   44c38:	01400174 	movhi	r5,5
   44c3c:	297e2704 	addi	r5,r5,-1892
   44c40:	100d883a 	mov	r6,r2
   44c44:	002694c0 	call	2694c <ns_printf>
   44c48:	00003606 	br	44d24 <u_mctest_run+0x608>
               /*     exit(1); */
               goto exitloop;
            }
         }
         if (iRet > 0)
   44c4c:	e0bee417 	ldw	r2,-1136(fp)
   44c50:	0080150e 	bge	zero,r2,44ca8 <u_mctest_run+0x58c>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
   44c54:	e0beef17 	ldw	r2,-1092(fp)
   44c58:	1009883a 	mov	r4,r2
   44c5c:	00265840 	call	26584 <print_ipad>
   44c60:	100d883a 	mov	r6,r2
             print_ipad(stFrom.sin_addr.s_addr),
             ntohs(stFrom.sin_port), achIn);
   44c64:	e0beee8b 	ldhu	r2,-1094(fp)
   44c68:	10bfffcc 	andi	r2,r2,65535
   44c6c:	1004d23a 	srli	r2,r2,8
   44c70:	10bfffcc 	andi	r2,r2,65535
   44c74:	10c03fcc 	andi	r3,r2,255
   44c78:	e0beee8b 	ldhu	r2,-1094(fp)
   44c7c:	10bfffcc 	andi	r2,r2,65535
   44c80:	1004923a 	slli	r2,r2,8
   44c84:	10bfffcc 	andi	r2,r2,65535
               goto exitloop;
            }
         }
         if (iRet > 0)
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
   44c88:	1886b03a 	or	r3,r3,r2
   44c8c:	e0bef204 	addi	r2,fp,-1080
   44c90:	d8800015 	stw	r2,0(sp)
   44c94:	e13fff17 	ldw	r4,-4(fp)
   44c98:	01400174 	movhi	r5,5
   44c9c:	297e2f04 	addi	r5,r5,-1860
   44ca0:	180f883a 	mov	r7,r3
   44ca4:	002694c0 	call	2694c <ns_printf>
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);

      while (cticks < endtime)
   44ca8:	00800174 	movhi	r2,5
   44cac:	108fbe04 	addi	r2,r2,16120
   44cb0:	10c00017 	ldw	r3,0(r2)
   44cb4:	e0bee517 	ldw	r2,-1132(fp)
   44cb8:	18bfc836 	bltu	r3,r2,44bdc <__alt_mem_descriptor_memory+0xdf004bdc>
             ntohs(stFrom.sin_port), achIn);
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
   44cbc:	e03ffd05 	stb	zero,-12(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
   44cc0:	e0fffd04 	addi	r3,fp,-12
   44cc4:	00800044 	movi	r2,1
   44cc8:	d8800015 	stw	r2,0(sp)
   44ccc:	e13ee317 	ldw	r4,-1140(fp)
   44cd0:	017fffc4 	movi	r5,-1
   44cd4:	01840584 	movi	r6,4118
   44cd8:	180f883a 	mov	r7,r3
   44cdc:	002e96c0 	call	2e96c <t_setsockopt>
   44ce0:	e0bee415 	stw	r2,-1136(fp)
      if (iRet == SOCKET_ERROR) 
   44ce4:	e0bee417 	ldw	r2,-1136(fp)
   44ce8:	10bfffd8 	cmpnei	r2,r2,-1
   44cec:	1000071e 	bne	r2,zero,44d0c <u_mctest_run+0x5f0>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
   44cf0:	e13ee317 	ldw	r4,-1140(fp)
   44cf4:	002f4d80 	call	2f4d8 <t_errno>
   44cf8:	e13fff17 	ldw	r4,-4(fp)
   44cfc:	01400174 	movhi	r5,5
   44d00:	297e3604 	addi	r5,r5,-1832
   44d04:	100d883a 	mov	r6,r2
   44d08:	002694c0 	call	2694c <ns_printf>
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
   44d0c:	e0bee217 	ldw	r2,-1144(fp)
   44d10:	10800044 	addi	r2,r2,1
   44d14:	e0bee215 	stw	r2,-1144(fp)
   44d18:	e0bee217 	ldw	r2,-1144(fp)
   44d1c:	108000d0 	cmplti	r2,r2,3
   44d20:	103f741e 	bne	r2,zero,44af4 <__alt_mem_descriptor_memory+0xdf004af4>
      }
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
   44d24:	01000174 	movhi	r4,5
   44d28:	213dd304 	addi	r4,r4,-2228
   44d2c:	00458200 	call	45820 <inet_addr>
   44d30:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   44d34:	008001b4 	movhi	r2,6
   44d38:	10b6db04 	addi	r2,r2,-9364
   44d3c:	10800a17 	ldw	r2,40(r2)
   44d40:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
   44d44:	e0fffb04 	addi	r3,fp,-20
   44d48:	00800204 	movi	r2,8
   44d4c:	d8800015 	stw	r2,0(sp)
   44d50:	e13ee317 	ldw	r4,-1140(fp)
   44d54:	000b883a 	mov	r5,zero
   44d58:	01800344 	movi	r6,13
   44d5c:	180f883a 	mov	r7,r3
   44d60:	002e96c0 	call	2e96c <t_setsockopt>
   44d64:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   44d68:	e0bee417 	ldw	r2,-1136(fp)
   44d6c:	10bfffd8 	cmpnei	r2,r2,-1
   44d70:	1000071e 	bne	r2,zero,44d90 <u_mctest_run+0x674>
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
   44d74:	e13ee317 	ldw	r4,-1140(fp)
   44d78:	002f4d80 	call	2f4d8 <t_errno>
   44d7c:	e13fff17 	ldw	r4,-4(fp)
   44d80:	01400174 	movhi	r5,5
   44d84:	297e4204 	addi	r5,r5,-1784
   44d88:	100d883a 	mov	r6,r2
   44d8c:	002694c0 	call	2694c <ns_printf>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
   44d90:	e13ee317 	ldw	r4,-1140(fp)
   44d94:	002f38c0 	call	2f38c <t_socketclose>
   44d98:	e0bee415 	stw	r2,-1136(fp)
   if (iRet == SOCKET_ERROR) 
   44d9c:	e0bee417 	ldw	r2,-1136(fp)
   44da0:	10bfffd8 	cmpnei	r2,r2,-1
   44da4:	1000071e 	bne	r2,zero,44dc4 <u_mctest_run+0x6a8>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
   44da8:	e13ee317 	ldw	r4,-1140(fp)
   44dac:	002f4d80 	call	2f4d8 <t_errno>
   44db0:	e13fff17 	ldw	r4,-4(fp)
   44db4:	01400174 	movhi	r5,5
   44db8:	297e4f04 	addi	r5,r5,-1732
   44dbc:	100d883a 	mov	r6,r2
   44dc0:	002694c0 	call	2694c <ns_printf>
   }

   return(0);
   44dc4:	0005883a 	mov	r2,zero
}  /* end main() */  
   44dc8:	e037883a 	mov	sp,fp
   44dcc:	dfc00117 	ldw	ra,4(sp)
   44dd0:	df000017 	ldw	fp,0(sp)
   44dd4:	dec00204 	addi	sp,sp,8
   44dd8:	f800283a 	ret

00044ddc <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
   44ddc:	defff604 	addi	sp,sp,-40
   44de0:	dfc00915 	stw	ra,36(sp)
   44de4:	df000815 	stw	fp,32(sp)
   44de8:	df000804 	addi	fp,sp,32
   int      iface;
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */
   44dec:	e03ff915 	stw	zero,-28(fp)

   e = dhc_init();
   44df0:	00276080 	call	27608 <dhc_init>
   44df4:	e0bffa15 	stw	r2,-24(fp)

   if (e)
   44df8:	e0bffa17 	ldw	r2,-24(fp)
   44dfc:	10000526 	beq	r2,zero,44e14 <dhc_setup+0x38>
   {
      printf("Error starting DHCP client code.\n");
   44e00:	01000174 	movhi	r4,5
   44e04:	213e5804 	addi	r4,r4,-1696
   44e08:	00083740 	call	8374 <puts>
      netexit(1);
   44e0c:	01000044 	movi	r4,1
   44e10:	0041b480 	call	41b48 <netexit>
   }

   dhcp_started = cticks;  /* init timeout */
   44e14:	00800174 	movhi	r2,5
   44e18:	108fbe04 	addi	r2,r2,16120
   44e1c:	10800017 	ldw	r2,0(r2)
   44e20:	e0bffb15 	stw	r2,-20(fp)

   for (iface = 0; iface < STATIC_NETS; iface++)
   44e24:	e03ff815 	stw	zero,-32(fp)
   44e28:	00004e06 	br	44f64 <dhc_setup+0x188>
   {
      if (!nets[iface])
   44e2c:	008001b4 	movhi	r2,6
   44e30:	10b79b04 	addi	r2,r2,-8596
   44e34:	e0fff817 	ldw	r3,-32(fp)
   44e38:	18c7883a 	add	r3,r3,r3
   44e3c:	18c7883a 	add	r3,r3,r3
   44e40:	10c5883a 	add	r2,r2,r3
   44e44:	10800017 	ldw	r2,0(r2)
   44e48:	1000011e 	bne	r2,zero,44e50 <dhc_setup+0x74>
         continue; /* no valid iface for this network */
   44e4c:	00004206 	br	44f58 <dhc_setup+0x17c>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
   44e50:	008001b4 	movhi	r2,6
   44e54:	10b79b04 	addi	r2,r2,-8596
   44e58:	e0fff817 	ldw	r3,-32(fp)
   44e5c:	18c7883a 	add	r3,r3,r3
   44e60:	18c7883a 	add	r3,r3,r3
   44e64:	10c5883a 	add	r2,r2,r3
   44e68:	10800017 	ldw	r2,0(r2)
   44e6c:	10802a17 	ldw	r2,168(r2)
   44e70:	1080400c 	andi	r2,r2,256
   44e74:	1000011e 	bne	r2,zero,44e7c <dhc_setup+0xa0>
         continue;
   44e78:	00003706 	br	44f58 <dhc_setup+0x17c>

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
   44e7c:	008001b4 	movhi	r2,6
   44e80:	10b7c104 	addi	r2,r2,-8444
   44e84:	e0fff817 	ldw	r3,-32(fp)
   44e88:	18c00f24 	muli	r3,r3,60
   44e8c:	10c5883a 	add	r2,r2,r3
   44e90:	10800e04 	addi	r2,r2,56
   44e94:	10800017 	ldw	r2,0(r2)
   44e98:	1000041e 	bne	r2,zero,44eac <dhc_setup+0xd0>
      {
         dhc_set_callback(iface, dhc_main_ipset);
   44e9c:	e13ff817 	ldw	r4,-32(fp)
   44ea0:	01400134 	movhi	r5,4
   44ea4:	29541004 	addi	r5,r5,20544
   44ea8:	00276b80 	call	276b8 <dhc_set_callback>
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
   44eac:	008001b4 	movhi	r2,6
   44eb0:	10b79b04 	addi	r2,r2,-8596
   44eb4:	e0fff817 	ldw	r3,-32(fp)
   44eb8:	18c7883a 	add	r3,r3,r3
   44ebc:	18c7883a 	add	r3,r3,r3
   44ec0:	10c5883a 	add	r2,r2,r3
   44ec4:	10800017 	ldw	r2,0(r2)
   44ec8:	10c00a17 	ldw	r3,40(r2)
   44ecc:	e0bff817 	ldw	r2,-32(fp)
   44ed0:	1085883a 	add	r2,r2,r2
   44ed4:	1085883a 	add	r2,r2,r2
   44ed8:	e13ff804 	addi	r4,fp,-32
   44edc:	2085883a 	add	r2,r4,r2
   44ee0:	10800404 	addi	r2,r2,16
   44ee4:	10c00015 	stw	r3,0(r2)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
   44ee8:	e0bff817 	ldw	r2,-32(fp)
   44eec:	1085883a 	add	r2,r2,r2
   44ef0:	1085883a 	add	r2,r2,r2
   44ef4:	e0fff804 	addi	r3,fp,-32
   44ef8:	1885883a 	add	r2,r3,r2
   44efc:	10800404 	addi	r2,r2,16
   44f00:	10800017 	ldw	r2,0(r2)
   44f04:	1000041e 	bne	r2,zero,44f18 <dhc_setup+0x13c>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
   44f08:	e13ff817 	ldw	r4,-32(fp)
   44f0c:	01400044 	movi	r5,1
   44f10:	002a0000 	call	2a000 <dhc_state_init>
   44f14:	00000306 	br	44f24 <dhc_setup+0x148>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
   44f18:	e13ff817 	ldw	r4,-32(fp)
   44f1c:	000b883a 	mov	r5,zero
   44f20:	002a0000 	call	2a000 <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
   44f24:	00298580 	call	29858 <dhc_second>
   44f28:	e0bffa15 	stw	r2,-24(fp)
      if (e)
   44f2c:	e0bffa17 	ldw	r2,-24(fp)
   44f30:	10000626 	beq	r2,zero,44f4c <dhc_setup+0x170>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
   44f34:	01000174 	movhi	r4,5
   44f38:	213e6104 	addi	r4,r4,-1660
   44f3c:	e17ff817 	ldw	r5,-32(fp)
   44f40:	00080f80 	call	80f8 <printf>
         netexit(1);
   44f44:	01000044 	movi	r4,1
   44f48:	0041b480 	call	41b48 <netexit>
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
   44f4c:	e0bff917 	ldw	r2,-28(fp)
   44f50:	10800044 	addi	r2,r2,1
   44f54:	e0bff915 	stw	r2,-28(fp)
      netexit(1);
   }

   dhcp_started = cticks;  /* init timeout */

   for (iface = 0; iface < STATIC_NETS; iface++)
   44f58:	e0bff817 	ldw	r2,-32(fp)
   44f5c:	10800044 	addi	r2,r2,1
   44f60:	e0bff815 	stw	r2,-32(fp)
   44f64:	e0bff817 	ldw	r2,-32(fp)
   44f68:	10800110 	cmplti	r2,r2,4
   44f6c:	103faf1e 	bne	r2,zero,44e2c <__alt_mem_descriptor_memory+0xdf004e2c>
       */
      dhcnets++;
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
   44f70:	e0bff917 	ldw	r2,-28(fp)
   44f74:	10002d26 	beq	r2,zero,4502c <dhc_setup+0x250>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
   44f78:	00000206 	br	44f84 <dhc_setup+0x1a8>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
   44f7c:	00273380 	call	27338 <tk_yield>
      pktdemux();
   44f80:	0023e3c0 	call	23e3c <pktdemux>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
   44f84:	00800174 	movhi	r2,5
   44f88:	108fbe04 	addi	r2,r2,16120
   44f8c:	10c00017 	ldw	r3,0(r2)
   44f90:	e0bffb17 	ldw	r2,-20(fp)
   44f94:	1885c83a 	sub	r2,r3,r2
   44f98:	108cb228 	cmpgeui	r2,r2,13000
   44f9c:	1000021e 	bne	r2,zero,44fa8 <dhc_setup+0x1cc>
      (dhc_alldone() == FALSE))
   44fa0:	002a0540 	call	2a054 <dhc_alldone>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
   44fa4:	103ff526 	beq	r2,zero,44f7c <__alt_mem_descriptor_memory+0xdf004f7c>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   44fa8:	002a0540 	call	2a054 <dhc_alldone>
   44fac:	10001f1e 	bne	r2,zero,4502c <dhc_setup+0x250>
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
   44fb0:	01000174 	movhi	r4,5
   44fb4:	213e6b04 	addi	r4,r4,-1620
   44fb8:	00083740 	call	8374 <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
   44fbc:	e03ff815 	stw	zero,-32(fp)
   44fc0:	00001706 	br	45020 <dhc_setup+0x244>
      {
         if (dhc_ifacedone(iface) == FALSE)
   44fc4:	e13ff817 	ldw	r4,-32(fp)
   44fc8:	002a0dc0 	call	2a0dc <dhc_ifacedone>
   44fcc:	1000111e 	bne	r2,zero,45014 <dhc_setup+0x238>
         {
            dhc_halt(iface);
   44fd0:	e13ff817 	ldw	r4,-32(fp)
   44fd4:	0029dc80 	call	29dc8 <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
   44fd8:	008001b4 	movhi	r2,6
   44fdc:	10b79b04 	addi	r2,r2,-8596
   44fe0:	e0fff817 	ldw	r3,-32(fp)
   44fe4:	18c7883a 	add	r3,r3,r3
   44fe8:	18c7883a 	add	r3,r3,r3
   44fec:	10c5883a 	add	r2,r2,r3
   44ff0:	10c00017 	ldw	r3,0(r2)
   44ff4:	e0bff817 	ldw	r2,-32(fp)
   44ff8:	1085883a 	add	r2,r2,r2
   44ffc:	1085883a 	add	r2,r2,r2
   45000:	e13ff804 	addi	r4,fp,-32
   45004:	2085883a 	add	r2,r4,r2
   45008:	10800404 	addi	r2,r2,16
   4500c:	10800017 	ldw	r2,0(r2)
   45010:	18800a15 	stw	r2,40(r3)

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
   45014:	e0bff817 	ldw	r2,-32(fp)
   45018:	10800044 	addi	r2,r2,1
   4501c:	e0bff815 	stw	r2,-32(fp)
   45020:	e0bff817 	ldw	r2,-32(fp)
   45024:	10800110 	cmplti	r2,r2,4
   45028:	103fe61e 	bne	r2,zero,44fc4 <__alt_mem_descriptor_memory+0xdf004fc4>
            dhc_halt(iface);
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
         }
      }
   }
}
   4502c:	e037883a 	mov	sp,fp
   45030:	dfc00117 	ldw	ra,4(sp)
   45034:	df000017 	ldw	fp,0(sp)
   45038:	dec00204 	addi	sp,sp,8
   4503c:	f800283a 	ret

00045040 <dhc_main_ipset>:
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
   45040:	defffc04 	addi	sp,sp,-16
   45044:	dfc00315 	stw	ra,12(sp)
   45048:	df000215 	stw	fp,8(sp)
   4504c:	df000204 	addi	fp,sp,8
   45050:	e13ffe15 	stw	r4,-8(fp)
   45054:	e17fff15 	stw	r5,-4(fp)
   if ( state == DHCS_BOUND )
   45058:	e0bfff17 	ldw	r2,-4(fp)
   4505c:	10800198 	cmpnei	r2,r2,6
   45060:	1000361e 	bne	r2,zero,4513c <dhc_main_ipset+0xfc>
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
              nets[iface]->name);
   45064:	008001b4 	movhi	r2,6
   45068:	10b79b04 	addi	r2,r2,-8596
   4506c:	e0fffe17 	ldw	r3,-8(fp)
   45070:	18c7883a 	add	r3,r3,r3
   45074:	18c7883a 	add	r3,r3,r3
   45078:	10c5883a 	add	r2,r2,r3
   4507c:	10800017 	ldw	r2,0(r2)
   45080:	10800104 	addi	r2,r2,4
dhc_main_ipset(int iface, int state)
{
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
   45084:	01000174 	movhi	r4,5
   45088:	213e7904 	addi	r4,r4,-1564
   4508c:	100b883a 	mov	r5,r2
   45090:	00080f80 	call	80f8 <printf>
              nets[iface]->name);

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
   45094:	008001b4 	movhi	r2,6
   45098:	10b79b04 	addi	r2,r2,-8596
   4509c:	e0fffe17 	ldw	r3,-8(fp)
   450a0:	18c7883a 	add	r3,r3,r3
   450a4:	18c7883a 	add	r3,r3,r3
   450a8:	10c5883a 	add	r2,r2,r3
   450ac:	10800017 	ldw	r2,0(r2)
   450b0:	10800a17 	ldw	r2,40(r2)
   450b4:	1009883a 	mov	r4,r2
   450b8:	00265840 	call	26584 <print_ipad>
   450bc:	01000174 	movhi	r4,5
   450c0:	213e8704 	addi	r4,r4,-1508
   450c4:	100b883a 	mov	r5,r2
   450c8:	00080f80 	call	80f8 <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
   450cc:	008001b4 	movhi	r2,6
   450d0:	10b79b04 	addi	r2,r2,-8596
   450d4:	e0fffe17 	ldw	r3,-8(fp)
   450d8:	18c7883a 	add	r3,r3,r3
   450dc:	18c7883a 	add	r3,r3,r3
   450e0:	10c5883a 	add	r2,r2,r3
   450e4:	10800017 	ldw	r2,0(r2)
   450e8:	10800c17 	ldw	r2,48(r2)
   450ec:	1009883a 	mov	r4,r2
   450f0:	00265840 	call	26584 <print_ipad>
   450f4:	01000174 	movhi	r4,5
   450f8:	213e8c04 	addi	r4,r4,-1488
   450fc:	100b883a 	mov	r5,r2
   45100:	00080f80 	call	80f8 <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
   45104:	008001b4 	movhi	r2,6
   45108:	10b79b04 	addi	r2,r2,-8596
   4510c:	e0fffe17 	ldw	r3,-8(fp)
   45110:	18c7883a 	add	r3,r3,r3
   45114:	18c7883a 	add	r3,r3,r3
   45118:	10c5883a 	add	r2,r2,r3
   4511c:	10800017 	ldw	r2,0(r2)
   45120:	10800d17 	ldw	r2,52(r2)
   45124:	1009883a 	mov	r4,r2
   45128:	00265840 	call	26584 <print_ipad>
   4512c:	01000174 	movhi	r4,5
   45130:	213e9104 	addi	r4,r4,-1468
   45134:	100b883a 	mov	r5,r2
   45138:	00080f80 	call	80f8 <printf>
   }
   return 0;
   4513c:	0005883a 	mov	r2,zero
}
   45140:	e037883a 	mov	sp,fp
   45144:	dfc00117 	ldw	ra,4(sp)
   45148:	df000017 	ldw	fp,0(sp)
   4514c:	dec00204 	addi	sp,sp,8
   45150:	f800283a 	ret

00045154 <init_memdev>:
 * RETURNS: 
 */

int
init_memdev(void)
{
   45154:	deffff04 	addi	sp,sp,-4
   45158:	df000015 	stw	fp,0(sp)
   4515c:	d839883a 	mov	fp,sp
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
   45160:	00800174 	movhi	r2,5
   45164:	108fea04 	addi	r2,r2,16296
   45168:	10c00017 	ldw	r3,0(r2)
   4516c:	00800174 	movhi	r2,5
   45170:	1086cf04 	addi	r2,r2,6972
   45174:	10c00015 	stw	r3,0(r2)
   vfsystems = &mdio;
   45178:	00800174 	movhi	r2,5
   4517c:	108fea04 	addi	r2,r2,16296
   45180:	00c00174 	movhi	r3,5
   45184:	18c6cf04 	addi	r3,r3,6972
   45188:	10c00015 	stw	r3,0(r2)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
   4518c:	00800174 	movhi	r2,5
   45190:	108fec04 	addi	r2,r2,16304
   45194:	10c00017 	ldw	r3,0(r2)
   45198:	00800174 	movhi	r2,5
   4519c:	1086d804 	addi	r2,r2,7008
   451a0:	10c00015 	stw	r3,0(r2)
   vfsfiles = &mdlist[3];
   451a4:	00800174 	movhi	r2,5
   451a8:	108fec04 	addi	r2,r2,16304
   451ac:	00c00174 	movhi	r3,5
   451b0:	18c6f904 	addi	r3,r3,7140
   451b4:	10c00015 	stw	r3,0(r2)

   return 0;
   451b8:	0005883a 	mov	r2,zero
}
   451bc:	e037883a 	mov	sp,fp
   451c0:	df000017 	ldw	fp,0(sp)
   451c4:	dec00104 	addi	sp,sp,4
   451c8:	f800283a 	ret

000451cc <md_fopen>:
 * RETURNS: 
 */

VFILE* 
md_fopen(char * name, char * mode)
{
   451cc:	defffd04 	addi	sp,sp,-12
   451d0:	df000215 	stw	fp,8(sp)
   451d4:	df000204 	addi	fp,sp,8
   451d8:	e13ffe15 	stw	r4,-8(fp)
   451dc:	e17fff15 	stw	r5,-4(fp)
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
   451e0:	0005883a 	mov	r2,zero
}
   451e4:	e037883a 	mov	sp,fp
   451e8:	df000017 	ldw	fp,0(sp)
   451ec:	dec00104 	addi	sp,sp,4
   451f0:	f800283a 	ret

000451f4 <md_fclose>:
 * RETURNS: 
 */

void   
md_fclose(VFILE * vfd)
{
   451f4:	defffe04 	addi	sp,sp,-8
   451f8:	df000115 	stw	fp,4(sp)
   451fc:	df000104 	addi	fp,sp,4
   45200:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);
}
   45204:	e037883a 	mov	sp,fp
   45208:	df000017 	ldw	fp,0(sp)
   4520c:	dec00104 	addi	sp,sp,4
   45210:	f800283a 	ret

00045214 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   45214:	defff704 	addi	sp,sp,-36
   45218:	dfc00815 	stw	ra,32(sp)
   4521c:	df000715 	stw	fp,28(sp)
   45220:	df000704 	addi	fp,sp,28
   45224:	e13ffc15 	stw	r4,-16(fp)
   45228:	e17ffd15 	stw	r5,-12(fp)
   4522c:	e1bffe15 	stw	r6,-8(fp)
   45230:	e1ffff15 	stw	r7,-4(fp)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
   45234:	00800834 	movhi	r2,32
   45238:	e0bffa15 	stw	r2,-24(fp)
   if(vfd && vfd->file)
   4523c:	e0bfff17 	ldw	r2,-4(fp)
   45240:	10000726 	beq	r2,zero,45260 <md_fread+0x4c>
   45244:	e0bfff17 	ldw	r2,-4(fp)
   45248:	10800117 	ldw	r2,4(r2)
   4524c:	10000426 	beq	r2,zero,45260 <md_fread+0x4c>
   {
      file_size = vfd->file->real_size; 
   45250:	e0bfff17 	ldw	r2,-4(fp)
   45254:	10800117 	ldw	r2,4(r2)
   45258:	10800717 	ldw	r2,28(r2)
   4525c:	e0bffa15 	stw	r2,-24(fp)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
   45260:	e0bfff17 	ldw	r2,-4(fp)
   45264:	10800217 	ldw	r2,8(r2)
   45268:	1007883a 	mov	r3,r2
   4526c:	e0bfff17 	ldw	r2,-4(fp)
   45270:	10800117 	ldw	r2,4(r2)
   45274:	10800617 	ldw	r2,24(r2)
   45278:	1885c83a 	sub	r2,r3,r2
   4527c:	e0bffb15 	stw	r2,-20(fp)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
   45280:	e0fffe17 	ldw	r3,-8(fp)
   45284:	e0bffd17 	ldw	r2,-12(fp)
   45288:	1885383a 	mul	r2,r3,r2
   4528c:	e0bff915 	stw	r2,-28(fp)

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
   45290:	e0fffb17 	ldw	r3,-20(fp)
   45294:	e0bff917 	ldw	r2,-28(fp)
   45298:	1885883a 	add	r2,r3,r2
   4529c:	e0fffa17 	ldw	r3,-24(fp)
   452a0:	1880042e 	bgeu	r3,r2,452b4 <md_fread+0xa0>
      bcount = ((u_long)file_size - location);
   452a4:	e0fffa17 	ldw	r3,-24(fp)
   452a8:	e0bffb17 	ldw	r2,-20(fp)
   452ac:	1885c83a 	sub	r2,r3,r2
   452b0:	e0bff915 	stw	r2,-28(fp)

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
   452b4:	e0fffb17 	ldw	r3,-20(fp)
   452b8:	e0bffa17 	ldw	r2,-24(fp)
   452bc:	1880052e 	bgeu	r3,r2,452d4 <md_fread+0xc0>
      (bcount  & 0xFFFF0000) ||
   452c0:	e0bff917 	ldw	r2,-28(fp)
   452c4:	10bfffec 	andhi	r2,r2,65535
   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
      bcount = ((u_long)file_size - location);

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
   452c8:	1000021e 	bne	r2,zero,452d4 <md_fread+0xc0>
      (bcount  & 0xFFFF0000) ||
   452cc:	e0bff917 	ldw	r2,-28(fp)
   452d0:	1000021e 	bne	r2,zero,452dc <md_fread+0xc8>
      (bcount == 0))
   {
      return 0;
   452d4:	0005883a 	mov	r2,zero
   452d8:	00002006 	br	4535c <md_fread+0x148>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
   452dc:	e0bfff17 	ldw	r2,-4(fp)
   452e0:	10800117 	ldw	r2,4(r2)
   452e4:	1080058b 	ldhu	r2,22(r2)
   452e8:	10bfffcc 	andi	r2,r2,65535
   452ec:	10a0001c 	xori	r2,r2,32768
   452f0:	10a00004 	addi	r2,r2,-32768
   452f4:	10001016 	blt	r2,zero,45338 <md_fread+0x124>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
   452f8:	e0bfff17 	ldw	r2,-4(fp)
   452fc:	10800117 	ldw	r2,4(r2)
   45300:	10800103 	ldbu	r2,4(r2)
   45304:	10803fcc 	andi	r2,r2,255
   45308:	1080201c 	xori	r2,r2,128
   4530c:	10bfe004 	addi	r2,r2,-128
   45310:	10801b58 	cmpnei	r2,r2,109
   45314:	1000081e 	bne	r2,zero,45338 <md_fread+0x124>
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
   45318:	e0bfff17 	ldw	r2,-4(fp)
   4531c:	10c00217 	ldw	r3,8(r2)
   45320:	00800834 	movhi	r2,32
   45324:	1885883a 	add	r2,r3,r2
   45328:	e13ffc17 	ldw	r4,-16(fp)
   4532c:	100b883a 	mov	r5,r2
   45330:	e1bff917 	ldw	r6,-28(fp)
   45334:	0007c900 	call	7c90 <memcpy>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
   45338:	e0bfff17 	ldw	r2,-4(fp)
   4533c:	10c00217 	ldw	r3,8(r2)
   45340:	e0bff917 	ldw	r2,-28(fp)
   45344:	1887883a 	add	r3,r3,r2
   45348:	e0bfff17 	ldw	r2,-4(fp)
   4534c:	10c00215 	stw	r3,8(r2)
#endif
   
   return ((int)bcount/size);
   45350:	e13ff917 	ldw	r4,-28(fp)
   45354:	e17ffd17 	ldw	r5,-12(fp)
   45358:	00152500 	call	15250 <__udivsi3>
}
   4535c:	e037883a 	mov	sp,fp
   45360:	dfc00117 	ldw	ra,4(sp)
   45364:	df000017 	ldw	fp,0(sp)
   45368:	dec00204 	addi	sp,sp,8
   4536c:	f800283a 	ret

00045370 <md_fwrite>:
 * RETURNS: 
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   45370:	defffb04 	addi	sp,sp,-20
   45374:	df000415 	stw	fp,16(sp)
   45378:	df000404 	addi	fp,sp,16
   4537c:	e13ffc15 	stw	r4,-16(fp)
   45380:	e17ffd15 	stw	r5,-12(fp)
   45384:	e1bffe15 	stw	r6,-8(fp)
   45388:	e1ffff15 	stw	r7,-4(fp)
   if (vfd->file->name[0] == 'm')   /* memory device */
   4538c:	e0bfff17 	ldw	r2,-4(fp)
   45390:	10800117 	ldw	r2,4(r2)
   45394:	10800103 	ldbu	r2,4(r2)
   45398:	10803fcc 	andi	r2,r2,255
   4539c:	1080201c 	xori	r2,r2,128
   453a0:	10bfe004 	addi	r2,r2,-128
   453a4:	10801b58 	cmpnei	r2,r2,109
   453a8:	1000021e 	bne	r2,zero,453b4 <md_fwrite+0x44>
      return 0;   /* not writable device */
   453ac:	0005883a 	mov	r2,zero
   453b0:	00000906 	br	453d8 <md_fwrite+0x68>

   vfd->cmploc += (items * size);   /* adjust location */
   453b4:	e0bfff17 	ldw	r2,-4(fp)
   453b8:	10c00217 	ldw	r3,8(r2)
   453bc:	e13ffe17 	ldw	r4,-8(fp)
   453c0:	e0bffd17 	ldw	r2,-12(fp)
   453c4:	2085383a 	mul	r2,r4,r2
   453c8:	1887883a 	add	r3,r3,r2
   453cc:	e0bfff17 	ldw	r2,-4(fp)
   453d0:	10c00215 	stw	r3,8(r2)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
   453d4:	e0bffe17 	ldw	r2,-8(fp)
}
   453d8:	e037883a 	mov	sp,fp
   453dc:	df000017 	ldw	fp,0(sp)
   453e0:	dec00104 	addi	sp,sp,4
   453e4:	f800283a 	ret

000453e8 <md_fseek>:
 * RETURNS: 
 */

int
md_fseek(VFILE * vfd, long offset, int mode)
{
   453e8:	defffc04 	addi	sp,sp,-16
   453ec:	df000315 	stw	fp,12(sp)
   453f0:	df000304 	addi	fp,sp,12
   453f4:	e13ffd15 	stw	r4,-12(fp)
   453f8:	e17ffe15 	stw	r5,-8(fp)
   453fc:	e1bfff15 	stw	r6,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
   45400:	0005883a 	mov	r2,zero
}
   45404:	e037883a 	mov	sp,fp
   45408:	df000017 	ldw	fp,0(sp)
   4540c:	dec00104 	addi	sp,sp,4
   45410:	f800283a 	ret

00045414 <md_ftell>:
 * RETURNS: 
 */

long   
md_ftell(VFILE * vfd)
{
   45414:	defffe04 	addi	sp,sp,-8
   45418:	df000115 	stw	fp,4(sp)
   4541c:	df000104 	addi	fp,sp,4
   45420:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
   45424:	00800834 	movhi	r2,32
}
   45428:	e037883a 	mov	sp,fp
   4542c:	df000017 	ldw	fp,0(sp)
   45430:	dec00104 	addi	sp,sp,4
   45434:	f800283a 	ret

00045438 <md_fgetc>:
 * RETURNS: 
 */

int    
md_fgetc(VFILE * vfd)
{
   45438:	defffc04 	addi	sp,sp,-16
   4543c:	df000315 	stw	fp,12(sp)
   45440:	df000304 	addi	fp,sp,12
   45444:	e13fff15 	stw	r4,-4(fp)
   unsigned location;   /* current offset infile */
   int   retval   =  0;
   45448:	e03ffd15 	stw	zero,-12(fp)

   location = vfd->cmploc - vfd->file->data;
   4544c:	e0bfff17 	ldw	r2,-4(fp)
   45450:	10800217 	ldw	r2,8(r2)
   45454:	1007883a 	mov	r3,r2
   45458:	e0bfff17 	ldw	r2,-4(fp)
   4545c:	10800117 	ldw	r2,4(r2)
   45460:	10800617 	ldw	r2,24(r2)
   45464:	1885c83a 	sub	r2,r3,r2
   45468:	e0bffe15 	stw	r2,-8(fp)
   if (location >= vfd->file->real_size)     /* at end of file? */
   4546c:	e0bfff17 	ldw	r2,-4(fp)
   45470:	10800117 	ldw	r2,4(r2)
   45474:	10800717 	ldw	r2,28(r2)
   45478:	e0fffe17 	ldw	r3,-8(fp)
   4547c:	18800236 	bltu	r3,r2,45488 <md_fgetc+0x50>
      return EOF;
   45480:	00bfffc4 	movi	r2,-1
   45484:	00001a06 	br	454f0 <md_fgetc+0xb8>

   if (!(vfd->file->flags & VF_NODATA))
   45488:	e0bfff17 	ldw	r2,-4(fp)
   4548c:	10800117 	ldw	r2,4(r2)
   45490:	1080058b 	ldhu	r2,22(r2)
   45494:	10bfffcc 	andi	r2,r2,65535
   45498:	10a0001c 	xori	r2,r2,32768
   4549c:	10a00004 	addi	r2,r2,-32768
   454a0:	10000d16 	blt	r2,zero,454d8 <md_fgetc+0xa0>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
   454a4:	e0bfff17 	ldw	r2,-4(fp)
   454a8:	10800117 	ldw	r2,4(r2)
   454ac:	10800103 	ldbu	r2,4(r2)
   454b0:	10803fcc 	andi	r2,r2,255
   454b4:	1080201c 	xori	r2,r2,128
   454b8:	10bfe004 	addi	r2,r2,-128
   454bc:	10801b58 	cmpnei	r2,r2,109
   454c0:	1000051e 	bne	r2,zero,454d8 <md_fgetc+0xa0>
         retval = (int)(*vfd->cmploc) & 0xFF ;
   454c4:	e0bfff17 	ldw	r2,-4(fp)
   454c8:	10800217 	ldw	r2,8(r2)
   454cc:	10800003 	ldbu	r2,0(r2)
   454d0:	10803fcc 	andi	r2,r2,255
   454d4:	e0bffd15 	stw	r2,-12(fp)
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
   454d8:	e0bfff17 	ldw	r2,-4(fp)
   454dc:	10800217 	ldw	r2,8(r2)
   454e0:	10c00044 	addi	r3,r2,1
   454e4:	e0bfff17 	ldw	r2,-4(fp)
   454e8:	10c00215 	stw	r3,8(r2)
   return retval;
   454ec:	e0bffd17 	ldw	r2,-12(fp)
}
   454f0:	e037883a 	mov	sp,fp
   454f4:	df000017 	ldw	fp,0(sp)
   454f8:	dec00104 	addi	sp,sp,4
   454fc:	f800283a 	ret

00045500 <md_unlink>:
 * RETURNS: 
 */

int    
md_unlink(char * filename)
{
   45500:	defffe04 	addi	sp,sp,-8
   45504:	df000115 	stw	fp,4(sp)
   45508:	df000104 	addi	fp,sp,4
   4550c:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
   45510:	0005883a 	mov	r2,zero
}
   45514:	e037883a 	mov	sp,fp
   45518:	df000017 	ldw	fp,0(sp)
   4551c:	dec00104 	addi	sp,sp,4
   45520:	f800283a 	ret

00045524 <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
   45524:	defff604 	addi	sp,sp,-40
   45528:	dfc00915 	stw	ra,36(sp)
   4552c:	df000815 	stw	fp,32(sp)
   45530:	df000804 	addi	fp,sp,32
   45534:	e13ffd15 	stw	r4,-12(fp)
   45538:	e17ffe15 	stw	r5,-8(fp)
   4553c:	e1bfff15 	stw	r6,-4(fp)
   char *   cp;
   int   dots  =  0; /* periods imbedded in input string */
   45540:	e03ff915 	stw	zero,-28(fp)
   union   
   {
      u_char   c[4];
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";
   45544:	00800174 	movhi	r2,5
   45548:	10be9604 	addi	r2,r2,-1448
   4554c:	e0bffa15 	stw	r2,-24(fp)

   cp = stringin;
   45550:	e0bfff17 	ldw	r2,-4(fp)
   45554:	e0bff815 	stw	r2,-32(fp)
   while (*cp)
   45558:	00002506 	br	455f0 <parse_ipad+0xcc>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
   4555c:	e0bff817 	ldw	r2,-32(fp)
   45560:	10800003 	ldbu	r2,0(r2)
   45564:	10803fcc 	andi	r2,r2,255
   45568:	1080201c 	xori	r2,r2,128
   4556c:	10bfe004 	addi	r2,r2,-128
   45570:	10800e88 	cmpgei	r2,r2,58
   45574:	10000e1e 	bne	r2,zero,455b0 <parse_ipad+0x8c>
   45578:	e0bff817 	ldw	r2,-32(fp)
   4557c:	10800003 	ldbu	r2,0(r2)
   45580:	10803fcc 	andi	r2,r2,255
   45584:	1080201c 	xori	r2,r2,128
   45588:	10bfe004 	addi	r2,r2,-128
   4558c:	10800b90 	cmplti	r2,r2,46
   45590:	1000071e 	bne	r2,zero,455b0 <parse_ipad+0x8c>
   45594:	e0bff817 	ldw	r2,-32(fp)
   45598:	10800003 	ldbu	r2,0(r2)
   4559c:	10803fcc 	andi	r2,r2,255
   455a0:	1080201c 	xori	r2,r2,128
   455a4:	10bfe004 	addi	r2,r2,-128
   455a8:	10800bd8 	cmpnei	r2,r2,47
   455ac:	1000031e 	bne	r2,zero,455bc <parse_ipad+0x98>
         return("all chars must be digits (0-9) or dots (.)");
   455b0:	00800174 	movhi	r2,5
   455b4:	10be9f04 	addi	r2,r2,-1412
   455b8:	00009406 	br	4580c <parse_ipad+0x2e8>
      if (*cp == '.')dots++;
   455bc:	e0bff817 	ldw	r2,-32(fp)
   455c0:	10800003 	ldbu	r2,0(r2)
   455c4:	10803fcc 	andi	r2,r2,255
   455c8:	1080201c 	xori	r2,r2,128
   455cc:	10bfe004 	addi	r2,r2,-128
   455d0:	10800b98 	cmpnei	r2,r2,46
   455d4:	1000031e 	bne	r2,zero,455e4 <parse_ipad+0xc0>
   455d8:	e0bff917 	ldw	r2,-28(fp)
   455dc:	10800044 	addi	r2,r2,1
   455e0:	e0bff915 	stw	r2,-28(fp)
         cp++;
   455e4:	e0bff817 	ldw	r2,-32(fp)
   455e8:	10800044 	addi	r2,r2,1
   455ec:	e0bff815 	stw	r2,-32(fp)
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
   455f0:	e0bff817 	ldw	r2,-32(fp)
   455f4:	10800003 	ldbu	r2,0(r2)
   455f8:	10803fcc 	andi	r2,r2,255
   455fc:	1080201c 	xori	r2,r2,128
   45600:	10bfe004 	addi	r2,r2,-128
   45604:	103fd51e 	bne	r2,zero,4555c <__alt_mem_descriptor_memory+0xdf00555c>
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
         cp++;
   }

   if ( dots < 1 || dots > 3 )
   45608:	e0bff917 	ldw	r2,-28(fp)
   4560c:	0080030e 	bge	zero,r2,4561c <parse_ipad+0xf8>
   45610:	e0bff917 	ldw	r2,-28(fp)
   45614:	10800110 	cmplti	r2,r2,4
   45618:	1000031e 	bne	r2,zero,45628 <parse_ipad+0x104>
      return("string must contain 1 - 3 dots (.)");
   4561c:	00800174 	movhi	r2,5
   45620:	10beaa04 	addi	r2,r2,-1368
   45624:	00007906 	br	4580c <parse_ipad+0x2e8>

   cp = stringin;
   45628:	e0bfff17 	ldw	r2,-4(fp)
   4562c:	e0bff815 	stw	r2,-32(fp)
   if ((number = atoi(cp)) > 255)   /* set net number */
   45630:	e13ff817 	ldw	r4,-32(fp)
   45634:	004967c0 	call	4967c <atoi>
   45638:	e0bffb15 	stw	r2,-20(fp)
   4563c:	e0bffb17 	ldw	r2,-20(fp)
   45640:	10804010 	cmplti	r2,r2,256
   45644:	1000021e 	bne	r2,zero,45650 <parse_ipad+0x12c>
      return(toobig);
   45648:	e0bffa17 	ldw	r2,-24(fp)
   4564c:	00006f06 	br	4580c <parse_ipad+0x2e8>

   retval.c[0] = (u_char)number;
   45650:	e0bffb17 	ldw	r2,-20(fp)
   45654:	e0bffc05 	stb	r2,-16(fp)

   while (*cp != '.')cp++; /* find dot (end of number) */
   45658:	00000306 	br	45668 <parse_ipad+0x144>
   4565c:	e0bff817 	ldw	r2,-32(fp)
   45660:	10800044 	addi	r2,r2,1
   45664:	e0bff815 	stw	r2,-32(fp)
   45668:	e0bff817 	ldw	r2,-32(fp)
   4566c:	10800003 	ldbu	r2,0(r2)
   45670:	10803fcc 	andi	r2,r2,255
   45674:	1080201c 	xori	r2,r2,128
   45678:	10bfe004 	addi	r2,r2,-128
   4567c:	10800b98 	cmpnei	r2,r2,46
   45680:	103ff61e 	bne	r2,zero,4565c <__alt_mem_descriptor_memory+0xdf00565c>
      cp++;             /* point past dot */
   45684:	e0bff817 	ldw	r2,-32(fp)
   45688:	10800044 	addi	r2,r2,1
   4568c:	e0bff815 	stw	r2,-32(fp)

   if (dots == 1 || dots == 2) retval.c[1] = 0;
   45690:	e0bff917 	ldw	r2,-28(fp)
   45694:	10800060 	cmpeqi	r2,r2,1
   45698:	1000031e 	bne	r2,zero,456a8 <parse_ipad+0x184>
   4569c:	e0bff917 	ldw	r2,-28(fp)
   456a0:	10800098 	cmpnei	r2,r2,2
   456a4:	1000021e 	bne	r2,zero,456b0 <parse_ipad+0x18c>
   456a8:	e03ffc45 	stb	zero,-15(fp)
   456ac:	00001806 	br	45710 <parse_ipad+0x1ec>
      else
   {
      number = atoi(cp);
   456b0:	e13ff817 	ldw	r4,-32(fp)
   456b4:	004967c0 	call	4967c <atoi>
   456b8:	e0bffb15 	stw	r2,-20(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
   456bc:	00000306 	br	456cc <parse_ipad+0x1a8>
   456c0:	e0bff817 	ldw	r2,-32(fp)
   456c4:	10800044 	addi	r2,r2,1
   456c8:	e0bff815 	stw	r2,-32(fp)
   456cc:	e0bff817 	ldw	r2,-32(fp)
   456d0:	10800003 	ldbu	r2,0(r2)
   456d4:	10803fcc 	andi	r2,r2,255
   456d8:	1080201c 	xori	r2,r2,128
   456dc:	10bfe004 	addi	r2,r2,-128
   456e0:	10800b98 	cmpnei	r2,r2,46
   456e4:	103ff61e 	bne	r2,zero,456c0 <__alt_mem_descriptor_memory+0xdf0056c0>
         cp++;             /* point past dot */
   456e8:	e0bff817 	ldw	r2,-32(fp)
   456ec:	10800044 	addi	r2,r2,1
   456f0:	e0bff815 	stw	r2,-32(fp)
      if (number > 255) return(toobig);
   456f4:	e0bffb17 	ldw	r2,-20(fp)
   456f8:	10804010 	cmplti	r2,r2,256
   456fc:	1000021e 	bne	r2,zero,45708 <parse_ipad+0x1e4>
   45700:	e0bffa17 	ldw	r2,-24(fp)
   45704:	00004106 	br	4580c <parse_ipad+0x2e8>
         retval.c[1] = (u_char)number;
   45708:	e0bffb17 	ldw	r2,-20(fp)
   4570c:	e0bffc45 	stb	r2,-15(fp)
   }

   if (dots == 1) retval.c[2] = 0;
   45710:	e0bff917 	ldw	r2,-28(fp)
   45714:	10800058 	cmpnei	r2,r2,1
   45718:	1000021e 	bne	r2,zero,45724 <parse_ipad+0x200>
   4571c:	e03ffc85 	stb	zero,-14(fp)
   45720:	00001806 	br	45784 <parse_ipad+0x260>
      else
   {
      number = atoi(cp);
   45724:	e13ff817 	ldw	r4,-32(fp)
   45728:	004967c0 	call	4967c <atoi>
   4572c:	e0bffb15 	stw	r2,-20(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
   45730:	00000306 	br	45740 <parse_ipad+0x21c>
   45734:	e0bff817 	ldw	r2,-32(fp)
   45738:	10800044 	addi	r2,r2,1
   4573c:	e0bff815 	stw	r2,-32(fp)
   45740:	e0bff817 	ldw	r2,-32(fp)
   45744:	10800003 	ldbu	r2,0(r2)
   45748:	10803fcc 	andi	r2,r2,255
   4574c:	1080201c 	xori	r2,r2,128
   45750:	10bfe004 	addi	r2,r2,-128
   45754:	10800b98 	cmpnei	r2,r2,46
   45758:	103ff61e 	bne	r2,zero,45734 <__alt_mem_descriptor_memory+0xdf005734>
         cp++;             /* point past dot */
   4575c:	e0bff817 	ldw	r2,-32(fp)
   45760:	10800044 	addi	r2,r2,1
   45764:	e0bff815 	stw	r2,-32(fp)
      if (number > 255) return(toobig);
   45768:	e0bffb17 	ldw	r2,-20(fp)
   4576c:	10804010 	cmplti	r2,r2,256
   45770:	1000021e 	bne	r2,zero,4577c <parse_ipad+0x258>
   45774:	e0bffa17 	ldw	r2,-24(fp)
   45778:	00002406 	br	4580c <parse_ipad+0x2e8>
         retval.c[2] = (u_char)number;
   4577c:	e0bffb17 	ldw	r2,-20(fp)
   45780:	e0bffc85 	stb	r2,-14(fp)
   }

   if ((number = atoi(cp)) > 255)
   45784:	e13ff817 	ldw	r4,-32(fp)
   45788:	004967c0 	call	4967c <atoi>
   4578c:	e0bffb15 	stw	r2,-20(fp)
   45790:	e0bffb17 	ldw	r2,-20(fp)
   45794:	10804010 	cmplti	r2,r2,256
   45798:	1000021e 	bne	r2,zero,457a4 <parse_ipad+0x280>
      return(toobig);
   4579c:	e0bffa17 	ldw	r2,-24(fp)
   457a0:	00001a06 	br	4580c <parse_ipad+0x2e8>
   retval.c[3] = (u_char)number;
   457a4:	e0bffb17 	ldw	r2,-20(fp)
   457a8:	e0bffcc5 	stb	r2,-13(fp)

   if (retval.c[0] < 128) *sbits = 8;
   457ac:	e0bffc03 	ldbu	r2,-16(fp)
   457b0:	10803fcc 	andi	r2,r2,255
   457b4:	1080201c 	xori	r2,r2,128
   457b8:	10bfe004 	addi	r2,r2,-128
   457bc:	10000416 	blt	r2,zero,457d0 <parse_ipad+0x2ac>
   457c0:	e0bffe17 	ldw	r2,-8(fp)
   457c4:	00c00204 	movi	r3,8
   457c8:	10c00015 	stw	r3,0(r2)
   457cc:	00000b06 	br	457fc <parse_ipad+0x2d8>
      else if(retval.c[0] < 192) *sbits = 16;
   457d0:	e0bffc03 	ldbu	r2,-16(fp)
   457d4:	10803fcc 	andi	r2,r2,255
   457d8:	10803028 	cmpgeui	r2,r2,192
   457dc:	1000041e 	bne	r2,zero,457f0 <parse_ipad+0x2cc>
   457e0:	e0bffe17 	ldw	r2,-8(fp)
   457e4:	00c00404 	movi	r3,16
   457e8:	10c00015 	stw	r3,0(r2)
   457ec:	00000306 	br	457fc <parse_ipad+0x2d8>
      else *sbits = 24;
   457f0:	e0bffe17 	ldw	r2,-8(fp)
   457f4:	00c00604 	movi	r3,24
   457f8:	10c00015 	stw	r3,0(r2)

      *ipout = retval.l;      /* everything went OK, return number */
   457fc:	e0fffc17 	ldw	r3,-16(fp)
   45800:	e0bffd17 	ldw	r2,-12(fp)
   45804:	10c00015 	stw	r3,0(r2)
   return(NULL);        /* return OK code (no error string) */
   45808:	0005883a 	mov	r2,zero
}
   4580c:	e037883a 	mov	sp,fp
   45810:	dfc00117 	ldw	ra,4(sp)
   45814:	df000017 	ldw	fp,0(sp)
   45818:	dec00204 	addi	sp,sp,8
   4581c:	f800283a 	ret

00045820 <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
   45820:	defffb04 	addi	sp,sp,-20
   45824:	dfc00415 	stw	ra,16(sp)
   45828:	df000315 	stw	fp,12(sp)
   4582c:	df000304 	addi	fp,sp,12
   45830:	e13fff15 	stw	r4,-4(fp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
   45834:	01000174 	movhi	r4,5
   45838:	21118f04 	addi	r4,r4,17980
   4583c:	e17fff17 	ldw	r5,-4(fp)
   45840:	000868c0 	call	868c <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
   45844:	e0bffe04 	addi	r2,fp,-8
   45848:	e13ffd04 	addi	r4,fp,-12
   4584c:	100b883a 	mov	r5,r2
   45850:	01800174 	movhi	r6,5
   45854:	31918f04 	addi	r6,r6,17980
   45858:	00455240 	call	45524 <parse_ipad>
   4585c:	1000021e 	bne	r2,zero,45868 <inet_addr+0x48>
   {
      return ipaddr ;
   45860:	e0bffd17 	ldw	r2,-12(fp)
   45864:	00000106 	br	4586c <inet_addr+0x4c>
   }
   else
   {
      return (u_long)NULL ;
   45868:	0005883a 	mov	r2,zero
   }
}
   4586c:	e037883a 	mov	sp,fp
   45870:	dfc00117 	ldw	ra,4(sp)
   45874:	df000017 	ldw	fp,0(sp)
   45878:	dec00204 	addi	sp,sp,8
   4587c:	f800283a 	ret

00045880 <hextoa>:
 * RETURNS: character 0-9 or A-F
 */

char
hextoa(int val)
{
   45880:	defffe04 	addi	sp,sp,-8
   45884:	df000115 	stw	fp,4(sp)
   45888:	df000104 	addi	fp,sp,4
   4588c:	e13fff15 	stw	r4,-4(fp)
   val &= 0x0f;
   45890:	e0bfff17 	ldw	r2,-4(fp)
   45894:	108003cc 	andi	r2,r2,15
   45898:	e0bfff15 	stw	r2,-4(fp)
   if(val < 10)
   4589c:	e0bfff17 	ldw	r2,-4(fp)
   458a0:	10800288 	cmpgei	r2,r2,10
   458a4:	1000031e 	bne	r2,zero,458b4 <hextoa+0x34>
      return (char)(val + '0');
   458a8:	e0bfff17 	ldw	r2,-4(fp)
   458ac:	10800c04 	addi	r2,r2,48
   458b0:	00000206 	br	458bc <hextoa+0x3c>
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
   458b4:	e0bfff17 	ldw	r2,-4(fp)
   458b8:	10800dc4 	addi	r2,r2,55
}
   458bc:	e037883a 	mov	sp,fp
   458c0:	df000017 	ldw	fp,0(sp)
   458c4:	dec00104 	addi	sp,sp,4
   458c8:	f800283a 	ret

000458cc <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
   458cc:	defff804 	addi	sp,sp,-32
   458d0:	dfc00715 	stw	ra,28(sp)
   458d4:	df000615 	stw	fp,24(sp)
   458d8:	df000604 	addi	fp,sp,24
   458dc:	e13ffd15 	stw	r4,-12(fp)
   458e0:	e17ffe15 	stw	r5,-8(fp)
   458e4:	e1bfff15 	stw	r6,-4(fp)
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
   458e8:	e0bffd17 	ldw	r2,-12(fp)
   458ec:	10800098 	cmpnei	r2,r2,2
   458f0:	1000151e 	bne	r2,zero,45948 <inet_pton+0x7c>
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
   458f4:	e0fffb04 	addi	r3,fp,-20
   458f8:	e0bffc04 	addi	r2,fp,-16
   458fc:	1809883a 	mov	r4,r3
   45900:	100b883a 	mov	r5,r2
   45904:	e1bffe17 	ldw	r6,-8(fp)
   45908:	00455240 	call	45524 <parse_ipad>
   4590c:	e0bffa15 	stw	r2,-24(fp)
      if(err == NULL)
   45910:	e0bffa17 	ldw	r2,-24(fp)
   45914:	1000071e 	bne	r2,zero,45934 <inet_pton+0x68>
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
   45918:	e0bffb04 	addi	r2,fp,-20
   4591c:	e13fff17 	ldw	r4,-4(fp)
   45920:	100b883a 	mov	r5,r2
   45924:	01800104 	movi	r6,4
   45928:	0007c900 	call	7c90 <memcpy>
         return 0;
   4592c:	0005883a 	mov	r2,zero
   45930:	00000606 	br	4594c <inet_pton+0x80>
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
   45934:	00800174 	movhi	r2,5
   45938:	10beb404 	addi	r2,r2,-1328
   4593c:	d0a05115 	stw	r2,-32444(gp)
         return 1;
   45940:	00800044 	movi	r2,1
   45944:	00000106 	br	4594c <inet_pton+0x80>
      pton_error = "too short - missing colon?";
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
   45948:	0005883a 	mov	r2,zero
}
   4594c:	e037883a 	mov	sp,fp
   45950:	dfc00117 	ldw	ra,4(sp)
   45954:	df000017 	ldw	fp,0(sp)
   45958:	dec00204 	addi	sp,sp,8
   4595c:	f800283a 	ret

00045960 <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
   45960:	defff804 	addi	sp,sp,-32
   45964:	dfc00715 	stw	ra,28(sp)
   45968:	df000615 	stw	fp,24(sp)
   4596c:	df000604 	addi	fp,sp,24
   45970:	e13ffc15 	stw	r4,-16(fp)
   45974:	e17ffd15 	stw	r5,-12(fp)
   45978:	e1bffe15 	stw	r6,-8(fp)
   4597c:	e1ffff15 	stw	r7,-4(fp)
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
   45980:	e0bffc17 	ldw	r2,-16(fp)
   45984:	10800098 	cmpnei	r2,r2,2
   45988:	1000101e 	bne	r2,zero,459cc <inet_ntop+0x6c>
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
   4598c:	e0bffd17 	ldw	r2,-12(fp)
   45990:	10800017 	ldw	r2,0(r2)
   45994:	e0bffa15 	stw	r2,-24(fp)
      cp = print_ipad(ip4addr);
   45998:	e13ffa17 	ldw	r4,-24(fp)
   4599c:	00265840 	call	26584 <print_ipad>
   459a0:	e0bffb15 	stw	r2,-20(fp)
      if (strlen(cp) < size)
   459a4:	e13ffb17 	ldw	r4,-20(fp)
   459a8:	0008d080 	call	8d08 <strlen>
   459ac:	1007883a 	mov	r3,r2
   459b0:	e0bfff17 	ldw	r2,-4(fp)
   459b4:	1880052e 	bgeu	r3,r2,459cc <inet_ntop+0x6c>
      {
         strcpy(str, cp);
   459b8:	e13ffe17 	ldw	r4,-8(fp)
   459bc:	e17ffb17 	ldw	r5,-20(fp)
   459c0:	000868c0 	call	868c <strcpy>
         return (str);
   459c4:	e0bffe17 	ldw	r2,-8(fp)
   459c8:	00000106 	br	459d0 <inet_ntop+0x70>
         return (str);
      }
   }
#endif

   return ((const char *)NULL);
   459cc:	0005883a 	mov	r2,zero
}
   459d0:	e037883a 	mov	sp,fp
   459d4:	dfc00117 	ldw	ra,4(sp)
   459d8:	df000017 	ldw	fp,0(sp)
   459dc:	dec00204 	addi	sp,sp,8
   459e0:	f800283a 	ret

000459e4 <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
   459e4:	defffc04 	addi	sp,sp,-16
   459e8:	dfc00315 	stw	ra,12(sp)
   459ec:	df000215 	stw	fp,8(sp)
   459f0:	df000204 	addi	fp,sp,8
   459f4:	e13fff15 	stw	r4,-4(fp)
   if (ipaddr->sa_family == AF_INET)
   459f8:	e0bfff17 	ldw	r2,-4(fp)
   459fc:	1080000b 	ldhu	r2,0(r2)
   45a00:	10bfffcc 	andi	r2,r2,65535
   45a04:	10800098 	cmpnei	r2,r2,2
   45a08:	1000071e 	bne	r2,zero,45a28 <print46_addr+0x44>
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
   45a0c:	e0bfff17 	ldw	r2,-4(fp)
   45a10:	e0bffe15 	stw	r2,-8(fp)
      return print_ipad(addr->sin_addr.s_addr);
   45a14:	e0bffe17 	ldw	r2,-8(fp)
   45a18:	10800117 	ldw	r2,4(r2)
   45a1c:	1009883a 	mov	r4,r2
   45a20:	00265840 	call	26584 <print_ipad>
   45a24:	00000106 	br	45a2c <print46_addr+0x48>
      static char namebuf[46];  /* max len of IPv6 addr */
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
   45a28:	0005883a 	mov	r2,zero
}
   45a2c:	e037883a 	mov	sp,fp
   45a30:	dfc00117 	ldw	ra,4(sp)
   45a34:	df000017 	ldw	fp,0(sp)
   45a38:	dec00204 	addi	sp,sp,8
   45a3c:	f800283a 	ret

00045a40 <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
   45a40:	defffb04 	addi	sp,sp,-20
   45a44:	dfc00415 	stw	ra,16(sp)
   45a48:	df000315 	stw	fp,12(sp)
   45a4c:	df000304 	addi	fp,sp,12
   45a50:	e13ffe15 	stw	r4,-8(fp)
   45a54:	e17fff15 	stw	r5,-4(fp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
   45a58:	e0bfff17 	ldw	r2,-4(fp)
   45a5c:	00c00084 	movi	r3,2
   45a60:	10c0000d 	sth	r3,0(r2)

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
   45a64:	e0bffe17 	ldw	r2,-8(fp)
   45a68:	10800044 	addi	r2,r2,1
   45a6c:	10800003 	ldbu	r2,0(r2)
   45a70:	10803fcc 	andi	r2,r2,255
   45a74:	1080201c 	xori	r2,r2,128
   45a78:	10bfe004 	addi	r2,r2,-128
   45a7c:	10800ba0 	cmpeqi	r2,r2,46
   45a80:	1000101e 	bne	r2,zero,45ac4 <inet46_addr+0x84>
   45a84:	e0bffe17 	ldw	r2,-8(fp)
   45a88:	10800084 	addi	r2,r2,2
   45a8c:	10800003 	ldbu	r2,0(r2)
   45a90:	10803fcc 	andi	r2,r2,255
   45a94:	1080201c 	xori	r2,r2,128
   45a98:	10bfe004 	addi	r2,r2,-128
   45a9c:	10800ba0 	cmpeqi	r2,r2,46
   45aa0:	1000081e 	bne	r2,zero,45ac4 <inet46_addr+0x84>
   45aa4:	e0bffe17 	ldw	r2,-8(fp)
   45aa8:	108000c4 	addi	r2,r2,3
   45aac:	10800003 	ldbu	r2,0(r2)
   45ab0:	10803fcc 	andi	r2,r2,255
   45ab4:	1080201c 	xori	r2,r2,128
   45ab8:	10bfe004 	addi	r2,r2,-128
   45abc:	10800b98 	cmpnei	r2,r2,46
   45ac0:	10000a1e 	bne	r2,zero,45aec <inet46_addr+0xac>
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
   45ac4:	e0bfff17 	ldw	r2,-4(fp)
   45ac8:	e0bffd15 	stw	r2,-12(fp)
      addr->sin_addr.s_addr = inet_addr(str);
   45acc:	e13ffe17 	ldw	r4,-8(fp)
   45ad0:	00458200 	call	45820 <inet_addr>
   45ad4:	1007883a 	mov	r3,r2
   45ad8:	e0bffd17 	ldw	r2,-12(fp)
   45adc:	10c00115 	stw	r3,4(r2)
      addr->sin_family = AF_INET;
   45ae0:	e0bffd17 	ldw	r2,-12(fp)
   45ae4:	00c00084 	movi	r3,2
   45ae8:	10c0000d 	sth	r3,0(r2)
      inet_pton(AF_INET6, str, &addr->sin6_addr);
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
   45aec:	0005883a 	mov	r2,zero
}
   45af0:	e037883a 	mov	sp,fp
   45af4:	dfc00117 	ldw	ra,4(sp)
   45af8:	df000017 	ldw	fp,0(sp)
   45afc:	dec00204 	addi	sp,sp,8
   45b00:	f800283a 	ret

00045b04 <inet_setport>:
 *
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
   45b04:	defffc04 	addi	sp,sp,-16
   45b08:	df000315 	stw	fp,12(sp)
   45b0c:	df000304 	addi	fp,sp,12
   45b10:	e13ffe15 	stw	r4,-8(fp)
   45b14:	e17fff15 	stw	r5,-4(fp)
   if (addr->sa_family == AF_INET)
   45b18:	e0bffe17 	ldw	r2,-8(fp)
   45b1c:	1080000b 	ldhu	r2,0(r2)
   45b20:	10bfffcc 	andi	r2,r2,65535
   45b24:	10800098 	cmpnei	r2,r2,2
   45b28:	10000c1e 	bne	r2,zero,45b5c <inet_setport+0x58>
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
   45b2c:	e0bffe17 	ldw	r2,-8(fp)
   45b30:	e0bffd15 	stw	r2,-12(fp)
      si->sin_port = htons(port);  
   45b34:	e0bfff17 	ldw	r2,-4(fp)
   45b38:	1005d23a 	srai	r2,r2,8
   45b3c:	10803fcc 	andi	r2,r2,255
   45b40:	1007883a 	mov	r3,r2
   45b44:	e0bfff17 	ldw	r2,-4(fp)
   45b48:	1004923a 	slli	r2,r2,8
   45b4c:	1884b03a 	or	r2,r3,r2
   45b50:	1007883a 	mov	r3,r2
   45b54:	e0bffd17 	ldw	r2,-12(fp)
   45b58:	10c0008d 	sth	r3,2(r2)
      struct sockaddr_in6 *si = (struct sockaddr_in6 *)addr;
      si->sin6_port = htons(port);
   }
#endif

}
   45b5c:	e037883a 	mov	sp,fp
   45b60:	df000017 	ldw	fp,0(sp)
   45b64:	dec00104 	addi	sp,sp,4
   45b68:	f800283a 	ret

00045b6c <convert_ip>:
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
   45b6c:	defff904 	addi	sp,sp,-28
   45b70:	df000615 	stw	fp,24(sp)
   45b74:	df000604 	addi	fp,sp,24
   45b78:	e13fff15 	stw	r4,-4(fp)
   const char *cp = p;
   45b7c:	e0bfff17 	ldw	r2,-4(fp)
   45b80:	e0bffa15 	stw	r2,-24(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   45b84:	e0bffe04 	addi	r2,fp,-8
   45b88:	e0bffd15 	stw	r2,-12(fp)
   int n = 0;
   45b8c:	e03ffb15 	stw	zero,-20(fp)
   unsigned short v = 0;
   45b90:	e03ffc0d 	sth	zero,-16(fp)
   dw = 0;
   45b94:	e03ffe15 	stw	zero,-8(fp)
   while(*cp)
   45b98:	00003106 	br	45c60 <convert_ip+0xf4>
   {
      if( *cp == '.')
   45b9c:	e0bffa17 	ldw	r2,-24(fp)
   45ba0:	10800003 	ldbu	r2,0(r2)
   45ba4:	10803fcc 	andi	r2,r2,255
   45ba8:	1080201c 	xori	r2,r2,128
   45bac:	10bfe004 	addi	r2,r2,-128
   45bb0:	10800b98 	cmpnei	r2,r2,46
   45bb4:	10000e1e 	bne	r2,zero,45bf0 <convert_ip+0x84>
      {
         lpb[n] = (unsigned char) v;
   45bb8:	e0bffb17 	ldw	r2,-20(fp)
   45bbc:	e0fffd17 	ldw	r3,-12(fp)
   45bc0:	1885883a 	add	r2,r3,r2
   45bc4:	e0fffc0b 	ldhu	r3,-16(fp)
   45bc8:	10c00005 	stb	r3,0(r2)
         v = 0;
   45bcc:	e03ffc0d 	sth	zero,-16(fp)
         n++;
   45bd0:	e0bffb17 	ldw	r2,-20(fp)
   45bd4:	10800044 	addi	r2,r2,1
   45bd8:	e0bffb15 	stw	r2,-20(fp)
         if(n > 3)
   45bdc:	e0bffb17 	ldw	r2,-20(fp)
   45be0:	10800110 	cmplti	r2,r2,4
   45be4:	10001b1e 	bne	r2,zero,45c54 <convert_ip+0xe8>
         {
            return dw;
   45be8:	e0bffe17 	ldw	r2,-8(fp)
   45bec:	00002806 	br	45c90 <convert_ip+0x124>
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
   45bf0:	e0bffa17 	ldw	r2,-24(fp)
   45bf4:	10800003 	ldbu	r2,0(r2)
   45bf8:	10803fcc 	andi	r2,r2,255
   45bfc:	1080201c 	xori	r2,r2,128
   45c00:	10bfe004 	addi	r2,r2,-128
   45c04:	10800c10 	cmplti	r2,r2,48
   45c08:	1000121e 	bne	r2,zero,45c54 <convert_ip+0xe8>
   45c0c:	e0bffa17 	ldw	r2,-24(fp)
   45c10:	10800003 	ldbu	r2,0(r2)
   45c14:	10803fcc 	andi	r2,r2,255
   45c18:	1080201c 	xori	r2,r2,128
   45c1c:	10bfe004 	addi	r2,r2,-128
   45c20:	10800e88 	cmpgei	r2,r2,58
   45c24:	10000b1e 	bne	r2,zero,45c54 <convert_ip+0xe8>
      {
         v = (v * 10) + (*cp - '0');
   45c28:	e0bffc0b 	ldhu	r2,-16(fp)
   45c2c:	108002a4 	muli	r2,r2,10
   45c30:	1007883a 	mov	r3,r2
   45c34:	e0bffa17 	ldw	r2,-24(fp)
   45c38:	10800003 	ldbu	r2,0(r2)
   45c3c:	10803fcc 	andi	r2,r2,255
   45c40:	1080201c 	xori	r2,r2,128
   45c44:	10bfe004 	addi	r2,r2,-128
   45c48:	1885883a 	add	r2,r3,r2
   45c4c:	10bff404 	addi	r2,r2,-48
   45c50:	e0bffc0d 	sth	r2,-16(fp)
      }
      cp++;
   45c54:	e0bffa17 	ldw	r2,-24(fp)
   45c58:	10800044 	addi	r2,r2,1
   45c5c:	e0bffa15 	stw	r2,-24(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
   45c60:	e0bffa17 	ldw	r2,-24(fp)
   45c64:	10800003 	ldbu	r2,0(r2)
   45c68:	10803fcc 	andi	r2,r2,255
   45c6c:	1080201c 	xori	r2,r2,128
   45c70:	10bfe004 	addi	r2,r2,-128
   45c74:	103fc91e 	bne	r2,zero,45b9c <__alt_mem_descriptor_memory+0xdf005b9c>
      {
         v = (v * 10) + (*cp - '0');
      }
      cp++;
   }
   lpb[n] = (unsigned char) v;
   45c78:	e0bffb17 	ldw	r2,-20(fp)
   45c7c:	e0fffd17 	ldw	r3,-12(fp)
   45c80:	1885883a 	add	r2,r3,r2
   45c84:	e0fffc0b 	ldhu	r3,-16(fp)
   45c88:	10c00005 	stb	r3,0(r2)
   return dw;
   45c8c:	e0bffe17 	ldw	r2,-8(fp)
}  /* convert_ip() */
   45c90:	e037883a 	mov	sp,fp
   45c94:	df000017 	ldw	fp,0(sp)
   45c98:	dec00104 	addi	sp,sp,4
   45c9c:	f800283a 	ret

00045ca0 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
   45ca0:	defff704 	addi	sp,sp,-36
   45ca4:	dfc00815 	stw	ra,32(sp)
   45ca8:	df000715 	stw	fp,28(sp)
   45cac:	df000704 	addi	fp,sp,28
   45cb0:	e13fff15 	stw	r4,-4(fp)
   unshort  oldsum;
   unshort  newsum;
   struct tcphdr * tp;

#ifdef MUTE_WARNS    /* stifle compiler warnings */
   tcpdata = (char *)NULL;
   45cb4:	e03ffa15 	stw	zero,-24(fp)
#endif   /* MUTE_WARNS */

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;
   45cb8:	e03ffb05 	stb	zero,-20(fp)

   iphlen = (unshort)ip_hlen(pip);
   45cbc:	e0bfff17 	ldw	r2,-4(fp)
   45cc0:	10800003 	ldbu	r2,0(r2)
   45cc4:	10803fcc 	andi	r2,r2,255
   45cc8:	108003cc 	andi	r2,r2,15
   45ccc:	1085883a 	add	r2,r2,r2
   45cd0:	1085883a 	add	r2,r2,r2
   45cd4:	e0bffc0d 	sth	r2,-16(fp)
   tcplen = htons(pip->ip_len) - iphlen;
   45cd8:	e0bfff17 	ldw	r2,-4(fp)
   45cdc:	1080008b 	ldhu	r2,2(r2)
   45ce0:	10bfffcc 	andi	r2,r2,65535
   45ce4:	1004d23a 	srli	r2,r2,8
   45ce8:	1007883a 	mov	r3,r2
   45cec:	e0bfff17 	ldw	r2,-4(fp)
   45cf0:	1080008b 	ldhu	r2,2(r2)
   45cf4:	10bfffcc 	andi	r2,r2,65535
   45cf8:	1004923a 	slli	r2,r2,8
   45cfc:	1884b03a 	or	r2,r3,r2
   45d00:	1007883a 	mov	r3,r2
   45d04:	e0bffc0b 	ldhu	r2,-16(fp)
   45d08:	1885c83a 	sub	r2,r3,r2
   45d0c:	e0bff90d 	sth	r2,-28(fp)

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
   45d10:	e0bfff17 	ldw	r2,-4(fp)
   45d14:	10800003 	ldbu	r2,0(r2)
   45d18:	10803fcc 	andi	r2,r2,255
   45d1c:	108003cc 	andi	r2,r2,15
   45d20:	1085883a 	add	r2,r2,r2
   45d24:	1085883a 	add	r2,r2,r2
   45d28:	1007883a 	mov	r3,r2
   45d2c:	e0bfff17 	ldw	r2,-4(fp)
   45d30:	10c5883a 	add	r2,r2,r3
   45d34:	e0bffd15 	stw	r2,-12(fp)
   oldsum = tp->th_sum;       /* Save passed checksum */
   45d38:	e0bffd17 	ldw	r2,-12(fp)
   45d3c:	1080040b 	ldhu	r2,16(r2)
   45d40:	e0bffe0d 	sth	r2,-8(fp)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
   45d44:	e0bff90b 	ldhu	r2,-28(fp)
   45d48:	10800184 	addi	r2,r2,6
   45d4c:	1005d23a 	srai	r2,r2,8
   45d50:	10803fcc 	andi	r2,r2,255
   45d54:	1007883a 	mov	r3,r2
   45d58:	e0bff90b 	ldhu	r2,-28(fp)
   45d5c:	10800184 	addi	r2,r2,6
   45d60:	1004923a 	slli	r2,r2,8
   45d64:	1884b03a 	or	r2,r3,r2
   45d68:	1007883a 	mov	r3,r2
   45d6c:	e0bffd17 	ldw	r2,-12(fp)
   45d70:	10c0040d 	sth	r3,16(r2)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
   45d74:	e0bff90b 	ldhu	r2,-28(fp)
   45d78:	1080004c 	andi	r2,r2,1
   45d7c:	10000e26 	beq	r2,zero,45db8 <tcp_cksum+0x118>
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
   45d80:	e0fffc0b 	ldhu	r3,-16(fp)
   45d84:	e0bff90b 	ldhu	r2,-28(fp)
   45d88:	1885883a 	add	r2,r3,r2
   45d8c:	e0ffff17 	ldw	r3,-4(fp)
   45d90:	1885883a 	add	r2,r3,r2
   45d94:	e0bffa15 	stw	r2,-24(fp)
      oddchar = *tcpdata;
   45d98:	e0bffa17 	ldw	r2,-24(fp)
   45d9c:	10800003 	ldbu	r2,0(r2)
   45da0:	e0bffb05 	stb	r2,-20(fp)
      *tcpdata = '\0';        /* zero out pad byte */
   45da4:	e0bffa17 	ldw	r2,-24(fp)
   45da8:	10000005 	stb	zero,0(r2)
      tcplen++;               /* bump length to pass to cksum() */
   45dac:	e0bff90b 	ldhu	r2,-28(fp)
   45db0:	10800044 	addi	r2,r2,1
   45db4:	e0bff90d 	sth	r2,-28(fp)

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
   45db8:	e0bffd17 	ldw	r2,-12(fp)
   45dbc:	10fffe04 	addi	r3,r2,-8
   45dc0:	e0bff90b 	ldhu	r2,-28(fp)
   45dc4:	10800204 	addi	r2,r2,8
   45dc8:	1005d07a 	srai	r2,r2,1
   45dcc:	1809883a 	mov	r4,r3
   45dd0:	100b883a 	mov	r5,r2
   45dd4:	00263480 	call	26348 <cksum>
   45dd8:	0084303a 	nor	r2,zero,r2
   45ddc:	e0bffb8d 	sth	r2,-18(fp)

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
   45de0:	e0fffb8b 	ldhu	r3,-18(fp)
   45de4:	e0bffe0b 	ldhu	r2,-8(fp)
   45de8:	18800726 	beq	r3,r2,45e08 <tcp_cksum+0x168>
   45dec:	e0fffe0b 	ldhu	r3,-8(fp)
   45df0:	00bfffd4 	movui	r2,65535
   45df4:	1880041e 	bne	r3,r2,45e08 <tcp_cksum+0x168>
   45df8:	e0bffb8b 	ldhu	r2,-18(fp)
   45dfc:	1000021e 	bne	r2,zero,45e08 <tcp_cksum+0x168>
      newsum = 0xffff;
   45e00:	00bfffc4 	movi	r2,-1
   45e04:	e0bffb8d 	sth	r2,-18(fp)

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
   45e08:	e0bffd17 	ldw	r2,-12(fp)
   45e0c:	e0fffe0b 	ldhu	r3,-8(fp)
   45e10:	10c0040d 	sth	r3,16(r2)
   if (oddchar)
   45e14:	e0bffb07 	ldb	r2,-20(fp)
   45e18:	10000326 	beq	r2,zero,45e28 <tcp_cksum+0x188>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
   45e1c:	e0bffa17 	ldw	r2,-24(fp)
   45e20:	e0fffb03 	ldbu	r3,-20(fp)
   45e24:	10c00005 	stb	r3,0(r2)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
   45e28:	e0bffb8b 	ldhu	r2,-18(fp)
}
   45e2c:	e037883a 	mov	sp,fp
   45e30:	dfc00117 	ldw	ra,4(sp)
   45e34:	df000017 	ldw	fp,0(sp)
   45e38:	dec00204 	addi	sp,sp,8
   45e3c:	f800283a 	ret

00045e40 <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
   45e40:	defffb04 	addi	sp,sp,-20
   45e44:	dfc00415 	stw	ra,16(sp)
   45e48:	df000315 	stw	fp,12(sp)
   45e4c:	df000304 	addi	fp,sp,12
   45e50:	e13ffe15 	stw	r4,-8(fp)
   45e54:	e17fff15 	stw	r5,-4(fp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
   45e58:	01000b04 	movi	r4,44
   45e5c:	002bce00 	call	2bce0 <npalloc>
   45e60:	e0bffd15 	stw	r2,-12(fp)
   if (inp == 0)
   45e64:	e0bffd17 	ldw	r2,-12(fp)
   45e68:	1000021e 	bne	r2,zero,45e74 <in_pcballoc+0x34>
      return ENOMEM;
   45e6c:	00800304 	movi	r2,12
   45e70:	00001006 	br	45eb4 <in_pcballoc+0x74>
   inp->inp_head = head;
   45e74:	e0bffd17 	ldw	r2,-12(fp)
   45e78:	e0ffff17 	ldw	r3,-4(fp)
   45e7c:	10c00215 	stw	r3,8(r2)
   inp->inp_socket = so;
   45e80:	e0bffd17 	ldw	r2,-12(fp)
   45e84:	e0fffe17 	ldw	r3,-8(fp)
   45e88:	10c00815 	stw	r3,32(r2)

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
   45e8c:	e0bffd17 	ldw	r2,-12(fp)
   45e90:	00c08004 	movi	r3,512
   45e94:	10c00615 	stw	r3,24(r2)
   insque(inp, head);
   45e98:	e13ffd17 	ldw	r4,-12(fp)
   45e9c:	e17fff17 	ldw	r5,-4(fp)
   45ea0:	002c7f40 	call	2c7f4 <insque>
   so->so_pcb = inp;
   45ea4:	e0bffe17 	ldw	r2,-8(fp)
   45ea8:	e0fffd17 	ldw	r3,-12(fp)
   45eac:	10c00115 	stw	r3,4(r2)
   return 0;
   45eb0:	0005883a 	mov	r2,zero
}
   45eb4:	e037883a 	mov	sp,fp
   45eb8:	dfc00117 	ldw	ra,4(sp)
   45ebc:	df000017 	ldw	fp,0(sp)
   45ec0:	dec00204 	addi	sp,sp,8
   45ec4:	f800283a 	ret

00045ec8 <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
   45ec8:	defffc04 	addi	sp,sp,-16
   45ecc:	dfc00315 	stw	ra,12(sp)
   45ed0:	df000215 	stw	fp,8(sp)
   45ed4:	df000204 	addi	fp,sp,8
   45ed8:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  inp->inp_socket;
   45edc:	e0bfff17 	ldw	r2,-4(fp)
   45ee0:	10800817 	ldw	r2,32(r2)
   45ee4:	e0bffe15 	stw	r2,-8(fp)

   so->so_pcb = 0;
   45ee8:	e0bffe17 	ldw	r2,-8(fp)
   45eec:	10000115 	stw	zero,4(r2)
   sofree(so);
   45ef0:	e13ffe17 	ldw	r4,-8(fp)
   45ef4:	002f8500 	call	2f850 <sofree>
   remque(inp);
   45ef8:	e13fff17 	ldw	r4,-4(fp)
   45efc:	002c7880 	call	2c788 <remque>
   INP_FREE (inp);
   45f00:	e13fff17 	ldw	r4,-4(fp)
   45f04:	002bd140 	call	2bd14 <npfree>
}
   45f08:	e037883a 	mov	sp,fp
   45f0c:	dfc00117 	ldw	ra,4(sp)
   45f10:	df000017 	ldw	fp,0(sp)
   45f14:	dec00204 	addi	sp,sp,8
   45f18:	f800283a 	ret

00045f1c <in_pcbbind>:

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
   45f1c:	defff504 	addi	sp,sp,-44
   45f20:	dfc00a15 	stw	ra,40(sp)
   45f24:	df000915 	stw	fp,36(sp)
   45f28:	df000904 	addi	fp,sp,36
   45f2c:	e13ffe15 	stw	r4,-8(fp)
   45f30:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so =  inp->inp_socket;
   45f34:	e0bffe17 	ldw	r2,-8(fp)
   45f38:	10800817 	ldw	r2,32(r2)
   45f3c:	e0bffb15 	stw	r2,-20(fp)
   struct inpcb * head  =  inp->inp_head;
   45f40:	e0bffe17 	ldw	r2,-8(fp)
   45f44:	10800217 	ldw	r2,8(r2)
   45f48:	e0bffc15 	stw	r2,-16(fp)
   struct sockaddr_in * sin;
   u_short  lport =  0;
   45f4c:	e03ff90d 	sth	zero,-28(fp)


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
   45f50:	e0bffe17 	ldw	r2,-8(fp)
   45f54:	1080078b 	ldhu	r2,30(r2)
   45f58:	10bfffcc 	andi	r2,r2,65535
   45f5c:	1000031e 	bne	r2,zero,45f6c <in_pcbbind+0x50>
   45f60:	e0bffe17 	ldw	r2,-8(fp)
   45f64:	10800417 	ldw	r2,16(r2)
   45f68:	10000226 	beq	r2,zero,45f74 <in_pcbbind+0x58>
      return (EINVAL);
   45f6c:	00800584 	movi	r2,22
   45f70:	00006806 	br	46114 <in_pcbbind+0x1f8>
   if (nam == 0)
   45f74:	e0bfff17 	ldw	r2,-4(fp)
   45f78:	1000011e 	bne	r2,zero,45f80 <in_pcbbind+0x64>
      goto noname;
   45f7c:	00003806 	br	46060 <in_pcbbind+0x144>
   sin = mtod(nam, struct sockaddr_in *);
   45f80:	e0bfff17 	ldw	r2,-4(fp)
   45f84:	10800317 	ldw	r2,12(r2)
   45f88:	e0bffd15 	stw	r2,-12(fp)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
   45f8c:	e0bffd17 	ldw	r2,-12(fp)
   45f90:	10800117 	ldw	r2,4(r2)
   45f94:	10000a26 	beq	r2,zero,45fc0 <in_pcbbind+0xa4>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
   45f98:	e0bffd17 	ldw	r2,-12(fp)
   45f9c:	10800117 	ldw	r2,4(r2)
   45fa0:	1009883a 	mov	r4,r2
   45fa4:	003e7c40 	call	3e7c4 <ip_mymach>
   45fa8:	1007883a 	mov	r3,r2
   45fac:	e0bffd17 	ldw	r2,-12(fp)
   45fb0:	10800117 	ldw	r2,4(r2)
   45fb4:	18800226 	beq	r3,r2,45fc0 <in_pcbbind+0xa4>
      return (EADDRNOTAVAIL);
   45fb8:	00801f44 	movi	r2,125
   45fbc:	00005506 	br	46114 <in_pcbbind+0x1f8>
   }
   lport = sin->sin_port;
   45fc0:	e0bffd17 	ldw	r2,-12(fp)
   45fc4:	1080008b 	ldhu	r2,2(r2)
   45fc8:	e0bff90d 	sth	r2,-28(fp)
   if (lport) 
   45fcc:	e0bff90b 	ldhu	r2,-28(fp)
   45fd0:	10001f26 	beq	r2,zero,46050 <in_pcbbind+0x134>
   {
      int   wild  =  0;
   45fd4:	e03ffa15 	stw	zero,-24(fp)

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
   45fd8:	e0bffb17 	ldw	r2,-20(fp)
   45fdc:	10800417 	ldw	r2,16(r2)
   45fe0:	1080010c 	andi	r2,r2,4
   45fe4:	10000c1e 	bne	r2,zero,46018 <in_pcbbind+0xfc>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
   45fe8:	e0bffb17 	ldw	r2,-20(fp)
   45fec:	10800217 	ldw	r2,8(r2)
   45ff0:	1080010b 	ldhu	r2,4(r2)
   45ff4:	10bfffcc 	andi	r2,r2,65535
   45ff8:	1080010c 	andi	r2,r2,4
   if (lport) 
   {
      int   wild  =  0;

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
   45ffc:	10000426 	beq	r2,zero,46010 <in_pcbbind+0xf4>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
          (so->so_options & SO_ACCEPTCONN) == 0))
   46000:	e0bffb17 	ldw	r2,-20(fp)
   46004:	10800417 	ldw	r2,16(r2)
   46008:	1080008c 	andi	r2,r2,2
   {
      int   wild  =  0;

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
   4600c:	1000021e 	bne	r2,zero,46018 <in_pcbbind+0xfc>
          (so->so_options & SO_ACCEPTCONN) == 0))
      {
         wild = INPLOOKUP_WILDCARD;
   46010:	00800044 	movi	r2,1
   46014:	e0bffa15 	stw	r2,-24(fp)
      }
      if (in_pcblookup(head,
   46018:	e0bffd17 	ldw	r2,-12(fp)
   4601c:	10c00117 	ldw	r3,4(r2)
   46020:	e0bff90b 	ldhu	r2,-28(fp)
   46024:	d8800015 	stw	r2,0(sp)
   46028:	e0bffa17 	ldw	r2,-24(fp)
   4602c:	d8800115 	stw	r2,4(sp)
   46030:	e13ffc17 	ldw	r4,-16(fp)
   46034:	000b883a 	mov	r5,zero
   46038:	000d883a 	mov	r6,zero
   4603c:	180f883a 	mov	r7,r3
   46040:	00464580 	call	46458 <in_pcblookup>
   46044:	10000226 	beq	r2,zero,46050 <in_pcbbind+0x134>
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
   46048:	00801c04 	movi	r2,112
   4604c:	00003106 	br	46114 <in_pcbbind+0x1f8>
      }
   }
   inp->inp_laddr = sin->sin_addr;
   46050:	e0bffe17 	ldw	r2,-8(fp)
   46054:	e0fffd17 	ldw	r3,-12(fp)
   46058:	18c00117 	ldw	r3,4(r3)
   4605c:	10c00415 	stw	r3,16(r2)
noname:
   if (lport == 0)
   46060:	e0bff90b 	ldhu	r2,-28(fp)
   46064:	1000271e 	bne	r2,zero,46104 <in_pcbbind+0x1e8>
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
   46068:	e0bffc17 	ldw	r2,-16(fp)
   4606c:	1080078b 	ldhu	r2,30(r2)
   46070:	10c00044 	addi	r3,r2,1
   46074:	1809883a 	mov	r4,r3
   46078:	e0fffc17 	ldw	r3,-16(fp)
   4607c:	1900078d 	sth	r4,30(r3)
   46080:	10bfffcc 	andi	r2,r2,65535
   46084:	10810030 	cmpltui	r2,r2,1024
   46088:	1000051e 	bne	r2,zero,460a0 <in_pcbbind+0x184>
             head->inp_lport > IPPORT_USERRESERVED)
   4608c:	e0bffc17 	ldw	r2,-16(fp)
   46090:	1080078b 	ldhu	r2,30(r2)
noname:
   if (lport == 0)
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
   46094:	10bfffcc 	andi	r2,r2,65535
   46098:	1084e270 	cmpltui	r2,r2,5001
   4609c:	1000031e 	bne	r2,zero,460ac <in_pcbbind+0x190>
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
   460a0:	e0bffc17 	ldw	r2,-16(fp)
   460a4:	00c10004 	movi	r3,1024
   460a8:	10c0078d 	sth	r3,30(r2)
         }
         lport = htons(head->inp_lport);
   460ac:	e0bffc17 	ldw	r2,-16(fp)
   460b0:	1080078b 	ldhu	r2,30(r2)
   460b4:	10bfffcc 	andi	r2,r2,65535
   460b8:	1004d23a 	srli	r2,r2,8
   460bc:	1007883a 	mov	r3,r2
   460c0:	e0bffc17 	ldw	r2,-16(fp)
   460c4:	1080078b 	ldhu	r2,30(r2)
   460c8:	10bfffcc 	andi	r2,r2,65535
   460cc:	1004923a 	slli	r2,r2,8
   460d0:	1884b03a 	or	r2,r3,r2
   460d4:	e0bff90d 	sth	r2,-28(fp)
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
   460d8:	e0bffe17 	ldw	r2,-8(fp)
   460dc:	10c00417 	ldw	r3,16(r2)
   460e0:	e0bff90b 	ldhu	r2,-28(fp)
   460e4:	d8800015 	stw	r2,0(sp)
   460e8:	d8000115 	stw	zero,4(sp)
   460ec:	e13ffc17 	ldw	r4,-16(fp)
   460f0:	000b883a 	mov	r5,zero
   460f4:	000d883a 	mov	r6,zero
   460f8:	180f883a 	mov	r7,r3
   460fc:	00464580 	call	46458 <in_pcblookup>
   46100:	103fd91e 	bne	r2,zero,46068 <__alt_mem_descriptor_memory+0xdf006068>
   }
   inp->inp_lport = lport;
   46104:	e0bffe17 	ldw	r2,-8(fp)
   46108:	e0fff90b 	ldhu	r3,-28(fp)
   4610c:	10c0078d 	sth	r3,30(r2)
   return (0);
   46110:	0005883a 	mov	r2,zero
}
   46114:	e037883a 	mov	sp,fp
   46118:	dfc00117 	ldw	ra,4(sp)
   4611c:	df000017 	ldw	fp,0(sp)
   46120:	dec00204 	addi	sp,sp,8
   46124:	f800283a 	ret

00046128 <in_pcbconnect>:
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
   46128:	defff604 	addi	sp,sp,-40
   4612c:	dfc00915 	stw	ra,36(sp)
   46130:	df000815 	stw	fp,32(sp)
   46134:	df000804 	addi	fp,sp,32
   46138:	e13ffe15 	stw	r4,-8(fp)
   4613c:	e17fff15 	stw	r5,-4(fp)
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
   46140:	e0bfff17 	ldw	r2,-4(fp)
   46144:	10800317 	ldw	r2,12(r2)
   46148:	e0bffb15 	stw	r2,-20(fp)

   if (nam->m_len < sizeof (*sin))
   4614c:	e0bfff17 	ldw	r2,-4(fp)
   46150:	10800217 	ldw	r2,8(r2)
   46154:	10800428 	cmpgeui	r2,r2,16
   46158:	1000021e 	bne	r2,zero,46164 <in_pcbconnect+0x3c>
      return (EINVAL);
   4615c:	00800584 	movi	r2,22
   46160:	00006206 	br	462ec <in_pcbconnect+0x1c4>
   if (sin->sin_family != AF_INET)
   46164:	e0bffb17 	ldw	r2,-20(fp)
   46168:	1080000b 	ldhu	r2,0(r2)
   4616c:	10bfffcc 	andi	r2,r2,65535
   46170:	10a0001c 	xori	r2,r2,32768
   46174:	10a00004 	addi	r2,r2,-32768
   46178:	108000a0 	cmpeqi	r2,r2,2
   4617c:	1000021e 	bne	r2,zero,46188 <in_pcbconnect+0x60>
      return (EAFNOSUPPORT);
   46180:	00801a84 	movi	r2,106
   46184:	00005906 	br	462ec <in_pcbconnect+0x1c4>
   if (sin->sin_port == 0)
   46188:	e0bffb17 	ldw	r2,-20(fp)
   4618c:	1080008b 	ldhu	r2,2(r2)
   46190:	10bfffcc 	andi	r2,r2,65535
   46194:	1000021e 	bne	r2,zero,461a0 <in_pcbconnect+0x78>
      return (EADDRNOTAVAIL);
   46198:	00801f44 	movi	r2,125
   4619c:	00005306 	br	462ec <in_pcbconnect+0x1c4>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
   461a0:	e0bffb17 	ldw	r2,-20(fp)
   461a4:	10800117 	ldw	r2,4(r2)
   461a8:	10000d1e 	bne	r2,zero,461e0 <in_pcbconnect+0xb8>
   {
      if (inp && inp->ifp)
   461ac:	e0bffe17 	ldw	r2,-8(fp)
   461b0:	10000926 	beq	r2,zero,461d8 <in_pcbconnect+0xb0>
   461b4:	e0bffe17 	ldw	r2,-8(fp)
   461b8:	10800a17 	ldw	r2,40(r2)
   461bc:	10000626 	beq	r2,zero,461d8 <in_pcbconnect+0xb0>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
   461c0:	e0bffe17 	ldw	r2,-8(fp)
   461c4:	10800a17 	ldw	r2,40(r2)
   461c8:	10c00a17 	ldw	r3,40(r2)
   461cc:	e0bffb17 	ldw	r2,-20(fp)
   461d0:	10c00115 	stw	r3,4(r2)
   461d4:	00000806 	br	461f8 <in_pcbconnect+0xd0>
      else
         return (EADDRNOTAVAIL);
   461d8:	00801f44 	movi	r2,125
   461dc:	00004306 	br	462ec <in_pcbconnect+0x1c4>
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
   461e0:	e0bffb17 	ldw	r2,-20(fp)
   461e4:	10800117 	ldw	r2,4(r2)
   461e8:	10bfffd8 	cmpnei	r2,r2,-1
   461ec:	1000021e 	bne	r2,zero,461f8 <in_pcbconnect+0xd0>
      return (EADDRNOTAVAIL);
   461f0:	00801f44 	movi	r2,125
   461f4:	00003d06 	br	462ec <in_pcbconnect+0x1c4>


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
   461f8:	e0bffe17 	ldw	r2,-8(fp)
   461fc:	10800417 	ldw	r2,16(r2)
   46200:	10000f1e 	bne	r2,zero,46240 <in_pcbconnect+0x118>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
   46204:	e0bffb17 	ldw	r2,-20(fp)
   46208:	10c00117 	ldw	r3,4(r2)
   4620c:	e0bffd04 	addi	r2,fp,-12
   46210:	1809883a 	mov	r4,r3
   46214:	100b883a 	mov	r5,r2
   46218:	003eaf40 	call	3eaf4 <iproute>
   4621c:	e0bffc15 	stw	r2,-16(fp)
      if (!npnet)
   46220:	e0bffc17 	ldw	r2,-16(fp)
   46224:	1000021e 	bne	r2,zero,46230 <in_pcbconnect+0x108>
         return EADDRNOTAVAIL;
   46228:	00801f44 	movi	r2,125
   4622c:	00002f06 	br	462ec <in_pcbconnect+0x1c4>
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
   46230:	e0bffc17 	ldw	r2,-16(fp)
   46234:	10800a17 	ldw	r2,40(r2)
   46238:	e0bffa15 	stw	r2,-24(fp)
   4623c:	00000306 	br	4624c <in_pcbconnect+0x124>
#else    /* not netport MULTI_HOMED, use 0th (only) iface */
      ifaddr = nets[0]->n_ipaddr;
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */
   46240:	e0bffe17 	ldw	r2,-8(fp)
   46244:	10800417 	ldw	r2,16(r2)
   46248:	e0bffa15 	stw	r2,-24(fp)

   if (in_pcblookup(inp->inp_head,
   4624c:	e0bffe17 	ldw	r2,-8(fp)
   46250:	11000217 	ldw	r4,8(r2)
   46254:	e0bffb17 	ldw	r2,-20(fp)
   46258:	11400117 	ldw	r5,4(r2)
       sin->sin_addr.s_addr,
       sin->sin_port,
   4625c:	e0bffb17 	ldw	r2,-20(fp)
   46260:	1080008b 	ldhu	r2,2(r2)
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */

   if (in_pcblookup(inp->inp_head,
   46264:	10ffffcc 	andi	r3,r2,65535
       sin->sin_addr.s_addr,
       sin->sin_port,
       ifaddr,
       inp->inp_lport,
   46268:	e0bffe17 	ldw	r2,-8(fp)
   4626c:	1080078b 	ldhu	r2,30(r2)
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */

   if (in_pcblookup(inp->inp_head,
   46270:	10bfffcc 	andi	r2,r2,65535
   46274:	d8800015 	stw	r2,0(sp)
   46278:	d8000115 	stw	zero,4(sp)
   4627c:	180d883a 	mov	r6,r3
   46280:	e1fffa17 	ldw	r7,-24(fp)
   46284:	00464580 	call	46458 <in_pcblookup>
   46288:	10000226 	beq	r2,zero,46294 <in_pcbconnect+0x16c>
       sin->sin_port,
       ifaddr,
       inp->inp_lport,
       0))
   {
      return (EADDRINUSE);
   4628c:	00801c04 	movi	r2,112
   46290:	00001606 	br	462ec <in_pcbconnect+0x1c4>
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
   46294:	e0bffe17 	ldw	r2,-8(fp)
   46298:	10800417 	ldw	r2,16(r2)
   4629c:	10000a1e 	bne	r2,zero,462c8 <in_pcbconnect+0x1a0>
   {
      if (inp->inp_lport == 0)
   462a0:	e0bffe17 	ldw	r2,-8(fp)
   462a4:	1080078b 	ldhu	r2,30(r2)
   462a8:	10bfffcc 	andi	r2,r2,65535
   462ac:	1000031e 	bne	r2,zero,462bc <in_pcbconnect+0x194>
         (void)in_pcbbind(inp, (struct mbuf *)0);
   462b0:	e13ffe17 	ldw	r4,-8(fp)
   462b4:	000b883a 	mov	r5,zero
   462b8:	0045f1c0 	call	45f1c <in_pcbbind>
      inp->inp_laddr.s_addr = ifaddr;
   462bc:	e0bffe17 	ldw	r2,-8(fp)
   462c0:	e0fffa17 	ldw	r3,-24(fp)
   462c4:	10c00415 	stw	r3,16(r2)
   }
   inp->inp_faddr = sin->sin_addr;
   462c8:	e0bffe17 	ldw	r2,-8(fp)
   462cc:	e0fffb17 	ldw	r3,-20(fp)
   462d0:	18c00117 	ldw	r3,4(r3)
   462d4:	10c00315 	stw	r3,12(r2)
   inp->inp_fport = sin->sin_port;
   462d8:	e0bffb17 	ldw	r2,-20(fp)
   462dc:	10c0008b 	ldhu	r3,2(r2)
   462e0:	e0bffe17 	ldw	r2,-8(fp)
   462e4:	10c0070d 	sth	r3,28(r2)
   return 0;
   462e8:	0005883a 	mov	r2,zero
}
   462ec:	e037883a 	mov	sp,fp
   462f0:	dfc00117 	ldw	ra,4(sp)
   462f4:	df000017 	ldw	fp,0(sp)
   462f8:	dec00204 	addi	sp,sp,8
   462fc:	f800283a 	ret

00046300 <in_pcbdisconnect>:
 * RETURNS: 
 */

void
in_pcbdisconnect(struct inpcb * inp)
{
   46300:	defffd04 	addi	sp,sp,-12
   46304:	dfc00215 	stw	ra,8(sp)
   46308:	df000115 	stw	fp,4(sp)
   4630c:	df000104 	addi	fp,sp,4
   46310:	e13fff15 	stw	r4,-4(fp)

   inp->inp_faddr.s_addr = INADDR_ANY;
   46314:	e0bfff17 	ldw	r2,-4(fp)
   46318:	10000315 	stw	zero,12(r2)
   inp->inp_fport = 0;
   4631c:	e0bfff17 	ldw	r2,-4(fp)
   46320:	1000070d 	sth	zero,28(r2)
   if (inp->inp_socket->so_state & SS_NOFDREF)
   46324:	e0bfff17 	ldw	r2,-4(fp)
   46328:	10800817 	ldw	r2,32(r2)
   4632c:	1080088b 	ldhu	r2,34(r2)
   46330:	10bfffcc 	andi	r2,r2,65535
   46334:	1080004c 	andi	r2,r2,1
   46338:	10000226 	beq	r2,zero,46344 <in_pcbdisconnect+0x44>
      in_pcbdetach (inp);
   4633c:	e13fff17 	ldw	r4,-4(fp)
   46340:	0045ec80 	call	45ec8 <in_pcbdetach>
}
   46344:	e037883a 	mov	sp,fp
   46348:	dfc00117 	ldw	ra,4(sp)
   4634c:	df000017 	ldw	fp,0(sp)
   46350:	dec00204 	addi	sp,sp,8
   46354:	f800283a 	ret

00046358 <in_setsockaddr>:
 */

void
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
   46358:	defffb04 	addi	sp,sp,-20
   4635c:	dfc00415 	stw	ra,16(sp)
   46360:	df000315 	stw	fp,12(sp)
   46364:	df000304 	addi	fp,sp,12
   46368:	e13ffe15 	stw	r4,-8(fp)
   4636c:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   46370:	e0bfff17 	ldw	r2,-4(fp)
   46374:	00c00404 	movi	r3,16
   46378:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
   4637c:	e0bfff17 	ldw	r2,-4(fp)
   46380:	10800317 	ldw	r2,12(r2)
   46384:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
   46388:	e13ffd17 	ldw	r4,-12(fp)
   4638c:	000b883a 	mov	r5,zero
   46390:	01800404 	movi	r6,16
   46394:	0007f240 	call	7f24 <memset>
   sin->sin_family = AF_INET;
   46398:	e0bffd17 	ldw	r2,-12(fp)
   4639c:	00c00084 	movi	r3,2
   463a0:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_lport;
   463a4:	e0bffe17 	ldw	r2,-8(fp)
   463a8:	10c0078b 	ldhu	r3,30(r2)
   463ac:	e0bffd17 	ldw	r2,-12(fp)
   463b0:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_laddr;
   463b4:	e0bffd17 	ldw	r2,-12(fp)
   463b8:	e0fffe17 	ldw	r3,-8(fp)
   463bc:	18c00417 	ldw	r3,16(r3)
   463c0:	10c00115 	stw	r3,4(r2)
}
   463c4:	e037883a 	mov	sp,fp
   463c8:	dfc00117 	ldw	ra,4(sp)
   463cc:	df000017 	ldw	fp,0(sp)
   463d0:	dec00204 	addi	sp,sp,8
   463d4:	f800283a 	ret

000463d8 <in_setpeeraddr>:

void
in_setpeeraddr(
   struct inpcb * inp,
   struct mbuf *  nam)
{
   463d8:	defffb04 	addi	sp,sp,-20
   463dc:	dfc00415 	stw	ra,16(sp)
   463e0:	df000315 	stw	fp,12(sp)
   463e4:	df000304 	addi	fp,sp,12
   463e8:	e13ffe15 	stw	r4,-8(fp)
   463ec:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   463f0:	e0bfff17 	ldw	r2,-4(fp)
   463f4:	00c00404 	movi	r3,16
   463f8:	10c00215 	stw	r3,8(r2)
   sin = mtod(nam, struct sockaddr_in *);
   463fc:	e0bfff17 	ldw	r2,-4(fp)
   46400:	10800317 	ldw	r2,12(r2)
   46404:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
   46408:	e13ffd17 	ldw	r4,-12(fp)
   4640c:	000b883a 	mov	r5,zero
   46410:	01800404 	movi	r6,16
   46414:	0007f240 	call	7f24 <memset>
   sin->sin_family = AF_INET;
   46418:	e0bffd17 	ldw	r2,-12(fp)
   4641c:	00c00084 	movi	r3,2
   46420:	10c0000d 	sth	r3,0(r2)
   sin->sin_port = inp->inp_fport;
   46424:	e0bffe17 	ldw	r2,-8(fp)
   46428:	10c0070b 	ldhu	r3,28(r2)
   4642c:	e0bffd17 	ldw	r2,-12(fp)
   46430:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_faddr;
   46434:	e0bffd17 	ldw	r2,-12(fp)
   46438:	e0fffe17 	ldw	r3,-8(fp)
   4643c:	18c00317 	ldw	r3,12(r3)
   46440:	10c00115 	stw	r3,4(r2)
}
   46444:	e037883a 	mov	sp,fp
   46448:	dfc00117 	ldw	ra,4(sp)
   4644c:	df000017 	ldw	fp,0(sp)
   46450:	dec00204 	addi	sp,sp,8
   46454:	f800283a 	ret

00046458 <in_pcblookup>:
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
   46458:	defff504 	addi	sp,sp,-44
   4645c:	df000a15 	stw	fp,40(sp)
   46460:	df000a04 	addi	fp,sp,40
   46464:	e13ffb15 	stw	r4,-20(fp)
   46468:	e17ffc15 	stw	r5,-16(fp)
   4646c:	3007883a 	mov	r3,r6
   46470:	e1fffe15 	stw	r7,-8(fp)
   46474:	e0800117 	ldw	r2,4(fp)
   46478:	e0fffd0d 	sth	r3,-12(fp)
   4647c:	e0bfff0d 	sth	r2,-4(fp)
   struct inpcb * inp, *   match =  0;
   46480:	e03ff715 	stw	zero,-36(fp)
   unshort  fport =  xfport; 
   46484:	e0bffd0b 	ldhu	r2,-12(fp)
   46488:	e0bffa0d 	sth	r2,-24(fp)
   unshort  lport =  xlport;
   4648c:	e0bfff0b 	ldhu	r2,-4(fp)
   46490:	e0bffa8d 	sth	r2,-22(fp)
   int   matchwild   =  3;
   46494:	008000c4 	movi	r2,3
   46498:	e0bff815 	stw	r2,-32(fp)
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
   4649c:	e0bffb17 	ldw	r2,-20(fp)
   464a0:	10800017 	ldw	r2,0(r2)
   464a4:	e0bff615 	stw	r2,-40(fp)
   464a8:	00004b06 	br	465d8 <in_pcblookup+0x180>
   {
      if (inp->inp_lport != lport)
   464ac:	e0bff617 	ldw	r2,-40(fp)
   464b0:	1080078b 	ldhu	r2,30(r2)
   464b4:	10ffffcc 	andi	r3,r2,65535
   464b8:	e0bffa8b 	ldhu	r2,-22(fp)
   464bc:	18800126 	beq	r3,r2,464c4 <in_pcblookup+0x6c>
         continue;
   464c0:	00004206 	br	465cc <in_pcblookup+0x174>

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
   464c4:	e0bff617 	ldw	r2,-40(fp)
   464c8:	10800817 	ldw	r2,32(r2)
   464cc:	10800517 	ldw	r2,20(r2)
   464d0:	108000a0 	cmpeqi	r2,r2,2
   464d4:	1000011e 	bne	r2,zero,464dc <in_pcblookup+0x84>
         continue;
   464d8:	00003c06 	br	465cc <in_pcblookup+0x174>

      wildcard = 0;
   464dc:	e03ff915 	stw	zero,-28(fp)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
   464e0:	e0bff617 	ldw	r2,-40(fp)
   464e4:	10800417 	ldw	r2,16(r2)
   464e8:	10000b26 	beq	r2,zero,46518 <in_pcblookup+0xc0>
      {
         if (laddr == INADDR_ANY)
   464ec:	e0bffe17 	ldw	r2,-8(fp)
   464f0:	1000041e 	bne	r2,zero,46504 <in_pcblookup+0xac>
            wildcard++;
   464f4:	e0bff917 	ldw	r2,-28(fp)
   464f8:	10800044 	addi	r2,r2,1
   464fc:	e0bff915 	stw	r2,-28(fp)
   46500:	00000a06 	br	4652c <in_pcblookup+0xd4>
         else if (inp->inp_laddr.s_addr != laddr)
   46504:	e0bff617 	ldw	r2,-40(fp)
   46508:	10c00417 	ldw	r3,16(r2)
   4650c:	e0bffe17 	ldw	r2,-8(fp)
   46510:	18800626 	beq	r3,r2,4652c <in_pcblookup+0xd4>
            continue;
   46514:	00002d06 	br	465cc <in_pcblookup+0x174>
      }
      else 
      {
         if (laddr != INADDR_ANY)
   46518:	e0bffe17 	ldw	r2,-8(fp)
   4651c:	10000326 	beq	r2,zero,4652c <in_pcblookup+0xd4>
            wildcard++;
   46520:	e0bff917 	ldw	r2,-28(fp)
   46524:	10800044 	addi	r2,r2,1
   46528:	e0bff915 	stw	r2,-28(fp)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
   4652c:	e0bff617 	ldw	r2,-40(fp)
   46530:	10800317 	ldw	r2,12(r2)
   46534:	10001026 	beq	r2,zero,46578 <in_pcblookup+0x120>
      {
         if (faddr == INADDR_ANY)
   46538:	e0bffc17 	ldw	r2,-16(fp)
   4653c:	1000041e 	bne	r2,zero,46550 <in_pcblookup+0xf8>
            wildcard++;
   46540:	e0bff917 	ldw	r2,-28(fp)
   46544:	10800044 	addi	r2,r2,1
   46548:	e0bff915 	stw	r2,-28(fp)
   4654c:	00000f06 	br	4658c <in_pcblookup+0x134>
         else if (inp->inp_faddr.s_addr != faddr ||
   46550:	e0bff617 	ldw	r2,-40(fp)
   46554:	10c00317 	ldw	r3,12(r2)
   46558:	e0bffc17 	ldw	r2,-16(fp)
   4655c:	1880051e 	bne	r3,r2,46574 <in_pcblookup+0x11c>
             inp->inp_fport != fport)
   46560:	e0bff617 	ldw	r2,-40(fp)
   46564:	1080070b 	ldhu	r2,28(r2)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
      {
         if (faddr == INADDR_ANY)
            wildcard++;
         else if (inp->inp_faddr.s_addr != faddr ||
   46568:	10ffffcc 	andi	r3,r2,65535
   4656c:	e0bffa0b 	ldhu	r2,-24(fp)
   46570:	18800626 	beq	r3,r2,4658c <in_pcblookup+0x134>
             inp->inp_fport != fport)
         {
            continue;
   46574:	00001506 	br	465cc <in_pcblookup+0x174>
         }
      } else 
      {
         if (faddr != INADDR_ANY)
   46578:	e0bffc17 	ldw	r2,-16(fp)
   4657c:	10000326 	beq	r2,zero,4658c <in_pcblookup+0x134>
            wildcard++;
   46580:	e0bff917 	ldw	r2,-28(fp)
   46584:	10800044 	addi	r2,r2,1
   46588:	e0bff915 	stw	r2,-28(fp)
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
   4658c:	e0bff917 	ldw	r2,-28(fp)
   46590:	10000426 	beq	r2,zero,465a4 <in_pcblookup+0x14c>
   46594:	e0800217 	ldw	r2,8(fp)
   46598:	1080004c 	andi	r2,r2,1
   4659c:	1000011e 	bne	r2,zero,465a4 <in_pcblookup+0x14c>
         continue;
   465a0:	00000a06 	br	465cc <in_pcblookup+0x174>
      if (wildcard < matchwild) 
   465a4:	e0fff917 	ldw	r3,-28(fp)
   465a8:	e0bff817 	ldw	r2,-32(fp)
   465ac:	1880070e 	bge	r3,r2,465cc <in_pcblookup+0x174>
      {
         match = inp;
   465b0:	e0bff617 	ldw	r2,-40(fp)
   465b4:	e0bff715 	stw	r2,-36(fp)
         matchwild = wildcard;
   465b8:	e0bff917 	ldw	r2,-28(fp)
   465bc:	e0bff815 	stw	r2,-32(fp)
         if (matchwild == 0)
   465c0:	e0bff817 	ldw	r2,-32(fp)
   465c4:	1000011e 	bne	r2,zero,465cc <in_pcblookup+0x174>
            break;
   465c8:	00000606 	br	465e4 <in_pcblookup+0x18c>
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
   465cc:	e0bff617 	ldw	r2,-40(fp)
   465d0:	10800017 	ldw	r2,0(r2)
   465d4:	e0bff615 	stw	r2,-40(fp)
   465d8:	e0fff617 	ldw	r3,-40(fp)
   465dc:	e0bffb17 	ldw	r2,-20(fp)
   465e0:	18bfb21e 	bne	r3,r2,464ac <__alt_mem_descriptor_memory+0xdf0064ac>
         matchwild = wildcard;
         if (matchwild == 0)
            break;
      }
   }
   if (match == NULL)
   465e4:	e0bff717 	ldw	r2,-36(fp)
   465e8:	1000021e 	bne	r2,zero,465f4 <in_pcblookup+0x19c>
      return match;
   465ec:	e0bff717 	ldw	r2,-36(fp)
   465f0:	00002406 	br	46684 <in_pcblookup+0x22c>

   if (head->inp_next == match)  /* got cache hit? */
   465f4:	e0bffb17 	ldw	r2,-20(fp)
   465f8:	10c00017 	ldw	r3,0(r2)
   465fc:	e0bff717 	ldw	r2,-36(fp)
   46600:	1880041e 	bne	r3,r2,46614 <in_pcblookup+0x1bc>
   {
      inpcb_cachehits++;
   46604:	d0a8be17 	ldw	r2,-23816(gp)
   46608:	10800044 	addi	r2,r2,1
   4660c:	d0a8be15 	stw	r2,-23816(gp)
   46610:	00001b06 	br	46680 <in_pcblookup+0x228>
   }
   else
   {
      inpcb_cachemiss++;
   46614:	d0a8bf17 	ldw	r2,-23812(gp)
   46618:	10800044 	addi	r2,r2,1
   4661c:	d0a8bf15 	stw	r2,-23812(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
   46620:	e0bff717 	ldw	r2,-36(fp)
   46624:	10800017 	ldw	r2,0(r2)
   46628:	e0fff717 	ldw	r3,-36(fp)
   4662c:	18c00117 	ldw	r3,4(r3)
   46630:	10c00115 	stw	r3,4(r2)
      match->inp_prev->inp_next = match->inp_next;
   46634:	e0bff717 	ldw	r2,-36(fp)
   46638:	10800117 	ldw	r2,4(r2)
   4663c:	e0fff717 	ldw	r3,-36(fp)
   46640:	18c00017 	ldw	r3,0(r3)
   46644:	10c00015 	stw	r3,0(r2)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
   46648:	e0bffb17 	ldw	r2,-20(fp)
   4664c:	10c00017 	ldw	r3,0(r2)
   46650:	e0bff717 	ldw	r2,-36(fp)
   46654:	10c00015 	stw	r3,0(r2)
      head->inp_next = match;
   46658:	e0bffb17 	ldw	r2,-20(fp)
   4665c:	e0fff717 	ldw	r3,-36(fp)
   46660:	10c00015 	stw	r3,0(r2)
      match->inp_prev = head;
   46664:	e0bff717 	ldw	r2,-36(fp)
   46668:	e0fffb17 	ldw	r3,-20(fp)
   4666c:	10c00115 	stw	r3,4(r2)
      match->inp_next->inp_prev = match;
   46670:	e0bff717 	ldw	r2,-36(fp)
   46674:	10800017 	ldw	r2,0(r2)
   46678:	e0fff717 	ldw	r3,-36(fp)
   4667c:	10c00115 	stw	r3,4(r2)
   }
   return (match);
   46680:	e0bff717 	ldw	r2,-36(fp)
}
   46684:	e037883a 	mov	sp,fp
   46688:	df000017 	ldw	fp,0(sp)
   4668c:	dec00104 	addi	sp,sp,4
   46690:	f800283a 	ret

00046694 <set_vfopen_error>:
 *
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
   46694:	defffe04 	addi	sp,sp,-8
   46698:	df000115 	stw	fp,4(sp)
   4669c:	df000104 	addi	fp,sp,4
   466a0:	e13fff15 	stw	r4,-4(fp)
   vfopen_error = error;
   466a4:	e0bfff17 	ldw	r2,-4(fp)
   466a8:	d0a8c315 	stw	r2,-23796(gp)
}
   466ac:	e037883a 	mov	sp,fp
   466b0:	df000017 	ldw	fp,0(sp)
   466b4:	dec00104 	addi	sp,sp,4
   466b8:	f800283a 	ret

000466bc <get_vfopen_error>:
 *
 * RETURNS: 
 */

int get_vfopen_error()
{
   466bc:	deffff04 	addi	sp,sp,-4
   466c0:	df000015 	stw	fp,0(sp)
   466c4:	d839883a 	mov	fp,sp
   return vfopen_error;
   466c8:	d0a8c317 	ldw	r2,-23796(gp)
}
   466cc:	e037883a 	mov	sp,fp
   466d0:	df000017 	ldw	fp,0(sp)
   466d4:	dec00104 	addi	sp,sp,4
   466d8:	f800283a 	ret

000466dc <vf_alloc_and_link_vop>:
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
   466dc:	defffd04 	addi	sp,sp,-12
   466e0:	dfc00215 	stw	ra,8(sp)
   466e4:	df000115 	stw	fp,4(sp)
   466e8:	df000104 	addi	fp,sp,4
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
   466ec:	d0a8c517 	ldw	r2,-23788(gp)
   466f0:	10803ff0 	cmpltui	r2,r2,255
   466f4:	1000021e 	bne	r2,zero,46700 <vf_alloc_and_link_vop+0x24>
   {
#ifdef VFS_VERBOSE
      dprintf("vfs_open_files too big (%ld) in vf_alloc_and_link_vop()\n",
       vfs_open_files);
#endif   /* VFS_VERBOSE */
      return NULL;
   466f8:	0005883a 	mov	r2,zero
   466fc:	00000e06 	br	46738 <vf_alloc_and_link_vop+0x5c>
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
   46700:	01000504 	movi	r4,20
   46704:	002bce00 	call	2bce0 <npalloc>
   46708:	e0bfff15 	stw	r2,-4(fp)

   /* if the allocation succeeded */
   if (vop)
   4670c:	e0bfff17 	ldw	r2,-4(fp)
   46710:	10000826 	beq	r2,zero,46734 <vf_alloc_and_link_vop+0x58>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
   46714:	d0e8c117 	ldw	r3,-23804(gp)
   46718:	e0bfff17 	ldw	r2,-4(fp)
   4671c:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
   46720:	e0bfff17 	ldw	r2,-4(fp)
   46724:	d0a8c115 	stw	r2,-23804(gp)
      /* increment the count of open files */
      vfs_open_files++;
   46728:	d0a8c517 	ldw	r2,-23788(gp)
   4672c:	10800044 	addi	r2,r2,1
   46730:	d0a8c515 	stw	r2,-23788(gp)
#ifdef VFS_VERBOSE
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
   46734:	e0bfff17 	ldw	r2,-4(fp)
}
   46738:	e037883a 	mov	sp,fp
   4673c:	dfc00117 	ldw	ra,4(sp)
   46740:	df000017 	ldw	fp,0(sp)
   46744:	dec00204 	addi	sp,sp,8
   46748:	f800283a 	ret

0004674c <vf_alloc_buffer>:
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
   4674c:	defff904 	addi	sp,sp,-28
   46750:	dfc00615 	stw	ra,24(sp)
   46754:	df000515 	stw	fp,20(sp)
   46758:	df000504 	addi	fp,sp,20
   4675c:	e13fff15 	stw	r4,-4(fp)
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
   46760:	d0e8c617 	ldw	r3,-23784(gp)
   46764:	e0bfff17 	ldw	r2,-4(fp)
   46768:	1885883a 	add	r2,r3,r2
   4676c:	00ffffd4 	movui	r3,65535
   46770:	1880022e 	bgeu	r3,r2,4677c <vf_alloc_buffer+0x30>
      return NULL;
   46774:	0005883a 	mov	r2,zero
   46778:	00002106 	br	46800 <vf_alloc_buffer+0xb4>
    * any bigger than what will fit in an unsigned int 
    */
#ifdef MUTE_WARNS
   /* the idiotic hoops you got to jump through to suppress compiler
      warnings */
   long_size   =  sizeof(unsigned   long);
   4677c:	00800104 	movi	r2,4
   46780:	e0bffb15 	stw	r2,-20(fp)
   int_size = sizeof(unsigned int);
   46784:	00800104 	movi	r2,4
   46788:	e0bffc15 	stw	r2,-16(fp)
   if (long_size > int_size)
   4678c:	e0bffb17 	ldw	r2,-20(fp)
   46790:	e0fffc17 	ldw	r3,-16(fp)
   46794:	1880102e 	bgeu	r3,r2,467d8 <vf_alloc_buffer+0x8c>
       * most systems where this "if" expression will evaluate to 
       * true (2 byte ints, 4 byte longs). if any of those upper bits 
       * are on in your requested size, you otta luck.
       */
#ifdef MUTE_WARNS
      switch (int_size)
   46798:	e0bffc17 	ldw	r2,-16(fp)
   4679c:	108000a0 	cmpeqi	r2,r2,2
   467a0:	10000826 	beq	r2,zero,467c4 <vf_alloc_buffer+0x78>
#else
      switch (sizeof(unsigned int))
#endif   /* MUTE_WARNS */
      {
      case 2 :
         mem_mask = 0xffff0000;
   467a4:	00bffff4 	movhi	r2,65535
   467a8:	e0bffd15 	stw	r2,-12(fp)
         break;
   467ac:	0001883a 	nop
         default :
            dtrap();    /* you have a weird compiler */
         return NULL;
      }

      if (size & mem_mask)
   467b0:	e0ffff17 	ldw	r3,-4(fp)
   467b4:	e0bffd17 	ldw	r2,-12(fp)
   467b8:	1884703a 	and	r2,r3,r2
   467bc:	10000626 	beq	r2,zero,467d8 <vf_alloc_buffer+0x8c>
   467c0:	00000306 	br	467d0 <vf_alloc_buffer+0x84>
      {
      case 2 :
         mem_mask = 0xffff0000;
         break;
         default :
            dtrap();    /* you have a weird compiler */
   467c4:	002b0f40 	call	2b0f4 <dtrap>
         return NULL;
   467c8:	0005883a 	mov	r2,zero
   467cc:	00000c06 	br	46800 <vf_alloc_buffer+0xb4>
      }

      if (size & mem_mask)
         return NULL;
   467d0:	0005883a 	mov	r2,zero
   467d4:	00000a06 	br	46800 <vf_alloc_buffer+0xb4>
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
   467d8:	e13fff17 	ldw	r4,-4(fp)
   467dc:	002bce00 	call	2bce0 <npalloc>
   467e0:	e0bffe15 	stw	r2,-8(fp)

   /* if the allocation succeeded */
   if (buffer)
   467e4:	e0bffe17 	ldw	r2,-8(fp)
   467e8:	10000426 	beq	r2,zero,467fc <vf_alloc_buffer+0xb0>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
   467ec:	d0e8c617 	ldw	r3,-23784(gp)
   467f0:	e0bfff17 	ldw	r2,-4(fp)
   467f4:	1885883a 	add	r2,r3,r2
   467f8:	d0a8c615 	stw	r2,-23784(gp)
   }

   return buffer;
   467fc:	e0bffe17 	ldw	r2,-8(fp)
}
   46800:	e037883a 	mov	sp,fp
   46804:	dfc00117 	ldw	ra,4(sp)
   46808:	df000017 	ldw	fp,0(sp)
   4680c:	dec00204 	addi	sp,sp,8
   46810:	f800283a 	ret

00046814 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
   46814:	defffc04 	addi	sp,sp,-16
   46818:	dfc00315 	stw	ra,12(sp)
   4681c:	df000215 	stw	fp,8(sp)
   46820:	df000204 	addi	fp,sp,8
   46824:	e13ffe15 	stw	r4,-8(fp)
   46828:	e17fff15 	stw	r5,-4(fp)
   /* free the buffer */
   if (buffer)
   4682c:	e0bffe17 	ldw	r2,-8(fp)
   46830:	10000226 	beq	r2,zero,4683c <vf_free_buffer+0x28>
      npfree(buffer);
   46834:	e13ffe17 	ldw	r4,-8(fp)
   46838:	002bd140 	call	2bd14 <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
   4683c:	d0e8c617 	ldw	r3,-23784(gp)
   46840:	e0bfff17 	ldw	r2,-4(fp)
   46844:	1885c83a 	sub	r2,r3,r2
   46848:	d0a8c615 	stw	r2,-23784(gp)
}
   4684c:	e037883a 	mov	sp,fp
   46850:	dfc00117 	ldw	ra,4(sp)
   46854:	df000017 	ldw	fp,0(sp)
   46858:	dec00204 	addi	sp,sp,8
   4685c:	f800283a 	ret

00046860 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
   46860:	defff904 	addi	sp,sp,-28
   46864:	dfc00615 	stw	ra,24(sp)
   46868:	df000515 	stw	fp,20(sp)
   4686c:	df000504 	addi	fp,sp,20
   46870:	e13ffe15 	stw	r4,-8(fp)
   46874:	e17fff15 	stw	r5,-4(fp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
   46878:	0009883a 	mov	r4,zero
   4687c:	00466940 	call	46694 <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
   46880:	e13ffe17 	ldw	r4,-8(fp)
   46884:	01400fc4 	movi	r5,63
   46888:	00085280 	call	8528 <strchr>
   4688c:	10000326 	beq	r2,zero,4689c <vfopen_locked+0x3c>
   {
      dtrap();
   46890:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   46894:	0005883a 	mov	r2,zero
   46898:	0000ba06 	br	46b84 <vfopen_locked+0x324>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
   4689c:	e13ffe17 	ldw	r4,-8(fp)
   468a0:	0047ac80 	call	47ac8 <vfslookup_locked>
   468a4:	e0bffc15 	stw	r2,-16(fp)

   /* if the file exists */
   if (vfp)
   468a8:	e0bffc17 	ldw	r2,-16(fp)
   468ac:	10004a26 	beq	r2,zero,469d8 <vfopen_locked+0x178>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
   468b0:	e0bfff17 	ldw	r2,-4(fp)
   468b4:	10800003 	ldbu	r2,0(r2)
   468b8:	10803fcc 	andi	r2,r2,255
   468bc:	1080201c 	xori	r2,r2,128
   468c0:	10bfe004 	addi	r2,r2,-128
   468c4:	10801dd8 	cmpnei	r2,r2,119
   468c8:	1000091e 	bne	r2,zero,468f0 <vfopen_locked+0x90>
   468cc:	e0bffc17 	ldw	r2,-16(fp)
   468d0:	1080058b 	ldhu	r2,22(r2)
   468d4:	10bfffcc 	andi	r2,r2,65535
   468d8:	1080080c 	andi	r2,r2,32
   468dc:	1000041e 	bne	r2,zero,468f0 <vfopen_locked+0x90>
      {
         set_vfopen_error(ENP_FILEIO);
   468e0:	013ff984 	movi	r4,-26
   468e4:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("mode w with no VF_WRITE\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   468e8:	0005883a 	mov	r2,zero
   468ec:	0000a506 	br	46b84 <vfopen_locked+0x324>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
   468f0:	00466dc0 	call	466dc <vf_alloc_and_link_vop>
   468f4:	e0bffd15 	stw	r2,-12(fp)

      /* check for failure */
      if (!vop)
   468f8:	e0bffd17 	ldw	r2,-12(fp)
   468fc:	1000041e 	bne	r2,zero,46910 <vfopen_locked+0xb0>
      {
         set_vfopen_error(ENP_NOMEM);
   46900:	013ffb04 	movi	r4,-20
   46904:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 1\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   46908:	0005883a 	mov	r2,zero
   4690c:	00009d06 	br	46b84 <vfopen_locked+0x324>
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
   46910:	e0bffd17 	ldw	r2,-12(fp)
   46914:	e0fffc17 	ldw	r3,-16(fp)
   46918:	10c00115 	stw	r3,4(r2)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
   4691c:	e0bffc17 	ldw	r2,-16(fp)
   46920:	10c00617 	ldw	r3,24(r2)
   46924:	e0bffd17 	ldw	r2,-12(fp)
   46928:	10c00215 	stw	r3,8(r2)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
   4692c:	e0bfff17 	ldw	r2,-4(fp)
   46930:	10800003 	ldbu	r2,0(r2)
   46934:	10803fcc 	andi	r2,r2,255
   46938:	1080201c 	xori	r2,r2,128
   4693c:	10bfe004 	addi	r2,r2,-128
   46940:	10801858 	cmpnei	r2,r2,97
   46944:	10000a1e 	bne	r2,zero,46970 <vfopen_locked+0x110>
      {
         if (vfp->data)
   46948:	e0bffc17 	ldw	r2,-16(fp)
   4694c:	10800617 	ldw	r2,24(r2)
   46950:	10000726 	beq	r2,zero,46970 <vfopen_locked+0x110>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
   46954:	e0bffc17 	ldw	r2,-16(fp)
   46958:	10c00617 	ldw	r3,24(r2)
   4695c:	e0bffc17 	ldw	r2,-16(fp)
   46960:	10800817 	ldw	r2,32(r2)
   46964:	1887883a 	add	r3,r3,r2
   46968:	e0bffd17 	ldw	r2,-12(fp)
   4696c:	10c00215 	stw	r3,8(r2)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
   46970:	e0bfff17 	ldw	r2,-4(fp)
   46974:	10800003 	ldbu	r2,0(r2)
   46978:	10803fcc 	andi	r2,r2,255
   4697c:	1080201c 	xori	r2,r2,128
   46980:	10bfe004 	addi	r2,r2,-128
   46984:	10801dd8 	cmpnei	r2,r2,119
   46988:	1000111e 	bne	r2,zero,469d0 <vfopen_locked+0x170>
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
   4698c:	e0bffc17 	ldw	r2,-16(fp)
   46990:	10000715 	stw	zero,28(r2)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
   46994:	e0bffc17 	ldw	r2,-16(fp)
   46998:	10000815 	stw	zero,32(r2)
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
   4699c:	e0bffc17 	ldw	r2,-16(fp)
   469a0:	1080058b 	ldhu	r2,22(r2)
   469a4:	10808014 	ori	r2,r2,512
   469a8:	1007883a 	mov	r3,r2
   469ac:	e0bffc17 	ldw	r2,-16(fp)
   469b0:	10c0058d 	sth	r3,22(r2)

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
   469b4:	e0bffc17 	ldw	r2,-16(fp)
   469b8:	10c0058b 	ldhu	r3,22(r2)
   469bc:	00bfff84 	movi	r2,-2
   469c0:	1884703a 	and	r2,r3,r2
   469c4:	1007883a 	mov	r3,r2
   469c8:	e0bffc17 	ldw	r2,-16(fp)
   469cc:	10c0058d 	sth	r3,22(r2)
      }

#endif   /* HT_RWVFS */

      return vop;
   469d0:	e0bffd17 	ldw	r2,-12(fp)
   469d4:	00006b06 	br	46b84 <vfopen_locked+0x324>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
   469d8:	e0bfff17 	ldw	r2,-4(fp)
   469dc:	10800003 	ldbu	r2,0(r2)
   469e0:	10803fcc 	andi	r2,r2,255
   469e4:	1080201c 	xori	r2,r2,128
   469e8:	10bfe004 	addi	r2,r2,-128
   469ec:	10801ca0 	cmpeqi	r2,r2,114
   469f0:	1000121e 	bne	r2,zero,46a3c <vfopen_locked+0x1dc>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
   469f4:	d0a8c017 	ldw	r2,-23808(gp)
   469f8:	e0bffb15 	stw	r2,-20(fp)
   469fc:	00000d06 	br	46a34 <vfopen_locked+0x1d4>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
   46a00:	e0bffb17 	ldw	r2,-20(fp)
   46a04:	10800117 	ldw	r2,4(r2)
   46a08:	e13ffe17 	ldw	r4,-8(fp)
   46a0c:	e17fff17 	ldw	r5,-4(fp)
   46a10:	103ee83a 	callr	r2
   46a14:	e0bffd15 	stw	r2,-12(fp)
   46a18:	e0bffd17 	ldw	r2,-12(fp)
   46a1c:	10000226 	beq	r2,zero,46a28 <vfopen_locked+0x1c8>
         {
            return vop;
   46a20:	e0bffd17 	ldw	r2,-12(fp)
   46a24:	00005706 	br	46b84 <vfopen_locked+0x324>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
   46a28:	e0bffb17 	ldw	r2,-20(fp)
   46a2c:	10800017 	ldw	r2,0(r2)
   46a30:	e0bffb15 	stw	r2,-20(fp)
   46a34:	e0bffb17 	ldw	r2,-20(fp)
   46a38:	103ff11e 	bne	r2,zero,46a00 <__alt_mem_descriptor_memory+0xdf006a00>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
   46a3c:	e0bfff17 	ldw	r2,-4(fp)
   46a40:	10800003 	ldbu	r2,0(r2)
   46a44:	10803fcc 	andi	r2,r2,255
   46a48:	1080201c 	xori	r2,r2,128
   46a4c:	10bfe004 	addi	r2,r2,-128
   46a50:	10801ca0 	cmpeqi	r2,r2,114
   46a54:	1000481e 	bne	r2,zero,46b78 <vfopen_locked+0x318>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
   46a58:	d0a8c717 	ldw	r2,-23780(gp)
   46a5c:	10803ff0 	cmpltui	r2,r2,255
   46a60:	1000041e 	bne	r2,zero,46a74 <vfopen_locked+0x214>
      {
         set_vfopen_error(ENP_NOMEM);
   46a64:	013ffb04 	movi	r4,-20
   46a68:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_total_dyna_files too big in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   46a6c:	0005883a 	mov	r2,zero
   46a70:	00004406 	br	46b84 <vfopen_locked+0x324>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
   46a74:	e13ffe17 	ldw	r4,-8(fp)
   46a78:	0008d080 	call	8d08 <strlen>
   46a7c:	10800470 	cmpltui	r2,r2,17
   46a80:	1000041e 	bne	r2,zero,46a94 <vfopen_locked+0x234>
      {
         set_vfopen_error(ENP_PARAM);
   46a84:	013ffd84 	movi	r4,-10
   46a88:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("file name too long in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   46a8c:	0005883a 	mov	r2,zero
   46a90:	00003c06 	br	46b84 <vfopen_locked+0x324>
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
   46a94:	01000b04 	movi	r4,44
   46a98:	002bce00 	call	2bce0 <npalloc>
   46a9c:	e0bffc15 	stw	r2,-16(fp)

      /* check for memory allocation failure */
      if (!vfp)
   46aa0:	e0bffc17 	ldw	r2,-16(fp)
   46aa4:	1000041e 	bne	r2,zero,46ab8 <vfopen_locked+0x258>
      {
         set_vfopen_error(ENP_NOMEM);
   46aa8:	013ffb04 	movi	r4,-20
   46aac:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("VFS_VFS_FILE_ALLOC() failed in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   46ab0:	0005883a 	mov	r2,zero
   46ab4:	00003306 	br	46b84 <vfopen_locked+0x324>
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
   46ab8:	00466dc0 	call	466dc <vf_alloc_and_link_vop>
   46abc:	e0bffd15 	stw	r2,-12(fp)

      /* check for memory allocation failure */
      if (!vop)
   46ac0:	e0bffd17 	ldw	r2,-12(fp)
   46ac4:	1000061e 	bne	r2,zero,46ae0 <vfopen_locked+0x280>
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
   46ac8:	e13ffc17 	ldw	r4,-16(fp)
   46acc:	002bd140 	call	2bd14 <npfree>
         set_vfopen_error(ENP_NOMEM);
   46ad0:	013ffb04 	movi	r4,-20
   46ad4:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 2\n");
#endif   /* VFS_VERBOSE */
         return NULL;
   46ad8:	0005883a 	mov	r2,zero
   46adc:	00002906 	br	46b84 <vfopen_locked+0x324>
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
   46ae0:	d0e8c217 	ldw	r3,-23800(gp)
   46ae4:	e0bffc17 	ldw	r2,-16(fp)
   46ae8:	10c00015 	stw	r3,0(r2)
      vfsfiles = vfp;
   46aec:	e0bffc17 	ldw	r2,-16(fp)
   46af0:	d0a8c215 	stw	r2,-23800(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;
   46af4:	d0a8c717 	ldw	r2,-23780(gp)
   46af8:	10800044 	addi	r2,r2,1
   46afc:	d0a8c715 	stw	r2,-23780(gp)

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
   46b00:	e0bffe17 	ldw	r2,-8(fp)
   46b04:	10800003 	ldbu	r2,0(r2)
   46b08:	10803fcc 	andi	r2,r2,255
   46b0c:	1080201c 	xori	r2,r2,128
   46b10:	10bfe004 	addi	r2,r2,-128
   46b14:	10800be0 	cmpeqi	r2,r2,47
   46b18:	1000071e 	bne	r2,zero,46b38 <vfopen_locked+0x2d8>
   46b1c:	e0bffe17 	ldw	r2,-8(fp)
   46b20:	10800003 	ldbu	r2,0(r2)
   46b24:	10803fcc 	andi	r2,r2,255
   46b28:	1080201c 	xori	r2,r2,128
   46b2c:	10bfe004 	addi	r2,r2,-128
   46b30:	10801718 	cmpnei	r2,r2,92
   46b34:	1000031e 	bne	r2,zero,46b44 <vfopen_locked+0x2e4>
         name++;
   46b38:	e0bffe17 	ldw	r2,-8(fp)
   46b3c:	10800044 	addi	r2,r2,1
   46b40:	e0bffe15 	stw	r2,-8(fp)

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
   46b44:	e0bffc17 	ldw	r2,-16(fp)
   46b48:	10800104 	addi	r2,r2,4
   46b4c:	1009883a 	mov	r4,r2
   46b50:	e17ffe17 	ldw	r5,-8(fp)
   46b54:	000868c0 	call	868c <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
   46b58:	e0bffc17 	ldw	r2,-16(fp)
   46b5c:	00c0d804 	movi	r3,864
   46b60:	10c0058d 	sth	r3,22(r2)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
   46b64:	e0bffd17 	ldw	r2,-12(fp)
   46b68:	e0fffc17 	ldw	r3,-16(fp)
   46b6c:	10c00115 	stw	r3,4(r2)
      /* the cmploc and tag fields of the vop retain their NULLs from 
       * npalloc(). cmploc contains NULL because there is no data 
       * buffer to point to yet. tag contains NULL because no 
       * decompression operation has started yet
       */
      return vop;
   46b70:	e0bffd17 	ldw	r2,-12(fp)
   46b74:	00000306 	br	46b84 <vfopen_locked+0x324>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
   46b78:	013ff9c4 	movi	r4,-25
   46b7c:	00466940 	call	46694 <set_vfopen_error>
#ifdef VFS_VERBOSE
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;
   46b80:	0005883a 	mov	r2,zero

#endif   /* HT_LOCALFS */
}
   46b84:	e037883a 	mov	sp,fp
   46b88:	dfc00117 	ldw	ra,4(sp)
   46b8c:	df000017 	ldw	fp,0(sp)
   46b90:	dec00204 	addi	sp,sp,8
   46b94:	f800283a 	ret

00046b98 <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
   46b98:	defffb04 	addi	sp,sp,-20
   46b9c:	dfc00415 	stw	ra,16(sp)
   46ba0:	df000315 	stw	fp,12(sp)
   46ba4:	df000304 	addi	fp,sp,12
   46ba8:	e13ffe15 	stw	r4,-8(fp)
   46bac:	e17fff15 	stw	r5,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
   46bb0:	01000144 	movi	r4,5
   46bb4:	002b6f40 	call	2b6f4 <wait_app_sem>

   vfd = vfopen_locked(name,mode);
   46bb8:	e13ffe17 	ldw	r4,-8(fp)
   46bbc:	e17fff17 	ldw	r5,-4(fp)
   46bc0:	00468600 	call	46860 <vfopen_locked>
   46bc4:	e0bffd15 	stw	r2,-12(fp)

   vfs_unlock();
   46bc8:	01000144 	movi	r4,5
   46bcc:	002b7b00 	call	2b7b0 <post_app_sem>

   return vfd;
   46bd0:	e0bffd17 	ldw	r2,-12(fp)
}
   46bd4:	e037883a 	mov	sp,fp
   46bd8:	dfc00117 	ldw	ra,4(sp)
   46bdc:	df000017 	ldw	fp,0(sp)
   46be0:	dec00204 	addi	sp,sp,8
   46be4:	f800283a 	ret

00046be8 <vfclose_locked>:
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
   46be8:	defff804 	addi	sp,sp,-32
   46bec:	dfc00715 	stw	ra,28(sp)
   46bf0:	df000615 	stw	fp,24(sp)
   46bf4:	df000604 	addi	fp,sp,24
   46bf8:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;
   VFILE * vlast;

   vlast = NULL;
   46bfc:	e03ffb15 	stw	zero,-20(fp)

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   46c00:	d0a8c117 	ldw	r2,-23804(gp)
   46c04:	e0bffa15 	stw	r2,-24(fp)
   while (vtmp)
   46c08:	00000906 	br	46c30 <vfclose_locked+0x48>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
   46c0c:	e0ffff17 	ldw	r3,-4(fp)
   46c10:	e0bffa17 	ldw	r2,-24(fp)
   46c14:	1880011e 	bne	r3,r2,46c1c <vfclose_locked+0x34>
         break;
   46c18:	00000706 	br	46c38 <vfclose_locked+0x50>

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
   46c1c:	e0bffa17 	ldw	r2,-24(fp)
   46c20:	e0bffb15 	stw	r2,-20(fp)
      vtmp = vtmp->next;
   46c24:	e0bffa17 	ldw	r2,-24(fp)
   46c28:	10800017 	ldw	r2,0(r2)
   46c2c:	e0bffa15 	stw	r2,-24(fp)
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
   46c30:	e0bffa17 	ldw	r2,-24(fp)
   46c34:	103ff51e 	bne	r2,zero,46c0c <__alt_mem_descriptor_memory+0xdf006c0c>
      vlast = vtmp;
      vtmp = vtmp->next;
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
   46c38:	e0ffff17 	ldw	r3,-4(fp)
   46c3c:	e0bffa17 	ldw	r2,-24(fp)
   46c40:	18800126 	beq	r3,r2,46c48 <vfclose_locked+0x60>

#ifdef HT_LOCALFS
      /* default to call on local system */
      fclose((FILE*)vfd);
#endif   /* HT_LOCALFS */
      return;
   46c44:	00004f06 	br	46d84 <vfclose_locked+0x19c>

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
   46c48:	e0bfff17 	ldw	r2,-4(fp)
   46c4c:	10800117 	ldw	r2,4(r2)
   46c50:	e0bffc15 	stw	r2,-16(fp)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
   46c54:	e0bffc17 	ldw	r2,-16(fp)
   46c58:	1000011e 	bne	r2,zero,46c60 <vfclose_locked+0x78>
         break;
   46c5c:	00003906 	br	46d44 <vfclose_locked+0x15c>
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
   46c60:	e0bffc17 	ldw	r2,-16(fp)
   46c64:	10800a17 	ldw	r2,40(r2)
   46c68:	10000826 	beq	r2,zero,46c8c <vfclose_locked+0xa4>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);
   46c6c:	e0bffc17 	ldw	r2,-16(fp)
   46c70:	10800a17 	ldw	r2,40(r2)
   46c74:	e0bffd15 	stw	r2,-12(fp)

         vfs->r_fclose(vfd);
   46c78:	e0bffd17 	ldw	r2,-12(fp)
   46c7c:	10800217 	ldw	r2,8(r2)
   46c80:	e13fff17 	ldw	r4,-4(fp)
   46c84:	103ee83a 	callr	r2
         break;   /* break to list deletion code after end of phoney loop */
   46c88:	00002e06 	br	46d44 <vfclose_locked+0x15c>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
   46c8c:	e0bffc17 	ldw	r2,-16(fp)
   46c90:	1080058b 	ldhu	r2,22(r2)
   46c94:	10bfffcc 	andi	r2,r2,65535
   46c98:	1080200c 	andi	r2,r2,128
   46c9c:	10002826 	beq	r2,zero,46d40 <vfclose_locked+0x158>
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
   46ca0:	e0bffc17 	ldw	r2,-16(fp)
   46ca4:	10c00917 	ldw	r3,36(r2)
   46ca8:	e0bffc17 	ldw	r2,-16(fp)
   46cac:	10800817 	ldw	r2,32(r2)
   46cb0:	1885c83a 	sub	r2,r3,r2

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
   46cb4:	10804030 	cmpltui	r2,r2,256
   46cb8:	1000211e 	bne	r2,zero,46d40 <vfclose_locked+0x158>
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
          vfp->data) /* this last test is a sanity check */
   46cbc:	e0bffc17 	ldw	r2,-16(fp)
   46cc0:	10800617 	ldw	r2,24(r2)
      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
          ((vfp->buf_size - vfp->comp_size) > VFS_CLOSE_FRAG_FLOOR) &&
   46cc4:	10001e26 	beq	r2,zero,46d40 <vfclose_locked+0x158>
          vfp->data) /* this last test is a sanity check */
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
   46cc8:	e0bffc17 	ldw	r2,-16(fp)
   46ccc:	10800817 	ldw	r2,32(r2)
   46cd0:	1009883a 	mov	r4,r2
   46cd4:	004674c0 	call	4674c <vf_alloc_buffer>
   46cd8:	e0bffe15 	stw	r2,-8(fp)

         /* if the allocation worked */
         if (new_buffer)
   46cdc:	e0bffe17 	ldw	r2,-8(fp)
   46ce0:	10001726 	beq	r2,zero,46d40 <vfclose_locked+0x158>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
   46ce4:	e0bffc17 	ldw	r2,-16(fp)
   46ce8:	10c00617 	ldw	r3,24(r2)
   46cec:	e0bffc17 	ldw	r2,-16(fp)
   46cf0:	10800817 	ldw	r2,32(r2)
   46cf4:	e13ffe17 	ldw	r4,-8(fp)
   46cf8:	180b883a 	mov	r5,r3
   46cfc:	100d883a 	mov	r6,r2
   46d00:	0007c900 	call	7c90 <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
   46d04:	e0bffc17 	ldw	r2,-16(fp)
   46d08:	10c00617 	ldw	r3,24(r2)
   46d0c:	e0bffc17 	ldw	r2,-16(fp)
   46d10:	10800917 	ldw	r2,36(r2)
   46d14:	1809883a 	mov	r4,r3
   46d18:	100b883a 	mov	r5,r2
   46d1c:	00468140 	call	46814 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
   46d20:	e0bffc17 	ldw	r2,-16(fp)
   46d24:	e0fffe17 	ldw	r3,-8(fp)
   46d28:	10c00615 	stw	r3,24(r2)
            vfp->buf_size = vfp->comp_size;
   46d2c:	e0bffc17 	ldw	r2,-16(fp)
   46d30:	10c00817 	ldw	r3,32(r2)
   46d34:	e0bffc17 	ldw	r2,-16(fp)
   46d38:	10c00915 	stw	r3,36(r2)
#endif   /* VFS_AUTO_SYNC */

#endif   /* HT_RWVFS */

      /* break to list deletion code below */
      break;
   46d3c:	00000006 	br	46d40 <vfclose_locked+0x158>
   46d40:	0001883a 	nop

   }

   if (vlast)  /* unlink from list of open files */
   46d44:	e0bffb17 	ldw	r2,-20(fp)
   46d48:	10000526 	beq	r2,zero,46d60 <vfclose_locked+0x178>
      vlast->next = vtmp->next;
   46d4c:	e0bffa17 	ldw	r2,-24(fp)
   46d50:	10c00017 	ldw	r3,0(r2)
   46d54:	e0bffb17 	ldw	r2,-20(fp)
   46d58:	10c00015 	stw	r3,0(r2)
   46d5c:	00000306 	br	46d6c <vfclose_locked+0x184>
   else
      vfiles = vtmp->next;
   46d60:	e0bffa17 	ldw	r2,-24(fp)
   46d64:	10800017 	ldw	r2,0(r2)
   46d68:	d0a8c115 	stw	r2,-23804(gp)

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
   46d6c:	e13ffa17 	ldw	r4,-24(fp)
   46d70:	002bd140 	call	2bd14 <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
   46d74:	d0a8c517 	ldw	r2,-23788(gp)
   46d78:	10bfffc4 	addi	r2,r2,-1
   46d7c:	d0a8c515 	stw	r2,-23788(gp)
   return;
   46d80:	0001883a 	nop
}
   46d84:	e037883a 	mov	sp,fp
   46d88:	dfc00117 	ldw	ra,4(sp)
   46d8c:	df000017 	ldw	fp,0(sp)
   46d90:	dec00204 	addi	sp,sp,8
   46d94:	f800283a 	ret

00046d98 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
   46d98:	defffd04 	addi	sp,sp,-12
   46d9c:	dfc00215 	stw	ra,8(sp)
   46da0:	df000115 	stw	fp,4(sp)
   46da4:	df000104 	addi	fp,sp,4
   46da8:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
   46dac:	01000144 	movi	r4,5
   46db0:	002b6f40 	call	2b6f4 <wait_app_sem>

   vfclose_locked(vfd);
   46db4:	e13fff17 	ldw	r4,-4(fp)
   46db8:	0046be80 	call	46be8 <vfclose_locked>

   vfs_unlock();
   46dbc:	01000144 	movi	r4,5
   46dc0:	002b7b00 	call	2b7b0 <post_app_sem>
}
   46dc4:	e037883a 	mov	sp,fp
   46dc8:	dfc00117 	ldw	ra,4(sp)
   46dcc:	df000017 	ldw	fp,0(sp)
   46dd0:	dec00204 	addi	sp,sp,8
   46dd4:	f800283a 	ret

00046dd8 <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
   46dd8:	defffd04 	addi	sp,sp,-12
   46ddc:	dfc00215 	stw	ra,8(sp)
   46de0:	df000115 	stw	fp,4(sp)
   46de4:	df000104 	addi	fp,sp,4
   46de8:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
   46dec:	01000144 	movi	r4,5
   46df0:	002b6f40 	call	2b6f4 <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
   46df4:	01000174 	movhi	r4,5
   46df8:	213ebb04 	addi	r4,r4,-1300
   46dfc:	00083740 	call	8374 <puts>

   vfs_unlock();
   46e00:	01000144 	movi	r4,5
   46e04:	002b7b00 	call	2b7b0 <post_app_sem>
   return(0);
   46e08:	0005883a 	mov	r2,zero
}
   46e0c:	e037883a 	mov	sp,fp
   46e10:	dfc00117 	ldw	ra,4(sp)
   46e14:	df000017 	ldw	fp,0(sp)
   46e18:	dec00204 	addi	sp,sp,8
   46e1c:	f800283a 	ret

00046e20 <vfgets>:

char * vfgets(char * s, int lim, VFILE * fp) 
{
   46e20:	defff904 	addi	sp,sp,-28
   46e24:	dfc00615 	stw	ra,24(sp)
   46e28:	df000515 	stw	fp,20(sp)
   46e2c:	df000504 	addi	fp,sp,20
   46e30:	e13ffd15 	stw	r4,-12(fp)
   46e34:	e17ffe15 	stw	r5,-8(fp)
   46e38:	e1bfff15 	stw	r6,-4(fp)
   int   c   = EOF;
   46e3c:	00bfffc4 	movi	r2,-1
   46e40:	e0bffb15 	stw	r2,-20(fp)
   char* ret = s;
   46e44:	e0bffd17 	ldw	r2,-12(fp)
   46e48:	e0bffc15 	stw	r2,-16(fp)

   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
   46e4c:	00000c06 	br	46e80 <vfgets+0x60>
      if (( *ret ++ = c) == '\n')
   46e50:	e0bffc17 	ldw	r2,-16(fp)
   46e54:	10c00044 	addi	r3,r2,1
   46e58:	e0fffc15 	stw	r3,-16(fp)
   46e5c:	e0fffb17 	ldw	r3,-20(fp)
   46e60:	10c00005 	stb	r3,0(r2)
   46e64:	10800003 	ldbu	r2,0(r2)
   46e68:	10803fcc 	andi	r2,r2,255
   46e6c:	1080201c 	xori	r2,r2,128
   46e70:	10bfe004 	addi	r2,r2,-128
   46e74:	10800298 	cmpnei	r2,r2,10
   46e78:	1000011e 	bne	r2,zero,46e80 <vfgets+0x60>
         break;
   46e7c:	00000b06 	br	46eac <vfgets+0x8c>
char * vfgets(char * s, int lim, VFILE * fp) 
{
   int   c   = EOF;
   char* ret = s;

   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
   46e80:	e0bffe17 	ldw	r2,-8(fp)
   46e84:	10bfffc4 	addi	r2,r2,-1
   46e88:	e0bffe15 	stw	r2,-8(fp)
   46e8c:	e0bffe17 	ldw	r2,-8(fp)
   46e90:	0080060e 	bge	zero,r2,46eac <vfgets+0x8c>
   46e94:	e13fff17 	ldw	r4,-4(fp)
   46e98:	0047a800 	call	47a80 <vgetc>
   46e9c:	e0bffb15 	stw	r2,-20(fp)
   46ea0:	e0bffb17 	ldw	r2,-20(fp)
   46ea4:	10bfffd8 	cmpnei	r2,r2,-1
   46ea8:	103fe91e 	bne	r2,zero,46e50 <__alt_mem_descriptor_memory+0xdf006e50>
      if (( *ret ++ = c) == '\n')
         break;
   *ret = '\0';
   46eac:	e0bffc17 	ldw	r2,-16(fp)
   46eb0:	10000005 	stb	zero,0(r2)
   return ( c == EOF && ret == s) ? NULL : s;
   46eb4:	e0bffb17 	ldw	r2,-20(fp)
   46eb8:	10bfffd8 	cmpnei	r2,r2,-1
   46ebc:	1000031e 	bne	r2,zero,46ecc <vfgets+0xac>
   46ec0:	e0fffc17 	ldw	r3,-16(fp)
   46ec4:	e0bffd17 	ldw	r2,-12(fp)
   46ec8:	18800226 	beq	r3,r2,46ed4 <vfgets+0xb4>
   46ecc:	e0bffd17 	ldw	r2,-12(fp)
   46ed0:	00000106 	br	46ed8 <vfgets+0xb8>
   46ed4:	0005883a 	mov	r2,zero
}
   46ed8:	e037883a 	mov	sp,fp
   46edc:	dfc00117 	ldw	ra,4(sp)
   46ee0:	df000017 	ldw	fp,0(sp)
   46ee4:	dec00204 	addi	sp,sp,8
   46ee8:	f800283a 	ret

00046eec <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
   46eec:	defffc04 	addi	sp,sp,-16
   46ef0:	dfc00315 	stw	ra,12(sp)
   46ef4:	df000215 	stw	fp,8(sp)
   46ef8:	df000204 	addi	fp,sp,8
   46efc:	e13fff15 	stw	r4,-4(fp)
   int c = 0;
   46f00:	e03ffe15 	stw	zero,-8(fp)

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
   46f04:	e13fff17 	ldw	r4,-4(fp)
   46f08:	0047a800 	call	47a80 <vgetc>
   46f0c:	e0bffe15 	stw	r2,-8(fp)
   46f10:	e0bffe17 	ldw	r2,-8(fp)
   46f14:	10bfffd8 	cmpnei	r2,r2,-1
   46f18:	1000021e 	bne	r2,zero,46f24 <vfeof+0x38>
   {
      return 1;
   46f1c:	00800044 	movi	r2,1
   46f20:	00000106 	br	46f28 <vfeof+0x3c>
   }   
   return 0;
   46f24:	0005883a 	mov	r2,zero
}
   46f28:	e037883a 	mov	sp,fp
   46f2c:	dfc00117 	ldw	ra,4(sp)
   46f30:	df000017 	ldw	fp,0(sp)
   46f34:	dec00204 	addi	sp,sp,8
   46f38:	f800283a 	ret

00046f3c <vunlink_flag_open_files>:
 *
 * RETURNS: 
 */

void vunlink_flag_open_files(struct vfs_file * vfp)
{
   46f3c:	defffd04 	addi	sp,sp,-12
   46f40:	df000215 	stw	fp,8(sp)
   46f44:	df000204 	addi	fp,sp,8
   46f48:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
   46f4c:	d0a8c117 	ldw	r2,-23804(gp)
   46f50:	e0bffe15 	stw	r2,-8(fp)
   46f54:	00000906 	br	46f7c <vunlink_flag_open_files+0x40>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
   46f58:	e0bffe17 	ldw	r2,-8(fp)
   46f5c:	10c00117 	ldw	r3,4(r2)
   46f60:	e0bfff17 	ldw	r2,-4(fp)
   46f64:	1880021e 	bne	r3,r2,46f70 <vunlink_flag_open_files+0x34>
         vtmp->file = NULL;
   46f68:	e0bffe17 	ldw	r2,-8(fp)
   46f6c:	10000115 	stw	zero,4(r2)
void vunlink_flag_open_files(struct vfs_file * vfp)
{
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
   46f70:	e0bffe17 	ldw	r2,-8(fp)
   46f74:	10800017 	ldw	r2,0(r2)
   46f78:	e0bffe15 	stw	r2,-8(fp)
   46f7c:	e0bffe17 	ldw	r2,-8(fp)
   46f80:	103ff51e 	bne	r2,zero,46f58 <__alt_mem_descriptor_memory+0xdf006f58>
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
         vtmp->file = NULL;
   }
}
   46f84:	e037883a 	mov	sp,fp
   46f88:	df000017 	ldw	fp,0(sp)
   46f8c:	dec00104 	addi	sp,sp,4
   46f90:	f800283a 	ret

00046f94 <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
   46f94:	defff604 	addi	sp,sp,-40
   46f98:	dfc00915 	stw	ra,36(sp)
   46f9c:	df000815 	stw	fp,32(sp)
   46fa0:	df000804 	addi	fp,sp,32
   46fa4:	e13fff15 	stw	r4,-4(fp)
   struct vfs_file * vfp;
   int   rc =  0;
   46fa8:	e03ff815 	stw	zero,-32(fp)
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name)+1);
   46fac:	e13fff17 	ldw	r4,-4(fp)
   46fb0:	0008d080 	call	8d08 <strlen>
   46fb4:	10800044 	addi	r2,r2,1
   46fb8:	1009883a 	mov	r4,r2
   46fbc:	00074c00 	call	74c0 <malloc>
   46fc0:	e0bffb15 	stw	r2,-20(fp)
   strcpy(name, const_name);
   46fc4:	e13ffb17 	ldw	r4,-20(fp)
   46fc8:	e17fff17 	ldw	r5,-4(fp)
   46fcc:	000868c0 	call	868c <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
   46fd0:	01000144 	movi	r4,5
   46fd4:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
   46fd8:	e13ffb17 	ldw	r4,-20(fp)
   46fdc:	0047ac80 	call	47ac8 <vfslookup_locked>
   46fe0:	e0bffc15 	stw	r2,-16(fp)
   46fe4:	e0bffc17 	ldw	r2,-16(fp)
   46fe8:	1000061e 	bne	r2,zero,47004 <vunlink+0x70>
   {
      vfs_unlock();
   46fec:	01000144 	movi	r4,5
   46ff0:	002b7b00 	call	2b7b0 <post_app_sem>
#ifdef HT_LOCALFS
      /* default to call on local system */
      return remove(name);
#else
      /* no local file system, so return error condition */
      free(name);
   46ff4:	e13ffb17 	ldw	r4,-20(fp)
   46ff8:	00074d40 	call	74d4 <free>
      return -1;
   46ffc:	00bfffc4 	movi	r2,-1
   47000:	00005e06 	br	4717c <vunlink+0x1e8>
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
   47004:	e0bffc17 	ldw	r2,-16(fp)
   47008:	10800017 	ldw	r2,0(r2)
   4700c:	e0bffd15 	stw	r2,-12(fp)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   47010:	e03ffa15 	stw	zero,-24(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
   47014:	d0a8c217 	ldw	r2,-23800(gp)
   47018:	e0bff915 	stw	r2,-28(fp)
   4701c:	00000906 	br	47044 <vunlink+0xb0>
   {
      if (vtmp == vfp)
   47020:	e0fff917 	ldw	r3,-28(fp)
   47024:	e0bffc17 	ldw	r2,-16(fp)
   47028:	1880011e 	bne	r3,r2,47030 <vunlink+0x9c>
         break;
   4702c:	00000706 	br	4704c <vunlink+0xb8>
      vflast = vtmp;
   47030:	e0bff917 	ldw	r2,-28(fp)
   47034:	e0bffa15 	stw	r2,-24(fp)
    */
   vfnext = vfp->next;

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
   47038:	e0bff917 	ldw	r2,-28(fp)
   4703c:	10800017 	ldw	r2,0(r2)
   47040:	e0bff915 	stw	r2,-28(fp)
   47044:	e0bff917 	ldw	r2,-28(fp)
   47048:	103ff51e 	bne	r2,zero,47020 <__alt_mem_descriptor_memory+0xdf007020>
      vflast = vtmp;
   }

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
   4704c:	e0bff917 	ldw	r2,-28(fp)
   47050:	1000071e 	bne	r2,zero,47070 <vunlink+0xdc>
   {
      dtrap();
   47054:	002b0f40 	call	2b0f4 <dtrap>
      vfs_unlock();
   47058:	01000144 	movi	r4,5
   4705c:	002b7b00 	call	2b7b0 <post_app_sem>
      free(name);
   47060:	e13ffb17 	ldw	r4,-20(fp)
   47064:	00074d40 	call	74d4 <free>
      return -1;
   47068:	00bfffc4 	movi	r2,-1
   4706c:	00004306 	br	4717c <vunlink+0x1e8>
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
   47070:	e0bffc17 	ldw	r2,-16(fp)
   47074:	10800a17 	ldw	r2,40(r2)
   47078:	10000926 	beq	r2,zero,470a0 <vunlink+0x10c>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);
   4707c:	e0bffc17 	ldw	r2,-16(fp)
   47080:	10800a17 	ldw	r2,40(r2)
   47084:	e0bffe15 	stw	r2,-8(fp)

         rc = vfs->r_unlink(name);
   47088:	e0bffe17 	ldw	r2,-8(fp)
   4708c:	10800817 	ldw	r2,32(r2)
   47090:	e13ffb17 	ldw	r4,-20(fp)
   47094:	103ee83a 	callr	r2
   47098:	e0bff815 	stw	r2,-32(fp)
         break;   /* break to list deletion code after end of phoney loop */
   4709c:	00002606 	br	47138 <vunlink+0x1a4>
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
   470a0:	e0bffc17 	ldw	r2,-16(fp)
   470a4:	1080058b 	ldhu	r2,22(r2)
   470a8:	10bfffcc 	andi	r2,r2,65535
   470ac:	1080080c 	andi	r2,r2,32
   470b0:	1000061e 	bne	r2,zero,470cc <vunlink+0x138>
      {
         vfs_unlock();
   470b4:	01000144 	movi	r4,5
   470b8:	002b7b00 	call	2b7b0 <post_app_sem>
         free(name);
   470bc:	e13ffb17 	ldw	r4,-20(fp)
   470c0:	00074d40 	call	74d4 <free>
         return -1;
   470c4:	00bfffc4 	movi	r2,-1
   470c8:	00002c06 	br	4717c <vunlink+0x1e8>
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
   470cc:	e0bffc17 	ldw	r2,-16(fp)
   470d0:	1080058b 	ldhu	r2,22(r2)
   470d4:	10bfffcc 	andi	r2,r2,65535
   470d8:	1080200c 	andi	r2,r2,128
   470dc:	10000a26 	beq	r2,zero,47108 <vunlink+0x174>
   470e0:	e0bffc17 	ldw	r2,-16(fp)
   470e4:	10800617 	ldw	r2,24(r2)
   470e8:	10000726 	beq	r2,zero,47108 <vunlink+0x174>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
   470ec:	e0bffc17 	ldw	r2,-16(fp)
   470f0:	10c00617 	ldw	r3,24(r2)
   470f4:	e0bffc17 	ldw	r2,-16(fp)
   470f8:	10800917 	ldw	r2,36(r2)
   470fc:	1809883a 	mov	r4,r3
   47100:	100b883a 	mov	r5,r2
   47104:	00468140 	call	46814 <vf_free_buffer>
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
   47108:	e0bffc17 	ldw	r2,-16(fp)
   4710c:	1080058b 	ldhu	r2,22(r2)
   47110:	10bfffcc 	andi	r2,r2,65535
   47114:	1080100c 	andi	r2,r2,64
   47118:	10000526 	beq	r2,zero,47130 <vunlink+0x19c>
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
   4711c:	d0a8c717 	ldw	r2,-23780(gp)
   47120:	10bfffc4 	addi	r2,r2,-1
   47124:	d0a8c715 	stw	r2,-23780(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
   47128:	e13ffc17 	ldw	r4,-16(fp)
   4712c:	002bd140 	call	2bd14 <npfree>
         the vfs_file has been deleted from the list */
#ifdef VFS_AUTO_SYNC
      do_sync = 1;
#endif
      /* we were successful at our unlink */
      rc = 0;
   47130:	e03ff815 	stw	zero,-32(fp)

      break;
   47134:	0001883a 	nop
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
   47138:	e0bffa17 	ldw	r2,-24(fp)
   4713c:	10000426 	beq	r2,zero,47150 <vunlink+0x1bc>
      vflast->next = vfnext;
   47140:	e0bffa17 	ldw	r2,-24(fp)
   47144:	e0fffd17 	ldw	r3,-12(fp)
   47148:	10c00015 	stw	r3,0(r2)
   4714c:	00000206 	br	47158 <vunlink+0x1c4>
   else
      vfsfiles = vfnext;
   47150:	e0bffd17 	ldw	r2,-12(fp)
   47154:	d0a8c215 	stw	r2,-23800(gp)

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
   47158:	e13ffc17 	ldw	r4,-16(fp)
   4715c:	0046f3c0 	call	46f3c <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
   47160:	00800044 	movi	r2,1
   47164:	d0a8c415 	stw	r2,-23792(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
   47168:	01000144 	movi	r4,5
   4716c:	002b7b00 	call	2b7b0 <post_app_sem>
   free(name);
   47170:	e13ffb17 	ldw	r4,-20(fp)
   47174:	00074d40 	call	74d4 <free>
   return rc;
   47178:	e0bff817 	ldw	r2,-32(fp)
}
   4717c:	e037883a 	mov	sp,fp
   47180:	dfc00117 	ldw	ra,4(sp)
   47184:	df000017 	ldw	fp,0(sp)
   47188:	dec00204 	addi	sp,sp,8
   4718c:	f800283a 	ret

00047190 <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   47190:	defff604 	addi	sp,sp,-40
   47194:	dfc00915 	stw	ra,36(sp)
   47198:	df000815 	stw	fp,32(sp)
   4719c:	df000804 	addi	fp,sp,32
   471a0:	e13ffc15 	stw	r4,-16(fp)
   471a4:	e17ffd15 	stw	r5,-12(fp)
   471a8:	e1bffe15 	stw	r6,-8(fp)
   471ac:	e1ffff15 	stw	r7,-4(fp)
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
   471b0:	01000144 	movi	r4,5
   471b4:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
   471b8:	e13fff17 	ldw	r4,-4(fp)
   471bc:	0047e000 	call	47e00 <isvfile_locked>
   471c0:	10004e26 	beq	r2,zero,472fc <vfread+0x16c>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
   471c4:	e0bfff17 	ldw	r2,-4(fp)
   471c8:	10800117 	ldw	r2,4(r2)
   471cc:	1000041e 	bne	r2,zero,471e0 <vfread+0x50>
      {
         vfs_unlock();
   471d0:	01000144 	movi	r4,5
   471d4:	002b7b00 	call	2b7b0 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
   471d8:	0005883a 	mov	r2,zero
   471dc:	00004a06 	br	47308 <vfread+0x178>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
   471e0:	e0bfff17 	ldw	r2,-4(fp)
   471e4:	10800117 	ldw	r2,4(r2)
   471e8:	10800a17 	ldw	r2,40(r2)
   471ec:	10001026 	beq	r2,zero,47230 <vfread+0xa0>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
   471f0:	e0bfff17 	ldw	r2,-4(fp)
   471f4:	10800117 	ldw	r2,4(r2)
   471f8:	10800a17 	ldw	r2,40(r2)
   471fc:	e0bff915 	stw	r2,-28(fp)
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
   47200:	e0bff917 	ldw	r2,-28(fp)
   47204:	10800317 	ldw	r2,12(r2)
   47208:	e13ffc17 	ldw	r4,-16(fp)
   4720c:	e17ffd17 	ldw	r5,-12(fp)
   47210:	e1bffe17 	ldw	r6,-8(fp)
   47214:	e1ffff17 	ldw	r7,-4(fp)
   47218:	103ee83a 	callr	r2
   4721c:	e0bffa15 	stw	r2,-24(fp)
         vfs_unlock();
   47220:	01000144 	movi	r4,5
   47224:	002b7b00 	call	2b7b0 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return rc;
   47228:	e0bffa17 	ldw	r2,-24(fp)
   4722c:	00003606 	br	47308 <vfread+0x178>
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
   47230:	e0bfff17 	ldw	r2,-4(fp)
   47234:	10800117 	ldw	r2,4(r2)
   47238:	10800617 	ldw	r2,24(r2)
   4723c:	1000041e 	bne	r2,zero,47250 <vfread+0xc0>
      {
         vfs_unlock();
   47240:	01000144 	movi	r4,5
   47244:	002b7b00 	call	2b7b0 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
   47248:	0005883a 	mov	r2,zero
   4724c:	00002e06 	br	47308 <vfread+0x178>
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
   47250:	e0fffe17 	ldw	r3,-8(fp)
   47254:	e0bffd17 	ldw	r2,-12(fp)
   47258:	1885383a 	mul	r2,r3,r2
   4725c:	e0bff815 	stw	r2,-32(fp)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
   47260:	e0bfff17 	ldw	r2,-4(fp)
   47264:	10800217 	ldw	r2,8(r2)
   47268:	1007883a 	mov	r3,r2
   4726c:	e0bfff17 	ldw	r2,-4(fp)
   47270:	10800117 	ldw	r2,4(r2)
   47274:	10800617 	ldw	r2,24(r2)
   47278:	1885c83a 	sub	r2,r3,r2
   4727c:	e0bffb15 	stw	r2,-20(fp)

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
   47280:	e0fffb17 	ldw	r3,-20(fp)
   47284:	e0bff817 	ldw	r2,-32(fp)
   47288:	1885883a 	add	r2,r3,r2
   4728c:	e0ffff17 	ldw	r3,-4(fp)
   47290:	18c00117 	ldw	r3,4(r3)
   47294:	18c00817 	ldw	r3,32(r3)
   47298:	1880062e 	bgeu	r3,r2,472b4 <vfread+0x124>
            bcount = (unsigned)(vfd->file->comp_size - location);
   4729c:	e0bfff17 	ldw	r2,-4(fp)
   472a0:	10800117 	ldw	r2,4(r2)
   472a4:	10c00817 	ldw	r3,32(r2)
   472a8:	e0bffb17 	ldw	r2,-20(fp)
   472ac:	1885c83a 	sub	r2,r3,r2
   472b0:	e0bff815 	stw	r2,-32(fp)
         MEMCPY(buf, vfd->cmploc, bcount);
   472b4:	e0bfff17 	ldw	r2,-4(fp)
   472b8:	10800217 	ldw	r2,8(r2)
   472bc:	e13ffc17 	ldw	r4,-16(fp)
   472c0:	100b883a 	mov	r5,r2
   472c4:	e1bff817 	ldw	r6,-32(fp)
   472c8:	0007c900 	call	7c90 <memcpy>
         vfd->cmploc += bcount;
   472cc:	e0bfff17 	ldw	r2,-4(fp)
   472d0:	10c00217 	ldw	r3,8(r2)
   472d4:	e0bff817 	ldw	r2,-32(fp)
   472d8:	1887883a 	add	r3,r3,r2
   472dc:	e0bfff17 	ldw	r2,-4(fp)
   472e0:	10c00215 	stw	r3,8(r2)
      }
      vfs_unlock();
   472e4:	01000144 	movi	r4,5
   472e8:	002b7b00 	call	2b7b0 <post_app_sem>
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
   472ec:	e13ff817 	ldw	r4,-32(fp)
   472f0:	e17ffd17 	ldw	r5,-12(fp)
   472f4:	00152500 	call	15250 <__udivsi3>
   472f8:	00000306 	br	47308 <vfread+0x178>
   }

   vfs_unlock();
   472fc:	01000144 	movi	r4,5
   47300:	002b7b00 	call	2b7b0 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
   47304:	0005883a 	mov	r2,zero
#endif   /* HT_LOCALFS */
}
   47308:	e037883a 	mov	sp,fp
   4730c:	dfc00117 	ldw	ra,4(sp)
   47310:	df000017 	ldw	fp,0(sp)
   47314:	dec00204 	addi	sp,sp,8
   47318:	f800283a 	ret

0004731c <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   4731c:	defff204 	addi	sp,sp,-56
   47320:	dfc00d15 	stw	ra,52(sp)
   47324:	df000c15 	stw	fp,48(sp)
   47328:	df000c04 	addi	fp,sp,48
   4732c:	e13ffc15 	stw	r4,-16(fp)
   47330:	e17ffd15 	stw	r5,-12(fp)
   47334:	e1bffe15 	stw	r6,-8(fp)
   47338:	e1ffff15 	stw	r7,-4(fp)
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
   4733c:	e13fff17 	ldw	r4,-4(fp)
   47340:	0047e000 	call	47e00 <isvfile_locked>
   47344:	1000021e 	bne	r2,zero,47350 <vfwrite_locked+0x34>
   {
#ifdef HT_LOCALFS
      /* default to call on local system */
      return(fwrite(buf, size, items, (FILE*)vfd));
#else
      return EBADF;
   47348:	00800244 	movi	r2,9
   4734c:	0000da06 	br	476b8 <vfwrite_locked+0x39c>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
   47350:	e0bfff17 	ldw	r2,-4(fp)
   47354:	10800117 	ldw	r2,4(r2)
   47358:	10800a17 	ldw	r2,40(r2)
   4735c:	10000e26 	beq	r2,zero,47398 <vfwrite_locked+0x7c>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
   47360:	e0bfff17 	ldw	r2,-4(fp)
   47364:	10800117 	ldw	r2,4(r2)
   47368:	10800a17 	ldw	r2,40(r2)
   4736c:	e0bff415 	stw	r2,-48(fp)
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
   47370:	e0bff417 	ldw	r2,-48(fp)
   47374:	10800417 	ldw	r2,16(r2)
   47378:	e13ffc17 	ldw	r4,-16(fp)
   4737c:	e17ffd17 	ldw	r5,-12(fp)
   47380:	e1bffe17 	ldw	r6,-8(fp)
   47384:	e1ffff17 	ldw	r7,-4(fp)
   47388:	103ee83a 	callr	r2
   4738c:	e0bff515 	stw	r2,-44(fp)
      return rc;
   47390:	e0bff517 	ldw	r2,-44(fp)
   47394:	0000c806 	br	476b8 <vfwrite_locked+0x39c>

#else    /* HT_RWVFS */

   /* the caller is trying to write to a file that's been deleted,
      so he writes 0 data */
   if (vfd->file == NULL)
   47398:	e0bfff17 	ldw	r2,-4(fp)
   4739c:	10800117 	ldw	r2,4(r2)
   473a0:	1000021e 	bne	r2,zero,473ac <vfwrite_locked+0x90>
   {
      return 0;
   473a4:	0005883a 	mov	r2,zero
   473a8:	0000c306 	br	476b8 <vfwrite_locked+0x39c>
   }

   vfp = vfd->file;
   473ac:	e0bfff17 	ldw	r2,-4(fp)
   473b0:	10800117 	ldw	r2,4(r2)
   473b4:	e0bff615 	stw	r2,-40(fp)

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
   473b8:	e0bff617 	ldw	r2,-40(fp)
   473bc:	1080058b 	ldhu	r2,22(r2)
   473c0:	10bfffcc 	andi	r2,r2,65535
   473c4:	1080080c 	andi	r2,r2,32
   473c8:	1000051e 	bne	r2,zero,473e0 <vfwrite_locked+0xc4>
   {
      vfd->error = ENP_FILEIO;
   473cc:	e0bfff17 	ldw	r2,-4(fp)
   473d0:	00fff984 	movi	r3,-26
   473d4:	10c00415 	stw	r3,16(r2)
      return 0;
   473d8:	0005883a 	mov	r2,zero
   473dc:	0000b606 	br	476b8 <vfwrite_locked+0x39c>
   }

   /* compute number of bytes to write */
   bcount = size * items;
   473e0:	e0fffd17 	ldw	r3,-12(fp)
   473e4:	e0bffe17 	ldw	r2,-8(fp)
   473e8:	1885383a 	mul	r2,r3,r2
   473ec:	e0bff715 	stw	r2,-36(fp)

   /* get rid of this degenerate case up front */
   if (bcount == 0)
   473f0:	e0bff717 	ldw	r2,-36(fp)
   473f4:	1000021e 	bne	r2,zero,47400 <vfwrite_locked+0xe4>
   {
      return 0;
   473f8:	0005883a 	mov	r2,zero
   473fc:	0000ae06 	br	476b8 <vfwrite_locked+0x39c>
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
   47400:	e0bff617 	ldw	r2,-40(fp)
   47404:	10800617 	ldw	r2,24(r2)
   47408:	10003d1e 	bne	r2,zero,47500 <vfwrite_locked+0x1e4>
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
   4740c:	e0bff717 	ldw	r2,-36(fp)
   47410:	10bfffc4 	addi	r2,r2,-1
   47414:	1004d37a 	srli	r2,r2,13
   47418:	10800044 	addi	r2,r2,1
   4741c:	1004937a 	slli	r2,r2,13
   47420:	e0bff815 	stw	r2,-32(fp)

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
   47424:	e13ff817 	ldw	r4,-32(fp)
   47428:	004674c0 	call	4674c <vf_alloc_buffer>
   4742c:	1007883a 	mov	r3,r2
   47430:	e0bff617 	ldw	r2,-40(fp)
   47434:	10c00615 	stw	r3,24(r2)

      /* if the allocation failed */
      if (!(vfp->data))
   47438:	e0bff617 	ldw	r2,-40(fp)
   4743c:	10800617 	ldw	r2,24(r2)
   47440:	1000051e 	bne	r2,zero,47458 <vfwrite_locked+0x13c>
      {
         vfd->error = ENP_NOMEM;
   47444:	e0bfff17 	ldw	r2,-4(fp)
   47448:	00fffb04 	movi	r3,-20
   4744c:	10c00415 	stw	r3,16(r2)
         return 0;
   47450:	0005883a 	mov	r2,zero
   47454:	00009806 	br	476b8 <vfwrite_locked+0x39c>
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
   47458:	e0bff617 	ldw	r2,-40(fp)
   4745c:	e0fff817 	ldw	r3,-32(fp)
   47460:	10c00915 	stw	r3,36(r2)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
   47464:	e0bff617 	ldw	r2,-40(fp)
   47468:	e0fff717 	ldw	r3,-36(fp)
   4746c:	10c00715 	stw	r3,28(r2)
      vfp->comp_size = bcount;
   47470:	e0bff617 	ldw	r2,-40(fp)
   47474:	e0fff717 	ldw	r3,-36(fp)
   47478:	10c00815 	stw	r3,32(r2)

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
   4747c:	e0bff617 	ldw	r2,-40(fp)
   47480:	10c00617 	ldw	r3,24(r2)
   47484:	e0bff717 	ldw	r2,-36(fp)
   47488:	1887883a 	add	r3,r3,r2
   4748c:	e0bfff17 	ldw	r2,-4(fp)
   47490:	10c00215 	stw	r3,8(r2)

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
   47494:	e0bff617 	ldw	r2,-40(fp)
   47498:	10c0058b 	ldhu	r3,22(r2)
   4749c:	00bfff84 	movi	r2,-2
   474a0:	1884703a 	and	r2,r3,r2
   474a4:	1007883a 	mov	r3,r2
   474a8:	e0bff617 	ldw	r2,-40(fp)
   474ac:	10c0058d 	sth	r3,22(r2)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;
   474b0:	e0bff617 	ldw	r2,-40(fp)
   474b4:	1080058b 	ldhu	r2,22(r2)
   474b8:	10808014 	ori	r2,r2,512
   474bc:	1007883a 	mov	r3,r2
   474c0:	e0bff617 	ldw	r2,-40(fp)
   474c4:	10c0058d 	sth	r3,22(r2)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
   474c8:	e0bff617 	ldw	r2,-40(fp)
   474cc:	1080058b 	ldhu	r2,22(r2)
   474d0:	10802014 	ori	r2,r2,128
   474d4:	1007883a 	mov	r3,r2
   474d8:	e0bff617 	ldw	r2,-40(fp)
   474dc:	10c0058d 	sth	r3,22(r2)

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
   474e0:	e0bff617 	ldw	r2,-40(fp)
   474e4:	10800617 	ldw	r2,24(r2)
   474e8:	1009883a 	mov	r4,r2
   474ec:	e17ffc17 	ldw	r5,-16(fp)
   474f0:	e1bff717 	ldw	r6,-36(fp)
   474f4:	0007c900 	call	7c90 <memcpy>

      /* return the number of "items" written */
      return items;
   474f8:	e0bffe17 	ldw	r2,-8(fp)
   474fc:	00006e06 	br	476b8 <vfwrite_locked+0x39c>
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
   47500:	e0bfff17 	ldw	r2,-4(fp)
   47504:	10800217 	ldw	r2,8(r2)
   47508:	1007883a 	mov	r3,r2
   4750c:	e0bff617 	ldw	r2,-40(fp)
   47510:	10800617 	ldw	r2,24(r2)
   47514:	1885c83a 	sub	r2,r3,r2
   47518:	e0bff915 	stw	r2,-28(fp)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
   4751c:	e0fff917 	ldw	r3,-28(fp)
   47520:	e0bff717 	ldw	r2,-36(fp)
   47524:	1885883a 	add	r2,r3,r2
   47528:	e0fff617 	ldw	r3,-40(fp)
   4752c:	18c00917 	ldw	r3,36(r3)
   47530:	1880382e 	bgeu	r3,r2,47614 <vfwrite_locked+0x2f8>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
   47534:	e0fff917 	ldw	r3,-28(fp)
   47538:	e0bff717 	ldw	r2,-36(fp)
   4753c:	1885883a 	add	r2,r3,r2
   47540:	10bfffc4 	addi	r2,r2,-1
   47544:	1004d37a 	srli	r2,r2,13
   47548:	10800044 	addi	r2,r2,1
   4754c:	1004937a 	slli	r2,r2,13
   47550:	e0bffa15 	stw	r2,-24(fp)
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
   47554:	e13ffa17 	ldw	r4,-24(fp)
   47558:	004674c0 	call	4674c <vf_alloc_buffer>
   4755c:	e0bffb15 	stw	r2,-20(fp)

      /* check for allocation failure */
      if (!new_buffer)
   47560:	e0bffb17 	ldw	r2,-20(fp)
   47564:	1000051e 	bne	r2,zero,4757c <vfwrite_locked+0x260>
      {
         vfd->error = ENP_NOMEM;
   47568:	e0bfff17 	ldw	r2,-4(fp)
   4756c:	00fffb04 	movi	r3,-20
   47570:	10c00415 	stw	r3,16(r2)
         return 0;
   47574:	0005883a 	mov	r2,zero
   47578:	00004f06 	br	476b8 <vfwrite_locked+0x39c>
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
   4757c:	e0bff617 	ldw	r2,-40(fp)
   47580:	10c00617 	ldw	r3,24(r2)
   47584:	e0bff617 	ldw	r2,-40(fp)
   47588:	10800817 	ldw	r2,32(r2)
   4758c:	e13ffb17 	ldw	r4,-20(fp)
   47590:	180b883a 	mov	r5,r3
   47594:	100d883a 	mov	r6,r2
   47598:	0007c900 	call	7c90 <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
   4759c:	e0bff617 	ldw	r2,-40(fp)
   475a0:	1080058b 	ldhu	r2,22(r2)
   475a4:	10bfffcc 	andi	r2,r2,65535
   475a8:	1080200c 	andi	r2,r2,128
   475ac:	10000726 	beq	r2,zero,475cc <vfwrite_locked+0x2b0>
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
   475b0:	e0bff617 	ldw	r2,-40(fp)
   475b4:	10c00617 	ldw	r3,24(r2)
   475b8:	e0bff617 	ldw	r2,-40(fp)
   475bc:	10800917 	ldw	r2,36(r2)
   475c0:	1809883a 	mov	r4,r3
   475c4:	100b883a 	mov	r5,r2
   475c8:	00468140 	call	46814 <vf_free_buffer>
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
   475cc:	e0bff617 	ldw	r2,-40(fp)
   475d0:	e0fffb17 	ldw	r3,-20(fp)
   475d4:	10c00615 	stw	r3,24(r2)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
   475d8:	e0bff617 	ldw	r2,-40(fp)
   475dc:	e0fffa17 	ldw	r3,-24(fp)
   475e0:	10c00915 	stw	r3,36(r2)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
   475e4:	e0bff617 	ldw	r2,-40(fp)
   475e8:	1080058b 	ldhu	r2,22(r2)
   475ec:	10802014 	ori	r2,r2,128
   475f0:	1007883a 	mov	r3,r2
   475f4:	e0bff617 	ldw	r2,-40(fp)
   475f8:	10c0058d 	sth	r3,22(r2)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
   475fc:	e0bff617 	ldw	r2,-40(fp)
   47600:	10c00617 	ldw	r3,24(r2)
   47604:	e0bff917 	ldw	r2,-28(fp)
   47608:	1887883a 	add	r3,r3,r2
   4760c:	e0bfff17 	ldw	r2,-4(fp)
   47610:	10c00215 	stw	r3,8(r2)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
   47614:	e0bfff17 	ldw	r2,-4(fp)
   47618:	10800217 	ldw	r2,8(r2)
   4761c:	1009883a 	mov	r4,r2
   47620:	e17ffc17 	ldw	r5,-16(fp)
   47624:	e1bff717 	ldw	r6,-36(fp)
   47628:	0007c900 	call	7c90 <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
   4762c:	e0bfff17 	ldw	r2,-4(fp)
   47630:	10c00217 	ldw	r3,8(r2)
   47634:	e0bff717 	ldw	r2,-36(fp)
   47638:	1887883a 	add	r3,r3,r2
   4763c:	e0bfff17 	ldw	r2,-4(fp)
   47640:	10c00215 	stw	r3,8(r2)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
   47644:	e0fff917 	ldw	r3,-28(fp)
   47648:	e0bff717 	ldw	r2,-36(fp)
   4764c:	1885883a 	add	r2,r3,r2
   47650:	e0fff617 	ldw	r3,-40(fp)
   47654:	18c00817 	ldw	r3,32(r3)
   47658:	1880052e 	bgeu	r3,r2,47670 <vfwrite_locked+0x354>
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
   4765c:	e0fff917 	ldw	r3,-28(fp)
   47660:	e0bff717 	ldw	r2,-36(fp)
   47664:	1887883a 	add	r3,r3,r2
   47668:	e0bff617 	ldw	r2,-40(fp)
   4766c:	10c00815 	stw	r3,32(r2)
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
   47670:	e0bff617 	ldw	r2,-40(fp)
   47674:	10c00817 	ldw	r3,32(r2)
   47678:	e0bff617 	ldw	r2,-40(fp)
   4767c:	10c00715 	stw	r3,28(r2)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
   47680:	e0bff617 	ldw	r2,-40(fp)
   47684:	10c0058b 	ldhu	r3,22(r2)
   47688:	00bfff84 	movi	r2,-2
   4768c:	1884703a 	and	r2,r3,r2
   47690:	1007883a 	mov	r3,r2
   47694:	e0bff617 	ldw	r2,-40(fp)
   47698:	10c0058d 	sth	r3,22(r2)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
   4769c:	e0bff617 	ldw	r2,-40(fp)
   476a0:	1080058b 	ldhu	r2,22(r2)
   476a4:	10808014 	ori	r2,r2,512
   476a8:	1007883a 	mov	r3,r2
   476ac:	e0bff617 	ldw	r2,-40(fp)
   476b0:	10c0058d 	sth	r3,22(r2)

   /* return the number of "items" written */
   return items;
   476b4:	e0bffe17 	ldw	r2,-8(fp)

#endif   /* HT_RWVFS */
}
   476b8:	e037883a 	mov	sp,fp
   476bc:	dfc00117 	ldw	ra,4(sp)
   476c0:	df000017 	ldw	fp,0(sp)
   476c4:	dec00204 	addi	sp,sp,8
   476c8:	f800283a 	ret

000476cc <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   476cc:	defff904 	addi	sp,sp,-28
   476d0:	dfc00615 	stw	ra,24(sp)
   476d4:	df000515 	stw	fp,20(sp)
   476d8:	df000504 	addi	fp,sp,20
   476dc:	e13ffc15 	stw	r4,-16(fp)
   476e0:	e17ffd15 	stw	r5,-12(fp)
   476e4:	e1bffe15 	stw	r6,-8(fp)
   476e8:	e1ffff15 	stw	r7,-4(fp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
   476ec:	01000144 	movi	r4,5
   476f0:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
   476f4:	e13ffc17 	ldw	r4,-16(fp)
   476f8:	e17ffd17 	ldw	r5,-12(fp)
   476fc:	e1bffe17 	ldw	r6,-8(fp)
   47700:	e1ffff17 	ldw	r7,-4(fp)
   47704:	004731c0 	call	4731c <vfwrite_locked>
   47708:	e0bffb15 	stw	r2,-20(fp)

   /* unlock the VFS */
   vfs_unlock();
   4770c:	01000144 	movi	r4,5
   47710:	002b7b00 	call	2b7b0 <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
   47714:	e0bffb17 	ldw	r2,-20(fp)
}
   47718:	e037883a 	mov	sp,fp
   4771c:	dfc00117 	ldw	ra,4(sp)
   47720:	df000017 	ldw	fp,0(sp)
   47724:	dec00204 	addi	sp,sp,8
   47728:	f800283a 	ret

0004772c <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
   4772c:	defff904 	addi	sp,sp,-28
   47730:	dfc00615 	stw	ra,24(sp)
   47734:	df000515 	stw	fp,20(sp)
   47738:	df000504 	addi	fp,sp,20
   4773c:	e13ffd15 	stw	r4,-12(fp)
   47740:	e17ffe15 	stw	r5,-8(fp)
   47744:	e1bfff15 	stw	r6,-4(fp)
   /* lock the VFS */
   vfs_lock();
   47748:	01000144 	movi	r4,5
   4774c:	002b6f40 	call	2b6f4 <wait_app_sem>

   if (isvfile_locked(vfd))
   47750:	e13ffd17 	ldw	r4,-12(fp)
   47754:	0047e000 	call	47e00 <isvfile_locked>
   47758:	10003f26 	beq	r2,zero,47858 <vfseek+0x12c>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
   4775c:	e0bffd17 	ldw	r2,-12(fp)
   47760:	10800117 	ldw	r2,4(r2)
   47764:	1000041e 	bne	r2,zero,47778 <vfseek+0x4c>
      {
         vfs_unlock();
   47768:	01000144 	movi	r4,5
   4776c:	002b7b00 	call	2b7b0 <post_app_sem>
         return -1;
   47770:	00bfffc4 	movi	r2,-1
   47774:	00003b06 	br	47864 <vfseek+0x138>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
   47778:	e0bffd17 	ldw	r2,-12(fp)
   4777c:	10800117 	ldw	r2,4(r2)
   47780:	10800a17 	ldw	r2,40(r2)
   47784:	10000f26 	beq	r2,zero,477c4 <vfseek+0x98>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
   47788:	e0bffd17 	ldw	r2,-12(fp)
   4778c:	10800117 	ldw	r2,4(r2)
   47790:	10800a17 	ldw	r2,40(r2)
   47794:	e0bffb15 	stw	r2,-20(fp)
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
   47798:	e0bffb17 	ldw	r2,-20(fp)
   4779c:	10800517 	ldw	r2,20(r2)
   477a0:	e13ffd17 	ldw	r4,-12(fp)
   477a4:	e17ffe17 	ldw	r5,-8(fp)
   477a8:	e1bfff17 	ldw	r6,-4(fp)
   477ac:	103ee83a 	callr	r2
   477b0:	e0bffc15 	stw	r2,-16(fp)
         vfs_unlock();
   477b4:	01000144 	movi	r4,5
   477b8:	002b7b00 	call	2b7b0 <post_app_sem>
         return rc;
   477bc:	e0bffc17 	ldw	r2,-16(fp)
   477c0:	00002806 	br	47864 <vfseek+0x138>
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
   477c4:	e0bfff17 	ldw	r2,-4(fp)
   477c8:	10c00060 	cmpeqi	r3,r2,1
   477cc:	18000b1e 	bne	r3,zero,477fc <vfseek+0xd0>
   477d0:	10c000a0 	cmpeqi	r3,r2,2
   477d4:	1800101e 	bne	r3,zero,47818 <vfseek+0xec>
   477d8:	10001b1e 	bne	r2,zero,47848 <vfseek+0x11c>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
   477dc:	e0bffd17 	ldw	r2,-12(fp)
   477e0:	10800117 	ldw	r2,4(r2)
   477e4:	10c00617 	ldw	r3,24(r2)
   477e8:	e0bffe17 	ldw	r2,-8(fp)
   477ec:	1887883a 	add	r3,r3,r2
   477f0:	e0bffd17 	ldw	r2,-12(fp)
   477f4:	10c00215 	stw	r3,8(r2)
         break;
   477f8:	00001306 	br	47848 <vfseek+0x11c>
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
   477fc:	e0bffd17 	ldw	r2,-12(fp)
   47800:	10c00217 	ldw	r3,8(r2)
   47804:	e0bffe17 	ldw	r2,-8(fp)
   47808:	1887883a 	add	r3,r3,r2
   4780c:	e0bffd17 	ldw	r2,-12(fp)
   47810:	10c00215 	stw	r3,8(r2)
         break;
   47814:	00000c06 	br	47848 <vfseek+0x11c>
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
   47818:	e0bffd17 	ldw	r2,-12(fp)
   4781c:	10800117 	ldw	r2,4(r2)
   47820:	10c00617 	ldw	r3,24(r2)
   47824:	e0bffd17 	ldw	r2,-12(fp)
   47828:	10800117 	ldw	r2,4(r2)
   4782c:	11000817 	ldw	r4,32(r2)
   47830:	e0bffe17 	ldw	r2,-8(fp)
   47834:	2085883a 	add	r2,r4,r2
   47838:	1887883a 	add	r3,r3,r2
   4783c:	e0bffd17 	ldw	r2,-12(fp)
   47840:	10c00215 	stw	r3,8(r2)
         break;
   47844:	0001883a 	nop
      }
      vfs_unlock();
   47848:	01000144 	movi	r4,5
   4784c:	002b7b00 	call	2b7b0 <post_app_sem>
      return(0);
   47850:	0005883a 	mov	r2,zero
   47854:	00000306 	br	47864 <vfseek+0x138>
   }

   vfs_unlock();
   47858:	01000144 	movi	r4,5
   4785c:	002b7b00 	call	2b7b0 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
   47860:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
   47864:	e037883a 	mov	sp,fp
   47868:	dfc00117 	ldw	ra,4(sp)
   4786c:	df000017 	ldw	fp,0(sp)
   47870:	dec00204 	addi	sp,sp,8
   47874:	f800283a 	ret

00047878 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
   47878:	defffb04 	addi	sp,sp,-20
   4787c:	dfc00415 	stw	ra,16(sp)
   47880:	df000315 	stw	fp,12(sp)
   47884:	df000304 	addi	fp,sp,12
   47888:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
   4788c:	01000144 	movi	r4,5
   47890:	002b6f40 	call	2b6f4 <wait_app_sem>

   if (isvfile_locked(vfd))
   47894:	e13fff17 	ldw	r4,-4(fp)
   47898:	0047e000 	call	47e00 <isvfile_locked>
   4789c:	10003226 	beq	r2,zero,47968 <vftell+0xf0>
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
   478a0:	e0bfff17 	ldw	r2,-4(fp)
   478a4:	10800117 	ldw	r2,4(r2)
   478a8:	1000041e 	bne	r2,zero,478bc <vftell+0x44>
      {
         vfs_unlock();
   478ac:	01000144 	movi	r4,5
   478b0:	002b7b00 	call	2b7b0 <post_app_sem>
         return -1;
   478b4:	00bfffc4 	movi	r2,-1
   478b8:	00002e06 	br	47974 <vftell+0xfc>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
   478bc:	e0bfff17 	ldw	r2,-4(fp)
   478c0:	10800117 	ldw	r2,4(r2)
   478c4:	10800a17 	ldw	r2,40(r2)
   478c8:	10000d26 	beq	r2,zero,47900 <vftell+0x88>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
   478cc:	e0bfff17 	ldw	r2,-4(fp)
   478d0:	10800117 	ldw	r2,4(r2)
   478d4:	10800a17 	ldw	r2,40(r2)
   478d8:	e0bffd15 	stw	r2,-12(fp)
         long  rc;

         rc = vfp->r_ftell(vfd);
   478dc:	e0bffd17 	ldw	r2,-12(fp)
   478e0:	10800617 	ldw	r2,24(r2)
   478e4:	e13fff17 	ldw	r4,-4(fp)
   478e8:	103ee83a 	callr	r2
   478ec:	e0bffe15 	stw	r2,-8(fp)
         vfs_unlock();
   478f0:	01000144 	movi	r4,5
   478f4:	002b7b00 	call	2b7b0 <post_app_sem>
         return rc;
   478f8:	e0bffe17 	ldw	r2,-8(fp)
   478fc:	00001d06 	br	47974 <vftell+0xfc>
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
   47900:	e0bfff17 	ldw	r2,-4(fp)
   47904:	10c00217 	ldw	r3,8(r2)
   47908:	e0bfff17 	ldw	r2,-4(fp)
   4790c:	10800117 	ldw	r2,4(r2)
   47910:	11000617 	ldw	r4,24(r2)
   47914:	e0bfff17 	ldw	r2,-4(fp)
   47918:	10800117 	ldw	r2,4(r2)
   4791c:	10800817 	ldw	r2,32(r2)
   47920:	2085883a 	add	r2,r4,r2
   47924:	1880061e 	bne	r3,r2,47940 <vftell+0xc8>
      {
         vfs_unlock();
   47928:	01000144 	movi	r4,5
   4792c:	002b7b00 	call	2b7b0 <post_app_sem>

         return vfd->file->comp_size;
   47930:	e0bfff17 	ldw	r2,-4(fp)
   47934:	10800117 	ldw	r2,4(r2)
   47938:	10800817 	ldw	r2,32(r2)
   4793c:	00000d06 	br	47974 <vftell+0xfc>
      }
      else
      {
         vfs_unlock();
   47940:	01000144 	movi	r4,5
   47944:	002b7b00 	call	2b7b0 <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
   47948:	e0bfff17 	ldw	r2,-4(fp)
   4794c:	10800217 	ldw	r2,8(r2)
   47950:	1007883a 	mov	r3,r2
   47954:	e0bfff17 	ldw	r2,-4(fp)
   47958:	10800117 	ldw	r2,4(r2)
   4795c:	10800617 	ldw	r2,24(r2)
   47960:	1885c83a 	sub	r2,r3,r2
   47964:	00000306 	br	47974 <vftell+0xfc>
      }
   }

   vfs_unlock();
   47968:	01000144 	movi	r4,5
   4796c:	002b7b00 	call	2b7b0 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
   47970:	00800244 	movi	r2,9
#endif   /* HT_LOCALFS */
}
   47974:	e037883a 	mov	sp,fp
   47978:	dfc00117 	ldw	ra,4(sp)
   4797c:	df000017 	ldw	fp,0(sp)
   47980:	dec00204 	addi	sp,sp,8
   47984:	f800283a 	ret

00047988 <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
   47988:	defffb04 	addi	sp,sp,-20
   4798c:	dfc00415 	stw	ra,16(sp)
   47990:	df000315 	stw	fp,12(sp)
   47994:	df000304 	addi	fp,sp,12
   47998:	e13fff15 	stw	r4,-4(fp)
   int   chr;

   if (isvfile_locked(vfd))
   4799c:	e13fff17 	ldw	r4,-4(fp)
   479a0:	0047e000 	call	47e00 <isvfile_locked>
   479a4:	10002f26 	beq	r2,zero,47a64 <vgetc_locked+0xdc>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
   479a8:	e0bfff17 	ldw	r2,-4(fp)
   479ac:	10800117 	ldw	r2,4(r2)
   479b0:	1000021e 	bne	r2,zero,479bc <vgetc_locked+0x34>
      {
         return EOF;
   479b4:	00bfffc4 	movi	r2,-1
   479b8:	00002c06 	br	47a6c <vgetc_locked+0xe4>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
   479bc:	e0bfff17 	ldw	r2,-4(fp)
   479c0:	10800117 	ldw	r2,4(r2)
   479c4:	10800a17 	ldw	r2,40(r2)
   479c8:	10000926 	beq	r2,zero,479f0 <vgetc_locked+0x68>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
   479cc:	e0bfff17 	ldw	r2,-4(fp)
   479d0:	10800117 	ldw	r2,4(r2)
   479d4:	10800a17 	ldw	r2,40(r2)
   479d8:	e0bffe15 	stw	r2,-8(fp)
         return (vfp->r_fgetc(vfd));
   479dc:	e0bffe17 	ldw	r2,-8(fp)
   479e0:	10800717 	ldw	r2,28(r2)
   479e4:	e13fff17 	ldw	r4,-4(fp)
   479e8:	103ee83a 	callr	r2
   479ec:	00001f06 	br	47a6c <vgetc_locked+0xe4>
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
   479f0:	e0bfff17 	ldw	r2,-4(fp)
   479f4:	10800117 	ldw	r2,4(r2)
   479f8:	10800617 	ldw	r2,24(r2)
   479fc:	1000021e 	bne	r2,zero,47a08 <vgetc_locked+0x80>
         return EOF;
   47a00:	00bfffc4 	movi	r2,-1
   47a04:	00001906 	br	47a6c <vgetc_locked+0xe4>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
   47a08:	e0bfff17 	ldw	r2,-4(fp)
   47a0c:	10c00217 	ldw	r3,8(r2)
   47a10:	e0bfff17 	ldw	r2,-4(fp)
   47a14:	10800117 	ldw	r2,4(r2)
   47a18:	11000617 	ldw	r4,24(r2)
   47a1c:	e0bfff17 	ldw	r2,-4(fp)
   47a20:	10800117 	ldw	r2,4(r2)
   47a24:	10800817 	ldw	r2,32(r2)
   47a28:	2085883a 	add	r2,r4,r2
   47a2c:	18800336 	bltu	r3,r2,47a3c <vgetc_locked+0xb4>
            chr = EOF;
   47a30:	00bfffc4 	movi	r2,-1
   47a34:	e0bffd15 	stw	r2,-12(fp)
   47a38:	00000806 	br	47a5c <vgetc_locked+0xd4>
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
   47a3c:	e0bfff17 	ldw	r2,-4(fp)
   47a40:	10800217 	ldw	r2,8(r2)
   47a44:	11000044 	addi	r4,r2,1
   47a48:	e0ffff17 	ldw	r3,-4(fp)
   47a4c:	19000215 	stw	r4,8(r3)
   47a50:	10800003 	ldbu	r2,0(r2)
   47a54:	10803fcc 	andi	r2,r2,255
   47a58:	e0bffd15 	stw	r2,-12(fp)
#ifdef HTML_COMPRESSION
      }  /* need to close brace form if...else; */
#endif   /* HTML_COMPRESSION */

      return chr;
   47a5c:	e0bffd17 	ldw	r2,-12(fp)
   47a60:	00000206 	br	47a6c <vgetc_locked+0xe4>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
   47a64:	002b0f40 	call	2b0f4 <dtrap>
   return EOF;
   47a68:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
   47a6c:	e037883a 	mov	sp,fp
   47a70:	dfc00117 	ldw	ra,4(sp)
   47a74:	df000017 	ldw	fp,0(sp)
   47a78:	dec00204 	addi	sp,sp,8
   47a7c:	f800283a 	ret

00047a80 <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
   47a80:	defffc04 	addi	sp,sp,-16
   47a84:	dfc00315 	stw	ra,12(sp)
   47a88:	df000215 	stw	fp,8(sp)
   47a8c:	df000204 	addi	fp,sp,8
   47a90:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
   47a94:	01000144 	movi	r4,5
   47a98:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
   47a9c:	e13fff17 	ldw	r4,-4(fp)
   47aa0:	00479880 	call	47988 <vgetc_locked>
   47aa4:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
   47aa8:	01000144 	movi	r4,5
   47aac:	002b7b00 	call	2b7b0 <post_app_sem>
   return rc;
   47ab0:	e0bffe17 	ldw	r2,-8(fp)
}
   47ab4:	e037883a 	mov	sp,fp
   47ab8:	dfc00117 	ldw	ra,4(sp)
   47abc:	df000017 	ldw	fp,0(sp)
   47ac0:	dec00204 	addi	sp,sp,8
   47ac4:	f800283a 	ret

00047ac8 <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
   47ac8:	defffb04 	addi	sp,sp,-20
   47acc:	dfc00415 	stw	ra,16(sp)
   47ad0:	df000315 	stw	fp,12(sp)
   47ad4:	df000304 	addi	fp,sp,12
   47ad8:	e13fff15 	stw	r4,-4(fp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
   47adc:	e0bfff17 	ldw	r2,-4(fp)
   47ae0:	10800003 	ldbu	r2,0(r2)
   47ae4:	10803fcc 	andi	r2,r2,255
   47ae8:	1080201c 	xori	r2,r2,128
   47aec:	10bfe004 	addi	r2,r2,-128
   47af0:	10800be0 	cmpeqi	r2,r2,47
   47af4:	1000071e 	bne	r2,zero,47b14 <vfslookup_locked+0x4c>
   47af8:	e0bfff17 	ldw	r2,-4(fp)
   47afc:	10800003 	ldbu	r2,0(r2)
   47b00:	10803fcc 	andi	r2,r2,255
   47b04:	1080201c 	xori	r2,r2,128
   47b08:	10bfe004 	addi	r2,r2,-128
   47b0c:	10801718 	cmpnei	r2,r2,92
   47b10:	1000191e 	bne	r2,zero,47b78 <vfslookup_locked+0xb0>
   {
      cp = strippath(name);
   47b14:	e13fff17 	ldw	r4,-4(fp)
   47b18:	0047c340 	call	47c34 <strippath>
   47b1c:	e0bffe15 	stw	r2,-8(fp)

      if (!cp) /* strippath coundn't match our path */
   47b20:	e0bffe17 	ldw	r2,-8(fp)
   47b24:	1000121e 	bne	r2,zero,47b70 <vfslookup_locked+0xa8>
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
   47b28:	e0bfff17 	ldw	r2,-4(fp)
   47b2c:	10800003 	ldbu	r2,0(r2)
   47b30:	10803fcc 	andi	r2,r2,255
   47b34:	1080201c 	xori	r2,r2,128
   47b38:	10bfe004 	addi	r2,r2,-128
   47b3c:	10800be0 	cmpeqi	r2,r2,47
   47b40:	1000071e 	bne	r2,zero,47b60 <vfslookup_locked+0x98>
   47b44:	e0bfff17 	ldw	r2,-4(fp)
   47b48:	10800003 	ldbu	r2,0(r2)
   47b4c:	10803fcc 	andi	r2,r2,255
   47b50:	1080201c 	xori	r2,r2,128
   47b54:	10bfe004 	addi	r2,r2,-128
   47b58:	10801718 	cmpnei	r2,r2,92
   47b5c:	1000061e 	bne	r2,zero,47b78 <vfslookup_locked+0xb0>
            name++;
   47b60:	e0bfff17 	ldw	r2,-4(fp)
   47b64:	10800044 	addi	r2,r2,1
   47b68:	e0bfff15 	stw	r2,-4(fp)
   47b6c:	00000206 	br	47b78 <vfslookup_locked+0xb0>
      }
      else
         name = cp ;
   47b70:	e0bffe17 	ldw	r2,-8(fp)
   47b74:	e0bfff15 	stw	r2,-4(fp)
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
   47b78:	e13fff17 	ldw	r4,-4(fp)
   47b7c:	01400fc4 	movi	r5,63
   47b80:	00085280 	call	8528 <strchr>
   47b84:	10000326 	beq	r2,zero,47b94 <vfslookup_locked+0xcc>
   {
      dtrap(); /* is this still allowed? */
   47b88:	002b0f40 	call	2b0f4 <dtrap>
      return NULL;
   47b8c:	0005883a 	mov	r2,zero
   47b90:	00001106 	br	47bd8 <vfslookup_locked+0x110>
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
   47b94:	d0a8c217 	ldw	r2,-23800(gp)
   47b98:	e0bffd15 	stw	r2,-12(fp)
   47b9c:	00000b06 	br	47bcc <vfslookup_locked+0x104>
   {
      if (strcmp(name, vp->name) == 0)
   47ba0:	e0bffd17 	ldw	r2,-12(fp)
   47ba4:	10800104 	addi	r2,r2,4
   47ba8:	e13fff17 	ldw	r4,-4(fp)
   47bac:	100b883a 	mov	r5,r2
   47bb0:	00116b40 	call	116b4 <strcmp>
   47bb4:	1000021e 	bne	r2,zero,47bc0 <vfslookup_locked+0xf8>
         return vp;
   47bb8:	e0bffd17 	ldw	r2,-12(fp)
   47bbc:	00000606 	br	47bd8 <vfslookup_locked+0x110>
   {
      dtrap(); /* is this still allowed? */
      return NULL;
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
   47bc0:	e0bffd17 	ldw	r2,-12(fp)
   47bc4:	10800017 	ldw	r2,0(r2)
   47bc8:	e0bffd15 	stw	r2,-12(fp)
   47bcc:	e0bffd17 	ldw	r2,-12(fp)
   47bd0:	103ff31e 	bne	r2,zero,47ba0 <__alt_mem_descriptor_memory+0xdf007ba0>
   {
      if (strcmp(name, vp->name) == 0)
         return vp;
   }

   return NULL;   /* fall to here if not found in for loop */
   47bd4:	0005883a 	mov	r2,zero
}
   47bd8:	e037883a 	mov	sp,fp
   47bdc:	dfc00117 	ldw	ra,4(sp)
   47be0:	df000017 	ldw	fp,0(sp)
   47be4:	dec00204 	addi	sp,sp,8
   47be8:	f800283a 	ret

00047bec <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
   47bec:	defffc04 	addi	sp,sp,-16
   47bf0:	dfc00315 	stw	ra,12(sp)
   47bf4:	df000215 	stw	fp,8(sp)
   47bf8:	df000204 	addi	fp,sp,8
   47bfc:	e13fff15 	stw	r4,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
   47c00:	01000144 	movi	r4,5
   47c04:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
   47c08:	e13fff17 	ldw	r4,-4(fp)
   47c0c:	0047ac80 	call	47ac8 <vfslookup_locked>
   47c10:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
   47c14:	01000144 	movi	r4,5
   47c18:	002b7b00 	call	2b7b0 <post_app_sem>
   return vp;
   47c1c:	e0bffe17 	ldw	r2,-8(fp)
}
   47c20:	e037883a 	mov	sp,fp
   47c24:	dfc00117 	ldw	ra,4(sp)
   47c28:	df000017 	ldw	fp,0(sp)
   47c2c:	dec00204 	addi	sp,sp,8
   47c30:	f800283a 	ret

00047c34 <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
   47c34:	defff904 	addi	sp,sp,-28
   47c38:	dfc00615 	stw	ra,24(sp)
   47c3c:	df000515 	stw	fp,20(sp)
   47c40:	df000504 	addi	fp,sp,20
   47c44:	e13fff15 	stw	r4,-4(fp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   47c48:	e13fff17 	ldw	r4,-4(fp)
   47c4c:	00268d00 	call	268d0 <uslash>
   47c50:	e0bffc15 	stw	r2,-16(fp)
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   47c54:	d0a05217 	ldw	r2,-32440(gp)
   47c58:	e0bffb15 	stw	r2,-20(fp)
   while (*path && *ntmp)
   47c5c:	00003c06 	br	47d50 <strippath+0x11c>
   {
      while (*path == '/') path++;   /* strip leading slash */
   47c60:	00000306 	br	47c70 <strippath+0x3c>
   47c64:	e0bffb17 	ldw	r2,-20(fp)
   47c68:	10800044 	addi	r2,r2,1
   47c6c:	e0bffb15 	stw	r2,-20(fp)
   47c70:	e0bffb17 	ldw	r2,-20(fp)
   47c74:	10800003 	ldbu	r2,0(r2)
   47c78:	10803fcc 	andi	r2,r2,255
   47c7c:	1080201c 	xori	r2,r2,128
   47c80:	10bfe004 	addi	r2,r2,-128
   47c84:	10800be0 	cmpeqi	r2,r2,47
   47c88:	103ff61e 	bne	r2,zero,47c64 <__alt_mem_descriptor_memory+0xdf007c64>
         if (*path == 0)
   47c8c:	e0bffb17 	ldw	r2,-20(fp)
   47c90:	10800003 	ldbu	r2,0(r2)
   47c94:	10803fcc 	andi	r2,r2,255
   47c98:	1080201c 	xori	r2,r2,128
   47c9c:	10bfe004 	addi	r2,r2,-128
   47ca0:	1000011e 	bne	r2,zero,47ca8 <strippath+0x74>
         break;
   47ca4:	00003606 	br	47d80 <strippath+0x14c>
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
   47ca8:	e13ffb17 	ldw	r4,-20(fp)
   47cac:	01400bc4 	movi	r5,47
   47cb0:	00085280 	call	8528 <strchr>
   47cb4:	e0bffe15 	stw	r2,-8(fp)
      if (ptmp)
   47cb8:	e0bffe17 	ldw	r2,-8(fp)
   47cbc:	10000526 	beq	r2,zero,47cd4 <strippath+0xa0>
         dirlen = ptmp - path;
   47cc0:	e0fffe17 	ldw	r3,-8(fp)
   47cc4:	e0bffb17 	ldw	r2,-20(fp)
   47cc8:	1885c83a 	sub	r2,r3,r2
   47ccc:	e0bffd15 	stw	r2,-12(fp)
   47cd0:	00000306 	br	47ce0 <strippath+0xac>
      else
         dirlen = strlen(path);
   47cd4:	e13ffb17 	ldw	r4,-20(fp)
   47cd8:	0008d080 	call	8d08 <strlen>
   47cdc:	e0bffd15 	stw	r2,-12(fp)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
   47ce0:	00000306 	br	47cf0 <strippath+0xbc>
   47ce4:	e0bffc17 	ldw	r2,-16(fp)
   47ce8:	10800044 	addi	r2,r2,1
   47cec:	e0bffc15 	stw	r2,-16(fp)
   47cf0:	e0bffc17 	ldw	r2,-16(fp)
   47cf4:	10800003 	ldbu	r2,0(r2)
   47cf8:	10803fcc 	andi	r2,r2,255
   47cfc:	1080201c 	xori	r2,r2,128
   47d00:	10bfe004 	addi	r2,r2,-128
   47d04:	10800be0 	cmpeqi	r2,r2,47
   47d08:	103ff61e 	bne	r2,zero,47ce4 <__alt_mem_descriptor_memory+0xdf007ce4>
         if (strncmp(ntmp, path, dirlen) == 0)
   47d0c:	e0bffd17 	ldw	r2,-12(fp)
   47d10:	e13ffc17 	ldw	r4,-16(fp)
   47d14:	e17ffb17 	ldw	r5,-20(fp)
   47d18:	100d883a 	mov	r6,r2
   47d1c:	00499180 	call	49918 <strncmp>
   47d20:	1000091e 	bne	r2,zero,47d48 <strippath+0x114>
      {
         path += dirlen;
   47d24:	e0bffd17 	ldw	r2,-12(fp)
   47d28:	e0fffb17 	ldw	r3,-20(fp)
   47d2c:	1885883a 	add	r2,r3,r2
   47d30:	e0bffb15 	stw	r2,-20(fp)
         ntmp += dirlen;
   47d34:	e0bffd17 	ldw	r2,-12(fp)
   47d38:	e0fffc17 	ldw	r3,-16(fp)
   47d3c:	1885883a 	add	r2,r3,r2
   47d40:	e0bffc15 	stw	r2,-16(fp)
   47d44:	00000206 	br	47d50 <strippath+0x11c>
      }
      else
         return NULL;   /* didn't match */
   47d48:	0005883a 	mov	r2,zero
   47d4c:	00002706 	br	47dec <strippath+0x1b8>
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
   47d50:	e0bffb17 	ldw	r2,-20(fp)
   47d54:	10800003 	ldbu	r2,0(r2)
   47d58:	10803fcc 	andi	r2,r2,255
   47d5c:	1080201c 	xori	r2,r2,128
   47d60:	10bfe004 	addi	r2,r2,-128
   47d64:	10000626 	beq	r2,zero,47d80 <strippath+0x14c>
   47d68:	e0bffc17 	ldw	r2,-16(fp)
   47d6c:	10800003 	ldbu	r2,0(r2)
   47d70:	10803fcc 	andi	r2,r2,255
   47d74:	1080201c 	xori	r2,r2,128
   47d78:	10bfe004 	addi	r2,r2,-128
   47d7c:	103fb81e 	bne	r2,zero,47c60 <__alt_mem_descriptor_memory+0xdf007c60>
         ntmp += dirlen;
      }
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   47d80:	e0bffb17 	ldw	r2,-20(fp)
   47d84:	10800003 	ldbu	r2,0(r2)
   47d88:	10803fcc 	andi	r2,r2,255
   47d8c:	1080201c 	xori	r2,r2,128
   47d90:	10bfe004 	addi	r2,r2,-128
   47d94:	1000141e 	bne	r2,zero,47de8 <strippath+0x1b4>
   {
      while (*ntmp == '\\' || *ntmp == '/')
   47d98:	00000306 	br	47da8 <strippath+0x174>
         ntmp++;
   47d9c:	e0bffc17 	ldw	r2,-16(fp)
   47da0:	10800044 	addi	r2,r2,1
   47da4:	e0bffc15 	stw	r2,-16(fp)
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   {
      while (*ntmp == '\\' || *ntmp == '/')
   47da8:	e0bffc17 	ldw	r2,-16(fp)
   47dac:	10800003 	ldbu	r2,0(r2)
   47db0:	10803fcc 	andi	r2,r2,255
   47db4:	1080201c 	xori	r2,r2,128
   47db8:	10bfe004 	addi	r2,r2,-128
   47dbc:	10801720 	cmpeqi	r2,r2,92
   47dc0:	103ff61e 	bne	r2,zero,47d9c <__alt_mem_descriptor_memory+0xdf007d9c>
   47dc4:	e0bffc17 	ldw	r2,-16(fp)
   47dc8:	10800003 	ldbu	r2,0(r2)
   47dcc:	10803fcc 	andi	r2,r2,255
   47dd0:	1080201c 	xori	r2,r2,128
   47dd4:	10bfe004 	addi	r2,r2,-128
   47dd8:	10800be0 	cmpeqi	r2,r2,47
   47ddc:	103fef1e 	bne	r2,zero,47d9c <__alt_mem_descriptor_memory+0xdf007d9c>
         ntmp++;
      return ntmp;
   47de0:	e0bffc17 	ldw	r2,-16(fp)
   47de4:	00000106 	br	47dec <strippath+0x1b8>
   }
   else
      return NULL;
   47de8:	0005883a 	mov	r2,zero
}
   47dec:	e037883a 	mov	sp,fp
   47df0:	dfc00117 	ldw	ra,4(sp)
   47df4:	df000017 	ldw	fp,0(sp)
   47df8:	dec00204 	addi	sp,sp,8
   47dfc:	f800283a 	ret

00047e00 <isvfile_locked>:
 * RETURNS: 
 */

int
isvfile_locked(VFILE * vfp)
{
   47e00:	defffd04 	addi	sp,sp,-12
   47e04:	df000215 	stw	fp,8(sp)
   47e08:	df000204 	addi	fp,sp,8
   47e0c:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
   47e10:	d0a8c117 	ldw	r2,-23804(gp)
   47e14:	e0bffe15 	stw	r2,-8(fp)
   47e18:	00000806 	br	47e3c <isvfile_locked+0x3c>
      if (vtmp == vfp)
   47e1c:	e0fffe17 	ldw	r3,-8(fp)
   47e20:	e0bfff17 	ldw	r2,-4(fp)
   47e24:	1880021e 	bne	r3,r2,47e30 <isvfile_locked+0x30>
      return TRUE;
   47e28:	00800044 	movi	r2,1
   47e2c:	00000606 	br	47e48 <isvfile_locked+0x48>
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
   47e30:	e0bffe17 	ldw	r2,-8(fp)
   47e34:	10800017 	ldw	r2,0(r2)
   47e38:	e0bffe15 	stw	r2,-8(fp)
   47e3c:	e0bffe17 	ldw	r2,-8(fp)
   47e40:	103ff61e 	bne	r2,zero,47e1c <__alt_mem_descriptor_memory+0xdf007e1c>
      if (vtmp == vfp)
      return TRUE;

   return FALSE;  /* passed pointer not found in list */
   47e44:	0005883a 	mov	r2,zero
}
   47e48:	e037883a 	mov	sp,fp
   47e4c:	df000017 	ldw	fp,0(sp)
   47e50:	dec00104 	addi	sp,sp,4
   47e54:	f800283a 	ret

00047e58 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
   47e58:	defffc04 	addi	sp,sp,-16
   47e5c:	dfc00315 	stw	ra,12(sp)
   47e60:	df000215 	stw	fp,8(sp)
   47e64:	df000204 	addi	fp,sp,8
   47e68:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
   47e6c:	01000144 	movi	r4,5
   47e70:	002b6f40 	call	2b6f4 <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
   47e74:	e13fff17 	ldw	r4,-4(fp)
   47e78:	0047e000 	call	47e00 <isvfile_locked>
   47e7c:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
   47e80:	01000144 	movi	r4,5
   47e84:	002b7b00 	call	2b7b0 <post_app_sem>
   return rc;
   47e88:	e0bffe17 	ldw	r2,-8(fp)
}
   47e8c:	e037883a 	mov	sp,fp
   47e90:	dfc00117 	ldw	ra,4(sp)
   47e94:	df000017 	ldw	fp,0(sp)
   47e98:	dec00204 	addi	sp,sp,8
   47e9c:	f800283a 	ret

00047ea0 <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
   47ea0:	defffd04 	addi	sp,sp,-12
   47ea4:	dfc00215 	stw	ra,8(sp)
   47ea8:	df000115 	stw	fp,4(sp)
   47eac:	df000104 	addi	fp,sp,4
   47eb0:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
   47eb4:	01000144 	movi	r4,5
   47eb8:	002b6f40 	call	2b6f4 <wait_app_sem>

   if (isvfile_locked(vfd))
   47ebc:	e13fff17 	ldw	r4,-4(fp)
   47ec0:	0047e000 	call	47e00 <isvfile_locked>
   47ec4:	10000526 	beq	r2,zero,47edc <vferror+0x3c>
   {
      vfs_unlock();
   47ec8:	01000144 	movi	r4,5
   47ecc:	002b7b00 	call	2b7b0 <post_app_sem>

      return vfd->error;
   47ed0:	e0bfff17 	ldw	r2,-4(fp)
   47ed4:	10800417 	ldw	r2,16(r2)
   47ed8:	00000306 	br	47ee8 <vferror+0x48>
   }

   vfs_unlock();
   47edc:	01000144 	movi	r4,5
   47ee0:	002b7b00 	call	2b7b0 <post_app_sem>

#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
   47ee4:	00bfffc4 	movi	r2,-1
#endif   /* HT_LOCALFS */
}
   47ee8:	e037883a 	mov	sp,fp
   47eec:	dfc00117 	ldw	ra,4(sp)
   47ef0:	df000017 	ldw	fp,0(sp)
   47ef4:	dec00204 	addi	sp,sp,8
   47ef8:	f800283a 	ret

00047efc <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
   47efc:	defffd04 	addi	sp,sp,-12
   47f00:	dfc00215 	stw	ra,8(sp)
   47f04:	df000115 	stw	fp,4(sp)
   47f08:	df000104 	addi	fp,sp,4
   47f0c:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
   47f10:	01000144 	movi	r4,5
   47f14:	002b6f40 	call	2b6f4 <wait_app_sem>

   if (isvfile_locked(vfd))
   47f18:	e13fff17 	ldw	r4,-4(fp)
   47f1c:	0047e000 	call	47e00 <isvfile_locked>
   47f20:	10000526 	beq	r2,zero,47f38 <vclearerr+0x3c>
   {
      vfs_unlock();
   47f24:	01000144 	movi	r4,5
   47f28:	002b7b00 	call	2b7b0 <post_app_sem>

      vfd->error = 0;
   47f2c:	e0bfff17 	ldw	r2,-4(fp)
   47f30:	10000415 	stw	zero,16(r2)
      return;
   47f34:	00000206 	br	47f40 <vclearerr+0x44>
   }

   vfs_unlock();
   47f38:	01000144 	movi	r4,5
   47f3c:	002b7b00 	call	2b7b0 <post_app_sem>

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
   47f40:	e037883a 	mov	sp,fp
   47f44:	dfc00117 	ldw	ra,4(sp)
   47f48:	df000017 	ldw	fp,0(sp)
   47f4c:	dec00204 	addi	sp,sp,8
   47f50:	f800283a 	ret

00047f54 <prep_vfs>:
 * PARAMS: NONE
 *
 * RETURNS: Error Code or 0 for OK
 */
int prep_vfs(void)
{
   47f54:	defffe04 	addi	sp,sp,-8
   47f58:	df000115 	stw	fp,4(sp)
   47f5c:	df000104 	addi	fp,sp,4
int e = 0;
   47f60:	e03fff15 	stw	zero,-4(fp)
   {
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
   47f64:	e0bfff17 	ldw	r2,-4(fp)
}
   47f68:	e037883a 	mov	sp,fp
   47f6c:	df000017 	ldw	fp,0(sp)
   47f70:	dec00104 	addi	sp,sp,4
   47f74:	f800283a 	ret

00047f78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47f78:	defffe04 	addi	sp,sp,-8
   47f7c:	dfc00115 	stw	ra,4(sp)
   47f80:	df000015 	stw	fp,0(sp)
   47f84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47f88:	00800174 	movhi	r2,5
   47f8c:	10876e04 	addi	r2,r2,7608
   47f90:	10800017 	ldw	r2,0(r2)
   47f94:	10000526 	beq	r2,zero,47fac <alt_get_errno+0x34>
   47f98:	00800174 	movhi	r2,5
   47f9c:	10876e04 	addi	r2,r2,7608
   47fa0:	10800017 	ldw	r2,0(r2)
   47fa4:	103ee83a 	callr	r2
   47fa8:	00000206 	br	47fb4 <alt_get_errno+0x3c>
   47fac:	00800174 	movhi	r2,5
   47fb0:	108f7704 	addi	r2,r2,15836
}
   47fb4:	e037883a 	mov	sp,fp
   47fb8:	dfc00117 	ldw	ra,4(sp)
   47fbc:	df000017 	ldw	fp,0(sp)
   47fc0:	dec00204 	addi	sp,sp,8
   47fc4:	f800283a 	ret

00047fc8 <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   47fc8:	defff704 	addi	sp,sp,-36
   47fcc:	dfc00615 	stw	ra,24(sp)
   47fd0:	df000515 	stw	fp,20(sp)
   47fd4:	df000504 	addi	fp,sp,20
   47fd8:	e13ffe15 	stw	r4,-8(fp)
   47fdc:	e1800215 	stw	r6,8(fp)
   47fe0:	e1c00315 	stw	r7,12(fp)
   47fe4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   47fe8:	e0bffe17 	ldw	r2,-8(fp)
   47fec:	10000616 	blt	r2,zero,48008 <alt_fcntl+0x40>
   47ff0:	e0bffe17 	ldw	r2,-8(fp)
   47ff4:	10c00324 	muli	r3,r2,12
   47ff8:	00800174 	movhi	r2,5
   47ffc:	10866604 	addi	r2,r2,6552
   48000:	1885883a 	add	r2,r3,r2
   48004:	00000106 	br	4800c <alt_fcntl+0x44>
   48008:	0005883a 	mov	r2,zero
   4800c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   48010:	e0bffb17 	ldw	r2,-20(fp)
   48014:	10002a26 	beq	r2,zero,480c0 <alt_fcntl+0xf8>
  {
    switch (cmd)
   48018:	e0bfff17 	ldw	r2,-4(fp)
   4801c:	10c000e0 	cmpeqi	r3,r2,3
   48020:	1800031e 	bne	r3,zero,48030 <alt_fcntl+0x68>
   48024:	10800120 	cmpeqi	r2,r2,4
   48028:	1000071e 	bne	r2,zero,48048 <alt_fcntl+0x80>
   4802c:	00001e06 	br	480a8 <alt_fcntl+0xe0>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   48030:	e0bffb17 	ldw	r2,-20(fp)
   48034:	10c00217 	ldw	r3,8(r2)
   48038:	00900034 	movhi	r2,16384
   4803c:	10bfffc4 	addi	r2,r2,-1
   48040:	1884703a 	and	r2,r3,r2
   48044:	00002306 	br	480d4 <alt_fcntl+0x10c>
    case F_SETFL:
      va_start(argp, cmd);
   48048:	e0800204 	addi	r2,fp,8
   4804c:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   48050:	e0bffd17 	ldw	r2,-12(fp)
   48054:	10c00104 	addi	r3,r2,4
   48058:	e0fffd15 	stw	r3,-12(fp)
   4805c:	10800017 	ldw	r2,0(r2)
   48060:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   48064:	e0bffb17 	ldw	r2,-20(fp)
   48068:	10c00217 	ldw	r3,8(r2)
   4806c:	00affdc4 	movi	r2,-16393
   48070:	1886703a 	and	r3,r3,r2
   48074:	e0bffb17 	ldw	r2,-20(fp)
   48078:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   4807c:	e0bffb17 	ldw	r2,-20(fp)
   48080:	10800217 	ldw	r2,8(r2)
   48084:	1007883a 	mov	r3,r2
   48088:	e0bffc17 	ldw	r2,-16(fp)
   4808c:	1090020c 	andi	r2,r2,16392
   48090:	1884b03a 	or	r2,r3,r2
   48094:	1007883a 	mov	r3,r2
   48098:	e0bffb17 	ldw	r2,-20(fp)
   4809c:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   480a0:	0005883a 	mov	r2,zero
   480a4:	00000b06 	br	480d4 <alt_fcntl+0x10c>
    default:
      ALT_ERRNO = EINVAL;
   480a8:	0047f780 	call	47f78 <alt_get_errno>
   480ac:	1007883a 	mov	r3,r2
   480b0:	00800584 	movi	r2,22
   480b4:	18800015 	stw	r2,0(r3)
      return -1;
   480b8:	00bfffc4 	movi	r2,-1
   480bc:	00000506 	br	480d4 <alt_fcntl+0x10c>
    }
  }

  ALT_ERRNO = EBADFD;
   480c0:	0047f780 	call	47f78 <alt_get_errno>
   480c4:	1007883a 	mov	r3,r2
   480c8:	00801444 	movi	r2,81
   480cc:	18800015 	stw	r2,0(r3)
  return -1;
   480d0:	00bfffc4 	movi	r2,-1
}
   480d4:	e037883a 	mov	sp,fp
   480d8:	dfc00117 	ldw	ra,4(sp)
   480dc:	df000017 	ldw	fp,0(sp)
   480e0:	dec00404 	addi	sp,sp,16
   480e4:	f800283a 	ret

000480e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   480e8:	defffb04 	addi	sp,sp,-20
   480ec:	dfc00415 	stw	ra,16(sp)
   480f0:	df000315 	stw	fp,12(sp)
   480f4:	df000304 	addi	fp,sp,12
   480f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   480fc:	00800174 	movhi	r2,5
   48100:	10876904 	addi	r2,r2,7588
   48104:	10800017 	ldw	r2,0(r2)
   48108:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4810c:	00003106 	br	481d4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   48110:	e0bffd17 	ldw	r2,-12(fp)
   48114:	10800217 	ldw	r2,8(r2)
   48118:	1009883a 	mov	r4,r2
   4811c:	0008d080 	call	8d08 <strlen>
   48120:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   48124:	e0bffd17 	ldw	r2,-12(fp)
   48128:	10c00217 	ldw	r3,8(r2)
   4812c:	e0bffe17 	ldw	r2,-8(fp)
   48130:	10bfffc4 	addi	r2,r2,-1
   48134:	1885883a 	add	r2,r3,r2
   48138:	10800003 	ldbu	r2,0(r2)
   4813c:	10803fcc 	andi	r2,r2,255
   48140:	1080201c 	xori	r2,r2,128
   48144:	10bfe004 	addi	r2,r2,-128
   48148:	10800bd8 	cmpnei	r2,r2,47
   4814c:	1000031e 	bne	r2,zero,4815c <alt_find_file+0x74>
    {
      len -= 1;
   48150:	e0bffe17 	ldw	r2,-8(fp)
   48154:	10bfffc4 	addi	r2,r2,-1
   48158:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4815c:	e0bffe17 	ldw	r2,-8(fp)
   48160:	e0ffff17 	ldw	r3,-4(fp)
   48164:	1885883a 	add	r2,r3,r2
   48168:	10800003 	ldbu	r2,0(r2)
   4816c:	10803fcc 	andi	r2,r2,255
   48170:	1080201c 	xori	r2,r2,128
   48174:	10bfe004 	addi	r2,r2,-128
   48178:	10800be0 	cmpeqi	r2,r2,47
   4817c:	1000081e 	bne	r2,zero,481a0 <alt_find_file+0xb8>
   48180:	e0bffe17 	ldw	r2,-8(fp)
   48184:	e0ffff17 	ldw	r3,-4(fp)
   48188:	1885883a 	add	r2,r3,r2
   4818c:	10800003 	ldbu	r2,0(r2)
   48190:	10803fcc 	andi	r2,r2,255
   48194:	1080201c 	xori	r2,r2,128
   48198:	10bfe004 	addi	r2,r2,-128
   4819c:	10000a1e 	bne	r2,zero,481c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   481a0:	e0bffd17 	ldw	r2,-12(fp)
   481a4:	10c00217 	ldw	r3,8(r2)
   481a8:	e0bffe17 	ldw	r2,-8(fp)
   481ac:	1809883a 	mov	r4,r3
   481b0:	e17fff17 	ldw	r5,-4(fp)
   481b4:	100d883a 	mov	r6,r2
   481b8:	004989c0 	call	4989c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   481bc:	1000021e 	bne	r2,zero,481c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   481c0:	e0bffd17 	ldw	r2,-12(fp)
   481c4:	00000806 	br	481e8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   481c8:	e0bffd17 	ldw	r2,-12(fp)
   481cc:	10800017 	ldw	r2,0(r2)
   481d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   481d4:	e0fffd17 	ldw	r3,-12(fp)
   481d8:	00800174 	movhi	r2,5
   481dc:	10876904 	addi	r2,r2,7588
   481e0:	18bfcb1e 	bne	r3,r2,48110 <__alt_mem_descriptor_memory+0xdf008110>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   481e4:	0005883a 	mov	r2,zero
}
   481e8:	e037883a 	mov	sp,fp
   481ec:	dfc00117 	ldw	ra,4(sp)
   481f0:	df000017 	ldw	fp,0(sp)
   481f4:	dec00204 	addi	sp,sp,8
   481f8:	f800283a 	ret

000481fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   481fc:	defff904 	addi	sp,sp,-28
   48200:	dfc00615 	stw	ra,24(sp)
   48204:	df000515 	stw	fp,20(sp)
   48208:	df000504 	addi	fp,sp,20
   4820c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   48210:	00bffa04 	movi	r2,-24
   48214:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   48218:	00800174 	movhi	r2,5
   4821c:	108fcc04 	addi	r2,r2,16176
   48220:	10800017 	ldw	r2,0(r2)
   48224:	e0bffd15 	stw	r2,-12(fp)
   48228:	e03ffe0d 	sth	zero,-8(fp)
   4822c:	e0fffe0b 	ldhu	r3,-8(fp)
   48230:	e0bffe84 	addi	r2,fp,-6
   48234:	e13ffd17 	ldw	r4,-12(fp)
   48238:	180b883a 	mov	r5,r3
   4823c:	100d883a 	mov	r6,r2
   48240:	001d9440 	call	1d944 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   48244:	e03ffb15 	stw	zero,-20(fp)
   48248:	00001d06 	br	482c0 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   4824c:	00800174 	movhi	r2,5
   48250:	10866604 	addi	r2,r2,6552
   48254:	e0fffb17 	ldw	r3,-20(fp)
   48258:	18c00324 	muli	r3,r3,12
   4825c:	10c5883a 	add	r2,r2,r3
   48260:	10800017 	ldw	r2,0(r2)
   48264:	1000131e 	bne	r2,zero,482b4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   48268:	00800174 	movhi	r2,5
   4826c:	10866604 	addi	r2,r2,6552
   48270:	e0fffb17 	ldw	r3,-20(fp)
   48274:	18c00324 	muli	r3,r3,12
   48278:	10c5883a 	add	r2,r2,r3
   4827c:	e0ffff17 	ldw	r3,-4(fp)
   48280:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   48284:	00800174 	movhi	r2,5
   48288:	10876d04 	addi	r2,r2,7604
   4828c:	10c00017 	ldw	r3,0(r2)
   48290:	e0bffb17 	ldw	r2,-20(fp)
   48294:	1880040e 	bge	r3,r2,482a8 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   48298:	00800174 	movhi	r2,5
   4829c:	10876d04 	addi	r2,r2,7604
   482a0:	e0fffb17 	ldw	r3,-20(fp)
   482a4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   482a8:	e0bffb17 	ldw	r2,-20(fp)
   482ac:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   482b0:	00000606 	br	482cc <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   482b4:	e0bffb17 	ldw	r2,-20(fp)
   482b8:	10800044 	addi	r2,r2,1
   482bc:	e0bffb15 	stw	r2,-20(fp)
   482c0:	e0bffb17 	ldw	r2,-20(fp)
   482c4:	10800810 	cmplti	r2,r2,32
   482c8:	103fe01e 	bne	r2,zero,4824c <__alt_mem_descriptor_memory+0xdf00824c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   482cc:	00800174 	movhi	r2,5
   482d0:	108fcc04 	addi	r2,r2,16176
   482d4:	10800017 	ldw	r2,0(r2)
   482d8:	1009883a 	mov	r4,r2
   482dc:	001dd180 	call	1dd18 <OSSemPost>

  return rc;
   482e0:	e0bffc17 	ldw	r2,-16(fp)
}
   482e4:	e037883a 	mov	sp,fp
   482e8:	dfc00117 	ldw	ra,4(sp)
   482ec:	df000017 	ldw	fp,0(sp)
   482f0:	dec00204 	addi	sp,sp,8
   482f4:	f800283a 	ret

000482f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   482f8:	defffb04 	addi	sp,sp,-20
   482fc:	df000415 	stw	fp,16(sp)
   48300:	df000404 	addi	fp,sp,16
   48304:	e13ffe15 	stw	r4,-8(fp)
   48308:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4830c:	e0bfff17 	ldw	r2,-4(fp)
   48310:	10840070 	cmpltui	r2,r2,4097
   48314:	1000021e 	bne	r2,zero,48320 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   48318:	00840004 	movi	r2,4096
   4831c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   48320:	e0fffe17 	ldw	r3,-8(fp)
   48324:	e0bfff17 	ldw	r2,-4(fp)
   48328:	1885883a 	add	r2,r3,r2
   4832c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   48330:	e0bffe17 	ldw	r2,-8(fp)
   48334:	e0bffc15 	stw	r2,-16(fp)
   48338:	00000506 	br	48350 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4833c:	e0bffc17 	ldw	r2,-16(fp)
   48340:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   48344:	e0bffc17 	ldw	r2,-16(fp)
   48348:	10800804 	addi	r2,r2,32
   4834c:	e0bffc15 	stw	r2,-16(fp)
   48350:	e0fffc17 	ldw	r3,-16(fp)
   48354:	e0bffd17 	ldw	r2,-12(fp)
   48358:	18bff836 	bltu	r3,r2,4833c <__alt_mem_descriptor_memory+0xdf00833c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4835c:	e0bffe17 	ldw	r2,-8(fp)
   48360:	108007cc 	andi	r2,r2,31
   48364:	10000226 	beq	r2,zero,48370 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   48368:	e0bffc17 	ldw	r2,-16(fp)
   4836c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   48370:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   48374:	e037883a 	mov	sp,fp
   48378:	df000017 	ldw	fp,0(sp)
   4837c:	dec00104 	addi	sp,sp,4
   48380:	f800283a 	ret

00048384 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   48384:	defffe04 	addi	sp,sp,-8
   48388:	df000115 	stw	fp,4(sp)
   4838c:	df000104 	addi	fp,sp,4
   48390:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   48394:	e0bfff17 	ldw	r2,-4(fp)
   48398:	10bffe84 	addi	r2,r2,-6
   4839c:	10c00428 	cmpgeui	r3,r2,16
   483a0:	18001a1e 	bne	r3,zero,4840c <alt_exception_cause_generated_bad_addr+0x88>
   483a4:	100690ba 	slli	r3,r2,2
   483a8:	00800174 	movhi	r2,5
   483ac:	10a0ef04 	addi	r2,r2,-31812
   483b0:	1885883a 	add	r2,r3,r2
   483b4:	10800017 	ldw	r2,0(r2)
   483b8:	1000683a 	jmp	r2
   483bc:	000483fc 	xorhi	zero,zero,4623
   483c0:	000483fc 	xorhi	zero,zero,4623
   483c4:	0004840c 	andi	zero,zero,4624
   483c8:	0004840c 	andi	zero,zero,4624
   483cc:	0004840c 	andi	zero,zero,4624
   483d0:	000483fc 	xorhi	zero,zero,4623
   483d4:	00048404 	movi	zero,4624
   483d8:	0004840c 	andi	zero,zero,4624
   483dc:	000483fc 	xorhi	zero,zero,4623
   483e0:	000483fc 	xorhi	zero,zero,4623
   483e4:	0004840c 	andi	zero,zero,4624
   483e8:	000483fc 	xorhi	zero,zero,4623
   483ec:	00048404 	movi	zero,4624
   483f0:	0004840c 	andi	zero,zero,4624
   483f4:	0004840c 	andi	zero,zero,4624
   483f8:	000483fc 	xorhi	zero,zero,4623
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   483fc:	00800044 	movi	r2,1
   48400:	00000306 	br	48410 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   48404:	0005883a 	mov	r2,zero
   48408:	00000106 	br	48410 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4840c:	0005883a 	mov	r2,zero
  }
}
   48410:	e037883a 	mov	sp,fp
   48414:	df000017 	ldw	fp,0(sp)
   48418:	dec00104 	addi	sp,sp,4
   4841c:	f800283a 	ret

00048420 <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
   48420:	deffef04 	addi	sp,sp,-68
   48424:	dfc01015 	stw	ra,64(sp)
   48428:	df000f15 	stw	fp,60(sp)
   4842c:	dc400e15 	stw	r17,56(sp)
   48430:	dc000d15 	stw	r16,52(sp)
   48434:	df000f04 	addi	fp,sp,60
   48438:	e13ffd15 	stw	r4,-12(fp)
   unsigned short xsum;
#ifdef FULL_ICMP
   struct redirect * rd;
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
   4843c:	e03ff305 	stb	zero,-52(fp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
   48440:	008001b4 	movhi	r2,6
   48444:	10b9ff04 	addi	r2,r2,-6148
   48448:	10800017 	ldw	r2,0(r2)
   4844c:	10c00044 	addi	r3,r2,1
   48450:	008001b4 	movhi	r2,6
   48454:	10b9ff04 	addi	r2,r2,-6148
   48458:	10c00015 	stw	r3,0(r2)

   pip = ip_head(p);                      /* find IP header */
   4845c:	e0bffd17 	ldw	r2,-12(fp)
   48460:	10800317 	ldw	r2,12(r2)
   48464:	e0bff415 	stw	r2,-48(fp)
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
   48468:	e0bffd17 	ldw	r2,-12(fp)
   4846c:	10c00417 	ldw	r3,16(r2)
   48470:	e0bff417 	ldw	r2,-48(fp)
   48474:	10800003 	ldbu	r2,0(r2)
   48478:	10803fcc 	andi	r2,r2,255
   4847c:	108003cc 	andi	r2,r2,15
   48480:	1085883a 	add	r2,r2,r2
   48484:	1085883a 	add	r2,r2,r2
   48488:	1885c83a 	sub	r2,r3,r2
   4848c:	e0bff515 	stw	r2,-44(fp)
   host = p->fhost;                       /* filled in by IP layer */
   48490:	e0bffd17 	ldw	r2,-12(fp)
   48494:	10800717 	ldw	r2,28(r2)
   48498:	e0bff615 	stw	r2,-40(fp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   4849c:	00800174 	movhi	r2,5
   484a0:	108f9904 	addi	r2,r2,15972
   484a4:	10800017 	ldw	r2,0(r2)
   484a8:	1081000c 	andi	r2,r2,1024
   484ac:	10001526 	beq	r2,zero,48504 <icmprcv+0xe4>
   484b0:	00800174 	movhi	r2,5
   484b4:	108f9904 	addi	r2,r2,15972
   484b8:	10800017 	ldw	r2,0(r2)
   484bc:	1080800c 	andi	r2,r2,512
   484c0:	10001026 	beq	r2,zero,48504 <icmprcv+0xe4>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
   484c4:	e0bff617 	ldw	r2,-40(fp)
   484c8:	11803fcc 	andi	r6,r2,255
   484cc:	e0bff617 	ldw	r2,-40(fp)
   484d0:	1004d23a 	srli	r2,r2,8
   484d4:	11c03fcc 	andi	r7,r2,255
   484d8:	e0bff617 	ldw	r2,-40(fp)
   484dc:	1004d43a 	srli	r2,r2,16
   484e0:	10c03fcc 	andi	r3,r2,255
   484e4:	e0bff617 	ldw	r2,-40(fp)
   484e8:	1004d63a 	srli	r2,r2,24
   484ec:	d8c00015 	stw	r3,0(sp)
   484f0:	d8800115 	stw	r2,4(sp)
   484f4:	01000174 	movhi	r4,5
   484f8:	213ec804 	addi	r4,r4,-1248
   484fc:	e17ff517 	ldw	r5,-44(fp)
   48500:	00080f80 	call	80f8 <printf>
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
   48504:	e0bff417 	ldw	r2,-48(fp)
   48508:	10800003 	ldbu	r2,0(r2)
   4850c:	10803fcc 	andi	r2,r2,255
   48510:	108003cc 	andi	r2,r2,15
   48514:	1085883a 	add	r2,r2,r2
   48518:	1085883a 	add	r2,r2,r2
   4851c:	1007883a 	mov	r3,r2
   48520:	e0bff417 	ldw	r2,-48(fp)
   48524:	10c5883a 	add	r2,r2,r3
   48528:	e0bff715 	stw	r2,-36(fp)

   osum = e->pchksum;
   4852c:	e0bff717 	ldw	r2,-36(fp)
   48530:	1080008b 	ldhu	r2,2(r2)
   48534:	e0bff80d 	sth	r2,-32(fp)
   e->pchksum = 0;
   48538:	e0bff717 	ldw	r2,-36(fp)
   4853c:	1000008d 	sth	zero,2(r2)

   if (len&1)
   48540:	e0bff517 	ldw	r2,-44(fp)
   48544:	1080004c 	andi	r2,r2,1
   48548:	10000926 	beq	r2,zero,48570 <icmprcv+0x150>
   {
      sav_ch = *(((char *) e) + len);
   4854c:	e0fff717 	ldw	r3,-36(fp)
   48550:	e0bff517 	ldw	r2,-44(fp)
   48554:	1885883a 	add	r2,r3,r2
   48558:	10800003 	ldbu	r2,0(r2)
   4855c:	e0bff305 	stb	r2,-52(fp)
      ((char *)e)[len] = 0;
   48560:	e0fff717 	ldw	r3,-36(fp)
   48564:	e0bff517 	ldw	r2,-44(fp)
   48568:	1885883a 	add	r2,r3,r2
   4856c:	10000005 	stb	zero,0(r2)
   }

   xsum = ~cksum(e, (len+1)>>1);
   48570:	e0bff517 	ldw	r2,-44(fp)
   48574:	10800044 	addi	r2,r2,1
   48578:	1004d07a 	srli	r2,r2,1
   4857c:	e13ff717 	ldw	r4,-36(fp)
   48580:	100b883a 	mov	r5,r2
   48584:	00263480 	call	26348 <cksum>
   48588:	0084303a 	nor	r2,zero,r2
   4858c:	e0bff88d 	sth	r2,-30(fp)
   if (len&1) *(((char *) e) + len) = sav_ch;
   48590:	e0bff517 	ldw	r2,-44(fp)
   48594:	1080004c 	andi	r2,r2,1
   48598:	10000526 	beq	r2,zero,485b0 <icmprcv+0x190>
   4859c:	e0fff717 	ldw	r3,-36(fp)
   485a0:	e0bff517 	ldw	r2,-44(fp)
   485a4:	1885883a 	add	r2,r3,r2
   485a8:	e0fff303 	ldbu	r3,-52(fp)
   485ac:	10c00005 	stb	r3,0(r2)
   if (xsum != osum)
   485b0:	e0fff88b 	ldhu	r3,-30(fp)
   485b4:	e0bff80b 	ldhu	r2,-32(fp)
   485b8:	18802a26 	beq	r3,r2,48664 <icmprcv+0x244>
   {
      e->pchksum = osum;
   485bc:	e0bff717 	ldw	r2,-36(fp)
   485c0:	e0fff80b 	ldhu	r3,-32(fp)
   485c4:	10c0008d 	sth	r3,2(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   485c8:	00800174 	movhi	r2,5
   485cc:	108f9904 	addi	r2,r2,15972
   485d0:	10800017 	ldw	r2,0(r2)
   485d4:	1081000c 	andi	r2,r2,1024
   485d8:	10001326 	beq	r2,zero,48628 <icmprcv+0x208>
   485dc:	00800174 	movhi	r2,5
   485e0:	108f9904 	addi	r2,r2,15972
   485e4:	10800017 	ldw	r2,0(r2)
   485e8:	1080800c 	andi	r2,r2,512
   485ec:	10000e26 	beq	r2,zero,48628 <icmprcv+0x208>
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
   485f0:	e0fff80b 	ldhu	r3,-32(fp)
   485f4:	e0bff88b 	ldhu	r2,-30(fp)
   485f8:	01000174 	movhi	r4,5
   485fc:	213ed004 	addi	r4,r4,-1216
   48600:	180b883a 	mov	r5,r3
   48604:	100d883a 	mov	r6,r2
   48608:	00080f80 	call	80f8 <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
   4860c:	00800174 	movhi	r2,5
   48610:	108f9904 	addi	r2,r2,15972
   48614:	10800017 	ldw	r2,0(r2)
   48618:	1080008c 	andi	r2,r2,2
   4861c:	10000226 	beq	r2,zero,48628 <icmprcv+0x208>
   48620:	e13ffd17 	ldw	r4,-12(fp)
   48624:	003e8680 	call	3e868 <ip_dump>
      }
#endif
      icmp_mib.icmpInErrors++;
   48628:	008001b4 	movhi	r2,6
   4862c:	10b9ff04 	addi	r2,r2,-6148
   48630:	10800117 	ldw	r2,4(r2)
   48634:	10c00044 	addi	r3,r2,1
   48638:	008001b4 	movhi	r2,6
   4863c:	10b9ff04 	addi	r2,r2,-6148
   48640:	10c00115 	stw	r3,4(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48644:	01000084 	movi	r4,2
   48648:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   4864c:	e13ffd17 	ldw	r4,-12(fp)
   48650:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48654:	01000084 	movi	r4,2
   48658:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
   4865c:	00bff804 	movi	r2,-32
   48660:	00025806 	br	48fc4 <icmprcv+0xba4>
   }

   e->pchksum = osum;
   48664:	e0bff717 	ldw	r2,-36(fp)
   48668:	e0fff80b 	ldhu	r3,-32(fp)
   4866c:	10c0008d 	sth	r3,2(r2)

   switch (e->ptype) 
   48670:	e0bff717 	ldw	r2,-36(fp)
   48674:	10800003 	ldbu	r2,0(r2)
   48678:	10803fcc 	andi	r2,r2,255
   4867c:	1080201c 	xori	r2,r2,128
   48680:	10bfe004 	addi	r2,r2,-128
   48684:	10c00428 	cmpgeui	r3,r2,16
   48688:	1802301e 	bne	r3,zero,48f4c <icmprcv+0xb2c>
   4868c:	100690ba 	slli	r3,r2,2
   48690:	00800174 	movhi	r2,5
   48694:	10a1a904 	addi	r2,r2,-31068
   48698:	1885883a 	add	r2,r3,r2
   4869c:	10800017 	ldw	r2,0(r2)
   486a0:	1000683a 	jmp	r2
   486a4:	00048968 	cmpgeui	zero,zero,4645
   486a8:	00048f4c 	andi	zero,zero,4669
   486ac:	00048f4c 	andi	zero,zero,4669
   486b0:	00048990 	cmplti	zero,zero,4646
   486b4:	00048a80 	call	48a8 <alt_tse_phy_get_cap+0x48>
   486b8:	00048b24 	muli	zero,zero,4652
   486bc:	00048f4c 	andi	zero,zero,4669
   486c0:	00048f4c 	andi	zero,zero,4669
   486c4:	000486e4 	muli	zero,zero,4635
   486c8:	00048f4c 	andi	zero,zero,4669
   486cc:	00048f4c 	andi	zero,zero,4669
   486d0:	00048c50 	cmplti	zero,zero,4657
   486d4:	00048d58 	cmpnei	zero,zero,4661
   486d8:	00048dcc 	andi	zero,zero,4663
   486dc:	00048f4c 	andi	zero,zero,4669
   486e0:	00048f10 	cmplti	zero,zero,4668
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
   486e4:	008001b4 	movhi	r2,6
   486e8:	10b9ff04 	addi	r2,r2,-6148
   486ec:	10800717 	ldw	r2,28(r2)
   486f0:	10c00044 	addi	r3,r2,1
   486f4:	008001b4 	movhi	r2,6
   486f8:	10b9ff04 	addi	r2,r2,-6148
   486fc:	10c00715 	stw	r3,28(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   48700:	00800174 	movhi	r2,5
   48704:	108f9904 	addi	r2,r2,15972
   48708:	10800017 	ldw	r2,0(r2)
   4870c:	1081000c 	andi	r2,r2,1024
   48710:	10001426 	beq	r2,zero,48764 <icmprcv+0x344>
   48714:	00800174 	movhi	r2,5
   48718:	108f9904 	addi	r2,r2,15972
   4871c:	10800017 	ldw	r2,0(r2)
   48720:	1080800c 	andi	r2,r2,512
   48724:	10000f26 	beq	r2,zero,48764 <icmprcv+0x344>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
   48728:	e0bff617 	ldw	r2,-40(fp)
   4872c:	11403fcc 	andi	r5,r2,255
   48730:	e0bff617 	ldw	r2,-40(fp)
   48734:	1004d23a 	srli	r2,r2,8
   48738:	11803fcc 	andi	r6,r2,255
   4873c:	e0bff617 	ldw	r2,-40(fp)
   48740:	1004d43a 	srli	r2,r2,16
   48744:	10c03fcc 	andi	r3,r2,255
   48748:	e0bff617 	ldw	r2,-40(fp)
   4874c:	1004d63a 	srli	r2,r2,24
   48750:	d8800015 	stw	r2,0(sp)
   48754:	01000174 	movhi	r4,5
   48758:	213edb04 	addi	r4,r4,-1172
   4875c:	180f883a 	mov	r7,r3
   48760:	00080f80 	call	80f8 <printf>
#endif
      e->ptype = ECHOREP;
   48764:	e0bff717 	ldw	r2,-36(fp)
   48768:	10000005 	stb	zero,0(r2)
      e->pchksum = 0;
   4876c:	e0bff717 	ldw	r2,-36(fp)
   48770:	1000008d 	sth	zero,2(r2)
      if (len&1)  /* pad odd length packets for checksum routine */
   48774:	e0bff517 	ldw	r2,-44(fp)
   48778:	1080004c 	andi	r2,r2,1
   4877c:	10000926 	beq	r2,zero,487a4 <icmprcv+0x384>
      {
         sav_ch = *(((char *) e) + len);
   48780:	e0fff717 	ldw	r3,-36(fp)
   48784:	e0bff517 	ldw	r2,-44(fp)
   48788:	1885883a 	add	r2,r3,r2
   4878c:	10800003 	ldbu	r2,0(r2)
   48790:	e0bff305 	stb	r2,-52(fp)
         ((char *)e)[len] = 0;
   48794:	e0fff717 	ldw	r3,-36(fp)
   48798:	e0bff517 	ldw	r2,-44(fp)
   4879c:	1885883a 	add	r2,r3,r2
   487a0:	10000005 	stb	zero,0(r2)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
   487a4:	e0bff517 	ldw	r2,-44(fp)
   487a8:	10800044 	addi	r2,r2,1
   487ac:	1004d07a 	srli	r2,r2,1
   487b0:	e13ff717 	ldw	r4,-36(fp)
   487b4:	100b883a 	mov	r5,r2
   487b8:	00263480 	call	26348 <cksum>
   487bc:	0084303a 	nor	r2,zero,r2
   487c0:	1007883a 	mov	r3,r2
   487c4:	e0bff717 	ldw	r2,-36(fp)
   487c8:	10c0008d 	sth	r3,2(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
   487cc:	e0bff517 	ldw	r2,-44(fp)
   487d0:	1080004c 	andi	r2,r2,1
   487d4:	10000526 	beq	r2,zero,487ec <icmprcv+0x3cc>
   487d8:	e0fff717 	ldw	r3,-36(fp)
   487dc:	e0bff517 	ldw	r2,-44(fp)
   487e0:	1885883a 	add	r2,r3,r2
   487e4:	e0fff303 	ldbu	r3,-52(fp)
   487e8:	10c00005 	stb	r3,0(r2)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
   487ec:	e0bff417 	ldw	r2,-48(fp)
   487f0:	10800417 	ldw	r2,16(r2)
   487f4:	10bfffe0 	cmpeqi	r2,r2,-1
   487f8:	10001f1e 	bne	r2,zero,48878 <icmprcv+0x458>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
   487fc:	e0bff417 	ldw	r2,-48(fp)
   48800:	10800417 	ldw	r2,16(r2)
   48804:	1006d63a 	srli	r3,r2,24
   48808:	e0bff417 	ldw	r2,-48(fp)
   4880c:	10800417 	ldw	r2,16(r2)
   48810:	1004d23a 	srli	r2,r2,8
   48814:	10bfc00c 	andi	r2,r2,65280
   48818:	1886b03a 	or	r3,r3,r2
   4881c:	e0bff417 	ldw	r2,-48(fp)
   48820:	10800417 	ldw	r2,16(r2)
   48824:	10bfc00c 	andi	r2,r2,65280
   48828:	1004923a 	slli	r2,r2,8
   4882c:	1886b03a 	or	r3,r3,r2
   48830:	e0bff417 	ldw	r2,-48(fp)
   48834:	10800417 	ldw	r2,16(r2)
   48838:	1004963a 	slli	r2,r2,24
   4883c:	1884b03a 	or	r2,r3,r2
   48840:	10fc002c 	andhi	r3,r2,61440
      if (len&1) *(((char *) e) + len) = sav_ch;
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
   48844:	00b80034 	movhi	r2,57344
   48848:	18800b26 	beq	r3,r2,48878 <icmprcv+0x458>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
   4884c:	e0bff417 	ldw	r2,-48(fp)
   48850:	10c00417 	ldw	r3,16(r2)
   48854:	e0bffd17 	ldw	r2,-12(fp)
   48858:	10800617 	ldw	r2,24(r2)
   4885c:	11000a17 	ldw	r4,40(r2)
   48860:	e0bffd17 	ldw	r2,-12(fp)
   48864:	10800617 	ldw	r2,24(r2)
   48868:	10800c17 	ldw	r2,48(r2)
   4886c:	0084303a 	nor	r2,zero,r2
   48870:	2084b03a 	or	r2,r4,r2
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
   48874:	1880061e 	bne	r3,r2,48890 <icmprcv+0x470>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
   48878:	e0bffd17 	ldw	r2,-12(fp)
   4887c:	10800617 	ldw	r2,24(r2)
   48880:	10c00a17 	ldw	r3,40(r2)
   48884:	e0bff417 	ldw	r2,-48(fp)
   48888:	10c00315 	stw	r3,12(r2)
   4888c:	00000406 	br	488a0 <icmprcv+0x480>
      }
      else pip->ip_src = pip->ip_dest;
   48890:	e0bff417 	ldw	r2,-48(fp)
   48894:	10c00417 	ldw	r3,16(r2)
   48898:	e0bff417 	ldw	r2,-48(fp)
   4889c:	10c00315 	stw	r3,12(r2)

      pip->ip_dest = host;
   488a0:	e0bff417 	ldw	r2,-48(fp)
   488a4:	e0fff617 	ldw	r3,-40(fp)
   488a8:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutEchoReps++;
   488ac:	008001b4 	movhi	r2,6
   488b0:	10b9ff04 	addi	r2,r2,-6148
   488b4:	10801517 	ldw	r2,84(r2)
   488b8:	10c00044 	addi	r3,r2,1
   488bc:	008001b4 	movhi	r2,6
   488c0:	10b9ff04 	addi	r2,r2,-6148
   488c4:	10c01515 	stw	r3,84(r2)
      icmp_mib.icmpOutMsgs++;
   488c8:	008001b4 	movhi	r2,6
   488cc:	10b9ff04 	addi	r2,r2,-6148
   488d0:	10800d17 	ldw	r2,52(r2)
   488d4:	10c00044 	addi	r3,r2,1
   488d8:	008001b4 	movhi	r2,6
   488dc:	10b9ff04 	addi	r2,r2,-6148
   488e0:	10c00d15 	stw	r3,52(r2)
      p->fhost = host;
   488e4:	e0bffd17 	ldw	r2,-12(fp)
   488e8:	e0fff617 	ldw	r3,-40(fp)
   488ec:	10c00715 	stw	r3,28(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
   488f0:	e0bffd17 	ldw	r2,-12(fp)
   488f4:	10c00317 	ldw	r3,12(r2)
   488f8:	e0bff417 	ldw	r2,-48(fp)
   488fc:	10800003 	ldbu	r2,0(r2)
   48900:	10803fcc 	andi	r2,r2,255
   48904:	108003cc 	andi	r2,r2,15
   48908:	1085883a 	add	r2,r2,r2
   4890c:	1085883a 	add	r2,r2,r2
   48910:	1887883a 	add	r3,r3,r2
   48914:	e0bffd17 	ldw	r2,-12(fp)
   48918:	10c00315 	stw	r3,12(r2)
      p->nb_plen = len;
   4891c:	e0bffd17 	ldw	r2,-12(fp)
   48920:	e0fff517 	ldw	r3,-44(fp)
   48924:	10c00415 	stw	r3,16(r2)

      i = ip_write(ICMP_PROT, p);
   48928:	01000044 	movi	r4,1
   4892c:	e17ffd17 	ldw	r5,-12(fp)
   48930:	003d78c0 	call	3d78c <ip_write>
   48934:	e0bff915 	stw	r2,-28(fp)
      if (i < 0)
   48938:	e0bff917 	ldw	r2,-28(fp)
   4893c:	1000080e 	bge	r2,zero,48960 <icmprcv+0x540>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
   48940:	00800174 	movhi	r2,5
   48944:	108f9904 	addi	r2,r2,15972
   48948:	10800017 	ldw	r2,0(r2)
   4894c:	1081000c 	andi	r2,r2,1024
   48950:	10000326 	beq	r2,zero,48960 <icmprcv+0x540>
            dprintf("icmp: reply failed\n");
   48954:	01000174 	movhi	r4,5
   48958:	213ee404 	addi	r4,r4,-1136
   4895c:	00083740 	call	8374 <puts>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
   48960:	0005883a 	mov	r2,zero
   48964:	00019706 	br	48fc4 <icmprcv+0xba4>
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
   48968:	008001b4 	movhi	r2,6
   4896c:	10b9ff04 	addi	r2,r2,-6148
   48970:	10800817 	ldw	r2,32(r2)
   48974:	10c00044 	addi	r3,r2,1
   48978:	008001b4 	movhi	r2,6
   4897c:	10b9ff04 	addi	r2,r2,-6148
   48980:	10c00815 	stw	r3,32(r2)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
   48984:	e13ffd17 	ldw	r4,-12(fp)
   48988:	0041d300 	call	41d30 <ip_raw_input>
   4898c:	00018d06 	br	48fc4 <icmprcv+0xba4>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
   48990:	008001b4 	movhi	r2,6
   48994:	10b9ff04 	addi	r2,r2,-6148
   48998:	10800217 	ldw	r2,8(r2)
   4899c:	10c00044 	addi	r3,r2,1
   489a0:	008001b4 	movhi	r2,6
   489a4:	10b9ff04 	addi	r2,r2,-6148
   489a8:	10c00215 	stw	r3,8(r2)
      pdp = (struct destun *)e;
   489ac:	e0bff717 	ldw	r2,-36(fp)
   489b0:	e0bffa15 	stw	r2,-24(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   489b4:	00800174 	movhi	r2,5
   489b8:	108f9904 	addi	r2,r2,15972
   489bc:	10800017 	ldw	r2,0(r2)
   489c0:	1081000c 	andi	r2,r2,1024
   489c4:	10002a26 	beq	r2,zero,48a70 <icmprcv+0x650>
      {
         dprintf("ICMP: got dest unreachable type ");
   489c8:	01000174 	movhi	r4,5
   489cc:	213ee904 	addi	r4,r4,-1116
   489d0:	00080f80 	call	80f8 <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
   489d4:	e0bffa17 	ldw	r2,-24(fp)
   489d8:	10800043 	ldbu	r2,1(r2)
   489dc:	11403fcc 	andi	r5,r2,255
   489e0:	2940201c 	xori	r5,r5,128
   489e4:	297fe004 	addi	r5,r5,-128
          PUSH_IPADDR(pdp->dip.ip_dest));
   489e8:	e0bffa17 	ldw	r2,-24(fp)
   489ec:	10800617 	ldw	r2,24(r2)
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: got dest unreachable type ");
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
   489f0:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
   489f4:	e0bffa17 	ldw	r2,-24(fp)
   489f8:	10800617 	ldw	r2,24(r2)
   489fc:	1004d23a 	srli	r2,r2,8
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: got dest unreachable type ");
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
   48a00:	11c03fcc 	andi	r7,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
   48a04:	e0bffa17 	ldw	r2,-24(fp)
   48a08:	10800617 	ldw	r2,24(r2)
   48a0c:	1004d43a 	srli	r2,r2,16
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: got dest unreachable type ");
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
   48a10:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(pdp->dip.ip_dest));
   48a14:	e0bffa17 	ldw	r2,-24(fp)
   48a18:	10800617 	ldw	r2,24(r2)
   48a1c:	1004d63a 	srli	r2,r2,24
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: got dest unreachable type ");
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
   48a20:	d8c00015 	stw	r3,0(sp)
   48a24:	d8800115 	stw	r2,4(sp)
   48a28:	01000174 	movhi	r4,5
   48a2c:	213ef204 	addi	r4,r4,-1080
   48a30:	00080f80 	call	80f8 <printf>
          PUSH_IPADDR(pdp->dip.ip_dest));
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
   48a34:	e0bff617 	ldw	r2,-40(fp)
   48a38:	11403fcc 	andi	r5,r2,255
   48a3c:	e0bff617 	ldw	r2,-40(fp)
   48a40:	1004d23a 	srli	r2,r2,8
   48a44:	11803fcc 	andi	r6,r2,255
   48a48:	e0bff617 	ldw	r2,-40(fp)
   48a4c:	1004d43a 	srli	r2,r2,16
   48a50:	10c03fcc 	andi	r3,r2,255
   48a54:	e0bff617 	ldw	r2,-40(fp)
   48a58:	1004d63a 	srli	r2,r2,24
   48a5c:	d8800015 	stw	r2,0(sp)
   48a60:	01000174 	movhi	r4,5
   48a64:	213ef704 	addi	r4,r4,-1060
   48a68:	180f883a 	mov	r7,r3
   48a6c:	00080f80 	call	80f8 <printf>
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
   48a70:	e13ffd17 	ldw	r4,-12(fp)
   48a74:	e17ffa17 	ldw	r5,-24(fp)
   48a78:	00496180 	call	49618 <icmp_du>
      break;
   48a7c:	00015006 	br	48fc0 <icmprcv+0xba0>
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
   48a80:	008001b4 	movhi	r2,6
   48a84:	10b9ff04 	addi	r2,r2,-6148
   48a88:	10800517 	ldw	r2,20(r2)
   48a8c:	10c00044 	addi	r3,r2,1
   48a90:	008001b4 	movhi	r2,6
   48a94:	10b9ff04 	addi	r2,r2,-6148
   48a98:	10c00515 	stw	r3,20(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48a9c:	00800174 	movhi	r2,5
   48aa0:	108f9904 	addi	r2,r2,15972
   48aa4:	10800017 	ldw	r2,0(r2)
   48aa8:	1081000c 	andi	r2,r2,1024
   48aac:	10001626 	beq	r2,zero,48b08 <icmprcv+0x6e8>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
   48ab0:	e0bff617 	ldw	r2,-40(fp)
   48ab4:	11403fcc 	andi	r5,r2,255
   48ab8:	e0bff617 	ldw	r2,-40(fp)
   48abc:	1004d23a 	srli	r2,r2,8
   48ac0:	11803fcc 	andi	r6,r2,255
   48ac4:	e0bff617 	ldw	r2,-40(fp)
   48ac8:	1004d43a 	srli	r2,r2,16
   48acc:	10c03fcc 	andi	r3,r2,255
   48ad0:	e0bff617 	ldw	r2,-40(fp)
   48ad4:	1004d63a 	srli	r2,r2,24
   48ad8:	d8800015 	stw	r2,0(sp)
   48adc:	01000174 	movhi	r4,5
   48ae0:	213efc04 	addi	r4,r4,-1040
   48ae4:	180f883a 	mov	r7,r3
   48ae8:	00080f80 	call	80f8 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
   48aec:	00800174 	movhi	r2,5
   48af0:	108f9904 	addi	r2,r2,15972
   48af4:	10800017 	ldw	r2,0(r2)
   48af8:	1080008c 	andi	r2,r2,2
   48afc:	10000226 	beq	r2,zero,48b08 <icmprcv+0x6e8>
   48b00:	e13ffd17 	ldw	r4,-12(fp)
   48b04:	003e8680 	call	3e868 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48b08:	01000084 	movi	r4,2
   48b0c:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48b10:	e13ffd17 	ldw	r4,-12(fp)
   48b14:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48b18:	01000084 	movi	r4,2
   48b1c:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      break;
   48b20:	00012706 	br	48fc0 <icmprcv+0xba0>
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
   48b24:	008001b4 	movhi	r2,6
   48b28:	10b9ff04 	addi	r2,r2,-6148
   48b2c:	10800617 	ldw	r2,24(r2)
   48b30:	10c00044 	addi	r3,r2,1
   48b34:	008001b4 	movhi	r2,6
   48b38:	10b9ff04 	addi	r2,r2,-6148
   48b3c:	10c00615 	stw	r3,24(r2)
      rd = (struct redirect *)e;
   48b40:	e0bff717 	ldw	r2,-36(fp)
   48b44:	e0bffb15 	stw	r2,-20(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48b48:	00800174 	movhi	r2,5
   48b4c:	108f9904 	addi	r2,r2,15972
   48b50:	10800017 	ldw	r2,0(r2)
   48b54:	1081000c 	andi	r2,r2,1024
   48b58:	10002626 	beq	r2,zero,48bf4 <icmprcv+0x7d4>
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
          PUSH_IPADDR(rd->rdip.ip_dest));
   48b5c:	e0bffb17 	ldw	r2,-20(fp)
   48b60:	10800617 	ldw	r2,24(r2)
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
   48b64:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
   48b68:	e0bffb17 	ldw	r2,-20(fp)
   48b6c:	10800617 	ldw	r2,24(r2)
   48b70:	1004d23a 	srli	r2,r2,8
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
   48b74:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
   48b78:	e0bffb17 	ldw	r2,-20(fp)
   48b7c:	10800617 	ldw	r2,24(r2)
   48b80:	1004d43a 	srli	r2,r2,16
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
   48b84:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(rd->rdip.ip_dest));
   48b88:	e0bffb17 	ldw	r2,-20(fp)
   48b8c:	10800617 	ldw	r2,24(r2)
   48b90:	1004d63a 	srli	r2,r2,24
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
   48b94:	d8800015 	stw	r2,0(sp)
   48b98:	01000174 	movhi	r4,5
   48b9c:	213f0604 	addi	r4,r4,-1000
   48ba0:	180f883a 	mov	r7,r3
   48ba4:	00080f80 	call	80f8 <printf>
          PUSH_IPADDR(rd->rdip.ip_dest));
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
   48ba8:	e0bffb17 	ldw	r2,-20(fp)
   48bac:	10800117 	ldw	r2,4(r2)
   48bb0:	11403fcc 	andi	r5,r2,255
   48bb4:	e0bffb17 	ldw	r2,-20(fp)
   48bb8:	10800117 	ldw	r2,4(r2)
   48bbc:	1004d23a 	srli	r2,r2,8
   48bc0:	11803fcc 	andi	r6,r2,255
   48bc4:	e0bffb17 	ldw	r2,-20(fp)
   48bc8:	10800117 	ldw	r2,4(r2)
   48bcc:	1004d43a 	srli	r2,r2,16
   48bd0:	10c03fcc 	andi	r3,r2,255
   48bd4:	e0bffb17 	ldw	r2,-20(fp)
   48bd8:	10800117 	ldw	r2,4(r2)
   48bdc:	1004d63a 	srli	r2,r2,24
   48be0:	d8800015 	stw	r2,0(sp)
   48be4:	01000174 	movhi	r4,5
   48be8:	213f1004 	addi	r4,r4,-960
   48bec:	180f883a 	mov	r7,r3
   48bf0:	00080f80 	call	80f8 <printf>
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
   48bf4:	e0bffb17 	ldw	r2,-20(fp)
   48bf8:	14400617 	ldw	r17,24(r2)
   48bfc:	e0bffb17 	ldw	r2,-20(fp)
   48c00:	14000117 	ldw	r16,4(r2)
   48c04:	e0bffd17 	ldw	r2,-12(fp)
   48c08:	10800617 	ldw	r2,24(r2)
   48c0c:	1009883a 	mov	r4,r2
   48c10:	00248000 	call	24800 <if_netnumber>
   48c14:	1007883a 	mov	r3,r2
   48c18:	00800104 	movi	r2,4
   48c1c:	d8800015 	stw	r2,0(sp)
   48c20:	8809883a 	mov	r4,r17
   48c24:	017fffc4 	movi	r5,-1
   48c28:	800d883a 	mov	r6,r16
   48c2c:	180f883a 	mov	r7,r3
   48c30:	00422100 	call	42210 <add_route>
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48c34:	01000084 	movi	r4,2
   48c38:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48c3c:	e13ffd17 	ldw	r4,-12(fp)
   48c40:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48c44:	01000084 	movi	r4,2
   48c48:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      break;
   48c4c:	0000dc06 	br	48fc0 <icmprcv+0xba0>
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
   48c50:	008001b4 	movhi	r2,6
   48c54:	10b9ff04 	addi	r2,r2,-6148
   48c58:	10800317 	ldw	r2,12(r2)
   48c5c:	10c00044 	addi	r3,r2,1
   48c60:	008001b4 	movhi	r2,6
   48c64:	10b9ff04 	addi	r2,r2,-6148
   48c68:	10c00315 	stw	r3,12(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48c6c:	00800174 	movhi	r2,5
   48c70:	108f9904 	addi	r2,r2,15972
   48c74:	10800017 	ldw	r2,0(r2)
   48c78:	1081000c 	andi	r2,r2,1024
   48c7c:	10002f26 	beq	r2,zero,48d3c <icmprcv+0x91c>
      {
         struct timex * pt =  (struct  timex *)e;
   48c80:	e0bff717 	ldw	r2,-36(fp)
   48c84:	e0bffc15 	stw	r2,-16(fp)

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
          PUSH_IPADDR(p->fhost));
   48c88:	e0bffd17 	ldw	r2,-12(fp)
   48c8c:	10800717 	ldw	r2,28(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         struct timex * pt =  (struct  timex *)e;

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
   48c90:	11403fcc 	andi	r5,r2,255
          PUSH_IPADDR(p->fhost));
   48c94:	e0bffd17 	ldw	r2,-12(fp)
   48c98:	10800717 	ldw	r2,28(r2)
   48c9c:	1004d23a 	srli	r2,r2,8
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         struct timex * pt =  (struct  timex *)e;

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
   48ca0:	11803fcc 	andi	r6,r2,255
          PUSH_IPADDR(p->fhost));
   48ca4:	e0bffd17 	ldw	r2,-12(fp)
   48ca8:	10800717 	ldw	r2,28(r2)
   48cac:	1004d43a 	srli	r2,r2,16
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         struct timex * pt =  (struct  timex *)e;

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
   48cb0:	10c03fcc 	andi	r3,r2,255
          PUSH_IPADDR(p->fhost));
   48cb4:	e0bffd17 	ldw	r2,-12(fp)
   48cb8:	10800717 	ldw	r2,28(r2)
   48cbc:	1004d63a 	srli	r2,r2,24
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         struct timex * pt =  (struct  timex *)e;

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
   48cc0:	d8800015 	stw	r2,0(sp)
   48cc4:	01000174 	movhi	r4,5
   48cc8:	213f1404 	addi	r4,r4,-944
   48ccc:	180f883a 	mov	r7,r3
   48cd0:	00080f80 	call	80f8 <printf>
          PUSH_IPADDR(p->fhost));
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
   48cd4:	e0bffc17 	ldw	r2,-16(fp)
   48cd8:	10800617 	ldw	r2,24(r2)
   48cdc:	11403fcc 	andi	r5,r2,255
   48ce0:	e0bffc17 	ldw	r2,-16(fp)
   48ce4:	10800617 	ldw	r2,24(r2)
   48ce8:	1004d23a 	srli	r2,r2,8
   48cec:	11803fcc 	andi	r6,r2,255
   48cf0:	e0bffc17 	ldw	r2,-16(fp)
   48cf4:	10800617 	ldw	r2,24(r2)
   48cf8:	1004d43a 	srli	r2,r2,16
   48cfc:	10c03fcc 	andi	r3,r2,255
   48d00:	e0bffc17 	ldw	r2,-16(fp)
   48d04:	10800617 	ldw	r2,24(r2)
   48d08:	1004d63a 	srli	r2,r2,24
   48d0c:	d8800015 	stw	r2,0(sp)
   48d10:	01000174 	movhi	r4,5
   48d14:	213f1d04 	addi	r4,r4,-908
   48d18:	180f883a 	mov	r7,r3
   48d1c:	00080f80 	call	80f8 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
   48d20:	00800174 	movhi	r2,5
   48d24:	108f9904 	addi	r2,r2,15972
   48d28:	10800017 	ldw	r2,0(r2)
   48d2c:	1080008c 	andi	r2,r2,2
   48d30:	10000226 	beq	r2,zero,48d3c <icmprcv+0x91c>
   48d34:	e13ffd17 	ldw	r4,-12(fp)
   48d38:	003e8680 	call	3e868 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48d3c:	01000084 	movi	r4,2
   48d40:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48d44:	e13ffd17 	ldw	r4,-12(fp)
   48d48:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48d4c:	01000084 	movi	r4,2
   48d50:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      break;
   48d54:	00009a06 	br	48fc0 <icmprcv+0xba0>
   case PARAM:
      icmp_mib.icmpInParmProbs++;
   48d58:	008001b4 	movhi	r2,6
   48d5c:	10b9ff04 	addi	r2,r2,-6148
   48d60:	10800417 	ldw	r2,16(r2)
   48d64:	10c00044 	addi	r3,r2,1
   48d68:	008001b4 	movhi	r2,6
   48d6c:	10b9ff04 	addi	r2,r2,-6148
   48d70:	10c00415 	stw	r3,16(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48d74:	00800174 	movhi	r2,5
   48d78:	108f9904 	addi	r2,r2,15972
   48d7c:	10800017 	ldw	r2,0(r2)
   48d80:	1081000c 	andi	r2,r2,1024
   48d84:	10000326 	beq	r2,zero,48d94 <icmprcv+0x974>
         dprintf("ICMP: got param problem message\n");
   48d88:	01000174 	movhi	r4,5
   48d8c:	213f2204 	addi	r4,r4,-888
   48d90:	00083740 	call	8374 <puts>
      if (NDEBUG & DUMP)
   48d94:	00800174 	movhi	r2,5
   48d98:	108f9904 	addi	r2,r2,15972
   48d9c:	10800017 	ldw	r2,0(r2)
   48da0:	1080008c 	andi	r2,r2,2
   48da4:	10000226 	beq	r2,zero,48db0 <icmprcv+0x990>
      {
         ip_dump(p);
   48da8:	e13ffd17 	ldw	r4,-12(fp)
   48dac:	003e8680 	call	3e868 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48db0:	01000084 	movi	r4,2
   48db4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48db8:	e13ffd17 	ldw	r4,-12(fp)
   48dbc:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48dc0:	01000084 	movi	r4,2
   48dc4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      break;
   48dc8:	00007d06 	br	48fc0 <icmprcv+0xba0>
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
   48dcc:	008001b4 	movhi	r2,6
   48dd0:	10b9ff04 	addi	r2,r2,-6148
   48dd4:	10800917 	ldw	r2,36(r2)
   48dd8:	10c00044 	addi	r3,r2,1
   48ddc:	008001b4 	movhi	r2,6
   48de0:	10b9ff04 	addi	r2,r2,-6148
   48de4:	10c00915 	stw	r3,36(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48de8:	00800174 	movhi	r2,5
   48dec:	108f9904 	addi	r2,r2,15972
   48df0:	10800017 	ldw	r2,0(r2)
   48df4:	1081000c 	andi	r2,r2,1024
   48df8:	10000326 	beq	r2,zero,48e08 <icmprcv+0x9e8>
         dprintf("ICMP: got timestamp request\n");
   48dfc:	01000174 	movhi	r4,5
   48e00:	213f2a04 	addi	r4,r4,-856
   48e04:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
   48e08:	e0bff717 	ldw	r2,-36(fp)
   48e0c:	00c00384 	movi	r3,14
   48e10:	10c00005 	stb	r3,0(r2)
      e->pchksum = 0;
   48e14:	e0bff717 	ldw	r2,-36(fp)
   48e18:	1000008d 	sth	zero,2(r2)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
   48e1c:	e13ff717 	ldw	r4,-36(fp)
   48e20:	01400284 	movi	r5,10
   48e24:	00263480 	call	26348 <cksum>
   48e28:	0084303a 	nor	r2,zero,r2
   48e2c:	1007883a 	mov	r3,r2
   48e30:	e0bff717 	ldw	r2,-36(fp)
   48e34:	10c0008d 	sth	r3,2(r2)
      pip->ip_src = pip->ip_dest;
   48e38:	e0bff417 	ldw	r2,-48(fp)
   48e3c:	10c00417 	ldw	r3,16(r2)
   48e40:	e0bff417 	ldw	r2,-48(fp)
   48e44:	10c00315 	stw	r3,12(r2)
      pip->ip_dest = host;
   48e48:	e0bff417 	ldw	r2,-48(fp)
   48e4c:	e0fff617 	ldw	r3,-40(fp)
   48e50:	10c00415 	stw	r3,16(r2)
      icmp_mib.icmpOutMsgs++;
   48e54:	008001b4 	movhi	r2,6
   48e58:	10b9ff04 	addi	r2,r2,-6148
   48e5c:	10800d17 	ldw	r2,52(r2)
   48e60:	10c00044 	addi	r3,r2,1
   48e64:	008001b4 	movhi	r2,6
   48e68:	10b9ff04 	addi	r2,r2,-6148
   48e6c:	10c00d15 	stw	r3,52(r2)
      icmp_mib.icmpOutTimestampReps++;
   48e70:	008001b4 	movhi	r2,6
   48e74:	10b9ff04 	addi	r2,r2,-6148
   48e78:	10801717 	ldw	r2,92(r2)
   48e7c:	10c00044 	addi	r3,r2,1
   48e80:	008001b4 	movhi	r2,6
   48e84:	10b9ff04 	addi	r2,r2,-6148
   48e88:	10c01715 	stw	r3,92(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
   48e8c:	e0bffd17 	ldw	r2,-12(fp)
   48e90:	10c00317 	ldw	r3,12(r2)
   48e94:	e0bff417 	ldw	r2,-48(fp)
   48e98:	10800003 	ldbu	r2,0(r2)
   48e9c:	10803fcc 	andi	r2,r2,255
   48ea0:	108003cc 	andi	r2,r2,15
   48ea4:	1085883a 	add	r2,r2,r2
   48ea8:	1085883a 	add	r2,r2,r2
   48eac:	1887883a 	add	r3,r3,r2
   48eb0:	e0bffd17 	ldw	r2,-12(fp)
   48eb4:	10c00315 	stw	r3,12(r2)
      p->nb_plen = sizeof(struct tstamp);
   48eb8:	e0bffd17 	ldw	r2,-12(fp)
   48ebc:	00c00504 	movi	r3,20
   48ec0:	10c00415 	stw	r3,16(r2)
      p->fhost = host;
   48ec4:	e0bffd17 	ldw	r2,-12(fp)
   48ec8:	e0fff617 	ldw	r3,-40(fp)
   48ecc:	10c00715 	stw	r3,28(r2)
      i = ip_write(ICMP_PROT, p);
   48ed0:	01000044 	movi	r4,1
   48ed4:	e17ffd17 	ldw	r5,-12(fp)
   48ed8:	003d78c0 	call	3d78c <ip_write>
   48edc:	e0bff915 	stw	r2,-28(fp)
      if (i < 0)
   48ee0:	e0bff917 	ldw	r2,-28(fp)
   48ee4:	1000080e 	bge	r2,zero,48f08 <icmprcv+0xae8>
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
   48ee8:	00800174 	movhi	r2,5
   48eec:	108f9904 	addi	r2,r2,15972
   48ef0:	10800017 	ldw	r2,0(r2)
   48ef4:	1081000c 	andi	r2,r2,1024
   48ef8:	10000326 	beq	r2,zero,48f08 <icmprcv+0xae8>
            dprintf("icmp: can't send timestamp reply\n");
   48efc:	01000174 	movhi	r4,5
   48f00:	213f3104 	addi	r4,r4,-828
   48f04:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
   48f08:	0005883a 	mov	r2,zero
   48f0c:	00002d06 	br	48fc4 <icmprcv+0xba4>
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48f10:	00800174 	movhi	r2,5
   48f14:	108f9904 	addi	r2,r2,15972
   48f18:	10800017 	ldw	r2,0(r2)
   48f1c:	1081000c 	andi	r2,r2,1024
   48f20:	10000326 	beq	r2,zero,48f30 <icmprcv+0xb10>
         dprintf("icmp: got info request\n");
   48f24:	01000174 	movhi	r4,5
   48f28:	213f3a04 	addi	r4,r4,-792
   48f2c:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48f30:	01000084 	movi	r4,2
   48f34:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48f38:	e13ffd17 	ldw	r4,-12(fp)
   48f3c:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48f40:	01000084 	movi	r4,2
   48f44:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      break;
   48f48:	00001d06 	br	48fc0 <icmprcv+0xba0>
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
   48f4c:	00800174 	movhi	r2,5
   48f50:	108f9904 	addi	r2,r2,15972
   48f54:	10800017 	ldw	r2,0(r2)
   48f58:	1081000c 	andi	r2,r2,1024
   48f5c:	10001026 	beq	r2,zero,48fa0 <icmprcv+0xb80>
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
   48f60:	e0bff717 	ldw	r2,-36(fp)
   48f64:	10800003 	ldbu	r2,0(r2)
   48f68:	10803fcc 	andi	r2,r2,255
   48f6c:	1080201c 	xori	r2,r2,128
   48f70:	10bfe004 	addi	r2,r2,-128
   48f74:	01000174 	movhi	r4,5
   48f78:	213f4004 	addi	r4,r4,-768
   48f7c:	100b883a 	mov	r5,r2
   48f80:	00080f80 	call	80f8 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
   48f84:	00800174 	movhi	r2,5
   48f88:	108f9904 	addi	r2,r2,15972
   48f8c:	10800017 	ldw	r2,0(r2)
   48f90:	1080008c 	andi	r2,r2,2
   48f94:	10000226 	beq	r2,zero,48fa0 <icmprcv+0xb80>
   48f98:	e13ffd17 	ldw	r4,-12(fp)
   48f9c:	003e8680 	call	3e868 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
   48fa0:	01000084 	movi	r4,2
   48fa4:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
      pk_free(p);
   48fa8:	e13ffd17 	ldw	r4,-12(fp)
   48fac:	002a8940 	call	2a894 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   48fb0:	01000084 	movi	r4,2
   48fb4:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>
      return ENP_NOT_MINE;
   48fb8:	00800084 	movi	r2,2
   48fbc:	00000106 	br	48fc4 <icmprcv+0xba4>
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
   48fc0:	00800084 	movi	r2,2
#endif   /* FULL_ICMP */
}
   48fc4:	e6fffe04 	addi	sp,fp,-8
   48fc8:	dfc00317 	ldw	ra,12(sp)
   48fcc:	df000217 	ldw	fp,8(sp)
   48fd0:	dc400117 	ldw	r17,4(sp)
   48fd4:	dc000017 	ldw	r16,0(sp)
   48fd8:	dec00404 	addi	sp,sp,16
   48fdc:	f800283a 	ret

00048fe0 <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
   48fe0:	defff404 	addi	sp,sp,-48
   48fe4:	dfc00b15 	stw	ra,44(sp)
   48fe8:	df000a15 	stw	fp,40(sp)
   48fec:	df000a04 	addi	fp,sp,40
   48ff0:	e13ffc15 	stw	r4,-16(fp)
   48ff4:	e17ffd15 	stw	r5,-12(fp)
   48ff8:	e1bffe15 	stw	r6,-8(fp)
   48ffc:	e1ffff15 	stw	r7,-4(fp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
   49000:	00800174 	movhi	r2,5
   49004:	108f9904 	addi	r2,r2,15972
   49008:	10800017 	ldw	r2,0(r2)
   4900c:	1080040c 	andi	r2,r2,16
   49010:	10001726 	beq	r2,zero,49070 <icmp_destun+0x90>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
   49014:	e0bfff17 	ldw	r2,-4(fp)
   49018:	10c03fcc 	andi	r3,r2,255
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
   4901c:	00800174 	movhi	r2,5
   49020:	10872404 	addi	r2,r2,7312
   49024:	18c7883a 	add	r3,r3,r3
   49028:	18c7883a 	add	r3,r3,r3
   4902c:	10c5883a 	add	r2,r2,r3
   49030:	11400017 	ldw	r5,0(r2)
   49034:	e0bffc17 	ldw	r2,-16(fp)
   49038:	11803fcc 	andi	r6,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
   4903c:	e0bffc17 	ldw	r2,-16(fp)
   49040:	1004d23a 	srli	r2,r2,8
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
   49044:	11c03fcc 	andi	r7,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
   49048:	e0bffc17 	ldw	r2,-16(fp)
   4904c:	1004d43a 	srli	r2,r2,16
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
   49050:	10c03fcc 	andi	r3,r2,255
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
   49054:	e0bffc17 	ldw	r2,-16(fp)
   49058:	1004d63a 	srli	r2,r2,24
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
   4905c:	d8c00015 	stw	r3,0(sp)
   49060:	d8800115 	stw	r2,4(sp)
   49064:	01000174 	movhi	r4,5
   49068:	213f5a04 	addi	r4,r4,-664
   4906c:	00080f80 	call	80f8 <printf>
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
   49070:	01000084 	movi	r4,2
   49074:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
   49078:	01008504 	movi	r4,532
   4907c:	002a53c0 	call	2a53c <pk_alloc>
   49080:	e0bff815 	stw	r2,-32(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   49084:	01000084 	movi	r4,2
   49088:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
   4908c:	e0bff817 	ldw	r2,-32(fp)
   49090:	1000101e 	bne	r2,zero,490d4 <icmp_destun+0xf4>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
   49094:	00800174 	movhi	r2,5
   49098:	108f9904 	addi	r2,r2,15972
   4909c:	10800017 	ldw	r2,0(r2)
   490a0:	1080800c 	andi	r2,r2,512
   490a4:	10000326 	beq	r2,zero,490b4 <icmp_destun+0xd4>
         dprintf("icmp: can't alloc pkt\n");
   490a8:	01000174 	movhi	r4,5
   490ac:	213f6704 	addi	r4,r4,-612
   490b0:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
   490b4:	008001b4 	movhi	r2,6
   490b8:	10b9ff04 	addi	r2,r2,-6148
   490bc:	10800e17 	ldw	r2,56(r2)
   490c0:	10c00044 	addi	r3,r2,1
   490c4:	008001b4 	movhi	r2,6
   490c8:	10b9ff04 	addi	r2,r2,-6148
   490cc:	10c00e15 	stw	r3,56(r2)
      return;
   490d0:	00008006 	br	492d4 <icmp_destun+0x2f4>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
   490d4:	e0bff817 	ldw	r2,-32(fp)
   490d8:	10800317 	ldw	r2,12(r2)
   490dc:	e0bff915 	stw	r2,-28(fp)
   pip->ip_src = src_addr;
   490e0:	e0bff917 	ldw	r2,-28(fp)
   490e4:	e0fffd17 	ldw	r3,-12(fp)
   490e8:	10c00315 	stw	r3,12(r2)
   pip->ip_dest = host;
   490ec:	e0bff917 	ldw	r2,-28(fp)
   490f0:	e0fffc17 	ldw	r3,-16(fp)
   490f4:	10c00415 	stw	r3,16(r2)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
   490f8:	e0bff817 	ldw	r2,-32(fp)
   490fc:	10800317 	ldw	r2,12(r2)
   49100:	10c00504 	addi	r3,r2,20
   49104:	e0bff817 	ldw	r2,-32(fp)
   49108:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= sizeof(struct ip);
   4910c:	e0bff817 	ldw	r2,-32(fp)
   49110:	10800417 	ldw	r2,16(r2)
   49114:	10fffb04 	addi	r3,r2,-20
   49118:	e0bff817 	ldw	r2,-32(fp)
   4911c:	10c00415 	stw	r3,16(r2)
   p->net = net;     /* Put in the interface that this packet came in on */
   49120:	e0bff817 	ldw	r2,-32(fp)
   49124:	e0c00217 	ldw	r3,8(fp)
   49128:	10c00615 	stw	r3,24(r2)

   d = (struct destun *)p->nb_prot;
   4912c:	e0bff817 	ldw	r2,-32(fp)
   49130:	10800317 	ldw	r2,12(r2)
   49134:	e0bffa15 	stw	r2,-24(fp)

   if (typecode & 0xFF00)               /* if the type was sent */
   49138:	e0bfff17 	ldw	r2,-4(fp)
   4913c:	10bfc00c 	andi	r2,r2,65280
   49140:	10000626 	beq	r2,zero,4915c <icmp_destun+0x17c>
      d->dtype = (char)(typecode >>8);  /* then use it */
   49144:	e0bfff17 	ldw	r2,-4(fp)
   49148:	1004d23a 	srli	r2,r2,8
   4914c:	1007883a 	mov	r3,r2
   49150:	e0bffa17 	ldw	r2,-24(fp)
   49154:	10c00005 	stb	r3,0(r2)
   49158:	00000306 	br	49168 <icmp_destun+0x188>
   else                                 /* else use default */
      d->dtype = DESTIN;
   4915c:	e0bffa17 	ldw	r2,-24(fp)
   49160:	00c000c4 	movi	r3,3
   49164:	10c00005 	stb	r3,0(r2)
   d->dcode = (char)(typecode & 0xFF);
   49168:	e0bfff17 	ldw	r2,-4(fp)
   4916c:	1007883a 	mov	r3,r2
   49170:	e0bffa17 	ldw	r2,-24(fp)
   49174:	10c00045 	stb	r3,1(r2)
   d->dno1 = d->dno2 = 0;
   49178:	e0bffa17 	ldw	r2,-24(fp)
   4917c:	1000018d 	sth	zero,6(r2)
   49180:	e0bffa17 	ldw	r2,-24(fp)
   49184:	10c0018b 	ldhu	r3,6(r2)
   49188:	e0bffa17 	ldw	r2,-24(fp)
   4918c:	10c0010d 	sth	r3,4(r2)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
   49190:	e0bfff17 	ldw	r2,-4(fp)
   49194:	10803fcc 	andi	r2,r2,255
   49198:	10800118 	cmpnei	r2,r2,4
   4919c:	1000121e 	bne	r2,zero,491e8 <icmp_destun+0x208>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
   491a0:	e0800217 	ldw	r2,8(fp)
   491a4:	10c00917 	ldw	r3,36(r2)
   491a8:	e0800217 	ldw	r2,8(fp)
   491ac:	10800817 	ldw	r2,32(r2)
   491b0:	1885c83a 	sub	r2,r3,r2
   491b4:	1005d23a 	srai	r2,r2,8
   491b8:	10803fcc 	andi	r2,r2,255
   491bc:	1009883a 	mov	r4,r2
   491c0:	e0800217 	ldw	r2,8(fp)
   491c4:	10c00917 	ldw	r3,36(r2)
   491c8:	e0800217 	ldw	r2,8(fp)
   491cc:	10800817 	ldw	r2,32(r2)
   491d0:	1885c83a 	sub	r2,r3,r2
   491d4:	1004923a 	slli	r2,r2,8
   491d8:	2084b03a 	or	r2,r4,r2
   491dc:	1007883a 	mov	r3,r2
   491e0:	e0bffa17 	ldw	r2,-24(fp)
   491e4:	10c0018d 	sth	r3,6(r2)
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
   491e8:	e0bffa17 	ldw	r2,-24(fp)
   491ec:	10800204 	addi	r2,r2,8
   491f0:	1009883a 	mov	r4,r2
   491f4:	e17ffe17 	ldw	r5,-8(fp)
   491f8:	01800704 	movi	r6,28
   491fc:	0007c900 	call	7c90 <memcpy>

   d->dchksum = 0;
   49200:	e0bffa17 	ldw	r2,-24(fp)
   49204:	1000008d 	sth	zero,2(r2)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
   49208:	e13ffa17 	ldw	r4,-24(fp)
   4920c:	01400484 	movi	r5,18
   49210:	00263480 	call	26348 <cksum>
   49214:	0084303a 	nor	r2,zero,r2
   49218:	1007883a 	mov	r3,r2
   4921c:	e0bffa17 	ldw	r2,-24(fp)
   49220:	10c0008d 	sth	r3,2(r2)

   p->nb_plen =  sizeof(struct destun);
   49224:	e0bff817 	ldw	r2,-32(fp)
   49228:	00c00904 	movi	r3,36
   4922c:	10c00415 	stw	r3,16(r2)
   p->fhost = host;
   49230:	e0bff817 	ldw	r2,-32(fp)
   49234:	e0fffc17 	ldw	r3,-16(fp)
   49238:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
   4923c:	01000044 	movi	r4,1
   49240:	e17ff817 	ldw	r5,-32(fp)
   49244:	003d78c0 	call	3d78c <ip_write>
   49248:	e0bffb15 	stw	r2,-20(fp)
   if (i < 0)
   4924c:	e0bffb17 	ldw	r2,-20(fp)
   49250:	1000110e 	bge	r2,zero,49298 <icmp_destun+0x2b8>
   {
      icmp_mib.icmpOutErrors++;
   49254:	008001b4 	movhi	r2,6
   49258:	10b9ff04 	addi	r2,r2,-6148
   4925c:	10800e17 	ldw	r2,56(r2)
   49260:	10c00044 	addi	r3,r2,1
   49264:	008001b4 	movhi	r2,6
   49268:	10b9ff04 	addi	r2,r2,-6148
   4926c:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
   49270:	00800174 	movhi	r2,5
   49274:	108f9904 	addi	r2,r2,15972
   49278:	10800017 	ldw	r2,0(r2)
   4927c:	1080860c 	andi	r2,r2,536
   49280:	10000426 	beq	r2,zero,49294 <icmp_destun+0x2b4>
         dprintf("ICMP: Can't send dest unreachable\n");
   49284:	01000174 	movhi	r4,5
   49288:	213f6d04 	addi	r4,r4,-588
   4928c:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG  */
      return;
   49290:	00001006 	br	492d4 <icmp_destun+0x2f4>
   49294:	00000f06 	br	492d4 <icmp_destun+0x2f4>
   }
   icmp_mib.icmpOutMsgs++;
   49298:	008001b4 	movhi	r2,6
   4929c:	10b9ff04 	addi	r2,r2,-6148
   492a0:	10800d17 	ldw	r2,52(r2)
   492a4:	10c00044 	addi	r3,r2,1
   492a8:	008001b4 	movhi	r2,6
   492ac:	10b9ff04 	addi	r2,r2,-6148
   492b0:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutDestUnreachs++;
   492b4:	008001b4 	movhi	r2,6
   492b8:	10b9ff04 	addi	r2,r2,-6148
   492bc:	10800f17 	ldw	r2,60(r2)
   492c0:	10c00044 	addi	r3,r2,1
   492c4:	008001b4 	movhi	r2,6
   492c8:	10b9ff04 	addi	r2,r2,-6148
   492cc:	10c00f15 	stw	r3,60(r2)
   return;
   492d0:	0001883a 	nop
}
   492d4:	e037883a 	mov	sp,fp
   492d8:	dfc00117 	ldw	ra,4(sp)
   492dc:	df000017 	ldw	fp,0(sp)
   492e0:	dec00204 	addi	sp,sp,8
   492e4:	f800283a 	ret

000492e8 <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
   492e8:	defff504 	addi	sp,sp,-44
   492ec:	dfc00a15 	stw	ra,40(sp)
   492f0:	df000915 	stw	fp,36(sp)
   492f4:	df000904 	addi	fp,sp,36
   492f8:	e13ffe15 	stw	r4,-8(fp)
   492fc:	2805883a 	mov	r2,r5
   49300:	e0bfff05 	stb	r2,-4(fp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
   49304:	00800174 	movhi	r2,5
   49308:	108f9904 	addi	r2,r2,15972
   4930c:	10800017 	ldw	r2,0(r2)
   49310:	1080040c 	andi	r2,r2,16
   49314:	10003026 	beq	r2,zero,493d8 <icmp_timex+0xf0>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
   49318:	e17fff07 	ldb	r5,-4(fp)
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
   4931c:	e0bffe17 	ldw	r2,-8(fp)
   49320:	10800317 	ldw	r2,12(r2)
   49324:	1004d23a 	srli	r2,r2,8
   49328:	10c03fcc 	andi	r3,r2,255
   4932c:	e0bffe17 	ldw	r2,-8(fp)
   49330:	10800317 	ldw	r2,12(r2)
   49334:	1004923a 	slli	r2,r2,8
   49338:	10bfffcc 	andi	r2,r2,65535
   4933c:	1884b03a 	or	r2,r3,r2
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
   49340:	11803fcc 	andi	r6,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
   49344:	e0bffe17 	ldw	r2,-8(fp)
   49348:	10800317 	ldw	r2,12(r2)
   4934c:	1004d23a 	srli	r2,r2,8
   49350:	10c03fcc 	andi	r3,r2,255
   49354:	e0bffe17 	ldw	r2,-8(fp)
   49358:	10800317 	ldw	r2,12(r2)
   4935c:	1004923a 	slli	r2,r2,8
   49360:	10bfffcc 	andi	r2,r2,65535
   49364:	1884b03a 	or	r2,r3,r2
   49368:	1004d23a 	srli	r2,r2,8
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
   4936c:	11c03fcc 	andi	r7,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
   49370:	e0bffe17 	ldw	r2,-8(fp)
   49374:	10800317 	ldw	r2,12(r2)
   49378:	1004d23a 	srli	r2,r2,8
   4937c:	10c03fcc 	andi	r3,r2,255
   49380:	e0bffe17 	ldw	r2,-8(fp)
   49384:	10800317 	ldw	r2,12(r2)
   49388:	1004923a 	slli	r2,r2,8
   4938c:	10bfffcc 	andi	r2,r2,65535
   49390:	1884b03a 	or	r2,r3,r2
   49394:	1004d43a 	srli	r2,r2,16
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
   49398:	10c03fcc 	andi	r3,r2,255
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
   4939c:	e0bffe17 	ldw	r2,-8(fp)
   493a0:	10800317 	ldw	r2,12(r2)
   493a4:	1004d23a 	srli	r2,r2,8
   493a8:	11003fcc 	andi	r4,r2,255
   493ac:	e0bffe17 	ldw	r2,-8(fp)
   493b0:	10800317 	ldw	r2,12(r2)
   493b4:	1004923a 	slli	r2,r2,8
   493b8:	10bfffcc 	andi	r2,r2,65535
   493bc:	2084b03a 	or	r2,r4,r2
   493c0:	1004d63a 	srli	r2,r2,24
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
   493c4:	d8c00015 	stw	r3,0(sp)
   493c8:	d8800115 	stw	r2,4(sp)
   493cc:	01000174 	movhi	r4,5
   493d0:	213f7604 	addi	r4,r4,-552
   493d4:	00080f80 	call	80f8 <printf>
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
   493d8:	e0bffe17 	ldw	r2,-8(fp)
   493dc:	10800003 	ldbu	r2,0(r2)
   493e0:	108003cc 	andi	r2,r2,15
   493e4:	1085883a 	add	r2,r2,r2
   493e8:	1085883a 	add	r2,r2,r2
   493ec:	10800404 	addi	r2,r2,16
   493f0:	e0bff905 	stb	r2,-28(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   493f4:	01000084 	movi	r4,2
   493f8:	002b3800 	call	2b380 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
   493fc:	e0fff903 	ldbu	r3,-28(fp)
   49400:	00800174 	movhi	r2,5
   49404:	108f9704 	addi	r2,r2,15964
   49408:	10800017 	ldw	r2,0(r2)
   4940c:	1885883a 	add	r2,r3,r2
   49410:	10800504 	addi	r2,r2,20
   49414:	1009883a 	mov	r4,r2
   49418:	002a53c0 	call	2a53c <pk_alloc>
   4941c:	e0bffa15 	stw	r2,-24(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   49420:	01000084 	movi	r4,2
   49424:	002b4480 	call	2b448 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
   49428:	e0bffa17 	ldw	r2,-24(fp)
   4942c:	1000101e 	bne	r2,zero,49470 <icmp_timex+0x188>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
   49430:	00800174 	movhi	r2,5
   49434:	108f9904 	addi	r2,r2,15972
   49438:	10800017 	ldw	r2,0(r2)
   4943c:	1080800c 	andi	r2,r2,512
   49440:	10000326 	beq	r2,zero,49450 <icmp_timex+0x168>
         dprintf("icmp: can't alloc pkt\n");
   49444:	01000174 	movhi	r4,5
   49448:	213f6704 	addi	r4,r4,-612
   4944c:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
   49450:	008001b4 	movhi	r2,6
   49454:	10b9ff04 	addi	r2,r2,-6148
   49458:	10800e17 	ldw	r2,56(r2)
   4945c:	10c00044 	addi	r3,r2,1
   49460:	008001b4 	movhi	r2,6
   49464:	10b9ff04 	addi	r2,r2,-6148
   49468:	10c00e15 	stw	r3,56(r2)
      return;
   4946c:	00006506 	br	49604 <icmp_timex+0x31c>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
   49470:	e0bffa17 	ldw	r2,-24(fp)
   49474:	10800317 	ldw	r2,12(r2)
   49478:	e0bffb15 	stw	r2,-20(fp)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
   4947c:	e0bffe17 	ldw	r2,-8(fp)
   49480:	10c00417 	ldw	r3,16(r2)
   49484:	e0bffb17 	ldw	r2,-20(fp)
   49488:	10c00315 	stw	r3,12(r2)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
   4948c:	e0bffe17 	ldw	r2,-8(fp)
   49490:	10c00317 	ldw	r3,12(r2)
   49494:	e0bffb17 	ldw	r2,-20(fp)
   49498:	10c00415 	stw	r3,16(r2)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
   4949c:	e0bffa17 	ldw	r2,-24(fp)
   494a0:	10800317 	ldw	r2,12(r2)
   494a4:	10c00504 	addi	r3,r2,20
   494a8:	e0bffa17 	ldw	r2,-24(fp)
   494ac:	10c00315 	stw	r3,12(r2)

   tx = (struct timex *) p->nb_prot;
   494b0:	e0bffa17 	ldw	r2,-24(fp)
   494b4:	10800317 	ldw	r2,12(r2)
   494b8:	e0bffc15 	stw	r2,-16(fp)

   tx->ttype = TIMEX;
   494bc:	e0bffc17 	ldw	r2,-16(fp)
   494c0:	00c002c4 	movi	r3,11
   494c4:	10c00005 	stb	r3,0(r2)
   tx->tcode = code;
   494c8:	e0bffc17 	ldw	r2,-16(fp)
   494cc:	e0ffff03 	ldbu	r3,-4(fp)
   494d0:	10c00045 	stb	r3,1(r2)
   tx->tno1 = tx->tno2 = 0;
   494d4:	e0bffc17 	ldw	r2,-16(fp)
   494d8:	1000018d 	sth	zero,6(r2)
   494dc:	e0bffc17 	ldw	r2,-16(fp)
   494e0:	10c0018b 	ldhu	r3,6(r2)
   494e4:	e0bffc17 	ldw	r2,-16(fp)
   494e8:	10c0010d 	sth	r3,4(r2)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
   494ec:	e0bffc17 	ldw	r2,-16(fp)
   494f0:	10c00204 	addi	r3,r2,8
   494f4:	e0bffe17 	ldw	r2,-8(fp)
   494f8:	10800003 	ldbu	r2,0(r2)
   494fc:	10803fcc 	andi	r2,r2,255
   49500:	108003cc 	andi	r2,r2,15
   49504:	1085883a 	add	r2,r2,r2
   49508:	1085883a 	add	r2,r2,r2
   4950c:	10800204 	addi	r2,r2,8
   49510:	1809883a 	mov	r4,r3
   49514:	e17ffe17 	ldw	r5,-8(fp)
   49518:	100d883a 	mov	r6,r2
   4951c:	0007c900 	call	7c90 <memcpy>

   tx->tchksum = 0;
   49520:	e0bffc17 	ldw	r2,-16(fp)
   49524:	1000008d 	sth	zero,2(r2)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
   49528:	e0bff903 	ldbu	r2,-28(fp)
   4952c:	1004d07a 	srli	r2,r2,1
   49530:	10803fcc 	andi	r2,r2,255
   49534:	e13ffc17 	ldw	r4,-16(fp)
   49538:	100b883a 	mov	r5,r2
   4953c:	00263480 	call	26348 <cksum>
   49540:	0084303a 	nor	r2,zero,r2
   49544:	1007883a 	mov	r3,r2
   49548:	e0bffc17 	ldw	r2,-16(fp)
   4954c:	10c0008d 	sth	r3,2(r2)

   p->nb_plen = icmp_pkt_len;
   49550:	e0fff903 	ldbu	r3,-28(fp)
   49554:	e0bffa17 	ldw	r2,-24(fp)
   49558:	10c00415 	stw	r3,16(r2)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
   4955c:	e0bffb17 	ldw	r2,-20(fp)
   49560:	10c00417 	ldw	r3,16(r2)
   49564:	e0bffa17 	ldw	r2,-24(fp)
   49568:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
   4956c:	01000044 	movi	r4,1
   49570:	e17ffa17 	ldw	r5,-24(fp)
   49574:	003d78c0 	call	3d78c <ip_write>
   49578:	e0bffd15 	stw	r2,-12(fp)
   if (i < 0)
   4957c:	e0bffd17 	ldw	r2,-12(fp)
   49580:	1000110e 	bge	r2,zero,495c8 <icmp_timex+0x2e0>
   {
      icmp_mib.icmpOutErrors++;
   49584:	008001b4 	movhi	r2,6
   49588:	10b9ff04 	addi	r2,r2,-6148
   4958c:	10800e17 	ldw	r2,56(r2)
   49590:	10c00044 	addi	r3,r2,1
   49594:	008001b4 	movhi	r2,6
   49598:	10b9ff04 	addi	r2,r2,-6148
   4959c:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
   495a0:	00800174 	movhi	r2,5
   495a4:	108f9904 	addi	r2,r2,15972
   495a8:	10800017 	ldw	r2,0(r2)
   495ac:	1080860c 	andi	r2,r2,536
   495b0:	10000426 	beq	r2,zero,495c4 <icmp_timex+0x2dc>
         dprintf("ICMP: Can't send Time Exceeded\n");
   495b4:	01000174 	movhi	r4,5
   495b8:	213f8604 	addi	r4,r4,-488
   495bc:	00083740 	call	8374 <puts>
#endif   /* NPDEBUG  */
      return;
   495c0:	00001006 	br	49604 <icmp_timex+0x31c>
   495c4:	00000f06 	br	49604 <icmp_timex+0x31c>
   }
   icmp_mib.icmpOutMsgs++;
   495c8:	008001b4 	movhi	r2,6
   495cc:	10b9ff04 	addi	r2,r2,-6148
   495d0:	10800d17 	ldw	r2,52(r2)
   495d4:	10c00044 	addi	r3,r2,1
   495d8:	008001b4 	movhi	r2,6
   495dc:	10b9ff04 	addi	r2,r2,-6148
   495e0:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutTimeExcds++;
   495e4:	008001b4 	movhi	r2,6
   495e8:	10b9ff04 	addi	r2,r2,-6148
   495ec:	10801017 	ldw	r2,64(r2)
   495f0:	10c00044 	addi	r3,r2,1
   495f4:	008001b4 	movhi	r2,6
   495f8:	10b9ff04 	addi	r2,r2,-6148
   495fc:	10c01015 	stw	r3,64(r2)
   return;
   49600:	0001883a 	nop
}
   49604:	e037883a 	mov	sp,fp
   49608:	dfc00117 	ldw	ra,4(sp)
   4960c:	df000017 	ldw	fp,0(sp)
   49610:	dec00204 	addi	sp,sp,8
   49614:	f800283a 	ret

00049618 <icmp_du>:
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
   49618:	defffc04 	addi	sp,sp,-16
   4961c:	dfc00315 	stw	ra,12(sp)
   49620:	df000215 	stw	fp,8(sp)
   49624:	df000204 	addi	fp,sp,8
   49628:	e13ffe15 	stw	r4,-8(fp)
   4962c:	e17fff15 	stw	r5,-4(fp)
   /* see if user app wants notification first */
   if (icmpdu_hook)
   49630:	d0a8c917 	ldw	r2,-23772(gp)
   49634:	10000426 	beq	r2,zero,49648 <icmp_du+0x30>
      icmpdu_hook(p, pdp);
   49638:	d0a8c917 	ldw	r2,-23772(gp)
   4963c:	e13ffe17 	ldw	r4,-8(fp)
   49640:	e17fff17 	ldw	r5,-4(fp)
   49644:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
   49648:	e13ffe17 	ldw	r4,-8(fp)
   4964c:	e17fff17 	ldw	r5,-4(fp)
   49650:	002d2380 	call	2d238 <so_icmpdu>
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
   49654:	e037883a 	mov	sp,fp
   49658:	dfc00117 	ldw	ra,4(sp)
   4965c:	df000017 	ldw	fp,0(sp)
   49660:	dec00204 	addi	sp,sp,8
   49664:	f800283a 	ret

00049668 <atexit>:
   49668:	200b883a 	mov	r5,r4
   4966c:	000d883a 	mov	r6,zero
   49670:	0009883a 	mov	r4,zero
   49674:	000f883a 	mov	r7,zero
   49678:	0049df01 	jmpi	49df0 <__register_exitproc>

0004967c <atoi>:
   4967c:	000b883a 	mov	r5,zero
   49680:	01800284 	movi	r6,10
   49684:	0049d241 	jmpi	49d24 <strtol>

00049688 <_atoi_r>:
   49688:	000d883a 	mov	r6,zero
   4968c:	01c00284 	movi	r7,10
   49690:	0049ac41 	jmpi	49ac4 <_strtol_r>

00049694 <exit>:
   49694:	defffe04 	addi	sp,sp,-8
   49698:	000b883a 	mov	r5,zero
   4969c:	dc000015 	stw	r16,0(sp)
   496a0:	dfc00115 	stw	ra,4(sp)
   496a4:	2021883a 	mov	r16,r4
   496a8:	0049f040 	call	49f04 <__call_exitprocs>
   496ac:	00800174 	movhi	r2,5
   496b0:	10872c04 	addi	r2,r2,7344
   496b4:	11000017 	ldw	r4,0(r2)
   496b8:	20800f17 	ldw	r2,60(r4)
   496bc:	10000126 	beq	r2,zero,496c4 <exit+0x30>
   496c0:	103ee83a 	callr	r2
   496c4:	8009883a 	mov	r4,r16
   496c8:	004a0b40 	call	4a0b4 <_exit>

000496cc <memalign>:
   496cc:	00c00174 	movhi	r3,5
   496d0:	18c72d04 	addi	r3,r3,7348
   496d4:	2005883a 	mov	r2,r4
   496d8:	19000017 	ldw	r4,0(r3)
   496dc:	280d883a 	mov	r6,r5
   496e0:	100b883a 	mov	r5,r2
   496e4:	00496e81 	jmpi	496e8 <_memalign_r>

000496e8 <_memalign_r>:
   496e8:	defffa04 	addi	sp,sp,-24
   496ec:	dc400115 	stw	r17,4(sp)
   496f0:	dfc00515 	stw	ra,20(sp)
   496f4:	dd000415 	stw	r20,16(sp)
   496f8:	dcc00315 	stw	r19,12(sp)
   496fc:	dc800215 	stw	r18,8(sp)
   49700:	dc000015 	stw	r16,0(sp)
   49704:	00800204 	movi	r2,8
   49708:	2823883a 	mov	r17,r5
   4970c:	11404b2e 	bgeu	r2,r5,4983c <_memalign_r+0x154>
   49710:	008003c4 	movi	r2,15
   49714:	2029883a 	mov	r20,r4
   49718:	11400136 	bltu	r2,r5,49720 <_memalign_r+0x38>
   4971c:	04400404 	movi	r17,16
   49720:	308002c4 	addi	r2,r6,11
   49724:	00c00584 	movi	r3,22
   49728:	18803e2e 	bgeu	r3,r2,49824 <_memalign_r+0x13c>
   4972c:	04bffe04 	movi	r18,-8
   49730:	14a4703a 	and	r18,r2,r18
   49734:	90003d16 	blt	r18,zero,4982c <_memalign_r+0x144>
   49738:	91803c36 	bltu	r18,r6,4982c <_memalign_r+0x144>
   4973c:	89400404 	addi	r5,r17,16
   49740:	a009883a 	mov	r4,r20
   49744:	2c8b883a 	add	r5,r5,r18
   49748:	00074e80 	call	74e8 <_malloc_r>
   4974c:	1027883a 	mov	r19,r2
   49750:	10005026 	beq	r2,zero,49894 <_memalign_r+0x1ac>
   49754:	a009883a 	mov	r4,r20
   49758:	00180200 	call	18020 <__malloc_lock>
   4975c:	9809883a 	mov	r4,r19
   49760:	880b883a 	mov	r5,r17
   49764:	9c3ffe04 	addi	r16,r19,-8
   49768:	00152580 	call	15258 <__umodsi3>
   4976c:	10001c26 	beq	r2,zero,497e0 <_memalign_r+0xf8>
   49770:	88bfffc4 	addi	r2,r17,-1
   49774:	9887883a 	add	r3,r19,r2
   49778:	0445c83a 	sub	r2,zero,r17
   4977c:	1884703a 	and	r2,r3,r2
   49780:	10bffe04 	addi	r2,r2,-8
   49784:	1409c83a 	sub	r4,r2,r16
   49788:	014003c4 	movi	r5,15
   4978c:	8007883a 	mov	r3,r16
   49790:	2900330e 	bge	r5,r4,49860 <_memalign_r+0x178>
   49794:	1021883a 	mov	r16,r2
   49798:	993fff17 	ldw	r4,-4(r19)
   4979c:	00bfff04 	movi	r2,-4
   497a0:	80c7c83a 	sub	r3,r16,r3
   497a4:	2084703a 	and	r2,r4,r2
   497a8:	10c5c83a 	sub	r2,r2,r3
   497ac:	11000054 	ori	r4,r2,1
   497b0:	81000115 	stw	r4,4(r16)
   497b4:	8085883a 	add	r2,r16,r2
   497b8:	11800117 	ldw	r6,4(r2)
   497bc:	a009883a 	mov	r4,r20
   497c0:	980b883a 	mov	r5,r19
   497c4:	31800054 	ori	r6,r6,1
   497c8:	11800115 	stw	r6,4(r2)
   497cc:	98bfff17 	ldw	r2,-4(r19)
   497d0:	1080004c 	andi	r2,r2,1
   497d4:	1884b03a 	or	r2,r3,r2
   497d8:	98bfff15 	stw	r2,-4(r19)
   497dc:	000f1900 	call	f190 <_free_r>
   497e0:	80c00117 	ldw	r3,4(r16)
   497e4:	00bfff04 	movi	r2,-4
   497e8:	1884703a 	and	r2,r3,r2
   497ec:	1485c83a 	sub	r2,r2,r18
   497f0:	00c003c4 	movi	r3,15
   497f4:	18801c16 	blt	r3,r2,49868 <_memalign_r+0x180>
   497f8:	a009883a 	mov	r4,r20
   497fc:	00181400 	call	18140 <__malloc_unlock>
   49800:	80800204 	addi	r2,r16,8
   49804:	dfc00517 	ldw	ra,20(sp)
   49808:	dd000417 	ldw	r20,16(sp)
   4980c:	dcc00317 	ldw	r19,12(sp)
   49810:	dc800217 	ldw	r18,8(sp)
   49814:	dc400117 	ldw	r17,4(sp)
   49818:	dc000017 	ldw	r16,0(sp)
   4981c:	dec00604 	addi	sp,sp,24
   49820:	f800283a 	ret
   49824:	04800404 	movi	r18,16
   49828:	91bfc42e 	bgeu	r18,r6,4973c <__alt_mem_descriptor_memory+0xdf00973c>
   4982c:	00800304 	movi	r2,12
   49830:	a0800015 	stw	r2,0(r20)
   49834:	0005883a 	mov	r2,zero
   49838:	003ff206 	br	49804 <__alt_mem_descriptor_memory+0xdf009804>
   4983c:	300b883a 	mov	r5,r6
   49840:	dfc00517 	ldw	ra,20(sp)
   49844:	dd000417 	ldw	r20,16(sp)
   49848:	dcc00317 	ldw	r19,12(sp)
   4984c:	dc800217 	ldw	r18,8(sp)
   49850:	dc400117 	ldw	r17,4(sp)
   49854:	dc000017 	ldw	r16,0(sp)
   49858:	dec00604 	addi	sp,sp,24
   4985c:	00074e81 	jmpi	74e8 <_malloc_r>
   49860:	1461883a 	add	r16,r2,r17
   49864:	003fcc06 	br	49798 <__alt_mem_descriptor_memory+0xdf009798>
   49868:	848b883a 	add	r5,r16,r18
   4986c:	10800054 	ori	r2,r2,1
   49870:	28800115 	stw	r2,4(r5)
   49874:	80800117 	ldw	r2,4(r16)
   49878:	a009883a 	mov	r4,r20
   4987c:	29400204 	addi	r5,r5,8
   49880:	1080004c 	andi	r2,r2,1
   49884:	90a4b03a 	or	r18,r18,r2
   49888:	84800115 	stw	r18,4(r16)
   4988c:	000f1900 	call	f190 <_free_r>
   49890:	003fd906 	br	497f8 <__alt_mem_descriptor_memory+0xdf0097f8>
   49894:	0005883a 	mov	r2,zero
   49898:	003fda06 	br	49804 <__alt_mem_descriptor_memory+0xdf009804>

0004989c <memcmp>:
   4989c:	01c000c4 	movi	r7,3
   498a0:	3980192e 	bgeu	r7,r6,49908 <memcmp+0x6c>
   498a4:	2144b03a 	or	r2,r4,r5
   498a8:	11c4703a 	and	r2,r2,r7
   498ac:	10000f26 	beq	r2,zero,498ec <memcmp+0x50>
   498b0:	20800003 	ldbu	r2,0(r4)
   498b4:	28c00003 	ldbu	r3,0(r5)
   498b8:	10c0151e 	bne	r2,r3,49910 <memcmp+0x74>
   498bc:	31bfff84 	addi	r6,r6,-2
   498c0:	01ffffc4 	movi	r7,-1
   498c4:	00000406 	br	498d8 <memcmp+0x3c>
   498c8:	20800003 	ldbu	r2,0(r4)
   498cc:	28c00003 	ldbu	r3,0(r5)
   498d0:	31bfffc4 	addi	r6,r6,-1
   498d4:	10c00e1e 	bne	r2,r3,49910 <memcmp+0x74>
   498d8:	21000044 	addi	r4,r4,1
   498dc:	29400044 	addi	r5,r5,1
   498e0:	31fff91e 	bne	r6,r7,498c8 <__alt_mem_descriptor_memory+0xdf0098c8>
   498e4:	0005883a 	mov	r2,zero
   498e8:	f800283a 	ret
   498ec:	20c00017 	ldw	r3,0(r4)
   498f0:	28800017 	ldw	r2,0(r5)
   498f4:	1880041e 	bne	r3,r2,49908 <memcmp+0x6c>
   498f8:	31bfff04 	addi	r6,r6,-4
   498fc:	21000104 	addi	r4,r4,4
   49900:	29400104 	addi	r5,r5,4
   49904:	39bff936 	bltu	r7,r6,498ec <__alt_mem_descriptor_memory+0xdf0098ec>
   49908:	303fe91e 	bne	r6,zero,498b0 <__alt_mem_descriptor_memory+0xdf0098b0>
   4990c:	003ff506 	br	498e4 <__alt_mem_descriptor_memory+0xdf0098e4>
   49910:	10c5c83a 	sub	r2,r2,r3
   49914:	f800283a 	ret

00049918 <strncmp>:
   49918:	30002126 	beq	r6,zero,499a0 <strncmp+0x88>
   4991c:	2144b03a 	or	r2,r4,r5
   49920:	108000cc 	andi	r2,r2,3
   49924:	1000241e 	bne	r2,zero,499b8 <strncmp+0xa0>
   49928:	024000c4 	movi	r9,3
   4992c:	4980222e 	bgeu	r9,r6,499b8 <strncmp+0xa0>
   49930:	20800017 	ldw	r2,0(r4)
   49934:	28c00017 	ldw	r3,0(r5)
   49938:	10c01f1e 	bne	r2,r3,499b8 <strncmp+0xa0>
   4993c:	31bfff04 	addi	r6,r6,-4
   49940:	30001726 	beq	r6,zero,499a0 <strncmp+0x88>
   49944:	02ffbff4 	movhi	r11,65279
   49948:	5affbfc4 	addi	r11,r11,-257
   4994c:	0086303a 	nor	r3,zero,r2
   49950:	02a02074 	movhi	r10,32897
   49954:	12c5883a 	add	r2,r2,r11
   49958:	52a02004 	addi	r10,r10,-32640
   4995c:	10c4703a 	and	r2,r2,r3
   49960:	1284703a 	and	r2,r2,r10
   49964:	10000226 	beq	r2,zero,49970 <strncmp+0x58>
   49968:	00000d06 	br	499a0 <strncmp+0x88>
   4996c:	10000c1e 	bne	r2,zero,499a0 <strncmp+0x88>
   49970:	21000104 	addi	r4,r4,4
   49974:	29400104 	addi	r5,r5,4
   49978:	49800f2e 	bgeu	r9,r6,499b8 <strncmp+0xa0>
   4997c:	20c00017 	ldw	r3,0(r4)
   49980:	29c00017 	ldw	r7,0(r5)
   49984:	1ad1883a 	add	r8,r3,r11
   49988:	00c4303a 	nor	r2,zero,r3
   4998c:	4084703a 	and	r2,r8,r2
   49990:	1284703a 	and	r2,r2,r10
   49994:	19c0081e 	bne	r3,r7,499b8 <strncmp+0xa0>
   49998:	31bfff04 	addi	r6,r6,-4
   4999c:	303ff31e 	bne	r6,zero,4996c <__alt_mem_descriptor_memory+0xdf00996c>
   499a0:	0005883a 	mov	r2,zero
   499a4:	f800283a 	ret
   499a8:	303ffd26 	beq	r6,zero,499a0 <__alt_mem_descriptor_memory+0xdf0099a0>
   499ac:	103ffc26 	beq	r2,zero,499a0 <__alt_mem_descriptor_memory+0xdf0099a0>
   499b0:	21000044 	addi	r4,r4,1
   499b4:	29400044 	addi	r5,r5,1
   499b8:	20800007 	ldb	r2,0(r4)
   499bc:	28c00007 	ldb	r3,0(r5)
   499c0:	31bfffc4 	addi	r6,r6,-1
   499c4:	10fff826 	beq	r2,r3,499a8 <__alt_mem_descriptor_memory+0xdf0099a8>
   499c8:	20800003 	ldbu	r2,0(r4)
   499cc:	28c00003 	ldbu	r3,0(r5)
   499d0:	10c5c83a 	sub	r2,r2,r3
   499d4:	f800283a 	ret

000499d8 <strncpy>:
   499d8:	2906b03a 	or	r3,r5,r4
   499dc:	18c000cc 	andi	r3,r3,3
   499e0:	2005883a 	mov	r2,r4
   499e4:	18002c1e 	bne	r3,zero,49a98 <strncpy+0xc0>
   499e8:	010000c4 	movi	r4,3
   499ec:	21802a2e 	bgeu	r4,r6,49a98 <strncpy+0xc0>
   499f0:	033fbff4 	movhi	r12,65279
   499f4:	02e02074 	movhi	r11,32897
   499f8:	633fbfc4 	addi	r12,r12,-257
   499fc:	5ae02004 	addi	r11,r11,-32640
   49a00:	100f883a 	mov	r7,r2
   49a04:	2a000017 	ldw	r8,0(r5)
   49a08:	3815883a 	mov	r10,r7
   49a0c:	0212303a 	nor	r9,zero,r8
   49a10:	4307883a 	add	r3,r8,r12
   49a14:	48c6703a 	and	r3,r9,r3
   49a18:	1ac6703a 	and	r3,r3,r11
   49a1c:	1800261e 	bne	r3,zero,49ab8 <strncpy+0xe0>
   49a20:	39c00104 	addi	r7,r7,4
   49a24:	52000015 	stw	r8,0(r10)
   49a28:	31bfff04 	addi	r6,r6,-4
   49a2c:	3811883a 	mov	r8,r7
   49a30:	29400104 	addi	r5,r5,4
   49a34:	21bff336 	bltu	r4,r6,49a04 <__alt_mem_descriptor_memory+0xdf009a04>
   49a38:	30001e26 	beq	r6,zero,49ab4 <strncpy+0xdc>
   49a3c:	29c00003 	ldbu	r7,0(r5)
   49a40:	31bfffc4 	addi	r6,r6,-1
   49a44:	40c00044 	addi	r3,r8,1
   49a48:	41c00005 	stb	r7,0(r8)
   49a4c:	39c03fcc 	andi	r7,r7,255
   49a50:	39c0201c 	xori	r7,r7,128
   49a54:	39ffe004 	addi	r7,r7,-128
   49a58:	29400044 	addi	r5,r5,1
   49a5c:	38001026 	beq	r7,zero,49aa0 <strncpy+0xc8>
   49a60:	1811883a 	mov	r8,r3
   49a64:	00000906 	br	49a8c <strncpy+0xb4>
   49a68:	29c00003 	ldbu	r7,0(r5)
   49a6c:	31bfffc4 	addi	r6,r6,-1
   49a70:	29400044 	addi	r5,r5,1
   49a74:	41c00005 	stb	r7,0(r8)
   49a78:	39c03fcc 	andi	r7,r7,255
   49a7c:	39c0201c 	xori	r7,r7,128
   49a80:	39ffe004 	addi	r7,r7,-128
   49a84:	1811883a 	mov	r8,r3
   49a88:	38000526 	beq	r7,zero,49aa0 <strncpy+0xc8>
   49a8c:	18c00044 	addi	r3,r3,1
   49a90:	303ff51e 	bne	r6,zero,49a68 <__alt_mem_descriptor_memory+0xdf009a68>
   49a94:	f800283a 	ret
   49a98:	1011883a 	mov	r8,r2
   49a9c:	003fe606 	br	49a38 <__alt_mem_descriptor_memory+0xdf009a38>
   49aa0:	30000726 	beq	r6,zero,49ac0 <strncpy+0xe8>
   49aa4:	198d883a 	add	r6,r3,r6
   49aa8:	18000005 	stb	zero,0(r3)
   49aac:	18c00044 	addi	r3,r3,1
   49ab0:	19bffd1e 	bne	r3,r6,49aa8 <__alt_mem_descriptor_memory+0xdf009aa8>
   49ab4:	f800283a 	ret
   49ab8:	3811883a 	mov	r8,r7
   49abc:	003fde06 	br	49a38 <__alt_mem_descriptor_memory+0xdf009a38>
   49ac0:	f800283a 	ret

00049ac4 <_strtol_r>:
   49ac4:	00800174 	movhi	r2,5
   49ac8:	defff404 	addi	sp,sp,-48
   49acc:	10872b04 	addi	r2,r2,7340
   49ad0:	dcc00515 	stw	r19,20(sp)
   49ad4:	14c00017 	ldw	r19,0(r2)
   49ad8:	dd800815 	stw	r22,32(sp)
   49adc:	dd400715 	stw	r21,28(sp)
   49ae0:	dd000615 	stw	r20,24(sp)
   49ae4:	dfc00b15 	stw	ra,44(sp)
   49ae8:	df000a15 	stw	fp,40(sp)
   49aec:	ddc00915 	stw	r23,36(sp)
   49af0:	dc800415 	stw	r18,16(sp)
   49af4:	dc400315 	stw	r17,12(sp)
   49af8:	dc000215 	stw	r16,8(sp)
   49afc:	282b883a 	mov	r21,r5
   49b00:	d9000015 	stw	r4,0(sp)
   49b04:	3029883a 	mov	r20,r6
   49b08:	382d883a 	mov	r22,r7
   49b0c:	2813883a 	mov	r9,r5
   49b10:	4a000007 	ldb	r8,0(r9)
   49b14:	4807883a 	mov	r3,r9
   49b18:	4a400044 	addi	r9,r9,1
   49b1c:	9a05883a 	add	r2,r19,r8
   49b20:	10800043 	ldbu	r2,1(r2)
   49b24:	1080020c 	andi	r2,r2,8
   49b28:	103ff91e 	bne	r2,zero,49b10 <__alt_mem_descriptor_memory+0xdf009b10>
   49b2c:	00800b44 	movi	r2,45
   49b30:	4025883a 	mov	r18,r8
   49b34:	4823883a 	mov	r17,r9
   49b38:	40805826 	beq	r8,r2,49c9c <_strtol_r+0x1d8>
   49b3c:	00800ac4 	movi	r2,43
   49b40:	40805a26 	beq	r8,r2,49cac <_strtol_r+0x1e8>
   49b44:	0039883a 	mov	fp,zero
   49b48:	b0000426 	beq	r22,zero,49b5c <_strtol_r+0x98>
   49b4c:	00800404 	movi	r2,16
   49b50:	b0805a26 	beq	r22,r2,49cbc <_strtol_r+0x1f8>
   49b54:	b02f883a 	mov	r23,r22
   49b58:	00000406 	br	49b6c <_strtol_r+0xa8>
   49b5c:	00800c04 	movi	r2,48
   49b60:	90806526 	beq	r18,r2,49cf8 <_strtol_r+0x234>
   49b64:	05800284 	movi	r22,10
   49b68:	b02f883a 	mov	r23,r22
   49b6c:	00e00034 	movhi	r3,32768
   49b70:	18ffffc4 	addi	r3,r3,-1
   49b74:	e0e1883a 	add	r16,fp,r3
   49b78:	b80b883a 	mov	r5,r23
   49b7c:	8009883a 	mov	r4,r16
   49b80:	00152580 	call	15258 <__umodsi3>
   49b84:	8009883a 	mov	r4,r16
   49b88:	b80b883a 	mov	r5,r23
   49b8c:	d8800115 	stw	r2,4(sp)
   49b90:	00152500 	call	15250 <__udivsi3>
   49b94:	9c91883a 	add	r8,r19,r18
   49b98:	42000043 	ldbu	r8,1(r8)
   49b9c:	8807883a 	mov	r3,r17
   49ba0:	000d883a 	mov	r6,zero
   49ba4:	4240010c 	andi	r9,r8,4
   49ba8:	0009883a 	mov	r4,zero
   49bac:	02800044 	movi	r10,1
   49bb0:	017fffc4 	movi	r5,-1
   49bb4:	d9c00117 	ldw	r7,4(sp)
   49bb8:	48000e26 	beq	r9,zero,49bf4 <_strtol_r+0x130>
   49bbc:	923ff404 	addi	r8,r18,-48
   49bc0:	4580120e 	bge	r8,r22,49c0c <_strtol_r+0x148>
   49bc4:	31400526 	beq	r6,r5,49bdc <_strtol_r+0x118>
   49bc8:	11002736 	bltu	r2,r4,49c68 <_strtol_r+0x1a4>
   49bcc:	20802526 	beq	r4,r2,49c64 <_strtol_r+0x1a0>
   49bd0:	25c9383a 	mul	r4,r4,r23
   49bd4:	01800044 	movi	r6,1
   49bd8:	4109883a 	add	r4,r8,r4
   49bdc:	1c800007 	ldb	r18,0(r3)
   49be0:	18c00044 	addi	r3,r3,1
   49be4:	9c91883a 	add	r8,r19,r18
   49be8:	42000043 	ldbu	r8,1(r8)
   49bec:	4240010c 	andi	r9,r8,4
   49bf0:	483ff21e 	bne	r9,zero,49bbc <__alt_mem_descriptor_memory+0xdf009bbc>
   49bf4:	420000cc 	andi	r8,r8,3
   49bf8:	40000426 	beq	r8,zero,49c0c <_strtol_r+0x148>
   49bfc:	42801c26 	beq	r8,r10,49c70 <_strtol_r+0x1ac>
   49c00:	024015c4 	movi	r9,87
   49c04:	9251c83a 	sub	r8,r18,r9
   49c08:	45bfee16 	blt	r8,r22,49bc4 <__alt_mem_descriptor_memory+0xdf009bc4>
   49c0c:	00bfffc4 	movi	r2,-1
   49c10:	30801926 	beq	r6,r2,49c78 <_strtol_r+0x1b4>
   49c14:	0705c83a 	sub	r2,zero,fp
   49c18:	2084f03a 	xor	r2,r4,r2
   49c1c:	1739883a 	add	fp,r2,fp
   49c20:	e005883a 	mov	r2,fp
   49c24:	a0000326 	beq	r20,zero,49c34 <_strtol_r+0x170>
   49c28:	30001a1e 	bne	r6,zero,49c94 <_strtol_r+0x1d0>
   49c2c:	a80b883a 	mov	r5,r21
   49c30:	a1400015 	stw	r5,0(r20)
   49c34:	dfc00b17 	ldw	ra,44(sp)
   49c38:	df000a17 	ldw	fp,40(sp)
   49c3c:	ddc00917 	ldw	r23,36(sp)
   49c40:	dd800817 	ldw	r22,32(sp)
   49c44:	dd400717 	ldw	r21,28(sp)
   49c48:	dd000617 	ldw	r20,24(sp)
   49c4c:	dcc00517 	ldw	r19,20(sp)
   49c50:	dc800417 	ldw	r18,16(sp)
   49c54:	dc400317 	ldw	r17,12(sp)
   49c58:	dc000217 	ldw	r16,8(sp)
   49c5c:	dec00c04 	addi	sp,sp,48
   49c60:	f800283a 	ret
   49c64:	3a3fda0e 	bge	r7,r8,49bd0 <__alt_mem_descriptor_memory+0xdf009bd0>
   49c68:	01bfffc4 	movi	r6,-1
   49c6c:	003fdb06 	br	49bdc <__alt_mem_descriptor_memory+0xdf009bdc>
   49c70:	02400dc4 	movi	r9,55
   49c74:	003fe306 	br	49c04 <__alt_mem_descriptor_memory+0xdf009c04>
   49c78:	d9000017 	ldw	r4,0(sp)
   49c7c:	00800884 	movi	r2,34
   49c80:	20800015 	stw	r2,0(r4)
   49c84:	00a00034 	movhi	r2,32768
   49c88:	10bfffc4 	addi	r2,r2,-1
   49c8c:	e085883a 	add	r2,fp,r2
   49c90:	a03fe826 	beq	r20,zero,49c34 <__alt_mem_descriptor_memory+0xdf009c34>
   49c94:	197fffc4 	addi	r5,r3,-1
   49c98:	003fe506 	br	49c30 <__alt_mem_descriptor_memory+0xdf009c30>
   49c9c:	1c400084 	addi	r17,r3,2
   49ca0:	1c800047 	ldb	r18,1(r3)
   49ca4:	07000044 	movi	fp,1
   49ca8:	003fa706 	br	49b48 <__alt_mem_descriptor_memory+0xdf009b48>
   49cac:	1c400084 	addi	r17,r3,2
   49cb0:	1c800047 	ldb	r18,1(r3)
   49cb4:	0039883a 	mov	fp,zero
   49cb8:	003fa306 	br	49b48 <__alt_mem_descriptor_memory+0xdf009b48>
   49cbc:	00800c04 	movi	r2,48
   49cc0:	90bfa41e 	bne	r18,r2,49b54 <__alt_mem_descriptor_memory+0xdf009b54>
   49cc4:	88c00003 	ldbu	r3,0(r17)
   49cc8:	00bff7c4 	movi	r2,-33
   49ccc:	1884703a 	and	r2,r3,r2
   49cd0:	10803fcc 	andi	r2,r2,255
   49cd4:	1080201c 	xori	r2,r2,128
   49cd8:	10bfe004 	addi	r2,r2,-128
   49cdc:	00c01604 	movi	r3,88
   49ce0:	10ff9c1e 	bne	r2,r3,49b54 <__alt_mem_descriptor_memory+0xdf009b54>
   49ce4:	05c00404 	movi	r23,16
   49ce8:	8c800047 	ldb	r18,1(r17)
   49cec:	b82d883a 	mov	r22,r23
   49cf0:	8c400084 	addi	r17,r17,2
   49cf4:	003f9d06 	br	49b6c <__alt_mem_descriptor_memory+0xdf009b6c>
   49cf8:	88c00003 	ldbu	r3,0(r17)
   49cfc:	00bff7c4 	movi	r2,-33
   49d00:	1884703a 	and	r2,r3,r2
   49d04:	10803fcc 	andi	r2,r2,255
   49d08:	1080201c 	xori	r2,r2,128
   49d0c:	10bfe004 	addi	r2,r2,-128
   49d10:	00c01604 	movi	r3,88
   49d14:	10fff326 	beq	r2,r3,49ce4 <__alt_mem_descriptor_memory+0xdf009ce4>
   49d18:	05800204 	movi	r22,8
   49d1c:	b02f883a 	mov	r23,r22
   49d20:	003f9206 	br	49b6c <__alt_mem_descriptor_memory+0xdf009b6c>

00049d24 <strtol>:
   49d24:	2007883a 	mov	r3,r4
   49d28:	01000174 	movhi	r4,5
   49d2c:	21072d04 	addi	r4,r4,7348
   49d30:	21000017 	ldw	r4,0(r4)
   49d34:	2805883a 	mov	r2,r5
   49d38:	300f883a 	mov	r7,r6
   49d3c:	180b883a 	mov	r5,r3
   49d40:	100d883a 	mov	r6,r2
   49d44:	0049ac41 	jmpi	49ac4 <_strtol_r>

00049d48 <vprintf>:
   49d48:	00800174 	movhi	r2,5
   49d4c:	10872d04 	addi	r2,r2,7348
   49d50:	10800017 	ldw	r2,0(r2)
   49d54:	280f883a 	mov	r7,r5
   49d58:	200d883a 	mov	r6,r4
   49d5c:	11400217 	ldw	r5,8(r2)
   49d60:	1009883a 	mov	r4,r2
   49d64:	004a0981 	jmpi	4a098 <_vfprintf_r>

00049d68 <_vprintf_r>:
   49d68:	2805883a 	mov	r2,r5
   49d6c:	21400217 	ldw	r5,8(r4)
   49d70:	300f883a 	mov	r7,r6
   49d74:	100d883a 	mov	r6,r2
   49d78:	004a0981 	jmpi	4a098 <_vfprintf_r>

00049d7c <_vsprintf_r>:
   49d7c:	00a00034 	movhi	r2,32768
   49d80:	deffe504 	addi	sp,sp,-108
   49d84:	10bfffc4 	addi	r2,r2,-1
   49d88:	2807883a 	mov	r3,r5
   49d8c:	02008204 	movi	r8,520
   49d90:	d8800215 	stw	r2,8(sp)
   49d94:	d8800515 	stw	r2,20(sp)
   49d98:	d80b883a 	mov	r5,sp
   49d9c:	00bfffc4 	movi	r2,-1
   49da0:	d8c00015 	stw	r3,0(sp)
   49da4:	d8c00415 	stw	r3,16(sp)
   49da8:	dfc01a15 	stw	ra,104(sp)
   49dac:	da00030d 	sth	r8,12(sp)
   49db0:	d880038d 	sth	r2,14(sp)
   49db4:	0008da00 	call	8da0 <___svfprintf_internal_r>
   49db8:	d8c00017 	ldw	r3,0(sp)
   49dbc:	18000005 	stb	zero,0(r3)
   49dc0:	dfc01a17 	ldw	ra,104(sp)
   49dc4:	dec01b04 	addi	sp,sp,108
   49dc8:	f800283a 	ret

00049dcc <vsprintf>:
   49dcc:	2007883a 	mov	r3,r4
   49dd0:	01000174 	movhi	r4,5
   49dd4:	21072d04 	addi	r4,r4,7348
   49dd8:	21000017 	ldw	r4,0(r4)
   49ddc:	2805883a 	mov	r2,r5
   49de0:	300f883a 	mov	r7,r6
   49de4:	180b883a 	mov	r5,r3
   49de8:	100d883a 	mov	r6,r2
   49dec:	0049d7c1 	jmpi	49d7c <_vsprintf_r>

00049df0 <__register_exitproc>:
   49df0:	00800174 	movhi	r2,5
   49df4:	defffa04 	addi	sp,sp,-24
   49df8:	10872c04 	addi	r2,r2,7344
   49dfc:	dc000315 	stw	r16,12(sp)
   49e00:	14000017 	ldw	r16,0(r2)
   49e04:	dc400415 	stw	r17,16(sp)
   49e08:	dfc00515 	stw	ra,20(sp)
   49e0c:	80805217 	ldw	r2,328(r16)
   49e10:	2023883a 	mov	r17,r4
   49e14:	10003626 	beq	r2,zero,49ef0 <__register_exitproc+0x100>
   49e18:	10c00117 	ldw	r3,4(r2)
   49e1c:	010007c4 	movi	r4,31
   49e20:	20c00e16 	blt	r4,r3,49e5c <__register_exitproc+0x6c>
   49e24:	1a400044 	addi	r9,r3,1
   49e28:	8800211e 	bne	r17,zero,49eb0 <__register_exitproc+0xc0>
   49e2c:	18c00084 	addi	r3,r3,2
   49e30:	18c7883a 	add	r3,r3,r3
   49e34:	18c7883a 	add	r3,r3,r3
   49e38:	12400115 	stw	r9,4(r2)
   49e3c:	10c7883a 	add	r3,r2,r3
   49e40:	19400015 	stw	r5,0(r3)
   49e44:	0005883a 	mov	r2,zero
   49e48:	dfc00517 	ldw	ra,20(sp)
   49e4c:	dc400417 	ldw	r17,16(sp)
   49e50:	dc000317 	ldw	r16,12(sp)
   49e54:	dec00604 	addi	sp,sp,24
   49e58:	f800283a 	ret
   49e5c:	00800034 	movhi	r2,0
   49e60:	109d3004 	addi	r2,r2,29888
   49e64:	10002526 	beq	r2,zero,49efc <__register_exitproc+0x10c>
   49e68:	01006404 	movi	r4,400
   49e6c:	d9400015 	stw	r5,0(sp)
   49e70:	d9800115 	stw	r6,4(sp)
   49e74:	d9c00215 	stw	r7,8(sp)
   49e78:	00074c00 	call	74c0 <malloc>
   49e7c:	d9400017 	ldw	r5,0(sp)
   49e80:	d9800117 	ldw	r6,4(sp)
   49e84:	d9c00217 	ldw	r7,8(sp)
   49e88:	10001c26 	beq	r2,zero,49efc <__register_exitproc+0x10c>
   49e8c:	80c05217 	ldw	r3,328(r16)
   49e90:	10000115 	stw	zero,4(r2)
   49e94:	02400044 	movi	r9,1
   49e98:	10c00015 	stw	r3,0(r2)
   49e9c:	80805215 	stw	r2,328(r16)
   49ea0:	10006215 	stw	zero,392(r2)
   49ea4:	10006315 	stw	zero,396(r2)
   49ea8:	0007883a 	mov	r3,zero
   49eac:	883fdf26 	beq	r17,zero,49e2c <__alt_mem_descriptor_memory+0xdf009e2c>
   49eb0:	18d1883a 	add	r8,r3,r3
   49eb4:	4211883a 	add	r8,r8,r8
   49eb8:	1211883a 	add	r8,r2,r8
   49ebc:	41802215 	stw	r6,136(r8)
   49ec0:	01000044 	movi	r4,1
   49ec4:	11806217 	ldw	r6,392(r2)
   49ec8:	20c8983a 	sll	r4,r4,r3
   49ecc:	310cb03a 	or	r6,r6,r4
   49ed0:	11806215 	stw	r6,392(r2)
   49ed4:	41c04215 	stw	r7,264(r8)
   49ed8:	01800084 	movi	r6,2
   49edc:	89bfd31e 	bne	r17,r6,49e2c <__alt_mem_descriptor_memory+0xdf009e2c>
   49ee0:	11806317 	ldw	r6,396(r2)
   49ee4:	3108b03a 	or	r4,r6,r4
   49ee8:	11006315 	stw	r4,396(r2)
   49eec:	003fcf06 	br	49e2c <__alt_mem_descriptor_memory+0xdf009e2c>
   49ef0:	80805304 	addi	r2,r16,332
   49ef4:	80805215 	stw	r2,328(r16)
   49ef8:	003fc706 	br	49e18 <__alt_mem_descriptor_memory+0xdf009e18>
   49efc:	00bfffc4 	movi	r2,-1
   49f00:	003fd106 	br	49e48 <__alt_mem_descriptor_memory+0xdf009e48>

00049f04 <__call_exitprocs>:
   49f04:	00800174 	movhi	r2,5
   49f08:	10872c04 	addi	r2,r2,7344
   49f0c:	10800017 	ldw	r2,0(r2)
   49f10:	defff404 	addi	sp,sp,-48
   49f14:	dd800815 	stw	r22,32(sp)
   49f18:	d8800015 	stw	r2,0(sp)
   49f1c:	10805204 	addi	r2,r2,328
   49f20:	dd000615 	stw	r20,24(sp)
   49f24:	dc800415 	stw	r18,16(sp)
   49f28:	dfc00b15 	stw	ra,44(sp)
   49f2c:	df000a15 	stw	fp,40(sp)
   49f30:	ddc00915 	stw	r23,36(sp)
   49f34:	dd400715 	stw	r21,28(sp)
   49f38:	dcc00515 	stw	r19,20(sp)
   49f3c:	dc400315 	stw	r17,12(sp)
   49f40:	dc000215 	stw	r16,8(sp)
   49f44:	2025883a 	mov	r18,r4
   49f48:	2829883a 	mov	r20,r5
   49f4c:	d8800115 	stw	r2,4(sp)
   49f50:	05bfffc4 	movi	r22,-1
   49f54:	d8800017 	ldw	r2,0(sp)
   49f58:	14c05217 	ldw	r19,328(r2)
   49f5c:	98001d26 	beq	r19,zero,49fd4 <__call_exitprocs+0xd0>
   49f60:	dd400117 	ldw	r21,4(sp)
   49f64:	98800117 	ldw	r2,4(r19)
   49f68:	173fffc4 	addi	fp,r2,-1
   49f6c:	e0000d16 	blt	fp,zero,49fa4 <__call_exitprocs+0xa0>
   49f70:	14000044 	addi	r16,r2,1
   49f74:	8421883a 	add	r16,r16,r16
   49f78:	8421883a 	add	r16,r16,r16
   49f7c:	84402004 	addi	r17,r16,128
   49f80:	9c63883a 	add	r17,r19,r17
   49f84:	9c21883a 	add	r16,r19,r16
   49f88:	a0001e26 	beq	r20,zero,4a004 <__call_exitprocs+0x100>
   49f8c:	80804017 	ldw	r2,256(r16)
   49f90:	15001c26 	beq	r2,r20,4a004 <__call_exitprocs+0x100>
   49f94:	e73fffc4 	addi	fp,fp,-1
   49f98:	843fff04 	addi	r16,r16,-4
   49f9c:	8c7fff04 	addi	r17,r17,-4
   49fa0:	e5bff91e 	bne	fp,r22,49f88 <__alt_mem_descriptor_memory+0xdf009f88>
   49fa4:	00800034 	movhi	r2,0
   49fa8:	109d3504 	addi	r2,r2,29908
   49fac:	10000926 	beq	r2,zero,49fd4 <__call_exitprocs+0xd0>
   49fb0:	98800117 	ldw	r2,4(r19)
   49fb4:	1000311e 	bne	r2,zero,4a07c <__call_exitprocs+0x178>
   49fb8:	98800017 	ldw	r2,0(r19)
   49fbc:	10003426 	beq	r2,zero,4a090 <__call_exitprocs+0x18c>
   49fc0:	9809883a 	mov	r4,r19
   49fc4:	a8800015 	stw	r2,0(r21)
   49fc8:	00074d40 	call	74d4 <free>
   49fcc:	acc00017 	ldw	r19,0(r21)
   49fd0:	983fe41e 	bne	r19,zero,49f64 <__alt_mem_descriptor_memory+0xdf009f64>
   49fd4:	dfc00b17 	ldw	ra,44(sp)
   49fd8:	df000a17 	ldw	fp,40(sp)
   49fdc:	ddc00917 	ldw	r23,36(sp)
   49fe0:	dd800817 	ldw	r22,32(sp)
   49fe4:	dd400717 	ldw	r21,28(sp)
   49fe8:	dd000617 	ldw	r20,24(sp)
   49fec:	dcc00517 	ldw	r19,20(sp)
   49ff0:	dc800417 	ldw	r18,16(sp)
   49ff4:	dc400317 	ldw	r17,12(sp)
   49ff8:	dc000217 	ldw	r16,8(sp)
   49ffc:	dec00c04 	addi	sp,sp,48
   4a000:	f800283a 	ret
   4a004:	98800117 	ldw	r2,4(r19)
   4a008:	80c00017 	ldw	r3,0(r16)
   4a00c:	10bfffc4 	addi	r2,r2,-1
   4a010:	17001526 	beq	r2,fp,4a068 <__call_exitprocs+0x164>
   4a014:	80000015 	stw	zero,0(r16)
   4a018:	183fde26 	beq	r3,zero,49f94 <__alt_mem_descriptor_memory+0xdf009f94>
   4a01c:	00800044 	movi	r2,1
   4a020:	1708983a 	sll	r4,r2,fp
   4a024:	98806217 	ldw	r2,392(r19)
   4a028:	9dc00117 	ldw	r23,4(r19)
   4a02c:	2084703a 	and	r2,r4,r2
   4a030:	1000061e 	bne	r2,zero,4a04c <__call_exitprocs+0x148>
   4a034:	183ee83a 	callr	r3
   4a038:	98800117 	ldw	r2,4(r19)
   4a03c:	15ffc51e 	bne	r2,r23,49f54 <__alt_mem_descriptor_memory+0xdf009f54>
   4a040:	a8800017 	ldw	r2,0(r21)
   4a044:	14ffd326 	beq	r2,r19,49f94 <__alt_mem_descriptor_memory+0xdf009f94>
   4a048:	003fc206 	br	49f54 <__alt_mem_descriptor_memory+0xdf009f54>
   4a04c:	98806317 	ldw	r2,396(r19)
   4a050:	2084703a 	and	r2,r4,r2
   4a054:	1000061e 	bne	r2,zero,4a070 <__call_exitprocs+0x16c>
   4a058:	89400017 	ldw	r5,0(r17)
   4a05c:	9009883a 	mov	r4,r18
   4a060:	183ee83a 	callr	r3
   4a064:	003ff406 	br	4a038 <__alt_mem_descriptor_memory+0xdf00a038>
   4a068:	9f000115 	stw	fp,4(r19)
   4a06c:	003fea06 	br	4a018 <__alt_mem_descriptor_memory+0xdf00a018>
   4a070:	89000017 	ldw	r4,0(r17)
   4a074:	183ee83a 	callr	r3
   4a078:	003fef06 	br	4a038 <__alt_mem_descriptor_memory+0xdf00a038>
   4a07c:	98800017 	ldw	r2,0(r19)
   4a080:	982b883a 	mov	r21,r19
   4a084:	1027883a 	mov	r19,r2
   4a088:	983fb61e 	bne	r19,zero,49f64 <__alt_mem_descriptor_memory+0xdf009f64>
   4a08c:	003fd106 	br	49fd4 <__alt_mem_descriptor_memory+0xdf009fd4>
   4a090:	0005883a 	mov	r2,zero
   4a094:	003ffa06 	br	4a080 <__alt_mem_descriptor_memory+0xdf00a080>

0004a098 <_vfprintf_r>:
   4a098:	defffe04 	addi	sp,sp,-8
   4a09c:	dfc00115 	stw	ra,4(sp)
   4a0a0:	d9c00015 	stw	r7,0(sp)
   4a0a4:	000ad380 	call	ad38 <___vfprintf_internal_r>
   4a0a8:	dfc00117 	ldw	ra,4(sp)
   4a0ac:	dec00204 	addi	sp,sp,8
   4a0b0:	f800283a 	ret

0004a0b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4a0b4:	defffd04 	addi	sp,sp,-12
   4a0b8:	df000215 	stw	fp,8(sp)
   4a0bc:	df000204 	addi	fp,sp,8
   4a0c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4a0c4:	00800174 	movhi	r2,5
   4a0c8:	108f8244 	addi	r2,r2,15881
   4a0cc:	10000005 	stb	zero,0(r2)
   4a0d0:	e0bfff17 	ldw	r2,-4(fp)
   4a0d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4a0d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4a0dc:	10000226 	beq	r2,zero,4a0e8 <_exit+0x34>
    ALT_SIM_FAIL();
   4a0e0:	002af070 	cmpltui	zero,zero,43969
   4a0e4:	00000106 	br	4a0ec <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4a0e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4a0ec:	003fff06 	br	4a0ec <__alt_mem_descriptor_memory+0xdf00a0ec>
