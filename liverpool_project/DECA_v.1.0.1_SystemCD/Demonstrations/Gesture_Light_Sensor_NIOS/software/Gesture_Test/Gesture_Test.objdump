
Gesture_Test.elf:     file format elf32-littlenios2
Gesture_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020240

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00013b7c memsz 0x00013b7c flags r-x
    LOAD off    0x00014b9c vaddr 0x00033b9c paddr 0x00035688 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00017174 vaddr 0x00037174 paddr 0x00037174 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013480  00020240  00020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004dc  000336c0  000336c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00033b9c  00035688  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00037174  00037174  00017174  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00037304  00037304  00016688  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016688  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e38  00000000  00000000  000166b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000297de  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a408  00000000  00000000  00040cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cfa6  00000000  00000000  0004b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026c8  00000000  00000000  00058074  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b8c  00000000  00000000  0005a73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ce10  00000000  00000000  0005e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007b0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000015c8  00000000  00000000  0007b138  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ffd4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007ffd7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ffe1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ffe2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007ffe3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007ffe7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007ffeb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007ffef  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007fff8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00080001  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008000a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  00080015  2**0
                  CONTENTS, READONLY
 29 .jdi          00004065  00000000  00000000  0008002f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004ff1b  00000000  00000000  00084094  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020240 l    d  .text	00000000 .text
000336c0 l    d  .rodata	00000000 .rodata
00033b9c l    d  .rwdata	00000000 .rwdata
00037174 l    d  .bss	00000000 .bss
00037304 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Gesture_Test_bsp//obj/HAL/src/crt0.o
00020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0002028c l     F .text	00000018 Si114x_ISR
0003717c l     O .bss	00000004 processGestures
000202a4 l     F .text	00000024 Button_ISR
00000000 l    df *ABS*	00000000 si114x_algorithm.c
000204a8 l     F .text	000000ac readPSData
00037184 l     O .bss	00000008 si114x_i2c
000371c4 l     O .bss	0000000c ps_exit_time.3626
000371d0 l     O .bss	0000000c ps_entry_time.3625
00037180 l     O .bss	00000003 ps_state.3627
00000000 l    df *ABS*	00000000 si114x_function.c
00020b88 l     F .text	000000cc _sendCmd
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000338aa l     O .rodata	00000010 zeroes.4166
000338ba l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
000338ca l     O .rodata	00000010 zeroes.4181
000338da l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00025a50 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000275d0 l     F .text	00000008 __fp_lock
000275d8 l     F .text	00000008 __fp_unlock
000275ec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00033b9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00033fe0 l     O .rwdata	00000020 lc_ctype_charset
00033fc0 l     O .rwdata	00000020 lc_message_charset
00034000 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0003390c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00033a30 l     O .rodata	00000010 zeroes.4110
00033a40 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0002bc7c l     F .text	000000fc __sprint_r.part.0
00033a60 l     O .rodata	00000010 blanks.4125
00033a50 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002e598 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00030cc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00030de4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00030e10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000311e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000312d4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000313b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00031594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0003567c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000319bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00031b04 l     F .text	00000038 alt_dev_reg
000345e8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00031df8 l     F .text	00000204 altera_avalon_jtag_uart_irq
00031ffc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003261c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000329f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00032c6c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00032da4 l     F .text	00000050 alt_get_errno
00032df4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000371c0 g     O .bss	00000004 alt_instruction_exception_handler
0002a08c g     F .text	00000074 _mprec_log10
0002a178 g     F .text	0000008c __any_on
0002d5cc g     F .text	00000054 _isatty_r
00033918 g     O .rodata	00000028 __mprec_tinytens
000314dc g     F .text	00000078 alt_main
00021618 g     F .text	000000b8 _puts_r
00037204 g     O .bss	00000100 alt_irq
0002d620 g     F .text	0000005c _lseek_r
00020fc0 g     F .text	00000048 ACK_check
00035688 g       *ABS*	00000000 __flash_rwdata_start
00020f6c g     F .text	00000054 ACK_single_check
0002f82c g     F .text	00000084 .hidden __eqdf2
00020d04 g     F .text	00000080 Si114xPauseAll
00020b50 g     F .text	00000038 Si114xReadFromRegister
00037304 g       *ABS*	00000000 __alt_heap_start
000215dc g     F .text	0000003c printf
0002d848 g     F .text	0000009c _wcrtomb_r
0002a944 g     F .text	0000005c __sseek
00027920 g     F .text	00000010 __sinit
0002d6d8 g     F .text	00000154 __swbuf_r
00028398 g     F .text	0000007c _setlocale_r
0002778c g     F .text	00000064 __sfmoreglue
00031574 g     F .text	00000020 __malloc_unlock
00028ff8 g     F .text	0000015c memmove
00021008 g     F .text	000000dc OC_I2C_Write
00027908 g     F .text	00000018 _cleanup
00020c54 g     F .text	000000a8 Si114xParamSet
00029278 g     F .text	000000a8 _Balloc
00020e98 g     F .text	00000008 Si114xAlsForce
0002f8b0 g     F .text	000000e0 .hidden __gtdf2
00033018 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002d574 g     F .text	00000058 _fstat_r
000371a4 g     O .bss	00000004 errno
0002a8c0 g     F .text	00000008 __seofread
0002ac14 g     F .text	00001068 ___svfiprintf_internal_r
000208b8 g     F .text	000001c8 Si114x_ConfigureDetection
000371b0 g     O .bss	00000004 alt_argv
0003d648 g       *ABS*	00000000 _gp
0003198c g     F .text	00000030 usleep
00034468 g     O .rwdata	00000180 alt_fd_list
00033038 g     F .text	00000090 alt_find_dev
00028ec0 g     F .text	00000138 memcpy
000205a0 g     F .text	000002b8 Si114x_NewSample
000275e0 g     F .text	0000000c _cleanup_r
00030aec g     F .text	000000d0 .hidden __floatsidf
00032d2c g     F .text	00000078 alt_io_redirect
0002f990 g     F .text	000000e0 .hidden __ltdf2
000336c0 g       *ABS*	00000000 __DTOR_END__
000216d0 g     F .text	00000014 puts
00032bd0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002a7a4 g     F .text	00000074 __fpclassifyd
00029fe8 g     F .text	000000a4 __ratio
0002d0ec g     F .text	00000024 __vfiprintf_internal
000321f8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000215b0 g     F .text	0000002c _printf_r
0002e6b4 g     F .text	00000008 .hidden __udivsi3
00031230 g     F .text	000000a4 isatty
00037178 g     O .bss	00000004 processDemoSwitch
00033968 g     O .rodata	000000c8 __mprec_tens
00028414 g     F .text	0000000c __locale_charset
000258e0 g     F .text	00000040 vsnprintf
00037174 g     O .bss	00000004 Abort
00033290 g     F .text	0000008c alt_icache_flush
000371a0 g     O .bss	00000004 __malloc_top_pad
00035650 g     O .rwdata	00000004 __mb_cur_max
00028444 g     F .text	0000000c _localeconv_r
00029678 g     F .text	0000003c __i2b
00027d84 g     F .text	000004a4 __sfvwrite_r
0002a818 g     F .text	00000054 _sbrk_r
0002d67c g     F .text	0000005c _read_r
00035670 g     O .rwdata	00000004 alt_max_fd
0002d284 g     F .text	00000100 _fclose_r
000275a0 g     F .text	00000030 fflush
0003719c g     O .bss	00000004 __malloc_max_sbrked_mem
0002e6c4 g     F .text	0000089c .hidden __adddf3
00029d90 g     F .text	0000011c __b2d
0002e008 g     F .text	00000590 .hidden __umoddi3
00031408 g     F .text	000000d4 lseek
00035648 g     O .rwdata	00000004 _global_impure_ptr
0002a204 g     F .text	000005a0 _realloc_r
00037304 g       *ABS*	00000000 __bss_end
000310f0 g     F .text	000000f0 alt_iic_isr_register
00031888 g     F .text	00000104 alt_tick
0002da48 g     F .text	000005c0 .hidden __udivdi3
0002d398 g     F .text	00000184 _fputwc_r
00033940 g     O .rodata	00000028 __mprec_bigtens
0002945c g     F .text	00000104 __s2b
00030bbc g     F .text	000000a4 .hidden __floatunsidf
00029b38 g     F .text	00000060 __mcmp
00027940 g     F .text	00000018 __fp_lock_all
000310a4 g     F .text	0000004c alt_ic_irq_enabled
0002127c g     F .text	000000fc OC_I2CL_Write
000317f0 g     F .text	00000098 alt_alarm_stop
000371a8 g     O .bss	00000004 alt_irq_active
000210e4 g     F .text	00000034 ACK_judge_for_read
000200fc g     F .exceptions	000000d0 alt_irq_handler
00034440 g     O .rwdata	00000028 alt_dev_null
00020eb0 g     F .text	00000018 Write32_Data
000329b0 g     F .text	00000044 alt_dcache_flush_all
00029560 g     F .text	00000068 __hi0bits
00020d84 g     F .text	0000010c Si114xReset
00030a64 g     F .text	00000088 .hidden __fixdfsi
00035688 g       *ABS*	00000000 __ram_rwdata_end
00035668 g     O .rwdata	00000008 alt_dev_list
00031a0c g     F .text	000000f8 write
00033b9c g       *ABS*	00000000 __ram_rodata_end
00030e60 g     F .text	000000b0 fstat
0002f990 g     F .text	000000e0 .hidden __ledf2
0002148c g     F .text	0000004c myprintf
000298b0 g     F .text	00000140 __pow5mult
0002bd90 g     F .text	0000135c ___vfiprintf_internal_r
00037194 g     O .bss	00000004 __nlocale_changed
0002e6bc g     F .text	00000008 .hidden __umodsi3
00037304 g       *ABS*	00000000 end
00031d34 g     F .text	000000c4 altera_avalon_jtag_uart_init
000201cc g     F .exceptions	00000074 alt_instruction_exception_entry
000336c0 g       *ABS*	00000000 __CTOR_LIST__
0003fbd0 g       *ABS*	00000000 __alt_stack_pointer
00032690 g     F .text	00000088 alt_avalon_timer_sc_init
00030c60 g     F .text	00000064 .hidden __clzsi2
00032404 g     F .text	00000218 altera_avalon_jtag_uart_write
00027930 g     F .text	00000004 __sfp_lock_acquire
00028dd8 g     F .text	000000e8 memchr
000237d0 g     F .text	00001ffc ___vfprintf_internal_r
000216e4 g     F .text	00000058 _sprintf_r
00027a94 g     F .text	000002f0 _free_r
00028420 g     F .text	00000010 __locale_mb_cur_max
000334f8 g     F .text	00000194 __call_exitprocs
00020ea8 g     F .text	00000008 Si114xPsAlsAuto
00037190 g     O .bss	00000004 __mlocale_changed
00035654 g     O .rwdata	00000004 __malloc_sbrk_base
00020240 g     F .text	0000004c _start
000371b8 g     O .bss	00000004 _alt_tick_rate
00020e90 g     F .text	00000008 Si114xPsForce
000299f0 g     F .text	00000148 __lshift
000371bc g     O .bss	00000004 _alt_nticks
000315e4 g     F .text	000000fc read
00031b70 g     F .text	00000060 alt_sys_init
00020858 g     F .text	00000060 Si114x_ForceRead
0002aa4c g     F .text	000001c8 __ssprint_r
000333e4 g     F .text	00000114 __register_exitproc
000296b4 g     F .text	000001fc __multiply
000320a4 g     F .text	00000068 altera_avalon_jtag_uart_close
00033b9c g       *ABS*	00000000 __ram_rwdata_start
000336c0 g       *ABS*	00000000 __ram_rodata_start
000371dc g     O .bss	00000028 __malloc_current_mallinfo
00029eac g     F .text	0000013c __d2b
00020cfc g     F .text	00000008 Si114xNop
00031bd0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00020ea0 g     F .text	00000008 Si114xPsAlsForce
000331dc g     F .text	000000b4 alt_get_fd
00032858 g     F .text	00000158 alt_busy_sleep
0002d16c g     F .text	00000054 _close_r
00033368 g     F .text	0000007c memcmp
00031c90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00037304 g       *ABS*	00000000 __alt_stack_base
00031ce0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00025920 g     F .text	00000130 __swsetup_r
00020ee4 g     F .text	00000088 oc_i2c_init
0002ef60 g     F .text	000008cc .hidden __divdf3
000277f0 g     F .text	00000118 __sfp
0002a100 g     F .text	00000078 __copybits
00034038 g     O .rwdata	00000408 __malloc_av_
0002793c g     F .text	00000004 __sinit_lock_release
000257f0 g     F .text	000000f0 _vsnprintf_r
0002fa70 g     F .text	00000724 .hidden __muldf3
0002a86c g     F .text	00000054 __sread
000330c8 g     F .text	00000114 alt_find_file
00032a44 g     F .text	000000a4 alt_dev_llist_insert
00031554 g     F .text	00000020 __malloc_lock
00031740 g     F .text	000000b0 sbrk
00021840 g     F .text	00001f90 ___svfprintf_internal_r
00027378 g     F .text	00000228 _fflush_r
00020a80 g     F .text	0000009c Si114x_ConfigureForceMode
0002d1c0 g     F .text	000000c4 _calloc_r
00037174 g       *ABS*	00000000 __bss_start
00029154 g     F .text	00000124 memset
00020354 g     F .text	00000154 main
000371b4 g     O .bss	00000004 alt_envp
00037198 g     O .bss	00000004 __malloc_max_total_mem
000214d8 g     F .text	00000068 myprintf_hexarray
00031c30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002d82c g     F .text	0000001c __swbuf
0002a9a0 g     F .text	00000008 __sclose
0003fbd0 g       *ABS*	00000000 __alt_heap_limit
0002d384 g     F .text	00000014 fclose
00025c50 g     F .text	00001728 _dtoa_r
00028630 g     F .text	000007a8 _malloc_r
0002d9bc g     F .text	00000030 __ascii_wctomb
00035674 g     O .rwdata	00000004 alt_errno
00028228 g     F .text	000000b8 _fwalk
0002e604 g     F .text	00000054 .hidden __divsi3
00027970 g     F .text	00000124 _malloc_trim_r
000336c0 g       *ABS*	00000000 __CTOR_END__
0002a9a8 g     F .text	000000a4 strcmp
000336c0 g       *ABS*	00000000 __flash_rodata_start
000336c0 g       *ABS*	00000000 __DTOR_LIST__
0002f82c g     F .text	00000084 .hidden __nedf2
00031b3c g     F .text	00000034 alt_irq_init
000316e0 g     F .text	00000060 alt_release_fd
0002173c g     F .text	0000006c sprintf
00033a70 g     O .rodata	00000100 .hidden __clz_tab
00021488 g     F .text	00000004 debug_output
0003718c g     O .bss	00000004 _PathLocale
0003331c g     F .text	00000014 atexit
0002d110 g     F .text	0000005c _write_r
00028450 g     F .text	0000001c setlocale
0003564c g     O .rwdata	00000004 _impure_ptr
000371ac g     O .bss	00000004 alt_argc
00032b44 g     F .text	0000005c _do_dtors
0002843c g     F .text	00000008 __locale_cjk_lang
00021540 g     F .text	00000070 myprintf_dwordarray
00020020 g       .exceptions	00000000 alt_irq_entry
00029d30 g     F .text	00000060 __ulp
00027958 g     F .text	00000018 __fp_unlock_all
000202c8 g     F .text	0000008c Init_Interrupt
00035660 g     O .rwdata	00000008 alt_fs_list
00020ec8 g     F .text	0000001c Read32_Data
00021118 g     F .text	00000164 OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002846c g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00020b1c g     F .text	00000034 Si114xWriteToRegister
00030f10 g     F .text	00000050 alt_ic_isr_register
00020554 g     F .text	0000004c Si114x_SetInterruptOutputEnable
00035688 g       *ABS*	00000000 _edata
00037304 g       *ABS*	00000000 _end
00020240 g       *ABS*	00000000 __ram_exceptions_end
0003210c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00031000 g     F .text	000000a4 alt_ic_irq_disable
0002a8c8 g     F .text	0000007c __swrite
00035658 g     O .rwdata	00000004 __malloc_trim_threshold
00028430 g     F .text	0000000c __locale_msgcharset
00033330 g     F .text	00000038 exit
000282e0 g     F .text	000000b8 _fwalk_reent
00029b98 g     F .text	00000198 __mdiff
0002e658 g     F .text	0000005c .hidden __modsi3
0003fbd0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00027934 g     F .text	00000004 __sfp_lock_release
00021378 g     F .text	00000110 OC_I2CL_Read
0003368c g     F .text	00000034 _exit
00032718 g     F .text	00000140 alt_alarm_start
00028478 g     F .text	000001b8 __smakebuf_r
000217a8 g     F .text	00000098 strlen
00032ec0 g     F .text	00000158 open
0002f8b0 g     F .text	000000e0 .hidden __gedf2
0003565c g     O .rwdata	00000004 __wctomb
0002bd78 g     F .text	00000018 __sprint_r
00032ba0 g     F .text	00000030 alt_icache_flush_all
00035678 g     O .rwdata	00000004 alt_priority_mask
00030f60 g     F .text	000000a0 alt_ic_irq_enable
000257cc g     F .text	00000024 __vfprintf_internal
0002d9ec g     F .text	0000005c _wctomb_r
00030194 g     F .text	000008d0 .hidden __subdf3
000295c8 g     F .text	000000b0 __lo0bits
00035680 g     O .rwdata	00000008 alt_alarm_list
00032ae8 g     F .text	0000005c _do_ctors
0002d8e4 g     F .text	000000d8 wcrtomb
00030d14 g     F .text	000000d0 close
00031338 g     F .text	00000080 alt_load
0002d51c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00027938 g     F .text	00000004 __sinit_lock_acquire
00029348 g     F .text	00000114 __multadd
00029320 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0434>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409014 	ori	at,at,576
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	109c8104 	addi	r2,r2,29188
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	109c8104 	addi	r2,r2,29188
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe055c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0550>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e0:	000531fa 	rdctl	r2,exception
   201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10801f0c 	andi	r2,r2,124
   201f0:	1004d0ba 	srli	r2,r2,2
   201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201f8:	0005333a 	rdctl	r2,badaddr
   201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20200:	d0a6de17 	ldw	r2,-25736(gp)
   20204:	10000726 	beq	r2,zero,20224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20208:	d0a6de17 	ldw	r2,-25736(gp)
   2020c:	e0fffd17 	ldw	r3,-12(fp)
   20210:	1809883a 	mov	r4,r3
   20214:	e17fff17 	ldw	r5,-4(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	103ee83a 	callr	r2
   20220:	00000206 	br	2022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20228:	0005883a 	mov	r2,zero
}
   2022c:	e037883a 	mov	sp,fp
   20230:	dfc00117 	ldw	ra,4(sp)
   20234:	df000017 	ldw	fp,0(sp)
   20238:	dec00204 	addi	sp,sp,8
   2023c:	f800283a 	ret

Disassembly of section .text:

00020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2024c:	00bffd16 	blt	zero,r2,20244 <__alt_data_end+0xfffe0674>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20250:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20254:	defef414 	ori	sp,sp,64464
    movhi gp, %hi(_gp)
   20258:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2025c:	d6b59214 	ori	gp,gp,54856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20260:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20264:	109c5d14 	ori	r2,r2,29044

    movhi r3, %hi(__bss_end)
   20268:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2026c:	18dcc114 	ori	r3,r3,29444

    beq r2, r3, 1f
   20270:	10c00326 	beq	r2,r3,20280 <_start+0x40>

0:
    stw zero, (r2)
   20274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2027c:	10fffd36 	bltu	r2,r3,20274 <__alt_data_end+0xfffe06a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20280:	00313380 	call	31338 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20284:	00314dc0 	call	314dc <alt_main>

00020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20288:	003fff06 	br	20288 <__alt_data_end+0xfffe06b8>

0002028c <Si114x_ISR>:

}

static void Si114x_ISR(void *context)
{
	processGestures = 1;
   2028c:	00800044 	movi	r2,1
   20290:	d0a6cd15 	stw	r2,-25804(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_BASE,0);
   20294:	00800134 	movhi	r2,4
   20298:	10841b04 	addi	r2,r2,4204
   2029c:	10000035 	stwio	zero,0(r2)
   202a0:	f800283a 	ret

000202a4 <Button_ISR>:
}

static void Button_ISR(void *context)
{
	Abort = 1;
   202a4:	00800044 	movi	r2,1
   202a8:	d0a6cb15 	stw	r2,-25812(gp)
	processDemoSwitch = ~processDemoSwitch;
   202ac:	d0a6cc17 	ldw	r2,-25808(gp)
   202b0:	0084303a 	nor	r2,zero,r2
   202b4:	d0a6cc15 	stw	r2,-25808(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE,0);
   202b8:	00800134 	movhi	r2,4
   202bc:	10841704 	addi	r2,r2,4188
   202c0:	10000035 	stwio	zero,0(r2)
   202c4:	f800283a 	ret

000202c8 <Init_Interrupt>:
}



void Init_Interrupt()
{
   202c8:	defffe04 	addi	sp,sp,-8
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_BASE, 0x1);
   202cc:	00800134 	movhi	r2,4
}



void Init_Interrupt()
{
   202d0:	dfc00115 	stw	ra,4(sp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INTERRUPT_BASE, 0x1);
   202d4:	00c00044 	movi	r3,1
   202d8:	10841a04 	addi	r2,r2,4200
   202dc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INTERRUPT_BASE, 0x0);
   202e0:	01000134 	movhi	r4,4
   202e4:	0005883a 	mov	r2,zero
   202e8:	21041b04 	addi	r4,r4,4204
   202ec:	20800035 	stwio	r2,0(r4)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0x1);
   202f0:	01000134 	movhi	r4,4
   202f4:	21041604 	addi	r4,r4,4184
   202f8:	20c00035 	stwio	r3,0(r4)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0x0);
   202fc:	00c00134 	movhi	r3,4
   20300:	18c41704 	addi	r3,r3,4188
   20304:	18800035 	stwio	r2,0(r3)
	alt_ic_isr_register(BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_IRQ, Button_ISR,(void*)BUTTON_BASE, NULL);
   20308:	018000b4 	movhi	r6,2
   2030c:	01c00134 	movhi	r7,4
   20310:	d8000015 	stw	zero,0(sp)
   20314:	0009883a 	mov	r4,zero
   20318:	014000c4 	movi	r5,3
   2031c:	3180a904 	addi	r6,r6,676
   20320:	39c41404 	addi	r7,r7,4176
   20324:	0030f100 	call	30f10 <alt_ic_isr_register>
	alt_ic_isr_register(INTERRUPT_IRQ_INTERRUPT_CONTROLLER_ID, INTERRUPT_IRQ, Si114x_ISR,(void*)INTERRUPT_BASE, NULL);
   20328:	018000b4 	movhi	r6,2
   2032c:	01c00134 	movhi	r7,4
   20330:	d8000015 	stw	zero,0(sp)
   20334:	0009883a 	mov	r4,zero
   20338:	01400084 	movi	r5,2
   2033c:	3180a304 	addi	r6,r6,652
   20340:	39c41804 	addi	r7,r7,4192
   20344:	0030f100 	call	30f10 <alt_ic_isr_register>
}
   20348:	dfc00117 	ldw	ra,4(sp)
   2034c:	dec00204 	addi	sp,sp,8
   20350:	f800283a 	ret

00020354 <main>:


int main()
{
   20354:	defffe04 	addi	sp,sp,-8
   20358:	dfc00115 	stw	ra,4(sp)
   2035c:	dc000015 	stw	r16,0(sp)
  Init_Interrupt();
   20360:	00202c80 	call	202c8 <Init_Interrupt>
  oc_i2c_init(I2C_OPENCORES_BASE);
   20364:	01000134 	movhi	r4,4
   20368:	21040804 	addi	r4,r4,4128
   2036c:	0020ee40 	call	20ee4 <oc_i2c_init>


  printf("Press KEY[0] can switch mode...\n");
   20370:	010000f4 	movhi	r4,3
   20374:	210db004 	addi	r4,r4,14016
   20378:	00216d00 	call	216d0 <puts>
  usleep(1000000);
   2037c:	010003f4 	movhi	r4,15
   20380:	21109004 	addi	r4,r4,16960
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20384:	040000f4 	movhi	r16,3
   20388:	003198c0 	call	3198c <usleep>
   2038c:	841c6f04 	addi	r16,r16,29116
  while(1)
  {
	Abort = 0;
	if(processDemoSwitch)
   20390:	d0a6cc17 	ldw	r2,-25808(gp)

  printf("Press KEY[0] can switch mode...\n");
  usleep(1000000);
  while(1)
  {
	Abort = 0;
   20394:	d026cb15 	stw	zero,-25812(gp)
	if(processDemoSwitch)
   20398:	10000e26 	beq	r2,zero,203d4 <main+0x80>
	{
	  printf("Gesture mode , please wait..\n");
   2039c:	010000f4 	movhi	r4,3
   203a0:	210db804 	addi	r4,r4,14048
   203a4:	00216d00 	call	216d0 <puts>
	  usleep(3000000);
   203a8:	01000bb4 	movhi	r4,46
   203ac:	2131b004 	addi	r4,r4,-14656
   203b0:	003198c0 	call	3198c <usleep>
 * @brief Enable gesture mode.
 *****************************************************************************/
static void enableGestureMode(void)
{

  Si114x_ConfigureDetection(Device_Addr);
   203b4:	01002d04 	movi	r4,180
   203b8:	00208b80 	call	208b8 <Si114x_ConfigureDetection>
  Si114x_SetInterruptOutputEnable(Device_Addr, 1);
   203bc:	01002d04 	movi	r4,180
   203c0:	01400044 	movi	r5,1
   203c4:	00205540 	call	20554 <Si114x_SetInterruptOutputEnable>
	if(processDemoSwitch)
	{
	  printf("Gesture mode , please wait..\n");
	  usleep(3000000);
	  enableGestureMode();
	  printf("Gesture mode is ready\n");
   203c8:	010000f4 	movhi	r4,3
   203cc:	210dc004 	addi	r4,r4,14080
   203d0:	00000a06 	br	203fc <main+0xa8>
	}
	else
	{
	  printf("Force Mode , please wait..\n");
   203d4:	010000f4 	movhi	r4,3
   203d8:	210dc604 	addi	r4,r4,14104
   203dc:	00216d00 	call	216d0 <puts>
	  usleep(3000000);
   203e0:	01000bb4 	movhi	r4,46
   203e4:	2131b004 	addi	r4,r4,-14656
   203e8:	003198c0 	call	3198c <usleep>
/**************************************************************************//**
 * @brief Enable Force mode.
 *****************************************************************************/
static void enableForceMode(void)
{
	Si114x_ConfigureForceMode(Device_Addr);
   203ec:	01002d04 	movi	r4,180
   203f0:	0020a800 	call	20a80 <Si114x_ConfigureForceMode>
	else
	{
	  printf("Force Mode , please wait..\n");
	  usleep(3000000);
	  enableForceMode();
	  printf("Force mode is ready\n");
   203f4:	010000f4 	movhi	r4,3
   203f8:	210dcd04 	addi	r4,r4,14132
   203fc:	00216d00 	call	216d0 <puts>
	}

	while(1)
    {
	    if(processGestures & processDemoSwitch)
   20400:	d0a6cd17 	ldw	r2,-25804(gp)
   20404:	d126cc17 	ldw	r4,-25808(gp)
   20408:	d0e6cb17 	ldw	r3,-25812(gp)
   2040c:	2084703a 	and	r2,r4,r2
   20410:	10001b26 	beq	r2,zero,20480 <main+0x12c>
	    {
	       if(!Abort)
   20414:	1800211e 	bne	r3,zero,2049c <main+0x148>
   20418:	81400017 	ldw	r5,0(r16)
static void handleGestures(void)
{
  gesture_t gestureInput = NONE;

  /* get prox sensor sample */
  gestureInput = Si114x_NewSample(Device_Addr, alt_nticks());
   2041c:	01002d04 	movi	r4,180
   20420:	00205a00 	call	205a0 <Si114x_NewSample>
  if (gestureInput != NONE)
   20424:	10001426 	beq	r2,zero,20478 <main+0x124>
  {
    if (gestureInput == UP)
   20428:	00c00044 	movi	r3,1
   2042c:	10c0031e 	bne	r2,r3,2043c <main+0xe8>
    {
      printf("UP\n");
   20430:	010000f4 	movhi	r4,3
   20434:	210dd204 	addi	r4,r4,14152
   20438:	00000e06 	br	20474 <main+0x120>
    }
    else if(gestureInput == DOWN)
   2043c:	00c00084 	movi	r3,2
   20440:	10c0031e 	bne	r2,r3,20450 <main+0xfc>
    {
      printf("DOWN\n");
   20444:	010000f4 	movhi	r4,3
   20448:	210dd304 	addi	r4,r4,14156
   2044c:	00000906 	br	20474 <main+0x120>
    }
    else if (gestureInput == RIGHT)
   20450:	00c00104 	movi	r3,4
   20454:	10c0031e 	bne	r2,r3,20464 <main+0x110>
    {
      printf("RIGHT\n");
   20458:	010000f4 	movhi	r4,3
   2045c:	210dd504 	addi	r4,r4,14164
   20460:	00000406 	br	20474 <main+0x120>
    }
    else if (gestureInput == LEFT)
   20464:	00c000c4 	movi	r3,3
   20468:	10c0031e 	bne	r2,r3,20478 <main+0x124>
    {
      printf("LEFT\n");
   2046c:	010000f4 	movhi	r4,3
   20470:	210dd704 	addi	r4,r4,14172
   20474:	00216d00 	call	216d0 <puts>
	    if(processGestures & processDemoSwitch)
	    {
	       if(!Abort)
	       {
             handleGestures();
             processGestures = 0;
   20478:	d026cd15 	stw	zero,-25804(gp)
   2047c:	00000706 	br	2049c <main+0x148>
	       }
	    }
	    else if(!processDemoSwitch)
   20480:	2000061e 	bne	r4,zero,2049c <main+0x148>
	    {
	       if(!Abort)
   20484:	1800021e 	bne	r3,zero,20490 <main+0x13c>
	         Si114x_ForceRead(Device_Addr);
   20488:	01002d04 	movi	r4,180
   2048c:	00208580 	call	20858 <Si114x_ForceRead>
	       usleep(100000);
   20490:	010000b4 	movhi	r4,2
   20494:	2121a804 	addi	r4,r4,-31072
   20498:	003198c0 	call	3198c <usleep>
	    }
	    if(Abort)
   2049c:	d0a6cb17 	ldw	r2,-25812(gp)
   204a0:	103fd726 	beq	r2,zero,20400 <__alt_data_end+0xfffe0830>
   204a4:	003fba06 	br	20390 <__alt_data_end+0xfffe07c0>

000204a8 <readPSData>:
 *   Contains i2c peripheral information. See definition of si114x_i2c_t.
 * @param[out] sample
 *   The sample data read from the sensor.
 *****************************************************************************/
static void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
   204a8:	defffd04 	addi	sp,sp,-12
   204ac:	dc000015 	stw	r16,0(sp)
   204b0:	2821883a 	mov	r16,r5
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
   204b4:	01400984 	movi	r5,38
 *   Contains i2c peripheral information. See definition of si114x_i2c_t.
 * @param[out] sample
 *   The sample data read from the sensor.
 *****************************************************************************/
static void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
   204b8:	dfc00215 	stw	ra,8(sp)
   204bc:	dc400115 	stw	r17,4(sp)
   204c0:	2023883a 	mov	r17,r4
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
   204c4:	0020b500 	call	20b50 <Si114xReadFromRegister>
	  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;
   204c8:	8809883a 	mov	r4,r17
 *   The sample data read from the sensor.
 *****************************************************************************/
static void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
   204cc:	8080020d 	sth	r2,8(r16)
	  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;
   204d0:	014009c4 	movi	r5,39
   204d4:	0020b500 	call	20b50 <Si114xReadFromRegister>
   204d8:	80c0020b 	ldhu	r3,8(r16)
   204dc:	1004923a 	slli	r2,r2,8
	  sample->ps2  = Si114xReadFromRegister(si114x_handle, REG_PS2_DATA0);
   204e0:	8809883a 	mov	r4,r17
   204e4:	01400a04 	movi	r5,40
 *****************************************************************************/
static void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
	  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;
   204e8:	10c4b03a 	or	r2,r2,r3
   204ec:	8080020d 	sth	r2,8(r16)
	  sample->ps2  = Si114xReadFromRegister(si114x_handle, REG_PS2_DATA0);
   204f0:	0020b500 	call	20b50 <Si114xReadFromRegister>
	  sample->ps2 |= Si114xReadFromRegister(si114x_handle, REG_PS2_DATA1) << 8;
   204f4:	8809883a 	mov	r4,r17
static void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
	  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;
	  sample->ps2  = Si114xReadFromRegister(si114x_handle, REG_PS2_DATA0);
   204f8:	8080028d 	sth	r2,10(r16)
	  sample->ps2 |= Si114xReadFromRegister(si114x_handle, REG_PS2_DATA1) << 8;
   204fc:	01400a44 	movi	r5,41
   20500:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20504:	80c0028b 	ldhu	r3,10(r16)
   20508:	1004923a 	slli	r2,r2,8
	  sample->ps3  = Si114xReadFromRegister(si114x_handle, REG_PS3_DATA0);
   2050c:	8809883a 	mov	r4,r17
   20510:	01400a84 	movi	r5,42
{
	  /*read sample data from si114x */
	  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
	  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;
	  sample->ps2  = Si114xReadFromRegister(si114x_handle, REG_PS2_DATA0);
	  sample->ps2 |= Si114xReadFromRegister(si114x_handle, REG_PS2_DATA1) << 8;
   20514:	10c4b03a 	or	r2,r2,r3
   20518:	8080028d 	sth	r2,10(r16)
	  sample->ps3  = Si114xReadFromRegister(si114x_handle, REG_PS3_DATA0);
   2051c:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20520:	8080030d 	sth	r2,12(r16)
	  sample->ps3 |= Si114xReadFromRegister(si114x_handle, REG_PS3_DATA1) << 8;
   20524:	8809883a 	mov	r4,r17
   20528:	01400ac4 	movi	r5,43
   2052c:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20530:	80c0030b 	ldhu	r3,12(r16)
   20534:	1004923a 	slli	r2,r2,8
   20538:	10c4b03a 	or	r2,r2,r3
   2053c:	8080030d 	sth	r2,12(r16)
}
   20540:	dfc00217 	ldw	ra,8(sp)
   20544:	dc400117 	ldw	r17,4(sp)
   20548:	dc000017 	ldw	r16,0(sp)
   2054c:	dec00304 	addi	sp,sp,12
   20550:	f800283a 	ret

00020554 <Si114x_SetInterruptOutputEnable>:
 *   Set to 1 to enable the interrupt output pin or set to 0 to disable the pin.
 * @return
 *   Returns error codes based on the I2CDRV.
 *****************************************************************************/
int Si114x_SetInterruptOutputEnable(alt_u8 addr, int enable)
{
   20554:	deffff04 	addi	sp,sp,-4
  int retval;
  si114x_handle->addr = addr;
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20558:	00c00134 	movhi	r3,4
 *   Returns error codes based on the I2CDRV.
 *****************************************************************************/
int Si114x_SetInterruptOutputEnable(alt_u8 addr, int enable)
{
  int retval;
  si114x_handle->addr = addr;
   2055c:	d0a6cf04 	addi	r2,gp,-25796
 *   Set to 1 to enable the interrupt output pin or set to 0 to disable the pin.
 * @return
 *   Returns error codes based on the I2CDRV.
 *****************************************************************************/
int Si114x_SetInterruptOutputEnable(alt_u8 addr, int enable)
{
   20560:	dfc00015 	stw	ra,0(sp)
  int retval;
  si114x_handle->addr = addr;
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20564:	18c40804 	addi	r3,r3,4128
 *   Returns error codes based on the I2CDRV.
 *****************************************************************************/
int Si114x_SetInterruptOutputEnable(alt_u8 addr, int enable)
{
  int retval;
  si114x_handle->addr = addr;
   20568:	11000105 	stb	r4,4(r2)
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   2056c:	d0e6cf15 	stw	r3,-25796(gp)
  if (enable)
  {
	  retval = Si114xWriteToRegister(si114x_handle, REG_INT_CFG, 0x01);
   20570:	1009883a 	mov	r4,r2
int Si114x_SetInterruptOutputEnable(alt_u8 addr, int enable)
{
  int retval;
  si114x_handle->addr = addr;
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
  if (enable)
   20574:	28000326 	beq	r5,zero,20584 <Si114x_SetInterruptOutputEnable+0x30>
  {
	  retval = Si114xWriteToRegister(si114x_handle, REG_INT_CFG, 0x01);
   20578:	014000c4 	movi	r5,3
   2057c:	01800044 	movi	r6,1
   20580:	00000206 	br	2058c <Si114x_SetInterruptOutputEnable+0x38>
  }
  else
  {
	  retval = Si114xWriteToRegister(si114x_handle, REG_INT_CFG, 0);
   20584:	014000c4 	movi	r5,3
   20588:	000d883a 	mov	r6,zero
   2058c:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
   20590:	10803fcc 	andi	r2,r2,255
  }
  return retval;
}
   20594:	dfc00017 	ldw	ra,0(sp)
   20598:	dec00104 	addi	sp,sp,4
   2059c:	f800283a 	ret

000205a0 <Si114x_NewSample>:
 *   The timestamp for when the sample interrupt was received.
 * @return
 *   Returns the type of gesture detected (as defined by gesture_t).
 *****************************************************************************/
gesture_t Si114x_NewSample(alt_u8 addr, alt_u32 timestamp)
{
   205a0:	defff804 	addi	sp,sp,-32
   205a4:	dfc00715 	stw	ra,28(sp)
   205a8:	dc000615 	stw	r16,24(sp)
  Si114x_Sample_TypeDef sample;
  si114x_handle->addr = addr;
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   205ac:	00800134 	movhi	r2,4
 *   Returns the type of gesture detected (as defined by gesture_t).
 *****************************************************************************/
gesture_t Si114x_NewSample(alt_u8 addr, alt_u32 timestamp)
{
  Si114x_Sample_TypeDef sample;
  si114x_handle->addr = addr;
   205b0:	d426cf04 	addi	r16,gp,-25796
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   205b4:	10840804 	addi	r2,r2,4128
 *   Returns the type of gesture detected (as defined by gesture_t).
 *****************************************************************************/
gesture_t Si114x_NewSample(alt_u8 addr, alt_u32 timestamp)
{
  Si114x_Sample_TypeDef sample;
  si114x_handle->addr = addr;
   205b8:	81000105 	stb	r4,4(r16)
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
  sample.timestamp    = timestamp;
   205bc:	d9400015 	stw	r5,0(sp)
  /*read sample data from si114x */
  readPSData(si114x_handle, &sample);
   205c0:	8009883a 	mov	r4,r16
   205c4:	d80b883a 	mov	r5,sp
 *****************************************************************************/
gesture_t Si114x_NewSample(alt_u8 addr, alt_u32 timestamp)
{
  Si114x_Sample_TypeDef sample;
  si114x_handle->addr = addr;
  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   205c8:	d0a6cf15 	stw	r2,-25796(gp)
  sample.timestamp    = timestamp;
  /*read sample data from si114x */
  readPSData(si114x_handle, &sample);
   205cc:	00204a80 	call	204a8 <readPSData>
  /*clear irq*/
  Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, Si114xReadFromRegister(si114x_handle, REG_IRQ_STATUS));
   205d0:	8009883a 	mov	r4,r16
   205d4:	01400844 	movi	r5,33
   205d8:	0020b500 	call	20b50 <Si114xReadFromRegister>
   205dc:	8009883a 	mov	r4,r16
   205e0:	01400844 	movi	r5,33
   205e4:	11803fcc 	andi	r6,r2,255
   205e8:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
  alt_u32 diff_y2 ;
  alt_u32 ps_time[3] ;
  alt_u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
  /*save new samples into ps array */
  ps[2] = samples->ps1;
   205ec:	d900020b 	ldhu	r4,8(sp)
  ps[1] = samples->ps2;
   205f0:	d940028b 	ldhu	r5,10(sp)
  ps[0] = samples->ps3;
   205f4:	d980030b 	ldhu	r6,12(sp)
    if (ps[array_counter] >= PS_THRESHOLD)
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
        ps_entry_time[array_counter] = samples->timestamp;
   205f8:	d9c00017 	ldw	r7,0(sp)
      }
    }
    else
    {
      if (ps_state[array_counter] == 1)
   205fc:	02400044 	movi	r9,1
   20600:	034000f4 	movhi	r13,3
   20604:	03c000f4 	movhi	r15,3
  alt_u32 diff_y2 ;
  alt_u32 ps_time[3] ;
  alt_u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
  /*save new samples into ps array */
  ps[2] = samples->ps1;
   20608:	d900050d 	sth	r4,20(sp)
  ps[1] = samples->ps2;
   2060c:	d940048d 	sth	r5,18(sp)
  ps[0] = samples->ps3;
   20610:	d980040d 	sth	r6,16(sp)
    if (ps[array_counter] >= PS_THRESHOLD)
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
        ps_entry_time[array_counter] = samples->timestamp;
   20614:	0007883a 	mov	r3,zero
  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
  {
    /* If measurement higher than the ps_threshold value, */
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
   20618:	03004344 	movi	r12,269
   2061c:	d226ce04 	addi	r8,gp,-25800
   20620:	6b5c7104 	addi	r13,r13,29124
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
   20624:	481d883a 	mov	r14,r9
   20628:	7bdc7404 	addi	r15,r15,29136
  /*save new samples into ps array */
  ps[2] = samples->ps1;
  ps[1] = samples->ps2;
  ps[0] = samples->ps3;
  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
   2062c:	02c000c4 	movi	r11,3
   20630:	18c5883a 	add	r2,r3,r3
   20634:	dc000404 	addi	r16,sp,16
   20638:	8095883a 	add	r10,r16,r2
  {
    /* If measurement higher than the ps_threshold value, */
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
   2063c:	5280000b 	ldhu	r10,0(r10)
   20640:	6280072e 	bgeu	r12,r10,20660 <Si114x_NewSample+0xc0>
   20644:	40d5883a 	add	r10,r8,r3
    {
      if (ps_state[array_counter] == 0)
   20648:	54000003 	ldbu	r16,0(r10)
   2064c:	80000b1e 	bne	r16,zero,2067c <Si114x_NewSample+0xdc>
   20650:	1085883a 	add	r2,r2,r2
      {
        ps_state[array_counter]      = 1;
   20654:	53800005 	stb	r14,0(r10)
   20658:	13c5883a 	add	r2,r2,r15
   2065c:	00000606 	br	20678 <Si114x_NewSample+0xd8>
   20660:	40d5883a 	add	r10,r8,r3
        ps_entry_time[array_counter] = samples->timestamp;
      }
    }
    else
    {
      if (ps_state[array_counter] == 1)
   20664:	54000003 	ldbu	r16,0(r10)
   20668:	8240041e 	bne	r16,r9,2067c <Si114x_NewSample+0xdc>
   2066c:	1085883a 	add	r2,r2,r2
      {
        ps_state[array_counter]     = 0;
   20670:	50000005 	stb	zero,0(r10)
   20674:	1345883a 	add	r2,r2,r13
        ps_exit_time[array_counter] = samples->timestamp;
   20678:	11c00015 	stw	r7,0(r2)
   2067c:	18c00044 	addi	r3,r3,1
  /*save new samples into ps array */
  ps[2] = samples->ps1;
  ps[1] = samples->ps2;
  ps[0] = samples->ps3;
  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
   20680:	1affeb1e 	bne	r3,r11,20630 <__alt_data_end+0xfffe0a60>
      }
    }
  }

  /* If there is no object in front of the board, look at history to see if a gesture occured */
  if ((ps[0] < PS_THRESHOLD) && (ps[1] < PS_THRESHOLD) && (ps[2] < PS_THRESHOLD))
   20684:	31bfffcc 	andi	r6,r6,65535
   20688:	00804344 	movi	r2,269
   2068c:	11806736 	bltu	r2,r6,2082c <Si114x_NewSample+0x28c>
   20690:	297fffcc 	andi	r5,r5,65535
   20694:	11406536 	bltu	r2,r5,2082c <Si114x_NewSample+0x28c>
   20698:	213fffcc 	andi	r4,r4,65535
   2069c:	11006336 	bltu	r2,r4,2082c <Si114x_NewSample+0x28c>
  {
    /* If the ps_max values are high enough and there exit entry and exit times, */
    /*   then begin processing gestures */
    if ((ps_entry_time[0] != 0) && (ps_entry_time[1] != 0) && (ps_entry_time[2] != 0)
   206a0:	00c000f4 	movhi	r3,3
   206a4:	18dc7404 	addi	r3,r3,29136
   206a8:	19c00017 	ldw	r7,0(r3)
   206ac:	018000f4 	movhi	r6,3
   206b0:	319c7104 	addi	r6,r6,29124
   206b4:	3800021e 	bne	r7,zero,206c0 <Si114x_NewSample+0x120>
  alt_u32 diff_x ;
  alt_u32 diff_y1 ;
  alt_u32 diff_y2 ;
  alt_u32 ps_time[3] ;
  alt_u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
   206b8:	0005883a 	mov	r2,zero
   206bc:	00005406 	br	20810 <Si114x_NewSample+0x270>
  /* If there is no object in front of the board, look at history to see if a gesture occured */
  if ((ps[0] < PS_THRESHOLD) && (ps[1] < PS_THRESHOLD) && (ps[2] < PS_THRESHOLD))
  {
    /* If the ps_max values are high enough and there exit entry and exit times, */
    /*   then begin processing gestures */
    if ((ps_entry_time[0] != 0) && (ps_entry_time[1] != 0) && (ps_entry_time[2] != 0)
   206c0:	19400117 	ldw	r5,4(r3)
   206c4:	283ffc26 	beq	r5,zero,206b8 <__alt_data_end+0xfffe0ae8>
   206c8:	1ac00217 	ldw	r11,8(r3)
   206cc:	583ffa26 	beq	r11,zero,206b8 <__alt_data_end+0xfffe0ae8>
        && (ps_exit_time[0] != 0) && (ps_exit_time[1] != 0) && (ps_exit_time[2] != 0))
   206d0:	32800017 	ldw	r10,0(r6)
   206d4:	503ff826 	beq	r10,zero,206b8 <__alt_data_end+0xfffe0ae8>
   206d8:	32400117 	ldw	r9,4(r6)
   206dc:	483ff626 	beq	r9,zero,206b8 <__alt_data_end+0xfffe0ae8>
   206e0:	32000217 	ldw	r8,8(r6)
   206e4:	403ff426 	beq	r8,zero,206b8 <__alt_data_end+0xfffe0ae8>
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
   206e8:	013f0034 	movhi	r4,64512
   206ec:	22800536 	bltu	r4,r10,20704 <Si114x_NewSample+0x164>
   206f0:	22400436 	bltu	r4,r9,20704 <Si114x_NewSample+0x164>
   206f4:	22000336 	bltu	r4,r8,20704 <Si114x_NewSample+0x164>
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
   206f8:	21c00236 	bltu	r4,r7,20704 <Si114x_NewSample+0x164>
   206fc:	21400136 	bltu	r4,r5,20704 <Si114x_NewSample+0x164>
   20700:	22c00e2e 	bgeu	r4,r11,2073c <Si114x_NewSample+0x19c>
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   20704:	00880034 	movhi	r2,8192
   20708:	10bfffc4 	addi	r2,r2,-1
   2070c:	5095883a 	add	r10,r10,r2
        ps_exit_time[1] += 0x1FFFFFFFL;
   20710:	4893883a 	add	r9,r9,r2
        ps_exit_time[2] += 0x1FFFFFFFL;
   20714:	4091883a 	add	r8,r8,r2

        ps_entry_time[0] += 0x1FFFFFFFL;
   20718:	388f883a 	add	r7,r7,r2
        ps_entry_time[1] += 0x1FFFFFFFL;
   2071c:	288b883a 	add	r5,r5,r2
        ps_entry_time[2] += 0x1FFFFFFFL;
   20720:	5885883a 	add	r2,r11,r2
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   20724:	32800015 	stw	r10,0(r6)
        ps_exit_time[1] += 0x1FFFFFFFL;
   20728:	32400115 	stw	r9,4(r6)
        ps_exit_time[2] += 0x1FFFFFFFL;
   2072c:	32000215 	stw	r8,8(r6)

        ps_entry_time[0] += 0x1FFFFFFFL;
   20730:	19c00015 	stw	r7,0(r3)
        ps_entry_time[1] += 0x1FFFFFFFL;
   20734:	19400115 	stw	r5,4(r3)
        ps_entry_time[2] += 0x1FFFFFFFL;
   20738:	18800215 	stw	r2,8(r3)
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
   2073c:	18800017 	ldw	r2,0(r3)
   20740:	33000017 	ldw	r12,0(r6)
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   20744:	32c00117 	ldw	r11,4(r6)
      ps_time[1] = ps_time[1] + ps_entry_time[1];

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   20748:	32800217 	ldw	r10,8(r6)
        ps_entry_time[2] += 0x1FFFFFFFL;
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
   2074c:	6099c83a 	sub	r12,r12,r2
   20750:	6008d07a 	srli	r4,r12,1
      ps_time[0] = ps_time[0] + ps_entry_time[0];
   20754:	2089883a 	add	r4,r4,r2

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   20758:	18800117 	ldw	r2,4(r3)
   2075c:	5897c83a 	sub	r11,r11,r2
   20760:	580ad07a 	srli	r5,r11,1
      ps_time[1] = ps_time[1] + ps_entry_time[1];
   20764:	288b883a 	add	r5,r5,r2

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   20768:	18800217 	ldw	r2,8(r3)
   2076c:	5095c83a 	sub	r10,r10,r2
   20770:	500ed07a 	srli	r7,r10,1
      ps_time[2] = ps_time[2] + ps_entry_time[2];
   20774:	3885883a 	add	r2,r7,r2

      /* The diff_x and diff_y values help determine a gesture by comparing the */
      /*  LED measurements that are on a single axis */
      if (ps_time[1] > ps_time[2])
   20778:	1140022e 	bgeu	r2,r5,20784 <Si114x_NewSample+0x1e4>
      {
        diff_x = ps_time[1] - ps_time[2];
   2077c:	288fc83a 	sub	r7,r5,r2
   20780:	00000106 	br	20788 <Si114x_NewSample+0x1e8>
      }
      else
      {
        diff_x = ps_time[2] - ps_time[1];
   20784:	114fc83a 	sub	r7,r2,r5
      }
      if( ps_time[0] > ps_time[1] )
   20788:	2900022e 	bgeu	r5,r4,20794 <Si114x_NewSample+0x1f4>
      {
        diff_y1 = ps_time[0] - ps_time[1];
   2078c:	2151c83a 	sub	r8,r4,r5
   20790:	00000106 	br	20798 <Si114x_NewSample+0x1f8>
      }
	  else
      {
        diff_y1 = ps_time[1] - ps_time[0];
   20794:	2911c83a 	sub	r8,r5,r4
      }

      if( ps_time[0] > ps_time[2] )
   20798:	1100022e 	bgeu	r2,r4,207a4 <Si114x_NewSample+0x204>
      {
        diff_y2 = ps_time[0] - ps_time[2];
   2079c:	2093c83a 	sub	r9,r4,r2
   207a0:	00000106 	br	207a8 <Si114x_NewSample+0x208>
      }
	  else
      {
        diff_y2 = ps_time[2] - ps_time[0];
   207a4:	1113c83a 	sub	r9,r2,r4

      /* Take the average of all three midpoints to make a comparison point for each midpoint */
      ps_avg = (alt_u32) ps_time[0] + (alt_u32) ps_time[1] + (alt_u32) ps_time[2];
      ps_avg = ps_avg / 3;

      if ((ps_exit_time[0] - ps_entry_time[0]) > 10 || (ps_exit_time[1] - ps_entry_time[1]) > 10 || (ps_exit_time[2] - ps_entry_time[2]) > 10)
   207a8:	03400284 	movi	r13,10
   207ac:	6b000236 	bltu	r13,r12,207b8 <Si114x_NewSample+0x218>
   207b0:	6ac00136 	bltu	r13,r11,207b8 <Si114x_NewSample+0x218>
   207b4:	6abfc02e 	bgeu	r13,r10,206b8 <__alt_data_end+0xfffe0ae8>
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
   207b8:	2140022e 	bgeu	r4,r5,207c4 <Si114x_NewSample+0x224>
   207bc:	3a000e36 	bltu	r7,r8,207f8 <Si114x_NewSample+0x258>
   207c0:	00000306 	br	207d0 <Si114x_NewSample+0x230>
   207c4:	11001b36 	bltu	r2,r4,20834 <Si114x_NewSample+0x294>
   207c8:	3a400b36 	bltu	r7,r9,207f8 <Si114x_NewSample+0x258>
   207cc:	00000306 	br	207dc <Si114x_NewSample+0x23c>
   207d0:	11001b36 	bltu	r2,r4,20840 <Si114x_NewSample+0x2a0>
   207d4:	3a400836 	bltu	r7,r9,207f8 <Si114x_NewSample+0x258>
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
        {
          ret = DOWN;
        }
        else if((ps_time[0] < ps_time[1]) && (ps_time[2] < ps_time[1]) && (diff_x > ((diff_y1+diff_y2)/2)))
   207d8:	11400936 	bltu	r2,r5,20800 <Si114x_NewSample+0x260>
        {
          ret = RIGHT;
        }
        else if( (ps_time[0] < ps_time[2]) && (ps_time[1] < ps_time[2])  && (diff_x > ((diff_y1+diff_y2)/2)))
   207dc:	20bfb62e 	bgeu	r4,r2,206b8 <__alt_data_end+0xfffe0ae8>
   207e0:	28bfb52e 	bgeu	r5,r2,206b8 <__alt_data_end+0xfffe0ae8>
   207e4:	4a11883a 	add	r8,r9,r8
   207e8:	4010d07a 	srli	r8,r8,1
   207ec:	41ffb22e 	bgeu	r8,r7,206b8 <__alt_data_end+0xfffe0ae8>
        {
          ret = LEFT;
   207f0:	008000c4 	movi	r2,3
   207f4:	00000606 	br	20810 <Si114x_NewSample+0x270>

      if ((ps_exit_time[0] - ps_entry_time[0]) > 10 || (ps_exit_time[1] - ps_entry_time[1]) > 10 || (ps_exit_time[2] - ps_entry_time[2]) > 10)
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
        {
          ret = UP;
   207f8:	00800044 	movi	r2,1
   207fc:	00000406 	br	20810 <Si114x_NewSample+0x270>
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
        {
          ret = DOWN;
        }
        else if((ps_time[0] < ps_time[1]) && (ps_time[2] < ps_time[1]) && (diff_x > ((diff_y1+diff_y2)/2)))
   20800:	4a15883a 	add	r10,r9,r8
   20804:	5014d07a 	srli	r10,r10,1
   20808:	51fff42e 	bgeu	r10,r7,207dc <__alt_data_end+0xfffe0c0c>
        {
          ret = RIGHT;
   2080c:	00800104 	movi	r2,4
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   20810:	30000015 	stw	zero,0(r6)
      ps_entry_time[array_counter] = 0;
   20814:	18000015 	stw	zero,0(r3)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   20818:	30000115 	stw	zero,4(r6)
      ps_entry_time[array_counter] = 0;
   2081c:	18000115 	stw	zero,4(r3)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   20820:	30000215 	stw	zero,8(r6)
      ps_entry_time[array_counter] = 0;
   20824:	18000215 	stw	zero,8(r3)
   20828:	00000706 	br	20848 <Si114x_NewSample+0x2a8>
  alt_u32 diff_x ;
  alt_u32 diff_y1 ;
  alt_u32 diff_y2 ;
  alt_u32 ps_time[3] ;
  alt_u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
   2082c:	0005883a 	mov	r2,zero
   20830:	00000506 	br	20848 <Si114x_NewSample+0x2a8>
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
        {
          ret = UP;
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
   20834:	3a7fe92e 	bgeu	r7,r9,207dc <__alt_data_end+0xfffe0c0c>
        {
          ret = DOWN;
   20838:	00800084 	movi	r2,2
   2083c:	003ff406 	br	20810 <__alt_data_end+0xfffe0c40>
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
        {
          ret = UP;
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
   20840:	3a7ffd36 	bltu	r7,r9,20838 <__alt_data_end+0xfffe0c68>
   20844:	003fe406 	br	207d8 <__alt_data_end+0xfffe0c08>
  readPSData(si114x_handle, &sample);
  /*clear irq*/
  Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, Si114xReadFromRegister(si114x_handle, REG_IRQ_STATUS));
  /*look for gestures */
  return ProcessSi114xSamples(&sample);
}
   20848:	dfc00717 	ldw	ra,28(sp)
   2084c:	dc000617 	ldw	r16,24(sp)
   20850:	dec00804 	addi	sp,sp,32
   20854:	f800283a 	ret

00020858 <Si114x_ForceRead>:



int Si114x_ForceRead(alt_u8 addr)
{
   20858:	defffa04 	addi	sp,sp,-24
   2085c:	dc000415 	stw	r16,16(sp)
	  Si114x_Sample_TypeDef sample;
	  si114x_handle->addr = addr;
	  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20860:	00800134 	movhi	r2,4


int Si114x_ForceRead(alt_u8 addr)
{
	  Si114x_Sample_TypeDef sample;
	  si114x_handle->addr = addr;
   20864:	d426cf04 	addi	r16,gp,-25796
   20868:	81000105 	stb	r4,4(r16)
	  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   2086c:	10840804 	addi	r2,r2,4128
	  Si114xPsAlsForce(si114x_handle);
   20870:	8009883a 	mov	r4,r16
}



int Si114x_ForceRead(alt_u8 addr)
{
   20874:	dfc00515 	stw	ra,20(sp)
	  Si114x_Sample_TypeDef sample;
	  si114x_handle->addr = addr;
	  si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20878:	80800015 	stw	r2,0(r16)
	  Si114xPsAlsForce(si114x_handle);
   2087c:	0020ea00 	call	20ea0 <Si114xPsAlsForce>
	  readPSData(si114x_handle, &sample);
   20880:	8009883a 	mov	r4,r16
   20884:	d80b883a 	mov	r5,sp
   20888:	00204a80 	call	204a8 <readPSData>
	  printf("PS1:%d,PS2:%d,PS3:%d\n",sample.ps1,sample.ps2,sample.ps3);
   2088c:	d940020b 	ldhu	r5,8(sp)
   20890:	d980028b 	ldhu	r6,10(sp)
   20894:	d9c0030b 	ldhu	r7,12(sp)
   20898:	010000f4 	movhi	r4,3
   2089c:	210dd904 	addi	r4,r4,14180
   208a0:	00215dc0 	call	215dc <printf>
	  return 0;
}
   208a4:	0005883a 	mov	r2,zero
   208a8:	dfc00517 	ldw	ra,20(sp)
   208ac:	dc000417 	ldw	r16,16(sp)
   208b0:	dec00604 	addi	sp,sp,24
   208b4:	f800283a 	ret

000208b8 <Si114x_ConfigureDetection>:



int Si114x_ConfigureDetection(alt_u8 addr)
{
   208b8:	defffb04 	addi	sp,sp,-20
   208bc:	dc000015 	stw	r16,0(sp)
	signed short   retval = 0;
	si114x_handle->addr = addr;
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   208c0:	00800134 	movhi	r2,4


int Si114x_ConfigureDetection(alt_u8 addr)
{
	signed short   retval = 0;
	si114x_handle->addr = addr;
   208c4:	d426cf04 	addi	r16,gp,-25796
   208c8:	81000105 	stb	r4,4(r16)
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   208cc:	10840804 	addi	r2,r2,4128
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   208d0:	8009883a 	mov	r4,r16
}



int Si114x_ConfigureDetection(alt_u8 addr)
{
   208d4:	dfc00415 	stw	ra,16(sp)
   208d8:	dcc00315 	stw	r19,12(sp)
   208dc:	dc800215 	stw	r18,8(sp)
   208e0:	dc400115 	stw	r17,4(sp)
	signed short   retval = 0;
	si114x_handle->addr = addr;
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   208e4:	80800015 	stw	r2,0(r16)
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   208e8:	0020d840 	call	20d84 <Si114xReset>

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   208ec:	8009883a 	mov	r4,r16
   208f0:	014003c4 	movi	r5,15
   208f4:	01802ec4 	movi	r6,187
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   208f8:	1025883a 	mov	r18,r2

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   208fc:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20900:	8009883a 	mov	r4,r16
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20904:	10803fcc 	andi	r2,r2,255
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   20908:	94803fcc 	andi	r18,r18,255

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   2090c:	01400404 	movi	r5,16
   20910:	018002c4 	movi	r6,11
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20914:	14a3883a 	add	r17,r2,r18
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20918:	0020b1c0 	call	20b1c <Si114xWriteToRegister>


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   2091c:	048001c4 	movi	r18,7
   20920:	8009883a 	mov	r4,r16
   20924:	900d883a 	mov	r6,r18
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20928:	10803fcc 	andi	r2,r2,255


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   2092c:	01400044 	movi	r5,1
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20930:	88a3883a 	add	r17,r17,r2


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   20934:	0020c540 	call	20c54 <Si114xParamSet>
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);
   20938:	8009883a 	mov	r4,r16

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   2093c:	10803fcc 	andi	r2,r2,255
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);
   20940:	01400104 	movi	r5,4
   20944:	01800f44 	movi	r6,61

	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   20948:	88a3883a 	add	r17,r17,r2
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);
   2094c:	0020b1c0 	call	20b1c <Si114xWriteToRegister>

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
   20950:	8009883a 	mov	r4,r16
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);
   20954:	10803fcc 	andi	r2,r2,255

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
   20958:	01400144 	movi	r5,5
   2095c:	000d883a 	mov	r6,zero
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);


    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);
   20960:	88a3883a 	add	r17,r17,r2

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
   20964:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);
   20968:	8009883a 	mov	r4,r16

    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
   2096c:	10803fcc 	andi	r2,r2,255
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);
   20970:	01400184 	movi	r5,6
   20974:	000d883a 	mov	r6,zero

    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
   20978:	88a3883a 	add	r17,r17,r2
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);
   2097c:	0020b1c0 	call	20b1c <Si114xWriteToRegister>

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
   20980:	8009883a 	mov	r4,r16
    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);
   20984:	10803fcc 	andi	r2,r2,255

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
   20988:	01400304 	movi	r5,12
   2098c:	01800904 	movi	r6,36
    retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
    retval += Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, GESTURE_IRQ|0x20);

    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);
   20990:	88a3883a 	add	r17,r17,r2

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
   20994:	0020c540 	call	20c54 <Si114xParamSet>
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
   20998:	8009883a 	mov	r4,r16
   2099c:	900b883a 	mov	r5,r18
    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
   209a0:	10803fcc 	andi	r2,r2,255
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
   209a4:	000d883a 	mov	r6,zero
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209a8:	04800204 	movi	r18,8
    /**/
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
   209ac:	88a3883a 	add	r17,r17,r2
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
   209b0:	0020c540 	call	20c54 <Si114xParamSet>
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209b4:	8009883a 	mov	r4,r16
   209b8:	900b883a 	mov	r5,r18
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
   209bc:	10803fcc 	andi	r2,r2,255
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209c0:	000d883a 	mov	r6,zero
    retval += Si114xWriteToRegister(si114x_handle, 0x05, 0x0);
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
   209c4:	88a3883a 	add	r17,r17,r2
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209c8:	0020c540 	call	20c54 <Si114xParamSet>
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);
   209cc:	8009883a 	mov	r4,r16
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209d0:	10803fcc 	andi	r2,r2,255
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);
   209d4:	01400244 	movi	r5,9
   209d8:	000d883a 	mov	r6,zero

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   209dc:	04c00804 	movi	r19,32
    retval += Si114xWriteToRegister(si114x_handle, 0x06, 0x0);

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
   209e0:	88a3883a 	add	r17,r17,r2
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);
   209e4:	0020c540 	call	20c54 <Si114xParamSet>

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   209e8:	8009883a 	mov	r4,r16
   209ec:	980d883a 	mov	r6,r19

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);
   209f0:	10803fcc 	andi	r2,r2,255

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   209f4:	014007c4 	movi	r5,31

    /**/
    retval += Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC, 0x24);  /* PS_ADC_MISC to high signal range */
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);
   209f8:	88a3883a 	add	r17,r17,r2

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   209fc:	0020c540 	call	20c54 <Si114xParamSet>
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);
   20a00:	8009883a 	mov	r4,r16
   20a04:	980d883a 	mov	r6,r19
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   20a08:	10803fcc 	andi	r2,r2,255
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);
   20a0c:	01400484 	movi	r5,18
    retval += Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x00);  /* PS1_ADCMUX, PS2_ADCMUX, PS3_ADCMUX to small photodiode */
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
   20a10:	88a3883a 	add	r17,r17,r2
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);
   20a14:	0020c540 	call	20c54 <Si114xParamSet>

    /* Set up how often the device wakes up to make measurements (10ms) */
    retval += Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, 0x84);
   20a18:	8009883a 	mov	r4,r16
   20a1c:	900b883a 	mov	r5,r18
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);
   20a20:	10803fcc 	andi	r2,r2,255

    /* Set up how often the device wakes up to make measurements (10ms) */
    retval += Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, 0x84);
   20a24:	01802104 	movi	r6,132
    retval += Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x00);
    retval += Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x00);

    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);
   20a28:	88a3883a 	add	r17,r17,r2

    /* Set up how often the device wakes up to make measurements (10ms) */
    retval += Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, 0x84);
   20a2c:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval += Si114xWriteToRegister(si114x_handle, REG_PS_RATE, 0x08);
   20a30:	8009883a 	mov	r4,r16
   20a34:	01400284 	movi	r5,10
   20a38:	900d883a 	mov	r6,r18
    /* Configure the ALS IR channel for the same settings as PS */
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);

    /* Set up how often the device wakes up to make measurements (10ms) */
    retval += Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, 0x84);
   20a3c:	10803fcc 	andi	r2,r2,255
   20a40:	88a3883a 	add	r17,r17,r2
    retval += Si114xWriteToRegister(si114x_handle, REG_PS_RATE, 0x08);
   20a44:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
   20a48:	10803fcc 	andi	r2,r2,255
    /* Enable Autonomous Operation */
    retval += Si114xPsAlsAuto(si114x_handle);
   20a4c:	8009883a 	mov	r4,r16
    retval += Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN);
    retval += Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC, RANGE_EN);

    /* Set up how often the device wakes up to make measurements (10ms) */
    retval += Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, 0x84);
    retval += Si114xWriteToRegister(si114x_handle, REG_PS_RATE, 0x08);
   20a50:	88a3883a 	add	r17,r17,r2
    /* Enable Autonomous Operation */
    retval += Si114xPsAlsAuto(si114x_handle);
   20a54:	0020ea80 	call	20ea8 <Si114xPsAlsAuto>
   20a58:	10803fcc 	andi	r2,r2,255
   20a5c:	8885883a 	add	r2,r17,r2
    /* If nothing went wrong after all of this time, the value */
    /* returned will be 0. Otherwise, it will be some negative */
    /* number */
    return retval;

}
   20a60:	10bfffcc 	andi	r2,r2,65535
   20a64:	dfc00417 	ldw	ra,16(sp)
   20a68:	dcc00317 	ldw	r19,12(sp)
   20a6c:	dc800217 	ldw	r18,8(sp)
   20a70:	dc400117 	ldw	r17,4(sp)
   20a74:	dc000017 	ldw	r16,0(sp)
   20a78:	dec00504 	addi	sp,sp,20
   20a7c:	f800283a 	ret

00020a80 <Si114x_ConfigureForceMode>:

int Si114x_ConfigureForceMode(alt_u8 addr)
{
   20a80:	defffc04 	addi	sp,sp,-16
   20a84:	dc000015 	stw	r16,0(sp)
	signed short   retval = 0;
	si114x_handle->addr = addr;
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20a88:	00800134 	movhi	r2,4
}

int Si114x_ConfigureForceMode(alt_u8 addr)
{
	signed short   retval = 0;
	si114x_handle->addr = addr;
   20a8c:	d426cf04 	addi	r16,gp,-25796
   20a90:	81000105 	stb	r4,4(r16)
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20a94:	10840804 	addi	r2,r2,4128
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   20a98:	8009883a 	mov	r4,r16
    return retval;

}

int Si114x_ConfigureForceMode(alt_u8 addr)
{
   20a9c:	dfc00315 	stw	ra,12(sp)
   20aa0:	dc800215 	stw	r18,8(sp)
   20aa4:	dc400115 	stw	r17,4(sp)
	signed short   retval = 0;
	si114x_handle->addr = addr;
	si114x_handle->i2c  = I2C_OPENCORES_BASE;
   20aa8:	80800015 	stw	r2,0(r16)
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   20aac:	0020d840 	call	20d84 <Si114xReset>
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20ab0:	8009883a 	mov	r4,r16
   20ab4:	014003c4 	movi	r5,15
   20ab8:	01802ec4 	movi	r6,187
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   20abc:	1025883a 	mov	r18,r2
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20ac0:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20ac4:	8009883a 	mov	r4,r16
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20ac8:	10803fcc 	andi	r2,r2,255
	/*     1. Pauses all prior measurements */
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
   20acc:	94803fcc 	andi	r18,r18,255
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20ad0:	01400404 	movi	r5,16
   20ad4:	018002c4 	movi	r6,11
	/*     2. Clear  i2c registers that need to be cleared */
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
   20ad8:	14a3883a 	add	r17,r2,r18
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20adc:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
   20ae0:	10803fcc 	andi	r2,r2,255
	retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   20ae4:	8009883a 	mov	r4,r16
   20ae8:	01400044 	movi	r5,1
   20aec:	018001c4 	movi	r6,7
	/*     3. Clears irq status to make sure INT* is negated */
	/*     4. Delays 10 ms */
	/*     5. Sends HW Key */
	retval += Si114xReset(si114x_handle);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED21, (LED1I << 4) + LED2I);
	retval += Si114xWriteToRegister(si114x_handle, REG_PS_LED3, LED3I);
   20af0:	88a3883a 	add	r17,r17,r2
	retval += Si114xParamSet(si114x_handle, PARAM_CH_LIST, GESTURE_TASKLIST);
   20af4:	0020c540 	call	20c54 <Si114xParamSet>
   20af8:	10803fcc 	andi	r2,r2,255
   20afc:	8885883a 	add	r2,r17,r2
    /* If nothing went wrong after all of this time, the value */
    /* returned will be 0. Otherwise, it will be some negative */
    /* number */
    return retval;
}
   20b00:	10bfffcc 	andi	r2,r2,65535
   20b04:	dfc00317 	ldw	ra,12(sp)
   20b08:	dc800217 	ldw	r18,8(sp)
   20b0c:	dc400117 	ldw	r17,4(sp)
   20b10:	dc000017 	ldw	r16,0(sp)
   20b14:	dec00404 	addi	sp,sp,16
   20b18:	f800283a 	ret

00020b1c <Si114xWriteToRegister>:

#include "si114x_function.h"
#include "Si114x_defs.h"

alt_u8 Si114xWriteToRegister(HANDLE si114x_handle, alt_u8 address, alt_u8 data)
{
   20b1c:	deffff04 	addi	sp,sp,-4
   20b20:	dfc00015 	stw	ra,0(sp)
   20b24:	2005883a 	mov	r2,r4
   OC_I2C_Write(((si114x_i2c_t*)si114x_handle)->i2c,((si114x_i2c_t*)si114x_handle)->addr,address,data);
   20b28:	28c03fcc 	andi	r3,r5,255
   20b2c:	21000017 	ldw	r4,0(r4)
   20b30:	11400103 	ldbu	r5,4(r2)
   20b34:	31c03fcc 	andi	r7,r6,255
   20b38:	180d883a 	mov	r6,r3
   20b3c:	00210080 	call	21008 <OC_I2C_Write>
   return 0;
}
   20b40:	0005883a 	mov	r2,zero
   20b44:	dfc00017 	ldw	ra,0(sp)
   20b48:	dec00104 	addi	sp,sp,4
   20b4c:	f800283a 	ret

00020b50 <Si114xReadFromRegister>:
alt_u8 Si114xReadFromRegister(HANDLE si114x_handle, alt_u8 address)
{
   20b50:	defffd04 	addi	sp,sp,-12
   20b54:	dfc00215 	stw	ra,8(sp)
   alt_u8 data;
   OC_I2C_Read(((si114x_i2c_t*)si114x_handle)->i2c,((si114x_i2c_t*)si114x_handle)->addr,address,&data,1);
   20b58:	00c00044 	movi	r3,1
   20b5c:	20800103 	ldbu	r2,4(r4)
   20b60:	d8c00015 	stw	r3,0(sp)
   20b64:	21000017 	ldw	r4,0(r4)
   20b68:	29803fcc 	andi	r6,r5,255
   20b6c:	d9c00104 	addi	r7,sp,4
   20b70:	100b883a 	mov	r5,r2
   20b74:	00211180 	call	21118 <OC_I2C_Read>
   return data;
}
   20b78:	d8800103 	ldbu	r2,4(sp)
   20b7c:	dfc00217 	ldw	ra,8(sp)
   20b80:	dec00304 	addi	sp,sp,12
   20b84:	f800283a 	ret

00020b88 <_sendCmd>:
alt_u8 Si114xAlsForce  (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x06);}
alt_u8 Si114xPsAlsForce(HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x07);}
alt_u8 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}

static alt_u8 _sendCmd(HANDLE si114x_handle, alt_u8 command)
{
   20b88:	defffa04 	addi	sp,sp,-24
   20b8c:	dcc00315 	stw	r19,12(sp)
   20b90:	2827883a 	mov	r19,r5
	alt_u8  response;
    alt_u8  retval;
    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
   20b94:	01400804 	movi	r5,32
alt_u8 Si114xAlsForce  (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x06);}
alt_u8 Si114xPsAlsForce(HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x07);}
alt_u8 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}

static alt_u8 _sendCmd(HANDLE si114x_handle, alt_u8 command)
{
   20b98:	dd000415 	stw	r20,16(sp)
   20b9c:	dc800215 	stw	r18,8(sp)
   20ba0:	dc400115 	stw	r17,4(sp)
   20ba4:	dc000015 	stw	r16,0(sp)
   20ba8:	dfc00515 	stw	ra,20(sp)
   20bac:	2023883a 	mov	r17,r4
	alt_u8  response;
    alt_u8  retval;
    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
   20bb0:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20bb4:	1021883a 	mov	r16,r2
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
   20bb8:	05000044 	movi	r20,1
    // Double-check the response register is consistent
    while(1)
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP
   20bbc:	9c803fcc 	andi	r18,r19,255
	alt_u8 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
   20bc0:	8809883a 	mov	r4,r17
   20bc4:	01400c04 	movi	r5,48
   20bc8:	0020b500 	call	20b50 <Si114xReadFromRegister>
        if (retval == 1) break;
   20bcc:	10803fcc 	andi	r2,r2,255
   20bd0:	153ffb1e 	bne	r2,r20,20bc0 <__alt_data_end+0xfffe0ff0>
    // Double-check the response register is consistent
    while(1)
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP
   20bd4:	9000081e 	bne	r18,zero,20bf8 <_sendCmd+0x70>
        else if(retval<0) return retval;
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
   20bd8:	8809883a 	mov	r4,r17
   20bdc:	01400604 	movi	r5,24
   20be0:	980d883a 	mov	r6,r19
   20be4:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
   20be8:	10c03fcc 	andi	r3,r2,255
   20bec:	1800111e 	bne	r3,zero,20c34 <_sendCmd+0xac>
    while(1)
    {
        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
        if (retval != response) break;
   20bf0:	84003fcc 	andi	r16,r16,255
   20bf4:	00000d06 	br	20c2c <_sendCmd+0xa4>
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   20bf8:	8809883a 	mov	r4,r17
   20bfc:	01400804 	movi	r5,32
   20c00:	0020b500 	call	20b50 <Si114xReadFromRegister>
        if(retval==response) break;
   20c04:	11003fcc 	andi	r4,r2,255
   20c08:	80c03fcc 	andi	r3,r16,255
   20c0c:	20fff226 	beq	r4,r3,20bd8 <__alt_data_end+0xfffe1008>
   20c10:	1021883a 	mov	r16,r2
   20c14:	003fea06 	br	20bc0 <__alt_data_end+0xfffe0ff0>
    // Expect a change in the response register
    while(1)
    {
        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   20c18:	8809883a 	mov	r4,r17
   20c1c:	01400804 	movi	r5,32
   20c20:	0020b500 	call	20b50 <Si114xReadFromRegister>
        if (retval != response) break;
   20c24:	10803fcc 	andi	r2,r2,255
   20c28:	1400011e 	bne	r2,r16,20c30 <_sendCmd+0xa8>
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
        return retval;
    // Expect a change in the response register
    while(1)
    {
        if(command==0) break; // Skip if the command is NOP
   20c2c:	903ffa1e 	bne	r18,zero,20c18 <__alt_data_end+0xfffe1048>

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
        if (retval != response) break;
        else if(retval<0) return retval;
    }
    return 0;
   20c30:	0005883a 	mov	r2,zero
}
   20c34:	dfc00517 	ldw	ra,20(sp)
   20c38:	dd000417 	ldw	r20,16(sp)
   20c3c:	dcc00317 	ldw	r19,12(sp)
   20c40:	dc800217 	ldw	r18,8(sp)
   20c44:	dc400117 	ldw	r17,4(sp)
   20c48:	dc000017 	ldw	r16,0(sp)
   20c4c:	dec00604 	addi	sp,sp,24
   20c50:	f800283a 	ret

00020c54 <Si114xParamSet>:

//-----------------------------------------------------------------------------
// Si114xParamSet writes to the PARAM_WR and CMD register
//
alt_u8 Si114xParamSet(HANDLE si114x_handle, alt_u8 address, alt_u8 data)
{
   20c54:	defffa04 	addi	sp,sp,-24
   20c58:	dd000415 	stw	r20,16(sp)
   20c5c:	dcc00315 	stw	r19,12(sp)
   20c60:	dc800215 	stw	r18,8(sp)
   20c64:	dc400115 	stw	r17,4(sp)
   20c68:	dc000015 	stw	r16,0(sp)
   20c6c:	dfc00515 	stw	ra,20(sp)
   20c70:	2021883a 	mov	r16,r4
   20c74:	2827883a 	mov	r19,r5
   20c78:	3025883a 	mov	r18,r6
   20c7c:	3023883a 	mov	r17,r6
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
   20c80:	05000044 	movi	r20,1
	alt_u8 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
   20c84:	8009883a 	mov	r4,r16
   20c88:	01400c04 	movi	r5,48
   20c8c:	0020b500 	call	20b50 <Si114xReadFromRegister>
        if (retval == 1) break;
   20c90:	10803fcc 	andi	r2,r2,255
   20c94:	153ffb1e 	bne	r2,r20,20c84 <__alt_data_end+0xfffe10b4>
alt_u8 Si114xParamSet(HANDLE si114x_handle, alt_u8 address, alt_u8 data)
{
	alt_u8     retval;
	alt_u8 Temp = address | 0xa0;
    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;
    Si114xWriteToRegister(si114x_handle,REG_PARAM_WR,data);
   20c98:	8009883a 	mov	r4,r16
   20c9c:	014005c4 	movi	r5,23
   20ca0:	91803fcc 	andi	r6,r18,255
   20ca4:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
// Si114xParamSet writes to the PARAM_WR and CMD register
//
alt_u8 Si114xParamSet(HANDLE si114x_handle, alt_u8 address, alt_u8 data)
{
	alt_u8     retval;
	alt_u8 Temp = address | 0xa0;
   20ca8:	00bfe804 	movi	r2,-96
   20cac:	988cb03a 	or	r6,r19,r2
    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;
    Si114xWriteToRegister(si114x_handle,REG_PARAM_WR,data);
    Si114xWriteToRegister(si114x_handle,REG_COMMAND,Temp);
   20cb0:	8009883a 	mov	r4,r16
   20cb4:	01400604 	movi	r5,24
   20cb8:	31803fcc 	andi	r6,r6,255
   20cbc:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    while(1)
    {
        retval=Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
        if (retval==data) break;
   20cc0:	8c403fcc 	andi	r17,r17,255
    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;
    Si114xWriteToRegister(si114x_handle,REG_PARAM_WR,data);
    Si114xWriteToRegister(si114x_handle,REG_COMMAND,Temp);
    while(1)
    {
        retval=Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
   20cc4:	8009883a 	mov	r4,r16
   20cc8:	01400b84 	movi	r5,46
   20ccc:	0020b500 	call	20b50 <Si114xReadFromRegister>
        if (retval==data) break;
   20cd0:	10803fcc 	andi	r2,r2,255
   20cd4:	147ffb1e 	bne	r2,r17,20cc4 <__alt_data_end+0xfffe10f4>
    }
    return 0;
}
   20cd8:	0005883a 	mov	r2,zero
   20cdc:	dfc00517 	ldw	ra,20(sp)
   20ce0:	dd000417 	ldw	r20,16(sp)
   20ce4:	dcc00317 	ldw	r19,12(sp)
   20ce8:	dc800217 	ldw	r18,8(sp)
   20cec:	dc400117 	ldw	r17,4(sp)
   20cf0:	dc000017 	ldw	r16,0(sp)
   20cf4:	dec00604 	addi	sp,sp,24
   20cf8:	f800283a 	ret

00020cfc <Si114xNop>:
    }
    return 0;
}


alt_u8 Si114xNop       (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x00);}
   20cfc:	000b883a 	mov	r5,zero
   20d00:	0020b881 	jmpi	20b88 <_sendCmd>

00020d04 <Si114xPauseAll>:

    return retval;
}

alt_u8 Si114xPauseAll(HANDLE si114x_handle)
{
   20d04:	defffd04 	addi	sp,sp,-12
   20d08:	dc400115 	stw	r17,4(sp)
   20d0c:	dc000015 	stw	r16,0(sp)
   20d10:	dfc00215 	stw	ra,8(sp)
   20d14:	2021883a 	mov	r16,r4
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
   20d18:	04400044 	movi	r17,1
    while (1)
    {
        // Keep sending nops until the response is zero
        while (1)
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
   20d1c:	8009883a 	mov	r4,r16
   20d20:	01400804 	movi	r5,32
   20d24:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20d28:	10803fcc 	andi	r2,r2,255
}
//-----------------------------------------------------------------------------
// use this to pause measurements
static alt_u8 _PsAlsPause (HANDLE si114x_handle)
{
    return _sendCmd(si114x_handle,0x0B);
   20d2c:	8009883a 	mov	r4,r16
    while (1)
    {
        // Keep sending nops until the response is zero
        while (1)
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
   20d30:	10000226 	beq	r2,zero,20d3c <Si114xPauseAll+0x38>
                break;
            else
                Si114xNop(si114x_handle);
   20d34:	0020cfc0 	call	20cfc <Si114xNop>
        }
   20d38:	003ff806 	br	20d1c <__alt_data_end+0xfffe114c>
}
//-----------------------------------------------------------------------------
// use this to pause measurements
static alt_u8 _PsAlsPause (HANDLE si114x_handle)
{
    return _sendCmd(si114x_handle,0x0B);
   20d3c:	014002c4 	movi	r5,11
   20d40:	0020b880 	call	20b88 <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1)
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
   20d44:	8009883a 	mov	r4,r16
   20d48:	01400804 	movi	r5,32
   20d4c:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20d50:	10803fcc 	andi	r2,r2,255
   20d54:	103ffb26 	beq	r2,zero,20d44 <__alt_data_end+0xfffe1174>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
   20d58:	8009883a 	mov	r4,r16
   20d5c:	01400804 	movi	r5,32
   20d60:	0020b500 	call	20b50 <Si114xReadFromRegister>
   20d64:	10803fcc 	andi	r2,r2,255
   20d68:	147fec1e 	bne	r2,r17,20d1c <__alt_data_end+0xfffe114c>
            break;  // otherwise, start over.
    }
    return 0;
}
   20d6c:	0005883a 	mov	r2,zero
   20d70:	dfc00217 	ldw	ra,8(sp)
   20d74:	dc400117 	ldw	r17,4(sp)
   20d78:	dc000017 	ldw	r16,0(sp)
   20d7c:	dec00304 	addi	sp,sp,12
   20d80:	f800283a 	ret

00020d84 <Si114xReset>:
//-----------------------------------------------------------------------------
// The following functions writes to the CMD register and can therefore
// wake up the internal MCU

alt_u8 Si114xReset(HANDLE si114x_handle)
{
   20d84:	defffc04 	addi	sp,sp,-16
   20d88:	dc800215 	stw	r18,8(sp)
    alt_u8 retval = 0;

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20d8c:	04800204 	movi	r18,8
   20d90:	900b883a 	mov	r5,r18
   20d94:	000d883a 	mov	r6,zero
//-----------------------------------------------------------------------------
// The following functions writes to the CMD register and can therefore
// wake up the internal MCU

alt_u8 Si114xReset(HANDLE si114x_handle)
{
   20d98:	dfc00315 	stw	ra,12(sp)
   20d9c:	dc400115 	stw	r17,4(sp)
   20da0:	dc000015 	stw	r16,0(sp)
   20da4:	2023883a 	mov	r17,r4
    alt_u8 retval = 0;

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20da8:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
   20dac:	8809883a 	mov	r4,r17
   20db0:	01400244 	movi	r5,9
   20db4:	000d883a 	mov	r6,zero

alt_u8 Si114xReset(HANDLE si114x_handle)
{
    alt_u8 retval = 0;

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20db8:	1021883a 	mov	r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
   20dbc:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xPauseAll(si114x_handle);
   20dc0:	8809883a 	mov	r4,r17
alt_u8 Si114xReset(HANDLE si114x_handle)
{
    alt_u8 retval = 0;

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
   20dc4:	1421883a 	add	r16,r2,r16
    retval+=Si114xPauseAll(si114x_handle);
   20dc8:	0020d040 	call	20d04 <Si114xPauseAll>
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20dcc:	8809883a 	mov	r4,r17
   20dd0:	900b883a 	mov	r5,r18
   20dd4:	000d883a 	mov	r6,zero
{
    alt_u8 retval = 0;

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
    retval+=Si114xPauseAll(si114x_handle);
   20dd8:	80a1883a 	add	r16,r16,r2
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20ddc:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   20de0:	8809883a 	mov	r4,r17
   20de4:	01400104 	movi	r5,4
   20de8:	000d883a 	mov	r6,zero
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
    retval+=Si114xPauseAll(si114x_handle);
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   20dec:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   20df0:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   20df4:	8809883a 	mov	r4,r17
   20df8:	01400144 	movi	r5,5
   20dfc:	000d883a 	mov	r6,zero
    retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE, 0x0);
    retval+=Si114xPauseAll(si114x_handle);
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   20e00:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   20e04:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   20e08:	8809883a 	mov	r4,r17
   20e0c:	01400184 	movi	r5,6
   20e10:	000d883a 	mov	r6,zero
    retval+=Si114xPauseAll(si114x_handle);
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   20e14:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   20e18:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   20e1c:	8809883a 	mov	r4,r17
   20e20:	014000c4 	movi	r5,3
   20e24:	000d883a 	mov	r6,zero
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   20e28:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   20e2c:	0020b1c0 	call	20b1c <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   20e30:	8809883a 	mov	r4,r17
   20e34:	01400844 	movi	r5,33
   20e38:	01803fc4 	movi	r6,255
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   20e3c:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   20e40:	0020b1c0 	call	20b1c <Si114xWriteToRegister>

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
   20e44:	8809883a 	mov	r4,r17
   20e48:	01400604 	movi	r5,24
   20e4c:	01800044 	movi	r6,1
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   20e50:	80a1883a 	add	r16,r16,r2

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
   20e54:	0020b1c0 	call	20b1c <Si114xWriteToRegister>

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence.
    usleep(10000);
   20e58:	0109c404 	movi	r4,10000
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
   20e5c:	80a1883a 	add	r16,r16,r2

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence.
    usleep(10000);
   20e60:	003198c0 	call	3198c <usleep>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
   20e64:	8809883a 	mov	r4,r17
   20e68:	014001c4 	movi	r5,7
   20e6c:	018005c4 	movi	r6,23
   20e70:	0020b1c0 	call	20b1c <Si114xWriteToRegister>

    return retval;
}
   20e74:	8085883a 	add	r2,r16,r2
   20e78:	dfc00317 	ldw	ra,12(sp)
   20e7c:	dc800217 	ldw	r18,8(sp)
   20e80:	dc400117 	ldw	r17,4(sp)
   20e84:	dc000017 	ldw	r16,0(sp)
   20e88:	dec00404 	addi	sp,sp,16
   20e8c:	f800283a 	ret

00020e90 <Si114xPsForce>:
    return 0;
}


alt_u8 Si114xNop       (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x00);}
alt_u8 Si114xPsForce   (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x05);}
   20e90:	01400144 	movi	r5,5
   20e94:	0020b881 	jmpi	20b88 <_sendCmd>

00020e98 <Si114xAlsForce>:
alt_u8 Si114xAlsForce  (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x06);}
   20e98:	01400184 	movi	r5,6
   20e9c:	0020b881 	jmpi	20b88 <_sendCmd>

00020ea0 <Si114xPsAlsForce>:
alt_u8 Si114xPsAlsForce(HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x07);}
   20ea0:	014001c4 	movi	r5,7
   20ea4:	0020b881 	jmpi	20b88 <_sendCmd>

00020ea8 <Si114xPsAlsAuto>:
alt_u8 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}
   20ea8:	014003c4 	movi	r5,15
   20eac:	0020b881 	jmpi	20b88 <_sendCmd>

00020eb0 <Write32_Data>:
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   20eb0:	294b883a 	add	r5,r5,r5
   20eb4:	294b883a 	add	r5,r5,r5
   20eb8:	2909883a 	add	r4,r5,r4
   20ebc:	21800035 	stwio	r6,0(r4)
    bPass=TRUE;
    return bPass;
}
   20ec0:	00800044 	movi	r2,1
   20ec4:	f800283a 	ret

00020ec8 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   20ec8:	294b883a 	add	r5,r5,r5
   20ecc:	294b883a 	add	r5,r5,r5
   20ed0:	2909883a 	add	r4,r5,r4
   20ed4:	20800037 	ldwio	r2,0(r4)
   20ed8:	30800015 	stw	r2,0(r6)
	bPass=TRUE;
    return bPass;
}
   20edc:	00800044 	movi	r2,1
   20ee0:	f800283a 	ret

00020ee4 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base)
{
   20ee4:	defffe04 	addi	sp,sp,-8
   20ee8:	dfc00115 	stw	ra,4(sp)
   20eec:	dc000015 	stw	r16,0(sp)
	alt_u32 read_data;
    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	//add
	IOWR(i2c_base,2,0);
   20ef0:	20800204 	addi	r2,r4,8
   20ef4:	10000035 	stwio	zero,0(r2)
	IOWR(i2c_base,4,0x1);
   20ef8:	04000044 	movi	r16,1
   20efc:	24000435 	stwio	r16,16(r4)
	//add
   IOWR(i2c_base, 0,0x18);//write low prescale
   20f00:	01c00604 	movi	r7,24
   20f04:	21c00035 	stwio	r7,0(r4)
   IOWR(i2c_base, 1,0x00);//write hi prescale
   20f08:	21800104 	addi	r6,r4,4
   20f0c:	30000035 	stwio	zero,0(r6)
   //add



   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2,0x80);
   20f10:	01402004 	movi	r5,128
   20f14:	11400035 	stwio	r5,0(r2)

    read_data =IORD(i2c_base, 0);
   20f18:	20c00037 	ldwio	r3,0(r4)
    if( (read_data & 0x00ff) != 0x18)
   20f1c:	18c03fcc 	andi	r3,r3,255
   20f20:	19c00226 	beq	r3,r7,20f2c <oc_i2c_init+0x48>
    {
    	bSuccess = FALSE;
       	read_data =IORD(i2c_base, 1);
   20f24:	30800037 	ldwio	r2,0(r6)
   20f28:	00000806 	br	20f4c <oc_i2c_init+0x68>
		if((read_data & 0x00ff) != 0x00){
			bSuccess = FALSE;
		}
    }
    else if (bSuccess){
    	read_data =IORD(i2c_base, 2);
   20f2c:	10800037 	ldwio	r2,0(r2)
        if( (read_data & 0x00ff) != 0x80 ){
   20f30:	10803fcc 	andi	r2,r2,255
   20f34:	1140051e 	bne	r2,r5,20f4c <oc_i2c_init+0x68>
            bSuccess = FALSE;
        }
    }

   if (bSuccess)
       printf("\nI2C core is enabled! \r\n");
   20f38:	010000f4 	movhi	r4,3
   20f3c:	210ddf04 	addi	r4,r4,14204
   20f40:	00216d00 	call	216d0 <puts>
    return bPass;
}

bool oc_i2c_init(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
   20f44:	8005883a 	mov	r2,r16
   20f48:	00000406 	br	20f5c <oc_i2c_init+0x78>
    }

   if (bSuccess)
       printf("\nI2C core is enabled! \r\n");
   else
       printf("\nI2C core is not enabled! \r\n");
   20f4c:	010000f4 	movhi	r4,3
   20f50:	210de504 	addi	r4,r4,14228
   20f54:	00216d00 	call	216d0 <puts>
   20f58:	0005883a 	mov	r2,zero

   return bSuccess;

}
   20f5c:	dfc00117 	ldw	ra,4(sp)
   20f60:	dc000017 	ldw	r16,0(sp)
   20f64:	dec00204 	addi	sp,sp,8
   20f68:	f800283a 	ret

00020f6c <ACK_single_check>:

bool  ACK_single_check(alt_32 i2c_base)
{
   20f6c:	defffe04 	addi	sp,sp,-8
   20f70:	dc000015 	stw	r16,0(sp)
   20f74:	2021883a 	mov	r16,r4
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(SLEEP_TIME);
   20f78:	010003c4 	movi	r4,15
   return bSuccess;

}

bool  ACK_single_check(alt_32 i2c_base)
{
   20f7c:	dfc00115 	stw	ra,4(sp)
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(SLEEP_TIME);
    read_data =IORD(i2c_base, 4);
   20f80:	84000404 	addi	r16,r16,16
bool  ACK_single_check(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(SLEEP_TIME);
   20f84:	003198c0 	call	3198c <usleep>
    read_data =IORD(i2c_base, 4);
   20f88:	80800037 	ldwio	r2,0(r16)
    if(read_data & 0x02)
   20f8c:	1080008c 	andi	r2,r2,2
   20f90:	10000226 	beq	r2,zero,20f9c <ACK_single_check+0x30>
   20f94:	0005883a 	mov	r2,zero
   20f98:	00000506 	br	20fb0 <ACK_single_check+0x44>
            bSuccess = FALSE;
     if (bSuccess){
            usleep(SLEEP_TIME);
   20f9c:	010003c4 	movi	r4,15
   20fa0:	003198c0 	call	3198c <usleep>
            read_data =IORD(i2c_base, 4);
   20fa4:	80800037 	ldwio	r2,0(r16)
                if(read_data & 0x80)
   20fa8:	1080200c 	andi	r2,r2,128
   20fac:	1005003a 	cmpeq	r2,r2,zero
                    bSuccess = FALSE;
     }
    return bSuccess;
}
   20fb0:	dfc00117 	ldw	ra,4(sp)
   20fb4:	dc000017 	ldw	r16,0(sp)
   20fb8:	dec00204 	addi	sp,sp,8
   20fbc:	f800283a 	ret

00020fc0 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   20fc0:	defffd04 	addi	sp,sp,-12
   20fc4:	dc400115 	stw	r17,4(sp)
   20fc8:	dc000015 	stw	r16,0(sp)
   20fcc:	dfc00215 	stw	ra,8(sp)
   20fd0:	2023883a 	mov	r17,r4
   20fd4:	040002c4 	movi	r16,11
   20fd8:	843fffc4 	addi	r16,r16,-1
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   20fdc:	80000426 	beq	r16,zero,20ff0 <ACK_check+0x30>
        bSuccess = ACK_single_check(i2c_base);
   20fe0:	8809883a 	mov	r4,r17
   20fe4:	0020f6c0 	call	20f6c <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   20fe8:	103ffb26 	beq	r2,zero,20fd8 <__alt_data_end+0xfffe1408>
   20fec:	00000106 	br	20ff4 <ACK_check+0x34>
   20ff0:	0005883a 	mov	r2,zero
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
}
   20ff4:	dfc00217 	ldw	ra,8(sp)
   20ff8:	dc400117 	ldw	r17,4(sp)
   20ffc:	dc000017 	ldw	r16,0(sp)
   21000:	dec00304 	addi	sp,sp,12
   21004:	f800283a 	ret

00021008 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 pData)
{
   21008:	defffa04 	addi	sp,sp,-24
   2100c:	dd000415 	stw	r20,16(sp)
   21010:	dcc00315 	stw	r19,12(sp)
   21014:	dc800215 	stw	r18,8(sp)
   21018:	dc400115 	stw	r17,4(sp)
   2101c:	dfc00515 	stw	ra,20(sp)
   21020:	dc000015 	stw	r16,0(sp)
   21024:	2023883a 	mov	r17,r4
   21028:	3029883a 	mov	r20,r6
   2102c:	3827883a 	mov	r19,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21030:	24800304 	addi	r18,r4,12

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 pData)
{
    //DWORD reg_data = 0x0;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   21034:	29403fcc 	andi	r5,r5,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21038:	91400035 	stwio	r5,0(r18)
   2103c:	24000404 	addi	r16,r4,16
   21040:	00802404 	movi	r2,144
   21044:	80800035 	stwio	r2,0(r16)
       printf("OC_I2C_Write error[1]\r\n");
       return TRUE;
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   21048:	0020fc00 	call	20fc0 <ACK_check>
   2104c:	1000031e 	bne	r2,zero,2105c <OC_I2C_Write+0x54>
        printf("OC_I2C_Write error[2]\r\n");
   21050:	010000f4 	movhi	r4,3
   21054:	210dec04 	addi	r4,r4,14256
   21058:	00001206 	br	210a4 <OC_I2C_Write+0x9c>
        return TRUE;
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   2105c:	a5003fcc 	andi	r20,r20,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21060:	95000035 	stwio	r20,0(r18)
   21064:	05000404 	movi	r20,16
   21068:	85000035 	stwio	r20,0(r16)
        printf("OC_I2C_Write error[4]\r\n");
        return TRUE;
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2106c:	8809883a 	mov	r4,r17
   21070:	0020fc00 	call	20fc0 <ACK_check>
   21074:	1000031e 	bne	r2,zero,21084 <OC_I2C_Write+0x7c>
        printf("OC_I2C_Write error[5]\r\n");
   21078:	010000f4 	movhi	r4,3
   2107c:	210df204 	addi	r4,r4,14280
   21080:	00000806 	br	210a4 <OC_I2C_Write+0x9c>
 //  printf("\n receive ACK-reg address! \n");

#if 1

    //set the txr reg data with the data
      if (!Write32_Data( i2c_base, 3,pData)){
   21084:	9cc03fcc 	andi	r19,r19,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21088:	94c00035 	stwio	r19,0(r18)
   2108c:	85000035 	stwio	r20,0(r16)
         printf("OC_I2C_Write error[7]\r\n");
          return TRUE;
     }

     //wait TIP bit go to 0 to end Tx
      if(!ACK_check( i2c_base)){
   21090:	8809883a 	mov	r4,r17
   21094:	0020fc00 	call	20fc0 <ACK_check>
   21098:	1000051e 	bne	r2,zero,210b0 <OC_I2C_Write+0xa8>
          printf("OC_I2C_Write error[8]\r\n");
   2109c:	010000f4 	movhi	r4,3
   210a0:	210df804 	addi	r4,r4,14304
   210a4:	00216d00 	call	216d0 <puts>
          return TRUE;
   210a8:	00800044 	movi	r2,1
   210ac:	00000506 	br	210c4 <OC_I2C_Write+0xbc>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   210b0:	00801004 	movi	r2,64
   210b4:	80800035 	stwio	r2,0(r16)
         printf("OC_I2C_Write error[9]\r\n");
         return TRUE;
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   210b8:	010003c4 	movi	r4,15
   210bc:	003198c0 	call	3198c <usleep>

  // printf("\n receive ACK-data! \n");

     return FALSE;
   210c0:	0005883a 	mov	r2,zero

}
   210c4:	dfc00517 	ldw	ra,20(sp)
   210c8:	dd000417 	ldw	r20,16(sp)
   210cc:	dcc00317 	ldw	r19,12(sp)
   210d0:	dc800217 	ldw	r18,8(sp)
   210d4:	dc400117 	ldw	r17,4(sp)
   210d8:	dc000017 	ldw	r16,0(sp)
   210dc:	dec00604 	addi	sp,sp,24
   210e0:	f800283a 	ret

000210e4 <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base)
{
   210e4:	defffe04 	addi	sp,sp,-8
   210e8:	dc000015 	stw	r16,0(sp)
   210ec:	2021883a 	mov	r16,r4
	bool bSuccess;
    alt_32 this_data;
    usleep(SLEEP_TIME);
   210f0:	010003c4 	movi	r4,15
     return FALSE;

}

bool ACK_judge_for_read(alt_32 i2c_base)
{
   210f4:	dfc00115 	stw	ra,4(sp)
	bool bSuccess;
    alt_32 this_data;
    usleep(SLEEP_TIME);
   210f8:	003198c0 	call	3198c <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   210fc:	80800437 	ldwio	r2,16(r16)
	bool bSuccess;
    alt_32 this_data;
    usleep(SLEEP_TIME);
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
   21100:	1080008c 	andi	r2,r2,2
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;

}
   21104:	1005003a 	cmpeq	r2,r2,zero
   21108:	dfc00117 	ldw	ra,4(sp)
   2110c:	dc000017 	ldw	r16,0(sp)
   21110:	dec00204 	addi	sp,sp,8
   21114:	f800283a 	ret

00021118 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   21118:	defff604 	addi	sp,sp,-40
   2111c:	dd400515 	stw	r21,20(sp)
   21120:	dd400a17 	ldw	r21,40(sp)
   21124:	df000815 	stw	fp,32(sp)
   21128:	dd800615 	stw	r22,24(sp)
   2112c:	dd000415 	stw	r20,16(sp)
   21130:	dcc00315 	stw	r19,12(sp)
   21134:	dc400115 	stw	r17,4(sp)
   21138:	dfc00915 	stw	ra,36(sp)
   2113c:	ddc00715 	stw	r23,28(sp)
   21140:	dc800215 	stw	r18,8(sp)
   21144:	dc000015 	stw	r16,0(sp)
   21148:	2027883a 	mov	r19,r4
   2114c:	2823883a 	mov	r17,r5
   21150:	3039883a 	mov	fp,r6
   21154:	382d883a 	mov	r22,r7
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   21158:	25000304 	addi	r20,r4,12
   2115c:	28803fcc 	andi	r2,r5,255
   21160:	a0800035 	stwio	r2,0(r20)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   21164:	24800404 	addi	r18,r4,16
   21168:	05c02404 	movi	r23,144
   2116c:	95c00035 	stwio	r23,0(r18)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   21170:	0020fc00 	call	20fc0 <ACK_check>
   21174:	1021883a 	mov	r16,r2
   21178:	1000031e 	bne	r2,zero,21188 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
   2117c:	010000f4 	movhi	r4,3
   21180:	210dfe04 	addi	r4,r4,14328
   21184:	00000a06 	br	211b0 <OC_I2C_Read+0x98>
       return FALSE;
   }
   IOWR(i2c_base, 3,sub_address);
   21188:	e7003fcc 	andi	fp,fp,255
   2118c:	a7000035 	stwio	fp,0(r20)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   21190:	00800404 	movi	r2,16
   21194:	90800035 	stwio	r2,0(r18)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   21198:	9809883a 	mov	r4,r19
   2119c:	0020fc00 	call	20fc0 <ACK_check>
   211a0:	1021883a 	mov	r16,r2
   211a4:	1000041e 	bne	r2,zero,211b8 <OC_I2C_Read+0xa0>
        printf("OC_I2C_Read error[5]\r\n");
   211a8:	010000f4 	movhi	r4,3
   211ac:	210e0404 	addi	r4,r4,14352
   211b0:	00216d00 	call	216d0 <puts>
        return FALSE;
   211b4:	00002406 	br	21248 <OC_I2C_Read+0x130>
    }
   //read
    //set the tx reg audio chip dev address with read bit 1
    IOWR(i2c_base, 3,device_address|0x01);
   211b8:	8c400054 	ori	r17,r17,1
   211bc:	8c403fcc 	andi	r17,r17,255
   211c0:	a4400035 	stwio	r17,0(r20)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   211c4:	95c00035 	stwio	r23,0(r18)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   211c8:	9809883a 	mov	r4,r19
   211cc:	0020fc00 	call	20fc0 <ACK_check>
   211d0:	1021883a 	mov	r16,r2
   211d4:	1000031e 	bne	r2,zero,211e4 <OC_I2C_Read+0xcc>
        printf("OC_I2C_Read error[8]\r\n");
   211d8:	010000f4 	movhi	r4,3
   211dc:	210e0a04 	addi	r4,r4,14376
   211e0:	003ff306 	br	211b0 <__alt_data_end+0xfffe15e0>
   211e4:	0023883a 	mov	r17,zero
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   211e8:	8d40120e 	bge	r17,r21,21234 <OC_I2C_Read+0x11c>
   211ec:	8dc00044 	addi	r23,r17,1
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   211f0:	bd40021e 	bne	r23,r21,211fc <OC_I2C_Read+0xe4>
   211f4:	00800a04 	movi	r2,40
   211f8:	00000106 	br	21200 <OC_I2C_Read+0xe8>
   211fc:	00800804 	movi	r2,32
   21200:	90800035 	stwio	r2,0(r18)
    //	usleep(100);
        if (!ACK_judge_for_read( i2c_base)){
   21204:	9809883a 	mov	r4,r19
   21208:	00210e40 	call	210e4 <ACK_judge_for_read>
   2120c:	1021883a 	mov	r16,r2
   21210:	1000031e 	bne	r2,zero,21220 <OC_I2C_Read+0x108>
            printf("OC_I2C_Read error[10]\r\n");
   21214:	010000f4 	movhi	r4,3
   21218:	210e1004 	addi	r4,r4,14400
   2121c:	003fe406 	br	211b0 <__alt_data_end+0xfffe15e0>
            return FALSE;
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   21220:	a0800037 	ldwio	r2,0(r20)
   21224:	b463883a 	add	r17,r22,r17
        *(pData8+i) =  Data32 & 0xff;
   21228:	88800005 	stb	r2,0(r17)
   2122c:	b823883a 	mov	r17,r23
   21230:	003fed06 	br	211e8 <__alt_data_end+0xfffe1618>
    }

    IOWR( i2c_base, 4,0x40);
   21234:	00801004 	movi	r2,64
   21238:	90800035 	stwio	r2,0(r18)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   2123c:	010003c4 	movi	r4,15
   21240:	003198c0 	call	3198c <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   21244:	04000044 	movi	r16,1

}
   21248:	8005883a 	mov	r2,r16
   2124c:	dfc00917 	ldw	ra,36(sp)
   21250:	df000817 	ldw	fp,32(sp)
   21254:	ddc00717 	ldw	r23,28(sp)
   21258:	dd800617 	ldw	r22,24(sp)
   2125c:	dd400517 	ldw	r21,20(sp)
   21260:	dd000417 	ldw	r20,16(sp)
   21264:	dcc00317 	ldw	r19,12(sp)
   21268:	dc800217 	ldw	r18,8(sp)
   2126c:	dc400117 	ldw	r17,4(sp)
   21270:	dc000017 	ldw	r16,0(sp)
   21274:	dec00a04 	addi	sp,sp,40
   21278:	f800283a 	ret

0002127c <OC_I2CL_Write>:
//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,int sub_address,alt_u8 *pData, int nWriteLength)
    {
   2127c:	defff804 	addi	sp,sp,-32
   21280:	dd800615 	stw	r22,24(sp)
   21284:	dd800817 	ldw	r22,32(sp)
   21288:	dd400515 	stw	r21,20(sp)
   2128c:	dd000415 	stw	r20,16(sp)
   21290:	dcc00315 	stw	r19,12(sp)
   21294:	dc400115 	stw	r17,4(sp)
   21298:	dfc00715 	stw	ra,28(sp)
   2129c:	dc800215 	stw	r18,8(sp)
   212a0:	dc000015 	stw	r16,0(sp)
   212a4:	2023883a 	mov	r17,r4
   212a8:	3027883a 	mov	r19,r6
   212ac:	382b883a 	mov	r21,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   212b0:	25000304 	addi	r20,r4,12
    AddrLow  = sub_address & 0xFF;

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   212b4:	29403fcc 	andi	r5,r5,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   212b8:	a1400035 	stwio	r5,0(r20)
   212bc:	24000404 	addi	r16,r4,16
   212c0:	00802404 	movi	r2,144
   212c4:	80800035 	stwio	r2,0(r16)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   212c8:	0020fc00 	call	20fc0 <ACK_check>
   212cc:	1000021e 	bne	r2,zero,212d8 <OC_I2CL_Write+0x5c>
        return FALSE;
   212d0:	0005883a 	mov	r2,zero
   212d4:	00001e06 	br	21350 <OC_I2CL_Write+0xd4>
    {
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   212d8:	9805d23a 	srai	r2,r19,8
    if(!ACK_check( i2c_base))
        return FALSE;
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrHigh))
   212dc:	10803fcc 	andi	r2,r2,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   212e0:	a0800035 	stwio	r2,0(r20)
   212e4:	04800404 	movi	r18,16
   212e8:	84800035 	stwio	r18,0(r16)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   212ec:	8809883a 	mov	r4,r17
   212f0:	0020fc00 	call	20fc0 <ACK_check>
   212f4:	103ff626 	beq	r2,zero,212d0 <__alt_data_end+0xfffe1700>
        return FALSE;
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))
   212f8:	9cc03fcc 	andi	r19,r19,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   212fc:	a4c00035 	stwio	r19,0(r20)
   21300:	84800035 	stwio	r18,0(r16)

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   21304:	8809883a 	mov	r4,r17
   21308:	0020fc00 	call	20fc0 <ACK_check>
   2130c:	103ff026 	beq	r2,zero,212d0 <__alt_data_end+0xfffe1700>
   21310:	a827883a 	mov	r19,r21
   21314:	9d45c83a 	sub	r2,r19,r21
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=0;i<nWriteLength;i++){
   21318:	1580080e 	bge	r2,r22,2133c <OC_I2CL_Write+0xc0>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   2131c:	98800003 	ldbu	r2,0(r19)
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21320:	a0800035 	stwio	r2,0(r20)
   21324:	84800035 	stwio	r18,0(r16)
       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
            return FALSE;

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
   21328:	8809883a 	mov	r4,r17
   2132c:	0020fc00 	call	20fc0 <ACK_check>
   21330:	9cc00044 	addi	r19,r19,1
   21334:	103ff71e 	bne	r2,zero,21314 <__alt_data_end+0xfffe1744>
   21338:	003fe506 	br	212d0 <__alt_data_end+0xfffe1700>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   2133c:	00801004 	movi	r2,64
   21340:	80800035 	stwio	r2,0(r16)
#endif
    if (!Write32_Data( i2c_base, 4,0x40))
         return FALSE;

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   21344:	010003c4 	movi	r4,15
   21348:	003198c0 	call	3198c <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   2134c:	00800044 	movi	r2,1
}
   21350:	dfc00717 	ldw	ra,28(sp)
   21354:	dd800617 	ldw	r22,24(sp)
   21358:	dd400517 	ldw	r21,20(sp)
   2135c:	dd000417 	ldw	r20,16(sp)
   21360:	dcc00317 	ldw	r19,12(sp)
   21364:	dc800217 	ldw	r18,8(sp)
   21368:	dc400117 	ldw	r17,4(sp)
   2136c:	dc000017 	ldw	r16,0(sp)
   21370:	dec00804 	addi	sp,sp,32
   21374:	f800283a 	ret

00021378 <OC_I2CL_Read>:


bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address,int sub_address, alt_u8 *pData8){
   21378:	defff704 	addi	sp,sp,-36
   2137c:	dd800615 	stw	r22,24(sp)
   21380:	dd000415 	stw	r20,16(sp)
   21384:	dcc00315 	stw	r19,12(sp)
   21388:	dc800215 	stw	r18,8(sp)
   2138c:	dc400115 	stw	r17,4(sp)
   21390:	dfc00815 	stw	ra,32(sp)
   21394:	ddc00715 	stw	r23,28(sp)
   21398:	dd400515 	stw	r21,20(sp)
   2139c:	dc000015 	stw	r16,0(sp)
   213a0:	2023883a 	mov	r17,r4
   213a4:	2825883a 	mov	r18,r5
   213a8:	3029883a 	mov	r20,r6
   213ac:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   213b0:	24c00304 	addi	r19,r4,12
    AddrHigh = (sub_address >> 8) & 0xFF;
    AddrLow  = sub_address & 0xFF;


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   213b4:	28803fcc 	andi	r2,r5,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   213b8:	98800035 	stwio	r2,0(r19)
   213bc:	24000404 	addi	r16,r4,16
   213c0:	05402404 	movi	r21,144
   213c4:	85400035 	stwio	r21,0(r16)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   213c8:	0020fc00 	call	20fc0 <ACK_check>
   213cc:	1000021e 	bne	r2,zero,213d8 <OC_I2CL_Read+0x60>
        return FALSE;
   213d0:	0005883a 	mov	r2,zero
   213d4:	00002106 	br	2145c <OC_I2CL_Read+0xe4>
    //DWORD reg_data = 0x0;
    alt_32 Data32;// = 0x0;

    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   213d8:	a005d23a 	srai	r2,r20,8
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   213dc:	10803fcc 	andi	r2,r2,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   213e0:	98800035 	stwio	r2,0(r19)
   213e4:	05c00404 	movi	r23,16
   213e8:	85c00035 	stwio	r23,0(r16)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   213ec:	8809883a 	mov	r4,r17
   213f0:	0020fc00 	call	20fc0 <ACK_check>
   213f4:	103ff626 	beq	r2,zero,213d0 <__alt_data_end+0xfffe1800>
        return FALSE;
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   213f8:	a5003fcc 	andi	r20,r20,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   213fc:	9d000035 	stwio	r20,0(r19)
   21400:	85c00035 	stwio	r23,0(r16)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   21404:	8809883a 	mov	r4,r17
   21408:	0020fc00 	call	20fc0 <ACK_check>
   2140c:	103ff026 	beq	r2,zero,213d0 <__alt_data_end+0xfffe1800>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   21410:	94800054 	ori	r18,r18,1
   21414:	94803fcc 	andi	r18,r18,255
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21418:	9c800035 	stwio	r18,0(r19)
   2141c:	85400035 	stwio	r21,0(r16)
   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
         return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   21420:	8809883a 	mov	r4,r17
   21424:	0020fc00 	call	20fc0 <ACK_check>
   21428:	103fe926 	beq	r2,zero,213d0 <__alt_data_end+0xfffe1800>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   2142c:	00800a04 	movi	r2,40
   21430:	80800035 	stwio	r2,0(r16)
   //set the RD and ACK bit(bit5 and bit3)
    if (!Write32_Data( i2c_base, 4,0x28))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_judge_for_read( i2c_base))
   21434:	8809883a 	mov	r4,r17
   21438:	00210e40 	call	210e4 <ACK_judge_for_read>
   2143c:	103fe426 	beq	r2,zero,213d0 <__alt_data_end+0xfffe1800>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   21440:	98800037 	ldwio	r2,0(r19)

//    printf("\n read receive ACK-device address(read)! \n");
    if (!Read32_Data ( i2c_base, 3, &Data32))
        return FALSE;

    *pData8 =  Data32 & 0xff;
   21444:	b0800005 	stb	r2,0(r22)
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
   21448:	00801004 	movi	r2,64
   2144c:	80800035 	stwio	r2,0(r16)

   if (!Write32_Data( i2c_base, 4,0x40))
       return FALSE;

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   21450:	010003c4 	movi	r4,15
   21454:	003198c0 	call	3198c <usleep>

   return TRUE;
   21458:	00800044 	movi	r2,1

}
   2145c:	dfc00817 	ldw	ra,32(sp)
   21460:	ddc00717 	ldw	r23,28(sp)
   21464:	dd800617 	ldw	r22,24(sp)
   21468:	dd400517 	ldw	r21,20(sp)
   2146c:	dd000417 	ldw	r20,16(sp)
   21470:	dcc00317 	ldw	r19,12(sp)
   21474:	dc800217 	ldw	r18,8(sp)
   21478:	dc400117 	ldw	r17,4(sp)
   2147c:	dc000017 	ldw	r16,0(sp)
   21480:	dec00904 	addi	sp,sp,36
   21484:	f800283a 	ret

00021488 <debug_output>:

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
   21488:	00215dc1 	jmpi	215dc <printf>

0002148c <myprintf>:





int myprintf(char *format, ...){
   2148c:	deff7b04 	addi	sp,sp,-532
   21490:	dfc08115 	stw	ra,516(sp)
   21494:	dc008015 	stw	r16,512(sp)
   21498:	d9408215 	stw	r5,520(sp)
   2149c:	d9808315 	stw	r6,524(sp)
   214a0:	d9c08415 	stw	r7,528(sp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
   214a4:	01408004 	movi	r5,512





int myprintf(char *format, ...){
   214a8:	200d883a 	mov	r6,r4
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
   214ac:	d9c08204 	addi	r7,sp,520
   214b0:	d809883a 	mov	r4,sp
   214b4:	00258e00 	call	258e0 <vsnprintf>

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
   214b8:	d809883a 	mov	r4,sp
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
   214bc:	1021883a 	mov	r16,r2

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
   214c0:	00215dc0 	call	215dc <printf>
    va_end(paramList);
    
    debug_output(szText);

    return rc;    
}
   214c4:	8005883a 	mov	r2,r16
   214c8:	dfc08117 	ldw	ra,516(sp)
   214cc:	dc008017 	ldw	r16,512(sp)
   214d0:	dec08504 	addi	sp,sp,532
   214d4:	f800283a 	ret

000214d8 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   214d8:	defff804 	addi	sp,sp,-32
   214dc:	dc800615 	stw	r18,24(sp)
   214e0:	dc400515 	stw	r17,20(sp)
   214e4:	dc000415 	stw	r16,16(sp)
   214e8:	dfc00715 	stw	ra,28(sp)
   214ec:	2025883a 	mov	r18,r4
   214f0:	2823883a 	mov	r17,r5
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   214f4:	2021883a 	mov	r16,r4
   214f8:	8485c83a 	sub	r2,r16,r18
   214fc:	1440090e 	bge	r2,r17,21524 <myprintf_hexarray+0x4c>
        sprintf(szText, "[%02X]", *(pHex+i));
   21500:	81800003 	ldbu	r6,0(r16)
   21504:	014000f4 	movhi	r5,3
   21508:	d809883a 	mov	r4,sp
   2150c:	294e1604 	addi	r5,r5,14424
   21510:	002173c0 	call	2173c <sprintf>
        DEBUG((szText));
   21514:	d809883a 	mov	r4,sp
   21518:	002148c0 	call	2148c <myprintf>
   2151c:	84000044 	addi	r16,r16,1
   21520:	003ff506 	br	214f8 <__alt_data_end+0xfffe1928>
    }
    return len;
}
   21524:	8805883a 	mov	r2,r17
   21528:	dfc00717 	ldw	ra,28(sp)
   2152c:	dc800617 	ldw	r18,24(sp)
   21530:	dc400517 	ldw	r17,20(sp)
   21534:	dc000417 	ldw	r16,16(sp)
   21538:	dec00804 	addi	sp,sp,32
   2153c:	f800283a 	ret

00021540 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   21540:	defff804 	addi	sp,sp,-32
   21544:	dc800615 	stw	r18,24(sp)
   21548:	dc400515 	stw	r17,20(sp)
   2154c:	dc000415 	stw	r16,16(sp)
   21550:	dfc00715 	stw	ra,28(sp)
   21554:	2025883a 	mov	r18,r4
   21558:	2823883a 	mov	r17,r5
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   2155c:	0021883a 	mov	r16,zero
   21560:	84400c0e 	bge	r16,r17,21594 <myprintf_dwordarray+0x54>
   21564:	8407883a 	add	r3,r16,r16
   21568:	18c7883a 	add	r3,r3,r3
   2156c:	90c7883a 	add	r3,r18,r3
        sprintf(szText, "[%08X]", *(pArray+i));
   21570:	19800017 	ldw	r6,0(r3)
   21574:	014000f4 	movhi	r5,3
   21578:	d809883a 	mov	r4,sp
   2157c:	294e1804 	addi	r5,r5,14432
   21580:	002173c0 	call	2173c <sprintf>
        DEBUG((szText));
   21584:	d809883a 	mov	r4,sp
   21588:	002148c0 	call	2148c <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   2158c:	84000044 	addi	r16,r16,1
   21590:	003ff306 	br	21560 <__alt_data_end+0xfffe1990>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
}
   21594:	8805883a 	mov	r2,r17
   21598:	dfc00717 	ldw	ra,28(sp)
   2159c:	dc800617 	ldw	r18,24(sp)
   215a0:	dc400517 	ldw	r17,20(sp)
   215a4:	dc000417 	ldw	r16,16(sp)
   215a8:	dec00804 	addi	sp,sp,32
   215ac:	f800283a 	ret

000215b0 <_printf_r>:
   215b0:	defffd04 	addi	sp,sp,-12
   215b4:	dfc00015 	stw	ra,0(sp)
   215b8:	d9800115 	stw	r6,4(sp)
   215bc:	d9c00215 	stw	r7,8(sp)
   215c0:	280d883a 	mov	r6,r5
   215c4:	21400217 	ldw	r5,8(r4)
   215c8:	d9c00104 	addi	r7,sp,4
   215cc:	00237d00 	call	237d0 <___vfprintf_internal_r>
   215d0:	dfc00017 	ldw	ra,0(sp)
   215d4:	dec00304 	addi	sp,sp,12
   215d8:	f800283a 	ret

000215dc <printf>:
   215dc:	defffc04 	addi	sp,sp,-16
   215e0:	dfc00015 	stw	ra,0(sp)
   215e4:	d9400115 	stw	r5,4(sp)
   215e8:	d9800215 	stw	r6,8(sp)
   215ec:	d9c00315 	stw	r7,12(sp)
   215f0:	008000f4 	movhi	r2,3
   215f4:	10959304 	addi	r2,r2,22092
   215f8:	10800017 	ldw	r2,0(r2)
   215fc:	200b883a 	mov	r5,r4
   21600:	d9800104 	addi	r6,sp,4
   21604:	11000217 	ldw	r4,8(r2)
   21608:	00257cc0 	call	257cc <__vfprintf_internal>
   2160c:	dfc00017 	ldw	ra,0(sp)
   21610:	dec00404 	addi	sp,sp,16
   21614:	f800283a 	ret

00021618 <_puts_r>:
   21618:	defff604 	addi	sp,sp,-40
   2161c:	dc000715 	stw	r16,28(sp)
   21620:	2021883a 	mov	r16,r4
   21624:	2809883a 	mov	r4,r5
   21628:	dc400815 	stw	r17,32(sp)
   2162c:	dfc00915 	stw	ra,36(sp)
   21630:	2823883a 	mov	r17,r5
   21634:	00217a80 	call	217a8 <strlen>
   21638:	00c000f4 	movhi	r3,3
   2163c:	18d59304 	addi	r3,r3,22092
   21640:	18c00017 	ldw	r3,0(r3)
   21644:	11000044 	addi	r4,r2,1
   21648:	d8800115 	stw	r2,4(sp)
   2164c:	18c00217 	ldw	r3,8(r3)
   21650:	014000f4 	movhi	r5,3
   21654:	294dde04 	addi	r5,r5,14200
   21658:	1880030b 	ldhu	r2,12(r3)
   2165c:	d9400215 	stw	r5,8(sp)
   21660:	d9000615 	stw	r4,24(sp)
   21664:	01400044 	movi	r5,1
   21668:	01000084 	movi	r4,2
   2166c:	d9000515 	stw	r4,20(sp)
   21670:	dc400015 	stw	r17,0(sp)
   21674:	d9400315 	stw	r5,12(sp)
   21678:	dec00415 	stw	sp,16(sp)
   2167c:	1108000c 	andi	r4,r2,8192
   21680:	2000061e 	bne	r4,zero,2169c <_puts_r+0x84>
   21684:	19401917 	ldw	r5,100(r3)
   21688:	0137ffc4 	movi	r4,-8193
   2168c:	10880014 	ori	r2,r2,8192
   21690:	2908703a 	and	r4,r5,r4
   21694:	1880030d 	sth	r2,12(r3)
   21698:	19001915 	stw	r4,100(r3)
   2169c:	81400217 	ldw	r5,8(r16)
   216a0:	8009883a 	mov	r4,r16
   216a4:	d9800404 	addi	r6,sp,16
   216a8:	0027d840 	call	27d84 <__sfvwrite_r>
   216ac:	1000061e 	bne	r2,zero,216c8 <_puts_r+0xb0>
   216b0:	00800284 	movi	r2,10
   216b4:	dfc00917 	ldw	ra,36(sp)
   216b8:	dc400817 	ldw	r17,32(sp)
   216bc:	dc000717 	ldw	r16,28(sp)
   216c0:	dec00a04 	addi	sp,sp,40
   216c4:	f800283a 	ret
   216c8:	00bfffc4 	movi	r2,-1
   216cc:	003ff906 	br	216b4 <__alt_data_end+0xfffe1ae4>

000216d0 <puts>:
   216d0:	008000f4 	movhi	r2,3
   216d4:	10959304 	addi	r2,r2,22092
   216d8:	200b883a 	mov	r5,r4
   216dc:	11000017 	ldw	r4,0(r2)
   216e0:	00216181 	jmpi	21618 <_puts_r>

000216e4 <_sprintf_r>:
   216e4:	deffe404 	addi	sp,sp,-112
   216e8:	2807883a 	mov	r3,r5
   216ec:	dfc01a15 	stw	ra,104(sp)
   216f0:	d9c01b15 	stw	r7,108(sp)
   216f4:	00a00034 	movhi	r2,32768
   216f8:	10bfffc4 	addi	r2,r2,-1
   216fc:	02008204 	movi	r8,520
   21700:	d8800215 	stw	r2,8(sp)
   21704:	d8800515 	stw	r2,20(sp)
   21708:	d80b883a 	mov	r5,sp
   2170c:	d9c01b04 	addi	r7,sp,108
   21710:	00bfffc4 	movi	r2,-1
   21714:	d8c00015 	stw	r3,0(sp)
   21718:	d8c00415 	stw	r3,16(sp)
   2171c:	da00030d 	sth	r8,12(sp)
   21720:	d880038d 	sth	r2,14(sp)
   21724:	00218400 	call	21840 <___svfprintf_internal_r>
   21728:	d8c00017 	ldw	r3,0(sp)
   2172c:	18000005 	stb	zero,0(r3)
   21730:	dfc01a17 	ldw	ra,104(sp)
   21734:	dec01c04 	addi	sp,sp,112
   21738:	f800283a 	ret

0002173c <sprintf>:
   2173c:	deffe304 	addi	sp,sp,-116
   21740:	2007883a 	mov	r3,r4
   21744:	dfc01a15 	stw	ra,104(sp)
   21748:	d9801b15 	stw	r6,108(sp)
   2174c:	d9c01c15 	stw	r7,112(sp)
   21750:	010000f4 	movhi	r4,3
   21754:	21159304 	addi	r4,r4,22092
   21758:	21000017 	ldw	r4,0(r4)
   2175c:	00a00034 	movhi	r2,32768
   21760:	10bfffc4 	addi	r2,r2,-1
   21764:	280d883a 	mov	r6,r5
   21768:	02008204 	movi	r8,520
   2176c:	d8800215 	stw	r2,8(sp)
   21770:	d8800515 	stw	r2,20(sp)
   21774:	d80b883a 	mov	r5,sp
   21778:	d9c01b04 	addi	r7,sp,108
   2177c:	00bfffc4 	movi	r2,-1
   21780:	d8c00015 	stw	r3,0(sp)
   21784:	d8c00415 	stw	r3,16(sp)
   21788:	da00030d 	sth	r8,12(sp)
   2178c:	d880038d 	sth	r2,14(sp)
   21790:	00218400 	call	21840 <___svfprintf_internal_r>
   21794:	d8c00017 	ldw	r3,0(sp)
   21798:	18000005 	stb	zero,0(r3)
   2179c:	dfc01a17 	ldw	ra,104(sp)
   217a0:	dec01d04 	addi	sp,sp,116
   217a4:	f800283a 	ret

000217a8 <strlen>:
   217a8:	208000cc 	andi	r2,r4,3
   217ac:	10002026 	beq	r2,zero,21830 <strlen+0x88>
   217b0:	20800007 	ldb	r2,0(r4)
   217b4:	10002026 	beq	r2,zero,21838 <strlen+0x90>
   217b8:	2005883a 	mov	r2,r4
   217bc:	00000206 	br	217c8 <strlen+0x20>
   217c0:	10c00007 	ldb	r3,0(r2)
   217c4:	18001826 	beq	r3,zero,21828 <strlen+0x80>
   217c8:	10800044 	addi	r2,r2,1
   217cc:	10c000cc 	andi	r3,r2,3
   217d0:	183ffb1e 	bne	r3,zero,217c0 <__alt_data_end+0xfffe1bf0>
   217d4:	10c00017 	ldw	r3,0(r2)
   217d8:	01ffbff4 	movhi	r7,65279
   217dc:	39ffbfc4 	addi	r7,r7,-257
   217e0:	00ca303a 	nor	r5,zero,r3
   217e4:	01a02074 	movhi	r6,32897
   217e8:	19c7883a 	add	r3,r3,r7
   217ec:	31a02004 	addi	r6,r6,-32640
   217f0:	1946703a 	and	r3,r3,r5
   217f4:	1986703a 	and	r3,r3,r6
   217f8:	1800091e 	bne	r3,zero,21820 <strlen+0x78>
   217fc:	10800104 	addi	r2,r2,4
   21800:	10c00017 	ldw	r3,0(r2)
   21804:	19cb883a 	add	r5,r3,r7
   21808:	00c6303a 	nor	r3,zero,r3
   2180c:	28c6703a 	and	r3,r5,r3
   21810:	1986703a 	and	r3,r3,r6
   21814:	183ff926 	beq	r3,zero,217fc <__alt_data_end+0xfffe1c2c>
   21818:	00000106 	br	21820 <strlen+0x78>
   2181c:	10800044 	addi	r2,r2,1
   21820:	10c00007 	ldb	r3,0(r2)
   21824:	183ffd1e 	bne	r3,zero,2181c <__alt_data_end+0xfffe1c4c>
   21828:	1105c83a 	sub	r2,r2,r4
   2182c:	f800283a 	ret
   21830:	2005883a 	mov	r2,r4
   21834:	003fe706 	br	217d4 <__alt_data_end+0xfffe1c04>
   21838:	0005883a 	mov	r2,zero
   2183c:	f800283a 	ret

00021840 <___svfprintf_internal_r>:
   21840:	deffb504 	addi	sp,sp,-300
   21844:	dfc04a15 	stw	ra,296(sp)
   21848:	ddc04815 	stw	r23,288(sp)
   2184c:	d9002f15 	stw	r4,188(sp)
   21850:	282f883a 	mov	r23,r5
   21854:	d9802915 	stw	r6,164(sp)
   21858:	d9c02d15 	stw	r7,180(sp)
   2185c:	df004915 	stw	fp,292(sp)
   21860:	dd804715 	stw	r22,284(sp)
   21864:	dd404615 	stw	r21,280(sp)
   21868:	dd004515 	stw	r20,276(sp)
   2186c:	dcc04415 	stw	r19,272(sp)
   21870:	dc804315 	stw	r18,268(sp)
   21874:	dc404215 	stw	r17,264(sp)
   21878:	dc004115 	stw	r16,260(sp)
   2187c:	00284440 	call	28444 <_localeconv_r>
   21880:	10800017 	ldw	r2,0(r2)
   21884:	1009883a 	mov	r4,r2
   21888:	d8803515 	stw	r2,212(sp)
   2188c:	00217a80 	call	217a8 <strlen>
   21890:	d8803915 	stw	r2,228(sp)
   21894:	b880030b 	ldhu	r2,12(r23)
   21898:	1080200c 	andi	r2,r2,128
   2189c:	10000226 	beq	r2,zero,218a8 <___svfprintf_internal_r+0x68>
   218a0:	b8800417 	ldw	r2,16(r23)
   218a4:	10065d26 	beq	r2,zero,2321c <___svfprintf_internal_r+0x19dc>
   218a8:	db001dc4 	addi	r12,sp,119
   218ac:	dd801e04 	addi	r22,sp,120
   218b0:	d8800404 	addi	r2,sp,16
   218b4:	050000f4 	movhi	r20,3
   218b8:	b317c83a 	sub	r11,r22,r12
   218bc:	a50e2a84 	addi	r20,r20,14506
   218c0:	db002815 	stw	r12,160(sp)
   218c4:	d8801e15 	stw	r2,120(sp)
   218c8:	d8002015 	stw	zero,128(sp)
   218cc:	d8001f15 	stw	zero,124(sp)
   218d0:	d8003315 	stw	zero,204(sp)
   218d4:	d8003715 	stw	zero,220(sp)
   218d8:	d8003815 	stw	zero,224(sp)
   218dc:	d8003b15 	stw	zero,236(sp)
   218e0:	d8003a15 	stw	zero,232(sp)
   218e4:	d8003015 	stw	zero,192(sp)
   218e8:	1011883a 	mov	r8,r2
   218ec:	dac03d15 	stw	r11,244(sp)
   218f0:	db002917 	ldw	r12,164(sp)
   218f4:	60800007 	ldb	r2,0(r12)
   218f8:	1000ab26 	beq	r2,zero,21ba8 <___svfprintf_internal_r+0x368>
   218fc:	00c00944 	movi	r3,37
   21900:	10c0a926 	beq	r2,r3,21ba8 <___svfprintf_internal_r+0x368>
   21904:	6021883a 	mov	r16,r12
   21908:	00000106 	br	21910 <___svfprintf_internal_r+0xd0>
   2190c:	10c08426 	beq	r2,r3,21b20 <___svfprintf_internal_r+0x2e0>
   21910:	84000044 	addi	r16,r16,1
   21914:	80800007 	ldb	r2,0(r16)
   21918:	103ffc1e 	bne	r2,zero,2190c <__alt_data_end+0xfffe1d3c>
   2191c:	dac02917 	ldw	r11,164(sp)
   21920:	82e3c83a 	sub	r17,r16,r11
   21924:	88000f26 	beq	r17,zero,21964 <___svfprintf_internal_r+0x124>
   21928:	d8c02017 	ldw	r3,128(sp)
   2192c:	d8801f17 	ldw	r2,124(sp)
   21930:	dac02917 	ldw	r11,164(sp)
   21934:	1c47883a 	add	r3,r3,r17
   21938:	10800044 	addi	r2,r2,1
   2193c:	d8c02015 	stw	r3,128(sp)
   21940:	42c00015 	stw	r11,0(r8)
   21944:	44400115 	stw	r17,4(r8)
   21948:	d8801f15 	stw	r2,124(sp)
   2194c:	00c001c4 	movi	r3,7
   21950:	18807616 	blt	r3,r2,21b2c <___svfprintf_internal_r+0x2ec>
   21954:	42000204 	addi	r8,r8,8
   21958:	db003017 	ldw	r12,192(sp)
   2195c:	6459883a 	add	r12,r12,r17
   21960:	db003015 	stw	r12,192(sp)
   21964:	80800007 	ldb	r2,0(r16)
   21968:	10007726 	beq	r2,zero,21b48 <___svfprintf_internal_r+0x308>
   2196c:	80800044 	addi	r2,r16,1
   21970:	84000047 	ldb	r16,1(r16)
   21974:	d8002785 	stb	zero,158(sp)
   21978:	000d883a 	mov	r6,zero
   2197c:	027fffc4 	movi	r9,-1
   21980:	d8002e15 	stw	zero,184(sp)
   21984:	0023883a 	mov	r17,zero
   21988:	01001604 	movi	r4,88
   2198c:	01400244 	movi	r5,9
   21990:	02800a84 	movi	r10,42
   21994:	01c01b04 	movi	r7,108
   21998:	10c00044 	addi	r3,r2,1
   2199c:	80bff804 	addi	r2,r16,-32
   219a0:	2082e436 	bltu	r4,r2,22534 <___svfprintf_internal_r+0xcf4>
   219a4:	100490ba 	slli	r2,r2,2
   219a8:	02c000b4 	movhi	r11,2
   219ac:	5ac66f04 	addi	r11,r11,6588
   219b0:	12c5883a 	add	r2,r2,r11
   219b4:	10800017 	ldw	r2,0(r2)
   219b8:	1000683a 	jmp	r2
   219bc:	000222ec 	andhi	zero,zero,2187
   219c0:	00022534 	movhi	zero,2196
   219c4:	00022534 	movhi	zero,2196
   219c8:	0002246c 	andhi	zero,zero,2193
   219cc:	00022534 	movhi	zero,2196
   219d0:	00022534 	movhi	zero,2196
   219d4:	00022534 	movhi	zero,2196
   219d8:	00022534 	movhi	zero,2196
   219dc:	00022534 	movhi	zero,2196
   219e0:	00022534 	movhi	zero,2196
   219e4:	00022430 	cmpltui	zero,zero,2192
   219e8:	0002245c 	xori	zero,zero,2193
   219ec:	00022534 	movhi	zero,2196
   219f0:	00021bb0 	cmpltui	zero,zero,2158
   219f4:	00021bc0 	call	21bc <__reset-0x1de44>
   219f8:	00022534 	movhi	zero,2196
   219fc:	00021c00 	call	21c0 <__reset-0x1de40>
   21a00:	00021c10 	cmplti	zero,zero,2160
   21a04:	00021c10 	cmplti	zero,zero,2160
   21a08:	00021c10 	cmplti	zero,zero,2160
   21a0c:	00021c10 	cmplti	zero,zero,2160
   21a10:	00021c10 	cmplti	zero,zero,2160
   21a14:	00021c10 	cmplti	zero,zero,2160
   21a18:	00021c10 	cmplti	zero,zero,2160
   21a1c:	00021c10 	cmplti	zero,zero,2160
   21a20:	00021c10 	cmplti	zero,zero,2160
   21a24:	00022534 	movhi	zero,2196
   21a28:	00022534 	movhi	zero,2196
   21a2c:	00022534 	movhi	zero,2196
   21a30:	00022534 	movhi	zero,2196
   21a34:	00022534 	movhi	zero,2196
   21a38:	00022534 	movhi	zero,2196
   21a3c:	00022534 	movhi	zero,2196
   21a40:	00022534 	movhi	zero,2196
   21a44:	00022534 	movhi	zero,2196
   21a48:	00022534 	movhi	zero,2196
   21a4c:	00021c44 	movi	zero,2161
   21a50:	00022130 	cmpltui	zero,zero,2180
   21a54:	00022534 	movhi	zero,2196
   21a58:	00022130 	cmpltui	zero,zero,2180
   21a5c:	00022534 	movhi	zero,2196
   21a60:	00022534 	movhi	zero,2196
   21a64:	00022534 	movhi	zero,2196
   21a68:	00022534 	movhi	zero,2196
   21a6c:	0002221c 	xori	zero,zero,2184
   21a70:	00022534 	movhi	zero,2196
   21a74:	00022534 	movhi	zero,2196
   21a78:	000220c4 	movi	zero,2179
   21a7c:	00022534 	movhi	zero,2196
   21a80:	00022534 	movhi	zero,2196
   21a84:	00022534 	movhi	zero,2196
   21a88:	00022534 	movhi	zero,2196
   21a8c:	00022534 	movhi	zero,2196
   21a90:	00022100 	call	2210 <__reset-0x1ddf0>
   21a94:	00022534 	movhi	zero,2196
   21a98:	00022534 	movhi	zero,2196
   21a9c:	0002230c 	andi	zero,zero,2188
   21aa0:	00022534 	movhi	zero,2196
   21aa4:	00022534 	movhi	zero,2196
   21aa8:	00022534 	movhi	zero,2196
   21aac:	00022534 	movhi	zero,2196
   21ab0:	00022534 	movhi	zero,2196
   21ab4:	00022534 	movhi	zero,2196
   21ab8:	00022534 	movhi	zero,2196
   21abc:	00022534 	movhi	zero,2196
   21ac0:	00022534 	movhi	zero,2196
   21ac4:	00022534 	movhi	zero,2196
   21ac8:	000223f0 	cmpltui	zero,zero,2191
   21acc:	0002222c 	andhi	zero,zero,2184
   21ad0:	00022130 	cmpltui	zero,zero,2180
   21ad4:	00022130 	cmpltui	zero,zero,2180
   21ad8:	00022130 	cmpltui	zero,zero,2180
   21adc:	00022294 	movui	zero,2186
   21ae0:	0002222c 	andhi	zero,zero,2184
   21ae4:	00022534 	movhi	zero,2196
   21ae8:	00022534 	movhi	zero,2196
   21aec:	000222a4 	muli	zero,zero,2186
   21af0:	00022534 	movhi	zero,2196
   21af4:	000222b8 	rdprs	zero,zero,2186
   21af8:	000224f8 	rdprs	zero,zero,2195
   21afc:	000221d4 	movui	zero,2183
   21b00:	000223e0 	cmpeqi	zero,zero,2191
   21b04:	00022534 	movhi	zero,2196
   21b08:	00022368 	cmpgeui	zero,zero,2189
   21b0c:	00022534 	movhi	zero,2196
   21b10:	000224bc 	xorhi	zero,zero,2194
   21b14:	00022534 	movhi	zero,2196
   21b18:	00022534 	movhi	zero,2196
   21b1c:	0002247c 	xorhi	zero,zero,2193
   21b20:	db002917 	ldw	r12,164(sp)
   21b24:	8323c83a 	sub	r17,r16,r12
   21b28:	003f7e06 	br	21924 <__alt_data_end+0xfffe1d54>
   21b2c:	d9002f17 	ldw	r4,188(sp)
   21b30:	b80b883a 	mov	r5,r23
   21b34:	b00d883a 	mov	r6,r22
   21b38:	002aa4c0 	call	2aa4c <__ssprint_r>
   21b3c:	1000081e 	bne	r2,zero,21b60 <___svfprintf_internal_r+0x320>
   21b40:	da000404 	addi	r8,sp,16
   21b44:	003f8406 	br	21958 <__alt_data_end+0xfffe1d88>
   21b48:	d8802017 	ldw	r2,128(sp)
   21b4c:	10000426 	beq	r2,zero,21b60 <___svfprintf_internal_r+0x320>
   21b50:	d9002f17 	ldw	r4,188(sp)
   21b54:	b80b883a 	mov	r5,r23
   21b58:	d9801e04 	addi	r6,sp,120
   21b5c:	002aa4c0 	call	2aa4c <__ssprint_r>
   21b60:	b880030b 	ldhu	r2,12(r23)
   21b64:	1080100c 	andi	r2,r2,64
   21b68:	10000d1e 	bne	r2,zero,21ba0 <___svfprintf_internal_r+0x360>
   21b6c:	d8803017 	ldw	r2,192(sp)
   21b70:	dfc04a17 	ldw	ra,296(sp)
   21b74:	df004917 	ldw	fp,292(sp)
   21b78:	ddc04817 	ldw	r23,288(sp)
   21b7c:	dd804717 	ldw	r22,284(sp)
   21b80:	dd404617 	ldw	r21,280(sp)
   21b84:	dd004517 	ldw	r20,276(sp)
   21b88:	dcc04417 	ldw	r19,272(sp)
   21b8c:	dc804317 	ldw	r18,268(sp)
   21b90:	dc404217 	ldw	r17,264(sp)
   21b94:	dc004117 	ldw	r16,260(sp)
   21b98:	dec04b04 	addi	sp,sp,300
   21b9c:	f800283a 	ret
   21ba0:	00bfffc4 	movi	r2,-1
   21ba4:	003ff206 	br	21b70 <__alt_data_end+0xfffe1fa0>
   21ba8:	dc002917 	ldw	r16,164(sp)
   21bac:	003f6d06 	br	21964 <__alt_data_end+0xfffe1d94>
   21bb0:	1805883a 	mov	r2,r3
   21bb4:	8c400114 	ori	r17,r17,4
   21bb8:	1c000007 	ldb	r16,0(r3)
   21bbc:	003f7606 	br	21998 <__alt_data_end+0xfffe1dc8>
   21bc0:	1c000007 	ldb	r16,0(r3)
   21bc4:	18800044 	addi	r2,r3,1
   21bc8:	8286e726 	beq	r16,r10,23768 <___svfprintf_internal_r+0x1f28>
   21bcc:	82fff404 	addi	r11,r16,-48
   21bd0:	1007883a 	mov	r3,r2
   21bd4:	0013883a 	mov	r9,zero
   21bd8:	2aff7036 	bltu	r5,r11,2199c <__alt_data_end+0xfffe1dcc>
   21bdc:	1c000007 	ldb	r16,0(r3)
   21be0:	4a4002a4 	muli	r9,r9,10
   21be4:	18c00044 	addi	r3,r3,1
   21be8:	5a53883a 	add	r9,r11,r9
   21bec:	82fff404 	addi	r11,r16,-48
   21bf0:	2afffa2e 	bgeu	r5,r11,21bdc <__alt_data_end+0xfffe200c>
   21bf4:	483f690e 	bge	r9,zero,2199c <__alt_data_end+0xfffe1dcc>
   21bf8:	027fffc4 	movi	r9,-1
   21bfc:	003f6706 	br	2199c <__alt_data_end+0xfffe1dcc>
   21c00:	8c402014 	ori	r17,r17,128
   21c04:	1805883a 	mov	r2,r3
   21c08:	1c000007 	ldb	r16,0(r3)
   21c0c:	003f6206 	br	21998 <__alt_data_end+0xfffe1dc8>
   21c10:	1805883a 	mov	r2,r3
   21c14:	d8002e15 	stw	zero,184(sp)
   21c18:	82fff404 	addi	r11,r16,-48
   21c1c:	0019883a 	mov	r12,zero
   21c20:	14000007 	ldb	r16,0(r2)
   21c24:	630002a4 	muli	r12,r12,10
   21c28:	18c00044 	addi	r3,r3,1
   21c2c:	1805883a 	mov	r2,r3
   21c30:	62d9883a 	add	r12,r12,r11
   21c34:	82fff404 	addi	r11,r16,-48
   21c38:	2afff92e 	bgeu	r5,r11,21c20 <__alt_data_end+0xfffe2050>
   21c3c:	db002e15 	stw	r12,184(sp)
   21c40:	003f5606 	br	2199c <__alt_data_end+0xfffe1dcc>
   21c44:	8c400414 	ori	r17,r17,16
   21c48:	d8c02915 	stw	r3,164(sp)
   21c4c:	d9802785 	stb	r6,158(sp)
   21c50:	8880080c 	andi	r2,r17,32
   21c54:	d8c02d17 	ldw	r3,180(sp)
   21c58:	10017926 	beq	r2,zero,22240 <___svfprintf_internal_r+0xa00>
   21c5c:	db002d17 	ldw	r12,180(sp)
   21c60:	18800117 	ldw	r2,4(r3)
   21c64:	1cc00017 	ldw	r19,0(r3)
   21c68:	63000204 	addi	r12,r12,8
   21c6c:	db002d15 	stw	r12,180(sp)
   21c70:	1039883a 	mov	fp,r2
   21c74:	10017d16 	blt	r2,zero,2226c <___svfprintf_internal_r+0xa2c>
   21c78:	dd402783 	ldbu	r21,158(sp)
   21c7c:	da403215 	stw	r9,200(sp)
   21c80:	00800044 	movi	r2,1
   21c84:	9f06b03a 	or	r3,r19,fp
   21c88:	48000216 	blt	r9,zero,21c94 <___svfprintf_internal_r+0x454>
   21c8c:	013fdfc4 	movi	r4,-129
   21c90:	8922703a 	and	r17,r17,r4
   21c94:	1802371e 	bne	r3,zero,22574 <___svfprintf_internal_r+0xd34>
   21c98:	48034526 	beq	r9,zero,229b0 <___svfprintf_internal_r+0x1170>
   21c9c:	10803fcc 	andi	r2,r2,255
   21ca0:	00c00044 	movi	r3,1
   21ca4:	10c25826 	beq	r2,r3,22608 <___svfprintf_internal_r+0xdc8>
   21ca8:	00c00084 	movi	r3,2
   21cac:	10c2db26 	beq	r2,r3,2281c <___svfprintf_internal_r+0xfdc>
   21cb0:	b007883a 	mov	r3,r22
   21cb4:	9808d0fa 	srli	r4,r19,3
   21cb8:	e00a977a 	slli	r5,fp,29
   21cbc:	e038d0fa 	srli	fp,fp,3
   21cc0:	9cc001cc 	andi	r19,r19,7
   21cc4:	98800c04 	addi	r2,r19,48
   21cc8:	18ffffc4 	addi	r3,r3,-1
   21ccc:	2926b03a 	or	r19,r5,r4
   21cd0:	18800005 	stb	r2,0(r3)
   21cd4:	9f08b03a 	or	r4,r19,fp
   21cd8:	203ff61e 	bne	r4,zero,21cb4 <__alt_data_end+0xfffe20e4>
   21cdc:	8900004c 	andi	r4,r17,1
   21ce0:	d8c03115 	stw	r3,196(sp)
   21ce4:	2002db26 	beq	r4,zero,22854 <___svfprintf_internal_r+0x1014>
   21ce8:	10803fcc 	andi	r2,r2,255
   21cec:	1080201c 	xori	r2,r2,128
   21cf0:	10bfe004 	addi	r2,r2,-128
   21cf4:	01000c04 	movi	r4,48
   21cf8:	11056626 	beq	r2,r4,23294 <___svfprintf_internal_r+0x1a54>
   21cfc:	dac03117 	ldw	r11,196(sp)
   21d00:	193fffc5 	stb	r4,-1(r3)
   21d04:	5affffc4 	addi	r11,r11,-1
   21d08:	dac03115 	stw	r11,196(sp)
   21d0c:	b2e5c83a 	sub	r18,r22,r11
   21d10:	9005883a 	mov	r2,r18
   21d14:	9240010e 	bge	r18,r9,21d1c <___svfprintf_internal_r+0x4dc>
   21d18:	4805883a 	mov	r2,r9
   21d1c:	d8802a15 	stw	r2,168(sp)
   21d20:	d8003415 	stw	zero,208(sp)
   21d24:	a8803fcc 	andi	r2,r21,255
   21d28:	1080201c 	xori	r2,r2,128
   21d2c:	10bfe004 	addi	r2,r2,-128
   21d30:	10000326 	beq	r2,zero,21d40 <___svfprintf_internal_r+0x500>
   21d34:	d8c02a17 	ldw	r3,168(sp)
   21d38:	18c00044 	addi	r3,r3,1
   21d3c:	d8c02a15 	stw	r3,168(sp)
   21d40:	8ac0008c 	andi	r11,r17,2
   21d44:	dac02b15 	stw	r11,172(sp)
   21d48:	58000326 	beq	r11,zero,21d58 <___svfprintf_internal_r+0x518>
   21d4c:	db002a17 	ldw	r12,168(sp)
   21d50:	63000084 	addi	r12,r12,2
   21d54:	db002a15 	stw	r12,168(sp)
   21d58:	88c0210c 	andi	r3,r17,132
   21d5c:	d8c02c15 	stw	r3,176(sp)
   21d60:	1802021e 	bne	r3,zero,2256c <___svfprintf_internal_r+0xd2c>
   21d64:	dac02e17 	ldw	r11,184(sp)
   21d68:	db002a17 	ldw	r12,168(sp)
   21d6c:	5b39c83a 	sub	fp,r11,r12
   21d70:	0701fe0e 	bge	zero,fp,2256c <___svfprintf_internal_r+0xd2c>
   21d74:	02400404 	movi	r9,16
   21d78:	d8c02017 	ldw	r3,128(sp)
   21d7c:	d8801f17 	ldw	r2,124(sp)
   21d80:	4f057d0e 	bge	r9,fp,23378 <___svfprintf_internal_r+0x1b38>
   21d84:	014000f4 	movhi	r5,3
   21d88:	e009883a 	mov	r4,fp
   21d8c:	294e2e84 	addi	r5,r5,14522
   21d90:	dc003c15 	stw	r16,240(sp)
   21d94:	9039883a 	mov	fp,r18
   21d98:	d9403615 	stw	r5,216(sp)
   21d9c:	8825883a 	mov	r18,r17
   21da0:	482b883a 	mov	r21,r9
   21da4:	04c001c4 	movi	r19,7
   21da8:	dc002f17 	ldw	r16,188(sp)
   21dac:	2023883a 	mov	r17,r4
   21db0:	00000306 	br	21dc0 <___svfprintf_internal_r+0x580>
   21db4:	8c7ffc04 	addi	r17,r17,-16
   21db8:	42000204 	addi	r8,r8,8
   21dbc:	ac40130e 	bge	r21,r17,21e0c <___svfprintf_internal_r+0x5cc>
   21dc0:	02c000f4 	movhi	r11,3
   21dc4:	18c00404 	addi	r3,r3,16
   21dc8:	10800044 	addi	r2,r2,1
   21dcc:	5ace2e84 	addi	r11,r11,14522
   21dd0:	42c00015 	stw	r11,0(r8)
   21dd4:	45400115 	stw	r21,4(r8)
   21dd8:	d8c02015 	stw	r3,128(sp)
   21ddc:	d8801f15 	stw	r2,124(sp)
   21de0:	98bff40e 	bge	r19,r2,21db4 <__alt_data_end+0xfffe21e4>
   21de4:	8009883a 	mov	r4,r16
   21de8:	b80b883a 	mov	r5,r23
   21dec:	b00d883a 	mov	r6,r22
   21df0:	002aa4c0 	call	2aa4c <__ssprint_r>
   21df4:	103f5a1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   21df8:	8c7ffc04 	addi	r17,r17,-16
   21dfc:	d8c02017 	ldw	r3,128(sp)
   21e00:	d8801f17 	ldw	r2,124(sp)
   21e04:	da000404 	addi	r8,sp,16
   21e08:	ac7fed16 	blt	r21,r17,21dc0 <__alt_data_end+0xfffe21f0>
   21e0c:	dc003c17 	ldw	r16,240(sp)
   21e10:	8809883a 	mov	r4,r17
   21e14:	9023883a 	mov	r17,r18
   21e18:	e025883a 	mov	r18,fp
   21e1c:	2039883a 	mov	fp,r4
   21e20:	db003617 	ldw	r12,216(sp)
   21e24:	e0c7883a 	add	r3,fp,r3
   21e28:	10800044 	addi	r2,r2,1
   21e2c:	43000015 	stw	r12,0(r8)
   21e30:	47000115 	stw	fp,4(r8)
   21e34:	d8c02015 	stw	r3,128(sp)
   21e38:	d8801f15 	stw	r2,124(sp)
   21e3c:	010001c4 	movi	r4,7
   21e40:	20833516 	blt	r4,r2,22b18 <___svfprintf_internal_r+0x12d8>
   21e44:	d8802787 	ldb	r2,158(sp)
   21e48:	42000204 	addi	r8,r8,8
   21e4c:	10000c26 	beq	r2,zero,21e80 <___svfprintf_internal_r+0x640>
   21e50:	d8801f17 	ldw	r2,124(sp)
   21e54:	d9002784 	addi	r4,sp,158
   21e58:	18c00044 	addi	r3,r3,1
   21e5c:	10800044 	addi	r2,r2,1
   21e60:	41000015 	stw	r4,0(r8)
   21e64:	01000044 	movi	r4,1
   21e68:	41000115 	stw	r4,4(r8)
   21e6c:	d8c02015 	stw	r3,128(sp)
   21e70:	d8801f15 	stw	r2,124(sp)
   21e74:	010001c4 	movi	r4,7
   21e78:	2082df16 	blt	r4,r2,229f8 <___svfprintf_internal_r+0x11b8>
   21e7c:	42000204 	addi	r8,r8,8
   21e80:	dac02b17 	ldw	r11,172(sp)
   21e84:	58000c26 	beq	r11,zero,21eb8 <___svfprintf_internal_r+0x678>
   21e88:	d8801f17 	ldw	r2,124(sp)
   21e8c:	d9002704 	addi	r4,sp,156
   21e90:	18c00084 	addi	r3,r3,2
   21e94:	10800044 	addi	r2,r2,1
   21e98:	41000015 	stw	r4,0(r8)
   21e9c:	01000084 	movi	r4,2
   21ea0:	41000115 	stw	r4,4(r8)
   21ea4:	d8c02015 	stw	r3,128(sp)
   21ea8:	d8801f15 	stw	r2,124(sp)
   21eac:	010001c4 	movi	r4,7
   21eb0:	2082d916 	blt	r4,r2,22a18 <___svfprintf_internal_r+0x11d8>
   21eb4:	42000204 	addi	r8,r8,8
   21eb8:	db002c17 	ldw	r12,176(sp)
   21ebc:	00802004 	movi	r2,128
   21ec0:	60822026 	beq	r12,r2,22744 <___svfprintf_internal_r+0xf04>
   21ec4:	db003217 	ldw	r12,200(sp)
   21ec8:	64abc83a 	sub	r21,r12,r18
   21ecc:	0540310e 	bge	zero,r21,21f94 <___svfprintf_internal_r+0x754>
   21ed0:	07000404 	movi	fp,16
   21ed4:	d8801f17 	ldw	r2,124(sp)
   21ed8:	e544180e 	bge	fp,r21,22f3c <___svfprintf_internal_r+0x16fc>
   21edc:	014000f4 	movhi	r5,3
   21ee0:	a809883a 	mov	r4,r21
   21ee4:	294e2a84 	addi	r5,r5,14506
   21ee8:	dc002c15 	stw	r16,176(sp)
   21eec:	902b883a 	mov	r21,r18
   21ef0:	d9402b15 	stw	r5,172(sp)
   21ef4:	8825883a 	mov	r18,r17
   21ef8:	04c001c4 	movi	r19,7
   21efc:	dc002f17 	ldw	r16,188(sp)
   21f00:	2023883a 	mov	r17,r4
   21f04:	00000306 	br	21f14 <___svfprintf_internal_r+0x6d4>
   21f08:	8c7ffc04 	addi	r17,r17,-16
   21f0c:	42000204 	addi	r8,r8,8
   21f10:	e440110e 	bge	fp,r17,21f58 <___svfprintf_internal_r+0x718>
   21f14:	18c00404 	addi	r3,r3,16
   21f18:	10800044 	addi	r2,r2,1
   21f1c:	45000015 	stw	r20,0(r8)
   21f20:	47000115 	stw	fp,4(r8)
   21f24:	d8c02015 	stw	r3,128(sp)
   21f28:	d8801f15 	stw	r2,124(sp)
   21f2c:	98bff60e 	bge	r19,r2,21f08 <__alt_data_end+0xfffe2338>
   21f30:	8009883a 	mov	r4,r16
   21f34:	b80b883a 	mov	r5,r23
   21f38:	b00d883a 	mov	r6,r22
   21f3c:	002aa4c0 	call	2aa4c <__ssprint_r>
   21f40:	103f071e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   21f44:	8c7ffc04 	addi	r17,r17,-16
   21f48:	d8c02017 	ldw	r3,128(sp)
   21f4c:	d8801f17 	ldw	r2,124(sp)
   21f50:	da000404 	addi	r8,sp,16
   21f54:	e47fef16 	blt	fp,r17,21f14 <__alt_data_end+0xfffe2344>
   21f58:	dc002c17 	ldw	r16,176(sp)
   21f5c:	8809883a 	mov	r4,r17
   21f60:	9023883a 	mov	r17,r18
   21f64:	a825883a 	mov	r18,r21
   21f68:	202b883a 	mov	r21,r4
   21f6c:	dac02b17 	ldw	r11,172(sp)
   21f70:	1d47883a 	add	r3,r3,r21
   21f74:	10800044 	addi	r2,r2,1
   21f78:	42c00015 	stw	r11,0(r8)
   21f7c:	45400115 	stw	r21,4(r8)
   21f80:	d8c02015 	stw	r3,128(sp)
   21f84:	d8801f15 	stw	r2,124(sp)
   21f88:	010001c4 	movi	r4,7
   21f8c:	20829216 	blt	r4,r2,229d8 <___svfprintf_internal_r+0x1198>
   21f90:	42000204 	addi	r8,r8,8
   21f94:	8880400c 	andi	r2,r17,256
   21f98:	1001a11e 	bne	r2,zero,22620 <___svfprintf_internal_r+0xde0>
   21f9c:	d8801f17 	ldw	r2,124(sp)
   21fa0:	db003117 	ldw	r12,196(sp)
   21fa4:	1c87883a 	add	r3,r3,r18
   21fa8:	10800044 	addi	r2,r2,1
   21fac:	43000015 	stw	r12,0(r8)
   21fb0:	44800115 	stw	r18,4(r8)
   21fb4:	d8c02015 	stw	r3,128(sp)
   21fb8:	d8801f15 	stw	r2,124(sp)
   21fbc:	010001c4 	movi	r4,7
   21fc0:	20826d16 	blt	r4,r2,22978 <___svfprintf_internal_r+0x1138>
   21fc4:	42000204 	addi	r8,r8,8
   21fc8:	8c40010c 	andi	r17,r17,4
   21fcc:	88003226 	beq	r17,zero,22098 <___svfprintf_internal_r+0x858>
   21fd0:	db002e17 	ldw	r12,184(sp)
   21fd4:	dac02a17 	ldw	r11,168(sp)
   21fd8:	62e1c83a 	sub	r16,r12,r11
   21fdc:	04002e0e 	bge	zero,r16,22098 <___svfprintf_internal_r+0x858>
   21fe0:	04400404 	movi	r17,16
   21fe4:	d8801f17 	ldw	r2,124(sp)
   21fe8:	8c05240e 	bge	r17,r16,2347c <___svfprintf_internal_r+0x1c3c>
   21fec:	010000f4 	movhi	r4,3
   21ff0:	210e2e84 	addi	r4,r4,14522
   21ff4:	d9003615 	stw	r4,216(sp)
   21ff8:	048001c4 	movi	r18,7
   21ffc:	dcc02f17 	ldw	r19,188(sp)
   22000:	00000306 	br	22010 <___svfprintf_internal_r+0x7d0>
   22004:	843ffc04 	addi	r16,r16,-16
   22008:	42000204 	addi	r8,r8,8
   2200c:	8c00130e 	bge	r17,r16,2205c <___svfprintf_internal_r+0x81c>
   22010:	014000f4 	movhi	r5,3
   22014:	18c00404 	addi	r3,r3,16
   22018:	10800044 	addi	r2,r2,1
   2201c:	294e2e84 	addi	r5,r5,14522
   22020:	41400015 	stw	r5,0(r8)
   22024:	44400115 	stw	r17,4(r8)
   22028:	d8c02015 	stw	r3,128(sp)
   2202c:	d8801f15 	stw	r2,124(sp)
   22030:	90bff40e 	bge	r18,r2,22004 <__alt_data_end+0xfffe2434>
   22034:	9809883a 	mov	r4,r19
   22038:	b80b883a 	mov	r5,r23
   2203c:	b00d883a 	mov	r6,r22
   22040:	002aa4c0 	call	2aa4c <__ssprint_r>
   22044:	103ec61e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22048:	843ffc04 	addi	r16,r16,-16
   2204c:	d8c02017 	ldw	r3,128(sp)
   22050:	d8801f17 	ldw	r2,124(sp)
   22054:	da000404 	addi	r8,sp,16
   22058:	8c3fed16 	blt	r17,r16,22010 <__alt_data_end+0xfffe2440>
   2205c:	dac03617 	ldw	r11,216(sp)
   22060:	1c07883a 	add	r3,r3,r16
   22064:	10800044 	addi	r2,r2,1
   22068:	42c00015 	stw	r11,0(r8)
   2206c:	44000115 	stw	r16,4(r8)
   22070:	d8c02015 	stw	r3,128(sp)
   22074:	d8801f15 	stw	r2,124(sp)
   22078:	010001c4 	movi	r4,7
   2207c:	2080060e 	bge	r4,r2,22098 <___svfprintf_internal_r+0x858>
   22080:	d9002f17 	ldw	r4,188(sp)
   22084:	b80b883a 	mov	r5,r23
   22088:	b00d883a 	mov	r6,r22
   2208c:	002aa4c0 	call	2aa4c <__ssprint_r>
   22090:	103eb31e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22094:	d8c02017 	ldw	r3,128(sp)
   22098:	d8802a17 	ldw	r2,168(sp)
   2209c:	db002e17 	ldw	r12,184(sp)
   220a0:	1300010e 	bge	r2,r12,220a8 <___svfprintf_internal_r+0x868>
   220a4:	6005883a 	mov	r2,r12
   220a8:	dac03017 	ldw	r11,192(sp)
   220ac:	5897883a 	add	r11,r11,r2
   220b0:	dac03015 	stw	r11,192(sp)
   220b4:	1802381e 	bne	r3,zero,22998 <___svfprintf_internal_r+0x1158>
   220b8:	d8001f15 	stw	zero,124(sp)
   220bc:	da000404 	addi	r8,sp,16
   220c0:	003e0b06 	br	218f0 <__alt_data_end+0xfffe1d20>
   220c4:	8c400414 	ori	r17,r17,16
   220c8:	d8c02915 	stw	r3,164(sp)
   220cc:	8880080c 	andi	r2,r17,32
   220d0:	10010c26 	beq	r2,zero,22504 <___svfprintf_internal_r+0xcc4>
   220d4:	db002d17 	ldw	r12,180(sp)
   220d8:	0005883a 	mov	r2,zero
   220dc:	64c00017 	ldw	r19,0(r12)
   220e0:	67000117 	ldw	fp,4(r12)
   220e4:	63000204 	addi	r12,r12,8
   220e8:	db002d15 	stw	r12,180(sp)
   220ec:	9f06b03a 	or	r3,r19,fp
   220f0:	d8002785 	stb	zero,158(sp)
   220f4:	da403215 	stw	r9,200(sp)
   220f8:	002b883a 	mov	r21,zero
   220fc:	003ee206 	br	21c88 <__alt_data_end+0xfffe20b8>
   22100:	8c400414 	ori	r17,r17,16
   22104:	d8c02915 	stw	r3,164(sp)
   22108:	8880080c 	andi	r2,r17,32
   2210c:	1000ee26 	beq	r2,zero,224c8 <___svfprintf_internal_r+0xc88>
   22110:	dac02d17 	ldw	r11,180(sp)
   22114:	00800044 	movi	r2,1
   22118:	5cc00017 	ldw	r19,0(r11)
   2211c:	5f000117 	ldw	fp,4(r11)
   22120:	5ac00204 	addi	r11,r11,8
   22124:	dac02d15 	stw	r11,180(sp)
   22128:	9f06b03a 	or	r3,r19,fp
   2212c:	003ff006 	br	220f0 <__alt_data_end+0xfffe2520>
   22130:	db002d17 	ldw	r12,180(sp)
   22134:	dac02d17 	ldw	r11,180(sp)
   22138:	d8c02915 	stw	r3,164(sp)
   2213c:	63000017 	ldw	r12,0(r12)
   22140:	5ac00117 	ldw	r11,4(r11)
   22144:	d9802785 	stb	r6,158(sp)
   22148:	6009883a 	mov	r4,r12
   2214c:	580b883a 	mov	r5,r11
   22150:	db003715 	stw	r12,220(sp)
   22154:	da004015 	stw	r8,256(sp)
   22158:	da403f15 	stw	r9,252(sp)
   2215c:	dac03815 	stw	r11,224(sp)
   22160:	002a7a40 	call	2a7a4 <__fpclassifyd>
   22164:	db002d17 	ldw	r12,180(sp)
   22168:	04800044 	movi	r18,1
   2216c:	da004017 	ldw	r8,256(sp)
   22170:	64c00204 	addi	r19,r12,8
   22174:	da403f17 	ldw	r9,252(sp)
   22178:	d9003717 	ldw	r4,220(sp)
   2217c:	d9403817 	ldw	r5,224(sp)
   22180:	14832c1e 	bne	r2,r18,22e34 <___svfprintf_internal_r+0x15f4>
   22184:	000d883a 	mov	r6,zero
   22188:	000f883a 	mov	r7,zero
   2218c:	002f9900 	call	2f990 <__ledf2>
   22190:	da004017 	ldw	r8,256(sp)
   22194:	1004c416 	blt	r2,zero,234a8 <___svfprintf_internal_r+0x1c68>
   22198:	dd402783 	ldbu	r21,158(sp)
   2219c:	008011c4 	movi	r2,71
   221a0:	14041a0e 	bge	r2,r16,2320c <___svfprintf_internal_r+0x19cc>
   221a4:	00c000f4 	movhi	r3,3
   221a8:	18ce1b04 	addi	r3,r3,14444
   221ac:	d8c03115 	stw	r3,196(sp)
   221b0:	02c000c4 	movi	r11,3
   221b4:	00bfdfc4 	movi	r2,-129
   221b8:	dac02a15 	stw	r11,168(sp)
   221bc:	88a2703a 	and	r17,r17,r2
   221c0:	dcc02d15 	stw	r19,180(sp)
   221c4:	5825883a 	mov	r18,r11
   221c8:	d8003215 	stw	zero,200(sp)
   221cc:	d8003415 	stw	zero,208(sp)
   221d0:	003ed406 	br	21d24 <__alt_data_end+0xfffe2154>
   221d4:	db002d17 	ldw	r12,180(sp)
   221d8:	00800c04 	movi	r2,48
   221dc:	d8802705 	stb	r2,156(sp)
   221e0:	64c00017 	ldw	r19,0(r12)
   221e4:	00801e04 	movi	r2,120
   221e8:	d8802745 	stb	r2,157(sp)
   221ec:	008000f4 	movhi	r2,3
   221f0:	108e2304 	addi	r2,r2,14476
   221f4:	63000104 	addi	r12,r12,4
   221f8:	d8c02915 	stw	r3,164(sp)
   221fc:	d8803b15 	stw	r2,236(sp)
   22200:	0039883a 	mov	fp,zero
   22204:	8c400094 	ori	r17,r17,2
   22208:	db002d15 	stw	r12,180(sp)
   2220c:	00800084 	movi	r2,2
   22210:	04001e04 	movi	r16,120
   22214:	9807883a 	mov	r3,r19
   22218:	003fb506 	br	220f0 <__alt_data_end+0xfffe2520>
   2221c:	8c400214 	ori	r17,r17,8
   22220:	1805883a 	mov	r2,r3
   22224:	1c000007 	ldb	r16,0(r3)
   22228:	003ddb06 	br	21998 <__alt_data_end+0xfffe1dc8>
   2222c:	d8c02915 	stw	r3,164(sp)
   22230:	d9802785 	stb	r6,158(sp)
   22234:	8880080c 	andi	r2,r17,32
   22238:	d8c02d17 	ldw	r3,180(sp)
   2223c:	103e871e 	bne	r2,zero,21c5c <__alt_data_end+0xfffe208c>
   22240:	8880040c 	andi	r2,r17,16
   22244:	10027a1e 	bne	r2,zero,22c30 <___svfprintf_internal_r+0x13f0>
   22248:	8880100c 	andi	r2,r17,64
   2224c:	10027826 	beq	r2,zero,22c30 <___svfprintf_internal_r+0x13f0>
   22250:	1cc0000f 	ldh	r19,0(r3)
   22254:	db002d17 	ldw	r12,180(sp)
   22258:	9839d7fa 	srai	fp,r19,31
   2225c:	63000104 	addi	r12,r12,4
   22260:	db002d15 	stw	r12,180(sp)
   22264:	e005883a 	mov	r2,fp
   22268:	103e830e 	bge	r2,zero,21c78 <__alt_data_end+0xfffe20a8>
   2226c:	04e7c83a 	sub	r19,zero,r19
   22270:	9804c03a 	cmpne	r2,r19,zero
   22274:	0739c83a 	sub	fp,zero,fp
   22278:	e0b9c83a 	sub	fp,fp,r2
   2227c:	05400b44 	movi	r21,45
   22280:	dd402785 	stb	r21,158(sp)
   22284:	da403215 	stw	r9,200(sp)
   22288:	00800044 	movi	r2,1
   2228c:	9f06b03a 	or	r3,r19,fp
   22290:	003e7d06 	br	21c88 <__alt_data_end+0xfffe20b8>
   22294:	8c401014 	ori	r17,r17,64
   22298:	1805883a 	mov	r2,r3
   2229c:	1c000007 	ldb	r16,0(r3)
   222a0:	003dbd06 	br	21998 <__alt_data_end+0xfffe1dc8>
   222a4:	1c000007 	ldb	r16,0(r3)
   222a8:	81c37126 	beq	r16,r7,23070 <___svfprintf_internal_r+0x1830>
   222ac:	8c400414 	ori	r17,r17,16
   222b0:	1805883a 	mov	r2,r3
   222b4:	003db806 	br	21998 <__alt_data_end+0xfffe1dc8>
   222b8:	d8c02915 	stw	r3,164(sp)
   222bc:	d9802785 	stb	r6,158(sp)
   222c0:	8880080c 	andi	r2,r17,32
   222c4:	1002f026 	beq	r2,zero,22e88 <___svfprintf_internal_r+0x1648>
   222c8:	db002d17 	ldw	r12,180(sp)
   222cc:	dac03017 	ldw	r11,192(sp)
   222d0:	60800017 	ldw	r2,0(r12)
   222d4:	5807d7fa 	srai	r3,r11,31
   222d8:	63000104 	addi	r12,r12,4
   222dc:	db002d15 	stw	r12,180(sp)
   222e0:	12c00015 	stw	r11,0(r2)
   222e4:	10c00115 	stw	r3,4(r2)
   222e8:	003d8106 	br	218f0 <__alt_data_end+0xfffe1d20>
   222ec:	30803fcc 	andi	r2,r6,255
   222f0:	1080201c 	xori	r2,r2,128
   222f4:	10bfe004 	addi	r2,r2,-128
   222f8:	1002fd1e 	bne	r2,zero,22ef0 <___svfprintf_internal_r+0x16b0>
   222fc:	1805883a 	mov	r2,r3
   22300:	01800804 	movi	r6,32
   22304:	1c000007 	ldb	r16,0(r3)
   22308:	003da306 	br	21998 <__alt_data_end+0xfffe1dc8>
   2230c:	030000f4 	movhi	r12,3
   22310:	630e1e04 	addi	r12,r12,14456
   22314:	d8c02915 	stw	r3,164(sp)
   22318:	d9802785 	stb	r6,158(sp)
   2231c:	db003b15 	stw	r12,236(sp)
   22320:	88c0080c 	andi	r3,r17,32
   22324:	d8802d17 	ldw	r2,180(sp)
   22328:	18005c26 	beq	r3,zero,2249c <___svfprintf_internal_r+0xc5c>
   2232c:	dac02d17 	ldw	r11,180(sp)
   22330:	14c00017 	ldw	r19,0(r2)
   22334:	17000117 	ldw	fp,4(r2)
   22338:	5ac00204 	addi	r11,r11,8
   2233c:	dac02d15 	stw	r11,180(sp)
   22340:	8880004c 	andi	r2,r17,1
   22344:	10022f26 	beq	r2,zero,22c04 <___svfprintf_internal_r+0x13c4>
   22348:	9f06b03a 	or	r3,r19,fp
   2234c:	1802eb26 	beq	r3,zero,22efc <___svfprintf_internal_r+0x16bc>
   22350:	00800c04 	movi	r2,48
   22354:	d8802705 	stb	r2,156(sp)
   22358:	dc002745 	stb	r16,157(sp)
   2235c:	8c400094 	ori	r17,r17,2
   22360:	00800084 	movi	r2,2
   22364:	003f6206 	br	220f0 <__alt_data_end+0xfffe2520>
   22368:	dac02d17 	ldw	r11,180(sp)
   2236c:	db002d17 	ldw	r12,180(sp)
   22370:	d8c02915 	stw	r3,164(sp)
   22374:	5ac00017 	ldw	r11,0(r11)
   22378:	d8002785 	stb	zero,158(sp)
   2237c:	64c00104 	addi	r19,r12,4
   22380:	dac03115 	stw	r11,196(sp)
   22384:	58042e26 	beq	r11,zero,23440 <___svfprintf_internal_r+0x1c00>
   22388:	d9003117 	ldw	r4,196(sp)
   2238c:	4803c416 	blt	r9,zero,232a0 <___svfprintf_internal_r+0x1a60>
   22390:	480d883a 	mov	r6,r9
   22394:	000b883a 	mov	r5,zero
   22398:	da004015 	stw	r8,256(sp)
   2239c:	da403f15 	stw	r9,252(sp)
   223a0:	0028dd80 	call	28dd8 <memchr>
   223a4:	da004017 	ldw	r8,256(sp)
   223a8:	da403f17 	ldw	r9,252(sp)
   223ac:	10048a26 	beq	r2,zero,235d8 <___svfprintf_internal_r+0x1d98>
   223b0:	d8c03117 	ldw	r3,196(sp)
   223b4:	10e5c83a 	sub	r18,r2,r3
   223b8:	4c80010e 	bge	r9,r18,223c0 <___svfprintf_internal_r+0xb80>
   223bc:	4825883a 	mov	r18,r9
   223c0:	9005883a 	mov	r2,r18
   223c4:	9003bb16 	blt	r18,zero,232b4 <___svfprintf_internal_r+0x1a74>
   223c8:	dd402783 	ldbu	r21,158(sp)
   223cc:	d8802a15 	stw	r2,168(sp)
   223d0:	dcc02d15 	stw	r19,180(sp)
   223d4:	d8003215 	stw	zero,200(sp)
   223d8:	d8003415 	stw	zero,208(sp)
   223dc:	003e5106 	br	21d24 <__alt_data_end+0xfffe2154>
   223e0:	8c400814 	ori	r17,r17,32
   223e4:	1805883a 	mov	r2,r3
   223e8:	1c000007 	ldb	r16,0(r3)
   223ec:	003d6a06 	br	21998 <__alt_data_end+0xfffe1dc8>
   223f0:	db002d17 	ldw	r12,180(sp)
   223f4:	d8c02915 	stw	r3,164(sp)
   223f8:	dac01404 	addi	r11,sp,80
   223fc:	60800017 	ldw	r2,0(r12)
   22400:	00c00044 	movi	r3,1
   22404:	63000104 	addi	r12,r12,4
   22408:	d8801405 	stb	r2,80(sp)
   2240c:	d8c02a15 	stw	r3,168(sp)
   22410:	d8002785 	stb	zero,158(sp)
   22414:	db002d15 	stw	r12,180(sp)
   22418:	1825883a 	mov	r18,r3
   2241c:	d8003215 	stw	zero,200(sp)
   22420:	d8003415 	stw	zero,208(sp)
   22424:	dac03115 	stw	r11,196(sp)
   22428:	0005883a 	mov	r2,zero
   2242c:	003e4406 	br	21d40 <__alt_data_end+0xfffe2170>
   22430:	dac02d17 	ldw	r11,180(sp)
   22434:	db002d17 	ldw	r12,180(sp)
   22438:	5ac00017 	ldw	r11,0(r11)
   2243c:	dac02e15 	stw	r11,184(sp)
   22440:	62c00104 	addi	r11,r12,4
   22444:	db002e17 	ldw	r12,184(sp)
   22448:	60030316 	blt	r12,zero,23058 <___svfprintf_internal_r+0x1818>
   2244c:	dac02d15 	stw	r11,180(sp)
   22450:	1805883a 	mov	r2,r3
   22454:	1c000007 	ldb	r16,0(r3)
   22458:	003d4f06 	br	21998 <__alt_data_end+0xfffe1dc8>
   2245c:	1805883a 	mov	r2,r3
   22460:	01800ac4 	movi	r6,43
   22464:	1c000007 	ldb	r16,0(r3)
   22468:	003d4b06 	br	21998 <__alt_data_end+0xfffe1dc8>
   2246c:	8c400054 	ori	r17,r17,1
   22470:	1805883a 	mov	r2,r3
   22474:	1c000007 	ldb	r16,0(r3)
   22478:	003d4706 	br	21998 <__alt_data_end+0xfffe1dc8>
   2247c:	008000f4 	movhi	r2,3
   22480:	108e2304 	addi	r2,r2,14476
   22484:	d8c02915 	stw	r3,164(sp)
   22488:	d8803b15 	stw	r2,236(sp)
   2248c:	d9802785 	stb	r6,158(sp)
   22490:	88c0080c 	andi	r3,r17,32
   22494:	d8802d17 	ldw	r2,180(sp)
   22498:	183fa41e 	bne	r3,zero,2232c <__alt_data_end+0xfffe275c>
   2249c:	88c0040c 	andi	r3,r17,16
   224a0:	18028b26 	beq	r3,zero,22ed0 <___svfprintf_internal_r+0x1690>
   224a4:	db002d17 	ldw	r12,180(sp)
   224a8:	14c00017 	ldw	r19,0(r2)
   224ac:	0039883a 	mov	fp,zero
   224b0:	63000104 	addi	r12,r12,4
   224b4:	db002d15 	stw	r12,180(sp)
   224b8:	003fa106 	br	22340 <__alt_data_end+0xfffe2770>
   224bc:	d8c02915 	stw	r3,164(sp)
   224c0:	8880080c 	andi	r2,r17,32
   224c4:	103f121e 	bne	r2,zero,22110 <__alt_data_end+0xfffe2540>
   224c8:	8880040c 	andi	r2,r17,16
   224cc:	1001df1e 	bne	r2,zero,22c4c <___svfprintf_internal_r+0x140c>
   224d0:	8880100c 	andi	r2,r17,64
   224d4:	1001dd26 	beq	r2,zero,22c4c <___svfprintf_internal_r+0x140c>
   224d8:	dac02d17 	ldw	r11,180(sp)
   224dc:	0039883a 	mov	fp,zero
   224e0:	00800044 	movi	r2,1
   224e4:	5cc0000b 	ldhu	r19,0(r11)
   224e8:	5ac00104 	addi	r11,r11,4
   224ec:	dac02d15 	stw	r11,180(sp)
   224f0:	9807883a 	mov	r3,r19
   224f4:	003efe06 	br	220f0 <__alt_data_end+0xfffe2520>
   224f8:	d8c02915 	stw	r3,164(sp)
   224fc:	8880080c 	andi	r2,r17,32
   22500:	103ef41e 	bne	r2,zero,220d4 <__alt_data_end+0xfffe2504>
   22504:	8880040c 	andi	r2,r17,16
   22508:	1001c11e 	bne	r2,zero,22c10 <___svfprintf_internal_r+0x13d0>
   2250c:	8880100c 	andi	r2,r17,64
   22510:	1001bf26 	beq	r2,zero,22c10 <___svfprintf_internal_r+0x13d0>
   22514:	db002d17 	ldw	r12,180(sp)
   22518:	0039883a 	mov	fp,zero
   2251c:	0005883a 	mov	r2,zero
   22520:	64c0000b 	ldhu	r19,0(r12)
   22524:	63000104 	addi	r12,r12,4
   22528:	db002d15 	stw	r12,180(sp)
   2252c:	9807883a 	mov	r3,r19
   22530:	003eef06 	br	220f0 <__alt_data_end+0xfffe2520>
   22534:	d8c02915 	stw	r3,164(sp)
   22538:	d9802785 	stb	r6,158(sp)
   2253c:	803d8226 	beq	r16,zero,21b48 <__alt_data_end+0xfffe1f78>
   22540:	02c00044 	movi	r11,1
   22544:	db001404 	addi	r12,sp,80
   22548:	dac02a15 	stw	r11,168(sp)
   2254c:	dc001405 	stb	r16,80(sp)
   22550:	d8002785 	stb	zero,158(sp)
   22554:	5825883a 	mov	r18,r11
   22558:	d8003215 	stw	zero,200(sp)
   2255c:	d8003415 	stw	zero,208(sp)
   22560:	db003115 	stw	r12,196(sp)
   22564:	0005883a 	mov	r2,zero
   22568:	003df506 	br	21d40 <__alt_data_end+0xfffe2170>
   2256c:	d8c02017 	ldw	r3,128(sp)
   22570:	003e3606 	br	21e4c <__alt_data_end+0xfffe227c>
   22574:	10803fcc 	andi	r2,r2,255
   22578:	00c00044 	movi	r3,1
   2257c:	10fdca1e 	bne	r2,r3,21ca8 <__alt_data_end+0xfffe20d8>
   22580:	e000021e 	bne	fp,zero,2258c <___svfprintf_internal_r+0xd4c>
   22584:	00800244 	movi	r2,9
   22588:	14c01f2e 	bgeu	r2,r19,22608 <___svfprintf_internal_r+0xdc8>
   2258c:	dc002a15 	stw	r16,168(sp)
   22590:	dc402b15 	stw	r17,172(sp)
   22594:	9821883a 	mov	r16,r19
   22598:	e023883a 	mov	r17,fp
   2259c:	b025883a 	mov	r18,r22
   225a0:	4027883a 	mov	r19,r8
   225a4:	4839883a 	mov	fp,r9
   225a8:	8009883a 	mov	r4,r16
   225ac:	880b883a 	mov	r5,r17
   225b0:	01800284 	movi	r6,10
   225b4:	000f883a 	mov	r7,zero
   225b8:	002e0080 	call	2e008 <__umoddi3>
   225bc:	10800c04 	addi	r2,r2,48
   225c0:	94bfffc4 	addi	r18,r18,-1
   225c4:	8009883a 	mov	r4,r16
   225c8:	880b883a 	mov	r5,r17
   225cc:	01800284 	movi	r6,10
   225d0:	000f883a 	mov	r7,zero
   225d4:	90800005 	stb	r2,0(r18)
   225d8:	002da480 	call	2da48 <__udivdi3>
   225dc:	1021883a 	mov	r16,r2
   225e0:	10c4b03a 	or	r2,r2,r3
   225e4:	1823883a 	mov	r17,r3
   225e8:	103fef1e 	bne	r2,zero,225a8 <__alt_data_end+0xfffe29d8>
   225ec:	dc803115 	stw	r18,196(sp)
   225f0:	dc002a17 	ldw	r16,168(sp)
   225f4:	9811883a 	mov	r8,r19
   225f8:	dc402b17 	ldw	r17,172(sp)
   225fc:	e013883a 	mov	r9,fp
   22600:	b4a5c83a 	sub	r18,r22,r18
   22604:	003dc206 	br	21d10 <__alt_data_end+0xfffe2140>
   22608:	9cc00c04 	addi	r19,r19,48
   2260c:	db001dc4 	addi	r12,sp,119
   22610:	dcc01dc5 	stb	r19,119(sp)
   22614:	dc803d17 	ldw	r18,244(sp)
   22618:	db003115 	stw	r12,196(sp)
   2261c:	003dbc06 	br	21d10 <__alt_data_end+0xfffe2140>
   22620:	00801944 	movi	r2,101
   22624:	14008d0e 	bge	r2,r16,2285c <___svfprintf_internal_r+0x101c>
   22628:	d9003717 	ldw	r4,220(sp)
   2262c:	d9403817 	ldw	r5,224(sp)
   22630:	000d883a 	mov	r6,zero
   22634:	000f883a 	mov	r7,zero
   22638:	d8c03e15 	stw	r3,248(sp)
   2263c:	da004015 	stw	r8,256(sp)
   22640:	002f82c0 	call	2f82c <__eqdf2>
   22644:	d8c03e17 	ldw	r3,248(sp)
   22648:	da004017 	ldw	r8,256(sp)
   2264c:	1000fd1e 	bne	r2,zero,22a44 <___svfprintf_internal_r+0x1204>
   22650:	d8801f17 	ldw	r2,124(sp)
   22654:	010000f4 	movhi	r4,3
   22658:	210e2a04 	addi	r4,r4,14504
   2265c:	18c00044 	addi	r3,r3,1
   22660:	10800044 	addi	r2,r2,1
   22664:	41000015 	stw	r4,0(r8)
   22668:	01000044 	movi	r4,1
   2266c:	41000115 	stw	r4,4(r8)
   22670:	d8c02015 	stw	r3,128(sp)
   22674:	d8801f15 	stw	r2,124(sp)
   22678:	010001c4 	movi	r4,7
   2267c:	20823316 	blt	r4,r2,22f4c <___svfprintf_internal_r+0x170c>
   22680:	42000204 	addi	r8,r8,8
   22684:	d8802617 	ldw	r2,152(sp)
   22688:	dac03317 	ldw	r11,204(sp)
   2268c:	12c00216 	blt	r2,r11,22698 <___svfprintf_internal_r+0xe58>
   22690:	8880004c 	andi	r2,r17,1
   22694:	103e4c26 	beq	r2,zero,21fc8 <__alt_data_end+0xfffe23f8>
   22698:	db003917 	ldw	r12,228(sp)
   2269c:	d8801f17 	ldw	r2,124(sp)
   226a0:	dac03517 	ldw	r11,212(sp)
   226a4:	1b07883a 	add	r3,r3,r12
   226a8:	10800044 	addi	r2,r2,1
   226ac:	42c00015 	stw	r11,0(r8)
   226b0:	43000115 	stw	r12,4(r8)
   226b4:	d8c02015 	stw	r3,128(sp)
   226b8:	d8801f15 	stw	r2,124(sp)
   226bc:	010001c4 	movi	r4,7
   226c0:	20826f16 	blt	r4,r2,23080 <___svfprintf_internal_r+0x1840>
   226c4:	42000204 	addi	r8,r8,8
   226c8:	db003317 	ldw	r12,204(sp)
   226cc:	643fffc4 	addi	r16,r12,-1
   226d0:	043e3d0e 	bge	zero,r16,21fc8 <__alt_data_end+0xfffe23f8>
   226d4:	04800404 	movi	r18,16
   226d8:	d8801f17 	ldw	r2,124(sp)
   226dc:	94009a0e 	bge	r18,r16,22948 <___svfprintf_internal_r+0x1108>
   226e0:	014000f4 	movhi	r5,3
   226e4:	294e2a84 	addi	r5,r5,14506
   226e8:	d9402b15 	stw	r5,172(sp)
   226ec:	054001c4 	movi	r21,7
   226f0:	dcc02f17 	ldw	r19,188(sp)
   226f4:	00000306 	br	22704 <___svfprintf_internal_r+0xec4>
   226f8:	42000204 	addi	r8,r8,8
   226fc:	843ffc04 	addi	r16,r16,-16
   22700:	9400940e 	bge	r18,r16,22954 <___svfprintf_internal_r+0x1114>
   22704:	18c00404 	addi	r3,r3,16
   22708:	10800044 	addi	r2,r2,1
   2270c:	45000015 	stw	r20,0(r8)
   22710:	44800115 	stw	r18,4(r8)
   22714:	d8c02015 	stw	r3,128(sp)
   22718:	d8801f15 	stw	r2,124(sp)
   2271c:	a8bff60e 	bge	r21,r2,226f8 <__alt_data_end+0xfffe2b28>
   22720:	9809883a 	mov	r4,r19
   22724:	b80b883a 	mov	r5,r23
   22728:	b00d883a 	mov	r6,r22
   2272c:	002aa4c0 	call	2aa4c <__ssprint_r>
   22730:	103d0b1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22734:	d8c02017 	ldw	r3,128(sp)
   22738:	d8801f17 	ldw	r2,124(sp)
   2273c:	da000404 	addi	r8,sp,16
   22740:	003fee06 	br	226fc <__alt_data_end+0xfffe2b2c>
   22744:	dac02e17 	ldw	r11,184(sp)
   22748:	db002a17 	ldw	r12,168(sp)
   2274c:	5b2bc83a 	sub	r21,r11,r12
   22750:	057ddc0e 	bge	zero,r21,21ec4 <__alt_data_end+0xfffe22f4>
   22754:	07000404 	movi	fp,16
   22758:	d8801f17 	ldw	r2,124(sp)
   2275c:	e5435d0e 	bge	fp,r21,234d4 <___svfprintf_internal_r+0x1c94>
   22760:	014000f4 	movhi	r5,3
   22764:	a809883a 	mov	r4,r21
   22768:	294e2a84 	addi	r5,r5,14506
   2276c:	dc002c15 	stw	r16,176(sp)
   22770:	902b883a 	mov	r21,r18
   22774:	d9402b15 	stw	r5,172(sp)
   22778:	8825883a 	mov	r18,r17
   2277c:	04c001c4 	movi	r19,7
   22780:	dc002f17 	ldw	r16,188(sp)
   22784:	2023883a 	mov	r17,r4
   22788:	00000306 	br	22798 <___svfprintf_internal_r+0xf58>
   2278c:	8c7ffc04 	addi	r17,r17,-16
   22790:	42000204 	addi	r8,r8,8
   22794:	e440110e 	bge	fp,r17,227dc <___svfprintf_internal_r+0xf9c>
   22798:	18c00404 	addi	r3,r3,16
   2279c:	10800044 	addi	r2,r2,1
   227a0:	45000015 	stw	r20,0(r8)
   227a4:	47000115 	stw	fp,4(r8)
   227a8:	d8c02015 	stw	r3,128(sp)
   227ac:	d8801f15 	stw	r2,124(sp)
   227b0:	98bff60e 	bge	r19,r2,2278c <__alt_data_end+0xfffe2bbc>
   227b4:	8009883a 	mov	r4,r16
   227b8:	b80b883a 	mov	r5,r23
   227bc:	b00d883a 	mov	r6,r22
   227c0:	002aa4c0 	call	2aa4c <__ssprint_r>
   227c4:	103ce61e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   227c8:	8c7ffc04 	addi	r17,r17,-16
   227cc:	d8c02017 	ldw	r3,128(sp)
   227d0:	d8801f17 	ldw	r2,124(sp)
   227d4:	da000404 	addi	r8,sp,16
   227d8:	e47fef16 	blt	fp,r17,22798 <__alt_data_end+0xfffe2bc8>
   227dc:	dc002c17 	ldw	r16,176(sp)
   227e0:	8809883a 	mov	r4,r17
   227e4:	9023883a 	mov	r17,r18
   227e8:	a825883a 	mov	r18,r21
   227ec:	202b883a 	mov	r21,r4
   227f0:	dac02b17 	ldw	r11,172(sp)
   227f4:	1d47883a 	add	r3,r3,r21
   227f8:	10800044 	addi	r2,r2,1
   227fc:	42c00015 	stw	r11,0(r8)
   22800:	45400115 	stw	r21,4(r8)
   22804:	d8c02015 	stw	r3,128(sp)
   22808:	d8801f15 	stw	r2,124(sp)
   2280c:	010001c4 	movi	r4,7
   22810:	20818016 	blt	r4,r2,22e14 <___svfprintf_internal_r+0x15d4>
   22814:	42000204 	addi	r8,r8,8
   22818:	003daa06 	br	21ec4 <__alt_data_end+0xfffe22f4>
   2281c:	d9403b17 	ldw	r5,236(sp)
   22820:	b007883a 	mov	r3,r22
   22824:	988003cc 	andi	r2,r19,15
   22828:	e008973a 	slli	r4,fp,28
   2282c:	2885883a 	add	r2,r5,r2
   22830:	9826d13a 	srli	r19,r19,4
   22834:	10800003 	ldbu	r2,0(r2)
   22838:	e038d13a 	srli	fp,fp,4
   2283c:	18ffffc4 	addi	r3,r3,-1
   22840:	24e6b03a 	or	r19,r4,r19
   22844:	18800005 	stb	r2,0(r3)
   22848:	9f04b03a 	or	r2,r19,fp
   2284c:	103ff51e 	bne	r2,zero,22824 <__alt_data_end+0xfffe2c54>
   22850:	d8c03115 	stw	r3,196(sp)
   22854:	b0e5c83a 	sub	r18,r22,r3
   22858:	003d2d06 	br	21d10 <__alt_data_end+0xfffe2140>
   2285c:	db003317 	ldw	r12,204(sp)
   22860:	00800044 	movi	r2,1
   22864:	18c00044 	addi	r3,r3,1
   22868:	13014b0e 	bge	r2,r12,22d98 <___svfprintf_internal_r+0x1558>
   2286c:	dc001f17 	ldw	r16,124(sp)
   22870:	dac03117 	ldw	r11,196(sp)
   22874:	00800044 	movi	r2,1
   22878:	84000044 	addi	r16,r16,1
   2287c:	40800115 	stw	r2,4(r8)
   22880:	42c00015 	stw	r11,0(r8)
   22884:	d8c02015 	stw	r3,128(sp)
   22888:	dc001f15 	stw	r16,124(sp)
   2288c:	008001c4 	movi	r2,7
   22890:	14014e16 	blt	r2,r16,22dcc <___svfprintf_internal_r+0x158c>
   22894:	42000204 	addi	r8,r8,8
   22898:	db003917 	ldw	r12,228(sp)
   2289c:	dac03517 	ldw	r11,212(sp)
   228a0:	84000044 	addi	r16,r16,1
   228a4:	1b07883a 	add	r3,r3,r12
   228a8:	42c00015 	stw	r11,0(r8)
   228ac:	43000115 	stw	r12,4(r8)
   228b0:	d8c02015 	stw	r3,128(sp)
   228b4:	dc001f15 	stw	r16,124(sp)
   228b8:	008001c4 	movi	r2,7
   228bc:	14014c16 	blt	r2,r16,22df0 <___svfprintf_internal_r+0x15b0>
   228c0:	44800204 	addi	r18,r8,8
   228c4:	d9003717 	ldw	r4,220(sp)
   228c8:	d9403817 	ldw	r5,224(sp)
   228cc:	000d883a 	mov	r6,zero
   228d0:	000f883a 	mov	r7,zero
   228d4:	d8c03e15 	stw	r3,248(sp)
   228d8:	002f82c0 	call	2f82c <__eqdf2>
   228dc:	d8c03e17 	ldw	r3,248(sp)
   228e0:	db003317 	ldw	r12,204(sp)
   228e4:	10009526 	beq	r2,zero,22b3c <___svfprintf_internal_r+0x12fc>
   228e8:	dac03117 	ldw	r11,196(sp)
   228ec:	60bfffc4 	addi	r2,r12,-1
   228f0:	1887883a 	add	r3,r3,r2
   228f4:	59000044 	addi	r4,r11,1
   228f8:	84000044 	addi	r16,r16,1
   228fc:	90800115 	stw	r2,4(r18)
   22900:	91000015 	stw	r4,0(r18)
   22904:	d8c02015 	stw	r3,128(sp)
   22908:	dc001f15 	stw	r16,124(sp)
   2290c:	008001c4 	movi	r2,7
   22910:	1400b316 	blt	r2,r16,22be0 <___svfprintf_internal_r+0x13a0>
   22914:	94800204 	addi	r18,r18,8
   22918:	dac03a17 	ldw	r11,232(sp)
   2291c:	dd4022c4 	addi	r21,sp,139
   22920:	84000044 	addi	r16,r16,1
   22924:	58c7883a 	add	r3,r11,r3
   22928:	95400015 	stw	r21,0(r18)
   2292c:	92c00115 	stw	r11,4(r18)
   22930:	d8c02015 	stw	r3,128(sp)
   22934:	dc001f15 	stw	r16,124(sp)
   22938:	008001c4 	movi	r2,7
   2293c:	14000e16 	blt	r2,r16,22978 <___svfprintf_internal_r+0x1138>
   22940:	92000204 	addi	r8,r18,8
   22944:	003da006 	br	21fc8 <__alt_data_end+0xfffe23f8>
   22948:	010000f4 	movhi	r4,3
   2294c:	210e2a84 	addi	r4,r4,14506
   22950:	d9002b15 	stw	r4,172(sp)
   22954:	dac02b17 	ldw	r11,172(sp)
   22958:	1c07883a 	add	r3,r3,r16
   2295c:	44000115 	stw	r16,4(r8)
   22960:	42c00015 	stw	r11,0(r8)
   22964:	10800044 	addi	r2,r2,1
   22968:	d8c02015 	stw	r3,128(sp)
   2296c:	d8801f15 	stw	r2,124(sp)
   22970:	010001c4 	movi	r4,7
   22974:	20bd930e 	bge	r4,r2,21fc4 <__alt_data_end+0xfffe23f4>
   22978:	d9002f17 	ldw	r4,188(sp)
   2297c:	b80b883a 	mov	r5,r23
   22980:	b00d883a 	mov	r6,r22
   22984:	002aa4c0 	call	2aa4c <__ssprint_r>
   22988:	103c751e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   2298c:	d8c02017 	ldw	r3,128(sp)
   22990:	da000404 	addi	r8,sp,16
   22994:	003d8c06 	br	21fc8 <__alt_data_end+0xfffe23f8>
   22998:	d9002f17 	ldw	r4,188(sp)
   2299c:	b80b883a 	mov	r5,r23
   229a0:	b00d883a 	mov	r6,r22
   229a4:	002aa4c0 	call	2aa4c <__ssprint_r>
   229a8:	103dc326 	beq	r2,zero,220b8 <__alt_data_end+0xfffe24e8>
   229ac:	003c6c06 	br	21b60 <__alt_data_end+0xfffe1f90>
   229b0:	10803fcc 	andi	r2,r2,255
   229b4:	1000201e 	bne	r2,zero,22a38 <___svfprintf_internal_r+0x11f8>
   229b8:	8880004c 	andi	r2,r17,1
   229bc:	10001e26 	beq	r2,zero,22a38 <___svfprintf_internal_r+0x11f8>
   229c0:	00800c04 	movi	r2,48
   229c4:	d8c01dc4 	addi	r3,sp,119
   229c8:	d8801dc5 	stb	r2,119(sp)
   229cc:	dc803d17 	ldw	r18,244(sp)
   229d0:	d8c03115 	stw	r3,196(sp)
   229d4:	003cce06 	br	21d10 <__alt_data_end+0xfffe2140>
   229d8:	d9002f17 	ldw	r4,188(sp)
   229dc:	b80b883a 	mov	r5,r23
   229e0:	b00d883a 	mov	r6,r22
   229e4:	002aa4c0 	call	2aa4c <__ssprint_r>
   229e8:	103c5d1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   229ec:	d8c02017 	ldw	r3,128(sp)
   229f0:	da000404 	addi	r8,sp,16
   229f4:	003d6706 	br	21f94 <__alt_data_end+0xfffe23c4>
   229f8:	d9002f17 	ldw	r4,188(sp)
   229fc:	b80b883a 	mov	r5,r23
   22a00:	b00d883a 	mov	r6,r22
   22a04:	002aa4c0 	call	2aa4c <__ssprint_r>
   22a08:	103c551e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22a0c:	d8c02017 	ldw	r3,128(sp)
   22a10:	da000404 	addi	r8,sp,16
   22a14:	003d1a06 	br	21e80 <__alt_data_end+0xfffe22b0>
   22a18:	d9002f17 	ldw	r4,188(sp)
   22a1c:	b80b883a 	mov	r5,r23
   22a20:	b00d883a 	mov	r6,r22
   22a24:	002aa4c0 	call	2aa4c <__ssprint_r>
   22a28:	103c4d1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22a2c:	d8c02017 	ldw	r3,128(sp)
   22a30:	da000404 	addi	r8,sp,16
   22a34:	003d2006 	br	21eb8 <__alt_data_end+0xfffe22e8>
   22a38:	0025883a 	mov	r18,zero
   22a3c:	dd803115 	stw	r22,196(sp)
   22a40:	003cb306 	br	21d10 <__alt_data_end+0xfffe2140>
   22a44:	dc002617 	ldw	r16,152(sp)
   22a48:	0401480e 	bge	zero,r16,22f6c <___svfprintf_internal_r+0x172c>
   22a4c:	db003117 	ldw	r12,196(sp)
   22a50:	dac03317 	ldw	r11,204(sp)
   22a54:	62e1883a 	add	r16,r12,r11
   22a58:	db003417 	ldw	r12,208(sp)
   22a5c:	5825883a 	mov	r18,r11
   22a60:	62c0010e 	bge	r12,r11,22a68 <___svfprintf_internal_r+0x1228>
   22a64:	6025883a 	mov	r18,r12
   22a68:	04800b0e 	bge	zero,r18,22a98 <___svfprintf_internal_r+0x1258>
   22a6c:	d8801f17 	ldw	r2,124(sp)
   22a70:	dac03117 	ldw	r11,196(sp)
   22a74:	1c87883a 	add	r3,r3,r18
   22a78:	10800044 	addi	r2,r2,1
   22a7c:	42c00015 	stw	r11,0(r8)
   22a80:	44800115 	stw	r18,4(r8)
   22a84:	d8c02015 	stw	r3,128(sp)
   22a88:	d8801f15 	stw	r2,124(sp)
   22a8c:	010001c4 	movi	r4,7
   22a90:	20823f16 	blt	r4,r2,23390 <___svfprintf_internal_r+0x1b50>
   22a94:	42000204 	addi	r8,r8,8
   22a98:	90023b16 	blt	r18,zero,23388 <___svfprintf_internal_r+0x1b48>
   22a9c:	db003417 	ldw	r12,208(sp)
   22aa0:	64a5c83a 	sub	r18,r12,r18
   22aa4:	0480780e 	bge	zero,r18,22c88 <___svfprintf_internal_r+0x1448>
   22aa8:	05400404 	movi	r21,16
   22aac:	d8801f17 	ldw	r2,124(sp)
   22ab0:	ac81140e 	bge	r21,r18,22f04 <___svfprintf_internal_r+0x16c4>
   22ab4:	014000f4 	movhi	r5,3
   22ab8:	294e2a84 	addi	r5,r5,14506
   22abc:	d9402b15 	stw	r5,172(sp)
   22ac0:	070001c4 	movi	fp,7
   22ac4:	dcc02f17 	ldw	r19,188(sp)
   22ac8:	00000306 	br	22ad8 <___svfprintf_internal_r+0x1298>
   22acc:	42000204 	addi	r8,r8,8
   22ad0:	94bffc04 	addi	r18,r18,-16
   22ad4:	ac810e0e 	bge	r21,r18,22f10 <___svfprintf_internal_r+0x16d0>
   22ad8:	18c00404 	addi	r3,r3,16
   22adc:	10800044 	addi	r2,r2,1
   22ae0:	45000015 	stw	r20,0(r8)
   22ae4:	45400115 	stw	r21,4(r8)
   22ae8:	d8c02015 	stw	r3,128(sp)
   22aec:	d8801f15 	stw	r2,124(sp)
   22af0:	e0bff60e 	bge	fp,r2,22acc <__alt_data_end+0xfffe2efc>
   22af4:	9809883a 	mov	r4,r19
   22af8:	b80b883a 	mov	r5,r23
   22afc:	b00d883a 	mov	r6,r22
   22b00:	002aa4c0 	call	2aa4c <__ssprint_r>
   22b04:	103c161e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22b08:	d8c02017 	ldw	r3,128(sp)
   22b0c:	d8801f17 	ldw	r2,124(sp)
   22b10:	da000404 	addi	r8,sp,16
   22b14:	003fee06 	br	22ad0 <__alt_data_end+0xfffe2f00>
   22b18:	d9002f17 	ldw	r4,188(sp)
   22b1c:	b80b883a 	mov	r5,r23
   22b20:	b00d883a 	mov	r6,r22
   22b24:	002aa4c0 	call	2aa4c <__ssprint_r>
   22b28:	103c0d1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22b2c:	d8c02017 	ldw	r3,128(sp)
   22b30:	d8802787 	ldb	r2,158(sp)
   22b34:	da000404 	addi	r8,sp,16
   22b38:	003cc406 	br	21e4c <__alt_data_end+0xfffe227c>
   22b3c:	657fffc4 	addi	r21,r12,-1
   22b40:	057f750e 	bge	zero,r21,22918 <__alt_data_end+0xfffe2d48>
   22b44:	07000404 	movi	fp,16
   22b48:	e542ef0e 	bge	fp,r21,23708 <___svfprintf_internal_r+0x1ec8>
   22b4c:	010000f4 	movhi	r4,3
   22b50:	210e2a84 	addi	r4,r4,14506
   22b54:	d9002b15 	stw	r4,172(sp)
   22b58:	01c001c4 	movi	r7,7
   22b5c:	dcc02f17 	ldw	r19,188(sp)
   22b60:	00000306 	br	22b70 <___svfprintf_internal_r+0x1330>
   22b64:	ad7ffc04 	addi	r21,r21,-16
   22b68:	94800204 	addi	r18,r18,8
   22b6c:	e540130e 	bge	fp,r21,22bbc <___svfprintf_internal_r+0x137c>
   22b70:	18c00404 	addi	r3,r3,16
   22b74:	84000044 	addi	r16,r16,1
   22b78:	95000015 	stw	r20,0(r18)
   22b7c:	97000115 	stw	fp,4(r18)
   22b80:	d8c02015 	stw	r3,128(sp)
   22b84:	dc001f15 	stw	r16,124(sp)
   22b88:	3c3ff60e 	bge	r7,r16,22b64 <__alt_data_end+0xfffe2f94>
   22b8c:	9809883a 	mov	r4,r19
   22b90:	b80b883a 	mov	r5,r23
   22b94:	b00d883a 	mov	r6,r22
   22b98:	d9c03e15 	stw	r7,248(sp)
   22b9c:	002aa4c0 	call	2aa4c <__ssprint_r>
   22ba0:	d9c03e17 	ldw	r7,248(sp)
   22ba4:	103bee1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22ba8:	ad7ffc04 	addi	r21,r21,-16
   22bac:	d8c02017 	ldw	r3,128(sp)
   22bb0:	dc001f17 	ldw	r16,124(sp)
   22bb4:	dc800404 	addi	r18,sp,16
   22bb8:	e57fed16 	blt	fp,r21,22b70 <__alt_data_end+0xfffe2fa0>
   22bbc:	dac02b17 	ldw	r11,172(sp)
   22bc0:	1d47883a 	add	r3,r3,r21
   22bc4:	84000044 	addi	r16,r16,1
   22bc8:	92c00015 	stw	r11,0(r18)
   22bcc:	95400115 	stw	r21,4(r18)
   22bd0:	d8c02015 	stw	r3,128(sp)
   22bd4:	dc001f15 	stw	r16,124(sp)
   22bd8:	008001c4 	movi	r2,7
   22bdc:	143f4d0e 	bge	r2,r16,22914 <__alt_data_end+0xfffe2d44>
   22be0:	d9002f17 	ldw	r4,188(sp)
   22be4:	b80b883a 	mov	r5,r23
   22be8:	b00d883a 	mov	r6,r22
   22bec:	002aa4c0 	call	2aa4c <__ssprint_r>
   22bf0:	103bdb1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22bf4:	d8c02017 	ldw	r3,128(sp)
   22bf8:	dc001f17 	ldw	r16,124(sp)
   22bfc:	dc800404 	addi	r18,sp,16
   22c00:	003f4506 	br	22918 <__alt_data_end+0xfffe2d48>
   22c04:	00800084 	movi	r2,2
   22c08:	9f06b03a 	or	r3,r19,fp
   22c0c:	003d3806 	br	220f0 <__alt_data_end+0xfffe2520>
   22c10:	dac02d17 	ldw	r11,180(sp)
   22c14:	0039883a 	mov	fp,zero
   22c18:	0005883a 	mov	r2,zero
   22c1c:	5cc00017 	ldw	r19,0(r11)
   22c20:	5ac00104 	addi	r11,r11,4
   22c24:	dac02d15 	stw	r11,180(sp)
   22c28:	9807883a 	mov	r3,r19
   22c2c:	003d3006 	br	220f0 <__alt_data_end+0xfffe2520>
   22c30:	1cc00017 	ldw	r19,0(r3)
   22c34:	dac02d17 	ldw	r11,180(sp)
   22c38:	9839d7fa 	srai	fp,r19,31
   22c3c:	5ac00104 	addi	r11,r11,4
   22c40:	dac02d15 	stw	r11,180(sp)
   22c44:	e005883a 	mov	r2,fp
   22c48:	003c0a06 	br	21c74 <__alt_data_end+0xfffe20a4>
   22c4c:	db002d17 	ldw	r12,180(sp)
   22c50:	0039883a 	mov	fp,zero
   22c54:	00800044 	movi	r2,1
   22c58:	64c00017 	ldw	r19,0(r12)
   22c5c:	63000104 	addi	r12,r12,4
   22c60:	db002d15 	stw	r12,180(sp)
   22c64:	9807883a 	mov	r3,r19
   22c68:	003d2106 	br	220f0 <__alt_data_end+0xfffe2520>
   22c6c:	d9002f17 	ldw	r4,188(sp)
   22c70:	b80b883a 	mov	r5,r23
   22c74:	b00d883a 	mov	r6,r22
   22c78:	002aa4c0 	call	2aa4c <__ssprint_r>
   22c7c:	103bb81e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22c80:	d8c02017 	ldw	r3,128(sp)
   22c84:	da000404 	addi	r8,sp,16
   22c88:	db003117 	ldw	r12,196(sp)
   22c8c:	dac03417 	ldw	r11,208(sp)
   22c90:	d8802617 	ldw	r2,152(sp)
   22c94:	62e5883a 	add	r18,r12,r11
   22c98:	db003317 	ldw	r12,204(sp)
   22c9c:	13000216 	blt	r2,r12,22ca8 <___svfprintf_internal_r+0x1468>
   22ca0:	8900004c 	andi	r4,r17,1
   22ca4:	20000c26 	beq	r4,zero,22cd8 <___svfprintf_internal_r+0x1498>
   22ca8:	dac03917 	ldw	r11,228(sp)
   22cac:	d9001f17 	ldw	r4,124(sp)
   22cb0:	db003517 	ldw	r12,212(sp)
   22cb4:	1ac7883a 	add	r3,r3,r11
   22cb8:	21000044 	addi	r4,r4,1
   22cbc:	43000015 	stw	r12,0(r8)
   22cc0:	42c00115 	stw	r11,4(r8)
   22cc4:	d8c02015 	stw	r3,128(sp)
   22cc8:	d9001f15 	stw	r4,124(sp)
   22ccc:	014001c4 	movi	r5,7
   22cd0:	2901b716 	blt	r5,r4,233b0 <___svfprintf_internal_r+0x1b70>
   22cd4:	42000204 	addi	r8,r8,8
   22cd8:	dac03317 	ldw	r11,204(sp)
   22cdc:	8489c83a 	sub	r4,r16,r18
   22ce0:	5885c83a 	sub	r2,r11,r2
   22ce4:	1021883a 	mov	r16,r2
   22ce8:	2080010e 	bge	r4,r2,22cf0 <___svfprintf_internal_r+0x14b0>
   22cec:	2021883a 	mov	r16,r4
   22cf0:	04000a0e 	bge	zero,r16,22d1c <___svfprintf_internal_r+0x14dc>
   22cf4:	d9001f17 	ldw	r4,124(sp)
   22cf8:	1c07883a 	add	r3,r3,r16
   22cfc:	44800015 	stw	r18,0(r8)
   22d00:	21000044 	addi	r4,r4,1
   22d04:	44000115 	stw	r16,4(r8)
   22d08:	d8c02015 	stw	r3,128(sp)
   22d0c:	d9001f15 	stw	r4,124(sp)
   22d10:	014001c4 	movi	r5,7
   22d14:	2901bf16 	blt	r5,r4,23414 <___svfprintf_internal_r+0x1bd4>
   22d18:	42000204 	addi	r8,r8,8
   22d1c:	8001bb16 	blt	r16,zero,2340c <___svfprintf_internal_r+0x1bcc>
   22d20:	1421c83a 	sub	r16,r2,r16
   22d24:	043ca80e 	bge	zero,r16,21fc8 <__alt_data_end+0xfffe23f8>
   22d28:	04800404 	movi	r18,16
   22d2c:	d8801f17 	ldw	r2,124(sp)
   22d30:	943f050e 	bge	r18,r16,22948 <__alt_data_end+0xfffe2d78>
   22d34:	014000f4 	movhi	r5,3
   22d38:	294e2a84 	addi	r5,r5,14506
   22d3c:	d9402b15 	stw	r5,172(sp)
   22d40:	054001c4 	movi	r21,7
   22d44:	dcc02f17 	ldw	r19,188(sp)
   22d48:	00000306 	br	22d58 <___svfprintf_internal_r+0x1518>
   22d4c:	42000204 	addi	r8,r8,8
   22d50:	843ffc04 	addi	r16,r16,-16
   22d54:	943eff0e 	bge	r18,r16,22954 <__alt_data_end+0xfffe2d84>
   22d58:	18c00404 	addi	r3,r3,16
   22d5c:	10800044 	addi	r2,r2,1
   22d60:	45000015 	stw	r20,0(r8)
   22d64:	44800115 	stw	r18,4(r8)
   22d68:	d8c02015 	stw	r3,128(sp)
   22d6c:	d8801f15 	stw	r2,124(sp)
   22d70:	a8bff60e 	bge	r21,r2,22d4c <__alt_data_end+0xfffe317c>
   22d74:	9809883a 	mov	r4,r19
   22d78:	b80b883a 	mov	r5,r23
   22d7c:	b00d883a 	mov	r6,r22
   22d80:	002aa4c0 	call	2aa4c <__ssprint_r>
   22d84:	103b761e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22d88:	d8c02017 	ldw	r3,128(sp)
   22d8c:	d8801f17 	ldw	r2,124(sp)
   22d90:	da000404 	addi	r8,sp,16
   22d94:	003fee06 	br	22d50 <__alt_data_end+0xfffe3180>
   22d98:	8888703a 	and	r4,r17,r2
   22d9c:	203eb31e 	bne	r4,zero,2286c <__alt_data_end+0xfffe2c9c>
   22da0:	dc001f17 	ldw	r16,124(sp)
   22da4:	db003117 	ldw	r12,196(sp)
   22da8:	40800115 	stw	r2,4(r8)
   22dac:	84000044 	addi	r16,r16,1
   22db0:	43000015 	stw	r12,0(r8)
   22db4:	d8c02015 	stw	r3,128(sp)
   22db8:	dc001f15 	stw	r16,124(sp)
   22dbc:	008001c4 	movi	r2,7
   22dc0:	143f8716 	blt	r2,r16,22be0 <__alt_data_end+0xfffe3010>
   22dc4:	44800204 	addi	r18,r8,8
   22dc8:	003ed306 	br	22918 <__alt_data_end+0xfffe2d48>
   22dcc:	d9002f17 	ldw	r4,188(sp)
   22dd0:	b80b883a 	mov	r5,r23
   22dd4:	b00d883a 	mov	r6,r22
   22dd8:	002aa4c0 	call	2aa4c <__ssprint_r>
   22ddc:	103b601e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22de0:	d8c02017 	ldw	r3,128(sp)
   22de4:	dc001f17 	ldw	r16,124(sp)
   22de8:	da000404 	addi	r8,sp,16
   22dec:	003eaa06 	br	22898 <__alt_data_end+0xfffe2cc8>
   22df0:	d9002f17 	ldw	r4,188(sp)
   22df4:	b80b883a 	mov	r5,r23
   22df8:	b00d883a 	mov	r6,r22
   22dfc:	002aa4c0 	call	2aa4c <__ssprint_r>
   22e00:	103b571e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22e04:	d8c02017 	ldw	r3,128(sp)
   22e08:	dc001f17 	ldw	r16,124(sp)
   22e0c:	dc800404 	addi	r18,sp,16
   22e10:	003eac06 	br	228c4 <__alt_data_end+0xfffe2cf4>
   22e14:	d9002f17 	ldw	r4,188(sp)
   22e18:	b80b883a 	mov	r5,r23
   22e1c:	b00d883a 	mov	r6,r22
   22e20:	002aa4c0 	call	2aa4c <__ssprint_r>
   22e24:	103b4e1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22e28:	d8c02017 	ldw	r3,128(sp)
   22e2c:	da000404 	addi	r8,sp,16
   22e30:	003c2406 	br	21ec4 <__alt_data_end+0xfffe22f4>
   22e34:	da004015 	stw	r8,256(sp)
   22e38:	da403f15 	stw	r9,252(sp)
   22e3c:	002a7a40 	call	2a7a4 <__fpclassifyd>
   22e40:	da004017 	ldw	r8,256(sp)
   22e44:	da403f17 	ldw	r9,252(sp)
   22e48:	1000951e 	bne	r2,zero,230a0 <___svfprintf_internal_r+0x1860>
   22e4c:	008011c4 	movi	r2,71
   22e50:	1400fb16 	blt	r2,r16,23240 <___svfprintf_internal_r+0x1a00>
   22e54:	030000f4 	movhi	r12,3
   22e58:	630e1c04 	addi	r12,r12,14448
   22e5c:	db003115 	stw	r12,196(sp)
   22e60:	00c000c4 	movi	r3,3
   22e64:	00bfdfc4 	movi	r2,-129
   22e68:	d8c02a15 	stw	r3,168(sp)
   22e6c:	88a2703a 	and	r17,r17,r2
   22e70:	dd402783 	ldbu	r21,158(sp)
   22e74:	dcc02d15 	stw	r19,180(sp)
   22e78:	1825883a 	mov	r18,r3
   22e7c:	d8003215 	stw	zero,200(sp)
   22e80:	d8003415 	stw	zero,208(sp)
   22e84:	003ba706 	br	21d24 <__alt_data_end+0xfffe2154>
   22e88:	8880040c 	andi	r2,r17,16
   22e8c:	1000091e 	bne	r2,zero,22eb4 <___svfprintf_internal_r+0x1674>
   22e90:	8c40100c 	andi	r17,r17,64
   22e94:	88000726 	beq	r17,zero,22eb4 <___svfprintf_internal_r+0x1674>
   22e98:	db002d17 	ldw	r12,180(sp)
   22e9c:	dac03017 	ldw	r11,192(sp)
   22ea0:	60800017 	ldw	r2,0(r12)
   22ea4:	63000104 	addi	r12,r12,4
   22ea8:	db002d15 	stw	r12,180(sp)
   22eac:	12c0000d 	sth	r11,0(r2)
   22eb0:	003a8f06 	br	218f0 <__alt_data_end+0xfffe1d20>
   22eb4:	db002d17 	ldw	r12,180(sp)
   22eb8:	dac03017 	ldw	r11,192(sp)
   22ebc:	60800017 	ldw	r2,0(r12)
   22ec0:	63000104 	addi	r12,r12,4
   22ec4:	db002d15 	stw	r12,180(sp)
   22ec8:	12c00015 	stw	r11,0(r2)
   22ecc:	003a8806 	br	218f0 <__alt_data_end+0xfffe1d20>
   22ed0:	88c0100c 	andi	r3,r17,64
   22ed4:	1800e926 	beq	r3,zero,2327c <___svfprintf_internal_r+0x1a3c>
   22ed8:	dac02d17 	ldw	r11,180(sp)
   22edc:	14c0000b 	ldhu	r19,0(r2)
   22ee0:	0039883a 	mov	fp,zero
   22ee4:	5ac00104 	addi	r11,r11,4
   22ee8:	dac02d15 	stw	r11,180(sp)
   22eec:	003d1406 	br	22340 <__alt_data_end+0xfffe2770>
   22ef0:	1c000007 	ldb	r16,0(r3)
   22ef4:	1805883a 	mov	r2,r3
   22ef8:	003aa706 	br	21998 <__alt_data_end+0xfffe1dc8>
   22efc:	00800084 	movi	r2,2
   22f00:	003c7b06 	br	220f0 <__alt_data_end+0xfffe2520>
   22f04:	010000f4 	movhi	r4,3
   22f08:	210e2a84 	addi	r4,r4,14506
   22f0c:	d9002b15 	stw	r4,172(sp)
   22f10:	dac02b17 	ldw	r11,172(sp)
   22f14:	1c87883a 	add	r3,r3,r18
   22f18:	10800044 	addi	r2,r2,1
   22f1c:	42c00015 	stw	r11,0(r8)
   22f20:	44800115 	stw	r18,4(r8)
   22f24:	d8c02015 	stw	r3,128(sp)
   22f28:	d8801f15 	stw	r2,124(sp)
   22f2c:	010001c4 	movi	r4,7
   22f30:	20bf4e16 	blt	r4,r2,22c6c <__alt_data_end+0xfffe309c>
   22f34:	42000204 	addi	r8,r8,8
   22f38:	003f5306 	br	22c88 <__alt_data_end+0xfffe30b8>
   22f3c:	010000f4 	movhi	r4,3
   22f40:	210e2a84 	addi	r4,r4,14506
   22f44:	d9002b15 	stw	r4,172(sp)
   22f48:	003c0806 	br	21f6c <__alt_data_end+0xfffe239c>
   22f4c:	d9002f17 	ldw	r4,188(sp)
   22f50:	b80b883a 	mov	r5,r23
   22f54:	b00d883a 	mov	r6,r22
   22f58:	002aa4c0 	call	2aa4c <__ssprint_r>
   22f5c:	103b001e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   22f60:	d8c02017 	ldw	r3,128(sp)
   22f64:	da000404 	addi	r8,sp,16
   22f68:	003dc606 	br	22684 <__alt_data_end+0xfffe2ab4>
   22f6c:	d8801f17 	ldw	r2,124(sp)
   22f70:	030000f4 	movhi	r12,3
   22f74:	01000044 	movi	r4,1
   22f78:	18c00044 	addi	r3,r3,1
   22f7c:	10800044 	addi	r2,r2,1
   22f80:	630e2a04 	addi	r12,r12,14504
   22f84:	41000115 	stw	r4,4(r8)
   22f88:	43000015 	stw	r12,0(r8)
   22f8c:	d8c02015 	stw	r3,128(sp)
   22f90:	d8801f15 	stw	r2,124(sp)
   22f94:	010001c4 	movi	r4,7
   22f98:	2080ad16 	blt	r4,r2,23250 <___svfprintf_internal_r+0x1a10>
   22f9c:	42000204 	addi	r8,r8,8
   22fa0:	8000041e 	bne	r16,zero,22fb4 <___svfprintf_internal_r+0x1774>
   22fa4:	dac03317 	ldw	r11,204(sp)
   22fa8:	5800021e 	bne	r11,zero,22fb4 <___svfprintf_internal_r+0x1774>
   22fac:	8880004c 	andi	r2,r17,1
   22fb0:	103c0526 	beq	r2,zero,21fc8 <__alt_data_end+0xfffe23f8>
   22fb4:	db003917 	ldw	r12,228(sp)
   22fb8:	d8801f17 	ldw	r2,124(sp)
   22fbc:	dac03517 	ldw	r11,212(sp)
   22fc0:	1b07883a 	add	r3,r3,r12
   22fc4:	10800044 	addi	r2,r2,1
   22fc8:	42c00015 	stw	r11,0(r8)
   22fcc:	43000115 	stw	r12,4(r8)
   22fd0:	d8c02015 	stw	r3,128(sp)
   22fd4:	d8801f15 	stw	r2,124(sp)
   22fd8:	010001c4 	movi	r4,7
   22fdc:	20818816 	blt	r4,r2,23600 <___svfprintf_internal_r+0x1dc0>
   22fe0:	42000204 	addi	r8,r8,8
   22fe4:	0421c83a 	sub	r16,zero,r16
   22fe8:	0400bc0e 	bge	zero,r16,232dc <___svfprintf_internal_r+0x1a9c>
   22fec:	04800404 	movi	r18,16
   22ff0:	9400f80e 	bge	r18,r16,233d4 <___svfprintf_internal_r+0x1b94>
   22ff4:	010000f4 	movhi	r4,3
   22ff8:	210e2a84 	addi	r4,r4,14506
   22ffc:	d9002b15 	stw	r4,172(sp)
   23000:	054001c4 	movi	r21,7
   23004:	dcc02f17 	ldw	r19,188(sp)
   23008:	00000306 	br	23018 <___svfprintf_internal_r+0x17d8>
   2300c:	42000204 	addi	r8,r8,8
   23010:	843ffc04 	addi	r16,r16,-16
   23014:	9400f20e 	bge	r18,r16,233e0 <___svfprintf_internal_r+0x1ba0>
   23018:	18c00404 	addi	r3,r3,16
   2301c:	10800044 	addi	r2,r2,1
   23020:	45000015 	stw	r20,0(r8)
   23024:	44800115 	stw	r18,4(r8)
   23028:	d8c02015 	stw	r3,128(sp)
   2302c:	d8801f15 	stw	r2,124(sp)
   23030:	a8bff60e 	bge	r21,r2,2300c <__alt_data_end+0xfffe343c>
   23034:	9809883a 	mov	r4,r19
   23038:	b80b883a 	mov	r5,r23
   2303c:	b00d883a 	mov	r6,r22
   23040:	002aa4c0 	call	2aa4c <__ssprint_r>
   23044:	103ac61e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   23048:	d8c02017 	ldw	r3,128(sp)
   2304c:	d8801f17 	ldw	r2,124(sp)
   23050:	da000404 	addi	r8,sp,16
   23054:	003fee06 	br	23010 <__alt_data_end+0xfffe3440>
   23058:	db002e17 	ldw	r12,184(sp)
   2305c:	1805883a 	mov	r2,r3
   23060:	dac02d15 	stw	r11,180(sp)
   23064:	0319c83a 	sub	r12,zero,r12
   23068:	db002e15 	stw	r12,184(sp)
   2306c:	003ad106 	br	21bb4 <__alt_data_end+0xfffe1fe4>
   23070:	18800044 	addi	r2,r3,1
   23074:	8c400814 	ori	r17,r17,32
   23078:	1c000047 	ldb	r16,1(r3)
   2307c:	003a4606 	br	21998 <__alt_data_end+0xfffe1dc8>
   23080:	d9002f17 	ldw	r4,188(sp)
   23084:	b80b883a 	mov	r5,r23
   23088:	b00d883a 	mov	r6,r22
   2308c:	002aa4c0 	call	2aa4c <__ssprint_r>
   23090:	103ab31e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   23094:	d8c02017 	ldw	r3,128(sp)
   23098:	da000404 	addi	r8,sp,16
   2309c:	003d8a06 	br	226c8 <__alt_data_end+0xfffe2af8>
   230a0:	057ff7c4 	movi	r21,-33
   230a4:	00bfffc4 	movi	r2,-1
   230a8:	856a703a 	and	r21,r16,r21
   230ac:	48807126 	beq	r9,r2,23274 <___svfprintf_internal_r+0x1a34>
   230b0:	008011c4 	movi	r2,71
   230b4:	a8814f26 	beq	r21,r2,235f4 <___svfprintf_internal_r+0x1db4>
   230b8:	db003817 	ldw	r12,224(sp)
   230bc:	8ac04014 	ori	r11,r17,256
   230c0:	dac02d15 	stw	r11,180(sp)
   230c4:	60015816 	blt	r12,zero,23628 <___svfprintf_internal_r+0x1de8>
   230c8:	dc803817 	ldw	r18,224(sp)
   230cc:	d8002a05 	stb	zero,168(sp)
   230d0:	00801984 	movi	r2,102
   230d4:	80808c26 	beq	r16,r2,23308 <___svfprintf_internal_r+0x1ac8>
   230d8:	00801184 	movi	r2,70
   230dc:	80808a26 	beq	r16,r2,23308 <___svfprintf_internal_r+0x1ac8>
   230e0:	00801144 	movi	r2,69
   230e4:	a8815426 	beq	r21,r2,23638 <___svfprintf_internal_r+0x1df8>
   230e8:	4839883a 	mov	fp,r9
   230ec:	d8802604 	addi	r2,sp,152
   230f0:	d8800115 	stw	r2,4(sp)
   230f4:	d9002f17 	ldw	r4,188(sp)
   230f8:	d8802504 	addi	r2,sp,148
   230fc:	d9403717 	ldw	r5,220(sp)
   23100:	d8800215 	stw	r2,8(sp)
   23104:	d8802104 	addi	r2,sp,132
   23108:	df000015 	stw	fp,0(sp)
   2310c:	d8800315 	stw	r2,12(sp)
   23110:	900d883a 	mov	r6,r18
   23114:	01c00084 	movi	r7,2
   23118:	da004015 	stw	r8,256(sp)
   2311c:	da403f15 	stw	r9,252(sp)
   23120:	0025c500 	call	25c50 <_dtoa_r>
   23124:	d8803115 	stw	r2,196(sp)
   23128:	008019c4 	movi	r2,103
   2312c:	da004017 	ldw	r8,256(sp)
   23130:	da403f17 	ldw	r9,252(sp)
   23134:	80800226 	beq	r16,r2,23140 <___svfprintf_internal_r+0x1900>
   23138:	008011c4 	movi	r2,71
   2313c:	8080841e 	bne	r16,r2,23350 <___svfprintf_internal_r+0x1b10>
   23140:	8880004c 	andi	r2,r17,1
   23144:	10015126 	beq	r2,zero,2368c <___svfprintf_internal_r+0x1e4c>
   23148:	db003117 	ldw	r12,196(sp)
   2314c:	6715883a 	add	r10,r12,fp
   23150:	d9003717 	ldw	r4,220(sp)
   23154:	900b883a 	mov	r5,r18
   23158:	000d883a 	mov	r6,zero
   2315c:	000f883a 	mov	r7,zero
   23160:	da004015 	stw	r8,256(sp)
   23164:	da403f15 	stw	r9,252(sp)
   23168:	da803e15 	stw	r10,248(sp)
   2316c:	002f82c0 	call	2f82c <__eqdf2>
   23170:	da004017 	ldw	r8,256(sp)
   23174:	da403f17 	ldw	r9,252(sp)
   23178:	da803e17 	ldw	r10,248(sp)
   2317c:	1000d926 	beq	r2,zero,234e4 <___svfprintf_internal_r+0x1ca4>
   23180:	d8802117 	ldw	r2,132(sp)
   23184:	1280062e 	bgeu	r2,r10,231a0 <___svfprintf_internal_r+0x1960>
   23188:	01000c04 	movi	r4,48
   2318c:	10c00044 	addi	r3,r2,1
   23190:	d8c02115 	stw	r3,132(sp)
   23194:	11000005 	stb	r4,0(r2)
   23198:	d8802117 	ldw	r2,132(sp)
   2319c:	12bffb36 	bltu	r2,r10,2318c <__alt_data_end+0xfffe35bc>
   231a0:	db003117 	ldw	r12,196(sp)
   231a4:	1305c83a 	sub	r2,r2,r12
   231a8:	d8803315 	stw	r2,204(sp)
   231ac:	008011c4 	movi	r2,71
   231b0:	a880b626 	beq	r21,r2,2348c <___svfprintf_internal_r+0x1c4c>
   231b4:	00801944 	movi	r2,101
   231b8:	14017e0e 	bge	r2,r16,237b4 <___svfprintf_internal_r+0x1f74>
   231bc:	00801984 	movi	r2,102
   231c0:	80812826 	beq	r16,r2,23664 <___svfprintf_internal_r+0x1e24>
   231c4:	db002617 	ldw	r12,152(sp)
   231c8:	db003415 	stw	r12,208(sp)
   231cc:	db003417 	ldw	r12,208(sp)
   231d0:	dac03317 	ldw	r11,204(sp)
   231d4:	62c11a16 	blt	r12,r11,23640 <___svfprintf_internal_r+0x1e00>
   231d8:	8c40004c 	andi	r17,r17,1
   231dc:	88013d1e 	bne	r17,zero,236d4 <___svfprintf_internal_r+0x1e94>
   231e0:	6005883a 	mov	r2,r12
   231e4:	60012716 	blt	r12,zero,23684 <___svfprintf_internal_r+0x1e44>
   231e8:	dc803417 	ldw	r18,208(sp)
   231ec:	df002a07 	ldb	fp,168(sp)
   231f0:	e000b01e 	bne	fp,zero,234b4 <___svfprintf_internal_r+0x1c74>
   231f4:	dc402d17 	ldw	r17,180(sp)
   231f8:	dd402783 	ldbu	r21,158(sp)
   231fc:	d8802a15 	stw	r2,168(sp)
   23200:	dcc02d15 	stw	r19,180(sp)
   23204:	d8003215 	stw	zero,200(sp)
   23208:	003ac606 	br	21d24 <__alt_data_end+0xfffe2154>
   2320c:	008000f4 	movhi	r2,3
   23210:	108e1a04 	addi	r2,r2,14440
   23214:	d8803115 	stw	r2,196(sp)
   23218:	003be506 	br	221b0 <__alt_data_end+0xfffe25e0>
   2321c:	d9002f17 	ldw	r4,188(sp)
   23220:	04001004 	movi	r16,64
   23224:	800b883a 	mov	r5,r16
   23228:	00286300 	call	28630 <_malloc_r>
   2322c:	b8800015 	stw	r2,0(r23)
   23230:	b8800415 	stw	r2,16(r23)
   23234:	10016126 	beq	r2,zero,237bc <___svfprintf_internal_r+0x1f7c>
   23238:	bc000515 	stw	r16,20(r23)
   2323c:	00399a06 	br	218a8 <__alt_data_end+0xfffe1cd8>
   23240:	008000f4 	movhi	r2,3
   23244:	108e1d04 	addi	r2,r2,14452
   23248:	d8803115 	stw	r2,196(sp)
   2324c:	003f0406 	br	22e60 <__alt_data_end+0xfffe3290>
   23250:	d9002f17 	ldw	r4,188(sp)
   23254:	b80b883a 	mov	r5,r23
   23258:	b00d883a 	mov	r6,r22
   2325c:	002aa4c0 	call	2aa4c <__ssprint_r>
   23260:	103a3f1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   23264:	dc002617 	ldw	r16,152(sp)
   23268:	d8c02017 	ldw	r3,128(sp)
   2326c:	da000404 	addi	r8,sp,16
   23270:	003f4b06 	br	22fa0 <__alt_data_end+0xfffe33d0>
   23274:	02400184 	movi	r9,6
   23278:	003f8f06 	br	230b8 <__alt_data_end+0xfffe34e8>
   2327c:	db002d17 	ldw	r12,180(sp)
   23280:	14c00017 	ldw	r19,0(r2)
   23284:	0039883a 	mov	fp,zero
   23288:	63000104 	addi	r12,r12,4
   2328c:	db002d15 	stw	r12,180(sp)
   23290:	003c2b06 	br	22340 <__alt_data_end+0xfffe2770>
   23294:	d8c03117 	ldw	r3,196(sp)
   23298:	b0e5c83a 	sub	r18,r22,r3
   2329c:	003a9c06 	br	21d10 <__alt_data_end+0xfffe2140>
   232a0:	da004015 	stw	r8,256(sp)
   232a4:	00217a80 	call	217a8 <strlen>
   232a8:	1025883a 	mov	r18,r2
   232ac:	da004017 	ldw	r8,256(sp)
   232b0:	903c450e 	bge	r18,zero,223c8 <__alt_data_end+0xfffe27f8>
   232b4:	0005883a 	mov	r2,zero
   232b8:	003c4306 	br	223c8 <__alt_data_end+0xfffe27f8>
   232bc:	d9002f17 	ldw	r4,188(sp)
   232c0:	b80b883a 	mov	r5,r23
   232c4:	b00d883a 	mov	r6,r22
   232c8:	002aa4c0 	call	2aa4c <__ssprint_r>
   232cc:	103a241e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   232d0:	d8c02017 	ldw	r3,128(sp)
   232d4:	d8801f17 	ldw	r2,124(sp)
   232d8:	da000404 	addi	r8,sp,16
   232dc:	db003317 	ldw	r12,204(sp)
   232e0:	dac03117 	ldw	r11,196(sp)
   232e4:	10800044 	addi	r2,r2,1
   232e8:	60c7883a 	add	r3,r12,r3
   232ec:	42c00015 	stw	r11,0(r8)
   232f0:	43000115 	stw	r12,4(r8)
   232f4:	d8c02015 	stw	r3,128(sp)
   232f8:	d8801f15 	stw	r2,124(sp)
   232fc:	010001c4 	movi	r4,7
   23300:	20bb300e 	bge	r4,r2,21fc4 <__alt_data_end+0xfffe23f4>
   23304:	003d9c06 	br	22978 <__alt_data_end+0xfffe2da8>
   23308:	d8802604 	addi	r2,sp,152
   2330c:	d8800115 	stw	r2,4(sp)
   23310:	d9002f17 	ldw	r4,188(sp)
   23314:	d8802504 	addi	r2,sp,148
   23318:	d9403717 	ldw	r5,220(sp)
   2331c:	d8800215 	stw	r2,8(sp)
   23320:	d8802104 	addi	r2,sp,132
   23324:	da400015 	stw	r9,0(sp)
   23328:	d8800315 	stw	r2,12(sp)
   2332c:	900d883a 	mov	r6,r18
   23330:	01c000c4 	movi	r7,3
   23334:	da004015 	stw	r8,256(sp)
   23338:	da403f15 	stw	r9,252(sp)
   2333c:	0025c500 	call	25c50 <_dtoa_r>
   23340:	da403f17 	ldw	r9,252(sp)
   23344:	da004017 	ldw	r8,256(sp)
   23348:	d8803115 	stw	r2,196(sp)
   2334c:	4839883a 	mov	fp,r9
   23350:	dac03117 	ldw	r11,196(sp)
   23354:	00801184 	movi	r2,70
   23358:	5f15883a 	add	r10,r11,fp
   2335c:	a8bf7c1e 	bne	r21,r2,23150 <__alt_data_end+0xfffe3580>
   23360:	59000007 	ldb	r4,0(r11)
   23364:	00800c04 	movi	r2,48
   23368:	2080ca26 	beq	r4,r2,23694 <___svfprintf_internal_r+0x1e54>
   2336c:	d8c02617 	ldw	r3,152(sp)
   23370:	50d5883a 	add	r10,r10,r3
   23374:	003f7606 	br	23150 <__alt_data_end+0xfffe3580>
   23378:	010000f4 	movhi	r4,3
   2337c:	210e2e84 	addi	r4,r4,14522
   23380:	d9003615 	stw	r4,216(sp)
   23384:	003aa606 	br	21e20 <__alt_data_end+0xfffe2250>
   23388:	0025883a 	mov	r18,zero
   2338c:	003dc306 	br	22a9c <__alt_data_end+0xfffe2ecc>
   23390:	d9002f17 	ldw	r4,188(sp)
   23394:	b80b883a 	mov	r5,r23
   23398:	b00d883a 	mov	r6,r22
   2339c:	002aa4c0 	call	2aa4c <__ssprint_r>
   233a0:	1039ef1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   233a4:	d8c02017 	ldw	r3,128(sp)
   233a8:	da000404 	addi	r8,sp,16
   233ac:	003dba06 	br	22a98 <__alt_data_end+0xfffe2ec8>
   233b0:	d9002f17 	ldw	r4,188(sp)
   233b4:	b80b883a 	mov	r5,r23
   233b8:	b00d883a 	mov	r6,r22
   233bc:	002aa4c0 	call	2aa4c <__ssprint_r>
   233c0:	1039e71e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   233c4:	d8802617 	ldw	r2,152(sp)
   233c8:	d8c02017 	ldw	r3,128(sp)
   233cc:	da000404 	addi	r8,sp,16
   233d0:	003e4106 	br	22cd8 <__alt_data_end+0xfffe3108>
   233d4:	030000f4 	movhi	r12,3
   233d8:	630e2a84 	addi	r12,r12,14506
   233dc:	db002b15 	stw	r12,172(sp)
   233e0:	dac02b17 	ldw	r11,172(sp)
   233e4:	1c07883a 	add	r3,r3,r16
   233e8:	10800044 	addi	r2,r2,1
   233ec:	42c00015 	stw	r11,0(r8)
   233f0:	44000115 	stw	r16,4(r8)
   233f4:	d8c02015 	stw	r3,128(sp)
   233f8:	d8801f15 	stw	r2,124(sp)
   233fc:	010001c4 	movi	r4,7
   23400:	20bfae16 	blt	r4,r2,232bc <__alt_data_end+0xfffe36ec>
   23404:	42000204 	addi	r8,r8,8
   23408:	003fb406 	br	232dc <__alt_data_end+0xfffe370c>
   2340c:	0021883a 	mov	r16,zero
   23410:	003e4306 	br	22d20 <__alt_data_end+0xfffe3150>
   23414:	d9002f17 	ldw	r4,188(sp)
   23418:	b80b883a 	mov	r5,r23
   2341c:	b00d883a 	mov	r6,r22
   23420:	002aa4c0 	call	2aa4c <__ssprint_r>
   23424:	1039ce1e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   23428:	d8802617 	ldw	r2,152(sp)
   2342c:	db003317 	ldw	r12,204(sp)
   23430:	d8c02017 	ldw	r3,128(sp)
   23434:	da000404 	addi	r8,sp,16
   23438:	6085c83a 	sub	r2,r12,r2
   2343c:	003e3706 	br	22d1c <__alt_data_end+0xfffe314c>
   23440:	00800184 	movi	r2,6
   23444:	1240012e 	bgeu	r2,r9,2344c <___svfprintf_internal_r+0x1c0c>
   23448:	1013883a 	mov	r9,r2
   2344c:	4825883a 	mov	r18,r9
   23450:	4805883a 	mov	r2,r9
   23454:	4800a416 	blt	r9,zero,236e8 <___svfprintf_internal_r+0x1ea8>
   23458:	d8802a15 	stw	r2,168(sp)
   2345c:	008000f4 	movhi	r2,3
   23460:	108e2804 	addi	r2,r2,14496
   23464:	d8803115 	stw	r2,196(sp)
   23468:	dcc02d15 	stw	r19,180(sp)
   2346c:	d8003215 	stw	zero,200(sp)
   23470:	d8003415 	stw	zero,208(sp)
   23474:	0005883a 	mov	r2,zero
   23478:	003a3106 	br	21d40 <__alt_data_end+0xfffe2170>
   2347c:	030000f4 	movhi	r12,3
   23480:	630e2e84 	addi	r12,r12,14522
   23484:	db003615 	stw	r12,216(sp)
   23488:	003af406 	br	2205c <__alt_data_end+0xfffe248c>
   2348c:	d8c02617 	ldw	r3,152(sp)
   23490:	00bfff44 	movi	r2,-3
   23494:	18801516 	blt	r3,r2,234ec <___svfprintf_internal_r+0x1cac>
   23498:	48c01416 	blt	r9,r3,234ec <___svfprintf_internal_r+0x1cac>
   2349c:	d8c03415 	stw	r3,208(sp)
   234a0:	040019c4 	movi	r16,103
   234a4:	003f4906 	br	231cc <__alt_data_end+0xfffe35fc>
   234a8:	05400b44 	movi	r21,45
   234ac:	dd402785 	stb	r21,158(sp)
   234b0:	003b3a06 	br	2219c <__alt_data_end+0xfffe25cc>
   234b4:	00c00b44 	movi	r3,45
   234b8:	d8802a15 	stw	r2,168(sp)
   234bc:	dc402d17 	ldw	r17,180(sp)
   234c0:	d8c02785 	stb	r3,158(sp)
   234c4:	dcc02d15 	stw	r19,180(sp)
   234c8:	d8003215 	stw	zero,200(sp)
   234cc:	00800b44 	movi	r2,45
   234d0:	003a1806 	br	21d34 <__alt_data_end+0xfffe2164>
   234d4:	010000f4 	movhi	r4,3
   234d8:	210e2a84 	addi	r4,r4,14506
   234dc:	d9002b15 	stw	r4,172(sp)
   234e0:	003cc306 	br	227f0 <__alt_data_end+0xfffe2c20>
   234e4:	5005883a 	mov	r2,r10
   234e8:	003f2d06 	br	231a0 <__alt_data_end+0xfffe35d0>
   234ec:	843fff84 	addi	r16,r16,-2
   234f0:	1f3fffc4 	addi	fp,r3,-1
   234f4:	df002615 	stw	fp,152(sp)
   234f8:	dc0022c5 	stb	r16,139(sp)
   234fc:	e000a216 	blt	fp,zero,23788 <___svfprintf_internal_r+0x1f48>
   23500:	00800ac4 	movi	r2,43
   23504:	d8802305 	stb	r2,140(sp)
   23508:	00800244 	movi	r2,9
   2350c:	1700820e 	bge	r2,fp,23718 <___svfprintf_internal_r+0x1ed8>
   23510:	dd4022c4 	addi	r21,sp,139
   23514:	dc002b15 	stw	r16,172(sp)
   23518:	8825883a 	mov	r18,r17
   2351c:	a821883a 	mov	r16,r21
   23520:	4023883a 	mov	r17,r8
   23524:	e009883a 	mov	r4,fp
   23528:	01400284 	movi	r5,10
   2352c:	002e6580 	call	2e658 <__modsi3>
   23530:	10800c04 	addi	r2,r2,48
   23534:	843fffc4 	addi	r16,r16,-1
   23538:	e009883a 	mov	r4,fp
   2353c:	01400284 	movi	r5,10
   23540:	80800005 	stb	r2,0(r16)
   23544:	002e6040 	call	2e604 <__divsi3>
   23548:	1039883a 	mov	fp,r2
   2354c:	00800244 	movi	r2,9
   23550:	173ff416 	blt	r2,fp,23524 <__alt_data_end+0xfffe3954>
   23554:	8811883a 	mov	r8,r17
   23558:	e0800c04 	addi	r2,fp,48
   2355c:	9023883a 	mov	r17,r18
   23560:	8025883a 	mov	r18,r16
   23564:	913fffc4 	addi	r4,r18,-1
   23568:	90bfffc5 	stb	r2,-1(r18)
   2356c:	dc002b17 	ldw	r16,172(sp)
   23570:	25408e2e 	bgeu	r4,r21,237ac <___svfprintf_internal_r+0x1f6c>
   23574:	d9402384 	addi	r5,sp,142
   23578:	2c8bc83a 	sub	r5,r5,r18
   2357c:	d8c02344 	addi	r3,sp,141
   23580:	a94b883a 	add	r5,r21,r5
   23584:	00000106 	br	2358c <___svfprintf_internal_r+0x1d4c>
   23588:	20800003 	ldbu	r2,0(r4)
   2358c:	18800005 	stb	r2,0(r3)
   23590:	18c00044 	addi	r3,r3,1
   23594:	21000044 	addi	r4,r4,1
   23598:	197ffb1e 	bne	r3,r5,23588 <__alt_data_end+0xfffe39b8>
   2359c:	d8802304 	addi	r2,sp,140
   235a0:	1485c83a 	sub	r2,r2,r18
   235a4:	d8c02344 	addi	r3,sp,141
   235a8:	1885883a 	add	r2,r3,r2
   235ac:	dac03317 	ldw	r11,204(sp)
   235b0:	156bc83a 	sub	r21,r2,r21
   235b4:	dd403a15 	stw	r21,232(sp)
   235b8:	00800044 	movi	r2,1
   235bc:	5d65883a 	add	r18,r11,r21
   235c0:	12c0770e 	bge	r2,r11,237a0 <___svfprintf_internal_r+0x1f60>
   235c4:	94800044 	addi	r18,r18,1
   235c8:	9005883a 	mov	r2,r18
   235cc:	90007216 	blt	r18,zero,23798 <___svfprintf_internal_r+0x1f58>
   235d0:	d8003415 	stw	zero,208(sp)
   235d4:	003f0506 	br	231ec <__alt_data_end+0xfffe361c>
   235d8:	da402a15 	stw	r9,168(sp)
   235dc:	dd402783 	ldbu	r21,158(sp)
   235e0:	4825883a 	mov	r18,r9
   235e4:	dcc02d15 	stw	r19,180(sp)
   235e8:	d8003215 	stw	zero,200(sp)
   235ec:	d8003415 	stw	zero,208(sp)
   235f0:	0039cc06 	br	21d24 <__alt_data_end+0xfffe2154>
   235f4:	483eb01e 	bne	r9,zero,230b8 <__alt_data_end+0xfffe34e8>
   235f8:	9013883a 	mov	r9,r18
   235fc:	003eae06 	br	230b8 <__alt_data_end+0xfffe34e8>
   23600:	d9002f17 	ldw	r4,188(sp)
   23604:	b80b883a 	mov	r5,r23
   23608:	b00d883a 	mov	r6,r22
   2360c:	002aa4c0 	call	2aa4c <__ssprint_r>
   23610:	1039531e 	bne	r2,zero,21b60 <__alt_data_end+0xfffe1f90>
   23614:	dc002617 	ldw	r16,152(sp)
   23618:	d8c02017 	ldw	r3,128(sp)
   2361c:	d8801f17 	ldw	r2,124(sp)
   23620:	da000404 	addi	r8,sp,16
   23624:	003e6f06 	br	22fe4 <__alt_data_end+0xfffe3414>
   23628:	00c00b44 	movi	r3,45
   2362c:	64a0003c 	xorhi	r18,r12,32768
   23630:	d8c02a05 	stb	r3,168(sp)
   23634:	003ea606 	br	230d0 <__alt_data_end+0xfffe3500>
   23638:	4f000044 	addi	fp,r9,1
   2363c:	003eab06 	br	230ec <__alt_data_end+0xfffe351c>
   23640:	d8c03417 	ldw	r3,208(sp)
   23644:	00c0410e 	bge	zero,r3,2374c <___svfprintf_internal_r+0x1f0c>
   23648:	04800044 	movi	r18,1
   2364c:	dac03317 	ldw	r11,204(sp)
   23650:	92e5883a 	add	r18,r18,r11
   23654:	9005883a 	mov	r2,r18
   23658:	903ee40e 	bge	r18,zero,231ec <__alt_data_end+0xfffe361c>
   2365c:	0005883a 	mov	r2,zero
   23660:	003ee206 	br	231ec <__alt_data_end+0xfffe361c>
   23664:	d8c02617 	ldw	r3,152(sp)
   23668:	d8c03415 	stw	r3,208(sp)
   2366c:	00c0310e 	bge	zero,r3,23734 <___svfprintf_internal_r+0x1ef4>
   23670:	48001f1e 	bne	r9,zero,236f0 <___svfprintf_internal_r+0x1eb0>
   23674:	8c40004c 	andi	r17,r17,1
   23678:	88001d1e 	bne	r17,zero,236f0 <___svfprintf_internal_r+0x1eb0>
   2367c:	1805883a 	mov	r2,r3
   23680:	183ed90e 	bge	r3,zero,231e8 <__alt_data_end+0xfffe3618>
   23684:	0005883a 	mov	r2,zero
   23688:	003ed706 	br	231e8 <__alt_data_end+0xfffe3618>
   2368c:	d8802117 	ldw	r2,132(sp)
   23690:	003ec306 	br	231a0 <__alt_data_end+0xfffe35d0>
   23694:	d9003717 	ldw	r4,220(sp)
   23698:	900b883a 	mov	r5,r18
   2369c:	000d883a 	mov	r6,zero
   236a0:	000f883a 	mov	r7,zero
   236a4:	da004015 	stw	r8,256(sp)
   236a8:	da403f15 	stw	r9,252(sp)
   236ac:	da803e15 	stw	r10,248(sp)
   236b0:	002f82c0 	call	2f82c <__eqdf2>
   236b4:	da004017 	ldw	r8,256(sp)
   236b8:	da403f17 	ldw	r9,252(sp)
   236bc:	da803e17 	ldw	r10,248(sp)
   236c0:	103f2a26 	beq	r2,zero,2336c <__alt_data_end+0xfffe379c>
   236c4:	00800044 	movi	r2,1
   236c8:	1707c83a 	sub	r3,r2,fp
   236cc:	d8c02615 	stw	r3,152(sp)
   236d0:	003f2706 	br	23370 <__alt_data_end+0xfffe37a0>
   236d4:	db003417 	ldw	r12,208(sp)
   236d8:	64800044 	addi	r18,r12,1
   236dc:	9005883a 	mov	r2,r18
   236e0:	903ec20e 	bge	r18,zero,231ec <__alt_data_end+0xfffe361c>
   236e4:	003fdd06 	br	2365c <__alt_data_end+0xfffe3a8c>
   236e8:	0005883a 	mov	r2,zero
   236ec:	003f5a06 	br	23458 <__alt_data_end+0xfffe3888>
   236f0:	dac03417 	ldw	r11,208(sp)
   236f4:	4a400044 	addi	r9,r9,1
   236f8:	5a65883a 	add	r18,r11,r9
   236fc:	9005883a 	mov	r2,r18
   23700:	903eba0e 	bge	r18,zero,231ec <__alt_data_end+0xfffe361c>
   23704:	003fd506 	br	2365c <__alt_data_end+0xfffe3a8c>
   23708:	008000f4 	movhi	r2,3
   2370c:	108e2a84 	addi	r2,r2,14506
   23710:	d8802b15 	stw	r2,172(sp)
   23714:	003d2906 	br	22bbc <__alt_data_end+0xfffe2fec>
   23718:	00800c04 	movi	r2,48
   2371c:	e0c00c04 	addi	r3,fp,48
   23720:	d8802345 	stb	r2,141(sp)
   23724:	d8c02385 	stb	r3,142(sp)
   23728:	d88023c4 	addi	r2,sp,143
   2372c:	dd4022c4 	addi	r21,sp,139
   23730:	003f9e06 	br	235ac <__alt_data_end+0xfffe39dc>
   23734:	4800081e 	bne	r9,zero,23758 <___svfprintf_internal_r+0x1f18>
   23738:	8c40004c 	andi	r17,r17,1
   2373c:	8800061e 	bne	r17,zero,23758 <___svfprintf_internal_r+0x1f18>
   23740:	00800044 	movi	r2,1
   23744:	1025883a 	mov	r18,r2
   23748:	003ea806 	br	231ec <__alt_data_end+0xfffe361c>
   2374c:	04800084 	movi	r18,2
   23750:	90e5c83a 	sub	r18,r18,r3
   23754:	003fbd06 	br	2364c <__alt_data_end+0xfffe3a7c>
   23758:	4c800084 	addi	r18,r9,2
   2375c:	9005883a 	mov	r2,r18
   23760:	903ea20e 	bge	r18,zero,231ec <__alt_data_end+0xfffe361c>
   23764:	003fbd06 	br	2365c <__alt_data_end+0xfffe3a8c>
   23768:	dac02d17 	ldw	r11,180(sp)
   2376c:	5a400017 	ldw	r9,0(r11)
   23770:	5ac00104 	addi	r11,r11,4
   23774:	dac02d15 	stw	r11,180(sp)
   23778:	483e3f0e 	bge	r9,zero,23078 <__alt_data_end+0xfffe34a8>
   2377c:	027fffc4 	movi	r9,-1
   23780:	1c000047 	ldb	r16,1(r3)
   23784:	00388406 	br	21998 <__alt_data_end+0xfffe1dc8>
   23788:	00800b44 	movi	r2,45
   2378c:	0739c83a 	sub	fp,zero,fp
   23790:	d8802305 	stb	r2,140(sp)
   23794:	003f5c06 	br	23508 <__alt_data_end+0xfffe3938>
   23798:	0005883a 	mov	r2,zero
   2379c:	003f8c06 	br	235d0 <__alt_data_end+0xfffe3a00>
   237a0:	88a2703a 	and	r17,r17,r2
   237a4:	883f8826 	beq	r17,zero,235c8 <__alt_data_end+0xfffe39f8>
   237a8:	003f8606 	br	235c4 <__alt_data_end+0xfffe39f4>
   237ac:	d8802344 	addi	r2,sp,141
   237b0:	003f7e06 	br	235ac <__alt_data_end+0xfffe39dc>
   237b4:	d8c02617 	ldw	r3,152(sp)
   237b8:	003f4d06 	br	234f0 <__alt_data_end+0xfffe3920>
   237bc:	dac02f17 	ldw	r11,188(sp)
   237c0:	00800304 	movi	r2,12
   237c4:	58800015 	stw	r2,0(r11)
   237c8:	00bfffc4 	movi	r2,-1
   237cc:	0038e806 	br	21b70 <__alt_data_end+0xfffe1fa0>

000237d0 <___vfprintf_internal_r>:
   237d0:	defeb604 	addi	sp,sp,-1320
   237d4:	dfc14915 	stw	ra,1316(sp)
   237d8:	ddc14715 	stw	r23,1308(sp)
   237dc:	dd814615 	stw	r22,1304(sp)
   237e0:	282f883a 	mov	r23,r5
   237e4:	202d883a 	mov	r22,r4
   237e8:	d9812a15 	stw	r6,1192(sp)
   237ec:	d9c12d15 	stw	r7,1204(sp)
   237f0:	df014815 	stw	fp,1312(sp)
   237f4:	dd414515 	stw	r21,1300(sp)
   237f8:	dd014415 	stw	r20,1296(sp)
   237fc:	dcc14315 	stw	r19,1292(sp)
   23800:	dc814215 	stw	r18,1288(sp)
   23804:	dc414115 	stw	r17,1284(sp)
   23808:	dc014015 	stw	r16,1280(sp)
   2380c:	00284440 	call	28444 <_localeconv_r>
   23810:	10800017 	ldw	r2,0(r2)
   23814:	1009883a 	mov	r4,r2
   23818:	d8813515 	stw	r2,1236(sp)
   2381c:	00217a80 	call	217a8 <strlen>
   23820:	d8813815 	stw	r2,1248(sp)
   23824:	b0000226 	beq	r22,zero,23830 <___vfprintf_internal_r+0x60>
   23828:	b0800e17 	ldw	r2,56(r22)
   2382c:	10010426 	beq	r2,zero,23c40 <___vfprintf_internal_r+0x470>
   23830:	b8c0030b 	ldhu	r3,12(r23)
   23834:	1908000c 	andi	r4,r3,8192
   23838:	1805883a 	mov	r2,r3
   2383c:	2000071e 	bne	r4,zero,2385c <___vfprintf_internal_r+0x8c>
   23840:	b9001917 	ldw	r4,100(r23)
   23844:	18880014 	ori	r2,r3,8192
   23848:	00f7ffc4 	movi	r3,-8193
   2384c:	20c8703a 	and	r4,r4,r3
   23850:	b880030d 	sth	r2,12(r23)
   23854:	1007883a 	mov	r3,r2
   23858:	b9001915 	stw	r4,100(r23)
   2385c:	1100020c 	andi	r4,r2,8
   23860:	2000a726 	beq	r4,zero,23b00 <___vfprintf_internal_r+0x330>
   23864:	b9000417 	ldw	r4,16(r23)
   23868:	2000a526 	beq	r4,zero,23b00 <___vfprintf_internal_r+0x330>
   2386c:	1080068c 	andi	r2,r2,26
   23870:	01000284 	movi	r4,10
   23874:	1100ab26 	beq	r2,r4,23b24 <___vfprintf_internal_r+0x354>
   23878:	dac10e04 	addi	r11,sp,1080
   2387c:	db010dc4 	addi	r12,sp,1079
   23880:	d8800404 	addi	r2,sp,16
   23884:	050000f4 	movhi	r20,3
   23888:	dac12815 	stw	r11,1184(sp)
   2388c:	5b17c83a 	sub	r11,r11,r12
   23890:	a50e3284 	addi	r20,r20,14538
   23894:	db012915 	stw	r12,1188(sp)
   23898:	d8811e15 	stw	r2,1144(sp)
   2389c:	d8012015 	stw	zero,1152(sp)
   238a0:	d8011f15 	stw	zero,1148(sp)
   238a4:	d8013315 	stw	zero,1228(sp)
   238a8:	d8013715 	stw	zero,1244(sp)
   238ac:	d8013915 	stw	zero,1252(sp)
   238b0:	d8013b15 	stw	zero,1260(sp)
   238b4:	d8013a15 	stw	zero,1256(sp)
   238b8:	d8012f15 	stw	zero,1212(sp)
   238bc:	1011883a 	mov	r8,r2
   238c0:	dac13c15 	stw	r11,1264(sp)
   238c4:	db012a17 	ldw	r12,1192(sp)
   238c8:	60800007 	ldb	r2,0(r12)
   238cc:	1000df26 	beq	r2,zero,23c4c <___vfprintf_internal_r+0x47c>
   238d0:	00c00944 	movi	r3,37
   238d4:	10c0dd26 	beq	r2,r3,23c4c <___vfprintf_internal_r+0x47c>
   238d8:	6021883a 	mov	r16,r12
   238dc:	00000106 	br	238e4 <___vfprintf_internal_r+0x114>
   238e0:	10c08426 	beq	r2,r3,23af4 <___vfprintf_internal_r+0x324>
   238e4:	84000044 	addi	r16,r16,1
   238e8:	80800007 	ldb	r2,0(r16)
   238ec:	103ffc1e 	bne	r2,zero,238e0 <__alt_data_end+0xfffe3d10>
   238f0:	dac12a17 	ldw	r11,1192(sp)
   238f4:	82e3c83a 	sub	r17,r16,r11
   238f8:	88000f26 	beq	r17,zero,23938 <___vfprintf_internal_r+0x168>
   238fc:	d8c12017 	ldw	r3,1152(sp)
   23900:	d8811f17 	ldw	r2,1148(sp)
   23904:	dac12a17 	ldw	r11,1192(sp)
   23908:	1c47883a 	add	r3,r3,r17
   2390c:	10800044 	addi	r2,r2,1
   23910:	d8c12015 	stw	r3,1152(sp)
   23914:	42c00015 	stw	r11,0(r8)
   23918:	44400115 	stw	r17,4(r8)
   2391c:	d8811f15 	stw	r2,1148(sp)
   23920:	00c001c4 	movi	r3,7
   23924:	1880b416 	blt	r3,r2,23bf8 <___vfprintf_internal_r+0x428>
   23928:	42000204 	addi	r8,r8,8
   2392c:	db012f17 	ldw	r12,1212(sp)
   23930:	6459883a 	add	r12,r12,r17
   23934:	db012f15 	stw	r12,1212(sp)
   23938:	80800007 	ldb	r2,0(r16)
   2393c:	1000b526 	beq	r2,zero,23c14 <___vfprintf_internal_r+0x444>
   23940:	80800044 	addi	r2,r16,1
   23944:	84000047 	ldb	r16,1(r16)
   23948:	d8012785 	stb	zero,1182(sp)
   2394c:	000d883a 	mov	r6,zero
   23950:	027fffc4 	movi	r9,-1
   23954:	d8012e15 	stw	zero,1208(sp)
   23958:	0023883a 	mov	r17,zero
   2395c:	01001604 	movi	r4,88
   23960:	01400244 	movi	r5,9
   23964:	02800a84 	movi	r10,42
   23968:	01c01b04 	movi	r7,108
   2396c:	10c00044 	addi	r3,r2,1
   23970:	80bff804 	addi	r2,r16,-32
   23974:	2082f236 	bltu	r4,r2,24540 <___vfprintf_internal_r+0xd70>
   23978:	100490ba 	slli	r2,r2,2
   2397c:	02c000b4 	movhi	r11,2
   23980:	5ace6404 	addi	r11,r11,14736
   23984:	12c5883a 	add	r2,r2,r11
   23988:	10800017 	ldw	r2,0(r2)
   2398c:	1000683a 	jmp	r2
   23990:	00024388 	cmpgei	zero,zero,2318
   23994:	00024540 	call	2454 <__reset-0x1dbac>
   23998:	00024540 	call	2454 <__reset-0x1dbac>
   2399c:	000243a8 	cmpgeui	zero,zero,2318
   239a0:	00024540 	call	2454 <__reset-0x1dbac>
   239a4:	00024540 	call	2454 <__reset-0x1dbac>
   239a8:	00024540 	call	2454 <__reset-0x1dbac>
   239ac:	00024540 	call	2454 <__reset-0x1dbac>
   239b0:	00024540 	call	2454 <__reset-0x1dbac>
   239b4:	00024540 	call	2454 <__reset-0x1dbac>
   239b8:	00024504 	movi	zero,2324
   239bc:	00024530 	cmpltui	zero,zero,2324
   239c0:	00024540 	call	2454 <__reset-0x1dbac>
   239c4:	00023c54 	movui	zero,2289
   239c8:	00023c64 	muli	zero,zero,2289
   239cc:	00024540 	call	2454 <__reset-0x1dbac>
   239d0:	00023ca4 	muli	zero,zero,2290
   239d4:	00024198 	cmpnei	zero,zero,2310
   239d8:	00024198 	cmpnei	zero,zero,2310
   239dc:	00024198 	cmpnei	zero,zero,2310
   239e0:	00024198 	cmpnei	zero,zero,2310
   239e4:	00024198 	cmpnei	zero,zero,2310
   239e8:	00024198 	cmpnei	zero,zero,2310
   239ec:	00024198 	cmpnei	zero,zero,2310
   239f0:	00024198 	cmpnei	zero,zero,2310
   239f4:	00024198 	cmpnei	zero,zero,2310
   239f8:	00024540 	call	2454 <__reset-0x1dbac>
   239fc:	00024540 	call	2454 <__reset-0x1dbac>
   23a00:	00024540 	call	2454 <__reset-0x1dbac>
   23a04:	00024540 	call	2454 <__reset-0x1dbac>
   23a08:	00024540 	call	2454 <__reset-0x1dbac>
   23a0c:	00024540 	call	2454 <__reset-0x1dbac>
   23a10:	00024540 	call	2454 <__reset-0x1dbac>
   23a14:	00024540 	call	2454 <__reset-0x1dbac>
   23a18:	00024540 	call	2454 <__reset-0x1dbac>
   23a1c:	00024540 	call	2454 <__reset-0x1dbac>
   23a20:	000241cc 	andi	zero,zero,2311
   23a24:	00023cb4 	movhi	zero,2290
   23a28:	00024540 	call	2454 <__reset-0x1dbac>
   23a2c:	00023cb4 	movhi	zero,2290
   23a30:	00024540 	call	2454 <__reset-0x1dbac>
   23a34:	00024540 	call	2454 <__reset-0x1dbac>
   23a38:	00024540 	call	2454 <__reset-0x1dbac>
   23a3c:	00024540 	call	2454 <__reset-0x1dbac>
   23a40:	00023d58 	cmpnei	zero,zero,2293
   23a44:	00024540 	call	2454 <__reset-0x1dbac>
   23a48:	00024540 	call	2454 <__reset-0x1dbac>
   23a4c:	00023d68 	cmpgeui	zero,zero,2293
   23a50:	00024540 	call	2454 <__reset-0x1dbac>
   23a54:	00024540 	call	2454 <__reset-0x1dbac>
   23a58:	00024540 	call	2454 <__reset-0x1dbac>
   23a5c:	00024540 	call	2454 <__reset-0x1dbac>
   23a60:	00024540 	call	2454 <__reset-0x1dbac>
   23a64:	00024164 	muli	zero,zero,2309
   23a68:	00024540 	call	2454 <__reset-0x1dbac>
   23a6c:	00024540 	call	2454 <__reset-0x1dbac>
   23a70:	00024214 	movui	zero,2312
   23a74:	00024540 	call	2454 <__reset-0x1dbac>
   23a78:	00024540 	call	2454 <__reset-0x1dbac>
   23a7c:	00024540 	call	2454 <__reset-0x1dbac>
   23a80:	00024540 	call	2454 <__reset-0x1dbac>
   23a84:	00024540 	call	2454 <__reset-0x1dbac>
   23a88:	00024540 	call	2454 <__reset-0x1dbac>
   23a8c:	00024540 	call	2454 <__reset-0x1dbac>
   23a90:	00024540 	call	2454 <__reset-0x1dbac>
   23a94:	00024540 	call	2454 <__reset-0x1dbac>
   23a98:	00024540 	call	2454 <__reset-0x1dbac>
   23a9c:	00024408 	cmpgei	zero,zero,2320
   23aa0:	000243b8 	rdprs	zero,zero,2318
   23aa4:	00023cb4 	movhi	zero,2290
   23aa8:	00023cb4 	movhi	zero,2290
   23aac:	00023cb4 	movhi	zero,2290
   23ab0:	000243f8 	rdprs	zero,zero,2319
   23ab4:	000243b8 	rdprs	zero,zero,2318
   23ab8:	00024540 	call	2454 <__reset-0x1dbac>
   23abc:	00024540 	call	2454 <__reset-0x1dbac>
   23ac0:	00024300 	call	2430 <__reset-0x1dbd0>
   23ac4:	00024540 	call	2454 <__reset-0x1dbac>
   23ac8:	00024314 	movui	zero,2316
   23acc:	00024348 	cmpgei	zero,zero,2317
   23ad0:	00024448 	cmpgei	zero,zero,2321
   23ad4:	00024270 	cmpltui	zero,zero,2313
   23ad8:	00024540 	call	2454 <__reset-0x1dbac>
   23adc:	00024490 	cmplti	zero,zero,2322
   23ae0:	00024540 	call	2454 <__reset-0x1dbac>
   23ae4:	00024280 	call	2428 <__reset-0x1dbd8>
   23ae8:	00024540 	call	2454 <__reset-0x1dbac>
   23aec:	00024540 	call	2454 <__reset-0x1dbac>
   23af0:	000242c0 	call	242c <__reset-0x1dbd4>
   23af4:	db012a17 	ldw	r12,1192(sp)
   23af8:	8323c83a 	sub	r17,r16,r12
   23afc:	003f7e06 	br	238f8 <__alt_data_end+0xfffe3d28>
   23b00:	b009883a 	mov	r4,r22
   23b04:	b80b883a 	mov	r5,r23
   23b08:	00259200 	call	25920 <__swsetup_r>
   23b0c:	10002d1e 	bne	r2,zero,23bc4 <___vfprintf_internal_r+0x3f4>
   23b10:	b8c0030b 	ldhu	r3,12(r23)
   23b14:	01000284 	movi	r4,10
   23b18:	1805883a 	mov	r2,r3
   23b1c:	1080068c 	andi	r2,r2,26
   23b20:	113f551e 	bne	r2,r4,23878 <__alt_data_end+0xfffe3ca8>
   23b24:	b880038b 	ldhu	r2,14(r23)
   23b28:	113fffcc 	andi	r4,r2,65535
   23b2c:	2120001c 	xori	r4,r4,32768
   23b30:	21200004 	addi	r4,r4,-32768
   23b34:	203f5016 	blt	r4,zero,23878 <__alt_data_end+0xfffe3ca8>
   23b38:	bac01917 	ldw	r11,100(r23)
   23b3c:	ba800717 	ldw	r10,28(r23)
   23b40:	ba400917 	ldw	r9,36(r23)
   23b44:	d9812a17 	ldw	r6,1192(sp)
   23b48:	d9c12d17 	ldw	r7,1204(sp)
   23b4c:	02010004 	movi	r8,1024
   23b50:	18ffff4c 	andi	r3,r3,65533
   23b54:	d881078d 	sth	r2,1054(sp)
   23b58:	b009883a 	mov	r4,r22
   23b5c:	d8800404 	addi	r2,sp,16
   23b60:	d9410404 	addi	r5,sp,1040
   23b64:	d8c1070d 	sth	r3,1052(sp)
   23b68:	dac11d15 	stw	r11,1140(sp)
   23b6c:	da810b15 	stw	r10,1068(sp)
   23b70:	da410d15 	stw	r9,1076(sp)
   23b74:	d8810415 	stw	r2,1040(sp)
   23b78:	d8810815 	stw	r2,1056(sp)
   23b7c:	da010615 	stw	r8,1048(sp)
   23b80:	da010915 	stw	r8,1060(sp)
   23b84:	d8010a15 	stw	zero,1064(sp)
   23b88:	00237d00 	call	237d0 <___vfprintf_internal_r>
   23b8c:	1021883a 	mov	r16,r2
   23b90:	10000416 	blt	r2,zero,23ba4 <___vfprintf_internal_r+0x3d4>
   23b94:	b009883a 	mov	r4,r22
   23b98:	d9410404 	addi	r5,sp,1040
   23b9c:	00273780 	call	27378 <_fflush_r>
   23ba0:	1006ee1e 	bne	r2,zero,2575c <___vfprintf_internal_r+0x1f8c>
   23ba4:	d881070b 	ldhu	r2,1052(sp)
   23ba8:	1080100c 	andi	r2,r2,64
   23bac:	10000326 	beq	r2,zero,23bbc <___vfprintf_internal_r+0x3ec>
   23bb0:	b880030b 	ldhu	r2,12(r23)
   23bb4:	10801014 	ori	r2,r2,64
   23bb8:	b880030d 	sth	r2,12(r23)
   23bbc:	8005883a 	mov	r2,r16
   23bc0:	00000106 	br	23bc8 <___vfprintf_internal_r+0x3f8>
   23bc4:	00bfffc4 	movi	r2,-1
   23bc8:	dfc14917 	ldw	ra,1316(sp)
   23bcc:	df014817 	ldw	fp,1312(sp)
   23bd0:	ddc14717 	ldw	r23,1308(sp)
   23bd4:	dd814617 	ldw	r22,1304(sp)
   23bd8:	dd414517 	ldw	r21,1300(sp)
   23bdc:	dd014417 	ldw	r20,1296(sp)
   23be0:	dcc14317 	ldw	r19,1292(sp)
   23be4:	dc814217 	ldw	r18,1288(sp)
   23be8:	dc414117 	ldw	r17,1284(sp)
   23bec:	dc014017 	ldw	r16,1280(sp)
   23bf0:	dec14a04 	addi	sp,sp,1320
   23bf4:	f800283a 	ret
   23bf8:	b009883a 	mov	r4,r22
   23bfc:	b80b883a 	mov	r5,r23
   23c00:	d9811e04 	addi	r6,sp,1144
   23c04:	002bd780 	call	2bd78 <__sprint_r>
   23c08:	1000081e 	bne	r2,zero,23c2c <___vfprintf_internal_r+0x45c>
   23c0c:	da000404 	addi	r8,sp,16
   23c10:	003f4606 	br	2392c <__alt_data_end+0xfffe3d5c>
   23c14:	d8812017 	ldw	r2,1152(sp)
   23c18:	10000426 	beq	r2,zero,23c2c <___vfprintf_internal_r+0x45c>
   23c1c:	b009883a 	mov	r4,r22
   23c20:	b80b883a 	mov	r5,r23
   23c24:	d9811e04 	addi	r6,sp,1144
   23c28:	002bd780 	call	2bd78 <__sprint_r>
   23c2c:	b880030b 	ldhu	r2,12(r23)
   23c30:	1080100c 	andi	r2,r2,64
   23c34:	103fe31e 	bne	r2,zero,23bc4 <__alt_data_end+0xfffe3ff4>
   23c38:	d8812f17 	ldw	r2,1212(sp)
   23c3c:	003fe206 	br	23bc8 <__alt_data_end+0xfffe3ff8>
   23c40:	b009883a 	mov	r4,r22
   23c44:	00279200 	call	27920 <__sinit>
   23c48:	003ef906 	br	23830 <__alt_data_end+0xfffe3c60>
   23c4c:	dc012a17 	ldw	r16,1192(sp)
   23c50:	003f3906 	br	23938 <__alt_data_end+0xfffe3d68>
   23c54:	1805883a 	mov	r2,r3
   23c58:	8c400114 	ori	r17,r17,4
   23c5c:	1c000007 	ldb	r16,0(r3)
   23c60:	003f4206 	br	2396c <__alt_data_end+0xfffe3d9c>
   23c64:	1c000007 	ldb	r16,0(r3)
   23c68:	18800044 	addi	r2,r3,1
   23c6c:	8286b326 	beq	r16,r10,2573c <___vfprintf_internal_r+0x1f6c>
   23c70:	82fff404 	addi	r11,r16,-48
   23c74:	1007883a 	mov	r3,r2
   23c78:	0013883a 	mov	r9,zero
   23c7c:	2aff3c36 	bltu	r5,r11,23970 <__alt_data_end+0xfffe3da0>
   23c80:	1c000007 	ldb	r16,0(r3)
   23c84:	4a4002a4 	muli	r9,r9,10
   23c88:	18c00044 	addi	r3,r3,1
   23c8c:	5a53883a 	add	r9,r11,r9
   23c90:	82fff404 	addi	r11,r16,-48
   23c94:	2afffa2e 	bgeu	r5,r11,23c80 <__alt_data_end+0xfffe40b0>
   23c98:	483f350e 	bge	r9,zero,23970 <__alt_data_end+0xfffe3da0>
   23c9c:	027fffc4 	movi	r9,-1
   23ca0:	003f3306 	br	23970 <__alt_data_end+0xfffe3da0>
   23ca4:	8c402014 	ori	r17,r17,128
   23ca8:	1805883a 	mov	r2,r3
   23cac:	1c000007 	ldb	r16,0(r3)
   23cb0:	003f2e06 	br	2396c <__alt_data_end+0xfffe3d9c>
   23cb4:	db012d17 	ldw	r12,1204(sp)
   23cb8:	dac12d17 	ldw	r11,1204(sp)
   23cbc:	d8c12a15 	stw	r3,1192(sp)
   23cc0:	63000017 	ldw	r12,0(r12)
   23cc4:	5ac00117 	ldw	r11,4(r11)
   23cc8:	d9812785 	stb	r6,1182(sp)
   23ccc:	6009883a 	mov	r4,r12
   23cd0:	580b883a 	mov	r5,r11
   23cd4:	db013715 	stw	r12,1244(sp)
   23cd8:	da013f15 	stw	r8,1276(sp)
   23cdc:	da413e15 	stw	r9,1272(sp)
   23ce0:	dac13915 	stw	r11,1252(sp)
   23ce4:	002a7a40 	call	2a7a4 <__fpclassifyd>
   23ce8:	db012d17 	ldw	r12,1204(sp)
   23cec:	04800044 	movi	r18,1
   23cf0:	da013f17 	ldw	r8,1276(sp)
   23cf4:	64c00204 	addi	r19,r12,8
   23cf8:	da413e17 	ldw	r9,1272(sp)
   23cfc:	d9013717 	ldw	r4,1244(sp)
   23d00:	d9413917 	ldw	r5,1252(sp)
   23d04:	1484581e 	bne	r2,r18,24e68 <___vfprintf_internal_r+0x1698>
   23d08:	000d883a 	mov	r6,zero
   23d0c:	000f883a 	mov	r7,zero
   23d10:	002f9900 	call	2f990 <__ledf2>
   23d14:	da013f17 	ldw	r8,1276(sp)
   23d18:	1005ef16 	blt	r2,zero,254d8 <___vfprintf_internal_r+0x1d08>
   23d1c:	dd412783 	ldbu	r21,1182(sp)
   23d20:	008011c4 	movi	r2,71
   23d24:	14053b0e 	bge	r2,r16,25214 <___vfprintf_internal_r+0x1a44>
   23d28:	00c000f4 	movhi	r3,3
   23d2c:	18ce1b04 	addi	r3,r3,14444
   23d30:	d8c13115 	stw	r3,1220(sp)
   23d34:	02c000c4 	movi	r11,3
   23d38:	00bfdfc4 	movi	r2,-129
   23d3c:	dac12b15 	stw	r11,1196(sp)
   23d40:	88a2703a 	and	r17,r17,r2
   23d44:	dcc12d15 	stw	r19,1204(sp)
   23d48:	5825883a 	mov	r18,r11
   23d4c:	d8013215 	stw	zero,1224(sp)
   23d50:	d8013415 	stw	zero,1232(sp)
   23d54:	00003206 	br	23e20 <___vfprintf_internal_r+0x650>
   23d58:	8c400214 	ori	r17,r17,8
   23d5c:	1805883a 	mov	r2,r3
   23d60:	1c000007 	ldb	r16,0(r3)
   23d64:	003f0106 	br	2396c <__alt_data_end+0xfffe3d9c>
   23d68:	8c400414 	ori	r17,r17,16
   23d6c:	d8c12a15 	stw	r3,1192(sp)
   23d70:	88c0080c 	andi	r3,r17,32
   23d74:	d8812d17 	ldw	r2,1204(sp)
   23d78:	18017726 	beq	r3,zero,24358 <___vfprintf_internal_r+0xb88>
   23d7c:	db012d17 	ldw	r12,1204(sp)
   23d80:	14c00017 	ldw	r19,0(r2)
   23d84:	17000117 	ldw	fp,4(r2)
   23d88:	63000204 	addi	r12,r12,8
   23d8c:	db012d15 	stw	r12,1204(sp)
   23d90:	0005883a 	mov	r2,zero
   23d94:	9f06b03a 	or	r3,r19,fp
   23d98:	d8012785 	stb	zero,1182(sp)
   23d9c:	da413215 	stw	r9,1224(sp)
   23da0:	002b883a 	mov	r21,zero
   23da4:	48000216 	blt	r9,zero,23db0 <___vfprintf_internal_r+0x5e0>
   23da8:	013fdfc4 	movi	r4,-129
   23dac:	8922703a 	and	r17,r17,r4
   23db0:	1801ed1e 	bne	r3,zero,24568 <___vfprintf_internal_r+0xd98>
   23db4:	4802e026 	beq	r9,zero,24938 <___vfprintf_internal_r+0x1168>
   23db8:	10803fcc 	andi	r2,r2,255
   23dbc:	00c00044 	movi	r3,1
   23dc0:	10c20f26 	beq	r2,r3,24600 <___vfprintf_internal_r+0xe30>
   23dc4:	00c00084 	movi	r3,2
   23dc8:	10c2fd26 	beq	r2,r3,249c0 <___vfprintf_internal_r+0x11f0>
   23dcc:	d8c10e04 	addi	r3,sp,1080
   23dd0:	9808d0fa 	srli	r4,r19,3
   23dd4:	e00a977a 	slli	r5,fp,29
   23dd8:	e038d0fa 	srli	fp,fp,3
   23ddc:	9cc001cc 	andi	r19,r19,7
   23de0:	98800c04 	addi	r2,r19,48
   23de4:	18ffffc4 	addi	r3,r3,-1
   23de8:	2926b03a 	or	r19,r5,r4
   23dec:	18800005 	stb	r2,0(r3)
   23df0:	9f08b03a 	or	r4,r19,fp
   23df4:	203ff61e 	bne	r4,zero,23dd0 <__alt_data_end+0xfffe4200>
   23df8:	8900004c 	andi	r4,r17,1
   23dfc:	d8c13115 	stw	r3,1220(sp)
   23e00:	2003791e 	bne	r4,zero,24be8 <___vfprintf_internal_r+0x1418>
   23e04:	dac12817 	ldw	r11,1184(sp)
   23e08:	58e5c83a 	sub	r18,r11,r3
   23e0c:	9005883a 	mov	r2,r18
   23e10:	9240010e 	bge	r18,r9,23e18 <___vfprintf_internal_r+0x648>
   23e14:	4805883a 	mov	r2,r9
   23e18:	d8812b15 	stw	r2,1196(sp)
   23e1c:	d8013415 	stw	zero,1232(sp)
   23e20:	a8803fcc 	andi	r2,r21,255
   23e24:	1080201c 	xori	r2,r2,128
   23e28:	10bfe004 	addi	r2,r2,-128
   23e2c:	10000326 	beq	r2,zero,23e3c <___vfprintf_internal_r+0x66c>
   23e30:	db012b17 	ldw	r12,1196(sp)
   23e34:	63000044 	addi	r12,r12,1
   23e38:	db012b15 	stw	r12,1196(sp)
   23e3c:	88c0008c 	andi	r3,r17,2
   23e40:	d8c12c15 	stw	r3,1200(sp)
   23e44:	18000326 	beq	r3,zero,23e54 <___vfprintf_internal_r+0x684>
   23e48:	dac12b17 	ldw	r11,1196(sp)
   23e4c:	5ac00084 	addi	r11,r11,2
   23e50:	dac12b15 	stw	r11,1196(sp)
   23e54:	8b00210c 	andi	r12,r17,132
   23e58:	db013015 	stw	r12,1216(sp)
   23e5c:	6001c01e 	bne	r12,zero,24560 <___vfprintf_internal_r+0xd90>
   23e60:	dac12e17 	ldw	r11,1208(sp)
   23e64:	db012b17 	ldw	r12,1196(sp)
   23e68:	5b39c83a 	sub	fp,r11,r12
   23e6c:	0701bc0e 	bge	zero,fp,24560 <___vfprintf_internal_r+0xd90>
   23e70:	02400404 	movi	r9,16
   23e74:	d8c12017 	ldw	r3,1152(sp)
   23e78:	d8811f17 	ldw	r2,1148(sp)
   23e7c:	4f05220e 	bge	r9,fp,25308 <___vfprintf_internal_r+0x1b38>
   23e80:	014000f4 	movhi	r5,3
   23e84:	294e3684 	addi	r5,r5,14554
   23e88:	d9413615 	stw	r5,1240(sp)
   23e8c:	482b883a 	mov	r21,r9
   23e90:	04c001c4 	movi	r19,7
   23e94:	00000306 	br	23ea4 <___vfprintf_internal_r+0x6d4>
   23e98:	e73ffc04 	addi	fp,fp,-16
   23e9c:	42000204 	addi	r8,r8,8
   23ea0:	af00130e 	bge	r21,fp,23ef0 <___vfprintf_internal_r+0x720>
   23ea4:	02c000f4 	movhi	r11,3
   23ea8:	18c00404 	addi	r3,r3,16
   23eac:	10800044 	addi	r2,r2,1
   23eb0:	5ace3684 	addi	r11,r11,14554
   23eb4:	42c00015 	stw	r11,0(r8)
   23eb8:	45400115 	stw	r21,4(r8)
   23ebc:	d8c12015 	stw	r3,1152(sp)
   23ec0:	d8811f15 	stw	r2,1148(sp)
   23ec4:	98bff40e 	bge	r19,r2,23e98 <__alt_data_end+0xfffe42c8>
   23ec8:	b009883a 	mov	r4,r22
   23ecc:	b80b883a 	mov	r5,r23
   23ed0:	d9811e04 	addi	r6,sp,1144
   23ed4:	002bd780 	call	2bd78 <__sprint_r>
   23ed8:	103f541e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   23edc:	e73ffc04 	addi	fp,fp,-16
   23ee0:	d8c12017 	ldw	r3,1152(sp)
   23ee4:	d8811f17 	ldw	r2,1148(sp)
   23ee8:	da000404 	addi	r8,sp,16
   23eec:	af3fed16 	blt	r21,fp,23ea4 <__alt_data_end+0xfffe42d4>
   23ef0:	db013617 	ldw	r12,1240(sp)
   23ef4:	e0c7883a 	add	r3,fp,r3
   23ef8:	10800044 	addi	r2,r2,1
   23efc:	43000015 	stw	r12,0(r8)
   23f00:	47000115 	stw	fp,4(r8)
   23f04:	d8c12015 	stw	r3,1152(sp)
   23f08:	d8811f15 	stw	r2,1148(sp)
   23f0c:	010001c4 	movi	r4,7
   23f10:	2082f416 	blt	r4,r2,24ae4 <___vfprintf_internal_r+0x1314>
   23f14:	d8812787 	ldb	r2,1182(sp)
   23f18:	42000204 	addi	r8,r8,8
   23f1c:	10000c26 	beq	r2,zero,23f50 <___vfprintf_internal_r+0x780>
   23f20:	d8811f17 	ldw	r2,1148(sp)
   23f24:	d9012784 	addi	r4,sp,1182
   23f28:	18c00044 	addi	r3,r3,1
   23f2c:	10800044 	addi	r2,r2,1
   23f30:	41000015 	stw	r4,0(r8)
   23f34:	01000044 	movi	r4,1
   23f38:	41000115 	stw	r4,4(r8)
   23f3c:	d8c12015 	stw	r3,1152(sp)
   23f40:	d8811f15 	stw	r2,1148(sp)
   23f44:	010001c4 	movi	r4,7
   23f48:	20828d16 	blt	r4,r2,24980 <___vfprintf_internal_r+0x11b0>
   23f4c:	42000204 	addi	r8,r8,8
   23f50:	dac12c17 	ldw	r11,1200(sp)
   23f54:	58000c26 	beq	r11,zero,23f88 <___vfprintf_internal_r+0x7b8>
   23f58:	d8811f17 	ldw	r2,1148(sp)
   23f5c:	d9012704 	addi	r4,sp,1180
   23f60:	18c00084 	addi	r3,r3,2
   23f64:	10800044 	addi	r2,r2,1
   23f68:	41000015 	stw	r4,0(r8)
   23f6c:	01000084 	movi	r4,2
   23f70:	41000115 	stw	r4,4(r8)
   23f74:	d8c12015 	stw	r3,1152(sp)
   23f78:	d8811f15 	stw	r2,1148(sp)
   23f7c:	010001c4 	movi	r4,7
   23f80:	20828716 	blt	r4,r2,249a0 <___vfprintf_internal_r+0x11d0>
   23f84:	42000204 	addi	r8,r8,8
   23f88:	db013017 	ldw	r12,1216(sp)
   23f8c:	00802004 	movi	r2,128
   23f90:	6081e926 	beq	r12,r2,24738 <___vfprintf_internal_r+0xf68>
   23f94:	db013217 	ldw	r12,1224(sp)
   23f98:	64abc83a 	sub	r21,r12,r18
   23f9c:	0540260e 	bge	zero,r21,24038 <___vfprintf_internal_r+0x868>
   23fa0:	07000404 	movi	fp,16
   23fa4:	d8811f17 	ldw	r2,1148(sp)
   23fa8:	e5443d0e 	bge	fp,r21,250a0 <___vfprintf_internal_r+0x18d0>
   23fac:	014000f4 	movhi	r5,3
   23fb0:	294e3284 	addi	r5,r5,14538
   23fb4:	d9412c15 	stw	r5,1200(sp)
   23fb8:	04c001c4 	movi	r19,7
   23fbc:	00000306 	br	23fcc <___vfprintf_internal_r+0x7fc>
   23fc0:	ad7ffc04 	addi	r21,r21,-16
   23fc4:	42000204 	addi	r8,r8,8
   23fc8:	e540110e 	bge	fp,r21,24010 <___vfprintf_internal_r+0x840>
   23fcc:	18c00404 	addi	r3,r3,16
   23fd0:	10800044 	addi	r2,r2,1
   23fd4:	45000015 	stw	r20,0(r8)
   23fd8:	47000115 	stw	fp,4(r8)
   23fdc:	d8c12015 	stw	r3,1152(sp)
   23fe0:	d8811f15 	stw	r2,1148(sp)
   23fe4:	98bff60e 	bge	r19,r2,23fc0 <__alt_data_end+0xfffe43f0>
   23fe8:	b009883a 	mov	r4,r22
   23fec:	b80b883a 	mov	r5,r23
   23ff0:	d9811e04 	addi	r6,sp,1144
   23ff4:	002bd780 	call	2bd78 <__sprint_r>
   23ff8:	103f0c1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   23ffc:	ad7ffc04 	addi	r21,r21,-16
   24000:	d8c12017 	ldw	r3,1152(sp)
   24004:	d8811f17 	ldw	r2,1148(sp)
   24008:	da000404 	addi	r8,sp,16
   2400c:	e57fef16 	blt	fp,r21,23fcc <__alt_data_end+0xfffe43fc>
   24010:	dac12c17 	ldw	r11,1200(sp)
   24014:	1d47883a 	add	r3,r3,r21
   24018:	10800044 	addi	r2,r2,1
   2401c:	42c00015 	stw	r11,0(r8)
   24020:	45400115 	stw	r21,4(r8)
   24024:	d8c12015 	stw	r3,1152(sp)
   24028:	d8811f15 	stw	r2,1148(sp)
   2402c:	010001c4 	movi	r4,7
   24030:	20824b16 	blt	r4,r2,24960 <___vfprintf_internal_r+0x1190>
   24034:	42000204 	addi	r8,r8,8
   24038:	8880400c 	andi	r2,r17,256
   2403c:	1001761e 	bne	r2,zero,24618 <___vfprintf_internal_r+0xe48>
   24040:	d8811f17 	ldw	r2,1148(sp)
   24044:	db013117 	ldw	r12,1220(sp)
   24048:	1c87883a 	add	r3,r3,r18
   2404c:	10800044 	addi	r2,r2,1
   24050:	43000015 	stw	r12,0(r8)
   24054:	44800115 	stw	r18,4(r8)
   24058:	d8c12015 	stw	r3,1152(sp)
   2405c:	d8811f15 	stw	r2,1148(sp)
   24060:	010001c4 	movi	r4,7
   24064:	20822616 	blt	r4,r2,24900 <___vfprintf_internal_r+0x1130>
   24068:	42000204 	addi	r8,r8,8
   2406c:	8c40010c 	andi	r17,r17,4
   24070:	88003126 	beq	r17,zero,24138 <___vfprintf_internal_r+0x968>
   24074:	db012e17 	ldw	r12,1208(sp)
   24078:	dac12b17 	ldw	r11,1196(sp)
   2407c:	62e1c83a 	sub	r16,r12,r11
   24080:	04002d0e 	bge	zero,r16,24138 <___vfprintf_internal_r+0x968>
   24084:	04400404 	movi	r17,16
   24088:	d8811f17 	ldw	r2,1148(sp)
   2408c:	8c04df0e 	bge	r17,r16,2540c <___vfprintf_internal_r+0x1c3c>
   24090:	010000f4 	movhi	r4,3
   24094:	210e3684 	addi	r4,r4,14554
   24098:	d9013615 	stw	r4,1240(sp)
   2409c:	048001c4 	movi	r18,7
   240a0:	00000306 	br	240b0 <___vfprintf_internal_r+0x8e0>
   240a4:	843ffc04 	addi	r16,r16,-16
   240a8:	42000204 	addi	r8,r8,8
   240ac:	8c00130e 	bge	r17,r16,240fc <___vfprintf_internal_r+0x92c>
   240b0:	014000f4 	movhi	r5,3
   240b4:	18c00404 	addi	r3,r3,16
   240b8:	10800044 	addi	r2,r2,1
   240bc:	294e3684 	addi	r5,r5,14554
   240c0:	41400015 	stw	r5,0(r8)
   240c4:	44400115 	stw	r17,4(r8)
   240c8:	d8c12015 	stw	r3,1152(sp)
   240cc:	d8811f15 	stw	r2,1148(sp)
   240d0:	90bff40e 	bge	r18,r2,240a4 <__alt_data_end+0xfffe44d4>
   240d4:	b009883a 	mov	r4,r22
   240d8:	b80b883a 	mov	r5,r23
   240dc:	d9811e04 	addi	r6,sp,1144
   240e0:	002bd780 	call	2bd78 <__sprint_r>
   240e4:	103ed11e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   240e8:	843ffc04 	addi	r16,r16,-16
   240ec:	d8c12017 	ldw	r3,1152(sp)
   240f0:	d8811f17 	ldw	r2,1148(sp)
   240f4:	da000404 	addi	r8,sp,16
   240f8:	8c3fed16 	blt	r17,r16,240b0 <__alt_data_end+0xfffe44e0>
   240fc:	dac13617 	ldw	r11,1240(sp)
   24100:	1c07883a 	add	r3,r3,r16
   24104:	10800044 	addi	r2,r2,1
   24108:	42c00015 	stw	r11,0(r8)
   2410c:	44000115 	stw	r16,4(r8)
   24110:	d8c12015 	stw	r3,1152(sp)
   24114:	d8811f15 	stw	r2,1148(sp)
   24118:	010001c4 	movi	r4,7
   2411c:	2080060e 	bge	r4,r2,24138 <___vfprintf_internal_r+0x968>
   24120:	b009883a 	mov	r4,r22
   24124:	b80b883a 	mov	r5,r23
   24128:	d9811e04 	addi	r6,sp,1144
   2412c:	002bd780 	call	2bd78 <__sprint_r>
   24130:	103ebe1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24134:	d8c12017 	ldw	r3,1152(sp)
   24138:	d8812b17 	ldw	r2,1196(sp)
   2413c:	db012e17 	ldw	r12,1208(sp)
   24140:	1300010e 	bge	r2,r12,24148 <___vfprintf_internal_r+0x978>
   24144:	6005883a 	mov	r2,r12
   24148:	dac12f17 	ldw	r11,1212(sp)
   2414c:	5897883a 	add	r11,r11,r2
   24150:	dac12f15 	stw	r11,1212(sp)
   24154:	1801f21e 	bne	r3,zero,24920 <___vfprintf_internal_r+0x1150>
   24158:	d8011f15 	stw	zero,1148(sp)
   2415c:	da000404 	addi	r8,sp,16
   24160:	003dd806 	br	238c4 <__alt_data_end+0xfffe3cf4>
   24164:	8c400414 	ori	r17,r17,16
   24168:	d8c12a15 	stw	r3,1192(sp)
   2416c:	88c0080c 	andi	r3,r17,32
   24170:	d8812d17 	ldw	r2,1204(sp)
   24174:	18004626 	beq	r3,zero,24290 <___vfprintf_internal_r+0xac0>
   24178:	dac12d17 	ldw	r11,1204(sp)
   2417c:	14c00017 	ldw	r19,0(r2)
   24180:	17000117 	ldw	fp,4(r2)
   24184:	5ac00204 	addi	r11,r11,8
   24188:	dac12d15 	stw	r11,1204(sp)
   2418c:	00800044 	movi	r2,1
   24190:	9f06b03a 	or	r3,r19,fp
   24194:	003f0006 	br	23d98 <__alt_data_end+0xfffe41c8>
   24198:	1805883a 	mov	r2,r3
   2419c:	d8012e15 	stw	zero,1208(sp)
   241a0:	82fff404 	addi	r11,r16,-48
   241a4:	0019883a 	mov	r12,zero
   241a8:	14000007 	ldb	r16,0(r2)
   241ac:	630002a4 	muli	r12,r12,10
   241b0:	18c00044 	addi	r3,r3,1
   241b4:	1805883a 	mov	r2,r3
   241b8:	62d9883a 	add	r12,r12,r11
   241bc:	82fff404 	addi	r11,r16,-48
   241c0:	2afff92e 	bgeu	r5,r11,241a8 <__alt_data_end+0xfffe45d8>
   241c4:	db012e15 	stw	r12,1208(sp)
   241c8:	003de906 	br	23970 <__alt_data_end+0xfffe3da0>
   241cc:	8c400414 	ori	r17,r17,16
   241d0:	d8c12a15 	stw	r3,1192(sp)
   241d4:	d9812785 	stb	r6,1182(sp)
   241d8:	8880080c 	andi	r2,r17,32
   241dc:	d8c12d17 	ldw	r3,1204(sp)
   241e0:	10007a26 	beq	r2,zero,243cc <___vfprintf_internal_r+0xbfc>
   241e4:	db012d17 	ldw	r12,1204(sp)
   241e8:	18800117 	ldw	r2,4(r3)
   241ec:	1cc00017 	ldw	r19,0(r3)
   241f0:	63000204 	addi	r12,r12,8
   241f4:	db012d15 	stw	r12,1204(sp)
   241f8:	1039883a 	mov	fp,r2
   241fc:	10031016 	blt	r2,zero,24e40 <___vfprintf_internal_r+0x1670>
   24200:	dd412783 	ldbu	r21,1182(sp)
   24204:	da413215 	stw	r9,1224(sp)
   24208:	00800044 	movi	r2,1
   2420c:	9f06b03a 	or	r3,r19,fp
   24210:	003ee406 	br	23da4 <__alt_data_end+0xfffe41d4>
   24214:	030000f4 	movhi	r12,3
   24218:	630e1e04 	addi	r12,r12,14456
   2421c:	d8c12a15 	stw	r3,1192(sp)
   24220:	d9812785 	stb	r6,1182(sp)
   24224:	db013b15 	stw	r12,1260(sp)
   24228:	88c0080c 	andi	r3,r17,32
   2422c:	d8812d17 	ldw	r2,1204(sp)
   24230:	18002b26 	beq	r3,zero,242e0 <___vfprintf_internal_r+0xb10>
   24234:	dac12d17 	ldw	r11,1204(sp)
   24238:	14c00017 	ldw	r19,0(r2)
   2423c:	17000117 	ldw	fp,4(r2)
   24240:	5ac00204 	addi	r11,r11,8
   24244:	dac12d15 	stw	r11,1204(sp)
   24248:	8880004c 	andi	r2,r17,1
   2424c:	10025b26 	beq	r2,zero,24bbc <___vfprintf_internal_r+0x13ec>
   24250:	9f06b03a 	or	r3,r19,fp
   24254:	18037026 	beq	r3,zero,25018 <___vfprintf_internal_r+0x1848>
   24258:	00800c04 	movi	r2,48
   2425c:	d8812705 	stb	r2,1180(sp)
   24260:	dc012745 	stb	r16,1181(sp)
   24264:	8c400094 	ori	r17,r17,2
   24268:	00800084 	movi	r2,2
   2426c:	003eca06 	br	23d98 <__alt_data_end+0xfffe41c8>
   24270:	8c400814 	ori	r17,r17,32
   24274:	1805883a 	mov	r2,r3
   24278:	1c000007 	ldb	r16,0(r3)
   2427c:	003dbb06 	br	2396c <__alt_data_end+0xfffe3d9c>
   24280:	d8c12a15 	stw	r3,1192(sp)
   24284:	88c0080c 	andi	r3,r17,32
   24288:	d8812d17 	ldw	r2,1204(sp)
   2428c:	183fba1e 	bne	r3,zero,24178 <__alt_data_end+0xfffe45a8>
   24290:	88c0040c 	andi	r3,r17,16
   24294:	18024c1e 	bne	r3,zero,24bc8 <___vfprintf_internal_r+0x13f8>
   24298:	88c0100c 	andi	r3,r17,64
   2429c:	18024a26 	beq	r3,zero,24bc8 <___vfprintf_internal_r+0x13f8>
   242a0:	dac12d17 	ldw	r11,1204(sp)
   242a4:	14c0000b 	ldhu	r19,0(r2)
   242a8:	0039883a 	mov	fp,zero
   242ac:	5ac00104 	addi	r11,r11,4
   242b0:	dac12d15 	stw	r11,1204(sp)
   242b4:	00800044 	movi	r2,1
   242b8:	9807883a 	mov	r3,r19
   242bc:	003eb606 	br	23d98 <__alt_data_end+0xfffe41c8>
   242c0:	008000f4 	movhi	r2,3
   242c4:	108e2304 	addi	r2,r2,14476
   242c8:	d8c12a15 	stw	r3,1192(sp)
   242cc:	d8813b15 	stw	r2,1260(sp)
   242d0:	d9812785 	stb	r6,1182(sp)
   242d4:	88c0080c 	andi	r3,r17,32
   242d8:	d8812d17 	ldw	r2,1204(sp)
   242dc:	183fd51e 	bne	r3,zero,24234 <__alt_data_end+0xfffe4664>
   242e0:	88c0040c 	andi	r3,r17,16
   242e4:	18034126 	beq	r3,zero,24fec <___vfprintf_internal_r+0x181c>
   242e8:	db012d17 	ldw	r12,1204(sp)
   242ec:	14c00017 	ldw	r19,0(r2)
   242f0:	0039883a 	mov	fp,zero
   242f4:	63000104 	addi	r12,r12,4
   242f8:	db012d15 	stw	r12,1204(sp)
   242fc:	003fd206 	br	24248 <__alt_data_end+0xfffe4678>
   24300:	1c000007 	ldb	r16,0(r3)
   24304:	81c3d626 	beq	r16,r7,25260 <___vfprintf_internal_r+0x1a90>
   24308:	8c400414 	ori	r17,r17,16
   2430c:	1805883a 	mov	r2,r3
   24310:	003d9606 	br	2396c <__alt_data_end+0xfffe3d9c>
   24314:	d8c12a15 	stw	r3,1192(sp)
   24318:	d9812785 	stb	r6,1182(sp)
   2431c:	8880080c 	andi	r2,r17,32
   24320:	10033f26 	beq	r2,zero,25020 <___vfprintf_internal_r+0x1850>
   24324:	db012d17 	ldw	r12,1204(sp)
   24328:	dac12f17 	ldw	r11,1212(sp)
   2432c:	60800017 	ldw	r2,0(r12)
   24330:	5807d7fa 	srai	r3,r11,31
   24334:	63000104 	addi	r12,r12,4
   24338:	db012d15 	stw	r12,1204(sp)
   2433c:	12c00015 	stw	r11,0(r2)
   24340:	10c00115 	stw	r3,4(r2)
   24344:	003d5f06 	br	238c4 <__alt_data_end+0xfffe3cf4>
   24348:	d8c12a15 	stw	r3,1192(sp)
   2434c:	88c0080c 	andi	r3,r17,32
   24350:	d8812d17 	ldw	r2,1204(sp)
   24354:	183e891e 	bne	r3,zero,23d7c <__alt_data_end+0xfffe41ac>
   24358:	88c0040c 	andi	r3,r17,16
   2435c:	1801ea1e 	bne	r3,zero,24b08 <___vfprintf_internal_r+0x1338>
   24360:	88c0100c 	andi	r3,r17,64
   24364:	1801e826 	beq	r3,zero,24b08 <___vfprintf_internal_r+0x1338>
   24368:	db012d17 	ldw	r12,1204(sp)
   2436c:	14c0000b 	ldhu	r19,0(r2)
   24370:	0039883a 	mov	fp,zero
   24374:	63000104 	addi	r12,r12,4
   24378:	db012d15 	stw	r12,1204(sp)
   2437c:	0005883a 	mov	r2,zero
   24380:	9807883a 	mov	r3,r19
   24384:	003e8406 	br	23d98 <__alt_data_end+0xfffe41c8>
   24388:	30803fcc 	andi	r2,r6,255
   2438c:	1080201c 	xori	r2,r2,128
   24390:	10bfe004 	addi	r2,r2,-128
   24394:	10031d1e 	bne	r2,zero,2500c <___vfprintf_internal_r+0x183c>
   24398:	1805883a 	mov	r2,r3
   2439c:	01800804 	movi	r6,32
   243a0:	1c000007 	ldb	r16,0(r3)
   243a4:	003d7106 	br	2396c <__alt_data_end+0xfffe3d9c>
   243a8:	8c400054 	ori	r17,r17,1
   243ac:	1805883a 	mov	r2,r3
   243b0:	1c000007 	ldb	r16,0(r3)
   243b4:	003d6d06 	br	2396c <__alt_data_end+0xfffe3d9c>
   243b8:	d8c12a15 	stw	r3,1192(sp)
   243bc:	d9812785 	stb	r6,1182(sp)
   243c0:	8880080c 	andi	r2,r17,32
   243c4:	d8c12d17 	ldw	r3,1204(sp)
   243c8:	103f861e 	bne	r2,zero,241e4 <__alt_data_end+0xfffe4614>
   243cc:	8880040c 	andi	r2,r17,16
   243d0:	1001f31e 	bne	r2,zero,24ba0 <___vfprintf_internal_r+0x13d0>
   243d4:	8880100c 	andi	r2,r17,64
   243d8:	1001f126 	beq	r2,zero,24ba0 <___vfprintf_internal_r+0x13d0>
   243dc:	1cc0000f 	ldh	r19,0(r3)
   243e0:	db012d17 	ldw	r12,1204(sp)
   243e4:	9839d7fa 	srai	fp,r19,31
   243e8:	63000104 	addi	r12,r12,4
   243ec:	db012d15 	stw	r12,1204(sp)
   243f0:	e005883a 	mov	r2,fp
   243f4:	003f8106 	br	241fc <__alt_data_end+0xfffe462c>
   243f8:	8c401014 	ori	r17,r17,64
   243fc:	1805883a 	mov	r2,r3
   24400:	1c000007 	ldb	r16,0(r3)
   24404:	003d5906 	br	2396c <__alt_data_end+0xfffe3d9c>
   24408:	db012d17 	ldw	r12,1204(sp)
   2440c:	d8c12a15 	stw	r3,1192(sp)
   24410:	00c00044 	movi	r3,1
   24414:	60800017 	ldw	r2,0(r12)
   24418:	63000104 	addi	r12,r12,4
   2441c:	d8c12b15 	stw	r3,1196(sp)
   24420:	d8012785 	stb	zero,1182(sp)
   24424:	d8810405 	stb	r2,1040(sp)
   24428:	db012d15 	stw	r12,1204(sp)
   2442c:	dac10404 	addi	r11,sp,1040
   24430:	1825883a 	mov	r18,r3
   24434:	d8013215 	stw	zero,1224(sp)
   24438:	d8013415 	stw	zero,1232(sp)
   2443c:	dac13115 	stw	r11,1220(sp)
   24440:	0005883a 	mov	r2,zero
   24444:	003e7d06 	br	23e3c <__alt_data_end+0xfffe426c>
   24448:	db012d17 	ldw	r12,1204(sp)
   2444c:	00800c04 	movi	r2,48
   24450:	d8812705 	stb	r2,1180(sp)
   24454:	64c00017 	ldw	r19,0(r12)
   24458:	00801e04 	movi	r2,120
   2445c:	d8812745 	stb	r2,1181(sp)
   24460:	008000f4 	movhi	r2,3
   24464:	108e2304 	addi	r2,r2,14476
   24468:	63000104 	addi	r12,r12,4
   2446c:	d8c12a15 	stw	r3,1192(sp)
   24470:	d8813b15 	stw	r2,1260(sp)
   24474:	0039883a 	mov	fp,zero
   24478:	8c400094 	ori	r17,r17,2
   2447c:	db012d15 	stw	r12,1204(sp)
   24480:	00800084 	movi	r2,2
   24484:	04001e04 	movi	r16,120
   24488:	9807883a 	mov	r3,r19
   2448c:	003e4206 	br	23d98 <__alt_data_end+0xfffe41c8>
   24490:	dac12d17 	ldw	r11,1204(sp)
   24494:	db012d17 	ldw	r12,1204(sp)
   24498:	d8c12a15 	stw	r3,1192(sp)
   2449c:	5ac00017 	ldw	r11,0(r11)
   244a0:	d8012785 	stb	zero,1182(sp)
   244a4:	64c00104 	addi	r19,r12,4
   244a8:	dac13115 	stw	r11,1220(sp)
   244ac:	5803e826 	beq	r11,zero,25450 <___vfprintf_internal_r+0x1c80>
   244b0:	d9013117 	ldw	r4,1220(sp)
   244b4:	48037a16 	blt	r9,zero,252a0 <___vfprintf_internal_r+0x1ad0>
   244b8:	480d883a 	mov	r6,r9
   244bc:	000b883a 	mov	r5,zero
   244c0:	da013f15 	stw	r8,1276(sp)
   244c4:	da413e15 	stw	r9,1272(sp)
   244c8:	0028dd80 	call	28dd8 <memchr>
   244cc:	da013f17 	ldw	r8,1276(sp)
   244d0:	da413e17 	ldw	r9,1272(sp)
   244d4:	10044426 	beq	r2,zero,255e8 <___vfprintf_internal_r+0x1e18>
   244d8:	d8c13117 	ldw	r3,1220(sp)
   244dc:	10e5c83a 	sub	r18,r2,r3
   244e0:	4c834416 	blt	r9,r18,251f4 <___vfprintf_internal_r+0x1a24>
   244e4:	9005883a 	mov	r2,r18
   244e8:	90037216 	blt	r18,zero,252b4 <___vfprintf_internal_r+0x1ae4>
   244ec:	dd412783 	ldbu	r21,1182(sp)
   244f0:	d8812b15 	stw	r2,1196(sp)
   244f4:	dcc12d15 	stw	r19,1204(sp)
   244f8:	d8013215 	stw	zero,1224(sp)
   244fc:	d8013415 	stw	zero,1232(sp)
   24500:	003e4706 	br	23e20 <__alt_data_end+0xfffe4250>
   24504:	dac12d17 	ldw	r11,1204(sp)
   24508:	db012d17 	ldw	r12,1204(sp)
   2450c:	5ac00017 	ldw	r11,0(r11)
   24510:	dac12e15 	stw	r11,1208(sp)
   24514:	62c00104 	addi	r11,r12,4
   24518:	db012e17 	ldw	r12,1208(sp)
   2451c:	60034a16 	blt	r12,zero,25248 <___vfprintf_internal_r+0x1a78>
   24520:	dac12d15 	stw	r11,1204(sp)
   24524:	1805883a 	mov	r2,r3
   24528:	1c000007 	ldb	r16,0(r3)
   2452c:	003d0f06 	br	2396c <__alt_data_end+0xfffe3d9c>
   24530:	1805883a 	mov	r2,r3
   24534:	01800ac4 	movi	r6,43
   24538:	1c000007 	ldb	r16,0(r3)
   2453c:	003d0b06 	br	2396c <__alt_data_end+0xfffe3d9c>
   24540:	d8c12a15 	stw	r3,1192(sp)
   24544:	d9812785 	stb	r6,1182(sp)
   24548:	803db226 	beq	r16,zero,23c14 <__alt_data_end+0xfffe4044>
   2454c:	00c00044 	movi	r3,1
   24550:	d8c12b15 	stw	r3,1196(sp)
   24554:	dc010405 	stb	r16,1040(sp)
   24558:	d8012785 	stb	zero,1182(sp)
   2455c:	003fb306 	br	2442c <__alt_data_end+0xfffe485c>
   24560:	d8c12017 	ldw	r3,1152(sp)
   24564:	003e6d06 	br	23f1c <__alt_data_end+0xfffe434c>
   24568:	10803fcc 	andi	r2,r2,255
   2456c:	00c00044 	movi	r3,1
   24570:	10fe141e 	bne	r2,r3,23dc4 <__alt_data_end+0xfffe41f4>
   24574:	e000021e 	bne	fp,zero,24580 <___vfprintf_internal_r+0xdb0>
   24578:	00800244 	movi	r2,9
   2457c:	14c0202e 	bgeu	r2,r19,24600 <___vfprintf_internal_r+0xe30>
   24580:	dc012b15 	stw	r16,1196(sp)
   24584:	dc412c15 	stw	r17,1200(sp)
   24588:	9821883a 	mov	r16,r19
   2458c:	e023883a 	mov	r17,fp
   24590:	dc810e04 	addi	r18,sp,1080
   24594:	4027883a 	mov	r19,r8
   24598:	4839883a 	mov	fp,r9
   2459c:	8009883a 	mov	r4,r16
   245a0:	880b883a 	mov	r5,r17
   245a4:	01800284 	movi	r6,10
   245a8:	000f883a 	mov	r7,zero
   245ac:	002e0080 	call	2e008 <__umoddi3>
   245b0:	10800c04 	addi	r2,r2,48
   245b4:	94bfffc4 	addi	r18,r18,-1
   245b8:	8009883a 	mov	r4,r16
   245bc:	880b883a 	mov	r5,r17
   245c0:	01800284 	movi	r6,10
   245c4:	000f883a 	mov	r7,zero
   245c8:	90800005 	stb	r2,0(r18)
   245cc:	002da480 	call	2da48 <__udivdi3>
   245d0:	1021883a 	mov	r16,r2
   245d4:	10c4b03a 	or	r2,r2,r3
   245d8:	1823883a 	mov	r17,r3
   245dc:	103fef1e 	bne	r2,zero,2459c <__alt_data_end+0xfffe49cc>
   245e0:	dac12817 	ldw	r11,1184(sp)
   245e4:	dc813115 	stw	r18,1220(sp)
   245e8:	dc012b17 	ldw	r16,1196(sp)
   245ec:	9811883a 	mov	r8,r19
   245f0:	dc412c17 	ldw	r17,1200(sp)
   245f4:	e013883a 	mov	r9,fp
   245f8:	5ca5c83a 	sub	r18,r11,r18
   245fc:	003e0306 	br	23e0c <__alt_data_end+0xfffe423c>
   24600:	9cc00c04 	addi	r19,r19,48
   24604:	d8c10dc4 	addi	r3,sp,1079
   24608:	dcc10dc5 	stb	r19,1079(sp)
   2460c:	dc813c17 	ldw	r18,1264(sp)
   24610:	d8c13115 	stw	r3,1220(sp)
   24614:	003dfd06 	br	23e0c <__alt_data_end+0xfffe423c>
   24618:	00801944 	movi	r2,101
   2461c:	1400710e 	bge	r2,r16,247e4 <___vfprintf_internal_r+0x1014>
   24620:	d9013717 	ldw	r4,1244(sp)
   24624:	d9413917 	ldw	r5,1252(sp)
   24628:	000d883a 	mov	r6,zero
   2462c:	000f883a 	mov	r7,zero
   24630:	d8c13d15 	stw	r3,1268(sp)
   24634:	da013f15 	stw	r8,1276(sp)
   24638:	002f82c0 	call	2f82c <__eqdf2>
   2463c:	d8c13d17 	ldw	r3,1268(sp)
   24640:	da013f17 	ldw	r8,1276(sp)
   24644:	1000ef1e 	bne	r2,zero,24a04 <___vfprintf_internal_r+0x1234>
   24648:	d8811f17 	ldw	r2,1148(sp)
   2464c:	010000f4 	movhi	r4,3
   24650:	210e2a04 	addi	r4,r4,14504
   24654:	18c00044 	addi	r3,r3,1
   24658:	10800044 	addi	r2,r2,1
   2465c:	41000015 	stw	r4,0(r8)
   24660:	01000044 	movi	r4,1
   24664:	41000115 	stw	r4,4(r8)
   24668:	d8c12015 	stw	r3,1152(sp)
   2466c:	d8811f15 	stw	r2,1148(sp)
   24670:	010001c4 	movi	r4,7
   24674:	20828e16 	blt	r4,r2,250b0 <___vfprintf_internal_r+0x18e0>
   24678:	42000204 	addi	r8,r8,8
   2467c:	d8812617 	ldw	r2,1176(sp)
   24680:	dac13317 	ldw	r11,1228(sp)
   24684:	12c00216 	blt	r2,r11,24690 <___vfprintf_internal_r+0xec0>
   24688:	8880004c 	andi	r2,r17,1
   2468c:	103e7726 	beq	r2,zero,2406c <__alt_data_end+0xfffe449c>
   24690:	db013817 	ldw	r12,1248(sp)
   24694:	d8811f17 	ldw	r2,1148(sp)
   24698:	dac13517 	ldw	r11,1236(sp)
   2469c:	1b07883a 	add	r3,r3,r12
   246a0:	10800044 	addi	r2,r2,1
   246a4:	42c00015 	stw	r11,0(r8)
   246a8:	43000115 	stw	r12,4(r8)
   246ac:	d8c12015 	stw	r3,1152(sp)
   246b0:	d8811f15 	stw	r2,1148(sp)
   246b4:	010001c4 	movi	r4,7
   246b8:	2082ed16 	blt	r4,r2,25270 <___vfprintf_internal_r+0x1aa0>
   246bc:	42000204 	addi	r8,r8,8
   246c0:	db013317 	ldw	r12,1228(sp)
   246c4:	643fffc4 	addi	r16,r12,-1
   246c8:	043e680e 	bge	zero,r16,2406c <__alt_data_end+0xfffe449c>
   246cc:	04800404 	movi	r18,16
   246d0:	d8811f17 	ldw	r2,1148(sp)
   246d4:	94007e0e 	bge	r18,r16,248d0 <___vfprintf_internal_r+0x1100>
   246d8:	014000f4 	movhi	r5,3
   246dc:	294e3284 	addi	r5,r5,14538
   246e0:	d9412c15 	stw	r5,1200(sp)
   246e4:	054001c4 	movi	r21,7
   246e8:	00000306 	br	246f8 <___vfprintf_internal_r+0xf28>
   246ec:	42000204 	addi	r8,r8,8
   246f0:	843ffc04 	addi	r16,r16,-16
   246f4:	9400790e 	bge	r18,r16,248dc <___vfprintf_internal_r+0x110c>
   246f8:	18c00404 	addi	r3,r3,16
   246fc:	10800044 	addi	r2,r2,1
   24700:	45000015 	stw	r20,0(r8)
   24704:	44800115 	stw	r18,4(r8)
   24708:	d8c12015 	stw	r3,1152(sp)
   2470c:	d8811f15 	stw	r2,1148(sp)
   24710:	a8bff60e 	bge	r21,r2,246ec <__alt_data_end+0xfffe4b1c>
   24714:	b009883a 	mov	r4,r22
   24718:	b80b883a 	mov	r5,r23
   2471c:	d9811e04 	addi	r6,sp,1144
   24720:	002bd780 	call	2bd78 <__sprint_r>
   24724:	103d411e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24728:	d8c12017 	ldw	r3,1152(sp)
   2472c:	d8811f17 	ldw	r2,1148(sp)
   24730:	da000404 	addi	r8,sp,16
   24734:	003fee06 	br	246f0 <__alt_data_end+0xfffe4b20>
   24738:	dac12e17 	ldw	r11,1208(sp)
   2473c:	db012b17 	ldw	r12,1196(sp)
   24740:	5b2bc83a 	sub	r21,r11,r12
   24744:	057e130e 	bge	zero,r21,23f94 <__alt_data_end+0xfffe43c4>
   24748:	07000404 	movi	fp,16
   2474c:	d8811f17 	ldw	r2,1148(sp)
   24750:	e543640e 	bge	fp,r21,254e4 <___vfprintf_internal_r+0x1d14>
   24754:	014000f4 	movhi	r5,3
   24758:	294e3284 	addi	r5,r5,14538
   2475c:	d9412c15 	stw	r5,1200(sp)
   24760:	04c001c4 	movi	r19,7
   24764:	00000306 	br	24774 <___vfprintf_internal_r+0xfa4>
   24768:	ad7ffc04 	addi	r21,r21,-16
   2476c:	42000204 	addi	r8,r8,8
   24770:	e540110e 	bge	fp,r21,247b8 <___vfprintf_internal_r+0xfe8>
   24774:	18c00404 	addi	r3,r3,16
   24778:	10800044 	addi	r2,r2,1
   2477c:	45000015 	stw	r20,0(r8)
   24780:	47000115 	stw	fp,4(r8)
   24784:	d8c12015 	stw	r3,1152(sp)
   24788:	d8811f15 	stw	r2,1148(sp)
   2478c:	98bff60e 	bge	r19,r2,24768 <__alt_data_end+0xfffe4b98>
   24790:	b009883a 	mov	r4,r22
   24794:	b80b883a 	mov	r5,r23
   24798:	d9811e04 	addi	r6,sp,1144
   2479c:	002bd780 	call	2bd78 <__sprint_r>
   247a0:	103d221e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   247a4:	ad7ffc04 	addi	r21,r21,-16
   247a8:	d8c12017 	ldw	r3,1152(sp)
   247ac:	d8811f17 	ldw	r2,1148(sp)
   247b0:	da000404 	addi	r8,sp,16
   247b4:	e57fef16 	blt	fp,r21,24774 <__alt_data_end+0xfffe4ba4>
   247b8:	dac12c17 	ldw	r11,1200(sp)
   247bc:	1d47883a 	add	r3,r3,r21
   247c0:	10800044 	addi	r2,r2,1
   247c4:	42c00015 	stw	r11,0(r8)
   247c8:	45400115 	stw	r21,4(r8)
   247cc:	d8c12015 	stw	r3,1152(sp)
   247d0:	d8811f15 	stw	r2,1148(sp)
   247d4:	010001c4 	movi	r4,7
   247d8:	20819116 	blt	r4,r2,24e20 <___vfprintf_internal_r+0x1650>
   247dc:	42000204 	addi	r8,r8,8
   247e0:	003dec06 	br	23f94 <__alt_data_end+0xfffe43c4>
   247e4:	db013317 	ldw	r12,1228(sp)
   247e8:	00800044 	movi	r2,1
   247ec:	18c00044 	addi	r3,r3,1
   247f0:	1301530e 	bge	r2,r12,24d40 <___vfprintf_internal_r+0x1570>
   247f4:	dc011f17 	ldw	r16,1148(sp)
   247f8:	dac13117 	ldw	r11,1220(sp)
   247fc:	00800044 	movi	r2,1
   24800:	84000044 	addi	r16,r16,1
   24804:	40800115 	stw	r2,4(r8)
   24808:	42c00015 	stw	r11,0(r8)
   2480c:	d8c12015 	stw	r3,1152(sp)
   24810:	dc011f15 	stw	r16,1148(sp)
   24814:	008001c4 	movi	r2,7
   24818:	14016b16 	blt	r2,r16,24dc8 <___vfprintf_internal_r+0x15f8>
   2481c:	42000204 	addi	r8,r8,8
   24820:	db013817 	ldw	r12,1248(sp)
   24824:	dac13517 	ldw	r11,1236(sp)
   24828:	84000044 	addi	r16,r16,1
   2482c:	1b07883a 	add	r3,r3,r12
   24830:	42c00015 	stw	r11,0(r8)
   24834:	43000115 	stw	r12,4(r8)
   24838:	d8c12015 	stw	r3,1152(sp)
   2483c:	dc011f15 	stw	r16,1148(sp)
   24840:	008001c4 	movi	r2,7
   24844:	14016916 	blt	r2,r16,24dec <___vfprintf_internal_r+0x161c>
   24848:	44800204 	addi	r18,r8,8
   2484c:	d9013717 	ldw	r4,1244(sp)
   24850:	d9413917 	ldw	r5,1252(sp)
   24854:	000d883a 	mov	r6,zero
   24858:	000f883a 	mov	r7,zero
   2485c:	d8c13d15 	stw	r3,1268(sp)
   24860:	002f82c0 	call	2f82c <__eqdf2>
   24864:	d8c13d17 	ldw	r3,1268(sp)
   24868:	db013317 	ldw	r12,1228(sp)
   2486c:	1000ae26 	beq	r2,zero,24b28 <___vfprintf_internal_r+0x1358>
   24870:	dac13117 	ldw	r11,1220(sp)
   24874:	60bfffc4 	addi	r2,r12,-1
   24878:	1887883a 	add	r3,r3,r2
   2487c:	59000044 	addi	r4,r11,1
   24880:	84000044 	addi	r16,r16,1
   24884:	90800115 	stw	r2,4(r18)
   24888:	91000015 	stw	r4,0(r18)
   2488c:	d8c12015 	stw	r3,1152(sp)
   24890:	dc011f15 	stw	r16,1148(sp)
   24894:	008001c4 	movi	r2,7
   24898:	14014216 	blt	r2,r16,24da4 <___vfprintf_internal_r+0x15d4>
   2489c:	94800204 	addi	r18,r18,8
   248a0:	dac13a17 	ldw	r11,1256(sp)
   248a4:	dd4122c4 	addi	r21,sp,1163
   248a8:	84000044 	addi	r16,r16,1
   248ac:	58c7883a 	add	r3,r11,r3
   248b0:	95400015 	stw	r21,0(r18)
   248b4:	92c00115 	stw	r11,4(r18)
   248b8:	d8c12015 	stw	r3,1152(sp)
   248bc:	dc011f15 	stw	r16,1148(sp)
   248c0:	008001c4 	movi	r2,7
   248c4:	14000e16 	blt	r2,r16,24900 <___vfprintf_internal_r+0x1130>
   248c8:	92000204 	addi	r8,r18,8
   248cc:	003de706 	br	2406c <__alt_data_end+0xfffe449c>
   248d0:	010000f4 	movhi	r4,3
   248d4:	210e3284 	addi	r4,r4,14538
   248d8:	d9012c15 	stw	r4,1200(sp)
   248dc:	dac12c17 	ldw	r11,1200(sp)
   248e0:	1c07883a 	add	r3,r3,r16
   248e4:	44000115 	stw	r16,4(r8)
   248e8:	42c00015 	stw	r11,0(r8)
   248ec:	10800044 	addi	r2,r2,1
   248f0:	d8c12015 	stw	r3,1152(sp)
   248f4:	d8811f15 	stw	r2,1148(sp)
   248f8:	010001c4 	movi	r4,7
   248fc:	20bdda0e 	bge	r4,r2,24068 <__alt_data_end+0xfffe4498>
   24900:	b009883a 	mov	r4,r22
   24904:	b80b883a 	mov	r5,r23
   24908:	d9811e04 	addi	r6,sp,1144
   2490c:	002bd780 	call	2bd78 <__sprint_r>
   24910:	103cc61e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24914:	d8c12017 	ldw	r3,1152(sp)
   24918:	da000404 	addi	r8,sp,16
   2491c:	003dd306 	br	2406c <__alt_data_end+0xfffe449c>
   24920:	b009883a 	mov	r4,r22
   24924:	b80b883a 	mov	r5,r23
   24928:	d9811e04 	addi	r6,sp,1144
   2492c:	002bd780 	call	2bd78 <__sprint_r>
   24930:	103e0926 	beq	r2,zero,24158 <__alt_data_end+0xfffe4588>
   24934:	003cbd06 	br	23c2c <__alt_data_end+0xfffe405c>
   24938:	10803fcc 	andi	r2,r2,255
   2493c:	1000651e 	bne	r2,zero,24ad4 <___vfprintf_internal_r+0x1304>
   24940:	8880004c 	andi	r2,r17,1
   24944:	10013226 	beq	r2,zero,24e10 <___vfprintf_internal_r+0x1640>
   24948:	00800c04 	movi	r2,48
   2494c:	d8c10dc4 	addi	r3,sp,1079
   24950:	d8810dc5 	stb	r2,1079(sp)
   24954:	dc813c17 	ldw	r18,1264(sp)
   24958:	d8c13115 	stw	r3,1220(sp)
   2495c:	003d2b06 	br	23e0c <__alt_data_end+0xfffe423c>
   24960:	b009883a 	mov	r4,r22
   24964:	b80b883a 	mov	r5,r23
   24968:	d9811e04 	addi	r6,sp,1144
   2496c:	002bd780 	call	2bd78 <__sprint_r>
   24970:	103cae1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24974:	d8c12017 	ldw	r3,1152(sp)
   24978:	da000404 	addi	r8,sp,16
   2497c:	003dae06 	br	24038 <__alt_data_end+0xfffe4468>
   24980:	b009883a 	mov	r4,r22
   24984:	b80b883a 	mov	r5,r23
   24988:	d9811e04 	addi	r6,sp,1144
   2498c:	002bd780 	call	2bd78 <__sprint_r>
   24990:	103ca61e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24994:	d8c12017 	ldw	r3,1152(sp)
   24998:	da000404 	addi	r8,sp,16
   2499c:	003d6c06 	br	23f50 <__alt_data_end+0xfffe4380>
   249a0:	b009883a 	mov	r4,r22
   249a4:	b80b883a 	mov	r5,r23
   249a8:	d9811e04 	addi	r6,sp,1144
   249ac:	002bd780 	call	2bd78 <__sprint_r>
   249b0:	103c9e1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   249b4:	d8c12017 	ldw	r3,1152(sp)
   249b8:	da000404 	addi	r8,sp,16
   249bc:	003d7206 	br	23f88 <__alt_data_end+0xfffe43b8>
   249c0:	d9413b17 	ldw	r5,1260(sp)
   249c4:	d8c10e04 	addi	r3,sp,1080
   249c8:	988003cc 	andi	r2,r19,15
   249cc:	e008973a 	slli	r4,fp,28
   249d0:	2885883a 	add	r2,r5,r2
   249d4:	9826d13a 	srli	r19,r19,4
   249d8:	10800003 	ldbu	r2,0(r2)
   249dc:	e038d13a 	srli	fp,fp,4
   249e0:	18ffffc4 	addi	r3,r3,-1
   249e4:	24e6b03a 	or	r19,r4,r19
   249e8:	18800005 	stb	r2,0(r3)
   249ec:	9f04b03a 	or	r2,r19,fp
   249f0:	103ff51e 	bne	r2,zero,249c8 <__alt_data_end+0xfffe4df8>
   249f4:	db012817 	ldw	r12,1184(sp)
   249f8:	d8c13115 	stw	r3,1220(sp)
   249fc:	60e5c83a 	sub	r18,r12,r3
   24a00:	003d0206 	br	23e0c <__alt_data_end+0xfffe423c>
   24a04:	dc012617 	ldw	r16,1176(sp)
   24a08:	0401b10e 	bge	zero,r16,250d0 <___vfprintf_internal_r+0x1900>
   24a0c:	db013117 	ldw	r12,1220(sp)
   24a10:	dac13317 	ldw	r11,1228(sp)
   24a14:	62e1883a 	add	r16,r12,r11
   24a18:	db013417 	ldw	r12,1232(sp)
   24a1c:	5825883a 	mov	r18,r11
   24a20:	62c0010e 	bge	r12,r11,24a28 <___vfprintf_internal_r+0x1258>
   24a24:	6025883a 	mov	r18,r12
   24a28:	04800b0e 	bge	zero,r18,24a58 <___vfprintf_internal_r+0x1288>
   24a2c:	d8811f17 	ldw	r2,1148(sp)
   24a30:	dac13117 	ldw	r11,1220(sp)
   24a34:	1c87883a 	add	r3,r3,r18
   24a38:	10800044 	addi	r2,r2,1
   24a3c:	42c00015 	stw	r11,0(r8)
   24a40:	44800115 	stw	r18,4(r8)
   24a44:	d8c12015 	stw	r3,1152(sp)
   24a48:	d8811f15 	stw	r2,1148(sp)
   24a4c:	010001c4 	movi	r4,7
   24a50:	20824f16 	blt	r4,r2,25390 <___vfprintf_internal_r+0x1bc0>
   24a54:	42000204 	addi	r8,r8,8
   24a58:	90024b16 	blt	r18,zero,25388 <___vfprintf_internal_r+0x1bb8>
   24a5c:	db013417 	ldw	r12,1232(sp)
   24a60:	64a5c83a 	sub	r18,r12,r18
   24a64:	0480730e 	bge	zero,r18,24c34 <___vfprintf_internal_r+0x1464>
   24a68:	05400404 	movi	r21,16
   24a6c:	d8811f17 	ldw	r2,1148(sp)
   24a70:	ac817d0e 	bge	r21,r18,25068 <___vfprintf_internal_r+0x1898>
   24a74:	014000f4 	movhi	r5,3
   24a78:	294e3284 	addi	r5,r5,14538
   24a7c:	d9412c15 	stw	r5,1200(sp)
   24a80:	070001c4 	movi	fp,7
   24a84:	00000306 	br	24a94 <___vfprintf_internal_r+0x12c4>
   24a88:	42000204 	addi	r8,r8,8
   24a8c:	94bffc04 	addi	r18,r18,-16
   24a90:	ac81780e 	bge	r21,r18,25074 <___vfprintf_internal_r+0x18a4>
   24a94:	18c00404 	addi	r3,r3,16
   24a98:	10800044 	addi	r2,r2,1
   24a9c:	45000015 	stw	r20,0(r8)
   24aa0:	45400115 	stw	r21,4(r8)
   24aa4:	d8c12015 	stw	r3,1152(sp)
   24aa8:	d8811f15 	stw	r2,1148(sp)
   24aac:	e0bff60e 	bge	fp,r2,24a88 <__alt_data_end+0xfffe4eb8>
   24ab0:	b009883a 	mov	r4,r22
   24ab4:	b80b883a 	mov	r5,r23
   24ab8:	d9811e04 	addi	r6,sp,1144
   24abc:	002bd780 	call	2bd78 <__sprint_r>
   24ac0:	103c5a1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24ac4:	d8c12017 	ldw	r3,1152(sp)
   24ac8:	d8811f17 	ldw	r2,1148(sp)
   24acc:	da000404 	addi	r8,sp,16
   24ad0:	003fee06 	br	24a8c <__alt_data_end+0xfffe4ebc>
   24ad4:	dac10e04 	addi	r11,sp,1080
   24ad8:	0025883a 	mov	r18,zero
   24adc:	dac13115 	stw	r11,1220(sp)
   24ae0:	003cca06 	br	23e0c <__alt_data_end+0xfffe423c>
   24ae4:	b009883a 	mov	r4,r22
   24ae8:	b80b883a 	mov	r5,r23
   24aec:	d9811e04 	addi	r6,sp,1144
   24af0:	002bd780 	call	2bd78 <__sprint_r>
   24af4:	103c4d1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24af8:	d8c12017 	ldw	r3,1152(sp)
   24afc:	d8812787 	ldb	r2,1182(sp)
   24b00:	da000404 	addi	r8,sp,16
   24b04:	003d0506 	br	23f1c <__alt_data_end+0xfffe434c>
   24b08:	dac12d17 	ldw	r11,1204(sp)
   24b0c:	14c00017 	ldw	r19,0(r2)
   24b10:	0039883a 	mov	fp,zero
   24b14:	5ac00104 	addi	r11,r11,4
   24b18:	dac12d15 	stw	r11,1204(sp)
   24b1c:	0005883a 	mov	r2,zero
   24b20:	9807883a 	mov	r3,r19
   24b24:	003c9c06 	br	23d98 <__alt_data_end+0xfffe41c8>
   24b28:	657fffc4 	addi	r21,r12,-1
   24b2c:	057f5c0e 	bge	zero,r21,248a0 <__alt_data_end+0xfffe4cd0>
   24b30:	07000404 	movi	fp,16
   24b34:	e5408f0e 	bge	fp,r21,24d74 <___vfprintf_internal_r+0x15a4>
   24b38:	010000f4 	movhi	r4,3
   24b3c:	210e3284 	addi	r4,r4,14538
   24b40:	d9012c15 	stw	r4,1200(sp)
   24b44:	01c001c4 	movi	r7,7
   24b48:	00000306 	br	24b58 <___vfprintf_internal_r+0x1388>
   24b4c:	94800204 	addi	r18,r18,8
   24b50:	ad7ffc04 	addi	r21,r21,-16
   24b54:	e5408a0e 	bge	fp,r21,24d80 <___vfprintf_internal_r+0x15b0>
   24b58:	18c00404 	addi	r3,r3,16
   24b5c:	84000044 	addi	r16,r16,1
   24b60:	95000015 	stw	r20,0(r18)
   24b64:	97000115 	stw	fp,4(r18)
   24b68:	d8c12015 	stw	r3,1152(sp)
   24b6c:	dc011f15 	stw	r16,1148(sp)
   24b70:	3c3ff60e 	bge	r7,r16,24b4c <__alt_data_end+0xfffe4f7c>
   24b74:	b009883a 	mov	r4,r22
   24b78:	b80b883a 	mov	r5,r23
   24b7c:	d9811e04 	addi	r6,sp,1144
   24b80:	d9c13d15 	stw	r7,1268(sp)
   24b84:	002bd780 	call	2bd78 <__sprint_r>
   24b88:	d9c13d17 	ldw	r7,1268(sp)
   24b8c:	103c271e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24b90:	d8c12017 	ldw	r3,1152(sp)
   24b94:	dc011f17 	ldw	r16,1148(sp)
   24b98:	dc800404 	addi	r18,sp,16
   24b9c:	003fec06 	br	24b50 <__alt_data_end+0xfffe4f80>
   24ba0:	1cc00017 	ldw	r19,0(r3)
   24ba4:	dac12d17 	ldw	r11,1204(sp)
   24ba8:	9839d7fa 	srai	fp,r19,31
   24bac:	5ac00104 	addi	r11,r11,4
   24bb0:	dac12d15 	stw	r11,1204(sp)
   24bb4:	e005883a 	mov	r2,fp
   24bb8:	003d9006 	br	241fc <__alt_data_end+0xfffe462c>
   24bbc:	00800084 	movi	r2,2
   24bc0:	9f06b03a 	or	r3,r19,fp
   24bc4:	003c7406 	br	23d98 <__alt_data_end+0xfffe41c8>
   24bc8:	db012d17 	ldw	r12,1204(sp)
   24bcc:	14c00017 	ldw	r19,0(r2)
   24bd0:	0039883a 	mov	fp,zero
   24bd4:	63000104 	addi	r12,r12,4
   24bd8:	db012d15 	stw	r12,1204(sp)
   24bdc:	00800044 	movi	r2,1
   24be0:	9807883a 	mov	r3,r19
   24be4:	003c6c06 	br	23d98 <__alt_data_end+0xfffe41c8>
   24be8:	10803fcc 	andi	r2,r2,255
   24bec:	1080201c 	xori	r2,r2,128
   24bf0:	10bfe004 	addi	r2,r2,-128
   24bf4:	01000c04 	movi	r4,48
   24bf8:	1101a526 	beq	r2,r4,25290 <___vfprintf_internal_r+0x1ac0>
   24bfc:	dac13117 	ldw	r11,1220(sp)
   24c00:	db012817 	ldw	r12,1184(sp)
   24c04:	193fffc5 	stb	r4,-1(r3)
   24c08:	5affffc4 	addi	r11,r11,-1
   24c0c:	dac13115 	stw	r11,1220(sp)
   24c10:	62e5c83a 	sub	r18,r12,r11
   24c14:	003c7d06 	br	23e0c <__alt_data_end+0xfffe423c>
   24c18:	b009883a 	mov	r4,r22
   24c1c:	b80b883a 	mov	r5,r23
   24c20:	d9811e04 	addi	r6,sp,1144
   24c24:	002bd780 	call	2bd78 <__sprint_r>
   24c28:	103c001e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24c2c:	d8c12017 	ldw	r3,1152(sp)
   24c30:	da000404 	addi	r8,sp,16
   24c34:	db013117 	ldw	r12,1220(sp)
   24c38:	dac13417 	ldw	r11,1232(sp)
   24c3c:	d8812617 	ldw	r2,1176(sp)
   24c40:	62e5883a 	add	r18,r12,r11
   24c44:	db013317 	ldw	r12,1228(sp)
   24c48:	13000216 	blt	r2,r12,24c54 <___vfprintf_internal_r+0x1484>
   24c4c:	8900004c 	andi	r4,r17,1
   24c50:	20000c26 	beq	r4,zero,24c84 <___vfprintf_internal_r+0x14b4>
   24c54:	dac13817 	ldw	r11,1248(sp)
   24c58:	d9011f17 	ldw	r4,1148(sp)
   24c5c:	db013517 	ldw	r12,1236(sp)
   24c60:	1ac7883a 	add	r3,r3,r11
   24c64:	21000044 	addi	r4,r4,1
   24c68:	43000015 	stw	r12,0(r8)
   24c6c:	42c00115 	stw	r11,4(r8)
   24c70:	d8c12015 	stw	r3,1152(sp)
   24c74:	d9011f15 	stw	r4,1148(sp)
   24c78:	014001c4 	movi	r5,7
   24c7c:	2901cc16 	blt	r5,r4,253b0 <___vfprintf_internal_r+0x1be0>
   24c80:	42000204 	addi	r8,r8,8
   24c84:	dac13317 	ldw	r11,1228(sp)
   24c88:	8489c83a 	sub	r4,r16,r18
   24c8c:	5885c83a 	sub	r2,r11,r2
   24c90:	1021883a 	mov	r16,r2
   24c94:	2080010e 	bge	r4,r2,24c9c <___vfprintf_internal_r+0x14cc>
   24c98:	2021883a 	mov	r16,r4
   24c9c:	04000a0e 	bge	zero,r16,24cc8 <___vfprintf_internal_r+0x14f8>
   24ca0:	d9011f17 	ldw	r4,1148(sp)
   24ca4:	1c07883a 	add	r3,r3,r16
   24ca8:	44800015 	stw	r18,0(r8)
   24cac:	21000044 	addi	r4,r4,1
   24cb0:	44000115 	stw	r16,4(r8)
   24cb4:	d8c12015 	stw	r3,1152(sp)
   24cb8:	d9011f15 	stw	r4,1148(sp)
   24cbc:	014001c4 	movi	r5,7
   24cc0:	2901d616 	blt	r5,r4,2541c <___vfprintf_internal_r+0x1c4c>
   24cc4:	42000204 	addi	r8,r8,8
   24cc8:	8001df16 	blt	r16,zero,25448 <___vfprintf_internal_r+0x1c78>
   24ccc:	1421c83a 	sub	r16,r2,r16
   24cd0:	043ce60e 	bge	zero,r16,2406c <__alt_data_end+0xfffe449c>
   24cd4:	04800404 	movi	r18,16
   24cd8:	d8811f17 	ldw	r2,1148(sp)
   24cdc:	943efc0e 	bge	r18,r16,248d0 <__alt_data_end+0xfffe4d00>
   24ce0:	014000f4 	movhi	r5,3
   24ce4:	294e3284 	addi	r5,r5,14538
   24ce8:	d9412c15 	stw	r5,1200(sp)
   24cec:	054001c4 	movi	r21,7
   24cf0:	00000306 	br	24d00 <___vfprintf_internal_r+0x1530>
   24cf4:	42000204 	addi	r8,r8,8
   24cf8:	843ffc04 	addi	r16,r16,-16
   24cfc:	943ef70e 	bge	r18,r16,248dc <__alt_data_end+0xfffe4d0c>
   24d00:	18c00404 	addi	r3,r3,16
   24d04:	10800044 	addi	r2,r2,1
   24d08:	45000015 	stw	r20,0(r8)
   24d0c:	44800115 	stw	r18,4(r8)
   24d10:	d8c12015 	stw	r3,1152(sp)
   24d14:	d8811f15 	stw	r2,1148(sp)
   24d18:	a8bff60e 	bge	r21,r2,24cf4 <__alt_data_end+0xfffe5124>
   24d1c:	b009883a 	mov	r4,r22
   24d20:	b80b883a 	mov	r5,r23
   24d24:	d9811e04 	addi	r6,sp,1144
   24d28:	002bd780 	call	2bd78 <__sprint_r>
   24d2c:	103bbf1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24d30:	d8c12017 	ldw	r3,1152(sp)
   24d34:	d8811f17 	ldw	r2,1148(sp)
   24d38:	da000404 	addi	r8,sp,16
   24d3c:	003fee06 	br	24cf8 <__alt_data_end+0xfffe5128>
   24d40:	8888703a 	and	r4,r17,r2
   24d44:	203eab1e 	bne	r4,zero,247f4 <__alt_data_end+0xfffe4c24>
   24d48:	dc011f17 	ldw	r16,1148(sp)
   24d4c:	db013117 	ldw	r12,1220(sp)
   24d50:	40800115 	stw	r2,4(r8)
   24d54:	84000044 	addi	r16,r16,1
   24d58:	43000015 	stw	r12,0(r8)
   24d5c:	d8c12015 	stw	r3,1152(sp)
   24d60:	dc011f15 	stw	r16,1148(sp)
   24d64:	008001c4 	movi	r2,7
   24d68:	14000e16 	blt	r2,r16,24da4 <___vfprintf_internal_r+0x15d4>
   24d6c:	44800204 	addi	r18,r8,8
   24d70:	003ecb06 	br	248a0 <__alt_data_end+0xfffe4cd0>
   24d74:	008000f4 	movhi	r2,3
   24d78:	108e3284 	addi	r2,r2,14538
   24d7c:	d8812c15 	stw	r2,1200(sp)
   24d80:	dac12c17 	ldw	r11,1200(sp)
   24d84:	1d47883a 	add	r3,r3,r21
   24d88:	84000044 	addi	r16,r16,1
   24d8c:	92c00015 	stw	r11,0(r18)
   24d90:	95400115 	stw	r21,4(r18)
   24d94:	d8c12015 	stw	r3,1152(sp)
   24d98:	dc011f15 	stw	r16,1148(sp)
   24d9c:	008001c4 	movi	r2,7
   24da0:	143ebe0e 	bge	r2,r16,2489c <__alt_data_end+0xfffe4ccc>
   24da4:	b009883a 	mov	r4,r22
   24da8:	b80b883a 	mov	r5,r23
   24dac:	d9811e04 	addi	r6,sp,1144
   24db0:	002bd780 	call	2bd78 <__sprint_r>
   24db4:	103b9d1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24db8:	d8c12017 	ldw	r3,1152(sp)
   24dbc:	dc011f17 	ldw	r16,1148(sp)
   24dc0:	dc800404 	addi	r18,sp,16
   24dc4:	003eb606 	br	248a0 <__alt_data_end+0xfffe4cd0>
   24dc8:	b009883a 	mov	r4,r22
   24dcc:	b80b883a 	mov	r5,r23
   24dd0:	d9811e04 	addi	r6,sp,1144
   24dd4:	002bd780 	call	2bd78 <__sprint_r>
   24dd8:	103b941e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24ddc:	d8c12017 	ldw	r3,1152(sp)
   24de0:	dc011f17 	ldw	r16,1148(sp)
   24de4:	da000404 	addi	r8,sp,16
   24de8:	003e8d06 	br	24820 <__alt_data_end+0xfffe4c50>
   24dec:	b009883a 	mov	r4,r22
   24df0:	b80b883a 	mov	r5,r23
   24df4:	d9811e04 	addi	r6,sp,1144
   24df8:	002bd780 	call	2bd78 <__sprint_r>
   24dfc:	103b8b1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24e00:	d8c12017 	ldw	r3,1152(sp)
   24e04:	dc011f17 	ldw	r16,1148(sp)
   24e08:	dc800404 	addi	r18,sp,16
   24e0c:	003e8f06 	br	2484c <__alt_data_end+0xfffe4c7c>
   24e10:	db010e04 	addi	r12,sp,1080
   24e14:	0025883a 	mov	r18,zero
   24e18:	db013115 	stw	r12,1220(sp)
   24e1c:	003bfb06 	br	23e0c <__alt_data_end+0xfffe423c>
   24e20:	b009883a 	mov	r4,r22
   24e24:	b80b883a 	mov	r5,r23
   24e28:	d9811e04 	addi	r6,sp,1144
   24e2c:	002bd780 	call	2bd78 <__sprint_r>
   24e30:	103b7e1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   24e34:	d8c12017 	ldw	r3,1152(sp)
   24e38:	da000404 	addi	r8,sp,16
   24e3c:	003c5506 	br	23f94 <__alt_data_end+0xfffe43c4>
   24e40:	04e7c83a 	sub	r19,zero,r19
   24e44:	9804c03a 	cmpne	r2,r19,zero
   24e48:	0739c83a 	sub	fp,zero,fp
   24e4c:	e0b9c83a 	sub	fp,fp,r2
   24e50:	05400b44 	movi	r21,45
   24e54:	dd412785 	stb	r21,1182(sp)
   24e58:	da413215 	stw	r9,1224(sp)
   24e5c:	00800044 	movi	r2,1
   24e60:	9f06b03a 	or	r3,r19,fp
   24e64:	003bcf06 	br	23da4 <__alt_data_end+0xfffe41d4>
   24e68:	da013f15 	stw	r8,1276(sp)
   24e6c:	da413e15 	stw	r9,1272(sp)
   24e70:	002a7a40 	call	2a7a4 <__fpclassifyd>
   24e74:	da013f17 	ldw	r8,1276(sp)
   24e78:	da413e17 	ldw	r9,1272(sp)
   24e7c:	1000ce26 	beq	r2,zero,251b8 <___vfprintf_internal_r+0x19e8>
   24e80:	057ff7c4 	movi	r21,-33
   24e84:	00bfffc4 	movi	r2,-1
   24e88:	856a703a 	and	r21,r16,r21
   24e8c:	4881f026 	beq	r9,r2,25650 <___vfprintf_internal_r+0x1e80>
   24e90:	008011c4 	movi	r2,71
   24e94:	a881e526 	beq	r21,r2,2562c <___vfprintf_internal_r+0x1e5c>
   24e98:	db013917 	ldw	r12,1252(sp)
   24e9c:	8ac04014 	ori	r11,r17,256
   24ea0:	dac12d15 	stw	r11,1204(sp)
   24ea4:	6001e416 	blt	r12,zero,25638 <___vfprintf_internal_r+0x1e68>
   24ea8:	dc813917 	ldw	r18,1252(sp)
   24eac:	d8012b05 	stb	zero,1196(sp)
   24eb0:	00801984 	movi	r2,102
   24eb4:	80811826 	beq	r16,r2,25318 <___vfprintf_internal_r+0x1b48>
   24eb8:	00801184 	movi	r2,70
   24ebc:	80811626 	beq	r16,r2,25318 <___vfprintf_internal_r+0x1b48>
   24ec0:	00801144 	movi	r2,69
   24ec4:	a881e026 	beq	r21,r2,25648 <___vfprintf_internal_r+0x1e78>
   24ec8:	4839883a 	mov	fp,r9
   24ecc:	d8812604 	addi	r2,sp,1176
   24ed0:	d8800115 	stw	r2,4(sp)
   24ed4:	d9413717 	ldw	r5,1244(sp)
   24ed8:	d8812504 	addi	r2,sp,1172
   24edc:	d8800215 	stw	r2,8(sp)
   24ee0:	d8812104 	addi	r2,sp,1156
   24ee4:	df000015 	stw	fp,0(sp)
   24ee8:	d8800315 	stw	r2,12(sp)
   24eec:	b009883a 	mov	r4,r22
   24ef0:	900d883a 	mov	r6,r18
   24ef4:	01c00084 	movi	r7,2
   24ef8:	da013f15 	stw	r8,1276(sp)
   24efc:	da413e15 	stw	r9,1272(sp)
   24f00:	0025c500 	call	25c50 <_dtoa_r>
   24f04:	d8813115 	stw	r2,1220(sp)
   24f08:	008019c4 	movi	r2,103
   24f0c:	da013f17 	ldw	r8,1276(sp)
   24f10:	da413e17 	ldw	r9,1272(sp)
   24f14:	80800226 	beq	r16,r2,24f20 <___vfprintf_internal_r+0x1750>
   24f18:	008011c4 	movi	r2,71
   24f1c:	8081101e 	bne	r16,r2,25360 <___vfprintf_internal_r+0x1b90>
   24f20:	8880004c 	andi	r2,r17,1
   24f24:	1001df26 	beq	r2,zero,256a4 <___vfprintf_internal_r+0x1ed4>
   24f28:	db013117 	ldw	r12,1220(sp)
   24f2c:	6715883a 	add	r10,r12,fp
   24f30:	d9013717 	ldw	r4,1244(sp)
   24f34:	900b883a 	mov	r5,r18
   24f38:	000d883a 	mov	r6,zero
   24f3c:	000f883a 	mov	r7,zero
   24f40:	da013f15 	stw	r8,1276(sp)
   24f44:	da413e15 	stw	r9,1272(sp)
   24f48:	da813d15 	stw	r10,1268(sp)
   24f4c:	002f82c0 	call	2f82c <__eqdf2>
   24f50:	da013f17 	ldw	r8,1276(sp)
   24f54:	da413e17 	ldw	r9,1272(sp)
   24f58:	da813d17 	ldw	r10,1268(sp)
   24f5c:	10016526 	beq	r2,zero,254f4 <___vfprintf_internal_r+0x1d24>
   24f60:	d8812117 	ldw	r2,1156(sp)
   24f64:	1280062e 	bgeu	r2,r10,24f80 <___vfprintf_internal_r+0x17b0>
   24f68:	01000c04 	movi	r4,48
   24f6c:	10c00044 	addi	r3,r2,1
   24f70:	d8c12115 	stw	r3,1156(sp)
   24f74:	11000005 	stb	r4,0(r2)
   24f78:	d8812117 	ldw	r2,1156(sp)
   24f7c:	12bffb36 	bltu	r2,r10,24f6c <__alt_data_end+0xfffe539c>
   24f80:	db013117 	ldw	r12,1220(sp)
   24f84:	1305c83a 	sub	r2,r2,r12
   24f88:	d8813315 	stw	r2,1228(sp)
   24f8c:	008011c4 	movi	r2,71
   24f90:	a8814a26 	beq	r21,r2,254bc <___vfprintf_internal_r+0x1cec>
   24f94:	00801944 	movi	r2,101
   24f98:	14020a0e 	bge	r2,r16,257c4 <___vfprintf_internal_r+0x1ff4>
   24f9c:	00801984 	movi	r2,102
   24fa0:	8081b626 	beq	r16,r2,2567c <___vfprintf_internal_r+0x1eac>
   24fa4:	db012617 	ldw	r12,1176(sp)
   24fa8:	db013415 	stw	r12,1232(sp)
   24fac:	db013417 	ldw	r12,1232(sp)
   24fb0:	dac13317 	ldw	r11,1228(sp)
   24fb4:	62c1a816 	blt	r12,r11,25658 <___vfprintf_internal_r+0x1e88>
   24fb8:	8c40004c 	andi	r17,r17,1
   24fbc:	8801ca1e 	bne	r17,zero,256e8 <___vfprintf_internal_r+0x1f18>
   24fc0:	6005883a 	mov	r2,r12
   24fc4:	6001b516 	blt	r12,zero,2569c <___vfprintf_internal_r+0x1ecc>
   24fc8:	dc813417 	ldw	r18,1232(sp)
   24fcc:	df012b07 	ldb	fp,1196(sp)
   24fd0:	e001321e 	bne	fp,zero,2549c <___vfprintf_internal_r+0x1ccc>
   24fd4:	dc412d17 	ldw	r17,1204(sp)
   24fd8:	dd412783 	ldbu	r21,1182(sp)
   24fdc:	d8812b15 	stw	r2,1196(sp)
   24fe0:	dcc12d15 	stw	r19,1204(sp)
   24fe4:	d8013215 	stw	zero,1224(sp)
   24fe8:	003b8d06 	br	23e20 <__alt_data_end+0xfffe4250>
   24fec:	88c0100c 	andi	r3,r17,64
   24ff0:	18008226 	beq	r3,zero,251fc <___vfprintf_internal_r+0x1a2c>
   24ff4:	dac12d17 	ldw	r11,1204(sp)
   24ff8:	14c0000b 	ldhu	r19,0(r2)
   24ffc:	0039883a 	mov	fp,zero
   25000:	5ac00104 	addi	r11,r11,4
   25004:	dac12d15 	stw	r11,1204(sp)
   25008:	003c8f06 	br	24248 <__alt_data_end+0xfffe4678>
   2500c:	1c000007 	ldb	r16,0(r3)
   25010:	1805883a 	mov	r2,r3
   25014:	003a5506 	br	2396c <__alt_data_end+0xfffe3d9c>
   25018:	00800084 	movi	r2,2
   2501c:	003b5e06 	br	23d98 <__alt_data_end+0xfffe41c8>
   25020:	8880040c 	andi	r2,r17,16
   25024:	1000091e 	bne	r2,zero,2504c <___vfprintf_internal_r+0x187c>
   25028:	8c40100c 	andi	r17,r17,64
   2502c:	88000726 	beq	r17,zero,2504c <___vfprintf_internal_r+0x187c>
   25030:	db012d17 	ldw	r12,1204(sp)
   25034:	dac12f17 	ldw	r11,1212(sp)
   25038:	60800017 	ldw	r2,0(r12)
   2503c:	63000104 	addi	r12,r12,4
   25040:	db012d15 	stw	r12,1204(sp)
   25044:	12c0000d 	sth	r11,0(r2)
   25048:	003a1e06 	br	238c4 <__alt_data_end+0xfffe3cf4>
   2504c:	db012d17 	ldw	r12,1204(sp)
   25050:	dac12f17 	ldw	r11,1212(sp)
   25054:	60800017 	ldw	r2,0(r12)
   25058:	63000104 	addi	r12,r12,4
   2505c:	db012d15 	stw	r12,1204(sp)
   25060:	12c00015 	stw	r11,0(r2)
   25064:	003a1706 	br	238c4 <__alt_data_end+0xfffe3cf4>
   25068:	010000f4 	movhi	r4,3
   2506c:	210e3284 	addi	r4,r4,14538
   25070:	d9012c15 	stw	r4,1200(sp)
   25074:	dac12c17 	ldw	r11,1200(sp)
   25078:	1c87883a 	add	r3,r3,r18
   2507c:	10800044 	addi	r2,r2,1
   25080:	42c00015 	stw	r11,0(r8)
   25084:	44800115 	stw	r18,4(r8)
   25088:	d8c12015 	stw	r3,1152(sp)
   2508c:	d8811f15 	stw	r2,1148(sp)
   25090:	010001c4 	movi	r4,7
   25094:	20bee016 	blt	r4,r2,24c18 <__alt_data_end+0xfffe5048>
   25098:	42000204 	addi	r8,r8,8
   2509c:	003ee506 	br	24c34 <__alt_data_end+0xfffe5064>
   250a0:	010000f4 	movhi	r4,3
   250a4:	210e3284 	addi	r4,r4,14538
   250a8:	d9012c15 	stw	r4,1200(sp)
   250ac:	003bd806 	br	24010 <__alt_data_end+0xfffe4440>
   250b0:	b009883a 	mov	r4,r22
   250b4:	b80b883a 	mov	r5,r23
   250b8:	d9811e04 	addi	r6,sp,1144
   250bc:	002bd780 	call	2bd78 <__sprint_r>
   250c0:	103ada1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   250c4:	d8c12017 	ldw	r3,1152(sp)
   250c8:	da000404 	addi	r8,sp,16
   250cc:	003d6b06 	br	2467c <__alt_data_end+0xfffe4aac>
   250d0:	d8811f17 	ldw	r2,1148(sp)
   250d4:	030000f4 	movhi	r12,3
   250d8:	01000044 	movi	r4,1
   250dc:	18c00044 	addi	r3,r3,1
   250e0:	10800044 	addi	r2,r2,1
   250e4:	630e2a04 	addi	r12,r12,14504
   250e8:	41000115 	stw	r4,4(r8)
   250ec:	43000015 	stw	r12,0(r8)
   250f0:	d8c12015 	stw	r3,1152(sp)
   250f4:	d8811f15 	stw	r2,1148(sp)
   250f8:	010001c4 	movi	r4,7
   250fc:	20804916 	blt	r4,r2,25224 <___vfprintf_internal_r+0x1a54>
   25100:	42000204 	addi	r8,r8,8
   25104:	8000041e 	bne	r16,zero,25118 <___vfprintf_internal_r+0x1948>
   25108:	dac13317 	ldw	r11,1228(sp)
   2510c:	5800021e 	bne	r11,zero,25118 <___vfprintf_internal_r+0x1948>
   25110:	8880004c 	andi	r2,r17,1
   25114:	103bd526 	beq	r2,zero,2406c <__alt_data_end+0xfffe449c>
   25118:	db013817 	ldw	r12,1248(sp)
   2511c:	d8811f17 	ldw	r2,1148(sp)
   25120:	dac13517 	ldw	r11,1236(sp)
   25124:	1b07883a 	add	r3,r3,r12
   25128:	10800044 	addi	r2,r2,1
   2512c:	42c00015 	stw	r11,0(r8)
   25130:	43000115 	stw	r12,4(r8)
   25134:	d8c12015 	stw	r3,1152(sp)
   25138:	d8811f15 	stw	r2,1148(sp)
   2513c:	010001c4 	movi	r4,7
   25140:	20813016 	blt	r4,r2,25604 <___vfprintf_internal_r+0x1e34>
   25144:	42000204 	addi	r8,r8,8
   25148:	0421c83a 	sub	r16,zero,r16
   2514c:	0400630e 	bge	zero,r16,252dc <___vfprintf_internal_r+0x1b0c>
   25150:	04800404 	movi	r18,16
   25154:	94009f0e 	bge	r18,r16,253d4 <___vfprintf_internal_r+0x1c04>
   25158:	010000f4 	movhi	r4,3
   2515c:	210e3284 	addi	r4,r4,14538
   25160:	d9012c15 	stw	r4,1200(sp)
   25164:	054001c4 	movi	r21,7
   25168:	00000306 	br	25178 <___vfprintf_internal_r+0x19a8>
   2516c:	42000204 	addi	r8,r8,8
   25170:	843ffc04 	addi	r16,r16,-16
   25174:	94009a0e 	bge	r18,r16,253e0 <___vfprintf_internal_r+0x1c10>
   25178:	18c00404 	addi	r3,r3,16
   2517c:	10800044 	addi	r2,r2,1
   25180:	45000015 	stw	r20,0(r8)
   25184:	44800115 	stw	r18,4(r8)
   25188:	d8c12015 	stw	r3,1152(sp)
   2518c:	d8811f15 	stw	r2,1148(sp)
   25190:	a8bff60e 	bge	r21,r2,2516c <__alt_data_end+0xfffe559c>
   25194:	b009883a 	mov	r4,r22
   25198:	b80b883a 	mov	r5,r23
   2519c:	d9811e04 	addi	r6,sp,1144
   251a0:	002bd780 	call	2bd78 <__sprint_r>
   251a4:	103aa11e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   251a8:	d8c12017 	ldw	r3,1152(sp)
   251ac:	d8811f17 	ldw	r2,1148(sp)
   251b0:	da000404 	addi	r8,sp,16
   251b4:	003fee06 	br	25170 <__alt_data_end+0xfffe55a0>
   251b8:	008011c4 	movi	r2,71
   251bc:	1400b316 	blt	r2,r16,2548c <___vfprintf_internal_r+0x1cbc>
   251c0:	030000f4 	movhi	r12,3
   251c4:	630e1c04 	addi	r12,r12,14448
   251c8:	db013115 	stw	r12,1220(sp)
   251cc:	00c000c4 	movi	r3,3
   251d0:	00bfdfc4 	movi	r2,-129
   251d4:	d8c12b15 	stw	r3,1196(sp)
   251d8:	88a2703a 	and	r17,r17,r2
   251dc:	dd412783 	ldbu	r21,1182(sp)
   251e0:	dcc12d15 	stw	r19,1204(sp)
   251e4:	1825883a 	mov	r18,r3
   251e8:	d8013215 	stw	zero,1224(sp)
   251ec:	d8013415 	stw	zero,1232(sp)
   251f0:	003b0b06 	br	23e20 <__alt_data_end+0xfffe4250>
   251f4:	4825883a 	mov	r18,r9
   251f8:	003cba06 	br	244e4 <__alt_data_end+0xfffe4914>
   251fc:	db012d17 	ldw	r12,1204(sp)
   25200:	14c00017 	ldw	r19,0(r2)
   25204:	0039883a 	mov	fp,zero
   25208:	63000104 	addi	r12,r12,4
   2520c:	db012d15 	stw	r12,1204(sp)
   25210:	003c0d06 	br	24248 <__alt_data_end+0xfffe4678>
   25214:	008000f4 	movhi	r2,3
   25218:	108e1a04 	addi	r2,r2,14440
   2521c:	d8813115 	stw	r2,1220(sp)
   25220:	003ac406 	br	23d34 <__alt_data_end+0xfffe4164>
   25224:	b009883a 	mov	r4,r22
   25228:	b80b883a 	mov	r5,r23
   2522c:	d9811e04 	addi	r6,sp,1144
   25230:	002bd780 	call	2bd78 <__sprint_r>
   25234:	103a7d1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   25238:	dc012617 	ldw	r16,1176(sp)
   2523c:	d8c12017 	ldw	r3,1152(sp)
   25240:	da000404 	addi	r8,sp,16
   25244:	003faf06 	br	25104 <__alt_data_end+0xfffe5534>
   25248:	db012e17 	ldw	r12,1208(sp)
   2524c:	1805883a 	mov	r2,r3
   25250:	dac12d15 	stw	r11,1204(sp)
   25254:	0319c83a 	sub	r12,zero,r12
   25258:	db012e15 	stw	r12,1208(sp)
   2525c:	003a7e06 	br	23c58 <__alt_data_end+0xfffe4088>
   25260:	18800044 	addi	r2,r3,1
   25264:	8c400814 	ori	r17,r17,32
   25268:	1c000047 	ldb	r16,1(r3)
   2526c:	0039bf06 	br	2396c <__alt_data_end+0xfffe3d9c>
   25270:	b009883a 	mov	r4,r22
   25274:	b80b883a 	mov	r5,r23
   25278:	d9811e04 	addi	r6,sp,1144
   2527c:	002bd780 	call	2bd78 <__sprint_r>
   25280:	103a6a1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   25284:	d8c12017 	ldw	r3,1152(sp)
   25288:	da000404 	addi	r8,sp,16
   2528c:	003d0c06 	br	246c0 <__alt_data_end+0xfffe4af0>
   25290:	db012817 	ldw	r12,1184(sp)
   25294:	d8c13117 	ldw	r3,1220(sp)
   25298:	60e5c83a 	sub	r18,r12,r3
   2529c:	003adb06 	br	23e0c <__alt_data_end+0xfffe423c>
   252a0:	da013f15 	stw	r8,1276(sp)
   252a4:	00217a80 	call	217a8 <strlen>
   252a8:	1025883a 	mov	r18,r2
   252ac:	da013f17 	ldw	r8,1276(sp)
   252b0:	903c8e0e 	bge	r18,zero,244ec <__alt_data_end+0xfffe491c>
   252b4:	0005883a 	mov	r2,zero
   252b8:	003c8c06 	br	244ec <__alt_data_end+0xfffe491c>
   252bc:	b009883a 	mov	r4,r22
   252c0:	b80b883a 	mov	r5,r23
   252c4:	d9811e04 	addi	r6,sp,1144
   252c8:	002bd780 	call	2bd78 <__sprint_r>
   252cc:	103a571e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   252d0:	d8c12017 	ldw	r3,1152(sp)
   252d4:	d8811f17 	ldw	r2,1148(sp)
   252d8:	da000404 	addi	r8,sp,16
   252dc:	db013317 	ldw	r12,1228(sp)
   252e0:	dac13117 	ldw	r11,1220(sp)
   252e4:	10800044 	addi	r2,r2,1
   252e8:	60c7883a 	add	r3,r12,r3
   252ec:	42c00015 	stw	r11,0(r8)
   252f0:	43000115 	stw	r12,4(r8)
   252f4:	d8c12015 	stw	r3,1152(sp)
   252f8:	d8811f15 	stw	r2,1148(sp)
   252fc:	010001c4 	movi	r4,7
   25300:	20bb590e 	bge	r4,r2,24068 <__alt_data_end+0xfffe4498>
   25304:	003d7e06 	br	24900 <__alt_data_end+0xfffe4d30>
   25308:	010000f4 	movhi	r4,3
   2530c:	210e3684 	addi	r4,r4,14554
   25310:	d9013615 	stw	r4,1240(sp)
   25314:	003af606 	br	23ef0 <__alt_data_end+0xfffe4320>
   25318:	d8812604 	addi	r2,sp,1176
   2531c:	d8800115 	stw	r2,4(sp)
   25320:	d9413717 	ldw	r5,1244(sp)
   25324:	d8812504 	addi	r2,sp,1172
   25328:	d8800215 	stw	r2,8(sp)
   2532c:	d8812104 	addi	r2,sp,1156
   25330:	da400015 	stw	r9,0(sp)
   25334:	d8800315 	stw	r2,12(sp)
   25338:	b009883a 	mov	r4,r22
   2533c:	900d883a 	mov	r6,r18
   25340:	01c000c4 	movi	r7,3
   25344:	da013f15 	stw	r8,1276(sp)
   25348:	da413e15 	stw	r9,1272(sp)
   2534c:	0025c500 	call	25c50 <_dtoa_r>
   25350:	da413e17 	ldw	r9,1272(sp)
   25354:	da013f17 	ldw	r8,1276(sp)
   25358:	d8813115 	stw	r2,1220(sp)
   2535c:	4839883a 	mov	fp,r9
   25360:	dac13117 	ldw	r11,1220(sp)
   25364:	00801184 	movi	r2,70
   25368:	5f15883a 	add	r10,r11,fp
   2536c:	a8bef01e 	bne	r21,r2,24f30 <__alt_data_end+0xfffe5360>
   25370:	59000007 	ldb	r4,0(r11)
   25374:	00800c04 	movi	r2,48
   25378:	2080e026 	beq	r4,r2,256fc <___vfprintf_internal_r+0x1f2c>
   2537c:	d8c12617 	ldw	r3,1176(sp)
   25380:	50d5883a 	add	r10,r10,r3
   25384:	003eea06 	br	24f30 <__alt_data_end+0xfffe5360>
   25388:	0025883a 	mov	r18,zero
   2538c:	003db306 	br	24a5c <__alt_data_end+0xfffe4e8c>
   25390:	b009883a 	mov	r4,r22
   25394:	b80b883a 	mov	r5,r23
   25398:	d9811e04 	addi	r6,sp,1144
   2539c:	002bd780 	call	2bd78 <__sprint_r>
   253a0:	103a221e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   253a4:	d8c12017 	ldw	r3,1152(sp)
   253a8:	da000404 	addi	r8,sp,16
   253ac:	003daa06 	br	24a58 <__alt_data_end+0xfffe4e88>
   253b0:	b009883a 	mov	r4,r22
   253b4:	b80b883a 	mov	r5,r23
   253b8:	d9811e04 	addi	r6,sp,1144
   253bc:	002bd780 	call	2bd78 <__sprint_r>
   253c0:	103a1a1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   253c4:	d8812617 	ldw	r2,1176(sp)
   253c8:	d8c12017 	ldw	r3,1152(sp)
   253cc:	da000404 	addi	r8,sp,16
   253d0:	003e2c06 	br	24c84 <__alt_data_end+0xfffe50b4>
   253d4:	030000f4 	movhi	r12,3
   253d8:	630e3284 	addi	r12,r12,14538
   253dc:	db012c15 	stw	r12,1200(sp)
   253e0:	dac12c17 	ldw	r11,1200(sp)
   253e4:	1c07883a 	add	r3,r3,r16
   253e8:	10800044 	addi	r2,r2,1
   253ec:	42c00015 	stw	r11,0(r8)
   253f0:	44000115 	stw	r16,4(r8)
   253f4:	d8c12015 	stw	r3,1152(sp)
   253f8:	d8811f15 	stw	r2,1148(sp)
   253fc:	010001c4 	movi	r4,7
   25400:	20bfae16 	blt	r4,r2,252bc <__alt_data_end+0xfffe56ec>
   25404:	42000204 	addi	r8,r8,8
   25408:	003fb406 	br	252dc <__alt_data_end+0xfffe570c>
   2540c:	030000f4 	movhi	r12,3
   25410:	630e3684 	addi	r12,r12,14554
   25414:	db013615 	stw	r12,1240(sp)
   25418:	003b3806 	br	240fc <__alt_data_end+0xfffe452c>
   2541c:	b009883a 	mov	r4,r22
   25420:	b80b883a 	mov	r5,r23
   25424:	d9811e04 	addi	r6,sp,1144
   25428:	002bd780 	call	2bd78 <__sprint_r>
   2542c:	1039ff1e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   25430:	d8812617 	ldw	r2,1176(sp)
   25434:	db013317 	ldw	r12,1228(sp)
   25438:	d8c12017 	ldw	r3,1152(sp)
   2543c:	da000404 	addi	r8,sp,16
   25440:	6085c83a 	sub	r2,r12,r2
   25444:	003e2006 	br	24cc8 <__alt_data_end+0xfffe50f8>
   25448:	0021883a 	mov	r16,zero
   2544c:	003e1f06 	br	24ccc <__alt_data_end+0xfffe50fc>
   25450:	00800184 	movi	r2,6
   25454:	1240012e 	bgeu	r2,r9,2545c <___vfprintf_internal_r+0x1c8c>
   25458:	1013883a 	mov	r9,r2
   2545c:	4825883a 	mov	r18,r9
   25460:	4805883a 	mov	r2,r9
   25464:	48009e16 	blt	r9,zero,256e0 <___vfprintf_internal_r+0x1f10>
   25468:	d8812b15 	stw	r2,1196(sp)
   2546c:	008000f4 	movhi	r2,3
   25470:	108e2804 	addi	r2,r2,14496
   25474:	d8813115 	stw	r2,1220(sp)
   25478:	dcc12d15 	stw	r19,1204(sp)
   2547c:	d8013215 	stw	zero,1224(sp)
   25480:	d8013415 	stw	zero,1232(sp)
   25484:	0005883a 	mov	r2,zero
   25488:	003a6c06 	br	23e3c <__alt_data_end+0xfffe426c>
   2548c:	008000f4 	movhi	r2,3
   25490:	108e1d04 	addi	r2,r2,14452
   25494:	d8813115 	stw	r2,1220(sp)
   25498:	003f4c06 	br	251cc <__alt_data_end+0xfffe55fc>
   2549c:	00c00b44 	movi	r3,45
   254a0:	d8812b15 	stw	r2,1196(sp)
   254a4:	dc412d17 	ldw	r17,1204(sp)
   254a8:	d8c12785 	stb	r3,1182(sp)
   254ac:	dcc12d15 	stw	r19,1204(sp)
   254b0:	d8013215 	stw	zero,1224(sp)
   254b4:	00800b44 	movi	r2,45
   254b8:	003a5d06 	br	23e30 <__alt_data_end+0xfffe4260>
   254bc:	d8c12617 	ldw	r3,1176(sp)
   254c0:	00bfff44 	movi	r2,-3
   254c4:	18800d16 	blt	r3,r2,254fc <___vfprintf_internal_r+0x1d2c>
   254c8:	48c00c16 	blt	r9,r3,254fc <___vfprintf_internal_r+0x1d2c>
   254cc:	d8c13415 	stw	r3,1232(sp)
   254d0:	040019c4 	movi	r16,103
   254d4:	003eb506 	br	24fac <__alt_data_end+0xfffe53dc>
   254d8:	05400b44 	movi	r21,45
   254dc:	dd412785 	stb	r21,1182(sp)
   254e0:	003a0f06 	br	23d20 <__alt_data_end+0xfffe4150>
   254e4:	010000f4 	movhi	r4,3
   254e8:	210e3284 	addi	r4,r4,14538
   254ec:	d9012c15 	stw	r4,1200(sp)
   254f0:	003cb106 	br	247b8 <__alt_data_end+0xfffe4be8>
   254f4:	5005883a 	mov	r2,r10
   254f8:	003ea106 	br	24f80 <__alt_data_end+0xfffe53b0>
   254fc:	843fff84 	addi	r16,r16,-2
   25500:	1f3fffc4 	addi	fp,r3,-1
   25504:	df012615 	stw	fp,1176(sp)
   25508:	dc0122c5 	stb	r16,1163(sp)
   2550c:	e0009516 	blt	fp,zero,25764 <___vfprintf_internal_r+0x1f94>
   25510:	00800ac4 	movi	r2,43
   25514:	d8812305 	stb	r2,1164(sp)
   25518:	00800244 	movi	r2,9
   2551c:	1700690e 	bge	r2,fp,256c4 <___vfprintf_internal_r+0x1ef4>
   25520:	dd4122c4 	addi	r21,sp,1163
   25524:	dc012c15 	stw	r16,1200(sp)
   25528:	8825883a 	mov	r18,r17
   2552c:	a821883a 	mov	r16,r21
   25530:	4023883a 	mov	r17,r8
   25534:	e009883a 	mov	r4,fp
   25538:	01400284 	movi	r5,10
   2553c:	002e6580 	call	2e658 <__modsi3>
   25540:	10800c04 	addi	r2,r2,48
   25544:	843fffc4 	addi	r16,r16,-1
   25548:	e009883a 	mov	r4,fp
   2554c:	01400284 	movi	r5,10
   25550:	80800005 	stb	r2,0(r16)
   25554:	002e6040 	call	2e604 <__divsi3>
   25558:	1039883a 	mov	fp,r2
   2555c:	00800244 	movi	r2,9
   25560:	173ff416 	blt	r2,fp,25534 <__alt_data_end+0xfffe5964>
   25564:	8811883a 	mov	r8,r17
   25568:	e0800c04 	addi	r2,fp,48
   2556c:	9023883a 	mov	r17,r18
   25570:	8025883a 	mov	r18,r16
   25574:	913fffc4 	addi	r4,r18,-1
   25578:	90bfffc5 	stb	r2,-1(r18)
   2557c:	dc012c17 	ldw	r16,1200(sp)
   25580:	25408e2e 	bgeu	r4,r21,257bc <___vfprintf_internal_r+0x1fec>
   25584:	d9412384 	addi	r5,sp,1166
   25588:	2c8bc83a 	sub	r5,r5,r18
   2558c:	d8c12344 	addi	r3,sp,1165
   25590:	a94b883a 	add	r5,r21,r5
   25594:	00000106 	br	2559c <___vfprintf_internal_r+0x1dcc>
   25598:	20800003 	ldbu	r2,0(r4)
   2559c:	18800005 	stb	r2,0(r3)
   255a0:	18c00044 	addi	r3,r3,1
   255a4:	21000044 	addi	r4,r4,1
   255a8:	197ffb1e 	bne	r3,r5,25598 <__alt_data_end+0xfffe59c8>
   255ac:	d8812304 	addi	r2,sp,1164
   255b0:	1485c83a 	sub	r2,r2,r18
   255b4:	d8c12344 	addi	r3,sp,1165
   255b8:	1885883a 	add	r2,r3,r2
   255bc:	dac13317 	ldw	r11,1228(sp)
   255c0:	156bc83a 	sub	r21,r2,r21
   255c4:	dd413a15 	stw	r21,1256(sp)
   255c8:	00800044 	movi	r2,1
   255cc:	5d65883a 	add	r18,r11,r21
   255d0:	12c0770e 	bge	r2,r11,257b0 <___vfprintf_internal_r+0x1fe0>
   255d4:	94800044 	addi	r18,r18,1
   255d8:	9005883a 	mov	r2,r18
   255dc:	90007216 	blt	r18,zero,257a8 <___vfprintf_internal_r+0x1fd8>
   255e0:	d8013415 	stw	zero,1232(sp)
   255e4:	003e7906 	br	24fcc <__alt_data_end+0xfffe53fc>
   255e8:	da412b15 	stw	r9,1196(sp)
   255ec:	dd412783 	ldbu	r21,1182(sp)
   255f0:	4825883a 	mov	r18,r9
   255f4:	dcc12d15 	stw	r19,1204(sp)
   255f8:	d8013215 	stw	zero,1224(sp)
   255fc:	d8013415 	stw	zero,1232(sp)
   25600:	003a0706 	br	23e20 <__alt_data_end+0xfffe4250>
   25604:	b009883a 	mov	r4,r22
   25608:	b80b883a 	mov	r5,r23
   2560c:	d9811e04 	addi	r6,sp,1144
   25610:	002bd780 	call	2bd78 <__sprint_r>
   25614:	1039851e 	bne	r2,zero,23c2c <__alt_data_end+0xfffe405c>
   25618:	dc012617 	ldw	r16,1176(sp)
   2561c:	d8c12017 	ldw	r3,1152(sp)
   25620:	d8811f17 	ldw	r2,1148(sp)
   25624:	da000404 	addi	r8,sp,16
   25628:	003ec706 	br	25148 <__alt_data_end+0xfffe5578>
   2562c:	483e1a1e 	bne	r9,zero,24e98 <__alt_data_end+0xfffe52c8>
   25630:	9013883a 	mov	r9,r18
   25634:	003e1806 	br	24e98 <__alt_data_end+0xfffe52c8>
   25638:	00c00b44 	movi	r3,45
   2563c:	64a0003c 	xorhi	r18,r12,32768
   25640:	d8c12b05 	stb	r3,1196(sp)
   25644:	003e1a06 	br	24eb0 <__alt_data_end+0xfffe52e0>
   25648:	4f000044 	addi	fp,r9,1
   2564c:	003e1f06 	br	24ecc <__alt_data_end+0xfffe52fc>
   25650:	02400184 	movi	r9,6
   25654:	003e1006 	br	24e98 <__alt_data_end+0xfffe52c8>
   25658:	d8c13417 	ldw	r3,1232(sp)
   2565c:	00c04b0e 	bge	zero,r3,2578c <___vfprintf_internal_r+0x1fbc>
   25660:	04800044 	movi	r18,1
   25664:	dac13317 	ldw	r11,1228(sp)
   25668:	92e5883a 	add	r18,r18,r11
   2566c:	9005883a 	mov	r2,r18
   25670:	903e560e 	bge	r18,zero,24fcc <__alt_data_end+0xfffe53fc>
   25674:	0005883a 	mov	r2,zero
   25678:	003e5406 	br	24fcc <__alt_data_end+0xfffe53fc>
   2567c:	d8c12617 	ldw	r3,1176(sp)
   25680:	d8c13415 	stw	r3,1232(sp)
   25684:	00c03b0e 	bge	zero,r3,25774 <___vfprintf_internal_r+0x1fa4>
   25688:	4800081e 	bne	r9,zero,256ac <___vfprintf_internal_r+0x1edc>
   2568c:	8c40004c 	andi	r17,r17,1
   25690:	8800061e 	bne	r17,zero,256ac <___vfprintf_internal_r+0x1edc>
   25694:	1805883a 	mov	r2,r3
   25698:	183e4b0e 	bge	r3,zero,24fc8 <__alt_data_end+0xfffe53f8>
   2569c:	0005883a 	mov	r2,zero
   256a0:	003e4906 	br	24fc8 <__alt_data_end+0xfffe53f8>
   256a4:	d8812117 	ldw	r2,1156(sp)
   256a8:	003e3506 	br	24f80 <__alt_data_end+0xfffe53b0>
   256ac:	dac13417 	ldw	r11,1232(sp)
   256b0:	4a400044 	addi	r9,r9,1
   256b4:	5a65883a 	add	r18,r11,r9
   256b8:	9005883a 	mov	r2,r18
   256bc:	903e430e 	bge	r18,zero,24fcc <__alt_data_end+0xfffe53fc>
   256c0:	003fec06 	br	25674 <__alt_data_end+0xfffe5aa4>
   256c4:	00800c04 	movi	r2,48
   256c8:	e0c00c04 	addi	r3,fp,48
   256cc:	d8812345 	stb	r2,1165(sp)
   256d0:	d8c12385 	stb	r3,1166(sp)
   256d4:	d88123c4 	addi	r2,sp,1167
   256d8:	dd4122c4 	addi	r21,sp,1163
   256dc:	003fb706 	br	255bc <__alt_data_end+0xfffe59ec>
   256e0:	0005883a 	mov	r2,zero
   256e4:	003f6006 	br	25468 <__alt_data_end+0xfffe5898>
   256e8:	db013417 	ldw	r12,1232(sp)
   256ec:	64800044 	addi	r18,r12,1
   256f0:	9005883a 	mov	r2,r18
   256f4:	903e350e 	bge	r18,zero,24fcc <__alt_data_end+0xfffe53fc>
   256f8:	003fde06 	br	25674 <__alt_data_end+0xfffe5aa4>
   256fc:	d9013717 	ldw	r4,1244(sp)
   25700:	900b883a 	mov	r5,r18
   25704:	000d883a 	mov	r6,zero
   25708:	000f883a 	mov	r7,zero
   2570c:	da013f15 	stw	r8,1276(sp)
   25710:	da413e15 	stw	r9,1272(sp)
   25714:	da813d15 	stw	r10,1268(sp)
   25718:	002f82c0 	call	2f82c <__eqdf2>
   2571c:	da013f17 	ldw	r8,1276(sp)
   25720:	da413e17 	ldw	r9,1272(sp)
   25724:	da813d17 	ldw	r10,1268(sp)
   25728:	103f1426 	beq	r2,zero,2537c <__alt_data_end+0xfffe57ac>
   2572c:	00800044 	movi	r2,1
   25730:	1707c83a 	sub	r3,r2,fp
   25734:	d8c12615 	stw	r3,1176(sp)
   25738:	003f1106 	br	25380 <__alt_data_end+0xfffe57b0>
   2573c:	dac12d17 	ldw	r11,1204(sp)
   25740:	5a400017 	ldw	r9,0(r11)
   25744:	5ac00104 	addi	r11,r11,4
   25748:	dac12d15 	stw	r11,1204(sp)
   2574c:	483ec60e 	bge	r9,zero,25268 <__alt_data_end+0xfffe5698>
   25750:	027fffc4 	movi	r9,-1
   25754:	1c000047 	ldb	r16,1(r3)
   25758:	00388406 	br	2396c <__alt_data_end+0xfffe3d9c>
   2575c:	043fffc4 	movi	r16,-1
   25760:	00391006 	br	23ba4 <__alt_data_end+0xfffe3fd4>
   25764:	00800b44 	movi	r2,45
   25768:	0739c83a 	sub	fp,zero,fp
   2576c:	d8812305 	stb	r2,1164(sp)
   25770:	003f6906 	br	25518 <__alt_data_end+0xfffe5948>
   25774:	4800081e 	bne	r9,zero,25798 <___vfprintf_internal_r+0x1fc8>
   25778:	8c40004c 	andi	r17,r17,1
   2577c:	8800061e 	bne	r17,zero,25798 <___vfprintf_internal_r+0x1fc8>
   25780:	00800044 	movi	r2,1
   25784:	1025883a 	mov	r18,r2
   25788:	003e1006 	br	24fcc <__alt_data_end+0xfffe53fc>
   2578c:	04800084 	movi	r18,2
   25790:	90e5c83a 	sub	r18,r18,r3
   25794:	003fb306 	br	25664 <__alt_data_end+0xfffe5a94>
   25798:	4c800084 	addi	r18,r9,2
   2579c:	9005883a 	mov	r2,r18
   257a0:	903e0a0e 	bge	r18,zero,24fcc <__alt_data_end+0xfffe53fc>
   257a4:	003fb306 	br	25674 <__alt_data_end+0xfffe5aa4>
   257a8:	0005883a 	mov	r2,zero
   257ac:	003f8c06 	br	255e0 <__alt_data_end+0xfffe5a10>
   257b0:	88a2703a 	and	r17,r17,r2
   257b4:	883f8826 	beq	r17,zero,255d8 <__alt_data_end+0xfffe5a08>
   257b8:	003f8606 	br	255d4 <__alt_data_end+0xfffe5a04>
   257bc:	d8812344 	addi	r2,sp,1165
   257c0:	003f7e06 	br	255bc <__alt_data_end+0xfffe59ec>
   257c4:	d8c12617 	ldw	r3,1176(sp)
   257c8:	003f4d06 	br	25500 <__alt_data_end+0xfffe5930>

000257cc <__vfprintf_internal>:
   257cc:	2007883a 	mov	r3,r4
   257d0:	010000f4 	movhi	r4,3
   257d4:	21159304 	addi	r4,r4,22092
   257d8:	21000017 	ldw	r4,0(r4)
   257dc:	2805883a 	mov	r2,r5
   257e0:	300f883a 	mov	r7,r6
   257e4:	180b883a 	mov	r5,r3
   257e8:	100d883a 	mov	r6,r2
   257ec:	00237d01 	jmpi	237d0 <___vfprintf_internal_r>

000257f0 <_vsnprintf_r>:
   257f0:	3005883a 	mov	r2,r6
   257f4:	30003616 	blt	r6,zero,258d0 <_vsnprintf_r+0xe0>
   257f8:	deffe404 	addi	sp,sp,-112
   257fc:	00c08204 	movi	r3,520
   25800:	dc001a15 	stw	r16,104(sp)
   25804:	dfc01b15 	stw	ra,108(sp)
   25808:	d8c0030d 	sth	r3,12(sp)
   2580c:	d9400015 	stw	r5,0(sp)
   25810:	d9400415 	stw	r5,16(sp)
   25814:	380d883a 	mov	r6,r7
   25818:	2021883a 	mov	r16,r4
   2581c:	10001326 	beq	r2,zero,2586c <_vsnprintf_r+0x7c>
   25820:	00c000f4 	movhi	r3,3
   25824:	18d59304 	addi	r3,r3,22092
   25828:	19000017 	ldw	r4,0(r3)
   2582c:	d9c01c17 	ldw	r7,112(sp)
   25830:	10bfffc4 	addi	r2,r2,-1
   25834:	d8800215 	stw	r2,8(sp)
   25838:	d8800515 	stw	r2,20(sp)
   2583c:	d80b883a 	mov	r5,sp
   25840:	00bfffc4 	movi	r2,-1
   25844:	d880038d 	sth	r2,14(sp)
   25848:	00218400 	call	21840 <___svfprintf_internal_r>
   2584c:	00ffffc4 	movi	r3,-1
   25850:	10c01c16 	blt	r2,r3,258c4 <_vsnprintf_r+0xd4>
   25854:	d8c00017 	ldw	r3,0(sp)
   25858:	18000005 	stb	zero,0(r3)
   2585c:	dfc01b17 	ldw	ra,108(sp)
   25860:	dc001a17 	ldw	r16,104(sp)
   25864:	dec01c04 	addi	sp,sp,112
   25868:	f800283a 	ret
   2586c:	008000f4 	movhi	r2,3
   25870:	10959304 	addi	r2,r2,22092
   25874:	11000017 	ldw	r4,0(r2)
   25878:	d9c01c17 	ldw	r7,112(sp)
   2587c:	00bfffc4 	movi	r2,-1
   25880:	d80b883a 	mov	r5,sp
   25884:	d8000215 	stw	zero,8(sp)
   25888:	d8000515 	stw	zero,20(sp)
   2588c:	d880038d 	sth	r2,14(sp)
   25890:	00218400 	call	21840 <___svfprintf_internal_r>
   25894:	00ffffc4 	movi	r3,-1
   25898:	10c00416 	blt	r2,r3,258ac <_vsnprintf_r+0xbc>
   2589c:	dfc01b17 	ldw	ra,108(sp)
   258a0:	dc001a17 	ldw	r16,104(sp)
   258a4:	dec01c04 	addi	sp,sp,112
   258a8:	f800283a 	ret
   258ac:	00c022c4 	movi	r3,139
   258b0:	80c00015 	stw	r3,0(r16)
   258b4:	dfc01b17 	ldw	ra,108(sp)
   258b8:	dc001a17 	ldw	r16,104(sp)
   258bc:	dec01c04 	addi	sp,sp,112
   258c0:	f800283a 	ret
   258c4:	00c022c4 	movi	r3,139
   258c8:	80c00015 	stw	r3,0(r16)
   258cc:	003fe106 	br	25854 <__alt_data_end+0xfffe5c84>
   258d0:	008022c4 	movi	r2,139
   258d4:	20800015 	stw	r2,0(r4)
   258d8:	00bfffc4 	movi	r2,-1
   258dc:	f800283a 	ret

000258e0 <vsnprintf>:
   258e0:	008000f4 	movhi	r2,3
   258e4:	10959304 	addi	r2,r2,22092
   258e8:	2011883a 	mov	r8,r4
   258ec:	11000017 	ldw	r4,0(r2)
   258f0:	defffe04 	addi	sp,sp,-8
   258f4:	2807883a 	mov	r3,r5
   258f8:	3005883a 	mov	r2,r6
   258fc:	d9c00015 	stw	r7,0(sp)
   25900:	400b883a 	mov	r5,r8
   25904:	180d883a 	mov	r6,r3
   25908:	100f883a 	mov	r7,r2
   2590c:	dfc00115 	stw	ra,4(sp)
   25910:	00257f00 	call	257f0 <_vsnprintf_r>
   25914:	dfc00117 	ldw	ra,4(sp)
   25918:	dec00204 	addi	sp,sp,8
   2591c:	f800283a 	ret

00025920 <__swsetup_r>:
   25920:	008000f4 	movhi	r2,3
   25924:	defffd04 	addi	sp,sp,-12
   25928:	10959304 	addi	r2,r2,22092
   2592c:	dc400115 	stw	r17,4(sp)
   25930:	2023883a 	mov	r17,r4
   25934:	11000017 	ldw	r4,0(r2)
   25938:	dc000015 	stw	r16,0(sp)
   2593c:	dfc00215 	stw	ra,8(sp)
   25940:	2821883a 	mov	r16,r5
   25944:	20000226 	beq	r4,zero,25950 <__swsetup_r+0x30>
   25948:	20c00e17 	ldw	r3,56(r4)
   2594c:	18002e26 	beq	r3,zero,25a08 <__swsetup_r+0xe8>
   25950:	8080030b 	ldhu	r2,12(r16)
   25954:	10c0020c 	andi	r3,r2,8
   25958:	100d883a 	mov	r6,r2
   2595c:	18000f26 	beq	r3,zero,2599c <__swsetup_r+0x7c>
   25960:	80c00417 	ldw	r3,16(r16)
   25964:	18001526 	beq	r3,zero,259bc <__swsetup_r+0x9c>
   25968:	1100004c 	andi	r4,r2,1
   2596c:	20001c1e 	bne	r4,zero,259e0 <__swsetup_r+0xc0>
   25970:	1080008c 	andi	r2,r2,2
   25974:	1000261e 	bne	r2,zero,25a10 <__swsetup_r+0xf0>
   25978:	80800517 	ldw	r2,20(r16)
   2597c:	80800215 	stw	r2,8(r16)
   25980:	18001c26 	beq	r3,zero,259f4 <__swsetup_r+0xd4>
   25984:	0005883a 	mov	r2,zero
   25988:	dfc00217 	ldw	ra,8(sp)
   2598c:	dc400117 	ldw	r17,4(sp)
   25990:	dc000017 	ldw	r16,0(sp)
   25994:	dec00304 	addi	sp,sp,12
   25998:	f800283a 	ret
   2599c:	3080040c 	andi	r2,r6,16
   259a0:	10001726 	beq	r2,zero,25a00 <__swsetup_r+0xe0>
   259a4:	3080010c 	andi	r2,r6,4
   259a8:	10001b1e 	bne	r2,zero,25a18 <__swsetup_r+0xf8>
   259ac:	80c00417 	ldw	r3,16(r16)
   259b0:	30800214 	ori	r2,r6,8
   259b4:	8080030d 	sth	r2,12(r16)
   259b8:	183feb1e 	bne	r3,zero,25968 <__alt_data_end+0xfffe5d98>
   259bc:	1140a00c 	andi	r5,r2,640
   259c0:	01008004 	movi	r4,512
   259c4:	293fe826 	beq	r5,r4,25968 <__alt_data_end+0xfffe5d98>
   259c8:	8809883a 	mov	r4,r17
   259cc:	800b883a 	mov	r5,r16
   259d0:	00284780 	call	28478 <__smakebuf_r>
   259d4:	8080030b 	ldhu	r2,12(r16)
   259d8:	80c00417 	ldw	r3,16(r16)
   259dc:	003fe206 	br	25968 <__alt_data_end+0xfffe5d98>
   259e0:	80800517 	ldw	r2,20(r16)
   259e4:	80000215 	stw	zero,8(r16)
   259e8:	0085c83a 	sub	r2,zero,r2
   259ec:	80800615 	stw	r2,24(r16)
   259f0:	183fe41e 	bne	r3,zero,25984 <__alt_data_end+0xfffe5db4>
   259f4:	8080030b 	ldhu	r2,12(r16)
   259f8:	1080200c 	andi	r2,r2,128
   259fc:	103fe226 	beq	r2,zero,25988 <__alt_data_end+0xfffe5db8>
   25a00:	00bfffc4 	movi	r2,-1
   25a04:	003fe006 	br	25988 <__alt_data_end+0xfffe5db8>
   25a08:	00279200 	call	27920 <__sinit>
   25a0c:	003fd006 	br	25950 <__alt_data_end+0xfffe5d80>
   25a10:	0005883a 	mov	r2,zero
   25a14:	003fd906 	br	2597c <__alt_data_end+0xfffe5dac>
   25a18:	81400c17 	ldw	r5,48(r16)
   25a1c:	28000626 	beq	r5,zero,25a38 <__swsetup_r+0x118>
   25a20:	80801004 	addi	r2,r16,64
   25a24:	28800326 	beq	r5,r2,25a34 <__swsetup_r+0x114>
   25a28:	8809883a 	mov	r4,r17
   25a2c:	0027a940 	call	27a94 <_free_r>
   25a30:	8180030b 	ldhu	r6,12(r16)
   25a34:	80000c15 	stw	zero,48(r16)
   25a38:	80c00417 	ldw	r3,16(r16)
   25a3c:	00bff6c4 	movi	r2,-37
   25a40:	118c703a 	and	r6,r2,r6
   25a44:	80000115 	stw	zero,4(r16)
   25a48:	80c00015 	stw	r3,0(r16)
   25a4c:	003fd806 	br	259b0 <__alt_data_end+0xfffe5de0>

00025a50 <quorem>:
   25a50:	defff704 	addi	sp,sp,-36
   25a54:	dc800215 	stw	r18,8(sp)
   25a58:	20800417 	ldw	r2,16(r4)
   25a5c:	2c800417 	ldw	r18,16(r5)
   25a60:	dfc00815 	stw	ra,32(sp)
   25a64:	ddc00715 	stw	r23,28(sp)
   25a68:	dd800615 	stw	r22,24(sp)
   25a6c:	dd400515 	stw	r21,20(sp)
   25a70:	dd000415 	stw	r20,16(sp)
   25a74:	dcc00315 	stw	r19,12(sp)
   25a78:	dc400115 	stw	r17,4(sp)
   25a7c:	dc000015 	stw	r16,0(sp)
   25a80:	14807116 	blt	r2,r18,25c48 <quorem+0x1f8>
   25a84:	94bfffc4 	addi	r18,r18,-1
   25a88:	94ad883a 	add	r22,r18,r18
   25a8c:	b5ad883a 	add	r22,r22,r22
   25a90:	2c400504 	addi	r17,r5,20
   25a94:	8da9883a 	add	r20,r17,r22
   25a98:	25400504 	addi	r21,r4,20
   25a9c:	282f883a 	mov	r23,r5
   25aa0:	adad883a 	add	r22,r21,r22
   25aa4:	a1400017 	ldw	r5,0(r20)
   25aa8:	2021883a 	mov	r16,r4
   25aac:	b1000017 	ldw	r4,0(r22)
   25ab0:	29400044 	addi	r5,r5,1
   25ab4:	002e6b40 	call	2e6b4 <__udivsi3>
   25ab8:	1027883a 	mov	r19,r2
   25abc:	10002c26 	beq	r2,zero,25b70 <quorem+0x120>
   25ac0:	a813883a 	mov	r9,r21
   25ac4:	8811883a 	mov	r8,r17
   25ac8:	0009883a 	mov	r4,zero
   25acc:	000d883a 	mov	r6,zero
   25ad0:	41c00017 	ldw	r7,0(r8)
   25ad4:	49400017 	ldw	r5,0(r9)
   25ad8:	42000104 	addi	r8,r8,4
   25adc:	38bfffcc 	andi	r2,r7,65535
   25ae0:	14c5383a 	mul	r2,r2,r19
   25ae4:	380ed43a 	srli	r7,r7,16
   25ae8:	28ffffcc 	andi	r3,r5,65535
   25aec:	2085883a 	add	r2,r4,r2
   25af0:	1008d43a 	srli	r4,r2,16
   25af4:	3ccf383a 	mul	r7,r7,r19
   25af8:	198d883a 	add	r6,r3,r6
   25afc:	10ffffcc 	andi	r3,r2,65535
   25b00:	30c7c83a 	sub	r3,r6,r3
   25b04:	280ad43a 	srli	r5,r5,16
   25b08:	21c9883a 	add	r4,r4,r7
   25b0c:	180dd43a 	srai	r6,r3,16
   25b10:	20bfffcc 	andi	r2,r4,65535
   25b14:	288bc83a 	sub	r5,r5,r2
   25b18:	298b883a 	add	r5,r5,r6
   25b1c:	280e943a 	slli	r7,r5,16
   25b20:	18ffffcc 	andi	r3,r3,65535
   25b24:	2008d43a 	srli	r4,r4,16
   25b28:	38ceb03a 	or	r7,r7,r3
   25b2c:	49c00015 	stw	r7,0(r9)
   25b30:	280dd43a 	srai	r6,r5,16
   25b34:	4a400104 	addi	r9,r9,4
   25b38:	a23fe52e 	bgeu	r20,r8,25ad0 <__alt_data_end+0xfffe5f00>
   25b3c:	b0800017 	ldw	r2,0(r22)
   25b40:	10000b1e 	bne	r2,zero,25b70 <quorem+0x120>
   25b44:	b0bfff04 	addi	r2,r22,-4
   25b48:	a880082e 	bgeu	r21,r2,25b6c <quorem+0x11c>
   25b4c:	b0ffff17 	ldw	r3,-4(r22)
   25b50:	18000326 	beq	r3,zero,25b60 <quorem+0x110>
   25b54:	00000506 	br	25b6c <quorem+0x11c>
   25b58:	10c00017 	ldw	r3,0(r2)
   25b5c:	1800031e 	bne	r3,zero,25b6c <quorem+0x11c>
   25b60:	10bfff04 	addi	r2,r2,-4
   25b64:	94bfffc4 	addi	r18,r18,-1
   25b68:	a8bffb36 	bltu	r21,r2,25b58 <__alt_data_end+0xfffe5f88>
   25b6c:	84800415 	stw	r18,16(r16)
   25b70:	8009883a 	mov	r4,r16
   25b74:	b80b883a 	mov	r5,r23
   25b78:	0029b380 	call	29b38 <__mcmp>
   25b7c:	10002616 	blt	r2,zero,25c18 <quorem+0x1c8>
   25b80:	9cc00044 	addi	r19,r19,1
   25b84:	a80d883a 	mov	r6,r21
   25b88:	000b883a 	mov	r5,zero
   25b8c:	31000017 	ldw	r4,0(r6)
   25b90:	88800017 	ldw	r2,0(r17)
   25b94:	31800104 	addi	r6,r6,4
   25b98:	20ffffcc 	andi	r3,r4,65535
   25b9c:	194b883a 	add	r5,r3,r5
   25ba0:	10ffffcc 	andi	r3,r2,65535
   25ba4:	28c7c83a 	sub	r3,r5,r3
   25ba8:	1004d43a 	srli	r2,r2,16
   25bac:	2008d43a 	srli	r4,r4,16
   25bb0:	180bd43a 	srai	r5,r3,16
   25bb4:	18ffffcc 	andi	r3,r3,65535
   25bb8:	2089c83a 	sub	r4,r4,r2
   25bbc:	2149883a 	add	r4,r4,r5
   25bc0:	2004943a 	slli	r2,r4,16
   25bc4:	8c400104 	addi	r17,r17,4
   25bc8:	200bd43a 	srai	r5,r4,16
   25bcc:	10c6b03a 	or	r3,r2,r3
   25bd0:	30ffff15 	stw	r3,-4(r6)
   25bd4:	a47fed2e 	bgeu	r20,r17,25b8c <__alt_data_end+0xfffe5fbc>
   25bd8:	9485883a 	add	r2,r18,r18
   25bdc:	1085883a 	add	r2,r2,r2
   25be0:	a887883a 	add	r3,r21,r2
   25be4:	18800017 	ldw	r2,0(r3)
   25be8:	10000b1e 	bne	r2,zero,25c18 <quorem+0x1c8>
   25bec:	18bfff04 	addi	r2,r3,-4
   25bf0:	a880082e 	bgeu	r21,r2,25c14 <quorem+0x1c4>
   25bf4:	18ffff17 	ldw	r3,-4(r3)
   25bf8:	18000326 	beq	r3,zero,25c08 <quorem+0x1b8>
   25bfc:	00000506 	br	25c14 <quorem+0x1c4>
   25c00:	10c00017 	ldw	r3,0(r2)
   25c04:	1800031e 	bne	r3,zero,25c14 <quorem+0x1c4>
   25c08:	10bfff04 	addi	r2,r2,-4
   25c0c:	94bfffc4 	addi	r18,r18,-1
   25c10:	a8bffb36 	bltu	r21,r2,25c00 <__alt_data_end+0xfffe6030>
   25c14:	84800415 	stw	r18,16(r16)
   25c18:	9805883a 	mov	r2,r19
   25c1c:	dfc00817 	ldw	ra,32(sp)
   25c20:	ddc00717 	ldw	r23,28(sp)
   25c24:	dd800617 	ldw	r22,24(sp)
   25c28:	dd400517 	ldw	r21,20(sp)
   25c2c:	dd000417 	ldw	r20,16(sp)
   25c30:	dcc00317 	ldw	r19,12(sp)
   25c34:	dc800217 	ldw	r18,8(sp)
   25c38:	dc400117 	ldw	r17,4(sp)
   25c3c:	dc000017 	ldw	r16,0(sp)
   25c40:	dec00904 	addi	sp,sp,36
   25c44:	f800283a 	ret
   25c48:	0005883a 	mov	r2,zero
   25c4c:	003ff306 	br	25c1c <__alt_data_end+0xfffe604c>

00025c50 <_dtoa_r>:
   25c50:	20801017 	ldw	r2,64(r4)
   25c54:	deffde04 	addi	sp,sp,-136
   25c58:	dd401d15 	stw	r21,116(sp)
   25c5c:	dcc01b15 	stw	r19,108(sp)
   25c60:	dc801a15 	stw	r18,104(sp)
   25c64:	dc401915 	stw	r17,100(sp)
   25c68:	dc001815 	stw	r16,96(sp)
   25c6c:	dfc02115 	stw	ra,132(sp)
   25c70:	df002015 	stw	fp,128(sp)
   25c74:	ddc01f15 	stw	r23,124(sp)
   25c78:	dd801e15 	stw	r22,120(sp)
   25c7c:	dd001c15 	stw	r20,112(sp)
   25c80:	d9c00315 	stw	r7,12(sp)
   25c84:	2021883a 	mov	r16,r4
   25c88:	302b883a 	mov	r21,r6
   25c8c:	2825883a 	mov	r18,r5
   25c90:	dc402417 	ldw	r17,144(sp)
   25c94:	3027883a 	mov	r19,r6
   25c98:	10000826 	beq	r2,zero,25cbc <_dtoa_r+0x6c>
   25c9c:	21801117 	ldw	r6,68(r4)
   25ca0:	00c00044 	movi	r3,1
   25ca4:	100b883a 	mov	r5,r2
   25ca8:	1986983a 	sll	r3,r3,r6
   25cac:	11800115 	stw	r6,4(r2)
   25cb0:	10c00215 	stw	r3,8(r2)
   25cb4:	00293200 	call	29320 <_Bfree>
   25cb8:	80001015 	stw	zero,64(r16)
   25cbc:	a8002d16 	blt	r21,zero,25d74 <_dtoa_r+0x124>
   25cc0:	88000015 	stw	zero,0(r17)
   25cc4:	a8dffc2c 	andhi	r3,r21,32752
   25cc8:	009ffc34 	movhi	r2,32752
   25ccc:	18801b26 	beq	r3,r2,25d3c <_dtoa_r+0xec>
   25cd0:	9009883a 	mov	r4,r18
   25cd4:	980b883a 	mov	r5,r19
   25cd8:	000d883a 	mov	r6,zero
   25cdc:	000f883a 	mov	r7,zero
   25ce0:	002f82c0 	call	2f82c <__eqdf2>
   25ce4:	10002a1e 	bne	r2,zero,25d90 <_dtoa_r+0x140>
   25ce8:	d8c02317 	ldw	r3,140(sp)
   25cec:	d9002517 	ldw	r4,148(sp)
   25cf0:	00800044 	movi	r2,1
   25cf4:	18800015 	stw	r2,0(r3)
   25cf8:	2001a226 	beq	r4,zero,26384 <_dtoa_r+0x734>
   25cfc:	008000f4 	movhi	r2,3
   25d00:	108e2a44 	addi	r2,r2,14505
   25d04:	20800015 	stw	r2,0(r4)
   25d08:	10bfffc4 	addi	r2,r2,-1
   25d0c:	dfc02117 	ldw	ra,132(sp)
   25d10:	df002017 	ldw	fp,128(sp)
   25d14:	ddc01f17 	ldw	r23,124(sp)
   25d18:	dd801e17 	ldw	r22,120(sp)
   25d1c:	dd401d17 	ldw	r21,116(sp)
   25d20:	dd001c17 	ldw	r20,112(sp)
   25d24:	dcc01b17 	ldw	r19,108(sp)
   25d28:	dc801a17 	ldw	r18,104(sp)
   25d2c:	dc401917 	ldw	r17,100(sp)
   25d30:	dc001817 	ldw	r16,96(sp)
   25d34:	dec02204 	addi	sp,sp,136
   25d38:	f800283a 	ret
   25d3c:	d8c02317 	ldw	r3,140(sp)
   25d40:	0089c3c4 	movi	r2,9999
   25d44:	18800015 	stw	r2,0(r3)
   25d48:	90017c26 	beq	r18,zero,2633c <_dtoa_r+0x6ec>
   25d4c:	008000f4 	movhi	r2,3
   25d50:	108e3e04 	addi	r2,r2,14584
   25d54:	d9002517 	ldw	r4,148(sp)
   25d58:	203fec26 	beq	r4,zero,25d0c <__alt_data_end+0xfffe613c>
   25d5c:	10c000c7 	ldb	r3,3(r2)
   25d60:	18017d1e 	bne	r3,zero,26358 <_dtoa_r+0x708>
   25d64:	10c000c4 	addi	r3,r2,3
   25d68:	d9802517 	ldw	r6,148(sp)
   25d6c:	30c00015 	stw	r3,0(r6)
   25d70:	003fe606 	br	25d0c <__alt_data_end+0xfffe613c>
   25d74:	04e00034 	movhi	r19,32768
   25d78:	9cffffc4 	addi	r19,r19,-1
   25d7c:	00800044 	movi	r2,1
   25d80:	ace6703a 	and	r19,r21,r19
   25d84:	88800015 	stw	r2,0(r17)
   25d88:	982b883a 	mov	r21,r19
   25d8c:	003fcd06 	br	25cc4 <__alt_data_end+0xfffe60f4>
   25d90:	d8800204 	addi	r2,sp,8
   25d94:	a822d53a 	srli	r17,r21,20
   25d98:	d8800015 	stw	r2,0(sp)
   25d9c:	8009883a 	mov	r4,r16
   25da0:	900b883a 	mov	r5,r18
   25da4:	980d883a 	mov	r6,r19
   25da8:	d9c00104 	addi	r7,sp,4
   25dac:	0029eac0 	call	29eac <__d2b>
   25db0:	1039883a 	mov	fp,r2
   25db4:	88016a1e 	bne	r17,zero,26360 <_dtoa_r+0x710>
   25db8:	dd000217 	ldw	r20,8(sp)
   25dbc:	dc400117 	ldw	r17,4(sp)
   25dc0:	00befbc4 	movi	r2,-1041
   25dc4:	a463883a 	add	r17,r20,r17
   25dc8:	8882ea16 	blt	r17,r2,26974 <_dtoa_r+0xd24>
   25dcc:	00bf0384 	movi	r2,-1010
   25dd0:	1445c83a 	sub	r2,r2,r17
   25dd4:	89010484 	addi	r4,r17,1042
   25dd8:	a8aa983a 	sll	r21,r21,r2
   25ddc:	9108d83a 	srl	r4,r18,r4
   25de0:	a908b03a 	or	r4,r21,r4
   25de4:	0030bbc0 	call	30bbc <__floatunsidf>
   25de8:	017f8434 	movhi	r5,65040
   25dec:	01800044 	movi	r6,1
   25df0:	1009883a 	mov	r4,r2
   25df4:	194b883a 	add	r5,r3,r5
   25df8:	8c7fffc4 	addi	r17,r17,-1
   25dfc:	d9800f15 	stw	r6,60(sp)
   25e00:	000d883a 	mov	r6,zero
   25e04:	01cffe34 	movhi	r7,16376
   25e08:	00301940 	call	30194 <__subdf3>
   25e0c:	0198dbf4 	movhi	r6,25455
   25e10:	01cff4f4 	movhi	r7,16339
   25e14:	1009883a 	mov	r4,r2
   25e18:	180b883a 	mov	r5,r3
   25e1c:	3190d844 	addi	r6,r6,17249
   25e20:	39e1e9c4 	addi	r7,r7,-30809
   25e24:	002fa700 	call	2fa70 <__muldf3>
   25e28:	01a2d874 	movhi	r6,35681
   25e2c:	01cff1f4 	movhi	r7,16327
   25e30:	180b883a 	mov	r5,r3
   25e34:	31b22cc4 	addi	r6,r6,-14157
   25e38:	39e28a04 	addi	r7,r7,-30168
   25e3c:	1009883a 	mov	r4,r2
   25e40:	002e6c40 	call	2e6c4 <__adddf3>
   25e44:	8809883a 	mov	r4,r17
   25e48:	102d883a 	mov	r22,r2
   25e4c:	182b883a 	mov	r21,r3
   25e50:	0030aec0 	call	30aec <__floatsidf>
   25e54:	019427f4 	movhi	r6,20639
   25e58:	01cff4f4 	movhi	r7,16339
   25e5c:	1009883a 	mov	r4,r2
   25e60:	180b883a 	mov	r5,r3
   25e64:	319e7ec4 	addi	r6,r6,31227
   25e68:	39d104c4 	addi	r7,r7,17427
   25e6c:	002fa700 	call	2fa70 <__muldf3>
   25e70:	b009883a 	mov	r4,r22
   25e74:	a80b883a 	mov	r5,r21
   25e78:	100d883a 	mov	r6,r2
   25e7c:	180f883a 	mov	r7,r3
   25e80:	002e6c40 	call	2e6c4 <__adddf3>
   25e84:	1009883a 	mov	r4,r2
   25e88:	180b883a 	mov	r5,r3
   25e8c:	102d883a 	mov	r22,r2
   25e90:	182b883a 	mov	r21,r3
   25e94:	0030a640 	call	30a64 <__fixdfsi>
   25e98:	b009883a 	mov	r4,r22
   25e9c:	a80b883a 	mov	r5,r21
   25ea0:	000d883a 	mov	r6,zero
   25ea4:	000f883a 	mov	r7,zero
   25ea8:	d8800515 	stw	r2,20(sp)
   25eac:	002f9900 	call	2f990 <__ledf2>
   25eb0:	10023116 	blt	r2,zero,26778 <_dtoa_r+0xb28>
   25eb4:	d8c00517 	ldw	r3,20(sp)
   25eb8:	00800584 	movi	r2,22
   25ebc:	10c21f36 	bltu	r2,r3,2673c <_dtoa_r+0xaec>
   25ec0:	180490fa 	slli	r2,r3,3
   25ec4:	00c000f4 	movhi	r3,3
   25ec8:	18ce5a04 	addi	r3,r3,14696
   25ecc:	1885883a 	add	r2,r3,r2
   25ed0:	11000017 	ldw	r4,0(r2)
   25ed4:	11400117 	ldw	r5,4(r2)
   25ed8:	900d883a 	mov	r6,r18
   25edc:	980f883a 	mov	r7,r19
   25ee0:	002f8b00 	call	2f8b0 <__gedf2>
   25ee4:	0082a70e 	bge	zero,r2,26984 <_dtoa_r+0xd34>
   25ee8:	d9000517 	ldw	r4,20(sp)
   25eec:	d8000c15 	stw	zero,48(sp)
   25ef0:	213fffc4 	addi	r4,r4,-1
   25ef4:	d9000515 	stw	r4,20(sp)
   25ef8:	a463c83a 	sub	r17,r20,r17
   25efc:	8dbfffc4 	addi	r22,r17,-1
   25f00:	b0021916 	blt	r22,zero,26768 <_dtoa_r+0xb18>
   25f04:	d8000815 	stw	zero,32(sp)
   25f08:	d8800517 	ldw	r2,20(sp)
   25f0c:	10020e16 	blt	r2,zero,26748 <_dtoa_r+0xaf8>
   25f10:	b0ad883a 	add	r22,r22,r2
   25f14:	d8800a15 	stw	r2,40(sp)
   25f18:	d8000915 	stw	zero,36(sp)
   25f1c:	d8c00317 	ldw	r3,12(sp)
   25f20:	00800244 	movi	r2,9
   25f24:	10c11a36 	bltu	r2,r3,26390 <_dtoa_r+0x740>
   25f28:	00800144 	movi	r2,5
   25f2c:	10c4fc0e 	bge	r2,r3,27320 <_dtoa_r+0x16d0>
   25f30:	18ffff04 	addi	r3,r3,-4
   25f34:	d8c00315 	stw	r3,12(sp)
   25f38:	0029883a 	mov	r20,zero
   25f3c:	d9800317 	ldw	r6,12(sp)
   25f40:	008000c4 	movi	r2,3
   25f44:	3083bd26 	beq	r6,r2,26e3c <_dtoa_r+0x11ec>
   25f48:	1183670e 	bge	r2,r6,26ce8 <_dtoa_r+0x1098>
   25f4c:	d8c00317 	ldw	r3,12(sp)
   25f50:	00800104 	movi	r2,4
   25f54:	1882e726 	beq	r3,r2,26af4 <_dtoa_r+0xea4>
   25f58:	00800144 	movi	r2,5
   25f5c:	1884f21e 	bne	r3,r2,27328 <_dtoa_r+0x16d8>
   25f60:	00800044 	movi	r2,1
   25f64:	d8800b15 	stw	r2,44(sp)
   25f68:	d8c02217 	ldw	r3,136(sp)
   25f6c:	d9000517 	ldw	r4,20(sp)
   25f70:	1907883a 	add	r3,r3,r4
   25f74:	19800044 	addi	r6,r3,1
   25f78:	d8c00d15 	stw	r3,52(sp)
   25f7c:	d9800615 	stw	r6,24(sp)
   25f80:	0183c30e 	bge	zero,r6,26e90 <_dtoa_r+0x1240>
   25f84:	d9800617 	ldw	r6,24(sp)
   25f88:	3023883a 	mov	r17,r6
   25f8c:	80001115 	stw	zero,68(r16)
   25f90:	008005c4 	movi	r2,23
   25f94:	1184f62e 	bgeu	r2,r6,27370 <_dtoa_r+0x1720>
   25f98:	00c00044 	movi	r3,1
   25f9c:	00800104 	movi	r2,4
   25fa0:	1085883a 	add	r2,r2,r2
   25fa4:	11000504 	addi	r4,r2,20
   25fa8:	180b883a 	mov	r5,r3
   25fac:	18c00044 	addi	r3,r3,1
   25fb0:	313ffb2e 	bgeu	r6,r4,25fa0 <__alt_data_end+0xfffe63d0>
   25fb4:	81401115 	stw	r5,68(r16)
   25fb8:	8009883a 	mov	r4,r16
   25fbc:	00292780 	call	29278 <_Balloc>
   25fc0:	d8800715 	stw	r2,28(sp)
   25fc4:	80801015 	stw	r2,64(r16)
   25fc8:	00800384 	movi	r2,14
   25fcc:	1440fd36 	bltu	r2,r17,263c4 <_dtoa_r+0x774>
   25fd0:	a000fc26 	beq	r20,zero,263c4 <_dtoa_r+0x774>
   25fd4:	d8800517 	ldw	r2,20(sp)
   25fd8:	0083b90e 	bge	zero,r2,26ec0 <_dtoa_r+0x1270>
   25fdc:	d8c00517 	ldw	r3,20(sp)
   25fe0:	108003cc 	andi	r2,r2,15
   25fe4:	100490fa 	slli	r2,r2,3
   25fe8:	182fd13a 	srai	r23,r3,4
   25fec:	00c000f4 	movhi	r3,3
   25ff0:	18ce5a04 	addi	r3,r3,14696
   25ff4:	1885883a 	add	r2,r3,r2
   25ff8:	b8c0040c 	andi	r3,r23,16
   25ffc:	12c00017 	ldw	r11,0(r2)
   26000:	12800117 	ldw	r10,4(r2)
   26004:	18039726 	beq	r3,zero,26e64 <_dtoa_r+0x1214>
   26008:	008000f4 	movhi	r2,3
   2600c:	108e5004 	addi	r2,r2,14656
   26010:	11800817 	ldw	r6,32(r2)
   26014:	11c00917 	ldw	r7,36(r2)
   26018:	9009883a 	mov	r4,r18
   2601c:	980b883a 	mov	r5,r19
   26020:	da801615 	stw	r10,88(sp)
   26024:	dac01515 	stw	r11,84(sp)
   26028:	002ef600 	call	2ef60 <__divdf3>
   2602c:	da801617 	ldw	r10,88(sp)
   26030:	dac01517 	ldw	r11,84(sp)
   26034:	bdc003cc 	andi	r23,r23,15
   26038:	044000c4 	movi	r17,3
   2603c:	d8800e15 	stw	r2,56(sp)
   26040:	182b883a 	mov	r21,r3
   26044:	b8001126 	beq	r23,zero,2608c <_dtoa_r+0x43c>
   26048:	050000f4 	movhi	r20,3
   2604c:	a50e5004 	addi	r20,r20,14656
   26050:	5805883a 	mov	r2,r11
   26054:	5007883a 	mov	r3,r10
   26058:	b980004c 	andi	r6,r23,1
   2605c:	1009883a 	mov	r4,r2
   26060:	b82fd07a 	srai	r23,r23,1
   26064:	180b883a 	mov	r5,r3
   26068:	30000426 	beq	r6,zero,2607c <_dtoa_r+0x42c>
   2606c:	a1800017 	ldw	r6,0(r20)
   26070:	a1c00117 	ldw	r7,4(r20)
   26074:	8c400044 	addi	r17,r17,1
   26078:	002fa700 	call	2fa70 <__muldf3>
   2607c:	a5000204 	addi	r20,r20,8
   26080:	b83ff51e 	bne	r23,zero,26058 <__alt_data_end+0xfffe6488>
   26084:	1017883a 	mov	r11,r2
   26088:	1815883a 	mov	r10,r3
   2608c:	d9000e17 	ldw	r4,56(sp)
   26090:	a80b883a 	mov	r5,r21
   26094:	580d883a 	mov	r6,r11
   26098:	500f883a 	mov	r7,r10
   2609c:	002ef600 	call	2ef60 <__divdf3>
   260a0:	1029883a 	mov	r20,r2
   260a4:	182b883a 	mov	r21,r3
   260a8:	d9800c17 	ldw	r6,48(sp)
   260ac:	30000626 	beq	r6,zero,260c8 <_dtoa_r+0x478>
   260b0:	a009883a 	mov	r4,r20
   260b4:	a80b883a 	mov	r5,r21
   260b8:	000d883a 	mov	r6,zero
   260bc:	01cffc34 	movhi	r7,16368
   260c0:	002f9900 	call	2f990 <__ledf2>
   260c4:	10043216 	blt	r2,zero,27190 <_dtoa_r+0x1540>
   260c8:	8809883a 	mov	r4,r17
   260cc:	0030aec0 	call	30aec <__floatsidf>
   260d0:	1009883a 	mov	r4,r2
   260d4:	180b883a 	mov	r5,r3
   260d8:	a00d883a 	mov	r6,r20
   260dc:	a80f883a 	mov	r7,r21
   260e0:	002fa700 	call	2fa70 <__muldf3>
   260e4:	000d883a 	mov	r6,zero
   260e8:	1009883a 	mov	r4,r2
   260ec:	180b883a 	mov	r5,r3
   260f0:	01d00734 	movhi	r7,16412
   260f4:	002e6c40 	call	2e6c4 <__adddf3>
   260f8:	1023883a 	mov	r17,r2
   260fc:	d9800617 	ldw	r6,24(sp)
   26100:	00bf3034 	movhi	r2,64704
   26104:	1885883a 	add	r2,r3,r2
   26108:	d8800e15 	stw	r2,56(sp)
   2610c:	30032e26 	beq	r6,zero,26dc8 <_dtoa_r+0x1178>
   26110:	d8c00517 	ldw	r3,20(sp)
   26114:	da800617 	ldw	r10,24(sp)
   26118:	d8c01215 	stw	r3,72(sp)
   2611c:	d9000b17 	ldw	r4,44(sp)
   26120:	2003b026 	beq	r4,zero,26fe4 <_dtoa_r+0x1394>
   26124:	50bfffc4 	addi	r2,r10,-1
   26128:	100490fa 	slli	r2,r2,3
   2612c:	00c000f4 	movhi	r3,3
   26130:	18ce5a04 	addi	r3,r3,14696
   26134:	1885883a 	add	r2,r3,r2
   26138:	11800017 	ldw	r6,0(r2)
   2613c:	11c00117 	ldw	r7,4(r2)
   26140:	d8800717 	ldw	r2,28(sp)
   26144:	0009883a 	mov	r4,zero
   26148:	014ff834 	movhi	r5,16352
   2614c:	da801615 	stw	r10,88(sp)
   26150:	15c00044 	addi	r23,r2,1
   26154:	002ef600 	call	2ef60 <__divdf3>
   26158:	d9c00e17 	ldw	r7,56(sp)
   2615c:	880d883a 	mov	r6,r17
   26160:	1009883a 	mov	r4,r2
   26164:	180b883a 	mov	r5,r3
   26168:	00301940 	call	30194 <__subdf3>
   2616c:	a80b883a 	mov	r5,r21
   26170:	a009883a 	mov	r4,r20
   26174:	d8c01015 	stw	r3,64(sp)
   26178:	d8800e15 	stw	r2,56(sp)
   2617c:	0030a640 	call	30a64 <__fixdfsi>
   26180:	1009883a 	mov	r4,r2
   26184:	d8801715 	stw	r2,92(sp)
   26188:	0030aec0 	call	30aec <__floatsidf>
   2618c:	a009883a 	mov	r4,r20
   26190:	a80b883a 	mov	r5,r21
   26194:	100d883a 	mov	r6,r2
   26198:	180f883a 	mov	r7,r3
   2619c:	00301940 	call	30194 <__subdf3>
   261a0:	da001717 	ldw	r8,92(sp)
   261a4:	1829883a 	mov	r20,r3
   261a8:	d8c00717 	ldw	r3,28(sp)
   261ac:	d9000e17 	ldw	r4,56(sp)
   261b0:	d9401017 	ldw	r5,64(sp)
   261b4:	42000c04 	addi	r8,r8,48
   261b8:	1023883a 	mov	r17,r2
   261bc:	1a000005 	stb	r8,0(r3)
   261c0:	880d883a 	mov	r6,r17
   261c4:	a00f883a 	mov	r7,r20
   261c8:	402b883a 	mov	r21,r8
   261cc:	002f8b00 	call	2f8b0 <__gedf2>
   261d0:	00844516 	blt	zero,r2,272e8 <_dtoa_r+0x1698>
   261d4:	0009883a 	mov	r4,zero
   261d8:	014ffc34 	movhi	r5,16368
   261dc:	880d883a 	mov	r6,r17
   261e0:	a00f883a 	mov	r7,r20
   261e4:	00301940 	call	30194 <__subdf3>
   261e8:	d9000e17 	ldw	r4,56(sp)
   261ec:	d9401017 	ldw	r5,64(sp)
   261f0:	100d883a 	mov	r6,r2
   261f4:	180f883a 	mov	r7,r3
   261f8:	002f8b00 	call	2f8b0 <__gedf2>
   261fc:	da801617 	ldw	r10,88(sp)
   26200:	00843616 	blt	zero,r2,272dc <_dtoa_r+0x168c>
   26204:	00800044 	movi	r2,1
   26208:	12806e0e 	bge	r2,r10,263c4 <_dtoa_r+0x774>
   2620c:	d9000717 	ldw	r4,28(sp)
   26210:	dd801315 	stw	r22,76(sp)
   26214:	dc001115 	stw	r16,68(sp)
   26218:	2295883a 	add	r10,r4,r10
   2621c:	dcc01415 	stw	r19,80(sp)
   26220:	502d883a 	mov	r22,r10
   26224:	dcc01017 	ldw	r19,64(sp)
   26228:	b821883a 	mov	r16,r23
   2622c:	dc801015 	stw	r18,64(sp)
   26230:	dc800e17 	ldw	r18,56(sp)
   26234:	00000906 	br	2625c <_dtoa_r+0x60c>
   26238:	00301940 	call	30194 <__subdf3>
   2623c:	1009883a 	mov	r4,r2
   26240:	180b883a 	mov	r5,r3
   26244:	900d883a 	mov	r6,r18
   26248:	980f883a 	mov	r7,r19
   2624c:	002f9900 	call	2f990 <__ledf2>
   26250:	10040e16 	blt	r2,zero,2728c <_dtoa_r+0x163c>
   26254:	b821883a 	mov	r16,r23
   26258:	bd841026 	beq	r23,r22,2729c <_dtoa_r+0x164c>
   2625c:	9009883a 	mov	r4,r18
   26260:	980b883a 	mov	r5,r19
   26264:	000d883a 	mov	r6,zero
   26268:	01d00934 	movhi	r7,16420
   2626c:	002fa700 	call	2fa70 <__muldf3>
   26270:	000d883a 	mov	r6,zero
   26274:	01d00934 	movhi	r7,16420
   26278:	8809883a 	mov	r4,r17
   2627c:	a00b883a 	mov	r5,r20
   26280:	1025883a 	mov	r18,r2
   26284:	1827883a 	mov	r19,r3
   26288:	002fa700 	call	2fa70 <__muldf3>
   2628c:	180b883a 	mov	r5,r3
   26290:	1009883a 	mov	r4,r2
   26294:	1823883a 	mov	r17,r3
   26298:	1029883a 	mov	r20,r2
   2629c:	0030a640 	call	30a64 <__fixdfsi>
   262a0:	1009883a 	mov	r4,r2
   262a4:	102b883a 	mov	r21,r2
   262a8:	0030aec0 	call	30aec <__floatsidf>
   262ac:	a009883a 	mov	r4,r20
   262b0:	880b883a 	mov	r5,r17
   262b4:	100d883a 	mov	r6,r2
   262b8:	180f883a 	mov	r7,r3
   262bc:	00301940 	call	30194 <__subdf3>
   262c0:	ad400c04 	addi	r21,r21,48
   262c4:	1009883a 	mov	r4,r2
   262c8:	180b883a 	mov	r5,r3
   262cc:	900d883a 	mov	r6,r18
   262d0:	980f883a 	mov	r7,r19
   262d4:	85400005 	stb	r21,0(r16)
   262d8:	1023883a 	mov	r17,r2
   262dc:	1829883a 	mov	r20,r3
   262e0:	002f9900 	call	2f990 <__ledf2>
   262e4:	bdc00044 	addi	r23,r23,1
   262e8:	0009883a 	mov	r4,zero
   262ec:	014ffc34 	movhi	r5,16368
   262f0:	880d883a 	mov	r6,r17
   262f4:	a00f883a 	mov	r7,r20
   262f8:	103fcf0e 	bge	r2,zero,26238 <__alt_data_end+0xfffe6668>
   262fc:	d9801217 	ldw	r6,72(sp)
   26300:	dc001117 	ldw	r16,68(sp)
   26304:	d9800515 	stw	r6,20(sp)
   26308:	8009883a 	mov	r4,r16
   2630c:	e00b883a 	mov	r5,fp
   26310:	00293200 	call	29320 <_Bfree>
   26314:	d8c00517 	ldw	r3,20(sp)
   26318:	d9002317 	ldw	r4,140(sp)
   2631c:	d9802517 	ldw	r6,148(sp)
   26320:	b8000005 	stb	zero,0(r23)
   26324:	18800044 	addi	r2,r3,1
   26328:	20800015 	stw	r2,0(r4)
   2632c:	30027226 	beq	r6,zero,26cf8 <_dtoa_r+0x10a8>
   26330:	35c00015 	stw	r23,0(r6)
   26334:	d8800717 	ldw	r2,28(sp)
   26338:	003e7406 	br	25d0c <__alt_data_end+0xfffe613c>
   2633c:	00800434 	movhi	r2,16
   26340:	10bfffc4 	addi	r2,r2,-1
   26344:	a8aa703a 	and	r21,r21,r2
   26348:	a83e801e 	bne	r21,zero,25d4c <__alt_data_end+0xfffe617c>
   2634c:	008000f4 	movhi	r2,3
   26350:	108e3b04 	addi	r2,r2,14572
   26354:	003e7f06 	br	25d54 <__alt_data_end+0xfffe6184>
   26358:	10c00204 	addi	r3,r2,8
   2635c:	003e8206 	br	25d68 <__alt_data_end+0xfffe6198>
   26360:	01400434 	movhi	r5,16
   26364:	297fffc4 	addi	r5,r5,-1
   26368:	994a703a 	and	r5,r19,r5
   2636c:	9009883a 	mov	r4,r18
   26370:	8c7f0044 	addi	r17,r17,-1023
   26374:	294ffc34 	orhi	r5,r5,16368
   26378:	dd000217 	ldw	r20,8(sp)
   2637c:	d8000f15 	stw	zero,60(sp)
   26380:	003e9f06 	br	25e00 <__alt_data_end+0xfffe6230>
   26384:	008000f4 	movhi	r2,3
   26388:	108e2a04 	addi	r2,r2,14504
   2638c:	003e5f06 	br	25d0c <__alt_data_end+0xfffe613c>
   26390:	80001115 	stw	zero,68(r16)
   26394:	8009883a 	mov	r4,r16
   26398:	000b883a 	mov	r5,zero
   2639c:	00292780 	call	29278 <_Balloc>
   263a0:	01bfffc4 	movi	r6,-1
   263a4:	d8800715 	stw	r2,28(sp)
   263a8:	80801015 	stw	r2,64(r16)
   263ac:	00800044 	movi	r2,1
   263b0:	d9800615 	stw	r6,24(sp)
   263b4:	d8800b15 	stw	r2,44(sp)
   263b8:	d8002215 	stw	zero,136(sp)
   263bc:	d9800d15 	stw	r6,52(sp)
   263c0:	d8000315 	stw	zero,12(sp)
   263c4:	d8800117 	ldw	r2,4(sp)
   263c8:	10008e16 	blt	r2,zero,26604 <_dtoa_r+0x9b4>
   263cc:	d9000517 	ldw	r4,20(sp)
   263d0:	00c00384 	movi	r3,14
   263d4:	19008b16 	blt	r3,r4,26604 <_dtoa_r+0x9b4>
   263d8:	200490fa 	slli	r2,r4,3
   263dc:	00c000f4 	movhi	r3,3
   263e0:	d9802217 	ldw	r6,136(sp)
   263e4:	18ce5a04 	addi	r3,r3,14696
   263e8:	1885883a 	add	r2,r3,r2
   263ec:	14400017 	ldw	r17,0(r2)
   263f0:	15000117 	ldw	r20,4(r2)
   263f4:	3001c716 	blt	r6,zero,26b14 <_dtoa_r+0xec4>
   263f8:	880d883a 	mov	r6,r17
   263fc:	a00f883a 	mov	r7,r20
   26400:	9009883a 	mov	r4,r18
   26404:	980b883a 	mov	r5,r19
   26408:	002ef600 	call	2ef60 <__divdf3>
   2640c:	180b883a 	mov	r5,r3
   26410:	1009883a 	mov	r4,r2
   26414:	0030a640 	call	30a64 <__fixdfsi>
   26418:	1009883a 	mov	r4,r2
   2641c:	102d883a 	mov	r22,r2
   26420:	0030aec0 	call	30aec <__floatsidf>
   26424:	1009883a 	mov	r4,r2
   26428:	180b883a 	mov	r5,r3
   2642c:	880d883a 	mov	r6,r17
   26430:	a00f883a 	mov	r7,r20
   26434:	002fa700 	call	2fa70 <__muldf3>
   26438:	9009883a 	mov	r4,r18
   2643c:	980b883a 	mov	r5,r19
   26440:	100d883a 	mov	r6,r2
   26444:	180f883a 	mov	r7,r3
   26448:	00301940 	call	30194 <__subdf3>
   2644c:	d9000717 	ldw	r4,28(sp)
   26450:	d9800617 	ldw	r6,24(sp)
   26454:	180b883a 	mov	r5,r3
   26458:	b0c00c04 	addi	r3,r22,48
   2645c:	20c00005 	stb	r3,0(r4)
   26460:	25c00044 	addi	r23,r4,1
   26464:	01000044 	movi	r4,1
   26468:	1011883a 	mov	r8,r2
   2646c:	2807883a 	mov	r3,r5
   26470:	31003d26 	beq	r6,r4,26568 <_dtoa_r+0x918>
   26474:	000d883a 	mov	r6,zero
   26478:	01d00934 	movhi	r7,16420
   2647c:	1009883a 	mov	r4,r2
   26480:	002fa700 	call	2fa70 <__muldf3>
   26484:	1009883a 	mov	r4,r2
   26488:	180b883a 	mov	r5,r3
   2648c:	000d883a 	mov	r6,zero
   26490:	000f883a 	mov	r7,zero
   26494:	1027883a 	mov	r19,r2
   26498:	182b883a 	mov	r21,r3
   2649c:	002f82c0 	call	2f82c <__eqdf2>
   264a0:	103f9926 	beq	r2,zero,26308 <__alt_data_end+0xfffe6738>
   264a4:	d8c00617 	ldw	r3,24(sp)
   264a8:	d9000717 	ldw	r4,28(sp)
   264ac:	b825883a 	mov	r18,r23
   264b0:	18bfffc4 	addi	r2,r3,-1
   264b4:	20ad883a 	add	r22,r4,r2
   264b8:	dc000315 	stw	r16,12(sp)
   264bc:	00000a06 	br	264e8 <_dtoa_r+0x898>
   264c0:	002fa700 	call	2fa70 <__muldf3>
   264c4:	1009883a 	mov	r4,r2
   264c8:	180b883a 	mov	r5,r3
   264cc:	000d883a 	mov	r6,zero
   264d0:	000f883a 	mov	r7,zero
   264d4:	1027883a 	mov	r19,r2
   264d8:	182b883a 	mov	r21,r3
   264dc:	b825883a 	mov	r18,r23
   264e0:	002f82c0 	call	2f82c <__eqdf2>
   264e4:	10022626 	beq	r2,zero,26d80 <_dtoa_r+0x1130>
   264e8:	880d883a 	mov	r6,r17
   264ec:	a00f883a 	mov	r7,r20
   264f0:	9809883a 	mov	r4,r19
   264f4:	a80b883a 	mov	r5,r21
   264f8:	002ef600 	call	2ef60 <__divdf3>
   264fc:	180b883a 	mov	r5,r3
   26500:	1009883a 	mov	r4,r2
   26504:	0030a640 	call	30a64 <__fixdfsi>
   26508:	1009883a 	mov	r4,r2
   2650c:	1021883a 	mov	r16,r2
   26510:	0030aec0 	call	30aec <__floatsidf>
   26514:	1009883a 	mov	r4,r2
   26518:	180b883a 	mov	r5,r3
   2651c:	880d883a 	mov	r6,r17
   26520:	a00f883a 	mov	r7,r20
   26524:	002fa700 	call	2fa70 <__muldf3>
   26528:	9809883a 	mov	r4,r19
   2652c:	a80b883a 	mov	r5,r21
   26530:	100d883a 	mov	r6,r2
   26534:	180f883a 	mov	r7,r3
   26538:	00301940 	call	30194 <__subdf3>
   2653c:	82000c04 	addi	r8,r16,48
   26540:	92000005 	stb	r8,0(r18)
   26544:	1009883a 	mov	r4,r2
   26548:	180b883a 	mov	r5,r3
   2654c:	000d883a 	mov	r6,zero
   26550:	01d00934 	movhi	r7,16420
   26554:	1011883a 	mov	r8,r2
   26558:	bdc00044 	addi	r23,r23,1
   2655c:	95bfd81e 	bne	r18,r22,264c0 <__alt_data_end+0xfffe68f0>
   26560:	802d883a 	mov	r22,r16
   26564:	dc000317 	ldw	r16,12(sp)
   26568:	4009883a 	mov	r4,r8
   2656c:	180b883a 	mov	r5,r3
   26570:	400d883a 	mov	r6,r8
   26574:	180f883a 	mov	r7,r3
   26578:	002e6c40 	call	2e6c4 <__adddf3>
   2657c:	8809883a 	mov	r4,r17
   26580:	a00b883a 	mov	r5,r20
   26584:	100d883a 	mov	r6,r2
   26588:	180f883a 	mov	r7,r3
   2658c:	1027883a 	mov	r19,r2
   26590:	1825883a 	mov	r18,r3
   26594:	002f9900 	call	2f990 <__ledf2>
   26598:	10000816 	blt	r2,zero,265bc <_dtoa_r+0x96c>
   2659c:	8809883a 	mov	r4,r17
   265a0:	a00b883a 	mov	r5,r20
   265a4:	980d883a 	mov	r6,r19
   265a8:	900f883a 	mov	r7,r18
   265ac:	002f82c0 	call	2f82c <__eqdf2>
   265b0:	103f551e 	bne	r2,zero,26308 <__alt_data_end+0xfffe6738>
   265b4:	b580004c 	andi	r22,r22,1
   265b8:	b03f5326 	beq	r22,zero,26308 <__alt_data_end+0xfffe6738>
   265bc:	bd7fffc3 	ldbu	r21,-1(r23)
   265c0:	b8bfffc4 	addi	r2,r23,-1
   265c4:	1007883a 	mov	r3,r2
   265c8:	01400e44 	movi	r5,57
   265cc:	d9800717 	ldw	r6,28(sp)
   265d0:	00000506 	br	265e8 <_dtoa_r+0x998>
   265d4:	18ffffc4 	addi	r3,r3,-1
   265d8:	30825e26 	beq	r6,r2,26f54 <_dtoa_r+0x1304>
   265dc:	1d400003 	ldbu	r21,0(r3)
   265e0:	102f883a 	mov	r23,r2
   265e4:	10bfffc4 	addi	r2,r2,-1
   265e8:	a9003fcc 	andi	r4,r21,255
   265ec:	2100201c 	xori	r4,r4,128
   265f0:	213fe004 	addi	r4,r4,-128
   265f4:	217ff726 	beq	r4,r5,265d4 <__alt_data_end+0xfffe6a04>
   265f8:	aa000044 	addi	r8,r21,1
   265fc:	12000005 	stb	r8,0(r2)
   26600:	003f4106 	br	26308 <__alt_data_end+0xfffe6738>
   26604:	d8c00b17 	ldw	r3,44(sp)
   26608:	18006726 	beq	r3,zero,267a8 <_dtoa_r+0xb58>
   2660c:	d9000317 	ldw	r4,12(sp)
   26610:	00c00044 	movi	r3,1
   26614:	19016a0e 	bge	r3,r4,26bc0 <_dtoa_r+0xf70>
   26618:	d8800617 	ldw	r2,24(sp)
   2661c:	d8c00917 	ldw	r3,36(sp)
   26620:	157fffc4 	addi	r21,r2,-1
   26624:	1d420716 	blt	r3,r21,26e44 <_dtoa_r+0x11f4>
   26628:	1d6bc83a 	sub	r21,r3,r21
   2662c:	d8800617 	ldw	r2,24(sp)
   26630:	1002c716 	blt	r2,zero,27150 <_dtoa_r+0x1500>
   26634:	dd000817 	ldw	r20,32(sp)
   26638:	d8800617 	ldw	r2,24(sp)
   2663c:	d9800817 	ldw	r6,32(sp)
   26640:	8009883a 	mov	r4,r16
   26644:	01400044 	movi	r5,1
   26648:	308d883a 	add	r6,r6,r2
   2664c:	d9800815 	stw	r6,32(sp)
   26650:	b0ad883a 	add	r22,r22,r2
   26654:	00296780 	call	29678 <__i2b>
   26658:	1023883a 	mov	r17,r2
   2665c:	a0000826 	beq	r20,zero,26680 <_dtoa_r+0xa30>
   26660:	0580070e 	bge	zero,r22,26680 <_dtoa_r+0xa30>
   26664:	b005883a 	mov	r2,r22
   26668:	a5812016 	blt	r20,r22,26aec <_dtoa_r+0xe9c>
   2666c:	d8c00817 	ldw	r3,32(sp)
   26670:	a0a9c83a 	sub	r20,r20,r2
   26674:	b0adc83a 	sub	r22,r22,r2
   26678:	1887c83a 	sub	r3,r3,r2
   2667c:	d8c00815 	stw	r3,32(sp)
   26680:	d9000917 	ldw	r4,36(sp)
   26684:	0100140e 	bge	zero,r4,266d8 <_dtoa_r+0xa88>
   26688:	d9800b17 	ldw	r6,44(sp)
   2668c:	3001e526 	beq	r6,zero,26e24 <_dtoa_r+0x11d4>
   26690:	05400e0e 	bge	zero,r21,266cc <_dtoa_r+0xa7c>
   26694:	880b883a 	mov	r5,r17
   26698:	8009883a 	mov	r4,r16
   2669c:	a80d883a 	mov	r6,r21
   266a0:	00298b00 	call	298b0 <__pow5mult>
   266a4:	e00d883a 	mov	r6,fp
   266a8:	8009883a 	mov	r4,r16
   266ac:	100b883a 	mov	r5,r2
   266b0:	1023883a 	mov	r17,r2
   266b4:	00296b40 	call	296b4 <__multiply>
   266b8:	102f883a 	mov	r23,r2
   266bc:	e00b883a 	mov	r5,fp
   266c0:	8009883a 	mov	r4,r16
   266c4:	00293200 	call	29320 <_Bfree>
   266c8:	b839883a 	mov	fp,r23
   266cc:	d8800917 	ldw	r2,36(sp)
   266d0:	154dc83a 	sub	r6,r2,r21
   266d4:	3001281e 	bne	r6,zero,26b78 <_dtoa_r+0xf28>
   266d8:	05c00044 	movi	r23,1
   266dc:	8009883a 	mov	r4,r16
   266e0:	b80b883a 	mov	r5,r23
   266e4:	00296780 	call	29678 <__i2b>
   266e8:	d8c00a17 	ldw	r3,40(sp)
   266ec:	102b883a 	mov	r21,r2
   266f0:	00c0310e 	bge	zero,r3,267b8 <_dtoa_r+0xb68>
   266f4:	8009883a 	mov	r4,r16
   266f8:	100b883a 	mov	r5,r2
   266fc:	180d883a 	mov	r6,r3
   26700:	00298b00 	call	298b0 <__pow5mult>
   26704:	d9000317 	ldw	r4,12(sp)
   26708:	102b883a 	mov	r21,r2
   2670c:	b9011f0e 	bge	r23,r4,26b8c <_dtoa_r+0xf3c>
   26710:	0027883a 	mov	r19,zero
   26714:	a8800417 	ldw	r2,16(r21)
   26718:	10800104 	addi	r2,r2,4
   2671c:	1085883a 	add	r2,r2,r2
   26720:	1085883a 	add	r2,r2,r2
   26724:	a885883a 	add	r2,r21,r2
   26728:	11000017 	ldw	r4,0(r2)
   2672c:	00295600 	call	29560 <__hi0bits>
   26730:	00c00804 	movi	r3,32
   26734:	1885c83a 	sub	r2,r3,r2
   26738:	00002506 	br	267d0 <_dtoa_r+0xb80>
   2673c:	01800044 	movi	r6,1
   26740:	d9800c15 	stw	r6,48(sp)
   26744:	003dec06 	br	25ef8 <__alt_data_end+0xfffe6328>
   26748:	d8c00817 	ldw	r3,32(sp)
   2674c:	d9000517 	ldw	r4,20(sp)
   26750:	d8000a15 	stw	zero,40(sp)
   26754:	1907c83a 	sub	r3,r3,r4
   26758:	010dc83a 	sub	r6,zero,r4
   2675c:	d8c00815 	stw	r3,32(sp)
   26760:	d9800915 	stw	r6,36(sp)
   26764:	003ded06 	br	25f1c <__alt_data_end+0xfffe634c>
   26768:	05adc83a 	sub	r22,zero,r22
   2676c:	dd800815 	stw	r22,32(sp)
   26770:	002d883a 	mov	r22,zero
   26774:	003de406 	br	25f08 <__alt_data_end+0xfffe6338>
   26778:	d9000517 	ldw	r4,20(sp)
   2677c:	0030aec0 	call	30aec <__floatsidf>
   26780:	1009883a 	mov	r4,r2
   26784:	180b883a 	mov	r5,r3
   26788:	b00d883a 	mov	r6,r22
   2678c:	a80f883a 	mov	r7,r21
   26790:	002f82c0 	call	2f82c <__eqdf2>
   26794:	103dc726 	beq	r2,zero,25eb4 <__alt_data_end+0xfffe62e4>
   26798:	d8800517 	ldw	r2,20(sp)
   2679c:	10bfffc4 	addi	r2,r2,-1
   267a0:	d8800515 	stw	r2,20(sp)
   267a4:	003dc306 	br	25eb4 <__alt_data_end+0xfffe62e4>
   267a8:	dd400917 	ldw	r21,36(sp)
   267ac:	dd000817 	ldw	r20,32(sp)
   267b0:	0023883a 	mov	r17,zero
   267b4:	003fa906 	br	2665c <__alt_data_end+0xfffe6a8c>
   267b8:	d9800317 	ldw	r6,12(sp)
   267bc:	b981670e 	bge	r23,r6,26d5c <_dtoa_r+0x110c>
   267c0:	0027883a 	mov	r19,zero
   267c4:	d8c00a17 	ldw	r3,40(sp)
   267c8:	183fd21e 	bne	r3,zero,26714 <__alt_data_end+0xfffe6b44>
   267cc:	00800044 	movi	r2,1
   267d0:	1585883a 	add	r2,r2,r22
   267d4:	108007cc 	andi	r2,r2,31
   267d8:	10005f26 	beq	r2,zero,26958 <_dtoa_r+0xd08>
   267dc:	00c00804 	movi	r3,32
   267e0:	1887c83a 	sub	r3,r3,r2
   267e4:	01000104 	movi	r4,4
   267e8:	20c2dd0e 	bge	r4,r3,27360 <_dtoa_r+0x1710>
   267ec:	d9000817 	ldw	r4,32(sp)
   267f0:	00c00704 	movi	r3,28
   267f4:	1885c83a 	sub	r2,r3,r2
   267f8:	2089883a 	add	r4,r4,r2
   267fc:	d9000815 	stw	r4,32(sp)
   26800:	a0a9883a 	add	r20,r20,r2
   26804:	b0ad883a 	add	r22,r22,r2
   26808:	d8800817 	ldw	r2,32(sp)
   2680c:	0080050e 	bge	zero,r2,26824 <_dtoa_r+0xbd4>
   26810:	e00b883a 	mov	r5,fp
   26814:	8009883a 	mov	r4,r16
   26818:	100d883a 	mov	r6,r2
   2681c:	00299f00 	call	299f0 <__lshift>
   26820:	1039883a 	mov	fp,r2
   26824:	0580050e 	bge	zero,r22,2683c <_dtoa_r+0xbec>
   26828:	a80b883a 	mov	r5,r21
   2682c:	8009883a 	mov	r4,r16
   26830:	b00d883a 	mov	r6,r22
   26834:	00299f00 	call	299f0 <__lshift>
   26838:	102b883a 	mov	r21,r2
   2683c:	d8c00c17 	ldw	r3,48(sp)
   26840:	1801161e 	bne	r3,zero,26c9c <_dtoa_r+0x104c>
   26844:	d8c00617 	ldw	r3,24(sp)
   26848:	00c12d0e 	bge	zero,r3,26d00 <_dtoa_r+0x10b0>
   2684c:	d8c00b17 	ldw	r3,44(sp)
   26850:	1800571e 	bne	r3,zero,269b0 <_dtoa_r+0xd60>
   26854:	dc800717 	ldw	r18,28(sp)
   26858:	dcc00617 	ldw	r19,24(sp)
   2685c:	9029883a 	mov	r20,r18
   26860:	00000206 	br	2686c <_dtoa_r+0xc1c>
   26864:	00293480 	call	29348 <__multadd>
   26868:	1039883a 	mov	fp,r2
   2686c:	e009883a 	mov	r4,fp
   26870:	a80b883a 	mov	r5,r21
   26874:	0025a500 	call	25a50 <quorem>
   26878:	10800c04 	addi	r2,r2,48
   2687c:	90800005 	stb	r2,0(r18)
   26880:	94800044 	addi	r18,r18,1
   26884:	9507c83a 	sub	r3,r18,r20
   26888:	8009883a 	mov	r4,r16
   2688c:	e00b883a 	mov	r5,fp
   26890:	01800284 	movi	r6,10
   26894:	000f883a 	mov	r7,zero
   26898:	1cfff216 	blt	r3,r19,26864 <__alt_data_end+0xfffe6c94>
   2689c:	1011883a 	mov	r8,r2
   268a0:	d8800617 	ldw	r2,24(sp)
   268a4:	00822e0e 	bge	zero,r2,27160 <_dtoa_r+0x1510>
   268a8:	d9000717 	ldw	r4,28(sp)
   268ac:	0025883a 	mov	r18,zero
   268b0:	20af883a 	add	r23,r4,r2
   268b4:	e00b883a 	mov	r5,fp
   268b8:	01800044 	movi	r6,1
   268bc:	8009883a 	mov	r4,r16
   268c0:	da001715 	stw	r8,92(sp)
   268c4:	00299f00 	call	299f0 <__lshift>
   268c8:	1009883a 	mov	r4,r2
   268cc:	a80b883a 	mov	r5,r21
   268d0:	1039883a 	mov	fp,r2
   268d4:	0029b380 	call	29b38 <__mcmp>
   268d8:	da001717 	ldw	r8,92(sp)
   268dc:	00816e0e 	bge	zero,r2,26e98 <_dtoa_r+0x1248>
   268e0:	b93fffc3 	ldbu	r4,-1(r23)
   268e4:	b8bfffc4 	addi	r2,r23,-1
   268e8:	1007883a 	mov	r3,r2
   268ec:	01800e44 	movi	r6,57
   268f0:	d9c00717 	ldw	r7,28(sp)
   268f4:	00000506 	br	2690c <_dtoa_r+0xcbc>
   268f8:	18ffffc4 	addi	r3,r3,-1
   268fc:	38811926 	beq	r7,r2,26d64 <_dtoa_r+0x1114>
   26900:	19000003 	ldbu	r4,0(r3)
   26904:	102f883a 	mov	r23,r2
   26908:	10bfffc4 	addi	r2,r2,-1
   2690c:	21403fcc 	andi	r5,r4,255
   26910:	2940201c 	xori	r5,r5,128
   26914:	297fe004 	addi	r5,r5,-128
   26918:	29bff726 	beq	r5,r6,268f8 <__alt_data_end+0xfffe6d28>
   2691c:	21000044 	addi	r4,r4,1
   26920:	11000005 	stb	r4,0(r2)
   26924:	8009883a 	mov	r4,r16
   26928:	a80b883a 	mov	r5,r21
   2692c:	00293200 	call	29320 <_Bfree>
   26930:	883e7526 	beq	r17,zero,26308 <__alt_data_end+0xfffe6738>
   26934:	90000426 	beq	r18,zero,26948 <_dtoa_r+0xcf8>
   26938:	94400326 	beq	r18,r17,26948 <_dtoa_r+0xcf8>
   2693c:	8009883a 	mov	r4,r16
   26940:	900b883a 	mov	r5,r18
   26944:	00293200 	call	29320 <_Bfree>
   26948:	8009883a 	mov	r4,r16
   2694c:	880b883a 	mov	r5,r17
   26950:	00293200 	call	29320 <_Bfree>
   26954:	003e6c06 	br	26308 <__alt_data_end+0xfffe6738>
   26958:	00800704 	movi	r2,28
   2695c:	d9800817 	ldw	r6,32(sp)
   26960:	a0a9883a 	add	r20,r20,r2
   26964:	b0ad883a 	add	r22,r22,r2
   26968:	308d883a 	add	r6,r6,r2
   2696c:	d9800815 	stw	r6,32(sp)
   26970:	003fa506 	br	26808 <__alt_data_end+0xfffe6c38>
   26974:	013efb84 	movi	r4,-1042
   26978:	246bc83a 	sub	r21,r4,r17
   2697c:	9548983a 	sll	r4,r18,r21
   26980:	003d1806 	br	25de4 <__alt_data_end+0xfffe6214>
   26984:	d8000c15 	stw	zero,48(sp)
   26988:	003d5b06 	br	25ef8 <__alt_data_end+0xfffe6328>
   2698c:	880b883a 	mov	r5,r17
   26990:	8009883a 	mov	r4,r16
   26994:	01800284 	movi	r6,10
   26998:	000f883a 	mov	r7,zero
   2699c:	00293480 	call	29348 <__multadd>
   269a0:	1023883a 	mov	r17,r2
   269a4:	d8800d17 	ldw	r2,52(sp)
   269a8:	0082550e 	bge	zero,r2,27300 <_dtoa_r+0x16b0>
   269ac:	d8800615 	stw	r2,24(sp)
   269b0:	0500050e 	bge	zero,r20,269c8 <_dtoa_r+0xd78>
   269b4:	880b883a 	mov	r5,r17
   269b8:	8009883a 	mov	r4,r16
   269bc:	a00d883a 	mov	r6,r20
   269c0:	00299f00 	call	299f0 <__lshift>
   269c4:	1023883a 	mov	r17,r2
   269c8:	98016a1e 	bne	r19,zero,26f74 <_dtoa_r+0x1324>
   269cc:	8829883a 	mov	r20,r17
   269d0:	d9000617 	ldw	r4,24(sp)
   269d4:	dcc00717 	ldw	r19,28(sp)
   269d8:	9480004c 	andi	r18,r18,1
   269dc:	20bfffc4 	addi	r2,r4,-1
   269e0:	9885883a 	add	r2,r19,r2
   269e4:	d8800415 	stw	r2,16(sp)
   269e8:	dc800615 	stw	r18,24(sp)
   269ec:	e009883a 	mov	r4,fp
   269f0:	a80b883a 	mov	r5,r21
   269f4:	0025a500 	call	25a50 <quorem>
   269f8:	e009883a 	mov	r4,fp
   269fc:	880b883a 	mov	r5,r17
   26a00:	102f883a 	mov	r23,r2
   26a04:	0029b380 	call	29b38 <__mcmp>
   26a08:	8009883a 	mov	r4,r16
   26a0c:	a80b883a 	mov	r5,r21
   26a10:	a00d883a 	mov	r6,r20
   26a14:	102d883a 	mov	r22,r2
   26a18:	0029b980 	call	29b98 <__mdiff>
   26a1c:	1007883a 	mov	r3,r2
   26a20:	10800317 	ldw	r2,12(r2)
   26a24:	bc800c04 	addi	r18,r23,48
   26a28:	1000971e 	bne	r2,zero,26c88 <_dtoa_r+0x1038>
   26a2c:	180b883a 	mov	r5,r3
   26a30:	e009883a 	mov	r4,fp
   26a34:	d8c01515 	stw	r3,84(sp)
   26a38:	0029b380 	call	29b38 <__mcmp>
   26a3c:	d8c01517 	ldw	r3,84(sp)
   26a40:	8009883a 	mov	r4,r16
   26a44:	d8801515 	stw	r2,84(sp)
   26a48:	180b883a 	mov	r5,r3
   26a4c:	00293200 	call	29320 <_Bfree>
   26a50:	d8801517 	ldw	r2,84(sp)
   26a54:	1000041e 	bne	r2,zero,26a68 <_dtoa_r+0xe18>
   26a58:	d9800317 	ldw	r6,12(sp)
   26a5c:	3000021e 	bne	r6,zero,26a68 <_dtoa_r+0xe18>
   26a60:	d8c00617 	ldw	r3,24(sp)
   26a64:	18007626 	beq	r3,zero,26c40 <_dtoa_r+0xff0>
   26a68:	b0005b16 	blt	r22,zero,26bd8 <_dtoa_r+0xf88>
   26a6c:	b000041e 	bne	r22,zero,26a80 <_dtoa_r+0xe30>
   26a70:	d9000317 	ldw	r4,12(sp)
   26a74:	2000021e 	bne	r4,zero,26a80 <_dtoa_r+0xe30>
   26a78:	d8c00617 	ldw	r3,24(sp)
   26a7c:	18005626 	beq	r3,zero,26bd8 <_dtoa_r+0xf88>
   26a80:	00814d16 	blt	zero,r2,26fb8 <_dtoa_r+0x1368>
   26a84:	d8c00417 	ldw	r3,16(sp)
   26a88:	9d800044 	addi	r22,r19,1
   26a8c:	9c800005 	stb	r18,0(r19)
   26a90:	b02f883a 	mov	r23,r22
   26a94:	98c14c26 	beq	r19,r3,26fc8 <_dtoa_r+0x1378>
   26a98:	e00b883a 	mov	r5,fp
   26a9c:	8009883a 	mov	r4,r16
   26aa0:	01800284 	movi	r6,10
   26aa4:	000f883a 	mov	r7,zero
   26aa8:	00293480 	call	29348 <__multadd>
   26aac:	1039883a 	mov	fp,r2
   26ab0:	8d006d26 	beq	r17,r20,26c68 <_dtoa_r+0x1018>
   26ab4:	880b883a 	mov	r5,r17
   26ab8:	01800284 	movi	r6,10
   26abc:	000f883a 	mov	r7,zero
   26ac0:	8009883a 	mov	r4,r16
   26ac4:	00293480 	call	29348 <__multadd>
   26ac8:	a00b883a 	mov	r5,r20
   26acc:	8009883a 	mov	r4,r16
   26ad0:	01800284 	movi	r6,10
   26ad4:	000f883a 	mov	r7,zero
   26ad8:	1023883a 	mov	r17,r2
   26adc:	00293480 	call	29348 <__multadd>
   26ae0:	1029883a 	mov	r20,r2
   26ae4:	b027883a 	mov	r19,r22
   26ae8:	003fc006 	br	269ec <__alt_data_end+0xfffe6e1c>
   26aec:	a005883a 	mov	r2,r20
   26af0:	003ede06 	br	2666c <__alt_data_end+0xfffe6a9c>
   26af4:	01000044 	movi	r4,1
   26af8:	d9000b15 	stw	r4,44(sp)
   26afc:	d9802217 	ldw	r6,136(sp)
   26b00:	0180dc0e 	bge	zero,r6,26e74 <_dtoa_r+0x1224>
   26b04:	3023883a 	mov	r17,r6
   26b08:	d9800d15 	stw	r6,52(sp)
   26b0c:	d9800615 	stw	r6,24(sp)
   26b10:	003d1e06 	br	25f8c <__alt_data_end+0xfffe63bc>
   26b14:	d8800617 	ldw	r2,24(sp)
   26b18:	00be3716 	blt	zero,r2,263f8 <__alt_data_end+0xfffe6828>
   26b1c:	1000be1e 	bne	r2,zero,26e18 <_dtoa_r+0x11c8>
   26b20:	8809883a 	mov	r4,r17
   26b24:	a00b883a 	mov	r5,r20
   26b28:	000d883a 	mov	r6,zero
   26b2c:	01d00534 	movhi	r7,16404
   26b30:	002fa700 	call	2fa70 <__muldf3>
   26b34:	1009883a 	mov	r4,r2
   26b38:	180b883a 	mov	r5,r3
   26b3c:	900d883a 	mov	r6,r18
   26b40:	980f883a 	mov	r7,r19
   26b44:	002f8b00 	call	2f8b0 <__gedf2>
   26b48:	002b883a 	mov	r21,zero
   26b4c:	0023883a 	mov	r17,zero
   26b50:	10007a16 	blt	r2,zero,26d3c <_dtoa_r+0x10ec>
   26b54:	d9002217 	ldw	r4,136(sp)
   26b58:	ddc00717 	ldw	r23,28(sp)
   26b5c:	0108303a 	nor	r4,zero,r4
   26b60:	d9000515 	stw	r4,20(sp)
   26b64:	8009883a 	mov	r4,r16
   26b68:	a80b883a 	mov	r5,r21
   26b6c:	00293200 	call	29320 <_Bfree>
   26b70:	883f751e 	bne	r17,zero,26948 <__alt_data_end+0xfffe6d78>
   26b74:	003de406 	br	26308 <__alt_data_end+0xfffe6738>
   26b78:	e00b883a 	mov	r5,fp
   26b7c:	8009883a 	mov	r4,r16
   26b80:	00298b00 	call	298b0 <__pow5mult>
   26b84:	1039883a 	mov	fp,r2
   26b88:	003ed306 	br	266d8 <__alt_data_end+0xfffe6b08>
   26b8c:	903ee01e 	bne	r18,zero,26710 <__alt_data_end+0xfffe6b40>
   26b90:	00800434 	movhi	r2,16
   26b94:	10bfffc4 	addi	r2,r2,-1
   26b98:	9884703a 	and	r2,r19,r2
   26b9c:	103f081e 	bne	r2,zero,267c0 <__alt_data_end+0xfffe6bf0>
   26ba0:	9cdffc2c 	andhi	r19,r19,32752
   26ba4:	983f0626 	beq	r19,zero,267c0 <__alt_data_end+0xfffe6bf0>
   26ba8:	d8800817 	ldw	r2,32(sp)
   26bac:	b5800044 	addi	r22,r22,1
   26bb0:	04c00044 	movi	r19,1
   26bb4:	10800044 	addi	r2,r2,1
   26bb8:	d8800815 	stw	r2,32(sp)
   26bbc:	003f0106 	br	267c4 <__alt_data_end+0xfffe6bf4>
   26bc0:	d9800f17 	ldw	r6,60(sp)
   26bc4:	30016826 	beq	r6,zero,27168 <_dtoa_r+0x1518>
   26bc8:	10810cc4 	addi	r2,r2,1075
   26bcc:	dd400917 	ldw	r21,36(sp)
   26bd0:	dd000817 	ldw	r20,32(sp)
   26bd4:	003e9906 	br	2663c <__alt_data_end+0xfffe6a6c>
   26bd8:	9011883a 	mov	r8,r18
   26bdc:	4007883a 	mov	r3,r8
   26be0:	e02d883a 	mov	r22,fp
   26be4:	0080100e 	bge	zero,r2,26c28 <_dtoa_r+0xfd8>
   26be8:	01800044 	movi	r6,1
   26bec:	8009883a 	mov	r4,r16
   26bf0:	e00b883a 	mov	r5,fp
   26bf4:	da001515 	stw	r8,84(sp)
   26bf8:	da001715 	stw	r8,92(sp)
   26bfc:	00299f00 	call	299f0 <__lshift>
   26c00:	1009883a 	mov	r4,r2
   26c04:	a80b883a 	mov	r5,r21
   26c08:	102d883a 	mov	r22,r2
   26c0c:	0029b380 	call	29b38 <__mcmp>
   26c10:	d8c01517 	ldw	r3,84(sp)
   26c14:	da001717 	ldw	r8,92(sp)
   26c18:	0081a50e 	bge	zero,r2,272b0 <_dtoa_r+0x1660>
   26c1c:	00800e44 	movi	r2,57
   26c20:	40817b26 	beq	r8,r2,27210 <_dtoa_r+0x15c0>
   26c24:	40c00044 	addi	r3,r8,1
   26c28:	8825883a 	mov	r18,r17
   26c2c:	9dc00044 	addi	r23,r19,1
   26c30:	98c00005 	stb	r3,0(r19)
   26c34:	a023883a 	mov	r17,r20
   26c38:	b039883a 	mov	fp,r22
   26c3c:	003f3906 	br	26924 <__alt_data_end+0xfffe6d54>
   26c40:	00800e44 	movi	r2,57
   26c44:	9011883a 	mov	r8,r18
   26c48:	90817226 	beq	r18,r2,27214 <_dtoa_r+0x15c4>
   26c4c:	0580010e 	bge	zero,r22,26c54 <_dtoa_r+0x1004>
   26c50:	ba000c44 	addi	r8,r23,49
   26c54:	8825883a 	mov	r18,r17
   26c58:	9dc00044 	addi	r23,r19,1
   26c5c:	9a000005 	stb	r8,0(r19)
   26c60:	a023883a 	mov	r17,r20
   26c64:	003f2f06 	br	26924 <__alt_data_end+0xfffe6d54>
   26c68:	880b883a 	mov	r5,r17
   26c6c:	8009883a 	mov	r4,r16
   26c70:	01800284 	movi	r6,10
   26c74:	000f883a 	mov	r7,zero
   26c78:	00293480 	call	29348 <__multadd>
   26c7c:	1023883a 	mov	r17,r2
   26c80:	1029883a 	mov	r20,r2
   26c84:	003f9706 	br	26ae4 <__alt_data_end+0xfffe6f14>
   26c88:	8009883a 	mov	r4,r16
   26c8c:	180b883a 	mov	r5,r3
   26c90:	00293200 	call	29320 <_Bfree>
   26c94:	00800044 	movi	r2,1
   26c98:	003f7306 	br	26a68 <__alt_data_end+0xfffe6e98>
   26c9c:	e009883a 	mov	r4,fp
   26ca0:	a80b883a 	mov	r5,r21
   26ca4:	0029b380 	call	29b38 <__mcmp>
   26ca8:	103ee60e 	bge	r2,zero,26844 <__alt_data_end+0xfffe6c74>
   26cac:	8009883a 	mov	r4,r16
   26cb0:	e00b883a 	mov	r5,fp
   26cb4:	01800284 	movi	r6,10
   26cb8:	000f883a 	mov	r7,zero
   26cbc:	00293480 	call	29348 <__multadd>
   26cc0:	d9000517 	ldw	r4,20(sp)
   26cc4:	d9800b17 	ldw	r6,44(sp)
   26cc8:	1039883a 	mov	fp,r2
   26ccc:	213fffc4 	addi	r4,r4,-1
   26cd0:	d9000515 	stw	r4,20(sp)
   26cd4:	303f2d1e 	bne	r6,zero,2698c <__alt_data_end+0xfffe6dbc>
   26cd8:	d9000d17 	ldw	r4,52(sp)
   26cdc:	0101780e 	bge	zero,r4,272c0 <_dtoa_r+0x1670>
   26ce0:	d9000615 	stw	r4,24(sp)
   26ce4:	003edb06 	br	26854 <__alt_data_end+0xfffe6c84>
   26ce8:	00800084 	movi	r2,2
   26cec:	30818e1e 	bne	r6,r2,27328 <_dtoa_r+0x16d8>
   26cf0:	d8000b15 	stw	zero,44(sp)
   26cf4:	003f8106 	br	26afc <__alt_data_end+0xfffe6f2c>
   26cf8:	d8800717 	ldw	r2,28(sp)
   26cfc:	003c0306 	br	25d0c <__alt_data_end+0xfffe613c>
   26d00:	d9000317 	ldw	r4,12(sp)
   26d04:	00800084 	movi	r2,2
   26d08:	113ed00e 	bge	r2,r4,2684c <__alt_data_end+0xfffe6c7c>
   26d0c:	d8c00617 	ldw	r3,24(sp)
   26d10:	183f901e 	bne	r3,zero,26b54 <__alt_data_end+0xfffe6f84>
   26d14:	a80b883a 	mov	r5,r21
   26d18:	8009883a 	mov	r4,r16
   26d1c:	01800144 	movi	r6,5
   26d20:	000f883a 	mov	r7,zero
   26d24:	00293480 	call	29348 <__multadd>
   26d28:	e009883a 	mov	r4,fp
   26d2c:	100b883a 	mov	r5,r2
   26d30:	102b883a 	mov	r21,r2
   26d34:	0029b380 	call	29b38 <__mcmp>
   26d38:	00bf860e 	bge	zero,r2,26b54 <__alt_data_end+0xfffe6f84>
   26d3c:	d9800717 	ldw	r6,28(sp)
   26d40:	00800c44 	movi	r2,49
   26d44:	30800005 	stb	r2,0(r6)
   26d48:	d8800517 	ldw	r2,20(sp)
   26d4c:	35c00044 	addi	r23,r6,1
   26d50:	10800044 	addi	r2,r2,1
   26d54:	d8800515 	stw	r2,20(sp)
   26d58:	003f8206 	br	26b64 <__alt_data_end+0xfffe6f94>
   26d5c:	903e981e 	bne	r18,zero,267c0 <__alt_data_end+0xfffe6bf0>
   26d60:	003f8b06 	br	26b90 <__alt_data_end+0xfffe6fc0>
   26d64:	d9800517 	ldw	r6,20(sp)
   26d68:	d8c00717 	ldw	r3,28(sp)
   26d6c:	00800c44 	movi	r2,49
   26d70:	31800044 	addi	r6,r6,1
   26d74:	d9800515 	stw	r6,20(sp)
   26d78:	18800005 	stb	r2,0(r3)
   26d7c:	003ee906 	br	26924 <__alt_data_end+0xfffe6d54>
   26d80:	dc000317 	ldw	r16,12(sp)
   26d84:	003d6006 	br	26308 <__alt_data_end+0xfffe6738>
   26d88:	8809883a 	mov	r4,r17
   26d8c:	0030aec0 	call	30aec <__floatsidf>
   26d90:	a009883a 	mov	r4,r20
   26d94:	a80b883a 	mov	r5,r21
   26d98:	100d883a 	mov	r6,r2
   26d9c:	180f883a 	mov	r7,r3
   26da0:	002fa700 	call	2fa70 <__muldf3>
   26da4:	1009883a 	mov	r4,r2
   26da8:	180b883a 	mov	r5,r3
   26dac:	000d883a 	mov	r6,zero
   26db0:	01d00734 	movhi	r7,16412
   26db4:	002e6c40 	call	2e6c4 <__adddf3>
   26db8:	1023883a 	mov	r17,r2
   26dbc:	00bf3034 	movhi	r2,64704
   26dc0:	1885883a 	add	r2,r3,r2
   26dc4:	d8800e15 	stw	r2,56(sp)
   26dc8:	a009883a 	mov	r4,r20
   26dcc:	a80b883a 	mov	r5,r21
   26dd0:	000d883a 	mov	r6,zero
   26dd4:	01d00534 	movhi	r7,16404
   26dd8:	00301940 	call	30194 <__subdf3>
   26ddc:	d9c00e17 	ldw	r7,56(sp)
   26de0:	1009883a 	mov	r4,r2
   26de4:	180b883a 	mov	r5,r3
   26de8:	880d883a 	mov	r6,r17
   26dec:	102b883a 	mov	r21,r2
   26df0:	1829883a 	mov	r20,r3
   26df4:	002f8b00 	call	2f8b0 <__gedf2>
   26df8:	00807716 	blt	zero,r2,26fd8 <_dtoa_r+0x1388>
   26dfc:	d8800e17 	ldw	r2,56(sp)
   26e00:	a809883a 	mov	r4,r21
   26e04:	a00b883a 	mov	r5,r20
   26e08:	11e0003c 	xorhi	r7,r2,32768
   26e0c:	880d883a 	mov	r6,r17
   26e10:	002f9900 	call	2f990 <__ledf2>
   26e14:	103d6b0e 	bge	r2,zero,263c4 <__alt_data_end+0xfffe67f4>
   26e18:	002b883a 	mov	r21,zero
   26e1c:	0023883a 	mov	r17,zero
   26e20:	003f4c06 	br	26b54 <__alt_data_end+0xfffe6f84>
   26e24:	d9800917 	ldw	r6,36(sp)
   26e28:	e00b883a 	mov	r5,fp
   26e2c:	8009883a 	mov	r4,r16
   26e30:	00298b00 	call	298b0 <__pow5mult>
   26e34:	1039883a 	mov	fp,r2
   26e38:	003e2706 	br	266d8 <__alt_data_end+0xfffe6b08>
   26e3c:	d8000b15 	stw	zero,44(sp)
   26e40:	003c4906 	br	25f68 <__alt_data_end+0xfffe6398>
   26e44:	d9000917 	ldw	r4,36(sp)
   26e48:	d9800a17 	ldw	r6,40(sp)
   26e4c:	dd400915 	stw	r21,36(sp)
   26e50:	a905c83a 	sub	r2,r21,r4
   26e54:	308d883a 	add	r6,r6,r2
   26e58:	d9800a15 	stw	r6,40(sp)
   26e5c:	002b883a 	mov	r21,zero
   26e60:	003df206 	br	2662c <__alt_data_end+0xfffe6a5c>
   26e64:	dc800e15 	stw	r18,56(sp)
   26e68:	982b883a 	mov	r21,r19
   26e6c:	04400084 	movi	r17,2
   26e70:	003c7406 	br	26044 <__alt_data_end+0xfffe6474>
   26e74:	04400044 	movi	r17,1
   26e78:	dc400d15 	stw	r17,52(sp)
   26e7c:	dc400615 	stw	r17,24(sp)
   26e80:	dc402215 	stw	r17,136(sp)
   26e84:	80001115 	stw	zero,68(r16)
   26e88:	000b883a 	mov	r5,zero
   26e8c:	003c4a06 	br	25fb8 <__alt_data_end+0xfffe63e8>
   26e90:	3023883a 	mov	r17,r6
   26e94:	003ffb06 	br	26e84 <__alt_data_end+0xfffe72b4>
   26e98:	1000021e 	bne	r2,zero,26ea4 <_dtoa_r+0x1254>
   26e9c:	4200004c 	andi	r8,r8,1
   26ea0:	403e8f1e 	bne	r8,zero,268e0 <__alt_data_end+0xfffe6d10>
   26ea4:	01000c04 	movi	r4,48
   26ea8:	00000106 	br	26eb0 <_dtoa_r+0x1260>
   26eac:	102f883a 	mov	r23,r2
   26eb0:	b8bfffc4 	addi	r2,r23,-1
   26eb4:	10c00007 	ldb	r3,0(r2)
   26eb8:	193ffc26 	beq	r3,r4,26eac <__alt_data_end+0xfffe72dc>
   26ebc:	003e9906 	br	26924 <__alt_data_end+0xfffe6d54>
   26ec0:	d9000517 	ldw	r4,20(sp)
   26ec4:	012fc83a 	sub	r23,zero,r4
   26ec8:	b800ad26 	beq	r23,zero,27180 <_dtoa_r+0x1530>
   26ecc:	b88003cc 	andi	r2,r23,15
   26ed0:	100490fa 	slli	r2,r2,3
   26ed4:	00c000f4 	movhi	r3,3
   26ed8:	18ce5a04 	addi	r3,r3,14696
   26edc:	1885883a 	add	r2,r3,r2
   26ee0:	11800017 	ldw	r6,0(r2)
   26ee4:	11c00117 	ldw	r7,4(r2)
   26ee8:	b82fd13a 	srai	r23,r23,4
   26eec:	9009883a 	mov	r4,r18
   26ef0:	980b883a 	mov	r5,r19
   26ef4:	002fa700 	call	2fa70 <__muldf3>
   26ef8:	1029883a 	mov	r20,r2
   26efc:	182b883a 	mov	r21,r3
   26f00:	b800f426 	beq	r23,zero,272d4 <_dtoa_r+0x1684>
   26f04:	020000f4 	movhi	r8,3
   26f08:	420e5004 	addi	r8,r8,14656
   26f0c:	8029883a 	mov	r20,r16
   26f10:	04400084 	movi	r17,2
   26f14:	4021883a 	mov	r16,r8
   26f18:	b980004c 	andi	r6,r23,1
   26f1c:	1009883a 	mov	r4,r2
   26f20:	b82fd07a 	srai	r23,r23,1
   26f24:	180b883a 	mov	r5,r3
   26f28:	30000426 	beq	r6,zero,26f3c <_dtoa_r+0x12ec>
   26f2c:	81800017 	ldw	r6,0(r16)
   26f30:	81c00117 	ldw	r7,4(r16)
   26f34:	8c400044 	addi	r17,r17,1
   26f38:	002fa700 	call	2fa70 <__muldf3>
   26f3c:	84000204 	addi	r16,r16,8
   26f40:	b83ff51e 	bne	r23,zero,26f18 <__alt_data_end+0xfffe7348>
   26f44:	a021883a 	mov	r16,r20
   26f48:	182b883a 	mov	r21,r3
   26f4c:	1029883a 	mov	r20,r2
   26f50:	003c5506 	br	260a8 <__alt_data_end+0xfffe64d8>
   26f54:	d9800517 	ldw	r6,20(sp)
   26f58:	d9000717 	ldw	r4,28(sp)
   26f5c:	00c00c04 	movi	r3,48
   26f60:	31800044 	addi	r6,r6,1
   26f64:	d9800515 	stw	r6,20(sp)
   26f68:	20c00005 	stb	r3,0(r4)
   26f6c:	02000c44 	movi	r8,49
   26f70:	003da206 	br	265fc <__alt_data_end+0xfffe6a2c>
   26f74:	89400117 	ldw	r5,4(r17)
   26f78:	8009883a 	mov	r4,r16
   26f7c:	00292780 	call	29278 <_Balloc>
   26f80:	89800417 	ldw	r6,16(r17)
   26f84:	11000304 	addi	r4,r2,12
   26f88:	89400304 	addi	r5,r17,12
   26f8c:	31800084 	addi	r6,r6,2
   26f90:	318d883a 	add	r6,r6,r6
   26f94:	318d883a 	add	r6,r6,r6
   26f98:	1027883a 	mov	r19,r2
   26f9c:	0028ec00 	call	28ec0 <memcpy>
   26fa0:	8009883a 	mov	r4,r16
   26fa4:	980b883a 	mov	r5,r19
   26fa8:	01800044 	movi	r6,1
   26fac:	00299f00 	call	299f0 <__lshift>
   26fb0:	1029883a 	mov	r20,r2
   26fb4:	003e8606 	br	269d0 <__alt_data_end+0xfffe6e00>
   26fb8:	00800e44 	movi	r2,57
   26fbc:	90809526 	beq	r18,r2,27214 <_dtoa_r+0x15c4>
   26fc0:	92000044 	addi	r8,r18,1
   26fc4:	003f2306 	br	26c54 <__alt_data_end+0xfffe7084>
   26fc8:	9011883a 	mov	r8,r18
   26fcc:	8825883a 	mov	r18,r17
   26fd0:	a023883a 	mov	r17,r20
   26fd4:	003e3706 	br	268b4 <__alt_data_end+0xfffe6ce4>
   26fd8:	002b883a 	mov	r21,zero
   26fdc:	0023883a 	mov	r17,zero
   26fe0:	003f5606 	br	26d3c <__alt_data_end+0xfffe716c>
   26fe4:	51bfffc4 	addi	r6,r10,-1
   26fe8:	300490fa 	slli	r2,r6,3
   26fec:	00c000f4 	movhi	r3,3
   26ff0:	18ce5a04 	addi	r3,r3,14696
   26ff4:	1885883a 	add	r2,r3,r2
   26ff8:	d9c00e17 	ldw	r7,56(sp)
   26ffc:	11000017 	ldw	r4,0(r2)
   27000:	11400117 	ldw	r5,4(r2)
   27004:	d8800717 	ldw	r2,28(sp)
   27008:	d9801015 	stw	r6,64(sp)
   2700c:	880d883a 	mov	r6,r17
   27010:	da801615 	stw	r10,88(sp)
   27014:	15c00044 	addi	r23,r2,1
   27018:	002fa700 	call	2fa70 <__muldf3>
   2701c:	a80b883a 	mov	r5,r21
   27020:	a009883a 	mov	r4,r20
   27024:	d8c01115 	stw	r3,68(sp)
   27028:	d8800e15 	stw	r2,56(sp)
   2702c:	0030a640 	call	30a64 <__fixdfsi>
   27030:	1009883a 	mov	r4,r2
   27034:	1023883a 	mov	r17,r2
   27038:	0030aec0 	call	30aec <__floatsidf>
   2703c:	a009883a 	mov	r4,r20
   27040:	a80b883a 	mov	r5,r21
   27044:	100d883a 	mov	r6,r2
   27048:	180f883a 	mov	r7,r3
   2704c:	00301940 	call	30194 <__subdf3>
   27050:	1813883a 	mov	r9,r3
   27054:	d8c00717 	ldw	r3,28(sp)
   27058:	8c400c04 	addi	r17,r17,48
   2705c:	1011883a 	mov	r8,r2
   27060:	1c400005 	stb	r17,0(r3)
   27064:	da801617 	ldw	r10,88(sp)
   27068:	00800044 	movi	r2,1
   2706c:	50802326 	beq	r10,r2,270fc <_dtoa_r+0x14ac>
   27070:	d8800717 	ldw	r2,28(sp)
   27074:	b82b883a 	mov	r21,r23
   27078:	dc001315 	stw	r16,76(sp)
   2707c:	12a9883a 	add	r20,r2,r10
   27080:	4807883a 	mov	r3,r9
   27084:	4005883a 	mov	r2,r8
   27088:	dc801415 	stw	r18,80(sp)
   2708c:	000d883a 	mov	r6,zero
   27090:	01d00934 	movhi	r7,16420
   27094:	1009883a 	mov	r4,r2
   27098:	180b883a 	mov	r5,r3
   2709c:	002fa700 	call	2fa70 <__muldf3>
   270a0:	180b883a 	mov	r5,r3
   270a4:	1009883a 	mov	r4,r2
   270a8:	1821883a 	mov	r16,r3
   270ac:	1025883a 	mov	r18,r2
   270b0:	0030a640 	call	30a64 <__fixdfsi>
   270b4:	1009883a 	mov	r4,r2
   270b8:	1023883a 	mov	r17,r2
   270bc:	0030aec0 	call	30aec <__floatsidf>
   270c0:	9009883a 	mov	r4,r18
   270c4:	800b883a 	mov	r5,r16
   270c8:	100d883a 	mov	r6,r2
   270cc:	180f883a 	mov	r7,r3
   270d0:	8c400c04 	addi	r17,r17,48
   270d4:	00301940 	call	30194 <__subdf3>
   270d8:	ad400044 	addi	r21,r21,1
   270dc:	ac7fffc5 	stb	r17,-1(r21)
   270e0:	ad3fea1e 	bne	r21,r20,2708c <__alt_data_end+0xfffe74bc>
   270e4:	1813883a 	mov	r9,r3
   270e8:	d8c01017 	ldw	r3,64(sp)
   270ec:	dc001317 	ldw	r16,76(sp)
   270f0:	dc801417 	ldw	r18,80(sp)
   270f4:	1011883a 	mov	r8,r2
   270f8:	b8ef883a 	add	r23,r23,r3
   270fc:	d9000e17 	ldw	r4,56(sp)
   27100:	d9401117 	ldw	r5,68(sp)
   27104:	000d883a 	mov	r6,zero
   27108:	01cff834 	movhi	r7,16352
   2710c:	da001715 	stw	r8,92(sp)
   27110:	da401515 	stw	r9,84(sp)
   27114:	002e6c40 	call	2e6c4 <__adddf3>
   27118:	da001717 	ldw	r8,92(sp)
   2711c:	da401517 	ldw	r9,84(sp)
   27120:	1009883a 	mov	r4,r2
   27124:	400d883a 	mov	r6,r8
   27128:	480f883a 	mov	r7,r9
   2712c:	180b883a 	mov	r5,r3
   27130:	002f9900 	call	2f990 <__ledf2>
   27134:	da001717 	ldw	r8,92(sp)
   27138:	da401517 	ldw	r9,84(sp)
   2713c:	10003b0e 	bge	r2,zero,2722c <_dtoa_r+0x15dc>
   27140:	d9001217 	ldw	r4,72(sp)
   27144:	bd7fffc3 	ldbu	r21,-1(r23)
   27148:	d9000515 	stw	r4,20(sp)
   2714c:	003d1c06 	br	265c0 <__alt_data_end+0xfffe69f0>
   27150:	d8c00817 	ldw	r3,32(sp)
   27154:	18a9c83a 	sub	r20,r3,r2
   27158:	0005883a 	mov	r2,zero
   2715c:	003d3706 	br	2663c <__alt_data_end+0xfffe6a6c>
   27160:	00800044 	movi	r2,1
   27164:	003dd006 	br	268a8 <__alt_data_end+0xfffe6cd8>
   27168:	d8c00217 	ldw	r3,8(sp)
   2716c:	00800d84 	movi	r2,54
   27170:	dd400917 	ldw	r21,36(sp)
   27174:	10c5c83a 	sub	r2,r2,r3
   27178:	dd000817 	ldw	r20,32(sp)
   2717c:	003d2f06 	br	2663c <__alt_data_end+0xfffe6a6c>
   27180:	9029883a 	mov	r20,r18
   27184:	982b883a 	mov	r21,r19
   27188:	04400084 	movi	r17,2
   2718c:	003bc606 	br	260a8 <__alt_data_end+0xfffe64d8>
   27190:	d8800617 	ldw	r2,24(sp)
   27194:	103efc26 	beq	r2,zero,26d88 <__alt_data_end+0xfffe71b8>
   27198:	d8c00d17 	ldw	r3,52(sp)
   2719c:	00fc890e 	bge	zero,r3,263c4 <__alt_data_end+0xfffe67f4>
   271a0:	a80b883a 	mov	r5,r21
   271a4:	a009883a 	mov	r4,r20
   271a8:	000d883a 	mov	r6,zero
   271ac:	01d00934 	movhi	r7,16420
   271b0:	002fa700 	call	2fa70 <__muldf3>
   271b4:	89000044 	addi	r4,r17,1
   271b8:	1029883a 	mov	r20,r2
   271bc:	182b883a 	mov	r21,r3
   271c0:	0030aec0 	call	30aec <__floatsidf>
   271c4:	a009883a 	mov	r4,r20
   271c8:	a80b883a 	mov	r5,r21
   271cc:	100d883a 	mov	r6,r2
   271d0:	180f883a 	mov	r7,r3
   271d4:	002fa700 	call	2fa70 <__muldf3>
   271d8:	1009883a 	mov	r4,r2
   271dc:	180b883a 	mov	r5,r3
   271e0:	000d883a 	mov	r6,zero
   271e4:	01d00734 	movhi	r7,16412
   271e8:	002e6c40 	call	2e6c4 <__adddf3>
   271ec:	d9000517 	ldw	r4,20(sp)
   271f0:	1023883a 	mov	r17,r2
   271f4:	00bf3034 	movhi	r2,64704
   271f8:	213fffc4 	addi	r4,r4,-1
   271fc:	1885883a 	add	r2,r3,r2
   27200:	d9001215 	stw	r4,72(sp)
   27204:	d8800e15 	stw	r2,56(sp)
   27208:	da800d17 	ldw	r10,52(sp)
   2720c:	003bc306 	br	2611c <__alt_data_end+0xfffe654c>
   27210:	b039883a 	mov	fp,r22
   27214:	01000e44 	movi	r4,57
   27218:	8825883a 	mov	r18,r17
   2721c:	9dc00044 	addi	r23,r19,1
   27220:	99000005 	stb	r4,0(r19)
   27224:	a023883a 	mov	r17,r20
   27228:	003dae06 	br	268e4 <__alt_data_end+0xfffe6d14>
   2722c:	d9800e17 	ldw	r6,56(sp)
   27230:	d9c01117 	ldw	r7,68(sp)
   27234:	0009883a 	mov	r4,zero
   27238:	014ff834 	movhi	r5,16352
   2723c:	da001715 	stw	r8,92(sp)
   27240:	da401515 	stw	r9,84(sp)
   27244:	00301940 	call	30194 <__subdf3>
   27248:	da001717 	ldw	r8,92(sp)
   2724c:	da401517 	ldw	r9,84(sp)
   27250:	1009883a 	mov	r4,r2
   27254:	180b883a 	mov	r5,r3
   27258:	400d883a 	mov	r6,r8
   2725c:	480f883a 	mov	r7,r9
   27260:	002f8b00 	call	2f8b0 <__gedf2>
   27264:	00bc570e 	bge	zero,r2,263c4 <__alt_data_end+0xfffe67f4>
   27268:	01000c04 	movi	r4,48
   2726c:	00000106 	br	27274 <_dtoa_r+0x1624>
   27270:	102f883a 	mov	r23,r2
   27274:	b8bfffc4 	addi	r2,r23,-1
   27278:	10c00007 	ldb	r3,0(r2)
   2727c:	193ffc26 	beq	r3,r4,27270 <__alt_data_end+0xfffe76a0>
   27280:	d9801217 	ldw	r6,72(sp)
   27284:	d9800515 	stw	r6,20(sp)
   27288:	003c1f06 	br	26308 <__alt_data_end+0xfffe6738>
   2728c:	d8801217 	ldw	r2,72(sp)
   27290:	dc001117 	ldw	r16,68(sp)
   27294:	d8800515 	stw	r2,20(sp)
   27298:	003cc906 	br	265c0 <__alt_data_end+0xfffe69f0>
   2729c:	dd801317 	ldw	r22,76(sp)
   272a0:	dc001117 	ldw	r16,68(sp)
   272a4:	dcc01417 	ldw	r19,80(sp)
   272a8:	dc801017 	ldw	r18,64(sp)
   272ac:	003c4506 	br	263c4 <__alt_data_end+0xfffe67f4>
   272b0:	103e5d1e 	bne	r2,zero,26c28 <__alt_data_end+0xfffe7058>
   272b4:	4080004c 	andi	r2,r8,1
   272b8:	103e5b26 	beq	r2,zero,26c28 <__alt_data_end+0xfffe7058>
   272bc:	003e5706 	br	26c1c <__alt_data_end+0xfffe704c>
   272c0:	d8c00317 	ldw	r3,12(sp)
   272c4:	00800084 	movi	r2,2
   272c8:	10c00a16 	blt	r2,r3,272f4 <_dtoa_r+0x16a4>
   272cc:	d9000d17 	ldw	r4,52(sp)
   272d0:	003e8306 	br	26ce0 <__alt_data_end+0xfffe7110>
   272d4:	04400084 	movi	r17,2
   272d8:	003b7306 	br	260a8 <__alt_data_end+0xfffe64d8>
   272dc:	d9801217 	ldw	r6,72(sp)
   272e0:	d9800515 	stw	r6,20(sp)
   272e4:	003cb606 	br	265c0 <__alt_data_end+0xfffe69f0>
   272e8:	d9001217 	ldw	r4,72(sp)
   272ec:	d9000515 	stw	r4,20(sp)
   272f0:	003c0506 	br	26308 <__alt_data_end+0xfffe6738>
   272f4:	d9800d17 	ldw	r6,52(sp)
   272f8:	d9800615 	stw	r6,24(sp)
   272fc:	003e8306 	br	26d0c <__alt_data_end+0xfffe713c>
   27300:	d9800317 	ldw	r6,12(sp)
   27304:	00800084 	movi	r2,2
   27308:	11800216 	blt	r2,r6,27314 <_dtoa_r+0x16c4>
   2730c:	d8800d17 	ldw	r2,52(sp)
   27310:	003da606 	br	269ac <__alt_data_end+0xfffe6ddc>
   27314:	d8800d17 	ldw	r2,52(sp)
   27318:	d8800615 	stw	r2,24(sp)
   2731c:	003e7b06 	br	26d0c <__alt_data_end+0xfffe713c>
   27320:	05000044 	movi	r20,1
   27324:	003b0506 	br	25f3c <__alt_data_end+0xfffe636c>
   27328:	8009883a 	mov	r4,r16
   2732c:	80001115 	stw	zero,68(r16)
   27330:	000b883a 	mov	r5,zero
   27334:	00292780 	call	29278 <_Balloc>
   27338:	d8800715 	stw	r2,28(sp)
   2733c:	d8c00717 	ldw	r3,28(sp)
   27340:	00bfffc4 	movi	r2,-1
   27344:	01000044 	movi	r4,1
   27348:	d8800615 	stw	r2,24(sp)
   2734c:	80c01015 	stw	r3,64(r16)
   27350:	d9000b15 	stw	r4,44(sp)
   27354:	d8002215 	stw	zero,136(sp)
   27358:	d8800d15 	stw	r2,52(sp)
   2735c:	003c1906 	br	263c4 <__alt_data_end+0xfffe67f4>
   27360:	193d2926 	beq	r3,r4,26808 <__alt_data_end+0xfffe6c38>
   27364:	00c00f04 	movi	r3,60
   27368:	1885c83a 	sub	r2,r3,r2
   2736c:	003d7b06 	br	2695c <__alt_data_end+0xfffe6d8c>
   27370:	000b883a 	mov	r5,zero
   27374:	003b1006 	br	25fb8 <__alt_data_end+0xfffe63e8>

00027378 <_fflush_r>:
   27378:	defffb04 	addi	sp,sp,-20
   2737c:	dcc00315 	stw	r19,12(sp)
   27380:	dc000015 	stw	r16,0(sp)
   27384:	dfc00415 	stw	ra,16(sp)
   27388:	dc800215 	stw	r18,8(sp)
   2738c:	dc400115 	stw	r17,4(sp)
   27390:	2027883a 	mov	r19,r4
   27394:	2821883a 	mov	r16,r5
   27398:	20000226 	beq	r4,zero,273a4 <_fflush_r+0x2c>
   2739c:	20800e17 	ldw	r2,56(r4)
   273a0:	10005326 	beq	r2,zero,274f0 <_fflush_r+0x178>
   273a4:	8080030b 	ldhu	r2,12(r16)
   273a8:	10ffffcc 	andi	r3,r2,65535
   273ac:	18e0001c 	xori	r3,r3,32768
   273b0:	18e00004 	addi	r3,r3,-32768
   273b4:	18002c26 	beq	r3,zero,27468 <_fflush_r+0xf0>
   273b8:	10c0020c 	andi	r3,r2,8
   273bc:	1800321e 	bne	r3,zero,27488 <_fflush_r+0x110>
   273c0:	80c00117 	ldw	r3,4(r16)
   273c4:	10820014 	ori	r2,r2,2048
   273c8:	8080030d 	sth	r2,12(r16)
   273cc:	00c0570e 	bge	zero,r3,2752c <_fflush_r+0x1b4>
   273d0:	82000a17 	ldw	r8,40(r16)
   273d4:	40002426 	beq	r8,zero,27468 <_fflush_r+0xf0>
   273d8:	9c400017 	ldw	r17,0(r19)
   273dc:	10c4000c 	andi	r3,r2,4096
   273e0:	98000015 	stw	zero,0(r19)
   273e4:	18004626 	beq	r3,zero,27500 <_fflush_r+0x188>
   273e8:	81801417 	ldw	r6,80(r16)
   273ec:	10c0010c 	andi	r3,r2,4
   273f0:	18000626 	beq	r3,zero,2740c <_fflush_r+0x94>
   273f4:	80c00117 	ldw	r3,4(r16)
   273f8:	80800c17 	ldw	r2,48(r16)
   273fc:	30cdc83a 	sub	r6,r6,r3
   27400:	10000226 	beq	r2,zero,2740c <_fflush_r+0x94>
   27404:	80800f17 	ldw	r2,60(r16)
   27408:	308dc83a 	sub	r6,r6,r2
   2740c:	81400717 	ldw	r5,28(r16)
   27410:	9809883a 	mov	r4,r19
   27414:	000f883a 	mov	r7,zero
   27418:	403ee83a 	callr	r8
   2741c:	00ffffc4 	movi	r3,-1
   27420:	10c04526 	beq	r2,r3,27538 <_fflush_r+0x1c0>
   27424:	80c0030b 	ldhu	r3,12(r16)
   27428:	81000417 	ldw	r4,16(r16)
   2742c:	80000115 	stw	zero,4(r16)
   27430:	197dffcc 	andi	r5,r3,63487
   27434:	8140030d 	sth	r5,12(r16)
   27438:	81000015 	stw	r4,0(r16)
   2743c:	18c4000c 	andi	r3,r3,4096
   27440:	18000126 	beq	r3,zero,27448 <_fflush_r+0xd0>
   27444:	80801415 	stw	r2,80(r16)
   27448:	81400c17 	ldw	r5,48(r16)
   2744c:	9c400015 	stw	r17,0(r19)
   27450:	28000526 	beq	r5,zero,27468 <_fflush_r+0xf0>
   27454:	80801004 	addi	r2,r16,64
   27458:	28800226 	beq	r5,r2,27464 <_fflush_r+0xec>
   2745c:	9809883a 	mov	r4,r19
   27460:	0027a940 	call	27a94 <_free_r>
   27464:	80000c15 	stw	zero,48(r16)
   27468:	0005883a 	mov	r2,zero
   2746c:	dfc00417 	ldw	ra,16(sp)
   27470:	dcc00317 	ldw	r19,12(sp)
   27474:	dc800217 	ldw	r18,8(sp)
   27478:	dc400117 	ldw	r17,4(sp)
   2747c:	dc000017 	ldw	r16,0(sp)
   27480:	dec00504 	addi	sp,sp,20
   27484:	f800283a 	ret
   27488:	84800417 	ldw	r18,16(r16)
   2748c:	903ff626 	beq	r18,zero,27468 <__alt_data_end+0xfffe7898>
   27490:	84400017 	ldw	r17,0(r16)
   27494:	108000cc 	andi	r2,r2,3
   27498:	84800015 	stw	r18,0(r16)
   2749c:	8ca3c83a 	sub	r17,r17,r18
   274a0:	10001526 	beq	r2,zero,274f8 <_fflush_r+0x180>
   274a4:	0005883a 	mov	r2,zero
   274a8:	80800215 	stw	r2,8(r16)
   274ac:	04400316 	blt	zero,r17,274bc <_fflush_r+0x144>
   274b0:	003fed06 	br	27468 <__alt_data_end+0xfffe7898>
   274b4:	90a5883a 	add	r18,r18,r2
   274b8:	047feb0e 	bge	zero,r17,27468 <__alt_data_end+0xfffe7898>
   274bc:	80800917 	ldw	r2,36(r16)
   274c0:	81400717 	ldw	r5,28(r16)
   274c4:	880f883a 	mov	r7,r17
   274c8:	900d883a 	mov	r6,r18
   274cc:	9809883a 	mov	r4,r19
   274d0:	103ee83a 	callr	r2
   274d4:	88a3c83a 	sub	r17,r17,r2
   274d8:	00bff616 	blt	zero,r2,274b4 <__alt_data_end+0xfffe78e4>
   274dc:	80c0030b 	ldhu	r3,12(r16)
   274e0:	00bfffc4 	movi	r2,-1
   274e4:	18c01014 	ori	r3,r3,64
   274e8:	80c0030d 	sth	r3,12(r16)
   274ec:	003fdf06 	br	2746c <__alt_data_end+0xfffe789c>
   274f0:	00279200 	call	27920 <__sinit>
   274f4:	003fab06 	br	273a4 <__alt_data_end+0xfffe77d4>
   274f8:	80800517 	ldw	r2,20(r16)
   274fc:	003fea06 	br	274a8 <__alt_data_end+0xfffe78d8>
   27500:	81400717 	ldw	r5,28(r16)
   27504:	000d883a 	mov	r6,zero
   27508:	9809883a 	mov	r4,r19
   2750c:	01c00044 	movi	r7,1
   27510:	403ee83a 	callr	r8
   27514:	100d883a 	mov	r6,r2
   27518:	00bfffc4 	movi	r2,-1
   2751c:	30801326 	beq	r6,r2,2756c <_fflush_r+0x1f4>
   27520:	8080030b 	ldhu	r2,12(r16)
   27524:	82000a17 	ldw	r8,40(r16)
   27528:	003fb006 	br	273ec <__alt_data_end+0xfffe781c>
   2752c:	80c00f17 	ldw	r3,60(r16)
   27530:	00ffa716 	blt	zero,r3,273d0 <__alt_data_end+0xfffe7800>
   27534:	003fcc06 	br	27468 <__alt_data_end+0xfffe7898>
   27538:	98c00017 	ldw	r3,0(r19)
   2753c:	183fb926 	beq	r3,zero,27424 <__alt_data_end+0xfffe7854>
   27540:	01000744 	movi	r4,29
   27544:	19000226 	beq	r3,r4,27550 <_fflush_r+0x1d8>
   27548:	01000584 	movi	r4,22
   2754c:	1900101e 	bne	r3,r4,27590 <_fflush_r+0x218>
   27550:	8080030b 	ldhu	r2,12(r16)
   27554:	80c00417 	ldw	r3,16(r16)
   27558:	80000115 	stw	zero,4(r16)
   2755c:	10bdffcc 	andi	r2,r2,63487
   27560:	8080030d 	sth	r2,12(r16)
   27564:	80c00015 	stw	r3,0(r16)
   27568:	003fb706 	br	27448 <__alt_data_end+0xfffe7878>
   2756c:	98800017 	ldw	r2,0(r19)
   27570:	103feb26 	beq	r2,zero,27520 <__alt_data_end+0xfffe7950>
   27574:	00c00744 	movi	r3,29
   27578:	10c00226 	beq	r2,r3,27584 <_fflush_r+0x20c>
   2757c:	00c00584 	movi	r3,22
   27580:	10ffd61e 	bne	r2,r3,274dc <__alt_data_end+0xfffe790c>
   27584:	9c400015 	stw	r17,0(r19)
   27588:	0005883a 	mov	r2,zero
   2758c:	003fb706 	br	2746c <__alt_data_end+0xfffe789c>
   27590:	80c0030b 	ldhu	r3,12(r16)
   27594:	18c01014 	ori	r3,r3,64
   27598:	80c0030d 	sth	r3,12(r16)
   2759c:	003fb306 	br	2746c <__alt_data_end+0xfffe789c>

000275a0 <fflush>:
   275a0:	20000526 	beq	r4,zero,275b8 <fflush+0x18>
   275a4:	008000f4 	movhi	r2,3
   275a8:	10959304 	addi	r2,r2,22092
   275ac:	200b883a 	mov	r5,r4
   275b0:	11000017 	ldw	r4,0(r2)
   275b4:	00273781 	jmpi	27378 <_fflush_r>
   275b8:	008000f4 	movhi	r2,3
   275bc:	10959204 	addi	r2,r2,22088
   275c0:	11000017 	ldw	r4,0(r2)
   275c4:	014000b4 	movhi	r5,2
   275c8:	295cde04 	addi	r5,r5,29560
   275cc:	00282e01 	jmpi	282e0 <_fwalk_reent>

000275d0 <__fp_lock>:
   275d0:	0005883a 	mov	r2,zero
   275d4:	f800283a 	ret

000275d8 <__fp_unlock>:
   275d8:	0005883a 	mov	r2,zero
   275dc:	f800283a 	ret

000275e0 <_cleanup_r>:
   275e0:	014000f4 	movhi	r5,3
   275e4:	2974e104 	addi	r5,r5,-11388
   275e8:	00282281 	jmpi	28228 <_fwalk>

000275ec <__sinit.part.1>:
   275ec:	defff604 	addi	sp,sp,-40
   275f0:	00c000b4 	movhi	r3,2
   275f4:	dfc00915 	stw	ra,36(sp)
   275f8:	df000815 	stw	fp,32(sp)
   275fc:	ddc00715 	stw	r23,28(sp)
   27600:	dd800615 	stw	r22,24(sp)
   27604:	dd400515 	stw	r21,20(sp)
   27608:	dd000415 	stw	r20,16(sp)
   2760c:	dcc00315 	stw	r19,12(sp)
   27610:	dc800215 	stw	r18,8(sp)
   27614:	dc400115 	stw	r17,4(sp)
   27618:	dc000015 	stw	r16,0(sp)
   2761c:	18dd7804 	addi	r3,r3,30176
   27620:	24000117 	ldw	r16,4(r4)
   27624:	20c00f15 	stw	r3,60(r4)
   27628:	07000044 	movi	fp,1
   2762c:	00c000c4 	movi	r3,3
   27630:	2080bb04 	addi	r2,r4,748
   27634:	20c0b915 	stw	r3,740(r4)
   27638:	27000e15 	stw	fp,56(r4)
   2763c:	2080ba15 	stw	r2,744(r4)
   27640:	2000b815 	stw	zero,736(r4)
   27644:	05c00204 	movi	r23,8
   27648:	00800104 	movi	r2,4
   2764c:	2025883a 	mov	r18,r4
   27650:	b80d883a 	mov	r6,r23
   27654:	81001704 	addi	r4,r16,92
   27658:	000b883a 	mov	r5,zero
   2765c:	80000015 	stw	zero,0(r16)
   27660:	80000115 	stw	zero,4(r16)
   27664:	80000215 	stw	zero,8(r16)
   27668:	8080030d 	sth	r2,12(r16)
   2766c:	80001915 	stw	zero,100(r16)
   27670:	8000038d 	sth	zero,14(r16)
   27674:	80000415 	stw	zero,16(r16)
   27678:	80000515 	stw	zero,20(r16)
   2767c:	80000615 	stw	zero,24(r16)
   27680:	00291540 	call	29154 <memset>
   27684:	058000f4 	movhi	r22,3
   27688:	94400217 	ldw	r17,8(r18)
   2768c:	054000f4 	movhi	r21,3
   27690:	050000f4 	movhi	r20,3
   27694:	04c000f4 	movhi	r19,3
   27698:	b5aa1b04 	addi	r22,r22,-22420
   2769c:	ad6a3204 	addi	r21,r21,-22328
   276a0:	a52a5104 	addi	r20,r20,-22204
   276a4:	9cea6804 	addi	r19,r19,-22112
   276a8:	85800815 	stw	r22,32(r16)
   276ac:	85400915 	stw	r21,36(r16)
   276b0:	85000a15 	stw	r20,40(r16)
   276b4:	84c00b15 	stw	r19,44(r16)
   276b8:	84000715 	stw	r16,28(r16)
   276bc:	00800284 	movi	r2,10
   276c0:	89001704 	addi	r4,r17,92
   276c4:	b80d883a 	mov	r6,r23
   276c8:	000b883a 	mov	r5,zero
   276cc:	88000015 	stw	zero,0(r17)
   276d0:	88000115 	stw	zero,4(r17)
   276d4:	88000215 	stw	zero,8(r17)
   276d8:	8880030d 	sth	r2,12(r17)
   276dc:	88001915 	stw	zero,100(r17)
   276e0:	8f00038d 	sth	fp,14(r17)
   276e4:	88000415 	stw	zero,16(r17)
   276e8:	88000515 	stw	zero,20(r17)
   276ec:	88000615 	stw	zero,24(r17)
   276f0:	00291540 	call	29154 <memset>
   276f4:	94000317 	ldw	r16,12(r18)
   276f8:	00800484 	movi	r2,18
   276fc:	8c400715 	stw	r17,28(r17)
   27700:	8d800815 	stw	r22,32(r17)
   27704:	8d400915 	stw	r21,36(r17)
   27708:	8d000a15 	stw	r20,40(r17)
   2770c:	8cc00b15 	stw	r19,44(r17)
   27710:	8080030d 	sth	r2,12(r16)
   27714:	00800084 	movi	r2,2
   27718:	80000015 	stw	zero,0(r16)
   2771c:	80000115 	stw	zero,4(r16)
   27720:	80000215 	stw	zero,8(r16)
   27724:	80001915 	stw	zero,100(r16)
   27728:	8080038d 	sth	r2,14(r16)
   2772c:	80000415 	stw	zero,16(r16)
   27730:	80000515 	stw	zero,20(r16)
   27734:	80000615 	stw	zero,24(r16)
   27738:	81001704 	addi	r4,r16,92
   2773c:	000b883a 	mov	r5,zero
   27740:	b80d883a 	mov	r6,r23
   27744:	00291540 	call	29154 <memset>
   27748:	84000715 	stw	r16,28(r16)
   2774c:	85800815 	stw	r22,32(r16)
   27750:	85400915 	stw	r21,36(r16)
   27754:	85000a15 	stw	r20,40(r16)
   27758:	84c00b15 	stw	r19,44(r16)
   2775c:	dfc00917 	ldw	ra,36(sp)
   27760:	df000817 	ldw	fp,32(sp)
   27764:	ddc00717 	ldw	r23,28(sp)
   27768:	dd800617 	ldw	r22,24(sp)
   2776c:	dd400517 	ldw	r21,20(sp)
   27770:	dd000417 	ldw	r20,16(sp)
   27774:	dcc00317 	ldw	r19,12(sp)
   27778:	dc800217 	ldw	r18,8(sp)
   2777c:	dc400117 	ldw	r17,4(sp)
   27780:	dc000017 	ldw	r16,0(sp)
   27784:	dec00a04 	addi	sp,sp,40
   27788:	f800283a 	ret

0002778c <__sfmoreglue>:
   2778c:	defffc04 	addi	sp,sp,-16
   27790:	dc400115 	stw	r17,4(sp)
   27794:	2c401a24 	muli	r17,r5,104
   27798:	dc800215 	stw	r18,8(sp)
   2779c:	2825883a 	mov	r18,r5
   277a0:	89400304 	addi	r5,r17,12
   277a4:	dc000015 	stw	r16,0(sp)
   277a8:	dfc00315 	stw	ra,12(sp)
   277ac:	00286300 	call	28630 <_malloc_r>
   277b0:	1021883a 	mov	r16,r2
   277b4:	10000726 	beq	r2,zero,277d4 <__sfmoreglue+0x48>
   277b8:	11000304 	addi	r4,r2,12
   277bc:	10000015 	stw	zero,0(r2)
   277c0:	14800115 	stw	r18,4(r2)
   277c4:	11000215 	stw	r4,8(r2)
   277c8:	000b883a 	mov	r5,zero
   277cc:	880d883a 	mov	r6,r17
   277d0:	00291540 	call	29154 <memset>
   277d4:	8005883a 	mov	r2,r16
   277d8:	dfc00317 	ldw	ra,12(sp)
   277dc:	dc800217 	ldw	r18,8(sp)
   277e0:	dc400117 	ldw	r17,4(sp)
   277e4:	dc000017 	ldw	r16,0(sp)
   277e8:	dec00404 	addi	sp,sp,16
   277ec:	f800283a 	ret

000277f0 <__sfp>:
   277f0:	008000f4 	movhi	r2,3
   277f4:	defffb04 	addi	sp,sp,-20
   277f8:	10959204 	addi	r2,r2,22088
   277fc:	dc800215 	stw	r18,8(sp)
   27800:	14800017 	ldw	r18,0(r2)
   27804:	dcc00315 	stw	r19,12(sp)
   27808:	dfc00415 	stw	ra,16(sp)
   2780c:	90800e17 	ldw	r2,56(r18)
   27810:	dc400115 	stw	r17,4(sp)
   27814:	dc000015 	stw	r16,0(sp)
   27818:	2027883a 	mov	r19,r4
   2781c:	1000021e 	bne	r2,zero,27828 <__sfp+0x38>
   27820:	9009883a 	mov	r4,r18
   27824:	00275ec0 	call	275ec <__sinit.part.1>
   27828:	9480b804 	addi	r18,r18,736
   2782c:	047fffc4 	movi	r17,-1
   27830:	91400117 	ldw	r5,4(r18)
   27834:	94000217 	ldw	r16,8(r18)
   27838:	297fffc4 	addi	r5,r5,-1
   2783c:	28000a16 	blt	r5,zero,27868 <__sfp+0x78>
   27840:	8080030f 	ldh	r2,12(r16)
   27844:	10000c26 	beq	r2,zero,27878 <__sfp+0x88>
   27848:	80c01d04 	addi	r3,r16,116
   2784c:	00000206 	br	27858 <__sfp+0x68>
   27850:	18bfe60f 	ldh	r2,-104(r3)
   27854:	10000826 	beq	r2,zero,27878 <__sfp+0x88>
   27858:	297fffc4 	addi	r5,r5,-1
   2785c:	1c3ffd04 	addi	r16,r3,-12
   27860:	18c01a04 	addi	r3,r3,104
   27864:	2c7ffa1e 	bne	r5,r17,27850 <__alt_data_end+0xfffe7c80>
   27868:	90800017 	ldw	r2,0(r18)
   2786c:	10001d26 	beq	r2,zero,278e4 <__sfp+0xf4>
   27870:	1025883a 	mov	r18,r2
   27874:	003fee06 	br	27830 <__alt_data_end+0xfffe7c60>
   27878:	00bfffc4 	movi	r2,-1
   2787c:	8080038d 	sth	r2,14(r16)
   27880:	00800044 	movi	r2,1
   27884:	8080030d 	sth	r2,12(r16)
   27888:	80001915 	stw	zero,100(r16)
   2788c:	80000015 	stw	zero,0(r16)
   27890:	80000215 	stw	zero,8(r16)
   27894:	80000115 	stw	zero,4(r16)
   27898:	80000415 	stw	zero,16(r16)
   2789c:	80000515 	stw	zero,20(r16)
   278a0:	80000615 	stw	zero,24(r16)
   278a4:	81001704 	addi	r4,r16,92
   278a8:	000b883a 	mov	r5,zero
   278ac:	01800204 	movi	r6,8
   278b0:	00291540 	call	29154 <memset>
   278b4:	8005883a 	mov	r2,r16
   278b8:	80000c15 	stw	zero,48(r16)
   278bc:	80000d15 	stw	zero,52(r16)
   278c0:	80001115 	stw	zero,68(r16)
   278c4:	80001215 	stw	zero,72(r16)
   278c8:	dfc00417 	ldw	ra,16(sp)
   278cc:	dcc00317 	ldw	r19,12(sp)
   278d0:	dc800217 	ldw	r18,8(sp)
   278d4:	dc400117 	ldw	r17,4(sp)
   278d8:	dc000017 	ldw	r16,0(sp)
   278dc:	dec00504 	addi	sp,sp,20
   278e0:	f800283a 	ret
   278e4:	9809883a 	mov	r4,r19
   278e8:	01400104 	movi	r5,4
   278ec:	002778c0 	call	2778c <__sfmoreglue>
   278f0:	90800015 	stw	r2,0(r18)
   278f4:	103fde1e 	bne	r2,zero,27870 <__alt_data_end+0xfffe7ca0>
   278f8:	00800304 	movi	r2,12
   278fc:	98800015 	stw	r2,0(r19)
   27900:	0005883a 	mov	r2,zero
   27904:	003ff006 	br	278c8 <__alt_data_end+0xfffe7cf8>

00027908 <_cleanup>:
   27908:	008000f4 	movhi	r2,3
   2790c:	10959204 	addi	r2,r2,22088
   27910:	11000017 	ldw	r4,0(r2)
   27914:	014000f4 	movhi	r5,3
   27918:	2974e104 	addi	r5,r5,-11388
   2791c:	00282281 	jmpi	28228 <_fwalk>

00027920 <__sinit>:
   27920:	20800e17 	ldw	r2,56(r4)
   27924:	10000126 	beq	r2,zero,2792c <__sinit+0xc>
   27928:	f800283a 	ret
   2792c:	00275ec1 	jmpi	275ec <__sinit.part.1>

00027930 <__sfp_lock_acquire>:
   27930:	f800283a 	ret

00027934 <__sfp_lock_release>:
   27934:	f800283a 	ret

00027938 <__sinit_lock_acquire>:
   27938:	f800283a 	ret

0002793c <__sinit_lock_release>:
   2793c:	f800283a 	ret

00027940 <__fp_lock_all>:
   27940:	008000f4 	movhi	r2,3
   27944:	10959304 	addi	r2,r2,22092
   27948:	11000017 	ldw	r4,0(r2)
   2794c:	014000b4 	movhi	r5,2
   27950:	295d7404 	addi	r5,r5,30160
   27954:	00282281 	jmpi	28228 <_fwalk>

00027958 <__fp_unlock_all>:
   27958:	008000f4 	movhi	r2,3
   2795c:	10959304 	addi	r2,r2,22092
   27960:	11000017 	ldw	r4,0(r2)
   27964:	014000b4 	movhi	r5,2
   27968:	295d7604 	addi	r5,r5,30168
   2796c:	00282281 	jmpi	28228 <_fwalk>

00027970 <_malloc_trim_r>:
   27970:	defffb04 	addi	sp,sp,-20
   27974:	dcc00315 	stw	r19,12(sp)
   27978:	04c000f4 	movhi	r19,3
   2797c:	dc800215 	stw	r18,8(sp)
   27980:	dc400115 	stw	r17,4(sp)
   27984:	dc000015 	stw	r16,0(sp)
   27988:	dfc00415 	stw	ra,16(sp)
   2798c:	2821883a 	mov	r16,r5
   27990:	9cd00e04 	addi	r19,r19,16440
   27994:	2025883a 	mov	r18,r4
   27998:	00315540 	call	31554 <__malloc_lock>
   2799c:	98800217 	ldw	r2,8(r19)
   279a0:	14400117 	ldw	r17,4(r2)
   279a4:	00bfff04 	movi	r2,-4
   279a8:	88a2703a 	and	r17,r17,r2
   279ac:	8c21c83a 	sub	r16,r17,r16
   279b0:	8403fbc4 	addi	r16,r16,4079
   279b4:	8020d33a 	srli	r16,r16,12
   279b8:	0083ffc4 	movi	r2,4095
   279bc:	843fffc4 	addi	r16,r16,-1
   279c0:	8020933a 	slli	r16,r16,12
   279c4:	1400060e 	bge	r2,r16,279e0 <_malloc_trim_r+0x70>
   279c8:	9009883a 	mov	r4,r18
   279cc:	000b883a 	mov	r5,zero
   279d0:	002a8180 	call	2a818 <_sbrk_r>
   279d4:	98c00217 	ldw	r3,8(r19)
   279d8:	1c47883a 	add	r3,r3,r17
   279dc:	10c00a26 	beq	r2,r3,27a08 <_malloc_trim_r+0x98>
   279e0:	9009883a 	mov	r4,r18
   279e4:	00315740 	call	31574 <__malloc_unlock>
   279e8:	0005883a 	mov	r2,zero
   279ec:	dfc00417 	ldw	ra,16(sp)
   279f0:	dcc00317 	ldw	r19,12(sp)
   279f4:	dc800217 	ldw	r18,8(sp)
   279f8:	dc400117 	ldw	r17,4(sp)
   279fc:	dc000017 	ldw	r16,0(sp)
   27a00:	dec00504 	addi	sp,sp,20
   27a04:	f800283a 	ret
   27a08:	9009883a 	mov	r4,r18
   27a0c:	040bc83a 	sub	r5,zero,r16
   27a10:	002a8180 	call	2a818 <_sbrk_r>
   27a14:	00ffffc4 	movi	r3,-1
   27a18:	10c00d26 	beq	r2,r3,27a50 <_malloc_trim_r+0xe0>
   27a1c:	00c000f4 	movhi	r3,3
   27a20:	18dc7704 	addi	r3,r3,29148
   27a24:	18800017 	ldw	r2,0(r3)
   27a28:	99000217 	ldw	r4,8(r19)
   27a2c:	8c23c83a 	sub	r17,r17,r16
   27a30:	8c400054 	ori	r17,r17,1
   27a34:	1421c83a 	sub	r16,r2,r16
   27a38:	24400115 	stw	r17,4(r4)
   27a3c:	9009883a 	mov	r4,r18
   27a40:	1c000015 	stw	r16,0(r3)
   27a44:	00315740 	call	31574 <__malloc_unlock>
   27a48:	00800044 	movi	r2,1
   27a4c:	003fe706 	br	279ec <__alt_data_end+0xfffe7e1c>
   27a50:	9009883a 	mov	r4,r18
   27a54:	000b883a 	mov	r5,zero
   27a58:	002a8180 	call	2a818 <_sbrk_r>
   27a5c:	99000217 	ldw	r4,8(r19)
   27a60:	014003c4 	movi	r5,15
   27a64:	1107c83a 	sub	r3,r2,r4
   27a68:	28ffdd0e 	bge	r5,r3,279e0 <__alt_data_end+0xfffe7e10>
   27a6c:	014000f4 	movhi	r5,3
   27a70:	29559504 	addi	r5,r5,22100
   27a74:	29400017 	ldw	r5,0(r5)
   27a78:	18c00054 	ori	r3,r3,1
   27a7c:	20c00115 	stw	r3,4(r4)
   27a80:	00c000f4 	movhi	r3,3
   27a84:	1145c83a 	sub	r2,r2,r5
   27a88:	18dc7704 	addi	r3,r3,29148
   27a8c:	18800015 	stw	r2,0(r3)
   27a90:	003fd306 	br	279e0 <__alt_data_end+0xfffe7e10>

00027a94 <_free_r>:
   27a94:	28004c26 	beq	r5,zero,27bc8 <_free_r+0x134>
   27a98:	defffd04 	addi	sp,sp,-12
   27a9c:	dc400115 	stw	r17,4(sp)
   27aa0:	dc000015 	stw	r16,0(sp)
   27aa4:	2023883a 	mov	r17,r4
   27aa8:	2821883a 	mov	r16,r5
   27aac:	dfc00215 	stw	ra,8(sp)
   27ab0:	00315540 	call	31554 <__malloc_lock>
   27ab4:	813fff17 	ldw	r4,-4(r16)
   27ab8:	00bfff84 	movi	r2,-2
   27abc:	024000f4 	movhi	r9,3
   27ac0:	81bffe04 	addi	r6,r16,-8
   27ac4:	2084703a 	and	r2,r4,r2
   27ac8:	4a500e04 	addi	r9,r9,16440
   27acc:	308b883a 	add	r5,r6,r2
   27ad0:	2a000117 	ldw	r8,4(r5)
   27ad4:	49c00217 	ldw	r7,8(r9)
   27ad8:	00ffff04 	movi	r3,-4
   27adc:	40c6703a 	and	r3,r8,r3
   27ae0:	39405326 	beq	r7,r5,27c30 <_free_r+0x19c>
   27ae4:	28c00115 	stw	r3,4(r5)
   27ae8:	2100004c 	andi	r4,r4,1
   27aec:	2000091e 	bne	r4,zero,27b14 <_free_r+0x80>
   27af0:	81fffe17 	ldw	r7,-8(r16)
   27af4:	4a000204 	addi	r8,r9,8
   27af8:	31cdc83a 	sub	r6,r6,r7
   27afc:	31000217 	ldw	r4,8(r6)
   27b00:	11c5883a 	add	r2,r2,r7
   27b04:	22006126 	beq	r4,r8,27c8c <_free_r+0x1f8>
   27b08:	31c00317 	ldw	r7,12(r6)
   27b0c:	21c00315 	stw	r7,12(r4)
   27b10:	39000215 	stw	r4,8(r7)
   27b14:	28c9883a 	add	r4,r5,r3
   27b18:	21c00117 	ldw	r7,4(r4)
   27b1c:	39c0004c 	andi	r7,r7,1
   27b20:	38000d1e 	bne	r7,zero,27b58 <_free_r+0xc4>
   27b24:	29000217 	ldw	r4,8(r5)
   27b28:	10c5883a 	add	r2,r2,r3
   27b2c:	00c000f4 	movhi	r3,3
   27b30:	18d01004 	addi	r3,r3,16448
   27b34:	20c07526 	beq	r4,r3,27d0c <_free_r+0x278>
   27b38:	29c00317 	ldw	r7,12(r5)
   27b3c:	11400054 	ori	r5,r2,1
   27b40:	3087883a 	add	r3,r6,r2
   27b44:	21c00315 	stw	r7,12(r4)
   27b48:	39000215 	stw	r4,8(r7)
   27b4c:	31400115 	stw	r5,4(r6)
   27b50:	18800015 	stw	r2,0(r3)
   27b54:	00000406 	br	27b68 <_free_r+0xd4>
   27b58:	10c00054 	ori	r3,r2,1
   27b5c:	30c00115 	stw	r3,4(r6)
   27b60:	3087883a 	add	r3,r6,r2
   27b64:	18800015 	stw	r2,0(r3)
   27b68:	00c07fc4 	movi	r3,511
   27b6c:	18801736 	bltu	r3,r2,27bcc <_free_r+0x138>
   27b70:	1004d0fa 	srli	r2,r2,3
   27b74:	01400044 	movi	r5,1
   27b78:	49000117 	ldw	r4,4(r9)
   27b7c:	1087883a 	add	r3,r2,r2
   27b80:	18c7883a 	add	r3,r3,r3
   27b84:	1005d0ba 	srai	r2,r2,2
   27b88:	18c7883a 	add	r3,r3,r3
   27b8c:	1a47883a 	add	r3,r3,r9
   27b90:	19c00217 	ldw	r7,8(r3)
   27b94:	2884983a 	sll	r2,r5,r2
   27b98:	30c00315 	stw	r3,12(r6)
   27b9c:	31c00215 	stw	r7,8(r6)
   27ba0:	1104b03a 	or	r2,r2,r4
   27ba4:	19800215 	stw	r6,8(r3)
   27ba8:	48800115 	stw	r2,4(r9)
   27bac:	39800315 	stw	r6,12(r7)
   27bb0:	8809883a 	mov	r4,r17
   27bb4:	dfc00217 	ldw	ra,8(sp)
   27bb8:	dc400117 	ldw	r17,4(sp)
   27bbc:	dc000017 	ldw	r16,0(sp)
   27bc0:	dec00304 	addi	sp,sp,12
   27bc4:	00315741 	jmpi	31574 <__malloc_unlock>
   27bc8:	f800283a 	ret
   27bcc:	1006d27a 	srli	r3,r2,9
   27bd0:	01000104 	movi	r4,4
   27bd4:	20c04036 	bltu	r4,r3,27cd8 <_free_r+0x244>
   27bd8:	1006d1ba 	srli	r3,r2,6
   27bdc:	19400e04 	addi	r5,r3,56
   27be0:	2947883a 	add	r3,r5,r5
   27be4:	18c7883a 	add	r3,r3,r3
   27be8:	18c7883a 	add	r3,r3,r3
   27bec:	1a49883a 	add	r4,r3,r9
   27bf0:	20c00217 	ldw	r3,8(r4)
   27bf4:	01c000f4 	movhi	r7,3
   27bf8:	39d00e04 	addi	r7,r7,16440
   27bfc:	19003b26 	beq	r3,r4,27cec <_free_r+0x258>
   27c00:	01ffff04 	movi	r7,-4
   27c04:	19400117 	ldw	r5,4(r3)
   27c08:	29ca703a 	and	r5,r5,r7
   27c0c:	1140022e 	bgeu	r2,r5,27c18 <_free_r+0x184>
   27c10:	18c00217 	ldw	r3,8(r3)
   27c14:	20fffb1e 	bne	r4,r3,27c04 <__alt_data_end+0xfffe8034>
   27c18:	18800317 	ldw	r2,12(r3)
   27c1c:	30800315 	stw	r2,12(r6)
   27c20:	30c00215 	stw	r3,8(r6)
   27c24:	11800215 	stw	r6,8(r2)
   27c28:	19800315 	stw	r6,12(r3)
   27c2c:	003fe006 	br	27bb0 <__alt_data_end+0xfffe7fe0>
   27c30:	2100004c 	andi	r4,r4,1
   27c34:	1885883a 	add	r2,r3,r2
   27c38:	2000071e 	bne	r4,zero,27c58 <_free_r+0x1c4>
   27c3c:	817ffe17 	ldw	r5,-8(r16)
   27c40:	314dc83a 	sub	r6,r6,r5
   27c44:	30c00317 	ldw	r3,12(r6)
   27c48:	31000217 	ldw	r4,8(r6)
   27c4c:	1145883a 	add	r2,r2,r5
   27c50:	20c00315 	stw	r3,12(r4)
   27c54:	19000215 	stw	r4,8(r3)
   27c58:	10c00054 	ori	r3,r2,1
   27c5c:	30c00115 	stw	r3,4(r6)
   27c60:	00c000f4 	movhi	r3,3
   27c64:	18d59604 	addi	r3,r3,22104
   27c68:	18c00017 	ldw	r3,0(r3)
   27c6c:	49800215 	stw	r6,8(r9)
   27c70:	10ffcf36 	bltu	r2,r3,27bb0 <__alt_data_end+0xfffe7fe0>
   27c74:	008000f4 	movhi	r2,3
   27c78:	109c6804 	addi	r2,r2,29088
   27c7c:	11400017 	ldw	r5,0(r2)
   27c80:	8809883a 	mov	r4,r17
   27c84:	00279700 	call	27970 <_malloc_trim_r>
   27c88:	003fc906 	br	27bb0 <__alt_data_end+0xfffe7fe0>
   27c8c:	28c9883a 	add	r4,r5,r3
   27c90:	21000117 	ldw	r4,4(r4)
   27c94:	2100004c 	andi	r4,r4,1
   27c98:	20000a1e 	bne	r4,zero,27cc4 <_free_r+0x230>
   27c9c:	29000317 	ldw	r4,12(r5)
   27ca0:	29400217 	ldw	r5,8(r5)
   27ca4:	10c5883a 	add	r2,r2,r3
   27ca8:	10c00054 	ori	r3,r2,1
   27cac:	29000315 	stw	r4,12(r5)
   27cb0:	21400215 	stw	r5,8(r4)
   27cb4:	30c00115 	stw	r3,4(r6)
   27cb8:	308d883a 	add	r6,r6,r2
   27cbc:	30800015 	stw	r2,0(r6)
   27cc0:	003fbb06 	br	27bb0 <__alt_data_end+0xfffe7fe0>
   27cc4:	10c00054 	ori	r3,r2,1
   27cc8:	30c00115 	stw	r3,4(r6)
   27ccc:	308d883a 	add	r6,r6,r2
   27cd0:	30800015 	stw	r2,0(r6)
   27cd4:	003fb606 	br	27bb0 <__alt_data_end+0xfffe7fe0>
   27cd8:	01000504 	movi	r4,20
   27cdc:	20c01436 	bltu	r4,r3,27d30 <_free_r+0x29c>
   27ce0:	194016c4 	addi	r5,r3,91
   27ce4:	2947883a 	add	r3,r5,r5
   27ce8:	003fbe06 	br	27be4 <__alt_data_end+0xfffe8014>
   27cec:	280bd0ba 	srai	r5,r5,2
   27cf0:	00800044 	movi	r2,1
   27cf4:	39000117 	ldw	r4,4(r7)
   27cf8:	114a983a 	sll	r5,r2,r5
   27cfc:	1805883a 	mov	r2,r3
   27d00:	2908b03a 	or	r4,r5,r4
   27d04:	39000115 	stw	r4,4(r7)
   27d08:	003fc406 	br	27c1c <__alt_data_end+0xfffe804c>
   27d0c:	49800515 	stw	r6,20(r9)
   27d10:	49800415 	stw	r6,16(r9)
   27d14:	10c00054 	ori	r3,r2,1
   27d18:	31000315 	stw	r4,12(r6)
   27d1c:	31000215 	stw	r4,8(r6)
   27d20:	30c00115 	stw	r3,4(r6)
   27d24:	308d883a 	add	r6,r6,r2
   27d28:	30800015 	stw	r2,0(r6)
   27d2c:	003fa006 	br	27bb0 <__alt_data_end+0xfffe7fe0>
   27d30:	01001504 	movi	r4,84
   27d34:	20c00436 	bltu	r4,r3,27d48 <_free_r+0x2b4>
   27d38:	1006d33a 	srli	r3,r2,12
   27d3c:	19401b84 	addi	r5,r3,110
   27d40:	2947883a 	add	r3,r5,r5
   27d44:	003fa706 	br	27be4 <__alt_data_end+0xfffe8014>
   27d48:	01005504 	movi	r4,340
   27d4c:	20c00436 	bltu	r4,r3,27d60 <_free_r+0x2cc>
   27d50:	1006d3fa 	srli	r3,r2,15
   27d54:	19401dc4 	addi	r5,r3,119
   27d58:	2947883a 	add	r3,r5,r5
   27d5c:	003fa106 	br	27be4 <__alt_data_end+0xfffe8014>
   27d60:	01015504 	movi	r4,1364
   27d64:	20c00436 	bltu	r4,r3,27d78 <_free_r+0x2e4>
   27d68:	1006d4ba 	srli	r3,r2,18
   27d6c:	19401f04 	addi	r5,r3,124
   27d70:	2947883a 	add	r3,r5,r5
   27d74:	003f9b06 	br	27be4 <__alt_data_end+0xfffe8014>
   27d78:	00c03f04 	movi	r3,252
   27d7c:	01401f84 	movi	r5,126
   27d80:	003f9806 	br	27be4 <__alt_data_end+0xfffe8014>

00027d84 <__sfvwrite_r>:
   27d84:	30800217 	ldw	r2,8(r6)
   27d88:	10004526 	beq	r2,zero,27ea0 <__sfvwrite_r+0x11c>
   27d8c:	28c0030b 	ldhu	r3,12(r5)
   27d90:	defff404 	addi	sp,sp,-48
   27d94:	dd400715 	stw	r21,28(sp)
   27d98:	dcc00515 	stw	r19,20(sp)
   27d9c:	dc000215 	stw	r16,8(sp)
   27da0:	dfc00b15 	stw	ra,44(sp)
   27da4:	df000a15 	stw	fp,40(sp)
   27da8:	ddc00915 	stw	r23,36(sp)
   27dac:	dd800815 	stw	r22,32(sp)
   27db0:	dd000615 	stw	r20,24(sp)
   27db4:	dc800415 	stw	r18,16(sp)
   27db8:	dc400315 	stw	r17,12(sp)
   27dbc:	1880020c 	andi	r2,r3,8
   27dc0:	2821883a 	mov	r16,r5
   27dc4:	202b883a 	mov	r21,r4
   27dc8:	3027883a 	mov	r19,r6
   27dcc:	10002526 	beq	r2,zero,27e64 <__sfvwrite_r+0xe0>
   27dd0:	28800417 	ldw	r2,16(r5)
   27dd4:	10002326 	beq	r2,zero,27e64 <__sfvwrite_r+0xe0>
   27dd8:	1880008c 	andi	r2,r3,2
   27ddc:	9c400017 	ldw	r17,0(r19)
   27de0:	10003126 	beq	r2,zero,27ea8 <__sfvwrite_r+0x124>
   27de4:	0029883a 	mov	r20,zero
   27de8:	0025883a 	mov	r18,zero
   27dec:	05810004 	movi	r22,1024
   27df0:	a00d883a 	mov	r6,r20
   27df4:	a809883a 	mov	r4,r21
   27df8:	90002526 	beq	r18,zero,27e90 <__sfvwrite_r+0x10c>
   27dfc:	900f883a 	mov	r7,r18
   27e00:	81400717 	ldw	r5,28(r16)
   27e04:	b480012e 	bgeu	r22,r18,27e0c <__sfvwrite_r+0x88>
   27e08:	01c10004 	movi	r7,1024
   27e0c:	80800917 	ldw	r2,36(r16)
   27e10:	103ee83a 	callr	r2
   27e14:	0080510e 	bge	zero,r2,27f5c <__sfvwrite_r+0x1d8>
   27e18:	98c00217 	ldw	r3,8(r19)
   27e1c:	a0a9883a 	add	r20,r20,r2
   27e20:	90a5c83a 	sub	r18,r18,r2
   27e24:	1885c83a 	sub	r2,r3,r2
   27e28:	98800215 	stw	r2,8(r19)
   27e2c:	103ff01e 	bne	r2,zero,27df0 <__alt_data_end+0xfffe8220>
   27e30:	0005883a 	mov	r2,zero
   27e34:	dfc00b17 	ldw	ra,44(sp)
   27e38:	df000a17 	ldw	fp,40(sp)
   27e3c:	ddc00917 	ldw	r23,36(sp)
   27e40:	dd800817 	ldw	r22,32(sp)
   27e44:	dd400717 	ldw	r21,28(sp)
   27e48:	dd000617 	ldw	r20,24(sp)
   27e4c:	dcc00517 	ldw	r19,20(sp)
   27e50:	dc800417 	ldw	r18,16(sp)
   27e54:	dc400317 	ldw	r17,12(sp)
   27e58:	dc000217 	ldw	r16,8(sp)
   27e5c:	dec00c04 	addi	sp,sp,48
   27e60:	f800283a 	ret
   27e64:	a809883a 	mov	r4,r21
   27e68:	800b883a 	mov	r5,r16
   27e6c:	00259200 	call	25920 <__swsetup_r>
   27e70:	80c0030b 	ldhu	r3,12(r16)
   27e74:	103fd826 	beq	r2,zero,27dd8 <__alt_data_end+0xfffe8208>
   27e78:	18c01014 	ori	r3,r3,64
   27e7c:	80c0030d 	sth	r3,12(r16)
   27e80:	00c00244 	movi	r3,9
   27e84:	00bfffc4 	movi	r2,-1
   27e88:	a8c00015 	stw	r3,0(r21)
   27e8c:	003fe906 	br	27e34 <__alt_data_end+0xfffe8264>
   27e90:	8d000017 	ldw	r20,0(r17)
   27e94:	8c800117 	ldw	r18,4(r17)
   27e98:	8c400204 	addi	r17,r17,8
   27e9c:	003fd406 	br	27df0 <__alt_data_end+0xfffe8220>
   27ea0:	0005883a 	mov	r2,zero
   27ea4:	f800283a 	ret
   27ea8:	1880004c 	andi	r2,r3,1
   27eac:	1000301e 	bne	r2,zero,27f70 <__sfvwrite_r+0x1ec>
   27eb0:	002f883a 	mov	r23,zero
   27eb4:	0025883a 	mov	r18,zero
   27eb8:	90001c26 	beq	r18,zero,27f2c <__sfvwrite_r+0x1a8>
   27ebc:	1880800c 	andi	r2,r3,512
   27ec0:	85000217 	ldw	r20,8(r16)
   27ec4:	10006c26 	beq	r2,zero,28078 <__sfvwrite_r+0x2f4>
   27ec8:	a02d883a 	mov	r22,r20
   27ecc:	95008536 	bltu	r18,r20,280e4 <__sfvwrite_r+0x360>
   27ed0:	1881200c 	andi	r2,r3,1152
   27ed4:	10009d1e 	bne	r2,zero,2814c <__sfvwrite_r+0x3c8>
   27ed8:	81000017 	ldw	r4,0(r16)
   27edc:	a039883a 	mov	fp,r20
   27ee0:	9029883a 	mov	r20,r18
   27ee4:	b80b883a 	mov	r5,r23
   27ee8:	b00d883a 	mov	r6,r22
   27eec:	0028ff80 	call	28ff8 <memmove>
   27ef0:	80c00217 	ldw	r3,8(r16)
   27ef4:	81000017 	ldw	r4,0(r16)
   27ef8:	9005883a 	mov	r2,r18
   27efc:	1f39c83a 	sub	fp,r3,fp
   27f00:	258f883a 	add	r7,r4,r22
   27f04:	87000215 	stw	fp,8(r16)
   27f08:	81c00015 	stw	r7,0(r16)
   27f0c:	98c00217 	ldw	r3,8(r19)
   27f10:	b8af883a 	add	r23,r23,r2
   27f14:	90a5c83a 	sub	r18,r18,r2
   27f18:	1d05c83a 	sub	r2,r3,r20
   27f1c:	98800215 	stw	r2,8(r19)
   27f20:	103fc326 	beq	r2,zero,27e30 <__alt_data_end+0xfffe8260>
   27f24:	80c0030b 	ldhu	r3,12(r16)
   27f28:	903fe41e 	bne	r18,zero,27ebc <__alt_data_end+0xfffe82ec>
   27f2c:	8dc00017 	ldw	r23,0(r17)
   27f30:	8c800117 	ldw	r18,4(r17)
   27f34:	8c400204 	addi	r17,r17,8
   27f38:	003fdf06 	br	27eb8 <__alt_data_end+0xfffe82e8>
   27f3c:	002a2040 	call	2a204 <_realloc_r>
   27f40:	102d883a 	mov	r22,r2
   27f44:	1000a01e 	bne	r2,zero,281c8 <__sfvwrite_r+0x444>
   27f48:	81400417 	ldw	r5,16(r16)
   27f4c:	a809883a 	mov	r4,r21
   27f50:	0027a940 	call	27a94 <_free_r>
   27f54:	00800304 	movi	r2,12
   27f58:	a8800015 	stw	r2,0(r21)
   27f5c:	80c0030b 	ldhu	r3,12(r16)
   27f60:	00bfffc4 	movi	r2,-1
   27f64:	18c01014 	ori	r3,r3,64
   27f68:	80c0030d 	sth	r3,12(r16)
   27f6c:	003fb106 	br	27e34 <__alt_data_end+0xfffe8264>
   27f70:	0029883a 	mov	r20,zero
   27f74:	0011883a 	mov	r8,zero
   27f78:	0039883a 	mov	fp,zero
   27f7c:	0025883a 	mov	r18,zero
   27f80:	90001f26 	beq	r18,zero,28000 <__sfvwrite_r+0x27c>
   27f84:	40006826 	beq	r8,zero,28128 <__sfvwrite_r+0x3a4>
   27f88:	a02f883a 	mov	r23,r20
   27f8c:	9500012e 	bgeu	r18,r20,27f94 <__sfvwrite_r+0x210>
   27f90:	902f883a 	mov	r23,r18
   27f94:	81000017 	ldw	r4,0(r16)
   27f98:	80800417 	ldw	r2,16(r16)
   27f9c:	b82d883a 	mov	r22,r23
   27fa0:	81800217 	ldw	r6,8(r16)
   27fa4:	81c00517 	ldw	r7,20(r16)
   27fa8:	1100022e 	bgeu	r2,r4,27fb4 <__sfvwrite_r+0x230>
   27fac:	31c7883a 	add	r3,r6,r7
   27fb0:	1dc01816 	blt	r3,r23,28014 <__sfvwrite_r+0x290>
   27fb4:	b9c03f16 	blt	r23,r7,280b4 <__sfvwrite_r+0x330>
   27fb8:	80800917 	ldw	r2,36(r16)
   27fbc:	81400717 	ldw	r5,28(r16)
   27fc0:	a809883a 	mov	r4,r21
   27fc4:	da000115 	stw	r8,4(sp)
   27fc8:	e00d883a 	mov	r6,fp
   27fcc:	103ee83a 	callr	r2
   27fd0:	102d883a 	mov	r22,r2
   27fd4:	da000117 	ldw	r8,4(sp)
   27fd8:	00bfe00e 	bge	zero,r2,27f5c <__alt_data_end+0xfffe838c>
   27fdc:	a5a9c83a 	sub	r20,r20,r22
   27fe0:	a0001f26 	beq	r20,zero,28060 <__sfvwrite_r+0x2dc>
   27fe4:	98800217 	ldw	r2,8(r19)
   27fe8:	e5b9883a 	add	fp,fp,r22
   27fec:	95a5c83a 	sub	r18,r18,r22
   27ff0:	15adc83a 	sub	r22,r2,r22
   27ff4:	9d800215 	stw	r22,8(r19)
   27ff8:	b03f8d26 	beq	r22,zero,27e30 <__alt_data_end+0xfffe8260>
   27ffc:	903fe11e 	bne	r18,zero,27f84 <__alt_data_end+0xfffe83b4>
   28000:	8f000017 	ldw	fp,0(r17)
   28004:	8c800117 	ldw	r18,4(r17)
   28008:	0011883a 	mov	r8,zero
   2800c:	8c400204 	addi	r17,r17,8
   28010:	003fdb06 	br	27f80 <__alt_data_end+0xfffe83b0>
   28014:	180d883a 	mov	r6,r3
   28018:	e00b883a 	mov	r5,fp
   2801c:	da000115 	stw	r8,4(sp)
   28020:	d8c00015 	stw	r3,0(sp)
   28024:	0028ff80 	call	28ff8 <memmove>
   28028:	d8c00017 	ldw	r3,0(sp)
   2802c:	80800017 	ldw	r2,0(r16)
   28030:	a809883a 	mov	r4,r21
   28034:	800b883a 	mov	r5,r16
   28038:	10c5883a 	add	r2,r2,r3
   2803c:	80800015 	stw	r2,0(r16)
   28040:	d8c00015 	stw	r3,0(sp)
   28044:	00273780 	call	27378 <_fflush_r>
   28048:	d8c00017 	ldw	r3,0(sp)
   2804c:	da000117 	ldw	r8,4(sp)
   28050:	103fc21e 	bne	r2,zero,27f5c <__alt_data_end+0xfffe838c>
   28054:	182d883a 	mov	r22,r3
   28058:	a5a9c83a 	sub	r20,r20,r22
   2805c:	a03fe11e 	bne	r20,zero,27fe4 <__alt_data_end+0xfffe8414>
   28060:	a809883a 	mov	r4,r21
   28064:	800b883a 	mov	r5,r16
   28068:	00273780 	call	27378 <_fflush_r>
   2806c:	103fbb1e 	bne	r2,zero,27f5c <__alt_data_end+0xfffe838c>
   28070:	0011883a 	mov	r8,zero
   28074:	003fdb06 	br	27fe4 <__alt_data_end+0xfffe8414>
   28078:	81000017 	ldw	r4,0(r16)
   2807c:	80800417 	ldw	r2,16(r16)
   28080:	1100012e 	bgeu	r2,r4,28088 <__sfvwrite_r+0x304>
   28084:	a4805a36 	bltu	r20,r18,281f0 <__sfvwrite_r+0x46c>
   28088:	81c00517 	ldw	r7,20(r16)
   2808c:	91c01a36 	bltu	r18,r7,280f8 <__sfvwrite_r+0x374>
   28090:	80800917 	ldw	r2,36(r16)
   28094:	81400717 	ldw	r5,28(r16)
   28098:	a809883a 	mov	r4,r21
   2809c:	b80d883a 	mov	r6,r23
   280a0:	103ee83a 	callr	r2
   280a4:	1029883a 	mov	r20,r2
   280a8:	00bfac0e 	bge	zero,r2,27f5c <__alt_data_end+0xfffe838c>
   280ac:	a005883a 	mov	r2,r20
   280b0:	003f9606 	br	27f0c <__alt_data_end+0xfffe833c>
   280b4:	b80d883a 	mov	r6,r23
   280b8:	e00b883a 	mov	r5,fp
   280bc:	da000115 	stw	r8,4(sp)
   280c0:	0028ff80 	call	28ff8 <memmove>
   280c4:	80800217 	ldw	r2,8(r16)
   280c8:	80c00017 	ldw	r3,0(r16)
   280cc:	da000117 	ldw	r8,4(sp)
   280d0:	15c5c83a 	sub	r2,r2,r23
   280d4:	1def883a 	add	r23,r3,r23
   280d8:	80800215 	stw	r2,8(r16)
   280dc:	85c00015 	stw	r23,0(r16)
   280e0:	003fbe06 	br	27fdc <__alt_data_end+0xfffe840c>
   280e4:	81000017 	ldw	r4,0(r16)
   280e8:	9039883a 	mov	fp,r18
   280ec:	9029883a 	mov	r20,r18
   280f0:	902d883a 	mov	r22,r18
   280f4:	003f7b06 	br	27ee4 <__alt_data_end+0xfffe8314>
   280f8:	b80b883a 	mov	r5,r23
   280fc:	900d883a 	mov	r6,r18
   28100:	0028ff80 	call	28ff8 <memmove>
   28104:	80c00217 	ldw	r3,8(r16)
   28108:	80800017 	ldw	r2,0(r16)
   2810c:	9029883a 	mov	r20,r18
   28110:	1c87c83a 	sub	r3,r3,r18
   28114:	1485883a 	add	r2,r2,r18
   28118:	80800015 	stw	r2,0(r16)
   2811c:	80c00215 	stw	r3,8(r16)
   28120:	9005883a 	mov	r2,r18
   28124:	003f7906 	br	27f0c <__alt_data_end+0xfffe833c>
   28128:	e009883a 	mov	r4,fp
   2812c:	01400284 	movi	r5,10
   28130:	900d883a 	mov	r6,r18
   28134:	0028dd80 	call	28dd8 <memchr>
   28138:	10003826 	beq	r2,zero,2821c <__sfvwrite_r+0x498>
   2813c:	10800044 	addi	r2,r2,1
   28140:	1729c83a 	sub	r20,r2,fp
   28144:	02000044 	movi	r8,1
   28148:	003f8f06 	br	27f88 <__alt_data_end+0xfffe83b8>
   2814c:	80800517 	ldw	r2,20(r16)
   28150:	81400417 	ldw	r5,16(r16)
   28154:	87000017 	ldw	fp,0(r16)
   28158:	10a9883a 	add	r20,r2,r2
   2815c:	a085883a 	add	r2,r20,r2
   28160:	1028d7fa 	srli	r20,r2,31
   28164:	e179c83a 	sub	fp,fp,r5
   28168:	e1000044 	addi	r4,fp,1
   2816c:	a085883a 	add	r2,r20,r2
   28170:	1029d07a 	srai	r20,r2,1
   28174:	2485883a 	add	r2,r4,r18
   28178:	a00d883a 	mov	r6,r20
   2817c:	a080022e 	bgeu	r20,r2,28188 <__sfvwrite_r+0x404>
   28180:	1029883a 	mov	r20,r2
   28184:	100d883a 	mov	r6,r2
   28188:	18c1000c 	andi	r3,r3,1024
   2818c:	a809883a 	mov	r4,r21
   28190:	183f6a26 	beq	r3,zero,27f3c <__alt_data_end+0xfffe836c>
   28194:	300b883a 	mov	r5,r6
   28198:	00286300 	call	28630 <_malloc_r>
   2819c:	102d883a 	mov	r22,r2
   281a0:	103f6c26 	beq	r2,zero,27f54 <__alt_data_end+0xfffe8384>
   281a4:	81400417 	ldw	r5,16(r16)
   281a8:	1009883a 	mov	r4,r2
   281ac:	e00d883a 	mov	r6,fp
   281b0:	0028ec00 	call	28ec0 <memcpy>
   281b4:	8080030b 	ldhu	r2,12(r16)
   281b8:	00fedfc4 	movi	r3,-1153
   281bc:	10c4703a 	and	r2,r2,r3
   281c0:	10802014 	ori	r2,r2,128
   281c4:	8080030d 	sth	r2,12(r16)
   281c8:	b709883a 	add	r4,r22,fp
   281cc:	a707c83a 	sub	r3,r20,fp
   281d0:	85800415 	stw	r22,16(r16)
   281d4:	85000515 	stw	r20,20(r16)
   281d8:	81000015 	stw	r4,0(r16)
   281dc:	9039883a 	mov	fp,r18
   281e0:	80c00215 	stw	r3,8(r16)
   281e4:	9029883a 	mov	r20,r18
   281e8:	902d883a 	mov	r22,r18
   281ec:	003f3d06 	br	27ee4 <__alt_data_end+0xfffe8314>
   281f0:	b80b883a 	mov	r5,r23
   281f4:	a00d883a 	mov	r6,r20
   281f8:	0028ff80 	call	28ff8 <memmove>
   281fc:	80800017 	ldw	r2,0(r16)
   28200:	a809883a 	mov	r4,r21
   28204:	800b883a 	mov	r5,r16
   28208:	1505883a 	add	r2,r2,r20
   2820c:	80800015 	stw	r2,0(r16)
   28210:	00273780 	call	27378 <_fflush_r>
   28214:	103fa526 	beq	r2,zero,280ac <__alt_data_end+0xfffe84dc>
   28218:	003f5006 	br	27f5c <__alt_data_end+0xfffe838c>
   2821c:	95000044 	addi	r20,r18,1
   28220:	02000044 	movi	r8,1
   28224:	003f5806 	br	27f88 <__alt_data_end+0xfffe83b8>

00028228 <_fwalk>:
   28228:	defff804 	addi	sp,sp,-32
   2822c:	dd400515 	stw	r21,20(sp)
   28230:	2540b804 	addi	r21,r4,736
   28234:	dd800615 	stw	r22,24(sp)
   28238:	dd000415 	stw	r20,16(sp)
   2823c:	dfc00715 	stw	ra,28(sp)
   28240:	dcc00315 	stw	r19,12(sp)
   28244:	dc800215 	stw	r18,8(sp)
   28248:	dc400115 	stw	r17,4(sp)
   2824c:	dc000015 	stw	r16,0(sp)
   28250:	2829883a 	mov	r20,r5
   28254:	002d883a 	mov	r22,zero
   28258:	00279300 	call	27930 <__sfp_lock_acquire>
   2825c:	a8001426 	beq	r21,zero,282b0 <_fwalk+0x88>
   28260:	04ffffc4 	movi	r19,-1
   28264:	ac400117 	ldw	r17,4(r21)
   28268:	ac800217 	ldw	r18,8(r21)
   2826c:	8c7fffc4 	addi	r17,r17,-1
   28270:	88000d16 	blt	r17,zero,282a8 <_fwalk+0x80>
   28274:	94000304 	addi	r16,r18,12
   28278:	94800384 	addi	r18,r18,14
   2827c:	80c0000f 	ldh	r3,0(r16)
   28280:	8c7fffc4 	addi	r17,r17,-1
   28284:	813ffd04 	addi	r4,r16,-12
   28288:	18000426 	beq	r3,zero,2829c <_fwalk+0x74>
   2828c:	90c0000f 	ldh	r3,0(r18)
   28290:	1cc00226 	beq	r3,r19,2829c <_fwalk+0x74>
   28294:	a03ee83a 	callr	r20
   28298:	b0acb03a 	or	r22,r22,r2
   2829c:	84001a04 	addi	r16,r16,104
   282a0:	94801a04 	addi	r18,r18,104
   282a4:	8cfff51e 	bne	r17,r19,2827c <__alt_data_end+0xfffe86ac>
   282a8:	ad400017 	ldw	r21,0(r21)
   282ac:	a83fed1e 	bne	r21,zero,28264 <__alt_data_end+0xfffe8694>
   282b0:	00279340 	call	27934 <__sfp_lock_release>
   282b4:	b005883a 	mov	r2,r22
   282b8:	dfc00717 	ldw	ra,28(sp)
   282bc:	dd800617 	ldw	r22,24(sp)
   282c0:	dd400517 	ldw	r21,20(sp)
   282c4:	dd000417 	ldw	r20,16(sp)
   282c8:	dcc00317 	ldw	r19,12(sp)
   282cc:	dc800217 	ldw	r18,8(sp)
   282d0:	dc400117 	ldw	r17,4(sp)
   282d4:	dc000017 	ldw	r16,0(sp)
   282d8:	dec00804 	addi	sp,sp,32
   282dc:	f800283a 	ret

000282e0 <_fwalk_reent>:
   282e0:	defff804 	addi	sp,sp,-32
   282e4:	dd400515 	stw	r21,20(sp)
   282e8:	2540b804 	addi	r21,r4,736
   282ec:	dd800615 	stw	r22,24(sp)
   282f0:	dd000415 	stw	r20,16(sp)
   282f4:	dcc00315 	stw	r19,12(sp)
   282f8:	dfc00715 	stw	ra,28(sp)
   282fc:	dc800215 	stw	r18,8(sp)
   28300:	dc400115 	stw	r17,4(sp)
   28304:	dc000015 	stw	r16,0(sp)
   28308:	2027883a 	mov	r19,r4
   2830c:	2829883a 	mov	r20,r5
   28310:	002d883a 	mov	r22,zero
   28314:	00279300 	call	27930 <__sfp_lock_acquire>
   28318:	a8001326 	beq	r21,zero,28368 <_fwalk_reent+0x88>
   2831c:	04bfffc4 	movi	r18,-1
   28320:	ac400117 	ldw	r17,4(r21)
   28324:	ac000217 	ldw	r16,8(r21)
   28328:	8c7fffc4 	addi	r17,r17,-1
   2832c:	88000c16 	blt	r17,zero,28360 <_fwalk_reent+0x80>
   28330:	84000304 	addi	r16,r16,12
   28334:	80c0000f 	ldh	r3,0(r16)
   28338:	8c7fffc4 	addi	r17,r17,-1
   2833c:	817ffd04 	addi	r5,r16,-12
   28340:	18000526 	beq	r3,zero,28358 <_fwalk_reent+0x78>
   28344:	80c0008f 	ldh	r3,2(r16)
   28348:	9809883a 	mov	r4,r19
   2834c:	1c800226 	beq	r3,r18,28358 <_fwalk_reent+0x78>
   28350:	a03ee83a 	callr	r20
   28354:	b0acb03a 	or	r22,r22,r2
   28358:	84001a04 	addi	r16,r16,104
   2835c:	8cbff51e 	bne	r17,r18,28334 <__alt_data_end+0xfffe8764>
   28360:	ad400017 	ldw	r21,0(r21)
   28364:	a83fee1e 	bne	r21,zero,28320 <__alt_data_end+0xfffe8750>
   28368:	00279340 	call	27934 <__sfp_lock_release>
   2836c:	b005883a 	mov	r2,r22
   28370:	dfc00717 	ldw	ra,28(sp)
   28374:	dd800617 	ldw	r22,24(sp)
   28378:	dd400517 	ldw	r21,20(sp)
   2837c:	dd000417 	ldw	r20,16(sp)
   28380:	dcc00317 	ldw	r19,12(sp)
   28384:	dc800217 	ldw	r18,8(sp)
   28388:	dc400117 	ldw	r17,4(sp)
   2838c:	dc000017 	ldw	r16,0(sp)
   28390:	dec00804 	addi	sp,sp,32
   28394:	f800283a 	ret

00028398 <_setlocale_r>:
   28398:	30001b26 	beq	r6,zero,28408 <_setlocale_r+0x70>
   2839c:	014000f4 	movhi	r5,3
   283a0:	defffe04 	addi	sp,sp,-8
   283a4:	294e4004 	addi	r5,r5,14592
   283a8:	3009883a 	mov	r4,r6
   283ac:	dc000015 	stw	r16,0(sp)
   283b0:	dfc00115 	stw	ra,4(sp)
   283b4:	3021883a 	mov	r16,r6
   283b8:	002a9a80 	call	2a9a8 <strcmp>
   283bc:	1000061e 	bne	r2,zero,283d8 <_setlocale_r+0x40>
   283c0:	008000f4 	movhi	r2,3
   283c4:	108e3f04 	addi	r2,r2,14588
   283c8:	dfc00117 	ldw	ra,4(sp)
   283cc:	dc000017 	ldw	r16,0(sp)
   283d0:	dec00204 	addi	sp,sp,8
   283d4:	f800283a 	ret
   283d8:	014000f4 	movhi	r5,3
   283dc:	294e3f04 	addi	r5,r5,14588
   283e0:	8009883a 	mov	r4,r16
   283e4:	002a9a80 	call	2a9a8 <strcmp>
   283e8:	103ff526 	beq	r2,zero,283c0 <__alt_data_end+0xfffe87f0>
   283ec:	014000f4 	movhi	r5,3
   283f0:	294dbf04 	addi	r5,r5,14076
   283f4:	8009883a 	mov	r4,r16
   283f8:	002a9a80 	call	2a9a8 <strcmp>
   283fc:	103ff026 	beq	r2,zero,283c0 <__alt_data_end+0xfffe87f0>
   28400:	0005883a 	mov	r2,zero
   28404:	003ff006 	br	283c8 <__alt_data_end+0xfffe87f8>
   28408:	008000f4 	movhi	r2,3
   2840c:	108e3f04 	addi	r2,r2,14588
   28410:	f800283a 	ret

00028414 <__locale_charset>:
   28414:	008000f4 	movhi	r2,3
   28418:	108ff804 	addi	r2,r2,16352
   2841c:	f800283a 	ret

00028420 <__locale_mb_cur_max>:
   28420:	008000f4 	movhi	r2,3
   28424:	10959404 	addi	r2,r2,22096
   28428:	10800017 	ldw	r2,0(r2)
   2842c:	f800283a 	ret

00028430 <__locale_msgcharset>:
   28430:	008000f4 	movhi	r2,3
   28434:	108ff004 	addi	r2,r2,16320
   28438:	f800283a 	ret

0002843c <__locale_cjk_lang>:
   2843c:	0005883a 	mov	r2,zero
   28440:	f800283a 	ret

00028444 <_localeconv_r>:
   28444:	008000f4 	movhi	r2,3
   28448:	10900004 	addi	r2,r2,16384
   2844c:	f800283a 	ret

00028450 <setlocale>:
   28450:	00c000f4 	movhi	r3,3
   28454:	18d59304 	addi	r3,r3,22092
   28458:	2005883a 	mov	r2,r4
   2845c:	19000017 	ldw	r4,0(r3)
   28460:	280d883a 	mov	r6,r5
   28464:	100b883a 	mov	r5,r2
   28468:	00283981 	jmpi	28398 <_setlocale_r>

0002846c <localeconv>:
   2846c:	008000f4 	movhi	r2,3
   28470:	10900004 	addi	r2,r2,16384
   28474:	f800283a 	ret

00028478 <__smakebuf_r>:
   28478:	2880030b 	ldhu	r2,12(r5)
   2847c:	10c0008c 	andi	r3,r2,2
   28480:	1800401e 	bne	r3,zero,28584 <__smakebuf_r+0x10c>
   28484:	deffec04 	addi	sp,sp,-80
   28488:	dc000f15 	stw	r16,60(sp)
   2848c:	2821883a 	mov	r16,r5
   28490:	2940038f 	ldh	r5,14(r5)
   28494:	dc401015 	stw	r17,64(sp)
   28498:	dfc01315 	stw	ra,76(sp)
   2849c:	dcc01215 	stw	r19,72(sp)
   284a0:	dc801115 	stw	r18,68(sp)
   284a4:	2023883a 	mov	r17,r4
   284a8:	28001b16 	blt	r5,zero,28518 <__smakebuf_r+0xa0>
   284ac:	d80d883a 	mov	r6,sp
   284b0:	002d5740 	call	2d574 <_fstat_r>
   284b4:	10001716 	blt	r2,zero,28514 <__smakebuf_r+0x9c>
   284b8:	d8800117 	ldw	r2,4(sp)
   284bc:	00e00014 	movui	r3,32768
   284c0:	10bc000c 	andi	r2,r2,61440
   284c4:	10c03726 	beq	r2,r3,285a4 <__smakebuf_r+0x12c>
   284c8:	80c0030b 	ldhu	r3,12(r16)
   284cc:	18c20014 	ori	r3,r3,2048
   284d0:	80c0030d 	sth	r3,12(r16)
   284d4:	00c80004 	movi	r3,8192
   284d8:	10c03c1e 	bne	r2,r3,285cc <__smakebuf_r+0x154>
   284dc:	8140038f 	ldh	r5,14(r16)
   284e0:	8809883a 	mov	r4,r17
   284e4:	002d5cc0 	call	2d5cc <_isatty_r>
   284e8:	10004e26 	beq	r2,zero,28624 <__smakebuf_r+0x1ac>
   284ec:	8080030b 	ldhu	r2,12(r16)
   284f0:	04c00044 	movi	r19,1
   284f4:	80c010c4 	addi	r3,r16,67
   284f8:	14c4b03a 	or	r2,r2,r19
   284fc:	8080030d 	sth	r2,12(r16)
   28500:	80c00015 	stw	r3,0(r16)
   28504:	80c00415 	stw	r3,16(r16)
   28508:	84c00515 	stw	r19,20(r16)
   2850c:	04810004 	movi	r18,1024
   28510:	00000706 	br	28530 <__smakebuf_r+0xb8>
   28514:	8080030b 	ldhu	r2,12(r16)
   28518:	10c0200c 	andi	r3,r2,128
   2851c:	18001f1e 	bne	r3,zero,2859c <__smakebuf_r+0x124>
   28520:	04810004 	movi	r18,1024
   28524:	10820014 	ori	r2,r2,2048
   28528:	8080030d 	sth	r2,12(r16)
   2852c:	0027883a 	mov	r19,zero
   28530:	8809883a 	mov	r4,r17
   28534:	900b883a 	mov	r5,r18
   28538:	00286300 	call	28630 <_malloc_r>
   2853c:	10002e26 	beq	r2,zero,285f8 <__smakebuf_r+0x180>
   28540:	80c0030b 	ldhu	r3,12(r16)
   28544:	010000b4 	movhi	r4,2
   28548:	211d7804 	addi	r4,r4,30176
   2854c:	89000f15 	stw	r4,60(r17)
   28550:	18c02014 	ori	r3,r3,128
   28554:	80c0030d 	sth	r3,12(r16)
   28558:	80800015 	stw	r2,0(r16)
   2855c:	80800415 	stw	r2,16(r16)
   28560:	84800515 	stw	r18,20(r16)
   28564:	98001c1e 	bne	r19,zero,285d8 <__smakebuf_r+0x160>
   28568:	dfc01317 	ldw	ra,76(sp)
   2856c:	dcc01217 	ldw	r19,72(sp)
   28570:	dc801117 	ldw	r18,68(sp)
   28574:	dc401017 	ldw	r17,64(sp)
   28578:	dc000f17 	ldw	r16,60(sp)
   2857c:	dec01404 	addi	sp,sp,80
   28580:	f800283a 	ret
   28584:	288010c4 	addi	r2,r5,67
   28588:	28800015 	stw	r2,0(r5)
   2858c:	28800415 	stw	r2,16(r5)
   28590:	00800044 	movi	r2,1
   28594:	28800515 	stw	r2,20(r5)
   28598:	f800283a 	ret
   2859c:	04801004 	movi	r18,64
   285a0:	003fe006 	br	28524 <__alt_data_end+0xfffe8954>
   285a4:	81000a17 	ldw	r4,40(r16)
   285a8:	00c000f4 	movhi	r3,3
   285ac:	18ea5104 	addi	r3,r3,-22204
   285b0:	20ffc51e 	bne	r4,r3,284c8 <__alt_data_end+0xfffe88f8>
   285b4:	80c0030b 	ldhu	r3,12(r16)
   285b8:	01010004 	movi	r4,1024
   285bc:	81001315 	stw	r4,76(r16)
   285c0:	1906b03a 	or	r3,r3,r4
   285c4:	80c0030d 	sth	r3,12(r16)
   285c8:	003fc206 	br	284d4 <__alt_data_end+0xfffe8904>
   285cc:	0027883a 	mov	r19,zero
   285d0:	04810004 	movi	r18,1024
   285d4:	003fd606 	br	28530 <__alt_data_end+0xfffe8960>
   285d8:	8140038f 	ldh	r5,14(r16)
   285dc:	8809883a 	mov	r4,r17
   285e0:	002d5cc0 	call	2d5cc <_isatty_r>
   285e4:	103fe026 	beq	r2,zero,28568 <__alt_data_end+0xfffe8998>
   285e8:	8080030b 	ldhu	r2,12(r16)
   285ec:	10800054 	ori	r2,r2,1
   285f0:	8080030d 	sth	r2,12(r16)
   285f4:	003fdc06 	br	28568 <__alt_data_end+0xfffe8998>
   285f8:	8080030b 	ldhu	r2,12(r16)
   285fc:	10c0800c 	andi	r3,r2,512
   28600:	183fd91e 	bne	r3,zero,28568 <__alt_data_end+0xfffe8998>
   28604:	10800094 	ori	r2,r2,2
   28608:	80c010c4 	addi	r3,r16,67
   2860c:	8080030d 	sth	r2,12(r16)
   28610:	00800044 	movi	r2,1
   28614:	80c00015 	stw	r3,0(r16)
   28618:	80c00415 	stw	r3,16(r16)
   2861c:	80800515 	stw	r2,20(r16)
   28620:	003fd106 	br	28568 <__alt_data_end+0xfffe8998>
   28624:	04c00044 	movi	r19,1
   28628:	04810004 	movi	r18,1024
   2862c:	003fc006 	br	28530 <__alt_data_end+0xfffe8960>

00028630 <_malloc_r>:
   28630:	defff504 	addi	sp,sp,-44
   28634:	dc800315 	stw	r18,12(sp)
   28638:	dfc00a15 	stw	ra,40(sp)
   2863c:	df000915 	stw	fp,36(sp)
   28640:	ddc00815 	stw	r23,32(sp)
   28644:	dd800715 	stw	r22,28(sp)
   28648:	dd400615 	stw	r21,24(sp)
   2864c:	dd000515 	stw	r20,20(sp)
   28650:	dcc00415 	stw	r19,16(sp)
   28654:	dc400215 	stw	r17,8(sp)
   28658:	dc000115 	stw	r16,4(sp)
   2865c:	288002c4 	addi	r2,r5,11
   28660:	00c00584 	movi	r3,22
   28664:	2025883a 	mov	r18,r4
   28668:	18802a2e 	bgeu	r3,r2,28714 <_malloc_r+0xe4>
   2866c:	047ffe04 	movi	r17,-8
   28670:	1462703a 	and	r17,r2,r17
   28674:	88009e16 	blt	r17,zero,288f0 <_malloc_r+0x2c0>
   28678:	89409d36 	bltu	r17,r5,288f0 <_malloc_r+0x2c0>
   2867c:	00315540 	call	31554 <__malloc_lock>
   28680:	00807dc4 	movi	r2,503
   28684:	14402736 	bltu	r2,r17,28724 <_malloc_r+0xf4>
   28688:	8806d0fa 	srli	r3,r17,3
   2868c:	04c000f4 	movhi	r19,3
   28690:	9cd00e04 	addi	r19,r19,16440
   28694:	18c5883a 	add	r2,r3,r3
   28698:	1085883a 	add	r2,r2,r2
   2869c:	1085883a 	add	r2,r2,r2
   286a0:	9885883a 	add	r2,r19,r2
   286a4:	14000317 	ldw	r16,12(r2)
   286a8:	80814a26 	beq	r16,r2,28bd4 <_malloc_r+0x5a4>
   286ac:	80c00117 	ldw	r3,4(r16)
   286b0:	81000317 	ldw	r4,12(r16)
   286b4:	00bfff04 	movi	r2,-4
   286b8:	1884703a 	and	r2,r3,r2
   286bc:	81400217 	ldw	r5,8(r16)
   286c0:	8085883a 	add	r2,r16,r2
   286c4:	10c00117 	ldw	r3,4(r2)
   286c8:	29000315 	stw	r4,12(r5)
   286cc:	21400215 	stw	r5,8(r4)
   286d0:	18c00054 	ori	r3,r3,1
   286d4:	10c00115 	stw	r3,4(r2)
   286d8:	9009883a 	mov	r4,r18
   286dc:	00315740 	call	31574 <__malloc_unlock>
   286e0:	80800204 	addi	r2,r16,8
   286e4:	dfc00a17 	ldw	ra,40(sp)
   286e8:	df000917 	ldw	fp,36(sp)
   286ec:	ddc00817 	ldw	r23,32(sp)
   286f0:	dd800717 	ldw	r22,28(sp)
   286f4:	dd400617 	ldw	r21,24(sp)
   286f8:	dd000517 	ldw	r20,20(sp)
   286fc:	dcc00417 	ldw	r19,16(sp)
   28700:	dc800317 	ldw	r18,12(sp)
   28704:	dc400217 	ldw	r17,8(sp)
   28708:	dc000117 	ldw	r16,4(sp)
   2870c:	dec00b04 	addi	sp,sp,44
   28710:	f800283a 	ret
   28714:	04400404 	movi	r17,16
   28718:	89407536 	bltu	r17,r5,288f0 <_malloc_r+0x2c0>
   2871c:	00315540 	call	31554 <__malloc_lock>
   28720:	003fd906 	br	28688 <__alt_data_end+0xfffe8ab8>
   28724:	8806d27a 	srli	r3,r17,9
   28728:	18007526 	beq	r3,zero,28900 <_malloc_r+0x2d0>
   2872c:	00800104 	movi	r2,4
   28730:	10c0ef36 	bltu	r2,r3,28af0 <_malloc_r+0x4c0>
   28734:	8806d1ba 	srli	r3,r17,6
   28738:	19c00e04 	addi	r7,r3,56
   2873c:	39cb883a 	add	r5,r7,r7
   28740:	04c000f4 	movhi	r19,3
   28744:	294b883a 	add	r5,r5,r5
   28748:	9cd00e04 	addi	r19,r19,16440
   2874c:	294b883a 	add	r5,r5,r5
   28750:	994b883a 	add	r5,r19,r5
   28754:	2c000317 	ldw	r16,12(r5)
   28758:	2c000e26 	beq	r5,r16,28794 <_malloc_r+0x164>
   2875c:	80800117 	ldw	r2,4(r16)
   28760:	01bfff04 	movi	r6,-4
   28764:	010003c4 	movi	r4,15
   28768:	1184703a 	and	r2,r2,r6
   2876c:	1447c83a 	sub	r3,r2,r17
   28770:	20c00716 	blt	r4,r3,28790 <_malloc_r+0x160>
   28774:	1800650e 	bge	r3,zero,2890c <_malloc_r+0x2dc>
   28778:	84000317 	ldw	r16,12(r16)
   2877c:	2c000526 	beq	r5,r16,28794 <_malloc_r+0x164>
   28780:	80800117 	ldw	r2,4(r16)
   28784:	1184703a 	and	r2,r2,r6
   28788:	1447c83a 	sub	r3,r2,r17
   2878c:	20fff90e 	bge	r4,r3,28774 <__alt_data_end+0xfffe8ba4>
   28790:	39ffffc4 	addi	r7,r7,-1
   28794:	38c00044 	addi	r3,r7,1
   28798:	018000f4 	movhi	r6,3
   2879c:	9c000417 	ldw	r16,16(r19)
   287a0:	31900e04 	addi	r6,r6,16440
   287a4:	32400204 	addi	r9,r6,8
   287a8:	82410326 	beq	r16,r9,28bb8 <_malloc_r+0x588>
   287ac:	81000117 	ldw	r4,4(r16)
   287b0:	00bfff04 	movi	r2,-4
   287b4:	208e703a 	and	r7,r4,r2
   287b8:	3c45c83a 	sub	r2,r7,r17
   287bc:	010003c4 	movi	r4,15
   287c0:	2080ee16 	blt	r4,r2,28b7c <_malloc_r+0x54c>
   287c4:	32400515 	stw	r9,20(r6)
   287c8:	32400415 	stw	r9,16(r6)
   287cc:	1000510e 	bge	r2,zero,28914 <_malloc_r+0x2e4>
   287d0:	00807fc4 	movi	r2,511
   287d4:	11c0ce36 	bltu	r2,r7,28b10 <_malloc_r+0x4e0>
   287d8:	3808d0fa 	srli	r4,r7,3
   287dc:	01c00044 	movi	r7,1
   287e0:	30800117 	ldw	r2,4(r6)
   287e4:	210b883a 	add	r5,r4,r4
   287e8:	294b883a 	add	r5,r5,r5
   287ec:	2009d0ba 	srai	r4,r4,2
   287f0:	294b883a 	add	r5,r5,r5
   287f4:	298b883a 	add	r5,r5,r6
   287f8:	2a000217 	ldw	r8,8(r5)
   287fc:	3908983a 	sll	r4,r7,r4
   28800:	81400315 	stw	r5,12(r16)
   28804:	82000215 	stw	r8,8(r16)
   28808:	2088b03a 	or	r4,r4,r2
   2880c:	2c000215 	stw	r16,8(r5)
   28810:	31000115 	stw	r4,4(r6)
   28814:	44000315 	stw	r16,12(r8)
   28818:	1805d0ba 	srai	r2,r3,2
   2881c:	01400044 	movi	r5,1
   28820:	288a983a 	sll	r5,r5,r2
   28824:	21404336 	bltu	r4,r5,28934 <_malloc_r+0x304>
   28828:	2144703a 	and	r2,r4,r5
   2882c:	10000a1e 	bne	r2,zero,28858 <_malloc_r+0x228>
   28830:	00bfff04 	movi	r2,-4
   28834:	294b883a 	add	r5,r5,r5
   28838:	1886703a 	and	r3,r3,r2
   2883c:	2144703a 	and	r2,r4,r5
   28840:	18c00104 	addi	r3,r3,4
   28844:	1000041e 	bne	r2,zero,28858 <_malloc_r+0x228>
   28848:	294b883a 	add	r5,r5,r5
   2884c:	2144703a 	and	r2,r4,r5
   28850:	18c00104 	addi	r3,r3,4
   28854:	103ffc26 	beq	r2,zero,28848 <__alt_data_end+0xfffe8c78>
   28858:	023fff04 	movi	r8,-4
   2885c:	01c003c4 	movi	r7,15
   28860:	18c5883a 	add	r2,r3,r3
   28864:	1085883a 	add	r2,r2,r2
   28868:	1085883a 	add	r2,r2,r2
   2886c:	9895883a 	add	r10,r19,r2
   28870:	52c00304 	addi	r11,r10,12
   28874:	1819883a 	mov	r12,r3
   28878:	5c000017 	ldw	r16,0(r11)
   2887c:	59bffd04 	addi	r6,r11,-12
   28880:	8180041e 	bne	r16,r6,28894 <_malloc_r+0x264>
   28884:	0000ce06 	br	28bc0 <_malloc_r+0x590>
   28888:	2000d70e 	bge	r4,zero,28be8 <_malloc_r+0x5b8>
   2888c:	84000317 	ldw	r16,12(r16)
   28890:	8180cb26 	beq	r16,r6,28bc0 <_malloc_r+0x590>
   28894:	80800117 	ldw	r2,4(r16)
   28898:	1204703a 	and	r2,r2,r8
   2889c:	1449c83a 	sub	r4,r2,r17
   288a0:	393ff90e 	bge	r7,r4,28888 <__alt_data_end+0xfffe8cb8>
   288a4:	80800317 	ldw	r2,12(r16)
   288a8:	80c00217 	ldw	r3,8(r16)
   288ac:	89400054 	ori	r5,r17,1
   288b0:	81400115 	stw	r5,4(r16)
   288b4:	18800315 	stw	r2,12(r3)
   288b8:	10c00215 	stw	r3,8(r2)
   288bc:	8463883a 	add	r17,r16,r17
   288c0:	9c400515 	stw	r17,20(r19)
   288c4:	9c400415 	stw	r17,16(r19)
   288c8:	20800054 	ori	r2,r4,1
   288cc:	88800115 	stw	r2,4(r17)
   288d0:	8a400315 	stw	r9,12(r17)
   288d4:	8a400215 	stw	r9,8(r17)
   288d8:	8923883a 	add	r17,r17,r4
   288dc:	89000015 	stw	r4,0(r17)
   288e0:	9009883a 	mov	r4,r18
   288e4:	00315740 	call	31574 <__malloc_unlock>
   288e8:	80800204 	addi	r2,r16,8
   288ec:	003f7d06 	br	286e4 <__alt_data_end+0xfffe8b14>
   288f0:	00800304 	movi	r2,12
   288f4:	90800015 	stw	r2,0(r18)
   288f8:	0005883a 	mov	r2,zero
   288fc:	003f7906 	br	286e4 <__alt_data_end+0xfffe8b14>
   28900:	01401f84 	movi	r5,126
   28904:	01c00fc4 	movi	r7,63
   28908:	003f8d06 	br	28740 <__alt_data_end+0xfffe8b70>
   2890c:	81000317 	ldw	r4,12(r16)
   28910:	003f6a06 	br	286bc <__alt_data_end+0xfffe8aec>
   28914:	81c5883a 	add	r2,r16,r7
   28918:	10c00117 	ldw	r3,4(r2)
   2891c:	9009883a 	mov	r4,r18
   28920:	18c00054 	ori	r3,r3,1
   28924:	10c00115 	stw	r3,4(r2)
   28928:	00315740 	call	31574 <__malloc_unlock>
   2892c:	80800204 	addi	r2,r16,8
   28930:	003f6c06 	br	286e4 <__alt_data_end+0xfffe8b14>
   28934:	9c000217 	ldw	r16,8(r19)
   28938:	00bfff04 	movi	r2,-4
   2893c:	85800117 	ldw	r22,4(r16)
   28940:	b0ac703a 	and	r22,r22,r2
   28944:	b4400336 	bltu	r22,r17,28954 <_malloc_r+0x324>
   28948:	b445c83a 	sub	r2,r22,r17
   2894c:	00c003c4 	movi	r3,15
   28950:	18805d16 	blt	r3,r2,28ac8 <_malloc_r+0x498>
   28954:	05c000f4 	movhi	r23,3
   28958:	008000f4 	movhi	r2,3
   2895c:	bdd59504 	addi	r23,r23,22100
   28960:	109c6804 	addi	r2,r2,29088
   28964:	15400017 	ldw	r21,0(r2)
   28968:	b9000017 	ldw	r4,0(r23)
   2896c:	00ffffc4 	movi	r3,-1
   28970:	858d883a 	add	r6,r16,r22
   28974:	8d6b883a 	add	r21,r17,r21
   28978:	20c0e426 	beq	r4,r3,28d0c <_malloc_r+0x6dc>
   2897c:	ad4403c4 	addi	r21,r21,4111
   28980:	00fc0004 	movi	r3,-4096
   28984:	a8ea703a 	and	r21,r21,r3
   28988:	9009883a 	mov	r4,r18
   2898c:	a80b883a 	mov	r5,r21
   28990:	d9800015 	stw	r6,0(sp)
   28994:	002a8180 	call	2a818 <_sbrk_r>
   28998:	00ffffc4 	movi	r3,-1
   2899c:	1029883a 	mov	r20,r2
   289a0:	d9800017 	ldw	r6,0(sp)
   289a4:	10c0a426 	beq	r2,r3,28c38 <_malloc_r+0x608>
   289a8:	1180a236 	bltu	r2,r6,28c34 <_malloc_r+0x604>
   289ac:	070000f4 	movhi	fp,3
   289b0:	e71c7704 	addi	fp,fp,29148
   289b4:	e0c00017 	ldw	r3,0(fp)
   289b8:	a8c7883a 	add	r3,r21,r3
   289bc:	e0c00015 	stw	r3,0(fp)
   289c0:	3500da26 	beq	r6,r20,28d2c <_malloc_r+0x6fc>
   289c4:	b9000017 	ldw	r4,0(r23)
   289c8:	00bfffc4 	movi	r2,-1
   289cc:	2080e426 	beq	r4,r2,28d60 <_malloc_r+0x730>
   289d0:	a185c83a 	sub	r2,r20,r6
   289d4:	1885883a 	add	r2,r3,r2
   289d8:	e0800015 	stw	r2,0(fp)
   289dc:	a0c001cc 	andi	r3,r20,7
   289e0:	1800b526 	beq	r3,zero,28cb8 <_malloc_r+0x688>
   289e4:	a0e9c83a 	sub	r20,r20,r3
   289e8:	00840204 	movi	r2,4104
   289ec:	a5000204 	addi	r20,r20,8
   289f0:	10c7c83a 	sub	r3,r2,r3
   289f4:	a545883a 	add	r2,r20,r21
   289f8:	1083ffcc 	andi	r2,r2,4095
   289fc:	18abc83a 	sub	r21,r3,r2
   28a00:	9009883a 	mov	r4,r18
   28a04:	a80b883a 	mov	r5,r21
   28a08:	002a8180 	call	2a818 <_sbrk_r>
   28a0c:	00ffffc4 	movi	r3,-1
   28a10:	10c0d026 	beq	r2,r3,28d54 <_malloc_r+0x724>
   28a14:	1507c83a 	sub	r3,r2,r20
   28a18:	a8c7883a 	add	r3,r21,r3
   28a1c:	18c00054 	ori	r3,r3,1
   28a20:	e0800017 	ldw	r2,0(fp)
   28a24:	9d000215 	stw	r20,8(r19)
   28a28:	a0c00115 	stw	r3,4(r20)
   28a2c:	a887883a 	add	r3,r21,r2
   28a30:	e0c00015 	stw	r3,0(fp)
   28a34:	84c00e26 	beq	r16,r19,28a70 <_malloc_r+0x440>
   28a38:	018003c4 	movi	r6,15
   28a3c:	3580a02e 	bgeu	r6,r22,28cc0 <_malloc_r+0x690>
   28a40:	81400117 	ldw	r5,4(r16)
   28a44:	013ffe04 	movi	r4,-8
   28a48:	b0bffd04 	addi	r2,r22,-12
   28a4c:	1104703a 	and	r2,r2,r4
   28a50:	2900004c 	andi	r4,r5,1
   28a54:	1108b03a 	or	r4,r2,r4
   28a58:	81000115 	stw	r4,4(r16)
   28a5c:	01400144 	movi	r5,5
   28a60:	8089883a 	add	r4,r16,r2
   28a64:	21400115 	stw	r5,4(r4)
   28a68:	21400215 	stw	r5,8(r4)
   28a6c:	3080c036 	bltu	r6,r2,28d70 <_malloc_r+0x740>
   28a70:	008000f4 	movhi	r2,3
   28a74:	109c6704 	addi	r2,r2,29084
   28a78:	11000017 	ldw	r4,0(r2)
   28a7c:	20c0012e 	bgeu	r4,r3,28a84 <_malloc_r+0x454>
   28a80:	10c00015 	stw	r3,0(r2)
   28a84:	008000f4 	movhi	r2,3
   28a88:	109c6604 	addi	r2,r2,29080
   28a8c:	11000017 	ldw	r4,0(r2)
   28a90:	9c000217 	ldw	r16,8(r19)
   28a94:	20c0012e 	bgeu	r4,r3,28a9c <_malloc_r+0x46c>
   28a98:	10c00015 	stw	r3,0(r2)
   28a9c:	80c00117 	ldw	r3,4(r16)
   28aa0:	00bfff04 	movi	r2,-4
   28aa4:	1886703a 	and	r3,r3,r2
   28aa8:	1c45c83a 	sub	r2,r3,r17
   28aac:	1c400236 	bltu	r3,r17,28ab8 <_malloc_r+0x488>
   28ab0:	00c003c4 	movi	r3,15
   28ab4:	18800416 	blt	r3,r2,28ac8 <_malloc_r+0x498>
   28ab8:	9009883a 	mov	r4,r18
   28abc:	00315740 	call	31574 <__malloc_unlock>
   28ac0:	0005883a 	mov	r2,zero
   28ac4:	003f0706 	br	286e4 <__alt_data_end+0xfffe8b14>
   28ac8:	88c00054 	ori	r3,r17,1
   28acc:	80c00115 	stw	r3,4(r16)
   28ad0:	8463883a 	add	r17,r16,r17
   28ad4:	10800054 	ori	r2,r2,1
   28ad8:	9c400215 	stw	r17,8(r19)
   28adc:	88800115 	stw	r2,4(r17)
   28ae0:	9009883a 	mov	r4,r18
   28ae4:	00315740 	call	31574 <__malloc_unlock>
   28ae8:	80800204 	addi	r2,r16,8
   28aec:	003efd06 	br	286e4 <__alt_data_end+0xfffe8b14>
   28af0:	00800504 	movi	r2,20
   28af4:	10c0482e 	bgeu	r2,r3,28c18 <_malloc_r+0x5e8>
   28af8:	00801504 	movi	r2,84
   28afc:	10c06836 	bltu	r2,r3,28ca0 <_malloc_r+0x670>
   28b00:	8806d33a 	srli	r3,r17,12
   28b04:	19c01b84 	addi	r7,r3,110
   28b08:	39cb883a 	add	r5,r7,r7
   28b0c:	003f0c06 	br	28740 <__alt_data_end+0xfffe8b70>
   28b10:	3804d27a 	srli	r2,r7,9
   28b14:	01000104 	movi	r4,4
   28b18:	2080422e 	bgeu	r4,r2,28c24 <_malloc_r+0x5f4>
   28b1c:	01000504 	movi	r4,20
   28b20:	20807c36 	bltu	r4,r2,28d14 <_malloc_r+0x6e4>
   28b24:	110016c4 	addi	r4,r2,91
   28b28:	210b883a 	add	r5,r4,r4
   28b2c:	294b883a 	add	r5,r5,r5
   28b30:	294b883a 	add	r5,r5,r5
   28b34:	994b883a 	add	r5,r19,r5
   28b38:	28800217 	ldw	r2,8(r5)
   28b3c:	020000f4 	movhi	r8,3
   28b40:	42100e04 	addi	r8,r8,16440
   28b44:	11406326 	beq	r2,r5,28cd4 <_malloc_r+0x6a4>
   28b48:	01bfff04 	movi	r6,-4
   28b4c:	11000117 	ldw	r4,4(r2)
   28b50:	2188703a 	and	r4,r4,r6
   28b54:	3900022e 	bgeu	r7,r4,28b60 <_malloc_r+0x530>
   28b58:	10800217 	ldw	r2,8(r2)
   28b5c:	28bffb1e 	bne	r5,r2,28b4c <__alt_data_end+0xfffe8f7c>
   28b60:	11800317 	ldw	r6,12(r2)
   28b64:	99000117 	ldw	r4,4(r19)
   28b68:	81800315 	stw	r6,12(r16)
   28b6c:	80800215 	stw	r2,8(r16)
   28b70:	34000215 	stw	r16,8(r6)
   28b74:	14000315 	stw	r16,12(r2)
   28b78:	003f2706 	br	28818 <__alt_data_end+0xfffe8c48>
   28b7c:	88c00054 	ori	r3,r17,1
   28b80:	80c00115 	stw	r3,4(r16)
   28b84:	8463883a 	add	r17,r16,r17
   28b88:	34400515 	stw	r17,20(r6)
   28b8c:	34400415 	stw	r17,16(r6)
   28b90:	10c00054 	ori	r3,r2,1
   28b94:	8a400315 	stw	r9,12(r17)
   28b98:	8a400215 	stw	r9,8(r17)
   28b9c:	88c00115 	stw	r3,4(r17)
   28ba0:	88a3883a 	add	r17,r17,r2
   28ba4:	88800015 	stw	r2,0(r17)
   28ba8:	9009883a 	mov	r4,r18
   28bac:	00315740 	call	31574 <__malloc_unlock>
   28bb0:	80800204 	addi	r2,r16,8
   28bb4:	003ecb06 	br	286e4 <__alt_data_end+0xfffe8b14>
   28bb8:	31000117 	ldw	r4,4(r6)
   28bbc:	003f1606 	br	28818 <__alt_data_end+0xfffe8c48>
   28bc0:	63000044 	addi	r12,r12,1
   28bc4:	608000cc 	andi	r2,r12,3
   28bc8:	5ac00204 	addi	r11,r11,8
   28bcc:	103f2a1e 	bne	r2,zero,28878 <__alt_data_end+0xfffe8ca8>
   28bd0:	00002106 	br	28c58 <_malloc_r+0x628>
   28bd4:	80800204 	addi	r2,r16,8
   28bd8:	84000517 	ldw	r16,20(r16)
   28bdc:	143eb31e 	bne	r2,r16,286ac <__alt_data_end+0xfffe8adc>
   28be0:	18c00084 	addi	r3,r3,2
   28be4:	003eec06 	br	28798 <__alt_data_end+0xfffe8bc8>
   28be8:	8085883a 	add	r2,r16,r2
   28bec:	10c00117 	ldw	r3,4(r2)
   28bf0:	81000317 	ldw	r4,12(r16)
   28bf4:	81400217 	ldw	r5,8(r16)
   28bf8:	18c00054 	ori	r3,r3,1
   28bfc:	10c00115 	stw	r3,4(r2)
   28c00:	29000315 	stw	r4,12(r5)
   28c04:	21400215 	stw	r5,8(r4)
   28c08:	9009883a 	mov	r4,r18
   28c0c:	00315740 	call	31574 <__malloc_unlock>
   28c10:	80800204 	addi	r2,r16,8
   28c14:	003eb306 	br	286e4 <__alt_data_end+0xfffe8b14>
   28c18:	19c016c4 	addi	r7,r3,91
   28c1c:	39cb883a 	add	r5,r7,r7
   28c20:	003ec706 	br	28740 <__alt_data_end+0xfffe8b70>
   28c24:	3804d1ba 	srli	r2,r7,6
   28c28:	11000e04 	addi	r4,r2,56
   28c2c:	210b883a 	add	r5,r4,r4
   28c30:	003fbe06 	br	28b2c <__alt_data_end+0xfffe8f5c>
   28c34:	84ff5d26 	beq	r16,r19,289ac <__alt_data_end+0xfffe8ddc>
   28c38:	9c000217 	ldw	r16,8(r19)
   28c3c:	00bfff04 	movi	r2,-4
   28c40:	80c00117 	ldw	r3,4(r16)
   28c44:	1886703a 	and	r3,r3,r2
   28c48:	003f9706 	br	28aa8 <__alt_data_end+0xfffe8ed8>
   28c4c:	52800017 	ldw	r10,0(r10)
   28c50:	18ffffc4 	addi	r3,r3,-1
   28c54:	50805c1e 	bne	r10,r2,28dc8 <_malloc_r+0x798>
   28c58:	190000cc 	andi	r4,r3,3
   28c5c:	50bffe04 	addi	r2,r10,-8
   28c60:	203ffa1e 	bne	r4,zero,28c4c <__alt_data_end+0xfffe907c>
   28c64:	98800117 	ldw	r2,4(r19)
   28c68:	0146303a 	nor	r3,zero,r5
   28c6c:	1884703a 	and	r2,r3,r2
   28c70:	98800115 	stw	r2,4(r19)
   28c74:	294b883a 	add	r5,r5,r5
   28c78:	117f2e36 	bltu	r2,r5,28934 <__alt_data_end+0xfffe8d64>
   28c7c:	283f2d26 	beq	r5,zero,28934 <__alt_data_end+0xfffe8d64>
   28c80:	1146703a 	and	r3,r2,r5
   28c84:	1800521e 	bne	r3,zero,28dd0 <_malloc_r+0x7a0>
   28c88:	6007883a 	mov	r3,r12
   28c8c:	294b883a 	add	r5,r5,r5
   28c90:	1148703a 	and	r4,r2,r5
   28c94:	18c00104 	addi	r3,r3,4
   28c98:	203ffc26 	beq	r4,zero,28c8c <__alt_data_end+0xfffe90bc>
   28c9c:	003ef006 	br	28860 <__alt_data_end+0xfffe8c90>
   28ca0:	00805504 	movi	r2,340
   28ca4:	10c01336 	bltu	r2,r3,28cf4 <_malloc_r+0x6c4>
   28ca8:	8806d3fa 	srli	r3,r17,15
   28cac:	19c01dc4 	addi	r7,r3,119
   28cb0:	39cb883a 	add	r5,r7,r7
   28cb4:	003ea206 	br	28740 <__alt_data_end+0xfffe8b70>
   28cb8:	00c40004 	movi	r3,4096
   28cbc:	003f4d06 	br	289f4 <__alt_data_end+0xfffe8e24>
   28cc0:	00800044 	movi	r2,1
   28cc4:	a0800115 	stw	r2,4(r20)
   28cc8:	a021883a 	mov	r16,r20
   28ccc:	0007883a 	mov	r3,zero
   28cd0:	003f7506 	br	28aa8 <__alt_data_end+0xfffe8ed8>
   28cd4:	200bd0ba 	srai	r5,r4,2
   28cd8:	01800044 	movi	r6,1
   28cdc:	41000117 	ldw	r4,4(r8)
   28ce0:	314a983a 	sll	r5,r6,r5
   28ce4:	100d883a 	mov	r6,r2
   28ce8:	2908b03a 	or	r4,r5,r4
   28cec:	41000115 	stw	r4,4(r8)
   28cf0:	003f9d06 	br	28b68 <__alt_data_end+0xfffe8f98>
   28cf4:	00815504 	movi	r2,1364
   28cf8:	10c01336 	bltu	r2,r3,28d48 <_malloc_r+0x718>
   28cfc:	8806d4ba 	srli	r3,r17,18
   28d00:	19c01f04 	addi	r7,r3,124
   28d04:	39cb883a 	add	r5,r7,r7
   28d08:	003e8d06 	br	28740 <__alt_data_end+0xfffe8b70>
   28d0c:	ad400404 	addi	r21,r21,16
   28d10:	003f1d06 	br	28988 <__alt_data_end+0xfffe8db8>
   28d14:	01001504 	movi	r4,84
   28d18:	20801c36 	bltu	r4,r2,28d8c <_malloc_r+0x75c>
   28d1c:	3804d33a 	srli	r2,r7,12
   28d20:	11001b84 	addi	r4,r2,110
   28d24:	210b883a 	add	r5,r4,r4
   28d28:	003f8006 	br	28b2c <__alt_data_end+0xfffe8f5c>
   28d2c:	3083ffcc 	andi	r2,r6,4095
   28d30:	103f241e 	bne	r2,zero,289c4 <__alt_data_end+0xfffe8df4>
   28d34:	99000217 	ldw	r4,8(r19)
   28d38:	ad85883a 	add	r2,r21,r22
   28d3c:	10800054 	ori	r2,r2,1
   28d40:	20800115 	stw	r2,4(r4)
   28d44:	003f4a06 	br	28a70 <__alt_data_end+0xfffe8ea0>
   28d48:	01403f04 	movi	r5,252
   28d4c:	01c01f84 	movi	r7,126
   28d50:	003e7b06 	br	28740 <__alt_data_end+0xfffe8b70>
   28d54:	00c00044 	movi	r3,1
   28d58:	002b883a 	mov	r21,zero
   28d5c:	003f3006 	br	28a20 <__alt_data_end+0xfffe8e50>
   28d60:	008000f4 	movhi	r2,3
   28d64:	10959504 	addi	r2,r2,22100
   28d68:	15000015 	stw	r20,0(r2)
   28d6c:	003f1b06 	br	289dc <__alt_data_end+0xfffe8e0c>
   28d70:	9009883a 	mov	r4,r18
   28d74:	81400204 	addi	r5,r16,8
   28d78:	0027a940 	call	27a94 <_free_r>
   28d7c:	008000f4 	movhi	r2,3
   28d80:	109c7704 	addi	r2,r2,29148
   28d84:	10c00017 	ldw	r3,0(r2)
   28d88:	003f3906 	br	28a70 <__alt_data_end+0xfffe8ea0>
   28d8c:	01005504 	movi	r4,340
   28d90:	20800436 	bltu	r4,r2,28da4 <_malloc_r+0x774>
   28d94:	3804d3fa 	srli	r2,r7,15
   28d98:	11001dc4 	addi	r4,r2,119
   28d9c:	210b883a 	add	r5,r4,r4
   28da0:	003f6206 	br	28b2c <__alt_data_end+0xfffe8f5c>
   28da4:	01015504 	movi	r4,1364
   28da8:	20800436 	bltu	r4,r2,28dbc <_malloc_r+0x78c>
   28dac:	3804d4ba 	srli	r2,r7,18
   28db0:	11001f04 	addi	r4,r2,124
   28db4:	210b883a 	add	r5,r4,r4
   28db8:	003f5c06 	br	28b2c <__alt_data_end+0xfffe8f5c>
   28dbc:	01403f04 	movi	r5,252
   28dc0:	01001f84 	movi	r4,126
   28dc4:	003f5906 	br	28b2c <__alt_data_end+0xfffe8f5c>
   28dc8:	98800117 	ldw	r2,4(r19)
   28dcc:	003fa906 	br	28c74 <__alt_data_end+0xfffe90a4>
   28dd0:	6007883a 	mov	r3,r12
   28dd4:	003ea206 	br	28860 <__alt_data_end+0xfffe8c90>

00028dd8 <memchr>:
   28dd8:	208000cc 	andi	r2,r4,3
   28ddc:	280f883a 	mov	r7,r5
   28de0:	10003526 	beq	r2,zero,28eb8 <memchr+0xe0>
   28de4:	30bfffc4 	addi	r2,r6,-1
   28de8:	30001b26 	beq	r6,zero,28e58 <memchr+0x80>
   28dec:	21800003 	ldbu	r6,0(r4)
   28df0:	28c03fcc 	andi	r3,r5,255
   28df4:	30c01a26 	beq	r6,r3,28e60 <memchr+0x88>
   28df8:	180d883a 	mov	r6,r3
   28dfc:	00000406 	br	28e10 <memchr+0x38>
   28e00:	10001526 	beq	r2,zero,28e58 <memchr+0x80>
   28e04:	20c00003 	ldbu	r3,0(r4)
   28e08:	10bfffc4 	addi	r2,r2,-1
   28e0c:	19801426 	beq	r3,r6,28e60 <memchr+0x88>
   28e10:	21000044 	addi	r4,r4,1
   28e14:	20c000cc 	andi	r3,r4,3
   28e18:	183ff91e 	bne	r3,zero,28e00 <__alt_data_end+0xfffe9230>
   28e1c:	024000c4 	movi	r9,3
   28e20:	48801136 	bltu	r9,r2,28e68 <memchr+0x90>
   28e24:	10000c26 	beq	r2,zero,28e58 <memchr+0x80>
   28e28:	20c00003 	ldbu	r3,0(r4)
   28e2c:	29403fcc 	andi	r5,r5,255
   28e30:	19400b26 	beq	r3,r5,28e60 <memchr+0x88>
   28e34:	20c00044 	addi	r3,r4,1
   28e38:	2085883a 	add	r2,r4,r2
   28e3c:	39803fcc 	andi	r6,r7,255
   28e40:	00000306 	br	28e50 <memchr+0x78>
   28e44:	18c00044 	addi	r3,r3,1
   28e48:	197fffc3 	ldbu	r5,-1(r3)
   28e4c:	29800426 	beq	r5,r6,28e60 <memchr+0x88>
   28e50:	1809883a 	mov	r4,r3
   28e54:	18bffb1e 	bne	r3,r2,28e44 <__alt_data_end+0xfffe9274>
   28e58:	0005883a 	mov	r2,zero
   28e5c:	f800283a 	ret
   28e60:	2005883a 	mov	r2,r4
   28e64:	f800283a 	ret
   28e68:	28c03fcc 	andi	r3,r5,255
   28e6c:	1810923a 	slli	r8,r3,8
   28e70:	02ffbff4 	movhi	r11,65279
   28e74:	02a02074 	movhi	r10,32897
   28e78:	40c6b03a 	or	r3,r8,r3
   28e7c:	1810943a 	slli	r8,r3,16
   28e80:	5affbfc4 	addi	r11,r11,-257
   28e84:	52a02004 	addi	r10,r10,-32640
   28e88:	40d0b03a 	or	r8,r8,r3
   28e8c:	20c00017 	ldw	r3,0(r4)
   28e90:	40c6f03a 	xor	r3,r8,r3
   28e94:	1acd883a 	add	r6,r3,r11
   28e98:	00c6303a 	nor	r3,zero,r3
   28e9c:	30c6703a 	and	r3,r6,r3
   28ea0:	1a86703a 	and	r3,r3,r10
   28ea4:	183fdf1e 	bne	r3,zero,28e24 <__alt_data_end+0xfffe9254>
   28ea8:	10bfff04 	addi	r2,r2,-4
   28eac:	21000104 	addi	r4,r4,4
   28eb0:	48bff636 	bltu	r9,r2,28e8c <__alt_data_end+0xfffe92bc>
   28eb4:	003fdb06 	br	28e24 <__alt_data_end+0xfffe9254>
   28eb8:	3005883a 	mov	r2,r6
   28ebc:	003fd706 	br	28e1c <__alt_data_end+0xfffe924c>

00028ec0 <memcpy>:
   28ec0:	deffff04 	addi	sp,sp,-4
   28ec4:	dc000015 	stw	r16,0(sp)
   28ec8:	00c003c4 	movi	r3,15
   28ecc:	2005883a 	mov	r2,r4
   28ed0:	1980432e 	bgeu	r3,r6,28fe0 <memcpy+0x120>
   28ed4:	2146b03a 	or	r3,r4,r5
   28ed8:	18c000cc 	andi	r3,r3,3
   28edc:	1800421e 	bne	r3,zero,28fe8 <memcpy+0x128>
   28ee0:	343ffc04 	addi	r16,r6,-16
   28ee4:	8020d13a 	srli	r16,r16,4
   28ee8:	28c00104 	addi	r3,r5,4
   28eec:	23400104 	addi	r13,r4,4
   28ef0:	801e913a 	slli	r15,r16,4
   28ef4:	2b000204 	addi	r12,r5,8
   28ef8:	22c00204 	addi	r11,r4,8
   28efc:	7bc00504 	addi	r15,r15,20
   28f00:	2a800304 	addi	r10,r5,12
   28f04:	22400304 	addi	r9,r4,12
   28f08:	2bdf883a 	add	r15,r5,r15
   28f0c:	2811883a 	mov	r8,r5
   28f10:	200f883a 	mov	r7,r4
   28f14:	41000017 	ldw	r4,0(r8)
   28f18:	39c00404 	addi	r7,r7,16
   28f1c:	18c00404 	addi	r3,r3,16
   28f20:	393ffc15 	stw	r4,-16(r7)
   28f24:	1bbffc17 	ldw	r14,-16(r3)
   28f28:	6b400404 	addi	r13,r13,16
   28f2c:	5ac00404 	addi	r11,r11,16
   28f30:	6bbffc15 	stw	r14,-16(r13)
   28f34:	63800017 	ldw	r14,0(r12)
   28f38:	4a400404 	addi	r9,r9,16
   28f3c:	42000404 	addi	r8,r8,16
   28f40:	5bbffc15 	stw	r14,-16(r11)
   28f44:	53800017 	ldw	r14,0(r10)
   28f48:	63000404 	addi	r12,r12,16
   28f4c:	52800404 	addi	r10,r10,16
   28f50:	4bbffc15 	stw	r14,-16(r9)
   28f54:	1bffef1e 	bne	r3,r15,28f14 <__alt_data_end+0xfffe9344>
   28f58:	81c00044 	addi	r7,r16,1
   28f5c:	380e913a 	slli	r7,r7,4
   28f60:	310003cc 	andi	r4,r6,15
   28f64:	02c000c4 	movi	r11,3
   28f68:	11c7883a 	add	r3,r2,r7
   28f6c:	29cb883a 	add	r5,r5,r7
   28f70:	59001f2e 	bgeu	r11,r4,28ff0 <memcpy+0x130>
   28f74:	1813883a 	mov	r9,r3
   28f78:	2811883a 	mov	r8,r5
   28f7c:	200f883a 	mov	r7,r4
   28f80:	42800017 	ldw	r10,0(r8)
   28f84:	4a400104 	addi	r9,r9,4
   28f88:	39ffff04 	addi	r7,r7,-4
   28f8c:	4abfff15 	stw	r10,-4(r9)
   28f90:	42000104 	addi	r8,r8,4
   28f94:	59fffa36 	bltu	r11,r7,28f80 <__alt_data_end+0xfffe93b0>
   28f98:	213fff04 	addi	r4,r4,-4
   28f9c:	2008d0ba 	srli	r4,r4,2
   28fa0:	318000cc 	andi	r6,r6,3
   28fa4:	21000044 	addi	r4,r4,1
   28fa8:	2109883a 	add	r4,r4,r4
   28fac:	2109883a 	add	r4,r4,r4
   28fb0:	1907883a 	add	r3,r3,r4
   28fb4:	290b883a 	add	r5,r5,r4
   28fb8:	30000626 	beq	r6,zero,28fd4 <memcpy+0x114>
   28fbc:	198d883a 	add	r6,r3,r6
   28fc0:	29c00003 	ldbu	r7,0(r5)
   28fc4:	18c00044 	addi	r3,r3,1
   28fc8:	29400044 	addi	r5,r5,1
   28fcc:	19ffffc5 	stb	r7,-1(r3)
   28fd0:	19bffb1e 	bne	r3,r6,28fc0 <__alt_data_end+0xfffe93f0>
   28fd4:	dc000017 	ldw	r16,0(sp)
   28fd8:	dec00104 	addi	sp,sp,4
   28fdc:	f800283a 	ret
   28fe0:	2007883a 	mov	r3,r4
   28fe4:	003ff406 	br	28fb8 <__alt_data_end+0xfffe93e8>
   28fe8:	2007883a 	mov	r3,r4
   28fec:	003ff306 	br	28fbc <__alt_data_end+0xfffe93ec>
   28ff0:	200d883a 	mov	r6,r4
   28ff4:	003ff006 	br	28fb8 <__alt_data_end+0xfffe93e8>

00028ff8 <memmove>:
   28ff8:	2005883a 	mov	r2,r4
   28ffc:	29000b2e 	bgeu	r5,r4,2902c <memmove+0x34>
   29000:	298f883a 	add	r7,r5,r6
   29004:	21c0092e 	bgeu	r4,r7,2902c <memmove+0x34>
   29008:	2187883a 	add	r3,r4,r6
   2900c:	198bc83a 	sub	r5,r3,r6
   29010:	30004b26 	beq	r6,zero,29140 <memmove+0x148>
   29014:	39ffffc4 	addi	r7,r7,-1
   29018:	39000003 	ldbu	r4,0(r7)
   2901c:	18ffffc4 	addi	r3,r3,-1
   29020:	19000005 	stb	r4,0(r3)
   29024:	197ffb1e 	bne	r3,r5,29014 <__alt_data_end+0xfffe9444>
   29028:	f800283a 	ret
   2902c:	00c003c4 	movi	r3,15
   29030:	1980412e 	bgeu	r3,r6,29138 <memmove+0x140>
   29034:	1146b03a 	or	r3,r2,r5
   29038:	18c000cc 	andi	r3,r3,3
   2903c:	1800411e 	bne	r3,zero,29144 <memmove+0x14c>
   29040:	33fffc04 	addi	r15,r6,-16
   29044:	781ed13a 	srli	r15,r15,4
   29048:	28c00104 	addi	r3,r5,4
   2904c:	13400104 	addi	r13,r2,4
   29050:	781c913a 	slli	r14,r15,4
   29054:	2b000204 	addi	r12,r5,8
   29058:	12c00204 	addi	r11,r2,8
   2905c:	73800504 	addi	r14,r14,20
   29060:	2a800304 	addi	r10,r5,12
   29064:	12400304 	addi	r9,r2,12
   29068:	2b9d883a 	add	r14,r5,r14
   2906c:	2811883a 	mov	r8,r5
   29070:	100f883a 	mov	r7,r2
   29074:	41000017 	ldw	r4,0(r8)
   29078:	39c00404 	addi	r7,r7,16
   2907c:	18c00404 	addi	r3,r3,16
   29080:	393ffc15 	stw	r4,-16(r7)
   29084:	193ffc17 	ldw	r4,-16(r3)
   29088:	6b400404 	addi	r13,r13,16
   2908c:	5ac00404 	addi	r11,r11,16
   29090:	693ffc15 	stw	r4,-16(r13)
   29094:	61000017 	ldw	r4,0(r12)
   29098:	4a400404 	addi	r9,r9,16
   2909c:	42000404 	addi	r8,r8,16
   290a0:	593ffc15 	stw	r4,-16(r11)
   290a4:	51000017 	ldw	r4,0(r10)
   290a8:	63000404 	addi	r12,r12,16
   290ac:	52800404 	addi	r10,r10,16
   290b0:	493ffc15 	stw	r4,-16(r9)
   290b4:	1bbfef1e 	bne	r3,r14,29074 <__alt_data_end+0xfffe94a4>
   290b8:	79000044 	addi	r4,r15,1
   290bc:	2008913a 	slli	r4,r4,4
   290c0:	328003cc 	andi	r10,r6,15
   290c4:	02c000c4 	movi	r11,3
   290c8:	1107883a 	add	r3,r2,r4
   290cc:	290b883a 	add	r5,r5,r4
   290d0:	5a801e2e 	bgeu	r11,r10,2914c <memmove+0x154>
   290d4:	1813883a 	mov	r9,r3
   290d8:	2811883a 	mov	r8,r5
   290dc:	500f883a 	mov	r7,r10
   290e0:	41000017 	ldw	r4,0(r8)
   290e4:	4a400104 	addi	r9,r9,4
   290e8:	39ffff04 	addi	r7,r7,-4
   290ec:	493fff15 	stw	r4,-4(r9)
   290f0:	42000104 	addi	r8,r8,4
   290f4:	59fffa36 	bltu	r11,r7,290e0 <__alt_data_end+0xfffe9510>
   290f8:	513fff04 	addi	r4,r10,-4
   290fc:	2008d0ba 	srli	r4,r4,2
   29100:	318000cc 	andi	r6,r6,3
   29104:	21000044 	addi	r4,r4,1
   29108:	2109883a 	add	r4,r4,r4
   2910c:	2109883a 	add	r4,r4,r4
   29110:	1907883a 	add	r3,r3,r4
   29114:	290b883a 	add	r5,r5,r4
   29118:	30000926 	beq	r6,zero,29140 <memmove+0x148>
   2911c:	198d883a 	add	r6,r3,r6
   29120:	29c00003 	ldbu	r7,0(r5)
   29124:	18c00044 	addi	r3,r3,1
   29128:	29400044 	addi	r5,r5,1
   2912c:	19ffffc5 	stb	r7,-1(r3)
   29130:	19bffb1e 	bne	r3,r6,29120 <__alt_data_end+0xfffe9550>
   29134:	f800283a 	ret
   29138:	1007883a 	mov	r3,r2
   2913c:	003ff606 	br	29118 <__alt_data_end+0xfffe9548>
   29140:	f800283a 	ret
   29144:	1007883a 	mov	r3,r2
   29148:	003ff406 	br	2911c <__alt_data_end+0xfffe954c>
   2914c:	500d883a 	mov	r6,r10
   29150:	003ff106 	br	29118 <__alt_data_end+0xfffe9548>

00029154 <memset>:
   29154:	20c000cc 	andi	r3,r4,3
   29158:	2005883a 	mov	r2,r4
   2915c:	18004326 	beq	r3,zero,2926c <memset+0x118>
   29160:	31ffffc4 	addi	r7,r6,-1
   29164:	30004026 	beq	r6,zero,29268 <memset+0x114>
   29168:	2813883a 	mov	r9,r5
   2916c:	200d883a 	mov	r6,r4
   29170:	2007883a 	mov	r3,r4
   29174:	00000406 	br	29188 <memset+0x34>
   29178:	3a3fffc4 	addi	r8,r7,-1
   2917c:	31800044 	addi	r6,r6,1
   29180:	38003926 	beq	r7,zero,29268 <memset+0x114>
   29184:	400f883a 	mov	r7,r8
   29188:	18c00044 	addi	r3,r3,1
   2918c:	32400005 	stb	r9,0(r6)
   29190:	1a0000cc 	andi	r8,r3,3
   29194:	403ff81e 	bne	r8,zero,29178 <__alt_data_end+0xfffe95a8>
   29198:	010000c4 	movi	r4,3
   2919c:	21c02d2e 	bgeu	r4,r7,29254 <memset+0x100>
   291a0:	29803fcc 	andi	r6,r5,255
   291a4:	3008923a 	slli	r4,r6,8
   291a8:	218cb03a 	or	r6,r4,r6
   291ac:	3008943a 	slli	r4,r6,16
   291b0:	218cb03a 	or	r6,r4,r6
   291b4:	010003c4 	movi	r4,15
   291b8:	21c0182e 	bgeu	r4,r7,2921c <memset+0xc8>
   291bc:	3b3ffc04 	addi	r12,r7,-16
   291c0:	6018d13a 	srli	r12,r12,4
   291c4:	1a000104 	addi	r8,r3,4
   291c8:	1ac00204 	addi	r11,r3,8
   291cc:	6008913a 	slli	r4,r12,4
   291d0:	1a800304 	addi	r10,r3,12
   291d4:	1813883a 	mov	r9,r3
   291d8:	21000504 	addi	r4,r4,20
   291dc:	1909883a 	add	r4,r3,r4
   291e0:	49800015 	stw	r6,0(r9)
   291e4:	41800015 	stw	r6,0(r8)
   291e8:	59800015 	stw	r6,0(r11)
   291ec:	51800015 	stw	r6,0(r10)
   291f0:	42000404 	addi	r8,r8,16
   291f4:	4a400404 	addi	r9,r9,16
   291f8:	5ac00404 	addi	r11,r11,16
   291fc:	52800404 	addi	r10,r10,16
   29200:	413ff71e 	bne	r8,r4,291e0 <__alt_data_end+0xfffe9610>
   29204:	63000044 	addi	r12,r12,1
   29208:	6018913a 	slli	r12,r12,4
   2920c:	39c003cc 	andi	r7,r7,15
   29210:	010000c4 	movi	r4,3
   29214:	1b07883a 	add	r3,r3,r12
   29218:	21c00e2e 	bgeu	r4,r7,29254 <memset+0x100>
   2921c:	1813883a 	mov	r9,r3
   29220:	3811883a 	mov	r8,r7
   29224:	010000c4 	movi	r4,3
   29228:	49800015 	stw	r6,0(r9)
   2922c:	423fff04 	addi	r8,r8,-4
   29230:	4a400104 	addi	r9,r9,4
   29234:	223ffc36 	bltu	r4,r8,29228 <__alt_data_end+0xfffe9658>
   29238:	393fff04 	addi	r4,r7,-4
   2923c:	2008d0ba 	srli	r4,r4,2
   29240:	39c000cc 	andi	r7,r7,3
   29244:	21000044 	addi	r4,r4,1
   29248:	2109883a 	add	r4,r4,r4
   2924c:	2109883a 	add	r4,r4,r4
   29250:	1907883a 	add	r3,r3,r4
   29254:	38000426 	beq	r7,zero,29268 <memset+0x114>
   29258:	19cf883a 	add	r7,r3,r7
   2925c:	19400005 	stb	r5,0(r3)
   29260:	18c00044 	addi	r3,r3,1
   29264:	19fffd1e 	bne	r3,r7,2925c <__alt_data_end+0xfffe968c>
   29268:	f800283a 	ret
   2926c:	2007883a 	mov	r3,r4
   29270:	300f883a 	mov	r7,r6
   29274:	003fc806 	br	29198 <__alt_data_end+0xfffe95c8>

00029278 <_Balloc>:
   29278:	20801317 	ldw	r2,76(r4)
   2927c:	defffc04 	addi	sp,sp,-16
   29280:	dc400115 	stw	r17,4(sp)
   29284:	dc000015 	stw	r16,0(sp)
   29288:	dfc00315 	stw	ra,12(sp)
   2928c:	dc800215 	stw	r18,8(sp)
   29290:	2023883a 	mov	r17,r4
   29294:	2821883a 	mov	r16,r5
   29298:	10000f26 	beq	r2,zero,292d8 <_Balloc+0x60>
   2929c:	8407883a 	add	r3,r16,r16
   292a0:	18c7883a 	add	r3,r3,r3
   292a4:	10c7883a 	add	r3,r2,r3
   292a8:	18800017 	ldw	r2,0(r3)
   292ac:	10001126 	beq	r2,zero,292f4 <_Balloc+0x7c>
   292b0:	11000017 	ldw	r4,0(r2)
   292b4:	19000015 	stw	r4,0(r3)
   292b8:	10000415 	stw	zero,16(r2)
   292bc:	10000315 	stw	zero,12(r2)
   292c0:	dfc00317 	ldw	ra,12(sp)
   292c4:	dc800217 	ldw	r18,8(sp)
   292c8:	dc400117 	ldw	r17,4(sp)
   292cc:	dc000017 	ldw	r16,0(sp)
   292d0:	dec00404 	addi	sp,sp,16
   292d4:	f800283a 	ret
   292d8:	01400104 	movi	r5,4
   292dc:	01800844 	movi	r6,33
   292e0:	002d1c00 	call	2d1c0 <_calloc_r>
   292e4:	88801315 	stw	r2,76(r17)
   292e8:	103fec1e 	bne	r2,zero,2929c <__alt_data_end+0xfffe96cc>
   292ec:	0005883a 	mov	r2,zero
   292f0:	003ff306 	br	292c0 <__alt_data_end+0xfffe96f0>
   292f4:	01400044 	movi	r5,1
   292f8:	2c24983a 	sll	r18,r5,r16
   292fc:	8809883a 	mov	r4,r17
   29300:	91800144 	addi	r6,r18,5
   29304:	318d883a 	add	r6,r6,r6
   29308:	318d883a 	add	r6,r6,r6
   2930c:	002d1c00 	call	2d1c0 <_calloc_r>
   29310:	103ff626 	beq	r2,zero,292ec <__alt_data_end+0xfffe971c>
   29314:	14000115 	stw	r16,4(r2)
   29318:	14800215 	stw	r18,8(r2)
   2931c:	003fe606 	br	292b8 <__alt_data_end+0xfffe96e8>

00029320 <_Bfree>:
   29320:	28000826 	beq	r5,zero,29344 <_Bfree+0x24>
   29324:	28c00117 	ldw	r3,4(r5)
   29328:	20801317 	ldw	r2,76(r4)
   2932c:	18c7883a 	add	r3,r3,r3
   29330:	18c7883a 	add	r3,r3,r3
   29334:	10c5883a 	add	r2,r2,r3
   29338:	10c00017 	ldw	r3,0(r2)
   2933c:	28c00015 	stw	r3,0(r5)
   29340:	11400015 	stw	r5,0(r2)
   29344:	f800283a 	ret

00029348 <__multadd>:
   29348:	defffa04 	addi	sp,sp,-24
   2934c:	dc000115 	stw	r16,4(sp)
   29350:	2c000417 	ldw	r16,16(r5)
   29354:	dc800315 	stw	r18,12(sp)
   29358:	dc400215 	stw	r17,8(sp)
   2935c:	dfc00515 	stw	ra,20(sp)
   29360:	dcc00415 	stw	r19,16(sp)
   29364:	2823883a 	mov	r17,r5
   29368:	2025883a 	mov	r18,r4
   2936c:	2a400504 	addi	r9,r5,20
   29370:	0015883a 	mov	r10,zero
   29374:	4a000017 	ldw	r8,0(r9)
   29378:	4a400104 	addi	r9,r9,4
   2937c:	52800044 	addi	r10,r10,1
   29380:	40ffffcc 	andi	r3,r8,65535
   29384:	1987383a 	mul	r3,r3,r6
   29388:	4010d43a 	srli	r8,r8,16
   2938c:	19cf883a 	add	r7,r3,r7
   29390:	4191383a 	mul	r8,r8,r6
   29394:	3816d43a 	srli	r11,r7,16
   29398:	38ffffcc 	andi	r3,r7,65535
   2939c:	5a0f883a 	add	r7,r11,r8
   293a0:	3810943a 	slli	r8,r7,16
   293a4:	380ed43a 	srli	r7,r7,16
   293a8:	40c7883a 	add	r3,r8,r3
   293ac:	48ffff15 	stw	r3,-4(r9)
   293b0:	543ff016 	blt	r10,r16,29374 <__alt_data_end+0xfffe97a4>
   293b4:	38000926 	beq	r7,zero,293dc <__multadd+0x94>
   293b8:	88800217 	ldw	r2,8(r17)
   293bc:	80800f0e 	bge	r16,r2,293fc <__multadd+0xb4>
   293c0:	80800144 	addi	r2,r16,5
   293c4:	1085883a 	add	r2,r2,r2
   293c8:	1085883a 	add	r2,r2,r2
   293cc:	8885883a 	add	r2,r17,r2
   293d0:	11c00015 	stw	r7,0(r2)
   293d4:	84000044 	addi	r16,r16,1
   293d8:	8c000415 	stw	r16,16(r17)
   293dc:	8805883a 	mov	r2,r17
   293e0:	dfc00517 	ldw	ra,20(sp)
   293e4:	dcc00417 	ldw	r19,16(sp)
   293e8:	dc800317 	ldw	r18,12(sp)
   293ec:	dc400217 	ldw	r17,8(sp)
   293f0:	dc000117 	ldw	r16,4(sp)
   293f4:	dec00604 	addi	sp,sp,24
   293f8:	f800283a 	ret
   293fc:	89400117 	ldw	r5,4(r17)
   29400:	9009883a 	mov	r4,r18
   29404:	d9c00015 	stw	r7,0(sp)
   29408:	29400044 	addi	r5,r5,1
   2940c:	00292780 	call	29278 <_Balloc>
   29410:	89800417 	ldw	r6,16(r17)
   29414:	89400304 	addi	r5,r17,12
   29418:	11000304 	addi	r4,r2,12
   2941c:	31800084 	addi	r6,r6,2
   29420:	318d883a 	add	r6,r6,r6
   29424:	318d883a 	add	r6,r6,r6
   29428:	1027883a 	mov	r19,r2
   2942c:	0028ec00 	call	28ec0 <memcpy>
   29430:	89000117 	ldw	r4,4(r17)
   29434:	90c01317 	ldw	r3,76(r18)
   29438:	d9c00017 	ldw	r7,0(sp)
   2943c:	2109883a 	add	r4,r4,r4
   29440:	2109883a 	add	r4,r4,r4
   29444:	1907883a 	add	r3,r3,r4
   29448:	18800017 	ldw	r2,0(r3)
   2944c:	88800015 	stw	r2,0(r17)
   29450:	1c400015 	stw	r17,0(r3)
   29454:	9823883a 	mov	r17,r19
   29458:	003fd906 	br	293c0 <__alt_data_end+0xfffe97f0>

0002945c <__s2b>:
   2945c:	defff904 	addi	sp,sp,-28
   29460:	dc400115 	stw	r17,4(sp)
   29464:	dc000015 	stw	r16,0(sp)
   29468:	2023883a 	mov	r17,r4
   2946c:	2821883a 	mov	r16,r5
   29470:	39000204 	addi	r4,r7,8
   29474:	01400244 	movi	r5,9
   29478:	dcc00315 	stw	r19,12(sp)
   2947c:	dc800215 	stw	r18,8(sp)
   29480:	dfc00615 	stw	ra,24(sp)
   29484:	dd400515 	stw	r21,20(sp)
   29488:	dd000415 	stw	r20,16(sp)
   2948c:	3825883a 	mov	r18,r7
   29490:	3027883a 	mov	r19,r6
   29494:	002e6040 	call	2e604 <__divsi3>
   29498:	00c00044 	movi	r3,1
   2949c:	000b883a 	mov	r5,zero
   294a0:	1880030e 	bge	r3,r2,294b0 <__s2b+0x54>
   294a4:	18c7883a 	add	r3,r3,r3
   294a8:	29400044 	addi	r5,r5,1
   294ac:	18bffd16 	blt	r3,r2,294a4 <__alt_data_end+0xfffe98d4>
   294b0:	8809883a 	mov	r4,r17
   294b4:	00292780 	call	29278 <_Balloc>
   294b8:	d8c00717 	ldw	r3,28(sp)
   294bc:	10c00515 	stw	r3,20(r2)
   294c0:	00c00044 	movi	r3,1
   294c4:	10c00415 	stw	r3,16(r2)
   294c8:	00c00244 	movi	r3,9
   294cc:	1cc0210e 	bge	r3,r19,29554 <__s2b+0xf8>
   294d0:	80eb883a 	add	r21,r16,r3
   294d4:	a829883a 	mov	r20,r21
   294d8:	84e1883a 	add	r16,r16,r19
   294dc:	a1c00007 	ldb	r7,0(r20)
   294e0:	8809883a 	mov	r4,r17
   294e4:	a5000044 	addi	r20,r20,1
   294e8:	100b883a 	mov	r5,r2
   294ec:	01800284 	movi	r6,10
   294f0:	39fff404 	addi	r7,r7,-48
   294f4:	00293480 	call	29348 <__multadd>
   294f8:	a43ff81e 	bne	r20,r16,294dc <__alt_data_end+0xfffe990c>
   294fc:	ace1883a 	add	r16,r21,r19
   29500:	843ffe04 	addi	r16,r16,-8
   29504:	9c800a0e 	bge	r19,r18,29530 <__s2b+0xd4>
   29508:	94e5c83a 	sub	r18,r18,r19
   2950c:	84a5883a 	add	r18,r16,r18
   29510:	81c00007 	ldb	r7,0(r16)
   29514:	8809883a 	mov	r4,r17
   29518:	84000044 	addi	r16,r16,1
   2951c:	100b883a 	mov	r5,r2
   29520:	01800284 	movi	r6,10
   29524:	39fff404 	addi	r7,r7,-48
   29528:	00293480 	call	29348 <__multadd>
   2952c:	84bff81e 	bne	r16,r18,29510 <__alt_data_end+0xfffe9940>
   29530:	dfc00617 	ldw	ra,24(sp)
   29534:	dd400517 	ldw	r21,20(sp)
   29538:	dd000417 	ldw	r20,16(sp)
   2953c:	dcc00317 	ldw	r19,12(sp)
   29540:	dc800217 	ldw	r18,8(sp)
   29544:	dc400117 	ldw	r17,4(sp)
   29548:	dc000017 	ldw	r16,0(sp)
   2954c:	dec00704 	addi	sp,sp,28
   29550:	f800283a 	ret
   29554:	84000284 	addi	r16,r16,10
   29558:	1827883a 	mov	r19,r3
   2955c:	003fe906 	br	29504 <__alt_data_end+0xfffe9934>

00029560 <__hi0bits>:
   29560:	20bfffec 	andhi	r2,r4,65535
   29564:	1000141e 	bne	r2,zero,295b8 <__hi0bits+0x58>
   29568:	2008943a 	slli	r4,r4,16
   2956c:	00800404 	movi	r2,16
   29570:	20ffc02c 	andhi	r3,r4,65280
   29574:	1800021e 	bne	r3,zero,29580 <__hi0bits+0x20>
   29578:	2008923a 	slli	r4,r4,8
   2957c:	10800204 	addi	r2,r2,8
   29580:	20fc002c 	andhi	r3,r4,61440
   29584:	1800021e 	bne	r3,zero,29590 <__hi0bits+0x30>
   29588:	2008913a 	slli	r4,r4,4
   2958c:	10800104 	addi	r2,r2,4
   29590:	20f0002c 	andhi	r3,r4,49152
   29594:	1800031e 	bne	r3,zero,295a4 <__hi0bits+0x44>
   29598:	2109883a 	add	r4,r4,r4
   2959c:	10800084 	addi	r2,r2,2
   295a0:	2109883a 	add	r4,r4,r4
   295a4:	20000316 	blt	r4,zero,295b4 <__hi0bits+0x54>
   295a8:	2110002c 	andhi	r4,r4,16384
   295ac:	2000041e 	bne	r4,zero,295c0 <__hi0bits+0x60>
   295b0:	00800804 	movi	r2,32
   295b4:	f800283a 	ret
   295b8:	0005883a 	mov	r2,zero
   295bc:	003fec06 	br	29570 <__alt_data_end+0xfffe99a0>
   295c0:	10800044 	addi	r2,r2,1
   295c4:	f800283a 	ret

000295c8 <__lo0bits>:
   295c8:	20c00017 	ldw	r3,0(r4)
   295cc:	188001cc 	andi	r2,r3,7
   295d0:	10000826 	beq	r2,zero,295f4 <__lo0bits+0x2c>
   295d4:	1880004c 	andi	r2,r3,1
   295d8:	1000211e 	bne	r2,zero,29660 <__lo0bits+0x98>
   295dc:	1880008c 	andi	r2,r3,2
   295e0:	1000211e 	bne	r2,zero,29668 <__lo0bits+0xa0>
   295e4:	1806d0ba 	srli	r3,r3,2
   295e8:	00800084 	movi	r2,2
   295ec:	20c00015 	stw	r3,0(r4)
   295f0:	f800283a 	ret
   295f4:	18bfffcc 	andi	r2,r3,65535
   295f8:	10001326 	beq	r2,zero,29648 <__lo0bits+0x80>
   295fc:	0005883a 	mov	r2,zero
   29600:	19403fcc 	andi	r5,r3,255
   29604:	2800021e 	bne	r5,zero,29610 <__lo0bits+0x48>
   29608:	1806d23a 	srli	r3,r3,8
   2960c:	10800204 	addi	r2,r2,8
   29610:	194003cc 	andi	r5,r3,15
   29614:	2800021e 	bne	r5,zero,29620 <__lo0bits+0x58>
   29618:	1806d13a 	srli	r3,r3,4
   2961c:	10800104 	addi	r2,r2,4
   29620:	194000cc 	andi	r5,r3,3
   29624:	2800021e 	bne	r5,zero,29630 <__lo0bits+0x68>
   29628:	1806d0ba 	srli	r3,r3,2
   2962c:	10800084 	addi	r2,r2,2
   29630:	1940004c 	andi	r5,r3,1
   29634:	2800081e 	bne	r5,zero,29658 <__lo0bits+0x90>
   29638:	1806d07a 	srli	r3,r3,1
   2963c:	1800051e 	bne	r3,zero,29654 <__lo0bits+0x8c>
   29640:	00800804 	movi	r2,32
   29644:	f800283a 	ret
   29648:	1806d43a 	srli	r3,r3,16
   2964c:	00800404 	movi	r2,16
   29650:	003feb06 	br	29600 <__alt_data_end+0xfffe9a30>
   29654:	10800044 	addi	r2,r2,1
   29658:	20c00015 	stw	r3,0(r4)
   2965c:	f800283a 	ret
   29660:	0005883a 	mov	r2,zero
   29664:	f800283a 	ret
   29668:	1806d07a 	srli	r3,r3,1
   2966c:	00800044 	movi	r2,1
   29670:	20c00015 	stw	r3,0(r4)
   29674:	f800283a 	ret

00029678 <__i2b>:
   29678:	defffd04 	addi	sp,sp,-12
   2967c:	dc000015 	stw	r16,0(sp)
   29680:	04000044 	movi	r16,1
   29684:	dc400115 	stw	r17,4(sp)
   29688:	2823883a 	mov	r17,r5
   2968c:	800b883a 	mov	r5,r16
   29690:	dfc00215 	stw	ra,8(sp)
   29694:	00292780 	call	29278 <_Balloc>
   29698:	14400515 	stw	r17,20(r2)
   2969c:	14000415 	stw	r16,16(r2)
   296a0:	dfc00217 	ldw	ra,8(sp)
   296a4:	dc400117 	ldw	r17,4(sp)
   296a8:	dc000017 	ldw	r16,0(sp)
   296ac:	dec00304 	addi	sp,sp,12
   296b0:	f800283a 	ret

000296b4 <__multiply>:
   296b4:	defffa04 	addi	sp,sp,-24
   296b8:	dcc00315 	stw	r19,12(sp)
   296bc:	dc800215 	stw	r18,8(sp)
   296c0:	2cc00417 	ldw	r19,16(r5)
   296c4:	34800417 	ldw	r18,16(r6)
   296c8:	dd000415 	stw	r20,16(sp)
   296cc:	dc400115 	stw	r17,4(sp)
   296d0:	dfc00515 	stw	ra,20(sp)
   296d4:	dc000015 	stw	r16,0(sp)
   296d8:	2829883a 	mov	r20,r5
   296dc:	3023883a 	mov	r17,r6
   296e0:	9c807016 	blt	r19,r18,298a4 <__multiply+0x1f0>
   296e4:	9005883a 	mov	r2,r18
   296e8:	9825883a 	mov	r18,r19
   296ec:	1027883a 	mov	r19,r2
   296f0:	a0800217 	ldw	r2,8(r20)
   296f4:	94e1883a 	add	r16,r18,r19
   296f8:	a1400117 	ldw	r5,4(r20)
   296fc:	1400010e 	bge	r2,r16,29704 <__multiply+0x50>
   29700:	29400044 	addi	r5,r5,1
   29704:	00292780 	call	29278 <_Balloc>
   29708:	8417883a 	add	r11,r16,r16
   2970c:	13000504 	addi	r12,r2,20
   29710:	5ad7883a 	add	r11,r11,r11
   29714:	62d7883a 	add	r11,r12,r11
   29718:	6007883a 	mov	r3,r12
   2971c:	62c0032e 	bgeu	r12,r11,2972c <__multiply+0x78>
   29720:	18000015 	stw	zero,0(r3)
   29724:	18c00104 	addi	r3,r3,4
   29728:	1afffd36 	bltu	r3,r11,29720 <__alt_data_end+0xfffe9b50>
   2972c:	9ce7883a 	add	r19,r19,r19
   29730:	94a5883a 	add	r18,r18,r18
   29734:	89800504 	addi	r6,r17,20
   29738:	9ce7883a 	add	r19,r19,r19
   2973c:	a3800504 	addi	r14,r20,20
   29740:	94a5883a 	add	r18,r18,r18
   29744:	34db883a 	add	r13,r6,r19
   29748:	7495883a 	add	r10,r14,r18
   2974c:	3340422e 	bgeu	r6,r13,29858 <__multiply+0x1a4>
   29750:	34400017 	ldw	r17,0(r6)
   29754:	8cbfffcc 	andi	r18,r17,65535
   29758:	90001b26 	beq	r18,zero,297c8 <__multiply+0x114>
   2975c:	6013883a 	mov	r9,r12
   29760:	7023883a 	mov	r17,r14
   29764:	0011883a 	mov	r8,zero
   29768:	88c00017 	ldw	r3,0(r17)
   2976c:	4bc00017 	ldw	r15,0(r9)
   29770:	8c400104 	addi	r17,r17,4
   29774:	19ffffcc 	andi	r7,r3,65535
   29778:	3c8f383a 	mul	r7,r7,r18
   2977c:	1808d43a 	srli	r4,r3,16
   29780:	797fffcc 	andi	r5,r15,65535
   29784:	29cb883a 	add	r5,r5,r7
   29788:	2a0b883a 	add	r5,r5,r8
   2978c:	2489383a 	mul	r4,r4,r18
   29790:	7806d43a 	srli	r3,r15,16
   29794:	2810d43a 	srli	r8,r5,16
   29798:	297fffcc 	andi	r5,r5,65535
   2979c:	1907883a 	add	r3,r3,r4
   297a0:	1a07883a 	add	r3,r3,r8
   297a4:	1808943a 	slli	r4,r3,16
   297a8:	480f883a 	mov	r7,r9
   297ac:	1810d43a 	srli	r8,r3,16
   297b0:	214ab03a 	or	r5,r4,r5
   297b4:	49400015 	stw	r5,0(r9)
   297b8:	4a400104 	addi	r9,r9,4
   297bc:	8abfea36 	bltu	r17,r10,29768 <__alt_data_end+0xfffe9b98>
   297c0:	3a000115 	stw	r8,4(r7)
   297c4:	34400017 	ldw	r17,0(r6)
   297c8:	8822d43a 	srli	r17,r17,16
   297cc:	88001f26 	beq	r17,zero,2984c <__multiply+0x198>
   297d0:	60c00017 	ldw	r3,0(r12)
   297d4:	7013883a 	mov	r9,r14
   297d8:	601f883a 	mov	r15,r12
   297dc:	1811883a 	mov	r8,r3
   297e0:	6027883a 	mov	r19,r12
   297e4:	000f883a 	mov	r7,zero
   297e8:	00000106 	br	297f0 <__multiply+0x13c>
   297ec:	9027883a 	mov	r19,r18
   297f0:	4940000b 	ldhu	r5,0(r9)
   297f4:	4010d43a 	srli	r8,r8,16
   297f8:	193fffcc 	andi	r4,r3,65535
   297fc:	2c4b383a 	mul	r5,r5,r17
   29800:	7bc00104 	addi	r15,r15,4
   29804:	4a400104 	addi	r9,r9,4
   29808:	2a0b883a 	add	r5,r5,r8
   2980c:	29cb883a 	add	r5,r5,r7
   29810:	2806943a 	slli	r3,r5,16
   29814:	9c800104 	addi	r18,r19,4
   29818:	280ad43a 	srli	r5,r5,16
   2981c:	1908b03a 	or	r4,r3,r4
   29820:	793fff15 	stw	r4,-4(r15)
   29824:	48ffff17 	ldw	r3,-4(r9)
   29828:	92000017 	ldw	r8,0(r18)
   2982c:	1806d43a 	srli	r3,r3,16
   29830:	413fffcc 	andi	r4,r8,65535
   29834:	1c47383a 	mul	r3,r3,r17
   29838:	1907883a 	add	r3,r3,r4
   2983c:	1947883a 	add	r3,r3,r5
   29840:	180ed43a 	srli	r7,r3,16
   29844:	4abfe936 	bltu	r9,r10,297ec <__alt_data_end+0xfffe9c1c>
   29848:	98c00115 	stw	r3,4(r19)
   2984c:	31800104 	addi	r6,r6,4
   29850:	63000104 	addi	r12,r12,4
   29854:	337fbe36 	bltu	r6,r13,29750 <__alt_data_end+0xfffe9b80>
   29858:	0400090e 	bge	zero,r16,29880 <__multiply+0x1cc>
   2985c:	58ffff17 	ldw	r3,-4(r11)
   29860:	5affff04 	addi	r11,r11,-4
   29864:	18000326 	beq	r3,zero,29874 <__multiply+0x1c0>
   29868:	00000506 	br	29880 <__multiply+0x1cc>
   2986c:	58c00017 	ldw	r3,0(r11)
   29870:	1800031e 	bne	r3,zero,29880 <__multiply+0x1cc>
   29874:	843fffc4 	addi	r16,r16,-1
   29878:	5affff04 	addi	r11,r11,-4
   2987c:	803ffb1e 	bne	r16,zero,2986c <__alt_data_end+0xfffe9c9c>
   29880:	14000415 	stw	r16,16(r2)
   29884:	dfc00517 	ldw	ra,20(sp)
   29888:	dd000417 	ldw	r20,16(sp)
   2988c:	dcc00317 	ldw	r19,12(sp)
   29890:	dc800217 	ldw	r18,8(sp)
   29894:	dc400117 	ldw	r17,4(sp)
   29898:	dc000017 	ldw	r16,0(sp)
   2989c:	dec00604 	addi	sp,sp,24
   298a0:	f800283a 	ret
   298a4:	3029883a 	mov	r20,r6
   298a8:	2823883a 	mov	r17,r5
   298ac:	003f9006 	br	296f0 <__alt_data_end+0xfffe9b20>

000298b0 <__pow5mult>:
   298b0:	defffa04 	addi	sp,sp,-24
   298b4:	dcc00315 	stw	r19,12(sp)
   298b8:	dc800215 	stw	r18,8(sp)
   298bc:	dc000015 	stw	r16,0(sp)
   298c0:	dfc00515 	stw	ra,20(sp)
   298c4:	dd000415 	stw	r20,16(sp)
   298c8:	dc400115 	stw	r17,4(sp)
   298cc:	308000cc 	andi	r2,r6,3
   298d0:	3021883a 	mov	r16,r6
   298d4:	2027883a 	mov	r19,r4
   298d8:	2825883a 	mov	r18,r5
   298dc:	10002e1e 	bne	r2,zero,29998 <__pow5mult+0xe8>
   298e0:	8021d0ba 	srai	r16,r16,2
   298e4:	80001a26 	beq	r16,zero,29950 <__pow5mult+0xa0>
   298e8:	9c401217 	ldw	r17,72(r19)
   298ec:	8800061e 	bne	r17,zero,29908 <__pow5mult+0x58>
   298f0:	00003406 	br	299c4 <__pow5mult+0x114>
   298f4:	8021d07a 	srai	r16,r16,1
   298f8:	80001526 	beq	r16,zero,29950 <__pow5mult+0xa0>
   298fc:	88800017 	ldw	r2,0(r17)
   29900:	10001c26 	beq	r2,zero,29974 <__pow5mult+0xc4>
   29904:	1023883a 	mov	r17,r2
   29908:	80c0004c 	andi	r3,r16,1
   2990c:	183ff926 	beq	r3,zero,298f4 <__alt_data_end+0xfffe9d24>
   29910:	900b883a 	mov	r5,r18
   29914:	880d883a 	mov	r6,r17
   29918:	9809883a 	mov	r4,r19
   2991c:	00296b40 	call	296b4 <__multiply>
   29920:	90001b26 	beq	r18,zero,29990 <__pow5mult+0xe0>
   29924:	91c00117 	ldw	r7,4(r18)
   29928:	98c01317 	ldw	r3,76(r19)
   2992c:	8021d07a 	srai	r16,r16,1
   29930:	39cf883a 	add	r7,r7,r7
   29934:	39cf883a 	add	r7,r7,r7
   29938:	19c7883a 	add	r3,r3,r7
   2993c:	19000017 	ldw	r4,0(r3)
   29940:	91000015 	stw	r4,0(r18)
   29944:	1c800015 	stw	r18,0(r3)
   29948:	1025883a 	mov	r18,r2
   2994c:	803feb1e 	bne	r16,zero,298fc <__alt_data_end+0xfffe9d2c>
   29950:	9005883a 	mov	r2,r18
   29954:	dfc00517 	ldw	ra,20(sp)
   29958:	dd000417 	ldw	r20,16(sp)
   2995c:	dcc00317 	ldw	r19,12(sp)
   29960:	dc800217 	ldw	r18,8(sp)
   29964:	dc400117 	ldw	r17,4(sp)
   29968:	dc000017 	ldw	r16,0(sp)
   2996c:	dec00604 	addi	sp,sp,24
   29970:	f800283a 	ret
   29974:	9809883a 	mov	r4,r19
   29978:	880b883a 	mov	r5,r17
   2997c:	880d883a 	mov	r6,r17
   29980:	00296b40 	call	296b4 <__multiply>
   29984:	88800015 	stw	r2,0(r17)
   29988:	10000015 	stw	zero,0(r2)
   2998c:	003fdd06 	br	29904 <__alt_data_end+0xfffe9d34>
   29990:	1025883a 	mov	r18,r2
   29994:	003fd706 	br	298f4 <__alt_data_end+0xfffe9d24>
   29998:	10bfffc4 	addi	r2,r2,-1
   2999c:	1085883a 	add	r2,r2,r2
   299a0:	00c000f4 	movhi	r3,3
   299a4:	18ce4304 	addi	r3,r3,14604
   299a8:	1085883a 	add	r2,r2,r2
   299ac:	1885883a 	add	r2,r3,r2
   299b0:	11800017 	ldw	r6,0(r2)
   299b4:	000f883a 	mov	r7,zero
   299b8:	00293480 	call	29348 <__multadd>
   299bc:	1025883a 	mov	r18,r2
   299c0:	003fc706 	br	298e0 <__alt_data_end+0xfffe9d10>
   299c4:	05000044 	movi	r20,1
   299c8:	9809883a 	mov	r4,r19
   299cc:	a00b883a 	mov	r5,r20
   299d0:	00292780 	call	29278 <_Balloc>
   299d4:	1023883a 	mov	r17,r2
   299d8:	00809c44 	movi	r2,625
   299dc:	88800515 	stw	r2,20(r17)
   299e0:	8d000415 	stw	r20,16(r17)
   299e4:	9c401215 	stw	r17,72(r19)
   299e8:	88000015 	stw	zero,0(r17)
   299ec:	003fc606 	br	29908 <__alt_data_end+0xfffe9d38>

000299f0 <__lshift>:
   299f0:	defff904 	addi	sp,sp,-28
   299f4:	dd000415 	stw	r20,16(sp)
   299f8:	dcc00315 	stw	r19,12(sp)
   299fc:	3029d17a 	srai	r20,r6,5
   29a00:	2cc00417 	ldw	r19,16(r5)
   29a04:	28800217 	ldw	r2,8(r5)
   29a08:	dd400515 	stw	r21,20(sp)
   29a0c:	a4e7883a 	add	r19,r20,r19
   29a10:	dc800215 	stw	r18,8(sp)
   29a14:	dc400115 	stw	r17,4(sp)
   29a18:	dc000015 	stw	r16,0(sp)
   29a1c:	dfc00615 	stw	ra,24(sp)
   29a20:	9c000044 	addi	r16,r19,1
   29a24:	2823883a 	mov	r17,r5
   29a28:	302b883a 	mov	r21,r6
   29a2c:	2025883a 	mov	r18,r4
   29a30:	29400117 	ldw	r5,4(r5)
   29a34:	1400030e 	bge	r2,r16,29a44 <__lshift+0x54>
   29a38:	1085883a 	add	r2,r2,r2
   29a3c:	29400044 	addi	r5,r5,1
   29a40:	143ffd16 	blt	r2,r16,29a38 <__alt_data_end+0xfffe9e68>
   29a44:	9009883a 	mov	r4,r18
   29a48:	00292780 	call	29278 <_Balloc>
   29a4c:	11c00504 	addi	r7,r2,20
   29a50:	0500090e 	bge	zero,r20,29a78 <__lshift+0x88>
   29a54:	3811883a 	mov	r8,r7
   29a58:	0007883a 	mov	r3,zero
   29a5c:	40000015 	stw	zero,0(r8)
   29a60:	18c00044 	addi	r3,r3,1
   29a64:	42000104 	addi	r8,r8,4
   29a68:	1d3ffc1e 	bne	r3,r20,29a5c <__alt_data_end+0xfffe9e8c>
   29a6c:	18c7883a 	add	r3,r3,r3
   29a70:	18c7883a 	add	r3,r3,r3
   29a74:	38cf883a 	add	r7,r7,r3
   29a78:	89000417 	ldw	r4,16(r17)
   29a7c:	88c00504 	addi	r3,r17,20
   29a80:	a98007cc 	andi	r6,r21,31
   29a84:	2109883a 	add	r4,r4,r4
   29a88:	2109883a 	add	r4,r4,r4
   29a8c:	1909883a 	add	r4,r3,r4
   29a90:	30002326 	beq	r6,zero,29b20 <__lshift+0x130>
   29a94:	01400804 	movi	r5,32
   29a98:	298bc83a 	sub	r5,r5,r6
   29a9c:	0013883a 	mov	r9,zero
   29aa0:	1a000017 	ldw	r8,0(r3)
   29aa4:	3815883a 	mov	r10,r7
   29aa8:	39c00104 	addi	r7,r7,4
   29aac:	4190983a 	sll	r8,r8,r6
   29ab0:	18c00104 	addi	r3,r3,4
   29ab4:	4a10b03a 	or	r8,r9,r8
   29ab8:	3a3fff15 	stw	r8,-4(r7)
   29abc:	1a3fff17 	ldw	r8,-4(r3)
   29ac0:	4152d83a 	srl	r9,r8,r5
   29ac4:	193ff636 	bltu	r3,r4,29aa0 <__alt_data_end+0xfffe9ed0>
   29ac8:	52400115 	stw	r9,4(r10)
   29acc:	48000126 	beq	r9,zero,29ad4 <__lshift+0xe4>
   29ad0:	9c000084 	addi	r16,r19,2
   29ad4:	89000117 	ldw	r4,4(r17)
   29ad8:	90c01317 	ldw	r3,76(r18)
   29adc:	843fffc4 	addi	r16,r16,-1
   29ae0:	2109883a 	add	r4,r4,r4
   29ae4:	2109883a 	add	r4,r4,r4
   29ae8:	1907883a 	add	r3,r3,r4
   29aec:	19000017 	ldw	r4,0(r3)
   29af0:	14000415 	stw	r16,16(r2)
   29af4:	89000015 	stw	r4,0(r17)
   29af8:	1c400015 	stw	r17,0(r3)
   29afc:	dfc00617 	ldw	ra,24(sp)
   29b00:	dd400517 	ldw	r21,20(sp)
   29b04:	dd000417 	ldw	r20,16(sp)
   29b08:	dcc00317 	ldw	r19,12(sp)
   29b0c:	dc800217 	ldw	r18,8(sp)
   29b10:	dc400117 	ldw	r17,4(sp)
   29b14:	dc000017 	ldw	r16,0(sp)
   29b18:	dec00704 	addi	sp,sp,28
   29b1c:	f800283a 	ret
   29b20:	19400017 	ldw	r5,0(r3)
   29b24:	39c00104 	addi	r7,r7,4
   29b28:	18c00104 	addi	r3,r3,4
   29b2c:	397fff15 	stw	r5,-4(r7)
   29b30:	193ffb36 	bltu	r3,r4,29b20 <__alt_data_end+0xfffe9f50>
   29b34:	003fe706 	br	29ad4 <__alt_data_end+0xfffe9f04>

00029b38 <__mcmp>:
   29b38:	20800417 	ldw	r2,16(r4)
   29b3c:	28c00417 	ldw	r3,16(r5)
   29b40:	10c5c83a 	sub	r2,r2,r3
   29b44:	1000111e 	bne	r2,zero,29b8c <__mcmp+0x54>
   29b48:	18c7883a 	add	r3,r3,r3
   29b4c:	18c7883a 	add	r3,r3,r3
   29b50:	21000504 	addi	r4,r4,20
   29b54:	29400504 	addi	r5,r5,20
   29b58:	20c5883a 	add	r2,r4,r3
   29b5c:	28cb883a 	add	r5,r5,r3
   29b60:	00000106 	br	29b68 <__mcmp+0x30>
   29b64:	20800a2e 	bgeu	r4,r2,29b90 <__mcmp+0x58>
   29b68:	10bfff04 	addi	r2,r2,-4
   29b6c:	297fff04 	addi	r5,r5,-4
   29b70:	11800017 	ldw	r6,0(r2)
   29b74:	28c00017 	ldw	r3,0(r5)
   29b78:	30fffa26 	beq	r6,r3,29b64 <__alt_data_end+0xfffe9f94>
   29b7c:	30c00236 	bltu	r6,r3,29b88 <__mcmp+0x50>
   29b80:	00800044 	movi	r2,1
   29b84:	f800283a 	ret
   29b88:	00bfffc4 	movi	r2,-1
   29b8c:	f800283a 	ret
   29b90:	0005883a 	mov	r2,zero
   29b94:	f800283a 	ret

00029b98 <__mdiff>:
   29b98:	defffb04 	addi	sp,sp,-20
   29b9c:	dc000015 	stw	r16,0(sp)
   29ba0:	2821883a 	mov	r16,r5
   29ba4:	dcc00315 	stw	r19,12(sp)
   29ba8:	300b883a 	mov	r5,r6
   29bac:	2027883a 	mov	r19,r4
   29bb0:	8009883a 	mov	r4,r16
   29bb4:	dc800215 	stw	r18,8(sp)
   29bb8:	dfc00415 	stw	ra,16(sp)
   29bbc:	dc400115 	stw	r17,4(sp)
   29bc0:	3025883a 	mov	r18,r6
   29bc4:	0029b380 	call	29b38 <__mcmp>
   29bc8:	10005226 	beq	r2,zero,29d14 <__mdiff+0x17c>
   29bcc:	10004c16 	blt	r2,zero,29d00 <__mdiff+0x168>
   29bd0:	0023883a 	mov	r17,zero
   29bd4:	81400117 	ldw	r5,4(r16)
   29bd8:	9809883a 	mov	r4,r19
   29bdc:	00292780 	call	29278 <_Balloc>
   29be0:	83400417 	ldw	r13,16(r16)
   29be4:	93800417 	ldw	r14,16(r18)
   29be8:	81000504 	addi	r4,r16,20
   29bec:	6b59883a 	add	r12,r13,r13
   29bf0:	739d883a 	add	r14,r14,r14
   29bf4:	6319883a 	add	r12,r12,r12
   29bf8:	91800504 	addi	r6,r18,20
   29bfc:	739d883a 	add	r14,r14,r14
   29c00:	14400315 	stw	r17,12(r2)
   29c04:	2319883a 	add	r12,r4,r12
   29c08:	339d883a 	add	r14,r6,r14
   29c0c:	12400504 	addi	r9,r2,20
   29c10:	0007883a 	mov	r3,zero
   29c14:	22000017 	ldw	r8,0(r4)
   29c18:	32800017 	ldw	r10,0(r6)
   29c1c:	4ac00104 	addi	r11,r9,4
   29c20:	41ffffcc 	andi	r7,r8,65535
   29c24:	38c7883a 	add	r3,r7,r3
   29c28:	51ffffcc 	andi	r7,r10,65535
   29c2c:	19cfc83a 	sub	r7,r3,r7
   29c30:	4010d43a 	srli	r8,r8,16
   29c34:	5014d43a 	srli	r10,r10,16
   29c38:	3807d43a 	srai	r3,r7,16
   29c3c:	39ffffcc 	andi	r7,r7,65535
   29c40:	4291c83a 	sub	r8,r8,r10
   29c44:	40c7883a 	add	r3,r8,r3
   29c48:	1810943a 	slli	r8,r3,16
   29c4c:	31800104 	addi	r6,r6,4
   29c50:	21000104 	addi	r4,r4,4
   29c54:	41ceb03a 	or	r7,r8,r7
   29c58:	49c00015 	stw	r7,0(r9)
   29c5c:	1807d43a 	srai	r3,r3,16
   29c60:	580b883a 	mov	r5,r11
   29c64:	5813883a 	mov	r9,r11
   29c68:	33bfea36 	bltu	r6,r14,29c14 <__alt_data_end+0xfffea044>
   29c6c:	2011883a 	mov	r8,r4
   29c70:	2300152e 	bgeu	r4,r12,29cc8 <__mdiff+0x130>
   29c74:	21400017 	ldw	r5,0(r4)
   29c78:	4a400104 	addi	r9,r9,4
   29c7c:	21000104 	addi	r4,r4,4
   29c80:	29ffffcc 	andi	r7,r5,65535
   29c84:	38c7883a 	add	r3,r7,r3
   29c88:	280ad43a 	srli	r5,r5,16
   29c8c:	180dd43a 	srai	r6,r3,16
   29c90:	19ffffcc 	andi	r7,r3,65535
   29c94:	3147883a 	add	r3,r6,r5
   29c98:	180a943a 	slli	r5,r3,16
   29c9c:	1807d43a 	srai	r3,r3,16
   29ca0:	29ceb03a 	or	r7,r5,r7
   29ca4:	49ffff15 	stw	r7,-4(r9)
   29ca8:	233ff236 	bltu	r4,r12,29c74 <__alt_data_end+0xfffea0a4>
   29cac:	0206303a 	nor	r3,zero,r8
   29cb0:	1b07883a 	add	r3,r3,r12
   29cb4:	1806d0ba 	srli	r3,r3,2
   29cb8:	18c00044 	addi	r3,r3,1
   29cbc:	18c7883a 	add	r3,r3,r3
   29cc0:	18c7883a 	add	r3,r3,r3
   29cc4:	58cb883a 	add	r5,r11,r3
   29cc8:	28ffff04 	addi	r3,r5,-4
   29ccc:	3800041e 	bne	r7,zero,29ce0 <__mdiff+0x148>
   29cd0:	18ffff04 	addi	r3,r3,-4
   29cd4:	19000017 	ldw	r4,0(r3)
   29cd8:	6b7fffc4 	addi	r13,r13,-1
   29cdc:	203ffc26 	beq	r4,zero,29cd0 <__alt_data_end+0xfffea100>
   29ce0:	13400415 	stw	r13,16(r2)
   29ce4:	dfc00417 	ldw	ra,16(sp)
   29ce8:	dcc00317 	ldw	r19,12(sp)
   29cec:	dc800217 	ldw	r18,8(sp)
   29cf0:	dc400117 	ldw	r17,4(sp)
   29cf4:	dc000017 	ldw	r16,0(sp)
   29cf8:	dec00504 	addi	sp,sp,20
   29cfc:	f800283a 	ret
   29d00:	8005883a 	mov	r2,r16
   29d04:	04400044 	movi	r17,1
   29d08:	9021883a 	mov	r16,r18
   29d0c:	1025883a 	mov	r18,r2
   29d10:	003fb006 	br	29bd4 <__alt_data_end+0xfffea004>
   29d14:	9809883a 	mov	r4,r19
   29d18:	000b883a 	mov	r5,zero
   29d1c:	00292780 	call	29278 <_Balloc>
   29d20:	00c00044 	movi	r3,1
   29d24:	10c00415 	stw	r3,16(r2)
   29d28:	10000515 	stw	zero,20(r2)
   29d2c:	003fed06 	br	29ce4 <__alt_data_end+0xfffea114>

00029d30 <__ulp>:
   29d30:	295ffc2c 	andhi	r5,r5,32752
   29d34:	00bf3034 	movhi	r2,64704
   29d38:	2887883a 	add	r3,r5,r2
   29d3c:	00c0020e 	bge	zero,r3,29d48 <__ulp+0x18>
   29d40:	0005883a 	mov	r2,zero
   29d44:	f800283a 	ret
   29d48:	00c7c83a 	sub	r3,zero,r3
   29d4c:	180bd53a 	srai	r5,r3,20
   29d50:	008004c4 	movi	r2,19
   29d54:	11400a0e 	bge	r2,r5,29d80 <__ulp+0x50>
   29d58:	00800c84 	movi	r2,50
   29d5c:	0007883a 	mov	r3,zero
   29d60:	11400516 	blt	r2,r5,29d78 <__ulp+0x48>
   29d64:	00800cc4 	movi	r2,51
   29d68:	114bc83a 	sub	r5,r2,r5
   29d6c:	00800044 	movi	r2,1
   29d70:	1144983a 	sll	r2,r2,r5
   29d74:	f800283a 	ret
   29d78:	00800044 	movi	r2,1
   29d7c:	f800283a 	ret
   29d80:	00800234 	movhi	r2,8
   29d84:	1147d83a 	sra	r3,r2,r5
   29d88:	0005883a 	mov	r2,zero
   29d8c:	f800283a 	ret

00029d90 <__b2d>:
   29d90:	defffa04 	addi	sp,sp,-24
   29d94:	dc000015 	stw	r16,0(sp)
   29d98:	24000417 	ldw	r16,16(r4)
   29d9c:	dc400115 	stw	r17,4(sp)
   29da0:	24400504 	addi	r17,r4,20
   29da4:	8421883a 	add	r16,r16,r16
   29da8:	8421883a 	add	r16,r16,r16
   29dac:	8c21883a 	add	r16,r17,r16
   29db0:	dc800215 	stw	r18,8(sp)
   29db4:	84bfff17 	ldw	r18,-4(r16)
   29db8:	dd000415 	stw	r20,16(sp)
   29dbc:	dcc00315 	stw	r19,12(sp)
   29dc0:	9009883a 	mov	r4,r18
   29dc4:	2829883a 	mov	r20,r5
   29dc8:	dfc00515 	stw	ra,20(sp)
   29dcc:	00295600 	call	29560 <__hi0bits>
   29dd0:	00c00804 	movi	r3,32
   29dd4:	1887c83a 	sub	r3,r3,r2
   29dd8:	a0c00015 	stw	r3,0(r20)
   29ddc:	00c00284 	movi	r3,10
   29de0:	84ffff04 	addi	r19,r16,-4
   29de4:	18801216 	blt	r3,r2,29e30 <__b2d+0xa0>
   29de8:	014002c4 	movi	r5,11
   29dec:	2889c83a 	sub	r4,r5,r2
   29df0:	9106d83a 	srl	r3,r18,r4
   29df4:	18cffc34 	orhi	r3,r3,16368
   29df8:	8cc0282e 	bgeu	r17,r19,29e9c <__b2d+0x10c>
   29dfc:	817ffe17 	ldw	r5,-8(r16)
   29e00:	290ad83a 	srl	r5,r5,r4
   29e04:	10800544 	addi	r2,r2,21
   29e08:	9084983a 	sll	r2,r18,r2
   29e0c:	2884b03a 	or	r2,r5,r2
   29e10:	dfc00517 	ldw	ra,20(sp)
   29e14:	dd000417 	ldw	r20,16(sp)
   29e18:	dcc00317 	ldw	r19,12(sp)
   29e1c:	dc800217 	ldw	r18,8(sp)
   29e20:	dc400117 	ldw	r17,4(sp)
   29e24:	dc000017 	ldw	r16,0(sp)
   29e28:	dec00604 	addi	sp,sp,24
   29e2c:	f800283a 	ret
   29e30:	113ffd44 	addi	r4,r2,-11
   29e34:	8cc00f2e 	bgeu	r17,r19,29e74 <__b2d+0xe4>
   29e38:	81bffe04 	addi	r6,r16,-8
   29e3c:	817ffe17 	ldw	r5,-8(r16)
   29e40:	20001326 	beq	r4,zero,29e90 <__b2d+0x100>
   29e44:	00c00ac4 	movi	r3,43
   29e48:	1885c83a 	sub	r2,r3,r2
   29e4c:	2886d83a 	srl	r3,r5,r2
   29e50:	9124983a 	sll	r18,r18,r4
   29e54:	90e4b03a 	or	r18,r18,r3
   29e58:	90cffc34 	orhi	r3,r18,16368
   29e5c:	8980112e 	bgeu	r17,r6,29ea4 <__b2d+0x114>
   29e60:	81bffd17 	ldw	r6,-12(r16)
   29e64:	308cd83a 	srl	r6,r6,r2
   29e68:	2904983a 	sll	r2,r5,r4
   29e6c:	1184b03a 	or	r2,r2,r6
   29e70:	003fe706 	br	29e10 <__alt_data_end+0xfffea240>
   29e74:	20000526 	beq	r4,zero,29e8c <__b2d+0xfc>
   29e78:	9124983a 	sll	r18,r18,r4
   29e7c:	000d883a 	mov	r6,zero
   29e80:	000b883a 	mov	r5,zero
   29e84:	90cffc34 	orhi	r3,r18,16368
   29e88:	003ff706 	br	29e68 <__alt_data_end+0xfffea298>
   29e8c:	000b883a 	mov	r5,zero
   29e90:	90cffc34 	orhi	r3,r18,16368
   29e94:	2805883a 	mov	r2,r5
   29e98:	003fdd06 	br	29e10 <__alt_data_end+0xfffea240>
   29e9c:	000b883a 	mov	r5,zero
   29ea0:	003fd806 	br	29e04 <__alt_data_end+0xfffea234>
   29ea4:	000d883a 	mov	r6,zero
   29ea8:	003fef06 	br	29e68 <__alt_data_end+0xfffea298>

00029eac <__d2b>:
   29eac:	defff704 	addi	sp,sp,-36
   29eb0:	dc000215 	stw	r16,8(sp)
   29eb4:	3021883a 	mov	r16,r6
   29eb8:	dc400315 	stw	r17,12(sp)
   29ebc:	8022907a 	slli	r17,r16,1
   29ec0:	dd400715 	stw	r21,28(sp)
   29ec4:	282b883a 	mov	r21,r5
   29ec8:	01400044 	movi	r5,1
   29ecc:	dd000615 	stw	r20,24(sp)
   29ed0:	dcc00515 	stw	r19,20(sp)
   29ed4:	dc800415 	stw	r18,16(sp)
   29ed8:	dfc00815 	stw	ra,32(sp)
   29edc:	3829883a 	mov	r20,r7
   29ee0:	dc800917 	ldw	r18,36(sp)
   29ee4:	8822d57a 	srli	r17,r17,21
   29ee8:	00292780 	call	29278 <_Balloc>
   29eec:	1027883a 	mov	r19,r2
   29ef0:	00800434 	movhi	r2,16
   29ef4:	10bfffc4 	addi	r2,r2,-1
   29ef8:	808c703a 	and	r6,r16,r2
   29efc:	88000126 	beq	r17,zero,29f04 <__d2b+0x58>
   29f00:	31800434 	orhi	r6,r6,16
   29f04:	d9800015 	stw	r6,0(sp)
   29f08:	a8001f26 	beq	r21,zero,29f88 <__d2b+0xdc>
   29f0c:	d9000104 	addi	r4,sp,4
   29f10:	dd400115 	stw	r21,4(sp)
   29f14:	00295c80 	call	295c8 <__lo0bits>
   29f18:	d8c00017 	ldw	r3,0(sp)
   29f1c:	1000291e 	bne	r2,zero,29fc4 <__d2b+0x118>
   29f20:	d9000117 	ldw	r4,4(sp)
   29f24:	99000515 	stw	r4,20(r19)
   29f28:	1820c03a 	cmpne	r16,r3,zero
   29f2c:	84000044 	addi	r16,r16,1
   29f30:	98c00615 	stw	r3,24(r19)
   29f34:	9c000415 	stw	r16,16(r19)
   29f38:	88001b1e 	bne	r17,zero,29fa8 <__d2b+0xfc>
   29f3c:	800690ba 	slli	r3,r16,2
   29f40:	10bef384 	addi	r2,r2,-1074
   29f44:	a0800015 	stw	r2,0(r20)
   29f48:	98c5883a 	add	r2,r19,r3
   29f4c:	11000417 	ldw	r4,16(r2)
   29f50:	8020917a 	slli	r16,r16,5
   29f54:	00295600 	call	29560 <__hi0bits>
   29f58:	8085c83a 	sub	r2,r16,r2
   29f5c:	90800015 	stw	r2,0(r18)
   29f60:	9805883a 	mov	r2,r19
   29f64:	dfc00817 	ldw	ra,32(sp)
   29f68:	dd400717 	ldw	r21,28(sp)
   29f6c:	dd000617 	ldw	r20,24(sp)
   29f70:	dcc00517 	ldw	r19,20(sp)
   29f74:	dc800417 	ldw	r18,16(sp)
   29f78:	dc400317 	ldw	r17,12(sp)
   29f7c:	dc000217 	ldw	r16,8(sp)
   29f80:	dec00904 	addi	sp,sp,36
   29f84:	f800283a 	ret
   29f88:	d809883a 	mov	r4,sp
   29f8c:	00295c80 	call	295c8 <__lo0bits>
   29f90:	d8c00017 	ldw	r3,0(sp)
   29f94:	04000044 	movi	r16,1
   29f98:	9c000415 	stw	r16,16(r19)
   29f9c:	98c00515 	stw	r3,20(r19)
   29fa0:	10800804 	addi	r2,r2,32
   29fa4:	883fe526 	beq	r17,zero,29f3c <__alt_data_end+0xfffea36c>
   29fa8:	8c7ef344 	addi	r17,r17,-1075
   29fac:	88a3883a 	add	r17,r17,r2
   29fb0:	00c00d44 	movi	r3,53
   29fb4:	a4400015 	stw	r17,0(r20)
   29fb8:	1885c83a 	sub	r2,r3,r2
   29fbc:	90800015 	stw	r2,0(r18)
   29fc0:	003fe706 	br	29f60 <__alt_data_end+0xfffea390>
   29fc4:	01000804 	movi	r4,32
   29fc8:	2089c83a 	sub	r4,r4,r2
   29fcc:	1908983a 	sll	r4,r3,r4
   29fd0:	d9400117 	ldw	r5,4(sp)
   29fd4:	1886d83a 	srl	r3,r3,r2
   29fd8:	2148b03a 	or	r4,r4,r5
   29fdc:	99000515 	stw	r4,20(r19)
   29fe0:	d8c00015 	stw	r3,0(sp)
   29fe4:	003fd006 	br	29f28 <__alt_data_end+0xfffea358>

00029fe8 <__ratio>:
   29fe8:	defff904 	addi	sp,sp,-28
   29fec:	dc400315 	stw	r17,12(sp)
   29ff0:	2823883a 	mov	r17,r5
   29ff4:	d9400104 	addi	r5,sp,4
   29ff8:	dfc00615 	stw	ra,24(sp)
   29ffc:	dcc00515 	stw	r19,20(sp)
   2a000:	dc800415 	stw	r18,16(sp)
   2a004:	2027883a 	mov	r19,r4
   2a008:	dc000215 	stw	r16,8(sp)
   2a00c:	0029d900 	call	29d90 <__b2d>
   2a010:	8809883a 	mov	r4,r17
   2a014:	d80b883a 	mov	r5,sp
   2a018:	1025883a 	mov	r18,r2
   2a01c:	1821883a 	mov	r16,r3
   2a020:	0029d900 	call	29d90 <__b2d>
   2a024:	8a400417 	ldw	r9,16(r17)
   2a028:	9a000417 	ldw	r8,16(r19)
   2a02c:	100d883a 	mov	r6,r2
   2a030:	d8800017 	ldw	r2,0(sp)
   2a034:	4251c83a 	sub	r8,r8,r9
   2a038:	4012917a 	slli	r9,r8,5
   2a03c:	da000117 	ldw	r8,4(sp)
   2a040:	4091c83a 	sub	r8,r8,r2
   2a044:	4251883a 	add	r8,r8,r9
   2a048:	02000d0e 	bge	zero,r8,2a080 <__ratio+0x98>
   2a04c:	4010953a 	slli	r8,r8,20
   2a050:	4421883a 	add	r16,r8,r16
   2a054:	9009883a 	mov	r4,r18
   2a058:	800b883a 	mov	r5,r16
   2a05c:	180f883a 	mov	r7,r3
   2a060:	002ef600 	call	2ef60 <__divdf3>
   2a064:	dfc00617 	ldw	ra,24(sp)
   2a068:	dcc00517 	ldw	r19,20(sp)
   2a06c:	dc800417 	ldw	r18,16(sp)
   2a070:	dc400317 	ldw	r17,12(sp)
   2a074:	dc000217 	ldw	r16,8(sp)
   2a078:	dec00704 	addi	sp,sp,28
   2a07c:	f800283a 	ret
   2a080:	4010953a 	slli	r8,r8,20
   2a084:	1a07c83a 	sub	r3,r3,r8
   2a088:	003ff206 	br	2a054 <__alt_data_end+0xfffea484>

0002a08c <_mprec_log10>:
   2a08c:	defffe04 	addi	sp,sp,-8
   2a090:	dc000015 	stw	r16,0(sp)
   2a094:	dfc00115 	stw	ra,4(sp)
   2a098:	008005c4 	movi	r2,23
   2a09c:	2021883a 	mov	r16,r4
   2a0a0:	11000d0e 	bge	r2,r4,2a0d8 <_mprec_log10+0x4c>
   2a0a4:	0005883a 	mov	r2,zero
   2a0a8:	00cffc34 	movhi	r3,16368
   2a0ac:	843fffc4 	addi	r16,r16,-1
   2a0b0:	1009883a 	mov	r4,r2
   2a0b4:	180b883a 	mov	r5,r3
   2a0b8:	000d883a 	mov	r6,zero
   2a0bc:	01d00934 	movhi	r7,16420
   2a0c0:	002fa700 	call	2fa70 <__muldf3>
   2a0c4:	803ff91e 	bne	r16,zero,2a0ac <__alt_data_end+0xfffea4dc>
   2a0c8:	dfc00117 	ldw	ra,4(sp)
   2a0cc:	dc000017 	ldw	r16,0(sp)
   2a0d0:	dec00204 	addi	sp,sp,8
   2a0d4:	f800283a 	ret
   2a0d8:	202090fa 	slli	r16,r4,3
   2a0dc:	008000f4 	movhi	r2,3
   2a0e0:	108e5a04 	addi	r2,r2,14696
   2a0e4:	1421883a 	add	r16,r2,r16
   2a0e8:	80800017 	ldw	r2,0(r16)
   2a0ec:	80c00117 	ldw	r3,4(r16)
   2a0f0:	dfc00117 	ldw	ra,4(sp)
   2a0f4:	dc000017 	ldw	r16,0(sp)
   2a0f8:	dec00204 	addi	sp,sp,8
   2a0fc:	f800283a 	ret

0002a100 <__copybits>:
   2a100:	297fffc4 	addi	r5,r5,-1
   2a104:	280fd17a 	srai	r7,r5,5
   2a108:	30c00417 	ldw	r3,16(r6)
   2a10c:	30800504 	addi	r2,r6,20
   2a110:	39c00044 	addi	r7,r7,1
   2a114:	18c7883a 	add	r3,r3,r3
   2a118:	39cf883a 	add	r7,r7,r7
   2a11c:	18c7883a 	add	r3,r3,r3
   2a120:	39cf883a 	add	r7,r7,r7
   2a124:	10c7883a 	add	r3,r2,r3
   2a128:	21cf883a 	add	r7,r4,r7
   2a12c:	10c00d2e 	bgeu	r2,r3,2a164 <__copybits+0x64>
   2a130:	200b883a 	mov	r5,r4
   2a134:	12000017 	ldw	r8,0(r2)
   2a138:	29400104 	addi	r5,r5,4
   2a13c:	10800104 	addi	r2,r2,4
   2a140:	2a3fff15 	stw	r8,-4(r5)
   2a144:	10fffb36 	bltu	r2,r3,2a134 <__alt_data_end+0xfffea564>
   2a148:	1985c83a 	sub	r2,r3,r6
   2a14c:	10bffac4 	addi	r2,r2,-21
   2a150:	1004d0ba 	srli	r2,r2,2
   2a154:	10800044 	addi	r2,r2,1
   2a158:	1085883a 	add	r2,r2,r2
   2a15c:	1085883a 	add	r2,r2,r2
   2a160:	2089883a 	add	r4,r4,r2
   2a164:	21c0032e 	bgeu	r4,r7,2a174 <__copybits+0x74>
   2a168:	20000015 	stw	zero,0(r4)
   2a16c:	21000104 	addi	r4,r4,4
   2a170:	21fffd36 	bltu	r4,r7,2a168 <__alt_data_end+0xfffea598>
   2a174:	f800283a 	ret

0002a178 <__any_on>:
   2a178:	20c00417 	ldw	r3,16(r4)
   2a17c:	2805d17a 	srai	r2,r5,5
   2a180:	21000504 	addi	r4,r4,20
   2a184:	18800d0e 	bge	r3,r2,2a1bc <__any_on+0x44>
   2a188:	18c7883a 	add	r3,r3,r3
   2a18c:	18c7883a 	add	r3,r3,r3
   2a190:	20c7883a 	add	r3,r4,r3
   2a194:	20c0192e 	bgeu	r4,r3,2a1fc <__any_on+0x84>
   2a198:	18bfff17 	ldw	r2,-4(r3)
   2a19c:	18ffff04 	addi	r3,r3,-4
   2a1a0:	1000041e 	bne	r2,zero,2a1b4 <__any_on+0x3c>
   2a1a4:	20c0142e 	bgeu	r4,r3,2a1f8 <__any_on+0x80>
   2a1a8:	18ffff04 	addi	r3,r3,-4
   2a1ac:	19400017 	ldw	r5,0(r3)
   2a1b0:	283ffc26 	beq	r5,zero,2a1a4 <__alt_data_end+0xfffea5d4>
   2a1b4:	00800044 	movi	r2,1
   2a1b8:	f800283a 	ret
   2a1bc:	10c00a0e 	bge	r2,r3,2a1e8 <__any_on+0x70>
   2a1c0:	1085883a 	add	r2,r2,r2
   2a1c4:	1085883a 	add	r2,r2,r2
   2a1c8:	294007cc 	andi	r5,r5,31
   2a1cc:	2087883a 	add	r3,r4,r2
   2a1d0:	283ff026 	beq	r5,zero,2a194 <__alt_data_end+0xfffea5c4>
   2a1d4:	19800017 	ldw	r6,0(r3)
   2a1d8:	3144d83a 	srl	r2,r6,r5
   2a1dc:	114a983a 	sll	r5,r2,r5
   2a1e0:	29bff41e 	bne	r5,r6,2a1b4 <__alt_data_end+0xfffea5e4>
   2a1e4:	003feb06 	br	2a194 <__alt_data_end+0xfffea5c4>
   2a1e8:	1085883a 	add	r2,r2,r2
   2a1ec:	1085883a 	add	r2,r2,r2
   2a1f0:	2087883a 	add	r3,r4,r2
   2a1f4:	003fe706 	br	2a194 <__alt_data_end+0xfffea5c4>
   2a1f8:	f800283a 	ret
   2a1fc:	0005883a 	mov	r2,zero
   2a200:	f800283a 	ret

0002a204 <_realloc_r>:
   2a204:	defff604 	addi	sp,sp,-40
   2a208:	dcc00315 	stw	r19,12(sp)
   2a20c:	dc400115 	stw	r17,4(sp)
   2a210:	dfc00915 	stw	ra,36(sp)
   2a214:	df000815 	stw	fp,32(sp)
   2a218:	ddc00715 	stw	r23,28(sp)
   2a21c:	dd800615 	stw	r22,24(sp)
   2a220:	dd400515 	stw	r21,20(sp)
   2a224:	dd000415 	stw	r20,16(sp)
   2a228:	dc800215 	stw	r18,8(sp)
   2a22c:	dc000015 	stw	r16,0(sp)
   2a230:	2827883a 	mov	r19,r5
   2a234:	3023883a 	mov	r17,r6
   2a238:	2800bf26 	beq	r5,zero,2a538 <_realloc_r+0x334>
   2a23c:	2025883a 	mov	r18,r4
   2a240:	00315540 	call	31554 <__malloc_lock>
   2a244:	98ffff17 	ldw	r3,-4(r19)
   2a248:	01bfff04 	movi	r6,-4
   2a24c:	890002c4 	addi	r4,r17,11
   2a250:	01c00584 	movi	r7,22
   2a254:	9d7ffe04 	addi	r21,r19,-8
   2a258:	19a0703a 	and	r16,r3,r6
   2a25c:	39003f2e 	bgeu	r7,r4,2a35c <_realloc_r+0x158>
   2a260:	053ffe04 	movi	r20,-8
   2a264:	2528703a 	and	r20,r4,r20
   2a268:	a00f883a 	mov	r7,r20
   2a26c:	a0008216 	blt	r20,zero,2a478 <_realloc_r+0x274>
   2a270:	a4408136 	bltu	r20,r17,2a478 <_realloc_r+0x274>
   2a274:	81c03c0e 	bge	r16,r7,2a368 <_realloc_r+0x164>
   2a278:	070000f4 	movhi	fp,3
   2a27c:	e7100e04 	addi	fp,fp,16440
   2a280:	e1000217 	ldw	r4,8(fp)
   2a284:	ac05883a 	add	r2,r21,r16
   2a288:	2080bf26 	beq	r4,r2,2a588 <_realloc_r+0x384>
   2a28c:	11000117 	ldw	r4,4(r2)
   2a290:	023fff84 	movi	r8,-2
   2a294:	2210703a 	and	r8,r4,r8
   2a298:	1211883a 	add	r8,r2,r8
   2a29c:	41400117 	ldw	r5,4(r8)
   2a2a0:	2940004c 	andi	r5,r5,1
   2a2a4:	28004a1e 	bne	r5,zero,2a3d0 <_realloc_r+0x1cc>
   2a2a8:	017fff04 	movi	r5,-4
   2a2ac:	2148703a 	and	r4,r4,r5
   2a2b0:	2409883a 	add	r4,r4,r16
   2a2b4:	21c0ad0e 	bge	r4,r7,2a56c <_realloc_r+0x368>
   2a2b8:	18c0004c 	andi	r3,r3,1
   2a2bc:	18007f1e 	bne	r3,zero,2a4bc <_realloc_r+0x2b8>
   2a2c0:	9dfffe17 	ldw	r23,-8(r19)
   2a2c4:	adefc83a 	sub	r23,r21,r23
   2a2c8:	bd800117 	ldw	r22,4(r23)
   2a2cc:	b14a703a 	and	r5,r22,r5
   2a2d0:	216d883a 	add	r22,r4,r5
   2a2d4:	b1c04516 	blt	r22,r7,2a3ec <_realloc_r+0x1e8>
   2a2d8:	10c00317 	ldw	r3,12(r2)
   2a2dc:	10800217 	ldw	r2,8(r2)
   2a2e0:	81bfff04 	addi	r6,r16,-4
   2a2e4:	bc400204 	addi	r17,r23,8
   2a2e8:	10c00315 	stw	r3,12(r2)
   2a2ec:	18800215 	stw	r2,8(r3)
   2a2f0:	b9400217 	ldw	r5,8(r23)
   2a2f4:	b8c00317 	ldw	r3,12(r23)
   2a2f8:	00800904 	movi	r2,36
   2a2fc:	28c00315 	stw	r3,12(r5)
   2a300:	19400215 	stw	r5,8(r3)
   2a304:	1180ef36 	bltu	r2,r6,2a6c4 <_realloc_r+0x4c0>
   2a308:	008004c4 	movi	r2,19
   2a30c:	1180da2e 	bgeu	r2,r6,2a678 <_realloc_r+0x474>
   2a310:	98800017 	ldw	r2,0(r19)
   2a314:	b8800215 	stw	r2,8(r23)
   2a318:	98800117 	ldw	r2,4(r19)
   2a31c:	b8800315 	stw	r2,12(r23)
   2a320:	008006c4 	movi	r2,27
   2a324:	1180fc2e 	bgeu	r2,r6,2a718 <_realloc_r+0x514>
   2a328:	98800217 	ldw	r2,8(r19)
   2a32c:	b8800415 	stw	r2,16(r23)
   2a330:	98800317 	ldw	r2,12(r19)
   2a334:	b8800515 	stw	r2,20(r23)
   2a338:	00800904 	movi	r2,36
   2a33c:	3080421e 	bne	r6,r2,2a448 <_realloc_r+0x244>
   2a340:	98800417 	ldw	r2,16(r19)
   2a344:	9cc00604 	addi	r19,r19,24
   2a348:	b8c00804 	addi	r3,r23,32
   2a34c:	b8800615 	stw	r2,24(r23)
   2a350:	98bfff17 	ldw	r2,-4(r19)
   2a354:	b8800715 	stw	r2,28(r23)
   2a358:	00003d06 	br	2a450 <_realloc_r+0x24c>
   2a35c:	01c00404 	movi	r7,16
   2a360:	3829883a 	mov	r20,r7
   2a364:	003fc206 	br	2a270 <__alt_data_end+0xfffea6a0>
   2a368:	9823883a 	mov	r17,r19
   2a36c:	850fc83a 	sub	r7,r16,r20
   2a370:	008003c4 	movi	r2,15
   2a374:	18c0004c 	andi	r3,r3,1
   2a378:	11c04336 	bltu	r2,r7,2a488 <_realloc_r+0x284>
   2a37c:	1c06b03a 	or	r3,r3,r16
   2a380:	a8c00115 	stw	r3,4(r21)
   2a384:	ac21883a 	add	r16,r21,r16
   2a388:	80c00117 	ldw	r3,4(r16)
   2a38c:	18c00054 	ori	r3,r3,1
   2a390:	80c00115 	stw	r3,4(r16)
   2a394:	9009883a 	mov	r4,r18
   2a398:	00315740 	call	31574 <__malloc_unlock>
   2a39c:	8805883a 	mov	r2,r17
   2a3a0:	dfc00917 	ldw	ra,36(sp)
   2a3a4:	df000817 	ldw	fp,32(sp)
   2a3a8:	ddc00717 	ldw	r23,28(sp)
   2a3ac:	dd800617 	ldw	r22,24(sp)
   2a3b0:	dd400517 	ldw	r21,20(sp)
   2a3b4:	dd000417 	ldw	r20,16(sp)
   2a3b8:	dcc00317 	ldw	r19,12(sp)
   2a3bc:	dc800217 	ldw	r18,8(sp)
   2a3c0:	dc400117 	ldw	r17,4(sp)
   2a3c4:	dc000017 	ldw	r16,0(sp)
   2a3c8:	dec00a04 	addi	sp,sp,40
   2a3cc:	f800283a 	ret
   2a3d0:	18c0004c 	andi	r3,r3,1
   2a3d4:	1800391e 	bne	r3,zero,2a4bc <_realloc_r+0x2b8>
   2a3d8:	9dfffe17 	ldw	r23,-8(r19)
   2a3dc:	00bfff04 	movi	r2,-4
   2a3e0:	adefc83a 	sub	r23,r21,r23
   2a3e4:	b9400117 	ldw	r5,4(r23)
   2a3e8:	288a703a 	and	r5,r5,r2
   2a3ec:	2c2d883a 	add	r22,r5,r16
   2a3f0:	b1c03216 	blt	r22,r7,2a4bc <_realloc_r+0x2b8>
   2a3f4:	b8800317 	ldw	r2,12(r23)
   2a3f8:	b8c00217 	ldw	r3,8(r23)
   2a3fc:	81bfff04 	addi	r6,r16,-4
   2a400:	01000904 	movi	r4,36
   2a404:	18800315 	stw	r2,12(r3)
   2a408:	10c00215 	stw	r3,8(r2)
   2a40c:	bc400204 	addi	r17,r23,8
   2a410:	2180ac36 	bltu	r4,r6,2a6c4 <_realloc_r+0x4c0>
   2a414:	008004c4 	movi	r2,19
   2a418:	1180972e 	bgeu	r2,r6,2a678 <_realloc_r+0x474>
   2a41c:	98800017 	ldw	r2,0(r19)
   2a420:	b8800215 	stw	r2,8(r23)
   2a424:	98800117 	ldw	r2,4(r19)
   2a428:	b8800315 	stw	r2,12(r23)
   2a42c:	008006c4 	movi	r2,27
   2a430:	1180b92e 	bgeu	r2,r6,2a718 <_realloc_r+0x514>
   2a434:	98800217 	ldw	r2,8(r19)
   2a438:	b8800415 	stw	r2,16(r23)
   2a43c:	98800317 	ldw	r2,12(r19)
   2a440:	b8800515 	stw	r2,20(r23)
   2a444:	313fbe26 	beq	r6,r4,2a340 <__alt_data_end+0xfffea770>
   2a448:	b8c00604 	addi	r3,r23,24
   2a44c:	9cc00404 	addi	r19,r19,16
   2a450:	98800017 	ldw	r2,0(r19)
   2a454:	b021883a 	mov	r16,r22
   2a458:	b82b883a 	mov	r21,r23
   2a45c:	18800015 	stw	r2,0(r3)
   2a460:	98800117 	ldw	r2,4(r19)
   2a464:	18800115 	stw	r2,4(r3)
   2a468:	98800217 	ldw	r2,8(r19)
   2a46c:	18800215 	stw	r2,8(r3)
   2a470:	b8c00117 	ldw	r3,4(r23)
   2a474:	003fbd06 	br	2a36c <__alt_data_end+0xfffea79c>
   2a478:	00800304 	movi	r2,12
   2a47c:	90800015 	stw	r2,0(r18)
   2a480:	0005883a 	mov	r2,zero
   2a484:	003fc606 	br	2a3a0 <__alt_data_end+0xfffea7d0>
   2a488:	1d06b03a 	or	r3,r3,r20
   2a48c:	ad0b883a 	add	r5,r21,r20
   2a490:	a8c00115 	stw	r3,4(r21)
   2a494:	38800054 	ori	r2,r7,1
   2a498:	28800115 	stw	r2,4(r5)
   2a49c:	29cf883a 	add	r7,r5,r7
   2a4a0:	38800117 	ldw	r2,4(r7)
   2a4a4:	9009883a 	mov	r4,r18
   2a4a8:	29400204 	addi	r5,r5,8
   2a4ac:	10800054 	ori	r2,r2,1
   2a4b0:	38800115 	stw	r2,4(r7)
   2a4b4:	0027a940 	call	27a94 <_free_r>
   2a4b8:	003fb606 	br	2a394 <__alt_data_end+0xfffea7c4>
   2a4bc:	880b883a 	mov	r5,r17
   2a4c0:	9009883a 	mov	r4,r18
   2a4c4:	00286300 	call	28630 <_malloc_r>
   2a4c8:	1023883a 	mov	r17,r2
   2a4cc:	1000aa26 	beq	r2,zero,2a778 <_realloc_r+0x574>
   2a4d0:	98ffff17 	ldw	r3,-4(r19)
   2a4d4:	113ffe04 	addi	r4,r2,-8
   2a4d8:	00bfff84 	movi	r2,-2
   2a4dc:	1884703a 	and	r2,r3,r2
   2a4e0:	a885883a 	add	r2,r21,r2
   2a4e4:	20808626 	beq	r4,r2,2a700 <_realloc_r+0x4fc>
   2a4e8:	81bfff04 	addi	r6,r16,-4
   2a4ec:	00800904 	movi	r2,36
   2a4f0:	11807036 	bltu	r2,r6,2a6b4 <_realloc_r+0x4b0>
   2a4f4:	00c004c4 	movi	r3,19
   2a4f8:	19805636 	bltu	r3,r6,2a654 <_realloc_r+0x450>
   2a4fc:	8805883a 	mov	r2,r17
   2a500:	9807883a 	mov	r3,r19
   2a504:	19000017 	ldw	r4,0(r3)
   2a508:	11000015 	stw	r4,0(r2)
   2a50c:	19000117 	ldw	r4,4(r3)
   2a510:	11000115 	stw	r4,4(r2)
   2a514:	18c00217 	ldw	r3,8(r3)
   2a518:	10c00215 	stw	r3,8(r2)
   2a51c:	980b883a 	mov	r5,r19
   2a520:	9009883a 	mov	r4,r18
   2a524:	0027a940 	call	27a94 <_free_r>
   2a528:	9009883a 	mov	r4,r18
   2a52c:	00315740 	call	31574 <__malloc_unlock>
   2a530:	8805883a 	mov	r2,r17
   2a534:	003f9a06 	br	2a3a0 <__alt_data_end+0xfffea7d0>
   2a538:	300b883a 	mov	r5,r6
   2a53c:	dfc00917 	ldw	ra,36(sp)
   2a540:	df000817 	ldw	fp,32(sp)
   2a544:	ddc00717 	ldw	r23,28(sp)
   2a548:	dd800617 	ldw	r22,24(sp)
   2a54c:	dd400517 	ldw	r21,20(sp)
   2a550:	dd000417 	ldw	r20,16(sp)
   2a554:	dcc00317 	ldw	r19,12(sp)
   2a558:	dc800217 	ldw	r18,8(sp)
   2a55c:	dc400117 	ldw	r17,4(sp)
   2a560:	dc000017 	ldw	r16,0(sp)
   2a564:	dec00a04 	addi	sp,sp,40
   2a568:	00286301 	jmpi	28630 <_malloc_r>
   2a56c:	11400317 	ldw	r5,12(r2)
   2a570:	10800217 	ldw	r2,8(r2)
   2a574:	9823883a 	mov	r17,r19
   2a578:	2021883a 	mov	r16,r4
   2a57c:	11400315 	stw	r5,12(r2)
   2a580:	28800215 	stw	r2,8(r5)
   2a584:	003f7906 	br	2a36c <__alt_data_end+0xfffea79c>
   2a588:	21000117 	ldw	r4,4(r4)
   2a58c:	00bfff04 	movi	r2,-4
   2a590:	a1800404 	addi	r6,r20,16
   2a594:	2088703a 	and	r4,r4,r2
   2a598:	2409883a 	add	r4,r4,r16
   2a59c:	2180380e 	bge	r4,r6,2a680 <_realloc_r+0x47c>
   2a5a0:	18c0004c 	andi	r3,r3,1
   2a5a4:	183fc51e 	bne	r3,zero,2a4bc <__alt_data_end+0xfffea8ec>
   2a5a8:	9dfffe17 	ldw	r23,-8(r19)
   2a5ac:	adefc83a 	sub	r23,r21,r23
   2a5b0:	b9400117 	ldw	r5,4(r23)
   2a5b4:	288a703a 	and	r5,r5,r2
   2a5b8:	216d883a 	add	r22,r4,r5
   2a5bc:	b1bf8b16 	blt	r22,r6,2a3ec <__alt_data_end+0xfffea81c>
   2a5c0:	b8800317 	ldw	r2,12(r23)
   2a5c4:	b8c00217 	ldw	r3,8(r23)
   2a5c8:	81bfff04 	addi	r6,r16,-4
   2a5cc:	01000904 	movi	r4,36
   2a5d0:	18800315 	stw	r2,12(r3)
   2a5d4:	10c00215 	stw	r3,8(r2)
   2a5d8:	bc400204 	addi	r17,r23,8
   2a5dc:	21805a36 	bltu	r4,r6,2a748 <_realloc_r+0x544>
   2a5e0:	008004c4 	movi	r2,19
   2a5e4:	1180562e 	bgeu	r2,r6,2a740 <_realloc_r+0x53c>
   2a5e8:	98800017 	ldw	r2,0(r19)
   2a5ec:	b8800215 	stw	r2,8(r23)
   2a5f0:	98800117 	ldw	r2,4(r19)
   2a5f4:	b8800315 	stw	r2,12(r23)
   2a5f8:	008006c4 	movi	r2,27
   2a5fc:	11805636 	bltu	r2,r6,2a758 <_realloc_r+0x554>
   2a600:	b8800404 	addi	r2,r23,16
   2a604:	9cc00204 	addi	r19,r19,8
   2a608:	98c00017 	ldw	r3,0(r19)
   2a60c:	10c00015 	stw	r3,0(r2)
   2a610:	98c00117 	ldw	r3,4(r19)
   2a614:	10c00115 	stw	r3,4(r2)
   2a618:	98c00217 	ldw	r3,8(r19)
   2a61c:	10c00215 	stw	r3,8(r2)
   2a620:	bd07883a 	add	r3,r23,r20
   2a624:	b505c83a 	sub	r2,r22,r20
   2a628:	e0c00215 	stw	r3,8(fp)
   2a62c:	10800054 	ori	r2,r2,1
   2a630:	18800115 	stw	r2,4(r3)
   2a634:	b8800117 	ldw	r2,4(r23)
   2a638:	9009883a 	mov	r4,r18
   2a63c:	1080004c 	andi	r2,r2,1
   2a640:	a0a8b03a 	or	r20,r20,r2
   2a644:	bd000115 	stw	r20,4(r23)
   2a648:	00315740 	call	31574 <__malloc_unlock>
   2a64c:	8805883a 	mov	r2,r17
   2a650:	003f5306 	br	2a3a0 <__alt_data_end+0xfffea7d0>
   2a654:	98c00017 	ldw	r3,0(r19)
   2a658:	88c00015 	stw	r3,0(r17)
   2a65c:	98c00117 	ldw	r3,4(r19)
   2a660:	88c00115 	stw	r3,4(r17)
   2a664:	00c006c4 	movi	r3,27
   2a668:	19801d36 	bltu	r3,r6,2a6e0 <_realloc_r+0x4dc>
   2a66c:	88800204 	addi	r2,r17,8
   2a670:	98c00204 	addi	r3,r19,8
   2a674:	003fa306 	br	2a504 <__alt_data_end+0xfffea934>
   2a678:	8807883a 	mov	r3,r17
   2a67c:	003f7406 	br	2a450 <__alt_data_end+0xfffea880>
   2a680:	ad2b883a 	add	r21,r21,r20
   2a684:	2505c83a 	sub	r2,r4,r20
   2a688:	e5400215 	stw	r21,8(fp)
   2a68c:	10800054 	ori	r2,r2,1
   2a690:	a8800115 	stw	r2,4(r21)
   2a694:	98bfff17 	ldw	r2,-4(r19)
   2a698:	9009883a 	mov	r4,r18
   2a69c:	1080004c 	andi	r2,r2,1
   2a6a0:	a0a8b03a 	or	r20,r20,r2
   2a6a4:	9d3fff15 	stw	r20,-4(r19)
   2a6a8:	00315740 	call	31574 <__malloc_unlock>
   2a6ac:	9805883a 	mov	r2,r19
   2a6b0:	003f3b06 	br	2a3a0 <__alt_data_end+0xfffea7d0>
   2a6b4:	8809883a 	mov	r4,r17
   2a6b8:	980b883a 	mov	r5,r19
   2a6bc:	0028ff80 	call	28ff8 <memmove>
   2a6c0:	003f9606 	br	2a51c <__alt_data_end+0xfffea94c>
   2a6c4:	8809883a 	mov	r4,r17
   2a6c8:	980b883a 	mov	r5,r19
   2a6cc:	0028ff80 	call	28ff8 <memmove>
   2a6d0:	b8c00117 	ldw	r3,4(r23)
   2a6d4:	b021883a 	mov	r16,r22
   2a6d8:	b82b883a 	mov	r21,r23
   2a6dc:	003f2306 	br	2a36c <__alt_data_end+0xfffea79c>
   2a6e0:	98c00217 	ldw	r3,8(r19)
   2a6e4:	88c00215 	stw	r3,8(r17)
   2a6e8:	98c00317 	ldw	r3,12(r19)
   2a6ec:	88c00315 	stw	r3,12(r17)
   2a6f0:	30800c26 	beq	r6,r2,2a724 <_realloc_r+0x520>
   2a6f4:	88800404 	addi	r2,r17,16
   2a6f8:	98c00404 	addi	r3,r19,16
   2a6fc:	003f8106 	br	2a504 <__alt_data_end+0xfffea934>
   2a700:	893fff17 	ldw	r4,-4(r17)
   2a704:	00bfff04 	movi	r2,-4
   2a708:	9823883a 	mov	r17,r19
   2a70c:	2084703a 	and	r2,r4,r2
   2a710:	80a1883a 	add	r16,r16,r2
   2a714:	003f1506 	br	2a36c <__alt_data_end+0xfffea79c>
   2a718:	b8c00404 	addi	r3,r23,16
   2a71c:	9cc00204 	addi	r19,r19,8
   2a720:	003f4b06 	br	2a450 <__alt_data_end+0xfffea880>
   2a724:	99000417 	ldw	r4,16(r19)
   2a728:	88800604 	addi	r2,r17,24
   2a72c:	98c00604 	addi	r3,r19,24
   2a730:	89000415 	stw	r4,16(r17)
   2a734:	99000517 	ldw	r4,20(r19)
   2a738:	89000515 	stw	r4,20(r17)
   2a73c:	003f7106 	br	2a504 <__alt_data_end+0xfffea934>
   2a740:	8805883a 	mov	r2,r17
   2a744:	003fb006 	br	2a608 <__alt_data_end+0xfffeaa38>
   2a748:	8809883a 	mov	r4,r17
   2a74c:	980b883a 	mov	r5,r19
   2a750:	0028ff80 	call	28ff8 <memmove>
   2a754:	003fb206 	br	2a620 <__alt_data_end+0xfffeaa50>
   2a758:	98800217 	ldw	r2,8(r19)
   2a75c:	b8800415 	stw	r2,16(r23)
   2a760:	98800317 	ldw	r2,12(r19)
   2a764:	b8800515 	stw	r2,20(r23)
   2a768:	31000726 	beq	r6,r4,2a788 <_realloc_r+0x584>
   2a76c:	b8800604 	addi	r2,r23,24
   2a770:	9cc00404 	addi	r19,r19,16
   2a774:	003fa406 	br	2a608 <__alt_data_end+0xfffeaa38>
   2a778:	9009883a 	mov	r4,r18
   2a77c:	00315740 	call	31574 <__malloc_unlock>
   2a780:	0005883a 	mov	r2,zero
   2a784:	003f0606 	br	2a3a0 <__alt_data_end+0xfffea7d0>
   2a788:	98c00417 	ldw	r3,16(r19)
   2a78c:	9cc00604 	addi	r19,r19,24
   2a790:	b8800804 	addi	r2,r23,32
   2a794:	b8c00615 	stw	r3,24(r23)
   2a798:	98ffff17 	ldw	r3,-4(r19)
   2a79c:	b8c00715 	stw	r3,28(r23)
   2a7a0:	003f9906 	br	2a608 <__alt_data_end+0xfffeaa38>

0002a7a4 <__fpclassifyd>:
   2a7a4:	00a00034 	movhi	r2,32768
   2a7a8:	10bfffc4 	addi	r2,r2,-1
   2a7ac:	2884703a 	and	r2,r5,r2
   2a7b0:	10000726 	beq	r2,zero,2a7d0 <__fpclassifyd+0x2c>
   2a7b4:	00fffc34 	movhi	r3,65520
   2a7b8:	019ff834 	movhi	r6,32736
   2a7bc:	28c7883a 	add	r3,r5,r3
   2a7c0:	31bfffc4 	addi	r6,r6,-1
   2a7c4:	30c00536 	bltu	r6,r3,2a7dc <__fpclassifyd+0x38>
   2a7c8:	00800104 	movi	r2,4
   2a7cc:	f800283a 	ret
   2a7d0:	2000021e 	bne	r4,zero,2a7dc <__fpclassifyd+0x38>
   2a7d4:	00800084 	movi	r2,2
   2a7d8:	f800283a 	ret
   2a7dc:	00dffc34 	movhi	r3,32752
   2a7e0:	019ff834 	movhi	r6,32736
   2a7e4:	28cb883a 	add	r5,r5,r3
   2a7e8:	31bfffc4 	addi	r6,r6,-1
   2a7ec:	317ff62e 	bgeu	r6,r5,2a7c8 <__alt_data_end+0xfffeabf8>
   2a7f0:	01400434 	movhi	r5,16
   2a7f4:	297fffc4 	addi	r5,r5,-1
   2a7f8:	28800236 	bltu	r5,r2,2a804 <__fpclassifyd+0x60>
   2a7fc:	008000c4 	movi	r2,3
   2a800:	f800283a 	ret
   2a804:	10c00226 	beq	r2,r3,2a810 <__fpclassifyd+0x6c>
   2a808:	0005883a 	mov	r2,zero
   2a80c:	f800283a 	ret
   2a810:	2005003a 	cmpeq	r2,r4,zero
   2a814:	f800283a 	ret

0002a818 <_sbrk_r>:
   2a818:	defffd04 	addi	sp,sp,-12
   2a81c:	dc000015 	stw	r16,0(sp)
   2a820:	040000f4 	movhi	r16,3
   2a824:	dc400115 	stw	r17,4(sp)
   2a828:	841c6904 	addi	r16,r16,29092
   2a82c:	2023883a 	mov	r17,r4
   2a830:	2809883a 	mov	r4,r5
   2a834:	dfc00215 	stw	ra,8(sp)
   2a838:	80000015 	stw	zero,0(r16)
   2a83c:	00317400 	call	31740 <sbrk>
   2a840:	00ffffc4 	movi	r3,-1
   2a844:	10c00526 	beq	r2,r3,2a85c <_sbrk_r+0x44>
   2a848:	dfc00217 	ldw	ra,8(sp)
   2a84c:	dc400117 	ldw	r17,4(sp)
   2a850:	dc000017 	ldw	r16,0(sp)
   2a854:	dec00304 	addi	sp,sp,12
   2a858:	f800283a 	ret
   2a85c:	80c00017 	ldw	r3,0(r16)
   2a860:	183ff926 	beq	r3,zero,2a848 <__alt_data_end+0xfffeac78>
   2a864:	88c00015 	stw	r3,0(r17)
   2a868:	003ff706 	br	2a848 <__alt_data_end+0xfffeac78>

0002a86c <__sread>:
   2a86c:	defffe04 	addi	sp,sp,-8
   2a870:	dc000015 	stw	r16,0(sp)
   2a874:	2821883a 	mov	r16,r5
   2a878:	2940038f 	ldh	r5,14(r5)
   2a87c:	dfc00115 	stw	ra,4(sp)
   2a880:	002d67c0 	call	2d67c <_read_r>
   2a884:	10000716 	blt	r2,zero,2a8a4 <__sread+0x38>
   2a888:	80c01417 	ldw	r3,80(r16)
   2a88c:	1887883a 	add	r3,r3,r2
   2a890:	80c01415 	stw	r3,80(r16)
   2a894:	dfc00117 	ldw	ra,4(sp)
   2a898:	dc000017 	ldw	r16,0(sp)
   2a89c:	dec00204 	addi	sp,sp,8
   2a8a0:	f800283a 	ret
   2a8a4:	80c0030b 	ldhu	r3,12(r16)
   2a8a8:	18fbffcc 	andi	r3,r3,61439
   2a8ac:	80c0030d 	sth	r3,12(r16)
   2a8b0:	dfc00117 	ldw	ra,4(sp)
   2a8b4:	dc000017 	ldw	r16,0(sp)
   2a8b8:	dec00204 	addi	sp,sp,8
   2a8bc:	f800283a 	ret

0002a8c0 <__seofread>:
   2a8c0:	0005883a 	mov	r2,zero
   2a8c4:	f800283a 	ret

0002a8c8 <__swrite>:
   2a8c8:	2880030b 	ldhu	r2,12(r5)
   2a8cc:	defffb04 	addi	sp,sp,-20
   2a8d0:	dcc00315 	stw	r19,12(sp)
   2a8d4:	dc800215 	stw	r18,8(sp)
   2a8d8:	dc400115 	stw	r17,4(sp)
   2a8dc:	dc000015 	stw	r16,0(sp)
   2a8e0:	dfc00415 	stw	ra,16(sp)
   2a8e4:	10c0400c 	andi	r3,r2,256
   2a8e8:	2821883a 	mov	r16,r5
   2a8ec:	2027883a 	mov	r19,r4
   2a8f0:	3025883a 	mov	r18,r6
   2a8f4:	3823883a 	mov	r17,r7
   2a8f8:	18000526 	beq	r3,zero,2a910 <__swrite+0x48>
   2a8fc:	2940038f 	ldh	r5,14(r5)
   2a900:	000d883a 	mov	r6,zero
   2a904:	01c00084 	movi	r7,2
   2a908:	002d6200 	call	2d620 <_lseek_r>
   2a90c:	8080030b 	ldhu	r2,12(r16)
   2a910:	8140038f 	ldh	r5,14(r16)
   2a914:	10bbffcc 	andi	r2,r2,61439
   2a918:	9809883a 	mov	r4,r19
   2a91c:	900d883a 	mov	r6,r18
   2a920:	880f883a 	mov	r7,r17
   2a924:	8080030d 	sth	r2,12(r16)
   2a928:	dfc00417 	ldw	ra,16(sp)
   2a92c:	dcc00317 	ldw	r19,12(sp)
   2a930:	dc800217 	ldw	r18,8(sp)
   2a934:	dc400117 	ldw	r17,4(sp)
   2a938:	dc000017 	ldw	r16,0(sp)
   2a93c:	dec00504 	addi	sp,sp,20
   2a940:	002d1101 	jmpi	2d110 <_write_r>

0002a944 <__sseek>:
   2a944:	defffe04 	addi	sp,sp,-8
   2a948:	dc000015 	stw	r16,0(sp)
   2a94c:	2821883a 	mov	r16,r5
   2a950:	2940038f 	ldh	r5,14(r5)
   2a954:	dfc00115 	stw	ra,4(sp)
   2a958:	002d6200 	call	2d620 <_lseek_r>
   2a95c:	00ffffc4 	movi	r3,-1
   2a960:	10c00826 	beq	r2,r3,2a984 <__sseek+0x40>
   2a964:	80c0030b 	ldhu	r3,12(r16)
   2a968:	80801415 	stw	r2,80(r16)
   2a96c:	18c40014 	ori	r3,r3,4096
   2a970:	80c0030d 	sth	r3,12(r16)
   2a974:	dfc00117 	ldw	ra,4(sp)
   2a978:	dc000017 	ldw	r16,0(sp)
   2a97c:	dec00204 	addi	sp,sp,8
   2a980:	f800283a 	ret
   2a984:	80c0030b 	ldhu	r3,12(r16)
   2a988:	18fbffcc 	andi	r3,r3,61439
   2a98c:	80c0030d 	sth	r3,12(r16)
   2a990:	dfc00117 	ldw	ra,4(sp)
   2a994:	dc000017 	ldw	r16,0(sp)
   2a998:	dec00204 	addi	sp,sp,8
   2a99c:	f800283a 	ret

0002a9a0 <__sclose>:
   2a9a0:	2940038f 	ldh	r5,14(r5)
   2a9a4:	002d16c1 	jmpi	2d16c <_close_r>

0002a9a8 <strcmp>:
   2a9a8:	2144b03a 	or	r2,r4,r5
   2a9ac:	108000cc 	andi	r2,r2,3
   2a9b0:	1000171e 	bne	r2,zero,2aa10 <strcmp+0x68>
   2a9b4:	20800017 	ldw	r2,0(r4)
   2a9b8:	28c00017 	ldw	r3,0(r5)
   2a9bc:	10c0141e 	bne	r2,r3,2aa10 <strcmp+0x68>
   2a9c0:	027fbff4 	movhi	r9,65279
   2a9c4:	4a7fbfc4 	addi	r9,r9,-257
   2a9c8:	0086303a 	nor	r3,zero,r2
   2a9cc:	02202074 	movhi	r8,32897
   2a9d0:	1245883a 	add	r2,r2,r9
   2a9d4:	42202004 	addi	r8,r8,-32640
   2a9d8:	10c4703a 	and	r2,r2,r3
   2a9dc:	1204703a 	and	r2,r2,r8
   2a9e0:	10000226 	beq	r2,zero,2a9ec <strcmp+0x44>
   2a9e4:	00001706 	br	2aa44 <strcmp+0x9c>
   2a9e8:	1000161e 	bne	r2,zero,2aa44 <strcmp+0x9c>
   2a9ec:	21000104 	addi	r4,r4,4
   2a9f0:	20c00017 	ldw	r3,0(r4)
   2a9f4:	29400104 	addi	r5,r5,4
   2a9f8:	29800017 	ldw	r6,0(r5)
   2a9fc:	1a4f883a 	add	r7,r3,r9
   2aa00:	00c4303a 	nor	r2,zero,r3
   2aa04:	3884703a 	and	r2,r7,r2
   2aa08:	1204703a 	and	r2,r2,r8
   2aa0c:	19bff626 	beq	r3,r6,2a9e8 <__alt_data_end+0xfffeae18>
   2aa10:	20800007 	ldb	r2,0(r4)
   2aa14:	1000051e 	bne	r2,zero,2aa2c <strcmp+0x84>
   2aa18:	00000606 	br	2aa34 <strcmp+0x8c>
   2aa1c:	21000044 	addi	r4,r4,1
   2aa20:	20800007 	ldb	r2,0(r4)
   2aa24:	29400044 	addi	r5,r5,1
   2aa28:	10000226 	beq	r2,zero,2aa34 <strcmp+0x8c>
   2aa2c:	28c00007 	ldb	r3,0(r5)
   2aa30:	10fffa26 	beq	r2,r3,2aa1c <__alt_data_end+0xfffeae4c>
   2aa34:	20800003 	ldbu	r2,0(r4)
   2aa38:	28c00003 	ldbu	r3,0(r5)
   2aa3c:	10c5c83a 	sub	r2,r2,r3
   2aa40:	f800283a 	ret
   2aa44:	0005883a 	mov	r2,zero
   2aa48:	f800283a 	ret

0002aa4c <__ssprint_r>:
   2aa4c:	30800217 	ldw	r2,8(r6)
   2aa50:	defff604 	addi	sp,sp,-40
   2aa54:	ddc00715 	stw	r23,28(sp)
   2aa58:	dcc00315 	stw	r19,12(sp)
   2aa5c:	dfc00915 	stw	ra,36(sp)
   2aa60:	df000815 	stw	fp,32(sp)
   2aa64:	dd800615 	stw	r22,24(sp)
   2aa68:	dd400515 	stw	r21,20(sp)
   2aa6c:	dd000415 	stw	r20,16(sp)
   2aa70:	dc800215 	stw	r18,8(sp)
   2aa74:	dc400115 	stw	r17,4(sp)
   2aa78:	dc000015 	stw	r16,0(sp)
   2aa7c:	3027883a 	mov	r19,r6
   2aa80:	35c00017 	ldw	r23,0(r6)
   2aa84:	10005526 	beq	r2,zero,2abdc <__ssprint_r+0x190>
   2aa88:	2029883a 	mov	r20,r4
   2aa8c:	29000017 	ldw	r4,0(r5)
   2aa90:	2821883a 	mov	r16,r5
   2aa94:	0039883a 	mov	fp,zero
   2aa98:	0023883a 	mov	r17,zero
   2aa9c:	88003926 	beq	r17,zero,2ab84 <__ssprint_r+0x138>
   2aaa0:	84800217 	ldw	r18,8(r16)
   2aaa4:	902d883a 	mov	r22,r18
   2aaa8:	8c803a36 	bltu	r17,r18,2ab94 <__ssprint_r+0x148>
   2aaac:	80c0030b 	ldhu	r3,12(r16)
   2aab0:	1881200c 	andi	r2,r3,1152
   2aab4:	10002626 	beq	r2,zero,2ab50 <__ssprint_r+0x104>
   2aab8:	80800517 	ldw	r2,20(r16)
   2aabc:	81400417 	ldw	r5,16(r16)
   2aac0:	89c00044 	addi	r7,r17,1
   2aac4:	108d883a 	add	r6,r2,r2
   2aac8:	3085883a 	add	r2,r6,r2
   2aacc:	100cd7fa 	srli	r6,r2,31
   2aad0:	216dc83a 	sub	r22,r4,r5
   2aad4:	3d89883a 	add	r4,r7,r22
   2aad8:	3085883a 	add	r2,r6,r2
   2aadc:	1025d07a 	srai	r18,r2,1
   2aae0:	900d883a 	mov	r6,r18
   2aae4:	9100022e 	bgeu	r18,r4,2aaf0 <__ssprint_r+0xa4>
   2aae8:	2025883a 	mov	r18,r4
   2aaec:	200d883a 	mov	r6,r4
   2aaf0:	18c1000c 	andi	r3,r3,1024
   2aaf4:	a009883a 	mov	r4,r20
   2aaf8:	18002926 	beq	r3,zero,2aba0 <__ssprint_r+0x154>
   2aafc:	300b883a 	mov	r5,r6
   2ab00:	00286300 	call	28630 <_malloc_r>
   2ab04:	102b883a 	mov	r21,r2
   2ab08:	10002b26 	beq	r2,zero,2abb8 <__ssprint_r+0x16c>
   2ab0c:	81400417 	ldw	r5,16(r16)
   2ab10:	1009883a 	mov	r4,r2
   2ab14:	b00d883a 	mov	r6,r22
   2ab18:	0028ec00 	call	28ec0 <memcpy>
   2ab1c:	8080030b 	ldhu	r2,12(r16)
   2ab20:	00fedfc4 	movi	r3,-1153
   2ab24:	10c4703a 	and	r2,r2,r3
   2ab28:	10802014 	ori	r2,r2,128
   2ab2c:	8080030d 	sth	r2,12(r16)
   2ab30:	ad89883a 	add	r4,r21,r22
   2ab34:	95adc83a 	sub	r22,r18,r22
   2ab38:	84800515 	stw	r18,20(r16)
   2ab3c:	85800215 	stw	r22,8(r16)
   2ab40:	85400415 	stw	r21,16(r16)
   2ab44:	81000015 	stw	r4,0(r16)
   2ab48:	8825883a 	mov	r18,r17
   2ab4c:	882d883a 	mov	r22,r17
   2ab50:	e00b883a 	mov	r5,fp
   2ab54:	b00d883a 	mov	r6,r22
   2ab58:	0028ff80 	call	28ff8 <memmove>
   2ab5c:	80c00217 	ldw	r3,8(r16)
   2ab60:	81000017 	ldw	r4,0(r16)
   2ab64:	98800217 	ldw	r2,8(r19)
   2ab68:	1ca5c83a 	sub	r18,r3,r18
   2ab6c:	2589883a 	add	r4,r4,r22
   2ab70:	84800215 	stw	r18,8(r16)
   2ab74:	81000015 	stw	r4,0(r16)
   2ab78:	1463c83a 	sub	r17,r2,r17
   2ab7c:	9c400215 	stw	r17,8(r19)
   2ab80:	88001626 	beq	r17,zero,2abdc <__ssprint_r+0x190>
   2ab84:	bf000017 	ldw	fp,0(r23)
   2ab88:	bc400117 	ldw	r17,4(r23)
   2ab8c:	bdc00204 	addi	r23,r23,8
   2ab90:	003fc206 	br	2aa9c <__alt_data_end+0xfffeaecc>
   2ab94:	8825883a 	mov	r18,r17
   2ab98:	882d883a 	mov	r22,r17
   2ab9c:	003fec06 	br	2ab50 <__alt_data_end+0xfffeaf80>
   2aba0:	002a2040 	call	2a204 <_realloc_r>
   2aba4:	102b883a 	mov	r21,r2
   2aba8:	103fe11e 	bne	r2,zero,2ab30 <__alt_data_end+0xfffeaf60>
   2abac:	81400417 	ldw	r5,16(r16)
   2abb0:	a009883a 	mov	r4,r20
   2abb4:	0027a940 	call	27a94 <_free_r>
   2abb8:	80c0030b 	ldhu	r3,12(r16)
   2abbc:	00800304 	movi	r2,12
   2abc0:	a0800015 	stw	r2,0(r20)
   2abc4:	18c01014 	ori	r3,r3,64
   2abc8:	80c0030d 	sth	r3,12(r16)
   2abcc:	00bfffc4 	movi	r2,-1
   2abd0:	98000215 	stw	zero,8(r19)
   2abd4:	98000115 	stw	zero,4(r19)
   2abd8:	00000206 	br	2abe4 <__ssprint_r+0x198>
   2abdc:	98000115 	stw	zero,4(r19)
   2abe0:	0005883a 	mov	r2,zero
   2abe4:	dfc00917 	ldw	ra,36(sp)
   2abe8:	df000817 	ldw	fp,32(sp)
   2abec:	ddc00717 	ldw	r23,28(sp)
   2abf0:	dd800617 	ldw	r22,24(sp)
   2abf4:	dd400517 	ldw	r21,20(sp)
   2abf8:	dd000417 	ldw	r20,16(sp)
   2abfc:	dcc00317 	ldw	r19,12(sp)
   2ac00:	dc800217 	ldw	r18,8(sp)
   2ac04:	dc400117 	ldw	r17,4(sp)
   2ac08:	dc000017 	ldw	r16,0(sp)
   2ac0c:	dec00a04 	addi	sp,sp,40
   2ac10:	f800283a 	ret

0002ac14 <___svfiprintf_internal_r>:
   2ac14:	2880030b 	ldhu	r2,12(r5)
   2ac18:	deffc904 	addi	sp,sp,-220
   2ac1c:	dd403215 	stw	r21,200(sp)
   2ac20:	dfc03615 	stw	ra,216(sp)
   2ac24:	df003515 	stw	fp,212(sp)
   2ac28:	ddc03415 	stw	r23,208(sp)
   2ac2c:	dd803315 	stw	r22,204(sp)
   2ac30:	dd003115 	stw	r20,196(sp)
   2ac34:	dcc03015 	stw	r19,192(sp)
   2ac38:	dc802f15 	stw	r18,188(sp)
   2ac3c:	dc402e15 	stw	r17,184(sp)
   2ac40:	dc002d15 	stw	r16,180(sp)
   2ac44:	d9402715 	stw	r5,156(sp)
   2ac48:	d9002915 	stw	r4,164(sp)
   2ac4c:	1080200c 	andi	r2,r2,128
   2ac50:	d9c02315 	stw	r7,140(sp)
   2ac54:	302b883a 	mov	r21,r6
   2ac58:	10000226 	beq	r2,zero,2ac64 <___svfiprintf_internal_r+0x50>
   2ac5c:	28800417 	ldw	r2,16(r5)
   2ac60:	1003ce26 	beq	r2,zero,2bb9c <___svfiprintf_internal_r+0xf88>
   2ac64:	dac01a04 	addi	r11,sp,104
   2ac68:	da8019c4 	addi	r10,sp,103
   2ac6c:	dc802917 	ldw	r18,164(sp)
   2ac70:	dd002717 	ldw	r20,156(sp)
   2ac74:	04c000f4 	movhi	r19,3
   2ac78:	dac01e15 	stw	r11,120(sp)
   2ac7c:	5a97c83a 	sub	r11,r11,r10
   2ac80:	9cce8c04 	addi	r19,r19,14896
   2ac84:	da801f15 	stw	r10,124(sp)
   2ac88:	dec01a15 	stw	sp,104(sp)
   2ac8c:	d8001c15 	stw	zero,112(sp)
   2ac90:	d8001b15 	stw	zero,108(sp)
   2ac94:	d8002a15 	stw	zero,168(sp)
   2ac98:	d8002415 	stw	zero,144(sp)
   2ac9c:	d811883a 	mov	r8,sp
   2aca0:	dac02b15 	stw	r11,172(sp)
   2aca4:	a8800007 	ldb	r2,0(r21)
   2aca8:	10026826 	beq	r2,zero,2b64c <___svfiprintf_internal_r+0xa38>
   2acac:	01000944 	movi	r4,37
   2acb0:	11026626 	beq	r2,r4,2b64c <___svfiprintf_internal_r+0xa38>
   2acb4:	a805883a 	mov	r2,r21
   2acb8:	00000106 	br	2acc0 <___svfiprintf_internal_r+0xac>
   2acbc:	19000326 	beq	r3,r4,2accc <___svfiprintf_internal_r+0xb8>
   2acc0:	10800044 	addi	r2,r2,1
   2acc4:	10c00007 	ldb	r3,0(r2)
   2acc8:	183ffc1e 	bne	r3,zero,2acbc <__alt_data_end+0xfffeb0ec>
   2accc:	1561c83a 	sub	r16,r2,r21
   2acd0:	102d883a 	mov	r22,r2
   2acd4:	80000e26 	beq	r16,zero,2ad10 <___svfiprintf_internal_r+0xfc>
   2acd8:	d8c01c17 	ldw	r3,112(sp)
   2acdc:	d8801b17 	ldw	r2,108(sp)
   2ace0:	45400015 	stw	r21,0(r8)
   2ace4:	1c07883a 	add	r3,r3,r16
   2ace8:	10800044 	addi	r2,r2,1
   2acec:	d8c01c15 	stw	r3,112(sp)
   2acf0:	44000115 	stw	r16,4(r8)
   2acf4:	d8801b15 	stw	r2,108(sp)
   2acf8:	00c001c4 	movi	r3,7
   2acfc:	1882d616 	blt	r3,r2,2b858 <___svfiprintf_internal_r+0xc44>
   2ad00:	42000204 	addi	r8,r8,8
   2ad04:	da802417 	ldw	r10,144(sp)
   2ad08:	5415883a 	add	r10,r10,r16
   2ad0c:	da802415 	stw	r10,144(sp)
   2ad10:	b0800007 	ldb	r2,0(r22)
   2ad14:	10027326 	beq	r2,zero,2b6e4 <___svfiprintf_internal_r+0xad0>
   2ad18:	b1000047 	ldb	r4,1(r22)
   2ad1c:	b5400044 	addi	r21,r22,1
   2ad20:	d8001d85 	stb	zero,118(sp)
   2ad24:	000d883a 	mov	r6,zero
   2ad28:	043fffc4 	movi	r16,-1
   2ad2c:	d8002115 	stw	zero,132(sp)
   2ad30:	0023883a 	mov	r17,zero
   2ad34:	00c01604 	movi	r3,88
   2ad38:	01400244 	movi	r5,9
   2ad3c:	02400a84 	movi	r9,42
   2ad40:	01c01b04 	movi	r7,108
   2ad44:	ad400044 	addi	r21,r21,1
   2ad48:	20bff804 	addi	r2,r4,-32
   2ad4c:	18819536 	bltu	r3,r2,2b3a4 <___svfiprintf_internal_r+0x790>
   2ad50:	100490ba 	slli	r2,r2,2
   2ad54:	02c000f4 	movhi	r11,3
   2ad58:	5aeb5a04 	addi	r11,r11,-21144
   2ad5c:	12c5883a 	add	r2,r2,r11
   2ad60:	10800017 	ldw	r2,0(r2)
   2ad64:	1000683a 	jmp	r2
   2ad68:	0002b2a4 	muli	zero,zero,2762
   2ad6c:	0002b3a4 	muli	zero,zero,2766
   2ad70:	0002b3a4 	muli	zero,zero,2766
   2ad74:	0002b298 	cmpnei	zero,zero,2762
   2ad78:	0002b3a4 	muli	zero,zero,2766
   2ad7c:	0002b3a4 	muli	zero,zero,2766
   2ad80:	0002b3a4 	muli	zero,zero,2766
   2ad84:	0002b3a4 	muli	zero,zero,2766
   2ad88:	0002b3a4 	muli	zero,zero,2766
   2ad8c:	0002b3a4 	muli	zero,zero,2766
   2ad90:	0002afc8 	cmpgei	zero,zero,2751
   2ad94:	0002b3d8 	cmpnei	zero,zero,2767
   2ad98:	0002b3a4 	muli	zero,zero,2766
   2ad9c:	0002aff0 	cmpltui	zero,zero,2751
   2ada0:	0002b3e4 	muli	zero,zero,2767
   2ada4:	0002b3a4 	muli	zero,zero,2766
   2ada8:	0002b3cc 	andi	zero,zero,2767
   2adac:	0002b36c 	andhi	zero,zero,2765
   2adb0:	0002b36c 	andhi	zero,zero,2765
   2adb4:	0002b36c 	andhi	zero,zero,2765
   2adb8:	0002b36c 	andhi	zero,zero,2765
   2adbc:	0002b36c 	andhi	zero,zero,2765
   2adc0:	0002b36c 	andhi	zero,zero,2765
   2adc4:	0002b36c 	andhi	zero,zero,2765
   2adc8:	0002b36c 	andhi	zero,zero,2765
   2adcc:	0002b36c 	andhi	zero,zero,2765
   2add0:	0002b3a4 	muli	zero,zero,2766
   2add4:	0002b3a4 	muli	zero,zero,2766
   2add8:	0002b3a4 	muli	zero,zero,2766
   2addc:	0002b3a4 	muli	zero,zero,2766
   2ade0:	0002b3a4 	muli	zero,zero,2766
   2ade4:	0002b3a4 	muli	zero,zero,2766
   2ade8:	0002b3a4 	muli	zero,zero,2766
   2adec:	0002b3a4 	muli	zero,zero,2766
   2adf0:	0002b3a4 	muli	zero,zero,2766
   2adf4:	0002b3a4 	muli	zero,zero,2766
   2adf8:	0002b304 	movi	zero,2764
   2adfc:	0002b3a4 	muli	zero,zero,2766
   2ae00:	0002b3a4 	muli	zero,zero,2766
   2ae04:	0002b3a4 	muli	zero,zero,2766
   2ae08:	0002b3a4 	muli	zero,zero,2766
   2ae0c:	0002b3a4 	muli	zero,zero,2766
   2ae10:	0002b3a4 	muli	zero,zero,2766
   2ae14:	0002b3a4 	muli	zero,zero,2766
   2ae18:	0002b3a4 	muli	zero,zero,2766
   2ae1c:	0002b3a4 	muli	zero,zero,2766
   2ae20:	0002b3a4 	muli	zero,zero,2766
   2ae24:	0002af98 	cmpnei	zero,zero,2750
   2ae28:	0002b3a4 	muli	zero,zero,2766
   2ae2c:	0002b3a4 	muli	zero,zero,2766
   2ae30:	0002b3a4 	muli	zero,zero,2766
   2ae34:	0002b3a4 	muli	zero,zero,2766
   2ae38:	0002b3a4 	muli	zero,zero,2766
   2ae3c:	0002aecc 	andi	zero,zero,2747
   2ae40:	0002b3a4 	muli	zero,zero,2766
   2ae44:	0002b3a4 	muli	zero,zero,2766
   2ae48:	0002b1f8 	rdprs	zero,zero,2759
   2ae4c:	0002b3a4 	muli	zero,zero,2766
   2ae50:	0002b3a4 	muli	zero,zero,2766
   2ae54:	0002b3a4 	muli	zero,zero,2766
   2ae58:	0002b3a4 	muli	zero,zero,2766
   2ae5c:	0002b3a4 	muli	zero,zero,2766
   2ae60:	0002b3a4 	muli	zero,zero,2766
   2ae64:	0002b3a4 	muli	zero,zero,2766
   2ae68:	0002b3a4 	muli	zero,zero,2766
   2ae6c:	0002b3a4 	muli	zero,zero,2766
   2ae70:	0002b3a4 	muli	zero,zero,2766
   2ae74:	0002b0e4 	muli	zero,zero,2755
   2ae78:	0002b0a4 	muli	zero,zero,2754
   2ae7c:	0002b3a4 	muli	zero,zero,2766
   2ae80:	0002b3a4 	muli	zero,zero,2766
   2ae84:	0002b3a4 	muli	zero,zero,2766
   2ae88:	0002b254 	movui	zero,2761
   2ae8c:	0002b0a4 	muli	zero,zero,2754
   2ae90:	0002b3a4 	muli	zero,zero,2766
   2ae94:	0002b3a4 	muli	zero,zero,2766
   2ae98:	0002b240 	call	2b24 <__reset-0x1d4dc>
   2ae9c:	0002b3a4 	muli	zero,zero,2766
   2aea0:	0002b260 	cmpeqi	zero,zero,2761
   2aea4:	0002af9c 	xori	zero,zero,2750
   2aea8:	0002b064 	muli	zero,zero,2753
   2aeac:	0002b058 	cmpnei	zero,zero,2753
   2aeb0:	0002b3a4 	muli	zero,zero,2766
   2aeb4:	0002affc 	xorhi	zero,zero,2751
   2aeb8:	0002b3a4 	muli	zero,zero,2766
   2aebc:	0002aed0 	cmplti	zero,zero,2747
   2aec0:	0002b3a4 	muli	zero,zero,2766
   2aec4:	0002b3a4 	muli	zero,zero,2766
   2aec8:	0002b2c0 	call	2b2c <__reset-0x1d4d4>
   2aecc:	8c400414 	ori	r17,r17,16
   2aed0:	88c0080c 	andi	r3,r17,32
   2aed4:	d8802317 	ldw	r2,140(sp)
   2aed8:	18029626 	beq	r3,zero,2b934 <___svfiprintf_internal_r+0xd20>
   2aedc:	dac02317 	ldw	r11,140(sp)
   2aee0:	12400017 	ldw	r9,0(r2)
   2aee4:	12800117 	ldw	r10,4(r2)
   2aee8:	5ac00204 	addi	r11,r11,8
   2aeec:	dac02315 	stw	r11,140(sp)
   2aef0:	00800044 	movi	r2,1
   2aef4:	4a86b03a 	or	r3,r9,r10
   2aef8:	d8001d85 	stb	zero,118(sp)
   2aefc:	8039883a 	mov	fp,r16
   2af00:	0017883a 	mov	r11,zero
   2af04:	80000216 	blt	r16,zero,2af10 <___svfiprintf_internal_r+0x2fc>
   2af08:	013fdfc4 	movi	r4,-129
   2af0c:	8922703a 	and	r17,r17,r4
   2af10:	1801d01e 	bne	r3,zero,2b654 <___svfiprintf_internal_r+0xa40>
   2af14:	80024426 	beq	r16,zero,2b828 <___svfiprintf_internal_r+0xc14>
   2af18:	10803fcc 	andi	r2,r2,255
   2af1c:	00c00044 	movi	r3,1
   2af20:	10c2b326 	beq	r2,r3,2b9f0 <___svfiprintf_internal_r+0xddc>
   2af24:	00c00084 	movi	r3,2
   2af28:	10c25b26 	beq	r2,r3,2b898 <___svfiprintf_internal_r+0xc84>
   2af2c:	d8c01a04 	addi	r3,sp,104
   2af30:	4808d0fa 	srli	r4,r9,3
   2af34:	500a977a 	slli	r5,r10,29
   2af38:	5014d0fa 	srli	r10,r10,3
   2af3c:	4a4001cc 	andi	r9,r9,7
   2af40:	48800c04 	addi	r2,r9,48
   2af44:	18ffffc4 	addi	r3,r3,-1
   2af48:	2912b03a 	or	r9,r5,r4
   2af4c:	18800005 	stb	r2,0(r3)
   2af50:	4a88b03a 	or	r4,r9,r10
   2af54:	203ff61e 	bne	r4,zero,2af30 <__alt_data_end+0xfffeb360>
   2af58:	8900004c 	andi	r4,r17,1
   2af5c:	d8c02615 	stw	r3,152(sp)
   2af60:	2002951e 	bne	r4,zero,2b9b8 <___svfiprintf_internal_r+0xda4>
   2af64:	da801e17 	ldw	r10,120(sp)
   2af68:	50f9c83a 	sub	fp,r10,r3
   2af6c:	df002015 	stw	fp,128(sp)
   2af70:	e400010e 	bge	fp,r16,2af78 <___svfiprintf_internal_r+0x364>
   2af74:	dc002015 	stw	r16,128(sp)
   2af78:	5ac03fcc 	andi	r11,r11,255
   2af7c:	5ac0201c 	xori	r11,r11,128
   2af80:	5affe004 	addi	r11,r11,-128
   2af84:	58006326 	beq	r11,zero,2b114 <___svfiprintf_internal_r+0x500>
   2af88:	d8c02017 	ldw	r3,128(sp)
   2af8c:	18c00044 	addi	r3,r3,1
   2af90:	d8c02015 	stw	r3,128(sp)
   2af94:	00005f06 	br	2b114 <___svfiprintf_internal_r+0x500>
   2af98:	8c400414 	ori	r17,r17,16
   2af9c:	88c0080c 	andi	r3,r17,32
   2afa0:	d8802317 	ldw	r2,140(sp)
   2afa4:	18027826 	beq	r3,zero,2b988 <___svfiprintf_internal_r+0xd74>
   2afa8:	dac02317 	ldw	r11,140(sp)
   2afac:	12400017 	ldw	r9,0(r2)
   2afb0:	12800117 	ldw	r10,4(r2)
   2afb4:	5ac00204 	addi	r11,r11,8
   2afb8:	dac02315 	stw	r11,140(sp)
   2afbc:	0005883a 	mov	r2,zero
   2afc0:	4a86b03a 	or	r3,r9,r10
   2afc4:	003fcc06 	br	2aef8 <__alt_data_end+0xfffeb328>
   2afc8:	da802317 	ldw	r10,140(sp)
   2afcc:	dac02317 	ldw	r11,140(sp)
   2afd0:	52800017 	ldw	r10,0(r10)
   2afd4:	58800104 	addi	r2,r11,4
   2afd8:	da802115 	stw	r10,132(sp)
   2afdc:	50028a0e 	bge	r10,zero,2ba08 <___svfiprintf_internal_r+0xdf4>
   2afe0:	da802117 	ldw	r10,132(sp)
   2afe4:	d8802315 	stw	r2,140(sp)
   2afe8:	0295c83a 	sub	r10,zero,r10
   2afec:	da802115 	stw	r10,132(sp)
   2aff0:	8c400114 	ori	r17,r17,4
   2aff4:	a9000007 	ldb	r4,0(r21)
   2aff8:	003f5206 	br	2ad44 <__alt_data_end+0xfffeb174>
   2affc:	da802317 	ldw	r10,140(sp)
   2b000:	dac02317 	ldw	r11,140(sp)
   2b004:	d8001d85 	stb	zero,118(sp)
   2b008:	52800017 	ldw	r10,0(r10)
   2b00c:	5dc00104 	addi	r23,r11,4
   2b010:	da802615 	stw	r10,152(sp)
   2b014:	5002eb26 	beq	r10,zero,2bbc4 <___svfiprintf_internal_r+0xfb0>
   2b018:	d9002617 	ldw	r4,152(sp)
   2b01c:	8002d716 	blt	r16,zero,2bb7c <___svfiprintf_internal_r+0xf68>
   2b020:	000b883a 	mov	r5,zero
   2b024:	800d883a 	mov	r6,r16
   2b028:	da002c15 	stw	r8,176(sp)
   2b02c:	0028dd80 	call	28dd8 <memchr>
   2b030:	da002c17 	ldw	r8,176(sp)
   2b034:	1002fb26 	beq	r2,zero,2bc24 <___svfiprintf_internal_r+0x1010>
   2b038:	d8c02617 	ldw	r3,152(sp)
   2b03c:	10f9c83a 	sub	fp,r2,r3
   2b040:	8700010e 	bge	r16,fp,2b048 <___svfiprintf_internal_r+0x434>
   2b044:	8039883a 	mov	fp,r16
   2b048:	dac01d83 	ldbu	r11,118(sp)
   2b04c:	ddc02315 	stw	r23,140(sp)
   2b050:	0021883a 	mov	r16,zero
   2b054:	003fc506 	br	2af6c <__alt_data_end+0xfffeb39c>
   2b058:	8c400814 	ori	r17,r17,32
   2b05c:	a9000007 	ldb	r4,0(r21)
   2b060:	003f3806 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b064:	dac02317 	ldw	r11,140(sp)
   2b068:	00800c04 	movi	r2,48
   2b06c:	d8801d05 	stb	r2,116(sp)
   2b070:	5a400017 	ldw	r9,0(r11)
   2b074:	00801e04 	movi	r2,120
   2b078:	d8801d45 	stb	r2,117(sp)
   2b07c:	008000f4 	movhi	r2,3
   2b080:	108e2304 	addi	r2,r2,14476
   2b084:	5ac00104 	addi	r11,r11,4
   2b088:	d8802a15 	stw	r2,168(sp)
   2b08c:	0015883a 	mov	r10,zero
   2b090:	8c400094 	ori	r17,r17,2
   2b094:	dac02315 	stw	r11,140(sp)
   2b098:	00800084 	movi	r2,2
   2b09c:	4807883a 	mov	r3,r9
   2b0a0:	003f9506 	br	2aef8 <__alt_data_end+0xfffeb328>
   2b0a4:	d9801d85 	stb	r6,118(sp)
   2b0a8:	8880080c 	andi	r2,r17,32
   2b0ac:	d8c02317 	ldw	r3,140(sp)
   2b0b0:	10009926 	beq	r2,zero,2b318 <___svfiprintf_internal_r+0x704>
   2b0b4:	dac02317 	ldw	r11,140(sp)
   2b0b8:	18800117 	ldw	r2,4(r3)
   2b0bc:	1a400017 	ldw	r9,0(r3)
   2b0c0:	5ac00204 	addi	r11,r11,8
   2b0c4:	dac02315 	stw	r11,140(sp)
   2b0c8:	1015883a 	mov	r10,r2
   2b0cc:	10009d16 	blt	r2,zero,2b344 <___svfiprintf_internal_r+0x730>
   2b0d0:	dac01d83 	ldbu	r11,118(sp)
   2b0d4:	8039883a 	mov	fp,r16
   2b0d8:	00800044 	movi	r2,1
   2b0dc:	4a86b03a 	or	r3,r9,r10
   2b0e0:	003f8806 	br	2af04 <__alt_data_end+0xfffeb334>
   2b0e4:	dac02317 	ldw	r11,140(sp)
   2b0e8:	00c00044 	movi	r3,1
   2b0ec:	da801004 	addi	r10,sp,64
   2b0f0:	58800017 	ldw	r2,0(r11)
   2b0f4:	5ac00104 	addi	r11,r11,4
   2b0f8:	d8c02015 	stw	r3,128(sp)
   2b0fc:	d8001d85 	stb	zero,118(sp)
   2b100:	d8801005 	stb	r2,64(sp)
   2b104:	dac02315 	stw	r11,140(sp)
   2b108:	1839883a 	mov	fp,r3
   2b10c:	da802615 	stw	r10,152(sp)
   2b110:	0021883a 	mov	r16,zero
   2b114:	8a80008c 	andi	r10,r17,2
   2b118:	da802215 	stw	r10,136(sp)
   2b11c:	50000326 	beq	r10,zero,2b12c <___svfiprintf_internal_r+0x518>
   2b120:	dac02017 	ldw	r11,128(sp)
   2b124:	5ac00084 	addi	r11,r11,2
   2b128:	dac02015 	stw	r11,128(sp)
   2b12c:	88c0210c 	andi	r3,r17,132
   2b130:	d8c02515 	stw	r3,148(sp)
   2b134:	1800bb1e 	bne	r3,zero,2b424 <___svfiprintf_internal_r+0x810>
   2b138:	da802117 	ldw	r10,132(sp)
   2b13c:	dac02017 	ldw	r11,128(sp)
   2b140:	52edc83a 	sub	r22,r10,r11
   2b144:	0580b70e 	bge	zero,r22,2b424 <___svfiprintf_internal_r+0x810>
   2b148:	02400404 	movi	r9,16
   2b14c:	d8c01c17 	ldw	r3,112(sp)
   2b150:	d8801b17 	ldw	r2,108(sp)
   2b154:	4d82a70e 	bge	r9,r22,2bbf4 <___svfiprintf_internal_r+0xfe0>
   2b158:	014000f4 	movhi	r5,3
   2b15c:	294e9004 	addi	r5,r5,14912
   2b160:	d9402815 	stw	r5,160(sp)
   2b164:	05c001c4 	movi	r23,7
   2b168:	00000306 	br	2b178 <___svfiprintf_internal_r+0x564>
   2b16c:	b5bffc04 	addi	r22,r22,-16
   2b170:	42000204 	addi	r8,r8,8
   2b174:	4d80150e 	bge	r9,r22,2b1cc <___svfiprintf_internal_r+0x5b8>
   2b178:	028000f4 	movhi	r10,3
   2b17c:	18c00404 	addi	r3,r3,16
   2b180:	10800044 	addi	r2,r2,1
   2b184:	528e9004 	addi	r10,r10,14912
   2b188:	42800015 	stw	r10,0(r8)
   2b18c:	42400115 	stw	r9,4(r8)
   2b190:	d8c01c15 	stw	r3,112(sp)
   2b194:	d8801b15 	stw	r2,108(sp)
   2b198:	b8bff40e 	bge	r23,r2,2b16c <__alt_data_end+0xfffeb59c>
   2b19c:	9009883a 	mov	r4,r18
   2b1a0:	a00b883a 	mov	r5,r20
   2b1a4:	d9801a04 	addi	r6,sp,104
   2b1a8:	da402c15 	stw	r9,176(sp)
   2b1ac:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b1b0:	da402c17 	ldw	r9,176(sp)
   2b1b4:	1001511e 	bne	r2,zero,2b6fc <___svfiprintf_internal_r+0xae8>
   2b1b8:	b5bffc04 	addi	r22,r22,-16
   2b1bc:	d8c01c17 	ldw	r3,112(sp)
   2b1c0:	d8801b17 	ldw	r2,108(sp)
   2b1c4:	d811883a 	mov	r8,sp
   2b1c8:	4dbfeb16 	blt	r9,r22,2b178 <__alt_data_end+0xfffeb5a8>
   2b1cc:	dac02817 	ldw	r11,160(sp)
   2b1d0:	b0c7883a 	add	r3,r22,r3
   2b1d4:	10800044 	addi	r2,r2,1
   2b1d8:	42c00015 	stw	r11,0(r8)
   2b1dc:	45800115 	stw	r22,4(r8)
   2b1e0:	d8c01c15 	stw	r3,112(sp)
   2b1e4:	d8801b15 	stw	r2,108(sp)
   2b1e8:	010001c4 	movi	r4,7
   2b1ec:	2081dd16 	blt	r4,r2,2b964 <___svfiprintf_internal_r+0xd50>
   2b1f0:	42000204 	addi	r8,r8,8
   2b1f4:	00008d06 	br	2b42c <___svfiprintf_internal_r+0x818>
   2b1f8:	00c000f4 	movhi	r3,3
   2b1fc:	18ce1e04 	addi	r3,r3,14456
   2b200:	d8c02a15 	stw	r3,168(sp)
   2b204:	d9801d85 	stb	r6,118(sp)
   2b208:	88c0080c 	andi	r3,r17,32
   2b20c:	d8802317 	ldw	r2,140(sp)
   2b210:	18003226 	beq	r3,zero,2b2dc <___svfiprintf_internal_r+0x6c8>
   2b214:	da802317 	ldw	r10,140(sp)
   2b218:	12400017 	ldw	r9,0(r2)
   2b21c:	52800204 	addi	r10,r10,8
   2b220:	da802315 	stw	r10,140(sp)
   2b224:	12800117 	ldw	r10,4(r2)
   2b228:	8880004c 	andi	r2,r17,1
   2b22c:	1001be26 	beq	r2,zero,2b928 <___svfiprintf_internal_r+0xd14>
   2b230:	4a86b03a 	or	r3,r9,r10
   2b234:	1802291e 	bne	r3,zero,2badc <___svfiprintf_internal_r+0xec8>
   2b238:	00800084 	movi	r2,2
   2b23c:	003f2e06 	br	2aef8 <__alt_data_end+0xfffeb328>
   2b240:	a9000007 	ldb	r4,0(r21)
   2b244:	a805883a 	mov	r2,r21
   2b248:	21c22a26 	beq	r4,r7,2baf4 <___svfiprintf_internal_r+0xee0>
   2b24c:	8c400414 	ori	r17,r17,16
   2b250:	003ebc06 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b254:	8c401014 	ori	r17,r17,64
   2b258:	a9000007 	ldb	r4,0(r21)
   2b25c:	003eb906 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b260:	d9801d85 	stb	r6,118(sp)
   2b264:	8880080c 	andi	r2,r17,32
   2b268:	1002131e 	bne	r2,zero,2bab8 <___svfiprintf_internal_r+0xea4>
   2b26c:	8880040c 	andi	r2,r17,16
   2b270:	1002241e 	bne	r2,zero,2bb04 <___svfiprintf_internal_r+0xef0>
   2b274:	8c40100c 	andi	r17,r17,64
   2b278:	88022226 	beq	r17,zero,2bb04 <___svfiprintf_internal_r+0xef0>
   2b27c:	dac02317 	ldw	r11,140(sp)
   2b280:	da802417 	ldw	r10,144(sp)
   2b284:	58800017 	ldw	r2,0(r11)
   2b288:	5ac00104 	addi	r11,r11,4
   2b28c:	dac02315 	stw	r11,140(sp)
   2b290:	1280000d 	sth	r10,0(r2)
   2b294:	003e8306 	br	2aca4 <__alt_data_end+0xfffeb0d4>
   2b298:	8c400054 	ori	r17,r17,1
   2b29c:	a9000007 	ldb	r4,0(r21)
   2b2a0:	003ea806 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b2a4:	30803fcc 	andi	r2,r6,255
   2b2a8:	1080201c 	xori	r2,r2,128
   2b2ac:	10bfe004 	addi	r2,r2,-128
   2b2b0:	1001ff1e 	bne	r2,zero,2bab0 <___svfiprintf_internal_r+0xe9c>
   2b2b4:	01800804 	movi	r6,32
   2b2b8:	a9000007 	ldb	r4,0(r21)
   2b2bc:	003ea106 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b2c0:	02c000f4 	movhi	r11,3
   2b2c4:	5ace2304 	addi	r11,r11,14476
   2b2c8:	dac02a15 	stw	r11,168(sp)
   2b2cc:	d9801d85 	stb	r6,118(sp)
   2b2d0:	88c0080c 	andi	r3,r17,32
   2b2d4:	d8802317 	ldw	r2,140(sp)
   2b2d8:	183fce1e 	bne	r3,zero,2b214 <__alt_data_end+0xfffeb644>
   2b2dc:	88c0040c 	andi	r3,r17,16
   2b2e0:	1801ed1e 	bne	r3,zero,2ba98 <___svfiprintf_internal_r+0xe84>
   2b2e4:	88c0100c 	andi	r3,r17,64
   2b2e8:	18021a26 	beq	r3,zero,2bb54 <___svfiprintf_internal_r+0xf40>
   2b2ec:	da802317 	ldw	r10,140(sp)
   2b2f0:	1240000b 	ldhu	r9,0(r2)
   2b2f4:	52800104 	addi	r10,r10,4
   2b2f8:	da802315 	stw	r10,140(sp)
   2b2fc:	0015883a 	mov	r10,zero
   2b300:	003fc906 	br	2b228 <__alt_data_end+0xfffeb658>
   2b304:	8c400414 	ori	r17,r17,16
   2b308:	d9801d85 	stb	r6,118(sp)
   2b30c:	8880080c 	andi	r2,r17,32
   2b310:	d8c02317 	ldw	r3,140(sp)
   2b314:	103f671e 	bne	r2,zero,2b0b4 <__alt_data_end+0xfffeb4e4>
   2b318:	8880040c 	andi	r2,r17,16
   2b31c:	1001c71e 	bne	r2,zero,2ba3c <___svfiprintf_internal_r+0xe28>
   2b320:	8880100c 	andi	r2,r17,64
   2b324:	1001c526 	beq	r2,zero,2ba3c <___svfiprintf_internal_r+0xe28>
   2b328:	1a40000f 	ldh	r9,0(r3)
   2b32c:	dac02317 	ldw	r11,140(sp)
   2b330:	4815d7fa 	srai	r10,r9,31
   2b334:	5ac00104 	addi	r11,r11,4
   2b338:	dac02315 	stw	r11,140(sp)
   2b33c:	5005883a 	mov	r2,r10
   2b340:	103f630e 	bge	r2,zero,2b0d0 <__alt_data_end+0xfffeb500>
   2b344:	0253c83a 	sub	r9,zero,r9
   2b348:	4804c03a 	cmpne	r2,r9,zero
   2b34c:	0295c83a 	sub	r10,zero,r10
   2b350:	5095c83a 	sub	r10,r10,r2
   2b354:	02c00b44 	movi	r11,45
   2b358:	dac01d85 	stb	r11,118(sp)
   2b35c:	8039883a 	mov	fp,r16
   2b360:	00800044 	movi	r2,1
   2b364:	4a86b03a 	or	r3,r9,r10
   2b368:	003ee606 	br	2af04 <__alt_data_end+0xfffeb334>
   2b36c:	a815883a 	mov	r10,r21
   2b370:	d8002115 	stw	zero,132(sp)
   2b374:	20bff404 	addi	r2,r4,-48
   2b378:	51000007 	ldb	r4,0(r10)
   2b37c:	da802117 	ldw	r10,132(sp)
   2b380:	ad400044 	addi	r21,r21,1
   2b384:	52c002a4 	muli	r11,r10,10
   2b388:	a815883a 	mov	r10,r21
   2b38c:	5885883a 	add	r2,r11,r2
   2b390:	d8802115 	stw	r2,132(sp)
   2b394:	20bff404 	addi	r2,r4,-48
   2b398:	28bff72e 	bgeu	r5,r2,2b378 <__alt_data_end+0xfffeb7a8>
   2b39c:	20bff804 	addi	r2,r4,-32
   2b3a0:	18be6b2e 	bgeu	r3,r2,2ad50 <__alt_data_end+0xfffeb180>
   2b3a4:	d9801d85 	stb	r6,118(sp)
   2b3a8:	2000ce26 	beq	r4,zero,2b6e4 <___svfiprintf_internal_r+0xad0>
   2b3ac:	02800044 	movi	r10,1
   2b3b0:	dac01004 	addi	r11,sp,64
   2b3b4:	da802015 	stw	r10,128(sp)
   2b3b8:	d9001005 	stb	r4,64(sp)
   2b3bc:	d8001d85 	stb	zero,118(sp)
   2b3c0:	5039883a 	mov	fp,r10
   2b3c4:	dac02615 	stw	r11,152(sp)
   2b3c8:	003f5106 	br	2b110 <__alt_data_end+0xfffeb540>
   2b3cc:	8c402014 	ori	r17,r17,128
   2b3d0:	a9000007 	ldb	r4,0(r21)
   2b3d4:	003e5b06 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b3d8:	01800ac4 	movi	r6,43
   2b3dc:	a9000007 	ldb	r4,0(r21)
   2b3e0:	003e5806 	br	2ad44 <__alt_data_end+0xfffeb174>
   2b3e4:	a9000007 	ldb	r4,0(r21)
   2b3e8:	aa800044 	addi	r10,r21,1
   2b3ec:	22421426 	beq	r4,r9,2bc40 <___svfiprintf_internal_r+0x102c>
   2b3f0:	20bff404 	addi	r2,r4,-48
   2b3f4:	502b883a 	mov	r21,r10
   2b3f8:	0021883a 	mov	r16,zero
   2b3fc:	28be5236 	bltu	r5,r2,2ad48 <__alt_data_end+0xfffeb178>
   2b400:	a9000007 	ldb	r4,0(r21)
   2b404:	840002a4 	muli	r16,r16,10
   2b408:	ad400044 	addi	r21,r21,1
   2b40c:	1421883a 	add	r16,r2,r16
   2b410:	20bff404 	addi	r2,r4,-48
   2b414:	28bffa2e 	bgeu	r5,r2,2b400 <__alt_data_end+0xfffeb830>
   2b418:	803e4b0e 	bge	r16,zero,2ad48 <__alt_data_end+0xfffeb178>
   2b41c:	043fffc4 	movi	r16,-1
   2b420:	003e4906 	br	2ad48 <__alt_data_end+0xfffeb178>
   2b424:	d8c01c17 	ldw	r3,112(sp)
   2b428:	d8801b17 	ldw	r2,108(sp)
   2b42c:	d9001d87 	ldb	r4,118(sp)
   2b430:	20000b26 	beq	r4,zero,2b460 <___svfiprintf_internal_r+0x84c>
   2b434:	d9001d84 	addi	r4,sp,118
   2b438:	18c00044 	addi	r3,r3,1
   2b43c:	10800044 	addi	r2,r2,1
   2b440:	41000015 	stw	r4,0(r8)
   2b444:	01000044 	movi	r4,1
   2b448:	41000115 	stw	r4,4(r8)
   2b44c:	d8c01c15 	stw	r3,112(sp)
   2b450:	d8801b15 	stw	r2,108(sp)
   2b454:	010001c4 	movi	r4,7
   2b458:	20811e16 	blt	r4,r2,2b8d4 <___svfiprintf_internal_r+0xcc0>
   2b45c:	42000204 	addi	r8,r8,8
   2b460:	da802217 	ldw	r10,136(sp)
   2b464:	50000b26 	beq	r10,zero,2b494 <___svfiprintf_internal_r+0x880>
   2b468:	d9001d04 	addi	r4,sp,116
   2b46c:	18c00084 	addi	r3,r3,2
   2b470:	10800044 	addi	r2,r2,1
   2b474:	41000015 	stw	r4,0(r8)
   2b478:	01000084 	movi	r4,2
   2b47c:	41000115 	stw	r4,4(r8)
   2b480:	d8c01c15 	stw	r3,112(sp)
   2b484:	d8801b15 	stw	r2,108(sp)
   2b488:	010001c4 	movi	r4,7
   2b48c:	20811a16 	blt	r4,r2,2b8f8 <___svfiprintf_internal_r+0xce4>
   2b490:	42000204 	addi	r8,r8,8
   2b494:	dac02517 	ldw	r11,148(sp)
   2b498:	01002004 	movi	r4,128
   2b49c:	5900a826 	beq	r11,r4,2b740 <___svfiprintf_internal_r+0xb2c>
   2b4a0:	8721c83a 	sub	r16,r16,fp
   2b4a4:	0400260e 	bge	zero,r16,2b540 <___svfiprintf_internal_r+0x92c>
   2b4a8:	01c00404 	movi	r7,16
   2b4ac:	3c01a50e 	bge	r7,r16,2bb44 <___svfiprintf_internal_r+0xf30>
   2b4b0:	010000f4 	movhi	r4,3
   2b4b4:	210e8c04 	addi	r4,r4,14896
   2b4b8:	d9002215 	stw	r4,136(sp)
   2b4bc:	382f883a 	mov	r23,r7
   2b4c0:	058001c4 	movi	r22,7
   2b4c4:	00000306 	br	2b4d4 <___svfiprintf_internal_r+0x8c0>
   2b4c8:	843ffc04 	addi	r16,r16,-16
   2b4cc:	42000204 	addi	r8,r8,8
   2b4d0:	bc00110e 	bge	r23,r16,2b518 <___svfiprintf_internal_r+0x904>
   2b4d4:	18c00404 	addi	r3,r3,16
   2b4d8:	10800044 	addi	r2,r2,1
   2b4dc:	44c00015 	stw	r19,0(r8)
   2b4e0:	45c00115 	stw	r23,4(r8)
   2b4e4:	d8c01c15 	stw	r3,112(sp)
   2b4e8:	d8801b15 	stw	r2,108(sp)
   2b4ec:	b0bff60e 	bge	r22,r2,2b4c8 <__alt_data_end+0xfffeb8f8>
   2b4f0:	9009883a 	mov	r4,r18
   2b4f4:	a00b883a 	mov	r5,r20
   2b4f8:	d9801a04 	addi	r6,sp,104
   2b4fc:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b500:	10007e1e 	bne	r2,zero,2b6fc <___svfiprintf_internal_r+0xae8>
   2b504:	843ffc04 	addi	r16,r16,-16
   2b508:	d8c01c17 	ldw	r3,112(sp)
   2b50c:	d8801b17 	ldw	r2,108(sp)
   2b510:	d811883a 	mov	r8,sp
   2b514:	bc3fef16 	blt	r23,r16,2b4d4 <__alt_data_end+0xfffeb904>
   2b518:	da802217 	ldw	r10,136(sp)
   2b51c:	1c07883a 	add	r3,r3,r16
   2b520:	10800044 	addi	r2,r2,1
   2b524:	42800015 	stw	r10,0(r8)
   2b528:	44000115 	stw	r16,4(r8)
   2b52c:	d8c01c15 	stw	r3,112(sp)
   2b530:	d8801b15 	stw	r2,108(sp)
   2b534:	010001c4 	movi	r4,7
   2b538:	2080ce16 	blt	r4,r2,2b874 <___svfiprintf_internal_r+0xc60>
   2b53c:	42000204 	addi	r8,r8,8
   2b540:	dac02617 	ldw	r11,152(sp)
   2b544:	e0c7883a 	add	r3,fp,r3
   2b548:	10800044 	addi	r2,r2,1
   2b54c:	42c00015 	stw	r11,0(r8)
   2b550:	47000115 	stw	fp,4(r8)
   2b554:	d8c01c15 	stw	r3,112(sp)
   2b558:	d8801b15 	stw	r2,108(sp)
   2b55c:	010001c4 	movi	r4,7
   2b560:	2080a316 	blt	r4,r2,2b7f0 <___svfiprintf_internal_r+0xbdc>
   2b564:	42000204 	addi	r8,r8,8
   2b568:	8c40010c 	andi	r17,r17,4
   2b56c:	88002b26 	beq	r17,zero,2b61c <___svfiprintf_internal_r+0xa08>
   2b570:	da802117 	ldw	r10,132(sp)
   2b574:	dac02017 	ldw	r11,128(sp)
   2b578:	52e1c83a 	sub	r16,r10,r11
   2b57c:	0400270e 	bge	zero,r16,2b61c <___svfiprintf_internal_r+0xa08>
   2b580:	04400404 	movi	r17,16
   2b584:	d8801b17 	ldw	r2,108(sp)
   2b588:	8c019e0e 	bge	r17,r16,2bc04 <___svfiprintf_internal_r+0xff0>
   2b58c:	014000f4 	movhi	r5,3
   2b590:	294e9004 	addi	r5,r5,14912
   2b594:	d9402815 	stw	r5,160(sp)
   2b598:	070001c4 	movi	fp,7
   2b59c:	00000306 	br	2b5ac <___svfiprintf_internal_r+0x998>
   2b5a0:	843ffc04 	addi	r16,r16,-16
   2b5a4:	42000204 	addi	r8,r8,8
   2b5a8:	8c00130e 	bge	r17,r16,2b5f8 <___svfiprintf_internal_r+0x9e4>
   2b5ac:	028000f4 	movhi	r10,3
   2b5b0:	18c00404 	addi	r3,r3,16
   2b5b4:	10800044 	addi	r2,r2,1
   2b5b8:	528e9004 	addi	r10,r10,14912
   2b5bc:	42800015 	stw	r10,0(r8)
   2b5c0:	44400115 	stw	r17,4(r8)
   2b5c4:	d8c01c15 	stw	r3,112(sp)
   2b5c8:	d8801b15 	stw	r2,108(sp)
   2b5cc:	e0bff40e 	bge	fp,r2,2b5a0 <__alt_data_end+0xfffeb9d0>
   2b5d0:	9009883a 	mov	r4,r18
   2b5d4:	a00b883a 	mov	r5,r20
   2b5d8:	d9801a04 	addi	r6,sp,104
   2b5dc:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b5e0:	1000461e 	bne	r2,zero,2b6fc <___svfiprintf_internal_r+0xae8>
   2b5e4:	843ffc04 	addi	r16,r16,-16
   2b5e8:	d8c01c17 	ldw	r3,112(sp)
   2b5ec:	d8801b17 	ldw	r2,108(sp)
   2b5f0:	d811883a 	mov	r8,sp
   2b5f4:	8c3fed16 	blt	r17,r16,2b5ac <__alt_data_end+0xfffeb9dc>
   2b5f8:	dac02817 	ldw	r11,160(sp)
   2b5fc:	1c07883a 	add	r3,r3,r16
   2b600:	10800044 	addi	r2,r2,1
   2b604:	42c00015 	stw	r11,0(r8)
   2b608:	44000115 	stw	r16,4(r8)
   2b60c:	d8c01c15 	stw	r3,112(sp)
   2b610:	d8801b15 	stw	r2,108(sp)
   2b614:	010001c4 	movi	r4,7
   2b618:	2080fe16 	blt	r4,r2,2ba14 <___svfiprintf_internal_r+0xe00>
   2b61c:	dd802017 	ldw	r22,128(sp)
   2b620:	da802117 	ldw	r10,132(sp)
   2b624:	b280010e 	bge	r22,r10,2b62c <___svfiprintf_internal_r+0xa18>
   2b628:	502d883a 	mov	r22,r10
   2b62c:	dac02417 	ldw	r11,144(sp)
   2b630:	5d97883a 	add	r11,r11,r22
   2b634:	dac02415 	stw	r11,144(sp)
   2b638:	1800751e 	bne	r3,zero,2b810 <___svfiprintf_internal_r+0xbfc>
   2b63c:	a8800007 	ldb	r2,0(r21)
   2b640:	d8001b15 	stw	zero,108(sp)
   2b644:	d811883a 	mov	r8,sp
   2b648:	103d981e 	bne	r2,zero,2acac <__alt_data_end+0xfffeb0dc>
   2b64c:	a82d883a 	mov	r22,r21
   2b650:	003daf06 	br	2ad10 <__alt_data_end+0xfffeb140>
   2b654:	10803fcc 	andi	r2,r2,255
   2b658:	00c00044 	movi	r3,1
   2b65c:	10fe311e 	bne	r2,r3,2af24 <__alt_data_end+0xfffeb354>
   2b660:	5000e126 	beq	r10,zero,2b9e8 <___svfiprintf_internal_r+0xdd4>
   2b664:	dc402015 	stw	r17,128(sp)
   2b668:	dc002215 	stw	r16,136(sp)
   2b66c:	dd801a04 	addi	r22,sp,104
   2b670:	402f883a 	mov	r23,r8
   2b674:	5839883a 	mov	fp,r11
   2b678:	4821883a 	mov	r16,r9
   2b67c:	5023883a 	mov	r17,r10
   2b680:	8009883a 	mov	r4,r16
   2b684:	880b883a 	mov	r5,r17
   2b688:	01800284 	movi	r6,10
   2b68c:	000f883a 	mov	r7,zero
   2b690:	002e0080 	call	2e008 <__umoddi3>
   2b694:	10800c04 	addi	r2,r2,48
   2b698:	b5bfffc4 	addi	r22,r22,-1
   2b69c:	8009883a 	mov	r4,r16
   2b6a0:	880b883a 	mov	r5,r17
   2b6a4:	01800284 	movi	r6,10
   2b6a8:	000f883a 	mov	r7,zero
   2b6ac:	b0800005 	stb	r2,0(r22)
   2b6b0:	002da480 	call	2da48 <__udivdi3>
   2b6b4:	1021883a 	mov	r16,r2
   2b6b8:	10c4b03a 	or	r2,r2,r3
   2b6bc:	1823883a 	mov	r17,r3
   2b6c0:	103fef1e 	bne	r2,zero,2b680 <__alt_data_end+0xfffebab0>
   2b6c4:	da801e17 	ldw	r10,120(sp)
   2b6c8:	e017883a 	mov	r11,fp
   2b6cc:	b811883a 	mov	r8,r23
   2b6d0:	dc402017 	ldw	r17,128(sp)
   2b6d4:	dc002217 	ldw	r16,136(sp)
   2b6d8:	dd802615 	stw	r22,152(sp)
   2b6dc:	55b9c83a 	sub	fp,r10,r22
   2b6e0:	003e2206 	br	2af6c <__alt_data_end+0xfffeb39c>
   2b6e4:	d8801c17 	ldw	r2,112(sp)
   2b6e8:	10000426 	beq	r2,zero,2b6fc <___svfiprintf_internal_r+0xae8>
   2b6ec:	d9002917 	ldw	r4,164(sp)
   2b6f0:	d9402717 	ldw	r5,156(sp)
   2b6f4:	d9801a04 	addi	r6,sp,104
   2b6f8:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b6fc:	da802717 	ldw	r10,156(sp)
   2b700:	5080030b 	ldhu	r2,12(r10)
   2b704:	1080100c 	andi	r2,r2,64
   2b708:	1000511e 	bne	r2,zero,2b850 <___svfiprintf_internal_r+0xc3c>
   2b70c:	d8802417 	ldw	r2,144(sp)
   2b710:	dfc03617 	ldw	ra,216(sp)
   2b714:	df003517 	ldw	fp,212(sp)
   2b718:	ddc03417 	ldw	r23,208(sp)
   2b71c:	dd803317 	ldw	r22,204(sp)
   2b720:	dd403217 	ldw	r21,200(sp)
   2b724:	dd003117 	ldw	r20,196(sp)
   2b728:	dcc03017 	ldw	r19,192(sp)
   2b72c:	dc802f17 	ldw	r18,188(sp)
   2b730:	dc402e17 	ldw	r17,184(sp)
   2b734:	dc002d17 	ldw	r16,180(sp)
   2b738:	dec03704 	addi	sp,sp,220
   2b73c:	f800283a 	ret
   2b740:	da802117 	ldw	r10,132(sp)
   2b744:	dac02017 	ldw	r11,128(sp)
   2b748:	52edc83a 	sub	r22,r10,r11
   2b74c:	05bf540e 	bge	zero,r22,2b4a0 <__alt_data_end+0xfffeb8d0>
   2b750:	02400404 	movi	r9,16
   2b754:	4d812f0e 	bge	r9,r22,2bc14 <___svfiprintf_internal_r+0x1000>
   2b758:	014000f4 	movhi	r5,3
   2b75c:	294e8c04 	addi	r5,r5,14896
   2b760:	d9402215 	stw	r5,136(sp)
   2b764:	05c001c4 	movi	r23,7
   2b768:	00000306 	br	2b778 <___svfiprintf_internal_r+0xb64>
   2b76c:	b5bffc04 	addi	r22,r22,-16
   2b770:	42000204 	addi	r8,r8,8
   2b774:	4d80130e 	bge	r9,r22,2b7c4 <___svfiprintf_internal_r+0xbb0>
   2b778:	18c00404 	addi	r3,r3,16
   2b77c:	10800044 	addi	r2,r2,1
   2b780:	44c00015 	stw	r19,0(r8)
   2b784:	42400115 	stw	r9,4(r8)
   2b788:	d8c01c15 	stw	r3,112(sp)
   2b78c:	d8801b15 	stw	r2,108(sp)
   2b790:	b8bff60e 	bge	r23,r2,2b76c <__alt_data_end+0xfffebb9c>
   2b794:	9009883a 	mov	r4,r18
   2b798:	a00b883a 	mov	r5,r20
   2b79c:	d9801a04 	addi	r6,sp,104
   2b7a0:	da402c15 	stw	r9,176(sp)
   2b7a4:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b7a8:	da402c17 	ldw	r9,176(sp)
   2b7ac:	103fd31e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b7b0:	b5bffc04 	addi	r22,r22,-16
   2b7b4:	d8c01c17 	ldw	r3,112(sp)
   2b7b8:	d8801b17 	ldw	r2,108(sp)
   2b7bc:	d811883a 	mov	r8,sp
   2b7c0:	4dbfed16 	blt	r9,r22,2b778 <__alt_data_end+0xfffebba8>
   2b7c4:	da802217 	ldw	r10,136(sp)
   2b7c8:	1d87883a 	add	r3,r3,r22
   2b7cc:	10800044 	addi	r2,r2,1
   2b7d0:	42800015 	stw	r10,0(r8)
   2b7d4:	45800115 	stw	r22,4(r8)
   2b7d8:	d8c01c15 	stw	r3,112(sp)
   2b7dc:	d8801b15 	stw	r2,108(sp)
   2b7e0:	010001c4 	movi	r4,7
   2b7e4:	2080ce16 	blt	r4,r2,2bb20 <___svfiprintf_internal_r+0xf0c>
   2b7e8:	42000204 	addi	r8,r8,8
   2b7ec:	003f2c06 	br	2b4a0 <__alt_data_end+0xfffeb8d0>
   2b7f0:	9009883a 	mov	r4,r18
   2b7f4:	a00b883a 	mov	r5,r20
   2b7f8:	d9801a04 	addi	r6,sp,104
   2b7fc:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b800:	103fbe1e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b804:	d8c01c17 	ldw	r3,112(sp)
   2b808:	d811883a 	mov	r8,sp
   2b80c:	003f5606 	br	2b568 <__alt_data_end+0xfffeb998>
   2b810:	9009883a 	mov	r4,r18
   2b814:	a00b883a 	mov	r5,r20
   2b818:	d9801a04 	addi	r6,sp,104
   2b81c:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b820:	103f8626 	beq	r2,zero,2b63c <__alt_data_end+0xfffeba6c>
   2b824:	003fb506 	br	2b6fc <__alt_data_end+0xfffebb2c>
   2b828:	10803fcc 	andi	r2,r2,255
   2b82c:	10003b1e 	bne	r2,zero,2b91c <___svfiprintf_internal_r+0xd08>
   2b830:	8880004c 	andi	r2,r17,1
   2b834:	10007e26 	beq	r2,zero,2ba30 <___svfiprintf_internal_r+0xe1c>
   2b838:	00800c04 	movi	r2,48
   2b83c:	d8c019c4 	addi	r3,sp,103
   2b840:	d88019c5 	stb	r2,103(sp)
   2b844:	df002b17 	ldw	fp,172(sp)
   2b848:	d8c02615 	stw	r3,152(sp)
   2b84c:	003dc706 	br	2af6c <__alt_data_end+0xfffeb39c>
   2b850:	00bfffc4 	movi	r2,-1
   2b854:	003fae06 	br	2b710 <__alt_data_end+0xfffebb40>
   2b858:	9009883a 	mov	r4,r18
   2b85c:	a00b883a 	mov	r5,r20
   2b860:	d9801a04 	addi	r6,sp,104
   2b864:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b868:	103fa41e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b86c:	d811883a 	mov	r8,sp
   2b870:	003d2406 	br	2ad04 <__alt_data_end+0xfffeb134>
   2b874:	9009883a 	mov	r4,r18
   2b878:	a00b883a 	mov	r5,r20
   2b87c:	d9801a04 	addi	r6,sp,104
   2b880:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b884:	103f9d1e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b888:	d8c01c17 	ldw	r3,112(sp)
   2b88c:	d8801b17 	ldw	r2,108(sp)
   2b890:	d811883a 	mov	r8,sp
   2b894:	003f2a06 	br	2b540 <__alt_data_end+0xfffeb970>
   2b898:	d9402a17 	ldw	r5,168(sp)
   2b89c:	d8c01a04 	addi	r3,sp,104
   2b8a0:	488003cc 	andi	r2,r9,15
   2b8a4:	5008973a 	slli	r4,r10,28
   2b8a8:	2885883a 	add	r2,r5,r2
   2b8ac:	4812d13a 	srli	r9,r9,4
   2b8b0:	10800003 	ldbu	r2,0(r2)
   2b8b4:	5014d13a 	srli	r10,r10,4
   2b8b8:	18ffffc4 	addi	r3,r3,-1
   2b8bc:	2252b03a 	or	r9,r4,r9
   2b8c0:	18800005 	stb	r2,0(r3)
   2b8c4:	4a84b03a 	or	r2,r9,r10
   2b8c8:	103ff51e 	bne	r2,zero,2b8a0 <__alt_data_end+0xfffebcd0>
   2b8cc:	d8c02615 	stw	r3,152(sp)
   2b8d0:	003da406 	br	2af64 <__alt_data_end+0xfffeb394>
   2b8d4:	9009883a 	mov	r4,r18
   2b8d8:	a00b883a 	mov	r5,r20
   2b8dc:	d9801a04 	addi	r6,sp,104
   2b8e0:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b8e4:	103f851e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b8e8:	d8c01c17 	ldw	r3,112(sp)
   2b8ec:	d8801b17 	ldw	r2,108(sp)
   2b8f0:	d811883a 	mov	r8,sp
   2b8f4:	003eda06 	br	2b460 <__alt_data_end+0xfffeb890>
   2b8f8:	9009883a 	mov	r4,r18
   2b8fc:	a00b883a 	mov	r5,r20
   2b900:	d9801a04 	addi	r6,sp,104
   2b904:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b908:	103f7c1e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b90c:	d8c01c17 	ldw	r3,112(sp)
   2b910:	d8801b17 	ldw	r2,108(sp)
   2b914:	d811883a 	mov	r8,sp
   2b918:	003ede06 	br	2b494 <__alt_data_end+0xfffeb8c4>
   2b91c:	da801a04 	addi	r10,sp,104
   2b920:	da802615 	stw	r10,152(sp)
   2b924:	003d9106 	br	2af6c <__alt_data_end+0xfffeb39c>
   2b928:	00800084 	movi	r2,2
   2b92c:	4a86b03a 	or	r3,r9,r10
   2b930:	003d7106 	br	2aef8 <__alt_data_end+0xfffeb328>
   2b934:	88c0040c 	andi	r3,r17,16
   2b938:	18004f1e 	bne	r3,zero,2ba78 <___svfiprintf_internal_r+0xe64>
   2b93c:	88c0100c 	andi	r3,r17,64
   2b940:	18004d26 	beq	r3,zero,2ba78 <___svfiprintf_internal_r+0xe64>
   2b944:	dac02317 	ldw	r11,140(sp)
   2b948:	1240000b 	ldhu	r9,0(r2)
   2b94c:	0015883a 	mov	r10,zero
   2b950:	5ac00104 	addi	r11,r11,4
   2b954:	dac02315 	stw	r11,140(sp)
   2b958:	00800044 	movi	r2,1
   2b95c:	4807883a 	mov	r3,r9
   2b960:	003d6506 	br	2aef8 <__alt_data_end+0xfffeb328>
   2b964:	9009883a 	mov	r4,r18
   2b968:	a00b883a 	mov	r5,r20
   2b96c:	d9801a04 	addi	r6,sp,104
   2b970:	002aa4c0 	call	2aa4c <__ssprint_r>
   2b974:	103f611e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2b978:	d8c01c17 	ldw	r3,112(sp)
   2b97c:	d8801b17 	ldw	r2,108(sp)
   2b980:	d811883a 	mov	r8,sp
   2b984:	003ea906 	br	2b42c <__alt_data_end+0xfffeb85c>
   2b988:	88c0040c 	andi	r3,r17,16
   2b98c:	1800321e 	bne	r3,zero,2ba58 <___svfiprintf_internal_r+0xe44>
   2b990:	88c0100c 	andi	r3,r17,64
   2b994:	18003026 	beq	r3,zero,2ba58 <___svfiprintf_internal_r+0xe44>
   2b998:	dac02317 	ldw	r11,140(sp)
   2b99c:	1240000b 	ldhu	r9,0(r2)
   2b9a0:	0015883a 	mov	r10,zero
   2b9a4:	5ac00104 	addi	r11,r11,4
   2b9a8:	dac02315 	stw	r11,140(sp)
   2b9ac:	0005883a 	mov	r2,zero
   2b9b0:	4807883a 	mov	r3,r9
   2b9b4:	003d5006 	br	2aef8 <__alt_data_end+0xfffeb328>
   2b9b8:	10803fcc 	andi	r2,r2,255
   2b9bc:	1080201c 	xori	r2,r2,128
   2b9c0:	10bfe004 	addi	r2,r2,-128
   2b9c4:	01000c04 	movi	r4,48
   2b9c8:	11006826 	beq	r2,r4,2bb6c <___svfiprintf_internal_r+0xf58>
   2b9cc:	da802617 	ldw	r10,152(sp)
   2b9d0:	d8801e17 	ldw	r2,120(sp)
   2b9d4:	193fffc5 	stb	r4,-1(r3)
   2b9d8:	52bfffc4 	addi	r10,r10,-1
   2b9dc:	da802615 	stw	r10,152(sp)
   2b9e0:	12b9c83a 	sub	fp,r2,r10
   2b9e4:	003d6106 	br	2af6c <__alt_data_end+0xfffeb39c>
   2b9e8:	00800244 	movi	r2,9
   2b9ec:	127f1d36 	bltu	r2,r9,2b664 <__alt_data_end+0xfffeba94>
   2b9f0:	4a400c04 	addi	r9,r9,48
   2b9f4:	d8c019c4 	addi	r3,sp,103
   2b9f8:	da4019c5 	stb	r9,103(sp)
   2b9fc:	df002b17 	ldw	fp,172(sp)
   2ba00:	d8c02615 	stw	r3,152(sp)
   2ba04:	003d5906 	br	2af6c <__alt_data_end+0xfffeb39c>
   2ba08:	d8802315 	stw	r2,140(sp)
   2ba0c:	a9000007 	ldb	r4,0(r21)
   2ba10:	003ccc06 	br	2ad44 <__alt_data_end+0xfffeb174>
   2ba14:	9009883a 	mov	r4,r18
   2ba18:	a00b883a 	mov	r5,r20
   2ba1c:	d9801a04 	addi	r6,sp,104
   2ba20:	002aa4c0 	call	2aa4c <__ssprint_r>
   2ba24:	103f351e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2ba28:	d8c01c17 	ldw	r3,112(sp)
   2ba2c:	003efb06 	br	2b61c <__alt_data_end+0xfffeba4c>
   2ba30:	d8c01a04 	addi	r3,sp,104
   2ba34:	d8c02615 	stw	r3,152(sp)
   2ba38:	003d4c06 	br	2af6c <__alt_data_end+0xfffeb39c>
   2ba3c:	da802317 	ldw	r10,140(sp)
   2ba40:	1a400017 	ldw	r9,0(r3)
   2ba44:	52800104 	addi	r10,r10,4
   2ba48:	da802315 	stw	r10,140(sp)
   2ba4c:	4815d7fa 	srai	r10,r9,31
   2ba50:	5005883a 	mov	r2,r10
   2ba54:	003d9d06 	br	2b0cc <__alt_data_end+0xfffeb4fc>
   2ba58:	da802317 	ldw	r10,140(sp)
   2ba5c:	12400017 	ldw	r9,0(r2)
   2ba60:	0005883a 	mov	r2,zero
   2ba64:	52800104 	addi	r10,r10,4
   2ba68:	da802315 	stw	r10,140(sp)
   2ba6c:	4807883a 	mov	r3,r9
   2ba70:	0015883a 	mov	r10,zero
   2ba74:	003d2006 	br	2aef8 <__alt_data_end+0xfffeb328>
   2ba78:	da802317 	ldw	r10,140(sp)
   2ba7c:	12400017 	ldw	r9,0(r2)
   2ba80:	00800044 	movi	r2,1
   2ba84:	52800104 	addi	r10,r10,4
   2ba88:	da802315 	stw	r10,140(sp)
   2ba8c:	4807883a 	mov	r3,r9
   2ba90:	0015883a 	mov	r10,zero
   2ba94:	003d1806 	br	2aef8 <__alt_data_end+0xfffeb328>
   2ba98:	dac02317 	ldw	r11,140(sp)
   2ba9c:	12400017 	ldw	r9,0(r2)
   2baa0:	0015883a 	mov	r10,zero
   2baa4:	5ac00104 	addi	r11,r11,4
   2baa8:	dac02315 	stw	r11,140(sp)
   2baac:	003dde06 	br	2b228 <__alt_data_end+0xfffeb658>
   2bab0:	a9000007 	ldb	r4,0(r21)
   2bab4:	003ca306 	br	2ad44 <__alt_data_end+0xfffeb174>
   2bab8:	dac02317 	ldw	r11,140(sp)
   2babc:	da802417 	ldw	r10,144(sp)
   2bac0:	58800017 	ldw	r2,0(r11)
   2bac4:	5007d7fa 	srai	r3,r10,31
   2bac8:	5ac00104 	addi	r11,r11,4
   2bacc:	dac02315 	stw	r11,140(sp)
   2bad0:	12800015 	stw	r10,0(r2)
   2bad4:	10c00115 	stw	r3,4(r2)
   2bad8:	003c7206 	br	2aca4 <__alt_data_end+0xfffeb0d4>
   2badc:	00800c04 	movi	r2,48
   2bae0:	d8801d05 	stb	r2,116(sp)
   2bae4:	d9001d45 	stb	r4,117(sp)
   2bae8:	8c400094 	ori	r17,r17,2
   2baec:	00800084 	movi	r2,2
   2baf0:	003d0106 	br	2aef8 <__alt_data_end+0xfffeb328>
   2baf4:	ad400044 	addi	r21,r21,1
   2baf8:	8c400814 	ori	r17,r17,32
   2bafc:	11000047 	ldb	r4,1(r2)
   2bb00:	003c9006 	br	2ad44 <__alt_data_end+0xfffeb174>
   2bb04:	dac02317 	ldw	r11,140(sp)
   2bb08:	da802417 	ldw	r10,144(sp)
   2bb0c:	58800017 	ldw	r2,0(r11)
   2bb10:	5ac00104 	addi	r11,r11,4
   2bb14:	dac02315 	stw	r11,140(sp)
   2bb18:	12800015 	stw	r10,0(r2)
   2bb1c:	003c6106 	br	2aca4 <__alt_data_end+0xfffeb0d4>
   2bb20:	9009883a 	mov	r4,r18
   2bb24:	a00b883a 	mov	r5,r20
   2bb28:	d9801a04 	addi	r6,sp,104
   2bb2c:	002aa4c0 	call	2aa4c <__ssprint_r>
   2bb30:	103ef21e 	bne	r2,zero,2b6fc <__alt_data_end+0xfffebb2c>
   2bb34:	d8c01c17 	ldw	r3,112(sp)
   2bb38:	d8801b17 	ldw	r2,108(sp)
   2bb3c:	d811883a 	mov	r8,sp
   2bb40:	003e5706 	br	2b4a0 <__alt_data_end+0xfffeb8d0>
   2bb44:	02c000f4 	movhi	r11,3
   2bb48:	5ace8c04 	addi	r11,r11,14896
   2bb4c:	dac02215 	stw	r11,136(sp)
   2bb50:	003e7106 	br	2b518 <__alt_data_end+0xfffeb948>
   2bb54:	dac02317 	ldw	r11,140(sp)
   2bb58:	12400017 	ldw	r9,0(r2)
   2bb5c:	0015883a 	mov	r10,zero
   2bb60:	5ac00104 	addi	r11,r11,4
   2bb64:	dac02315 	stw	r11,140(sp)
   2bb68:	003daf06 	br	2b228 <__alt_data_end+0xfffeb658>
   2bb6c:	da801e17 	ldw	r10,120(sp)
   2bb70:	d8c02617 	ldw	r3,152(sp)
   2bb74:	50f9c83a 	sub	fp,r10,r3
   2bb78:	003cfc06 	br	2af6c <__alt_data_end+0xfffeb39c>
   2bb7c:	da002c15 	stw	r8,176(sp)
   2bb80:	00217a80 	call	217a8 <strlen>
   2bb84:	1039883a 	mov	fp,r2
   2bb88:	dac01d83 	ldbu	r11,118(sp)
   2bb8c:	ddc02315 	stw	r23,140(sp)
   2bb90:	0021883a 	mov	r16,zero
   2bb94:	da002c17 	ldw	r8,176(sp)
   2bb98:	003cf406 	br	2af6c <__alt_data_end+0xfffeb39c>
   2bb9c:	04001004 	movi	r16,64
   2bba0:	800b883a 	mov	r5,r16
   2bba4:	00286300 	call	28630 <_malloc_r>
   2bba8:	da802717 	ldw	r10,156(sp)
   2bbac:	50800015 	stw	r2,0(r10)
   2bbb0:	50800415 	stw	r2,16(r10)
   2bbb4:	10002c26 	beq	r2,zero,2bc68 <___svfiprintf_internal_r+0x1054>
   2bbb8:	da802717 	ldw	r10,156(sp)
   2bbbc:	54000515 	stw	r16,20(r10)
   2bbc0:	003c2806 	br	2ac64 <__alt_data_end+0xfffeb094>
   2bbc4:	00800184 	movi	r2,6
   2bbc8:	1400012e 	bgeu	r2,r16,2bbd0 <___svfiprintf_internal_r+0xfbc>
   2bbcc:	1021883a 	mov	r16,r2
   2bbd0:	8039883a 	mov	fp,r16
   2bbd4:	802d883a 	mov	r22,r16
   2bbd8:	80001716 	blt	r16,zero,2bc38 <___svfiprintf_internal_r+0x1024>
   2bbdc:	008000f4 	movhi	r2,3
   2bbe0:	108e2804 	addi	r2,r2,14496
   2bbe4:	dd802015 	stw	r22,128(sp)
   2bbe8:	ddc02315 	stw	r23,140(sp)
   2bbec:	d8802615 	stw	r2,152(sp)
   2bbf0:	003d4706 	br	2b110 <__alt_data_end+0xfffeb540>
   2bbf4:	010000f4 	movhi	r4,3
   2bbf8:	210e9004 	addi	r4,r4,14912
   2bbfc:	d9002815 	stw	r4,160(sp)
   2bc00:	003d7206 	br	2b1cc <__alt_data_end+0xfffeb5fc>
   2bc04:	010000f4 	movhi	r4,3
   2bc08:	210e9004 	addi	r4,r4,14912
   2bc0c:	d9002815 	stw	r4,160(sp)
   2bc10:	003e7906 	br	2b5f8 <__alt_data_end+0xfffeba28>
   2bc14:	010000f4 	movhi	r4,3
   2bc18:	210e8c04 	addi	r4,r4,14896
   2bc1c:	d9002215 	stw	r4,136(sp)
   2bc20:	003ee806 	br	2b7c4 <__alt_data_end+0xfffebbf4>
   2bc24:	8039883a 	mov	fp,r16
   2bc28:	dac01d83 	ldbu	r11,118(sp)
   2bc2c:	ddc02315 	stw	r23,140(sp)
   2bc30:	0021883a 	mov	r16,zero
   2bc34:	003ccd06 	br	2af6c <__alt_data_end+0xfffeb39c>
   2bc38:	002d883a 	mov	r22,zero
   2bc3c:	003fe706 	br	2bbdc <__alt_data_end+0xfffec00c>
   2bc40:	dac02317 	ldw	r11,140(sp)
   2bc44:	a805883a 	mov	r2,r21
   2bc48:	502b883a 	mov	r21,r10
   2bc4c:	5c000017 	ldw	r16,0(r11)
   2bc50:	59000104 	addi	r4,r11,4
   2bc54:	d9002315 	stw	r4,140(sp)
   2bc58:	803fa80e 	bge	r16,zero,2bafc <__alt_data_end+0xfffebf2c>
   2bc5c:	043fffc4 	movi	r16,-1
   2bc60:	11000047 	ldb	r4,1(r2)
   2bc64:	003c3706 	br	2ad44 <__alt_data_end+0xfffeb174>
   2bc68:	dac02917 	ldw	r11,164(sp)
   2bc6c:	00800304 	movi	r2,12
   2bc70:	58800015 	stw	r2,0(r11)
   2bc74:	00bfffc4 	movi	r2,-1
   2bc78:	003ea506 	br	2b710 <__alt_data_end+0xfffebb40>

0002bc7c <__sprint_r.part.0>:
   2bc7c:	28801917 	ldw	r2,100(r5)
   2bc80:	defff604 	addi	sp,sp,-40
   2bc84:	dd400515 	stw	r21,20(sp)
   2bc88:	dcc00315 	stw	r19,12(sp)
   2bc8c:	dfc00915 	stw	ra,36(sp)
   2bc90:	df000815 	stw	fp,32(sp)
   2bc94:	ddc00715 	stw	r23,28(sp)
   2bc98:	dd800615 	stw	r22,24(sp)
   2bc9c:	dd000415 	stw	r20,16(sp)
   2bca0:	dc800215 	stw	r18,8(sp)
   2bca4:	dc400115 	stw	r17,4(sp)
   2bca8:	dc000015 	stw	r16,0(sp)
   2bcac:	1088000c 	andi	r2,r2,8192
   2bcb0:	2827883a 	mov	r19,r5
   2bcb4:	302b883a 	mov	r21,r6
   2bcb8:	10002d26 	beq	r2,zero,2bd70 <__sprint_r.part.0+0xf4>
   2bcbc:	30800217 	ldw	r2,8(r6)
   2bcc0:	35800017 	ldw	r22,0(r6)
   2bcc4:	10002826 	beq	r2,zero,2bd68 <__sprint_r.part.0+0xec>
   2bcc8:	2029883a 	mov	r20,r4
   2bccc:	b5c00104 	addi	r23,r22,4
   2bcd0:	04bfffc4 	movi	r18,-1
   2bcd4:	bc400017 	ldw	r17,0(r23)
   2bcd8:	b4000017 	ldw	r16,0(r22)
   2bcdc:	0039883a 	mov	fp,zero
   2bce0:	8822d0ba 	srli	r17,r17,2
   2bce4:	04400316 	blt	zero,r17,2bcf4 <__sprint_r.part.0+0x78>
   2bce8:	00001706 	br	2bd48 <__sprint_r.part.0+0xcc>
   2bcec:	84000104 	addi	r16,r16,4
   2bcf0:	8f001526 	beq	r17,fp,2bd48 <__sprint_r.part.0+0xcc>
   2bcf4:	81400017 	ldw	r5,0(r16)
   2bcf8:	a009883a 	mov	r4,r20
   2bcfc:	980d883a 	mov	r6,r19
   2bd00:	002d3980 	call	2d398 <_fputwc_r>
   2bd04:	e7000044 	addi	fp,fp,1
   2bd08:	14bff81e 	bne	r2,r18,2bcec <__alt_data_end+0xfffec11c>
   2bd0c:	9005883a 	mov	r2,r18
   2bd10:	a8000215 	stw	zero,8(r21)
   2bd14:	a8000115 	stw	zero,4(r21)
   2bd18:	dfc00917 	ldw	ra,36(sp)
   2bd1c:	df000817 	ldw	fp,32(sp)
   2bd20:	ddc00717 	ldw	r23,28(sp)
   2bd24:	dd800617 	ldw	r22,24(sp)
   2bd28:	dd400517 	ldw	r21,20(sp)
   2bd2c:	dd000417 	ldw	r20,16(sp)
   2bd30:	dcc00317 	ldw	r19,12(sp)
   2bd34:	dc800217 	ldw	r18,8(sp)
   2bd38:	dc400117 	ldw	r17,4(sp)
   2bd3c:	dc000017 	ldw	r16,0(sp)
   2bd40:	dec00a04 	addi	sp,sp,40
   2bd44:	f800283a 	ret
   2bd48:	a8c00217 	ldw	r3,8(r21)
   2bd4c:	8c63883a 	add	r17,r17,r17
   2bd50:	8c63883a 	add	r17,r17,r17
   2bd54:	1c45c83a 	sub	r2,r3,r17
   2bd58:	a8800215 	stw	r2,8(r21)
   2bd5c:	b5800204 	addi	r22,r22,8
   2bd60:	bdc00204 	addi	r23,r23,8
   2bd64:	103fdb1e 	bne	r2,zero,2bcd4 <__alt_data_end+0xfffec104>
   2bd68:	0005883a 	mov	r2,zero
   2bd6c:	003fe806 	br	2bd10 <__alt_data_end+0xfffec140>
   2bd70:	0027d840 	call	27d84 <__sfvwrite_r>
   2bd74:	003fe606 	br	2bd10 <__alt_data_end+0xfffec140>

0002bd78 <__sprint_r>:
   2bd78:	30c00217 	ldw	r3,8(r6)
   2bd7c:	18000126 	beq	r3,zero,2bd84 <__sprint_r+0xc>
   2bd80:	002bc7c1 	jmpi	2bc7c <__sprint_r.part.0>
   2bd84:	30000115 	stw	zero,4(r6)
   2bd88:	0005883a 	mov	r2,zero
   2bd8c:	f800283a 	ret

0002bd90 <___vfiprintf_internal_r>:
   2bd90:	defeca04 	addi	sp,sp,-1240
   2bd94:	dd813215 	stw	r22,1224(sp)
   2bd98:	dd013015 	stw	r20,1216(sp)
   2bd9c:	dfc13515 	stw	ra,1236(sp)
   2bda0:	df013415 	stw	fp,1232(sp)
   2bda4:	ddc13315 	stw	r23,1228(sp)
   2bda8:	dd413115 	stw	r21,1220(sp)
   2bdac:	dcc12f15 	stw	r19,1212(sp)
   2bdb0:	dc812e15 	stw	r18,1208(sp)
   2bdb4:	dc412d15 	stw	r17,1204(sp)
   2bdb8:	dc012c15 	stw	r16,1200(sp)
   2bdbc:	d9012015 	stw	r4,1152(sp)
   2bdc0:	d9c12115 	stw	r7,1156(sp)
   2bdc4:	2829883a 	mov	r20,r5
   2bdc8:	302d883a 	mov	r22,r6
   2bdcc:	20000226 	beq	r4,zero,2bdd8 <___vfiprintf_internal_r+0x48>
   2bdd0:	20800e17 	ldw	r2,56(r4)
   2bdd4:	1001d326 	beq	r2,zero,2c524 <___vfiprintf_internal_r+0x794>
   2bdd8:	a0c0030b 	ldhu	r3,12(r20)
   2bddc:	1908000c 	andi	r4,r3,8192
   2bde0:	1805883a 	mov	r2,r3
   2bde4:	2000071e 	bne	r4,zero,2be04 <___vfiprintf_internal_r+0x74>
   2bde8:	a1001917 	ldw	r4,100(r20)
   2bdec:	18880014 	ori	r2,r3,8192
   2bdf0:	00f7ffc4 	movi	r3,-8193
   2bdf4:	20c8703a 	and	r4,r4,r3
   2bdf8:	a080030d 	sth	r2,12(r20)
   2bdfc:	1007883a 	mov	r3,r2
   2be00:	a1001915 	stw	r4,100(r20)
   2be04:	1100020c 	andi	r4,r2,8
   2be08:	20018926 	beq	r4,zero,2c430 <___vfiprintf_internal_r+0x6a0>
   2be0c:	a1000417 	ldw	r4,16(r20)
   2be10:	20018726 	beq	r4,zero,2c430 <___vfiprintf_internal_r+0x6a0>
   2be14:	1080068c 	andi	r2,r2,26
   2be18:	01000284 	movi	r4,10
   2be1c:	11018d26 	beq	r2,r4,2c454 <___vfiprintf_internal_r+0x6c4>
   2be20:	da810a04 	addi	r10,sp,1064
   2be24:	dac109c4 	addi	r11,sp,1063
   2be28:	070000f4 	movhi	fp,3
   2be2c:	05c000f4 	movhi	r23,3
   2be30:	da811e15 	stw	r10,1144(sp)
   2be34:	52d5c83a 	sub	r10,r10,r11
   2be38:	e70e9804 	addi	fp,fp,14944
   2be3c:	bdce9404 	addi	r23,r23,14928
   2be40:	dac11f15 	stw	r11,1148(sp)
   2be44:	dec11a15 	stw	sp,1128(sp)
   2be48:	d8011c15 	stw	zero,1136(sp)
   2be4c:	d8011b15 	stw	zero,1132(sp)
   2be50:	d8012615 	stw	zero,1176(sp)
   2be54:	d8012215 	stw	zero,1160(sp)
   2be58:	da812715 	stw	r10,1180(sp)
   2be5c:	d811883a 	mov	r8,sp
   2be60:	b021883a 	mov	r16,r22
   2be64:	80800007 	ldb	r2,0(r16)
   2be68:	10039c26 	beq	r2,zero,2ccdc <___vfiprintf_internal_r+0xf4c>
   2be6c:	01000944 	movi	r4,37
   2be70:	11039a26 	beq	r2,r4,2ccdc <___vfiprintf_internal_r+0xf4c>
   2be74:	8005883a 	mov	r2,r16
   2be78:	00000106 	br	2be80 <___vfiprintf_internal_r+0xf0>
   2be7c:	19000326 	beq	r3,r4,2be8c <___vfiprintf_internal_r+0xfc>
   2be80:	10800044 	addi	r2,r2,1
   2be84:	10c00007 	ldb	r3,0(r2)
   2be88:	183ffc1e 	bne	r3,zero,2be7c <__alt_data_end+0xfffec2ac>
   2be8c:	1425c83a 	sub	r18,r2,r16
   2be90:	1023883a 	mov	r17,r2
   2be94:	90001026 	beq	r18,zero,2bed8 <___vfiprintf_internal_r+0x148>
   2be98:	d8c11c17 	ldw	r3,1136(sp)
   2be9c:	d8811b17 	ldw	r2,1132(sp)
   2bea0:	44000015 	stw	r16,0(r8)
   2bea4:	90c7883a 	add	r3,r18,r3
   2bea8:	10800044 	addi	r2,r2,1
   2beac:	44800115 	stw	r18,4(r8)
   2beb0:	d8c11c15 	stw	r3,1136(sp)
   2beb4:	d8811b15 	stw	r2,1132(sp)
   2beb8:	010001c4 	movi	r4,7
   2bebc:	2080750e 	bge	r4,r2,2c094 <___vfiprintf_internal_r+0x304>
   2bec0:	18039d1e 	bne	r3,zero,2cd38 <___vfiprintf_internal_r+0xfa8>
   2bec4:	dac12217 	ldw	r11,1160(sp)
   2bec8:	d8011b15 	stw	zero,1132(sp)
   2becc:	d811883a 	mov	r8,sp
   2bed0:	5c97883a 	add	r11,r11,r18
   2bed4:	dac12215 	stw	r11,1160(sp)
   2bed8:	88800007 	ldb	r2,0(r17)
   2bedc:	1002e026 	beq	r2,zero,2ca60 <___vfiprintf_internal_r+0xcd0>
   2bee0:	88c00047 	ldb	r3,1(r17)
   2bee4:	8c000044 	addi	r16,r17,1
   2bee8:	d8011d85 	stb	zero,1142(sp)
   2beec:	000d883a 	mov	r6,zero
   2bef0:	027fffc4 	movi	r9,-1
   2bef4:	0027883a 	mov	r19,zero
   2bef8:	002b883a 	mov	r21,zero
   2befc:	01001604 	movi	r4,88
   2bf00:	01400244 	movi	r5,9
   2bf04:	03000a84 	movi	r12,42
   2bf08:	01c01b04 	movi	r7,108
   2bf0c:	84000044 	addi	r16,r16,1
   2bf10:	18bff804 	addi	r2,r3,-32
   2bf14:	20825f36 	bltu	r4,r2,2c894 <___vfiprintf_internal_r+0xb04>
   2bf18:	100490ba 	slli	r2,r2,2
   2bf1c:	028000f4 	movhi	r10,3
   2bf20:	52afcc04 	addi	r10,r10,-16592
   2bf24:	1285883a 	add	r2,r2,r10
   2bf28:	10800017 	ldw	r2,0(r2)
   2bf2c:	1000683a 	jmp	r2
   2bf30:	0002c704 	movi	zero,2844
   2bf34:	0002c894 	movui	zero,2850
   2bf38:	0002c894 	movui	zero,2850
   2bf3c:	0002c888 	cmpgei	zero,zero,2850
   2bf40:	0002c894 	movui	zero,2850
   2bf44:	0002c894 	movui	zero,2850
   2bf48:	0002c894 	movui	zero,2850
   2bf4c:	0002c894 	movui	zero,2850
   2bf50:	0002c894 	movui	zero,2850
   2bf54:	0002c894 	movui	zero,2850
   2bf58:	0002c860 	cmpeqi	zero,zero,2849
   2bf5c:	0002c87c 	xorhi	zero,zero,2849
   2bf60:	0002c894 	movui	zero,2850
   2bf64:	0002c534 	movhi	zero,2836
   2bf68:	0002c694 	movui	zero,2842
   2bf6c:	0002c894 	movui	zero,2850
   2bf70:	0002c618 	cmpnei	zero,zero,2840
   2bf74:	0002c624 	muli	zero,zero,2840
   2bf78:	0002c624 	muli	zero,zero,2840
   2bf7c:	0002c624 	muli	zero,zero,2840
   2bf80:	0002c624 	muli	zero,zero,2840
   2bf84:	0002c624 	muli	zero,zero,2840
   2bf88:	0002c624 	muli	zero,zero,2840
   2bf8c:	0002c624 	muli	zero,zero,2840
   2bf90:	0002c624 	muli	zero,zero,2840
   2bf94:	0002c624 	muli	zero,zero,2840
   2bf98:	0002c894 	movui	zero,2850
   2bf9c:	0002c894 	movui	zero,2850
   2bfa0:	0002c894 	movui	zero,2850
   2bfa4:	0002c894 	movui	zero,2850
   2bfa8:	0002c894 	movui	zero,2850
   2bfac:	0002c894 	movui	zero,2850
   2bfb0:	0002c894 	movui	zero,2850
   2bfb4:	0002c894 	movui	zero,2850
   2bfb8:	0002c894 	movui	zero,2850
   2bfbc:	0002c894 	movui	zero,2850
   2bfc0:	0002c650 	cmplti	zero,zero,2841
   2bfc4:	0002c894 	movui	zero,2850
   2bfc8:	0002c894 	movui	zero,2850
   2bfcc:	0002c894 	movui	zero,2850
   2bfd0:	0002c894 	movui	zero,2850
   2bfd4:	0002c894 	movui	zero,2850
   2bfd8:	0002c894 	movui	zero,2850
   2bfdc:	0002c894 	movui	zero,2850
   2bfe0:	0002c894 	movui	zero,2850
   2bfe4:	0002c894 	movui	zero,2850
   2bfe8:	0002c894 	movui	zero,2850
   2bfec:	0002c0e4 	muli	zero,zero,2819
   2bff0:	0002c894 	movui	zero,2850
   2bff4:	0002c894 	movui	zero,2850
   2bff8:	0002c894 	movui	zero,2850
   2bffc:	0002c894 	movui	zero,2850
   2c000:	0002c894 	movui	zero,2850
   2c004:	0002c0a8 	cmpgeui	zero,zero,2818
   2c008:	0002c894 	movui	zero,2850
   2c00c:	0002c894 	movui	zero,2850
   2c010:	0002c590 	cmplti	zero,zero,2838
   2c014:	0002c894 	movui	zero,2850
   2c018:	0002c894 	movui	zero,2850
   2c01c:	0002c894 	movui	zero,2850
   2c020:	0002c894 	movui	zero,2850
   2c024:	0002c894 	movui	zero,2850
   2c028:	0002c894 	movui	zero,2850
   2c02c:	0002c894 	movui	zero,2850
   2c030:	0002c894 	movui	zero,2850
   2c034:	0002c894 	movui	zero,2850
   2c038:	0002c894 	movui	zero,2850
   2c03c:	0002c5e8 	cmpgeui	zero,zero,2839
   2c040:	0002c780 	call	2c78 <__reset-0x1d388>
   2c044:	0002c894 	movui	zero,2850
   2c048:	0002c894 	movui	zero,2850
   2c04c:	0002c894 	movui	zero,2850
   2c050:	0002c808 	cmpgei	zero,zero,2848
   2c054:	0002c780 	call	2c78 <__reset-0x1d388>
   2c058:	0002c894 	movui	zero,2850
   2c05c:	0002c894 	movui	zero,2850
   2c060:	0002c814 	movui	zero,2848
   2c064:	0002c894 	movui	zero,2850
   2c068:	0002c6d4 	movui	zero,2843
   2c06c:	0002c0e8 	cmpgeui	zero,zero,2819
   2c070:	0002c7bc 	xorhi	zero,zero,2846
   2c074:	0002c7fc 	xorhi	zero,zero,2847
   2c078:	0002c894 	movui	zero,2850
   2c07c:	0002c720 	cmpeqi	zero,zero,2844
   2c080:	0002c894 	movui	zero,2850
   2c084:	0002c0ac 	andhi	zero,zero,2818
   2c088:	0002c894 	movui	zero,2850
   2c08c:	0002c894 	movui	zero,2850
   2c090:	0002c824 	muli	zero,zero,2848
   2c094:	42000204 	addi	r8,r8,8
   2c098:	dac12217 	ldw	r11,1160(sp)
   2c09c:	5c97883a 	add	r11,r11,r18
   2c0a0:	dac12215 	stw	r11,1160(sp)
   2c0a4:	003f8c06 	br	2bed8 <__alt_data_end+0xfffec308>
   2c0a8:	ad400414 	ori	r21,r21,16
   2c0ac:	a880080c 	andi	r2,r21,32
   2c0b0:	10012f1e 	bne	r2,zero,2c570 <___vfiprintf_internal_r+0x7e0>
   2c0b4:	a880040c 	andi	r2,r21,16
   2c0b8:	1001ff1e 	bne	r2,zero,2c8b8 <___vfiprintf_internal_r+0xb28>
   2c0bc:	a880100c 	andi	r2,r21,64
   2c0c0:	1001fd26 	beq	r2,zero,2c8b8 <___vfiprintf_internal_r+0xb28>
   2c0c4:	da812117 	ldw	r10,1156(sp)
   2c0c8:	002d883a 	mov	r22,zero
   2c0cc:	00800044 	movi	r2,1
   2c0d0:	5480000b 	ldhu	r18,0(r10)
   2c0d4:	52800104 	addi	r10,r10,4
   2c0d8:	da812115 	stw	r10,1156(sp)
   2c0dc:	9009883a 	mov	r4,r18
   2c0e0:	00000a06 	br	2c10c <___vfiprintf_internal_r+0x37c>
   2c0e4:	ad400414 	ori	r21,r21,16
   2c0e8:	a880080c 	andi	r2,r21,32
   2c0ec:	10011426 	beq	r2,zero,2c540 <___vfiprintf_internal_r+0x7b0>
   2c0f0:	da812117 	ldw	r10,1156(sp)
   2c0f4:	0005883a 	mov	r2,zero
   2c0f8:	54800017 	ldw	r18,0(r10)
   2c0fc:	55800117 	ldw	r22,4(r10)
   2c100:	52800204 	addi	r10,r10,8
   2c104:	da812115 	stw	r10,1156(sp)
   2c108:	9588b03a 	or	r4,r18,r22
   2c10c:	d8011d85 	stb	zero,1142(sp)
   2c110:	4823883a 	mov	r17,r9
   2c114:	0019883a 	mov	r12,zero
   2c118:	48000216 	blt	r9,zero,2c124 <___vfiprintf_internal_r+0x394>
   2c11c:	00ffdfc4 	movi	r3,-129
   2c120:	a8ea703a 	and	r21,r21,r3
   2c124:	2002221e 	bne	r4,zero,2c9b0 <___vfiprintf_internal_r+0xc20>
   2c128:	4802c726 	beq	r9,zero,2cc48 <___vfiprintf_internal_r+0xeb8>
   2c12c:	10803fcc 	andi	r2,r2,255
   2c130:	00c00044 	movi	r3,1
   2c134:	10c24426 	beq	r2,r3,2ca48 <___vfiprintf_internal_r+0xcb8>
   2c138:	00c00084 	movi	r3,2
   2c13c:	10c2cc26 	beq	r2,r3,2cc70 <___vfiprintf_internal_r+0xee0>
   2c140:	d8c10a04 	addi	r3,sp,1064
   2c144:	9008d0fa 	srli	r4,r18,3
   2c148:	b00a977a 	slli	r5,r22,29
   2c14c:	b02cd0fa 	srli	r22,r22,3
   2c150:	948001cc 	andi	r18,r18,7
   2c154:	90800c04 	addi	r2,r18,48
   2c158:	18ffffc4 	addi	r3,r3,-1
   2c15c:	2924b03a 	or	r18,r5,r4
   2c160:	18800005 	stb	r2,0(r3)
   2c164:	9588b03a 	or	r4,r18,r22
   2c168:	203ff61e 	bne	r4,zero,2c144 <__alt_data_end+0xfffec574>
   2c16c:	a900004c 	andi	r4,r21,1
   2c170:	d8c12415 	stw	r3,1168(sp)
   2c174:	2002fb1e 	bne	r4,zero,2cd64 <___vfiprintf_internal_r+0xfd4>
   2c178:	da811e17 	ldw	r10,1144(sp)
   2c17c:	50e3c83a 	sub	r17,r10,r3
   2c180:	8825883a 	mov	r18,r17
   2c184:	8a40010e 	bge	r17,r9,2c18c <___vfiprintf_internal_r+0x3fc>
   2c188:	4825883a 	mov	r18,r9
   2c18c:	63003fcc 	andi	r12,r12,255
   2c190:	6300201c 	xori	r12,r12,128
   2c194:	633fe004 	addi	r12,r12,-128
   2c198:	60000126 	beq	r12,zero,2c1a0 <___vfiprintf_internal_r+0x410>
   2c19c:	94800044 	addi	r18,r18,1
   2c1a0:	ab80008c 	andi	r14,r21,2
   2c1a4:	70000126 	beq	r14,zero,2c1ac <___vfiprintf_internal_r+0x41c>
   2c1a8:	94800084 	addi	r18,r18,2
   2c1ac:	ad80210c 	andi	r22,r21,132
   2c1b0:	b001df1e 	bne	r22,zero,2c930 <___vfiprintf_internal_r+0xba0>
   2c1b4:	9c8fc83a 	sub	r7,r19,r18
   2c1b8:	01c1dd0e 	bge	zero,r7,2c930 <___vfiprintf_internal_r+0xba0>
   2c1bc:	03000404 	movi	r12,16
   2c1c0:	d8811c17 	ldw	r2,1136(sp)
   2c1c4:	61c3920e 	bge	r12,r7,2d010 <___vfiprintf_internal_r+0x1280>
   2c1c8:	028000f4 	movhi	r10,3
   2c1cc:	528e9804 	addi	r10,r10,14944
   2c1d0:	dc012915 	stw	r16,1188(sp)
   2c1d4:	d9811b17 	ldw	r6,1132(sp)
   2c1d8:	da812315 	stw	r10,1164(sp)
   2c1dc:	00c001c4 	movi	r3,7
   2c1e0:	da412515 	stw	r9,1172(sp)
   2c1e4:	db812815 	stw	r14,1184(sp)
   2c1e8:	3821883a 	mov	r16,r7
   2c1ec:	00000506 	br	2c204 <___vfiprintf_internal_r+0x474>
   2c1f0:	31400084 	addi	r5,r6,2
   2c1f4:	42000204 	addi	r8,r8,8
   2c1f8:	200d883a 	mov	r6,r4
   2c1fc:	843ffc04 	addi	r16,r16,-16
   2c200:	64000d0e 	bge	r12,r16,2c238 <___vfiprintf_internal_r+0x4a8>
   2c204:	10800404 	addi	r2,r2,16
   2c208:	31000044 	addi	r4,r6,1
   2c20c:	47000015 	stw	fp,0(r8)
   2c210:	43000115 	stw	r12,4(r8)
   2c214:	d8811c15 	stw	r2,1136(sp)
   2c218:	d9011b15 	stw	r4,1132(sp)
   2c21c:	193ff40e 	bge	r3,r4,2c1f0 <__alt_data_end+0xfffec620>
   2c220:	1001b51e 	bne	r2,zero,2c8f8 <___vfiprintf_internal_r+0xb68>
   2c224:	843ffc04 	addi	r16,r16,-16
   2c228:	000d883a 	mov	r6,zero
   2c22c:	01400044 	movi	r5,1
   2c230:	d811883a 	mov	r8,sp
   2c234:	643ff316 	blt	r12,r16,2c204 <__alt_data_end+0xfffec634>
   2c238:	800f883a 	mov	r7,r16
   2c23c:	da412517 	ldw	r9,1172(sp)
   2c240:	db812817 	ldw	r14,1184(sp)
   2c244:	dc012917 	ldw	r16,1188(sp)
   2c248:	dac12317 	ldw	r11,1164(sp)
   2c24c:	3887883a 	add	r3,r7,r2
   2c250:	41c00115 	stw	r7,4(r8)
   2c254:	42c00015 	stw	r11,0(r8)
   2c258:	d8c11c15 	stw	r3,1136(sp)
   2c25c:	d9411b15 	stw	r5,1132(sp)
   2c260:	008001c4 	movi	r2,7
   2c264:	11429316 	blt	r2,r5,2ccb4 <___vfiprintf_internal_r+0xf24>
   2c268:	d9011d87 	ldb	r4,1142(sp)
   2c26c:	42000204 	addi	r8,r8,8
   2c270:	28800044 	addi	r2,r5,1
   2c274:	2001b31e 	bne	r4,zero,2c944 <___vfiprintf_internal_r+0xbb4>
   2c278:	70000c26 	beq	r14,zero,2c2ac <___vfiprintf_internal_r+0x51c>
   2c27c:	d9011d04 	addi	r4,sp,1140
   2c280:	18c00084 	addi	r3,r3,2
   2c284:	41000015 	stw	r4,0(r8)
   2c288:	01000084 	movi	r4,2
   2c28c:	41000115 	stw	r4,4(r8)
   2c290:	d8c11c15 	stw	r3,1136(sp)
   2c294:	d8811b15 	stw	r2,1132(sp)
   2c298:	010001c4 	movi	r4,7
   2c29c:	20826516 	blt	r4,r2,2cc34 <___vfiprintf_internal_r+0xea4>
   2c2a0:	100b883a 	mov	r5,r2
   2c2a4:	42000204 	addi	r8,r8,8
   2c2a8:	10800044 	addi	r2,r2,1
   2c2ac:	01002004 	movi	r4,128
   2c2b0:	b1021a26 	beq	r22,r4,2cb1c <___vfiprintf_internal_r+0xd8c>
   2c2b4:	4c6dc83a 	sub	r22,r9,r17
   2c2b8:	0580230e 	bge	zero,r22,2c348 <___vfiprintf_internal_r+0x5b8>
   2c2bc:	01c00404 	movi	r7,16
   2c2c0:	3d83300e 	bge	r7,r22,2cf84 <___vfiprintf_internal_r+0x11f4>
   2c2c4:	008000f4 	movhi	r2,3
   2c2c8:	108e9404 	addi	r2,r2,14928
   2c2cc:	d8812315 	stw	r2,1164(sp)
   2c2d0:	030001c4 	movi	r12,7
   2c2d4:	00000506 	br	2c2ec <___vfiprintf_internal_r+0x55c>
   2c2d8:	28800084 	addi	r2,r5,2
   2c2dc:	42000204 	addi	r8,r8,8
   2c2e0:	200b883a 	mov	r5,r4
   2c2e4:	b5bffc04 	addi	r22,r22,-16
   2c2e8:	3d800d0e 	bge	r7,r22,2c320 <___vfiprintf_internal_r+0x590>
   2c2ec:	18c00404 	addi	r3,r3,16
   2c2f0:	29000044 	addi	r4,r5,1
   2c2f4:	45c00015 	stw	r23,0(r8)
   2c2f8:	41c00115 	stw	r7,4(r8)
   2c2fc:	d8c11c15 	stw	r3,1136(sp)
   2c300:	d9011b15 	stw	r4,1132(sp)
   2c304:	613ff40e 	bge	r12,r4,2c2d8 <__alt_data_end+0xfffec708>
   2c308:	18019b1e 	bne	r3,zero,2c978 <___vfiprintf_internal_r+0xbe8>
   2c30c:	b5bffc04 	addi	r22,r22,-16
   2c310:	000b883a 	mov	r5,zero
   2c314:	00800044 	movi	r2,1
   2c318:	d811883a 	mov	r8,sp
   2c31c:	3dbff316 	blt	r7,r22,2c2ec <__alt_data_end+0xfffec71c>
   2c320:	da812317 	ldw	r10,1164(sp)
   2c324:	1d87883a 	add	r3,r3,r22
   2c328:	45800115 	stw	r22,4(r8)
   2c32c:	42800015 	stw	r10,0(r8)
   2c330:	d8c11c15 	stw	r3,1136(sp)
   2c334:	d8811b15 	stw	r2,1132(sp)
   2c338:	010001c4 	movi	r4,7
   2c33c:	2081dd16 	blt	r4,r2,2cab4 <___vfiprintf_internal_r+0xd24>
   2c340:	42000204 	addi	r8,r8,8
   2c344:	10800044 	addi	r2,r2,1
   2c348:	da812417 	ldw	r10,1168(sp)
   2c34c:	1c47883a 	add	r3,r3,r17
   2c350:	44400115 	stw	r17,4(r8)
   2c354:	42800015 	stw	r10,0(r8)
   2c358:	d8c11c15 	stw	r3,1136(sp)
   2c35c:	d8811b15 	stw	r2,1132(sp)
   2c360:	010001c4 	movi	r4,7
   2c364:	2081dc0e 	bge	r4,r2,2cad8 <___vfiprintf_internal_r+0xd48>
   2c368:	1802611e 	bne	r3,zero,2ccf0 <___vfiprintf_internal_r+0xf60>
   2c36c:	d8011b15 	stw	zero,1132(sp)
   2c370:	aac0010c 	andi	r11,r21,4
   2c374:	58002726 	beq	r11,zero,2c414 <___vfiprintf_internal_r+0x684>
   2c378:	9ca3c83a 	sub	r17,r19,r18
   2c37c:	d811883a 	mov	r8,sp
   2c380:	0443510e 	bge	zero,r17,2d0c8 <___vfiprintf_internal_r+0x1338>
   2c384:	01c00404 	movi	r7,16
   2c388:	3c43320e 	bge	r7,r17,2d054 <___vfiprintf_internal_r+0x12c4>
   2c38c:	008000f4 	movhi	r2,3
   2c390:	108e9804 	addi	r2,r2,14944
   2c394:	d9011b17 	ldw	r4,1132(sp)
   2c398:	d8812315 	stw	r2,1164(sp)
   2c39c:	382d883a 	mov	r22,r7
   2c3a0:	054001c4 	movi	r21,7
   2c3a4:	00000506 	br	2c3bc <___vfiprintf_internal_r+0x62c>
   2c3a8:	21400084 	addi	r5,r4,2
   2c3ac:	42000204 	addi	r8,r8,8
   2c3b0:	1009883a 	mov	r4,r2
   2c3b4:	8c7ffc04 	addi	r17,r17,-16
   2c3b8:	b4400d0e 	bge	r22,r17,2c3f0 <___vfiprintf_internal_r+0x660>
   2c3bc:	18c00404 	addi	r3,r3,16
   2c3c0:	20800044 	addi	r2,r4,1
   2c3c4:	47000015 	stw	fp,0(r8)
   2c3c8:	45800115 	stw	r22,4(r8)
   2c3cc:	d8c11c15 	stw	r3,1136(sp)
   2c3d0:	d8811b15 	stw	r2,1132(sp)
   2c3d4:	a8bff40e 	bge	r21,r2,2c3a8 <__alt_data_end+0xfffec7d8>
   2c3d8:	1801ac1e 	bne	r3,zero,2ca8c <___vfiprintf_internal_r+0xcfc>
   2c3dc:	8c7ffc04 	addi	r17,r17,-16
   2c3e0:	0009883a 	mov	r4,zero
   2c3e4:	01400044 	movi	r5,1
   2c3e8:	d811883a 	mov	r8,sp
   2c3ec:	b47ff316 	blt	r22,r17,2c3bc <__alt_data_end+0xfffec7ec>
   2c3f0:	da812317 	ldw	r10,1164(sp)
   2c3f4:	1c47883a 	add	r3,r3,r17
   2c3f8:	44400115 	stw	r17,4(r8)
   2c3fc:	42800015 	stw	r10,0(r8)
   2c400:	d8c11c15 	stw	r3,1136(sp)
   2c404:	d9411b15 	stw	r5,1132(sp)
   2c408:	008001c4 	movi	r2,7
   2c40c:	1141b70e 	bge	r2,r5,2caec <___vfiprintf_internal_r+0xd5c>
   2c410:	1802cf1e 	bne	r3,zero,2cf50 <___vfiprintf_internal_r+0x11c0>
   2c414:	94c2ca16 	blt	r18,r19,2cf40 <___vfiprintf_internal_r+0x11b0>
   2c418:	dac12217 	ldw	r11,1160(sp)
   2c41c:	5c97883a 	add	r11,r11,r18
   2c420:	dac12215 	stw	r11,1160(sp)
   2c424:	d8011b15 	stw	zero,1132(sp)
   2c428:	d811883a 	mov	r8,sp
   2c42c:	003e8d06 	br	2be64 <__alt_data_end+0xfffec294>
   2c430:	d9012017 	ldw	r4,1152(sp)
   2c434:	a00b883a 	mov	r5,r20
   2c438:	00259200 	call	25920 <__swsetup_r>
   2c43c:	10002c1e 	bne	r2,zero,2c4f0 <___vfiprintf_internal_r+0x760>
   2c440:	a0c0030b 	ldhu	r3,12(r20)
   2c444:	01000284 	movi	r4,10
   2c448:	1805883a 	mov	r2,r3
   2c44c:	1080068c 	andi	r2,r2,26
   2c450:	113e731e 	bne	r2,r4,2be20 <__alt_data_end+0xfffec250>
   2c454:	a080038b 	ldhu	r2,14(r20)
   2c458:	113fffcc 	andi	r4,r2,65535
   2c45c:	2120001c 	xori	r4,r4,32768
   2c460:	21200004 	addi	r4,r4,-32768
   2c464:	203e6e16 	blt	r4,zero,2be20 <__alt_data_end+0xfffec250>
   2c468:	a3001917 	ldw	r12,100(r20)
   2c46c:	a2c00717 	ldw	r11,28(r20)
   2c470:	a2800917 	ldw	r10,36(r20)
   2c474:	d9012017 	ldw	r4,1152(sp)
   2c478:	d9c12117 	ldw	r7,1156(sp)
   2c47c:	02410004 	movi	r9,1024
   2c480:	18ffff4c 	andi	r3,r3,65533
   2c484:	da4b883a 	add	r5,sp,r9
   2c488:	b00d883a 	mov	r6,r22
   2c48c:	d8c1030d 	sth	r3,1036(sp)
   2c490:	db011915 	stw	r12,1124(sp)
   2c494:	d881038d 	sth	r2,1038(sp)
   2c498:	dac10715 	stw	r11,1052(sp)
   2c49c:	da810915 	stw	r10,1060(sp)
   2c4a0:	dec10015 	stw	sp,1024(sp)
   2c4a4:	dec10415 	stw	sp,1040(sp)
   2c4a8:	da410215 	stw	r9,1032(sp)
   2c4ac:	da410515 	stw	r9,1044(sp)
   2c4b0:	d8010615 	stw	zero,1048(sp)
   2c4b4:	002bd900 	call	2bd90 <___vfiprintf_internal_r>
   2c4b8:	1021883a 	mov	r16,r2
   2c4bc:	10000416 	blt	r2,zero,2c4d0 <___vfiprintf_internal_r+0x740>
   2c4c0:	d9012017 	ldw	r4,1152(sp)
   2c4c4:	d9410004 	addi	r5,sp,1024
   2c4c8:	00273780 	call	27378 <_fflush_r>
   2c4cc:	1002fc1e 	bne	r2,zero,2d0c0 <___vfiprintf_internal_r+0x1330>
   2c4d0:	d881030b 	ldhu	r2,1036(sp)
   2c4d4:	1080100c 	andi	r2,r2,64
   2c4d8:	10000326 	beq	r2,zero,2c4e8 <___vfiprintf_internal_r+0x758>
   2c4dc:	a080030b 	ldhu	r2,12(r20)
   2c4e0:	10801014 	ori	r2,r2,64
   2c4e4:	a080030d 	sth	r2,12(r20)
   2c4e8:	8005883a 	mov	r2,r16
   2c4ec:	00000106 	br	2c4f4 <___vfiprintf_internal_r+0x764>
   2c4f0:	00bfffc4 	movi	r2,-1
   2c4f4:	dfc13517 	ldw	ra,1236(sp)
   2c4f8:	df013417 	ldw	fp,1232(sp)
   2c4fc:	ddc13317 	ldw	r23,1228(sp)
   2c500:	dd813217 	ldw	r22,1224(sp)
   2c504:	dd413117 	ldw	r21,1220(sp)
   2c508:	dd013017 	ldw	r20,1216(sp)
   2c50c:	dcc12f17 	ldw	r19,1212(sp)
   2c510:	dc812e17 	ldw	r18,1208(sp)
   2c514:	dc412d17 	ldw	r17,1204(sp)
   2c518:	dc012c17 	ldw	r16,1200(sp)
   2c51c:	dec13604 	addi	sp,sp,1240
   2c520:	f800283a 	ret
   2c524:	00279200 	call	27920 <__sinit>
   2c528:	003e2b06 	br	2bdd8 <__alt_data_end+0xfffec208>
   2c52c:	04e7c83a 	sub	r19,zero,r19
   2c530:	d8812115 	stw	r2,1156(sp)
   2c534:	ad400114 	ori	r21,r21,4
   2c538:	80c00007 	ldb	r3,0(r16)
   2c53c:	003e7306 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c540:	a880040c 	andi	r2,r21,16
   2c544:	1000e41e 	bne	r2,zero,2c8d8 <___vfiprintf_internal_r+0xb48>
   2c548:	a880100c 	andi	r2,r21,64
   2c54c:	1000e226 	beq	r2,zero,2c8d8 <___vfiprintf_internal_r+0xb48>
   2c550:	da812117 	ldw	r10,1156(sp)
   2c554:	002d883a 	mov	r22,zero
   2c558:	0005883a 	mov	r2,zero
   2c55c:	5480000b 	ldhu	r18,0(r10)
   2c560:	52800104 	addi	r10,r10,4
   2c564:	da812115 	stw	r10,1156(sp)
   2c568:	9009883a 	mov	r4,r18
   2c56c:	003ee706 	br	2c10c <__alt_data_end+0xfffec53c>
   2c570:	da812117 	ldw	r10,1156(sp)
   2c574:	00800044 	movi	r2,1
   2c578:	54800017 	ldw	r18,0(r10)
   2c57c:	55800117 	ldw	r22,4(r10)
   2c580:	52800204 	addi	r10,r10,8
   2c584:	da812115 	stw	r10,1156(sp)
   2c588:	9588b03a 	or	r4,r18,r22
   2c58c:	003edf06 	br	2c10c <__alt_data_end+0xfffec53c>
   2c590:	02c000f4 	movhi	r11,3
   2c594:	5ace1e04 	addi	r11,r11,14456
   2c598:	d9811d85 	stb	r6,1142(sp)
   2c59c:	dac12615 	stw	r11,1176(sp)
   2c5a0:	a900080c 	andi	r4,r21,32
   2c5a4:	d8812117 	ldw	r2,1156(sp)
   2c5a8:	2000a526 	beq	r4,zero,2c840 <___vfiprintf_internal_r+0xab0>
   2c5ac:	da812117 	ldw	r10,1156(sp)
   2c5b0:	14800017 	ldw	r18,0(r2)
   2c5b4:	15800117 	ldw	r22,4(r2)
   2c5b8:	52800204 	addi	r10,r10,8
   2c5bc:	da812115 	stw	r10,1156(sp)
   2c5c0:	a880004c 	andi	r2,r21,1
   2c5c4:	1001d926 	beq	r2,zero,2cd2c <___vfiprintf_internal_r+0xf9c>
   2c5c8:	9588b03a 	or	r4,r18,r22
   2c5cc:	20024426 	beq	r4,zero,2cee0 <___vfiprintf_internal_r+0x1150>
   2c5d0:	00800c04 	movi	r2,48
   2c5d4:	d8811d05 	stb	r2,1140(sp)
   2c5d8:	d8c11d45 	stb	r3,1141(sp)
   2c5dc:	ad400094 	ori	r21,r21,2
   2c5e0:	00800084 	movi	r2,2
   2c5e4:	003ec906 	br	2c10c <__alt_data_end+0xfffec53c>
   2c5e8:	da812117 	ldw	r10,1156(sp)
   2c5ec:	04800044 	movi	r18,1
   2c5f0:	dac10004 	addi	r11,sp,1024
   2c5f4:	50800017 	ldw	r2,0(r10)
   2c5f8:	52800104 	addi	r10,r10,4
   2c5fc:	d8011d85 	stb	zero,1142(sp)
   2c600:	d8810005 	stb	r2,1024(sp)
   2c604:	da812115 	stw	r10,1156(sp)
   2c608:	9023883a 	mov	r17,r18
   2c60c:	dac12415 	stw	r11,1168(sp)
   2c610:	0013883a 	mov	r9,zero
   2c614:	003ee206 	br	2c1a0 <__alt_data_end+0xfffec5d0>
   2c618:	ad402014 	ori	r21,r21,128
   2c61c:	80c00007 	ldb	r3,0(r16)
   2c620:	003e3a06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c624:	8015883a 	mov	r10,r16
   2c628:	0027883a 	mov	r19,zero
   2c62c:	18bff404 	addi	r2,r3,-48
   2c630:	50c00007 	ldb	r3,0(r10)
   2c634:	9cc002a4 	muli	r19,r19,10
   2c638:	84000044 	addi	r16,r16,1
   2c63c:	8015883a 	mov	r10,r16
   2c640:	98a7883a 	add	r19,r19,r2
   2c644:	18bff404 	addi	r2,r3,-48
   2c648:	28bff92e 	bgeu	r5,r2,2c630 <__alt_data_end+0xfffeca60>
   2c64c:	003e3006 	br	2bf10 <__alt_data_end+0xfffec340>
   2c650:	ad400414 	ori	r21,r21,16
   2c654:	d9811d85 	stb	r6,1142(sp)
   2c658:	a880080c 	andi	r2,r21,32
   2c65c:	d8c12117 	ldw	r3,1156(sp)
   2c660:	10004b26 	beq	r2,zero,2c790 <___vfiprintf_internal_r+0xa00>
   2c664:	da812117 	ldw	r10,1156(sp)
   2c668:	18800117 	ldw	r2,4(r3)
   2c66c:	1c800017 	ldw	r18,0(r3)
   2c670:	52800204 	addi	r10,r10,8
   2c674:	da812115 	stw	r10,1156(sp)
   2c678:	102d883a 	mov	r22,r2
   2c67c:	1001f116 	blt	r2,zero,2ce44 <___vfiprintf_internal_r+0x10b4>
   2c680:	db011d83 	ldbu	r12,1142(sp)
   2c684:	4823883a 	mov	r17,r9
   2c688:	00800044 	movi	r2,1
   2c68c:	9588b03a 	or	r4,r18,r22
   2c690:	003ea106 	br	2c118 <__alt_data_end+0xfffec548>
   2c694:	80c00007 	ldb	r3,0(r16)
   2c698:	82800044 	addi	r10,r16,1
   2c69c:	1b027f26 	beq	r3,r12,2d09c <___vfiprintf_internal_r+0x130c>
   2c6a0:	18bff404 	addi	r2,r3,-48
   2c6a4:	5021883a 	mov	r16,r10
   2c6a8:	0013883a 	mov	r9,zero
   2c6ac:	28be1836 	bltu	r5,r2,2bf10 <__alt_data_end+0xfffec340>
   2c6b0:	80c00007 	ldb	r3,0(r16)
   2c6b4:	4a4002a4 	muli	r9,r9,10
   2c6b8:	84000044 	addi	r16,r16,1
   2c6bc:	1253883a 	add	r9,r2,r9
   2c6c0:	18bff404 	addi	r2,r3,-48
   2c6c4:	28bffa2e 	bgeu	r5,r2,2c6b0 <__alt_data_end+0xfffecae0>
   2c6c8:	483e110e 	bge	r9,zero,2bf10 <__alt_data_end+0xfffec340>
   2c6cc:	027fffc4 	movi	r9,-1
   2c6d0:	003e0f06 	br	2bf10 <__alt_data_end+0xfffec340>
   2c6d4:	d9811d85 	stb	r6,1142(sp)
   2c6d8:	a880080c 	andi	r2,r21,32
   2c6dc:	1001ee26 	beq	r2,zero,2ce98 <___vfiprintf_internal_r+0x1108>
   2c6e0:	da812117 	ldw	r10,1156(sp)
   2c6e4:	dac12217 	ldw	r11,1160(sp)
   2c6e8:	50800017 	ldw	r2,0(r10)
   2c6ec:	5807d7fa 	srai	r3,r11,31
   2c6f0:	52800104 	addi	r10,r10,4
   2c6f4:	da812115 	stw	r10,1156(sp)
   2c6f8:	12c00015 	stw	r11,0(r2)
   2c6fc:	10c00115 	stw	r3,4(r2)
   2c700:	003dd806 	br	2be64 <__alt_data_end+0xfffec294>
   2c704:	30803fcc 	andi	r2,r6,255
   2c708:	1080201c 	xori	r2,r2,128
   2c70c:	10bfe004 	addi	r2,r2,-128
   2c710:	1001df1e 	bne	r2,zero,2ce90 <___vfiprintf_internal_r+0x1100>
   2c714:	01800804 	movi	r6,32
   2c718:	80c00007 	ldb	r3,0(r16)
   2c71c:	003dfb06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c720:	da812117 	ldw	r10,1156(sp)
   2c724:	dac12117 	ldw	r11,1156(sp)
   2c728:	d8011d85 	stb	zero,1142(sp)
   2c72c:	52800017 	ldw	r10,0(r10)
   2c730:	5d800104 	addi	r22,r11,4
   2c734:	da812415 	stw	r10,1168(sp)
   2c738:	50023b26 	beq	r10,zero,2d028 <___vfiprintf_internal_r+0x1298>
   2c73c:	d9012417 	ldw	r4,1168(sp)
   2c740:	48021f16 	blt	r9,zero,2cfc0 <___vfiprintf_internal_r+0x1230>
   2c744:	480d883a 	mov	r6,r9
   2c748:	000b883a 	mov	r5,zero
   2c74c:	da012a15 	stw	r8,1192(sp)
   2c750:	da412b15 	stw	r9,1196(sp)
   2c754:	0028dd80 	call	28dd8 <memchr>
   2c758:	da012a17 	ldw	r8,1192(sp)
   2c75c:	da412b17 	ldw	r9,1196(sp)
   2c760:	10024726 	beq	r2,zero,2d080 <___vfiprintf_internal_r+0x12f0>
   2c764:	d8c12417 	ldw	r3,1168(sp)
   2c768:	10e3c83a 	sub	r17,r2,r3
   2c76c:	4c41f616 	blt	r9,r17,2cf48 <___vfiprintf_internal_r+0x11b8>
   2c770:	db011d83 	ldbu	r12,1142(sp)
   2c774:	dd812115 	stw	r22,1156(sp)
   2c778:	0013883a 	mov	r9,zero
   2c77c:	003e8006 	br	2c180 <__alt_data_end+0xfffec5b0>
   2c780:	d9811d85 	stb	r6,1142(sp)
   2c784:	a880080c 	andi	r2,r21,32
   2c788:	d8c12117 	ldw	r3,1156(sp)
   2c78c:	103fb51e 	bne	r2,zero,2c664 <__alt_data_end+0xfffeca94>
   2c790:	a880040c 	andi	r2,r21,16
   2c794:	10015e1e 	bne	r2,zero,2cd10 <___vfiprintf_internal_r+0xf80>
   2c798:	a880100c 	andi	r2,r21,64
   2c79c:	10015c26 	beq	r2,zero,2cd10 <___vfiprintf_internal_r+0xf80>
   2c7a0:	1c80000f 	ldh	r18,0(r3)
   2c7a4:	da812117 	ldw	r10,1156(sp)
   2c7a8:	902dd7fa 	srai	r22,r18,31
   2c7ac:	52800104 	addi	r10,r10,4
   2c7b0:	da812115 	stw	r10,1156(sp)
   2c7b4:	b005883a 	mov	r2,r22
   2c7b8:	003fb006 	br	2c67c <__alt_data_end+0xfffecaac>
   2c7bc:	da812117 	ldw	r10,1156(sp)
   2c7c0:	00800c04 	movi	r2,48
   2c7c4:	02c000f4 	movhi	r11,3
   2c7c8:	54800017 	ldw	r18,0(r10)
   2c7cc:	d8811d05 	stb	r2,1140(sp)
   2c7d0:	52800104 	addi	r10,r10,4
   2c7d4:	00801e04 	movi	r2,120
   2c7d8:	5ace2304 	addi	r11,r11,14476
   2c7dc:	d8811d45 	stb	r2,1141(sp)
   2c7e0:	002d883a 	mov	r22,zero
   2c7e4:	ad400094 	ori	r21,r21,2
   2c7e8:	da812115 	stw	r10,1156(sp)
   2c7ec:	dac12615 	stw	r11,1176(sp)
   2c7f0:	00800084 	movi	r2,2
   2c7f4:	9009883a 	mov	r4,r18
   2c7f8:	003e4406 	br	2c10c <__alt_data_end+0xfffec53c>
   2c7fc:	ad400814 	ori	r21,r21,32
   2c800:	80c00007 	ldb	r3,0(r16)
   2c804:	003dc106 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c808:	ad401014 	ori	r21,r21,64
   2c80c:	80c00007 	ldb	r3,0(r16)
   2c810:	003dbe06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c814:	80c00007 	ldb	r3,0(r16)
   2c818:	19c1de26 	beq	r3,r7,2cf94 <___vfiprintf_internal_r+0x1204>
   2c81c:	ad400414 	ori	r21,r21,16
   2c820:	003dba06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c824:	008000f4 	movhi	r2,3
   2c828:	108e2304 	addi	r2,r2,14476
   2c82c:	d8812615 	stw	r2,1176(sp)
   2c830:	d9811d85 	stb	r6,1142(sp)
   2c834:	a900080c 	andi	r4,r21,32
   2c838:	d8812117 	ldw	r2,1156(sp)
   2c83c:	203f5b1e 	bne	r4,zero,2c5ac <__alt_data_end+0xfffec9dc>
   2c840:	a900040c 	andi	r4,r21,16
   2c844:	2001a826 	beq	r4,zero,2cee8 <___vfiprintf_internal_r+0x1158>
   2c848:	dac12117 	ldw	r11,1156(sp)
   2c84c:	14800017 	ldw	r18,0(r2)
   2c850:	002d883a 	mov	r22,zero
   2c854:	5ac00104 	addi	r11,r11,4
   2c858:	dac12115 	stw	r11,1156(sp)
   2c85c:	003f5806 	br	2c5c0 <__alt_data_end+0xfffec9f0>
   2c860:	da812117 	ldw	r10,1156(sp)
   2c864:	54c00017 	ldw	r19,0(r10)
   2c868:	50800104 	addi	r2,r10,4
   2c86c:	983f2f16 	blt	r19,zero,2c52c <__alt_data_end+0xfffec95c>
   2c870:	d8812115 	stw	r2,1156(sp)
   2c874:	80c00007 	ldb	r3,0(r16)
   2c878:	003da406 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c87c:	01800ac4 	movi	r6,43
   2c880:	80c00007 	ldb	r3,0(r16)
   2c884:	003da106 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c888:	ad400054 	ori	r21,r21,1
   2c88c:	80c00007 	ldb	r3,0(r16)
   2c890:	003d9e06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2c894:	d9811d85 	stb	r6,1142(sp)
   2c898:	18007126 	beq	r3,zero,2ca60 <___vfiprintf_internal_r+0xcd0>
   2c89c:	04800044 	movi	r18,1
   2c8a0:	d8c10005 	stb	r3,1024(sp)
   2c8a4:	d8c10004 	addi	r3,sp,1024
   2c8a8:	d8011d85 	stb	zero,1142(sp)
   2c8ac:	9023883a 	mov	r17,r18
   2c8b0:	d8c12415 	stw	r3,1168(sp)
   2c8b4:	003f5606 	br	2c610 <__alt_data_end+0xfffeca40>
   2c8b8:	dac12117 	ldw	r11,1156(sp)
   2c8bc:	002d883a 	mov	r22,zero
   2c8c0:	00800044 	movi	r2,1
   2c8c4:	5c800017 	ldw	r18,0(r11)
   2c8c8:	5ac00104 	addi	r11,r11,4
   2c8cc:	dac12115 	stw	r11,1156(sp)
   2c8d0:	9009883a 	mov	r4,r18
   2c8d4:	003e0d06 	br	2c10c <__alt_data_end+0xfffec53c>
   2c8d8:	dac12117 	ldw	r11,1156(sp)
   2c8dc:	002d883a 	mov	r22,zero
   2c8e0:	0005883a 	mov	r2,zero
   2c8e4:	5c800017 	ldw	r18,0(r11)
   2c8e8:	5ac00104 	addi	r11,r11,4
   2c8ec:	dac12115 	stw	r11,1156(sp)
   2c8f0:	9009883a 	mov	r4,r18
   2c8f4:	003e0506 	br	2c10c <__alt_data_end+0xfffec53c>
   2c8f8:	d9012017 	ldw	r4,1152(sp)
   2c8fc:	a00b883a 	mov	r5,r20
   2c900:	d9811a04 	addi	r6,sp,1128
   2c904:	d8c12a15 	stw	r3,1192(sp)
   2c908:	db012b15 	stw	r12,1196(sp)
   2c90c:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2c910:	d8c12a17 	ldw	r3,1192(sp)
   2c914:	db012b17 	ldw	r12,1196(sp)
   2c918:	1000571e 	bne	r2,zero,2ca78 <___vfiprintf_internal_r+0xce8>
   2c91c:	d9811b17 	ldw	r6,1132(sp)
   2c920:	d8811c17 	ldw	r2,1136(sp)
   2c924:	d811883a 	mov	r8,sp
   2c928:	31400044 	addi	r5,r6,1
   2c92c:	003e3306 	br	2c1fc <__alt_data_end+0xfffec62c>
   2c930:	d9411b17 	ldw	r5,1132(sp)
   2c934:	d8c11c17 	ldw	r3,1136(sp)
   2c938:	28800044 	addi	r2,r5,1
   2c93c:	d9011d87 	ldb	r4,1142(sp)
   2c940:	203e4d26 	beq	r4,zero,2c278 <__alt_data_end+0xfffec6a8>
   2c944:	01000044 	movi	r4,1
   2c948:	d9411d84 	addi	r5,sp,1142
   2c94c:	1907883a 	add	r3,r3,r4
   2c950:	41400015 	stw	r5,0(r8)
   2c954:	41000115 	stw	r4,4(r8)
   2c958:	d8c11c15 	stw	r3,1136(sp)
   2c95c:	d8811b15 	stw	r2,1132(sp)
   2c960:	014001c4 	movi	r5,7
   2c964:	2880aa16 	blt	r5,r2,2cc10 <___vfiprintf_internal_r+0xe80>
   2c968:	100b883a 	mov	r5,r2
   2c96c:	42000204 	addi	r8,r8,8
   2c970:	10800044 	addi	r2,r2,1
   2c974:	003e4006 	br	2c278 <__alt_data_end+0xfffec6a8>
   2c978:	d9012017 	ldw	r4,1152(sp)
   2c97c:	a00b883a 	mov	r5,r20
   2c980:	d9811a04 	addi	r6,sp,1128
   2c984:	d9c12a15 	stw	r7,1192(sp)
   2c988:	db012b15 	stw	r12,1196(sp)
   2c98c:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2c990:	d9c12a17 	ldw	r7,1192(sp)
   2c994:	db012b17 	ldw	r12,1196(sp)
   2c998:	1000371e 	bne	r2,zero,2ca78 <___vfiprintf_internal_r+0xce8>
   2c99c:	d9411b17 	ldw	r5,1132(sp)
   2c9a0:	d8c11c17 	ldw	r3,1136(sp)
   2c9a4:	d811883a 	mov	r8,sp
   2c9a8:	28800044 	addi	r2,r5,1
   2c9ac:	003e4d06 	br	2c2e4 <__alt_data_end+0xfffec714>
   2c9b0:	10803fcc 	andi	r2,r2,255
   2c9b4:	00c00044 	movi	r3,1
   2c9b8:	10fddf1e 	bne	r2,r3,2c138 <__alt_data_end+0xfffec568>
   2c9bc:	b000021e 	bne	r22,zero,2c9c8 <___vfiprintf_internal_r+0xc38>
   2c9c0:	00800244 	movi	r2,9
   2c9c4:	1480202e 	bgeu	r2,r18,2ca48 <___vfiprintf_internal_r+0xcb8>
   2c9c8:	dc012515 	stw	r16,1172(sp)
   2c9cc:	dc410a04 	addi	r17,sp,1064
   2c9d0:	9021883a 	mov	r16,r18
   2c9d4:	da012415 	stw	r8,1168(sp)
   2c9d8:	b025883a 	mov	r18,r22
   2c9dc:	da412315 	stw	r9,1164(sp)
   2c9e0:	602d883a 	mov	r22,r12
   2c9e4:	8009883a 	mov	r4,r16
   2c9e8:	900b883a 	mov	r5,r18
   2c9ec:	01800284 	movi	r6,10
   2c9f0:	000f883a 	mov	r7,zero
   2c9f4:	002e0080 	call	2e008 <__umoddi3>
   2c9f8:	10800c04 	addi	r2,r2,48
   2c9fc:	8c7fffc4 	addi	r17,r17,-1
   2ca00:	8009883a 	mov	r4,r16
   2ca04:	900b883a 	mov	r5,r18
   2ca08:	01800284 	movi	r6,10
   2ca0c:	000f883a 	mov	r7,zero
   2ca10:	88800005 	stb	r2,0(r17)
   2ca14:	002da480 	call	2da48 <__udivdi3>
   2ca18:	1021883a 	mov	r16,r2
   2ca1c:	10c4b03a 	or	r2,r2,r3
   2ca20:	1825883a 	mov	r18,r3
   2ca24:	103fef1e 	bne	r2,zero,2c9e4 <__alt_data_end+0xfffece14>
   2ca28:	da811e17 	ldw	r10,1144(sp)
   2ca2c:	da012417 	ldw	r8,1168(sp)
   2ca30:	da412317 	ldw	r9,1164(sp)
   2ca34:	dc412415 	stw	r17,1168(sp)
   2ca38:	b019883a 	mov	r12,r22
   2ca3c:	dc012517 	ldw	r16,1172(sp)
   2ca40:	5463c83a 	sub	r17,r10,r17
   2ca44:	003dce06 	br	2c180 <__alt_data_end+0xfffec5b0>
   2ca48:	94800c04 	addi	r18,r18,48
   2ca4c:	d8c109c4 	addi	r3,sp,1063
   2ca50:	dc8109c5 	stb	r18,1063(sp)
   2ca54:	dc412717 	ldw	r17,1180(sp)
   2ca58:	d8c12415 	stw	r3,1168(sp)
   2ca5c:	003dc806 	br	2c180 <__alt_data_end+0xfffec5b0>
   2ca60:	d8811c17 	ldw	r2,1136(sp)
   2ca64:	10000426 	beq	r2,zero,2ca78 <___vfiprintf_internal_r+0xce8>
   2ca68:	d9012017 	ldw	r4,1152(sp)
   2ca6c:	a00b883a 	mov	r5,r20
   2ca70:	d9811a04 	addi	r6,sp,1128
   2ca74:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2ca78:	a080030b 	ldhu	r2,12(r20)
   2ca7c:	1080100c 	andi	r2,r2,64
   2ca80:	103e9b1e 	bne	r2,zero,2c4f0 <__alt_data_end+0xfffec920>
   2ca84:	d8812217 	ldw	r2,1160(sp)
   2ca88:	003e9a06 	br	2c4f4 <__alt_data_end+0xfffec924>
   2ca8c:	d9012017 	ldw	r4,1152(sp)
   2ca90:	a00b883a 	mov	r5,r20
   2ca94:	d9811a04 	addi	r6,sp,1128
   2ca98:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2ca9c:	103ff61e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2caa0:	d9011b17 	ldw	r4,1132(sp)
   2caa4:	d8c11c17 	ldw	r3,1136(sp)
   2caa8:	d811883a 	mov	r8,sp
   2caac:	21400044 	addi	r5,r4,1
   2cab0:	003e4006 	br	2c3b4 <__alt_data_end+0xfffec7e4>
   2cab4:	1800d61e 	bne	r3,zero,2ce10 <___vfiprintf_internal_r+0x1080>
   2cab8:	dac12417 	ldw	r11,1168(sp)
   2cabc:	00800044 	movi	r2,1
   2cac0:	dc400115 	stw	r17,4(sp)
   2cac4:	dac00015 	stw	r11,0(sp)
   2cac8:	dc411c15 	stw	r17,1136(sp)
   2cacc:	d8811b15 	stw	r2,1132(sp)
   2cad0:	8807883a 	mov	r3,r17
   2cad4:	d811883a 	mov	r8,sp
   2cad8:	42000204 	addi	r8,r8,8
   2cadc:	aac0010c 	andi	r11,r21,4
   2cae0:	58000226 	beq	r11,zero,2caec <___vfiprintf_internal_r+0xd5c>
   2cae4:	9ca3c83a 	sub	r17,r19,r18
   2cae8:	047e2616 	blt	zero,r17,2c384 <__alt_data_end+0xfffec7b4>
   2caec:	94c0010e 	bge	r18,r19,2caf4 <___vfiprintf_internal_r+0xd64>
   2caf0:	9825883a 	mov	r18,r19
   2caf4:	da812217 	ldw	r10,1160(sp)
   2caf8:	5495883a 	add	r10,r10,r18
   2cafc:	da812215 	stw	r10,1160(sp)
   2cb00:	183e4826 	beq	r3,zero,2c424 <__alt_data_end+0xfffec854>
   2cb04:	d9012017 	ldw	r4,1152(sp)
   2cb08:	a00b883a 	mov	r5,r20
   2cb0c:	d9811a04 	addi	r6,sp,1128
   2cb10:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cb14:	103e4326 	beq	r2,zero,2c424 <__alt_data_end+0xfffec854>
   2cb18:	003fd706 	br	2ca78 <__alt_data_end+0xfffecea8>
   2cb1c:	9cadc83a 	sub	r22,r19,r18
   2cb20:	05bde40e 	bge	zero,r22,2c2b4 <__alt_data_end+0xfffec6e4>
   2cb24:	03000404 	movi	r12,16
   2cb28:	6581500e 	bge	r12,r22,2d06c <___vfiprintf_internal_r+0x12dc>
   2cb2c:	008000f4 	movhi	r2,3
   2cb30:	108e9404 	addi	r2,r2,14928
   2cb34:	d8812315 	stw	r2,1164(sp)
   2cb38:	8005883a 	mov	r2,r16
   2cb3c:	038001c4 	movi	r14,7
   2cb40:	b021883a 	mov	r16,r22
   2cb44:	da412515 	stw	r9,1172(sp)
   2cb48:	102d883a 	mov	r22,r2
   2cb4c:	00000506 	br	2cb64 <___vfiprintf_internal_r+0xdd4>
   2cb50:	29000084 	addi	r4,r5,2
   2cb54:	42000204 	addi	r8,r8,8
   2cb58:	100b883a 	mov	r5,r2
   2cb5c:	843ffc04 	addi	r16,r16,-16
   2cb60:	64000d0e 	bge	r12,r16,2cb98 <___vfiprintf_internal_r+0xe08>
   2cb64:	18c00404 	addi	r3,r3,16
   2cb68:	28800044 	addi	r2,r5,1
   2cb6c:	45c00015 	stw	r23,0(r8)
   2cb70:	43000115 	stw	r12,4(r8)
   2cb74:	d8c11c15 	stw	r3,1136(sp)
   2cb78:	d8811b15 	stw	r2,1132(sp)
   2cb7c:	70bff40e 	bge	r14,r2,2cb50 <__alt_data_end+0xfffecf80>
   2cb80:	1800151e 	bne	r3,zero,2cbd8 <___vfiprintf_internal_r+0xe48>
   2cb84:	843ffc04 	addi	r16,r16,-16
   2cb88:	000b883a 	mov	r5,zero
   2cb8c:	01000044 	movi	r4,1
   2cb90:	d811883a 	mov	r8,sp
   2cb94:	643ff316 	blt	r12,r16,2cb64 <__alt_data_end+0xfffecf94>
   2cb98:	da412517 	ldw	r9,1172(sp)
   2cb9c:	b005883a 	mov	r2,r22
   2cba0:	802d883a 	mov	r22,r16
   2cba4:	1021883a 	mov	r16,r2
   2cba8:	da812317 	ldw	r10,1164(sp)
   2cbac:	1d87883a 	add	r3,r3,r22
   2cbb0:	45800115 	stw	r22,4(r8)
   2cbb4:	42800015 	stw	r10,0(r8)
   2cbb8:	d8c11c15 	stw	r3,1136(sp)
   2cbbc:	d9011b15 	stw	r4,1132(sp)
   2cbc0:	008001c4 	movi	r2,7
   2cbc4:	11008d16 	blt	r2,r4,2cdfc <___vfiprintf_internal_r+0x106c>
   2cbc8:	42000204 	addi	r8,r8,8
   2cbcc:	20800044 	addi	r2,r4,1
   2cbd0:	200b883a 	mov	r5,r4
   2cbd4:	003db706 	br	2c2b4 <__alt_data_end+0xfffec6e4>
   2cbd8:	d9012017 	ldw	r4,1152(sp)
   2cbdc:	a00b883a 	mov	r5,r20
   2cbe0:	d9811a04 	addi	r6,sp,1128
   2cbe4:	db012b15 	stw	r12,1196(sp)
   2cbe8:	db812a15 	stw	r14,1192(sp)
   2cbec:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cbf0:	db012b17 	ldw	r12,1196(sp)
   2cbf4:	db812a17 	ldw	r14,1192(sp)
   2cbf8:	103f9f1e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cbfc:	d9411b17 	ldw	r5,1132(sp)
   2cc00:	d8c11c17 	ldw	r3,1136(sp)
   2cc04:	d811883a 	mov	r8,sp
   2cc08:	29000044 	addi	r4,r5,1
   2cc0c:	003fd306 	br	2cb5c <__alt_data_end+0xfffecf8c>
   2cc10:	18006c1e 	bne	r3,zero,2cdc4 <___vfiprintf_internal_r+0x1034>
   2cc14:	70004f26 	beq	r14,zero,2cd54 <___vfiprintf_internal_r+0xfc4>
   2cc18:	d8811d04 	addi	r2,sp,1140
   2cc1c:	00c00084 	movi	r3,2
   2cc20:	d8800015 	stw	r2,0(sp)
   2cc24:	d8c00115 	stw	r3,4(sp)
   2cc28:	2005883a 	mov	r2,r4
   2cc2c:	d811883a 	mov	r8,sp
   2cc30:	003d9b06 	br	2c2a0 <__alt_data_end+0xfffec6d0>
   2cc34:	1800571e 	bne	r3,zero,2cd94 <___vfiprintf_internal_r+0x1004>
   2cc38:	000b883a 	mov	r5,zero
   2cc3c:	00800044 	movi	r2,1
   2cc40:	d811883a 	mov	r8,sp
   2cc44:	003d9906 	br	2c2ac <__alt_data_end+0xfffec6dc>
   2cc48:	10803fcc 	andi	r2,r2,255
   2cc4c:	1000251e 	bne	r2,zero,2cce4 <___vfiprintf_internal_r+0xf54>
   2cc50:	a880004c 	andi	r2,r21,1
   2cc54:	10007826 	beq	r2,zero,2ce38 <___vfiprintf_internal_r+0x10a8>
   2cc58:	00800c04 	movi	r2,48
   2cc5c:	d8c109c4 	addi	r3,sp,1063
   2cc60:	d88109c5 	stb	r2,1063(sp)
   2cc64:	dc412717 	ldw	r17,1180(sp)
   2cc68:	d8c12415 	stw	r3,1168(sp)
   2cc6c:	003d4406 	br	2c180 <__alt_data_end+0xfffec5b0>
   2cc70:	d9012617 	ldw	r4,1176(sp)
   2cc74:	dc410a04 	addi	r17,sp,1064
   2cc78:	908003cc 	andi	r2,r18,15
   2cc7c:	b006973a 	slli	r3,r22,28
   2cc80:	2085883a 	add	r2,r4,r2
   2cc84:	9024d13a 	srli	r18,r18,4
   2cc88:	10800003 	ldbu	r2,0(r2)
   2cc8c:	b02cd13a 	srli	r22,r22,4
   2cc90:	8c7fffc4 	addi	r17,r17,-1
   2cc94:	1ca4b03a 	or	r18,r3,r18
   2cc98:	88800005 	stb	r2,0(r17)
   2cc9c:	9584b03a 	or	r2,r18,r22
   2cca0:	103ff51e 	bne	r2,zero,2cc78 <__alt_data_end+0xfffed0a8>
   2cca4:	dac11e17 	ldw	r11,1144(sp)
   2cca8:	dc412415 	stw	r17,1168(sp)
   2ccac:	5c63c83a 	sub	r17,r11,r17
   2ccb0:	003d3306 	br	2c180 <__alt_data_end+0xfffec5b0>
   2ccb4:	1800941e 	bne	r3,zero,2cf08 <___vfiprintf_internal_r+0x1178>
   2ccb8:	d8811d87 	ldb	r2,1142(sp)
   2ccbc:	10006b26 	beq	r2,zero,2ce6c <___vfiprintf_internal_r+0x10dc>
   2ccc0:	00c00044 	movi	r3,1
   2ccc4:	d9011d84 	addi	r4,sp,1142
   2ccc8:	1805883a 	mov	r2,r3
   2cccc:	d9000015 	stw	r4,0(sp)
   2ccd0:	d8c00115 	stw	r3,4(sp)
   2ccd4:	d811883a 	mov	r8,sp
   2ccd8:	003f2306 	br	2c968 <__alt_data_end+0xfffecd98>
   2ccdc:	8023883a 	mov	r17,r16
   2cce0:	003c7d06 	br	2bed8 <__alt_data_end+0xfffec308>
   2cce4:	da810a04 	addi	r10,sp,1064
   2cce8:	da812415 	stw	r10,1168(sp)
   2ccec:	003d2406 	br	2c180 <__alt_data_end+0xfffec5b0>
   2ccf0:	d9012017 	ldw	r4,1152(sp)
   2ccf4:	a00b883a 	mov	r5,r20
   2ccf8:	d9811a04 	addi	r6,sp,1128
   2ccfc:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cd00:	103f5d1e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cd04:	d8c11c17 	ldw	r3,1136(sp)
   2cd08:	d811883a 	mov	r8,sp
   2cd0c:	003f7306 	br	2cadc <__alt_data_end+0xfffecf0c>
   2cd10:	1c800017 	ldw	r18,0(r3)
   2cd14:	dac12117 	ldw	r11,1156(sp)
   2cd18:	902dd7fa 	srai	r22,r18,31
   2cd1c:	5ac00104 	addi	r11,r11,4
   2cd20:	dac12115 	stw	r11,1156(sp)
   2cd24:	b005883a 	mov	r2,r22
   2cd28:	003e5406 	br	2c67c <__alt_data_end+0xfffecaac>
   2cd2c:	00800084 	movi	r2,2
   2cd30:	9588b03a 	or	r4,r18,r22
   2cd34:	003cf506 	br	2c10c <__alt_data_end+0xfffec53c>
   2cd38:	d9012017 	ldw	r4,1152(sp)
   2cd3c:	a00b883a 	mov	r5,r20
   2cd40:	d9811a04 	addi	r6,sp,1128
   2cd44:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cd48:	103f4b1e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cd4c:	d811883a 	mov	r8,sp
   2cd50:	003cd106 	br	2c098 <__alt_data_end+0xfffec4c8>
   2cd54:	000b883a 	mov	r5,zero
   2cd58:	2005883a 	mov	r2,r4
   2cd5c:	d811883a 	mov	r8,sp
   2cd60:	003d5206 	br	2c2ac <__alt_data_end+0xfffec6dc>
   2cd64:	10803fcc 	andi	r2,r2,255
   2cd68:	1080201c 	xori	r2,r2,128
   2cd6c:	10bfe004 	addi	r2,r2,-128
   2cd70:	01000c04 	movi	r4,48
   2cd74:	11008e26 	beq	r2,r4,2cfb0 <___vfiprintf_internal_r+0x1220>
   2cd78:	da812417 	ldw	r10,1168(sp)
   2cd7c:	dac11e17 	ldw	r11,1144(sp)
   2cd80:	193fffc5 	stb	r4,-1(r3)
   2cd84:	52bfffc4 	addi	r10,r10,-1
   2cd88:	da812415 	stw	r10,1168(sp)
   2cd8c:	5aa3c83a 	sub	r17,r11,r10
   2cd90:	003cfb06 	br	2c180 <__alt_data_end+0xfffec5b0>
   2cd94:	d9012017 	ldw	r4,1152(sp)
   2cd98:	a00b883a 	mov	r5,r20
   2cd9c:	d9811a04 	addi	r6,sp,1128
   2cda0:	da412b15 	stw	r9,1196(sp)
   2cda4:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cda8:	da412b17 	ldw	r9,1196(sp)
   2cdac:	103f321e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cdb0:	d9411b17 	ldw	r5,1132(sp)
   2cdb4:	d8c11c17 	ldw	r3,1136(sp)
   2cdb8:	d811883a 	mov	r8,sp
   2cdbc:	28800044 	addi	r2,r5,1
   2cdc0:	003d3a06 	br	2c2ac <__alt_data_end+0xfffec6dc>
   2cdc4:	d9012017 	ldw	r4,1152(sp)
   2cdc8:	a00b883a 	mov	r5,r20
   2cdcc:	d9811a04 	addi	r6,sp,1128
   2cdd0:	da412b15 	stw	r9,1196(sp)
   2cdd4:	db812a15 	stw	r14,1192(sp)
   2cdd8:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cddc:	da412b17 	ldw	r9,1196(sp)
   2cde0:	db812a17 	ldw	r14,1192(sp)
   2cde4:	103f241e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cde8:	d9411b17 	ldw	r5,1132(sp)
   2cdec:	d8c11c17 	ldw	r3,1136(sp)
   2cdf0:	d811883a 	mov	r8,sp
   2cdf4:	28800044 	addi	r2,r5,1
   2cdf8:	003d1f06 	br	2c278 <__alt_data_end+0xfffec6a8>
   2cdfc:	1800781e 	bne	r3,zero,2cfe0 <___vfiprintf_internal_r+0x1250>
   2ce00:	000b883a 	mov	r5,zero
   2ce04:	00800044 	movi	r2,1
   2ce08:	d811883a 	mov	r8,sp
   2ce0c:	003d2906 	br	2c2b4 <__alt_data_end+0xfffec6e4>
   2ce10:	d9012017 	ldw	r4,1152(sp)
   2ce14:	a00b883a 	mov	r5,r20
   2ce18:	d9811a04 	addi	r6,sp,1128
   2ce1c:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2ce20:	103f151e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2ce24:	d8811b17 	ldw	r2,1132(sp)
   2ce28:	d8c11c17 	ldw	r3,1136(sp)
   2ce2c:	d811883a 	mov	r8,sp
   2ce30:	10800044 	addi	r2,r2,1
   2ce34:	003d4406 	br	2c348 <__alt_data_end+0xfffec778>
   2ce38:	dac10a04 	addi	r11,sp,1064
   2ce3c:	dac12415 	stw	r11,1168(sp)
   2ce40:	003ccf06 	br	2c180 <__alt_data_end+0xfffec5b0>
   2ce44:	04a5c83a 	sub	r18,zero,r18
   2ce48:	9004c03a 	cmpne	r2,r18,zero
   2ce4c:	05adc83a 	sub	r22,zero,r22
   2ce50:	b0adc83a 	sub	r22,r22,r2
   2ce54:	03000b44 	movi	r12,45
   2ce58:	db011d85 	stb	r12,1142(sp)
   2ce5c:	4823883a 	mov	r17,r9
   2ce60:	00800044 	movi	r2,1
   2ce64:	9588b03a 	or	r4,r18,r22
   2ce68:	003cab06 	br	2c118 <__alt_data_end+0xfffec548>
   2ce6c:	000b883a 	mov	r5,zero
   2ce70:	00800044 	movi	r2,1
   2ce74:	d811883a 	mov	r8,sp
   2ce78:	703d0c26 	beq	r14,zero,2c2ac <__alt_data_end+0xfffec6dc>
   2ce7c:	00c00084 	movi	r3,2
   2ce80:	d9011d04 	addi	r4,sp,1140
   2ce84:	d9000015 	stw	r4,0(sp)
   2ce88:	d8c00115 	stw	r3,4(sp)
   2ce8c:	003d0406 	br	2c2a0 <__alt_data_end+0xfffec6d0>
   2ce90:	80c00007 	ldb	r3,0(r16)
   2ce94:	003c1d06 	br	2bf0c <__alt_data_end+0xfffec33c>
   2ce98:	a880040c 	andi	r2,r21,16
   2ce9c:	1000091e 	bne	r2,zero,2cec4 <___vfiprintf_internal_r+0x1134>
   2cea0:	aac0100c 	andi	r11,r21,64
   2cea4:	58000726 	beq	r11,zero,2cec4 <___vfiprintf_internal_r+0x1134>
   2cea8:	da812117 	ldw	r10,1156(sp)
   2ceac:	dac12217 	ldw	r11,1160(sp)
   2ceb0:	50800017 	ldw	r2,0(r10)
   2ceb4:	52800104 	addi	r10,r10,4
   2ceb8:	da812115 	stw	r10,1156(sp)
   2cebc:	12c0000d 	sth	r11,0(r2)
   2cec0:	003be806 	br	2be64 <__alt_data_end+0xfffec294>
   2cec4:	da812117 	ldw	r10,1156(sp)
   2cec8:	dac12217 	ldw	r11,1160(sp)
   2cecc:	50800017 	ldw	r2,0(r10)
   2ced0:	52800104 	addi	r10,r10,4
   2ced4:	da812115 	stw	r10,1156(sp)
   2ced8:	12c00015 	stw	r11,0(r2)
   2cedc:	003be106 	br	2be64 <__alt_data_end+0xfffec294>
   2cee0:	00800084 	movi	r2,2
   2cee4:	003c8906 	br	2c10c <__alt_data_end+0xfffec53c>
   2cee8:	a900100c 	andi	r4,r21,64
   2ceec:	20001f26 	beq	r4,zero,2cf6c <___vfiprintf_internal_r+0x11dc>
   2cef0:	da812117 	ldw	r10,1156(sp)
   2cef4:	1480000b 	ldhu	r18,0(r2)
   2cef8:	002d883a 	mov	r22,zero
   2cefc:	52800104 	addi	r10,r10,4
   2cf00:	da812115 	stw	r10,1156(sp)
   2cf04:	003dae06 	br	2c5c0 <__alt_data_end+0xfffec9f0>
   2cf08:	d9012017 	ldw	r4,1152(sp)
   2cf0c:	a00b883a 	mov	r5,r20
   2cf10:	d9811a04 	addi	r6,sp,1128
   2cf14:	da412b15 	stw	r9,1196(sp)
   2cf18:	db812a15 	stw	r14,1192(sp)
   2cf1c:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cf20:	da412b17 	ldw	r9,1196(sp)
   2cf24:	db812a17 	ldw	r14,1192(sp)
   2cf28:	103ed31e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cf2c:	d9411b17 	ldw	r5,1132(sp)
   2cf30:	d8c11c17 	ldw	r3,1136(sp)
   2cf34:	d811883a 	mov	r8,sp
   2cf38:	28800044 	addi	r2,r5,1
   2cf3c:	003e7f06 	br	2c93c <__alt_data_end+0xfffecd6c>
   2cf40:	9825883a 	mov	r18,r19
   2cf44:	003d3406 	br	2c418 <__alt_data_end+0xfffec848>
   2cf48:	4823883a 	mov	r17,r9
   2cf4c:	003e0806 	br	2c770 <__alt_data_end+0xfffecba0>
   2cf50:	d9012017 	ldw	r4,1152(sp)
   2cf54:	a00b883a 	mov	r5,r20
   2cf58:	d9811a04 	addi	r6,sp,1128
   2cf5c:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cf60:	103ec51e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cf64:	d8c11c17 	ldw	r3,1136(sp)
   2cf68:	003ee006 	br	2caec <__alt_data_end+0xfffecf1c>
   2cf6c:	dac12117 	ldw	r11,1156(sp)
   2cf70:	14800017 	ldw	r18,0(r2)
   2cf74:	002d883a 	mov	r22,zero
   2cf78:	5ac00104 	addi	r11,r11,4
   2cf7c:	dac12115 	stw	r11,1156(sp)
   2cf80:	003d8f06 	br	2c5c0 <__alt_data_end+0xfffec9f0>
   2cf84:	02c000f4 	movhi	r11,3
   2cf88:	5ace9404 	addi	r11,r11,14928
   2cf8c:	dac12315 	stw	r11,1164(sp)
   2cf90:	003ce306 	br	2c320 <__alt_data_end+0xfffec750>
   2cf94:	80c00043 	ldbu	r3,1(r16)
   2cf98:	ad400814 	ori	r21,r21,32
   2cf9c:	84000044 	addi	r16,r16,1
   2cfa0:	18c03fcc 	andi	r3,r3,255
   2cfa4:	18c0201c 	xori	r3,r3,128
   2cfa8:	18ffe004 	addi	r3,r3,-128
   2cfac:	003bd706 	br	2bf0c <__alt_data_end+0xfffec33c>
   2cfb0:	dac11e17 	ldw	r11,1144(sp)
   2cfb4:	d8c12417 	ldw	r3,1168(sp)
   2cfb8:	58e3c83a 	sub	r17,r11,r3
   2cfbc:	003c7006 	br	2c180 <__alt_data_end+0xfffec5b0>
   2cfc0:	da012a15 	stw	r8,1192(sp)
   2cfc4:	00217a80 	call	217a8 <strlen>
   2cfc8:	1023883a 	mov	r17,r2
   2cfcc:	db011d83 	ldbu	r12,1142(sp)
   2cfd0:	dd812115 	stw	r22,1156(sp)
   2cfd4:	0013883a 	mov	r9,zero
   2cfd8:	da012a17 	ldw	r8,1192(sp)
   2cfdc:	003c6806 	br	2c180 <__alt_data_end+0xfffec5b0>
   2cfe0:	d9012017 	ldw	r4,1152(sp)
   2cfe4:	a00b883a 	mov	r5,r20
   2cfe8:	d9811a04 	addi	r6,sp,1128
   2cfec:	da412b15 	stw	r9,1196(sp)
   2cff0:	002bc7c0 	call	2bc7c <__sprint_r.part.0>
   2cff4:	da412b17 	ldw	r9,1196(sp)
   2cff8:	103e9f1e 	bne	r2,zero,2ca78 <__alt_data_end+0xfffecea8>
   2cffc:	d9411b17 	ldw	r5,1132(sp)
   2d000:	d8c11c17 	ldw	r3,1136(sp)
   2d004:	d811883a 	mov	r8,sp
   2d008:	28800044 	addi	r2,r5,1
   2d00c:	003ca906 	br	2c2b4 <__alt_data_end+0xfffec6e4>
   2d010:	d9411b17 	ldw	r5,1132(sp)
   2d014:	010000f4 	movhi	r4,3
   2d018:	210e9804 	addi	r4,r4,14944
   2d01c:	d9012315 	stw	r4,1164(sp)
   2d020:	29400044 	addi	r5,r5,1
   2d024:	003c8806 	br	2c248 <__alt_data_end+0xfffec678>
   2d028:	00800184 	movi	r2,6
   2d02c:	1240012e 	bgeu	r2,r9,2d034 <___vfiprintf_internal_r+0x12a4>
   2d030:	1013883a 	mov	r9,r2
   2d034:	4823883a 	mov	r17,r9
   2d038:	4825883a 	mov	r18,r9
   2d03c:	48001516 	blt	r9,zero,2d094 <___vfiprintf_internal_r+0x1304>
   2d040:	008000f4 	movhi	r2,3
   2d044:	108e2804 	addi	r2,r2,14496
   2d048:	dd812115 	stw	r22,1156(sp)
   2d04c:	d8812415 	stw	r2,1168(sp)
   2d050:	003d6f06 	br	2c610 <__alt_data_end+0xfffeca40>
   2d054:	d9411b17 	ldw	r5,1132(sp)
   2d058:	02c000f4 	movhi	r11,3
   2d05c:	5ace9804 	addi	r11,r11,14944
   2d060:	dac12315 	stw	r11,1164(sp)
   2d064:	29400044 	addi	r5,r5,1
   2d068:	003ce106 	br	2c3f0 <__alt_data_end+0xfffec820>
   2d06c:	010000f4 	movhi	r4,3
   2d070:	210e9404 	addi	r4,r4,14928
   2d074:	d9012315 	stw	r4,1164(sp)
   2d078:	1009883a 	mov	r4,r2
   2d07c:	003eca06 	br	2cba8 <__alt_data_end+0xfffecfd8>
   2d080:	4823883a 	mov	r17,r9
   2d084:	db011d83 	ldbu	r12,1142(sp)
   2d088:	dd812115 	stw	r22,1156(sp)
   2d08c:	0013883a 	mov	r9,zero
   2d090:	003c3b06 	br	2c180 <__alt_data_end+0xfffec5b0>
   2d094:	0025883a 	mov	r18,zero
   2d098:	003fe906 	br	2d040 <__alt_data_end+0xfffed470>
   2d09c:	dac12117 	ldw	r11,1156(sp)
   2d0a0:	8005883a 	mov	r2,r16
   2d0a4:	5021883a 	mov	r16,r10
   2d0a8:	5a400017 	ldw	r9,0(r11)
   2d0ac:	58c00104 	addi	r3,r11,4
   2d0b0:	d8c12115 	stw	r3,1156(sp)
   2d0b4:	48000a16 	blt	r9,zero,2d0e0 <___vfiprintf_internal_r+0x1350>
   2d0b8:	10c00047 	ldb	r3,1(r2)
   2d0bc:	003b9306 	br	2bf0c <__alt_data_end+0xfffec33c>
   2d0c0:	043fffc4 	movi	r16,-1
   2d0c4:	003d0206 	br	2c4d0 <__alt_data_end+0xfffec900>
   2d0c8:	94c0010e 	bge	r18,r19,2d0d0 <___vfiprintf_internal_r+0x1340>
   2d0cc:	9825883a 	mov	r18,r19
   2d0d0:	da812217 	ldw	r10,1160(sp)
   2d0d4:	5495883a 	add	r10,r10,r18
   2d0d8:	da812215 	stw	r10,1160(sp)
   2d0dc:	003cd106 	br	2c424 <__alt_data_end+0xfffec854>
   2d0e0:	027fffc4 	movi	r9,-1
   2d0e4:	10c00047 	ldb	r3,1(r2)
   2d0e8:	003b8806 	br	2bf0c <__alt_data_end+0xfffec33c>

0002d0ec <__vfiprintf_internal>:
   2d0ec:	2007883a 	mov	r3,r4
   2d0f0:	010000f4 	movhi	r4,3
   2d0f4:	21159304 	addi	r4,r4,22092
   2d0f8:	21000017 	ldw	r4,0(r4)
   2d0fc:	2805883a 	mov	r2,r5
   2d100:	300f883a 	mov	r7,r6
   2d104:	180b883a 	mov	r5,r3
   2d108:	100d883a 	mov	r6,r2
   2d10c:	002bd901 	jmpi	2bd90 <___vfiprintf_internal_r>

0002d110 <_write_r>:
   2d110:	defffd04 	addi	sp,sp,-12
   2d114:	dc000015 	stw	r16,0(sp)
   2d118:	040000f4 	movhi	r16,3
   2d11c:	dc400115 	stw	r17,4(sp)
   2d120:	841c6904 	addi	r16,r16,29092
   2d124:	2023883a 	mov	r17,r4
   2d128:	2809883a 	mov	r4,r5
   2d12c:	300b883a 	mov	r5,r6
   2d130:	380d883a 	mov	r6,r7
   2d134:	dfc00215 	stw	ra,8(sp)
   2d138:	80000015 	stw	zero,0(r16)
   2d13c:	0031a0c0 	call	31a0c <write>
   2d140:	00ffffc4 	movi	r3,-1
   2d144:	10c00526 	beq	r2,r3,2d15c <_write_r+0x4c>
   2d148:	dfc00217 	ldw	ra,8(sp)
   2d14c:	dc400117 	ldw	r17,4(sp)
   2d150:	dc000017 	ldw	r16,0(sp)
   2d154:	dec00304 	addi	sp,sp,12
   2d158:	f800283a 	ret
   2d15c:	80c00017 	ldw	r3,0(r16)
   2d160:	183ff926 	beq	r3,zero,2d148 <__alt_data_end+0xfffed578>
   2d164:	88c00015 	stw	r3,0(r17)
   2d168:	003ff706 	br	2d148 <__alt_data_end+0xfffed578>

0002d16c <_close_r>:
   2d16c:	defffd04 	addi	sp,sp,-12
   2d170:	dc000015 	stw	r16,0(sp)
   2d174:	040000f4 	movhi	r16,3
   2d178:	dc400115 	stw	r17,4(sp)
   2d17c:	841c6904 	addi	r16,r16,29092
   2d180:	2023883a 	mov	r17,r4
   2d184:	2809883a 	mov	r4,r5
   2d188:	dfc00215 	stw	ra,8(sp)
   2d18c:	80000015 	stw	zero,0(r16)
   2d190:	0030d140 	call	30d14 <close>
   2d194:	00ffffc4 	movi	r3,-1
   2d198:	10c00526 	beq	r2,r3,2d1b0 <_close_r+0x44>
   2d19c:	dfc00217 	ldw	ra,8(sp)
   2d1a0:	dc400117 	ldw	r17,4(sp)
   2d1a4:	dc000017 	ldw	r16,0(sp)
   2d1a8:	dec00304 	addi	sp,sp,12
   2d1ac:	f800283a 	ret
   2d1b0:	80c00017 	ldw	r3,0(r16)
   2d1b4:	183ff926 	beq	r3,zero,2d19c <__alt_data_end+0xfffed5cc>
   2d1b8:	88c00015 	stw	r3,0(r17)
   2d1bc:	003ff706 	br	2d19c <__alt_data_end+0xfffed5cc>

0002d1c0 <_calloc_r>:
   2d1c0:	298b383a 	mul	r5,r5,r6
   2d1c4:	defffe04 	addi	sp,sp,-8
   2d1c8:	dc000015 	stw	r16,0(sp)
   2d1cc:	dfc00115 	stw	ra,4(sp)
   2d1d0:	00286300 	call	28630 <_malloc_r>
   2d1d4:	1021883a 	mov	r16,r2
   2d1d8:	10002826 	beq	r2,zero,2d27c <_calloc_r+0xbc>
   2d1dc:	11bfff17 	ldw	r6,-4(r2)
   2d1e0:	00bfff04 	movi	r2,-4
   2d1e4:	00c00904 	movi	r3,36
   2d1e8:	308c703a 	and	r6,r6,r2
   2d1ec:	308d883a 	add	r6,r6,r2
   2d1f0:	19801436 	bltu	r3,r6,2d244 <_calloc_r+0x84>
   2d1f4:	008004c4 	movi	r2,19
   2d1f8:	11800936 	bltu	r2,r6,2d220 <_calloc_r+0x60>
   2d1fc:	8005883a 	mov	r2,r16
   2d200:	10000015 	stw	zero,0(r2)
   2d204:	10000115 	stw	zero,4(r2)
   2d208:	10000215 	stw	zero,8(r2)
   2d20c:	8005883a 	mov	r2,r16
   2d210:	dfc00117 	ldw	ra,4(sp)
   2d214:	dc000017 	ldw	r16,0(sp)
   2d218:	dec00204 	addi	sp,sp,8
   2d21c:	f800283a 	ret
   2d220:	80000015 	stw	zero,0(r16)
   2d224:	80000115 	stw	zero,4(r16)
   2d228:	008006c4 	movi	r2,27
   2d22c:	11800d2e 	bgeu	r2,r6,2d264 <_calloc_r+0xa4>
   2d230:	80000215 	stw	zero,8(r16)
   2d234:	80000315 	stw	zero,12(r16)
   2d238:	30c00c26 	beq	r6,r3,2d26c <_calloc_r+0xac>
   2d23c:	80800404 	addi	r2,r16,16
   2d240:	003fef06 	br	2d200 <__alt_data_end+0xfffed630>
   2d244:	8009883a 	mov	r4,r16
   2d248:	000b883a 	mov	r5,zero
   2d24c:	00291540 	call	29154 <memset>
   2d250:	8005883a 	mov	r2,r16
   2d254:	dfc00117 	ldw	ra,4(sp)
   2d258:	dc000017 	ldw	r16,0(sp)
   2d25c:	dec00204 	addi	sp,sp,8
   2d260:	f800283a 	ret
   2d264:	80800204 	addi	r2,r16,8
   2d268:	003fe506 	br	2d200 <__alt_data_end+0xfffed630>
   2d26c:	80000415 	stw	zero,16(r16)
   2d270:	80800604 	addi	r2,r16,24
   2d274:	80000515 	stw	zero,20(r16)
   2d278:	003fe106 	br	2d200 <__alt_data_end+0xfffed630>
   2d27c:	0005883a 	mov	r2,zero
   2d280:	003fe306 	br	2d210 <__alt_data_end+0xfffed640>

0002d284 <_fclose_r>:
   2d284:	28003226 	beq	r5,zero,2d350 <_fclose_r+0xcc>
   2d288:	defffc04 	addi	sp,sp,-16
   2d28c:	dc400115 	stw	r17,4(sp)
   2d290:	2023883a 	mov	r17,r4
   2d294:	dc000015 	stw	r16,0(sp)
   2d298:	dfc00315 	stw	ra,12(sp)
   2d29c:	dc800215 	stw	r18,8(sp)
   2d2a0:	2821883a 	mov	r16,r5
   2d2a4:	00279300 	call	27930 <__sfp_lock_acquire>
   2d2a8:	88000226 	beq	r17,zero,2d2b4 <_fclose_r+0x30>
   2d2ac:	88800e17 	ldw	r2,56(r17)
   2d2b0:	10002926 	beq	r2,zero,2d358 <_fclose_r+0xd4>
   2d2b4:	8080030f 	ldh	r2,12(r16)
   2d2b8:	10002226 	beq	r2,zero,2d344 <_fclose_r+0xc0>
   2d2bc:	8809883a 	mov	r4,r17
   2d2c0:	800b883a 	mov	r5,r16
   2d2c4:	00273780 	call	27378 <_fflush_r>
   2d2c8:	1025883a 	mov	r18,r2
   2d2cc:	80800b17 	ldw	r2,44(r16)
   2d2d0:	10000426 	beq	r2,zero,2d2e4 <_fclose_r+0x60>
   2d2d4:	81400717 	ldw	r5,28(r16)
   2d2d8:	8809883a 	mov	r4,r17
   2d2dc:	103ee83a 	callr	r2
   2d2e0:	10002616 	blt	r2,zero,2d37c <_fclose_r+0xf8>
   2d2e4:	8080030b 	ldhu	r2,12(r16)
   2d2e8:	1080200c 	andi	r2,r2,128
   2d2ec:	10001f1e 	bne	r2,zero,2d36c <_fclose_r+0xe8>
   2d2f0:	81400c17 	ldw	r5,48(r16)
   2d2f4:	28000526 	beq	r5,zero,2d30c <_fclose_r+0x88>
   2d2f8:	80801004 	addi	r2,r16,64
   2d2fc:	28800226 	beq	r5,r2,2d308 <_fclose_r+0x84>
   2d300:	8809883a 	mov	r4,r17
   2d304:	0027a940 	call	27a94 <_free_r>
   2d308:	80000c15 	stw	zero,48(r16)
   2d30c:	81401117 	ldw	r5,68(r16)
   2d310:	28000326 	beq	r5,zero,2d320 <_fclose_r+0x9c>
   2d314:	8809883a 	mov	r4,r17
   2d318:	0027a940 	call	27a94 <_free_r>
   2d31c:	80001115 	stw	zero,68(r16)
   2d320:	8000030d 	sth	zero,12(r16)
   2d324:	00279340 	call	27934 <__sfp_lock_release>
   2d328:	9005883a 	mov	r2,r18
   2d32c:	dfc00317 	ldw	ra,12(sp)
   2d330:	dc800217 	ldw	r18,8(sp)
   2d334:	dc400117 	ldw	r17,4(sp)
   2d338:	dc000017 	ldw	r16,0(sp)
   2d33c:	dec00404 	addi	sp,sp,16
   2d340:	f800283a 	ret
   2d344:	00279340 	call	27934 <__sfp_lock_release>
   2d348:	0005883a 	mov	r2,zero
   2d34c:	003ff706 	br	2d32c <__alt_data_end+0xfffed75c>
   2d350:	0005883a 	mov	r2,zero
   2d354:	f800283a 	ret
   2d358:	8809883a 	mov	r4,r17
   2d35c:	00279200 	call	27920 <__sinit>
   2d360:	8080030f 	ldh	r2,12(r16)
   2d364:	103fd51e 	bne	r2,zero,2d2bc <__alt_data_end+0xfffed6ec>
   2d368:	003ff606 	br	2d344 <__alt_data_end+0xfffed774>
   2d36c:	81400417 	ldw	r5,16(r16)
   2d370:	8809883a 	mov	r4,r17
   2d374:	0027a940 	call	27a94 <_free_r>
   2d378:	003fdd06 	br	2d2f0 <__alt_data_end+0xfffed720>
   2d37c:	04bfffc4 	movi	r18,-1
   2d380:	003fd806 	br	2d2e4 <__alt_data_end+0xfffed714>

0002d384 <fclose>:
   2d384:	008000f4 	movhi	r2,3
   2d388:	10959304 	addi	r2,r2,22092
   2d38c:	200b883a 	mov	r5,r4
   2d390:	11000017 	ldw	r4,0(r2)
   2d394:	002d2841 	jmpi	2d284 <_fclose_r>

0002d398 <_fputwc_r>:
   2d398:	3080030b 	ldhu	r2,12(r6)
   2d39c:	defff804 	addi	sp,sp,-32
   2d3a0:	dcc00415 	stw	r19,16(sp)
   2d3a4:	dc800315 	stw	r18,12(sp)
   2d3a8:	dc000115 	stw	r16,4(sp)
   2d3ac:	dfc00715 	stw	ra,28(sp)
   2d3b0:	dd400615 	stw	r21,24(sp)
   2d3b4:	dd000515 	stw	r20,20(sp)
   2d3b8:	dc400215 	stw	r17,8(sp)
   2d3bc:	10c8000c 	andi	r3,r2,8192
   2d3c0:	3021883a 	mov	r16,r6
   2d3c4:	2027883a 	mov	r19,r4
   2d3c8:	2825883a 	mov	r18,r5
   2d3cc:	1800051e 	bne	r3,zero,2d3e4 <_fputwc_r+0x4c>
   2d3d0:	30c01917 	ldw	r3,100(r6)
   2d3d4:	10880014 	ori	r2,r2,8192
   2d3d8:	3080030d 	sth	r2,12(r6)
   2d3dc:	18880014 	ori	r2,r3,8192
   2d3e0:	30801915 	stw	r2,100(r6)
   2d3e4:	00284200 	call	28420 <__locale_mb_cur_max>
   2d3e8:	00c00044 	movi	r3,1
   2d3ec:	10c03e26 	beq	r2,r3,2d4e8 <_fputwc_r+0x150>
   2d3f0:	9809883a 	mov	r4,r19
   2d3f4:	d80b883a 	mov	r5,sp
   2d3f8:	900d883a 	mov	r6,r18
   2d3fc:	81c01704 	addi	r7,r16,92
   2d400:	002d8480 	call	2d848 <_wcrtomb_r>
   2d404:	1029883a 	mov	r20,r2
   2d408:	00bfffc4 	movi	r2,-1
   2d40c:	a0802026 	beq	r20,r2,2d490 <_fputwc_r+0xf8>
   2d410:	d9400003 	ldbu	r5,0(sp)
   2d414:	a0001c26 	beq	r20,zero,2d488 <_fputwc_r+0xf0>
   2d418:	0023883a 	mov	r17,zero
   2d41c:	05400284 	movi	r21,10
   2d420:	00000906 	br	2d448 <_fputwc_r+0xb0>
   2d424:	80800017 	ldw	r2,0(r16)
   2d428:	11400005 	stb	r5,0(r2)
   2d42c:	80c00017 	ldw	r3,0(r16)
   2d430:	18c00044 	addi	r3,r3,1
   2d434:	80c00015 	stw	r3,0(r16)
   2d438:	8c400044 	addi	r17,r17,1
   2d43c:	dc45883a 	add	r2,sp,r17
   2d440:	8d00112e 	bgeu	r17,r20,2d488 <_fputwc_r+0xf0>
   2d444:	11400003 	ldbu	r5,0(r2)
   2d448:	80c00217 	ldw	r3,8(r16)
   2d44c:	18ffffc4 	addi	r3,r3,-1
   2d450:	80c00215 	stw	r3,8(r16)
   2d454:	183ff30e 	bge	r3,zero,2d424 <__alt_data_end+0xfffed854>
   2d458:	80800617 	ldw	r2,24(r16)
   2d45c:	18801916 	blt	r3,r2,2d4c4 <_fputwc_r+0x12c>
   2d460:	80800017 	ldw	r2,0(r16)
   2d464:	11400005 	stb	r5,0(r2)
   2d468:	80800017 	ldw	r2,0(r16)
   2d46c:	10c00003 	ldbu	r3,0(r2)
   2d470:	10800044 	addi	r2,r2,1
   2d474:	1d402326 	beq	r3,r21,2d504 <_fputwc_r+0x16c>
   2d478:	80800015 	stw	r2,0(r16)
   2d47c:	8c400044 	addi	r17,r17,1
   2d480:	dc45883a 	add	r2,sp,r17
   2d484:	8d3fef36 	bltu	r17,r20,2d444 <__alt_data_end+0xfffed874>
   2d488:	9005883a 	mov	r2,r18
   2d48c:	00000406 	br	2d4a0 <_fputwc_r+0x108>
   2d490:	80c0030b 	ldhu	r3,12(r16)
   2d494:	a005883a 	mov	r2,r20
   2d498:	18c01014 	ori	r3,r3,64
   2d49c:	80c0030d 	sth	r3,12(r16)
   2d4a0:	dfc00717 	ldw	ra,28(sp)
   2d4a4:	dd400617 	ldw	r21,24(sp)
   2d4a8:	dd000517 	ldw	r20,20(sp)
   2d4ac:	dcc00417 	ldw	r19,16(sp)
   2d4b0:	dc800317 	ldw	r18,12(sp)
   2d4b4:	dc400217 	ldw	r17,8(sp)
   2d4b8:	dc000117 	ldw	r16,4(sp)
   2d4bc:	dec00804 	addi	sp,sp,32
   2d4c0:	f800283a 	ret
   2d4c4:	9809883a 	mov	r4,r19
   2d4c8:	29403fcc 	andi	r5,r5,255
   2d4cc:	800d883a 	mov	r6,r16
   2d4d0:	002d6d80 	call	2d6d8 <__swbuf_r>
   2d4d4:	10bfffe0 	cmpeqi	r2,r2,-1
   2d4d8:	10803fcc 	andi	r2,r2,255
   2d4dc:	103fd626 	beq	r2,zero,2d438 <__alt_data_end+0xfffed868>
   2d4e0:	00bfffc4 	movi	r2,-1
   2d4e4:	003fee06 	br	2d4a0 <__alt_data_end+0xfffed8d0>
   2d4e8:	90ffffc4 	addi	r3,r18,-1
   2d4ec:	01003f84 	movi	r4,254
   2d4f0:	20ffbf36 	bltu	r4,r3,2d3f0 <__alt_data_end+0xfffed820>
   2d4f4:	900b883a 	mov	r5,r18
   2d4f8:	dc800005 	stb	r18,0(sp)
   2d4fc:	1029883a 	mov	r20,r2
   2d500:	003fc506 	br	2d418 <__alt_data_end+0xfffed848>
   2d504:	9809883a 	mov	r4,r19
   2d508:	a80b883a 	mov	r5,r21
   2d50c:	800d883a 	mov	r6,r16
   2d510:	002d6d80 	call	2d6d8 <__swbuf_r>
   2d514:	10bfffe0 	cmpeqi	r2,r2,-1
   2d518:	003fef06 	br	2d4d8 <__alt_data_end+0xfffed908>

0002d51c <fputwc>:
   2d51c:	defffc04 	addi	sp,sp,-16
   2d520:	dc000115 	stw	r16,4(sp)
   2d524:	040000f4 	movhi	r16,3
   2d528:	84159304 	addi	r16,r16,22092
   2d52c:	dc400215 	stw	r17,8(sp)
   2d530:	2023883a 	mov	r17,r4
   2d534:	81000017 	ldw	r4,0(r16)
   2d538:	dfc00315 	stw	ra,12(sp)
   2d53c:	280d883a 	mov	r6,r5
   2d540:	20000626 	beq	r4,zero,2d55c <fputwc+0x40>
   2d544:	20800e17 	ldw	r2,56(r4)
   2d548:	1000041e 	bne	r2,zero,2d55c <fputwc+0x40>
   2d54c:	d9400015 	stw	r5,0(sp)
   2d550:	00279200 	call	27920 <__sinit>
   2d554:	81000017 	ldw	r4,0(r16)
   2d558:	d9800017 	ldw	r6,0(sp)
   2d55c:	880b883a 	mov	r5,r17
   2d560:	dfc00317 	ldw	ra,12(sp)
   2d564:	dc400217 	ldw	r17,8(sp)
   2d568:	dc000117 	ldw	r16,4(sp)
   2d56c:	dec00404 	addi	sp,sp,16
   2d570:	002d3981 	jmpi	2d398 <_fputwc_r>

0002d574 <_fstat_r>:
   2d574:	defffd04 	addi	sp,sp,-12
   2d578:	dc000015 	stw	r16,0(sp)
   2d57c:	040000f4 	movhi	r16,3
   2d580:	dc400115 	stw	r17,4(sp)
   2d584:	841c6904 	addi	r16,r16,29092
   2d588:	2023883a 	mov	r17,r4
   2d58c:	2809883a 	mov	r4,r5
   2d590:	300b883a 	mov	r5,r6
   2d594:	dfc00215 	stw	ra,8(sp)
   2d598:	80000015 	stw	zero,0(r16)
   2d59c:	0030e600 	call	30e60 <fstat>
   2d5a0:	00ffffc4 	movi	r3,-1
   2d5a4:	10c00526 	beq	r2,r3,2d5bc <_fstat_r+0x48>
   2d5a8:	dfc00217 	ldw	ra,8(sp)
   2d5ac:	dc400117 	ldw	r17,4(sp)
   2d5b0:	dc000017 	ldw	r16,0(sp)
   2d5b4:	dec00304 	addi	sp,sp,12
   2d5b8:	f800283a 	ret
   2d5bc:	80c00017 	ldw	r3,0(r16)
   2d5c0:	183ff926 	beq	r3,zero,2d5a8 <__alt_data_end+0xfffed9d8>
   2d5c4:	88c00015 	stw	r3,0(r17)
   2d5c8:	003ff706 	br	2d5a8 <__alt_data_end+0xfffed9d8>

0002d5cc <_isatty_r>:
   2d5cc:	defffd04 	addi	sp,sp,-12
   2d5d0:	dc000015 	stw	r16,0(sp)
   2d5d4:	040000f4 	movhi	r16,3
   2d5d8:	dc400115 	stw	r17,4(sp)
   2d5dc:	841c6904 	addi	r16,r16,29092
   2d5e0:	2023883a 	mov	r17,r4
   2d5e4:	2809883a 	mov	r4,r5
   2d5e8:	dfc00215 	stw	ra,8(sp)
   2d5ec:	80000015 	stw	zero,0(r16)
   2d5f0:	00312300 	call	31230 <isatty>
   2d5f4:	00ffffc4 	movi	r3,-1
   2d5f8:	10c00526 	beq	r2,r3,2d610 <_isatty_r+0x44>
   2d5fc:	dfc00217 	ldw	ra,8(sp)
   2d600:	dc400117 	ldw	r17,4(sp)
   2d604:	dc000017 	ldw	r16,0(sp)
   2d608:	dec00304 	addi	sp,sp,12
   2d60c:	f800283a 	ret
   2d610:	80c00017 	ldw	r3,0(r16)
   2d614:	183ff926 	beq	r3,zero,2d5fc <__alt_data_end+0xfffeda2c>
   2d618:	88c00015 	stw	r3,0(r17)
   2d61c:	003ff706 	br	2d5fc <__alt_data_end+0xfffeda2c>

0002d620 <_lseek_r>:
   2d620:	defffd04 	addi	sp,sp,-12
   2d624:	dc000015 	stw	r16,0(sp)
   2d628:	040000f4 	movhi	r16,3
   2d62c:	dc400115 	stw	r17,4(sp)
   2d630:	841c6904 	addi	r16,r16,29092
   2d634:	2023883a 	mov	r17,r4
   2d638:	2809883a 	mov	r4,r5
   2d63c:	300b883a 	mov	r5,r6
   2d640:	380d883a 	mov	r6,r7
   2d644:	dfc00215 	stw	ra,8(sp)
   2d648:	80000015 	stw	zero,0(r16)
   2d64c:	00314080 	call	31408 <lseek>
   2d650:	00ffffc4 	movi	r3,-1
   2d654:	10c00526 	beq	r2,r3,2d66c <_lseek_r+0x4c>
   2d658:	dfc00217 	ldw	ra,8(sp)
   2d65c:	dc400117 	ldw	r17,4(sp)
   2d660:	dc000017 	ldw	r16,0(sp)
   2d664:	dec00304 	addi	sp,sp,12
   2d668:	f800283a 	ret
   2d66c:	80c00017 	ldw	r3,0(r16)
   2d670:	183ff926 	beq	r3,zero,2d658 <__alt_data_end+0xfffeda88>
   2d674:	88c00015 	stw	r3,0(r17)
   2d678:	003ff706 	br	2d658 <__alt_data_end+0xfffeda88>

0002d67c <_read_r>:
   2d67c:	defffd04 	addi	sp,sp,-12
   2d680:	dc000015 	stw	r16,0(sp)
   2d684:	040000f4 	movhi	r16,3
   2d688:	dc400115 	stw	r17,4(sp)
   2d68c:	841c6904 	addi	r16,r16,29092
   2d690:	2023883a 	mov	r17,r4
   2d694:	2809883a 	mov	r4,r5
   2d698:	300b883a 	mov	r5,r6
   2d69c:	380d883a 	mov	r6,r7
   2d6a0:	dfc00215 	stw	ra,8(sp)
   2d6a4:	80000015 	stw	zero,0(r16)
   2d6a8:	00315e40 	call	315e4 <read>
   2d6ac:	00ffffc4 	movi	r3,-1
   2d6b0:	10c00526 	beq	r2,r3,2d6c8 <_read_r+0x4c>
   2d6b4:	dfc00217 	ldw	ra,8(sp)
   2d6b8:	dc400117 	ldw	r17,4(sp)
   2d6bc:	dc000017 	ldw	r16,0(sp)
   2d6c0:	dec00304 	addi	sp,sp,12
   2d6c4:	f800283a 	ret
   2d6c8:	80c00017 	ldw	r3,0(r16)
   2d6cc:	183ff926 	beq	r3,zero,2d6b4 <__alt_data_end+0xfffedae4>
   2d6d0:	88c00015 	stw	r3,0(r17)
   2d6d4:	003ff706 	br	2d6b4 <__alt_data_end+0xfffedae4>

0002d6d8 <__swbuf_r>:
   2d6d8:	defffc04 	addi	sp,sp,-16
   2d6dc:	dc800215 	stw	r18,8(sp)
   2d6e0:	dc400115 	stw	r17,4(sp)
   2d6e4:	dc000015 	stw	r16,0(sp)
   2d6e8:	dfc00315 	stw	ra,12(sp)
   2d6ec:	2025883a 	mov	r18,r4
   2d6f0:	2823883a 	mov	r17,r5
   2d6f4:	3021883a 	mov	r16,r6
   2d6f8:	20000226 	beq	r4,zero,2d704 <__swbuf_r+0x2c>
   2d6fc:	20800e17 	ldw	r2,56(r4)
   2d700:	10004126 	beq	r2,zero,2d808 <__swbuf_r+0x130>
   2d704:	80c00617 	ldw	r3,24(r16)
   2d708:	8180030b 	ldhu	r6,12(r16)
   2d70c:	80c00215 	stw	r3,8(r16)
   2d710:	30c0020c 	andi	r3,r6,8
   2d714:	18003526 	beq	r3,zero,2d7ec <__swbuf_r+0x114>
   2d718:	80c00417 	ldw	r3,16(r16)
   2d71c:	18003326 	beq	r3,zero,2d7ec <__swbuf_r+0x114>
   2d720:	3088000c 	andi	r2,r6,8192
   2d724:	8c403fcc 	andi	r17,r17,255
   2d728:	10001726 	beq	r2,zero,2d788 <__swbuf_r+0xb0>
   2d72c:	80800017 	ldw	r2,0(r16)
   2d730:	81000517 	ldw	r4,20(r16)
   2d734:	10c7c83a 	sub	r3,r2,r3
   2d738:	19001d0e 	bge	r3,r4,2d7b0 <__swbuf_r+0xd8>
   2d73c:	18c00044 	addi	r3,r3,1
   2d740:	81400217 	ldw	r5,8(r16)
   2d744:	11000044 	addi	r4,r2,1
   2d748:	81000015 	stw	r4,0(r16)
   2d74c:	297fffc4 	addi	r5,r5,-1
   2d750:	81400215 	stw	r5,8(r16)
   2d754:	14400005 	stb	r17,0(r2)
   2d758:	80800517 	ldw	r2,20(r16)
   2d75c:	10c01d26 	beq	r2,r3,2d7d4 <__swbuf_r+0xfc>
   2d760:	8080030b 	ldhu	r2,12(r16)
   2d764:	1080004c 	andi	r2,r2,1
   2d768:	1000181e 	bne	r2,zero,2d7cc <__swbuf_r+0xf4>
   2d76c:	8805883a 	mov	r2,r17
   2d770:	dfc00317 	ldw	ra,12(sp)
   2d774:	dc800217 	ldw	r18,8(sp)
   2d778:	dc400117 	ldw	r17,4(sp)
   2d77c:	dc000017 	ldw	r16,0(sp)
   2d780:	dec00404 	addi	sp,sp,16
   2d784:	f800283a 	ret
   2d788:	81001917 	ldw	r4,100(r16)
   2d78c:	00b7ffc4 	movi	r2,-8193
   2d790:	31880014 	ori	r6,r6,8192
   2d794:	2084703a 	and	r2,r4,r2
   2d798:	80801915 	stw	r2,100(r16)
   2d79c:	80800017 	ldw	r2,0(r16)
   2d7a0:	81000517 	ldw	r4,20(r16)
   2d7a4:	8180030d 	sth	r6,12(r16)
   2d7a8:	10c7c83a 	sub	r3,r2,r3
   2d7ac:	193fe316 	blt	r3,r4,2d73c <__alt_data_end+0xfffedb6c>
   2d7b0:	9009883a 	mov	r4,r18
   2d7b4:	800b883a 	mov	r5,r16
   2d7b8:	00273780 	call	27378 <_fflush_r>
   2d7bc:	1000091e 	bne	r2,zero,2d7e4 <__swbuf_r+0x10c>
   2d7c0:	80800017 	ldw	r2,0(r16)
   2d7c4:	00c00044 	movi	r3,1
   2d7c8:	003fdd06 	br	2d740 <__alt_data_end+0xfffedb70>
   2d7cc:	00800284 	movi	r2,10
   2d7d0:	88bfe61e 	bne	r17,r2,2d76c <__alt_data_end+0xfffedb9c>
   2d7d4:	9009883a 	mov	r4,r18
   2d7d8:	800b883a 	mov	r5,r16
   2d7dc:	00273780 	call	27378 <_fflush_r>
   2d7e0:	103fe226 	beq	r2,zero,2d76c <__alt_data_end+0xfffedb9c>
   2d7e4:	00bfffc4 	movi	r2,-1
   2d7e8:	003fe106 	br	2d770 <__alt_data_end+0xfffedba0>
   2d7ec:	9009883a 	mov	r4,r18
   2d7f0:	800b883a 	mov	r5,r16
   2d7f4:	00259200 	call	25920 <__swsetup_r>
   2d7f8:	1000051e 	bne	r2,zero,2d810 <__swbuf_r+0x138>
   2d7fc:	8180030b 	ldhu	r6,12(r16)
   2d800:	80c00417 	ldw	r3,16(r16)
   2d804:	003fc606 	br	2d720 <__alt_data_end+0xfffedb50>
   2d808:	00279200 	call	27920 <__sinit>
   2d80c:	003fbd06 	br	2d704 <__alt_data_end+0xfffedb34>
   2d810:	80c0030b 	ldhu	r3,12(r16)
   2d814:	00bfffc4 	movi	r2,-1
   2d818:	18c01014 	ori	r3,r3,64
   2d81c:	80c0030d 	sth	r3,12(r16)
   2d820:	00c00244 	movi	r3,9
   2d824:	90c00015 	stw	r3,0(r18)
   2d828:	003fd106 	br	2d770 <__alt_data_end+0xfffedba0>

0002d82c <__swbuf>:
   2d82c:	00c000f4 	movhi	r3,3
   2d830:	18d59304 	addi	r3,r3,22092
   2d834:	2005883a 	mov	r2,r4
   2d838:	19000017 	ldw	r4,0(r3)
   2d83c:	280d883a 	mov	r6,r5
   2d840:	100b883a 	mov	r5,r2
   2d844:	002d6d81 	jmpi	2d6d8 <__swbuf_r>

0002d848 <_wcrtomb_r>:
   2d848:	defff604 	addi	sp,sp,-40
   2d84c:	008000f4 	movhi	r2,3
   2d850:	dc800815 	stw	r18,32(sp)
   2d854:	dc400715 	stw	r17,28(sp)
   2d858:	dc000615 	stw	r16,24(sp)
   2d85c:	10959704 	addi	r2,r2,22108
   2d860:	dfc00915 	stw	ra,36(sp)
   2d864:	2021883a 	mov	r16,r4
   2d868:	3823883a 	mov	r17,r7
   2d86c:	14800017 	ldw	r18,0(r2)
   2d870:	28001426 	beq	r5,zero,2d8c4 <_wcrtomb_r+0x7c>
   2d874:	d9400415 	stw	r5,16(sp)
   2d878:	d9800515 	stw	r6,20(sp)
   2d87c:	00284140 	call	28414 <__locale_charset>
   2d880:	d9400417 	ldw	r5,16(sp)
   2d884:	d9800517 	ldw	r6,20(sp)
   2d888:	8009883a 	mov	r4,r16
   2d88c:	dc400015 	stw	r17,0(sp)
   2d890:	100f883a 	mov	r7,r2
   2d894:	903ee83a 	callr	r18
   2d898:	00ffffc4 	movi	r3,-1
   2d89c:	10c0031e 	bne	r2,r3,2d8ac <_wcrtomb_r+0x64>
   2d8a0:	88000015 	stw	zero,0(r17)
   2d8a4:	00c02284 	movi	r3,138
   2d8a8:	80c00015 	stw	r3,0(r16)
   2d8ac:	dfc00917 	ldw	ra,36(sp)
   2d8b0:	dc800817 	ldw	r18,32(sp)
   2d8b4:	dc400717 	ldw	r17,28(sp)
   2d8b8:	dc000617 	ldw	r16,24(sp)
   2d8bc:	dec00a04 	addi	sp,sp,40
   2d8c0:	f800283a 	ret
   2d8c4:	00284140 	call	28414 <__locale_charset>
   2d8c8:	8009883a 	mov	r4,r16
   2d8cc:	dc400015 	stw	r17,0(sp)
   2d8d0:	d9400104 	addi	r5,sp,4
   2d8d4:	000d883a 	mov	r6,zero
   2d8d8:	100f883a 	mov	r7,r2
   2d8dc:	903ee83a 	callr	r18
   2d8e0:	003fed06 	br	2d898 <__alt_data_end+0xfffedcc8>

0002d8e4 <wcrtomb>:
   2d8e4:	defff504 	addi	sp,sp,-44
   2d8e8:	dc400515 	stw	r17,20(sp)
   2d8ec:	dc000415 	stw	r16,16(sp)
   2d8f0:	dfc00a15 	stw	ra,40(sp)
   2d8f4:	dd400915 	stw	r21,36(sp)
   2d8f8:	dd000815 	stw	r20,32(sp)
   2d8fc:	dcc00715 	stw	r19,28(sp)
   2d900:	dc800615 	stw	r18,24(sp)
   2d904:	2021883a 	mov	r16,r4
   2d908:	3023883a 	mov	r17,r6
   2d90c:	20001d26 	beq	r4,zero,2d984 <wcrtomb+0xa0>
   2d910:	048000f4 	movhi	r18,3
   2d914:	94959304 	addi	r18,r18,22092
   2d918:	008000f4 	movhi	r2,3
   2d91c:	95400017 	ldw	r21,0(r18)
   2d920:	10959704 	addi	r2,r2,22108
   2d924:	15000017 	ldw	r20,0(r2)
   2d928:	2827883a 	mov	r19,r5
   2d92c:	00284140 	call	28414 <__locale_charset>
   2d930:	a809883a 	mov	r4,r21
   2d934:	dc400015 	stw	r17,0(sp)
   2d938:	800b883a 	mov	r5,r16
   2d93c:	980d883a 	mov	r6,r19
   2d940:	100f883a 	mov	r7,r2
   2d944:	a03ee83a 	callr	r20
   2d948:	00ffffc4 	movi	r3,-1
   2d94c:	10c0041e 	bne	r2,r3,2d960 <wcrtomb+0x7c>
   2d950:	90c00017 	ldw	r3,0(r18)
   2d954:	01002284 	movi	r4,138
   2d958:	88000015 	stw	zero,0(r17)
   2d95c:	19000015 	stw	r4,0(r3)
   2d960:	dfc00a17 	ldw	ra,40(sp)
   2d964:	dd400917 	ldw	r21,36(sp)
   2d968:	dd000817 	ldw	r20,32(sp)
   2d96c:	dcc00717 	ldw	r19,28(sp)
   2d970:	dc800617 	ldw	r18,24(sp)
   2d974:	dc400517 	ldw	r17,20(sp)
   2d978:	dc000417 	ldw	r16,16(sp)
   2d97c:	dec00b04 	addi	sp,sp,44
   2d980:	f800283a 	ret
   2d984:	048000f4 	movhi	r18,3
   2d988:	94959304 	addi	r18,r18,22092
   2d98c:	008000f4 	movhi	r2,3
   2d990:	94c00017 	ldw	r19,0(r18)
   2d994:	10959704 	addi	r2,r2,22108
   2d998:	14000017 	ldw	r16,0(r2)
   2d99c:	00284140 	call	28414 <__locale_charset>
   2d9a0:	9809883a 	mov	r4,r19
   2d9a4:	dc400015 	stw	r17,0(sp)
   2d9a8:	d9400104 	addi	r5,sp,4
   2d9ac:	000d883a 	mov	r6,zero
   2d9b0:	100f883a 	mov	r7,r2
   2d9b4:	803ee83a 	callr	r16
   2d9b8:	003fe306 	br	2d948 <__alt_data_end+0xfffedd78>

0002d9bc <__ascii_wctomb>:
   2d9bc:	28000526 	beq	r5,zero,2d9d4 <__ascii_wctomb+0x18>
   2d9c0:	00803fc4 	movi	r2,255
   2d9c4:	11800536 	bltu	r2,r6,2d9dc <__ascii_wctomb+0x20>
   2d9c8:	29800005 	stb	r6,0(r5)
   2d9cc:	00800044 	movi	r2,1
   2d9d0:	f800283a 	ret
   2d9d4:	0005883a 	mov	r2,zero
   2d9d8:	f800283a 	ret
   2d9dc:	00802284 	movi	r2,138
   2d9e0:	20800015 	stw	r2,0(r4)
   2d9e4:	00bfffc4 	movi	r2,-1
   2d9e8:	f800283a 	ret

0002d9ec <_wctomb_r>:
   2d9ec:	008000f4 	movhi	r2,3
   2d9f0:	defff904 	addi	sp,sp,-28
   2d9f4:	10959704 	addi	r2,r2,22108
   2d9f8:	dfc00615 	stw	ra,24(sp)
   2d9fc:	dc400515 	stw	r17,20(sp)
   2da00:	dc000415 	stw	r16,16(sp)
   2da04:	3823883a 	mov	r17,r7
   2da08:	14000017 	ldw	r16,0(r2)
   2da0c:	d9000115 	stw	r4,4(sp)
   2da10:	d9400215 	stw	r5,8(sp)
   2da14:	d9800315 	stw	r6,12(sp)
   2da18:	00284140 	call	28414 <__locale_charset>
   2da1c:	d9000117 	ldw	r4,4(sp)
   2da20:	d9400217 	ldw	r5,8(sp)
   2da24:	d9800317 	ldw	r6,12(sp)
   2da28:	dc400015 	stw	r17,0(sp)
   2da2c:	100f883a 	mov	r7,r2
   2da30:	803ee83a 	callr	r16
   2da34:	dfc00617 	ldw	ra,24(sp)
   2da38:	dc400517 	ldw	r17,20(sp)
   2da3c:	dc000417 	ldw	r16,16(sp)
   2da40:	dec00704 	addi	sp,sp,28
   2da44:	f800283a 	ret

0002da48 <__udivdi3>:
   2da48:	defff504 	addi	sp,sp,-44
   2da4c:	dcc00415 	stw	r19,16(sp)
   2da50:	dc000115 	stw	r16,4(sp)
   2da54:	dfc00a15 	stw	ra,40(sp)
   2da58:	df000915 	stw	fp,36(sp)
   2da5c:	ddc00815 	stw	r23,32(sp)
   2da60:	dd800715 	stw	r22,28(sp)
   2da64:	dd400615 	stw	r21,24(sp)
   2da68:	dd000515 	stw	r20,20(sp)
   2da6c:	dc800315 	stw	r18,12(sp)
   2da70:	dc400215 	stw	r17,8(sp)
   2da74:	2027883a 	mov	r19,r4
   2da78:	2821883a 	mov	r16,r5
   2da7c:	3800421e 	bne	r7,zero,2db88 <__udivdi3+0x140>
   2da80:	3025883a 	mov	r18,r6
   2da84:	2023883a 	mov	r17,r4
   2da88:	2980542e 	bgeu	r5,r6,2dbdc <__udivdi3+0x194>
   2da8c:	00bfffd4 	movui	r2,65535
   2da90:	282d883a 	mov	r22,r5
   2da94:	1180a836 	bltu	r2,r6,2dd38 <__udivdi3+0x2f0>
   2da98:	00803fc4 	movi	r2,255
   2da9c:	1181422e 	bgeu	r2,r6,2dfa8 <__udivdi3+0x560>
   2daa0:	00800204 	movi	r2,8
   2daa4:	1007883a 	mov	r3,r2
   2daa8:	3084d83a 	srl	r2,r6,r2
   2daac:	010000f4 	movhi	r4,3
   2dab0:	210e9c04 	addi	r4,r4,14960
   2dab4:	2085883a 	add	r2,r4,r2
   2dab8:	10800003 	ldbu	r2,0(r2)
   2dabc:	10c7883a 	add	r3,r2,r3
   2dac0:	00800804 	movi	r2,32
   2dac4:	10c5c83a 	sub	r2,r2,r3
   2dac8:	10000526 	beq	r2,zero,2dae0 <__udivdi3+0x98>
   2dacc:	80a0983a 	sll	r16,r16,r2
   2dad0:	98c6d83a 	srl	r3,r19,r3
   2dad4:	30a4983a 	sll	r18,r6,r2
   2dad8:	98a2983a 	sll	r17,r19,r2
   2dadc:	80ecb03a 	or	r22,r16,r3
   2dae0:	902ad43a 	srli	r21,r18,16
   2dae4:	b009883a 	mov	r4,r22
   2dae8:	953fffcc 	andi	r20,r18,65535
   2daec:	a80b883a 	mov	r5,r21
   2daf0:	002e6bc0 	call	2e6bc <__umodsi3>
   2daf4:	b009883a 	mov	r4,r22
   2daf8:	a80b883a 	mov	r5,r21
   2dafc:	1027883a 	mov	r19,r2
   2db00:	002e6b40 	call	2e6b4 <__udivsi3>
   2db04:	1021883a 	mov	r16,r2
   2db08:	8806d43a 	srli	r3,r17,16
   2db0c:	9804943a 	slli	r2,r19,16
   2db10:	8527383a 	mul	r19,r16,r20
   2db14:	10c4b03a 	or	r2,r2,r3
   2db18:	14c0052e 	bgeu	r2,r19,2db30 <__udivdi3+0xe8>
   2db1c:	1485883a 	add	r2,r2,r18
   2db20:	80ffffc4 	addi	r3,r16,-1
   2db24:	14800136 	bltu	r2,r18,2db2c <__udivdi3+0xe4>
   2db28:	14c13436 	bltu	r2,r19,2dffc <__udivdi3+0x5b4>
   2db2c:	1821883a 	mov	r16,r3
   2db30:	14e7c83a 	sub	r19,r2,r19
   2db34:	9809883a 	mov	r4,r19
   2db38:	a80b883a 	mov	r5,r21
   2db3c:	002e6bc0 	call	2e6bc <__umodsi3>
   2db40:	102d883a 	mov	r22,r2
   2db44:	9809883a 	mov	r4,r19
   2db48:	a80b883a 	mov	r5,r21
   2db4c:	002e6b40 	call	2e6b4 <__udivsi3>
   2db50:	b02c943a 	slli	r22,r22,16
   2db54:	1529383a 	mul	r20,r2,r20
   2db58:	8c7fffcc 	andi	r17,r17,65535
   2db5c:	b462b03a 	or	r17,r22,r17
   2db60:	8d00052e 	bgeu	r17,r20,2db78 <__udivdi3+0x130>
   2db64:	8ca3883a 	add	r17,r17,r18
   2db68:	10ffffc4 	addi	r3,r2,-1
   2db6c:	8c80f636 	bltu	r17,r18,2df48 <__udivdi3+0x500>
   2db70:	8d00f52e 	bgeu	r17,r20,2df48 <__udivdi3+0x500>
   2db74:	10bfff84 	addi	r2,r2,-2
   2db78:	8020943a 	slli	r16,r16,16
   2db7c:	0007883a 	mov	r3,zero
   2db80:	1404b03a 	or	r2,r2,r16
   2db84:	00005b06 	br	2dcf4 <__udivdi3+0x2ac>
   2db88:	29c05836 	bltu	r5,r7,2dcec <__udivdi3+0x2a4>
   2db8c:	00bfffd4 	movui	r2,65535
   2db90:	11c0642e 	bgeu	r2,r7,2dd24 <__udivdi3+0x2dc>
   2db94:	00804034 	movhi	r2,256
   2db98:	10bfffc4 	addi	r2,r2,-1
   2db9c:	11c0f32e 	bgeu	r2,r7,2df6c <__udivdi3+0x524>
   2dba0:	00c00604 	movi	r3,24
   2dba4:	180b883a 	mov	r5,r3
   2dba8:	38c6d83a 	srl	r3,r7,r3
   2dbac:	008000f4 	movhi	r2,3
   2dbb0:	108e9c04 	addi	r2,r2,14960
   2dbb4:	10c7883a 	add	r3,r2,r3
   2dbb8:	18c00003 	ldbu	r3,0(r3)
   2dbbc:	01000804 	movi	r4,32
   2dbc0:	1947883a 	add	r3,r3,r5
   2dbc4:	20e5c83a 	sub	r18,r4,r3
   2dbc8:	9000661e 	bne	r18,zero,2dd64 <__udivdi3+0x31c>
   2dbcc:	3c00f936 	bltu	r7,r16,2dfb4 <__udivdi3+0x56c>
   2dbd0:	9985403a 	cmpgeu	r2,r19,r6
   2dbd4:	0007883a 	mov	r3,zero
   2dbd8:	00004606 	br	2dcf4 <__udivdi3+0x2ac>
   2dbdc:	3000041e 	bne	r6,zero,2dbf0 <__udivdi3+0x1a8>
   2dbe0:	01000044 	movi	r4,1
   2dbe4:	000b883a 	mov	r5,zero
   2dbe8:	002e6b40 	call	2e6b4 <__udivsi3>
   2dbec:	1025883a 	mov	r18,r2
   2dbf0:	00bfffd4 	movui	r2,65535
   2dbf4:	1480562e 	bgeu	r2,r18,2dd50 <__udivdi3+0x308>
   2dbf8:	00804034 	movhi	r2,256
   2dbfc:	10bfffc4 	addi	r2,r2,-1
   2dc00:	1480e32e 	bgeu	r2,r18,2df90 <__udivdi3+0x548>
   2dc04:	00800604 	movi	r2,24
   2dc08:	1007883a 	mov	r3,r2
   2dc0c:	9084d83a 	srl	r2,r18,r2
   2dc10:	010000f4 	movhi	r4,3
   2dc14:	210e9c04 	addi	r4,r4,14960
   2dc18:	2085883a 	add	r2,r4,r2
   2dc1c:	10800003 	ldbu	r2,0(r2)
   2dc20:	10c5883a 	add	r2,r2,r3
   2dc24:	00c00804 	movi	r3,32
   2dc28:	1887c83a 	sub	r3,r3,r2
   2dc2c:	1800911e 	bne	r3,zero,2de74 <__udivdi3+0x42c>
   2dc30:	9028d43a 	srli	r20,r18,16
   2dc34:	84a1c83a 	sub	r16,r16,r18
   2dc38:	957fffcc 	andi	r21,r18,65535
   2dc3c:	00c00044 	movi	r3,1
   2dc40:	8009883a 	mov	r4,r16
   2dc44:	a00b883a 	mov	r5,r20
   2dc48:	d8c00015 	stw	r3,0(sp)
   2dc4c:	002e6bc0 	call	2e6bc <__umodsi3>
   2dc50:	8009883a 	mov	r4,r16
   2dc54:	a00b883a 	mov	r5,r20
   2dc58:	1027883a 	mov	r19,r2
   2dc5c:	002e6b40 	call	2e6b4 <__udivsi3>
   2dc60:	1021883a 	mov	r16,r2
   2dc64:	880cd43a 	srli	r6,r17,16
   2dc68:	9804943a 	slli	r2,r19,16
   2dc6c:	8567383a 	mul	r19,r16,r21
   2dc70:	d8c00017 	ldw	r3,0(sp)
   2dc74:	1188b03a 	or	r4,r2,r6
   2dc78:	24c0052e 	bgeu	r4,r19,2dc90 <__udivdi3+0x248>
   2dc7c:	2489883a 	add	r4,r4,r18
   2dc80:	80bfffc4 	addi	r2,r16,-1
   2dc84:	24800136 	bltu	r4,r18,2dc8c <__udivdi3+0x244>
   2dc88:	24c0d936 	bltu	r4,r19,2dff0 <__udivdi3+0x5a8>
   2dc8c:	1021883a 	mov	r16,r2
   2dc90:	24e7c83a 	sub	r19,r4,r19
   2dc94:	9809883a 	mov	r4,r19
   2dc98:	a00b883a 	mov	r5,r20
   2dc9c:	d8c00015 	stw	r3,0(sp)
   2dca0:	002e6bc0 	call	2e6bc <__umodsi3>
   2dca4:	102d883a 	mov	r22,r2
   2dca8:	9809883a 	mov	r4,r19
   2dcac:	a00b883a 	mov	r5,r20
   2dcb0:	002e6b40 	call	2e6b4 <__udivsi3>
   2dcb4:	b02c943a 	slli	r22,r22,16
   2dcb8:	156b383a 	mul	r21,r2,r21
   2dcbc:	8c7fffcc 	andi	r17,r17,65535
   2dcc0:	b462b03a 	or	r17,r22,r17
   2dcc4:	d8c00017 	ldw	r3,0(sp)
   2dcc8:	8d40052e 	bgeu	r17,r21,2dce0 <__udivdi3+0x298>
   2dccc:	8ca3883a 	add	r17,r17,r18
   2dcd0:	113fffc4 	addi	r4,r2,-1
   2dcd4:	8c809a36 	bltu	r17,r18,2df40 <__udivdi3+0x4f8>
   2dcd8:	8d40992e 	bgeu	r17,r21,2df40 <__udivdi3+0x4f8>
   2dcdc:	10bfff84 	addi	r2,r2,-2
   2dce0:	8020943a 	slli	r16,r16,16
   2dce4:	1404b03a 	or	r2,r2,r16
   2dce8:	00000206 	br	2dcf4 <__udivdi3+0x2ac>
   2dcec:	0007883a 	mov	r3,zero
   2dcf0:	0005883a 	mov	r2,zero
   2dcf4:	dfc00a17 	ldw	ra,40(sp)
   2dcf8:	df000917 	ldw	fp,36(sp)
   2dcfc:	ddc00817 	ldw	r23,32(sp)
   2dd00:	dd800717 	ldw	r22,28(sp)
   2dd04:	dd400617 	ldw	r21,24(sp)
   2dd08:	dd000517 	ldw	r20,20(sp)
   2dd0c:	dcc00417 	ldw	r19,16(sp)
   2dd10:	dc800317 	ldw	r18,12(sp)
   2dd14:	dc400217 	ldw	r17,8(sp)
   2dd18:	dc000117 	ldw	r16,4(sp)
   2dd1c:	dec00b04 	addi	sp,sp,44
   2dd20:	f800283a 	ret
   2dd24:	00803fc4 	movi	r2,255
   2dd28:	11c0932e 	bgeu	r2,r7,2df78 <__udivdi3+0x530>
   2dd2c:	00c00204 	movi	r3,8
   2dd30:	180b883a 	mov	r5,r3
   2dd34:	003f9c06 	br	2dba8 <__alt_data_end+0xfffedfd8>
   2dd38:	00804034 	movhi	r2,256
   2dd3c:	10bfffc4 	addi	r2,r2,-1
   2dd40:	1180902e 	bgeu	r2,r6,2df84 <__udivdi3+0x53c>
   2dd44:	00800604 	movi	r2,24
   2dd48:	1007883a 	mov	r3,r2
   2dd4c:	003f5606 	br	2daa8 <__alt_data_end+0xfffeded8>
   2dd50:	00803fc4 	movi	r2,255
   2dd54:	1480912e 	bgeu	r2,r18,2df9c <__udivdi3+0x554>
   2dd58:	00800204 	movi	r2,8
   2dd5c:	1007883a 	mov	r3,r2
   2dd60:	003faa06 	br	2dc0c <__alt_data_end+0xfffee03c>
   2dd64:	30eed83a 	srl	r23,r6,r3
   2dd68:	3c8e983a 	sll	r7,r7,r18
   2dd6c:	80f8d83a 	srl	fp,r16,r3
   2dd70:	98c6d83a 	srl	r3,r19,r3
   2dd74:	3deeb03a 	or	r23,r7,r23
   2dd78:	b828d43a 	srli	r20,r23,16
   2dd7c:	84a0983a 	sll	r16,r16,r18
   2dd80:	e009883a 	mov	r4,fp
   2dd84:	a00b883a 	mov	r5,r20
   2dd88:	80e2b03a 	or	r17,r16,r3
   2dd8c:	34aa983a 	sll	r21,r6,r18
   2dd90:	002e6bc0 	call	2e6bc <__umodsi3>
   2dd94:	e009883a 	mov	r4,fp
   2dd98:	a00b883a 	mov	r5,r20
   2dd9c:	102d883a 	mov	r22,r2
   2dda0:	002e6b40 	call	2e6b4 <__udivsi3>
   2dda4:	1021883a 	mov	r16,r2
   2dda8:	bf3fffcc 	andi	fp,r23,65535
   2ddac:	b004943a 	slli	r2,r22,16
   2ddb0:	8808d43a 	srli	r4,r17,16
   2ddb4:	872d383a 	mul	r22,r16,fp
   2ddb8:	1104b03a 	or	r2,r2,r4
   2ddbc:	1580042e 	bgeu	r2,r22,2ddd0 <__udivdi3+0x388>
   2ddc0:	15c5883a 	add	r2,r2,r23
   2ddc4:	80ffffc4 	addi	r3,r16,-1
   2ddc8:	15c0812e 	bgeu	r2,r23,2dfd0 <__udivdi3+0x588>
   2ddcc:	1821883a 	mov	r16,r3
   2ddd0:	15adc83a 	sub	r22,r2,r22
   2ddd4:	b009883a 	mov	r4,r22
   2ddd8:	a00b883a 	mov	r5,r20
   2dddc:	002e6bc0 	call	2e6bc <__umodsi3>
   2dde0:	a00b883a 	mov	r5,r20
   2dde4:	b009883a 	mov	r4,r22
   2dde8:	d8800015 	stw	r2,0(sp)
   2ddec:	002e6b40 	call	2e6b4 <__udivsi3>
   2ddf0:	d8c00017 	ldw	r3,0(sp)
   2ddf4:	170b383a 	mul	r5,r2,fp
   2ddf8:	8c7fffcc 	andi	r17,r17,65535
   2ddfc:	1806943a 	slli	r3,r3,16
   2de00:	1c46b03a 	or	r3,r3,r17
   2de04:	1940042e 	bgeu	r3,r5,2de18 <__udivdi3+0x3d0>
   2de08:	1dc7883a 	add	r3,r3,r23
   2de0c:	113fffc4 	addi	r4,r2,-1
   2de10:	1dc06b2e 	bgeu	r3,r23,2dfc0 <__udivdi3+0x578>
   2de14:	2005883a 	mov	r2,r4
   2de18:	8020943a 	slli	r16,r16,16
   2de1c:	a9ffffcc 	andi	r7,r21,65535
   2de20:	a82ad43a 	srli	r21,r21,16
   2de24:	1404b03a 	or	r2,r2,r16
   2de28:	113fffcc 	andi	r4,r2,65535
   2de2c:	100cd43a 	srli	r6,r2,16
   2de30:	21d3383a 	mul	r9,r4,r7
   2de34:	2549383a 	mul	r4,r4,r21
   2de38:	31cf383a 	mul	r7,r6,r7
   2de3c:	4810d43a 	srli	r8,r9,16
   2de40:	1947c83a 	sub	r3,r3,r5
   2de44:	3909883a 	add	r4,r7,r4
   2de48:	2209883a 	add	r4,r4,r8
   2de4c:	354d383a 	mul	r6,r6,r21
   2de50:	21c0022e 	bgeu	r4,r7,2de5c <__udivdi3+0x414>
   2de54:	01400074 	movhi	r5,1
   2de58:	314d883a 	add	r6,r6,r5
   2de5c:	202ad43a 	srli	r21,r4,16
   2de60:	354d883a 	add	r6,r6,r21
   2de64:	19803f36 	bltu	r3,r6,2df64 <__udivdi3+0x51c>
   2de68:	19803926 	beq	r3,r6,2df50 <__udivdi3+0x508>
   2de6c:	0007883a 	mov	r3,zero
   2de70:	003fa006 	br	2dcf4 <__alt_data_end+0xfffee124>
   2de74:	90e4983a 	sll	r18,r18,r3
   2de78:	80aad83a 	srl	r21,r16,r2
   2de7c:	80e0983a 	sll	r16,r16,r3
   2de80:	9028d43a 	srli	r20,r18,16
   2de84:	9884d83a 	srl	r2,r19,r2
   2de88:	a809883a 	mov	r4,r21
   2de8c:	a00b883a 	mov	r5,r20
   2de90:	80acb03a 	or	r22,r16,r2
   2de94:	98e2983a 	sll	r17,r19,r3
   2de98:	002e6bc0 	call	2e6bc <__umodsi3>
   2de9c:	a809883a 	mov	r4,r21
   2dea0:	a00b883a 	mov	r5,r20
   2dea4:	1021883a 	mov	r16,r2
   2dea8:	002e6b40 	call	2e6b4 <__udivsi3>
   2deac:	957fffcc 	andi	r21,r18,65535
   2deb0:	8020943a 	slli	r16,r16,16
   2deb4:	b00ad43a 	srli	r5,r22,16
   2deb8:	1567383a 	mul	r19,r2,r21
   2debc:	102f883a 	mov	r23,r2
   2dec0:	8148b03a 	or	r4,r16,r5
   2dec4:	24c0062e 	bgeu	r4,r19,2dee0 <__udivdi3+0x498>
   2dec8:	2489883a 	add	r4,r4,r18
   2decc:	10bfffc4 	addi	r2,r2,-1
   2ded0:	24804536 	bltu	r4,r18,2dfe8 <__udivdi3+0x5a0>
   2ded4:	24c0442e 	bgeu	r4,r19,2dfe8 <__udivdi3+0x5a0>
   2ded8:	bdffff84 	addi	r23,r23,-2
   2dedc:	2489883a 	add	r4,r4,r18
   2dee0:	24e7c83a 	sub	r19,r4,r19
   2dee4:	9809883a 	mov	r4,r19
   2dee8:	a00b883a 	mov	r5,r20
   2deec:	002e6bc0 	call	2e6bc <__umodsi3>
   2def0:	1021883a 	mov	r16,r2
   2def4:	9809883a 	mov	r4,r19
   2def8:	a00b883a 	mov	r5,r20
   2defc:	002e6b40 	call	2e6b4 <__udivsi3>
   2df00:	8020943a 	slli	r16,r16,16
   2df04:	1007883a 	mov	r3,r2
   2df08:	1545383a 	mul	r2,r2,r21
   2df0c:	b13fffcc 	andi	r4,r22,65535
   2df10:	8108b03a 	or	r4,r16,r4
   2df14:	2080062e 	bgeu	r4,r2,2df30 <__udivdi3+0x4e8>
   2df18:	2489883a 	add	r4,r4,r18
   2df1c:	197fffc4 	addi	r5,r3,-1
   2df20:	24802f36 	bltu	r4,r18,2dfe0 <__udivdi3+0x598>
   2df24:	20802e2e 	bgeu	r4,r2,2dfe0 <__udivdi3+0x598>
   2df28:	18ffff84 	addi	r3,r3,-2
   2df2c:	2489883a 	add	r4,r4,r18
   2df30:	b82e943a 	slli	r23,r23,16
   2df34:	20a1c83a 	sub	r16,r4,r2
   2df38:	1dc6b03a 	or	r3,r3,r23
   2df3c:	003f4006 	br	2dc40 <__alt_data_end+0xfffee070>
   2df40:	2005883a 	mov	r2,r4
   2df44:	003f6606 	br	2dce0 <__alt_data_end+0xfffee110>
   2df48:	1805883a 	mov	r2,r3
   2df4c:	003f0a06 	br	2db78 <__alt_data_end+0xfffedfa8>
   2df50:	2006943a 	slli	r3,r4,16
   2df54:	9c88983a 	sll	r4,r19,r18
   2df58:	4a7fffcc 	andi	r9,r9,65535
   2df5c:	1a47883a 	add	r3,r3,r9
   2df60:	20ffc22e 	bgeu	r4,r3,2de6c <__alt_data_end+0xfffee29c>
   2df64:	10bfffc4 	addi	r2,r2,-1
   2df68:	003fc006 	br	2de6c <__alt_data_end+0xfffee29c>
   2df6c:	00c00404 	movi	r3,16
   2df70:	180b883a 	mov	r5,r3
   2df74:	003f0c06 	br	2dba8 <__alt_data_end+0xfffedfd8>
   2df78:	0007883a 	mov	r3,zero
   2df7c:	000b883a 	mov	r5,zero
   2df80:	003f0906 	br	2dba8 <__alt_data_end+0xfffedfd8>
   2df84:	00800404 	movi	r2,16
   2df88:	1007883a 	mov	r3,r2
   2df8c:	003ec606 	br	2daa8 <__alt_data_end+0xfffeded8>
   2df90:	00800404 	movi	r2,16
   2df94:	1007883a 	mov	r3,r2
   2df98:	003f1c06 	br	2dc0c <__alt_data_end+0xfffee03c>
   2df9c:	0005883a 	mov	r2,zero
   2dfa0:	0007883a 	mov	r3,zero
   2dfa4:	003f1906 	br	2dc0c <__alt_data_end+0xfffee03c>
   2dfa8:	0005883a 	mov	r2,zero
   2dfac:	0007883a 	mov	r3,zero
   2dfb0:	003ebd06 	br	2daa8 <__alt_data_end+0xfffeded8>
   2dfb4:	0007883a 	mov	r3,zero
   2dfb8:	00800044 	movi	r2,1
   2dfbc:	003f4d06 	br	2dcf4 <__alt_data_end+0xfffee124>
   2dfc0:	197f942e 	bgeu	r3,r5,2de14 <__alt_data_end+0xfffee244>
   2dfc4:	10bfff84 	addi	r2,r2,-2
   2dfc8:	1dc7883a 	add	r3,r3,r23
   2dfcc:	003f9206 	br	2de18 <__alt_data_end+0xfffee248>
   2dfd0:	15bf7e2e 	bgeu	r2,r22,2ddcc <__alt_data_end+0xfffee1fc>
   2dfd4:	843fff84 	addi	r16,r16,-2
   2dfd8:	15c5883a 	add	r2,r2,r23
   2dfdc:	003f7c06 	br	2ddd0 <__alt_data_end+0xfffee200>
   2dfe0:	2807883a 	mov	r3,r5
   2dfe4:	003fd206 	br	2df30 <__alt_data_end+0xfffee360>
   2dfe8:	102f883a 	mov	r23,r2
   2dfec:	003fbc06 	br	2dee0 <__alt_data_end+0xfffee310>
   2dff0:	843fff84 	addi	r16,r16,-2
   2dff4:	2489883a 	add	r4,r4,r18
   2dff8:	003f2506 	br	2dc90 <__alt_data_end+0xfffee0c0>
   2dffc:	843fff84 	addi	r16,r16,-2
   2e000:	1485883a 	add	r2,r2,r18
   2e004:	003eca06 	br	2db30 <__alt_data_end+0xfffedf60>

0002e008 <__umoddi3>:
   2e008:	defff404 	addi	sp,sp,-48
   2e00c:	ddc00915 	stw	r23,36(sp)
   2e010:	dc400315 	stw	r17,12(sp)
   2e014:	dc000215 	stw	r16,8(sp)
   2e018:	dfc00b15 	stw	ra,44(sp)
   2e01c:	df000a15 	stw	fp,40(sp)
   2e020:	dd800815 	stw	r22,32(sp)
   2e024:	dd400715 	stw	r21,28(sp)
   2e028:	dd000615 	stw	r20,24(sp)
   2e02c:	dcc00515 	stw	r19,20(sp)
   2e030:	dc800415 	stw	r18,16(sp)
   2e034:	2021883a 	mov	r16,r4
   2e038:	2823883a 	mov	r17,r5
   2e03c:	282f883a 	mov	r23,r5
   2e040:	3800381e 	bne	r7,zero,2e124 <__umoddi3+0x11c>
   2e044:	3027883a 	mov	r19,r6
   2e048:	2029883a 	mov	r20,r4
   2e04c:	29804e2e 	bgeu	r5,r6,2e188 <__umoddi3+0x180>
   2e050:	00bfffd4 	movui	r2,65535
   2e054:	11809c36 	bltu	r2,r6,2e2c8 <__umoddi3+0x2c0>
   2e058:	00803fc4 	movi	r2,255
   2e05c:	11813b2e 	bgeu	r2,r6,2e54c <__umoddi3+0x544>
   2e060:	01400204 	movi	r5,8
   2e064:	2805883a 	mov	r2,r5
   2e068:	314ad83a 	srl	r5,r6,r5
   2e06c:	00c000f4 	movhi	r3,3
   2e070:	18ce9c04 	addi	r3,r3,14960
   2e074:	194b883a 	add	r5,r3,r5
   2e078:	29000003 	ldbu	r4,0(r5)
   2e07c:	2089883a 	add	r4,r4,r2
   2e080:	00800804 	movi	r2,32
   2e084:	1105c83a 	sub	r2,r2,r4
   2e088:	1000ec26 	beq	r2,zero,2e43c <__umoddi3+0x434>
   2e08c:	88a2983a 	sll	r17,r17,r2
   2e090:	8108d83a 	srl	r4,r16,r4
   2e094:	30a6983a 	sll	r19,r6,r2
   2e098:	80a8983a 	sll	r20,r16,r2
   2e09c:	1025883a 	mov	r18,r2
   2e0a0:	892eb03a 	or	r23,r17,r4
   2e0a4:	982cd43a 	srli	r22,r19,16
   2e0a8:	b809883a 	mov	r4,r23
   2e0ac:	9d7fffcc 	andi	r21,r19,65535
   2e0b0:	b00b883a 	mov	r5,r22
   2e0b4:	002e6bc0 	call	2e6bc <__umodsi3>
   2e0b8:	b809883a 	mov	r4,r23
   2e0bc:	b00b883a 	mov	r5,r22
   2e0c0:	1021883a 	mov	r16,r2
   2e0c4:	002e6b40 	call	2e6b4 <__udivsi3>
   2e0c8:	8020943a 	slli	r16,r16,16
   2e0cc:	a00cd43a 	srli	r6,r20,16
   2e0d0:	1545383a 	mul	r2,r2,r21
   2e0d4:	8188b03a 	or	r4,r16,r6
   2e0d8:	2080042e 	bgeu	r4,r2,2e0ec <__umoddi3+0xe4>
   2e0dc:	24c9883a 	add	r4,r4,r19
   2e0e0:	24c00236 	bltu	r4,r19,2e0ec <__umoddi3+0xe4>
   2e0e4:	2080012e 	bgeu	r4,r2,2e0ec <__umoddi3+0xe4>
   2e0e8:	24c9883a 	add	r4,r4,r19
   2e0ec:	20a3c83a 	sub	r17,r4,r2
   2e0f0:	8809883a 	mov	r4,r17
   2e0f4:	b00b883a 	mov	r5,r22
   2e0f8:	002e6bc0 	call	2e6bc <__umodsi3>
   2e0fc:	8809883a 	mov	r4,r17
   2e100:	b00b883a 	mov	r5,r22
   2e104:	1021883a 	mov	r16,r2
   2e108:	002e6b40 	call	2e6b4 <__udivsi3>
   2e10c:	8006943a 	slli	r3,r16,16
   2e110:	1545383a 	mul	r2,r2,r21
   2e114:	a13fffcc 	andi	r4,r20,65535
   2e118:	1906b03a 	or	r3,r3,r4
   2e11c:	1880532e 	bgeu	r3,r2,2e26c <__umoddi3+0x264>
   2e120:	00004e06 	br	2e25c <__umoddi3+0x254>
   2e124:	29c05536 	bltu	r5,r7,2e27c <__umoddi3+0x274>
   2e128:	00bfffd4 	movui	r2,65535
   2e12c:	11c0612e 	bgeu	r2,r7,2e2b4 <__umoddi3+0x2ac>
   2e130:	00804034 	movhi	r2,256
   2e134:	10bfffc4 	addi	r2,r2,-1
   2e138:	11c0f82e 	bgeu	r2,r7,2e51c <__umoddi3+0x514>
   2e13c:	01400604 	movi	r5,24
   2e140:	282b883a 	mov	r21,r5
   2e144:	394ad83a 	srl	r5,r7,r5
   2e148:	00c000f4 	movhi	r3,3
   2e14c:	18ce9c04 	addi	r3,r3,14960
   2e150:	194b883a 	add	r5,r3,r5
   2e154:	28800003 	ldbu	r2,0(r5)
   2e158:	00c00804 	movi	r3,32
   2e15c:	156b883a 	add	r21,r2,r21
   2e160:	1d69c83a 	sub	r20,r3,r21
   2e164:	a000631e 	bne	r20,zero,2e2f4 <__umoddi3+0x2ec>
   2e168:	3c400136 	bltu	r7,r17,2e170 <__umoddi3+0x168>
   2e16c:	81810436 	bltu	r16,r6,2e580 <__umoddi3+0x578>
   2e170:	8185c83a 	sub	r2,r16,r6
   2e174:	89e3c83a 	sub	r17,r17,r7
   2e178:	8087803a 	cmpltu	r3,r16,r2
   2e17c:	88efc83a 	sub	r23,r17,r3
   2e180:	b807883a 	mov	r3,r23
   2e184:	00003f06 	br	2e284 <__umoddi3+0x27c>
   2e188:	3000041e 	bne	r6,zero,2e19c <__umoddi3+0x194>
   2e18c:	01000044 	movi	r4,1
   2e190:	000b883a 	mov	r5,zero
   2e194:	002e6b40 	call	2e6b4 <__udivsi3>
   2e198:	1027883a 	mov	r19,r2
   2e19c:	00bfffd4 	movui	r2,65535
   2e1a0:	14c04f2e 	bgeu	r2,r19,2e2e0 <__umoddi3+0x2d8>
   2e1a4:	00804034 	movhi	r2,256
   2e1a8:	10bfffc4 	addi	r2,r2,-1
   2e1ac:	14c0e42e 	bgeu	r2,r19,2e540 <__umoddi3+0x538>
   2e1b0:	00800604 	movi	r2,24
   2e1b4:	1007883a 	mov	r3,r2
   2e1b8:	9884d83a 	srl	r2,r19,r2
   2e1bc:	010000f4 	movhi	r4,3
   2e1c0:	210e9c04 	addi	r4,r4,14960
   2e1c4:	2085883a 	add	r2,r4,r2
   2e1c8:	11000003 	ldbu	r4,0(r2)
   2e1cc:	00800804 	movi	r2,32
   2e1d0:	20c7883a 	add	r3,r4,r3
   2e1d4:	10c5c83a 	sub	r2,r2,r3
   2e1d8:	10009a1e 	bne	r2,zero,2e444 <__umoddi3+0x43c>
   2e1dc:	982cd43a 	srli	r22,r19,16
   2e1e0:	8ce3c83a 	sub	r17,r17,r19
   2e1e4:	9c3fffcc 	andi	r16,r19,65535
   2e1e8:	0025883a 	mov	r18,zero
   2e1ec:	8809883a 	mov	r4,r17
   2e1f0:	b00b883a 	mov	r5,r22
   2e1f4:	002e6bc0 	call	2e6bc <__umodsi3>
   2e1f8:	8809883a 	mov	r4,r17
   2e1fc:	b00b883a 	mov	r5,r22
   2e200:	102b883a 	mov	r21,r2
   2e204:	002e6b40 	call	2e6b4 <__udivsi3>
   2e208:	a806943a 	slli	r3,r21,16
   2e20c:	a008d43a 	srli	r4,r20,16
   2e210:	1405383a 	mul	r2,r2,r16
   2e214:	190cb03a 	or	r6,r3,r4
   2e218:	3080032e 	bgeu	r6,r2,2e228 <__umoddi3+0x220>
   2e21c:	34cd883a 	add	r6,r6,r19
   2e220:	34c00136 	bltu	r6,r19,2e228 <__umoddi3+0x220>
   2e224:	3080d436 	bltu	r6,r2,2e578 <__umoddi3+0x570>
   2e228:	30abc83a 	sub	r21,r6,r2
   2e22c:	a809883a 	mov	r4,r21
   2e230:	b00b883a 	mov	r5,r22
   2e234:	002e6bc0 	call	2e6bc <__umodsi3>
   2e238:	1023883a 	mov	r17,r2
   2e23c:	a809883a 	mov	r4,r21
   2e240:	b00b883a 	mov	r5,r22
   2e244:	002e6b40 	call	2e6b4 <__udivsi3>
   2e248:	8822943a 	slli	r17,r17,16
   2e24c:	1405383a 	mul	r2,r2,r16
   2e250:	a13fffcc 	andi	r4,r20,65535
   2e254:	8906b03a 	or	r3,r17,r4
   2e258:	1880042e 	bgeu	r3,r2,2e26c <__umoddi3+0x264>
   2e25c:	1cc7883a 	add	r3,r3,r19
   2e260:	1cc00236 	bltu	r3,r19,2e26c <__umoddi3+0x264>
   2e264:	1880012e 	bgeu	r3,r2,2e26c <__umoddi3+0x264>
   2e268:	1cc7883a 	add	r3,r3,r19
   2e26c:	1887c83a 	sub	r3,r3,r2
   2e270:	1c84d83a 	srl	r2,r3,r18
   2e274:	0007883a 	mov	r3,zero
   2e278:	00000206 	br	2e284 <__umoddi3+0x27c>
   2e27c:	2005883a 	mov	r2,r4
   2e280:	2807883a 	mov	r3,r5
   2e284:	dfc00b17 	ldw	ra,44(sp)
   2e288:	df000a17 	ldw	fp,40(sp)
   2e28c:	ddc00917 	ldw	r23,36(sp)
   2e290:	dd800817 	ldw	r22,32(sp)
   2e294:	dd400717 	ldw	r21,28(sp)
   2e298:	dd000617 	ldw	r20,24(sp)
   2e29c:	dcc00517 	ldw	r19,20(sp)
   2e2a0:	dc800417 	ldw	r18,16(sp)
   2e2a4:	dc400317 	ldw	r17,12(sp)
   2e2a8:	dc000217 	ldw	r16,8(sp)
   2e2ac:	dec00c04 	addi	sp,sp,48
   2e2b0:	f800283a 	ret
   2e2b4:	00803fc4 	movi	r2,255
   2e2b8:	11c0952e 	bgeu	r2,r7,2e510 <__umoddi3+0x508>
   2e2bc:	01400204 	movi	r5,8
   2e2c0:	282b883a 	mov	r21,r5
   2e2c4:	003f9f06 	br	2e144 <__alt_data_end+0xfffee574>
   2e2c8:	00804034 	movhi	r2,256
   2e2cc:	10bfffc4 	addi	r2,r2,-1
   2e2d0:	1180952e 	bgeu	r2,r6,2e528 <__umoddi3+0x520>
   2e2d4:	01400604 	movi	r5,24
   2e2d8:	2805883a 	mov	r2,r5
   2e2dc:	003f6206 	br	2e068 <__alt_data_end+0xfffee498>
   2e2e0:	00803fc4 	movi	r2,255
   2e2e4:	14c0932e 	bgeu	r2,r19,2e534 <__umoddi3+0x52c>
   2e2e8:	00800204 	movi	r2,8
   2e2ec:	1007883a 	mov	r3,r2
   2e2f0:	003fb106 	br	2e1b8 <__alt_data_end+0xfffee5e8>
   2e2f4:	3548d83a 	srl	r4,r6,r21
   2e2f8:	3d0e983a 	sll	r7,r7,r20
   2e2fc:	8d10983a 	sll	r8,r17,r20
   2e300:	8d6cd83a 	srl	r22,r17,r21
   2e304:	3922b03a 	or	r17,r7,r4
   2e308:	882ed43a 	srli	r23,r17,16
   2e30c:	8564d83a 	srl	r18,r16,r21
   2e310:	b009883a 	mov	r4,r22
   2e314:	b80b883a 	mov	r5,r23
   2e318:	44a4b03a 	or	r18,r8,r18
   2e31c:	3526983a 	sll	r19,r6,r20
   2e320:	002e6bc0 	call	2e6bc <__umodsi3>
   2e324:	b009883a 	mov	r4,r22
   2e328:	b80b883a 	mov	r5,r23
   2e32c:	1039883a 	mov	fp,r2
   2e330:	002e6b40 	call	2e6b4 <__udivsi3>
   2e334:	102d883a 	mov	r22,r2
   2e338:	8a3fffcc 	andi	r8,r17,65535
   2e33c:	e004943a 	slli	r2,fp,16
   2e340:	900cd43a 	srli	r6,r18,16
   2e344:	b239383a 	mul	fp,r22,r8
   2e348:	8520983a 	sll	r16,r16,r20
   2e34c:	118ab03a 	or	r5,r2,r6
   2e350:	2f00042e 	bgeu	r5,fp,2e364 <__umoddi3+0x35c>
   2e354:	2c4b883a 	add	r5,r5,r17
   2e358:	b0bfffc4 	addi	r2,r22,-1
   2e35c:	2c40822e 	bgeu	r5,r17,2e568 <__umoddi3+0x560>
   2e360:	102d883a 	mov	r22,r2
   2e364:	2f39c83a 	sub	fp,r5,fp
   2e368:	e009883a 	mov	r4,fp
   2e36c:	b80b883a 	mov	r5,r23
   2e370:	da000115 	stw	r8,4(sp)
   2e374:	002e6bc0 	call	2e6bc <__umodsi3>
   2e378:	e009883a 	mov	r4,fp
   2e37c:	b80b883a 	mov	r5,r23
   2e380:	d8800015 	stw	r2,0(sp)
   2e384:	002e6b40 	call	2e6b4 <__udivsi3>
   2e388:	d9800017 	ldw	r6,0(sp)
   2e38c:	da000117 	ldw	r8,4(sp)
   2e390:	94bfffcc 	andi	r18,r18,65535
   2e394:	300c943a 	slli	r6,r6,16
   2e398:	1209383a 	mul	r4,r2,r8
   2e39c:	3490b03a 	or	r8,r6,r18
   2e3a0:	4100042e 	bgeu	r8,r4,2e3b4 <__umoddi3+0x3ac>
   2e3a4:	4451883a 	add	r8,r8,r17
   2e3a8:	10ffffc4 	addi	r3,r2,-1
   2e3ac:	44406a2e 	bgeu	r8,r17,2e558 <__umoddi3+0x550>
   2e3b0:	1805883a 	mov	r2,r3
   2e3b4:	b012943a 	slli	r9,r22,16
   2e3b8:	9abfffcc 	andi	r10,r19,65535
   2e3bc:	980ed43a 	srli	r7,r19,16
   2e3c0:	124ab03a 	or	r5,r2,r9
   2e3c4:	2a7fffcc 	andi	r9,r5,65535
   2e3c8:	280ad43a 	srli	r5,r5,16
   2e3cc:	4a8d383a 	mul	r6,r9,r10
   2e3d0:	49d3383a 	mul	r9,r9,r7
   2e3d4:	2a95383a 	mul	r10,r5,r10
   2e3d8:	3004d43a 	srli	r2,r6,16
   2e3dc:	4111c83a 	sub	r8,r8,r4
   2e3e0:	5253883a 	add	r9,r10,r9
   2e3e4:	4893883a 	add	r9,r9,r2
   2e3e8:	29cb383a 	mul	r5,r5,r7
   2e3ec:	4a80022e 	bgeu	r9,r10,2e3f8 <__umoddi3+0x3f0>
   2e3f0:	00800074 	movhi	r2,1
   2e3f4:	288b883a 	add	r5,r5,r2
   2e3f8:	4808d43a 	srli	r4,r9,16
   2e3fc:	4812943a 	slli	r9,r9,16
   2e400:	31bfffcc 	andi	r6,r6,65535
   2e404:	290b883a 	add	r5,r5,r4
   2e408:	498d883a 	add	r6,r9,r6
   2e40c:	41403a36 	bltu	r8,r5,2e4f8 <__umoddi3+0x4f0>
   2e410:	41405d26 	beq	r8,r5,2e588 <__umoddi3+0x580>
   2e414:	4149c83a 	sub	r4,r8,r5
   2e418:	300f883a 	mov	r7,r6
   2e41c:	81cfc83a 	sub	r7,r16,r7
   2e420:	81c7803a 	cmpltu	r3,r16,r7
   2e424:	20c7c83a 	sub	r3,r4,r3
   2e428:	1d44983a 	sll	r2,r3,r21
   2e42c:	3d0ed83a 	srl	r7,r7,r20
   2e430:	1d06d83a 	srl	r3,r3,r20
   2e434:	11c4b03a 	or	r2,r2,r7
   2e438:	003f9206 	br	2e284 <__alt_data_end+0xfffee6b4>
   2e43c:	0025883a 	mov	r18,zero
   2e440:	003f1806 	br	2e0a4 <__alt_data_end+0xfffee4d4>
   2e444:	98a6983a 	sll	r19,r19,r2
   2e448:	88e8d83a 	srl	r20,r17,r3
   2e44c:	80c6d83a 	srl	r3,r16,r3
   2e450:	982cd43a 	srli	r22,r19,16
   2e454:	88a2983a 	sll	r17,r17,r2
   2e458:	a009883a 	mov	r4,r20
   2e45c:	b00b883a 	mov	r5,r22
   2e460:	88eab03a 	or	r21,r17,r3
   2e464:	1025883a 	mov	r18,r2
   2e468:	002e6bc0 	call	2e6bc <__umodsi3>
   2e46c:	a009883a 	mov	r4,r20
   2e470:	b00b883a 	mov	r5,r22
   2e474:	1023883a 	mov	r17,r2
   2e478:	002e6b40 	call	2e6b4 <__udivsi3>
   2e47c:	9f3fffcc 	andi	fp,r19,65535
   2e480:	8822943a 	slli	r17,r17,16
   2e484:	a80ad43a 	srli	r5,r21,16
   2e488:	1705383a 	mul	r2,r2,fp
   2e48c:	84a8983a 	sll	r20,r16,r18
   2e490:	8948b03a 	or	r4,r17,r5
   2e494:	2080042e 	bgeu	r4,r2,2e4a8 <__umoddi3+0x4a0>
   2e498:	24c9883a 	add	r4,r4,r19
   2e49c:	24c00236 	bltu	r4,r19,2e4a8 <__umoddi3+0x4a0>
   2e4a0:	2080012e 	bgeu	r4,r2,2e4a8 <__umoddi3+0x4a0>
   2e4a4:	24c9883a 	add	r4,r4,r19
   2e4a8:	20afc83a 	sub	r23,r4,r2
   2e4ac:	b809883a 	mov	r4,r23
   2e4b0:	b00b883a 	mov	r5,r22
   2e4b4:	002e6bc0 	call	2e6bc <__umodsi3>
   2e4b8:	1023883a 	mov	r17,r2
   2e4bc:	b809883a 	mov	r4,r23
   2e4c0:	b00b883a 	mov	r5,r22
   2e4c4:	002e6b40 	call	2e6b4 <__udivsi3>
   2e4c8:	8822943a 	slli	r17,r17,16
   2e4cc:	1705383a 	mul	r2,r2,fp
   2e4d0:	a93fffcc 	andi	r4,r21,65535
   2e4d4:	8908b03a 	or	r4,r17,r4
   2e4d8:	2080042e 	bgeu	r4,r2,2e4ec <__umoddi3+0x4e4>
   2e4dc:	24c9883a 	add	r4,r4,r19
   2e4e0:	24c00236 	bltu	r4,r19,2e4ec <__umoddi3+0x4e4>
   2e4e4:	2080012e 	bgeu	r4,r2,2e4ec <__umoddi3+0x4e4>
   2e4e8:	24c9883a 	add	r4,r4,r19
   2e4ec:	20a3c83a 	sub	r17,r4,r2
   2e4f0:	e021883a 	mov	r16,fp
   2e4f4:	003f3d06 	br	2e1ec <__alt_data_end+0xfffee61c>
   2e4f8:	34cfc83a 	sub	r7,r6,r19
   2e4fc:	2c4bc83a 	sub	r5,r5,r17
   2e500:	31cd803a 	cmpltu	r6,r6,r7
   2e504:	298dc83a 	sub	r6,r5,r6
   2e508:	4189c83a 	sub	r4,r8,r6
   2e50c:	003fc306 	br	2e41c <__alt_data_end+0xfffee84c>
   2e510:	000b883a 	mov	r5,zero
   2e514:	002b883a 	mov	r21,zero
   2e518:	003f0a06 	br	2e144 <__alt_data_end+0xfffee574>
   2e51c:	01400404 	movi	r5,16
   2e520:	282b883a 	mov	r21,r5
   2e524:	003f0706 	br	2e144 <__alt_data_end+0xfffee574>
   2e528:	01400404 	movi	r5,16
   2e52c:	2805883a 	mov	r2,r5
   2e530:	003ecd06 	br	2e068 <__alt_data_end+0xfffee498>
   2e534:	0005883a 	mov	r2,zero
   2e538:	0007883a 	mov	r3,zero
   2e53c:	003f1e06 	br	2e1b8 <__alt_data_end+0xfffee5e8>
   2e540:	00800404 	movi	r2,16
   2e544:	1007883a 	mov	r3,r2
   2e548:	003f1b06 	br	2e1b8 <__alt_data_end+0xfffee5e8>
   2e54c:	000b883a 	mov	r5,zero
   2e550:	0005883a 	mov	r2,zero
   2e554:	003ec406 	br	2e068 <__alt_data_end+0xfffee498>
   2e558:	413f952e 	bgeu	r8,r4,2e3b0 <__alt_data_end+0xfffee7e0>
   2e55c:	10bfff84 	addi	r2,r2,-2
   2e560:	4451883a 	add	r8,r8,r17
   2e564:	003f9306 	br	2e3b4 <__alt_data_end+0xfffee7e4>
   2e568:	2f3f7d2e 	bgeu	r5,fp,2e360 <__alt_data_end+0xfffee790>
   2e56c:	b5bfff84 	addi	r22,r22,-2
   2e570:	2c4b883a 	add	r5,r5,r17
   2e574:	003f7b06 	br	2e364 <__alt_data_end+0xfffee794>
   2e578:	34cd883a 	add	r6,r6,r19
   2e57c:	003f2a06 	br	2e228 <__alt_data_end+0xfffee658>
   2e580:	8005883a 	mov	r2,r16
   2e584:	003efe06 	br	2e180 <__alt_data_end+0xfffee5b0>
   2e588:	81bfdb36 	bltu	r16,r6,2e4f8 <__alt_data_end+0xfffee928>
   2e58c:	300f883a 	mov	r7,r6
   2e590:	0009883a 	mov	r4,zero
   2e594:	003fa106 	br	2e41c <__alt_data_end+0xfffee84c>

0002e598 <udivmodsi4>:
   2e598:	2900182e 	bgeu	r5,r4,2e5fc <udivmodsi4+0x64>
   2e59c:	28001716 	blt	r5,zero,2e5fc <udivmodsi4+0x64>
   2e5a0:	00800804 	movi	r2,32
   2e5a4:	00c00044 	movi	r3,1
   2e5a8:	00000206 	br	2e5b4 <udivmodsi4+0x1c>
   2e5ac:	10001126 	beq	r2,zero,2e5f4 <udivmodsi4+0x5c>
   2e5b0:	28000516 	blt	r5,zero,2e5c8 <udivmodsi4+0x30>
   2e5b4:	294b883a 	add	r5,r5,r5
   2e5b8:	10bfffc4 	addi	r2,r2,-1
   2e5bc:	18c7883a 	add	r3,r3,r3
   2e5c0:	293ffa36 	bltu	r5,r4,2e5ac <__alt_data_end+0xfffee9dc>
   2e5c4:	18000b26 	beq	r3,zero,2e5f4 <udivmodsi4+0x5c>
   2e5c8:	0005883a 	mov	r2,zero
   2e5cc:	21400236 	bltu	r4,r5,2e5d8 <udivmodsi4+0x40>
   2e5d0:	2149c83a 	sub	r4,r4,r5
   2e5d4:	10c4b03a 	or	r2,r2,r3
   2e5d8:	1806d07a 	srli	r3,r3,1
   2e5dc:	280ad07a 	srli	r5,r5,1
   2e5e0:	183ffa1e 	bne	r3,zero,2e5cc <__alt_data_end+0xfffee9fc>
   2e5e4:	3000011e 	bne	r6,zero,2e5ec <udivmodsi4+0x54>
   2e5e8:	f800283a 	ret
   2e5ec:	2005883a 	mov	r2,r4
   2e5f0:	f800283a 	ret
   2e5f4:	0005883a 	mov	r2,zero
   2e5f8:	003ffa06 	br	2e5e4 <__alt_data_end+0xfffeea14>
   2e5fc:	00c00044 	movi	r3,1
   2e600:	003ff106 	br	2e5c8 <__alt_data_end+0xfffee9f8>

0002e604 <__divsi3>:
   2e604:	defffe04 	addi	sp,sp,-8
   2e608:	dfc00115 	stw	ra,4(sp)
   2e60c:	dc000015 	stw	r16,0(sp)
   2e610:	20000b16 	blt	r4,zero,2e640 <__divsi3+0x3c>
   2e614:	0021883a 	mov	r16,zero
   2e618:	28000c16 	blt	r5,zero,2e64c <__divsi3+0x48>
   2e61c:	000d883a 	mov	r6,zero
   2e620:	002e5980 	call	2e598 <udivmodsi4>
   2e624:	0407c83a 	sub	r3,zero,r16
   2e628:	1884f03a 	xor	r2,r3,r2
   2e62c:	1405883a 	add	r2,r2,r16
   2e630:	dfc00117 	ldw	ra,4(sp)
   2e634:	dc000017 	ldw	r16,0(sp)
   2e638:	dec00204 	addi	sp,sp,8
   2e63c:	f800283a 	ret
   2e640:	0109c83a 	sub	r4,zero,r4
   2e644:	04000044 	movi	r16,1
   2e648:	283ff40e 	bge	r5,zero,2e61c <__alt_data_end+0xfffeea4c>
   2e64c:	014bc83a 	sub	r5,zero,r5
   2e650:	8400005c 	xori	r16,r16,1
   2e654:	003ff106 	br	2e61c <__alt_data_end+0xfffeea4c>

0002e658 <__modsi3>:
   2e658:	defffd04 	addi	sp,sp,-12
   2e65c:	dfc00215 	stw	ra,8(sp)
   2e660:	dc400115 	stw	r17,4(sp)
   2e664:	dc000015 	stw	r16,0(sp)
   2e668:	20000c16 	blt	r4,zero,2e69c <__modsi3+0x44>
   2e66c:	0023883a 	mov	r17,zero
   2e670:	0021883a 	mov	r16,zero
   2e674:	28000d16 	blt	r5,zero,2e6ac <__modsi3+0x54>
   2e678:	01800044 	movi	r6,1
   2e67c:	002e5980 	call	2e598 <udivmodsi4>
   2e680:	1404f03a 	xor	r2,r2,r16
   2e684:	8885883a 	add	r2,r17,r2
   2e688:	dfc00217 	ldw	ra,8(sp)
   2e68c:	dc400117 	ldw	r17,4(sp)
   2e690:	dc000017 	ldw	r16,0(sp)
   2e694:	dec00304 	addi	sp,sp,12
   2e698:	f800283a 	ret
   2e69c:	0109c83a 	sub	r4,zero,r4
   2e6a0:	04400044 	movi	r17,1
   2e6a4:	043fffc4 	movi	r16,-1
   2e6a8:	283ff30e 	bge	r5,zero,2e678 <__alt_data_end+0xfffeeaa8>
   2e6ac:	014bc83a 	sub	r5,zero,r5
   2e6b0:	003ff106 	br	2e678 <__alt_data_end+0xfffeeaa8>

0002e6b4 <__udivsi3>:
   2e6b4:	000d883a 	mov	r6,zero
   2e6b8:	002e5981 	jmpi	2e598 <udivmodsi4>

0002e6bc <__umodsi3>:
   2e6bc:	01800044 	movi	r6,1
   2e6c0:	002e5981 	jmpi	2e598 <udivmodsi4>

0002e6c4 <__adddf3>:
   2e6c4:	02000434 	movhi	r8,16
   2e6c8:	423fffc4 	addi	r8,r8,-1
   2e6cc:	defffb04 	addi	sp,sp,-20
   2e6d0:	2a12703a 	and	r9,r5,r8
   2e6d4:	2806d7fa 	srli	r3,r5,31
   2e6d8:	3a10703a 	and	r8,r7,r8
   2e6dc:	3804d53a 	srli	r2,r7,20
   2e6e0:	3014d77a 	srli	r10,r6,29
   2e6e4:	dc000015 	stw	r16,0(sp)
   2e6e8:	481290fa 	slli	r9,r9,3
   2e6ec:	2820d53a 	srli	r16,r5,20
   2e6f0:	401090fa 	slli	r8,r8,3
   2e6f4:	200ad77a 	srli	r5,r4,29
   2e6f8:	380ed7fa 	srli	r7,r7,31
   2e6fc:	dc800215 	stw	r18,8(sp)
   2e700:	dc400115 	stw	r17,4(sp)
   2e704:	dfc00415 	stw	ra,16(sp)
   2e708:	dcc00315 	stw	r19,12(sp)
   2e70c:	1c803fcc 	andi	r18,r3,255
   2e710:	8401ffcc 	andi	r16,r16,2047
   2e714:	494ab03a 	or	r5,r9,r5
   2e718:	202290fa 	slli	r17,r4,3
   2e71c:	1081ffcc 	andi	r2,r2,2047
   2e720:	4290b03a 	or	r8,r8,r10
   2e724:	300c90fa 	slli	r6,r6,3
   2e728:	91c07026 	beq	r18,r7,2e8ec <__adddf3+0x228>
   2e72c:	8087c83a 	sub	r3,r16,r2
   2e730:	00c0b30e 	bge	zero,r3,2ea00 <__adddf3+0x33c>
   2e734:	10002a1e 	bne	r2,zero,2e7e0 <__adddf3+0x11c>
   2e738:	4184b03a 	or	r2,r8,r6
   2e73c:	1000991e 	bne	r2,zero,2e9a4 <__adddf3+0x2e0>
   2e740:	888001cc 	andi	r2,r17,7
   2e744:	10005b26 	beq	r2,zero,2e8b4 <__adddf3+0x1f0>
   2e748:	88c003cc 	andi	r3,r17,15
   2e74c:	00800104 	movi	r2,4
   2e750:	18805826 	beq	r3,r2,2e8b4 <__adddf3+0x1f0>
   2e754:	89800104 	addi	r6,r17,4
   2e758:	3463803a 	cmpltu	r17,r6,r17
   2e75c:	2c4b883a 	add	r5,r5,r17
   2e760:	2880202c 	andhi	r2,r5,128
   2e764:	9007883a 	mov	r3,r18
   2e768:	3023883a 	mov	r17,r6
   2e76c:	10005426 	beq	r2,zero,2e8c0 <__adddf3+0x1fc>
   2e770:	84000044 	addi	r16,r16,1
   2e774:	0081ffc4 	movi	r2,2047
   2e778:	8080c126 	beq	r16,r2,2ea80 <__adddf3+0x3bc>
   2e77c:	013fe034 	movhi	r4,65408
   2e780:	213fffc4 	addi	r4,r4,-1
   2e784:	290a703a 	and	r5,r5,r4
   2e788:	2804977a 	slli	r2,r5,29
   2e78c:	280a927a 	slli	r5,r5,9
   2e790:	8822d0fa 	srli	r17,r17,3
   2e794:	8401ffcc 	andi	r16,r16,2047
   2e798:	2808d33a 	srli	r4,r5,12
   2e79c:	1444b03a 	or	r2,r2,r17
   2e7a0:	8401ffcc 	andi	r16,r16,2047
   2e7a4:	800a953a 	slli	r5,r16,20
   2e7a8:	18c03fcc 	andi	r3,r3,255
   2e7ac:	04000434 	movhi	r16,16
   2e7b0:	180697fa 	slli	r3,r3,31
   2e7b4:	843fffc4 	addi	r16,r16,-1
   2e7b8:	2420703a 	and	r16,r4,r16
   2e7bc:	8160b03a 	or	r16,r16,r5
   2e7c0:	80c6b03a 	or	r3,r16,r3
   2e7c4:	dfc00417 	ldw	ra,16(sp)
   2e7c8:	dcc00317 	ldw	r19,12(sp)
   2e7cc:	dc800217 	ldw	r18,8(sp)
   2e7d0:	dc400117 	ldw	r17,4(sp)
   2e7d4:	dc000017 	ldw	r16,0(sp)
   2e7d8:	dec00504 	addi	sp,sp,20
   2e7dc:	f800283a 	ret
   2e7e0:	0081ffc4 	movi	r2,2047
   2e7e4:	80bfd626 	beq	r16,r2,2e740 <__alt_data_end+0xfffeeb70>
   2e7e8:	42002034 	orhi	r8,r8,128
   2e7ec:	00800e04 	movi	r2,56
   2e7f0:	10c0a616 	blt	r2,r3,2ea8c <__adddf3+0x3c8>
   2e7f4:	008007c4 	movi	r2,31
   2e7f8:	10c0c916 	blt	r2,r3,2eb20 <__adddf3+0x45c>
   2e7fc:	00800804 	movi	r2,32
   2e800:	10c5c83a 	sub	r2,r2,r3
   2e804:	408e983a 	sll	r7,r8,r2
   2e808:	30c8d83a 	srl	r4,r6,r3
   2e80c:	3084983a 	sll	r2,r6,r2
   2e810:	40c6d83a 	srl	r3,r8,r3
   2e814:	390cb03a 	or	r6,r7,r4
   2e818:	1004c03a 	cmpne	r2,r2,zero
   2e81c:	308cb03a 	or	r6,r6,r2
   2e820:	898dc83a 	sub	r6,r17,r6
   2e824:	89a3803a 	cmpltu	r17,r17,r6
   2e828:	28cbc83a 	sub	r5,r5,r3
   2e82c:	2c4bc83a 	sub	r5,r5,r17
   2e830:	3023883a 	mov	r17,r6
   2e834:	2880202c 	andhi	r2,r5,128
   2e838:	10006d26 	beq	r2,zero,2e9f0 <__adddf3+0x32c>
   2e83c:	04c02034 	movhi	r19,128
   2e840:	9cffffc4 	addi	r19,r19,-1
   2e844:	2ce6703a 	and	r19,r5,r19
   2e848:	98007e26 	beq	r19,zero,2ea44 <__adddf3+0x380>
   2e84c:	9809883a 	mov	r4,r19
   2e850:	0030c600 	call	30c60 <__clzsi2>
   2e854:	10fffe04 	addi	r3,r2,-8
   2e858:	010007c4 	movi	r4,31
   2e85c:	20c07f16 	blt	r4,r3,2ea5c <__adddf3+0x398>
   2e860:	01400a04 	movi	r5,40
   2e864:	2885c83a 	sub	r2,r5,r2
   2e868:	888ad83a 	srl	r5,r17,r2
   2e86c:	98e6983a 	sll	r19,r19,r3
   2e870:	88e2983a 	sll	r17,r17,r3
   2e874:	2ce6b03a 	or	r19,r5,r19
   2e878:	1c007c16 	blt	r3,r16,2ea6c <__adddf3+0x3a8>
   2e87c:	1c21c83a 	sub	r16,r3,r16
   2e880:	81400044 	addi	r5,r16,1
   2e884:	00c007c4 	movi	r3,31
   2e888:	19409816 	blt	r3,r5,2eaec <__adddf3+0x428>
   2e88c:	1c21c83a 	sub	r16,r3,r16
   2e890:	8c08983a 	sll	r4,r17,r16
   2e894:	8946d83a 	srl	r3,r17,r5
   2e898:	9c20983a 	sll	r16,r19,r16
   2e89c:	2008c03a 	cmpne	r4,r4,zero
   2e8a0:	994ad83a 	srl	r5,r19,r5
   2e8a4:	1c06b03a 	or	r3,r3,r16
   2e8a8:	1922b03a 	or	r17,r3,r4
   2e8ac:	0021883a 	mov	r16,zero
   2e8b0:	003fa306 	br	2e740 <__alt_data_end+0xfffeeb70>
   2e8b4:	2880202c 	andhi	r2,r5,128
   2e8b8:	9007883a 	mov	r3,r18
   2e8bc:	103fac1e 	bne	r2,zero,2e770 <__alt_data_end+0xfffeeba0>
   2e8c0:	2804977a 	slli	r2,r5,29
   2e8c4:	8822d0fa 	srli	r17,r17,3
   2e8c8:	0101ffc4 	movi	r4,2047
   2e8cc:	280ad0fa 	srli	r5,r5,3
   2e8d0:	1444b03a 	or	r2,r2,r17
   2e8d4:	81002c26 	beq	r16,r4,2e988 <__adddf3+0x2c4>
   2e8d8:	8120703a 	and	r16,r16,r4
   2e8dc:	01000434 	movhi	r4,16
   2e8e0:	213fffc4 	addi	r4,r4,-1
   2e8e4:	2908703a 	and	r4,r5,r4
   2e8e8:	003fad06 	br	2e7a0 <__alt_data_end+0xfffeebd0>
   2e8ec:	8089c83a 	sub	r4,r16,r2
   2e8f0:	01006a0e 	bge	zero,r4,2ea9c <__adddf3+0x3d8>
   2e8f4:	10003326 	beq	r2,zero,2e9c4 <__adddf3+0x300>
   2e8f8:	0081ffc4 	movi	r2,2047
   2e8fc:	80bf9026 	beq	r16,r2,2e740 <__alt_data_end+0xfffeeb70>
   2e900:	42002034 	orhi	r8,r8,128
   2e904:	00800e04 	movi	r2,56
   2e908:	1100b116 	blt	r2,r4,2ebd0 <__adddf3+0x50c>
   2e90c:	008007c4 	movi	r2,31
   2e910:	1100e216 	blt	r2,r4,2ec9c <__adddf3+0x5d8>
   2e914:	00800804 	movi	r2,32
   2e918:	1105c83a 	sub	r2,r2,r4
   2e91c:	4092983a 	sll	r9,r8,r2
   2e920:	310ed83a 	srl	r7,r6,r4
   2e924:	3084983a 	sll	r2,r6,r2
   2e928:	4110d83a 	srl	r8,r8,r4
   2e92c:	49ccb03a 	or	r6,r9,r7
   2e930:	1004c03a 	cmpne	r2,r2,zero
   2e934:	308cb03a 	or	r6,r6,r2
   2e938:	344d883a 	add	r6,r6,r17
   2e93c:	3463803a 	cmpltu	r17,r6,r17
   2e940:	414b883a 	add	r5,r8,r5
   2e944:	2c4b883a 	add	r5,r5,r17
   2e948:	3023883a 	mov	r17,r6
   2e94c:	2880202c 	andhi	r2,r5,128
   2e950:	10002726 	beq	r2,zero,2e9f0 <__adddf3+0x32c>
   2e954:	84000044 	addi	r16,r16,1
   2e958:	0081ffc4 	movi	r2,2047
   2e95c:	8080ae26 	beq	r16,r2,2ec18 <__adddf3+0x554>
   2e960:	00bfe034 	movhi	r2,65408
   2e964:	10bfffc4 	addi	r2,r2,-1
   2e968:	288a703a 	and	r5,r5,r2
   2e96c:	880cd07a 	srli	r6,r17,1
   2e970:	280897fa 	slli	r4,r5,31
   2e974:	88c0004c 	andi	r3,r17,1
   2e978:	30e2b03a 	or	r17,r6,r3
   2e97c:	280ad07a 	srli	r5,r5,1
   2e980:	8922b03a 	or	r17,r17,r4
   2e984:	003f6e06 	br	2e740 <__alt_data_end+0xfffeeb70>
   2e988:	1148b03a 	or	r4,r2,r5
   2e98c:	20003c26 	beq	r4,zero,2ea80 <__adddf3+0x3bc>
   2e990:	29000234 	orhi	r4,r5,8
   2e994:	01400434 	movhi	r5,16
   2e998:	297fffc4 	addi	r5,r5,-1
   2e99c:	2148703a 	and	r4,r4,r5
   2e9a0:	003f7f06 	br	2e7a0 <__alt_data_end+0xfffeebd0>
   2e9a4:	18ffffc4 	addi	r3,r3,-1
   2e9a8:	18004d1e 	bne	r3,zero,2eae0 <__adddf3+0x41c>
   2e9ac:	898dc83a 	sub	r6,r17,r6
   2e9b0:	89a3803a 	cmpltu	r17,r17,r6
   2e9b4:	2a0bc83a 	sub	r5,r5,r8
   2e9b8:	2c4bc83a 	sub	r5,r5,r17
   2e9bc:	3023883a 	mov	r17,r6
   2e9c0:	003f9c06 	br	2e834 <__alt_data_end+0xfffeec64>
   2e9c4:	4184b03a 	or	r2,r8,r6
   2e9c8:	103f5d26 	beq	r2,zero,2e740 <__alt_data_end+0xfffeeb70>
   2e9cc:	213fffc4 	addi	r4,r4,-1
   2e9d0:	203fd926 	beq	r4,zero,2e938 <__alt_data_end+0xfffeed68>
   2e9d4:	0081ffc4 	movi	r2,2047
   2e9d8:	80bfca1e 	bne	r16,r2,2e904 <__alt_data_end+0xfffeed34>
   2e9dc:	003f5806 	br	2e740 <__alt_data_end+0xfffeeb70>
   2e9e0:	10c8b03a 	or	r4,r2,r3
   2e9e4:	20008b26 	beq	r4,zero,2ec14 <__adddf3+0x550>
   2e9e8:	100b883a 	mov	r5,r2
   2e9ec:	1823883a 	mov	r17,r3
   2e9f0:	888001cc 	andi	r2,r17,7
   2e9f4:	103f541e 	bne	r2,zero,2e748 <__alt_data_end+0xfffeeb78>
   2e9f8:	9007883a 	mov	r3,r18
   2e9fc:	003fb006 	br	2e8c0 <__alt_data_end+0xfffeecf0>
   2ea00:	1800531e 	bne	r3,zero,2eb50 <__adddf3+0x48c>
   2ea04:	80800044 	addi	r2,r16,1
   2ea08:	1081ffcc 	andi	r2,r2,2047
   2ea0c:	00c00044 	movi	r3,1
   2ea10:	1880990e 	bge	r3,r2,2ec78 <__adddf3+0x5b4>
   2ea14:	8985c83a 	sub	r2,r17,r6
   2ea18:	8887803a 	cmpltu	r3,r17,r2
   2ea1c:	2a27c83a 	sub	r19,r5,r8
   2ea20:	98e7c83a 	sub	r19,r19,r3
   2ea24:	98c0202c 	andhi	r3,r19,128
   2ea28:	18006226 	beq	r3,zero,2ebb4 <__adddf3+0x4f0>
   2ea2c:	3463c83a 	sub	r17,r6,r17
   2ea30:	4151c83a 	sub	r8,r8,r5
   2ea34:	344d803a 	cmpltu	r6,r6,r17
   2ea38:	41a7c83a 	sub	r19,r8,r6
   2ea3c:	3825883a 	mov	r18,r7
   2ea40:	983f821e 	bne	r19,zero,2e84c <__alt_data_end+0xfffeec7c>
   2ea44:	8809883a 	mov	r4,r17
   2ea48:	0030c600 	call	30c60 <__clzsi2>
   2ea4c:	10800804 	addi	r2,r2,32
   2ea50:	10fffe04 	addi	r3,r2,-8
   2ea54:	010007c4 	movi	r4,31
   2ea58:	20ff810e 	bge	r4,r3,2e860 <__alt_data_end+0xfffeec90>
   2ea5c:	14fff604 	addi	r19,r2,-40
   2ea60:	8ce6983a 	sll	r19,r17,r19
   2ea64:	0023883a 	mov	r17,zero
   2ea68:	1c3f840e 	bge	r3,r16,2e87c <__alt_data_end+0xfffeecac>
   2ea6c:	017fe034 	movhi	r5,65408
   2ea70:	297fffc4 	addi	r5,r5,-1
   2ea74:	80e1c83a 	sub	r16,r16,r3
   2ea78:	994a703a 	and	r5,r19,r5
   2ea7c:	003f3006 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ea80:	0009883a 	mov	r4,zero
   2ea84:	0005883a 	mov	r2,zero
   2ea88:	003f4506 	br	2e7a0 <__alt_data_end+0xfffeebd0>
   2ea8c:	418cb03a 	or	r6,r8,r6
   2ea90:	300cc03a 	cmpne	r6,r6,zero
   2ea94:	0007883a 	mov	r3,zero
   2ea98:	003f6106 	br	2e820 <__alt_data_end+0xfffeec50>
   2ea9c:	2000921e 	bne	r4,zero,2ece8 <__adddf3+0x624>
   2eaa0:	80800044 	addi	r2,r16,1
   2eaa4:	11c1ffcc 	andi	r7,r2,2047
   2eaa8:	01000044 	movi	r4,1
   2eaac:	21c0610e 	bge	r4,r7,2ec34 <__adddf3+0x570>
   2eab0:	0101ffc4 	movi	r4,2047
   2eab4:	1100a326 	beq	r2,r4,2ed44 <__adddf3+0x680>
   2eab8:	344d883a 	add	r6,r6,r17
   2eabc:	3463803a 	cmpltu	r17,r6,r17
   2eac0:	414b883a 	add	r5,r8,r5
   2eac4:	2c4b883a 	add	r5,r5,r17
   2eac8:	282297fa 	slli	r17,r5,31
   2eacc:	300cd07a 	srli	r6,r6,1
   2ead0:	280ad07a 	srli	r5,r5,1
   2ead4:	1021883a 	mov	r16,r2
   2ead8:	89a2b03a 	or	r17,r17,r6
   2eadc:	003f1806 	br	2e740 <__alt_data_end+0xfffeeb70>
   2eae0:	0081ffc4 	movi	r2,2047
   2eae4:	80bf411e 	bne	r16,r2,2e7ec <__alt_data_end+0xfffeec1c>
   2eae8:	003f1506 	br	2e740 <__alt_data_end+0xfffeeb70>
   2eaec:	80bff844 	addi	r2,r16,-31
   2eaf0:	00c00804 	movi	r3,32
   2eaf4:	9884d83a 	srl	r2,r19,r2
   2eaf8:	28c04a26 	beq	r5,r3,2ec24 <__adddf3+0x560>
   2eafc:	00c00fc4 	movi	r3,63
   2eb00:	1c21c83a 	sub	r16,r3,r16
   2eb04:	9c26983a 	sll	r19,r19,r16
   2eb08:	9c62b03a 	or	r17,r19,r17
   2eb0c:	8822c03a 	cmpne	r17,r17,zero
   2eb10:	88a2b03a 	or	r17,r17,r2
   2eb14:	000b883a 	mov	r5,zero
   2eb18:	0021883a 	mov	r16,zero
   2eb1c:	003fb406 	br	2e9f0 <__alt_data_end+0xfffeee20>
   2eb20:	18bff804 	addi	r2,r3,-32
   2eb24:	01000804 	movi	r4,32
   2eb28:	4084d83a 	srl	r2,r8,r2
   2eb2c:	19003f26 	beq	r3,r4,2ec2c <__adddf3+0x568>
   2eb30:	01001004 	movi	r4,64
   2eb34:	20c7c83a 	sub	r3,r4,r3
   2eb38:	40d0983a 	sll	r8,r8,r3
   2eb3c:	418cb03a 	or	r6,r8,r6
   2eb40:	300cc03a 	cmpne	r6,r6,zero
   2eb44:	308cb03a 	or	r6,r6,r2
   2eb48:	0007883a 	mov	r3,zero
   2eb4c:	003f3406 	br	2e820 <__alt_data_end+0xfffeec50>
   2eb50:	80002326 	beq	r16,zero,2ebe0 <__adddf3+0x51c>
   2eb54:	0101ffc4 	movi	r4,2047
   2eb58:	11005e26 	beq	r2,r4,2ecd4 <__adddf3+0x610>
   2eb5c:	00c7c83a 	sub	r3,zero,r3
   2eb60:	29402034 	orhi	r5,r5,128
   2eb64:	01000e04 	movi	r4,56
   2eb68:	20c07216 	blt	r4,r3,2ed34 <__adddf3+0x670>
   2eb6c:	010007c4 	movi	r4,31
   2eb70:	20c0ce16 	blt	r4,r3,2eeac <__adddf3+0x7e8>
   2eb74:	01000804 	movi	r4,32
   2eb78:	20c9c83a 	sub	r4,r4,r3
   2eb7c:	2914983a 	sll	r10,r5,r4
   2eb80:	88d2d83a 	srl	r9,r17,r3
   2eb84:	8908983a 	sll	r4,r17,r4
   2eb88:	28c6d83a 	srl	r3,r5,r3
   2eb8c:	5262b03a 	or	r17,r10,r9
   2eb90:	2008c03a 	cmpne	r4,r4,zero
   2eb94:	8922b03a 	or	r17,r17,r4
   2eb98:	3463c83a 	sub	r17,r6,r17
   2eb9c:	40c7c83a 	sub	r3,r8,r3
   2eba0:	344d803a 	cmpltu	r6,r6,r17
   2eba4:	198bc83a 	sub	r5,r3,r6
   2eba8:	1021883a 	mov	r16,r2
   2ebac:	3825883a 	mov	r18,r7
   2ebb0:	003f2006 	br	2e834 <__alt_data_end+0xfffeec64>
   2ebb4:	9886b03a 	or	r3,r19,r2
   2ebb8:	1800141e 	bne	r3,zero,2ec0c <__adddf3+0x548>
   2ebbc:	0007883a 	mov	r3,zero
   2ebc0:	000b883a 	mov	r5,zero
   2ebc4:	0023883a 	mov	r17,zero
   2ebc8:	0021883a 	mov	r16,zero
   2ebcc:	003f3c06 	br	2e8c0 <__alt_data_end+0xfffeecf0>
   2ebd0:	418cb03a 	or	r6,r8,r6
   2ebd4:	300cc03a 	cmpne	r6,r6,zero
   2ebd8:	0011883a 	mov	r8,zero
   2ebdc:	003f5606 	br	2e938 <__alt_data_end+0xfffeed68>
   2ebe0:	2c48b03a 	or	r4,r5,r17
   2ebe4:	20003b26 	beq	r4,zero,2ecd4 <__adddf3+0x610>
   2ebe8:	00c6303a 	nor	r3,zero,r3
   2ebec:	1800371e 	bne	r3,zero,2eccc <__adddf3+0x608>
   2ebf0:	3463c83a 	sub	r17,r6,r17
   2ebf4:	414bc83a 	sub	r5,r8,r5
   2ebf8:	344d803a 	cmpltu	r6,r6,r17
   2ebfc:	298bc83a 	sub	r5,r5,r6
   2ec00:	1021883a 	mov	r16,r2
   2ec04:	3825883a 	mov	r18,r7
   2ec08:	003f0a06 	br	2e834 <__alt_data_end+0xfffeec64>
   2ec0c:	1023883a 	mov	r17,r2
   2ec10:	003f0d06 	br	2e848 <__alt_data_end+0xfffeec78>
   2ec14:	0007883a 	mov	r3,zero
   2ec18:	000b883a 	mov	r5,zero
   2ec1c:	0023883a 	mov	r17,zero
   2ec20:	003f2706 	br	2e8c0 <__alt_data_end+0xfffeecf0>
   2ec24:	0027883a 	mov	r19,zero
   2ec28:	003fb706 	br	2eb08 <__alt_data_end+0xfffeef38>
   2ec2c:	0011883a 	mov	r8,zero
   2ec30:	003fc206 	br	2eb3c <__alt_data_end+0xfffeef6c>
   2ec34:	2c44b03a 	or	r2,r5,r17
   2ec38:	8000871e 	bne	r16,zero,2ee58 <__adddf3+0x794>
   2ec3c:	1000b126 	beq	r2,zero,2ef04 <__adddf3+0x840>
   2ec40:	4184b03a 	or	r2,r8,r6
   2ec44:	103ebe26 	beq	r2,zero,2e740 <__alt_data_end+0xfffeeb70>
   2ec48:	3445883a 	add	r2,r6,r17
   2ec4c:	1463803a 	cmpltu	r17,r2,r17
   2ec50:	414b883a 	add	r5,r8,r5
   2ec54:	2c4b883a 	add	r5,r5,r17
   2ec58:	28c0202c 	andhi	r3,r5,128
   2ec5c:	1023883a 	mov	r17,r2
   2ec60:	183f6326 	beq	r3,zero,2e9f0 <__alt_data_end+0xfffeee20>
   2ec64:	00bfe034 	movhi	r2,65408
   2ec68:	10bfffc4 	addi	r2,r2,-1
   2ec6c:	2021883a 	mov	r16,r4
   2ec70:	288a703a 	and	r5,r5,r2
   2ec74:	003eb206 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ec78:	2c44b03a 	or	r2,r5,r17
   2ec7c:	8000251e 	bne	r16,zero,2ed14 <__adddf3+0x650>
   2ec80:	10004b1e 	bne	r2,zero,2edb0 <__adddf3+0x6ec>
   2ec84:	4184b03a 	or	r2,r8,r6
   2ec88:	103fe226 	beq	r2,zero,2ec14 <__alt_data_end+0xfffef044>
   2ec8c:	400b883a 	mov	r5,r8
   2ec90:	3023883a 	mov	r17,r6
   2ec94:	3825883a 	mov	r18,r7
   2ec98:	003ea906 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ec9c:	20bff804 	addi	r2,r4,-32
   2eca0:	01c00804 	movi	r7,32
   2eca4:	4084d83a 	srl	r2,r8,r2
   2eca8:	21c07e26 	beq	r4,r7,2eea4 <__adddf3+0x7e0>
   2ecac:	01c01004 	movi	r7,64
   2ecb0:	3909c83a 	sub	r4,r7,r4
   2ecb4:	4110983a 	sll	r8,r8,r4
   2ecb8:	418cb03a 	or	r6,r8,r6
   2ecbc:	300cc03a 	cmpne	r6,r6,zero
   2ecc0:	308cb03a 	or	r6,r6,r2
   2ecc4:	0011883a 	mov	r8,zero
   2ecc8:	003f1b06 	br	2e938 <__alt_data_end+0xfffeed68>
   2eccc:	0101ffc4 	movi	r4,2047
   2ecd0:	113fa41e 	bne	r2,r4,2eb64 <__alt_data_end+0xfffeef94>
   2ecd4:	400b883a 	mov	r5,r8
   2ecd8:	3023883a 	mov	r17,r6
   2ecdc:	1021883a 	mov	r16,r2
   2ece0:	3825883a 	mov	r18,r7
   2ece4:	003e9606 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ece8:	80001a1e 	bne	r16,zero,2ed54 <__adddf3+0x690>
   2ecec:	2c4eb03a 	or	r7,r5,r17
   2ecf0:	38005526 	beq	r7,zero,2ee48 <__adddf3+0x784>
   2ecf4:	0108303a 	nor	r4,zero,r4
   2ecf8:	2000511e 	bne	r4,zero,2ee40 <__adddf3+0x77c>
   2ecfc:	89a3883a 	add	r17,r17,r6
   2ed00:	414b883a 	add	r5,r8,r5
   2ed04:	898d803a 	cmpltu	r6,r17,r6
   2ed08:	298b883a 	add	r5,r5,r6
   2ed0c:	1021883a 	mov	r16,r2
   2ed10:	003f0e06 	br	2e94c <__alt_data_end+0xfffeed7c>
   2ed14:	1000341e 	bne	r2,zero,2ede8 <__adddf3+0x724>
   2ed18:	4184b03a 	or	r2,r8,r6
   2ed1c:	10006f26 	beq	r2,zero,2eedc <__adddf3+0x818>
   2ed20:	400b883a 	mov	r5,r8
   2ed24:	3023883a 	mov	r17,r6
   2ed28:	3825883a 	mov	r18,r7
   2ed2c:	0401ffc4 	movi	r16,2047
   2ed30:	003e8306 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ed34:	2c62b03a 	or	r17,r5,r17
   2ed38:	8822c03a 	cmpne	r17,r17,zero
   2ed3c:	0007883a 	mov	r3,zero
   2ed40:	003f9506 	br	2eb98 <__alt_data_end+0xfffeefc8>
   2ed44:	1021883a 	mov	r16,r2
   2ed48:	000b883a 	mov	r5,zero
   2ed4c:	0023883a 	mov	r17,zero
   2ed50:	003edb06 	br	2e8c0 <__alt_data_end+0xfffeecf0>
   2ed54:	01c1ffc4 	movi	r7,2047
   2ed58:	11c03b26 	beq	r2,r7,2ee48 <__adddf3+0x784>
   2ed5c:	0109c83a 	sub	r4,zero,r4
   2ed60:	29402034 	orhi	r5,r5,128
   2ed64:	01c00e04 	movi	r7,56
   2ed68:	39006216 	blt	r7,r4,2eef4 <__adddf3+0x830>
   2ed6c:	01c007c4 	movi	r7,31
   2ed70:	39006b16 	blt	r7,r4,2ef20 <__adddf3+0x85c>
   2ed74:	01c00804 	movi	r7,32
   2ed78:	390fc83a 	sub	r7,r7,r4
   2ed7c:	29d4983a 	sll	r10,r5,r7
   2ed80:	8912d83a 	srl	r9,r17,r4
   2ed84:	89ce983a 	sll	r7,r17,r7
   2ed88:	2908d83a 	srl	r4,r5,r4
   2ed8c:	5262b03a 	or	r17,r10,r9
   2ed90:	380ac03a 	cmpne	r5,r7,zero
   2ed94:	8962b03a 	or	r17,r17,r5
   2ed98:	89a3883a 	add	r17,r17,r6
   2ed9c:	2211883a 	add	r8,r4,r8
   2eda0:	898d803a 	cmpltu	r6,r17,r6
   2eda4:	418b883a 	add	r5,r8,r6
   2eda8:	1021883a 	mov	r16,r2
   2edac:	003ee706 	br	2e94c <__alt_data_end+0xfffeed7c>
   2edb0:	4184b03a 	or	r2,r8,r6
   2edb4:	103e6226 	beq	r2,zero,2e740 <__alt_data_end+0xfffeeb70>
   2edb8:	8987c83a 	sub	r3,r17,r6
   2edbc:	88c9803a 	cmpltu	r4,r17,r3
   2edc0:	2a05c83a 	sub	r2,r5,r8
   2edc4:	1105c83a 	sub	r2,r2,r4
   2edc8:	1100202c 	andhi	r4,r2,128
   2edcc:	203f0426 	beq	r4,zero,2e9e0 <__alt_data_end+0xfffeee10>
   2edd0:	3463c83a 	sub	r17,r6,r17
   2edd4:	414bc83a 	sub	r5,r8,r5
   2edd8:	344d803a 	cmpltu	r6,r6,r17
   2eddc:	298bc83a 	sub	r5,r5,r6
   2ede0:	3825883a 	mov	r18,r7
   2ede4:	003e5606 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ede8:	4184b03a 	or	r2,r8,r6
   2edec:	10002b26 	beq	r2,zero,2ee9c <__adddf3+0x7d8>
   2edf0:	2804d0fa 	srli	r2,r5,3
   2edf4:	8822d0fa 	srli	r17,r17,3
   2edf8:	280a977a 	slli	r5,r5,29
   2edfc:	10c0022c 	andhi	r3,r2,8
   2ee00:	2c62b03a 	or	r17,r5,r17
   2ee04:	18000826 	beq	r3,zero,2ee28 <__adddf3+0x764>
   2ee08:	4008d0fa 	srli	r4,r8,3
   2ee0c:	20c0022c 	andhi	r3,r4,8
   2ee10:	1800051e 	bne	r3,zero,2ee28 <__adddf3+0x764>
   2ee14:	300cd0fa 	srli	r6,r6,3
   2ee18:	4010977a 	slli	r8,r8,29
   2ee1c:	2005883a 	mov	r2,r4
   2ee20:	3825883a 	mov	r18,r7
   2ee24:	41a2b03a 	or	r17,r8,r6
   2ee28:	880ad77a 	srli	r5,r17,29
   2ee2c:	100490fa 	slli	r2,r2,3
   2ee30:	882290fa 	slli	r17,r17,3
   2ee34:	0401ffc4 	movi	r16,2047
   2ee38:	288ab03a 	or	r5,r5,r2
   2ee3c:	003e4006 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ee40:	01c1ffc4 	movi	r7,2047
   2ee44:	11ffc71e 	bne	r2,r7,2ed64 <__alt_data_end+0xfffef194>
   2ee48:	400b883a 	mov	r5,r8
   2ee4c:	3023883a 	mov	r17,r6
   2ee50:	1021883a 	mov	r16,r2
   2ee54:	003e3a06 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ee58:	10002d26 	beq	r2,zero,2ef10 <__adddf3+0x84c>
   2ee5c:	4184b03a 	or	r2,r8,r6
   2ee60:	10000e26 	beq	r2,zero,2ee9c <__adddf3+0x7d8>
   2ee64:	2804d0fa 	srli	r2,r5,3
   2ee68:	8822d0fa 	srli	r17,r17,3
   2ee6c:	280a977a 	slli	r5,r5,29
   2ee70:	10c0022c 	andhi	r3,r2,8
   2ee74:	2c62b03a 	or	r17,r5,r17
   2ee78:	183feb26 	beq	r3,zero,2ee28 <__alt_data_end+0xfffef258>
   2ee7c:	4008d0fa 	srli	r4,r8,3
   2ee80:	20c0022c 	andhi	r3,r4,8
   2ee84:	183fe81e 	bne	r3,zero,2ee28 <__alt_data_end+0xfffef258>
   2ee88:	300cd0fa 	srli	r6,r6,3
   2ee8c:	4010977a 	slli	r8,r8,29
   2ee90:	2005883a 	mov	r2,r4
   2ee94:	41a2b03a 	or	r17,r8,r6
   2ee98:	003fe306 	br	2ee28 <__alt_data_end+0xfffef258>
   2ee9c:	0401ffc4 	movi	r16,2047
   2eea0:	003e2706 	br	2e740 <__alt_data_end+0xfffeeb70>
   2eea4:	0011883a 	mov	r8,zero
   2eea8:	003f8306 	br	2ecb8 <__alt_data_end+0xfffef0e8>
   2eeac:	193ff804 	addi	r4,r3,-32
   2eeb0:	02400804 	movi	r9,32
   2eeb4:	2908d83a 	srl	r4,r5,r4
   2eeb8:	1a402526 	beq	r3,r9,2ef50 <__adddf3+0x88c>
   2eebc:	02401004 	movi	r9,64
   2eec0:	48c7c83a 	sub	r3,r9,r3
   2eec4:	28ca983a 	sll	r5,r5,r3
   2eec8:	2c62b03a 	or	r17,r5,r17
   2eecc:	8822c03a 	cmpne	r17,r17,zero
   2eed0:	8922b03a 	or	r17,r17,r4
   2eed4:	0007883a 	mov	r3,zero
   2eed8:	003f2f06 	br	2eb98 <__alt_data_end+0xfffeefc8>
   2eedc:	01402034 	movhi	r5,128
   2eee0:	0007883a 	mov	r3,zero
   2eee4:	297fffc4 	addi	r5,r5,-1
   2eee8:	047ffe04 	movi	r17,-8
   2eeec:	0401ffc4 	movi	r16,2047
   2eef0:	003e7306 	br	2e8c0 <__alt_data_end+0xfffeecf0>
   2eef4:	2c62b03a 	or	r17,r5,r17
   2eef8:	8822c03a 	cmpne	r17,r17,zero
   2eefc:	0009883a 	mov	r4,zero
   2ef00:	003fa506 	br	2ed98 <__alt_data_end+0xfffef1c8>
   2ef04:	400b883a 	mov	r5,r8
   2ef08:	3023883a 	mov	r17,r6
   2ef0c:	003e0c06 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ef10:	400b883a 	mov	r5,r8
   2ef14:	3023883a 	mov	r17,r6
   2ef18:	0401ffc4 	movi	r16,2047
   2ef1c:	003e0806 	br	2e740 <__alt_data_end+0xfffeeb70>
   2ef20:	21fff804 	addi	r7,r4,-32
   2ef24:	02400804 	movi	r9,32
   2ef28:	29ced83a 	srl	r7,r5,r7
   2ef2c:	22400a26 	beq	r4,r9,2ef58 <__adddf3+0x894>
   2ef30:	02401004 	movi	r9,64
   2ef34:	4909c83a 	sub	r4,r9,r4
   2ef38:	290a983a 	sll	r5,r5,r4
   2ef3c:	2c62b03a 	or	r17,r5,r17
   2ef40:	8822c03a 	cmpne	r17,r17,zero
   2ef44:	89e2b03a 	or	r17,r17,r7
   2ef48:	0009883a 	mov	r4,zero
   2ef4c:	003f9206 	br	2ed98 <__alt_data_end+0xfffef1c8>
   2ef50:	000b883a 	mov	r5,zero
   2ef54:	003fdc06 	br	2eec8 <__alt_data_end+0xfffef2f8>
   2ef58:	000b883a 	mov	r5,zero
   2ef5c:	003ff706 	br	2ef3c <__alt_data_end+0xfffef36c>

0002ef60 <__divdf3>:
   2ef60:	defff204 	addi	sp,sp,-56
   2ef64:	dd000815 	stw	r20,32(sp)
   2ef68:	2828d53a 	srli	r20,r5,20
   2ef6c:	dd800a15 	stw	r22,40(sp)
   2ef70:	282cd7fa 	srli	r22,r5,31
   2ef74:	dc000415 	stw	r16,16(sp)
   2ef78:	04000434 	movhi	r16,16
   2ef7c:	df000c15 	stw	fp,48(sp)
   2ef80:	dcc00715 	stw	r19,28(sp)
   2ef84:	dc800615 	stw	r18,24(sp)
   2ef88:	dc400515 	stw	r17,20(sp)
   2ef8c:	843fffc4 	addi	r16,r16,-1
   2ef90:	dfc00d15 	stw	ra,52(sp)
   2ef94:	ddc00b15 	stw	r23,44(sp)
   2ef98:	dd400915 	stw	r21,36(sp)
   2ef9c:	a501ffcc 	andi	r20,r20,2047
   2efa0:	2025883a 	mov	r18,r4
   2efa4:	2027883a 	mov	r19,r4
   2efa8:	2c22703a 	and	r17,r5,r16
   2efac:	b7003fcc 	andi	fp,r22,255
   2efb0:	a0005e26 	beq	r20,zero,2f12c <__divdf3+0x1cc>
   2efb4:	0081ffc4 	movi	r2,2047
   2efb8:	a0803526 	beq	r20,r2,2f090 <__divdf3+0x130>
   2efbc:	8c000434 	orhi	r16,r17,16
   2efc0:	2004d77a 	srli	r2,r4,29
   2efc4:	802090fa 	slli	r16,r16,3
   2efc8:	202690fa 	slli	r19,r4,3
   2efcc:	a53f0044 	addi	r20,r20,-1023
   2efd0:	80a2b03a 	or	r17,r16,r2
   2efd4:	0025883a 	mov	r18,zero
   2efd8:	0011883a 	mov	r8,zero
   2efdc:	380ad53a 	srli	r5,r7,20
   2efe0:	382ed7fa 	srli	r23,r7,31
   2efe4:	04000434 	movhi	r16,16
   2efe8:	843fffc4 	addi	r16,r16,-1
   2efec:	2941ffcc 	andi	r5,r5,2047
   2eff0:	302b883a 	mov	r21,r6
   2eff4:	3c20703a 	and	r16,r7,r16
   2eff8:	ba403fcc 	andi	r9,r23,255
   2effc:	28006726 	beq	r5,zero,2f19c <__divdf3+0x23c>
   2f000:	0081ffc4 	movi	r2,2047
   2f004:	28805f26 	beq	r5,r2,2f184 <__divdf3+0x224>
   2f008:	84000434 	orhi	r16,r16,16
   2f00c:	3004d77a 	srli	r2,r6,29
   2f010:	802090fa 	slli	r16,r16,3
   2f014:	302a90fa 	slli	r21,r6,3
   2f018:	297f0044 	addi	r5,r5,-1023
   2f01c:	80a0b03a 	or	r16,r16,r2
   2f020:	000f883a 	mov	r7,zero
   2f024:	3c86b03a 	or	r3,r7,r18
   2f028:	180690ba 	slli	r3,r3,2
   2f02c:	008000f4 	movhi	r2,3
   2f030:	10bc1404 	addi	r2,r2,-4016
   2f034:	1887883a 	add	r3,r3,r2
   2f038:	18c00017 	ldw	r3,0(r3)
   2f03c:	b5c8f03a 	xor	r4,r22,r23
   2f040:	200d883a 	mov	r6,r4
   2f044:	24803fcc 	andi	r18,r4,255
   2f048:	a169c83a 	sub	r20,r20,r5
   2f04c:	1800683a 	jmp	r3
   2f050:	0002f298 	cmpnei	zero,zero,3018
   2f054:	0002f0c8 	cmpgei	zero,zero,3011
   2f058:	0002f25c 	xori	zero,zero,3017
   2f05c:	0002f0ac 	andhi	zero,zero,3010
   2f060:	0002f25c 	xori	zero,zero,3017
   2f064:	0002f230 	cmpltui	zero,zero,3016
   2f068:	0002f25c 	xori	zero,zero,3017
   2f06c:	0002f0ac 	andhi	zero,zero,3010
   2f070:	0002f0c8 	cmpgei	zero,zero,3011
   2f074:	0002f0c8 	cmpgei	zero,zero,3011
   2f078:	0002f230 	cmpltui	zero,zero,3016
   2f07c:	0002f0ac 	andhi	zero,zero,3010
   2f080:	0002f0bc 	xorhi	zero,zero,3010
   2f084:	0002f0bc 	xorhi	zero,zero,3010
   2f088:	0002f0bc 	xorhi	zero,zero,3010
   2f08c:	0002f26c 	andhi	zero,zero,3017
   2f090:	8904b03a 	or	r2,r17,r4
   2f094:	1000631e 	bne	r2,zero,2f224 <__divdf3+0x2c4>
   2f098:	04800204 	movi	r18,8
   2f09c:	0023883a 	mov	r17,zero
   2f0a0:	0027883a 	mov	r19,zero
   2f0a4:	02000084 	movi	r8,2
   2f0a8:	003fcc06 	br	2efdc <__alt_data_end+0xfffef40c>
   2f0ac:	8023883a 	mov	r17,r16
   2f0b0:	a827883a 	mov	r19,r21
   2f0b4:	4839883a 	mov	fp,r9
   2f0b8:	3811883a 	mov	r8,r7
   2f0bc:	00800084 	movi	r2,2
   2f0c0:	40812a1e 	bne	r8,r2,2f56c <__divdf3+0x60c>
   2f0c4:	e025883a 	mov	r18,fp
   2f0c8:	9180004c 	andi	r6,r18,1
   2f0cc:	0101ffc4 	movi	r4,2047
   2f0d0:	000b883a 	mov	r5,zero
   2f0d4:	0027883a 	mov	r19,zero
   2f0d8:	2008953a 	slli	r4,r4,20
   2f0dc:	30c03fcc 	andi	r3,r6,255
   2f0e0:	04000434 	movhi	r16,16
   2f0e4:	180697fa 	slli	r3,r3,31
   2f0e8:	843fffc4 	addi	r16,r16,-1
   2f0ec:	2c20703a 	and	r16,r5,r16
   2f0f0:	8120b03a 	or	r16,r16,r4
   2f0f4:	80c6b03a 	or	r3,r16,r3
   2f0f8:	9805883a 	mov	r2,r19
   2f0fc:	dfc00d17 	ldw	ra,52(sp)
   2f100:	df000c17 	ldw	fp,48(sp)
   2f104:	ddc00b17 	ldw	r23,44(sp)
   2f108:	dd800a17 	ldw	r22,40(sp)
   2f10c:	dd400917 	ldw	r21,36(sp)
   2f110:	dd000817 	ldw	r20,32(sp)
   2f114:	dcc00717 	ldw	r19,28(sp)
   2f118:	dc800617 	ldw	r18,24(sp)
   2f11c:	dc400517 	ldw	r17,20(sp)
   2f120:	dc000417 	ldw	r16,16(sp)
   2f124:	dec00e04 	addi	sp,sp,56
   2f128:	f800283a 	ret
   2f12c:	8904b03a 	or	r2,r17,r4
   2f130:	10003726 	beq	r2,zero,2f210 <__divdf3+0x2b0>
   2f134:	88011c26 	beq	r17,zero,2f5a8 <__divdf3+0x648>
   2f138:	8809883a 	mov	r4,r17
   2f13c:	d9800315 	stw	r6,12(sp)
   2f140:	d9c00115 	stw	r7,4(sp)
   2f144:	0030c600 	call	30c60 <__clzsi2>
   2f148:	d9800317 	ldw	r6,12(sp)
   2f14c:	d9c00117 	ldw	r7,4(sp)
   2f150:	1007883a 	mov	r3,r2
   2f154:	01000a04 	movi	r4,40
   2f158:	1cfffe04 	addi	r19,r3,-8
   2f15c:	20c9c83a 	sub	r4,r4,r3
   2f160:	8cca983a 	sll	r5,r17,r19
   2f164:	9108d83a 	srl	r4,r18,r4
   2f168:	94e6983a 	sll	r19,r18,r19
   2f16c:	2162b03a 	or	r17,r4,r5
   2f170:	053f0344 	movi	r20,-1011
   2f174:	a0e9c83a 	sub	r20,r20,r3
   2f178:	0025883a 	mov	r18,zero
   2f17c:	0011883a 	mov	r8,zero
   2f180:	003f9606 	br	2efdc <__alt_data_end+0xfffef40c>
   2f184:	8184b03a 	or	r2,r16,r6
   2f188:	10001f1e 	bne	r2,zero,2f208 <__divdf3+0x2a8>
   2f18c:	0021883a 	mov	r16,zero
   2f190:	002b883a 	mov	r21,zero
   2f194:	01c00084 	movi	r7,2
   2f198:	003fa206 	br	2f024 <__alt_data_end+0xfffef454>
   2f19c:	8184b03a 	or	r2,r16,r6
   2f1a0:	10001526 	beq	r2,zero,2f1f8 <__divdf3+0x298>
   2f1a4:	80010c26 	beq	r16,zero,2f5d8 <__divdf3+0x678>
   2f1a8:	8009883a 	mov	r4,r16
   2f1ac:	d9800315 	stw	r6,12(sp)
   2f1b0:	da000215 	stw	r8,8(sp)
   2f1b4:	da400015 	stw	r9,0(sp)
   2f1b8:	0030c600 	call	30c60 <__clzsi2>
   2f1bc:	d9800317 	ldw	r6,12(sp)
   2f1c0:	da000217 	ldw	r8,8(sp)
   2f1c4:	da400017 	ldw	r9,0(sp)
   2f1c8:	1007883a 	mov	r3,r2
   2f1cc:	01000a04 	movi	r4,40
   2f1d0:	1d7ffe04 	addi	r21,r3,-8
   2f1d4:	20c9c83a 	sub	r4,r4,r3
   2f1d8:	8560983a 	sll	r16,r16,r21
   2f1dc:	3108d83a 	srl	r4,r6,r4
   2f1e0:	356a983a 	sll	r21,r6,r21
   2f1e4:	2420b03a 	or	r16,r4,r16
   2f1e8:	017f0344 	movi	r5,-1011
   2f1ec:	28cbc83a 	sub	r5,r5,r3
   2f1f0:	000f883a 	mov	r7,zero
   2f1f4:	003f8b06 	br	2f024 <__alt_data_end+0xfffef454>
   2f1f8:	0021883a 	mov	r16,zero
   2f1fc:	002b883a 	mov	r21,zero
   2f200:	01c00044 	movi	r7,1
   2f204:	003f8706 	br	2f024 <__alt_data_end+0xfffef454>
   2f208:	01c000c4 	movi	r7,3
   2f20c:	003f8506 	br	2f024 <__alt_data_end+0xfffef454>
   2f210:	04800104 	movi	r18,4
   2f214:	0023883a 	mov	r17,zero
   2f218:	0027883a 	mov	r19,zero
   2f21c:	02000044 	movi	r8,1
   2f220:	003f6e06 	br	2efdc <__alt_data_end+0xfffef40c>
   2f224:	04800304 	movi	r18,12
   2f228:	020000c4 	movi	r8,3
   2f22c:	003f6b06 	br	2efdc <__alt_data_end+0xfffef40c>
   2f230:	01400434 	movhi	r5,16
   2f234:	000d883a 	mov	r6,zero
   2f238:	297fffc4 	addi	r5,r5,-1
   2f23c:	04ffffc4 	movi	r19,-1
   2f240:	0101ffc4 	movi	r4,2047
   2f244:	003fa406 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f248:	043f0084 	movi	r16,-1022
   2f24c:	8521c83a 	sub	r16,r16,r20
   2f250:	00800e04 	movi	r2,56
   2f254:	1401200e 	bge	r2,r16,2f6d8 <__divdf3+0x778>
   2f258:	9180004c 	andi	r6,r18,1
   2f25c:	0009883a 	mov	r4,zero
   2f260:	000b883a 	mov	r5,zero
   2f264:	0027883a 	mov	r19,zero
   2f268:	003f9b06 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f26c:	8880022c 	andhi	r2,r17,8
   2f270:	1000c726 	beq	r2,zero,2f590 <__divdf3+0x630>
   2f274:	8080022c 	andhi	r2,r16,8
   2f278:	1000c51e 	bne	r2,zero,2f590 <__divdf3+0x630>
   2f27c:	00800434 	movhi	r2,16
   2f280:	81400234 	orhi	r5,r16,8
   2f284:	10bfffc4 	addi	r2,r2,-1
   2f288:	b80d883a 	mov	r6,r23
   2f28c:	288a703a 	and	r5,r5,r2
   2f290:	a827883a 	mov	r19,r21
   2f294:	003fea06 	br	2f240 <__alt_data_end+0xfffef670>
   2f298:	8440ea36 	bltu	r16,r17,2f644 <__divdf3+0x6e4>
   2f29c:	8c00e826 	beq	r17,r16,2f640 <__divdf3+0x6e0>
   2f2a0:	a53fffc4 	addi	r20,r20,-1
   2f2a4:	882d883a 	mov	r22,r17
   2f2a8:	000d883a 	mov	r6,zero
   2f2ac:	a804d63a 	srli	r2,r21,24
   2f2b0:	8020923a 	slli	r16,r16,8
   2f2b4:	b009883a 	mov	r4,r22
   2f2b8:	d9800315 	stw	r6,12(sp)
   2f2bc:	1420b03a 	or	r16,r2,r16
   2f2c0:	802ed43a 	srli	r23,r16,16
   2f2c4:	873fffcc 	andi	fp,r16,65535
   2f2c8:	a82a923a 	slli	r21,r21,8
   2f2cc:	b80b883a 	mov	r5,r23
   2f2d0:	002e6b40 	call	2e6b4 <__udivsi3>
   2f2d4:	b009883a 	mov	r4,r22
   2f2d8:	b80b883a 	mov	r5,r23
   2f2dc:	1023883a 	mov	r17,r2
   2f2e0:	002e6bc0 	call	2e6bc <__umodsi3>
   2f2e4:	1004943a 	slli	r2,r2,16
   2f2e8:	9808d43a 	srli	r4,r19,16
   2f2ec:	8f2d383a 	mul	r22,r17,fp
   2f2f0:	d9800317 	ldw	r6,12(sp)
   2f2f4:	1106b03a 	or	r3,r2,r4
   2f2f8:	1d80062e 	bgeu	r3,r22,2f314 <__divdf3+0x3b4>
   2f2fc:	1c07883a 	add	r3,r3,r16
   2f300:	88bfffc4 	addi	r2,r17,-1
   2f304:	1c00dc36 	bltu	r3,r16,2f678 <__divdf3+0x718>
   2f308:	1d80db2e 	bgeu	r3,r22,2f678 <__divdf3+0x718>
   2f30c:	8c7fff84 	addi	r17,r17,-2
   2f310:	1c07883a 	add	r3,r3,r16
   2f314:	1dadc83a 	sub	r22,r3,r22
   2f318:	b009883a 	mov	r4,r22
   2f31c:	b80b883a 	mov	r5,r23
   2f320:	d9800315 	stw	r6,12(sp)
   2f324:	002e6b40 	call	2e6b4 <__udivsi3>
   2f328:	b009883a 	mov	r4,r22
   2f32c:	b80b883a 	mov	r5,r23
   2f330:	d8800015 	stw	r2,0(sp)
   2f334:	002e6bc0 	call	2e6bc <__umodsi3>
   2f338:	da400017 	ldw	r9,0(sp)
   2f33c:	1004943a 	slli	r2,r2,16
   2f340:	9cffffcc 	andi	r19,r19,65535
   2f344:	4f07383a 	mul	r3,r9,fp
   2f348:	14c8b03a 	or	r4,r2,r19
   2f34c:	d9800317 	ldw	r6,12(sp)
   2f350:	20c0062e 	bgeu	r4,r3,2f36c <__divdf3+0x40c>
   2f354:	2409883a 	add	r4,r4,r16
   2f358:	48bfffc4 	addi	r2,r9,-1
   2f35c:	2400c436 	bltu	r4,r16,2f670 <__divdf3+0x710>
   2f360:	20c0c32e 	bgeu	r4,r3,2f670 <__divdf3+0x710>
   2f364:	4a7fff84 	addi	r9,r9,-2
   2f368:	2409883a 	add	r4,r4,r16
   2f36c:	8822943a 	slli	r17,r17,16
   2f370:	a80ed43a 	srli	r7,r21,16
   2f374:	aa3fffcc 	andi	r8,r21,65535
   2f378:	4c62b03a 	or	r17,r9,r17
   2f37c:	8816d43a 	srli	r11,r17,16
   2f380:	897fffcc 	andi	r5,r17,65535
   2f384:	2a15383a 	mul	r10,r5,r8
   2f388:	5a19383a 	mul	r12,r11,r8
   2f38c:	29cb383a 	mul	r5,r5,r7
   2f390:	5012d43a 	srli	r9,r10,16
   2f394:	20c5c83a 	sub	r2,r4,r3
   2f398:	614b883a 	add	r5,r12,r5
   2f39c:	2a4b883a 	add	r5,r5,r9
   2f3a0:	59c7383a 	mul	r3,r11,r7
   2f3a4:	2b00022e 	bgeu	r5,r12,2f3b0 <__divdf3+0x450>
   2f3a8:	01000074 	movhi	r4,1
   2f3ac:	1907883a 	add	r3,r3,r4
   2f3b0:	2808d43a 	srli	r4,r5,16
   2f3b4:	280a943a 	slli	r5,r5,16
   2f3b8:	54ffffcc 	andi	r19,r10,65535
   2f3bc:	1907883a 	add	r3,r3,r4
   2f3c0:	2ccb883a 	add	r5,r5,r19
   2f3c4:	10c09336 	bltu	r2,r3,2f614 <__divdf3+0x6b4>
   2f3c8:	10c0ad26 	beq	r2,r3,2f680 <__divdf3+0x720>
   2f3cc:	10c7c83a 	sub	r3,r2,r3
   2f3d0:	3167c83a 	sub	r19,r6,r5
   2f3d4:	34ed803a 	cmpltu	r22,r6,r19
   2f3d8:	1dadc83a 	sub	r22,r3,r22
   2f3dc:	b400b226 	beq	r22,r16,2f6a8 <__divdf3+0x748>
   2f3e0:	b009883a 	mov	r4,r22
   2f3e4:	b80b883a 	mov	r5,r23
   2f3e8:	d9c00115 	stw	r7,4(sp)
   2f3ec:	da000215 	stw	r8,8(sp)
   2f3f0:	002e6b40 	call	2e6b4 <__udivsi3>
   2f3f4:	b009883a 	mov	r4,r22
   2f3f8:	b80b883a 	mov	r5,r23
   2f3fc:	d8800315 	stw	r2,12(sp)
   2f400:	002e6bc0 	call	2e6bc <__umodsi3>
   2f404:	d9800317 	ldw	r6,12(sp)
   2f408:	1004943a 	slli	r2,r2,16
   2f40c:	9808d43a 	srli	r4,r19,16
   2f410:	372d383a 	mul	r22,r6,fp
   2f414:	d9c00117 	ldw	r7,4(sp)
   2f418:	1106b03a 	or	r3,r2,r4
   2f41c:	da000217 	ldw	r8,8(sp)
   2f420:	1d80062e 	bgeu	r3,r22,2f43c <__divdf3+0x4dc>
   2f424:	1c07883a 	add	r3,r3,r16
   2f428:	30bfffc4 	addi	r2,r6,-1
   2f42c:	1c00a036 	bltu	r3,r16,2f6b0 <__divdf3+0x750>
   2f430:	1d809f2e 	bgeu	r3,r22,2f6b0 <__divdf3+0x750>
   2f434:	31bfff84 	addi	r6,r6,-2
   2f438:	1c07883a 	add	r3,r3,r16
   2f43c:	1dadc83a 	sub	r22,r3,r22
   2f440:	b009883a 	mov	r4,r22
   2f444:	b80b883a 	mov	r5,r23
   2f448:	d9800315 	stw	r6,12(sp)
   2f44c:	d9c00115 	stw	r7,4(sp)
   2f450:	da000215 	stw	r8,8(sp)
   2f454:	002e6b40 	call	2e6b4 <__udivsi3>
   2f458:	b009883a 	mov	r4,r22
   2f45c:	b80b883a 	mov	r5,r23
   2f460:	d8800015 	stw	r2,0(sp)
   2f464:	002e6bc0 	call	2e6bc <__umodsi3>
   2f468:	da400017 	ldw	r9,0(sp)
   2f46c:	1004943a 	slli	r2,r2,16
   2f470:	993fffcc 	andi	r4,r19,65535
   2f474:	4f39383a 	mul	fp,r9,fp
   2f478:	1106b03a 	or	r3,r2,r4
   2f47c:	d9800317 	ldw	r6,12(sp)
   2f480:	d9c00117 	ldw	r7,4(sp)
   2f484:	da000217 	ldw	r8,8(sp)
   2f488:	1f00062e 	bgeu	r3,fp,2f4a4 <__divdf3+0x544>
   2f48c:	1c07883a 	add	r3,r3,r16
   2f490:	48bfffc4 	addi	r2,r9,-1
   2f494:	1c008836 	bltu	r3,r16,2f6b8 <__divdf3+0x758>
   2f498:	1f00872e 	bgeu	r3,fp,2f6b8 <__divdf3+0x758>
   2f49c:	4a7fff84 	addi	r9,r9,-2
   2f4a0:	1c07883a 	add	r3,r3,r16
   2f4a4:	3008943a 	slli	r4,r6,16
   2f4a8:	1f07c83a 	sub	r3,r3,fp
   2f4ac:	4926b03a 	or	r19,r9,r4
   2f4b0:	993fffcc 	andi	r4,r19,65535
   2f4b4:	980cd43a 	srli	r6,r19,16
   2f4b8:	220b383a 	mul	r5,r4,r8
   2f4bc:	21c5383a 	mul	r2,r4,r7
   2f4c0:	3211383a 	mul	r8,r6,r8
   2f4c4:	2808d43a 	srli	r4,r5,16
   2f4c8:	31cf383a 	mul	r7,r6,r7
   2f4cc:	4085883a 	add	r2,r8,r2
   2f4d0:	1105883a 	add	r2,r2,r4
   2f4d4:	1200022e 	bgeu	r2,r8,2f4e0 <__divdf3+0x580>
   2f4d8:	01000074 	movhi	r4,1
   2f4dc:	390f883a 	add	r7,r7,r4
   2f4e0:	1008d43a 	srli	r4,r2,16
   2f4e4:	1004943a 	slli	r2,r2,16
   2f4e8:	297fffcc 	andi	r5,r5,65535
   2f4ec:	390f883a 	add	r7,r7,r4
   2f4f0:	1145883a 	add	r2,r2,r5
   2f4f4:	19c06536 	bltu	r3,r7,2f68c <__divdf3+0x72c>
   2f4f8:	19c09f26 	beq	r3,r7,2f778 <__divdf3+0x818>
   2f4fc:	9cc00054 	ori	r19,r19,1
   2f500:	a100ffc4 	addi	r4,r20,1023
   2f504:	013f500e 	bge	zero,r4,2f248 <__alt_data_end+0xfffef678>
   2f508:	988001cc 	andi	r2,r19,7
   2f50c:	10000726 	beq	r2,zero,2f52c <__divdf3+0x5cc>
   2f510:	98c003cc 	andi	r3,r19,15
   2f514:	00800104 	movi	r2,4
   2f518:	18800426 	beq	r3,r2,2f52c <__divdf3+0x5cc>
   2f51c:	9885883a 	add	r2,r19,r2
   2f520:	14e1803a 	cmpltu	r16,r2,r19
   2f524:	8c23883a 	add	r17,r17,r16
   2f528:	1027883a 	mov	r19,r2
   2f52c:	8880402c 	andhi	r2,r17,256
   2f530:	10000426 	beq	r2,zero,2f544 <__divdf3+0x5e4>
   2f534:	00bfc034 	movhi	r2,65280
   2f538:	10bfffc4 	addi	r2,r2,-1
   2f53c:	a1010004 	addi	r4,r20,1024
   2f540:	88a2703a 	and	r17,r17,r2
   2f544:	0081ff84 	movi	r2,2046
   2f548:	113edf16 	blt	r2,r4,2f0c8 <__alt_data_end+0xfffef4f8>
   2f54c:	9826d0fa 	srli	r19,r19,3
   2f550:	8804977a 	slli	r2,r17,29
   2f554:	8820927a 	slli	r16,r17,9
   2f558:	2101ffcc 	andi	r4,r4,2047
   2f55c:	14e6b03a 	or	r19,r2,r19
   2f560:	800ad33a 	srli	r5,r16,12
   2f564:	9180004c 	andi	r6,r18,1
   2f568:	003edb06 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f56c:	008000c4 	movi	r2,3
   2f570:	4080a826 	beq	r8,r2,2f814 <__divdf3+0x8b4>
   2f574:	00800044 	movi	r2,1
   2f578:	4080551e 	bne	r8,r2,2f6d0 <__divdf3+0x770>
   2f57c:	e00d883a 	mov	r6,fp
   2f580:	0009883a 	mov	r4,zero
   2f584:	000b883a 	mov	r5,zero
   2f588:	0027883a 	mov	r19,zero
   2f58c:	003ed206 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f590:	00800434 	movhi	r2,16
   2f594:	89400234 	orhi	r5,r17,8
   2f598:	10bfffc4 	addi	r2,r2,-1
   2f59c:	b00d883a 	mov	r6,r22
   2f5a0:	288a703a 	and	r5,r5,r2
   2f5a4:	003f2606 	br	2f240 <__alt_data_end+0xfffef670>
   2f5a8:	d9800315 	stw	r6,12(sp)
   2f5ac:	d9c00115 	stw	r7,4(sp)
   2f5b0:	0030c600 	call	30c60 <__clzsi2>
   2f5b4:	10c00804 	addi	r3,r2,32
   2f5b8:	010009c4 	movi	r4,39
   2f5bc:	d9800317 	ldw	r6,12(sp)
   2f5c0:	d9c00117 	ldw	r7,4(sp)
   2f5c4:	20fee30e 	bge	r4,r3,2f154 <__alt_data_end+0xfffef584>
   2f5c8:	117ffe04 	addi	r5,r2,-8
   2f5cc:	9162983a 	sll	r17,r18,r5
   2f5d0:	0027883a 	mov	r19,zero
   2f5d4:	003ee606 	br	2f170 <__alt_data_end+0xfffef5a0>
   2f5d8:	3009883a 	mov	r4,r6
   2f5dc:	d9800315 	stw	r6,12(sp)
   2f5e0:	da000215 	stw	r8,8(sp)
   2f5e4:	da400015 	stw	r9,0(sp)
   2f5e8:	0030c600 	call	30c60 <__clzsi2>
   2f5ec:	10c00804 	addi	r3,r2,32
   2f5f0:	010009c4 	movi	r4,39
   2f5f4:	d9800317 	ldw	r6,12(sp)
   2f5f8:	da000217 	ldw	r8,8(sp)
   2f5fc:	da400017 	ldw	r9,0(sp)
   2f600:	20fef20e 	bge	r4,r3,2f1cc <__alt_data_end+0xfffef5fc>
   2f604:	10bffe04 	addi	r2,r2,-8
   2f608:	a8a0983a 	sll	r16,r21,r2
   2f60c:	002b883a 	mov	r21,zero
   2f610:	003ef506 	br	2f1e8 <__alt_data_end+0xfffef618>
   2f614:	354d883a 	add	r6,r6,r21
   2f618:	3549803a 	cmpltu	r4,r6,r21
   2f61c:	2409883a 	add	r4,r4,r16
   2f620:	2089883a 	add	r4,r4,r2
   2f624:	88bfffc4 	addi	r2,r17,-1
   2f628:	81000c2e 	bgeu	r16,r4,2f65c <__divdf3+0x6fc>
   2f62c:	20c04436 	bltu	r4,r3,2f740 <__divdf3+0x7e0>
   2f630:	19006f26 	beq	r3,r4,2f7f0 <__divdf3+0x890>
   2f634:	20c7c83a 	sub	r3,r4,r3
   2f638:	1023883a 	mov	r17,r2
   2f63c:	003f6406 	br	2f3d0 <__alt_data_end+0xfffef800>
   2f640:	9d7f1736 	bltu	r19,r21,2f2a0 <__alt_data_end+0xfffef6d0>
   2f644:	9806d07a 	srli	r3,r19,1
   2f648:	880497fa 	slli	r2,r17,31
   2f64c:	980c97fa 	slli	r6,r19,31
   2f650:	882cd07a 	srli	r22,r17,1
   2f654:	18a6b03a 	or	r19,r3,r2
   2f658:	003f1406 	br	2f2ac <__alt_data_end+0xfffef6dc>
   2f65c:	243ff51e 	bne	r4,r16,2f634 <__alt_data_end+0xfffefa64>
   2f660:	357ff22e 	bgeu	r6,r21,2f62c <__alt_data_end+0xfffefa5c>
   2f664:	80c7c83a 	sub	r3,r16,r3
   2f668:	1023883a 	mov	r17,r2
   2f66c:	003f5806 	br	2f3d0 <__alt_data_end+0xfffef800>
   2f670:	1013883a 	mov	r9,r2
   2f674:	003f3d06 	br	2f36c <__alt_data_end+0xfffef79c>
   2f678:	1023883a 	mov	r17,r2
   2f67c:	003f2506 	br	2f314 <__alt_data_end+0xfffef744>
   2f680:	317fe436 	bltu	r6,r5,2f614 <__alt_data_end+0xfffefa44>
   2f684:	0007883a 	mov	r3,zero
   2f688:	003f5106 	br	2f3d0 <__alt_data_end+0xfffef800>
   2f68c:	1c07883a 	add	r3,r3,r16
   2f690:	993fffc4 	addi	r4,r19,-1
   2f694:	1c000a2e 	bgeu	r3,r16,2f6c0 <__divdf3+0x760>
   2f698:	2027883a 	mov	r19,r4
   2f69c:	19ff971e 	bne	r3,r7,2f4fc <__alt_data_end+0xfffef92c>
   2f6a0:	a8bf961e 	bne	r21,r2,2f4fc <__alt_data_end+0xfffef92c>
   2f6a4:	003f9606 	br	2f500 <__alt_data_end+0xfffef930>
   2f6a8:	04ffffc4 	movi	r19,-1
   2f6ac:	003f9406 	br	2f500 <__alt_data_end+0xfffef930>
   2f6b0:	100d883a 	mov	r6,r2
   2f6b4:	003f6106 	br	2f43c <__alt_data_end+0xfffef86c>
   2f6b8:	1013883a 	mov	r9,r2
   2f6bc:	003f7906 	br	2f4a4 <__alt_data_end+0xfffef8d4>
   2f6c0:	19c02636 	bltu	r3,r7,2f75c <__divdf3+0x7fc>
   2f6c4:	38c04d26 	beq	r7,r3,2f7fc <__divdf3+0x89c>
   2f6c8:	2027883a 	mov	r19,r4
   2f6cc:	003f8b06 	br	2f4fc <__alt_data_end+0xfffef92c>
   2f6d0:	e025883a 	mov	r18,fp
   2f6d4:	003f8a06 	br	2f500 <__alt_data_end+0xfffef930>
   2f6d8:	008007c4 	movi	r2,31
   2f6dc:	14002a16 	blt	r2,r16,2f788 <__divdf3+0x828>
   2f6e0:	a5010784 	addi	r20,r20,1054
   2f6e4:	8d04983a 	sll	r2,r17,r20
   2f6e8:	9c06d83a 	srl	r3,r19,r16
   2f6ec:	9d28983a 	sll	r20,r19,r20
   2f6f0:	8c20d83a 	srl	r16,r17,r16
   2f6f4:	1886b03a 	or	r3,r3,r2
   2f6f8:	a004c03a 	cmpne	r2,r20,zero
   2f6fc:	1884b03a 	or	r2,r3,r2
   2f700:	10c001cc 	andi	r3,r2,7
   2f704:	18000726 	beq	r3,zero,2f724 <__divdf3+0x7c4>
   2f708:	110003cc 	andi	r4,r2,15
   2f70c:	00c00104 	movi	r3,4
   2f710:	20c00426 	beq	r4,r3,2f724 <__divdf3+0x7c4>
   2f714:	10c00104 	addi	r3,r2,4
   2f718:	1885803a 	cmpltu	r2,r3,r2
   2f71c:	80a1883a 	add	r16,r16,r2
   2f720:	1805883a 	mov	r2,r3
   2f724:	80c0202c 	andhi	r3,r16,128
   2f728:	18002d26 	beq	r3,zero,2f7e0 <__divdf3+0x880>
   2f72c:	9180004c 	andi	r6,r18,1
   2f730:	01000044 	movi	r4,1
   2f734:	000b883a 	mov	r5,zero
   2f738:	0027883a 	mov	r19,zero
   2f73c:	003e6606 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f740:	354d883a 	add	r6,r6,r21
   2f744:	356d803a 	cmpltu	r22,r6,r21
   2f748:	b42d883a 	add	r22,r22,r16
   2f74c:	b12d883a 	add	r22,r22,r4
   2f750:	8c7fff84 	addi	r17,r17,-2
   2f754:	b0c7c83a 	sub	r3,r22,r3
   2f758:	003f1d06 	br	2f3d0 <__alt_data_end+0xfffef800>
   2f75c:	ad4b883a 	add	r5,r21,r21
   2f760:	2d6b803a 	cmpltu	r21,r5,r21
   2f764:	ac2b883a 	add	r21,r21,r16
   2f768:	1d47883a 	add	r3,r3,r21
   2f76c:	993fff84 	addi	r4,r19,-2
   2f770:	282b883a 	mov	r21,r5
   2f774:	003fc806 	br	2f698 <__alt_data_end+0xfffefac8>
   2f778:	103fc41e 	bne	r2,zero,2f68c <__alt_data_end+0xfffefabc>
   2f77c:	002b883a 	mov	r21,zero
   2f780:	a8bf5e1e 	bne	r21,r2,2f4fc <__alt_data_end+0xfffef92c>
   2f784:	003f5e06 	br	2f500 <__alt_data_end+0xfffef930>
   2f788:	00bef884 	movi	r2,-1054
   2f78c:	1505c83a 	sub	r2,r2,r20
   2f790:	00c00804 	movi	r3,32
   2f794:	8884d83a 	srl	r2,r17,r2
   2f798:	80c01c26 	beq	r16,r3,2f80c <__divdf3+0x8ac>
   2f79c:	a0c10f84 	addi	r3,r20,1086
   2f7a0:	88c6983a 	sll	r3,r17,r3
   2f7a4:	1cc6b03a 	or	r3,r3,r19
   2f7a8:	1806c03a 	cmpne	r3,r3,zero
   2f7ac:	1884b03a 	or	r2,r3,r2
   2f7b0:	140001cc 	andi	r16,r2,7
   2f7b4:	8000061e 	bne	r16,zero,2f7d0 <__divdf3+0x870>
   2f7b8:	000b883a 	mov	r5,zero
   2f7bc:	1004d0fa 	srli	r2,r2,3
   2f7c0:	9180004c 	andi	r6,r18,1
   2f7c4:	0009883a 	mov	r4,zero
   2f7c8:	1426b03a 	or	r19,r2,r16
   2f7cc:	003e4206 	br	2f0d8 <__alt_data_end+0xfffef508>
   2f7d0:	110003cc 	andi	r4,r2,15
   2f7d4:	00c00104 	movi	r3,4
   2f7d8:	0021883a 	mov	r16,zero
   2f7dc:	20ffcd1e 	bne	r4,r3,2f714 <__alt_data_end+0xfffefb44>
   2f7e0:	800a927a 	slli	r5,r16,9
   2f7e4:	8020977a 	slli	r16,r16,29
   2f7e8:	280ad33a 	srli	r5,r5,12
   2f7ec:	003ff306 	br	2f7bc <__alt_data_end+0xfffefbec>
   2f7f0:	317fd336 	bltu	r6,r5,2f740 <__alt_data_end+0xfffefb70>
   2f7f4:	1023883a 	mov	r17,r2
   2f7f8:	003fa206 	br	2f684 <__alt_data_end+0xfffefab4>
   2f7fc:	a8bfd736 	bltu	r21,r2,2f75c <__alt_data_end+0xfffefb8c>
   2f800:	2027883a 	mov	r19,r4
   2f804:	a8bf3d1e 	bne	r21,r2,2f4fc <__alt_data_end+0xfffef92c>
   2f808:	003f3d06 	br	2f500 <__alt_data_end+0xfffef930>
   2f80c:	0007883a 	mov	r3,zero
   2f810:	003fe406 	br	2f7a4 <__alt_data_end+0xfffefbd4>
   2f814:	00800434 	movhi	r2,16
   2f818:	89400234 	orhi	r5,r17,8
   2f81c:	10bfffc4 	addi	r2,r2,-1
   2f820:	e00d883a 	mov	r6,fp
   2f824:	288a703a 	and	r5,r5,r2
   2f828:	003e8506 	br	2f240 <__alt_data_end+0xfffef670>

0002f82c <__eqdf2>:
   2f82c:	2804d53a 	srli	r2,r5,20
   2f830:	3806d53a 	srli	r3,r7,20
   2f834:	02000434 	movhi	r8,16
   2f838:	423fffc4 	addi	r8,r8,-1
   2f83c:	1081ffcc 	andi	r2,r2,2047
   2f840:	0241ffc4 	movi	r9,2047
   2f844:	2a14703a 	and	r10,r5,r8
   2f848:	18c1ffcc 	andi	r3,r3,2047
   2f84c:	3a10703a 	and	r8,r7,r8
   2f850:	280ad7fa 	srli	r5,r5,31
   2f854:	380ed7fa 	srli	r7,r7,31
   2f858:	12400f26 	beq	r2,r9,2f898 <__eqdf2+0x6c>
   2f85c:	0241ffc4 	movi	r9,2047
   2f860:	1a400326 	beq	r3,r9,2f870 <__eqdf2+0x44>
   2f864:	10c00526 	beq	r2,r3,2f87c <__eqdf2+0x50>
   2f868:	00800044 	movi	r2,1
   2f86c:	f800283a 	ret
   2f870:	4192b03a 	or	r9,r8,r6
   2f874:	483ffc1e 	bne	r9,zero,2f868 <__alt_data_end+0xfffefc98>
   2f878:	10fffb1e 	bne	r2,r3,2f868 <__alt_data_end+0xfffefc98>
   2f87c:	523ffa1e 	bne	r10,r8,2f868 <__alt_data_end+0xfffefc98>
   2f880:	21bff91e 	bne	r4,r6,2f868 <__alt_data_end+0xfffefc98>
   2f884:	29c00826 	beq	r5,r7,2f8a8 <__eqdf2+0x7c>
   2f888:	103ff71e 	bne	r2,zero,2f868 <__alt_data_end+0xfffefc98>
   2f88c:	5104b03a 	or	r2,r10,r4
   2f890:	1004c03a 	cmpne	r2,r2,zero
   2f894:	f800283a 	ret
   2f898:	5112b03a 	or	r9,r10,r4
   2f89c:	483fef26 	beq	r9,zero,2f85c <__alt_data_end+0xfffefc8c>
   2f8a0:	00800044 	movi	r2,1
   2f8a4:	f800283a 	ret
   2f8a8:	0005883a 	mov	r2,zero
   2f8ac:	f800283a 	ret

0002f8b0 <__gedf2>:
   2f8b0:	2804d53a 	srli	r2,r5,20
   2f8b4:	3806d53a 	srli	r3,r7,20
   2f8b8:	02000434 	movhi	r8,16
   2f8bc:	423fffc4 	addi	r8,r8,-1
   2f8c0:	0241ffc4 	movi	r9,2047
   2f8c4:	1081ffcc 	andi	r2,r2,2047
   2f8c8:	2a14703a 	and	r10,r5,r8
   2f8cc:	1a46703a 	and	r3,r3,r9
   2f8d0:	3a10703a 	and	r8,r7,r8
   2f8d4:	280ad7fa 	srli	r5,r5,31
   2f8d8:	380ed7fa 	srli	r7,r7,31
   2f8dc:	12400b26 	beq	r2,r9,2f90c <__gedf2+0x5c>
   2f8e0:	1a401626 	beq	r3,r9,2f93c <__gedf2+0x8c>
   2f8e4:	10000c1e 	bne	r2,zero,2f918 <__gedf2+0x68>
   2f8e8:	5112b03a 	or	r9,r10,r4
   2f8ec:	4813003a 	cmpeq	r9,r9,zero
   2f8f0:	4817883a 	mov	r11,r9
   2f8f4:	18000c1e 	bne	r3,zero,2f928 <__gedf2+0x78>
   2f8f8:	4198b03a 	or	r12,r8,r6
   2f8fc:	60000a1e 	bne	r12,zero,2f928 <__gedf2+0x78>
   2f900:	48001326 	beq	r9,zero,2f950 <__gedf2+0xa0>
   2f904:	0005883a 	mov	r2,zero
   2f908:	f800283a 	ret
   2f90c:	5112b03a 	or	r9,r10,r4
   2f910:	4800191e 	bne	r9,zero,2f978 <__gedf2+0xc8>
   2f914:	18800926 	beq	r3,r2,2f93c <__gedf2+0x8c>
   2f918:	18000b1e 	bne	r3,zero,2f948 <__gedf2+0x98>
   2f91c:	4192b03a 	or	r9,r8,r6
   2f920:	0017883a 	mov	r11,zero
   2f924:	48000a26 	beq	r9,zero,2f950 <__gedf2+0xa0>
   2f928:	39c03fcc 	andi	r7,r7,255
   2f92c:	58000726 	beq	r11,zero,2f94c <__gedf2+0x9c>
   2f930:	3800081e 	bne	r7,zero,2f954 <__gedf2+0xa4>
   2f934:	00bfffc4 	movi	r2,-1
   2f938:	f800283a 	ret
   2f93c:	4192b03a 	or	r9,r8,r6
   2f940:	48000d1e 	bne	r9,zero,2f978 <__gedf2+0xc8>
   2f944:	103fe826 	beq	r2,zero,2f8e8 <__alt_data_end+0xfffefd18>
   2f948:	39c03fcc 	andi	r7,r7,255
   2f94c:	29c00326 	beq	r5,r7,2f95c <__gedf2+0xac>
   2f950:	283ff81e 	bne	r5,zero,2f934 <__alt_data_end+0xfffefd64>
   2f954:	00800044 	movi	r2,1
   2f958:	f800283a 	ret
   2f95c:	18bffc16 	blt	r3,r2,2f950 <__alt_data_end+0xfffefd80>
   2f960:	10c00316 	blt	r2,r3,2f970 <__gedf2+0xc0>
   2f964:	42bffa36 	bltu	r8,r10,2f950 <__alt_data_end+0xfffefd80>
   2f968:	52000526 	beq	r10,r8,2f980 <__gedf2+0xd0>
   2f96c:	523fe52e 	bgeu	r10,r8,2f904 <__alt_data_end+0xfffefd34>
   2f970:	283ff026 	beq	r5,zero,2f934 <__alt_data_end+0xfffefd64>
   2f974:	003ff706 	br	2f954 <__alt_data_end+0xfffefd84>
   2f978:	00bfff84 	movi	r2,-2
   2f97c:	f800283a 	ret
   2f980:	313ff336 	bltu	r6,r4,2f950 <__alt_data_end+0xfffefd80>
   2f984:	21bfdf2e 	bgeu	r4,r6,2f904 <__alt_data_end+0xfffefd34>
   2f988:	283fea26 	beq	r5,zero,2f934 <__alt_data_end+0xfffefd64>
   2f98c:	003ff106 	br	2f954 <__alt_data_end+0xfffefd84>

0002f990 <__ledf2>:
   2f990:	2804d53a 	srli	r2,r5,20
   2f994:	3810d53a 	srli	r8,r7,20
   2f998:	00c00434 	movhi	r3,16
   2f99c:	18ffffc4 	addi	r3,r3,-1
   2f9a0:	0241ffc4 	movi	r9,2047
   2f9a4:	1081ffcc 	andi	r2,r2,2047
   2f9a8:	28d4703a 	and	r10,r5,r3
   2f9ac:	4250703a 	and	r8,r8,r9
   2f9b0:	38c6703a 	and	r3,r7,r3
   2f9b4:	280ad7fa 	srli	r5,r5,31
   2f9b8:	380ed7fa 	srli	r7,r7,31
   2f9bc:	12400b26 	beq	r2,r9,2f9ec <__ledf2+0x5c>
   2f9c0:	42401926 	beq	r8,r9,2fa28 <__ledf2+0x98>
   2f9c4:	10000c1e 	bne	r2,zero,2f9f8 <__ledf2+0x68>
   2f9c8:	5112b03a 	or	r9,r10,r4
   2f9cc:	4813003a 	cmpeq	r9,r9,zero
   2f9d0:	4817883a 	mov	r11,r9
   2f9d4:	40000f26 	beq	r8,zero,2fa14 <__ledf2+0x84>
   2f9d8:	39c03fcc 	andi	r7,r7,255
   2f9dc:	58001826 	beq	r11,zero,2fa40 <__ledf2+0xb0>
   2f9e0:	38000a1e 	bne	r7,zero,2fa0c <__ledf2+0x7c>
   2f9e4:	00bfffc4 	movi	r2,-1
   2f9e8:	f800283a 	ret
   2f9ec:	5112b03a 	or	r9,r10,r4
   2f9f0:	48000f1e 	bne	r9,zero,2fa30 <__ledf2+0xa0>
   2f9f4:	40800c26 	beq	r8,r2,2fa28 <__ledf2+0x98>
   2f9f8:	4000101e 	bne	r8,zero,2fa3c <__ledf2+0xac>
   2f9fc:	1992b03a 	or	r9,r3,r6
   2fa00:	0017883a 	mov	r11,zero
   2fa04:	483ff41e 	bne	r9,zero,2f9d8 <__alt_data_end+0xfffefe08>
   2fa08:	283ff61e 	bne	r5,zero,2f9e4 <__alt_data_end+0xfffefe14>
   2fa0c:	00800044 	movi	r2,1
   2fa10:	f800283a 	ret
   2fa14:	1998b03a 	or	r12,r3,r6
   2fa18:	603fef1e 	bne	r12,zero,2f9d8 <__alt_data_end+0xfffefe08>
   2fa1c:	483ffa26 	beq	r9,zero,2fa08 <__alt_data_end+0xfffefe38>
   2fa20:	0005883a 	mov	r2,zero
   2fa24:	f800283a 	ret
   2fa28:	1992b03a 	or	r9,r3,r6
   2fa2c:	48000226 	beq	r9,zero,2fa38 <__ledf2+0xa8>
   2fa30:	00800084 	movi	r2,2
   2fa34:	f800283a 	ret
   2fa38:	103fe326 	beq	r2,zero,2f9c8 <__alt_data_end+0xfffefdf8>
   2fa3c:	39c03fcc 	andi	r7,r7,255
   2fa40:	29fff11e 	bne	r5,r7,2fa08 <__alt_data_end+0xfffefe38>
   2fa44:	40bff016 	blt	r8,r2,2fa08 <__alt_data_end+0xfffefe38>
   2fa48:	12000316 	blt	r2,r8,2fa58 <__ledf2+0xc8>
   2fa4c:	1abfee36 	bltu	r3,r10,2fa08 <__alt_data_end+0xfffefe38>
   2fa50:	50c00326 	beq	r10,r3,2fa60 <__ledf2+0xd0>
   2fa54:	50fff22e 	bgeu	r10,r3,2fa20 <__alt_data_end+0xfffefe50>
   2fa58:	283fe226 	beq	r5,zero,2f9e4 <__alt_data_end+0xfffefe14>
   2fa5c:	003feb06 	br	2fa0c <__alt_data_end+0xfffefe3c>
   2fa60:	313fe936 	bltu	r6,r4,2fa08 <__alt_data_end+0xfffefe38>
   2fa64:	21bfee2e 	bgeu	r4,r6,2fa20 <__alt_data_end+0xfffefe50>
   2fa68:	283fde26 	beq	r5,zero,2f9e4 <__alt_data_end+0xfffefe14>
   2fa6c:	003fe706 	br	2fa0c <__alt_data_end+0xfffefe3c>

0002fa70 <__muldf3>:
   2fa70:	defff204 	addi	sp,sp,-56
   2fa74:	2804d53a 	srli	r2,r5,20
   2fa78:	dd800a15 	stw	r22,40(sp)
   2fa7c:	282cd7fa 	srli	r22,r5,31
   2fa80:	dc000415 	stw	r16,16(sp)
   2fa84:	04000434 	movhi	r16,16
   2fa88:	df000c15 	stw	fp,48(sp)
   2fa8c:	dd000815 	stw	r20,32(sp)
   2fa90:	dcc00715 	stw	r19,28(sp)
   2fa94:	dc800615 	stw	r18,24(sp)
   2fa98:	dc400515 	stw	r17,20(sp)
   2fa9c:	843fffc4 	addi	r16,r16,-1
   2faa0:	dfc00d15 	stw	ra,52(sp)
   2faa4:	ddc00b15 	stw	r23,44(sp)
   2faa8:	dd400915 	stw	r21,36(sp)
   2faac:	1501ffcc 	andi	r20,r2,2047
   2fab0:	2023883a 	mov	r17,r4
   2fab4:	2025883a 	mov	r18,r4
   2fab8:	2c20703a 	and	r16,r5,r16
   2fabc:	b027883a 	mov	r19,r22
   2fac0:	b7003fcc 	andi	fp,r22,255
   2fac4:	a0005926 	beq	r20,zero,2fc2c <__muldf3+0x1bc>
   2fac8:	0081ffc4 	movi	r2,2047
   2facc:	a0803426 	beq	r20,r2,2fba0 <__muldf3+0x130>
   2fad0:	84000434 	orhi	r16,r16,16
   2fad4:	2004d77a 	srli	r2,r4,29
   2fad8:	802090fa 	slli	r16,r16,3
   2fadc:	202490fa 	slli	r18,r4,3
   2fae0:	a53f0044 	addi	r20,r20,-1023
   2fae4:	80a0b03a 	or	r16,r16,r2
   2fae8:	002b883a 	mov	r21,zero
   2faec:	0015883a 	mov	r10,zero
   2faf0:	3812d53a 	srli	r9,r7,20
   2faf4:	3806d7fa 	srli	r3,r7,31
   2faf8:	02000434 	movhi	r8,16
   2fafc:	423fffc4 	addi	r8,r8,-1
   2fb00:	4941ffcc 	andi	r5,r9,2047
   2fb04:	302f883a 	mov	r23,r6
   2fb08:	3a22703a 	and	r17,r7,r8
   2fb0c:	1ac03fcc 	andi	r11,r3,255
   2fb10:	28006226 	beq	r5,zero,2fc9c <__muldf3+0x22c>
   2fb14:	0081ffc4 	movi	r2,2047
   2fb18:	28805a26 	beq	r5,r2,2fc84 <__muldf3+0x214>
   2fb1c:	8a000434 	orhi	r8,r17,16
   2fb20:	3004d77a 	srli	r2,r6,29
   2fb24:	401090fa 	slli	r8,r8,3
   2fb28:	302e90fa 	slli	r23,r6,3
   2fb2c:	297f0044 	addi	r5,r5,-1023
   2fb30:	40a2b03a 	or	r17,r8,r2
   2fb34:	0013883a 	mov	r9,zero
   2fb38:	4d4cb03a 	or	r6,r9,r21
   2fb3c:	300c90ba 	slli	r6,r6,2
   2fb40:	020000f4 	movhi	r8,3
   2fb44:	423ed804 	addi	r8,r8,-1184
   2fb48:	320d883a 	add	r6,r6,r8
   2fb4c:	31800017 	ldw	r6,0(r6)
   2fb50:	a14b883a 	add	r5,r20,r5
   2fb54:	1dacf03a 	xor	r22,r3,r22
   2fb58:	2b000044 	addi	r12,r5,1
   2fb5c:	3000683a 	jmp	r6
   2fb60:	0002fd9c 	xori	zero,zero,3062
   2fb64:	0002fd88 	cmpgei	zero,zero,3062
   2fb68:	0002fd88 	cmpgei	zero,zero,3062
   2fb6c:	0002fd74 	movhi	zero,3061
   2fb70:	0002fbbc 	xorhi	zero,zero,3054
   2fb74:	0002fbbc 	xorhi	zero,zero,3054
   2fb78:	0002fd5c 	xori	zero,zero,3061
   2fb7c:	0002fd74 	movhi	zero,3061
   2fb80:	0002fbbc 	xorhi	zero,zero,3054
   2fb84:	0002fd5c 	xori	zero,zero,3061
   2fb88:	0002fbbc 	xorhi	zero,zero,3054
   2fb8c:	0002fd74 	movhi	zero,3061
   2fb90:	0002fbc0 	call	2fbc <__reset-0x1d044>
   2fb94:	0002fbc0 	call	2fbc <__reset-0x1d044>
   2fb98:	0002fbc0 	call	2fbc <__reset-0x1d044>
   2fb9c:	0002ff98 	cmpnei	zero,zero,3070
   2fba0:	8104b03a 	or	r2,r16,r4
   2fba4:	10006a1e 	bne	r2,zero,2fd50 <__muldf3+0x2e0>
   2fba8:	05400204 	movi	r21,8
   2fbac:	0021883a 	mov	r16,zero
   2fbb0:	0025883a 	mov	r18,zero
   2fbb4:	02800084 	movi	r10,2
   2fbb8:	003fcd06 	br	2faf0 <__alt_data_end+0xfffeff20>
   2fbbc:	b039883a 	mov	fp,r22
   2fbc0:	00800084 	movi	r2,2
   2fbc4:	50804e1e 	bne	r10,r2,2fd00 <__muldf3+0x290>
   2fbc8:	e4c0004c 	andi	r19,fp,1
   2fbcc:	0101ffc4 	movi	r4,2047
   2fbd0:	0021883a 	mov	r16,zero
   2fbd4:	0025883a 	mov	r18,zero
   2fbd8:	2008953a 	slli	r4,r4,20
   2fbdc:	98c03fcc 	andi	r3,r19,255
   2fbe0:	01400434 	movhi	r5,16
   2fbe4:	297fffc4 	addi	r5,r5,-1
   2fbe8:	180697fa 	slli	r3,r3,31
   2fbec:	8160703a 	and	r16,r16,r5
   2fbf0:	8120b03a 	or	r16,r16,r4
   2fbf4:	80c6b03a 	or	r3,r16,r3
   2fbf8:	9005883a 	mov	r2,r18
   2fbfc:	dfc00d17 	ldw	ra,52(sp)
   2fc00:	df000c17 	ldw	fp,48(sp)
   2fc04:	ddc00b17 	ldw	r23,44(sp)
   2fc08:	dd800a17 	ldw	r22,40(sp)
   2fc0c:	dd400917 	ldw	r21,36(sp)
   2fc10:	dd000817 	ldw	r20,32(sp)
   2fc14:	dcc00717 	ldw	r19,28(sp)
   2fc18:	dc800617 	ldw	r18,24(sp)
   2fc1c:	dc400517 	ldw	r17,20(sp)
   2fc20:	dc000417 	ldw	r16,16(sp)
   2fc24:	dec00e04 	addi	sp,sp,56
   2fc28:	f800283a 	ret
   2fc2c:	8104b03a 	or	r2,r16,r4
   2fc30:	10004226 	beq	r2,zero,2fd3c <__muldf3+0x2cc>
   2fc34:	8000f926 	beq	r16,zero,3001c <__muldf3+0x5ac>
   2fc38:	8009883a 	mov	r4,r16
   2fc3c:	d9800315 	stw	r6,12(sp)
   2fc40:	d9c00015 	stw	r7,0(sp)
   2fc44:	0030c600 	call	30c60 <__clzsi2>
   2fc48:	d9800317 	ldw	r6,12(sp)
   2fc4c:	d9c00017 	ldw	r7,0(sp)
   2fc50:	1007883a 	mov	r3,r2
   2fc54:	01000a04 	movi	r4,40
   2fc58:	18bffe04 	addi	r2,r3,-8
   2fc5c:	20c9c83a 	sub	r4,r4,r3
   2fc60:	80a0983a 	sll	r16,r16,r2
   2fc64:	8908d83a 	srl	r4,r17,r4
   2fc68:	88a4983a 	sll	r18,r17,r2
   2fc6c:	2420b03a 	or	r16,r4,r16
   2fc70:	017f0344 	movi	r5,-1011
   2fc74:	28e9c83a 	sub	r20,r5,r3
   2fc78:	002b883a 	mov	r21,zero
   2fc7c:	0015883a 	mov	r10,zero
   2fc80:	003f9b06 	br	2faf0 <__alt_data_end+0xfffeff20>
   2fc84:	8984b03a 	or	r2,r17,r6
   2fc88:	10002a1e 	bne	r2,zero,2fd34 <__muldf3+0x2c4>
   2fc8c:	0023883a 	mov	r17,zero
   2fc90:	002f883a 	mov	r23,zero
   2fc94:	02400084 	movi	r9,2
   2fc98:	003fa706 	br	2fb38 <__alt_data_end+0xfffeff68>
   2fc9c:	8984b03a 	or	r2,r17,r6
   2fca0:	10002026 	beq	r2,zero,2fd24 <__muldf3+0x2b4>
   2fca4:	8800cc26 	beq	r17,zero,2ffd8 <__muldf3+0x568>
   2fca8:	8809883a 	mov	r4,r17
   2fcac:	d8c00215 	stw	r3,8(sp)
   2fcb0:	d9800315 	stw	r6,12(sp)
   2fcb4:	da800015 	stw	r10,0(sp)
   2fcb8:	dac00115 	stw	r11,4(sp)
   2fcbc:	0030c600 	call	30c60 <__clzsi2>
   2fcc0:	d8c00217 	ldw	r3,8(sp)
   2fcc4:	d9800317 	ldw	r6,12(sp)
   2fcc8:	da800017 	ldw	r10,0(sp)
   2fccc:	dac00117 	ldw	r11,4(sp)
   2fcd0:	1009883a 	mov	r4,r2
   2fcd4:	01400a04 	movi	r5,40
   2fcd8:	25fffe04 	addi	r23,r4,-8
   2fcdc:	290bc83a 	sub	r5,r5,r4
   2fce0:	8dd0983a 	sll	r8,r17,r23
   2fce4:	314ad83a 	srl	r5,r6,r5
   2fce8:	35ee983a 	sll	r23,r6,r23
   2fcec:	2a22b03a 	or	r17,r5,r8
   2fcf0:	017f0344 	movi	r5,-1011
   2fcf4:	290bc83a 	sub	r5,r5,r4
   2fcf8:	0013883a 	mov	r9,zero
   2fcfc:	003f8e06 	br	2fb38 <__alt_data_end+0xfffeff68>
   2fd00:	008000c4 	movi	r2,3
   2fd04:	50811d26 	beq	r10,r2,3017c <__muldf3+0x70c>
   2fd08:	00800044 	movi	r2,1
   2fd0c:	5080e01e 	bne	r10,r2,30090 <__muldf3+0x620>
   2fd10:	e0a6703a 	and	r19,fp,r2
   2fd14:	0009883a 	mov	r4,zero
   2fd18:	0021883a 	mov	r16,zero
   2fd1c:	0025883a 	mov	r18,zero
   2fd20:	003fad06 	br	2fbd8 <__alt_data_end+0xffff0008>
   2fd24:	0023883a 	mov	r17,zero
   2fd28:	002f883a 	mov	r23,zero
   2fd2c:	02400044 	movi	r9,1
   2fd30:	003f8106 	br	2fb38 <__alt_data_end+0xfffeff68>
   2fd34:	024000c4 	movi	r9,3
   2fd38:	003f7f06 	br	2fb38 <__alt_data_end+0xfffeff68>
   2fd3c:	05400104 	movi	r21,4
   2fd40:	0021883a 	mov	r16,zero
   2fd44:	0025883a 	mov	r18,zero
   2fd48:	02800044 	movi	r10,1
   2fd4c:	003f6806 	br	2faf0 <__alt_data_end+0xfffeff20>
   2fd50:	05400304 	movi	r21,12
   2fd54:	028000c4 	movi	r10,3
   2fd58:	003f6506 	br	2faf0 <__alt_data_end+0xfffeff20>
   2fd5c:	04000434 	movhi	r16,16
   2fd60:	0027883a 	mov	r19,zero
   2fd64:	843fffc4 	addi	r16,r16,-1
   2fd68:	04bfffc4 	movi	r18,-1
   2fd6c:	0101ffc4 	movi	r4,2047
   2fd70:	003f9906 	br	2fbd8 <__alt_data_end+0xffff0008>
   2fd74:	8821883a 	mov	r16,r17
   2fd78:	b825883a 	mov	r18,r23
   2fd7c:	5839883a 	mov	fp,r11
   2fd80:	4815883a 	mov	r10,r9
   2fd84:	003f8e06 	br	2fbc0 <__alt_data_end+0xfffefff0>
   2fd88:	8821883a 	mov	r16,r17
   2fd8c:	b825883a 	mov	r18,r23
   2fd90:	b039883a 	mov	fp,r22
   2fd94:	4815883a 	mov	r10,r9
   2fd98:	003f8906 	br	2fbc0 <__alt_data_end+0xfffefff0>
   2fd9c:	b80cd43a 	srli	r6,r23,16
   2fda0:	9006d43a 	srli	r3,r18,16
   2fda4:	90bfffcc 	andi	r2,r18,65535
   2fda8:	bdffffcc 	andi	r23,r23,65535
   2fdac:	b891383a 	mul	r8,r23,r2
   2fdb0:	b8c9383a 	mul	r4,r23,r3
   2fdb4:	309b383a 	mul	r13,r6,r2
   2fdb8:	400ed43a 	srli	r7,r8,16
   2fdbc:	30df383a 	mul	r15,r6,r3
   2fdc0:	235b883a 	add	r13,r4,r13
   2fdc4:	69db883a 	add	r13,r13,r7
   2fdc8:	6900022e 	bgeu	r13,r4,2fdd4 <__muldf3+0x364>
   2fdcc:	01000074 	movhi	r4,1
   2fdd0:	791f883a 	add	r15,r15,r4
   2fdd4:	8828d43a 	srli	r20,r17,16
   2fdd8:	8c7fffcc 	andi	r17,r17,65535
   2fddc:	888f383a 	mul	r7,r17,r2
   2fde0:	88d3383a 	mul	r9,r17,r3
   2fde4:	a0a5383a 	mul	r18,r20,r2
   2fde8:	3816d43a 	srli	r11,r7,16
   2fdec:	6814943a 	slli	r10,r13,16
   2fdf0:	4ca5883a 	add	r18,r9,r18
   2fdf4:	423fffcc 	andi	r8,r8,65535
   2fdf8:	92e5883a 	add	r18,r18,r11
   2fdfc:	6808d43a 	srli	r4,r13,16
   2fe00:	5215883a 	add	r10,r10,r8
   2fe04:	a0c7383a 	mul	r3,r20,r3
   2fe08:	9240022e 	bgeu	r18,r9,2fe14 <__muldf3+0x3a4>
   2fe0c:	00800074 	movhi	r2,1
   2fe10:	1887883a 	add	r3,r3,r2
   2fe14:	802ad43a 	srli	r21,r16,16
   2fe18:	80bfffcc 	andi	r2,r16,65535
   2fe1c:	b893383a 	mul	r9,r23,r2
   2fe20:	3091383a 	mul	r8,r6,r2
   2fe24:	bd6f383a 	mul	r23,r23,r21
   2fe28:	9026943a 	slli	r19,r18,16
   2fe2c:	481ad43a 	srli	r13,r9,16
   2fe30:	9024d43a 	srli	r18,r18,16
   2fe34:	39ffffcc 	andi	r7,r7,65535
   2fe38:	ba11883a 	add	r8,r23,r8
   2fe3c:	99e7883a 	add	r19,r19,r7
   2fe40:	4351883a 	add	r8,r8,r13
   2fe44:	1c97883a 	add	r11,r3,r18
   2fe48:	354d383a 	mul	r6,r6,r21
   2fe4c:	9925883a 	add	r18,r19,r4
   2fe50:	45c0022e 	bgeu	r8,r23,2fe5c <__muldf3+0x3ec>
   2fe54:	00c00074 	movhi	r3,1
   2fe58:	30cd883a 	add	r6,r6,r3
   2fe5c:	8889383a 	mul	r4,r17,r2
   2fe60:	8d63383a 	mul	r17,r17,r21
   2fe64:	a085383a 	mul	r2,r20,r2
   2fe68:	200ed43a 	srli	r7,r4,16
   2fe6c:	401cd43a 	srli	r14,r8,16
   2fe70:	401a943a 	slli	r13,r8,16
   2fe74:	8885883a 	add	r2,r17,r2
   2fe78:	4a3fffcc 	andi	r8,r9,65535
   2fe7c:	11c5883a 	add	r2,r2,r7
   2fe80:	339d883a 	add	r14,r6,r14
   2fe84:	6a11883a 	add	r8,r13,r8
   2fe88:	a561383a 	mul	r16,r20,r21
   2fe8c:	1440022e 	bgeu	r2,r17,2fe98 <__muldf3+0x428>
   2fe90:	00c00074 	movhi	r3,1
   2fe94:	80e1883a 	add	r16,r16,r3
   2fe98:	1006943a 	slli	r3,r2,16
   2fe9c:	213fffcc 	andi	r4,r4,65535
   2fea0:	93db883a 	add	r13,r18,r15
   2fea4:	1909883a 	add	r4,r3,r4
   2fea8:	22c7883a 	add	r3,r4,r11
   2feac:	6cd3803a 	cmpltu	r9,r13,r19
   2feb0:	6a09883a 	add	r4,r13,r8
   2feb4:	1a5b883a 	add	r13,r3,r9
   2feb8:	2211803a 	cmpltu	r8,r4,r8
   2febc:	734d883a 	add	r6,r14,r13
   2fec0:	100ed43a 	srli	r7,r2,16
   2fec4:	6a53803a 	cmpltu	r9,r13,r9
   2fec8:	3205883a 	add	r2,r6,r8
   2fecc:	1ac7803a 	cmpltu	r3,r3,r11
   2fed0:	1211803a 	cmpltu	r8,r2,r8
   2fed4:	48c6b03a 	or	r3,r9,r3
   2fed8:	338d803a 	cmpltu	r6,r6,r14
   2fedc:	19c7883a 	add	r3,r3,r7
   2fee0:	418cb03a 	or	r6,r8,r6
   2fee4:	1987883a 	add	r3,r3,r6
   2fee8:	2024927a 	slli	r18,r4,9
   2feec:	1c07883a 	add	r3,r3,r16
   2fef0:	1806927a 	slli	r3,r3,9
   2fef4:	1020d5fa 	srli	r16,r2,23
   2fef8:	2008d5fa 	srli	r4,r4,23
   2fefc:	9294b03a 	or	r10,r18,r10
   2ff00:	1004927a 	slli	r2,r2,9
   2ff04:	5024c03a 	cmpne	r18,r10,zero
   2ff08:	1c20b03a 	or	r16,r3,r16
   2ff0c:	9108b03a 	or	r4,r18,r4
   2ff10:	80c0402c 	andhi	r3,r16,256
   2ff14:	20a4b03a 	or	r18,r4,r2
   2ff18:	18000726 	beq	r3,zero,2ff38 <__muldf3+0x4c8>
   2ff1c:	9006d07a 	srli	r3,r18,1
   2ff20:	800897fa 	slli	r4,r16,31
   2ff24:	9080004c 	andi	r2,r18,1
   2ff28:	8020d07a 	srli	r16,r16,1
   2ff2c:	10c4b03a 	or	r2,r2,r3
   2ff30:	1124b03a 	or	r18,r2,r4
   2ff34:	600b883a 	mov	r5,r12
   2ff38:	2900ffc4 	addi	r4,r5,1023
   2ff3c:	01004b0e 	bge	zero,r4,3006c <__muldf3+0x5fc>
   2ff40:	908001cc 	andi	r2,r18,7
   2ff44:	10000726 	beq	r2,zero,2ff64 <__muldf3+0x4f4>
   2ff48:	90c003cc 	andi	r3,r18,15
   2ff4c:	00800104 	movi	r2,4
   2ff50:	18800426 	beq	r3,r2,2ff64 <__muldf3+0x4f4>
   2ff54:	9087883a 	add	r3,r18,r2
   2ff58:	1c85803a 	cmpltu	r2,r3,r18
   2ff5c:	80a1883a 	add	r16,r16,r2
   2ff60:	1825883a 	mov	r18,r3
   2ff64:	8080402c 	andhi	r2,r16,256
   2ff68:	10000426 	beq	r2,zero,2ff7c <__muldf3+0x50c>
   2ff6c:	00bfc034 	movhi	r2,65280
   2ff70:	10bfffc4 	addi	r2,r2,-1
   2ff74:	29010004 	addi	r4,r5,1024
   2ff78:	80a0703a 	and	r16,r16,r2
   2ff7c:	0081ff84 	movi	r2,2046
   2ff80:	1100320e 	bge	r2,r4,3004c <__muldf3+0x5dc>
   2ff84:	b4c0004c 	andi	r19,r22,1
   2ff88:	0101ffc4 	movi	r4,2047
   2ff8c:	0021883a 	mov	r16,zero
   2ff90:	0025883a 	mov	r18,zero
   2ff94:	003f1006 	br	2fbd8 <__alt_data_end+0xffff0008>
   2ff98:	8080022c 	andhi	r2,r16,8
   2ff9c:	10000926 	beq	r2,zero,2ffc4 <__muldf3+0x554>
   2ffa0:	8880022c 	andhi	r2,r17,8
   2ffa4:	1000071e 	bne	r2,zero,2ffc4 <__muldf3+0x554>
   2ffa8:	00800434 	movhi	r2,16
   2ffac:	8c000234 	orhi	r16,r17,8
   2ffb0:	10bfffc4 	addi	r2,r2,-1
   2ffb4:	1827883a 	mov	r19,r3
   2ffb8:	80a0703a 	and	r16,r16,r2
   2ffbc:	b825883a 	mov	r18,r23
   2ffc0:	003f6a06 	br	2fd6c <__alt_data_end+0xffff019c>
   2ffc4:	00800434 	movhi	r2,16
   2ffc8:	84000234 	orhi	r16,r16,8
   2ffcc:	10bfffc4 	addi	r2,r2,-1
   2ffd0:	80a0703a 	and	r16,r16,r2
   2ffd4:	003f6506 	br	2fd6c <__alt_data_end+0xffff019c>
   2ffd8:	3009883a 	mov	r4,r6
   2ffdc:	d8c00215 	stw	r3,8(sp)
   2ffe0:	d9800315 	stw	r6,12(sp)
   2ffe4:	da800015 	stw	r10,0(sp)
   2ffe8:	dac00115 	stw	r11,4(sp)
   2ffec:	0030c600 	call	30c60 <__clzsi2>
   2fff0:	11000804 	addi	r4,r2,32
   2fff4:	014009c4 	movi	r5,39
   2fff8:	d8c00217 	ldw	r3,8(sp)
   2fffc:	d9800317 	ldw	r6,12(sp)
   30000:	da800017 	ldw	r10,0(sp)
   30004:	dac00117 	ldw	r11,4(sp)
   30008:	293f320e 	bge	r5,r4,2fcd4 <__alt_data_end+0xffff0104>
   3000c:	10bffe04 	addi	r2,r2,-8
   30010:	b8a2983a 	sll	r17,r23,r2
   30014:	002f883a 	mov	r23,zero
   30018:	003f3506 	br	2fcf0 <__alt_data_end+0xffff0120>
   3001c:	d9800315 	stw	r6,12(sp)
   30020:	d9c00015 	stw	r7,0(sp)
   30024:	0030c600 	call	30c60 <__clzsi2>
   30028:	10c00804 	addi	r3,r2,32
   3002c:	010009c4 	movi	r4,39
   30030:	d9800317 	ldw	r6,12(sp)
   30034:	d9c00017 	ldw	r7,0(sp)
   30038:	20ff060e 	bge	r4,r3,2fc54 <__alt_data_end+0xffff0084>
   3003c:	10bffe04 	addi	r2,r2,-8
   30040:	88a0983a 	sll	r16,r17,r2
   30044:	0025883a 	mov	r18,zero
   30048:	003f0906 	br	2fc70 <__alt_data_end+0xffff00a0>
   3004c:	9004d0fa 	srli	r2,r18,3
   30050:	8024977a 	slli	r18,r16,29
   30054:	8020927a 	slli	r16,r16,9
   30058:	2101ffcc 	andi	r4,r4,2047
   3005c:	90a4b03a 	or	r18,r18,r2
   30060:	8020d33a 	srli	r16,r16,12
   30064:	b4c0004c 	andi	r19,r22,1
   30068:	003edb06 	br	2fbd8 <__alt_data_end+0xffff0008>
   3006c:	00ff0084 	movi	r3,-1022
   30070:	1947c83a 	sub	r3,r3,r5
   30074:	00800e04 	movi	r2,56
   30078:	10c0080e 	bge	r2,r3,3009c <__muldf3+0x62c>
   3007c:	b4c0004c 	andi	r19,r22,1
   30080:	0009883a 	mov	r4,zero
   30084:	0021883a 	mov	r16,zero
   30088:	0025883a 	mov	r18,zero
   3008c:	003ed206 	br	2fbd8 <__alt_data_end+0xffff0008>
   30090:	600b883a 	mov	r5,r12
   30094:	e02d883a 	mov	r22,fp
   30098:	003fa706 	br	2ff38 <__alt_data_end+0xffff0368>
   3009c:	008007c4 	movi	r2,31
   300a0:	10c01816 	blt	r2,r3,30104 <__muldf3+0x694>
   300a4:	29410784 	addi	r5,r5,1054
   300a8:	8144983a 	sll	r2,r16,r5
   300ac:	90c8d83a 	srl	r4,r18,r3
   300b0:	914a983a 	sll	r5,r18,r5
   300b4:	80c6d83a 	srl	r3,r16,r3
   300b8:	2088b03a 	or	r4,r4,r2
   300bc:	2804c03a 	cmpne	r2,r5,zero
   300c0:	2084b03a 	or	r2,r4,r2
   300c4:	110001cc 	andi	r4,r2,7
   300c8:	20000726 	beq	r4,zero,300e8 <__muldf3+0x678>
   300cc:	114003cc 	andi	r5,r2,15
   300d0:	01000104 	movi	r4,4
   300d4:	29000426 	beq	r5,r4,300e8 <__muldf3+0x678>
   300d8:	11000104 	addi	r4,r2,4
   300dc:	2085803a 	cmpltu	r2,r4,r2
   300e0:	1887883a 	add	r3,r3,r2
   300e4:	2005883a 	mov	r2,r4
   300e8:	1900202c 	andhi	r4,r3,128
   300ec:	20001826 	beq	r4,zero,30150 <__muldf3+0x6e0>
   300f0:	b4c0004c 	andi	r19,r22,1
   300f4:	01000044 	movi	r4,1
   300f8:	0021883a 	mov	r16,zero
   300fc:	0025883a 	mov	r18,zero
   30100:	003eb506 	br	2fbd8 <__alt_data_end+0xffff0008>
   30104:	00bef884 	movi	r2,-1054
   30108:	1145c83a 	sub	r2,r2,r5
   3010c:	8088d83a 	srl	r4,r16,r2
   30110:	00800804 	movi	r2,32
   30114:	18801726 	beq	r3,r2,30174 <__muldf3+0x704>
   30118:	28810f84 	addi	r2,r5,1086
   3011c:	8084983a 	sll	r2,r16,r2
   30120:	1484b03a 	or	r2,r2,r18
   30124:	1004c03a 	cmpne	r2,r2,zero
   30128:	1104b03a 	or	r2,r2,r4
   3012c:	10c001cc 	andi	r3,r2,7
   30130:	18000b1e 	bne	r3,zero,30160 <__muldf3+0x6f0>
   30134:	0021883a 	mov	r16,zero
   30138:	1004d0fa 	srli	r2,r2,3
   3013c:	b4c0004c 	andi	r19,r22,1
   30140:	0009883a 	mov	r4,zero
   30144:	10e4b03a 	or	r18,r2,r3
   30148:	003ea306 	br	2fbd8 <__alt_data_end+0xffff0008>
   3014c:	0007883a 	mov	r3,zero
   30150:	1820927a 	slli	r16,r3,9
   30154:	1806977a 	slli	r3,r3,29
   30158:	8020d33a 	srli	r16,r16,12
   3015c:	003ff606 	br	30138 <__alt_data_end+0xffff0568>
   30160:	110003cc 	andi	r4,r2,15
   30164:	00c00104 	movi	r3,4
   30168:	20fff826 	beq	r4,r3,3014c <__alt_data_end+0xffff057c>
   3016c:	0007883a 	mov	r3,zero
   30170:	003fd906 	br	300d8 <__alt_data_end+0xffff0508>
   30174:	0005883a 	mov	r2,zero
   30178:	003fe906 	br	30120 <__alt_data_end+0xffff0550>
   3017c:	00800434 	movhi	r2,16
   30180:	84000234 	orhi	r16,r16,8
   30184:	10bfffc4 	addi	r2,r2,-1
   30188:	e4c0004c 	andi	r19,fp,1
   3018c:	80a0703a 	and	r16,r16,r2
   30190:	003ef606 	br	2fd6c <__alt_data_end+0xffff019c>

00030194 <__subdf3>:
   30194:	00c00434 	movhi	r3,16
   30198:	18ffffc4 	addi	r3,r3,-1
   3019c:	defffb04 	addi	sp,sp,-20
   301a0:	28d2703a 	and	r9,r5,r3
   301a4:	3814d53a 	srli	r10,r7,20
   301a8:	38c6703a 	and	r3,r7,r3
   301ac:	3004d77a 	srli	r2,r6,29
   301b0:	dc800215 	stw	r18,8(sp)
   301b4:	dc000015 	stw	r16,0(sp)
   301b8:	2824d7fa 	srli	r18,r5,31
   301bc:	2820d53a 	srli	r16,r5,20
   301c0:	481290fa 	slli	r9,r9,3
   301c4:	200ad77a 	srli	r5,r4,29
   301c8:	180690fa 	slli	r3,r3,3
   301cc:	dc400115 	stw	r17,4(sp)
   301d0:	dfc00415 	stw	ra,16(sp)
   301d4:	202290fa 	slli	r17,r4,3
   301d8:	dcc00315 	stw	r19,12(sp)
   301dc:	5281ffcc 	andi	r10,r10,2047
   301e0:	0101ffc4 	movi	r4,2047
   301e4:	9011883a 	mov	r8,r18
   301e8:	8401ffcc 	andi	r16,r16,2047
   301ec:	94803fcc 	andi	r18,r18,255
   301f0:	494ab03a 	or	r5,r9,r5
   301f4:	380ed7fa 	srli	r7,r7,31
   301f8:	1886b03a 	or	r3,r3,r2
   301fc:	300c90fa 	slli	r6,r6,3
   30200:	51009026 	beq	r10,r4,30444 <__subdf3+0x2b0>
   30204:	39c0005c 	xori	r7,r7,1
   30208:	8285c83a 	sub	r2,r16,r10
   3020c:	91c06f26 	beq	r18,r7,303cc <__subdf3+0x238>
   30210:	0080b10e 	bge	zero,r2,304d8 <__subdf3+0x344>
   30214:	50002a1e 	bne	r10,zero,302c0 <__subdf3+0x12c>
   30218:	1988b03a 	or	r4,r3,r6
   3021c:	2000941e 	bne	r4,zero,30470 <__subdf3+0x2dc>
   30220:	888001cc 	andi	r2,r17,7
   30224:	10005b26 	beq	r2,zero,30394 <__subdf3+0x200>
   30228:	88c003cc 	andi	r3,r17,15
   3022c:	00800104 	movi	r2,4
   30230:	18805826 	beq	r3,r2,30394 <__subdf3+0x200>
   30234:	88c00104 	addi	r3,r17,4
   30238:	1c63803a 	cmpltu	r17,r3,r17
   3023c:	2c4b883a 	add	r5,r5,r17
   30240:	2880202c 	andhi	r2,r5,128
   30244:	9200004c 	andi	r8,r18,1
   30248:	1823883a 	mov	r17,r3
   3024c:	10005426 	beq	r2,zero,303a0 <__subdf3+0x20c>
   30250:	84000044 	addi	r16,r16,1
   30254:	0081ffc4 	movi	r2,2047
   30258:	8080bf26 	beq	r16,r2,30558 <__subdf3+0x3c4>
   3025c:	013fe034 	movhi	r4,65408
   30260:	213fffc4 	addi	r4,r4,-1
   30264:	290a703a 	and	r5,r5,r4
   30268:	2804977a 	slli	r2,r5,29
   3026c:	280a927a 	slli	r5,r5,9
   30270:	8822d0fa 	srli	r17,r17,3
   30274:	8401ffcc 	andi	r16,r16,2047
   30278:	2808d33a 	srli	r4,r5,12
   3027c:	1444b03a 	or	r2,r2,r17
   30280:	8401ffcc 	andi	r16,r16,2047
   30284:	800a953a 	slli	r5,r16,20
   30288:	40c03fcc 	andi	r3,r8,255
   3028c:	04000434 	movhi	r16,16
   30290:	180697fa 	slli	r3,r3,31
   30294:	843fffc4 	addi	r16,r16,-1
   30298:	2420703a 	and	r16,r4,r16
   3029c:	8160b03a 	or	r16,r16,r5
   302a0:	80c6b03a 	or	r3,r16,r3
   302a4:	dfc00417 	ldw	ra,16(sp)
   302a8:	dcc00317 	ldw	r19,12(sp)
   302ac:	dc800217 	ldw	r18,8(sp)
   302b0:	dc400117 	ldw	r17,4(sp)
   302b4:	dc000017 	ldw	r16,0(sp)
   302b8:	dec00504 	addi	sp,sp,20
   302bc:	f800283a 	ret
   302c0:	0101ffc4 	movi	r4,2047
   302c4:	813fd626 	beq	r16,r4,30220 <__alt_data_end+0xffff0650>
   302c8:	18c02034 	orhi	r3,r3,128
   302cc:	01000e04 	movi	r4,56
   302d0:	2080a416 	blt	r4,r2,30564 <__subdf3+0x3d0>
   302d4:	010007c4 	movi	r4,31
   302d8:	2080c716 	blt	r4,r2,305f8 <__subdf3+0x464>
   302dc:	01000804 	movi	r4,32
   302e0:	2089c83a 	sub	r4,r4,r2
   302e4:	1910983a 	sll	r8,r3,r4
   302e8:	308ed83a 	srl	r7,r6,r2
   302ec:	3108983a 	sll	r4,r6,r4
   302f0:	1884d83a 	srl	r2,r3,r2
   302f4:	41ccb03a 	or	r6,r8,r7
   302f8:	2008c03a 	cmpne	r4,r4,zero
   302fc:	310cb03a 	or	r6,r6,r4
   30300:	898dc83a 	sub	r6,r17,r6
   30304:	89a3803a 	cmpltu	r17,r17,r6
   30308:	288bc83a 	sub	r5,r5,r2
   3030c:	2c4bc83a 	sub	r5,r5,r17
   30310:	3023883a 	mov	r17,r6
   30314:	2880202c 	andhi	r2,r5,128
   30318:	10006b26 	beq	r2,zero,304c8 <__subdf3+0x334>
   3031c:	04c02034 	movhi	r19,128
   30320:	9cffffc4 	addi	r19,r19,-1
   30324:	2ce6703a 	and	r19,r5,r19
   30328:	98007c26 	beq	r19,zero,3051c <__subdf3+0x388>
   3032c:	9809883a 	mov	r4,r19
   30330:	0030c600 	call	30c60 <__clzsi2>
   30334:	10fffe04 	addi	r3,r2,-8
   30338:	010007c4 	movi	r4,31
   3033c:	20c07d16 	blt	r4,r3,30534 <__subdf3+0x3a0>
   30340:	01400a04 	movi	r5,40
   30344:	2885c83a 	sub	r2,r5,r2
   30348:	888ad83a 	srl	r5,r17,r2
   3034c:	98e6983a 	sll	r19,r19,r3
   30350:	88e2983a 	sll	r17,r17,r3
   30354:	2ce6b03a 	or	r19,r5,r19
   30358:	1c007a16 	blt	r3,r16,30544 <__subdf3+0x3b0>
   3035c:	1c21c83a 	sub	r16,r3,r16
   30360:	81400044 	addi	r5,r16,1
   30364:	00c007c4 	movi	r3,31
   30368:	19409616 	blt	r3,r5,305c4 <__subdf3+0x430>
   3036c:	1c21c83a 	sub	r16,r3,r16
   30370:	8c08983a 	sll	r4,r17,r16
   30374:	8946d83a 	srl	r3,r17,r5
   30378:	9c20983a 	sll	r16,r19,r16
   3037c:	2008c03a 	cmpne	r4,r4,zero
   30380:	994ad83a 	srl	r5,r19,r5
   30384:	1c06b03a 	or	r3,r3,r16
   30388:	1922b03a 	or	r17,r3,r4
   3038c:	0021883a 	mov	r16,zero
   30390:	003fa306 	br	30220 <__alt_data_end+0xffff0650>
   30394:	2880202c 	andhi	r2,r5,128
   30398:	9200004c 	andi	r8,r18,1
   3039c:	103fac1e 	bne	r2,zero,30250 <__alt_data_end+0xffff0680>
   303a0:	2804977a 	slli	r2,r5,29
   303a4:	8822d0fa 	srli	r17,r17,3
   303a8:	00c1ffc4 	movi	r3,2047
   303ac:	280ad0fa 	srli	r5,r5,3
   303b0:	1444b03a 	or	r2,r2,r17
   303b4:	80c02726 	beq	r16,r3,30454 <__subdf3+0x2c0>
   303b8:	01000434 	movhi	r4,16
   303bc:	213fffc4 	addi	r4,r4,-1
   303c0:	80e0703a 	and	r16,r16,r3
   303c4:	2908703a 	and	r4,r5,r4
   303c8:	003fad06 	br	30280 <__alt_data_end+0xffff06b0>
   303cc:	0080690e 	bge	zero,r2,30574 <__subdf3+0x3e0>
   303d0:	50002f26 	beq	r10,zero,30490 <__subdf3+0x2fc>
   303d4:	0101ffc4 	movi	r4,2047
   303d8:	813f9126 	beq	r16,r4,30220 <__alt_data_end+0xffff0650>
   303dc:	18c02034 	orhi	r3,r3,128
   303e0:	01000e04 	movi	r4,56
   303e4:	2080b00e 	bge	r4,r2,306a8 <__subdf3+0x514>
   303e8:	198cb03a 	or	r6,r3,r6
   303ec:	300ec03a 	cmpne	r7,r6,zero
   303f0:	0005883a 	mov	r2,zero
   303f4:	3c4f883a 	add	r7,r7,r17
   303f8:	3c63803a 	cmpltu	r17,r7,r17
   303fc:	114b883a 	add	r5,r2,r5
   30400:	2c4b883a 	add	r5,r5,r17
   30404:	3823883a 	mov	r17,r7
   30408:	2880202c 	andhi	r2,r5,128
   3040c:	10002e26 	beq	r2,zero,304c8 <__subdf3+0x334>
   30410:	84000044 	addi	r16,r16,1
   30414:	0081ffc4 	movi	r2,2047
   30418:	8080de26 	beq	r16,r2,30794 <__subdf3+0x600>
   3041c:	00bfe034 	movhi	r2,65408
   30420:	10bfffc4 	addi	r2,r2,-1
   30424:	288a703a 	and	r5,r5,r2
   30428:	880cd07a 	srli	r6,r17,1
   3042c:	280897fa 	slli	r4,r5,31
   30430:	88c0004c 	andi	r3,r17,1
   30434:	30e2b03a 	or	r17,r6,r3
   30438:	280ad07a 	srli	r5,r5,1
   3043c:	8922b03a 	or	r17,r17,r4
   30440:	003f7706 	br	30220 <__alt_data_end+0xffff0650>
   30444:	1984b03a 	or	r2,r3,r6
   30448:	103f6e26 	beq	r2,zero,30204 <__alt_data_end+0xffff0634>
   3044c:	39c03fcc 	andi	r7,r7,255
   30450:	003f6d06 	br	30208 <__alt_data_end+0xffff0638>
   30454:	1146b03a 	or	r3,r2,r5
   30458:	18003f26 	beq	r3,zero,30558 <__subdf3+0x3c4>
   3045c:	00c00434 	movhi	r3,16
   30460:	29000234 	orhi	r4,r5,8
   30464:	18ffffc4 	addi	r3,r3,-1
   30468:	20c8703a 	and	r4,r4,r3
   3046c:	003f8406 	br	30280 <__alt_data_end+0xffff06b0>
   30470:	10bfffc4 	addi	r2,r2,-1
   30474:	1000501e 	bne	r2,zero,305b8 <__subdf3+0x424>
   30478:	898fc83a 	sub	r7,r17,r6
   3047c:	89e3803a 	cmpltu	r17,r17,r7
   30480:	28cbc83a 	sub	r5,r5,r3
   30484:	2c4bc83a 	sub	r5,r5,r17
   30488:	3823883a 	mov	r17,r7
   3048c:	003fa106 	br	30314 <__alt_data_end+0xffff0744>
   30490:	1988b03a 	or	r4,r3,r6
   30494:	203f6226 	beq	r4,zero,30220 <__alt_data_end+0xffff0650>
   30498:	10bfffc4 	addi	r2,r2,-1
   3049c:	10009b1e 	bne	r2,zero,3070c <__subdf3+0x578>
   304a0:	344d883a 	add	r6,r6,r17
   304a4:	3463803a 	cmpltu	r17,r6,r17
   304a8:	194b883a 	add	r5,r3,r5
   304ac:	2c4b883a 	add	r5,r5,r17
   304b0:	3023883a 	mov	r17,r6
   304b4:	003fd406 	br	30408 <__alt_data_end+0xffff0838>
   304b8:	1106b03a 	or	r3,r2,r4
   304bc:	1800b426 	beq	r3,zero,30790 <__subdf3+0x5fc>
   304c0:	100b883a 	mov	r5,r2
   304c4:	2023883a 	mov	r17,r4
   304c8:	888001cc 	andi	r2,r17,7
   304cc:	103f561e 	bne	r2,zero,30228 <__alt_data_end+0xffff0658>
   304d0:	9200004c 	andi	r8,r18,1
   304d4:	003fb206 	br	303a0 <__alt_data_end+0xffff07d0>
   304d8:	1000531e 	bne	r2,zero,30628 <__subdf3+0x494>
   304dc:	80800044 	addi	r2,r16,1
   304e0:	1081ffcc 	andi	r2,r2,2047
   304e4:	01000044 	movi	r4,1
   304e8:	2080a00e 	bge	r4,r2,3076c <__subdf3+0x5d8>
   304ec:	8985c83a 	sub	r2,r17,r6
   304f0:	8889803a 	cmpltu	r4,r17,r2
   304f4:	28e7c83a 	sub	r19,r5,r3
   304f8:	9927c83a 	sub	r19,r19,r4
   304fc:	9900202c 	andhi	r4,r19,128
   30500:	20006226 	beq	r4,zero,3068c <__subdf3+0x4f8>
   30504:	3463c83a 	sub	r17,r6,r17
   30508:	194bc83a 	sub	r5,r3,r5
   3050c:	344d803a 	cmpltu	r6,r6,r17
   30510:	29a7c83a 	sub	r19,r5,r6
   30514:	3825883a 	mov	r18,r7
   30518:	983f841e 	bne	r19,zero,3032c <__alt_data_end+0xffff075c>
   3051c:	8809883a 	mov	r4,r17
   30520:	0030c600 	call	30c60 <__clzsi2>
   30524:	10800804 	addi	r2,r2,32
   30528:	10fffe04 	addi	r3,r2,-8
   3052c:	010007c4 	movi	r4,31
   30530:	20ff830e 	bge	r4,r3,30340 <__alt_data_end+0xffff0770>
   30534:	14fff604 	addi	r19,r2,-40
   30538:	8ce6983a 	sll	r19,r17,r19
   3053c:	0023883a 	mov	r17,zero
   30540:	1c3f860e 	bge	r3,r16,3035c <__alt_data_end+0xffff078c>
   30544:	017fe034 	movhi	r5,65408
   30548:	297fffc4 	addi	r5,r5,-1
   3054c:	80e1c83a 	sub	r16,r16,r3
   30550:	994a703a 	and	r5,r19,r5
   30554:	003f3206 	br	30220 <__alt_data_end+0xffff0650>
   30558:	0009883a 	mov	r4,zero
   3055c:	0005883a 	mov	r2,zero
   30560:	003f4706 	br	30280 <__alt_data_end+0xffff06b0>
   30564:	198cb03a 	or	r6,r3,r6
   30568:	300cc03a 	cmpne	r6,r6,zero
   3056c:	0005883a 	mov	r2,zero
   30570:	003f6306 	br	30300 <__alt_data_end+0xffff0730>
   30574:	10009d1e 	bne	r2,zero,307ec <__subdf3+0x658>
   30578:	81c00044 	addi	r7,r16,1
   3057c:	3881ffcc 	andi	r2,r7,2047
   30580:	02400044 	movi	r9,1
   30584:	4880680e 	bge	r9,r2,30728 <__subdf3+0x594>
   30588:	0081ffc4 	movi	r2,2047
   3058c:	3880ae26 	beq	r7,r2,30848 <__subdf3+0x6b4>
   30590:	344d883a 	add	r6,r6,r17
   30594:	3463803a 	cmpltu	r17,r6,r17
   30598:	194b883a 	add	r5,r3,r5
   3059c:	2c4b883a 	add	r5,r5,r17
   305a0:	282297fa 	slli	r17,r5,31
   305a4:	300cd07a 	srli	r6,r6,1
   305a8:	280ad07a 	srli	r5,r5,1
   305ac:	3821883a 	mov	r16,r7
   305b0:	89a2b03a 	or	r17,r17,r6
   305b4:	003f1a06 	br	30220 <__alt_data_end+0xffff0650>
   305b8:	0101ffc4 	movi	r4,2047
   305bc:	813f431e 	bne	r16,r4,302cc <__alt_data_end+0xffff06fc>
   305c0:	003f1706 	br	30220 <__alt_data_end+0xffff0650>
   305c4:	80bff844 	addi	r2,r16,-31
   305c8:	00c00804 	movi	r3,32
   305cc:	9884d83a 	srl	r2,r19,r2
   305d0:	28c05126 	beq	r5,r3,30718 <__subdf3+0x584>
   305d4:	00c00fc4 	movi	r3,63
   305d8:	1c21c83a 	sub	r16,r3,r16
   305dc:	9c26983a 	sll	r19,r19,r16
   305e0:	9c62b03a 	or	r17,r19,r17
   305e4:	8822c03a 	cmpne	r17,r17,zero
   305e8:	88a2b03a 	or	r17,r17,r2
   305ec:	000b883a 	mov	r5,zero
   305f0:	0021883a 	mov	r16,zero
   305f4:	003fb406 	br	304c8 <__alt_data_end+0xffff08f8>
   305f8:	113ff804 	addi	r4,r2,-32
   305fc:	01c00804 	movi	r7,32
   30600:	1908d83a 	srl	r4,r3,r4
   30604:	11c04626 	beq	r2,r7,30720 <__subdf3+0x58c>
   30608:	01c01004 	movi	r7,64
   3060c:	3885c83a 	sub	r2,r7,r2
   30610:	1884983a 	sll	r2,r3,r2
   30614:	118cb03a 	or	r6,r2,r6
   30618:	300cc03a 	cmpne	r6,r6,zero
   3061c:	310cb03a 	or	r6,r6,r4
   30620:	0005883a 	mov	r2,zero
   30624:	003f3606 	br	30300 <__alt_data_end+0xffff0730>
   30628:	80002b26 	beq	r16,zero,306d8 <__subdf3+0x544>
   3062c:	0101ffc4 	movi	r4,2047
   30630:	51006926 	beq	r10,r4,307d8 <__subdf3+0x644>
   30634:	0085c83a 	sub	r2,zero,r2
   30638:	29402034 	orhi	r5,r5,128
   3063c:	01000e04 	movi	r4,56
   30640:	20807d16 	blt	r4,r2,30838 <__subdf3+0x6a4>
   30644:	010007c4 	movi	r4,31
   30648:	2080d916 	blt	r4,r2,309b0 <__subdf3+0x81c>
   3064c:	01000804 	movi	r4,32
   30650:	2089c83a 	sub	r4,r4,r2
   30654:	2912983a 	sll	r9,r5,r4
   30658:	8890d83a 	srl	r8,r17,r2
   3065c:	8908983a 	sll	r4,r17,r4
   30660:	2884d83a 	srl	r2,r5,r2
   30664:	4a22b03a 	or	r17,r9,r8
   30668:	2008c03a 	cmpne	r4,r4,zero
   3066c:	8922b03a 	or	r17,r17,r4
   30670:	3463c83a 	sub	r17,r6,r17
   30674:	1885c83a 	sub	r2,r3,r2
   30678:	344d803a 	cmpltu	r6,r6,r17
   3067c:	118bc83a 	sub	r5,r2,r6
   30680:	5021883a 	mov	r16,r10
   30684:	3825883a 	mov	r18,r7
   30688:	003f2206 	br	30314 <__alt_data_end+0xffff0744>
   3068c:	9886b03a 	or	r3,r19,r2
   30690:	18001c1e 	bne	r3,zero,30704 <__subdf3+0x570>
   30694:	0011883a 	mov	r8,zero
   30698:	000b883a 	mov	r5,zero
   3069c:	0023883a 	mov	r17,zero
   306a0:	0021883a 	mov	r16,zero
   306a4:	003f3e06 	br	303a0 <__alt_data_end+0xffff07d0>
   306a8:	010007c4 	movi	r4,31
   306ac:	20803c16 	blt	r4,r2,307a0 <__subdf3+0x60c>
   306b0:	01000804 	movi	r4,32
   306b4:	2089c83a 	sub	r4,r4,r2
   306b8:	1912983a 	sll	r9,r3,r4
   306bc:	308ed83a 	srl	r7,r6,r2
   306c0:	3108983a 	sll	r4,r6,r4
   306c4:	1884d83a 	srl	r2,r3,r2
   306c8:	49ceb03a 	or	r7,r9,r7
   306cc:	2008c03a 	cmpne	r4,r4,zero
   306d0:	390eb03a 	or	r7,r7,r4
   306d4:	003f4706 	br	303f4 <__alt_data_end+0xffff0824>
   306d8:	2c48b03a 	or	r4,r5,r17
   306dc:	20003e26 	beq	r4,zero,307d8 <__subdf3+0x644>
   306e0:	0084303a 	nor	r2,zero,r2
   306e4:	10003a1e 	bne	r2,zero,307d0 <__subdf3+0x63c>
   306e8:	3463c83a 	sub	r17,r6,r17
   306ec:	194bc83a 	sub	r5,r3,r5
   306f0:	344d803a 	cmpltu	r6,r6,r17
   306f4:	298bc83a 	sub	r5,r5,r6
   306f8:	5021883a 	mov	r16,r10
   306fc:	3825883a 	mov	r18,r7
   30700:	003f0406 	br	30314 <__alt_data_end+0xffff0744>
   30704:	1023883a 	mov	r17,r2
   30708:	003f0706 	br	30328 <__alt_data_end+0xffff0758>
   3070c:	0101ffc4 	movi	r4,2047
   30710:	813f331e 	bne	r16,r4,303e0 <__alt_data_end+0xffff0810>
   30714:	003ec206 	br	30220 <__alt_data_end+0xffff0650>
   30718:	0027883a 	mov	r19,zero
   3071c:	003fb006 	br	305e0 <__alt_data_end+0xffff0a10>
   30720:	0005883a 	mov	r2,zero
   30724:	003fbb06 	br	30614 <__alt_data_end+0xffff0a44>
   30728:	2c44b03a 	or	r2,r5,r17
   3072c:	80008b1e 	bne	r16,zero,3095c <__subdf3+0x7c8>
   30730:	1000b526 	beq	r2,zero,30a08 <__subdf3+0x874>
   30734:	1984b03a 	or	r2,r3,r6
   30738:	103eb926 	beq	r2,zero,30220 <__alt_data_end+0xffff0650>
   3073c:	3449883a 	add	r4,r6,r17
   30740:	2463803a 	cmpltu	r17,r4,r17
   30744:	194b883a 	add	r5,r3,r5
   30748:	2c4b883a 	add	r5,r5,r17
   3074c:	2880202c 	andhi	r2,r5,128
   30750:	2023883a 	mov	r17,r4
   30754:	103f5c26 	beq	r2,zero,304c8 <__alt_data_end+0xffff08f8>
   30758:	00bfe034 	movhi	r2,65408
   3075c:	10bfffc4 	addi	r2,r2,-1
   30760:	4821883a 	mov	r16,r9
   30764:	288a703a 	and	r5,r5,r2
   30768:	003ead06 	br	30220 <__alt_data_end+0xffff0650>
   3076c:	2c44b03a 	or	r2,r5,r17
   30770:	8000291e 	bne	r16,zero,30818 <__subdf3+0x684>
   30774:	10004f1e 	bne	r2,zero,308b4 <__subdf3+0x720>
   30778:	1984b03a 	or	r2,r3,r6
   3077c:	10000426 	beq	r2,zero,30790 <__subdf3+0x5fc>
   30780:	180b883a 	mov	r5,r3
   30784:	3023883a 	mov	r17,r6
   30788:	3825883a 	mov	r18,r7
   3078c:	003ea406 	br	30220 <__alt_data_end+0xffff0650>
   30790:	0011883a 	mov	r8,zero
   30794:	000b883a 	mov	r5,zero
   30798:	0023883a 	mov	r17,zero
   3079c:	003f0006 	br	303a0 <__alt_data_end+0xffff07d0>
   307a0:	11fff804 	addi	r7,r2,-32
   307a4:	19c8d83a 	srl	r4,r3,r7
   307a8:	01c00804 	movi	r7,32
   307ac:	11c07e26 	beq	r2,r7,309a8 <__subdf3+0x814>
   307b0:	01c01004 	movi	r7,64
   307b4:	3885c83a 	sub	r2,r7,r2
   307b8:	1884983a 	sll	r2,r3,r2
   307bc:	118cb03a 	or	r6,r2,r6
   307c0:	300ec03a 	cmpne	r7,r6,zero
   307c4:	390eb03a 	or	r7,r7,r4
   307c8:	0005883a 	mov	r2,zero
   307cc:	003f0906 	br	303f4 <__alt_data_end+0xffff0824>
   307d0:	0101ffc4 	movi	r4,2047
   307d4:	513f991e 	bne	r10,r4,3063c <__alt_data_end+0xffff0a6c>
   307d8:	180b883a 	mov	r5,r3
   307dc:	3023883a 	mov	r17,r6
   307e0:	5021883a 	mov	r16,r10
   307e4:	3825883a 	mov	r18,r7
   307e8:	003e8d06 	br	30220 <__alt_data_end+0xffff0650>
   307ec:	80001a1e 	bne	r16,zero,30858 <__subdf3+0x6c4>
   307f0:	2c48b03a 	or	r4,r5,r17
   307f4:	20005526 	beq	r4,zero,3094c <__subdf3+0x7b8>
   307f8:	0084303a 	nor	r2,zero,r2
   307fc:	1000511e 	bne	r2,zero,30944 <__subdf3+0x7b0>
   30800:	89a3883a 	add	r17,r17,r6
   30804:	194b883a 	add	r5,r3,r5
   30808:	898d803a 	cmpltu	r6,r17,r6
   3080c:	298b883a 	add	r5,r5,r6
   30810:	5021883a 	mov	r16,r10
   30814:	003efc06 	br	30408 <__alt_data_end+0xffff0838>
   30818:	1000341e 	bne	r2,zero,308ec <__subdf3+0x758>
   3081c:	1984b03a 	or	r2,r3,r6
   30820:	10006f26 	beq	r2,zero,309e0 <__subdf3+0x84c>
   30824:	180b883a 	mov	r5,r3
   30828:	3023883a 	mov	r17,r6
   3082c:	3825883a 	mov	r18,r7
   30830:	0401ffc4 	movi	r16,2047
   30834:	003e7a06 	br	30220 <__alt_data_end+0xffff0650>
   30838:	2c62b03a 	or	r17,r5,r17
   3083c:	8822c03a 	cmpne	r17,r17,zero
   30840:	0005883a 	mov	r2,zero
   30844:	003f8a06 	br	30670 <__alt_data_end+0xffff0aa0>
   30848:	3821883a 	mov	r16,r7
   3084c:	000b883a 	mov	r5,zero
   30850:	0023883a 	mov	r17,zero
   30854:	003ed206 	br	303a0 <__alt_data_end+0xffff07d0>
   30858:	0101ffc4 	movi	r4,2047
   3085c:	51003b26 	beq	r10,r4,3094c <__subdf3+0x7b8>
   30860:	0085c83a 	sub	r2,zero,r2
   30864:	29402034 	orhi	r5,r5,128
   30868:	01000e04 	movi	r4,56
   3086c:	20806216 	blt	r4,r2,309f8 <__subdf3+0x864>
   30870:	010007c4 	movi	r4,31
   30874:	20806b16 	blt	r4,r2,30a24 <__subdf3+0x890>
   30878:	01000804 	movi	r4,32
   3087c:	2089c83a 	sub	r4,r4,r2
   30880:	2912983a 	sll	r9,r5,r4
   30884:	888ed83a 	srl	r7,r17,r2
   30888:	8908983a 	sll	r4,r17,r4
   3088c:	2884d83a 	srl	r2,r5,r2
   30890:	49e2b03a 	or	r17,r9,r7
   30894:	2008c03a 	cmpne	r4,r4,zero
   30898:	8922b03a 	or	r17,r17,r4
   3089c:	89a3883a 	add	r17,r17,r6
   308a0:	10c5883a 	add	r2,r2,r3
   308a4:	898d803a 	cmpltu	r6,r17,r6
   308a8:	118b883a 	add	r5,r2,r6
   308ac:	5021883a 	mov	r16,r10
   308b0:	003ed506 	br	30408 <__alt_data_end+0xffff0838>
   308b4:	1984b03a 	or	r2,r3,r6
   308b8:	103e5926 	beq	r2,zero,30220 <__alt_data_end+0xffff0650>
   308bc:	8989c83a 	sub	r4,r17,r6
   308c0:	8911803a 	cmpltu	r8,r17,r4
   308c4:	28c5c83a 	sub	r2,r5,r3
   308c8:	1205c83a 	sub	r2,r2,r8
   308cc:	1200202c 	andhi	r8,r2,128
   308d0:	403ef926 	beq	r8,zero,304b8 <__alt_data_end+0xffff08e8>
   308d4:	3463c83a 	sub	r17,r6,r17
   308d8:	194bc83a 	sub	r5,r3,r5
   308dc:	344d803a 	cmpltu	r6,r6,r17
   308e0:	298bc83a 	sub	r5,r5,r6
   308e4:	3825883a 	mov	r18,r7
   308e8:	003e4d06 	br	30220 <__alt_data_end+0xffff0650>
   308ec:	1984b03a 	or	r2,r3,r6
   308f0:	10002b26 	beq	r2,zero,309a0 <__subdf3+0x80c>
   308f4:	2808d0fa 	srli	r4,r5,3
   308f8:	8822d0fa 	srli	r17,r17,3
   308fc:	280a977a 	slli	r5,r5,29
   30900:	2080022c 	andhi	r2,r4,8
   30904:	2c62b03a 	or	r17,r5,r17
   30908:	10000826 	beq	r2,zero,3092c <__subdf3+0x798>
   3090c:	1810d0fa 	srli	r8,r3,3
   30910:	4080022c 	andhi	r2,r8,8
   30914:	1000051e 	bne	r2,zero,3092c <__subdf3+0x798>
   30918:	300cd0fa 	srli	r6,r6,3
   3091c:	1804977a 	slli	r2,r3,29
   30920:	4009883a 	mov	r4,r8
   30924:	3825883a 	mov	r18,r7
   30928:	11a2b03a 	or	r17,r2,r6
   3092c:	880ad77a 	srli	r5,r17,29
   30930:	200890fa 	slli	r4,r4,3
   30934:	882290fa 	slli	r17,r17,3
   30938:	0401ffc4 	movi	r16,2047
   3093c:	290ab03a 	or	r5,r5,r4
   30940:	003e3706 	br	30220 <__alt_data_end+0xffff0650>
   30944:	0101ffc4 	movi	r4,2047
   30948:	513fc71e 	bne	r10,r4,30868 <__alt_data_end+0xffff0c98>
   3094c:	180b883a 	mov	r5,r3
   30950:	3023883a 	mov	r17,r6
   30954:	5021883a 	mov	r16,r10
   30958:	003e3106 	br	30220 <__alt_data_end+0xffff0650>
   3095c:	10002d26 	beq	r2,zero,30a14 <__subdf3+0x880>
   30960:	1984b03a 	or	r2,r3,r6
   30964:	10000e26 	beq	r2,zero,309a0 <__subdf3+0x80c>
   30968:	2808d0fa 	srli	r4,r5,3
   3096c:	8822d0fa 	srli	r17,r17,3
   30970:	280a977a 	slli	r5,r5,29
   30974:	2080022c 	andhi	r2,r4,8
   30978:	2c62b03a 	or	r17,r5,r17
   3097c:	103feb26 	beq	r2,zero,3092c <__alt_data_end+0xffff0d5c>
   30980:	180ed0fa 	srli	r7,r3,3
   30984:	3880022c 	andhi	r2,r7,8
   30988:	103fe81e 	bne	r2,zero,3092c <__alt_data_end+0xffff0d5c>
   3098c:	300cd0fa 	srli	r6,r6,3
   30990:	1804977a 	slli	r2,r3,29
   30994:	3809883a 	mov	r4,r7
   30998:	11a2b03a 	or	r17,r2,r6
   3099c:	003fe306 	br	3092c <__alt_data_end+0xffff0d5c>
   309a0:	0401ffc4 	movi	r16,2047
   309a4:	003e1e06 	br	30220 <__alt_data_end+0xffff0650>
   309a8:	0005883a 	mov	r2,zero
   309ac:	003f8306 	br	307bc <__alt_data_end+0xffff0bec>
   309b0:	113ff804 	addi	r4,r2,-32
   309b4:	02000804 	movi	r8,32
   309b8:	2908d83a 	srl	r4,r5,r4
   309bc:	12002526 	beq	r2,r8,30a54 <__subdf3+0x8c0>
   309c0:	02001004 	movi	r8,64
   309c4:	4085c83a 	sub	r2,r8,r2
   309c8:	288a983a 	sll	r5,r5,r2
   309cc:	2c62b03a 	or	r17,r5,r17
   309d0:	8822c03a 	cmpne	r17,r17,zero
   309d4:	8922b03a 	or	r17,r17,r4
   309d8:	0005883a 	mov	r2,zero
   309dc:	003f2406 	br	30670 <__alt_data_end+0xffff0aa0>
   309e0:	01402034 	movhi	r5,128
   309e4:	0011883a 	mov	r8,zero
   309e8:	297fffc4 	addi	r5,r5,-1
   309ec:	047ffe04 	movi	r17,-8
   309f0:	0401ffc4 	movi	r16,2047
   309f4:	003e6a06 	br	303a0 <__alt_data_end+0xffff07d0>
   309f8:	2c62b03a 	or	r17,r5,r17
   309fc:	8822c03a 	cmpne	r17,r17,zero
   30a00:	0005883a 	mov	r2,zero
   30a04:	003fa506 	br	3089c <__alt_data_end+0xffff0ccc>
   30a08:	180b883a 	mov	r5,r3
   30a0c:	3023883a 	mov	r17,r6
   30a10:	003e0306 	br	30220 <__alt_data_end+0xffff0650>
   30a14:	180b883a 	mov	r5,r3
   30a18:	3023883a 	mov	r17,r6
   30a1c:	0401ffc4 	movi	r16,2047
   30a20:	003dff06 	br	30220 <__alt_data_end+0xffff0650>
   30a24:	113ff804 	addi	r4,r2,-32
   30a28:	01c00804 	movi	r7,32
   30a2c:	2908d83a 	srl	r4,r5,r4
   30a30:	11c00a26 	beq	r2,r7,30a5c <__subdf3+0x8c8>
   30a34:	01c01004 	movi	r7,64
   30a38:	3885c83a 	sub	r2,r7,r2
   30a3c:	288a983a 	sll	r5,r5,r2
   30a40:	2c62b03a 	or	r17,r5,r17
   30a44:	8822c03a 	cmpne	r17,r17,zero
   30a48:	8922b03a 	or	r17,r17,r4
   30a4c:	0005883a 	mov	r2,zero
   30a50:	003f9206 	br	3089c <__alt_data_end+0xffff0ccc>
   30a54:	000b883a 	mov	r5,zero
   30a58:	003fdc06 	br	309cc <__alt_data_end+0xffff0dfc>
   30a5c:	000b883a 	mov	r5,zero
   30a60:	003ff706 	br	30a40 <__alt_data_end+0xffff0e70>

00030a64 <__fixdfsi>:
   30a64:	2806d53a 	srli	r3,r5,20
   30a68:	00800434 	movhi	r2,16
   30a6c:	10bfffc4 	addi	r2,r2,-1
   30a70:	18c1ffcc 	andi	r3,r3,2047
   30a74:	0180ff84 	movi	r6,1022
   30a78:	2884703a 	and	r2,r5,r2
   30a7c:	280ad7fa 	srli	r5,r5,31
   30a80:	30c0130e 	bge	r6,r3,30ad0 <__fixdfsi+0x6c>
   30a84:	01810744 	movi	r6,1053
   30a88:	30c00d16 	blt	r6,r3,30ac0 <__fixdfsi+0x5c>
   30a8c:	01810cc4 	movi	r6,1075
   30a90:	30cdc83a 	sub	r6,r6,r3
   30a94:	01c007c4 	movi	r7,31
   30a98:	10800434 	orhi	r2,r2,16
   30a9c:	39800e0e 	bge	r7,r6,30ad8 <__fixdfsi+0x74>
   30aa0:	010104c4 	movi	r4,1043
   30aa4:	20c7c83a 	sub	r3,r4,r3
   30aa8:	10c6d83a 	srl	r3,r2,r3
   30aac:	29403fcc 	andi	r5,r5,255
   30ab0:	0145c83a 	sub	r2,zero,r5
   30ab4:	1884f03a 	xor	r2,r3,r2
   30ab8:	1145883a 	add	r2,r2,r5
   30abc:	f800283a 	ret
   30ac0:	00a00034 	movhi	r2,32768
   30ac4:	10bfffc4 	addi	r2,r2,-1
   30ac8:	2885883a 	add	r2,r5,r2
   30acc:	f800283a 	ret
   30ad0:	0005883a 	mov	r2,zero
   30ad4:	f800283a 	ret
   30ad8:	18fefb44 	addi	r3,r3,-1043
   30adc:	2188d83a 	srl	r4,r4,r6
   30ae0:	10c6983a 	sll	r3,r2,r3
   30ae4:	20c6b03a 	or	r3,r4,r3
   30ae8:	003ff006 	br	30aac <__alt_data_end+0xffff0edc>

00030aec <__floatsidf>:
   30aec:	defffd04 	addi	sp,sp,-12
   30af0:	dc400115 	stw	r17,4(sp)
   30af4:	dfc00215 	stw	ra,8(sp)
   30af8:	dc000015 	stw	r16,0(sp)
   30afc:	2023883a 	mov	r17,r4
   30b00:	20001426 	beq	r4,zero,30b54 <__floatsidf+0x68>
   30b04:	2020d7fa 	srli	r16,r4,31
   30b08:	80000126 	beq	r16,zero,30b10 <__floatsidf+0x24>
   30b0c:	0123c83a 	sub	r17,zero,r4
   30b10:	8809883a 	mov	r4,r17
   30b14:	0030c600 	call	30c60 <__clzsi2>
   30b18:	01410784 	movi	r5,1054
   30b1c:	00c00284 	movi	r3,10
   30b20:	288bc83a 	sub	r5,r5,r2
   30b24:	18801c16 	blt	r3,r2,30b98 <__floatsidf+0xac>
   30b28:	00c002c4 	movi	r3,11
   30b2c:	1887c83a 	sub	r3,r3,r2
   30b30:	88c8d83a 	srl	r4,r17,r3
   30b34:	00c00434 	movhi	r3,16
   30b38:	18ffffc4 	addi	r3,r3,-1
   30b3c:	10800544 	addi	r2,r2,21
   30b40:	20c8703a 	and	r4,r4,r3
   30b44:	8884983a 	sll	r2,r17,r2
   30b48:	28c1ffcc 	andi	r3,r5,2047
   30b4c:	800d883a 	mov	r6,r16
   30b50:	00000406 	br	30b64 <__floatsidf+0x78>
   30b54:	000d883a 	mov	r6,zero
   30b58:	0007883a 	mov	r3,zero
   30b5c:	0009883a 	mov	r4,zero
   30b60:	0005883a 	mov	r2,zero
   30b64:	180a953a 	slli	r5,r3,20
   30b68:	31803fcc 	andi	r6,r6,255
   30b6c:	00c00434 	movhi	r3,16
   30b70:	300c97fa 	slli	r6,r6,31
   30b74:	18ffffc4 	addi	r3,r3,-1
   30b78:	20c6703a 	and	r3,r4,r3
   30b7c:	1946b03a 	or	r3,r3,r5
   30b80:	1986b03a 	or	r3,r3,r6
   30b84:	dfc00217 	ldw	ra,8(sp)
   30b88:	dc400117 	ldw	r17,4(sp)
   30b8c:	dc000017 	ldw	r16,0(sp)
   30b90:	dec00304 	addi	sp,sp,12
   30b94:	f800283a 	ret
   30b98:	10fffd44 	addi	r3,r2,-11
   30b9c:	88c8983a 	sll	r4,r17,r3
   30ba0:	00800434 	movhi	r2,16
   30ba4:	10bfffc4 	addi	r2,r2,-1
   30ba8:	2088703a 	and	r4,r4,r2
   30bac:	28c1ffcc 	andi	r3,r5,2047
   30bb0:	800d883a 	mov	r6,r16
   30bb4:	0005883a 	mov	r2,zero
   30bb8:	003fea06 	br	30b64 <__alt_data_end+0xffff0f94>

00030bbc <__floatunsidf>:
   30bbc:	defffe04 	addi	sp,sp,-8
   30bc0:	dc000015 	stw	r16,0(sp)
   30bc4:	dfc00115 	stw	ra,4(sp)
   30bc8:	2021883a 	mov	r16,r4
   30bcc:	20001026 	beq	r4,zero,30c10 <__floatunsidf+0x54>
   30bd0:	0030c600 	call	30c60 <__clzsi2>
   30bd4:	01410784 	movi	r5,1054
   30bd8:	100d883a 	mov	r6,r2
   30bdc:	288bc83a 	sub	r5,r5,r2
   30be0:	00800284 	movi	r2,10
   30be4:	11801616 	blt	r2,r6,30c40 <__floatunsidf+0x84>
   30be8:	008002c4 	movi	r2,11
   30bec:	1185c83a 	sub	r2,r2,r6
   30bf0:	8084d83a 	srl	r2,r16,r2
   30bf4:	00c00434 	movhi	r3,16
   30bf8:	31c00544 	addi	r7,r6,21
   30bfc:	18ffffc4 	addi	r3,r3,-1
   30c00:	81e0983a 	sll	r16,r16,r7
   30c04:	10cc703a 	and	r6,r2,r3
   30c08:	2941ffcc 	andi	r5,r5,2047
   30c0c:	00000206 	br	30c18 <__floatunsidf+0x5c>
   30c10:	000b883a 	mov	r5,zero
   30c14:	000d883a 	mov	r6,zero
   30c18:	280a953a 	slli	r5,r5,20
   30c1c:	00c00434 	movhi	r3,16
   30c20:	18ffffc4 	addi	r3,r3,-1
   30c24:	30c6703a 	and	r3,r6,r3
   30c28:	8005883a 	mov	r2,r16
   30c2c:	1946b03a 	or	r3,r3,r5
   30c30:	dfc00117 	ldw	ra,4(sp)
   30c34:	dc000017 	ldw	r16,0(sp)
   30c38:	dec00204 	addi	sp,sp,8
   30c3c:	f800283a 	ret
   30c40:	31bffd44 	addi	r6,r6,-11
   30c44:	818c983a 	sll	r6,r16,r6
   30c48:	00800434 	movhi	r2,16
   30c4c:	10bfffc4 	addi	r2,r2,-1
   30c50:	2941ffcc 	andi	r5,r5,2047
   30c54:	0021883a 	mov	r16,zero
   30c58:	308c703a 	and	r6,r6,r2
   30c5c:	003fee06 	br	30c18 <__alt_data_end+0xffff1048>

00030c60 <__clzsi2>:
   30c60:	00bfffd4 	movui	r2,65535
   30c64:	11000b36 	bltu	r2,r4,30c94 <__clzsi2+0x34>
   30c68:	00803fc4 	movi	r2,255
   30c6c:	1100122e 	bgeu	r2,r4,30cb8 <__clzsi2+0x58>
   30c70:	00c00204 	movi	r3,8
   30c74:	01400604 	movi	r5,24
   30c78:	20c8d83a 	srl	r4,r4,r3
   30c7c:	008000f4 	movhi	r2,3
   30c80:	108e9c04 	addi	r2,r2,14960
   30c84:	1109883a 	add	r4,r2,r4
   30c88:	20800003 	ldbu	r2,0(r4)
   30c8c:	2885c83a 	sub	r2,r5,r2
   30c90:	f800283a 	ret
   30c94:	00804034 	movhi	r2,256
   30c98:	10bfffc4 	addi	r2,r2,-1
   30c9c:	11000336 	bltu	r2,r4,30cac <__clzsi2+0x4c>
   30ca0:	00c00404 	movi	r3,16
   30ca4:	180b883a 	mov	r5,r3
   30ca8:	003ff306 	br	30c78 <__alt_data_end+0xffff10a8>
   30cac:	00c00604 	movi	r3,24
   30cb0:	01400204 	movi	r5,8
   30cb4:	003ff006 	br	30c78 <__alt_data_end+0xffff10a8>
   30cb8:	0007883a 	mov	r3,zero
   30cbc:	01400804 	movi	r5,32
   30cc0:	003fed06 	br	30c78 <__alt_data_end+0xffff10a8>

00030cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30cc4:	defffe04 	addi	sp,sp,-8
   30cc8:	dfc00115 	stw	ra,4(sp)
   30ccc:	df000015 	stw	fp,0(sp)
   30cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30cd4:	008000f4 	movhi	r2,3
   30cd8:	10959d04 	addi	r2,r2,22132
   30cdc:	10800017 	ldw	r2,0(r2)
   30ce0:	10000526 	beq	r2,zero,30cf8 <alt_get_errno+0x34>
   30ce4:	008000f4 	movhi	r2,3
   30ce8:	10959d04 	addi	r2,r2,22132
   30cec:	10800017 	ldw	r2,0(r2)
   30cf0:	103ee83a 	callr	r2
   30cf4:	00000206 	br	30d00 <alt_get_errno+0x3c>
   30cf8:	008000f4 	movhi	r2,3
   30cfc:	109c6904 	addi	r2,r2,29092
}
   30d00:	e037883a 	mov	sp,fp
   30d04:	dfc00117 	ldw	ra,4(sp)
   30d08:	df000017 	ldw	fp,0(sp)
   30d0c:	dec00204 	addi	sp,sp,8
   30d10:	f800283a 	ret

00030d14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   30d14:	defffb04 	addi	sp,sp,-20
   30d18:	dfc00415 	stw	ra,16(sp)
   30d1c:	df000315 	stw	fp,12(sp)
   30d20:	df000304 	addi	fp,sp,12
   30d24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   30d28:	e0bfff17 	ldw	r2,-4(fp)
   30d2c:	10000616 	blt	r2,zero,30d48 <close+0x34>
   30d30:	e0bfff17 	ldw	r2,-4(fp)
   30d34:	10c00324 	muli	r3,r2,12
   30d38:	008000f4 	movhi	r2,3
   30d3c:	10911a04 	addi	r2,r2,17512
   30d40:	1885883a 	add	r2,r3,r2
   30d44:	00000106 	br	30d4c <close+0x38>
   30d48:	0005883a 	mov	r2,zero
   30d4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   30d50:	e0bffd17 	ldw	r2,-12(fp)
   30d54:	10001926 	beq	r2,zero,30dbc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   30d58:	e0bffd17 	ldw	r2,-12(fp)
   30d5c:	10800017 	ldw	r2,0(r2)
   30d60:	10800417 	ldw	r2,16(r2)
   30d64:	10000626 	beq	r2,zero,30d80 <close+0x6c>
   30d68:	e0bffd17 	ldw	r2,-12(fp)
   30d6c:	10800017 	ldw	r2,0(r2)
   30d70:	10800417 	ldw	r2,16(r2)
   30d74:	e13ffd17 	ldw	r4,-12(fp)
   30d78:	103ee83a 	callr	r2
   30d7c:	00000106 	br	30d84 <close+0x70>
   30d80:	0005883a 	mov	r2,zero
   30d84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   30d88:	e13fff17 	ldw	r4,-4(fp)
   30d8c:	00316e00 	call	316e0 <alt_release_fd>
    if (rval < 0)
   30d90:	e0bffe17 	ldw	r2,-8(fp)
   30d94:	1000070e 	bge	r2,zero,30db4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   30d98:	0030cc40 	call	30cc4 <alt_get_errno>
   30d9c:	1007883a 	mov	r3,r2
   30da0:	e0bffe17 	ldw	r2,-8(fp)
   30da4:	0085c83a 	sub	r2,zero,r2
   30da8:	18800015 	stw	r2,0(r3)
      return -1;
   30dac:	00bfffc4 	movi	r2,-1
   30db0:	00000706 	br	30dd0 <close+0xbc>
    }
    return 0;
   30db4:	0005883a 	mov	r2,zero
   30db8:	00000506 	br	30dd0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   30dbc:	0030cc40 	call	30cc4 <alt_get_errno>
   30dc0:	1007883a 	mov	r3,r2
   30dc4:	00801444 	movi	r2,81
   30dc8:	18800015 	stw	r2,0(r3)
    return -1;
   30dcc:	00bfffc4 	movi	r2,-1
  }
}
   30dd0:	e037883a 	mov	sp,fp
   30dd4:	dfc00117 	ldw	ra,4(sp)
   30dd8:	df000017 	ldw	fp,0(sp)
   30ddc:	dec00204 	addi	sp,sp,8
   30de0:	f800283a 	ret

00030de4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   30de4:	defffc04 	addi	sp,sp,-16
   30de8:	df000315 	stw	fp,12(sp)
   30dec:	df000304 	addi	fp,sp,12
   30df0:	e13ffd15 	stw	r4,-12(fp)
   30df4:	e17ffe15 	stw	r5,-8(fp)
   30df8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   30dfc:	e0bfff17 	ldw	r2,-4(fp)
}
   30e00:	e037883a 	mov	sp,fp
   30e04:	df000017 	ldw	fp,0(sp)
   30e08:	dec00104 	addi	sp,sp,4
   30e0c:	f800283a 	ret

00030e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30e10:	defffe04 	addi	sp,sp,-8
   30e14:	dfc00115 	stw	ra,4(sp)
   30e18:	df000015 	stw	fp,0(sp)
   30e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30e20:	008000f4 	movhi	r2,3
   30e24:	10959d04 	addi	r2,r2,22132
   30e28:	10800017 	ldw	r2,0(r2)
   30e2c:	10000526 	beq	r2,zero,30e44 <alt_get_errno+0x34>
   30e30:	008000f4 	movhi	r2,3
   30e34:	10959d04 	addi	r2,r2,22132
   30e38:	10800017 	ldw	r2,0(r2)
   30e3c:	103ee83a 	callr	r2
   30e40:	00000206 	br	30e4c <alt_get_errno+0x3c>
   30e44:	008000f4 	movhi	r2,3
   30e48:	109c6904 	addi	r2,r2,29092
}
   30e4c:	e037883a 	mov	sp,fp
   30e50:	dfc00117 	ldw	ra,4(sp)
   30e54:	df000017 	ldw	fp,0(sp)
   30e58:	dec00204 	addi	sp,sp,8
   30e5c:	f800283a 	ret

00030e60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   30e60:	defffb04 	addi	sp,sp,-20
   30e64:	dfc00415 	stw	ra,16(sp)
   30e68:	df000315 	stw	fp,12(sp)
   30e6c:	df000304 	addi	fp,sp,12
   30e70:	e13ffe15 	stw	r4,-8(fp)
   30e74:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30e78:	e0bffe17 	ldw	r2,-8(fp)
   30e7c:	10000616 	blt	r2,zero,30e98 <fstat+0x38>
   30e80:	e0bffe17 	ldw	r2,-8(fp)
   30e84:	10c00324 	muli	r3,r2,12
   30e88:	008000f4 	movhi	r2,3
   30e8c:	10911a04 	addi	r2,r2,17512
   30e90:	1885883a 	add	r2,r3,r2
   30e94:	00000106 	br	30e9c <fstat+0x3c>
   30e98:	0005883a 	mov	r2,zero
   30e9c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   30ea0:	e0bffd17 	ldw	r2,-12(fp)
   30ea4:	10001026 	beq	r2,zero,30ee8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   30ea8:	e0bffd17 	ldw	r2,-12(fp)
   30eac:	10800017 	ldw	r2,0(r2)
   30eb0:	10800817 	ldw	r2,32(r2)
   30eb4:	10000726 	beq	r2,zero,30ed4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   30eb8:	e0bffd17 	ldw	r2,-12(fp)
   30ebc:	10800017 	ldw	r2,0(r2)
   30ec0:	10800817 	ldw	r2,32(r2)
   30ec4:	e13ffd17 	ldw	r4,-12(fp)
   30ec8:	e17fff17 	ldw	r5,-4(fp)
   30ecc:	103ee83a 	callr	r2
   30ed0:	00000a06 	br	30efc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   30ed4:	e0bfff17 	ldw	r2,-4(fp)
   30ed8:	00c80004 	movi	r3,8192
   30edc:	10c00115 	stw	r3,4(r2)
      return 0;
   30ee0:	0005883a 	mov	r2,zero
   30ee4:	00000506 	br	30efc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   30ee8:	0030e100 	call	30e10 <alt_get_errno>
   30eec:	1007883a 	mov	r3,r2
   30ef0:	00801444 	movi	r2,81
   30ef4:	18800015 	stw	r2,0(r3)
    return -1;
   30ef8:	00bfffc4 	movi	r2,-1
  }
}
   30efc:	e037883a 	mov	sp,fp
   30f00:	dfc00117 	ldw	ra,4(sp)
   30f04:	df000017 	ldw	fp,0(sp)
   30f08:	dec00204 	addi	sp,sp,8
   30f0c:	f800283a 	ret

00030f10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30f10:	defff904 	addi	sp,sp,-28
   30f14:	dfc00615 	stw	ra,24(sp)
   30f18:	df000515 	stw	fp,20(sp)
   30f1c:	df000504 	addi	fp,sp,20
   30f20:	e13ffc15 	stw	r4,-16(fp)
   30f24:	e17ffd15 	stw	r5,-12(fp)
   30f28:	e1bffe15 	stw	r6,-8(fp)
   30f2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30f30:	e0800217 	ldw	r2,8(fp)
   30f34:	d8800015 	stw	r2,0(sp)
   30f38:	e13ffc17 	ldw	r4,-16(fp)
   30f3c:	e17ffd17 	ldw	r5,-12(fp)
   30f40:	e1bffe17 	ldw	r6,-8(fp)
   30f44:	e1ffff17 	ldw	r7,-4(fp)
   30f48:	00310f00 	call	310f0 <alt_iic_isr_register>
}  
   30f4c:	e037883a 	mov	sp,fp
   30f50:	dfc00117 	ldw	ra,4(sp)
   30f54:	df000017 	ldw	fp,0(sp)
   30f58:	dec00204 	addi	sp,sp,8
   30f5c:	f800283a 	ret

00030f60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30f60:	defff904 	addi	sp,sp,-28
   30f64:	df000615 	stw	fp,24(sp)
   30f68:	df000604 	addi	fp,sp,24
   30f6c:	e13ffe15 	stw	r4,-8(fp)
   30f70:	e17fff15 	stw	r5,-4(fp)
   30f74:	e0bfff17 	ldw	r2,-4(fp)
   30f78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30f7c:	0005303a 	rdctl	r2,status
   30f80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30f84:	e0fffb17 	ldw	r3,-20(fp)
   30f88:	00bfff84 	movi	r2,-2
   30f8c:	1884703a 	and	r2,r3,r2
   30f90:	1001703a 	wrctl	status,r2
  
  return context;
   30f94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30f98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   30f9c:	e0bffa17 	ldw	r2,-24(fp)
   30fa0:	00c00044 	movi	r3,1
   30fa4:	1884983a 	sll	r2,r3,r2
   30fa8:	1007883a 	mov	r3,r2
   30fac:	008000f4 	movhi	r2,3
   30fb0:	109c6a04 	addi	r2,r2,29096
   30fb4:	10800017 	ldw	r2,0(r2)
   30fb8:	1886b03a 	or	r3,r3,r2
   30fbc:	008000f4 	movhi	r2,3
   30fc0:	109c6a04 	addi	r2,r2,29096
   30fc4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30fc8:	008000f4 	movhi	r2,3
   30fcc:	109c6a04 	addi	r2,r2,29096
   30fd0:	10800017 	ldw	r2,0(r2)
   30fd4:	100170fa 	wrctl	ienable,r2
   30fd8:	e0bffc17 	ldw	r2,-16(fp)
   30fdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30fe0:	e0bffd17 	ldw	r2,-12(fp)
   30fe4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   30fe8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   30fec:	0001883a 	nop
}
   30ff0:	e037883a 	mov	sp,fp
   30ff4:	df000017 	ldw	fp,0(sp)
   30ff8:	dec00104 	addi	sp,sp,4
   30ffc:	f800283a 	ret

00031000 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   31000:	defff904 	addi	sp,sp,-28
   31004:	df000615 	stw	fp,24(sp)
   31008:	df000604 	addi	fp,sp,24
   3100c:	e13ffe15 	stw	r4,-8(fp)
   31010:	e17fff15 	stw	r5,-4(fp)
   31014:	e0bfff17 	ldw	r2,-4(fp)
   31018:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3101c:	0005303a 	rdctl	r2,status
   31020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31024:	e0fffb17 	ldw	r3,-20(fp)
   31028:	00bfff84 	movi	r2,-2
   3102c:	1884703a 	and	r2,r3,r2
   31030:	1001703a 	wrctl	status,r2
  
  return context;
   31034:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   31038:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3103c:	e0bffa17 	ldw	r2,-24(fp)
   31040:	00c00044 	movi	r3,1
   31044:	1884983a 	sll	r2,r3,r2
   31048:	0084303a 	nor	r2,zero,r2
   3104c:	1007883a 	mov	r3,r2
   31050:	008000f4 	movhi	r2,3
   31054:	109c6a04 	addi	r2,r2,29096
   31058:	10800017 	ldw	r2,0(r2)
   3105c:	1886703a 	and	r3,r3,r2
   31060:	008000f4 	movhi	r2,3
   31064:	109c6a04 	addi	r2,r2,29096
   31068:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3106c:	008000f4 	movhi	r2,3
   31070:	109c6a04 	addi	r2,r2,29096
   31074:	10800017 	ldw	r2,0(r2)
   31078:	100170fa 	wrctl	ienable,r2
   3107c:	e0bffc17 	ldw	r2,-16(fp)
   31080:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31084:	e0bffd17 	ldw	r2,-12(fp)
   31088:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3108c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   31090:	0001883a 	nop
}
   31094:	e037883a 	mov	sp,fp
   31098:	df000017 	ldw	fp,0(sp)
   3109c:	dec00104 	addi	sp,sp,4
   310a0:	f800283a 	ret

000310a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   310a4:	defffc04 	addi	sp,sp,-16
   310a8:	df000315 	stw	fp,12(sp)
   310ac:	df000304 	addi	fp,sp,12
   310b0:	e13ffe15 	stw	r4,-8(fp)
   310b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   310b8:	000530fa 	rdctl	r2,ienable
   310bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   310c0:	e0bfff17 	ldw	r2,-4(fp)
   310c4:	00c00044 	movi	r3,1
   310c8:	1884983a 	sll	r2,r3,r2
   310cc:	1007883a 	mov	r3,r2
   310d0:	e0bffd17 	ldw	r2,-12(fp)
   310d4:	1884703a 	and	r2,r3,r2
   310d8:	1004c03a 	cmpne	r2,r2,zero
   310dc:	10803fcc 	andi	r2,r2,255
}
   310e0:	e037883a 	mov	sp,fp
   310e4:	df000017 	ldw	fp,0(sp)
   310e8:	dec00104 	addi	sp,sp,4
   310ec:	f800283a 	ret

000310f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   310f0:	defff504 	addi	sp,sp,-44
   310f4:	dfc00a15 	stw	ra,40(sp)
   310f8:	df000915 	stw	fp,36(sp)
   310fc:	df000904 	addi	fp,sp,36
   31100:	e13ffc15 	stw	r4,-16(fp)
   31104:	e17ffd15 	stw	r5,-12(fp)
   31108:	e1bffe15 	stw	r6,-8(fp)
   3110c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   31110:	00bffa84 	movi	r2,-22
   31114:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   31118:	e0bffd17 	ldw	r2,-12(fp)
   3111c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   31120:	e0bff817 	ldw	r2,-32(fp)
   31124:	10800808 	cmpgei	r2,r2,32
   31128:	1000271e 	bne	r2,zero,311c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3112c:	0005303a 	rdctl	r2,status
   31130:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31134:	e0fffa17 	ldw	r3,-24(fp)
   31138:	00bfff84 	movi	r2,-2
   3113c:	1884703a 	and	r2,r3,r2
   31140:	1001703a 	wrctl	status,r2
  
  return context;
   31144:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   31148:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   3114c:	008000f4 	movhi	r2,3
   31150:	109c8104 	addi	r2,r2,29188
   31154:	e0fff817 	ldw	r3,-32(fp)
   31158:	180690fa 	slli	r3,r3,3
   3115c:	10c5883a 	add	r2,r2,r3
   31160:	e0fffe17 	ldw	r3,-8(fp)
   31164:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   31168:	008000f4 	movhi	r2,3
   3116c:	109c8104 	addi	r2,r2,29188
   31170:	e0fff817 	ldw	r3,-32(fp)
   31174:	180690fa 	slli	r3,r3,3
   31178:	10c5883a 	add	r2,r2,r3
   3117c:	10800104 	addi	r2,r2,4
   31180:	e0ffff17 	ldw	r3,-4(fp)
   31184:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   31188:	e0bffe17 	ldw	r2,-8(fp)
   3118c:	10000526 	beq	r2,zero,311a4 <alt_iic_isr_register+0xb4>
   31190:	e0bff817 	ldw	r2,-32(fp)
   31194:	e13ffc17 	ldw	r4,-16(fp)
   31198:	100b883a 	mov	r5,r2
   3119c:	0030f600 	call	30f60 <alt_ic_irq_enable>
   311a0:	00000406 	br	311b4 <alt_iic_isr_register+0xc4>
   311a4:	e0bff817 	ldw	r2,-32(fp)
   311a8:	e13ffc17 	ldw	r4,-16(fp)
   311ac:	100b883a 	mov	r5,r2
   311b0:	00310000 	call	31000 <alt_ic_irq_disable>
   311b4:	e0bff715 	stw	r2,-36(fp)
   311b8:	e0bff917 	ldw	r2,-28(fp)
   311bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   311c0:	e0bffb17 	ldw	r2,-20(fp)
   311c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   311c8:	e0bff717 	ldw	r2,-36(fp)
}
   311cc:	e037883a 	mov	sp,fp
   311d0:	dfc00117 	ldw	ra,4(sp)
   311d4:	df000017 	ldw	fp,0(sp)
   311d8:	dec00204 	addi	sp,sp,8
   311dc:	f800283a 	ret

000311e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   311e0:	defffe04 	addi	sp,sp,-8
   311e4:	dfc00115 	stw	ra,4(sp)
   311e8:	df000015 	stw	fp,0(sp)
   311ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   311f0:	008000f4 	movhi	r2,3
   311f4:	10959d04 	addi	r2,r2,22132
   311f8:	10800017 	ldw	r2,0(r2)
   311fc:	10000526 	beq	r2,zero,31214 <alt_get_errno+0x34>
   31200:	008000f4 	movhi	r2,3
   31204:	10959d04 	addi	r2,r2,22132
   31208:	10800017 	ldw	r2,0(r2)
   3120c:	103ee83a 	callr	r2
   31210:	00000206 	br	3121c <alt_get_errno+0x3c>
   31214:	008000f4 	movhi	r2,3
   31218:	109c6904 	addi	r2,r2,29092
}
   3121c:	e037883a 	mov	sp,fp
   31220:	dfc00117 	ldw	ra,4(sp)
   31224:	df000017 	ldw	fp,0(sp)
   31228:	dec00204 	addi	sp,sp,8
   3122c:	f800283a 	ret

00031230 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   31230:	deffed04 	addi	sp,sp,-76
   31234:	dfc01215 	stw	ra,72(sp)
   31238:	df001115 	stw	fp,68(sp)
   3123c:	df001104 	addi	fp,sp,68
   31240:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31244:	e0bfff17 	ldw	r2,-4(fp)
   31248:	10000616 	blt	r2,zero,31264 <isatty+0x34>
   3124c:	e0bfff17 	ldw	r2,-4(fp)
   31250:	10c00324 	muli	r3,r2,12
   31254:	008000f4 	movhi	r2,3
   31258:	10911a04 	addi	r2,r2,17512
   3125c:	1885883a 	add	r2,r3,r2
   31260:	00000106 	br	31268 <isatty+0x38>
   31264:	0005883a 	mov	r2,zero
   31268:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   3126c:	e0bfef17 	ldw	r2,-68(fp)
   31270:	10000e26 	beq	r2,zero,312ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   31274:	e0bfef17 	ldw	r2,-68(fp)
   31278:	10800017 	ldw	r2,0(r2)
   3127c:	10800817 	ldw	r2,32(r2)
   31280:	1000021e 	bne	r2,zero,3128c <isatty+0x5c>
    {
      return 1;
   31284:	00800044 	movi	r2,1
   31288:	00000d06 	br	312c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   3128c:	e0bff004 	addi	r2,fp,-64
   31290:	e13fff17 	ldw	r4,-4(fp)
   31294:	100b883a 	mov	r5,r2
   31298:	0030e600 	call	30e60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   3129c:	e0bff117 	ldw	r2,-60(fp)
   312a0:	10880020 	cmpeqi	r2,r2,8192
   312a4:	10803fcc 	andi	r2,r2,255
   312a8:	00000506 	br	312c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   312ac:	00311e00 	call	311e0 <alt_get_errno>
   312b0:	1007883a 	mov	r3,r2
   312b4:	00801444 	movi	r2,81
   312b8:	18800015 	stw	r2,0(r3)
    return 0;
   312bc:	0005883a 	mov	r2,zero
  }
}
   312c0:	e037883a 	mov	sp,fp
   312c4:	dfc00117 	ldw	ra,4(sp)
   312c8:	df000017 	ldw	fp,0(sp)
   312cc:	dec00204 	addi	sp,sp,8
   312d0:	f800283a 	ret

000312d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   312d4:	defffc04 	addi	sp,sp,-16
   312d8:	df000315 	stw	fp,12(sp)
   312dc:	df000304 	addi	fp,sp,12
   312e0:	e13ffd15 	stw	r4,-12(fp)
   312e4:	e17ffe15 	stw	r5,-8(fp)
   312e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   312ec:	e0fffe17 	ldw	r3,-8(fp)
   312f0:	e0bffd17 	ldw	r2,-12(fp)
   312f4:	18800c26 	beq	r3,r2,31328 <alt_load_section+0x54>
  {
    while( to != end )
   312f8:	00000806 	br	3131c <alt_load_section+0x48>
    {
      *to++ = *from++;
   312fc:	e0bffe17 	ldw	r2,-8(fp)
   31300:	10c00104 	addi	r3,r2,4
   31304:	e0fffe15 	stw	r3,-8(fp)
   31308:	e0fffd17 	ldw	r3,-12(fp)
   3130c:	19000104 	addi	r4,r3,4
   31310:	e13ffd15 	stw	r4,-12(fp)
   31314:	18c00017 	ldw	r3,0(r3)
   31318:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3131c:	e0fffe17 	ldw	r3,-8(fp)
   31320:	e0bfff17 	ldw	r2,-4(fp)
   31324:	18bff51e 	bne	r3,r2,312fc <__alt_data_end+0xffff172c>
    {
      *to++ = *from++;
    }
  }
}
   31328:	e037883a 	mov	sp,fp
   3132c:	df000017 	ldw	fp,0(sp)
   31330:	dec00104 	addi	sp,sp,4
   31334:	f800283a 	ret

00031338 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   31338:	defffe04 	addi	sp,sp,-8
   3133c:	dfc00115 	stw	ra,4(sp)
   31340:	df000015 	stw	fp,0(sp)
   31344:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   31348:	010000f4 	movhi	r4,3
   3134c:	2115a204 	addi	r4,r4,22152
   31350:	014000f4 	movhi	r5,3
   31354:	294ee704 	addi	r5,r5,15260
   31358:	018000f4 	movhi	r6,3
   3135c:	3195a204 	addi	r6,r6,22152
   31360:	00312d40 	call	312d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   31364:	010000b4 	movhi	r4,2
   31368:	21000804 	addi	r4,r4,32
   3136c:	014000b4 	movhi	r5,2
   31370:	29400804 	addi	r5,r5,32
   31374:	018000b4 	movhi	r6,2
   31378:	31809004 	addi	r6,r6,576
   3137c:	00312d40 	call	312d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   31380:	010000f4 	movhi	r4,3
   31384:	210db004 	addi	r4,r4,14016
   31388:	014000f4 	movhi	r5,3
   3138c:	294db004 	addi	r5,r5,14016
   31390:	018000f4 	movhi	r6,3
   31394:	318ee704 	addi	r6,r6,15260
   31398:	00312d40 	call	312d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   3139c:	00329b00 	call	329b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   313a0:	0032ba00 	call	32ba0 <alt_icache_flush_all>
}
   313a4:	e037883a 	mov	sp,fp
   313a8:	dfc00117 	ldw	ra,4(sp)
   313ac:	df000017 	ldw	fp,0(sp)
   313b0:	dec00204 	addi	sp,sp,8
   313b4:	f800283a 	ret

000313b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   313b8:	defffe04 	addi	sp,sp,-8
   313bc:	dfc00115 	stw	ra,4(sp)
   313c0:	df000015 	stw	fp,0(sp)
   313c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   313c8:	008000f4 	movhi	r2,3
   313cc:	10959d04 	addi	r2,r2,22132
   313d0:	10800017 	ldw	r2,0(r2)
   313d4:	10000526 	beq	r2,zero,313ec <alt_get_errno+0x34>
   313d8:	008000f4 	movhi	r2,3
   313dc:	10959d04 	addi	r2,r2,22132
   313e0:	10800017 	ldw	r2,0(r2)
   313e4:	103ee83a 	callr	r2
   313e8:	00000206 	br	313f4 <alt_get_errno+0x3c>
   313ec:	008000f4 	movhi	r2,3
   313f0:	109c6904 	addi	r2,r2,29092
}
   313f4:	e037883a 	mov	sp,fp
   313f8:	dfc00117 	ldw	ra,4(sp)
   313fc:	df000017 	ldw	fp,0(sp)
   31400:	dec00204 	addi	sp,sp,8
   31404:	f800283a 	ret

00031408 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   31408:	defff904 	addi	sp,sp,-28
   3140c:	dfc00615 	stw	ra,24(sp)
   31410:	df000515 	stw	fp,20(sp)
   31414:	df000504 	addi	fp,sp,20
   31418:	e13ffd15 	stw	r4,-12(fp)
   3141c:	e17ffe15 	stw	r5,-8(fp)
   31420:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   31424:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31428:	e0bffd17 	ldw	r2,-12(fp)
   3142c:	10000616 	blt	r2,zero,31448 <lseek+0x40>
   31430:	e0bffd17 	ldw	r2,-12(fp)
   31434:	10c00324 	muli	r3,r2,12
   31438:	008000f4 	movhi	r2,3
   3143c:	10911a04 	addi	r2,r2,17512
   31440:	1885883a 	add	r2,r3,r2
   31444:	00000106 	br	3144c <lseek+0x44>
   31448:	0005883a 	mov	r2,zero
   3144c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   31450:	e0bffc17 	ldw	r2,-16(fp)
   31454:	10001026 	beq	r2,zero,31498 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   31458:	e0bffc17 	ldw	r2,-16(fp)
   3145c:	10800017 	ldw	r2,0(r2)
   31460:	10800717 	ldw	r2,28(r2)
   31464:	10000926 	beq	r2,zero,3148c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   31468:	e0bffc17 	ldw	r2,-16(fp)
   3146c:	10800017 	ldw	r2,0(r2)
   31470:	10800717 	ldw	r2,28(r2)
   31474:	e13ffc17 	ldw	r4,-16(fp)
   31478:	e17ffe17 	ldw	r5,-8(fp)
   3147c:	e1bfff17 	ldw	r6,-4(fp)
   31480:	103ee83a 	callr	r2
   31484:	e0bffb15 	stw	r2,-20(fp)
   31488:	00000506 	br	314a0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   3148c:	00bfde84 	movi	r2,-134
   31490:	e0bffb15 	stw	r2,-20(fp)
   31494:	00000206 	br	314a0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   31498:	00bfebc4 	movi	r2,-81
   3149c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   314a0:	e0bffb17 	ldw	r2,-20(fp)
   314a4:	1000070e 	bge	r2,zero,314c4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   314a8:	00313b80 	call	313b8 <alt_get_errno>
   314ac:	1007883a 	mov	r3,r2
   314b0:	e0bffb17 	ldw	r2,-20(fp)
   314b4:	0085c83a 	sub	r2,zero,r2
   314b8:	18800015 	stw	r2,0(r3)
    rc = -1;
   314bc:	00bfffc4 	movi	r2,-1
   314c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   314c4:	e0bffb17 	ldw	r2,-20(fp)
}
   314c8:	e037883a 	mov	sp,fp
   314cc:	dfc00117 	ldw	ra,4(sp)
   314d0:	df000017 	ldw	fp,0(sp)
   314d4:	dec00204 	addi	sp,sp,8
   314d8:	f800283a 	ret

000314dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   314dc:	defffd04 	addi	sp,sp,-12
   314e0:	dfc00215 	stw	ra,8(sp)
   314e4:	df000115 	stw	fp,4(sp)
   314e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   314ec:	0009883a 	mov	r4,zero
   314f0:	0031b3c0 	call	31b3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   314f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   314f8:	0031b700 	call	31b70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   314fc:	010000f4 	movhi	r4,3
   31500:	210edf04 	addi	r4,r4,15228
   31504:	014000f4 	movhi	r5,3
   31508:	294edf04 	addi	r5,r5,15228
   3150c:	018000f4 	movhi	r6,3
   31510:	318edf04 	addi	r6,r6,15228
   31514:	0032d2c0 	call	32d2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   31518:	0032ae80 	call	32ae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3151c:	010000f4 	movhi	r4,3
   31520:	210ad104 	addi	r4,r4,11076
   31524:	003331c0 	call	3331c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   31528:	d126d917 	ldw	r4,-25756(gp)
   3152c:	d0e6da17 	ldw	r3,-25752(gp)
   31530:	d0a6db17 	ldw	r2,-25748(gp)
   31534:	180b883a 	mov	r5,r3
   31538:	100d883a 	mov	r6,r2
   3153c:	00203540 	call	20354 <main>
   31540:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   31544:	01000044 	movi	r4,1
   31548:	0030d140 	call	30d14 <close>
  exit (result);
   3154c:	e13fff17 	ldw	r4,-4(fp)
   31550:	00333300 	call	33330 <exit>

00031554 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   31554:	defffe04 	addi	sp,sp,-8
   31558:	df000115 	stw	fp,4(sp)
   3155c:	df000104 	addi	fp,sp,4
   31560:	e13fff15 	stw	r4,-4(fp)
}
   31564:	e037883a 	mov	sp,fp
   31568:	df000017 	ldw	fp,0(sp)
   3156c:	dec00104 	addi	sp,sp,4
   31570:	f800283a 	ret

00031574 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   31574:	defffe04 	addi	sp,sp,-8
   31578:	df000115 	stw	fp,4(sp)
   3157c:	df000104 	addi	fp,sp,4
   31580:	e13fff15 	stw	r4,-4(fp)
}
   31584:	e037883a 	mov	sp,fp
   31588:	df000017 	ldw	fp,0(sp)
   3158c:	dec00104 	addi	sp,sp,4
   31590:	f800283a 	ret

00031594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31594:	defffe04 	addi	sp,sp,-8
   31598:	dfc00115 	stw	ra,4(sp)
   3159c:	df000015 	stw	fp,0(sp)
   315a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   315a4:	008000f4 	movhi	r2,3
   315a8:	10959d04 	addi	r2,r2,22132
   315ac:	10800017 	ldw	r2,0(r2)
   315b0:	10000526 	beq	r2,zero,315c8 <alt_get_errno+0x34>
   315b4:	008000f4 	movhi	r2,3
   315b8:	10959d04 	addi	r2,r2,22132
   315bc:	10800017 	ldw	r2,0(r2)
   315c0:	103ee83a 	callr	r2
   315c4:	00000206 	br	315d0 <alt_get_errno+0x3c>
   315c8:	008000f4 	movhi	r2,3
   315cc:	109c6904 	addi	r2,r2,29092
}
   315d0:	e037883a 	mov	sp,fp
   315d4:	dfc00117 	ldw	ra,4(sp)
   315d8:	df000017 	ldw	fp,0(sp)
   315dc:	dec00204 	addi	sp,sp,8
   315e0:	f800283a 	ret

000315e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   315e4:	defff904 	addi	sp,sp,-28
   315e8:	dfc00615 	stw	ra,24(sp)
   315ec:	df000515 	stw	fp,20(sp)
   315f0:	df000504 	addi	fp,sp,20
   315f4:	e13ffd15 	stw	r4,-12(fp)
   315f8:	e17ffe15 	stw	r5,-8(fp)
   315fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31600:	e0bffd17 	ldw	r2,-12(fp)
   31604:	10000616 	blt	r2,zero,31620 <read+0x3c>
   31608:	e0bffd17 	ldw	r2,-12(fp)
   3160c:	10c00324 	muli	r3,r2,12
   31610:	008000f4 	movhi	r2,3
   31614:	10911a04 	addi	r2,r2,17512
   31618:	1885883a 	add	r2,r3,r2
   3161c:	00000106 	br	31624 <read+0x40>
   31620:	0005883a 	mov	r2,zero
   31624:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31628:	e0bffb17 	ldw	r2,-20(fp)
   3162c:	10002226 	beq	r2,zero,316b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31630:	e0bffb17 	ldw	r2,-20(fp)
   31634:	10800217 	ldw	r2,8(r2)
   31638:	108000cc 	andi	r2,r2,3
   3163c:	10800060 	cmpeqi	r2,r2,1
   31640:	1000181e 	bne	r2,zero,316a4 <read+0xc0>
        (fd->dev->read))
   31644:	e0bffb17 	ldw	r2,-20(fp)
   31648:	10800017 	ldw	r2,0(r2)
   3164c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31650:	10001426 	beq	r2,zero,316a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   31654:	e0bffb17 	ldw	r2,-20(fp)
   31658:	10800017 	ldw	r2,0(r2)
   3165c:	10800517 	ldw	r2,20(r2)
   31660:	e0ffff17 	ldw	r3,-4(fp)
   31664:	e13ffb17 	ldw	r4,-20(fp)
   31668:	e17ffe17 	ldw	r5,-8(fp)
   3166c:	180d883a 	mov	r6,r3
   31670:	103ee83a 	callr	r2
   31674:	e0bffc15 	stw	r2,-16(fp)
   31678:	e0bffc17 	ldw	r2,-16(fp)
   3167c:	1000070e 	bge	r2,zero,3169c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   31680:	00315940 	call	31594 <alt_get_errno>
   31684:	1007883a 	mov	r3,r2
   31688:	e0bffc17 	ldw	r2,-16(fp)
   3168c:	0085c83a 	sub	r2,zero,r2
   31690:	18800015 	stw	r2,0(r3)
          return -1;
   31694:	00bfffc4 	movi	r2,-1
   31698:	00000c06 	br	316cc <read+0xe8>
        }
        return rval;
   3169c:	e0bffc17 	ldw	r2,-16(fp)
   316a0:	00000a06 	br	316cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   316a4:	00315940 	call	31594 <alt_get_errno>
   316a8:	1007883a 	mov	r3,r2
   316ac:	00800344 	movi	r2,13
   316b0:	18800015 	stw	r2,0(r3)
   316b4:	00000406 	br	316c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   316b8:	00315940 	call	31594 <alt_get_errno>
   316bc:	1007883a 	mov	r3,r2
   316c0:	00801444 	movi	r2,81
   316c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   316c8:	00bfffc4 	movi	r2,-1
}
   316cc:	e037883a 	mov	sp,fp
   316d0:	dfc00117 	ldw	ra,4(sp)
   316d4:	df000017 	ldw	fp,0(sp)
   316d8:	dec00204 	addi	sp,sp,8
   316dc:	f800283a 	ret

000316e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   316e0:	defffe04 	addi	sp,sp,-8
   316e4:	df000115 	stw	fp,4(sp)
   316e8:	df000104 	addi	fp,sp,4
   316ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   316f0:	e0bfff17 	ldw	r2,-4(fp)
   316f4:	108000d0 	cmplti	r2,r2,3
   316f8:	10000d1e 	bne	r2,zero,31730 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   316fc:	008000f4 	movhi	r2,3
   31700:	10911a04 	addi	r2,r2,17512
   31704:	e0ffff17 	ldw	r3,-4(fp)
   31708:	18c00324 	muli	r3,r3,12
   3170c:	10c5883a 	add	r2,r2,r3
   31710:	10800204 	addi	r2,r2,8
   31714:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   31718:	008000f4 	movhi	r2,3
   3171c:	10911a04 	addi	r2,r2,17512
   31720:	e0ffff17 	ldw	r3,-4(fp)
   31724:	18c00324 	muli	r3,r3,12
   31728:	10c5883a 	add	r2,r2,r3
   3172c:	10000015 	stw	zero,0(r2)
  }
}
   31730:	e037883a 	mov	sp,fp
   31734:	df000017 	ldw	fp,0(sp)
   31738:	dec00104 	addi	sp,sp,4
   3173c:	f800283a 	ret

00031740 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   31740:	defff904 	addi	sp,sp,-28
   31744:	df000615 	stw	fp,24(sp)
   31748:	df000604 	addi	fp,sp,24
   3174c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31750:	0005303a 	rdctl	r2,status
   31754:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31758:	e0fffc17 	ldw	r3,-16(fp)
   3175c:	00bfff84 	movi	r2,-2
   31760:	1884703a 	and	r2,r3,r2
   31764:	1001703a 	wrctl	status,r2
  
  return context;
   31768:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3176c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   31770:	d0a00d17 	ldw	r2,-32716(gp)
   31774:	10c000c4 	addi	r3,r2,3
   31778:	00bfff04 	movi	r2,-4
   3177c:	1884703a 	and	r2,r3,r2
   31780:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   31784:	d0e00d17 	ldw	r3,-32716(gp)
   31788:	e0bfff17 	ldw	r2,-4(fp)
   3178c:	1887883a 	add	r3,r3,r2
   31790:	00800134 	movhi	r2,4
   31794:	10bef404 	addi	r2,r2,-1072
   31798:	10c0062e 	bgeu	r2,r3,317b4 <sbrk+0x74>
   3179c:	e0bffa17 	ldw	r2,-24(fp)
   317a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   317a4:	e0bffd17 	ldw	r2,-12(fp)
   317a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   317ac:	00bfffc4 	movi	r2,-1
   317b0:	00000b06 	br	317e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   317b4:	d0a00d17 	ldw	r2,-32716(gp)
   317b8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   317bc:	d0e00d17 	ldw	r3,-32716(gp)
   317c0:	e0bfff17 	ldw	r2,-4(fp)
   317c4:	1885883a 	add	r2,r3,r2
   317c8:	d0a00d15 	stw	r2,-32716(gp)
   317cc:	e0bffa17 	ldw	r2,-24(fp)
   317d0:	e0bffe15 	stw	r2,-8(fp)
   317d4:	e0bffe17 	ldw	r2,-8(fp)
   317d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   317dc:	e0bffb17 	ldw	r2,-20(fp)
} 
   317e0:	e037883a 	mov	sp,fp
   317e4:	df000017 	ldw	fp,0(sp)
   317e8:	dec00104 	addi	sp,sp,4
   317ec:	f800283a 	ret

000317f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   317f0:	defffa04 	addi	sp,sp,-24
   317f4:	df000515 	stw	fp,20(sp)
   317f8:	df000504 	addi	fp,sp,20
   317fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31800:	0005303a 	rdctl	r2,status
   31804:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31808:	e0fffc17 	ldw	r3,-16(fp)
   3180c:	00bfff84 	movi	r2,-2
   31810:	1884703a 	and	r2,r3,r2
   31814:	1001703a 	wrctl	status,r2
  
  return context;
   31818:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3181c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   31820:	e0bfff17 	ldw	r2,-4(fp)
   31824:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31828:	e0bffd17 	ldw	r2,-12(fp)
   3182c:	10800017 	ldw	r2,0(r2)
   31830:	e0fffd17 	ldw	r3,-12(fp)
   31834:	18c00117 	ldw	r3,4(r3)
   31838:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3183c:	e0bffd17 	ldw	r2,-12(fp)
   31840:	10800117 	ldw	r2,4(r2)
   31844:	e0fffd17 	ldw	r3,-12(fp)
   31848:	18c00017 	ldw	r3,0(r3)
   3184c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31850:	e0bffd17 	ldw	r2,-12(fp)
   31854:	e0fffd17 	ldw	r3,-12(fp)
   31858:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3185c:	e0bffd17 	ldw	r2,-12(fp)
   31860:	e0fffd17 	ldw	r3,-12(fp)
   31864:	10c00015 	stw	r3,0(r2)
   31868:	e0bffb17 	ldw	r2,-20(fp)
   3186c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31870:	e0bffe17 	ldw	r2,-8(fp)
   31874:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   31878:	e037883a 	mov	sp,fp
   3187c:	df000017 	ldw	fp,0(sp)
   31880:	dec00104 	addi	sp,sp,4
   31884:	f800283a 	ret

00031888 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31888:	defffb04 	addi	sp,sp,-20
   3188c:	dfc00415 	stw	ra,16(sp)
   31890:	df000315 	stw	fp,12(sp)
   31894:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31898:	d0a00e17 	ldw	r2,-32712(gp)
   3189c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   318a0:	d0a6dd17 	ldw	r2,-25740(gp)
   318a4:	10800044 	addi	r2,r2,1
   318a8:	d0a6dd15 	stw	r2,-25740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   318ac:	00002e06 	br	31968 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   318b0:	e0bffd17 	ldw	r2,-12(fp)
   318b4:	10800017 	ldw	r2,0(r2)
   318b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   318bc:	e0bffd17 	ldw	r2,-12(fp)
   318c0:	10800403 	ldbu	r2,16(r2)
   318c4:	10803fcc 	andi	r2,r2,255
   318c8:	10000426 	beq	r2,zero,318dc <alt_tick+0x54>
   318cc:	d0a6dd17 	ldw	r2,-25740(gp)
   318d0:	1000021e 	bne	r2,zero,318dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   318d4:	e0bffd17 	ldw	r2,-12(fp)
   318d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   318dc:	e0bffd17 	ldw	r2,-12(fp)
   318e0:	10800217 	ldw	r2,8(r2)
   318e4:	d0e6dd17 	ldw	r3,-25740(gp)
   318e8:	18801d36 	bltu	r3,r2,31960 <alt_tick+0xd8>
   318ec:	e0bffd17 	ldw	r2,-12(fp)
   318f0:	10800403 	ldbu	r2,16(r2)
   318f4:	10803fcc 	andi	r2,r2,255
   318f8:	1000191e 	bne	r2,zero,31960 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   318fc:	e0bffd17 	ldw	r2,-12(fp)
   31900:	10800317 	ldw	r2,12(r2)
   31904:	e0fffd17 	ldw	r3,-12(fp)
   31908:	18c00517 	ldw	r3,20(r3)
   3190c:	1809883a 	mov	r4,r3
   31910:	103ee83a 	callr	r2
   31914:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   31918:	e0bfff17 	ldw	r2,-4(fp)
   3191c:	1000031e 	bne	r2,zero,3192c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   31920:	e13ffd17 	ldw	r4,-12(fp)
   31924:	00317f00 	call	317f0 <alt_alarm_stop>
   31928:	00000d06 	br	31960 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3192c:	e0bffd17 	ldw	r2,-12(fp)
   31930:	10c00217 	ldw	r3,8(r2)
   31934:	e0bfff17 	ldw	r2,-4(fp)
   31938:	1887883a 	add	r3,r3,r2
   3193c:	e0bffd17 	ldw	r2,-12(fp)
   31940:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   31944:	e0bffd17 	ldw	r2,-12(fp)
   31948:	10c00217 	ldw	r3,8(r2)
   3194c:	d0a6dd17 	ldw	r2,-25740(gp)
   31950:	1880032e 	bgeu	r3,r2,31960 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   31954:	e0bffd17 	ldw	r2,-12(fp)
   31958:	00c00044 	movi	r3,1
   3195c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   31960:	e0bffe17 	ldw	r2,-8(fp)
   31964:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31968:	e0fffd17 	ldw	r3,-12(fp)
   3196c:	d0a00e04 	addi	r2,gp,-32712
   31970:	18bfcf1e 	bne	r3,r2,318b0 <__alt_data_end+0xffff1ce0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   31974:	0001883a 	nop
}
   31978:	e037883a 	mov	sp,fp
   3197c:	dfc00117 	ldw	ra,4(sp)
   31980:	df000017 	ldw	fp,0(sp)
   31984:	dec00204 	addi	sp,sp,8
   31988:	f800283a 	ret

0003198c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   3198c:	defffd04 	addi	sp,sp,-12
   31990:	dfc00215 	stw	ra,8(sp)
   31994:	df000115 	stw	fp,4(sp)
   31998:	df000104 	addi	fp,sp,4
   3199c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   319a0:	e13fff17 	ldw	r4,-4(fp)
   319a4:	00328580 	call	32858 <alt_busy_sleep>
}
   319a8:	e037883a 	mov	sp,fp
   319ac:	dfc00117 	ldw	ra,4(sp)
   319b0:	df000017 	ldw	fp,0(sp)
   319b4:	dec00204 	addi	sp,sp,8
   319b8:	f800283a 	ret

000319bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   319bc:	defffe04 	addi	sp,sp,-8
   319c0:	dfc00115 	stw	ra,4(sp)
   319c4:	df000015 	stw	fp,0(sp)
   319c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   319cc:	008000f4 	movhi	r2,3
   319d0:	10959d04 	addi	r2,r2,22132
   319d4:	10800017 	ldw	r2,0(r2)
   319d8:	10000526 	beq	r2,zero,319f0 <alt_get_errno+0x34>
   319dc:	008000f4 	movhi	r2,3
   319e0:	10959d04 	addi	r2,r2,22132
   319e4:	10800017 	ldw	r2,0(r2)
   319e8:	103ee83a 	callr	r2
   319ec:	00000206 	br	319f8 <alt_get_errno+0x3c>
   319f0:	008000f4 	movhi	r2,3
   319f4:	109c6904 	addi	r2,r2,29092
}
   319f8:	e037883a 	mov	sp,fp
   319fc:	dfc00117 	ldw	ra,4(sp)
   31a00:	df000017 	ldw	fp,0(sp)
   31a04:	dec00204 	addi	sp,sp,8
   31a08:	f800283a 	ret

00031a0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   31a0c:	defff904 	addi	sp,sp,-28
   31a10:	dfc00615 	stw	ra,24(sp)
   31a14:	df000515 	stw	fp,20(sp)
   31a18:	df000504 	addi	fp,sp,20
   31a1c:	e13ffd15 	stw	r4,-12(fp)
   31a20:	e17ffe15 	stw	r5,-8(fp)
   31a24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31a28:	e0bffd17 	ldw	r2,-12(fp)
   31a2c:	10000616 	blt	r2,zero,31a48 <write+0x3c>
   31a30:	e0bffd17 	ldw	r2,-12(fp)
   31a34:	10c00324 	muli	r3,r2,12
   31a38:	008000f4 	movhi	r2,3
   31a3c:	10911a04 	addi	r2,r2,17512
   31a40:	1885883a 	add	r2,r3,r2
   31a44:	00000106 	br	31a4c <write+0x40>
   31a48:	0005883a 	mov	r2,zero
   31a4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31a50:	e0bffb17 	ldw	r2,-20(fp)
   31a54:	10002126 	beq	r2,zero,31adc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   31a58:	e0bffb17 	ldw	r2,-20(fp)
   31a5c:	10800217 	ldw	r2,8(r2)
   31a60:	108000cc 	andi	r2,r2,3
   31a64:	10001826 	beq	r2,zero,31ac8 <write+0xbc>
   31a68:	e0bffb17 	ldw	r2,-20(fp)
   31a6c:	10800017 	ldw	r2,0(r2)
   31a70:	10800617 	ldw	r2,24(r2)
   31a74:	10001426 	beq	r2,zero,31ac8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   31a78:	e0bffb17 	ldw	r2,-20(fp)
   31a7c:	10800017 	ldw	r2,0(r2)
   31a80:	10800617 	ldw	r2,24(r2)
   31a84:	e0ffff17 	ldw	r3,-4(fp)
   31a88:	e13ffb17 	ldw	r4,-20(fp)
   31a8c:	e17ffe17 	ldw	r5,-8(fp)
   31a90:	180d883a 	mov	r6,r3
   31a94:	103ee83a 	callr	r2
   31a98:	e0bffc15 	stw	r2,-16(fp)
   31a9c:	e0bffc17 	ldw	r2,-16(fp)
   31aa0:	1000070e 	bge	r2,zero,31ac0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   31aa4:	00319bc0 	call	319bc <alt_get_errno>
   31aa8:	1007883a 	mov	r3,r2
   31aac:	e0bffc17 	ldw	r2,-16(fp)
   31ab0:	0085c83a 	sub	r2,zero,r2
   31ab4:	18800015 	stw	r2,0(r3)
        return -1;
   31ab8:	00bfffc4 	movi	r2,-1
   31abc:	00000c06 	br	31af0 <write+0xe4>
      }
      return rval;
   31ac0:	e0bffc17 	ldw	r2,-16(fp)
   31ac4:	00000a06 	br	31af0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   31ac8:	00319bc0 	call	319bc <alt_get_errno>
   31acc:	1007883a 	mov	r3,r2
   31ad0:	00800344 	movi	r2,13
   31ad4:	18800015 	stw	r2,0(r3)
   31ad8:	00000406 	br	31aec <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   31adc:	00319bc0 	call	319bc <alt_get_errno>
   31ae0:	1007883a 	mov	r3,r2
   31ae4:	00801444 	movi	r2,81
   31ae8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31aec:	00bfffc4 	movi	r2,-1
}
   31af0:	e037883a 	mov	sp,fp
   31af4:	dfc00117 	ldw	ra,4(sp)
   31af8:	df000017 	ldw	fp,0(sp)
   31afc:	dec00204 	addi	sp,sp,8
   31b00:	f800283a 	ret

00031b04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   31b04:	defffd04 	addi	sp,sp,-12
   31b08:	dfc00215 	stw	ra,8(sp)
   31b0c:	df000115 	stw	fp,4(sp)
   31b10:	df000104 	addi	fp,sp,4
   31b14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   31b18:	e13fff17 	ldw	r4,-4(fp)
   31b1c:	014000f4 	movhi	r5,3
   31b20:	29559a04 	addi	r5,r5,22120
   31b24:	0032a440 	call	32a44 <alt_dev_llist_insert>
}
   31b28:	e037883a 	mov	sp,fp
   31b2c:	dfc00117 	ldw	ra,4(sp)
   31b30:	df000017 	ldw	fp,0(sp)
   31b34:	dec00204 	addi	sp,sp,8
   31b38:	f800283a 	ret

00031b3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   31b3c:	defffd04 	addi	sp,sp,-12
   31b40:	dfc00215 	stw	ra,8(sp)
   31b44:	df000115 	stw	fp,4(sp)
   31b48:	df000104 	addi	fp,sp,4
   31b4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   31b50:	00330180 	call	33018 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   31b54:	00800044 	movi	r2,1
   31b58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   31b5c:	e037883a 	mov	sp,fp
   31b60:	dfc00117 	ldw	ra,4(sp)
   31b64:	df000017 	ldw	fp,0(sp)
   31b68:	dec00204 	addi	sp,sp,8
   31b6c:	f800283a 	ret

00031b70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   31b70:	defffe04 	addi	sp,sp,-8
   31b74:	dfc00115 	stw	ra,4(sp)
   31b78:	df000015 	stw	fp,0(sp)
   31b7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   31b80:	01000134 	movhi	r4,4
   31b84:	21040004 	addi	r4,r4,4096
   31b88:	000b883a 	mov	r5,zero
   31b8c:	01800144 	movi	r6,5
   31b90:	01c0fa04 	movi	r7,1000
   31b94:	00326900 	call	32690 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   31b98:	010000f4 	movhi	r4,3
   31b9c:	21118404 	addi	r4,r4,17936
   31ba0:	000b883a 	mov	r5,zero
   31ba4:	01800044 	movi	r6,1
   31ba8:	0031d340 	call	31d34 <altera_avalon_jtag_uart_init>
   31bac:	010000f4 	movhi	r4,3
   31bb0:	21117a04 	addi	r4,r4,17896
   31bb4:	0031b040 	call	31b04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   31bb8:	0001883a 	nop
}
   31bbc:	e037883a 	mov	sp,fp
   31bc0:	dfc00117 	ldw	ra,4(sp)
   31bc4:	df000017 	ldw	fp,0(sp)
   31bc8:	dec00204 	addi	sp,sp,8
   31bcc:	f800283a 	ret

00031bd0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   31bd0:	defffa04 	addi	sp,sp,-24
   31bd4:	dfc00515 	stw	ra,20(sp)
   31bd8:	df000415 	stw	fp,16(sp)
   31bdc:	df000404 	addi	fp,sp,16
   31be0:	e13ffd15 	stw	r4,-12(fp)
   31be4:	e17ffe15 	stw	r5,-8(fp)
   31be8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31bec:	e0bffd17 	ldw	r2,-12(fp)
   31bf0:	10800017 	ldw	r2,0(r2)
   31bf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   31bf8:	e0bffc17 	ldw	r2,-16(fp)
   31bfc:	10c00a04 	addi	r3,r2,40
   31c00:	e0bffd17 	ldw	r2,-12(fp)
   31c04:	10800217 	ldw	r2,8(r2)
   31c08:	1809883a 	mov	r4,r3
   31c0c:	e17ffe17 	ldw	r5,-8(fp)
   31c10:	e1bfff17 	ldw	r6,-4(fp)
   31c14:	100f883a 	mov	r7,r2
   31c18:	00321f80 	call	321f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   31c1c:	e037883a 	mov	sp,fp
   31c20:	dfc00117 	ldw	ra,4(sp)
   31c24:	df000017 	ldw	fp,0(sp)
   31c28:	dec00204 	addi	sp,sp,8
   31c2c:	f800283a 	ret

00031c30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   31c30:	defffa04 	addi	sp,sp,-24
   31c34:	dfc00515 	stw	ra,20(sp)
   31c38:	df000415 	stw	fp,16(sp)
   31c3c:	df000404 	addi	fp,sp,16
   31c40:	e13ffd15 	stw	r4,-12(fp)
   31c44:	e17ffe15 	stw	r5,-8(fp)
   31c48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31c4c:	e0bffd17 	ldw	r2,-12(fp)
   31c50:	10800017 	ldw	r2,0(r2)
   31c54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   31c58:	e0bffc17 	ldw	r2,-16(fp)
   31c5c:	10c00a04 	addi	r3,r2,40
   31c60:	e0bffd17 	ldw	r2,-12(fp)
   31c64:	10800217 	ldw	r2,8(r2)
   31c68:	1809883a 	mov	r4,r3
   31c6c:	e17ffe17 	ldw	r5,-8(fp)
   31c70:	e1bfff17 	ldw	r6,-4(fp)
   31c74:	100f883a 	mov	r7,r2
   31c78:	00324040 	call	32404 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   31c7c:	e037883a 	mov	sp,fp
   31c80:	dfc00117 	ldw	ra,4(sp)
   31c84:	df000017 	ldw	fp,0(sp)
   31c88:	dec00204 	addi	sp,sp,8
   31c8c:	f800283a 	ret

00031c90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   31c90:	defffc04 	addi	sp,sp,-16
   31c94:	dfc00315 	stw	ra,12(sp)
   31c98:	df000215 	stw	fp,8(sp)
   31c9c:	df000204 	addi	fp,sp,8
   31ca0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31ca4:	e0bfff17 	ldw	r2,-4(fp)
   31ca8:	10800017 	ldw	r2,0(r2)
   31cac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   31cb0:	e0bffe17 	ldw	r2,-8(fp)
   31cb4:	10c00a04 	addi	r3,r2,40
   31cb8:	e0bfff17 	ldw	r2,-4(fp)
   31cbc:	10800217 	ldw	r2,8(r2)
   31cc0:	1809883a 	mov	r4,r3
   31cc4:	100b883a 	mov	r5,r2
   31cc8:	00320a40 	call	320a4 <altera_avalon_jtag_uart_close>
}
   31ccc:	e037883a 	mov	sp,fp
   31cd0:	dfc00117 	ldw	ra,4(sp)
   31cd4:	df000017 	ldw	fp,0(sp)
   31cd8:	dec00204 	addi	sp,sp,8
   31cdc:	f800283a 	ret

00031ce0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   31ce0:	defffa04 	addi	sp,sp,-24
   31ce4:	dfc00515 	stw	ra,20(sp)
   31ce8:	df000415 	stw	fp,16(sp)
   31cec:	df000404 	addi	fp,sp,16
   31cf0:	e13ffd15 	stw	r4,-12(fp)
   31cf4:	e17ffe15 	stw	r5,-8(fp)
   31cf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   31cfc:	e0bffd17 	ldw	r2,-12(fp)
   31d00:	10800017 	ldw	r2,0(r2)
   31d04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   31d08:	e0bffc17 	ldw	r2,-16(fp)
   31d0c:	10800a04 	addi	r2,r2,40
   31d10:	1009883a 	mov	r4,r2
   31d14:	e17ffe17 	ldw	r5,-8(fp)
   31d18:	e1bfff17 	ldw	r6,-4(fp)
   31d1c:	003210c0 	call	3210c <altera_avalon_jtag_uart_ioctl>
}
   31d20:	e037883a 	mov	sp,fp
   31d24:	dfc00117 	ldw	ra,4(sp)
   31d28:	df000017 	ldw	fp,0(sp)
   31d2c:	dec00204 	addi	sp,sp,8
   31d30:	f800283a 	ret

00031d34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   31d34:	defffa04 	addi	sp,sp,-24
   31d38:	dfc00515 	stw	ra,20(sp)
   31d3c:	df000415 	stw	fp,16(sp)
   31d40:	df000404 	addi	fp,sp,16
   31d44:	e13ffd15 	stw	r4,-12(fp)
   31d48:	e17ffe15 	stw	r5,-8(fp)
   31d4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   31d50:	e0bffd17 	ldw	r2,-12(fp)
   31d54:	00c00044 	movi	r3,1
   31d58:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   31d5c:	e0bffd17 	ldw	r2,-12(fp)
   31d60:	10800017 	ldw	r2,0(r2)
   31d64:	10800104 	addi	r2,r2,4
   31d68:	1007883a 	mov	r3,r2
   31d6c:	e0bffd17 	ldw	r2,-12(fp)
   31d70:	10800817 	ldw	r2,32(r2)
   31d74:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   31d78:	e0fffe17 	ldw	r3,-8(fp)
   31d7c:	e0bfff17 	ldw	r2,-4(fp)
   31d80:	d8000015 	stw	zero,0(sp)
   31d84:	1809883a 	mov	r4,r3
   31d88:	100b883a 	mov	r5,r2
   31d8c:	018000f4 	movhi	r6,3
   31d90:	31877e04 	addi	r6,r6,7672
   31d94:	e1fffd17 	ldw	r7,-12(fp)
   31d98:	0030f100 	call	30f10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   31d9c:	e0bffd17 	ldw	r2,-12(fp)
   31da0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   31da4:	e0bffd17 	ldw	r2,-12(fp)
   31da8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   31dac:	008000f4 	movhi	r2,3
   31db0:	109c6e04 	addi	r2,r2,29112
   31db4:	10800017 	ldw	r2,0(r2)
   31db8:	1809883a 	mov	r4,r3
   31dbc:	100b883a 	mov	r5,r2
   31dc0:	018000f4 	movhi	r6,3
   31dc4:	3187ff04 	addi	r6,r6,8188
   31dc8:	e1fffd17 	ldw	r7,-12(fp)
   31dcc:	00327180 	call	32718 <alt_alarm_start>
   31dd0:	1000040e 	bge	r2,zero,31de4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   31dd4:	e0fffd17 	ldw	r3,-12(fp)
   31dd8:	00a00034 	movhi	r2,32768
   31ddc:	10bfffc4 	addi	r2,r2,-1
   31de0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   31de4:	e037883a 	mov	sp,fp
   31de8:	dfc00117 	ldw	ra,4(sp)
   31dec:	df000017 	ldw	fp,0(sp)
   31df0:	dec00204 	addi	sp,sp,8
   31df4:	f800283a 	ret

00031df8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   31df8:	defff804 	addi	sp,sp,-32
   31dfc:	df000715 	stw	fp,28(sp)
   31e00:	df000704 	addi	fp,sp,28
   31e04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   31e08:	e0bfff17 	ldw	r2,-4(fp)
   31e0c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   31e10:	e0bffb17 	ldw	r2,-20(fp)
   31e14:	10800017 	ldw	r2,0(r2)
   31e18:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   31e1c:	e0bffc17 	ldw	r2,-16(fp)
   31e20:	10800104 	addi	r2,r2,4
   31e24:	10800037 	ldwio	r2,0(r2)
   31e28:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   31e2c:	e0bffd17 	ldw	r2,-12(fp)
   31e30:	1080c00c 	andi	r2,r2,768
   31e34:	1000011e 	bne	r2,zero,31e3c <altera_avalon_jtag_uart_irq+0x44>
      break;
   31e38:	00006c06 	br	31fec <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   31e3c:	e0bffd17 	ldw	r2,-12(fp)
   31e40:	1080400c 	andi	r2,r2,256
   31e44:	10003426 	beq	r2,zero,31f18 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   31e48:	00800074 	movhi	r2,1
   31e4c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31e50:	e0bffb17 	ldw	r2,-20(fp)
   31e54:	10800a17 	ldw	r2,40(r2)
   31e58:	10800044 	addi	r2,r2,1
   31e5c:	1081ffcc 	andi	r2,r2,2047
   31e60:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   31e64:	e0bffb17 	ldw	r2,-20(fp)
   31e68:	10c00b17 	ldw	r3,44(r2)
   31e6c:	e0bffe17 	ldw	r2,-8(fp)
   31e70:	1880011e 	bne	r3,r2,31e78 <altera_avalon_jtag_uart_irq+0x80>
          break;
   31e74:	00001606 	br	31ed0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   31e78:	e0bffc17 	ldw	r2,-16(fp)
   31e7c:	10800037 	ldwio	r2,0(r2)
   31e80:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   31e84:	e0bff917 	ldw	r2,-28(fp)
   31e88:	10a0000c 	andi	r2,r2,32768
   31e8c:	1000011e 	bne	r2,zero,31e94 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   31e90:	00000f06 	br	31ed0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   31e94:	e0bffb17 	ldw	r2,-20(fp)
   31e98:	10800a17 	ldw	r2,40(r2)
   31e9c:	e0fff917 	ldw	r3,-28(fp)
   31ea0:	1809883a 	mov	r4,r3
   31ea4:	e0fffb17 	ldw	r3,-20(fp)
   31ea8:	1885883a 	add	r2,r3,r2
   31eac:	10800e04 	addi	r2,r2,56
   31eb0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31eb4:	e0bffb17 	ldw	r2,-20(fp)
   31eb8:	10800a17 	ldw	r2,40(r2)
   31ebc:	10800044 	addi	r2,r2,1
   31ec0:	10c1ffcc 	andi	r3,r2,2047
   31ec4:	e0bffb17 	ldw	r2,-20(fp)
   31ec8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   31ecc:	003fe006 	br	31e50 <__alt_data_end+0xffff2280>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   31ed0:	e0bff917 	ldw	r2,-28(fp)
   31ed4:	10bfffec 	andhi	r2,r2,65535
   31ed8:	10000f26 	beq	r2,zero,31f18 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   31edc:	e0bffb17 	ldw	r2,-20(fp)
   31ee0:	10c00817 	ldw	r3,32(r2)
   31ee4:	00bfff84 	movi	r2,-2
   31ee8:	1886703a 	and	r3,r3,r2
   31eec:	e0bffb17 	ldw	r2,-20(fp)
   31ef0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   31ef4:	e0bffc17 	ldw	r2,-16(fp)
   31ef8:	10800104 	addi	r2,r2,4
   31efc:	1007883a 	mov	r3,r2
   31f00:	e0bffb17 	ldw	r2,-20(fp)
   31f04:	10800817 	ldw	r2,32(r2)
   31f08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   31f0c:	e0bffc17 	ldw	r2,-16(fp)
   31f10:	10800104 	addi	r2,r2,4
   31f14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   31f18:	e0bffd17 	ldw	r2,-12(fp)
   31f1c:	1080800c 	andi	r2,r2,512
   31f20:	10003126 	beq	r2,zero,31fe8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   31f24:	e0bffd17 	ldw	r2,-12(fp)
   31f28:	1004d43a 	srli	r2,r2,16
   31f2c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   31f30:	00001406 	br	31f84 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   31f34:	e0bffc17 	ldw	r2,-16(fp)
   31f38:	e0fffb17 	ldw	r3,-20(fp)
   31f3c:	18c00d17 	ldw	r3,52(r3)
   31f40:	e13ffb17 	ldw	r4,-20(fp)
   31f44:	20c7883a 	add	r3,r4,r3
   31f48:	18c20e04 	addi	r3,r3,2104
   31f4c:	18c00003 	ldbu	r3,0(r3)
   31f50:	18c03fcc 	andi	r3,r3,255
   31f54:	18c0201c 	xori	r3,r3,128
   31f58:	18ffe004 	addi	r3,r3,-128
   31f5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31f60:	e0bffb17 	ldw	r2,-20(fp)
   31f64:	10800d17 	ldw	r2,52(r2)
   31f68:	10800044 	addi	r2,r2,1
   31f6c:	10c1ffcc 	andi	r3,r2,2047
   31f70:	e0bffb17 	ldw	r2,-20(fp)
   31f74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   31f78:	e0bffa17 	ldw	r2,-24(fp)
   31f7c:	10bfffc4 	addi	r2,r2,-1
   31f80:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   31f84:	e0bffa17 	ldw	r2,-24(fp)
   31f88:	10000526 	beq	r2,zero,31fa0 <altera_avalon_jtag_uart_irq+0x1a8>
   31f8c:	e0bffb17 	ldw	r2,-20(fp)
   31f90:	10c00d17 	ldw	r3,52(r2)
   31f94:	e0bffb17 	ldw	r2,-20(fp)
   31f98:	10800c17 	ldw	r2,48(r2)
   31f9c:	18bfe51e 	bne	r3,r2,31f34 <__alt_data_end+0xffff2364>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   31fa0:	e0bffa17 	ldw	r2,-24(fp)
   31fa4:	10001026 	beq	r2,zero,31fe8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   31fa8:	e0bffb17 	ldw	r2,-20(fp)
   31fac:	10c00817 	ldw	r3,32(r2)
   31fb0:	00bfff44 	movi	r2,-3
   31fb4:	1886703a 	and	r3,r3,r2
   31fb8:	e0bffb17 	ldw	r2,-20(fp)
   31fbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   31fc0:	e0bffb17 	ldw	r2,-20(fp)
   31fc4:	10800017 	ldw	r2,0(r2)
   31fc8:	10800104 	addi	r2,r2,4
   31fcc:	1007883a 	mov	r3,r2
   31fd0:	e0bffb17 	ldw	r2,-20(fp)
   31fd4:	10800817 	ldw	r2,32(r2)
   31fd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   31fdc:	e0bffc17 	ldw	r2,-16(fp)
   31fe0:	10800104 	addi	r2,r2,4
   31fe4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   31fe8:	003f8c06 	br	31e1c <__alt_data_end+0xffff224c>
}
   31fec:	e037883a 	mov	sp,fp
   31ff0:	df000017 	ldw	fp,0(sp)
   31ff4:	dec00104 	addi	sp,sp,4
   31ff8:	f800283a 	ret

00031ffc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   31ffc:	defff804 	addi	sp,sp,-32
   32000:	df000715 	stw	fp,28(sp)
   32004:	df000704 	addi	fp,sp,28
   32008:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3200c:	e0bffb17 	ldw	r2,-20(fp)
   32010:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   32014:	e0bff917 	ldw	r2,-28(fp)
   32018:	10800017 	ldw	r2,0(r2)
   3201c:	10800104 	addi	r2,r2,4
   32020:	10800037 	ldwio	r2,0(r2)
   32024:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   32028:	e0bffa17 	ldw	r2,-24(fp)
   3202c:	1081000c 	andi	r2,r2,1024
   32030:	10000b26 	beq	r2,zero,32060 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   32034:	e0bff917 	ldw	r2,-28(fp)
   32038:	10800017 	ldw	r2,0(r2)
   3203c:	10800104 	addi	r2,r2,4
   32040:	1007883a 	mov	r3,r2
   32044:	e0bff917 	ldw	r2,-28(fp)
   32048:	10800817 	ldw	r2,32(r2)
   3204c:	10810014 	ori	r2,r2,1024
   32050:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   32054:	e0bff917 	ldw	r2,-28(fp)
   32058:	10000915 	stw	zero,36(r2)
   3205c:	00000a06 	br	32088 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   32060:	e0bff917 	ldw	r2,-28(fp)
   32064:	10c00917 	ldw	r3,36(r2)
   32068:	00a00034 	movhi	r2,32768
   3206c:	10bfff04 	addi	r2,r2,-4
   32070:	10c00536 	bltu	r2,r3,32088 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   32074:	e0bff917 	ldw	r2,-28(fp)
   32078:	10800917 	ldw	r2,36(r2)
   3207c:	10c00044 	addi	r3,r2,1
   32080:	e0bff917 	ldw	r2,-28(fp)
   32084:	10c00915 	stw	r3,36(r2)
   32088:	008000f4 	movhi	r2,3
   3208c:	109c6e04 	addi	r2,r2,29112
   32090:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   32094:	e037883a 	mov	sp,fp
   32098:	df000017 	ldw	fp,0(sp)
   3209c:	dec00104 	addi	sp,sp,4
   320a0:	f800283a 	ret

000320a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   320a4:	defffd04 	addi	sp,sp,-12
   320a8:	df000215 	stw	fp,8(sp)
   320ac:	df000204 	addi	fp,sp,8
   320b0:	e13ffe15 	stw	r4,-8(fp)
   320b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   320b8:	00000506 	br	320d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   320bc:	e0bfff17 	ldw	r2,-4(fp)
   320c0:	1090000c 	andi	r2,r2,16384
   320c4:	10000226 	beq	r2,zero,320d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   320c8:	00bffd44 	movi	r2,-11
   320cc:	00000b06 	br	320fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   320d0:	e0bffe17 	ldw	r2,-8(fp)
   320d4:	10c00d17 	ldw	r3,52(r2)
   320d8:	e0bffe17 	ldw	r2,-8(fp)
   320dc:	10800c17 	ldw	r2,48(r2)
   320e0:	18800526 	beq	r3,r2,320f8 <altera_avalon_jtag_uart_close+0x54>
   320e4:	e0bffe17 	ldw	r2,-8(fp)
   320e8:	10c00917 	ldw	r3,36(r2)
   320ec:	e0bffe17 	ldw	r2,-8(fp)
   320f0:	10800117 	ldw	r2,4(r2)
   320f4:	18bff136 	bltu	r3,r2,320bc <__alt_data_end+0xffff24ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   320f8:	0005883a 	mov	r2,zero
}
   320fc:	e037883a 	mov	sp,fp
   32100:	df000017 	ldw	fp,0(sp)
   32104:	dec00104 	addi	sp,sp,4
   32108:	f800283a 	ret

0003210c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3210c:	defffa04 	addi	sp,sp,-24
   32110:	df000515 	stw	fp,20(sp)
   32114:	df000504 	addi	fp,sp,20
   32118:	e13ffd15 	stw	r4,-12(fp)
   3211c:	e17ffe15 	stw	r5,-8(fp)
   32120:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   32124:	00bff9c4 	movi	r2,-25
   32128:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3212c:	e0bffe17 	ldw	r2,-8(fp)
   32130:	10da8060 	cmpeqi	r3,r2,27137
   32134:	1800031e 	bne	r3,zero,32144 <altera_avalon_jtag_uart_ioctl+0x38>
   32138:	109a80a0 	cmpeqi	r2,r2,27138
   3213c:	1000191e 	bne	r2,zero,321a4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   32140:	00002806 	br	321e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   32144:	e0bffd17 	ldw	r2,-12(fp)
   32148:	10c00117 	ldw	r3,4(r2)
   3214c:	00a00034 	movhi	r2,32768
   32150:	10bfffc4 	addi	r2,r2,-1
   32154:	18801226 	beq	r3,r2,321a0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   32158:	e0bfff17 	ldw	r2,-4(fp)
   3215c:	10800017 	ldw	r2,0(r2)
   32160:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   32164:	e0bffc17 	ldw	r2,-16(fp)
   32168:	10800090 	cmplti	r2,r2,2
   3216c:	1000061e 	bne	r2,zero,32188 <altera_avalon_jtag_uart_ioctl+0x7c>
   32170:	e0fffc17 	ldw	r3,-16(fp)
   32174:	00a00034 	movhi	r2,32768
   32178:	10bfffc4 	addi	r2,r2,-1
   3217c:	18800226 	beq	r3,r2,32188 <altera_avalon_jtag_uart_ioctl+0x7c>
   32180:	e0bffc17 	ldw	r2,-16(fp)
   32184:	00000206 	br	32190 <altera_avalon_jtag_uart_ioctl+0x84>
   32188:	00a00034 	movhi	r2,32768
   3218c:	10bfff84 	addi	r2,r2,-2
   32190:	e0fffd17 	ldw	r3,-12(fp)
   32194:	18800115 	stw	r2,4(r3)
      rc = 0;
   32198:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3219c:	00001106 	br	321e4 <altera_avalon_jtag_uart_ioctl+0xd8>
   321a0:	00001006 	br	321e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   321a4:	e0bffd17 	ldw	r2,-12(fp)
   321a8:	10c00117 	ldw	r3,4(r2)
   321ac:	00a00034 	movhi	r2,32768
   321b0:	10bfffc4 	addi	r2,r2,-1
   321b4:	18800a26 	beq	r3,r2,321e0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   321b8:	e0bffd17 	ldw	r2,-12(fp)
   321bc:	10c00917 	ldw	r3,36(r2)
   321c0:	e0bffd17 	ldw	r2,-12(fp)
   321c4:	10800117 	ldw	r2,4(r2)
   321c8:	1885803a 	cmpltu	r2,r3,r2
   321cc:	10c03fcc 	andi	r3,r2,255
   321d0:	e0bfff17 	ldw	r2,-4(fp)
   321d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   321d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   321dc:	00000006 	br	321e0 <altera_avalon_jtag_uart_ioctl+0xd4>
   321e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   321e4:	e0bffb17 	ldw	r2,-20(fp)
}
   321e8:	e037883a 	mov	sp,fp
   321ec:	df000017 	ldw	fp,0(sp)
   321f0:	dec00104 	addi	sp,sp,4
   321f4:	f800283a 	ret

000321f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   321f8:	defff304 	addi	sp,sp,-52
   321fc:	dfc00c15 	stw	ra,48(sp)
   32200:	df000b15 	stw	fp,44(sp)
   32204:	df000b04 	addi	fp,sp,44
   32208:	e13ffc15 	stw	r4,-16(fp)
   3220c:	e17ffd15 	stw	r5,-12(fp)
   32210:	e1bffe15 	stw	r6,-8(fp)
   32214:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   32218:	e0bffd17 	ldw	r2,-12(fp)
   3221c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32220:	00004906 	br	32348 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   32224:	e0bffc17 	ldw	r2,-16(fp)
   32228:	10800a17 	ldw	r2,40(r2)
   3222c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   32230:	e0bffc17 	ldw	r2,-16(fp)
   32234:	10800b17 	ldw	r2,44(r2)
   32238:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   3223c:	e0fff717 	ldw	r3,-36(fp)
   32240:	e0bff817 	ldw	r2,-32(fp)
   32244:	18800536 	bltu	r3,r2,3225c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   32248:	e0fff717 	ldw	r3,-36(fp)
   3224c:	e0bff817 	ldw	r2,-32(fp)
   32250:	1885c83a 	sub	r2,r3,r2
   32254:	e0bff615 	stw	r2,-40(fp)
   32258:	00000406 	br	3226c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3225c:	00c20004 	movi	r3,2048
   32260:	e0bff817 	ldw	r2,-32(fp)
   32264:	1885c83a 	sub	r2,r3,r2
   32268:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3226c:	e0bff617 	ldw	r2,-40(fp)
   32270:	1000011e 	bne	r2,zero,32278 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   32274:	00001d06 	br	322ec <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   32278:	e0fffe17 	ldw	r3,-8(fp)
   3227c:	e0bff617 	ldw	r2,-40(fp)
   32280:	1880022e 	bgeu	r3,r2,3228c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   32284:	e0bffe17 	ldw	r2,-8(fp)
   32288:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3228c:	e0bff817 	ldw	r2,-32(fp)
   32290:	10800e04 	addi	r2,r2,56
   32294:	e0fffc17 	ldw	r3,-16(fp)
   32298:	1885883a 	add	r2,r3,r2
   3229c:	e13ff517 	ldw	r4,-44(fp)
   322a0:	100b883a 	mov	r5,r2
   322a4:	e1bff617 	ldw	r6,-40(fp)
   322a8:	0028ec00 	call	28ec0 <memcpy>
      ptr   += n;
   322ac:	e0fff517 	ldw	r3,-44(fp)
   322b0:	e0bff617 	ldw	r2,-40(fp)
   322b4:	1885883a 	add	r2,r3,r2
   322b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   322bc:	e0fffe17 	ldw	r3,-8(fp)
   322c0:	e0bff617 	ldw	r2,-40(fp)
   322c4:	1885c83a 	sub	r2,r3,r2
   322c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   322cc:	e0fff817 	ldw	r3,-32(fp)
   322d0:	e0bff617 	ldw	r2,-40(fp)
   322d4:	1885883a 	add	r2,r3,r2
   322d8:	10c1ffcc 	andi	r3,r2,2047
   322dc:	e0bffc17 	ldw	r2,-16(fp)
   322e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   322e4:	e0bffe17 	ldw	r2,-8(fp)
   322e8:	00bfce16 	blt	zero,r2,32224 <__alt_data_end+0xffff2654>

    /* If we read any data then return it */
    if (ptr != buffer)
   322ec:	e0fff517 	ldw	r3,-44(fp)
   322f0:	e0bffd17 	ldw	r2,-12(fp)
   322f4:	18800126 	beq	r3,r2,322fc <altera_avalon_jtag_uart_read+0x104>
      break;
   322f8:	00001506 	br	32350 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   322fc:	e0bfff17 	ldw	r2,-4(fp)
   32300:	1090000c 	andi	r2,r2,16384
   32304:	10000126 	beq	r2,zero,3230c <altera_avalon_jtag_uart_read+0x114>
      break;
   32308:	00001106 	br	32350 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3230c:	0001883a 	nop
   32310:	e0bffc17 	ldw	r2,-16(fp)
   32314:	10c00a17 	ldw	r3,40(r2)
   32318:	e0bff717 	ldw	r2,-36(fp)
   3231c:	1880051e 	bne	r3,r2,32334 <altera_avalon_jtag_uart_read+0x13c>
   32320:	e0bffc17 	ldw	r2,-16(fp)
   32324:	10c00917 	ldw	r3,36(r2)
   32328:	e0bffc17 	ldw	r2,-16(fp)
   3232c:	10800117 	ldw	r2,4(r2)
   32330:	18bff736 	bltu	r3,r2,32310 <__alt_data_end+0xffff2740>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   32334:	e0bffc17 	ldw	r2,-16(fp)
   32338:	10c00a17 	ldw	r3,40(r2)
   3233c:	e0bff717 	ldw	r2,-36(fp)
   32340:	1880011e 	bne	r3,r2,32348 <altera_avalon_jtag_uart_read+0x150>
      break;
   32344:	00000206 	br	32350 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32348:	e0bffe17 	ldw	r2,-8(fp)
   3234c:	00bfb516 	blt	zero,r2,32224 <__alt_data_end+0xffff2654>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   32350:	e0fff517 	ldw	r3,-44(fp)
   32354:	e0bffd17 	ldw	r2,-12(fp)
   32358:	18801826 	beq	r3,r2,323bc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3235c:	0005303a 	rdctl	r2,status
   32360:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32364:	e0fffa17 	ldw	r3,-24(fp)
   32368:	00bfff84 	movi	r2,-2
   3236c:	1884703a 	and	r2,r3,r2
   32370:	1001703a 	wrctl	status,r2
  
  return context;
   32374:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   32378:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3237c:	e0bffc17 	ldw	r2,-16(fp)
   32380:	10800817 	ldw	r2,32(r2)
   32384:	10c00054 	ori	r3,r2,1
   32388:	e0bffc17 	ldw	r2,-16(fp)
   3238c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32390:	e0bffc17 	ldw	r2,-16(fp)
   32394:	10800017 	ldw	r2,0(r2)
   32398:	10800104 	addi	r2,r2,4
   3239c:	1007883a 	mov	r3,r2
   323a0:	e0bffc17 	ldw	r2,-16(fp)
   323a4:	10800817 	ldw	r2,32(r2)
   323a8:	18800035 	stwio	r2,0(r3)
   323ac:	e0bff917 	ldw	r2,-28(fp)
   323b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   323b4:	e0bffb17 	ldw	r2,-20(fp)
   323b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   323bc:	e0fff517 	ldw	r3,-44(fp)
   323c0:	e0bffd17 	ldw	r2,-12(fp)
   323c4:	18800426 	beq	r3,r2,323d8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   323c8:	e0fff517 	ldw	r3,-44(fp)
   323cc:	e0bffd17 	ldw	r2,-12(fp)
   323d0:	1885c83a 	sub	r2,r3,r2
   323d4:	00000606 	br	323f0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   323d8:	e0bfff17 	ldw	r2,-4(fp)
   323dc:	1090000c 	andi	r2,r2,16384
   323e0:	10000226 	beq	r2,zero,323ec <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   323e4:	00bffd44 	movi	r2,-11
   323e8:	00000106 	br	323f0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   323ec:	00bffec4 	movi	r2,-5
}
   323f0:	e037883a 	mov	sp,fp
   323f4:	dfc00117 	ldw	ra,4(sp)
   323f8:	df000017 	ldw	fp,0(sp)
   323fc:	dec00204 	addi	sp,sp,8
   32400:	f800283a 	ret

00032404 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   32404:	defff304 	addi	sp,sp,-52
   32408:	dfc00c15 	stw	ra,48(sp)
   3240c:	df000b15 	stw	fp,44(sp)
   32410:	df000b04 	addi	fp,sp,44
   32414:	e13ffc15 	stw	r4,-16(fp)
   32418:	e17ffd15 	stw	r5,-12(fp)
   3241c:	e1bffe15 	stw	r6,-8(fp)
   32420:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   32424:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   32428:	e0bffd17 	ldw	r2,-12(fp)
   3242c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32430:	00003806 	br	32514 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   32434:	e0bffc17 	ldw	r2,-16(fp)
   32438:	10800c17 	ldw	r2,48(r2)
   3243c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   32440:	e0bffc17 	ldw	r2,-16(fp)
   32444:	10800d17 	ldw	r2,52(r2)
   32448:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   3244c:	e0fff817 	ldw	r3,-32(fp)
   32450:	e0bff517 	ldw	r2,-44(fp)
   32454:	1880062e 	bgeu	r3,r2,32470 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   32458:	e0fff517 	ldw	r3,-44(fp)
   3245c:	e0bff817 	ldw	r2,-32(fp)
   32460:	1885c83a 	sub	r2,r3,r2
   32464:	10bfffc4 	addi	r2,r2,-1
   32468:	e0bff615 	stw	r2,-40(fp)
   3246c:	00000b06 	br	3249c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   32470:	e0bff517 	ldw	r2,-44(fp)
   32474:	10000526 	beq	r2,zero,3248c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   32478:	00c20004 	movi	r3,2048
   3247c:	e0bff817 	ldw	r2,-32(fp)
   32480:	1885c83a 	sub	r2,r3,r2
   32484:	e0bff615 	stw	r2,-40(fp)
   32488:	00000406 	br	3249c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3248c:	00c1ffc4 	movi	r3,2047
   32490:	e0bff817 	ldw	r2,-32(fp)
   32494:	1885c83a 	sub	r2,r3,r2
   32498:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3249c:	e0bff617 	ldw	r2,-40(fp)
   324a0:	1000011e 	bne	r2,zero,324a8 <altera_avalon_jtag_uart_write+0xa4>
        break;
   324a4:	00001d06 	br	3251c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   324a8:	e0fffe17 	ldw	r3,-8(fp)
   324ac:	e0bff617 	ldw	r2,-40(fp)
   324b0:	1880022e 	bgeu	r3,r2,324bc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   324b4:	e0bffe17 	ldw	r2,-8(fp)
   324b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   324bc:	e0bff817 	ldw	r2,-32(fp)
   324c0:	10820e04 	addi	r2,r2,2104
   324c4:	e0fffc17 	ldw	r3,-16(fp)
   324c8:	1885883a 	add	r2,r3,r2
   324cc:	1009883a 	mov	r4,r2
   324d0:	e17ffd17 	ldw	r5,-12(fp)
   324d4:	e1bff617 	ldw	r6,-40(fp)
   324d8:	0028ec00 	call	28ec0 <memcpy>
      ptr   += n;
   324dc:	e0fffd17 	ldw	r3,-12(fp)
   324e0:	e0bff617 	ldw	r2,-40(fp)
   324e4:	1885883a 	add	r2,r3,r2
   324e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   324ec:	e0fffe17 	ldw	r3,-8(fp)
   324f0:	e0bff617 	ldw	r2,-40(fp)
   324f4:	1885c83a 	sub	r2,r3,r2
   324f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   324fc:	e0fff817 	ldw	r3,-32(fp)
   32500:	e0bff617 	ldw	r2,-40(fp)
   32504:	1885883a 	add	r2,r3,r2
   32508:	10c1ffcc 	andi	r3,r2,2047
   3250c:	e0bffc17 	ldw	r2,-16(fp)
   32510:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32514:	e0bffe17 	ldw	r2,-8(fp)
   32518:	00bfc616 	blt	zero,r2,32434 <__alt_data_end+0xffff2864>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3251c:	0005303a 	rdctl	r2,status
   32520:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32524:	e0fffa17 	ldw	r3,-24(fp)
   32528:	00bfff84 	movi	r2,-2
   3252c:	1884703a 	and	r2,r3,r2
   32530:	1001703a 	wrctl	status,r2
  
  return context;
   32534:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   32538:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3253c:	e0bffc17 	ldw	r2,-16(fp)
   32540:	10800817 	ldw	r2,32(r2)
   32544:	10c00094 	ori	r3,r2,2
   32548:	e0bffc17 	ldw	r2,-16(fp)
   3254c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32550:	e0bffc17 	ldw	r2,-16(fp)
   32554:	10800017 	ldw	r2,0(r2)
   32558:	10800104 	addi	r2,r2,4
   3255c:	1007883a 	mov	r3,r2
   32560:	e0bffc17 	ldw	r2,-16(fp)
   32564:	10800817 	ldw	r2,32(r2)
   32568:	18800035 	stwio	r2,0(r3)
   3256c:	e0bff917 	ldw	r2,-28(fp)
   32570:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32574:	e0bffb17 	ldw	r2,-20(fp)
   32578:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3257c:	e0bffe17 	ldw	r2,-8(fp)
   32580:	0080120e 	bge	zero,r2,325cc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   32584:	e0bfff17 	ldw	r2,-4(fp)
   32588:	1090000c 	andi	r2,r2,16384
   3258c:	10000126 	beq	r2,zero,32594 <altera_avalon_jtag_uart_write+0x190>
        break;
   32590:	00001006 	br	325d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   32594:	0001883a 	nop
   32598:	e0bffc17 	ldw	r2,-16(fp)
   3259c:	10c00d17 	ldw	r3,52(r2)
   325a0:	e0bff517 	ldw	r2,-44(fp)
   325a4:	1880051e 	bne	r3,r2,325bc <altera_avalon_jtag_uart_write+0x1b8>
   325a8:	e0bffc17 	ldw	r2,-16(fp)
   325ac:	10c00917 	ldw	r3,36(r2)
   325b0:	e0bffc17 	ldw	r2,-16(fp)
   325b4:	10800117 	ldw	r2,4(r2)
   325b8:	18bff736 	bltu	r3,r2,32598 <__alt_data_end+0xffff29c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   325bc:	e0bffc17 	ldw	r2,-16(fp)
   325c0:	10800917 	ldw	r2,36(r2)
   325c4:	10000126 	beq	r2,zero,325cc <altera_avalon_jtag_uart_write+0x1c8>
         break;
   325c8:	00000206 	br	325d4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   325cc:	e0bffe17 	ldw	r2,-8(fp)
   325d0:	00bf9716 	blt	zero,r2,32430 <__alt_data_end+0xffff2860>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   325d4:	e0fffd17 	ldw	r3,-12(fp)
   325d8:	e0bff717 	ldw	r2,-36(fp)
   325dc:	18800426 	beq	r3,r2,325f0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   325e0:	e0fffd17 	ldw	r3,-12(fp)
   325e4:	e0bff717 	ldw	r2,-36(fp)
   325e8:	1885c83a 	sub	r2,r3,r2
   325ec:	00000606 	br	32608 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   325f0:	e0bfff17 	ldw	r2,-4(fp)
   325f4:	1090000c 	andi	r2,r2,16384
   325f8:	10000226 	beq	r2,zero,32604 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   325fc:	00bffd44 	movi	r2,-11
   32600:	00000106 	br	32608 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   32604:	00bffec4 	movi	r2,-5
}
   32608:	e037883a 	mov	sp,fp
   3260c:	dfc00117 	ldw	ra,4(sp)
   32610:	df000017 	ldw	fp,0(sp)
   32614:	dec00204 	addi	sp,sp,8
   32618:	f800283a 	ret

0003261c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3261c:	defffa04 	addi	sp,sp,-24
   32620:	dfc00515 	stw	ra,20(sp)
   32624:	df000415 	stw	fp,16(sp)
   32628:	df000404 	addi	fp,sp,16
   3262c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   32630:	0007883a 	mov	r3,zero
   32634:	e0bfff17 	ldw	r2,-4(fp)
   32638:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3263c:	e0bfff17 	ldw	r2,-4(fp)
   32640:	10800104 	addi	r2,r2,4
   32644:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32648:	0005303a 	rdctl	r2,status
   3264c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32650:	e0fffd17 	ldw	r3,-12(fp)
   32654:	00bfff84 	movi	r2,-2
   32658:	1884703a 	and	r2,r3,r2
   3265c:	1001703a 	wrctl	status,r2
  
  return context;
   32660:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   32664:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   32668:	00318880 	call	31888 <alt_tick>
   3266c:	e0bffc17 	ldw	r2,-16(fp)
   32670:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32674:	e0bffe17 	ldw	r2,-8(fp)
   32678:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3267c:	e037883a 	mov	sp,fp
   32680:	dfc00117 	ldw	ra,4(sp)
   32684:	df000017 	ldw	fp,0(sp)
   32688:	dec00204 	addi	sp,sp,8
   3268c:	f800283a 	ret

00032690 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   32690:	defff804 	addi	sp,sp,-32
   32694:	dfc00715 	stw	ra,28(sp)
   32698:	df000615 	stw	fp,24(sp)
   3269c:	df000604 	addi	fp,sp,24
   326a0:	e13ffc15 	stw	r4,-16(fp)
   326a4:	e17ffd15 	stw	r5,-12(fp)
   326a8:	e1bffe15 	stw	r6,-8(fp)
   326ac:	e1ffff15 	stw	r7,-4(fp)
   326b0:	e0bfff17 	ldw	r2,-4(fp)
   326b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   326b8:	008000f4 	movhi	r2,3
   326bc:	109c6e04 	addi	r2,r2,29112
   326c0:	10800017 	ldw	r2,0(r2)
   326c4:	1000041e 	bne	r2,zero,326d8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   326c8:	008000f4 	movhi	r2,3
   326cc:	109c6e04 	addi	r2,r2,29112
   326d0:	e0fffb17 	ldw	r3,-20(fp)
   326d4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   326d8:	e0bffc17 	ldw	r2,-16(fp)
   326dc:	10800104 	addi	r2,r2,4
   326e0:	00c001c4 	movi	r3,7
   326e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   326e8:	d8000015 	stw	zero,0(sp)
   326ec:	e13ffd17 	ldw	r4,-12(fp)
   326f0:	e17ffe17 	ldw	r5,-8(fp)
   326f4:	018000f4 	movhi	r6,3
   326f8:	31898704 	addi	r6,r6,9756
   326fc:	e1fffc17 	ldw	r7,-16(fp)
   32700:	0030f100 	call	30f10 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   32704:	e037883a 	mov	sp,fp
   32708:	dfc00117 	ldw	ra,4(sp)
   3270c:	df000017 	ldw	fp,0(sp)
   32710:	dec00204 	addi	sp,sp,8
   32714:	f800283a 	ret

00032718 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   32718:	defff504 	addi	sp,sp,-44
   3271c:	df000a15 	stw	fp,40(sp)
   32720:	df000a04 	addi	fp,sp,40
   32724:	e13ffc15 	stw	r4,-16(fp)
   32728:	e17ffd15 	stw	r5,-12(fp)
   3272c:	e1bffe15 	stw	r6,-8(fp)
   32730:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   32734:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   32738:	008000f4 	movhi	r2,3
   3273c:	109c6e04 	addi	r2,r2,29112
   32740:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   32744:	10003f26 	beq	r2,zero,32844 <alt_alarm_start+0x12c>
  {
    if (alarm)
   32748:	e0bffc17 	ldw	r2,-16(fp)
   3274c:	10003b26 	beq	r2,zero,3283c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   32750:	e0bffc17 	ldw	r2,-16(fp)
   32754:	e0fffe17 	ldw	r3,-8(fp)
   32758:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   3275c:	e0bffc17 	ldw	r2,-16(fp)
   32760:	e0ffff17 	ldw	r3,-4(fp)
   32764:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32768:	0005303a 	rdctl	r2,status
   3276c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32770:	e0fff817 	ldw	r3,-32(fp)
   32774:	00bfff84 	movi	r2,-2
   32778:	1884703a 	and	r2,r3,r2
   3277c:	1001703a 	wrctl	status,r2
  
  return context;
   32780:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   32784:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   32788:	008000f4 	movhi	r2,3
   3278c:	109c6f04 	addi	r2,r2,29116
   32790:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   32794:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   32798:	e0fffd17 	ldw	r3,-12(fp)
   3279c:	e0bff617 	ldw	r2,-40(fp)
   327a0:	1885883a 	add	r2,r3,r2
   327a4:	10c00044 	addi	r3,r2,1
   327a8:	e0bffc17 	ldw	r2,-16(fp)
   327ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   327b0:	e0bffc17 	ldw	r2,-16(fp)
   327b4:	10c00217 	ldw	r3,8(r2)
   327b8:	e0bff617 	ldw	r2,-40(fp)
   327bc:	1880042e 	bgeu	r3,r2,327d0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   327c0:	e0bffc17 	ldw	r2,-16(fp)
   327c4:	00c00044 	movi	r3,1
   327c8:	10c00405 	stb	r3,16(r2)
   327cc:	00000206 	br	327d8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   327d0:	e0bffc17 	ldw	r2,-16(fp)
   327d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   327d8:	e0fffc17 	ldw	r3,-16(fp)
   327dc:	008000f4 	movhi	r2,3
   327e0:	1095a004 	addi	r2,r2,22144
   327e4:	e0bff915 	stw	r2,-28(fp)
   327e8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   327ec:	e0bffa17 	ldw	r2,-24(fp)
   327f0:	e0fff917 	ldw	r3,-28(fp)
   327f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   327f8:	e0bff917 	ldw	r2,-28(fp)
   327fc:	10c00017 	ldw	r3,0(r2)
   32800:	e0bffa17 	ldw	r2,-24(fp)
   32804:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   32808:	e0bff917 	ldw	r2,-28(fp)
   3280c:	10800017 	ldw	r2,0(r2)
   32810:	e0fffa17 	ldw	r3,-24(fp)
   32814:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   32818:	e0bff917 	ldw	r2,-28(fp)
   3281c:	e0fffa17 	ldw	r3,-24(fp)
   32820:	10c00015 	stw	r3,0(r2)
   32824:	e0bff717 	ldw	r2,-36(fp)
   32828:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3282c:	e0bffb17 	ldw	r2,-20(fp)
   32830:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   32834:	0005883a 	mov	r2,zero
   32838:	00000306 	br	32848 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   3283c:	00bffa84 	movi	r2,-22
   32840:	00000106 	br	32848 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   32844:	00bfde84 	movi	r2,-134
  }
}
   32848:	e037883a 	mov	sp,fp
   3284c:	df000017 	ldw	fp,0(sp)
   32850:	dec00104 	addi	sp,sp,4
   32854:	f800283a 	ret

00032858 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   32858:	defffa04 	addi	sp,sp,-24
   3285c:	dfc00515 	stw	ra,20(sp)
   32860:	df000415 	stw	fp,16(sp)
   32864:	df000404 	addi	fp,sp,16
   32868:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   3286c:	008000c4 	movi	r2,3
   32870:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   32874:	e0fffd17 	ldw	r3,-12(fp)
   32878:	008003f4 	movhi	r2,15
   3287c:	10909004 	addi	r2,r2,16960
   32880:	1885383a 	mul	r2,r3,r2
   32884:	0100bef4 	movhi	r4,763
   32888:	213c2004 	addi	r4,r4,-3968
   3288c:	100b883a 	mov	r5,r2
   32890:	002e6b40 	call	2e6b4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   32894:	01200034 	movhi	r4,32768
   32898:	213fffc4 	addi	r4,r4,-1
   3289c:	100b883a 	mov	r5,r2
   328a0:	002e6b40 	call	2e6b4 <__udivsi3>
   328a4:	e13fff17 	ldw	r4,-4(fp)
   328a8:	100b883a 	mov	r5,r2
   328ac:	002e6b40 	call	2e6b4 <__udivsi3>
   328b0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   328b4:	e0bffe17 	ldw	r2,-8(fp)
   328b8:	10002a26 	beq	r2,zero,32964 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   328bc:	e03ffc15 	stw	zero,-16(fp)
   328c0:	00001706 	br	32920 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   328c4:	00a00034 	movhi	r2,32768
   328c8:	10bfffc4 	addi	r2,r2,-1
   328cc:	10bfffc4 	addi	r2,r2,-1
   328d0:	103ffe1e 	bne	r2,zero,328cc <__alt_data_end+0xffff2cfc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   328d4:	e0fffd17 	ldw	r3,-12(fp)
   328d8:	008003f4 	movhi	r2,15
   328dc:	10909004 	addi	r2,r2,16960
   328e0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   328e4:	0100bef4 	movhi	r4,763
   328e8:	213c2004 	addi	r4,r4,-3968
   328ec:	100b883a 	mov	r5,r2
   328f0:	002e6b40 	call	2e6b4 <__udivsi3>
   328f4:	01200034 	movhi	r4,32768
   328f8:	213fffc4 	addi	r4,r4,-1
   328fc:	100b883a 	mov	r5,r2
   32900:	002e6b40 	call	2e6b4 <__udivsi3>
   32904:	1007883a 	mov	r3,r2
   32908:	e0bfff17 	ldw	r2,-4(fp)
   3290c:	10c5c83a 	sub	r2,r2,r3
   32910:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   32914:	e0bffc17 	ldw	r2,-16(fp)
   32918:	10800044 	addi	r2,r2,1
   3291c:	e0bffc15 	stw	r2,-16(fp)
   32920:	e0fffc17 	ldw	r3,-16(fp)
   32924:	e0bffe17 	ldw	r2,-8(fp)
   32928:	18bfe616 	blt	r3,r2,328c4 <__alt_data_end+0xffff2cf4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   3292c:	e0fffd17 	ldw	r3,-12(fp)
   32930:	008003f4 	movhi	r2,15
   32934:	10909004 	addi	r2,r2,16960
   32938:	1885383a 	mul	r2,r3,r2
   3293c:	0100bef4 	movhi	r4,763
   32940:	213c2004 	addi	r4,r4,-3968
   32944:	100b883a 	mov	r5,r2
   32948:	002e6b40 	call	2e6b4 <__udivsi3>
   3294c:	1007883a 	mov	r3,r2
   32950:	e0bfff17 	ldw	r2,-4(fp)
   32954:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   32958:	10bfffc4 	addi	r2,r2,-1
   3295c:	103ffe1e 	bne	r2,zero,32958 <__alt_data_end+0xffff2d88>
   32960:	00000d06 	br	32998 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   32964:	e0fffd17 	ldw	r3,-12(fp)
   32968:	008003f4 	movhi	r2,15
   3296c:	10909004 	addi	r2,r2,16960
   32970:	1885383a 	mul	r2,r3,r2
   32974:	0100bef4 	movhi	r4,763
   32978:	213c2004 	addi	r4,r4,-3968
   3297c:	100b883a 	mov	r5,r2
   32980:	002e6b40 	call	2e6b4 <__udivsi3>
   32984:	1007883a 	mov	r3,r2
   32988:	e0bfff17 	ldw	r2,-4(fp)
   3298c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   32990:	10bfffc4 	addi	r2,r2,-1
   32994:	00bffe16 	blt	zero,r2,32990 <__alt_data_end+0xffff2dc0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   32998:	0005883a 	mov	r2,zero
}
   3299c:	e037883a 	mov	sp,fp
   329a0:	dfc00117 	ldw	ra,4(sp)
   329a4:	df000017 	ldw	fp,0(sp)
   329a8:	dec00204 	addi	sp,sp,8
   329ac:	f800283a 	ret

000329b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   329b0:	defffe04 	addi	sp,sp,-8
   329b4:	df000115 	stw	fp,4(sp)
   329b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   329bc:	e03fff15 	stw	zero,-4(fp)
   329c0:	00000506 	br	329d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   329c4:	e0bfff17 	ldw	r2,-4(fp)
   329c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   329cc:	e0bfff17 	ldw	r2,-4(fp)
   329d0:	10800804 	addi	r2,r2,32
   329d4:	e0bfff15 	stw	r2,-4(fp)
   329d8:	e0bfff17 	ldw	r2,-4(fp)
   329dc:	10820030 	cmpltui	r2,r2,2048
   329e0:	103ff81e 	bne	r2,zero,329c4 <__alt_data_end+0xffff2df4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   329e4:	e037883a 	mov	sp,fp
   329e8:	df000017 	ldw	fp,0(sp)
   329ec:	dec00104 	addi	sp,sp,4
   329f0:	f800283a 	ret

000329f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   329f4:	defffe04 	addi	sp,sp,-8
   329f8:	dfc00115 	stw	ra,4(sp)
   329fc:	df000015 	stw	fp,0(sp)
   32a00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   32a04:	008000f4 	movhi	r2,3
   32a08:	10959d04 	addi	r2,r2,22132
   32a0c:	10800017 	ldw	r2,0(r2)
   32a10:	10000526 	beq	r2,zero,32a28 <alt_get_errno+0x34>
   32a14:	008000f4 	movhi	r2,3
   32a18:	10959d04 	addi	r2,r2,22132
   32a1c:	10800017 	ldw	r2,0(r2)
   32a20:	103ee83a 	callr	r2
   32a24:	00000206 	br	32a30 <alt_get_errno+0x3c>
   32a28:	008000f4 	movhi	r2,3
   32a2c:	109c6904 	addi	r2,r2,29092
}
   32a30:	e037883a 	mov	sp,fp
   32a34:	dfc00117 	ldw	ra,4(sp)
   32a38:	df000017 	ldw	fp,0(sp)
   32a3c:	dec00204 	addi	sp,sp,8
   32a40:	f800283a 	ret

00032a44 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   32a44:	defffa04 	addi	sp,sp,-24
   32a48:	dfc00515 	stw	ra,20(sp)
   32a4c:	df000415 	stw	fp,16(sp)
   32a50:	df000404 	addi	fp,sp,16
   32a54:	e13ffe15 	stw	r4,-8(fp)
   32a58:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   32a5c:	e0bffe17 	ldw	r2,-8(fp)
   32a60:	10000326 	beq	r2,zero,32a70 <alt_dev_llist_insert+0x2c>
   32a64:	e0bffe17 	ldw	r2,-8(fp)
   32a68:	10800217 	ldw	r2,8(r2)
   32a6c:	1000061e 	bne	r2,zero,32a88 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   32a70:	00329f40 	call	329f4 <alt_get_errno>
   32a74:	1007883a 	mov	r3,r2
   32a78:	00800584 	movi	r2,22
   32a7c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   32a80:	00bffa84 	movi	r2,-22
   32a84:	00001306 	br	32ad4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   32a88:	e0bffe17 	ldw	r2,-8(fp)
   32a8c:	e0ffff17 	ldw	r3,-4(fp)
   32a90:	e0fffc15 	stw	r3,-16(fp)
   32a94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   32a98:	e0bffd17 	ldw	r2,-12(fp)
   32a9c:	e0fffc17 	ldw	r3,-16(fp)
   32aa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   32aa4:	e0bffc17 	ldw	r2,-16(fp)
   32aa8:	10c00017 	ldw	r3,0(r2)
   32aac:	e0bffd17 	ldw	r2,-12(fp)
   32ab0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   32ab4:	e0bffc17 	ldw	r2,-16(fp)
   32ab8:	10800017 	ldw	r2,0(r2)
   32abc:	e0fffd17 	ldw	r3,-12(fp)
   32ac0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   32ac4:	e0bffc17 	ldw	r2,-16(fp)
   32ac8:	e0fffd17 	ldw	r3,-12(fp)
   32acc:	10c00015 	stw	r3,0(r2)

  return 0;  
   32ad0:	0005883a 	mov	r2,zero
}
   32ad4:	e037883a 	mov	sp,fp
   32ad8:	dfc00117 	ldw	ra,4(sp)
   32adc:	df000017 	ldw	fp,0(sp)
   32ae0:	dec00204 	addi	sp,sp,8
   32ae4:	f800283a 	ret

00032ae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   32ae8:	defffd04 	addi	sp,sp,-12
   32aec:	dfc00215 	stw	ra,8(sp)
   32af0:	df000115 	stw	fp,4(sp)
   32af4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   32af8:	008000f4 	movhi	r2,3
   32afc:	108daf04 	addi	r2,r2,14012
   32b00:	e0bfff15 	stw	r2,-4(fp)
   32b04:	00000606 	br	32b20 <_do_ctors+0x38>
        (*ctor) (); 
   32b08:	e0bfff17 	ldw	r2,-4(fp)
   32b0c:	10800017 	ldw	r2,0(r2)
   32b10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   32b14:	e0bfff17 	ldw	r2,-4(fp)
   32b18:	10bfff04 	addi	r2,r2,-4
   32b1c:	e0bfff15 	stw	r2,-4(fp)
   32b20:	e0ffff17 	ldw	r3,-4(fp)
   32b24:	008000f4 	movhi	r2,3
   32b28:	108db004 	addi	r2,r2,14016
   32b2c:	18bff62e 	bgeu	r3,r2,32b08 <__alt_data_end+0xffff2f38>
        (*ctor) (); 
}
   32b30:	e037883a 	mov	sp,fp
   32b34:	dfc00117 	ldw	ra,4(sp)
   32b38:	df000017 	ldw	fp,0(sp)
   32b3c:	dec00204 	addi	sp,sp,8
   32b40:	f800283a 	ret

00032b44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   32b44:	defffd04 	addi	sp,sp,-12
   32b48:	dfc00215 	stw	ra,8(sp)
   32b4c:	df000115 	stw	fp,4(sp)
   32b50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   32b54:	008000f4 	movhi	r2,3
   32b58:	108daf04 	addi	r2,r2,14012
   32b5c:	e0bfff15 	stw	r2,-4(fp)
   32b60:	00000606 	br	32b7c <_do_dtors+0x38>
        (*dtor) (); 
   32b64:	e0bfff17 	ldw	r2,-4(fp)
   32b68:	10800017 	ldw	r2,0(r2)
   32b6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   32b70:	e0bfff17 	ldw	r2,-4(fp)
   32b74:	10bfff04 	addi	r2,r2,-4
   32b78:	e0bfff15 	stw	r2,-4(fp)
   32b7c:	e0ffff17 	ldw	r3,-4(fp)
   32b80:	008000f4 	movhi	r2,3
   32b84:	108db004 	addi	r2,r2,14016
   32b88:	18bff62e 	bgeu	r3,r2,32b64 <__alt_data_end+0xffff2f94>
        (*dtor) (); 
}
   32b8c:	e037883a 	mov	sp,fp
   32b90:	dfc00117 	ldw	ra,4(sp)
   32b94:	df000017 	ldw	fp,0(sp)
   32b98:	dec00204 	addi	sp,sp,8
   32b9c:	f800283a 	ret

00032ba0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   32ba0:	defffe04 	addi	sp,sp,-8
   32ba4:	dfc00115 	stw	ra,4(sp)
   32ba8:	df000015 	stw	fp,0(sp)
   32bac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   32bb0:	0009883a 	mov	r4,zero
   32bb4:	01440004 	movi	r5,4096
   32bb8:	00332900 	call	33290 <alt_icache_flush>
#endif
}
   32bbc:	e037883a 	mov	sp,fp
   32bc0:	dfc00117 	ldw	ra,4(sp)
   32bc4:	df000017 	ldw	fp,0(sp)
   32bc8:	dec00204 	addi	sp,sp,8
   32bcc:	f800283a 	ret

00032bd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   32bd0:	defffe04 	addi	sp,sp,-8
   32bd4:	df000115 	stw	fp,4(sp)
   32bd8:	df000104 	addi	fp,sp,4
   32bdc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   32be0:	e0bfff17 	ldw	r2,-4(fp)
   32be4:	10bffe84 	addi	r2,r2,-6
   32be8:	10c00428 	cmpgeui	r3,r2,16
   32bec:	18001a1e 	bne	r3,zero,32c58 <alt_exception_cause_generated_bad_addr+0x88>
   32bf0:	100690ba 	slli	r3,r2,2
   32bf4:	008000f4 	movhi	r2,3
   32bf8:	108b0204 	addi	r2,r2,11272
   32bfc:	1885883a 	add	r2,r3,r2
   32c00:	10800017 	ldw	r2,0(r2)
   32c04:	1000683a 	jmp	r2
   32c08:	00032c48 	cmpgei	zero,zero,3249
   32c0c:	00032c48 	cmpgei	zero,zero,3249
   32c10:	00032c58 	cmpnei	zero,zero,3249
   32c14:	00032c58 	cmpnei	zero,zero,3249
   32c18:	00032c58 	cmpnei	zero,zero,3249
   32c1c:	00032c48 	cmpgei	zero,zero,3249
   32c20:	00032c50 	cmplti	zero,zero,3249
   32c24:	00032c58 	cmpnei	zero,zero,3249
   32c28:	00032c48 	cmpgei	zero,zero,3249
   32c2c:	00032c48 	cmpgei	zero,zero,3249
   32c30:	00032c58 	cmpnei	zero,zero,3249
   32c34:	00032c48 	cmpgei	zero,zero,3249
   32c38:	00032c50 	cmplti	zero,zero,3249
   32c3c:	00032c58 	cmpnei	zero,zero,3249
   32c40:	00032c58 	cmpnei	zero,zero,3249
   32c44:	00032c48 	cmpgei	zero,zero,3249
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   32c48:	00800044 	movi	r2,1
   32c4c:	00000306 	br	32c5c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   32c50:	0005883a 	mov	r2,zero
   32c54:	00000106 	br	32c5c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   32c58:	0005883a 	mov	r2,zero
  }
}
   32c5c:	e037883a 	mov	sp,fp
   32c60:	df000017 	ldw	fp,0(sp)
   32c64:	dec00104 	addi	sp,sp,4
   32c68:	f800283a 	ret

00032c6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   32c6c:	defff904 	addi	sp,sp,-28
   32c70:	dfc00615 	stw	ra,24(sp)
   32c74:	df000515 	stw	fp,20(sp)
   32c78:	df000504 	addi	fp,sp,20
   32c7c:	e13ffc15 	stw	r4,-16(fp)
   32c80:	e17ffd15 	stw	r5,-12(fp)
   32c84:	e1bffe15 	stw	r6,-8(fp)
   32c88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   32c8c:	e13ffd17 	ldw	r4,-12(fp)
   32c90:	e17ffe17 	ldw	r5,-8(fp)
   32c94:	e1bfff17 	ldw	r6,-4(fp)
   32c98:	0032ec00 	call	32ec0 <open>
   32c9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   32ca0:	e0bffb17 	ldw	r2,-20(fp)
   32ca4:	10001c16 	blt	r2,zero,32d18 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   32ca8:	008000f4 	movhi	r2,3
   32cac:	10911a04 	addi	r2,r2,17512
   32cb0:	e0fffb17 	ldw	r3,-20(fp)
   32cb4:	18c00324 	muli	r3,r3,12
   32cb8:	10c5883a 	add	r2,r2,r3
   32cbc:	10c00017 	ldw	r3,0(r2)
   32cc0:	e0bffc17 	ldw	r2,-16(fp)
   32cc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   32cc8:	008000f4 	movhi	r2,3
   32ccc:	10911a04 	addi	r2,r2,17512
   32cd0:	e0fffb17 	ldw	r3,-20(fp)
   32cd4:	18c00324 	muli	r3,r3,12
   32cd8:	10c5883a 	add	r2,r2,r3
   32cdc:	10800104 	addi	r2,r2,4
   32ce0:	10c00017 	ldw	r3,0(r2)
   32ce4:	e0bffc17 	ldw	r2,-16(fp)
   32ce8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   32cec:	008000f4 	movhi	r2,3
   32cf0:	10911a04 	addi	r2,r2,17512
   32cf4:	e0fffb17 	ldw	r3,-20(fp)
   32cf8:	18c00324 	muli	r3,r3,12
   32cfc:	10c5883a 	add	r2,r2,r3
   32d00:	10800204 	addi	r2,r2,8
   32d04:	10c00017 	ldw	r3,0(r2)
   32d08:	e0bffc17 	ldw	r2,-16(fp)
   32d0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   32d10:	e13ffb17 	ldw	r4,-20(fp)
   32d14:	00316e00 	call	316e0 <alt_release_fd>
  }
} 
   32d18:	e037883a 	mov	sp,fp
   32d1c:	dfc00117 	ldw	ra,4(sp)
   32d20:	df000017 	ldw	fp,0(sp)
   32d24:	dec00204 	addi	sp,sp,8
   32d28:	f800283a 	ret

00032d2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   32d2c:	defffb04 	addi	sp,sp,-20
   32d30:	dfc00415 	stw	ra,16(sp)
   32d34:	df000315 	stw	fp,12(sp)
   32d38:	df000304 	addi	fp,sp,12
   32d3c:	e13ffd15 	stw	r4,-12(fp)
   32d40:	e17ffe15 	stw	r5,-8(fp)
   32d44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   32d48:	010000f4 	movhi	r4,3
   32d4c:	21111d04 	addi	r4,r4,17524
   32d50:	e17ffd17 	ldw	r5,-12(fp)
   32d54:	01800044 	movi	r6,1
   32d58:	01c07fc4 	movi	r7,511
   32d5c:	0032c6c0 	call	32c6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   32d60:	010000f4 	movhi	r4,3
   32d64:	21111a04 	addi	r4,r4,17512
   32d68:	e17ffe17 	ldw	r5,-8(fp)
   32d6c:	000d883a 	mov	r6,zero
   32d70:	01c07fc4 	movi	r7,511
   32d74:	0032c6c0 	call	32c6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   32d78:	010000f4 	movhi	r4,3
   32d7c:	21112004 	addi	r4,r4,17536
   32d80:	e17fff17 	ldw	r5,-4(fp)
   32d84:	01800044 	movi	r6,1
   32d88:	01c07fc4 	movi	r7,511
   32d8c:	0032c6c0 	call	32c6c <alt_open_fd>
}  
   32d90:	e037883a 	mov	sp,fp
   32d94:	dfc00117 	ldw	ra,4(sp)
   32d98:	df000017 	ldw	fp,0(sp)
   32d9c:	dec00204 	addi	sp,sp,8
   32da0:	f800283a 	ret

00032da4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   32da4:	defffe04 	addi	sp,sp,-8
   32da8:	dfc00115 	stw	ra,4(sp)
   32dac:	df000015 	stw	fp,0(sp)
   32db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   32db4:	008000f4 	movhi	r2,3
   32db8:	10959d04 	addi	r2,r2,22132
   32dbc:	10800017 	ldw	r2,0(r2)
   32dc0:	10000526 	beq	r2,zero,32dd8 <alt_get_errno+0x34>
   32dc4:	008000f4 	movhi	r2,3
   32dc8:	10959d04 	addi	r2,r2,22132
   32dcc:	10800017 	ldw	r2,0(r2)
   32dd0:	103ee83a 	callr	r2
   32dd4:	00000206 	br	32de0 <alt_get_errno+0x3c>
   32dd8:	008000f4 	movhi	r2,3
   32ddc:	109c6904 	addi	r2,r2,29092
}
   32de0:	e037883a 	mov	sp,fp
   32de4:	dfc00117 	ldw	ra,4(sp)
   32de8:	df000017 	ldw	fp,0(sp)
   32dec:	dec00204 	addi	sp,sp,8
   32df0:	f800283a 	ret

00032df4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   32df4:	defffd04 	addi	sp,sp,-12
   32df8:	df000215 	stw	fp,8(sp)
   32dfc:	df000204 	addi	fp,sp,8
   32e00:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   32e04:	e0bfff17 	ldw	r2,-4(fp)
   32e08:	10800217 	ldw	r2,8(r2)
   32e0c:	10d00034 	orhi	r3,r2,16384
   32e10:	e0bfff17 	ldw	r2,-4(fp)
   32e14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   32e18:	e03ffe15 	stw	zero,-8(fp)
   32e1c:	00001d06 	br	32e94 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   32e20:	008000f4 	movhi	r2,3
   32e24:	10911a04 	addi	r2,r2,17512
   32e28:	e0fffe17 	ldw	r3,-8(fp)
   32e2c:	18c00324 	muli	r3,r3,12
   32e30:	10c5883a 	add	r2,r2,r3
   32e34:	10c00017 	ldw	r3,0(r2)
   32e38:	e0bfff17 	ldw	r2,-4(fp)
   32e3c:	10800017 	ldw	r2,0(r2)
   32e40:	1880111e 	bne	r3,r2,32e88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   32e44:	008000f4 	movhi	r2,3
   32e48:	10911a04 	addi	r2,r2,17512
   32e4c:	e0fffe17 	ldw	r3,-8(fp)
   32e50:	18c00324 	muli	r3,r3,12
   32e54:	10c5883a 	add	r2,r2,r3
   32e58:	10800204 	addi	r2,r2,8
   32e5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   32e60:	1000090e 	bge	r2,zero,32e88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   32e64:	e0bffe17 	ldw	r2,-8(fp)
   32e68:	10c00324 	muli	r3,r2,12
   32e6c:	008000f4 	movhi	r2,3
   32e70:	10911a04 	addi	r2,r2,17512
   32e74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   32e78:	e0bfff17 	ldw	r2,-4(fp)
   32e7c:	18800226 	beq	r3,r2,32e88 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   32e80:	00bffcc4 	movi	r2,-13
   32e84:	00000a06 	br	32eb0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   32e88:	e0bffe17 	ldw	r2,-8(fp)
   32e8c:	10800044 	addi	r2,r2,1
   32e90:	e0bffe15 	stw	r2,-8(fp)
   32e94:	008000f4 	movhi	r2,3
   32e98:	10959c04 	addi	r2,r2,22128
   32e9c:	10800017 	ldw	r2,0(r2)
   32ea0:	1007883a 	mov	r3,r2
   32ea4:	e0bffe17 	ldw	r2,-8(fp)
   32ea8:	18bfdd2e 	bgeu	r3,r2,32e20 <__alt_data_end+0xffff3250>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   32eac:	0005883a 	mov	r2,zero
}
   32eb0:	e037883a 	mov	sp,fp
   32eb4:	df000017 	ldw	fp,0(sp)
   32eb8:	dec00104 	addi	sp,sp,4
   32ebc:	f800283a 	ret

00032ec0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   32ec0:	defff604 	addi	sp,sp,-40
   32ec4:	dfc00915 	stw	ra,36(sp)
   32ec8:	df000815 	stw	fp,32(sp)
   32ecc:	df000804 	addi	fp,sp,32
   32ed0:	e13ffd15 	stw	r4,-12(fp)
   32ed4:	e17ffe15 	stw	r5,-8(fp)
   32ed8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   32edc:	00bfffc4 	movi	r2,-1
   32ee0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   32ee4:	00bffb44 	movi	r2,-19
   32ee8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   32eec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   32ef0:	e13ffd17 	ldw	r4,-12(fp)
   32ef4:	014000f4 	movhi	r5,3
   32ef8:	29559a04 	addi	r5,r5,22120
   32efc:	00330380 	call	33038 <alt_find_dev>
   32f00:	e0bff815 	stw	r2,-32(fp)
   32f04:	e0bff817 	ldw	r2,-32(fp)
   32f08:	1000051e 	bne	r2,zero,32f20 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   32f0c:	e13ffd17 	ldw	r4,-12(fp)
   32f10:	00330c80 	call	330c8 <alt_find_file>
   32f14:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   32f18:	00800044 	movi	r2,1
   32f1c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   32f20:	e0bff817 	ldw	r2,-32(fp)
   32f24:	10002926 	beq	r2,zero,32fcc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   32f28:	e13ff817 	ldw	r4,-32(fp)
   32f2c:	00331dc0 	call	331dc <alt_get_fd>
   32f30:	e0bff915 	stw	r2,-28(fp)
   32f34:	e0bff917 	ldw	r2,-28(fp)
   32f38:	1000030e 	bge	r2,zero,32f48 <open+0x88>
    {
      status = index;
   32f3c:	e0bff917 	ldw	r2,-28(fp)
   32f40:	e0bffa15 	stw	r2,-24(fp)
   32f44:	00002306 	br	32fd4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   32f48:	e0bff917 	ldw	r2,-28(fp)
   32f4c:	10c00324 	muli	r3,r2,12
   32f50:	008000f4 	movhi	r2,3
   32f54:	10911a04 	addi	r2,r2,17512
   32f58:	1885883a 	add	r2,r3,r2
   32f5c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   32f60:	e0fffe17 	ldw	r3,-8(fp)
   32f64:	00900034 	movhi	r2,16384
   32f68:	10bfffc4 	addi	r2,r2,-1
   32f6c:	1886703a 	and	r3,r3,r2
   32f70:	e0bffc17 	ldw	r2,-16(fp)
   32f74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   32f78:	e0bffb17 	ldw	r2,-20(fp)
   32f7c:	1000051e 	bne	r2,zero,32f94 <open+0xd4>
   32f80:	e13ffc17 	ldw	r4,-16(fp)
   32f84:	0032df40 	call	32df4 <alt_file_locked>
   32f88:	e0bffa15 	stw	r2,-24(fp)
   32f8c:	e0bffa17 	ldw	r2,-24(fp)
   32f90:	10001016 	blt	r2,zero,32fd4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   32f94:	e0bff817 	ldw	r2,-32(fp)
   32f98:	10800317 	ldw	r2,12(r2)
   32f9c:	10000826 	beq	r2,zero,32fc0 <open+0x100>
   32fa0:	e0bff817 	ldw	r2,-32(fp)
   32fa4:	10800317 	ldw	r2,12(r2)
   32fa8:	e13ffc17 	ldw	r4,-16(fp)
   32fac:	e17ffd17 	ldw	r5,-12(fp)
   32fb0:	e1bffe17 	ldw	r6,-8(fp)
   32fb4:	e1ffff17 	ldw	r7,-4(fp)
   32fb8:	103ee83a 	callr	r2
   32fbc:	00000106 	br	32fc4 <open+0x104>
   32fc0:	0005883a 	mov	r2,zero
   32fc4:	e0bffa15 	stw	r2,-24(fp)
   32fc8:	00000206 	br	32fd4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   32fcc:	00bffb44 	movi	r2,-19
   32fd0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   32fd4:	e0bffa17 	ldw	r2,-24(fp)
   32fd8:	1000090e 	bge	r2,zero,33000 <open+0x140>
  {
    alt_release_fd (index);  
   32fdc:	e13ff917 	ldw	r4,-28(fp)
   32fe0:	00316e00 	call	316e0 <alt_release_fd>
    ALT_ERRNO = -status;
   32fe4:	0032da40 	call	32da4 <alt_get_errno>
   32fe8:	1007883a 	mov	r3,r2
   32fec:	e0bffa17 	ldw	r2,-24(fp)
   32ff0:	0085c83a 	sub	r2,zero,r2
   32ff4:	18800015 	stw	r2,0(r3)
    return -1;
   32ff8:	00bfffc4 	movi	r2,-1
   32ffc:	00000106 	br	33004 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   33000:	e0bff917 	ldw	r2,-28(fp)
}
   33004:	e037883a 	mov	sp,fp
   33008:	dfc00117 	ldw	ra,4(sp)
   3300c:	df000017 	ldw	fp,0(sp)
   33010:	dec00204 	addi	sp,sp,8
   33014:	f800283a 	ret

00033018 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   33018:	deffff04 	addi	sp,sp,-4
   3301c:	df000015 	stw	fp,0(sp)
   33020:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   33024:	000170fa 	wrctl	ienable,zero
}
   33028:	e037883a 	mov	sp,fp
   3302c:	df000017 	ldw	fp,0(sp)
   33030:	dec00104 	addi	sp,sp,4
   33034:	f800283a 	ret

00033038 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   33038:	defffa04 	addi	sp,sp,-24
   3303c:	dfc00515 	stw	ra,20(sp)
   33040:	df000415 	stw	fp,16(sp)
   33044:	df000404 	addi	fp,sp,16
   33048:	e13ffe15 	stw	r4,-8(fp)
   3304c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   33050:	e0bfff17 	ldw	r2,-4(fp)
   33054:	10800017 	ldw	r2,0(r2)
   33058:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3305c:	e13ffe17 	ldw	r4,-8(fp)
   33060:	00217a80 	call	217a8 <strlen>
   33064:	10800044 	addi	r2,r2,1
   33068:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3306c:	00000d06 	br	330a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   33070:	e0bffc17 	ldw	r2,-16(fp)
   33074:	10c00217 	ldw	r3,8(r2)
   33078:	e0bffd17 	ldw	r2,-12(fp)
   3307c:	1809883a 	mov	r4,r3
   33080:	e17ffe17 	ldw	r5,-8(fp)
   33084:	100d883a 	mov	r6,r2
   33088:	00333680 	call	33368 <memcmp>
   3308c:	1000021e 	bne	r2,zero,33098 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   33090:	e0bffc17 	ldw	r2,-16(fp)
   33094:	00000706 	br	330b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   33098:	e0bffc17 	ldw	r2,-16(fp)
   3309c:	10800017 	ldw	r2,0(r2)
   330a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   330a4:	e0fffc17 	ldw	r3,-16(fp)
   330a8:	e0bfff17 	ldw	r2,-4(fp)
   330ac:	18bff01e 	bne	r3,r2,33070 <__alt_data_end+0xffff34a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   330b0:	0005883a 	mov	r2,zero
}
   330b4:	e037883a 	mov	sp,fp
   330b8:	dfc00117 	ldw	ra,4(sp)
   330bc:	df000017 	ldw	fp,0(sp)
   330c0:	dec00204 	addi	sp,sp,8
   330c4:	f800283a 	ret

000330c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   330c8:	defffb04 	addi	sp,sp,-20
   330cc:	dfc00415 	stw	ra,16(sp)
   330d0:	df000315 	stw	fp,12(sp)
   330d4:	df000304 	addi	fp,sp,12
   330d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   330dc:	008000f4 	movhi	r2,3
   330e0:	10959804 	addi	r2,r2,22112
   330e4:	10800017 	ldw	r2,0(r2)
   330e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   330ec:	00003106 	br	331b4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   330f0:	e0bffd17 	ldw	r2,-12(fp)
   330f4:	10800217 	ldw	r2,8(r2)
   330f8:	1009883a 	mov	r4,r2
   330fc:	00217a80 	call	217a8 <strlen>
   33100:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   33104:	e0bffd17 	ldw	r2,-12(fp)
   33108:	10c00217 	ldw	r3,8(r2)
   3310c:	e0bffe17 	ldw	r2,-8(fp)
   33110:	10bfffc4 	addi	r2,r2,-1
   33114:	1885883a 	add	r2,r3,r2
   33118:	10800003 	ldbu	r2,0(r2)
   3311c:	10803fcc 	andi	r2,r2,255
   33120:	1080201c 	xori	r2,r2,128
   33124:	10bfe004 	addi	r2,r2,-128
   33128:	10800bd8 	cmpnei	r2,r2,47
   3312c:	1000031e 	bne	r2,zero,3313c <alt_find_file+0x74>
    {
      len -= 1;
   33130:	e0bffe17 	ldw	r2,-8(fp)
   33134:	10bfffc4 	addi	r2,r2,-1
   33138:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3313c:	e0bffe17 	ldw	r2,-8(fp)
   33140:	e0ffff17 	ldw	r3,-4(fp)
   33144:	1885883a 	add	r2,r3,r2
   33148:	10800003 	ldbu	r2,0(r2)
   3314c:	10803fcc 	andi	r2,r2,255
   33150:	1080201c 	xori	r2,r2,128
   33154:	10bfe004 	addi	r2,r2,-128
   33158:	10800be0 	cmpeqi	r2,r2,47
   3315c:	1000081e 	bne	r2,zero,33180 <alt_find_file+0xb8>
   33160:	e0bffe17 	ldw	r2,-8(fp)
   33164:	e0ffff17 	ldw	r3,-4(fp)
   33168:	1885883a 	add	r2,r3,r2
   3316c:	10800003 	ldbu	r2,0(r2)
   33170:	10803fcc 	andi	r2,r2,255
   33174:	1080201c 	xori	r2,r2,128
   33178:	10bfe004 	addi	r2,r2,-128
   3317c:	10000a1e 	bne	r2,zero,331a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   33180:	e0bffd17 	ldw	r2,-12(fp)
   33184:	10c00217 	ldw	r3,8(r2)
   33188:	e0bffe17 	ldw	r2,-8(fp)
   3318c:	1809883a 	mov	r4,r3
   33190:	e17fff17 	ldw	r5,-4(fp)
   33194:	100d883a 	mov	r6,r2
   33198:	00333680 	call	33368 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3319c:	1000021e 	bne	r2,zero,331a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   331a0:	e0bffd17 	ldw	r2,-12(fp)
   331a4:	00000806 	br	331c8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   331a8:	e0bffd17 	ldw	r2,-12(fp)
   331ac:	10800017 	ldw	r2,0(r2)
   331b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   331b4:	e0fffd17 	ldw	r3,-12(fp)
   331b8:	008000f4 	movhi	r2,3
   331bc:	10959804 	addi	r2,r2,22112
   331c0:	18bfcb1e 	bne	r3,r2,330f0 <__alt_data_end+0xffff3520>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   331c4:	0005883a 	mov	r2,zero
}
   331c8:	e037883a 	mov	sp,fp
   331cc:	dfc00117 	ldw	ra,4(sp)
   331d0:	df000017 	ldw	fp,0(sp)
   331d4:	dec00204 	addi	sp,sp,8
   331d8:	f800283a 	ret

000331dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   331dc:	defffc04 	addi	sp,sp,-16
   331e0:	df000315 	stw	fp,12(sp)
   331e4:	df000304 	addi	fp,sp,12
   331e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   331ec:	00bffa04 	movi	r2,-24
   331f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   331f4:	e03ffd15 	stw	zero,-12(fp)
   331f8:	00001d06 	br	33270 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   331fc:	008000f4 	movhi	r2,3
   33200:	10911a04 	addi	r2,r2,17512
   33204:	e0fffd17 	ldw	r3,-12(fp)
   33208:	18c00324 	muli	r3,r3,12
   3320c:	10c5883a 	add	r2,r2,r3
   33210:	10800017 	ldw	r2,0(r2)
   33214:	1000131e 	bne	r2,zero,33264 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   33218:	008000f4 	movhi	r2,3
   3321c:	10911a04 	addi	r2,r2,17512
   33220:	e0fffd17 	ldw	r3,-12(fp)
   33224:	18c00324 	muli	r3,r3,12
   33228:	10c5883a 	add	r2,r2,r3
   3322c:	e0ffff17 	ldw	r3,-4(fp)
   33230:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   33234:	008000f4 	movhi	r2,3
   33238:	10959c04 	addi	r2,r2,22128
   3323c:	10c00017 	ldw	r3,0(r2)
   33240:	e0bffd17 	ldw	r2,-12(fp)
   33244:	1880040e 	bge	r3,r2,33258 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   33248:	008000f4 	movhi	r2,3
   3324c:	10959c04 	addi	r2,r2,22128
   33250:	e0fffd17 	ldw	r3,-12(fp)
   33254:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   33258:	e0bffd17 	ldw	r2,-12(fp)
   3325c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   33260:	00000606 	br	3327c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   33264:	e0bffd17 	ldw	r2,-12(fp)
   33268:	10800044 	addi	r2,r2,1
   3326c:	e0bffd15 	stw	r2,-12(fp)
   33270:	e0bffd17 	ldw	r2,-12(fp)
   33274:	10800810 	cmplti	r2,r2,32
   33278:	103fe01e 	bne	r2,zero,331fc <__alt_data_end+0xffff362c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3327c:	e0bffe17 	ldw	r2,-8(fp)
}
   33280:	e037883a 	mov	sp,fp
   33284:	df000017 	ldw	fp,0(sp)
   33288:	dec00104 	addi	sp,sp,4
   3328c:	f800283a 	ret

00033290 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   33290:	defffb04 	addi	sp,sp,-20
   33294:	df000415 	stw	fp,16(sp)
   33298:	df000404 	addi	fp,sp,16
   3329c:	e13ffe15 	stw	r4,-8(fp)
   332a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   332a4:	e0bfff17 	ldw	r2,-4(fp)
   332a8:	10840070 	cmpltui	r2,r2,4097
   332ac:	1000021e 	bne	r2,zero,332b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   332b0:	00840004 	movi	r2,4096
   332b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   332b8:	e0fffe17 	ldw	r3,-8(fp)
   332bc:	e0bfff17 	ldw	r2,-4(fp)
   332c0:	1885883a 	add	r2,r3,r2
   332c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   332c8:	e0bffe17 	ldw	r2,-8(fp)
   332cc:	e0bffc15 	stw	r2,-16(fp)
   332d0:	00000506 	br	332e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   332d4:	e0bffc17 	ldw	r2,-16(fp)
   332d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   332dc:	e0bffc17 	ldw	r2,-16(fp)
   332e0:	10800804 	addi	r2,r2,32
   332e4:	e0bffc15 	stw	r2,-16(fp)
   332e8:	e0fffc17 	ldw	r3,-16(fp)
   332ec:	e0bffd17 	ldw	r2,-12(fp)
   332f0:	18bff836 	bltu	r3,r2,332d4 <__alt_data_end+0xffff3704>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   332f4:	e0bffe17 	ldw	r2,-8(fp)
   332f8:	108007cc 	andi	r2,r2,31
   332fc:	10000226 	beq	r2,zero,33308 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   33300:	e0bffc17 	ldw	r2,-16(fp)
   33304:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   33308:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   3330c:	e037883a 	mov	sp,fp
   33310:	df000017 	ldw	fp,0(sp)
   33314:	dec00104 	addi	sp,sp,4
   33318:	f800283a 	ret

0003331c <atexit>:
   3331c:	200b883a 	mov	r5,r4
   33320:	000d883a 	mov	r6,zero
   33324:	0009883a 	mov	r4,zero
   33328:	000f883a 	mov	r7,zero
   3332c:	00333e41 	jmpi	333e4 <__register_exitproc>

00033330 <exit>:
   33330:	defffe04 	addi	sp,sp,-8
   33334:	000b883a 	mov	r5,zero
   33338:	dc000015 	stw	r16,0(sp)
   3333c:	dfc00115 	stw	ra,4(sp)
   33340:	2021883a 	mov	r16,r4
   33344:	00334f80 	call	334f8 <__call_exitprocs>
   33348:	008000f4 	movhi	r2,3
   3334c:	10959204 	addi	r2,r2,22088
   33350:	11000017 	ldw	r4,0(r2)
   33354:	20800f17 	ldw	r2,60(r4)
   33358:	10000126 	beq	r2,zero,33360 <exit+0x30>
   3335c:	103ee83a 	callr	r2
   33360:	8009883a 	mov	r4,r16
   33364:	003368c0 	call	3368c <_exit>

00033368 <memcmp>:
   33368:	01c000c4 	movi	r7,3
   3336c:	3980192e 	bgeu	r7,r6,333d4 <memcmp+0x6c>
   33370:	2144b03a 	or	r2,r4,r5
   33374:	11c4703a 	and	r2,r2,r7
   33378:	10000f26 	beq	r2,zero,333b8 <memcmp+0x50>
   3337c:	20800003 	ldbu	r2,0(r4)
   33380:	28c00003 	ldbu	r3,0(r5)
   33384:	10c0151e 	bne	r2,r3,333dc <memcmp+0x74>
   33388:	31bfff84 	addi	r6,r6,-2
   3338c:	01ffffc4 	movi	r7,-1
   33390:	00000406 	br	333a4 <memcmp+0x3c>
   33394:	20800003 	ldbu	r2,0(r4)
   33398:	28c00003 	ldbu	r3,0(r5)
   3339c:	31bfffc4 	addi	r6,r6,-1
   333a0:	10c00e1e 	bne	r2,r3,333dc <memcmp+0x74>
   333a4:	21000044 	addi	r4,r4,1
   333a8:	29400044 	addi	r5,r5,1
   333ac:	31fff91e 	bne	r6,r7,33394 <__alt_data_end+0xffff37c4>
   333b0:	0005883a 	mov	r2,zero
   333b4:	f800283a 	ret
   333b8:	20c00017 	ldw	r3,0(r4)
   333bc:	28800017 	ldw	r2,0(r5)
   333c0:	1880041e 	bne	r3,r2,333d4 <memcmp+0x6c>
   333c4:	31bfff04 	addi	r6,r6,-4
   333c8:	21000104 	addi	r4,r4,4
   333cc:	29400104 	addi	r5,r5,4
   333d0:	39bff936 	bltu	r7,r6,333b8 <__alt_data_end+0xffff37e8>
   333d4:	303fe91e 	bne	r6,zero,3337c <__alt_data_end+0xffff37ac>
   333d8:	003ff506 	br	333b0 <__alt_data_end+0xffff37e0>
   333dc:	10c5c83a 	sub	r2,r2,r3
   333e0:	f800283a 	ret

000333e4 <__register_exitproc>:
   333e4:	008000f4 	movhi	r2,3
   333e8:	defffa04 	addi	sp,sp,-24
   333ec:	10959204 	addi	r2,r2,22088
   333f0:	dc000315 	stw	r16,12(sp)
   333f4:	14000017 	ldw	r16,0(r2)
   333f8:	dc400415 	stw	r17,16(sp)
   333fc:	dfc00515 	stw	ra,20(sp)
   33400:	80805217 	ldw	r2,328(r16)
   33404:	2023883a 	mov	r17,r4
   33408:	10003626 	beq	r2,zero,334e4 <__register_exitproc+0x100>
   3340c:	10c00117 	ldw	r3,4(r2)
   33410:	010007c4 	movi	r4,31
   33414:	20c00e16 	blt	r4,r3,33450 <__register_exitproc+0x6c>
   33418:	1a400044 	addi	r9,r3,1
   3341c:	8800211e 	bne	r17,zero,334a4 <__register_exitproc+0xc0>
   33420:	18c00084 	addi	r3,r3,2
   33424:	18c7883a 	add	r3,r3,r3
   33428:	18c7883a 	add	r3,r3,r3
   3342c:	12400115 	stw	r9,4(r2)
   33430:	10c7883a 	add	r3,r2,r3
   33434:	19400015 	stw	r5,0(r3)
   33438:	0005883a 	mov	r2,zero
   3343c:	dfc00517 	ldw	ra,20(sp)
   33440:	dc400417 	ldw	r17,16(sp)
   33444:	dc000317 	ldw	r16,12(sp)
   33448:	dec00604 	addi	sp,sp,24
   3344c:	f800283a 	ret
   33450:	00800034 	movhi	r2,0
   33454:	10800004 	addi	r2,r2,0
   33458:	10002526 	beq	r2,zero,334f0 <__register_exitproc+0x10c>
   3345c:	01006404 	movi	r4,400
   33460:	d9400015 	stw	r5,0(sp)
   33464:	d9800115 	stw	r6,4(sp)
   33468:	d9c00215 	stw	r7,8(sp)
   3346c:	00000000 	call	0 <__reset-0x20000>
   33470:	d9400017 	ldw	r5,0(sp)
   33474:	d9800117 	ldw	r6,4(sp)
   33478:	d9c00217 	ldw	r7,8(sp)
   3347c:	10001c26 	beq	r2,zero,334f0 <__register_exitproc+0x10c>
   33480:	80c05217 	ldw	r3,328(r16)
   33484:	10000115 	stw	zero,4(r2)
   33488:	02400044 	movi	r9,1
   3348c:	10c00015 	stw	r3,0(r2)
   33490:	80805215 	stw	r2,328(r16)
   33494:	10006215 	stw	zero,392(r2)
   33498:	10006315 	stw	zero,396(r2)
   3349c:	0007883a 	mov	r3,zero
   334a0:	883fdf26 	beq	r17,zero,33420 <__alt_data_end+0xffff3850>
   334a4:	18d1883a 	add	r8,r3,r3
   334a8:	4211883a 	add	r8,r8,r8
   334ac:	1211883a 	add	r8,r2,r8
   334b0:	41802215 	stw	r6,136(r8)
   334b4:	01000044 	movi	r4,1
   334b8:	11806217 	ldw	r6,392(r2)
   334bc:	20c8983a 	sll	r4,r4,r3
   334c0:	310cb03a 	or	r6,r6,r4
   334c4:	11806215 	stw	r6,392(r2)
   334c8:	41c04215 	stw	r7,264(r8)
   334cc:	01800084 	movi	r6,2
   334d0:	89bfd31e 	bne	r17,r6,33420 <__alt_data_end+0xffff3850>
   334d4:	11806317 	ldw	r6,396(r2)
   334d8:	3108b03a 	or	r4,r6,r4
   334dc:	11006315 	stw	r4,396(r2)
   334e0:	003fcf06 	br	33420 <__alt_data_end+0xffff3850>
   334e4:	80805304 	addi	r2,r16,332
   334e8:	80805215 	stw	r2,328(r16)
   334ec:	003fc706 	br	3340c <__alt_data_end+0xffff383c>
   334f0:	00bfffc4 	movi	r2,-1
   334f4:	003fd106 	br	3343c <__alt_data_end+0xffff386c>

000334f8 <__call_exitprocs>:
   334f8:	008000f4 	movhi	r2,3
   334fc:	10959204 	addi	r2,r2,22088
   33500:	10800017 	ldw	r2,0(r2)
   33504:	defff404 	addi	sp,sp,-48
   33508:	dd800815 	stw	r22,32(sp)
   3350c:	d8800015 	stw	r2,0(sp)
   33510:	10805204 	addi	r2,r2,328
   33514:	dd000615 	stw	r20,24(sp)
   33518:	dc800415 	stw	r18,16(sp)
   3351c:	dfc00b15 	stw	ra,44(sp)
   33520:	df000a15 	stw	fp,40(sp)
   33524:	ddc00915 	stw	r23,36(sp)
   33528:	dd400715 	stw	r21,28(sp)
   3352c:	dcc00515 	stw	r19,20(sp)
   33530:	dc400315 	stw	r17,12(sp)
   33534:	dc000215 	stw	r16,8(sp)
   33538:	2025883a 	mov	r18,r4
   3353c:	2829883a 	mov	r20,r5
   33540:	d8800115 	stw	r2,4(sp)
   33544:	05bfffc4 	movi	r22,-1
   33548:	d8800017 	ldw	r2,0(sp)
   3354c:	14c05217 	ldw	r19,328(r2)
   33550:	98001d26 	beq	r19,zero,335c8 <__call_exitprocs+0xd0>
   33554:	dd400117 	ldw	r21,4(sp)
   33558:	98800117 	ldw	r2,4(r19)
   3355c:	173fffc4 	addi	fp,r2,-1
   33560:	e0000d16 	blt	fp,zero,33598 <__call_exitprocs+0xa0>
   33564:	14000044 	addi	r16,r2,1
   33568:	8421883a 	add	r16,r16,r16
   3356c:	8421883a 	add	r16,r16,r16
   33570:	84402004 	addi	r17,r16,128
   33574:	9c63883a 	add	r17,r19,r17
   33578:	9c21883a 	add	r16,r19,r16
   3357c:	a0001e26 	beq	r20,zero,335f8 <__call_exitprocs+0x100>
   33580:	80804017 	ldw	r2,256(r16)
   33584:	15001c26 	beq	r2,r20,335f8 <__call_exitprocs+0x100>
   33588:	e73fffc4 	addi	fp,fp,-1
   3358c:	843fff04 	addi	r16,r16,-4
   33590:	8c7fff04 	addi	r17,r17,-4
   33594:	e5bff91e 	bne	fp,r22,3357c <__alt_data_end+0xffff39ac>
   33598:	00800034 	movhi	r2,0
   3359c:	10800004 	addi	r2,r2,0
   335a0:	10000926 	beq	r2,zero,335c8 <__call_exitprocs+0xd0>
   335a4:	98800117 	ldw	r2,4(r19)
   335a8:	1000311e 	bne	r2,zero,33670 <__call_exitprocs+0x178>
   335ac:	98800017 	ldw	r2,0(r19)
   335b0:	10003426 	beq	r2,zero,33684 <__call_exitprocs+0x18c>
   335b4:	9809883a 	mov	r4,r19
   335b8:	a8800015 	stw	r2,0(r21)
   335bc:	00000000 	call	0 <__reset-0x20000>
   335c0:	acc00017 	ldw	r19,0(r21)
   335c4:	983fe41e 	bne	r19,zero,33558 <__alt_data_end+0xffff3988>
   335c8:	dfc00b17 	ldw	ra,44(sp)
   335cc:	df000a17 	ldw	fp,40(sp)
   335d0:	ddc00917 	ldw	r23,36(sp)
   335d4:	dd800817 	ldw	r22,32(sp)
   335d8:	dd400717 	ldw	r21,28(sp)
   335dc:	dd000617 	ldw	r20,24(sp)
   335e0:	dcc00517 	ldw	r19,20(sp)
   335e4:	dc800417 	ldw	r18,16(sp)
   335e8:	dc400317 	ldw	r17,12(sp)
   335ec:	dc000217 	ldw	r16,8(sp)
   335f0:	dec00c04 	addi	sp,sp,48
   335f4:	f800283a 	ret
   335f8:	98800117 	ldw	r2,4(r19)
   335fc:	80c00017 	ldw	r3,0(r16)
   33600:	10bfffc4 	addi	r2,r2,-1
   33604:	17001526 	beq	r2,fp,3365c <__call_exitprocs+0x164>
   33608:	80000015 	stw	zero,0(r16)
   3360c:	183fde26 	beq	r3,zero,33588 <__alt_data_end+0xffff39b8>
   33610:	00800044 	movi	r2,1
   33614:	1708983a 	sll	r4,r2,fp
   33618:	98806217 	ldw	r2,392(r19)
   3361c:	9dc00117 	ldw	r23,4(r19)
   33620:	2084703a 	and	r2,r4,r2
   33624:	1000061e 	bne	r2,zero,33640 <__call_exitprocs+0x148>
   33628:	183ee83a 	callr	r3
   3362c:	98800117 	ldw	r2,4(r19)
   33630:	15ffc51e 	bne	r2,r23,33548 <__alt_data_end+0xffff3978>
   33634:	a8800017 	ldw	r2,0(r21)
   33638:	14ffd326 	beq	r2,r19,33588 <__alt_data_end+0xffff39b8>
   3363c:	003fc206 	br	33548 <__alt_data_end+0xffff3978>
   33640:	98806317 	ldw	r2,396(r19)
   33644:	2084703a 	and	r2,r4,r2
   33648:	1000061e 	bne	r2,zero,33664 <__call_exitprocs+0x16c>
   3364c:	89400017 	ldw	r5,0(r17)
   33650:	9009883a 	mov	r4,r18
   33654:	183ee83a 	callr	r3
   33658:	003ff406 	br	3362c <__alt_data_end+0xffff3a5c>
   3365c:	9f000115 	stw	fp,4(r19)
   33660:	003fea06 	br	3360c <__alt_data_end+0xffff3a3c>
   33664:	89000017 	ldw	r4,0(r17)
   33668:	183ee83a 	callr	r3
   3366c:	003fef06 	br	3362c <__alt_data_end+0xffff3a5c>
   33670:	98800017 	ldw	r2,0(r19)
   33674:	982b883a 	mov	r21,r19
   33678:	1027883a 	mov	r19,r2
   3367c:	983fb61e 	bne	r19,zero,33558 <__alt_data_end+0xffff3988>
   33680:	003fd106 	br	335c8 <__alt_data_end+0xffff39f8>
   33684:	0005883a 	mov	r2,zero
   33688:	003ffa06 	br	33674 <__alt_data_end+0xffff3aa4>

0003368c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3368c:	defffd04 	addi	sp,sp,-12
   33690:	df000215 	stw	fp,8(sp)
   33694:	df000204 	addi	fp,sp,8
   33698:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3369c:	0001883a 	nop
   336a0:	e0bfff17 	ldw	r2,-4(fp)
   336a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   336a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   336ac:	10000226 	beq	r2,zero,336b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   336b0:	002af070 	cmpltui	zero,zero,43969
   336b4:	00000106 	br	336bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   336b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   336bc:	003fff06 	br	336bc <__alt_data_end+0xffff3aec>
