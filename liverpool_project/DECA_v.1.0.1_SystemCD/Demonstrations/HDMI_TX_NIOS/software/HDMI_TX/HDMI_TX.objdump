
HDMI_TX.elf:     file format elf32-littlenios2
HDMI_TX.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040240

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0001b174 memsz 0x0001b174 flags r-x
    LOAD off    0x0001c194 vaddr 0x0005b194 paddr 0x0005cd00 align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x0001e86c vaddr 0x0005e86c paddr 0x0005e86c align 2**12
         filesz 0x00000000 memsz 0x00000260 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016f84  00040240  00040240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003fd0  000571c4  000571c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  0005b194  0005cd00  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000260  0005e86c  0005e86c  0001e86c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0005eacc  0005eacc  0001dd00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001dd00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f30  00000000  00000000  0001dd28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003012a  00000000  00000000  0001ec58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aeb3  00000000  00000000  0004ed82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d8f7  00000000  00000000  00059c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a9c  00000000  00000000  0006752c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005789  00000000  00000000  00069fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ca4c  00000000  00000000  0006f751  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008c1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017d0  00000000  00000000  0008c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009147b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0009147e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00091488  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00091489  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009148a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009148e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00091492  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00091496  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009149f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000914a8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000914b1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  000914bc  2**0
                  CONTENTS, READONLY
 29 .jdi          00004065  00000000  00000000  000914ed  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00049a0c  00000000  00000000  00095552  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040240 l    d  .text	00000000 .text
000571c4 l    d  .rodata	00000000 .rodata
0005b194 l    d  .rwdata	00000000 .rwdata
0005e86c l    d  .bss	00000000 .bss
0005eacc l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HDMI_TX_bsp//obj/HAL/src/crt0.o
00040288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 adv7513.c
0004028c l     F .text	000000c0 adv7513_video_out_format.constprop.3
000578a0 l     O .rodata	000000f0 vic_table.3844
00000000 l    df *ABS*	00000000 edid.c
00040fec l     F .text	0000003c eb_establish_timing
0005a374 l     O .rodata	00000040 sad_format.4126
0005a284 l     O .rodata	000000f0 vic_table.4141
0005ccb4 l     O .rwdata	00000008 header.4237
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
00046128 l     F .text	00000244 adv7513_int_handler
0004636c l     F .text	000000fc bin_dump.constprop.0
00000000 l    df *ABS*	00000000 lib2-divmod.c
00046c98 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00047f14 l     F .text	00000008 __fp_lock
00047f1c l     F .text	00000008 __fp_unlock
00047f30 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0005b208 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000490e0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005ad6b l     O .rodata	00000010 zeroes.4181
0005ad7b l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0005ae8c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0004ba64 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0005ba54 l     O .rwdata	00000020 lc_ctype_charset
0005ba34 l     O .rwdata	00000020 lc_message_charset
0005ba74 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0005b024 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004fc08 l     F .text	000000fc __sprint_r.part.0
0005b158 l     O .rodata	00000010 blanks.4125
0005b148 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00054844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00054964 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00054990 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00054d60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00054e54 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00054f38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00055114 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005ccf4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000553a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000554e8 l     F .text	00000038 alt_dev_reg
0005bc54 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000557dc l     F .text	00000204 altera_avalon_jtag_uart_irq
000559e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00056000 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000563d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00056650 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00056788 l     F .text	00000050 alt_get_errno
000567d8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005e898 g     O .bss	00000004 alt_instruction_exception_handler
00048ffc g     F .text	00000018 putchar
0004f214 g     F .text	00000074 _mprec_log10
00045cac g     F .text	000000d4 I2C_Read
0004f300 g     F .text	0000008c __any_on
00051504 g     F .text	00000054 _isatty_r
0005b030 g     O .rodata	00000028 __mprec_tinytens
0005505c g     F .text	00000078 alt_main
00049014 g     F .text	000000b8 _puts_r
0005e9cc g     O .bss	00000100 alt_irq
0004e090 g     F .text	0000005c _lseek_r
0005cd00 g       *ABS*	00000000 __flash_rwdata_start
00053410 g     F .text	00000084 .hidden __eqdf2
0005eacc g       *ABS*	00000000 __alt_heap_start
00048fb8 g     F .text	0000003c printf
00051558 g     F .text	0000009c _wcrtomb_r
00040774 g     F .text	00000094 adv7513_edid_read
000493d0 g     F .text	0000005c __sseek
00048264 g     F .text	00000010 __sinit
0005109c g     F .text	00000154 __swbuf_r
0004dfb0 g     F .text	0000007c _setlocale_r
000480d0 g     F .text	00000064 __sfmoreglue
000550f4 g     F .text	00000020 __malloc_unlock
000472a4 g     F .text	00000450 .hidden __divsf3
0004e2a4 g     F .text	0000015c memmove
0004824c g     F .text	00000018 _cleanup
0004e400 g     F .text	000000a8 _Balloc
00040400 g     F .text	000000b0 adv7513_hpd_probe
00053494 g     F .text	000000e0 .hidden __gtdf2
00056b98 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
0004034c g     F .text	000000b4 adv7513_chip_identify
00045a14 g     F .text	000000e0 i2c_write
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000514ac g     F .text	00000058 _fstat_r
0005e878 g     O .bss	00000004 errno
0004934c g     F .text	00000008 __seofread
0005e890 g     O .bss	00000004 alt_argv
00064cb4 g       *ABS*	00000000 _gp
00055370 g     F .text	00000030 usleep
00047ef0 g     F .text	00000024 fgets
0005bad4 g     O .rwdata	00000180 alt_fd_list
00048ff4 g     F .text	00000008 _putchar_r
00056bb8 g     F .text	00000090 alt_find_dev
00048d30 g     F .text	00000138 memcpy
000406b8 g     F .text	00000048 adv7513_power_state
00047f24 g     F .text	0000000c _cleanup_r
000546d0 g     F .text	000000d0 .hidden __floatsidf
00056710 g     F .text	00000078 alt_io_redirect
00053574 g     F .text	000000e0 .hidden __ltdf2
000571c4 g       *ABS*	00000000 __DTOR_END__
000490cc g     F .text	00000014 puts
000565b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004faf0 g     F .text	00000074 __fpclassifyd
0004f170 g     F .text	000000a4 __ratio
00051078 g     F .text	00000024 __vfiprintf_internal
00055bdc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00048f8c g     F .text	0000002c _printf_r
00046db4 g     F .text	00000008 .hidden __udivsi3
00054db0 g     F .text	000000a4 isatty
0005b080 g     O .rodata	000000c8 __mprec_tens
0004e02c g     F .text	0000000c __locale_charset
00056e10 g     F .text	0000008c alt_icache_flush
00045d80 g     F .text	000000f4 I2C_MultipleRead
0005e874 g     O .bss	00000004 __malloc_top_pad
00049840 g     F .text	00000024 strtoul
0005ccd0 g     O .rwdata	00000004 __mb_cur_max
0004e05c g     F .text	0000000c _localeconv_r
0004e800 g     F .text	0000003c __i2b
0004db0c g     F .text	000004a4 __sfvwrite_r
0005b194 g     O .rwdata	00000074 encoder
000492a4 g     F .text	00000054 _sbrk_r
0004f4f4 g     F .text	0000005c _read_r
0005cce8 g     O .rwdata	00000004 alt_max_fd
0004d38c g     F .text	00000100 _fclose_r
0004d6c8 g     F .text	00000030 fflush
0005e870 g     O .bss	00000004 __malloc_max_sbrked_mem
00045f3c g     F .text	000000e8 I2CL_Read
00047c28 g     F .text	00000110 .hidden __extendsfdf2
0004068c g     F .text	0000002c adv7513_do_hpd_powerdown
000522a8 g     F .text	0000089c .hidden __adddf3
0004ef18 g     F .text	0000011c __b2d
00051d18 g     F .text	00000590 .hidden __umoddi3
00054f88 g     F .text	000000d4 lseek
0005ccbc g     O .rwdata	00000004 _global_impure_ptr
0004f550 g     F .text	000005a0 _realloc_r
0005eacc g       *ABS*	00000000 __bss_end
00054c70 g     F .text	000000f0 alt_iic_isr_register
00056a94 g     F .text	00000104 alt_tick
000404b0 g     F .text	000000e8 adv7513_do_hpd_powerup
00042bf4 g     F .text	00000084 edid_decode_extensions
00051758 g     F .text	000005c0 .hidden __udivdi3
000512d0 g     F .text	00000184 _fputwc_r
0005b058 g     O .rodata	00000028 __mprec_bigtens
0004e5e4 g     F .text	00000104 __s2b
000547a0 g     F .text	000000a4 .hidden __floatunsidf
0004ecc0 g     F .text	00000060 __mcmp
00048284 g     F .text	00000018 __fp_lock_all
00054c24 g     F .text	0000004c alt_ic_irq_enabled
00045af4 g     F .text	000000b0 I2C_Write
0005e8cc g     O .bss	00000100 edid
000569fc g     F .text	00000098 alt_alarm_stop
0005e888 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d0 alt_irq_handler
0005baac g     O .rwdata	00000028 alt_dev_null
00045960 g     F .text	0000006c i2c_start
00056394 g     F .text	00000044 alt_dcache_flush_all
0004e6e8 g     F .text	00000068 __hi0bits
00054648 g     F .text	00000088 .hidden __fixdfsi
0005cd00 g       *ABS*	00000000 __ram_rwdata_end
0005cce0 g     O .rwdata	00000008 alt_dev_list
000553f0 g     F .text	000000f8 write
0004f38c g     F .text	000000a0 _putc_r
0005b194 g       *ABS*	00000000 __ram_rodata_end
000549e0 g     F .text	000000b0 fstat
00053574 g     F .text	000000e0 .hidden __ledf2
0004ea38 g     F .text	00000140 __pow5mult
0004fd1c g     F .text	0000135c ___vfiprintf_internal_r
0005e884 g     O .bss	00000004 __nlocale_changed
00046dbc g     F .text	00000008 .hidden __umodsi3
0005eacc g       *ABS*	00000000 end
00055718 g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000074 alt_instruction_exception_entry
000571c4 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
00056074 g     F .text	00000088 alt_avalon_timer_sc_init
00047d38 g     F .text	00000064 .hidden __clzsi2
00055de8 g     F .text	00000218 altera_avalon_jtag_uart_write
00048274 g     F .text	00000004 __sfp_lock_acquire
00048bcc g     F .text	000000e8 memchr
00049864 g     F .text	00001ffc ___vfprintf_internal_r
0004d81c g     F .text	000002f0 _free_r
00040808 g     F .text	00000080 adv7513_regmap_dump
0004e038 g     F .text	00000010 __locale_mb_cur_max
00056ffc g     F .text	00000194 __call_exitprocs
0005e880 g     O .bss	00000004 __mlocale_changed
0005ccc4 g     O .rwdata	00000004 __malloc_sbrk_base
00040240 g     F .text	0000004c _start
0005e89c g     O .bss	00000004 _alt_tick_rate
0004eb78 g     F .text	00000148 __lshift
0005e8a0 g     O .bss	00000004 _alt_nticks
00055164 g     F .text	000000fc read
00055554 g     F .text	00000060 alt_sys_init
00056ee8 g     F .text	00000114 __register_exitproc
00041c50 g     F .text	00000fa4 edid_print_cea
000456d4 g     F .text	00000040 reg_read
0004e83c g     F .text	000001fc __multiply
00055a88 g     F .text	00000068 altera_avalon_jtag_uart_close
0005b194 g       *ABS*	00000000 __ram_rwdata_start
000571c4 g       *ABS*	00000000 __ram_rodata_start
000494cc g     F .text	000000ec strncpy
0005e8a4 g     O .bss	00000028 __malloc_current_mallinfo
0004f034 g     F .text	0000013c __d2b
000555b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000495b8 g     F .text	00000288 _strtoul_r
00056d5c g     F .text	000000b4 alt_get_fd
0005623c g     F .text	00000158 alt_busy_sleep
0004ba10 g     F .text	00000054 _close_r
00048cb4 g     F .text	0000007c memcmp
00055674 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005eacc g       *ABS*	00000000 __alt_stack_base
000556c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004b8e0 g     F .text	00000130 __swsetup_r
00052b44 g     F .text	000008cc .hidden __divdf3
00048134 g     F .text	00000118 __sfp
0004f288 g     F .text	00000078 __copybits
0005b62c g     O .rwdata	00000408 __malloc_av_
00048280 g     F .text	00000004 __sinit_lock_release
000459cc g     F .text	00000048 i2c_stop
00053654 g     F .text	00000724 .hidden __muldf3
000492f8 g     F .text	00000054 __sread
00040700 g     F .text	00000074 adv7513_mode_state
00056c48 g     F .text	00000114 alt_find_file
00056428 g     F .text	000000a4 alt_dev_llist_insert
000550d4 g     F .text	00000020 __malloc_lock
000552c0 g     F .text	000000b0 sbrk
0004d4a0 g     F .text	00000228 _fflush_r
0005120c g     F .text	000000c4 _calloc_r
0005e86c g       *ABS*	00000000 __bss_start
00040598 g     F .text	00000064 adv7513_audio_on
00048e68 g     F .text	00000124 memset
000465e4 g     F .text	000006b4 main
0005e894 g     O .bss	00000004 alt_envp
0005e86c g     O .bss	00000004 __malloc_max_total_mem
00055614 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00045ba4 g     F .text	00000108 i2c_read
000511f0 g     F .text	0000001c __swbuf
0004942c g     F .text	00000008 __sclose
00067100 g       *ABS*	00000000 __alt_heap_limit
0004d48c g     F .text	00000014 fclose
0004bc64 g     F .text	00001728 _dtoa_r
00048424 g     F .text	000007a8 _malloc_r
000516cc g     F .text	00000030 __ascii_wctomb
0005ccec g     O .rwdata	00000004 alt_errno
00045758 g     F .text	000000bc reg_update_bits
000482b4 g     F .text	000000b8 _fwalk
00047d9c g     F .text	00000154 _fgets_r
0004f42c g     F .text	000000c8 putc
00046d04 g     F .text	00000054 .hidden __divsi3
0004d6f8 g     F .text	00000124 _malloc_trim_r
000571c4 g       *ABS*	00000000 __CTOR_END__
000476f4 g     F .text	00000424 .hidden __mulsf3
000458b8 g     F .text	000000a8 reg_clear_bits
0004fb64 g     F .text	000000a4 strcmp
000571c4 g       *ABS*	00000000 __flash_rodata_start
000571c4 g       *ABS*	00000000 __DTOR_LIST__
00053410 g     F .text	00000084 .hidden __nedf2
00055520 g     F .text	00000034 alt_irq_init
00055260 g     F .text	00000060 alt_release_fd
0005ac2b g     O .rodata	00000100 .hidden __clz_tab
0005e87c g     O .bss	00000004 _PathLocale
00056e9c g     F .text	00000014 atexit
0004b884 g     F .text	0000005c _write_r
0004e068 g     F .text	0000001c setlocale
0005ccc0 g     O .rwdata	00000004 _impure_ptr
0005e88c g     O .bss	00000004 alt_argc
00056528 g     F .text	0000005c _do_dtors
00040b58 g     F .text	00000494 adv7513_chip_init_3d
0004e054 g     F .text	00000008 __locale_cjk_lang
00046024 g     F .text	00000104 I2CL_MultipleRead
000490fc g     F .text	000001a8 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
0004eeb8 g     F .text	00000060 __ulp
0004829c g     F .text	00000018 __fp_unlock_all
0005ccd8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004e084 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00054a90 g     F .text	00000050 alt_ic_isr_register
00042c78 g     F .text	00001cb0 edid_decode_v14
0005cd00 g       *ABS*	00000000 _edata
0005eacc g       *ABS*	00000000 _end
00046468 g     F .text	0000017c adv7513_int_setup
00040240 g       *ABS*	00000000 __ram_exceptions_end
00055af0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00054b80 g     F .text	000000a4 alt_ic_irq_disable
00045814 g     F .text	000000a4 reg_or_bits
00049354 g     F .text	0000007c __swrite
0005ccc8 g     O .rwdata	00000004 __malloc_trim_threshold
0004e048 g     F .text	0000000c __locale_msgcharset
00056eb0 g     F .text	00000038 exit
0004836c g     F .text	000000b8 _fwalk_reent
00047b18 g     F .text	00000110 .hidden __floatunsisf
0004ed20 g     F .text	00000198 __mdiff
00045714 g     F .text	00000044 reg_write
00046d58 g     F .text	0000005c .hidden __modsi3
0005cccc g     O .rwdata	00000004 __ctype_ptr__
00067100 g       *ABS*	00000000 __alt_data_end
00040660 g     F .text	0000002c adv7513_kick_up
00040020 g     F .exceptions	00000000 alt_exception
00048278 g     F .text	00000004 __sfp_lock_release
0005ad8b g     O .rodata	00000101 _ctype_
00057190 g     F .text	00000034 _exit
000560fc g     F .text	00000140 alt_alarm_start
0004e0ec g     F .text	000001b8 __smakebuf_r
00049434 g     F .text	00000098 strlen
000568a4 g     F .text	00000158 open
00053494 g     F .text	000000e0 .hidden __gedf2
00041028 g     F .text	00000c28 edid_decode_cea
00040888 g     F .text	000002d0 adv7513_chip_init
0005ccd4 g     O .rwdata	00000004 __wctomb
00044928 g     F .text	00000dac edid_print_v14
0004fd04 g     F .text	00000018 __sprint_r
00056584 g     F .text	00000030 alt_icache_flush_all
0005ccf0 g     O .rwdata	00000004 alt_priority_mask
00054ae0 g     F .text	000000a0 alt_ic_irq_enable
0004b860 g     F .text	00000024 __vfprintf_internal
000516fc g     F .text	0000005c _wctomb_r
00053d78 g     F .text	000008d0 .hidden __subdf3
0004e750 g     F .text	000000b0 __lo0bits
0005ccf8 g     O .rwdata	00000008 alt_alarm_list
000564cc g     F .text	0000005c _do_ctors
00045e74 g     F .text	000000c8 I2CL_Write
000515f4 g     F .text	000000d8 wcrtomb
00054894 g     F .text	000000d0 close
00046dc4 g     F .text	000004e0 .hidden __addsf3
000405fc g     F .text	00000064 adv7513_audio_off
00054eb8 g     F .text	00000080 alt_load
00051454 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0004827c g     F .text	00000004 __sinit_lock_acquire
0004e4d0 g     F .text	00000114 __multadd
0004e4a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409014 	ori	at,at,576
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10ba7304 	addi	r2,r2,-5684
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10ba7304 	addi	r2,r2,-5684
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e0:	000531fa 	rdctl	r2,exception
   401e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401e8:	e0bffd17 	ldw	r2,-12(fp)
   401ec:	10801f0c 	andi	r2,r2,124
   401f0:	1004d0ba 	srli	r2,r2,2
   401f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401f8:	0005333a 	rdctl	r2,badaddr
   401fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40200:	d0a6f917 	ldw	r2,-25628(gp)
   40204:	10000726 	beq	r2,zero,40224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40208:	d0a6f917 	ldw	r2,-25628(gp)
   4020c:	e0fffd17 	ldw	r3,-12(fp)
   40210:	1809883a 	mov	r4,r3
   40214:	e17fff17 	ldw	r5,-4(fp)
   40218:	e1bffe17 	ldw	r6,-8(fp)
   4021c:	103ee83a 	callr	r2
   40220:	00000206 	br	4022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40228:	0005883a 	mov	r2,zero
}
   4022c:	e037883a 	mov	sp,fp
   40230:	dfc00117 	ldw	ra,4(sp)
   40234:	df000017 	ldw	fp,0(sp)
   40238:	dec00204 	addi	sp,sp,8
   4023c:	f800283a 	ret

Disassembly of section .text:

00040240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4024c:	00bffd16 	blt	zero,r2,40244 <__alt_data_end+0xfffd9144>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40250:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40254:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   40258:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   4025c:	d6932d14 	ori	gp,gp,19636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40260:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40264:	10ba1b14 	ori	r2,r2,59500

    movhi r3, %hi(__bss_end)
   40268:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4026c:	18fab314 	ori	r3,r3,60108

    beq r2, r3, 1f
   40270:	10c00326 	beq	r2,r3,40280 <_start+0x40>

0:
    stw zero, (r2)
   40274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4027c:	10fffd36 	bltu	r2,r3,40274 <__alt_data_end+0xfffd9174>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40280:	0054eb80 	call	54eb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40284:	005505c0 	call	5505c <alt_main>

00040288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40288:	003fff06 	br	40288 <__alt_data_end+0xfffd9188>

0004028c <adv7513_video_out_format.constprop.3>:

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
   4028c:	defffd04 	addi	sp,sp,-12
   40290:	dc400115 	stw	r17,4(sp)

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   40294:	01802004 	movi	r6,128

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
   40298:	2823883a 	mov	r17,r5

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   4029c:	000f883a 	mov	r7,zero
   402a0:	01400584 	movi	r5,22

// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
   402a4:	dc000015 	stw	r16,0(sp)
   402a8:	dfc00215 	stw	ra,8(sp)
   402ac:	2021883a 	mov	r16,r4

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   402b0:	00457580 	call	45758 <reg_update_bits>
   402b4:	10000226 	beq	r2,zero,402c0 <adv7513_video_out_format.constprop.3+0x34>
		return -1;
   402b8:	00bfffc4 	movi	r2,-1
   402bc:	00001e06 	br	40338 <adv7513_video_out_format.constprop.3+0xac>

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
   402c0:	8009883a 	mov	r4,r16
   402c4:	01400604 	movi	r5,24
   402c8:	01802004 	movi	r6,128
   402cc:	000f883a 	mov	r7,zero
   402d0:	00457580 	call	45758 <reg_update_bits>
   402d4:	103ff81e 	bne	r2,zero,402b8 <__alt_data_end+0xfffd91b8>
		return -1;
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- dvi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
   402d8:	89c0004c 	andi	r7,r17,1
   402dc:	8009883a 	mov	r4,r16
   402e0:	01402bc4 	movi	r5,175
   402e4:	01802084 	movi	r6,130
   402e8:	39cf883a 	add	r7,r7,r7
   402ec:	00457580 	call	45758 <reg_update_bits>
   402f0:	103ff11e 	bne	r2,zero,402b8 <__alt_data_end+0xfffd91b8>
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
   402f4:	00800044 	movi	r2,1
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   402f8:	8009883a 	mov	r4,r16
   402fc:	01401004 	movi	r5,64
   40300:	01802004 	movi	r6,128
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
   40304:	8880031e 	bne	r17,r2,40314 <adv7513_video_out_format.constprop.3+0x88>
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   40308:	300f883a 	mov	r7,r6
   4030c:	00457580 	call	45758 <reg_update_bits>
   40310:	00000106 	br	40318 <adv7513_video_out_format.constprop.3+0x8c>
			return -1;
	} else {
		if (reg_clear_bits(ec, 0x40, 0x80) != 0)
   40314:	00458b80 	call	458b8 <reg_clear_bits>
   40318:	103fe71e 	bne	r2,zero,402b8 <__alt_data_end+0xfffd91b8>
			return -1;
	}

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   4031c:	8009883a 	mov	r4,r16
   40320:	01401304 	movi	r5,76
   40324:	018003c4 	movi	r6,15
   40328:	01c00104 	movi	r7,4
   4032c:	00457580 	call	45758 <reg_update_bits>
   40330:	1004c03a 	cmpne	r2,r2,zero
   40334:	0085c83a 	sub	r2,zero,r2
	// 0x3c[5:0] <- 0x01 & 0x3f
	//if (reg_update_bits(ec, 0x3c, 0x3f, 0x01) != 0)
	//	return -1;

	return 0;
}
   40338:	dfc00217 	ldw	ra,8(sp)
   4033c:	dc400117 	ldw	r17,4(sp)
   40340:	dc000017 	ldw	r16,0(sp)
   40344:	dec00304 	addi	sp,sp,12
   40348:	f800283a 	ret

0004034c <adv7513_chip_identify>:
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   4034c:	defffd04 	addi	sp,sp,-12
	bool r = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   40350:	21800007 	ldb	r6,0(r4)
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   40354:	dc000115 	stw	r16,4(sp)
	bool r = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   40358:	20800804 	addi	r2,r4,32
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   4035c:	2021883a 	mov	r16,r4
	bool r = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   40360:	01400234 	movhi	r5,8
   40364:	01000234 	movhi	r4,8
   40368:	d8800015 	stw	r2,0(sp)
   4036c:	21041004 	addi	r4,r4,4160
   40370:	29440c04 	addi	r5,r5,4144
   40374:	000f883a 	mov	r7,zero
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   40378:	dfc00215 	stw	ra,8(sp)
	bool r = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   4037c:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   40380:	10001626 	beq	r2,zero,403dc <adv7513_chip_identify+0x90>
		return -1;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_LOW, &ec->chip_id[0]);
   40384:	81800007 	ldb	r6,0(r16)
   40388:	80800704 	addi	r2,r16,28
   4038c:	01000234 	movhi	r4,8
   40390:	01400234 	movhi	r5,8
   40394:	d8800015 	stw	r2,0(sp)
   40398:	21041004 	addi	r4,r4,4160
   4039c:	29440c04 	addi	r5,r5,4144
   403a0:	01c03d84 	movi	r7,246
   403a4:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   403a8:	10000e26 	beq	r2,zero,403e4 <adv7513_chip_identify+0x98>
		return -2;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_HIGH, &ec->chip_id[1]);
   403ac:	81800007 	ldb	r6,0(r16)
   403b0:	01000234 	movhi	r4,8
   403b4:	84000744 	addi	r16,r16,29
   403b8:	01400234 	movhi	r5,8
   403bc:	dc000015 	stw	r16,0(sp)
   403c0:	21041004 	addi	r4,r4,4160
   403c4:	29440c04 	addi	r5,r5,4144
   403c8:	01c03d44 	movi	r7,245
   403cc:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   403d0:	10000626 	beq	r2,zero,403ec <adv7513_chip_identify+0xa0>
		return -3;

	return 0;
   403d4:	0005883a 	mov	r2,zero
   403d8:	00000506 	br	403f0 <adv7513_chip_identify+0xa4>
{
	bool r = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
	if (!r)
		return -1;
   403dc:	00bfffc4 	movi	r2,-1
   403e0:	00000306 	br	403f0 <adv7513_chip_identify+0xa4>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_LOW, &ec->chip_id[0]);
	if (!r)
		return -2;
   403e4:	00bfff84 	movi	r2,-2
   403e8:	00000106 	br	403f0 <adv7513_chip_identify+0xa4>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_HIGH, &ec->chip_id[1]);
	if (!r)
		return -3;
   403ec:	00bfff44 	movi	r2,-3

	return 0;
}
   403f0:	dfc00217 	ldw	ra,8(sp)
   403f4:	dc000117 	ldw	r16,4(sp)
   403f8:	dec00304 	addi	sp,sp,12
   403fc:	f800283a 	ret

00040400 <adv7513_hpd_probe>:
int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
	bool r = 0;
	alt_u8 regv = 0;

	ec->hpd_prev = ec->hpd_latest;
   40400:	20800317 	ldw	r2,12(r4)

	return 0;
}

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
   40404:	defffd04 	addi	sp,sp,-12
   40408:	dc000115 	stw	r16,4(sp)
   4040c:	dfc00215 	stw	ra,8(sp)
	bool r = 0;
	alt_u8 regv = 0;

	ec->hpd_prev = ec->hpd_latest;
   40410:	20800215 	stw	r2,8(r4)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   40414:	01401084 	movi	r5,66
   40418:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
   4041c:	2021883a 	mov	r16,r4
	bool r = 0;
	alt_u8 regv = 0;
   40420:	d8000005 	stb	zero,0(sp)

	ec->hpd_prev = ec->hpd_latest;

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   40424:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   40428:	10001a1e 	bne	r2,zero,40494 <adv7513_hpd_probe+0x94>
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
   4042c:	d8c00003 	ldbu	r3,0(sp)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
   40430:	80800217 	ldw	r2,8(r16)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
   40434:	1900180c 	andi	r4,r3,96
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
   40438:	2084f03a 	xor	r2,r4,r2

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
   4043c:	81000315 	stw	r4,12(r16)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
   40440:	80800415 	stw	r2,16(r16)

	ec->hpd = 0;

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
   40444:	10000426 	beq	r2,zero,40458 <adv7513_hpd_probe+0x58>
   40448:	01401804 	movi	r5,96
   4044c:	2140021e 	bne	r4,r5,40458 <adv7513_hpd_probe+0x58>
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
   40450:	00800044 	movi	r2,1
   40454:	00000d06 	br	4048c <adv7513_hpd_probe+0x8c>
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
   40458:	1100100c 	andi	r4,r2,64
   4045c:	2000021e 	bne	r4,zero,40468 <adv7513_hpd_probe+0x68>
		return -1;

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;

	ec->hpd = 0;
   40460:	80000515 	stw	zero,20(r16)
   40464:	00000406 	br	40478 <adv7513_hpd_probe+0x78>

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
   40468:	1900100c 	andi	r4,r3,64
   4046c:	203ffc1e 	bne	r4,zero,40460 <__alt_data_end+0xfffd9360>
			// if HPD state changed and HPD was de-asserted
			ec->hpd = -1;
   40470:	013fffc4 	movi	r4,-1
   40474:	81000515 	stw	r4,20(r16)
		}

		if ((ec->hpd_event & (ADV7513_STATUS_MONITOR_SENSE)) && ((ec->hpd_latest & (ADV7513_STATUS_MONITOR_SENSE)) == 0)) {
   40478:	1080080c 	andi	r2,r2,32
   4047c:	10000826 	beq	r2,zero,404a0 <adv7513_hpd_probe+0xa0>
   40480:	18c0080c 	andi	r3,r3,32
   40484:	1800051e 	bne	r3,zero,4049c <adv7513_hpd_probe+0x9c>
			// if monitor-sense state changed and monitor-sense was de-asserted
			ec->hpd = -1;
   40488:	00bfffc4 	movi	r2,-1
   4048c:	80800515 	stw	r2,20(r16)
   40490:	00000206 	br	4049c <adv7513_hpd_probe+0x9c>

	ec->hpd_prev = ec->hpd_latest;

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
	if (r != 0)
		return -1;
   40494:	00bfffc4 	movi	r2,-1
   40498:	00000106 	br	404a0 <adv7513_hpd_probe+0xa0>
	// 0xd6[7:6] <- (2 << 6) (HPD from HPD only) & 0xc0
	//r = reg_update_bits(ec, 0xd6, 0xc0 ,0x02 << 6);
	//if (r != 0)
	//	return -1;

	return 0;
   4049c:	0005883a 	mov	r2,zero
}
   404a0:	dfc00217 	ldw	ra,8(sp)
   404a4:	dc000117 	ldw	r16,4(sp)
   404a8:	dec00304 	addi	sp,sp,12
   404ac:	f800283a 	ret

000404b0 <adv7513_do_hpd_powerup>:

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
   404b0:	defffe04 	addi	sp,sp,-8
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   404b4:	01401044 	movi	r5,65
   404b8:	01801004 	movi	r6,64
   404bc:	000f883a 	mov	r7,zero

	return 0;
}

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
   404c0:	dc000015 	stw	r16,0(sp)
   404c4:	dfc00115 	stw	ra,4(sp)
   404c8:	2021883a 	mov	r16,r4
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   404cc:	00457580 	call	45758 <reg_update_bits>
   404d0:	10000226 	beq	r2,zero,404dc <adv7513_do_hpd_powerup+0x2c>
		return -1;
   404d4:	00bfffc4 	movi	r2,-1
   404d8:	00002b06 	br	40588 <adv7513_do_hpd_powerup+0xd8>

	//usleep(150000);

	// table 14 -- fixed registers must be set after power up
	if (reg_write(ec, 0x98, 0x03) != 0)
   404dc:	8009883a 	mov	r4,r16
   404e0:	01402604 	movi	r5,152
   404e4:	018000c4 	movi	r6,3
   404e8:	00457140 	call	45714 <reg_write>
   404ec:	103ff91e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_update_bits(ec, 0x9a, 0xe0, 0x7 << 5) != 0)
   404f0:	01803804 	movi	r6,224
   404f4:	8009883a 	mov	r4,r16
   404f8:	01402684 	movi	r5,154
   404fc:	300f883a 	mov	r7,r6
   40500:	00457580 	call	45758 <reg_update_bits>
   40504:	103ff31e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_write(ec, 0x9c, 0x30) != 0)
   40508:	8009883a 	mov	r4,r16
   4050c:	01402704 	movi	r5,156
   40510:	01800c04 	movi	r6,48
   40514:	00457140 	call	45714 <reg_write>
   40518:	103fee1e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_update_bits(ec, 0x9d, 0x03, 0x01) != 0)
   4051c:	8009883a 	mov	r4,r16
   40520:	01402744 	movi	r5,157
   40524:	018000c4 	movi	r6,3
   40528:	01c00044 	movi	r7,1
   4052c:	00457580 	call	45758 <reg_update_bits>
   40530:	103fe81e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_write(ec, 0xa2, 0xa4) != 0)
   40534:	8009883a 	mov	r4,r16
   40538:	01402884 	movi	r5,162
   4053c:	01802904 	movi	r6,164
   40540:	00457140 	call	45714 <reg_write>
   40544:	103fe31e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_write(ec, 0xa3, 0xa4) != 0)
   40548:	8009883a 	mov	r4,r16
   4054c:	014028c4 	movi	r5,163
   40550:	01802904 	movi	r6,164
   40554:	00457140 	call	45714 <reg_write>
   40558:	103fde1e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
		return -1;
	if (reg_write(ec, 0xe0, 0xd0) != 0)
   4055c:	8009883a 	mov	r4,r16
   40560:	01403804 	movi	r5,224
   40564:	01803404 	movi	r6,208
   40568:	00457140 	call	45714 <reg_write>
   4056c:	103fd91e 	bne	r2,zero,404d4 <__alt_data_end+0xfffd93d4>
	//if (reg_write(ec, 0xf9, 0x00) != 0)  // set to a non-conflicting i2c address (suggested addr: 0x00)
	//	return -1;

	// clear hpd interrupts
	// 0x96[7:6] <- 0xc0 & 0xc0
	if (reg_write(ec, 0x96, 0xff) != 0)
   40570:	8009883a 	mov	r4,r16
   40574:	01402584 	movi	r5,150
   40578:	01803fc4 	movi	r6,255
   4057c:	00457140 	call	45714 <reg_write>
   40580:	1004c03a 	cmpne	r2,r2,zero
   40584:	0085c83a 	sub	r2,zero,r2
		return -1;

	return 0;
}
   40588:	dfc00117 	ldw	ra,4(sp)
   4058c:	dc000017 	ldw	r16,0(sp)
   40590:	dec00204 	addi	sp,sp,8
   40594:	f800283a 	ret

00040598 <adv7513_audio_on>:




int adv7513_audio_on(struct hdmi_encoder *ec)
{
   40598:	defffe04 	addi	sp,sp,-8
	if (reg_write(ec, ADV7513_REG_AUDIO_CFG3, 0X70) != 0)
   4059c:	01400504 	movi	r5,20
   405a0:	01801c04 	movi	r6,112




int adv7513_audio_on(struct hdmi_encoder *ec)
{
   405a4:	dc000015 	stw	r16,0(sp)
   405a8:	dfc00115 	stw	ra,4(sp)
   405ac:	2021883a 	mov	r16,r4
	if (reg_write(ec, ADV7513_REG_AUDIO_CFG3, 0X70) != 0)
   405b0:	00457140 	call	45714 <reg_write>
   405b4:	10000226 	beq	r2,zero,405c0 <adv7513_audio_on+0x28>
		return -1;
   405b8:	00bfffc4 	movi	r2,-1
   405bc:	00000b06 	br	405ec <adv7513_audio_on+0x54>
	if (reg_write(ec, ADV7513_REG_I2C_FREQ_ID_CFG, 0X20) != 0)
   405c0:	8009883a 	mov	r4,r16
   405c4:	01400544 	movi	r5,21
   405c8:	01800804 	movi	r6,32
   405cc:	00457140 	call	45714 <reg_write>
   405d0:	103ff91e 	bne	r2,zero,405b8 <__alt_data_end+0xfffd94b8>
		return -1;
	if (reg_write(ec, ADV7513_REG_HDCP_HDMI_CFG, 0X16) != 0)
   405d4:	8009883a 	mov	r4,r16
   405d8:	01402bc4 	movi	r5,175
   405dc:	01800584 	movi	r6,22
   405e0:	00457140 	call	45714 <reg_write>
   405e4:	1004c03a 	cmpne	r2,r2,zero
   405e8:	0085c83a 	sub	r2,zero,r2
		return -1;
	return 0;
}
   405ec:	dfc00117 	ldw	ra,4(sp)
   405f0:	dc000017 	ldw	r16,0(sp)
   405f4:	dec00204 	addi	sp,sp,8
   405f8:	f800283a 	ret

000405fc <adv7513_audio_off>:

int adv7513_audio_off(struct hdmi_encoder *ec)
{
   405fc:	defffe04 	addi	sp,sp,-8
	if (reg_write(ec, ADV7513_REG_AUDIO_CFG3, 0X00) != 0)
   40600:	01400504 	movi	r5,20
   40604:	000d883a 	mov	r6,zero
		return -1;
	return 0;
}

int adv7513_audio_off(struct hdmi_encoder *ec)
{
   40608:	dc000015 	stw	r16,0(sp)
   4060c:	dfc00115 	stw	ra,4(sp)
   40610:	2021883a 	mov	r16,r4
	if (reg_write(ec, ADV7513_REG_AUDIO_CFG3, 0X00) != 0)
   40614:	00457140 	call	45714 <reg_write>
   40618:	10000226 	beq	r2,zero,40624 <adv7513_audio_off+0x28>
		return -1;
   4061c:	00bfffc4 	movi	r2,-1
   40620:	00000b06 	br	40650 <adv7513_audio_off+0x54>
	if (reg_write(ec, ADV7513_REG_I2C_FREQ_ID_CFG, 0X00) != 0)
   40624:	8009883a 	mov	r4,r16
   40628:	01400544 	movi	r5,21
   4062c:	000d883a 	mov	r6,zero
   40630:	00457140 	call	45714 <reg_write>
   40634:	103ff91e 	bne	r2,zero,4061c <__alt_data_end+0xfffd951c>
		return -1;
	if (reg_write(ec, ADV7513_REG_HDCP_HDMI_CFG, 0X14) != 0)
   40638:	8009883a 	mov	r4,r16
   4063c:	01402bc4 	movi	r5,175
   40640:	01800504 	movi	r6,20
   40644:	00457140 	call	45714 <reg_write>
   40648:	1004c03a 	cmpne	r2,r2,zero
   4064c:	0085c83a 	sub	r2,zero,r2
		return -1;
	return 0;
}
   40650:	dfc00117 	ldw	ra,4(sp)
   40654:	dc000017 	ldw	r16,0(sp)
   40658:	dec00204 	addi	sp,sp,8
   4065c:	f800283a 	ret

00040660 <adv7513_kick_up>:
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
   40660:	deffff04 	addi	sp,sp,-4
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   40664:	01401044 	movi	r5,65
   40668:	01801004 	movi	r6,64
   4066c:	000f883a 	mov	r7,zero
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
   40670:	dfc00015 	stw	ra,0(sp)
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   40674:	00457580 	call	45758 <reg_update_bits>
   40678:	1004c03a 	cmpne	r2,r2,zero
		return -1;

	return 0;
}
   4067c:	0085c83a 	sub	r2,zero,r2
   40680:	dfc00017 	ldw	ra,0(sp)
   40684:	dec00104 	addi	sp,sp,4
   40688:	f800283a 	ret

0004068c <adv7513_do_hpd_powerdown>:

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
   4068c:	01801004 	movi	r6,64

	return 0;
}

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
   40690:	deffff04 	addi	sp,sp,-4
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
   40694:	01401044 	movi	r5,65
   40698:	300f883a 	mov	r7,r6

	return 0;
}

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
   4069c:	dfc00015 	stw	ra,0(sp)
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
   406a0:	00457580 	call	45758 <reg_update_bits>
   406a4:	1004c03a 	cmpne	r2,r2,zero
		return -1;

	return 0;
}
   406a8:	0085c83a 	sub	r2,zero,r2
   406ac:	dfc00017 	ldw	ra,0(sp)
   406b0:	dec00104 	addi	sp,sp,4
   406b4:	f800283a 	ret

000406b8 <adv7513_power_state>:

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
   406b8:	defffd04 	addi	sp,sp,-12
   406bc:	dc000115 	stw	r16,4(sp)
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
   406c0:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
   406c4:	2821883a 	mov	r16,r5
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
   406c8:	01401044 	movi	r5,65

	return 0;
}

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
   406cc:	dfc00215 	stw	ra,8(sp)
	bool r = 0;
	alt_u8 regv = 0;
   406d0:	d8000005 	stb	zero,0(sp)

	r = reg_read(ec, 0x41, &regv);
   406d4:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   406d8:	1000041e 	bne	r2,zero,406ec <adv7513_power_state+0x34>
		return -1;

	if ((regv & 0x40) == 1)
		*state = 0;
	else
		*state = 1;
   406dc:	00800044 	movi	r2,1
   406e0:	80800015 	stw	r2,0(r16)

	return 0;
   406e4:	0005883a 	mov	r2,zero
   406e8:	00000106 	br	406f0 <adv7513_power_state+0x38>
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x41, &regv);
	if (r != 0)
		return -1;
   406ec:	00bfffc4 	movi	r2,-1
		*state = 0;
	else
		*state = 1;

	return 0;
}
   406f0:	dfc00217 	ldw	ra,8(sp)
   406f4:	dc000117 	ldw	r16,4(sp)
   406f8:	dec00304 	addi	sp,sp,12
   406fc:	f800283a 	ret

00040700 <adv7513_mode_state>:

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
   40700:	defffc04 	addi	sp,sp,-16
   40704:	dc400215 	stw	r17,8(sp)
   40708:	dc000115 	stw	r16,4(sp)
   4070c:	2823883a 	mov	r17,r5
   40710:	3021883a 	mov	r16,r6
	};

	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x3d, &regv);
   40714:	01400f44 	movi	r5,61
   40718:	d80d883a 	mov	r6,sp

	return 0;
}

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
   4071c:	dfc00315 	stw	ra,12(sp)
		"720(1440)x480i @239.76/240 Hz (4:3)",
		"720(1440)x480i @239.76/240 Hz (16:9)",
	};

	bool r = 0;
	alt_u8 regv = 0;
   40720:	d8000005 	stb	zero,0(sp)

	r = reg_read(ec, 0x3d, &regv);
   40724:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   40728:	10000c1e 	bne	r2,zero,4075c <adv7513_mode_state+0x5c>
		return -1;

	*vic = regv & 0x1f;
   4072c:	d8800003 	ldbu	r2,0(sp)

	if (*vic < 60) {
		*mode = vic_table[*vic];
   40730:	00c00174 	movhi	r3,5
   40734:	18de2804 	addi	r3,r3,30880

	r = reg_read(ec, 0x3d, &regv);
	if (r != 0)
		return -1;

	*vic = regv & 0x1f;
   40738:	108007cc 	andi	r2,r2,31
   4073c:	88800015 	stw	r2,0(r17)

	if (*vic < 60) {
		*mode = vic_table[*vic];
   40740:	1085883a 	add	r2,r2,r2
   40744:	1085883a 	add	r2,r2,r2
   40748:	1885883a 	add	r2,r3,r2
   4074c:	10800017 	ldw	r2,0(r2)
   40750:	80800015 	stw	r2,0(r16)
	} else {
		*mode = vic_table[0];
	}

	return 0;
   40754:	0005883a 	mov	r2,zero
   40758:	00000106 	br	40760 <adv7513_mode_state+0x60>
	bool r = 0;
	alt_u8 regv = 0;

	r = reg_read(ec, 0x3d, &regv);
	if (r != 0)
		return -1;
   4075c:	00bfffc4 	movi	r2,-1
	} else {
		*mode = vic_table[0];
	}

	return 0;
}
   40760:	dfc00317 	ldw	ra,12(sp)
   40764:	dc400217 	ldw	r17,8(sp)
   40768:	dc000117 	ldw	r16,4(sp)
   4076c:	dec00404 	addi	sp,sp,16
   40770:	f800283a 	ret

00040774 <adv7513_edid_read>:

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
   40774:	defff904 	addi	sp,sp,-28
   40778:	dc400215 	stw	r17,8(sp)
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   4077c:	3022923a 	slli	r17,r6,8

	return 0;
}

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
   40780:	dd000515 	stw	r20,20(sp)
   40784:	dcc00415 	stw	r19,16(sp)
   40788:	dc800315 	stw	r18,12(sp)
   4078c:	dc000115 	stw	r16,4(sp)
   40790:	dfc00615 	stw	ra,24(sp)
   40794:	2029883a 	mov	r20,r4
   40798:	2827883a 	mov	r19,r5
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   4079c:	8c804004 	addi	r18,r17,256
   407a0:	8821883a 	mov	r16,r17
   407a4:	8445c83a 	sub	r2,r16,r17
   407a8:	9885883a 	add	r2,r19,r2
   407ac:	84800b0e 	bge	r16,r18,407dc <adv7513_edid_read+0x68>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
   407b0:	a1800107 	ldb	r6,4(r20)
   407b4:	01000234 	movhi	r4,8
   407b8:	01400234 	movhi	r5,8
   407bc:	d8800015 	stw	r2,0(sp)
   407c0:	21041004 	addi	r4,r4,4160
   407c4:	29440c04 	addi	r5,r5,4144
   407c8:	81c03fcc 	andi	r7,r16,255
   407cc:	0045cac0 	call	45cac <I2C_Read>
		if (!r)
   407d0:	10000426 	beq	r2,zero,407e4 <adv7513_edid_read+0x70>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   407d4:	84000044 	addi	r16,r16,1
   407d8:	003ff206 	br	407a4 <__alt_data_end+0xfffd96a4>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   407dc:	0005883a 	mov	r2,zero
   407e0:	00000106 	br	407e8 <adv7513_edid_read+0x74>
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
		if (!r)
			return -1;
   407e4:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   407e8:	dfc00617 	ldw	ra,24(sp)
   407ec:	dd000517 	ldw	r20,20(sp)
   407f0:	dcc00417 	ldw	r19,16(sp)
   407f4:	dc800317 	ldw	r18,12(sp)
   407f8:	dc400217 	ldw	r17,8(sp)
   407fc:	dc000117 	ldw	r16,4(sp)
   40800:	dec00704 	addi	sp,sp,28
   40804:	f800283a 	ret

00040808 <adv7513_regmap_dump>:

int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
   40808:	defffa04 	addi	sp,sp,-24
   4080c:	dcc00415 	stw	r19,16(sp)
   40810:	dc800315 	stw	r18,12(sp)
   40814:	dc400215 	stw	r17,8(sp)
   40818:	dc000115 	stw	r16,4(sp)
   4081c:	dfc00515 	stw	ra,20(sp)
   40820:	2025883a 	mov	r18,r4
   40824:	2827883a 	mov	r19,r5
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   40828:	0021883a 	mov	r16,zero
   4082c:	04404004 	movi	r17,256
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
   40830:	91800007 	ldb	r6,0(r18)
   40834:	9c05883a 	add	r2,r19,r16
   40838:	01000234 	movhi	r4,8
   4083c:	01400234 	movhi	r5,8
   40840:	d8800015 	stw	r2,0(sp)
   40844:	21041004 	addi	r4,r4,4160
   40848:	29440c04 	addi	r5,r5,4144
   4084c:	800f883a 	mov	r7,r16
   40850:	0045cac0 	call	45cac <I2C_Read>
		if (!r)
   40854:	10000426 	beq	r2,zero,40868 <adv7513_regmap_dump+0x60>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   40858:	84000044 	addi	r16,r16,1
   4085c:	847ff41e 	bne	r16,r17,40830 <__alt_data_end+0xfffd9730>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   40860:	0005883a 	mov	r2,zero
   40864:	00000106 	br	4086c <adv7513_regmap_dump+0x64>
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
		if (!r)
			return -1;
   40868:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   4086c:	dfc00517 	ldw	ra,20(sp)
   40870:	dcc00417 	ldw	r19,16(sp)
   40874:	dc800317 	ldw	r18,12(sp)
   40878:	dc400217 	ldw	r17,8(sp)
   4087c:	dc000117 	ldw	r16,4(sp)
   40880:	dec00604 	addi	sp,sp,24
   40884:	f800283a 	ret

00040888 <adv7513_chip_init>:
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
   40888:	defffd04 	addi	sp,sp,-12
   4088c:	dc400115 	stw	r17,4(sp)
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   40890:	018003c4 	movi	r6,15
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
   40894:	2823883a 	mov	r17,r5
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   40898:	000f883a 	mov	r7,zero
   4089c:	01400544 	movi	r5,21
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
   408a0:	dc000015 	stw	r16,0(sp)
   408a4:	dfc00215 	stw	ra,8(sp)
   408a8:	2021883a 	mov	r16,r4
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   408ac:	00457580 	call	45758 <reg_update_bits>
   408b0:	10002c1e 	bne	r2,zero,40964 <adv7513_chip_init+0xdc>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   408b4:	8009883a 	mov	r4,r16
   408b8:	01400584 	movi	r5,22
   408bc:	01800f44 	movi	r6,61
   408c0:	01c00c04 	movi	r7,48
   408c4:	00457580 	call	45758 <reg_update_bits>
   408c8:	1000261e 	bne	r2,zero,40964 <adv7513_chip_init+0xdc>
		return -1;

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   408cc:	8009883a 	mov	r4,r16
   408d0:	014005c4 	movi	r5,23
   408d4:	01800084 	movi	r6,2
   408d8:	000f883a 	mov	r7,zero
   408dc:	00457580 	call	45758 <reg_update_bits>
   408e0:	1000201e 	bne	r2,zero,40964 <adv7513_chip_init+0xdc>
	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
		return -1;

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
   408e4:	88002326 	beq	r17,zero,40974 <adv7513_chip_init+0xec>
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
   408e8:	8009883a 	mov	r4,r16
   408ec:	000b883a 	mov	r5,zero
   408f0:	004028c0 	call	4028c <adv7513_video_out_format.constprop.3>
   408f4:	1000921e 	bne	r2,zero,40b40 <adv7513_chip_init+0x2b8>
	int regv;

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   408f8:	00800084 	movi	r2,2
   408fc:	80800915 	stw	r2,36(r16)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
	avi->active_fmt_ar = 8;		// active format aspect ratio
   40900:	00c00204 	movi	r3,8

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   40904:	00800044 	movi	r2,1
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   40908:	01800404 	movi	r6,16

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   4090c:	80000c15 	stw	zero,48(r16)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   40910:	80800b15 	stw	r2,44(r16)
	avi->active_fmt_ar = 8;		// active format aspect ratio
   40914:	80c00d15 	stw	r3,52(r16)
	avi->pict_ar = 1;			// picture aspect ratio
   40918:	80800e15 	stw	r2,56(r16)
	avi->colorimetry = 0;		// colorimetry
   4091c:	80000f15 	stw	zero,60(r16)
	avi->colorimetry_ext = 0;	// extended colorimetry
   40920:	80001215 	stw	zero,72(r16)
	avi->scaling = 0;			// non-uniform scaling
   40924:	80001015 	stw	zero,64(r16)
	avi->quant = 0;				// rgb quantization range
   40928:	80001115 	stw	zero,68(r16)
	avi->itc = 0;				// it content
   4092c:	80001315 	stw	zero,76(r16)
	avi->pr = 0;				// pixel repetition factor
   40930:	80001515 	stw	zero,84(r16)
	avi->vic = 1;				// video identification code
   40934:	80801415 	stw	r2,80(r16)
	avi->yq1yq0 = 0;			// ??
   40938:	80001615 	stw	zero,88(r16)

	avi->bar_info = 1;  		// bar fields valid
   4093c:	80800a15 	stw	r2,40(r16)
	avi->bar.top_e = 0;
   40940:	80001715 	stw	zero,92(r16)
	avi->bar.bottom_s = 0;
   40944:	80001815 	stw	zero,96(r16)
	avi->bar.left_e = 0;
   40948:	80001915 	stw	zero,100(r16)
	avi->bar.right_s = 0;
   4094c:	80001a15 	stw	zero,104(r16)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   40950:	8009883a 	mov	r4,r16
   40954:	01401104 	movi	r5,68
   40958:	300f883a 	mov	r7,r6
   4095c:	00457580 	call	45758 <reg_update_bits>
   40960:	10000726 	beq	r2,zero,40980 <adv7513_chip_init+0xf8>
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
		return -1;
   40964:	00bfffc4 	movi	r2,-1
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
	if (adv7513_video_init(ec, dvi) != 0)
   40968:	1004c03a 	cmpne	r2,r2,zero
   4096c:	0085c83a 	sub	r2,zero,r2
   40970:	00007406 	br	40b44 <adv7513_chip_init+0x2bc>
	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
			return -1;
	} else {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_HDMI) != 0)
   40974:	8009883a 	mov	r4,r16
   40978:	01400044 	movi	r5,1
   4097c:	003fdc06 	br	408f0 <__alt_data_end+0xfffd97f0>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   40980:	01803004 	movi	r6,192
   40984:	8009883a 	mov	r4,r16
   40988:	01401284 	movi	r5,74
   4098c:	300f883a 	mov	r7,r6
   40990:	00457580 	call	45758 <reg_update_bits>
   40994:	103ff31e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   40998:	80800c17 	ldw	r2,48(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   4099c:	8009883a 	mov	r4,r16
   409a0:	01401544 	movi	r5,85

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   409a4:	108000cc 	andi	r2,r2,3
   409a8:	100e917a 	slli	r7,r2,5
   409ac:	80800b17 	ldw	r2,44(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   409b0:	01801c04 	movi	r6,112

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   409b4:	1080004c 	andi	r2,r2,1
   409b8:	1004913a 	slli	r2,r2,4
   409bc:	3884b03a 	or	r2,r7,r2
   409c0:	81c00917 	ldw	r7,36(r16)
   409c4:	39c000cc 	andi	r7,r7,3
   409c8:	11ceb03a 	or	r7,r2,r7
   409cc:	80800a17 	ldw	r2,40(r16)
   409d0:	108000cc 	andi	r2,r2,3
   409d4:	1085883a 	add	r2,r2,r2
   409d8:	1085883a 	add	r2,r2,r2
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   409dc:	388eb03a 	or	r7,r7,r2
   409e0:	00457580 	call	45758 <reg_update_bits>
   409e4:	103fdf1e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   409e8:	81800f17 	ldw	r6,60(r16)
   409ec:	80800e17 	ldw	r2,56(r16)
	if (reg_write(ec, 0x56, regv) != 0)
   409f0:	8009883a 	mov	r4,r16
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   409f4:	300c91ba 	slli	r6,r6,6
   409f8:	108000cc 	andi	r2,r2,3
   409fc:	1004913a 	slli	r2,r2,4
   40a00:	31803fcc 	andi	r6,r6,255
	if (reg_write(ec, 0x56, regv) != 0)
   40a04:	01401584 	movi	r5,86
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   40a08:	3084b03a 	or	r2,r6,r2
   40a0c:	81800d17 	ldw	r6,52(r16)
   40a10:	318003cc 	andi	r6,r6,15
	if (reg_write(ec, 0x56, regv) != 0)
   40a14:	118cb03a 	or	r6,r2,r6
   40a18:	00457140 	call	45714 <reg_write>
   40a1c:	103fd11e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   40a20:	80801317 	ldw	r2,76(r16)
	if (reg_write(ec, 0x57, regv) != 0)
   40a24:	8009883a 	mov	r4,r16
   40a28:	014015c4 	movi	r5,87

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   40a2c:	100491fa 	slli	r2,r2,7
   40a30:	11803fcc 	andi	r6,r2,255
   40a34:	80801217 	ldw	r2,72(r16)
   40a38:	108001cc 	andi	r2,r2,7
   40a3c:	1004913a 	slli	r2,r2,4
   40a40:	3084b03a 	or	r2,r6,r2
   40a44:	81801017 	ldw	r6,64(r16)
   40a48:	318000cc 	andi	r6,r6,3
   40a4c:	118cb03a 	or	r6,r2,r6
   40a50:	80801117 	ldw	r2,68(r16)
   40a54:	108000cc 	andi	r2,r2,3
   40a58:	1085883a 	add	r2,r2,r2
   40a5c:	1085883a 	add	r2,r2,r2
	if (reg_write(ec, 0x57, regv) != 0)
   40a60:	308cb03a 	or	r6,r6,r2
   40a64:	00457140 	call	45714 <reg_write>
   40a68:	103fbe1e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   40a6c:	81801617 	ldw	r6,88(r16)
	if (reg_write(ec, 0x59, regv) != 0)
   40a70:	8009883a 	mov	r4,r16
   40a74:	01401644 	movi	r5,89
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
	if (reg_write(ec, 0x57, regv) != 0)
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   40a78:	300c913a 	slli	r6,r6,4
	if (reg_write(ec, 0x59, regv) != 0)
   40a7c:	31803c0c 	andi	r6,r6,240
   40a80:	00457140 	call	45714 <reg_write>
   40a84:	103fb71e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
	if (reg_write(ec, 0x5a, regv) != 0)
   40a88:	81801703 	ldbu	r6,92(r16)
   40a8c:	8009883a 	mov	r4,r16
   40a90:	01401684 	movi	r5,90
   40a94:	00457140 	call	45714 <reg_write>
   40a98:	103fb21e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
	if (reg_write(ec, 0x5b, regv) != 0)
   40a9c:	81801743 	ldbu	r6,93(r16)
   40aa0:	8009883a 	mov	r4,r16
   40aa4:	014016c4 	movi	r5,91
   40aa8:	00457140 	call	45714 <reg_write>
   40aac:	103fad1e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
	if (reg_write(ec, 0x5c, regv) != 0)
   40ab0:	81801803 	ldbu	r6,96(r16)
   40ab4:	8009883a 	mov	r4,r16
   40ab8:	01401704 	movi	r5,92
   40abc:	00457140 	call	45714 <reg_write>
   40ac0:	103fa81e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
	if (reg_write(ec, 0x5d, regv) != 0)
   40ac4:	81801843 	ldbu	r6,97(r16)
   40ac8:	8009883a 	mov	r4,r16
   40acc:	01401744 	movi	r5,93
   40ad0:	00457140 	call	45714 <reg_write>
   40ad4:	103fa31e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
	if (reg_write(ec, 0x5e, regv) != 0)
   40ad8:	81801903 	ldbu	r6,100(r16)
   40adc:	8009883a 	mov	r4,r16
   40ae0:	01401784 	movi	r5,94
   40ae4:	00457140 	call	45714 <reg_write>
   40ae8:	103f9e1e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
	if (reg_write(ec, 0x5f, regv) != 0)
   40aec:	81801943 	ldbu	r6,101(r16)
   40af0:	8009883a 	mov	r4,r16
   40af4:	014017c4 	movi	r5,95
   40af8:	00457140 	call	45714 <reg_write>
   40afc:	103f991e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
	if (reg_write(ec, 0x60, regv) != 0)
   40b00:	81801a03 	ldbu	r6,104(r16)
   40b04:	8009883a 	mov	r4,r16
   40b08:	01401804 	movi	r5,96
   40b0c:	00457140 	call	45714 <reg_write>
   40b10:	103f941e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>
		return -1;

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
	if (reg_write(ec, 0x61, regv) != 0)
   40b14:	81801a43 	ldbu	r6,105(r16)
   40b18:	8009883a 	mov	r4,r16
   40b1c:	01401844 	movi	r5,97
   40b20:	00457140 	call	45714 <reg_write>
   40b24:	103f8f1e 	bne	r2,zero,40964 <__alt_data_end+0xfffd9864>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   40b28:	8009883a 	mov	r4,r16
   40b2c:	01401284 	movi	r5,74
   40b30:	01801004 	movi	r6,64
   40b34:	00458b80 	call	458b8 <reg_clear_bits>
   40b38:	103f8b26 	beq	r2,zero,40968 <__alt_data_end+0xfffd9868>
   40b3c:	003f8906 	br	40964 <__alt_data_end+0xfffd9864>
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
	if (adv7513_video_init(ec, dvi) != 0)
		return -1;
   40b40:	00bfffc4 	movi	r2,-1

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
}
   40b44:	dfc00217 	ldw	ra,8(sp)
   40b48:	dc400117 	ldw	r17,4(sp)
   40b4c:	dc000017 	ldw	r16,0(sp)
   40b50:	dec00304 	addi	sp,sp,12
   40b54:	f800283a 	ret

00040b58 <adv7513_chip_init_3d>:

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
   40b58:	defff904 	addi	sp,sp,-28
   40b5c:	dcc00315 	stw	r19,12(sp)
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   40b60:	018003c4 	movi	r6,15

	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
   40b64:	2827883a 	mov	r19,r5
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   40b68:	000f883a 	mov	r7,zero
   40b6c:	01400544 	movi	r5,21

	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
   40b70:	dc000015 	stw	r16,0(sp)
   40b74:	dfc00615 	stw	ra,24(sp)
   40b78:	dd400515 	stw	r21,20(sp)
   40b7c:	dd000415 	stw	r20,16(sp)
   40b80:	dc800215 	stw	r18,8(sp)
   40b84:	dc400115 	stw	r17,4(sp)
   40b88:	2021883a 	mov	r16,r4
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   40b8c:	00457580 	call	45758 <reg_update_bits>
   40b90:	10003f1e 	bne	r2,zero,40c90 <adv7513_chip_init_3d+0x138>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   40b94:	8009883a 	mov	r4,r16
   40b98:	01400584 	movi	r5,22
   40b9c:	01800f44 	movi	r6,61
   40ba0:	01c00c04 	movi	r7,48
   40ba4:	00457580 	call	45758 <reg_update_bits>
   40ba8:	1000391e 	bne	r2,zero,40c90 <adv7513_chip_init_3d+0x138>
		return -1;

	switch (vic) {
   40bac:	9c7fffc4 	addi	r17,r19,-1
   40bb0:	008005c4 	movi	r2,23
   40bb4:	14402136 	bltu	r2,r17,40c3c <adv7513_chip_init_3d+0xe4>
   40bb8:	880690ba 	slli	r3,r17,2
   40bbc:	00800134 	movhi	r2,4
   40bc0:	1082f404 	addi	r2,r2,3024
   40bc4:	1885883a 	add	r2,r3,r2
   40bc8:	10800017 	ldw	r2,0(r2)
   40bcc:	1000683a 	jmp	r2
   40bd0:	00040c38 	rdprs	zero,zero,4144
   40bd4:	00040c38 	rdprs	zero,zero,4144
   40bd8:	00040c30 	cmpltui	zero,zero,4144
   40bdc:	00040c30 	cmpltui	zero,zero,4144
   40be0:	00040c30 	cmpltui	zero,zero,4144
   40be4:	00040c38 	rdprs	zero,zero,4144
   40be8:	00040c30 	cmpltui	zero,zero,4144
   40bec:	00040c38 	rdprs	zero,zero,4144
   40bf0:	00040c30 	cmpltui	zero,zero,4144
   40bf4:	00040c38 	rdprs	zero,zero,4144
   40bf8:	00040c30 	cmpltui	zero,zero,4144
   40bfc:	00040c38 	rdprs	zero,zero,4144
   40c00:	00040c30 	cmpltui	zero,zero,4144
   40c04:	00040c38 	rdprs	zero,zero,4144
   40c08:	00040c30 	cmpltui	zero,zero,4144
   40c0c:	00040c30 	cmpltui	zero,zero,4144
   40c10:	00040c38 	rdprs	zero,zero,4144
   40c14:	00040c30 	cmpltui	zero,zero,4144
   40c18:	00040c30 	cmpltui	zero,zero,4144
   40c1c:	00040c30 	cmpltui	zero,zero,4144
   40c20:	00040c38 	rdprs	zero,zero,4144
   40c24:	00040c30 	cmpltui	zero,zero,4144
   40c28:	00040c38 	rdprs	zero,zero,4144
   40c2c:	00040c30 	cmpltui	zero,zero,4144
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_16V9;
   40c30:	05000044 	movi	r20,1
   40c34:	00000106 	br	40c3c <adv7513_chip_init_3d+0xe4>
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_4V3;
   40c38:	0029883a 	mov	r20,zero
		aspect = ADV7513_INPUT_ASPECT_16V9;
		break;
	}

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   40c3c:	054005c4 	movi	r21,23
   40c40:	04800084 	movi	r18,2
   40c44:	8009883a 	mov	r4,r16
   40c48:	a80b883a 	mov	r5,r21
   40c4c:	900d883a 	mov	r6,r18
   40c50:	a50f883a 	add	r7,r20,r20
   40c54:	00457580 	call	45758 <reg_update_bits>
   40c58:	10001126 	beq	r2,zero,40ca0 <adv7513_chip_init_3d+0x148>
   40c5c:	00000c06 	br	40c90 <adv7513_chip_init_3d+0x138>
		return -1;
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- 0)dvi 1)hdmi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (1 & 0x01) << 1) != 0)
   40c60:	8009883a 	mov	r4,r16
   40c64:	01402bc4 	movi	r5,175
   40c68:	01802084 	movi	r6,130
   40c6c:	900f883a 	mov	r7,r18
   40c70:	00457580 	call	45758 <reg_update_bits>
   40c74:	1000061e 	bne	r2,zero,40c90 <adv7513_chip_init_3d+0x138>
		return -1;

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   40c78:	01802004 	movi	r6,128
   40c7c:	8009883a 	mov	r4,r16
   40c80:	01401004 	movi	r5,64
   40c84:	300f883a 	mov	r7,r6
   40c88:	00457580 	call	45758 <reg_update_bits>
   40c8c:	10001226 	beq	r2,zero,40cd8 <adv7513_chip_init_3d+0x180>
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format_3d(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_INVALID, vic) != 0)
		return -1;
   40c90:	00bfffc4 	movi	r2,-1
	return 0;
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
	if (adv7513_video_init_3d(ec, vic) != 0)
   40c94:	1004c03a 	cmpne	r2,r2,zero
   40c98:	0085c83a 	sub	r2,zero,r2
   40c9c:	0000ca06 	br	40fc8 <adv7513_chip_init_3d+0x470>

	//printf("adv7513_video_out_format_3d()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   40ca0:	8009883a 	mov	r4,r16
   40ca4:	01400584 	movi	r5,22
   40ca8:	01802004 	movi	r6,128
   40cac:	000f883a 	mov	r7,zero
   40cb0:	00457580 	call	45758 <reg_update_bits>
   40cb4:	103ff61e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
   40cb8:	8009883a 	mov	r4,r16
   40cbc:	01400604 	movi	r5,24
   40cc0:	01802004 	movi	r6,128
   40cc4:	000f883a 	mov	r7,zero
   40cc8:	00457580 	call	45758 <reg_update_bits>
   40ccc:	103fe426 	beq	r2,zero,40c60 <__alt_data_end+0xfffd9b60>
}

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
	if (adv7513_video_init_3d(ec, vic) != 0)
		return -1;
   40cd0:	00bfffc4 	movi	r2,-1
   40cd4:	0000bc06 	br	40fc8 <adv7513_chip_init_3d+0x470>
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
		return -1;

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   40cd8:	8009883a 	mov	r4,r16
   40cdc:	01401304 	movi	r5,76
   40ce0:	018003c4 	movi	r6,15
   40ce4:	01c00104 	movi	r7,4
   40ce8:	00457580 	call	45758 <reg_update_bits>
   40cec:	103fe81e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// pixel repetition
	// 0x3b[6:5] <- pr mode 0)auto 1)max 2)manual 3)manual
	// 0x3b[4:3] <- pr pll (x input) 0)x1 1)x2 2)x4 3)x4
	// 0x3b[2:1] <- pr pll (sent) 0)x1 1)x2 2)x4 3)x4
	if (reg_update_bits(ec, 0x3b, 0x7e, (2 << 5) | (0 << 3) | (0 << 1)) != 0)
   40cf0:	8009883a 	mov	r4,r16
   40cf4:	01400ec4 	movi	r5,59
   40cf8:	01801f84 	movi	r6,126
   40cfc:	01c01004 	movi	r7,64
   40d00:	00457580 	call	45758 <reg_update_bits>
   40d04:	103fe21e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// manual VIC
	// 0x3c[5:0] <- 0x01 & 0x3f
	if (reg_update_bits(ec, 0x3c, 0x3f, vic) != 0)
   40d08:	8009883a 	mov	r4,r16
   40d0c:	01400f04 	movi	r5,60
   40d10:	01800fc4 	movi	r6,63
   40d14:	980f883a 	mov	r7,r19
   40d18:	00457580 	call	45758 <reg_update_bits>
   40d1c:	103fdc1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   40d20:	00800044 	movi	r2,1
	avi->bar.top_e = 0;
	avi->bar.bottom_s = 0;
	avi->bar.left_e = 0;
	avi->bar.right_s = 0;

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
   40d24:	00c00204 	movi	r3,8
	int regv;

	//printf("adv7513_avi_infoframe_3d()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   40d28:	84800915 	stw	r18,36(r16)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   40d2c:	80000c15 	stw	zero,48(r16)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   40d30:	80800b15 	stw	r2,44(r16)

	avi->colorimetry = 0;		// colorimetry
   40d34:	80000f15 	stw	zero,60(r16)
	avi->colorimetry_ext = 0;	// extended colorimetry
   40d38:	80001215 	stw	zero,72(r16)
	avi->scaling = 0;			// non-uniform scaling
   40d3c:	80001015 	stw	zero,64(r16)
	avi->quant = 0;				// rgb quantization range
   40d40:	80001115 	stw	zero,68(r16)
	avi->itc = 0;				// it content
   40d44:	80001315 	stw	zero,76(r16)
	avi->pr = 1;				// pixel repetition factor 0)no 1)2x 2)3x 3)4x ...
   40d48:	80801515 	stw	r2,84(r16)
	avi->vic = vic;				// video identification code
   40d4c:	84c01415 	stw	r19,80(r16)
	avi->yq1yq0 = 0;			// ??
   40d50:	80001615 	stw	zero,88(r16)

	avi->bar_info = 0;  		// bar fields valid
   40d54:	80000a15 	stw	zero,40(r16)
	avi->bar.top_e = 0;
   40d58:	80001715 	stw	zero,92(r16)
	avi->bar.bottom_s = 0;
   40d5c:	80001815 	stw	zero,96(r16)
	avi->bar.left_e = 0;
   40d60:	80001915 	stw	zero,100(r16)
	avi->bar.right_s = 0;
   40d64:	80001a15 	stw	zero,104(r16)

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
   40d68:	80c00d15 	stw	r3,52(r16)

	switch (vic) {
   40d6c:	ac402036 	bltu	r21,r17,40df0 <adv7513_chip_init_3d+0x298>
   40d70:	882290ba 	slli	r17,r17,2
   40d74:	00c00134 	movhi	r3,4
   40d78:	18c36204 	addi	r3,r3,3464
   40d7c:	88e3883a 	add	r17,r17,r3
   40d80:	88c00017 	ldw	r3,0(r17)
   40d84:	1800683a 	jmp	r3
   40d88:	00040dec 	andhi	zero,zero,4151
   40d8c:	00040dec 	andhi	zero,zero,4151
   40d90:	00040de8 	cmpgeui	zero,zero,4151
   40d94:	00040de8 	cmpgeui	zero,zero,4151
   40d98:	00040de8 	cmpgeui	zero,zero,4151
   40d9c:	00040dec 	andhi	zero,zero,4151
   40da0:	00040de8 	cmpgeui	zero,zero,4151
   40da4:	00040dec 	andhi	zero,zero,4151
   40da8:	00040de8 	cmpgeui	zero,zero,4151
   40dac:	00040dec 	andhi	zero,zero,4151
   40db0:	00040de8 	cmpgeui	zero,zero,4151
   40db4:	00040dec 	andhi	zero,zero,4151
   40db8:	00040de8 	cmpgeui	zero,zero,4151
   40dbc:	00040dec 	andhi	zero,zero,4151
   40dc0:	00040de8 	cmpgeui	zero,zero,4151
   40dc4:	00040de8 	cmpgeui	zero,zero,4151
   40dc8:	00040dec 	andhi	zero,zero,4151
   40dcc:	00040de8 	cmpgeui	zero,zero,4151
   40dd0:	00040de8 	cmpgeui	zero,zero,4151
   40dd4:	00040de8 	cmpgeui	zero,zero,4151
   40dd8:	00040dec 	andhi	zero,zero,4151
   40ddc:	00040de8 	cmpgeui	zero,zero,4151
   40de0:	00040dec 	andhi	zero,zero,4151
   40de4:	00040de8 	cmpgeui	zero,zero,4151
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		avi->pict_ar = 2;			// picture aspect ratio (16:9)
   40de8:	00800084 	movi	r2,2
   40dec:	80800e15 	stw	r2,56(r16)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   40df0:	01800404 	movi	r6,16
   40df4:	8009883a 	mov	r4,r16
   40df8:	01401104 	movi	r5,68
   40dfc:	300f883a 	mov	r7,r6
   40e00:	00457580 	call	45758 <reg_update_bits>
   40e04:	103fa21e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   40e08:	01803004 	movi	r6,192
   40e0c:	8009883a 	mov	r4,r16
   40e10:	01401284 	movi	r5,74
   40e14:	300f883a 	mov	r7,r6
   40e18:	00457580 	call	45758 <reg_update_bits>
   40e1c:	103f9c1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   40e20:	80800c17 	ldw	r2,48(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   40e24:	8009883a 	mov	r4,r16
   40e28:	01401544 	movi	r5,85

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   40e2c:	108000cc 	andi	r2,r2,3
   40e30:	100e917a 	slli	r7,r2,5
   40e34:	80800b17 	ldw	r2,44(r16)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   40e38:	01801c04 	movi	r6,112

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   40e3c:	1080004c 	andi	r2,r2,1
   40e40:	1004913a 	slli	r2,r2,4
   40e44:	3884b03a 	or	r2,r7,r2
   40e48:	81c00917 	ldw	r7,36(r16)
   40e4c:	39c000cc 	andi	r7,r7,3
   40e50:	11ceb03a 	or	r7,r2,r7
   40e54:	80800a17 	ldw	r2,40(r16)
   40e58:	108000cc 	andi	r2,r2,3
   40e5c:	1085883a 	add	r2,r2,r2
   40e60:	1085883a 	add	r2,r2,r2
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   40e64:	388eb03a 	or	r7,r7,r2
   40e68:	00457580 	call	45758 <reg_update_bits>
   40e6c:	103f881e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   40e70:	81800f17 	ldw	r6,60(r16)
   40e74:	80800e17 	ldw	r2,56(r16)
	if (reg_write(ec, 0x56, regv) != 0)
   40e78:	8009883a 	mov	r4,r16
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   40e7c:	300c91ba 	slli	r6,r6,6
   40e80:	108000cc 	andi	r2,r2,3
   40e84:	1004913a 	slli	r2,r2,4
   40e88:	31803fcc 	andi	r6,r6,255
	if (reg_write(ec, 0x56, regv) != 0)
   40e8c:	01401584 	movi	r5,86
		return -1;

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   40e90:	3084b03a 	or	r2,r6,r2
   40e94:	81800d17 	ldw	r6,52(r16)
   40e98:	318003cc 	andi	r6,r6,15
	if (reg_write(ec, 0x56, regv) != 0)
   40e9c:	118cb03a 	or	r6,r2,r6
   40ea0:	00457140 	call	45714 <reg_write>
   40ea4:	103f7a1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   40ea8:	80801317 	ldw	r2,76(r16)
	if (reg_write(ec, 0x57, regv) != 0)
   40eac:	8009883a 	mov	r4,r16
   40eb0:	014015c4 	movi	r5,87

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   40eb4:	100491fa 	slli	r2,r2,7
   40eb8:	11803fcc 	andi	r6,r2,255
   40ebc:	80801217 	ldw	r2,72(r16)
   40ec0:	108001cc 	andi	r2,r2,7
   40ec4:	1004913a 	slli	r2,r2,4
   40ec8:	3084b03a 	or	r2,r6,r2
   40ecc:	81801017 	ldw	r6,64(r16)
   40ed0:	318000cc 	andi	r6,r6,3
   40ed4:	118cb03a 	or	r6,r2,r6
   40ed8:	80801117 	ldw	r2,68(r16)
   40edc:	108000cc 	andi	r2,r2,3
   40ee0:	1085883a 	add	r2,r2,r2
   40ee4:	1085883a 	add	r2,r2,r2
	if (reg_write(ec, 0x57, regv) != 0)
   40ee8:	308cb03a 	or	r6,r6,r2
   40eec:	00457140 	call	45714 <reg_write>
   40ef0:	103f671e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   40ef4:	81801617 	ldw	r6,88(r16)
	if (reg_write(ec, 0x59, regv) != 0)
   40ef8:	8009883a 	mov	r4,r16
   40efc:	01401644 	movi	r5,89
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
	if (reg_write(ec, 0x57, regv) != 0)
		return -1;

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   40f00:	300c913a 	slli	r6,r6,4
	if (reg_write(ec, 0x59, regv) != 0)
   40f04:	31803c0c 	andi	r6,r6,240
   40f08:	00457140 	call	45714 <reg_write>
   40f0c:	103f601e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
	if (reg_write(ec, 0x5a, regv) != 0)
   40f10:	81801703 	ldbu	r6,92(r16)
   40f14:	8009883a 	mov	r4,r16
   40f18:	01401684 	movi	r5,90
   40f1c:	00457140 	call	45714 <reg_write>
   40f20:	103f5b1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
	if (reg_write(ec, 0x5b, regv) != 0)
   40f24:	81801743 	ldbu	r6,93(r16)
   40f28:	8009883a 	mov	r4,r16
   40f2c:	014016c4 	movi	r5,91
   40f30:	00457140 	call	45714 <reg_write>
   40f34:	103f561e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
	if (reg_write(ec, 0x5c, regv) != 0)
   40f38:	81801803 	ldbu	r6,96(r16)
   40f3c:	8009883a 	mov	r4,r16
   40f40:	01401704 	movi	r5,92
   40f44:	00457140 	call	45714 <reg_write>
   40f48:	103f511e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
	if (reg_write(ec, 0x5d, regv) != 0)
   40f4c:	81801843 	ldbu	r6,97(r16)
   40f50:	8009883a 	mov	r4,r16
   40f54:	01401744 	movi	r5,93
   40f58:	00457140 	call	45714 <reg_write>
   40f5c:	103f4c1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
	if (reg_write(ec, 0x5e, regv) != 0)
   40f60:	81801903 	ldbu	r6,100(r16)
   40f64:	8009883a 	mov	r4,r16
   40f68:	01401784 	movi	r5,94
   40f6c:	00457140 	call	45714 <reg_write>
   40f70:	103f471e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
	if (reg_write(ec, 0x5f, regv) != 0)
   40f74:	81801943 	ldbu	r6,101(r16)
   40f78:	8009883a 	mov	r4,r16
   40f7c:	014017c4 	movi	r5,95
   40f80:	00457140 	call	45714 <reg_write>
   40f84:	103f421e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
	if (reg_write(ec, 0x60, regv) != 0)
   40f88:	81801a03 	ldbu	r6,104(r16)
   40f8c:	8009883a 	mov	r4,r16
   40f90:	01401804 	movi	r5,96
   40f94:	00457140 	call	45714 <reg_write>
   40f98:	103f3d1e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>
		return -1;

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
	if (reg_write(ec, 0x61, regv) != 0)
   40f9c:	81801a43 	ldbu	r6,105(r16)
   40fa0:	8009883a 	mov	r4,r16
   40fa4:	01401844 	movi	r5,97
   40fa8:	00457140 	call	45714 <reg_write>
   40fac:	103f381e 	bne	r2,zero,40c90 <__alt_data_end+0xfffd9b90>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   40fb0:	8009883a 	mov	r4,r16
   40fb4:	01401284 	movi	r5,74
   40fb8:	01801004 	movi	r6,64
   40fbc:	00458b80 	call	458b8 <reg_clear_bits>
   40fc0:	103f3426 	beq	r2,zero,40c94 <__alt_data_end+0xfffd9b94>
   40fc4:	003f3206 	br	40c90 <__alt_data_end+0xfffd9b90>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
}
   40fc8:	dfc00617 	ldw	ra,24(sp)
   40fcc:	dd400517 	ldw	r21,20(sp)
   40fd0:	dd000417 	ldw	r20,16(sp)
   40fd4:	dcc00317 	ldw	r19,12(sp)
   40fd8:	dc800217 	ldw	r18,8(sp)
   40fdc:	dc400117 	ldw	r17,4(sp)
   40fe0:	dc000017 	ldw	r16,0(sp)
   40fe4:	dec00704 	addi	sp,sp,28
   40fe8:	f800283a 	ret

00040fec <eb_establish_timing>:
	int rb;			// reduced blanking
};

static inline void eb_establish_timing(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   40fec:	d8800017 	ldw	r2,0(sp)
   40ff0:	10000626 	beq	r2,zero,4100c <eb_establish_timing+0x20>
		et->valid = 1;
   40ff4:	00800044 	movi	r2,1
   40ff8:	20800015 	stw	r2,0(r4)
		et->width = x;
   40ffc:	21400115 	stw	r5,4(r4)
		et->height = y;
   41000:	21800215 	stw	r6,8(r4)
		et->refresh = r;
   41004:	21c00315 	stw	r7,12(r4)
   41008:	00000406 	br	4101c <eb_establish_timing+0x30>
		et->interlaced = 0;
		et->rb = 0;
	} else {
		et->valid = 0;
   4100c:	20000015 	stw	zero,0(r4)
		et->width = 0;
   41010:	20000115 	stw	zero,4(r4)
		et->height = 0;
   41014:	20000215 	stw	zero,8(r4)
		et->refresh = 0;
   41018:	20000315 	stw	zero,12(r4)
		et->interlaced = 0;
   4101c:	20000415 	stw	zero,16(r4)
		et->rb = 0;
   41020:	20000515 	stw	zero,20(r4)
   41024:	f800283a 	ret

00041028 <edid_decode_cea>:
    return v;
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
   41028:	deffe504 	addi	sp,sp,-108
   4102c:	dc001115 	stw	r16,68(sp)
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
   41030:	34000044 	addi	r16,r6,1
   41034:	802091fa 	slli	r16,r16,7
    return v;
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
   41038:	dfc01a15 	stw	ra,104(sp)
   4103c:	df001915 	stw	fp,100(sp)
   41040:	ddc01815 	stw	r23,96(sp)
   41044:	dd801715 	stw	r22,92(sp)
   41048:	dd401615 	stw	r21,88(sp)
   4104c:	dd001515 	stw	r20,84(sp)
   41050:	dcc01415 	stw	r19,80(sp)
   41054:	dc801315 	stw	r18,76(sp)
   41058:	dc401215 	stw	r17,72(sp)
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
   4105c:	2c0b883a 	add	r5,r5,r16
	struct edid_cea *cea = &ext_data->cea_ext;

	c = &ext_bin[1];

	// version
	if (*c != 0x03)
   41060:	28c00043 	ldbu	r3,1(r5)
   41064:	008000c4 	movi	r2,3
   41068:	1882ec1e 	bne	r3,r2,41c1c <edid_decode_cea+0xbf4>
		return -1;	// todo: support v1 / v2

	ext_data->ext_tag = EDID_EXT_TAG_CEA;
   4106c:	35016f24 	muli	r20,r6,1468
   41070:	00c00084 	movi	r3,2
   41074:	2505883a 	add	r2,r4,r20
   41078:	10c60b15 	stw	r3,6188(r2)
	cea->rev = *c;
   4107c:	28c00043 	ldbu	r3,1(r5)
   41080:	10c60c15 	stw	r3,6192(r2)

	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
	if (*c > 4)
   41084:	28800083 	ldbu	r2,2(r5)
   41088:	00c00104 	movi	r3,4
   4108c:	1880022e 	bgeu	r3,r2,41098 <edid_decode_cea+0x70>
		dtd = &ext_bin[*c];
   41090:	28af883a 	add	r23,r5,r2
   41094:	00000106 	br	4109c <edid_decode_cea+0x74>
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
	u8 *c, *hv, *dtd = 0;
   41098:	002f883a 	mov	r23,zero
	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
	if (*c > 4)
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
   4109c:	2525883a 	add	r18,r4,r20
   410a0:	90861115 	stw	r2,6212(r18)
	cea->nr_dtd = c[1] & 0x0f;
   410a4:	288000c3 	ldbu	r2,3(r5)
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   410a8:	90c6f404 	addi	r3,r18,7120
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   410ac:	9186f504 	addi	r6,r18,7124
	c = &ext_bin[2];
	if (*c > 4)
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;
   410b0:	108003cc 	andi	r2,r2,15
   410b4:	90861215 	stw	r2,6216(r18)

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
   410b8:	288000c3 	ldbu	r2,3(r5)
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   410bc:	d8c00215 	stw	r3,8(sp)

		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   410c0:	90c6f604 	addi	r3,r18,7128
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
   410c4:	1004d1fa 	srli	r2,r2,7
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   410c8:	d9800315 	stw	r6,12(sp)

		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   410cc:	d8c00415 	stw	r3,16(sp)
		dtd = &ext_bin[*c];

	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
   410d0:	90860d15 	stw	r2,6196(r18)
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
   410d4:	288000c3 	ldbu	r2,3(r5)
		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   410d8:	9186f704 	addi	r6,r18,7132
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   410dc:	90c6f804 	addi	r3,r18,7136

	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
   410e0:	1080100c 	andi	r2,r2,64
   410e4:	1004c03a 	cmpne	r2,r2,zero
   410e8:	90860e15 	stw	r2,6200(r18)
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
   410ec:	288000c3 	ldbu	r2,3(r5)
		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   410f0:	d9800515 	stw	r6,20(sp)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   410f4:	d8c00615 	stw	r3,24(sp)
	cea->off_dtd = c[0];
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
   410f8:	1080080c 	andi	r2,r2,32
   410fc:	1004c03a 	cmpne	r2,r2,zero
   41100:	90860f15 	stw	r2,6204(r18)
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
   41104:	288000c3 	ldbu	r2,3(r5)
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   41108:	9186f904 	addi	r6,r18,7140
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
   4110c:	90c6a704 	addi	r3,r18,6812
	cea->nr_dtd = c[1] & 0x0f;

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
   41110:	1080040c 	andi	r2,r2,16
   41114:	1004c03a 	cmpne	r2,r2,zero
   41118:	90861015 	stw	r2,6208(r18)
   4111c:	a0867504 	addi	r2,r20,6612
   41120:	2085883a 	add	r2,r4,r2
   41124:	d8800015 	stw	r2,0(sp)
   41128:	a0863404 	addi	r2,r20,6352

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
   4112c:	94c61304 	addi	r19,r18,6220
   41130:	2085883a 	add	r2,r4,r2
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   41134:	d9800715 	stw	r6,28(sp)
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
   41138:	d8c00815 	stw	r3,32(sp)
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   4113c:	9186a804 	addi	r6,r18,6816
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   41140:	90c6aa04 	addi	r3,r18,6824
   41144:	202b883a 	mov	r21,r4
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;

	// data block collection
	c = &ext_bin[4];
   41148:	2c000104 	addi	r16,r5,4

	cea->nr_dbcs = 0;
   4114c:	98000015 	stw	zero,0(r19)
   41150:	d8800115 	stw	r2,4(sp)
			case CEA_DBE_AUDIO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_HDMI;
				break;
			}

			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_EXTENDED;
   41154:	9023883a 	mov	r17,r18

		case CEA_DB_VENDOR:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VENDOR;

			if ((c[1] != 0x03) || (c[2] != 0x0c) || (c[3] != 0x00)) {
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
   41158:	9706a904 	addi	fp,r18,6820
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   4115c:	d9800915 	stw	r6,36(sp)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   41160:	d8c00a15 	stw	r3,40(sp)
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
   41164:	9286ab04 	addi	r10,r18,6828
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
   41168:	92c6ac04 	addi	r11,r18,6832
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);
   4116c:	9306ad04 	addi	r12,r18,6836
   41170:	9206ae04 	addi	r8,r18,6840
   41174:	9246b104 	addi	r9,r18,6852

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
	while (c < dtd) {
   41178:	85c1d72e 	bgeu	r16,r23,418d8 <edid_decode_cea+0x8b0>
		switch (*c >> 5) {
   4117c:	80800003 	ldbu	r2,0(r16)
   41180:	00c00184 	movi	r3,6
   41184:	1004d17a 	srli	r2,r2,5
   41188:	10bfffc4 	addi	r2,r2,-1
   4118c:	10803fcc 	andi	r2,r2,255
   41190:	1881d136 	bltu	r3,r2,418d8 <edid_decode_cea+0x8b0>
   41194:	100490ba 	slli	r2,r2,2
   41198:	01800134 	movhi	r6,4
   4119c:	31846b04 	addi	r6,r6,4524
   411a0:	1185883a 	add	r2,r2,r6
   411a4:	10800017 	ldw	r2,0(r2)
   411a8:	1000683a 	jmp	r2
   411ac:	000411c8 	cmpgei	zero,zero,4167
   411b0:	000412bc 	xorhi	zero,zero,4170
   411b4:	0004131c 	xori	zero,zero,4172
   411b8:	000416fc 	xorhi	zero,zero,4187
   411bc:	00041728 	cmpgeui	zero,zero,4188
   411c0:	000418d8 	cmpnei	zero,zero,4195
   411c4:	00041740 	call	4174 <__reset-0x3be8c>
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
   411c8:	98800017 	ldw	r2,0(r19)
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   411cc:	014000c4 	movi	r5,3

	cea->nr_dbcs = 0;
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
   411d0:	10c00044 	addi	r3,r2,1
   411d4:	98c00015 	stw	r3,0(r19)
   411d8:	8885883a 	add	r2,r17,r2
   411dc:	00c00044 	movi	r3,1
   411e0:	10c61405 	stb	r3,6224(r2)
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   411e4:	81000003 	ldbu	r4,0(r16)
   411e8:	88c67404 	addi	r3,r17,6608
   411ec:	d8c01015 	stw	r3,64(sp)
   411f0:	210007cc 	andi	r4,r4,31
   411f4:	da000e15 	stw	r8,56(sp)
   411f8:	da400f15 	stw	r9,60(sp)
   411fc:	da800b15 	stw	r10,44(sp)
   41200:	dac00c15 	stw	r11,48(sp)
   41204:	db000d15 	stw	r12,52(sp)
   41208:	0046d040 	call	46d04 <__divsi3>
   4120c:	d8c01017 	ldw	r3,64(sp)
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41210:	d9000017 	ldw	r4,0(sp)
   41214:	818000c4 	addi	r6,r16,3
	cea->nr_dbcs = 0;
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   41218:	18800015 	stw	r2,0(r3)
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   4121c:	da000e17 	ldw	r8,56(sp)
   41220:	da400f17 	ldw	r9,60(sp)
   41224:	da800b17 	ldw	r10,44(sp)
   41228:	dac00c17 	ldw	r11,48(sp)
   4122c:	db000d17 	ldw	r12,52(sp)
	cea->nr_dbcs = 0;
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   41230:	180b883a 	mov	r5,r3
   41234:	81c00044 	addi	r7,r16,1
   41238:	83800084 	addi	r14,r16,2
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   4123c:	001b883a 	mov	r13,zero
				u8 *sad_bin = &c[1+3*i];
				cea->db_audio.sad[i].format = (int)((*sad_bin >> 3) & 0xf);
				cea->db_audio.sad[i].channels = (int)(*sad_bin & 0x7) + 1;
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
   41240:	03c00044 	movi	r15,1
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
				} else if (cea->db_audio.sad[i].format != 0) {
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
   41244:	07c00204 	movi	ra,8
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41248:	28800017 	ldw	r2,0(r5)
   4124c:	68819d0e 	bge	r13,r2,418c4 <edid_decode_cea+0x89c>
				u8 *sad_bin = &c[1+3*i];
				cea->db_audio.sad[i].format = (int)((*sad_bin >> 3) & 0xf);
   41250:	38800003 	ldbu	r2,0(r7)
   41254:	1004d0fa 	srli	r2,r2,3
   41258:	108003cc 	andi	r2,r2,15
   4125c:	20800015 	stw	r2,0(r4)
				cea->db_audio.sad[i].channels = (int)(*sad_bin & 0x7) + 1;
   41260:	38c00003 	ldbu	r3,0(r7)
   41264:	18c001cc 	andi	r3,r3,7
   41268:	18c00044 	addi	r3,r3,1
   4126c:	20c00115 	stw	r3,4(r4)
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);
   41270:	70c00003 	ldbu	r3,0(r14)
   41274:	18c01fcc 	andi	r3,r3,127
   41278:	20c00215 	stw	r3,8(r4)

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
   4127c:	13c0041e 	bne	r2,r15,41290 <edid_decode_cea+0x268>
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
   41280:	30800003 	ldbu	r2,0(r6)
   41284:	108001cc 	andi	r2,r2,7
   41288:	20800315 	stw	r2,12(r4)
   4128c:	00000506 	br	412a4 <edid_decode_cea+0x27c>
				} else if (cea->db_audio.sad[i].format != 0) {
   41290:	10000426 	beq	r2,zero,412a4 <edid_decode_cea+0x27c>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
   41294:	f8800316 	blt	ra,r2,412a4 <edid_decode_cea+0x27c>
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
   41298:	30800003 	ldbu	r2,0(r6)
   4129c:	100490fa 	slli	r2,r2,3
   412a0:	20800415 	stw	r2,16(r4)
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   412a4:	6b400044 	addi	r13,r13,1
   412a8:	318000c4 	addi	r6,r6,3
   412ac:	39c000c4 	addi	r7,r7,3
   412b0:	21000504 	addi	r4,r4,20
   412b4:	738000c4 	addi	r14,r14,3
   412b8:	003fe306 	br	41248 <__alt_data_end+0xfffda148>
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
   412bc:	98800017 	ldw	r2,0(r19)
			cea->db_video.nr_svd = (int)(*c & 0x1f);
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   412c0:	d9000117 	ldw	r4,4(sp)
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
   412c4:	10c00044 	addi	r3,r2,1
   412c8:	98c00015 	stw	r3,0(r19)
   412cc:	8885883a 	add	r2,r17,r2
   412d0:	00c00084 	movi	r3,2
   412d4:	10c61405 	stb	r3,6224(r2)
			cea->db_video.nr_svd = (int)(*c & 0x1f);
   412d8:	80800003 	ldbu	r2,0(r16)
   412dc:	88c63304 	addi	r3,r17,6348
   412e0:	108007cc 	andi	r2,r2,31
   412e4:	18800015 	stw	r2,0(r3)
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   412e8:	8005883a 	mov	r2,r16
   412ec:	19400017 	ldw	r5,0(r3)
   412f0:	140dc83a 	sub	r6,r2,r16
   412f4:	10800044 	addi	r2,r2,1
   412f8:	3141720e 	bge	r6,r5,418c4 <edid_decode_cea+0x89c>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
   412fc:	11400007 	ldb	r5,0(r2)
   41300:	21000204 	addi	r4,r4,8
   41304:	280ad7fa 	srli	r5,r5,31
   41308:	217ffe15 	stw	r5,-8(r4)
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
   4130c:	11400003 	ldbu	r5,0(r2)
   41310:	29401fcc 	andi	r5,r5,127
   41314:	217fff15 	stw	r5,-4(r4)
   41318:	003ff406 	br	412ec <__alt_data_end+0xfffda1ec>
			}
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_VENDOR:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VENDOR;
   4131c:	98800017 	ldw	r2,0(r19)
   41320:	10c00044 	addi	r3,r2,1
   41324:	98c00015 	stw	r3,0(r19)
   41328:	8885883a 	add	r2,r17,r2
   4132c:	00c000c4 	movi	r3,3
   41330:	10c61405 	stb	r3,6224(r2)

			if ((c[1] != 0x03) || (c[2] != 0x0c) || (c[3] != 0x00)) {
   41334:	80c00043 	ldbu	r3,1(r16)
   41338:	008000c4 	movi	r2,3
   4133c:	1880051e 	bne	r3,r2,41354 <edid_decode_cea+0x32c>
   41340:	80c00083 	ldbu	r3,2(r16)
   41344:	00800304 	movi	r2,12
   41348:	1880021e 	bne	r3,r2,41354 <edid_decode_cea+0x32c>
   4134c:	808000c3 	ldbu	r2,3(r16)
   41350:	10000226 	beq	r2,zero,4135c <edid_decode_cea+0x334>
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
   41354:	e0000015 	stw	zero,0(fp)
   41358:	00015a06 	br	418c4 <edid_decode_cea+0x89c>
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   4135c:	80800003 	ldbu	r2,0(r16)
   41360:	d8c00917 	ldw	r3,36(sp)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   41364:	d9800a17 	ldw	r6,40(sp)
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   41368:	108007cc 	andi	r2,r2,31
   4136c:	18800015 	stw	r2,0(r3)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
   41370:	808000c3 	ldbu	r2,3(r16)
			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);

			if ((*c & 0x1f) >= 6) {
   41374:	01c00144 	movi	r7,5
   41378:	8946af04 	addi	r5,r17,6844
				c += (*c & 0x1f) + 1;
				break;
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
   4137c:	1006943a 	slli	r3,r2,16
   41380:	80800083 	ldbu	r2,2(r16)
   41384:	8906b204 	addi	r4,r17,6856
   41388:	1004923a 	slli	r2,r2,8
   4138c:	1884b03a 	or	r2,r3,r2
   41390:	80c00043 	ldbu	r3,1(r16)
   41394:	10c4b03a 	or	r2,r2,r3
   41398:	e0800015 	stw	r2,0(fp)

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   4139c:	80800103 	ldbu	r2,4(r16)
   413a0:	88c6b304 	addi	r3,r17,6860
   413a4:	1004d13a 	srli	r2,r2,4
   413a8:	30800015 	stw	r2,0(r6)
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
   413ac:	80800103 	ldbu	r2,4(r16)
   413b0:	8986b004 	addi	r6,r17,6848
   413b4:	108003cc 	andi	r2,r2,15
   413b8:	50800015 	stw	r2,0(r10)
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
   413bc:	80800143 	ldbu	r2,5(r16)
   413c0:	1004d13a 	srli	r2,r2,4
   413c4:	58800015 	stw	r2,0(r11)
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);
   413c8:	80800143 	ldbu	r2,5(r16)
   413cc:	108003cc 	andi	r2,r2,15
   413d0:	60800015 	stw	r2,0(r12)

			if ((*c & 0x1f) >= 6) {
   413d4:	80800003 	ldbu	r2,0(r16)
   413d8:	108007cc 	andi	r2,r2,31
   413dc:	3880172e 	bgeu	r7,r2,4143c <edid_decode_cea+0x414>
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
   413e0:	80800187 	ldb	r2,6(r16)
   413e4:	1004d7fa 	srli	r2,r2,31
   413e8:	40800015 	stw	r2,0(r8)
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
   413ec:	80800183 	ldbu	r2,6(r16)
   413f0:	1004d1ba 	srli	r2,r2,6
   413f4:	1080004c 	andi	r2,r2,1
   413f8:	48800015 	stw	r2,0(r9)
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
   413fc:	80800183 	ldbu	r2,6(r16)
   41400:	11c4d83a 	srl	r2,r2,r7
   41404:	1080004c 	andi	r2,r2,1
   41408:	30800015 	stw	r2,0(r6)
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
   4140c:	80800183 	ldbu	r2,6(r16)
   41410:	1004d13a 	srli	r2,r2,4
   41414:	1080004c 	andi	r2,r2,1
   41418:	28800015 	stw	r2,0(r5)
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
   4141c:	80800183 	ldbu	r2,6(r16)
   41420:	1004d0fa 	srli	r2,r2,3
   41424:	1080004c 	andi	r2,r2,1
   41428:	20800015 	stw	r2,0(r4)
				cea->db_vsdb_hdmi.dvi_dual = (c[6] & 0x01) ? 1 : 0;
   4142c:	80800183 	ldbu	r2,6(r16)
   41430:	1080004c 	andi	r2,r2,1
   41434:	18800015 	stw	r2,0(r3)
   41438:	00000606 	br	41454 <edid_decode_cea+0x42c>
			} else {
				cea->db_vsdb_hdmi.ai = 0;
   4143c:	40000015 	stw	zero,0(r8)
				cea->db_vsdb_hdmi.bpp48 = 0;
   41440:	48000015 	stw	zero,0(r9)
				cea->db_vsdb_hdmi.bpp36 = 0;
   41444:	30000015 	stw	zero,0(r6)
				cea->db_vsdb_hdmi.bpp30 = 0;
   41448:	28000015 	stw	zero,0(r5)
				cea->db_vsdb_hdmi.ycbcr444 = 0;
   4144c:	20000015 	stw	zero,0(r4)
				cea->db_vsdb_hdmi.dvi_dual = 0;
   41450:	18000015 	stw	zero,0(r3)
			}

			if ((*c & 0x1f) >= 7) {
   41454:	80800003 	ldbu	r2,0(r16)
   41458:	00c00184 	movi	r3,6
   4145c:	108007cc 	andi	r2,r2,31
   41460:	1880042e 	bgeu	r3,r2,41474 <edid_decode_cea+0x44c>
				cea->db_vsdb_hdmi.max_tmds_clk = c[7] * 5;
   41464:	808001c3 	ldbu	r2,7(r16)
   41468:	10800164 	muli	r2,r2,5
   4146c:	8886b715 	stw	r2,6876(r17)
   41470:	00000106 	br	41478 <edid_decode_cea+0x450>
			} else {
				cea->db_vsdb_hdmi.max_tmds_clk = 0;
   41474:	8806b715 	stw	zero,6876(r17)
			}

			cea->db_vsdb_hdmi.p_latency = 0;
   41478:	8946b404 	addi	r5,r17,6864
   4147c:	28000015 	stw	zero,0(r5)
			cea->db_vsdb_hdmi.i_latency = 0;
   41480:	8806b515 	stw	zero,6868(r17)
			cea->db_vsdb_hdmi.hdmi_video = 0;
   41484:	8806b615 	stw	zero,6872(r17)

			cea->db_vsdb_hdmi.vid_latency_p = 0;
   41488:	8906b804 	addi	r4,r17,6880
   4148c:	20000015 	stw	zero,0(r4)
			cea->db_vsdb_hdmi.aud_latency_p = 0;
   41490:	88c6b904 	addi	r3,r17,6884
   41494:	18000015 	stw	zero,0(r3)
			cea->db_vsdb_hdmi.vid_latency_i = 0;
   41498:	8806ba15 	stw	zero,6888(r17)
			cea->db_vsdb_hdmi.aud_latency_i = 0;
   4149c:	8806bb15 	stw	zero,6892(r17)

			if ((*c & 0x1f) >= 8) {
   414a0:	80800003 	ldbu	r2,0(r16)
   414a4:	018001c4 	movi	r6,7
   414a8:	108007cc 	andi	r2,r2,31
   414ac:	3080232e 	bgeu	r6,r2,4153c <edid_decode_cea+0x514>
				u8 c8 = c[8];
   414b0:	80800203 	ldbu	r2,8(r16)
				hv = &c[9];
				if (c8 & 0x80) {
   414b4:	11803fcc 	andi	r6,r2,255
   414b8:	3180201c 	xori	r6,r6,128
   414bc:	31bfe004 	addi	r6,r6,-128
   414c0:	30000216 	blt	r6,zero,414cc <edid_decode_cea+0x4a4>
			cea->db_vsdb_hdmi.vid_latency_i = 0;
			cea->db_vsdb_hdmi.aud_latency_i = 0;

			if ((*c & 0x1f) >= 8) {
				u8 c8 = c[8];
				hv = &c[9];
   414c4:	85800244 	addi	r22,r16,9
   414c8:	00000b06 	br	414f8 <edid_decode_cea+0x4d0>
				if (c8 & 0x80) {
					cea->db_vsdb_hdmi.p_latency = 1;
   414cc:	01800044 	movi	r6,1
   414d0:	29800015 	stw	r6,0(r5)
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
   414d4:	81400243 	ldbu	r5,9(r16)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
   414d8:	858002c4 	addi	r22,r16,11
			if ((*c & 0x1f) >= 8) {
				u8 c8 = c[8];
				hv = &c[9];
				if (c8 & 0x80) {
					cea->db_vsdb_hdmi.p_latency = 1;
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
   414dc:	297fffc4 	addi	r5,r5,-1
   414e0:	294b883a 	add	r5,r5,r5
   414e4:	21400015 	stw	r5,0(r4)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
   414e8:	81000283 	ldbu	r4,10(r16)
   414ec:	213fffc4 	addi	r4,r4,-1
   414f0:	2109883a 	add	r4,r4,r4
   414f4:	19000015 	stw	r4,0(r3)
					hv += 2;
				}
				if (c8 & 0x40) {
   414f8:	10c0100c 	andi	r3,r2,64
   414fc:	18000b26 	beq	r3,zero,4152c <edid_decode_cea+0x504>
					cea->db_vsdb_hdmi.i_latency = 1;
   41500:	00c00044 	movi	r3,1
   41504:	88c6b515 	stw	r3,6868(r17)
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
   41508:	b0c00003 	ldbu	r3,0(r22)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
   4150c:	b5800084 	addi	r22,r22,2
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
					hv += 2;
				}
				if (c8 & 0x40) {
					cea->db_vsdb_hdmi.i_latency = 1;
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
   41510:	18ffffc4 	addi	r3,r3,-1
   41514:	18c7883a 	add	r3,r3,r3
   41518:	88c6ba15 	stw	r3,6888(r17)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
   4151c:	b0ffffc3 	ldbu	r3,-1(r22)
   41520:	18ffffc4 	addi	r3,r3,-1
   41524:	18c7883a 	add	r3,r3,r3
   41528:	88c6bb15 	stw	r3,6892(r17)
					hv += 2;
				}
				if (c8 & 0x20) {
   4152c:	1080080c 	andi	r2,r2,32
   41530:	10000226 	beq	r2,zero,4153c <edid_decode_cea+0x514>
					cea->db_vsdb_hdmi.hdmi_video = 1;
   41534:	00800044 	movi	r2,1
   41538:	8886b615 	stw	r2,6872(r17)
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
   4153c:	8886b617 	ldw	r2,6872(r17)
   41540:	89c6bc04 	addi	r7,r17,6896
   41544:	8986bd04 	addi	r6,r17,6900
   41548:	8946be04 	addi	r5,r17,6904
   4154c:	8906bf04 	addi	r4,r17,6908
   41550:	88c6c004 	addi	r3,r17,6912
   41554:	0080120e 	bge	zero,r2,415a0 <edid_decode_cea+0x578>
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
   41558:	b0800007 	ldb	r2,0(r22)
   4155c:	1004d7fa 	srli	r2,r2,31
   41560:	38800015 	stw	r2,0(r7)
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
   41564:	b0800003 	ldbu	r2,0(r22)
   41568:	1004d17a 	srli	r2,r2,5
   4156c:	108000cc 	andi	r2,r2,3
   41570:	30800015 	stw	r2,0(r6)
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
   41574:	b0800003 	ldbu	r2,0(r22)
   41578:	1004d0fa 	srli	r2,r2,3
   4157c:	108000cc 	andi	r2,r2,3
   41580:	28800015 	stw	r2,0(r5)
				cea->db_vsdb_hdmi.hdmi_xx_len = hv[1] >> 5;
   41584:	b0800043 	ldbu	r2,1(r22)
   41588:	1004d17a 	srli	r2,r2,5
   4158c:	20800015 	stw	r2,0(r4)
				cea->db_vsdb_hdmi.hdmi_3d_len = hv[1] & 0x1f;
   41590:	b0800043 	ldbu	r2,1(r22)
   41594:	108007cc 	andi	r2,r2,31
   41598:	18800015 	stw	r2,0(r3)
   4159c:	00000506 	br	415b4 <edid_decode_cea+0x58c>
			} else {
				cea->db_vsdb_hdmi.present_3d = 0;
   415a0:	38000015 	stw	zero,0(r7)
				cea->db_vsdb_hdmi.multi_3d = 0;
   415a4:	30000015 	stw	zero,0(r6)
				cea->db_vsdb_hdmi.image_size = 0;
   415a8:	28000015 	stw	zero,0(r5)
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
   415ac:	20000015 	stw	zero,0(r4)
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
   415b0:	18000015 	stw	zero,0(r3)
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
   415b4:	8946c004 	addi	r5,r17,6912
   415b8:	28800017 	ldw	r2,0(r5)
   415bc:	8906c104 	addi	r4,r17,6916
   415c0:	88c6c204 	addi	r3,r17,6920
   415c4:	00804a0e 	bge	zero,r2,416f0 <edid_decode_cea+0x6c8>
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
   415c8:	8886bf17 	ldw	r2,6908(r17)
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   415cc:	8986bd17 	ldw	r6,6900(r17)
   415d0:	01c00084 	movi	r7,2
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
   415d4:	10800084 	addi	r2,r2,2
   415d8:	b085883a 	add	r2,r22,r2
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   415dc:	31c00e1e 	bne	r6,r7,41618 <edid_decode_cea+0x5f0>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   415e0:	11c00003 	ldbu	r7,0(r2)
   415e4:	11800043 	ldbu	r6,1(r2)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
   415e8:	10800104 	addi	r2,r2,4
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   415ec:	380e923a 	slli	r7,r7,8
   415f0:	398cb03a 	or	r6,r7,r6
   415f4:	21800015 	stw	r6,0(r4)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
   415f8:	11bfff83 	ldbu	r6,-2(r2)
   415fc:	113fffc3 	ldbu	r4,-1(r2)
   41600:	300c923a 	slli	r6,r6,8
   41604:	3108b03a 	or	r4,r6,r4
   41608:	19000015 	stw	r4,0(r3)
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
   4160c:	28c00017 	ldw	r3,0(r5)
   41610:	18ffff04 	addi	r3,r3,-4
   41614:	00001006 	br	41658 <edid_decode_cea+0x630>
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
   41618:	01c00044 	movi	r7,1
   4161c:	31c00a1e 	bne	r6,r7,41648 <edid_decode_cea+0x620>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   41620:	11c00003 	ldbu	r7,0(r2)
   41624:	11800043 	ldbu	r6,1(r2)
					cea->db_vsdb_hdmi.mask_3d = 0;
					vic = &d[2];
   41628:	10800084 	addi	r2,r2,2
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
					vic = &d[4];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   4162c:	380e923a 	slli	r7,r7,8
   41630:	398cb03a 	or	r6,r7,r6
   41634:	21800015 	stw	r6,0(r4)
					cea->db_vsdb_hdmi.mask_3d = 0;
   41638:	18000015 	stw	zero,0(r3)
					vic = &d[2];
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 2;
   4163c:	28c00017 	ldw	r3,0(r5)
   41640:	18ffff84 	addi	r3,r3,-2
   41644:	00000406 	br	41658 <edid_decode_cea+0x630>
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
   41648:	20000015 	stw	zero,0(r4)
					cea->db_vsdb_hdmi.mask_3d = 0;
   4164c:	18000015 	stw	zero,0(r3)
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
   41650:	0005883a 	mov	r2,zero
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1
   41654:	0007883a 	mov	r3,zero
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
   41658:	8946c304 	addi	r5,r17,6924
   4165c:	28000015 	stw	zero,0(r5)
				while (vic_l > 0) {
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
   41660:	018001c4 	movi	r6,7
					cea->db_vsdb_hdmi.struct_all_3d = 0;
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
   41664:	00c0970e 	bge	zero,r3,418c4 <edid_decode_cea+0x89c>
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
   41668:	29000017 	ldw	r4,0(r5)
   4166c:	11c00003 	ldbu	r7,0(r2)
   41670:	21000324 	muli	r4,r4,12
   41674:	380ed13a 	srli	r7,r7,4
   41678:	2509883a 	add	r4,r4,r20
   4167c:	a909883a 	add	r4,r21,r4
   41680:	21c6c415 	stw	r7,6928(r4)
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
   41684:	29000017 	ldw	r4,0(r5)
   41688:	11c00003 	ldbu	r7,0(r2)
   4168c:	21000324 	muli	r4,r4,12
   41690:	39c003cc 	andi	r7,r7,15
   41694:	2509883a 	add	r4,r4,r20
   41698:	a909883a 	add	r4,r21,r4
   4169c:	21c6c515 	stw	r7,6932(r4)
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
   416a0:	29000017 	ldw	r4,0(r5)
   416a4:	21000324 	muli	r4,r4,12
   416a8:	2509883a 	add	r4,r4,r20
   416ac:	a909883a 	add	r4,r21,r4
   416b0:	21c6c517 	ldw	r7,6932(r4)
   416b4:	2106c604 	addi	r4,r4,6936
   416b8:	31c0060e 	bge	r6,r7,416d4 <edid_decode_cea+0x6ac>
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
   416bc:	11c00043 	ldbu	r7,1(r2)
						vic += 2;
						vic_l -= 2;
   416c0:	18ffff84 	addi	r3,r3,-2
				while (vic_l > 0) {
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
						vic += 2;
   416c4:	10800084 	addi	r2,r2,2
				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
   416c8:	380ed13a 	srli	r7,r7,4
   416cc:	21c00015 	stw	r7,0(r4)
   416d0:	00000306 	br	416e0 <edid_decode_cea+0x6b8>
						vic += 2;
						vic_l -= 2;
					} else {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = 0;
   416d4:	20000015 	stw	zero,0(r4)
						++vic;
   416d8:	10800044 	addi	r2,r2,1
						--vic_l;
   416dc:	18ffffc4 	addi	r3,r3,-1
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
   416e0:	29000017 	ldw	r4,0(r5)
   416e4:	21000044 	addi	r4,r4,1
   416e8:	29000015 	stw	r4,0(r5)
   416ec:	003fdd06 	br	41664 <__alt_data_end+0xfffda564>
				}
			} else {
				cea->db_vsdb_hdmi.struct_all_3d = 0;
   416f0:	20000015 	stw	zero,0(r4)
				cea->db_vsdb_hdmi.mask_3d = 0;
   416f4:	18000015 	stw	zero,0(r3)
   416f8:	00007206 	br	418c4 <edid_decode_cea+0x89c>

			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
   416fc:	98800017 	ldw	r2,0(r19)
   41700:	10c00044 	addi	r3,r2,1
   41704:	98c00015 	stw	r3,0(r19)
   41708:	8885883a 	add	r2,r17,r2
   4170c:	00c00104 	movi	r3,4
   41710:	10c61405 	stb	r3,6224(r2)
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
   41714:	80800043 	ldbu	r2,1(r16)
   41718:	d8c00817 	ldw	r3,32(sp)
   4171c:	10801fcc 	andi	r2,r2,127
   41720:	18800015 	stw	r2,0(r3)
   41724:	00006706 	br	418c4 <edid_decode_cea+0x89c>
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_DTC:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_DTC;
   41728:	98800017 	ldw	r2,0(r19)
   4172c:	10c00044 	addi	r3,r2,1
   41730:	98c00015 	stw	r3,0(r19)
   41734:	8885883a 	add	r2,r17,r2
   41738:	00c00144 	movi	r3,5
   4173c:	00006006 	br	418c0 <edid_decode_cea+0x898>
			c += (*c & 0x1f) + 1;
			break;

		case CEA_DB_EXTENDED:
			switch (c[1]) {
   41740:	80800043 	ldbu	r2,1(r16)
   41744:	00c00484 	movi	r3,18
   41748:	18805836 	bltu	r3,r2,418ac <edid_decode_cea+0x884>
   4174c:	100490ba 	slli	r2,r2,2
   41750:	01800134 	movhi	r6,4
   41754:	3185d904 	addi	r6,r6,5988
   41758:	1185883a 	add	r2,r2,r6
   4175c:	10800017 	ldw	r2,0(r2)
   41760:	1000683a 	jmp	r2
   41764:	000417b0 	cmpltui	zero,zero,4190
   41768:	00041808 	cmpgei	zero,zero,4192
   4176c:	00041818 	cmpnei	zero,zero,4192
   41770:	00041828 	cmpgeui	zero,zero,4192
   41774:	00041838 	rdprs	zero,zero,4192
   41778:	00041848 	cmpgei	zero,zero,4193
   4177c:	000418ac 	andhi	zero,zero,4194
   41780:	000418ac 	andhi	zero,zero,4194
   41784:	000418ac 	andhi	zero,zero,4194
   41788:	000418ac 	andhi	zero,zero,4194
   4178c:	000418ac 	andhi	zero,zero,4194
   41790:	000418ac 	andhi	zero,zero,4194
   41794:	000418ac 	andhi	zero,zero,4194
   41798:	000418ac 	andhi	zero,zero,4194
   4179c:	000418ac 	andhi	zero,zero,4194
   417a0:	000418ac 	andhi	zero,zero,4194
   417a4:	0004187c 	xorhi	zero,zero,4193
   417a8:	0004188c 	andi	zero,zero,4194
   417ac:	0004189c 	xori	zero,zero,4194
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
   417b0:	98800017 	ldw	r2,0(r19)
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   417b4:	d8c00417 	ldw	r3,16(sp)
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   417b8:	d9800517 	ldw	r6,20(sp)
			break;

		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
   417bc:	8885883a 	add	r2,r17,r2
   417c0:	10062385 	stb	zero,6286(r2)
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   417c4:	80800083 	ldbu	r2,2(r16)
   417c8:	1004d1ba 	srli	r2,r2,6
   417cc:	1080004c 	andi	r2,r2,1
   417d0:	18800015 	stw	r2,0(r3)
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   417d4:	80800083 	ldbu	r2,2(r16)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   417d8:	d8c00617 	ldw	r3,24(sp)
		case CEA_DB_EXTENDED:
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   417dc:	1004d13a 	srli	r2,r2,4
   417e0:	108000cc 	andi	r2,r2,3
   417e4:	30800015 	stw	r2,0(r6)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   417e8:	80800083 	ldbu	r2,2(r16)
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   417ec:	d9800717 	ldw	r6,28(sp)
			switch (c[1]) {
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   417f0:	1004d0ba 	srli	r2,r2,2
   417f4:	108000cc 	andi	r2,r2,3
   417f8:	18800015 	stw	r2,0(r3)
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   417fc:	80800083 	ldbu	r2,2(r16)
   41800:	108000cc 	andi	r2,r2,3
   41804:	00001b06 	br	41874 <edid_decode_cea+0x84c>
				break;
			case CEA_DBE_VIDEO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VENDOR;
   41808:	98800017 	ldw	r2,0(r19)
   4180c:	00c00044 	movi	r3,1
   41810:	8885883a 	add	r2,r17,r2
   41814:	00002406 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_VIDEO_DDI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_DDI;
   41818:	98800017 	ldw	r2,0(r19)
   4181c:	00c00084 	movi	r3,2
   41820:	8885883a 	add	r2,r17,r2
   41824:	00002006 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_VIDEO_VESA:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VESA;
   41828:	98800017 	ldw	r2,0(r19)
   4182c:	00c000c4 	movi	r3,3
   41830:	8885883a 	add	r2,r17,r2
   41834:	00001c06 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
   41838:	98800017 	ldw	r2,0(r19)
   4183c:	00c00104 	movi	r3,4
   41840:	8885883a 	add	r2,r17,r2
   41844:	00001806 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
   41848:	98800017 	ldw	r2,0(r19)
   4184c:	00c00144 	movi	r3,5
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   41850:	d9800317 	ldw	r6,12(sp)
				break;
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
				break;
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
   41854:	8885883a 	add	r2,r17,r2
   41858:	10c62385 	stb	r3,6286(r2)
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   4185c:	80800083 	ldbu	r2,2(r16)
   41860:	d8c00217 	ldw	r3,8(sp)
   41864:	108000cc 	andi	r2,r2,3
   41868:	18800015 	stw	r2,0(r3)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   4186c:	808000c3 	ldbu	r2,3(r16)
   41870:	108001cc 	andi	r2,r2,7
   41874:	30800015 	stw	r2,0(r6)
				break;
   41878:	00000c06 	br	418ac <edid_decode_cea+0x884>
			case CEA_DBE_AUDIO_MISC:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_MISC;
   4187c:	98800017 	ldw	r2,0(r19)
   41880:	00c00404 	movi	r3,16
   41884:	8885883a 	add	r2,r17,r2
   41888:	00000706 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_AUDIO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_VENDOR;
   4188c:	98800017 	ldw	r2,0(r19)
   41890:	00c00444 	movi	r3,17
   41894:	8885883a 	add	r2,r17,r2
   41898:	00000306 	br	418a8 <edid_decode_cea+0x880>
				break;
			case CEA_DBE_AUDIO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_HDMI;
   4189c:	98800017 	ldw	r2,0(r19)
   418a0:	00c00484 	movi	r3,18
   418a4:	8885883a 	add	r2,r17,r2
   418a8:	10c62385 	stb	r3,6286(r2)
				break;
			}

			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_EXTENDED;
   418ac:	98800017 	ldw	r2,0(r19)
   418b0:	10c00044 	addi	r3,r2,1
   418b4:	98c00015 	stw	r3,0(r19)
   418b8:	8885883a 	add	r2,r17,r2
   418bc:	00c001c4 	movi	r3,7
   418c0:	10c61405 	stb	r3,6224(r2)

			c += (*c & 0x1f) + 1;
   418c4:	80800003 	ldbu	r2,0(r16)
   418c8:	108007cc 	andi	r2,r2,31
   418cc:	10800044 	addi	r2,r2,1
   418d0:	80a1883a 	add	r16,r16,r2
			break;
   418d4:	003e2806 	br	41178 <__alt_data_end+0xfffda078>
			break;
		}
	}

	// detail timing descriptor
	if (dtd == 0)
   418d8:	b800b026 	beq	r23,zero,41b9c <edid_decode_cea+0xb74>
   418dc:	9005883a 	mov	r2,r18
   418e0:	a1470904 	addi	r5,r20,7204
   418e4:	a1070804 	addi	r4,r20,7200
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   418e8:	17c61204 	addi	ra,r2,6216
   418ec:	a94b883a 	add	r5,r21,r5
   418f0:	b9c00444 	addi	r7,r23,17
   418f4:	b807883a 	mov	r3,r23
   418f8:	a909883a 	add	r4,r21,r4
   418fc:	bd000044 	addi	r20,r23,1
   41900:	ba800104 	addi	r10,r23,4
   41904:	bcc00084 	addi	r19,r23,2
   41908:	ba4001c4 	addi	r9,r23,7
   4190c:	bc400144 	addi	r17,r23,5
   41910:	bc0000c4 	addi	r16,r23,3
   41914:	bbc00184 	addi	r15,r23,6
   41918:	ba0002c4 	addi	r8,r23,11
   4191c:	bb800204 	addi	r14,r23,8
   41920:	bac00284 	addi	r11,r23,10
   41924:	bc800244 	addi	r18,r23,9
   41928:	bb000384 	addi	r12,r23,14
   4192c:	bd400304 	addi	r21,r23,12
			break;
		}
	}

	// detail timing descriptor
	if (dtd == 0)
   41930:	001b883a 	mov	r13,zero
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   41934:	dfc00015 	stw	ra,0(sp)
        cea->detailed_timing[i].border_tb = (int)c[16];

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;

        cea->detailed_timing[i].stereo = STEREO_NONE;
		if ((c[17] & 0x61) == 0x20)
   41938:	05800804 	movi	r22,32
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   4193c:	05c00084 	movi	r23,2
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
		if ((c[17] & 0x61) == 0x21)
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
		if ((c[17] & 0x61) == 0x41)
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
		if ((c[17] & 0x61) == 0x60)
   41940:	07001804 	movi	fp,96
   41944:	00009206 	br	41b90 <edid_decode_cea+0xb68>
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
		c = &dtd[18 * i];

        cea->detailed_timing[i].pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   41948:	a7c00003 	ldbu	ra,0(r20)
   4194c:	19800003 	ldbu	r6,0(r3)
   41950:	f83e923a 	slli	ra,ra,8
   41954:	f98cb03a 	or	r6,ra,r6
   41958:	3189c424 	muli	r6,r6,10000
   4195c:	1186fa15 	stw	r6,7144(r2)
        cea->detailed_timing[i].width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   41960:	51800003 	ldbu	r6,0(r10)
   41964:	9fc00003 	ldbu	ra,0(r19)
   41968:	300c913a 	slli	r6,r6,4
   4196c:	3183c00c 	andi	r6,r6,3840
   41970:	37ccb03a 	or	r6,r6,ra
   41974:	1186fb15 	stw	r6,7148(r2)
        cea->detailed_timing[i].height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   41978:	49800003 	ldbu	r6,0(r9)
   4197c:	8fc00003 	ldbu	ra,0(r17)
   41980:	300c913a 	slli	r6,r6,4
   41984:	3183c00c 	andi	r6,r6,3840
   41988:	37ccb03a 	or	r6,r6,ra
   4198c:	1186fc15 	stw	r6,7152(r2)
        cea->detailed_timing[i].h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   41990:	51800003 	ldbu	r6,0(r10)
   41994:	87c00003 	ldbu	ra,0(r16)
   41998:	300c923a 	slli	r6,r6,8
   4199c:	3183c00c 	andi	r6,r6,3840
   419a0:	37ccb03a 	or	r6,r6,ra
   419a4:	1186fd15 	stw	r6,7156(r2)
        cea->detailed_timing[i].v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   419a8:	49800003 	ldbu	r6,0(r9)
   419ac:	7fc00003 	ldbu	ra,0(r15)
   419b0:	300c923a 	slli	r6,r6,8
   419b4:	3183c00c 	andi	r6,r6,3840
   419b8:	37ccb03a 	or	r6,r6,ra
   419bc:	1186fe15 	stw	r6,7160(r2)
        cea->detailed_timing[i].h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   419c0:	41800003 	ldbu	r6,0(r8)
   419c4:	77c00003 	ldbu	ra,0(r14)
   419c8:	318d883a 	add	r6,r6,r6
   419cc:	318d883a 	add	r6,r6,r6
   419d0:	3180c00c 	andi	r6,r6,768
   419d4:	37ccb03a 	or	r6,r6,ra
   419d8:	1186ff15 	stw	r6,7164(r2)
        cea->detailed_timing[i].v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   419dc:	41800003 	ldbu	r6,0(r8)
   419e0:	5fc00003 	ldbu	ra,0(r11)
   419e4:	318d883a 	add	r6,r6,r6
   419e8:	f83ed13a 	srli	ra,ra,4
   419ec:	318d883a 	add	r6,r6,r6
   419f0:	31800c0c 	andi	r6,r6,48
   419f4:	37ccb03a 	or	r6,r6,ra
   419f8:	11870015 	stw	r6,7168(r2)
        cea->detailed_timing[i].h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   419fc:	41800003 	ldbu	r6,0(r8)
   41a00:	97c00003 	ldbu	ra,0(r18)
   41a04:	300c913a 	slli	r6,r6,4
   41a08:	3180c00c 	andi	r6,r6,768
   41a0c:	37ccb03a 	or	r6,r6,ra
   41a10:	11870115 	stw	r6,7172(r2)
        cea->detailed_timing[i].v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   41a14:	47c00003 	ldbu	ra,0(r8)
   41a18:	59800003 	ldbu	r6,0(r11)
   41a1c:	f83e913a 	slli	ra,ra,4
   41a20:	318003cc 	andi	r6,r6,15
   41a24:	ffc00c0c 	andi	ra,ra,48
   41a28:	f98cb03a 	or	r6,ra,r6
   41a2c:	11870215 	stw	r6,7176(r2)
        cea->detailed_timing[i].h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   41a30:	61800003 	ldbu	r6,0(r12)
   41a34:	afc00003 	ldbu	ra,0(r21)
   41a38:	300c913a 	slli	r6,r6,4
   41a3c:	3183c00c 	andi	r6,r6,3840
   41a40:	37ccb03a 	or	r6,r6,ra
   41a44:	11870315 	stw	r6,7180(r2)
        cea->detailed_timing[i].v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   41a48:	61800003 	ldbu	r6,0(r12)
   41a4c:	1fc00343 	ldbu	ra,13(r3)
   41a50:	300c923a 	slli	r6,r6,8
   41a54:	3183c00c 	andi	r6,r6,3840
   41a58:	37ccb03a 	or	r6,r6,ra
   41a5c:	11870415 	stw	r6,7184(r2)
        cea->detailed_timing[i].border_lr = (int)c[15];
   41a60:	198003c3 	ldbu	r6,15(r3)
   41a64:	11870515 	stw	r6,7188(r2)
        cea->detailed_timing[i].border_tb = (int)c[16];
   41a68:	19800403 	ldbu	r6,16(r3)
   41a6c:	11870615 	stw	r6,7192(r2)

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;
   41a70:	39800007 	ldb	r6,0(r7)
   41a74:	300cd7fa 	srli	r6,r6,31
   41a78:	11870715 	stw	r6,7196(r2)

        cea->detailed_timing[i].stereo = STEREO_NONE;
   41a7c:	20000015 	stw	zero,0(r4)
		if ((c[17] & 0x61) == 0x20)
   41a80:	39800003 	ldbu	r6,0(r7)
   41a84:	3180184c 	andi	r6,r6,97
   41a88:	3580011e 	bne	r6,r22,41a90 <edid_decode_cea+0xa68>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   41a8c:	25c00015 	stw	r23,0(r4)
		if ((c[17] & 0x61) == 0x40)
   41a90:	39800003 	ldbu	r6,0(r7)
   41a94:	07c01004 	movi	ra,64
   41a98:	3180184c 	andi	r6,r6,97
   41a9c:	37c0031e 	bne	r6,ra,41aac <edid_decode_cea+0xa84>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   41aa0:	21800017 	ldw	r6,0(r4)
   41aa4:	31800114 	ori	r6,r6,4
   41aa8:	21800015 	stw	r6,0(r4)
		if ((c[17] & 0x61) == 0x21)
   41aac:	39800003 	ldbu	r6,0(r7)
   41ab0:	07c00844 	movi	ra,33
   41ab4:	3180184c 	andi	r6,r6,97
   41ab8:	37c0031e 	bne	r6,ra,41ac8 <edid_decode_cea+0xaa0>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   41abc:	21800017 	ldw	r6,0(r4)
   41ac0:	31800214 	ori	r6,r6,8
   41ac4:	21800015 	stw	r6,0(r4)
		if ((c[17] & 0x61) == 0x41)
   41ac8:	39800003 	ldbu	r6,0(r7)
   41acc:	07c01044 	movi	ra,65
   41ad0:	3180184c 	andi	r6,r6,97
   41ad4:	37c0031e 	bne	r6,ra,41ae4 <edid_decode_cea+0xabc>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   41ad8:	21800017 	ldw	r6,0(r4)
   41adc:	31800414 	ori	r6,r6,16
   41ae0:	21800015 	stw	r6,0(r4)
		if ((c[17] & 0x61) == 0x60)
   41ae4:	39800003 	ldbu	r6,0(r7)
   41ae8:	3180184c 	andi	r6,r6,97
   41aec:	3700031e 	bne	r6,fp,41afc <edid_decode_cea+0xad4>
			cea->detailed_timing[i].stereo |= STEREO_4WAY_INTERLEAVE;
   41af0:	21800017 	ldw	r6,0(r4)
   41af4:	31800814 	ori	r6,r6,32
   41af8:	21800015 	stw	r6,0(r4)
		if ((c[17] & 0x61) == 0x61)
   41afc:	39800003 	ldbu	r6,0(r7)
   41b00:	07c01844 	movi	ra,97
   41b04:	3180184c 	andi	r6,r6,97
   41b08:	37c0031e 	bne	r6,ra,41b18 <edid_decode_cea+0xaf0>
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   41b0c:	21800017 	ldw	r6,0(r4)
   41b10:	31801014 	ori	r6,r6,64
   41b14:	21800015 	stw	r6,0(r4)

		cea->detailed_timing[i].sync = 0;
   41b18:	28000015 	stw	zero,0(r5)
        if (c[17] & 0x10) {
   41b1c:	39800003 	ldbu	r6,0(r7)
   41b20:	37c0040c 	andi	ra,r6,16
   41b24:	f8002826 	beq	ra,zero,41bc8 <edid_decode_cea+0xba0>
            if (c[17] & 0x08) {
   41b28:	3180020c 	andi	r6,r6,8
   41b2c:	30001d1e 	bne	r6,zero,41ba4 <edid_decode_cea+0xb7c>
            	if (c[17] & 0x04)
                	cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_P;
            	else
            		cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_N;
            } else {
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
   41b30:	2d800015 	stw	r22,0(r5)
            	if (c[17] & 0x04)
   41b34:	39800003 	ldbu	r6,0(r7)
   41b38:	3180010c 	andi	r6,r6,4
   41b3c:	30000126 	beq	r6,zero,41b44 <edid_decode_cea+0xb1c>
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
   41b40:	2f000015 	stw	fp,0(r5)

	// detail timing descriptor
	if (dtd == 0)
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   41b44:	6b400044 	addi	r13,r13,1
   41b48:	29401004 	addi	r5,r5,64
   41b4c:	10801004 	addi	r2,r2,64
   41b50:	39c00484 	addi	r7,r7,18
   41b54:	18c00484 	addi	r3,r3,18
   41b58:	21001004 	addi	r4,r4,64
   41b5c:	a5000484 	addi	r20,r20,18
   41b60:	52800484 	addi	r10,r10,18
   41b64:	9cc00484 	addi	r19,r19,18
   41b68:	4a400484 	addi	r9,r9,18
   41b6c:	8c400484 	addi	r17,r17,18
   41b70:	84000484 	addi	r16,r16,18
   41b74:	7bc00484 	addi	r15,r15,18
   41b78:	42000484 	addi	r8,r8,18
   41b7c:	73800484 	addi	r14,r14,18
   41b80:	5ac00484 	addi	r11,r11,18
   41b84:	94800484 	addi	r18,r18,18
   41b88:	63000484 	addi	r12,r12,18
   41b8c:	ad400484 	addi	r21,r21,18
   41b90:	dfc00017 	ldw	ra,0(sp)
   41b94:	f9800017 	ldw	r6,0(ra)
   41b98:	69bf6b16 	blt	r13,r6,41948 <__alt_data_end+0xfffda848>
		}
	}

	// detail timing descriptor
	if (dtd == 0)
		return 0;
   41b9c:	0005883a 	mov	r2,zero
   41ba0:	00001f06 	br	41c20 <edid_decode_cea+0xbf8>
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

		cea->detailed_timing[i].sync = 0;
        if (c[17] & 0x10) {
            if (c[17] & 0x08) {
            	cea->detailed_timing[i].sync |= D_SEPERATE_SYNC;
   41ba4:	01802004 	movi	r6,128
   41ba8:	29800015 	stw	r6,0(r5)
            	if (c[17] & 0x04)
   41bac:	39800003 	ldbu	r6,0(r7)
   41bb0:	3180010c 	andi	r6,r6,4
   41bb4:	30000226 	beq	r6,zero,41bc0 <edid_decode_cea+0xb98>
                	cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_P;
   41bb8:	07c0a004 	movi	ra,640
   41bbc:	00001206 	br	41c08 <edid_decode_cea+0xbe0>
            	else
            		cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_N;
   41bc0:	01806004 	movi	r6,384
   41bc4:	00001306 	br	41c14 <edid_decode_cea+0xbec>
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
            	if (c[17] & 0x04)
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
            }
        } else {
        	if (c[17] & 0x80) {
   41bc8:	31803fcc 	andi	r6,r6,255
   41bcc:	3180201c 	xori	r6,r6,128
   41bd0:	31bfe004 	addi	r6,r6,-128
   41bd4:	30000e0e 	bge	r6,zero,41c10 <edid_decode_cea+0xbe8>
        		cea->detailed_timing[i].sync |= A_BIPOLAR_COMPOSITE_SYNC;
   41bd8:	2dc00015 	stw	r23,0(r5)
        		if (c[17] & 0x40) {
   41bdc:	39800003 	ldbu	r6,0(r7)
   41be0:	3180100c 	andi	r6,r6,64
   41be4:	303fd726 	beq	r6,zero,41b44 <__alt_data_end+0xfffdaa44>
            		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION;
   41be8:	07c00184 	movi	ra,6
   41bec:	2fc00015 	stw	ra,0(r5)
            		if (c[17] & 0x20)
   41bf0:	39800003 	ldbu	r6,0(r7)
   41bf4:	3180080c 	andi	r6,r6,32
   41bf8:	30000226 	beq	r6,zero,41c04 <edid_decode_cea+0xbdc>
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   41bfc:	01800584 	movi	r6,22
   41c00:	00000406 	br	41c14 <edid_decode_cea+0xbec>
            		else
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_G;
   41c04:	07c00384 	movi	ra,14
   41c08:	2fc00015 	stw	ra,0(r5)
   41c0c:	003fcd06 	br	41b44 <__alt_data_end+0xfffdaa44>
        		}
        	} else {
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
   41c10:	01800044 	movi	r6,1
   41c14:	29800015 	stw	r6,0(r5)
   41c18:	003fca06 	br	41b44 <__alt_data_end+0xfffdaa44>

	c = &ext_bin[1];

	// version
	if (*c != 0x03)
		return -1;	// todo: support v1 / v2
   41c1c:	00bfffc4 	movi	r2,-1
        	}
        }
	}

	return 0;
}
   41c20:	dfc01a17 	ldw	ra,104(sp)
   41c24:	df001917 	ldw	fp,100(sp)
   41c28:	ddc01817 	ldw	r23,96(sp)
   41c2c:	dd801717 	ldw	r22,92(sp)
   41c30:	dd401617 	ldw	r21,88(sp)
   41c34:	dd001517 	ldw	r20,84(sp)
   41c38:	dcc01417 	ldw	r19,80(sp)
   41c3c:	dc801317 	ldw	r18,76(sp)
   41c40:	dc401217 	ldw	r17,72(sp)
   41c44:	dc001117 	ldw	r16,68(sp)
   41c48:	dec01b04 	addi	sp,sp,108
   41c4c:	f800283a 	ret

00041c50 <edid_print_cea>:

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   41c50:	deffee04 	addi	sp,sp,-72
   41c54:	dc400915 	stw	r17,36(sp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   41c58:	2c416f24 	muli	r17,r5,1468

	return 0;
}

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   41c5c:	dfc01115 	stw	ra,68(sp)
   41c60:	dc800a15 	stw	r18,40(sp)
   41c64:	dc000815 	stw	r16,32(sp)
   41c68:	df001015 	stw	fp,64(sp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   41c6c:	2461883a 	add	r16,r4,r17

	return 0;
}

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   41c70:	ddc00f15 	stw	r23,60(sp)
   41c74:	dd800e15 	stw	r22,56(sp)
   41c78:	dd400d15 	stw	r21,52(sp)
   41c7c:	dd000c15 	stw	r20,48(sp)
   41c80:	dcc00b15 	stw	r19,44(sp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   41c84:	81860c17 	ldw	r6,6192(r16)

	return 0;
}

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   41c88:	2025883a 	mov	r18,r4
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
	struct edid_cea *cea = &ext_data->cea_ext;

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   41c8c:	01000174 	movhi	r4,5
   41c90:	211e6904 	addi	r4,r4,31140
   41c94:	0048fb80 	call	48fb8 <printf>

	printf("  number of DBCs (data block collections)      : %d\n", cea->nr_dbcs);
   41c98:	81461317 	ldw	r5,6220(r16)
   41c9c:	01000174 	movhi	r4,5
   41ca0:	211e7904 	addi	r4,r4,31204
   41ca4:	0048fb80 	call	48fb8 <printf>
	printf("  number of DTDs (detailed timing descriptors) : %d\n", cea->nr_dtd);
   41ca8:	81461217 	ldw	r5,6216(r16)
   41cac:	01000174 	movhi	r4,5
   41cb0:	211e8704 	addi	r4,r4,31260
   41cb4:	0048fb80 	call	48fb8 <printf>
	printf("  offset to DTD                                : %d\n", cea->off_dtd);
   41cb8:	81461117 	ldw	r5,6212(r16)
   41cbc:	01000174 	movhi	r4,5
   41cc0:	211e9504 	addi	r4,r4,31316
   41cc4:	0048fb80 	call	48fb8 <printf>
	printf("  monitor underscans IT formats                : %s\n", cea->flags.underscan ? "yes" : "no");
   41cc8:	80860d17 	ldw	r2,6196(r16)
   41ccc:	1000031e 	bne	r2,zero,41cdc <edid_print_cea+0x8c>
   41cd0:	01400174 	movhi	r5,5
   41cd4:	295e6504 	addi	r5,r5,31124
   41cd8:	00000206 	br	41ce4 <edid_print_cea+0x94>
   41cdc:	01400174 	movhi	r5,5
   41ce0:	295e6404 	addi	r5,r5,31120
   41ce4:	01000174 	movhi	r4,5
   41ce8:	211ea304 	addi	r4,r4,31372
   41cec:	0048fb80 	call	48fb8 <printf>
	printf("  supports audio                               : %s\n", cea->flags.audio ? "yes" : "no");
   41cf0:	9445883a 	add	r2,r18,r17
   41cf4:	10860e17 	ldw	r2,6200(r2)
   41cf8:	1000031e 	bne	r2,zero,41d08 <edid_print_cea+0xb8>
   41cfc:	01400174 	movhi	r5,5
   41d00:	295e6504 	addi	r5,r5,31124
   41d04:	00000206 	br	41d10 <edid_print_cea+0xc0>
   41d08:	01400174 	movhi	r5,5
   41d0c:	295e6404 	addi	r5,r5,31120
   41d10:	01000174 	movhi	r4,5
   41d14:	211eb104 	addi	r4,r4,31428
   41d18:	0048fb80 	call	48fb8 <printf>
	printf("  supports YCbCr 4:4:4 in addition to RGB      : %s\n", cea->flags.ycbcr444 ? "yes" : "no");
   41d1c:	9445883a 	add	r2,r18,r17
   41d20:	10860f17 	ldw	r2,6204(r2)
   41d24:	1000031e 	bne	r2,zero,41d34 <edid_print_cea+0xe4>
   41d28:	01400174 	movhi	r5,5
   41d2c:	295e6504 	addi	r5,r5,31124
   41d30:	00000206 	br	41d3c <edid_print_cea+0xec>
   41d34:	01400174 	movhi	r5,5
   41d38:	295e6404 	addi	r5,r5,31120
   41d3c:	01000174 	movhi	r4,5
   41d40:	211ebf04 	addi	r4,r4,31484
   41d44:	0048fb80 	call	48fb8 <printf>
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");
   41d48:	9445883a 	add	r2,r18,r17
   41d4c:	10861017 	ldw	r2,6208(r2)
   41d50:	1000031e 	bne	r2,zero,41d60 <edid_print_cea+0x110>
   41d54:	01400174 	movhi	r5,5
   41d58:	295e6504 	addi	r5,r5,31124
   41d5c:	00000206 	br	41d68 <edid_print_cea+0x118>
   41d60:	01400174 	movhi	r5,5
   41d64:	295e6404 	addi	r5,r5,31120
   41d68:	01000174 	movhi	r4,5
   41d6c:	211ecd04 	addi	r4,r4,31540
   41d70:	0048fb80 	call	48fb8 <printf>

	printf("\n  data block collections\n  ---------------------------------\n");
   41d74:	01000174 	movhi	r4,5
   41d78:	211edb04 	addi	r4,r4,31596
   41d7c:	00490cc0 	call	490cc <puts>
   41d80:	88867504 	addi	r2,r17,6612
   41d84:	9085883a 	add	r2,r18,r2
   41d88:	d8800415 	stw	r2,16(sp)
   41d8c:	88863404 	addi	r2,r17,6352
   41d90:	9085883a 	add	r2,r18,r2
   41d94:	d8800515 	stw	r2,20(sp)
   41d98:	8886c504 	addi	r2,r17,6932
   41d9c:	9085883a 	add	r2,r18,r2
   41da0:	9461883a 	add	r16,r18,r17
   41da4:	d8800615 	stw	r2,24(sp)
   41da8:	00b9dc84 	movi	r2,-6286
   41dac:	8cc62384 	addi	r19,r17,6286
   41db0:	1405c83a 	sub	r2,r2,r16
   41db4:	94e7883a 	add	r19,r18,r19
   41db8:	d8800715 	stw	r2,28(sp)

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
   41dbc:	85c61304 	addi	r23,r16,6220
   41dc0:	d8c00717 	ldw	r3,28(sp)
   41dc4:	b8800017 	ldw	r2,0(r23)
   41dc8:	1ccb883a 	add	r5,r3,r19
   41dcc:	2882a70e 	bge	r5,r2,4286c <edid_print_cea+0xc1c>

		switch (cea->dbc_tags[t]) {
   41dd0:	99bff083 	ldbu	r6,-62(r19)
   41dd4:	00c00184 	movi	r3,6
   41dd8:	30bfffc4 	addi	r2,r6,-1
   41ddc:	10803fcc 	andi	r2,r2,255
   41de0:	18829c36 	bltu	r3,r2,42854 <edid_print_cea+0xc04>
   41de4:	100490ba 	slli	r2,r2,2
   41de8:	00c00134 	movhi	r3,4
   41dec:	18c77f04 	addi	r3,r3,7676
   41df0:	10c5883a 	add	r2,r2,r3
   41df4:	10800017 	ldw	r2,0(r2)
   41df8:	1000683a 	jmp	r2
   41dfc:	00041e18 	cmpnei	zero,zero,4216
   41e00:	00041f34 	movhi	zero,4220
   41e04:	00041ff4 	movhi	zero,4223
   41e08:	000424e0 	cmpeqi	zero,zero,4243
   41e0c:	00042620 	cmpeqi	zero,zero,4248
   41e10:	00042854 	movui	zero,4257
   41e14:	0004262c 	andhi	zero,zero,4248
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
   41e18:	01000174 	movhi	r4,5
   41e1c:	211eeb04 	addi	r4,r4,31660
   41e20:	0048fb80 	call	48fb8 <printf>
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);
   41e24:	85067404 	addi	r20,r16,6608
   41e28:	a1400017 	ldw	r5,0(r20)
   41e2c:	01000174 	movhi	r4,5
   41e30:	211ef304 	addi	r4,r4,31692
   41e34:	0048fb80 	call	48fb8 <printf>

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41e38:	df000417 	ldw	fp,16(sp)
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
   41e3c:	058001b4 	movhi	r22,6
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41e40:	002b883a 	mov	r21,zero
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
   41e44:	b5a8dd04 	addi	r22,r22,-23692
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41e48:	a0800017 	ldw	r2,0(r20)
   41e4c:	a882850e 	bge	r21,r2,42864 <edid_print_cea+0xc14>
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
   41e50:	e0800017 	ldw	r2,0(fp)
   41e54:	01000174 	movhi	r4,5
   41e58:	211f0104 	addi	r4,r4,31748
   41e5c:	1085883a 	add	r2,r2,r2
   41e60:	1085883a 	add	r2,r2,r2
   41e64:	b085883a 	add	r2,r22,r2
   41e68:	11800017 	ldw	r6,0(r2)
   41e6c:	a80b883a 	mov	r5,r21
   41e70:	0048fb80 	call	48fb8 <printf>
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
   41e74:	e1400117 	ldw	r5,4(fp)
   41e78:	01000174 	movhi	r4,5
   41e7c:	211f0904 	addi	r4,r4,31780
   41e80:	0048fb80 	call	48fb8 <printf>
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
   41e84:	e0800217 	ldw	r2,8(fp)
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   41e88:	01000174 	movhi	r4,5
   41e8c:	211f1104 	addi	r4,r4,31812
   41e90:	1006d0fa 	srli	r3,r2,3
   41e94:	100ad1ba 	srli	r5,r2,6
   41e98:	100cd17a 	srli	r6,r2,5
   41e9c:	18c0004c 	andi	r3,r3,1
   41ea0:	d8c00015 	stw	r3,0(sp)
   41ea4:	1006d0ba 	srli	r3,r2,2
   41ea8:	100ed13a 	srli	r7,r2,4
   41eac:	2940004c 	andi	r5,r5,1
   41eb0:	18c0004c 	andi	r3,r3,1
   41eb4:	d8c00115 	stw	r3,4(sp)
   41eb8:	1006d07a 	srli	r3,r2,1
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);
   41ebc:	1080004c 	andi	r2,r2,1
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   41ec0:	d8800315 	stw	r2,12(sp)
   41ec4:	18c0004c 	andi	r3,r3,1
   41ec8:	d8c00215 	stw	r3,8(sp)
   41ecc:	3180004c 	andi	r6,r6,1
   41ed0:	39c0004c 	andi	r7,r7,1
   41ed4:	0048fb80 	call	48fb8 <printf>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
   41ed8:	e0800017 	ldw	r2,0(fp)
   41edc:	00c00044 	movi	r3,1
   41ee0:	10c00826 	beq	r2,r3,41f04 <edid_print_cea+0x2b4>
   41ee4:	0080100e 	bge	zero,r2,41f28 <edid_print_cea+0x2d8>
   41ee8:	00c00204 	movi	r3,8
   41eec:	18800e16 	blt	r3,r2,41f28 <edid_print_cea+0x2d8>
				case CEA_SAD_FMT_MP3:
				case CEA_SAD_FMT_MPEG2:
				case CEA_SAD_FMT_AAC:
				case CEA_SAD_FMT_DTS:
				case CEA_SAD_FMT_ATRAC:
					printf("           bitrate max : %d (kHz)\n", cea->db_audio.sad[i].bitrate);
   41ef0:	e1400417 	ldw	r5,16(fp)
   41ef4:	01000174 	movhi	r4,5
   41ef8:	211f3404 	addi	r4,r4,31952
   41efc:	0048fb80 	call	48fb8 <printf>
					break;
   41f00:	00000906 	br	41f28 <edid_print_cea+0x2d8>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
   41f04:	e1c00317 	ldw	r7,12(fp)
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
   41f08:	01000174 	movhi	r4,5
   41f0c:	211f2604 	addi	r4,r4,31896
   41f10:	380ad0ba 	srli	r5,r7,2
   41f14:	380cd07a 	srli	r6,r7,1
   41f18:	39c0004c 	andi	r7,r7,1
   41f1c:	2940004c 	andi	r5,r5,1
   41f20:	3180004c 	andi	r6,r6,1
   41f24:	0048fb80 	call	48fb8 <printf>
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   41f28:	ad400044 	addi	r21,r21,1
   41f2c:	e7000504 	addi	fp,fp,20
   41f30:	003fc506 	br	41e48 <__alt_data_end+0xfffdad48>
				"720x480p       @239.76/240 Hz (16:9)",
				"720(1440)x480i @239.76/240 Hz (4:3)",
				"720(1440)x480i @239.76/240 Hz (16:9)",
			};

			printf("\n  [%02d] video data block ...\n", t);
   41f34:	01000174 	movhi	r4,5
   41f38:	211f3d04 	addi	r4,r4,31988
   41f3c:	0048fb80 	call	48fb8 <printf>
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);
   41f40:	85063304 	addi	r20,r16,6348
   41f44:	a1400017 	ldw	r5,0(r20)
   41f48:	01000174 	movhi	r4,5
   41f4c:	211f4504 	addi	r4,r4,32020
   41f50:	0048fb80 	call	48fb8 <printf>

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   41f54:	df000517 	ldw	fp,20(sp)
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
   41f58:	054001b4 	movhi	r21,6
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   41f5c:	002d883a 	mov	r22,zero
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
   41f60:	ad68a104 	addi	r21,r21,-23932
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   41f64:	a0800017 	ldw	r2,0(r20)
   41f68:	b0823e0e 	bge	r22,r2,42864 <edid_print_cea+0xc14>
				if (cea->db_video.svd[i].vic < 60)
   41f6c:	e1800117 	ldw	r6,4(fp)
   41f70:	00800ec4 	movi	r2,59
   41f74:	11801116 	blt	r2,r6,41fbc <edid_print_cea+0x36c>
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
   41f78:	3185883a 	add	r2,r6,r6
   41f7c:	1085883a 	add	r2,r2,r2
   41f80:	a885883a 	add	r2,r21,r2
   41f84:	11c00017 	ldw	r7,0(r2)
   41f88:	e0800017 	ldw	r2,0(fp)
   41f8c:	1000031e 	bne	r2,zero,41f9c <edid_print_cea+0x34c>
   41f90:	008001b4 	movhi	r2,6
   41f94:	10a8f904 	addi	r2,r2,-23580
   41f98:	00000206 	br	41fa4 <edid_print_cea+0x354>
   41f9c:	00800174 	movhi	r2,5
   41fa0:	109e6604 	addi	r2,r2,31128
   41fa4:	01000174 	movhi	r4,5
   41fa8:	d8800015 	stw	r2,0(sp)
   41fac:	211f5304 	addi	r4,r4,32076
   41fb0:	b00b883a 	mov	r5,r22
   41fb4:	0048fb80 	call	48fb8 <printf>
   41fb8:	00000b06 	br	41fe8 <edid_print_cea+0x398>
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
   41fbc:	e0800017 	ldw	r2,0(fp)
   41fc0:	1000031e 	bne	r2,zero,41fd0 <edid_print_cea+0x380>
   41fc4:	01c001b4 	movhi	r7,6
   41fc8:	39e8f904 	addi	r7,r7,-23580
   41fcc:	00000206 	br	41fd8 <edid_print_cea+0x388>
   41fd0:	01c00174 	movhi	r7,5
   41fd4:	39de6604 	addi	r7,r7,31128
   41fd8:	01000174 	movhi	r4,5
   41fdc:	211f5b04 	addi	r4,r4,32108
   41fe0:	b00b883a 	mov	r5,r22
   41fe4:	0048fb80 	call	48fb8 <printf>
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   41fe8:	b5800044 	addi	r22,r22,1
   41fec:	e7000204 	addi	fp,fp,8
   41ff0:	003fdc06 	br	41f64 <__alt_data_end+0xfffdae64>
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
			}
			break;
		}
		case CEA_DB_VENDOR:
			if (cea->db_vsdb_hdmi.ieee_reg_id != 0x000c03) {
   41ff4:	80c6a917 	ldw	r3,6820(r16)
   41ff8:	008300c4 	movi	r2,3075
   41ffc:	18800326 	beq	r3,r2,4200c <edid_print_cea+0x3bc>
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
   42000:	01000174 	movhi	r4,5
   42004:	211f6404 	addi	r4,r4,32144
   42008:	0001f606 	br	427e4 <edid_print_cea+0xb94>
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
   4200c:	01000174 	movhi	r4,5
   42010:	211f7004 	addi	r4,r4,32192
   42014:	0048fb80 	call	48fb8 <printf>
			printf("       source physical address         : %d.%d.%d.%d\n",
   42018:	8086ad17 	ldw	r2,6836(r16)
   4201c:	01000174 	movhi	r4,5
   42020:	211f7d04 	addi	r4,r4,32244
   42024:	d8800015 	stw	r2,0(sp)
   42028:	8146aa17 	ldw	r5,6824(r16)
   4202c:	8186ab17 	ldw	r6,6828(r16)
   42030:	81c6ac17 	ldw	r7,6832(r16)
   42034:	0048fb80 	call	48fb8 <printf>
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);

			if (cea->db_vsdb_hdmi.ext_len >= 6) {
   42038:	8086a817 	ldw	r2,6816(r16)
   4203c:	00c00144 	movi	r3,5
   42040:	18803c0e 	bge	r3,r2,42134 <edid_print_cea+0x4e4>
				printf("       support ACP ISRC1 ISRC2 packets : %s\n", cea->db_vsdb_hdmi.ai ? "yes" : "no");
   42044:	8086ae17 	ldw	r2,6840(r16)
   42048:	1000031e 	bne	r2,zero,42058 <edid_print_cea+0x408>
   4204c:	01400174 	movhi	r5,5
   42050:	295e6504 	addi	r5,r5,31124
   42054:	00000206 	br	42060 <edid_print_cea+0x410>
   42058:	01400174 	movhi	r5,5
   4205c:	295e6404 	addi	r5,r5,31120
   42060:	01000174 	movhi	r4,5
   42064:	211f8b04 	addi	r4,r4,32300
   42068:	0048fb80 	call	48fb8 <printf>
				printf("       support 48 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp48 ? "yes" : "no");
   4206c:	8086b117 	ldw	r2,6852(r16)
   42070:	1000031e 	bne	r2,zero,42080 <edid_print_cea+0x430>
   42074:	01400174 	movhi	r5,5
   42078:	295e6504 	addi	r5,r5,31124
   4207c:	00000206 	br	42088 <edid_print_cea+0x438>
   42080:	01400174 	movhi	r5,5
   42084:	295e6404 	addi	r5,r5,31120
   42088:	01000174 	movhi	r4,5
   4208c:	211f9704 	addi	r4,r4,32348
   42090:	0048fb80 	call	48fb8 <printf>
				printf("       support 36 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp36 ? "yes" : "no");
   42094:	8086b017 	ldw	r2,6848(r16)
   42098:	1000031e 	bne	r2,zero,420a8 <edid_print_cea+0x458>
   4209c:	01400174 	movhi	r5,5
   420a0:	295e6504 	addi	r5,r5,31124
   420a4:	00000206 	br	420b0 <edid_print_cea+0x460>
   420a8:	01400174 	movhi	r5,5
   420ac:	295e6404 	addi	r5,r5,31120
   420b0:	01000174 	movhi	r4,5
   420b4:	211fa304 	addi	r4,r4,32396
   420b8:	0048fb80 	call	48fb8 <printf>
				printf("       support 30 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp30 ? "yes" : "no");
   420bc:	8086af17 	ldw	r2,6844(r16)
   420c0:	1000031e 	bne	r2,zero,420d0 <edid_print_cea+0x480>
   420c4:	01400174 	movhi	r5,5
   420c8:	295e6504 	addi	r5,r5,31124
   420cc:	00000206 	br	420d8 <edid_print_cea+0x488>
   420d0:	01400174 	movhi	r5,5
   420d4:	295e6404 	addi	r5,r5,31120
   420d8:	01000174 	movhi	r4,5
   420dc:	211faf04 	addi	r4,r4,32444
   420e0:	0048fb80 	call	48fb8 <printf>
				printf("       support YCbCr 4:4:4 deep color  : %s\n", cea->db_vsdb_hdmi.ycbcr444 ? "yes" : "no");
   420e4:	8086b217 	ldw	r2,6856(r16)
   420e8:	1000031e 	bne	r2,zero,420f8 <edid_print_cea+0x4a8>
   420ec:	01400174 	movhi	r5,5
   420f0:	295e6504 	addi	r5,r5,31124
   420f4:	00000206 	br	42100 <edid_print_cea+0x4b0>
   420f8:	01400174 	movhi	r5,5
   420fc:	295e6404 	addi	r5,r5,31120
   42100:	01000174 	movhi	r4,5
   42104:	211fbb04 	addi	r4,r4,32492
   42108:	0048fb80 	call	48fb8 <printf>
				printf("       support DVI dual-link           : %s\n", cea->db_vsdb_hdmi.dvi_dual ? "yes" : "no");
   4210c:	8086b317 	ldw	r2,6860(r16)
   42110:	1000031e 	bne	r2,zero,42120 <edid_print_cea+0x4d0>
   42114:	01400174 	movhi	r5,5
   42118:	295e6504 	addi	r5,r5,31124
   4211c:	00000206 	br	42128 <edid_print_cea+0x4d8>
   42120:	01400174 	movhi	r5,5
   42124:	295e6404 	addi	r5,r5,31120
   42128:	01000174 	movhi	r4,5
   4212c:	211fc704 	addi	r4,r4,32540
   42130:	0048fb80 	call	48fb8 <printf>
			}

			if (cea->db_vsdb_hdmi.ext_len >= 7) {
   42134:	8086a817 	ldw	r2,6816(r16)
   42138:	00c00184 	movi	r3,6
   4213c:	1880040e 	bge	r3,r2,42150 <edid_print_cea+0x500>
				printf("       max TMDS clock                  : %d (MHz)\n", cea->db_vsdb_hdmi.max_tmds_clk);
   42140:	8146b717 	ldw	r5,6876(r16)
   42144:	01000174 	movhi	r4,5
   42148:	211fd304 	addi	r4,r4,32588
   4214c:	0048fb80 	call	48fb8 <printf>
			}

			if (cea->db_vsdb_hdmi.p_latency != 0) {
   42150:	8086b417 	ldw	r2,6864(r16)
   42154:	10000826 	beq	r2,zero,42178 <edid_print_cea+0x528>
				printf("       video latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_p);
   42158:	8146b817 	ldw	r5,6880(r16)
   4215c:	01000174 	movhi	r4,5
   42160:	211fe004 	addi	r4,r4,32640
   42164:	0048fb80 	call	48fb8 <printf>
				printf("       audio latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_p);
   42168:	8146b917 	ldw	r5,6884(r16)
   4216c:	01000174 	movhi	r4,5
   42170:	211fed04 	addi	r4,r4,32692
   42174:	0048fb80 	call	48fb8 <printf>
			}

			if (cea->db_vsdb_hdmi.i_latency != 0) {
   42178:	8086b517 	ldw	r2,6868(r16)
   4217c:	10000826 	beq	r2,zero,421a0 <edid_print_cea+0x550>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
   42180:	8146ba17 	ldw	r5,6888(r16)
   42184:	01000174 	movhi	r4,5
   42188:	211ffa04 	addi	r4,r4,32744
   4218c:	0048fb80 	call	48fb8 <printf>
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
   42190:	8146bb17 	ldw	r5,6892(r16)
   42194:	010001b4 	movhi	r4,6
   42198:	21200704 	addi	r4,r4,-32740
   4219c:	0048fb80 	call	48fb8 <printf>
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
   421a0:	8086b617 	ldw	r2,6872(r16)
   421a4:	1000031e 	bne	r2,zero,421b4 <edid_print_cea+0x564>
   421a8:	01400174 	movhi	r5,5
   421ac:	295e6504 	addi	r5,r5,31124
   421b0:	00000206 	br	421bc <edid_print_cea+0x56c>
   421b4:	01400174 	movhi	r5,5
   421b8:	295e6404 	addi	r5,r5,31120
   421bc:	010001b4 	movhi	r4,6
   421c0:	21201404 	addi	r4,r4,-32688
   421c4:	0048fb80 	call	48fb8 <printf>
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
   421c8:	8086bc17 	ldw	r2,6896(r16)
   421cc:	1000031e 	bne	r2,zero,421dc <edid_print_cea+0x58c>
   421d0:	01400174 	movhi	r5,5
   421d4:	295e6504 	addi	r5,r5,31124
   421d8:	00000206 	br	421e4 <edid_print_cea+0x594>
   421dc:	01400174 	movhi	r5,5
   421e0:	295e6404 	addi	r5,r5,31120
   421e4:	010001b4 	movhi	r4,6
   421e8:	21202004 	addi	r4,r4,-32640
   421ec:	0048fb80 	call	48fb8 <printf>

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
   421f0:	8086b617 	ldw	r2,6872(r16)
   421f4:	10019b26 	beq	r2,zero,42864 <edid_print_cea+0xc14>
				switch (cea->db_vsdb_hdmi.multi_3d) {
   421f8:	8086bd17 	ldw	r2,6900(r16)
   421fc:	00c00044 	movi	r3,1
   42200:	10c00c26 	beq	r2,r3,42234 <edid_print_cea+0x5e4>
   42204:	18800416 	blt	r3,r2,42218 <edid_print_cea+0x5c8>
   42208:	1000101e 	bne	r2,zero,4224c <edid_print_cea+0x5fc>
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   4220c:	010001b4 	movhi	r4,6
   42210:	21202c04 	addi	r4,r4,-32592
   42214:	00000c06 	br	42248 <edid_print_cea+0x5f8>

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
				switch (cea->db_vsdb_hdmi.multi_3d) {
   42218:	00c00084 	movi	r3,2
   4221c:	10c00826 	beq	r2,r3,42240 <edid_print_cea+0x5f0>
   42220:	00c000c4 	movi	r3,3
   42224:	10c0091e 	bne	r2,r3,4224c <edid_print_cea+0x5fc>
					break;
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
					break;
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   42228:	010001b4 	movhi	r4,6
   4222c:	21207304 	addi	r4,r4,-32308
   42230:	00000506 	br	42248 <edid_print_cea+0x5f8>
				switch (cea->db_vsdb_hdmi.multi_3d) {
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
					break;
				case 1:
					printf("         3D-Multi_present              : 2b01 (with 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   42234:	010001b4 	movhi	r4,6
   42238:	21204304 	addi	r4,r4,-32500
   4223c:	00000206 	br	42248 <edid_print_cea+0x5f8>
					break;
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
   42240:	010001b4 	movhi	r4,6
   42244:	21205b04 	addi	r4,r4,-32404
					break;
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   42248:	00490cc0 	call	490cc <puts>
					break;
				}

				if ((cea->db_vsdb_hdmi.multi_3d == 1) || (cea->db_vsdb_hdmi.multi_3d == 2)) {
   4224c:	8086bd17 	ldw	r2,6900(r16)
   42250:	00c00044 	movi	r3,1
   42254:	10bfffc4 	addi	r2,r2,-1
   42258:	18801e36 	bltu	r3,r2,422d4 <edid_print_cea+0x684>
					if (cea->db_vsdb_hdmi.struct_all_3d == 0) {
   4225c:	8506c104 	addi	r20,r16,6916
   42260:	a0800017 	ldw	r2,0(r20)
   42264:	1000041e 	bne	r2,zero,42278 <edid_print_cea+0x628>
						printf("         3D_Structure_ALL              : none\n");
   42268:	010001b4 	movhi	r4,6
   4226c:	21208a04 	addi	r4,r4,-32216
   42270:	00490cc0 	call	490cc <puts>
   42274:	00001706 	br	422d4 <edid_print_cea+0x684>
					} else {
						printf("         3D_Structure_ALL              : ");
   42278:	010001b4 	movhi	r4,6
   4227c:	21209604 	addi	r4,r4,-32168
   42280:	0048fb80 	call	48fb8 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x01)
   42284:	a0800017 	ldw	r2,0(r20)
   42288:	1080004c 	andi	r2,r2,1
   4228c:	10000326 	beq	r2,zero,4229c <edid_print_cea+0x64c>
							printf("frame_packing ");
   42290:	010001b4 	movhi	r4,6
   42294:	2120a104 	addi	r4,r4,-32124
   42298:	0048fb80 	call	48fb8 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x40)
   4229c:	8086c117 	ldw	r2,6916(r16)
   422a0:	1080100c 	andi	r2,r2,64
   422a4:	10000326 	beq	r2,zero,422b4 <edid_print_cea+0x664>
							printf("top-and-bottom ");
   422a8:	010001b4 	movhi	r4,6
   422ac:	2120a504 	addi	r4,r4,-32108
   422b0:	0048fb80 	call	48fb8 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x100)
   422b4:	8086c117 	ldw	r2,6916(r16)
   422b8:	1080400c 	andi	r2,r2,256
   422bc:	10000326 	beq	r2,zero,422cc <edid_print_cea+0x67c>
							printf("side-by-side(half h_subsampling)");
   422c0:	010001b4 	movhi	r4,6
   422c4:	2120a904 	addi	r4,r4,-32092
   422c8:	0048fb80 	call	48fb8 <printf>
						printf("\n");
   422cc:	01000284 	movi	r4,10
   422d0:	0048ffc0 	call	48ffc <putchar>
					}
				}

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   422d4:	80c6bd17 	ldw	r3,6900(r16)
   422d8:	00800084 	movi	r2,2
   422dc:	1880041e 	bne	r3,r2,422f0 <edid_print_cea+0x6a0>
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
   422e0:	8146c217 	ldw	r5,6920(r16)
   422e4:	010001b4 	movhi	r4,6
   422e8:	2120b204 	addi	r4,r4,-32056
   422ec:	0048fb80 	call	48fb8 <printf>
				}

				switch (cea->db_vsdb_hdmi.image_size) {
   422f0:	8086be17 	ldw	r2,6904(r16)
   422f4:	00c00044 	movi	r3,1
   422f8:	10c00c26 	beq	r2,r3,4232c <edid_print_cea+0x6dc>
   422fc:	18800416 	blt	r3,r2,42310 <edid_print_cea+0x6c0>
   42300:	1000101e 	bne	r2,zero,42344 <edid_print_cea+0x6f4>
				case 0:
					printf("         image size extra properties   : none\n");
   42304:	010001b4 	movhi	r4,6
   42308:	2120bf04 	addi	r4,r4,-32004
   4230c:	00000c06 	br	42340 <edid_print_cea+0x6f0>

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
				}

				switch (cea->db_vsdb_hdmi.image_size) {
   42310:	00c00084 	movi	r3,2
   42314:	10c00826 	beq	r2,r3,42338 <edid_print_cea+0x6e8>
   42318:	00c000c4 	movi	r3,3
   4231c:	10c0091e 	bne	r2,r3,42344 <edid_print_cea+0x6f4>
					break;
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
					break;
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
   42320:	010001b4 	movhi	r4,6
   42324:	2120ef04 	addi	r4,r4,-31812
   42328:	00000506 	br	42340 <edid_print_cea+0x6f0>
				switch (cea->db_vsdb_hdmi.image_size) {
				case 0:
					printf("         image size extra properties   : none\n");
					break;
				case 1:
					printf("         image size extra properties   : exact aspect ratio only\n");
   4232c:	010001b4 	movhi	r4,6
   42330:	2120cb04 	addi	r4,r4,-31956
   42334:	00000206 	br	42340 <edid_print_cea+0x6f0>
					break;
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
   42338:	010001b4 	movhi	r4,6
   4233c:	2120dc04 	addi	r4,r4,-31888
					break;
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
   42340:	00490cc0 	call	490cc <puts>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
   42344:	dd000617 	ldw	r20,24(sp)
   42348:	002b883a 	mov	r21,zero
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   4234c:	8706c304 	addi	fp,r16,6924
   42350:	e0800017 	ldw	r2,0(fp)
   42354:	a881430e 	bge	r21,r2,42864 <edid_print_cea+0xc14>

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);
   42358:	a1bfff17 	ldw	r6,-4(r20)
   4235c:	010001b4 	movhi	r4,6
   42360:	21210404 	addi	r4,r4,-31728
   42364:	a80b883a 	mov	r5,r21
   42368:	0048fb80 	call	48fb8 <printf>

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
   4236c:	a0800017 	ldw	r2,0(r20)
   42370:	05800204 	movi	r22,8
   42374:	b0802736 	bltu	r22,r2,42414 <edid_print_cea+0x7c4>
   42378:	100490ba 	slli	r2,r2,2
   4237c:	00c00134 	movhi	r3,4
   42380:	18c8e404 	addi	r3,r3,9104
   42384:	10c5883a 	add	r2,r2,r3
   42388:	10800017 	ldw	r2,0(r2)
   4238c:	1000683a 	jmp	r2
   42390:	000423b4 	movhi	zero,4238
   42394:	000423c0 	call	423c <__reset-0x3bdc4>
   42398:	000423cc 	andi	zero,zero,4239
   4239c:	000423d8 	cmpnei	zero,zero,4239
   423a0:	000423e4 	muli	zero,zero,4239
   423a4:	000423f0 	cmpltui	zero,zero,4239
   423a8:	000423fc 	xorhi	zero,zero,4239
   423ac:	00042414 	movui	zero,4240
   423b0:	00042408 	cmpgei	zero,zero,4240
					case 0:
						printf("3D_Structure)frame_packing ");
   423b4:	010001b4 	movhi	r4,6
   423b8:	21210d04 	addi	r4,r4,-31692
   423bc:	00001706 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 1:
						printf("3D_Structure)field_alternative ");
   423c0:	010001b4 	movhi	r4,6
   423c4:	21211404 	addi	r4,r4,-31664
   423c8:	00001406 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 2:
						printf("3D_Structure)line_alternative ");
   423cc:	010001b4 	movhi	r4,6
   423d0:	21211c04 	addi	r4,r4,-31632
   423d4:	00001106 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 3:
						printf("3D_Structure)side-by-side(full) ");
   423d8:	010001b4 	movhi	r4,6
   423dc:	21212404 	addi	r4,r4,-31600
   423e0:	00000e06 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 4:
						printf("3D_Structure)L+depth ");
   423e4:	010001b4 	movhi	r4,6
   423e8:	21212d04 	addi	r4,r4,-31564
   423ec:	00000b06 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 5:
						printf("3D_Structure)L+depth+graphics+graphics_depth ");
   423f0:	010001b4 	movhi	r4,6
   423f4:	21213304 	addi	r4,r4,-31540
   423f8:	00000806 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 6:
						printf("3D_Structure)top-and-bottom ");
   423fc:	010001b4 	movhi	r4,6
   42400:	21213f04 	addi	r4,r4,-31492
   42404:	00000506 	br	4241c <edid_print_cea+0x7cc>
						break;
					case 8:
						printf("3D_Structure)side-by-side(half) ");
   42408:	010001b4 	movhi	r4,6
   4240c:	21214704 	addi	r4,r4,-31460
   42410:	00000206 	br	4241c <edid_print_cea+0x7cc>
						break;
					default:
						printf("3D_Structure)unknown ");
   42414:	010001b4 	movhi	r4,6
   42418:	21215004 	addi	r4,r4,-31424
   4241c:	0048fb80 	call	48fb8 <printf>
						break;
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
   42420:	a0800017 	ldw	r2,0(r20)
   42424:	1580291e 	bne	r2,r22,424cc <edid_print_cea+0x87c>
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
   42428:	a0800117 	ldw	r2,4(r20)
   4242c:	00c00284 	movi	r3,10
   42430:	18802636 	bltu	r3,r2,424cc <edid_print_cea+0x87c>
   42434:	100490ba 	slli	r2,r2,2
   42438:	00c00134 	movhi	r3,4
   4243c:	18c91304 	addi	r3,r3,9292
   42440:	10c5883a 	add	r2,r2,r3
   42444:	10800017 	ldw	r2,0(r2)
   42448:	1000683a 	jmp	r2
   4244c:	00042478 	rdprs	zero,zero,4241
   42450:	00042484 	movi	zero,4242
   42454:	000424cc 	andi	zero,zero,4243
   42458:	000424cc 	andi	zero,zero,4243
   4245c:	000424cc 	andi	zero,zero,4243
   42460:	000424cc 	andi	zero,zero,4243
   42464:	00042490 	cmplti	zero,zero,4242
   42468:	0004249c 	xori	zero,zero,4242
   4246c:	000424a8 	cmpgeui	zero,zero,4242
   42470:	000424b4 	movhi	zero,4242
   42474:	000424c0 	call	424c <__reset-0x3bdb4>
						case 0:
							printf("3D_Detail)h_sub_sampling+four_quincunx_matrix");
   42478:	010001b4 	movhi	r4,6
   4247c:	21215604 	addi	r4,r4,-31400
   42480:	00001106 	br	424c8 <edid_print_cea+0x878>
							break;
						case 1:
							printf("3D_Detail)h_sub_sampling");
   42484:	010001b4 	movhi	r4,6
   42488:	21216204 	addi	r4,r4,-31352
   4248c:	00000e06 	br	424c8 <edid_print_cea+0x878>
							break;
						case 6:
							printf("3D_Detail)all_4_sub_sampling_position");
   42490:	010001b4 	movhi	r4,6
   42494:	21216904 	addi	r4,r4,-31324
   42498:	00000b06 	br	424c8 <edid_print_cea+0x878>
							break;
						case 7:
							printf("3D_Detail)odd_left+odd_right");
   4249c:	010001b4 	movhi	r4,6
   424a0:	21217304 	addi	r4,r4,-31284
   424a4:	00000806 	br	424c8 <edid_print_cea+0x878>
							break;
						case 8:
							printf("3D_Detail)odd_left+even_right");
   424a8:	010001b4 	movhi	r4,6
   424ac:	21217b04 	addi	r4,r4,-31252
   424b0:	00000506 	br	424c8 <edid_print_cea+0x878>
							break;
						case 9:
							printf("3D_Detail)even_left+odd_right");
   424b4:	010001b4 	movhi	r4,6
   424b8:	21218304 	addi	r4,r4,-31220
   424bc:	00000206 	br	424c8 <edid_print_cea+0x878>
							break;
						case 10:
							printf("3D_Detail)even_left+even_right");
   424c0:	010001b4 	movhi	r4,6
   424c4:	21218b04 	addi	r4,r4,-31188
   424c8:	0048fb80 	call	48fb8 <printf>
							break;
						}
					}

					printf("\n");
   424cc:	01000284 	movi	r4,10
   424d0:	0048ffc0 	call	48ffc <putchar>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   424d4:	ad400044 	addi	r21,r21,1
   424d8:	a5000304 	addi	r20,r20,12
   424dc:	003f9c06 	br	42350 <__alt_data_end+0xfffdb250>
			}

			break;

		case CEA_DB_SPEAKER:
			printf("\n  [%02d] speaker allocation data block ...\n", t);
   424e0:	010001b4 	movhi	r4,6
   424e4:	21219304 	addi	r4,r4,-31156
   424e8:	0048fb80 	call	48fb8 <printf>

			printf("       RLC/RRC : %s\n", cea->db_speaker.designation & CEA_SPK_RLC_RRC ? "yes" : "no");
   424ec:	8086a717 	ldw	r2,6812(r16)
   424f0:	1080100c 	andi	r2,r2,64
   424f4:	1000031e 	bne	r2,zero,42504 <edid_print_cea+0x8b4>
   424f8:	01400174 	movhi	r5,5
   424fc:	295e6504 	addi	r5,r5,31124
   42500:	00000206 	br	4250c <edid_print_cea+0x8bc>
   42504:	01400174 	movhi	r5,5
   42508:	295e6404 	addi	r5,r5,31120
   4250c:	010001b4 	movhi	r4,6
   42510:	21219f04 	addi	r4,r4,-31108
   42514:	0048fb80 	call	48fb8 <printf>
			printf("       FLC/FRC : %s\n", cea->db_speaker.designation & CEA_SPK_FLC_FRC ? "yes" : "no");
   42518:	8086a717 	ldw	r2,6812(r16)
   4251c:	1080080c 	andi	r2,r2,32
   42520:	1000031e 	bne	r2,zero,42530 <edid_print_cea+0x8e0>
   42524:	01400174 	movhi	r5,5
   42528:	295e6504 	addi	r5,r5,31124
   4252c:	00000206 	br	42538 <edid_print_cea+0x8e8>
   42530:	01400174 	movhi	r5,5
   42534:	295e6404 	addi	r5,r5,31120
   42538:	010001b4 	movhi	r4,6
   4253c:	2121a504 	addi	r4,r4,-31084
   42540:	0048fb80 	call	48fb8 <printf>
			printf("       RC      : %s\n", cea->db_speaker.designation & CEA_SPK_RC ? "yes" : "no");
   42544:	8086a717 	ldw	r2,6812(r16)
   42548:	1080040c 	andi	r2,r2,16
   4254c:	1000031e 	bne	r2,zero,4255c <edid_print_cea+0x90c>
   42550:	01400174 	movhi	r5,5
   42554:	295e6504 	addi	r5,r5,31124
   42558:	00000206 	br	42564 <edid_print_cea+0x914>
   4255c:	01400174 	movhi	r5,5
   42560:	295e6404 	addi	r5,r5,31120
   42564:	010001b4 	movhi	r4,6
   42568:	2121ab04 	addi	r4,r4,-31060
   4256c:	0048fb80 	call	48fb8 <printf>
			printf("       RL/RR   : %s\n", cea->db_speaker.designation & CEA_SPK_RL_RR ? "yes" : "no");
   42570:	8086a717 	ldw	r2,6812(r16)
   42574:	1080020c 	andi	r2,r2,8
   42578:	1000031e 	bne	r2,zero,42588 <edid_print_cea+0x938>
   4257c:	01400174 	movhi	r5,5
   42580:	295e6504 	addi	r5,r5,31124
   42584:	00000206 	br	42590 <edid_print_cea+0x940>
   42588:	01400174 	movhi	r5,5
   4258c:	295e6404 	addi	r5,r5,31120
   42590:	010001b4 	movhi	r4,6
   42594:	2121b104 	addi	r4,r4,-31036
   42598:	0048fb80 	call	48fb8 <printf>
			printf("       FC      : %s\n", cea->db_speaker.designation & CEA_SPK_FC ? "yes" : "no");
   4259c:	8086a717 	ldw	r2,6812(r16)
   425a0:	1080010c 	andi	r2,r2,4
   425a4:	1000031e 	bne	r2,zero,425b4 <edid_print_cea+0x964>
   425a8:	01400174 	movhi	r5,5
   425ac:	295e6504 	addi	r5,r5,31124
   425b0:	00000206 	br	425bc <edid_print_cea+0x96c>
   425b4:	01400174 	movhi	r5,5
   425b8:	295e6404 	addi	r5,r5,31120
   425bc:	010001b4 	movhi	r4,6
   425c0:	2121b704 	addi	r4,r4,-31012
   425c4:	0048fb80 	call	48fb8 <printf>
			printf("       LFE     : %s\n", cea->db_speaker.designation & CEA_SPK_LFE ? "yes" : "no");
   425c8:	8086a717 	ldw	r2,6812(r16)
   425cc:	1080008c 	andi	r2,r2,2
   425d0:	1000031e 	bne	r2,zero,425e0 <edid_print_cea+0x990>
   425d4:	01400174 	movhi	r5,5
   425d8:	295e6504 	addi	r5,r5,31124
   425dc:	00000206 	br	425e8 <edid_print_cea+0x998>
   425e0:	01400174 	movhi	r5,5
   425e4:	295e6404 	addi	r5,r5,31120
   425e8:	010001b4 	movhi	r4,6
   425ec:	2121bd04 	addi	r4,r4,-30988
   425f0:	0048fb80 	call	48fb8 <printf>
			printf("       FL/FR   : %s\n", cea->db_speaker.designation & CEA_SPK_FL_FR ? "yes" : "no");
   425f4:	8086a717 	ldw	r2,6812(r16)
   425f8:	1080004c 	andi	r2,r2,1
   425fc:	1000031e 	bne	r2,zero,4260c <edid_print_cea+0x9bc>
   42600:	01400174 	movhi	r5,5
   42604:	295e6504 	addi	r5,r5,31124
   42608:	00000206 	br	42614 <edid_print_cea+0x9c4>
   4260c:	01400174 	movhi	r5,5
   42610:	295e6404 	addi	r5,r5,31120
   42614:	010001b4 	movhi	r4,6
   42618:	2121c304 	addi	r4,r4,-30964
   4261c:	00007106 	br	427e4 <edid_print_cea+0xb94>

			break;

		case CEA_DB_DTC:
			printf("\n  [%02d] VESA DTC data block ... (todo)\n", t);
   42620:	010001b4 	movhi	r4,6
   42624:	2121c904 	addi	r4,r4,-30940
   42628:	00006e06 	br	427e4 <edid_print_cea+0xb94>
			break;

		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
   4262c:	98800003 	ldbu	r2,0(r19)
   42630:	00c00484 	movi	r3,18
   42634:	18808b36 	bltu	r3,r2,42864 <edid_print_cea+0xc14>
   42638:	100490ba 	slli	r2,r2,2
   4263c:	00c00134 	movhi	r3,4
   42640:	18c99404 	addi	r3,r3,9808
   42644:	10c5883a 	add	r2,r2,r3
   42648:	10800017 	ldw	r2,0(r2)
   4264c:	1000683a 	jmp	r2
   42650:	0004269c 	xori	zero,zero,4250
   42654:	000427d0 	cmplti	zero,zero,4255
   42658:	000427dc 	xori	zero,zero,4255
   4265c:	000427ec 	andhi	zero,zero,4255
   42660:	000427f8 	rdprs	zero,zero,4255
   42664:	00042804 	movi	zero,4256
   42668:	00042864 	muli	zero,zero,4257
   4266c:	00042864 	muli	zero,zero,4257
   42670:	00042864 	muli	zero,zero,4257
   42674:	00042864 	muli	zero,zero,4257
   42678:	00042864 	muli	zero,zero,4257
   4267c:	00042864 	muli	zero,zero,4257
   42680:	00042864 	muli	zero,zero,4257
   42684:	00042864 	muli	zero,zero,4257
   42688:	00042864 	muli	zero,zero,4257
   4268c:	00042864 	muli	zero,zero,4257
   42690:	00042830 	cmpltui	zero,zero,4256
   42694:	0004283c 	xorhi	zero,zero,4256
   42698:	00042848 	cmpgei	zero,zero,4257
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);
   4269c:	010001b4 	movhi	r4,6
   426a0:	2121d404 	addi	r4,r4,-30896
   426a4:	0048fb80 	call	48fb8 <printf>

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
   426a8:	8086f617 	ldw	r2,7128(r16)
   426ac:	1000031e 	bne	r2,zero,426bc <edid_print_cea+0xa6c>
   426b0:	01400174 	movhi	r5,5
   426b4:	295e6504 	addi	r5,r5,31124
   426b8:	00000206 	br	426c4 <edid_print_cea+0xa74>
   426bc:	01400174 	movhi	r5,5
   426c0:	295e6404 	addi	r5,r5,31120
   426c4:	010001b4 	movhi	r4,6
   426c8:	2121e104 	addi	r4,r4,-30844
   426cc:	0048fb80 	call	48fb8 <printf>

				switch (cea->db_vcdb.pt_scan_behavior) {
   426d0:	8086f717 	ldw	r2,7132(r16)
   426d4:	00c00044 	movi	r3,1
   426d8:	10c00c26 	beq	r2,r3,4270c <edid_print_cea+0xabc>
   426dc:	18800416 	blt	r3,r2,426f0 <edid_print_cea+0xaa0>
   426e0:	1000101e 	bne	r2,zero,42724 <edid_print_cea+0xad4>
				case 0:
					printf("       PT scan behavior              : none\n");
   426e4:	010001b4 	movhi	r4,6
   426e8:	2121ec04 	addi	r4,r4,-30800
   426ec:	00000c06 	br	42720 <edid_print_cea+0xad0>
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");

				switch (cea->db_vcdb.pt_scan_behavior) {
   426f0:	00c00084 	movi	r3,2
   426f4:	10c00826 	beq	r2,r3,42718 <edid_print_cea+0xac8>
   426f8:	00c000c4 	movi	r3,3
   426fc:	10c0091e 	bne	r2,r3,42724 <edid_print_cea+0xad4>
					break;
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
   42700:	010001b4 	movhi	r4,6
   42704:	21221504 	addi	r4,r4,-30636
   42708:	00000506 	br	42720 <edid_print_cea+0xad0>
				switch (cea->db_vcdb.pt_scan_behavior) {
				case 0:
					printf("       PT scan behavior              : none\n");
					break;
				case 1:
					printf("       PT scan behavior              : overscanned always\n");
   4270c:	010001b4 	movhi	r4,6
   42710:	2121f704 	addi	r4,r4,-30756
   42714:	00000206 	br	42720 <edid_print_cea+0xad0>
					break;
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
   42718:	010001b4 	movhi	r4,6
   4271c:	21220604 	addi	r4,r4,-30696
					break;
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
   42720:	00490cc0 	call	490cc <puts>
					break;
				}

				switch (cea->db_vcdb.it_scan_behavior) {
   42724:	8086f817 	ldw	r2,7136(r16)
   42728:	00c00044 	movi	r3,1
   4272c:	10c00c26 	beq	r2,r3,42760 <edid_print_cea+0xb10>
   42730:	18800416 	blt	r3,r2,42744 <edid_print_cea+0xaf4>
   42734:	1000101e 	bne	r2,zero,42778 <edid_print_cea+0xb28>
				case 0:
					printf("       IT scan behavior              : none\n");
   42738:	010001b4 	movhi	r4,6
   4273c:	21222704 	addi	r4,r4,-30564
   42740:	00000c06 	br	42774 <edid_print_cea+0xb24>
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
					break;
				}

				switch (cea->db_vcdb.it_scan_behavior) {
   42744:	00c00084 	movi	r3,2
   42748:	10c00826 	beq	r2,r3,4276c <edid_print_cea+0xb1c>
   4274c:	00c000c4 	movi	r3,3
   42750:	10c0091e 	bne	r2,r3,42778 <edid_print_cea+0xb28>
					break;
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
   42754:	010001b4 	movhi	r4,6
   42758:	21225004 	addi	r4,r4,-30400
   4275c:	00000506 	br	42774 <edid_print_cea+0xb24>
				switch (cea->db_vcdb.it_scan_behavior) {
				case 0:
					printf("       IT scan behavior              : none\n");
					break;
				case 1:
					printf("       IT scan behavior              : overscanned always\n");
   42760:	010001b4 	movhi	r4,6
   42764:	21223204 	addi	r4,r4,-30520
   42768:	00000206 	br	42774 <edid_print_cea+0xb24>
					break;
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
   4276c:	010001b4 	movhi	r4,6
   42770:	21224104 	addi	r4,r4,-30460
					break;
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
   42774:	00490cc0 	call	490cc <puts>
					break;
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
   42778:	8086f917 	ldw	r2,7140(r16)
   4277c:	00c00044 	movi	r3,1
   42780:	10c00c26 	beq	r2,r3,427b4 <edid_print_cea+0xb64>
   42784:	18800416 	blt	r3,r2,42798 <edid_print_cea+0xb48>
   42788:	1000361e 	bne	r2,zero,42864 <edid_print_cea+0xc14>
				case 0:
					printf("       CE scan behavior              : none\n");
   4278c:	010001b4 	movhi	r4,6
   42790:	21226204 	addi	r4,r4,-30328
   42794:	00000c06 	br	427c8 <edid_print_cea+0xb78>
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
					break;
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
   42798:	00c00084 	movi	r3,2
   4279c:	10c00826 	beq	r2,r3,427c0 <edid_print_cea+0xb70>
   427a0:	00c000c4 	movi	r3,3
   427a4:	10c02f1e 	bne	r2,r3,42864 <edid_print_cea+0xc14>
					break;
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
					break;
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
   427a8:	010001b4 	movhi	r4,6
   427ac:	21228b04 	addi	r4,r4,-30164
   427b0:	00000506 	br	427c8 <edid_print_cea+0xb78>
				switch (cea->db_vcdb.ce_scan_behavior) {
				case 0:
					printf("       CE scan behavior              : none\n");
					break;
				case 1:
					printf("       CE scan behavior              : overscanned always\n");
   427b4:	010001b4 	movhi	r4,6
   427b8:	21226d04 	addi	r4,r4,-30284
   427bc:	00000206 	br	427c8 <edid_print_cea+0xb78>
					break;
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
   427c0:	010001b4 	movhi	r4,6
   427c4:	21227c04 	addi	r4,r4,-30224
					break;
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
   427c8:	00490cc0 	call	490cc <puts>
					break;
   427cc:	00002506 	br	42864 <edid_print_cea+0xc14>
				}
				break;
			case CEA_DBE_VIDEO_VENDOR:
				printf("\n  [%02d] vendor-specific video data block (ext) ... (todo)\n", t);
   427d0:	010001b4 	movhi	r4,6
   427d4:	21229d04 	addi	r4,r4,-30092
   427d8:	00000206 	br	427e4 <edid_print_cea+0xb94>
				break;
			case CEA_DBE_VIDEO_DDI:
				printf("\n  [%02d] VESA video display device information data block (ext) ... (todo)\n", t);
   427dc:	010001b4 	movhi	r4,6
   427e0:	2122ad04 	addi	r4,r4,-30028
   427e4:	0048fb80 	call	48fb8 <printf>
				break;
   427e8:	00001e06 	br	42864 <edid_print_cea+0xc14>
			case CEA_DBE_VIDEO_VESA:
				printf("\n  [%02d] VESA video data block (ext) ... (todo)\n", t);
   427ec:	010001b4 	movhi	r4,6
   427f0:	2122c104 	addi	r4,r4,-29948
   427f4:	003ffb06 	br	427e4 <__alt_data_end+0xfffdb6e4>
				break;
			case CEA_DBE_VIDEO_HDMI:
				printf("\n  [%02d] HDMI video data block (ext) ... (todo)\n", t);
   427f8:	010001b4 	movhi	r4,6
   427fc:	2122ce04 	addi	r4,r4,-29896
   42800:	003ff806 	br	427e4 <__alt_data_end+0xfffdb6e4>
				break;
			case CEA_DBE_COLORIMETRY:
				printf("\n  [%02d] colorimetry data block (ext) ... (todo)\n", t);
   42804:	010001b4 	movhi	r4,6
   42808:	2122db04 	addi	r4,r4,-29844
   4280c:	0048fb80 	call	48fb8 <printf>
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   42810:	0007883a 	mov	r3,zero
   42814:	18800083 	ldbu	r2,2(r3)
   42818:	108000cc 	andi	r2,r2,3
   4281c:	8086f415 	stw	r2,7120(r16)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   42820:	188000c3 	ldbu	r2,3(r3)
   42824:	108001cc 	andi	r2,r2,7
   42828:	8086f515 	stw	r2,7124(r16)
				break;
   4282c:	00000d06 	br	42864 <edid_print_cea+0xc14>
			case CEA_DBE_AUDIO_MISC:
				printf("\n  [%02d] CEA misc audio fields (ext) ... (todo)\n", t);
   42830:	010001b4 	movhi	r4,6
   42834:	2122e804 	addi	r4,r4,-29792
   42838:	003fea06 	br	427e4 <__alt_data_end+0xfffdb6e4>
				break;
			case CEA_DBE_AUDIO_VENDOR:
				printf("\n  [%02d] vendor-specific audio data block (ext) ... (todo)\n", t);
   4283c:	010001b4 	movhi	r4,6
   42840:	2122f504 	addi	r4,r4,-29740
   42844:	003fe706 	br	427e4 <__alt_data_end+0xfffdb6e4>
				break;
			case CEA_DBE_AUDIO_HDMI:
				printf("\n  [%02d] HDMI audio data block (ext) ... (todo)\n", t);
   42848:	010001b4 	movhi	r4,6
   4284c:	21230504 	addi	r4,r4,-29676
   42850:	003fe406 	br	427e4 <__alt_data_end+0xfffdb6e4>
			}

			break;

		default:
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
   42854:	010001b4 	movhi	r4,6
   42858:	21231204 	addi	r4,r4,-29624
   4285c:	31803fcc 	andi	r6,r6,255
   42860:	0048fb80 	call	48fb8 <printf>
   42864:	9cc00044 	addi	r19,r19,1
   42868:	003d5506 	br	41dc0 <__alt_data_end+0xfffdacc0>
			break;
		}
	}

	if (cea->nr_dtd != 0)
   4286c:	80861217 	ldw	r2,6216(r16)
   42870:	10000326 	beq	r2,zero,42880 <edid_print_cea+0xc30>
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");
   42874:	010001b4 	movhi	r4,6
   42878:	21231b04 	addi	r4,r4,-29588
   4287c:	00490cc0 	call	490cc <puts>
   42880:	8c070904 	addi	r16,r17,7204
   42884:	8cc70804 	addi	r19,r17,7200
   42888:	8d06fd04 	addi	r20,r17,7156

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   4288c:	9463883a 	add	r17,r18,r17
   42890:	9421883a 	add	r16,r18,r16
   42894:	94e7883a 	add	r19,r18,r19
   42898:	9529883a 	add	r20,r18,r20
		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
   4289c:	002b883a 	mov	r21,zero

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   428a0:	8c461204 	addi	r17,r17,6216
   428a4:	88800017 	ldw	r2,0(r17)
   428a8:	a880c60e 	bge	r21,r2,42bc4 <edid_print_cea+0xf74>

		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   428ac:	010001b4 	movhi	r4,6
   428b0:	21232c04 	addi	r4,r4,-29520
   428b4:	a80b883a 	mov	r5,r21
   428b8:	0048fb80 	call	48fb8 <printf>

		printf("      pixel clock   : %d (Hz)\n", cea->detailed_timing[i].pixel_clock);
   428bc:	817ff117 	ldw	r5,-60(r16)
   428c0:	010001b4 	movhi	r4,6
   428c4:	21233704 	addi	r4,r4,-29476
   428c8:	0048fb80 	call	48fb8 <printf>
		printf("      h addressible : %d (pixels)\n", cea->detailed_timing[i].width);
   428cc:	817ff217 	ldw	r5,-56(r16)
   428d0:	010001b4 	movhi	r4,6
   428d4:	21233f04 	addi	r4,r4,-29444
   428d8:	0048fb80 	call	48fb8 <printf>
		printf("        blank       : %d (pixels)\n", cea->detailed_timing[i].h_blank);
   428dc:	a1400017 	ldw	r5,0(r20)
   428e0:	010001b4 	movhi	r4,6
   428e4:	21234804 	addi	r4,r4,-29408
   428e8:	0048fb80 	call	48fb8 <printf>
		printf("        fp          : %d (pixels)\n", cea->detailed_timing[i].h_fp);
   428ec:	817ff617 	ldw	r5,-40(r16)
   428f0:	010001b4 	movhi	r4,6
   428f4:	21235104 	addi	r4,r4,-29372
   428f8:	0048fb80 	call	48fb8 <printf>
		printf("        sync        : %d (pixels)\n", cea->detailed_timing[i].h_sync);
   428fc:	817ff817 	ldw	r5,-32(r16)
   42900:	010001b4 	movhi	r4,6
   42904:	21235a04 	addi	r4,r4,-29336
   42908:	0048fb80 	call	48fb8 <printf>
		printf("        bp          : %d (pixels)\n", cea->detailed_timing[i].h_blank - cea->detailed_timing[i].h_fp - cea->detailed_timing[i].h_sync);
   4290c:	817ff617 	ldw	r5,-40(r16)
   42910:	a0800017 	ldw	r2,0(r20)
   42914:	010001b4 	movhi	r4,6
   42918:	21236304 	addi	r4,r4,-29300
   4291c:	1145c83a 	sub	r2,r2,r5
   42920:	817ff817 	ldw	r5,-32(r16)
   42924:	114bc83a 	sub	r5,r2,r5
   42928:	0048fb80 	call	48fb8 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].h_size);
   4292c:	817ffa17 	ldw	r5,-24(r16)
   42930:	010001b4 	movhi	r4,6
   42934:	21236c04 	addi	r4,r4,-29264
   42938:	0048fb80 	call	48fb8 <printf>
		printf("      v addressible : %d (lines)\n", cea->detailed_timing[i].height);
   4293c:	817ff317 	ldw	r5,-52(r16)
   42940:	010001b4 	movhi	r4,6
   42944:	21237404 	addi	r4,r4,-29232
   42948:	0048fb80 	call	48fb8 <printf>
		printf("        blank       : %d (lines)\n", cea->detailed_timing[i].v_blank);
   4294c:	817ff517 	ldw	r5,-44(r16)
   42950:	010001b4 	movhi	r4,6
   42954:	21237d04 	addi	r4,r4,-29196
   42958:	0048fb80 	call	48fb8 <printf>
		printf("        fp          : %d (lines)\n", cea->detailed_timing[i].v_fp);
   4295c:	817ff717 	ldw	r5,-36(r16)
   42960:	010001b4 	movhi	r4,6
   42964:	21238604 	addi	r4,r4,-29160
   42968:	0048fb80 	call	48fb8 <printf>
		printf("        sync        : %d (lines)\n", cea->detailed_timing[i].v_sync);
   4296c:	817ff917 	ldw	r5,-28(r16)
   42970:	010001b4 	movhi	r4,6
   42974:	21238f04 	addi	r4,r4,-29124
   42978:	0048fb80 	call	48fb8 <printf>
		printf("        bp          : %d (lines)\n", cea->detailed_timing[i].v_blank - cea->detailed_timing[i].v_fp - cea->detailed_timing[i].v_sync);
   4297c:	817ff717 	ldw	r5,-36(r16)
   42980:	80bff517 	ldw	r2,-44(r16)
   42984:	010001b4 	movhi	r4,6
   42988:	21239804 	addi	r4,r4,-29088
   4298c:	1145c83a 	sub	r2,r2,r5
   42990:	817ff917 	ldw	r5,-28(r16)
   42994:	114bc83a 	sub	r5,r2,r5
   42998:	0048fb80 	call	48fb8 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].v_size);
   4299c:	817ffb17 	ldw	r5,-20(r16)
   429a0:	010001b4 	movhi	r4,6
   429a4:	21236c04 	addi	r4,r4,-29264
   429a8:	0048fb80 	call	48fb8 <printf>
		printf("      border (L&R)  : %d (pixels)\n", cea->detailed_timing[i].border_lr);
   429ac:	817ffc17 	ldw	r5,-16(r16)
   429b0:	010001b4 	movhi	r4,6
   429b4:	2123a104 	addi	r4,r4,-29052
   429b8:	0048fb80 	call	48fb8 <printf>
		printf("      border (T&B)  : %d (lines)\n", cea->detailed_timing[i].border_tb);
   429bc:	817ffd17 	ldw	r5,-12(r16)
   429c0:	010001b4 	movhi	r4,6
   429c4:	2123aa04 	addi	r4,r4,-29016
   429c8:	0048fb80 	call	48fb8 <printf>
		printf("      interlaced    : %d\n", cea->detailed_timing[i].interlaced);
   429cc:	817ffe17 	ldw	r5,-8(r16)
   429d0:	010001b4 	movhi	r4,6
   429d4:	2123b304 	addi	r4,r4,-28980
   429d8:	0048fb80 	call	48fb8 <printf>

		if (cea->detailed_timing[i].stereo == STEREO_NONE) {
   429dc:	98800017 	ldw	r2,0(r19)
   429e0:	1000041e 	bne	r2,zero,429f4 <edid_print_cea+0xda4>
			printf("      stereo        : none\n");
   429e4:	010001b4 	movhi	r4,6
   429e8:	2123ba04 	addi	r4,r4,-28952
   429ec:	00490cc0 	call	490cc <puts>
   429f0:	00002906 	br	42a98 <edid_print_cea+0xe48>
		} else {
    		printf("      stereo        : ");
   429f4:	010001b4 	movhi	r4,6
   429f8:	2123c104 	addi	r4,r4,-28924
   429fc:	0048fb80 	call	48fb8 <printf>

    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   42a00:	98800017 	ldw	r2,0(r19)
   42a04:	1080008c 	andi	r2,r2,2
   42a08:	10000326 	beq	r2,zero,42a18 <edid_print_cea+0xdc8>
        		printf("field_seq_right ");
   42a0c:	010001b4 	movhi	r4,6
   42a10:	2123c704 	addi	r4,r4,-28900
   42a14:	0048fb80 	call	48fb8 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   42a18:	98800017 	ldw	r2,0(r19)
   42a1c:	1080010c 	andi	r2,r2,4
   42a20:	10000326 	beq	r2,zero,42a30 <edid_print_cea+0xde0>
        		printf("field_seq_left ");
   42a24:	010001b4 	movhi	r4,6
   42a28:	2123cc04 	addi	r4,r4,-28880
   42a2c:	0048fb80 	call	48fb8 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   42a30:	98800017 	ldw	r2,0(r19)
   42a34:	1080020c 	andi	r2,r2,8
   42a38:	10000326 	beq	r2,zero,42a48 <edid_print_cea+0xdf8>
        		printf("2way_interleave_right ");
   42a3c:	010001b4 	movhi	r4,6
   42a40:	2123d004 	addi	r4,r4,-28864
   42a44:	0048fb80 	call	48fb8 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   42a48:	98800017 	ldw	r2,0(r19)
   42a4c:	1080040c 	andi	r2,r2,16
   42a50:	10000326 	beq	r2,zero,42a60 <edid_print_cea+0xe10>
        		printf("2way_interleave_left ");
   42a54:	010001b4 	movhi	r4,6
   42a58:	2123d604 	addi	r4,r4,-28840
   42a5c:	0048fb80 	call	48fb8 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_4WAY_INTERLEAVE)
   42a60:	98800017 	ldw	r2,0(r19)
   42a64:	1080080c 	andi	r2,r2,32
   42a68:	10000326 	beq	r2,zero,42a78 <edid_print_cea+0xe28>
        		printf("4way_interleave ");
   42a6c:	010001b4 	movhi	r4,6
   42a70:	2123dc04 	addi	r4,r4,-28816
   42a74:	0048fb80 	call	48fb8 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   42a78:	98800017 	ldw	r2,0(r19)
   42a7c:	1080100c 	andi	r2,r2,64
   42a80:	10000326 	beq	r2,zero,42a90 <edid_print_cea+0xe40>
        		printf("side-by-side ");
   42a84:	010001b4 	movhi	r4,6
   42a88:	2123e104 	addi	r4,r4,-28796
   42a8c:	0048fb80 	call	48fb8 <printf>

    		printf("\n");
   42a90:	01000284 	movi	r4,10
   42a94:	0048ffc0 	call	48ffc <putchar>
		}

		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC) {
   42a98:	80800017 	ldw	r2,0(r16)
   42a9c:	10c0004c 	andi	r3,r2,1
   42aa0:	18002126 	beq	r3,zero,42b28 <edid_print_cea+0xed8>

			printf("      analog sync   : composite");
   42aa4:	010001b4 	movhi	r4,6
   42aa8:	2123e504 	addi	r4,r4,-28780
   42aac:	0048fb80 	call	48fb8 <printf>

    		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC)
   42ab0:	80800017 	ldw	r2,0(r16)
   42ab4:	1080004c 	andi	r2,r2,1
   42ab8:	10000326 	beq	r2,zero,42ac8 <edid_print_cea+0xe78>
        		printf(" bipolar");
   42abc:	010001b4 	movhi	r4,6
   42ac0:	2123ed04 	addi	r4,r4,-28748
   42ac4:	0048fb80 	call	48fb8 <printf>

    		if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION) {
   42ac8:	80800017 	ldw	r2,0(r16)
   42acc:	1080010c 	andi	r2,r2,4
   42ad0:	10000f26 	beq	r2,zero,42b10 <edid_print_cea+0xec0>
        		printf(" with_serrations");
   42ad4:	010001b4 	movhi	r4,6
   42ad8:	2123f004 	addi	r4,r4,-28736
   42adc:	0048fb80 	call	48fb8 <printf>
    			if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_G)
   42ae0:	80800017 	ldw	r2,0(r16)
   42ae4:	1080020c 	andi	r2,r2,8
   42ae8:	10000326 	beq	r2,zero,42af8 <edid_print_cea+0xea8>
					printf(" syn_on_green");
   42aec:	010001b4 	movhi	r4,6
   42af0:	2123f504 	addi	r4,r4,-28716
   42af4:	0048fb80 	call	48fb8 <printf>
				if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   42af8:	80800017 	ldw	r2,0(r16)
   42afc:	1080040c 	andi	r2,r2,16
   42b00:	10000626 	beq	r2,zero,42b1c <edid_print_cea+0xecc>
					printf(" syn_on_rgb");
   42b04:	010001b4 	movhi	r4,6
   42b08:	2123f904 	addi	r4,r4,-28700
   42b0c:	00000206 	br	42b18 <edid_print_cea+0xec8>
    		} else {
        		printf(" without_serrations");
   42b10:	010001b4 	movhi	r4,6
   42b14:	2123fc04 	addi	r4,r4,-28688
   42b18:	0048fb80 	call	48fb8 <printf>
    		}

			printf("\n");
   42b1c:	01000284 	movi	r4,10
   42b20:	0048ffc0 	call	48ffc <putchar>
   42b24:	00002206 	br	42bb0 <edid_print_cea+0xf60>

		} else if (cea->detailed_timing[i].sync & D_COMPOSITE_SYNC) {
   42b28:	10c0080c 	andi	r3,r2,32
   42b2c:	18000926 	beq	r3,zero,42b54 <edid_print_cea+0xf04>

			printf("      digital sync  : composite");
   42b30:	010001b4 	movhi	r4,6
   42b34:	21240104 	addi	r4,r4,-28668
   42b38:	0048fb80 	call	48fb8 <printf>

    		if (cea->detailed_timing[i].sync & D_COMPOSITE_SERRATION)
   42b3c:	80800017 	ldw	r2,0(r16)
   42b40:	1080100c 	andi	r2,r2,64
   42b44:	103ff226 	beq	r2,zero,42b10 <__alt_data_end+0xfffdba10>
        		printf(" with_serrations");
   42b48:	010001b4 	movhi	r4,6
   42b4c:	2123f004 	addi	r4,r4,-28736
   42b50:	003ff106 	br	42b18 <__alt_data_end+0xfffdba18>
    		else
    			printf(" without_serrations");

    		printf("\n");

		} else if (cea->detailed_timing[i].sync & D_SEPERATE_SYNC) {
   42b54:	1080200c 	andi	r2,r2,128
   42b58:	10001526 	beq	r2,zero,42bb0 <edid_print_cea+0xf60>

			printf("      digital sync  : seperate");
   42b5c:	010001b4 	movhi	r4,6
   42b60:	21240904 	addi	r4,r4,-28636
   42b64:	0048fb80 	call	48fb8 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_VSYNC_N)
   42b68:	80800017 	ldw	r2,0(r16)
   42b6c:	1080400c 	andi	r2,r2,256
   42b70:	10000326 	beq	r2,zero,42b80 <edid_print_cea+0xf30>
				printf(" vsync_n");
   42b74:	010001b4 	movhi	r4,6
   42b78:	21241104 	addi	r4,r4,-28604
   42b7c:	00000206 	br	42b88 <edid_print_cea+0xf38>
			else
				printf(" vsync_p");
   42b80:	010001b4 	movhi	r4,6
   42b84:	21241404 	addi	r4,r4,-28592
   42b88:	0048fb80 	call	48fb8 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_HSYNC_N)
   42b8c:	80800017 	ldw	r2,0(r16)
   42b90:	1081000c 	andi	r2,r2,1024
   42b94:	10000326 	beq	r2,zero,42ba4 <edid_print_cea+0xf54>
				printf(" hsync_n");
   42b98:	010001b4 	movhi	r4,6
   42b9c:	21241704 	addi	r4,r4,-28580
   42ba0:	003fdd06 	br	42b18 <__alt_data_end+0xfffdba18>
			else
				printf(" hsync_p");
   42ba4:	010001b4 	movhi	r4,6
   42ba8:	21241a04 	addi	r4,r4,-28568
   42bac:	003fda06 	br	42b18 <__alt_data_end+0xfffdba18>

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   42bb0:	ad400044 	addi	r21,r21,1
   42bb4:	84001004 	addi	r16,r16,64
   42bb8:	9cc01004 	addi	r19,r19,64
   42bbc:	a5001004 	addi	r20,r20,64
   42bc0:	003f3806 	br	428a4 <__alt_data_end+0xfffdb7a4>
				printf(" hsync_p");

    		printf("\n");
		}
	}
}
   42bc4:	dfc01117 	ldw	ra,68(sp)
   42bc8:	df001017 	ldw	fp,64(sp)
   42bcc:	ddc00f17 	ldw	r23,60(sp)
   42bd0:	dd800e17 	ldw	r22,56(sp)
   42bd4:	dd400d17 	ldw	r21,52(sp)
   42bd8:	dd000c17 	ldw	r20,48(sp)
   42bdc:	dcc00b17 	ldw	r19,44(sp)
   42be0:	dc800a17 	ldw	r18,40(sp)
   42be4:	dc400917 	ldw	r17,36(sp)
   42be8:	dc000817 	ldw	r16,32(sp)
   42bec:	dec01204 	addi	sp,sp,72
   42bf0:	f800283a 	ret

00042bf4 <edid_decode_extensions>:

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
   42bf4:	defffb04 	addi	sp,sp,-20
   42bf8:	dc800215 	stw	r18,8(sp)
   42bfc:	dc400115 	stw	r17,4(sp)
   42c00:	dfc00415 	stw	ra,16(sp)
   42c04:	dcc00315 	stw	r19,12(sp)
   42c08:	dc000015 	stw	r16,0(sp)
	const u8 *c = edid_bin;
	int i, nr_ext;

	nr_ext = (int)c[0x7e];
   42c0c:	2c001f83 	ldbu	r16,126(r5)
		}
	}
}

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
   42c10:	2025883a 	mov	r18,r4
   42c14:	2823883a 	mov	r17,r5
   42c18:	0400010e 	bge	zero,r16,42c20 <edid_decode_extensions+0x2c>
   42c1c:	04000044 	movi	r16,1
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
   42c20:	0005883a 	mov	r2,zero

		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
   42c24:	04c00084 	movi	r19,2
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
   42c28:	1400090e 	bge	r2,r16,42c50 <edid_decode_extensions+0x5c>

		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
   42c2c:	88802003 	ldbu	r2,128(r17)
   42c30:	14c0051e 	bne	r2,r19,42c48 <edid_decode_extensions+0x54>
		case 0x01:  // 0x01 (LCD Timings)
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
   42c34:	9009883a 	mov	r4,r18
   42c38:	880b883a 	mov	r5,r17
   42c3c:	000d883a 	mov	r6,zero
   42c40:	00410280 	call	41028 <edid_decode_cea>
   42c44:	1000041e 	bne	r2,zero,42c58 <edid_decode_extensions+0x64>
   42c48:	00800044 	movi	r2,1
   42c4c:	003ff606 	br	42c28 <__alt_data_end+0xfffdbb28>
		case 0xff:  // 0xff (define by display manufacturer)
			break;
		}
	}

	return 0;
   42c50:	0005883a 	mov	r2,zero
   42c54:	00000106 	br	42c5c <edid_decode_extensions+0x68>
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
				return -1;
   42c58:	00bfffc4 	movi	r2,-1
			break;
		}
	}

	return 0;
}
   42c5c:	dfc00417 	ldw	ra,16(sp)
   42c60:	dcc00317 	ldw	r19,12(sp)
   42c64:	dc800217 	ldw	r18,8(sp)
   42c68:	dc400117 	ldw	r17,4(sp)
   42c6c:	dc000017 	ldw	r16,0(sp)
   42c70:	dec00504 	addi	sp,sp,20
   42c74:	f800283a 	ret

00042c78 <edid_decode_v14>:

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
   42c78:	defff104 	addi	sp,sp,-60
   42c7c:	df000d15 	stw	fp,52(sp)
   42c80:	dc000515 	stw	r16,20(sp)
   42c84:	2839883a 	mov	fp,r5
   42c88:	2021883a 	mov	r16,r4
	const u8 *c = edid_bin;
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
   42c8c:	01800204 	movi	r6,8
   42c90:	2809883a 	mov	r4,r5
   42c94:	d1600004 	addi	r5,gp,-32768

	return 0;
}

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
   42c98:	dfc00e15 	stw	ra,56(sp)
   42c9c:	ddc00c15 	stw	r23,48(sp)
   42ca0:	dd800b15 	stw	r22,44(sp)
   42ca4:	dd400a15 	stw	r21,40(sp)
   42ca8:	dd000915 	stw	r20,36(sp)
   42cac:	dcc00815 	stw	r19,32(sp)
   42cb0:	dc800715 	stw	r18,28(sp)
   42cb4:	dc400615 	stw	r17,24(sp)
	const u8 *c = edid_bin;
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
   42cb8:	0048cb40 	call	48cb4 <memcmp>
   42cbc:	10070d1e 	bne	r2,zero,448f4 <edid_decode_v14+0x1c7c>
   42cc0:	e007883a 	mov	r3,fp
   42cc4:	e1001fc4 	addi	r4,fp,127
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
        checksum += c[s];
   42cc8:	19400003 	ldbu	r5,0(r3)
   42ccc:	18c00044 	addi	r3,r3,1
   42cd0:	1145883a 	add	r2,r2,r5
    // header
    if (memcmp(c, header, 8) != 0)
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
   42cd4:	193ffc1e 	bne	r3,r4,42cc8 <__alt_data_end+0xfffdbbc8>
        checksum += c[s];

    if ((u8)(checksum + c[127]) != 0x00)
   42cd8:	e0c01fc3 	ldbu	r3,127(fp)
   42cdc:	10c5883a 	add	r2,r2,r3
   42ce0:	10803fcc 	andi	r2,r2,255
   42ce4:	1007031e 	bne	r2,zero,448f4 <edid_decode_v14+0x1c7c>
    	return -1;

    edid->checksum = c[127];
   42ce8:	18c03fcc 	andi	r3,r3,255
   42cec:	80c60a15 	stw	r3,6184(r16)

    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
   42cf0:	e0800203 	ldbu	r2,8(fp)

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
   42cf4:	01000d44 	movi	r4,53
    edid->checksum = c[127];

    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
   42cf8:	1004d0ba 	srli	r2,r2,2
   42cfc:	108007cc 	andi	r2,r2,31
   42d00:	10801004 	addi	r2,r2,64
   42d04:	80800005 	stb	r2,0(r16)
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
   42d08:	e0800203 	ldbu	r2,8(fp)
   42d0c:	100690fa 	slli	r3,r2,3
   42d10:	e0800243 	ldbu	r2,9(fp)
   42d14:	1004d17a 	srli	r2,r2,5
   42d18:	1884b03a 	or	r2,r3,r2
   42d1c:	108007cc 	andi	r2,r2,31
   42d20:	10801004 	addi	r2,r2,64
   42d24:	80800045 	stb	r2,1(r16)
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
   42d28:	e0800243 	ldbu	r2,9(fp)
    edid->id_mfg[3] = 0;
   42d2c:	800000c5 	stb	zero,3(r16)
    // vid/pid
    c = &edid_bin[8];

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
   42d30:	108007cc 	andi	r2,r2,31
   42d34:	10801004 	addi	r2,r2,64
   42d38:	80800085 	stb	r2,2(r16)
    edid->id_mfg[3] = 0;

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];
   42d3c:	e08002c3 	ldbu	r2,11(fp)
   42d40:	1006923a 	slli	r3,r2,8
   42d44:	e0800283 	ldbu	r2,10(fp)
   42d48:	1884b03a 	or	r2,r3,r2
   42d4c:	80800115 	stw	r2,4(r16)

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
   42d50:	e08003c3 	ldbu	r2,15(fp)
   42d54:	1006963a 	slli	r3,r2,24
   42d58:	e0800383 	ldbu	r2,14(fp)
   42d5c:	1004943a 	slli	r2,r2,16
   42d60:	1884b03a 	or	r2,r3,r2
   42d64:	e0c00303 	ldbu	r3,12(fp)
   42d68:	10c6b03a 	or	r3,r2,r3
   42d6c:	e0800343 	ldbu	r2,13(fp)

    c = &edid_bin[0x10];

	edid->mfg_week = 0;
   42d70:	80000315 	stw	zero,12(r16)
	edid->mfg_year = 0;
   42d74:	80000415 	stw	zero,16(r16)

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
   42d78:	1004923a 	slli	r2,r2,8

    c = &edid_bin[0x10];

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;
   42d7c:	80000515 	stw	zero,20(r16)

    c = &edid_bin[0x0a];
    edid->id_prod = (c[1] << 8) | c[0];

    c = &edid_bin[0x0c];
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
   42d80:	1884b03a 	or	r2,r3,r2
   42d84:	80800215 	stw	r2,8(r16)

	edid->mfg_week = 0;
	edid->mfg_year = 0;
	edid->model_year = 0;

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
   42d88:	e0800403 	ldbu	r2,16(fp)
   42d8c:	10ffffc4 	addi	r3,r2,-1
   42d90:	18c03fcc 	andi	r3,r3,255
   42d94:	20c00236 	bltu	r4,r3,42da0 <edid_decode_v14+0x128>
    	edid->mfg_week = c[0];
   42d98:	10803fcc 	andi	r2,r2,255
   42d9c:	80800315 	stw	r2,12(r16)

    if (c[0] == 0xff)
   42da0:	e0c00403 	ldbu	r3,16(fp)
   42da4:	00803fc4 	movi	r2,255
   42da8:	1880041e 	bne	r3,r2,42dbc <edid_decode_v14+0x144>
    	edid->model_year = 1990 + c[1];
   42dac:	e0800443 	ldbu	r2,17(fp)
   42db0:	1081f184 	addi	r2,r2,1990
   42db4:	80800515 	stw	r2,20(r16)
   42db8:	00000306 	br	42dc8 <edid_decode_v14+0x150>
    else
    	edid->mfg_year = 1990 + c[1];
   42dbc:	e0800443 	ldbu	r2,17(fp)
   42dc0:	1081f184 	addi	r2,r2,1990
   42dc4:	80800415 	stw	r2,16(r16)

    // edid version
    c = &edid_bin[0x12];

    edid->ver_mj = c[0];
   42dc8:	e0800483 	ldbu	r2,18(fp)
   42dcc:	80800615 	stw	r2,24(r16)
    edid->ver_mn = c[1];
   42dd0:	e08004c3 	ldbu	r2,19(fp)
   42dd4:	80800715 	stw	r2,28(r16)

    // basic display parameters & features
    c = &edid_bin[0x14];

    if (*c & 0x80) {
   42dd8:	e0800507 	ldb	r2,20(fp)
   42ddc:	1000410e 	bge	r2,zero,42ee4 <edid_decode_v14+0x26c>
        edid->input.digital_if = 1;
   42de0:	00c00044 	movi	r3,1
   42de4:	80c00815 	stw	r3,32(r16)

        switch ((*c >> 4) & 0x7) {
   42de8:	e0800503 	ldbu	r2,20(fp)
   42dec:	01400144 	movi	r5,5
   42df0:	1004d13a 	srli	r2,r2,4
   42df4:	108001cc 	andi	r2,r2,7
   42df8:	10bfffc4 	addi	r2,r2,-1
   42dfc:	10803fcc 	andi	r2,r2,255
   42e00:	28801936 	bltu	r5,r2,42e68 <edid_decode_v14+0x1f0>
   42e04:	100490ba 	slli	r2,r2,2
   42e08:	01000134 	movhi	r4,4
   42e0c:	210b8704 	addi	r4,r4,11804
   42e10:	1105883a 	add	r2,r2,r4
   42e14:	10800017 	ldw	r2,0(r2)
   42e18:	1000683a 	jmp	r2
   42e1c:	00042e34 	movhi	zero,4280
   42e20:	00042e3c 	xorhi	zero,zero,4280
   42e24:	00042e44 	movi	zero,4281
   42e28:	00042e50 	cmplti	zero,zero,4281
   42e2c:	00042e58 	cmpnei	zero,zero,4281
   42e30:	00042e60 	cmpeqi	zero,zero,4281
        case 1:
            edid->input.digital.depth = VID_6BITS;
   42e34:	80c00915 	stw	r3,36(r16)
            break;
   42e38:	00000c06 	br	42e6c <edid_decode_v14+0x1f4>
        case 2:
            edid->input.digital.depth = VID_8BITS;
   42e3c:	00800084 	movi	r2,2
   42e40:	00000106 	br	42e48 <edid_decode_v14+0x1d0>
            break;
        case 3:
            edid->input.digital.depth = VID_10BITS;
   42e44:	008000c4 	movi	r2,3
   42e48:	80800915 	stw	r2,36(r16)
            break;
   42e4c:	00000706 	br	42e6c <edid_decode_v14+0x1f4>
        case 4:
            edid->input.digital.depth = VID_12BITS;
   42e50:	00800104 	movi	r2,4
   42e54:	003ffc06 	br	42e48 <__alt_data_end+0xfffdbd48>
            break;
        case 5:
            edid->input.digital.depth = VID_14BITS;
   42e58:	81400915 	stw	r5,36(r16)
            break;
   42e5c:	00000306 	br	42e6c <edid_decode_v14+0x1f4>
        case 6:
            edid->input.digital.depth = VID_16BITS;
   42e60:	00800184 	movi	r2,6
   42e64:	003ff806 	br	42e48 <__alt_data_end+0xfffdbd48>
            break;
        case 0:
        default:
            edid->input.digital.depth = VID_NOT_DEFINED;
   42e68:	80000915 	stw	zero,36(r16)
            break;
        }

        switch (*c & 0xf) {
   42e6c:	e0800503 	ldbu	r2,20(fp)
   42e70:	01000104 	movi	r4,4
   42e74:	108003cc 	andi	r2,r2,15
   42e78:	10bfffc4 	addi	r2,r2,-1
   42e7c:	10803fcc 	andi	r2,r2,255
   42e80:	20801636 	bltu	r4,r2,42edc <edid_decode_v14+0x264>
   42e84:	100490ba 	slli	r2,r2,2
   42e88:	00c00134 	movhi	r3,4
   42e8c:	18cba704 	addi	r3,r3,11932
   42e90:	10c5883a 	add	r2,r2,r3
   42e94:	10800017 	ldw	r2,0(r2)
   42e98:	1000683a 	jmp	r2
   42e9c:	00042eb0 	cmpltui	zero,zero,4282
   42ea0:	00042eb8 	rdprs	zero,zero,4282
   42ea4:	00042ec4 	movi	zero,4283
   42ea8:	00042ecc 	andi	zero,zero,4283
   42eac:	00042ed4 	movui	zero,4283
        case 1:
            edid->input.digital.interface = VII_DVI;
   42eb0:	00800044 	movi	r2,1
   42eb4:	00000106 	br	42ebc <edid_decode_v14+0x244>
            break;
        case 2:
            edid->input.digital.interface = VII_HDMI_A;
   42eb8:	00800084 	movi	r2,2
   42ebc:	80800a15 	stw	r2,40(r16)
            break;
   42ec0:	00003506 	br	42f98 <edid_decode_v14+0x320>
        case 3:
            edid->input.digital.interface = VII_HDMI_B;
   42ec4:	008000c4 	movi	r2,3
   42ec8:	003ffc06 	br	42ebc <__alt_data_end+0xfffdbdbc>
            break;
        case 4:
            edid->input.digital.interface = VII_MDDI;
   42ecc:	81000a15 	stw	r4,40(r16)
            break;
   42ed0:	00003106 	br	42f98 <edid_decode_v14+0x320>
        case 5:
            edid->input.digital.interface = VII_DISPLAYPORT;
   42ed4:	00800144 	movi	r2,5
   42ed8:	003ff806 	br	42ebc <__alt_data_end+0xfffdbdbc>
            break;
        case 0:
        default:
            edid->input.digital.interface = VII_NOT_DEFINED;
   42edc:	80000a15 	stw	zero,40(r16)
            break;
   42ee0:	00002d06 	br	42f98 <edid_decode_v14+0x320>
        }

    } else {

        edid->input.digital_if = 0;
   42ee4:	80000815 	stw	zero,32(r16)

        switch ((*c >> 5) & 0x3) {
   42ee8:	e0800503 	ldbu	r2,20(fp)
   42eec:	00c00084 	movi	r3,2
   42ef0:	1004d17a 	srli	r2,r2,5
   42ef4:	108000cc 	andi	r2,r2,3
   42ef8:	10c00626 	beq	r2,r3,42f14 <edid_decode_v14+0x29c>
   42efc:	00c000c4 	movi	r3,3
   42f00:	10c00426 	beq	r2,r3,42f14 <edid_decode_v14+0x29c>
   42f04:	00c00044 	movi	r3,1
   42f08:	10c00226 	beq	r2,r3,42f14 <edid_decode_v14+0x29c>
        case 0:
            edid->input.analog.level = VIL_0P700_0P300_1P000;
   42f0c:	80000915 	stw	zero,36(r16)
            break;
   42f10:	00000106 	br	42f18 <edid_decode_v14+0x2a0>
            break;
        case 2:
            edid->input.analog.level = VIL_1P000_0P400_1P400;
            break;
        case 3:
            edid->input.analog.level = VIL_0P700_0P000_0P700;
   42f14:	80800915 	stw	r2,36(r16)
            break;
        }

        if (*c & 0x10)
   42f18:	e0800503 	ldbu	r2,20(fp)
   42f1c:	1080040c 	andi	r2,r2,16
   42f20:	10000326 	beq	r2,zero,42f30 <edid_decode_v14+0x2b8>
            edid->input.analog.setup = VIS_BLANK_TO_BLACK_PEDESTAL;
   42f24:	00800044 	movi	r2,1
   42f28:	80800a15 	stw	r2,40(r16)
   42f2c:	00000106 	br	42f34 <edid_decode_v14+0x2bc>
        else
            edid->input.analog.setup = VIS_BLANK_LEVEL_EQ_BLACK_LEVEL;
   42f30:	80000a15 	stw	zero,40(r16)

        edid->input.analog.sync_type = 0;
   42f34:	80000b15 	stw	zero,44(r16)
        if (*c & 0x08)
   42f38:	e0800503 	ldbu	r2,20(fp)
   42f3c:	1080020c 	andi	r2,r2,8
   42f40:	10000226 	beq	r2,zero,42f4c <edid_decode_v14+0x2d4>
        	edid->input.analog.sync_type |= VIS_SEPERATE_H_V_SYNC;
   42f44:	00800044 	movi	r2,1
   42f48:	80800b15 	stw	r2,44(r16)
        if (*c & 0x04)
   42f4c:	e0800503 	ldbu	r2,20(fp)
   42f50:	1080010c 	andi	r2,r2,4
   42f54:	10000326 	beq	r2,zero,42f64 <edid_decode_v14+0x2ec>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_H_SYNC;
   42f58:	80800b17 	ldw	r2,44(r16)
   42f5c:	10800094 	ori	r2,r2,2
   42f60:	80800b15 	stw	r2,44(r16)
        if (*c & 0x02)
   42f64:	e0800503 	ldbu	r2,20(fp)
   42f68:	1080008c 	andi	r2,r2,2
   42f6c:	10000326 	beq	r2,zero,42f7c <edid_decode_v14+0x304>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_G_VIDEO;
   42f70:	80800b17 	ldw	r2,44(r16)
   42f74:	10800114 	ori	r2,r2,4
   42f78:	80800b15 	stw	r2,44(r16)

        if (*c & 0x01)
   42f7c:	e0800503 	ldbu	r2,20(fp)
   42f80:	1080004c 	andi	r2,r2,1
   42f84:	10000326 	beq	r2,zero,42f94 <edid_decode_v14+0x31c>
        	edid->input.analog.serrations = VISR_VSYNC;
   42f88:	00800044 	movi	r2,1
   42f8c:	80800c15 	stw	r2,48(r16)
   42f90:	00000106 	br	42f98 <edid_decode_v14+0x320>
        else
        	edid->input.analog.serrations = 0;
   42f94:	80000c15 	stw	zero,48(r16)
    }

    c = &edid_bin[0x15];

    edid->screen.size_defined = 0;
   42f98:	80000d15 	stw	zero,52(r16)
    edid->screen.size.horizontal = 0;
    edid->screen.size.vertical = 0;
    edid->screen.aspect_defined = 0;
   42f9c:	80000e15 	stw	zero,56(r16)
    edid->screen.aspect.landscape = 0.0f;
   42fa0:	80000f15 	stw	zero,60(r16)
    edid->screen.aspect.portrait = 0.0f;
   42fa4:	80001015 	stw	zero,64(r16)

    if (c[0] != 0) {
   42fa8:	e0800543 	ldbu	r2,21(fp)
   42fac:	10001426 	beq	r2,zero,43000 <edid_decode_v14+0x388>
        if (c[1] != 0) {
   42fb0:	e0c00583 	ldbu	r3,22(fp)
   42fb4:	00800044 	movi	r2,1
   42fb8:	18000526 	beq	r3,zero,42fd0 <edid_decode_v14+0x358>
        	edid->screen.size_defined = 1;
   42fbc:	80800d15 	stw	r2,52(r16)
        	edid->screen.size.horizontal = c[0];
   42fc0:	e0800543 	ldbu	r2,21(fp)
   42fc4:	80800f15 	stw	r2,60(r16)
        	edid->screen.size.vertical = c[1];
   42fc8:	e0800583 	ldbu	r2,22(fp)
   42fcc:	00001806 	br	43030 <edid_decode_v14+0x3b8>
        } else {
        	edid->screen.aspect_defined = 1;
   42fd0:	80800e15 	stw	r2,56(r16)
        	edid->screen.aspect.landscape = ((float)c[0] + 99.0f) * 0.01f;
   42fd4:	e1000543 	ldbu	r4,21(fp)
   42fd8:	0047b180 	call	47b18 <__floatunsisf>
   42fdc:	1009883a 	mov	r4,r2
   42fe0:	0150b1b4 	movhi	r5,17094
   42fe4:	0046dc40 	call	46dc4 <__addsf3>
   42fe8:	014f0934 	movhi	r5,15396
   42fec:	1009883a 	mov	r4,r2
   42ff0:	2975c284 	addi	r5,r5,-10486
   42ff4:	00476f40 	call	476f4 <__mulsf3>
   42ff8:	80800f15 	stw	r2,60(r16)
   42ffc:	00000d06 	br	43034 <edid_decode_v14+0x3bc>
        }
    } else if (c[1] != 0) {
   43000:	e0800583 	ldbu	r2,22(fp)
   43004:	10000b26 	beq	r2,zero,43034 <edid_decode_v14+0x3bc>
    	edid->screen.aspect_defined = 2;
   43008:	00800084 	movi	r2,2
   4300c:	80800e15 	stw	r2,56(r16)
    	edid->screen.aspect.portrait = 100.0f / ((float)c[1] + 99.0f);
   43010:	e1000583 	ldbu	r4,22(fp)
   43014:	0047b180 	call	47b18 <__floatunsisf>
   43018:	1009883a 	mov	r4,r2
   4301c:	0150b1b4 	movhi	r5,17094
   43020:	0046dc40 	call	46dc4 <__addsf3>
   43024:	0110b234 	movhi	r4,17096
   43028:	100b883a 	mov	r5,r2
   4302c:	00472a40 	call	472a4 <__divsf3>
   43030:	80801015 	stw	r2,64(r16)
    }

    // gamma
    c = &edid_bin[0x17];

    if (*c < 0xff)
   43034:	e10005c3 	ldbu	r4,23(fp)
   43038:	00803fc4 	movi	r2,255
   4303c:	20800926 	beq	r4,r2,43064 <edid_decode_v14+0x3ec>
        edid->gamma = ((float)(*c) + 100.0f) / 100.0f;
   43040:	0047b180 	call	47b18 <__floatunsisf>
   43044:	1009883a 	mov	r4,r2
   43048:	0150b234 	movhi	r5,17096
   4304c:	0046dc40 	call	46dc4 <__addsf3>
   43050:	1009883a 	mov	r4,r2
   43054:	0150b234 	movhi	r5,17096
   43058:	00472a40 	call	472a4 <__divsf3>
   4305c:	80801115 	stw	r2,68(r16)
   43060:	00000106 	br	43068 <edid_decode_v14+0x3f0>
    else
        edid->gamma = 0.0f;  // defined in an extension block
   43064:	80001115 	stw	zero,68(r16)

    // feature
    c = &edid_bin[0x18];

    edid->feature = 0;
   43068:	80001215 	stw	zero,72(r16)
    if (*c & 0x80)
   4306c:	e0800607 	ldb	r2,24(fp)
   43070:	1000020e 	bge	r2,zero,4307c <edid_decode_v14+0x404>
    	edid->feature |= FS_PM_STANDBY;
   43074:	00800044 	movi	r2,1
   43078:	80801215 	stw	r2,72(r16)
    if (*c & 0x40)
   4307c:	e0800603 	ldbu	r2,24(fp)
   43080:	1080100c 	andi	r2,r2,64
   43084:	10000326 	beq	r2,zero,43094 <edid_decode_v14+0x41c>
    	edid->feature |= FS_PM_SUSPEND;
   43088:	80801217 	ldw	r2,72(r16)
   4308c:	10800094 	ori	r2,r2,2
   43090:	80801215 	stw	r2,72(r16)
    if (*c & 0x20)
   43094:	e0800603 	ldbu	r2,24(fp)
   43098:	1080080c 	andi	r2,r2,32
   4309c:	10000326 	beq	r2,zero,430ac <edid_decode_v14+0x434>
    	edid->feature |= FS_PM_ACTIVE_OFF;
   430a0:	80801217 	ldw	r2,72(r16)
   430a4:	10800114 	ori	r2,r2,4
   430a8:	80801215 	stw	r2,72(r16)

    if (edid->input.digital_if) {
   430ac:	80800817 	ldw	r2,32(r16)
   430b0:	10001526 	beq	r2,zero,43108 <edid_decode_v14+0x490>
        switch ((*c >> 3) & 0x03) {
   430b4:	e0800603 	ldbu	r2,24(fp)
   430b8:	00c00084 	movi	r3,2
   430bc:	1004d0fa 	srli	r2,r2,3
   430c0:	108000cc 	andi	r2,r2,3
   430c4:	10c00a26 	beq	r2,r3,430f0 <edid_decode_v14+0x478>
   430c8:	00c000c4 	movi	r3,3
   430cc:	10c00b26 	beq	r2,r3,430fc <edid_decode_v14+0x484>
   430d0:	00c00044 	movi	r3,1
   430d4:	10c00326 	beq	r2,r3,430e4 <edid_decode_v14+0x46c>
        case 0:
        	edid->feature |= FS_CEF_RGB444;
   430d8:	80801217 	ldw	r2,72(r16)
   430dc:	10801014 	ori	r2,r2,64
   430e0:	00001906 	br	43148 <edid_decode_v14+0x4d0>
            break;
        case 1:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444);
   430e4:	80801217 	ldw	r2,72(r16)
   430e8:	10803014 	ori	r2,r2,192
   430ec:	00001606 	br	43148 <edid_decode_v14+0x4d0>
            break;
        case 2:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR422);
   430f0:	80801217 	ldw	r2,72(r16)
   430f4:	10805014 	ori	r2,r2,320
   430f8:	00001306 	br	43148 <edid_decode_v14+0x4d0>
            break;
        case 3:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444 | FS_CEF_YCBCR422);
   430fc:	80801217 	ldw	r2,72(r16)
   43100:	10807014 	ori	r2,r2,448
   43104:	00001006 	br	43148 <edid_decode_v14+0x4d0>
            break;
        }
    } else {
        switch ((*c >> 3) & 0x03) {
   43108:	e0800603 	ldbu	r2,24(fp)
   4310c:	00c00044 	movi	r3,1
   43110:	1004d0fa 	srli	r2,r2,3
   43114:	108000cc 	andi	r2,r2,3
   43118:	10c00926 	beq	r2,r3,43140 <edid_decode_v14+0x4c8>
   4311c:	10000526 	beq	r2,zero,43134 <edid_decode_v14+0x4bc>
   43120:	00c00084 	movi	r3,2
   43124:	10c0091e 	bne	r2,r3,4314c <edid_decode_v14+0x4d4>
            break;
        case 1:
        	edid->feature |= FS_DCT_RGB;
            break;
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
   43128:	80801217 	ldw	r2,72(r16)
   4312c:	10800814 	ori	r2,r2,32
   43130:	00000506 	br	43148 <edid_decode_v14+0x4d0>
            break;
        }
    } else {
        switch ((*c >> 3) & 0x03) {
        case 0:
        	edid->feature |= FS_DCT_MONO_GRAY;
   43134:	80801217 	ldw	r2,72(r16)
   43138:	10800214 	ori	r2,r2,8
   4313c:	00000206 	br	43148 <edid_decode_v14+0x4d0>
            break;
        case 1:
        	edid->feature |= FS_DCT_RGB;
   43140:	80801217 	ldw	r2,72(r16)
   43144:	10800414 	ori	r2,r2,16
            break;
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
   43148:	80801215 	stw	r2,72(r16)
            break;
        }
    }

    if (*c & 0x04)
   4314c:	e0800603 	ldbu	r2,24(fp)
   43150:	1080010c 	andi	r2,r2,4
   43154:	10000326 	beq	r2,zero,43164 <edid_decode_v14+0x4ec>
    	edid->feature |= FS_OF_SRGB_DEFAULT;
   43158:	80801217 	ldw	r2,72(r16)
   4315c:	10808014 	ori	r2,r2,512
   43160:	80801215 	stw	r2,72(r16)
    if (*c & 0x02)
   43164:	e0800603 	ldbu	r2,24(fp)
   43168:	1080008c 	andi	r2,r2,2
   4316c:	10000326 	beq	r2,zero,4317c <edid_decode_v14+0x504>
    	edid->feature |= FS_OF_NATIVE_PREFERRED;
   43170:	80801217 	ldw	r2,72(r16)
   43174:	10810014 	ori	r2,r2,1024
   43178:	80801215 	stw	r2,72(r16)
    if (*c & 0x01)
   4317c:	e0800603 	ldbu	r2,24(fp)
   43180:	1080004c 	andi	r2,r2,1
   43184:	10000326 	beq	r2,zero,43194 <edid_decode_v14+0x51c>
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;
   43188:	80801217 	ldw	r2,72(r16)
   4318c:	10820014 	ori	r2,r2,2048
   43190:	80801215 	stw	r2,72(r16)

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
   43194:	e0800643 	ldbu	r2,25(fp)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   43198:	047fe004 	movi	r17,-128
   4319c:	81001b04 	addi	r4,r16,108
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
   431a0:	1006d1ba 	srli	r3,r2,6
   431a4:	e08006c3 	ldbu	r2,27(fp)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   431a8:	0140b404 	movi	r5,720
   431ac:	01806404 	movi	r6,400
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
   431b0:	1085883a 	add	r2,r2,r2
   431b4:	1085883a 	add	r2,r2,r2
   431b8:	1884b03a 	or	r2,r3,r2
   431bc:	80801315 	stw	r2,76(r16)
    edid->chromaticity.r_y = ((u16)c[3] << 2) | (((u16)c[0] >> 4) & 0x3);
   431c0:	e0800643 	ldbu	r2,25(fp)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   431c4:	01c01184 	movi	r7,70

    // chromaticity coordinates
    c = &edid_bin[0x19];

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
    edid->chromaticity.r_y = ((u16)c[3] << 2) | (((u16)c[0] >> 4) & 0x3);
   431c8:	1004d13a 	srli	r2,r2,4
   431cc:	10c000cc 	andi	r3,r2,3
   431d0:	e0800703 	ldbu	r2,28(fp)
   431d4:	1085883a 	add	r2,r2,r2
   431d8:	1085883a 	add	r2,r2,r2
   431dc:	1884b03a 	or	r2,r3,r2
   431e0:	80801415 	stw	r2,80(r16)
    edid->chromaticity.g_x = ((u16)c[4] << 2) | (((u16)c[0] >> 2) & 0x3);
   431e4:	e0800643 	ldbu	r2,25(fp)
   431e8:	1004d0ba 	srli	r2,r2,2
   431ec:	10c000cc 	andi	r3,r2,3
   431f0:	e0800743 	ldbu	r2,29(fp)
   431f4:	1085883a 	add	r2,r2,r2
   431f8:	1085883a 	add	r2,r2,r2
   431fc:	1884b03a 	or	r2,r3,r2
   43200:	80801515 	stw	r2,84(r16)
    edid->chromaticity.g_y = ((u16)c[5] << 2) | ((u16)c[0] & 0x3);
   43204:	e0800643 	ldbu	r2,25(fp)
   43208:	10c000cc 	andi	r3,r2,3
   4320c:	e0800783 	ldbu	r2,30(fp)
   43210:	1085883a 	add	r2,r2,r2
   43214:	1085883a 	add	r2,r2,r2
   43218:	1884b03a 	or	r2,r3,r2
   4321c:	80801615 	stw	r2,88(r16)
    edid->chromaticity.b_x = ((u16)c[6] << 2) | (((u16)c[1] >> 6) & 0x3);
   43220:	e0800683 	ldbu	r2,26(fp)
   43224:	1006d1ba 	srli	r3,r2,6
   43228:	e08007c3 	ldbu	r2,31(fp)
   4322c:	1085883a 	add	r2,r2,r2
   43230:	1085883a 	add	r2,r2,r2
   43234:	1884b03a 	or	r2,r3,r2
   43238:	80801715 	stw	r2,92(r16)
    edid->chromaticity.b_y = ((u16)c[7] << 2) | (((u16)c[1] >> 4) & 0x3);
   4323c:	e0800683 	ldbu	r2,26(fp)
   43240:	1004d13a 	srli	r2,r2,4
   43244:	10c000cc 	andi	r3,r2,3
   43248:	e0800803 	ldbu	r2,32(fp)
   4324c:	1085883a 	add	r2,r2,r2
   43250:	1085883a 	add	r2,r2,r2
   43254:	1884b03a 	or	r2,r3,r2
   43258:	80801815 	stw	r2,96(r16)
    edid->chromaticity.w_x = ((u16)c[8] << 2) | (((u16)c[1] >> 2) & 0x3);
   4325c:	e0800683 	ldbu	r2,26(fp)
   43260:	1004d0ba 	srli	r2,r2,2
   43264:	10c000cc 	andi	r3,r2,3
   43268:	e0800843 	ldbu	r2,33(fp)
   4326c:	1085883a 	add	r2,r2,r2
   43270:	1085883a 	add	r2,r2,r2
   43274:	1884b03a 	or	r2,r3,r2
   43278:	80801915 	stw	r2,100(r16)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);
   4327c:	e0800683 	ldbu	r2,26(fp)
   43280:	10c000cc 	andi	r3,r2,3
   43284:	e0800883 	ldbu	r2,34(fp)
   43288:	1085883a 	add	r2,r2,r2
   4328c:	1085883a 	add	r2,r2,r2
   43290:	1884b03a 	or	r2,r3,r2
   43294:	80801a15 	stw	r2,104(r16)

    // established timings I/II
    c = &edid_bin[0x23];

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   43298:	e0c008c3 	ldbu	r3,35(fp)
   4329c:	88c6703a 	and	r3,r17,r3
   432a0:	d8c00015 	stw	r3,0(sp)
   432a4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[1], 720, 400, 88, c[0] & 0x40);
   432a8:	e0c008c3 	ldbu	r3,35(fp)
   432ac:	81002104 	addi	r4,r16,132
   432b0:	0140b404 	movi	r5,720
   432b4:	18c0100c 	andi	r3,r3,64
   432b8:	d8c00015 	stw	r3,0(sp)
   432bc:	01806404 	movi	r6,400
   432c0:	01c01604 	movi	r7,88
   432c4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[2], 640, 480, 60, c[0] & 0x20);
   432c8:	e0c008c3 	ldbu	r3,35(fp)
   432cc:	81002704 	addi	r4,r16,156
   432d0:	0140a004 	movi	r5,640
   432d4:	18c0080c 	andi	r3,r3,32
   432d8:	d8c00015 	stw	r3,0(sp)
   432dc:	01807804 	movi	r6,480
   432e0:	01c00f04 	movi	r7,60
   432e4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[3], 640, 480, 67, c[0] & 0x10);
   432e8:	e0c008c3 	ldbu	r3,35(fp)
   432ec:	81002d04 	addi	r4,r16,180
   432f0:	0140a004 	movi	r5,640
   432f4:	18c0040c 	andi	r3,r3,16
   432f8:	d8c00015 	stw	r3,0(sp)
   432fc:	01807804 	movi	r6,480
   43300:	01c010c4 	movi	r7,67
   43304:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[4], 640, 480, 72, c[0] & 0x08);
   43308:	e0c008c3 	ldbu	r3,35(fp)
   4330c:	81003304 	addi	r4,r16,204
   43310:	0140a004 	movi	r5,640
   43314:	18c0020c 	andi	r3,r3,8
   43318:	d8c00015 	stw	r3,0(sp)
   4331c:	01807804 	movi	r6,480
   43320:	01c01204 	movi	r7,72
   43324:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[5], 640, 480, 75, c[0] & 0x04);
   43328:	e0c008c3 	ldbu	r3,35(fp)
   4332c:	81003904 	addi	r4,r16,228
   43330:	0140a004 	movi	r5,640
   43334:	18c0010c 	andi	r3,r3,4
   43338:	d8c00015 	stw	r3,0(sp)
   4333c:	01807804 	movi	r6,480
   43340:	01c012c4 	movi	r7,75
   43344:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[6], 800, 600, 56, c[0] & 0x02);
   43348:	e0c008c3 	ldbu	r3,35(fp)
   4334c:	81003f04 	addi	r4,r16,252
   43350:	0140c804 	movi	r5,800
   43354:	18c0008c 	andi	r3,r3,2
   43358:	d8c00015 	stw	r3,0(sp)
   4335c:	01809604 	movi	r6,600
   43360:	01c00e04 	movi	r7,56
   43364:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[7], 800, 600, 60, c[0] & 0x01);
   43368:	e0c008c3 	ldbu	r3,35(fp)
   4336c:	81004504 	addi	r4,r16,276
   43370:	0140c804 	movi	r5,800
   43374:	18c0004c 	andi	r3,r3,1
   43378:	d8c00015 	stw	r3,0(sp)
   4337c:	01809604 	movi	r6,600
   43380:	01c00f04 	movi	r7,60
   43384:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[8], 800, 600, 72, c[1] & 0x80);
   43388:	e0800903 	ldbu	r2,36(fp)
   4338c:	81004b04 	addi	r4,r16,300
   43390:	0140c804 	movi	r5,800
   43394:	8884703a 	and	r2,r17,r2
   43398:	d8800015 	stw	r2,0(sp)
   4339c:	01809604 	movi	r6,600
   433a0:	01c01204 	movi	r7,72
   433a4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[9], 800, 600, 75, c[1] & 0x40);
   433a8:	e0800903 	ldbu	r2,36(fp)
   433ac:	81005104 	addi	r4,r16,324
   433b0:	0140c804 	movi	r5,800
   433b4:	1080100c 	andi	r2,r2,64
   433b8:	d8800015 	stw	r2,0(sp)
   433bc:	01809604 	movi	r6,600
   433c0:	01c012c4 	movi	r7,75
   433c4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[10], 823, 624, 75, c[1] & 0x20);
   433c8:	e0800903 	ldbu	r2,36(fp)
   433cc:	81005704 	addi	r4,r16,348
   433d0:	0140cdc4 	movi	r5,823
   433d4:	1080080c 	andi	r2,r2,32
   433d8:	d8800015 	stw	r2,0(sp)
   433dc:	01809c04 	movi	r6,624
   433e0:	01c012c4 	movi	r7,75
   433e4:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing_i(&edid->timing_1_2[11], 1024, 768, 87, c[1] & 0x10);
   433e8:	e0800903 	ldbu	r2,36(fp)
   433ec:	1080040c 	andi	r2,r2,16
	}
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   433f0:	10000a26 	beq	r2,zero,4341c <edid_decode_v14+0x7a4>
		et->valid = 1;
		et->width = x;
   433f4:	00c10004 	movi	r3,1024
   433f8:	80c05e15 	stw	r3,376(r16)
		et->height = y;
   433fc:	00c0c004 	movi	r3,768
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   43400:	00800044 	movi	r2,1
		et->width = x;
		et->height = y;
   43404:	80c05f15 	stw	r3,380(r16)
		et->refresh = r;
   43408:	00c015c4 	movi	r3,87
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   4340c:	80805d15 	stw	r2,372(r16)
		et->width = x;
		et->height = y;
		et->refresh = r;
   43410:	80c06015 	stw	r3,384(r16)
		et->interlaced = 1;
   43414:	80806115 	stw	r2,388(r16)
   43418:	00000506 	br	43430 <edid_decode_v14+0x7b8>
		et->rb = 0;
	} else {
		et->valid = 0;
   4341c:	80005d15 	stw	zero,372(r16)
		et->width = 0;
   43420:	80005e15 	stw	zero,376(r16)
		et->height = 0;
   43424:	80005f15 	stw	zero,380(r16)
		et->refresh = 0;
   43428:	80006015 	stw	zero,384(r16)
		et->interlaced = 0;
   4342c:	80006115 	stw	zero,388(r16)
		et->rb = 0;
   43430:	80006215 	stw	zero,392(r16)
	eb_establish_timing(&edid->timing_1_2[12], 1024, 768, 60, c[1] & 0x08);
   43434:	e0800903 	ldbu	r2,36(fp)
   43438:	81006304 	addi	r4,r16,396
   4343c:	01410004 	movi	r5,1024
   43440:	1080020c 	andi	r2,r2,8
   43444:	d8800015 	stw	r2,0(sp)
   43448:	0180c004 	movi	r6,768
   4344c:	01c00f04 	movi	r7,60
   43450:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[13], 1024, 768, 70, c[1] & 0x04);
   43454:	e0800903 	ldbu	r2,36(fp)
   43458:	81006904 	addi	r4,r16,420
   4345c:	01410004 	movi	r5,1024
   43460:	1080010c 	andi	r2,r2,4
   43464:	d8800015 	stw	r2,0(sp)
   43468:	0180c004 	movi	r6,768
   4346c:	01c01184 	movi	r7,70
   43470:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[14], 1024, 768, 75, c[1] & 0x02);
   43474:	e0800903 	ldbu	r2,36(fp)
   43478:	81006f04 	addi	r4,r16,444
   4347c:	01410004 	movi	r5,1024
   43480:	1080008c 	andi	r2,r2,2
   43484:	d8800015 	stw	r2,0(sp)
   43488:	0180c004 	movi	r6,768
   4348c:	01c012c4 	movi	r7,75
   43490:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[15], 1280, 1024, 75, c[1] & 0x01);
   43494:	e0800903 	ldbu	r2,36(fp)
   43498:	81007504 	addi	r4,r16,468
   4349c:	01414004 	movi	r5,1280
   434a0:	1080004c 	andi	r2,r2,1
   434a4:	d8800015 	stw	r2,0(sp)
   434a8:	01810004 	movi	r6,1024
   434ac:	01c012c4 	movi	r7,75
   434b0:	0040fec0 	call	40fec <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);
   434b4:	e0800943 	ldbu	r2,37(fp)
   434b8:	81007b04 	addi	r4,r16,492
   434bc:	01412004 	movi	r5,1152
   434c0:	1080200c 	andi	r2,r2,128
   434c4:	d8800015 	stw	r2,0(sp)
   434c8:	0180d984 	movi	r6,870
   434cc:	01c012c4 	movi	r7,75
   434d0:	0040fec0 	call	40fec <eb_establish_timing>

    // standard timings
    c = &edid_bin[0x26];
   434d4:	e1000984 	addi	r4,fp,38
   434d8:	e14009c4 	addi	r5,fp,39
   434dc:	81c08304 	addi	r7,r16,524
   434e0:	81808104 	addi	r6,r16,516
   434e4:	80808204 	addi	r2,r16,520
   434e8:	e3000d84 	addi	r12,fp,54
        if (*c == 0)
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;

		switch ((c[1] >> 6) & 0x3) {
   434ec:	02400044 	movi	r9,1
   434f0:	02800084 	movi	r10,2
   434f4:	02c000c4 	movi	r11,3

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
        if (*c == 0)
   434f8:	20c00003 	ldbu	r3,0(r4)
   434fc:	18001426 	beq	r3,zero,43550 <edid_decode_v14+0x8d8>
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;
   43500:	18c007c4 	addi	r3,r3,31
   43504:	180690fa 	slli	r3,r3,3
   43508:	30c00015 	stw	r3,0(r6)

		switch ((c[1] >> 6) & 0x3) {
   4350c:	28c00003 	ldbu	r3,0(r5)
   43510:	1806d1ba 	srli	r3,r3,6
   43514:	1a400726 	beq	r3,r9,43534 <edid_decode_v14+0x8bc>
   43518:	18000426 	beq	r3,zero,4352c <edid_decode_v14+0x8b4>
   4351c:	1a800726 	beq	r3,r10,4353c <edid_decode_v14+0x8c4>
   43520:	1ac0071e 	bne	r3,r11,43540 <edid_decode_v14+0x8c8>
			break;
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
			break;
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
   43524:	12c00015 	stw	r11,0(r2)
			break;
   43528:	00000506 	br	43540 <edid_decode_v14+0x8c8>

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;

		switch ((c[1] >> 6) & 0x3) {
		case 0:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_10;
   4352c:	10000015 	stw	zero,0(r2)
			break;
   43530:	00000306 	br	43540 <edid_decode_v14+0x8c8>
		case 1:
			edid->standard_timings[i].aspect_ratio = ST_AR_4_3;
   43534:	12400015 	stw	r9,0(r2)
			break;
   43538:	00000106 	br	43540 <edid_decode_v14+0x8c8>
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
   4353c:	12800015 	stw	r10,0(r2)
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
			break;
		}

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
   43540:	28c00003 	ldbu	r3,0(r5)
   43544:	18c00fcc 	andi	r3,r3,63
   43548:	18c00f04 	addi	r3,r3,60
   4354c:	38c00015 	stw	r3,0(r7)
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
   43550:	21000084 	addi	r4,r4,2
   43554:	29400084 	addi	r5,r5,2
   43558:	39c00304 	addi	r7,r7,12
   4355c:	31800304 	addi	r6,r6,12
   43560:	10800304 	addi	r2,r2,12
   43564:	233fe41e 	bne	r4,r12,434f8 <__alt_data_end+0xfffdc3f8>
   43568:	00c00104 	movi	r3,4
   4356c:	d8c00115 	stw	r3,4(sp)
   43570:	002b883a 	mov	r21,zero
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
			if ((c[17] & 0x61) == 0x20)
   43574:	05000804 	movi	r20,32
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
			if ((c[17] & 0x61) == 0x40)
   43578:	05801004 	movi	r22,64
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {

    	c = &edid_bin[0x36 + 18 * i];
   4357c:	ac4004a4 	muli	r17,r21,18
   43580:	adc15c24 	muli	r23,r21,1392
   43584:	8c400d84 	addi	r17,r17,54
   43588:	e463883a 	add	r17,fp,r17

        if ((c[0] != 0) || (c[1] != 0)) {
   4358c:	88800003 	ldbu	r2,0(r17)
   43590:	1000021e 	bne	r2,zero,4359c <edid_decode_v14+0x924>
   43594:	88800043 	ldbu	r2,1(r17)
   43598:	1000ba26 	beq	r2,zero,43884 <edid_decode_v14+0xc0c>
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;
   4359c:	85c5883a 	add	r2,r16,r23
   435a0:	10009915 	stw	zero,612(r2)

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   435a4:	89000043 	ldbu	r4,1(r17)
   435a8:	89400003 	ldbu	r5,0(r17)
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
   435ac:	1080a904 	addi	r2,r2,676
        if ((c[0] != 0) || (c[1] != 0)) {
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   435b0:	2008923a 	slli	r4,r4,8
   435b4:	2148b03a 	or	r4,r4,r5
   435b8:	2109c424 	muli	r4,r4,10000
   435bc:	113ff215 	stw	r4,-56(r2)
            edid->descriptors[i].detailed_timing.width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   435c0:	89000103 	ldbu	r4,4(r17)
   435c4:	89400083 	ldbu	r5,2(r17)
   435c8:	2008913a 	slli	r4,r4,4
   435cc:	2103c00c 	andi	r4,r4,3840
   435d0:	2148b03a 	or	r4,r4,r5
   435d4:	113ff315 	stw	r4,-52(r2)
            edid->descriptors[i].detailed_timing.height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   435d8:	890001c3 	ldbu	r4,7(r17)
   435dc:	89400143 	ldbu	r5,5(r17)
   435e0:	2008913a 	slli	r4,r4,4
   435e4:	2103c00c 	andi	r4,r4,3840
   435e8:	2148b03a 	or	r4,r4,r5
   435ec:	113ff415 	stw	r4,-48(r2)
            edid->descriptors[i].detailed_timing.h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   435f0:	89000103 	ldbu	r4,4(r17)
   435f4:	894000c3 	ldbu	r5,3(r17)
   435f8:	2008923a 	slli	r4,r4,8
   435fc:	2103c00c 	andi	r4,r4,3840
   43600:	2148b03a 	or	r4,r4,r5
   43604:	113ff515 	stw	r4,-44(r2)
            edid->descriptors[i].detailed_timing.v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   43608:	890001c3 	ldbu	r4,7(r17)
   4360c:	89400183 	ldbu	r5,6(r17)
   43610:	2008923a 	slli	r4,r4,8
   43614:	2103c00c 	andi	r4,r4,3840
   43618:	2148b03a 	or	r4,r4,r5
   4361c:	113ff615 	stw	r4,-40(r2)
            edid->descriptors[i].detailed_timing.h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   43620:	890002c3 	ldbu	r4,11(r17)
   43624:	89400203 	ldbu	r5,8(r17)
   43628:	2109883a 	add	r4,r4,r4
   4362c:	2109883a 	add	r4,r4,r4
   43630:	2100c00c 	andi	r4,r4,768
   43634:	2148b03a 	or	r4,r4,r5
   43638:	113ff715 	stw	r4,-36(r2)
            edid->descriptors[i].detailed_timing.v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   4363c:	890002c3 	ldbu	r4,11(r17)
   43640:	89400283 	ldbu	r5,10(r17)
   43644:	2109883a 	add	r4,r4,r4
   43648:	280ad13a 	srli	r5,r5,4
   4364c:	2109883a 	add	r4,r4,r4
   43650:	21000c0c 	andi	r4,r4,48
   43654:	2148b03a 	or	r4,r4,r5
   43658:	113ff815 	stw	r4,-32(r2)
            edid->descriptors[i].detailed_timing.h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   4365c:	890002c3 	ldbu	r4,11(r17)
   43660:	89400243 	ldbu	r5,9(r17)
   43664:	2008913a 	slli	r4,r4,4
   43668:	2100c00c 	andi	r4,r4,768
   4366c:	2148b03a 	or	r4,r4,r5
   43670:	113ff915 	stw	r4,-28(r2)
            edid->descriptors[i].detailed_timing.v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   43674:	890002c3 	ldbu	r4,11(r17)
   43678:	2008913a 	slli	r4,r4,4
   4367c:	21400c0c 	andi	r5,r4,48
   43680:	89000283 	ldbu	r4,10(r17)
   43684:	210003cc 	andi	r4,r4,15
   43688:	2908b03a 	or	r4,r5,r4
   4368c:	113ffa15 	stw	r4,-24(r2)
            edid->descriptors[i].detailed_timing.h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   43690:	89000383 	ldbu	r4,14(r17)
   43694:	89400303 	ldbu	r5,12(r17)
   43698:	2008913a 	slli	r4,r4,4
   4369c:	2103c00c 	andi	r4,r4,3840
   436a0:	2148b03a 	or	r4,r4,r5
   436a4:	113ffb15 	stw	r4,-20(r2)
            edid->descriptors[i].detailed_timing.v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   436a8:	89000383 	ldbu	r4,14(r17)
   436ac:	89400343 	ldbu	r5,13(r17)
   436b0:	2008923a 	slli	r4,r4,8
   436b4:	2103c00c 	andi	r4,r4,3840
   436b8:	2148b03a 	or	r4,r4,r5
   436bc:	113ffc15 	stw	r4,-16(r2)
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
   436c0:	890003c3 	ldbu	r4,15(r17)
   436c4:	113ffd15 	stw	r4,-12(r2)
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];
   436c8:	89000403 	ldbu	r4,16(r17)
   436cc:	113ffe15 	stw	r4,-8(r2)

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;
   436d0:	89000447 	ldb	r4,17(r17)
   436d4:	2008d7fa 	srli	r4,r4,31
   436d8:	113fff15 	stw	r4,-4(r2)

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
   436dc:	10000015 	stw	zero,0(r2)
			if ((c[17] & 0x61) == 0x20)
   436e0:	89000443 	ldbu	r4,17(r17)
   436e4:	2100184c 	andi	r4,r4,97
   436e8:	2500021e 	bne	r4,r20,436f4 <edid_decode_v14+0xa7c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   436ec:	01000084 	movi	r4,2
   436f0:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x40)
   436f4:	88800443 	ldbu	r2,17(r17)
   436f8:	1080184c 	andi	r2,r2,97
   436fc:	1580051e 	bne	r2,r22,43714 <edid_decode_v14+0xa9c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   43700:	85c5883a 	add	r2,r16,r23
   43704:	1080a904 	addi	r2,r2,676
   43708:	11000017 	ldw	r4,0(r2)
   4370c:	21000114 	ori	r4,r4,4
   43710:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x21)
   43714:	88800443 	ldbu	r2,17(r17)
   43718:	00c00844 	movi	r3,33
   4371c:	1080184c 	andi	r2,r2,97
   43720:	10c0051e 	bne	r2,r3,43738 <edid_decode_v14+0xac0>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   43724:	85c5883a 	add	r2,r16,r23
   43728:	1080a904 	addi	r2,r2,676
   4372c:	11000017 	ldw	r4,0(r2)
   43730:	21000214 	ori	r4,r4,8
   43734:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x41)
   43738:	88800443 	ldbu	r2,17(r17)
   4373c:	01001044 	movi	r4,65
   43740:	1080184c 	andi	r2,r2,97
   43744:	1100051e 	bne	r2,r4,4375c <edid_decode_v14+0xae4>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   43748:	85c5883a 	add	r2,r16,r23
   4374c:	1080a904 	addi	r2,r2,676
   43750:	11000017 	ldw	r4,0(r2)
   43754:	21000414 	ori	r4,r4,16
   43758:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x60)
   4375c:	88800443 	ldbu	r2,17(r17)
   43760:	01001804 	movi	r4,96
   43764:	1080184c 	andi	r2,r2,97
   43768:	1100051e 	bne	r2,r4,43780 <edid_decode_v14+0xb08>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
   4376c:	85c5883a 	add	r2,r16,r23
   43770:	1080a904 	addi	r2,r2,676
   43774:	11000017 	ldw	r4,0(r2)
   43778:	21000814 	ori	r4,r4,32
   4377c:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x61)
   43780:	88800443 	ldbu	r2,17(r17)
   43784:	01001844 	movi	r4,97
   43788:	1080184c 	andi	r2,r2,97
   4378c:	1100051e 	bne	r2,r4,437a4 <edid_decode_v14+0xb2c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   43790:	85c5883a 	add	r2,r16,r23
   43794:	1080a904 	addi	r2,r2,676
   43798:	11000017 	ldw	r4,0(r2)
   4379c:	21001014 	ori	r4,r4,64
   437a0:	11000015 	stw	r4,0(r2)

			edid->descriptors[i].detailed_timing.sync = 0;
   437a4:	85c5883a 	add	r2,r16,r23
   437a8:	1080aa04 	addi	r2,r2,680
   437ac:	10000015 	stw	zero,0(r2)
            if (c[17] & 0x10) {
   437b0:	89000443 	ldbu	r4,17(r17)
   437b4:	2140040c 	andi	r5,r4,16
   437b8:	28001d26 	beq	r5,zero,43830 <edid_decode_v14+0xbb8>
                if (c[17] & 0x08) {
   437bc:	2100020c 	andi	r4,r4,8
   437c0:	20001526 	beq	r4,zero,43818 <edid_decode_v14+0xba0>
                	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_SYNC;
   437c4:	01002004 	movi	r4,128
   437c8:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x04)
   437cc:	89000443 	ldbu	r4,17(r17)
   437d0:	2100010c 	andi	r4,r4,4
   437d4:	20000226 	beq	r4,zero,437e0 <edid_decode_v14+0xb68>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
   437d8:	0100a004 	movi	r4,640
   437dc:	00000106 	br	437e4 <edid_decode_v14+0xb6c>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;
   437e0:	01006004 	movi	r4,384
   437e4:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x02)
   437e8:	88800443 	ldbu	r2,17(r17)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
   437ec:	85c7883a 	add	r3,r16,r23
   437f0:	18c0aa04 	addi	r3,r3,680
                	if (c[17] & 0x04)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;

                	if (c[17] & 0x02)
   437f4:	1080008c 	andi	r2,r2,2
   437f8:	10000326 	beq	r2,zero,43808 <edid_decode_v14+0xb90>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
   437fc:	18800017 	ldw	r2,0(r3)
   43800:	10820014 	ori	r2,r2,2048
   43804:	00000206 	br	43810 <edid_decode_v14+0xb98>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_N;
   43808:	18800017 	ldw	r2,0(r3)
   4380c:	10810014 	ori	r2,r2,1024
   43810:	18800015 	stw	r2,0(r3)
   43814:	00042a06 	br	448c0 <edid_decode_v14+0x1c48>
                } else {
                	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SYNC;
   43818:	15000015 	stw	r20,0(r2)
                	if (c[17] & 0x04)
   4381c:	88c00443 	ldbu	r3,17(r17)
   43820:	18c0010c 	andi	r3,r3,4
   43824:	18042626 	beq	r3,zero,448c0 <edid_decode_v14+0x1c48>
                    	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SERRATION;
   43828:	00c01804 	movi	r3,96
   4382c:	00001106 	br	43874 <edid_decode_v14+0xbfc>
                }
            } else {
            	if (c[17] & 0x80) {
   43830:	21003fcc 	andi	r4,r4,255
   43834:	2100201c 	xori	r4,r4,128
   43838:	213fe004 	addi	r4,r4,-128
   4383c:	20000f0e 	bge	r4,zero,4387c <edid_decode_v14+0xc04>
            		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_COMPOSITE_SYNC;
   43840:	00c00084 	movi	r3,2
   43844:	10c00015 	stw	r3,0(r2)
            		if (c[17] & 0x40) {
   43848:	88c00443 	ldbu	r3,17(r17)
   4384c:	18c0100c 	andi	r3,r3,64
   43850:	18041b26 	beq	r3,zero,448c0 <edid_decode_v14+0x1c48>
                		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION;
   43854:	00c00184 	movi	r3,6
   43858:	10c00015 	stw	r3,0(r2)
                		if (c[17] & 0x20)
   4385c:	88c00443 	ldbu	r3,17(r17)
   43860:	18c0080c 	andi	r3,r3,32
   43864:	18000226 	beq	r3,zero,43870 <edid_decode_v14+0xbf8>
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   43868:	00c00584 	movi	r3,22
   4386c:	00000106 	br	43874 <edid_decode_v14+0xbfc>
                		else
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_G;
   43870:	00c00384 	movi	r3,14
   43874:	10c00015 	stw	r3,0(r2)
   43878:	00041106 	br	448c0 <edid_decode_v14+0x1c48>
            		}
            	} else {
            		edid->descriptors[i].detailed_timing.sync |= A_COMPOSITE_SYNC;
   4387c:	00c00044 	movi	r3,1
   43880:	003ffc06 	br	43874 <__alt_data_end+0xfffdc774>
            }

        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;
   43884:	85e5883a 	add	r18,r16,r23
   43888:	04c00044 	movi	r19,1
   4388c:	94c09915 	stw	r19,612(r18)

        	switch (c[3]) {  // tag
   43890:	888000c3 	ldbu	r2,3(r17)
   43894:	01003e84 	movi	r4,250
   43898:	1101b826 	beq	r2,r4,43f7c <edid_decode_v14+0x1304>
   4389c:	20802d36 	bltu	r4,r2,43954 <edid_decode_v14+0xcdc>
   438a0:	01003dc4 	movi	r4,247
   438a4:	11023b26 	beq	r2,r4,44194 <edid_decode_v14+0x151c>
   438a8:	20800436 	bltu	r4,r2,438bc <edid_decode_v14+0xc44>
   438ac:	00c00404 	movi	r3,16
   438b0:	10c4031e 	bne	r2,r3,448c0 <edid_decode_v14+0x1c48>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
                break;

            case 0x10:
            	edid->descriptors[i].tag = DTAG_DUMMY;
   438b4:	90809a15 	stw	r2,616(r18)
                break;
   438b8:	00040106 	br	448c0 <edid_decode_v14+0x1c48>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
   438bc:	01003e04 	movi	r4,248
   438c0:	1101d226 	beq	r2,r4,4400c <edid_decode_v14+0x1394>
   438c4:	00c03e44 	movi	r3,249
   438c8:	10c3fd1e 	bne	r2,r3,448c0 <edid_decode_v14+0x1c48>

                break;

            case 0xf9:
            	// display color management data
            	edid->descriptors[i].tag = DTAG_DCM_DATA;
   438cc:	90809a15 	stw	r2,616(r18)

            	edid->descriptors[i].dcm.ver = c[5];
   438d0:	88800143 	ldbu	r2,5(r17)
   438d4:	9080be15 	stw	r2,760(r18)
            	edid->descriptors[i].dcm.r_a2 = ((u32)c[9] << 8) | (u32)c[8];
   438d8:	88800243 	ldbu	r2,9(r17)
   438dc:	1006923a 	slli	r3,r2,8
   438e0:	88800203 	ldbu	r2,8(r17)
   438e4:	1884b03a 	or	r2,r3,r2
   438e8:	9080bf15 	stw	r2,764(r18)
            	edid->descriptors[i].dcm.r_a3 = ((u32)c[7] << 8) | (u32)c[6];
   438ec:	888001c3 	ldbu	r2,7(r17)
   438f0:	1006923a 	slli	r3,r2,8
   438f4:	88800183 	ldbu	r2,6(r17)
   438f8:	1884b03a 	or	r2,r3,r2
   438fc:	9080c015 	stw	r2,768(r18)
            	edid->descriptors[i].dcm.g_a2 = ((u32)c[13] << 8) | (u32)c[12];
   43900:	88800343 	ldbu	r2,13(r17)
   43904:	1006923a 	slli	r3,r2,8
   43908:	88800303 	ldbu	r2,12(r17)
   4390c:	1884b03a 	or	r2,r3,r2
   43910:	9080c115 	stw	r2,772(r18)
            	edid->descriptors[i].dcm.g_a3 = ((u32)c[11] << 8) | (u32)c[10];
   43914:	888002c3 	ldbu	r2,11(r17)
   43918:	1006923a 	slli	r3,r2,8
   4391c:	88800283 	ldbu	r2,10(r17)
   43920:	1884b03a 	or	r2,r3,r2
   43924:	9080c215 	stw	r2,776(r18)
            	edid->descriptors[i].dcm.b_a2 = ((u32)c[17] << 8) | (u32)c[16];
   43928:	88800443 	ldbu	r2,17(r17)
   4392c:	1006923a 	slli	r3,r2,8
   43930:	88800403 	ldbu	r2,16(r17)
   43934:	1884b03a 	or	r2,r3,r2
   43938:	9080c315 	stw	r2,780(r18)
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];
   4393c:	888003c3 	ldbu	r2,15(r17)
   43940:	1006923a 	slli	r3,r2,8
   43944:	88800383 	ldbu	r2,14(r17)
   43948:	1884b03a 	or	r2,r3,r2
   4394c:	9080c415 	stw	r2,784(r18)

            	break;
   43950:	0003db06 	br	448c0 <edid_decode_v14+0x1c48>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
   43954:	01003f44 	movi	r4,253
   43958:	11003926 	beq	r2,r4,43a40 <edid_decode_v14+0xdc8>
   4395c:	20801036 	bltu	r4,r2,439a0 <edid_decode_v14+0xd28>
   43960:	01003ec4 	movi	r4,251
   43964:	11014226 	beq	r2,r4,43e70 <edid_decode_v14+0x11f8>
   43968:	01003f04 	movi	r4,252
   4396c:	1103d41e 	bne	r2,r4,448c0 <edid_decode_v14+0x1c48>
                break;

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
            	edid->descriptors[i].prod_name[18] = 0;
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
   43970:	b9009b04 	addi	r4,r23,620
   43974:	810f883a 	add	r7,r16,r4
   43978:	3809883a 	mov	r4,r7
   4397c:	89400144 	addi	r5,r17,5
                }

                break;

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
   43980:	90809a15 	stw	r2,616(r18)
            	edid->descriptors[i].prod_name[18] = 0;
   43984:	90009f85 	stb	zero,638(r18)
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
   43988:	01800344 	movi	r6,13
   4398c:	0048d300 	call	48d30 <memcpy>
   43990:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
   43994:	01400284 	movi	r5,10
   43998:	b8c09e44 	addi	r3,r23,633
   4399c:	00013006 	br	43e60 <edid_decode_v14+0x11e8>
        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
   439a0:	01003f84 	movi	r4,254
   439a4:	11001426 	beq	r2,r4,439f8 <edid_decode_v14+0xd80>
   439a8:	01003fc4 	movi	r4,255
   439ac:	1103c41e 	bne	r2,r4,448c0 <edid_decode_v14+0x1c48>
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
            	edid->descriptors[i].serial[18] = 0;
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
   439b0:	b9009b04 	addi	r4,r23,620
   439b4:	810f883a 	add	r7,r16,r4
   439b8:	3809883a 	mov	r4,r7
   439bc:	89400144 	addi	r5,r17,5

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;

        	switch (c[3]) {  // tag
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
   439c0:	90809a15 	stw	r2,616(r18)
            	edid->descriptors[i].serial[18] = 0;
   439c4:	90009f85 	stb	zero,638(r18)
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
   439c8:	01800344 	movi	r6,13
   439cc:	0048d300 	call	48d30 <memcpy>
   439d0:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].serial[s] == 0x0a) {
   439d4:	01400284 	movi	r5,10
   439d8:	b8c09e44 	addi	r3,r23,633
   439dc:	20800007 	ldb	r2,0(r4)
   439e0:	1140011e 	bne	r2,r5,439e8 <edid_decode_v14+0xd70>
                    	edid->descriptors[i].serial[s] = 0;
   439e4:	20000005 	stb	zero,0(r4)
   439e8:	21000044 	addi	r4,r4,1
   439ec:	20c5c83a 	sub	r2,r4,r3
        	switch (c[3]) {  // tag
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
            	edid->descriptors[i].serial[18] = 0;
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   439f0:	143ffa1e 	bne	r2,r16,439dc <__alt_data_end+0xfffdc8dc>
   439f4:	0003b206 	br	448c0 <edid_decode_v14+0x1c48>
                break;

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
            	edid->descriptors[i].string[18] = 0;
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
   439f8:	b9009b04 	addi	r4,r23,620
   439fc:	810f883a 	add	r7,r16,r4
   43a00:	3809883a 	mov	r4,r7
   43a04:	89400144 	addi	r5,r17,5
                    }
                }
                break;

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
   43a08:	90809a15 	stw	r2,616(r18)
            	edid->descriptors[i].string[18] = 0;
   43a0c:	90009f85 	stb	zero,638(r18)
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
   43a10:	01800344 	movi	r6,13
   43a14:	0048d300 	call	48d30 <memcpy>
   43a18:	1009883a 	mov	r4,r2
                for (s = 0; s < 18-5; ++s) {
                    if (edid->descriptors[i].string[s] == 0x0a) {
   43a1c:	01400284 	movi	r5,10
   43a20:	b8c09e44 	addi	r3,r23,633
   43a24:	20800007 	ldb	r2,0(r4)
   43a28:	1140011e 	bne	r2,r5,43a30 <edid_decode_v14+0xdb8>
                    	edid->descriptors[i].string[s] = 0;
   43a2c:	20000005 	stb	zero,0(r4)
   43a30:	21000044 	addi	r4,r4,1
   43a34:	20c5c83a 	sub	r2,r4,r3

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
            	edid->descriptors[i].string[18] = 0;
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   43a38:	143ffa1e 	bne	r2,r16,43a24 <__alt_data_end+0xfffdc924>
   43a3c:	0003a006 	br	448c0 <edid_decode_v14+0x1c48>
                    }
                }
                break;

            case 0xfd:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
   43a40:	90809a15 	stw	r2,616(r18)

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;
   43a44:	94809c04 	addi	r18,r18,624
   43a48:	90000015 	stw	zero,0(r18)

            	switch (c[4] & 0xfc) {
   43a4c:	88800103 	ldbu	r2,4(r17)
   43a50:	01000204 	movi	r4,8
   43a54:	10803f0c 	andi	r2,r2,252
   43a58:	11000526 	beq	r2,r4,43a70 <edid_decode_v14+0xdf8>
   43a5c:	01000304 	movi	r4,12
   43a60:	1100041e 	bne	r2,r4,43a74 <edid_decode_v14+0xdfc>
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
                    break;
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
   43a64:	00800084 	movi	r2,2
   43a68:	90800015 	stw	r2,0(r18)
                    break;
   43a6c:	00000106 	br	43a74 <edid_decode_v14+0xdfc>

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;

            	switch (c[4] & 0xfc) {
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
   43a70:	94c00015 	stw	r19,0(r18)
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
                    break;
                }

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;
   43a74:	85c5883a 	add	r2,r16,r23
   43a78:	10809b04 	addi	r2,r2,620
   43a7c:	10000015 	stw	zero,0(r2)

                switch (c[4] & 0xf3) {
   43a80:	89000103 	ldbu	r4,4(r17)
   43a84:	01400084 	movi	r5,2
   43a88:	21003ccc 	andi	r4,r4,243
   43a8c:	21400426 	beq	r4,r5,43aa0 <edid_decode_v14+0xe28>
   43a90:	018000c4 	movi	r6,3
   43a94:	2180041e 	bne	r4,r6,43aa8 <edid_decode_v14+0xe30>
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
                    break;
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
   43a98:	11400015 	stw	r5,0(r2)
                    break;
   43a9c:	00000206 	br	43aa8 <edid_decode_v14+0xe30>

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;

                switch (c[4] & 0xf3) {
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
   43aa0:	01000044 	movi	r4,1
   43aa4:	11000015 	stw	r4,0(r2)
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
                    break;
                }

                if (c[5] != 0) {
   43aa8:	88800143 	ldbu	r2,5(r17)
   43aac:	10000a26 	beq	r2,zero,43ad8 <edid_decode_v14+0xe60>
					if ((c[4] & 0x03) == 0x03)
   43ab0:	89000103 	ldbu	r4,4(r17)
   43ab4:	014000c4 	movi	r5,3
   43ab8:	210000cc 	andi	r4,r4,3
   43abc:	2140031e 	bne	r4,r5,43acc <edid_decode_v14+0xe54>
						edid->descriptors[i].range_limits.v_min = c[5] + 255;
   43ac0:	85c9883a 	add	r4,r16,r23
   43ac4:	10803fc4 	addi	r2,r2,255
   43ac8:	00000106 	br	43ad0 <edid_decode_v14+0xe58>
					else
						edid->descriptors[i].range_limits.v_min = c[5];
   43acc:	85c9883a 	add	r4,r16,r23
   43ad0:	20809d15 	stw	r2,628(r4)
   43ad4:	00000206 	br	43ae0 <edid_decode_v14+0xe68>
                } else {
                	edid->descriptors[i].range_limits.v_min = 0;
   43ad8:	85c5883a 	add	r2,r16,r23
   43adc:	10009d15 	stw	zero,628(r2)
                }

                if (c[6] != 0) {
   43ae0:	88800183 	ldbu	r2,6(r17)
   43ae4:	10000926 	beq	r2,zero,43b0c <edid_decode_v14+0xe94>
					if ((c[4] & 0x02) == 0x02)
   43ae8:	89000103 	ldbu	r4,4(r17)
   43aec:	2100008c 	andi	r4,r4,2
   43af0:	20000326 	beq	r4,zero,43b00 <edid_decode_v14+0xe88>
						edid->descriptors[i].range_limits.v_max = c[6] + 255;
   43af4:	85c9883a 	add	r4,r16,r23
   43af8:	10803fc4 	addi	r2,r2,255
   43afc:	00000106 	br	43b04 <edid_decode_v14+0xe8c>
					else
						edid->descriptors[i].range_limits.v_max = c[6];
   43b00:	85c9883a 	add	r4,r16,r23
   43b04:	20809e15 	stw	r2,632(r4)
   43b08:	00000206 	br	43b14 <edid_decode_v14+0xe9c>
                } else {
                	edid->descriptors[i].range_limits.v_max = 0;
   43b0c:	85c5883a 	add	r2,r16,r23
   43b10:	10009e15 	stw	zero,632(r2)
                }

                if (c[7] != 0) {
   43b14:	888001c3 	ldbu	r2,7(r17)
   43b18:	10000a26 	beq	r2,zero,43b44 <edid_decode_v14+0xecc>
					if ((c[4] & 0x0c) == 0x0c)
   43b1c:	89000103 	ldbu	r4,4(r17)
   43b20:	01400304 	movi	r5,12
   43b24:	2100030c 	andi	r4,r4,12
   43b28:	2140031e 	bne	r4,r5,43b38 <edid_decode_v14+0xec0>
						edid->descriptors[i].range_limits.h_min = c[7] + 255;
   43b2c:	85c9883a 	add	r4,r16,r23
   43b30:	10803fc4 	addi	r2,r2,255
   43b34:	00000106 	br	43b3c <edid_decode_v14+0xec4>
					else
						edid->descriptors[i].range_limits.h_min = c[7];
   43b38:	85c9883a 	add	r4,r16,r23
   43b3c:	20809f15 	stw	r2,636(r4)
   43b40:	00000206 	br	43b4c <edid_decode_v14+0xed4>
                } else {
                	edid->descriptors[i].range_limits.h_min = 0;
   43b44:	85c5883a 	add	r2,r16,r23
   43b48:	10009f15 	stw	zero,636(r2)
                }

                if (c[8] != 0) {
   43b4c:	88800203 	ldbu	r2,8(r17)
   43b50:	10000926 	beq	r2,zero,43b78 <edid_decode_v14+0xf00>
					if ((c[4] & 0x08) == 0x08)
   43b54:	89000103 	ldbu	r4,4(r17)
   43b58:	2100020c 	andi	r4,r4,8
   43b5c:	20000326 	beq	r4,zero,43b6c <edid_decode_v14+0xef4>
						edid->descriptors[i].range_limits.h_max = c[8] + 255;
   43b60:	85c9883a 	add	r4,r16,r23
   43b64:	10803fc4 	addi	r2,r2,255
   43b68:	00000106 	br	43b70 <edid_decode_v14+0xef8>
					else
						edid->descriptors[i].range_limits.h_max = c[8];
   43b6c:	85c9883a 	add	r4,r16,r23
   43b70:	2080a015 	stw	r2,640(r4)
   43b74:	00000206 	br	43b80 <edid_decode_v14+0xf08>
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
   43b78:	85c5883a 	add	r2,r16,r23
   43b7c:	1000a015 	stw	zero,640(r2)
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
   43b80:	88800243 	ldbu	r2,9(r17)
   43b84:	85e5883a 	add	r18,r16,r23

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
   43b88:	9100a204 	addi	r4,r18,648
						edid->descriptors[i].range_limits.h_max = c[8];
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
   43b8c:	108002a4 	muli	r2,r2,10
   43b90:	9080a115 	stw	r2,644(r18)

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
   43b94:	20000015 	stw	zero,0(r4)

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   43b98:	88800283 	ldbu	r2,10(r17)
   43b9c:	10034826 	beq	r2,zero,448c0 <edid_decode_v14+0x1c48>

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   43ba0:	01400104 	movi	r5,4
   43ba4:	1140931e 	bne	r2,r5,43df4 <edid_decode_v14+0x117c>
   43ba8:	81401217 	ldw	r5,72(r16)
   43bac:	2942000c 	andi	r5,r5,2048
   43bb0:	28034326 	beq	r5,zero,448c0 <edid_decode_v14+0x1c48>

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;
   43bb4:	20800015 	stw	r2,0(r4)

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
   43bb8:	888002c3 	ldbu	r2,11(r17)
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
   43bbc:	94c0a504 	addi	r19,r18,660
   43bc0:	9480a604 	addi	r18,r18,664

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
   43bc4:	1004d13a 	srli	r2,r2,4
   43bc8:	90bffd15 	stw	r2,-12(r18)
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;
   43bcc:	888002c3 	ldbu	r2,11(r17)
   43bd0:	108003cc 	andi	r2,r2,15
   43bd4:	90bffe15 	stw	r2,-8(r18)

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
   43bd8:	89000303 	ldbu	r4,12(r17)
   43bdc:	2008d0ba 	srli	r4,r4,2
   43be0:	0047b180 	call	47b18 <__floatunsisf>
   43be4:	1009883a 	mov	r4,r2
   43be8:	014fa034 	movhi	r5,16000
   43bec:	00476f40 	call	476f4 <__mulsf3>
   43bf0:	98800015 	stw	r2,0(r19)
                    if (c[13] != 0)
   43bf4:	88800343 	ldbu	r2,13(r17)
   43bf8:	10000726 	beq	r2,zero,43c18 <edid_decode_v14+0xfa0>
                    	edid->descriptors[i].range_limits.cvt.line_max = ((((u32)c[12] & 0x03) << 8) | (u32)c[13]) * 8;
   43bfc:	89000303 	ldbu	r4,12(r17)
   43c00:	210000cc 	andi	r4,r4,3
   43c04:	2008923a 	slli	r4,r4,8
   43c08:	2084b03a 	or	r2,r4,r2
   43c0c:	100490fa 	slli	r2,r2,3
   43c10:	90800015 	stw	r2,0(r18)
   43c14:	00000106 	br	43c1c <edid_decode_v14+0xfa4>
                    else
                    	edid->descriptors[i].range_limits.cvt.line_max = 0;
   43c18:	90000015 	stw	zero,0(r18)

                    edid->descriptors[i].range_limits.cvt.aspect_ratios = 0;
   43c1c:	85c5883a 	add	r2,r16,r23
   43c20:	1080a704 	addi	r2,r2,668
   43c24:	10000015 	stw	zero,0(r2)
                    if (c[14] & 0x80)
   43c28:	89000387 	ldb	r4,14(r17)
   43c2c:	2000020e 	bge	r4,zero,43c38 <edid_decode_v14+0xfc0>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_4_3;
   43c30:	01000044 	movi	r4,1
   43c34:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x40)
   43c38:	88800383 	ldbu	r2,14(r17)
   43c3c:	1080100c 	andi	r2,r2,64
   43c40:	10000526 	beq	r2,zero,43c58 <edid_decode_v14+0xfe0>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_9;
   43c44:	85c5883a 	add	r2,r16,r23
   43c48:	1080a704 	addi	r2,r2,668
   43c4c:	11000017 	ldw	r4,0(r2)
   43c50:	21000094 	ori	r4,r4,2
   43c54:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x20)
   43c58:	88800383 	ldbu	r2,14(r17)
   43c5c:	1080080c 	andi	r2,r2,32
   43c60:	10000526 	beq	r2,zero,43c78 <edid_decode_v14+0x1000>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_10;
   43c64:	85c5883a 	add	r2,r16,r23
   43c68:	1080a704 	addi	r2,r2,668
   43c6c:	11000017 	ldw	r4,0(r2)
   43c70:	21000114 	ori	r4,r4,4
   43c74:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x10)
   43c78:	88800383 	ldbu	r2,14(r17)
   43c7c:	1080040c 	andi	r2,r2,16
   43c80:	10000526 	beq	r2,zero,43c98 <edid_decode_v14+0x1020>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
   43c84:	85c5883a 	add	r2,r16,r23
   43c88:	1080a704 	addi	r2,r2,668
   43c8c:	11000017 	ldw	r4,0(r2)
   43c90:	21000214 	ori	r4,r4,8
   43c94:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x08)
   43c98:	88800383 	ldbu	r2,14(r17)
   43c9c:	1080020c 	andi	r2,r2,8
   43ca0:	10000526 	beq	r2,zero,43cb8 <edid_decode_v14+0x1040>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;
   43ca4:	85c5883a 	add	r2,r16,r23
   43ca8:	1080a704 	addi	r2,r2,668
   43cac:	11000017 	ldw	r4,0(r2)
   43cb0:	21000414 	ori	r4,r4,16
   43cb4:	11000015 	stw	r4,0(r2)

                    switch (c[15] & 0xe0) {
   43cb8:	888003c3 	ldbu	r2,15(r17)
   43cbc:	1080380c 	andi	r2,r2,224
   43cc0:	15801026 	beq	r2,r22,43d04 <edid_decode_v14+0x108c>
   43cc4:	b0800536 	bltu	r22,r2,43cdc <edid_decode_v14+0x1064>
   43cc8:	10000b26 	beq	r2,zero,43cf8 <edid_decode_v14+0x1080>
   43ccc:	1500141e 	bne	r2,r20,43d20 <edid_decode_v14+0x10a8>
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
   43cd0:	85c5883a 	add	r2,r16,r23
   43cd4:	01000084 	movi	r4,2
   43cd8:	00000c06 	br	43d0c <edid_decode_v14+0x1094>
                    if (c[14] & 0x10)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
                    if (c[14] & 0x08)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;

                    switch (c[15] & 0xe0) {
   43cdc:	01001804 	movi	r4,96
   43ce0:	11000c26 	beq	r2,r4,43d14 <edid_decode_v14+0x109c>
   43ce4:	01002004 	movi	r4,128
   43ce8:	11000d1e 	bne	r2,r4,43d20 <edid_decode_v14+0x10a8>
                        break;
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
                        break;
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
   43cec:	85c5883a 	add	r2,r16,r23
   43cf0:	01000404 	movi	r4,16
   43cf4:	00000506 	br	43d0c <edid_decode_v14+0x1094>
                    if (c[14] & 0x08)
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;

                    switch (c[15] & 0xe0) {
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
   43cf8:	85c5883a 	add	r2,r16,r23
   43cfc:	01000044 	movi	r4,1
   43d00:	00000206 	br	43d0c <edid_decode_v14+0x1094>
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
                        break;
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
   43d04:	85c5883a 	add	r2,r16,r23
   43d08:	01000104 	movi	r4,4
                    switch (c[15] & 0xe0) {
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
                        break;
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
   43d0c:	1100a815 	stw	r4,672(r2)
                        break;
   43d10:	00000506 	br	43d28 <edid_decode_v14+0x10b0>
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
                        break;
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
   43d14:	85c5883a 	add	r2,r16,r23
   43d18:	01000204 	movi	r4,8
   43d1c:	003ffb06 	br	43d0c <__alt_data_end+0xfffdcc0c>
                        break;
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
                        break;
                    default:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = 0;
   43d20:	85c5883a 	add	r2,r16,r23
   43d24:	1000a815 	stw	zero,672(r2)
                        break;
                    }

                    edid->descriptors[i].range_limits.cvt.blanking = 0;
   43d28:	85c5883a 	add	r2,r16,r23
   43d2c:	1080a904 	addi	r2,r2,676
   43d30:	10000015 	stw	zero,0(r2)
					if (c[15] & 0x08)
   43d34:	890003c3 	ldbu	r4,15(r17)
   43d38:	2100020c 	andi	r4,r4,8
   43d3c:	20000226 	beq	r4,zero,43d48 <edid_decode_v14+0x10d0>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_STANDARD_BLANKING;
   43d40:	01000044 	movi	r4,1
   43d44:	11000015 	stw	r4,0(r2)
					if (c[15] & 0x10)
   43d48:	888003c3 	ldbu	r2,15(r17)
   43d4c:	1080040c 	andi	r2,r2,16
   43d50:	10000526 	beq	r2,zero,43d68 <edid_decode_v14+0x10f0>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_REDUCED_BLANKING;
   43d54:	85c5883a 	add	r2,r16,r23
   43d58:	1080a904 	addi	r2,r2,676
   43d5c:	11000017 	ldw	r4,0(r2)
   43d60:	21000094 	ori	r4,r4,2
   43d64:	11000015 	stw	r4,0(r2)

                    edid->descriptors[i].range_limits.cvt.scaling = 0;
   43d68:	85c5883a 	add	r2,r16,r23
   43d6c:	1080aa04 	addi	r2,r2,680
   43d70:	10000015 	stw	zero,0(r2)
					if (c[16] & 0x80)
   43d74:	89000407 	ldb	r4,16(r17)
   43d78:	2000020e 	bge	r4,zero,43d84 <edid_decode_v14+0x110c>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_SHRINK;
   43d7c:	01000044 	movi	r4,1
   43d80:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x40)
   43d84:	88800403 	ldbu	r2,16(r17)
   43d88:	1080100c 	andi	r2,r2,64
   43d8c:	10000526 	beq	r2,zero,43da4 <edid_decode_v14+0x112c>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_STRETCH;
   43d90:	85c5883a 	add	r2,r16,r23
   43d94:	1080aa04 	addi	r2,r2,680
   43d98:	11000017 	ldw	r4,0(r2)
   43d9c:	21000094 	ori	r4,r4,2
   43da0:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x20)
   43da4:	88800403 	ldbu	r2,16(r17)
   43da8:	1080080c 	andi	r2,r2,32
   43dac:	10000526 	beq	r2,zero,43dc4 <edid_decode_v14+0x114c>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_SHRINK;
   43db0:	85c5883a 	add	r2,r16,r23
   43db4:	1080aa04 	addi	r2,r2,680
   43db8:	11000017 	ldw	r4,0(r2)
   43dbc:	21000114 	ori	r4,r4,4
   43dc0:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x10)
   43dc4:	88800403 	ldbu	r2,16(r17)
   43dc8:	1080040c 	andi	r2,r2,16
   43dcc:	10000526 	beq	r2,zero,43de4 <edid_decode_v14+0x116c>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_STRETCH;
   43dd0:	85c5883a 	add	r2,r16,r23
   43dd4:	1080aa04 	addi	r2,r2,680
   43dd8:	11000017 	ldw	r4,0(r2)
   43ddc:	21000214 	ori	r4,r4,8
   43de0:	11000015 	stw	r4,0(r2)

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];
   43de4:	88800443 	ldbu	r2,17(r17)
   43de8:	85c7883a 	add	r3,r16,r23
   43dec:	1880ab15 	stw	r2,684(r3)
   43df0:	0002b306 	br	448c0 <edid_decode_v14+0x1c48>

                } else if (c[10] == 0x01) {
   43df4:	00c00044 	movi	r3,1
   43df8:	10c0021e 	bne	r2,r3,43e04 <edid_decode_v14+0x118c>
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
   43dfc:	20800015 	stw	r2,0(r4)
   43e00:	0002af06 	br	448c0 <edid_decode_v14+0x1c48>
                } else if (c[10] == 0x02) {
   43e04:	00c00084 	movi	r3,2
   43e08:	10c2ad1e 	bne	r2,r3,448c0 <edid_decode_v14+0x1c48>
                	edid->descriptors[i].range_limits.timing_flags |= TF_SECOND_GTF;
   43e0c:	20800015 	stw	r2,0(r4)

                	edid->descriptors[i].range_limits.gtf_2nd_curve.break_freq = c[12] * 2;
   43e10:	88800303 	ldbu	r2,12(r17)
   43e14:	1085883a 	add	r2,r2,r2
   43e18:	9080a315 	stw	r2,652(r18)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.C = c[13] / 2;
   43e1c:	88800343 	ldbu	r2,13(r17)
   43e20:	1004d07a 	srli	r2,r2,1
   43e24:	9080a415 	stw	r2,656(r18)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
   43e28:	888003c3 	ldbu	r2,15(r17)
   43e2c:	1006923a 	slli	r3,r2,8
   43e30:	88800383 	ldbu	r2,14(r17)
   43e34:	1884b03a 	or	r2,r3,r2
   43e38:	9080a515 	stw	r2,660(r18)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
   43e3c:	88800403 	ldbu	r2,16(r17)
   43e40:	9080a615 	stw	r2,664(r18)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
   43e44:	88800443 	ldbu	r2,17(r17)
   43e48:	1004d07a 	srli	r2,r2,1
   43e4c:	9080a715 	stw	r2,668(r18)
   43e50:	00029b06 	br	448c0 <edid_decode_v14+0x1c48>
   43e54:	21000044 	addi	r4,r4,1
   43e58:	20c5c83a 	sub	r2,r4,r3

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
            	edid->descriptors[i].prod_name[18] = 0;
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   43e5c:	14029826 	beq	r2,r16,448c0 <edid_decode_v14+0x1c48>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
   43e60:	20800007 	ldb	r2,0(r4)
   43e64:	117ffb1e 	bne	r2,r5,43e54 <__alt_data_end+0xfffdcd54>
                    	edid->descriptors[i].prod_name[s] = 0;
   43e68:	20000005 	stb	zero,0(r4)
   43e6c:	003ff906 	br	43e54 <__alt_data_end+0xfffdcd54>
                    }
                }
                break;

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;
   43e70:	90809a15 	stw	r2,616(r18)

				edid->descriptors[i].white_point[0].index = c[5];
   43e74:	88800143 	ldbu	r2,5(r17)
   43e78:	94809e04 	addi	r18,r18,632
   43e7c:	90bffd15 	stw	r2,-12(r18)
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
   43e80:	88800183 	ldbu	r2,6(r17)
   43e84:	1004d0ba 	srli	r2,r2,2
   43e88:	110000cc 	andi	r4,r2,3
   43e8c:	888001c3 	ldbu	r2,7(r17)
   43e90:	1085883a 	add	r2,r2,r2
   43e94:	1085883a 	add	r2,r2,r2
   43e98:	2084b03a 	or	r2,r4,r2
   43e9c:	90bffe15 	stw	r2,-8(r18)
				edid->descriptors[i].white_point[0].y = ((u16)c[8] << 2) | ((u16)c[6] & 0x3);
   43ea0:	88800183 	ldbu	r2,6(r17)
   43ea4:	110000cc 	andi	r4,r2,3
   43ea8:	88800203 	ldbu	r2,8(r17)
   43eac:	1085883a 	add	r2,r2,r2
   43eb0:	1085883a 	add	r2,r2,r2
   43eb4:	2084b03a 	or	r2,r4,r2
   43eb8:	90bfff15 	stw	r2,-4(r18)
				if (c[9] < 0xff)
   43ebc:	89000243 	ldbu	r4,9(r17)
   43ec0:	00803fc4 	movi	r2,255
   43ec4:	20800a26 	beq	r4,r2,43ef0 <edid_decode_v14+0x1278>
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
   43ec8:	0047b180 	call	47b18 <__floatunsisf>
   43ecc:	1009883a 	mov	r4,r2
   43ed0:	0150b234 	movhi	r5,17096
   43ed4:	0046dc40 	call	46dc4 <__addsf3>
   43ed8:	014f0934 	movhi	r5,15396
   43edc:	1009883a 	mov	r4,r2
   43ee0:	2975c284 	addi	r5,r5,-10486
   43ee4:	00476f40 	call	476f4 <__mulsf3>
   43ee8:	90800015 	stw	r2,0(r18)
   43eec:	00000106 	br	43ef4 <edid_decode_v14+0x127c>
				else
					edid->descriptors[i].white_point[0].gamma = 0.0f;
   43ef0:	90000015 	stw	zero,0(r18)

				edid->descriptors[i].white_point[1].index = c[10];
   43ef4:	88800283 	ldbu	r2,10(r17)
   43ef8:	85c7883a 	add	r3,r16,r23
   43efc:	18809f15 	stw	r2,636(r3)
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
   43f00:	888002c3 	ldbu	r2,11(r17)
   43f04:	1004d0ba 	srli	r2,r2,2
   43f08:	110000cc 	andi	r4,r2,3
   43f0c:	88800303 	ldbu	r2,12(r17)
   43f10:	1085883a 	add	r2,r2,r2
   43f14:	1085883a 	add	r2,r2,r2
   43f18:	2084b03a 	or	r2,r4,r2
   43f1c:	1880a015 	stw	r2,640(r3)
				edid->descriptors[i].white_point[1].y = ((u16)c[13] << 2) | ((u16)c[11] & 0x3);
   43f20:	888002c3 	ldbu	r2,11(r17)
   43f24:	110000cc 	andi	r4,r2,3
   43f28:	88800343 	ldbu	r2,13(r17)
   43f2c:	1085883a 	add	r2,r2,r2
   43f30:	1085883a 	add	r2,r2,r2
   43f34:	2084b03a 	or	r2,r4,r2
   43f38:	1880a115 	stw	r2,644(r3)
				if (c[14] < 0xff)
   43f3c:	89000383 	ldbu	r4,14(r17)
   43f40:	00803fc4 	movi	r2,255
   43f44:	1c40a204 	addi	r17,r3,648
   43f48:	20800a26 	beq	r4,r2,43f74 <edid_decode_v14+0x12fc>
					edid->descriptors[i].white_point[1].gamma = ((float)c[14] + 100.0f) * 0.01f;
   43f4c:	0047b180 	call	47b18 <__floatunsisf>
   43f50:	1009883a 	mov	r4,r2
   43f54:	0150b234 	movhi	r5,17096
   43f58:	0046dc40 	call	46dc4 <__addsf3>
   43f5c:	014f0934 	movhi	r5,15396
   43f60:	1009883a 	mov	r4,r2
   43f64:	2975c284 	addi	r5,r5,-10486
   43f68:	00476f40 	call	476f4 <__mulsf3>
   43f6c:	88800015 	stw	r2,0(r17)
   43f70:	00025306 	br	448c0 <edid_decode_v14+0x1c48>
				else
					edid->descriptors[i].white_point[1].gamma = 0.0f;
   43f74:	88000015 	stw	zero,0(r17)
   43f78:	00025106 	br	448c0 <edid_decode_v14+0x1c48>

                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;
   43f7c:	90809a15 	stw	r2,616(r18)
   43f80:	b8c0bf04 	addi	r3,r23,764
   43f84:	b880ad04 	addi	r2,r23,692
   43f88:	89000144 	addi	r4,r17,5
   43f8c:	8085883a 	add	r2,r16,r2
   43f90:	8c400184 	addi	r17,r17,6
   43f94:	80c7883a 	add	r3,r16,r3
            		if (*d == 0)
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;

            		switch ((d[1] >> 6) & 0x3) {
   43f98:	01800084 	movi	r6,2
   43f9c:	01c000c4 	movi	r7,3
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
            		u8 *d = (u8 *)&c[5 + 2 * s];

            		if (*d == 0)
   43fa0:	21400003 	ldbu	r5,0(r4)
   43fa4:	28001426 	beq	r5,zero,43ff8 <edid_decode_v14+0x1380>
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;
   43fa8:	294007c4 	addi	r5,r5,31
   43fac:	280a90fa 	slli	r5,r5,3
   43fb0:	117fff15 	stw	r5,-4(r2)

            		switch ((d[1] >> 6) & 0x3) {
   43fb4:	89400003 	ldbu	r5,0(r17)
   43fb8:	280ad1ba 	srli	r5,r5,6
   43fbc:	2cc00726 	beq	r5,r19,43fdc <edid_decode_v14+0x1364>
   43fc0:	28000426 	beq	r5,zero,43fd4 <edid_decode_v14+0x135c>
   43fc4:	29800726 	beq	r5,r6,43fe4 <edid_decode_v14+0x136c>
   43fc8:	29c0071e 	bne	r5,r7,43fe8 <edid_decode_v14+0x1370>
            			break;
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
            			break;
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
   43fcc:	11c00015 	stw	r7,0(r2)
            			break;
   43fd0:	00000506 	br	43fe8 <edid_decode_v14+0x1370>

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;

            		switch ((d[1] >> 6) & 0x3) {
            		case 0:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_10;
   43fd4:	10000015 	stw	zero,0(r2)
            			break;
   43fd8:	00000306 	br	43fe8 <edid_decode_v14+0x1370>
            		case 1:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_4_3;
   43fdc:	14c00015 	stw	r19,0(r2)
            			break;
   43fe0:	00000106 	br	43fe8 <edid_decode_v14+0x1370>
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
   43fe4:	11800015 	stw	r6,0(r2)
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
            			break;
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
   43fe8:	89400003 	ldbu	r5,0(r17)
   43fec:	29400fcc 	andi	r5,r5,63
   43ff0:	29400f04 	addi	r5,r5,60
   43ff4:	11400115 	stw	r5,4(r2)
   43ff8:	10800304 	addi	r2,r2,12
   43ffc:	21000084 	addi	r4,r4,2
   44000:	8c400084 	addi	r17,r17,2
                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
   44004:	10ffe61e 	bne	r2,r3,43fa0 <__alt_data_end+0xfffdcea0>
   44008:	00022d06 	br	448c0 <edid_decode_v14+0x1c48>
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];

            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;
   4400c:	90809a15 	stw	r2,616(r18)
   44010:	b940c704 	addi	r5,r23,796
   44014:	b880c804 	addi	r2,r23,800
   44018:	b8c0c604 	addi	r3,r23,792
   4401c:	89c001c4 	addi	r7,r17,7
   44020:	8a400184 	addi	r9,r17,6
   44024:	89800204 	addi	r6,r17,8
   44028:	8085883a 	add	r2,r16,r2
   4402c:	814b883a 	add	r5,r16,r5
   44030:	80c7883a 	add	r3,r16,r3
   44034:	8c400504 	addi	r17,r17,20

                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
   44038:	02fffc04 	movi	r11,-16

                	switch (d[1] & 0x0c) {
   4403c:	02800104 	movi	r10,4
   44040:	03000204 	movi	r12,8
   44044:	03400304 	movi	r13,12
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
                        break;
                    }

                	switch (d[2] & 0x60) {
   44048:	03801804 	movi	r14,96
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;

                    if (d[2] & 0x10)
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
   4404c:	03c04044 	movi	r15,257
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
   44050:	39000003 	ldbu	r4,0(r7)
   44054:	4c800003 	ldbu	r18,0(r9)
   44058:	5908703a 	and	r4,r11,r4
   4405c:	2008913a 	slli	r4,r4,4
   44060:	2488b03a 	or	r4,r4,r18
   44064:	113ffd15 	stw	r4,-12(r2)

                	switch (d[1] & 0x0c) {
   44068:	39000003 	ldbu	r4,0(r7)
   4406c:	2100030c 	andi	r4,r4,12
   44070:	22800a26 	beq	r4,r10,4409c <edid_decode_v14+0x1424>
   44074:	51000436 	bltu	r10,r4,44088 <edid_decode_v14+0x1410>
   44078:	20000e1e 	bne	r4,zero,440b4 <edid_decode_v14+0x143c>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
   4407c:	19000017 	ldw	r4,0(r3)
   44080:	21000054 	ori	r4,r4,1
   44084:	00000a06 	br	440b0 <edid_decode_v14+0x1438>
                for (s = 0; s < 4; ++s) {
                	u8 *d = (u8 *)&c[6 + s * 3];

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];

                	switch (d[1] & 0x0c) {
   44088:	23000726 	beq	r4,r12,440a8 <edid_decode_v14+0x1430>
   4408c:	2340091e 	bne	r4,r13,440b4 <edid_decode_v14+0x143c>
                        break;
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
                        break;
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
   44090:	19000017 	ldw	r4,0(r3)
   44094:	21000414 	ori	r4,r4,16
   44098:	00000506 	br	440b0 <edid_decode_v14+0x1438>
                	switch (d[1] & 0x0c) {
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
                        break;
                    case 0x04:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_9;
   4409c:	19000017 	ldw	r4,0(r3)
   440a0:	21000094 	ori	r4,r4,2
   440a4:	00000206 	br	440b0 <edid_decode_v14+0x1438>
                        break;
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
   440a8:	19000017 	ldw	r4,0(r3)
   440ac:	21000114 	ori	r4,r4,4
                        break;
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
   440b0:	19000015 	stw	r4,0(r3)
                        break;
                    }

                	switch (d[2] & 0x60) {
   440b4:	31000003 	ldbu	r4,0(r6)
   440b8:	2100180c 	andi	r4,r4,96
   440bc:	25000a26 	beq	r4,r20,440e8 <edid_decode_v14+0x1470>
   440c0:	a1000436 	bltu	r20,r4,440d4 <edid_decode_v14+0x145c>
   440c4:	20000e1e 	bne	r4,zero,44100 <edid_decode_v14+0x1488>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
   440c8:	29000017 	ldw	r4,0(r5)
   440cc:	21004014 	ori	r4,r4,256
   440d0:	00000a06 	br	440fc <edid_decode_v14+0x1484>
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
                        break;
                    }

                	switch (d[2] & 0x60) {
   440d4:	25800726 	beq	r4,r22,440f4 <edid_decode_v14+0x147c>
   440d8:	2380091e 	bne	r4,r14,44100 <edid_decode_v14+0x1488>
                        break;
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
                        break;
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
   440dc:	29000017 	ldw	r4,0(r5)
   440e0:	21020014 	ori	r4,r4,2048
   440e4:	00000506 	br	440fc <edid_decode_v14+0x1484>
                	switch (d[2] & 0x60) {
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
                        break;
                    case 0x20:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_60HZ;
   440e8:	29000017 	ldw	r4,0(r5)
   440ec:	21008014 	ori	r4,r4,512
   440f0:	00000206 	br	440fc <edid_decode_v14+0x1484>
                        break;
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
   440f4:	29000017 	ldw	r4,0(r5)
   440f8:	21010014 	ori	r4,r4,1024
                        break;
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
   440fc:	29000015 	stw	r4,0(r5)
                        break;
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;
   44100:	10000015 	stw	zero,0(r2)

                    if (d[2] & 0x10)
   44104:	31000003 	ldbu	r4,0(r6)
   44108:	2100040c 	andi	r4,r4,16
   4410c:	20000126 	beq	r4,zero,44114 <edid_decode_v14+0x149c>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
   44110:	13c00015 	stw	r15,0(r2)
                    if (d[2] & 0x08)
   44114:	31000003 	ldbu	r4,0(r6)
   44118:	2100020c 	andi	r4,r4,8
   4411c:	20000326 	beq	r4,zero,4412c <edid_decode_v14+0x14b4>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_STANDARD_BLANKING);
   44120:	11000017 	ldw	r4,0(r2)
   44124:	21008054 	ori	r4,r4,513
   44128:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x04)
   4412c:	31000003 	ldbu	r4,0(r6)
   44130:	2100010c 	andi	r4,r4,4
   44134:	20000326 	beq	r4,zero,44144 <edid_decode_v14+0x14cc>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_75HZ | CVT_STANDARD_BLANKING);
   44138:	11000017 	ldw	r4,0(r2)
   4413c:	21010054 	ori	r4,r4,1025
   44140:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x02)
   44144:	31000003 	ldbu	r4,0(r6)
   44148:	2100008c 	andi	r4,r4,2
   4414c:	20000326 	beq	r4,zero,4415c <edid_decode_v14+0x14e4>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
   44150:	11000017 	ldw	r4,0(r2)
   44154:	21020054 	ori	r4,r4,2049
   44158:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x01)
   4415c:	31000003 	ldbu	r4,0(r6)
   44160:	2100004c 	andi	r4,r4,1
   44164:	20000326 	beq	r4,zero,44174 <edid_decode_v14+0x14fc>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
   44168:	11000017 	ldw	r4,0(r2)
   4416c:	21008094 	ori	r4,r4,514
   44170:	11000015 	stw	r4,0(r2)
   44174:	318000c4 	addi	r6,r6,3
   44178:	39c000c4 	addi	r7,r7,3
   4417c:	4a4000c4 	addi	r9,r9,3
   44180:	10800404 	addi	r2,r2,16
   44184:	29400404 	addi	r5,r5,16
   44188:	18c00404 	addi	r3,r3,16
            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
   4418c:	347fb01e 	bne	r6,r17,44050 <__alt_data_end+0xfffdcf50>
   44190:	0001cb06 	br	448c0 <edid_decode_v14+0x1c48>
                }

                break;

            case 0xf7:
            	edid->descriptors[i].tag = DTAG_ESTABLISHED_TIMING_III;
   44194:	90809a15 	stw	r2,616(r18)

            	eb_establish_timing(&edid->descriptors[i].timing_3[0], 640, 350, 85, c[6] & 0x80);
   44198:	88800183 	ldbu	r2,6(r17)
   4419c:	02ffe004 	movi	r11,-128
   441a0:	b900d504 	addi	r4,r23,852
   441a4:	5884703a 	and	r2,r11,r2
   441a8:	d8800015 	stw	r2,0(sp)
   441ac:	8109883a 	add	r4,r16,r4
   441b0:	0140a004 	movi	r5,640
   441b4:	01805784 	movi	r6,350
   441b8:	01c01544 	movi	r7,85
   441bc:	dac00315 	stw	r11,12(sp)
   441c0:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1], 640, 400, 85, c[6] & 0x40);
   441c4:	88800183 	ldbu	r2,6(r17)
   441c8:	b900db04 	addi	r4,r23,876
   441cc:	8109883a 	add	r4,r16,r4
   441d0:	1080100c 	andi	r2,r2,64
   441d4:	d8800015 	stw	r2,0(sp)
   441d8:	0140a004 	movi	r5,640
   441dc:	01806404 	movi	r6,400
   441e0:	01c01544 	movi	r7,85
   441e4:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2], 720, 400, 85, c[6] & 0x20);
   441e8:	88800183 	ldbu	r2,6(r17)
   441ec:	b900e104 	addi	r4,r23,900
   441f0:	8109883a 	add	r4,r16,r4
   441f4:	1080080c 	andi	r2,r2,32
   441f8:	d8800015 	stw	r2,0(sp)
   441fc:	0140b404 	movi	r5,720
   44200:	01806404 	movi	r6,400
   44204:	01c01544 	movi	r7,85
   44208:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3], 640, 480, 85, c[6] & 0x10);
   4420c:	88800183 	ldbu	r2,6(r17)
   44210:	b900e704 	addi	r4,r23,924
   44214:	8109883a 	add	r4,r16,r4
   44218:	1080040c 	andi	r2,r2,16
   4421c:	d8800015 	stw	r2,0(sp)
   44220:	0140a004 	movi	r5,640
   44224:	01807804 	movi	r6,480
   44228:	01c01544 	movi	r7,85
   4422c:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4], 848, 480, 60, c[6] & 0x08);
   44230:	88800183 	ldbu	r2,6(r17)
   44234:	02400f04 	movi	r9,60
   44238:	b900ed04 	addi	r4,r23,948
   4423c:	1080020c 	andi	r2,r2,8
   44240:	480f883a 	mov	r7,r9
   44244:	d8800015 	stw	r2,0(sp)
   44248:	8109883a 	add	r4,r16,r4
   4424c:	0140d404 	movi	r5,848
   44250:	01807804 	movi	r6,480
   44254:	da400415 	stw	r9,16(sp)
   44258:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5], 800, 600, 85, c[6] & 0x04);
   4425c:	88800183 	ldbu	r2,6(r17)
   44260:	b900f304 	addi	r4,r23,972
   44264:	8109883a 	add	r4,r16,r4
   44268:	1080010c 	andi	r2,r2,4
   4426c:	d8800015 	stw	r2,0(sp)
   44270:	0140c804 	movi	r5,800
   44274:	01809604 	movi	r6,600
   44278:	01c01544 	movi	r7,85
   4427c:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6], 1024, 768, 85, c[6] & 0x02);
   44280:	88800183 	ldbu	r2,6(r17)
   44284:	0280c004 	movi	r10,768
   44288:	b900f904 	addi	r4,r23,996
   4428c:	1080008c 	andi	r2,r2,2
   44290:	500d883a 	mov	r6,r10
   44294:	d8800015 	stw	r2,0(sp)
   44298:	8109883a 	add	r4,r16,r4
   4429c:	01410004 	movi	r5,1024
   442a0:	01c01544 	movi	r7,85
   442a4:	da800215 	stw	r10,8(sp)
   442a8:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7], 1152, 864, 75, c[6] & 0x01);
   442ac:	89400183 	ldbu	r5,6(r17)
   442b0:	b900ff04 	addi	r4,r23,1020
   442b4:	8109883a 	add	r4,r16,r4
   442b8:	2940004c 	andi	r5,r5,1
   442bc:	d9400015 	stw	r5,0(sp)
   442c0:	0180d804 	movi	r6,864
   442c4:	01412004 	movi	r5,1152
   442c8:	01c012c4 	movi	r7,75
   442cc:	0040fec0 	call	40fec <eb_establish_timing>
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   442d0:	dac00317 	ldw	r11,12(sp)

				eb_establish_timing_rb(&edid->descriptors[i].timing_3[0 + 1 * 8], 1280, 768, 60, c[7] & 0x80);
   442d4:	888001c3 	ldbu	r2,7(r17)
   442d8:	91c10604 	addi	r7,r18,1048
   442dc:	91810704 	addi	r6,r18,1052
   442e0:	5884703a 	and	r2,r11,r2
   442e4:	91410804 	addi	r5,r18,1056
   442e8:	92c10504 	addi	r11,r18,1044
   442ec:	91010904 	addi	r4,r18,1060
   442f0:	da400417 	ldw	r9,16(sp)
   442f4:	94810a04 	addi	r18,r18,1064
   442f8:	da800217 	ldw	r10,8(sp)
   442fc:	10000826 	beq	r2,zero,44320 <edid_decode_v14+0x16a8>
		et->valid = 1;
   44300:	5cc00015 	stw	r19,0(r11)
		et->width = x;
   44304:	00814004 	movi	r2,1280
   44308:	38800015 	stw	r2,0(r7)
		et->height = y;
   4430c:	32800015 	stw	r10,0(r6)
		et->refresh = r;
   44310:	2a400015 	stw	r9,0(r5)
		et->interlaced = 0;
   44314:	20000015 	stw	zero,0(r4)
		et->rb = 1;
   44318:	94c00015 	stw	r19,0(r18)
   4431c:	00000606 	br	44338 <edid_decode_v14+0x16c0>
	} else {
		et->valid = 0;
   44320:	58000015 	stw	zero,0(r11)
		et->width = 0;
   44324:	38000015 	stw	zero,0(r7)
		et->height = 0;
   44328:	30000015 	stw	zero,0(r6)
		et->refresh = 0;
   4432c:	28000015 	stw	zero,0(r5)
		et->interlaced = 0;
   44330:	20000015 	stw	zero,0(r4)
		et->rb = 0;
   44334:	90000015 	stw	zero,0(r18)
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 1 * 8], 1280, 768, 60, c[7] & 0x40);
   44338:	888001c3 	ldbu	r2,7(r17)
   4433c:	04800f04 	movi	r18,60
   44340:	b9010b04 	addi	r4,r23,1068
   44344:	1080100c 	andi	r2,r2,64
   44348:	d8800015 	stw	r2,0(sp)
   4434c:	8109883a 	add	r4,r16,r4
   44350:	01414004 	movi	r5,1280
   44354:	0180c004 	movi	r6,768
   44358:	900f883a 	mov	r7,r18
   4435c:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 1 * 8], 1280, 768, 75, c[7] & 0x20);
   44360:	888001c3 	ldbu	r2,7(r17)
   44364:	b9011104 	addi	r4,r23,1092
   44368:	8109883a 	add	r4,r16,r4
   4436c:	1080080c 	andi	r2,r2,32
   44370:	d8800015 	stw	r2,0(sp)
   44374:	01414004 	movi	r5,1280
   44378:	0180c004 	movi	r6,768
   4437c:	01c012c4 	movi	r7,75
   44380:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 1 * 8], 1280, 768, 85, c[7] & 0x10);
   44384:	888001c3 	ldbu	r2,7(r17)
   44388:	b9011704 	addi	r4,r23,1116
   4438c:	8109883a 	add	r4,r16,r4
   44390:	1080040c 	andi	r2,r2,16
   44394:	d8800015 	stw	r2,0(sp)
   44398:	01414004 	movi	r5,1280
   4439c:	0180c004 	movi	r6,768
   443a0:	01c01544 	movi	r7,85
   443a4:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 1 * 8], 1280, 960, 60, c[7] & 0x08);
   443a8:	888001c3 	ldbu	r2,7(r17)
   443ac:	b9011d04 	addi	r4,r23,1140
   443b0:	8109883a 	add	r4,r16,r4
   443b4:	1080020c 	andi	r2,r2,8
   443b8:	d8800015 	stw	r2,0(sp)
   443bc:	01414004 	movi	r5,1280
   443c0:	0180f004 	movi	r6,960
   443c4:	900f883a 	mov	r7,r18
   443c8:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 1 * 8], 1280, 960, 85, c[7] & 0x04);
   443cc:	888001c3 	ldbu	r2,7(r17)
   443d0:	b9012304 	addi	r4,r23,1164
   443d4:	8109883a 	add	r4,r16,r4
   443d8:	1080010c 	andi	r2,r2,4
   443dc:	d8800015 	stw	r2,0(sp)
   443e0:	01414004 	movi	r5,1280
   443e4:	0180f004 	movi	r6,960
   443e8:	01c01544 	movi	r7,85
   443ec:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 1 * 8], 1280, 1024, 60, c[7] & 0x02);
   443f0:	888001c3 	ldbu	r2,7(r17)
   443f4:	b9012904 	addi	r4,r23,1188
   443f8:	8109883a 	add	r4,r16,r4
   443fc:	1080008c 	andi	r2,r2,2
   44400:	d8800015 	stw	r2,0(sp)
   44404:	01414004 	movi	r5,1280
   44408:	01810004 	movi	r6,1024
   4440c:	900f883a 	mov	r7,r18
   44410:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 1 * 8], 1280, 1024, 85, c[7] & 0x01);
   44414:	888001c3 	ldbu	r2,7(r17)
   44418:	b9012f04 	addi	r4,r23,1212
   4441c:	8109883a 	add	r4,r16,r4
   44420:	1080004c 	andi	r2,r2,1
   44424:	d8800015 	stw	r2,0(sp)
   44428:	01414004 	movi	r5,1280
   4442c:	01810004 	movi	r6,1024
   44430:	01c01544 	movi	r7,85
   44434:	0040fec0 	call	40fec <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 2 * 8], 1360, 768, 60, c[8] & 0x80);
   44438:	88800203 	ldbu	r2,8(r17)
   4443c:	b9013504 	addi	r4,r23,1236
   44440:	8109883a 	add	r4,r16,r4
   44444:	1080200c 	andi	r2,r2,128
   44448:	d8800015 	stw	r2,0(sp)
   4444c:	01415404 	movi	r5,1360
   44450:	0180c004 	movi	r6,768
   44454:	900f883a 	mov	r7,r18
   44458:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[1 + 2 * 8], 1440, 900, 60, c[8] & 0x40);
   4445c:	89000203 	ldbu	r4,8(r17)
   44460:	85c5883a 	add	r2,r16,r23
   44464:	2100100c 	andi	r4,r4,64
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   44468:	20000a26 	beq	r4,zero,44494 <edid_decode_v14+0x181c>
		et->valid = 1;
		et->width = x;
   4446c:	01416804 	movi	r5,1440
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   44470:	01000044 	movi	r4,1
		et->width = x;
   44474:	11413c15 	stw	r5,1264(r2)
		et->height = y;
   44478:	0140e104 	movi	r5,900
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   4447c:	11013b15 	stw	r4,1260(r2)
		et->width = x;
		et->height = y;
   44480:	11413d15 	stw	r5,1268(r2)
		et->refresh = r;
   44484:	14813e15 	stw	r18,1272(r2)
		et->interlaced = 0;
   44488:	10013f15 	stw	zero,1276(r2)
		et->rb = 1;
   4448c:	11014015 	stw	r4,1280(r2)
   44490:	00000606 	br	444ac <edid_decode_v14+0x1834>
	} else {
		et->valid = 0;
   44494:	10013b15 	stw	zero,1260(r2)
		et->width = 0;
   44498:	10013c15 	stw	zero,1264(r2)
		et->height = 0;
   4449c:	10013d15 	stw	zero,1268(r2)
		et->refresh = 0;
   444a0:	10013e15 	stw	zero,1272(r2)
		et->interlaced = 0;
   444a4:	10013f15 	stw	zero,1276(r2)
		et->rb = 0;
   444a8:	10014015 	stw	zero,1280(r2)
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 2 * 8], 1440, 900, 60, c[8] & 0x20);
   444ac:	88800203 	ldbu	r2,8(r17)
   444b0:	b9014104 	addi	r4,r23,1284
   444b4:	04800f04 	movi	r18,60
   444b8:	1080080c 	andi	r2,r2,32
   444bc:	d8800015 	stw	r2,0(sp)
   444c0:	8109883a 	add	r4,r16,r4
   444c4:	01416804 	movi	r5,1440
   444c8:	0180e104 	movi	r6,900
   444cc:	900f883a 	mov	r7,r18
   444d0:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 2 * 8], 1440, 900, 75, c[8] & 0x10);
   444d4:	88800203 	ldbu	r2,8(r17)
   444d8:	b9014704 	addi	r4,r23,1308
   444dc:	8109883a 	add	r4,r16,r4
   444e0:	1080040c 	andi	r2,r2,16
   444e4:	d8800015 	stw	r2,0(sp)
   444e8:	01416804 	movi	r5,1440
   444ec:	0180e104 	movi	r6,900
   444f0:	01c012c4 	movi	r7,75
   444f4:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 2 * 8], 1440, 900, 85, c[8] & 0x08);
   444f8:	88800203 	ldbu	r2,8(r17)
   444fc:	b9014d04 	addi	r4,r23,1332
   44500:	8109883a 	add	r4,r16,r4
   44504:	1080020c 	andi	r2,r2,8
   44508:	d8800015 	stw	r2,0(sp)
   4450c:	01416804 	movi	r5,1440
   44510:	0180e104 	movi	r6,900
   44514:	01c01544 	movi	r7,85
   44518:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[5 + 2 * 8], 1400, 1050, 60, c[8] & 0x04);
   4451c:	89000203 	ldbu	r4,8(r17)
   44520:	85c5883a 	add	r2,r16,r23
   44524:	2100010c 	andi	r4,r4,4
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   44528:	20000a26 	beq	r4,zero,44554 <edid_decode_v14+0x18dc>
		et->valid = 1;
		et->width = x;
   4452c:	01415e04 	movi	r5,1400
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   44530:	01000044 	movi	r4,1
		et->width = x;
   44534:	11415415 	stw	r5,1360(r2)
		et->height = y;
   44538:	01410684 	movi	r5,1050
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   4453c:	11015315 	stw	r4,1356(r2)
		et->width = x;
		et->height = y;
   44540:	11415515 	stw	r5,1364(r2)
		et->refresh = r;
   44544:	14815615 	stw	r18,1368(r2)
		et->interlaced = 0;
   44548:	10015715 	stw	zero,1372(r2)
		et->rb = 1;
   4454c:	11015815 	stw	r4,1376(r2)
   44550:	00000606 	br	4456c <edid_decode_v14+0x18f4>
	} else {
		et->valid = 0;
   44554:	10015315 	stw	zero,1356(r2)
		et->width = 0;
   44558:	10015415 	stw	zero,1360(r2)
		et->height = 0;
   4455c:	10015515 	stw	zero,1364(r2)
		et->refresh = 0;
   44560:	10015615 	stw	zero,1368(r2)
		et->interlaced = 0;
   44564:	10015715 	stw	zero,1372(r2)
		et->rb = 0;
   44568:	10015815 	stw	zero,1376(r2)
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 2 * 8], 1400, 1050, 60, c[8] & 0x02);
   4456c:	88800203 	ldbu	r2,8(r17)
   44570:	04800f04 	movi	r18,60
   44574:	b9015904 	addi	r4,r23,1380
   44578:	1080008c 	andi	r2,r2,2
   4457c:	d8800015 	stw	r2,0(sp)
   44580:	8109883a 	add	r4,r16,r4
   44584:	01415e04 	movi	r5,1400
   44588:	01810684 	movi	r6,1050
   4458c:	900f883a 	mov	r7,r18
   44590:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 2 * 8], 1400, 1050, 75, c[8] & 0x01);
   44594:	88800203 	ldbu	r2,8(r17)
   44598:	b9015f04 	addi	r4,r23,1404
   4459c:	8109883a 	add	r4,r16,r4
   445a0:	1080004c 	andi	r2,r2,1
   445a4:	d8800015 	stw	r2,0(sp)
   445a8:	01415e04 	movi	r5,1400
   445ac:	01810684 	movi	r6,1050
   445b0:	01c012c4 	movi	r7,75
   445b4:	0040fec0 	call	40fec <eb_establish_timing>

                eb_establish_timing(&edid->descriptors[i].timing_3[0 + 3 * 8], 1400, 1050, 85, c[9] & 0x80);
   445b8:	88800243 	ldbu	r2,9(r17)
   445bc:	027fe004 	movi	r9,-128
   445c0:	b9016504 	addi	r4,r23,1428
   445c4:	4884703a 	and	r2,r9,r2
   445c8:	d8800015 	stw	r2,0(sp)
   445cc:	8109883a 	add	r4,r16,r4
   445d0:	01415e04 	movi	r5,1400
   445d4:	01810684 	movi	r6,1050
   445d8:	01c01544 	movi	r7,85
   445dc:	da400415 	stw	r9,16(sp)
   445e0:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 3 * 8], 1680, 1050, 60, c[9] & 0x40);
   445e4:	88800243 	ldbu	r2,9(r17)
   445e8:	b9016b04 	addi	r4,r23,1452
   445ec:	8109883a 	add	r4,r16,r4
   445f0:	1080100c 	andi	r2,r2,64
   445f4:	d8800015 	stw	r2,0(sp)
   445f8:	0141a404 	movi	r5,1680
   445fc:	01810684 	movi	r6,1050
   44600:	900f883a 	mov	r7,r18
   44604:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 3 * 8], 1680, 1050, 60, c[9] & 0x20);
   44608:	88800243 	ldbu	r2,9(r17)
   4460c:	b9017104 	addi	r4,r23,1476
   44610:	8109883a 	add	r4,r16,r4
   44614:	1080080c 	andi	r2,r2,32
   44618:	d8800015 	stw	r2,0(sp)
   4461c:	0141a404 	movi	r5,1680
   44620:	01810684 	movi	r6,1050
   44624:	900f883a 	mov	r7,r18
   44628:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 3 * 8], 1680, 1050, 75, c[9] & 0x10);
   4462c:	88800243 	ldbu	r2,9(r17)
   44630:	b9017704 	addi	r4,r23,1500
   44634:	8109883a 	add	r4,r16,r4
   44638:	1080040c 	andi	r2,r2,16
   4463c:	d8800015 	stw	r2,0(sp)
   44640:	0141a404 	movi	r5,1680
   44644:	01810684 	movi	r6,1050
   44648:	01c012c4 	movi	r7,75
   4464c:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 3 * 8], 1680, 1050, 85, c[9] & 0x08);
   44650:	88800243 	ldbu	r2,9(r17)
   44654:	b9017d04 	addi	r4,r23,1524
   44658:	8109883a 	add	r4,r16,r4
   4465c:	1080020c 	andi	r2,r2,8
   44660:	d8800015 	stw	r2,0(sp)
   44664:	0141a404 	movi	r5,1680
   44668:	01810684 	movi	r6,1050
   4466c:	01c01544 	movi	r7,85
   44670:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 3 * 8], 1600, 1200, 60, c[9] & 0x04);
   44674:	88800243 	ldbu	r2,9(r17)
   44678:	04c12c04 	movi	r19,1200
   4467c:	b9018304 	addi	r4,r23,1548
   44680:	1080010c 	andi	r2,r2,4
   44684:	d8800015 	stw	r2,0(sp)
   44688:	8109883a 	add	r4,r16,r4
   4468c:	01419004 	movi	r5,1600
   44690:	980d883a 	mov	r6,r19
   44694:	900f883a 	mov	r7,r18
   44698:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 3 * 8], 1600, 1200, 65, c[9] & 0x02);
   4469c:	88800243 	ldbu	r2,9(r17)
   446a0:	b9018904 	addi	r4,r23,1572
   446a4:	8109883a 	add	r4,r16,r4
   446a8:	1080008c 	andi	r2,r2,2
   446ac:	d8800015 	stw	r2,0(sp)
   446b0:	01419004 	movi	r5,1600
   446b4:	980d883a 	mov	r6,r19
   446b8:	01c01044 	movi	r7,65
   446bc:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 3 * 8], 1600, 1200, 70, c[9] & 0x01);
   446c0:	89400243 	ldbu	r5,9(r17)
   446c4:	b9018f04 	addi	r4,r23,1596
   446c8:	8109883a 	add	r4,r16,r4
   446cc:	2940004c 	andi	r5,r5,1
   446d0:	d9400015 	stw	r5,0(sp)
   446d4:	980d883a 	mov	r6,r19
   446d8:	01419004 	movi	r5,1600
   446dc:	01c01184 	movi	r7,70
   446e0:	0040fec0 	call	40fec <eb_establish_timing>

               	eb_establish_timing(&edid->descriptors[i].timing_3[0 + 4 * 8], 1600, 1200, 75, c[10] & 0x80);
   446e4:	da400417 	ldw	r9,16(sp)
   446e8:	88800283 	ldbu	r2,10(r17)
   446ec:	b9019504 	addi	r4,r23,1620
   446f0:	8109883a 	add	r4,r16,r4
   446f4:	4884703a 	and	r2,r9,r2
   446f8:	d8800015 	stw	r2,0(sp)
   446fc:	01419004 	movi	r5,1600
   44700:	980d883a 	mov	r6,r19
   44704:	01c012c4 	movi	r7,75
   44708:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 4 * 8], 1600, 1200, 85, c[10] & 0x40);
   4470c:	88800283 	ldbu	r2,10(r17)
   44710:	b9019b04 	addi	r4,r23,1644
   44714:	8109883a 	add	r4,r16,r4
   44718:	1080100c 	andi	r2,r2,64
   4471c:	d8800015 	stw	r2,0(sp)
   44720:	01419004 	movi	r5,1600
   44724:	980d883a 	mov	r6,r19
   44728:	01c01544 	movi	r7,85
   4472c:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 4 * 8], 1792, 1344, 60, c[10] & 0x20);
   44730:	88800283 	ldbu	r2,10(r17)
   44734:	b901a104 	addi	r4,r23,1668
   44738:	8109883a 	add	r4,r16,r4
   4473c:	1080080c 	andi	r2,r2,32
   44740:	d8800015 	stw	r2,0(sp)
   44744:	0141c004 	movi	r5,1792
   44748:	01815004 	movi	r6,1344
   4474c:	900f883a 	mov	r7,r18
   44750:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 4 * 8], 1792, 1344, 75, c[10] & 0x10);
   44754:	88800283 	ldbu	r2,10(r17)
   44758:	b901a704 	addi	r4,r23,1692
   4475c:	8109883a 	add	r4,r16,r4
   44760:	1080040c 	andi	r2,r2,16
   44764:	d8800015 	stw	r2,0(sp)
   44768:	0141c004 	movi	r5,1792
   4476c:	01815004 	movi	r6,1344
   44770:	01c012c4 	movi	r7,75
   44774:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 4 * 8], 1856, 1392, 60, c[10] & 0x08);
   44778:	88800283 	ldbu	r2,10(r17)
   4477c:	b901ad04 	addi	r4,r23,1716
   44780:	8109883a 	add	r4,r16,r4
   44784:	1080020c 	andi	r2,r2,8
   44788:	d8800015 	stw	r2,0(sp)
   4478c:	0141d004 	movi	r5,1856
   44790:	01815c04 	movi	r6,1392
   44794:	900f883a 	mov	r7,r18
   44798:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 4 * 8], 1856, 1392, 75, c[10] & 0x04);
   4479c:	88800283 	ldbu	r2,10(r17)
   447a0:	b901b304 	addi	r4,r23,1740
   447a4:	8109883a 	add	r4,r16,r4
   447a8:	1080010c 	andi	r2,r2,4
   447ac:	d8800015 	stw	r2,0(sp)
   447b0:	0141d004 	movi	r5,1856
   447b4:	01815c04 	movi	r6,1392
   447b8:	01c012c4 	movi	r7,75
   447bc:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[6 + 4 * 8], 1920, 1200, 60, c[10] & 0x02);
   447c0:	89000283 	ldbu	r4,10(r17)
   447c4:	85c5883a 	add	r2,r16,r23
   447c8:	2100008c 	andi	r4,r4,2
	}
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
   447cc:	20000926 	beq	r4,zero,447f4 <edid_decode_v14+0x1b7c>
		et->valid = 1;
   447d0:	01000044 	movi	r4,1
		et->width = x;
   447d4:	0141e004 	movi	r5,1920
}

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
	if (valid) {
		et->valid = 1;
   447d8:	1101b915 	stw	r4,1764(r2)
		et->width = x;
   447dc:	1141ba15 	stw	r5,1768(r2)
		et->height = y;
   447e0:	14c1bb15 	stw	r19,1772(r2)
		et->refresh = r;
   447e4:	1481bc15 	stw	r18,1776(r2)
		et->interlaced = 0;
   447e8:	1001bd15 	stw	zero,1780(r2)
		et->rb = 1;
   447ec:	1101be15 	stw	r4,1784(r2)
   447f0:	00000606 	br	4480c <edid_decode_v14+0x1b94>
	} else {
		et->valid = 0;
   447f4:	1001b915 	stw	zero,1764(r2)
		et->width = 0;
   447f8:	1001ba15 	stw	zero,1768(r2)
		et->height = 0;
   447fc:	1001bb15 	stw	zero,1772(r2)
		et->refresh = 0;
   44800:	1001bc15 	stw	zero,1776(r2)
		et->interlaced = 0;
   44804:	1001bd15 	stw	zero,1780(r2)
		et->rb = 0;
   44808:	1001be15 	stw	zero,1784(r2)
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 4 * 8], 1920, 1200, 60, c[10] & 0x01);
   4480c:	88800283 	ldbu	r2,10(r17)
   44810:	b901bf04 	addi	r4,r23,1788
   44814:	8109883a 	add	r4,r16,r4
   44818:	1080004c 	andi	r2,r2,1
   4481c:	d8800015 	stw	r2,0(sp)
   44820:	0141e004 	movi	r5,1920
   44824:	01812c04 	movi	r6,1200
   44828:	01c00f04 	movi	r7,60
   4482c:	0040fec0 	call	40fec <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 5 * 8], 1920, 1200, 75, c[11] & 0x80);
   44830:	888002c3 	ldbu	r2,11(r17)
   44834:	b901c504 	addi	r4,r23,1812
   44838:	8109883a 	add	r4,r16,r4
   4483c:	1080200c 	andi	r2,r2,128
   44840:	d8800015 	stw	r2,0(sp)
   44844:	0141e004 	movi	r5,1920
   44848:	01812c04 	movi	r6,1200
   4484c:	01c012c4 	movi	r7,75
   44850:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 5 * 8], 1920, 1200, 85, c[11] & 0x40);
   44854:	888002c3 	ldbu	r2,11(r17)
   44858:	b901cb04 	addi	r4,r23,1836
   4485c:	8109883a 	add	r4,r16,r4
   44860:	1080100c 	andi	r2,r2,64
   44864:	d8800015 	stw	r2,0(sp)
   44868:	0141e004 	movi	r5,1920
   4486c:	01812c04 	movi	r6,1200
   44870:	01c01544 	movi	r7,85
   44874:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
   44878:	888002c3 	ldbu	r2,11(r17)
   4487c:	b901d104 	addi	r4,r23,1860
   44880:	8109883a 	add	r4,r16,r4
   44884:	1080080c 	andi	r2,r2,32
   44888:	d8800015 	stw	r2,0(sp)
   4488c:	0141e004 	movi	r5,1920
   44890:	01816804 	movi	r6,1440
   44894:	01c01044 	movi	r7,65
   44898:	0040fec0 	call	40fec <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
   4489c:	888002c3 	ldbu	r2,11(r17)
   448a0:	b901d704 	addi	r4,r23,1884
   448a4:	8109883a 	add	r4,r16,r4
   448a8:	1080040c 	andi	r2,r2,16
   448ac:	d8800015 	stw	r2,0(sp)
   448b0:	0141e004 	movi	r5,1920
   448b4:	01816804 	movi	r6,1440
   448b8:	01c012c4 	movi	r7,75
   448bc:	0040fec0 	call	40fec <eb_establish_timing>
   448c0:	d8c00117 	ldw	r3,4(sp)

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
   448c4:	ad400044 	addi	r21,r21,1
   448c8:	18ffffc4 	addi	r3,r3,-1
   448cc:	d8c00115 	stw	r3,4(sp)
   448d0:	183b2a1e 	bne	r3,zero,4357c <__alt_data_end+0xfffdc47c>
    }

    // extension flag & checksum
    c = &edid_bin[0x7e];

    edid->extensions = *c;
   448d4:	e0801f83 	ldbu	r2,126(fp)
   448d8:	80860915 	stw	r2,6180(r16)

    if (edid->extensions != 0)
   448dc:	10000626 	beq	r2,zero,448f8 <edid_decode_v14+0x1c80>
    	edid_decode_extensions(edid, edid_bin);
   448e0:	8009883a 	mov	r4,r16
   448e4:	e00b883a 	mov	r5,fp
   448e8:	0042bf40 	call	42bf4 <edid_decode_extensions>

    return 0;
   448ec:	0005883a 	mov	r2,zero
   448f0:	00000106 	br	448f8 <edid_decode_v14+0x1c80>
    u8 checksum = 0;
    int i = 0, s = 0;

    // header
    if (memcmp(c, header, 8) != 0)
        return -1;
   448f4:	00bfffc4 	movi	r2,-1

    if (edid->extensions != 0)
    	edid_decode_extensions(edid, edid_bin);

    return 0;
}
   448f8:	dfc00e17 	ldw	ra,56(sp)
   448fc:	df000d17 	ldw	fp,52(sp)
   44900:	ddc00c17 	ldw	r23,48(sp)
   44904:	dd800b17 	ldw	r22,44(sp)
   44908:	dd400a17 	ldw	r21,40(sp)
   4490c:	dd000917 	ldw	r20,36(sp)
   44910:	dcc00817 	ldw	r19,32(sp)
   44914:	dc800717 	ldw	r18,28(sp)
   44918:	dc400617 	ldw	r17,24(sp)
   4491c:	dc000517 	ldw	r16,20(sp)
   44920:	dec00f04 	addi	sp,sp,60
   44924:	f800283a 	ret

00044928 <edid_print_v14>:

void edid_print_v14(struct base_edid *edid)
{
   44928:	deffee04 	addi	sp,sp,-72
   4492c:	dc000815 	stw	r16,32(sp)
   44930:	2021883a 	mov	r16,r4
	int i;

	printf("Base EDID Information ...\n\n");
   44934:	010001b4 	movhi	r4,6
   44938:	21242404 	addi	r4,r4,-28528

    return 0;
}

void edid_print_v14(struct base_edid *edid)
{
   4493c:	dfc01115 	stw	ra,68(sp)
   44940:	df001015 	stw	fp,64(sp)
   44944:	ddc00f15 	stw	r23,60(sp)
   44948:	dd800e15 	stw	r22,56(sp)
   4494c:	dd400d15 	stw	r21,52(sp)
   44950:	dd000c15 	stw	r20,48(sp)
   44954:	dcc00b15 	stw	r19,44(sp)
   44958:	dc800a15 	stw	r18,40(sp)
   4495c:	dc400915 	stw	r17,36(sp)
	int i;

	printf("Base EDID Information ...\n\n");
   44960:	00490cc0 	call	490cc <puts>
	printf("vendor id    : %s\n", edid->id_mfg);
   44964:	010001b4 	movhi	r4,6
   44968:	21242b04 	addi	r4,r4,-28500
   4496c:	800b883a 	mov	r5,r16
   44970:	0048fb80 	call	48fb8 <printf>
	printf("product code : %04x\n", edid->id_prod);
   44974:	81400117 	ldw	r5,4(r16)
   44978:	010001b4 	movhi	r4,6
   4497c:	21243004 	addi	r4,r4,-28480
   44980:	0048fb80 	call	48fb8 <printf>
	printf("serial       : %08x\n", edid->id_sn);
   44984:	81400217 	ldw	r5,8(r16)
   44988:	010001b4 	movhi	r4,6
   4498c:	21243604 	addi	r4,r4,-28456
   44990:	0048fb80 	call	48fb8 <printf>
	printf("mfg date     : year %04d week %02d\n", edid->mfg_year, edid->mfg_week);
   44994:	81400417 	ldw	r5,16(r16)
   44998:	81800317 	ldw	r6,12(r16)
   4499c:	010001b4 	movhi	r4,6
   449a0:	21243c04 	addi	r4,r4,-28432
   449a4:	0048fb80 	call	48fb8 <printf>

	if (edid->model_year > 0)
   449a8:	81400517 	ldw	r5,20(r16)
   449ac:	0140030e 	bge	zero,r5,449bc <edid_print_v14+0x94>
		printf("model year   : %04d\n", edid->model_year);
   449b0:	010001b4 	movhi	r4,6
   449b4:	21244504 	addi	r4,r4,-28396
   449b8:	0048fb80 	call	48fb8 <printf>

	printf("EDID version : %d.%d\n", edid->ver_mj, edid->ver_mn);
   449bc:	81400617 	ldw	r5,24(r16)
   449c0:	81800717 	ldw	r6,28(r16)
   449c4:	010001b4 	movhi	r4,6
   449c8:	21244b04 	addi	r4,r4,-28372
   449cc:	0048fb80 	call	48fb8 <printf>
	printf("extensions   : %d\n", edid->extensions);
   449d0:	81460917 	ldw	r5,6180(r16)
   449d4:	010001b4 	movhi	r4,6
   449d8:	21245104 	addi	r4,r4,-28348
   449dc:	0048fb80 	call	48fb8 <printf>

	if (edid->input.digital_if != 0) {
   449e0:	80800817 	ldw	r2,32(r16)
   449e4:	10004b26 	beq	r2,zero,44b14 <edid_print_v14+0x1ec>
		printf("\ndigital input interface ...\n");
   449e8:	010001b4 	movhi	r4,6
   449ec:	21245604 	addi	r4,r4,-28328
   449f0:	00490cc0 	call	490cc <puts>

		switch (edid->input.digital.depth) {
   449f4:	81400917 	ldw	r5,36(r16)
   449f8:	00c00144 	movi	r3,5
   449fc:	28bfffc4 	addi	r2,r5,-1
   44a00:	18801f36 	bltu	r3,r2,44a80 <edid_print_v14+0x158>
   44a04:	100490ba 	slli	r2,r2,2
   44a08:	00c00134 	movhi	r3,4
   44a0c:	18d28704 	addi	r3,r3,18972
   44a10:	10c5883a 	add	r2,r2,r3
   44a14:	10800017 	ldw	r2,0(r2)
   44a18:	1000683a 	jmp	r2
   44a1c:	00044a34 	movhi	zero,4392
   44a20:	00044a40 	call	44a4 <__reset-0x3bb5c>
   44a24:	00044a50 	cmplti	zero,zero,4393
   44a28:	00044a5c 	xori	zero,zero,4393
   44a2c:	00044a68 	cmpgeui	zero,zero,4393
   44a30:	00044a74 	movhi	zero,4393
		case 1:
			printf("  color depth : 6 bpp\n");
   44a34:	010001b4 	movhi	r4,6
   44a38:	21245e04 	addi	r4,r4,-28296
   44a3c:	00000206 	br	44a48 <edid_print_v14+0x120>
			break;
		case 2:
			printf("  color depth : 8 bpp\n");
   44a40:	010001b4 	movhi	r4,6
   44a44:	21246404 	addi	r4,r4,-28272
   44a48:	00490cc0 	call	490cc <puts>
			break;
   44a4c:	00000f06 	br	44a8c <edid_print_v14+0x164>
		case 3:
			printf("  color depth : 10 bpp\n");
   44a50:	010001b4 	movhi	r4,6
   44a54:	21246a04 	addi	r4,r4,-28248
   44a58:	003ffb06 	br	44a48 <__alt_data_end+0xfffdd948>
			break;
		case 4:
			printf("  color depth : 12 bpp\n");
   44a5c:	010001b4 	movhi	r4,6
   44a60:	21247004 	addi	r4,r4,-28224
   44a64:	003ff806 	br	44a48 <__alt_data_end+0xfffdd948>
			break;
		case 5:
			printf("  color depth : 14 bpp\n");
   44a68:	010001b4 	movhi	r4,6
   44a6c:	21247604 	addi	r4,r4,-28200
   44a70:	003ff506 	br	44a48 <__alt_data_end+0xfffdd948>
			break;
		case 6:
			printf("  color depth : 16 bpp\n");
   44a74:	010001b4 	movhi	r4,6
   44a78:	21247c04 	addi	r4,r4,-28176
   44a7c:	003ff206 	br	44a48 <__alt_data_end+0xfffdd948>
			break;
		default:
			printf("  color depth : undefined (%d)\n", edid->input.digital.depth);
   44a80:	010001b4 	movhi	r4,6
   44a84:	21248204 	addi	r4,r4,-28152
   44a88:	0048fb80 	call	48fb8 <printf>
			break;
		}

		switch (edid->input.digital.interface) {
   44a8c:	81400a17 	ldw	r5,40(r16)
   44a90:	00c00104 	movi	r3,4
   44a94:	28bfffc4 	addi	r2,r5,-1
   44a98:	18801b36 	bltu	r3,r2,44b08 <edid_print_v14+0x1e0>
   44a9c:	100490ba 	slli	r2,r2,2
   44aa0:	00c00134 	movhi	r3,4
   44aa4:	18d2ad04 	addi	r3,r3,19124
   44aa8:	10c5883a 	add	r2,r2,r3
   44aac:	10800017 	ldw	r2,0(r2)
   44ab0:	1000683a 	jmp	r2
   44ab4:	00044ac8 	cmpgei	zero,zero,4395
   44ab8:	00044ad4 	movui	zero,4395
   44abc:	00044ae4 	muli	zero,zero,4395
   44ac0:	00044af0 	cmpltui	zero,zero,4395
   44ac4:	00044afc 	xorhi	zero,zero,4395
		case 1:
			printf("  interface   : DVI\n");
   44ac8:	010001b4 	movhi	r4,6
   44acc:	21248a04 	addi	r4,r4,-28120
   44ad0:	00000206 	br	44adc <edid_print_v14+0x1b4>
			break;
		case 2:
			printf("  interface   : HDMI-a\n");
   44ad4:	010001b4 	movhi	r4,6
   44ad8:	21248f04 	addi	r4,r4,-28100
   44adc:	00490cc0 	call	490cc <puts>
			break;
   44ae0:	00004106 	br	44be8 <edid_print_v14+0x2c0>
		case 3:
			printf("  interface   : HDMI-b\n");
   44ae4:	010001b4 	movhi	r4,6
   44ae8:	21249504 	addi	r4,r4,-28076
   44aec:	003ffb06 	br	44adc <__alt_data_end+0xfffdd9dc>
			break;
		case 4:
			printf("  interface   : MDDI\n");
   44af0:	010001b4 	movhi	r4,6
   44af4:	21249b04 	addi	r4,r4,-28052
   44af8:	003ff806 	br	44adc <__alt_data_end+0xfffdd9dc>
			break;
		case 5:
			printf("  interface   : DisplayPort\n");
   44afc:	010001b4 	movhi	r4,6
   44b00:	2124a104 	addi	r4,r4,-28028
   44b04:	003ff506 	br	44adc <__alt_data_end+0xfffdd9dc>
			break;
		default:
			printf("  interface   : undefined (%d)\n", edid->input.digital.interface);
   44b08:	010001b4 	movhi	r4,6
   44b0c:	2124a804 	addi	r4,r4,-28000
   44b10:	00003406 	br	44be4 <edid_print_v14+0x2bc>
			break;
		}

	} else {
		printf("\nanalog input interface ...\n");
   44b14:	010001b4 	movhi	r4,6
   44b18:	2124b004 	addi	r4,r4,-27968
   44b1c:	00490cc0 	call	490cc <puts>

		switch (edid->input.analog.level) {
   44b20:	80800917 	ldw	r2,36(r16)
   44b24:	04400044 	movi	r17,1
   44b28:	14400c26 	beq	r2,r17,44b5c <edid_print_v14+0x234>
   44b2c:	88800416 	blt	r17,r2,44b40 <edid_print_v14+0x218>
   44b30:	1000101e 	bne	r2,zero,44b74 <edid_print_v14+0x24c>
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
   44b34:	010001b4 	movhi	r4,6
   44b38:	2124b704 	addi	r4,r4,-27940
   44b3c:	00000c06 	br	44b70 <edid_print_v14+0x248>
		}

	} else {
		printf("\nanalog input interface ...\n");

		switch (edid->input.analog.level) {
   44b40:	00c00084 	movi	r3,2
   44b44:	10c00826 	beq	r2,r3,44b68 <edid_print_v14+0x240>
   44b48:	00c000c4 	movi	r3,3
   44b4c:	10c0091e 	bne	r2,r3,44b74 <edid_print_v14+0x24c>
			break;
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
			break;
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
   44b50:	010001b4 	movhi	r4,6
   44b54:	2124db04 	addi	r4,r4,-27796
   44b58:	00000506 	br	44b70 <edid_print_v14+0x248>
		switch (edid->input.analog.level) {
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
			break;
		case VIL_0P714_0P286_1P000:
			printf("  signal level    : 0.714 : 0.286 : 1.000 Vpp\n");
   44b5c:	010001b4 	movhi	r4,6
   44b60:	2124c304 	addi	r4,r4,-27892
   44b64:	00000206 	br	44b70 <edid_print_v14+0x248>
			break;
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
   44b68:	010001b4 	movhi	r4,6
   44b6c:	2124cf04 	addi	r4,r4,-27844
			break;
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
   44b70:	00490cc0 	call	490cc <puts>
			break;
		}

		switch (edid->input.analog.setup) {
   44b74:	80800a17 	ldw	r2,40(r16)
   44b78:	10000426 	beq	r2,zero,44b8c <edid_print_v14+0x264>
   44b7c:	1440061e 	bne	r2,r17,44b98 <edid_print_v14+0x270>
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
			break;
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
   44b80:	010001b4 	movhi	r4,6
   44b84:	2124f304 	addi	r4,r4,-27700
   44b88:	00000206 	br	44b94 <edid_print_v14+0x26c>
			break;
		}

		switch (edid->input.analog.setup) {
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
   44b8c:	010001b4 	movhi	r4,6
   44b90:	2124e704 	addi	r4,r4,-27748
			break;
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
   44b94:	00490cc0 	call	490cc <puts>
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
   44b98:	81400b17 	ldw	r5,44(r16)
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
   44b9c:	010001b4 	movhi	r4,6
   44ba0:	21250104 	addi	r4,r4,-27644
   44ba4:	280cd07a 	srli	r6,r5,1
   44ba8:	280ed0ba 	srli	r7,r5,2
   44bac:	2940004c 	andi	r5,r5,1
   44bb0:	3180004c 	andi	r6,r6,1
   44bb4:	39c0004c 	andi	r7,r7,1
   44bb8:	0048fb80 	call	48fb8 <printf>
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_G_VIDEO) ? 1 : 0);

		printf("  vsync serration : %s\n", (edid->input.analog.serrations & VISR_VSYNC) ? "supported" : "not supported");
   44bbc:	80800c17 	ldw	r2,48(r16)
   44bc0:	1080004c 	andi	r2,r2,1
   44bc4:	1000031e 	bne	r2,zero,44bd4 <edid_print_v14+0x2ac>
   44bc8:	014001b4 	movhi	r5,6
   44bcc:	29641d04 	addi	r5,r5,-28556
   44bd0:	00000206 	br	44bdc <edid_print_v14+0x2b4>
   44bd4:	014001b4 	movhi	r5,6
   44bd8:	29641e04 	addi	r5,r5,-28552
   44bdc:	010001b4 	movhi	r4,6
   44be0:	21251804 	addi	r4,r4,-27552
   44be4:	0048fb80 	call	48fb8 <printf>
	}

	if (edid->screen.size_defined) {
   44be8:	80800d17 	ldw	r2,52(r16)
   44bec:	10000626 	beq	r2,zero,44c08 <edid_print_v14+0x2e0>
		printf("\nscreen size  : horizontal) %d (cm)  vertical) %d (cm)\n", edid->screen.size.horizontal, edid->screen.size.vertical);
   44bf0:	81400f17 	ldw	r5,60(r16)
   44bf4:	81801017 	ldw	r6,64(r16)
   44bf8:	010001b4 	movhi	r4,6
   44bfc:	21251e04 	addi	r4,r4,-27528
   44c00:	0048fb80 	call	48fb8 <printf>
   44c04:	00001106 	br	44c4c <edid_print_v14+0x324>
	} else if (edid->screen.aspect_defined == 1) {
   44c08:	80800e17 	ldw	r2,56(r16)
   44c0c:	00c00044 	movi	r3,1
   44c10:	10c0051e 	bne	r2,r3,44c28 <edid_print_v14+0x300>
		printf("\naspect ratio : landscape) %.2f\n", edid->screen.aspect.landscape);
   44c14:	81000f17 	ldw	r4,60(r16)
   44c18:	0047c280 	call	47c28 <__extendsfdf2>
   44c1c:	010001b4 	movhi	r4,6
   44c20:	21252c04 	addi	r4,r4,-27472
   44c24:	00000606 	br	44c40 <edid_print_v14+0x318>
	} else if (edid->screen.aspect_defined == 2) {
   44c28:	00c00084 	movi	r3,2
   44c2c:	10c0071e 	bne	r2,r3,44c4c <edid_print_v14+0x324>
		printf("\naspect ratio : portrait) %.2f\n", edid->screen.aspect.portrait);
   44c30:	81001017 	ldw	r4,64(r16)
   44c34:	0047c280 	call	47c28 <__extendsfdf2>
   44c38:	010001b4 	movhi	r4,6
   44c3c:	21253504 	addi	r4,r4,-27436
   44c40:	100b883a 	mov	r5,r2
   44c44:	180d883a 	mov	r6,r3
   44c48:	0048fb80 	call	48fb8 <printf>
	}

	printf("\ngamma        : %.2f\n", edid->gamma);
   44c4c:	81001117 	ldw	r4,68(r16)
   44c50:	0047c280 	call	47c28 <__extendsfdf2>
   44c54:	010001b4 	movhi	r4,6
   44c58:	21253d04 	addi	r4,r4,-27404
   44c5c:	100b883a 	mov	r5,r2
   44c60:	180d883a 	mov	r6,r3
   44c64:	0048fb80 	call	48fb8 <printf>

	printf("\nfeatures ...\n");
   44c68:	010001b4 	movhi	r4,6
   44c6c:	21254304 	addi	r4,r4,-27380
   44c70:	00490cc0 	call	490cc <puts>
	printf("  [PM] standby mode                     : %s\n", (edid->feature & FS_PM_STANDBY) ? "yes" : "no");
   44c74:	80801217 	ldw	r2,72(r16)
   44c78:	1080004c 	andi	r2,r2,1
   44c7c:	1000031e 	bne	r2,zero,44c8c <edid_print_v14+0x364>
   44c80:	01400174 	movhi	r5,5
   44c84:	295e6504 	addi	r5,r5,31124
   44c88:	00000206 	br	44c94 <edid_print_v14+0x36c>
   44c8c:	01400174 	movhi	r5,5
   44c90:	295e6404 	addi	r5,r5,31120
   44c94:	010001b4 	movhi	r4,6
   44c98:	21254704 	addi	r4,r4,-27364
   44c9c:	0048fb80 	call	48fb8 <printf>
	printf("  [PM] suspend mode                     : %s\n", (edid->feature & FS_PM_SUSPEND) ? "yes" : "no");
   44ca0:	80801217 	ldw	r2,72(r16)
   44ca4:	1080008c 	andi	r2,r2,2
   44ca8:	1000031e 	bne	r2,zero,44cb8 <edid_print_v14+0x390>
   44cac:	01400174 	movhi	r5,5
   44cb0:	295e6504 	addi	r5,r5,31124
   44cb4:	00000206 	br	44cc0 <edid_print_v14+0x398>
   44cb8:	01400174 	movhi	r5,5
   44cbc:	295e6404 	addi	r5,r5,31120
   44cc0:	010001b4 	movhi	r4,6
   44cc4:	21255304 	addi	r4,r4,-27316
   44cc8:	0048fb80 	call	48fb8 <printf>
	printf("  [PM] active off                       : %s\n", (edid->feature & FS_PM_ACTIVE_OFF) ? "yes" : "no");
   44ccc:	80801217 	ldw	r2,72(r16)
   44cd0:	1080010c 	andi	r2,r2,4
   44cd4:	1000031e 	bne	r2,zero,44ce4 <edid_print_v14+0x3bc>
   44cd8:	01400174 	movhi	r5,5
   44cdc:	295e6504 	addi	r5,r5,31124
   44ce0:	00000206 	br	44cec <edid_print_v14+0x3c4>
   44ce4:	01400174 	movhi	r5,5
   44ce8:	295e6404 	addi	r5,r5,31120
   44cec:	010001b4 	movhi	r4,6
   44cf0:	21255f04 	addi	r4,r4,-27268
   44cf4:	0048fb80 	call	48fb8 <printf>

	printf("  [DI] supported color encoding formats : ");
   44cf8:	010001b4 	movhi	r4,6
   44cfc:	21256b04 	addi	r4,r4,-27220
   44d00:	0048fb80 	call	48fb8 <printf>
	if (edid->feature & FS_CEF_RGB444)
   44d04:	80801217 	ldw	r2,72(r16)
   44d08:	1080100c 	andi	r2,r2,64
   44d0c:	10000326 	beq	r2,zero,44d1c <edid_print_v14+0x3f4>
		printf("RGB_4:4:4 ");
   44d10:	010001b4 	movhi	r4,6
   44d14:	21257604 	addi	r4,r4,-27176
   44d18:	0048fb80 	call	48fb8 <printf>
	if (edid->feature & FS_CEF_YCBCR444)
   44d1c:	80801217 	ldw	r2,72(r16)
   44d20:	1080200c 	andi	r2,r2,128
   44d24:	10000326 	beq	r2,zero,44d34 <edid_print_v14+0x40c>
		printf("YCbCr_4:4:4 ");
   44d28:	010001b4 	movhi	r4,6
   44d2c:	21257904 	addi	r4,r4,-27164
   44d30:	0048fb80 	call	48fb8 <printf>
	if (edid->feature & FS_CEF_YCBCR422)
   44d34:	80801217 	ldw	r2,72(r16)
   44d38:	1080400c 	andi	r2,r2,256
   44d3c:	10000326 	beq	r2,zero,44d4c <edid_print_v14+0x424>
		printf("YCbCr_4:2:2 ");
   44d40:	010001b4 	movhi	r4,6
   44d44:	21257d04 	addi	r4,r4,-27148
   44d48:	0048fb80 	call	48fb8 <printf>
	printf("\n");
   44d4c:	01000284 	movi	r4,10
   44d50:	0048ffc0 	call	48ffc <putchar>

	if (edid->feature & FS_DCT_MONO_GRAY)
   44d54:	80801217 	ldw	r2,72(r16)
   44d58:	1080020c 	andi	r2,r2,8
   44d5c:	10000326 	beq	r2,zero,44d6c <edid_print_v14+0x444>
		printf("  [AI] display color type               : monochrome or grayscale display\n");
   44d60:	010001b4 	movhi	r4,6
   44d64:	21258104 	addi	r4,r4,-27132
   44d68:	00490cc0 	call	490cc <puts>
	if (edid->feature & FS_DCT_RGB)
   44d6c:	80801217 	ldw	r2,72(r16)
   44d70:	1080040c 	andi	r2,r2,16
   44d74:	10000326 	beq	r2,zero,44d84 <edid_print_v14+0x45c>
		printf("  [AI] display color type               : RGB\n");
   44d78:	010001b4 	movhi	r4,6
   44d7c:	21259404 	addi	r4,r4,-27056
   44d80:	00490cc0 	call	490cc <puts>
	if (edid->feature & FS_DCT_NON_RGB)
   44d84:	80801217 	ldw	r2,72(r16)
   44d88:	1080080c 	andi	r2,r2,32
   44d8c:	10000326 	beq	r2,zero,44d9c <edid_print_v14+0x474>
		printf("  [AI] display color type               : non-RGB\n");
   44d90:	010001b4 	movhi	r4,6
   44d94:	2125a004 	addi	r4,r4,-27008
   44d98:	00490cc0 	call	490cc <puts>

	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
   44d9c:	80801217 	ldw	r2,72(r16)
   44da0:	1080800c 	andi	r2,r2,512
   44da4:	1000031e 	bne	r2,zero,44db4 <edid_print_v14+0x48c>
   44da8:	01400174 	movhi	r5,5
   44dac:	295e6504 	addi	r5,r5,31124
   44db0:	00000206 	br	44dbc <edid_print_v14+0x494>
   44db4:	01400174 	movhi	r5,5
   44db8:	295e6404 	addi	r5,r5,31120
   44dbc:	010001b4 	movhi	r4,6
   44dc0:	2125ad04 	addi	r4,r4,-26956
   44dc4:	0048fb80 	call	48fb8 <printf>
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
   44dc8:	80801217 	ldw	r2,72(r16)
   44dcc:	1081000c 	andi	r2,r2,1024
   44dd0:	1000031e 	bne	r2,zero,44de0 <edid_print_v14+0x4b8>
   44dd4:	01400174 	movhi	r5,5
   44dd8:	295e6504 	addi	r5,r5,31124
   44ddc:	00000206 	br	44de8 <edid_print_v14+0x4c0>
   44de0:	01400174 	movhi	r5,5
   44de4:	295e6404 	addi	r5,r5,31120
   44de8:	010001b4 	movhi	r4,6
   44dec:	2125b904 	addi	r4,r4,-26908
   44df0:	0048fb80 	call	48fb8 <printf>
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");
   44df4:	80801217 	ldw	r2,72(r16)
   44df8:	1082000c 	andi	r2,r2,2048
   44dfc:	1000031e 	bne	r2,zero,44e0c <edid_print_v14+0x4e4>
   44e00:	01400174 	movhi	r5,5
   44e04:	295e6504 	addi	r5,r5,31124
   44e08:	00000206 	br	44e14 <edid_print_v14+0x4ec>
   44e0c:	01400174 	movhi	r5,5
   44e10:	295e6404 	addi	r5,r5,31120
   44e14:	010001b4 	movhi	r4,6
   44e18:	2125c504 	addi	r4,r4,-26860
   44e1c:	0048fb80 	call	48fb8 <printf>

	printf("\nestablished timing ...\n");
   44e20:	010001b4 	movhi	r4,6
   44e24:	2125d104 	addi	r4,r4,-26812
   44e28:	00490cc0 	call	490cc <puts>
   44e2c:	85801b04 	addi	r22,r16,108
   44e30:	85401c04 	addi	r21,r16,112
   44e34:	85001d04 	addi	r20,r16,116
   44e38:	84c01e04 	addi	r19,r16,120
   44e3c:	84801f04 	addi	r18,r16,124
	for (i = 0; i < 17; ++i) {
   44e40:	0023883a 	mov	r17,zero
   44e44:	05c00444 	movi	r23,17
		if (edid->timing_1_2[i].valid)
   44e48:	b0800017 	ldw	r2,0(r22)
   44e4c:	10001026 	beq	r2,zero,44e90 <edid_print_v14+0x568>
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
   44e50:	90800017 	ldw	r2,0(r18)
   44e54:	a9800017 	ldw	r6,0(r21)
   44e58:	a1c00017 	ldw	r7,0(r20)
   44e5c:	98c00017 	ldw	r3,0(r19)
   44e60:	1000031e 	bne	r2,zero,44e70 <edid_print_v14+0x548>
   44e64:	008001b4 	movhi	r2,6
   44e68:	10a8f904 	addi	r2,r2,-23580
   44e6c:	00000206 	br	44e78 <edid_print_v14+0x550>
   44e70:	008001b4 	movhi	r2,6
   44e74:	10a42104 	addi	r2,r2,-28540
   44e78:	010001b4 	movhi	r4,6
   44e7c:	d8c00015 	stw	r3,0(sp)
   44e80:	d8800115 	stw	r2,4(sp)
   44e84:	2125d704 	addi	r4,r4,-26788
   44e88:	880b883a 	mov	r5,r17
   44e8c:	0048fb80 	call	48fb8 <printf>
	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");

	printf("\nestablished timing ...\n");
	for (i = 0; i < 17; ++i) {
   44e90:	8c400044 	addi	r17,r17,1
   44e94:	b5800604 	addi	r22,r22,24
   44e98:	ad400604 	addi	r21,r21,24
   44e9c:	a5000604 	addi	r20,r20,24
   44ea0:	9cc00604 	addi	r19,r19,24
   44ea4:	94800604 	addi	r18,r18,24
   44ea8:	8dffe71e 	bne	r17,r23,44e48 <__alt_data_end+0xfffddd48>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
   44eac:	010001b4 	movhi	r4,6
   44eb0:	2125e004 	addi	r4,r4,-26752
   44eb4:	00490cc0 	call	490cc <puts>
   44eb8:	85008304 	addi	r20,r16,524
   44ebc:	84c08104 	addi	r19,r16,516
   44ec0:	84808204 	addi	r18,r16,520
	for (i = 0; i < 8; ++i) {
   44ec4:	0023883a 	mov	r17,zero
		if (edid->standard_timings[i].refresh_rate) {
   44ec8:	a1c00017 	ldw	r7,0(r20)
   44ecc:	38001d26 	beq	r7,zero,44f44 <edid_print_v14+0x61c>
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
   44ed0:	99800017 	ldw	r6,0(r19)
   44ed4:	010001b4 	movhi	r4,6
   44ed8:	2125e604 	addi	r4,r4,-26728
   44edc:	880b883a 	mov	r5,r17
   44ee0:	0048fb80 	call	48fb8 <printf>
			switch (edid->standard_timings[i].aspect_ratio) {
   44ee4:	90800017 	ldw	r2,0(r18)
   44ee8:	00c00044 	movi	r3,1
   44eec:	10c00c26 	beq	r2,r3,44f20 <edid_print_v14+0x5f8>
   44ef0:	18800416 	blt	r3,r2,44f04 <edid_print_v14+0x5dc>
   44ef4:	1000111e 	bne	r2,zero,44f3c <edid_print_v14+0x614>
			case ST_AR_16_10:
				printf("16:10\n");
   44ef8:	010001b4 	movhi	r4,6
   44efc:	2125ed04 	addi	r4,r4,-26700
   44f00:	00000906 	br	44f28 <edid_print_v14+0x600>

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
		if (edid->standard_timings[i].refresh_rate) {
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
			switch (edid->standard_timings[i].aspect_ratio) {
   44f04:	00c00084 	movi	r3,2
   44f08:	10c00926 	beq	r2,r3,44f30 <edid_print_v14+0x608>
   44f0c:	00c000c4 	movi	r3,3
   44f10:	10c00a1e 	bne	r2,r3,44f3c <edid_print_v14+0x614>
				break;
			case ST_AR_5_4:
				printf("5:4\n");
				break;
			case ST_AR_16_9:
				printf("16:9\n");
   44f14:	010001b4 	movhi	r4,6
   44f18:	2125f104 	addi	r4,r4,-26684
   44f1c:	00000206 	br	44f28 <edid_print_v14+0x600>
			switch (edid->standard_timings[i].aspect_ratio) {
			case ST_AR_16_10:
				printf("16:10\n");
				break;
			case ST_AR_4_3:
				printf("4:3\n");
   44f20:	010001b4 	movhi	r4,6
   44f24:	2125ef04 	addi	r4,r4,-26692
   44f28:	00490cc0 	call	490cc <puts>
				break;
   44f2c:	00000506 	br	44f44 <edid_print_v14+0x61c>
			case ST_AR_5_4:
				printf("5:4\n");
   44f30:	010001b4 	movhi	r4,6
   44f34:	2125f004 	addi	r4,r4,-26688
   44f38:	003ffb06 	br	44f28 <__alt_data_end+0xfffdde28>
				break;
			case ST_AR_16_9:
				printf("16:9\n");
				break;
			default:
				printf("\n");
   44f3c:	01000284 	movi	r4,10
   44f40:	0048ffc0 	call	48ffc <putchar>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
   44f44:	8c400044 	addi	r17,r17,1
   44f48:	00800204 	movi	r2,8
   44f4c:	a5000304 	addi	r20,r20,12
   44f50:	9cc00304 	addi	r19,r19,12
   44f54:	94800304 	addi	r18,r18,12
   44f58:	88bfdb1e 	bne	r17,r2,44ec8 <__alt_data_end+0xfffdddc8>
				break;
			}
		}
	}

	printf("\ndescriptors ...\n");
   44f5c:	010001b4 	movhi	r4,6
   44f60:	2125f304 	addi	r4,r4,-26676
   44f64:	00490cc0 	call	490cc <puts>
   44f68:	85009b04 	addi	r20,r16,620
   44f6c:	87009e04 	addi	fp,r16,632
   44f70:	85c09f04 	addi	r23,r16,636
   44f74:	8580a004 	addi	r22,r16,640
   44f78:	8540a104 	addi	r21,r16,644
   44f7c:	84c0a204 	addi	r19,r16,648
   44f80:	8440aa04 	addi	r17,r16,680
   44f84:	8480a904 	addi	r18,r16,676
	for (i = 0; i < 4; ++i) {
   44f88:	d8000315 	stw	zero,12(sp)
    	if (edid->descriptors[i].type == DT_DETAILED_TIMING) {
   44f8c:	88bfef17 	ldw	r2,-68(r17)
   44f90:	1000c11e 	bne	r2,zero,45298 <edid_print_v14+0x970>
    		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   44f94:	d9400317 	ldw	r5,12(sp)
   44f98:	010001b4 	movhi	r4,6
   44f9c:	21232c04 	addi	r4,r4,-29520
   44fa0:	0048fb80 	call	48fb8 <printf>

    		printf("      pixel clock   : %d (Hz)\n", edid->descriptors[i].detailed_timing.pixel_clock);
   44fa4:	a1400017 	ldw	r5,0(r20)
   44fa8:	010001b4 	movhi	r4,6
   44fac:	21233704 	addi	r4,r4,-29476
   44fb0:	0048fb80 	call	48fb8 <printf>
    		printf("      h addressible : %d (pixels)\n", edid->descriptors[i].detailed_timing.width);
   44fb4:	897ff217 	ldw	r5,-56(r17)
   44fb8:	010001b4 	movhi	r4,6
   44fbc:	21233f04 	addi	r4,r4,-29444
   44fc0:	0048fb80 	call	48fb8 <printf>
    		printf("        blank       : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank);
   44fc4:	e1400017 	ldw	r5,0(fp)
   44fc8:	010001b4 	movhi	r4,6
   44fcc:	21234804 	addi	r4,r4,-29408
   44fd0:	0048fb80 	call	48fb8 <printf>
    		printf("        fp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_fp);
   44fd4:	b1400017 	ldw	r5,0(r22)
   44fd8:	010001b4 	movhi	r4,6
   44fdc:	21235104 	addi	r4,r4,-29372
   44fe0:	0048fb80 	call	48fb8 <printf>
    		printf("        sync        : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_sync);
   44fe4:	99400017 	ldw	r5,0(r19)
   44fe8:	010001b4 	movhi	r4,6
   44fec:	21235a04 	addi	r4,r4,-29336
   44ff0:	0048fb80 	call	48fb8 <printf>
    		printf("        bp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank - edid->descriptors[i].detailed_timing.h_fp - edid->descriptors[i].detailed_timing.h_sync);
   44ff4:	b1400017 	ldw	r5,0(r22)
   44ff8:	e0800017 	ldw	r2,0(fp)
   44ffc:	010001b4 	movhi	r4,6
   45000:	21236304 	addi	r4,r4,-29300
   45004:	1145c83a 	sub	r2,r2,r5
   45008:	99400017 	ldw	r5,0(r19)
   4500c:	114bc83a 	sub	r5,r2,r5
   45010:	0048fb80 	call	48fb8 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.h_size);
   45014:	897ffa17 	ldw	r5,-24(r17)
   45018:	010001b4 	movhi	r4,6
   4501c:	21236c04 	addi	r4,r4,-29264
   45020:	0048fb80 	call	48fb8 <printf>
    		printf("      v addressible : %d (lines)\n", edid->descriptors[i].detailed_timing.height);
   45024:	897ff317 	ldw	r5,-52(r17)
   45028:	010001b4 	movhi	r4,6
   4502c:	21237404 	addi	r4,r4,-29232
   45030:	0048fb80 	call	48fb8 <printf>
    		printf("        blank       : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank);
   45034:	b9400017 	ldw	r5,0(r23)
   45038:	010001b4 	movhi	r4,6
   4503c:	21237d04 	addi	r4,r4,-29196
   45040:	0048fb80 	call	48fb8 <printf>
    		printf("        fp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_fp);
   45044:	a9400017 	ldw	r5,0(r21)
   45048:	010001b4 	movhi	r4,6
   4504c:	21238604 	addi	r4,r4,-29160
   45050:	0048fb80 	call	48fb8 <printf>
    		printf("        sync        : %d (lines)\n", edid->descriptors[i].detailed_timing.v_sync);
   45054:	897ff917 	ldw	r5,-28(r17)
   45058:	010001b4 	movhi	r4,6
   4505c:	21238f04 	addi	r4,r4,-29124
   45060:	0048fb80 	call	48fb8 <printf>
    		printf("        bp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank - edid->descriptors[i].detailed_timing.v_fp - edid->descriptors[i].detailed_timing.v_sync);
   45064:	a9400017 	ldw	r5,0(r21)
   45068:	b8800017 	ldw	r2,0(r23)
   4506c:	010001b4 	movhi	r4,6
   45070:	21239804 	addi	r4,r4,-29088
   45074:	1145c83a 	sub	r2,r2,r5
   45078:	897ff917 	ldw	r5,-28(r17)
   4507c:	114bc83a 	sub	r5,r2,r5
   45080:	0048fb80 	call	48fb8 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.v_size);
   45084:	897ffb17 	ldw	r5,-20(r17)
   45088:	010001b4 	movhi	r4,6
   4508c:	21236c04 	addi	r4,r4,-29264
   45090:	0048fb80 	call	48fb8 <printf>
    		printf("      border (L&R)  : %d (pixels)\n", edid->descriptors[i].detailed_timing.border_lr);
   45094:	897ffc17 	ldw	r5,-16(r17)
   45098:	010001b4 	movhi	r4,6
   4509c:	2123a104 	addi	r4,r4,-29052
   450a0:	0048fb80 	call	48fb8 <printf>
    		printf("      border (T&B)  : %d (lines)\n", edid->descriptors[i].detailed_timing.border_tb);
   450a4:	897ffd17 	ldw	r5,-12(r17)
   450a8:	010001b4 	movhi	r4,6
   450ac:	2123aa04 	addi	r4,r4,-29016
   450b0:	0048fb80 	call	48fb8 <printf>
    		printf("      interlaced    : %d\n", edid->descriptors[i].detailed_timing.interlaced);
   450b4:	897ffe17 	ldw	r5,-8(r17)
   450b8:	010001b4 	movhi	r4,6
   450bc:	2123b304 	addi	r4,r4,-28980
   450c0:	0048fb80 	call	48fb8 <printf>

    		if (edid->descriptors[i].detailed_timing.stereo == STEREO_NONE) {
   450c4:	90800017 	ldw	r2,0(r18)
   450c8:	1000041e 	bne	r2,zero,450dc <edid_print_v14+0x7b4>
    			printf("      stereo        : none\n");
   450cc:	010001b4 	movhi	r4,6
   450d0:	2123ba04 	addi	r4,r4,-28952
   450d4:	00490cc0 	call	490cc <puts>
   450d8:	00002906 	br	45180 <edid_print_v14+0x858>
    		} else {
        		printf("      stereo        : ");
   450dc:	010001b4 	movhi	r4,6
   450e0:	2123c104 	addi	r4,r4,-28924
   450e4:	0048fb80 	call	48fb8 <printf>

        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   450e8:	90800017 	ldw	r2,0(r18)
   450ec:	1080008c 	andi	r2,r2,2
   450f0:	10000326 	beq	r2,zero,45100 <edid_print_v14+0x7d8>
            		printf("field_seq_right ");
   450f4:	010001b4 	movhi	r4,6
   450f8:	2123c704 	addi	r4,r4,-28900
   450fc:	0048fb80 	call	48fb8 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   45100:	90800017 	ldw	r2,0(r18)
   45104:	1080010c 	andi	r2,r2,4
   45108:	10000326 	beq	r2,zero,45118 <edid_print_v14+0x7f0>
            		printf("field_seq_left ");
   4510c:	010001b4 	movhi	r4,6
   45110:	2123cc04 	addi	r4,r4,-28880
   45114:	0048fb80 	call	48fb8 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   45118:	90800017 	ldw	r2,0(r18)
   4511c:	1080020c 	andi	r2,r2,8
   45120:	10000326 	beq	r2,zero,45130 <edid_print_v14+0x808>
            		printf("2way_interleave_right ");
   45124:	010001b4 	movhi	r4,6
   45128:	2123d004 	addi	r4,r4,-28864
   4512c:	0048fb80 	call	48fb8 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   45130:	90800017 	ldw	r2,0(r18)
   45134:	1080040c 	andi	r2,r2,16
   45138:	10000326 	beq	r2,zero,45148 <edid_print_v14+0x820>
            		printf("2way_interleave_left ");
   4513c:	010001b4 	movhi	r4,6
   45140:	2123d604 	addi	r4,r4,-28840
   45144:	0048fb80 	call	48fb8 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_4WAY_INTERLEAVE)
   45148:	90800017 	ldw	r2,0(r18)
   4514c:	1080080c 	andi	r2,r2,32
   45150:	10000326 	beq	r2,zero,45160 <edid_print_v14+0x838>
            		printf("4way_interleave ");
   45154:	010001b4 	movhi	r4,6
   45158:	2123dc04 	addi	r4,r4,-28816
   4515c:	0048fb80 	call	48fb8 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   45160:	90800017 	ldw	r2,0(r18)
   45164:	1080100c 	andi	r2,r2,64
   45168:	10000326 	beq	r2,zero,45178 <edid_print_v14+0x850>
            		printf("side-by-side ");
   4516c:	010001b4 	movhi	r4,6
   45170:	2123e104 	addi	r4,r4,-28796
   45174:	0048fb80 	call	48fb8 <printf>

        		printf("\n");
   45178:	01000284 	movi	r4,10
   4517c:	0048ffc0 	call	48ffc <putchar>
    		}

    		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC) {
   45180:	88800017 	ldw	r2,0(r17)
   45184:	10c0004c 	andi	r3,r2,1
   45188:	18002126 	beq	r3,zero,45210 <edid_print_v14+0x8e8>

    			printf("      analog sync   : composite");
   4518c:	010001b4 	movhi	r4,6
   45190:	2123e504 	addi	r4,r4,-28780
   45194:	0048fb80 	call	48fb8 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC)
   45198:	88800017 	ldw	r2,0(r17)
   4519c:	1080004c 	andi	r2,r2,1
   451a0:	10000326 	beq	r2,zero,451b0 <edid_print_v14+0x888>
            		printf(" bipolar");
   451a4:	010001b4 	movhi	r4,6
   451a8:	2123ed04 	addi	r4,r4,-28748
   451ac:	0048fb80 	call	48fb8 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION) {
   451b0:	88800017 	ldw	r2,0(r17)
   451b4:	1080010c 	andi	r2,r2,4
   451b8:	10000f26 	beq	r2,zero,451f8 <edid_print_v14+0x8d0>
            		printf(" with_serrations");
   451bc:	010001b4 	movhi	r4,6
   451c0:	2123f004 	addi	r4,r4,-28736
   451c4:	0048fb80 	call	48fb8 <printf>
        			if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_G)
   451c8:	88800017 	ldw	r2,0(r17)
   451cc:	1080020c 	andi	r2,r2,8
   451d0:	10000326 	beq	r2,zero,451e0 <edid_print_v14+0x8b8>
						printf(" syn_on_green");
   451d4:	010001b4 	movhi	r4,6
   451d8:	2123f504 	addi	r4,r4,-28716
   451dc:	0048fb80 	call	48fb8 <printf>
					if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   451e0:	88800017 	ldw	r2,0(r17)
   451e4:	1080040c 	andi	r2,r2,16
   451e8:	10000626 	beq	r2,zero,45204 <edid_print_v14+0x8dc>
						printf(" syn_on_rgb");
   451ec:	010001b4 	movhi	r4,6
   451f0:	2123f904 	addi	r4,r4,-28700
   451f4:	00000206 	br	45200 <edid_print_v14+0x8d8>
        		} else {
            		printf(" without_serrations");
   451f8:	010001b4 	movhi	r4,6
   451fc:	2123fc04 	addi	r4,r4,-28688
   45200:	0048fb80 	call	48fb8 <printf>
        		}

				printf("\n");
   45204:	01000284 	movi	r4,10
   45208:	0048ffc0 	call	48ffc <putchar>
   4520c:	00010b06 	br	4563c <edid_print_v14+0xd14>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SYNC) {
   45210:	10c0080c 	andi	r3,r2,32
   45214:	18000926 	beq	r3,zero,4523c <edid_print_v14+0x914>

    			printf("      digital sync  : composite");
   45218:	010001b4 	movhi	r4,6
   4521c:	21240104 	addi	r4,r4,-28668
   45220:	0048fb80 	call	48fb8 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SERRATION)
   45224:	88800017 	ldw	r2,0(r17)
   45228:	1080100c 	andi	r2,r2,64
   4522c:	103ff226 	beq	r2,zero,451f8 <__alt_data_end+0xfffde0f8>
            		printf(" with_serrations");
   45230:	010001b4 	movhi	r4,6
   45234:	2123f004 	addi	r4,r4,-28736
   45238:	003ff106 	br	45200 <__alt_data_end+0xfffde100>
        		else
        			printf(" without_serrations");

        		printf("\n");

    		} else if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_SYNC) {
   4523c:	1080200c 	andi	r2,r2,128
   45240:	1000fe26 	beq	r2,zero,4563c <edid_print_v14+0xd14>

    			printf("      digital sync  : seperate");
   45244:	010001b4 	movhi	r4,6
   45248:	21240904 	addi	r4,r4,-28636
   4524c:	0048fb80 	call	48fb8 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_VSYNC_N)
   45250:	88800017 	ldw	r2,0(r17)
   45254:	1080400c 	andi	r2,r2,256
   45258:	10000326 	beq	r2,zero,45268 <edid_print_v14+0x940>
					printf(" vsync_n");
   4525c:	010001b4 	movhi	r4,6
   45260:	21241104 	addi	r4,r4,-28604
   45264:	00000206 	br	45270 <edid_print_v14+0x948>
				else
					printf(" vsync_p");
   45268:	010001b4 	movhi	r4,6
   4526c:	21241404 	addi	r4,r4,-28592
   45270:	0048fb80 	call	48fb8 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_HSYNC_N)
   45274:	88800017 	ldw	r2,0(r17)
   45278:	1081000c 	andi	r2,r2,1024
   4527c:	10000326 	beq	r2,zero,4528c <edid_print_v14+0x964>
					printf(" hsync_n");
   45280:	010001b4 	movhi	r4,6
   45284:	21241704 	addi	r4,r4,-28580
   45288:	003fdd06 	br	45200 <__alt_data_end+0xfffde100>
				else
					printf(" hsync_p");
   4528c:	010001b4 	movhi	r4,6
   45290:	21241a04 	addi	r4,r4,-28568
   45294:	003fda06 	br	45200 <__alt_data_end+0xfffde100>

        		printf("\n");
    		}

    	} else if (edid->descriptors[i].type == DT_DISPLAY_DESCRIPTOR) {
   45298:	00c00044 	movi	r3,1
   4529c:	10c0e71e 	bne	r2,r3,4563c <edid_print_v14+0xd14>

    		printf("\n  [%d] DD -- display descriptor\n", i);
   452a0:	d9400317 	ldw	r5,12(sp)
   452a4:	010001b4 	movhi	r4,6
   452a8:	2125f804 	addi	r4,r4,-26656
   452ac:	0048fb80 	call	48fb8 <printf>

        	switch (edid->descriptors[i].tag) {  // tag
   452b0:	88bff017 	ldw	r2,-64(r17)
   452b4:	00c00204 	movi	r3,8
   452b8:	10bfc244 	addi	r2,r2,-247
   452bc:	1880df36 	bltu	r3,r2,4563c <edid_print_v14+0xd14>
   452c0:	100490ba 	slli	r2,r2,2
   452c4:	00c00134 	movhi	r3,4
   452c8:	18d4b604 	addi	r3,r3,21208
   452cc:	10c5883a 	add	r2,r2,r3
   452d0:	10800017 	ldw	r2,0(r2)
   452d4:	1000683a 	jmp	r2
   452d8:	000455a8 	cmpgeui	zero,zero,4438
   452dc:	00045598 	cmpnei	zero,zero,4438
   452e0:	0004558c 	andi	zero,zero,4438
   452e4:	000454c8 	cmpgei	zero,zero,4435
   452e8:	00045458 	cmpnei	zero,zero,4433
   452ec:	00045444 	movi	zero,4433
   452f0:	00045308 	cmpgei	zero,zero,4428
   452f4:	00045444 	movi	zero,4433
   452f8:	000452fc 	xorhi	zero,zero,4427
            case DTAG_PRODUCT_SERIAL:
            	printf("      product serial : %s\n", edid->descriptors[i].serial);
   452fc:	010001b4 	movhi	r4,6
   45300:	21260104 	addi	r4,r4,-26620
   45304:	00005106 	br	4544c <edid_print_v14+0xb24>
            	printf("      data string : %s\n", edid->descriptors[i].string);
                break;
            case DTAG_RANGE_LIMIT:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;

        		printf("      range limits and additional timing ...\n");
   45308:	010001b4 	movhi	r4,6
   4530c:	21260e04 	addi	r4,r4,-26568
   45310:	00490cc0 	call	490cc <puts>

        		printf("      horizonatal rate minimum : %d (kHz)\n", edid->descriptors[i].range_limits.h_min);
   45314:	b9400017 	ldw	r5,0(r23)
   45318:	010001b4 	movhi	r4,6
   4531c:	21261a04 	addi	r4,r4,-26520
   45320:	0048fb80 	call	48fb8 <printf>
        		printf("      horizontal rate maximum  : %d (KHz)\n", edid->descriptors[i].range_limits.h_max);
   45324:	b1400017 	ldw	r5,0(r22)
   45328:	010001b4 	movhi	r4,6
   4532c:	21262504 	addi	r4,r4,-26476
   45330:	0048fb80 	call	48fb8 <printf>

        		switch (edid->descriptors[i].range_limits.h_offset) {
   45334:	88bff217 	ldw	r2,-56(r17)
   45338:	00c00044 	movi	r3,1
   4533c:	10c00626 	beq	r2,r3,45358 <edid_print_v14+0xa30>
   45340:	00c00084 	movi	r3,2
   45344:	10c00726 	beq	r2,r3,45364 <edid_print_v14+0xa3c>
   45348:	1000091e 	bne	r2,zero,45370 <edid_print_v14+0xa48>
            	case HRO_ZERO:
            		printf("      horizontal rate offset   : no offset\n");
   4534c:	010001b4 	movhi	r4,6
   45350:	21263004 	addi	r4,r4,-26432
   45354:	00000506 	br	4536c <edid_print_v14+0xa44>
            		break;
            	case HRO_MAX_255_MIN_ZERO:
            		printf("      horizontal rate offset   : max)+255kHz\n");
   45358:	010001b4 	movhi	r4,6
   4535c:	21263b04 	addi	r4,r4,-26388
   45360:	00000206 	br	4536c <edid_print_v14+0xa44>
            		break;
            	case HRO_MAX_255_MIN_255:
            		printf("      horizontal rate offset   : max)+255kHz min)+255kHz\n");
   45364:	010001b4 	movhi	r4,6
   45368:	21264704 	addi	r4,r4,-26340
   4536c:	00490cc0 	call	490cc <puts>
            		break;
            	}

        		printf("      vertical rate minimum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_min);
   45370:	897ff317 	ldw	r5,-52(r17)
   45374:	010001b4 	movhi	r4,6
   45378:	21265604 	addi	r4,r4,-26280
   4537c:	0048fb80 	call	48fb8 <printf>
        		printf("      vertical rate maximum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_max);
   45380:	e1400017 	ldw	r5,0(fp)
   45384:	010001b4 	movhi	r4,6
   45388:	21266104 	addi	r4,r4,-26236
   4538c:	0048fb80 	call	48fb8 <printf>

        		switch (edid->descriptors[i].range_limits.v_offset) {
   45390:	a0800017 	ldw	r2,0(r20)
   45394:	00c00044 	movi	r3,1
   45398:	10c00626 	beq	r2,r3,453b4 <edid_print_v14+0xa8c>
   4539c:	00c00084 	movi	r3,2
   453a0:	10c00726 	beq	r2,r3,453c0 <edid_print_v14+0xa98>
   453a4:	1000091e 	bne	r2,zero,453cc <edid_print_v14+0xaa4>
            	case VRO_ZERO:
            		printf("      vertical rate offset     : no offset\n");
   453a8:	010001b4 	movhi	r4,6
   453ac:	21266c04 	addi	r4,r4,-26192
   453b0:	00000506 	br	453c8 <edid_print_v14+0xaa0>
            		break;
            	case VRO_MAX_255_MIN_ZERO:
            		printf("      vertical rate offset     : max)+255Hz\n");
   453b4:	010001b4 	movhi	r4,6
   453b8:	21267704 	addi	r4,r4,-26148
   453bc:	00000206 	br	453c8 <edid_print_v14+0xaa0>
            		break;
            	case VRO_MAX_255_MIN_255:
            		printf("      vertical rate offset     : max)+255Hz && min)+255Hz\n");
   453c0:	010001b4 	movhi	r4,6
   453c4:	21268204 	addi	r4,r4,-26104
   453c8:	00490cc0 	call	490cc <puts>
            		break;
            	}

        		printf("      pixel clock maximum      : %d (MHz)\n", edid->descriptors[i].range_limits.p_max);
   453cc:	a9400017 	ldw	r5,0(r21)
   453d0:	010001b4 	movhi	r4,6
   453d4:	21269104 	addi	r4,r4,-26044
   453d8:	0048fb80 	call	48fb8 <printf>

                // additional timing support flags
            	if (edid->descriptors[i].range_limits.timing_flags == 0) {
   453dc:	98800017 	ldw	r2,0(r19)
   453e0:	1000031e 	bne	r2,zero,453f0 <edid_print_v14+0xac8>
            		printf("      additional timing flags  : none\n");
   453e4:	010001b4 	movhi	r4,6
   453e8:	21269c04 	addi	r4,r4,-26000
   453ec:	00006c06 	br	455a0 <edid_print_v14+0xc78>
            	} else {
            		printf("      additional timing flags  : ");
   453f0:	010001b4 	movhi	r4,6
   453f4:	2126a604 	addi	r4,r4,-25960
   453f8:	0048fb80 	call	48fb8 <printf>

            		if (edid->descriptors[i].range_limits.timing_flags & TF_DEFAULT_GTF)
                		printf("default_GTF ");
            		if (edid->descriptors[i].range_limits.timing_flags & TF_RANGE_LIMITS)
   453fc:	98800017 	ldw	r2,0(r19)
   45400:	1080004c 	andi	r2,r2,1
   45404:	10000326 	beq	r2,zero,45414 <edid_print_v14+0xaec>
                		printf("none ");
   45408:	010001b4 	movhi	r4,6
   4540c:	2126af04 	addi	r4,r4,-25924
   45410:	0048fb80 	call	48fb8 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_SECOND_GTF)
   45414:	98800017 	ldw	r2,0(r19)
   45418:	1080008c 	andi	r2,r2,2
   4541c:	10000326 	beq	r2,zero,4542c <edid_print_v14+0xb04>
                		printf("second_GTF ");
   45420:	010001b4 	movhi	r4,6
   45424:	2126b104 	addi	r4,r4,-25916
   45428:	0048fb80 	call	48fb8 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_CVT)
   4542c:	98800017 	ldw	r2,0(r19)
   45430:	1080010c 	andi	r2,r2,4
   45434:	103f7326 	beq	r2,zero,45204 <__alt_data_end+0xfffde104>
                		printf("CVT ");
   45438:	010001b4 	movhi	r4,6
   4543c:	2126b404 	addi	r4,r4,-25904
   45440:	003f6f06 	br	45200 <__alt_data_end+0xfffde100>
            	}

                break;

            case DTAG_PRODUCT_NAME:
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
   45444:	010001b4 	movhi	r4,6
   45448:	21260804 	addi	r4,r4,-26592
   4544c:	a00b883a 	mov	r5,r20
   45450:	0048fb80 	call	48fb8 <printf>
                break;
   45454:	00007906 	br	4563c <edid_print_v14+0xd14>
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");
   45458:	010001b4 	movhi	r4,6
   4545c:	2126b604 	addi	r4,r4,-25896
   45460:	00490cc0 	call	490cc <puts>

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   45464:	89bff217 	ldw	r6,-56(r17)
   45468:	89fff317 	ldw	r7,-52(r17)
   4546c:	e1000017 	ldw	r4,0(fp)
   45470:	d9800615 	stw	r6,24(sp)
   45474:	d9c00715 	stw	r7,28(sp)
   45478:	0047c280 	call	47c28 <__extendsfdf2>
   4547c:	d8c00115 	stw	r3,4(sp)
   45480:	d8800015 	stw	r2,0(sp)
   45484:	a1400017 	ldw	r5,0(r20)
   45488:	d9800617 	ldw	r6,24(sp)
   4548c:	d9c00717 	ldw	r7,28(sp)
   45490:	010001b4 	movhi	r4,6
   45494:	2126bc04 	addi	r4,r4,-25872
   45498:	0048fb80 	call	48fb8 <printf>
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   4549c:	99000017 	ldw	r4,0(r19)
   454a0:	0047c280 	call	47c28 <__extendsfdf2>
   454a4:	d8800015 	stw	r2,0(sp)
   454a8:	d8c00115 	stw	r3,4(sp)
   454ac:	b9400017 	ldw	r5,0(r23)
   454b0:	b1800017 	ldw	r6,0(r22)
   454b4:	a9c00017 	ldw	r7,0(r21)
   454b8:	010001b4 	movhi	r4,6
   454bc:	2126ca04 	addi	r4,r4,-25816
   454c0:	0048fb80 	call	48fb8 <printf>
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
					edid->descriptors[i].white_point[1].gamma);

                break;
   454c4:	00005d06 	br	4563c <edid_print_v14+0xd14>

            case DTAG_STANDARD_TIMING:
            {
            	int j;

            	printf("      extra standard timing ...\n");
   454c8:	010001b4 	movhi	r4,6
   454cc:	2126d804 	addi	r4,r4,-25760
   454d0:	00490cc0 	call	490cc <puts>
   454d4:	88c00404 	addi	r3,r17,16
   454d8:	d8c00415 	stw	r3,16(sp)
   454dc:	00c00244 	movi	r3,9
   454e0:	d8c00515 	stw	r3,20(sp)

            	for (j = 0; j < 6; ++j) {
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
   454e4:	d8c00417 	ldw	r3,16(sp)
   454e8:	19c00017 	ldw	r7,0(r3)
   454ec:	38001e26 	beq	r7,zero,45568 <edid_print_v14+0xc40>
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
   454f0:	19bffe17 	ldw	r6,-8(r3)
   454f4:	d9400517 	ldw	r5,20(sp)
   454f8:	010001b4 	movhi	r4,6
   454fc:	2125e604 	addi	r4,r4,-26728
   45500:	0048fb80 	call	48fb8 <printf>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
   45504:	d8c00417 	ldw	r3,16(sp)
   45508:	18bfff17 	ldw	r2,-4(r3)
   4550c:	00c00044 	movi	r3,1
   45510:	10c00c26 	beq	r2,r3,45544 <edid_print_v14+0xc1c>
   45514:	18800416 	blt	r3,r2,45528 <edid_print_v14+0xc00>
   45518:	1000111e 	bne	r2,zero,45560 <edid_print_v14+0xc38>
            			case ST_AR_16_10:
            				printf("16:10\n");
   4551c:	010001b4 	movhi	r4,6
   45520:	2125ed04 	addi	r4,r4,-26700
   45524:	00000906 	br	4554c <edid_print_v14+0xc24>
            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
   45528:	00c00084 	movi	r3,2
   4552c:	10c00926 	beq	r2,r3,45554 <edid_print_v14+0xc2c>
   45530:	00c000c4 	movi	r3,3
   45534:	10c00a1e 	bne	r2,r3,45560 <edid_print_v14+0xc38>
            				break;
            			case ST_AR_5_4:
            				printf("5:4\n");
            				break;
            			case ST_AR_16_9:
            				printf("16:9\n");
   45538:	010001b4 	movhi	r4,6
   4553c:	2125f104 	addi	r4,r4,-26684
   45540:	00000206 	br	4554c <edid_print_v14+0xc24>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
            			case ST_AR_16_10:
            				printf("16:10\n");
            				break;
            			case ST_AR_4_3:
            				printf("4:3\n");
   45544:	010001b4 	movhi	r4,6
   45548:	2125ef04 	addi	r4,r4,-26692
   4554c:	00490cc0 	call	490cc <puts>
            				break;
   45550:	00000506 	br	45568 <edid_print_v14+0xc40>
            			case ST_AR_5_4:
            				printf("5:4\n");
   45554:	010001b4 	movhi	r4,6
   45558:	2125f004 	addi	r4,r4,-26688
   4555c:	003ffb06 	br	4554c <__alt_data_end+0xfffde44c>
            				break;
            			case ST_AR_16_9:
            				printf("16:9\n");
            				break;
            			default:
            				printf("\n");
   45560:	01000284 	movi	r4,10
   45564:	0048ffc0 	call	48ffc <putchar>
   45568:	d8c00417 	ldw	r3,16(sp)
            {
            	int j;

            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
   4556c:	008003c4 	movi	r2,15
   45570:	18c00304 	addi	r3,r3,12
   45574:	d8c00415 	stw	r3,16(sp)
   45578:	d8c00517 	ldw	r3,20(sp)
   4557c:	18c00044 	addi	r3,r3,1
   45580:	d8c00515 	stw	r3,20(sp)
   45584:	18bfd71e 	bne	r3,r2,454e4 <__alt_data_end+0xfffde3e4>
   45588:	00002c06 	br	4563c <edid_print_v14+0xd14>
                break;
            }

            case DTAG_DCM_DATA:
            	// display color management data
            	printf("      DCM -- display color management data ... (skipped)\n");
   4558c:	010001b4 	movhi	r4,6
   45590:	2126e004 	addi	r4,r4,-25728
   45594:	00000206 	br	455a0 <edid_print_v14+0xc78>
            	break;

            case DTAG_CVT_TIMING:
            	printf("      CVT -- coordinated video timing ... (skipped)\n");
   45598:	010001b4 	movhi	r4,6
   4559c:	2126ef04 	addi	r4,r4,-25668
   455a0:	00490cc0 	call	490cc <puts>
                break;
   455a4:	00002506 	br	4563c <edid_print_v14+0xd14>
            case DTAG_ESTABLISHED_TIMING_III:
            {
            	int j ;

            	printf("      established timing 3 ...\n");
   455a8:	010001b4 	movhi	r4,6
   455ac:	2126fc04 	addi	r4,r4,-25616
   455b0:	00490cc0 	call	490cc <puts>
   455b4:	88c02b04 	addi	r3,r17,172
   455b8:	8a009104 	addi	r8,r17,580

            	for (j = 0; j < 17; ++j) {
            		if (edid->descriptors[i].timing_3[j].valid)
   455bc:	18800017 	ldw	r2,0(r3)
   455c0:	10001c26 	beq	r2,zero,45634 <edid_print_v14+0xd0c>
            			printf("  [%02d] %03d x %03d @ %02d Hz %s %s\n", i, edid->descriptors[i].timing_3[j].width, edid->descriptors[i].timing_3[j].height, edid->descriptors[i].timing_3[j].refresh, edid->descriptors[i].timing_3[j].interlaced ? "I" : " ", edid->descriptors[i].timing_3[j].rb ? "RB" : " ");
   455c4:	18800417 	ldw	r2,16(r3)
   455c8:	19800117 	ldw	r6,4(r3)
   455cc:	19c00217 	ldw	r7,8(r3)
   455d0:	19400317 	ldw	r5,12(r3)
   455d4:	1000031e 	bne	r2,zero,455e4 <edid_print_v14+0xcbc>
   455d8:	010001b4 	movhi	r4,6
   455dc:	2128f904 	addi	r4,r4,-23580
   455e0:	00000206 	br	455ec <edid_print_v14+0xcc4>
   455e4:	010001b4 	movhi	r4,6
   455e8:	21242204 	addi	r4,r4,-28536
   455ec:	18800517 	ldw	r2,20(r3)
   455f0:	1000031e 	bne	r2,zero,45600 <edid_print_v14+0xcd8>
   455f4:	008001b4 	movhi	r2,6
   455f8:	10a8f904 	addi	r2,r2,-23580
   455fc:	00000206 	br	45608 <edid_print_v14+0xce0>
   45600:	008001b4 	movhi	r2,6
   45604:	10a42304 	addi	r2,r2,-28532
   45608:	d9400015 	stw	r5,0(sp)
   4560c:	d9400317 	ldw	r5,12(sp)
   45610:	d9000115 	stw	r4,4(sp)
   45614:	010001b4 	movhi	r4,6
   45618:	d8800215 	stw	r2,8(sp)
   4561c:	21270404 	addi	r4,r4,-25584
   45620:	d8c00615 	stw	r3,24(sp)
   45624:	da000715 	stw	r8,28(sp)
   45628:	0048fb80 	call	48fb8 <printf>
   4562c:	da000717 	ldw	r8,28(sp)
   45630:	d8c00617 	ldw	r3,24(sp)
   45634:	18c00604 	addi	r3,r3,24
            {
            	int j ;

            	printf("      established timing 3 ...\n");

            	for (j = 0; j < 17; ++j) {
   45638:	1a3fe01e 	bne	r3,r8,455bc <__alt_data_end+0xfffde4bc>
			}
		}
	}

	printf("\ndescriptors ...\n");
	for (i = 0; i < 4; ++i) {
   4563c:	d8800317 	ldw	r2,12(sp)
   45640:	a5015c04 	addi	r20,r20,1392
   45644:	e7015c04 	addi	fp,fp,1392
   45648:	10800044 	addi	r2,r2,1
   4564c:	d8800315 	stw	r2,12(sp)
   45650:	d8c00317 	ldw	r3,12(sp)
   45654:	00800104 	movi	r2,4
   45658:	bdc15c04 	addi	r23,r23,1392
   4565c:	b5815c04 	addi	r22,r22,1392
   45660:	ad415c04 	addi	r21,r21,1392
   45664:	9cc15c04 	addi	r19,r19,1392
   45668:	8c415c04 	addi	r17,r17,1392
   4566c:	94815c04 	addi	r18,r18,1392
   45670:	18be461e 	bne	r3,r2,44f8c <__alt_data_end+0xfffdde8c>
   45674:	84860b04 	addi	r18,r16,6188
   45678:	0023883a 	mov	r17,zero
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
		switch (edid->ext_data[i].ext_tag) {
   4567c:	05000084 	movi	r20,2
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   45680:	04c00204 	movi	r19,8
		switch (edid->ext_data[i].ext_tag) {
   45684:	90800017 	ldw	r2,0(r18)
   45688:	1500031e 	bne	r2,r20,45698 <edid_print_v14+0xd70>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
   4568c:	8009883a 	mov	r4,r16
   45690:	880b883a 	mov	r5,r17
   45694:	0041c500 	call	41c50 <edid_print_cea>
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   45698:	8c400044 	addi	r17,r17,1
   4569c:	94816f04 	addi	r18,r18,1468
   456a0:	8cfff81e 	bne	r17,r19,45684 <__alt_data_end+0xfffde584>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
			break;
		}
	}
}
   456a4:	dfc01117 	ldw	ra,68(sp)
   456a8:	df001017 	ldw	fp,64(sp)
   456ac:	ddc00f17 	ldw	r23,60(sp)
   456b0:	dd800e17 	ldw	r22,56(sp)
   456b4:	dd400d17 	ldw	r21,52(sp)
   456b8:	dd000c17 	ldw	r20,48(sp)
   456bc:	dcc00b17 	ldw	r19,44(sp)
   456c0:	dc800a17 	ldw	r18,40(sp)
   456c4:	dc400917 	ldw	r17,36(sp)
   456c8:	dc000817 	ldw	r16,32(sp)
   456cc:	dec01204 	addi	sp,sp,72
   456d0:	f800283a 	ret

000456d4 <reg_read>:

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
	bool r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8 *)data);
   456d4:	20800007 	ldb	r2,0(r4)
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
   456d8:	defffe04 	addi	sp,sp,-8
	bool r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8 *)data);
   456dc:	29c03fcc 	andi	r7,r5,255
   456e0:	01000234 	movhi	r4,8
   456e4:	01400234 	movhi	r5,8
   456e8:	d9800015 	stw	r6,0(sp)
   456ec:	21041004 	addi	r4,r4,4160
   456f0:	29440c04 	addi	r5,r5,4144
   456f4:	100d883a 	mov	r6,r2
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
   456f8:	dfc00115 	stw	ra,4(sp)
	bool r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8 *)data);
   456fc:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   45700:	1005003a 	cmpeq	r2,r2,zero
		return -1;

	//usleep(REG_ACCESS_UDELAY);

	return 0;
}
   45704:	0085c83a 	sub	r2,zero,r2
   45708:	dfc00117 	ldw	ra,4(sp)
   4570c:	dec00204 	addi	sp,sp,8
   45710:	f800283a 	ret

00045714 <reg_write>:

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
	//printf("[%02x] <- %02x\n", reg, data);

	bool r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8)data);
   45714:	20800007 	ldb	r2,0(r4)

	return 0;
}

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
   45718:	defffe04 	addi	sp,sp,-8
	//printf("[%02x] <- %02x\n", reg, data);

	bool r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8)data);
   4571c:	29c03fcc 	andi	r7,r5,255
   45720:	31803fcc 	andi	r6,r6,255
   45724:	01000234 	movhi	r4,8
   45728:	01400234 	movhi	r5,8
   4572c:	d9800015 	stw	r6,0(sp)
   45730:	21041004 	addi	r4,r4,4160
   45734:	29440c04 	addi	r5,r5,4144
   45738:	100d883a 	mov	r6,r2

	return 0;
}

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
   4573c:	dfc00115 	stw	ra,4(sp)
	//printf("[%02x] <- %02x\n", reg, data);

	bool r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8)data);
   45740:	0045af40 	call	45af4 <I2C_Write>
	if (!r)
   45744:	1005003a 	cmpeq	r2,r2,zero
		return -1;

	//usleep(REG_ACCESS_UDELAY);

	return 0;
}
   45748:	0085c83a 	sub	r2,zero,r2
   4574c:	dfc00117 	ldw	ra,4(sp)
   45750:	dec00204 	addi	sp,sp,8
   45754:	f800283a 	ret

00045758 <reg_update_bits>:

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   45758:	defff904 	addi	sp,sp,-28
   4575c:	dcc00515 	stw	r19,20(sp)
   45760:	3027883a 	mov	r19,r6
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45764:	21800007 	ldb	r6,0(r4)

	return 0;
}

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   45768:	dc800415 	stw	r18,16(sp)
   4576c:	dc400315 	stw	r17,12(sp)
   45770:	2025883a 	mov	r18,r4
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45774:	2c403fcc 	andi	r17,r5,255
   45778:	d8800104 	addi	r2,sp,4
   4577c:	01000234 	movhi	r4,8
   45780:	01400234 	movhi	r5,8

	return 0;
}

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   45784:	dc000215 	stw	r16,8(sp)
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45788:	d8800015 	stw	r2,0(sp)

	return 0;
}

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   4578c:	3821883a 	mov	r16,r7
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45790:	21041004 	addi	r4,r4,4160
   45794:	29440c04 	addi	r5,r5,4144
   45798:	880f883a 	mov	r7,r17

	return 0;
}

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   4579c:	dfc00615 	stw	ra,24(sp)
	bool r = 0;
	alt_u8 regv = 0;
   457a0:	d8000105 	stb	zero,4(sp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   457a4:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   457a8:	10001226 	beq	r2,zero,457f4 <reg_update_bits+0x9c>
		return -1;

	regv &= ~((alt_u8)mask);
   457ac:	d8c00103 	ldbu	r3,4(sp)
   457b0:	04c4303a 	nor	r2,zero,r19

	regv |= ((alt_u8)data & (alt_u8)mask);
   457b4:	9c20703a 	and	r16,r19,r16

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;

	regv &= ~((alt_u8)mask);
   457b8:	10c6703a 	and	r3,r2,r3

	regv |= ((alt_u8)data & (alt_u8)mask);
   457bc:	1c04b03a 	or	r2,r3,r16

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   457c0:	91800007 	ldb	r6,0(r18)
	if (!r)
		return -1;

	regv &= ~((alt_u8)mask);

	regv |= ((alt_u8)data & (alt_u8)mask);
   457c4:	d8800105 	stb	r2,4(sp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   457c8:	01000234 	movhi	r4,8
   457cc:	10803fcc 	andi	r2,r2,255
   457d0:	01400234 	movhi	r5,8
   457d4:	d8800015 	stw	r2,0(sp)
   457d8:	21041004 	addi	r4,r4,4160
   457dc:	29440c04 	addi	r5,r5,4144
   457e0:	880f883a 	mov	r7,r17
   457e4:	0045af40 	call	45af4 <I2C_Write>
	if (!r)
   457e8:	1005003a 	cmpeq	r2,r2,zero
   457ec:	0085c83a 	sub	r2,zero,r2
   457f0:	00000106 	br	457f8 <reg_update_bits+0xa0>
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;
   457f4:	00bfffc4 	movi	r2,-1
		return -1;

	//usleep(REG_ACCESS_UDELAY);

	return 0;
}
   457f8:	dfc00617 	ldw	ra,24(sp)
   457fc:	dcc00517 	ldw	r19,20(sp)
   45800:	dc800417 	ldw	r18,16(sp)
   45804:	dc400317 	ldw	r17,12(sp)
   45808:	dc000217 	ldw	r16,8(sp)
   4580c:	dec00704 	addi	sp,sp,28
   45810:	f800283a 	ret

00045814 <reg_or_bits>:

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
   45814:	defffa04 	addi	sp,sp,-24
   45818:	dc800415 	stw	r18,16(sp)
   4581c:	3025883a 	mov	r18,r6
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45820:	21800007 	ldb	r6,0(r4)

	return 0;
}

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
   45824:	dc400315 	stw	r17,12(sp)
   45828:	dc000215 	stw	r16,8(sp)
   4582c:	2023883a 	mov	r17,r4
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45830:	2c003fcc 	andi	r16,r5,255
   45834:	d8800104 	addi	r2,sp,4
   45838:	01000234 	movhi	r4,8
   4583c:	01400234 	movhi	r5,8
   45840:	d8800015 	stw	r2,0(sp)
   45844:	21041004 	addi	r4,r4,4160
   45848:	29440c04 	addi	r5,r5,4144
   4584c:	800f883a 	mov	r7,r16

	return 0;
}

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
   45850:	dfc00515 	stw	ra,20(sp)
	bool r = 0;
	alt_u8 regv = 0;
   45854:	d8000105 	stb	zero,4(sp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   45858:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   4585c:	10000f26 	beq	r2,zero,4589c <reg_or_bits+0x88>
		return -1;

	regv |= (alt_u8)data;
   45860:	d8800103 	ldbu	r2,4(sp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   45864:	89800007 	ldb	r6,0(r17)
   45868:	01000234 	movhi	r4,8

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;

	regv |= (alt_u8)data;
   4586c:	9084b03a 	or	r2,r18,r2
   45870:	d8800105 	stb	r2,4(sp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   45874:	01400234 	movhi	r5,8
   45878:	10803fcc 	andi	r2,r2,255
   4587c:	d8800015 	stw	r2,0(sp)
   45880:	21041004 	addi	r4,r4,4160
   45884:	29440c04 	addi	r5,r5,4144
   45888:	800f883a 	mov	r7,r16
   4588c:	0045af40 	call	45af4 <I2C_Write>
	if (!r)
   45890:	1005003a 	cmpeq	r2,r2,zero
   45894:	0085c83a 	sub	r2,zero,r2
   45898:	00000106 	br	458a0 <reg_or_bits+0x8c>
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;
   4589c:	00bfffc4 	movi	r2,-1
		return -1;

	//usleep(REG_ACCESS_UDELAY);

	return 0;
}
   458a0:	dfc00517 	ldw	ra,20(sp)
   458a4:	dc800417 	ldw	r18,16(sp)
   458a8:	dc400317 	ldw	r17,12(sp)
   458ac:	dc000217 	ldw	r16,8(sp)
   458b0:	dec00604 	addi	sp,sp,24
   458b4:	f800283a 	ret

000458b8 <reg_clear_bits>:

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
   458b8:	defffa04 	addi	sp,sp,-24
   458bc:	dc000215 	stw	r16,8(sp)
   458c0:	3021883a 	mov	r16,r6
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   458c4:	21800007 	ldb	r6,0(r4)

	return 0;
}

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
   458c8:	dc800415 	stw	r18,16(sp)
   458cc:	dc400315 	stw	r17,12(sp)
   458d0:	2025883a 	mov	r18,r4
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   458d4:	2c403fcc 	andi	r17,r5,255
   458d8:	d8800104 	addi	r2,sp,4
   458dc:	01000234 	movhi	r4,8
   458e0:	01400234 	movhi	r5,8
   458e4:	d8800015 	stw	r2,0(sp)
   458e8:	21041004 	addi	r4,r4,4160
   458ec:	29440c04 	addi	r5,r5,4144
   458f0:	880f883a 	mov	r7,r17

	return 0;
}

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
   458f4:	dfc00515 	stw	ra,20(sp)
	bool r = 0;
	alt_u8 regv = 0;
   458f8:	d8000105 	stb	zero,4(sp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   458fc:	0045cac0 	call	45cac <I2C_Read>
	if (!r)
   45900:	10001026 	beq	r2,zero,45944 <reg_clear_bits+0x8c>
		return -1;

	regv &= ~((alt_u8)mask);
   45904:	d8800103 	ldbu	r2,4(sp)
   45908:	0420303a 	nor	r16,zero,r16

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   4590c:	91800007 	ldb	r6,0(r18)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;

	regv &= ~((alt_u8)mask);
   45910:	8084703a 	and	r2,r16,r2
   45914:	d8800105 	stb	r2,4(sp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   45918:	01000234 	movhi	r4,8
   4591c:	10803fcc 	andi	r2,r2,255
   45920:	01400234 	movhi	r5,8
   45924:	d8800015 	stw	r2,0(sp)
   45928:	21041004 	addi	r4,r4,4160
   4592c:	29440c04 	addi	r5,r5,4144
   45930:	880f883a 	mov	r7,r17
   45934:	0045af40 	call	45af4 <I2C_Write>
	if (!r)
   45938:	1005003a 	cmpeq	r2,r2,zero
   4593c:	0085c83a 	sub	r2,zero,r2
   45940:	00000106 	br	45948 <reg_clear_bits+0x90>
	bool r = 0;
	alt_u8 regv = 0;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
	if (!r)
		return -1;
   45944:	00bfffc4 	movi	r2,-1
		return -1;

	//usleep(REG_ACCESS_UDELAY);

	return 0;
}
   45948:	dfc00517 	ldw	ra,20(sp)
   4594c:	dc800417 	ldw	r18,16(sp)
   45950:	dc400317 	ldw	r17,12(sp)
   45954:	dc000217 	ldw	r16,8(sp)
   45958:	dec00604 	addi	sp,sp,24
   4595c:	f800283a 	ret

00045960 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   45960:	defffb04 	addi	sp,sp,-20
   45964:	dc800215 	stw	r18,8(sp)
   45968:	dc400115 	stw	r17,4(sp)
   4596c:	dc000015 	stw	r16,0(sp)
   45970:	dfc00415 	stw	ra,16(sp)
   45974:	dcc00315 	stw	r19,12(sp)
   45978:	2025883a 	mov	r18,r4
   4597c:	2823883a 	mov	r17,r5

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   45980:	04000044 	movi	r16,1
   45984:	2c000135 	stwio	r16,4(r5)



    // start condition
    SDA_HIGH(data_base); // data high
   45988:	2c000035 	stwio	r16,0(r5)
    SCL_HIGH(clk_base);
   4598c:	24000035 	stwio	r16,0(r4)
    SCL_DELAY;
   45990:	8009883a 	mov	r4,r16
   45994:	00553700 	call	55370 <usleep>

    SDA_LOW(data_base); // data low
   45998:	0027883a 	mov	r19,zero
   4599c:	8cc00035 	stwio	r19,0(r17)
    SCL_DELAY;
   459a0:	8009883a 	mov	r4,r16
   459a4:	00553700 	call	55370 <usleep>
    SCL_LOW(clk_base); // clock low
   459a8:	94c00035 	stwio	r19,0(r18)
    SCL_DELAY;
   459ac:	8009883a 	mov	r4,r16
}
   459b0:	dfc00417 	ldw	ra,16(sp)
   459b4:	dcc00317 	ldw	r19,12(sp)
   459b8:	dc800217 	ldw	r18,8(sp)
   459bc:	dc400117 	ldw	r17,4(sp)
   459c0:	dc000017 	ldw	r16,0(sp)
   459c4:	dec00504 	addi	sp,sp,20
    SCL_DELAY;

    SDA_LOW(data_base); // data low
    SCL_DELAY;
    SCL_LOW(clk_base); // clock low
    SCL_DELAY;
   459c8:	00553701 	jmpi	55370 <usleep>

000459cc <i2c_stop>:
}

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   459cc:	defffd04 	addi	sp,sp,-12
   459d0:	dc400115 	stw	r17,4(sp)
   459d4:	dc000015 	stw	r16,0(sp)
   459d8:	dfc00215 	stw	ra,8(sp)
   459dc:	2823883a 	mov	r17,r5
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
   459e0:	04000044 	movi	r16,1
   459e4:	2c000135 	stwio	r16,4(r5)
    SDA_LOW(data_base); // Data Low
   459e8:	28000035 	stwio	zero,0(r5)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
   459ec:	24000035 	stwio	r16,0(r4)
    SCL_DELAY; // clock high long delay
   459f0:	8009883a 	mov	r4,r16
   459f4:	00553700 	call	55370 <usleep>
    SDA_HIGH(data_base); // data high
   459f8:	8c000035 	stwio	r16,0(r17)
    SCL_DELAY; // data high delay
   459fc:	8009883a 	mov	r4,r16



}
   45a00:	dfc00217 	ldw	ra,8(sp)
   45a04:	dc400117 	ldw	r17,4(sp)
   45a08:	dc000017 	ldw	r16,0(sp)
   45a0c:	dec00304 	addi	sp,sp,12
    SDA_LOW(data_base); // Data Low
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
    SCL_DELAY; // clock high long delay
    SDA_HIGH(data_base); // data high
    SCL_DELAY; // data high delay
   45a10:	00553701 	jmpi	55370 <usleep>

00045a14 <i2c_write>:



}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   45a14:	defff704 	addi	sp,sp,-36
   45a18:	ddc00715 	stw	r23,28(sp)
   45a1c:	dd800615 	stw	r22,24(sp)
   45a20:	dd000415 	stw	r20,16(sp)
   45a24:	dc800215 	stw	r18,8(sp)
   45a28:	dc400115 	stw	r17,4(sp)
   45a2c:	dfc00815 	stw	ra,32(sp)
   45a30:	dd400515 	stw	r21,20(sp)
   45a34:	dcc00315 	stw	r19,12(sp)
   45a38:	dc000015 	stw	r16,0(sp)
   45a3c:	2023883a 	mov	r17,r4
   45a40:	2829883a 	mov	r20,r5
   45a44:	302f883a 	mov	r23,r6
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
   45a48:	2d800104 	addi	r22,r5,4
   45a4c:	04800044 	movi	r18,1
   45a50:	b4800035 	stwio	r18,0(r22)
   45a54:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
   45a58:	04ffe004 	movi	r19,-128
    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   45a5c:	88000035 	stwio	zero,0(r17)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   45a60:	9dc4703a 	and	r2,r19,r23
   45a64:	10803fcc 	andi	r2,r2,255
   45a68:	10000226 	beq	r2,zero,45a74 <i2c_write+0x60>
            SDA_HIGH(data_base);
   45a6c:	a4800035 	stwio	r18,0(r20)
   45a70:	00000106 	br	45a78 <i2c_write+0x64>
        }else{
            SDA_LOW(data_base);
   45a74:	a0000035 	stwio	zero,0(r20)
        }
        Mask >>= 1; // there is a delay in this command
   45a78:	9cc03fcc 	andi	r19,r19,255
   45a7c:	9826d07a 	srli	r19,r19,1
        // clock high
        SCL_HIGH(clk_base);
   45a80:	04000044 	movi	r16,1
   45a84:	8c800035 	stwio	r18,0(r17)
        SCL_DELAY;
   45a88:	8009883a 	mov	r4,r16
   45a8c:	00553700 	call	55370 <usleep>
        SCL_LOW(clk_base);
   45a90:	88000035 	stwio	zero,0(r17)
        SCL_DELAY;
   45a94:	8009883a 	mov	r4,r16
   45a98:	ad7fffc4 	addi	r21,r21,-1
   45a9c:	00553700 	call	55370 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
   45aa0:	a83fee1e 	bne	r21,zero,45a5c <__alt_data_end+0xfffde95c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   45aa4:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   45aa8:	8c000035 	stwio	r16,0(r17)
    SCL_DELAY;  // clock high delay
   45aac:	8009883a 	mov	r4,r16
   45ab0:	00553700 	call	55370 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   45ab4:	a4800037 	ldwio	r18,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
   45ab8:	88000035 	stwio	zero,0(r17)
    SCL_DELAY; // clock low delay
   45abc:	8009883a 	mov	r4,r16
   45ac0:	00553700 	call	55370 <usleep>
    return bAck;
}
   45ac4:	9005003a 	cmpeq	r2,r18,zero
   45ac8:	dfc00817 	ldw	ra,32(sp)
   45acc:	ddc00717 	ldw	r23,28(sp)
   45ad0:	dd800617 	ldw	r22,24(sp)
   45ad4:	dd400517 	ldw	r21,20(sp)
   45ad8:	dd000417 	ldw	r20,16(sp)
   45adc:	dcc00317 	ldw	r19,12(sp)
   45ae0:	dc800217 	ldw	r18,8(sp)
   45ae4:	dc400117 	ldw	r17,4(sp)
   45ae8:	dc000017 	ldw	r16,0(sp)
   45aec:	dec00904 	addi	sp,sp,36
   45af0:	f800283a 	ret

00045af4 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   45af4:	defffa04 	addi	sp,sp,-24
   45af8:	dd000415 	stw	r20,16(sp)
   45afc:	dcc00315 	stw	r19,12(sp)
   45b00:	dc800215 	stw	r18,8(sp)
   45b04:	dc400115 	stw	r17,4(sp)
   45b08:	dc000015 	stw	r16,0(sp)
   45b0c:	dfc00515 	stw	ra,20(sp)
   45b10:	2021883a 	mov	r16,r4
   45b14:	2823883a 	mov	r17,r5
   45b18:	3029883a 	mov	r20,r6
   45b1c:	3827883a 	mov	r19,r7
   45b20:	dc800617 	ldw	r18,24(sp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45b24:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45b28:	8009883a 	mov	r4,r16
   45b2c:	880b883a 	mov	r5,r17
   45b30:	a1803fcc 	andi	r6,r20,255
   45b34:	0045a140 	call	45a14 <i2c_write>
   45b38:	10000b26 	beq	r2,zero,45b68 <I2C_Write+0x74>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45b3c:	8009883a 	mov	r4,r16
   45b40:	880b883a 	mov	r5,r17
   45b44:	99803fcc 	andi	r6,r19,255
   45b48:	0045a140 	call	45a14 <i2c_write>
   45b4c:	10000626 	beq	r2,zero,45b68 <I2C_Write+0x74>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   45b50:	91803fcc 	andi	r6,r18,255
   45b54:	8009883a 	mov	r4,r16
   45b58:	880b883a 	mov	r5,r17
   45b5c:	0045a140 	call	45a14 <i2c_write>
   45b60:	1024c03a 	cmpne	r18,r2,zero
   45b64:	00000106 	br	45b6c <I2C_Write+0x78>
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   45b68:	0025883a 	mov	r18,zero
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   45b6c:	8009883a 	mov	r4,r16
   45b70:	880b883a 	mov	r5,r17
   45b74:	00459cc0 	call	459cc <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   45b78:	0106d604 	movi	r4,7000
   45b7c:	00553700 	call	55370 <usleep>

    return bSuccess;


}
   45b80:	9005883a 	mov	r2,r18
   45b84:	dfc00517 	ldw	ra,20(sp)
   45b88:	dd000417 	ldw	r20,16(sp)
   45b8c:	dcc00317 	ldw	r19,12(sp)
   45b90:	dc800217 	ldw	r18,8(sp)
   45b94:	dc400117 	ldw	r17,4(sp)
   45b98:	dc000017 	ldw	r16,0(sp)
   45b9c:	dec00604 	addi	sp,sp,24
   45ba0:	f800283a 	ret

00045ba4 <i2c_read>:
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   45ba4:	defff604 	addi	sp,sp,-40
   45ba8:	ddc00715 	stw	r23,28(sp)
   45bac:	dd800615 	stw	r22,24(sp)
   45bb0:	dd400515 	stw	r21,20(sp)
   45bb4:	dc800215 	stw	r18,8(sp)
   45bb8:	dc000015 	stw	r16,0(sp)
   45bbc:	dfc00915 	stw	ra,36(sp)
   45bc0:	df000815 	stw	fp,32(sp)
   45bc4:	dd000415 	stw	r20,16(sp)
   45bc8:	dcc00315 	stw	r19,12(sp)
   45bcc:	dc400115 	stw	r17,4(sp)
   45bd0:	2021883a 	mov	r16,r4
   45bd4:	2825883a 	mov	r18,r5
   45bd8:	302d883a 	mov	r22,r6
   45bdc:	382f883a 	mov	r23,r7
    alt_u8 Data=0;
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
   45be0:	2d400104 	addi	r21,r5,4
   45be4:	a8000035 	stwio	zero,0(r21)
    SCL_LOW(clk_base); // clock low
   45be8:	20000035 	stwio	zero,0(r4)
    SCL_DELAY; // clock low delay
   45bec:	01000044 	movi	r4,1
   45bf0:	00553700 	call	55370 <usleep>
   45bf4:	05000204 	movi	r20,8
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
   45bf8:	0023883a 	mov	r17,zero
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
        SCL_HIGH(clk_base);  // clock high
   45bfc:	07000044 	movi	fp,1
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
   45c00:	8c67883a 	add	r19,r17,r17
   45c04:	9823883a 	mov	r17,r19
        SCL_HIGH(clk_base);  // clock high
   45c08:	87000035 	stwio	fp,0(r16)
        SCL_DELAY;
   45c0c:	01000044 	movi	r4,1
   45c10:	00553700 	call	55370 <usleep>
        if (SDA_READ(data_base))  // read data
   45c14:	90800037 	ldwio	r2,0(r18)
   45c18:	10000126 	beq	r2,zero,45c20 <i2c_read+0x7c>
            Data |= 0x01;
   45c1c:	9c400054 	ori	r17,r19,1
        SCL_LOW(clk_base);  // clock log
   45c20:	80000035 	stwio	zero,0(r16)
        SCL_DELAY;
   45c24:	04c00044 	movi	r19,1
   45c28:	9809883a 	mov	r4,r19
   45c2c:	a53fffc4 	addi	r20,r20,-1
   45c30:	00553700 	call	55370 <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   45c34:	a03ff21e 	bne	r20,zero,45c00 <__alt_data_end+0xfffdeb00>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   45c38:	80000035 	stwio	zero,0(r16)
    SDA_DIR_OUT(data_base);  // set data write mode
   45c3c:	acc00035 	stwio	r19,0(r21)
    if (bAck)
   45c40:	b8000226 	beq	r23,zero,45c4c <i2c_read+0xa8>
        SDA_LOW(data_base);
   45c44:	90000035 	stwio	zero,0(r18)
   45c48:	00000106 	br	45c50 <i2c_read+0xac>
    else
        SDA_HIGH(data_base);
   45c4c:	94c00035 	stwio	r19,0(r18)
    SCL_HIGH(clk_base); // clock high
   45c50:	04c00044 	movi	r19,1
   45c54:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY; // clock high  delay
   45c58:	9809883a 	mov	r4,r19
   45c5c:	00553700 	call	55370 <usleep>
    SCL_LOW(clk_base); // clock low
   45c60:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
   45c64:	9809883a 	mov	r4,r19
   45c68:	00553700 	call	55370 <usleep>
    SDA_LOW(data_base);  // data low
   45c6c:	90000035 	stwio	zero,0(r18)
    SCL_DELAY; // data low delay
   45c70:	9809883a 	mov	r4,r19
   45c74:	00553700 	call	55370 <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
   45c78:	b4400005 	stb	r17,0(r22)
}
   45c7c:	dfc00917 	ldw	ra,36(sp)
   45c80:	df000817 	ldw	fp,32(sp)
   45c84:	ddc00717 	ldw	r23,28(sp)
   45c88:	dd800617 	ldw	r22,24(sp)
   45c8c:	dd400517 	ldw	r21,20(sp)
   45c90:	dd000417 	ldw	r20,16(sp)
   45c94:	dcc00317 	ldw	r19,12(sp)
   45c98:	dc800217 	ldw	r18,8(sp)
   45c9c:	dc400117 	ldw	r17,4(sp)
   45ca0:	dc000017 	ldw	r16,0(sp)
   45ca4:	dec00a04 	addi	sp,sp,40
   45ca8:	f800283a 	ret

00045cac <I2C_Read>:
    return bSuccess;


}

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   45cac:	defffb04 	addi	sp,sp,-20
   45cb0:	dcc00315 	stw	r19,12(sp)
   45cb4:	dc800215 	stw	r18,8(sp)
   45cb8:	dc400115 	stw	r17,4(sp)
   45cbc:	dc000015 	stw	r16,0(sp)
   45cc0:	dfc00415 	stw	ra,16(sp)
   45cc4:	2023883a 	mov	r17,r4
   45cc8:	2821883a 	mov	r16,r5
   45ccc:	3025883a 	mov	r18,r6
   45cd0:	3827883a 	mov	r19,r7
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45cd4:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45cd8:	8809883a 	mov	r4,r17
   45cdc:	800b883a 	mov	r5,r16
   45ce0:	91803fcc 	andi	r6,r18,255
   45ce4:	0045a140 	call	45a14 <i2c_write>
   45ce8:	10000c1e 	bne	r2,zero,45d1c <I2C_Read+0x70>
   45cec:	0027883a 	mov	r19,zero
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   45cf0:	8809883a 	mov	r4,r17
   45cf4:	800b883a 	mov	r5,r16
   45cf8:	00459600 	call	45960 <i2c_start>
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45cfc:	98000d26 	beq	r19,zero,45d34 <I2C_Read+0x88>
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
   45d00:	91800054 	ori	r6,r18,1
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45d04:	8809883a 	mov	r4,r17
   45d08:	800b883a 	mov	r5,r16
   45d0c:	31803fcc 	andi	r6,r6,255
   45d10:	0045a140 	call	45a14 <i2c_write>
   45d14:	10000726 	beq	r2,zero,45d34 <I2C_Read+0x88>
   45d18:	00000806 	br	45d3c <I2C_Read+0x90>
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45d1c:	99803fcc 	andi	r6,r19,255
   45d20:	8809883a 	mov	r4,r17
   45d24:	800b883a 	mov	r5,r16
   45d28:	0045a140 	call	45a14 <i2c_write>
   45d2c:	1026c03a 	cmpne	r19,r2,zero
   45d30:	003fef06 	br	45cf0 <__alt_data_end+0xfffdebf0>
   45d34:	0025883a 	mov	r18,zero
   45d38:	00000606 	br	45d54 <I2C_Read+0xa8>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   45d3c:	d9800517 	ldw	r6,20(sp)
   45d40:	8809883a 	mov	r4,r17
   45d44:	800b883a 	mov	r5,r16
   45d48:	000f883a 	mov	r7,zero
   45d4c:	0045ba40 	call	45ba4 <i2c_read>
   45d50:	04800044 	movi	r18,1
    }
    i2c_stop(clk_base, data_base);
   45d54:	8809883a 	mov	r4,r17
   45d58:	800b883a 	mov	r5,r16
   45d5c:	00459cc0 	call	459cc <i2c_stop>

    return bSuccess;
}
   45d60:	9005883a 	mov	r2,r18
   45d64:	dfc00417 	ldw	ra,16(sp)
   45d68:	dcc00317 	ldw	r19,12(sp)
   45d6c:	dc800217 	ldw	r18,8(sp)
   45d70:	dc400117 	ldw	r17,4(sp)
   45d74:	dc000017 	ldw	r16,0(sp)
   45d78:	dec00504 	addi	sp,sp,20
   45d7c:	f800283a 	ret

00045d80 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
   45d80:	defff904 	addi	sp,sp,-28
   45d84:	dd400515 	stw	r21,20(sp)
   45d88:	dd000415 	stw	r20,16(sp)
   45d8c:	dcc00315 	stw	r19,12(sp)
   45d90:	dc800215 	stw	r18,8(sp)
   45d94:	dc400115 	stw	r17,4(sp)
   45d98:	dc000015 	stw	r16,0(sp)
   45d9c:	dfc00615 	stw	ra,24(sp)
   45da0:	2021883a 	mov	r16,r4
   45da4:	2823883a 	mov	r17,r5
   45da8:	3025883a 	mov	r18,r6
   45dac:	3829883a 	mov	r20,r7
   45db0:	dd400717 	ldw	r21,28(sp)
   45db4:	dcc0080b 	ldhu	r19,32(sp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45db8:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45dbc:	8009883a 	mov	r4,r16
   45dc0:	880b883a 	mov	r5,r17
   45dc4:	91803fcc 	andi	r6,r18,255
   45dc8:	0045a140 	call	45a14 <i2c_write>
   45dcc:	10001b26 	beq	r2,zero,45e3c <I2C_MultipleRead+0xbc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   45dd0:	8009883a 	mov	r4,r16
   45dd4:	880b883a 	mov	r5,r17
   45dd8:	a1803fcc 	andi	r6,r20,255
   45ddc:	0045a140 	call	45a14 <i2c_write>
   45de0:	10001626 	beq	r2,zero,45e3c <I2C_MultipleRead+0xbc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess)
        i2c_start(clk_base, data_base);  // restart
   45de4:	8009883a 	mov	r4,r16
   45de8:	880b883a 	mov	r5,r17
   45dec:	00459600 	call	45960 <i2c_start>
    DeviceAddr |= 1; // Read
   45df0:	91800054 	ori	r6,r18,1
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45df4:	8009883a 	mov	r4,r16
   45df8:	880b883a 	mov	r5,r17
   45dfc:	31803fcc 	andi	r6,r6,255
   45e00:	0045a140 	call	45a14 <i2c_write>
   45e04:	10000d26 	beq	r2,zero,45e3c <I2C_MultipleRead+0xbc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   45e08:	9cffffcc 	andi	r19,r19,65535
   45e0c:	0025883a 	mov	r18,zero
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   45e10:	9d3fffc4 	addi	r20,r19,-1
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   45e14:	94c0070e 	bge	r18,r19,45e34 <I2C_MultipleRead+0xb4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   45e18:	ac8d883a 	add	r6,r21,r18
   45e1c:	950ec03a 	cmpne	r7,r18,r20
   45e20:	8009883a 	mov	r4,r16
   45e24:	880b883a 	mov	r5,r17
   45e28:	0045ba40 	call	45ba4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   45e2c:	94800044 	addi	r18,r18,1
   45e30:	003ff806 	br	45e14 <__alt_data_end+0xfffded14>
   45e34:	04800044 	movi	r18,1
   45e38:	00000106 	br	45e40 <I2C_MultipleRead+0xc0>
   45e3c:	0025883a 	mov	r18,zero
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   45e40:	8009883a 	mov	r4,r16
   45e44:	880b883a 	mov	r5,r17
   45e48:	00459cc0 	call	459cc <i2c_stop>

    return bSuccess;

}
   45e4c:	9005883a 	mov	r2,r18
   45e50:	dfc00617 	ldw	ra,24(sp)
   45e54:	dd400517 	ldw	r21,20(sp)
   45e58:	dd000417 	ldw	r20,16(sp)
   45e5c:	dcc00317 	ldw	r19,12(sp)
   45e60:	dc800217 	ldw	r18,8(sp)
   45e64:	dc400117 	ldw	r17,4(sp)
   45e68:	dc000017 	ldw	r16,0(sp)
   45e6c:	dec00704 	addi	sp,sp,28
   45e70:	f800283a 	ret

00045e74 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   45e74:	defffa04 	addi	sp,sp,-24
   45e78:	dd000415 	stw	r20,16(sp)
   45e7c:	dcc00315 	stw	r19,12(sp)
   45e80:	dc800215 	stw	r18,8(sp)
   45e84:	dc400115 	stw	r17,4(sp)
   45e88:	dc000015 	stw	r16,0(sp)
   45e8c:	dfc00515 	stw	ra,20(sp)
   45e90:	2023883a 	mov	r17,r4
   45e94:	2821883a 	mov	r16,r5
   45e98:	3029883a 	mov	r20,r6
   45e9c:	3825883a 	mov	r18,r7
   45ea0:	dcc00617 	ldw	r19,24(sp)
    AddrLow  = ControlAddr & 0xFF;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   45ea4:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45ea8:	8809883a 	mov	r4,r17
   45eac:	800b883a 	mov	r5,r16
   45eb0:	a1803fcc 	andi	r6,r20,255
   45eb4:	0045a140 	call	45a14 <i2c_write>
   45eb8:	10000b26 	beq	r2,zero,45ee8 <I2CL_Write+0x74>
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
    bool bSuccess = TRUE;
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   45ebc:	90bfffcc 	andi	r2,r18,65535
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   45ec0:	100cd23a 	srli	r6,r2,8
   45ec4:	8809883a 	mov	r4,r17
   45ec8:	800b883a 	mov	r5,r16
   45ecc:	0045a140 	call	45a14 <i2c_write>
   45ed0:	10000526 	beq	r2,zero,45ee8 <I2CL_Write+0x74>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   45ed4:	8809883a 	mov	r4,r17
   45ed8:	800b883a 	mov	r5,r16
   45edc:	91803fcc 	andi	r6,r18,255
   45ee0:	0045a140 	call	45a14 <i2c_write>
   45ee4:	1000021e 	bne	r2,zero,45ef0 <I2CL_Write+0x7c>

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   45ee8:	0025883a 	mov	r18,zero
   45eec:	00000506 	br	45f04 <I2CL_Write+0x90>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   45ef0:	8809883a 	mov	r4,r17
   45ef4:	800b883a 	mov	r5,r16
   45ef8:	99803fcc 	andi	r6,r19,255
   45efc:	0045a140 	call	45a14 <i2c_write>
   45f00:	1024c03a 	cmpne	r18,r2,zero
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   45f04:	8809883a 	mov	r4,r17
   45f08:	800b883a 	mov	r5,r16
   45f0c:	00459cc0 	call	459cc <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   45f10:	0106d604 	movi	r4,7000
   45f14:	00553700 	call	55370 <usleep>

    return bSuccess;

}
   45f18:	9005883a 	mov	r2,r18
   45f1c:	dfc00517 	ldw	ra,20(sp)
   45f20:	dd000417 	ldw	r20,16(sp)
   45f24:	dcc00317 	ldw	r19,12(sp)
   45f28:	dc800217 	ldw	r18,8(sp)
   45f2c:	dc400117 	ldw	r17,4(sp)
   45f30:	dc000017 	ldw	r16,0(sp)
   45f34:	dec00604 	addi	sp,sp,24
   45f38:	f800283a 	ret

00045f3c <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   45f3c:	defffb04 	addi	sp,sp,-20
   45f40:	dcc00315 	stw	r19,12(sp)
   45f44:	dc800215 	stw	r18,8(sp)
   45f48:	dc400115 	stw	r17,4(sp)
   45f4c:	dc000015 	stw	r16,0(sp)
   45f50:	dfc00415 	stw	ra,16(sp)
   45f54:	2021883a 	mov	r16,r4
   45f58:	2823883a 	mov	r17,r5
   45f5c:	3025883a 	mov	r18,r6
   45f60:	3827883a 	mov	r19,r7
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
    AddrLow  = ControlAddr & 0xFF;

    i2c_start(clk_base, data_base);
   45f64:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   45f68:	8009883a 	mov	r4,r16
   45f6c:	880b883a 	mov	r5,r17
   45f70:	91803fcc 	andi	r6,r18,255
   45f74:	0045a140 	call	45a14 <i2c_write>
   45f78:	10001c26 	beq	r2,zero,45fec <I2CL_Read+0xb0>

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
    bool bSuccess = TRUE;
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   45f7c:	99bfffcc 	andi	r6,r19,65535
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   45f80:	300cd23a 	srli	r6,r6,8
   45f84:	8009883a 	mov	r4,r16
   45f88:	880b883a 	mov	r5,r17
   45f8c:	0045a140 	call	45a14 <i2c_write>
   45f90:	10001626 	beq	r2,zero,45fec <I2CL_Read+0xb0>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   45f94:	99803fcc 	andi	r6,r19,255
   45f98:	8009883a 	mov	r4,r16
   45f9c:	880b883a 	mov	r5,r17
   45fa0:	0045a140 	call	45a14 <i2c_write>
   45fa4:	1026c03a 	cmpne	r19,r2,zero
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   45fa8:	8009883a 	mov	r4,r16
   45fac:	880b883a 	mov	r5,r17
   45fb0:	00459600 	call	45960 <i2c_start>
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45fb4:	98000f26 	beq	r19,zero,45ff4 <I2CL_Read+0xb8>
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
   45fb8:	91800054 	ori	r6,r18,1
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   45fbc:	8009883a 	mov	r4,r16
   45fc0:	880b883a 	mov	r5,r17
   45fc4:	31803fcc 	andi	r6,r6,255
   45fc8:	0045a140 	call	45a14 <i2c_write>
   45fcc:	10000926 	beq	r2,zero,45ff4 <I2CL_Read+0xb8>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   45fd0:	d9800517 	ldw	r6,20(sp)
   45fd4:	8009883a 	mov	r4,r16
   45fd8:	880b883a 	mov	r5,r17
   45fdc:	000f883a 	mov	r7,zero
   45fe0:	0045ba40 	call	45ba4 <i2c_read>
   45fe4:	04800044 	movi	r18,1
   45fe8:	00000306 	br	45ff8 <I2CL_Read+0xbc>

    return bSuccess;

}

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   45fec:	0027883a 	mov	r19,zero
   45ff0:	003fed06 	br	45fa8 <__alt_data_end+0xfffdeea8>
   45ff4:	0025883a 	mov	r18,zero
    }

    if (bSuccess){
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    }
    i2c_stop(clk_base, data_base);
   45ff8:	8009883a 	mov	r4,r16
   45ffc:	880b883a 	mov	r5,r17
   46000:	00459cc0 	call	459cc <i2c_stop>

    return bSuccess;
}
   46004:	9005883a 	mov	r2,r18
   46008:	dfc00417 	ldw	ra,16(sp)
   4600c:	dcc00317 	ldw	r19,12(sp)
   46010:	dc800217 	ldw	r18,8(sp)
   46014:	dc400117 	ldw	r17,4(sp)
   46018:	dc000017 	ldw	r16,0(sp)
   4601c:	dec00504 	addi	sp,sp,20
   46020:	f800283a 	ret

00046024 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
   46024:	defff904 	addi	sp,sp,-28
   46028:	dd000415 	stw	r20,16(sp)
   4602c:	dcc00315 	stw	r19,12(sp)
   46030:	dc800215 	stw	r18,8(sp)
   46034:	dc400115 	stw	r17,4(sp)
   46038:	dc000015 	stw	r16,0(sp)
   4603c:	dfc00615 	stw	ra,24(sp)
   46040:	dd400515 	stw	r21,20(sp)
   46044:	2021883a 	mov	r16,r4
   46048:	2823883a 	mov	r17,r5
   4604c:	3025883a 	mov	r18,r6
   46050:	3829883a 	mov	r20,r7
   46054:	dcc0070b 	ldhu	r19,28(sp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   46058:	00459600 	call	45960 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   4605c:	8009883a 	mov	r4,r16
   46060:	880b883a 	mov	r5,r17
   46064:	91803fcc 	andi	r6,r18,255
   46068:	0045a140 	call	45a14 <i2c_write>
   4606c:	10002026 	beq	r2,zero,460f0 <I2CL_MultipleRead+0xcc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   46070:	8009883a 	mov	r4,r16
   46074:	880b883a 	mov	r5,r17
   46078:	000d883a 	mov	r6,zero
   4607c:	0045a140 	call	45a14 <i2c_write>
   46080:	10001b26 	beq	r2,zero,460f0 <I2CL_MultipleRead+0xcc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   46084:	8009883a 	mov	r4,r16
   46088:	880b883a 	mov	r5,r17
   4608c:	000d883a 	mov	r6,zero
   46090:	0045a140 	call	45a14 <i2c_write>
   46094:	10001626 	beq	r2,zero,460f0 <I2CL_MultipleRead+0xcc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess)
        i2c_start(clk_base, data_base);  // restart
   46098:	8009883a 	mov	r4,r16
   4609c:	880b883a 	mov	r5,r17
   460a0:	00459600 	call	45960 <i2c_start>
    DeviceAddr |= 1; // Read
   460a4:	91800054 	ori	r6,r18,1
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   460a8:	8009883a 	mov	r4,r16
   460ac:	880b883a 	mov	r5,r17
   460b0:	31803fcc 	andi	r6,r6,255
   460b4:	0045a140 	call	45a14 <i2c_write>
   460b8:	10000d26 	beq	r2,zero,460f0 <I2CL_MultipleRead+0xcc>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   460bc:	9cffffcc 	andi	r19,r19,65535
   460c0:	0025883a 	mov	r18,zero
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   460c4:	9d7fffc4 	addi	r21,r19,-1
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   460c8:	94c0070e 	bge	r18,r19,460e8 <I2CL_MultipleRead+0xc4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   460cc:	a48d883a 	add	r6,r20,r18
   460d0:	954ec03a 	cmpne	r7,r18,r21
   460d4:	8009883a 	mov	r4,r16
   460d8:	880b883a 	mov	r5,r17
   460dc:	0045ba40 	call	45ba4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   460e0:	94800044 	addi	r18,r18,1
   460e4:	003ff806 	br	460c8 <__alt_data_end+0xfffdefc8>
   460e8:	04800044 	movi	r18,1
   460ec:	00000106 	br	460f4 <I2CL_MultipleRead+0xd0>
   460f0:	0025883a 	mov	r18,zero
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   460f4:	8009883a 	mov	r4,r16
   460f8:	880b883a 	mov	r5,r17
   460fc:	00459cc0 	call	459cc <i2c_stop>

    return bSuccess;

}
   46100:	9005883a 	mov	r2,r18
   46104:	dfc00617 	ldw	ra,24(sp)
   46108:	dd400517 	ldw	r21,20(sp)
   4610c:	dd000417 	ldw	r20,16(sp)
   46110:	dcc00317 	ldw	r19,12(sp)
   46114:	dc800217 	ldw	r18,8(sp)
   46118:	dc400117 	ldw	r17,4(sp)
   4611c:	dc000017 	ldw	r16,0(sp)
   46120:	dec00704 	addi	sp,sp,28
   46124:	f800283a 	ret

00046128 <adv7513_int_handler>:

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
static void adv7513_int_handler(void *context)
{
   46128:	deffb404 	addi	sp,sp,-304
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE) & HDMI_TX_INT_MASK;
   4612c:	00800234 	movhi	r2,8

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
static void adv7513_int_handler(void *context)
{
   46130:	dc004515 	stw	r16,276(sp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE) & HDMI_TX_INT_MASK;
   46134:	10840b04 	addi	r2,r2,4140

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
static void adv7513_int_handler(void *context)
{
   46138:	2021883a 	mov	r16,r4
   4613c:	dfc04b15 	stw	ra,300(sp)
   46140:	dd404a15 	stw	r21,296(sp)
   46144:	dd004915 	stw	r20,292(sp)
   46148:	dcc04815 	stw	r19,288(sp)
   4614c:	dc804715 	stw	r18,284(sp)
   46150:	dc404615 	stw	r17,280(sp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE) & HDMI_TX_INT_MASK;
   46154:	10c00037 	ldwio	r3,0(r2)
	//if (irq_status == 0)
	//	return;

	// clear system irq flag
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE, 0x00);
   46158:	10000035 	stwio	zero,0(r2)

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
   4615c:	014024c4 	movi	r5,147
   46160:	d9804404 	addi	r6,sp,272

	// clear system irq flag
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE, 0x00);

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);
   46164:	24400617 	ldw	r17,24(r4)

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
   46168:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   4616c:	1000761e 	bne	r2,zero,46348 <adv7513_int_handler+0x220>
		return;
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
   46170:	8009883a 	mov	r4,r16
   46174:	01402584 	movi	r5,150
   46178:	d9804404 	addi	r6,sp,272

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
	if (r != 0)
		return;
	int_status.reg93 = regv;
   4617c:	dd004403 	ldbu	r20,272(sp)

	r = reg_read(ec, 0x96, &regv);
   46180:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   46184:	1000701e 	bne	r2,zero,46348 <adv7513_int_handler+0x220>
		return;
	int_status.reg96 = regv;

	r = reg_read(ec, 0x97, &regv);
   46188:	8009883a 	mov	r4,r16
   4618c:	014025c4 	movi	r5,151
   46190:	d9804404 	addi	r6,sp,272
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
	if (r != 0)
		return;
	int_status.reg96 = regv;
   46194:	dc804403 	ldbu	r18,272(sp)

	r = reg_read(ec, 0x97, &regv);
   46198:	00456d40 	call	456d4 <reg_read>
	if (r != 0)
   4619c:	10006a1e 	bne	r2,zero,46348 <adv7513_int_handler+0x220>
		return;
	int_status.reg97 = regv;

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
   461a0:	8009883a 	mov	r4,r16
   461a4:	01402484 	movi	r5,146
   461a8:	000d883a 	mov	r6,zero
	int_status.reg96 = regv;

	r = reg_read(ec, 0x97, &regv);
	if (r != 0)
		return;
	int_status.reg97 = regv;
   461ac:	dcc04403 	ldbu	r19,272(sp)

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
   461b0:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x94, 0);
   461b4:	8009883a 	mov	r4,r16
   461b8:	01402504 	movi	r5,148
   461bc:	000d883a 	mov	r6,zero
   461c0:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x95, 0);
   461c4:	8009883a 	mov	r4,r16
   461c8:	01402544 	movi	r5,149
   461cc:	000d883a 	mov	r6,zero

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
   461d0:	a5003fcc 	andi	r20,r20,255
	int_status.reg97 = regv;

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
	reg_write(ec, 0x94, 0);
	reg_write(ec, 0x95, 0);
   461d4:	00457140 	call	45714 <reg_write>

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
   461d8:	a0000426 	beq	r20,zero,461ec <adv7513_int_handler+0xc4>
		reg_write(ec, 0x93, 0xff);
   461dc:	8009883a 	mov	r4,r16
   461e0:	014024c4 	movi	r5,147
   461e4:	01803fc4 	movi	r6,255
   461e8:	00457140 	call	45714 <reg_write>
	int_status.reg93 = regv;

	r = reg_read(ec, 0x96, &regv);
	if (r != 0)
		return;
	int_status.reg96 = regv;
   461ec:	94803fcc 	andi	r18,r18,255
	// clear adv7513 int status
	if (int_status.reg93 != 0) {
		reg_write(ec, 0x93, 0xff);
	}

	if (int_status.reg96 != 0) {
   461f0:	90000426 	beq	r18,zero,46204 <adv7513_int_handler+0xdc>
		reg_write(ec, 0x96, 0xff);
   461f4:	8009883a 	mov	r4,r16
   461f8:	01402584 	movi	r5,150
   461fc:	01803fc4 	movi	r6,255
   46200:	00457140 	call	45714 <reg_write>
	}

	if (int_status.reg97 != 0) {
   46204:	9cc03fcc 	andi	r19,r19,255
   46208:	98000426 	beq	r19,zero,4621c <adv7513_int_handler+0xf4>
		reg_write(ec, 0x97, 0xff);
   4620c:	8009883a 	mov	r4,r16
   46210:	014025c4 	movi	r5,151
   46214:	01803fc4 	movi	r6,255
   46218:	00457140 	call	45714 <reg_write>
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
}

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
	mask->reg92 = (long_val >> 16) & 0xff;
   4621c:	8828d43a 	srli	r20,r17,16
	mask->reg94 = (long_val >> 8) & 0xff;
   46220:	8826d23a 	srli	r19,r17,8

	// -------------------------------------------------------
	// handle adv7513 interrupt events
	// WARNING: this should be an application level task ...
	//
	if (int_status.reg96_bits.monitor_sense || int_status.reg96_bits.hpd) {
   46224:	9480300c 	andi	r18,r18,192
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
}

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
	mask->reg92 = (long_val >> 16) & 0xff;
   46228:	a5003fcc 	andi	r20,r20,255
	mask->reg94 = (long_val >> 8) & 0xff;
   4622c:	9cc03fcc 	andi	r19,r19,255
	mask->reg95 = long_val & 0xff;
   46230:	8c403fcc 	andi	r17,r17,255
   46234:	90003826 	beq	r18,zero,46318 <adv7513_int_handler+0x1f0>

		alt_u8 edid[256];
		int dvi_mode = 0;
		int pwr_state = 0;
   46238:	d8004315 	stw	zero,268(sp)
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
   4623c:	048007c4 	movi	r18,31
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
			if (r != 0)
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   46240:	05401804 	movi	r21,96
   46244:	94bfffc4 	addi	r18,r18,-1
		int dvi_mode = 0;
		int pwr_state = 0;
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
   46248:	90000826 	beq	r18,zero,4626c <adv7513_int_handler+0x144>
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   4624c:	8009883a 	mov	r4,r16
   46250:	01401084 	movi	r5,66
   46254:	d9804404 	addi	r6,sp,272
   46258:	00456d40 	call	456d4 <reg_read>
			if (r != 0)
   4625c:	10002e1e 	bne	r2,zero,46318 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   46260:	d8804403 	ldbu	r2,272(sp)
   46264:	1080180c 	andi	r2,r2,96
   46268:	157ff61e 	bne	r2,r21,46244 <__alt_data_end+0xfffdf144>
				break;
		}

		if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) != ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   4626c:	d8804403 	ldbu	r2,272(sp)
   46270:	00c01804 	movi	r3,96
   46274:	1080180c 	andi	r2,r2,96
   46278:	10c0271e 	bne	r2,r3,46318 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		// now we have both HPD and monitor-sense signal asserted

		// power up the hdmi-encoder ...
		r = adv7513_do_hpd_powerup(ec);
   4627c:	8009883a 	mov	r4,r16
   46280:	00404b00 	call	404b0 <adv7513_do_hpd_powerup>
		if (r != 0)
   46284:	1000241e 	bne	r2,zero,46318 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
   46288:	8009883a 	mov	r4,r16
   4628c:	d80b883a 	mov	r5,sp
   46290:	000d883a 	mov	r6,zero
   46294:	00407740 	call	40774 <adv7513_edid_read>
		if (r != 0)
			dvi_mode = 1;

		if (edid[0x7e] == 0)
   46298:	d8c01f83 	ldbu	r3,126(sp)
   4629c:	18000226 	beq	r3,zero,462a8 <adv7513_int_handler+0x180>
		if (r != 0)
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
		if (r != 0)
   462a0:	1024c03a 	cmpne	r18,r2,zero
   462a4:	00000106 	br	462ac <adv7513_int_handler+0x184>
			dvi_mode = 1;

		if (edid[0x7e] == 0)
			dvi_mode = 1;
   462a8:	04800044 	movi	r18,1
   462ac:	05403204 	movi	r21,200

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
			r = adv7513_chip_init(ec, dvi_mode);
   462b0:	8009883a 	mov	r4,r16
   462b4:	900b883a 	mov	r5,r18
   462b8:	00408880 	call	40888 <adv7513_chip_init>
			if (r != 0)
   462bc:	1000161e 	bne	r2,zero,46318 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			r = adv7513_power_state(ec, &pwr_state);
   462c0:	8009883a 	mov	r4,r16
   462c4:	d9404304 	addi	r5,sp,268
   462c8:	00406b80 	call	406b8 <adv7513_power_state>
			if (r != 0)
   462cc:	1000121e 	bne	r2,zero,46318 <adv7513_int_handler+0x1f0>
				goto __unplugged_iret;

			if (pwr_state != 0)
   462d0:	d8804317 	ldw	r2,268(sp)
   462d4:	1000021e 	bne	r2,zero,462e0 <adv7513_int_handler+0x1b8>
   462d8:	ad7fffc4 	addi	r21,r21,-1

		if (edid[0x7e] == 0)
			dvi_mode = 1;

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
   462dc:	a83ff41e 	bne	r21,zero,462b0 <__alt_data_end+0xfffdf1b0>
			if (pwr_state != 0)
				break;
			--pwron_retry_count;
		}

		r = adv7513_power_state(ec, &pwr_state);
   462e0:	8009883a 	mov	r4,r16
   462e4:	d9404304 	addi	r5,sp,268
   462e8:	00406b80 	call	406b8 <adv7513_power_state>
		if (r != 0)
   462ec:	10000a1e 	bne	r2,zero,46318 <adv7513_int_handler+0x1f0>
			goto __unplugged_iret;

		if (pwr_state == 0)
   462f0:	d8804317 	ldw	r2,268(sp)
   462f4:	10000826 	beq	r2,zero,46318 <adv7513_int_handler+0x1f0>
	return;

__plugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   462f8:	8009883a 	mov	r4,r16
   462fc:	01402484 	movi	r5,146
   46300:	a00d883a 	mov	r6,r20
   46304:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
   46308:	8009883a 	mov	r4,r16
   4630c:	01402504 	movi	r5,148
   46310:	99802fcc 	andi	r6,r19,191
   46314:	00000706 	br	46334 <adv7513_int_handler+0x20c>
	}

__unplugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   46318:	8009883a 	mov	r4,r16
   4631c:	01402484 	movi	r5,146
   46320:	a00d883a 	mov	r6,r20
   46324:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94);
   46328:	8009883a 	mov	r4,r16
   4632c:	01402504 	movi	r5,148
   46330:	980d883a 	mov	r6,r19
   46334:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
   46338:	8009883a 	mov	r4,r16
   4633c:	01402544 	movi	r5,149
   46340:	880d883a 	mov	r6,r17
   46344:	00457140 	call	45714 <reg_write>
	reg_write(ec, 0x92, int_mask.reg92);
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
	reg_write(ec, 0x95, int_mask.reg95);

	return;
}
   46348:	dfc04b17 	ldw	ra,300(sp)
   4634c:	dd404a17 	ldw	r21,296(sp)
   46350:	dd004917 	ldw	r20,292(sp)
   46354:	dcc04817 	ldw	r19,288(sp)
   46358:	dc804717 	ldw	r18,284(sp)
   4635c:	dc404617 	ldw	r17,280(sp)
   46360:	dc004517 	ldw	r16,276(sp)
   46364:	dec04c04 	addi	sp,sp,304
   46368:	f800283a 	ret

0004636c <bin_dump.constprop.0>:
#define ADV7513_SALVE_ADDR7		0x39										// 0x39)PD-low 0x3D)PD-high
#define ADV7513_SALVE_ADDR8		((alt_u8)(ADV7513_SALVE_ADDR7) << 1)		// 0x72)PD-low 0x7A)PD-high

#define ADV7513_EDID_ADDR8		0x7e

static int bin_dump(const alt_u8 *buf, int len)
   4636c:	defff304 	addi	sp,sp,-52
   46370:	dd400b15 	stw	r21,44(sp)
   46374:	dd000a15 	stw	r20,40(sp)
   46378:	dcc00915 	stw	r19,36(sp)
   4637c:	dc800815 	stw	r18,32(sp)
   46380:	dc400715 	stw	r17,28(sp)
   46384:	dc000615 	stw	r16,24(sp)
   46388:	dfc00c15 	stw	ra,48(sp)
   4638c:	2023883a 	mov	r17,r4
   46390:	25000044 	addi	r20,r4,1
   46394:	24c00084 	addi	r19,r4,2
   46398:	248000c4 	addi	r18,r4,3
   4639c:	25404004 	addi	r21,r4,256
   463a0:	2021883a 	mov	r16,r4

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   463a4:	98800003 	ldbu	r2,0(r19)
   463a8:	81800003 	ldbu	r6,0(r16)
   463ac:	a1c00003 	ldbu	r7,0(r20)
   463b0:	d8800015 	stw	r2,0(sp)
   463b4:	90800003 	ldbu	r2,0(r18)
   463b8:	010001b4 	movhi	r4,6
   463bc:	844bc83a 	sub	r5,r16,r17
   463c0:	d8800115 	stw	r2,4(sp)
   463c4:	80800103 	ldbu	r2,4(r16)
   463c8:	2128ed04 	addi	r4,r4,-23628
	int cols = len % 16;

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
   463cc:	84000404 	addi	r16,r16,16
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   463d0:	d8800215 	stw	r2,8(sp)
   463d4:	80bffd43 	ldbu	r2,-11(r16)
   463d8:	a5000404 	addi	r20,r20,16
   463dc:	9cc00404 	addi	r19,r19,16
   463e0:	d8800315 	stw	r2,12(sp)
   463e4:	80bffd83 	ldbu	r2,-10(r16)
   463e8:	94800404 	addi	r18,r18,16
   463ec:	d8800415 	stw	r2,16(sp)
   463f0:	80bffdc3 	ldbu	r2,-9(r16)
   463f4:	d8800515 	stw	r2,20(sp)
   463f8:	0048fb80 	call	48fb8 <printf>
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   463fc:	80bffec3 	ldbu	r2,-5(r16)
   46400:	817ffe03 	ldbu	r5,-8(r16)
   46404:	81bffe43 	ldbu	r6,-7(r16)
   46408:	81fffe83 	ldbu	r7,-6(r16)
   4640c:	d8800015 	stw	r2,0(sp)
   46410:	80bfff03 	ldbu	r2,-4(r16)
   46414:	010001b4 	movhi	r4,6
   46418:	2128fa04 	addi	r4,r4,-23576
   4641c:	d8800115 	stw	r2,4(sp)
   46420:	80bfff43 	ldbu	r2,-3(r16)
   46424:	d8800215 	stw	r2,8(sp)
   46428:	80bfff83 	ldbu	r2,-2(r16)
   4642c:	d8800315 	stw	r2,12(sp)
   46430:	80bfffc3 	ldbu	r2,-1(r16)
   46434:	d8800415 	stw	r2,16(sp)
   46438:	0048fb80 	call	48fb8 <printf>
	int cols = len % 16;

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
   4643c:	857fd91e 	bne	r16,r21,463a4 <__alt_data_end+0xfffdf2a4>
		}
		printf("\n");
	}

	return len;
}
   46440:	00804004 	movi	r2,256
   46444:	dfc00c17 	ldw	ra,48(sp)
   46448:	dd400b17 	ldw	r21,44(sp)
   4644c:	dd000a17 	ldw	r20,40(sp)
   46450:	dcc00917 	ldw	r19,36(sp)
   46454:	dc800817 	ldw	r18,32(sp)
   46458:	dc400717 	ldw	r17,28(sp)
   4645c:	dc000617 	ldw	r16,24(sp)
   46460:	dec00d04 	addi	sp,sp,52
   46464:	f800283a 	ret

00046468 <adv7513_int_setup>:

	return;
}

int adv7513_int_setup(struct hdmi_encoder *ec, const struct adv7513_int_mask *mask, alt_isr_func isr)
{
   46468:	defffb04 	addi	sp,sp,-20
   4646c:	dc800315 	stw	r18,12(sp)
   46470:	dc400215 	stw	r17,8(sp)
   46474:	dc000115 	stw	r16,4(sp)
   46478:	dfc00415 	stw	ra,16(sp)
	};
};

static inline unsigned int adv7513_int_mask_to_long(const struct adv7513_int_mask *mask)
{
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
   4647c:	28800017 	ldw	r2,0(r5)
   46480:	2021883a 	mov	r16,r4
   46484:	2823883a 	mov	r17,r5
   46488:	1006943a 	slli	r3,r2,16
   4648c:	28800117 	ldw	r2,4(r5)
   46490:	3025883a 	mov	r18,r6
   46494:	1004923a 	slli	r2,r2,8
   46498:	1884b03a 	or	r2,r3,r2
   4649c:	28c00217 	ldw	r3,8(r5)

	if (r != 0)
		return -1;

	// disable HDMI_TX_INT
	alt_ic_irq_disable(HDMI_TX_INT_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_IRQ);
   464a0:	000b883a 	mov	r5,zero
   464a4:	10c4b03a 	or	r2,r2,r3
{
	int r = 0;

	//printf("adv7513_int_setup()\n");

	ec->int_mask = adv7513_int_mask_to_long(mask);
   464a8:	20800615 	stw	r2,24(r4)

	if (r != 0)
		return -1;

	// disable HDMI_TX_INT
	alt_ic_irq_disable(HDMI_TX_INT_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_IRQ);
   464ac:	0009883a 	mov	r4,zero
   464b0:	0054b800 	call	54b80 <alt_ic_irq_disable>

	r = reg_write(ec, 0x92, 0);
   464b4:	8009883a 	mov	r4,r16
   464b8:	01402484 	movi	r5,146
   464bc:	000d883a 	mov	r6,zero
   464c0:	00457140 	call	45714 <reg_write>
	if (r != 0)
   464c4:	10000226 	beq	r2,zero,464d0 <adv7513_int_setup+0x68>
		return -1;
   464c8:	00bfffc4 	movi	r2,-1
   464cc:	00003f06 	br	465cc <adv7513_int_setup+0x164>

	r = reg_write(ec, 0x94, 0);
   464d0:	8009883a 	mov	r4,r16
   464d4:	01402504 	movi	r5,148
   464d8:	000d883a 	mov	r6,zero
   464dc:	00457140 	call	45714 <reg_write>
	if (r != 0)
   464e0:	103ff91e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
		return -1;

	r = reg_write(ec, 0x95, 0);
   464e4:	8009883a 	mov	r4,r16
   464e8:	01402544 	movi	r5,149
   464ec:	000d883a 	mov	r6,zero
   464f0:	00457140 	call	45714 <reg_write>
	if (r != 0)
   464f4:	103ff41e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
		return -1;

	// clear int flags
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_BASE, 0x00);
   464f8:	00800234 	movhi	r2,8
   464fc:	10840b04 	addi	r2,r2,4140
   46500:	10000035 	stwio	zero,0(r2)

	r = reg_write(ec, 0x93, 0xff);
   46504:	8009883a 	mov	r4,r16
   46508:	014024c4 	movi	r5,147
   4650c:	01803fc4 	movi	r6,255
   46510:	00457140 	call	45714 <reg_write>
	if (r != 0)
   46514:	103fec1e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
		return -1;

	r = reg_write(ec, 0x96, 0xff);
   46518:	8009883a 	mov	r4,r16
   4651c:	01402584 	movi	r5,150
   46520:	01803fc4 	movi	r6,255
   46524:	00457140 	call	45714 <reg_write>
	if (r != 0)
   46528:	103fe71e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
		return -1;

	r = reg_write(ec, 0x97, 0xff);
   4652c:	8009883a 	mov	r4,r16
   46530:	014025c4 	movi	r5,151
   46534:	01803fc4 	movi	r6,255
   46538:	00457140 	call	45714 <reg_write>
	if (r != 0)
   4653c:	103fe21e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
		return -1;

	// enable interrupt
	if (ec->int_mask > 0) {
   46540:	80800617 	ldw	r2,24(r16)
   46544:	10002026 	beq	r2,zero,465c8 <adv7513_int_setup+0x160>
		// register isr
		if (isr) {
   46548:	9000061e 	bne	r18,zero,46564 <adv7513_int_setup+0xfc>
			if (r != 0)
				return -1;
		}

		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
   4654c:	89800017 	ldw	r6,0(r17)
   46550:	8009883a 	mov	r4,r16
   46554:	01402484 	movi	r5,146
   46558:	00457140 	call	45714 <reg_write>
		if (r != 0)
   4655c:	10000926 	beq	r2,zero,46584 <adv7513_int_setup+0x11c>
   46560:	003fd906 	br	464c8 <__alt_data_end+0xfffdf3c8>
	// enable interrupt
	if (ec->int_mask > 0) {
		// register isr
		if (isr) {
			// register interrupt handler
			r = alt_ic_isr_register(HDMI_TX_INT_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_IRQ, isr, ec, NULL);
   46564:	d8000015 	stw	zero,0(sp)
   46568:	0009883a 	mov	r4,zero
   4656c:	000b883a 	mov	r5,zero
   46570:	900d883a 	mov	r6,r18
   46574:	800f883a 	mov	r7,r16
   46578:	0054a900 	call	54a90 <alt_ic_isr_register>
			if (r != 0)
   4657c:	103ff326 	beq	r2,zero,4654c <__alt_data_end+0xfffdf44c>
   46580:	003fd106 	br	464c8 <__alt_data_end+0xfffdf3c8>
		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
		if (r != 0)
			return -1;

		r = reg_write(ec, 0x94, mask->reg94);
   46584:	89800117 	ldw	r6,4(r17)
   46588:	8009883a 	mov	r4,r16
   4658c:	01402504 	movi	r5,148
   46590:	00457140 	call	45714 <reg_write>
		if (r != 0)
   46594:	103fcc1e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
			return -1;

		r = reg_write(ec, 0x95, mask->reg95);
   46598:	89800217 	ldw	r6,8(r17)
   4659c:	8009883a 	mov	r4,r16
   465a0:	01402544 	movi	r5,149
   465a4:	00457140 	call	45714 <reg_write>
		if (r != 0)
   465a8:	103fc71e 	bne	r2,zero,464c8 <__alt_data_end+0xfffdf3c8>
			return -1;

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(HDMI_TX_INT_BASE, HDMI_TX_INT_MASK); // 0x01: enable bit0
   465ac:	00800234 	movhi	r2,8
   465b0:	10840a04 	addi	r2,r2,4136
   465b4:	00c00044 	movi	r3,1
   465b8:	10c00035 	stwio	r3,0(r2)

		alt_ic_irq_enable(HDMI_TX_INT_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_IRQ);
   465bc:	0009883a 	mov	r4,zero
   465c0:	000b883a 	mov	r5,zero
   465c4:	0054ae00 	call	54ae0 <alt_ic_irq_enable>
	}

	return 0;
   465c8:	0005883a 	mov	r2,zero
}
   465cc:	dfc00417 	ldw	ra,16(sp)
   465d0:	dc800317 	ldw	r18,12(sp)
   465d4:	dc400217 	ldw	r17,8(sp)
   465d8:	dc000117 	ldw	r16,4(sp)
   465dc:	dec00504 	addi	sp,sp,20
   465e0:	f800283a 	ret

000465e4 <main>:
};

alt_u8 edid[256];

int main(int argc, const char *argv[])
{
   465e4:	deee6004 	addi	sp,sp,-18048
	int r = 0, rr = 0;

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
   465e8:	d9119704 	addi	r4,sp,18012
   465ec:	000b883a 	mov	r5,zero
   465f0:	01800304 	movi	r6,12
};

alt_u8 edid[256];

int main(int argc, const char *argv[])
{
   465f4:	dfd19f15 	stw	ra,18044(sp)
   465f8:	dc119c15 	stw	r16,18032(sp)
   465fc:	dc919e15 	stw	r18,18040(sp)
   46600:	dc519d15 	stw	r17,18036(sp)
	int r = 0, rr = 0;

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
   46604:	0048e680 	call	48e68 <memset>

	printf("\n===== DECA adv7513 hdmi transmitter demo =====\n");
   46608:	010001b4 	movhi	r4,6
   4660c:	21290504 	addi	r4,r4,-23532

	r = adv7513_chip_identify(&encoder);
   46610:	040001b4 	movhi	r16,6

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));

	printf("\n===== DECA adv7513 hdmi transmitter demo =====\n");
   46614:	00490cc0 	call	490cc <puts>

	r = adv7513_chip_identify(&encoder);
   46618:	842c6504 	addi	r16,r16,-20076
   4661c:	8009883a 	mov	r4,r16
   46620:	004034c0 	call	4034c <adv7513_chip_identify>
	if (r != 0) {
   46624:	10000326 	beq	r2,zero,46634 <main+0x50>
		printf("[err] failed to do chip-identification! (%d)\n", r);
   46628:	010001b4 	movhi	r4,6
   4662c:	21291104 	addi	r4,r4,-23484
   46630:	00001b06 	br	466a0 <main+0xbc>
		rr = -1;
		goto _safe_exit;
	}

	if ((encoder.chip_id[0] == 0x11) && (encoder.chip_id[1] == 0x75)) {
   46634:	80c0070b 	ldhu	r3,28(r16)
   46638:	009d4444 	movi	r2,29969
   4663c:	1880051e 	bne	r3,r2,46654 <main+0x70>
		printf("encoder chip : ADV%02x%02x rev: 0x%02x\n", encoder.chip_id[1], encoder.chip_id[0], encoder.chip_rev[0]);
   46640:	010001b4 	movhi	r4,6
   46644:	21291d04 	addi	r4,r4,-23436
   46648:	81400743 	ldbu	r5,29(r16)
   4664c:	81800703 	ldbu	r6,28(r16)
   46650:	00000406 	br	46664 <main+0x80>
	} else {
		printf("encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", encoder.chip_id[0], encoder.chip_id[1], encoder.chip_rev[0]);
   46654:	81400703 	ldbu	r5,28(r16)
   46658:	81800743 	ldbu	r6,29(r16)
   4665c:	010001b4 	movhi	r4,6
   46660:	21292704 	addi	r4,r4,-23396
   46664:	81c00803 	ldbu	r7,32(r16)
   46668:	0048fb80 	call	48fb8 <printf>
	}

	ie_mask.reg94_bits.hpd = 1;
   4666c:	d8d19803 	ldbu	r3,18016(sp)
   46670:	00bff004 	movi	r2,-64
	ie_mask.reg94_bits.monitor_sense = 1;

	r = adv7513_int_setup(&encoder, &ie_mask, adv7513_int_handler);
   46674:	010001b4 	movhi	r4,6
   46678:	01800134 	movhi	r6,4
	} else {
		printf("encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", encoder.chip_id[0], encoder.chip_id[1], encoder.chip_rev[0]);
	}

	ie_mask.reg94_bits.hpd = 1;
	ie_mask.reg94_bits.monitor_sense = 1;
   4667c:	1884b03a 	or	r2,r3,r2

	r = adv7513_int_setup(&encoder, &ie_mask, adv7513_int_handler);
   46680:	212c6504 	addi	r4,r4,-20076
   46684:	d9519704 	addi	r5,sp,18012
   46688:	31984a04 	addi	r6,r6,24872
	} else {
		printf("encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", encoder.chip_id[0], encoder.chip_id[1], encoder.chip_rev[0]);
	}

	ie_mask.reg94_bits.hpd = 1;
	ie_mask.reg94_bits.monitor_sense = 1;
   4668c:	d8919805 	stb	r2,18016(sp)

	r = adv7513_int_setup(&encoder, &ie_mask, adv7513_int_handler);
   46690:	00464680 	call	46468 <adv7513_int_setup>
	if (r != 0) {
   46694:	10000e26 	beq	r2,zero,466d0 <main+0xec>
		printf("[err] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
   46698:	010001b4 	movhi	r4,6
   4669c:	21293504 	addi	r4,r4,-23340
   466a0:	100b883a 	mov	r5,r2
   466a4:	0048fb80 	call	48fb8 <printf>
		}
	}

_safe_exit:

	printf("\nprogram exit!\n");
   466a8:	010001b4 	movhi	r4,6
   466ac:	212b0704 	addi	r4,r4,-21476
   466b0:	00490cc0 	call	490cc <puts>

	return rr;
}
   466b4:	00bfffc4 	movi	r2,-1
   466b8:	dfd19f17 	ldw	ra,18044(sp)
   466bc:	dc919e17 	ldw	r18,18040(sp)
   466c0:	dc519d17 	ldw	r17,18036(sp)
   466c4:	dc119c17 	ldw	r16,18032(sp)
   466c8:	ded1a004 	addi	sp,sp,18048
   466cc:	f800283a 	ret
	if (r != 0) {
		printf("[err] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
		rr = -1;
		goto _safe_exit;
	} else {
		printf("success to setup HDMI_TX_INT interrupt handler.\n");
   466d0:	010001b4 	movhi	r4,6
   466d4:	21294304 	addi	r4,r4,-23284
   466d8:	00490cc0 	call	490cc <puts>
	}


	adv7513_kick_up(&encoder);
   466dc:	010001b4 	movhi	r4,6
   466e0:	212c6504 	addi	r4,r4,-20076
   466e4:	00406600 	call	40660 <adv7513_kick_up>

	printf("\noperation hints ...\n");
   466e8:	010001b4 	movhi	r4,6
   466ec:	21294f04 	addi	r4,r4,-23236
   466f0:	00490cc0 	call	490cc <puts>
	printf(" - please wait for monitor sync ...\n");
   466f4:	010001b4 	movhi	r4,6
   466f8:	21295504 	addi	r4,r4,-23212
   466fc:	00490cc0 	call	490cc <puts>
	printf("   the pattern will be auto sent out to your monitor.\n");
   46700:	010001b4 	movhi	r4,6
   46704:	21295e04 	addi	r4,r4,-23176
   46708:	00490cc0 	call	490cc <puts>
	printf(" - type \"h\" in the command line prompt to see available commands.\n");
   4670c:	010001b4 	movhi	r4,6
   46710:	21296c04 	addi	r4,r4,-23120
   46714:	00490cc0 	call	490cc <puts>

	printf("\na breif summary of commands for quick start up ...\n");
   46718:	010001b4 	movhi	r4,6
   4671c:	21297d04 	addi	r4,r4,-23052
   46720:	00490cc0 	call	490cc <puts>
	printf("  d         perform register-space dump of the ADV7513 transmitter\n");
   46724:	010001b4 	movhi	r4,6
   46728:	21298a04 	addi	r4,r4,-23000
   4672c:	00490cc0 	call	490cc <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   46730:	010001b4 	movhi	r4,6
   46734:	21299b04 	addi	r4,r4,-22932
   46738:	00490cc0 	call	490cc <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   4673c:	010001b4 	movhi	r4,6
   46740:	2129ac04 	addi	r4,r4,-22864
   46744:	00490cc0 	call	490cc <puts>
	printf("            and decode it in the human readable format\n");
   46748:	010001b4 	movhi	r4,6
   4674c:	2129bd04 	addi	r4,r4,-22796
   46750:	00490cc0 	call	490cc <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   46754:	010001b4 	movhi	r4,6
   46758:	2129cb04 	addi	r4,r4,-22740
   4675c:	00490cc0 	call	490cc <puts>
	printf("  o         power off the HDMI transmitter\n");
   46760:	010001b4 	movhi	r4,6
   46764:	2129dd04 	addi	r4,r4,-22668
   46768:	00490cc0 	call	490cc <puts>
	printf("  i         power up the HDMI transmitter and initialize it in HDMI mode\n");
   4676c:	010001b4 	movhi	r4,6
   46770:	2129e804 	addi	r4,r4,-22624
   46774:	00490cc0 	call	490cc <puts>
	printf("  a         audio on \n");
   46778:	010001b4 	movhi	r4,6
   4677c:	2129fb04 	addi	r4,r4,-22548
   46780:	00490cc0 	call	490cc <puts>
	printf("  b         audio off \n");
   46784:	010001b4 	movhi	r4,6
   46788:	212a0104 	addi	r4,r4,-22524

		char cmd[80] = {0};

		printf("\ncommand (h for help) > ");

		fgets(cmd, 256, stdin);
   4678c:	048001b4 	movhi	r18,6
	printf("            and decode it in the human readable format\n");
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
	printf("  o         power off the HDMI transmitter\n");
	printf("  i         power up the HDMI transmitter and initialize it in HDMI mode\n");
	printf("  a         audio on \n");
	printf("  b         audio off \n");
   46790:	00490cc0 	call	490cc <puts>

		char cmd[80] = {0};

		printf("\ncommand (h for help) > ");

		fgets(cmd, 256, stdin);
   46794:	94b33004 	addi	r18,r18,-13120
	printf("  b         audio off \n");

	// interactive command line mode -- used in local develop-testing
	while (1) {

		char cmd[80] = {0};
   46798:	000b883a 	mov	r5,zero
   4679c:	01801404 	movi	r6,80
   467a0:	d9118304 	addi	r4,sp,17932
   467a4:	0048e680 	call	48e68 <memset>

		printf("\ncommand (h for help) > ");
   467a8:	010001b4 	movhi	r4,6
   467ac:	212a0704 	addi	r4,r4,-22500
   467b0:	0048fb80 	call	48fb8 <printf>

		fgets(cmd, 256, stdin);
   467b4:	90800017 	ldw	r2,0(r18)
   467b8:	d9118304 	addi	r4,sp,17932
   467bc:	01404004 	movi	r5,256
   467c0:	11800117 	ldw	r6,4(r2)
   467c4:	0047ef00 	call	47ef0 <fgets>

		if (cmd[0] == 'd') {
   467c8:	d8d18307 	ldb	r3,17932(sp)
   467cc:	00801904 	movi	r2,100
   467d0:	18800f1e 	bne	r3,r2,46810 <main+0x22c>
			alt_u8 regs[256];

			r = adv7513_regmap_dump(&encoder, regs, 0);
   467d4:	010001b4 	movhi	r4,6
   467d8:	212c6504 	addi	r4,r4,-20076
   467dc:	d80b883a 	mov	r5,sp
   467e0:	000d883a 	mov	r6,zero
   467e4:	00408080 	call	40808 <adv7513_regmap_dump>
			if (r != 0) {
   467e8:	10000426 	beq	r2,zero,467fc <main+0x218>
				printf("[err] failed to read HDMI encoder regs! (%d)\n", r);
   467ec:	010001b4 	movhi	r4,6
   467f0:	212a0e04 	addi	r4,r4,-22472
   467f4:	100b883a 	mov	r5,r2
   467f8:	0048fb80 	call	48fb8 <printf>
			}

			printf("\n\n");
   467fc:	010001b4 	movhi	r4,6
   46800:	212a2304 	addi	r4,r4,-22388
   46804:	00490cc0 	call	490cc <puts>
			bin_dump(regs, 256);
   46808:	d809883a 	mov	r4,sp
   4680c:	004636c0 	call	4636c <bin_dump.constprop.0>
		}

		if (cmd[0] == 'e') {
   46810:	d8d18307 	ldb	r3,17932(sp)
   46814:	00801944 	movi	r2,101
   46818:	1880221e 	bne	r3,r2,468a4 <main+0x2c0>
			r = adv7513_edid_read(&encoder, edid, 0);
   4681c:	010001b4 	movhi	r4,6
   46820:	014001b4 	movhi	r5,6
   46824:	212c6504 	addi	r4,r4,-20076
   46828:	297a3304 	addi	r5,r5,-5940
   4682c:	000d883a 	mov	r6,zero
   46830:	00407740 	call	40774 <adv7513_edid_read>
			if (r != 0) {
   46834:	10000426 	beq	r2,zero,46848 <main+0x264>
				printf("[err] failed to read edid data! (%d)\n", r);
   46838:	010001b4 	movhi	r4,6
   4683c:	212a1a04 	addi	r4,r4,-22424
   46840:	100b883a 	mov	r5,r2
   46844:	0048fb80 	call	48fb8 <printf>
			}

			printf("\n\n");
   46848:	010001b4 	movhi	r4,6
   4684c:	212a2304 	addi	r4,r4,-22388
   46850:	00490cc0 	call	490cc <puts>
			bin_dump(edid, 256);
   46854:	010001b4 	movhi	r4,6
   46858:	213a3304 	addi	r4,r4,-5940
   4685c:	004636c0 	call	4636c <bin_dump.constprop.0>

			printf("\n");
   46860:	01000284 	movi	r4,10
   46864:	0048ffc0 	call	48ffc <putchar>
			if (cmd[2] == 'p') {
   46868:	d8d18387 	ldb	r3,17934(sp)
   4686c:	00801c04 	movi	r2,112
   46870:	18800c1e 	bne	r3,r2,468a4 <main+0x2c0>
				struct base_edid edid_info;

				r = edid_decode_v14(&edid_info, edid);
   46874:	014001b4 	movhi	r5,6
   46878:	d809883a 	mov	r4,sp
   4687c:	297a3304 	addi	r5,r5,-5940
   46880:	0042c780 	call	42c78 <edid_decode_v14>
				if (r != 0) {
   46884:	10000526 	beq	r2,zero,4689c <main+0x2b8>
					printf("[err] failed to decode edid data! (%d)\n", r);
   46888:	010001b4 	movhi	r4,6
   4688c:	212a2404 	addi	r4,r4,-22384
   46890:	100b883a 	mov	r5,r2
   46894:	0048fb80 	call	48fb8 <printf>
   46898:	00000206 	br	468a4 <main+0x2c0>
				} else {
					edid_print_v14(&edid_info);
   4689c:	d809883a 	mov	r4,sp
   468a0:	00449280 	call	44928 <edid_print_v14>
				}
			}
		}

		if (cmd[0] == 'i') {
   468a4:	d8d18307 	ldb	r3,17932(sp)
   468a8:	00801a44 	movi	r2,105
   468ac:	18801c1e 	bne	r3,r2,46920 <main+0x33c>
			printf("\n\n");
   468b0:	010001b4 	movhi	r4,6
   468b4:	212a2304 	addi	r4,r4,-22388
   468b8:	00490cc0 	call	490cc <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   468bc:	010001b4 	movhi	r4,6
   468c0:	212c6504 	addi	r4,r4,-20076
   468c4:	00404b00 	call	404b0 <adv7513_do_hpd_powerup>
			if (r != 0) {
   468c8:	10000526 	beq	r2,zero,468e0 <main+0x2fc>
				printf("[err] failed to do HDMI transmitter power up! (%d)", r);
   468cc:	010001b4 	movhi	r4,6
   468d0:	212a2e04 	addi	r4,r4,-22344
   468d4:	100b883a 	mov	r5,r2
   468d8:	0048fb80 	call	48fb8 <printf>
   468dc:	00000306 	br	468ec <main+0x308>
			} else {
				printf("[hpd] done HDMI transmitter power up.\n");
   468e0:	010001b4 	movhi	r4,6
   468e4:	212a3b04 	addi	r4,r4,-22292
   468e8:	00490cc0 	call	490cc <puts>
			}

			r = adv7513_chip_init(&encoder, 0);
   468ec:	010001b4 	movhi	r4,6
   468f0:	212c6504 	addi	r4,r4,-20076
   468f4:	000b883a 	mov	r5,zero
   468f8:	00408880 	call	40888 <adv7513_chip_init>
			if (r != 0) {
   468fc:	10000526 	beq	r2,zero,46914 <main+0x330>
				printf("[err] failed to do HDMI transmitter initialization! (%d)\n", r);
   46900:	010001b4 	movhi	r4,6
   46904:	212a4504 	addi	r4,r4,-22252
   46908:	100b883a 	mov	r5,r2
   4690c:	0048fb80 	call	48fb8 <printf>
   46910:	00000306 	br	46920 <main+0x33c>
			} else {
				printf("[hpd] done HDMI transmitter initialization.\n");
   46914:	010001b4 	movhi	r4,6
   46918:	212a5404 	addi	r4,r4,-22192
   4691c:	00490cc0 	call	490cc <puts>
			}
		}

		if (cmd[0] == 'v') {
   46920:	d8d18307 	ldb	r3,17932(sp)
   46924:	00801d84 	movi	r2,118
   46928:	18801c1e 	bne	r3,r2,4699c <main+0x3b8>
			printf("\n\n");
   4692c:	010001b4 	movhi	r4,6
   46930:	212a2304 	addi	r4,r4,-22388
   46934:	00490cc0 	call	490cc <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   46938:	010001b4 	movhi	r4,6
   4693c:	212c6504 	addi	r4,r4,-20076
   46940:	00404b00 	call	404b0 <adv7513_do_hpd_powerup>
			if (r != 0) {
   46944:	10000526 	beq	r2,zero,4695c <main+0x378>
				printf("[err] failed to do HDMI transmitter power up! (%d)\n", r);
   46948:	010001b4 	movhi	r4,6
   4694c:	212a5f04 	addi	r4,r4,-22148
   46950:	100b883a 	mov	r5,r2
   46954:	0048fb80 	call	48fb8 <printf>
   46958:	00000306 	br	46968 <main+0x384>
			} else {
				printf("[hpd] done HDMI transmitter power up.\n");
   4695c:	010001b4 	movhi	r4,6
   46960:	212a3b04 	addi	r4,r4,-22292
   46964:	00490cc0 	call	490cc <puts>
			}

			r = adv7513_chip_init(&encoder, 1);
   46968:	010001b4 	movhi	r4,6
   4696c:	212c6504 	addi	r4,r4,-20076
   46970:	01400044 	movi	r5,1
   46974:	00408880 	call	40888 <adv7513_chip_init>
			if (r != 0) {
   46978:	10000526 	beq	r2,zero,46990 <main+0x3ac>
				printf("[err] failed to do HDMI transmitter initialization! (%d)\n", r);
   4697c:	010001b4 	movhi	r4,6
   46980:	212a4504 	addi	r4,r4,-22252
   46984:	100b883a 	mov	r5,r2
   46988:	0048fb80 	call	48fb8 <printf>
   4698c:	00000306 	br	4699c <main+0x3b8>
			} else {
				printf("[hpd] done HDMI transmitter initialization.\n");
   46990:	010001b4 	movhi	r4,6
   46994:	212a5404 	addi	r4,r4,-22192
   46998:	00490cc0 	call	490cc <puts>
			}
		}

		if (cmd[0] == 'm') {
   4699c:	d8d18307 	ldb	r3,17932(sp)
   469a0:	00801b44 	movi	r2,109
   469a4:	1880101e 	bne	r3,r2,469e8 <main+0x404>
			int vic;
			const char *mode = 0;

			r = adv7513_mode_state(&encoder, &vic, &mode);
   469a8:	010001b4 	movhi	r4,6
   469ac:	212c6504 	addi	r4,r4,-20076
   469b0:	d9519a04 	addi	r5,sp,18024
   469b4:	d80d883a 	mov	r6,sp
			}
		}

		if (cmd[0] == 'm') {
			int vic;
			const char *mode = 0;
   469b8:	d8000015 	stw	zero,0(sp)

			r = adv7513_mode_state(&encoder, &vic, &mode);
   469bc:	00407000 	call	40700 <adv7513_mode_state>
			if (r != 0) {
   469c0:	10000426 	beq	r2,zero,469d4 <main+0x3f0>
				printf("[err] failed to read HDMI transmitter regs! (%d)\n", r);
   469c4:	010001b4 	movhi	r4,6
   469c8:	212a6c04 	addi	r4,r4,-22096
   469cc:	100b883a 	mov	r5,r2
   469d0:	0048fb80 	call	48fb8 <printf>
			}

			printf("\n\ncurrent mode : VIC)%d %s\n", vic, mode);
   469d4:	d9519a17 	ldw	r5,18024(sp)
   469d8:	d9800017 	ldw	r6,0(sp)
   469dc:	010001b4 	movhi	r4,6
   469e0:	212a7904 	addi	r4,r4,-22044
   469e4:	0048fb80 	call	48fb8 <printf>
		}

		if (cmd[0] == 'r') {
   469e8:	d8d18307 	ldb	r3,17932(sp)
   469ec:	00801c84 	movi	r2,114
   469f0:	1880191e 	bne	r3,r2,46a58 <main+0x474>
			alt_u8 regv = 0;
			alt_u8 reg = 0;

			reg = (alt_u8)strtoul(&cmd[2], 0, 16);
   469f4:	000b883a 	mov	r5,zero
   469f8:	01800404 	movi	r6,16
   469fc:	d9118384 	addi	r4,sp,17934

			printf("\n\ncurrent mode : VIC)%d %s\n", vic, mode);
		}

		if (cmd[0] == 'r') {
			alt_u8 regv = 0;
   46a00:	d8000005 	stb	zero,0(sp)
			alt_u8 reg = 0;

			reg = (alt_u8)strtoul(&cmd[2], 0, 16);
   46a04:	00498400 	call	49840 <strtoul>

			printf("\n\n");
   46a08:	010001b4 	movhi	r4,6
   46a0c:	212a2304 	addi	r4,r4,-22388

		if (cmd[0] == 'r') {
			alt_u8 regv = 0;
			alt_u8 reg = 0;

			reg = (alt_u8)strtoul(&cmd[2], 0, 16);
   46a10:	1021883a 	mov	r16,r2

			printf("\n\n");
   46a14:	00490cc0 	call	490cc <puts>
   46a18:	84003fcc 	andi	r16,r16,255
			if (reg_read(&encoder, reg, &regv) == 0) {
   46a1c:	010001b4 	movhi	r4,6
   46a20:	212c6504 	addi	r4,r4,-20076
   46a24:	800b883a 	mov	r5,r16
   46a28:	d80d883a 	mov	r6,sp
   46a2c:	00456d40 	call	456d4 <reg_read>
   46a30:	1000061e 	bne	r2,zero,46a4c <main+0x468>
				printf("[%02x] %02x\n", reg, regv);
   46a34:	d9800003 	ldbu	r6,0(sp)
   46a38:	010001b4 	movhi	r4,6
   46a3c:	212a8004 	addi	r4,r4,-22016
   46a40:	800b883a 	mov	r5,r16
   46a44:	0048fb80 	call	48fb8 <printf>
   46a48:	00000306 	br	46a58 <main+0x474>
			} else {
				printf("[err] i2c error!\n");
   46a4c:	010001b4 	movhi	r4,6
   46a50:	212a8404 	addi	r4,r4,-22000
   46a54:	00490cc0 	call	490cc <puts>
			}
		}

		if (cmd[0] == 'w') {
   46a58:	d8d18307 	ldb	r3,17932(sp)
   46a5c:	00801dc4 	movi	r2,119
   46a60:	1880291e 	bne	r3,r2,46b08 <main+0x524>
			alt_u8 regv = 0;
			alt_u8 reg = 0;
			char arg1[8] = {0};
			char arg2[8] = {0};

			strncpy(arg1, &cmd[2], 2);
   46a64:	d9119a04 	addi	r4,sp,18024
   46a68:	d9518384 	addi	r5,sp,17934
   46a6c:	01800084 	movi	r6,2
		}

		if (cmd[0] == 'w') {
			alt_u8 regv = 0;
			alt_u8 reg = 0;
			char arg1[8] = {0};
   46a70:	d8119a15 	stw	zero,18024(sp)
   46a74:	d8119b15 	stw	zero,18028(sp)
			char arg2[8] = {0};
   46a78:	d8000015 	stw	zero,0(sp)
   46a7c:	d8000115 	stw	zero,4(sp)

			strncpy(arg1, &cmd[2], 2);
   46a80:	00494cc0 	call	494cc <strncpy>
			strncpy(arg2, &cmd[5], 2);
   46a84:	d809883a 	mov	r4,sp
   46a88:	d9518444 	addi	r5,sp,17937
   46a8c:	01800084 	movi	r6,2
   46a90:	00494cc0 	call	494cc <strncpy>

			reg = (alt_u8)strtoul(arg1, 0, 16);
   46a94:	d9119a04 	addi	r4,sp,18024
   46a98:	000b883a 	mov	r5,zero
   46a9c:	01800404 	movi	r6,16
   46aa0:	00498400 	call	49840 <strtoul>
			regv = (alt_u8)strtoul(arg2, 0, 16);
   46aa4:	000b883a 	mov	r5,zero
   46aa8:	01800404 	movi	r6,16
   46aac:	d809883a 	mov	r4,sp
			char arg2[8] = {0};

			strncpy(arg1, &cmd[2], 2);
			strncpy(arg2, &cmd[5], 2);

			reg = (alt_u8)strtoul(arg1, 0, 16);
   46ab0:	1023883a 	mov	r17,r2
			regv = (alt_u8)strtoul(arg2, 0, 16);
   46ab4:	00498400 	call	49840 <strtoul>

			printf("\n\n");
   46ab8:	010001b4 	movhi	r4,6
   46abc:	212a2304 	addi	r4,r4,-22388

			strncpy(arg1, &cmd[2], 2);
			strncpy(arg2, &cmd[5], 2);

			reg = (alt_u8)strtoul(arg1, 0, 16);
			regv = (alt_u8)strtoul(arg2, 0, 16);
   46ac0:	1021883a 	mov	r16,r2

			printf("\n\n");
   46ac4:	00490cc0 	call	490cc <puts>
   46ac8:	8c403fcc 	andi	r17,r17,255
   46acc:	84003fcc 	andi	r16,r16,255
			if (reg_write(&encoder, reg, regv) == 0) {
   46ad0:	010001b4 	movhi	r4,6
   46ad4:	212c6504 	addi	r4,r4,-20076
   46ad8:	880b883a 	mov	r5,r17
   46adc:	800d883a 	mov	r6,r16
   46ae0:	00457140 	call	45714 <reg_write>
   46ae4:	1000031e 	bne	r2,zero,46af4 <main+0x510>
				printf("[%02x] <- %02x (done)\n", reg, regv);
   46ae8:	010001b4 	movhi	r4,6
   46aec:	212a8904 	addi	r4,r4,-21980
   46af0:	00000206 	br	46afc <main+0x518>
			} else {
				printf("[%02x] <- %02x (i2c error)\n", reg, regv);
   46af4:	010001b4 	movhi	r4,6
   46af8:	212a8f04 	addi	r4,r4,-21956
   46afc:	880b883a 	mov	r5,r17
   46b00:	800d883a 	mov	r6,r16
   46b04:	0048fb80 	call	48fb8 <printf>
			}
		}

		if (cmd[0] == 'o') {
   46b08:	d8d18307 	ldb	r3,17932(sp)
   46b0c:	00801bc4 	movi	r2,111
   46b10:	18800f1e 	bne	r3,r2,46b50 <main+0x56c>
			printf("\n\n");
   46b14:	010001b4 	movhi	r4,6
   46b18:	212a2304 	addi	r4,r4,-22388
   46b1c:	00490cc0 	call	490cc <puts>

			r = adv7513_do_hpd_powerdown(&encoder);
   46b20:	010001b4 	movhi	r4,6
   46b24:	212c6504 	addi	r4,r4,-20076
   46b28:	004068c0 	call	4068c <adv7513_do_hpd_powerdown>
			if (r != 0) {
   46b2c:	10000526 	beq	r2,zero,46b44 <main+0x560>
				printf("[err] failed to do HDMI transmitter power off! (%d)\n", r);
   46b30:	010001b4 	movhi	r4,6
   46b34:	212a9604 	addi	r4,r4,-21928
   46b38:	100b883a 	mov	r5,r2
   46b3c:	0048fb80 	call	48fb8 <printf>
   46b40:	00000306 	br	46b50 <main+0x56c>
			} else {
				printf("[hpd] done HDMI transmitter power off setting.\n");
   46b44:	010001b4 	movhi	r4,6
   46b48:	212aa404 	addi	r4,r4,-21872
   46b4c:	00490cc0 	call	490cc <puts>
			}

			//usleep(100000);
		}
		if (cmd[0] == 'a') {
   46b50:	d8d18307 	ldb	r3,17932(sp)
   46b54:	00801844 	movi	r2,97
   46b58:	18800f1e 	bne	r3,r2,46b98 <main+0x5b4>
					printf("\n\n");
   46b5c:	010001b4 	movhi	r4,6
   46b60:	212a2304 	addi	r4,r4,-22388
   46b64:	00490cc0 	call	490cc <puts>

					r = adv7513_audio_on(&encoder);
   46b68:	010001b4 	movhi	r4,6
   46b6c:	212c6504 	addi	r4,r4,-20076
   46b70:	00405980 	call	40598 <adv7513_audio_on>
					if (r != 0) {
   46b74:	10000526 	beq	r2,zero,46b8c <main+0x5a8>
						printf("[err] failed to do HDMI transmitter power off! (%d)\n", r);
   46b78:	010001b4 	movhi	r4,6
   46b7c:	212a9604 	addi	r4,r4,-21928
   46b80:	100b883a 	mov	r5,r2
   46b84:	0048fb80 	call	48fb8 <printf>
   46b88:	00000306 	br	46b98 <main+0x5b4>
					} else {
						printf("[hpd] done HDMI transmitter power on setting.\n");
   46b8c:	010001b4 	movhi	r4,6
   46b90:	212ab004 	addi	r4,r4,-21824
   46b94:	00490cc0 	call	490cc <puts>
					}

					//usleep(100000);
				}
		if (cmd[0] == 'b') {
   46b98:	d8d18307 	ldb	r3,17932(sp)
   46b9c:	00801884 	movi	r2,98
   46ba0:	18800f1e 	bne	r3,r2,46be0 <main+0x5fc>
					printf("\n\n");
   46ba4:	010001b4 	movhi	r4,6
   46ba8:	212a2304 	addi	r4,r4,-22388
   46bac:	00490cc0 	call	490cc <puts>

					r = adv7513_audio_off(&encoder);
   46bb0:	010001b4 	movhi	r4,6
   46bb4:	212c6504 	addi	r4,r4,-20076
   46bb8:	00405fc0 	call	405fc <adv7513_audio_off>
					if (r != 0) {
   46bbc:	10000526 	beq	r2,zero,46bd4 <main+0x5f0>
						printf("[err] failed to do HDMI transmitter power off! (%d)\n", r);
   46bc0:	010001b4 	movhi	r4,6
   46bc4:	212a9604 	addi	r4,r4,-21928
   46bc8:	100b883a 	mov	r5,r2
   46bcc:	0048fb80 	call	48fb8 <printf>
   46bd0:	00000306 	br	46be0 <main+0x5fc>
					} else {
						printf("[hpd] done HDMI transmitter power off setting.\n");
   46bd4:	010001b4 	movhi	r4,6
   46bd8:	212aa404 	addi	r4,r4,-21872
   46bdc:	00490cc0 	call	490cc <puts>
					}

					//usleep(100000);
				}
		if (cmd[0] == 'h') {
   46be0:	d8d18307 	ldb	r3,17932(sp)
   46be4:	00801a04 	movi	r2,104
   46be8:	18beeb1e 	bne	r3,r2,46798 <__alt_data_end+0xfffdf698>
			printf("\n\n");
   46bec:	010001b4 	movhi	r4,6
   46bf0:	212a2304 	addi	r4,r4,-22388
   46bf4:	00490cc0 	call	490cc <puts>
	return 0;
}

static void cmd_help()
{
	printf("  d         perform register-space dump of the ADV7513 transmitter\n");
   46bf8:	010001b4 	movhi	r4,6
   46bfc:	21298a04 	addi	r4,r4,-23000
   46c00:	00490cc0 	call	490cc <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   46c04:	010001b4 	movhi	r4,6
   46c08:	21299b04 	addi	r4,r4,-22932
   46c0c:	00490cc0 	call	490cc <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   46c10:	010001b4 	movhi	r4,6
   46c14:	2129ac04 	addi	r4,r4,-22864
   46c18:	00490cc0 	call	490cc <puts>
	printf("            and decode it in the human readable format\n");
   46c1c:	010001b4 	movhi	r4,6
   46c20:	2129bd04 	addi	r4,r4,-22796
   46c24:	00490cc0 	call	490cc <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   46c28:	010001b4 	movhi	r4,6
   46c2c:	2129cb04 	addi	r4,r4,-22740
   46c30:	00490cc0 	call	490cc <puts>
	printf("  o         power off the HDMI transmitter\n");
   46c34:	010001b4 	movhi	r4,6
   46c38:	2129dd04 	addi	r4,r4,-22668
   46c3c:	00490cc0 	call	490cc <puts>
	printf("  i         power up the HDMI transmitter and initialize it in HDMI mode\n");
   46c40:	010001b4 	movhi	r4,6
   46c44:	2129e804 	addi	r4,r4,-22624
   46c48:	00490cc0 	call	490cc <puts>
	printf("  v         power up the HDMI transmitter and initialize it in DVI mode\n");
   46c4c:	010001b4 	movhi	r4,6
   46c50:	212abc04 	addi	r4,r4,-21776
   46c54:	00490cc0 	call	490cc <puts>
	printf("  r hh      readback HDMI transmitter register at address hh (2-digit hex)\n");
   46c58:	010001b4 	movhi	r4,6
   46c5c:	212ace04 	addi	r4,r4,-21704
   46c60:	00490cc0 	call	490cc <puts>
	printf("  w hh vv   write HDMI transmitter register value vv (2-digit hex) to address hh\n");
   46c64:	010001b4 	movhi	r4,6
   46c68:	212ae104 	addi	r4,r4,-21628
   46c6c:	00490cc0 	call	490cc <puts>
	printf("            (note that hh should be exactly a 2-digit hex number)\n");
   46c70:	010001b4 	movhi	r4,6
   46c74:	212af604 	addi	r4,r4,-21544
   46c78:	00490cc0 	call	490cc <puts>
	printf("  a         audio on \n");
   46c7c:	010001b4 	movhi	r4,6
   46c80:	2129fb04 	addi	r4,r4,-22548
   46c84:	00490cc0 	call	490cc <puts>
	printf("  b         audio off \n");
   46c88:	010001b4 	movhi	r4,6
   46c8c:	212a0104 	addi	r4,r4,-22524
   46c90:	00490cc0 	call	490cc <puts>
				}
		if (cmd[0] == 'h') {
			printf("\n\n");
			cmd_help();
		}
	}
   46c94:	003ec006 	br	46798 <__alt_data_end+0xfffdf698>

00046c98 <udivmodsi4>:
   46c98:	2900182e 	bgeu	r5,r4,46cfc <udivmodsi4+0x64>
   46c9c:	28001716 	blt	r5,zero,46cfc <udivmodsi4+0x64>
   46ca0:	00800804 	movi	r2,32
   46ca4:	00c00044 	movi	r3,1
   46ca8:	00000206 	br	46cb4 <udivmodsi4+0x1c>
   46cac:	10001126 	beq	r2,zero,46cf4 <udivmodsi4+0x5c>
   46cb0:	28000516 	blt	r5,zero,46cc8 <udivmodsi4+0x30>
   46cb4:	294b883a 	add	r5,r5,r5
   46cb8:	10bfffc4 	addi	r2,r2,-1
   46cbc:	18c7883a 	add	r3,r3,r3
   46cc0:	293ffa36 	bltu	r5,r4,46cac <__alt_data_end+0xfffdfbac>
   46cc4:	18000b26 	beq	r3,zero,46cf4 <udivmodsi4+0x5c>
   46cc8:	0005883a 	mov	r2,zero
   46ccc:	21400236 	bltu	r4,r5,46cd8 <udivmodsi4+0x40>
   46cd0:	2149c83a 	sub	r4,r4,r5
   46cd4:	10c4b03a 	or	r2,r2,r3
   46cd8:	1806d07a 	srli	r3,r3,1
   46cdc:	280ad07a 	srli	r5,r5,1
   46ce0:	183ffa1e 	bne	r3,zero,46ccc <__alt_data_end+0xfffdfbcc>
   46ce4:	3000011e 	bne	r6,zero,46cec <udivmodsi4+0x54>
   46ce8:	f800283a 	ret
   46cec:	2005883a 	mov	r2,r4
   46cf0:	f800283a 	ret
   46cf4:	0005883a 	mov	r2,zero
   46cf8:	003ffa06 	br	46ce4 <__alt_data_end+0xfffdfbe4>
   46cfc:	00c00044 	movi	r3,1
   46d00:	003ff106 	br	46cc8 <__alt_data_end+0xfffdfbc8>

00046d04 <__divsi3>:
   46d04:	defffe04 	addi	sp,sp,-8
   46d08:	dfc00115 	stw	ra,4(sp)
   46d0c:	dc000015 	stw	r16,0(sp)
   46d10:	20000b16 	blt	r4,zero,46d40 <__divsi3+0x3c>
   46d14:	0021883a 	mov	r16,zero
   46d18:	28000c16 	blt	r5,zero,46d4c <__divsi3+0x48>
   46d1c:	000d883a 	mov	r6,zero
   46d20:	0046c980 	call	46c98 <udivmodsi4>
   46d24:	0407c83a 	sub	r3,zero,r16
   46d28:	1884f03a 	xor	r2,r3,r2
   46d2c:	1405883a 	add	r2,r2,r16
   46d30:	dfc00117 	ldw	ra,4(sp)
   46d34:	dc000017 	ldw	r16,0(sp)
   46d38:	dec00204 	addi	sp,sp,8
   46d3c:	f800283a 	ret
   46d40:	0109c83a 	sub	r4,zero,r4
   46d44:	04000044 	movi	r16,1
   46d48:	283ff40e 	bge	r5,zero,46d1c <__alt_data_end+0xfffdfc1c>
   46d4c:	014bc83a 	sub	r5,zero,r5
   46d50:	8400005c 	xori	r16,r16,1
   46d54:	003ff106 	br	46d1c <__alt_data_end+0xfffdfc1c>

00046d58 <__modsi3>:
   46d58:	defffd04 	addi	sp,sp,-12
   46d5c:	dfc00215 	stw	ra,8(sp)
   46d60:	dc400115 	stw	r17,4(sp)
   46d64:	dc000015 	stw	r16,0(sp)
   46d68:	20000c16 	blt	r4,zero,46d9c <__modsi3+0x44>
   46d6c:	0023883a 	mov	r17,zero
   46d70:	0021883a 	mov	r16,zero
   46d74:	28000d16 	blt	r5,zero,46dac <__modsi3+0x54>
   46d78:	01800044 	movi	r6,1
   46d7c:	0046c980 	call	46c98 <udivmodsi4>
   46d80:	1404f03a 	xor	r2,r2,r16
   46d84:	8885883a 	add	r2,r17,r2
   46d88:	dfc00217 	ldw	ra,8(sp)
   46d8c:	dc400117 	ldw	r17,4(sp)
   46d90:	dc000017 	ldw	r16,0(sp)
   46d94:	dec00304 	addi	sp,sp,12
   46d98:	f800283a 	ret
   46d9c:	0109c83a 	sub	r4,zero,r4
   46da0:	04400044 	movi	r17,1
   46da4:	043fffc4 	movi	r16,-1
   46da8:	283ff30e 	bge	r5,zero,46d78 <__alt_data_end+0xfffdfc78>
   46dac:	014bc83a 	sub	r5,zero,r5
   46db0:	003ff106 	br	46d78 <__alt_data_end+0xfffdfc78>

00046db4 <__udivsi3>:
   46db4:	000d883a 	mov	r6,zero
   46db8:	0046c981 	jmpi	46c98 <udivmodsi4>

00046dbc <__umodsi3>:
   46dbc:	01800044 	movi	r6,1
   46dc0:	0046c981 	jmpi	46c98 <udivmodsi4>

00046dc4 <__addsf3>:
   46dc4:	defffc04 	addi	sp,sp,-16
   46dc8:	2004d7fa 	srli	r2,r4,31
   46dcc:	280ed5fa 	srli	r7,r5,23
   46dd0:	dc000015 	stw	r16,0(sp)
   46dd4:	01802034 	movhi	r6,128
   46dd8:	2020d5fa 	srli	r16,r4,23
   46ddc:	31bfffc4 	addi	r6,r6,-1
   46de0:	2810d7fa 	srli	r8,r5,31
   46de4:	3108703a 	and	r4,r6,r4
   46de8:	dc800215 	stw	r18,8(sp)
   46dec:	314c703a 	and	r6,r6,r5
   46df0:	84003fcc 	andi	r16,r16,255
   46df4:	200690fa 	slli	r3,r4,3
   46df8:	dfc00315 	stw	ra,12(sp)
   46dfc:	39003fcc 	andi	r4,r7,255
   46e00:	dc400115 	stw	r17,4(sp)
   46e04:	14803fcc 	andi	r18,r2,255
   46e08:	300c90fa 	slli	r6,r6,3
   46e0c:	810bc83a 	sub	r5,r16,r4
   46e10:	92004826 	beq	r18,r8,46f34 <__addsf3+0x170>
   46e14:	01406c0e 	bge	zero,r5,46fc8 <__addsf3+0x204>
   46e18:	20001e1e 	bne	r4,zero,46e94 <__addsf3+0xd0>
   46e1c:	3000611e 	bne	r6,zero,46fa4 <__addsf3+0x1e0>
   46e20:	188001cc 	andi	r2,r3,7
   46e24:	10000426 	beq	r2,zero,46e38 <__addsf3+0x74>
   46e28:	190003cc 	andi	r4,r3,15
   46e2c:	00800104 	movi	r2,4
   46e30:	20800126 	beq	r4,r2,46e38 <__addsf3+0x74>
   46e34:	18c00104 	addi	r3,r3,4
   46e38:	1901002c 	andhi	r4,r3,1024
   46e3c:	9005883a 	mov	r2,r18
   46e40:	20003426 	beq	r4,zero,46f14 <__addsf3+0x150>
   46e44:	81400044 	addi	r5,r16,1
   46e48:	01003fc4 	movi	r4,255
   46e4c:	29006926 	beq	r5,r4,46ff4 <__addsf3+0x230>
   46e50:	180691ba 	slli	r3,r3,6
   46e54:	1808d27a 	srli	r4,r3,9
   46e58:	29403fcc 	andi	r5,r5,255
   46e5c:	280a95fa 	slli	r5,r5,23
   46e60:	10803fcc 	andi	r2,r2,255
   46e64:	00c02034 	movhi	r3,128
   46e68:	100497fa 	slli	r2,r2,31
   46e6c:	18ffffc4 	addi	r3,r3,-1
   46e70:	20c6703a 	and	r3,r4,r3
   46e74:	1946b03a 	or	r3,r3,r5
   46e78:	1884b03a 	or	r2,r3,r2
   46e7c:	dfc00317 	ldw	ra,12(sp)
   46e80:	dc800217 	ldw	r18,8(sp)
   46e84:	dc400117 	ldw	r17,4(sp)
   46e88:	dc000017 	ldw	r16,0(sp)
   46e8c:	dec00404 	addi	sp,sp,16
   46e90:	f800283a 	ret
   46e94:	00803fc4 	movi	r2,255
   46e98:	80bfe126 	beq	r16,r2,46e20 <__alt_data_end+0xfffdfd20>
   46e9c:	31810034 	orhi	r6,r6,1024
   46ea0:	008006c4 	movi	r2,27
   46ea4:	11405b0e 	bge	r2,r5,47014 <__addsf3+0x250>
   46ea8:	01400044 	movi	r5,1
   46eac:	1947c83a 	sub	r3,r3,r5
   46eb0:	1881002c 	andhi	r2,r3,1024
   46eb4:	10001426 	beq	r2,zero,46f08 <__addsf3+0x144>
   46eb8:	04410034 	movhi	r17,1024
   46ebc:	8c7fffc4 	addi	r17,r17,-1
   46ec0:	1c62703a 	and	r17,r3,r17
   46ec4:	8809883a 	mov	r4,r17
   46ec8:	0047d380 	call	47d38 <__clzsi2>
   46ecc:	10bffec4 	addi	r2,r2,-5
   46ed0:	88a2983a 	sll	r17,r17,r2
   46ed4:	14004a16 	blt	r2,r16,47000 <__addsf3+0x23c>
   46ed8:	140bc83a 	sub	r5,r2,r16
   46edc:	00c007c4 	movi	r3,31
   46ee0:	1947c83a 	sub	r3,r3,r5
   46ee4:	88c6983a 	sll	r3,r17,r3
   46ee8:	29400044 	addi	r5,r5,1
   46eec:	8962d83a 	srl	r17,r17,r5
   46ef0:	1806c03a 	cmpne	r3,r3,zero
   46ef4:	0021883a 	mov	r16,zero
   46ef8:	1c46b03a 	or	r3,r3,r17
   46efc:	003fc806 	br	46e20 <__alt_data_end+0xfffdfd20>
   46f00:	1000e526 	beq	r2,zero,47298 <__addsf3+0x4d4>
   46f04:	1007883a 	mov	r3,r2
   46f08:	188001cc 	andi	r2,r3,7
   46f0c:	103fc61e 	bne	r2,zero,46e28 <__alt_data_end+0xfffdfd28>
   46f10:	9005883a 	mov	r2,r18
   46f14:	01003fc4 	movi	r4,255
   46f18:	1806d0fa 	srli	r3,r3,3
   46f1c:	81001a26 	beq	r16,r4,46f88 <__addsf3+0x1c4>
   46f20:	01002034 	movhi	r4,128
   46f24:	213fffc4 	addi	r4,r4,-1
   46f28:	800b883a 	mov	r5,r16
   46f2c:	1908703a 	and	r4,r3,r4
   46f30:	003fc906 	br	46e58 <__alt_data_end+0xfffdfd58>
   46f34:	01403e0e 	bge	zero,r5,47030 <__addsf3+0x26c>
   46f38:	20001e26 	beq	r4,zero,46fb4 <__addsf3+0x1f0>
   46f3c:	01003fc4 	movi	r4,255
   46f40:	813fb726 	beq	r16,r4,46e20 <__alt_data_end+0xfffdfd20>
   46f44:	31810034 	orhi	r6,r6,1024
   46f48:	010006c4 	movi	r4,27
   46f4c:	2140570e 	bge	r4,r5,470ac <__addsf3+0x2e8>
   46f50:	01400044 	movi	r5,1
   46f54:	1947883a 	add	r3,r3,r5
   46f58:	1901002c 	andhi	r4,r3,1024
   46f5c:	203fea26 	beq	r4,zero,46f08 <__alt_data_end+0xfffdfe08>
   46f60:	84000044 	addi	r16,r16,1
   46f64:	01003fc4 	movi	r4,255
   46f68:	81007526 	beq	r16,r4,47140 <__addsf3+0x37c>
   46f6c:	00bf0034 	movhi	r2,64512
   46f70:	10bfffc4 	addi	r2,r2,-1
   46f74:	1900004c 	andi	r4,r3,1
   46f78:	1886703a 	and	r3,r3,r2
   46f7c:	1806d07a 	srli	r3,r3,1
   46f80:	1906b03a 	or	r3,r3,r4
   46f84:	003fa606 	br	46e20 <__alt_data_end+0xfffdfd20>
   46f88:	18001a26 	beq	r3,zero,46ff4 <__addsf3+0x230>
   46f8c:	19001034 	orhi	r4,r3,64
   46f90:	00c02034 	movhi	r3,128
   46f94:	18ffffc4 	addi	r3,r3,-1
   46f98:	017fffc4 	movi	r5,-1
   46f9c:	20c8703a 	and	r4,r4,r3
   46fa0:	003fad06 	br	46e58 <__alt_data_end+0xfffdfd58>
   46fa4:	297fffc4 	addi	r5,r5,-1
   46fa8:	28002c1e 	bne	r5,zero,4705c <__addsf3+0x298>
   46fac:	1987c83a 	sub	r3,r3,r6
   46fb0:	003fbf06 	br	46eb0 <__alt_data_end+0xfffdfdb0>
   46fb4:	303f9a26 	beq	r6,zero,46e20 <__alt_data_end+0xfffdfd20>
   46fb8:	297fffc4 	addi	r5,r5,-1
   46fbc:	28004b1e 	bne	r5,zero,470ec <__addsf3+0x328>
   46fc0:	1987883a 	add	r3,r3,r6
   46fc4:	003fe406 	br	46f58 <__alt_data_end+0xfffdfe58>
   46fc8:	2800271e 	bne	r5,zero,47068 <__addsf3+0x2a4>
   46fcc:	80800044 	addi	r2,r16,1
   46fd0:	10803fcc 	andi	r2,r2,255
   46fd4:	01000044 	movi	r4,1
   46fd8:	2080520e 	bge	r4,r2,47124 <__addsf3+0x360>
   46fdc:	19a3c83a 	sub	r17,r3,r6
   46fe0:	8881002c 	andhi	r2,r17,1024
   46fe4:	10002c26 	beq	r2,zero,47098 <__addsf3+0x2d4>
   46fe8:	30e3c83a 	sub	r17,r6,r3
   46fec:	4025883a 	mov	r18,r8
   46ff0:	003fb406 	br	46ec4 <__alt_data_end+0xfffdfdc4>
   46ff4:	017fffc4 	movi	r5,-1
   46ff8:	0009883a 	mov	r4,zero
   46ffc:	003f9606 	br	46e58 <__alt_data_end+0xfffdfd58>
   47000:	00ff0034 	movhi	r3,64512
   47004:	18ffffc4 	addi	r3,r3,-1
   47008:	80a1c83a 	sub	r16,r16,r2
   4700c:	88c6703a 	and	r3,r17,r3
   47010:	003f8306 	br	46e20 <__alt_data_end+0xfffdfd20>
   47014:	00800804 	movi	r2,32
   47018:	1145c83a 	sub	r2,r2,r5
   4701c:	3084983a 	sll	r2,r6,r2
   47020:	314cd83a 	srl	r6,r6,r5
   47024:	100ac03a 	cmpne	r5,r2,zero
   47028:	298ab03a 	or	r5,r5,r6
   4702c:	003f9f06 	br	46eac <__alt_data_end+0xfffdfdac>
   47030:	2800451e 	bne	r5,zero,47148 <__addsf3+0x384>
   47034:	81000044 	addi	r4,r16,1
   47038:	21c03fcc 	andi	r7,r4,255
   4703c:	01400044 	movi	r5,1
   47040:	29c02d0e 	bge	r5,r7,470f8 <__addsf3+0x334>
   47044:	01403fc4 	movi	r5,255
   47048:	21403c26 	beq	r4,r5,4713c <__addsf3+0x378>
   4704c:	30c7883a 	add	r3,r6,r3
   47050:	1806d07a 	srli	r3,r3,1
   47054:	2021883a 	mov	r16,r4
   47058:	003f7106 	br	46e20 <__alt_data_end+0xfffdfd20>
   4705c:	00803fc4 	movi	r2,255
   47060:	80bf8f1e 	bne	r16,r2,46ea0 <__alt_data_end+0xfffdfda0>
   47064:	003f6e06 	br	46e20 <__alt_data_end+0xfffdfd20>
   47068:	80001726 	beq	r16,zero,470c8 <__addsf3+0x304>
   4706c:	00803fc4 	movi	r2,255
   47070:	20801a26 	beq	r4,r2,470dc <__addsf3+0x318>
   47074:	014bc83a 	sub	r5,zero,r5
   47078:	18c10034 	orhi	r3,r3,1024
   4707c:	008006c4 	movi	r2,27
   47080:	1140430e 	bge	r2,r5,47190 <__addsf3+0x3cc>
   47084:	00c00044 	movi	r3,1
   47088:	30c7c83a 	sub	r3,r6,r3
   4708c:	2021883a 	mov	r16,r4
   47090:	4025883a 	mov	r18,r8
   47094:	003f8606 	br	46eb0 <__alt_data_end+0xfffdfdb0>
   47098:	883f8a1e 	bne	r17,zero,46ec4 <__alt_data_end+0xfffdfdc4>
   4709c:	0007883a 	mov	r3,zero
   470a0:	0005883a 	mov	r2,zero
   470a4:	0021883a 	mov	r16,zero
   470a8:	003f9a06 	br	46f14 <__alt_data_end+0xfffdfe14>
   470ac:	01000804 	movi	r4,32
   470b0:	2149c83a 	sub	r4,r4,r5
   470b4:	3108983a 	sll	r4,r6,r4
   470b8:	314cd83a 	srl	r6,r6,r5
   470bc:	200ac03a 	cmpne	r5,r4,zero
   470c0:	298ab03a 	or	r5,r5,r6
   470c4:	003fa306 	br	46f54 <__alt_data_end+0xfffdfe54>
   470c8:	18000426 	beq	r3,zero,470dc <__addsf3+0x318>
   470cc:	014a303a 	nor	r5,zero,r5
   470d0:	283fed26 	beq	r5,zero,47088 <__alt_data_end+0xfffdff88>
   470d4:	00803fc4 	movi	r2,255
   470d8:	20bfe81e 	bne	r4,r2,4707c <__alt_data_end+0xfffdff7c>
   470dc:	3007883a 	mov	r3,r6
   470e0:	2021883a 	mov	r16,r4
   470e4:	4025883a 	mov	r18,r8
   470e8:	003f4d06 	br	46e20 <__alt_data_end+0xfffdfd20>
   470ec:	01003fc4 	movi	r4,255
   470f0:	813f951e 	bne	r16,r4,46f48 <__alt_data_end+0xfffdfe48>
   470f4:	003f4a06 	br	46e20 <__alt_data_end+0xfffdfd20>
   470f8:	8000471e 	bne	r16,zero,47218 <__addsf3+0x454>
   470fc:	18006126 	beq	r3,zero,47284 <__addsf3+0x4c0>
   47100:	303f4726 	beq	r6,zero,46e20 <__alt_data_end+0xfffdfd20>
   47104:	1987883a 	add	r3,r3,r6
   47108:	1881002c 	andhi	r2,r3,1024
   4710c:	103f7e26 	beq	r2,zero,46f08 <__alt_data_end+0xfffdfe08>
   47110:	00bf0034 	movhi	r2,64512
   47114:	10bfffc4 	addi	r2,r2,-1
   47118:	2821883a 	mov	r16,r5
   4711c:	1886703a 	and	r3,r3,r2
   47120:	003f3f06 	br	46e20 <__alt_data_end+0xfffdfd20>
   47124:	8000141e 	bne	r16,zero,47178 <__addsf3+0x3b4>
   47128:	1800311e 	bne	r3,zero,471f0 <__addsf3+0x42c>
   4712c:	30004626 	beq	r6,zero,47248 <__addsf3+0x484>
   47130:	3007883a 	mov	r3,r6
   47134:	4025883a 	mov	r18,r8
   47138:	003f3906 	br	46e20 <__alt_data_end+0xfffdfd20>
   4713c:	2021883a 	mov	r16,r4
   47140:	0007883a 	mov	r3,zero
   47144:	003f7306 	br	46f14 <__alt_data_end+0xfffdfe14>
   47148:	8000181e 	bne	r16,zero,471ac <__addsf3+0x3e8>
   4714c:	18002f26 	beq	r3,zero,4720c <__addsf3+0x448>
   47150:	014a303a 	nor	r5,zero,r5
   47154:	28000526 	beq	r5,zero,4716c <__addsf3+0x3a8>
   47158:	01c03fc4 	movi	r7,255
   4715c:	21c02b26 	beq	r4,r7,4720c <__addsf3+0x448>
   47160:	01c006c4 	movi	r7,27
   47164:	3940400e 	bge	r7,r5,47268 <__addsf3+0x4a4>
   47168:	00c00044 	movi	r3,1
   4716c:	1987883a 	add	r3,r3,r6
   47170:	2021883a 	mov	r16,r4
   47174:	003f7806 	br	46f58 <__alt_data_end+0xfffdfe58>
   47178:	1800111e 	bne	r3,zero,471c0 <__addsf3+0x3fc>
   4717c:	30003526 	beq	r6,zero,47254 <__addsf3+0x490>
   47180:	3007883a 	mov	r3,r6
   47184:	4025883a 	mov	r18,r8
   47188:	04003fc4 	movi	r16,255
   4718c:	003f2406 	br	46e20 <__alt_data_end+0xfffdfd20>
   47190:	00800804 	movi	r2,32
   47194:	1145c83a 	sub	r2,r2,r5
   47198:	1884983a 	sll	r2,r3,r2
   4719c:	194ad83a 	srl	r5,r3,r5
   471a0:	1006c03a 	cmpne	r3,r2,zero
   471a4:	1946b03a 	or	r3,r3,r5
   471a8:	003fb706 	br	47088 <__alt_data_end+0xfffdff88>
   471ac:	01c03fc4 	movi	r7,255
   471b0:	21c01626 	beq	r4,r7,4720c <__addsf3+0x448>
   471b4:	014bc83a 	sub	r5,zero,r5
   471b8:	18c10034 	orhi	r3,r3,1024
   471bc:	003fe806 	br	47160 <__alt_data_end+0xfffe0060>
   471c0:	30001f26 	beq	r6,zero,47240 <__addsf3+0x47c>
   471c4:	1806d0fa 	srli	r3,r3,3
   471c8:	1880102c 	andhi	r2,r3,64
   471cc:	10000526 	beq	r2,zero,471e4 <__addsf3+0x420>
   471d0:	300cd0fa 	srli	r6,r6,3
   471d4:	3080102c 	andhi	r2,r6,64
   471d8:	1000021e 	bne	r2,zero,471e4 <__addsf3+0x420>
   471dc:	3007883a 	mov	r3,r6
   471e0:	4025883a 	mov	r18,r8
   471e4:	180690fa 	slli	r3,r3,3
   471e8:	04003fc4 	movi	r16,255
   471ec:	003f0c06 	br	46e20 <__alt_data_end+0xfffdfd20>
   471f0:	303f0b26 	beq	r6,zero,46e20 <__alt_data_end+0xfffdfd20>
   471f4:	1985c83a 	sub	r2,r3,r6
   471f8:	1101002c 	andhi	r4,r2,1024
   471fc:	203f4026 	beq	r4,zero,46f00 <__alt_data_end+0xfffdfe00>
   47200:	30c7c83a 	sub	r3,r6,r3
   47204:	4025883a 	mov	r18,r8
   47208:	003f0506 	br	46e20 <__alt_data_end+0xfffdfd20>
   4720c:	3007883a 	mov	r3,r6
   47210:	2021883a 	mov	r16,r4
   47214:	003f0206 	br	46e20 <__alt_data_end+0xfffdfd20>
   47218:	18001c26 	beq	r3,zero,4728c <__addsf3+0x4c8>
   4721c:	30000826 	beq	r6,zero,47240 <__addsf3+0x47c>
   47220:	1806d0fa 	srli	r3,r3,3
   47224:	1880102c 	andhi	r2,r3,64
   47228:	103fee26 	beq	r2,zero,471e4 <__alt_data_end+0xfffe00e4>
   4722c:	300cd0fa 	srli	r6,r6,3
   47230:	3080102c 	andhi	r2,r6,64
   47234:	103feb1e 	bne	r2,zero,471e4 <__alt_data_end+0xfffe00e4>
   47238:	3007883a 	mov	r3,r6
   4723c:	003fe906 	br	471e4 <__alt_data_end+0xfffe00e4>
   47240:	04003fc4 	movi	r16,255
   47244:	003ef606 	br	46e20 <__alt_data_end+0xfffdfd20>
   47248:	8007883a 	mov	r3,r16
   4724c:	0005883a 	mov	r2,zero
   47250:	003f3006 	br	46f14 <__alt_data_end+0xfffdfe14>
   47254:	00c10034 	movhi	r3,1024
   47258:	0005883a 	mov	r2,zero
   4725c:	18fffe04 	addi	r3,r3,-8
   47260:	04003fc4 	movi	r16,255
   47264:	003f2b06 	br	46f14 <__alt_data_end+0xfffdfe14>
   47268:	01c00804 	movi	r7,32
   4726c:	394fc83a 	sub	r7,r7,r5
   47270:	19ce983a 	sll	r7,r3,r7
   47274:	194ad83a 	srl	r5,r3,r5
   47278:	3806c03a 	cmpne	r3,r7,zero
   4727c:	1946b03a 	or	r3,r3,r5
   47280:	003fba06 	br	4716c <__alt_data_end+0xfffe006c>
   47284:	3007883a 	mov	r3,r6
   47288:	003ee506 	br	46e20 <__alt_data_end+0xfffdfd20>
   4728c:	3007883a 	mov	r3,r6
   47290:	04003fc4 	movi	r16,255
   47294:	003ee206 	br	46e20 <__alt_data_end+0xfffdfd20>
   47298:	0007883a 	mov	r3,zero
   4729c:	0005883a 	mov	r2,zero
   472a0:	003f1c06 	br	46f14 <__alt_data_end+0xfffdfe14>

000472a4 <__divsf3>:
   472a4:	defff504 	addi	sp,sp,-44
   472a8:	dd000515 	stw	r20,20(sp)
   472ac:	2028d5fa 	srli	r20,r4,23
   472b0:	dd400615 	stw	r21,24(sp)
   472b4:	202ad7fa 	srli	r21,r4,31
   472b8:	00c02034 	movhi	r3,128
   472bc:	dcc00415 	stw	r19,16(sp)
   472c0:	dc800315 	stw	r18,12(sp)
   472c4:	18ffffc4 	addi	r3,r3,-1
   472c8:	dfc00a15 	stw	ra,40(sp)
   472cc:	df000915 	stw	fp,36(sp)
   472d0:	ddc00815 	stw	r23,32(sp)
   472d4:	dd800715 	stw	r22,28(sp)
   472d8:	dc400215 	stw	r17,8(sp)
   472dc:	dc000115 	stw	r16,4(sp)
   472e0:	a5003fcc 	andi	r20,r20,255
   472e4:	1924703a 	and	r18,r3,r4
   472e8:	acc03fcc 	andi	r19,r21,255
   472ec:	a0004d26 	beq	r20,zero,47424 <__divsf3+0x180>
   472f0:	00803fc4 	movi	r2,255
   472f4:	a0802e26 	beq	r20,r2,473b0 <__divsf3+0x10c>
   472f8:	91002034 	orhi	r4,r18,128
   472fc:	202490fa 	slli	r18,r4,3
   47300:	a53fe044 	addi	r20,r20,-127
   47304:	0021883a 	mov	r16,zero
   47308:	002f883a 	mov	r23,zero
   4730c:	2804d5fa 	srli	r2,r5,23
   47310:	282cd7fa 	srli	r22,r5,31
   47314:	00c02034 	movhi	r3,128
   47318:	18ffffc4 	addi	r3,r3,-1
   4731c:	10803fcc 	andi	r2,r2,255
   47320:	1962703a 	and	r17,r3,r5
   47324:	b7003fcc 	andi	fp,r22,255
   47328:	10004526 	beq	r2,zero,47440 <__divsf3+0x19c>
   4732c:	00c03fc4 	movi	r3,255
   47330:	10c04026 	beq	r2,r3,47434 <__divsf3+0x190>
   47334:	88c02034 	orhi	r3,r17,128
   47338:	182290fa 	slli	r17,r3,3
   4733c:	10bfe044 	addi	r2,r2,-127
   47340:	0009883a 	mov	r4,zero
   47344:	2420b03a 	or	r16,r4,r16
   47348:	802090ba 	slli	r16,r16,2
   4734c:	01c00134 	movhi	r7,4
   47350:	39dcdc04 	addi	r7,r7,29552
   47354:	81e1883a 	add	r16,r16,r7
   47358:	80c00017 	ldw	r3,0(r16)
   4735c:	ad8af03a 	xor	r5,r21,r22
   47360:	280d883a 	mov	r6,r5
   47364:	a085c83a 	sub	r2,r20,r2
   47368:	29403fcc 	andi	r5,r5,255
   4736c:	1800683a 	jmp	r3
   47370:	0004757c 	xorhi	zero,zero,4565
   47374:	00047524 	muli	zero,zero,4564
   47378:	00047548 	cmpgei	zero,zero,4565
   4737c:	00047510 	cmplti	zero,zero,4564
   47380:	00047548 	cmpgei	zero,zero,4565
   47384:	000473c0 	call	473c <__reset-0x3b8c4>
   47388:	00047548 	cmpgei	zero,zero,4565
   4738c:	00047510 	cmplti	zero,zero,4564
   47390:	00047524 	muli	zero,zero,4564
   47394:	00047524 	muli	zero,zero,4564
   47398:	000473c0 	call	473c <__reset-0x3b8c4>
   4739c:	00047510 	cmplti	zero,zero,4564
   473a0:	00047614 	movui	zero,4568
   473a4:	00047614 	movui	zero,4568
   473a8:	00047614 	movui	zero,4568
   473ac:	00047554 	movui	zero,4565
   473b0:	9000531e 	bne	r18,zero,47500 <__divsf3+0x25c>
   473b4:	04000204 	movi	r16,8
   473b8:	05c00084 	movi	r23,2
   473bc:	003fd306 	br	4730c <__alt_data_end+0xfffe020c>
   473c0:	00c02034 	movhi	r3,128
   473c4:	000d883a 	mov	r6,zero
   473c8:	18ffffc4 	addi	r3,r3,-1
   473cc:	013fffc4 	movi	r4,-1
   473d0:	21003fcc 	andi	r4,r4,255
   473d4:	200895fa 	slli	r4,r4,23
   473d8:	30803fcc 	andi	r2,r6,255
   473dc:	01802034 	movhi	r6,128
   473e0:	31bfffc4 	addi	r6,r6,-1
   473e4:	100497fa 	slli	r2,r2,31
   473e8:	1986703a 	and	r3,r3,r6
   473ec:	1906b03a 	or	r3,r3,r4
   473f0:	1884b03a 	or	r2,r3,r2
   473f4:	dfc00a17 	ldw	ra,40(sp)
   473f8:	df000917 	ldw	fp,36(sp)
   473fc:	ddc00817 	ldw	r23,32(sp)
   47400:	dd800717 	ldw	r22,28(sp)
   47404:	dd400617 	ldw	r21,24(sp)
   47408:	dd000517 	ldw	r20,20(sp)
   4740c:	dcc00417 	ldw	r19,16(sp)
   47410:	dc800317 	ldw	r18,12(sp)
   47414:	dc400217 	ldw	r17,8(sp)
   47418:	dc000117 	ldw	r16,4(sp)
   4741c:	dec00b04 	addi	sp,sp,44
   47420:	f800283a 	ret
   47424:	90002b1e 	bne	r18,zero,474d4 <__divsf3+0x230>
   47428:	04000104 	movi	r16,4
   4742c:	05c00044 	movi	r23,1
   47430:	003fb606 	br	4730c <__alt_data_end+0xfffe020c>
   47434:	8800251e 	bne	r17,zero,474cc <__divsf3+0x228>
   47438:	01000084 	movi	r4,2
   4743c:	00000206 	br	47448 <__divsf3+0x1a4>
   47440:	88001a1e 	bne	r17,zero,474ac <__divsf3+0x208>
   47444:	01000044 	movi	r4,1
   47448:	2420b03a 	or	r16,r4,r16
   4744c:	802090ba 	slli	r16,r16,2
   47450:	00c00134 	movhi	r3,4
   47454:	18dd1b04 	addi	r3,r3,29804
   47458:	80e1883a 	add	r16,r16,r3
   4745c:	80c00017 	ldw	r3,0(r16)
   47460:	ad8af03a 	xor	r5,r21,r22
   47464:	a085c83a 	sub	r2,r20,r2
   47468:	1800683a 	jmp	r3
   4746c:	00047524 	muli	zero,zero,4564
   47470:	00047524 	muli	zero,zero,4564
   47474:	00047674 	movhi	zero,4569
   47478:	0004750c 	andi	zero,zero,4564
   4747c:	00047674 	movhi	zero,4569
   47480:	000473c0 	call	473c <__reset-0x3b8c4>
   47484:	00047674 	movhi	zero,4569
   47488:	0004750c 	andi	zero,zero,4564
   4748c:	00047524 	muli	zero,zero,4564
   47490:	00047524 	muli	zero,zero,4564
   47494:	000473c0 	call	473c <__reset-0x3b8c4>
   47498:	0004750c 	andi	zero,zero,4564
   4749c:	00047614 	movui	zero,4568
   474a0:	00047614 	movui	zero,4568
   474a4:	00047614 	movui	zero,4568
   474a8:	00047640 	call	4764 <__reset-0x3b89c>
   474ac:	8809883a 	mov	r4,r17
   474b0:	0047d380 	call	47d38 <__clzsi2>
   474b4:	10fffec4 	addi	r3,r2,-5
   474b8:	88e2983a 	sll	r17,r17,r3
   474bc:	00ffe284 	movi	r3,-118
   474c0:	1885c83a 	sub	r2,r3,r2
   474c4:	0009883a 	mov	r4,zero
   474c8:	003f9e06 	br	47344 <__alt_data_end+0xfffe0244>
   474cc:	010000c4 	movi	r4,3
   474d0:	003f9c06 	br	47344 <__alt_data_end+0xfffe0244>
   474d4:	9009883a 	mov	r4,r18
   474d8:	d9400015 	stw	r5,0(sp)
   474dc:	0047d380 	call	47d38 <__clzsi2>
   474e0:	10fffec4 	addi	r3,r2,-5
   474e4:	053fe284 	movi	r20,-118
   474e8:	90e4983a 	sll	r18,r18,r3
   474ec:	a0a9c83a 	sub	r20,r20,r2
   474f0:	0021883a 	mov	r16,zero
   474f4:	002f883a 	mov	r23,zero
   474f8:	d9400017 	ldw	r5,0(sp)
   474fc:	003f8306 	br	4730c <__alt_data_end+0xfffe020c>
   47500:	04000304 	movi	r16,12
   47504:	05c000c4 	movi	r23,3
   47508:	003f8006 	br	4730c <__alt_data_end+0xfffe020c>
   4750c:	0023883a 	mov	r17,zero
   47510:	e027883a 	mov	r19,fp
   47514:	202f883a 	mov	r23,r4
   47518:	00c00084 	movi	r3,2
   4751c:	980b883a 	mov	r5,r19
   47520:	b8c0501e 	bne	r23,r3,47664 <__divsf3+0x3c0>
   47524:	2980004c 	andi	r6,r5,1
   47528:	013fffc4 	movi	r4,-1
   4752c:	0007883a 	mov	r3,zero
   47530:	003fa706 	br	473d0 <__alt_data_end+0xfffe02d0>
   47534:	013fe084 	movi	r4,-126
   47538:	2089c83a 	sub	r4,r4,r2
   4753c:	00c006c4 	movi	r3,27
   47540:	1900500e 	bge	r3,r4,47684 <__divsf3+0x3e0>
   47544:	9980004c 	andi	r6,r19,1
   47548:	0009883a 	mov	r4,zero
   4754c:	0007883a 	mov	r3,zero
   47550:	003f9f06 	br	473d0 <__alt_data_end+0xfffe02d0>
   47554:	9080102c 	andhi	r2,r18,64
   47558:	10000226 	beq	r2,zero,47564 <__divsf3+0x2c0>
   4755c:	8880102c 	andhi	r2,r17,64
   47560:	10003a26 	beq	r2,zero,4764c <__divsf3+0x3a8>
   47564:	00802034 	movhi	r2,128
   47568:	90c01034 	orhi	r3,r18,64
   4756c:	10bfffc4 	addi	r2,r2,-1
   47570:	a80d883a 	mov	r6,r21
   47574:	1886703a 	and	r3,r3,r2
   47578:	003f9406 	br	473cc <__alt_data_end+0xfffe02cc>
   4757c:	9006917a 	slli	r3,r18,5
   47580:	8822917a 	slli	r17,r17,5
   47584:	1c402936 	bltu	r3,r17,4762c <__divsf3+0x388>
   47588:	1c47c83a 	sub	r3,r3,r17
   4758c:	2827883a 	mov	r19,r5
   47590:	01800684 	movi	r6,26
   47594:	01000044 	movi	r4,1
   47598:	180f883a 	mov	r7,r3
   4759c:	2109883a 	add	r4,r4,r4
   475a0:	18c7883a 	add	r3,r3,r3
   475a4:	38000116 	blt	r7,zero,475ac <__divsf3+0x308>
   475a8:	1c400236 	bltu	r3,r17,475b4 <__divsf3+0x310>
   475ac:	1c47c83a 	sub	r3,r3,r17
   475b0:	21000054 	ori	r4,r4,1
   475b4:	31bfffc4 	addi	r6,r6,-1
   475b8:	303ff71e 	bne	r6,zero,47598 <__alt_data_end+0xfffe0498>
   475bc:	1806c03a 	cmpne	r3,r3,zero
   475c0:	1922b03a 	or	r17,r3,r4
   475c4:	11001fc4 	addi	r4,r2,127
   475c8:	013fda0e 	bge	zero,r4,47534 <__alt_data_end+0xfffe0434>
   475cc:	88c001cc 	andi	r3,r17,7
   475d0:	18000426 	beq	r3,zero,475e4 <__divsf3+0x340>
   475d4:	894003cc 	andi	r5,r17,15
   475d8:	00c00104 	movi	r3,4
   475dc:	28c00126 	beq	r5,r3,475e4 <__divsf3+0x340>
   475e0:	88e3883a 	add	r17,r17,r3
   475e4:	88c2002c 	andhi	r3,r17,2048
   475e8:	18000426 	beq	r3,zero,475fc <__divsf3+0x358>
   475ec:	11002004 	addi	r4,r2,128
   475f0:	00be0034 	movhi	r2,63488
   475f4:	10bfffc4 	addi	r2,r2,-1
   475f8:	88a2703a 	and	r17,r17,r2
   475fc:	00803f84 	movi	r2,254
   47600:	1100060e 	bge	r2,r4,4761c <__divsf3+0x378>
   47604:	9980004c 	andi	r6,r19,1
   47608:	013fffc4 	movi	r4,-1
   4760c:	0007883a 	mov	r3,zero
   47610:	003f6f06 	br	473d0 <__alt_data_end+0xfffe02d0>
   47614:	9023883a 	mov	r17,r18
   47618:	003fbf06 	br	47518 <__alt_data_end+0xfffe0418>
   4761c:	880691ba 	slli	r3,r17,6
   47620:	9980004c 	andi	r6,r19,1
   47624:	1806d27a 	srli	r3,r3,9
   47628:	003f6906 	br	473d0 <__alt_data_end+0xfffe02d0>
   4762c:	10bfffc4 	addi	r2,r2,-1
   47630:	2827883a 	mov	r19,r5
   47634:	018006c4 	movi	r6,27
   47638:	0009883a 	mov	r4,zero
   4763c:	003fd606 	br	47598 <__alt_data_end+0xfffe0498>
   47640:	9080102c 	andhi	r2,r18,64
   47644:	0023883a 	mov	r17,zero
   47648:	103fc626 	beq	r2,zero,47564 <__alt_data_end+0xfffe0464>
   4764c:	00802034 	movhi	r2,128
   47650:	88c01034 	orhi	r3,r17,64
   47654:	10bfffc4 	addi	r2,r2,-1
   47658:	b00d883a 	mov	r6,r22
   4765c:	1886703a 	and	r3,r3,r2
   47660:	003f5a06 	br	473cc <__alt_data_end+0xfffe02cc>
   47664:	00c000c4 	movi	r3,3
   47668:	b8c01c26 	beq	r23,r3,476dc <__divsf3+0x438>
   4766c:	00c00044 	movi	r3,1
   47670:	b8ffd41e 	bne	r23,r3,475c4 <__alt_data_end+0xfffe04c4>
   47674:	2980004c 	andi	r6,r5,1
   47678:	0009883a 	mov	r4,zero
   4767c:	0007883a 	mov	r3,zero
   47680:	003f5306 	br	473d0 <__alt_data_end+0xfffe02d0>
   47684:	10802784 	addi	r2,r2,158
   47688:	8884983a 	sll	r2,r17,r2
   4768c:	8908d83a 	srl	r4,r17,r4
   47690:	1022c03a 	cmpne	r17,r2,zero
   47694:	8908b03a 	or	r4,r17,r4
   47698:	208001cc 	andi	r2,r4,7
   4769c:	10000426 	beq	r2,zero,476b0 <__divsf3+0x40c>
   476a0:	20c003cc 	andi	r3,r4,15
   476a4:	00800104 	movi	r2,4
   476a8:	18800126 	beq	r3,r2,476b0 <__divsf3+0x40c>
   476ac:	2089883a 	add	r4,r4,r2
   476b0:	2081002c 	andhi	r2,r4,1024
   476b4:	10000426 	beq	r2,zero,476c8 <__divsf3+0x424>
   476b8:	9980004c 	andi	r6,r19,1
   476bc:	01000044 	movi	r4,1
   476c0:	0007883a 	mov	r3,zero
   476c4:	003f4206 	br	473d0 <__alt_data_end+0xfffe02d0>
   476c8:	200691ba 	slli	r3,r4,6
   476cc:	9980004c 	andi	r6,r19,1
   476d0:	0009883a 	mov	r4,zero
   476d4:	1806d27a 	srli	r3,r3,9
   476d8:	003f3d06 	br	473d0 <__alt_data_end+0xfffe02d0>
   476dc:	00802034 	movhi	r2,128
   476e0:	88c01034 	orhi	r3,r17,64
   476e4:	10bfffc4 	addi	r2,r2,-1
   476e8:	9980004c 	andi	r6,r19,1
   476ec:	1886703a 	and	r3,r3,r2
   476f0:	003f3606 	br	473cc <__alt_data_end+0xfffe02cc>

000476f4 <__mulsf3>:
   476f4:	defff504 	addi	sp,sp,-44
   476f8:	dc400215 	stw	r17,8(sp)
   476fc:	2022d5fa 	srli	r17,r4,23
   47700:	dd400615 	stw	r21,24(sp)
   47704:	202ad7fa 	srli	r21,r4,31
   47708:	dc000115 	stw	r16,4(sp)
   4770c:	04002034 	movhi	r16,128
   47710:	df000915 	stw	fp,36(sp)
   47714:	dd000515 	stw	r20,20(sp)
   47718:	843fffc4 	addi	r16,r16,-1
   4771c:	dfc00a15 	stw	ra,40(sp)
   47720:	ddc00815 	stw	r23,32(sp)
   47724:	dd800715 	stw	r22,28(sp)
   47728:	dcc00415 	stw	r19,16(sp)
   4772c:	dc800315 	stw	r18,12(sp)
   47730:	8c403fcc 	andi	r17,r17,255
   47734:	8120703a 	and	r16,r16,r4
   47738:	a829883a 	mov	r20,r21
   4773c:	af003fcc 	andi	fp,r21,255
   47740:	88005026 	beq	r17,zero,47884 <__mulsf3+0x190>
   47744:	00803fc4 	movi	r2,255
   47748:	88802f26 	beq	r17,r2,47808 <__mulsf3+0x114>
   4774c:	84002034 	orhi	r16,r16,128
   47750:	802090fa 	slli	r16,r16,3
   47754:	8c7fe044 	addi	r17,r17,-127
   47758:	0025883a 	mov	r18,zero
   4775c:	002f883a 	mov	r23,zero
   47760:	2804d5fa 	srli	r2,r5,23
   47764:	282cd7fa 	srli	r22,r5,31
   47768:	01002034 	movhi	r4,128
   4776c:	213fffc4 	addi	r4,r4,-1
   47770:	10803fcc 	andi	r2,r2,255
   47774:	2166703a 	and	r19,r4,r5
   47778:	b1803fcc 	andi	r6,r22,255
   4777c:	10004926 	beq	r2,zero,478a4 <__mulsf3+0x1b0>
   47780:	00c03fc4 	movi	r3,255
   47784:	10c04326 	beq	r2,r3,47894 <__mulsf3+0x1a0>
   47788:	99402034 	orhi	r5,r19,128
   4778c:	282690fa 	slli	r19,r5,3
   47790:	10bfe044 	addi	r2,r2,-127
   47794:	000b883a 	mov	r5,zero
   47798:	8885883a 	add	r2,r17,r2
   4779c:	2c86b03a 	or	r3,r5,r18
   477a0:	010003c4 	movi	r4,15
   477a4:	adaaf03a 	xor	r21,r21,r22
   477a8:	12000044 	addi	r8,r2,1
   477ac:	20c06536 	bltu	r4,r3,47944 <__mulsf3+0x250>
   477b0:	180690ba 	slli	r3,r3,2
   477b4:	01000134 	movhi	r4,4
   477b8:	211df204 	addi	r4,r4,30664
   477bc:	1907883a 	add	r3,r3,r4
   477c0:	18c00017 	ldw	r3,0(r3)
   477c4:	1800683a 	jmp	r3
   477c8:	00047944 	movi	zero,4581
   477cc:	00047a10 	cmplti	zero,zero,4584
   477d0:	00047a10 	cmplti	zero,zero,4584
   477d4:	00047a20 	cmpeqi	zero,zero,4584
   477d8:	00047818 	cmpnei	zero,zero,4576
   477dc:	00047818 	cmpnei	zero,zero,4576
   477e0:	00047930 	cmpltui	zero,zero,4580
   477e4:	00047a20 	cmpeqi	zero,zero,4584
   477e8:	00047818 	cmpnei	zero,zero,4576
   477ec:	00047930 	cmpltui	zero,zero,4580
   477f0:	00047818 	cmpnei	zero,zero,4576
   477f4:	00047a20 	cmpeqi	zero,zero,4584
   477f8:	0004781c 	xori	zero,zero,4576
   477fc:	0004781c 	xori	zero,zero,4576
   47800:	0004781c 	xori	zero,zero,4576
   47804:	00047a30 	cmpltui	zero,zero,4584
   47808:	8000311e 	bne	r16,zero,478d0 <__mulsf3+0x1dc>
   4780c:	04800204 	movi	r18,8
   47810:	05c00084 	movi	r23,2
   47814:	003fd206 	br	47760 <__alt_data_end+0xfffe0660>
   47818:	a839883a 	mov	fp,r21
   4781c:	00800084 	movi	r2,2
   47820:	b880231e 	bne	r23,r2,478b0 <__mulsf3+0x1bc>
   47824:	e500004c 	andi	r20,fp,1
   47828:	00ffffc4 	movi	r3,-1
   4782c:	0009883a 	mov	r4,zero
   47830:	18c03fcc 	andi	r3,r3,255
   47834:	180695fa 	slli	r3,r3,23
   47838:	a0803fcc 	andi	r2,r20,255
   4783c:	04002034 	movhi	r16,128
   47840:	100497fa 	slli	r2,r2,31
   47844:	843fffc4 	addi	r16,r16,-1
   47848:	2420703a 	and	r16,r4,r16
   4784c:	80e0b03a 	or	r16,r16,r3
   47850:	8084b03a 	or	r2,r16,r2
   47854:	dfc00a17 	ldw	ra,40(sp)
   47858:	df000917 	ldw	fp,36(sp)
   4785c:	ddc00817 	ldw	r23,32(sp)
   47860:	dd800717 	ldw	r22,28(sp)
   47864:	dd400617 	ldw	r21,24(sp)
   47868:	dd000517 	ldw	r20,20(sp)
   4786c:	dcc00417 	ldw	r19,16(sp)
   47870:	dc800317 	ldw	r18,12(sp)
   47874:	dc400217 	ldw	r17,8(sp)
   47878:	dc000117 	ldw	r16,4(sp)
   4787c:	dec00b04 	addi	sp,sp,44
   47880:	f800283a 	ret
   47884:	8000151e 	bne	r16,zero,478dc <__mulsf3+0x1e8>
   47888:	04800104 	movi	r18,4
   4788c:	05c00044 	movi	r23,1
   47890:	003fb306 	br	47760 <__alt_data_end+0xfffe0660>
   47894:	980b003a 	cmpeq	r5,r19,zero
   47898:	00c000c4 	movi	r3,3
   4789c:	194bc83a 	sub	r5,r3,r5
   478a0:	003fbd06 	br	47798 <__alt_data_end+0xfffe0698>
   478a4:	9800181e 	bne	r19,zero,47908 <__mulsf3+0x214>
   478a8:	01400044 	movi	r5,1
   478ac:	003fba06 	br	47798 <__alt_data_end+0xfffe0698>
   478b0:	008000c4 	movi	r2,3
   478b4:	b8809226 	beq	r23,r2,47b00 <__mulsf3+0x40c>
   478b8:	00800044 	movi	r2,1
   478bc:	b880771e 	bne	r23,r2,47a9c <__mulsf3+0x3a8>
   478c0:	e0a8703a 	and	r20,fp,r2
   478c4:	0007883a 	mov	r3,zero
   478c8:	0009883a 	mov	r4,zero
   478cc:	003fd806 	br	47830 <__alt_data_end+0xfffe0730>
   478d0:	04800304 	movi	r18,12
   478d4:	05c000c4 	movi	r23,3
   478d8:	003fa106 	br	47760 <__alt_data_end+0xfffe0660>
   478dc:	8009883a 	mov	r4,r16
   478e0:	d9400015 	stw	r5,0(sp)
   478e4:	0047d380 	call	47d38 <__clzsi2>
   478e8:	10fffec4 	addi	r3,r2,-5
   478ec:	047fe284 	movi	r17,-118
   478f0:	80e0983a 	sll	r16,r16,r3
   478f4:	88a3c83a 	sub	r17,r17,r2
   478f8:	0025883a 	mov	r18,zero
   478fc:	002f883a 	mov	r23,zero
   47900:	d9400017 	ldw	r5,0(sp)
   47904:	003f9606 	br	47760 <__alt_data_end+0xfffe0660>
   47908:	9809883a 	mov	r4,r19
   4790c:	d9800015 	stw	r6,0(sp)
   47910:	0047d380 	call	47d38 <__clzsi2>
   47914:	10fffec4 	addi	r3,r2,-5
   47918:	98e6983a 	sll	r19,r19,r3
   4791c:	00ffe284 	movi	r3,-118
   47920:	1885c83a 	sub	r2,r3,r2
   47924:	000b883a 	mov	r5,zero
   47928:	d9800017 	ldw	r6,0(sp)
   4792c:	003f9a06 	br	47798 <__alt_data_end+0xfffe0698>
   47930:	01002034 	movhi	r4,128
   47934:	0029883a 	mov	r20,zero
   47938:	213fffc4 	addi	r4,r4,-1
   4793c:	00ffffc4 	movi	r3,-1
   47940:	003fbb06 	br	47830 <__alt_data_end+0xfffe0730>
   47944:	8006d43a 	srli	r3,r16,16
   47948:	9812d43a 	srli	r9,r19,16
   4794c:	843fffcc 	andi	r16,r16,65535
   47950:	997fffcc 	andi	r5,r19,65535
   47954:	2c0f383a 	mul	r7,r5,r16
   47958:	28cb383a 	mul	r5,r5,r3
   4795c:	4c21383a 	mul	r16,r9,r16
   47960:	380cd43a 	srli	r6,r7,16
   47964:	48d3383a 	mul	r9,r9,r3
   47968:	2c21883a 	add	r16,r5,r16
   4796c:	8187883a 	add	r3,r16,r6
   47970:	1940022e 	bgeu	r3,r5,4797c <__mulsf3+0x288>
   47974:	01000074 	movhi	r4,1
   47978:	4913883a 	add	r9,r9,r4
   4797c:	1808943a 	slli	r4,r3,16
   47980:	39ffffcc 	andi	r7,r7,65535
   47984:	1806d43a 	srli	r3,r3,16
   47988:	21c9883a 	add	r4,r4,r7
   4798c:	202091ba 	slli	r16,r4,6
   47990:	48c7883a 	add	r3,r9,r3
   47994:	2008d6ba 	srli	r4,r4,26
   47998:	180691ba 	slli	r3,r3,6
   4799c:	8020c03a 	cmpne	r16,r16,zero
   479a0:	8120b03a 	or	r16,r16,r4
   479a4:	80e0b03a 	or	r16,r16,r3
   479a8:	80c2002c 	andhi	r3,r16,2048
   479ac:	18000426 	beq	r3,zero,479c0 <__mulsf3+0x2cc>
   479b0:	8006d07a 	srli	r3,r16,1
   479b4:	8400004c 	andi	r16,r16,1
   479b8:	4005883a 	mov	r2,r8
   479bc:	80e0b03a 	or	r16,r16,r3
   479c0:	10c01fc4 	addi	r3,r2,127
   479c4:	00c02d0e 	bge	zero,r3,47a7c <__mulsf3+0x388>
   479c8:	810001cc 	andi	r4,r16,7
   479cc:	20000426 	beq	r4,zero,479e0 <__mulsf3+0x2ec>
   479d0:	814003cc 	andi	r5,r16,15
   479d4:	01000104 	movi	r4,4
   479d8:	29000126 	beq	r5,r4,479e0 <__mulsf3+0x2ec>
   479dc:	8121883a 	add	r16,r16,r4
   479e0:	8102002c 	andhi	r4,r16,2048
   479e4:	20000426 	beq	r4,zero,479f8 <__mulsf3+0x304>
   479e8:	10c02004 	addi	r3,r2,128
   479ec:	00be0034 	movhi	r2,63488
   479f0:	10bfffc4 	addi	r2,r2,-1
   479f4:	80a0703a 	and	r16,r16,r2
   479f8:	00803f84 	movi	r2,254
   479fc:	10c01b0e 	bge	r2,r3,47a6c <__mulsf3+0x378>
   47a00:	ad00004c 	andi	r20,r21,1
   47a04:	00ffffc4 	movi	r3,-1
   47a08:	0009883a 	mov	r4,zero
   47a0c:	003f8806 	br	47830 <__alt_data_end+0xfffe0730>
   47a10:	9821883a 	mov	r16,r19
   47a14:	a839883a 	mov	fp,r21
   47a18:	282f883a 	mov	r23,r5
   47a1c:	003f7f06 	br	4781c <__alt_data_end+0xfffe071c>
   47a20:	9821883a 	mov	r16,r19
   47a24:	3039883a 	mov	fp,r6
   47a28:	282f883a 	mov	r23,r5
   47a2c:	003f7b06 	br	4781c <__alt_data_end+0xfffe071c>
   47a30:	8080102c 	andhi	r2,r16,64
   47a34:	10000826 	beq	r2,zero,47a58 <__mulsf3+0x364>
   47a38:	9880102c 	andhi	r2,r19,64
   47a3c:	1000061e 	bne	r2,zero,47a58 <__mulsf3+0x364>
   47a40:	00802034 	movhi	r2,128
   47a44:	99001034 	orhi	r4,r19,64
   47a48:	10bfffc4 	addi	r2,r2,-1
   47a4c:	b029883a 	mov	r20,r22
   47a50:	2088703a 	and	r4,r4,r2
   47a54:	003fb906 	br	4793c <__alt_data_end+0xfffe083c>
   47a58:	00802034 	movhi	r2,128
   47a5c:	81001034 	orhi	r4,r16,64
   47a60:	10bfffc4 	addi	r2,r2,-1
   47a64:	2088703a 	and	r4,r4,r2
   47a68:	003fb406 	br	4793c <__alt_data_end+0xfffe083c>
   47a6c:	802091ba 	slli	r16,r16,6
   47a70:	ad00004c 	andi	r20,r21,1
   47a74:	8008d27a 	srli	r4,r16,9
   47a78:	003f6d06 	br	47830 <__alt_data_end+0xfffe0730>
   47a7c:	00ffe084 	movi	r3,-126
   47a80:	1887c83a 	sub	r3,r3,r2
   47a84:	010006c4 	movi	r4,27
   47a88:	20c0070e 	bge	r4,r3,47aa8 <__mulsf3+0x3b4>
   47a8c:	ad00004c 	andi	r20,r21,1
   47a90:	0007883a 	mov	r3,zero
   47a94:	0009883a 	mov	r4,zero
   47a98:	003f6506 	br	47830 <__alt_data_end+0xfffe0730>
   47a9c:	4005883a 	mov	r2,r8
   47aa0:	e02b883a 	mov	r21,fp
   47aa4:	003fc606 	br	479c0 <__alt_data_end+0xfffe08c0>
   47aa8:	10802784 	addi	r2,r2,158
   47aac:	8084983a 	sll	r2,r16,r2
   47ab0:	80e0d83a 	srl	r16,r16,r3
   47ab4:	1004c03a 	cmpne	r2,r2,zero
   47ab8:	1404b03a 	or	r2,r2,r16
   47abc:	10c001cc 	andi	r3,r2,7
   47ac0:	18000426 	beq	r3,zero,47ad4 <__mulsf3+0x3e0>
   47ac4:	110003cc 	andi	r4,r2,15
   47ac8:	00c00104 	movi	r3,4
   47acc:	20c00126 	beq	r4,r3,47ad4 <__mulsf3+0x3e0>
   47ad0:	10c5883a 	add	r2,r2,r3
   47ad4:	10c1002c 	andhi	r3,r2,1024
   47ad8:	18000426 	beq	r3,zero,47aec <__mulsf3+0x3f8>
   47adc:	ad00004c 	andi	r20,r21,1
   47ae0:	00c00044 	movi	r3,1
   47ae4:	0009883a 	mov	r4,zero
   47ae8:	003f5106 	br	47830 <__alt_data_end+0xfffe0730>
   47aec:	100491ba 	slli	r2,r2,6
   47af0:	ad00004c 	andi	r20,r21,1
   47af4:	0007883a 	mov	r3,zero
   47af8:	1008d27a 	srli	r4,r2,9
   47afc:	003f4c06 	br	47830 <__alt_data_end+0xfffe0730>
   47b00:	00802034 	movhi	r2,128
   47b04:	81001034 	orhi	r4,r16,64
   47b08:	10bfffc4 	addi	r2,r2,-1
   47b0c:	e500004c 	andi	r20,fp,1
   47b10:	2088703a 	and	r4,r4,r2
   47b14:	003f8906 	br	4793c <__alt_data_end+0xfffe083c>

00047b18 <__floatunsisf>:
   47b18:	defffe04 	addi	sp,sp,-8
   47b1c:	dc000015 	stw	r16,0(sp)
   47b20:	dfc00115 	stw	ra,4(sp)
   47b24:	2021883a 	mov	r16,r4
   47b28:	20002626 	beq	r4,zero,47bc4 <__floatunsisf+0xac>
   47b2c:	0047d380 	call	47d38 <__clzsi2>
   47b30:	00c02784 	movi	r3,158
   47b34:	1887c83a 	sub	r3,r3,r2
   47b38:	01002584 	movi	r4,150
   47b3c:	20c00816 	blt	r4,r3,47b60 <__floatunsisf+0x48>
   47b40:	01000204 	movi	r4,8
   47b44:	2080340e 	bge	r4,r2,47c18 <__floatunsisf+0x100>
   47b48:	10bffe04 	addi	r2,r2,-8
   47b4c:	8088983a 	sll	r4,r16,r2
   47b50:	00802034 	movhi	r2,128
   47b54:	10bfffc4 	addi	r2,r2,-1
   47b58:	2088703a 	and	r4,r4,r2
   47b5c:	00001b06 	br	47bcc <__floatunsisf+0xb4>
   47b60:	01002644 	movi	r4,153
   47b64:	20c02316 	blt	r4,r3,47bf4 <__floatunsisf+0xdc>
   47b68:	01000144 	movi	r4,5
   47b6c:	2080020e 	bge	r4,r2,47b78 <__floatunsisf+0x60>
   47b70:	113ffec4 	addi	r4,r2,-5
   47b74:	8120983a 	sll	r16,r16,r4
   47b78:	017f0034 	movhi	r5,64512
   47b7c:	297fffc4 	addi	r5,r5,-1
   47b80:	810001cc 	andi	r4,r16,7
   47b84:	814a703a 	and	r5,r16,r5
   47b88:	20000426 	beq	r4,zero,47b9c <__floatunsisf+0x84>
   47b8c:	840003cc 	andi	r16,r16,15
   47b90:	01000104 	movi	r4,4
   47b94:	81000126 	beq	r16,r4,47b9c <__floatunsisf+0x84>
   47b98:	290b883a 	add	r5,r5,r4
   47b9c:	2901002c 	andhi	r4,r5,1024
   47ba0:	20000526 	beq	r4,zero,47bb8 <__floatunsisf+0xa0>
   47ba4:	00c027c4 	movi	r3,159
   47ba8:	1887c83a 	sub	r3,r3,r2
   47bac:	00bf0034 	movhi	r2,64512
   47bb0:	10bfffc4 	addi	r2,r2,-1
   47bb4:	288a703a 	and	r5,r5,r2
   47bb8:	280891ba 	slli	r4,r5,6
   47bbc:	2008d27a 	srli	r4,r4,9
   47bc0:	00000206 	br	47bcc <__floatunsisf+0xb4>
   47bc4:	0007883a 	mov	r3,zero
   47bc8:	0009883a 	mov	r4,zero
   47bcc:	18c03fcc 	andi	r3,r3,255
   47bd0:	180695fa 	slli	r3,r3,23
   47bd4:	00802034 	movhi	r2,128
   47bd8:	10bfffc4 	addi	r2,r2,-1
   47bdc:	2084703a 	and	r2,r4,r2
   47be0:	10c4b03a 	or	r2,r2,r3
   47be4:	dfc00117 	ldw	ra,4(sp)
   47be8:	dc000017 	ldw	r16,0(sp)
   47bec:	dec00204 	addi	sp,sp,8
   47bf0:	f800283a 	ret
   47bf4:	01400144 	movi	r5,5
   47bf8:	110006c4 	addi	r4,r2,27
   47bfc:	8108983a 	sll	r4,r16,r4
   47c00:	288dc83a 	sub	r6,r5,r2
   47c04:	81a0d83a 	srl	r16,r16,r6
   47c08:	2008c03a 	cmpne	r4,r4,zero
   47c0c:	2420b03a 	or	r16,r4,r16
   47c10:	28bfd90e 	bge	r5,r2,47b78 <__alt_data_end+0xfffe0a78>
   47c14:	003fd606 	br	47b70 <__alt_data_end+0xfffe0a70>
   47c18:	01402034 	movhi	r5,128
   47c1c:	297fffc4 	addi	r5,r5,-1
   47c20:	8148703a 	and	r4,r16,r5
   47c24:	003fe906 	br	47bcc <__alt_data_end+0xfffe0acc>

00047c28 <__extendsfdf2>:
   47c28:	200ad5fa 	srli	r5,r4,23
   47c2c:	defffd04 	addi	sp,sp,-12
   47c30:	dc400115 	stw	r17,4(sp)
   47c34:	29403fcc 	andi	r5,r5,255
   47c38:	29800044 	addi	r6,r5,1
   47c3c:	04402034 	movhi	r17,128
   47c40:	dc000015 	stw	r16,0(sp)
   47c44:	8c7fffc4 	addi	r17,r17,-1
   47c48:	dfc00215 	stw	ra,8(sp)
   47c4c:	31803fcc 	andi	r6,r6,255
   47c50:	00800044 	movi	r2,1
   47c54:	8922703a 	and	r17,r17,r4
   47c58:	2020d7fa 	srli	r16,r4,31
   47c5c:	1180110e 	bge	r2,r6,47ca4 <__extendsfdf2+0x7c>
   47c60:	880ed0fa 	srli	r7,r17,3
   47c64:	8822977a 	slli	r17,r17,29
   47c68:	2940e004 	addi	r5,r5,896
   47c6c:	2941ffcc 	andi	r5,r5,2047
   47c70:	280c953a 	slli	r6,r5,20
   47c74:	01400434 	movhi	r5,16
   47c78:	800697fa 	slli	r3,r16,31
   47c7c:	297fffc4 	addi	r5,r5,-1
   47c80:	394a703a 	and	r5,r7,r5
   47c84:	298ab03a 	or	r5,r5,r6
   47c88:	8805883a 	mov	r2,r17
   47c8c:	28c6b03a 	or	r3,r5,r3
   47c90:	dfc00217 	ldw	ra,8(sp)
   47c94:	dc400117 	ldw	r17,4(sp)
   47c98:	dc000017 	ldw	r16,0(sp)
   47c9c:	dec00304 	addi	sp,sp,12
   47ca0:	f800283a 	ret
   47ca4:	2800111e 	bne	r5,zero,47cec <__extendsfdf2+0xc4>
   47ca8:	88001c26 	beq	r17,zero,47d1c <__extendsfdf2+0xf4>
   47cac:	8809883a 	mov	r4,r17
   47cb0:	0047d380 	call	47d38 <__clzsi2>
   47cb4:	00c00284 	movi	r3,10
   47cb8:	18801b16 	blt	r3,r2,47d28 <__extendsfdf2+0x100>
   47cbc:	01c002c4 	movi	r7,11
   47cc0:	388fc83a 	sub	r7,r7,r2
   47cc4:	10c00544 	addi	r3,r2,21
   47cc8:	89ced83a 	srl	r7,r17,r7
   47ccc:	88e2983a 	sll	r17,r17,r3
   47cd0:	0180e244 	movi	r6,905
   47cd4:	308bc83a 	sub	r5,r6,r2
   47cd8:	01800434 	movhi	r6,16
   47cdc:	31bfffc4 	addi	r6,r6,-1
   47ce0:	398e703a 	and	r7,r7,r6
   47ce4:	2941ffcc 	andi	r5,r5,2047
   47ce8:	003fe006 	br	47c6c <__alt_data_end+0xfffe0b6c>
   47cec:	88000826 	beq	r17,zero,47d10 <__extendsfdf2+0xe8>
   47cf0:	880ed0fa 	srli	r7,r17,3
   47cf4:	00800434 	movhi	r2,16
   47cf8:	10bfffc4 	addi	r2,r2,-1
   47cfc:	39c00234 	orhi	r7,r7,8
   47d00:	8822977a 	slli	r17,r17,29
   47d04:	388e703a 	and	r7,r7,r2
   47d08:	0141ffc4 	movi	r5,2047
   47d0c:	003fd706 	br	47c6c <__alt_data_end+0xfffe0b6c>
   47d10:	0141ffc4 	movi	r5,2047
   47d14:	000f883a 	mov	r7,zero
   47d18:	003fd406 	br	47c6c <__alt_data_end+0xfffe0b6c>
   47d1c:	000b883a 	mov	r5,zero
   47d20:	000f883a 	mov	r7,zero
   47d24:	003fd106 	br	47c6c <__alt_data_end+0xfffe0b6c>
   47d28:	11fffd44 	addi	r7,r2,-11
   47d2c:	89ce983a 	sll	r7,r17,r7
   47d30:	0023883a 	mov	r17,zero
   47d34:	003fe606 	br	47cd0 <__alt_data_end+0xfffe0bd0>

00047d38 <__clzsi2>:
   47d38:	00bfffd4 	movui	r2,65535
   47d3c:	11000b36 	bltu	r2,r4,47d6c <__clzsi2+0x34>
   47d40:	00803fc4 	movi	r2,255
   47d44:	1100122e 	bgeu	r2,r4,47d90 <__clzsi2+0x58>
   47d48:	00c00204 	movi	r3,8
   47d4c:	01400604 	movi	r5,24
   47d50:	20c8d83a 	srl	r4,r4,r3
   47d54:	008001b4 	movhi	r2,6
   47d58:	10ab0ac4 	addi	r2,r2,-21461
   47d5c:	1109883a 	add	r4,r2,r4
   47d60:	20800003 	ldbu	r2,0(r4)
   47d64:	2885c83a 	sub	r2,r5,r2
   47d68:	f800283a 	ret
   47d6c:	00804034 	movhi	r2,256
   47d70:	10bfffc4 	addi	r2,r2,-1
   47d74:	11000336 	bltu	r2,r4,47d84 <__clzsi2+0x4c>
   47d78:	00c00404 	movi	r3,16
   47d7c:	180b883a 	mov	r5,r3
   47d80:	003ff306 	br	47d50 <__alt_data_end+0xfffe0c50>
   47d84:	00c00604 	movi	r3,24
   47d88:	01400204 	movi	r5,8
   47d8c:	003ff006 	br	47d50 <__alt_data_end+0xfffe0c50>
   47d90:	0007883a 	mov	r3,zero
   47d94:	01400804 	movi	r5,32
   47d98:	003fed06 	br	47d50 <__alt_data_end+0xfffe0c50>

00047d9c <_fgets_r>:
   47d9c:	00c00044 	movi	r3,1
   47da0:	1980510e 	bge	r3,r6,47ee8 <_fgets_r+0x14c>
   47da4:	defff804 	addi	sp,sp,-32
   47da8:	dd000415 	stw	r20,16(sp)
   47dac:	dcc00315 	stw	r19,12(sp)
   47db0:	dc800215 	stw	r18,8(sp)
   47db4:	dc400115 	stw	r17,4(sp)
   47db8:	dfc00715 	stw	ra,28(sp)
   47dbc:	dd800615 	stw	r22,24(sp)
   47dc0:	dd400515 	stw	r21,20(sp)
   47dc4:	dc000015 	stw	r16,0(sp)
   47dc8:	2027883a 	mov	r19,r4
   47dcc:	3823883a 	mov	r17,r7
   47dd0:	2829883a 	mov	r20,r5
   47dd4:	3025883a 	mov	r18,r6
   47dd8:	20000226 	beq	r4,zero,47de4 <_fgets_r+0x48>
   47ddc:	20800e17 	ldw	r2,56(r4)
   47de0:	10003c26 	beq	r2,zero,47ed4 <_fgets_r+0x138>
   47de4:	00482740 	call	48274 <__sfp_lock_acquire>
   47de8:	94bfffc4 	addi	r18,r18,-1
   47dec:	a02b883a 	mov	r21,r20
   47df0:	00001506 	br	47e48 <_fgets_r+0xac>
   47df4:	01400284 	movi	r5,10
   47df8:	8d800017 	ldw	r22,0(r17)
   47dfc:	9400012e 	bgeu	r18,r16,47e04 <_fgets_r+0x68>
   47e00:	9021883a 	mov	r16,r18
   47e04:	b009883a 	mov	r4,r22
   47e08:	800d883a 	mov	r6,r16
   47e0c:	0048bcc0 	call	48bcc <memchr>
   47e10:	a809883a 	mov	r4,r21
   47e14:	b00b883a 	mov	r5,r22
   47e18:	800d883a 	mov	r6,r16
   47e1c:	9425c83a 	sub	r18,r18,r16
   47e20:	10001f1e 	bne	r2,zero,47ea0 <_fgets_r+0x104>
   47e24:	88800117 	ldw	r2,4(r17)
   47e28:	88c00017 	ldw	r3,0(r17)
   47e2c:	ac2b883a 	add	r21,r21,r16
   47e30:	1405c83a 	sub	r2,r2,r16
   47e34:	1c21883a 	add	r16,r3,r16
   47e38:	88800115 	stw	r2,4(r17)
   47e3c:	8c000015 	stw	r16,0(r17)
   47e40:	0048d300 	call	48d30 <memcpy>
   47e44:	90000926 	beq	r18,zero,47e6c <_fgets_r+0xd0>
   47e48:	8c000117 	ldw	r16,4(r17)
   47e4c:	803fe91e 	bne	r16,zero,47df4 <__alt_data_end+0xfffe0cf4>
   47e50:	9809883a 	mov	r4,r19
   47e54:	880b883a 	mov	r5,r17
   47e58:	00490fc0 	call	490fc <__srefill_r>
   47e5c:	1000021e 	bne	r2,zero,47e68 <_fgets_r+0xcc>
   47e60:	8c000117 	ldw	r16,4(r17)
   47e64:	003fe306 	br	47df4 <__alt_data_end+0xfffe0cf4>
   47e68:	a5401c26 	beq	r20,r21,47edc <_fgets_r+0x140>
   47e6c:	a8000005 	stb	zero,0(r21)
   47e70:	00482780 	call	48278 <__sfp_lock_release>
   47e74:	a005883a 	mov	r2,r20
   47e78:	dfc00717 	ldw	ra,28(sp)
   47e7c:	dd800617 	ldw	r22,24(sp)
   47e80:	dd400517 	ldw	r21,20(sp)
   47e84:	dd000417 	ldw	r20,16(sp)
   47e88:	dcc00317 	ldw	r19,12(sp)
   47e8c:	dc800217 	ldw	r18,8(sp)
   47e90:	dc400117 	ldw	r17,4(sp)
   47e94:	dc000017 	ldw	r16,0(sp)
   47e98:	dec00804 	addi	sp,sp,32
   47e9c:	f800283a 	ret
   47ea0:	88c00117 	ldw	r3,4(r17)
   47ea4:	10800044 	addi	r2,r2,1
   47ea8:	15a1c83a 	sub	r16,r2,r22
   47eac:	1c07c83a 	sub	r3,r3,r16
   47eb0:	800d883a 	mov	r6,r16
   47eb4:	88c00115 	stw	r3,4(r17)
   47eb8:	88800015 	stw	r2,0(r17)
   47ebc:	ac2b883a 	add	r21,r21,r16
   47ec0:	0048d300 	call	48d30 <memcpy>
   47ec4:	a8000005 	stb	zero,0(r21)
   47ec8:	00482780 	call	48278 <__sfp_lock_release>
   47ecc:	a005883a 	mov	r2,r20
   47ed0:	003fe906 	br	47e78 <__alt_data_end+0xfffe0d78>
   47ed4:	00482640 	call	48264 <__sinit>
   47ed8:	003fc206 	br	47de4 <__alt_data_end+0xfffe0ce4>
   47edc:	00482780 	call	48278 <__sfp_lock_release>
   47ee0:	0005883a 	mov	r2,zero
   47ee4:	003fe406 	br	47e78 <__alt_data_end+0xfffe0d78>
   47ee8:	0005883a 	mov	r2,zero
   47eec:	f800283a 	ret

00047ef0 <fgets>:
   47ef0:	2007883a 	mov	r3,r4
   47ef4:	010001b4 	movhi	r4,6
   47ef8:	21333004 	addi	r4,r4,-13120
   47efc:	21000017 	ldw	r4,0(r4)
   47f00:	2805883a 	mov	r2,r5
   47f04:	300f883a 	mov	r7,r6
   47f08:	180b883a 	mov	r5,r3
   47f0c:	100d883a 	mov	r6,r2
   47f10:	0047d9c1 	jmpi	47d9c <_fgets_r>

00047f14 <__fp_lock>:
   47f14:	0005883a 	mov	r2,zero
   47f18:	f800283a 	ret

00047f1c <__fp_unlock>:
   47f1c:	0005883a 	mov	r2,zero
   47f20:	f800283a 	ret

00047f24 <_cleanup_r>:
   47f24:	01400174 	movhi	r5,5
   47f28:	29752304 	addi	r5,r5,-11124
   47f2c:	00482b41 	jmpi	482b4 <_fwalk>

00047f30 <__sinit.part.1>:
   47f30:	defff604 	addi	sp,sp,-40
   47f34:	00c00134 	movhi	r3,4
   47f38:	dfc00915 	stw	ra,36(sp)
   47f3c:	df000815 	stw	fp,32(sp)
   47f40:	ddc00715 	stw	r23,28(sp)
   47f44:	dd800615 	stw	r22,24(sp)
   47f48:	dd400515 	stw	r21,20(sp)
   47f4c:	dd000415 	stw	r20,16(sp)
   47f50:	dcc00315 	stw	r19,12(sp)
   47f54:	dc800215 	stw	r18,8(sp)
   47f58:	dc400115 	stw	r17,4(sp)
   47f5c:	dc000015 	stw	r16,0(sp)
   47f60:	18dfc904 	addi	r3,r3,32548
   47f64:	24000117 	ldw	r16,4(r4)
   47f68:	20c00f15 	stw	r3,60(r4)
   47f6c:	07000044 	movi	fp,1
   47f70:	00c000c4 	movi	r3,3
   47f74:	2080bb04 	addi	r2,r4,748
   47f78:	20c0b915 	stw	r3,740(r4)
   47f7c:	27000e15 	stw	fp,56(r4)
   47f80:	2080ba15 	stw	r2,744(r4)
   47f84:	2000b815 	stw	zero,736(r4)
   47f88:	05c00204 	movi	r23,8
   47f8c:	00800104 	movi	r2,4
   47f90:	2025883a 	mov	r18,r4
   47f94:	b80d883a 	mov	r6,r23
   47f98:	81001704 	addi	r4,r16,92
   47f9c:	000b883a 	mov	r5,zero
   47fa0:	80000015 	stw	zero,0(r16)
   47fa4:	80000115 	stw	zero,4(r16)
   47fa8:	80000215 	stw	zero,8(r16)
   47fac:	8080030d 	sth	r2,12(r16)
   47fb0:	80001915 	stw	zero,100(r16)
   47fb4:	8000038d 	sth	zero,14(r16)
   47fb8:	80000415 	stw	zero,16(r16)
   47fbc:	80000515 	stw	zero,20(r16)
   47fc0:	80000615 	stw	zero,24(r16)
   47fc4:	0048e680 	call	48e68 <memset>
   47fc8:	05800174 	movhi	r22,5
   47fcc:	94400217 	ldw	r17,8(r18)
   47fd0:	05400174 	movhi	r21,5
   47fd4:	05000174 	movhi	r20,5
   47fd8:	04c00174 	movhi	r19,5
   47fdc:	b5a4be04 	addi	r22,r22,-27912
   47fe0:	ad64d504 	addi	r21,r21,-27820
   47fe4:	a524f404 	addi	r20,r20,-27696
   47fe8:	9ce50b04 	addi	r19,r19,-27604
   47fec:	85800815 	stw	r22,32(r16)
   47ff0:	85400915 	stw	r21,36(r16)
   47ff4:	85000a15 	stw	r20,40(r16)
   47ff8:	84c00b15 	stw	r19,44(r16)
   47ffc:	84000715 	stw	r16,28(r16)
   48000:	00800284 	movi	r2,10
   48004:	89001704 	addi	r4,r17,92
   48008:	b80d883a 	mov	r6,r23
   4800c:	000b883a 	mov	r5,zero
   48010:	88000015 	stw	zero,0(r17)
   48014:	88000115 	stw	zero,4(r17)
   48018:	88000215 	stw	zero,8(r17)
   4801c:	8880030d 	sth	r2,12(r17)
   48020:	88001915 	stw	zero,100(r17)
   48024:	8f00038d 	sth	fp,14(r17)
   48028:	88000415 	stw	zero,16(r17)
   4802c:	88000515 	stw	zero,20(r17)
   48030:	88000615 	stw	zero,24(r17)
   48034:	0048e680 	call	48e68 <memset>
   48038:	94000317 	ldw	r16,12(r18)
   4803c:	00800484 	movi	r2,18
   48040:	8c400715 	stw	r17,28(r17)
   48044:	8d800815 	stw	r22,32(r17)
   48048:	8d400915 	stw	r21,36(r17)
   4804c:	8d000a15 	stw	r20,40(r17)
   48050:	8cc00b15 	stw	r19,44(r17)
   48054:	8080030d 	sth	r2,12(r16)
   48058:	00800084 	movi	r2,2
   4805c:	80000015 	stw	zero,0(r16)
   48060:	80000115 	stw	zero,4(r16)
   48064:	80000215 	stw	zero,8(r16)
   48068:	80001915 	stw	zero,100(r16)
   4806c:	8080038d 	sth	r2,14(r16)
   48070:	80000415 	stw	zero,16(r16)
   48074:	80000515 	stw	zero,20(r16)
   48078:	80000615 	stw	zero,24(r16)
   4807c:	81001704 	addi	r4,r16,92
   48080:	000b883a 	mov	r5,zero
   48084:	b80d883a 	mov	r6,r23
   48088:	0048e680 	call	48e68 <memset>
   4808c:	84000715 	stw	r16,28(r16)
   48090:	85800815 	stw	r22,32(r16)
   48094:	85400915 	stw	r21,36(r16)
   48098:	85000a15 	stw	r20,40(r16)
   4809c:	84c00b15 	stw	r19,44(r16)
   480a0:	dfc00917 	ldw	ra,36(sp)
   480a4:	df000817 	ldw	fp,32(sp)
   480a8:	ddc00717 	ldw	r23,28(sp)
   480ac:	dd800617 	ldw	r22,24(sp)
   480b0:	dd400517 	ldw	r21,20(sp)
   480b4:	dd000417 	ldw	r20,16(sp)
   480b8:	dcc00317 	ldw	r19,12(sp)
   480bc:	dc800217 	ldw	r18,8(sp)
   480c0:	dc400117 	ldw	r17,4(sp)
   480c4:	dc000017 	ldw	r16,0(sp)
   480c8:	dec00a04 	addi	sp,sp,40
   480cc:	f800283a 	ret

000480d0 <__sfmoreglue>:
   480d0:	defffc04 	addi	sp,sp,-16
   480d4:	dc400115 	stw	r17,4(sp)
   480d8:	2c401a24 	muli	r17,r5,104
   480dc:	dc800215 	stw	r18,8(sp)
   480e0:	2825883a 	mov	r18,r5
   480e4:	89400304 	addi	r5,r17,12
   480e8:	dc000015 	stw	r16,0(sp)
   480ec:	dfc00315 	stw	ra,12(sp)
   480f0:	00484240 	call	48424 <_malloc_r>
   480f4:	1021883a 	mov	r16,r2
   480f8:	10000726 	beq	r2,zero,48118 <__sfmoreglue+0x48>
   480fc:	11000304 	addi	r4,r2,12
   48100:	10000015 	stw	zero,0(r2)
   48104:	14800115 	stw	r18,4(r2)
   48108:	11000215 	stw	r4,8(r2)
   4810c:	000b883a 	mov	r5,zero
   48110:	880d883a 	mov	r6,r17
   48114:	0048e680 	call	48e68 <memset>
   48118:	8005883a 	mov	r2,r16
   4811c:	dfc00317 	ldw	ra,12(sp)
   48120:	dc800217 	ldw	r18,8(sp)
   48124:	dc400117 	ldw	r17,4(sp)
   48128:	dc000017 	ldw	r16,0(sp)
   4812c:	dec00404 	addi	sp,sp,16
   48130:	f800283a 	ret

00048134 <__sfp>:
   48134:	008001b4 	movhi	r2,6
   48138:	defffb04 	addi	sp,sp,-20
   4813c:	10b32f04 	addi	r2,r2,-13124
   48140:	dc800215 	stw	r18,8(sp)
   48144:	14800017 	ldw	r18,0(r2)
   48148:	dcc00315 	stw	r19,12(sp)
   4814c:	dfc00415 	stw	ra,16(sp)
   48150:	90800e17 	ldw	r2,56(r18)
   48154:	dc400115 	stw	r17,4(sp)
   48158:	dc000015 	stw	r16,0(sp)
   4815c:	2027883a 	mov	r19,r4
   48160:	1000021e 	bne	r2,zero,4816c <__sfp+0x38>
   48164:	9009883a 	mov	r4,r18
   48168:	0047f300 	call	47f30 <__sinit.part.1>
   4816c:	9480b804 	addi	r18,r18,736
   48170:	047fffc4 	movi	r17,-1
   48174:	91400117 	ldw	r5,4(r18)
   48178:	94000217 	ldw	r16,8(r18)
   4817c:	297fffc4 	addi	r5,r5,-1
   48180:	28000a16 	blt	r5,zero,481ac <__sfp+0x78>
   48184:	8080030f 	ldh	r2,12(r16)
   48188:	10000c26 	beq	r2,zero,481bc <__sfp+0x88>
   4818c:	80c01d04 	addi	r3,r16,116
   48190:	00000206 	br	4819c <__sfp+0x68>
   48194:	18bfe60f 	ldh	r2,-104(r3)
   48198:	10000826 	beq	r2,zero,481bc <__sfp+0x88>
   4819c:	297fffc4 	addi	r5,r5,-1
   481a0:	1c3ffd04 	addi	r16,r3,-12
   481a4:	18c01a04 	addi	r3,r3,104
   481a8:	2c7ffa1e 	bne	r5,r17,48194 <__alt_data_end+0xfffe1094>
   481ac:	90800017 	ldw	r2,0(r18)
   481b0:	10001d26 	beq	r2,zero,48228 <__sfp+0xf4>
   481b4:	1025883a 	mov	r18,r2
   481b8:	003fee06 	br	48174 <__alt_data_end+0xfffe1074>
   481bc:	00bfffc4 	movi	r2,-1
   481c0:	8080038d 	sth	r2,14(r16)
   481c4:	00800044 	movi	r2,1
   481c8:	8080030d 	sth	r2,12(r16)
   481cc:	80001915 	stw	zero,100(r16)
   481d0:	80000015 	stw	zero,0(r16)
   481d4:	80000215 	stw	zero,8(r16)
   481d8:	80000115 	stw	zero,4(r16)
   481dc:	80000415 	stw	zero,16(r16)
   481e0:	80000515 	stw	zero,20(r16)
   481e4:	80000615 	stw	zero,24(r16)
   481e8:	81001704 	addi	r4,r16,92
   481ec:	000b883a 	mov	r5,zero
   481f0:	01800204 	movi	r6,8
   481f4:	0048e680 	call	48e68 <memset>
   481f8:	8005883a 	mov	r2,r16
   481fc:	80000c15 	stw	zero,48(r16)
   48200:	80000d15 	stw	zero,52(r16)
   48204:	80001115 	stw	zero,68(r16)
   48208:	80001215 	stw	zero,72(r16)
   4820c:	dfc00417 	ldw	ra,16(sp)
   48210:	dcc00317 	ldw	r19,12(sp)
   48214:	dc800217 	ldw	r18,8(sp)
   48218:	dc400117 	ldw	r17,4(sp)
   4821c:	dc000017 	ldw	r16,0(sp)
   48220:	dec00504 	addi	sp,sp,20
   48224:	f800283a 	ret
   48228:	9809883a 	mov	r4,r19
   4822c:	01400104 	movi	r5,4
   48230:	00480d00 	call	480d0 <__sfmoreglue>
   48234:	90800015 	stw	r2,0(r18)
   48238:	103fde1e 	bne	r2,zero,481b4 <__alt_data_end+0xfffe10b4>
   4823c:	00800304 	movi	r2,12
   48240:	98800015 	stw	r2,0(r19)
   48244:	0005883a 	mov	r2,zero
   48248:	003ff006 	br	4820c <__alt_data_end+0xfffe110c>

0004824c <_cleanup>:
   4824c:	008001b4 	movhi	r2,6
   48250:	10b32f04 	addi	r2,r2,-13124
   48254:	11000017 	ldw	r4,0(r2)
   48258:	01400174 	movhi	r5,5
   4825c:	29752304 	addi	r5,r5,-11124
   48260:	00482b41 	jmpi	482b4 <_fwalk>

00048264 <__sinit>:
   48264:	20800e17 	ldw	r2,56(r4)
   48268:	10000126 	beq	r2,zero,48270 <__sinit+0xc>
   4826c:	f800283a 	ret
   48270:	0047f301 	jmpi	47f30 <__sinit.part.1>

00048274 <__sfp_lock_acquire>:
   48274:	f800283a 	ret

00048278 <__sfp_lock_release>:
   48278:	f800283a 	ret

0004827c <__sinit_lock_acquire>:
   4827c:	f800283a 	ret

00048280 <__sinit_lock_release>:
   48280:	f800283a 	ret

00048284 <__fp_lock_all>:
   48284:	008001b4 	movhi	r2,6
   48288:	10b33004 	addi	r2,r2,-13120
   4828c:	11000017 	ldw	r4,0(r2)
   48290:	01400134 	movhi	r5,4
   48294:	295fc504 	addi	r5,r5,32532
   48298:	00482b41 	jmpi	482b4 <_fwalk>

0004829c <__fp_unlock_all>:
   4829c:	008001b4 	movhi	r2,6
   482a0:	10b33004 	addi	r2,r2,-13120
   482a4:	11000017 	ldw	r4,0(r2)
   482a8:	01400134 	movhi	r5,4
   482ac:	295fc704 	addi	r5,r5,32540
   482b0:	00482b41 	jmpi	482b4 <_fwalk>

000482b4 <_fwalk>:
   482b4:	defff804 	addi	sp,sp,-32
   482b8:	dd400515 	stw	r21,20(sp)
   482bc:	2540b804 	addi	r21,r4,736
   482c0:	dd800615 	stw	r22,24(sp)
   482c4:	dd000415 	stw	r20,16(sp)
   482c8:	dfc00715 	stw	ra,28(sp)
   482cc:	dcc00315 	stw	r19,12(sp)
   482d0:	dc800215 	stw	r18,8(sp)
   482d4:	dc400115 	stw	r17,4(sp)
   482d8:	dc000015 	stw	r16,0(sp)
   482dc:	2829883a 	mov	r20,r5
   482e0:	002d883a 	mov	r22,zero
   482e4:	00482740 	call	48274 <__sfp_lock_acquire>
   482e8:	a8001426 	beq	r21,zero,4833c <_fwalk+0x88>
   482ec:	04ffffc4 	movi	r19,-1
   482f0:	ac400117 	ldw	r17,4(r21)
   482f4:	ac800217 	ldw	r18,8(r21)
   482f8:	8c7fffc4 	addi	r17,r17,-1
   482fc:	88000d16 	blt	r17,zero,48334 <_fwalk+0x80>
   48300:	94000304 	addi	r16,r18,12
   48304:	94800384 	addi	r18,r18,14
   48308:	80c0000f 	ldh	r3,0(r16)
   4830c:	8c7fffc4 	addi	r17,r17,-1
   48310:	813ffd04 	addi	r4,r16,-12
   48314:	18000426 	beq	r3,zero,48328 <_fwalk+0x74>
   48318:	90c0000f 	ldh	r3,0(r18)
   4831c:	1cc00226 	beq	r3,r19,48328 <_fwalk+0x74>
   48320:	a03ee83a 	callr	r20
   48324:	b0acb03a 	or	r22,r22,r2
   48328:	84001a04 	addi	r16,r16,104
   4832c:	94801a04 	addi	r18,r18,104
   48330:	8cfff51e 	bne	r17,r19,48308 <__alt_data_end+0xfffe1208>
   48334:	ad400017 	ldw	r21,0(r21)
   48338:	a83fed1e 	bne	r21,zero,482f0 <__alt_data_end+0xfffe11f0>
   4833c:	00482780 	call	48278 <__sfp_lock_release>
   48340:	b005883a 	mov	r2,r22
   48344:	dfc00717 	ldw	ra,28(sp)
   48348:	dd800617 	ldw	r22,24(sp)
   4834c:	dd400517 	ldw	r21,20(sp)
   48350:	dd000417 	ldw	r20,16(sp)
   48354:	dcc00317 	ldw	r19,12(sp)
   48358:	dc800217 	ldw	r18,8(sp)
   4835c:	dc400117 	ldw	r17,4(sp)
   48360:	dc000017 	ldw	r16,0(sp)
   48364:	dec00804 	addi	sp,sp,32
   48368:	f800283a 	ret

0004836c <_fwalk_reent>:
   4836c:	defff804 	addi	sp,sp,-32
   48370:	dd400515 	stw	r21,20(sp)
   48374:	2540b804 	addi	r21,r4,736
   48378:	dd800615 	stw	r22,24(sp)
   4837c:	dd000415 	stw	r20,16(sp)
   48380:	dcc00315 	stw	r19,12(sp)
   48384:	dfc00715 	stw	ra,28(sp)
   48388:	dc800215 	stw	r18,8(sp)
   4838c:	dc400115 	stw	r17,4(sp)
   48390:	dc000015 	stw	r16,0(sp)
   48394:	2027883a 	mov	r19,r4
   48398:	2829883a 	mov	r20,r5
   4839c:	002d883a 	mov	r22,zero
   483a0:	00482740 	call	48274 <__sfp_lock_acquire>
   483a4:	a8001326 	beq	r21,zero,483f4 <_fwalk_reent+0x88>
   483a8:	04bfffc4 	movi	r18,-1
   483ac:	ac400117 	ldw	r17,4(r21)
   483b0:	ac000217 	ldw	r16,8(r21)
   483b4:	8c7fffc4 	addi	r17,r17,-1
   483b8:	88000c16 	blt	r17,zero,483ec <_fwalk_reent+0x80>
   483bc:	84000304 	addi	r16,r16,12
   483c0:	80c0000f 	ldh	r3,0(r16)
   483c4:	8c7fffc4 	addi	r17,r17,-1
   483c8:	817ffd04 	addi	r5,r16,-12
   483cc:	18000526 	beq	r3,zero,483e4 <_fwalk_reent+0x78>
   483d0:	80c0008f 	ldh	r3,2(r16)
   483d4:	9809883a 	mov	r4,r19
   483d8:	1c800226 	beq	r3,r18,483e4 <_fwalk_reent+0x78>
   483dc:	a03ee83a 	callr	r20
   483e0:	b0acb03a 	or	r22,r22,r2
   483e4:	84001a04 	addi	r16,r16,104
   483e8:	8cbff51e 	bne	r17,r18,483c0 <__alt_data_end+0xfffe12c0>
   483ec:	ad400017 	ldw	r21,0(r21)
   483f0:	a83fee1e 	bne	r21,zero,483ac <__alt_data_end+0xfffe12ac>
   483f4:	00482780 	call	48278 <__sfp_lock_release>
   483f8:	b005883a 	mov	r2,r22
   483fc:	dfc00717 	ldw	ra,28(sp)
   48400:	dd800617 	ldw	r22,24(sp)
   48404:	dd400517 	ldw	r21,20(sp)
   48408:	dd000417 	ldw	r20,16(sp)
   4840c:	dcc00317 	ldw	r19,12(sp)
   48410:	dc800217 	ldw	r18,8(sp)
   48414:	dc400117 	ldw	r17,4(sp)
   48418:	dc000017 	ldw	r16,0(sp)
   4841c:	dec00804 	addi	sp,sp,32
   48420:	f800283a 	ret

00048424 <_malloc_r>:
   48424:	defff504 	addi	sp,sp,-44
   48428:	dc800315 	stw	r18,12(sp)
   4842c:	dfc00a15 	stw	ra,40(sp)
   48430:	df000915 	stw	fp,36(sp)
   48434:	ddc00815 	stw	r23,32(sp)
   48438:	dd800715 	stw	r22,28(sp)
   4843c:	dd400615 	stw	r21,24(sp)
   48440:	dd000515 	stw	r20,20(sp)
   48444:	dcc00415 	stw	r19,16(sp)
   48448:	dc400215 	stw	r17,8(sp)
   4844c:	dc000115 	stw	r16,4(sp)
   48450:	288002c4 	addi	r2,r5,11
   48454:	00c00584 	movi	r3,22
   48458:	2025883a 	mov	r18,r4
   4845c:	18802a2e 	bgeu	r3,r2,48508 <_malloc_r+0xe4>
   48460:	047ffe04 	movi	r17,-8
   48464:	1462703a 	and	r17,r2,r17
   48468:	88009e16 	blt	r17,zero,486e4 <_malloc_r+0x2c0>
   4846c:	89409d36 	bltu	r17,r5,486e4 <_malloc_r+0x2c0>
   48470:	00550d40 	call	550d4 <__malloc_lock>
   48474:	00807dc4 	movi	r2,503
   48478:	14402736 	bltu	r2,r17,48518 <_malloc_r+0xf4>
   4847c:	8806d0fa 	srli	r3,r17,3
   48480:	04c001b4 	movhi	r19,6
   48484:	9ced8b04 	addi	r19,r19,-18900
   48488:	18c5883a 	add	r2,r3,r3
   4848c:	1085883a 	add	r2,r2,r2
   48490:	1085883a 	add	r2,r2,r2
   48494:	9885883a 	add	r2,r19,r2
   48498:	14000317 	ldw	r16,12(r2)
   4849c:	80814a26 	beq	r16,r2,489c8 <_malloc_r+0x5a4>
   484a0:	80c00117 	ldw	r3,4(r16)
   484a4:	81000317 	ldw	r4,12(r16)
   484a8:	00bfff04 	movi	r2,-4
   484ac:	1884703a 	and	r2,r3,r2
   484b0:	81400217 	ldw	r5,8(r16)
   484b4:	8085883a 	add	r2,r16,r2
   484b8:	10c00117 	ldw	r3,4(r2)
   484bc:	29000315 	stw	r4,12(r5)
   484c0:	21400215 	stw	r5,8(r4)
   484c4:	18c00054 	ori	r3,r3,1
   484c8:	10c00115 	stw	r3,4(r2)
   484cc:	9009883a 	mov	r4,r18
   484d0:	00550f40 	call	550f4 <__malloc_unlock>
   484d4:	80800204 	addi	r2,r16,8
   484d8:	dfc00a17 	ldw	ra,40(sp)
   484dc:	df000917 	ldw	fp,36(sp)
   484e0:	ddc00817 	ldw	r23,32(sp)
   484e4:	dd800717 	ldw	r22,28(sp)
   484e8:	dd400617 	ldw	r21,24(sp)
   484ec:	dd000517 	ldw	r20,20(sp)
   484f0:	dcc00417 	ldw	r19,16(sp)
   484f4:	dc800317 	ldw	r18,12(sp)
   484f8:	dc400217 	ldw	r17,8(sp)
   484fc:	dc000117 	ldw	r16,4(sp)
   48500:	dec00b04 	addi	sp,sp,44
   48504:	f800283a 	ret
   48508:	04400404 	movi	r17,16
   4850c:	89407536 	bltu	r17,r5,486e4 <_malloc_r+0x2c0>
   48510:	00550d40 	call	550d4 <__malloc_lock>
   48514:	003fd906 	br	4847c <__alt_data_end+0xfffe137c>
   48518:	8806d27a 	srli	r3,r17,9
   4851c:	18007526 	beq	r3,zero,486f4 <_malloc_r+0x2d0>
   48520:	00800104 	movi	r2,4
   48524:	10c0ef36 	bltu	r2,r3,488e4 <_malloc_r+0x4c0>
   48528:	8806d1ba 	srli	r3,r17,6
   4852c:	19c00e04 	addi	r7,r3,56
   48530:	39cb883a 	add	r5,r7,r7
   48534:	04c001b4 	movhi	r19,6
   48538:	294b883a 	add	r5,r5,r5
   4853c:	9ced8b04 	addi	r19,r19,-18900
   48540:	294b883a 	add	r5,r5,r5
   48544:	994b883a 	add	r5,r19,r5
   48548:	2c000317 	ldw	r16,12(r5)
   4854c:	2c000e26 	beq	r5,r16,48588 <_malloc_r+0x164>
   48550:	80800117 	ldw	r2,4(r16)
   48554:	01bfff04 	movi	r6,-4
   48558:	010003c4 	movi	r4,15
   4855c:	1184703a 	and	r2,r2,r6
   48560:	1447c83a 	sub	r3,r2,r17
   48564:	20c00716 	blt	r4,r3,48584 <_malloc_r+0x160>
   48568:	1800650e 	bge	r3,zero,48700 <_malloc_r+0x2dc>
   4856c:	84000317 	ldw	r16,12(r16)
   48570:	2c000526 	beq	r5,r16,48588 <_malloc_r+0x164>
   48574:	80800117 	ldw	r2,4(r16)
   48578:	1184703a 	and	r2,r2,r6
   4857c:	1447c83a 	sub	r3,r2,r17
   48580:	20fff90e 	bge	r4,r3,48568 <__alt_data_end+0xfffe1468>
   48584:	39ffffc4 	addi	r7,r7,-1
   48588:	38c00044 	addi	r3,r7,1
   4858c:	018001b4 	movhi	r6,6
   48590:	9c000417 	ldw	r16,16(r19)
   48594:	31ad8b04 	addi	r6,r6,-18900
   48598:	32400204 	addi	r9,r6,8
   4859c:	82410326 	beq	r16,r9,489ac <_malloc_r+0x588>
   485a0:	81000117 	ldw	r4,4(r16)
   485a4:	00bfff04 	movi	r2,-4
   485a8:	208e703a 	and	r7,r4,r2
   485ac:	3c45c83a 	sub	r2,r7,r17
   485b0:	010003c4 	movi	r4,15
   485b4:	2080ee16 	blt	r4,r2,48970 <_malloc_r+0x54c>
   485b8:	32400515 	stw	r9,20(r6)
   485bc:	32400415 	stw	r9,16(r6)
   485c0:	1000510e 	bge	r2,zero,48708 <_malloc_r+0x2e4>
   485c4:	00807fc4 	movi	r2,511
   485c8:	11c0ce36 	bltu	r2,r7,48904 <_malloc_r+0x4e0>
   485cc:	3808d0fa 	srli	r4,r7,3
   485d0:	01c00044 	movi	r7,1
   485d4:	30800117 	ldw	r2,4(r6)
   485d8:	210b883a 	add	r5,r4,r4
   485dc:	294b883a 	add	r5,r5,r5
   485e0:	2009d0ba 	srai	r4,r4,2
   485e4:	294b883a 	add	r5,r5,r5
   485e8:	298b883a 	add	r5,r5,r6
   485ec:	2a000217 	ldw	r8,8(r5)
   485f0:	3908983a 	sll	r4,r7,r4
   485f4:	81400315 	stw	r5,12(r16)
   485f8:	82000215 	stw	r8,8(r16)
   485fc:	2088b03a 	or	r4,r4,r2
   48600:	2c000215 	stw	r16,8(r5)
   48604:	31000115 	stw	r4,4(r6)
   48608:	44000315 	stw	r16,12(r8)
   4860c:	1805d0ba 	srai	r2,r3,2
   48610:	01400044 	movi	r5,1
   48614:	288a983a 	sll	r5,r5,r2
   48618:	21404336 	bltu	r4,r5,48728 <_malloc_r+0x304>
   4861c:	2144703a 	and	r2,r4,r5
   48620:	10000a1e 	bne	r2,zero,4864c <_malloc_r+0x228>
   48624:	00bfff04 	movi	r2,-4
   48628:	294b883a 	add	r5,r5,r5
   4862c:	1886703a 	and	r3,r3,r2
   48630:	2144703a 	and	r2,r4,r5
   48634:	18c00104 	addi	r3,r3,4
   48638:	1000041e 	bne	r2,zero,4864c <_malloc_r+0x228>
   4863c:	294b883a 	add	r5,r5,r5
   48640:	2144703a 	and	r2,r4,r5
   48644:	18c00104 	addi	r3,r3,4
   48648:	103ffc26 	beq	r2,zero,4863c <__alt_data_end+0xfffe153c>
   4864c:	023fff04 	movi	r8,-4
   48650:	01c003c4 	movi	r7,15
   48654:	18c5883a 	add	r2,r3,r3
   48658:	1085883a 	add	r2,r2,r2
   4865c:	1085883a 	add	r2,r2,r2
   48660:	9895883a 	add	r10,r19,r2
   48664:	52c00304 	addi	r11,r10,12
   48668:	1819883a 	mov	r12,r3
   4866c:	5c000017 	ldw	r16,0(r11)
   48670:	59bffd04 	addi	r6,r11,-12
   48674:	8180041e 	bne	r16,r6,48688 <_malloc_r+0x264>
   48678:	0000ce06 	br	489b4 <_malloc_r+0x590>
   4867c:	2000d70e 	bge	r4,zero,489dc <_malloc_r+0x5b8>
   48680:	84000317 	ldw	r16,12(r16)
   48684:	8180cb26 	beq	r16,r6,489b4 <_malloc_r+0x590>
   48688:	80800117 	ldw	r2,4(r16)
   4868c:	1204703a 	and	r2,r2,r8
   48690:	1449c83a 	sub	r4,r2,r17
   48694:	393ff90e 	bge	r7,r4,4867c <__alt_data_end+0xfffe157c>
   48698:	80800317 	ldw	r2,12(r16)
   4869c:	80c00217 	ldw	r3,8(r16)
   486a0:	89400054 	ori	r5,r17,1
   486a4:	81400115 	stw	r5,4(r16)
   486a8:	18800315 	stw	r2,12(r3)
   486ac:	10c00215 	stw	r3,8(r2)
   486b0:	8463883a 	add	r17,r16,r17
   486b4:	9c400515 	stw	r17,20(r19)
   486b8:	9c400415 	stw	r17,16(r19)
   486bc:	20800054 	ori	r2,r4,1
   486c0:	88800115 	stw	r2,4(r17)
   486c4:	8a400315 	stw	r9,12(r17)
   486c8:	8a400215 	stw	r9,8(r17)
   486cc:	8923883a 	add	r17,r17,r4
   486d0:	89000015 	stw	r4,0(r17)
   486d4:	9009883a 	mov	r4,r18
   486d8:	00550f40 	call	550f4 <__malloc_unlock>
   486dc:	80800204 	addi	r2,r16,8
   486e0:	003f7d06 	br	484d8 <__alt_data_end+0xfffe13d8>
   486e4:	00800304 	movi	r2,12
   486e8:	90800015 	stw	r2,0(r18)
   486ec:	0005883a 	mov	r2,zero
   486f0:	003f7906 	br	484d8 <__alt_data_end+0xfffe13d8>
   486f4:	01401f84 	movi	r5,126
   486f8:	01c00fc4 	movi	r7,63
   486fc:	003f8d06 	br	48534 <__alt_data_end+0xfffe1434>
   48700:	81000317 	ldw	r4,12(r16)
   48704:	003f6a06 	br	484b0 <__alt_data_end+0xfffe13b0>
   48708:	81c5883a 	add	r2,r16,r7
   4870c:	10c00117 	ldw	r3,4(r2)
   48710:	9009883a 	mov	r4,r18
   48714:	18c00054 	ori	r3,r3,1
   48718:	10c00115 	stw	r3,4(r2)
   4871c:	00550f40 	call	550f4 <__malloc_unlock>
   48720:	80800204 	addi	r2,r16,8
   48724:	003f6c06 	br	484d8 <__alt_data_end+0xfffe13d8>
   48728:	9c000217 	ldw	r16,8(r19)
   4872c:	00bfff04 	movi	r2,-4
   48730:	85800117 	ldw	r22,4(r16)
   48734:	b0ac703a 	and	r22,r22,r2
   48738:	b4400336 	bltu	r22,r17,48748 <_malloc_r+0x324>
   4873c:	b445c83a 	sub	r2,r22,r17
   48740:	00c003c4 	movi	r3,15
   48744:	18805d16 	blt	r3,r2,488bc <_malloc_r+0x498>
   48748:	05c001b4 	movhi	r23,6
   4874c:	008001b4 	movhi	r2,6
   48750:	bdf33104 	addi	r23,r23,-13116
   48754:	10ba1d04 	addi	r2,r2,-6028
   48758:	15400017 	ldw	r21,0(r2)
   4875c:	b9000017 	ldw	r4,0(r23)
   48760:	00ffffc4 	movi	r3,-1
   48764:	858d883a 	add	r6,r16,r22
   48768:	8d6b883a 	add	r21,r17,r21
   4876c:	20c0e426 	beq	r4,r3,48b00 <_malloc_r+0x6dc>
   48770:	ad4403c4 	addi	r21,r21,4111
   48774:	00fc0004 	movi	r3,-4096
   48778:	a8ea703a 	and	r21,r21,r3
   4877c:	9009883a 	mov	r4,r18
   48780:	a80b883a 	mov	r5,r21
   48784:	d9800015 	stw	r6,0(sp)
   48788:	00492a40 	call	492a4 <_sbrk_r>
   4878c:	00ffffc4 	movi	r3,-1
   48790:	1029883a 	mov	r20,r2
   48794:	d9800017 	ldw	r6,0(sp)
   48798:	10c0a426 	beq	r2,r3,48a2c <_malloc_r+0x608>
   4879c:	1180a236 	bltu	r2,r6,48a28 <_malloc_r+0x604>
   487a0:	070001b4 	movhi	fp,6
   487a4:	e73a2904 	addi	fp,fp,-5980
   487a8:	e0c00017 	ldw	r3,0(fp)
   487ac:	a8c7883a 	add	r3,r21,r3
   487b0:	e0c00015 	stw	r3,0(fp)
   487b4:	3500da26 	beq	r6,r20,48b20 <_malloc_r+0x6fc>
   487b8:	b9000017 	ldw	r4,0(r23)
   487bc:	00bfffc4 	movi	r2,-1
   487c0:	2080e426 	beq	r4,r2,48b54 <_malloc_r+0x730>
   487c4:	a185c83a 	sub	r2,r20,r6
   487c8:	1885883a 	add	r2,r3,r2
   487cc:	e0800015 	stw	r2,0(fp)
   487d0:	a0c001cc 	andi	r3,r20,7
   487d4:	1800b526 	beq	r3,zero,48aac <_malloc_r+0x688>
   487d8:	a0e9c83a 	sub	r20,r20,r3
   487dc:	00840204 	movi	r2,4104
   487e0:	a5000204 	addi	r20,r20,8
   487e4:	10c7c83a 	sub	r3,r2,r3
   487e8:	a545883a 	add	r2,r20,r21
   487ec:	1083ffcc 	andi	r2,r2,4095
   487f0:	18abc83a 	sub	r21,r3,r2
   487f4:	9009883a 	mov	r4,r18
   487f8:	a80b883a 	mov	r5,r21
   487fc:	00492a40 	call	492a4 <_sbrk_r>
   48800:	00ffffc4 	movi	r3,-1
   48804:	10c0d026 	beq	r2,r3,48b48 <_malloc_r+0x724>
   48808:	1507c83a 	sub	r3,r2,r20
   4880c:	a8c7883a 	add	r3,r21,r3
   48810:	18c00054 	ori	r3,r3,1
   48814:	e0800017 	ldw	r2,0(fp)
   48818:	9d000215 	stw	r20,8(r19)
   4881c:	a0c00115 	stw	r3,4(r20)
   48820:	a887883a 	add	r3,r21,r2
   48824:	e0c00015 	stw	r3,0(fp)
   48828:	84c00e26 	beq	r16,r19,48864 <_malloc_r+0x440>
   4882c:	018003c4 	movi	r6,15
   48830:	3580a02e 	bgeu	r6,r22,48ab4 <_malloc_r+0x690>
   48834:	81400117 	ldw	r5,4(r16)
   48838:	013ffe04 	movi	r4,-8
   4883c:	b0bffd04 	addi	r2,r22,-12
   48840:	1104703a 	and	r2,r2,r4
   48844:	2900004c 	andi	r4,r5,1
   48848:	1108b03a 	or	r4,r2,r4
   4884c:	81000115 	stw	r4,4(r16)
   48850:	01400144 	movi	r5,5
   48854:	8089883a 	add	r4,r16,r2
   48858:	21400115 	stw	r5,4(r4)
   4885c:	21400215 	stw	r5,8(r4)
   48860:	3080c036 	bltu	r6,r2,48b64 <_malloc_r+0x740>
   48864:	008001b4 	movhi	r2,6
   48868:	10ba1c04 	addi	r2,r2,-6032
   4886c:	11000017 	ldw	r4,0(r2)
   48870:	20c0012e 	bgeu	r4,r3,48878 <_malloc_r+0x454>
   48874:	10c00015 	stw	r3,0(r2)
   48878:	008001b4 	movhi	r2,6
   4887c:	10ba1b04 	addi	r2,r2,-6036
   48880:	11000017 	ldw	r4,0(r2)
   48884:	9c000217 	ldw	r16,8(r19)
   48888:	20c0012e 	bgeu	r4,r3,48890 <_malloc_r+0x46c>
   4888c:	10c00015 	stw	r3,0(r2)
   48890:	80c00117 	ldw	r3,4(r16)
   48894:	00bfff04 	movi	r2,-4
   48898:	1886703a 	and	r3,r3,r2
   4889c:	1c45c83a 	sub	r2,r3,r17
   488a0:	1c400236 	bltu	r3,r17,488ac <_malloc_r+0x488>
   488a4:	00c003c4 	movi	r3,15
   488a8:	18800416 	blt	r3,r2,488bc <_malloc_r+0x498>
   488ac:	9009883a 	mov	r4,r18
   488b0:	00550f40 	call	550f4 <__malloc_unlock>
   488b4:	0005883a 	mov	r2,zero
   488b8:	003f0706 	br	484d8 <__alt_data_end+0xfffe13d8>
   488bc:	88c00054 	ori	r3,r17,1
   488c0:	80c00115 	stw	r3,4(r16)
   488c4:	8463883a 	add	r17,r16,r17
   488c8:	10800054 	ori	r2,r2,1
   488cc:	9c400215 	stw	r17,8(r19)
   488d0:	88800115 	stw	r2,4(r17)
   488d4:	9009883a 	mov	r4,r18
   488d8:	00550f40 	call	550f4 <__malloc_unlock>
   488dc:	80800204 	addi	r2,r16,8
   488e0:	003efd06 	br	484d8 <__alt_data_end+0xfffe13d8>
   488e4:	00800504 	movi	r2,20
   488e8:	10c0482e 	bgeu	r2,r3,48a0c <_malloc_r+0x5e8>
   488ec:	00801504 	movi	r2,84
   488f0:	10c06836 	bltu	r2,r3,48a94 <_malloc_r+0x670>
   488f4:	8806d33a 	srli	r3,r17,12
   488f8:	19c01b84 	addi	r7,r3,110
   488fc:	39cb883a 	add	r5,r7,r7
   48900:	003f0c06 	br	48534 <__alt_data_end+0xfffe1434>
   48904:	3804d27a 	srli	r2,r7,9
   48908:	01000104 	movi	r4,4
   4890c:	2080422e 	bgeu	r4,r2,48a18 <_malloc_r+0x5f4>
   48910:	01000504 	movi	r4,20
   48914:	20807c36 	bltu	r4,r2,48b08 <_malloc_r+0x6e4>
   48918:	110016c4 	addi	r4,r2,91
   4891c:	210b883a 	add	r5,r4,r4
   48920:	294b883a 	add	r5,r5,r5
   48924:	294b883a 	add	r5,r5,r5
   48928:	994b883a 	add	r5,r19,r5
   4892c:	28800217 	ldw	r2,8(r5)
   48930:	020001b4 	movhi	r8,6
   48934:	422d8b04 	addi	r8,r8,-18900
   48938:	11406326 	beq	r2,r5,48ac8 <_malloc_r+0x6a4>
   4893c:	01bfff04 	movi	r6,-4
   48940:	11000117 	ldw	r4,4(r2)
   48944:	2188703a 	and	r4,r4,r6
   48948:	3900022e 	bgeu	r7,r4,48954 <_malloc_r+0x530>
   4894c:	10800217 	ldw	r2,8(r2)
   48950:	28bffb1e 	bne	r5,r2,48940 <__alt_data_end+0xfffe1840>
   48954:	11800317 	ldw	r6,12(r2)
   48958:	99000117 	ldw	r4,4(r19)
   4895c:	81800315 	stw	r6,12(r16)
   48960:	80800215 	stw	r2,8(r16)
   48964:	34000215 	stw	r16,8(r6)
   48968:	14000315 	stw	r16,12(r2)
   4896c:	003f2706 	br	4860c <__alt_data_end+0xfffe150c>
   48970:	88c00054 	ori	r3,r17,1
   48974:	80c00115 	stw	r3,4(r16)
   48978:	8463883a 	add	r17,r16,r17
   4897c:	34400515 	stw	r17,20(r6)
   48980:	34400415 	stw	r17,16(r6)
   48984:	10c00054 	ori	r3,r2,1
   48988:	8a400315 	stw	r9,12(r17)
   4898c:	8a400215 	stw	r9,8(r17)
   48990:	88c00115 	stw	r3,4(r17)
   48994:	88a3883a 	add	r17,r17,r2
   48998:	88800015 	stw	r2,0(r17)
   4899c:	9009883a 	mov	r4,r18
   489a0:	00550f40 	call	550f4 <__malloc_unlock>
   489a4:	80800204 	addi	r2,r16,8
   489a8:	003ecb06 	br	484d8 <__alt_data_end+0xfffe13d8>
   489ac:	31000117 	ldw	r4,4(r6)
   489b0:	003f1606 	br	4860c <__alt_data_end+0xfffe150c>
   489b4:	63000044 	addi	r12,r12,1
   489b8:	608000cc 	andi	r2,r12,3
   489bc:	5ac00204 	addi	r11,r11,8
   489c0:	103f2a1e 	bne	r2,zero,4866c <__alt_data_end+0xfffe156c>
   489c4:	00002106 	br	48a4c <_malloc_r+0x628>
   489c8:	80800204 	addi	r2,r16,8
   489cc:	84000517 	ldw	r16,20(r16)
   489d0:	143eb31e 	bne	r2,r16,484a0 <__alt_data_end+0xfffe13a0>
   489d4:	18c00084 	addi	r3,r3,2
   489d8:	003eec06 	br	4858c <__alt_data_end+0xfffe148c>
   489dc:	8085883a 	add	r2,r16,r2
   489e0:	10c00117 	ldw	r3,4(r2)
   489e4:	81000317 	ldw	r4,12(r16)
   489e8:	81400217 	ldw	r5,8(r16)
   489ec:	18c00054 	ori	r3,r3,1
   489f0:	10c00115 	stw	r3,4(r2)
   489f4:	29000315 	stw	r4,12(r5)
   489f8:	21400215 	stw	r5,8(r4)
   489fc:	9009883a 	mov	r4,r18
   48a00:	00550f40 	call	550f4 <__malloc_unlock>
   48a04:	80800204 	addi	r2,r16,8
   48a08:	003eb306 	br	484d8 <__alt_data_end+0xfffe13d8>
   48a0c:	19c016c4 	addi	r7,r3,91
   48a10:	39cb883a 	add	r5,r7,r7
   48a14:	003ec706 	br	48534 <__alt_data_end+0xfffe1434>
   48a18:	3804d1ba 	srli	r2,r7,6
   48a1c:	11000e04 	addi	r4,r2,56
   48a20:	210b883a 	add	r5,r4,r4
   48a24:	003fbe06 	br	48920 <__alt_data_end+0xfffe1820>
   48a28:	84ff5d26 	beq	r16,r19,487a0 <__alt_data_end+0xfffe16a0>
   48a2c:	9c000217 	ldw	r16,8(r19)
   48a30:	00bfff04 	movi	r2,-4
   48a34:	80c00117 	ldw	r3,4(r16)
   48a38:	1886703a 	and	r3,r3,r2
   48a3c:	003f9706 	br	4889c <__alt_data_end+0xfffe179c>
   48a40:	52800017 	ldw	r10,0(r10)
   48a44:	18ffffc4 	addi	r3,r3,-1
   48a48:	50805c1e 	bne	r10,r2,48bbc <_malloc_r+0x798>
   48a4c:	190000cc 	andi	r4,r3,3
   48a50:	50bffe04 	addi	r2,r10,-8
   48a54:	203ffa1e 	bne	r4,zero,48a40 <__alt_data_end+0xfffe1940>
   48a58:	98800117 	ldw	r2,4(r19)
   48a5c:	0146303a 	nor	r3,zero,r5
   48a60:	1884703a 	and	r2,r3,r2
   48a64:	98800115 	stw	r2,4(r19)
   48a68:	294b883a 	add	r5,r5,r5
   48a6c:	117f2e36 	bltu	r2,r5,48728 <__alt_data_end+0xfffe1628>
   48a70:	283f2d26 	beq	r5,zero,48728 <__alt_data_end+0xfffe1628>
   48a74:	1146703a 	and	r3,r2,r5
   48a78:	1800521e 	bne	r3,zero,48bc4 <_malloc_r+0x7a0>
   48a7c:	6007883a 	mov	r3,r12
   48a80:	294b883a 	add	r5,r5,r5
   48a84:	1148703a 	and	r4,r2,r5
   48a88:	18c00104 	addi	r3,r3,4
   48a8c:	203ffc26 	beq	r4,zero,48a80 <__alt_data_end+0xfffe1980>
   48a90:	003ef006 	br	48654 <__alt_data_end+0xfffe1554>
   48a94:	00805504 	movi	r2,340
   48a98:	10c01336 	bltu	r2,r3,48ae8 <_malloc_r+0x6c4>
   48a9c:	8806d3fa 	srli	r3,r17,15
   48aa0:	19c01dc4 	addi	r7,r3,119
   48aa4:	39cb883a 	add	r5,r7,r7
   48aa8:	003ea206 	br	48534 <__alt_data_end+0xfffe1434>
   48aac:	00c40004 	movi	r3,4096
   48ab0:	003f4d06 	br	487e8 <__alt_data_end+0xfffe16e8>
   48ab4:	00800044 	movi	r2,1
   48ab8:	a0800115 	stw	r2,4(r20)
   48abc:	a021883a 	mov	r16,r20
   48ac0:	0007883a 	mov	r3,zero
   48ac4:	003f7506 	br	4889c <__alt_data_end+0xfffe179c>
   48ac8:	200bd0ba 	srai	r5,r4,2
   48acc:	01800044 	movi	r6,1
   48ad0:	41000117 	ldw	r4,4(r8)
   48ad4:	314a983a 	sll	r5,r6,r5
   48ad8:	100d883a 	mov	r6,r2
   48adc:	2908b03a 	or	r4,r5,r4
   48ae0:	41000115 	stw	r4,4(r8)
   48ae4:	003f9d06 	br	4895c <__alt_data_end+0xfffe185c>
   48ae8:	00815504 	movi	r2,1364
   48aec:	10c01336 	bltu	r2,r3,48b3c <_malloc_r+0x718>
   48af0:	8806d4ba 	srli	r3,r17,18
   48af4:	19c01f04 	addi	r7,r3,124
   48af8:	39cb883a 	add	r5,r7,r7
   48afc:	003e8d06 	br	48534 <__alt_data_end+0xfffe1434>
   48b00:	ad400404 	addi	r21,r21,16
   48b04:	003f1d06 	br	4877c <__alt_data_end+0xfffe167c>
   48b08:	01001504 	movi	r4,84
   48b0c:	20801c36 	bltu	r4,r2,48b80 <_malloc_r+0x75c>
   48b10:	3804d33a 	srli	r2,r7,12
   48b14:	11001b84 	addi	r4,r2,110
   48b18:	210b883a 	add	r5,r4,r4
   48b1c:	003f8006 	br	48920 <__alt_data_end+0xfffe1820>
   48b20:	3083ffcc 	andi	r2,r6,4095
   48b24:	103f241e 	bne	r2,zero,487b8 <__alt_data_end+0xfffe16b8>
   48b28:	99000217 	ldw	r4,8(r19)
   48b2c:	ad85883a 	add	r2,r21,r22
   48b30:	10800054 	ori	r2,r2,1
   48b34:	20800115 	stw	r2,4(r4)
   48b38:	003f4a06 	br	48864 <__alt_data_end+0xfffe1764>
   48b3c:	01403f04 	movi	r5,252
   48b40:	01c01f84 	movi	r7,126
   48b44:	003e7b06 	br	48534 <__alt_data_end+0xfffe1434>
   48b48:	00c00044 	movi	r3,1
   48b4c:	002b883a 	mov	r21,zero
   48b50:	003f3006 	br	48814 <__alt_data_end+0xfffe1714>
   48b54:	008001b4 	movhi	r2,6
   48b58:	10b33104 	addi	r2,r2,-13116
   48b5c:	15000015 	stw	r20,0(r2)
   48b60:	003f1b06 	br	487d0 <__alt_data_end+0xfffe16d0>
   48b64:	9009883a 	mov	r4,r18
   48b68:	81400204 	addi	r5,r16,8
   48b6c:	004d81c0 	call	4d81c <_free_r>
   48b70:	008001b4 	movhi	r2,6
   48b74:	10ba2904 	addi	r2,r2,-5980
   48b78:	10c00017 	ldw	r3,0(r2)
   48b7c:	003f3906 	br	48864 <__alt_data_end+0xfffe1764>
   48b80:	01005504 	movi	r4,340
   48b84:	20800436 	bltu	r4,r2,48b98 <_malloc_r+0x774>
   48b88:	3804d3fa 	srli	r2,r7,15
   48b8c:	11001dc4 	addi	r4,r2,119
   48b90:	210b883a 	add	r5,r4,r4
   48b94:	003f6206 	br	48920 <__alt_data_end+0xfffe1820>
   48b98:	01015504 	movi	r4,1364
   48b9c:	20800436 	bltu	r4,r2,48bb0 <_malloc_r+0x78c>
   48ba0:	3804d4ba 	srli	r2,r7,18
   48ba4:	11001f04 	addi	r4,r2,124
   48ba8:	210b883a 	add	r5,r4,r4
   48bac:	003f5c06 	br	48920 <__alt_data_end+0xfffe1820>
   48bb0:	01403f04 	movi	r5,252
   48bb4:	01001f84 	movi	r4,126
   48bb8:	003f5906 	br	48920 <__alt_data_end+0xfffe1820>
   48bbc:	98800117 	ldw	r2,4(r19)
   48bc0:	003fa906 	br	48a68 <__alt_data_end+0xfffe1968>
   48bc4:	6007883a 	mov	r3,r12
   48bc8:	003ea206 	br	48654 <__alt_data_end+0xfffe1554>

00048bcc <memchr>:
   48bcc:	208000cc 	andi	r2,r4,3
   48bd0:	280f883a 	mov	r7,r5
   48bd4:	10003526 	beq	r2,zero,48cac <memchr+0xe0>
   48bd8:	30bfffc4 	addi	r2,r6,-1
   48bdc:	30001b26 	beq	r6,zero,48c4c <memchr+0x80>
   48be0:	21800003 	ldbu	r6,0(r4)
   48be4:	28c03fcc 	andi	r3,r5,255
   48be8:	30c01a26 	beq	r6,r3,48c54 <memchr+0x88>
   48bec:	180d883a 	mov	r6,r3
   48bf0:	00000406 	br	48c04 <memchr+0x38>
   48bf4:	10001526 	beq	r2,zero,48c4c <memchr+0x80>
   48bf8:	20c00003 	ldbu	r3,0(r4)
   48bfc:	10bfffc4 	addi	r2,r2,-1
   48c00:	19801426 	beq	r3,r6,48c54 <memchr+0x88>
   48c04:	21000044 	addi	r4,r4,1
   48c08:	20c000cc 	andi	r3,r4,3
   48c0c:	183ff91e 	bne	r3,zero,48bf4 <__alt_data_end+0xfffe1af4>
   48c10:	024000c4 	movi	r9,3
   48c14:	48801136 	bltu	r9,r2,48c5c <memchr+0x90>
   48c18:	10000c26 	beq	r2,zero,48c4c <memchr+0x80>
   48c1c:	20c00003 	ldbu	r3,0(r4)
   48c20:	29403fcc 	andi	r5,r5,255
   48c24:	19400b26 	beq	r3,r5,48c54 <memchr+0x88>
   48c28:	20c00044 	addi	r3,r4,1
   48c2c:	2085883a 	add	r2,r4,r2
   48c30:	39803fcc 	andi	r6,r7,255
   48c34:	00000306 	br	48c44 <memchr+0x78>
   48c38:	18c00044 	addi	r3,r3,1
   48c3c:	197fffc3 	ldbu	r5,-1(r3)
   48c40:	29800426 	beq	r5,r6,48c54 <memchr+0x88>
   48c44:	1809883a 	mov	r4,r3
   48c48:	18bffb1e 	bne	r3,r2,48c38 <__alt_data_end+0xfffe1b38>
   48c4c:	0005883a 	mov	r2,zero
   48c50:	f800283a 	ret
   48c54:	2005883a 	mov	r2,r4
   48c58:	f800283a 	ret
   48c5c:	28c03fcc 	andi	r3,r5,255
   48c60:	1810923a 	slli	r8,r3,8
   48c64:	02ffbff4 	movhi	r11,65279
   48c68:	02a02074 	movhi	r10,32897
   48c6c:	40c6b03a 	or	r3,r8,r3
   48c70:	1810943a 	slli	r8,r3,16
   48c74:	5affbfc4 	addi	r11,r11,-257
   48c78:	52a02004 	addi	r10,r10,-32640
   48c7c:	40d0b03a 	or	r8,r8,r3
   48c80:	20c00017 	ldw	r3,0(r4)
   48c84:	40c6f03a 	xor	r3,r8,r3
   48c88:	1acd883a 	add	r6,r3,r11
   48c8c:	00c6303a 	nor	r3,zero,r3
   48c90:	30c6703a 	and	r3,r6,r3
   48c94:	1a86703a 	and	r3,r3,r10
   48c98:	183fdf1e 	bne	r3,zero,48c18 <__alt_data_end+0xfffe1b18>
   48c9c:	10bfff04 	addi	r2,r2,-4
   48ca0:	21000104 	addi	r4,r4,4
   48ca4:	48bff636 	bltu	r9,r2,48c80 <__alt_data_end+0xfffe1b80>
   48ca8:	003fdb06 	br	48c18 <__alt_data_end+0xfffe1b18>
   48cac:	3005883a 	mov	r2,r6
   48cb0:	003fd706 	br	48c10 <__alt_data_end+0xfffe1b10>

00048cb4 <memcmp>:
   48cb4:	01c000c4 	movi	r7,3
   48cb8:	3980192e 	bgeu	r7,r6,48d20 <memcmp+0x6c>
   48cbc:	2144b03a 	or	r2,r4,r5
   48cc0:	11c4703a 	and	r2,r2,r7
   48cc4:	10000f26 	beq	r2,zero,48d04 <memcmp+0x50>
   48cc8:	20800003 	ldbu	r2,0(r4)
   48ccc:	28c00003 	ldbu	r3,0(r5)
   48cd0:	10c0151e 	bne	r2,r3,48d28 <memcmp+0x74>
   48cd4:	31bfff84 	addi	r6,r6,-2
   48cd8:	01ffffc4 	movi	r7,-1
   48cdc:	00000406 	br	48cf0 <memcmp+0x3c>
   48ce0:	20800003 	ldbu	r2,0(r4)
   48ce4:	28c00003 	ldbu	r3,0(r5)
   48ce8:	31bfffc4 	addi	r6,r6,-1
   48cec:	10c00e1e 	bne	r2,r3,48d28 <memcmp+0x74>
   48cf0:	21000044 	addi	r4,r4,1
   48cf4:	29400044 	addi	r5,r5,1
   48cf8:	31fff91e 	bne	r6,r7,48ce0 <__alt_data_end+0xfffe1be0>
   48cfc:	0005883a 	mov	r2,zero
   48d00:	f800283a 	ret
   48d04:	20c00017 	ldw	r3,0(r4)
   48d08:	28800017 	ldw	r2,0(r5)
   48d0c:	1880041e 	bne	r3,r2,48d20 <memcmp+0x6c>
   48d10:	31bfff04 	addi	r6,r6,-4
   48d14:	21000104 	addi	r4,r4,4
   48d18:	29400104 	addi	r5,r5,4
   48d1c:	39bff936 	bltu	r7,r6,48d04 <__alt_data_end+0xfffe1c04>
   48d20:	303fe91e 	bne	r6,zero,48cc8 <__alt_data_end+0xfffe1bc8>
   48d24:	003ff506 	br	48cfc <__alt_data_end+0xfffe1bfc>
   48d28:	10c5c83a 	sub	r2,r2,r3
   48d2c:	f800283a 	ret

00048d30 <memcpy>:
   48d30:	deffff04 	addi	sp,sp,-4
   48d34:	dc000015 	stw	r16,0(sp)
   48d38:	00c003c4 	movi	r3,15
   48d3c:	2005883a 	mov	r2,r4
   48d40:	1980432e 	bgeu	r3,r6,48e50 <memcpy+0x120>
   48d44:	2146b03a 	or	r3,r4,r5
   48d48:	18c000cc 	andi	r3,r3,3
   48d4c:	1800421e 	bne	r3,zero,48e58 <memcpy+0x128>
   48d50:	343ffc04 	addi	r16,r6,-16
   48d54:	8020d13a 	srli	r16,r16,4
   48d58:	28c00104 	addi	r3,r5,4
   48d5c:	23400104 	addi	r13,r4,4
   48d60:	801e913a 	slli	r15,r16,4
   48d64:	2b000204 	addi	r12,r5,8
   48d68:	22c00204 	addi	r11,r4,8
   48d6c:	7bc00504 	addi	r15,r15,20
   48d70:	2a800304 	addi	r10,r5,12
   48d74:	22400304 	addi	r9,r4,12
   48d78:	2bdf883a 	add	r15,r5,r15
   48d7c:	2811883a 	mov	r8,r5
   48d80:	200f883a 	mov	r7,r4
   48d84:	41000017 	ldw	r4,0(r8)
   48d88:	39c00404 	addi	r7,r7,16
   48d8c:	18c00404 	addi	r3,r3,16
   48d90:	393ffc15 	stw	r4,-16(r7)
   48d94:	1bbffc17 	ldw	r14,-16(r3)
   48d98:	6b400404 	addi	r13,r13,16
   48d9c:	5ac00404 	addi	r11,r11,16
   48da0:	6bbffc15 	stw	r14,-16(r13)
   48da4:	63800017 	ldw	r14,0(r12)
   48da8:	4a400404 	addi	r9,r9,16
   48dac:	42000404 	addi	r8,r8,16
   48db0:	5bbffc15 	stw	r14,-16(r11)
   48db4:	53800017 	ldw	r14,0(r10)
   48db8:	63000404 	addi	r12,r12,16
   48dbc:	52800404 	addi	r10,r10,16
   48dc0:	4bbffc15 	stw	r14,-16(r9)
   48dc4:	1bffef1e 	bne	r3,r15,48d84 <__alt_data_end+0xfffe1c84>
   48dc8:	81c00044 	addi	r7,r16,1
   48dcc:	380e913a 	slli	r7,r7,4
   48dd0:	310003cc 	andi	r4,r6,15
   48dd4:	02c000c4 	movi	r11,3
   48dd8:	11c7883a 	add	r3,r2,r7
   48ddc:	29cb883a 	add	r5,r5,r7
   48de0:	59001f2e 	bgeu	r11,r4,48e60 <memcpy+0x130>
   48de4:	1813883a 	mov	r9,r3
   48de8:	2811883a 	mov	r8,r5
   48dec:	200f883a 	mov	r7,r4
   48df0:	42800017 	ldw	r10,0(r8)
   48df4:	4a400104 	addi	r9,r9,4
   48df8:	39ffff04 	addi	r7,r7,-4
   48dfc:	4abfff15 	stw	r10,-4(r9)
   48e00:	42000104 	addi	r8,r8,4
   48e04:	59fffa36 	bltu	r11,r7,48df0 <__alt_data_end+0xfffe1cf0>
   48e08:	213fff04 	addi	r4,r4,-4
   48e0c:	2008d0ba 	srli	r4,r4,2
   48e10:	318000cc 	andi	r6,r6,3
   48e14:	21000044 	addi	r4,r4,1
   48e18:	2109883a 	add	r4,r4,r4
   48e1c:	2109883a 	add	r4,r4,r4
   48e20:	1907883a 	add	r3,r3,r4
   48e24:	290b883a 	add	r5,r5,r4
   48e28:	30000626 	beq	r6,zero,48e44 <memcpy+0x114>
   48e2c:	198d883a 	add	r6,r3,r6
   48e30:	29c00003 	ldbu	r7,0(r5)
   48e34:	18c00044 	addi	r3,r3,1
   48e38:	29400044 	addi	r5,r5,1
   48e3c:	19ffffc5 	stb	r7,-1(r3)
   48e40:	19bffb1e 	bne	r3,r6,48e30 <__alt_data_end+0xfffe1d30>
   48e44:	dc000017 	ldw	r16,0(sp)
   48e48:	dec00104 	addi	sp,sp,4
   48e4c:	f800283a 	ret
   48e50:	2007883a 	mov	r3,r4
   48e54:	003ff406 	br	48e28 <__alt_data_end+0xfffe1d28>
   48e58:	2007883a 	mov	r3,r4
   48e5c:	003ff306 	br	48e2c <__alt_data_end+0xfffe1d2c>
   48e60:	200d883a 	mov	r6,r4
   48e64:	003ff006 	br	48e28 <__alt_data_end+0xfffe1d28>

00048e68 <memset>:
   48e68:	20c000cc 	andi	r3,r4,3
   48e6c:	2005883a 	mov	r2,r4
   48e70:	18004326 	beq	r3,zero,48f80 <memset+0x118>
   48e74:	31ffffc4 	addi	r7,r6,-1
   48e78:	30004026 	beq	r6,zero,48f7c <memset+0x114>
   48e7c:	2813883a 	mov	r9,r5
   48e80:	200d883a 	mov	r6,r4
   48e84:	2007883a 	mov	r3,r4
   48e88:	00000406 	br	48e9c <memset+0x34>
   48e8c:	3a3fffc4 	addi	r8,r7,-1
   48e90:	31800044 	addi	r6,r6,1
   48e94:	38003926 	beq	r7,zero,48f7c <memset+0x114>
   48e98:	400f883a 	mov	r7,r8
   48e9c:	18c00044 	addi	r3,r3,1
   48ea0:	32400005 	stb	r9,0(r6)
   48ea4:	1a0000cc 	andi	r8,r3,3
   48ea8:	403ff81e 	bne	r8,zero,48e8c <__alt_data_end+0xfffe1d8c>
   48eac:	010000c4 	movi	r4,3
   48eb0:	21c02d2e 	bgeu	r4,r7,48f68 <memset+0x100>
   48eb4:	29803fcc 	andi	r6,r5,255
   48eb8:	3008923a 	slli	r4,r6,8
   48ebc:	218cb03a 	or	r6,r4,r6
   48ec0:	3008943a 	slli	r4,r6,16
   48ec4:	218cb03a 	or	r6,r4,r6
   48ec8:	010003c4 	movi	r4,15
   48ecc:	21c0182e 	bgeu	r4,r7,48f30 <memset+0xc8>
   48ed0:	3b3ffc04 	addi	r12,r7,-16
   48ed4:	6018d13a 	srli	r12,r12,4
   48ed8:	1a000104 	addi	r8,r3,4
   48edc:	1ac00204 	addi	r11,r3,8
   48ee0:	6008913a 	slli	r4,r12,4
   48ee4:	1a800304 	addi	r10,r3,12
   48ee8:	1813883a 	mov	r9,r3
   48eec:	21000504 	addi	r4,r4,20
   48ef0:	1909883a 	add	r4,r3,r4
   48ef4:	49800015 	stw	r6,0(r9)
   48ef8:	41800015 	stw	r6,0(r8)
   48efc:	59800015 	stw	r6,0(r11)
   48f00:	51800015 	stw	r6,0(r10)
   48f04:	42000404 	addi	r8,r8,16
   48f08:	4a400404 	addi	r9,r9,16
   48f0c:	5ac00404 	addi	r11,r11,16
   48f10:	52800404 	addi	r10,r10,16
   48f14:	413ff71e 	bne	r8,r4,48ef4 <__alt_data_end+0xfffe1df4>
   48f18:	63000044 	addi	r12,r12,1
   48f1c:	6018913a 	slli	r12,r12,4
   48f20:	39c003cc 	andi	r7,r7,15
   48f24:	010000c4 	movi	r4,3
   48f28:	1b07883a 	add	r3,r3,r12
   48f2c:	21c00e2e 	bgeu	r4,r7,48f68 <memset+0x100>
   48f30:	1813883a 	mov	r9,r3
   48f34:	3811883a 	mov	r8,r7
   48f38:	010000c4 	movi	r4,3
   48f3c:	49800015 	stw	r6,0(r9)
   48f40:	423fff04 	addi	r8,r8,-4
   48f44:	4a400104 	addi	r9,r9,4
   48f48:	223ffc36 	bltu	r4,r8,48f3c <__alt_data_end+0xfffe1e3c>
   48f4c:	393fff04 	addi	r4,r7,-4
   48f50:	2008d0ba 	srli	r4,r4,2
   48f54:	39c000cc 	andi	r7,r7,3
   48f58:	21000044 	addi	r4,r4,1
   48f5c:	2109883a 	add	r4,r4,r4
   48f60:	2109883a 	add	r4,r4,r4
   48f64:	1907883a 	add	r3,r3,r4
   48f68:	38000426 	beq	r7,zero,48f7c <memset+0x114>
   48f6c:	19cf883a 	add	r7,r3,r7
   48f70:	19400005 	stb	r5,0(r3)
   48f74:	18c00044 	addi	r3,r3,1
   48f78:	19fffd1e 	bne	r3,r7,48f70 <__alt_data_end+0xfffe1e70>
   48f7c:	f800283a 	ret
   48f80:	2007883a 	mov	r3,r4
   48f84:	300f883a 	mov	r7,r6
   48f88:	003fc806 	br	48eac <__alt_data_end+0xfffe1dac>

00048f8c <_printf_r>:
   48f8c:	defffd04 	addi	sp,sp,-12
   48f90:	dfc00015 	stw	ra,0(sp)
   48f94:	d9800115 	stw	r6,4(sp)
   48f98:	d9c00215 	stw	r7,8(sp)
   48f9c:	280d883a 	mov	r6,r5
   48fa0:	21400217 	ldw	r5,8(r4)
   48fa4:	d9c00104 	addi	r7,sp,4
   48fa8:	00498640 	call	49864 <___vfprintf_internal_r>
   48fac:	dfc00017 	ldw	ra,0(sp)
   48fb0:	dec00304 	addi	sp,sp,12
   48fb4:	f800283a 	ret

00048fb8 <printf>:
   48fb8:	defffc04 	addi	sp,sp,-16
   48fbc:	dfc00015 	stw	ra,0(sp)
   48fc0:	d9400115 	stw	r5,4(sp)
   48fc4:	d9800215 	stw	r6,8(sp)
   48fc8:	d9c00315 	stw	r7,12(sp)
   48fcc:	008001b4 	movhi	r2,6
   48fd0:	10b33004 	addi	r2,r2,-13120
   48fd4:	10800017 	ldw	r2,0(r2)
   48fd8:	200b883a 	mov	r5,r4
   48fdc:	d9800104 	addi	r6,sp,4
   48fe0:	11000217 	ldw	r4,8(r2)
   48fe4:	004b8600 	call	4b860 <__vfprintf_internal>
   48fe8:	dfc00017 	ldw	ra,0(sp)
   48fec:	dec00404 	addi	sp,sp,16
   48ff0:	f800283a 	ret

00048ff4 <_putchar_r>:
   48ff4:	21800217 	ldw	r6,8(r4)
   48ff8:	004f38c1 	jmpi	4f38c <_putc_r>

00048ffc <putchar>:
   48ffc:	008001b4 	movhi	r2,6
   49000:	10b33004 	addi	r2,r2,-13120
   49004:	200b883a 	mov	r5,r4
   49008:	11000017 	ldw	r4,0(r2)
   4900c:	21800217 	ldw	r6,8(r4)
   49010:	004f38c1 	jmpi	4f38c <_putc_r>

00049014 <_puts_r>:
   49014:	defff604 	addi	sp,sp,-40
   49018:	dc000715 	stw	r16,28(sp)
   4901c:	2021883a 	mov	r16,r4
   49020:	2809883a 	mov	r4,r5
   49024:	dc400815 	stw	r17,32(sp)
   49028:	dfc00915 	stw	ra,36(sp)
   4902c:	2823883a 	mov	r17,r5
   49030:	00494340 	call	49434 <strlen>
   49034:	00c001b4 	movhi	r3,6
   49038:	18f33004 	addi	r3,r3,-13120
   4903c:	18c00017 	ldw	r3,0(r3)
   49040:	11000044 	addi	r4,r2,1
   49044:	d8800115 	stw	r2,4(sp)
   49048:	18c00217 	ldw	r3,8(r3)
   4904c:	014001b4 	movhi	r5,6
   49050:	296a2304 	addi	r5,r5,-22388
   49054:	1880030b 	ldhu	r2,12(r3)
   49058:	d9400215 	stw	r5,8(sp)
   4905c:	d9000615 	stw	r4,24(sp)
   49060:	01400044 	movi	r5,1
   49064:	01000084 	movi	r4,2
   49068:	d9000515 	stw	r4,20(sp)
   4906c:	dc400015 	stw	r17,0(sp)
   49070:	d9400315 	stw	r5,12(sp)
   49074:	dec00415 	stw	sp,16(sp)
   49078:	1108000c 	andi	r4,r2,8192
   4907c:	2000061e 	bne	r4,zero,49098 <_puts_r+0x84>
   49080:	19401917 	ldw	r5,100(r3)
   49084:	0137ffc4 	movi	r4,-8193
   49088:	10880014 	ori	r2,r2,8192
   4908c:	2908703a 	and	r4,r5,r4
   49090:	1880030d 	sth	r2,12(r3)
   49094:	19001915 	stw	r4,100(r3)
   49098:	81400217 	ldw	r5,8(r16)
   4909c:	8009883a 	mov	r4,r16
   490a0:	d9800404 	addi	r6,sp,16
   490a4:	004db0c0 	call	4db0c <__sfvwrite_r>
   490a8:	1000061e 	bne	r2,zero,490c4 <_puts_r+0xb0>
   490ac:	00800284 	movi	r2,10
   490b0:	dfc00917 	ldw	ra,36(sp)
   490b4:	dc400817 	ldw	r17,32(sp)
   490b8:	dc000717 	ldw	r16,28(sp)
   490bc:	dec00a04 	addi	sp,sp,40
   490c0:	f800283a 	ret
   490c4:	00bfffc4 	movi	r2,-1
   490c8:	003ff906 	br	490b0 <__alt_data_end+0xfffe1fb0>

000490cc <puts>:
   490cc:	008001b4 	movhi	r2,6
   490d0:	10b33004 	addi	r2,r2,-13120
   490d4:	200b883a 	mov	r5,r4
   490d8:	11000017 	ldw	r4,0(r2)
   490dc:	00490141 	jmpi	49014 <_puts_r>

000490e0 <lflush>:
   490e0:	2080030b 	ldhu	r2,12(r4)
   490e4:	00c00244 	movi	r3,9
   490e8:	1080024c 	andi	r2,r2,9
   490ec:	10c00226 	beq	r2,r3,490f8 <lflush+0x18>
   490f0:	0005883a 	mov	r2,zero
   490f4:	f800283a 	ret
   490f8:	004d6c81 	jmpi	4d6c8 <fflush>

000490fc <__srefill_r>:
   490fc:	defffd04 	addi	sp,sp,-12
   49100:	dc400115 	stw	r17,4(sp)
   49104:	dc000015 	stw	r16,0(sp)
   49108:	dfc00215 	stw	ra,8(sp)
   4910c:	2023883a 	mov	r17,r4
   49110:	2821883a 	mov	r16,r5
   49114:	20000226 	beq	r4,zero,49120 <__srefill_r+0x24>
   49118:	20800e17 	ldw	r2,56(r4)
   4911c:	10003b26 	beq	r2,zero,4920c <__srefill_r+0x110>
   49120:	80c0030b 	ldhu	r3,12(r16)
   49124:	1908000c 	andi	r4,r3,8192
   49128:	1805883a 	mov	r2,r3
   4912c:	2000071e 	bne	r4,zero,4914c <__srefill_r+0x50>
   49130:	81001917 	ldw	r4,100(r16)
   49134:	18880014 	ori	r2,r3,8192
   49138:	00f7ffc4 	movi	r3,-8193
   4913c:	20c8703a 	and	r4,r4,r3
   49140:	8080030d 	sth	r2,12(r16)
   49144:	1007883a 	mov	r3,r2
   49148:	81001915 	stw	r4,100(r16)
   4914c:	80000115 	stw	zero,4(r16)
   49150:	1100080c 	andi	r4,r2,32
   49154:	20004d1e 	bne	r4,zero,4928c <__srefill_r+0x190>
   49158:	1100010c 	andi	r4,r2,4
   4915c:	20001e26 	beq	r4,zero,491d8 <__srefill_r+0xdc>
   49160:	81400c17 	ldw	r5,48(r16)
   49164:	28000826 	beq	r5,zero,49188 <__srefill_r+0x8c>
   49168:	80801004 	addi	r2,r16,64
   4916c:	28800226 	beq	r5,r2,49178 <__srefill_r+0x7c>
   49170:	8809883a 	mov	r4,r17
   49174:	004d81c0 	call	4d81c <_free_r>
   49178:	80800f17 	ldw	r2,60(r16)
   4917c:	80000c15 	stw	zero,48(r16)
   49180:	80800115 	stw	r2,4(r16)
   49184:	10002f1e 	bne	r2,zero,49244 <__srefill_r+0x148>
   49188:	80800417 	ldw	r2,16(r16)
   4918c:	10004126 	beq	r2,zero,49294 <__srefill_r+0x198>
   49190:	8080030b 	ldhu	r2,12(r16)
   49194:	108000cc 	andi	r2,r2,3
   49198:	10001e1e 	bne	r2,zero,49214 <__srefill_r+0x118>
   4919c:	81800417 	ldw	r6,16(r16)
   491a0:	80800817 	ldw	r2,32(r16)
   491a4:	81400717 	ldw	r5,28(r16)
   491a8:	81c00517 	ldw	r7,20(r16)
   491ac:	81800015 	stw	r6,0(r16)
   491b0:	8809883a 	mov	r4,r17
   491b4:	103ee83a 	callr	r2
   491b8:	80800115 	stw	r2,4(r16)
   491bc:	00800d0e 	bge	zero,r2,491f4 <__srefill_r+0xf8>
   491c0:	0005883a 	mov	r2,zero
   491c4:	dfc00217 	ldw	ra,8(sp)
   491c8:	dc400117 	ldw	r17,4(sp)
   491cc:	dc000017 	ldw	r16,0(sp)
   491d0:	dec00304 	addi	sp,sp,12
   491d4:	f800283a 	ret
   491d8:	1100040c 	andi	r4,r2,16
   491dc:	20002726 	beq	r4,zero,4927c <__srefill_r+0x180>
   491e0:	1080020c 	andi	r2,r2,8
   491e4:	10001b1e 	bne	r2,zero,49254 <__srefill_r+0x158>
   491e8:	18c00114 	ori	r3,r3,4
   491ec:	80c0030d 	sth	r3,12(r16)
   491f0:	003fe506 	br	49188 <__alt_data_end+0xfffe2088>
   491f4:	80c0030b 	ldhu	r3,12(r16)
   491f8:	10000d1e 	bne	r2,zero,49230 <__srefill_r+0x134>
   491fc:	18c00814 	ori	r3,r3,32
   49200:	00bfffc4 	movi	r2,-1
   49204:	80c0030d 	sth	r3,12(r16)
   49208:	003fee06 	br	491c4 <__alt_data_end+0xfffe20c4>
   4920c:	00482640 	call	48264 <__sinit>
   49210:	003fc306 	br	49120 <__alt_data_end+0xfffe2020>
   49214:	008001b4 	movhi	r2,6
   49218:	10b32f04 	addi	r2,r2,-13124
   4921c:	11000017 	ldw	r4,0(r2)
   49220:	01400174 	movhi	r5,5
   49224:	29643804 	addi	r5,r5,-28448
   49228:	00482b40 	call	482b4 <_fwalk>
   4922c:	003fdb06 	br	4919c <__alt_data_end+0xfffe209c>
   49230:	18c01014 	ori	r3,r3,64
   49234:	80000115 	stw	zero,4(r16)
   49238:	00bfffc4 	movi	r2,-1
   4923c:	80c0030d 	sth	r3,12(r16)
   49240:	003fe006 	br	491c4 <__alt_data_end+0xfffe20c4>
   49244:	80c00e17 	ldw	r3,56(r16)
   49248:	0005883a 	mov	r2,zero
   4924c:	80c00015 	stw	r3,0(r16)
   49250:	003fdc06 	br	491c4 <__alt_data_end+0xfffe20c4>
   49254:	8809883a 	mov	r4,r17
   49258:	800b883a 	mov	r5,r16
   4925c:	004d4a00 	call	4d4a0 <_fflush_r>
   49260:	10000a1e 	bne	r2,zero,4928c <__srefill_r+0x190>
   49264:	8080030b 	ldhu	r2,12(r16)
   49268:	00fffdc4 	movi	r3,-9
   4926c:	80000215 	stw	zero,8(r16)
   49270:	1886703a 	and	r3,r3,r2
   49274:	80000615 	stw	zero,24(r16)
   49278:	003fdb06 	br	491e8 <__alt_data_end+0xfffe20e8>
   4927c:	00800244 	movi	r2,9
   49280:	88800015 	stw	r2,0(r17)
   49284:	18c01014 	ori	r3,r3,64
   49288:	80c0030d 	sth	r3,12(r16)
   4928c:	00bfffc4 	movi	r2,-1
   49290:	003fcc06 	br	491c4 <__alt_data_end+0xfffe20c4>
   49294:	8809883a 	mov	r4,r17
   49298:	800b883a 	mov	r5,r16
   4929c:	004e0ec0 	call	4e0ec <__smakebuf_r>
   492a0:	003fbb06 	br	49190 <__alt_data_end+0xfffe2090>

000492a4 <_sbrk_r>:
   492a4:	defffd04 	addi	sp,sp,-12
   492a8:	dc000015 	stw	r16,0(sp)
   492ac:	040001b4 	movhi	r16,6
   492b0:	dc400115 	stw	r17,4(sp)
   492b4:	843a1e04 	addi	r16,r16,-6024
   492b8:	2023883a 	mov	r17,r4
   492bc:	2809883a 	mov	r4,r5
   492c0:	dfc00215 	stw	ra,8(sp)
   492c4:	80000015 	stw	zero,0(r16)
   492c8:	00552c00 	call	552c0 <sbrk>
   492cc:	00ffffc4 	movi	r3,-1
   492d0:	10c00526 	beq	r2,r3,492e8 <_sbrk_r+0x44>
   492d4:	dfc00217 	ldw	ra,8(sp)
   492d8:	dc400117 	ldw	r17,4(sp)
   492dc:	dc000017 	ldw	r16,0(sp)
   492e0:	dec00304 	addi	sp,sp,12
   492e4:	f800283a 	ret
   492e8:	80c00017 	ldw	r3,0(r16)
   492ec:	183ff926 	beq	r3,zero,492d4 <__alt_data_end+0xfffe21d4>
   492f0:	88c00015 	stw	r3,0(r17)
   492f4:	003ff706 	br	492d4 <__alt_data_end+0xfffe21d4>

000492f8 <__sread>:
   492f8:	defffe04 	addi	sp,sp,-8
   492fc:	dc000015 	stw	r16,0(sp)
   49300:	2821883a 	mov	r16,r5
   49304:	2940038f 	ldh	r5,14(r5)
   49308:	dfc00115 	stw	ra,4(sp)
   4930c:	004f4f40 	call	4f4f4 <_read_r>
   49310:	10000716 	blt	r2,zero,49330 <__sread+0x38>
   49314:	80c01417 	ldw	r3,80(r16)
   49318:	1887883a 	add	r3,r3,r2
   4931c:	80c01415 	stw	r3,80(r16)
   49320:	dfc00117 	ldw	ra,4(sp)
   49324:	dc000017 	ldw	r16,0(sp)
   49328:	dec00204 	addi	sp,sp,8
   4932c:	f800283a 	ret
   49330:	80c0030b 	ldhu	r3,12(r16)
   49334:	18fbffcc 	andi	r3,r3,61439
   49338:	80c0030d 	sth	r3,12(r16)
   4933c:	dfc00117 	ldw	ra,4(sp)
   49340:	dc000017 	ldw	r16,0(sp)
   49344:	dec00204 	addi	sp,sp,8
   49348:	f800283a 	ret

0004934c <__seofread>:
   4934c:	0005883a 	mov	r2,zero
   49350:	f800283a 	ret

00049354 <__swrite>:
   49354:	2880030b 	ldhu	r2,12(r5)
   49358:	defffb04 	addi	sp,sp,-20
   4935c:	dcc00315 	stw	r19,12(sp)
   49360:	dc800215 	stw	r18,8(sp)
   49364:	dc400115 	stw	r17,4(sp)
   49368:	dc000015 	stw	r16,0(sp)
   4936c:	dfc00415 	stw	ra,16(sp)
   49370:	10c0400c 	andi	r3,r2,256
   49374:	2821883a 	mov	r16,r5
   49378:	2027883a 	mov	r19,r4
   4937c:	3025883a 	mov	r18,r6
   49380:	3823883a 	mov	r17,r7
   49384:	18000526 	beq	r3,zero,4939c <__swrite+0x48>
   49388:	2940038f 	ldh	r5,14(r5)
   4938c:	000d883a 	mov	r6,zero
   49390:	01c00084 	movi	r7,2
   49394:	004e0900 	call	4e090 <_lseek_r>
   49398:	8080030b 	ldhu	r2,12(r16)
   4939c:	8140038f 	ldh	r5,14(r16)
   493a0:	10bbffcc 	andi	r2,r2,61439
   493a4:	9809883a 	mov	r4,r19
   493a8:	900d883a 	mov	r6,r18
   493ac:	880f883a 	mov	r7,r17
   493b0:	8080030d 	sth	r2,12(r16)
   493b4:	dfc00417 	ldw	ra,16(sp)
   493b8:	dcc00317 	ldw	r19,12(sp)
   493bc:	dc800217 	ldw	r18,8(sp)
   493c0:	dc400117 	ldw	r17,4(sp)
   493c4:	dc000017 	ldw	r16,0(sp)
   493c8:	dec00504 	addi	sp,sp,20
   493cc:	004b8841 	jmpi	4b884 <_write_r>

000493d0 <__sseek>:
   493d0:	defffe04 	addi	sp,sp,-8
   493d4:	dc000015 	stw	r16,0(sp)
   493d8:	2821883a 	mov	r16,r5
   493dc:	2940038f 	ldh	r5,14(r5)
   493e0:	dfc00115 	stw	ra,4(sp)
   493e4:	004e0900 	call	4e090 <_lseek_r>
   493e8:	00ffffc4 	movi	r3,-1
   493ec:	10c00826 	beq	r2,r3,49410 <__sseek+0x40>
   493f0:	80c0030b 	ldhu	r3,12(r16)
   493f4:	80801415 	stw	r2,80(r16)
   493f8:	18c40014 	ori	r3,r3,4096
   493fc:	80c0030d 	sth	r3,12(r16)
   49400:	dfc00117 	ldw	ra,4(sp)
   49404:	dc000017 	ldw	r16,0(sp)
   49408:	dec00204 	addi	sp,sp,8
   4940c:	f800283a 	ret
   49410:	80c0030b 	ldhu	r3,12(r16)
   49414:	18fbffcc 	andi	r3,r3,61439
   49418:	80c0030d 	sth	r3,12(r16)
   4941c:	dfc00117 	ldw	ra,4(sp)
   49420:	dc000017 	ldw	r16,0(sp)
   49424:	dec00204 	addi	sp,sp,8
   49428:	f800283a 	ret

0004942c <__sclose>:
   4942c:	2940038f 	ldh	r5,14(r5)
   49430:	004ba101 	jmpi	4ba10 <_close_r>

00049434 <strlen>:
   49434:	208000cc 	andi	r2,r4,3
   49438:	10002026 	beq	r2,zero,494bc <strlen+0x88>
   4943c:	20800007 	ldb	r2,0(r4)
   49440:	10002026 	beq	r2,zero,494c4 <strlen+0x90>
   49444:	2005883a 	mov	r2,r4
   49448:	00000206 	br	49454 <strlen+0x20>
   4944c:	10c00007 	ldb	r3,0(r2)
   49450:	18001826 	beq	r3,zero,494b4 <strlen+0x80>
   49454:	10800044 	addi	r2,r2,1
   49458:	10c000cc 	andi	r3,r2,3
   4945c:	183ffb1e 	bne	r3,zero,4944c <__alt_data_end+0xfffe234c>
   49460:	10c00017 	ldw	r3,0(r2)
   49464:	01ffbff4 	movhi	r7,65279
   49468:	39ffbfc4 	addi	r7,r7,-257
   4946c:	00ca303a 	nor	r5,zero,r3
   49470:	01a02074 	movhi	r6,32897
   49474:	19c7883a 	add	r3,r3,r7
   49478:	31a02004 	addi	r6,r6,-32640
   4947c:	1946703a 	and	r3,r3,r5
   49480:	1986703a 	and	r3,r3,r6
   49484:	1800091e 	bne	r3,zero,494ac <strlen+0x78>
   49488:	10800104 	addi	r2,r2,4
   4948c:	10c00017 	ldw	r3,0(r2)
   49490:	19cb883a 	add	r5,r3,r7
   49494:	00c6303a 	nor	r3,zero,r3
   49498:	28c6703a 	and	r3,r5,r3
   4949c:	1986703a 	and	r3,r3,r6
   494a0:	183ff926 	beq	r3,zero,49488 <__alt_data_end+0xfffe2388>
   494a4:	00000106 	br	494ac <strlen+0x78>
   494a8:	10800044 	addi	r2,r2,1
   494ac:	10c00007 	ldb	r3,0(r2)
   494b0:	183ffd1e 	bne	r3,zero,494a8 <__alt_data_end+0xfffe23a8>
   494b4:	1105c83a 	sub	r2,r2,r4
   494b8:	f800283a 	ret
   494bc:	2005883a 	mov	r2,r4
   494c0:	003fe706 	br	49460 <__alt_data_end+0xfffe2360>
   494c4:	0005883a 	mov	r2,zero
   494c8:	f800283a 	ret

000494cc <strncpy>:
   494cc:	2906b03a 	or	r3,r5,r4
   494d0:	18c000cc 	andi	r3,r3,3
   494d4:	2005883a 	mov	r2,r4
   494d8:	18002c1e 	bne	r3,zero,4958c <strncpy+0xc0>
   494dc:	010000c4 	movi	r4,3
   494e0:	21802a2e 	bgeu	r4,r6,4958c <strncpy+0xc0>
   494e4:	033fbff4 	movhi	r12,65279
   494e8:	02e02074 	movhi	r11,32897
   494ec:	633fbfc4 	addi	r12,r12,-257
   494f0:	5ae02004 	addi	r11,r11,-32640
   494f4:	100f883a 	mov	r7,r2
   494f8:	2a000017 	ldw	r8,0(r5)
   494fc:	3815883a 	mov	r10,r7
   49500:	0212303a 	nor	r9,zero,r8
   49504:	4307883a 	add	r3,r8,r12
   49508:	48c6703a 	and	r3,r9,r3
   4950c:	1ac6703a 	and	r3,r3,r11
   49510:	1800261e 	bne	r3,zero,495ac <strncpy+0xe0>
   49514:	39c00104 	addi	r7,r7,4
   49518:	52000015 	stw	r8,0(r10)
   4951c:	31bfff04 	addi	r6,r6,-4
   49520:	3811883a 	mov	r8,r7
   49524:	29400104 	addi	r5,r5,4
   49528:	21bff336 	bltu	r4,r6,494f8 <__alt_data_end+0xfffe23f8>
   4952c:	30001e26 	beq	r6,zero,495a8 <strncpy+0xdc>
   49530:	29c00003 	ldbu	r7,0(r5)
   49534:	31bfffc4 	addi	r6,r6,-1
   49538:	40c00044 	addi	r3,r8,1
   4953c:	41c00005 	stb	r7,0(r8)
   49540:	39c03fcc 	andi	r7,r7,255
   49544:	39c0201c 	xori	r7,r7,128
   49548:	39ffe004 	addi	r7,r7,-128
   4954c:	29400044 	addi	r5,r5,1
   49550:	38001026 	beq	r7,zero,49594 <strncpy+0xc8>
   49554:	1811883a 	mov	r8,r3
   49558:	00000906 	br	49580 <strncpy+0xb4>
   4955c:	29c00003 	ldbu	r7,0(r5)
   49560:	31bfffc4 	addi	r6,r6,-1
   49564:	29400044 	addi	r5,r5,1
   49568:	41c00005 	stb	r7,0(r8)
   4956c:	39c03fcc 	andi	r7,r7,255
   49570:	39c0201c 	xori	r7,r7,128
   49574:	39ffe004 	addi	r7,r7,-128
   49578:	1811883a 	mov	r8,r3
   4957c:	38000526 	beq	r7,zero,49594 <strncpy+0xc8>
   49580:	18c00044 	addi	r3,r3,1
   49584:	303ff51e 	bne	r6,zero,4955c <__alt_data_end+0xfffe245c>
   49588:	f800283a 	ret
   4958c:	1011883a 	mov	r8,r2
   49590:	003fe606 	br	4952c <__alt_data_end+0xfffe242c>
   49594:	30000726 	beq	r6,zero,495b4 <strncpy+0xe8>
   49598:	198d883a 	add	r6,r3,r6
   4959c:	18000005 	stb	zero,0(r3)
   495a0:	18c00044 	addi	r3,r3,1
   495a4:	19bffd1e 	bne	r3,r6,4959c <__alt_data_end+0xfffe249c>
   495a8:	f800283a 	ret
   495ac:	3811883a 	mov	r8,r7
   495b0:	003fde06 	br	4952c <__alt_data_end+0xfffe242c>
   495b4:	f800283a 	ret

000495b8 <_strtoul_r>:
   495b8:	008001b4 	movhi	r2,6
   495bc:	defff604 	addi	sp,sp,-40
   495c0:	10b33304 	addi	r2,r2,-13108
   495c4:	dc800315 	stw	r18,12(sp)
   495c8:	14800017 	ldw	r18,0(r2)
   495cc:	dd400615 	stw	r21,24(sp)
   495d0:	dd000515 	stw	r20,20(sp)
   495d4:	dcc00415 	stw	r19,16(sp)
   495d8:	dfc00915 	stw	ra,36(sp)
   495dc:	ddc00815 	stw	r23,32(sp)
   495e0:	dd800715 	stw	r22,28(sp)
   495e4:	dc400215 	stw	r17,8(sp)
   495e8:	dc000115 	stw	r16,4(sp)
   495ec:	2827883a 	mov	r19,r5
   495f0:	2029883a 	mov	r20,r4
   495f4:	382b883a 	mov	r21,r7
   495f8:	2813883a 	mov	r9,r5
   495fc:	4a000007 	ldb	r8,0(r9)
   49600:	4807883a 	mov	r3,r9
   49604:	4a400044 	addi	r9,r9,1
   49608:	9205883a 	add	r2,r18,r8
   4960c:	10800043 	ldbu	r2,1(r2)
   49610:	1080020c 	andi	r2,r2,8
   49614:	103ff91e 	bne	r2,zero,495fc <__alt_data_end+0xfffe24fc>
   49618:	00800b44 	movi	r2,45
   4961c:	4023883a 	mov	r17,r8
   49620:	4821883a 	mov	r16,r9
   49624:	40805426 	beq	r8,r2,49778 <_strtoul_r+0x1c0>
   49628:	00800ac4 	movi	r2,43
   4962c:	40805626 	beq	r8,r2,49788 <_strtoul_r+0x1d0>
   49630:	002f883a 	mov	r23,zero
   49634:	a8000e26 	beq	r21,zero,49670 <_strtoul_r+0xb8>
   49638:	00800404 	movi	r2,16
   4963c:	a8805626 	beq	r21,r2,49798 <_strtoul_r+0x1e0>
   49640:	013fffc4 	movi	r4,-1
   49644:	a80b883a 	mov	r5,r21
   49648:	d9800015 	stw	r6,0(sp)
   4964c:	0046db40 	call	46db4 <__udivsi3>
   49650:	013fffc4 	movi	r4,-1
   49654:	a80b883a 	mov	r5,r21
   49658:	102d883a 	mov	r22,r2
   4965c:	0046dbc0 	call	46dbc <__umodsi3>
   49660:	d9800017 	ldw	r6,0(sp)
   49664:	a819883a 	mov	r12,r21
   49668:	b00b883a 	mov	r5,r22
   4966c:	00000706 	br	4968c <_strtoul_r+0xd4>
   49670:	00800c04 	movi	r2,48
   49674:	88804f26 	beq	r17,r2,497b4 <_strtoul_r+0x1fc>
   49678:	05400284 	movi	r21,10
   4967c:	014666b4 	movhi	r5,6554
   49680:	00800144 	movi	r2,5
   49684:	29666644 	addi	r5,r5,-26215
   49688:	a819883a 	mov	r12,r21
   4968c:	9451883a 	add	r8,r18,r17
   49690:	42000043 	ldbu	r8,1(r8)
   49694:	8007883a 	mov	r3,r16
   49698:	0009883a 	mov	r4,zero
   4969c:	4240010c 	andi	r9,r8,4
   496a0:	0015883a 	mov	r10,zero
   496a4:	02c00044 	movi	r11,1
   496a8:	01ffffc4 	movi	r7,-1
   496ac:	48000e26 	beq	r9,zero,496e8 <_strtoul_r+0x130>
   496b0:	8a3ff404 	addi	r8,r17,-48
   496b4:	4540120e 	bge	r8,r21,49700 <_strtoul_r+0x148>
   496b8:	21c00526 	beq	r4,r7,496d0 <_strtoul_r+0x118>
   496bc:	2a802436 	bltu	r5,r10,49750 <_strtoul_r+0x198>
   496c0:	51402226 	beq	r10,r5,4974c <_strtoul_r+0x194>
   496c4:	5315383a 	mul	r10,r10,r12
   496c8:	01000044 	movi	r4,1
   496cc:	4295883a 	add	r10,r8,r10
   496d0:	1c400007 	ldb	r17,0(r3)
   496d4:	18c00044 	addi	r3,r3,1
   496d8:	9451883a 	add	r8,r18,r17
   496dc:	42000043 	ldbu	r8,1(r8)
   496e0:	4240010c 	andi	r9,r8,4
   496e4:	483ff21e 	bne	r9,zero,496b0 <__alt_data_end+0xfffe25b0>
   496e8:	420000cc 	andi	r8,r8,3
   496ec:	40000426 	beq	r8,zero,49700 <_strtoul_r+0x148>
   496f0:	42c01926 	beq	r8,r11,49758 <_strtoul_r+0x1a0>
   496f4:	024015c4 	movi	r9,87
   496f8:	8a51c83a 	sub	r8,r17,r9
   496fc:	457fee16 	blt	r8,r21,496b8 <__alt_data_end+0xfffe25b8>
   49700:	20001916 	blt	r4,zero,49768 <_strtoul_r+0x1b0>
   49704:	05c5c83a 	sub	r2,zero,r23
   49708:	5084f03a 	xor	r2,r10,r2
   4970c:	15c5883a 	add	r2,r2,r23
   49710:	30000326 	beq	r6,zero,49720 <_strtoul_r+0x168>
   49714:	20001226 	beq	r4,zero,49760 <_strtoul_r+0x1a8>
   49718:	197fffc4 	addi	r5,r3,-1
   4971c:	31400015 	stw	r5,0(r6)
   49720:	dfc00917 	ldw	ra,36(sp)
   49724:	ddc00817 	ldw	r23,32(sp)
   49728:	dd800717 	ldw	r22,28(sp)
   4972c:	dd400617 	ldw	r21,24(sp)
   49730:	dd000517 	ldw	r20,20(sp)
   49734:	dcc00417 	ldw	r19,16(sp)
   49738:	dc800317 	ldw	r18,12(sp)
   4973c:	dc400217 	ldw	r17,8(sp)
   49740:	dc000117 	ldw	r16,4(sp)
   49744:	dec00a04 	addi	sp,sp,40
   49748:	f800283a 	ret
   4974c:	123fdd0e 	bge	r2,r8,496c4 <__alt_data_end+0xfffe25c4>
   49750:	013fffc4 	movi	r4,-1
   49754:	003fde06 	br	496d0 <__alt_data_end+0xfffe25d0>
   49758:	02400dc4 	movi	r9,55
   4975c:	003fe606 	br	496f8 <__alt_data_end+0xfffe25f8>
   49760:	980b883a 	mov	r5,r19
   49764:	003fed06 	br	4971c <__alt_data_end+0xfffe261c>
   49768:	00800884 	movi	r2,34
   4976c:	a0800015 	stw	r2,0(r20)
   49770:	00bfffc4 	movi	r2,-1
   49774:	003fe606 	br	49710 <__alt_data_end+0xfffe2610>
   49778:	1c000084 	addi	r16,r3,2
   4977c:	1c400047 	ldb	r17,1(r3)
   49780:	05c00044 	movi	r23,1
   49784:	003fab06 	br	49634 <__alt_data_end+0xfffe2534>
   49788:	1c000084 	addi	r16,r3,2
   4978c:	1c400047 	ldb	r17,1(r3)
   49790:	002f883a 	mov	r23,zero
   49794:	003fa706 	br	49634 <__alt_data_end+0xfffe2534>
   49798:	00800c04 	movi	r2,48
   4979c:	88801b26 	beq	r17,r2,4980c <_strtoul_r+0x254>
   497a0:	01440034 	movhi	r5,4096
   497a4:	297fffc4 	addi	r5,r5,-1
   497a8:	008003c4 	movi	r2,15
   497ac:	a819883a 	mov	r12,r21
   497b0:	003fb606 	br	4968c <__alt_data_end+0xfffe258c>
   497b4:	80c00003 	ldbu	r3,0(r16)
   497b8:	00bff7c4 	movi	r2,-33
   497bc:	1884703a 	and	r2,r3,r2
   497c0:	10803fcc 	andi	r2,r2,255
   497c4:	1080201c 	xori	r2,r2,128
   497c8:	10bfe004 	addi	r2,r2,-128
   497cc:	00c01604 	movi	r3,88
   497d0:	10c00626 	beq	r2,r3,497ec <_strtoul_r+0x234>
   497d4:	05400204 	movi	r21,8
   497d8:	01480034 	movhi	r5,8192
   497dc:	008001c4 	movi	r2,7
   497e0:	297fffc4 	addi	r5,r5,-1
   497e4:	a819883a 	mov	r12,r21
   497e8:	003fa806 	br	4968c <__alt_data_end+0xfffe258c>
   497ec:	03000404 	movi	r12,16
   497f0:	05840034 	movhi	r22,4096
   497f4:	84400047 	ldb	r17,1(r16)
   497f8:	008003c4 	movi	r2,15
   497fc:	84000084 	addi	r16,r16,2
   49800:	b5bfffc4 	addi	r22,r22,-1
   49804:	602b883a 	mov	r21,r12
   49808:	003f9706 	br	49668 <__alt_data_end+0xfffe2568>
   4980c:	80c00003 	ldbu	r3,0(r16)
   49810:	00bff7c4 	movi	r2,-33
   49814:	1884703a 	and	r2,r3,r2
   49818:	10803fcc 	andi	r2,r2,255
   4981c:	1080201c 	xori	r2,r2,128
   49820:	10bfe004 	addi	r2,r2,-128
   49824:	00c01604 	movi	r3,88
   49828:	10fff026 	beq	r2,r3,497ec <__alt_data_end+0xfffe26ec>
   4982c:	01440034 	movhi	r5,4096
   49830:	008003c4 	movi	r2,15
   49834:	297fffc4 	addi	r5,r5,-1
   49838:	a819883a 	mov	r12,r21
   4983c:	003f9306 	br	4968c <__alt_data_end+0xfffe258c>

00049840 <strtoul>:
   49840:	2007883a 	mov	r3,r4
   49844:	010001b4 	movhi	r4,6
   49848:	21333004 	addi	r4,r4,-13120
   4984c:	21000017 	ldw	r4,0(r4)
   49850:	2805883a 	mov	r2,r5
   49854:	300f883a 	mov	r7,r6
   49858:	180b883a 	mov	r5,r3
   4985c:	100d883a 	mov	r6,r2
   49860:	00495b81 	jmpi	495b8 <_strtoul_r>

00049864 <___vfprintf_internal_r>:
   49864:	defeb604 	addi	sp,sp,-1320
   49868:	dfc14915 	stw	ra,1316(sp)
   4986c:	ddc14715 	stw	r23,1308(sp)
   49870:	dd814615 	stw	r22,1304(sp)
   49874:	282f883a 	mov	r23,r5
   49878:	202d883a 	mov	r22,r4
   4987c:	d9812a15 	stw	r6,1192(sp)
   49880:	d9c12d15 	stw	r7,1204(sp)
   49884:	df014815 	stw	fp,1312(sp)
   49888:	dd414515 	stw	r21,1300(sp)
   4988c:	dd014415 	stw	r20,1296(sp)
   49890:	dcc14315 	stw	r19,1292(sp)
   49894:	dc814215 	stw	r18,1288(sp)
   49898:	dc414115 	stw	r17,1284(sp)
   4989c:	dc014015 	stw	r16,1280(sp)
   498a0:	004e05c0 	call	4e05c <_localeconv_r>
   498a4:	10800017 	ldw	r2,0(r2)
   498a8:	1009883a 	mov	r4,r2
   498ac:	d8813515 	stw	r2,1236(sp)
   498b0:	00494340 	call	49434 <strlen>
   498b4:	d8813815 	stw	r2,1248(sp)
   498b8:	b0000226 	beq	r22,zero,498c4 <___vfprintf_internal_r+0x60>
   498bc:	b0800e17 	ldw	r2,56(r22)
   498c0:	10010426 	beq	r2,zero,49cd4 <___vfprintf_internal_r+0x470>
   498c4:	b8c0030b 	ldhu	r3,12(r23)
   498c8:	1908000c 	andi	r4,r3,8192
   498cc:	1805883a 	mov	r2,r3
   498d0:	2000071e 	bne	r4,zero,498f0 <___vfprintf_internal_r+0x8c>
   498d4:	b9001917 	ldw	r4,100(r23)
   498d8:	18880014 	ori	r2,r3,8192
   498dc:	00f7ffc4 	movi	r3,-8193
   498e0:	20c8703a 	and	r4,r4,r3
   498e4:	b880030d 	sth	r2,12(r23)
   498e8:	1007883a 	mov	r3,r2
   498ec:	b9001915 	stw	r4,100(r23)
   498f0:	1100020c 	andi	r4,r2,8
   498f4:	2000a726 	beq	r4,zero,49b94 <___vfprintf_internal_r+0x330>
   498f8:	b9000417 	ldw	r4,16(r23)
   498fc:	2000a526 	beq	r4,zero,49b94 <___vfprintf_internal_r+0x330>
   49900:	1080068c 	andi	r2,r2,26
   49904:	01000284 	movi	r4,10
   49908:	1100ab26 	beq	r2,r4,49bb8 <___vfprintf_internal_r+0x354>
   4990c:	dac10e04 	addi	r11,sp,1080
   49910:	db010dc4 	addi	r12,sp,1079
   49914:	d8800404 	addi	r2,sp,16
   49918:	050001b4 	movhi	r20,6
   4991c:	dac12815 	stw	r11,1184(sp)
   49920:	5b17c83a 	sub	r11,r11,r12
   49924:	a52b5ac4 	addi	r20,r20,-21141
   49928:	db012915 	stw	r12,1188(sp)
   4992c:	d8811e15 	stw	r2,1144(sp)
   49930:	d8012015 	stw	zero,1152(sp)
   49934:	d8011f15 	stw	zero,1148(sp)
   49938:	d8013315 	stw	zero,1228(sp)
   4993c:	d8013715 	stw	zero,1244(sp)
   49940:	d8013915 	stw	zero,1252(sp)
   49944:	d8013b15 	stw	zero,1260(sp)
   49948:	d8013a15 	stw	zero,1256(sp)
   4994c:	d8012f15 	stw	zero,1212(sp)
   49950:	1011883a 	mov	r8,r2
   49954:	dac13c15 	stw	r11,1264(sp)
   49958:	db012a17 	ldw	r12,1192(sp)
   4995c:	60800007 	ldb	r2,0(r12)
   49960:	1000df26 	beq	r2,zero,49ce0 <___vfprintf_internal_r+0x47c>
   49964:	00c00944 	movi	r3,37
   49968:	10c0dd26 	beq	r2,r3,49ce0 <___vfprintf_internal_r+0x47c>
   4996c:	6021883a 	mov	r16,r12
   49970:	00000106 	br	49978 <___vfprintf_internal_r+0x114>
   49974:	10c08426 	beq	r2,r3,49b88 <___vfprintf_internal_r+0x324>
   49978:	84000044 	addi	r16,r16,1
   4997c:	80800007 	ldb	r2,0(r16)
   49980:	103ffc1e 	bne	r2,zero,49974 <__alt_data_end+0xfffe2874>
   49984:	dac12a17 	ldw	r11,1192(sp)
   49988:	82e3c83a 	sub	r17,r16,r11
   4998c:	88000f26 	beq	r17,zero,499cc <___vfprintf_internal_r+0x168>
   49990:	d8c12017 	ldw	r3,1152(sp)
   49994:	d8811f17 	ldw	r2,1148(sp)
   49998:	dac12a17 	ldw	r11,1192(sp)
   4999c:	1c47883a 	add	r3,r3,r17
   499a0:	10800044 	addi	r2,r2,1
   499a4:	d8c12015 	stw	r3,1152(sp)
   499a8:	42c00015 	stw	r11,0(r8)
   499ac:	44400115 	stw	r17,4(r8)
   499b0:	d8811f15 	stw	r2,1148(sp)
   499b4:	00c001c4 	movi	r3,7
   499b8:	1880b416 	blt	r3,r2,49c8c <___vfprintf_internal_r+0x428>
   499bc:	42000204 	addi	r8,r8,8
   499c0:	db012f17 	ldw	r12,1212(sp)
   499c4:	6459883a 	add	r12,r12,r17
   499c8:	db012f15 	stw	r12,1212(sp)
   499cc:	80800007 	ldb	r2,0(r16)
   499d0:	1000b526 	beq	r2,zero,49ca8 <___vfprintf_internal_r+0x444>
   499d4:	80800044 	addi	r2,r16,1
   499d8:	84000047 	ldb	r16,1(r16)
   499dc:	d8012785 	stb	zero,1182(sp)
   499e0:	000d883a 	mov	r6,zero
   499e4:	027fffc4 	movi	r9,-1
   499e8:	d8012e15 	stw	zero,1208(sp)
   499ec:	0023883a 	mov	r17,zero
   499f0:	01001604 	movi	r4,88
   499f4:	01400244 	movi	r5,9
   499f8:	02800a84 	movi	r10,42
   499fc:	01c01b04 	movi	r7,108
   49a00:	10c00044 	addi	r3,r2,1
   49a04:	80bff804 	addi	r2,r16,-32
   49a08:	2082f236 	bltu	r4,r2,4a5d4 <___vfprintf_internal_r+0xd70>
   49a0c:	100490ba 	slli	r2,r2,2
   49a10:	02c00174 	movhi	r11,5
   49a14:	5ae68904 	addi	r11,r11,-26076
   49a18:	12c5883a 	add	r2,r2,r11
   49a1c:	10800017 	ldw	r2,0(r2)
   49a20:	1000683a 	jmp	r2
   49a24:	0004a41c 	xori	zero,zero,4752
   49a28:	0004a5d4 	movui	zero,4759
   49a2c:	0004a5d4 	movui	zero,4759
   49a30:	0004a43c 	xorhi	zero,zero,4752
   49a34:	0004a5d4 	movui	zero,4759
   49a38:	0004a5d4 	movui	zero,4759
   49a3c:	0004a5d4 	movui	zero,4759
   49a40:	0004a5d4 	movui	zero,4759
   49a44:	0004a5d4 	movui	zero,4759
   49a48:	0004a5d4 	movui	zero,4759
   49a4c:	0004a598 	cmpnei	zero,zero,4758
   49a50:	0004a5c4 	movi	zero,4759
   49a54:	0004a5d4 	movui	zero,4759
   49a58:	00049ce8 	cmpgeui	zero,zero,4723
   49a5c:	00049cf8 	rdprs	zero,zero,4723
   49a60:	0004a5d4 	movui	zero,4759
   49a64:	00049d38 	rdprs	zero,zero,4724
   49a68:	0004a22c 	andhi	zero,zero,4744
   49a6c:	0004a22c 	andhi	zero,zero,4744
   49a70:	0004a22c 	andhi	zero,zero,4744
   49a74:	0004a22c 	andhi	zero,zero,4744
   49a78:	0004a22c 	andhi	zero,zero,4744
   49a7c:	0004a22c 	andhi	zero,zero,4744
   49a80:	0004a22c 	andhi	zero,zero,4744
   49a84:	0004a22c 	andhi	zero,zero,4744
   49a88:	0004a22c 	andhi	zero,zero,4744
   49a8c:	0004a5d4 	movui	zero,4759
   49a90:	0004a5d4 	movui	zero,4759
   49a94:	0004a5d4 	movui	zero,4759
   49a98:	0004a5d4 	movui	zero,4759
   49a9c:	0004a5d4 	movui	zero,4759
   49aa0:	0004a5d4 	movui	zero,4759
   49aa4:	0004a5d4 	movui	zero,4759
   49aa8:	0004a5d4 	movui	zero,4759
   49aac:	0004a5d4 	movui	zero,4759
   49ab0:	0004a5d4 	movui	zero,4759
   49ab4:	0004a260 	cmpeqi	zero,zero,4745
   49ab8:	00049d48 	cmpgei	zero,zero,4725
   49abc:	0004a5d4 	movui	zero,4759
   49ac0:	00049d48 	cmpgei	zero,zero,4725
   49ac4:	0004a5d4 	movui	zero,4759
   49ac8:	0004a5d4 	movui	zero,4759
   49acc:	0004a5d4 	movui	zero,4759
   49ad0:	0004a5d4 	movui	zero,4759
   49ad4:	00049dec 	andhi	zero,zero,4727
   49ad8:	0004a5d4 	movui	zero,4759
   49adc:	0004a5d4 	movui	zero,4759
   49ae0:	00049dfc 	xorhi	zero,zero,4727
   49ae4:	0004a5d4 	movui	zero,4759
   49ae8:	0004a5d4 	movui	zero,4759
   49aec:	0004a5d4 	movui	zero,4759
   49af0:	0004a5d4 	movui	zero,4759
   49af4:	0004a5d4 	movui	zero,4759
   49af8:	0004a1f8 	rdprs	zero,zero,4743
   49afc:	0004a5d4 	movui	zero,4759
   49b00:	0004a5d4 	movui	zero,4759
   49b04:	0004a2a8 	cmpgeui	zero,zero,4746
   49b08:	0004a5d4 	movui	zero,4759
   49b0c:	0004a5d4 	movui	zero,4759
   49b10:	0004a5d4 	movui	zero,4759
   49b14:	0004a5d4 	movui	zero,4759
   49b18:	0004a5d4 	movui	zero,4759
   49b1c:	0004a5d4 	movui	zero,4759
   49b20:	0004a5d4 	movui	zero,4759
   49b24:	0004a5d4 	movui	zero,4759
   49b28:	0004a5d4 	movui	zero,4759
   49b2c:	0004a5d4 	movui	zero,4759
   49b30:	0004a49c 	xori	zero,zero,4754
   49b34:	0004a44c 	andi	zero,zero,4753
   49b38:	00049d48 	cmpgei	zero,zero,4725
   49b3c:	00049d48 	cmpgei	zero,zero,4725
   49b40:	00049d48 	cmpgei	zero,zero,4725
   49b44:	0004a48c 	andi	zero,zero,4754
   49b48:	0004a44c 	andi	zero,zero,4753
   49b4c:	0004a5d4 	movui	zero,4759
   49b50:	0004a5d4 	movui	zero,4759
   49b54:	0004a394 	movui	zero,4750
   49b58:	0004a5d4 	movui	zero,4759
   49b5c:	0004a3a8 	cmpgeui	zero,zero,4750
   49b60:	0004a3dc 	xori	zero,zero,4751
   49b64:	0004a4dc 	xori	zero,zero,4755
   49b68:	0004a304 	movi	zero,4748
   49b6c:	0004a5d4 	movui	zero,4759
   49b70:	0004a524 	muli	zero,zero,4756
   49b74:	0004a5d4 	movui	zero,4759
   49b78:	0004a314 	movui	zero,4748
   49b7c:	0004a5d4 	movui	zero,4759
   49b80:	0004a5d4 	movui	zero,4759
   49b84:	0004a354 	movui	zero,4749
   49b88:	db012a17 	ldw	r12,1192(sp)
   49b8c:	8323c83a 	sub	r17,r16,r12
   49b90:	003f7e06 	br	4998c <__alt_data_end+0xfffe288c>
   49b94:	b009883a 	mov	r4,r22
   49b98:	b80b883a 	mov	r5,r23
   49b9c:	004b8e00 	call	4b8e0 <__swsetup_r>
   49ba0:	10002d1e 	bne	r2,zero,49c58 <___vfprintf_internal_r+0x3f4>
   49ba4:	b8c0030b 	ldhu	r3,12(r23)
   49ba8:	01000284 	movi	r4,10
   49bac:	1805883a 	mov	r2,r3
   49bb0:	1080068c 	andi	r2,r2,26
   49bb4:	113f551e 	bne	r2,r4,4990c <__alt_data_end+0xfffe280c>
   49bb8:	b880038b 	ldhu	r2,14(r23)
   49bbc:	113fffcc 	andi	r4,r2,65535
   49bc0:	2120001c 	xori	r4,r4,32768
   49bc4:	21200004 	addi	r4,r4,-32768
   49bc8:	203f5016 	blt	r4,zero,4990c <__alt_data_end+0xfffe280c>
   49bcc:	bac01917 	ldw	r11,100(r23)
   49bd0:	ba800717 	ldw	r10,28(r23)
   49bd4:	ba400917 	ldw	r9,36(r23)
   49bd8:	d9812a17 	ldw	r6,1192(sp)
   49bdc:	d9c12d17 	ldw	r7,1204(sp)
   49be0:	02010004 	movi	r8,1024
   49be4:	18ffff4c 	andi	r3,r3,65533
   49be8:	d881078d 	sth	r2,1054(sp)
   49bec:	b009883a 	mov	r4,r22
   49bf0:	d8800404 	addi	r2,sp,16
   49bf4:	d9410404 	addi	r5,sp,1040
   49bf8:	d8c1070d 	sth	r3,1052(sp)
   49bfc:	dac11d15 	stw	r11,1140(sp)
   49c00:	da810b15 	stw	r10,1068(sp)
   49c04:	da410d15 	stw	r9,1076(sp)
   49c08:	d8810415 	stw	r2,1040(sp)
   49c0c:	d8810815 	stw	r2,1056(sp)
   49c10:	da010615 	stw	r8,1048(sp)
   49c14:	da010915 	stw	r8,1060(sp)
   49c18:	d8010a15 	stw	zero,1064(sp)
   49c1c:	00498640 	call	49864 <___vfprintf_internal_r>
   49c20:	1021883a 	mov	r16,r2
   49c24:	10000416 	blt	r2,zero,49c38 <___vfprintf_internal_r+0x3d4>
   49c28:	b009883a 	mov	r4,r22
   49c2c:	d9410404 	addi	r5,sp,1040
   49c30:	004d4a00 	call	4d4a0 <_fflush_r>
   49c34:	1006ee1e 	bne	r2,zero,4b7f0 <___vfprintf_internal_r+0x1f8c>
   49c38:	d881070b 	ldhu	r2,1052(sp)
   49c3c:	1080100c 	andi	r2,r2,64
   49c40:	10000326 	beq	r2,zero,49c50 <___vfprintf_internal_r+0x3ec>
   49c44:	b880030b 	ldhu	r2,12(r23)
   49c48:	10801014 	ori	r2,r2,64
   49c4c:	b880030d 	sth	r2,12(r23)
   49c50:	8005883a 	mov	r2,r16
   49c54:	00000106 	br	49c5c <___vfprintf_internal_r+0x3f8>
   49c58:	00bfffc4 	movi	r2,-1
   49c5c:	dfc14917 	ldw	ra,1316(sp)
   49c60:	df014817 	ldw	fp,1312(sp)
   49c64:	ddc14717 	ldw	r23,1308(sp)
   49c68:	dd814617 	ldw	r22,1304(sp)
   49c6c:	dd414517 	ldw	r21,1300(sp)
   49c70:	dd014417 	ldw	r20,1296(sp)
   49c74:	dcc14317 	ldw	r19,1292(sp)
   49c78:	dc814217 	ldw	r18,1288(sp)
   49c7c:	dc414117 	ldw	r17,1284(sp)
   49c80:	dc014017 	ldw	r16,1280(sp)
   49c84:	dec14a04 	addi	sp,sp,1320
   49c88:	f800283a 	ret
   49c8c:	b009883a 	mov	r4,r22
   49c90:	b80b883a 	mov	r5,r23
   49c94:	d9811e04 	addi	r6,sp,1144
   49c98:	004fd040 	call	4fd04 <__sprint_r>
   49c9c:	1000081e 	bne	r2,zero,49cc0 <___vfprintf_internal_r+0x45c>
   49ca0:	da000404 	addi	r8,sp,16
   49ca4:	003f4606 	br	499c0 <__alt_data_end+0xfffe28c0>
   49ca8:	d8812017 	ldw	r2,1152(sp)
   49cac:	10000426 	beq	r2,zero,49cc0 <___vfprintf_internal_r+0x45c>
   49cb0:	b009883a 	mov	r4,r22
   49cb4:	b80b883a 	mov	r5,r23
   49cb8:	d9811e04 	addi	r6,sp,1144
   49cbc:	004fd040 	call	4fd04 <__sprint_r>
   49cc0:	b880030b 	ldhu	r2,12(r23)
   49cc4:	1080100c 	andi	r2,r2,64
   49cc8:	103fe31e 	bne	r2,zero,49c58 <__alt_data_end+0xfffe2b58>
   49ccc:	d8812f17 	ldw	r2,1212(sp)
   49cd0:	003fe206 	br	49c5c <__alt_data_end+0xfffe2b5c>
   49cd4:	b009883a 	mov	r4,r22
   49cd8:	00482640 	call	48264 <__sinit>
   49cdc:	003ef906 	br	498c4 <__alt_data_end+0xfffe27c4>
   49ce0:	dc012a17 	ldw	r16,1192(sp)
   49ce4:	003f3906 	br	499cc <__alt_data_end+0xfffe28cc>
   49ce8:	1805883a 	mov	r2,r3
   49cec:	8c400114 	ori	r17,r17,4
   49cf0:	1c000007 	ldb	r16,0(r3)
   49cf4:	003f4206 	br	49a00 <__alt_data_end+0xfffe2900>
   49cf8:	1c000007 	ldb	r16,0(r3)
   49cfc:	18800044 	addi	r2,r3,1
   49d00:	8286b326 	beq	r16,r10,4b7d0 <___vfprintf_internal_r+0x1f6c>
   49d04:	82fff404 	addi	r11,r16,-48
   49d08:	1007883a 	mov	r3,r2
   49d0c:	0013883a 	mov	r9,zero
   49d10:	2aff3c36 	bltu	r5,r11,49a04 <__alt_data_end+0xfffe2904>
   49d14:	1c000007 	ldb	r16,0(r3)
   49d18:	4a4002a4 	muli	r9,r9,10
   49d1c:	18c00044 	addi	r3,r3,1
   49d20:	5a53883a 	add	r9,r11,r9
   49d24:	82fff404 	addi	r11,r16,-48
   49d28:	2afffa2e 	bgeu	r5,r11,49d14 <__alt_data_end+0xfffe2c14>
   49d2c:	483f350e 	bge	r9,zero,49a04 <__alt_data_end+0xfffe2904>
   49d30:	027fffc4 	movi	r9,-1
   49d34:	003f3306 	br	49a04 <__alt_data_end+0xfffe2904>
   49d38:	8c402014 	ori	r17,r17,128
   49d3c:	1805883a 	mov	r2,r3
   49d40:	1c000007 	ldb	r16,0(r3)
   49d44:	003f2e06 	br	49a00 <__alt_data_end+0xfffe2900>
   49d48:	db012d17 	ldw	r12,1204(sp)
   49d4c:	dac12d17 	ldw	r11,1204(sp)
   49d50:	d8c12a15 	stw	r3,1192(sp)
   49d54:	63000017 	ldw	r12,0(r12)
   49d58:	5ac00117 	ldw	r11,4(r11)
   49d5c:	d9812785 	stb	r6,1182(sp)
   49d60:	6009883a 	mov	r4,r12
   49d64:	580b883a 	mov	r5,r11
   49d68:	db013715 	stw	r12,1244(sp)
   49d6c:	da013f15 	stw	r8,1276(sp)
   49d70:	da413e15 	stw	r9,1272(sp)
   49d74:	dac13915 	stw	r11,1252(sp)
   49d78:	004faf00 	call	4faf0 <__fpclassifyd>
   49d7c:	db012d17 	ldw	r12,1204(sp)
   49d80:	04800044 	movi	r18,1
   49d84:	da013f17 	ldw	r8,1276(sp)
   49d88:	64c00204 	addi	r19,r12,8
   49d8c:	da413e17 	ldw	r9,1272(sp)
   49d90:	d9013717 	ldw	r4,1244(sp)
   49d94:	d9413917 	ldw	r5,1252(sp)
   49d98:	1484581e 	bne	r2,r18,4aefc <___vfprintf_internal_r+0x1698>
   49d9c:	000d883a 	mov	r6,zero
   49da0:	000f883a 	mov	r7,zero
   49da4:	00535740 	call	53574 <__ledf2>
   49da8:	da013f17 	ldw	r8,1276(sp)
   49dac:	1005ef16 	blt	r2,zero,4b56c <___vfprintf_internal_r+0x1d08>
   49db0:	dd412783 	ldbu	r21,1182(sp)
   49db4:	008011c4 	movi	r2,71
   49db8:	14053b0e 	bge	r2,r16,4b2a8 <___vfprintf_internal_r+0x1a44>
   49dbc:	00c001b4 	movhi	r3,6
   49dc0:	18eb4c04 	addi	r3,r3,-21200
   49dc4:	d8c13115 	stw	r3,1220(sp)
   49dc8:	02c000c4 	movi	r11,3
   49dcc:	00bfdfc4 	movi	r2,-129
   49dd0:	dac12b15 	stw	r11,1196(sp)
   49dd4:	88a2703a 	and	r17,r17,r2
   49dd8:	dcc12d15 	stw	r19,1204(sp)
   49ddc:	5825883a 	mov	r18,r11
   49de0:	d8013215 	stw	zero,1224(sp)
   49de4:	d8013415 	stw	zero,1232(sp)
   49de8:	00003206 	br	49eb4 <___vfprintf_internal_r+0x650>
   49dec:	8c400214 	ori	r17,r17,8
   49df0:	1805883a 	mov	r2,r3
   49df4:	1c000007 	ldb	r16,0(r3)
   49df8:	003f0106 	br	49a00 <__alt_data_end+0xfffe2900>
   49dfc:	8c400414 	ori	r17,r17,16
   49e00:	d8c12a15 	stw	r3,1192(sp)
   49e04:	88c0080c 	andi	r3,r17,32
   49e08:	d8812d17 	ldw	r2,1204(sp)
   49e0c:	18017726 	beq	r3,zero,4a3ec <___vfprintf_internal_r+0xb88>
   49e10:	db012d17 	ldw	r12,1204(sp)
   49e14:	14c00017 	ldw	r19,0(r2)
   49e18:	17000117 	ldw	fp,4(r2)
   49e1c:	63000204 	addi	r12,r12,8
   49e20:	db012d15 	stw	r12,1204(sp)
   49e24:	0005883a 	mov	r2,zero
   49e28:	9f06b03a 	or	r3,r19,fp
   49e2c:	d8012785 	stb	zero,1182(sp)
   49e30:	da413215 	stw	r9,1224(sp)
   49e34:	002b883a 	mov	r21,zero
   49e38:	48000216 	blt	r9,zero,49e44 <___vfprintf_internal_r+0x5e0>
   49e3c:	013fdfc4 	movi	r4,-129
   49e40:	8922703a 	and	r17,r17,r4
   49e44:	1801ed1e 	bne	r3,zero,4a5fc <___vfprintf_internal_r+0xd98>
   49e48:	4802e026 	beq	r9,zero,4a9cc <___vfprintf_internal_r+0x1168>
   49e4c:	10803fcc 	andi	r2,r2,255
   49e50:	00c00044 	movi	r3,1
   49e54:	10c20f26 	beq	r2,r3,4a694 <___vfprintf_internal_r+0xe30>
   49e58:	00c00084 	movi	r3,2
   49e5c:	10c2fd26 	beq	r2,r3,4aa54 <___vfprintf_internal_r+0x11f0>
   49e60:	d8c10e04 	addi	r3,sp,1080
   49e64:	9808d0fa 	srli	r4,r19,3
   49e68:	e00a977a 	slli	r5,fp,29
   49e6c:	e038d0fa 	srli	fp,fp,3
   49e70:	9cc001cc 	andi	r19,r19,7
   49e74:	98800c04 	addi	r2,r19,48
   49e78:	18ffffc4 	addi	r3,r3,-1
   49e7c:	2926b03a 	or	r19,r5,r4
   49e80:	18800005 	stb	r2,0(r3)
   49e84:	9f08b03a 	or	r4,r19,fp
   49e88:	203ff61e 	bne	r4,zero,49e64 <__alt_data_end+0xfffe2d64>
   49e8c:	8900004c 	andi	r4,r17,1
   49e90:	d8c13115 	stw	r3,1220(sp)
   49e94:	2003791e 	bne	r4,zero,4ac7c <___vfprintf_internal_r+0x1418>
   49e98:	dac12817 	ldw	r11,1184(sp)
   49e9c:	58e5c83a 	sub	r18,r11,r3
   49ea0:	9005883a 	mov	r2,r18
   49ea4:	9240010e 	bge	r18,r9,49eac <___vfprintf_internal_r+0x648>
   49ea8:	4805883a 	mov	r2,r9
   49eac:	d8812b15 	stw	r2,1196(sp)
   49eb0:	d8013415 	stw	zero,1232(sp)
   49eb4:	a8803fcc 	andi	r2,r21,255
   49eb8:	1080201c 	xori	r2,r2,128
   49ebc:	10bfe004 	addi	r2,r2,-128
   49ec0:	10000326 	beq	r2,zero,49ed0 <___vfprintf_internal_r+0x66c>
   49ec4:	db012b17 	ldw	r12,1196(sp)
   49ec8:	63000044 	addi	r12,r12,1
   49ecc:	db012b15 	stw	r12,1196(sp)
   49ed0:	88c0008c 	andi	r3,r17,2
   49ed4:	d8c12c15 	stw	r3,1200(sp)
   49ed8:	18000326 	beq	r3,zero,49ee8 <___vfprintf_internal_r+0x684>
   49edc:	dac12b17 	ldw	r11,1196(sp)
   49ee0:	5ac00084 	addi	r11,r11,2
   49ee4:	dac12b15 	stw	r11,1196(sp)
   49ee8:	8b00210c 	andi	r12,r17,132
   49eec:	db013015 	stw	r12,1216(sp)
   49ef0:	6001c01e 	bne	r12,zero,4a5f4 <___vfprintf_internal_r+0xd90>
   49ef4:	dac12e17 	ldw	r11,1208(sp)
   49ef8:	db012b17 	ldw	r12,1196(sp)
   49efc:	5b39c83a 	sub	fp,r11,r12
   49f00:	0701bc0e 	bge	zero,fp,4a5f4 <___vfprintf_internal_r+0xd90>
   49f04:	02400404 	movi	r9,16
   49f08:	d8c12017 	ldw	r3,1152(sp)
   49f0c:	d8811f17 	ldw	r2,1148(sp)
   49f10:	4f05220e 	bge	r9,fp,4b39c <___vfprintf_internal_r+0x1b38>
   49f14:	014001b4 	movhi	r5,6
   49f18:	296b5ec4 	addi	r5,r5,-21125
   49f1c:	d9413615 	stw	r5,1240(sp)
   49f20:	482b883a 	mov	r21,r9
   49f24:	04c001c4 	movi	r19,7
   49f28:	00000306 	br	49f38 <___vfprintf_internal_r+0x6d4>
   49f2c:	e73ffc04 	addi	fp,fp,-16
   49f30:	42000204 	addi	r8,r8,8
   49f34:	af00130e 	bge	r21,fp,49f84 <___vfprintf_internal_r+0x720>
   49f38:	02c001b4 	movhi	r11,6
   49f3c:	18c00404 	addi	r3,r3,16
   49f40:	10800044 	addi	r2,r2,1
   49f44:	5aeb5ec4 	addi	r11,r11,-21125
   49f48:	42c00015 	stw	r11,0(r8)
   49f4c:	45400115 	stw	r21,4(r8)
   49f50:	d8c12015 	stw	r3,1152(sp)
   49f54:	d8811f15 	stw	r2,1148(sp)
   49f58:	98bff40e 	bge	r19,r2,49f2c <__alt_data_end+0xfffe2e2c>
   49f5c:	b009883a 	mov	r4,r22
   49f60:	b80b883a 	mov	r5,r23
   49f64:	d9811e04 	addi	r6,sp,1144
   49f68:	004fd040 	call	4fd04 <__sprint_r>
   49f6c:	103f541e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   49f70:	e73ffc04 	addi	fp,fp,-16
   49f74:	d8c12017 	ldw	r3,1152(sp)
   49f78:	d8811f17 	ldw	r2,1148(sp)
   49f7c:	da000404 	addi	r8,sp,16
   49f80:	af3fed16 	blt	r21,fp,49f38 <__alt_data_end+0xfffe2e38>
   49f84:	db013617 	ldw	r12,1240(sp)
   49f88:	e0c7883a 	add	r3,fp,r3
   49f8c:	10800044 	addi	r2,r2,1
   49f90:	43000015 	stw	r12,0(r8)
   49f94:	47000115 	stw	fp,4(r8)
   49f98:	d8c12015 	stw	r3,1152(sp)
   49f9c:	d8811f15 	stw	r2,1148(sp)
   49fa0:	010001c4 	movi	r4,7
   49fa4:	2082f416 	blt	r4,r2,4ab78 <___vfprintf_internal_r+0x1314>
   49fa8:	d8812787 	ldb	r2,1182(sp)
   49fac:	42000204 	addi	r8,r8,8
   49fb0:	10000c26 	beq	r2,zero,49fe4 <___vfprintf_internal_r+0x780>
   49fb4:	d8811f17 	ldw	r2,1148(sp)
   49fb8:	d9012784 	addi	r4,sp,1182
   49fbc:	18c00044 	addi	r3,r3,1
   49fc0:	10800044 	addi	r2,r2,1
   49fc4:	41000015 	stw	r4,0(r8)
   49fc8:	01000044 	movi	r4,1
   49fcc:	41000115 	stw	r4,4(r8)
   49fd0:	d8c12015 	stw	r3,1152(sp)
   49fd4:	d8811f15 	stw	r2,1148(sp)
   49fd8:	010001c4 	movi	r4,7
   49fdc:	20828d16 	blt	r4,r2,4aa14 <___vfprintf_internal_r+0x11b0>
   49fe0:	42000204 	addi	r8,r8,8
   49fe4:	dac12c17 	ldw	r11,1200(sp)
   49fe8:	58000c26 	beq	r11,zero,4a01c <___vfprintf_internal_r+0x7b8>
   49fec:	d8811f17 	ldw	r2,1148(sp)
   49ff0:	d9012704 	addi	r4,sp,1180
   49ff4:	18c00084 	addi	r3,r3,2
   49ff8:	10800044 	addi	r2,r2,1
   49ffc:	41000015 	stw	r4,0(r8)
   4a000:	01000084 	movi	r4,2
   4a004:	41000115 	stw	r4,4(r8)
   4a008:	d8c12015 	stw	r3,1152(sp)
   4a00c:	d8811f15 	stw	r2,1148(sp)
   4a010:	010001c4 	movi	r4,7
   4a014:	20828716 	blt	r4,r2,4aa34 <___vfprintf_internal_r+0x11d0>
   4a018:	42000204 	addi	r8,r8,8
   4a01c:	db013017 	ldw	r12,1216(sp)
   4a020:	00802004 	movi	r2,128
   4a024:	6081e926 	beq	r12,r2,4a7cc <___vfprintf_internal_r+0xf68>
   4a028:	db013217 	ldw	r12,1224(sp)
   4a02c:	64abc83a 	sub	r21,r12,r18
   4a030:	0540260e 	bge	zero,r21,4a0cc <___vfprintf_internal_r+0x868>
   4a034:	07000404 	movi	fp,16
   4a038:	d8811f17 	ldw	r2,1148(sp)
   4a03c:	e5443d0e 	bge	fp,r21,4b134 <___vfprintf_internal_r+0x18d0>
   4a040:	014001b4 	movhi	r5,6
   4a044:	296b5ac4 	addi	r5,r5,-21141
   4a048:	d9412c15 	stw	r5,1200(sp)
   4a04c:	04c001c4 	movi	r19,7
   4a050:	00000306 	br	4a060 <___vfprintf_internal_r+0x7fc>
   4a054:	ad7ffc04 	addi	r21,r21,-16
   4a058:	42000204 	addi	r8,r8,8
   4a05c:	e540110e 	bge	fp,r21,4a0a4 <___vfprintf_internal_r+0x840>
   4a060:	18c00404 	addi	r3,r3,16
   4a064:	10800044 	addi	r2,r2,1
   4a068:	45000015 	stw	r20,0(r8)
   4a06c:	47000115 	stw	fp,4(r8)
   4a070:	d8c12015 	stw	r3,1152(sp)
   4a074:	d8811f15 	stw	r2,1148(sp)
   4a078:	98bff60e 	bge	r19,r2,4a054 <__alt_data_end+0xfffe2f54>
   4a07c:	b009883a 	mov	r4,r22
   4a080:	b80b883a 	mov	r5,r23
   4a084:	d9811e04 	addi	r6,sp,1144
   4a088:	004fd040 	call	4fd04 <__sprint_r>
   4a08c:	103f0c1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a090:	ad7ffc04 	addi	r21,r21,-16
   4a094:	d8c12017 	ldw	r3,1152(sp)
   4a098:	d8811f17 	ldw	r2,1148(sp)
   4a09c:	da000404 	addi	r8,sp,16
   4a0a0:	e57fef16 	blt	fp,r21,4a060 <__alt_data_end+0xfffe2f60>
   4a0a4:	dac12c17 	ldw	r11,1200(sp)
   4a0a8:	1d47883a 	add	r3,r3,r21
   4a0ac:	10800044 	addi	r2,r2,1
   4a0b0:	42c00015 	stw	r11,0(r8)
   4a0b4:	45400115 	stw	r21,4(r8)
   4a0b8:	d8c12015 	stw	r3,1152(sp)
   4a0bc:	d8811f15 	stw	r2,1148(sp)
   4a0c0:	010001c4 	movi	r4,7
   4a0c4:	20824b16 	blt	r4,r2,4a9f4 <___vfprintf_internal_r+0x1190>
   4a0c8:	42000204 	addi	r8,r8,8
   4a0cc:	8880400c 	andi	r2,r17,256
   4a0d0:	1001761e 	bne	r2,zero,4a6ac <___vfprintf_internal_r+0xe48>
   4a0d4:	d8811f17 	ldw	r2,1148(sp)
   4a0d8:	db013117 	ldw	r12,1220(sp)
   4a0dc:	1c87883a 	add	r3,r3,r18
   4a0e0:	10800044 	addi	r2,r2,1
   4a0e4:	43000015 	stw	r12,0(r8)
   4a0e8:	44800115 	stw	r18,4(r8)
   4a0ec:	d8c12015 	stw	r3,1152(sp)
   4a0f0:	d8811f15 	stw	r2,1148(sp)
   4a0f4:	010001c4 	movi	r4,7
   4a0f8:	20822616 	blt	r4,r2,4a994 <___vfprintf_internal_r+0x1130>
   4a0fc:	42000204 	addi	r8,r8,8
   4a100:	8c40010c 	andi	r17,r17,4
   4a104:	88003126 	beq	r17,zero,4a1cc <___vfprintf_internal_r+0x968>
   4a108:	db012e17 	ldw	r12,1208(sp)
   4a10c:	dac12b17 	ldw	r11,1196(sp)
   4a110:	62e1c83a 	sub	r16,r12,r11
   4a114:	04002d0e 	bge	zero,r16,4a1cc <___vfprintf_internal_r+0x968>
   4a118:	04400404 	movi	r17,16
   4a11c:	d8811f17 	ldw	r2,1148(sp)
   4a120:	8c04df0e 	bge	r17,r16,4b4a0 <___vfprintf_internal_r+0x1c3c>
   4a124:	010001b4 	movhi	r4,6
   4a128:	212b5ec4 	addi	r4,r4,-21125
   4a12c:	d9013615 	stw	r4,1240(sp)
   4a130:	048001c4 	movi	r18,7
   4a134:	00000306 	br	4a144 <___vfprintf_internal_r+0x8e0>
   4a138:	843ffc04 	addi	r16,r16,-16
   4a13c:	42000204 	addi	r8,r8,8
   4a140:	8c00130e 	bge	r17,r16,4a190 <___vfprintf_internal_r+0x92c>
   4a144:	014001b4 	movhi	r5,6
   4a148:	18c00404 	addi	r3,r3,16
   4a14c:	10800044 	addi	r2,r2,1
   4a150:	296b5ec4 	addi	r5,r5,-21125
   4a154:	41400015 	stw	r5,0(r8)
   4a158:	44400115 	stw	r17,4(r8)
   4a15c:	d8c12015 	stw	r3,1152(sp)
   4a160:	d8811f15 	stw	r2,1148(sp)
   4a164:	90bff40e 	bge	r18,r2,4a138 <__alt_data_end+0xfffe3038>
   4a168:	b009883a 	mov	r4,r22
   4a16c:	b80b883a 	mov	r5,r23
   4a170:	d9811e04 	addi	r6,sp,1144
   4a174:	004fd040 	call	4fd04 <__sprint_r>
   4a178:	103ed11e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a17c:	843ffc04 	addi	r16,r16,-16
   4a180:	d8c12017 	ldw	r3,1152(sp)
   4a184:	d8811f17 	ldw	r2,1148(sp)
   4a188:	da000404 	addi	r8,sp,16
   4a18c:	8c3fed16 	blt	r17,r16,4a144 <__alt_data_end+0xfffe3044>
   4a190:	dac13617 	ldw	r11,1240(sp)
   4a194:	1c07883a 	add	r3,r3,r16
   4a198:	10800044 	addi	r2,r2,1
   4a19c:	42c00015 	stw	r11,0(r8)
   4a1a0:	44000115 	stw	r16,4(r8)
   4a1a4:	d8c12015 	stw	r3,1152(sp)
   4a1a8:	d8811f15 	stw	r2,1148(sp)
   4a1ac:	010001c4 	movi	r4,7
   4a1b0:	2080060e 	bge	r4,r2,4a1cc <___vfprintf_internal_r+0x968>
   4a1b4:	b009883a 	mov	r4,r22
   4a1b8:	b80b883a 	mov	r5,r23
   4a1bc:	d9811e04 	addi	r6,sp,1144
   4a1c0:	004fd040 	call	4fd04 <__sprint_r>
   4a1c4:	103ebe1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a1c8:	d8c12017 	ldw	r3,1152(sp)
   4a1cc:	d8812b17 	ldw	r2,1196(sp)
   4a1d0:	db012e17 	ldw	r12,1208(sp)
   4a1d4:	1300010e 	bge	r2,r12,4a1dc <___vfprintf_internal_r+0x978>
   4a1d8:	6005883a 	mov	r2,r12
   4a1dc:	dac12f17 	ldw	r11,1212(sp)
   4a1e0:	5897883a 	add	r11,r11,r2
   4a1e4:	dac12f15 	stw	r11,1212(sp)
   4a1e8:	1801f21e 	bne	r3,zero,4a9b4 <___vfprintf_internal_r+0x1150>
   4a1ec:	d8011f15 	stw	zero,1148(sp)
   4a1f0:	da000404 	addi	r8,sp,16
   4a1f4:	003dd806 	br	49958 <__alt_data_end+0xfffe2858>
   4a1f8:	8c400414 	ori	r17,r17,16
   4a1fc:	d8c12a15 	stw	r3,1192(sp)
   4a200:	88c0080c 	andi	r3,r17,32
   4a204:	d8812d17 	ldw	r2,1204(sp)
   4a208:	18004626 	beq	r3,zero,4a324 <___vfprintf_internal_r+0xac0>
   4a20c:	dac12d17 	ldw	r11,1204(sp)
   4a210:	14c00017 	ldw	r19,0(r2)
   4a214:	17000117 	ldw	fp,4(r2)
   4a218:	5ac00204 	addi	r11,r11,8
   4a21c:	dac12d15 	stw	r11,1204(sp)
   4a220:	00800044 	movi	r2,1
   4a224:	9f06b03a 	or	r3,r19,fp
   4a228:	003f0006 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4a22c:	1805883a 	mov	r2,r3
   4a230:	d8012e15 	stw	zero,1208(sp)
   4a234:	82fff404 	addi	r11,r16,-48
   4a238:	0019883a 	mov	r12,zero
   4a23c:	14000007 	ldb	r16,0(r2)
   4a240:	630002a4 	muli	r12,r12,10
   4a244:	18c00044 	addi	r3,r3,1
   4a248:	1805883a 	mov	r2,r3
   4a24c:	62d9883a 	add	r12,r12,r11
   4a250:	82fff404 	addi	r11,r16,-48
   4a254:	2afff92e 	bgeu	r5,r11,4a23c <__alt_data_end+0xfffe313c>
   4a258:	db012e15 	stw	r12,1208(sp)
   4a25c:	003de906 	br	49a04 <__alt_data_end+0xfffe2904>
   4a260:	8c400414 	ori	r17,r17,16
   4a264:	d8c12a15 	stw	r3,1192(sp)
   4a268:	d9812785 	stb	r6,1182(sp)
   4a26c:	8880080c 	andi	r2,r17,32
   4a270:	d8c12d17 	ldw	r3,1204(sp)
   4a274:	10007a26 	beq	r2,zero,4a460 <___vfprintf_internal_r+0xbfc>
   4a278:	db012d17 	ldw	r12,1204(sp)
   4a27c:	18800117 	ldw	r2,4(r3)
   4a280:	1cc00017 	ldw	r19,0(r3)
   4a284:	63000204 	addi	r12,r12,8
   4a288:	db012d15 	stw	r12,1204(sp)
   4a28c:	1039883a 	mov	fp,r2
   4a290:	10031016 	blt	r2,zero,4aed4 <___vfprintf_internal_r+0x1670>
   4a294:	dd412783 	ldbu	r21,1182(sp)
   4a298:	da413215 	stw	r9,1224(sp)
   4a29c:	00800044 	movi	r2,1
   4a2a0:	9f06b03a 	or	r3,r19,fp
   4a2a4:	003ee406 	br	49e38 <__alt_data_end+0xfffe2d38>
   4a2a8:	030001b4 	movhi	r12,6
   4a2ac:	632b4f04 	addi	r12,r12,-21188
   4a2b0:	d8c12a15 	stw	r3,1192(sp)
   4a2b4:	d9812785 	stb	r6,1182(sp)
   4a2b8:	db013b15 	stw	r12,1260(sp)
   4a2bc:	88c0080c 	andi	r3,r17,32
   4a2c0:	d8812d17 	ldw	r2,1204(sp)
   4a2c4:	18002b26 	beq	r3,zero,4a374 <___vfprintf_internal_r+0xb10>
   4a2c8:	dac12d17 	ldw	r11,1204(sp)
   4a2cc:	14c00017 	ldw	r19,0(r2)
   4a2d0:	17000117 	ldw	fp,4(r2)
   4a2d4:	5ac00204 	addi	r11,r11,8
   4a2d8:	dac12d15 	stw	r11,1204(sp)
   4a2dc:	8880004c 	andi	r2,r17,1
   4a2e0:	10025b26 	beq	r2,zero,4ac50 <___vfprintf_internal_r+0x13ec>
   4a2e4:	9f06b03a 	or	r3,r19,fp
   4a2e8:	18037026 	beq	r3,zero,4b0ac <___vfprintf_internal_r+0x1848>
   4a2ec:	00800c04 	movi	r2,48
   4a2f0:	d8812705 	stb	r2,1180(sp)
   4a2f4:	dc012745 	stb	r16,1181(sp)
   4a2f8:	8c400094 	ori	r17,r17,2
   4a2fc:	00800084 	movi	r2,2
   4a300:	003eca06 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4a304:	8c400814 	ori	r17,r17,32
   4a308:	1805883a 	mov	r2,r3
   4a30c:	1c000007 	ldb	r16,0(r3)
   4a310:	003dbb06 	br	49a00 <__alt_data_end+0xfffe2900>
   4a314:	d8c12a15 	stw	r3,1192(sp)
   4a318:	88c0080c 	andi	r3,r17,32
   4a31c:	d8812d17 	ldw	r2,1204(sp)
   4a320:	183fba1e 	bne	r3,zero,4a20c <__alt_data_end+0xfffe310c>
   4a324:	88c0040c 	andi	r3,r17,16
   4a328:	18024c1e 	bne	r3,zero,4ac5c <___vfprintf_internal_r+0x13f8>
   4a32c:	88c0100c 	andi	r3,r17,64
   4a330:	18024a26 	beq	r3,zero,4ac5c <___vfprintf_internal_r+0x13f8>
   4a334:	dac12d17 	ldw	r11,1204(sp)
   4a338:	14c0000b 	ldhu	r19,0(r2)
   4a33c:	0039883a 	mov	fp,zero
   4a340:	5ac00104 	addi	r11,r11,4
   4a344:	dac12d15 	stw	r11,1204(sp)
   4a348:	00800044 	movi	r2,1
   4a34c:	9807883a 	mov	r3,r19
   4a350:	003eb606 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4a354:	008001b4 	movhi	r2,6
   4a358:	10ab5404 	addi	r2,r2,-21168
   4a35c:	d8c12a15 	stw	r3,1192(sp)
   4a360:	d8813b15 	stw	r2,1260(sp)
   4a364:	d9812785 	stb	r6,1182(sp)
   4a368:	88c0080c 	andi	r3,r17,32
   4a36c:	d8812d17 	ldw	r2,1204(sp)
   4a370:	183fd51e 	bne	r3,zero,4a2c8 <__alt_data_end+0xfffe31c8>
   4a374:	88c0040c 	andi	r3,r17,16
   4a378:	18034126 	beq	r3,zero,4b080 <___vfprintf_internal_r+0x181c>
   4a37c:	db012d17 	ldw	r12,1204(sp)
   4a380:	14c00017 	ldw	r19,0(r2)
   4a384:	0039883a 	mov	fp,zero
   4a388:	63000104 	addi	r12,r12,4
   4a38c:	db012d15 	stw	r12,1204(sp)
   4a390:	003fd206 	br	4a2dc <__alt_data_end+0xfffe31dc>
   4a394:	1c000007 	ldb	r16,0(r3)
   4a398:	81c3d626 	beq	r16,r7,4b2f4 <___vfprintf_internal_r+0x1a90>
   4a39c:	8c400414 	ori	r17,r17,16
   4a3a0:	1805883a 	mov	r2,r3
   4a3a4:	003d9606 	br	49a00 <__alt_data_end+0xfffe2900>
   4a3a8:	d8c12a15 	stw	r3,1192(sp)
   4a3ac:	d9812785 	stb	r6,1182(sp)
   4a3b0:	8880080c 	andi	r2,r17,32
   4a3b4:	10033f26 	beq	r2,zero,4b0b4 <___vfprintf_internal_r+0x1850>
   4a3b8:	db012d17 	ldw	r12,1204(sp)
   4a3bc:	dac12f17 	ldw	r11,1212(sp)
   4a3c0:	60800017 	ldw	r2,0(r12)
   4a3c4:	5807d7fa 	srai	r3,r11,31
   4a3c8:	63000104 	addi	r12,r12,4
   4a3cc:	db012d15 	stw	r12,1204(sp)
   4a3d0:	12c00015 	stw	r11,0(r2)
   4a3d4:	10c00115 	stw	r3,4(r2)
   4a3d8:	003d5f06 	br	49958 <__alt_data_end+0xfffe2858>
   4a3dc:	d8c12a15 	stw	r3,1192(sp)
   4a3e0:	88c0080c 	andi	r3,r17,32
   4a3e4:	d8812d17 	ldw	r2,1204(sp)
   4a3e8:	183e891e 	bne	r3,zero,49e10 <__alt_data_end+0xfffe2d10>
   4a3ec:	88c0040c 	andi	r3,r17,16
   4a3f0:	1801ea1e 	bne	r3,zero,4ab9c <___vfprintf_internal_r+0x1338>
   4a3f4:	88c0100c 	andi	r3,r17,64
   4a3f8:	1801e826 	beq	r3,zero,4ab9c <___vfprintf_internal_r+0x1338>
   4a3fc:	db012d17 	ldw	r12,1204(sp)
   4a400:	14c0000b 	ldhu	r19,0(r2)
   4a404:	0039883a 	mov	fp,zero
   4a408:	63000104 	addi	r12,r12,4
   4a40c:	db012d15 	stw	r12,1204(sp)
   4a410:	0005883a 	mov	r2,zero
   4a414:	9807883a 	mov	r3,r19
   4a418:	003e8406 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4a41c:	30803fcc 	andi	r2,r6,255
   4a420:	1080201c 	xori	r2,r2,128
   4a424:	10bfe004 	addi	r2,r2,-128
   4a428:	10031d1e 	bne	r2,zero,4b0a0 <___vfprintf_internal_r+0x183c>
   4a42c:	1805883a 	mov	r2,r3
   4a430:	01800804 	movi	r6,32
   4a434:	1c000007 	ldb	r16,0(r3)
   4a438:	003d7106 	br	49a00 <__alt_data_end+0xfffe2900>
   4a43c:	8c400054 	ori	r17,r17,1
   4a440:	1805883a 	mov	r2,r3
   4a444:	1c000007 	ldb	r16,0(r3)
   4a448:	003d6d06 	br	49a00 <__alt_data_end+0xfffe2900>
   4a44c:	d8c12a15 	stw	r3,1192(sp)
   4a450:	d9812785 	stb	r6,1182(sp)
   4a454:	8880080c 	andi	r2,r17,32
   4a458:	d8c12d17 	ldw	r3,1204(sp)
   4a45c:	103f861e 	bne	r2,zero,4a278 <__alt_data_end+0xfffe3178>
   4a460:	8880040c 	andi	r2,r17,16
   4a464:	1001f31e 	bne	r2,zero,4ac34 <___vfprintf_internal_r+0x13d0>
   4a468:	8880100c 	andi	r2,r17,64
   4a46c:	1001f126 	beq	r2,zero,4ac34 <___vfprintf_internal_r+0x13d0>
   4a470:	1cc0000f 	ldh	r19,0(r3)
   4a474:	db012d17 	ldw	r12,1204(sp)
   4a478:	9839d7fa 	srai	fp,r19,31
   4a47c:	63000104 	addi	r12,r12,4
   4a480:	db012d15 	stw	r12,1204(sp)
   4a484:	e005883a 	mov	r2,fp
   4a488:	003f8106 	br	4a290 <__alt_data_end+0xfffe3190>
   4a48c:	8c401014 	ori	r17,r17,64
   4a490:	1805883a 	mov	r2,r3
   4a494:	1c000007 	ldb	r16,0(r3)
   4a498:	003d5906 	br	49a00 <__alt_data_end+0xfffe2900>
   4a49c:	db012d17 	ldw	r12,1204(sp)
   4a4a0:	d8c12a15 	stw	r3,1192(sp)
   4a4a4:	00c00044 	movi	r3,1
   4a4a8:	60800017 	ldw	r2,0(r12)
   4a4ac:	63000104 	addi	r12,r12,4
   4a4b0:	d8c12b15 	stw	r3,1196(sp)
   4a4b4:	d8012785 	stb	zero,1182(sp)
   4a4b8:	d8810405 	stb	r2,1040(sp)
   4a4bc:	db012d15 	stw	r12,1204(sp)
   4a4c0:	dac10404 	addi	r11,sp,1040
   4a4c4:	1825883a 	mov	r18,r3
   4a4c8:	d8013215 	stw	zero,1224(sp)
   4a4cc:	d8013415 	stw	zero,1232(sp)
   4a4d0:	dac13115 	stw	r11,1220(sp)
   4a4d4:	0005883a 	mov	r2,zero
   4a4d8:	003e7d06 	br	49ed0 <__alt_data_end+0xfffe2dd0>
   4a4dc:	db012d17 	ldw	r12,1204(sp)
   4a4e0:	00800c04 	movi	r2,48
   4a4e4:	d8812705 	stb	r2,1180(sp)
   4a4e8:	64c00017 	ldw	r19,0(r12)
   4a4ec:	00801e04 	movi	r2,120
   4a4f0:	d8812745 	stb	r2,1181(sp)
   4a4f4:	008001b4 	movhi	r2,6
   4a4f8:	10ab5404 	addi	r2,r2,-21168
   4a4fc:	63000104 	addi	r12,r12,4
   4a500:	d8c12a15 	stw	r3,1192(sp)
   4a504:	d8813b15 	stw	r2,1260(sp)
   4a508:	0039883a 	mov	fp,zero
   4a50c:	8c400094 	ori	r17,r17,2
   4a510:	db012d15 	stw	r12,1204(sp)
   4a514:	00800084 	movi	r2,2
   4a518:	04001e04 	movi	r16,120
   4a51c:	9807883a 	mov	r3,r19
   4a520:	003e4206 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4a524:	dac12d17 	ldw	r11,1204(sp)
   4a528:	db012d17 	ldw	r12,1204(sp)
   4a52c:	d8c12a15 	stw	r3,1192(sp)
   4a530:	5ac00017 	ldw	r11,0(r11)
   4a534:	d8012785 	stb	zero,1182(sp)
   4a538:	64c00104 	addi	r19,r12,4
   4a53c:	dac13115 	stw	r11,1220(sp)
   4a540:	5803e826 	beq	r11,zero,4b4e4 <___vfprintf_internal_r+0x1c80>
   4a544:	d9013117 	ldw	r4,1220(sp)
   4a548:	48037a16 	blt	r9,zero,4b334 <___vfprintf_internal_r+0x1ad0>
   4a54c:	480d883a 	mov	r6,r9
   4a550:	000b883a 	mov	r5,zero
   4a554:	da013f15 	stw	r8,1276(sp)
   4a558:	da413e15 	stw	r9,1272(sp)
   4a55c:	0048bcc0 	call	48bcc <memchr>
   4a560:	da013f17 	ldw	r8,1276(sp)
   4a564:	da413e17 	ldw	r9,1272(sp)
   4a568:	10044426 	beq	r2,zero,4b67c <___vfprintf_internal_r+0x1e18>
   4a56c:	d8c13117 	ldw	r3,1220(sp)
   4a570:	10e5c83a 	sub	r18,r2,r3
   4a574:	4c834416 	blt	r9,r18,4b288 <___vfprintf_internal_r+0x1a24>
   4a578:	9005883a 	mov	r2,r18
   4a57c:	90037216 	blt	r18,zero,4b348 <___vfprintf_internal_r+0x1ae4>
   4a580:	dd412783 	ldbu	r21,1182(sp)
   4a584:	d8812b15 	stw	r2,1196(sp)
   4a588:	dcc12d15 	stw	r19,1204(sp)
   4a58c:	d8013215 	stw	zero,1224(sp)
   4a590:	d8013415 	stw	zero,1232(sp)
   4a594:	003e4706 	br	49eb4 <__alt_data_end+0xfffe2db4>
   4a598:	dac12d17 	ldw	r11,1204(sp)
   4a59c:	db012d17 	ldw	r12,1204(sp)
   4a5a0:	5ac00017 	ldw	r11,0(r11)
   4a5a4:	dac12e15 	stw	r11,1208(sp)
   4a5a8:	62c00104 	addi	r11,r12,4
   4a5ac:	db012e17 	ldw	r12,1208(sp)
   4a5b0:	60034a16 	blt	r12,zero,4b2dc <___vfprintf_internal_r+0x1a78>
   4a5b4:	dac12d15 	stw	r11,1204(sp)
   4a5b8:	1805883a 	mov	r2,r3
   4a5bc:	1c000007 	ldb	r16,0(r3)
   4a5c0:	003d0f06 	br	49a00 <__alt_data_end+0xfffe2900>
   4a5c4:	1805883a 	mov	r2,r3
   4a5c8:	01800ac4 	movi	r6,43
   4a5cc:	1c000007 	ldb	r16,0(r3)
   4a5d0:	003d0b06 	br	49a00 <__alt_data_end+0xfffe2900>
   4a5d4:	d8c12a15 	stw	r3,1192(sp)
   4a5d8:	d9812785 	stb	r6,1182(sp)
   4a5dc:	803db226 	beq	r16,zero,49ca8 <__alt_data_end+0xfffe2ba8>
   4a5e0:	00c00044 	movi	r3,1
   4a5e4:	d8c12b15 	stw	r3,1196(sp)
   4a5e8:	dc010405 	stb	r16,1040(sp)
   4a5ec:	d8012785 	stb	zero,1182(sp)
   4a5f0:	003fb306 	br	4a4c0 <__alt_data_end+0xfffe33c0>
   4a5f4:	d8c12017 	ldw	r3,1152(sp)
   4a5f8:	003e6d06 	br	49fb0 <__alt_data_end+0xfffe2eb0>
   4a5fc:	10803fcc 	andi	r2,r2,255
   4a600:	00c00044 	movi	r3,1
   4a604:	10fe141e 	bne	r2,r3,49e58 <__alt_data_end+0xfffe2d58>
   4a608:	e000021e 	bne	fp,zero,4a614 <___vfprintf_internal_r+0xdb0>
   4a60c:	00800244 	movi	r2,9
   4a610:	14c0202e 	bgeu	r2,r19,4a694 <___vfprintf_internal_r+0xe30>
   4a614:	dc012b15 	stw	r16,1196(sp)
   4a618:	dc412c15 	stw	r17,1200(sp)
   4a61c:	9821883a 	mov	r16,r19
   4a620:	e023883a 	mov	r17,fp
   4a624:	dc810e04 	addi	r18,sp,1080
   4a628:	4027883a 	mov	r19,r8
   4a62c:	4839883a 	mov	fp,r9
   4a630:	8009883a 	mov	r4,r16
   4a634:	880b883a 	mov	r5,r17
   4a638:	01800284 	movi	r6,10
   4a63c:	000f883a 	mov	r7,zero
   4a640:	0051d180 	call	51d18 <__umoddi3>
   4a644:	10800c04 	addi	r2,r2,48
   4a648:	94bfffc4 	addi	r18,r18,-1
   4a64c:	8009883a 	mov	r4,r16
   4a650:	880b883a 	mov	r5,r17
   4a654:	01800284 	movi	r6,10
   4a658:	000f883a 	mov	r7,zero
   4a65c:	90800005 	stb	r2,0(r18)
   4a660:	00517580 	call	51758 <__udivdi3>
   4a664:	1021883a 	mov	r16,r2
   4a668:	10c4b03a 	or	r2,r2,r3
   4a66c:	1823883a 	mov	r17,r3
   4a670:	103fef1e 	bne	r2,zero,4a630 <__alt_data_end+0xfffe3530>
   4a674:	dac12817 	ldw	r11,1184(sp)
   4a678:	dc813115 	stw	r18,1220(sp)
   4a67c:	dc012b17 	ldw	r16,1196(sp)
   4a680:	9811883a 	mov	r8,r19
   4a684:	dc412c17 	ldw	r17,1200(sp)
   4a688:	e013883a 	mov	r9,fp
   4a68c:	5ca5c83a 	sub	r18,r11,r18
   4a690:	003e0306 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4a694:	9cc00c04 	addi	r19,r19,48
   4a698:	d8c10dc4 	addi	r3,sp,1079
   4a69c:	dcc10dc5 	stb	r19,1079(sp)
   4a6a0:	dc813c17 	ldw	r18,1264(sp)
   4a6a4:	d8c13115 	stw	r3,1220(sp)
   4a6a8:	003dfd06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4a6ac:	00801944 	movi	r2,101
   4a6b0:	1400710e 	bge	r2,r16,4a878 <___vfprintf_internal_r+0x1014>
   4a6b4:	d9013717 	ldw	r4,1244(sp)
   4a6b8:	d9413917 	ldw	r5,1252(sp)
   4a6bc:	000d883a 	mov	r6,zero
   4a6c0:	000f883a 	mov	r7,zero
   4a6c4:	d8c13d15 	stw	r3,1268(sp)
   4a6c8:	da013f15 	stw	r8,1276(sp)
   4a6cc:	00534100 	call	53410 <__eqdf2>
   4a6d0:	d8c13d17 	ldw	r3,1268(sp)
   4a6d4:	da013f17 	ldw	r8,1276(sp)
   4a6d8:	1000ef1e 	bne	r2,zero,4aa98 <___vfprintf_internal_r+0x1234>
   4a6dc:	d8811f17 	ldw	r2,1148(sp)
   4a6e0:	010001b4 	movhi	r4,6
   4a6e4:	2125ee04 	addi	r4,r4,-26696
   4a6e8:	18c00044 	addi	r3,r3,1
   4a6ec:	10800044 	addi	r2,r2,1
   4a6f0:	41000015 	stw	r4,0(r8)
   4a6f4:	01000044 	movi	r4,1
   4a6f8:	41000115 	stw	r4,4(r8)
   4a6fc:	d8c12015 	stw	r3,1152(sp)
   4a700:	d8811f15 	stw	r2,1148(sp)
   4a704:	010001c4 	movi	r4,7
   4a708:	20828e16 	blt	r4,r2,4b144 <___vfprintf_internal_r+0x18e0>
   4a70c:	42000204 	addi	r8,r8,8
   4a710:	d8812617 	ldw	r2,1176(sp)
   4a714:	dac13317 	ldw	r11,1228(sp)
   4a718:	12c00216 	blt	r2,r11,4a724 <___vfprintf_internal_r+0xec0>
   4a71c:	8880004c 	andi	r2,r17,1
   4a720:	103e7726 	beq	r2,zero,4a100 <__alt_data_end+0xfffe3000>
   4a724:	db013817 	ldw	r12,1248(sp)
   4a728:	d8811f17 	ldw	r2,1148(sp)
   4a72c:	dac13517 	ldw	r11,1236(sp)
   4a730:	1b07883a 	add	r3,r3,r12
   4a734:	10800044 	addi	r2,r2,1
   4a738:	42c00015 	stw	r11,0(r8)
   4a73c:	43000115 	stw	r12,4(r8)
   4a740:	d8c12015 	stw	r3,1152(sp)
   4a744:	d8811f15 	stw	r2,1148(sp)
   4a748:	010001c4 	movi	r4,7
   4a74c:	2082ed16 	blt	r4,r2,4b304 <___vfprintf_internal_r+0x1aa0>
   4a750:	42000204 	addi	r8,r8,8
   4a754:	db013317 	ldw	r12,1228(sp)
   4a758:	643fffc4 	addi	r16,r12,-1
   4a75c:	043e680e 	bge	zero,r16,4a100 <__alt_data_end+0xfffe3000>
   4a760:	04800404 	movi	r18,16
   4a764:	d8811f17 	ldw	r2,1148(sp)
   4a768:	94007e0e 	bge	r18,r16,4a964 <___vfprintf_internal_r+0x1100>
   4a76c:	014001b4 	movhi	r5,6
   4a770:	296b5ac4 	addi	r5,r5,-21141
   4a774:	d9412c15 	stw	r5,1200(sp)
   4a778:	054001c4 	movi	r21,7
   4a77c:	00000306 	br	4a78c <___vfprintf_internal_r+0xf28>
   4a780:	42000204 	addi	r8,r8,8
   4a784:	843ffc04 	addi	r16,r16,-16
   4a788:	9400790e 	bge	r18,r16,4a970 <___vfprintf_internal_r+0x110c>
   4a78c:	18c00404 	addi	r3,r3,16
   4a790:	10800044 	addi	r2,r2,1
   4a794:	45000015 	stw	r20,0(r8)
   4a798:	44800115 	stw	r18,4(r8)
   4a79c:	d8c12015 	stw	r3,1152(sp)
   4a7a0:	d8811f15 	stw	r2,1148(sp)
   4a7a4:	a8bff60e 	bge	r21,r2,4a780 <__alt_data_end+0xfffe3680>
   4a7a8:	b009883a 	mov	r4,r22
   4a7ac:	b80b883a 	mov	r5,r23
   4a7b0:	d9811e04 	addi	r6,sp,1144
   4a7b4:	004fd040 	call	4fd04 <__sprint_r>
   4a7b8:	103d411e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a7bc:	d8c12017 	ldw	r3,1152(sp)
   4a7c0:	d8811f17 	ldw	r2,1148(sp)
   4a7c4:	da000404 	addi	r8,sp,16
   4a7c8:	003fee06 	br	4a784 <__alt_data_end+0xfffe3684>
   4a7cc:	dac12e17 	ldw	r11,1208(sp)
   4a7d0:	db012b17 	ldw	r12,1196(sp)
   4a7d4:	5b2bc83a 	sub	r21,r11,r12
   4a7d8:	057e130e 	bge	zero,r21,4a028 <__alt_data_end+0xfffe2f28>
   4a7dc:	07000404 	movi	fp,16
   4a7e0:	d8811f17 	ldw	r2,1148(sp)
   4a7e4:	e543640e 	bge	fp,r21,4b578 <___vfprintf_internal_r+0x1d14>
   4a7e8:	014001b4 	movhi	r5,6
   4a7ec:	296b5ac4 	addi	r5,r5,-21141
   4a7f0:	d9412c15 	stw	r5,1200(sp)
   4a7f4:	04c001c4 	movi	r19,7
   4a7f8:	00000306 	br	4a808 <___vfprintf_internal_r+0xfa4>
   4a7fc:	ad7ffc04 	addi	r21,r21,-16
   4a800:	42000204 	addi	r8,r8,8
   4a804:	e540110e 	bge	fp,r21,4a84c <___vfprintf_internal_r+0xfe8>
   4a808:	18c00404 	addi	r3,r3,16
   4a80c:	10800044 	addi	r2,r2,1
   4a810:	45000015 	stw	r20,0(r8)
   4a814:	47000115 	stw	fp,4(r8)
   4a818:	d8c12015 	stw	r3,1152(sp)
   4a81c:	d8811f15 	stw	r2,1148(sp)
   4a820:	98bff60e 	bge	r19,r2,4a7fc <__alt_data_end+0xfffe36fc>
   4a824:	b009883a 	mov	r4,r22
   4a828:	b80b883a 	mov	r5,r23
   4a82c:	d9811e04 	addi	r6,sp,1144
   4a830:	004fd040 	call	4fd04 <__sprint_r>
   4a834:	103d221e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a838:	ad7ffc04 	addi	r21,r21,-16
   4a83c:	d8c12017 	ldw	r3,1152(sp)
   4a840:	d8811f17 	ldw	r2,1148(sp)
   4a844:	da000404 	addi	r8,sp,16
   4a848:	e57fef16 	blt	fp,r21,4a808 <__alt_data_end+0xfffe3708>
   4a84c:	dac12c17 	ldw	r11,1200(sp)
   4a850:	1d47883a 	add	r3,r3,r21
   4a854:	10800044 	addi	r2,r2,1
   4a858:	42c00015 	stw	r11,0(r8)
   4a85c:	45400115 	stw	r21,4(r8)
   4a860:	d8c12015 	stw	r3,1152(sp)
   4a864:	d8811f15 	stw	r2,1148(sp)
   4a868:	010001c4 	movi	r4,7
   4a86c:	20819116 	blt	r4,r2,4aeb4 <___vfprintf_internal_r+0x1650>
   4a870:	42000204 	addi	r8,r8,8
   4a874:	003dec06 	br	4a028 <__alt_data_end+0xfffe2f28>
   4a878:	db013317 	ldw	r12,1228(sp)
   4a87c:	00800044 	movi	r2,1
   4a880:	18c00044 	addi	r3,r3,1
   4a884:	1301530e 	bge	r2,r12,4add4 <___vfprintf_internal_r+0x1570>
   4a888:	dc011f17 	ldw	r16,1148(sp)
   4a88c:	dac13117 	ldw	r11,1220(sp)
   4a890:	00800044 	movi	r2,1
   4a894:	84000044 	addi	r16,r16,1
   4a898:	40800115 	stw	r2,4(r8)
   4a89c:	42c00015 	stw	r11,0(r8)
   4a8a0:	d8c12015 	stw	r3,1152(sp)
   4a8a4:	dc011f15 	stw	r16,1148(sp)
   4a8a8:	008001c4 	movi	r2,7
   4a8ac:	14016b16 	blt	r2,r16,4ae5c <___vfprintf_internal_r+0x15f8>
   4a8b0:	42000204 	addi	r8,r8,8
   4a8b4:	db013817 	ldw	r12,1248(sp)
   4a8b8:	dac13517 	ldw	r11,1236(sp)
   4a8bc:	84000044 	addi	r16,r16,1
   4a8c0:	1b07883a 	add	r3,r3,r12
   4a8c4:	42c00015 	stw	r11,0(r8)
   4a8c8:	43000115 	stw	r12,4(r8)
   4a8cc:	d8c12015 	stw	r3,1152(sp)
   4a8d0:	dc011f15 	stw	r16,1148(sp)
   4a8d4:	008001c4 	movi	r2,7
   4a8d8:	14016916 	blt	r2,r16,4ae80 <___vfprintf_internal_r+0x161c>
   4a8dc:	44800204 	addi	r18,r8,8
   4a8e0:	d9013717 	ldw	r4,1244(sp)
   4a8e4:	d9413917 	ldw	r5,1252(sp)
   4a8e8:	000d883a 	mov	r6,zero
   4a8ec:	000f883a 	mov	r7,zero
   4a8f0:	d8c13d15 	stw	r3,1268(sp)
   4a8f4:	00534100 	call	53410 <__eqdf2>
   4a8f8:	d8c13d17 	ldw	r3,1268(sp)
   4a8fc:	db013317 	ldw	r12,1228(sp)
   4a900:	1000ae26 	beq	r2,zero,4abbc <___vfprintf_internal_r+0x1358>
   4a904:	dac13117 	ldw	r11,1220(sp)
   4a908:	60bfffc4 	addi	r2,r12,-1
   4a90c:	1887883a 	add	r3,r3,r2
   4a910:	59000044 	addi	r4,r11,1
   4a914:	84000044 	addi	r16,r16,1
   4a918:	90800115 	stw	r2,4(r18)
   4a91c:	91000015 	stw	r4,0(r18)
   4a920:	d8c12015 	stw	r3,1152(sp)
   4a924:	dc011f15 	stw	r16,1148(sp)
   4a928:	008001c4 	movi	r2,7
   4a92c:	14014216 	blt	r2,r16,4ae38 <___vfprintf_internal_r+0x15d4>
   4a930:	94800204 	addi	r18,r18,8
   4a934:	dac13a17 	ldw	r11,1256(sp)
   4a938:	dd4122c4 	addi	r21,sp,1163
   4a93c:	84000044 	addi	r16,r16,1
   4a940:	58c7883a 	add	r3,r11,r3
   4a944:	95400015 	stw	r21,0(r18)
   4a948:	92c00115 	stw	r11,4(r18)
   4a94c:	d8c12015 	stw	r3,1152(sp)
   4a950:	dc011f15 	stw	r16,1148(sp)
   4a954:	008001c4 	movi	r2,7
   4a958:	14000e16 	blt	r2,r16,4a994 <___vfprintf_internal_r+0x1130>
   4a95c:	92000204 	addi	r8,r18,8
   4a960:	003de706 	br	4a100 <__alt_data_end+0xfffe3000>
   4a964:	010001b4 	movhi	r4,6
   4a968:	212b5ac4 	addi	r4,r4,-21141
   4a96c:	d9012c15 	stw	r4,1200(sp)
   4a970:	dac12c17 	ldw	r11,1200(sp)
   4a974:	1c07883a 	add	r3,r3,r16
   4a978:	44000115 	stw	r16,4(r8)
   4a97c:	42c00015 	stw	r11,0(r8)
   4a980:	10800044 	addi	r2,r2,1
   4a984:	d8c12015 	stw	r3,1152(sp)
   4a988:	d8811f15 	stw	r2,1148(sp)
   4a98c:	010001c4 	movi	r4,7
   4a990:	20bdda0e 	bge	r4,r2,4a0fc <__alt_data_end+0xfffe2ffc>
   4a994:	b009883a 	mov	r4,r22
   4a998:	b80b883a 	mov	r5,r23
   4a99c:	d9811e04 	addi	r6,sp,1144
   4a9a0:	004fd040 	call	4fd04 <__sprint_r>
   4a9a4:	103cc61e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4a9a8:	d8c12017 	ldw	r3,1152(sp)
   4a9ac:	da000404 	addi	r8,sp,16
   4a9b0:	003dd306 	br	4a100 <__alt_data_end+0xfffe3000>
   4a9b4:	b009883a 	mov	r4,r22
   4a9b8:	b80b883a 	mov	r5,r23
   4a9bc:	d9811e04 	addi	r6,sp,1144
   4a9c0:	004fd040 	call	4fd04 <__sprint_r>
   4a9c4:	103e0926 	beq	r2,zero,4a1ec <__alt_data_end+0xfffe30ec>
   4a9c8:	003cbd06 	br	49cc0 <__alt_data_end+0xfffe2bc0>
   4a9cc:	10803fcc 	andi	r2,r2,255
   4a9d0:	1000651e 	bne	r2,zero,4ab68 <___vfprintf_internal_r+0x1304>
   4a9d4:	8880004c 	andi	r2,r17,1
   4a9d8:	10013226 	beq	r2,zero,4aea4 <___vfprintf_internal_r+0x1640>
   4a9dc:	00800c04 	movi	r2,48
   4a9e0:	d8c10dc4 	addi	r3,sp,1079
   4a9e4:	d8810dc5 	stb	r2,1079(sp)
   4a9e8:	dc813c17 	ldw	r18,1264(sp)
   4a9ec:	d8c13115 	stw	r3,1220(sp)
   4a9f0:	003d2b06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4a9f4:	b009883a 	mov	r4,r22
   4a9f8:	b80b883a 	mov	r5,r23
   4a9fc:	d9811e04 	addi	r6,sp,1144
   4aa00:	004fd040 	call	4fd04 <__sprint_r>
   4aa04:	103cae1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4aa08:	d8c12017 	ldw	r3,1152(sp)
   4aa0c:	da000404 	addi	r8,sp,16
   4aa10:	003dae06 	br	4a0cc <__alt_data_end+0xfffe2fcc>
   4aa14:	b009883a 	mov	r4,r22
   4aa18:	b80b883a 	mov	r5,r23
   4aa1c:	d9811e04 	addi	r6,sp,1144
   4aa20:	004fd040 	call	4fd04 <__sprint_r>
   4aa24:	103ca61e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4aa28:	d8c12017 	ldw	r3,1152(sp)
   4aa2c:	da000404 	addi	r8,sp,16
   4aa30:	003d6c06 	br	49fe4 <__alt_data_end+0xfffe2ee4>
   4aa34:	b009883a 	mov	r4,r22
   4aa38:	b80b883a 	mov	r5,r23
   4aa3c:	d9811e04 	addi	r6,sp,1144
   4aa40:	004fd040 	call	4fd04 <__sprint_r>
   4aa44:	103c9e1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4aa48:	d8c12017 	ldw	r3,1152(sp)
   4aa4c:	da000404 	addi	r8,sp,16
   4aa50:	003d7206 	br	4a01c <__alt_data_end+0xfffe2f1c>
   4aa54:	d9413b17 	ldw	r5,1260(sp)
   4aa58:	d8c10e04 	addi	r3,sp,1080
   4aa5c:	988003cc 	andi	r2,r19,15
   4aa60:	e008973a 	slli	r4,fp,28
   4aa64:	2885883a 	add	r2,r5,r2
   4aa68:	9826d13a 	srli	r19,r19,4
   4aa6c:	10800003 	ldbu	r2,0(r2)
   4aa70:	e038d13a 	srli	fp,fp,4
   4aa74:	18ffffc4 	addi	r3,r3,-1
   4aa78:	24e6b03a 	or	r19,r4,r19
   4aa7c:	18800005 	stb	r2,0(r3)
   4aa80:	9f04b03a 	or	r2,r19,fp
   4aa84:	103ff51e 	bne	r2,zero,4aa5c <__alt_data_end+0xfffe395c>
   4aa88:	db012817 	ldw	r12,1184(sp)
   4aa8c:	d8c13115 	stw	r3,1220(sp)
   4aa90:	60e5c83a 	sub	r18,r12,r3
   4aa94:	003d0206 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4aa98:	dc012617 	ldw	r16,1176(sp)
   4aa9c:	0401b10e 	bge	zero,r16,4b164 <___vfprintf_internal_r+0x1900>
   4aaa0:	db013117 	ldw	r12,1220(sp)
   4aaa4:	dac13317 	ldw	r11,1228(sp)
   4aaa8:	62e1883a 	add	r16,r12,r11
   4aaac:	db013417 	ldw	r12,1232(sp)
   4aab0:	5825883a 	mov	r18,r11
   4aab4:	62c0010e 	bge	r12,r11,4aabc <___vfprintf_internal_r+0x1258>
   4aab8:	6025883a 	mov	r18,r12
   4aabc:	04800b0e 	bge	zero,r18,4aaec <___vfprintf_internal_r+0x1288>
   4aac0:	d8811f17 	ldw	r2,1148(sp)
   4aac4:	dac13117 	ldw	r11,1220(sp)
   4aac8:	1c87883a 	add	r3,r3,r18
   4aacc:	10800044 	addi	r2,r2,1
   4aad0:	42c00015 	stw	r11,0(r8)
   4aad4:	44800115 	stw	r18,4(r8)
   4aad8:	d8c12015 	stw	r3,1152(sp)
   4aadc:	d8811f15 	stw	r2,1148(sp)
   4aae0:	010001c4 	movi	r4,7
   4aae4:	20824f16 	blt	r4,r2,4b424 <___vfprintf_internal_r+0x1bc0>
   4aae8:	42000204 	addi	r8,r8,8
   4aaec:	90024b16 	blt	r18,zero,4b41c <___vfprintf_internal_r+0x1bb8>
   4aaf0:	db013417 	ldw	r12,1232(sp)
   4aaf4:	64a5c83a 	sub	r18,r12,r18
   4aaf8:	0480730e 	bge	zero,r18,4acc8 <___vfprintf_internal_r+0x1464>
   4aafc:	05400404 	movi	r21,16
   4ab00:	d8811f17 	ldw	r2,1148(sp)
   4ab04:	ac817d0e 	bge	r21,r18,4b0fc <___vfprintf_internal_r+0x1898>
   4ab08:	014001b4 	movhi	r5,6
   4ab0c:	296b5ac4 	addi	r5,r5,-21141
   4ab10:	d9412c15 	stw	r5,1200(sp)
   4ab14:	070001c4 	movi	fp,7
   4ab18:	00000306 	br	4ab28 <___vfprintf_internal_r+0x12c4>
   4ab1c:	42000204 	addi	r8,r8,8
   4ab20:	94bffc04 	addi	r18,r18,-16
   4ab24:	ac81780e 	bge	r21,r18,4b108 <___vfprintf_internal_r+0x18a4>
   4ab28:	18c00404 	addi	r3,r3,16
   4ab2c:	10800044 	addi	r2,r2,1
   4ab30:	45000015 	stw	r20,0(r8)
   4ab34:	45400115 	stw	r21,4(r8)
   4ab38:	d8c12015 	stw	r3,1152(sp)
   4ab3c:	d8811f15 	stw	r2,1148(sp)
   4ab40:	e0bff60e 	bge	fp,r2,4ab1c <__alt_data_end+0xfffe3a1c>
   4ab44:	b009883a 	mov	r4,r22
   4ab48:	b80b883a 	mov	r5,r23
   4ab4c:	d9811e04 	addi	r6,sp,1144
   4ab50:	004fd040 	call	4fd04 <__sprint_r>
   4ab54:	103c5a1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ab58:	d8c12017 	ldw	r3,1152(sp)
   4ab5c:	d8811f17 	ldw	r2,1148(sp)
   4ab60:	da000404 	addi	r8,sp,16
   4ab64:	003fee06 	br	4ab20 <__alt_data_end+0xfffe3a20>
   4ab68:	dac10e04 	addi	r11,sp,1080
   4ab6c:	0025883a 	mov	r18,zero
   4ab70:	dac13115 	stw	r11,1220(sp)
   4ab74:	003cca06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4ab78:	b009883a 	mov	r4,r22
   4ab7c:	b80b883a 	mov	r5,r23
   4ab80:	d9811e04 	addi	r6,sp,1144
   4ab84:	004fd040 	call	4fd04 <__sprint_r>
   4ab88:	103c4d1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ab8c:	d8c12017 	ldw	r3,1152(sp)
   4ab90:	d8812787 	ldb	r2,1182(sp)
   4ab94:	da000404 	addi	r8,sp,16
   4ab98:	003d0506 	br	49fb0 <__alt_data_end+0xfffe2eb0>
   4ab9c:	dac12d17 	ldw	r11,1204(sp)
   4aba0:	14c00017 	ldw	r19,0(r2)
   4aba4:	0039883a 	mov	fp,zero
   4aba8:	5ac00104 	addi	r11,r11,4
   4abac:	dac12d15 	stw	r11,1204(sp)
   4abb0:	0005883a 	mov	r2,zero
   4abb4:	9807883a 	mov	r3,r19
   4abb8:	003c9c06 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4abbc:	657fffc4 	addi	r21,r12,-1
   4abc0:	057f5c0e 	bge	zero,r21,4a934 <__alt_data_end+0xfffe3834>
   4abc4:	07000404 	movi	fp,16
   4abc8:	e5408f0e 	bge	fp,r21,4ae08 <___vfprintf_internal_r+0x15a4>
   4abcc:	010001b4 	movhi	r4,6
   4abd0:	212b5ac4 	addi	r4,r4,-21141
   4abd4:	d9012c15 	stw	r4,1200(sp)
   4abd8:	01c001c4 	movi	r7,7
   4abdc:	00000306 	br	4abec <___vfprintf_internal_r+0x1388>
   4abe0:	94800204 	addi	r18,r18,8
   4abe4:	ad7ffc04 	addi	r21,r21,-16
   4abe8:	e5408a0e 	bge	fp,r21,4ae14 <___vfprintf_internal_r+0x15b0>
   4abec:	18c00404 	addi	r3,r3,16
   4abf0:	84000044 	addi	r16,r16,1
   4abf4:	95000015 	stw	r20,0(r18)
   4abf8:	97000115 	stw	fp,4(r18)
   4abfc:	d8c12015 	stw	r3,1152(sp)
   4ac00:	dc011f15 	stw	r16,1148(sp)
   4ac04:	3c3ff60e 	bge	r7,r16,4abe0 <__alt_data_end+0xfffe3ae0>
   4ac08:	b009883a 	mov	r4,r22
   4ac0c:	b80b883a 	mov	r5,r23
   4ac10:	d9811e04 	addi	r6,sp,1144
   4ac14:	d9c13d15 	stw	r7,1268(sp)
   4ac18:	004fd040 	call	4fd04 <__sprint_r>
   4ac1c:	d9c13d17 	ldw	r7,1268(sp)
   4ac20:	103c271e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ac24:	d8c12017 	ldw	r3,1152(sp)
   4ac28:	dc011f17 	ldw	r16,1148(sp)
   4ac2c:	dc800404 	addi	r18,sp,16
   4ac30:	003fec06 	br	4abe4 <__alt_data_end+0xfffe3ae4>
   4ac34:	1cc00017 	ldw	r19,0(r3)
   4ac38:	dac12d17 	ldw	r11,1204(sp)
   4ac3c:	9839d7fa 	srai	fp,r19,31
   4ac40:	5ac00104 	addi	r11,r11,4
   4ac44:	dac12d15 	stw	r11,1204(sp)
   4ac48:	e005883a 	mov	r2,fp
   4ac4c:	003d9006 	br	4a290 <__alt_data_end+0xfffe3190>
   4ac50:	00800084 	movi	r2,2
   4ac54:	9f06b03a 	or	r3,r19,fp
   4ac58:	003c7406 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4ac5c:	db012d17 	ldw	r12,1204(sp)
   4ac60:	14c00017 	ldw	r19,0(r2)
   4ac64:	0039883a 	mov	fp,zero
   4ac68:	63000104 	addi	r12,r12,4
   4ac6c:	db012d15 	stw	r12,1204(sp)
   4ac70:	00800044 	movi	r2,1
   4ac74:	9807883a 	mov	r3,r19
   4ac78:	003c6c06 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4ac7c:	10803fcc 	andi	r2,r2,255
   4ac80:	1080201c 	xori	r2,r2,128
   4ac84:	10bfe004 	addi	r2,r2,-128
   4ac88:	01000c04 	movi	r4,48
   4ac8c:	1101a526 	beq	r2,r4,4b324 <___vfprintf_internal_r+0x1ac0>
   4ac90:	dac13117 	ldw	r11,1220(sp)
   4ac94:	db012817 	ldw	r12,1184(sp)
   4ac98:	193fffc5 	stb	r4,-1(r3)
   4ac9c:	5affffc4 	addi	r11,r11,-1
   4aca0:	dac13115 	stw	r11,1220(sp)
   4aca4:	62e5c83a 	sub	r18,r12,r11
   4aca8:	003c7d06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4acac:	b009883a 	mov	r4,r22
   4acb0:	b80b883a 	mov	r5,r23
   4acb4:	d9811e04 	addi	r6,sp,1144
   4acb8:	004fd040 	call	4fd04 <__sprint_r>
   4acbc:	103c001e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4acc0:	d8c12017 	ldw	r3,1152(sp)
   4acc4:	da000404 	addi	r8,sp,16
   4acc8:	db013117 	ldw	r12,1220(sp)
   4accc:	dac13417 	ldw	r11,1232(sp)
   4acd0:	d8812617 	ldw	r2,1176(sp)
   4acd4:	62e5883a 	add	r18,r12,r11
   4acd8:	db013317 	ldw	r12,1228(sp)
   4acdc:	13000216 	blt	r2,r12,4ace8 <___vfprintf_internal_r+0x1484>
   4ace0:	8900004c 	andi	r4,r17,1
   4ace4:	20000c26 	beq	r4,zero,4ad18 <___vfprintf_internal_r+0x14b4>
   4ace8:	dac13817 	ldw	r11,1248(sp)
   4acec:	d9011f17 	ldw	r4,1148(sp)
   4acf0:	db013517 	ldw	r12,1236(sp)
   4acf4:	1ac7883a 	add	r3,r3,r11
   4acf8:	21000044 	addi	r4,r4,1
   4acfc:	43000015 	stw	r12,0(r8)
   4ad00:	42c00115 	stw	r11,4(r8)
   4ad04:	d8c12015 	stw	r3,1152(sp)
   4ad08:	d9011f15 	stw	r4,1148(sp)
   4ad0c:	014001c4 	movi	r5,7
   4ad10:	2901cc16 	blt	r5,r4,4b444 <___vfprintf_internal_r+0x1be0>
   4ad14:	42000204 	addi	r8,r8,8
   4ad18:	dac13317 	ldw	r11,1228(sp)
   4ad1c:	8489c83a 	sub	r4,r16,r18
   4ad20:	5885c83a 	sub	r2,r11,r2
   4ad24:	1021883a 	mov	r16,r2
   4ad28:	2080010e 	bge	r4,r2,4ad30 <___vfprintf_internal_r+0x14cc>
   4ad2c:	2021883a 	mov	r16,r4
   4ad30:	04000a0e 	bge	zero,r16,4ad5c <___vfprintf_internal_r+0x14f8>
   4ad34:	d9011f17 	ldw	r4,1148(sp)
   4ad38:	1c07883a 	add	r3,r3,r16
   4ad3c:	44800015 	stw	r18,0(r8)
   4ad40:	21000044 	addi	r4,r4,1
   4ad44:	44000115 	stw	r16,4(r8)
   4ad48:	d8c12015 	stw	r3,1152(sp)
   4ad4c:	d9011f15 	stw	r4,1148(sp)
   4ad50:	014001c4 	movi	r5,7
   4ad54:	2901d616 	blt	r5,r4,4b4b0 <___vfprintf_internal_r+0x1c4c>
   4ad58:	42000204 	addi	r8,r8,8
   4ad5c:	8001df16 	blt	r16,zero,4b4dc <___vfprintf_internal_r+0x1c78>
   4ad60:	1421c83a 	sub	r16,r2,r16
   4ad64:	043ce60e 	bge	zero,r16,4a100 <__alt_data_end+0xfffe3000>
   4ad68:	04800404 	movi	r18,16
   4ad6c:	d8811f17 	ldw	r2,1148(sp)
   4ad70:	943efc0e 	bge	r18,r16,4a964 <__alt_data_end+0xfffe3864>
   4ad74:	014001b4 	movhi	r5,6
   4ad78:	296b5ac4 	addi	r5,r5,-21141
   4ad7c:	d9412c15 	stw	r5,1200(sp)
   4ad80:	054001c4 	movi	r21,7
   4ad84:	00000306 	br	4ad94 <___vfprintf_internal_r+0x1530>
   4ad88:	42000204 	addi	r8,r8,8
   4ad8c:	843ffc04 	addi	r16,r16,-16
   4ad90:	943ef70e 	bge	r18,r16,4a970 <__alt_data_end+0xfffe3870>
   4ad94:	18c00404 	addi	r3,r3,16
   4ad98:	10800044 	addi	r2,r2,1
   4ad9c:	45000015 	stw	r20,0(r8)
   4ada0:	44800115 	stw	r18,4(r8)
   4ada4:	d8c12015 	stw	r3,1152(sp)
   4ada8:	d8811f15 	stw	r2,1148(sp)
   4adac:	a8bff60e 	bge	r21,r2,4ad88 <__alt_data_end+0xfffe3c88>
   4adb0:	b009883a 	mov	r4,r22
   4adb4:	b80b883a 	mov	r5,r23
   4adb8:	d9811e04 	addi	r6,sp,1144
   4adbc:	004fd040 	call	4fd04 <__sprint_r>
   4adc0:	103bbf1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4adc4:	d8c12017 	ldw	r3,1152(sp)
   4adc8:	d8811f17 	ldw	r2,1148(sp)
   4adcc:	da000404 	addi	r8,sp,16
   4add0:	003fee06 	br	4ad8c <__alt_data_end+0xfffe3c8c>
   4add4:	8888703a 	and	r4,r17,r2
   4add8:	203eab1e 	bne	r4,zero,4a888 <__alt_data_end+0xfffe3788>
   4addc:	dc011f17 	ldw	r16,1148(sp)
   4ade0:	db013117 	ldw	r12,1220(sp)
   4ade4:	40800115 	stw	r2,4(r8)
   4ade8:	84000044 	addi	r16,r16,1
   4adec:	43000015 	stw	r12,0(r8)
   4adf0:	d8c12015 	stw	r3,1152(sp)
   4adf4:	dc011f15 	stw	r16,1148(sp)
   4adf8:	008001c4 	movi	r2,7
   4adfc:	14000e16 	blt	r2,r16,4ae38 <___vfprintf_internal_r+0x15d4>
   4ae00:	44800204 	addi	r18,r8,8
   4ae04:	003ecb06 	br	4a934 <__alt_data_end+0xfffe3834>
   4ae08:	008001b4 	movhi	r2,6
   4ae0c:	10ab5ac4 	addi	r2,r2,-21141
   4ae10:	d8812c15 	stw	r2,1200(sp)
   4ae14:	dac12c17 	ldw	r11,1200(sp)
   4ae18:	1d47883a 	add	r3,r3,r21
   4ae1c:	84000044 	addi	r16,r16,1
   4ae20:	92c00015 	stw	r11,0(r18)
   4ae24:	95400115 	stw	r21,4(r18)
   4ae28:	d8c12015 	stw	r3,1152(sp)
   4ae2c:	dc011f15 	stw	r16,1148(sp)
   4ae30:	008001c4 	movi	r2,7
   4ae34:	143ebe0e 	bge	r2,r16,4a930 <__alt_data_end+0xfffe3830>
   4ae38:	b009883a 	mov	r4,r22
   4ae3c:	b80b883a 	mov	r5,r23
   4ae40:	d9811e04 	addi	r6,sp,1144
   4ae44:	004fd040 	call	4fd04 <__sprint_r>
   4ae48:	103b9d1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ae4c:	d8c12017 	ldw	r3,1152(sp)
   4ae50:	dc011f17 	ldw	r16,1148(sp)
   4ae54:	dc800404 	addi	r18,sp,16
   4ae58:	003eb606 	br	4a934 <__alt_data_end+0xfffe3834>
   4ae5c:	b009883a 	mov	r4,r22
   4ae60:	b80b883a 	mov	r5,r23
   4ae64:	d9811e04 	addi	r6,sp,1144
   4ae68:	004fd040 	call	4fd04 <__sprint_r>
   4ae6c:	103b941e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ae70:	d8c12017 	ldw	r3,1152(sp)
   4ae74:	dc011f17 	ldw	r16,1148(sp)
   4ae78:	da000404 	addi	r8,sp,16
   4ae7c:	003e8d06 	br	4a8b4 <__alt_data_end+0xfffe37b4>
   4ae80:	b009883a 	mov	r4,r22
   4ae84:	b80b883a 	mov	r5,r23
   4ae88:	d9811e04 	addi	r6,sp,1144
   4ae8c:	004fd040 	call	4fd04 <__sprint_r>
   4ae90:	103b8b1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4ae94:	d8c12017 	ldw	r3,1152(sp)
   4ae98:	dc011f17 	ldw	r16,1148(sp)
   4ae9c:	dc800404 	addi	r18,sp,16
   4aea0:	003e8f06 	br	4a8e0 <__alt_data_end+0xfffe37e0>
   4aea4:	db010e04 	addi	r12,sp,1080
   4aea8:	0025883a 	mov	r18,zero
   4aeac:	db013115 	stw	r12,1220(sp)
   4aeb0:	003bfb06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4aeb4:	b009883a 	mov	r4,r22
   4aeb8:	b80b883a 	mov	r5,r23
   4aebc:	d9811e04 	addi	r6,sp,1144
   4aec0:	004fd040 	call	4fd04 <__sprint_r>
   4aec4:	103b7e1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4aec8:	d8c12017 	ldw	r3,1152(sp)
   4aecc:	da000404 	addi	r8,sp,16
   4aed0:	003c5506 	br	4a028 <__alt_data_end+0xfffe2f28>
   4aed4:	04e7c83a 	sub	r19,zero,r19
   4aed8:	9804c03a 	cmpne	r2,r19,zero
   4aedc:	0739c83a 	sub	fp,zero,fp
   4aee0:	e0b9c83a 	sub	fp,fp,r2
   4aee4:	05400b44 	movi	r21,45
   4aee8:	dd412785 	stb	r21,1182(sp)
   4aeec:	da413215 	stw	r9,1224(sp)
   4aef0:	00800044 	movi	r2,1
   4aef4:	9f06b03a 	or	r3,r19,fp
   4aef8:	003bcf06 	br	49e38 <__alt_data_end+0xfffe2d38>
   4aefc:	da013f15 	stw	r8,1276(sp)
   4af00:	da413e15 	stw	r9,1272(sp)
   4af04:	004faf00 	call	4faf0 <__fpclassifyd>
   4af08:	da013f17 	ldw	r8,1276(sp)
   4af0c:	da413e17 	ldw	r9,1272(sp)
   4af10:	1000ce26 	beq	r2,zero,4b24c <___vfprintf_internal_r+0x19e8>
   4af14:	057ff7c4 	movi	r21,-33
   4af18:	00bfffc4 	movi	r2,-1
   4af1c:	856a703a 	and	r21,r16,r21
   4af20:	4881f026 	beq	r9,r2,4b6e4 <___vfprintf_internal_r+0x1e80>
   4af24:	008011c4 	movi	r2,71
   4af28:	a881e526 	beq	r21,r2,4b6c0 <___vfprintf_internal_r+0x1e5c>
   4af2c:	db013917 	ldw	r12,1252(sp)
   4af30:	8ac04014 	ori	r11,r17,256
   4af34:	dac12d15 	stw	r11,1204(sp)
   4af38:	6001e416 	blt	r12,zero,4b6cc <___vfprintf_internal_r+0x1e68>
   4af3c:	dc813917 	ldw	r18,1252(sp)
   4af40:	d8012b05 	stb	zero,1196(sp)
   4af44:	00801984 	movi	r2,102
   4af48:	80811826 	beq	r16,r2,4b3ac <___vfprintf_internal_r+0x1b48>
   4af4c:	00801184 	movi	r2,70
   4af50:	80811626 	beq	r16,r2,4b3ac <___vfprintf_internal_r+0x1b48>
   4af54:	00801144 	movi	r2,69
   4af58:	a881e026 	beq	r21,r2,4b6dc <___vfprintf_internal_r+0x1e78>
   4af5c:	4839883a 	mov	fp,r9
   4af60:	d8812604 	addi	r2,sp,1176
   4af64:	d8800115 	stw	r2,4(sp)
   4af68:	d9413717 	ldw	r5,1244(sp)
   4af6c:	d8812504 	addi	r2,sp,1172
   4af70:	d8800215 	stw	r2,8(sp)
   4af74:	d8812104 	addi	r2,sp,1156
   4af78:	df000015 	stw	fp,0(sp)
   4af7c:	d8800315 	stw	r2,12(sp)
   4af80:	b009883a 	mov	r4,r22
   4af84:	900d883a 	mov	r6,r18
   4af88:	01c00084 	movi	r7,2
   4af8c:	da013f15 	stw	r8,1276(sp)
   4af90:	da413e15 	stw	r9,1272(sp)
   4af94:	004bc640 	call	4bc64 <_dtoa_r>
   4af98:	d8813115 	stw	r2,1220(sp)
   4af9c:	008019c4 	movi	r2,103
   4afa0:	da013f17 	ldw	r8,1276(sp)
   4afa4:	da413e17 	ldw	r9,1272(sp)
   4afa8:	80800226 	beq	r16,r2,4afb4 <___vfprintf_internal_r+0x1750>
   4afac:	008011c4 	movi	r2,71
   4afb0:	8081101e 	bne	r16,r2,4b3f4 <___vfprintf_internal_r+0x1b90>
   4afb4:	8880004c 	andi	r2,r17,1
   4afb8:	1001df26 	beq	r2,zero,4b738 <___vfprintf_internal_r+0x1ed4>
   4afbc:	db013117 	ldw	r12,1220(sp)
   4afc0:	6715883a 	add	r10,r12,fp
   4afc4:	d9013717 	ldw	r4,1244(sp)
   4afc8:	900b883a 	mov	r5,r18
   4afcc:	000d883a 	mov	r6,zero
   4afd0:	000f883a 	mov	r7,zero
   4afd4:	da013f15 	stw	r8,1276(sp)
   4afd8:	da413e15 	stw	r9,1272(sp)
   4afdc:	da813d15 	stw	r10,1268(sp)
   4afe0:	00534100 	call	53410 <__eqdf2>
   4afe4:	da013f17 	ldw	r8,1276(sp)
   4afe8:	da413e17 	ldw	r9,1272(sp)
   4afec:	da813d17 	ldw	r10,1268(sp)
   4aff0:	10016526 	beq	r2,zero,4b588 <___vfprintf_internal_r+0x1d24>
   4aff4:	d8812117 	ldw	r2,1156(sp)
   4aff8:	1280062e 	bgeu	r2,r10,4b014 <___vfprintf_internal_r+0x17b0>
   4affc:	01000c04 	movi	r4,48
   4b000:	10c00044 	addi	r3,r2,1
   4b004:	d8c12115 	stw	r3,1156(sp)
   4b008:	11000005 	stb	r4,0(r2)
   4b00c:	d8812117 	ldw	r2,1156(sp)
   4b010:	12bffb36 	bltu	r2,r10,4b000 <__alt_data_end+0xfffe3f00>
   4b014:	db013117 	ldw	r12,1220(sp)
   4b018:	1305c83a 	sub	r2,r2,r12
   4b01c:	d8813315 	stw	r2,1228(sp)
   4b020:	008011c4 	movi	r2,71
   4b024:	a8814a26 	beq	r21,r2,4b550 <___vfprintf_internal_r+0x1cec>
   4b028:	00801944 	movi	r2,101
   4b02c:	14020a0e 	bge	r2,r16,4b858 <___vfprintf_internal_r+0x1ff4>
   4b030:	00801984 	movi	r2,102
   4b034:	8081b626 	beq	r16,r2,4b710 <___vfprintf_internal_r+0x1eac>
   4b038:	db012617 	ldw	r12,1176(sp)
   4b03c:	db013415 	stw	r12,1232(sp)
   4b040:	db013417 	ldw	r12,1232(sp)
   4b044:	dac13317 	ldw	r11,1228(sp)
   4b048:	62c1a816 	blt	r12,r11,4b6ec <___vfprintf_internal_r+0x1e88>
   4b04c:	8c40004c 	andi	r17,r17,1
   4b050:	8801ca1e 	bne	r17,zero,4b77c <___vfprintf_internal_r+0x1f18>
   4b054:	6005883a 	mov	r2,r12
   4b058:	6001b516 	blt	r12,zero,4b730 <___vfprintf_internal_r+0x1ecc>
   4b05c:	dc813417 	ldw	r18,1232(sp)
   4b060:	df012b07 	ldb	fp,1196(sp)
   4b064:	e001321e 	bne	fp,zero,4b530 <___vfprintf_internal_r+0x1ccc>
   4b068:	dc412d17 	ldw	r17,1204(sp)
   4b06c:	dd412783 	ldbu	r21,1182(sp)
   4b070:	d8812b15 	stw	r2,1196(sp)
   4b074:	dcc12d15 	stw	r19,1204(sp)
   4b078:	d8013215 	stw	zero,1224(sp)
   4b07c:	003b8d06 	br	49eb4 <__alt_data_end+0xfffe2db4>
   4b080:	88c0100c 	andi	r3,r17,64
   4b084:	18008226 	beq	r3,zero,4b290 <___vfprintf_internal_r+0x1a2c>
   4b088:	dac12d17 	ldw	r11,1204(sp)
   4b08c:	14c0000b 	ldhu	r19,0(r2)
   4b090:	0039883a 	mov	fp,zero
   4b094:	5ac00104 	addi	r11,r11,4
   4b098:	dac12d15 	stw	r11,1204(sp)
   4b09c:	003c8f06 	br	4a2dc <__alt_data_end+0xfffe31dc>
   4b0a0:	1c000007 	ldb	r16,0(r3)
   4b0a4:	1805883a 	mov	r2,r3
   4b0a8:	003a5506 	br	49a00 <__alt_data_end+0xfffe2900>
   4b0ac:	00800084 	movi	r2,2
   4b0b0:	003b5e06 	br	49e2c <__alt_data_end+0xfffe2d2c>
   4b0b4:	8880040c 	andi	r2,r17,16
   4b0b8:	1000091e 	bne	r2,zero,4b0e0 <___vfprintf_internal_r+0x187c>
   4b0bc:	8c40100c 	andi	r17,r17,64
   4b0c0:	88000726 	beq	r17,zero,4b0e0 <___vfprintf_internal_r+0x187c>
   4b0c4:	db012d17 	ldw	r12,1204(sp)
   4b0c8:	dac12f17 	ldw	r11,1212(sp)
   4b0cc:	60800017 	ldw	r2,0(r12)
   4b0d0:	63000104 	addi	r12,r12,4
   4b0d4:	db012d15 	stw	r12,1204(sp)
   4b0d8:	12c0000d 	sth	r11,0(r2)
   4b0dc:	003a1e06 	br	49958 <__alt_data_end+0xfffe2858>
   4b0e0:	db012d17 	ldw	r12,1204(sp)
   4b0e4:	dac12f17 	ldw	r11,1212(sp)
   4b0e8:	60800017 	ldw	r2,0(r12)
   4b0ec:	63000104 	addi	r12,r12,4
   4b0f0:	db012d15 	stw	r12,1204(sp)
   4b0f4:	12c00015 	stw	r11,0(r2)
   4b0f8:	003a1706 	br	49958 <__alt_data_end+0xfffe2858>
   4b0fc:	010001b4 	movhi	r4,6
   4b100:	212b5ac4 	addi	r4,r4,-21141
   4b104:	d9012c15 	stw	r4,1200(sp)
   4b108:	dac12c17 	ldw	r11,1200(sp)
   4b10c:	1c87883a 	add	r3,r3,r18
   4b110:	10800044 	addi	r2,r2,1
   4b114:	42c00015 	stw	r11,0(r8)
   4b118:	44800115 	stw	r18,4(r8)
   4b11c:	d8c12015 	stw	r3,1152(sp)
   4b120:	d8811f15 	stw	r2,1148(sp)
   4b124:	010001c4 	movi	r4,7
   4b128:	20bee016 	blt	r4,r2,4acac <__alt_data_end+0xfffe3bac>
   4b12c:	42000204 	addi	r8,r8,8
   4b130:	003ee506 	br	4acc8 <__alt_data_end+0xfffe3bc8>
   4b134:	010001b4 	movhi	r4,6
   4b138:	212b5ac4 	addi	r4,r4,-21141
   4b13c:	d9012c15 	stw	r4,1200(sp)
   4b140:	003bd806 	br	4a0a4 <__alt_data_end+0xfffe2fa4>
   4b144:	b009883a 	mov	r4,r22
   4b148:	b80b883a 	mov	r5,r23
   4b14c:	d9811e04 	addi	r6,sp,1144
   4b150:	004fd040 	call	4fd04 <__sprint_r>
   4b154:	103ada1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b158:	d8c12017 	ldw	r3,1152(sp)
   4b15c:	da000404 	addi	r8,sp,16
   4b160:	003d6b06 	br	4a710 <__alt_data_end+0xfffe3610>
   4b164:	d8811f17 	ldw	r2,1148(sp)
   4b168:	030001b4 	movhi	r12,6
   4b16c:	01000044 	movi	r4,1
   4b170:	18c00044 	addi	r3,r3,1
   4b174:	10800044 	addi	r2,r2,1
   4b178:	6325ee04 	addi	r12,r12,-26696
   4b17c:	41000115 	stw	r4,4(r8)
   4b180:	43000015 	stw	r12,0(r8)
   4b184:	d8c12015 	stw	r3,1152(sp)
   4b188:	d8811f15 	stw	r2,1148(sp)
   4b18c:	010001c4 	movi	r4,7
   4b190:	20804916 	blt	r4,r2,4b2b8 <___vfprintf_internal_r+0x1a54>
   4b194:	42000204 	addi	r8,r8,8
   4b198:	8000041e 	bne	r16,zero,4b1ac <___vfprintf_internal_r+0x1948>
   4b19c:	dac13317 	ldw	r11,1228(sp)
   4b1a0:	5800021e 	bne	r11,zero,4b1ac <___vfprintf_internal_r+0x1948>
   4b1a4:	8880004c 	andi	r2,r17,1
   4b1a8:	103bd526 	beq	r2,zero,4a100 <__alt_data_end+0xfffe3000>
   4b1ac:	db013817 	ldw	r12,1248(sp)
   4b1b0:	d8811f17 	ldw	r2,1148(sp)
   4b1b4:	dac13517 	ldw	r11,1236(sp)
   4b1b8:	1b07883a 	add	r3,r3,r12
   4b1bc:	10800044 	addi	r2,r2,1
   4b1c0:	42c00015 	stw	r11,0(r8)
   4b1c4:	43000115 	stw	r12,4(r8)
   4b1c8:	d8c12015 	stw	r3,1152(sp)
   4b1cc:	d8811f15 	stw	r2,1148(sp)
   4b1d0:	010001c4 	movi	r4,7
   4b1d4:	20813016 	blt	r4,r2,4b698 <___vfprintf_internal_r+0x1e34>
   4b1d8:	42000204 	addi	r8,r8,8
   4b1dc:	0421c83a 	sub	r16,zero,r16
   4b1e0:	0400630e 	bge	zero,r16,4b370 <___vfprintf_internal_r+0x1b0c>
   4b1e4:	04800404 	movi	r18,16
   4b1e8:	94009f0e 	bge	r18,r16,4b468 <___vfprintf_internal_r+0x1c04>
   4b1ec:	010001b4 	movhi	r4,6
   4b1f0:	212b5ac4 	addi	r4,r4,-21141
   4b1f4:	d9012c15 	stw	r4,1200(sp)
   4b1f8:	054001c4 	movi	r21,7
   4b1fc:	00000306 	br	4b20c <___vfprintf_internal_r+0x19a8>
   4b200:	42000204 	addi	r8,r8,8
   4b204:	843ffc04 	addi	r16,r16,-16
   4b208:	94009a0e 	bge	r18,r16,4b474 <___vfprintf_internal_r+0x1c10>
   4b20c:	18c00404 	addi	r3,r3,16
   4b210:	10800044 	addi	r2,r2,1
   4b214:	45000015 	stw	r20,0(r8)
   4b218:	44800115 	stw	r18,4(r8)
   4b21c:	d8c12015 	stw	r3,1152(sp)
   4b220:	d8811f15 	stw	r2,1148(sp)
   4b224:	a8bff60e 	bge	r21,r2,4b200 <__alt_data_end+0xfffe4100>
   4b228:	b009883a 	mov	r4,r22
   4b22c:	b80b883a 	mov	r5,r23
   4b230:	d9811e04 	addi	r6,sp,1144
   4b234:	004fd040 	call	4fd04 <__sprint_r>
   4b238:	103aa11e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b23c:	d8c12017 	ldw	r3,1152(sp)
   4b240:	d8811f17 	ldw	r2,1148(sp)
   4b244:	da000404 	addi	r8,sp,16
   4b248:	003fee06 	br	4b204 <__alt_data_end+0xfffe4104>
   4b24c:	008011c4 	movi	r2,71
   4b250:	1400b316 	blt	r2,r16,4b520 <___vfprintf_internal_r+0x1cbc>
   4b254:	030001b4 	movhi	r12,6
   4b258:	632b4d04 	addi	r12,r12,-21196
   4b25c:	db013115 	stw	r12,1220(sp)
   4b260:	00c000c4 	movi	r3,3
   4b264:	00bfdfc4 	movi	r2,-129
   4b268:	d8c12b15 	stw	r3,1196(sp)
   4b26c:	88a2703a 	and	r17,r17,r2
   4b270:	dd412783 	ldbu	r21,1182(sp)
   4b274:	dcc12d15 	stw	r19,1204(sp)
   4b278:	1825883a 	mov	r18,r3
   4b27c:	d8013215 	stw	zero,1224(sp)
   4b280:	d8013415 	stw	zero,1232(sp)
   4b284:	003b0b06 	br	49eb4 <__alt_data_end+0xfffe2db4>
   4b288:	4825883a 	mov	r18,r9
   4b28c:	003cba06 	br	4a578 <__alt_data_end+0xfffe3478>
   4b290:	db012d17 	ldw	r12,1204(sp)
   4b294:	14c00017 	ldw	r19,0(r2)
   4b298:	0039883a 	mov	fp,zero
   4b29c:	63000104 	addi	r12,r12,4
   4b2a0:	db012d15 	stw	r12,1204(sp)
   4b2a4:	003c0d06 	br	4a2dc <__alt_data_end+0xfffe31dc>
   4b2a8:	008001b4 	movhi	r2,6
   4b2ac:	10ab4b04 	addi	r2,r2,-21204
   4b2b0:	d8813115 	stw	r2,1220(sp)
   4b2b4:	003ac406 	br	49dc8 <__alt_data_end+0xfffe2cc8>
   4b2b8:	b009883a 	mov	r4,r22
   4b2bc:	b80b883a 	mov	r5,r23
   4b2c0:	d9811e04 	addi	r6,sp,1144
   4b2c4:	004fd040 	call	4fd04 <__sprint_r>
   4b2c8:	103a7d1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b2cc:	dc012617 	ldw	r16,1176(sp)
   4b2d0:	d8c12017 	ldw	r3,1152(sp)
   4b2d4:	da000404 	addi	r8,sp,16
   4b2d8:	003faf06 	br	4b198 <__alt_data_end+0xfffe4098>
   4b2dc:	db012e17 	ldw	r12,1208(sp)
   4b2e0:	1805883a 	mov	r2,r3
   4b2e4:	dac12d15 	stw	r11,1204(sp)
   4b2e8:	0319c83a 	sub	r12,zero,r12
   4b2ec:	db012e15 	stw	r12,1208(sp)
   4b2f0:	003a7e06 	br	49cec <__alt_data_end+0xfffe2bec>
   4b2f4:	18800044 	addi	r2,r3,1
   4b2f8:	8c400814 	ori	r17,r17,32
   4b2fc:	1c000047 	ldb	r16,1(r3)
   4b300:	0039bf06 	br	49a00 <__alt_data_end+0xfffe2900>
   4b304:	b009883a 	mov	r4,r22
   4b308:	b80b883a 	mov	r5,r23
   4b30c:	d9811e04 	addi	r6,sp,1144
   4b310:	004fd040 	call	4fd04 <__sprint_r>
   4b314:	103a6a1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b318:	d8c12017 	ldw	r3,1152(sp)
   4b31c:	da000404 	addi	r8,sp,16
   4b320:	003d0c06 	br	4a754 <__alt_data_end+0xfffe3654>
   4b324:	db012817 	ldw	r12,1184(sp)
   4b328:	d8c13117 	ldw	r3,1220(sp)
   4b32c:	60e5c83a 	sub	r18,r12,r3
   4b330:	003adb06 	br	49ea0 <__alt_data_end+0xfffe2da0>
   4b334:	da013f15 	stw	r8,1276(sp)
   4b338:	00494340 	call	49434 <strlen>
   4b33c:	1025883a 	mov	r18,r2
   4b340:	da013f17 	ldw	r8,1276(sp)
   4b344:	903c8e0e 	bge	r18,zero,4a580 <__alt_data_end+0xfffe3480>
   4b348:	0005883a 	mov	r2,zero
   4b34c:	003c8c06 	br	4a580 <__alt_data_end+0xfffe3480>
   4b350:	b009883a 	mov	r4,r22
   4b354:	b80b883a 	mov	r5,r23
   4b358:	d9811e04 	addi	r6,sp,1144
   4b35c:	004fd040 	call	4fd04 <__sprint_r>
   4b360:	103a571e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b364:	d8c12017 	ldw	r3,1152(sp)
   4b368:	d8811f17 	ldw	r2,1148(sp)
   4b36c:	da000404 	addi	r8,sp,16
   4b370:	db013317 	ldw	r12,1228(sp)
   4b374:	dac13117 	ldw	r11,1220(sp)
   4b378:	10800044 	addi	r2,r2,1
   4b37c:	60c7883a 	add	r3,r12,r3
   4b380:	42c00015 	stw	r11,0(r8)
   4b384:	43000115 	stw	r12,4(r8)
   4b388:	d8c12015 	stw	r3,1152(sp)
   4b38c:	d8811f15 	stw	r2,1148(sp)
   4b390:	010001c4 	movi	r4,7
   4b394:	20bb590e 	bge	r4,r2,4a0fc <__alt_data_end+0xfffe2ffc>
   4b398:	003d7e06 	br	4a994 <__alt_data_end+0xfffe3894>
   4b39c:	010001b4 	movhi	r4,6
   4b3a0:	212b5ec4 	addi	r4,r4,-21125
   4b3a4:	d9013615 	stw	r4,1240(sp)
   4b3a8:	003af606 	br	49f84 <__alt_data_end+0xfffe2e84>
   4b3ac:	d8812604 	addi	r2,sp,1176
   4b3b0:	d8800115 	stw	r2,4(sp)
   4b3b4:	d9413717 	ldw	r5,1244(sp)
   4b3b8:	d8812504 	addi	r2,sp,1172
   4b3bc:	d8800215 	stw	r2,8(sp)
   4b3c0:	d8812104 	addi	r2,sp,1156
   4b3c4:	da400015 	stw	r9,0(sp)
   4b3c8:	d8800315 	stw	r2,12(sp)
   4b3cc:	b009883a 	mov	r4,r22
   4b3d0:	900d883a 	mov	r6,r18
   4b3d4:	01c000c4 	movi	r7,3
   4b3d8:	da013f15 	stw	r8,1276(sp)
   4b3dc:	da413e15 	stw	r9,1272(sp)
   4b3e0:	004bc640 	call	4bc64 <_dtoa_r>
   4b3e4:	da413e17 	ldw	r9,1272(sp)
   4b3e8:	da013f17 	ldw	r8,1276(sp)
   4b3ec:	d8813115 	stw	r2,1220(sp)
   4b3f0:	4839883a 	mov	fp,r9
   4b3f4:	dac13117 	ldw	r11,1220(sp)
   4b3f8:	00801184 	movi	r2,70
   4b3fc:	5f15883a 	add	r10,r11,fp
   4b400:	a8bef01e 	bne	r21,r2,4afc4 <__alt_data_end+0xfffe3ec4>
   4b404:	59000007 	ldb	r4,0(r11)
   4b408:	00800c04 	movi	r2,48
   4b40c:	2080e026 	beq	r4,r2,4b790 <___vfprintf_internal_r+0x1f2c>
   4b410:	d8c12617 	ldw	r3,1176(sp)
   4b414:	50d5883a 	add	r10,r10,r3
   4b418:	003eea06 	br	4afc4 <__alt_data_end+0xfffe3ec4>
   4b41c:	0025883a 	mov	r18,zero
   4b420:	003db306 	br	4aaf0 <__alt_data_end+0xfffe39f0>
   4b424:	b009883a 	mov	r4,r22
   4b428:	b80b883a 	mov	r5,r23
   4b42c:	d9811e04 	addi	r6,sp,1144
   4b430:	004fd040 	call	4fd04 <__sprint_r>
   4b434:	103a221e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b438:	d8c12017 	ldw	r3,1152(sp)
   4b43c:	da000404 	addi	r8,sp,16
   4b440:	003daa06 	br	4aaec <__alt_data_end+0xfffe39ec>
   4b444:	b009883a 	mov	r4,r22
   4b448:	b80b883a 	mov	r5,r23
   4b44c:	d9811e04 	addi	r6,sp,1144
   4b450:	004fd040 	call	4fd04 <__sprint_r>
   4b454:	103a1a1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b458:	d8812617 	ldw	r2,1176(sp)
   4b45c:	d8c12017 	ldw	r3,1152(sp)
   4b460:	da000404 	addi	r8,sp,16
   4b464:	003e2c06 	br	4ad18 <__alt_data_end+0xfffe3c18>
   4b468:	030001b4 	movhi	r12,6
   4b46c:	632b5ac4 	addi	r12,r12,-21141
   4b470:	db012c15 	stw	r12,1200(sp)
   4b474:	dac12c17 	ldw	r11,1200(sp)
   4b478:	1c07883a 	add	r3,r3,r16
   4b47c:	10800044 	addi	r2,r2,1
   4b480:	42c00015 	stw	r11,0(r8)
   4b484:	44000115 	stw	r16,4(r8)
   4b488:	d8c12015 	stw	r3,1152(sp)
   4b48c:	d8811f15 	stw	r2,1148(sp)
   4b490:	010001c4 	movi	r4,7
   4b494:	20bfae16 	blt	r4,r2,4b350 <__alt_data_end+0xfffe4250>
   4b498:	42000204 	addi	r8,r8,8
   4b49c:	003fb406 	br	4b370 <__alt_data_end+0xfffe4270>
   4b4a0:	030001b4 	movhi	r12,6
   4b4a4:	632b5ec4 	addi	r12,r12,-21125
   4b4a8:	db013615 	stw	r12,1240(sp)
   4b4ac:	003b3806 	br	4a190 <__alt_data_end+0xfffe3090>
   4b4b0:	b009883a 	mov	r4,r22
   4b4b4:	b80b883a 	mov	r5,r23
   4b4b8:	d9811e04 	addi	r6,sp,1144
   4b4bc:	004fd040 	call	4fd04 <__sprint_r>
   4b4c0:	1039ff1e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b4c4:	d8812617 	ldw	r2,1176(sp)
   4b4c8:	db013317 	ldw	r12,1228(sp)
   4b4cc:	d8c12017 	ldw	r3,1152(sp)
   4b4d0:	da000404 	addi	r8,sp,16
   4b4d4:	6085c83a 	sub	r2,r12,r2
   4b4d8:	003e2006 	br	4ad5c <__alt_data_end+0xfffe3c5c>
   4b4dc:	0021883a 	mov	r16,zero
   4b4e0:	003e1f06 	br	4ad60 <__alt_data_end+0xfffe3c60>
   4b4e4:	00800184 	movi	r2,6
   4b4e8:	1240012e 	bgeu	r2,r9,4b4f0 <___vfprintf_internal_r+0x1c8c>
   4b4ec:	1013883a 	mov	r9,r2
   4b4f0:	4825883a 	mov	r18,r9
   4b4f4:	4805883a 	mov	r2,r9
   4b4f8:	48009e16 	blt	r9,zero,4b774 <___vfprintf_internal_r+0x1f10>
   4b4fc:	d8812b15 	stw	r2,1196(sp)
   4b500:	008001b4 	movhi	r2,6
   4b504:	10ab5904 	addi	r2,r2,-21148
   4b508:	d8813115 	stw	r2,1220(sp)
   4b50c:	dcc12d15 	stw	r19,1204(sp)
   4b510:	d8013215 	stw	zero,1224(sp)
   4b514:	d8013415 	stw	zero,1232(sp)
   4b518:	0005883a 	mov	r2,zero
   4b51c:	003a6c06 	br	49ed0 <__alt_data_end+0xfffe2dd0>
   4b520:	008001b4 	movhi	r2,6
   4b524:	10ab4e04 	addi	r2,r2,-21192
   4b528:	d8813115 	stw	r2,1220(sp)
   4b52c:	003f4c06 	br	4b260 <__alt_data_end+0xfffe4160>
   4b530:	00c00b44 	movi	r3,45
   4b534:	d8812b15 	stw	r2,1196(sp)
   4b538:	dc412d17 	ldw	r17,1204(sp)
   4b53c:	d8c12785 	stb	r3,1182(sp)
   4b540:	dcc12d15 	stw	r19,1204(sp)
   4b544:	d8013215 	stw	zero,1224(sp)
   4b548:	00800b44 	movi	r2,45
   4b54c:	003a5d06 	br	49ec4 <__alt_data_end+0xfffe2dc4>
   4b550:	d8c12617 	ldw	r3,1176(sp)
   4b554:	00bfff44 	movi	r2,-3
   4b558:	18800d16 	blt	r3,r2,4b590 <___vfprintf_internal_r+0x1d2c>
   4b55c:	48c00c16 	blt	r9,r3,4b590 <___vfprintf_internal_r+0x1d2c>
   4b560:	d8c13415 	stw	r3,1232(sp)
   4b564:	040019c4 	movi	r16,103
   4b568:	003eb506 	br	4b040 <__alt_data_end+0xfffe3f40>
   4b56c:	05400b44 	movi	r21,45
   4b570:	dd412785 	stb	r21,1182(sp)
   4b574:	003a0f06 	br	49db4 <__alt_data_end+0xfffe2cb4>
   4b578:	010001b4 	movhi	r4,6
   4b57c:	212b5ac4 	addi	r4,r4,-21141
   4b580:	d9012c15 	stw	r4,1200(sp)
   4b584:	003cb106 	br	4a84c <__alt_data_end+0xfffe374c>
   4b588:	5005883a 	mov	r2,r10
   4b58c:	003ea106 	br	4b014 <__alt_data_end+0xfffe3f14>
   4b590:	843fff84 	addi	r16,r16,-2
   4b594:	1f3fffc4 	addi	fp,r3,-1
   4b598:	df012615 	stw	fp,1176(sp)
   4b59c:	dc0122c5 	stb	r16,1163(sp)
   4b5a0:	e0009516 	blt	fp,zero,4b7f8 <___vfprintf_internal_r+0x1f94>
   4b5a4:	00800ac4 	movi	r2,43
   4b5a8:	d8812305 	stb	r2,1164(sp)
   4b5ac:	00800244 	movi	r2,9
   4b5b0:	1700690e 	bge	r2,fp,4b758 <___vfprintf_internal_r+0x1ef4>
   4b5b4:	dd4122c4 	addi	r21,sp,1163
   4b5b8:	dc012c15 	stw	r16,1200(sp)
   4b5bc:	8825883a 	mov	r18,r17
   4b5c0:	a821883a 	mov	r16,r21
   4b5c4:	4023883a 	mov	r17,r8
   4b5c8:	e009883a 	mov	r4,fp
   4b5cc:	01400284 	movi	r5,10
   4b5d0:	0046d580 	call	46d58 <__modsi3>
   4b5d4:	10800c04 	addi	r2,r2,48
   4b5d8:	843fffc4 	addi	r16,r16,-1
   4b5dc:	e009883a 	mov	r4,fp
   4b5e0:	01400284 	movi	r5,10
   4b5e4:	80800005 	stb	r2,0(r16)
   4b5e8:	0046d040 	call	46d04 <__divsi3>
   4b5ec:	1039883a 	mov	fp,r2
   4b5f0:	00800244 	movi	r2,9
   4b5f4:	173ff416 	blt	r2,fp,4b5c8 <__alt_data_end+0xfffe44c8>
   4b5f8:	8811883a 	mov	r8,r17
   4b5fc:	e0800c04 	addi	r2,fp,48
   4b600:	9023883a 	mov	r17,r18
   4b604:	8025883a 	mov	r18,r16
   4b608:	913fffc4 	addi	r4,r18,-1
   4b60c:	90bfffc5 	stb	r2,-1(r18)
   4b610:	dc012c17 	ldw	r16,1200(sp)
   4b614:	25408e2e 	bgeu	r4,r21,4b850 <___vfprintf_internal_r+0x1fec>
   4b618:	d9412384 	addi	r5,sp,1166
   4b61c:	2c8bc83a 	sub	r5,r5,r18
   4b620:	d8c12344 	addi	r3,sp,1165
   4b624:	a94b883a 	add	r5,r21,r5
   4b628:	00000106 	br	4b630 <___vfprintf_internal_r+0x1dcc>
   4b62c:	20800003 	ldbu	r2,0(r4)
   4b630:	18800005 	stb	r2,0(r3)
   4b634:	18c00044 	addi	r3,r3,1
   4b638:	21000044 	addi	r4,r4,1
   4b63c:	197ffb1e 	bne	r3,r5,4b62c <__alt_data_end+0xfffe452c>
   4b640:	d8812304 	addi	r2,sp,1164
   4b644:	1485c83a 	sub	r2,r2,r18
   4b648:	d8c12344 	addi	r3,sp,1165
   4b64c:	1885883a 	add	r2,r3,r2
   4b650:	dac13317 	ldw	r11,1228(sp)
   4b654:	156bc83a 	sub	r21,r2,r21
   4b658:	dd413a15 	stw	r21,1256(sp)
   4b65c:	00800044 	movi	r2,1
   4b660:	5d65883a 	add	r18,r11,r21
   4b664:	12c0770e 	bge	r2,r11,4b844 <___vfprintf_internal_r+0x1fe0>
   4b668:	94800044 	addi	r18,r18,1
   4b66c:	9005883a 	mov	r2,r18
   4b670:	90007216 	blt	r18,zero,4b83c <___vfprintf_internal_r+0x1fd8>
   4b674:	d8013415 	stw	zero,1232(sp)
   4b678:	003e7906 	br	4b060 <__alt_data_end+0xfffe3f60>
   4b67c:	da412b15 	stw	r9,1196(sp)
   4b680:	dd412783 	ldbu	r21,1182(sp)
   4b684:	4825883a 	mov	r18,r9
   4b688:	dcc12d15 	stw	r19,1204(sp)
   4b68c:	d8013215 	stw	zero,1224(sp)
   4b690:	d8013415 	stw	zero,1232(sp)
   4b694:	003a0706 	br	49eb4 <__alt_data_end+0xfffe2db4>
   4b698:	b009883a 	mov	r4,r22
   4b69c:	b80b883a 	mov	r5,r23
   4b6a0:	d9811e04 	addi	r6,sp,1144
   4b6a4:	004fd040 	call	4fd04 <__sprint_r>
   4b6a8:	1039851e 	bne	r2,zero,49cc0 <__alt_data_end+0xfffe2bc0>
   4b6ac:	dc012617 	ldw	r16,1176(sp)
   4b6b0:	d8c12017 	ldw	r3,1152(sp)
   4b6b4:	d8811f17 	ldw	r2,1148(sp)
   4b6b8:	da000404 	addi	r8,sp,16
   4b6bc:	003ec706 	br	4b1dc <__alt_data_end+0xfffe40dc>
   4b6c0:	483e1a1e 	bne	r9,zero,4af2c <__alt_data_end+0xfffe3e2c>
   4b6c4:	9013883a 	mov	r9,r18
   4b6c8:	003e1806 	br	4af2c <__alt_data_end+0xfffe3e2c>
   4b6cc:	00c00b44 	movi	r3,45
   4b6d0:	64a0003c 	xorhi	r18,r12,32768
   4b6d4:	d8c12b05 	stb	r3,1196(sp)
   4b6d8:	003e1a06 	br	4af44 <__alt_data_end+0xfffe3e44>
   4b6dc:	4f000044 	addi	fp,r9,1
   4b6e0:	003e1f06 	br	4af60 <__alt_data_end+0xfffe3e60>
   4b6e4:	02400184 	movi	r9,6
   4b6e8:	003e1006 	br	4af2c <__alt_data_end+0xfffe3e2c>
   4b6ec:	d8c13417 	ldw	r3,1232(sp)
   4b6f0:	00c04b0e 	bge	zero,r3,4b820 <___vfprintf_internal_r+0x1fbc>
   4b6f4:	04800044 	movi	r18,1
   4b6f8:	dac13317 	ldw	r11,1228(sp)
   4b6fc:	92e5883a 	add	r18,r18,r11
   4b700:	9005883a 	mov	r2,r18
   4b704:	903e560e 	bge	r18,zero,4b060 <__alt_data_end+0xfffe3f60>
   4b708:	0005883a 	mov	r2,zero
   4b70c:	003e5406 	br	4b060 <__alt_data_end+0xfffe3f60>
   4b710:	d8c12617 	ldw	r3,1176(sp)
   4b714:	d8c13415 	stw	r3,1232(sp)
   4b718:	00c03b0e 	bge	zero,r3,4b808 <___vfprintf_internal_r+0x1fa4>
   4b71c:	4800081e 	bne	r9,zero,4b740 <___vfprintf_internal_r+0x1edc>
   4b720:	8c40004c 	andi	r17,r17,1
   4b724:	8800061e 	bne	r17,zero,4b740 <___vfprintf_internal_r+0x1edc>
   4b728:	1805883a 	mov	r2,r3
   4b72c:	183e4b0e 	bge	r3,zero,4b05c <__alt_data_end+0xfffe3f5c>
   4b730:	0005883a 	mov	r2,zero
   4b734:	003e4906 	br	4b05c <__alt_data_end+0xfffe3f5c>
   4b738:	d8812117 	ldw	r2,1156(sp)
   4b73c:	003e3506 	br	4b014 <__alt_data_end+0xfffe3f14>
   4b740:	dac13417 	ldw	r11,1232(sp)
   4b744:	4a400044 	addi	r9,r9,1
   4b748:	5a65883a 	add	r18,r11,r9
   4b74c:	9005883a 	mov	r2,r18
   4b750:	903e430e 	bge	r18,zero,4b060 <__alt_data_end+0xfffe3f60>
   4b754:	003fec06 	br	4b708 <__alt_data_end+0xfffe4608>
   4b758:	00800c04 	movi	r2,48
   4b75c:	e0c00c04 	addi	r3,fp,48
   4b760:	d8812345 	stb	r2,1165(sp)
   4b764:	d8c12385 	stb	r3,1166(sp)
   4b768:	d88123c4 	addi	r2,sp,1167
   4b76c:	dd4122c4 	addi	r21,sp,1163
   4b770:	003fb706 	br	4b650 <__alt_data_end+0xfffe4550>
   4b774:	0005883a 	mov	r2,zero
   4b778:	003f6006 	br	4b4fc <__alt_data_end+0xfffe43fc>
   4b77c:	db013417 	ldw	r12,1232(sp)
   4b780:	64800044 	addi	r18,r12,1
   4b784:	9005883a 	mov	r2,r18
   4b788:	903e350e 	bge	r18,zero,4b060 <__alt_data_end+0xfffe3f60>
   4b78c:	003fde06 	br	4b708 <__alt_data_end+0xfffe4608>
   4b790:	d9013717 	ldw	r4,1244(sp)
   4b794:	900b883a 	mov	r5,r18
   4b798:	000d883a 	mov	r6,zero
   4b79c:	000f883a 	mov	r7,zero
   4b7a0:	da013f15 	stw	r8,1276(sp)
   4b7a4:	da413e15 	stw	r9,1272(sp)
   4b7a8:	da813d15 	stw	r10,1268(sp)
   4b7ac:	00534100 	call	53410 <__eqdf2>
   4b7b0:	da013f17 	ldw	r8,1276(sp)
   4b7b4:	da413e17 	ldw	r9,1272(sp)
   4b7b8:	da813d17 	ldw	r10,1268(sp)
   4b7bc:	103f1426 	beq	r2,zero,4b410 <__alt_data_end+0xfffe4310>
   4b7c0:	00800044 	movi	r2,1
   4b7c4:	1707c83a 	sub	r3,r2,fp
   4b7c8:	d8c12615 	stw	r3,1176(sp)
   4b7cc:	003f1106 	br	4b414 <__alt_data_end+0xfffe4314>
   4b7d0:	dac12d17 	ldw	r11,1204(sp)
   4b7d4:	5a400017 	ldw	r9,0(r11)
   4b7d8:	5ac00104 	addi	r11,r11,4
   4b7dc:	dac12d15 	stw	r11,1204(sp)
   4b7e0:	483ec60e 	bge	r9,zero,4b2fc <__alt_data_end+0xfffe41fc>
   4b7e4:	027fffc4 	movi	r9,-1
   4b7e8:	1c000047 	ldb	r16,1(r3)
   4b7ec:	00388406 	br	49a00 <__alt_data_end+0xfffe2900>
   4b7f0:	043fffc4 	movi	r16,-1
   4b7f4:	00391006 	br	49c38 <__alt_data_end+0xfffe2b38>
   4b7f8:	00800b44 	movi	r2,45
   4b7fc:	0739c83a 	sub	fp,zero,fp
   4b800:	d8812305 	stb	r2,1164(sp)
   4b804:	003f6906 	br	4b5ac <__alt_data_end+0xfffe44ac>
   4b808:	4800081e 	bne	r9,zero,4b82c <___vfprintf_internal_r+0x1fc8>
   4b80c:	8c40004c 	andi	r17,r17,1
   4b810:	8800061e 	bne	r17,zero,4b82c <___vfprintf_internal_r+0x1fc8>
   4b814:	00800044 	movi	r2,1
   4b818:	1025883a 	mov	r18,r2
   4b81c:	003e1006 	br	4b060 <__alt_data_end+0xfffe3f60>
   4b820:	04800084 	movi	r18,2
   4b824:	90e5c83a 	sub	r18,r18,r3
   4b828:	003fb306 	br	4b6f8 <__alt_data_end+0xfffe45f8>
   4b82c:	4c800084 	addi	r18,r9,2
   4b830:	9005883a 	mov	r2,r18
   4b834:	903e0a0e 	bge	r18,zero,4b060 <__alt_data_end+0xfffe3f60>
   4b838:	003fb306 	br	4b708 <__alt_data_end+0xfffe4608>
   4b83c:	0005883a 	mov	r2,zero
   4b840:	003f8c06 	br	4b674 <__alt_data_end+0xfffe4574>
   4b844:	88a2703a 	and	r17,r17,r2
   4b848:	883f8826 	beq	r17,zero,4b66c <__alt_data_end+0xfffe456c>
   4b84c:	003f8606 	br	4b668 <__alt_data_end+0xfffe4568>
   4b850:	d8812344 	addi	r2,sp,1165
   4b854:	003f7e06 	br	4b650 <__alt_data_end+0xfffe4550>
   4b858:	d8c12617 	ldw	r3,1176(sp)
   4b85c:	003f4d06 	br	4b594 <__alt_data_end+0xfffe4494>

0004b860 <__vfprintf_internal>:
   4b860:	2007883a 	mov	r3,r4
   4b864:	010001b4 	movhi	r4,6
   4b868:	21333004 	addi	r4,r4,-13120
   4b86c:	21000017 	ldw	r4,0(r4)
   4b870:	2805883a 	mov	r2,r5
   4b874:	300f883a 	mov	r7,r6
   4b878:	180b883a 	mov	r5,r3
   4b87c:	100d883a 	mov	r6,r2
   4b880:	00498641 	jmpi	49864 <___vfprintf_internal_r>

0004b884 <_write_r>:
   4b884:	defffd04 	addi	sp,sp,-12
   4b888:	dc000015 	stw	r16,0(sp)
   4b88c:	040001b4 	movhi	r16,6
   4b890:	dc400115 	stw	r17,4(sp)
   4b894:	843a1e04 	addi	r16,r16,-6024
   4b898:	2023883a 	mov	r17,r4
   4b89c:	2809883a 	mov	r4,r5
   4b8a0:	300b883a 	mov	r5,r6
   4b8a4:	380d883a 	mov	r6,r7
   4b8a8:	dfc00215 	stw	ra,8(sp)
   4b8ac:	80000015 	stw	zero,0(r16)
   4b8b0:	00553f00 	call	553f0 <write>
   4b8b4:	00ffffc4 	movi	r3,-1
   4b8b8:	10c00526 	beq	r2,r3,4b8d0 <_write_r+0x4c>
   4b8bc:	dfc00217 	ldw	ra,8(sp)
   4b8c0:	dc400117 	ldw	r17,4(sp)
   4b8c4:	dc000017 	ldw	r16,0(sp)
   4b8c8:	dec00304 	addi	sp,sp,12
   4b8cc:	f800283a 	ret
   4b8d0:	80c00017 	ldw	r3,0(r16)
   4b8d4:	183ff926 	beq	r3,zero,4b8bc <__alt_data_end+0xfffe47bc>
   4b8d8:	88c00015 	stw	r3,0(r17)
   4b8dc:	003ff706 	br	4b8bc <__alt_data_end+0xfffe47bc>

0004b8e0 <__swsetup_r>:
   4b8e0:	008001b4 	movhi	r2,6
   4b8e4:	defffd04 	addi	sp,sp,-12
   4b8e8:	10b33004 	addi	r2,r2,-13120
   4b8ec:	dc400115 	stw	r17,4(sp)
   4b8f0:	2023883a 	mov	r17,r4
   4b8f4:	11000017 	ldw	r4,0(r2)
   4b8f8:	dc000015 	stw	r16,0(sp)
   4b8fc:	dfc00215 	stw	ra,8(sp)
   4b900:	2821883a 	mov	r16,r5
   4b904:	20000226 	beq	r4,zero,4b910 <__swsetup_r+0x30>
   4b908:	20c00e17 	ldw	r3,56(r4)
   4b90c:	18002e26 	beq	r3,zero,4b9c8 <__swsetup_r+0xe8>
   4b910:	8080030b 	ldhu	r2,12(r16)
   4b914:	10c0020c 	andi	r3,r2,8
   4b918:	100d883a 	mov	r6,r2
   4b91c:	18000f26 	beq	r3,zero,4b95c <__swsetup_r+0x7c>
   4b920:	80c00417 	ldw	r3,16(r16)
   4b924:	18001526 	beq	r3,zero,4b97c <__swsetup_r+0x9c>
   4b928:	1100004c 	andi	r4,r2,1
   4b92c:	20001c1e 	bne	r4,zero,4b9a0 <__swsetup_r+0xc0>
   4b930:	1080008c 	andi	r2,r2,2
   4b934:	1000261e 	bne	r2,zero,4b9d0 <__swsetup_r+0xf0>
   4b938:	80800517 	ldw	r2,20(r16)
   4b93c:	80800215 	stw	r2,8(r16)
   4b940:	18001c26 	beq	r3,zero,4b9b4 <__swsetup_r+0xd4>
   4b944:	0005883a 	mov	r2,zero
   4b948:	dfc00217 	ldw	ra,8(sp)
   4b94c:	dc400117 	ldw	r17,4(sp)
   4b950:	dc000017 	ldw	r16,0(sp)
   4b954:	dec00304 	addi	sp,sp,12
   4b958:	f800283a 	ret
   4b95c:	3080040c 	andi	r2,r6,16
   4b960:	10001726 	beq	r2,zero,4b9c0 <__swsetup_r+0xe0>
   4b964:	3080010c 	andi	r2,r6,4
   4b968:	10001b1e 	bne	r2,zero,4b9d8 <__swsetup_r+0xf8>
   4b96c:	80c00417 	ldw	r3,16(r16)
   4b970:	30800214 	ori	r2,r6,8
   4b974:	8080030d 	sth	r2,12(r16)
   4b978:	183feb1e 	bne	r3,zero,4b928 <__alt_data_end+0xfffe4828>
   4b97c:	1140a00c 	andi	r5,r2,640
   4b980:	01008004 	movi	r4,512
   4b984:	293fe826 	beq	r5,r4,4b928 <__alt_data_end+0xfffe4828>
   4b988:	8809883a 	mov	r4,r17
   4b98c:	800b883a 	mov	r5,r16
   4b990:	004e0ec0 	call	4e0ec <__smakebuf_r>
   4b994:	8080030b 	ldhu	r2,12(r16)
   4b998:	80c00417 	ldw	r3,16(r16)
   4b99c:	003fe206 	br	4b928 <__alt_data_end+0xfffe4828>
   4b9a0:	80800517 	ldw	r2,20(r16)
   4b9a4:	80000215 	stw	zero,8(r16)
   4b9a8:	0085c83a 	sub	r2,zero,r2
   4b9ac:	80800615 	stw	r2,24(r16)
   4b9b0:	183fe41e 	bne	r3,zero,4b944 <__alt_data_end+0xfffe4844>
   4b9b4:	8080030b 	ldhu	r2,12(r16)
   4b9b8:	1080200c 	andi	r2,r2,128
   4b9bc:	103fe226 	beq	r2,zero,4b948 <__alt_data_end+0xfffe4848>
   4b9c0:	00bfffc4 	movi	r2,-1
   4b9c4:	003fe006 	br	4b948 <__alt_data_end+0xfffe4848>
   4b9c8:	00482640 	call	48264 <__sinit>
   4b9cc:	003fd006 	br	4b910 <__alt_data_end+0xfffe4810>
   4b9d0:	0005883a 	mov	r2,zero
   4b9d4:	003fd906 	br	4b93c <__alt_data_end+0xfffe483c>
   4b9d8:	81400c17 	ldw	r5,48(r16)
   4b9dc:	28000626 	beq	r5,zero,4b9f8 <__swsetup_r+0x118>
   4b9e0:	80801004 	addi	r2,r16,64
   4b9e4:	28800326 	beq	r5,r2,4b9f4 <__swsetup_r+0x114>
   4b9e8:	8809883a 	mov	r4,r17
   4b9ec:	004d81c0 	call	4d81c <_free_r>
   4b9f0:	8180030b 	ldhu	r6,12(r16)
   4b9f4:	80000c15 	stw	zero,48(r16)
   4b9f8:	80c00417 	ldw	r3,16(r16)
   4b9fc:	00bff6c4 	movi	r2,-37
   4ba00:	118c703a 	and	r6,r2,r6
   4ba04:	80000115 	stw	zero,4(r16)
   4ba08:	80c00015 	stw	r3,0(r16)
   4ba0c:	003fd806 	br	4b970 <__alt_data_end+0xfffe4870>

0004ba10 <_close_r>:
   4ba10:	defffd04 	addi	sp,sp,-12
   4ba14:	dc000015 	stw	r16,0(sp)
   4ba18:	040001b4 	movhi	r16,6
   4ba1c:	dc400115 	stw	r17,4(sp)
   4ba20:	843a1e04 	addi	r16,r16,-6024
   4ba24:	2023883a 	mov	r17,r4
   4ba28:	2809883a 	mov	r4,r5
   4ba2c:	dfc00215 	stw	ra,8(sp)
   4ba30:	80000015 	stw	zero,0(r16)
   4ba34:	00548940 	call	54894 <close>
   4ba38:	00ffffc4 	movi	r3,-1
   4ba3c:	10c00526 	beq	r2,r3,4ba54 <_close_r+0x44>
   4ba40:	dfc00217 	ldw	ra,8(sp)
   4ba44:	dc400117 	ldw	r17,4(sp)
   4ba48:	dc000017 	ldw	r16,0(sp)
   4ba4c:	dec00304 	addi	sp,sp,12
   4ba50:	f800283a 	ret
   4ba54:	80c00017 	ldw	r3,0(r16)
   4ba58:	183ff926 	beq	r3,zero,4ba40 <__alt_data_end+0xfffe4940>
   4ba5c:	88c00015 	stw	r3,0(r17)
   4ba60:	003ff706 	br	4ba40 <__alt_data_end+0xfffe4940>

0004ba64 <quorem>:
   4ba64:	defff704 	addi	sp,sp,-36
   4ba68:	dc800215 	stw	r18,8(sp)
   4ba6c:	20800417 	ldw	r2,16(r4)
   4ba70:	2c800417 	ldw	r18,16(r5)
   4ba74:	dfc00815 	stw	ra,32(sp)
   4ba78:	ddc00715 	stw	r23,28(sp)
   4ba7c:	dd800615 	stw	r22,24(sp)
   4ba80:	dd400515 	stw	r21,20(sp)
   4ba84:	dd000415 	stw	r20,16(sp)
   4ba88:	dcc00315 	stw	r19,12(sp)
   4ba8c:	dc400115 	stw	r17,4(sp)
   4ba90:	dc000015 	stw	r16,0(sp)
   4ba94:	14807116 	blt	r2,r18,4bc5c <quorem+0x1f8>
   4ba98:	94bfffc4 	addi	r18,r18,-1
   4ba9c:	94ad883a 	add	r22,r18,r18
   4baa0:	b5ad883a 	add	r22,r22,r22
   4baa4:	2c400504 	addi	r17,r5,20
   4baa8:	8da9883a 	add	r20,r17,r22
   4baac:	25400504 	addi	r21,r4,20
   4bab0:	282f883a 	mov	r23,r5
   4bab4:	adad883a 	add	r22,r21,r22
   4bab8:	a1400017 	ldw	r5,0(r20)
   4babc:	2021883a 	mov	r16,r4
   4bac0:	b1000017 	ldw	r4,0(r22)
   4bac4:	29400044 	addi	r5,r5,1
   4bac8:	0046db40 	call	46db4 <__udivsi3>
   4bacc:	1027883a 	mov	r19,r2
   4bad0:	10002c26 	beq	r2,zero,4bb84 <quorem+0x120>
   4bad4:	a813883a 	mov	r9,r21
   4bad8:	8811883a 	mov	r8,r17
   4badc:	0009883a 	mov	r4,zero
   4bae0:	000d883a 	mov	r6,zero
   4bae4:	41c00017 	ldw	r7,0(r8)
   4bae8:	49400017 	ldw	r5,0(r9)
   4baec:	42000104 	addi	r8,r8,4
   4baf0:	38bfffcc 	andi	r2,r7,65535
   4baf4:	14c5383a 	mul	r2,r2,r19
   4baf8:	380ed43a 	srli	r7,r7,16
   4bafc:	28ffffcc 	andi	r3,r5,65535
   4bb00:	2085883a 	add	r2,r4,r2
   4bb04:	1008d43a 	srli	r4,r2,16
   4bb08:	3ccf383a 	mul	r7,r7,r19
   4bb0c:	198d883a 	add	r6,r3,r6
   4bb10:	10ffffcc 	andi	r3,r2,65535
   4bb14:	30c7c83a 	sub	r3,r6,r3
   4bb18:	280ad43a 	srli	r5,r5,16
   4bb1c:	21c9883a 	add	r4,r4,r7
   4bb20:	180dd43a 	srai	r6,r3,16
   4bb24:	20bfffcc 	andi	r2,r4,65535
   4bb28:	288bc83a 	sub	r5,r5,r2
   4bb2c:	298b883a 	add	r5,r5,r6
   4bb30:	280e943a 	slli	r7,r5,16
   4bb34:	18ffffcc 	andi	r3,r3,65535
   4bb38:	2008d43a 	srli	r4,r4,16
   4bb3c:	38ceb03a 	or	r7,r7,r3
   4bb40:	49c00015 	stw	r7,0(r9)
   4bb44:	280dd43a 	srai	r6,r5,16
   4bb48:	4a400104 	addi	r9,r9,4
   4bb4c:	a23fe52e 	bgeu	r20,r8,4bae4 <__alt_data_end+0xfffe49e4>
   4bb50:	b0800017 	ldw	r2,0(r22)
   4bb54:	10000b1e 	bne	r2,zero,4bb84 <quorem+0x120>
   4bb58:	b0bfff04 	addi	r2,r22,-4
   4bb5c:	a880082e 	bgeu	r21,r2,4bb80 <quorem+0x11c>
   4bb60:	b0ffff17 	ldw	r3,-4(r22)
   4bb64:	18000326 	beq	r3,zero,4bb74 <quorem+0x110>
   4bb68:	00000506 	br	4bb80 <quorem+0x11c>
   4bb6c:	10c00017 	ldw	r3,0(r2)
   4bb70:	1800031e 	bne	r3,zero,4bb80 <quorem+0x11c>
   4bb74:	10bfff04 	addi	r2,r2,-4
   4bb78:	94bfffc4 	addi	r18,r18,-1
   4bb7c:	a8bffb36 	bltu	r21,r2,4bb6c <__alt_data_end+0xfffe4a6c>
   4bb80:	84800415 	stw	r18,16(r16)
   4bb84:	8009883a 	mov	r4,r16
   4bb88:	b80b883a 	mov	r5,r23
   4bb8c:	004ecc00 	call	4ecc0 <__mcmp>
   4bb90:	10002616 	blt	r2,zero,4bc2c <quorem+0x1c8>
   4bb94:	9cc00044 	addi	r19,r19,1
   4bb98:	a80d883a 	mov	r6,r21
   4bb9c:	000b883a 	mov	r5,zero
   4bba0:	31000017 	ldw	r4,0(r6)
   4bba4:	88800017 	ldw	r2,0(r17)
   4bba8:	31800104 	addi	r6,r6,4
   4bbac:	20ffffcc 	andi	r3,r4,65535
   4bbb0:	194b883a 	add	r5,r3,r5
   4bbb4:	10ffffcc 	andi	r3,r2,65535
   4bbb8:	28c7c83a 	sub	r3,r5,r3
   4bbbc:	1004d43a 	srli	r2,r2,16
   4bbc0:	2008d43a 	srli	r4,r4,16
   4bbc4:	180bd43a 	srai	r5,r3,16
   4bbc8:	18ffffcc 	andi	r3,r3,65535
   4bbcc:	2089c83a 	sub	r4,r4,r2
   4bbd0:	2149883a 	add	r4,r4,r5
   4bbd4:	2004943a 	slli	r2,r4,16
   4bbd8:	8c400104 	addi	r17,r17,4
   4bbdc:	200bd43a 	srai	r5,r4,16
   4bbe0:	10c6b03a 	or	r3,r2,r3
   4bbe4:	30ffff15 	stw	r3,-4(r6)
   4bbe8:	a47fed2e 	bgeu	r20,r17,4bba0 <__alt_data_end+0xfffe4aa0>
   4bbec:	9485883a 	add	r2,r18,r18
   4bbf0:	1085883a 	add	r2,r2,r2
   4bbf4:	a887883a 	add	r3,r21,r2
   4bbf8:	18800017 	ldw	r2,0(r3)
   4bbfc:	10000b1e 	bne	r2,zero,4bc2c <quorem+0x1c8>
   4bc00:	18bfff04 	addi	r2,r3,-4
   4bc04:	a880082e 	bgeu	r21,r2,4bc28 <quorem+0x1c4>
   4bc08:	18ffff17 	ldw	r3,-4(r3)
   4bc0c:	18000326 	beq	r3,zero,4bc1c <quorem+0x1b8>
   4bc10:	00000506 	br	4bc28 <quorem+0x1c4>
   4bc14:	10c00017 	ldw	r3,0(r2)
   4bc18:	1800031e 	bne	r3,zero,4bc28 <quorem+0x1c4>
   4bc1c:	10bfff04 	addi	r2,r2,-4
   4bc20:	94bfffc4 	addi	r18,r18,-1
   4bc24:	a8bffb36 	bltu	r21,r2,4bc14 <__alt_data_end+0xfffe4b14>
   4bc28:	84800415 	stw	r18,16(r16)
   4bc2c:	9805883a 	mov	r2,r19
   4bc30:	dfc00817 	ldw	ra,32(sp)
   4bc34:	ddc00717 	ldw	r23,28(sp)
   4bc38:	dd800617 	ldw	r22,24(sp)
   4bc3c:	dd400517 	ldw	r21,20(sp)
   4bc40:	dd000417 	ldw	r20,16(sp)
   4bc44:	dcc00317 	ldw	r19,12(sp)
   4bc48:	dc800217 	ldw	r18,8(sp)
   4bc4c:	dc400117 	ldw	r17,4(sp)
   4bc50:	dc000017 	ldw	r16,0(sp)
   4bc54:	dec00904 	addi	sp,sp,36
   4bc58:	f800283a 	ret
   4bc5c:	0005883a 	mov	r2,zero
   4bc60:	003ff306 	br	4bc30 <__alt_data_end+0xfffe4b30>

0004bc64 <_dtoa_r>:
   4bc64:	20801017 	ldw	r2,64(r4)
   4bc68:	deffde04 	addi	sp,sp,-136
   4bc6c:	dd401d15 	stw	r21,116(sp)
   4bc70:	dcc01b15 	stw	r19,108(sp)
   4bc74:	dc801a15 	stw	r18,104(sp)
   4bc78:	dc401915 	stw	r17,100(sp)
   4bc7c:	dc001815 	stw	r16,96(sp)
   4bc80:	dfc02115 	stw	ra,132(sp)
   4bc84:	df002015 	stw	fp,128(sp)
   4bc88:	ddc01f15 	stw	r23,124(sp)
   4bc8c:	dd801e15 	stw	r22,120(sp)
   4bc90:	dd001c15 	stw	r20,112(sp)
   4bc94:	d9c00315 	stw	r7,12(sp)
   4bc98:	2021883a 	mov	r16,r4
   4bc9c:	302b883a 	mov	r21,r6
   4bca0:	2825883a 	mov	r18,r5
   4bca4:	dc402417 	ldw	r17,144(sp)
   4bca8:	3027883a 	mov	r19,r6
   4bcac:	10000826 	beq	r2,zero,4bcd0 <_dtoa_r+0x6c>
   4bcb0:	21801117 	ldw	r6,68(r4)
   4bcb4:	00c00044 	movi	r3,1
   4bcb8:	100b883a 	mov	r5,r2
   4bcbc:	1986983a 	sll	r3,r3,r6
   4bcc0:	11800115 	stw	r6,4(r2)
   4bcc4:	10c00215 	stw	r3,8(r2)
   4bcc8:	004e4a80 	call	4e4a8 <_Bfree>
   4bccc:	80001015 	stw	zero,64(r16)
   4bcd0:	a8002d16 	blt	r21,zero,4bd88 <_dtoa_r+0x124>
   4bcd4:	88000015 	stw	zero,0(r17)
   4bcd8:	a8dffc2c 	andhi	r3,r21,32752
   4bcdc:	009ffc34 	movhi	r2,32752
   4bce0:	18801b26 	beq	r3,r2,4bd50 <_dtoa_r+0xec>
   4bce4:	9009883a 	mov	r4,r18
   4bce8:	980b883a 	mov	r5,r19
   4bcec:	000d883a 	mov	r6,zero
   4bcf0:	000f883a 	mov	r7,zero
   4bcf4:	00534100 	call	53410 <__eqdf2>
   4bcf8:	10002a1e 	bne	r2,zero,4bda4 <_dtoa_r+0x140>
   4bcfc:	d8c02317 	ldw	r3,140(sp)
   4bd00:	d9002517 	ldw	r4,148(sp)
   4bd04:	00800044 	movi	r2,1
   4bd08:	18800015 	stw	r2,0(r3)
   4bd0c:	2001a226 	beq	r4,zero,4c398 <_dtoa_r+0x734>
   4bd10:	008001b4 	movhi	r2,6
   4bd14:	10a5ee44 	addi	r2,r2,-26695
   4bd18:	20800015 	stw	r2,0(r4)
   4bd1c:	10bfffc4 	addi	r2,r2,-1
   4bd20:	dfc02117 	ldw	ra,132(sp)
   4bd24:	df002017 	ldw	fp,128(sp)
   4bd28:	ddc01f17 	ldw	r23,124(sp)
   4bd2c:	dd801e17 	ldw	r22,120(sp)
   4bd30:	dd401d17 	ldw	r21,116(sp)
   4bd34:	dd001c17 	ldw	r20,112(sp)
   4bd38:	dcc01b17 	ldw	r19,108(sp)
   4bd3c:	dc801a17 	ldw	r18,104(sp)
   4bd40:	dc401917 	ldw	r17,100(sp)
   4bd44:	dc001817 	ldw	r16,96(sp)
   4bd48:	dec02204 	addi	sp,sp,136
   4bd4c:	f800283a 	ret
   4bd50:	d8c02317 	ldw	r3,140(sp)
   4bd54:	0089c3c4 	movi	r2,9999
   4bd58:	18800015 	stw	r2,0(r3)
   4bd5c:	90017c26 	beq	r18,zero,4c350 <_dtoa_r+0x6ec>
   4bd60:	008001b4 	movhi	r2,6
   4bd64:	10ac0604 	addi	r2,r2,-20456
   4bd68:	d9002517 	ldw	r4,148(sp)
   4bd6c:	203fec26 	beq	r4,zero,4bd20 <__alt_data_end+0xfffe4c20>
   4bd70:	10c000c7 	ldb	r3,3(r2)
   4bd74:	18017d1e 	bne	r3,zero,4c36c <_dtoa_r+0x708>
   4bd78:	10c000c4 	addi	r3,r2,3
   4bd7c:	d9802517 	ldw	r6,148(sp)
   4bd80:	30c00015 	stw	r3,0(r6)
   4bd84:	003fe606 	br	4bd20 <__alt_data_end+0xfffe4c20>
   4bd88:	04e00034 	movhi	r19,32768
   4bd8c:	9cffffc4 	addi	r19,r19,-1
   4bd90:	00800044 	movi	r2,1
   4bd94:	ace6703a 	and	r19,r21,r19
   4bd98:	88800015 	stw	r2,0(r17)
   4bd9c:	982b883a 	mov	r21,r19
   4bda0:	003fcd06 	br	4bcd8 <__alt_data_end+0xfffe4bd8>
   4bda4:	d8800204 	addi	r2,sp,8
   4bda8:	a822d53a 	srli	r17,r21,20
   4bdac:	d8800015 	stw	r2,0(sp)
   4bdb0:	8009883a 	mov	r4,r16
   4bdb4:	900b883a 	mov	r5,r18
   4bdb8:	980d883a 	mov	r6,r19
   4bdbc:	d9c00104 	addi	r7,sp,4
   4bdc0:	004f0340 	call	4f034 <__d2b>
   4bdc4:	1039883a 	mov	fp,r2
   4bdc8:	88016a1e 	bne	r17,zero,4c374 <_dtoa_r+0x710>
   4bdcc:	dd000217 	ldw	r20,8(sp)
   4bdd0:	dc400117 	ldw	r17,4(sp)
   4bdd4:	00befbc4 	movi	r2,-1041
   4bdd8:	a463883a 	add	r17,r20,r17
   4bddc:	8882ea16 	blt	r17,r2,4c988 <_dtoa_r+0xd24>
   4bde0:	00bf0384 	movi	r2,-1010
   4bde4:	1445c83a 	sub	r2,r2,r17
   4bde8:	89010484 	addi	r4,r17,1042
   4bdec:	a8aa983a 	sll	r21,r21,r2
   4bdf0:	9108d83a 	srl	r4,r18,r4
   4bdf4:	a908b03a 	or	r4,r21,r4
   4bdf8:	00547a00 	call	547a0 <__floatunsidf>
   4bdfc:	017f8434 	movhi	r5,65040
   4be00:	01800044 	movi	r6,1
   4be04:	1009883a 	mov	r4,r2
   4be08:	194b883a 	add	r5,r3,r5
   4be0c:	8c7fffc4 	addi	r17,r17,-1
   4be10:	d9800f15 	stw	r6,60(sp)
   4be14:	000d883a 	mov	r6,zero
   4be18:	01cffe34 	movhi	r7,16376
   4be1c:	0053d780 	call	53d78 <__subdf3>
   4be20:	0198dbf4 	movhi	r6,25455
   4be24:	01cff4f4 	movhi	r7,16339
   4be28:	1009883a 	mov	r4,r2
   4be2c:	180b883a 	mov	r5,r3
   4be30:	3190d844 	addi	r6,r6,17249
   4be34:	39e1e9c4 	addi	r7,r7,-30809
   4be38:	00536540 	call	53654 <__muldf3>
   4be3c:	01a2d874 	movhi	r6,35681
   4be40:	01cff1f4 	movhi	r7,16327
   4be44:	180b883a 	mov	r5,r3
   4be48:	31b22cc4 	addi	r6,r6,-14157
   4be4c:	39e28a04 	addi	r7,r7,-30168
   4be50:	1009883a 	mov	r4,r2
   4be54:	00522a80 	call	522a8 <__adddf3>
   4be58:	8809883a 	mov	r4,r17
   4be5c:	102d883a 	mov	r22,r2
   4be60:	182b883a 	mov	r21,r3
   4be64:	00546d00 	call	546d0 <__floatsidf>
   4be68:	019427f4 	movhi	r6,20639
   4be6c:	01cff4f4 	movhi	r7,16339
   4be70:	1009883a 	mov	r4,r2
   4be74:	180b883a 	mov	r5,r3
   4be78:	319e7ec4 	addi	r6,r6,31227
   4be7c:	39d104c4 	addi	r7,r7,17427
   4be80:	00536540 	call	53654 <__muldf3>
   4be84:	b009883a 	mov	r4,r22
   4be88:	a80b883a 	mov	r5,r21
   4be8c:	100d883a 	mov	r6,r2
   4be90:	180f883a 	mov	r7,r3
   4be94:	00522a80 	call	522a8 <__adddf3>
   4be98:	1009883a 	mov	r4,r2
   4be9c:	180b883a 	mov	r5,r3
   4bea0:	102d883a 	mov	r22,r2
   4bea4:	182b883a 	mov	r21,r3
   4bea8:	00546480 	call	54648 <__fixdfsi>
   4beac:	b009883a 	mov	r4,r22
   4beb0:	a80b883a 	mov	r5,r21
   4beb4:	000d883a 	mov	r6,zero
   4beb8:	000f883a 	mov	r7,zero
   4bebc:	d8800515 	stw	r2,20(sp)
   4bec0:	00535740 	call	53574 <__ledf2>
   4bec4:	10023116 	blt	r2,zero,4c78c <_dtoa_r+0xb28>
   4bec8:	d8c00517 	ldw	r3,20(sp)
   4becc:	00800584 	movi	r2,22
   4bed0:	10c21f36 	bltu	r2,r3,4c750 <_dtoa_r+0xaec>
   4bed4:	180490fa 	slli	r2,r3,3
   4bed8:	00c001b4 	movhi	r3,6
   4bedc:	18ec2004 	addi	r3,r3,-20352
   4bee0:	1885883a 	add	r2,r3,r2
   4bee4:	11000017 	ldw	r4,0(r2)
   4bee8:	11400117 	ldw	r5,4(r2)
   4beec:	900d883a 	mov	r6,r18
   4bef0:	980f883a 	mov	r7,r19
   4bef4:	00534940 	call	53494 <__gedf2>
   4bef8:	0082a70e 	bge	zero,r2,4c998 <_dtoa_r+0xd34>
   4befc:	d9000517 	ldw	r4,20(sp)
   4bf00:	d8000c15 	stw	zero,48(sp)
   4bf04:	213fffc4 	addi	r4,r4,-1
   4bf08:	d9000515 	stw	r4,20(sp)
   4bf0c:	a463c83a 	sub	r17,r20,r17
   4bf10:	8dbfffc4 	addi	r22,r17,-1
   4bf14:	b0021916 	blt	r22,zero,4c77c <_dtoa_r+0xb18>
   4bf18:	d8000815 	stw	zero,32(sp)
   4bf1c:	d8800517 	ldw	r2,20(sp)
   4bf20:	10020e16 	blt	r2,zero,4c75c <_dtoa_r+0xaf8>
   4bf24:	b0ad883a 	add	r22,r22,r2
   4bf28:	d8800a15 	stw	r2,40(sp)
   4bf2c:	d8000915 	stw	zero,36(sp)
   4bf30:	d8c00317 	ldw	r3,12(sp)
   4bf34:	00800244 	movi	r2,9
   4bf38:	10c11a36 	bltu	r2,r3,4c3a4 <_dtoa_r+0x740>
   4bf3c:	00800144 	movi	r2,5
   4bf40:	10c4fc0e 	bge	r2,r3,4d334 <_dtoa_r+0x16d0>
   4bf44:	18ffff04 	addi	r3,r3,-4
   4bf48:	d8c00315 	stw	r3,12(sp)
   4bf4c:	0029883a 	mov	r20,zero
   4bf50:	d9800317 	ldw	r6,12(sp)
   4bf54:	008000c4 	movi	r2,3
   4bf58:	3083bd26 	beq	r6,r2,4ce50 <_dtoa_r+0x11ec>
   4bf5c:	1183670e 	bge	r2,r6,4ccfc <_dtoa_r+0x1098>
   4bf60:	d8c00317 	ldw	r3,12(sp)
   4bf64:	00800104 	movi	r2,4
   4bf68:	1882e726 	beq	r3,r2,4cb08 <_dtoa_r+0xea4>
   4bf6c:	00800144 	movi	r2,5
   4bf70:	1884f21e 	bne	r3,r2,4d33c <_dtoa_r+0x16d8>
   4bf74:	00800044 	movi	r2,1
   4bf78:	d8800b15 	stw	r2,44(sp)
   4bf7c:	d8c02217 	ldw	r3,136(sp)
   4bf80:	d9000517 	ldw	r4,20(sp)
   4bf84:	1907883a 	add	r3,r3,r4
   4bf88:	19800044 	addi	r6,r3,1
   4bf8c:	d8c00d15 	stw	r3,52(sp)
   4bf90:	d9800615 	stw	r6,24(sp)
   4bf94:	0183c30e 	bge	zero,r6,4cea4 <_dtoa_r+0x1240>
   4bf98:	d9800617 	ldw	r6,24(sp)
   4bf9c:	3023883a 	mov	r17,r6
   4bfa0:	80001115 	stw	zero,68(r16)
   4bfa4:	008005c4 	movi	r2,23
   4bfa8:	1184f62e 	bgeu	r2,r6,4d384 <_dtoa_r+0x1720>
   4bfac:	00c00044 	movi	r3,1
   4bfb0:	00800104 	movi	r2,4
   4bfb4:	1085883a 	add	r2,r2,r2
   4bfb8:	11000504 	addi	r4,r2,20
   4bfbc:	180b883a 	mov	r5,r3
   4bfc0:	18c00044 	addi	r3,r3,1
   4bfc4:	313ffb2e 	bgeu	r6,r4,4bfb4 <__alt_data_end+0xfffe4eb4>
   4bfc8:	81401115 	stw	r5,68(r16)
   4bfcc:	8009883a 	mov	r4,r16
   4bfd0:	004e4000 	call	4e400 <_Balloc>
   4bfd4:	d8800715 	stw	r2,28(sp)
   4bfd8:	80801015 	stw	r2,64(r16)
   4bfdc:	00800384 	movi	r2,14
   4bfe0:	1440fd36 	bltu	r2,r17,4c3d8 <_dtoa_r+0x774>
   4bfe4:	a000fc26 	beq	r20,zero,4c3d8 <_dtoa_r+0x774>
   4bfe8:	d8800517 	ldw	r2,20(sp)
   4bfec:	0083b90e 	bge	zero,r2,4ced4 <_dtoa_r+0x1270>
   4bff0:	d8c00517 	ldw	r3,20(sp)
   4bff4:	108003cc 	andi	r2,r2,15
   4bff8:	100490fa 	slli	r2,r2,3
   4bffc:	182fd13a 	srai	r23,r3,4
   4c000:	00c001b4 	movhi	r3,6
   4c004:	18ec2004 	addi	r3,r3,-20352
   4c008:	1885883a 	add	r2,r3,r2
   4c00c:	b8c0040c 	andi	r3,r23,16
   4c010:	12c00017 	ldw	r11,0(r2)
   4c014:	12800117 	ldw	r10,4(r2)
   4c018:	18039726 	beq	r3,zero,4ce78 <_dtoa_r+0x1214>
   4c01c:	008001b4 	movhi	r2,6
   4c020:	10ac1604 	addi	r2,r2,-20392
   4c024:	11800817 	ldw	r6,32(r2)
   4c028:	11c00917 	ldw	r7,36(r2)
   4c02c:	9009883a 	mov	r4,r18
   4c030:	980b883a 	mov	r5,r19
   4c034:	da801615 	stw	r10,88(sp)
   4c038:	dac01515 	stw	r11,84(sp)
   4c03c:	0052b440 	call	52b44 <__divdf3>
   4c040:	da801617 	ldw	r10,88(sp)
   4c044:	dac01517 	ldw	r11,84(sp)
   4c048:	bdc003cc 	andi	r23,r23,15
   4c04c:	044000c4 	movi	r17,3
   4c050:	d8800e15 	stw	r2,56(sp)
   4c054:	182b883a 	mov	r21,r3
   4c058:	b8001126 	beq	r23,zero,4c0a0 <_dtoa_r+0x43c>
   4c05c:	050001b4 	movhi	r20,6
   4c060:	a52c1604 	addi	r20,r20,-20392
   4c064:	5805883a 	mov	r2,r11
   4c068:	5007883a 	mov	r3,r10
   4c06c:	b980004c 	andi	r6,r23,1
   4c070:	1009883a 	mov	r4,r2
   4c074:	b82fd07a 	srai	r23,r23,1
   4c078:	180b883a 	mov	r5,r3
   4c07c:	30000426 	beq	r6,zero,4c090 <_dtoa_r+0x42c>
   4c080:	a1800017 	ldw	r6,0(r20)
   4c084:	a1c00117 	ldw	r7,4(r20)
   4c088:	8c400044 	addi	r17,r17,1
   4c08c:	00536540 	call	53654 <__muldf3>
   4c090:	a5000204 	addi	r20,r20,8
   4c094:	b83ff51e 	bne	r23,zero,4c06c <__alt_data_end+0xfffe4f6c>
   4c098:	1017883a 	mov	r11,r2
   4c09c:	1815883a 	mov	r10,r3
   4c0a0:	d9000e17 	ldw	r4,56(sp)
   4c0a4:	a80b883a 	mov	r5,r21
   4c0a8:	580d883a 	mov	r6,r11
   4c0ac:	500f883a 	mov	r7,r10
   4c0b0:	0052b440 	call	52b44 <__divdf3>
   4c0b4:	1029883a 	mov	r20,r2
   4c0b8:	182b883a 	mov	r21,r3
   4c0bc:	d9800c17 	ldw	r6,48(sp)
   4c0c0:	30000626 	beq	r6,zero,4c0dc <_dtoa_r+0x478>
   4c0c4:	a009883a 	mov	r4,r20
   4c0c8:	a80b883a 	mov	r5,r21
   4c0cc:	000d883a 	mov	r6,zero
   4c0d0:	01cffc34 	movhi	r7,16368
   4c0d4:	00535740 	call	53574 <__ledf2>
   4c0d8:	10043216 	blt	r2,zero,4d1a4 <_dtoa_r+0x1540>
   4c0dc:	8809883a 	mov	r4,r17
   4c0e0:	00546d00 	call	546d0 <__floatsidf>
   4c0e4:	1009883a 	mov	r4,r2
   4c0e8:	180b883a 	mov	r5,r3
   4c0ec:	a00d883a 	mov	r6,r20
   4c0f0:	a80f883a 	mov	r7,r21
   4c0f4:	00536540 	call	53654 <__muldf3>
   4c0f8:	000d883a 	mov	r6,zero
   4c0fc:	1009883a 	mov	r4,r2
   4c100:	180b883a 	mov	r5,r3
   4c104:	01d00734 	movhi	r7,16412
   4c108:	00522a80 	call	522a8 <__adddf3>
   4c10c:	1023883a 	mov	r17,r2
   4c110:	d9800617 	ldw	r6,24(sp)
   4c114:	00bf3034 	movhi	r2,64704
   4c118:	1885883a 	add	r2,r3,r2
   4c11c:	d8800e15 	stw	r2,56(sp)
   4c120:	30032e26 	beq	r6,zero,4cddc <_dtoa_r+0x1178>
   4c124:	d8c00517 	ldw	r3,20(sp)
   4c128:	da800617 	ldw	r10,24(sp)
   4c12c:	d8c01215 	stw	r3,72(sp)
   4c130:	d9000b17 	ldw	r4,44(sp)
   4c134:	2003b026 	beq	r4,zero,4cff8 <_dtoa_r+0x1394>
   4c138:	50bfffc4 	addi	r2,r10,-1
   4c13c:	100490fa 	slli	r2,r2,3
   4c140:	00c001b4 	movhi	r3,6
   4c144:	18ec2004 	addi	r3,r3,-20352
   4c148:	1885883a 	add	r2,r3,r2
   4c14c:	11800017 	ldw	r6,0(r2)
   4c150:	11c00117 	ldw	r7,4(r2)
   4c154:	d8800717 	ldw	r2,28(sp)
   4c158:	0009883a 	mov	r4,zero
   4c15c:	014ff834 	movhi	r5,16352
   4c160:	da801615 	stw	r10,88(sp)
   4c164:	15c00044 	addi	r23,r2,1
   4c168:	0052b440 	call	52b44 <__divdf3>
   4c16c:	d9c00e17 	ldw	r7,56(sp)
   4c170:	880d883a 	mov	r6,r17
   4c174:	1009883a 	mov	r4,r2
   4c178:	180b883a 	mov	r5,r3
   4c17c:	0053d780 	call	53d78 <__subdf3>
   4c180:	a80b883a 	mov	r5,r21
   4c184:	a009883a 	mov	r4,r20
   4c188:	d8c01015 	stw	r3,64(sp)
   4c18c:	d8800e15 	stw	r2,56(sp)
   4c190:	00546480 	call	54648 <__fixdfsi>
   4c194:	1009883a 	mov	r4,r2
   4c198:	d8801715 	stw	r2,92(sp)
   4c19c:	00546d00 	call	546d0 <__floatsidf>
   4c1a0:	a009883a 	mov	r4,r20
   4c1a4:	a80b883a 	mov	r5,r21
   4c1a8:	100d883a 	mov	r6,r2
   4c1ac:	180f883a 	mov	r7,r3
   4c1b0:	0053d780 	call	53d78 <__subdf3>
   4c1b4:	da001717 	ldw	r8,92(sp)
   4c1b8:	1829883a 	mov	r20,r3
   4c1bc:	d8c00717 	ldw	r3,28(sp)
   4c1c0:	d9000e17 	ldw	r4,56(sp)
   4c1c4:	d9401017 	ldw	r5,64(sp)
   4c1c8:	42000c04 	addi	r8,r8,48
   4c1cc:	1023883a 	mov	r17,r2
   4c1d0:	1a000005 	stb	r8,0(r3)
   4c1d4:	880d883a 	mov	r6,r17
   4c1d8:	a00f883a 	mov	r7,r20
   4c1dc:	402b883a 	mov	r21,r8
   4c1e0:	00534940 	call	53494 <__gedf2>
   4c1e4:	00844516 	blt	zero,r2,4d2fc <_dtoa_r+0x1698>
   4c1e8:	0009883a 	mov	r4,zero
   4c1ec:	014ffc34 	movhi	r5,16368
   4c1f0:	880d883a 	mov	r6,r17
   4c1f4:	a00f883a 	mov	r7,r20
   4c1f8:	0053d780 	call	53d78 <__subdf3>
   4c1fc:	d9000e17 	ldw	r4,56(sp)
   4c200:	d9401017 	ldw	r5,64(sp)
   4c204:	100d883a 	mov	r6,r2
   4c208:	180f883a 	mov	r7,r3
   4c20c:	00534940 	call	53494 <__gedf2>
   4c210:	da801617 	ldw	r10,88(sp)
   4c214:	00843616 	blt	zero,r2,4d2f0 <_dtoa_r+0x168c>
   4c218:	00800044 	movi	r2,1
   4c21c:	12806e0e 	bge	r2,r10,4c3d8 <_dtoa_r+0x774>
   4c220:	d9000717 	ldw	r4,28(sp)
   4c224:	dd801315 	stw	r22,76(sp)
   4c228:	dc001115 	stw	r16,68(sp)
   4c22c:	2295883a 	add	r10,r4,r10
   4c230:	dcc01415 	stw	r19,80(sp)
   4c234:	502d883a 	mov	r22,r10
   4c238:	dcc01017 	ldw	r19,64(sp)
   4c23c:	b821883a 	mov	r16,r23
   4c240:	dc801015 	stw	r18,64(sp)
   4c244:	dc800e17 	ldw	r18,56(sp)
   4c248:	00000906 	br	4c270 <_dtoa_r+0x60c>
   4c24c:	0053d780 	call	53d78 <__subdf3>
   4c250:	1009883a 	mov	r4,r2
   4c254:	180b883a 	mov	r5,r3
   4c258:	900d883a 	mov	r6,r18
   4c25c:	980f883a 	mov	r7,r19
   4c260:	00535740 	call	53574 <__ledf2>
   4c264:	10040e16 	blt	r2,zero,4d2a0 <_dtoa_r+0x163c>
   4c268:	b821883a 	mov	r16,r23
   4c26c:	bd841026 	beq	r23,r22,4d2b0 <_dtoa_r+0x164c>
   4c270:	9009883a 	mov	r4,r18
   4c274:	980b883a 	mov	r5,r19
   4c278:	000d883a 	mov	r6,zero
   4c27c:	01d00934 	movhi	r7,16420
   4c280:	00536540 	call	53654 <__muldf3>
   4c284:	000d883a 	mov	r6,zero
   4c288:	01d00934 	movhi	r7,16420
   4c28c:	8809883a 	mov	r4,r17
   4c290:	a00b883a 	mov	r5,r20
   4c294:	1025883a 	mov	r18,r2
   4c298:	1827883a 	mov	r19,r3
   4c29c:	00536540 	call	53654 <__muldf3>
   4c2a0:	180b883a 	mov	r5,r3
   4c2a4:	1009883a 	mov	r4,r2
   4c2a8:	1823883a 	mov	r17,r3
   4c2ac:	1029883a 	mov	r20,r2
   4c2b0:	00546480 	call	54648 <__fixdfsi>
   4c2b4:	1009883a 	mov	r4,r2
   4c2b8:	102b883a 	mov	r21,r2
   4c2bc:	00546d00 	call	546d0 <__floatsidf>
   4c2c0:	a009883a 	mov	r4,r20
   4c2c4:	880b883a 	mov	r5,r17
   4c2c8:	100d883a 	mov	r6,r2
   4c2cc:	180f883a 	mov	r7,r3
   4c2d0:	0053d780 	call	53d78 <__subdf3>
   4c2d4:	ad400c04 	addi	r21,r21,48
   4c2d8:	1009883a 	mov	r4,r2
   4c2dc:	180b883a 	mov	r5,r3
   4c2e0:	900d883a 	mov	r6,r18
   4c2e4:	980f883a 	mov	r7,r19
   4c2e8:	85400005 	stb	r21,0(r16)
   4c2ec:	1023883a 	mov	r17,r2
   4c2f0:	1829883a 	mov	r20,r3
   4c2f4:	00535740 	call	53574 <__ledf2>
   4c2f8:	bdc00044 	addi	r23,r23,1
   4c2fc:	0009883a 	mov	r4,zero
   4c300:	014ffc34 	movhi	r5,16368
   4c304:	880d883a 	mov	r6,r17
   4c308:	a00f883a 	mov	r7,r20
   4c30c:	103fcf0e 	bge	r2,zero,4c24c <__alt_data_end+0xfffe514c>
   4c310:	d9801217 	ldw	r6,72(sp)
   4c314:	dc001117 	ldw	r16,68(sp)
   4c318:	d9800515 	stw	r6,20(sp)
   4c31c:	8009883a 	mov	r4,r16
   4c320:	e00b883a 	mov	r5,fp
   4c324:	004e4a80 	call	4e4a8 <_Bfree>
   4c328:	d8c00517 	ldw	r3,20(sp)
   4c32c:	d9002317 	ldw	r4,140(sp)
   4c330:	d9802517 	ldw	r6,148(sp)
   4c334:	b8000005 	stb	zero,0(r23)
   4c338:	18800044 	addi	r2,r3,1
   4c33c:	20800015 	stw	r2,0(r4)
   4c340:	30027226 	beq	r6,zero,4cd0c <_dtoa_r+0x10a8>
   4c344:	35c00015 	stw	r23,0(r6)
   4c348:	d8800717 	ldw	r2,28(sp)
   4c34c:	003e7406 	br	4bd20 <__alt_data_end+0xfffe4c20>
   4c350:	00800434 	movhi	r2,16
   4c354:	10bfffc4 	addi	r2,r2,-1
   4c358:	a8aa703a 	and	r21,r21,r2
   4c35c:	a83e801e 	bne	r21,zero,4bd60 <__alt_data_end+0xfffe4c60>
   4c360:	008001b4 	movhi	r2,6
   4c364:	10ac0304 	addi	r2,r2,-20468
   4c368:	003e7f06 	br	4bd68 <__alt_data_end+0xfffe4c68>
   4c36c:	10c00204 	addi	r3,r2,8
   4c370:	003e8206 	br	4bd7c <__alt_data_end+0xfffe4c7c>
   4c374:	01400434 	movhi	r5,16
   4c378:	297fffc4 	addi	r5,r5,-1
   4c37c:	994a703a 	and	r5,r19,r5
   4c380:	9009883a 	mov	r4,r18
   4c384:	8c7f0044 	addi	r17,r17,-1023
   4c388:	294ffc34 	orhi	r5,r5,16368
   4c38c:	dd000217 	ldw	r20,8(sp)
   4c390:	d8000f15 	stw	zero,60(sp)
   4c394:	003e9f06 	br	4be14 <__alt_data_end+0xfffe4d14>
   4c398:	008001b4 	movhi	r2,6
   4c39c:	10a5ee04 	addi	r2,r2,-26696
   4c3a0:	003e5f06 	br	4bd20 <__alt_data_end+0xfffe4c20>
   4c3a4:	80001115 	stw	zero,68(r16)
   4c3a8:	8009883a 	mov	r4,r16
   4c3ac:	000b883a 	mov	r5,zero
   4c3b0:	004e4000 	call	4e400 <_Balloc>
   4c3b4:	01bfffc4 	movi	r6,-1
   4c3b8:	d8800715 	stw	r2,28(sp)
   4c3bc:	80801015 	stw	r2,64(r16)
   4c3c0:	00800044 	movi	r2,1
   4c3c4:	d9800615 	stw	r6,24(sp)
   4c3c8:	d8800b15 	stw	r2,44(sp)
   4c3cc:	d8002215 	stw	zero,136(sp)
   4c3d0:	d9800d15 	stw	r6,52(sp)
   4c3d4:	d8000315 	stw	zero,12(sp)
   4c3d8:	d8800117 	ldw	r2,4(sp)
   4c3dc:	10008e16 	blt	r2,zero,4c618 <_dtoa_r+0x9b4>
   4c3e0:	d9000517 	ldw	r4,20(sp)
   4c3e4:	00c00384 	movi	r3,14
   4c3e8:	19008b16 	blt	r3,r4,4c618 <_dtoa_r+0x9b4>
   4c3ec:	200490fa 	slli	r2,r4,3
   4c3f0:	00c001b4 	movhi	r3,6
   4c3f4:	d9802217 	ldw	r6,136(sp)
   4c3f8:	18ec2004 	addi	r3,r3,-20352
   4c3fc:	1885883a 	add	r2,r3,r2
   4c400:	14400017 	ldw	r17,0(r2)
   4c404:	15000117 	ldw	r20,4(r2)
   4c408:	3001c716 	blt	r6,zero,4cb28 <_dtoa_r+0xec4>
   4c40c:	880d883a 	mov	r6,r17
   4c410:	a00f883a 	mov	r7,r20
   4c414:	9009883a 	mov	r4,r18
   4c418:	980b883a 	mov	r5,r19
   4c41c:	0052b440 	call	52b44 <__divdf3>
   4c420:	180b883a 	mov	r5,r3
   4c424:	1009883a 	mov	r4,r2
   4c428:	00546480 	call	54648 <__fixdfsi>
   4c42c:	1009883a 	mov	r4,r2
   4c430:	102d883a 	mov	r22,r2
   4c434:	00546d00 	call	546d0 <__floatsidf>
   4c438:	1009883a 	mov	r4,r2
   4c43c:	180b883a 	mov	r5,r3
   4c440:	880d883a 	mov	r6,r17
   4c444:	a00f883a 	mov	r7,r20
   4c448:	00536540 	call	53654 <__muldf3>
   4c44c:	9009883a 	mov	r4,r18
   4c450:	980b883a 	mov	r5,r19
   4c454:	100d883a 	mov	r6,r2
   4c458:	180f883a 	mov	r7,r3
   4c45c:	0053d780 	call	53d78 <__subdf3>
   4c460:	d9000717 	ldw	r4,28(sp)
   4c464:	d9800617 	ldw	r6,24(sp)
   4c468:	180b883a 	mov	r5,r3
   4c46c:	b0c00c04 	addi	r3,r22,48
   4c470:	20c00005 	stb	r3,0(r4)
   4c474:	25c00044 	addi	r23,r4,1
   4c478:	01000044 	movi	r4,1
   4c47c:	1011883a 	mov	r8,r2
   4c480:	2807883a 	mov	r3,r5
   4c484:	31003d26 	beq	r6,r4,4c57c <_dtoa_r+0x918>
   4c488:	000d883a 	mov	r6,zero
   4c48c:	01d00934 	movhi	r7,16420
   4c490:	1009883a 	mov	r4,r2
   4c494:	00536540 	call	53654 <__muldf3>
   4c498:	1009883a 	mov	r4,r2
   4c49c:	180b883a 	mov	r5,r3
   4c4a0:	000d883a 	mov	r6,zero
   4c4a4:	000f883a 	mov	r7,zero
   4c4a8:	1027883a 	mov	r19,r2
   4c4ac:	182b883a 	mov	r21,r3
   4c4b0:	00534100 	call	53410 <__eqdf2>
   4c4b4:	103f9926 	beq	r2,zero,4c31c <__alt_data_end+0xfffe521c>
   4c4b8:	d8c00617 	ldw	r3,24(sp)
   4c4bc:	d9000717 	ldw	r4,28(sp)
   4c4c0:	b825883a 	mov	r18,r23
   4c4c4:	18bfffc4 	addi	r2,r3,-1
   4c4c8:	20ad883a 	add	r22,r4,r2
   4c4cc:	dc000315 	stw	r16,12(sp)
   4c4d0:	00000a06 	br	4c4fc <_dtoa_r+0x898>
   4c4d4:	00536540 	call	53654 <__muldf3>
   4c4d8:	1009883a 	mov	r4,r2
   4c4dc:	180b883a 	mov	r5,r3
   4c4e0:	000d883a 	mov	r6,zero
   4c4e4:	000f883a 	mov	r7,zero
   4c4e8:	1027883a 	mov	r19,r2
   4c4ec:	182b883a 	mov	r21,r3
   4c4f0:	b825883a 	mov	r18,r23
   4c4f4:	00534100 	call	53410 <__eqdf2>
   4c4f8:	10022626 	beq	r2,zero,4cd94 <_dtoa_r+0x1130>
   4c4fc:	880d883a 	mov	r6,r17
   4c500:	a00f883a 	mov	r7,r20
   4c504:	9809883a 	mov	r4,r19
   4c508:	a80b883a 	mov	r5,r21
   4c50c:	0052b440 	call	52b44 <__divdf3>
   4c510:	180b883a 	mov	r5,r3
   4c514:	1009883a 	mov	r4,r2
   4c518:	00546480 	call	54648 <__fixdfsi>
   4c51c:	1009883a 	mov	r4,r2
   4c520:	1021883a 	mov	r16,r2
   4c524:	00546d00 	call	546d0 <__floatsidf>
   4c528:	1009883a 	mov	r4,r2
   4c52c:	180b883a 	mov	r5,r3
   4c530:	880d883a 	mov	r6,r17
   4c534:	a00f883a 	mov	r7,r20
   4c538:	00536540 	call	53654 <__muldf3>
   4c53c:	9809883a 	mov	r4,r19
   4c540:	a80b883a 	mov	r5,r21
   4c544:	100d883a 	mov	r6,r2
   4c548:	180f883a 	mov	r7,r3
   4c54c:	0053d780 	call	53d78 <__subdf3>
   4c550:	82000c04 	addi	r8,r16,48
   4c554:	92000005 	stb	r8,0(r18)
   4c558:	1009883a 	mov	r4,r2
   4c55c:	180b883a 	mov	r5,r3
   4c560:	000d883a 	mov	r6,zero
   4c564:	01d00934 	movhi	r7,16420
   4c568:	1011883a 	mov	r8,r2
   4c56c:	bdc00044 	addi	r23,r23,1
   4c570:	95bfd81e 	bne	r18,r22,4c4d4 <__alt_data_end+0xfffe53d4>
   4c574:	802d883a 	mov	r22,r16
   4c578:	dc000317 	ldw	r16,12(sp)
   4c57c:	4009883a 	mov	r4,r8
   4c580:	180b883a 	mov	r5,r3
   4c584:	400d883a 	mov	r6,r8
   4c588:	180f883a 	mov	r7,r3
   4c58c:	00522a80 	call	522a8 <__adddf3>
   4c590:	8809883a 	mov	r4,r17
   4c594:	a00b883a 	mov	r5,r20
   4c598:	100d883a 	mov	r6,r2
   4c59c:	180f883a 	mov	r7,r3
   4c5a0:	1027883a 	mov	r19,r2
   4c5a4:	1825883a 	mov	r18,r3
   4c5a8:	00535740 	call	53574 <__ledf2>
   4c5ac:	10000816 	blt	r2,zero,4c5d0 <_dtoa_r+0x96c>
   4c5b0:	8809883a 	mov	r4,r17
   4c5b4:	a00b883a 	mov	r5,r20
   4c5b8:	980d883a 	mov	r6,r19
   4c5bc:	900f883a 	mov	r7,r18
   4c5c0:	00534100 	call	53410 <__eqdf2>
   4c5c4:	103f551e 	bne	r2,zero,4c31c <__alt_data_end+0xfffe521c>
   4c5c8:	b580004c 	andi	r22,r22,1
   4c5cc:	b03f5326 	beq	r22,zero,4c31c <__alt_data_end+0xfffe521c>
   4c5d0:	bd7fffc3 	ldbu	r21,-1(r23)
   4c5d4:	b8bfffc4 	addi	r2,r23,-1
   4c5d8:	1007883a 	mov	r3,r2
   4c5dc:	01400e44 	movi	r5,57
   4c5e0:	d9800717 	ldw	r6,28(sp)
   4c5e4:	00000506 	br	4c5fc <_dtoa_r+0x998>
   4c5e8:	18ffffc4 	addi	r3,r3,-1
   4c5ec:	30825e26 	beq	r6,r2,4cf68 <_dtoa_r+0x1304>
   4c5f0:	1d400003 	ldbu	r21,0(r3)
   4c5f4:	102f883a 	mov	r23,r2
   4c5f8:	10bfffc4 	addi	r2,r2,-1
   4c5fc:	a9003fcc 	andi	r4,r21,255
   4c600:	2100201c 	xori	r4,r4,128
   4c604:	213fe004 	addi	r4,r4,-128
   4c608:	217ff726 	beq	r4,r5,4c5e8 <__alt_data_end+0xfffe54e8>
   4c60c:	aa000044 	addi	r8,r21,1
   4c610:	12000005 	stb	r8,0(r2)
   4c614:	003f4106 	br	4c31c <__alt_data_end+0xfffe521c>
   4c618:	d8c00b17 	ldw	r3,44(sp)
   4c61c:	18006726 	beq	r3,zero,4c7bc <_dtoa_r+0xb58>
   4c620:	d9000317 	ldw	r4,12(sp)
   4c624:	00c00044 	movi	r3,1
   4c628:	19016a0e 	bge	r3,r4,4cbd4 <_dtoa_r+0xf70>
   4c62c:	d8800617 	ldw	r2,24(sp)
   4c630:	d8c00917 	ldw	r3,36(sp)
   4c634:	157fffc4 	addi	r21,r2,-1
   4c638:	1d420716 	blt	r3,r21,4ce58 <_dtoa_r+0x11f4>
   4c63c:	1d6bc83a 	sub	r21,r3,r21
   4c640:	d8800617 	ldw	r2,24(sp)
   4c644:	1002c716 	blt	r2,zero,4d164 <_dtoa_r+0x1500>
   4c648:	dd000817 	ldw	r20,32(sp)
   4c64c:	d8800617 	ldw	r2,24(sp)
   4c650:	d9800817 	ldw	r6,32(sp)
   4c654:	8009883a 	mov	r4,r16
   4c658:	01400044 	movi	r5,1
   4c65c:	308d883a 	add	r6,r6,r2
   4c660:	d9800815 	stw	r6,32(sp)
   4c664:	b0ad883a 	add	r22,r22,r2
   4c668:	004e8000 	call	4e800 <__i2b>
   4c66c:	1023883a 	mov	r17,r2
   4c670:	a0000826 	beq	r20,zero,4c694 <_dtoa_r+0xa30>
   4c674:	0580070e 	bge	zero,r22,4c694 <_dtoa_r+0xa30>
   4c678:	b005883a 	mov	r2,r22
   4c67c:	a5812016 	blt	r20,r22,4cb00 <_dtoa_r+0xe9c>
   4c680:	d8c00817 	ldw	r3,32(sp)
   4c684:	a0a9c83a 	sub	r20,r20,r2
   4c688:	b0adc83a 	sub	r22,r22,r2
   4c68c:	1887c83a 	sub	r3,r3,r2
   4c690:	d8c00815 	stw	r3,32(sp)
   4c694:	d9000917 	ldw	r4,36(sp)
   4c698:	0100140e 	bge	zero,r4,4c6ec <_dtoa_r+0xa88>
   4c69c:	d9800b17 	ldw	r6,44(sp)
   4c6a0:	3001e526 	beq	r6,zero,4ce38 <_dtoa_r+0x11d4>
   4c6a4:	05400e0e 	bge	zero,r21,4c6e0 <_dtoa_r+0xa7c>
   4c6a8:	880b883a 	mov	r5,r17
   4c6ac:	8009883a 	mov	r4,r16
   4c6b0:	a80d883a 	mov	r6,r21
   4c6b4:	004ea380 	call	4ea38 <__pow5mult>
   4c6b8:	e00d883a 	mov	r6,fp
   4c6bc:	8009883a 	mov	r4,r16
   4c6c0:	100b883a 	mov	r5,r2
   4c6c4:	1023883a 	mov	r17,r2
   4c6c8:	004e83c0 	call	4e83c <__multiply>
   4c6cc:	102f883a 	mov	r23,r2
   4c6d0:	e00b883a 	mov	r5,fp
   4c6d4:	8009883a 	mov	r4,r16
   4c6d8:	004e4a80 	call	4e4a8 <_Bfree>
   4c6dc:	b839883a 	mov	fp,r23
   4c6e0:	d8800917 	ldw	r2,36(sp)
   4c6e4:	154dc83a 	sub	r6,r2,r21
   4c6e8:	3001281e 	bne	r6,zero,4cb8c <_dtoa_r+0xf28>
   4c6ec:	05c00044 	movi	r23,1
   4c6f0:	8009883a 	mov	r4,r16
   4c6f4:	b80b883a 	mov	r5,r23
   4c6f8:	004e8000 	call	4e800 <__i2b>
   4c6fc:	d8c00a17 	ldw	r3,40(sp)
   4c700:	102b883a 	mov	r21,r2
   4c704:	00c0310e 	bge	zero,r3,4c7cc <_dtoa_r+0xb68>
   4c708:	8009883a 	mov	r4,r16
   4c70c:	100b883a 	mov	r5,r2
   4c710:	180d883a 	mov	r6,r3
   4c714:	004ea380 	call	4ea38 <__pow5mult>
   4c718:	d9000317 	ldw	r4,12(sp)
   4c71c:	102b883a 	mov	r21,r2
   4c720:	b9011f0e 	bge	r23,r4,4cba0 <_dtoa_r+0xf3c>
   4c724:	0027883a 	mov	r19,zero
   4c728:	a8800417 	ldw	r2,16(r21)
   4c72c:	10800104 	addi	r2,r2,4
   4c730:	1085883a 	add	r2,r2,r2
   4c734:	1085883a 	add	r2,r2,r2
   4c738:	a885883a 	add	r2,r21,r2
   4c73c:	11000017 	ldw	r4,0(r2)
   4c740:	004e6e80 	call	4e6e8 <__hi0bits>
   4c744:	00c00804 	movi	r3,32
   4c748:	1885c83a 	sub	r2,r3,r2
   4c74c:	00002506 	br	4c7e4 <_dtoa_r+0xb80>
   4c750:	01800044 	movi	r6,1
   4c754:	d9800c15 	stw	r6,48(sp)
   4c758:	003dec06 	br	4bf0c <__alt_data_end+0xfffe4e0c>
   4c75c:	d8c00817 	ldw	r3,32(sp)
   4c760:	d9000517 	ldw	r4,20(sp)
   4c764:	d8000a15 	stw	zero,40(sp)
   4c768:	1907c83a 	sub	r3,r3,r4
   4c76c:	010dc83a 	sub	r6,zero,r4
   4c770:	d8c00815 	stw	r3,32(sp)
   4c774:	d9800915 	stw	r6,36(sp)
   4c778:	003ded06 	br	4bf30 <__alt_data_end+0xfffe4e30>
   4c77c:	05adc83a 	sub	r22,zero,r22
   4c780:	dd800815 	stw	r22,32(sp)
   4c784:	002d883a 	mov	r22,zero
   4c788:	003de406 	br	4bf1c <__alt_data_end+0xfffe4e1c>
   4c78c:	d9000517 	ldw	r4,20(sp)
   4c790:	00546d00 	call	546d0 <__floatsidf>
   4c794:	1009883a 	mov	r4,r2
   4c798:	180b883a 	mov	r5,r3
   4c79c:	b00d883a 	mov	r6,r22
   4c7a0:	a80f883a 	mov	r7,r21
   4c7a4:	00534100 	call	53410 <__eqdf2>
   4c7a8:	103dc726 	beq	r2,zero,4bec8 <__alt_data_end+0xfffe4dc8>
   4c7ac:	d8800517 	ldw	r2,20(sp)
   4c7b0:	10bfffc4 	addi	r2,r2,-1
   4c7b4:	d8800515 	stw	r2,20(sp)
   4c7b8:	003dc306 	br	4bec8 <__alt_data_end+0xfffe4dc8>
   4c7bc:	dd400917 	ldw	r21,36(sp)
   4c7c0:	dd000817 	ldw	r20,32(sp)
   4c7c4:	0023883a 	mov	r17,zero
   4c7c8:	003fa906 	br	4c670 <__alt_data_end+0xfffe5570>
   4c7cc:	d9800317 	ldw	r6,12(sp)
   4c7d0:	b981670e 	bge	r23,r6,4cd70 <_dtoa_r+0x110c>
   4c7d4:	0027883a 	mov	r19,zero
   4c7d8:	d8c00a17 	ldw	r3,40(sp)
   4c7dc:	183fd21e 	bne	r3,zero,4c728 <__alt_data_end+0xfffe5628>
   4c7e0:	00800044 	movi	r2,1
   4c7e4:	1585883a 	add	r2,r2,r22
   4c7e8:	108007cc 	andi	r2,r2,31
   4c7ec:	10005f26 	beq	r2,zero,4c96c <_dtoa_r+0xd08>
   4c7f0:	00c00804 	movi	r3,32
   4c7f4:	1887c83a 	sub	r3,r3,r2
   4c7f8:	01000104 	movi	r4,4
   4c7fc:	20c2dd0e 	bge	r4,r3,4d374 <_dtoa_r+0x1710>
   4c800:	d9000817 	ldw	r4,32(sp)
   4c804:	00c00704 	movi	r3,28
   4c808:	1885c83a 	sub	r2,r3,r2
   4c80c:	2089883a 	add	r4,r4,r2
   4c810:	d9000815 	stw	r4,32(sp)
   4c814:	a0a9883a 	add	r20,r20,r2
   4c818:	b0ad883a 	add	r22,r22,r2
   4c81c:	d8800817 	ldw	r2,32(sp)
   4c820:	0080050e 	bge	zero,r2,4c838 <_dtoa_r+0xbd4>
   4c824:	e00b883a 	mov	r5,fp
   4c828:	8009883a 	mov	r4,r16
   4c82c:	100d883a 	mov	r6,r2
   4c830:	004eb780 	call	4eb78 <__lshift>
   4c834:	1039883a 	mov	fp,r2
   4c838:	0580050e 	bge	zero,r22,4c850 <_dtoa_r+0xbec>
   4c83c:	a80b883a 	mov	r5,r21
   4c840:	8009883a 	mov	r4,r16
   4c844:	b00d883a 	mov	r6,r22
   4c848:	004eb780 	call	4eb78 <__lshift>
   4c84c:	102b883a 	mov	r21,r2
   4c850:	d8c00c17 	ldw	r3,48(sp)
   4c854:	1801161e 	bne	r3,zero,4ccb0 <_dtoa_r+0x104c>
   4c858:	d8c00617 	ldw	r3,24(sp)
   4c85c:	00c12d0e 	bge	zero,r3,4cd14 <_dtoa_r+0x10b0>
   4c860:	d8c00b17 	ldw	r3,44(sp)
   4c864:	1800571e 	bne	r3,zero,4c9c4 <_dtoa_r+0xd60>
   4c868:	dc800717 	ldw	r18,28(sp)
   4c86c:	dcc00617 	ldw	r19,24(sp)
   4c870:	9029883a 	mov	r20,r18
   4c874:	00000206 	br	4c880 <_dtoa_r+0xc1c>
   4c878:	004e4d00 	call	4e4d0 <__multadd>
   4c87c:	1039883a 	mov	fp,r2
   4c880:	e009883a 	mov	r4,fp
   4c884:	a80b883a 	mov	r5,r21
   4c888:	004ba640 	call	4ba64 <quorem>
   4c88c:	10800c04 	addi	r2,r2,48
   4c890:	90800005 	stb	r2,0(r18)
   4c894:	94800044 	addi	r18,r18,1
   4c898:	9507c83a 	sub	r3,r18,r20
   4c89c:	8009883a 	mov	r4,r16
   4c8a0:	e00b883a 	mov	r5,fp
   4c8a4:	01800284 	movi	r6,10
   4c8a8:	000f883a 	mov	r7,zero
   4c8ac:	1cfff216 	blt	r3,r19,4c878 <__alt_data_end+0xfffe5778>
   4c8b0:	1011883a 	mov	r8,r2
   4c8b4:	d8800617 	ldw	r2,24(sp)
   4c8b8:	00822e0e 	bge	zero,r2,4d174 <_dtoa_r+0x1510>
   4c8bc:	d9000717 	ldw	r4,28(sp)
   4c8c0:	0025883a 	mov	r18,zero
   4c8c4:	20af883a 	add	r23,r4,r2
   4c8c8:	e00b883a 	mov	r5,fp
   4c8cc:	01800044 	movi	r6,1
   4c8d0:	8009883a 	mov	r4,r16
   4c8d4:	da001715 	stw	r8,92(sp)
   4c8d8:	004eb780 	call	4eb78 <__lshift>
   4c8dc:	1009883a 	mov	r4,r2
   4c8e0:	a80b883a 	mov	r5,r21
   4c8e4:	1039883a 	mov	fp,r2
   4c8e8:	004ecc00 	call	4ecc0 <__mcmp>
   4c8ec:	da001717 	ldw	r8,92(sp)
   4c8f0:	00816e0e 	bge	zero,r2,4ceac <_dtoa_r+0x1248>
   4c8f4:	b93fffc3 	ldbu	r4,-1(r23)
   4c8f8:	b8bfffc4 	addi	r2,r23,-1
   4c8fc:	1007883a 	mov	r3,r2
   4c900:	01800e44 	movi	r6,57
   4c904:	d9c00717 	ldw	r7,28(sp)
   4c908:	00000506 	br	4c920 <_dtoa_r+0xcbc>
   4c90c:	18ffffc4 	addi	r3,r3,-1
   4c910:	38811926 	beq	r7,r2,4cd78 <_dtoa_r+0x1114>
   4c914:	19000003 	ldbu	r4,0(r3)
   4c918:	102f883a 	mov	r23,r2
   4c91c:	10bfffc4 	addi	r2,r2,-1
   4c920:	21403fcc 	andi	r5,r4,255
   4c924:	2940201c 	xori	r5,r5,128
   4c928:	297fe004 	addi	r5,r5,-128
   4c92c:	29bff726 	beq	r5,r6,4c90c <__alt_data_end+0xfffe580c>
   4c930:	21000044 	addi	r4,r4,1
   4c934:	11000005 	stb	r4,0(r2)
   4c938:	8009883a 	mov	r4,r16
   4c93c:	a80b883a 	mov	r5,r21
   4c940:	004e4a80 	call	4e4a8 <_Bfree>
   4c944:	883e7526 	beq	r17,zero,4c31c <__alt_data_end+0xfffe521c>
   4c948:	90000426 	beq	r18,zero,4c95c <_dtoa_r+0xcf8>
   4c94c:	94400326 	beq	r18,r17,4c95c <_dtoa_r+0xcf8>
   4c950:	8009883a 	mov	r4,r16
   4c954:	900b883a 	mov	r5,r18
   4c958:	004e4a80 	call	4e4a8 <_Bfree>
   4c95c:	8009883a 	mov	r4,r16
   4c960:	880b883a 	mov	r5,r17
   4c964:	004e4a80 	call	4e4a8 <_Bfree>
   4c968:	003e6c06 	br	4c31c <__alt_data_end+0xfffe521c>
   4c96c:	00800704 	movi	r2,28
   4c970:	d9800817 	ldw	r6,32(sp)
   4c974:	a0a9883a 	add	r20,r20,r2
   4c978:	b0ad883a 	add	r22,r22,r2
   4c97c:	308d883a 	add	r6,r6,r2
   4c980:	d9800815 	stw	r6,32(sp)
   4c984:	003fa506 	br	4c81c <__alt_data_end+0xfffe571c>
   4c988:	013efb84 	movi	r4,-1042
   4c98c:	246bc83a 	sub	r21,r4,r17
   4c990:	9548983a 	sll	r4,r18,r21
   4c994:	003d1806 	br	4bdf8 <__alt_data_end+0xfffe4cf8>
   4c998:	d8000c15 	stw	zero,48(sp)
   4c99c:	003d5b06 	br	4bf0c <__alt_data_end+0xfffe4e0c>
   4c9a0:	880b883a 	mov	r5,r17
   4c9a4:	8009883a 	mov	r4,r16
   4c9a8:	01800284 	movi	r6,10
   4c9ac:	000f883a 	mov	r7,zero
   4c9b0:	004e4d00 	call	4e4d0 <__multadd>
   4c9b4:	1023883a 	mov	r17,r2
   4c9b8:	d8800d17 	ldw	r2,52(sp)
   4c9bc:	0082550e 	bge	zero,r2,4d314 <_dtoa_r+0x16b0>
   4c9c0:	d8800615 	stw	r2,24(sp)
   4c9c4:	0500050e 	bge	zero,r20,4c9dc <_dtoa_r+0xd78>
   4c9c8:	880b883a 	mov	r5,r17
   4c9cc:	8009883a 	mov	r4,r16
   4c9d0:	a00d883a 	mov	r6,r20
   4c9d4:	004eb780 	call	4eb78 <__lshift>
   4c9d8:	1023883a 	mov	r17,r2
   4c9dc:	98016a1e 	bne	r19,zero,4cf88 <_dtoa_r+0x1324>
   4c9e0:	8829883a 	mov	r20,r17
   4c9e4:	d9000617 	ldw	r4,24(sp)
   4c9e8:	dcc00717 	ldw	r19,28(sp)
   4c9ec:	9480004c 	andi	r18,r18,1
   4c9f0:	20bfffc4 	addi	r2,r4,-1
   4c9f4:	9885883a 	add	r2,r19,r2
   4c9f8:	d8800415 	stw	r2,16(sp)
   4c9fc:	dc800615 	stw	r18,24(sp)
   4ca00:	e009883a 	mov	r4,fp
   4ca04:	a80b883a 	mov	r5,r21
   4ca08:	004ba640 	call	4ba64 <quorem>
   4ca0c:	e009883a 	mov	r4,fp
   4ca10:	880b883a 	mov	r5,r17
   4ca14:	102f883a 	mov	r23,r2
   4ca18:	004ecc00 	call	4ecc0 <__mcmp>
   4ca1c:	8009883a 	mov	r4,r16
   4ca20:	a80b883a 	mov	r5,r21
   4ca24:	a00d883a 	mov	r6,r20
   4ca28:	102d883a 	mov	r22,r2
   4ca2c:	004ed200 	call	4ed20 <__mdiff>
   4ca30:	1007883a 	mov	r3,r2
   4ca34:	10800317 	ldw	r2,12(r2)
   4ca38:	bc800c04 	addi	r18,r23,48
   4ca3c:	1000971e 	bne	r2,zero,4cc9c <_dtoa_r+0x1038>
   4ca40:	180b883a 	mov	r5,r3
   4ca44:	e009883a 	mov	r4,fp
   4ca48:	d8c01515 	stw	r3,84(sp)
   4ca4c:	004ecc00 	call	4ecc0 <__mcmp>
   4ca50:	d8c01517 	ldw	r3,84(sp)
   4ca54:	8009883a 	mov	r4,r16
   4ca58:	d8801515 	stw	r2,84(sp)
   4ca5c:	180b883a 	mov	r5,r3
   4ca60:	004e4a80 	call	4e4a8 <_Bfree>
   4ca64:	d8801517 	ldw	r2,84(sp)
   4ca68:	1000041e 	bne	r2,zero,4ca7c <_dtoa_r+0xe18>
   4ca6c:	d9800317 	ldw	r6,12(sp)
   4ca70:	3000021e 	bne	r6,zero,4ca7c <_dtoa_r+0xe18>
   4ca74:	d8c00617 	ldw	r3,24(sp)
   4ca78:	18007626 	beq	r3,zero,4cc54 <_dtoa_r+0xff0>
   4ca7c:	b0005b16 	blt	r22,zero,4cbec <_dtoa_r+0xf88>
   4ca80:	b000041e 	bne	r22,zero,4ca94 <_dtoa_r+0xe30>
   4ca84:	d9000317 	ldw	r4,12(sp)
   4ca88:	2000021e 	bne	r4,zero,4ca94 <_dtoa_r+0xe30>
   4ca8c:	d8c00617 	ldw	r3,24(sp)
   4ca90:	18005626 	beq	r3,zero,4cbec <_dtoa_r+0xf88>
   4ca94:	00814d16 	blt	zero,r2,4cfcc <_dtoa_r+0x1368>
   4ca98:	d8c00417 	ldw	r3,16(sp)
   4ca9c:	9d800044 	addi	r22,r19,1
   4caa0:	9c800005 	stb	r18,0(r19)
   4caa4:	b02f883a 	mov	r23,r22
   4caa8:	98c14c26 	beq	r19,r3,4cfdc <_dtoa_r+0x1378>
   4caac:	e00b883a 	mov	r5,fp
   4cab0:	8009883a 	mov	r4,r16
   4cab4:	01800284 	movi	r6,10
   4cab8:	000f883a 	mov	r7,zero
   4cabc:	004e4d00 	call	4e4d0 <__multadd>
   4cac0:	1039883a 	mov	fp,r2
   4cac4:	8d006d26 	beq	r17,r20,4cc7c <_dtoa_r+0x1018>
   4cac8:	880b883a 	mov	r5,r17
   4cacc:	01800284 	movi	r6,10
   4cad0:	000f883a 	mov	r7,zero
   4cad4:	8009883a 	mov	r4,r16
   4cad8:	004e4d00 	call	4e4d0 <__multadd>
   4cadc:	a00b883a 	mov	r5,r20
   4cae0:	8009883a 	mov	r4,r16
   4cae4:	01800284 	movi	r6,10
   4cae8:	000f883a 	mov	r7,zero
   4caec:	1023883a 	mov	r17,r2
   4caf0:	004e4d00 	call	4e4d0 <__multadd>
   4caf4:	1029883a 	mov	r20,r2
   4caf8:	b027883a 	mov	r19,r22
   4cafc:	003fc006 	br	4ca00 <__alt_data_end+0xfffe5900>
   4cb00:	a005883a 	mov	r2,r20
   4cb04:	003ede06 	br	4c680 <__alt_data_end+0xfffe5580>
   4cb08:	01000044 	movi	r4,1
   4cb0c:	d9000b15 	stw	r4,44(sp)
   4cb10:	d9802217 	ldw	r6,136(sp)
   4cb14:	0180dc0e 	bge	zero,r6,4ce88 <_dtoa_r+0x1224>
   4cb18:	3023883a 	mov	r17,r6
   4cb1c:	d9800d15 	stw	r6,52(sp)
   4cb20:	d9800615 	stw	r6,24(sp)
   4cb24:	003d1e06 	br	4bfa0 <__alt_data_end+0xfffe4ea0>
   4cb28:	d8800617 	ldw	r2,24(sp)
   4cb2c:	00be3716 	blt	zero,r2,4c40c <__alt_data_end+0xfffe530c>
   4cb30:	1000be1e 	bne	r2,zero,4ce2c <_dtoa_r+0x11c8>
   4cb34:	8809883a 	mov	r4,r17
   4cb38:	a00b883a 	mov	r5,r20
   4cb3c:	000d883a 	mov	r6,zero
   4cb40:	01d00534 	movhi	r7,16404
   4cb44:	00536540 	call	53654 <__muldf3>
   4cb48:	1009883a 	mov	r4,r2
   4cb4c:	180b883a 	mov	r5,r3
   4cb50:	900d883a 	mov	r6,r18
   4cb54:	980f883a 	mov	r7,r19
   4cb58:	00534940 	call	53494 <__gedf2>
   4cb5c:	002b883a 	mov	r21,zero
   4cb60:	0023883a 	mov	r17,zero
   4cb64:	10007a16 	blt	r2,zero,4cd50 <_dtoa_r+0x10ec>
   4cb68:	d9002217 	ldw	r4,136(sp)
   4cb6c:	ddc00717 	ldw	r23,28(sp)
   4cb70:	0108303a 	nor	r4,zero,r4
   4cb74:	d9000515 	stw	r4,20(sp)
   4cb78:	8009883a 	mov	r4,r16
   4cb7c:	a80b883a 	mov	r5,r21
   4cb80:	004e4a80 	call	4e4a8 <_Bfree>
   4cb84:	883f751e 	bne	r17,zero,4c95c <__alt_data_end+0xfffe585c>
   4cb88:	003de406 	br	4c31c <__alt_data_end+0xfffe521c>
   4cb8c:	e00b883a 	mov	r5,fp
   4cb90:	8009883a 	mov	r4,r16
   4cb94:	004ea380 	call	4ea38 <__pow5mult>
   4cb98:	1039883a 	mov	fp,r2
   4cb9c:	003ed306 	br	4c6ec <__alt_data_end+0xfffe55ec>
   4cba0:	903ee01e 	bne	r18,zero,4c724 <__alt_data_end+0xfffe5624>
   4cba4:	00800434 	movhi	r2,16
   4cba8:	10bfffc4 	addi	r2,r2,-1
   4cbac:	9884703a 	and	r2,r19,r2
   4cbb0:	103f081e 	bne	r2,zero,4c7d4 <__alt_data_end+0xfffe56d4>
   4cbb4:	9cdffc2c 	andhi	r19,r19,32752
   4cbb8:	983f0626 	beq	r19,zero,4c7d4 <__alt_data_end+0xfffe56d4>
   4cbbc:	d8800817 	ldw	r2,32(sp)
   4cbc0:	b5800044 	addi	r22,r22,1
   4cbc4:	04c00044 	movi	r19,1
   4cbc8:	10800044 	addi	r2,r2,1
   4cbcc:	d8800815 	stw	r2,32(sp)
   4cbd0:	003f0106 	br	4c7d8 <__alt_data_end+0xfffe56d8>
   4cbd4:	d9800f17 	ldw	r6,60(sp)
   4cbd8:	30016826 	beq	r6,zero,4d17c <_dtoa_r+0x1518>
   4cbdc:	10810cc4 	addi	r2,r2,1075
   4cbe0:	dd400917 	ldw	r21,36(sp)
   4cbe4:	dd000817 	ldw	r20,32(sp)
   4cbe8:	003e9906 	br	4c650 <__alt_data_end+0xfffe5550>
   4cbec:	9011883a 	mov	r8,r18
   4cbf0:	4007883a 	mov	r3,r8
   4cbf4:	e02d883a 	mov	r22,fp
   4cbf8:	0080100e 	bge	zero,r2,4cc3c <_dtoa_r+0xfd8>
   4cbfc:	01800044 	movi	r6,1
   4cc00:	8009883a 	mov	r4,r16
   4cc04:	e00b883a 	mov	r5,fp
   4cc08:	da001515 	stw	r8,84(sp)
   4cc0c:	da001715 	stw	r8,92(sp)
   4cc10:	004eb780 	call	4eb78 <__lshift>
   4cc14:	1009883a 	mov	r4,r2
   4cc18:	a80b883a 	mov	r5,r21
   4cc1c:	102d883a 	mov	r22,r2
   4cc20:	004ecc00 	call	4ecc0 <__mcmp>
   4cc24:	d8c01517 	ldw	r3,84(sp)
   4cc28:	da001717 	ldw	r8,92(sp)
   4cc2c:	0081a50e 	bge	zero,r2,4d2c4 <_dtoa_r+0x1660>
   4cc30:	00800e44 	movi	r2,57
   4cc34:	40817b26 	beq	r8,r2,4d224 <_dtoa_r+0x15c0>
   4cc38:	40c00044 	addi	r3,r8,1
   4cc3c:	8825883a 	mov	r18,r17
   4cc40:	9dc00044 	addi	r23,r19,1
   4cc44:	98c00005 	stb	r3,0(r19)
   4cc48:	a023883a 	mov	r17,r20
   4cc4c:	b039883a 	mov	fp,r22
   4cc50:	003f3906 	br	4c938 <__alt_data_end+0xfffe5838>
   4cc54:	00800e44 	movi	r2,57
   4cc58:	9011883a 	mov	r8,r18
   4cc5c:	90817226 	beq	r18,r2,4d228 <_dtoa_r+0x15c4>
   4cc60:	0580010e 	bge	zero,r22,4cc68 <_dtoa_r+0x1004>
   4cc64:	ba000c44 	addi	r8,r23,49
   4cc68:	8825883a 	mov	r18,r17
   4cc6c:	9dc00044 	addi	r23,r19,1
   4cc70:	9a000005 	stb	r8,0(r19)
   4cc74:	a023883a 	mov	r17,r20
   4cc78:	003f2f06 	br	4c938 <__alt_data_end+0xfffe5838>
   4cc7c:	880b883a 	mov	r5,r17
   4cc80:	8009883a 	mov	r4,r16
   4cc84:	01800284 	movi	r6,10
   4cc88:	000f883a 	mov	r7,zero
   4cc8c:	004e4d00 	call	4e4d0 <__multadd>
   4cc90:	1023883a 	mov	r17,r2
   4cc94:	1029883a 	mov	r20,r2
   4cc98:	003f9706 	br	4caf8 <__alt_data_end+0xfffe59f8>
   4cc9c:	8009883a 	mov	r4,r16
   4cca0:	180b883a 	mov	r5,r3
   4cca4:	004e4a80 	call	4e4a8 <_Bfree>
   4cca8:	00800044 	movi	r2,1
   4ccac:	003f7306 	br	4ca7c <__alt_data_end+0xfffe597c>
   4ccb0:	e009883a 	mov	r4,fp
   4ccb4:	a80b883a 	mov	r5,r21
   4ccb8:	004ecc00 	call	4ecc0 <__mcmp>
   4ccbc:	103ee60e 	bge	r2,zero,4c858 <__alt_data_end+0xfffe5758>
   4ccc0:	8009883a 	mov	r4,r16
   4ccc4:	e00b883a 	mov	r5,fp
   4ccc8:	01800284 	movi	r6,10
   4cccc:	000f883a 	mov	r7,zero
   4ccd0:	004e4d00 	call	4e4d0 <__multadd>
   4ccd4:	d9000517 	ldw	r4,20(sp)
   4ccd8:	d9800b17 	ldw	r6,44(sp)
   4ccdc:	1039883a 	mov	fp,r2
   4cce0:	213fffc4 	addi	r4,r4,-1
   4cce4:	d9000515 	stw	r4,20(sp)
   4cce8:	303f2d1e 	bne	r6,zero,4c9a0 <__alt_data_end+0xfffe58a0>
   4ccec:	d9000d17 	ldw	r4,52(sp)
   4ccf0:	0101780e 	bge	zero,r4,4d2d4 <_dtoa_r+0x1670>
   4ccf4:	d9000615 	stw	r4,24(sp)
   4ccf8:	003edb06 	br	4c868 <__alt_data_end+0xfffe5768>
   4ccfc:	00800084 	movi	r2,2
   4cd00:	30818e1e 	bne	r6,r2,4d33c <_dtoa_r+0x16d8>
   4cd04:	d8000b15 	stw	zero,44(sp)
   4cd08:	003f8106 	br	4cb10 <__alt_data_end+0xfffe5a10>
   4cd0c:	d8800717 	ldw	r2,28(sp)
   4cd10:	003c0306 	br	4bd20 <__alt_data_end+0xfffe4c20>
   4cd14:	d9000317 	ldw	r4,12(sp)
   4cd18:	00800084 	movi	r2,2
   4cd1c:	113ed00e 	bge	r2,r4,4c860 <__alt_data_end+0xfffe5760>
   4cd20:	d8c00617 	ldw	r3,24(sp)
   4cd24:	183f901e 	bne	r3,zero,4cb68 <__alt_data_end+0xfffe5a68>
   4cd28:	a80b883a 	mov	r5,r21
   4cd2c:	8009883a 	mov	r4,r16
   4cd30:	01800144 	movi	r6,5
   4cd34:	000f883a 	mov	r7,zero
   4cd38:	004e4d00 	call	4e4d0 <__multadd>
   4cd3c:	e009883a 	mov	r4,fp
   4cd40:	100b883a 	mov	r5,r2
   4cd44:	102b883a 	mov	r21,r2
   4cd48:	004ecc00 	call	4ecc0 <__mcmp>
   4cd4c:	00bf860e 	bge	zero,r2,4cb68 <__alt_data_end+0xfffe5a68>
   4cd50:	d9800717 	ldw	r6,28(sp)
   4cd54:	00800c44 	movi	r2,49
   4cd58:	30800005 	stb	r2,0(r6)
   4cd5c:	d8800517 	ldw	r2,20(sp)
   4cd60:	35c00044 	addi	r23,r6,1
   4cd64:	10800044 	addi	r2,r2,1
   4cd68:	d8800515 	stw	r2,20(sp)
   4cd6c:	003f8206 	br	4cb78 <__alt_data_end+0xfffe5a78>
   4cd70:	903e981e 	bne	r18,zero,4c7d4 <__alt_data_end+0xfffe56d4>
   4cd74:	003f8b06 	br	4cba4 <__alt_data_end+0xfffe5aa4>
   4cd78:	d9800517 	ldw	r6,20(sp)
   4cd7c:	d8c00717 	ldw	r3,28(sp)
   4cd80:	00800c44 	movi	r2,49
   4cd84:	31800044 	addi	r6,r6,1
   4cd88:	d9800515 	stw	r6,20(sp)
   4cd8c:	18800005 	stb	r2,0(r3)
   4cd90:	003ee906 	br	4c938 <__alt_data_end+0xfffe5838>
   4cd94:	dc000317 	ldw	r16,12(sp)
   4cd98:	003d6006 	br	4c31c <__alt_data_end+0xfffe521c>
   4cd9c:	8809883a 	mov	r4,r17
   4cda0:	00546d00 	call	546d0 <__floatsidf>
   4cda4:	a009883a 	mov	r4,r20
   4cda8:	a80b883a 	mov	r5,r21
   4cdac:	100d883a 	mov	r6,r2
   4cdb0:	180f883a 	mov	r7,r3
   4cdb4:	00536540 	call	53654 <__muldf3>
   4cdb8:	1009883a 	mov	r4,r2
   4cdbc:	180b883a 	mov	r5,r3
   4cdc0:	000d883a 	mov	r6,zero
   4cdc4:	01d00734 	movhi	r7,16412
   4cdc8:	00522a80 	call	522a8 <__adddf3>
   4cdcc:	1023883a 	mov	r17,r2
   4cdd0:	00bf3034 	movhi	r2,64704
   4cdd4:	1885883a 	add	r2,r3,r2
   4cdd8:	d8800e15 	stw	r2,56(sp)
   4cddc:	a009883a 	mov	r4,r20
   4cde0:	a80b883a 	mov	r5,r21
   4cde4:	000d883a 	mov	r6,zero
   4cde8:	01d00534 	movhi	r7,16404
   4cdec:	0053d780 	call	53d78 <__subdf3>
   4cdf0:	d9c00e17 	ldw	r7,56(sp)
   4cdf4:	1009883a 	mov	r4,r2
   4cdf8:	180b883a 	mov	r5,r3
   4cdfc:	880d883a 	mov	r6,r17
   4ce00:	102b883a 	mov	r21,r2
   4ce04:	1829883a 	mov	r20,r3
   4ce08:	00534940 	call	53494 <__gedf2>
   4ce0c:	00807716 	blt	zero,r2,4cfec <_dtoa_r+0x1388>
   4ce10:	d8800e17 	ldw	r2,56(sp)
   4ce14:	a809883a 	mov	r4,r21
   4ce18:	a00b883a 	mov	r5,r20
   4ce1c:	11e0003c 	xorhi	r7,r2,32768
   4ce20:	880d883a 	mov	r6,r17
   4ce24:	00535740 	call	53574 <__ledf2>
   4ce28:	103d6b0e 	bge	r2,zero,4c3d8 <__alt_data_end+0xfffe52d8>
   4ce2c:	002b883a 	mov	r21,zero
   4ce30:	0023883a 	mov	r17,zero
   4ce34:	003f4c06 	br	4cb68 <__alt_data_end+0xfffe5a68>
   4ce38:	d9800917 	ldw	r6,36(sp)
   4ce3c:	e00b883a 	mov	r5,fp
   4ce40:	8009883a 	mov	r4,r16
   4ce44:	004ea380 	call	4ea38 <__pow5mult>
   4ce48:	1039883a 	mov	fp,r2
   4ce4c:	003e2706 	br	4c6ec <__alt_data_end+0xfffe55ec>
   4ce50:	d8000b15 	stw	zero,44(sp)
   4ce54:	003c4906 	br	4bf7c <__alt_data_end+0xfffe4e7c>
   4ce58:	d9000917 	ldw	r4,36(sp)
   4ce5c:	d9800a17 	ldw	r6,40(sp)
   4ce60:	dd400915 	stw	r21,36(sp)
   4ce64:	a905c83a 	sub	r2,r21,r4
   4ce68:	308d883a 	add	r6,r6,r2
   4ce6c:	d9800a15 	stw	r6,40(sp)
   4ce70:	002b883a 	mov	r21,zero
   4ce74:	003df206 	br	4c640 <__alt_data_end+0xfffe5540>
   4ce78:	dc800e15 	stw	r18,56(sp)
   4ce7c:	982b883a 	mov	r21,r19
   4ce80:	04400084 	movi	r17,2
   4ce84:	003c7406 	br	4c058 <__alt_data_end+0xfffe4f58>
   4ce88:	04400044 	movi	r17,1
   4ce8c:	dc400d15 	stw	r17,52(sp)
   4ce90:	dc400615 	stw	r17,24(sp)
   4ce94:	dc402215 	stw	r17,136(sp)
   4ce98:	80001115 	stw	zero,68(r16)
   4ce9c:	000b883a 	mov	r5,zero
   4cea0:	003c4a06 	br	4bfcc <__alt_data_end+0xfffe4ecc>
   4cea4:	3023883a 	mov	r17,r6
   4cea8:	003ffb06 	br	4ce98 <__alt_data_end+0xfffe5d98>
   4ceac:	1000021e 	bne	r2,zero,4ceb8 <_dtoa_r+0x1254>
   4ceb0:	4200004c 	andi	r8,r8,1
   4ceb4:	403e8f1e 	bne	r8,zero,4c8f4 <__alt_data_end+0xfffe57f4>
   4ceb8:	01000c04 	movi	r4,48
   4cebc:	00000106 	br	4cec4 <_dtoa_r+0x1260>
   4cec0:	102f883a 	mov	r23,r2
   4cec4:	b8bfffc4 	addi	r2,r23,-1
   4cec8:	10c00007 	ldb	r3,0(r2)
   4cecc:	193ffc26 	beq	r3,r4,4cec0 <__alt_data_end+0xfffe5dc0>
   4ced0:	003e9906 	br	4c938 <__alt_data_end+0xfffe5838>
   4ced4:	d9000517 	ldw	r4,20(sp)
   4ced8:	012fc83a 	sub	r23,zero,r4
   4cedc:	b800ad26 	beq	r23,zero,4d194 <_dtoa_r+0x1530>
   4cee0:	b88003cc 	andi	r2,r23,15
   4cee4:	100490fa 	slli	r2,r2,3
   4cee8:	00c001b4 	movhi	r3,6
   4ceec:	18ec2004 	addi	r3,r3,-20352
   4cef0:	1885883a 	add	r2,r3,r2
   4cef4:	11800017 	ldw	r6,0(r2)
   4cef8:	11c00117 	ldw	r7,4(r2)
   4cefc:	b82fd13a 	srai	r23,r23,4
   4cf00:	9009883a 	mov	r4,r18
   4cf04:	980b883a 	mov	r5,r19
   4cf08:	00536540 	call	53654 <__muldf3>
   4cf0c:	1029883a 	mov	r20,r2
   4cf10:	182b883a 	mov	r21,r3
   4cf14:	b800f426 	beq	r23,zero,4d2e8 <_dtoa_r+0x1684>
   4cf18:	020001b4 	movhi	r8,6
   4cf1c:	422c1604 	addi	r8,r8,-20392
   4cf20:	8029883a 	mov	r20,r16
   4cf24:	04400084 	movi	r17,2
   4cf28:	4021883a 	mov	r16,r8
   4cf2c:	b980004c 	andi	r6,r23,1
   4cf30:	1009883a 	mov	r4,r2
   4cf34:	b82fd07a 	srai	r23,r23,1
   4cf38:	180b883a 	mov	r5,r3
   4cf3c:	30000426 	beq	r6,zero,4cf50 <_dtoa_r+0x12ec>
   4cf40:	81800017 	ldw	r6,0(r16)
   4cf44:	81c00117 	ldw	r7,4(r16)
   4cf48:	8c400044 	addi	r17,r17,1
   4cf4c:	00536540 	call	53654 <__muldf3>
   4cf50:	84000204 	addi	r16,r16,8
   4cf54:	b83ff51e 	bne	r23,zero,4cf2c <__alt_data_end+0xfffe5e2c>
   4cf58:	a021883a 	mov	r16,r20
   4cf5c:	182b883a 	mov	r21,r3
   4cf60:	1029883a 	mov	r20,r2
   4cf64:	003c5506 	br	4c0bc <__alt_data_end+0xfffe4fbc>
   4cf68:	d9800517 	ldw	r6,20(sp)
   4cf6c:	d9000717 	ldw	r4,28(sp)
   4cf70:	00c00c04 	movi	r3,48
   4cf74:	31800044 	addi	r6,r6,1
   4cf78:	d9800515 	stw	r6,20(sp)
   4cf7c:	20c00005 	stb	r3,0(r4)
   4cf80:	02000c44 	movi	r8,49
   4cf84:	003da206 	br	4c610 <__alt_data_end+0xfffe5510>
   4cf88:	89400117 	ldw	r5,4(r17)
   4cf8c:	8009883a 	mov	r4,r16
   4cf90:	004e4000 	call	4e400 <_Balloc>
   4cf94:	89800417 	ldw	r6,16(r17)
   4cf98:	11000304 	addi	r4,r2,12
   4cf9c:	89400304 	addi	r5,r17,12
   4cfa0:	31800084 	addi	r6,r6,2
   4cfa4:	318d883a 	add	r6,r6,r6
   4cfa8:	318d883a 	add	r6,r6,r6
   4cfac:	1027883a 	mov	r19,r2
   4cfb0:	0048d300 	call	48d30 <memcpy>
   4cfb4:	8009883a 	mov	r4,r16
   4cfb8:	980b883a 	mov	r5,r19
   4cfbc:	01800044 	movi	r6,1
   4cfc0:	004eb780 	call	4eb78 <__lshift>
   4cfc4:	1029883a 	mov	r20,r2
   4cfc8:	003e8606 	br	4c9e4 <__alt_data_end+0xfffe58e4>
   4cfcc:	00800e44 	movi	r2,57
   4cfd0:	90809526 	beq	r18,r2,4d228 <_dtoa_r+0x15c4>
   4cfd4:	92000044 	addi	r8,r18,1
   4cfd8:	003f2306 	br	4cc68 <__alt_data_end+0xfffe5b68>
   4cfdc:	9011883a 	mov	r8,r18
   4cfe0:	8825883a 	mov	r18,r17
   4cfe4:	a023883a 	mov	r17,r20
   4cfe8:	003e3706 	br	4c8c8 <__alt_data_end+0xfffe57c8>
   4cfec:	002b883a 	mov	r21,zero
   4cff0:	0023883a 	mov	r17,zero
   4cff4:	003f5606 	br	4cd50 <__alt_data_end+0xfffe5c50>
   4cff8:	51bfffc4 	addi	r6,r10,-1
   4cffc:	300490fa 	slli	r2,r6,3
   4d000:	00c001b4 	movhi	r3,6
   4d004:	18ec2004 	addi	r3,r3,-20352
   4d008:	1885883a 	add	r2,r3,r2
   4d00c:	d9c00e17 	ldw	r7,56(sp)
   4d010:	11000017 	ldw	r4,0(r2)
   4d014:	11400117 	ldw	r5,4(r2)
   4d018:	d8800717 	ldw	r2,28(sp)
   4d01c:	d9801015 	stw	r6,64(sp)
   4d020:	880d883a 	mov	r6,r17
   4d024:	da801615 	stw	r10,88(sp)
   4d028:	15c00044 	addi	r23,r2,1
   4d02c:	00536540 	call	53654 <__muldf3>
   4d030:	a80b883a 	mov	r5,r21
   4d034:	a009883a 	mov	r4,r20
   4d038:	d8c01115 	stw	r3,68(sp)
   4d03c:	d8800e15 	stw	r2,56(sp)
   4d040:	00546480 	call	54648 <__fixdfsi>
   4d044:	1009883a 	mov	r4,r2
   4d048:	1023883a 	mov	r17,r2
   4d04c:	00546d00 	call	546d0 <__floatsidf>
   4d050:	a009883a 	mov	r4,r20
   4d054:	a80b883a 	mov	r5,r21
   4d058:	100d883a 	mov	r6,r2
   4d05c:	180f883a 	mov	r7,r3
   4d060:	0053d780 	call	53d78 <__subdf3>
   4d064:	1813883a 	mov	r9,r3
   4d068:	d8c00717 	ldw	r3,28(sp)
   4d06c:	8c400c04 	addi	r17,r17,48
   4d070:	1011883a 	mov	r8,r2
   4d074:	1c400005 	stb	r17,0(r3)
   4d078:	da801617 	ldw	r10,88(sp)
   4d07c:	00800044 	movi	r2,1
   4d080:	50802326 	beq	r10,r2,4d110 <_dtoa_r+0x14ac>
   4d084:	d8800717 	ldw	r2,28(sp)
   4d088:	b82b883a 	mov	r21,r23
   4d08c:	dc001315 	stw	r16,76(sp)
   4d090:	12a9883a 	add	r20,r2,r10
   4d094:	4807883a 	mov	r3,r9
   4d098:	4005883a 	mov	r2,r8
   4d09c:	dc801415 	stw	r18,80(sp)
   4d0a0:	000d883a 	mov	r6,zero
   4d0a4:	01d00934 	movhi	r7,16420
   4d0a8:	1009883a 	mov	r4,r2
   4d0ac:	180b883a 	mov	r5,r3
   4d0b0:	00536540 	call	53654 <__muldf3>
   4d0b4:	180b883a 	mov	r5,r3
   4d0b8:	1009883a 	mov	r4,r2
   4d0bc:	1821883a 	mov	r16,r3
   4d0c0:	1025883a 	mov	r18,r2
   4d0c4:	00546480 	call	54648 <__fixdfsi>
   4d0c8:	1009883a 	mov	r4,r2
   4d0cc:	1023883a 	mov	r17,r2
   4d0d0:	00546d00 	call	546d0 <__floatsidf>
   4d0d4:	9009883a 	mov	r4,r18
   4d0d8:	800b883a 	mov	r5,r16
   4d0dc:	100d883a 	mov	r6,r2
   4d0e0:	180f883a 	mov	r7,r3
   4d0e4:	8c400c04 	addi	r17,r17,48
   4d0e8:	0053d780 	call	53d78 <__subdf3>
   4d0ec:	ad400044 	addi	r21,r21,1
   4d0f0:	ac7fffc5 	stb	r17,-1(r21)
   4d0f4:	ad3fea1e 	bne	r21,r20,4d0a0 <__alt_data_end+0xfffe5fa0>
   4d0f8:	1813883a 	mov	r9,r3
   4d0fc:	d8c01017 	ldw	r3,64(sp)
   4d100:	dc001317 	ldw	r16,76(sp)
   4d104:	dc801417 	ldw	r18,80(sp)
   4d108:	1011883a 	mov	r8,r2
   4d10c:	b8ef883a 	add	r23,r23,r3
   4d110:	d9000e17 	ldw	r4,56(sp)
   4d114:	d9401117 	ldw	r5,68(sp)
   4d118:	000d883a 	mov	r6,zero
   4d11c:	01cff834 	movhi	r7,16352
   4d120:	da001715 	stw	r8,92(sp)
   4d124:	da401515 	stw	r9,84(sp)
   4d128:	00522a80 	call	522a8 <__adddf3>
   4d12c:	da001717 	ldw	r8,92(sp)
   4d130:	da401517 	ldw	r9,84(sp)
   4d134:	1009883a 	mov	r4,r2
   4d138:	400d883a 	mov	r6,r8
   4d13c:	480f883a 	mov	r7,r9
   4d140:	180b883a 	mov	r5,r3
   4d144:	00535740 	call	53574 <__ledf2>
   4d148:	da001717 	ldw	r8,92(sp)
   4d14c:	da401517 	ldw	r9,84(sp)
   4d150:	10003b0e 	bge	r2,zero,4d240 <_dtoa_r+0x15dc>
   4d154:	d9001217 	ldw	r4,72(sp)
   4d158:	bd7fffc3 	ldbu	r21,-1(r23)
   4d15c:	d9000515 	stw	r4,20(sp)
   4d160:	003d1c06 	br	4c5d4 <__alt_data_end+0xfffe54d4>
   4d164:	d8c00817 	ldw	r3,32(sp)
   4d168:	18a9c83a 	sub	r20,r3,r2
   4d16c:	0005883a 	mov	r2,zero
   4d170:	003d3706 	br	4c650 <__alt_data_end+0xfffe5550>
   4d174:	00800044 	movi	r2,1
   4d178:	003dd006 	br	4c8bc <__alt_data_end+0xfffe57bc>
   4d17c:	d8c00217 	ldw	r3,8(sp)
   4d180:	00800d84 	movi	r2,54
   4d184:	dd400917 	ldw	r21,36(sp)
   4d188:	10c5c83a 	sub	r2,r2,r3
   4d18c:	dd000817 	ldw	r20,32(sp)
   4d190:	003d2f06 	br	4c650 <__alt_data_end+0xfffe5550>
   4d194:	9029883a 	mov	r20,r18
   4d198:	982b883a 	mov	r21,r19
   4d19c:	04400084 	movi	r17,2
   4d1a0:	003bc606 	br	4c0bc <__alt_data_end+0xfffe4fbc>
   4d1a4:	d8800617 	ldw	r2,24(sp)
   4d1a8:	103efc26 	beq	r2,zero,4cd9c <__alt_data_end+0xfffe5c9c>
   4d1ac:	d8c00d17 	ldw	r3,52(sp)
   4d1b0:	00fc890e 	bge	zero,r3,4c3d8 <__alt_data_end+0xfffe52d8>
   4d1b4:	a80b883a 	mov	r5,r21
   4d1b8:	a009883a 	mov	r4,r20
   4d1bc:	000d883a 	mov	r6,zero
   4d1c0:	01d00934 	movhi	r7,16420
   4d1c4:	00536540 	call	53654 <__muldf3>
   4d1c8:	89000044 	addi	r4,r17,1
   4d1cc:	1029883a 	mov	r20,r2
   4d1d0:	182b883a 	mov	r21,r3
   4d1d4:	00546d00 	call	546d0 <__floatsidf>
   4d1d8:	a009883a 	mov	r4,r20
   4d1dc:	a80b883a 	mov	r5,r21
   4d1e0:	100d883a 	mov	r6,r2
   4d1e4:	180f883a 	mov	r7,r3
   4d1e8:	00536540 	call	53654 <__muldf3>
   4d1ec:	1009883a 	mov	r4,r2
   4d1f0:	180b883a 	mov	r5,r3
   4d1f4:	000d883a 	mov	r6,zero
   4d1f8:	01d00734 	movhi	r7,16412
   4d1fc:	00522a80 	call	522a8 <__adddf3>
   4d200:	d9000517 	ldw	r4,20(sp)
   4d204:	1023883a 	mov	r17,r2
   4d208:	00bf3034 	movhi	r2,64704
   4d20c:	213fffc4 	addi	r4,r4,-1
   4d210:	1885883a 	add	r2,r3,r2
   4d214:	d9001215 	stw	r4,72(sp)
   4d218:	d8800e15 	stw	r2,56(sp)
   4d21c:	da800d17 	ldw	r10,52(sp)
   4d220:	003bc306 	br	4c130 <__alt_data_end+0xfffe5030>
   4d224:	b039883a 	mov	fp,r22
   4d228:	01000e44 	movi	r4,57
   4d22c:	8825883a 	mov	r18,r17
   4d230:	9dc00044 	addi	r23,r19,1
   4d234:	99000005 	stb	r4,0(r19)
   4d238:	a023883a 	mov	r17,r20
   4d23c:	003dae06 	br	4c8f8 <__alt_data_end+0xfffe57f8>
   4d240:	d9800e17 	ldw	r6,56(sp)
   4d244:	d9c01117 	ldw	r7,68(sp)
   4d248:	0009883a 	mov	r4,zero
   4d24c:	014ff834 	movhi	r5,16352
   4d250:	da001715 	stw	r8,92(sp)
   4d254:	da401515 	stw	r9,84(sp)
   4d258:	0053d780 	call	53d78 <__subdf3>
   4d25c:	da001717 	ldw	r8,92(sp)
   4d260:	da401517 	ldw	r9,84(sp)
   4d264:	1009883a 	mov	r4,r2
   4d268:	180b883a 	mov	r5,r3
   4d26c:	400d883a 	mov	r6,r8
   4d270:	480f883a 	mov	r7,r9
   4d274:	00534940 	call	53494 <__gedf2>
   4d278:	00bc570e 	bge	zero,r2,4c3d8 <__alt_data_end+0xfffe52d8>
   4d27c:	01000c04 	movi	r4,48
   4d280:	00000106 	br	4d288 <_dtoa_r+0x1624>
   4d284:	102f883a 	mov	r23,r2
   4d288:	b8bfffc4 	addi	r2,r23,-1
   4d28c:	10c00007 	ldb	r3,0(r2)
   4d290:	193ffc26 	beq	r3,r4,4d284 <__alt_data_end+0xfffe6184>
   4d294:	d9801217 	ldw	r6,72(sp)
   4d298:	d9800515 	stw	r6,20(sp)
   4d29c:	003c1f06 	br	4c31c <__alt_data_end+0xfffe521c>
   4d2a0:	d8801217 	ldw	r2,72(sp)
   4d2a4:	dc001117 	ldw	r16,68(sp)
   4d2a8:	d8800515 	stw	r2,20(sp)
   4d2ac:	003cc906 	br	4c5d4 <__alt_data_end+0xfffe54d4>
   4d2b0:	dd801317 	ldw	r22,76(sp)
   4d2b4:	dc001117 	ldw	r16,68(sp)
   4d2b8:	dcc01417 	ldw	r19,80(sp)
   4d2bc:	dc801017 	ldw	r18,64(sp)
   4d2c0:	003c4506 	br	4c3d8 <__alt_data_end+0xfffe52d8>
   4d2c4:	103e5d1e 	bne	r2,zero,4cc3c <__alt_data_end+0xfffe5b3c>
   4d2c8:	4080004c 	andi	r2,r8,1
   4d2cc:	103e5b26 	beq	r2,zero,4cc3c <__alt_data_end+0xfffe5b3c>
   4d2d0:	003e5706 	br	4cc30 <__alt_data_end+0xfffe5b30>
   4d2d4:	d8c00317 	ldw	r3,12(sp)
   4d2d8:	00800084 	movi	r2,2
   4d2dc:	10c00a16 	blt	r2,r3,4d308 <_dtoa_r+0x16a4>
   4d2e0:	d9000d17 	ldw	r4,52(sp)
   4d2e4:	003e8306 	br	4ccf4 <__alt_data_end+0xfffe5bf4>
   4d2e8:	04400084 	movi	r17,2
   4d2ec:	003b7306 	br	4c0bc <__alt_data_end+0xfffe4fbc>
   4d2f0:	d9801217 	ldw	r6,72(sp)
   4d2f4:	d9800515 	stw	r6,20(sp)
   4d2f8:	003cb606 	br	4c5d4 <__alt_data_end+0xfffe54d4>
   4d2fc:	d9001217 	ldw	r4,72(sp)
   4d300:	d9000515 	stw	r4,20(sp)
   4d304:	003c0506 	br	4c31c <__alt_data_end+0xfffe521c>
   4d308:	d9800d17 	ldw	r6,52(sp)
   4d30c:	d9800615 	stw	r6,24(sp)
   4d310:	003e8306 	br	4cd20 <__alt_data_end+0xfffe5c20>
   4d314:	d9800317 	ldw	r6,12(sp)
   4d318:	00800084 	movi	r2,2
   4d31c:	11800216 	blt	r2,r6,4d328 <_dtoa_r+0x16c4>
   4d320:	d8800d17 	ldw	r2,52(sp)
   4d324:	003da606 	br	4c9c0 <__alt_data_end+0xfffe58c0>
   4d328:	d8800d17 	ldw	r2,52(sp)
   4d32c:	d8800615 	stw	r2,24(sp)
   4d330:	003e7b06 	br	4cd20 <__alt_data_end+0xfffe5c20>
   4d334:	05000044 	movi	r20,1
   4d338:	003b0506 	br	4bf50 <__alt_data_end+0xfffe4e50>
   4d33c:	8009883a 	mov	r4,r16
   4d340:	80001115 	stw	zero,68(r16)
   4d344:	000b883a 	mov	r5,zero
   4d348:	004e4000 	call	4e400 <_Balloc>
   4d34c:	d8800715 	stw	r2,28(sp)
   4d350:	d8c00717 	ldw	r3,28(sp)
   4d354:	00bfffc4 	movi	r2,-1
   4d358:	01000044 	movi	r4,1
   4d35c:	d8800615 	stw	r2,24(sp)
   4d360:	80c01015 	stw	r3,64(r16)
   4d364:	d9000b15 	stw	r4,44(sp)
   4d368:	d8002215 	stw	zero,136(sp)
   4d36c:	d8800d15 	stw	r2,52(sp)
   4d370:	003c1906 	br	4c3d8 <__alt_data_end+0xfffe52d8>
   4d374:	193d2926 	beq	r3,r4,4c81c <__alt_data_end+0xfffe571c>
   4d378:	00c00f04 	movi	r3,60
   4d37c:	1885c83a 	sub	r2,r3,r2
   4d380:	003d7b06 	br	4c970 <__alt_data_end+0xfffe5870>
   4d384:	000b883a 	mov	r5,zero
   4d388:	003b1006 	br	4bfcc <__alt_data_end+0xfffe4ecc>

0004d38c <_fclose_r>:
   4d38c:	28003226 	beq	r5,zero,4d458 <_fclose_r+0xcc>
   4d390:	defffc04 	addi	sp,sp,-16
   4d394:	dc400115 	stw	r17,4(sp)
   4d398:	2023883a 	mov	r17,r4
   4d39c:	dc000015 	stw	r16,0(sp)
   4d3a0:	dfc00315 	stw	ra,12(sp)
   4d3a4:	dc800215 	stw	r18,8(sp)
   4d3a8:	2821883a 	mov	r16,r5
   4d3ac:	00482740 	call	48274 <__sfp_lock_acquire>
   4d3b0:	88000226 	beq	r17,zero,4d3bc <_fclose_r+0x30>
   4d3b4:	88800e17 	ldw	r2,56(r17)
   4d3b8:	10002926 	beq	r2,zero,4d460 <_fclose_r+0xd4>
   4d3bc:	8080030f 	ldh	r2,12(r16)
   4d3c0:	10002226 	beq	r2,zero,4d44c <_fclose_r+0xc0>
   4d3c4:	8809883a 	mov	r4,r17
   4d3c8:	800b883a 	mov	r5,r16
   4d3cc:	004d4a00 	call	4d4a0 <_fflush_r>
   4d3d0:	1025883a 	mov	r18,r2
   4d3d4:	80800b17 	ldw	r2,44(r16)
   4d3d8:	10000426 	beq	r2,zero,4d3ec <_fclose_r+0x60>
   4d3dc:	81400717 	ldw	r5,28(r16)
   4d3e0:	8809883a 	mov	r4,r17
   4d3e4:	103ee83a 	callr	r2
   4d3e8:	10002616 	blt	r2,zero,4d484 <_fclose_r+0xf8>
   4d3ec:	8080030b 	ldhu	r2,12(r16)
   4d3f0:	1080200c 	andi	r2,r2,128
   4d3f4:	10001f1e 	bne	r2,zero,4d474 <_fclose_r+0xe8>
   4d3f8:	81400c17 	ldw	r5,48(r16)
   4d3fc:	28000526 	beq	r5,zero,4d414 <_fclose_r+0x88>
   4d400:	80801004 	addi	r2,r16,64
   4d404:	28800226 	beq	r5,r2,4d410 <_fclose_r+0x84>
   4d408:	8809883a 	mov	r4,r17
   4d40c:	004d81c0 	call	4d81c <_free_r>
   4d410:	80000c15 	stw	zero,48(r16)
   4d414:	81401117 	ldw	r5,68(r16)
   4d418:	28000326 	beq	r5,zero,4d428 <_fclose_r+0x9c>
   4d41c:	8809883a 	mov	r4,r17
   4d420:	004d81c0 	call	4d81c <_free_r>
   4d424:	80001115 	stw	zero,68(r16)
   4d428:	8000030d 	sth	zero,12(r16)
   4d42c:	00482780 	call	48278 <__sfp_lock_release>
   4d430:	9005883a 	mov	r2,r18
   4d434:	dfc00317 	ldw	ra,12(sp)
   4d438:	dc800217 	ldw	r18,8(sp)
   4d43c:	dc400117 	ldw	r17,4(sp)
   4d440:	dc000017 	ldw	r16,0(sp)
   4d444:	dec00404 	addi	sp,sp,16
   4d448:	f800283a 	ret
   4d44c:	00482780 	call	48278 <__sfp_lock_release>
   4d450:	0005883a 	mov	r2,zero
   4d454:	003ff706 	br	4d434 <__alt_data_end+0xfffe6334>
   4d458:	0005883a 	mov	r2,zero
   4d45c:	f800283a 	ret
   4d460:	8809883a 	mov	r4,r17
   4d464:	00482640 	call	48264 <__sinit>
   4d468:	8080030f 	ldh	r2,12(r16)
   4d46c:	103fd51e 	bne	r2,zero,4d3c4 <__alt_data_end+0xfffe62c4>
   4d470:	003ff606 	br	4d44c <__alt_data_end+0xfffe634c>
   4d474:	81400417 	ldw	r5,16(r16)
   4d478:	8809883a 	mov	r4,r17
   4d47c:	004d81c0 	call	4d81c <_free_r>
   4d480:	003fdd06 	br	4d3f8 <__alt_data_end+0xfffe62f8>
   4d484:	04bfffc4 	movi	r18,-1
   4d488:	003fd806 	br	4d3ec <__alt_data_end+0xfffe62ec>

0004d48c <fclose>:
   4d48c:	008001b4 	movhi	r2,6
   4d490:	10b33004 	addi	r2,r2,-13120
   4d494:	200b883a 	mov	r5,r4
   4d498:	11000017 	ldw	r4,0(r2)
   4d49c:	004d38c1 	jmpi	4d38c <_fclose_r>

0004d4a0 <_fflush_r>:
   4d4a0:	defffb04 	addi	sp,sp,-20
   4d4a4:	dcc00315 	stw	r19,12(sp)
   4d4a8:	dc000015 	stw	r16,0(sp)
   4d4ac:	dfc00415 	stw	ra,16(sp)
   4d4b0:	dc800215 	stw	r18,8(sp)
   4d4b4:	dc400115 	stw	r17,4(sp)
   4d4b8:	2027883a 	mov	r19,r4
   4d4bc:	2821883a 	mov	r16,r5
   4d4c0:	20000226 	beq	r4,zero,4d4cc <_fflush_r+0x2c>
   4d4c4:	20800e17 	ldw	r2,56(r4)
   4d4c8:	10005326 	beq	r2,zero,4d618 <_fflush_r+0x178>
   4d4cc:	8080030b 	ldhu	r2,12(r16)
   4d4d0:	10ffffcc 	andi	r3,r2,65535
   4d4d4:	18e0001c 	xori	r3,r3,32768
   4d4d8:	18e00004 	addi	r3,r3,-32768
   4d4dc:	18002c26 	beq	r3,zero,4d590 <_fflush_r+0xf0>
   4d4e0:	10c0020c 	andi	r3,r2,8
   4d4e4:	1800321e 	bne	r3,zero,4d5b0 <_fflush_r+0x110>
   4d4e8:	80c00117 	ldw	r3,4(r16)
   4d4ec:	10820014 	ori	r2,r2,2048
   4d4f0:	8080030d 	sth	r2,12(r16)
   4d4f4:	00c0570e 	bge	zero,r3,4d654 <_fflush_r+0x1b4>
   4d4f8:	82000a17 	ldw	r8,40(r16)
   4d4fc:	40002426 	beq	r8,zero,4d590 <_fflush_r+0xf0>
   4d500:	9c400017 	ldw	r17,0(r19)
   4d504:	10c4000c 	andi	r3,r2,4096
   4d508:	98000015 	stw	zero,0(r19)
   4d50c:	18004626 	beq	r3,zero,4d628 <_fflush_r+0x188>
   4d510:	81801417 	ldw	r6,80(r16)
   4d514:	10c0010c 	andi	r3,r2,4
   4d518:	18000626 	beq	r3,zero,4d534 <_fflush_r+0x94>
   4d51c:	80c00117 	ldw	r3,4(r16)
   4d520:	80800c17 	ldw	r2,48(r16)
   4d524:	30cdc83a 	sub	r6,r6,r3
   4d528:	10000226 	beq	r2,zero,4d534 <_fflush_r+0x94>
   4d52c:	80800f17 	ldw	r2,60(r16)
   4d530:	308dc83a 	sub	r6,r6,r2
   4d534:	81400717 	ldw	r5,28(r16)
   4d538:	9809883a 	mov	r4,r19
   4d53c:	000f883a 	mov	r7,zero
   4d540:	403ee83a 	callr	r8
   4d544:	00ffffc4 	movi	r3,-1
   4d548:	10c04526 	beq	r2,r3,4d660 <_fflush_r+0x1c0>
   4d54c:	80c0030b 	ldhu	r3,12(r16)
   4d550:	81000417 	ldw	r4,16(r16)
   4d554:	80000115 	stw	zero,4(r16)
   4d558:	197dffcc 	andi	r5,r3,63487
   4d55c:	8140030d 	sth	r5,12(r16)
   4d560:	81000015 	stw	r4,0(r16)
   4d564:	18c4000c 	andi	r3,r3,4096
   4d568:	18000126 	beq	r3,zero,4d570 <_fflush_r+0xd0>
   4d56c:	80801415 	stw	r2,80(r16)
   4d570:	81400c17 	ldw	r5,48(r16)
   4d574:	9c400015 	stw	r17,0(r19)
   4d578:	28000526 	beq	r5,zero,4d590 <_fflush_r+0xf0>
   4d57c:	80801004 	addi	r2,r16,64
   4d580:	28800226 	beq	r5,r2,4d58c <_fflush_r+0xec>
   4d584:	9809883a 	mov	r4,r19
   4d588:	004d81c0 	call	4d81c <_free_r>
   4d58c:	80000c15 	stw	zero,48(r16)
   4d590:	0005883a 	mov	r2,zero
   4d594:	dfc00417 	ldw	ra,16(sp)
   4d598:	dcc00317 	ldw	r19,12(sp)
   4d59c:	dc800217 	ldw	r18,8(sp)
   4d5a0:	dc400117 	ldw	r17,4(sp)
   4d5a4:	dc000017 	ldw	r16,0(sp)
   4d5a8:	dec00504 	addi	sp,sp,20
   4d5ac:	f800283a 	ret
   4d5b0:	84800417 	ldw	r18,16(r16)
   4d5b4:	903ff626 	beq	r18,zero,4d590 <__alt_data_end+0xfffe6490>
   4d5b8:	84400017 	ldw	r17,0(r16)
   4d5bc:	108000cc 	andi	r2,r2,3
   4d5c0:	84800015 	stw	r18,0(r16)
   4d5c4:	8ca3c83a 	sub	r17,r17,r18
   4d5c8:	10001526 	beq	r2,zero,4d620 <_fflush_r+0x180>
   4d5cc:	0005883a 	mov	r2,zero
   4d5d0:	80800215 	stw	r2,8(r16)
   4d5d4:	04400316 	blt	zero,r17,4d5e4 <_fflush_r+0x144>
   4d5d8:	003fed06 	br	4d590 <__alt_data_end+0xfffe6490>
   4d5dc:	90a5883a 	add	r18,r18,r2
   4d5e0:	047feb0e 	bge	zero,r17,4d590 <__alt_data_end+0xfffe6490>
   4d5e4:	80800917 	ldw	r2,36(r16)
   4d5e8:	81400717 	ldw	r5,28(r16)
   4d5ec:	880f883a 	mov	r7,r17
   4d5f0:	900d883a 	mov	r6,r18
   4d5f4:	9809883a 	mov	r4,r19
   4d5f8:	103ee83a 	callr	r2
   4d5fc:	88a3c83a 	sub	r17,r17,r2
   4d600:	00bff616 	blt	zero,r2,4d5dc <__alt_data_end+0xfffe64dc>
   4d604:	80c0030b 	ldhu	r3,12(r16)
   4d608:	00bfffc4 	movi	r2,-1
   4d60c:	18c01014 	ori	r3,r3,64
   4d610:	80c0030d 	sth	r3,12(r16)
   4d614:	003fdf06 	br	4d594 <__alt_data_end+0xfffe6494>
   4d618:	00482640 	call	48264 <__sinit>
   4d61c:	003fab06 	br	4d4cc <__alt_data_end+0xfffe63cc>
   4d620:	80800517 	ldw	r2,20(r16)
   4d624:	003fea06 	br	4d5d0 <__alt_data_end+0xfffe64d0>
   4d628:	81400717 	ldw	r5,28(r16)
   4d62c:	000d883a 	mov	r6,zero
   4d630:	9809883a 	mov	r4,r19
   4d634:	01c00044 	movi	r7,1
   4d638:	403ee83a 	callr	r8
   4d63c:	100d883a 	mov	r6,r2
   4d640:	00bfffc4 	movi	r2,-1
   4d644:	30801326 	beq	r6,r2,4d694 <_fflush_r+0x1f4>
   4d648:	8080030b 	ldhu	r2,12(r16)
   4d64c:	82000a17 	ldw	r8,40(r16)
   4d650:	003fb006 	br	4d514 <__alt_data_end+0xfffe6414>
   4d654:	80c00f17 	ldw	r3,60(r16)
   4d658:	00ffa716 	blt	zero,r3,4d4f8 <__alt_data_end+0xfffe63f8>
   4d65c:	003fcc06 	br	4d590 <__alt_data_end+0xfffe6490>
   4d660:	98c00017 	ldw	r3,0(r19)
   4d664:	183fb926 	beq	r3,zero,4d54c <__alt_data_end+0xfffe644c>
   4d668:	01000744 	movi	r4,29
   4d66c:	19000226 	beq	r3,r4,4d678 <_fflush_r+0x1d8>
   4d670:	01000584 	movi	r4,22
   4d674:	1900101e 	bne	r3,r4,4d6b8 <_fflush_r+0x218>
   4d678:	8080030b 	ldhu	r2,12(r16)
   4d67c:	80c00417 	ldw	r3,16(r16)
   4d680:	80000115 	stw	zero,4(r16)
   4d684:	10bdffcc 	andi	r2,r2,63487
   4d688:	8080030d 	sth	r2,12(r16)
   4d68c:	80c00015 	stw	r3,0(r16)
   4d690:	003fb706 	br	4d570 <__alt_data_end+0xfffe6470>
   4d694:	98800017 	ldw	r2,0(r19)
   4d698:	103feb26 	beq	r2,zero,4d648 <__alt_data_end+0xfffe6548>
   4d69c:	00c00744 	movi	r3,29
   4d6a0:	10c00226 	beq	r2,r3,4d6ac <_fflush_r+0x20c>
   4d6a4:	00c00584 	movi	r3,22
   4d6a8:	10ffd61e 	bne	r2,r3,4d604 <__alt_data_end+0xfffe6504>
   4d6ac:	9c400015 	stw	r17,0(r19)
   4d6b0:	0005883a 	mov	r2,zero
   4d6b4:	003fb706 	br	4d594 <__alt_data_end+0xfffe6494>
   4d6b8:	80c0030b 	ldhu	r3,12(r16)
   4d6bc:	18c01014 	ori	r3,r3,64
   4d6c0:	80c0030d 	sth	r3,12(r16)
   4d6c4:	003fb306 	br	4d594 <__alt_data_end+0xfffe6494>

0004d6c8 <fflush>:
   4d6c8:	20000526 	beq	r4,zero,4d6e0 <fflush+0x18>
   4d6cc:	008001b4 	movhi	r2,6
   4d6d0:	10b33004 	addi	r2,r2,-13120
   4d6d4:	200b883a 	mov	r5,r4
   4d6d8:	11000017 	ldw	r4,0(r2)
   4d6dc:	004d4a01 	jmpi	4d4a0 <_fflush_r>
   4d6e0:	008001b4 	movhi	r2,6
   4d6e4:	10b32f04 	addi	r2,r2,-13124
   4d6e8:	11000017 	ldw	r4,0(r2)
   4d6ec:	01400174 	movhi	r5,5
   4d6f0:	29752804 	addi	r5,r5,-11104
   4d6f4:	004836c1 	jmpi	4836c <_fwalk_reent>

0004d6f8 <_malloc_trim_r>:
   4d6f8:	defffb04 	addi	sp,sp,-20
   4d6fc:	dcc00315 	stw	r19,12(sp)
   4d700:	04c001b4 	movhi	r19,6
   4d704:	dc800215 	stw	r18,8(sp)
   4d708:	dc400115 	stw	r17,4(sp)
   4d70c:	dc000015 	stw	r16,0(sp)
   4d710:	dfc00415 	stw	ra,16(sp)
   4d714:	2821883a 	mov	r16,r5
   4d718:	9ced8b04 	addi	r19,r19,-18900
   4d71c:	2025883a 	mov	r18,r4
   4d720:	00550d40 	call	550d4 <__malloc_lock>
   4d724:	98800217 	ldw	r2,8(r19)
   4d728:	14400117 	ldw	r17,4(r2)
   4d72c:	00bfff04 	movi	r2,-4
   4d730:	88a2703a 	and	r17,r17,r2
   4d734:	8c21c83a 	sub	r16,r17,r16
   4d738:	8403fbc4 	addi	r16,r16,4079
   4d73c:	8020d33a 	srli	r16,r16,12
   4d740:	0083ffc4 	movi	r2,4095
   4d744:	843fffc4 	addi	r16,r16,-1
   4d748:	8020933a 	slli	r16,r16,12
   4d74c:	1400060e 	bge	r2,r16,4d768 <_malloc_trim_r+0x70>
   4d750:	9009883a 	mov	r4,r18
   4d754:	000b883a 	mov	r5,zero
   4d758:	00492a40 	call	492a4 <_sbrk_r>
   4d75c:	98c00217 	ldw	r3,8(r19)
   4d760:	1c47883a 	add	r3,r3,r17
   4d764:	10c00a26 	beq	r2,r3,4d790 <_malloc_trim_r+0x98>
   4d768:	9009883a 	mov	r4,r18
   4d76c:	00550f40 	call	550f4 <__malloc_unlock>
   4d770:	0005883a 	mov	r2,zero
   4d774:	dfc00417 	ldw	ra,16(sp)
   4d778:	dcc00317 	ldw	r19,12(sp)
   4d77c:	dc800217 	ldw	r18,8(sp)
   4d780:	dc400117 	ldw	r17,4(sp)
   4d784:	dc000017 	ldw	r16,0(sp)
   4d788:	dec00504 	addi	sp,sp,20
   4d78c:	f800283a 	ret
   4d790:	9009883a 	mov	r4,r18
   4d794:	040bc83a 	sub	r5,zero,r16
   4d798:	00492a40 	call	492a4 <_sbrk_r>
   4d79c:	00ffffc4 	movi	r3,-1
   4d7a0:	10c00d26 	beq	r2,r3,4d7d8 <_malloc_trim_r+0xe0>
   4d7a4:	00c001b4 	movhi	r3,6
   4d7a8:	18fa2904 	addi	r3,r3,-5980
   4d7ac:	18800017 	ldw	r2,0(r3)
   4d7b0:	99000217 	ldw	r4,8(r19)
   4d7b4:	8c23c83a 	sub	r17,r17,r16
   4d7b8:	8c400054 	ori	r17,r17,1
   4d7bc:	1421c83a 	sub	r16,r2,r16
   4d7c0:	24400115 	stw	r17,4(r4)
   4d7c4:	9009883a 	mov	r4,r18
   4d7c8:	1c000015 	stw	r16,0(r3)
   4d7cc:	00550f40 	call	550f4 <__malloc_unlock>
   4d7d0:	00800044 	movi	r2,1
   4d7d4:	003fe706 	br	4d774 <__alt_data_end+0xfffe6674>
   4d7d8:	9009883a 	mov	r4,r18
   4d7dc:	000b883a 	mov	r5,zero
   4d7e0:	00492a40 	call	492a4 <_sbrk_r>
   4d7e4:	99000217 	ldw	r4,8(r19)
   4d7e8:	014003c4 	movi	r5,15
   4d7ec:	1107c83a 	sub	r3,r2,r4
   4d7f0:	28ffdd0e 	bge	r5,r3,4d768 <__alt_data_end+0xfffe6668>
   4d7f4:	014001b4 	movhi	r5,6
   4d7f8:	29733104 	addi	r5,r5,-13116
   4d7fc:	29400017 	ldw	r5,0(r5)
   4d800:	18c00054 	ori	r3,r3,1
   4d804:	20c00115 	stw	r3,4(r4)
   4d808:	00c001b4 	movhi	r3,6
   4d80c:	1145c83a 	sub	r2,r2,r5
   4d810:	18fa2904 	addi	r3,r3,-5980
   4d814:	18800015 	stw	r2,0(r3)
   4d818:	003fd306 	br	4d768 <__alt_data_end+0xfffe6668>

0004d81c <_free_r>:
   4d81c:	28004c26 	beq	r5,zero,4d950 <_free_r+0x134>
   4d820:	defffd04 	addi	sp,sp,-12
   4d824:	dc400115 	stw	r17,4(sp)
   4d828:	dc000015 	stw	r16,0(sp)
   4d82c:	2023883a 	mov	r17,r4
   4d830:	2821883a 	mov	r16,r5
   4d834:	dfc00215 	stw	ra,8(sp)
   4d838:	00550d40 	call	550d4 <__malloc_lock>
   4d83c:	813fff17 	ldw	r4,-4(r16)
   4d840:	00bfff84 	movi	r2,-2
   4d844:	024001b4 	movhi	r9,6
   4d848:	81bffe04 	addi	r6,r16,-8
   4d84c:	2084703a 	and	r2,r4,r2
   4d850:	4a6d8b04 	addi	r9,r9,-18900
   4d854:	308b883a 	add	r5,r6,r2
   4d858:	2a000117 	ldw	r8,4(r5)
   4d85c:	49c00217 	ldw	r7,8(r9)
   4d860:	00ffff04 	movi	r3,-4
   4d864:	40c6703a 	and	r3,r8,r3
   4d868:	39405326 	beq	r7,r5,4d9b8 <_free_r+0x19c>
   4d86c:	28c00115 	stw	r3,4(r5)
   4d870:	2100004c 	andi	r4,r4,1
   4d874:	2000091e 	bne	r4,zero,4d89c <_free_r+0x80>
   4d878:	81fffe17 	ldw	r7,-8(r16)
   4d87c:	4a000204 	addi	r8,r9,8
   4d880:	31cdc83a 	sub	r6,r6,r7
   4d884:	31000217 	ldw	r4,8(r6)
   4d888:	11c5883a 	add	r2,r2,r7
   4d88c:	22006126 	beq	r4,r8,4da14 <_free_r+0x1f8>
   4d890:	31c00317 	ldw	r7,12(r6)
   4d894:	21c00315 	stw	r7,12(r4)
   4d898:	39000215 	stw	r4,8(r7)
   4d89c:	28c9883a 	add	r4,r5,r3
   4d8a0:	21c00117 	ldw	r7,4(r4)
   4d8a4:	39c0004c 	andi	r7,r7,1
   4d8a8:	38000d1e 	bne	r7,zero,4d8e0 <_free_r+0xc4>
   4d8ac:	29000217 	ldw	r4,8(r5)
   4d8b0:	10c5883a 	add	r2,r2,r3
   4d8b4:	00c001b4 	movhi	r3,6
   4d8b8:	18ed8d04 	addi	r3,r3,-18892
   4d8bc:	20c07526 	beq	r4,r3,4da94 <_free_r+0x278>
   4d8c0:	29c00317 	ldw	r7,12(r5)
   4d8c4:	11400054 	ori	r5,r2,1
   4d8c8:	3087883a 	add	r3,r6,r2
   4d8cc:	21c00315 	stw	r7,12(r4)
   4d8d0:	39000215 	stw	r4,8(r7)
   4d8d4:	31400115 	stw	r5,4(r6)
   4d8d8:	18800015 	stw	r2,0(r3)
   4d8dc:	00000406 	br	4d8f0 <_free_r+0xd4>
   4d8e0:	10c00054 	ori	r3,r2,1
   4d8e4:	30c00115 	stw	r3,4(r6)
   4d8e8:	3087883a 	add	r3,r6,r2
   4d8ec:	18800015 	stw	r2,0(r3)
   4d8f0:	00c07fc4 	movi	r3,511
   4d8f4:	18801736 	bltu	r3,r2,4d954 <_free_r+0x138>
   4d8f8:	1004d0fa 	srli	r2,r2,3
   4d8fc:	01400044 	movi	r5,1
   4d900:	49000117 	ldw	r4,4(r9)
   4d904:	1087883a 	add	r3,r2,r2
   4d908:	18c7883a 	add	r3,r3,r3
   4d90c:	1005d0ba 	srai	r2,r2,2
   4d910:	18c7883a 	add	r3,r3,r3
   4d914:	1a47883a 	add	r3,r3,r9
   4d918:	19c00217 	ldw	r7,8(r3)
   4d91c:	2884983a 	sll	r2,r5,r2
   4d920:	30c00315 	stw	r3,12(r6)
   4d924:	31c00215 	stw	r7,8(r6)
   4d928:	1104b03a 	or	r2,r2,r4
   4d92c:	19800215 	stw	r6,8(r3)
   4d930:	48800115 	stw	r2,4(r9)
   4d934:	39800315 	stw	r6,12(r7)
   4d938:	8809883a 	mov	r4,r17
   4d93c:	dfc00217 	ldw	ra,8(sp)
   4d940:	dc400117 	ldw	r17,4(sp)
   4d944:	dc000017 	ldw	r16,0(sp)
   4d948:	dec00304 	addi	sp,sp,12
   4d94c:	00550f41 	jmpi	550f4 <__malloc_unlock>
   4d950:	f800283a 	ret
   4d954:	1006d27a 	srli	r3,r2,9
   4d958:	01000104 	movi	r4,4
   4d95c:	20c04036 	bltu	r4,r3,4da60 <_free_r+0x244>
   4d960:	1006d1ba 	srli	r3,r2,6
   4d964:	19400e04 	addi	r5,r3,56
   4d968:	2947883a 	add	r3,r5,r5
   4d96c:	18c7883a 	add	r3,r3,r3
   4d970:	18c7883a 	add	r3,r3,r3
   4d974:	1a49883a 	add	r4,r3,r9
   4d978:	20c00217 	ldw	r3,8(r4)
   4d97c:	01c001b4 	movhi	r7,6
   4d980:	39ed8b04 	addi	r7,r7,-18900
   4d984:	19003b26 	beq	r3,r4,4da74 <_free_r+0x258>
   4d988:	01ffff04 	movi	r7,-4
   4d98c:	19400117 	ldw	r5,4(r3)
   4d990:	29ca703a 	and	r5,r5,r7
   4d994:	1140022e 	bgeu	r2,r5,4d9a0 <_free_r+0x184>
   4d998:	18c00217 	ldw	r3,8(r3)
   4d99c:	20fffb1e 	bne	r4,r3,4d98c <__alt_data_end+0xfffe688c>
   4d9a0:	18800317 	ldw	r2,12(r3)
   4d9a4:	30800315 	stw	r2,12(r6)
   4d9a8:	30c00215 	stw	r3,8(r6)
   4d9ac:	11800215 	stw	r6,8(r2)
   4d9b0:	19800315 	stw	r6,12(r3)
   4d9b4:	003fe006 	br	4d938 <__alt_data_end+0xfffe6838>
   4d9b8:	2100004c 	andi	r4,r4,1
   4d9bc:	1885883a 	add	r2,r3,r2
   4d9c0:	2000071e 	bne	r4,zero,4d9e0 <_free_r+0x1c4>
   4d9c4:	817ffe17 	ldw	r5,-8(r16)
   4d9c8:	314dc83a 	sub	r6,r6,r5
   4d9cc:	30c00317 	ldw	r3,12(r6)
   4d9d0:	31000217 	ldw	r4,8(r6)
   4d9d4:	1145883a 	add	r2,r2,r5
   4d9d8:	20c00315 	stw	r3,12(r4)
   4d9dc:	19000215 	stw	r4,8(r3)
   4d9e0:	10c00054 	ori	r3,r2,1
   4d9e4:	30c00115 	stw	r3,4(r6)
   4d9e8:	00c001b4 	movhi	r3,6
   4d9ec:	18f33204 	addi	r3,r3,-13112
   4d9f0:	18c00017 	ldw	r3,0(r3)
   4d9f4:	49800215 	stw	r6,8(r9)
   4d9f8:	10ffcf36 	bltu	r2,r3,4d938 <__alt_data_end+0xfffe6838>
   4d9fc:	008001b4 	movhi	r2,6
   4da00:	10ba1d04 	addi	r2,r2,-6028
   4da04:	11400017 	ldw	r5,0(r2)
   4da08:	8809883a 	mov	r4,r17
   4da0c:	004d6f80 	call	4d6f8 <_malloc_trim_r>
   4da10:	003fc906 	br	4d938 <__alt_data_end+0xfffe6838>
   4da14:	28c9883a 	add	r4,r5,r3
   4da18:	21000117 	ldw	r4,4(r4)
   4da1c:	2100004c 	andi	r4,r4,1
   4da20:	20000a1e 	bne	r4,zero,4da4c <_free_r+0x230>
   4da24:	29000317 	ldw	r4,12(r5)
   4da28:	29400217 	ldw	r5,8(r5)
   4da2c:	10c5883a 	add	r2,r2,r3
   4da30:	10c00054 	ori	r3,r2,1
   4da34:	29000315 	stw	r4,12(r5)
   4da38:	21400215 	stw	r5,8(r4)
   4da3c:	30c00115 	stw	r3,4(r6)
   4da40:	308d883a 	add	r6,r6,r2
   4da44:	30800015 	stw	r2,0(r6)
   4da48:	003fbb06 	br	4d938 <__alt_data_end+0xfffe6838>
   4da4c:	10c00054 	ori	r3,r2,1
   4da50:	30c00115 	stw	r3,4(r6)
   4da54:	308d883a 	add	r6,r6,r2
   4da58:	30800015 	stw	r2,0(r6)
   4da5c:	003fb606 	br	4d938 <__alt_data_end+0xfffe6838>
   4da60:	01000504 	movi	r4,20
   4da64:	20c01436 	bltu	r4,r3,4dab8 <_free_r+0x29c>
   4da68:	194016c4 	addi	r5,r3,91
   4da6c:	2947883a 	add	r3,r5,r5
   4da70:	003fbe06 	br	4d96c <__alt_data_end+0xfffe686c>
   4da74:	280bd0ba 	srai	r5,r5,2
   4da78:	00800044 	movi	r2,1
   4da7c:	39000117 	ldw	r4,4(r7)
   4da80:	114a983a 	sll	r5,r2,r5
   4da84:	1805883a 	mov	r2,r3
   4da88:	2908b03a 	or	r4,r5,r4
   4da8c:	39000115 	stw	r4,4(r7)
   4da90:	003fc406 	br	4d9a4 <__alt_data_end+0xfffe68a4>
   4da94:	49800515 	stw	r6,20(r9)
   4da98:	49800415 	stw	r6,16(r9)
   4da9c:	10c00054 	ori	r3,r2,1
   4daa0:	31000315 	stw	r4,12(r6)
   4daa4:	31000215 	stw	r4,8(r6)
   4daa8:	30c00115 	stw	r3,4(r6)
   4daac:	308d883a 	add	r6,r6,r2
   4dab0:	30800015 	stw	r2,0(r6)
   4dab4:	003fa006 	br	4d938 <__alt_data_end+0xfffe6838>
   4dab8:	01001504 	movi	r4,84
   4dabc:	20c00436 	bltu	r4,r3,4dad0 <_free_r+0x2b4>
   4dac0:	1006d33a 	srli	r3,r2,12
   4dac4:	19401b84 	addi	r5,r3,110
   4dac8:	2947883a 	add	r3,r5,r5
   4dacc:	003fa706 	br	4d96c <__alt_data_end+0xfffe686c>
   4dad0:	01005504 	movi	r4,340
   4dad4:	20c00436 	bltu	r4,r3,4dae8 <_free_r+0x2cc>
   4dad8:	1006d3fa 	srli	r3,r2,15
   4dadc:	19401dc4 	addi	r5,r3,119
   4dae0:	2947883a 	add	r3,r5,r5
   4dae4:	003fa106 	br	4d96c <__alt_data_end+0xfffe686c>
   4dae8:	01015504 	movi	r4,1364
   4daec:	20c00436 	bltu	r4,r3,4db00 <_free_r+0x2e4>
   4daf0:	1006d4ba 	srli	r3,r2,18
   4daf4:	19401f04 	addi	r5,r3,124
   4daf8:	2947883a 	add	r3,r5,r5
   4dafc:	003f9b06 	br	4d96c <__alt_data_end+0xfffe686c>
   4db00:	00c03f04 	movi	r3,252
   4db04:	01401f84 	movi	r5,126
   4db08:	003f9806 	br	4d96c <__alt_data_end+0xfffe686c>

0004db0c <__sfvwrite_r>:
   4db0c:	30800217 	ldw	r2,8(r6)
   4db10:	10004526 	beq	r2,zero,4dc28 <__sfvwrite_r+0x11c>
   4db14:	28c0030b 	ldhu	r3,12(r5)
   4db18:	defff404 	addi	sp,sp,-48
   4db1c:	dd400715 	stw	r21,28(sp)
   4db20:	dcc00515 	stw	r19,20(sp)
   4db24:	dc000215 	stw	r16,8(sp)
   4db28:	dfc00b15 	stw	ra,44(sp)
   4db2c:	df000a15 	stw	fp,40(sp)
   4db30:	ddc00915 	stw	r23,36(sp)
   4db34:	dd800815 	stw	r22,32(sp)
   4db38:	dd000615 	stw	r20,24(sp)
   4db3c:	dc800415 	stw	r18,16(sp)
   4db40:	dc400315 	stw	r17,12(sp)
   4db44:	1880020c 	andi	r2,r3,8
   4db48:	2821883a 	mov	r16,r5
   4db4c:	202b883a 	mov	r21,r4
   4db50:	3027883a 	mov	r19,r6
   4db54:	10002526 	beq	r2,zero,4dbec <__sfvwrite_r+0xe0>
   4db58:	28800417 	ldw	r2,16(r5)
   4db5c:	10002326 	beq	r2,zero,4dbec <__sfvwrite_r+0xe0>
   4db60:	1880008c 	andi	r2,r3,2
   4db64:	9c400017 	ldw	r17,0(r19)
   4db68:	10003126 	beq	r2,zero,4dc30 <__sfvwrite_r+0x124>
   4db6c:	0029883a 	mov	r20,zero
   4db70:	0025883a 	mov	r18,zero
   4db74:	05810004 	movi	r22,1024
   4db78:	a00d883a 	mov	r6,r20
   4db7c:	a809883a 	mov	r4,r21
   4db80:	90002526 	beq	r18,zero,4dc18 <__sfvwrite_r+0x10c>
   4db84:	900f883a 	mov	r7,r18
   4db88:	81400717 	ldw	r5,28(r16)
   4db8c:	b480012e 	bgeu	r22,r18,4db94 <__sfvwrite_r+0x88>
   4db90:	01c10004 	movi	r7,1024
   4db94:	80800917 	ldw	r2,36(r16)
   4db98:	103ee83a 	callr	r2
   4db9c:	0080510e 	bge	zero,r2,4dce4 <__sfvwrite_r+0x1d8>
   4dba0:	98c00217 	ldw	r3,8(r19)
   4dba4:	a0a9883a 	add	r20,r20,r2
   4dba8:	90a5c83a 	sub	r18,r18,r2
   4dbac:	1885c83a 	sub	r2,r3,r2
   4dbb0:	98800215 	stw	r2,8(r19)
   4dbb4:	103ff01e 	bne	r2,zero,4db78 <__alt_data_end+0xfffe6a78>
   4dbb8:	0005883a 	mov	r2,zero
   4dbbc:	dfc00b17 	ldw	ra,44(sp)
   4dbc0:	df000a17 	ldw	fp,40(sp)
   4dbc4:	ddc00917 	ldw	r23,36(sp)
   4dbc8:	dd800817 	ldw	r22,32(sp)
   4dbcc:	dd400717 	ldw	r21,28(sp)
   4dbd0:	dd000617 	ldw	r20,24(sp)
   4dbd4:	dcc00517 	ldw	r19,20(sp)
   4dbd8:	dc800417 	ldw	r18,16(sp)
   4dbdc:	dc400317 	ldw	r17,12(sp)
   4dbe0:	dc000217 	ldw	r16,8(sp)
   4dbe4:	dec00c04 	addi	sp,sp,48
   4dbe8:	f800283a 	ret
   4dbec:	a809883a 	mov	r4,r21
   4dbf0:	800b883a 	mov	r5,r16
   4dbf4:	004b8e00 	call	4b8e0 <__swsetup_r>
   4dbf8:	80c0030b 	ldhu	r3,12(r16)
   4dbfc:	103fd826 	beq	r2,zero,4db60 <__alt_data_end+0xfffe6a60>
   4dc00:	18c01014 	ori	r3,r3,64
   4dc04:	80c0030d 	sth	r3,12(r16)
   4dc08:	00c00244 	movi	r3,9
   4dc0c:	00bfffc4 	movi	r2,-1
   4dc10:	a8c00015 	stw	r3,0(r21)
   4dc14:	003fe906 	br	4dbbc <__alt_data_end+0xfffe6abc>
   4dc18:	8d000017 	ldw	r20,0(r17)
   4dc1c:	8c800117 	ldw	r18,4(r17)
   4dc20:	8c400204 	addi	r17,r17,8
   4dc24:	003fd406 	br	4db78 <__alt_data_end+0xfffe6a78>
   4dc28:	0005883a 	mov	r2,zero
   4dc2c:	f800283a 	ret
   4dc30:	1880004c 	andi	r2,r3,1
   4dc34:	1000301e 	bne	r2,zero,4dcf8 <__sfvwrite_r+0x1ec>
   4dc38:	002f883a 	mov	r23,zero
   4dc3c:	0025883a 	mov	r18,zero
   4dc40:	90001c26 	beq	r18,zero,4dcb4 <__sfvwrite_r+0x1a8>
   4dc44:	1880800c 	andi	r2,r3,512
   4dc48:	85000217 	ldw	r20,8(r16)
   4dc4c:	10006c26 	beq	r2,zero,4de00 <__sfvwrite_r+0x2f4>
   4dc50:	a02d883a 	mov	r22,r20
   4dc54:	95008536 	bltu	r18,r20,4de6c <__sfvwrite_r+0x360>
   4dc58:	1881200c 	andi	r2,r3,1152
   4dc5c:	10009d1e 	bne	r2,zero,4ded4 <__sfvwrite_r+0x3c8>
   4dc60:	81000017 	ldw	r4,0(r16)
   4dc64:	a039883a 	mov	fp,r20
   4dc68:	9029883a 	mov	r20,r18
   4dc6c:	b80b883a 	mov	r5,r23
   4dc70:	b00d883a 	mov	r6,r22
   4dc74:	004e2a40 	call	4e2a4 <memmove>
   4dc78:	80c00217 	ldw	r3,8(r16)
   4dc7c:	81000017 	ldw	r4,0(r16)
   4dc80:	9005883a 	mov	r2,r18
   4dc84:	1f39c83a 	sub	fp,r3,fp
   4dc88:	258f883a 	add	r7,r4,r22
   4dc8c:	87000215 	stw	fp,8(r16)
   4dc90:	81c00015 	stw	r7,0(r16)
   4dc94:	98c00217 	ldw	r3,8(r19)
   4dc98:	b8af883a 	add	r23,r23,r2
   4dc9c:	90a5c83a 	sub	r18,r18,r2
   4dca0:	1d05c83a 	sub	r2,r3,r20
   4dca4:	98800215 	stw	r2,8(r19)
   4dca8:	103fc326 	beq	r2,zero,4dbb8 <__alt_data_end+0xfffe6ab8>
   4dcac:	80c0030b 	ldhu	r3,12(r16)
   4dcb0:	903fe41e 	bne	r18,zero,4dc44 <__alt_data_end+0xfffe6b44>
   4dcb4:	8dc00017 	ldw	r23,0(r17)
   4dcb8:	8c800117 	ldw	r18,4(r17)
   4dcbc:	8c400204 	addi	r17,r17,8
   4dcc0:	003fdf06 	br	4dc40 <__alt_data_end+0xfffe6b40>
   4dcc4:	004f5500 	call	4f550 <_realloc_r>
   4dcc8:	102d883a 	mov	r22,r2
   4dccc:	1000a01e 	bne	r2,zero,4df50 <__sfvwrite_r+0x444>
   4dcd0:	81400417 	ldw	r5,16(r16)
   4dcd4:	a809883a 	mov	r4,r21
   4dcd8:	004d81c0 	call	4d81c <_free_r>
   4dcdc:	00800304 	movi	r2,12
   4dce0:	a8800015 	stw	r2,0(r21)
   4dce4:	80c0030b 	ldhu	r3,12(r16)
   4dce8:	00bfffc4 	movi	r2,-1
   4dcec:	18c01014 	ori	r3,r3,64
   4dcf0:	80c0030d 	sth	r3,12(r16)
   4dcf4:	003fb106 	br	4dbbc <__alt_data_end+0xfffe6abc>
   4dcf8:	0029883a 	mov	r20,zero
   4dcfc:	0011883a 	mov	r8,zero
   4dd00:	0039883a 	mov	fp,zero
   4dd04:	0025883a 	mov	r18,zero
   4dd08:	90001f26 	beq	r18,zero,4dd88 <__sfvwrite_r+0x27c>
   4dd0c:	40006826 	beq	r8,zero,4deb0 <__sfvwrite_r+0x3a4>
   4dd10:	a02f883a 	mov	r23,r20
   4dd14:	9500012e 	bgeu	r18,r20,4dd1c <__sfvwrite_r+0x210>
   4dd18:	902f883a 	mov	r23,r18
   4dd1c:	81000017 	ldw	r4,0(r16)
   4dd20:	80800417 	ldw	r2,16(r16)
   4dd24:	b82d883a 	mov	r22,r23
   4dd28:	81800217 	ldw	r6,8(r16)
   4dd2c:	81c00517 	ldw	r7,20(r16)
   4dd30:	1100022e 	bgeu	r2,r4,4dd3c <__sfvwrite_r+0x230>
   4dd34:	31c7883a 	add	r3,r6,r7
   4dd38:	1dc01816 	blt	r3,r23,4dd9c <__sfvwrite_r+0x290>
   4dd3c:	b9c03f16 	blt	r23,r7,4de3c <__sfvwrite_r+0x330>
   4dd40:	80800917 	ldw	r2,36(r16)
   4dd44:	81400717 	ldw	r5,28(r16)
   4dd48:	a809883a 	mov	r4,r21
   4dd4c:	da000115 	stw	r8,4(sp)
   4dd50:	e00d883a 	mov	r6,fp
   4dd54:	103ee83a 	callr	r2
   4dd58:	102d883a 	mov	r22,r2
   4dd5c:	da000117 	ldw	r8,4(sp)
   4dd60:	00bfe00e 	bge	zero,r2,4dce4 <__alt_data_end+0xfffe6be4>
   4dd64:	a5a9c83a 	sub	r20,r20,r22
   4dd68:	a0001f26 	beq	r20,zero,4dde8 <__sfvwrite_r+0x2dc>
   4dd6c:	98800217 	ldw	r2,8(r19)
   4dd70:	e5b9883a 	add	fp,fp,r22
   4dd74:	95a5c83a 	sub	r18,r18,r22
   4dd78:	15adc83a 	sub	r22,r2,r22
   4dd7c:	9d800215 	stw	r22,8(r19)
   4dd80:	b03f8d26 	beq	r22,zero,4dbb8 <__alt_data_end+0xfffe6ab8>
   4dd84:	903fe11e 	bne	r18,zero,4dd0c <__alt_data_end+0xfffe6c0c>
   4dd88:	8f000017 	ldw	fp,0(r17)
   4dd8c:	8c800117 	ldw	r18,4(r17)
   4dd90:	0011883a 	mov	r8,zero
   4dd94:	8c400204 	addi	r17,r17,8
   4dd98:	003fdb06 	br	4dd08 <__alt_data_end+0xfffe6c08>
   4dd9c:	180d883a 	mov	r6,r3
   4dda0:	e00b883a 	mov	r5,fp
   4dda4:	da000115 	stw	r8,4(sp)
   4dda8:	d8c00015 	stw	r3,0(sp)
   4ddac:	004e2a40 	call	4e2a4 <memmove>
   4ddb0:	d8c00017 	ldw	r3,0(sp)
   4ddb4:	80800017 	ldw	r2,0(r16)
   4ddb8:	a809883a 	mov	r4,r21
   4ddbc:	800b883a 	mov	r5,r16
   4ddc0:	10c5883a 	add	r2,r2,r3
   4ddc4:	80800015 	stw	r2,0(r16)
   4ddc8:	d8c00015 	stw	r3,0(sp)
   4ddcc:	004d4a00 	call	4d4a0 <_fflush_r>
   4ddd0:	d8c00017 	ldw	r3,0(sp)
   4ddd4:	da000117 	ldw	r8,4(sp)
   4ddd8:	103fc21e 	bne	r2,zero,4dce4 <__alt_data_end+0xfffe6be4>
   4dddc:	182d883a 	mov	r22,r3
   4dde0:	a5a9c83a 	sub	r20,r20,r22
   4dde4:	a03fe11e 	bne	r20,zero,4dd6c <__alt_data_end+0xfffe6c6c>
   4dde8:	a809883a 	mov	r4,r21
   4ddec:	800b883a 	mov	r5,r16
   4ddf0:	004d4a00 	call	4d4a0 <_fflush_r>
   4ddf4:	103fbb1e 	bne	r2,zero,4dce4 <__alt_data_end+0xfffe6be4>
   4ddf8:	0011883a 	mov	r8,zero
   4ddfc:	003fdb06 	br	4dd6c <__alt_data_end+0xfffe6c6c>
   4de00:	81000017 	ldw	r4,0(r16)
   4de04:	80800417 	ldw	r2,16(r16)
   4de08:	1100012e 	bgeu	r2,r4,4de10 <__sfvwrite_r+0x304>
   4de0c:	a4805a36 	bltu	r20,r18,4df78 <__sfvwrite_r+0x46c>
   4de10:	81c00517 	ldw	r7,20(r16)
   4de14:	91c01a36 	bltu	r18,r7,4de80 <__sfvwrite_r+0x374>
   4de18:	80800917 	ldw	r2,36(r16)
   4de1c:	81400717 	ldw	r5,28(r16)
   4de20:	a809883a 	mov	r4,r21
   4de24:	b80d883a 	mov	r6,r23
   4de28:	103ee83a 	callr	r2
   4de2c:	1029883a 	mov	r20,r2
   4de30:	00bfac0e 	bge	zero,r2,4dce4 <__alt_data_end+0xfffe6be4>
   4de34:	a005883a 	mov	r2,r20
   4de38:	003f9606 	br	4dc94 <__alt_data_end+0xfffe6b94>
   4de3c:	b80d883a 	mov	r6,r23
   4de40:	e00b883a 	mov	r5,fp
   4de44:	da000115 	stw	r8,4(sp)
   4de48:	004e2a40 	call	4e2a4 <memmove>
   4de4c:	80800217 	ldw	r2,8(r16)
   4de50:	80c00017 	ldw	r3,0(r16)
   4de54:	da000117 	ldw	r8,4(sp)
   4de58:	15c5c83a 	sub	r2,r2,r23
   4de5c:	1def883a 	add	r23,r3,r23
   4de60:	80800215 	stw	r2,8(r16)
   4de64:	85c00015 	stw	r23,0(r16)
   4de68:	003fbe06 	br	4dd64 <__alt_data_end+0xfffe6c64>
   4de6c:	81000017 	ldw	r4,0(r16)
   4de70:	9039883a 	mov	fp,r18
   4de74:	9029883a 	mov	r20,r18
   4de78:	902d883a 	mov	r22,r18
   4de7c:	003f7b06 	br	4dc6c <__alt_data_end+0xfffe6b6c>
   4de80:	b80b883a 	mov	r5,r23
   4de84:	900d883a 	mov	r6,r18
   4de88:	004e2a40 	call	4e2a4 <memmove>
   4de8c:	80c00217 	ldw	r3,8(r16)
   4de90:	80800017 	ldw	r2,0(r16)
   4de94:	9029883a 	mov	r20,r18
   4de98:	1c87c83a 	sub	r3,r3,r18
   4de9c:	1485883a 	add	r2,r2,r18
   4dea0:	80800015 	stw	r2,0(r16)
   4dea4:	80c00215 	stw	r3,8(r16)
   4dea8:	9005883a 	mov	r2,r18
   4deac:	003f7906 	br	4dc94 <__alt_data_end+0xfffe6b94>
   4deb0:	e009883a 	mov	r4,fp
   4deb4:	01400284 	movi	r5,10
   4deb8:	900d883a 	mov	r6,r18
   4debc:	0048bcc0 	call	48bcc <memchr>
   4dec0:	10003826 	beq	r2,zero,4dfa4 <__sfvwrite_r+0x498>
   4dec4:	10800044 	addi	r2,r2,1
   4dec8:	1729c83a 	sub	r20,r2,fp
   4decc:	02000044 	movi	r8,1
   4ded0:	003f8f06 	br	4dd10 <__alt_data_end+0xfffe6c10>
   4ded4:	80800517 	ldw	r2,20(r16)
   4ded8:	81400417 	ldw	r5,16(r16)
   4dedc:	87000017 	ldw	fp,0(r16)
   4dee0:	10a9883a 	add	r20,r2,r2
   4dee4:	a085883a 	add	r2,r20,r2
   4dee8:	1028d7fa 	srli	r20,r2,31
   4deec:	e179c83a 	sub	fp,fp,r5
   4def0:	e1000044 	addi	r4,fp,1
   4def4:	a085883a 	add	r2,r20,r2
   4def8:	1029d07a 	srai	r20,r2,1
   4defc:	2485883a 	add	r2,r4,r18
   4df00:	a00d883a 	mov	r6,r20
   4df04:	a080022e 	bgeu	r20,r2,4df10 <__sfvwrite_r+0x404>
   4df08:	1029883a 	mov	r20,r2
   4df0c:	100d883a 	mov	r6,r2
   4df10:	18c1000c 	andi	r3,r3,1024
   4df14:	a809883a 	mov	r4,r21
   4df18:	183f6a26 	beq	r3,zero,4dcc4 <__alt_data_end+0xfffe6bc4>
   4df1c:	300b883a 	mov	r5,r6
   4df20:	00484240 	call	48424 <_malloc_r>
   4df24:	102d883a 	mov	r22,r2
   4df28:	103f6c26 	beq	r2,zero,4dcdc <__alt_data_end+0xfffe6bdc>
   4df2c:	81400417 	ldw	r5,16(r16)
   4df30:	1009883a 	mov	r4,r2
   4df34:	e00d883a 	mov	r6,fp
   4df38:	0048d300 	call	48d30 <memcpy>
   4df3c:	8080030b 	ldhu	r2,12(r16)
   4df40:	00fedfc4 	movi	r3,-1153
   4df44:	10c4703a 	and	r2,r2,r3
   4df48:	10802014 	ori	r2,r2,128
   4df4c:	8080030d 	sth	r2,12(r16)
   4df50:	b709883a 	add	r4,r22,fp
   4df54:	a707c83a 	sub	r3,r20,fp
   4df58:	85800415 	stw	r22,16(r16)
   4df5c:	85000515 	stw	r20,20(r16)
   4df60:	81000015 	stw	r4,0(r16)
   4df64:	9039883a 	mov	fp,r18
   4df68:	80c00215 	stw	r3,8(r16)
   4df6c:	9029883a 	mov	r20,r18
   4df70:	902d883a 	mov	r22,r18
   4df74:	003f3d06 	br	4dc6c <__alt_data_end+0xfffe6b6c>
   4df78:	b80b883a 	mov	r5,r23
   4df7c:	a00d883a 	mov	r6,r20
   4df80:	004e2a40 	call	4e2a4 <memmove>
   4df84:	80800017 	ldw	r2,0(r16)
   4df88:	a809883a 	mov	r4,r21
   4df8c:	800b883a 	mov	r5,r16
   4df90:	1505883a 	add	r2,r2,r20
   4df94:	80800015 	stw	r2,0(r16)
   4df98:	004d4a00 	call	4d4a0 <_fflush_r>
   4df9c:	103fa526 	beq	r2,zero,4de34 <__alt_data_end+0xfffe6d34>
   4dfa0:	003f5006 	br	4dce4 <__alt_data_end+0xfffe6be4>
   4dfa4:	95000044 	addi	r20,r18,1
   4dfa8:	02000044 	movi	r8,1
   4dfac:	003f5806 	br	4dd10 <__alt_data_end+0xfffe6c10>

0004dfb0 <_setlocale_r>:
   4dfb0:	30001b26 	beq	r6,zero,4e020 <_setlocale_r+0x70>
   4dfb4:	014001b4 	movhi	r5,6
   4dfb8:	defffe04 	addi	sp,sp,-8
   4dfbc:	296c0704 	addi	r5,r5,-20452
   4dfc0:	3009883a 	mov	r4,r6
   4dfc4:	dc000015 	stw	r16,0(sp)
   4dfc8:	dfc00115 	stw	ra,4(sp)
   4dfcc:	3021883a 	mov	r16,r6
   4dfd0:	004fb640 	call	4fb64 <strcmp>
   4dfd4:	1000061e 	bne	r2,zero,4dff0 <_setlocale_r+0x40>
   4dfd8:	008001b4 	movhi	r2,6
   4dfdc:	10a88c04 	addi	r2,r2,-24016
   4dfe0:	dfc00117 	ldw	ra,4(sp)
   4dfe4:	dc000017 	ldw	r16,0(sp)
   4dfe8:	dec00204 	addi	sp,sp,8
   4dfec:	f800283a 	ret
   4dff0:	014001b4 	movhi	r5,6
   4dff4:	29688c04 	addi	r5,r5,-24016
   4dff8:	8009883a 	mov	r4,r16
   4dffc:	004fb640 	call	4fb64 <strcmp>
   4e000:	103ff526 	beq	r2,zero,4dfd8 <__alt_data_end+0xfffe6ed8>
   4e004:	01400174 	movhi	r5,5
   4e008:	295e7804 	addi	r5,r5,31200
   4e00c:	8009883a 	mov	r4,r16
   4e010:	004fb640 	call	4fb64 <strcmp>
   4e014:	103ff026 	beq	r2,zero,4dfd8 <__alt_data_end+0xfffe6ed8>
   4e018:	0005883a 	mov	r2,zero
   4e01c:	003ff006 	br	4dfe0 <__alt_data_end+0xfffe6ee0>
   4e020:	008001b4 	movhi	r2,6
   4e024:	10a88c04 	addi	r2,r2,-24016
   4e028:	f800283a 	ret

0004e02c <__locale_charset>:
   4e02c:	008001b4 	movhi	r2,6
   4e030:	10ae9504 	addi	r2,r2,-17836
   4e034:	f800283a 	ret

0004e038 <__locale_mb_cur_max>:
   4e038:	008001b4 	movhi	r2,6
   4e03c:	10b33404 	addi	r2,r2,-13104
   4e040:	10800017 	ldw	r2,0(r2)
   4e044:	f800283a 	ret

0004e048 <__locale_msgcharset>:
   4e048:	008001b4 	movhi	r2,6
   4e04c:	10ae8d04 	addi	r2,r2,-17868
   4e050:	f800283a 	ret

0004e054 <__locale_cjk_lang>:
   4e054:	0005883a 	mov	r2,zero
   4e058:	f800283a 	ret

0004e05c <_localeconv_r>:
   4e05c:	008001b4 	movhi	r2,6
   4e060:	10ae9d04 	addi	r2,r2,-17804
   4e064:	f800283a 	ret

0004e068 <setlocale>:
   4e068:	00c001b4 	movhi	r3,6
   4e06c:	18f33004 	addi	r3,r3,-13120
   4e070:	2005883a 	mov	r2,r4
   4e074:	19000017 	ldw	r4,0(r3)
   4e078:	280d883a 	mov	r6,r5
   4e07c:	100b883a 	mov	r5,r2
   4e080:	004dfb01 	jmpi	4dfb0 <_setlocale_r>

0004e084 <localeconv>:
   4e084:	008001b4 	movhi	r2,6
   4e088:	10ae9d04 	addi	r2,r2,-17804
   4e08c:	f800283a 	ret

0004e090 <_lseek_r>:
   4e090:	defffd04 	addi	sp,sp,-12
   4e094:	dc000015 	stw	r16,0(sp)
   4e098:	040001b4 	movhi	r16,6
   4e09c:	dc400115 	stw	r17,4(sp)
   4e0a0:	843a1e04 	addi	r16,r16,-6024
   4e0a4:	2023883a 	mov	r17,r4
   4e0a8:	2809883a 	mov	r4,r5
   4e0ac:	300b883a 	mov	r5,r6
   4e0b0:	380d883a 	mov	r6,r7
   4e0b4:	dfc00215 	stw	ra,8(sp)
   4e0b8:	80000015 	stw	zero,0(r16)
   4e0bc:	0054f880 	call	54f88 <lseek>
   4e0c0:	00ffffc4 	movi	r3,-1
   4e0c4:	10c00526 	beq	r2,r3,4e0dc <_lseek_r+0x4c>
   4e0c8:	dfc00217 	ldw	ra,8(sp)
   4e0cc:	dc400117 	ldw	r17,4(sp)
   4e0d0:	dc000017 	ldw	r16,0(sp)
   4e0d4:	dec00304 	addi	sp,sp,12
   4e0d8:	f800283a 	ret
   4e0dc:	80c00017 	ldw	r3,0(r16)
   4e0e0:	183ff926 	beq	r3,zero,4e0c8 <__alt_data_end+0xfffe6fc8>
   4e0e4:	88c00015 	stw	r3,0(r17)
   4e0e8:	003ff706 	br	4e0c8 <__alt_data_end+0xfffe6fc8>

0004e0ec <__smakebuf_r>:
   4e0ec:	2880030b 	ldhu	r2,12(r5)
   4e0f0:	10c0008c 	andi	r3,r2,2
   4e0f4:	1800401e 	bne	r3,zero,4e1f8 <__smakebuf_r+0x10c>
   4e0f8:	deffec04 	addi	sp,sp,-80
   4e0fc:	dc000f15 	stw	r16,60(sp)
   4e100:	2821883a 	mov	r16,r5
   4e104:	2940038f 	ldh	r5,14(r5)
   4e108:	dc401015 	stw	r17,64(sp)
   4e10c:	dfc01315 	stw	ra,76(sp)
   4e110:	dcc01215 	stw	r19,72(sp)
   4e114:	dc801115 	stw	r18,68(sp)
   4e118:	2023883a 	mov	r17,r4
   4e11c:	28001b16 	blt	r5,zero,4e18c <__smakebuf_r+0xa0>
   4e120:	d80d883a 	mov	r6,sp
   4e124:	00514ac0 	call	514ac <_fstat_r>
   4e128:	10001716 	blt	r2,zero,4e188 <__smakebuf_r+0x9c>
   4e12c:	d8800117 	ldw	r2,4(sp)
   4e130:	00e00014 	movui	r3,32768
   4e134:	10bc000c 	andi	r2,r2,61440
   4e138:	10c03726 	beq	r2,r3,4e218 <__smakebuf_r+0x12c>
   4e13c:	80c0030b 	ldhu	r3,12(r16)
   4e140:	18c20014 	ori	r3,r3,2048
   4e144:	80c0030d 	sth	r3,12(r16)
   4e148:	00c80004 	movi	r3,8192
   4e14c:	10c03c1e 	bne	r2,r3,4e240 <__smakebuf_r+0x154>
   4e150:	8140038f 	ldh	r5,14(r16)
   4e154:	8809883a 	mov	r4,r17
   4e158:	00515040 	call	51504 <_isatty_r>
   4e15c:	10004e26 	beq	r2,zero,4e298 <__smakebuf_r+0x1ac>
   4e160:	8080030b 	ldhu	r2,12(r16)
   4e164:	04c00044 	movi	r19,1
   4e168:	80c010c4 	addi	r3,r16,67
   4e16c:	14c4b03a 	or	r2,r2,r19
   4e170:	8080030d 	sth	r2,12(r16)
   4e174:	80c00015 	stw	r3,0(r16)
   4e178:	80c00415 	stw	r3,16(r16)
   4e17c:	84c00515 	stw	r19,20(r16)
   4e180:	04810004 	movi	r18,1024
   4e184:	00000706 	br	4e1a4 <__smakebuf_r+0xb8>
   4e188:	8080030b 	ldhu	r2,12(r16)
   4e18c:	10c0200c 	andi	r3,r2,128
   4e190:	18001f1e 	bne	r3,zero,4e210 <__smakebuf_r+0x124>
   4e194:	04810004 	movi	r18,1024
   4e198:	10820014 	ori	r2,r2,2048
   4e19c:	8080030d 	sth	r2,12(r16)
   4e1a0:	0027883a 	mov	r19,zero
   4e1a4:	8809883a 	mov	r4,r17
   4e1a8:	900b883a 	mov	r5,r18
   4e1ac:	00484240 	call	48424 <_malloc_r>
   4e1b0:	10002e26 	beq	r2,zero,4e26c <__smakebuf_r+0x180>
   4e1b4:	80c0030b 	ldhu	r3,12(r16)
   4e1b8:	01000134 	movhi	r4,4
   4e1bc:	211fc904 	addi	r4,r4,32548
   4e1c0:	89000f15 	stw	r4,60(r17)
   4e1c4:	18c02014 	ori	r3,r3,128
   4e1c8:	80c0030d 	sth	r3,12(r16)
   4e1cc:	80800015 	stw	r2,0(r16)
   4e1d0:	80800415 	stw	r2,16(r16)
   4e1d4:	84800515 	stw	r18,20(r16)
   4e1d8:	98001c1e 	bne	r19,zero,4e24c <__smakebuf_r+0x160>
   4e1dc:	dfc01317 	ldw	ra,76(sp)
   4e1e0:	dcc01217 	ldw	r19,72(sp)
   4e1e4:	dc801117 	ldw	r18,68(sp)
   4e1e8:	dc401017 	ldw	r17,64(sp)
   4e1ec:	dc000f17 	ldw	r16,60(sp)
   4e1f0:	dec01404 	addi	sp,sp,80
   4e1f4:	f800283a 	ret
   4e1f8:	288010c4 	addi	r2,r5,67
   4e1fc:	28800015 	stw	r2,0(r5)
   4e200:	28800415 	stw	r2,16(r5)
   4e204:	00800044 	movi	r2,1
   4e208:	28800515 	stw	r2,20(r5)
   4e20c:	f800283a 	ret
   4e210:	04801004 	movi	r18,64
   4e214:	003fe006 	br	4e198 <__alt_data_end+0xfffe7098>
   4e218:	81000a17 	ldw	r4,40(r16)
   4e21c:	00c00174 	movhi	r3,5
   4e220:	18e4f404 	addi	r3,r3,-27696
   4e224:	20ffc51e 	bne	r4,r3,4e13c <__alt_data_end+0xfffe703c>
   4e228:	80c0030b 	ldhu	r3,12(r16)
   4e22c:	01010004 	movi	r4,1024
   4e230:	81001315 	stw	r4,76(r16)
   4e234:	1906b03a 	or	r3,r3,r4
   4e238:	80c0030d 	sth	r3,12(r16)
   4e23c:	003fc206 	br	4e148 <__alt_data_end+0xfffe7048>
   4e240:	0027883a 	mov	r19,zero
   4e244:	04810004 	movi	r18,1024
   4e248:	003fd606 	br	4e1a4 <__alt_data_end+0xfffe70a4>
   4e24c:	8140038f 	ldh	r5,14(r16)
   4e250:	8809883a 	mov	r4,r17
   4e254:	00515040 	call	51504 <_isatty_r>
   4e258:	103fe026 	beq	r2,zero,4e1dc <__alt_data_end+0xfffe70dc>
   4e25c:	8080030b 	ldhu	r2,12(r16)
   4e260:	10800054 	ori	r2,r2,1
   4e264:	8080030d 	sth	r2,12(r16)
   4e268:	003fdc06 	br	4e1dc <__alt_data_end+0xfffe70dc>
   4e26c:	8080030b 	ldhu	r2,12(r16)
   4e270:	10c0800c 	andi	r3,r2,512
   4e274:	183fd91e 	bne	r3,zero,4e1dc <__alt_data_end+0xfffe70dc>
   4e278:	10800094 	ori	r2,r2,2
   4e27c:	80c010c4 	addi	r3,r16,67
   4e280:	8080030d 	sth	r2,12(r16)
   4e284:	00800044 	movi	r2,1
   4e288:	80c00015 	stw	r3,0(r16)
   4e28c:	80c00415 	stw	r3,16(r16)
   4e290:	80800515 	stw	r2,20(r16)
   4e294:	003fd106 	br	4e1dc <__alt_data_end+0xfffe70dc>
   4e298:	04c00044 	movi	r19,1
   4e29c:	04810004 	movi	r18,1024
   4e2a0:	003fc006 	br	4e1a4 <__alt_data_end+0xfffe70a4>

0004e2a4 <memmove>:
   4e2a4:	2005883a 	mov	r2,r4
   4e2a8:	29000b2e 	bgeu	r5,r4,4e2d8 <memmove+0x34>
   4e2ac:	298f883a 	add	r7,r5,r6
   4e2b0:	21c0092e 	bgeu	r4,r7,4e2d8 <memmove+0x34>
   4e2b4:	2187883a 	add	r3,r4,r6
   4e2b8:	198bc83a 	sub	r5,r3,r6
   4e2bc:	30004b26 	beq	r6,zero,4e3ec <memmove+0x148>
   4e2c0:	39ffffc4 	addi	r7,r7,-1
   4e2c4:	39000003 	ldbu	r4,0(r7)
   4e2c8:	18ffffc4 	addi	r3,r3,-1
   4e2cc:	19000005 	stb	r4,0(r3)
   4e2d0:	197ffb1e 	bne	r3,r5,4e2c0 <__alt_data_end+0xfffe71c0>
   4e2d4:	f800283a 	ret
   4e2d8:	00c003c4 	movi	r3,15
   4e2dc:	1980412e 	bgeu	r3,r6,4e3e4 <memmove+0x140>
   4e2e0:	1146b03a 	or	r3,r2,r5
   4e2e4:	18c000cc 	andi	r3,r3,3
   4e2e8:	1800411e 	bne	r3,zero,4e3f0 <memmove+0x14c>
   4e2ec:	33fffc04 	addi	r15,r6,-16
   4e2f0:	781ed13a 	srli	r15,r15,4
   4e2f4:	28c00104 	addi	r3,r5,4
   4e2f8:	13400104 	addi	r13,r2,4
   4e2fc:	781c913a 	slli	r14,r15,4
   4e300:	2b000204 	addi	r12,r5,8
   4e304:	12c00204 	addi	r11,r2,8
   4e308:	73800504 	addi	r14,r14,20
   4e30c:	2a800304 	addi	r10,r5,12
   4e310:	12400304 	addi	r9,r2,12
   4e314:	2b9d883a 	add	r14,r5,r14
   4e318:	2811883a 	mov	r8,r5
   4e31c:	100f883a 	mov	r7,r2
   4e320:	41000017 	ldw	r4,0(r8)
   4e324:	39c00404 	addi	r7,r7,16
   4e328:	18c00404 	addi	r3,r3,16
   4e32c:	393ffc15 	stw	r4,-16(r7)
   4e330:	193ffc17 	ldw	r4,-16(r3)
   4e334:	6b400404 	addi	r13,r13,16
   4e338:	5ac00404 	addi	r11,r11,16
   4e33c:	693ffc15 	stw	r4,-16(r13)
   4e340:	61000017 	ldw	r4,0(r12)
   4e344:	4a400404 	addi	r9,r9,16
   4e348:	42000404 	addi	r8,r8,16
   4e34c:	593ffc15 	stw	r4,-16(r11)
   4e350:	51000017 	ldw	r4,0(r10)
   4e354:	63000404 	addi	r12,r12,16
   4e358:	52800404 	addi	r10,r10,16
   4e35c:	493ffc15 	stw	r4,-16(r9)
   4e360:	1bbfef1e 	bne	r3,r14,4e320 <__alt_data_end+0xfffe7220>
   4e364:	79000044 	addi	r4,r15,1
   4e368:	2008913a 	slli	r4,r4,4
   4e36c:	328003cc 	andi	r10,r6,15
   4e370:	02c000c4 	movi	r11,3
   4e374:	1107883a 	add	r3,r2,r4
   4e378:	290b883a 	add	r5,r5,r4
   4e37c:	5a801e2e 	bgeu	r11,r10,4e3f8 <memmove+0x154>
   4e380:	1813883a 	mov	r9,r3
   4e384:	2811883a 	mov	r8,r5
   4e388:	500f883a 	mov	r7,r10
   4e38c:	41000017 	ldw	r4,0(r8)
   4e390:	4a400104 	addi	r9,r9,4
   4e394:	39ffff04 	addi	r7,r7,-4
   4e398:	493fff15 	stw	r4,-4(r9)
   4e39c:	42000104 	addi	r8,r8,4
   4e3a0:	59fffa36 	bltu	r11,r7,4e38c <__alt_data_end+0xfffe728c>
   4e3a4:	513fff04 	addi	r4,r10,-4
   4e3a8:	2008d0ba 	srli	r4,r4,2
   4e3ac:	318000cc 	andi	r6,r6,3
   4e3b0:	21000044 	addi	r4,r4,1
   4e3b4:	2109883a 	add	r4,r4,r4
   4e3b8:	2109883a 	add	r4,r4,r4
   4e3bc:	1907883a 	add	r3,r3,r4
   4e3c0:	290b883a 	add	r5,r5,r4
   4e3c4:	30000926 	beq	r6,zero,4e3ec <memmove+0x148>
   4e3c8:	198d883a 	add	r6,r3,r6
   4e3cc:	29c00003 	ldbu	r7,0(r5)
   4e3d0:	18c00044 	addi	r3,r3,1
   4e3d4:	29400044 	addi	r5,r5,1
   4e3d8:	19ffffc5 	stb	r7,-1(r3)
   4e3dc:	19bffb1e 	bne	r3,r6,4e3cc <__alt_data_end+0xfffe72cc>
   4e3e0:	f800283a 	ret
   4e3e4:	1007883a 	mov	r3,r2
   4e3e8:	003ff606 	br	4e3c4 <__alt_data_end+0xfffe72c4>
   4e3ec:	f800283a 	ret
   4e3f0:	1007883a 	mov	r3,r2
   4e3f4:	003ff406 	br	4e3c8 <__alt_data_end+0xfffe72c8>
   4e3f8:	500d883a 	mov	r6,r10
   4e3fc:	003ff106 	br	4e3c4 <__alt_data_end+0xfffe72c4>

0004e400 <_Balloc>:
   4e400:	20801317 	ldw	r2,76(r4)
   4e404:	defffc04 	addi	sp,sp,-16
   4e408:	dc400115 	stw	r17,4(sp)
   4e40c:	dc000015 	stw	r16,0(sp)
   4e410:	dfc00315 	stw	ra,12(sp)
   4e414:	dc800215 	stw	r18,8(sp)
   4e418:	2023883a 	mov	r17,r4
   4e41c:	2821883a 	mov	r16,r5
   4e420:	10000f26 	beq	r2,zero,4e460 <_Balloc+0x60>
   4e424:	8407883a 	add	r3,r16,r16
   4e428:	18c7883a 	add	r3,r3,r3
   4e42c:	10c7883a 	add	r3,r2,r3
   4e430:	18800017 	ldw	r2,0(r3)
   4e434:	10001126 	beq	r2,zero,4e47c <_Balloc+0x7c>
   4e438:	11000017 	ldw	r4,0(r2)
   4e43c:	19000015 	stw	r4,0(r3)
   4e440:	10000415 	stw	zero,16(r2)
   4e444:	10000315 	stw	zero,12(r2)
   4e448:	dfc00317 	ldw	ra,12(sp)
   4e44c:	dc800217 	ldw	r18,8(sp)
   4e450:	dc400117 	ldw	r17,4(sp)
   4e454:	dc000017 	ldw	r16,0(sp)
   4e458:	dec00404 	addi	sp,sp,16
   4e45c:	f800283a 	ret
   4e460:	01400104 	movi	r5,4
   4e464:	01800844 	movi	r6,33
   4e468:	005120c0 	call	5120c <_calloc_r>
   4e46c:	88801315 	stw	r2,76(r17)
   4e470:	103fec1e 	bne	r2,zero,4e424 <__alt_data_end+0xfffe7324>
   4e474:	0005883a 	mov	r2,zero
   4e478:	003ff306 	br	4e448 <__alt_data_end+0xfffe7348>
   4e47c:	01400044 	movi	r5,1
   4e480:	2c24983a 	sll	r18,r5,r16
   4e484:	8809883a 	mov	r4,r17
   4e488:	91800144 	addi	r6,r18,5
   4e48c:	318d883a 	add	r6,r6,r6
   4e490:	318d883a 	add	r6,r6,r6
   4e494:	005120c0 	call	5120c <_calloc_r>
   4e498:	103ff626 	beq	r2,zero,4e474 <__alt_data_end+0xfffe7374>
   4e49c:	14000115 	stw	r16,4(r2)
   4e4a0:	14800215 	stw	r18,8(r2)
   4e4a4:	003fe606 	br	4e440 <__alt_data_end+0xfffe7340>

0004e4a8 <_Bfree>:
   4e4a8:	28000826 	beq	r5,zero,4e4cc <_Bfree+0x24>
   4e4ac:	28c00117 	ldw	r3,4(r5)
   4e4b0:	20801317 	ldw	r2,76(r4)
   4e4b4:	18c7883a 	add	r3,r3,r3
   4e4b8:	18c7883a 	add	r3,r3,r3
   4e4bc:	10c5883a 	add	r2,r2,r3
   4e4c0:	10c00017 	ldw	r3,0(r2)
   4e4c4:	28c00015 	stw	r3,0(r5)
   4e4c8:	11400015 	stw	r5,0(r2)
   4e4cc:	f800283a 	ret

0004e4d0 <__multadd>:
   4e4d0:	defffa04 	addi	sp,sp,-24
   4e4d4:	dc000115 	stw	r16,4(sp)
   4e4d8:	2c000417 	ldw	r16,16(r5)
   4e4dc:	dc800315 	stw	r18,12(sp)
   4e4e0:	dc400215 	stw	r17,8(sp)
   4e4e4:	dfc00515 	stw	ra,20(sp)
   4e4e8:	dcc00415 	stw	r19,16(sp)
   4e4ec:	2823883a 	mov	r17,r5
   4e4f0:	2025883a 	mov	r18,r4
   4e4f4:	2a400504 	addi	r9,r5,20
   4e4f8:	0015883a 	mov	r10,zero
   4e4fc:	4a000017 	ldw	r8,0(r9)
   4e500:	4a400104 	addi	r9,r9,4
   4e504:	52800044 	addi	r10,r10,1
   4e508:	40ffffcc 	andi	r3,r8,65535
   4e50c:	1987383a 	mul	r3,r3,r6
   4e510:	4010d43a 	srli	r8,r8,16
   4e514:	19cf883a 	add	r7,r3,r7
   4e518:	4191383a 	mul	r8,r8,r6
   4e51c:	3816d43a 	srli	r11,r7,16
   4e520:	38ffffcc 	andi	r3,r7,65535
   4e524:	5a0f883a 	add	r7,r11,r8
   4e528:	3810943a 	slli	r8,r7,16
   4e52c:	380ed43a 	srli	r7,r7,16
   4e530:	40c7883a 	add	r3,r8,r3
   4e534:	48ffff15 	stw	r3,-4(r9)
   4e538:	543ff016 	blt	r10,r16,4e4fc <__alt_data_end+0xfffe73fc>
   4e53c:	38000926 	beq	r7,zero,4e564 <__multadd+0x94>
   4e540:	88800217 	ldw	r2,8(r17)
   4e544:	80800f0e 	bge	r16,r2,4e584 <__multadd+0xb4>
   4e548:	80800144 	addi	r2,r16,5
   4e54c:	1085883a 	add	r2,r2,r2
   4e550:	1085883a 	add	r2,r2,r2
   4e554:	8885883a 	add	r2,r17,r2
   4e558:	11c00015 	stw	r7,0(r2)
   4e55c:	84000044 	addi	r16,r16,1
   4e560:	8c000415 	stw	r16,16(r17)
   4e564:	8805883a 	mov	r2,r17
   4e568:	dfc00517 	ldw	ra,20(sp)
   4e56c:	dcc00417 	ldw	r19,16(sp)
   4e570:	dc800317 	ldw	r18,12(sp)
   4e574:	dc400217 	ldw	r17,8(sp)
   4e578:	dc000117 	ldw	r16,4(sp)
   4e57c:	dec00604 	addi	sp,sp,24
   4e580:	f800283a 	ret
   4e584:	89400117 	ldw	r5,4(r17)
   4e588:	9009883a 	mov	r4,r18
   4e58c:	d9c00015 	stw	r7,0(sp)
   4e590:	29400044 	addi	r5,r5,1
   4e594:	004e4000 	call	4e400 <_Balloc>
   4e598:	89800417 	ldw	r6,16(r17)
   4e59c:	89400304 	addi	r5,r17,12
   4e5a0:	11000304 	addi	r4,r2,12
   4e5a4:	31800084 	addi	r6,r6,2
   4e5a8:	318d883a 	add	r6,r6,r6
   4e5ac:	318d883a 	add	r6,r6,r6
   4e5b0:	1027883a 	mov	r19,r2
   4e5b4:	0048d300 	call	48d30 <memcpy>
   4e5b8:	89000117 	ldw	r4,4(r17)
   4e5bc:	90c01317 	ldw	r3,76(r18)
   4e5c0:	d9c00017 	ldw	r7,0(sp)
   4e5c4:	2109883a 	add	r4,r4,r4
   4e5c8:	2109883a 	add	r4,r4,r4
   4e5cc:	1907883a 	add	r3,r3,r4
   4e5d0:	18800017 	ldw	r2,0(r3)
   4e5d4:	88800015 	stw	r2,0(r17)
   4e5d8:	1c400015 	stw	r17,0(r3)
   4e5dc:	9823883a 	mov	r17,r19
   4e5e0:	003fd906 	br	4e548 <__alt_data_end+0xfffe7448>

0004e5e4 <__s2b>:
   4e5e4:	defff904 	addi	sp,sp,-28
   4e5e8:	dc400115 	stw	r17,4(sp)
   4e5ec:	dc000015 	stw	r16,0(sp)
   4e5f0:	2023883a 	mov	r17,r4
   4e5f4:	2821883a 	mov	r16,r5
   4e5f8:	39000204 	addi	r4,r7,8
   4e5fc:	01400244 	movi	r5,9
   4e600:	dcc00315 	stw	r19,12(sp)
   4e604:	dc800215 	stw	r18,8(sp)
   4e608:	dfc00615 	stw	ra,24(sp)
   4e60c:	dd400515 	stw	r21,20(sp)
   4e610:	dd000415 	stw	r20,16(sp)
   4e614:	3825883a 	mov	r18,r7
   4e618:	3027883a 	mov	r19,r6
   4e61c:	0046d040 	call	46d04 <__divsi3>
   4e620:	00c00044 	movi	r3,1
   4e624:	000b883a 	mov	r5,zero
   4e628:	1880030e 	bge	r3,r2,4e638 <__s2b+0x54>
   4e62c:	18c7883a 	add	r3,r3,r3
   4e630:	29400044 	addi	r5,r5,1
   4e634:	18bffd16 	blt	r3,r2,4e62c <__alt_data_end+0xfffe752c>
   4e638:	8809883a 	mov	r4,r17
   4e63c:	004e4000 	call	4e400 <_Balloc>
   4e640:	d8c00717 	ldw	r3,28(sp)
   4e644:	10c00515 	stw	r3,20(r2)
   4e648:	00c00044 	movi	r3,1
   4e64c:	10c00415 	stw	r3,16(r2)
   4e650:	00c00244 	movi	r3,9
   4e654:	1cc0210e 	bge	r3,r19,4e6dc <__s2b+0xf8>
   4e658:	80eb883a 	add	r21,r16,r3
   4e65c:	a829883a 	mov	r20,r21
   4e660:	84e1883a 	add	r16,r16,r19
   4e664:	a1c00007 	ldb	r7,0(r20)
   4e668:	8809883a 	mov	r4,r17
   4e66c:	a5000044 	addi	r20,r20,1
   4e670:	100b883a 	mov	r5,r2
   4e674:	01800284 	movi	r6,10
   4e678:	39fff404 	addi	r7,r7,-48
   4e67c:	004e4d00 	call	4e4d0 <__multadd>
   4e680:	a43ff81e 	bne	r20,r16,4e664 <__alt_data_end+0xfffe7564>
   4e684:	ace1883a 	add	r16,r21,r19
   4e688:	843ffe04 	addi	r16,r16,-8
   4e68c:	9c800a0e 	bge	r19,r18,4e6b8 <__s2b+0xd4>
   4e690:	94e5c83a 	sub	r18,r18,r19
   4e694:	84a5883a 	add	r18,r16,r18
   4e698:	81c00007 	ldb	r7,0(r16)
   4e69c:	8809883a 	mov	r4,r17
   4e6a0:	84000044 	addi	r16,r16,1
   4e6a4:	100b883a 	mov	r5,r2
   4e6a8:	01800284 	movi	r6,10
   4e6ac:	39fff404 	addi	r7,r7,-48
   4e6b0:	004e4d00 	call	4e4d0 <__multadd>
   4e6b4:	84bff81e 	bne	r16,r18,4e698 <__alt_data_end+0xfffe7598>
   4e6b8:	dfc00617 	ldw	ra,24(sp)
   4e6bc:	dd400517 	ldw	r21,20(sp)
   4e6c0:	dd000417 	ldw	r20,16(sp)
   4e6c4:	dcc00317 	ldw	r19,12(sp)
   4e6c8:	dc800217 	ldw	r18,8(sp)
   4e6cc:	dc400117 	ldw	r17,4(sp)
   4e6d0:	dc000017 	ldw	r16,0(sp)
   4e6d4:	dec00704 	addi	sp,sp,28
   4e6d8:	f800283a 	ret
   4e6dc:	84000284 	addi	r16,r16,10
   4e6e0:	1827883a 	mov	r19,r3
   4e6e4:	003fe906 	br	4e68c <__alt_data_end+0xfffe758c>

0004e6e8 <__hi0bits>:
   4e6e8:	20bfffec 	andhi	r2,r4,65535
   4e6ec:	1000141e 	bne	r2,zero,4e740 <__hi0bits+0x58>
   4e6f0:	2008943a 	slli	r4,r4,16
   4e6f4:	00800404 	movi	r2,16
   4e6f8:	20ffc02c 	andhi	r3,r4,65280
   4e6fc:	1800021e 	bne	r3,zero,4e708 <__hi0bits+0x20>
   4e700:	2008923a 	slli	r4,r4,8
   4e704:	10800204 	addi	r2,r2,8
   4e708:	20fc002c 	andhi	r3,r4,61440
   4e70c:	1800021e 	bne	r3,zero,4e718 <__hi0bits+0x30>
   4e710:	2008913a 	slli	r4,r4,4
   4e714:	10800104 	addi	r2,r2,4
   4e718:	20f0002c 	andhi	r3,r4,49152
   4e71c:	1800031e 	bne	r3,zero,4e72c <__hi0bits+0x44>
   4e720:	2109883a 	add	r4,r4,r4
   4e724:	10800084 	addi	r2,r2,2
   4e728:	2109883a 	add	r4,r4,r4
   4e72c:	20000316 	blt	r4,zero,4e73c <__hi0bits+0x54>
   4e730:	2110002c 	andhi	r4,r4,16384
   4e734:	2000041e 	bne	r4,zero,4e748 <__hi0bits+0x60>
   4e738:	00800804 	movi	r2,32
   4e73c:	f800283a 	ret
   4e740:	0005883a 	mov	r2,zero
   4e744:	003fec06 	br	4e6f8 <__alt_data_end+0xfffe75f8>
   4e748:	10800044 	addi	r2,r2,1
   4e74c:	f800283a 	ret

0004e750 <__lo0bits>:
   4e750:	20c00017 	ldw	r3,0(r4)
   4e754:	188001cc 	andi	r2,r3,7
   4e758:	10000826 	beq	r2,zero,4e77c <__lo0bits+0x2c>
   4e75c:	1880004c 	andi	r2,r3,1
   4e760:	1000211e 	bne	r2,zero,4e7e8 <__lo0bits+0x98>
   4e764:	1880008c 	andi	r2,r3,2
   4e768:	1000211e 	bne	r2,zero,4e7f0 <__lo0bits+0xa0>
   4e76c:	1806d0ba 	srli	r3,r3,2
   4e770:	00800084 	movi	r2,2
   4e774:	20c00015 	stw	r3,0(r4)
   4e778:	f800283a 	ret
   4e77c:	18bfffcc 	andi	r2,r3,65535
   4e780:	10001326 	beq	r2,zero,4e7d0 <__lo0bits+0x80>
   4e784:	0005883a 	mov	r2,zero
   4e788:	19403fcc 	andi	r5,r3,255
   4e78c:	2800021e 	bne	r5,zero,4e798 <__lo0bits+0x48>
   4e790:	1806d23a 	srli	r3,r3,8
   4e794:	10800204 	addi	r2,r2,8
   4e798:	194003cc 	andi	r5,r3,15
   4e79c:	2800021e 	bne	r5,zero,4e7a8 <__lo0bits+0x58>
   4e7a0:	1806d13a 	srli	r3,r3,4
   4e7a4:	10800104 	addi	r2,r2,4
   4e7a8:	194000cc 	andi	r5,r3,3
   4e7ac:	2800021e 	bne	r5,zero,4e7b8 <__lo0bits+0x68>
   4e7b0:	1806d0ba 	srli	r3,r3,2
   4e7b4:	10800084 	addi	r2,r2,2
   4e7b8:	1940004c 	andi	r5,r3,1
   4e7bc:	2800081e 	bne	r5,zero,4e7e0 <__lo0bits+0x90>
   4e7c0:	1806d07a 	srli	r3,r3,1
   4e7c4:	1800051e 	bne	r3,zero,4e7dc <__lo0bits+0x8c>
   4e7c8:	00800804 	movi	r2,32
   4e7cc:	f800283a 	ret
   4e7d0:	1806d43a 	srli	r3,r3,16
   4e7d4:	00800404 	movi	r2,16
   4e7d8:	003feb06 	br	4e788 <__alt_data_end+0xfffe7688>
   4e7dc:	10800044 	addi	r2,r2,1
   4e7e0:	20c00015 	stw	r3,0(r4)
   4e7e4:	f800283a 	ret
   4e7e8:	0005883a 	mov	r2,zero
   4e7ec:	f800283a 	ret
   4e7f0:	1806d07a 	srli	r3,r3,1
   4e7f4:	00800044 	movi	r2,1
   4e7f8:	20c00015 	stw	r3,0(r4)
   4e7fc:	f800283a 	ret

0004e800 <__i2b>:
   4e800:	defffd04 	addi	sp,sp,-12
   4e804:	dc000015 	stw	r16,0(sp)
   4e808:	04000044 	movi	r16,1
   4e80c:	dc400115 	stw	r17,4(sp)
   4e810:	2823883a 	mov	r17,r5
   4e814:	800b883a 	mov	r5,r16
   4e818:	dfc00215 	stw	ra,8(sp)
   4e81c:	004e4000 	call	4e400 <_Balloc>
   4e820:	14400515 	stw	r17,20(r2)
   4e824:	14000415 	stw	r16,16(r2)
   4e828:	dfc00217 	ldw	ra,8(sp)
   4e82c:	dc400117 	ldw	r17,4(sp)
   4e830:	dc000017 	ldw	r16,0(sp)
   4e834:	dec00304 	addi	sp,sp,12
   4e838:	f800283a 	ret

0004e83c <__multiply>:
   4e83c:	defffa04 	addi	sp,sp,-24
   4e840:	dcc00315 	stw	r19,12(sp)
   4e844:	dc800215 	stw	r18,8(sp)
   4e848:	2cc00417 	ldw	r19,16(r5)
   4e84c:	34800417 	ldw	r18,16(r6)
   4e850:	dd000415 	stw	r20,16(sp)
   4e854:	dc400115 	stw	r17,4(sp)
   4e858:	dfc00515 	stw	ra,20(sp)
   4e85c:	dc000015 	stw	r16,0(sp)
   4e860:	2829883a 	mov	r20,r5
   4e864:	3023883a 	mov	r17,r6
   4e868:	9c807016 	blt	r19,r18,4ea2c <__multiply+0x1f0>
   4e86c:	9005883a 	mov	r2,r18
   4e870:	9825883a 	mov	r18,r19
   4e874:	1027883a 	mov	r19,r2
   4e878:	a0800217 	ldw	r2,8(r20)
   4e87c:	94e1883a 	add	r16,r18,r19
   4e880:	a1400117 	ldw	r5,4(r20)
   4e884:	1400010e 	bge	r2,r16,4e88c <__multiply+0x50>
   4e888:	29400044 	addi	r5,r5,1
   4e88c:	004e4000 	call	4e400 <_Balloc>
   4e890:	8417883a 	add	r11,r16,r16
   4e894:	13000504 	addi	r12,r2,20
   4e898:	5ad7883a 	add	r11,r11,r11
   4e89c:	62d7883a 	add	r11,r12,r11
   4e8a0:	6007883a 	mov	r3,r12
   4e8a4:	62c0032e 	bgeu	r12,r11,4e8b4 <__multiply+0x78>
   4e8a8:	18000015 	stw	zero,0(r3)
   4e8ac:	18c00104 	addi	r3,r3,4
   4e8b0:	1afffd36 	bltu	r3,r11,4e8a8 <__alt_data_end+0xfffe77a8>
   4e8b4:	9ce7883a 	add	r19,r19,r19
   4e8b8:	94a5883a 	add	r18,r18,r18
   4e8bc:	89800504 	addi	r6,r17,20
   4e8c0:	9ce7883a 	add	r19,r19,r19
   4e8c4:	a3800504 	addi	r14,r20,20
   4e8c8:	94a5883a 	add	r18,r18,r18
   4e8cc:	34db883a 	add	r13,r6,r19
   4e8d0:	7495883a 	add	r10,r14,r18
   4e8d4:	3340422e 	bgeu	r6,r13,4e9e0 <__multiply+0x1a4>
   4e8d8:	34400017 	ldw	r17,0(r6)
   4e8dc:	8cbfffcc 	andi	r18,r17,65535
   4e8e0:	90001b26 	beq	r18,zero,4e950 <__multiply+0x114>
   4e8e4:	6013883a 	mov	r9,r12
   4e8e8:	7023883a 	mov	r17,r14
   4e8ec:	0011883a 	mov	r8,zero
   4e8f0:	88c00017 	ldw	r3,0(r17)
   4e8f4:	4bc00017 	ldw	r15,0(r9)
   4e8f8:	8c400104 	addi	r17,r17,4
   4e8fc:	19ffffcc 	andi	r7,r3,65535
   4e900:	3c8f383a 	mul	r7,r7,r18
   4e904:	1808d43a 	srli	r4,r3,16
   4e908:	797fffcc 	andi	r5,r15,65535
   4e90c:	29cb883a 	add	r5,r5,r7
   4e910:	2a0b883a 	add	r5,r5,r8
   4e914:	2489383a 	mul	r4,r4,r18
   4e918:	7806d43a 	srli	r3,r15,16
   4e91c:	2810d43a 	srli	r8,r5,16
   4e920:	297fffcc 	andi	r5,r5,65535
   4e924:	1907883a 	add	r3,r3,r4
   4e928:	1a07883a 	add	r3,r3,r8
   4e92c:	1808943a 	slli	r4,r3,16
   4e930:	480f883a 	mov	r7,r9
   4e934:	1810d43a 	srli	r8,r3,16
   4e938:	214ab03a 	or	r5,r4,r5
   4e93c:	49400015 	stw	r5,0(r9)
   4e940:	4a400104 	addi	r9,r9,4
   4e944:	8abfea36 	bltu	r17,r10,4e8f0 <__alt_data_end+0xfffe77f0>
   4e948:	3a000115 	stw	r8,4(r7)
   4e94c:	34400017 	ldw	r17,0(r6)
   4e950:	8822d43a 	srli	r17,r17,16
   4e954:	88001f26 	beq	r17,zero,4e9d4 <__multiply+0x198>
   4e958:	60c00017 	ldw	r3,0(r12)
   4e95c:	7013883a 	mov	r9,r14
   4e960:	601f883a 	mov	r15,r12
   4e964:	1811883a 	mov	r8,r3
   4e968:	6027883a 	mov	r19,r12
   4e96c:	000f883a 	mov	r7,zero
   4e970:	00000106 	br	4e978 <__multiply+0x13c>
   4e974:	9027883a 	mov	r19,r18
   4e978:	4940000b 	ldhu	r5,0(r9)
   4e97c:	4010d43a 	srli	r8,r8,16
   4e980:	193fffcc 	andi	r4,r3,65535
   4e984:	2c4b383a 	mul	r5,r5,r17
   4e988:	7bc00104 	addi	r15,r15,4
   4e98c:	4a400104 	addi	r9,r9,4
   4e990:	2a0b883a 	add	r5,r5,r8
   4e994:	29cb883a 	add	r5,r5,r7
   4e998:	2806943a 	slli	r3,r5,16
   4e99c:	9c800104 	addi	r18,r19,4
   4e9a0:	280ad43a 	srli	r5,r5,16
   4e9a4:	1908b03a 	or	r4,r3,r4
   4e9a8:	793fff15 	stw	r4,-4(r15)
   4e9ac:	48ffff17 	ldw	r3,-4(r9)
   4e9b0:	92000017 	ldw	r8,0(r18)
   4e9b4:	1806d43a 	srli	r3,r3,16
   4e9b8:	413fffcc 	andi	r4,r8,65535
   4e9bc:	1c47383a 	mul	r3,r3,r17
   4e9c0:	1907883a 	add	r3,r3,r4
   4e9c4:	1947883a 	add	r3,r3,r5
   4e9c8:	180ed43a 	srli	r7,r3,16
   4e9cc:	4abfe936 	bltu	r9,r10,4e974 <__alt_data_end+0xfffe7874>
   4e9d0:	98c00115 	stw	r3,4(r19)
   4e9d4:	31800104 	addi	r6,r6,4
   4e9d8:	63000104 	addi	r12,r12,4
   4e9dc:	337fbe36 	bltu	r6,r13,4e8d8 <__alt_data_end+0xfffe77d8>
   4e9e0:	0400090e 	bge	zero,r16,4ea08 <__multiply+0x1cc>
   4e9e4:	58ffff17 	ldw	r3,-4(r11)
   4e9e8:	5affff04 	addi	r11,r11,-4
   4e9ec:	18000326 	beq	r3,zero,4e9fc <__multiply+0x1c0>
   4e9f0:	00000506 	br	4ea08 <__multiply+0x1cc>
   4e9f4:	58c00017 	ldw	r3,0(r11)
   4e9f8:	1800031e 	bne	r3,zero,4ea08 <__multiply+0x1cc>
   4e9fc:	843fffc4 	addi	r16,r16,-1
   4ea00:	5affff04 	addi	r11,r11,-4
   4ea04:	803ffb1e 	bne	r16,zero,4e9f4 <__alt_data_end+0xfffe78f4>
   4ea08:	14000415 	stw	r16,16(r2)
   4ea0c:	dfc00517 	ldw	ra,20(sp)
   4ea10:	dd000417 	ldw	r20,16(sp)
   4ea14:	dcc00317 	ldw	r19,12(sp)
   4ea18:	dc800217 	ldw	r18,8(sp)
   4ea1c:	dc400117 	ldw	r17,4(sp)
   4ea20:	dc000017 	ldw	r16,0(sp)
   4ea24:	dec00604 	addi	sp,sp,24
   4ea28:	f800283a 	ret
   4ea2c:	3029883a 	mov	r20,r6
   4ea30:	2823883a 	mov	r17,r5
   4ea34:	003f9006 	br	4e878 <__alt_data_end+0xfffe7778>

0004ea38 <__pow5mult>:
   4ea38:	defffa04 	addi	sp,sp,-24
   4ea3c:	dcc00315 	stw	r19,12(sp)
   4ea40:	dc800215 	stw	r18,8(sp)
   4ea44:	dc000015 	stw	r16,0(sp)
   4ea48:	dfc00515 	stw	ra,20(sp)
   4ea4c:	dd000415 	stw	r20,16(sp)
   4ea50:	dc400115 	stw	r17,4(sp)
   4ea54:	308000cc 	andi	r2,r6,3
   4ea58:	3021883a 	mov	r16,r6
   4ea5c:	2027883a 	mov	r19,r4
   4ea60:	2825883a 	mov	r18,r5
   4ea64:	10002e1e 	bne	r2,zero,4eb20 <__pow5mult+0xe8>
   4ea68:	8021d0ba 	srai	r16,r16,2
   4ea6c:	80001a26 	beq	r16,zero,4ead8 <__pow5mult+0xa0>
   4ea70:	9c401217 	ldw	r17,72(r19)
   4ea74:	8800061e 	bne	r17,zero,4ea90 <__pow5mult+0x58>
   4ea78:	00003406 	br	4eb4c <__pow5mult+0x114>
   4ea7c:	8021d07a 	srai	r16,r16,1
   4ea80:	80001526 	beq	r16,zero,4ead8 <__pow5mult+0xa0>
   4ea84:	88800017 	ldw	r2,0(r17)
   4ea88:	10001c26 	beq	r2,zero,4eafc <__pow5mult+0xc4>
   4ea8c:	1023883a 	mov	r17,r2
   4ea90:	80c0004c 	andi	r3,r16,1
   4ea94:	183ff926 	beq	r3,zero,4ea7c <__alt_data_end+0xfffe797c>
   4ea98:	900b883a 	mov	r5,r18
   4ea9c:	880d883a 	mov	r6,r17
   4eaa0:	9809883a 	mov	r4,r19
   4eaa4:	004e83c0 	call	4e83c <__multiply>
   4eaa8:	90001b26 	beq	r18,zero,4eb18 <__pow5mult+0xe0>
   4eaac:	91c00117 	ldw	r7,4(r18)
   4eab0:	98c01317 	ldw	r3,76(r19)
   4eab4:	8021d07a 	srai	r16,r16,1
   4eab8:	39cf883a 	add	r7,r7,r7
   4eabc:	39cf883a 	add	r7,r7,r7
   4eac0:	19c7883a 	add	r3,r3,r7
   4eac4:	19000017 	ldw	r4,0(r3)
   4eac8:	91000015 	stw	r4,0(r18)
   4eacc:	1c800015 	stw	r18,0(r3)
   4ead0:	1025883a 	mov	r18,r2
   4ead4:	803feb1e 	bne	r16,zero,4ea84 <__alt_data_end+0xfffe7984>
   4ead8:	9005883a 	mov	r2,r18
   4eadc:	dfc00517 	ldw	ra,20(sp)
   4eae0:	dd000417 	ldw	r20,16(sp)
   4eae4:	dcc00317 	ldw	r19,12(sp)
   4eae8:	dc800217 	ldw	r18,8(sp)
   4eaec:	dc400117 	ldw	r17,4(sp)
   4eaf0:	dc000017 	ldw	r16,0(sp)
   4eaf4:	dec00604 	addi	sp,sp,24
   4eaf8:	f800283a 	ret
   4eafc:	9809883a 	mov	r4,r19
   4eb00:	880b883a 	mov	r5,r17
   4eb04:	880d883a 	mov	r6,r17
   4eb08:	004e83c0 	call	4e83c <__multiply>
   4eb0c:	88800015 	stw	r2,0(r17)
   4eb10:	10000015 	stw	zero,0(r2)
   4eb14:	003fdd06 	br	4ea8c <__alt_data_end+0xfffe798c>
   4eb18:	1025883a 	mov	r18,r2
   4eb1c:	003fd706 	br	4ea7c <__alt_data_end+0xfffe797c>
   4eb20:	10bfffc4 	addi	r2,r2,-1
   4eb24:	1085883a 	add	r2,r2,r2
   4eb28:	00c001b4 	movhi	r3,6
   4eb2c:	18ec0904 	addi	r3,r3,-20444
   4eb30:	1085883a 	add	r2,r2,r2
   4eb34:	1885883a 	add	r2,r3,r2
   4eb38:	11800017 	ldw	r6,0(r2)
   4eb3c:	000f883a 	mov	r7,zero
   4eb40:	004e4d00 	call	4e4d0 <__multadd>
   4eb44:	1025883a 	mov	r18,r2
   4eb48:	003fc706 	br	4ea68 <__alt_data_end+0xfffe7968>
   4eb4c:	05000044 	movi	r20,1
   4eb50:	9809883a 	mov	r4,r19
   4eb54:	a00b883a 	mov	r5,r20
   4eb58:	004e4000 	call	4e400 <_Balloc>
   4eb5c:	1023883a 	mov	r17,r2
   4eb60:	00809c44 	movi	r2,625
   4eb64:	88800515 	stw	r2,20(r17)
   4eb68:	8d000415 	stw	r20,16(r17)
   4eb6c:	9c401215 	stw	r17,72(r19)
   4eb70:	88000015 	stw	zero,0(r17)
   4eb74:	003fc606 	br	4ea90 <__alt_data_end+0xfffe7990>

0004eb78 <__lshift>:
   4eb78:	defff904 	addi	sp,sp,-28
   4eb7c:	dd000415 	stw	r20,16(sp)
   4eb80:	dcc00315 	stw	r19,12(sp)
   4eb84:	3029d17a 	srai	r20,r6,5
   4eb88:	2cc00417 	ldw	r19,16(r5)
   4eb8c:	28800217 	ldw	r2,8(r5)
   4eb90:	dd400515 	stw	r21,20(sp)
   4eb94:	a4e7883a 	add	r19,r20,r19
   4eb98:	dc800215 	stw	r18,8(sp)
   4eb9c:	dc400115 	stw	r17,4(sp)
   4eba0:	dc000015 	stw	r16,0(sp)
   4eba4:	dfc00615 	stw	ra,24(sp)
   4eba8:	9c000044 	addi	r16,r19,1
   4ebac:	2823883a 	mov	r17,r5
   4ebb0:	302b883a 	mov	r21,r6
   4ebb4:	2025883a 	mov	r18,r4
   4ebb8:	29400117 	ldw	r5,4(r5)
   4ebbc:	1400030e 	bge	r2,r16,4ebcc <__lshift+0x54>
   4ebc0:	1085883a 	add	r2,r2,r2
   4ebc4:	29400044 	addi	r5,r5,1
   4ebc8:	143ffd16 	blt	r2,r16,4ebc0 <__alt_data_end+0xfffe7ac0>
   4ebcc:	9009883a 	mov	r4,r18
   4ebd0:	004e4000 	call	4e400 <_Balloc>
   4ebd4:	11c00504 	addi	r7,r2,20
   4ebd8:	0500090e 	bge	zero,r20,4ec00 <__lshift+0x88>
   4ebdc:	3811883a 	mov	r8,r7
   4ebe0:	0007883a 	mov	r3,zero
   4ebe4:	40000015 	stw	zero,0(r8)
   4ebe8:	18c00044 	addi	r3,r3,1
   4ebec:	42000104 	addi	r8,r8,4
   4ebf0:	1d3ffc1e 	bne	r3,r20,4ebe4 <__alt_data_end+0xfffe7ae4>
   4ebf4:	18c7883a 	add	r3,r3,r3
   4ebf8:	18c7883a 	add	r3,r3,r3
   4ebfc:	38cf883a 	add	r7,r7,r3
   4ec00:	89000417 	ldw	r4,16(r17)
   4ec04:	88c00504 	addi	r3,r17,20
   4ec08:	a98007cc 	andi	r6,r21,31
   4ec0c:	2109883a 	add	r4,r4,r4
   4ec10:	2109883a 	add	r4,r4,r4
   4ec14:	1909883a 	add	r4,r3,r4
   4ec18:	30002326 	beq	r6,zero,4eca8 <__lshift+0x130>
   4ec1c:	01400804 	movi	r5,32
   4ec20:	298bc83a 	sub	r5,r5,r6
   4ec24:	0013883a 	mov	r9,zero
   4ec28:	1a000017 	ldw	r8,0(r3)
   4ec2c:	3815883a 	mov	r10,r7
   4ec30:	39c00104 	addi	r7,r7,4
   4ec34:	4190983a 	sll	r8,r8,r6
   4ec38:	18c00104 	addi	r3,r3,4
   4ec3c:	4a10b03a 	or	r8,r9,r8
   4ec40:	3a3fff15 	stw	r8,-4(r7)
   4ec44:	1a3fff17 	ldw	r8,-4(r3)
   4ec48:	4152d83a 	srl	r9,r8,r5
   4ec4c:	193ff636 	bltu	r3,r4,4ec28 <__alt_data_end+0xfffe7b28>
   4ec50:	52400115 	stw	r9,4(r10)
   4ec54:	48000126 	beq	r9,zero,4ec5c <__lshift+0xe4>
   4ec58:	9c000084 	addi	r16,r19,2
   4ec5c:	89000117 	ldw	r4,4(r17)
   4ec60:	90c01317 	ldw	r3,76(r18)
   4ec64:	843fffc4 	addi	r16,r16,-1
   4ec68:	2109883a 	add	r4,r4,r4
   4ec6c:	2109883a 	add	r4,r4,r4
   4ec70:	1907883a 	add	r3,r3,r4
   4ec74:	19000017 	ldw	r4,0(r3)
   4ec78:	14000415 	stw	r16,16(r2)
   4ec7c:	89000015 	stw	r4,0(r17)
   4ec80:	1c400015 	stw	r17,0(r3)
   4ec84:	dfc00617 	ldw	ra,24(sp)
   4ec88:	dd400517 	ldw	r21,20(sp)
   4ec8c:	dd000417 	ldw	r20,16(sp)
   4ec90:	dcc00317 	ldw	r19,12(sp)
   4ec94:	dc800217 	ldw	r18,8(sp)
   4ec98:	dc400117 	ldw	r17,4(sp)
   4ec9c:	dc000017 	ldw	r16,0(sp)
   4eca0:	dec00704 	addi	sp,sp,28
   4eca4:	f800283a 	ret
   4eca8:	19400017 	ldw	r5,0(r3)
   4ecac:	39c00104 	addi	r7,r7,4
   4ecb0:	18c00104 	addi	r3,r3,4
   4ecb4:	397fff15 	stw	r5,-4(r7)
   4ecb8:	193ffb36 	bltu	r3,r4,4eca8 <__alt_data_end+0xfffe7ba8>
   4ecbc:	003fe706 	br	4ec5c <__alt_data_end+0xfffe7b5c>

0004ecc0 <__mcmp>:
   4ecc0:	20800417 	ldw	r2,16(r4)
   4ecc4:	28c00417 	ldw	r3,16(r5)
   4ecc8:	10c5c83a 	sub	r2,r2,r3
   4eccc:	1000111e 	bne	r2,zero,4ed14 <__mcmp+0x54>
   4ecd0:	18c7883a 	add	r3,r3,r3
   4ecd4:	18c7883a 	add	r3,r3,r3
   4ecd8:	21000504 	addi	r4,r4,20
   4ecdc:	29400504 	addi	r5,r5,20
   4ece0:	20c5883a 	add	r2,r4,r3
   4ece4:	28cb883a 	add	r5,r5,r3
   4ece8:	00000106 	br	4ecf0 <__mcmp+0x30>
   4ecec:	20800a2e 	bgeu	r4,r2,4ed18 <__mcmp+0x58>
   4ecf0:	10bfff04 	addi	r2,r2,-4
   4ecf4:	297fff04 	addi	r5,r5,-4
   4ecf8:	11800017 	ldw	r6,0(r2)
   4ecfc:	28c00017 	ldw	r3,0(r5)
   4ed00:	30fffa26 	beq	r6,r3,4ecec <__alt_data_end+0xfffe7bec>
   4ed04:	30c00236 	bltu	r6,r3,4ed10 <__mcmp+0x50>
   4ed08:	00800044 	movi	r2,1
   4ed0c:	f800283a 	ret
   4ed10:	00bfffc4 	movi	r2,-1
   4ed14:	f800283a 	ret
   4ed18:	0005883a 	mov	r2,zero
   4ed1c:	f800283a 	ret

0004ed20 <__mdiff>:
   4ed20:	defffb04 	addi	sp,sp,-20
   4ed24:	dc000015 	stw	r16,0(sp)
   4ed28:	2821883a 	mov	r16,r5
   4ed2c:	dcc00315 	stw	r19,12(sp)
   4ed30:	300b883a 	mov	r5,r6
   4ed34:	2027883a 	mov	r19,r4
   4ed38:	8009883a 	mov	r4,r16
   4ed3c:	dc800215 	stw	r18,8(sp)
   4ed40:	dfc00415 	stw	ra,16(sp)
   4ed44:	dc400115 	stw	r17,4(sp)
   4ed48:	3025883a 	mov	r18,r6
   4ed4c:	004ecc00 	call	4ecc0 <__mcmp>
   4ed50:	10005226 	beq	r2,zero,4ee9c <__mdiff+0x17c>
   4ed54:	10004c16 	blt	r2,zero,4ee88 <__mdiff+0x168>
   4ed58:	0023883a 	mov	r17,zero
   4ed5c:	81400117 	ldw	r5,4(r16)
   4ed60:	9809883a 	mov	r4,r19
   4ed64:	004e4000 	call	4e400 <_Balloc>
   4ed68:	83400417 	ldw	r13,16(r16)
   4ed6c:	93800417 	ldw	r14,16(r18)
   4ed70:	81000504 	addi	r4,r16,20
   4ed74:	6b59883a 	add	r12,r13,r13
   4ed78:	739d883a 	add	r14,r14,r14
   4ed7c:	6319883a 	add	r12,r12,r12
   4ed80:	91800504 	addi	r6,r18,20
   4ed84:	739d883a 	add	r14,r14,r14
   4ed88:	14400315 	stw	r17,12(r2)
   4ed8c:	2319883a 	add	r12,r4,r12
   4ed90:	339d883a 	add	r14,r6,r14
   4ed94:	12400504 	addi	r9,r2,20
   4ed98:	0007883a 	mov	r3,zero
   4ed9c:	22000017 	ldw	r8,0(r4)
   4eda0:	32800017 	ldw	r10,0(r6)
   4eda4:	4ac00104 	addi	r11,r9,4
   4eda8:	41ffffcc 	andi	r7,r8,65535
   4edac:	38c7883a 	add	r3,r7,r3
   4edb0:	51ffffcc 	andi	r7,r10,65535
   4edb4:	19cfc83a 	sub	r7,r3,r7
   4edb8:	4010d43a 	srli	r8,r8,16
   4edbc:	5014d43a 	srli	r10,r10,16
   4edc0:	3807d43a 	srai	r3,r7,16
   4edc4:	39ffffcc 	andi	r7,r7,65535
   4edc8:	4291c83a 	sub	r8,r8,r10
   4edcc:	40c7883a 	add	r3,r8,r3
   4edd0:	1810943a 	slli	r8,r3,16
   4edd4:	31800104 	addi	r6,r6,4
   4edd8:	21000104 	addi	r4,r4,4
   4eddc:	41ceb03a 	or	r7,r8,r7
   4ede0:	49c00015 	stw	r7,0(r9)
   4ede4:	1807d43a 	srai	r3,r3,16
   4ede8:	580b883a 	mov	r5,r11
   4edec:	5813883a 	mov	r9,r11
   4edf0:	33bfea36 	bltu	r6,r14,4ed9c <__alt_data_end+0xfffe7c9c>
   4edf4:	2011883a 	mov	r8,r4
   4edf8:	2300152e 	bgeu	r4,r12,4ee50 <__mdiff+0x130>
   4edfc:	21400017 	ldw	r5,0(r4)
   4ee00:	4a400104 	addi	r9,r9,4
   4ee04:	21000104 	addi	r4,r4,4
   4ee08:	29ffffcc 	andi	r7,r5,65535
   4ee0c:	38c7883a 	add	r3,r7,r3
   4ee10:	280ad43a 	srli	r5,r5,16
   4ee14:	180dd43a 	srai	r6,r3,16
   4ee18:	19ffffcc 	andi	r7,r3,65535
   4ee1c:	3147883a 	add	r3,r6,r5
   4ee20:	180a943a 	slli	r5,r3,16
   4ee24:	1807d43a 	srai	r3,r3,16
   4ee28:	29ceb03a 	or	r7,r5,r7
   4ee2c:	49ffff15 	stw	r7,-4(r9)
   4ee30:	233ff236 	bltu	r4,r12,4edfc <__alt_data_end+0xfffe7cfc>
   4ee34:	0206303a 	nor	r3,zero,r8
   4ee38:	1b07883a 	add	r3,r3,r12
   4ee3c:	1806d0ba 	srli	r3,r3,2
   4ee40:	18c00044 	addi	r3,r3,1
   4ee44:	18c7883a 	add	r3,r3,r3
   4ee48:	18c7883a 	add	r3,r3,r3
   4ee4c:	58cb883a 	add	r5,r11,r3
   4ee50:	28ffff04 	addi	r3,r5,-4
   4ee54:	3800041e 	bne	r7,zero,4ee68 <__mdiff+0x148>
   4ee58:	18ffff04 	addi	r3,r3,-4
   4ee5c:	19000017 	ldw	r4,0(r3)
   4ee60:	6b7fffc4 	addi	r13,r13,-1
   4ee64:	203ffc26 	beq	r4,zero,4ee58 <__alt_data_end+0xfffe7d58>
   4ee68:	13400415 	stw	r13,16(r2)
   4ee6c:	dfc00417 	ldw	ra,16(sp)
   4ee70:	dcc00317 	ldw	r19,12(sp)
   4ee74:	dc800217 	ldw	r18,8(sp)
   4ee78:	dc400117 	ldw	r17,4(sp)
   4ee7c:	dc000017 	ldw	r16,0(sp)
   4ee80:	dec00504 	addi	sp,sp,20
   4ee84:	f800283a 	ret
   4ee88:	8005883a 	mov	r2,r16
   4ee8c:	04400044 	movi	r17,1
   4ee90:	9021883a 	mov	r16,r18
   4ee94:	1025883a 	mov	r18,r2
   4ee98:	003fb006 	br	4ed5c <__alt_data_end+0xfffe7c5c>
   4ee9c:	9809883a 	mov	r4,r19
   4eea0:	000b883a 	mov	r5,zero
   4eea4:	004e4000 	call	4e400 <_Balloc>
   4eea8:	00c00044 	movi	r3,1
   4eeac:	10c00415 	stw	r3,16(r2)
   4eeb0:	10000515 	stw	zero,20(r2)
   4eeb4:	003fed06 	br	4ee6c <__alt_data_end+0xfffe7d6c>

0004eeb8 <__ulp>:
   4eeb8:	295ffc2c 	andhi	r5,r5,32752
   4eebc:	00bf3034 	movhi	r2,64704
   4eec0:	2887883a 	add	r3,r5,r2
   4eec4:	00c0020e 	bge	zero,r3,4eed0 <__ulp+0x18>
   4eec8:	0005883a 	mov	r2,zero
   4eecc:	f800283a 	ret
   4eed0:	00c7c83a 	sub	r3,zero,r3
   4eed4:	180bd53a 	srai	r5,r3,20
   4eed8:	008004c4 	movi	r2,19
   4eedc:	11400a0e 	bge	r2,r5,4ef08 <__ulp+0x50>
   4eee0:	00800c84 	movi	r2,50
   4eee4:	0007883a 	mov	r3,zero
   4eee8:	11400516 	blt	r2,r5,4ef00 <__ulp+0x48>
   4eeec:	00800cc4 	movi	r2,51
   4eef0:	114bc83a 	sub	r5,r2,r5
   4eef4:	00800044 	movi	r2,1
   4eef8:	1144983a 	sll	r2,r2,r5
   4eefc:	f800283a 	ret
   4ef00:	00800044 	movi	r2,1
   4ef04:	f800283a 	ret
   4ef08:	00800234 	movhi	r2,8
   4ef0c:	1147d83a 	sra	r3,r2,r5
   4ef10:	0005883a 	mov	r2,zero
   4ef14:	f800283a 	ret

0004ef18 <__b2d>:
   4ef18:	defffa04 	addi	sp,sp,-24
   4ef1c:	dc000015 	stw	r16,0(sp)
   4ef20:	24000417 	ldw	r16,16(r4)
   4ef24:	dc400115 	stw	r17,4(sp)
   4ef28:	24400504 	addi	r17,r4,20
   4ef2c:	8421883a 	add	r16,r16,r16
   4ef30:	8421883a 	add	r16,r16,r16
   4ef34:	8c21883a 	add	r16,r17,r16
   4ef38:	dc800215 	stw	r18,8(sp)
   4ef3c:	84bfff17 	ldw	r18,-4(r16)
   4ef40:	dd000415 	stw	r20,16(sp)
   4ef44:	dcc00315 	stw	r19,12(sp)
   4ef48:	9009883a 	mov	r4,r18
   4ef4c:	2829883a 	mov	r20,r5
   4ef50:	dfc00515 	stw	ra,20(sp)
   4ef54:	004e6e80 	call	4e6e8 <__hi0bits>
   4ef58:	00c00804 	movi	r3,32
   4ef5c:	1887c83a 	sub	r3,r3,r2
   4ef60:	a0c00015 	stw	r3,0(r20)
   4ef64:	00c00284 	movi	r3,10
   4ef68:	84ffff04 	addi	r19,r16,-4
   4ef6c:	18801216 	blt	r3,r2,4efb8 <__b2d+0xa0>
   4ef70:	014002c4 	movi	r5,11
   4ef74:	2889c83a 	sub	r4,r5,r2
   4ef78:	9106d83a 	srl	r3,r18,r4
   4ef7c:	18cffc34 	orhi	r3,r3,16368
   4ef80:	8cc0282e 	bgeu	r17,r19,4f024 <__b2d+0x10c>
   4ef84:	817ffe17 	ldw	r5,-8(r16)
   4ef88:	290ad83a 	srl	r5,r5,r4
   4ef8c:	10800544 	addi	r2,r2,21
   4ef90:	9084983a 	sll	r2,r18,r2
   4ef94:	2884b03a 	or	r2,r5,r2
   4ef98:	dfc00517 	ldw	ra,20(sp)
   4ef9c:	dd000417 	ldw	r20,16(sp)
   4efa0:	dcc00317 	ldw	r19,12(sp)
   4efa4:	dc800217 	ldw	r18,8(sp)
   4efa8:	dc400117 	ldw	r17,4(sp)
   4efac:	dc000017 	ldw	r16,0(sp)
   4efb0:	dec00604 	addi	sp,sp,24
   4efb4:	f800283a 	ret
   4efb8:	113ffd44 	addi	r4,r2,-11
   4efbc:	8cc00f2e 	bgeu	r17,r19,4effc <__b2d+0xe4>
   4efc0:	81bffe04 	addi	r6,r16,-8
   4efc4:	817ffe17 	ldw	r5,-8(r16)
   4efc8:	20001326 	beq	r4,zero,4f018 <__b2d+0x100>
   4efcc:	00c00ac4 	movi	r3,43
   4efd0:	1885c83a 	sub	r2,r3,r2
   4efd4:	2886d83a 	srl	r3,r5,r2
   4efd8:	9124983a 	sll	r18,r18,r4
   4efdc:	90e4b03a 	or	r18,r18,r3
   4efe0:	90cffc34 	orhi	r3,r18,16368
   4efe4:	8980112e 	bgeu	r17,r6,4f02c <__b2d+0x114>
   4efe8:	81bffd17 	ldw	r6,-12(r16)
   4efec:	308cd83a 	srl	r6,r6,r2
   4eff0:	2904983a 	sll	r2,r5,r4
   4eff4:	1184b03a 	or	r2,r2,r6
   4eff8:	003fe706 	br	4ef98 <__alt_data_end+0xfffe7e98>
   4effc:	20000526 	beq	r4,zero,4f014 <__b2d+0xfc>
   4f000:	9124983a 	sll	r18,r18,r4
   4f004:	000d883a 	mov	r6,zero
   4f008:	000b883a 	mov	r5,zero
   4f00c:	90cffc34 	orhi	r3,r18,16368
   4f010:	003ff706 	br	4eff0 <__alt_data_end+0xfffe7ef0>
   4f014:	000b883a 	mov	r5,zero
   4f018:	90cffc34 	orhi	r3,r18,16368
   4f01c:	2805883a 	mov	r2,r5
   4f020:	003fdd06 	br	4ef98 <__alt_data_end+0xfffe7e98>
   4f024:	000b883a 	mov	r5,zero
   4f028:	003fd806 	br	4ef8c <__alt_data_end+0xfffe7e8c>
   4f02c:	000d883a 	mov	r6,zero
   4f030:	003fef06 	br	4eff0 <__alt_data_end+0xfffe7ef0>

0004f034 <__d2b>:
   4f034:	defff704 	addi	sp,sp,-36
   4f038:	dc000215 	stw	r16,8(sp)
   4f03c:	3021883a 	mov	r16,r6
   4f040:	dc400315 	stw	r17,12(sp)
   4f044:	8022907a 	slli	r17,r16,1
   4f048:	dd400715 	stw	r21,28(sp)
   4f04c:	282b883a 	mov	r21,r5
   4f050:	01400044 	movi	r5,1
   4f054:	dd000615 	stw	r20,24(sp)
   4f058:	dcc00515 	stw	r19,20(sp)
   4f05c:	dc800415 	stw	r18,16(sp)
   4f060:	dfc00815 	stw	ra,32(sp)
   4f064:	3829883a 	mov	r20,r7
   4f068:	dc800917 	ldw	r18,36(sp)
   4f06c:	8822d57a 	srli	r17,r17,21
   4f070:	004e4000 	call	4e400 <_Balloc>
   4f074:	1027883a 	mov	r19,r2
   4f078:	00800434 	movhi	r2,16
   4f07c:	10bfffc4 	addi	r2,r2,-1
   4f080:	808c703a 	and	r6,r16,r2
   4f084:	88000126 	beq	r17,zero,4f08c <__d2b+0x58>
   4f088:	31800434 	orhi	r6,r6,16
   4f08c:	d9800015 	stw	r6,0(sp)
   4f090:	a8001f26 	beq	r21,zero,4f110 <__d2b+0xdc>
   4f094:	d9000104 	addi	r4,sp,4
   4f098:	dd400115 	stw	r21,4(sp)
   4f09c:	004e7500 	call	4e750 <__lo0bits>
   4f0a0:	d8c00017 	ldw	r3,0(sp)
   4f0a4:	1000291e 	bne	r2,zero,4f14c <__d2b+0x118>
   4f0a8:	d9000117 	ldw	r4,4(sp)
   4f0ac:	99000515 	stw	r4,20(r19)
   4f0b0:	1820c03a 	cmpne	r16,r3,zero
   4f0b4:	84000044 	addi	r16,r16,1
   4f0b8:	98c00615 	stw	r3,24(r19)
   4f0bc:	9c000415 	stw	r16,16(r19)
   4f0c0:	88001b1e 	bne	r17,zero,4f130 <__d2b+0xfc>
   4f0c4:	800690ba 	slli	r3,r16,2
   4f0c8:	10bef384 	addi	r2,r2,-1074
   4f0cc:	a0800015 	stw	r2,0(r20)
   4f0d0:	98c5883a 	add	r2,r19,r3
   4f0d4:	11000417 	ldw	r4,16(r2)
   4f0d8:	8020917a 	slli	r16,r16,5
   4f0dc:	004e6e80 	call	4e6e8 <__hi0bits>
   4f0e0:	8085c83a 	sub	r2,r16,r2
   4f0e4:	90800015 	stw	r2,0(r18)
   4f0e8:	9805883a 	mov	r2,r19
   4f0ec:	dfc00817 	ldw	ra,32(sp)
   4f0f0:	dd400717 	ldw	r21,28(sp)
   4f0f4:	dd000617 	ldw	r20,24(sp)
   4f0f8:	dcc00517 	ldw	r19,20(sp)
   4f0fc:	dc800417 	ldw	r18,16(sp)
   4f100:	dc400317 	ldw	r17,12(sp)
   4f104:	dc000217 	ldw	r16,8(sp)
   4f108:	dec00904 	addi	sp,sp,36
   4f10c:	f800283a 	ret
   4f110:	d809883a 	mov	r4,sp
   4f114:	004e7500 	call	4e750 <__lo0bits>
   4f118:	d8c00017 	ldw	r3,0(sp)
   4f11c:	04000044 	movi	r16,1
   4f120:	9c000415 	stw	r16,16(r19)
   4f124:	98c00515 	stw	r3,20(r19)
   4f128:	10800804 	addi	r2,r2,32
   4f12c:	883fe526 	beq	r17,zero,4f0c4 <__alt_data_end+0xfffe7fc4>
   4f130:	8c7ef344 	addi	r17,r17,-1075
   4f134:	88a3883a 	add	r17,r17,r2
   4f138:	00c00d44 	movi	r3,53
   4f13c:	a4400015 	stw	r17,0(r20)
   4f140:	1885c83a 	sub	r2,r3,r2
   4f144:	90800015 	stw	r2,0(r18)
   4f148:	003fe706 	br	4f0e8 <__alt_data_end+0xfffe7fe8>
   4f14c:	01000804 	movi	r4,32
   4f150:	2089c83a 	sub	r4,r4,r2
   4f154:	1908983a 	sll	r4,r3,r4
   4f158:	d9400117 	ldw	r5,4(sp)
   4f15c:	1886d83a 	srl	r3,r3,r2
   4f160:	2148b03a 	or	r4,r4,r5
   4f164:	99000515 	stw	r4,20(r19)
   4f168:	d8c00015 	stw	r3,0(sp)
   4f16c:	003fd006 	br	4f0b0 <__alt_data_end+0xfffe7fb0>

0004f170 <__ratio>:
   4f170:	defff904 	addi	sp,sp,-28
   4f174:	dc400315 	stw	r17,12(sp)
   4f178:	2823883a 	mov	r17,r5
   4f17c:	d9400104 	addi	r5,sp,4
   4f180:	dfc00615 	stw	ra,24(sp)
   4f184:	dcc00515 	stw	r19,20(sp)
   4f188:	dc800415 	stw	r18,16(sp)
   4f18c:	2027883a 	mov	r19,r4
   4f190:	dc000215 	stw	r16,8(sp)
   4f194:	004ef180 	call	4ef18 <__b2d>
   4f198:	8809883a 	mov	r4,r17
   4f19c:	d80b883a 	mov	r5,sp
   4f1a0:	1025883a 	mov	r18,r2
   4f1a4:	1821883a 	mov	r16,r3
   4f1a8:	004ef180 	call	4ef18 <__b2d>
   4f1ac:	8a400417 	ldw	r9,16(r17)
   4f1b0:	9a000417 	ldw	r8,16(r19)
   4f1b4:	100d883a 	mov	r6,r2
   4f1b8:	d8800017 	ldw	r2,0(sp)
   4f1bc:	4251c83a 	sub	r8,r8,r9
   4f1c0:	4012917a 	slli	r9,r8,5
   4f1c4:	da000117 	ldw	r8,4(sp)
   4f1c8:	4091c83a 	sub	r8,r8,r2
   4f1cc:	4251883a 	add	r8,r8,r9
   4f1d0:	02000d0e 	bge	zero,r8,4f208 <__ratio+0x98>
   4f1d4:	4010953a 	slli	r8,r8,20
   4f1d8:	4421883a 	add	r16,r8,r16
   4f1dc:	9009883a 	mov	r4,r18
   4f1e0:	800b883a 	mov	r5,r16
   4f1e4:	180f883a 	mov	r7,r3
   4f1e8:	0052b440 	call	52b44 <__divdf3>
   4f1ec:	dfc00617 	ldw	ra,24(sp)
   4f1f0:	dcc00517 	ldw	r19,20(sp)
   4f1f4:	dc800417 	ldw	r18,16(sp)
   4f1f8:	dc400317 	ldw	r17,12(sp)
   4f1fc:	dc000217 	ldw	r16,8(sp)
   4f200:	dec00704 	addi	sp,sp,28
   4f204:	f800283a 	ret
   4f208:	4010953a 	slli	r8,r8,20
   4f20c:	1a07c83a 	sub	r3,r3,r8
   4f210:	003ff206 	br	4f1dc <__alt_data_end+0xfffe80dc>

0004f214 <_mprec_log10>:
   4f214:	defffe04 	addi	sp,sp,-8
   4f218:	dc000015 	stw	r16,0(sp)
   4f21c:	dfc00115 	stw	ra,4(sp)
   4f220:	008005c4 	movi	r2,23
   4f224:	2021883a 	mov	r16,r4
   4f228:	11000d0e 	bge	r2,r4,4f260 <_mprec_log10+0x4c>
   4f22c:	0005883a 	mov	r2,zero
   4f230:	00cffc34 	movhi	r3,16368
   4f234:	843fffc4 	addi	r16,r16,-1
   4f238:	1009883a 	mov	r4,r2
   4f23c:	180b883a 	mov	r5,r3
   4f240:	000d883a 	mov	r6,zero
   4f244:	01d00934 	movhi	r7,16420
   4f248:	00536540 	call	53654 <__muldf3>
   4f24c:	803ff91e 	bne	r16,zero,4f234 <__alt_data_end+0xfffe8134>
   4f250:	dfc00117 	ldw	ra,4(sp)
   4f254:	dc000017 	ldw	r16,0(sp)
   4f258:	dec00204 	addi	sp,sp,8
   4f25c:	f800283a 	ret
   4f260:	202090fa 	slli	r16,r4,3
   4f264:	008001b4 	movhi	r2,6
   4f268:	10ac2004 	addi	r2,r2,-20352
   4f26c:	1421883a 	add	r16,r2,r16
   4f270:	80800017 	ldw	r2,0(r16)
   4f274:	80c00117 	ldw	r3,4(r16)
   4f278:	dfc00117 	ldw	ra,4(sp)
   4f27c:	dc000017 	ldw	r16,0(sp)
   4f280:	dec00204 	addi	sp,sp,8
   4f284:	f800283a 	ret

0004f288 <__copybits>:
   4f288:	297fffc4 	addi	r5,r5,-1
   4f28c:	280fd17a 	srai	r7,r5,5
   4f290:	30c00417 	ldw	r3,16(r6)
   4f294:	30800504 	addi	r2,r6,20
   4f298:	39c00044 	addi	r7,r7,1
   4f29c:	18c7883a 	add	r3,r3,r3
   4f2a0:	39cf883a 	add	r7,r7,r7
   4f2a4:	18c7883a 	add	r3,r3,r3
   4f2a8:	39cf883a 	add	r7,r7,r7
   4f2ac:	10c7883a 	add	r3,r2,r3
   4f2b0:	21cf883a 	add	r7,r4,r7
   4f2b4:	10c00d2e 	bgeu	r2,r3,4f2ec <__copybits+0x64>
   4f2b8:	200b883a 	mov	r5,r4
   4f2bc:	12000017 	ldw	r8,0(r2)
   4f2c0:	29400104 	addi	r5,r5,4
   4f2c4:	10800104 	addi	r2,r2,4
   4f2c8:	2a3fff15 	stw	r8,-4(r5)
   4f2cc:	10fffb36 	bltu	r2,r3,4f2bc <__alt_data_end+0xfffe81bc>
   4f2d0:	1985c83a 	sub	r2,r3,r6
   4f2d4:	10bffac4 	addi	r2,r2,-21
   4f2d8:	1004d0ba 	srli	r2,r2,2
   4f2dc:	10800044 	addi	r2,r2,1
   4f2e0:	1085883a 	add	r2,r2,r2
   4f2e4:	1085883a 	add	r2,r2,r2
   4f2e8:	2089883a 	add	r4,r4,r2
   4f2ec:	21c0032e 	bgeu	r4,r7,4f2fc <__copybits+0x74>
   4f2f0:	20000015 	stw	zero,0(r4)
   4f2f4:	21000104 	addi	r4,r4,4
   4f2f8:	21fffd36 	bltu	r4,r7,4f2f0 <__alt_data_end+0xfffe81f0>
   4f2fc:	f800283a 	ret

0004f300 <__any_on>:
   4f300:	20c00417 	ldw	r3,16(r4)
   4f304:	2805d17a 	srai	r2,r5,5
   4f308:	21000504 	addi	r4,r4,20
   4f30c:	18800d0e 	bge	r3,r2,4f344 <__any_on+0x44>
   4f310:	18c7883a 	add	r3,r3,r3
   4f314:	18c7883a 	add	r3,r3,r3
   4f318:	20c7883a 	add	r3,r4,r3
   4f31c:	20c0192e 	bgeu	r4,r3,4f384 <__any_on+0x84>
   4f320:	18bfff17 	ldw	r2,-4(r3)
   4f324:	18ffff04 	addi	r3,r3,-4
   4f328:	1000041e 	bne	r2,zero,4f33c <__any_on+0x3c>
   4f32c:	20c0142e 	bgeu	r4,r3,4f380 <__any_on+0x80>
   4f330:	18ffff04 	addi	r3,r3,-4
   4f334:	19400017 	ldw	r5,0(r3)
   4f338:	283ffc26 	beq	r5,zero,4f32c <__alt_data_end+0xfffe822c>
   4f33c:	00800044 	movi	r2,1
   4f340:	f800283a 	ret
   4f344:	10c00a0e 	bge	r2,r3,4f370 <__any_on+0x70>
   4f348:	1085883a 	add	r2,r2,r2
   4f34c:	1085883a 	add	r2,r2,r2
   4f350:	294007cc 	andi	r5,r5,31
   4f354:	2087883a 	add	r3,r4,r2
   4f358:	283ff026 	beq	r5,zero,4f31c <__alt_data_end+0xfffe821c>
   4f35c:	19800017 	ldw	r6,0(r3)
   4f360:	3144d83a 	srl	r2,r6,r5
   4f364:	114a983a 	sll	r5,r2,r5
   4f368:	29bff41e 	bne	r5,r6,4f33c <__alt_data_end+0xfffe823c>
   4f36c:	003feb06 	br	4f31c <__alt_data_end+0xfffe821c>
   4f370:	1085883a 	add	r2,r2,r2
   4f374:	1085883a 	add	r2,r2,r2
   4f378:	2087883a 	add	r3,r4,r2
   4f37c:	003fe706 	br	4f31c <__alt_data_end+0xfffe821c>
   4f380:	f800283a 	ret
   4f384:	0005883a 	mov	r2,zero
   4f388:	f800283a 	ret

0004f38c <_putc_r>:
   4f38c:	defffc04 	addi	sp,sp,-16
   4f390:	dc000215 	stw	r16,8(sp)
   4f394:	dfc00315 	stw	ra,12(sp)
   4f398:	2021883a 	mov	r16,r4
   4f39c:	20000226 	beq	r4,zero,4f3a8 <_putc_r+0x1c>
   4f3a0:	20800e17 	ldw	r2,56(r4)
   4f3a4:	10001b26 	beq	r2,zero,4f414 <_putc_r+0x88>
   4f3a8:	30800217 	ldw	r2,8(r6)
   4f3ac:	10bfffc4 	addi	r2,r2,-1
   4f3b0:	30800215 	stw	r2,8(r6)
   4f3b4:	10000a16 	blt	r2,zero,4f3e0 <_putc_r+0x54>
   4f3b8:	30800017 	ldw	r2,0(r6)
   4f3bc:	11400005 	stb	r5,0(r2)
   4f3c0:	30800017 	ldw	r2,0(r6)
   4f3c4:	10c00044 	addi	r3,r2,1
   4f3c8:	30c00015 	stw	r3,0(r6)
   4f3cc:	10800003 	ldbu	r2,0(r2)
   4f3d0:	dfc00317 	ldw	ra,12(sp)
   4f3d4:	dc000217 	ldw	r16,8(sp)
   4f3d8:	dec00404 	addi	sp,sp,16
   4f3dc:	f800283a 	ret
   4f3e0:	30c00617 	ldw	r3,24(r6)
   4f3e4:	10c00616 	blt	r2,r3,4f400 <_putc_r+0x74>
   4f3e8:	30800017 	ldw	r2,0(r6)
   4f3ec:	00c00284 	movi	r3,10
   4f3f0:	11400005 	stb	r5,0(r2)
   4f3f4:	30800017 	ldw	r2,0(r6)
   4f3f8:	11400003 	ldbu	r5,0(r2)
   4f3fc:	28fff11e 	bne	r5,r3,4f3c4 <__alt_data_end+0xfffe82c4>
   4f400:	8009883a 	mov	r4,r16
   4f404:	dfc00317 	ldw	ra,12(sp)
   4f408:	dc000217 	ldw	r16,8(sp)
   4f40c:	dec00404 	addi	sp,sp,16
   4f410:	005109c1 	jmpi	5109c <__swbuf_r>
   4f414:	d9400015 	stw	r5,0(sp)
   4f418:	d9800115 	stw	r6,4(sp)
   4f41c:	00482640 	call	48264 <__sinit>
   4f420:	d9800117 	ldw	r6,4(sp)
   4f424:	d9400017 	ldw	r5,0(sp)
   4f428:	003fdf06 	br	4f3a8 <__alt_data_end+0xfffe82a8>

0004f42c <putc>:
   4f42c:	defffc04 	addi	sp,sp,-16
   4f430:	dc400115 	stw	r17,4(sp)
   4f434:	044001b4 	movhi	r17,6
   4f438:	8c733004 	addi	r17,r17,-13120
   4f43c:	dc800215 	stw	r18,8(sp)
   4f440:	2025883a 	mov	r18,r4
   4f444:	89000017 	ldw	r4,0(r17)
   4f448:	dc000015 	stw	r16,0(sp)
   4f44c:	dfc00315 	stw	ra,12(sp)
   4f450:	2821883a 	mov	r16,r5
   4f454:	20000226 	beq	r4,zero,4f460 <putc+0x34>
   4f458:	20c00e17 	ldw	r3,56(r4)
   4f45c:	18001a26 	beq	r3,zero,4f4c8 <putc+0x9c>
   4f460:	80800217 	ldw	r2,8(r16)
   4f464:	10bfffc4 	addi	r2,r2,-1
   4f468:	80800215 	stw	r2,8(r16)
   4f46c:	10000c16 	blt	r2,zero,4f4a0 <putc+0x74>
   4f470:	80800017 	ldw	r2,0(r16)
   4f474:	14800005 	stb	r18,0(r2)
   4f478:	80800017 	ldw	r2,0(r16)
   4f47c:	10c00044 	addi	r3,r2,1
   4f480:	80c00015 	stw	r3,0(r16)
   4f484:	10800003 	ldbu	r2,0(r2)
   4f488:	dfc00317 	ldw	ra,12(sp)
   4f48c:	dc800217 	ldw	r18,8(sp)
   4f490:	dc400117 	ldw	r17,4(sp)
   4f494:	dc000017 	ldw	r16,0(sp)
   4f498:	dec00404 	addi	sp,sp,16
   4f49c:	f800283a 	ret
   4f4a0:	80c00617 	ldw	r3,24(r16)
   4f4a4:	10c00a16 	blt	r2,r3,4f4d0 <putc+0xa4>
   4f4a8:	80800017 	ldw	r2,0(r16)
   4f4ac:	00c00284 	movi	r3,10
   4f4b0:	14800005 	stb	r18,0(r2)
   4f4b4:	80800017 	ldw	r2,0(r16)
   4f4b8:	11400003 	ldbu	r5,0(r2)
   4f4bc:	28ffef1e 	bne	r5,r3,4f47c <__alt_data_end+0xfffe837c>
   4f4c0:	89000017 	ldw	r4,0(r17)
   4f4c4:	00000406 	br	4f4d8 <putc+0xac>
   4f4c8:	00482640 	call	48264 <__sinit>
   4f4cc:	003fe406 	br	4f460 <__alt_data_end+0xfffe8360>
   4f4d0:	89000017 	ldw	r4,0(r17)
   4f4d4:	900b883a 	mov	r5,r18
   4f4d8:	800d883a 	mov	r6,r16
   4f4dc:	dfc00317 	ldw	ra,12(sp)
   4f4e0:	dc800217 	ldw	r18,8(sp)
   4f4e4:	dc400117 	ldw	r17,4(sp)
   4f4e8:	dc000017 	ldw	r16,0(sp)
   4f4ec:	dec00404 	addi	sp,sp,16
   4f4f0:	005109c1 	jmpi	5109c <__swbuf_r>

0004f4f4 <_read_r>:
   4f4f4:	defffd04 	addi	sp,sp,-12
   4f4f8:	dc000015 	stw	r16,0(sp)
   4f4fc:	040001b4 	movhi	r16,6
   4f500:	dc400115 	stw	r17,4(sp)
   4f504:	843a1e04 	addi	r16,r16,-6024
   4f508:	2023883a 	mov	r17,r4
   4f50c:	2809883a 	mov	r4,r5
   4f510:	300b883a 	mov	r5,r6
   4f514:	380d883a 	mov	r6,r7
   4f518:	dfc00215 	stw	ra,8(sp)
   4f51c:	80000015 	stw	zero,0(r16)
   4f520:	00551640 	call	55164 <read>
   4f524:	00ffffc4 	movi	r3,-1
   4f528:	10c00526 	beq	r2,r3,4f540 <_read_r+0x4c>
   4f52c:	dfc00217 	ldw	ra,8(sp)
   4f530:	dc400117 	ldw	r17,4(sp)
   4f534:	dc000017 	ldw	r16,0(sp)
   4f538:	dec00304 	addi	sp,sp,12
   4f53c:	f800283a 	ret
   4f540:	80c00017 	ldw	r3,0(r16)
   4f544:	183ff926 	beq	r3,zero,4f52c <__alt_data_end+0xfffe842c>
   4f548:	88c00015 	stw	r3,0(r17)
   4f54c:	003ff706 	br	4f52c <__alt_data_end+0xfffe842c>

0004f550 <_realloc_r>:
   4f550:	defff604 	addi	sp,sp,-40
   4f554:	dcc00315 	stw	r19,12(sp)
   4f558:	dc400115 	stw	r17,4(sp)
   4f55c:	dfc00915 	stw	ra,36(sp)
   4f560:	df000815 	stw	fp,32(sp)
   4f564:	ddc00715 	stw	r23,28(sp)
   4f568:	dd800615 	stw	r22,24(sp)
   4f56c:	dd400515 	stw	r21,20(sp)
   4f570:	dd000415 	stw	r20,16(sp)
   4f574:	dc800215 	stw	r18,8(sp)
   4f578:	dc000015 	stw	r16,0(sp)
   4f57c:	2827883a 	mov	r19,r5
   4f580:	3023883a 	mov	r17,r6
   4f584:	2800bf26 	beq	r5,zero,4f884 <_realloc_r+0x334>
   4f588:	2025883a 	mov	r18,r4
   4f58c:	00550d40 	call	550d4 <__malloc_lock>
   4f590:	98ffff17 	ldw	r3,-4(r19)
   4f594:	01bfff04 	movi	r6,-4
   4f598:	890002c4 	addi	r4,r17,11
   4f59c:	01c00584 	movi	r7,22
   4f5a0:	9d7ffe04 	addi	r21,r19,-8
   4f5a4:	19a0703a 	and	r16,r3,r6
   4f5a8:	39003f2e 	bgeu	r7,r4,4f6a8 <_realloc_r+0x158>
   4f5ac:	053ffe04 	movi	r20,-8
   4f5b0:	2528703a 	and	r20,r4,r20
   4f5b4:	a00f883a 	mov	r7,r20
   4f5b8:	a0008216 	blt	r20,zero,4f7c4 <_realloc_r+0x274>
   4f5bc:	a4408136 	bltu	r20,r17,4f7c4 <_realloc_r+0x274>
   4f5c0:	81c03c0e 	bge	r16,r7,4f6b4 <_realloc_r+0x164>
   4f5c4:	070001b4 	movhi	fp,6
   4f5c8:	e72d8b04 	addi	fp,fp,-18900
   4f5cc:	e1000217 	ldw	r4,8(fp)
   4f5d0:	ac05883a 	add	r2,r21,r16
   4f5d4:	2080bf26 	beq	r4,r2,4f8d4 <_realloc_r+0x384>
   4f5d8:	11000117 	ldw	r4,4(r2)
   4f5dc:	023fff84 	movi	r8,-2
   4f5e0:	2210703a 	and	r8,r4,r8
   4f5e4:	1211883a 	add	r8,r2,r8
   4f5e8:	41400117 	ldw	r5,4(r8)
   4f5ec:	2940004c 	andi	r5,r5,1
   4f5f0:	28004a1e 	bne	r5,zero,4f71c <_realloc_r+0x1cc>
   4f5f4:	017fff04 	movi	r5,-4
   4f5f8:	2148703a 	and	r4,r4,r5
   4f5fc:	2409883a 	add	r4,r4,r16
   4f600:	21c0ad0e 	bge	r4,r7,4f8b8 <_realloc_r+0x368>
   4f604:	18c0004c 	andi	r3,r3,1
   4f608:	18007f1e 	bne	r3,zero,4f808 <_realloc_r+0x2b8>
   4f60c:	9dfffe17 	ldw	r23,-8(r19)
   4f610:	adefc83a 	sub	r23,r21,r23
   4f614:	bd800117 	ldw	r22,4(r23)
   4f618:	b14a703a 	and	r5,r22,r5
   4f61c:	216d883a 	add	r22,r4,r5
   4f620:	b1c04516 	blt	r22,r7,4f738 <_realloc_r+0x1e8>
   4f624:	10c00317 	ldw	r3,12(r2)
   4f628:	10800217 	ldw	r2,8(r2)
   4f62c:	81bfff04 	addi	r6,r16,-4
   4f630:	bc400204 	addi	r17,r23,8
   4f634:	10c00315 	stw	r3,12(r2)
   4f638:	18800215 	stw	r2,8(r3)
   4f63c:	b9400217 	ldw	r5,8(r23)
   4f640:	b8c00317 	ldw	r3,12(r23)
   4f644:	00800904 	movi	r2,36
   4f648:	28c00315 	stw	r3,12(r5)
   4f64c:	19400215 	stw	r5,8(r3)
   4f650:	1180ef36 	bltu	r2,r6,4fa10 <_realloc_r+0x4c0>
   4f654:	008004c4 	movi	r2,19
   4f658:	1180da2e 	bgeu	r2,r6,4f9c4 <_realloc_r+0x474>
   4f65c:	98800017 	ldw	r2,0(r19)
   4f660:	b8800215 	stw	r2,8(r23)
   4f664:	98800117 	ldw	r2,4(r19)
   4f668:	b8800315 	stw	r2,12(r23)
   4f66c:	008006c4 	movi	r2,27
   4f670:	1180fc2e 	bgeu	r2,r6,4fa64 <_realloc_r+0x514>
   4f674:	98800217 	ldw	r2,8(r19)
   4f678:	b8800415 	stw	r2,16(r23)
   4f67c:	98800317 	ldw	r2,12(r19)
   4f680:	b8800515 	stw	r2,20(r23)
   4f684:	00800904 	movi	r2,36
   4f688:	3080421e 	bne	r6,r2,4f794 <_realloc_r+0x244>
   4f68c:	98800417 	ldw	r2,16(r19)
   4f690:	9cc00604 	addi	r19,r19,24
   4f694:	b8c00804 	addi	r3,r23,32
   4f698:	b8800615 	stw	r2,24(r23)
   4f69c:	98bfff17 	ldw	r2,-4(r19)
   4f6a0:	b8800715 	stw	r2,28(r23)
   4f6a4:	00003d06 	br	4f79c <_realloc_r+0x24c>
   4f6a8:	01c00404 	movi	r7,16
   4f6ac:	3829883a 	mov	r20,r7
   4f6b0:	003fc206 	br	4f5bc <__alt_data_end+0xfffe84bc>
   4f6b4:	9823883a 	mov	r17,r19
   4f6b8:	850fc83a 	sub	r7,r16,r20
   4f6bc:	008003c4 	movi	r2,15
   4f6c0:	18c0004c 	andi	r3,r3,1
   4f6c4:	11c04336 	bltu	r2,r7,4f7d4 <_realloc_r+0x284>
   4f6c8:	1c06b03a 	or	r3,r3,r16
   4f6cc:	a8c00115 	stw	r3,4(r21)
   4f6d0:	ac21883a 	add	r16,r21,r16
   4f6d4:	80c00117 	ldw	r3,4(r16)
   4f6d8:	18c00054 	ori	r3,r3,1
   4f6dc:	80c00115 	stw	r3,4(r16)
   4f6e0:	9009883a 	mov	r4,r18
   4f6e4:	00550f40 	call	550f4 <__malloc_unlock>
   4f6e8:	8805883a 	mov	r2,r17
   4f6ec:	dfc00917 	ldw	ra,36(sp)
   4f6f0:	df000817 	ldw	fp,32(sp)
   4f6f4:	ddc00717 	ldw	r23,28(sp)
   4f6f8:	dd800617 	ldw	r22,24(sp)
   4f6fc:	dd400517 	ldw	r21,20(sp)
   4f700:	dd000417 	ldw	r20,16(sp)
   4f704:	dcc00317 	ldw	r19,12(sp)
   4f708:	dc800217 	ldw	r18,8(sp)
   4f70c:	dc400117 	ldw	r17,4(sp)
   4f710:	dc000017 	ldw	r16,0(sp)
   4f714:	dec00a04 	addi	sp,sp,40
   4f718:	f800283a 	ret
   4f71c:	18c0004c 	andi	r3,r3,1
   4f720:	1800391e 	bne	r3,zero,4f808 <_realloc_r+0x2b8>
   4f724:	9dfffe17 	ldw	r23,-8(r19)
   4f728:	00bfff04 	movi	r2,-4
   4f72c:	adefc83a 	sub	r23,r21,r23
   4f730:	b9400117 	ldw	r5,4(r23)
   4f734:	288a703a 	and	r5,r5,r2
   4f738:	2c2d883a 	add	r22,r5,r16
   4f73c:	b1c03216 	blt	r22,r7,4f808 <_realloc_r+0x2b8>
   4f740:	b8800317 	ldw	r2,12(r23)
   4f744:	b8c00217 	ldw	r3,8(r23)
   4f748:	81bfff04 	addi	r6,r16,-4
   4f74c:	01000904 	movi	r4,36
   4f750:	18800315 	stw	r2,12(r3)
   4f754:	10c00215 	stw	r3,8(r2)
   4f758:	bc400204 	addi	r17,r23,8
   4f75c:	2180ac36 	bltu	r4,r6,4fa10 <_realloc_r+0x4c0>
   4f760:	008004c4 	movi	r2,19
   4f764:	1180972e 	bgeu	r2,r6,4f9c4 <_realloc_r+0x474>
   4f768:	98800017 	ldw	r2,0(r19)
   4f76c:	b8800215 	stw	r2,8(r23)
   4f770:	98800117 	ldw	r2,4(r19)
   4f774:	b8800315 	stw	r2,12(r23)
   4f778:	008006c4 	movi	r2,27
   4f77c:	1180b92e 	bgeu	r2,r6,4fa64 <_realloc_r+0x514>
   4f780:	98800217 	ldw	r2,8(r19)
   4f784:	b8800415 	stw	r2,16(r23)
   4f788:	98800317 	ldw	r2,12(r19)
   4f78c:	b8800515 	stw	r2,20(r23)
   4f790:	313fbe26 	beq	r6,r4,4f68c <__alt_data_end+0xfffe858c>
   4f794:	b8c00604 	addi	r3,r23,24
   4f798:	9cc00404 	addi	r19,r19,16
   4f79c:	98800017 	ldw	r2,0(r19)
   4f7a0:	b021883a 	mov	r16,r22
   4f7a4:	b82b883a 	mov	r21,r23
   4f7a8:	18800015 	stw	r2,0(r3)
   4f7ac:	98800117 	ldw	r2,4(r19)
   4f7b0:	18800115 	stw	r2,4(r3)
   4f7b4:	98800217 	ldw	r2,8(r19)
   4f7b8:	18800215 	stw	r2,8(r3)
   4f7bc:	b8c00117 	ldw	r3,4(r23)
   4f7c0:	003fbd06 	br	4f6b8 <__alt_data_end+0xfffe85b8>
   4f7c4:	00800304 	movi	r2,12
   4f7c8:	90800015 	stw	r2,0(r18)
   4f7cc:	0005883a 	mov	r2,zero
   4f7d0:	003fc606 	br	4f6ec <__alt_data_end+0xfffe85ec>
   4f7d4:	1d06b03a 	or	r3,r3,r20
   4f7d8:	ad0b883a 	add	r5,r21,r20
   4f7dc:	a8c00115 	stw	r3,4(r21)
   4f7e0:	38800054 	ori	r2,r7,1
   4f7e4:	28800115 	stw	r2,4(r5)
   4f7e8:	29cf883a 	add	r7,r5,r7
   4f7ec:	38800117 	ldw	r2,4(r7)
   4f7f0:	9009883a 	mov	r4,r18
   4f7f4:	29400204 	addi	r5,r5,8
   4f7f8:	10800054 	ori	r2,r2,1
   4f7fc:	38800115 	stw	r2,4(r7)
   4f800:	004d81c0 	call	4d81c <_free_r>
   4f804:	003fb606 	br	4f6e0 <__alt_data_end+0xfffe85e0>
   4f808:	880b883a 	mov	r5,r17
   4f80c:	9009883a 	mov	r4,r18
   4f810:	00484240 	call	48424 <_malloc_r>
   4f814:	1023883a 	mov	r17,r2
   4f818:	1000aa26 	beq	r2,zero,4fac4 <_realloc_r+0x574>
   4f81c:	98ffff17 	ldw	r3,-4(r19)
   4f820:	113ffe04 	addi	r4,r2,-8
   4f824:	00bfff84 	movi	r2,-2
   4f828:	1884703a 	and	r2,r3,r2
   4f82c:	a885883a 	add	r2,r21,r2
   4f830:	20808626 	beq	r4,r2,4fa4c <_realloc_r+0x4fc>
   4f834:	81bfff04 	addi	r6,r16,-4
   4f838:	00800904 	movi	r2,36
   4f83c:	11807036 	bltu	r2,r6,4fa00 <_realloc_r+0x4b0>
   4f840:	00c004c4 	movi	r3,19
   4f844:	19805636 	bltu	r3,r6,4f9a0 <_realloc_r+0x450>
   4f848:	8805883a 	mov	r2,r17
   4f84c:	9807883a 	mov	r3,r19
   4f850:	19000017 	ldw	r4,0(r3)
   4f854:	11000015 	stw	r4,0(r2)
   4f858:	19000117 	ldw	r4,4(r3)
   4f85c:	11000115 	stw	r4,4(r2)
   4f860:	18c00217 	ldw	r3,8(r3)
   4f864:	10c00215 	stw	r3,8(r2)
   4f868:	980b883a 	mov	r5,r19
   4f86c:	9009883a 	mov	r4,r18
   4f870:	004d81c0 	call	4d81c <_free_r>
   4f874:	9009883a 	mov	r4,r18
   4f878:	00550f40 	call	550f4 <__malloc_unlock>
   4f87c:	8805883a 	mov	r2,r17
   4f880:	003f9a06 	br	4f6ec <__alt_data_end+0xfffe85ec>
   4f884:	300b883a 	mov	r5,r6
   4f888:	dfc00917 	ldw	ra,36(sp)
   4f88c:	df000817 	ldw	fp,32(sp)
   4f890:	ddc00717 	ldw	r23,28(sp)
   4f894:	dd800617 	ldw	r22,24(sp)
   4f898:	dd400517 	ldw	r21,20(sp)
   4f89c:	dd000417 	ldw	r20,16(sp)
   4f8a0:	dcc00317 	ldw	r19,12(sp)
   4f8a4:	dc800217 	ldw	r18,8(sp)
   4f8a8:	dc400117 	ldw	r17,4(sp)
   4f8ac:	dc000017 	ldw	r16,0(sp)
   4f8b0:	dec00a04 	addi	sp,sp,40
   4f8b4:	00484241 	jmpi	48424 <_malloc_r>
   4f8b8:	11400317 	ldw	r5,12(r2)
   4f8bc:	10800217 	ldw	r2,8(r2)
   4f8c0:	9823883a 	mov	r17,r19
   4f8c4:	2021883a 	mov	r16,r4
   4f8c8:	11400315 	stw	r5,12(r2)
   4f8cc:	28800215 	stw	r2,8(r5)
   4f8d0:	003f7906 	br	4f6b8 <__alt_data_end+0xfffe85b8>
   4f8d4:	21000117 	ldw	r4,4(r4)
   4f8d8:	00bfff04 	movi	r2,-4
   4f8dc:	a1800404 	addi	r6,r20,16
   4f8e0:	2088703a 	and	r4,r4,r2
   4f8e4:	2409883a 	add	r4,r4,r16
   4f8e8:	2180380e 	bge	r4,r6,4f9cc <_realloc_r+0x47c>
   4f8ec:	18c0004c 	andi	r3,r3,1
   4f8f0:	183fc51e 	bne	r3,zero,4f808 <__alt_data_end+0xfffe8708>
   4f8f4:	9dfffe17 	ldw	r23,-8(r19)
   4f8f8:	adefc83a 	sub	r23,r21,r23
   4f8fc:	b9400117 	ldw	r5,4(r23)
   4f900:	288a703a 	and	r5,r5,r2
   4f904:	216d883a 	add	r22,r4,r5
   4f908:	b1bf8b16 	blt	r22,r6,4f738 <__alt_data_end+0xfffe8638>
   4f90c:	b8800317 	ldw	r2,12(r23)
   4f910:	b8c00217 	ldw	r3,8(r23)
   4f914:	81bfff04 	addi	r6,r16,-4
   4f918:	01000904 	movi	r4,36
   4f91c:	18800315 	stw	r2,12(r3)
   4f920:	10c00215 	stw	r3,8(r2)
   4f924:	bc400204 	addi	r17,r23,8
   4f928:	21805a36 	bltu	r4,r6,4fa94 <_realloc_r+0x544>
   4f92c:	008004c4 	movi	r2,19
   4f930:	1180562e 	bgeu	r2,r6,4fa8c <_realloc_r+0x53c>
   4f934:	98800017 	ldw	r2,0(r19)
   4f938:	b8800215 	stw	r2,8(r23)
   4f93c:	98800117 	ldw	r2,4(r19)
   4f940:	b8800315 	stw	r2,12(r23)
   4f944:	008006c4 	movi	r2,27
   4f948:	11805636 	bltu	r2,r6,4faa4 <_realloc_r+0x554>
   4f94c:	b8800404 	addi	r2,r23,16
   4f950:	9cc00204 	addi	r19,r19,8
   4f954:	98c00017 	ldw	r3,0(r19)
   4f958:	10c00015 	stw	r3,0(r2)
   4f95c:	98c00117 	ldw	r3,4(r19)
   4f960:	10c00115 	stw	r3,4(r2)
   4f964:	98c00217 	ldw	r3,8(r19)
   4f968:	10c00215 	stw	r3,8(r2)
   4f96c:	bd07883a 	add	r3,r23,r20
   4f970:	b505c83a 	sub	r2,r22,r20
   4f974:	e0c00215 	stw	r3,8(fp)
   4f978:	10800054 	ori	r2,r2,1
   4f97c:	18800115 	stw	r2,4(r3)
   4f980:	b8800117 	ldw	r2,4(r23)
   4f984:	9009883a 	mov	r4,r18
   4f988:	1080004c 	andi	r2,r2,1
   4f98c:	a0a8b03a 	or	r20,r20,r2
   4f990:	bd000115 	stw	r20,4(r23)
   4f994:	00550f40 	call	550f4 <__malloc_unlock>
   4f998:	8805883a 	mov	r2,r17
   4f99c:	003f5306 	br	4f6ec <__alt_data_end+0xfffe85ec>
   4f9a0:	98c00017 	ldw	r3,0(r19)
   4f9a4:	88c00015 	stw	r3,0(r17)
   4f9a8:	98c00117 	ldw	r3,4(r19)
   4f9ac:	88c00115 	stw	r3,4(r17)
   4f9b0:	00c006c4 	movi	r3,27
   4f9b4:	19801d36 	bltu	r3,r6,4fa2c <_realloc_r+0x4dc>
   4f9b8:	88800204 	addi	r2,r17,8
   4f9bc:	98c00204 	addi	r3,r19,8
   4f9c0:	003fa306 	br	4f850 <__alt_data_end+0xfffe8750>
   4f9c4:	8807883a 	mov	r3,r17
   4f9c8:	003f7406 	br	4f79c <__alt_data_end+0xfffe869c>
   4f9cc:	ad2b883a 	add	r21,r21,r20
   4f9d0:	2505c83a 	sub	r2,r4,r20
   4f9d4:	e5400215 	stw	r21,8(fp)
   4f9d8:	10800054 	ori	r2,r2,1
   4f9dc:	a8800115 	stw	r2,4(r21)
   4f9e0:	98bfff17 	ldw	r2,-4(r19)
   4f9e4:	9009883a 	mov	r4,r18
   4f9e8:	1080004c 	andi	r2,r2,1
   4f9ec:	a0a8b03a 	or	r20,r20,r2
   4f9f0:	9d3fff15 	stw	r20,-4(r19)
   4f9f4:	00550f40 	call	550f4 <__malloc_unlock>
   4f9f8:	9805883a 	mov	r2,r19
   4f9fc:	003f3b06 	br	4f6ec <__alt_data_end+0xfffe85ec>
   4fa00:	8809883a 	mov	r4,r17
   4fa04:	980b883a 	mov	r5,r19
   4fa08:	004e2a40 	call	4e2a4 <memmove>
   4fa0c:	003f9606 	br	4f868 <__alt_data_end+0xfffe8768>
   4fa10:	8809883a 	mov	r4,r17
   4fa14:	980b883a 	mov	r5,r19
   4fa18:	004e2a40 	call	4e2a4 <memmove>
   4fa1c:	b8c00117 	ldw	r3,4(r23)
   4fa20:	b021883a 	mov	r16,r22
   4fa24:	b82b883a 	mov	r21,r23
   4fa28:	003f2306 	br	4f6b8 <__alt_data_end+0xfffe85b8>
   4fa2c:	98c00217 	ldw	r3,8(r19)
   4fa30:	88c00215 	stw	r3,8(r17)
   4fa34:	98c00317 	ldw	r3,12(r19)
   4fa38:	88c00315 	stw	r3,12(r17)
   4fa3c:	30800c26 	beq	r6,r2,4fa70 <_realloc_r+0x520>
   4fa40:	88800404 	addi	r2,r17,16
   4fa44:	98c00404 	addi	r3,r19,16
   4fa48:	003f8106 	br	4f850 <__alt_data_end+0xfffe8750>
   4fa4c:	893fff17 	ldw	r4,-4(r17)
   4fa50:	00bfff04 	movi	r2,-4
   4fa54:	9823883a 	mov	r17,r19
   4fa58:	2084703a 	and	r2,r4,r2
   4fa5c:	80a1883a 	add	r16,r16,r2
   4fa60:	003f1506 	br	4f6b8 <__alt_data_end+0xfffe85b8>
   4fa64:	b8c00404 	addi	r3,r23,16
   4fa68:	9cc00204 	addi	r19,r19,8
   4fa6c:	003f4b06 	br	4f79c <__alt_data_end+0xfffe869c>
   4fa70:	99000417 	ldw	r4,16(r19)
   4fa74:	88800604 	addi	r2,r17,24
   4fa78:	98c00604 	addi	r3,r19,24
   4fa7c:	89000415 	stw	r4,16(r17)
   4fa80:	99000517 	ldw	r4,20(r19)
   4fa84:	89000515 	stw	r4,20(r17)
   4fa88:	003f7106 	br	4f850 <__alt_data_end+0xfffe8750>
   4fa8c:	8805883a 	mov	r2,r17
   4fa90:	003fb006 	br	4f954 <__alt_data_end+0xfffe8854>
   4fa94:	8809883a 	mov	r4,r17
   4fa98:	980b883a 	mov	r5,r19
   4fa9c:	004e2a40 	call	4e2a4 <memmove>
   4faa0:	003fb206 	br	4f96c <__alt_data_end+0xfffe886c>
   4faa4:	98800217 	ldw	r2,8(r19)
   4faa8:	b8800415 	stw	r2,16(r23)
   4faac:	98800317 	ldw	r2,12(r19)
   4fab0:	b8800515 	stw	r2,20(r23)
   4fab4:	31000726 	beq	r6,r4,4fad4 <_realloc_r+0x584>
   4fab8:	b8800604 	addi	r2,r23,24
   4fabc:	9cc00404 	addi	r19,r19,16
   4fac0:	003fa406 	br	4f954 <__alt_data_end+0xfffe8854>
   4fac4:	9009883a 	mov	r4,r18
   4fac8:	00550f40 	call	550f4 <__malloc_unlock>
   4facc:	0005883a 	mov	r2,zero
   4fad0:	003f0606 	br	4f6ec <__alt_data_end+0xfffe85ec>
   4fad4:	98c00417 	ldw	r3,16(r19)
   4fad8:	9cc00604 	addi	r19,r19,24
   4fadc:	b8800804 	addi	r2,r23,32
   4fae0:	b8c00615 	stw	r3,24(r23)
   4fae4:	98ffff17 	ldw	r3,-4(r19)
   4fae8:	b8c00715 	stw	r3,28(r23)
   4faec:	003f9906 	br	4f954 <__alt_data_end+0xfffe8854>

0004faf0 <__fpclassifyd>:
   4faf0:	00a00034 	movhi	r2,32768
   4faf4:	10bfffc4 	addi	r2,r2,-1
   4faf8:	2884703a 	and	r2,r5,r2
   4fafc:	10000726 	beq	r2,zero,4fb1c <__fpclassifyd+0x2c>
   4fb00:	00fffc34 	movhi	r3,65520
   4fb04:	019ff834 	movhi	r6,32736
   4fb08:	28c7883a 	add	r3,r5,r3
   4fb0c:	31bfffc4 	addi	r6,r6,-1
   4fb10:	30c00536 	bltu	r6,r3,4fb28 <__fpclassifyd+0x38>
   4fb14:	00800104 	movi	r2,4
   4fb18:	f800283a 	ret
   4fb1c:	2000021e 	bne	r4,zero,4fb28 <__fpclassifyd+0x38>
   4fb20:	00800084 	movi	r2,2
   4fb24:	f800283a 	ret
   4fb28:	00dffc34 	movhi	r3,32752
   4fb2c:	019ff834 	movhi	r6,32736
   4fb30:	28cb883a 	add	r5,r5,r3
   4fb34:	31bfffc4 	addi	r6,r6,-1
   4fb38:	317ff62e 	bgeu	r6,r5,4fb14 <__alt_data_end+0xfffe8a14>
   4fb3c:	01400434 	movhi	r5,16
   4fb40:	297fffc4 	addi	r5,r5,-1
   4fb44:	28800236 	bltu	r5,r2,4fb50 <__fpclassifyd+0x60>
   4fb48:	008000c4 	movi	r2,3
   4fb4c:	f800283a 	ret
   4fb50:	10c00226 	beq	r2,r3,4fb5c <__fpclassifyd+0x6c>
   4fb54:	0005883a 	mov	r2,zero
   4fb58:	f800283a 	ret
   4fb5c:	2005003a 	cmpeq	r2,r4,zero
   4fb60:	f800283a 	ret

0004fb64 <strcmp>:
   4fb64:	2144b03a 	or	r2,r4,r5
   4fb68:	108000cc 	andi	r2,r2,3
   4fb6c:	1000171e 	bne	r2,zero,4fbcc <strcmp+0x68>
   4fb70:	20800017 	ldw	r2,0(r4)
   4fb74:	28c00017 	ldw	r3,0(r5)
   4fb78:	10c0141e 	bne	r2,r3,4fbcc <strcmp+0x68>
   4fb7c:	027fbff4 	movhi	r9,65279
   4fb80:	4a7fbfc4 	addi	r9,r9,-257
   4fb84:	0086303a 	nor	r3,zero,r2
   4fb88:	02202074 	movhi	r8,32897
   4fb8c:	1245883a 	add	r2,r2,r9
   4fb90:	42202004 	addi	r8,r8,-32640
   4fb94:	10c4703a 	and	r2,r2,r3
   4fb98:	1204703a 	and	r2,r2,r8
   4fb9c:	10000226 	beq	r2,zero,4fba8 <strcmp+0x44>
   4fba0:	00001706 	br	4fc00 <strcmp+0x9c>
   4fba4:	1000161e 	bne	r2,zero,4fc00 <strcmp+0x9c>
   4fba8:	21000104 	addi	r4,r4,4
   4fbac:	20c00017 	ldw	r3,0(r4)
   4fbb0:	29400104 	addi	r5,r5,4
   4fbb4:	29800017 	ldw	r6,0(r5)
   4fbb8:	1a4f883a 	add	r7,r3,r9
   4fbbc:	00c4303a 	nor	r2,zero,r3
   4fbc0:	3884703a 	and	r2,r7,r2
   4fbc4:	1204703a 	and	r2,r2,r8
   4fbc8:	19bff626 	beq	r3,r6,4fba4 <__alt_data_end+0xfffe8aa4>
   4fbcc:	20800007 	ldb	r2,0(r4)
   4fbd0:	1000051e 	bne	r2,zero,4fbe8 <strcmp+0x84>
   4fbd4:	00000606 	br	4fbf0 <strcmp+0x8c>
   4fbd8:	21000044 	addi	r4,r4,1
   4fbdc:	20800007 	ldb	r2,0(r4)
   4fbe0:	29400044 	addi	r5,r5,1
   4fbe4:	10000226 	beq	r2,zero,4fbf0 <strcmp+0x8c>
   4fbe8:	28c00007 	ldb	r3,0(r5)
   4fbec:	10fffa26 	beq	r2,r3,4fbd8 <__alt_data_end+0xfffe8ad8>
   4fbf0:	20800003 	ldbu	r2,0(r4)
   4fbf4:	28c00003 	ldbu	r3,0(r5)
   4fbf8:	10c5c83a 	sub	r2,r2,r3
   4fbfc:	f800283a 	ret
   4fc00:	0005883a 	mov	r2,zero
   4fc04:	f800283a 	ret

0004fc08 <__sprint_r.part.0>:
   4fc08:	28801917 	ldw	r2,100(r5)
   4fc0c:	defff604 	addi	sp,sp,-40
   4fc10:	dd400515 	stw	r21,20(sp)
   4fc14:	dcc00315 	stw	r19,12(sp)
   4fc18:	dfc00915 	stw	ra,36(sp)
   4fc1c:	df000815 	stw	fp,32(sp)
   4fc20:	ddc00715 	stw	r23,28(sp)
   4fc24:	dd800615 	stw	r22,24(sp)
   4fc28:	dd000415 	stw	r20,16(sp)
   4fc2c:	dc800215 	stw	r18,8(sp)
   4fc30:	dc400115 	stw	r17,4(sp)
   4fc34:	dc000015 	stw	r16,0(sp)
   4fc38:	1088000c 	andi	r2,r2,8192
   4fc3c:	2827883a 	mov	r19,r5
   4fc40:	302b883a 	mov	r21,r6
   4fc44:	10002d26 	beq	r2,zero,4fcfc <__sprint_r.part.0+0xf4>
   4fc48:	30800217 	ldw	r2,8(r6)
   4fc4c:	35800017 	ldw	r22,0(r6)
   4fc50:	10002826 	beq	r2,zero,4fcf4 <__sprint_r.part.0+0xec>
   4fc54:	2029883a 	mov	r20,r4
   4fc58:	b5c00104 	addi	r23,r22,4
   4fc5c:	04bfffc4 	movi	r18,-1
   4fc60:	bc400017 	ldw	r17,0(r23)
   4fc64:	b4000017 	ldw	r16,0(r22)
   4fc68:	0039883a 	mov	fp,zero
   4fc6c:	8822d0ba 	srli	r17,r17,2
   4fc70:	04400316 	blt	zero,r17,4fc80 <__sprint_r.part.0+0x78>
   4fc74:	00001706 	br	4fcd4 <__sprint_r.part.0+0xcc>
   4fc78:	84000104 	addi	r16,r16,4
   4fc7c:	8f001526 	beq	r17,fp,4fcd4 <__sprint_r.part.0+0xcc>
   4fc80:	81400017 	ldw	r5,0(r16)
   4fc84:	a009883a 	mov	r4,r20
   4fc88:	980d883a 	mov	r6,r19
   4fc8c:	00512d00 	call	512d0 <_fputwc_r>
   4fc90:	e7000044 	addi	fp,fp,1
   4fc94:	14bff81e 	bne	r2,r18,4fc78 <__alt_data_end+0xfffe8b78>
   4fc98:	9005883a 	mov	r2,r18
   4fc9c:	a8000215 	stw	zero,8(r21)
   4fca0:	a8000115 	stw	zero,4(r21)
   4fca4:	dfc00917 	ldw	ra,36(sp)
   4fca8:	df000817 	ldw	fp,32(sp)
   4fcac:	ddc00717 	ldw	r23,28(sp)
   4fcb0:	dd800617 	ldw	r22,24(sp)
   4fcb4:	dd400517 	ldw	r21,20(sp)
   4fcb8:	dd000417 	ldw	r20,16(sp)
   4fcbc:	dcc00317 	ldw	r19,12(sp)
   4fcc0:	dc800217 	ldw	r18,8(sp)
   4fcc4:	dc400117 	ldw	r17,4(sp)
   4fcc8:	dc000017 	ldw	r16,0(sp)
   4fccc:	dec00a04 	addi	sp,sp,40
   4fcd0:	f800283a 	ret
   4fcd4:	a8c00217 	ldw	r3,8(r21)
   4fcd8:	8c63883a 	add	r17,r17,r17
   4fcdc:	8c63883a 	add	r17,r17,r17
   4fce0:	1c45c83a 	sub	r2,r3,r17
   4fce4:	a8800215 	stw	r2,8(r21)
   4fce8:	b5800204 	addi	r22,r22,8
   4fcec:	bdc00204 	addi	r23,r23,8
   4fcf0:	103fdb1e 	bne	r2,zero,4fc60 <__alt_data_end+0xfffe8b60>
   4fcf4:	0005883a 	mov	r2,zero
   4fcf8:	003fe806 	br	4fc9c <__alt_data_end+0xfffe8b9c>
   4fcfc:	004db0c0 	call	4db0c <__sfvwrite_r>
   4fd00:	003fe606 	br	4fc9c <__alt_data_end+0xfffe8b9c>

0004fd04 <__sprint_r>:
   4fd04:	30c00217 	ldw	r3,8(r6)
   4fd08:	18000126 	beq	r3,zero,4fd10 <__sprint_r+0xc>
   4fd0c:	004fc081 	jmpi	4fc08 <__sprint_r.part.0>
   4fd10:	30000115 	stw	zero,4(r6)
   4fd14:	0005883a 	mov	r2,zero
   4fd18:	f800283a 	ret

0004fd1c <___vfiprintf_internal_r>:
   4fd1c:	defeca04 	addi	sp,sp,-1240
   4fd20:	dd813215 	stw	r22,1224(sp)
   4fd24:	dd013015 	stw	r20,1216(sp)
   4fd28:	dfc13515 	stw	ra,1236(sp)
   4fd2c:	df013415 	stw	fp,1232(sp)
   4fd30:	ddc13315 	stw	r23,1228(sp)
   4fd34:	dd413115 	stw	r21,1220(sp)
   4fd38:	dcc12f15 	stw	r19,1212(sp)
   4fd3c:	dc812e15 	stw	r18,1208(sp)
   4fd40:	dc412d15 	stw	r17,1204(sp)
   4fd44:	dc012c15 	stw	r16,1200(sp)
   4fd48:	d9012015 	stw	r4,1152(sp)
   4fd4c:	d9c12115 	stw	r7,1156(sp)
   4fd50:	2829883a 	mov	r20,r5
   4fd54:	302d883a 	mov	r22,r6
   4fd58:	20000226 	beq	r4,zero,4fd64 <___vfiprintf_internal_r+0x48>
   4fd5c:	20800e17 	ldw	r2,56(r4)
   4fd60:	1001d326 	beq	r2,zero,504b0 <___vfiprintf_internal_r+0x794>
   4fd64:	a0c0030b 	ldhu	r3,12(r20)
   4fd68:	1908000c 	andi	r4,r3,8192
   4fd6c:	1805883a 	mov	r2,r3
   4fd70:	2000071e 	bne	r4,zero,4fd90 <___vfiprintf_internal_r+0x74>
   4fd74:	a1001917 	ldw	r4,100(r20)
   4fd78:	18880014 	ori	r2,r3,8192
   4fd7c:	00f7ffc4 	movi	r3,-8193
   4fd80:	20c8703a 	and	r4,r4,r3
   4fd84:	a080030d 	sth	r2,12(r20)
   4fd88:	1007883a 	mov	r3,r2
   4fd8c:	a1001915 	stw	r4,100(r20)
   4fd90:	1100020c 	andi	r4,r2,8
   4fd94:	20018926 	beq	r4,zero,503bc <___vfiprintf_internal_r+0x6a0>
   4fd98:	a1000417 	ldw	r4,16(r20)
   4fd9c:	20018726 	beq	r4,zero,503bc <___vfiprintf_internal_r+0x6a0>
   4fda0:	1080068c 	andi	r2,r2,26
   4fda4:	01000284 	movi	r4,10
   4fda8:	11018d26 	beq	r2,r4,503e0 <___vfiprintf_internal_r+0x6c4>
   4fdac:	da810a04 	addi	r10,sp,1064
   4fdb0:	dac109c4 	addi	r11,sp,1063
   4fdb4:	070001b4 	movhi	fp,6
   4fdb8:	05c001b4 	movhi	r23,6
   4fdbc:	da811e15 	stw	r10,1144(sp)
   4fdc0:	52d5c83a 	sub	r10,r10,r11
   4fdc4:	e72c5604 	addi	fp,fp,-20136
   4fdc8:	bdec5204 	addi	r23,r23,-20152
   4fdcc:	dac11f15 	stw	r11,1148(sp)
   4fdd0:	dec11a15 	stw	sp,1128(sp)
   4fdd4:	d8011c15 	stw	zero,1136(sp)
   4fdd8:	d8011b15 	stw	zero,1132(sp)
   4fddc:	d8012615 	stw	zero,1176(sp)
   4fde0:	d8012215 	stw	zero,1160(sp)
   4fde4:	da812715 	stw	r10,1180(sp)
   4fde8:	d811883a 	mov	r8,sp
   4fdec:	b021883a 	mov	r16,r22
   4fdf0:	80800007 	ldb	r2,0(r16)
   4fdf4:	10039c26 	beq	r2,zero,50c68 <___vfiprintf_internal_r+0xf4c>
   4fdf8:	01000944 	movi	r4,37
   4fdfc:	11039a26 	beq	r2,r4,50c68 <___vfiprintf_internal_r+0xf4c>
   4fe00:	8005883a 	mov	r2,r16
   4fe04:	00000106 	br	4fe0c <___vfiprintf_internal_r+0xf0>
   4fe08:	19000326 	beq	r3,r4,4fe18 <___vfiprintf_internal_r+0xfc>
   4fe0c:	10800044 	addi	r2,r2,1
   4fe10:	10c00007 	ldb	r3,0(r2)
   4fe14:	183ffc1e 	bne	r3,zero,4fe08 <__alt_data_end+0xfffe8d08>
   4fe18:	1425c83a 	sub	r18,r2,r16
   4fe1c:	1023883a 	mov	r17,r2
   4fe20:	90001026 	beq	r18,zero,4fe64 <___vfiprintf_internal_r+0x148>
   4fe24:	d8c11c17 	ldw	r3,1136(sp)
   4fe28:	d8811b17 	ldw	r2,1132(sp)
   4fe2c:	44000015 	stw	r16,0(r8)
   4fe30:	90c7883a 	add	r3,r18,r3
   4fe34:	10800044 	addi	r2,r2,1
   4fe38:	44800115 	stw	r18,4(r8)
   4fe3c:	d8c11c15 	stw	r3,1136(sp)
   4fe40:	d8811b15 	stw	r2,1132(sp)
   4fe44:	010001c4 	movi	r4,7
   4fe48:	2080750e 	bge	r4,r2,50020 <___vfiprintf_internal_r+0x304>
   4fe4c:	18039d1e 	bne	r3,zero,50cc4 <___vfiprintf_internal_r+0xfa8>
   4fe50:	dac12217 	ldw	r11,1160(sp)
   4fe54:	d8011b15 	stw	zero,1132(sp)
   4fe58:	d811883a 	mov	r8,sp
   4fe5c:	5c97883a 	add	r11,r11,r18
   4fe60:	dac12215 	stw	r11,1160(sp)
   4fe64:	88800007 	ldb	r2,0(r17)
   4fe68:	1002e026 	beq	r2,zero,509ec <___vfiprintf_internal_r+0xcd0>
   4fe6c:	88c00047 	ldb	r3,1(r17)
   4fe70:	8c000044 	addi	r16,r17,1
   4fe74:	d8011d85 	stb	zero,1142(sp)
   4fe78:	000d883a 	mov	r6,zero
   4fe7c:	027fffc4 	movi	r9,-1
   4fe80:	0027883a 	mov	r19,zero
   4fe84:	002b883a 	mov	r21,zero
   4fe88:	01001604 	movi	r4,88
   4fe8c:	01400244 	movi	r5,9
   4fe90:	03000a84 	movi	r12,42
   4fe94:	01c01b04 	movi	r7,108
   4fe98:	84000044 	addi	r16,r16,1
   4fe9c:	18bff804 	addi	r2,r3,-32
   4fea0:	20825f36 	bltu	r4,r2,50820 <___vfiprintf_internal_r+0xb04>
   4fea4:	100490ba 	slli	r2,r2,2
   4fea8:	02800174 	movhi	r10,5
   4feac:	52bfaf04 	addi	r10,r10,-324
   4feb0:	1285883a 	add	r2,r2,r10
   4feb4:	10800017 	ldw	r2,0(r2)
   4feb8:	1000683a 	jmp	r2
   4febc:	00050690 	cmplti	zero,zero,5146
   4fec0:	00050820 	cmpeqi	zero,zero,5152
   4fec4:	00050820 	cmpeqi	zero,zero,5152
   4fec8:	00050814 	movui	zero,5152
   4fecc:	00050820 	cmpeqi	zero,zero,5152
   4fed0:	00050820 	cmpeqi	zero,zero,5152
   4fed4:	00050820 	cmpeqi	zero,zero,5152
   4fed8:	00050820 	cmpeqi	zero,zero,5152
   4fedc:	00050820 	cmpeqi	zero,zero,5152
   4fee0:	00050820 	cmpeqi	zero,zero,5152
   4fee4:	000507ec 	andhi	zero,zero,5151
   4fee8:	00050808 	cmpgei	zero,zero,5152
   4feec:	00050820 	cmpeqi	zero,zero,5152
   4fef0:	000504c0 	call	504c <__reset-0x3afb4>
   4fef4:	00050620 	cmpeqi	zero,zero,5144
   4fef8:	00050820 	cmpeqi	zero,zero,5152
   4fefc:	000505a4 	muli	zero,zero,5142
   4ff00:	000505b0 	cmpltui	zero,zero,5142
   4ff04:	000505b0 	cmpltui	zero,zero,5142
   4ff08:	000505b0 	cmpltui	zero,zero,5142
   4ff0c:	000505b0 	cmpltui	zero,zero,5142
   4ff10:	000505b0 	cmpltui	zero,zero,5142
   4ff14:	000505b0 	cmpltui	zero,zero,5142
   4ff18:	000505b0 	cmpltui	zero,zero,5142
   4ff1c:	000505b0 	cmpltui	zero,zero,5142
   4ff20:	000505b0 	cmpltui	zero,zero,5142
   4ff24:	00050820 	cmpeqi	zero,zero,5152
   4ff28:	00050820 	cmpeqi	zero,zero,5152
   4ff2c:	00050820 	cmpeqi	zero,zero,5152
   4ff30:	00050820 	cmpeqi	zero,zero,5152
   4ff34:	00050820 	cmpeqi	zero,zero,5152
   4ff38:	00050820 	cmpeqi	zero,zero,5152
   4ff3c:	00050820 	cmpeqi	zero,zero,5152
   4ff40:	00050820 	cmpeqi	zero,zero,5152
   4ff44:	00050820 	cmpeqi	zero,zero,5152
   4ff48:	00050820 	cmpeqi	zero,zero,5152
   4ff4c:	000505dc 	xori	zero,zero,5143
   4ff50:	00050820 	cmpeqi	zero,zero,5152
   4ff54:	00050820 	cmpeqi	zero,zero,5152
   4ff58:	00050820 	cmpeqi	zero,zero,5152
   4ff5c:	00050820 	cmpeqi	zero,zero,5152
   4ff60:	00050820 	cmpeqi	zero,zero,5152
   4ff64:	00050820 	cmpeqi	zero,zero,5152
   4ff68:	00050820 	cmpeqi	zero,zero,5152
   4ff6c:	00050820 	cmpeqi	zero,zero,5152
   4ff70:	00050820 	cmpeqi	zero,zero,5152
   4ff74:	00050820 	cmpeqi	zero,zero,5152
   4ff78:	00050070 	cmpltui	zero,zero,5121
   4ff7c:	00050820 	cmpeqi	zero,zero,5152
   4ff80:	00050820 	cmpeqi	zero,zero,5152
   4ff84:	00050820 	cmpeqi	zero,zero,5152
   4ff88:	00050820 	cmpeqi	zero,zero,5152
   4ff8c:	00050820 	cmpeqi	zero,zero,5152
   4ff90:	00050034 	movhi	zero,5120
   4ff94:	00050820 	cmpeqi	zero,zero,5152
   4ff98:	00050820 	cmpeqi	zero,zero,5152
   4ff9c:	0005051c 	xori	zero,zero,5140
   4ffa0:	00050820 	cmpeqi	zero,zero,5152
   4ffa4:	00050820 	cmpeqi	zero,zero,5152
   4ffa8:	00050820 	cmpeqi	zero,zero,5152
   4ffac:	00050820 	cmpeqi	zero,zero,5152
   4ffb0:	00050820 	cmpeqi	zero,zero,5152
   4ffb4:	00050820 	cmpeqi	zero,zero,5152
   4ffb8:	00050820 	cmpeqi	zero,zero,5152
   4ffbc:	00050820 	cmpeqi	zero,zero,5152
   4ffc0:	00050820 	cmpeqi	zero,zero,5152
   4ffc4:	00050820 	cmpeqi	zero,zero,5152
   4ffc8:	00050574 	movhi	zero,5141
   4ffcc:	0005070c 	andi	zero,zero,5148
   4ffd0:	00050820 	cmpeqi	zero,zero,5152
   4ffd4:	00050820 	cmpeqi	zero,zero,5152
   4ffd8:	00050820 	cmpeqi	zero,zero,5152
   4ffdc:	00050794 	movui	zero,5150
   4ffe0:	0005070c 	andi	zero,zero,5148
   4ffe4:	00050820 	cmpeqi	zero,zero,5152
   4ffe8:	00050820 	cmpeqi	zero,zero,5152
   4ffec:	000507a0 	cmpeqi	zero,zero,5150
   4fff0:	00050820 	cmpeqi	zero,zero,5152
   4fff4:	00050660 	cmpeqi	zero,zero,5145
   4fff8:	00050074 	movhi	zero,5121
   4fffc:	00050748 	cmpgei	zero,zero,5149
   50000:	00050788 	cmpgei	zero,zero,5150
   50004:	00050820 	cmpeqi	zero,zero,5152
   50008:	000506ac 	andhi	zero,zero,5146
   5000c:	00050820 	cmpeqi	zero,zero,5152
   50010:	00050038 	rdprs	zero,zero,5120
   50014:	00050820 	cmpeqi	zero,zero,5152
   50018:	00050820 	cmpeqi	zero,zero,5152
   5001c:	000507b0 	cmpltui	zero,zero,5150
   50020:	42000204 	addi	r8,r8,8
   50024:	dac12217 	ldw	r11,1160(sp)
   50028:	5c97883a 	add	r11,r11,r18
   5002c:	dac12215 	stw	r11,1160(sp)
   50030:	003f8c06 	br	4fe64 <__alt_data_end+0xfffe8d64>
   50034:	ad400414 	ori	r21,r21,16
   50038:	a880080c 	andi	r2,r21,32
   5003c:	10012f1e 	bne	r2,zero,504fc <___vfiprintf_internal_r+0x7e0>
   50040:	a880040c 	andi	r2,r21,16
   50044:	1001ff1e 	bne	r2,zero,50844 <___vfiprintf_internal_r+0xb28>
   50048:	a880100c 	andi	r2,r21,64
   5004c:	1001fd26 	beq	r2,zero,50844 <___vfiprintf_internal_r+0xb28>
   50050:	da812117 	ldw	r10,1156(sp)
   50054:	002d883a 	mov	r22,zero
   50058:	00800044 	movi	r2,1
   5005c:	5480000b 	ldhu	r18,0(r10)
   50060:	52800104 	addi	r10,r10,4
   50064:	da812115 	stw	r10,1156(sp)
   50068:	9009883a 	mov	r4,r18
   5006c:	00000a06 	br	50098 <___vfiprintf_internal_r+0x37c>
   50070:	ad400414 	ori	r21,r21,16
   50074:	a880080c 	andi	r2,r21,32
   50078:	10011426 	beq	r2,zero,504cc <___vfiprintf_internal_r+0x7b0>
   5007c:	da812117 	ldw	r10,1156(sp)
   50080:	0005883a 	mov	r2,zero
   50084:	54800017 	ldw	r18,0(r10)
   50088:	55800117 	ldw	r22,4(r10)
   5008c:	52800204 	addi	r10,r10,8
   50090:	da812115 	stw	r10,1156(sp)
   50094:	9588b03a 	or	r4,r18,r22
   50098:	d8011d85 	stb	zero,1142(sp)
   5009c:	4823883a 	mov	r17,r9
   500a0:	0019883a 	mov	r12,zero
   500a4:	48000216 	blt	r9,zero,500b0 <___vfiprintf_internal_r+0x394>
   500a8:	00ffdfc4 	movi	r3,-129
   500ac:	a8ea703a 	and	r21,r21,r3
   500b0:	2002221e 	bne	r4,zero,5093c <___vfiprintf_internal_r+0xc20>
   500b4:	4802c726 	beq	r9,zero,50bd4 <___vfiprintf_internal_r+0xeb8>
   500b8:	10803fcc 	andi	r2,r2,255
   500bc:	00c00044 	movi	r3,1
   500c0:	10c24426 	beq	r2,r3,509d4 <___vfiprintf_internal_r+0xcb8>
   500c4:	00c00084 	movi	r3,2
   500c8:	10c2cc26 	beq	r2,r3,50bfc <___vfiprintf_internal_r+0xee0>
   500cc:	d8c10a04 	addi	r3,sp,1064
   500d0:	9008d0fa 	srli	r4,r18,3
   500d4:	b00a977a 	slli	r5,r22,29
   500d8:	b02cd0fa 	srli	r22,r22,3
   500dc:	948001cc 	andi	r18,r18,7
   500e0:	90800c04 	addi	r2,r18,48
   500e4:	18ffffc4 	addi	r3,r3,-1
   500e8:	2924b03a 	or	r18,r5,r4
   500ec:	18800005 	stb	r2,0(r3)
   500f0:	9588b03a 	or	r4,r18,r22
   500f4:	203ff61e 	bne	r4,zero,500d0 <__alt_data_end+0xfffe8fd0>
   500f8:	a900004c 	andi	r4,r21,1
   500fc:	d8c12415 	stw	r3,1168(sp)
   50100:	2002fb1e 	bne	r4,zero,50cf0 <___vfiprintf_internal_r+0xfd4>
   50104:	da811e17 	ldw	r10,1144(sp)
   50108:	50e3c83a 	sub	r17,r10,r3
   5010c:	8825883a 	mov	r18,r17
   50110:	8a40010e 	bge	r17,r9,50118 <___vfiprintf_internal_r+0x3fc>
   50114:	4825883a 	mov	r18,r9
   50118:	63003fcc 	andi	r12,r12,255
   5011c:	6300201c 	xori	r12,r12,128
   50120:	633fe004 	addi	r12,r12,-128
   50124:	60000126 	beq	r12,zero,5012c <___vfiprintf_internal_r+0x410>
   50128:	94800044 	addi	r18,r18,1
   5012c:	ab80008c 	andi	r14,r21,2
   50130:	70000126 	beq	r14,zero,50138 <___vfiprintf_internal_r+0x41c>
   50134:	94800084 	addi	r18,r18,2
   50138:	ad80210c 	andi	r22,r21,132
   5013c:	b001df1e 	bne	r22,zero,508bc <___vfiprintf_internal_r+0xba0>
   50140:	9c8fc83a 	sub	r7,r19,r18
   50144:	01c1dd0e 	bge	zero,r7,508bc <___vfiprintf_internal_r+0xba0>
   50148:	03000404 	movi	r12,16
   5014c:	d8811c17 	ldw	r2,1136(sp)
   50150:	61c3920e 	bge	r12,r7,50f9c <___vfiprintf_internal_r+0x1280>
   50154:	028001b4 	movhi	r10,6
   50158:	52ac5604 	addi	r10,r10,-20136
   5015c:	dc012915 	stw	r16,1188(sp)
   50160:	d9811b17 	ldw	r6,1132(sp)
   50164:	da812315 	stw	r10,1164(sp)
   50168:	00c001c4 	movi	r3,7
   5016c:	da412515 	stw	r9,1172(sp)
   50170:	db812815 	stw	r14,1184(sp)
   50174:	3821883a 	mov	r16,r7
   50178:	00000506 	br	50190 <___vfiprintf_internal_r+0x474>
   5017c:	31400084 	addi	r5,r6,2
   50180:	42000204 	addi	r8,r8,8
   50184:	200d883a 	mov	r6,r4
   50188:	843ffc04 	addi	r16,r16,-16
   5018c:	64000d0e 	bge	r12,r16,501c4 <___vfiprintf_internal_r+0x4a8>
   50190:	10800404 	addi	r2,r2,16
   50194:	31000044 	addi	r4,r6,1
   50198:	47000015 	stw	fp,0(r8)
   5019c:	43000115 	stw	r12,4(r8)
   501a0:	d8811c15 	stw	r2,1136(sp)
   501a4:	d9011b15 	stw	r4,1132(sp)
   501a8:	193ff40e 	bge	r3,r4,5017c <__alt_data_end+0xfffe907c>
   501ac:	1001b51e 	bne	r2,zero,50884 <___vfiprintf_internal_r+0xb68>
   501b0:	843ffc04 	addi	r16,r16,-16
   501b4:	000d883a 	mov	r6,zero
   501b8:	01400044 	movi	r5,1
   501bc:	d811883a 	mov	r8,sp
   501c0:	643ff316 	blt	r12,r16,50190 <__alt_data_end+0xfffe9090>
   501c4:	800f883a 	mov	r7,r16
   501c8:	da412517 	ldw	r9,1172(sp)
   501cc:	db812817 	ldw	r14,1184(sp)
   501d0:	dc012917 	ldw	r16,1188(sp)
   501d4:	dac12317 	ldw	r11,1164(sp)
   501d8:	3887883a 	add	r3,r7,r2
   501dc:	41c00115 	stw	r7,4(r8)
   501e0:	42c00015 	stw	r11,0(r8)
   501e4:	d8c11c15 	stw	r3,1136(sp)
   501e8:	d9411b15 	stw	r5,1132(sp)
   501ec:	008001c4 	movi	r2,7
   501f0:	11429316 	blt	r2,r5,50c40 <___vfiprintf_internal_r+0xf24>
   501f4:	d9011d87 	ldb	r4,1142(sp)
   501f8:	42000204 	addi	r8,r8,8
   501fc:	28800044 	addi	r2,r5,1
   50200:	2001b31e 	bne	r4,zero,508d0 <___vfiprintf_internal_r+0xbb4>
   50204:	70000c26 	beq	r14,zero,50238 <___vfiprintf_internal_r+0x51c>
   50208:	d9011d04 	addi	r4,sp,1140
   5020c:	18c00084 	addi	r3,r3,2
   50210:	41000015 	stw	r4,0(r8)
   50214:	01000084 	movi	r4,2
   50218:	41000115 	stw	r4,4(r8)
   5021c:	d8c11c15 	stw	r3,1136(sp)
   50220:	d8811b15 	stw	r2,1132(sp)
   50224:	010001c4 	movi	r4,7
   50228:	20826516 	blt	r4,r2,50bc0 <___vfiprintf_internal_r+0xea4>
   5022c:	100b883a 	mov	r5,r2
   50230:	42000204 	addi	r8,r8,8
   50234:	10800044 	addi	r2,r2,1
   50238:	01002004 	movi	r4,128
   5023c:	b1021a26 	beq	r22,r4,50aa8 <___vfiprintf_internal_r+0xd8c>
   50240:	4c6dc83a 	sub	r22,r9,r17
   50244:	0580230e 	bge	zero,r22,502d4 <___vfiprintf_internal_r+0x5b8>
   50248:	01c00404 	movi	r7,16
   5024c:	3d83300e 	bge	r7,r22,50f10 <___vfiprintf_internal_r+0x11f4>
   50250:	008001b4 	movhi	r2,6
   50254:	10ac5204 	addi	r2,r2,-20152
   50258:	d8812315 	stw	r2,1164(sp)
   5025c:	030001c4 	movi	r12,7
   50260:	00000506 	br	50278 <___vfiprintf_internal_r+0x55c>
   50264:	28800084 	addi	r2,r5,2
   50268:	42000204 	addi	r8,r8,8
   5026c:	200b883a 	mov	r5,r4
   50270:	b5bffc04 	addi	r22,r22,-16
   50274:	3d800d0e 	bge	r7,r22,502ac <___vfiprintf_internal_r+0x590>
   50278:	18c00404 	addi	r3,r3,16
   5027c:	29000044 	addi	r4,r5,1
   50280:	45c00015 	stw	r23,0(r8)
   50284:	41c00115 	stw	r7,4(r8)
   50288:	d8c11c15 	stw	r3,1136(sp)
   5028c:	d9011b15 	stw	r4,1132(sp)
   50290:	613ff40e 	bge	r12,r4,50264 <__alt_data_end+0xfffe9164>
   50294:	18019b1e 	bne	r3,zero,50904 <___vfiprintf_internal_r+0xbe8>
   50298:	b5bffc04 	addi	r22,r22,-16
   5029c:	000b883a 	mov	r5,zero
   502a0:	00800044 	movi	r2,1
   502a4:	d811883a 	mov	r8,sp
   502a8:	3dbff316 	blt	r7,r22,50278 <__alt_data_end+0xfffe9178>
   502ac:	da812317 	ldw	r10,1164(sp)
   502b0:	1d87883a 	add	r3,r3,r22
   502b4:	45800115 	stw	r22,4(r8)
   502b8:	42800015 	stw	r10,0(r8)
   502bc:	d8c11c15 	stw	r3,1136(sp)
   502c0:	d8811b15 	stw	r2,1132(sp)
   502c4:	010001c4 	movi	r4,7
   502c8:	2081dd16 	blt	r4,r2,50a40 <___vfiprintf_internal_r+0xd24>
   502cc:	42000204 	addi	r8,r8,8
   502d0:	10800044 	addi	r2,r2,1
   502d4:	da812417 	ldw	r10,1168(sp)
   502d8:	1c47883a 	add	r3,r3,r17
   502dc:	44400115 	stw	r17,4(r8)
   502e0:	42800015 	stw	r10,0(r8)
   502e4:	d8c11c15 	stw	r3,1136(sp)
   502e8:	d8811b15 	stw	r2,1132(sp)
   502ec:	010001c4 	movi	r4,7
   502f0:	2081dc0e 	bge	r4,r2,50a64 <___vfiprintf_internal_r+0xd48>
   502f4:	1802611e 	bne	r3,zero,50c7c <___vfiprintf_internal_r+0xf60>
   502f8:	d8011b15 	stw	zero,1132(sp)
   502fc:	aac0010c 	andi	r11,r21,4
   50300:	58002726 	beq	r11,zero,503a0 <___vfiprintf_internal_r+0x684>
   50304:	9ca3c83a 	sub	r17,r19,r18
   50308:	d811883a 	mov	r8,sp
   5030c:	0443510e 	bge	zero,r17,51054 <___vfiprintf_internal_r+0x1338>
   50310:	01c00404 	movi	r7,16
   50314:	3c43320e 	bge	r7,r17,50fe0 <___vfiprintf_internal_r+0x12c4>
   50318:	008001b4 	movhi	r2,6
   5031c:	10ac5604 	addi	r2,r2,-20136
   50320:	d9011b17 	ldw	r4,1132(sp)
   50324:	d8812315 	stw	r2,1164(sp)
   50328:	382d883a 	mov	r22,r7
   5032c:	054001c4 	movi	r21,7
   50330:	00000506 	br	50348 <___vfiprintf_internal_r+0x62c>
   50334:	21400084 	addi	r5,r4,2
   50338:	42000204 	addi	r8,r8,8
   5033c:	1009883a 	mov	r4,r2
   50340:	8c7ffc04 	addi	r17,r17,-16
   50344:	b4400d0e 	bge	r22,r17,5037c <___vfiprintf_internal_r+0x660>
   50348:	18c00404 	addi	r3,r3,16
   5034c:	20800044 	addi	r2,r4,1
   50350:	47000015 	stw	fp,0(r8)
   50354:	45800115 	stw	r22,4(r8)
   50358:	d8c11c15 	stw	r3,1136(sp)
   5035c:	d8811b15 	stw	r2,1132(sp)
   50360:	a8bff40e 	bge	r21,r2,50334 <__alt_data_end+0xfffe9234>
   50364:	1801ac1e 	bne	r3,zero,50a18 <___vfiprintf_internal_r+0xcfc>
   50368:	8c7ffc04 	addi	r17,r17,-16
   5036c:	0009883a 	mov	r4,zero
   50370:	01400044 	movi	r5,1
   50374:	d811883a 	mov	r8,sp
   50378:	b47ff316 	blt	r22,r17,50348 <__alt_data_end+0xfffe9248>
   5037c:	da812317 	ldw	r10,1164(sp)
   50380:	1c47883a 	add	r3,r3,r17
   50384:	44400115 	stw	r17,4(r8)
   50388:	42800015 	stw	r10,0(r8)
   5038c:	d8c11c15 	stw	r3,1136(sp)
   50390:	d9411b15 	stw	r5,1132(sp)
   50394:	008001c4 	movi	r2,7
   50398:	1141b70e 	bge	r2,r5,50a78 <___vfiprintf_internal_r+0xd5c>
   5039c:	1802cf1e 	bne	r3,zero,50edc <___vfiprintf_internal_r+0x11c0>
   503a0:	94c2ca16 	blt	r18,r19,50ecc <___vfiprintf_internal_r+0x11b0>
   503a4:	dac12217 	ldw	r11,1160(sp)
   503a8:	5c97883a 	add	r11,r11,r18
   503ac:	dac12215 	stw	r11,1160(sp)
   503b0:	d8011b15 	stw	zero,1132(sp)
   503b4:	d811883a 	mov	r8,sp
   503b8:	003e8d06 	br	4fdf0 <__alt_data_end+0xfffe8cf0>
   503bc:	d9012017 	ldw	r4,1152(sp)
   503c0:	a00b883a 	mov	r5,r20
   503c4:	004b8e00 	call	4b8e0 <__swsetup_r>
   503c8:	10002c1e 	bne	r2,zero,5047c <___vfiprintf_internal_r+0x760>
   503cc:	a0c0030b 	ldhu	r3,12(r20)
   503d0:	01000284 	movi	r4,10
   503d4:	1805883a 	mov	r2,r3
   503d8:	1080068c 	andi	r2,r2,26
   503dc:	113e731e 	bne	r2,r4,4fdac <__alt_data_end+0xfffe8cac>
   503e0:	a080038b 	ldhu	r2,14(r20)
   503e4:	113fffcc 	andi	r4,r2,65535
   503e8:	2120001c 	xori	r4,r4,32768
   503ec:	21200004 	addi	r4,r4,-32768
   503f0:	203e6e16 	blt	r4,zero,4fdac <__alt_data_end+0xfffe8cac>
   503f4:	a3001917 	ldw	r12,100(r20)
   503f8:	a2c00717 	ldw	r11,28(r20)
   503fc:	a2800917 	ldw	r10,36(r20)
   50400:	d9012017 	ldw	r4,1152(sp)
   50404:	d9c12117 	ldw	r7,1156(sp)
   50408:	02410004 	movi	r9,1024
   5040c:	18ffff4c 	andi	r3,r3,65533
   50410:	da4b883a 	add	r5,sp,r9
   50414:	b00d883a 	mov	r6,r22
   50418:	d8c1030d 	sth	r3,1036(sp)
   5041c:	db011915 	stw	r12,1124(sp)
   50420:	d881038d 	sth	r2,1038(sp)
   50424:	dac10715 	stw	r11,1052(sp)
   50428:	da810915 	stw	r10,1060(sp)
   5042c:	dec10015 	stw	sp,1024(sp)
   50430:	dec10415 	stw	sp,1040(sp)
   50434:	da410215 	stw	r9,1032(sp)
   50438:	da410515 	stw	r9,1044(sp)
   5043c:	d8010615 	stw	zero,1048(sp)
   50440:	004fd1c0 	call	4fd1c <___vfiprintf_internal_r>
   50444:	1021883a 	mov	r16,r2
   50448:	10000416 	blt	r2,zero,5045c <___vfiprintf_internal_r+0x740>
   5044c:	d9012017 	ldw	r4,1152(sp)
   50450:	d9410004 	addi	r5,sp,1024
   50454:	004d4a00 	call	4d4a0 <_fflush_r>
   50458:	1002fc1e 	bne	r2,zero,5104c <___vfiprintf_internal_r+0x1330>
   5045c:	d881030b 	ldhu	r2,1036(sp)
   50460:	1080100c 	andi	r2,r2,64
   50464:	10000326 	beq	r2,zero,50474 <___vfiprintf_internal_r+0x758>
   50468:	a080030b 	ldhu	r2,12(r20)
   5046c:	10801014 	ori	r2,r2,64
   50470:	a080030d 	sth	r2,12(r20)
   50474:	8005883a 	mov	r2,r16
   50478:	00000106 	br	50480 <___vfiprintf_internal_r+0x764>
   5047c:	00bfffc4 	movi	r2,-1
   50480:	dfc13517 	ldw	ra,1236(sp)
   50484:	df013417 	ldw	fp,1232(sp)
   50488:	ddc13317 	ldw	r23,1228(sp)
   5048c:	dd813217 	ldw	r22,1224(sp)
   50490:	dd413117 	ldw	r21,1220(sp)
   50494:	dd013017 	ldw	r20,1216(sp)
   50498:	dcc12f17 	ldw	r19,1212(sp)
   5049c:	dc812e17 	ldw	r18,1208(sp)
   504a0:	dc412d17 	ldw	r17,1204(sp)
   504a4:	dc012c17 	ldw	r16,1200(sp)
   504a8:	dec13604 	addi	sp,sp,1240
   504ac:	f800283a 	ret
   504b0:	00482640 	call	48264 <__sinit>
   504b4:	003e2b06 	br	4fd64 <__alt_data_end+0xfffe8c64>
   504b8:	04e7c83a 	sub	r19,zero,r19
   504bc:	d8812115 	stw	r2,1156(sp)
   504c0:	ad400114 	ori	r21,r21,4
   504c4:	80c00007 	ldb	r3,0(r16)
   504c8:	003e7306 	br	4fe98 <__alt_data_end+0xfffe8d98>
   504cc:	a880040c 	andi	r2,r21,16
   504d0:	1000e41e 	bne	r2,zero,50864 <___vfiprintf_internal_r+0xb48>
   504d4:	a880100c 	andi	r2,r21,64
   504d8:	1000e226 	beq	r2,zero,50864 <___vfiprintf_internal_r+0xb48>
   504dc:	da812117 	ldw	r10,1156(sp)
   504e0:	002d883a 	mov	r22,zero
   504e4:	0005883a 	mov	r2,zero
   504e8:	5480000b 	ldhu	r18,0(r10)
   504ec:	52800104 	addi	r10,r10,4
   504f0:	da812115 	stw	r10,1156(sp)
   504f4:	9009883a 	mov	r4,r18
   504f8:	003ee706 	br	50098 <__alt_data_end+0xfffe8f98>
   504fc:	da812117 	ldw	r10,1156(sp)
   50500:	00800044 	movi	r2,1
   50504:	54800017 	ldw	r18,0(r10)
   50508:	55800117 	ldw	r22,4(r10)
   5050c:	52800204 	addi	r10,r10,8
   50510:	da812115 	stw	r10,1156(sp)
   50514:	9588b03a 	or	r4,r18,r22
   50518:	003edf06 	br	50098 <__alt_data_end+0xfffe8f98>
   5051c:	02c001b4 	movhi	r11,6
   50520:	5aeb4f04 	addi	r11,r11,-21188
   50524:	d9811d85 	stb	r6,1142(sp)
   50528:	dac12615 	stw	r11,1176(sp)
   5052c:	a900080c 	andi	r4,r21,32
   50530:	d8812117 	ldw	r2,1156(sp)
   50534:	2000a526 	beq	r4,zero,507cc <___vfiprintf_internal_r+0xab0>
   50538:	da812117 	ldw	r10,1156(sp)
   5053c:	14800017 	ldw	r18,0(r2)
   50540:	15800117 	ldw	r22,4(r2)
   50544:	52800204 	addi	r10,r10,8
   50548:	da812115 	stw	r10,1156(sp)
   5054c:	a880004c 	andi	r2,r21,1
   50550:	1001d926 	beq	r2,zero,50cb8 <___vfiprintf_internal_r+0xf9c>
   50554:	9588b03a 	or	r4,r18,r22
   50558:	20024426 	beq	r4,zero,50e6c <___vfiprintf_internal_r+0x1150>
   5055c:	00800c04 	movi	r2,48
   50560:	d8811d05 	stb	r2,1140(sp)
   50564:	d8c11d45 	stb	r3,1141(sp)
   50568:	ad400094 	ori	r21,r21,2
   5056c:	00800084 	movi	r2,2
   50570:	003ec906 	br	50098 <__alt_data_end+0xfffe8f98>
   50574:	da812117 	ldw	r10,1156(sp)
   50578:	04800044 	movi	r18,1
   5057c:	dac10004 	addi	r11,sp,1024
   50580:	50800017 	ldw	r2,0(r10)
   50584:	52800104 	addi	r10,r10,4
   50588:	d8011d85 	stb	zero,1142(sp)
   5058c:	d8810005 	stb	r2,1024(sp)
   50590:	da812115 	stw	r10,1156(sp)
   50594:	9023883a 	mov	r17,r18
   50598:	dac12415 	stw	r11,1168(sp)
   5059c:	0013883a 	mov	r9,zero
   505a0:	003ee206 	br	5012c <__alt_data_end+0xfffe902c>
   505a4:	ad402014 	ori	r21,r21,128
   505a8:	80c00007 	ldb	r3,0(r16)
   505ac:	003e3a06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   505b0:	8015883a 	mov	r10,r16
   505b4:	0027883a 	mov	r19,zero
   505b8:	18bff404 	addi	r2,r3,-48
   505bc:	50c00007 	ldb	r3,0(r10)
   505c0:	9cc002a4 	muli	r19,r19,10
   505c4:	84000044 	addi	r16,r16,1
   505c8:	8015883a 	mov	r10,r16
   505cc:	98a7883a 	add	r19,r19,r2
   505d0:	18bff404 	addi	r2,r3,-48
   505d4:	28bff92e 	bgeu	r5,r2,505bc <__alt_data_end+0xfffe94bc>
   505d8:	003e3006 	br	4fe9c <__alt_data_end+0xfffe8d9c>
   505dc:	ad400414 	ori	r21,r21,16
   505e0:	d9811d85 	stb	r6,1142(sp)
   505e4:	a880080c 	andi	r2,r21,32
   505e8:	d8c12117 	ldw	r3,1156(sp)
   505ec:	10004b26 	beq	r2,zero,5071c <___vfiprintf_internal_r+0xa00>
   505f0:	da812117 	ldw	r10,1156(sp)
   505f4:	18800117 	ldw	r2,4(r3)
   505f8:	1c800017 	ldw	r18,0(r3)
   505fc:	52800204 	addi	r10,r10,8
   50600:	da812115 	stw	r10,1156(sp)
   50604:	102d883a 	mov	r22,r2
   50608:	1001f116 	blt	r2,zero,50dd0 <___vfiprintf_internal_r+0x10b4>
   5060c:	db011d83 	ldbu	r12,1142(sp)
   50610:	4823883a 	mov	r17,r9
   50614:	00800044 	movi	r2,1
   50618:	9588b03a 	or	r4,r18,r22
   5061c:	003ea106 	br	500a4 <__alt_data_end+0xfffe8fa4>
   50620:	80c00007 	ldb	r3,0(r16)
   50624:	82800044 	addi	r10,r16,1
   50628:	1b027f26 	beq	r3,r12,51028 <___vfiprintf_internal_r+0x130c>
   5062c:	18bff404 	addi	r2,r3,-48
   50630:	5021883a 	mov	r16,r10
   50634:	0013883a 	mov	r9,zero
   50638:	28be1836 	bltu	r5,r2,4fe9c <__alt_data_end+0xfffe8d9c>
   5063c:	80c00007 	ldb	r3,0(r16)
   50640:	4a4002a4 	muli	r9,r9,10
   50644:	84000044 	addi	r16,r16,1
   50648:	1253883a 	add	r9,r2,r9
   5064c:	18bff404 	addi	r2,r3,-48
   50650:	28bffa2e 	bgeu	r5,r2,5063c <__alt_data_end+0xfffe953c>
   50654:	483e110e 	bge	r9,zero,4fe9c <__alt_data_end+0xfffe8d9c>
   50658:	027fffc4 	movi	r9,-1
   5065c:	003e0f06 	br	4fe9c <__alt_data_end+0xfffe8d9c>
   50660:	d9811d85 	stb	r6,1142(sp)
   50664:	a880080c 	andi	r2,r21,32
   50668:	1001ee26 	beq	r2,zero,50e24 <___vfiprintf_internal_r+0x1108>
   5066c:	da812117 	ldw	r10,1156(sp)
   50670:	dac12217 	ldw	r11,1160(sp)
   50674:	50800017 	ldw	r2,0(r10)
   50678:	5807d7fa 	srai	r3,r11,31
   5067c:	52800104 	addi	r10,r10,4
   50680:	da812115 	stw	r10,1156(sp)
   50684:	12c00015 	stw	r11,0(r2)
   50688:	10c00115 	stw	r3,4(r2)
   5068c:	003dd806 	br	4fdf0 <__alt_data_end+0xfffe8cf0>
   50690:	30803fcc 	andi	r2,r6,255
   50694:	1080201c 	xori	r2,r2,128
   50698:	10bfe004 	addi	r2,r2,-128
   5069c:	1001df1e 	bne	r2,zero,50e1c <___vfiprintf_internal_r+0x1100>
   506a0:	01800804 	movi	r6,32
   506a4:	80c00007 	ldb	r3,0(r16)
   506a8:	003dfb06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   506ac:	da812117 	ldw	r10,1156(sp)
   506b0:	dac12117 	ldw	r11,1156(sp)
   506b4:	d8011d85 	stb	zero,1142(sp)
   506b8:	52800017 	ldw	r10,0(r10)
   506bc:	5d800104 	addi	r22,r11,4
   506c0:	da812415 	stw	r10,1168(sp)
   506c4:	50023b26 	beq	r10,zero,50fb4 <___vfiprintf_internal_r+0x1298>
   506c8:	d9012417 	ldw	r4,1168(sp)
   506cc:	48021f16 	blt	r9,zero,50f4c <___vfiprintf_internal_r+0x1230>
   506d0:	480d883a 	mov	r6,r9
   506d4:	000b883a 	mov	r5,zero
   506d8:	da012a15 	stw	r8,1192(sp)
   506dc:	da412b15 	stw	r9,1196(sp)
   506e0:	0048bcc0 	call	48bcc <memchr>
   506e4:	da012a17 	ldw	r8,1192(sp)
   506e8:	da412b17 	ldw	r9,1196(sp)
   506ec:	10024726 	beq	r2,zero,5100c <___vfiprintf_internal_r+0x12f0>
   506f0:	d8c12417 	ldw	r3,1168(sp)
   506f4:	10e3c83a 	sub	r17,r2,r3
   506f8:	4c41f616 	blt	r9,r17,50ed4 <___vfiprintf_internal_r+0x11b8>
   506fc:	db011d83 	ldbu	r12,1142(sp)
   50700:	dd812115 	stw	r22,1156(sp)
   50704:	0013883a 	mov	r9,zero
   50708:	003e8006 	br	5010c <__alt_data_end+0xfffe900c>
   5070c:	d9811d85 	stb	r6,1142(sp)
   50710:	a880080c 	andi	r2,r21,32
   50714:	d8c12117 	ldw	r3,1156(sp)
   50718:	103fb51e 	bne	r2,zero,505f0 <__alt_data_end+0xfffe94f0>
   5071c:	a880040c 	andi	r2,r21,16
   50720:	10015e1e 	bne	r2,zero,50c9c <___vfiprintf_internal_r+0xf80>
   50724:	a880100c 	andi	r2,r21,64
   50728:	10015c26 	beq	r2,zero,50c9c <___vfiprintf_internal_r+0xf80>
   5072c:	1c80000f 	ldh	r18,0(r3)
   50730:	da812117 	ldw	r10,1156(sp)
   50734:	902dd7fa 	srai	r22,r18,31
   50738:	52800104 	addi	r10,r10,4
   5073c:	da812115 	stw	r10,1156(sp)
   50740:	b005883a 	mov	r2,r22
   50744:	003fb006 	br	50608 <__alt_data_end+0xfffe9508>
   50748:	da812117 	ldw	r10,1156(sp)
   5074c:	00800c04 	movi	r2,48
   50750:	02c001b4 	movhi	r11,6
   50754:	54800017 	ldw	r18,0(r10)
   50758:	d8811d05 	stb	r2,1140(sp)
   5075c:	52800104 	addi	r10,r10,4
   50760:	00801e04 	movi	r2,120
   50764:	5aeb5404 	addi	r11,r11,-21168
   50768:	d8811d45 	stb	r2,1141(sp)
   5076c:	002d883a 	mov	r22,zero
   50770:	ad400094 	ori	r21,r21,2
   50774:	da812115 	stw	r10,1156(sp)
   50778:	dac12615 	stw	r11,1176(sp)
   5077c:	00800084 	movi	r2,2
   50780:	9009883a 	mov	r4,r18
   50784:	003e4406 	br	50098 <__alt_data_end+0xfffe8f98>
   50788:	ad400814 	ori	r21,r21,32
   5078c:	80c00007 	ldb	r3,0(r16)
   50790:	003dc106 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50794:	ad401014 	ori	r21,r21,64
   50798:	80c00007 	ldb	r3,0(r16)
   5079c:	003dbe06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   507a0:	80c00007 	ldb	r3,0(r16)
   507a4:	19c1de26 	beq	r3,r7,50f20 <___vfiprintf_internal_r+0x1204>
   507a8:	ad400414 	ori	r21,r21,16
   507ac:	003dba06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   507b0:	008001b4 	movhi	r2,6
   507b4:	10ab5404 	addi	r2,r2,-21168
   507b8:	d8812615 	stw	r2,1176(sp)
   507bc:	d9811d85 	stb	r6,1142(sp)
   507c0:	a900080c 	andi	r4,r21,32
   507c4:	d8812117 	ldw	r2,1156(sp)
   507c8:	203f5b1e 	bne	r4,zero,50538 <__alt_data_end+0xfffe9438>
   507cc:	a900040c 	andi	r4,r21,16
   507d0:	2001a826 	beq	r4,zero,50e74 <___vfiprintf_internal_r+0x1158>
   507d4:	dac12117 	ldw	r11,1156(sp)
   507d8:	14800017 	ldw	r18,0(r2)
   507dc:	002d883a 	mov	r22,zero
   507e0:	5ac00104 	addi	r11,r11,4
   507e4:	dac12115 	stw	r11,1156(sp)
   507e8:	003f5806 	br	5054c <__alt_data_end+0xfffe944c>
   507ec:	da812117 	ldw	r10,1156(sp)
   507f0:	54c00017 	ldw	r19,0(r10)
   507f4:	50800104 	addi	r2,r10,4
   507f8:	983f2f16 	blt	r19,zero,504b8 <__alt_data_end+0xfffe93b8>
   507fc:	d8812115 	stw	r2,1156(sp)
   50800:	80c00007 	ldb	r3,0(r16)
   50804:	003da406 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50808:	01800ac4 	movi	r6,43
   5080c:	80c00007 	ldb	r3,0(r16)
   50810:	003da106 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50814:	ad400054 	ori	r21,r21,1
   50818:	80c00007 	ldb	r3,0(r16)
   5081c:	003d9e06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50820:	d9811d85 	stb	r6,1142(sp)
   50824:	18007126 	beq	r3,zero,509ec <___vfiprintf_internal_r+0xcd0>
   50828:	04800044 	movi	r18,1
   5082c:	d8c10005 	stb	r3,1024(sp)
   50830:	d8c10004 	addi	r3,sp,1024
   50834:	d8011d85 	stb	zero,1142(sp)
   50838:	9023883a 	mov	r17,r18
   5083c:	d8c12415 	stw	r3,1168(sp)
   50840:	003f5606 	br	5059c <__alt_data_end+0xfffe949c>
   50844:	dac12117 	ldw	r11,1156(sp)
   50848:	002d883a 	mov	r22,zero
   5084c:	00800044 	movi	r2,1
   50850:	5c800017 	ldw	r18,0(r11)
   50854:	5ac00104 	addi	r11,r11,4
   50858:	dac12115 	stw	r11,1156(sp)
   5085c:	9009883a 	mov	r4,r18
   50860:	003e0d06 	br	50098 <__alt_data_end+0xfffe8f98>
   50864:	dac12117 	ldw	r11,1156(sp)
   50868:	002d883a 	mov	r22,zero
   5086c:	0005883a 	mov	r2,zero
   50870:	5c800017 	ldw	r18,0(r11)
   50874:	5ac00104 	addi	r11,r11,4
   50878:	dac12115 	stw	r11,1156(sp)
   5087c:	9009883a 	mov	r4,r18
   50880:	003e0506 	br	50098 <__alt_data_end+0xfffe8f98>
   50884:	d9012017 	ldw	r4,1152(sp)
   50888:	a00b883a 	mov	r5,r20
   5088c:	d9811a04 	addi	r6,sp,1128
   50890:	d8c12a15 	stw	r3,1192(sp)
   50894:	db012b15 	stw	r12,1196(sp)
   50898:	004fc080 	call	4fc08 <__sprint_r.part.0>
   5089c:	d8c12a17 	ldw	r3,1192(sp)
   508a0:	db012b17 	ldw	r12,1196(sp)
   508a4:	1000571e 	bne	r2,zero,50a04 <___vfiprintf_internal_r+0xce8>
   508a8:	d9811b17 	ldw	r6,1132(sp)
   508ac:	d8811c17 	ldw	r2,1136(sp)
   508b0:	d811883a 	mov	r8,sp
   508b4:	31400044 	addi	r5,r6,1
   508b8:	003e3306 	br	50188 <__alt_data_end+0xfffe9088>
   508bc:	d9411b17 	ldw	r5,1132(sp)
   508c0:	d8c11c17 	ldw	r3,1136(sp)
   508c4:	28800044 	addi	r2,r5,1
   508c8:	d9011d87 	ldb	r4,1142(sp)
   508cc:	203e4d26 	beq	r4,zero,50204 <__alt_data_end+0xfffe9104>
   508d0:	01000044 	movi	r4,1
   508d4:	d9411d84 	addi	r5,sp,1142
   508d8:	1907883a 	add	r3,r3,r4
   508dc:	41400015 	stw	r5,0(r8)
   508e0:	41000115 	stw	r4,4(r8)
   508e4:	d8c11c15 	stw	r3,1136(sp)
   508e8:	d8811b15 	stw	r2,1132(sp)
   508ec:	014001c4 	movi	r5,7
   508f0:	2880aa16 	blt	r5,r2,50b9c <___vfiprintf_internal_r+0xe80>
   508f4:	100b883a 	mov	r5,r2
   508f8:	42000204 	addi	r8,r8,8
   508fc:	10800044 	addi	r2,r2,1
   50900:	003e4006 	br	50204 <__alt_data_end+0xfffe9104>
   50904:	d9012017 	ldw	r4,1152(sp)
   50908:	a00b883a 	mov	r5,r20
   5090c:	d9811a04 	addi	r6,sp,1128
   50910:	d9c12a15 	stw	r7,1192(sp)
   50914:	db012b15 	stw	r12,1196(sp)
   50918:	004fc080 	call	4fc08 <__sprint_r.part.0>
   5091c:	d9c12a17 	ldw	r7,1192(sp)
   50920:	db012b17 	ldw	r12,1196(sp)
   50924:	1000371e 	bne	r2,zero,50a04 <___vfiprintf_internal_r+0xce8>
   50928:	d9411b17 	ldw	r5,1132(sp)
   5092c:	d8c11c17 	ldw	r3,1136(sp)
   50930:	d811883a 	mov	r8,sp
   50934:	28800044 	addi	r2,r5,1
   50938:	003e4d06 	br	50270 <__alt_data_end+0xfffe9170>
   5093c:	10803fcc 	andi	r2,r2,255
   50940:	00c00044 	movi	r3,1
   50944:	10fddf1e 	bne	r2,r3,500c4 <__alt_data_end+0xfffe8fc4>
   50948:	b000021e 	bne	r22,zero,50954 <___vfiprintf_internal_r+0xc38>
   5094c:	00800244 	movi	r2,9
   50950:	1480202e 	bgeu	r2,r18,509d4 <___vfiprintf_internal_r+0xcb8>
   50954:	dc012515 	stw	r16,1172(sp)
   50958:	dc410a04 	addi	r17,sp,1064
   5095c:	9021883a 	mov	r16,r18
   50960:	da012415 	stw	r8,1168(sp)
   50964:	b025883a 	mov	r18,r22
   50968:	da412315 	stw	r9,1164(sp)
   5096c:	602d883a 	mov	r22,r12
   50970:	8009883a 	mov	r4,r16
   50974:	900b883a 	mov	r5,r18
   50978:	01800284 	movi	r6,10
   5097c:	000f883a 	mov	r7,zero
   50980:	0051d180 	call	51d18 <__umoddi3>
   50984:	10800c04 	addi	r2,r2,48
   50988:	8c7fffc4 	addi	r17,r17,-1
   5098c:	8009883a 	mov	r4,r16
   50990:	900b883a 	mov	r5,r18
   50994:	01800284 	movi	r6,10
   50998:	000f883a 	mov	r7,zero
   5099c:	88800005 	stb	r2,0(r17)
   509a0:	00517580 	call	51758 <__udivdi3>
   509a4:	1021883a 	mov	r16,r2
   509a8:	10c4b03a 	or	r2,r2,r3
   509ac:	1825883a 	mov	r18,r3
   509b0:	103fef1e 	bne	r2,zero,50970 <__alt_data_end+0xfffe9870>
   509b4:	da811e17 	ldw	r10,1144(sp)
   509b8:	da012417 	ldw	r8,1168(sp)
   509bc:	da412317 	ldw	r9,1164(sp)
   509c0:	dc412415 	stw	r17,1168(sp)
   509c4:	b019883a 	mov	r12,r22
   509c8:	dc012517 	ldw	r16,1172(sp)
   509cc:	5463c83a 	sub	r17,r10,r17
   509d0:	003dce06 	br	5010c <__alt_data_end+0xfffe900c>
   509d4:	94800c04 	addi	r18,r18,48
   509d8:	d8c109c4 	addi	r3,sp,1063
   509dc:	dc8109c5 	stb	r18,1063(sp)
   509e0:	dc412717 	ldw	r17,1180(sp)
   509e4:	d8c12415 	stw	r3,1168(sp)
   509e8:	003dc806 	br	5010c <__alt_data_end+0xfffe900c>
   509ec:	d8811c17 	ldw	r2,1136(sp)
   509f0:	10000426 	beq	r2,zero,50a04 <___vfiprintf_internal_r+0xce8>
   509f4:	d9012017 	ldw	r4,1152(sp)
   509f8:	a00b883a 	mov	r5,r20
   509fc:	d9811a04 	addi	r6,sp,1128
   50a00:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50a04:	a080030b 	ldhu	r2,12(r20)
   50a08:	1080100c 	andi	r2,r2,64
   50a0c:	103e9b1e 	bne	r2,zero,5047c <__alt_data_end+0xfffe937c>
   50a10:	d8812217 	ldw	r2,1160(sp)
   50a14:	003e9a06 	br	50480 <__alt_data_end+0xfffe9380>
   50a18:	d9012017 	ldw	r4,1152(sp)
   50a1c:	a00b883a 	mov	r5,r20
   50a20:	d9811a04 	addi	r6,sp,1128
   50a24:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50a28:	103ff61e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50a2c:	d9011b17 	ldw	r4,1132(sp)
   50a30:	d8c11c17 	ldw	r3,1136(sp)
   50a34:	d811883a 	mov	r8,sp
   50a38:	21400044 	addi	r5,r4,1
   50a3c:	003e4006 	br	50340 <__alt_data_end+0xfffe9240>
   50a40:	1800d61e 	bne	r3,zero,50d9c <___vfiprintf_internal_r+0x1080>
   50a44:	dac12417 	ldw	r11,1168(sp)
   50a48:	00800044 	movi	r2,1
   50a4c:	dc400115 	stw	r17,4(sp)
   50a50:	dac00015 	stw	r11,0(sp)
   50a54:	dc411c15 	stw	r17,1136(sp)
   50a58:	d8811b15 	stw	r2,1132(sp)
   50a5c:	8807883a 	mov	r3,r17
   50a60:	d811883a 	mov	r8,sp
   50a64:	42000204 	addi	r8,r8,8
   50a68:	aac0010c 	andi	r11,r21,4
   50a6c:	58000226 	beq	r11,zero,50a78 <___vfiprintf_internal_r+0xd5c>
   50a70:	9ca3c83a 	sub	r17,r19,r18
   50a74:	047e2616 	blt	zero,r17,50310 <__alt_data_end+0xfffe9210>
   50a78:	94c0010e 	bge	r18,r19,50a80 <___vfiprintf_internal_r+0xd64>
   50a7c:	9825883a 	mov	r18,r19
   50a80:	da812217 	ldw	r10,1160(sp)
   50a84:	5495883a 	add	r10,r10,r18
   50a88:	da812215 	stw	r10,1160(sp)
   50a8c:	183e4826 	beq	r3,zero,503b0 <__alt_data_end+0xfffe92b0>
   50a90:	d9012017 	ldw	r4,1152(sp)
   50a94:	a00b883a 	mov	r5,r20
   50a98:	d9811a04 	addi	r6,sp,1128
   50a9c:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50aa0:	103e4326 	beq	r2,zero,503b0 <__alt_data_end+0xfffe92b0>
   50aa4:	003fd706 	br	50a04 <__alt_data_end+0xfffe9904>
   50aa8:	9cadc83a 	sub	r22,r19,r18
   50aac:	05bde40e 	bge	zero,r22,50240 <__alt_data_end+0xfffe9140>
   50ab0:	03000404 	movi	r12,16
   50ab4:	6581500e 	bge	r12,r22,50ff8 <___vfiprintf_internal_r+0x12dc>
   50ab8:	008001b4 	movhi	r2,6
   50abc:	10ac5204 	addi	r2,r2,-20152
   50ac0:	d8812315 	stw	r2,1164(sp)
   50ac4:	8005883a 	mov	r2,r16
   50ac8:	038001c4 	movi	r14,7
   50acc:	b021883a 	mov	r16,r22
   50ad0:	da412515 	stw	r9,1172(sp)
   50ad4:	102d883a 	mov	r22,r2
   50ad8:	00000506 	br	50af0 <___vfiprintf_internal_r+0xdd4>
   50adc:	29000084 	addi	r4,r5,2
   50ae0:	42000204 	addi	r8,r8,8
   50ae4:	100b883a 	mov	r5,r2
   50ae8:	843ffc04 	addi	r16,r16,-16
   50aec:	64000d0e 	bge	r12,r16,50b24 <___vfiprintf_internal_r+0xe08>
   50af0:	18c00404 	addi	r3,r3,16
   50af4:	28800044 	addi	r2,r5,1
   50af8:	45c00015 	stw	r23,0(r8)
   50afc:	43000115 	stw	r12,4(r8)
   50b00:	d8c11c15 	stw	r3,1136(sp)
   50b04:	d8811b15 	stw	r2,1132(sp)
   50b08:	70bff40e 	bge	r14,r2,50adc <__alt_data_end+0xfffe99dc>
   50b0c:	1800151e 	bne	r3,zero,50b64 <___vfiprintf_internal_r+0xe48>
   50b10:	843ffc04 	addi	r16,r16,-16
   50b14:	000b883a 	mov	r5,zero
   50b18:	01000044 	movi	r4,1
   50b1c:	d811883a 	mov	r8,sp
   50b20:	643ff316 	blt	r12,r16,50af0 <__alt_data_end+0xfffe99f0>
   50b24:	da412517 	ldw	r9,1172(sp)
   50b28:	b005883a 	mov	r2,r22
   50b2c:	802d883a 	mov	r22,r16
   50b30:	1021883a 	mov	r16,r2
   50b34:	da812317 	ldw	r10,1164(sp)
   50b38:	1d87883a 	add	r3,r3,r22
   50b3c:	45800115 	stw	r22,4(r8)
   50b40:	42800015 	stw	r10,0(r8)
   50b44:	d8c11c15 	stw	r3,1136(sp)
   50b48:	d9011b15 	stw	r4,1132(sp)
   50b4c:	008001c4 	movi	r2,7
   50b50:	11008d16 	blt	r2,r4,50d88 <___vfiprintf_internal_r+0x106c>
   50b54:	42000204 	addi	r8,r8,8
   50b58:	20800044 	addi	r2,r4,1
   50b5c:	200b883a 	mov	r5,r4
   50b60:	003db706 	br	50240 <__alt_data_end+0xfffe9140>
   50b64:	d9012017 	ldw	r4,1152(sp)
   50b68:	a00b883a 	mov	r5,r20
   50b6c:	d9811a04 	addi	r6,sp,1128
   50b70:	db012b15 	stw	r12,1196(sp)
   50b74:	db812a15 	stw	r14,1192(sp)
   50b78:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50b7c:	db012b17 	ldw	r12,1196(sp)
   50b80:	db812a17 	ldw	r14,1192(sp)
   50b84:	103f9f1e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50b88:	d9411b17 	ldw	r5,1132(sp)
   50b8c:	d8c11c17 	ldw	r3,1136(sp)
   50b90:	d811883a 	mov	r8,sp
   50b94:	29000044 	addi	r4,r5,1
   50b98:	003fd306 	br	50ae8 <__alt_data_end+0xfffe99e8>
   50b9c:	18006c1e 	bne	r3,zero,50d50 <___vfiprintf_internal_r+0x1034>
   50ba0:	70004f26 	beq	r14,zero,50ce0 <___vfiprintf_internal_r+0xfc4>
   50ba4:	d8811d04 	addi	r2,sp,1140
   50ba8:	00c00084 	movi	r3,2
   50bac:	d8800015 	stw	r2,0(sp)
   50bb0:	d8c00115 	stw	r3,4(sp)
   50bb4:	2005883a 	mov	r2,r4
   50bb8:	d811883a 	mov	r8,sp
   50bbc:	003d9b06 	br	5022c <__alt_data_end+0xfffe912c>
   50bc0:	1800571e 	bne	r3,zero,50d20 <___vfiprintf_internal_r+0x1004>
   50bc4:	000b883a 	mov	r5,zero
   50bc8:	00800044 	movi	r2,1
   50bcc:	d811883a 	mov	r8,sp
   50bd0:	003d9906 	br	50238 <__alt_data_end+0xfffe9138>
   50bd4:	10803fcc 	andi	r2,r2,255
   50bd8:	1000251e 	bne	r2,zero,50c70 <___vfiprintf_internal_r+0xf54>
   50bdc:	a880004c 	andi	r2,r21,1
   50be0:	10007826 	beq	r2,zero,50dc4 <___vfiprintf_internal_r+0x10a8>
   50be4:	00800c04 	movi	r2,48
   50be8:	d8c109c4 	addi	r3,sp,1063
   50bec:	d88109c5 	stb	r2,1063(sp)
   50bf0:	dc412717 	ldw	r17,1180(sp)
   50bf4:	d8c12415 	stw	r3,1168(sp)
   50bf8:	003d4406 	br	5010c <__alt_data_end+0xfffe900c>
   50bfc:	d9012617 	ldw	r4,1176(sp)
   50c00:	dc410a04 	addi	r17,sp,1064
   50c04:	908003cc 	andi	r2,r18,15
   50c08:	b006973a 	slli	r3,r22,28
   50c0c:	2085883a 	add	r2,r4,r2
   50c10:	9024d13a 	srli	r18,r18,4
   50c14:	10800003 	ldbu	r2,0(r2)
   50c18:	b02cd13a 	srli	r22,r22,4
   50c1c:	8c7fffc4 	addi	r17,r17,-1
   50c20:	1ca4b03a 	or	r18,r3,r18
   50c24:	88800005 	stb	r2,0(r17)
   50c28:	9584b03a 	or	r2,r18,r22
   50c2c:	103ff51e 	bne	r2,zero,50c04 <__alt_data_end+0xfffe9b04>
   50c30:	dac11e17 	ldw	r11,1144(sp)
   50c34:	dc412415 	stw	r17,1168(sp)
   50c38:	5c63c83a 	sub	r17,r11,r17
   50c3c:	003d3306 	br	5010c <__alt_data_end+0xfffe900c>
   50c40:	1800941e 	bne	r3,zero,50e94 <___vfiprintf_internal_r+0x1178>
   50c44:	d8811d87 	ldb	r2,1142(sp)
   50c48:	10006b26 	beq	r2,zero,50df8 <___vfiprintf_internal_r+0x10dc>
   50c4c:	00c00044 	movi	r3,1
   50c50:	d9011d84 	addi	r4,sp,1142
   50c54:	1805883a 	mov	r2,r3
   50c58:	d9000015 	stw	r4,0(sp)
   50c5c:	d8c00115 	stw	r3,4(sp)
   50c60:	d811883a 	mov	r8,sp
   50c64:	003f2306 	br	508f4 <__alt_data_end+0xfffe97f4>
   50c68:	8023883a 	mov	r17,r16
   50c6c:	003c7d06 	br	4fe64 <__alt_data_end+0xfffe8d64>
   50c70:	da810a04 	addi	r10,sp,1064
   50c74:	da812415 	stw	r10,1168(sp)
   50c78:	003d2406 	br	5010c <__alt_data_end+0xfffe900c>
   50c7c:	d9012017 	ldw	r4,1152(sp)
   50c80:	a00b883a 	mov	r5,r20
   50c84:	d9811a04 	addi	r6,sp,1128
   50c88:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50c8c:	103f5d1e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50c90:	d8c11c17 	ldw	r3,1136(sp)
   50c94:	d811883a 	mov	r8,sp
   50c98:	003f7306 	br	50a68 <__alt_data_end+0xfffe9968>
   50c9c:	1c800017 	ldw	r18,0(r3)
   50ca0:	dac12117 	ldw	r11,1156(sp)
   50ca4:	902dd7fa 	srai	r22,r18,31
   50ca8:	5ac00104 	addi	r11,r11,4
   50cac:	dac12115 	stw	r11,1156(sp)
   50cb0:	b005883a 	mov	r2,r22
   50cb4:	003e5406 	br	50608 <__alt_data_end+0xfffe9508>
   50cb8:	00800084 	movi	r2,2
   50cbc:	9588b03a 	or	r4,r18,r22
   50cc0:	003cf506 	br	50098 <__alt_data_end+0xfffe8f98>
   50cc4:	d9012017 	ldw	r4,1152(sp)
   50cc8:	a00b883a 	mov	r5,r20
   50ccc:	d9811a04 	addi	r6,sp,1128
   50cd0:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50cd4:	103f4b1e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50cd8:	d811883a 	mov	r8,sp
   50cdc:	003cd106 	br	50024 <__alt_data_end+0xfffe8f24>
   50ce0:	000b883a 	mov	r5,zero
   50ce4:	2005883a 	mov	r2,r4
   50ce8:	d811883a 	mov	r8,sp
   50cec:	003d5206 	br	50238 <__alt_data_end+0xfffe9138>
   50cf0:	10803fcc 	andi	r2,r2,255
   50cf4:	1080201c 	xori	r2,r2,128
   50cf8:	10bfe004 	addi	r2,r2,-128
   50cfc:	01000c04 	movi	r4,48
   50d00:	11008e26 	beq	r2,r4,50f3c <___vfiprintf_internal_r+0x1220>
   50d04:	da812417 	ldw	r10,1168(sp)
   50d08:	dac11e17 	ldw	r11,1144(sp)
   50d0c:	193fffc5 	stb	r4,-1(r3)
   50d10:	52bfffc4 	addi	r10,r10,-1
   50d14:	da812415 	stw	r10,1168(sp)
   50d18:	5aa3c83a 	sub	r17,r11,r10
   50d1c:	003cfb06 	br	5010c <__alt_data_end+0xfffe900c>
   50d20:	d9012017 	ldw	r4,1152(sp)
   50d24:	a00b883a 	mov	r5,r20
   50d28:	d9811a04 	addi	r6,sp,1128
   50d2c:	da412b15 	stw	r9,1196(sp)
   50d30:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50d34:	da412b17 	ldw	r9,1196(sp)
   50d38:	103f321e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50d3c:	d9411b17 	ldw	r5,1132(sp)
   50d40:	d8c11c17 	ldw	r3,1136(sp)
   50d44:	d811883a 	mov	r8,sp
   50d48:	28800044 	addi	r2,r5,1
   50d4c:	003d3a06 	br	50238 <__alt_data_end+0xfffe9138>
   50d50:	d9012017 	ldw	r4,1152(sp)
   50d54:	a00b883a 	mov	r5,r20
   50d58:	d9811a04 	addi	r6,sp,1128
   50d5c:	da412b15 	stw	r9,1196(sp)
   50d60:	db812a15 	stw	r14,1192(sp)
   50d64:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50d68:	da412b17 	ldw	r9,1196(sp)
   50d6c:	db812a17 	ldw	r14,1192(sp)
   50d70:	103f241e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50d74:	d9411b17 	ldw	r5,1132(sp)
   50d78:	d8c11c17 	ldw	r3,1136(sp)
   50d7c:	d811883a 	mov	r8,sp
   50d80:	28800044 	addi	r2,r5,1
   50d84:	003d1f06 	br	50204 <__alt_data_end+0xfffe9104>
   50d88:	1800781e 	bne	r3,zero,50f6c <___vfiprintf_internal_r+0x1250>
   50d8c:	000b883a 	mov	r5,zero
   50d90:	00800044 	movi	r2,1
   50d94:	d811883a 	mov	r8,sp
   50d98:	003d2906 	br	50240 <__alt_data_end+0xfffe9140>
   50d9c:	d9012017 	ldw	r4,1152(sp)
   50da0:	a00b883a 	mov	r5,r20
   50da4:	d9811a04 	addi	r6,sp,1128
   50da8:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50dac:	103f151e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50db0:	d8811b17 	ldw	r2,1132(sp)
   50db4:	d8c11c17 	ldw	r3,1136(sp)
   50db8:	d811883a 	mov	r8,sp
   50dbc:	10800044 	addi	r2,r2,1
   50dc0:	003d4406 	br	502d4 <__alt_data_end+0xfffe91d4>
   50dc4:	dac10a04 	addi	r11,sp,1064
   50dc8:	dac12415 	stw	r11,1168(sp)
   50dcc:	003ccf06 	br	5010c <__alt_data_end+0xfffe900c>
   50dd0:	04a5c83a 	sub	r18,zero,r18
   50dd4:	9004c03a 	cmpne	r2,r18,zero
   50dd8:	05adc83a 	sub	r22,zero,r22
   50ddc:	b0adc83a 	sub	r22,r22,r2
   50de0:	03000b44 	movi	r12,45
   50de4:	db011d85 	stb	r12,1142(sp)
   50de8:	4823883a 	mov	r17,r9
   50dec:	00800044 	movi	r2,1
   50df0:	9588b03a 	or	r4,r18,r22
   50df4:	003cab06 	br	500a4 <__alt_data_end+0xfffe8fa4>
   50df8:	000b883a 	mov	r5,zero
   50dfc:	00800044 	movi	r2,1
   50e00:	d811883a 	mov	r8,sp
   50e04:	703d0c26 	beq	r14,zero,50238 <__alt_data_end+0xfffe9138>
   50e08:	00c00084 	movi	r3,2
   50e0c:	d9011d04 	addi	r4,sp,1140
   50e10:	d9000015 	stw	r4,0(sp)
   50e14:	d8c00115 	stw	r3,4(sp)
   50e18:	003d0406 	br	5022c <__alt_data_end+0xfffe912c>
   50e1c:	80c00007 	ldb	r3,0(r16)
   50e20:	003c1d06 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50e24:	a880040c 	andi	r2,r21,16
   50e28:	1000091e 	bne	r2,zero,50e50 <___vfiprintf_internal_r+0x1134>
   50e2c:	aac0100c 	andi	r11,r21,64
   50e30:	58000726 	beq	r11,zero,50e50 <___vfiprintf_internal_r+0x1134>
   50e34:	da812117 	ldw	r10,1156(sp)
   50e38:	dac12217 	ldw	r11,1160(sp)
   50e3c:	50800017 	ldw	r2,0(r10)
   50e40:	52800104 	addi	r10,r10,4
   50e44:	da812115 	stw	r10,1156(sp)
   50e48:	12c0000d 	sth	r11,0(r2)
   50e4c:	003be806 	br	4fdf0 <__alt_data_end+0xfffe8cf0>
   50e50:	da812117 	ldw	r10,1156(sp)
   50e54:	dac12217 	ldw	r11,1160(sp)
   50e58:	50800017 	ldw	r2,0(r10)
   50e5c:	52800104 	addi	r10,r10,4
   50e60:	da812115 	stw	r10,1156(sp)
   50e64:	12c00015 	stw	r11,0(r2)
   50e68:	003be106 	br	4fdf0 <__alt_data_end+0xfffe8cf0>
   50e6c:	00800084 	movi	r2,2
   50e70:	003c8906 	br	50098 <__alt_data_end+0xfffe8f98>
   50e74:	a900100c 	andi	r4,r21,64
   50e78:	20001f26 	beq	r4,zero,50ef8 <___vfiprintf_internal_r+0x11dc>
   50e7c:	da812117 	ldw	r10,1156(sp)
   50e80:	1480000b 	ldhu	r18,0(r2)
   50e84:	002d883a 	mov	r22,zero
   50e88:	52800104 	addi	r10,r10,4
   50e8c:	da812115 	stw	r10,1156(sp)
   50e90:	003dae06 	br	5054c <__alt_data_end+0xfffe944c>
   50e94:	d9012017 	ldw	r4,1152(sp)
   50e98:	a00b883a 	mov	r5,r20
   50e9c:	d9811a04 	addi	r6,sp,1128
   50ea0:	da412b15 	stw	r9,1196(sp)
   50ea4:	db812a15 	stw	r14,1192(sp)
   50ea8:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50eac:	da412b17 	ldw	r9,1196(sp)
   50eb0:	db812a17 	ldw	r14,1192(sp)
   50eb4:	103ed31e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50eb8:	d9411b17 	ldw	r5,1132(sp)
   50ebc:	d8c11c17 	ldw	r3,1136(sp)
   50ec0:	d811883a 	mov	r8,sp
   50ec4:	28800044 	addi	r2,r5,1
   50ec8:	003e7f06 	br	508c8 <__alt_data_end+0xfffe97c8>
   50ecc:	9825883a 	mov	r18,r19
   50ed0:	003d3406 	br	503a4 <__alt_data_end+0xfffe92a4>
   50ed4:	4823883a 	mov	r17,r9
   50ed8:	003e0806 	br	506fc <__alt_data_end+0xfffe95fc>
   50edc:	d9012017 	ldw	r4,1152(sp)
   50ee0:	a00b883a 	mov	r5,r20
   50ee4:	d9811a04 	addi	r6,sp,1128
   50ee8:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50eec:	103ec51e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50ef0:	d8c11c17 	ldw	r3,1136(sp)
   50ef4:	003ee006 	br	50a78 <__alt_data_end+0xfffe9978>
   50ef8:	dac12117 	ldw	r11,1156(sp)
   50efc:	14800017 	ldw	r18,0(r2)
   50f00:	002d883a 	mov	r22,zero
   50f04:	5ac00104 	addi	r11,r11,4
   50f08:	dac12115 	stw	r11,1156(sp)
   50f0c:	003d8f06 	br	5054c <__alt_data_end+0xfffe944c>
   50f10:	02c001b4 	movhi	r11,6
   50f14:	5aec5204 	addi	r11,r11,-20152
   50f18:	dac12315 	stw	r11,1164(sp)
   50f1c:	003ce306 	br	502ac <__alt_data_end+0xfffe91ac>
   50f20:	80c00043 	ldbu	r3,1(r16)
   50f24:	ad400814 	ori	r21,r21,32
   50f28:	84000044 	addi	r16,r16,1
   50f2c:	18c03fcc 	andi	r3,r3,255
   50f30:	18c0201c 	xori	r3,r3,128
   50f34:	18ffe004 	addi	r3,r3,-128
   50f38:	003bd706 	br	4fe98 <__alt_data_end+0xfffe8d98>
   50f3c:	dac11e17 	ldw	r11,1144(sp)
   50f40:	d8c12417 	ldw	r3,1168(sp)
   50f44:	58e3c83a 	sub	r17,r11,r3
   50f48:	003c7006 	br	5010c <__alt_data_end+0xfffe900c>
   50f4c:	da012a15 	stw	r8,1192(sp)
   50f50:	00494340 	call	49434 <strlen>
   50f54:	1023883a 	mov	r17,r2
   50f58:	db011d83 	ldbu	r12,1142(sp)
   50f5c:	dd812115 	stw	r22,1156(sp)
   50f60:	0013883a 	mov	r9,zero
   50f64:	da012a17 	ldw	r8,1192(sp)
   50f68:	003c6806 	br	5010c <__alt_data_end+0xfffe900c>
   50f6c:	d9012017 	ldw	r4,1152(sp)
   50f70:	a00b883a 	mov	r5,r20
   50f74:	d9811a04 	addi	r6,sp,1128
   50f78:	da412b15 	stw	r9,1196(sp)
   50f7c:	004fc080 	call	4fc08 <__sprint_r.part.0>
   50f80:	da412b17 	ldw	r9,1196(sp)
   50f84:	103e9f1e 	bne	r2,zero,50a04 <__alt_data_end+0xfffe9904>
   50f88:	d9411b17 	ldw	r5,1132(sp)
   50f8c:	d8c11c17 	ldw	r3,1136(sp)
   50f90:	d811883a 	mov	r8,sp
   50f94:	28800044 	addi	r2,r5,1
   50f98:	003ca906 	br	50240 <__alt_data_end+0xfffe9140>
   50f9c:	d9411b17 	ldw	r5,1132(sp)
   50fa0:	010001b4 	movhi	r4,6
   50fa4:	212c5604 	addi	r4,r4,-20136
   50fa8:	d9012315 	stw	r4,1164(sp)
   50fac:	29400044 	addi	r5,r5,1
   50fb0:	003c8806 	br	501d4 <__alt_data_end+0xfffe90d4>
   50fb4:	00800184 	movi	r2,6
   50fb8:	1240012e 	bgeu	r2,r9,50fc0 <___vfiprintf_internal_r+0x12a4>
   50fbc:	1013883a 	mov	r9,r2
   50fc0:	4823883a 	mov	r17,r9
   50fc4:	4825883a 	mov	r18,r9
   50fc8:	48001516 	blt	r9,zero,51020 <___vfiprintf_internal_r+0x1304>
   50fcc:	008001b4 	movhi	r2,6
   50fd0:	10ab5904 	addi	r2,r2,-21148
   50fd4:	dd812115 	stw	r22,1156(sp)
   50fd8:	d8812415 	stw	r2,1168(sp)
   50fdc:	003d6f06 	br	5059c <__alt_data_end+0xfffe949c>
   50fe0:	d9411b17 	ldw	r5,1132(sp)
   50fe4:	02c001b4 	movhi	r11,6
   50fe8:	5aec5604 	addi	r11,r11,-20136
   50fec:	dac12315 	stw	r11,1164(sp)
   50ff0:	29400044 	addi	r5,r5,1
   50ff4:	003ce106 	br	5037c <__alt_data_end+0xfffe927c>
   50ff8:	010001b4 	movhi	r4,6
   50ffc:	212c5204 	addi	r4,r4,-20152
   51000:	d9012315 	stw	r4,1164(sp)
   51004:	1009883a 	mov	r4,r2
   51008:	003eca06 	br	50b34 <__alt_data_end+0xfffe9a34>
   5100c:	4823883a 	mov	r17,r9
   51010:	db011d83 	ldbu	r12,1142(sp)
   51014:	dd812115 	stw	r22,1156(sp)
   51018:	0013883a 	mov	r9,zero
   5101c:	003c3b06 	br	5010c <__alt_data_end+0xfffe900c>
   51020:	0025883a 	mov	r18,zero
   51024:	003fe906 	br	50fcc <__alt_data_end+0xfffe9ecc>
   51028:	dac12117 	ldw	r11,1156(sp)
   5102c:	8005883a 	mov	r2,r16
   51030:	5021883a 	mov	r16,r10
   51034:	5a400017 	ldw	r9,0(r11)
   51038:	58c00104 	addi	r3,r11,4
   5103c:	d8c12115 	stw	r3,1156(sp)
   51040:	48000a16 	blt	r9,zero,5106c <___vfiprintf_internal_r+0x1350>
   51044:	10c00047 	ldb	r3,1(r2)
   51048:	003b9306 	br	4fe98 <__alt_data_end+0xfffe8d98>
   5104c:	043fffc4 	movi	r16,-1
   51050:	003d0206 	br	5045c <__alt_data_end+0xfffe935c>
   51054:	94c0010e 	bge	r18,r19,5105c <___vfiprintf_internal_r+0x1340>
   51058:	9825883a 	mov	r18,r19
   5105c:	da812217 	ldw	r10,1160(sp)
   51060:	5495883a 	add	r10,r10,r18
   51064:	da812215 	stw	r10,1160(sp)
   51068:	003cd106 	br	503b0 <__alt_data_end+0xfffe92b0>
   5106c:	027fffc4 	movi	r9,-1
   51070:	10c00047 	ldb	r3,1(r2)
   51074:	003b8806 	br	4fe98 <__alt_data_end+0xfffe8d98>

00051078 <__vfiprintf_internal>:
   51078:	2007883a 	mov	r3,r4
   5107c:	010001b4 	movhi	r4,6
   51080:	21333004 	addi	r4,r4,-13120
   51084:	21000017 	ldw	r4,0(r4)
   51088:	2805883a 	mov	r2,r5
   5108c:	300f883a 	mov	r7,r6
   51090:	180b883a 	mov	r5,r3
   51094:	100d883a 	mov	r6,r2
   51098:	004fd1c1 	jmpi	4fd1c <___vfiprintf_internal_r>

0005109c <__swbuf_r>:
   5109c:	defffc04 	addi	sp,sp,-16
   510a0:	dc800215 	stw	r18,8(sp)
   510a4:	dc400115 	stw	r17,4(sp)
   510a8:	dc000015 	stw	r16,0(sp)
   510ac:	dfc00315 	stw	ra,12(sp)
   510b0:	2025883a 	mov	r18,r4
   510b4:	2823883a 	mov	r17,r5
   510b8:	3021883a 	mov	r16,r6
   510bc:	20000226 	beq	r4,zero,510c8 <__swbuf_r+0x2c>
   510c0:	20800e17 	ldw	r2,56(r4)
   510c4:	10004126 	beq	r2,zero,511cc <__swbuf_r+0x130>
   510c8:	80c00617 	ldw	r3,24(r16)
   510cc:	8180030b 	ldhu	r6,12(r16)
   510d0:	80c00215 	stw	r3,8(r16)
   510d4:	30c0020c 	andi	r3,r6,8
   510d8:	18003526 	beq	r3,zero,511b0 <__swbuf_r+0x114>
   510dc:	80c00417 	ldw	r3,16(r16)
   510e0:	18003326 	beq	r3,zero,511b0 <__swbuf_r+0x114>
   510e4:	3088000c 	andi	r2,r6,8192
   510e8:	8c403fcc 	andi	r17,r17,255
   510ec:	10001726 	beq	r2,zero,5114c <__swbuf_r+0xb0>
   510f0:	80800017 	ldw	r2,0(r16)
   510f4:	81000517 	ldw	r4,20(r16)
   510f8:	10c7c83a 	sub	r3,r2,r3
   510fc:	19001d0e 	bge	r3,r4,51174 <__swbuf_r+0xd8>
   51100:	18c00044 	addi	r3,r3,1
   51104:	81400217 	ldw	r5,8(r16)
   51108:	11000044 	addi	r4,r2,1
   5110c:	81000015 	stw	r4,0(r16)
   51110:	297fffc4 	addi	r5,r5,-1
   51114:	81400215 	stw	r5,8(r16)
   51118:	14400005 	stb	r17,0(r2)
   5111c:	80800517 	ldw	r2,20(r16)
   51120:	10c01d26 	beq	r2,r3,51198 <__swbuf_r+0xfc>
   51124:	8080030b 	ldhu	r2,12(r16)
   51128:	1080004c 	andi	r2,r2,1
   5112c:	1000181e 	bne	r2,zero,51190 <__swbuf_r+0xf4>
   51130:	8805883a 	mov	r2,r17
   51134:	dfc00317 	ldw	ra,12(sp)
   51138:	dc800217 	ldw	r18,8(sp)
   5113c:	dc400117 	ldw	r17,4(sp)
   51140:	dc000017 	ldw	r16,0(sp)
   51144:	dec00404 	addi	sp,sp,16
   51148:	f800283a 	ret
   5114c:	81001917 	ldw	r4,100(r16)
   51150:	00b7ffc4 	movi	r2,-8193
   51154:	31880014 	ori	r6,r6,8192
   51158:	2084703a 	and	r2,r4,r2
   5115c:	80801915 	stw	r2,100(r16)
   51160:	80800017 	ldw	r2,0(r16)
   51164:	81000517 	ldw	r4,20(r16)
   51168:	8180030d 	sth	r6,12(r16)
   5116c:	10c7c83a 	sub	r3,r2,r3
   51170:	193fe316 	blt	r3,r4,51100 <__alt_data_end+0xfffea000>
   51174:	9009883a 	mov	r4,r18
   51178:	800b883a 	mov	r5,r16
   5117c:	004d4a00 	call	4d4a0 <_fflush_r>
   51180:	1000091e 	bne	r2,zero,511a8 <__swbuf_r+0x10c>
   51184:	80800017 	ldw	r2,0(r16)
   51188:	00c00044 	movi	r3,1
   5118c:	003fdd06 	br	51104 <__alt_data_end+0xfffea004>
   51190:	00800284 	movi	r2,10
   51194:	88bfe61e 	bne	r17,r2,51130 <__alt_data_end+0xfffea030>
   51198:	9009883a 	mov	r4,r18
   5119c:	800b883a 	mov	r5,r16
   511a0:	004d4a00 	call	4d4a0 <_fflush_r>
   511a4:	103fe226 	beq	r2,zero,51130 <__alt_data_end+0xfffea030>
   511a8:	00bfffc4 	movi	r2,-1
   511ac:	003fe106 	br	51134 <__alt_data_end+0xfffea034>
   511b0:	9009883a 	mov	r4,r18
   511b4:	800b883a 	mov	r5,r16
   511b8:	004b8e00 	call	4b8e0 <__swsetup_r>
   511bc:	1000051e 	bne	r2,zero,511d4 <__swbuf_r+0x138>
   511c0:	8180030b 	ldhu	r6,12(r16)
   511c4:	80c00417 	ldw	r3,16(r16)
   511c8:	003fc606 	br	510e4 <__alt_data_end+0xfffe9fe4>
   511cc:	00482640 	call	48264 <__sinit>
   511d0:	003fbd06 	br	510c8 <__alt_data_end+0xfffe9fc8>
   511d4:	80c0030b 	ldhu	r3,12(r16)
   511d8:	00bfffc4 	movi	r2,-1
   511dc:	18c01014 	ori	r3,r3,64
   511e0:	80c0030d 	sth	r3,12(r16)
   511e4:	00c00244 	movi	r3,9
   511e8:	90c00015 	stw	r3,0(r18)
   511ec:	003fd106 	br	51134 <__alt_data_end+0xfffea034>

000511f0 <__swbuf>:
   511f0:	00c001b4 	movhi	r3,6
   511f4:	18f33004 	addi	r3,r3,-13120
   511f8:	2005883a 	mov	r2,r4
   511fc:	19000017 	ldw	r4,0(r3)
   51200:	280d883a 	mov	r6,r5
   51204:	100b883a 	mov	r5,r2
   51208:	005109c1 	jmpi	5109c <__swbuf_r>

0005120c <_calloc_r>:
   5120c:	298b383a 	mul	r5,r5,r6
   51210:	defffe04 	addi	sp,sp,-8
   51214:	dc000015 	stw	r16,0(sp)
   51218:	dfc00115 	stw	ra,4(sp)
   5121c:	00484240 	call	48424 <_malloc_r>
   51220:	1021883a 	mov	r16,r2
   51224:	10002826 	beq	r2,zero,512c8 <_calloc_r+0xbc>
   51228:	11bfff17 	ldw	r6,-4(r2)
   5122c:	00bfff04 	movi	r2,-4
   51230:	00c00904 	movi	r3,36
   51234:	308c703a 	and	r6,r6,r2
   51238:	308d883a 	add	r6,r6,r2
   5123c:	19801436 	bltu	r3,r6,51290 <_calloc_r+0x84>
   51240:	008004c4 	movi	r2,19
   51244:	11800936 	bltu	r2,r6,5126c <_calloc_r+0x60>
   51248:	8005883a 	mov	r2,r16
   5124c:	10000015 	stw	zero,0(r2)
   51250:	10000115 	stw	zero,4(r2)
   51254:	10000215 	stw	zero,8(r2)
   51258:	8005883a 	mov	r2,r16
   5125c:	dfc00117 	ldw	ra,4(sp)
   51260:	dc000017 	ldw	r16,0(sp)
   51264:	dec00204 	addi	sp,sp,8
   51268:	f800283a 	ret
   5126c:	80000015 	stw	zero,0(r16)
   51270:	80000115 	stw	zero,4(r16)
   51274:	008006c4 	movi	r2,27
   51278:	11800d2e 	bgeu	r2,r6,512b0 <_calloc_r+0xa4>
   5127c:	80000215 	stw	zero,8(r16)
   51280:	80000315 	stw	zero,12(r16)
   51284:	30c00c26 	beq	r6,r3,512b8 <_calloc_r+0xac>
   51288:	80800404 	addi	r2,r16,16
   5128c:	003fef06 	br	5124c <__alt_data_end+0xfffea14c>
   51290:	8009883a 	mov	r4,r16
   51294:	000b883a 	mov	r5,zero
   51298:	0048e680 	call	48e68 <memset>
   5129c:	8005883a 	mov	r2,r16
   512a0:	dfc00117 	ldw	ra,4(sp)
   512a4:	dc000017 	ldw	r16,0(sp)
   512a8:	dec00204 	addi	sp,sp,8
   512ac:	f800283a 	ret
   512b0:	80800204 	addi	r2,r16,8
   512b4:	003fe506 	br	5124c <__alt_data_end+0xfffea14c>
   512b8:	80000415 	stw	zero,16(r16)
   512bc:	80800604 	addi	r2,r16,24
   512c0:	80000515 	stw	zero,20(r16)
   512c4:	003fe106 	br	5124c <__alt_data_end+0xfffea14c>
   512c8:	0005883a 	mov	r2,zero
   512cc:	003fe306 	br	5125c <__alt_data_end+0xfffea15c>

000512d0 <_fputwc_r>:
   512d0:	3080030b 	ldhu	r2,12(r6)
   512d4:	defff804 	addi	sp,sp,-32
   512d8:	dcc00415 	stw	r19,16(sp)
   512dc:	dc800315 	stw	r18,12(sp)
   512e0:	dc000115 	stw	r16,4(sp)
   512e4:	dfc00715 	stw	ra,28(sp)
   512e8:	dd400615 	stw	r21,24(sp)
   512ec:	dd000515 	stw	r20,20(sp)
   512f0:	dc400215 	stw	r17,8(sp)
   512f4:	10c8000c 	andi	r3,r2,8192
   512f8:	3021883a 	mov	r16,r6
   512fc:	2027883a 	mov	r19,r4
   51300:	2825883a 	mov	r18,r5
   51304:	1800051e 	bne	r3,zero,5131c <_fputwc_r+0x4c>
   51308:	30c01917 	ldw	r3,100(r6)
   5130c:	10880014 	ori	r2,r2,8192
   51310:	3080030d 	sth	r2,12(r6)
   51314:	18880014 	ori	r2,r3,8192
   51318:	30801915 	stw	r2,100(r6)
   5131c:	004e0380 	call	4e038 <__locale_mb_cur_max>
   51320:	00c00044 	movi	r3,1
   51324:	10c03e26 	beq	r2,r3,51420 <_fputwc_r+0x150>
   51328:	9809883a 	mov	r4,r19
   5132c:	d80b883a 	mov	r5,sp
   51330:	900d883a 	mov	r6,r18
   51334:	81c01704 	addi	r7,r16,92
   51338:	00515580 	call	51558 <_wcrtomb_r>
   5133c:	1029883a 	mov	r20,r2
   51340:	00bfffc4 	movi	r2,-1
   51344:	a0802026 	beq	r20,r2,513c8 <_fputwc_r+0xf8>
   51348:	d9400003 	ldbu	r5,0(sp)
   5134c:	a0001c26 	beq	r20,zero,513c0 <_fputwc_r+0xf0>
   51350:	0023883a 	mov	r17,zero
   51354:	05400284 	movi	r21,10
   51358:	00000906 	br	51380 <_fputwc_r+0xb0>
   5135c:	80800017 	ldw	r2,0(r16)
   51360:	11400005 	stb	r5,0(r2)
   51364:	80c00017 	ldw	r3,0(r16)
   51368:	18c00044 	addi	r3,r3,1
   5136c:	80c00015 	stw	r3,0(r16)
   51370:	8c400044 	addi	r17,r17,1
   51374:	dc45883a 	add	r2,sp,r17
   51378:	8d00112e 	bgeu	r17,r20,513c0 <_fputwc_r+0xf0>
   5137c:	11400003 	ldbu	r5,0(r2)
   51380:	80c00217 	ldw	r3,8(r16)
   51384:	18ffffc4 	addi	r3,r3,-1
   51388:	80c00215 	stw	r3,8(r16)
   5138c:	183ff30e 	bge	r3,zero,5135c <__alt_data_end+0xfffea25c>
   51390:	80800617 	ldw	r2,24(r16)
   51394:	18801916 	blt	r3,r2,513fc <_fputwc_r+0x12c>
   51398:	80800017 	ldw	r2,0(r16)
   5139c:	11400005 	stb	r5,0(r2)
   513a0:	80800017 	ldw	r2,0(r16)
   513a4:	10c00003 	ldbu	r3,0(r2)
   513a8:	10800044 	addi	r2,r2,1
   513ac:	1d402326 	beq	r3,r21,5143c <_fputwc_r+0x16c>
   513b0:	80800015 	stw	r2,0(r16)
   513b4:	8c400044 	addi	r17,r17,1
   513b8:	dc45883a 	add	r2,sp,r17
   513bc:	8d3fef36 	bltu	r17,r20,5137c <__alt_data_end+0xfffea27c>
   513c0:	9005883a 	mov	r2,r18
   513c4:	00000406 	br	513d8 <_fputwc_r+0x108>
   513c8:	80c0030b 	ldhu	r3,12(r16)
   513cc:	a005883a 	mov	r2,r20
   513d0:	18c01014 	ori	r3,r3,64
   513d4:	80c0030d 	sth	r3,12(r16)
   513d8:	dfc00717 	ldw	ra,28(sp)
   513dc:	dd400617 	ldw	r21,24(sp)
   513e0:	dd000517 	ldw	r20,20(sp)
   513e4:	dcc00417 	ldw	r19,16(sp)
   513e8:	dc800317 	ldw	r18,12(sp)
   513ec:	dc400217 	ldw	r17,8(sp)
   513f0:	dc000117 	ldw	r16,4(sp)
   513f4:	dec00804 	addi	sp,sp,32
   513f8:	f800283a 	ret
   513fc:	9809883a 	mov	r4,r19
   51400:	29403fcc 	andi	r5,r5,255
   51404:	800d883a 	mov	r6,r16
   51408:	005109c0 	call	5109c <__swbuf_r>
   5140c:	10bfffe0 	cmpeqi	r2,r2,-1
   51410:	10803fcc 	andi	r2,r2,255
   51414:	103fd626 	beq	r2,zero,51370 <__alt_data_end+0xfffea270>
   51418:	00bfffc4 	movi	r2,-1
   5141c:	003fee06 	br	513d8 <__alt_data_end+0xfffea2d8>
   51420:	90ffffc4 	addi	r3,r18,-1
   51424:	01003f84 	movi	r4,254
   51428:	20ffbf36 	bltu	r4,r3,51328 <__alt_data_end+0xfffea228>
   5142c:	900b883a 	mov	r5,r18
   51430:	dc800005 	stb	r18,0(sp)
   51434:	1029883a 	mov	r20,r2
   51438:	003fc506 	br	51350 <__alt_data_end+0xfffea250>
   5143c:	9809883a 	mov	r4,r19
   51440:	a80b883a 	mov	r5,r21
   51444:	800d883a 	mov	r6,r16
   51448:	005109c0 	call	5109c <__swbuf_r>
   5144c:	10bfffe0 	cmpeqi	r2,r2,-1
   51450:	003fef06 	br	51410 <__alt_data_end+0xfffea310>

00051454 <fputwc>:
   51454:	defffc04 	addi	sp,sp,-16
   51458:	dc000115 	stw	r16,4(sp)
   5145c:	040001b4 	movhi	r16,6
   51460:	84333004 	addi	r16,r16,-13120
   51464:	dc400215 	stw	r17,8(sp)
   51468:	2023883a 	mov	r17,r4
   5146c:	81000017 	ldw	r4,0(r16)
   51470:	dfc00315 	stw	ra,12(sp)
   51474:	280d883a 	mov	r6,r5
   51478:	20000626 	beq	r4,zero,51494 <fputwc+0x40>
   5147c:	20800e17 	ldw	r2,56(r4)
   51480:	1000041e 	bne	r2,zero,51494 <fputwc+0x40>
   51484:	d9400015 	stw	r5,0(sp)
   51488:	00482640 	call	48264 <__sinit>
   5148c:	81000017 	ldw	r4,0(r16)
   51490:	d9800017 	ldw	r6,0(sp)
   51494:	880b883a 	mov	r5,r17
   51498:	dfc00317 	ldw	ra,12(sp)
   5149c:	dc400217 	ldw	r17,8(sp)
   514a0:	dc000117 	ldw	r16,4(sp)
   514a4:	dec00404 	addi	sp,sp,16
   514a8:	00512d01 	jmpi	512d0 <_fputwc_r>

000514ac <_fstat_r>:
   514ac:	defffd04 	addi	sp,sp,-12
   514b0:	dc000015 	stw	r16,0(sp)
   514b4:	040001b4 	movhi	r16,6
   514b8:	dc400115 	stw	r17,4(sp)
   514bc:	843a1e04 	addi	r16,r16,-6024
   514c0:	2023883a 	mov	r17,r4
   514c4:	2809883a 	mov	r4,r5
   514c8:	300b883a 	mov	r5,r6
   514cc:	dfc00215 	stw	ra,8(sp)
   514d0:	80000015 	stw	zero,0(r16)
   514d4:	00549e00 	call	549e0 <fstat>
   514d8:	00ffffc4 	movi	r3,-1
   514dc:	10c00526 	beq	r2,r3,514f4 <_fstat_r+0x48>
   514e0:	dfc00217 	ldw	ra,8(sp)
   514e4:	dc400117 	ldw	r17,4(sp)
   514e8:	dc000017 	ldw	r16,0(sp)
   514ec:	dec00304 	addi	sp,sp,12
   514f0:	f800283a 	ret
   514f4:	80c00017 	ldw	r3,0(r16)
   514f8:	183ff926 	beq	r3,zero,514e0 <__alt_data_end+0xfffea3e0>
   514fc:	88c00015 	stw	r3,0(r17)
   51500:	003ff706 	br	514e0 <__alt_data_end+0xfffea3e0>

00051504 <_isatty_r>:
   51504:	defffd04 	addi	sp,sp,-12
   51508:	dc000015 	stw	r16,0(sp)
   5150c:	040001b4 	movhi	r16,6
   51510:	dc400115 	stw	r17,4(sp)
   51514:	843a1e04 	addi	r16,r16,-6024
   51518:	2023883a 	mov	r17,r4
   5151c:	2809883a 	mov	r4,r5
   51520:	dfc00215 	stw	ra,8(sp)
   51524:	80000015 	stw	zero,0(r16)
   51528:	0054db00 	call	54db0 <isatty>
   5152c:	00ffffc4 	movi	r3,-1
   51530:	10c00526 	beq	r2,r3,51548 <_isatty_r+0x44>
   51534:	dfc00217 	ldw	ra,8(sp)
   51538:	dc400117 	ldw	r17,4(sp)
   5153c:	dc000017 	ldw	r16,0(sp)
   51540:	dec00304 	addi	sp,sp,12
   51544:	f800283a 	ret
   51548:	80c00017 	ldw	r3,0(r16)
   5154c:	183ff926 	beq	r3,zero,51534 <__alt_data_end+0xfffea434>
   51550:	88c00015 	stw	r3,0(r17)
   51554:	003ff706 	br	51534 <__alt_data_end+0xfffea434>

00051558 <_wcrtomb_r>:
   51558:	defff604 	addi	sp,sp,-40
   5155c:	008001b4 	movhi	r2,6
   51560:	dc800815 	stw	r18,32(sp)
   51564:	dc400715 	stw	r17,28(sp)
   51568:	dc000615 	stw	r16,24(sp)
   5156c:	10b33504 	addi	r2,r2,-13100
   51570:	dfc00915 	stw	ra,36(sp)
   51574:	2021883a 	mov	r16,r4
   51578:	3823883a 	mov	r17,r7
   5157c:	14800017 	ldw	r18,0(r2)
   51580:	28001426 	beq	r5,zero,515d4 <_wcrtomb_r+0x7c>
   51584:	d9400415 	stw	r5,16(sp)
   51588:	d9800515 	stw	r6,20(sp)
   5158c:	004e02c0 	call	4e02c <__locale_charset>
   51590:	d9400417 	ldw	r5,16(sp)
   51594:	d9800517 	ldw	r6,20(sp)
   51598:	8009883a 	mov	r4,r16
   5159c:	dc400015 	stw	r17,0(sp)
   515a0:	100f883a 	mov	r7,r2
   515a4:	903ee83a 	callr	r18
   515a8:	00ffffc4 	movi	r3,-1
   515ac:	10c0031e 	bne	r2,r3,515bc <_wcrtomb_r+0x64>
   515b0:	88000015 	stw	zero,0(r17)
   515b4:	00c02284 	movi	r3,138
   515b8:	80c00015 	stw	r3,0(r16)
   515bc:	dfc00917 	ldw	ra,36(sp)
   515c0:	dc800817 	ldw	r18,32(sp)
   515c4:	dc400717 	ldw	r17,28(sp)
   515c8:	dc000617 	ldw	r16,24(sp)
   515cc:	dec00a04 	addi	sp,sp,40
   515d0:	f800283a 	ret
   515d4:	004e02c0 	call	4e02c <__locale_charset>
   515d8:	8009883a 	mov	r4,r16
   515dc:	dc400015 	stw	r17,0(sp)
   515e0:	d9400104 	addi	r5,sp,4
   515e4:	000d883a 	mov	r6,zero
   515e8:	100f883a 	mov	r7,r2
   515ec:	903ee83a 	callr	r18
   515f0:	003fed06 	br	515a8 <__alt_data_end+0xfffea4a8>

000515f4 <wcrtomb>:
   515f4:	defff504 	addi	sp,sp,-44
   515f8:	dc400515 	stw	r17,20(sp)
   515fc:	dc000415 	stw	r16,16(sp)
   51600:	dfc00a15 	stw	ra,40(sp)
   51604:	dd400915 	stw	r21,36(sp)
   51608:	dd000815 	stw	r20,32(sp)
   5160c:	dcc00715 	stw	r19,28(sp)
   51610:	dc800615 	stw	r18,24(sp)
   51614:	2021883a 	mov	r16,r4
   51618:	3023883a 	mov	r17,r6
   5161c:	20001d26 	beq	r4,zero,51694 <wcrtomb+0xa0>
   51620:	048001b4 	movhi	r18,6
   51624:	94b33004 	addi	r18,r18,-13120
   51628:	008001b4 	movhi	r2,6
   5162c:	95400017 	ldw	r21,0(r18)
   51630:	10b33504 	addi	r2,r2,-13100
   51634:	15000017 	ldw	r20,0(r2)
   51638:	2827883a 	mov	r19,r5
   5163c:	004e02c0 	call	4e02c <__locale_charset>
   51640:	a809883a 	mov	r4,r21
   51644:	dc400015 	stw	r17,0(sp)
   51648:	800b883a 	mov	r5,r16
   5164c:	980d883a 	mov	r6,r19
   51650:	100f883a 	mov	r7,r2
   51654:	a03ee83a 	callr	r20
   51658:	00ffffc4 	movi	r3,-1
   5165c:	10c0041e 	bne	r2,r3,51670 <wcrtomb+0x7c>
   51660:	90c00017 	ldw	r3,0(r18)
   51664:	01002284 	movi	r4,138
   51668:	88000015 	stw	zero,0(r17)
   5166c:	19000015 	stw	r4,0(r3)
   51670:	dfc00a17 	ldw	ra,40(sp)
   51674:	dd400917 	ldw	r21,36(sp)
   51678:	dd000817 	ldw	r20,32(sp)
   5167c:	dcc00717 	ldw	r19,28(sp)
   51680:	dc800617 	ldw	r18,24(sp)
   51684:	dc400517 	ldw	r17,20(sp)
   51688:	dc000417 	ldw	r16,16(sp)
   5168c:	dec00b04 	addi	sp,sp,44
   51690:	f800283a 	ret
   51694:	048001b4 	movhi	r18,6
   51698:	94b33004 	addi	r18,r18,-13120
   5169c:	008001b4 	movhi	r2,6
   516a0:	94c00017 	ldw	r19,0(r18)
   516a4:	10b33504 	addi	r2,r2,-13100
   516a8:	14000017 	ldw	r16,0(r2)
   516ac:	004e02c0 	call	4e02c <__locale_charset>
   516b0:	9809883a 	mov	r4,r19
   516b4:	dc400015 	stw	r17,0(sp)
   516b8:	d9400104 	addi	r5,sp,4
   516bc:	000d883a 	mov	r6,zero
   516c0:	100f883a 	mov	r7,r2
   516c4:	803ee83a 	callr	r16
   516c8:	003fe306 	br	51658 <__alt_data_end+0xfffea558>

000516cc <__ascii_wctomb>:
   516cc:	28000526 	beq	r5,zero,516e4 <__ascii_wctomb+0x18>
   516d0:	00803fc4 	movi	r2,255
   516d4:	11800536 	bltu	r2,r6,516ec <__ascii_wctomb+0x20>
   516d8:	29800005 	stb	r6,0(r5)
   516dc:	00800044 	movi	r2,1
   516e0:	f800283a 	ret
   516e4:	0005883a 	mov	r2,zero
   516e8:	f800283a 	ret
   516ec:	00802284 	movi	r2,138
   516f0:	20800015 	stw	r2,0(r4)
   516f4:	00bfffc4 	movi	r2,-1
   516f8:	f800283a 	ret

000516fc <_wctomb_r>:
   516fc:	008001b4 	movhi	r2,6
   51700:	defff904 	addi	sp,sp,-28
   51704:	10b33504 	addi	r2,r2,-13100
   51708:	dfc00615 	stw	ra,24(sp)
   5170c:	dc400515 	stw	r17,20(sp)
   51710:	dc000415 	stw	r16,16(sp)
   51714:	3823883a 	mov	r17,r7
   51718:	14000017 	ldw	r16,0(r2)
   5171c:	d9000115 	stw	r4,4(sp)
   51720:	d9400215 	stw	r5,8(sp)
   51724:	d9800315 	stw	r6,12(sp)
   51728:	004e02c0 	call	4e02c <__locale_charset>
   5172c:	d9000117 	ldw	r4,4(sp)
   51730:	d9400217 	ldw	r5,8(sp)
   51734:	d9800317 	ldw	r6,12(sp)
   51738:	dc400015 	stw	r17,0(sp)
   5173c:	100f883a 	mov	r7,r2
   51740:	803ee83a 	callr	r16
   51744:	dfc00617 	ldw	ra,24(sp)
   51748:	dc400517 	ldw	r17,20(sp)
   5174c:	dc000417 	ldw	r16,16(sp)
   51750:	dec00704 	addi	sp,sp,28
   51754:	f800283a 	ret

00051758 <__udivdi3>:
   51758:	defff504 	addi	sp,sp,-44
   5175c:	dcc00415 	stw	r19,16(sp)
   51760:	dc000115 	stw	r16,4(sp)
   51764:	dfc00a15 	stw	ra,40(sp)
   51768:	df000915 	stw	fp,36(sp)
   5176c:	ddc00815 	stw	r23,32(sp)
   51770:	dd800715 	stw	r22,28(sp)
   51774:	dd400615 	stw	r21,24(sp)
   51778:	dd000515 	stw	r20,20(sp)
   5177c:	dc800315 	stw	r18,12(sp)
   51780:	dc400215 	stw	r17,8(sp)
   51784:	2027883a 	mov	r19,r4
   51788:	2821883a 	mov	r16,r5
   5178c:	3800421e 	bne	r7,zero,51898 <__udivdi3+0x140>
   51790:	3025883a 	mov	r18,r6
   51794:	2023883a 	mov	r17,r4
   51798:	2980542e 	bgeu	r5,r6,518ec <__udivdi3+0x194>
   5179c:	00bfffd4 	movui	r2,65535
   517a0:	282d883a 	mov	r22,r5
   517a4:	1180a836 	bltu	r2,r6,51a48 <__udivdi3+0x2f0>
   517a8:	00803fc4 	movi	r2,255
   517ac:	1181422e 	bgeu	r2,r6,51cb8 <__udivdi3+0x560>
   517b0:	00800204 	movi	r2,8
   517b4:	1007883a 	mov	r3,r2
   517b8:	3084d83a 	srl	r2,r6,r2
   517bc:	010001b4 	movhi	r4,6
   517c0:	212b0ac4 	addi	r4,r4,-21461
   517c4:	2085883a 	add	r2,r4,r2
   517c8:	10800003 	ldbu	r2,0(r2)
   517cc:	10c7883a 	add	r3,r2,r3
   517d0:	00800804 	movi	r2,32
   517d4:	10c5c83a 	sub	r2,r2,r3
   517d8:	10000526 	beq	r2,zero,517f0 <__udivdi3+0x98>
   517dc:	80a0983a 	sll	r16,r16,r2
   517e0:	98c6d83a 	srl	r3,r19,r3
   517e4:	30a4983a 	sll	r18,r6,r2
   517e8:	98a2983a 	sll	r17,r19,r2
   517ec:	80ecb03a 	or	r22,r16,r3
   517f0:	902ad43a 	srli	r21,r18,16
   517f4:	b009883a 	mov	r4,r22
   517f8:	953fffcc 	andi	r20,r18,65535
   517fc:	a80b883a 	mov	r5,r21
   51800:	0046dbc0 	call	46dbc <__umodsi3>
   51804:	b009883a 	mov	r4,r22
   51808:	a80b883a 	mov	r5,r21
   5180c:	1027883a 	mov	r19,r2
   51810:	0046db40 	call	46db4 <__udivsi3>
   51814:	1021883a 	mov	r16,r2
   51818:	8806d43a 	srli	r3,r17,16
   5181c:	9804943a 	slli	r2,r19,16
   51820:	8527383a 	mul	r19,r16,r20
   51824:	10c4b03a 	or	r2,r2,r3
   51828:	14c0052e 	bgeu	r2,r19,51840 <__udivdi3+0xe8>
   5182c:	1485883a 	add	r2,r2,r18
   51830:	80ffffc4 	addi	r3,r16,-1
   51834:	14800136 	bltu	r2,r18,5183c <__udivdi3+0xe4>
   51838:	14c13436 	bltu	r2,r19,51d0c <__udivdi3+0x5b4>
   5183c:	1821883a 	mov	r16,r3
   51840:	14e7c83a 	sub	r19,r2,r19
   51844:	9809883a 	mov	r4,r19
   51848:	a80b883a 	mov	r5,r21
   5184c:	0046dbc0 	call	46dbc <__umodsi3>
   51850:	102d883a 	mov	r22,r2
   51854:	9809883a 	mov	r4,r19
   51858:	a80b883a 	mov	r5,r21
   5185c:	0046db40 	call	46db4 <__udivsi3>
   51860:	b02c943a 	slli	r22,r22,16
   51864:	1529383a 	mul	r20,r2,r20
   51868:	8c7fffcc 	andi	r17,r17,65535
   5186c:	b462b03a 	or	r17,r22,r17
   51870:	8d00052e 	bgeu	r17,r20,51888 <__udivdi3+0x130>
   51874:	8ca3883a 	add	r17,r17,r18
   51878:	10ffffc4 	addi	r3,r2,-1
   5187c:	8c80f636 	bltu	r17,r18,51c58 <__udivdi3+0x500>
   51880:	8d00f52e 	bgeu	r17,r20,51c58 <__udivdi3+0x500>
   51884:	10bfff84 	addi	r2,r2,-2
   51888:	8020943a 	slli	r16,r16,16
   5188c:	0007883a 	mov	r3,zero
   51890:	1404b03a 	or	r2,r2,r16
   51894:	00005b06 	br	51a04 <__udivdi3+0x2ac>
   51898:	29c05836 	bltu	r5,r7,519fc <__udivdi3+0x2a4>
   5189c:	00bfffd4 	movui	r2,65535
   518a0:	11c0642e 	bgeu	r2,r7,51a34 <__udivdi3+0x2dc>
   518a4:	00804034 	movhi	r2,256
   518a8:	10bfffc4 	addi	r2,r2,-1
   518ac:	11c0f32e 	bgeu	r2,r7,51c7c <__udivdi3+0x524>
   518b0:	00c00604 	movi	r3,24
   518b4:	180b883a 	mov	r5,r3
   518b8:	38c6d83a 	srl	r3,r7,r3
   518bc:	008001b4 	movhi	r2,6
   518c0:	10ab0ac4 	addi	r2,r2,-21461
   518c4:	10c7883a 	add	r3,r2,r3
   518c8:	18c00003 	ldbu	r3,0(r3)
   518cc:	01000804 	movi	r4,32
   518d0:	1947883a 	add	r3,r3,r5
   518d4:	20e5c83a 	sub	r18,r4,r3
   518d8:	9000661e 	bne	r18,zero,51a74 <__udivdi3+0x31c>
   518dc:	3c00f936 	bltu	r7,r16,51cc4 <__udivdi3+0x56c>
   518e0:	9985403a 	cmpgeu	r2,r19,r6
   518e4:	0007883a 	mov	r3,zero
   518e8:	00004606 	br	51a04 <__udivdi3+0x2ac>
   518ec:	3000041e 	bne	r6,zero,51900 <__udivdi3+0x1a8>
   518f0:	01000044 	movi	r4,1
   518f4:	000b883a 	mov	r5,zero
   518f8:	0046db40 	call	46db4 <__udivsi3>
   518fc:	1025883a 	mov	r18,r2
   51900:	00bfffd4 	movui	r2,65535
   51904:	1480562e 	bgeu	r2,r18,51a60 <__udivdi3+0x308>
   51908:	00804034 	movhi	r2,256
   5190c:	10bfffc4 	addi	r2,r2,-1
   51910:	1480e32e 	bgeu	r2,r18,51ca0 <__udivdi3+0x548>
   51914:	00800604 	movi	r2,24
   51918:	1007883a 	mov	r3,r2
   5191c:	9084d83a 	srl	r2,r18,r2
   51920:	010001b4 	movhi	r4,6
   51924:	212b0ac4 	addi	r4,r4,-21461
   51928:	2085883a 	add	r2,r4,r2
   5192c:	10800003 	ldbu	r2,0(r2)
   51930:	10c5883a 	add	r2,r2,r3
   51934:	00c00804 	movi	r3,32
   51938:	1887c83a 	sub	r3,r3,r2
   5193c:	1800911e 	bne	r3,zero,51b84 <__udivdi3+0x42c>
   51940:	9028d43a 	srli	r20,r18,16
   51944:	84a1c83a 	sub	r16,r16,r18
   51948:	957fffcc 	andi	r21,r18,65535
   5194c:	00c00044 	movi	r3,1
   51950:	8009883a 	mov	r4,r16
   51954:	a00b883a 	mov	r5,r20
   51958:	d8c00015 	stw	r3,0(sp)
   5195c:	0046dbc0 	call	46dbc <__umodsi3>
   51960:	8009883a 	mov	r4,r16
   51964:	a00b883a 	mov	r5,r20
   51968:	1027883a 	mov	r19,r2
   5196c:	0046db40 	call	46db4 <__udivsi3>
   51970:	1021883a 	mov	r16,r2
   51974:	880cd43a 	srli	r6,r17,16
   51978:	9804943a 	slli	r2,r19,16
   5197c:	8567383a 	mul	r19,r16,r21
   51980:	d8c00017 	ldw	r3,0(sp)
   51984:	1188b03a 	or	r4,r2,r6
   51988:	24c0052e 	bgeu	r4,r19,519a0 <__udivdi3+0x248>
   5198c:	2489883a 	add	r4,r4,r18
   51990:	80bfffc4 	addi	r2,r16,-1
   51994:	24800136 	bltu	r4,r18,5199c <__udivdi3+0x244>
   51998:	24c0d936 	bltu	r4,r19,51d00 <__udivdi3+0x5a8>
   5199c:	1021883a 	mov	r16,r2
   519a0:	24e7c83a 	sub	r19,r4,r19
   519a4:	9809883a 	mov	r4,r19
   519a8:	a00b883a 	mov	r5,r20
   519ac:	d8c00015 	stw	r3,0(sp)
   519b0:	0046dbc0 	call	46dbc <__umodsi3>
   519b4:	102d883a 	mov	r22,r2
   519b8:	9809883a 	mov	r4,r19
   519bc:	a00b883a 	mov	r5,r20
   519c0:	0046db40 	call	46db4 <__udivsi3>
   519c4:	b02c943a 	slli	r22,r22,16
   519c8:	156b383a 	mul	r21,r2,r21
   519cc:	8c7fffcc 	andi	r17,r17,65535
   519d0:	b462b03a 	or	r17,r22,r17
   519d4:	d8c00017 	ldw	r3,0(sp)
   519d8:	8d40052e 	bgeu	r17,r21,519f0 <__udivdi3+0x298>
   519dc:	8ca3883a 	add	r17,r17,r18
   519e0:	113fffc4 	addi	r4,r2,-1
   519e4:	8c809a36 	bltu	r17,r18,51c50 <__udivdi3+0x4f8>
   519e8:	8d40992e 	bgeu	r17,r21,51c50 <__udivdi3+0x4f8>
   519ec:	10bfff84 	addi	r2,r2,-2
   519f0:	8020943a 	slli	r16,r16,16
   519f4:	1404b03a 	or	r2,r2,r16
   519f8:	00000206 	br	51a04 <__udivdi3+0x2ac>
   519fc:	0007883a 	mov	r3,zero
   51a00:	0005883a 	mov	r2,zero
   51a04:	dfc00a17 	ldw	ra,40(sp)
   51a08:	df000917 	ldw	fp,36(sp)
   51a0c:	ddc00817 	ldw	r23,32(sp)
   51a10:	dd800717 	ldw	r22,28(sp)
   51a14:	dd400617 	ldw	r21,24(sp)
   51a18:	dd000517 	ldw	r20,20(sp)
   51a1c:	dcc00417 	ldw	r19,16(sp)
   51a20:	dc800317 	ldw	r18,12(sp)
   51a24:	dc400217 	ldw	r17,8(sp)
   51a28:	dc000117 	ldw	r16,4(sp)
   51a2c:	dec00b04 	addi	sp,sp,44
   51a30:	f800283a 	ret
   51a34:	00803fc4 	movi	r2,255
   51a38:	11c0932e 	bgeu	r2,r7,51c88 <__udivdi3+0x530>
   51a3c:	00c00204 	movi	r3,8
   51a40:	180b883a 	mov	r5,r3
   51a44:	003f9c06 	br	518b8 <__alt_data_end+0xfffea7b8>
   51a48:	00804034 	movhi	r2,256
   51a4c:	10bfffc4 	addi	r2,r2,-1
   51a50:	1180902e 	bgeu	r2,r6,51c94 <__udivdi3+0x53c>
   51a54:	00800604 	movi	r2,24
   51a58:	1007883a 	mov	r3,r2
   51a5c:	003f5606 	br	517b8 <__alt_data_end+0xfffea6b8>
   51a60:	00803fc4 	movi	r2,255
   51a64:	1480912e 	bgeu	r2,r18,51cac <__udivdi3+0x554>
   51a68:	00800204 	movi	r2,8
   51a6c:	1007883a 	mov	r3,r2
   51a70:	003faa06 	br	5191c <__alt_data_end+0xfffea81c>
   51a74:	30eed83a 	srl	r23,r6,r3
   51a78:	3c8e983a 	sll	r7,r7,r18
   51a7c:	80f8d83a 	srl	fp,r16,r3
   51a80:	98c6d83a 	srl	r3,r19,r3
   51a84:	3deeb03a 	or	r23,r7,r23
   51a88:	b828d43a 	srli	r20,r23,16
   51a8c:	84a0983a 	sll	r16,r16,r18
   51a90:	e009883a 	mov	r4,fp
   51a94:	a00b883a 	mov	r5,r20
   51a98:	80e2b03a 	or	r17,r16,r3
   51a9c:	34aa983a 	sll	r21,r6,r18
   51aa0:	0046dbc0 	call	46dbc <__umodsi3>
   51aa4:	e009883a 	mov	r4,fp
   51aa8:	a00b883a 	mov	r5,r20
   51aac:	102d883a 	mov	r22,r2
   51ab0:	0046db40 	call	46db4 <__udivsi3>
   51ab4:	1021883a 	mov	r16,r2
   51ab8:	bf3fffcc 	andi	fp,r23,65535
   51abc:	b004943a 	slli	r2,r22,16
   51ac0:	8808d43a 	srli	r4,r17,16
   51ac4:	872d383a 	mul	r22,r16,fp
   51ac8:	1104b03a 	or	r2,r2,r4
   51acc:	1580042e 	bgeu	r2,r22,51ae0 <__udivdi3+0x388>
   51ad0:	15c5883a 	add	r2,r2,r23
   51ad4:	80ffffc4 	addi	r3,r16,-1
   51ad8:	15c0812e 	bgeu	r2,r23,51ce0 <__udivdi3+0x588>
   51adc:	1821883a 	mov	r16,r3
   51ae0:	15adc83a 	sub	r22,r2,r22
   51ae4:	b009883a 	mov	r4,r22
   51ae8:	a00b883a 	mov	r5,r20
   51aec:	0046dbc0 	call	46dbc <__umodsi3>
   51af0:	a00b883a 	mov	r5,r20
   51af4:	b009883a 	mov	r4,r22
   51af8:	d8800015 	stw	r2,0(sp)
   51afc:	0046db40 	call	46db4 <__udivsi3>
   51b00:	d8c00017 	ldw	r3,0(sp)
   51b04:	170b383a 	mul	r5,r2,fp
   51b08:	8c7fffcc 	andi	r17,r17,65535
   51b0c:	1806943a 	slli	r3,r3,16
   51b10:	1c46b03a 	or	r3,r3,r17
   51b14:	1940042e 	bgeu	r3,r5,51b28 <__udivdi3+0x3d0>
   51b18:	1dc7883a 	add	r3,r3,r23
   51b1c:	113fffc4 	addi	r4,r2,-1
   51b20:	1dc06b2e 	bgeu	r3,r23,51cd0 <__udivdi3+0x578>
   51b24:	2005883a 	mov	r2,r4
   51b28:	8020943a 	slli	r16,r16,16
   51b2c:	a9ffffcc 	andi	r7,r21,65535
   51b30:	a82ad43a 	srli	r21,r21,16
   51b34:	1404b03a 	or	r2,r2,r16
   51b38:	113fffcc 	andi	r4,r2,65535
   51b3c:	100cd43a 	srli	r6,r2,16
   51b40:	21d3383a 	mul	r9,r4,r7
   51b44:	2549383a 	mul	r4,r4,r21
   51b48:	31cf383a 	mul	r7,r6,r7
   51b4c:	4810d43a 	srli	r8,r9,16
   51b50:	1947c83a 	sub	r3,r3,r5
   51b54:	3909883a 	add	r4,r7,r4
   51b58:	2209883a 	add	r4,r4,r8
   51b5c:	354d383a 	mul	r6,r6,r21
   51b60:	21c0022e 	bgeu	r4,r7,51b6c <__udivdi3+0x414>
   51b64:	01400074 	movhi	r5,1
   51b68:	314d883a 	add	r6,r6,r5
   51b6c:	202ad43a 	srli	r21,r4,16
   51b70:	354d883a 	add	r6,r6,r21
   51b74:	19803f36 	bltu	r3,r6,51c74 <__udivdi3+0x51c>
   51b78:	19803926 	beq	r3,r6,51c60 <__udivdi3+0x508>
   51b7c:	0007883a 	mov	r3,zero
   51b80:	003fa006 	br	51a04 <__alt_data_end+0xfffea904>
   51b84:	90e4983a 	sll	r18,r18,r3
   51b88:	80aad83a 	srl	r21,r16,r2
   51b8c:	80e0983a 	sll	r16,r16,r3
   51b90:	9028d43a 	srli	r20,r18,16
   51b94:	9884d83a 	srl	r2,r19,r2
   51b98:	a809883a 	mov	r4,r21
   51b9c:	a00b883a 	mov	r5,r20
   51ba0:	80acb03a 	or	r22,r16,r2
   51ba4:	98e2983a 	sll	r17,r19,r3
   51ba8:	0046dbc0 	call	46dbc <__umodsi3>
   51bac:	a809883a 	mov	r4,r21
   51bb0:	a00b883a 	mov	r5,r20
   51bb4:	1021883a 	mov	r16,r2
   51bb8:	0046db40 	call	46db4 <__udivsi3>
   51bbc:	957fffcc 	andi	r21,r18,65535
   51bc0:	8020943a 	slli	r16,r16,16
   51bc4:	b00ad43a 	srli	r5,r22,16
   51bc8:	1567383a 	mul	r19,r2,r21
   51bcc:	102f883a 	mov	r23,r2
   51bd0:	8148b03a 	or	r4,r16,r5
   51bd4:	24c0062e 	bgeu	r4,r19,51bf0 <__udivdi3+0x498>
   51bd8:	2489883a 	add	r4,r4,r18
   51bdc:	10bfffc4 	addi	r2,r2,-1
   51be0:	24804536 	bltu	r4,r18,51cf8 <__udivdi3+0x5a0>
   51be4:	24c0442e 	bgeu	r4,r19,51cf8 <__udivdi3+0x5a0>
   51be8:	bdffff84 	addi	r23,r23,-2
   51bec:	2489883a 	add	r4,r4,r18
   51bf0:	24e7c83a 	sub	r19,r4,r19
   51bf4:	9809883a 	mov	r4,r19
   51bf8:	a00b883a 	mov	r5,r20
   51bfc:	0046dbc0 	call	46dbc <__umodsi3>
   51c00:	1021883a 	mov	r16,r2
   51c04:	9809883a 	mov	r4,r19
   51c08:	a00b883a 	mov	r5,r20
   51c0c:	0046db40 	call	46db4 <__udivsi3>
   51c10:	8020943a 	slli	r16,r16,16
   51c14:	1007883a 	mov	r3,r2
   51c18:	1545383a 	mul	r2,r2,r21
   51c1c:	b13fffcc 	andi	r4,r22,65535
   51c20:	8108b03a 	or	r4,r16,r4
   51c24:	2080062e 	bgeu	r4,r2,51c40 <__udivdi3+0x4e8>
   51c28:	2489883a 	add	r4,r4,r18
   51c2c:	197fffc4 	addi	r5,r3,-1
   51c30:	24802f36 	bltu	r4,r18,51cf0 <__udivdi3+0x598>
   51c34:	20802e2e 	bgeu	r4,r2,51cf0 <__udivdi3+0x598>
   51c38:	18ffff84 	addi	r3,r3,-2
   51c3c:	2489883a 	add	r4,r4,r18
   51c40:	b82e943a 	slli	r23,r23,16
   51c44:	20a1c83a 	sub	r16,r4,r2
   51c48:	1dc6b03a 	or	r3,r3,r23
   51c4c:	003f4006 	br	51950 <__alt_data_end+0xfffea850>
   51c50:	2005883a 	mov	r2,r4
   51c54:	003f6606 	br	519f0 <__alt_data_end+0xfffea8f0>
   51c58:	1805883a 	mov	r2,r3
   51c5c:	003f0a06 	br	51888 <__alt_data_end+0xfffea788>
   51c60:	2006943a 	slli	r3,r4,16
   51c64:	9c88983a 	sll	r4,r19,r18
   51c68:	4a7fffcc 	andi	r9,r9,65535
   51c6c:	1a47883a 	add	r3,r3,r9
   51c70:	20ffc22e 	bgeu	r4,r3,51b7c <__alt_data_end+0xfffeaa7c>
   51c74:	10bfffc4 	addi	r2,r2,-1
   51c78:	003fc006 	br	51b7c <__alt_data_end+0xfffeaa7c>
   51c7c:	00c00404 	movi	r3,16
   51c80:	180b883a 	mov	r5,r3
   51c84:	003f0c06 	br	518b8 <__alt_data_end+0xfffea7b8>
   51c88:	0007883a 	mov	r3,zero
   51c8c:	000b883a 	mov	r5,zero
   51c90:	003f0906 	br	518b8 <__alt_data_end+0xfffea7b8>
   51c94:	00800404 	movi	r2,16
   51c98:	1007883a 	mov	r3,r2
   51c9c:	003ec606 	br	517b8 <__alt_data_end+0xfffea6b8>
   51ca0:	00800404 	movi	r2,16
   51ca4:	1007883a 	mov	r3,r2
   51ca8:	003f1c06 	br	5191c <__alt_data_end+0xfffea81c>
   51cac:	0005883a 	mov	r2,zero
   51cb0:	0007883a 	mov	r3,zero
   51cb4:	003f1906 	br	5191c <__alt_data_end+0xfffea81c>
   51cb8:	0005883a 	mov	r2,zero
   51cbc:	0007883a 	mov	r3,zero
   51cc0:	003ebd06 	br	517b8 <__alt_data_end+0xfffea6b8>
   51cc4:	0007883a 	mov	r3,zero
   51cc8:	00800044 	movi	r2,1
   51ccc:	003f4d06 	br	51a04 <__alt_data_end+0xfffea904>
   51cd0:	197f942e 	bgeu	r3,r5,51b24 <__alt_data_end+0xfffeaa24>
   51cd4:	10bfff84 	addi	r2,r2,-2
   51cd8:	1dc7883a 	add	r3,r3,r23
   51cdc:	003f9206 	br	51b28 <__alt_data_end+0xfffeaa28>
   51ce0:	15bf7e2e 	bgeu	r2,r22,51adc <__alt_data_end+0xfffea9dc>
   51ce4:	843fff84 	addi	r16,r16,-2
   51ce8:	15c5883a 	add	r2,r2,r23
   51cec:	003f7c06 	br	51ae0 <__alt_data_end+0xfffea9e0>
   51cf0:	2807883a 	mov	r3,r5
   51cf4:	003fd206 	br	51c40 <__alt_data_end+0xfffeab40>
   51cf8:	102f883a 	mov	r23,r2
   51cfc:	003fbc06 	br	51bf0 <__alt_data_end+0xfffeaaf0>
   51d00:	843fff84 	addi	r16,r16,-2
   51d04:	2489883a 	add	r4,r4,r18
   51d08:	003f2506 	br	519a0 <__alt_data_end+0xfffea8a0>
   51d0c:	843fff84 	addi	r16,r16,-2
   51d10:	1485883a 	add	r2,r2,r18
   51d14:	003eca06 	br	51840 <__alt_data_end+0xfffea740>

00051d18 <__umoddi3>:
   51d18:	defff404 	addi	sp,sp,-48
   51d1c:	ddc00915 	stw	r23,36(sp)
   51d20:	dc400315 	stw	r17,12(sp)
   51d24:	dc000215 	stw	r16,8(sp)
   51d28:	dfc00b15 	stw	ra,44(sp)
   51d2c:	df000a15 	stw	fp,40(sp)
   51d30:	dd800815 	stw	r22,32(sp)
   51d34:	dd400715 	stw	r21,28(sp)
   51d38:	dd000615 	stw	r20,24(sp)
   51d3c:	dcc00515 	stw	r19,20(sp)
   51d40:	dc800415 	stw	r18,16(sp)
   51d44:	2021883a 	mov	r16,r4
   51d48:	2823883a 	mov	r17,r5
   51d4c:	282f883a 	mov	r23,r5
   51d50:	3800381e 	bne	r7,zero,51e34 <__umoddi3+0x11c>
   51d54:	3027883a 	mov	r19,r6
   51d58:	2029883a 	mov	r20,r4
   51d5c:	29804e2e 	bgeu	r5,r6,51e98 <__umoddi3+0x180>
   51d60:	00bfffd4 	movui	r2,65535
   51d64:	11809c36 	bltu	r2,r6,51fd8 <__umoddi3+0x2c0>
   51d68:	00803fc4 	movi	r2,255
   51d6c:	11813b2e 	bgeu	r2,r6,5225c <__umoddi3+0x544>
   51d70:	01400204 	movi	r5,8
   51d74:	2805883a 	mov	r2,r5
   51d78:	314ad83a 	srl	r5,r6,r5
   51d7c:	00c001b4 	movhi	r3,6
   51d80:	18eb0ac4 	addi	r3,r3,-21461
   51d84:	194b883a 	add	r5,r3,r5
   51d88:	29000003 	ldbu	r4,0(r5)
   51d8c:	2089883a 	add	r4,r4,r2
   51d90:	00800804 	movi	r2,32
   51d94:	1105c83a 	sub	r2,r2,r4
   51d98:	1000ec26 	beq	r2,zero,5214c <__umoddi3+0x434>
   51d9c:	88a2983a 	sll	r17,r17,r2
   51da0:	8108d83a 	srl	r4,r16,r4
   51da4:	30a6983a 	sll	r19,r6,r2
   51da8:	80a8983a 	sll	r20,r16,r2
   51dac:	1025883a 	mov	r18,r2
   51db0:	892eb03a 	or	r23,r17,r4
   51db4:	982cd43a 	srli	r22,r19,16
   51db8:	b809883a 	mov	r4,r23
   51dbc:	9d7fffcc 	andi	r21,r19,65535
   51dc0:	b00b883a 	mov	r5,r22
   51dc4:	0046dbc0 	call	46dbc <__umodsi3>
   51dc8:	b809883a 	mov	r4,r23
   51dcc:	b00b883a 	mov	r5,r22
   51dd0:	1021883a 	mov	r16,r2
   51dd4:	0046db40 	call	46db4 <__udivsi3>
   51dd8:	8020943a 	slli	r16,r16,16
   51ddc:	a00cd43a 	srli	r6,r20,16
   51de0:	1545383a 	mul	r2,r2,r21
   51de4:	8188b03a 	or	r4,r16,r6
   51de8:	2080042e 	bgeu	r4,r2,51dfc <__umoddi3+0xe4>
   51dec:	24c9883a 	add	r4,r4,r19
   51df0:	24c00236 	bltu	r4,r19,51dfc <__umoddi3+0xe4>
   51df4:	2080012e 	bgeu	r4,r2,51dfc <__umoddi3+0xe4>
   51df8:	24c9883a 	add	r4,r4,r19
   51dfc:	20a3c83a 	sub	r17,r4,r2
   51e00:	8809883a 	mov	r4,r17
   51e04:	b00b883a 	mov	r5,r22
   51e08:	0046dbc0 	call	46dbc <__umodsi3>
   51e0c:	8809883a 	mov	r4,r17
   51e10:	b00b883a 	mov	r5,r22
   51e14:	1021883a 	mov	r16,r2
   51e18:	0046db40 	call	46db4 <__udivsi3>
   51e1c:	8006943a 	slli	r3,r16,16
   51e20:	1545383a 	mul	r2,r2,r21
   51e24:	a13fffcc 	andi	r4,r20,65535
   51e28:	1906b03a 	or	r3,r3,r4
   51e2c:	1880532e 	bgeu	r3,r2,51f7c <__umoddi3+0x264>
   51e30:	00004e06 	br	51f6c <__umoddi3+0x254>
   51e34:	29c05536 	bltu	r5,r7,51f8c <__umoddi3+0x274>
   51e38:	00bfffd4 	movui	r2,65535
   51e3c:	11c0612e 	bgeu	r2,r7,51fc4 <__umoddi3+0x2ac>
   51e40:	00804034 	movhi	r2,256
   51e44:	10bfffc4 	addi	r2,r2,-1
   51e48:	11c0f82e 	bgeu	r2,r7,5222c <__umoddi3+0x514>
   51e4c:	01400604 	movi	r5,24
   51e50:	282b883a 	mov	r21,r5
   51e54:	394ad83a 	srl	r5,r7,r5
   51e58:	00c001b4 	movhi	r3,6
   51e5c:	18eb0ac4 	addi	r3,r3,-21461
   51e60:	194b883a 	add	r5,r3,r5
   51e64:	28800003 	ldbu	r2,0(r5)
   51e68:	00c00804 	movi	r3,32
   51e6c:	156b883a 	add	r21,r2,r21
   51e70:	1d69c83a 	sub	r20,r3,r21
   51e74:	a000631e 	bne	r20,zero,52004 <__umoddi3+0x2ec>
   51e78:	3c400136 	bltu	r7,r17,51e80 <__umoddi3+0x168>
   51e7c:	81810436 	bltu	r16,r6,52290 <__umoddi3+0x578>
   51e80:	8185c83a 	sub	r2,r16,r6
   51e84:	89e3c83a 	sub	r17,r17,r7
   51e88:	8087803a 	cmpltu	r3,r16,r2
   51e8c:	88efc83a 	sub	r23,r17,r3
   51e90:	b807883a 	mov	r3,r23
   51e94:	00003f06 	br	51f94 <__umoddi3+0x27c>
   51e98:	3000041e 	bne	r6,zero,51eac <__umoddi3+0x194>
   51e9c:	01000044 	movi	r4,1
   51ea0:	000b883a 	mov	r5,zero
   51ea4:	0046db40 	call	46db4 <__udivsi3>
   51ea8:	1027883a 	mov	r19,r2
   51eac:	00bfffd4 	movui	r2,65535
   51eb0:	14c04f2e 	bgeu	r2,r19,51ff0 <__umoddi3+0x2d8>
   51eb4:	00804034 	movhi	r2,256
   51eb8:	10bfffc4 	addi	r2,r2,-1
   51ebc:	14c0e42e 	bgeu	r2,r19,52250 <__umoddi3+0x538>
   51ec0:	00800604 	movi	r2,24
   51ec4:	1007883a 	mov	r3,r2
   51ec8:	9884d83a 	srl	r2,r19,r2
   51ecc:	010001b4 	movhi	r4,6
   51ed0:	212b0ac4 	addi	r4,r4,-21461
   51ed4:	2085883a 	add	r2,r4,r2
   51ed8:	11000003 	ldbu	r4,0(r2)
   51edc:	00800804 	movi	r2,32
   51ee0:	20c7883a 	add	r3,r4,r3
   51ee4:	10c5c83a 	sub	r2,r2,r3
   51ee8:	10009a1e 	bne	r2,zero,52154 <__umoddi3+0x43c>
   51eec:	982cd43a 	srli	r22,r19,16
   51ef0:	8ce3c83a 	sub	r17,r17,r19
   51ef4:	9c3fffcc 	andi	r16,r19,65535
   51ef8:	0025883a 	mov	r18,zero
   51efc:	8809883a 	mov	r4,r17
   51f00:	b00b883a 	mov	r5,r22
   51f04:	0046dbc0 	call	46dbc <__umodsi3>
   51f08:	8809883a 	mov	r4,r17
   51f0c:	b00b883a 	mov	r5,r22
   51f10:	102b883a 	mov	r21,r2
   51f14:	0046db40 	call	46db4 <__udivsi3>
   51f18:	a806943a 	slli	r3,r21,16
   51f1c:	a008d43a 	srli	r4,r20,16
   51f20:	1405383a 	mul	r2,r2,r16
   51f24:	190cb03a 	or	r6,r3,r4
   51f28:	3080032e 	bgeu	r6,r2,51f38 <__umoddi3+0x220>
   51f2c:	34cd883a 	add	r6,r6,r19
   51f30:	34c00136 	bltu	r6,r19,51f38 <__umoddi3+0x220>
   51f34:	3080d436 	bltu	r6,r2,52288 <__umoddi3+0x570>
   51f38:	30abc83a 	sub	r21,r6,r2
   51f3c:	a809883a 	mov	r4,r21
   51f40:	b00b883a 	mov	r5,r22
   51f44:	0046dbc0 	call	46dbc <__umodsi3>
   51f48:	1023883a 	mov	r17,r2
   51f4c:	a809883a 	mov	r4,r21
   51f50:	b00b883a 	mov	r5,r22
   51f54:	0046db40 	call	46db4 <__udivsi3>
   51f58:	8822943a 	slli	r17,r17,16
   51f5c:	1405383a 	mul	r2,r2,r16
   51f60:	a13fffcc 	andi	r4,r20,65535
   51f64:	8906b03a 	or	r3,r17,r4
   51f68:	1880042e 	bgeu	r3,r2,51f7c <__umoddi3+0x264>
   51f6c:	1cc7883a 	add	r3,r3,r19
   51f70:	1cc00236 	bltu	r3,r19,51f7c <__umoddi3+0x264>
   51f74:	1880012e 	bgeu	r3,r2,51f7c <__umoddi3+0x264>
   51f78:	1cc7883a 	add	r3,r3,r19
   51f7c:	1887c83a 	sub	r3,r3,r2
   51f80:	1c84d83a 	srl	r2,r3,r18
   51f84:	0007883a 	mov	r3,zero
   51f88:	00000206 	br	51f94 <__umoddi3+0x27c>
   51f8c:	2005883a 	mov	r2,r4
   51f90:	2807883a 	mov	r3,r5
   51f94:	dfc00b17 	ldw	ra,44(sp)
   51f98:	df000a17 	ldw	fp,40(sp)
   51f9c:	ddc00917 	ldw	r23,36(sp)
   51fa0:	dd800817 	ldw	r22,32(sp)
   51fa4:	dd400717 	ldw	r21,28(sp)
   51fa8:	dd000617 	ldw	r20,24(sp)
   51fac:	dcc00517 	ldw	r19,20(sp)
   51fb0:	dc800417 	ldw	r18,16(sp)
   51fb4:	dc400317 	ldw	r17,12(sp)
   51fb8:	dc000217 	ldw	r16,8(sp)
   51fbc:	dec00c04 	addi	sp,sp,48
   51fc0:	f800283a 	ret
   51fc4:	00803fc4 	movi	r2,255
   51fc8:	11c0952e 	bgeu	r2,r7,52220 <__umoddi3+0x508>
   51fcc:	01400204 	movi	r5,8
   51fd0:	282b883a 	mov	r21,r5
   51fd4:	003f9f06 	br	51e54 <__alt_data_end+0xfffead54>
   51fd8:	00804034 	movhi	r2,256
   51fdc:	10bfffc4 	addi	r2,r2,-1
   51fe0:	1180952e 	bgeu	r2,r6,52238 <__umoddi3+0x520>
   51fe4:	01400604 	movi	r5,24
   51fe8:	2805883a 	mov	r2,r5
   51fec:	003f6206 	br	51d78 <__alt_data_end+0xfffeac78>
   51ff0:	00803fc4 	movi	r2,255
   51ff4:	14c0932e 	bgeu	r2,r19,52244 <__umoddi3+0x52c>
   51ff8:	00800204 	movi	r2,8
   51ffc:	1007883a 	mov	r3,r2
   52000:	003fb106 	br	51ec8 <__alt_data_end+0xfffeadc8>
   52004:	3548d83a 	srl	r4,r6,r21
   52008:	3d0e983a 	sll	r7,r7,r20
   5200c:	8d10983a 	sll	r8,r17,r20
   52010:	8d6cd83a 	srl	r22,r17,r21
   52014:	3922b03a 	or	r17,r7,r4
   52018:	882ed43a 	srli	r23,r17,16
   5201c:	8564d83a 	srl	r18,r16,r21
   52020:	b009883a 	mov	r4,r22
   52024:	b80b883a 	mov	r5,r23
   52028:	44a4b03a 	or	r18,r8,r18
   5202c:	3526983a 	sll	r19,r6,r20
   52030:	0046dbc0 	call	46dbc <__umodsi3>
   52034:	b009883a 	mov	r4,r22
   52038:	b80b883a 	mov	r5,r23
   5203c:	1039883a 	mov	fp,r2
   52040:	0046db40 	call	46db4 <__udivsi3>
   52044:	102d883a 	mov	r22,r2
   52048:	8a3fffcc 	andi	r8,r17,65535
   5204c:	e004943a 	slli	r2,fp,16
   52050:	900cd43a 	srli	r6,r18,16
   52054:	b239383a 	mul	fp,r22,r8
   52058:	8520983a 	sll	r16,r16,r20
   5205c:	118ab03a 	or	r5,r2,r6
   52060:	2f00042e 	bgeu	r5,fp,52074 <__umoddi3+0x35c>
   52064:	2c4b883a 	add	r5,r5,r17
   52068:	b0bfffc4 	addi	r2,r22,-1
   5206c:	2c40822e 	bgeu	r5,r17,52278 <__umoddi3+0x560>
   52070:	102d883a 	mov	r22,r2
   52074:	2f39c83a 	sub	fp,r5,fp
   52078:	e009883a 	mov	r4,fp
   5207c:	b80b883a 	mov	r5,r23
   52080:	da000115 	stw	r8,4(sp)
   52084:	0046dbc0 	call	46dbc <__umodsi3>
   52088:	e009883a 	mov	r4,fp
   5208c:	b80b883a 	mov	r5,r23
   52090:	d8800015 	stw	r2,0(sp)
   52094:	0046db40 	call	46db4 <__udivsi3>
   52098:	d9800017 	ldw	r6,0(sp)
   5209c:	da000117 	ldw	r8,4(sp)
   520a0:	94bfffcc 	andi	r18,r18,65535
   520a4:	300c943a 	slli	r6,r6,16
   520a8:	1209383a 	mul	r4,r2,r8
   520ac:	3490b03a 	or	r8,r6,r18
   520b0:	4100042e 	bgeu	r8,r4,520c4 <__umoddi3+0x3ac>
   520b4:	4451883a 	add	r8,r8,r17
   520b8:	10ffffc4 	addi	r3,r2,-1
   520bc:	44406a2e 	bgeu	r8,r17,52268 <__umoddi3+0x550>
   520c0:	1805883a 	mov	r2,r3
   520c4:	b012943a 	slli	r9,r22,16
   520c8:	9abfffcc 	andi	r10,r19,65535
   520cc:	980ed43a 	srli	r7,r19,16
   520d0:	124ab03a 	or	r5,r2,r9
   520d4:	2a7fffcc 	andi	r9,r5,65535
   520d8:	280ad43a 	srli	r5,r5,16
   520dc:	4a8d383a 	mul	r6,r9,r10
   520e0:	49d3383a 	mul	r9,r9,r7
   520e4:	2a95383a 	mul	r10,r5,r10
   520e8:	3004d43a 	srli	r2,r6,16
   520ec:	4111c83a 	sub	r8,r8,r4
   520f0:	5253883a 	add	r9,r10,r9
   520f4:	4893883a 	add	r9,r9,r2
   520f8:	29cb383a 	mul	r5,r5,r7
   520fc:	4a80022e 	bgeu	r9,r10,52108 <__umoddi3+0x3f0>
   52100:	00800074 	movhi	r2,1
   52104:	288b883a 	add	r5,r5,r2
   52108:	4808d43a 	srli	r4,r9,16
   5210c:	4812943a 	slli	r9,r9,16
   52110:	31bfffcc 	andi	r6,r6,65535
   52114:	290b883a 	add	r5,r5,r4
   52118:	498d883a 	add	r6,r9,r6
   5211c:	41403a36 	bltu	r8,r5,52208 <__umoddi3+0x4f0>
   52120:	41405d26 	beq	r8,r5,52298 <__umoddi3+0x580>
   52124:	4149c83a 	sub	r4,r8,r5
   52128:	300f883a 	mov	r7,r6
   5212c:	81cfc83a 	sub	r7,r16,r7
   52130:	81c7803a 	cmpltu	r3,r16,r7
   52134:	20c7c83a 	sub	r3,r4,r3
   52138:	1d44983a 	sll	r2,r3,r21
   5213c:	3d0ed83a 	srl	r7,r7,r20
   52140:	1d06d83a 	srl	r3,r3,r20
   52144:	11c4b03a 	or	r2,r2,r7
   52148:	003f9206 	br	51f94 <__alt_data_end+0xfffeae94>
   5214c:	0025883a 	mov	r18,zero
   52150:	003f1806 	br	51db4 <__alt_data_end+0xfffeacb4>
   52154:	98a6983a 	sll	r19,r19,r2
   52158:	88e8d83a 	srl	r20,r17,r3
   5215c:	80c6d83a 	srl	r3,r16,r3
   52160:	982cd43a 	srli	r22,r19,16
   52164:	88a2983a 	sll	r17,r17,r2
   52168:	a009883a 	mov	r4,r20
   5216c:	b00b883a 	mov	r5,r22
   52170:	88eab03a 	or	r21,r17,r3
   52174:	1025883a 	mov	r18,r2
   52178:	0046dbc0 	call	46dbc <__umodsi3>
   5217c:	a009883a 	mov	r4,r20
   52180:	b00b883a 	mov	r5,r22
   52184:	1023883a 	mov	r17,r2
   52188:	0046db40 	call	46db4 <__udivsi3>
   5218c:	9f3fffcc 	andi	fp,r19,65535
   52190:	8822943a 	slli	r17,r17,16
   52194:	a80ad43a 	srli	r5,r21,16
   52198:	1705383a 	mul	r2,r2,fp
   5219c:	84a8983a 	sll	r20,r16,r18
   521a0:	8948b03a 	or	r4,r17,r5
   521a4:	2080042e 	bgeu	r4,r2,521b8 <__umoddi3+0x4a0>
   521a8:	24c9883a 	add	r4,r4,r19
   521ac:	24c00236 	bltu	r4,r19,521b8 <__umoddi3+0x4a0>
   521b0:	2080012e 	bgeu	r4,r2,521b8 <__umoddi3+0x4a0>
   521b4:	24c9883a 	add	r4,r4,r19
   521b8:	20afc83a 	sub	r23,r4,r2
   521bc:	b809883a 	mov	r4,r23
   521c0:	b00b883a 	mov	r5,r22
   521c4:	0046dbc0 	call	46dbc <__umodsi3>
   521c8:	1023883a 	mov	r17,r2
   521cc:	b809883a 	mov	r4,r23
   521d0:	b00b883a 	mov	r5,r22
   521d4:	0046db40 	call	46db4 <__udivsi3>
   521d8:	8822943a 	slli	r17,r17,16
   521dc:	1705383a 	mul	r2,r2,fp
   521e0:	a93fffcc 	andi	r4,r21,65535
   521e4:	8908b03a 	or	r4,r17,r4
   521e8:	2080042e 	bgeu	r4,r2,521fc <__umoddi3+0x4e4>
   521ec:	24c9883a 	add	r4,r4,r19
   521f0:	24c00236 	bltu	r4,r19,521fc <__umoddi3+0x4e4>
   521f4:	2080012e 	bgeu	r4,r2,521fc <__umoddi3+0x4e4>
   521f8:	24c9883a 	add	r4,r4,r19
   521fc:	20a3c83a 	sub	r17,r4,r2
   52200:	e021883a 	mov	r16,fp
   52204:	003f3d06 	br	51efc <__alt_data_end+0xfffeadfc>
   52208:	34cfc83a 	sub	r7,r6,r19
   5220c:	2c4bc83a 	sub	r5,r5,r17
   52210:	31cd803a 	cmpltu	r6,r6,r7
   52214:	298dc83a 	sub	r6,r5,r6
   52218:	4189c83a 	sub	r4,r8,r6
   5221c:	003fc306 	br	5212c <__alt_data_end+0xfffeb02c>
   52220:	000b883a 	mov	r5,zero
   52224:	002b883a 	mov	r21,zero
   52228:	003f0a06 	br	51e54 <__alt_data_end+0xfffead54>
   5222c:	01400404 	movi	r5,16
   52230:	282b883a 	mov	r21,r5
   52234:	003f0706 	br	51e54 <__alt_data_end+0xfffead54>
   52238:	01400404 	movi	r5,16
   5223c:	2805883a 	mov	r2,r5
   52240:	003ecd06 	br	51d78 <__alt_data_end+0xfffeac78>
   52244:	0005883a 	mov	r2,zero
   52248:	0007883a 	mov	r3,zero
   5224c:	003f1e06 	br	51ec8 <__alt_data_end+0xfffeadc8>
   52250:	00800404 	movi	r2,16
   52254:	1007883a 	mov	r3,r2
   52258:	003f1b06 	br	51ec8 <__alt_data_end+0xfffeadc8>
   5225c:	000b883a 	mov	r5,zero
   52260:	0005883a 	mov	r2,zero
   52264:	003ec406 	br	51d78 <__alt_data_end+0xfffeac78>
   52268:	413f952e 	bgeu	r8,r4,520c0 <__alt_data_end+0xfffeafc0>
   5226c:	10bfff84 	addi	r2,r2,-2
   52270:	4451883a 	add	r8,r8,r17
   52274:	003f9306 	br	520c4 <__alt_data_end+0xfffeafc4>
   52278:	2f3f7d2e 	bgeu	r5,fp,52070 <__alt_data_end+0xfffeaf70>
   5227c:	b5bfff84 	addi	r22,r22,-2
   52280:	2c4b883a 	add	r5,r5,r17
   52284:	003f7b06 	br	52074 <__alt_data_end+0xfffeaf74>
   52288:	34cd883a 	add	r6,r6,r19
   5228c:	003f2a06 	br	51f38 <__alt_data_end+0xfffeae38>
   52290:	8005883a 	mov	r2,r16
   52294:	003efe06 	br	51e90 <__alt_data_end+0xfffead90>
   52298:	81bfdb36 	bltu	r16,r6,52208 <__alt_data_end+0xfffeb108>
   5229c:	300f883a 	mov	r7,r6
   522a0:	0009883a 	mov	r4,zero
   522a4:	003fa106 	br	5212c <__alt_data_end+0xfffeb02c>

000522a8 <__adddf3>:
   522a8:	02000434 	movhi	r8,16
   522ac:	423fffc4 	addi	r8,r8,-1
   522b0:	defffb04 	addi	sp,sp,-20
   522b4:	2a12703a 	and	r9,r5,r8
   522b8:	2806d7fa 	srli	r3,r5,31
   522bc:	3a10703a 	and	r8,r7,r8
   522c0:	3804d53a 	srli	r2,r7,20
   522c4:	3014d77a 	srli	r10,r6,29
   522c8:	dc000015 	stw	r16,0(sp)
   522cc:	481290fa 	slli	r9,r9,3
   522d0:	2820d53a 	srli	r16,r5,20
   522d4:	401090fa 	slli	r8,r8,3
   522d8:	200ad77a 	srli	r5,r4,29
   522dc:	380ed7fa 	srli	r7,r7,31
   522e0:	dc800215 	stw	r18,8(sp)
   522e4:	dc400115 	stw	r17,4(sp)
   522e8:	dfc00415 	stw	ra,16(sp)
   522ec:	dcc00315 	stw	r19,12(sp)
   522f0:	1c803fcc 	andi	r18,r3,255
   522f4:	8401ffcc 	andi	r16,r16,2047
   522f8:	494ab03a 	or	r5,r9,r5
   522fc:	202290fa 	slli	r17,r4,3
   52300:	1081ffcc 	andi	r2,r2,2047
   52304:	4290b03a 	or	r8,r8,r10
   52308:	300c90fa 	slli	r6,r6,3
   5230c:	91c07026 	beq	r18,r7,524d0 <__adddf3+0x228>
   52310:	8087c83a 	sub	r3,r16,r2
   52314:	00c0b30e 	bge	zero,r3,525e4 <__adddf3+0x33c>
   52318:	10002a1e 	bne	r2,zero,523c4 <__adddf3+0x11c>
   5231c:	4184b03a 	or	r2,r8,r6
   52320:	1000991e 	bne	r2,zero,52588 <__adddf3+0x2e0>
   52324:	888001cc 	andi	r2,r17,7
   52328:	10005b26 	beq	r2,zero,52498 <__adddf3+0x1f0>
   5232c:	88c003cc 	andi	r3,r17,15
   52330:	00800104 	movi	r2,4
   52334:	18805826 	beq	r3,r2,52498 <__adddf3+0x1f0>
   52338:	89800104 	addi	r6,r17,4
   5233c:	3463803a 	cmpltu	r17,r6,r17
   52340:	2c4b883a 	add	r5,r5,r17
   52344:	2880202c 	andhi	r2,r5,128
   52348:	9007883a 	mov	r3,r18
   5234c:	3023883a 	mov	r17,r6
   52350:	10005426 	beq	r2,zero,524a4 <__adddf3+0x1fc>
   52354:	84000044 	addi	r16,r16,1
   52358:	0081ffc4 	movi	r2,2047
   5235c:	8080c126 	beq	r16,r2,52664 <__adddf3+0x3bc>
   52360:	013fe034 	movhi	r4,65408
   52364:	213fffc4 	addi	r4,r4,-1
   52368:	290a703a 	and	r5,r5,r4
   5236c:	2804977a 	slli	r2,r5,29
   52370:	280a927a 	slli	r5,r5,9
   52374:	8822d0fa 	srli	r17,r17,3
   52378:	8401ffcc 	andi	r16,r16,2047
   5237c:	2808d33a 	srli	r4,r5,12
   52380:	1444b03a 	or	r2,r2,r17
   52384:	8401ffcc 	andi	r16,r16,2047
   52388:	800a953a 	slli	r5,r16,20
   5238c:	18c03fcc 	andi	r3,r3,255
   52390:	04000434 	movhi	r16,16
   52394:	180697fa 	slli	r3,r3,31
   52398:	843fffc4 	addi	r16,r16,-1
   5239c:	2420703a 	and	r16,r4,r16
   523a0:	8160b03a 	or	r16,r16,r5
   523a4:	80c6b03a 	or	r3,r16,r3
   523a8:	dfc00417 	ldw	ra,16(sp)
   523ac:	dcc00317 	ldw	r19,12(sp)
   523b0:	dc800217 	ldw	r18,8(sp)
   523b4:	dc400117 	ldw	r17,4(sp)
   523b8:	dc000017 	ldw	r16,0(sp)
   523bc:	dec00504 	addi	sp,sp,20
   523c0:	f800283a 	ret
   523c4:	0081ffc4 	movi	r2,2047
   523c8:	80bfd626 	beq	r16,r2,52324 <__alt_data_end+0xfffeb224>
   523cc:	42002034 	orhi	r8,r8,128
   523d0:	00800e04 	movi	r2,56
   523d4:	10c0a616 	blt	r2,r3,52670 <__adddf3+0x3c8>
   523d8:	008007c4 	movi	r2,31
   523dc:	10c0c916 	blt	r2,r3,52704 <__adddf3+0x45c>
   523e0:	00800804 	movi	r2,32
   523e4:	10c5c83a 	sub	r2,r2,r3
   523e8:	408e983a 	sll	r7,r8,r2
   523ec:	30c8d83a 	srl	r4,r6,r3
   523f0:	3084983a 	sll	r2,r6,r2
   523f4:	40c6d83a 	srl	r3,r8,r3
   523f8:	390cb03a 	or	r6,r7,r4
   523fc:	1004c03a 	cmpne	r2,r2,zero
   52400:	308cb03a 	or	r6,r6,r2
   52404:	898dc83a 	sub	r6,r17,r6
   52408:	89a3803a 	cmpltu	r17,r17,r6
   5240c:	28cbc83a 	sub	r5,r5,r3
   52410:	2c4bc83a 	sub	r5,r5,r17
   52414:	3023883a 	mov	r17,r6
   52418:	2880202c 	andhi	r2,r5,128
   5241c:	10006d26 	beq	r2,zero,525d4 <__adddf3+0x32c>
   52420:	04c02034 	movhi	r19,128
   52424:	9cffffc4 	addi	r19,r19,-1
   52428:	2ce6703a 	and	r19,r5,r19
   5242c:	98007e26 	beq	r19,zero,52628 <__adddf3+0x380>
   52430:	9809883a 	mov	r4,r19
   52434:	0047d380 	call	47d38 <__clzsi2>
   52438:	10fffe04 	addi	r3,r2,-8
   5243c:	010007c4 	movi	r4,31
   52440:	20c07f16 	blt	r4,r3,52640 <__adddf3+0x398>
   52444:	01400a04 	movi	r5,40
   52448:	2885c83a 	sub	r2,r5,r2
   5244c:	888ad83a 	srl	r5,r17,r2
   52450:	98e6983a 	sll	r19,r19,r3
   52454:	88e2983a 	sll	r17,r17,r3
   52458:	2ce6b03a 	or	r19,r5,r19
   5245c:	1c007c16 	blt	r3,r16,52650 <__adddf3+0x3a8>
   52460:	1c21c83a 	sub	r16,r3,r16
   52464:	81400044 	addi	r5,r16,1
   52468:	00c007c4 	movi	r3,31
   5246c:	19409816 	blt	r3,r5,526d0 <__adddf3+0x428>
   52470:	1c21c83a 	sub	r16,r3,r16
   52474:	8c08983a 	sll	r4,r17,r16
   52478:	8946d83a 	srl	r3,r17,r5
   5247c:	9c20983a 	sll	r16,r19,r16
   52480:	2008c03a 	cmpne	r4,r4,zero
   52484:	994ad83a 	srl	r5,r19,r5
   52488:	1c06b03a 	or	r3,r3,r16
   5248c:	1922b03a 	or	r17,r3,r4
   52490:	0021883a 	mov	r16,zero
   52494:	003fa306 	br	52324 <__alt_data_end+0xfffeb224>
   52498:	2880202c 	andhi	r2,r5,128
   5249c:	9007883a 	mov	r3,r18
   524a0:	103fac1e 	bne	r2,zero,52354 <__alt_data_end+0xfffeb254>
   524a4:	2804977a 	slli	r2,r5,29
   524a8:	8822d0fa 	srli	r17,r17,3
   524ac:	0101ffc4 	movi	r4,2047
   524b0:	280ad0fa 	srli	r5,r5,3
   524b4:	1444b03a 	or	r2,r2,r17
   524b8:	81002c26 	beq	r16,r4,5256c <__adddf3+0x2c4>
   524bc:	8120703a 	and	r16,r16,r4
   524c0:	01000434 	movhi	r4,16
   524c4:	213fffc4 	addi	r4,r4,-1
   524c8:	2908703a 	and	r4,r5,r4
   524cc:	003fad06 	br	52384 <__alt_data_end+0xfffeb284>
   524d0:	8089c83a 	sub	r4,r16,r2
   524d4:	01006a0e 	bge	zero,r4,52680 <__adddf3+0x3d8>
   524d8:	10003326 	beq	r2,zero,525a8 <__adddf3+0x300>
   524dc:	0081ffc4 	movi	r2,2047
   524e0:	80bf9026 	beq	r16,r2,52324 <__alt_data_end+0xfffeb224>
   524e4:	42002034 	orhi	r8,r8,128
   524e8:	00800e04 	movi	r2,56
   524ec:	1100b116 	blt	r2,r4,527b4 <__adddf3+0x50c>
   524f0:	008007c4 	movi	r2,31
   524f4:	1100e216 	blt	r2,r4,52880 <__adddf3+0x5d8>
   524f8:	00800804 	movi	r2,32
   524fc:	1105c83a 	sub	r2,r2,r4
   52500:	4092983a 	sll	r9,r8,r2
   52504:	310ed83a 	srl	r7,r6,r4
   52508:	3084983a 	sll	r2,r6,r2
   5250c:	4110d83a 	srl	r8,r8,r4
   52510:	49ccb03a 	or	r6,r9,r7
   52514:	1004c03a 	cmpne	r2,r2,zero
   52518:	308cb03a 	or	r6,r6,r2
   5251c:	344d883a 	add	r6,r6,r17
   52520:	3463803a 	cmpltu	r17,r6,r17
   52524:	414b883a 	add	r5,r8,r5
   52528:	2c4b883a 	add	r5,r5,r17
   5252c:	3023883a 	mov	r17,r6
   52530:	2880202c 	andhi	r2,r5,128
   52534:	10002726 	beq	r2,zero,525d4 <__adddf3+0x32c>
   52538:	84000044 	addi	r16,r16,1
   5253c:	0081ffc4 	movi	r2,2047
   52540:	8080ae26 	beq	r16,r2,527fc <__adddf3+0x554>
   52544:	00bfe034 	movhi	r2,65408
   52548:	10bfffc4 	addi	r2,r2,-1
   5254c:	288a703a 	and	r5,r5,r2
   52550:	880cd07a 	srli	r6,r17,1
   52554:	280897fa 	slli	r4,r5,31
   52558:	88c0004c 	andi	r3,r17,1
   5255c:	30e2b03a 	or	r17,r6,r3
   52560:	280ad07a 	srli	r5,r5,1
   52564:	8922b03a 	or	r17,r17,r4
   52568:	003f6e06 	br	52324 <__alt_data_end+0xfffeb224>
   5256c:	1148b03a 	or	r4,r2,r5
   52570:	20003c26 	beq	r4,zero,52664 <__adddf3+0x3bc>
   52574:	29000234 	orhi	r4,r5,8
   52578:	01400434 	movhi	r5,16
   5257c:	297fffc4 	addi	r5,r5,-1
   52580:	2148703a 	and	r4,r4,r5
   52584:	003f7f06 	br	52384 <__alt_data_end+0xfffeb284>
   52588:	18ffffc4 	addi	r3,r3,-1
   5258c:	18004d1e 	bne	r3,zero,526c4 <__adddf3+0x41c>
   52590:	898dc83a 	sub	r6,r17,r6
   52594:	89a3803a 	cmpltu	r17,r17,r6
   52598:	2a0bc83a 	sub	r5,r5,r8
   5259c:	2c4bc83a 	sub	r5,r5,r17
   525a0:	3023883a 	mov	r17,r6
   525a4:	003f9c06 	br	52418 <__alt_data_end+0xfffeb318>
   525a8:	4184b03a 	or	r2,r8,r6
   525ac:	103f5d26 	beq	r2,zero,52324 <__alt_data_end+0xfffeb224>
   525b0:	213fffc4 	addi	r4,r4,-1
   525b4:	203fd926 	beq	r4,zero,5251c <__alt_data_end+0xfffeb41c>
   525b8:	0081ffc4 	movi	r2,2047
   525bc:	80bfca1e 	bne	r16,r2,524e8 <__alt_data_end+0xfffeb3e8>
   525c0:	003f5806 	br	52324 <__alt_data_end+0xfffeb224>
   525c4:	10c8b03a 	or	r4,r2,r3
   525c8:	20008b26 	beq	r4,zero,527f8 <__adddf3+0x550>
   525cc:	100b883a 	mov	r5,r2
   525d0:	1823883a 	mov	r17,r3
   525d4:	888001cc 	andi	r2,r17,7
   525d8:	103f541e 	bne	r2,zero,5232c <__alt_data_end+0xfffeb22c>
   525dc:	9007883a 	mov	r3,r18
   525e0:	003fb006 	br	524a4 <__alt_data_end+0xfffeb3a4>
   525e4:	1800531e 	bne	r3,zero,52734 <__adddf3+0x48c>
   525e8:	80800044 	addi	r2,r16,1
   525ec:	1081ffcc 	andi	r2,r2,2047
   525f0:	00c00044 	movi	r3,1
   525f4:	1880990e 	bge	r3,r2,5285c <__adddf3+0x5b4>
   525f8:	8985c83a 	sub	r2,r17,r6
   525fc:	8887803a 	cmpltu	r3,r17,r2
   52600:	2a27c83a 	sub	r19,r5,r8
   52604:	98e7c83a 	sub	r19,r19,r3
   52608:	98c0202c 	andhi	r3,r19,128
   5260c:	18006226 	beq	r3,zero,52798 <__adddf3+0x4f0>
   52610:	3463c83a 	sub	r17,r6,r17
   52614:	4151c83a 	sub	r8,r8,r5
   52618:	344d803a 	cmpltu	r6,r6,r17
   5261c:	41a7c83a 	sub	r19,r8,r6
   52620:	3825883a 	mov	r18,r7
   52624:	983f821e 	bne	r19,zero,52430 <__alt_data_end+0xfffeb330>
   52628:	8809883a 	mov	r4,r17
   5262c:	0047d380 	call	47d38 <__clzsi2>
   52630:	10800804 	addi	r2,r2,32
   52634:	10fffe04 	addi	r3,r2,-8
   52638:	010007c4 	movi	r4,31
   5263c:	20ff810e 	bge	r4,r3,52444 <__alt_data_end+0xfffeb344>
   52640:	14fff604 	addi	r19,r2,-40
   52644:	8ce6983a 	sll	r19,r17,r19
   52648:	0023883a 	mov	r17,zero
   5264c:	1c3f840e 	bge	r3,r16,52460 <__alt_data_end+0xfffeb360>
   52650:	017fe034 	movhi	r5,65408
   52654:	297fffc4 	addi	r5,r5,-1
   52658:	80e1c83a 	sub	r16,r16,r3
   5265c:	994a703a 	and	r5,r19,r5
   52660:	003f3006 	br	52324 <__alt_data_end+0xfffeb224>
   52664:	0009883a 	mov	r4,zero
   52668:	0005883a 	mov	r2,zero
   5266c:	003f4506 	br	52384 <__alt_data_end+0xfffeb284>
   52670:	418cb03a 	or	r6,r8,r6
   52674:	300cc03a 	cmpne	r6,r6,zero
   52678:	0007883a 	mov	r3,zero
   5267c:	003f6106 	br	52404 <__alt_data_end+0xfffeb304>
   52680:	2000921e 	bne	r4,zero,528cc <__adddf3+0x624>
   52684:	80800044 	addi	r2,r16,1
   52688:	11c1ffcc 	andi	r7,r2,2047
   5268c:	01000044 	movi	r4,1
   52690:	21c0610e 	bge	r4,r7,52818 <__adddf3+0x570>
   52694:	0101ffc4 	movi	r4,2047
   52698:	1100a326 	beq	r2,r4,52928 <__adddf3+0x680>
   5269c:	344d883a 	add	r6,r6,r17
   526a0:	3463803a 	cmpltu	r17,r6,r17
   526a4:	414b883a 	add	r5,r8,r5
   526a8:	2c4b883a 	add	r5,r5,r17
   526ac:	282297fa 	slli	r17,r5,31
   526b0:	300cd07a 	srli	r6,r6,1
   526b4:	280ad07a 	srli	r5,r5,1
   526b8:	1021883a 	mov	r16,r2
   526bc:	89a2b03a 	or	r17,r17,r6
   526c0:	003f1806 	br	52324 <__alt_data_end+0xfffeb224>
   526c4:	0081ffc4 	movi	r2,2047
   526c8:	80bf411e 	bne	r16,r2,523d0 <__alt_data_end+0xfffeb2d0>
   526cc:	003f1506 	br	52324 <__alt_data_end+0xfffeb224>
   526d0:	80bff844 	addi	r2,r16,-31
   526d4:	00c00804 	movi	r3,32
   526d8:	9884d83a 	srl	r2,r19,r2
   526dc:	28c04a26 	beq	r5,r3,52808 <__adddf3+0x560>
   526e0:	00c00fc4 	movi	r3,63
   526e4:	1c21c83a 	sub	r16,r3,r16
   526e8:	9c26983a 	sll	r19,r19,r16
   526ec:	9c62b03a 	or	r17,r19,r17
   526f0:	8822c03a 	cmpne	r17,r17,zero
   526f4:	88a2b03a 	or	r17,r17,r2
   526f8:	000b883a 	mov	r5,zero
   526fc:	0021883a 	mov	r16,zero
   52700:	003fb406 	br	525d4 <__alt_data_end+0xfffeb4d4>
   52704:	18bff804 	addi	r2,r3,-32
   52708:	01000804 	movi	r4,32
   5270c:	4084d83a 	srl	r2,r8,r2
   52710:	19003f26 	beq	r3,r4,52810 <__adddf3+0x568>
   52714:	01001004 	movi	r4,64
   52718:	20c7c83a 	sub	r3,r4,r3
   5271c:	40d0983a 	sll	r8,r8,r3
   52720:	418cb03a 	or	r6,r8,r6
   52724:	300cc03a 	cmpne	r6,r6,zero
   52728:	308cb03a 	or	r6,r6,r2
   5272c:	0007883a 	mov	r3,zero
   52730:	003f3406 	br	52404 <__alt_data_end+0xfffeb304>
   52734:	80002326 	beq	r16,zero,527c4 <__adddf3+0x51c>
   52738:	0101ffc4 	movi	r4,2047
   5273c:	11005e26 	beq	r2,r4,528b8 <__adddf3+0x610>
   52740:	00c7c83a 	sub	r3,zero,r3
   52744:	29402034 	orhi	r5,r5,128
   52748:	01000e04 	movi	r4,56
   5274c:	20c07216 	blt	r4,r3,52918 <__adddf3+0x670>
   52750:	010007c4 	movi	r4,31
   52754:	20c0ce16 	blt	r4,r3,52a90 <__adddf3+0x7e8>
   52758:	01000804 	movi	r4,32
   5275c:	20c9c83a 	sub	r4,r4,r3
   52760:	2914983a 	sll	r10,r5,r4
   52764:	88d2d83a 	srl	r9,r17,r3
   52768:	8908983a 	sll	r4,r17,r4
   5276c:	28c6d83a 	srl	r3,r5,r3
   52770:	5262b03a 	or	r17,r10,r9
   52774:	2008c03a 	cmpne	r4,r4,zero
   52778:	8922b03a 	or	r17,r17,r4
   5277c:	3463c83a 	sub	r17,r6,r17
   52780:	40c7c83a 	sub	r3,r8,r3
   52784:	344d803a 	cmpltu	r6,r6,r17
   52788:	198bc83a 	sub	r5,r3,r6
   5278c:	1021883a 	mov	r16,r2
   52790:	3825883a 	mov	r18,r7
   52794:	003f2006 	br	52418 <__alt_data_end+0xfffeb318>
   52798:	9886b03a 	or	r3,r19,r2
   5279c:	1800141e 	bne	r3,zero,527f0 <__adddf3+0x548>
   527a0:	0007883a 	mov	r3,zero
   527a4:	000b883a 	mov	r5,zero
   527a8:	0023883a 	mov	r17,zero
   527ac:	0021883a 	mov	r16,zero
   527b0:	003f3c06 	br	524a4 <__alt_data_end+0xfffeb3a4>
   527b4:	418cb03a 	or	r6,r8,r6
   527b8:	300cc03a 	cmpne	r6,r6,zero
   527bc:	0011883a 	mov	r8,zero
   527c0:	003f5606 	br	5251c <__alt_data_end+0xfffeb41c>
   527c4:	2c48b03a 	or	r4,r5,r17
   527c8:	20003b26 	beq	r4,zero,528b8 <__adddf3+0x610>
   527cc:	00c6303a 	nor	r3,zero,r3
   527d0:	1800371e 	bne	r3,zero,528b0 <__adddf3+0x608>
   527d4:	3463c83a 	sub	r17,r6,r17
   527d8:	414bc83a 	sub	r5,r8,r5
   527dc:	344d803a 	cmpltu	r6,r6,r17
   527e0:	298bc83a 	sub	r5,r5,r6
   527e4:	1021883a 	mov	r16,r2
   527e8:	3825883a 	mov	r18,r7
   527ec:	003f0a06 	br	52418 <__alt_data_end+0xfffeb318>
   527f0:	1023883a 	mov	r17,r2
   527f4:	003f0d06 	br	5242c <__alt_data_end+0xfffeb32c>
   527f8:	0007883a 	mov	r3,zero
   527fc:	000b883a 	mov	r5,zero
   52800:	0023883a 	mov	r17,zero
   52804:	003f2706 	br	524a4 <__alt_data_end+0xfffeb3a4>
   52808:	0027883a 	mov	r19,zero
   5280c:	003fb706 	br	526ec <__alt_data_end+0xfffeb5ec>
   52810:	0011883a 	mov	r8,zero
   52814:	003fc206 	br	52720 <__alt_data_end+0xfffeb620>
   52818:	2c44b03a 	or	r2,r5,r17
   5281c:	8000871e 	bne	r16,zero,52a3c <__adddf3+0x794>
   52820:	1000b126 	beq	r2,zero,52ae8 <__adddf3+0x840>
   52824:	4184b03a 	or	r2,r8,r6
   52828:	103ebe26 	beq	r2,zero,52324 <__alt_data_end+0xfffeb224>
   5282c:	3445883a 	add	r2,r6,r17
   52830:	1463803a 	cmpltu	r17,r2,r17
   52834:	414b883a 	add	r5,r8,r5
   52838:	2c4b883a 	add	r5,r5,r17
   5283c:	28c0202c 	andhi	r3,r5,128
   52840:	1023883a 	mov	r17,r2
   52844:	183f6326 	beq	r3,zero,525d4 <__alt_data_end+0xfffeb4d4>
   52848:	00bfe034 	movhi	r2,65408
   5284c:	10bfffc4 	addi	r2,r2,-1
   52850:	2021883a 	mov	r16,r4
   52854:	288a703a 	and	r5,r5,r2
   52858:	003eb206 	br	52324 <__alt_data_end+0xfffeb224>
   5285c:	2c44b03a 	or	r2,r5,r17
   52860:	8000251e 	bne	r16,zero,528f8 <__adddf3+0x650>
   52864:	10004b1e 	bne	r2,zero,52994 <__adddf3+0x6ec>
   52868:	4184b03a 	or	r2,r8,r6
   5286c:	103fe226 	beq	r2,zero,527f8 <__alt_data_end+0xfffeb6f8>
   52870:	400b883a 	mov	r5,r8
   52874:	3023883a 	mov	r17,r6
   52878:	3825883a 	mov	r18,r7
   5287c:	003ea906 	br	52324 <__alt_data_end+0xfffeb224>
   52880:	20bff804 	addi	r2,r4,-32
   52884:	01c00804 	movi	r7,32
   52888:	4084d83a 	srl	r2,r8,r2
   5288c:	21c07e26 	beq	r4,r7,52a88 <__adddf3+0x7e0>
   52890:	01c01004 	movi	r7,64
   52894:	3909c83a 	sub	r4,r7,r4
   52898:	4110983a 	sll	r8,r8,r4
   5289c:	418cb03a 	or	r6,r8,r6
   528a0:	300cc03a 	cmpne	r6,r6,zero
   528a4:	308cb03a 	or	r6,r6,r2
   528a8:	0011883a 	mov	r8,zero
   528ac:	003f1b06 	br	5251c <__alt_data_end+0xfffeb41c>
   528b0:	0101ffc4 	movi	r4,2047
   528b4:	113fa41e 	bne	r2,r4,52748 <__alt_data_end+0xfffeb648>
   528b8:	400b883a 	mov	r5,r8
   528bc:	3023883a 	mov	r17,r6
   528c0:	1021883a 	mov	r16,r2
   528c4:	3825883a 	mov	r18,r7
   528c8:	003e9606 	br	52324 <__alt_data_end+0xfffeb224>
   528cc:	80001a1e 	bne	r16,zero,52938 <__adddf3+0x690>
   528d0:	2c4eb03a 	or	r7,r5,r17
   528d4:	38005526 	beq	r7,zero,52a2c <__adddf3+0x784>
   528d8:	0108303a 	nor	r4,zero,r4
   528dc:	2000511e 	bne	r4,zero,52a24 <__adddf3+0x77c>
   528e0:	89a3883a 	add	r17,r17,r6
   528e4:	414b883a 	add	r5,r8,r5
   528e8:	898d803a 	cmpltu	r6,r17,r6
   528ec:	298b883a 	add	r5,r5,r6
   528f0:	1021883a 	mov	r16,r2
   528f4:	003f0e06 	br	52530 <__alt_data_end+0xfffeb430>
   528f8:	1000341e 	bne	r2,zero,529cc <__adddf3+0x724>
   528fc:	4184b03a 	or	r2,r8,r6
   52900:	10006f26 	beq	r2,zero,52ac0 <__adddf3+0x818>
   52904:	400b883a 	mov	r5,r8
   52908:	3023883a 	mov	r17,r6
   5290c:	3825883a 	mov	r18,r7
   52910:	0401ffc4 	movi	r16,2047
   52914:	003e8306 	br	52324 <__alt_data_end+0xfffeb224>
   52918:	2c62b03a 	or	r17,r5,r17
   5291c:	8822c03a 	cmpne	r17,r17,zero
   52920:	0007883a 	mov	r3,zero
   52924:	003f9506 	br	5277c <__alt_data_end+0xfffeb67c>
   52928:	1021883a 	mov	r16,r2
   5292c:	000b883a 	mov	r5,zero
   52930:	0023883a 	mov	r17,zero
   52934:	003edb06 	br	524a4 <__alt_data_end+0xfffeb3a4>
   52938:	01c1ffc4 	movi	r7,2047
   5293c:	11c03b26 	beq	r2,r7,52a2c <__adddf3+0x784>
   52940:	0109c83a 	sub	r4,zero,r4
   52944:	29402034 	orhi	r5,r5,128
   52948:	01c00e04 	movi	r7,56
   5294c:	39006216 	blt	r7,r4,52ad8 <__adddf3+0x830>
   52950:	01c007c4 	movi	r7,31
   52954:	39006b16 	blt	r7,r4,52b04 <__adddf3+0x85c>
   52958:	01c00804 	movi	r7,32
   5295c:	390fc83a 	sub	r7,r7,r4
   52960:	29d4983a 	sll	r10,r5,r7
   52964:	8912d83a 	srl	r9,r17,r4
   52968:	89ce983a 	sll	r7,r17,r7
   5296c:	2908d83a 	srl	r4,r5,r4
   52970:	5262b03a 	or	r17,r10,r9
   52974:	380ac03a 	cmpne	r5,r7,zero
   52978:	8962b03a 	or	r17,r17,r5
   5297c:	89a3883a 	add	r17,r17,r6
   52980:	2211883a 	add	r8,r4,r8
   52984:	898d803a 	cmpltu	r6,r17,r6
   52988:	418b883a 	add	r5,r8,r6
   5298c:	1021883a 	mov	r16,r2
   52990:	003ee706 	br	52530 <__alt_data_end+0xfffeb430>
   52994:	4184b03a 	or	r2,r8,r6
   52998:	103e6226 	beq	r2,zero,52324 <__alt_data_end+0xfffeb224>
   5299c:	8987c83a 	sub	r3,r17,r6
   529a0:	88c9803a 	cmpltu	r4,r17,r3
   529a4:	2a05c83a 	sub	r2,r5,r8
   529a8:	1105c83a 	sub	r2,r2,r4
   529ac:	1100202c 	andhi	r4,r2,128
   529b0:	203f0426 	beq	r4,zero,525c4 <__alt_data_end+0xfffeb4c4>
   529b4:	3463c83a 	sub	r17,r6,r17
   529b8:	414bc83a 	sub	r5,r8,r5
   529bc:	344d803a 	cmpltu	r6,r6,r17
   529c0:	298bc83a 	sub	r5,r5,r6
   529c4:	3825883a 	mov	r18,r7
   529c8:	003e5606 	br	52324 <__alt_data_end+0xfffeb224>
   529cc:	4184b03a 	or	r2,r8,r6
   529d0:	10002b26 	beq	r2,zero,52a80 <__adddf3+0x7d8>
   529d4:	2804d0fa 	srli	r2,r5,3
   529d8:	8822d0fa 	srli	r17,r17,3
   529dc:	280a977a 	slli	r5,r5,29
   529e0:	10c0022c 	andhi	r3,r2,8
   529e4:	2c62b03a 	or	r17,r5,r17
   529e8:	18000826 	beq	r3,zero,52a0c <__adddf3+0x764>
   529ec:	4008d0fa 	srli	r4,r8,3
   529f0:	20c0022c 	andhi	r3,r4,8
   529f4:	1800051e 	bne	r3,zero,52a0c <__adddf3+0x764>
   529f8:	300cd0fa 	srli	r6,r6,3
   529fc:	4010977a 	slli	r8,r8,29
   52a00:	2005883a 	mov	r2,r4
   52a04:	3825883a 	mov	r18,r7
   52a08:	41a2b03a 	or	r17,r8,r6
   52a0c:	880ad77a 	srli	r5,r17,29
   52a10:	100490fa 	slli	r2,r2,3
   52a14:	882290fa 	slli	r17,r17,3
   52a18:	0401ffc4 	movi	r16,2047
   52a1c:	288ab03a 	or	r5,r5,r2
   52a20:	003e4006 	br	52324 <__alt_data_end+0xfffeb224>
   52a24:	01c1ffc4 	movi	r7,2047
   52a28:	11ffc71e 	bne	r2,r7,52948 <__alt_data_end+0xfffeb848>
   52a2c:	400b883a 	mov	r5,r8
   52a30:	3023883a 	mov	r17,r6
   52a34:	1021883a 	mov	r16,r2
   52a38:	003e3a06 	br	52324 <__alt_data_end+0xfffeb224>
   52a3c:	10002d26 	beq	r2,zero,52af4 <__adddf3+0x84c>
   52a40:	4184b03a 	or	r2,r8,r6
   52a44:	10000e26 	beq	r2,zero,52a80 <__adddf3+0x7d8>
   52a48:	2804d0fa 	srli	r2,r5,3
   52a4c:	8822d0fa 	srli	r17,r17,3
   52a50:	280a977a 	slli	r5,r5,29
   52a54:	10c0022c 	andhi	r3,r2,8
   52a58:	2c62b03a 	or	r17,r5,r17
   52a5c:	183feb26 	beq	r3,zero,52a0c <__alt_data_end+0xfffeb90c>
   52a60:	4008d0fa 	srli	r4,r8,3
   52a64:	20c0022c 	andhi	r3,r4,8
   52a68:	183fe81e 	bne	r3,zero,52a0c <__alt_data_end+0xfffeb90c>
   52a6c:	300cd0fa 	srli	r6,r6,3
   52a70:	4010977a 	slli	r8,r8,29
   52a74:	2005883a 	mov	r2,r4
   52a78:	41a2b03a 	or	r17,r8,r6
   52a7c:	003fe306 	br	52a0c <__alt_data_end+0xfffeb90c>
   52a80:	0401ffc4 	movi	r16,2047
   52a84:	003e2706 	br	52324 <__alt_data_end+0xfffeb224>
   52a88:	0011883a 	mov	r8,zero
   52a8c:	003f8306 	br	5289c <__alt_data_end+0xfffeb79c>
   52a90:	193ff804 	addi	r4,r3,-32
   52a94:	02400804 	movi	r9,32
   52a98:	2908d83a 	srl	r4,r5,r4
   52a9c:	1a402526 	beq	r3,r9,52b34 <__adddf3+0x88c>
   52aa0:	02401004 	movi	r9,64
   52aa4:	48c7c83a 	sub	r3,r9,r3
   52aa8:	28ca983a 	sll	r5,r5,r3
   52aac:	2c62b03a 	or	r17,r5,r17
   52ab0:	8822c03a 	cmpne	r17,r17,zero
   52ab4:	8922b03a 	or	r17,r17,r4
   52ab8:	0007883a 	mov	r3,zero
   52abc:	003f2f06 	br	5277c <__alt_data_end+0xfffeb67c>
   52ac0:	01402034 	movhi	r5,128
   52ac4:	0007883a 	mov	r3,zero
   52ac8:	297fffc4 	addi	r5,r5,-1
   52acc:	047ffe04 	movi	r17,-8
   52ad0:	0401ffc4 	movi	r16,2047
   52ad4:	003e7306 	br	524a4 <__alt_data_end+0xfffeb3a4>
   52ad8:	2c62b03a 	or	r17,r5,r17
   52adc:	8822c03a 	cmpne	r17,r17,zero
   52ae0:	0009883a 	mov	r4,zero
   52ae4:	003fa506 	br	5297c <__alt_data_end+0xfffeb87c>
   52ae8:	400b883a 	mov	r5,r8
   52aec:	3023883a 	mov	r17,r6
   52af0:	003e0c06 	br	52324 <__alt_data_end+0xfffeb224>
   52af4:	400b883a 	mov	r5,r8
   52af8:	3023883a 	mov	r17,r6
   52afc:	0401ffc4 	movi	r16,2047
   52b00:	003e0806 	br	52324 <__alt_data_end+0xfffeb224>
   52b04:	21fff804 	addi	r7,r4,-32
   52b08:	02400804 	movi	r9,32
   52b0c:	29ced83a 	srl	r7,r5,r7
   52b10:	22400a26 	beq	r4,r9,52b3c <__adddf3+0x894>
   52b14:	02401004 	movi	r9,64
   52b18:	4909c83a 	sub	r4,r9,r4
   52b1c:	290a983a 	sll	r5,r5,r4
   52b20:	2c62b03a 	or	r17,r5,r17
   52b24:	8822c03a 	cmpne	r17,r17,zero
   52b28:	89e2b03a 	or	r17,r17,r7
   52b2c:	0009883a 	mov	r4,zero
   52b30:	003f9206 	br	5297c <__alt_data_end+0xfffeb87c>
   52b34:	000b883a 	mov	r5,zero
   52b38:	003fdc06 	br	52aac <__alt_data_end+0xfffeb9ac>
   52b3c:	000b883a 	mov	r5,zero
   52b40:	003ff706 	br	52b20 <__alt_data_end+0xfffeba20>

00052b44 <__divdf3>:
   52b44:	defff204 	addi	sp,sp,-56
   52b48:	dd000815 	stw	r20,32(sp)
   52b4c:	2828d53a 	srli	r20,r5,20
   52b50:	dd800a15 	stw	r22,40(sp)
   52b54:	282cd7fa 	srli	r22,r5,31
   52b58:	dc000415 	stw	r16,16(sp)
   52b5c:	04000434 	movhi	r16,16
   52b60:	df000c15 	stw	fp,48(sp)
   52b64:	dcc00715 	stw	r19,28(sp)
   52b68:	dc800615 	stw	r18,24(sp)
   52b6c:	dc400515 	stw	r17,20(sp)
   52b70:	843fffc4 	addi	r16,r16,-1
   52b74:	dfc00d15 	stw	ra,52(sp)
   52b78:	ddc00b15 	stw	r23,44(sp)
   52b7c:	dd400915 	stw	r21,36(sp)
   52b80:	a501ffcc 	andi	r20,r20,2047
   52b84:	2025883a 	mov	r18,r4
   52b88:	2027883a 	mov	r19,r4
   52b8c:	2c22703a 	and	r17,r5,r16
   52b90:	b7003fcc 	andi	fp,r22,255
   52b94:	a0005e26 	beq	r20,zero,52d10 <__divdf3+0x1cc>
   52b98:	0081ffc4 	movi	r2,2047
   52b9c:	a0803526 	beq	r20,r2,52c74 <__divdf3+0x130>
   52ba0:	8c000434 	orhi	r16,r17,16
   52ba4:	2004d77a 	srli	r2,r4,29
   52ba8:	802090fa 	slli	r16,r16,3
   52bac:	202690fa 	slli	r19,r4,3
   52bb0:	a53f0044 	addi	r20,r20,-1023
   52bb4:	80a2b03a 	or	r17,r16,r2
   52bb8:	0025883a 	mov	r18,zero
   52bbc:	0011883a 	mov	r8,zero
   52bc0:	380ad53a 	srli	r5,r7,20
   52bc4:	382ed7fa 	srli	r23,r7,31
   52bc8:	04000434 	movhi	r16,16
   52bcc:	843fffc4 	addi	r16,r16,-1
   52bd0:	2941ffcc 	andi	r5,r5,2047
   52bd4:	302b883a 	mov	r21,r6
   52bd8:	3c20703a 	and	r16,r7,r16
   52bdc:	ba403fcc 	andi	r9,r23,255
   52be0:	28006726 	beq	r5,zero,52d80 <__divdf3+0x23c>
   52be4:	0081ffc4 	movi	r2,2047
   52be8:	28805f26 	beq	r5,r2,52d68 <__divdf3+0x224>
   52bec:	84000434 	orhi	r16,r16,16
   52bf0:	3004d77a 	srli	r2,r6,29
   52bf4:	802090fa 	slli	r16,r16,3
   52bf8:	302a90fa 	slli	r21,r6,3
   52bfc:	297f0044 	addi	r5,r5,-1023
   52c00:	80a0b03a 	or	r16,r16,r2
   52c04:	000f883a 	mov	r7,zero
   52c08:	3c86b03a 	or	r3,r7,r18
   52c0c:	180690ba 	slli	r3,r3,2
   52c10:	00800174 	movhi	r2,5
   52c14:	108b0d04 	addi	r2,r2,11316
   52c18:	1887883a 	add	r3,r3,r2
   52c1c:	18c00017 	ldw	r3,0(r3)
   52c20:	b5c8f03a 	xor	r4,r22,r23
   52c24:	200d883a 	mov	r6,r4
   52c28:	24803fcc 	andi	r18,r4,255
   52c2c:	a169c83a 	sub	r20,r20,r5
   52c30:	1800683a 	jmp	r3
   52c34:	00052e7c 	xorhi	zero,zero,5305
   52c38:	00052cac 	andhi	zero,zero,5298
   52c3c:	00052e40 	call	52e4 <__reset-0x3ad1c>
   52c40:	00052c90 	cmplti	zero,zero,5298
   52c44:	00052e40 	call	52e4 <__reset-0x3ad1c>
   52c48:	00052e14 	movui	zero,5304
   52c4c:	00052e40 	call	52e4 <__reset-0x3ad1c>
   52c50:	00052c90 	cmplti	zero,zero,5298
   52c54:	00052cac 	andhi	zero,zero,5298
   52c58:	00052cac 	andhi	zero,zero,5298
   52c5c:	00052e14 	movui	zero,5304
   52c60:	00052c90 	cmplti	zero,zero,5298
   52c64:	00052ca0 	cmpeqi	zero,zero,5298
   52c68:	00052ca0 	cmpeqi	zero,zero,5298
   52c6c:	00052ca0 	cmpeqi	zero,zero,5298
   52c70:	00052e50 	cmplti	zero,zero,5305
   52c74:	8904b03a 	or	r2,r17,r4
   52c78:	1000631e 	bne	r2,zero,52e08 <__divdf3+0x2c4>
   52c7c:	04800204 	movi	r18,8
   52c80:	0023883a 	mov	r17,zero
   52c84:	0027883a 	mov	r19,zero
   52c88:	02000084 	movi	r8,2
   52c8c:	003fcc06 	br	52bc0 <__alt_data_end+0xfffebac0>
   52c90:	8023883a 	mov	r17,r16
   52c94:	a827883a 	mov	r19,r21
   52c98:	4839883a 	mov	fp,r9
   52c9c:	3811883a 	mov	r8,r7
   52ca0:	00800084 	movi	r2,2
   52ca4:	40812a1e 	bne	r8,r2,53150 <__divdf3+0x60c>
   52ca8:	e025883a 	mov	r18,fp
   52cac:	9180004c 	andi	r6,r18,1
   52cb0:	0101ffc4 	movi	r4,2047
   52cb4:	000b883a 	mov	r5,zero
   52cb8:	0027883a 	mov	r19,zero
   52cbc:	2008953a 	slli	r4,r4,20
   52cc0:	30c03fcc 	andi	r3,r6,255
   52cc4:	04000434 	movhi	r16,16
   52cc8:	180697fa 	slli	r3,r3,31
   52ccc:	843fffc4 	addi	r16,r16,-1
   52cd0:	2c20703a 	and	r16,r5,r16
   52cd4:	8120b03a 	or	r16,r16,r4
   52cd8:	80c6b03a 	or	r3,r16,r3
   52cdc:	9805883a 	mov	r2,r19
   52ce0:	dfc00d17 	ldw	ra,52(sp)
   52ce4:	df000c17 	ldw	fp,48(sp)
   52ce8:	ddc00b17 	ldw	r23,44(sp)
   52cec:	dd800a17 	ldw	r22,40(sp)
   52cf0:	dd400917 	ldw	r21,36(sp)
   52cf4:	dd000817 	ldw	r20,32(sp)
   52cf8:	dcc00717 	ldw	r19,28(sp)
   52cfc:	dc800617 	ldw	r18,24(sp)
   52d00:	dc400517 	ldw	r17,20(sp)
   52d04:	dc000417 	ldw	r16,16(sp)
   52d08:	dec00e04 	addi	sp,sp,56
   52d0c:	f800283a 	ret
   52d10:	8904b03a 	or	r2,r17,r4
   52d14:	10003726 	beq	r2,zero,52df4 <__divdf3+0x2b0>
   52d18:	88011c26 	beq	r17,zero,5318c <__divdf3+0x648>
   52d1c:	8809883a 	mov	r4,r17
   52d20:	d9800315 	stw	r6,12(sp)
   52d24:	d9c00115 	stw	r7,4(sp)
   52d28:	0047d380 	call	47d38 <__clzsi2>
   52d2c:	d9800317 	ldw	r6,12(sp)
   52d30:	d9c00117 	ldw	r7,4(sp)
   52d34:	1007883a 	mov	r3,r2
   52d38:	01000a04 	movi	r4,40
   52d3c:	1cfffe04 	addi	r19,r3,-8
   52d40:	20c9c83a 	sub	r4,r4,r3
   52d44:	8cca983a 	sll	r5,r17,r19
   52d48:	9108d83a 	srl	r4,r18,r4
   52d4c:	94e6983a 	sll	r19,r18,r19
   52d50:	2162b03a 	or	r17,r4,r5
   52d54:	053f0344 	movi	r20,-1011
   52d58:	a0e9c83a 	sub	r20,r20,r3
   52d5c:	0025883a 	mov	r18,zero
   52d60:	0011883a 	mov	r8,zero
   52d64:	003f9606 	br	52bc0 <__alt_data_end+0xfffebac0>
   52d68:	8184b03a 	or	r2,r16,r6
   52d6c:	10001f1e 	bne	r2,zero,52dec <__divdf3+0x2a8>
   52d70:	0021883a 	mov	r16,zero
   52d74:	002b883a 	mov	r21,zero
   52d78:	01c00084 	movi	r7,2
   52d7c:	003fa206 	br	52c08 <__alt_data_end+0xfffebb08>
   52d80:	8184b03a 	or	r2,r16,r6
   52d84:	10001526 	beq	r2,zero,52ddc <__divdf3+0x298>
   52d88:	80010c26 	beq	r16,zero,531bc <__divdf3+0x678>
   52d8c:	8009883a 	mov	r4,r16
   52d90:	d9800315 	stw	r6,12(sp)
   52d94:	da000215 	stw	r8,8(sp)
   52d98:	da400015 	stw	r9,0(sp)
   52d9c:	0047d380 	call	47d38 <__clzsi2>
   52da0:	d9800317 	ldw	r6,12(sp)
   52da4:	da000217 	ldw	r8,8(sp)
   52da8:	da400017 	ldw	r9,0(sp)
   52dac:	1007883a 	mov	r3,r2
   52db0:	01000a04 	movi	r4,40
   52db4:	1d7ffe04 	addi	r21,r3,-8
   52db8:	20c9c83a 	sub	r4,r4,r3
   52dbc:	8560983a 	sll	r16,r16,r21
   52dc0:	3108d83a 	srl	r4,r6,r4
   52dc4:	356a983a 	sll	r21,r6,r21
   52dc8:	2420b03a 	or	r16,r4,r16
   52dcc:	017f0344 	movi	r5,-1011
   52dd0:	28cbc83a 	sub	r5,r5,r3
   52dd4:	000f883a 	mov	r7,zero
   52dd8:	003f8b06 	br	52c08 <__alt_data_end+0xfffebb08>
   52ddc:	0021883a 	mov	r16,zero
   52de0:	002b883a 	mov	r21,zero
   52de4:	01c00044 	movi	r7,1
   52de8:	003f8706 	br	52c08 <__alt_data_end+0xfffebb08>
   52dec:	01c000c4 	movi	r7,3
   52df0:	003f8506 	br	52c08 <__alt_data_end+0xfffebb08>
   52df4:	04800104 	movi	r18,4
   52df8:	0023883a 	mov	r17,zero
   52dfc:	0027883a 	mov	r19,zero
   52e00:	02000044 	movi	r8,1
   52e04:	003f6e06 	br	52bc0 <__alt_data_end+0xfffebac0>
   52e08:	04800304 	movi	r18,12
   52e0c:	020000c4 	movi	r8,3
   52e10:	003f6b06 	br	52bc0 <__alt_data_end+0xfffebac0>
   52e14:	01400434 	movhi	r5,16
   52e18:	000d883a 	mov	r6,zero
   52e1c:	297fffc4 	addi	r5,r5,-1
   52e20:	04ffffc4 	movi	r19,-1
   52e24:	0101ffc4 	movi	r4,2047
   52e28:	003fa406 	br	52cbc <__alt_data_end+0xfffebbbc>
   52e2c:	043f0084 	movi	r16,-1022
   52e30:	8521c83a 	sub	r16,r16,r20
   52e34:	00800e04 	movi	r2,56
   52e38:	1401200e 	bge	r2,r16,532bc <__divdf3+0x778>
   52e3c:	9180004c 	andi	r6,r18,1
   52e40:	0009883a 	mov	r4,zero
   52e44:	000b883a 	mov	r5,zero
   52e48:	0027883a 	mov	r19,zero
   52e4c:	003f9b06 	br	52cbc <__alt_data_end+0xfffebbbc>
   52e50:	8880022c 	andhi	r2,r17,8
   52e54:	1000c726 	beq	r2,zero,53174 <__divdf3+0x630>
   52e58:	8080022c 	andhi	r2,r16,8
   52e5c:	1000c51e 	bne	r2,zero,53174 <__divdf3+0x630>
   52e60:	00800434 	movhi	r2,16
   52e64:	81400234 	orhi	r5,r16,8
   52e68:	10bfffc4 	addi	r2,r2,-1
   52e6c:	b80d883a 	mov	r6,r23
   52e70:	288a703a 	and	r5,r5,r2
   52e74:	a827883a 	mov	r19,r21
   52e78:	003fea06 	br	52e24 <__alt_data_end+0xfffebd24>
   52e7c:	8440ea36 	bltu	r16,r17,53228 <__divdf3+0x6e4>
   52e80:	8c00e826 	beq	r17,r16,53224 <__divdf3+0x6e0>
   52e84:	a53fffc4 	addi	r20,r20,-1
   52e88:	882d883a 	mov	r22,r17
   52e8c:	000d883a 	mov	r6,zero
   52e90:	a804d63a 	srli	r2,r21,24
   52e94:	8020923a 	slli	r16,r16,8
   52e98:	b009883a 	mov	r4,r22
   52e9c:	d9800315 	stw	r6,12(sp)
   52ea0:	1420b03a 	or	r16,r2,r16
   52ea4:	802ed43a 	srli	r23,r16,16
   52ea8:	873fffcc 	andi	fp,r16,65535
   52eac:	a82a923a 	slli	r21,r21,8
   52eb0:	b80b883a 	mov	r5,r23
   52eb4:	0046db40 	call	46db4 <__udivsi3>
   52eb8:	b009883a 	mov	r4,r22
   52ebc:	b80b883a 	mov	r5,r23
   52ec0:	1023883a 	mov	r17,r2
   52ec4:	0046dbc0 	call	46dbc <__umodsi3>
   52ec8:	1004943a 	slli	r2,r2,16
   52ecc:	9808d43a 	srli	r4,r19,16
   52ed0:	8f2d383a 	mul	r22,r17,fp
   52ed4:	d9800317 	ldw	r6,12(sp)
   52ed8:	1106b03a 	or	r3,r2,r4
   52edc:	1d80062e 	bgeu	r3,r22,52ef8 <__divdf3+0x3b4>
   52ee0:	1c07883a 	add	r3,r3,r16
   52ee4:	88bfffc4 	addi	r2,r17,-1
   52ee8:	1c00dc36 	bltu	r3,r16,5325c <__divdf3+0x718>
   52eec:	1d80db2e 	bgeu	r3,r22,5325c <__divdf3+0x718>
   52ef0:	8c7fff84 	addi	r17,r17,-2
   52ef4:	1c07883a 	add	r3,r3,r16
   52ef8:	1dadc83a 	sub	r22,r3,r22
   52efc:	b009883a 	mov	r4,r22
   52f00:	b80b883a 	mov	r5,r23
   52f04:	d9800315 	stw	r6,12(sp)
   52f08:	0046db40 	call	46db4 <__udivsi3>
   52f0c:	b009883a 	mov	r4,r22
   52f10:	b80b883a 	mov	r5,r23
   52f14:	d8800015 	stw	r2,0(sp)
   52f18:	0046dbc0 	call	46dbc <__umodsi3>
   52f1c:	da400017 	ldw	r9,0(sp)
   52f20:	1004943a 	slli	r2,r2,16
   52f24:	9cffffcc 	andi	r19,r19,65535
   52f28:	4f07383a 	mul	r3,r9,fp
   52f2c:	14c8b03a 	or	r4,r2,r19
   52f30:	d9800317 	ldw	r6,12(sp)
   52f34:	20c0062e 	bgeu	r4,r3,52f50 <__divdf3+0x40c>
   52f38:	2409883a 	add	r4,r4,r16
   52f3c:	48bfffc4 	addi	r2,r9,-1
   52f40:	2400c436 	bltu	r4,r16,53254 <__divdf3+0x710>
   52f44:	20c0c32e 	bgeu	r4,r3,53254 <__divdf3+0x710>
   52f48:	4a7fff84 	addi	r9,r9,-2
   52f4c:	2409883a 	add	r4,r4,r16
   52f50:	8822943a 	slli	r17,r17,16
   52f54:	a80ed43a 	srli	r7,r21,16
   52f58:	aa3fffcc 	andi	r8,r21,65535
   52f5c:	4c62b03a 	or	r17,r9,r17
   52f60:	8816d43a 	srli	r11,r17,16
   52f64:	897fffcc 	andi	r5,r17,65535
   52f68:	2a15383a 	mul	r10,r5,r8
   52f6c:	5a19383a 	mul	r12,r11,r8
   52f70:	29cb383a 	mul	r5,r5,r7
   52f74:	5012d43a 	srli	r9,r10,16
   52f78:	20c5c83a 	sub	r2,r4,r3
   52f7c:	614b883a 	add	r5,r12,r5
   52f80:	2a4b883a 	add	r5,r5,r9
   52f84:	59c7383a 	mul	r3,r11,r7
   52f88:	2b00022e 	bgeu	r5,r12,52f94 <__divdf3+0x450>
   52f8c:	01000074 	movhi	r4,1
   52f90:	1907883a 	add	r3,r3,r4
   52f94:	2808d43a 	srli	r4,r5,16
   52f98:	280a943a 	slli	r5,r5,16
   52f9c:	54ffffcc 	andi	r19,r10,65535
   52fa0:	1907883a 	add	r3,r3,r4
   52fa4:	2ccb883a 	add	r5,r5,r19
   52fa8:	10c09336 	bltu	r2,r3,531f8 <__divdf3+0x6b4>
   52fac:	10c0ad26 	beq	r2,r3,53264 <__divdf3+0x720>
   52fb0:	10c7c83a 	sub	r3,r2,r3
   52fb4:	3167c83a 	sub	r19,r6,r5
   52fb8:	34ed803a 	cmpltu	r22,r6,r19
   52fbc:	1dadc83a 	sub	r22,r3,r22
   52fc0:	b400b226 	beq	r22,r16,5328c <__divdf3+0x748>
   52fc4:	b009883a 	mov	r4,r22
   52fc8:	b80b883a 	mov	r5,r23
   52fcc:	d9c00115 	stw	r7,4(sp)
   52fd0:	da000215 	stw	r8,8(sp)
   52fd4:	0046db40 	call	46db4 <__udivsi3>
   52fd8:	b009883a 	mov	r4,r22
   52fdc:	b80b883a 	mov	r5,r23
   52fe0:	d8800315 	stw	r2,12(sp)
   52fe4:	0046dbc0 	call	46dbc <__umodsi3>
   52fe8:	d9800317 	ldw	r6,12(sp)
   52fec:	1004943a 	slli	r2,r2,16
   52ff0:	9808d43a 	srli	r4,r19,16
   52ff4:	372d383a 	mul	r22,r6,fp
   52ff8:	d9c00117 	ldw	r7,4(sp)
   52ffc:	1106b03a 	or	r3,r2,r4
   53000:	da000217 	ldw	r8,8(sp)
   53004:	1d80062e 	bgeu	r3,r22,53020 <__divdf3+0x4dc>
   53008:	1c07883a 	add	r3,r3,r16
   5300c:	30bfffc4 	addi	r2,r6,-1
   53010:	1c00a036 	bltu	r3,r16,53294 <__divdf3+0x750>
   53014:	1d809f2e 	bgeu	r3,r22,53294 <__divdf3+0x750>
   53018:	31bfff84 	addi	r6,r6,-2
   5301c:	1c07883a 	add	r3,r3,r16
   53020:	1dadc83a 	sub	r22,r3,r22
   53024:	b009883a 	mov	r4,r22
   53028:	b80b883a 	mov	r5,r23
   5302c:	d9800315 	stw	r6,12(sp)
   53030:	d9c00115 	stw	r7,4(sp)
   53034:	da000215 	stw	r8,8(sp)
   53038:	0046db40 	call	46db4 <__udivsi3>
   5303c:	b009883a 	mov	r4,r22
   53040:	b80b883a 	mov	r5,r23
   53044:	d8800015 	stw	r2,0(sp)
   53048:	0046dbc0 	call	46dbc <__umodsi3>
   5304c:	da400017 	ldw	r9,0(sp)
   53050:	1004943a 	slli	r2,r2,16
   53054:	993fffcc 	andi	r4,r19,65535
   53058:	4f39383a 	mul	fp,r9,fp
   5305c:	1106b03a 	or	r3,r2,r4
   53060:	d9800317 	ldw	r6,12(sp)
   53064:	d9c00117 	ldw	r7,4(sp)
   53068:	da000217 	ldw	r8,8(sp)
   5306c:	1f00062e 	bgeu	r3,fp,53088 <__divdf3+0x544>
   53070:	1c07883a 	add	r3,r3,r16
   53074:	48bfffc4 	addi	r2,r9,-1
   53078:	1c008836 	bltu	r3,r16,5329c <__divdf3+0x758>
   5307c:	1f00872e 	bgeu	r3,fp,5329c <__divdf3+0x758>
   53080:	4a7fff84 	addi	r9,r9,-2
   53084:	1c07883a 	add	r3,r3,r16
   53088:	3008943a 	slli	r4,r6,16
   5308c:	1f07c83a 	sub	r3,r3,fp
   53090:	4926b03a 	or	r19,r9,r4
   53094:	993fffcc 	andi	r4,r19,65535
   53098:	980cd43a 	srli	r6,r19,16
   5309c:	220b383a 	mul	r5,r4,r8
   530a0:	21c5383a 	mul	r2,r4,r7
   530a4:	3211383a 	mul	r8,r6,r8
   530a8:	2808d43a 	srli	r4,r5,16
   530ac:	31cf383a 	mul	r7,r6,r7
   530b0:	4085883a 	add	r2,r8,r2
   530b4:	1105883a 	add	r2,r2,r4
   530b8:	1200022e 	bgeu	r2,r8,530c4 <__divdf3+0x580>
   530bc:	01000074 	movhi	r4,1
   530c0:	390f883a 	add	r7,r7,r4
   530c4:	1008d43a 	srli	r4,r2,16
   530c8:	1004943a 	slli	r2,r2,16
   530cc:	297fffcc 	andi	r5,r5,65535
   530d0:	390f883a 	add	r7,r7,r4
   530d4:	1145883a 	add	r2,r2,r5
   530d8:	19c06536 	bltu	r3,r7,53270 <__divdf3+0x72c>
   530dc:	19c09f26 	beq	r3,r7,5335c <__divdf3+0x818>
   530e0:	9cc00054 	ori	r19,r19,1
   530e4:	a100ffc4 	addi	r4,r20,1023
   530e8:	013f500e 	bge	zero,r4,52e2c <__alt_data_end+0xfffebd2c>
   530ec:	988001cc 	andi	r2,r19,7
   530f0:	10000726 	beq	r2,zero,53110 <__divdf3+0x5cc>
   530f4:	98c003cc 	andi	r3,r19,15
   530f8:	00800104 	movi	r2,4
   530fc:	18800426 	beq	r3,r2,53110 <__divdf3+0x5cc>
   53100:	9885883a 	add	r2,r19,r2
   53104:	14e1803a 	cmpltu	r16,r2,r19
   53108:	8c23883a 	add	r17,r17,r16
   5310c:	1027883a 	mov	r19,r2
   53110:	8880402c 	andhi	r2,r17,256
   53114:	10000426 	beq	r2,zero,53128 <__divdf3+0x5e4>
   53118:	00bfc034 	movhi	r2,65280
   5311c:	10bfffc4 	addi	r2,r2,-1
   53120:	a1010004 	addi	r4,r20,1024
   53124:	88a2703a 	and	r17,r17,r2
   53128:	0081ff84 	movi	r2,2046
   5312c:	113edf16 	blt	r2,r4,52cac <__alt_data_end+0xfffebbac>
   53130:	9826d0fa 	srli	r19,r19,3
   53134:	8804977a 	slli	r2,r17,29
   53138:	8820927a 	slli	r16,r17,9
   5313c:	2101ffcc 	andi	r4,r4,2047
   53140:	14e6b03a 	or	r19,r2,r19
   53144:	800ad33a 	srli	r5,r16,12
   53148:	9180004c 	andi	r6,r18,1
   5314c:	003edb06 	br	52cbc <__alt_data_end+0xfffebbbc>
   53150:	008000c4 	movi	r2,3
   53154:	4080a826 	beq	r8,r2,533f8 <__divdf3+0x8b4>
   53158:	00800044 	movi	r2,1
   5315c:	4080551e 	bne	r8,r2,532b4 <__divdf3+0x770>
   53160:	e00d883a 	mov	r6,fp
   53164:	0009883a 	mov	r4,zero
   53168:	000b883a 	mov	r5,zero
   5316c:	0027883a 	mov	r19,zero
   53170:	003ed206 	br	52cbc <__alt_data_end+0xfffebbbc>
   53174:	00800434 	movhi	r2,16
   53178:	89400234 	orhi	r5,r17,8
   5317c:	10bfffc4 	addi	r2,r2,-1
   53180:	b00d883a 	mov	r6,r22
   53184:	288a703a 	and	r5,r5,r2
   53188:	003f2606 	br	52e24 <__alt_data_end+0xfffebd24>
   5318c:	d9800315 	stw	r6,12(sp)
   53190:	d9c00115 	stw	r7,4(sp)
   53194:	0047d380 	call	47d38 <__clzsi2>
   53198:	10c00804 	addi	r3,r2,32
   5319c:	010009c4 	movi	r4,39
   531a0:	d9800317 	ldw	r6,12(sp)
   531a4:	d9c00117 	ldw	r7,4(sp)
   531a8:	20fee30e 	bge	r4,r3,52d38 <__alt_data_end+0xfffebc38>
   531ac:	117ffe04 	addi	r5,r2,-8
   531b0:	9162983a 	sll	r17,r18,r5
   531b4:	0027883a 	mov	r19,zero
   531b8:	003ee606 	br	52d54 <__alt_data_end+0xfffebc54>
   531bc:	3009883a 	mov	r4,r6
   531c0:	d9800315 	stw	r6,12(sp)
   531c4:	da000215 	stw	r8,8(sp)
   531c8:	da400015 	stw	r9,0(sp)
   531cc:	0047d380 	call	47d38 <__clzsi2>
   531d0:	10c00804 	addi	r3,r2,32
   531d4:	010009c4 	movi	r4,39
   531d8:	d9800317 	ldw	r6,12(sp)
   531dc:	da000217 	ldw	r8,8(sp)
   531e0:	da400017 	ldw	r9,0(sp)
   531e4:	20fef20e 	bge	r4,r3,52db0 <__alt_data_end+0xfffebcb0>
   531e8:	10bffe04 	addi	r2,r2,-8
   531ec:	a8a0983a 	sll	r16,r21,r2
   531f0:	002b883a 	mov	r21,zero
   531f4:	003ef506 	br	52dcc <__alt_data_end+0xfffebccc>
   531f8:	354d883a 	add	r6,r6,r21
   531fc:	3549803a 	cmpltu	r4,r6,r21
   53200:	2409883a 	add	r4,r4,r16
   53204:	2089883a 	add	r4,r4,r2
   53208:	88bfffc4 	addi	r2,r17,-1
   5320c:	81000c2e 	bgeu	r16,r4,53240 <__divdf3+0x6fc>
   53210:	20c04436 	bltu	r4,r3,53324 <__divdf3+0x7e0>
   53214:	19006f26 	beq	r3,r4,533d4 <__divdf3+0x890>
   53218:	20c7c83a 	sub	r3,r4,r3
   5321c:	1023883a 	mov	r17,r2
   53220:	003f6406 	br	52fb4 <__alt_data_end+0xfffebeb4>
   53224:	9d7f1736 	bltu	r19,r21,52e84 <__alt_data_end+0xfffebd84>
   53228:	9806d07a 	srli	r3,r19,1
   5322c:	880497fa 	slli	r2,r17,31
   53230:	980c97fa 	slli	r6,r19,31
   53234:	882cd07a 	srli	r22,r17,1
   53238:	18a6b03a 	or	r19,r3,r2
   5323c:	003f1406 	br	52e90 <__alt_data_end+0xfffebd90>
   53240:	243ff51e 	bne	r4,r16,53218 <__alt_data_end+0xfffec118>
   53244:	357ff22e 	bgeu	r6,r21,53210 <__alt_data_end+0xfffec110>
   53248:	80c7c83a 	sub	r3,r16,r3
   5324c:	1023883a 	mov	r17,r2
   53250:	003f5806 	br	52fb4 <__alt_data_end+0xfffebeb4>
   53254:	1013883a 	mov	r9,r2
   53258:	003f3d06 	br	52f50 <__alt_data_end+0xfffebe50>
   5325c:	1023883a 	mov	r17,r2
   53260:	003f2506 	br	52ef8 <__alt_data_end+0xfffebdf8>
   53264:	317fe436 	bltu	r6,r5,531f8 <__alt_data_end+0xfffec0f8>
   53268:	0007883a 	mov	r3,zero
   5326c:	003f5106 	br	52fb4 <__alt_data_end+0xfffebeb4>
   53270:	1c07883a 	add	r3,r3,r16
   53274:	993fffc4 	addi	r4,r19,-1
   53278:	1c000a2e 	bgeu	r3,r16,532a4 <__divdf3+0x760>
   5327c:	2027883a 	mov	r19,r4
   53280:	19ff971e 	bne	r3,r7,530e0 <__alt_data_end+0xfffebfe0>
   53284:	a8bf961e 	bne	r21,r2,530e0 <__alt_data_end+0xfffebfe0>
   53288:	003f9606 	br	530e4 <__alt_data_end+0xfffebfe4>
   5328c:	04ffffc4 	movi	r19,-1
   53290:	003f9406 	br	530e4 <__alt_data_end+0xfffebfe4>
   53294:	100d883a 	mov	r6,r2
   53298:	003f6106 	br	53020 <__alt_data_end+0xfffebf20>
   5329c:	1013883a 	mov	r9,r2
   532a0:	003f7906 	br	53088 <__alt_data_end+0xfffebf88>
   532a4:	19c02636 	bltu	r3,r7,53340 <__divdf3+0x7fc>
   532a8:	38c04d26 	beq	r7,r3,533e0 <__divdf3+0x89c>
   532ac:	2027883a 	mov	r19,r4
   532b0:	003f8b06 	br	530e0 <__alt_data_end+0xfffebfe0>
   532b4:	e025883a 	mov	r18,fp
   532b8:	003f8a06 	br	530e4 <__alt_data_end+0xfffebfe4>
   532bc:	008007c4 	movi	r2,31
   532c0:	14002a16 	blt	r2,r16,5336c <__divdf3+0x828>
   532c4:	a5010784 	addi	r20,r20,1054
   532c8:	8d04983a 	sll	r2,r17,r20
   532cc:	9c06d83a 	srl	r3,r19,r16
   532d0:	9d28983a 	sll	r20,r19,r20
   532d4:	8c20d83a 	srl	r16,r17,r16
   532d8:	1886b03a 	or	r3,r3,r2
   532dc:	a004c03a 	cmpne	r2,r20,zero
   532e0:	1884b03a 	or	r2,r3,r2
   532e4:	10c001cc 	andi	r3,r2,7
   532e8:	18000726 	beq	r3,zero,53308 <__divdf3+0x7c4>
   532ec:	110003cc 	andi	r4,r2,15
   532f0:	00c00104 	movi	r3,4
   532f4:	20c00426 	beq	r4,r3,53308 <__divdf3+0x7c4>
   532f8:	10c00104 	addi	r3,r2,4
   532fc:	1885803a 	cmpltu	r2,r3,r2
   53300:	80a1883a 	add	r16,r16,r2
   53304:	1805883a 	mov	r2,r3
   53308:	80c0202c 	andhi	r3,r16,128
   5330c:	18002d26 	beq	r3,zero,533c4 <__divdf3+0x880>
   53310:	9180004c 	andi	r6,r18,1
   53314:	01000044 	movi	r4,1
   53318:	000b883a 	mov	r5,zero
   5331c:	0027883a 	mov	r19,zero
   53320:	003e6606 	br	52cbc <__alt_data_end+0xfffebbbc>
   53324:	354d883a 	add	r6,r6,r21
   53328:	356d803a 	cmpltu	r22,r6,r21
   5332c:	b42d883a 	add	r22,r22,r16
   53330:	b12d883a 	add	r22,r22,r4
   53334:	8c7fff84 	addi	r17,r17,-2
   53338:	b0c7c83a 	sub	r3,r22,r3
   5333c:	003f1d06 	br	52fb4 <__alt_data_end+0xfffebeb4>
   53340:	ad4b883a 	add	r5,r21,r21
   53344:	2d6b803a 	cmpltu	r21,r5,r21
   53348:	ac2b883a 	add	r21,r21,r16
   5334c:	1d47883a 	add	r3,r3,r21
   53350:	993fff84 	addi	r4,r19,-2
   53354:	282b883a 	mov	r21,r5
   53358:	003fc806 	br	5327c <__alt_data_end+0xfffec17c>
   5335c:	103fc41e 	bne	r2,zero,53270 <__alt_data_end+0xfffec170>
   53360:	002b883a 	mov	r21,zero
   53364:	a8bf5e1e 	bne	r21,r2,530e0 <__alt_data_end+0xfffebfe0>
   53368:	003f5e06 	br	530e4 <__alt_data_end+0xfffebfe4>
   5336c:	00bef884 	movi	r2,-1054
   53370:	1505c83a 	sub	r2,r2,r20
   53374:	00c00804 	movi	r3,32
   53378:	8884d83a 	srl	r2,r17,r2
   5337c:	80c01c26 	beq	r16,r3,533f0 <__divdf3+0x8ac>
   53380:	a0c10f84 	addi	r3,r20,1086
   53384:	88c6983a 	sll	r3,r17,r3
   53388:	1cc6b03a 	or	r3,r3,r19
   5338c:	1806c03a 	cmpne	r3,r3,zero
   53390:	1884b03a 	or	r2,r3,r2
   53394:	140001cc 	andi	r16,r2,7
   53398:	8000061e 	bne	r16,zero,533b4 <__divdf3+0x870>
   5339c:	000b883a 	mov	r5,zero
   533a0:	1004d0fa 	srli	r2,r2,3
   533a4:	9180004c 	andi	r6,r18,1
   533a8:	0009883a 	mov	r4,zero
   533ac:	1426b03a 	or	r19,r2,r16
   533b0:	003e4206 	br	52cbc <__alt_data_end+0xfffebbbc>
   533b4:	110003cc 	andi	r4,r2,15
   533b8:	00c00104 	movi	r3,4
   533bc:	0021883a 	mov	r16,zero
   533c0:	20ffcd1e 	bne	r4,r3,532f8 <__alt_data_end+0xfffec1f8>
   533c4:	800a927a 	slli	r5,r16,9
   533c8:	8020977a 	slli	r16,r16,29
   533cc:	280ad33a 	srli	r5,r5,12
   533d0:	003ff306 	br	533a0 <__alt_data_end+0xfffec2a0>
   533d4:	317fd336 	bltu	r6,r5,53324 <__alt_data_end+0xfffec224>
   533d8:	1023883a 	mov	r17,r2
   533dc:	003fa206 	br	53268 <__alt_data_end+0xfffec168>
   533e0:	a8bfd736 	bltu	r21,r2,53340 <__alt_data_end+0xfffec240>
   533e4:	2027883a 	mov	r19,r4
   533e8:	a8bf3d1e 	bne	r21,r2,530e0 <__alt_data_end+0xfffebfe0>
   533ec:	003f3d06 	br	530e4 <__alt_data_end+0xfffebfe4>
   533f0:	0007883a 	mov	r3,zero
   533f4:	003fe406 	br	53388 <__alt_data_end+0xfffec288>
   533f8:	00800434 	movhi	r2,16
   533fc:	89400234 	orhi	r5,r17,8
   53400:	10bfffc4 	addi	r2,r2,-1
   53404:	e00d883a 	mov	r6,fp
   53408:	288a703a 	and	r5,r5,r2
   5340c:	003e8506 	br	52e24 <__alt_data_end+0xfffebd24>

00053410 <__eqdf2>:
   53410:	2804d53a 	srli	r2,r5,20
   53414:	3806d53a 	srli	r3,r7,20
   53418:	02000434 	movhi	r8,16
   5341c:	423fffc4 	addi	r8,r8,-1
   53420:	1081ffcc 	andi	r2,r2,2047
   53424:	0241ffc4 	movi	r9,2047
   53428:	2a14703a 	and	r10,r5,r8
   5342c:	18c1ffcc 	andi	r3,r3,2047
   53430:	3a10703a 	and	r8,r7,r8
   53434:	280ad7fa 	srli	r5,r5,31
   53438:	380ed7fa 	srli	r7,r7,31
   5343c:	12400f26 	beq	r2,r9,5347c <__eqdf2+0x6c>
   53440:	0241ffc4 	movi	r9,2047
   53444:	1a400326 	beq	r3,r9,53454 <__eqdf2+0x44>
   53448:	10c00526 	beq	r2,r3,53460 <__eqdf2+0x50>
   5344c:	00800044 	movi	r2,1
   53450:	f800283a 	ret
   53454:	4192b03a 	or	r9,r8,r6
   53458:	483ffc1e 	bne	r9,zero,5344c <__alt_data_end+0xfffec34c>
   5345c:	10fffb1e 	bne	r2,r3,5344c <__alt_data_end+0xfffec34c>
   53460:	523ffa1e 	bne	r10,r8,5344c <__alt_data_end+0xfffec34c>
   53464:	21bff91e 	bne	r4,r6,5344c <__alt_data_end+0xfffec34c>
   53468:	29c00826 	beq	r5,r7,5348c <__eqdf2+0x7c>
   5346c:	103ff71e 	bne	r2,zero,5344c <__alt_data_end+0xfffec34c>
   53470:	5104b03a 	or	r2,r10,r4
   53474:	1004c03a 	cmpne	r2,r2,zero
   53478:	f800283a 	ret
   5347c:	5112b03a 	or	r9,r10,r4
   53480:	483fef26 	beq	r9,zero,53440 <__alt_data_end+0xfffec340>
   53484:	00800044 	movi	r2,1
   53488:	f800283a 	ret
   5348c:	0005883a 	mov	r2,zero
   53490:	f800283a 	ret

00053494 <__gedf2>:
   53494:	2804d53a 	srli	r2,r5,20
   53498:	3806d53a 	srli	r3,r7,20
   5349c:	02000434 	movhi	r8,16
   534a0:	423fffc4 	addi	r8,r8,-1
   534a4:	0241ffc4 	movi	r9,2047
   534a8:	1081ffcc 	andi	r2,r2,2047
   534ac:	2a14703a 	and	r10,r5,r8
   534b0:	1a46703a 	and	r3,r3,r9
   534b4:	3a10703a 	and	r8,r7,r8
   534b8:	280ad7fa 	srli	r5,r5,31
   534bc:	380ed7fa 	srli	r7,r7,31
   534c0:	12400b26 	beq	r2,r9,534f0 <__gedf2+0x5c>
   534c4:	1a401626 	beq	r3,r9,53520 <__gedf2+0x8c>
   534c8:	10000c1e 	bne	r2,zero,534fc <__gedf2+0x68>
   534cc:	5112b03a 	or	r9,r10,r4
   534d0:	4813003a 	cmpeq	r9,r9,zero
   534d4:	4817883a 	mov	r11,r9
   534d8:	18000c1e 	bne	r3,zero,5350c <__gedf2+0x78>
   534dc:	4198b03a 	or	r12,r8,r6
   534e0:	60000a1e 	bne	r12,zero,5350c <__gedf2+0x78>
   534e4:	48001326 	beq	r9,zero,53534 <__gedf2+0xa0>
   534e8:	0005883a 	mov	r2,zero
   534ec:	f800283a 	ret
   534f0:	5112b03a 	or	r9,r10,r4
   534f4:	4800191e 	bne	r9,zero,5355c <__gedf2+0xc8>
   534f8:	18800926 	beq	r3,r2,53520 <__gedf2+0x8c>
   534fc:	18000b1e 	bne	r3,zero,5352c <__gedf2+0x98>
   53500:	4192b03a 	or	r9,r8,r6
   53504:	0017883a 	mov	r11,zero
   53508:	48000a26 	beq	r9,zero,53534 <__gedf2+0xa0>
   5350c:	39c03fcc 	andi	r7,r7,255
   53510:	58000726 	beq	r11,zero,53530 <__gedf2+0x9c>
   53514:	3800081e 	bne	r7,zero,53538 <__gedf2+0xa4>
   53518:	00bfffc4 	movi	r2,-1
   5351c:	f800283a 	ret
   53520:	4192b03a 	or	r9,r8,r6
   53524:	48000d1e 	bne	r9,zero,5355c <__gedf2+0xc8>
   53528:	103fe826 	beq	r2,zero,534cc <__alt_data_end+0xfffec3cc>
   5352c:	39c03fcc 	andi	r7,r7,255
   53530:	29c00326 	beq	r5,r7,53540 <__gedf2+0xac>
   53534:	283ff81e 	bne	r5,zero,53518 <__alt_data_end+0xfffec418>
   53538:	00800044 	movi	r2,1
   5353c:	f800283a 	ret
   53540:	18bffc16 	blt	r3,r2,53534 <__alt_data_end+0xfffec434>
   53544:	10c00316 	blt	r2,r3,53554 <__gedf2+0xc0>
   53548:	42bffa36 	bltu	r8,r10,53534 <__alt_data_end+0xfffec434>
   5354c:	52000526 	beq	r10,r8,53564 <__gedf2+0xd0>
   53550:	523fe52e 	bgeu	r10,r8,534e8 <__alt_data_end+0xfffec3e8>
   53554:	283ff026 	beq	r5,zero,53518 <__alt_data_end+0xfffec418>
   53558:	003ff706 	br	53538 <__alt_data_end+0xfffec438>
   5355c:	00bfff84 	movi	r2,-2
   53560:	f800283a 	ret
   53564:	313ff336 	bltu	r6,r4,53534 <__alt_data_end+0xfffec434>
   53568:	21bfdf2e 	bgeu	r4,r6,534e8 <__alt_data_end+0xfffec3e8>
   5356c:	283fea26 	beq	r5,zero,53518 <__alt_data_end+0xfffec418>
   53570:	003ff106 	br	53538 <__alt_data_end+0xfffec438>

00053574 <__ledf2>:
   53574:	2804d53a 	srli	r2,r5,20
   53578:	3810d53a 	srli	r8,r7,20
   5357c:	00c00434 	movhi	r3,16
   53580:	18ffffc4 	addi	r3,r3,-1
   53584:	0241ffc4 	movi	r9,2047
   53588:	1081ffcc 	andi	r2,r2,2047
   5358c:	28d4703a 	and	r10,r5,r3
   53590:	4250703a 	and	r8,r8,r9
   53594:	38c6703a 	and	r3,r7,r3
   53598:	280ad7fa 	srli	r5,r5,31
   5359c:	380ed7fa 	srli	r7,r7,31
   535a0:	12400b26 	beq	r2,r9,535d0 <__ledf2+0x5c>
   535a4:	42401926 	beq	r8,r9,5360c <__ledf2+0x98>
   535a8:	10000c1e 	bne	r2,zero,535dc <__ledf2+0x68>
   535ac:	5112b03a 	or	r9,r10,r4
   535b0:	4813003a 	cmpeq	r9,r9,zero
   535b4:	4817883a 	mov	r11,r9
   535b8:	40000f26 	beq	r8,zero,535f8 <__ledf2+0x84>
   535bc:	39c03fcc 	andi	r7,r7,255
   535c0:	58001826 	beq	r11,zero,53624 <__ledf2+0xb0>
   535c4:	38000a1e 	bne	r7,zero,535f0 <__ledf2+0x7c>
   535c8:	00bfffc4 	movi	r2,-1
   535cc:	f800283a 	ret
   535d0:	5112b03a 	or	r9,r10,r4
   535d4:	48000f1e 	bne	r9,zero,53614 <__ledf2+0xa0>
   535d8:	40800c26 	beq	r8,r2,5360c <__ledf2+0x98>
   535dc:	4000101e 	bne	r8,zero,53620 <__ledf2+0xac>
   535e0:	1992b03a 	or	r9,r3,r6
   535e4:	0017883a 	mov	r11,zero
   535e8:	483ff41e 	bne	r9,zero,535bc <__alt_data_end+0xfffec4bc>
   535ec:	283ff61e 	bne	r5,zero,535c8 <__alt_data_end+0xfffec4c8>
   535f0:	00800044 	movi	r2,1
   535f4:	f800283a 	ret
   535f8:	1998b03a 	or	r12,r3,r6
   535fc:	603fef1e 	bne	r12,zero,535bc <__alt_data_end+0xfffec4bc>
   53600:	483ffa26 	beq	r9,zero,535ec <__alt_data_end+0xfffec4ec>
   53604:	0005883a 	mov	r2,zero
   53608:	f800283a 	ret
   5360c:	1992b03a 	or	r9,r3,r6
   53610:	48000226 	beq	r9,zero,5361c <__ledf2+0xa8>
   53614:	00800084 	movi	r2,2
   53618:	f800283a 	ret
   5361c:	103fe326 	beq	r2,zero,535ac <__alt_data_end+0xfffec4ac>
   53620:	39c03fcc 	andi	r7,r7,255
   53624:	29fff11e 	bne	r5,r7,535ec <__alt_data_end+0xfffec4ec>
   53628:	40bff016 	blt	r8,r2,535ec <__alt_data_end+0xfffec4ec>
   5362c:	12000316 	blt	r2,r8,5363c <__ledf2+0xc8>
   53630:	1abfee36 	bltu	r3,r10,535ec <__alt_data_end+0xfffec4ec>
   53634:	50c00326 	beq	r10,r3,53644 <__ledf2+0xd0>
   53638:	50fff22e 	bgeu	r10,r3,53604 <__alt_data_end+0xfffec504>
   5363c:	283fe226 	beq	r5,zero,535c8 <__alt_data_end+0xfffec4c8>
   53640:	003feb06 	br	535f0 <__alt_data_end+0xfffec4f0>
   53644:	313fe936 	bltu	r6,r4,535ec <__alt_data_end+0xfffec4ec>
   53648:	21bfee2e 	bgeu	r4,r6,53604 <__alt_data_end+0xfffec504>
   5364c:	283fde26 	beq	r5,zero,535c8 <__alt_data_end+0xfffec4c8>
   53650:	003fe706 	br	535f0 <__alt_data_end+0xfffec4f0>

00053654 <__muldf3>:
   53654:	defff204 	addi	sp,sp,-56
   53658:	2804d53a 	srli	r2,r5,20
   5365c:	dd800a15 	stw	r22,40(sp)
   53660:	282cd7fa 	srli	r22,r5,31
   53664:	dc000415 	stw	r16,16(sp)
   53668:	04000434 	movhi	r16,16
   5366c:	df000c15 	stw	fp,48(sp)
   53670:	dd000815 	stw	r20,32(sp)
   53674:	dcc00715 	stw	r19,28(sp)
   53678:	dc800615 	stw	r18,24(sp)
   5367c:	dc400515 	stw	r17,20(sp)
   53680:	843fffc4 	addi	r16,r16,-1
   53684:	dfc00d15 	stw	ra,52(sp)
   53688:	ddc00b15 	stw	r23,44(sp)
   5368c:	dd400915 	stw	r21,36(sp)
   53690:	1501ffcc 	andi	r20,r2,2047
   53694:	2023883a 	mov	r17,r4
   53698:	2025883a 	mov	r18,r4
   5369c:	2c20703a 	and	r16,r5,r16
   536a0:	b027883a 	mov	r19,r22
   536a4:	b7003fcc 	andi	fp,r22,255
   536a8:	a0005926 	beq	r20,zero,53810 <__muldf3+0x1bc>
   536ac:	0081ffc4 	movi	r2,2047
   536b0:	a0803426 	beq	r20,r2,53784 <__muldf3+0x130>
   536b4:	84000434 	orhi	r16,r16,16
   536b8:	2004d77a 	srli	r2,r4,29
   536bc:	802090fa 	slli	r16,r16,3
   536c0:	202490fa 	slli	r18,r4,3
   536c4:	a53f0044 	addi	r20,r20,-1023
   536c8:	80a0b03a 	or	r16,r16,r2
   536cc:	002b883a 	mov	r21,zero
   536d0:	0015883a 	mov	r10,zero
   536d4:	3812d53a 	srli	r9,r7,20
   536d8:	3806d7fa 	srli	r3,r7,31
   536dc:	02000434 	movhi	r8,16
   536e0:	423fffc4 	addi	r8,r8,-1
   536e4:	4941ffcc 	andi	r5,r9,2047
   536e8:	302f883a 	mov	r23,r6
   536ec:	3a22703a 	and	r17,r7,r8
   536f0:	1ac03fcc 	andi	r11,r3,255
   536f4:	28006226 	beq	r5,zero,53880 <__muldf3+0x22c>
   536f8:	0081ffc4 	movi	r2,2047
   536fc:	28805a26 	beq	r5,r2,53868 <__muldf3+0x214>
   53700:	8a000434 	orhi	r8,r17,16
   53704:	3004d77a 	srli	r2,r6,29
   53708:	401090fa 	slli	r8,r8,3
   5370c:	302e90fa 	slli	r23,r6,3
   53710:	297f0044 	addi	r5,r5,-1023
   53714:	40a2b03a 	or	r17,r8,r2
   53718:	0013883a 	mov	r9,zero
   5371c:	4d4cb03a 	or	r6,r9,r21
   53720:	300c90ba 	slli	r6,r6,2
   53724:	02000174 	movhi	r8,5
   53728:	420dd104 	addi	r8,r8,14148
   5372c:	320d883a 	add	r6,r6,r8
   53730:	31800017 	ldw	r6,0(r6)
   53734:	a14b883a 	add	r5,r20,r5
   53738:	1dacf03a 	xor	r22,r3,r22
   5373c:	2b000044 	addi	r12,r5,1
   53740:	3000683a 	jmp	r6
   53744:	00053980 	call	5398 <__reset-0x3ac68>
   53748:	0005396c 	andhi	zero,zero,5349
   5374c:	0005396c 	andhi	zero,zero,5349
   53750:	00053958 	cmpnei	zero,zero,5349
   53754:	000537a0 	cmpeqi	zero,zero,5342
   53758:	000537a0 	cmpeqi	zero,zero,5342
   5375c:	00053940 	call	5394 <__reset-0x3ac6c>
   53760:	00053958 	cmpnei	zero,zero,5349
   53764:	000537a0 	cmpeqi	zero,zero,5342
   53768:	00053940 	call	5394 <__reset-0x3ac6c>
   5376c:	000537a0 	cmpeqi	zero,zero,5342
   53770:	00053958 	cmpnei	zero,zero,5349
   53774:	000537a4 	muli	zero,zero,5342
   53778:	000537a4 	muli	zero,zero,5342
   5377c:	000537a4 	muli	zero,zero,5342
   53780:	00053b7c 	xorhi	zero,zero,5357
   53784:	8104b03a 	or	r2,r16,r4
   53788:	10006a1e 	bne	r2,zero,53934 <__muldf3+0x2e0>
   5378c:	05400204 	movi	r21,8
   53790:	0021883a 	mov	r16,zero
   53794:	0025883a 	mov	r18,zero
   53798:	02800084 	movi	r10,2
   5379c:	003fcd06 	br	536d4 <__alt_data_end+0xfffec5d4>
   537a0:	b039883a 	mov	fp,r22
   537a4:	00800084 	movi	r2,2
   537a8:	50804e1e 	bne	r10,r2,538e4 <__muldf3+0x290>
   537ac:	e4c0004c 	andi	r19,fp,1
   537b0:	0101ffc4 	movi	r4,2047
   537b4:	0021883a 	mov	r16,zero
   537b8:	0025883a 	mov	r18,zero
   537bc:	2008953a 	slli	r4,r4,20
   537c0:	98c03fcc 	andi	r3,r19,255
   537c4:	01400434 	movhi	r5,16
   537c8:	297fffc4 	addi	r5,r5,-1
   537cc:	180697fa 	slli	r3,r3,31
   537d0:	8160703a 	and	r16,r16,r5
   537d4:	8120b03a 	or	r16,r16,r4
   537d8:	80c6b03a 	or	r3,r16,r3
   537dc:	9005883a 	mov	r2,r18
   537e0:	dfc00d17 	ldw	ra,52(sp)
   537e4:	df000c17 	ldw	fp,48(sp)
   537e8:	ddc00b17 	ldw	r23,44(sp)
   537ec:	dd800a17 	ldw	r22,40(sp)
   537f0:	dd400917 	ldw	r21,36(sp)
   537f4:	dd000817 	ldw	r20,32(sp)
   537f8:	dcc00717 	ldw	r19,28(sp)
   537fc:	dc800617 	ldw	r18,24(sp)
   53800:	dc400517 	ldw	r17,20(sp)
   53804:	dc000417 	ldw	r16,16(sp)
   53808:	dec00e04 	addi	sp,sp,56
   5380c:	f800283a 	ret
   53810:	8104b03a 	or	r2,r16,r4
   53814:	10004226 	beq	r2,zero,53920 <__muldf3+0x2cc>
   53818:	8000f926 	beq	r16,zero,53c00 <__muldf3+0x5ac>
   5381c:	8009883a 	mov	r4,r16
   53820:	d9800315 	stw	r6,12(sp)
   53824:	d9c00015 	stw	r7,0(sp)
   53828:	0047d380 	call	47d38 <__clzsi2>
   5382c:	d9800317 	ldw	r6,12(sp)
   53830:	d9c00017 	ldw	r7,0(sp)
   53834:	1007883a 	mov	r3,r2
   53838:	01000a04 	movi	r4,40
   5383c:	18bffe04 	addi	r2,r3,-8
   53840:	20c9c83a 	sub	r4,r4,r3
   53844:	80a0983a 	sll	r16,r16,r2
   53848:	8908d83a 	srl	r4,r17,r4
   5384c:	88a4983a 	sll	r18,r17,r2
   53850:	2420b03a 	or	r16,r4,r16
   53854:	017f0344 	movi	r5,-1011
   53858:	28e9c83a 	sub	r20,r5,r3
   5385c:	002b883a 	mov	r21,zero
   53860:	0015883a 	mov	r10,zero
   53864:	003f9b06 	br	536d4 <__alt_data_end+0xfffec5d4>
   53868:	8984b03a 	or	r2,r17,r6
   5386c:	10002a1e 	bne	r2,zero,53918 <__muldf3+0x2c4>
   53870:	0023883a 	mov	r17,zero
   53874:	002f883a 	mov	r23,zero
   53878:	02400084 	movi	r9,2
   5387c:	003fa706 	br	5371c <__alt_data_end+0xfffec61c>
   53880:	8984b03a 	or	r2,r17,r6
   53884:	10002026 	beq	r2,zero,53908 <__muldf3+0x2b4>
   53888:	8800cc26 	beq	r17,zero,53bbc <__muldf3+0x568>
   5388c:	8809883a 	mov	r4,r17
   53890:	d8c00215 	stw	r3,8(sp)
   53894:	d9800315 	stw	r6,12(sp)
   53898:	da800015 	stw	r10,0(sp)
   5389c:	dac00115 	stw	r11,4(sp)
   538a0:	0047d380 	call	47d38 <__clzsi2>
   538a4:	d8c00217 	ldw	r3,8(sp)
   538a8:	d9800317 	ldw	r6,12(sp)
   538ac:	da800017 	ldw	r10,0(sp)
   538b0:	dac00117 	ldw	r11,4(sp)
   538b4:	1009883a 	mov	r4,r2
   538b8:	01400a04 	movi	r5,40
   538bc:	25fffe04 	addi	r23,r4,-8
   538c0:	290bc83a 	sub	r5,r5,r4
   538c4:	8dd0983a 	sll	r8,r17,r23
   538c8:	314ad83a 	srl	r5,r6,r5
   538cc:	35ee983a 	sll	r23,r6,r23
   538d0:	2a22b03a 	or	r17,r5,r8
   538d4:	017f0344 	movi	r5,-1011
   538d8:	290bc83a 	sub	r5,r5,r4
   538dc:	0013883a 	mov	r9,zero
   538e0:	003f8e06 	br	5371c <__alt_data_end+0xfffec61c>
   538e4:	008000c4 	movi	r2,3
   538e8:	50811d26 	beq	r10,r2,53d60 <__muldf3+0x70c>
   538ec:	00800044 	movi	r2,1
   538f0:	5080e01e 	bne	r10,r2,53c74 <__muldf3+0x620>
   538f4:	e0a6703a 	and	r19,fp,r2
   538f8:	0009883a 	mov	r4,zero
   538fc:	0021883a 	mov	r16,zero
   53900:	0025883a 	mov	r18,zero
   53904:	003fad06 	br	537bc <__alt_data_end+0xfffec6bc>
   53908:	0023883a 	mov	r17,zero
   5390c:	002f883a 	mov	r23,zero
   53910:	02400044 	movi	r9,1
   53914:	003f8106 	br	5371c <__alt_data_end+0xfffec61c>
   53918:	024000c4 	movi	r9,3
   5391c:	003f7f06 	br	5371c <__alt_data_end+0xfffec61c>
   53920:	05400104 	movi	r21,4
   53924:	0021883a 	mov	r16,zero
   53928:	0025883a 	mov	r18,zero
   5392c:	02800044 	movi	r10,1
   53930:	003f6806 	br	536d4 <__alt_data_end+0xfffec5d4>
   53934:	05400304 	movi	r21,12
   53938:	028000c4 	movi	r10,3
   5393c:	003f6506 	br	536d4 <__alt_data_end+0xfffec5d4>
   53940:	04000434 	movhi	r16,16
   53944:	0027883a 	mov	r19,zero
   53948:	843fffc4 	addi	r16,r16,-1
   5394c:	04bfffc4 	movi	r18,-1
   53950:	0101ffc4 	movi	r4,2047
   53954:	003f9906 	br	537bc <__alt_data_end+0xfffec6bc>
   53958:	8821883a 	mov	r16,r17
   5395c:	b825883a 	mov	r18,r23
   53960:	5839883a 	mov	fp,r11
   53964:	4815883a 	mov	r10,r9
   53968:	003f8e06 	br	537a4 <__alt_data_end+0xfffec6a4>
   5396c:	8821883a 	mov	r16,r17
   53970:	b825883a 	mov	r18,r23
   53974:	b039883a 	mov	fp,r22
   53978:	4815883a 	mov	r10,r9
   5397c:	003f8906 	br	537a4 <__alt_data_end+0xfffec6a4>
   53980:	b80cd43a 	srli	r6,r23,16
   53984:	9006d43a 	srli	r3,r18,16
   53988:	90bfffcc 	andi	r2,r18,65535
   5398c:	bdffffcc 	andi	r23,r23,65535
   53990:	b891383a 	mul	r8,r23,r2
   53994:	b8c9383a 	mul	r4,r23,r3
   53998:	309b383a 	mul	r13,r6,r2
   5399c:	400ed43a 	srli	r7,r8,16
   539a0:	30df383a 	mul	r15,r6,r3
   539a4:	235b883a 	add	r13,r4,r13
   539a8:	69db883a 	add	r13,r13,r7
   539ac:	6900022e 	bgeu	r13,r4,539b8 <__muldf3+0x364>
   539b0:	01000074 	movhi	r4,1
   539b4:	791f883a 	add	r15,r15,r4
   539b8:	8828d43a 	srli	r20,r17,16
   539bc:	8c7fffcc 	andi	r17,r17,65535
   539c0:	888f383a 	mul	r7,r17,r2
   539c4:	88d3383a 	mul	r9,r17,r3
   539c8:	a0a5383a 	mul	r18,r20,r2
   539cc:	3816d43a 	srli	r11,r7,16
   539d0:	6814943a 	slli	r10,r13,16
   539d4:	4ca5883a 	add	r18,r9,r18
   539d8:	423fffcc 	andi	r8,r8,65535
   539dc:	92e5883a 	add	r18,r18,r11
   539e0:	6808d43a 	srli	r4,r13,16
   539e4:	5215883a 	add	r10,r10,r8
   539e8:	a0c7383a 	mul	r3,r20,r3
   539ec:	9240022e 	bgeu	r18,r9,539f8 <__muldf3+0x3a4>
   539f0:	00800074 	movhi	r2,1
   539f4:	1887883a 	add	r3,r3,r2
   539f8:	802ad43a 	srli	r21,r16,16
   539fc:	80bfffcc 	andi	r2,r16,65535
   53a00:	b893383a 	mul	r9,r23,r2
   53a04:	3091383a 	mul	r8,r6,r2
   53a08:	bd6f383a 	mul	r23,r23,r21
   53a0c:	9026943a 	slli	r19,r18,16
   53a10:	481ad43a 	srli	r13,r9,16
   53a14:	9024d43a 	srli	r18,r18,16
   53a18:	39ffffcc 	andi	r7,r7,65535
   53a1c:	ba11883a 	add	r8,r23,r8
   53a20:	99e7883a 	add	r19,r19,r7
   53a24:	4351883a 	add	r8,r8,r13
   53a28:	1c97883a 	add	r11,r3,r18
   53a2c:	354d383a 	mul	r6,r6,r21
   53a30:	9925883a 	add	r18,r19,r4
   53a34:	45c0022e 	bgeu	r8,r23,53a40 <__muldf3+0x3ec>
   53a38:	00c00074 	movhi	r3,1
   53a3c:	30cd883a 	add	r6,r6,r3
   53a40:	8889383a 	mul	r4,r17,r2
   53a44:	8d63383a 	mul	r17,r17,r21
   53a48:	a085383a 	mul	r2,r20,r2
   53a4c:	200ed43a 	srli	r7,r4,16
   53a50:	401cd43a 	srli	r14,r8,16
   53a54:	401a943a 	slli	r13,r8,16
   53a58:	8885883a 	add	r2,r17,r2
   53a5c:	4a3fffcc 	andi	r8,r9,65535
   53a60:	11c5883a 	add	r2,r2,r7
   53a64:	339d883a 	add	r14,r6,r14
   53a68:	6a11883a 	add	r8,r13,r8
   53a6c:	a561383a 	mul	r16,r20,r21
   53a70:	1440022e 	bgeu	r2,r17,53a7c <__muldf3+0x428>
   53a74:	00c00074 	movhi	r3,1
   53a78:	80e1883a 	add	r16,r16,r3
   53a7c:	1006943a 	slli	r3,r2,16
   53a80:	213fffcc 	andi	r4,r4,65535
   53a84:	93db883a 	add	r13,r18,r15
   53a88:	1909883a 	add	r4,r3,r4
   53a8c:	22c7883a 	add	r3,r4,r11
   53a90:	6cd3803a 	cmpltu	r9,r13,r19
   53a94:	6a09883a 	add	r4,r13,r8
   53a98:	1a5b883a 	add	r13,r3,r9
   53a9c:	2211803a 	cmpltu	r8,r4,r8
   53aa0:	734d883a 	add	r6,r14,r13
   53aa4:	100ed43a 	srli	r7,r2,16
   53aa8:	6a53803a 	cmpltu	r9,r13,r9
   53aac:	3205883a 	add	r2,r6,r8
   53ab0:	1ac7803a 	cmpltu	r3,r3,r11
   53ab4:	1211803a 	cmpltu	r8,r2,r8
   53ab8:	48c6b03a 	or	r3,r9,r3
   53abc:	338d803a 	cmpltu	r6,r6,r14
   53ac0:	19c7883a 	add	r3,r3,r7
   53ac4:	418cb03a 	or	r6,r8,r6
   53ac8:	1987883a 	add	r3,r3,r6
   53acc:	2024927a 	slli	r18,r4,9
   53ad0:	1c07883a 	add	r3,r3,r16
   53ad4:	1806927a 	slli	r3,r3,9
   53ad8:	1020d5fa 	srli	r16,r2,23
   53adc:	2008d5fa 	srli	r4,r4,23
   53ae0:	9294b03a 	or	r10,r18,r10
   53ae4:	1004927a 	slli	r2,r2,9
   53ae8:	5024c03a 	cmpne	r18,r10,zero
   53aec:	1c20b03a 	or	r16,r3,r16
   53af0:	9108b03a 	or	r4,r18,r4
   53af4:	80c0402c 	andhi	r3,r16,256
   53af8:	20a4b03a 	or	r18,r4,r2
   53afc:	18000726 	beq	r3,zero,53b1c <__muldf3+0x4c8>
   53b00:	9006d07a 	srli	r3,r18,1
   53b04:	800897fa 	slli	r4,r16,31
   53b08:	9080004c 	andi	r2,r18,1
   53b0c:	8020d07a 	srli	r16,r16,1
   53b10:	10c4b03a 	or	r2,r2,r3
   53b14:	1124b03a 	or	r18,r2,r4
   53b18:	600b883a 	mov	r5,r12
   53b1c:	2900ffc4 	addi	r4,r5,1023
   53b20:	01004b0e 	bge	zero,r4,53c50 <__muldf3+0x5fc>
   53b24:	908001cc 	andi	r2,r18,7
   53b28:	10000726 	beq	r2,zero,53b48 <__muldf3+0x4f4>
   53b2c:	90c003cc 	andi	r3,r18,15
   53b30:	00800104 	movi	r2,4
   53b34:	18800426 	beq	r3,r2,53b48 <__muldf3+0x4f4>
   53b38:	9087883a 	add	r3,r18,r2
   53b3c:	1c85803a 	cmpltu	r2,r3,r18
   53b40:	80a1883a 	add	r16,r16,r2
   53b44:	1825883a 	mov	r18,r3
   53b48:	8080402c 	andhi	r2,r16,256
   53b4c:	10000426 	beq	r2,zero,53b60 <__muldf3+0x50c>
   53b50:	00bfc034 	movhi	r2,65280
   53b54:	10bfffc4 	addi	r2,r2,-1
   53b58:	29010004 	addi	r4,r5,1024
   53b5c:	80a0703a 	and	r16,r16,r2
   53b60:	0081ff84 	movi	r2,2046
   53b64:	1100320e 	bge	r2,r4,53c30 <__muldf3+0x5dc>
   53b68:	b4c0004c 	andi	r19,r22,1
   53b6c:	0101ffc4 	movi	r4,2047
   53b70:	0021883a 	mov	r16,zero
   53b74:	0025883a 	mov	r18,zero
   53b78:	003f1006 	br	537bc <__alt_data_end+0xfffec6bc>
   53b7c:	8080022c 	andhi	r2,r16,8
   53b80:	10000926 	beq	r2,zero,53ba8 <__muldf3+0x554>
   53b84:	8880022c 	andhi	r2,r17,8
   53b88:	1000071e 	bne	r2,zero,53ba8 <__muldf3+0x554>
   53b8c:	00800434 	movhi	r2,16
   53b90:	8c000234 	orhi	r16,r17,8
   53b94:	10bfffc4 	addi	r2,r2,-1
   53b98:	1827883a 	mov	r19,r3
   53b9c:	80a0703a 	and	r16,r16,r2
   53ba0:	b825883a 	mov	r18,r23
   53ba4:	003f6a06 	br	53950 <__alt_data_end+0xfffec850>
   53ba8:	00800434 	movhi	r2,16
   53bac:	84000234 	orhi	r16,r16,8
   53bb0:	10bfffc4 	addi	r2,r2,-1
   53bb4:	80a0703a 	and	r16,r16,r2
   53bb8:	003f6506 	br	53950 <__alt_data_end+0xfffec850>
   53bbc:	3009883a 	mov	r4,r6
   53bc0:	d8c00215 	stw	r3,8(sp)
   53bc4:	d9800315 	stw	r6,12(sp)
   53bc8:	da800015 	stw	r10,0(sp)
   53bcc:	dac00115 	stw	r11,4(sp)
   53bd0:	0047d380 	call	47d38 <__clzsi2>
   53bd4:	11000804 	addi	r4,r2,32
   53bd8:	014009c4 	movi	r5,39
   53bdc:	d8c00217 	ldw	r3,8(sp)
   53be0:	d9800317 	ldw	r6,12(sp)
   53be4:	da800017 	ldw	r10,0(sp)
   53be8:	dac00117 	ldw	r11,4(sp)
   53bec:	293f320e 	bge	r5,r4,538b8 <__alt_data_end+0xfffec7b8>
   53bf0:	10bffe04 	addi	r2,r2,-8
   53bf4:	b8a2983a 	sll	r17,r23,r2
   53bf8:	002f883a 	mov	r23,zero
   53bfc:	003f3506 	br	538d4 <__alt_data_end+0xfffec7d4>
   53c00:	d9800315 	stw	r6,12(sp)
   53c04:	d9c00015 	stw	r7,0(sp)
   53c08:	0047d380 	call	47d38 <__clzsi2>
   53c0c:	10c00804 	addi	r3,r2,32
   53c10:	010009c4 	movi	r4,39
   53c14:	d9800317 	ldw	r6,12(sp)
   53c18:	d9c00017 	ldw	r7,0(sp)
   53c1c:	20ff060e 	bge	r4,r3,53838 <__alt_data_end+0xfffec738>
   53c20:	10bffe04 	addi	r2,r2,-8
   53c24:	88a0983a 	sll	r16,r17,r2
   53c28:	0025883a 	mov	r18,zero
   53c2c:	003f0906 	br	53854 <__alt_data_end+0xfffec754>
   53c30:	9004d0fa 	srli	r2,r18,3
   53c34:	8024977a 	slli	r18,r16,29
   53c38:	8020927a 	slli	r16,r16,9
   53c3c:	2101ffcc 	andi	r4,r4,2047
   53c40:	90a4b03a 	or	r18,r18,r2
   53c44:	8020d33a 	srli	r16,r16,12
   53c48:	b4c0004c 	andi	r19,r22,1
   53c4c:	003edb06 	br	537bc <__alt_data_end+0xfffec6bc>
   53c50:	00ff0084 	movi	r3,-1022
   53c54:	1947c83a 	sub	r3,r3,r5
   53c58:	00800e04 	movi	r2,56
   53c5c:	10c0080e 	bge	r2,r3,53c80 <__muldf3+0x62c>
   53c60:	b4c0004c 	andi	r19,r22,1
   53c64:	0009883a 	mov	r4,zero
   53c68:	0021883a 	mov	r16,zero
   53c6c:	0025883a 	mov	r18,zero
   53c70:	003ed206 	br	537bc <__alt_data_end+0xfffec6bc>
   53c74:	600b883a 	mov	r5,r12
   53c78:	e02d883a 	mov	r22,fp
   53c7c:	003fa706 	br	53b1c <__alt_data_end+0xfffeca1c>
   53c80:	008007c4 	movi	r2,31
   53c84:	10c01816 	blt	r2,r3,53ce8 <__muldf3+0x694>
   53c88:	29410784 	addi	r5,r5,1054
   53c8c:	8144983a 	sll	r2,r16,r5
   53c90:	90c8d83a 	srl	r4,r18,r3
   53c94:	914a983a 	sll	r5,r18,r5
   53c98:	80c6d83a 	srl	r3,r16,r3
   53c9c:	2088b03a 	or	r4,r4,r2
   53ca0:	2804c03a 	cmpne	r2,r5,zero
   53ca4:	2084b03a 	or	r2,r4,r2
   53ca8:	110001cc 	andi	r4,r2,7
   53cac:	20000726 	beq	r4,zero,53ccc <__muldf3+0x678>
   53cb0:	114003cc 	andi	r5,r2,15
   53cb4:	01000104 	movi	r4,4
   53cb8:	29000426 	beq	r5,r4,53ccc <__muldf3+0x678>
   53cbc:	11000104 	addi	r4,r2,4
   53cc0:	2085803a 	cmpltu	r2,r4,r2
   53cc4:	1887883a 	add	r3,r3,r2
   53cc8:	2005883a 	mov	r2,r4
   53ccc:	1900202c 	andhi	r4,r3,128
   53cd0:	20001826 	beq	r4,zero,53d34 <__muldf3+0x6e0>
   53cd4:	b4c0004c 	andi	r19,r22,1
   53cd8:	01000044 	movi	r4,1
   53cdc:	0021883a 	mov	r16,zero
   53ce0:	0025883a 	mov	r18,zero
   53ce4:	003eb506 	br	537bc <__alt_data_end+0xfffec6bc>
   53ce8:	00bef884 	movi	r2,-1054
   53cec:	1145c83a 	sub	r2,r2,r5
   53cf0:	8088d83a 	srl	r4,r16,r2
   53cf4:	00800804 	movi	r2,32
   53cf8:	18801726 	beq	r3,r2,53d58 <__muldf3+0x704>
   53cfc:	28810f84 	addi	r2,r5,1086
   53d00:	8084983a 	sll	r2,r16,r2
   53d04:	1484b03a 	or	r2,r2,r18
   53d08:	1004c03a 	cmpne	r2,r2,zero
   53d0c:	1104b03a 	or	r2,r2,r4
   53d10:	10c001cc 	andi	r3,r2,7
   53d14:	18000b1e 	bne	r3,zero,53d44 <__muldf3+0x6f0>
   53d18:	0021883a 	mov	r16,zero
   53d1c:	1004d0fa 	srli	r2,r2,3
   53d20:	b4c0004c 	andi	r19,r22,1
   53d24:	0009883a 	mov	r4,zero
   53d28:	10e4b03a 	or	r18,r2,r3
   53d2c:	003ea306 	br	537bc <__alt_data_end+0xfffec6bc>
   53d30:	0007883a 	mov	r3,zero
   53d34:	1820927a 	slli	r16,r3,9
   53d38:	1806977a 	slli	r3,r3,29
   53d3c:	8020d33a 	srli	r16,r16,12
   53d40:	003ff606 	br	53d1c <__alt_data_end+0xfffecc1c>
   53d44:	110003cc 	andi	r4,r2,15
   53d48:	00c00104 	movi	r3,4
   53d4c:	20fff826 	beq	r4,r3,53d30 <__alt_data_end+0xfffecc30>
   53d50:	0007883a 	mov	r3,zero
   53d54:	003fd906 	br	53cbc <__alt_data_end+0xfffecbbc>
   53d58:	0005883a 	mov	r2,zero
   53d5c:	003fe906 	br	53d04 <__alt_data_end+0xfffecc04>
   53d60:	00800434 	movhi	r2,16
   53d64:	84000234 	orhi	r16,r16,8
   53d68:	10bfffc4 	addi	r2,r2,-1
   53d6c:	e4c0004c 	andi	r19,fp,1
   53d70:	80a0703a 	and	r16,r16,r2
   53d74:	003ef606 	br	53950 <__alt_data_end+0xfffec850>

00053d78 <__subdf3>:
   53d78:	00c00434 	movhi	r3,16
   53d7c:	18ffffc4 	addi	r3,r3,-1
   53d80:	defffb04 	addi	sp,sp,-20
   53d84:	28d2703a 	and	r9,r5,r3
   53d88:	3814d53a 	srli	r10,r7,20
   53d8c:	38c6703a 	and	r3,r7,r3
   53d90:	3004d77a 	srli	r2,r6,29
   53d94:	dc800215 	stw	r18,8(sp)
   53d98:	dc000015 	stw	r16,0(sp)
   53d9c:	2824d7fa 	srli	r18,r5,31
   53da0:	2820d53a 	srli	r16,r5,20
   53da4:	481290fa 	slli	r9,r9,3
   53da8:	200ad77a 	srli	r5,r4,29
   53dac:	180690fa 	slli	r3,r3,3
   53db0:	dc400115 	stw	r17,4(sp)
   53db4:	dfc00415 	stw	ra,16(sp)
   53db8:	202290fa 	slli	r17,r4,3
   53dbc:	dcc00315 	stw	r19,12(sp)
   53dc0:	5281ffcc 	andi	r10,r10,2047
   53dc4:	0101ffc4 	movi	r4,2047
   53dc8:	9011883a 	mov	r8,r18
   53dcc:	8401ffcc 	andi	r16,r16,2047
   53dd0:	94803fcc 	andi	r18,r18,255
   53dd4:	494ab03a 	or	r5,r9,r5
   53dd8:	380ed7fa 	srli	r7,r7,31
   53ddc:	1886b03a 	or	r3,r3,r2
   53de0:	300c90fa 	slli	r6,r6,3
   53de4:	51009026 	beq	r10,r4,54028 <__subdf3+0x2b0>
   53de8:	39c0005c 	xori	r7,r7,1
   53dec:	8285c83a 	sub	r2,r16,r10
   53df0:	91c06f26 	beq	r18,r7,53fb0 <__subdf3+0x238>
   53df4:	0080b10e 	bge	zero,r2,540bc <__subdf3+0x344>
   53df8:	50002a1e 	bne	r10,zero,53ea4 <__subdf3+0x12c>
   53dfc:	1988b03a 	or	r4,r3,r6
   53e00:	2000941e 	bne	r4,zero,54054 <__subdf3+0x2dc>
   53e04:	888001cc 	andi	r2,r17,7
   53e08:	10005b26 	beq	r2,zero,53f78 <__subdf3+0x200>
   53e0c:	88c003cc 	andi	r3,r17,15
   53e10:	00800104 	movi	r2,4
   53e14:	18805826 	beq	r3,r2,53f78 <__subdf3+0x200>
   53e18:	88c00104 	addi	r3,r17,4
   53e1c:	1c63803a 	cmpltu	r17,r3,r17
   53e20:	2c4b883a 	add	r5,r5,r17
   53e24:	2880202c 	andhi	r2,r5,128
   53e28:	9200004c 	andi	r8,r18,1
   53e2c:	1823883a 	mov	r17,r3
   53e30:	10005426 	beq	r2,zero,53f84 <__subdf3+0x20c>
   53e34:	84000044 	addi	r16,r16,1
   53e38:	0081ffc4 	movi	r2,2047
   53e3c:	8080bf26 	beq	r16,r2,5413c <__subdf3+0x3c4>
   53e40:	013fe034 	movhi	r4,65408
   53e44:	213fffc4 	addi	r4,r4,-1
   53e48:	290a703a 	and	r5,r5,r4
   53e4c:	2804977a 	slli	r2,r5,29
   53e50:	280a927a 	slli	r5,r5,9
   53e54:	8822d0fa 	srli	r17,r17,3
   53e58:	8401ffcc 	andi	r16,r16,2047
   53e5c:	2808d33a 	srli	r4,r5,12
   53e60:	1444b03a 	or	r2,r2,r17
   53e64:	8401ffcc 	andi	r16,r16,2047
   53e68:	800a953a 	slli	r5,r16,20
   53e6c:	40c03fcc 	andi	r3,r8,255
   53e70:	04000434 	movhi	r16,16
   53e74:	180697fa 	slli	r3,r3,31
   53e78:	843fffc4 	addi	r16,r16,-1
   53e7c:	2420703a 	and	r16,r4,r16
   53e80:	8160b03a 	or	r16,r16,r5
   53e84:	80c6b03a 	or	r3,r16,r3
   53e88:	dfc00417 	ldw	ra,16(sp)
   53e8c:	dcc00317 	ldw	r19,12(sp)
   53e90:	dc800217 	ldw	r18,8(sp)
   53e94:	dc400117 	ldw	r17,4(sp)
   53e98:	dc000017 	ldw	r16,0(sp)
   53e9c:	dec00504 	addi	sp,sp,20
   53ea0:	f800283a 	ret
   53ea4:	0101ffc4 	movi	r4,2047
   53ea8:	813fd626 	beq	r16,r4,53e04 <__alt_data_end+0xfffecd04>
   53eac:	18c02034 	orhi	r3,r3,128
   53eb0:	01000e04 	movi	r4,56
   53eb4:	2080a416 	blt	r4,r2,54148 <__subdf3+0x3d0>
   53eb8:	010007c4 	movi	r4,31
   53ebc:	2080c716 	blt	r4,r2,541dc <__subdf3+0x464>
   53ec0:	01000804 	movi	r4,32
   53ec4:	2089c83a 	sub	r4,r4,r2
   53ec8:	1910983a 	sll	r8,r3,r4
   53ecc:	308ed83a 	srl	r7,r6,r2
   53ed0:	3108983a 	sll	r4,r6,r4
   53ed4:	1884d83a 	srl	r2,r3,r2
   53ed8:	41ccb03a 	or	r6,r8,r7
   53edc:	2008c03a 	cmpne	r4,r4,zero
   53ee0:	310cb03a 	or	r6,r6,r4
   53ee4:	898dc83a 	sub	r6,r17,r6
   53ee8:	89a3803a 	cmpltu	r17,r17,r6
   53eec:	288bc83a 	sub	r5,r5,r2
   53ef0:	2c4bc83a 	sub	r5,r5,r17
   53ef4:	3023883a 	mov	r17,r6
   53ef8:	2880202c 	andhi	r2,r5,128
   53efc:	10006b26 	beq	r2,zero,540ac <__subdf3+0x334>
   53f00:	04c02034 	movhi	r19,128
   53f04:	9cffffc4 	addi	r19,r19,-1
   53f08:	2ce6703a 	and	r19,r5,r19
   53f0c:	98007c26 	beq	r19,zero,54100 <__subdf3+0x388>
   53f10:	9809883a 	mov	r4,r19
   53f14:	0047d380 	call	47d38 <__clzsi2>
   53f18:	10fffe04 	addi	r3,r2,-8
   53f1c:	010007c4 	movi	r4,31
   53f20:	20c07d16 	blt	r4,r3,54118 <__subdf3+0x3a0>
   53f24:	01400a04 	movi	r5,40
   53f28:	2885c83a 	sub	r2,r5,r2
   53f2c:	888ad83a 	srl	r5,r17,r2
   53f30:	98e6983a 	sll	r19,r19,r3
   53f34:	88e2983a 	sll	r17,r17,r3
   53f38:	2ce6b03a 	or	r19,r5,r19
   53f3c:	1c007a16 	blt	r3,r16,54128 <__subdf3+0x3b0>
   53f40:	1c21c83a 	sub	r16,r3,r16
   53f44:	81400044 	addi	r5,r16,1
   53f48:	00c007c4 	movi	r3,31
   53f4c:	19409616 	blt	r3,r5,541a8 <__subdf3+0x430>
   53f50:	1c21c83a 	sub	r16,r3,r16
   53f54:	8c08983a 	sll	r4,r17,r16
   53f58:	8946d83a 	srl	r3,r17,r5
   53f5c:	9c20983a 	sll	r16,r19,r16
   53f60:	2008c03a 	cmpne	r4,r4,zero
   53f64:	994ad83a 	srl	r5,r19,r5
   53f68:	1c06b03a 	or	r3,r3,r16
   53f6c:	1922b03a 	or	r17,r3,r4
   53f70:	0021883a 	mov	r16,zero
   53f74:	003fa306 	br	53e04 <__alt_data_end+0xfffecd04>
   53f78:	2880202c 	andhi	r2,r5,128
   53f7c:	9200004c 	andi	r8,r18,1
   53f80:	103fac1e 	bne	r2,zero,53e34 <__alt_data_end+0xfffecd34>
   53f84:	2804977a 	slli	r2,r5,29
   53f88:	8822d0fa 	srli	r17,r17,3
   53f8c:	00c1ffc4 	movi	r3,2047
   53f90:	280ad0fa 	srli	r5,r5,3
   53f94:	1444b03a 	or	r2,r2,r17
   53f98:	80c02726 	beq	r16,r3,54038 <__subdf3+0x2c0>
   53f9c:	01000434 	movhi	r4,16
   53fa0:	213fffc4 	addi	r4,r4,-1
   53fa4:	80e0703a 	and	r16,r16,r3
   53fa8:	2908703a 	and	r4,r5,r4
   53fac:	003fad06 	br	53e64 <__alt_data_end+0xfffecd64>
   53fb0:	0080690e 	bge	zero,r2,54158 <__subdf3+0x3e0>
   53fb4:	50002f26 	beq	r10,zero,54074 <__subdf3+0x2fc>
   53fb8:	0101ffc4 	movi	r4,2047
   53fbc:	813f9126 	beq	r16,r4,53e04 <__alt_data_end+0xfffecd04>
   53fc0:	18c02034 	orhi	r3,r3,128
   53fc4:	01000e04 	movi	r4,56
   53fc8:	2080b00e 	bge	r4,r2,5428c <__subdf3+0x514>
   53fcc:	198cb03a 	or	r6,r3,r6
   53fd0:	300ec03a 	cmpne	r7,r6,zero
   53fd4:	0005883a 	mov	r2,zero
   53fd8:	3c4f883a 	add	r7,r7,r17
   53fdc:	3c63803a 	cmpltu	r17,r7,r17
   53fe0:	114b883a 	add	r5,r2,r5
   53fe4:	2c4b883a 	add	r5,r5,r17
   53fe8:	3823883a 	mov	r17,r7
   53fec:	2880202c 	andhi	r2,r5,128
   53ff0:	10002e26 	beq	r2,zero,540ac <__subdf3+0x334>
   53ff4:	84000044 	addi	r16,r16,1
   53ff8:	0081ffc4 	movi	r2,2047
   53ffc:	8080de26 	beq	r16,r2,54378 <__subdf3+0x600>
   54000:	00bfe034 	movhi	r2,65408
   54004:	10bfffc4 	addi	r2,r2,-1
   54008:	288a703a 	and	r5,r5,r2
   5400c:	880cd07a 	srli	r6,r17,1
   54010:	280897fa 	slli	r4,r5,31
   54014:	88c0004c 	andi	r3,r17,1
   54018:	30e2b03a 	or	r17,r6,r3
   5401c:	280ad07a 	srli	r5,r5,1
   54020:	8922b03a 	or	r17,r17,r4
   54024:	003f7706 	br	53e04 <__alt_data_end+0xfffecd04>
   54028:	1984b03a 	or	r2,r3,r6
   5402c:	103f6e26 	beq	r2,zero,53de8 <__alt_data_end+0xfffecce8>
   54030:	39c03fcc 	andi	r7,r7,255
   54034:	003f6d06 	br	53dec <__alt_data_end+0xfffeccec>
   54038:	1146b03a 	or	r3,r2,r5
   5403c:	18003f26 	beq	r3,zero,5413c <__subdf3+0x3c4>
   54040:	00c00434 	movhi	r3,16
   54044:	29000234 	orhi	r4,r5,8
   54048:	18ffffc4 	addi	r3,r3,-1
   5404c:	20c8703a 	and	r4,r4,r3
   54050:	003f8406 	br	53e64 <__alt_data_end+0xfffecd64>
   54054:	10bfffc4 	addi	r2,r2,-1
   54058:	1000501e 	bne	r2,zero,5419c <__subdf3+0x424>
   5405c:	898fc83a 	sub	r7,r17,r6
   54060:	89e3803a 	cmpltu	r17,r17,r7
   54064:	28cbc83a 	sub	r5,r5,r3
   54068:	2c4bc83a 	sub	r5,r5,r17
   5406c:	3823883a 	mov	r17,r7
   54070:	003fa106 	br	53ef8 <__alt_data_end+0xfffecdf8>
   54074:	1988b03a 	or	r4,r3,r6
   54078:	203f6226 	beq	r4,zero,53e04 <__alt_data_end+0xfffecd04>
   5407c:	10bfffc4 	addi	r2,r2,-1
   54080:	10009b1e 	bne	r2,zero,542f0 <__subdf3+0x578>
   54084:	344d883a 	add	r6,r6,r17
   54088:	3463803a 	cmpltu	r17,r6,r17
   5408c:	194b883a 	add	r5,r3,r5
   54090:	2c4b883a 	add	r5,r5,r17
   54094:	3023883a 	mov	r17,r6
   54098:	003fd406 	br	53fec <__alt_data_end+0xfffeceec>
   5409c:	1106b03a 	or	r3,r2,r4
   540a0:	1800b426 	beq	r3,zero,54374 <__subdf3+0x5fc>
   540a4:	100b883a 	mov	r5,r2
   540a8:	2023883a 	mov	r17,r4
   540ac:	888001cc 	andi	r2,r17,7
   540b0:	103f561e 	bne	r2,zero,53e0c <__alt_data_end+0xfffecd0c>
   540b4:	9200004c 	andi	r8,r18,1
   540b8:	003fb206 	br	53f84 <__alt_data_end+0xfffece84>
   540bc:	1000531e 	bne	r2,zero,5420c <__subdf3+0x494>
   540c0:	80800044 	addi	r2,r16,1
   540c4:	1081ffcc 	andi	r2,r2,2047
   540c8:	01000044 	movi	r4,1
   540cc:	2080a00e 	bge	r4,r2,54350 <__subdf3+0x5d8>
   540d0:	8985c83a 	sub	r2,r17,r6
   540d4:	8889803a 	cmpltu	r4,r17,r2
   540d8:	28e7c83a 	sub	r19,r5,r3
   540dc:	9927c83a 	sub	r19,r19,r4
   540e0:	9900202c 	andhi	r4,r19,128
   540e4:	20006226 	beq	r4,zero,54270 <__subdf3+0x4f8>
   540e8:	3463c83a 	sub	r17,r6,r17
   540ec:	194bc83a 	sub	r5,r3,r5
   540f0:	344d803a 	cmpltu	r6,r6,r17
   540f4:	29a7c83a 	sub	r19,r5,r6
   540f8:	3825883a 	mov	r18,r7
   540fc:	983f841e 	bne	r19,zero,53f10 <__alt_data_end+0xfffece10>
   54100:	8809883a 	mov	r4,r17
   54104:	0047d380 	call	47d38 <__clzsi2>
   54108:	10800804 	addi	r2,r2,32
   5410c:	10fffe04 	addi	r3,r2,-8
   54110:	010007c4 	movi	r4,31
   54114:	20ff830e 	bge	r4,r3,53f24 <__alt_data_end+0xfffece24>
   54118:	14fff604 	addi	r19,r2,-40
   5411c:	8ce6983a 	sll	r19,r17,r19
   54120:	0023883a 	mov	r17,zero
   54124:	1c3f860e 	bge	r3,r16,53f40 <__alt_data_end+0xfffece40>
   54128:	017fe034 	movhi	r5,65408
   5412c:	297fffc4 	addi	r5,r5,-1
   54130:	80e1c83a 	sub	r16,r16,r3
   54134:	994a703a 	and	r5,r19,r5
   54138:	003f3206 	br	53e04 <__alt_data_end+0xfffecd04>
   5413c:	0009883a 	mov	r4,zero
   54140:	0005883a 	mov	r2,zero
   54144:	003f4706 	br	53e64 <__alt_data_end+0xfffecd64>
   54148:	198cb03a 	or	r6,r3,r6
   5414c:	300cc03a 	cmpne	r6,r6,zero
   54150:	0005883a 	mov	r2,zero
   54154:	003f6306 	br	53ee4 <__alt_data_end+0xfffecde4>
   54158:	10009d1e 	bne	r2,zero,543d0 <__subdf3+0x658>
   5415c:	81c00044 	addi	r7,r16,1
   54160:	3881ffcc 	andi	r2,r7,2047
   54164:	02400044 	movi	r9,1
   54168:	4880680e 	bge	r9,r2,5430c <__subdf3+0x594>
   5416c:	0081ffc4 	movi	r2,2047
   54170:	3880ae26 	beq	r7,r2,5442c <__subdf3+0x6b4>
   54174:	344d883a 	add	r6,r6,r17
   54178:	3463803a 	cmpltu	r17,r6,r17
   5417c:	194b883a 	add	r5,r3,r5
   54180:	2c4b883a 	add	r5,r5,r17
   54184:	282297fa 	slli	r17,r5,31
   54188:	300cd07a 	srli	r6,r6,1
   5418c:	280ad07a 	srli	r5,r5,1
   54190:	3821883a 	mov	r16,r7
   54194:	89a2b03a 	or	r17,r17,r6
   54198:	003f1a06 	br	53e04 <__alt_data_end+0xfffecd04>
   5419c:	0101ffc4 	movi	r4,2047
   541a0:	813f431e 	bne	r16,r4,53eb0 <__alt_data_end+0xfffecdb0>
   541a4:	003f1706 	br	53e04 <__alt_data_end+0xfffecd04>
   541a8:	80bff844 	addi	r2,r16,-31
   541ac:	00c00804 	movi	r3,32
   541b0:	9884d83a 	srl	r2,r19,r2
   541b4:	28c05126 	beq	r5,r3,542fc <__subdf3+0x584>
   541b8:	00c00fc4 	movi	r3,63
   541bc:	1c21c83a 	sub	r16,r3,r16
   541c0:	9c26983a 	sll	r19,r19,r16
   541c4:	9c62b03a 	or	r17,r19,r17
   541c8:	8822c03a 	cmpne	r17,r17,zero
   541cc:	88a2b03a 	or	r17,r17,r2
   541d0:	000b883a 	mov	r5,zero
   541d4:	0021883a 	mov	r16,zero
   541d8:	003fb406 	br	540ac <__alt_data_end+0xfffecfac>
   541dc:	113ff804 	addi	r4,r2,-32
   541e0:	01c00804 	movi	r7,32
   541e4:	1908d83a 	srl	r4,r3,r4
   541e8:	11c04626 	beq	r2,r7,54304 <__subdf3+0x58c>
   541ec:	01c01004 	movi	r7,64
   541f0:	3885c83a 	sub	r2,r7,r2
   541f4:	1884983a 	sll	r2,r3,r2
   541f8:	118cb03a 	or	r6,r2,r6
   541fc:	300cc03a 	cmpne	r6,r6,zero
   54200:	310cb03a 	or	r6,r6,r4
   54204:	0005883a 	mov	r2,zero
   54208:	003f3606 	br	53ee4 <__alt_data_end+0xfffecde4>
   5420c:	80002b26 	beq	r16,zero,542bc <__subdf3+0x544>
   54210:	0101ffc4 	movi	r4,2047
   54214:	51006926 	beq	r10,r4,543bc <__subdf3+0x644>
   54218:	0085c83a 	sub	r2,zero,r2
   5421c:	29402034 	orhi	r5,r5,128
   54220:	01000e04 	movi	r4,56
   54224:	20807d16 	blt	r4,r2,5441c <__subdf3+0x6a4>
   54228:	010007c4 	movi	r4,31
   5422c:	2080d916 	blt	r4,r2,54594 <__subdf3+0x81c>
   54230:	01000804 	movi	r4,32
   54234:	2089c83a 	sub	r4,r4,r2
   54238:	2912983a 	sll	r9,r5,r4
   5423c:	8890d83a 	srl	r8,r17,r2
   54240:	8908983a 	sll	r4,r17,r4
   54244:	2884d83a 	srl	r2,r5,r2
   54248:	4a22b03a 	or	r17,r9,r8
   5424c:	2008c03a 	cmpne	r4,r4,zero
   54250:	8922b03a 	or	r17,r17,r4
   54254:	3463c83a 	sub	r17,r6,r17
   54258:	1885c83a 	sub	r2,r3,r2
   5425c:	344d803a 	cmpltu	r6,r6,r17
   54260:	118bc83a 	sub	r5,r2,r6
   54264:	5021883a 	mov	r16,r10
   54268:	3825883a 	mov	r18,r7
   5426c:	003f2206 	br	53ef8 <__alt_data_end+0xfffecdf8>
   54270:	9886b03a 	or	r3,r19,r2
   54274:	18001c1e 	bne	r3,zero,542e8 <__subdf3+0x570>
   54278:	0011883a 	mov	r8,zero
   5427c:	000b883a 	mov	r5,zero
   54280:	0023883a 	mov	r17,zero
   54284:	0021883a 	mov	r16,zero
   54288:	003f3e06 	br	53f84 <__alt_data_end+0xfffece84>
   5428c:	010007c4 	movi	r4,31
   54290:	20803c16 	blt	r4,r2,54384 <__subdf3+0x60c>
   54294:	01000804 	movi	r4,32
   54298:	2089c83a 	sub	r4,r4,r2
   5429c:	1912983a 	sll	r9,r3,r4
   542a0:	308ed83a 	srl	r7,r6,r2
   542a4:	3108983a 	sll	r4,r6,r4
   542a8:	1884d83a 	srl	r2,r3,r2
   542ac:	49ceb03a 	or	r7,r9,r7
   542b0:	2008c03a 	cmpne	r4,r4,zero
   542b4:	390eb03a 	or	r7,r7,r4
   542b8:	003f4706 	br	53fd8 <__alt_data_end+0xfffeced8>
   542bc:	2c48b03a 	or	r4,r5,r17
   542c0:	20003e26 	beq	r4,zero,543bc <__subdf3+0x644>
   542c4:	0084303a 	nor	r2,zero,r2
   542c8:	10003a1e 	bne	r2,zero,543b4 <__subdf3+0x63c>
   542cc:	3463c83a 	sub	r17,r6,r17
   542d0:	194bc83a 	sub	r5,r3,r5
   542d4:	344d803a 	cmpltu	r6,r6,r17
   542d8:	298bc83a 	sub	r5,r5,r6
   542dc:	5021883a 	mov	r16,r10
   542e0:	3825883a 	mov	r18,r7
   542e4:	003f0406 	br	53ef8 <__alt_data_end+0xfffecdf8>
   542e8:	1023883a 	mov	r17,r2
   542ec:	003f0706 	br	53f0c <__alt_data_end+0xfffece0c>
   542f0:	0101ffc4 	movi	r4,2047
   542f4:	813f331e 	bne	r16,r4,53fc4 <__alt_data_end+0xfffecec4>
   542f8:	003ec206 	br	53e04 <__alt_data_end+0xfffecd04>
   542fc:	0027883a 	mov	r19,zero
   54300:	003fb006 	br	541c4 <__alt_data_end+0xfffed0c4>
   54304:	0005883a 	mov	r2,zero
   54308:	003fbb06 	br	541f8 <__alt_data_end+0xfffed0f8>
   5430c:	2c44b03a 	or	r2,r5,r17
   54310:	80008b1e 	bne	r16,zero,54540 <__subdf3+0x7c8>
   54314:	1000b526 	beq	r2,zero,545ec <__subdf3+0x874>
   54318:	1984b03a 	or	r2,r3,r6
   5431c:	103eb926 	beq	r2,zero,53e04 <__alt_data_end+0xfffecd04>
   54320:	3449883a 	add	r4,r6,r17
   54324:	2463803a 	cmpltu	r17,r4,r17
   54328:	194b883a 	add	r5,r3,r5
   5432c:	2c4b883a 	add	r5,r5,r17
   54330:	2880202c 	andhi	r2,r5,128
   54334:	2023883a 	mov	r17,r4
   54338:	103f5c26 	beq	r2,zero,540ac <__alt_data_end+0xfffecfac>
   5433c:	00bfe034 	movhi	r2,65408
   54340:	10bfffc4 	addi	r2,r2,-1
   54344:	4821883a 	mov	r16,r9
   54348:	288a703a 	and	r5,r5,r2
   5434c:	003ead06 	br	53e04 <__alt_data_end+0xfffecd04>
   54350:	2c44b03a 	or	r2,r5,r17
   54354:	8000291e 	bne	r16,zero,543fc <__subdf3+0x684>
   54358:	10004f1e 	bne	r2,zero,54498 <__subdf3+0x720>
   5435c:	1984b03a 	or	r2,r3,r6
   54360:	10000426 	beq	r2,zero,54374 <__subdf3+0x5fc>
   54364:	180b883a 	mov	r5,r3
   54368:	3023883a 	mov	r17,r6
   5436c:	3825883a 	mov	r18,r7
   54370:	003ea406 	br	53e04 <__alt_data_end+0xfffecd04>
   54374:	0011883a 	mov	r8,zero
   54378:	000b883a 	mov	r5,zero
   5437c:	0023883a 	mov	r17,zero
   54380:	003f0006 	br	53f84 <__alt_data_end+0xfffece84>
   54384:	11fff804 	addi	r7,r2,-32
   54388:	19c8d83a 	srl	r4,r3,r7
   5438c:	01c00804 	movi	r7,32
   54390:	11c07e26 	beq	r2,r7,5458c <__subdf3+0x814>
   54394:	01c01004 	movi	r7,64
   54398:	3885c83a 	sub	r2,r7,r2
   5439c:	1884983a 	sll	r2,r3,r2
   543a0:	118cb03a 	or	r6,r2,r6
   543a4:	300ec03a 	cmpne	r7,r6,zero
   543a8:	390eb03a 	or	r7,r7,r4
   543ac:	0005883a 	mov	r2,zero
   543b0:	003f0906 	br	53fd8 <__alt_data_end+0xfffeced8>
   543b4:	0101ffc4 	movi	r4,2047
   543b8:	513f991e 	bne	r10,r4,54220 <__alt_data_end+0xfffed120>
   543bc:	180b883a 	mov	r5,r3
   543c0:	3023883a 	mov	r17,r6
   543c4:	5021883a 	mov	r16,r10
   543c8:	3825883a 	mov	r18,r7
   543cc:	003e8d06 	br	53e04 <__alt_data_end+0xfffecd04>
   543d0:	80001a1e 	bne	r16,zero,5443c <__subdf3+0x6c4>
   543d4:	2c48b03a 	or	r4,r5,r17
   543d8:	20005526 	beq	r4,zero,54530 <__subdf3+0x7b8>
   543dc:	0084303a 	nor	r2,zero,r2
   543e0:	1000511e 	bne	r2,zero,54528 <__subdf3+0x7b0>
   543e4:	89a3883a 	add	r17,r17,r6
   543e8:	194b883a 	add	r5,r3,r5
   543ec:	898d803a 	cmpltu	r6,r17,r6
   543f0:	298b883a 	add	r5,r5,r6
   543f4:	5021883a 	mov	r16,r10
   543f8:	003efc06 	br	53fec <__alt_data_end+0xfffeceec>
   543fc:	1000341e 	bne	r2,zero,544d0 <__subdf3+0x758>
   54400:	1984b03a 	or	r2,r3,r6
   54404:	10006f26 	beq	r2,zero,545c4 <__subdf3+0x84c>
   54408:	180b883a 	mov	r5,r3
   5440c:	3023883a 	mov	r17,r6
   54410:	3825883a 	mov	r18,r7
   54414:	0401ffc4 	movi	r16,2047
   54418:	003e7a06 	br	53e04 <__alt_data_end+0xfffecd04>
   5441c:	2c62b03a 	or	r17,r5,r17
   54420:	8822c03a 	cmpne	r17,r17,zero
   54424:	0005883a 	mov	r2,zero
   54428:	003f8a06 	br	54254 <__alt_data_end+0xfffed154>
   5442c:	3821883a 	mov	r16,r7
   54430:	000b883a 	mov	r5,zero
   54434:	0023883a 	mov	r17,zero
   54438:	003ed206 	br	53f84 <__alt_data_end+0xfffece84>
   5443c:	0101ffc4 	movi	r4,2047
   54440:	51003b26 	beq	r10,r4,54530 <__subdf3+0x7b8>
   54444:	0085c83a 	sub	r2,zero,r2
   54448:	29402034 	orhi	r5,r5,128
   5444c:	01000e04 	movi	r4,56
   54450:	20806216 	blt	r4,r2,545dc <__subdf3+0x864>
   54454:	010007c4 	movi	r4,31
   54458:	20806b16 	blt	r4,r2,54608 <__subdf3+0x890>
   5445c:	01000804 	movi	r4,32
   54460:	2089c83a 	sub	r4,r4,r2
   54464:	2912983a 	sll	r9,r5,r4
   54468:	888ed83a 	srl	r7,r17,r2
   5446c:	8908983a 	sll	r4,r17,r4
   54470:	2884d83a 	srl	r2,r5,r2
   54474:	49e2b03a 	or	r17,r9,r7
   54478:	2008c03a 	cmpne	r4,r4,zero
   5447c:	8922b03a 	or	r17,r17,r4
   54480:	89a3883a 	add	r17,r17,r6
   54484:	10c5883a 	add	r2,r2,r3
   54488:	898d803a 	cmpltu	r6,r17,r6
   5448c:	118b883a 	add	r5,r2,r6
   54490:	5021883a 	mov	r16,r10
   54494:	003ed506 	br	53fec <__alt_data_end+0xfffeceec>
   54498:	1984b03a 	or	r2,r3,r6
   5449c:	103e5926 	beq	r2,zero,53e04 <__alt_data_end+0xfffecd04>
   544a0:	8989c83a 	sub	r4,r17,r6
   544a4:	8911803a 	cmpltu	r8,r17,r4
   544a8:	28c5c83a 	sub	r2,r5,r3
   544ac:	1205c83a 	sub	r2,r2,r8
   544b0:	1200202c 	andhi	r8,r2,128
   544b4:	403ef926 	beq	r8,zero,5409c <__alt_data_end+0xfffecf9c>
   544b8:	3463c83a 	sub	r17,r6,r17
   544bc:	194bc83a 	sub	r5,r3,r5
   544c0:	344d803a 	cmpltu	r6,r6,r17
   544c4:	298bc83a 	sub	r5,r5,r6
   544c8:	3825883a 	mov	r18,r7
   544cc:	003e4d06 	br	53e04 <__alt_data_end+0xfffecd04>
   544d0:	1984b03a 	or	r2,r3,r6
   544d4:	10002b26 	beq	r2,zero,54584 <__subdf3+0x80c>
   544d8:	2808d0fa 	srli	r4,r5,3
   544dc:	8822d0fa 	srli	r17,r17,3
   544e0:	280a977a 	slli	r5,r5,29
   544e4:	2080022c 	andhi	r2,r4,8
   544e8:	2c62b03a 	or	r17,r5,r17
   544ec:	10000826 	beq	r2,zero,54510 <__subdf3+0x798>
   544f0:	1810d0fa 	srli	r8,r3,3
   544f4:	4080022c 	andhi	r2,r8,8
   544f8:	1000051e 	bne	r2,zero,54510 <__subdf3+0x798>
   544fc:	300cd0fa 	srli	r6,r6,3
   54500:	1804977a 	slli	r2,r3,29
   54504:	4009883a 	mov	r4,r8
   54508:	3825883a 	mov	r18,r7
   5450c:	11a2b03a 	or	r17,r2,r6
   54510:	880ad77a 	srli	r5,r17,29
   54514:	200890fa 	slli	r4,r4,3
   54518:	882290fa 	slli	r17,r17,3
   5451c:	0401ffc4 	movi	r16,2047
   54520:	290ab03a 	or	r5,r5,r4
   54524:	003e3706 	br	53e04 <__alt_data_end+0xfffecd04>
   54528:	0101ffc4 	movi	r4,2047
   5452c:	513fc71e 	bne	r10,r4,5444c <__alt_data_end+0xfffed34c>
   54530:	180b883a 	mov	r5,r3
   54534:	3023883a 	mov	r17,r6
   54538:	5021883a 	mov	r16,r10
   5453c:	003e3106 	br	53e04 <__alt_data_end+0xfffecd04>
   54540:	10002d26 	beq	r2,zero,545f8 <__subdf3+0x880>
   54544:	1984b03a 	or	r2,r3,r6
   54548:	10000e26 	beq	r2,zero,54584 <__subdf3+0x80c>
   5454c:	2808d0fa 	srli	r4,r5,3
   54550:	8822d0fa 	srli	r17,r17,3
   54554:	280a977a 	slli	r5,r5,29
   54558:	2080022c 	andhi	r2,r4,8
   5455c:	2c62b03a 	or	r17,r5,r17
   54560:	103feb26 	beq	r2,zero,54510 <__alt_data_end+0xfffed410>
   54564:	180ed0fa 	srli	r7,r3,3
   54568:	3880022c 	andhi	r2,r7,8
   5456c:	103fe81e 	bne	r2,zero,54510 <__alt_data_end+0xfffed410>
   54570:	300cd0fa 	srli	r6,r6,3
   54574:	1804977a 	slli	r2,r3,29
   54578:	3809883a 	mov	r4,r7
   5457c:	11a2b03a 	or	r17,r2,r6
   54580:	003fe306 	br	54510 <__alt_data_end+0xfffed410>
   54584:	0401ffc4 	movi	r16,2047
   54588:	003e1e06 	br	53e04 <__alt_data_end+0xfffecd04>
   5458c:	0005883a 	mov	r2,zero
   54590:	003f8306 	br	543a0 <__alt_data_end+0xfffed2a0>
   54594:	113ff804 	addi	r4,r2,-32
   54598:	02000804 	movi	r8,32
   5459c:	2908d83a 	srl	r4,r5,r4
   545a0:	12002526 	beq	r2,r8,54638 <__subdf3+0x8c0>
   545a4:	02001004 	movi	r8,64
   545a8:	4085c83a 	sub	r2,r8,r2
   545ac:	288a983a 	sll	r5,r5,r2
   545b0:	2c62b03a 	or	r17,r5,r17
   545b4:	8822c03a 	cmpne	r17,r17,zero
   545b8:	8922b03a 	or	r17,r17,r4
   545bc:	0005883a 	mov	r2,zero
   545c0:	003f2406 	br	54254 <__alt_data_end+0xfffed154>
   545c4:	01402034 	movhi	r5,128
   545c8:	0011883a 	mov	r8,zero
   545cc:	297fffc4 	addi	r5,r5,-1
   545d0:	047ffe04 	movi	r17,-8
   545d4:	0401ffc4 	movi	r16,2047
   545d8:	003e6a06 	br	53f84 <__alt_data_end+0xfffece84>
   545dc:	2c62b03a 	or	r17,r5,r17
   545e0:	8822c03a 	cmpne	r17,r17,zero
   545e4:	0005883a 	mov	r2,zero
   545e8:	003fa506 	br	54480 <__alt_data_end+0xfffed380>
   545ec:	180b883a 	mov	r5,r3
   545f0:	3023883a 	mov	r17,r6
   545f4:	003e0306 	br	53e04 <__alt_data_end+0xfffecd04>
   545f8:	180b883a 	mov	r5,r3
   545fc:	3023883a 	mov	r17,r6
   54600:	0401ffc4 	movi	r16,2047
   54604:	003dff06 	br	53e04 <__alt_data_end+0xfffecd04>
   54608:	113ff804 	addi	r4,r2,-32
   5460c:	01c00804 	movi	r7,32
   54610:	2908d83a 	srl	r4,r5,r4
   54614:	11c00a26 	beq	r2,r7,54640 <__subdf3+0x8c8>
   54618:	01c01004 	movi	r7,64
   5461c:	3885c83a 	sub	r2,r7,r2
   54620:	288a983a 	sll	r5,r5,r2
   54624:	2c62b03a 	or	r17,r5,r17
   54628:	8822c03a 	cmpne	r17,r17,zero
   5462c:	8922b03a 	or	r17,r17,r4
   54630:	0005883a 	mov	r2,zero
   54634:	003f9206 	br	54480 <__alt_data_end+0xfffed380>
   54638:	000b883a 	mov	r5,zero
   5463c:	003fdc06 	br	545b0 <__alt_data_end+0xfffed4b0>
   54640:	000b883a 	mov	r5,zero
   54644:	003ff706 	br	54624 <__alt_data_end+0xfffed524>

00054648 <__fixdfsi>:
   54648:	2806d53a 	srli	r3,r5,20
   5464c:	00800434 	movhi	r2,16
   54650:	10bfffc4 	addi	r2,r2,-1
   54654:	18c1ffcc 	andi	r3,r3,2047
   54658:	0180ff84 	movi	r6,1022
   5465c:	2884703a 	and	r2,r5,r2
   54660:	280ad7fa 	srli	r5,r5,31
   54664:	30c0130e 	bge	r6,r3,546b4 <__fixdfsi+0x6c>
   54668:	01810744 	movi	r6,1053
   5466c:	30c00d16 	blt	r6,r3,546a4 <__fixdfsi+0x5c>
   54670:	01810cc4 	movi	r6,1075
   54674:	30cdc83a 	sub	r6,r6,r3
   54678:	01c007c4 	movi	r7,31
   5467c:	10800434 	orhi	r2,r2,16
   54680:	39800e0e 	bge	r7,r6,546bc <__fixdfsi+0x74>
   54684:	010104c4 	movi	r4,1043
   54688:	20c7c83a 	sub	r3,r4,r3
   5468c:	10c6d83a 	srl	r3,r2,r3
   54690:	29403fcc 	andi	r5,r5,255
   54694:	0145c83a 	sub	r2,zero,r5
   54698:	1884f03a 	xor	r2,r3,r2
   5469c:	1145883a 	add	r2,r2,r5
   546a0:	f800283a 	ret
   546a4:	00a00034 	movhi	r2,32768
   546a8:	10bfffc4 	addi	r2,r2,-1
   546ac:	2885883a 	add	r2,r5,r2
   546b0:	f800283a 	ret
   546b4:	0005883a 	mov	r2,zero
   546b8:	f800283a 	ret
   546bc:	18fefb44 	addi	r3,r3,-1043
   546c0:	2188d83a 	srl	r4,r4,r6
   546c4:	10c6983a 	sll	r3,r2,r3
   546c8:	20c6b03a 	or	r3,r4,r3
   546cc:	003ff006 	br	54690 <__alt_data_end+0xfffed590>

000546d0 <__floatsidf>:
   546d0:	defffd04 	addi	sp,sp,-12
   546d4:	dc400115 	stw	r17,4(sp)
   546d8:	dfc00215 	stw	ra,8(sp)
   546dc:	dc000015 	stw	r16,0(sp)
   546e0:	2023883a 	mov	r17,r4
   546e4:	20001426 	beq	r4,zero,54738 <__floatsidf+0x68>
   546e8:	2020d7fa 	srli	r16,r4,31
   546ec:	80000126 	beq	r16,zero,546f4 <__floatsidf+0x24>
   546f0:	0123c83a 	sub	r17,zero,r4
   546f4:	8809883a 	mov	r4,r17
   546f8:	0047d380 	call	47d38 <__clzsi2>
   546fc:	01410784 	movi	r5,1054
   54700:	00c00284 	movi	r3,10
   54704:	288bc83a 	sub	r5,r5,r2
   54708:	18801c16 	blt	r3,r2,5477c <__floatsidf+0xac>
   5470c:	00c002c4 	movi	r3,11
   54710:	1887c83a 	sub	r3,r3,r2
   54714:	88c8d83a 	srl	r4,r17,r3
   54718:	00c00434 	movhi	r3,16
   5471c:	18ffffc4 	addi	r3,r3,-1
   54720:	10800544 	addi	r2,r2,21
   54724:	20c8703a 	and	r4,r4,r3
   54728:	8884983a 	sll	r2,r17,r2
   5472c:	28c1ffcc 	andi	r3,r5,2047
   54730:	800d883a 	mov	r6,r16
   54734:	00000406 	br	54748 <__floatsidf+0x78>
   54738:	000d883a 	mov	r6,zero
   5473c:	0007883a 	mov	r3,zero
   54740:	0009883a 	mov	r4,zero
   54744:	0005883a 	mov	r2,zero
   54748:	180a953a 	slli	r5,r3,20
   5474c:	31803fcc 	andi	r6,r6,255
   54750:	00c00434 	movhi	r3,16
   54754:	300c97fa 	slli	r6,r6,31
   54758:	18ffffc4 	addi	r3,r3,-1
   5475c:	20c6703a 	and	r3,r4,r3
   54760:	1946b03a 	or	r3,r3,r5
   54764:	1986b03a 	or	r3,r3,r6
   54768:	dfc00217 	ldw	ra,8(sp)
   5476c:	dc400117 	ldw	r17,4(sp)
   54770:	dc000017 	ldw	r16,0(sp)
   54774:	dec00304 	addi	sp,sp,12
   54778:	f800283a 	ret
   5477c:	10fffd44 	addi	r3,r2,-11
   54780:	88c8983a 	sll	r4,r17,r3
   54784:	00800434 	movhi	r2,16
   54788:	10bfffc4 	addi	r2,r2,-1
   5478c:	2088703a 	and	r4,r4,r2
   54790:	28c1ffcc 	andi	r3,r5,2047
   54794:	800d883a 	mov	r6,r16
   54798:	0005883a 	mov	r2,zero
   5479c:	003fea06 	br	54748 <__alt_data_end+0xfffed648>

000547a0 <__floatunsidf>:
   547a0:	defffe04 	addi	sp,sp,-8
   547a4:	dc000015 	stw	r16,0(sp)
   547a8:	dfc00115 	stw	ra,4(sp)
   547ac:	2021883a 	mov	r16,r4
   547b0:	20001026 	beq	r4,zero,547f4 <__floatunsidf+0x54>
   547b4:	0047d380 	call	47d38 <__clzsi2>
   547b8:	01410784 	movi	r5,1054
   547bc:	100d883a 	mov	r6,r2
   547c0:	288bc83a 	sub	r5,r5,r2
   547c4:	00800284 	movi	r2,10
   547c8:	11801616 	blt	r2,r6,54824 <__floatunsidf+0x84>
   547cc:	008002c4 	movi	r2,11
   547d0:	1185c83a 	sub	r2,r2,r6
   547d4:	8084d83a 	srl	r2,r16,r2
   547d8:	00c00434 	movhi	r3,16
   547dc:	31c00544 	addi	r7,r6,21
   547e0:	18ffffc4 	addi	r3,r3,-1
   547e4:	81e0983a 	sll	r16,r16,r7
   547e8:	10cc703a 	and	r6,r2,r3
   547ec:	2941ffcc 	andi	r5,r5,2047
   547f0:	00000206 	br	547fc <__floatunsidf+0x5c>
   547f4:	000b883a 	mov	r5,zero
   547f8:	000d883a 	mov	r6,zero
   547fc:	280a953a 	slli	r5,r5,20
   54800:	00c00434 	movhi	r3,16
   54804:	18ffffc4 	addi	r3,r3,-1
   54808:	30c6703a 	and	r3,r6,r3
   5480c:	8005883a 	mov	r2,r16
   54810:	1946b03a 	or	r3,r3,r5
   54814:	dfc00117 	ldw	ra,4(sp)
   54818:	dc000017 	ldw	r16,0(sp)
   5481c:	dec00204 	addi	sp,sp,8
   54820:	f800283a 	ret
   54824:	31bffd44 	addi	r6,r6,-11
   54828:	818c983a 	sll	r6,r16,r6
   5482c:	00800434 	movhi	r2,16
   54830:	10bfffc4 	addi	r2,r2,-1
   54834:	2941ffcc 	andi	r5,r5,2047
   54838:	0021883a 	mov	r16,zero
   5483c:	308c703a 	and	r6,r6,r2
   54840:	003fee06 	br	547fc <__alt_data_end+0xfffed6fc>

00054844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54844:	defffe04 	addi	sp,sp,-8
   54848:	dfc00115 	stw	ra,4(sp)
   5484c:	df000015 	stw	fp,0(sp)
   54850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54854:	008001b4 	movhi	r2,6
   54858:	10b33b04 	addi	r2,r2,-13076
   5485c:	10800017 	ldw	r2,0(r2)
   54860:	10000526 	beq	r2,zero,54878 <alt_get_errno+0x34>
   54864:	008001b4 	movhi	r2,6
   54868:	10b33b04 	addi	r2,r2,-13076
   5486c:	10800017 	ldw	r2,0(r2)
   54870:	103ee83a 	callr	r2
   54874:	00000206 	br	54880 <alt_get_errno+0x3c>
   54878:	008001b4 	movhi	r2,6
   5487c:	10ba1e04 	addi	r2,r2,-6024
}
   54880:	e037883a 	mov	sp,fp
   54884:	dfc00117 	ldw	ra,4(sp)
   54888:	df000017 	ldw	fp,0(sp)
   5488c:	dec00204 	addi	sp,sp,8
   54890:	f800283a 	ret

00054894 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   54894:	defffb04 	addi	sp,sp,-20
   54898:	dfc00415 	stw	ra,16(sp)
   5489c:	df000315 	stw	fp,12(sp)
   548a0:	df000304 	addi	fp,sp,12
   548a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   548a8:	e0bfff17 	ldw	r2,-4(fp)
   548ac:	10000616 	blt	r2,zero,548c8 <close+0x34>
   548b0:	e0bfff17 	ldw	r2,-4(fp)
   548b4:	10c00324 	muli	r3,r2,12
   548b8:	008001b4 	movhi	r2,6
   548bc:	10aeb504 	addi	r2,r2,-17708
   548c0:	1885883a 	add	r2,r3,r2
   548c4:	00000106 	br	548cc <close+0x38>
   548c8:	0005883a 	mov	r2,zero
   548cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   548d0:	e0bffd17 	ldw	r2,-12(fp)
   548d4:	10001926 	beq	r2,zero,5493c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   548d8:	e0bffd17 	ldw	r2,-12(fp)
   548dc:	10800017 	ldw	r2,0(r2)
   548e0:	10800417 	ldw	r2,16(r2)
   548e4:	10000626 	beq	r2,zero,54900 <close+0x6c>
   548e8:	e0bffd17 	ldw	r2,-12(fp)
   548ec:	10800017 	ldw	r2,0(r2)
   548f0:	10800417 	ldw	r2,16(r2)
   548f4:	e13ffd17 	ldw	r4,-12(fp)
   548f8:	103ee83a 	callr	r2
   548fc:	00000106 	br	54904 <close+0x70>
   54900:	0005883a 	mov	r2,zero
   54904:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   54908:	e13fff17 	ldw	r4,-4(fp)
   5490c:	00552600 	call	55260 <alt_release_fd>
    if (rval < 0)
   54910:	e0bffe17 	ldw	r2,-8(fp)
   54914:	1000070e 	bge	r2,zero,54934 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   54918:	00548440 	call	54844 <alt_get_errno>
   5491c:	1007883a 	mov	r3,r2
   54920:	e0bffe17 	ldw	r2,-8(fp)
   54924:	0085c83a 	sub	r2,zero,r2
   54928:	18800015 	stw	r2,0(r3)
      return -1;
   5492c:	00bfffc4 	movi	r2,-1
   54930:	00000706 	br	54950 <close+0xbc>
    }
    return 0;
   54934:	0005883a 	mov	r2,zero
   54938:	00000506 	br	54950 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   5493c:	00548440 	call	54844 <alt_get_errno>
   54940:	1007883a 	mov	r3,r2
   54944:	00801444 	movi	r2,81
   54948:	18800015 	stw	r2,0(r3)
    return -1;
   5494c:	00bfffc4 	movi	r2,-1
  }
}
   54950:	e037883a 	mov	sp,fp
   54954:	dfc00117 	ldw	ra,4(sp)
   54958:	df000017 	ldw	fp,0(sp)
   5495c:	dec00204 	addi	sp,sp,8
   54960:	f800283a 	ret

00054964 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   54964:	defffc04 	addi	sp,sp,-16
   54968:	df000315 	stw	fp,12(sp)
   5496c:	df000304 	addi	fp,sp,12
   54970:	e13ffd15 	stw	r4,-12(fp)
   54974:	e17ffe15 	stw	r5,-8(fp)
   54978:	e1bfff15 	stw	r6,-4(fp)
  return len;
   5497c:	e0bfff17 	ldw	r2,-4(fp)
}
   54980:	e037883a 	mov	sp,fp
   54984:	df000017 	ldw	fp,0(sp)
   54988:	dec00104 	addi	sp,sp,4
   5498c:	f800283a 	ret

00054990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54990:	defffe04 	addi	sp,sp,-8
   54994:	dfc00115 	stw	ra,4(sp)
   54998:	df000015 	stw	fp,0(sp)
   5499c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   549a0:	008001b4 	movhi	r2,6
   549a4:	10b33b04 	addi	r2,r2,-13076
   549a8:	10800017 	ldw	r2,0(r2)
   549ac:	10000526 	beq	r2,zero,549c4 <alt_get_errno+0x34>
   549b0:	008001b4 	movhi	r2,6
   549b4:	10b33b04 	addi	r2,r2,-13076
   549b8:	10800017 	ldw	r2,0(r2)
   549bc:	103ee83a 	callr	r2
   549c0:	00000206 	br	549cc <alt_get_errno+0x3c>
   549c4:	008001b4 	movhi	r2,6
   549c8:	10ba1e04 	addi	r2,r2,-6024
}
   549cc:	e037883a 	mov	sp,fp
   549d0:	dfc00117 	ldw	ra,4(sp)
   549d4:	df000017 	ldw	fp,0(sp)
   549d8:	dec00204 	addi	sp,sp,8
   549dc:	f800283a 	ret

000549e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   549e0:	defffb04 	addi	sp,sp,-20
   549e4:	dfc00415 	stw	ra,16(sp)
   549e8:	df000315 	stw	fp,12(sp)
   549ec:	df000304 	addi	fp,sp,12
   549f0:	e13ffe15 	stw	r4,-8(fp)
   549f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   549f8:	e0bffe17 	ldw	r2,-8(fp)
   549fc:	10000616 	blt	r2,zero,54a18 <fstat+0x38>
   54a00:	e0bffe17 	ldw	r2,-8(fp)
   54a04:	10c00324 	muli	r3,r2,12
   54a08:	008001b4 	movhi	r2,6
   54a0c:	10aeb504 	addi	r2,r2,-17708
   54a10:	1885883a 	add	r2,r3,r2
   54a14:	00000106 	br	54a1c <fstat+0x3c>
   54a18:	0005883a 	mov	r2,zero
   54a1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   54a20:	e0bffd17 	ldw	r2,-12(fp)
   54a24:	10001026 	beq	r2,zero,54a68 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   54a28:	e0bffd17 	ldw	r2,-12(fp)
   54a2c:	10800017 	ldw	r2,0(r2)
   54a30:	10800817 	ldw	r2,32(r2)
   54a34:	10000726 	beq	r2,zero,54a54 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   54a38:	e0bffd17 	ldw	r2,-12(fp)
   54a3c:	10800017 	ldw	r2,0(r2)
   54a40:	10800817 	ldw	r2,32(r2)
   54a44:	e13ffd17 	ldw	r4,-12(fp)
   54a48:	e17fff17 	ldw	r5,-4(fp)
   54a4c:	103ee83a 	callr	r2
   54a50:	00000a06 	br	54a7c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   54a54:	e0bfff17 	ldw	r2,-4(fp)
   54a58:	00c80004 	movi	r3,8192
   54a5c:	10c00115 	stw	r3,4(r2)
      return 0;
   54a60:	0005883a 	mov	r2,zero
   54a64:	00000506 	br	54a7c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   54a68:	00549900 	call	54990 <alt_get_errno>
   54a6c:	1007883a 	mov	r3,r2
   54a70:	00801444 	movi	r2,81
   54a74:	18800015 	stw	r2,0(r3)
    return -1;
   54a78:	00bfffc4 	movi	r2,-1
  }
}
   54a7c:	e037883a 	mov	sp,fp
   54a80:	dfc00117 	ldw	ra,4(sp)
   54a84:	df000017 	ldw	fp,0(sp)
   54a88:	dec00204 	addi	sp,sp,8
   54a8c:	f800283a 	ret

00054a90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54a90:	defff904 	addi	sp,sp,-28
   54a94:	dfc00615 	stw	ra,24(sp)
   54a98:	df000515 	stw	fp,20(sp)
   54a9c:	df000504 	addi	fp,sp,20
   54aa0:	e13ffc15 	stw	r4,-16(fp)
   54aa4:	e17ffd15 	stw	r5,-12(fp)
   54aa8:	e1bffe15 	stw	r6,-8(fp)
   54aac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   54ab0:	e0800217 	ldw	r2,8(fp)
   54ab4:	d8800015 	stw	r2,0(sp)
   54ab8:	e13ffc17 	ldw	r4,-16(fp)
   54abc:	e17ffd17 	ldw	r5,-12(fp)
   54ac0:	e1bffe17 	ldw	r6,-8(fp)
   54ac4:	e1ffff17 	ldw	r7,-4(fp)
   54ac8:	0054c700 	call	54c70 <alt_iic_isr_register>
}  
   54acc:	e037883a 	mov	sp,fp
   54ad0:	dfc00117 	ldw	ra,4(sp)
   54ad4:	df000017 	ldw	fp,0(sp)
   54ad8:	dec00204 	addi	sp,sp,8
   54adc:	f800283a 	ret

00054ae0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   54ae0:	defff904 	addi	sp,sp,-28
   54ae4:	df000615 	stw	fp,24(sp)
   54ae8:	df000604 	addi	fp,sp,24
   54aec:	e13ffe15 	stw	r4,-8(fp)
   54af0:	e17fff15 	stw	r5,-4(fp)
   54af4:	e0bfff17 	ldw	r2,-4(fp)
   54af8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54afc:	0005303a 	rdctl	r2,status
   54b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54b04:	e0fffb17 	ldw	r3,-20(fp)
   54b08:	00bfff84 	movi	r2,-2
   54b0c:	1884703a 	and	r2,r3,r2
   54b10:	1001703a 	wrctl	status,r2
  
  return context;
   54b14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54b18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   54b1c:	e0bffa17 	ldw	r2,-24(fp)
   54b20:	00c00044 	movi	r3,1
   54b24:	1884983a 	sll	r2,r3,r2
   54b28:	1007883a 	mov	r3,r2
   54b2c:	008001b4 	movhi	r2,6
   54b30:	10ba2204 	addi	r2,r2,-6008
   54b34:	10800017 	ldw	r2,0(r2)
   54b38:	1886b03a 	or	r3,r3,r2
   54b3c:	008001b4 	movhi	r2,6
   54b40:	10ba2204 	addi	r2,r2,-6008
   54b44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54b48:	008001b4 	movhi	r2,6
   54b4c:	10ba2204 	addi	r2,r2,-6008
   54b50:	10800017 	ldw	r2,0(r2)
   54b54:	100170fa 	wrctl	ienable,r2
   54b58:	e0bffc17 	ldw	r2,-16(fp)
   54b5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54b60:	e0bffd17 	ldw	r2,-12(fp)
   54b64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54b68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   54b6c:	0001883a 	nop
}
   54b70:	e037883a 	mov	sp,fp
   54b74:	df000017 	ldw	fp,0(sp)
   54b78:	dec00104 	addi	sp,sp,4
   54b7c:	f800283a 	ret

00054b80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   54b80:	defff904 	addi	sp,sp,-28
   54b84:	df000615 	stw	fp,24(sp)
   54b88:	df000604 	addi	fp,sp,24
   54b8c:	e13ffe15 	stw	r4,-8(fp)
   54b90:	e17fff15 	stw	r5,-4(fp)
   54b94:	e0bfff17 	ldw	r2,-4(fp)
   54b98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54b9c:	0005303a 	rdctl	r2,status
   54ba0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54ba4:	e0fffb17 	ldw	r3,-20(fp)
   54ba8:	00bfff84 	movi	r2,-2
   54bac:	1884703a 	and	r2,r3,r2
   54bb0:	1001703a 	wrctl	status,r2
  
  return context;
   54bb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54bb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   54bbc:	e0bffa17 	ldw	r2,-24(fp)
   54bc0:	00c00044 	movi	r3,1
   54bc4:	1884983a 	sll	r2,r3,r2
   54bc8:	0084303a 	nor	r2,zero,r2
   54bcc:	1007883a 	mov	r3,r2
   54bd0:	008001b4 	movhi	r2,6
   54bd4:	10ba2204 	addi	r2,r2,-6008
   54bd8:	10800017 	ldw	r2,0(r2)
   54bdc:	1886703a 	and	r3,r3,r2
   54be0:	008001b4 	movhi	r2,6
   54be4:	10ba2204 	addi	r2,r2,-6008
   54be8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54bec:	008001b4 	movhi	r2,6
   54bf0:	10ba2204 	addi	r2,r2,-6008
   54bf4:	10800017 	ldw	r2,0(r2)
   54bf8:	100170fa 	wrctl	ienable,r2
   54bfc:	e0bffc17 	ldw	r2,-16(fp)
   54c00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54c04:	e0bffd17 	ldw	r2,-12(fp)
   54c08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54c0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   54c10:	0001883a 	nop
}
   54c14:	e037883a 	mov	sp,fp
   54c18:	df000017 	ldw	fp,0(sp)
   54c1c:	dec00104 	addi	sp,sp,4
   54c20:	f800283a 	ret

00054c24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   54c24:	defffc04 	addi	sp,sp,-16
   54c28:	df000315 	stw	fp,12(sp)
   54c2c:	df000304 	addi	fp,sp,12
   54c30:	e13ffe15 	stw	r4,-8(fp)
   54c34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   54c38:	000530fa 	rdctl	r2,ienable
   54c3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   54c40:	e0bfff17 	ldw	r2,-4(fp)
   54c44:	00c00044 	movi	r3,1
   54c48:	1884983a 	sll	r2,r3,r2
   54c4c:	1007883a 	mov	r3,r2
   54c50:	e0bffd17 	ldw	r2,-12(fp)
   54c54:	1884703a 	and	r2,r3,r2
   54c58:	1004c03a 	cmpne	r2,r2,zero
   54c5c:	10803fcc 	andi	r2,r2,255
}
   54c60:	e037883a 	mov	sp,fp
   54c64:	df000017 	ldw	fp,0(sp)
   54c68:	dec00104 	addi	sp,sp,4
   54c6c:	f800283a 	ret

00054c70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54c70:	defff504 	addi	sp,sp,-44
   54c74:	dfc00a15 	stw	ra,40(sp)
   54c78:	df000915 	stw	fp,36(sp)
   54c7c:	df000904 	addi	fp,sp,36
   54c80:	e13ffc15 	stw	r4,-16(fp)
   54c84:	e17ffd15 	stw	r5,-12(fp)
   54c88:	e1bffe15 	stw	r6,-8(fp)
   54c8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54c90:	00bffa84 	movi	r2,-22
   54c94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   54c98:	e0bffd17 	ldw	r2,-12(fp)
   54c9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54ca0:	e0bff817 	ldw	r2,-32(fp)
   54ca4:	10800808 	cmpgei	r2,r2,32
   54ca8:	1000271e 	bne	r2,zero,54d48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54cac:	0005303a 	rdctl	r2,status
   54cb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54cb4:	e0fffa17 	ldw	r3,-24(fp)
   54cb8:	00bfff84 	movi	r2,-2
   54cbc:	1884703a 	and	r2,r3,r2
   54cc0:	1001703a 	wrctl	status,r2
  
  return context;
   54cc4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   54cc8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   54ccc:	008001b4 	movhi	r2,6
   54cd0:	10ba7304 	addi	r2,r2,-5684
   54cd4:	e0fff817 	ldw	r3,-32(fp)
   54cd8:	180690fa 	slli	r3,r3,3
   54cdc:	10c5883a 	add	r2,r2,r3
   54ce0:	e0fffe17 	ldw	r3,-8(fp)
   54ce4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   54ce8:	008001b4 	movhi	r2,6
   54cec:	10ba7304 	addi	r2,r2,-5684
   54cf0:	e0fff817 	ldw	r3,-32(fp)
   54cf4:	180690fa 	slli	r3,r3,3
   54cf8:	10c5883a 	add	r2,r2,r3
   54cfc:	10800104 	addi	r2,r2,4
   54d00:	e0ffff17 	ldw	r3,-4(fp)
   54d04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   54d08:	e0bffe17 	ldw	r2,-8(fp)
   54d0c:	10000526 	beq	r2,zero,54d24 <alt_iic_isr_register+0xb4>
   54d10:	e0bff817 	ldw	r2,-32(fp)
   54d14:	e13ffc17 	ldw	r4,-16(fp)
   54d18:	100b883a 	mov	r5,r2
   54d1c:	0054ae00 	call	54ae0 <alt_ic_irq_enable>
   54d20:	00000406 	br	54d34 <alt_iic_isr_register+0xc4>
   54d24:	e0bff817 	ldw	r2,-32(fp)
   54d28:	e13ffc17 	ldw	r4,-16(fp)
   54d2c:	100b883a 	mov	r5,r2
   54d30:	0054b800 	call	54b80 <alt_ic_irq_disable>
   54d34:	e0bff715 	stw	r2,-36(fp)
   54d38:	e0bff917 	ldw	r2,-28(fp)
   54d3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54d40:	e0bffb17 	ldw	r2,-20(fp)
   54d44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   54d48:	e0bff717 	ldw	r2,-36(fp)
}
   54d4c:	e037883a 	mov	sp,fp
   54d50:	dfc00117 	ldw	ra,4(sp)
   54d54:	df000017 	ldw	fp,0(sp)
   54d58:	dec00204 	addi	sp,sp,8
   54d5c:	f800283a 	ret

00054d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54d60:	defffe04 	addi	sp,sp,-8
   54d64:	dfc00115 	stw	ra,4(sp)
   54d68:	df000015 	stw	fp,0(sp)
   54d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54d70:	008001b4 	movhi	r2,6
   54d74:	10b33b04 	addi	r2,r2,-13076
   54d78:	10800017 	ldw	r2,0(r2)
   54d7c:	10000526 	beq	r2,zero,54d94 <alt_get_errno+0x34>
   54d80:	008001b4 	movhi	r2,6
   54d84:	10b33b04 	addi	r2,r2,-13076
   54d88:	10800017 	ldw	r2,0(r2)
   54d8c:	103ee83a 	callr	r2
   54d90:	00000206 	br	54d9c <alt_get_errno+0x3c>
   54d94:	008001b4 	movhi	r2,6
   54d98:	10ba1e04 	addi	r2,r2,-6024
}
   54d9c:	e037883a 	mov	sp,fp
   54da0:	dfc00117 	ldw	ra,4(sp)
   54da4:	df000017 	ldw	fp,0(sp)
   54da8:	dec00204 	addi	sp,sp,8
   54dac:	f800283a 	ret

00054db0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   54db0:	deffed04 	addi	sp,sp,-76
   54db4:	dfc01215 	stw	ra,72(sp)
   54db8:	df001115 	stw	fp,68(sp)
   54dbc:	df001104 	addi	fp,sp,68
   54dc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54dc4:	e0bfff17 	ldw	r2,-4(fp)
   54dc8:	10000616 	blt	r2,zero,54de4 <isatty+0x34>
   54dcc:	e0bfff17 	ldw	r2,-4(fp)
   54dd0:	10c00324 	muli	r3,r2,12
   54dd4:	008001b4 	movhi	r2,6
   54dd8:	10aeb504 	addi	r2,r2,-17708
   54ddc:	1885883a 	add	r2,r3,r2
   54de0:	00000106 	br	54de8 <isatty+0x38>
   54de4:	0005883a 	mov	r2,zero
   54de8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   54dec:	e0bfef17 	ldw	r2,-68(fp)
   54df0:	10000e26 	beq	r2,zero,54e2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   54df4:	e0bfef17 	ldw	r2,-68(fp)
   54df8:	10800017 	ldw	r2,0(r2)
   54dfc:	10800817 	ldw	r2,32(r2)
   54e00:	1000021e 	bne	r2,zero,54e0c <isatty+0x5c>
    {
      return 1;
   54e04:	00800044 	movi	r2,1
   54e08:	00000d06 	br	54e40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   54e0c:	e0bff004 	addi	r2,fp,-64
   54e10:	e13fff17 	ldw	r4,-4(fp)
   54e14:	100b883a 	mov	r5,r2
   54e18:	00549e00 	call	549e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   54e1c:	e0bff117 	ldw	r2,-60(fp)
   54e20:	10880020 	cmpeqi	r2,r2,8192
   54e24:	10803fcc 	andi	r2,r2,255
   54e28:	00000506 	br	54e40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   54e2c:	0054d600 	call	54d60 <alt_get_errno>
   54e30:	1007883a 	mov	r3,r2
   54e34:	00801444 	movi	r2,81
   54e38:	18800015 	stw	r2,0(r3)
    return 0;
   54e3c:	0005883a 	mov	r2,zero
  }
}
   54e40:	e037883a 	mov	sp,fp
   54e44:	dfc00117 	ldw	ra,4(sp)
   54e48:	df000017 	ldw	fp,0(sp)
   54e4c:	dec00204 	addi	sp,sp,8
   54e50:	f800283a 	ret

00054e54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   54e54:	defffc04 	addi	sp,sp,-16
   54e58:	df000315 	stw	fp,12(sp)
   54e5c:	df000304 	addi	fp,sp,12
   54e60:	e13ffd15 	stw	r4,-12(fp)
   54e64:	e17ffe15 	stw	r5,-8(fp)
   54e68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   54e6c:	e0fffe17 	ldw	r3,-8(fp)
   54e70:	e0bffd17 	ldw	r2,-12(fp)
   54e74:	18800c26 	beq	r3,r2,54ea8 <alt_load_section+0x54>
  {
    while( to != end )
   54e78:	00000806 	br	54e9c <alt_load_section+0x48>
    {
      *to++ = *from++;
   54e7c:	e0bffe17 	ldw	r2,-8(fp)
   54e80:	10c00104 	addi	r3,r2,4
   54e84:	e0fffe15 	stw	r3,-8(fp)
   54e88:	e0fffd17 	ldw	r3,-12(fp)
   54e8c:	19000104 	addi	r4,r3,4
   54e90:	e13ffd15 	stw	r4,-12(fp)
   54e94:	18c00017 	ldw	r3,0(r3)
   54e98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   54e9c:	e0fffe17 	ldw	r3,-8(fp)
   54ea0:	e0bfff17 	ldw	r2,-4(fp)
   54ea4:	18bff51e 	bne	r3,r2,54e7c <__alt_data_end+0xfffedd7c>
    {
      *to++ = *from++;
    }
  }
}
   54ea8:	e037883a 	mov	sp,fp
   54eac:	df000017 	ldw	fp,0(sp)
   54eb0:	dec00104 	addi	sp,sp,4
   54eb4:	f800283a 	ret

00054eb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   54eb8:	defffe04 	addi	sp,sp,-8
   54ebc:	dfc00115 	stw	ra,4(sp)
   54ec0:	df000015 	stw	fp,0(sp)
   54ec4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   54ec8:	010001b4 	movhi	r4,6
   54ecc:	21334004 	addi	r4,r4,-13056
   54ed0:	014001b4 	movhi	r5,6
   54ed4:	296c6504 	addi	r5,r5,-20076
   54ed8:	018001b4 	movhi	r6,6
   54edc:	31b34004 	addi	r6,r6,-13056
   54ee0:	0054e540 	call	54e54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   54ee4:	01000134 	movhi	r4,4
   54ee8:	21000804 	addi	r4,r4,32
   54eec:	01400134 	movhi	r5,4
   54ef0:	29400804 	addi	r5,r5,32
   54ef4:	01800134 	movhi	r6,4
   54ef8:	31809004 	addi	r6,r6,576
   54efc:	0054e540 	call	54e54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   54f00:	01000174 	movhi	r4,5
   54f04:	211c7104 	addi	r4,r4,29124
   54f08:	01400174 	movhi	r5,5
   54f0c:	295c7104 	addi	r5,r5,29124
   54f10:	018001b4 	movhi	r6,6
   54f14:	31ac6504 	addi	r6,r6,-20076
   54f18:	0054e540 	call	54e54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   54f1c:	00563940 	call	56394 <alt_dcache_flush_all>
  alt_icache_flush_all();
   54f20:	00565840 	call	56584 <alt_icache_flush_all>
}
   54f24:	e037883a 	mov	sp,fp
   54f28:	dfc00117 	ldw	ra,4(sp)
   54f2c:	df000017 	ldw	fp,0(sp)
   54f30:	dec00204 	addi	sp,sp,8
   54f34:	f800283a 	ret

00054f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54f38:	defffe04 	addi	sp,sp,-8
   54f3c:	dfc00115 	stw	ra,4(sp)
   54f40:	df000015 	stw	fp,0(sp)
   54f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54f48:	008001b4 	movhi	r2,6
   54f4c:	10b33b04 	addi	r2,r2,-13076
   54f50:	10800017 	ldw	r2,0(r2)
   54f54:	10000526 	beq	r2,zero,54f6c <alt_get_errno+0x34>
   54f58:	008001b4 	movhi	r2,6
   54f5c:	10b33b04 	addi	r2,r2,-13076
   54f60:	10800017 	ldw	r2,0(r2)
   54f64:	103ee83a 	callr	r2
   54f68:	00000206 	br	54f74 <alt_get_errno+0x3c>
   54f6c:	008001b4 	movhi	r2,6
   54f70:	10ba1e04 	addi	r2,r2,-6024
}
   54f74:	e037883a 	mov	sp,fp
   54f78:	dfc00117 	ldw	ra,4(sp)
   54f7c:	df000017 	ldw	fp,0(sp)
   54f80:	dec00204 	addi	sp,sp,8
   54f84:	f800283a 	ret

00054f88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   54f88:	defff904 	addi	sp,sp,-28
   54f8c:	dfc00615 	stw	ra,24(sp)
   54f90:	df000515 	stw	fp,20(sp)
   54f94:	df000504 	addi	fp,sp,20
   54f98:	e13ffd15 	stw	r4,-12(fp)
   54f9c:	e17ffe15 	stw	r5,-8(fp)
   54fa0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   54fa4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54fa8:	e0bffd17 	ldw	r2,-12(fp)
   54fac:	10000616 	blt	r2,zero,54fc8 <lseek+0x40>
   54fb0:	e0bffd17 	ldw	r2,-12(fp)
   54fb4:	10c00324 	muli	r3,r2,12
   54fb8:	008001b4 	movhi	r2,6
   54fbc:	10aeb504 	addi	r2,r2,-17708
   54fc0:	1885883a 	add	r2,r3,r2
   54fc4:	00000106 	br	54fcc <lseek+0x44>
   54fc8:	0005883a 	mov	r2,zero
   54fcc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   54fd0:	e0bffc17 	ldw	r2,-16(fp)
   54fd4:	10001026 	beq	r2,zero,55018 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   54fd8:	e0bffc17 	ldw	r2,-16(fp)
   54fdc:	10800017 	ldw	r2,0(r2)
   54fe0:	10800717 	ldw	r2,28(r2)
   54fe4:	10000926 	beq	r2,zero,5500c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   54fe8:	e0bffc17 	ldw	r2,-16(fp)
   54fec:	10800017 	ldw	r2,0(r2)
   54ff0:	10800717 	ldw	r2,28(r2)
   54ff4:	e13ffc17 	ldw	r4,-16(fp)
   54ff8:	e17ffe17 	ldw	r5,-8(fp)
   54ffc:	e1bfff17 	ldw	r6,-4(fp)
   55000:	103ee83a 	callr	r2
   55004:	e0bffb15 	stw	r2,-20(fp)
   55008:	00000506 	br	55020 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   5500c:	00bfde84 	movi	r2,-134
   55010:	e0bffb15 	stw	r2,-20(fp)
   55014:	00000206 	br	55020 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   55018:	00bfebc4 	movi	r2,-81
   5501c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   55020:	e0bffb17 	ldw	r2,-20(fp)
   55024:	1000070e 	bge	r2,zero,55044 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   55028:	0054f380 	call	54f38 <alt_get_errno>
   5502c:	1007883a 	mov	r3,r2
   55030:	e0bffb17 	ldw	r2,-20(fp)
   55034:	0085c83a 	sub	r2,zero,r2
   55038:	18800015 	stw	r2,0(r3)
    rc = -1;
   5503c:	00bfffc4 	movi	r2,-1
   55040:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   55044:	e0bffb17 	ldw	r2,-20(fp)
}
   55048:	e037883a 	mov	sp,fp
   5504c:	dfc00117 	ldw	ra,4(sp)
   55050:	df000017 	ldw	fp,0(sp)
   55054:	dec00204 	addi	sp,sp,8
   55058:	f800283a 	ret

0005505c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   5505c:	defffd04 	addi	sp,sp,-12
   55060:	dfc00215 	stw	ra,8(sp)
   55064:	df000115 	stw	fp,4(sp)
   55068:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   5506c:	0009883a 	mov	r4,zero
   55070:	00555200 	call	55520 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   55074:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   55078:	00555540 	call	55554 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   5507c:	010001b4 	movhi	r4,6
   55080:	212c5d04 	addi	r4,r4,-20108
   55084:	014001b4 	movhi	r5,6
   55088:	296c5d04 	addi	r5,r5,-20108
   5508c:	018001b4 	movhi	r6,6
   55090:	31ac5d04 	addi	r6,r6,-20108
   55094:	00567100 	call	56710 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   55098:	00564cc0 	call	564cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   5509c:	01000174 	movhi	r4,5
   550a0:	21194a04 	addi	r4,r4,25896
   550a4:	0056e9c0 	call	56e9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   550a8:	d126f617 	ldw	r4,-25640(gp)
   550ac:	d0e6f717 	ldw	r3,-25636(gp)
   550b0:	d0a6f817 	ldw	r2,-25632(gp)
   550b4:	180b883a 	mov	r5,r3
   550b8:	100d883a 	mov	r6,r2
   550bc:	00465e40 	call	465e4 <main>
   550c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   550c4:	01000044 	movi	r4,1
   550c8:	00548940 	call	54894 <close>
  exit (result);
   550cc:	e13fff17 	ldw	r4,-4(fp)
   550d0:	0056eb00 	call	56eb0 <exit>

000550d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   550d4:	defffe04 	addi	sp,sp,-8
   550d8:	df000115 	stw	fp,4(sp)
   550dc:	df000104 	addi	fp,sp,4
   550e0:	e13fff15 	stw	r4,-4(fp)
}
   550e4:	e037883a 	mov	sp,fp
   550e8:	df000017 	ldw	fp,0(sp)
   550ec:	dec00104 	addi	sp,sp,4
   550f0:	f800283a 	ret

000550f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   550f4:	defffe04 	addi	sp,sp,-8
   550f8:	df000115 	stw	fp,4(sp)
   550fc:	df000104 	addi	fp,sp,4
   55100:	e13fff15 	stw	r4,-4(fp)
}
   55104:	e037883a 	mov	sp,fp
   55108:	df000017 	ldw	fp,0(sp)
   5510c:	dec00104 	addi	sp,sp,4
   55110:	f800283a 	ret

00055114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55114:	defffe04 	addi	sp,sp,-8
   55118:	dfc00115 	stw	ra,4(sp)
   5511c:	df000015 	stw	fp,0(sp)
   55120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   55124:	008001b4 	movhi	r2,6
   55128:	10b33b04 	addi	r2,r2,-13076
   5512c:	10800017 	ldw	r2,0(r2)
   55130:	10000526 	beq	r2,zero,55148 <alt_get_errno+0x34>
   55134:	008001b4 	movhi	r2,6
   55138:	10b33b04 	addi	r2,r2,-13076
   5513c:	10800017 	ldw	r2,0(r2)
   55140:	103ee83a 	callr	r2
   55144:	00000206 	br	55150 <alt_get_errno+0x3c>
   55148:	008001b4 	movhi	r2,6
   5514c:	10ba1e04 	addi	r2,r2,-6024
}
   55150:	e037883a 	mov	sp,fp
   55154:	dfc00117 	ldw	ra,4(sp)
   55158:	df000017 	ldw	fp,0(sp)
   5515c:	dec00204 	addi	sp,sp,8
   55160:	f800283a 	ret

00055164 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   55164:	defff904 	addi	sp,sp,-28
   55168:	dfc00615 	stw	ra,24(sp)
   5516c:	df000515 	stw	fp,20(sp)
   55170:	df000504 	addi	fp,sp,20
   55174:	e13ffd15 	stw	r4,-12(fp)
   55178:	e17ffe15 	stw	r5,-8(fp)
   5517c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   55180:	e0bffd17 	ldw	r2,-12(fp)
   55184:	10000616 	blt	r2,zero,551a0 <read+0x3c>
   55188:	e0bffd17 	ldw	r2,-12(fp)
   5518c:	10c00324 	muli	r3,r2,12
   55190:	008001b4 	movhi	r2,6
   55194:	10aeb504 	addi	r2,r2,-17708
   55198:	1885883a 	add	r2,r3,r2
   5519c:	00000106 	br	551a4 <read+0x40>
   551a0:	0005883a 	mov	r2,zero
   551a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   551a8:	e0bffb17 	ldw	r2,-20(fp)
   551ac:	10002226 	beq	r2,zero,55238 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   551b0:	e0bffb17 	ldw	r2,-20(fp)
   551b4:	10800217 	ldw	r2,8(r2)
   551b8:	108000cc 	andi	r2,r2,3
   551bc:	10800060 	cmpeqi	r2,r2,1
   551c0:	1000181e 	bne	r2,zero,55224 <read+0xc0>
        (fd->dev->read))
   551c4:	e0bffb17 	ldw	r2,-20(fp)
   551c8:	10800017 	ldw	r2,0(r2)
   551cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   551d0:	10001426 	beq	r2,zero,55224 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   551d4:	e0bffb17 	ldw	r2,-20(fp)
   551d8:	10800017 	ldw	r2,0(r2)
   551dc:	10800517 	ldw	r2,20(r2)
   551e0:	e0ffff17 	ldw	r3,-4(fp)
   551e4:	e13ffb17 	ldw	r4,-20(fp)
   551e8:	e17ffe17 	ldw	r5,-8(fp)
   551ec:	180d883a 	mov	r6,r3
   551f0:	103ee83a 	callr	r2
   551f4:	e0bffc15 	stw	r2,-16(fp)
   551f8:	e0bffc17 	ldw	r2,-16(fp)
   551fc:	1000070e 	bge	r2,zero,5521c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   55200:	00551140 	call	55114 <alt_get_errno>
   55204:	1007883a 	mov	r3,r2
   55208:	e0bffc17 	ldw	r2,-16(fp)
   5520c:	0085c83a 	sub	r2,zero,r2
   55210:	18800015 	stw	r2,0(r3)
          return -1;
   55214:	00bfffc4 	movi	r2,-1
   55218:	00000c06 	br	5524c <read+0xe8>
        }
        return rval;
   5521c:	e0bffc17 	ldw	r2,-16(fp)
   55220:	00000a06 	br	5524c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   55224:	00551140 	call	55114 <alt_get_errno>
   55228:	1007883a 	mov	r3,r2
   5522c:	00800344 	movi	r2,13
   55230:	18800015 	stw	r2,0(r3)
   55234:	00000406 	br	55248 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   55238:	00551140 	call	55114 <alt_get_errno>
   5523c:	1007883a 	mov	r3,r2
   55240:	00801444 	movi	r2,81
   55244:	18800015 	stw	r2,0(r3)
  }
  return -1;
   55248:	00bfffc4 	movi	r2,-1
}
   5524c:	e037883a 	mov	sp,fp
   55250:	dfc00117 	ldw	ra,4(sp)
   55254:	df000017 	ldw	fp,0(sp)
   55258:	dec00204 	addi	sp,sp,8
   5525c:	f800283a 	ret

00055260 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   55260:	defffe04 	addi	sp,sp,-8
   55264:	df000115 	stw	fp,4(sp)
   55268:	df000104 	addi	fp,sp,4
   5526c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   55270:	e0bfff17 	ldw	r2,-4(fp)
   55274:	108000d0 	cmplti	r2,r2,3
   55278:	10000d1e 	bne	r2,zero,552b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   5527c:	008001b4 	movhi	r2,6
   55280:	10aeb504 	addi	r2,r2,-17708
   55284:	e0ffff17 	ldw	r3,-4(fp)
   55288:	18c00324 	muli	r3,r3,12
   5528c:	10c5883a 	add	r2,r2,r3
   55290:	10800204 	addi	r2,r2,8
   55294:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   55298:	008001b4 	movhi	r2,6
   5529c:	10aeb504 	addi	r2,r2,-17708
   552a0:	e0ffff17 	ldw	r3,-4(fp)
   552a4:	18c00324 	muli	r3,r3,12
   552a8:	10c5883a 	add	r2,r2,r3
   552ac:	10000015 	stw	zero,0(r2)
  }
}
   552b0:	e037883a 	mov	sp,fp
   552b4:	df000017 	ldw	fp,0(sp)
   552b8:	dec00104 	addi	sp,sp,4
   552bc:	f800283a 	ret

000552c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   552c0:	defff904 	addi	sp,sp,-28
   552c4:	df000615 	stw	fp,24(sp)
   552c8:	df000604 	addi	fp,sp,24
   552cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   552d0:	0005303a 	rdctl	r2,status
   552d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   552d8:	e0fffc17 	ldw	r3,-16(fp)
   552dc:	00bfff84 	movi	r2,-2
   552e0:	1884703a 	and	r2,r3,r2
   552e4:	1001703a 	wrctl	status,r2
  
  return context;
   552e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   552ec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   552f0:	d0a01017 	ldw	r2,-32704(gp)
   552f4:	10c000c4 	addi	r3,r2,3
   552f8:	00bfff04 	movi	r2,-4
   552fc:	1884703a 	and	r2,r3,r2
   55300:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   55304:	d0e01017 	ldw	r3,-32704(gp)
   55308:	e0bfff17 	ldw	r2,-4(fp)
   5530c:	1887883a 	add	r3,r3,r2
   55310:	008001b4 	movhi	r2,6
   55314:	109c4004 	addi	r2,r2,28928
   55318:	10c0062e 	bgeu	r2,r3,55334 <sbrk+0x74>
   5531c:	e0bffa17 	ldw	r2,-24(fp)
   55320:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55324:	e0bffd17 	ldw	r2,-12(fp)
   55328:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   5532c:	00bfffc4 	movi	r2,-1
   55330:	00000b06 	br	55360 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   55334:	d0a01017 	ldw	r2,-32704(gp)
   55338:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   5533c:	d0e01017 	ldw	r3,-32704(gp)
   55340:	e0bfff17 	ldw	r2,-4(fp)
   55344:	1885883a 	add	r2,r3,r2
   55348:	d0a01015 	stw	r2,-32704(gp)
   5534c:	e0bffa17 	ldw	r2,-24(fp)
   55350:	e0bffe15 	stw	r2,-8(fp)
   55354:	e0bffe17 	ldw	r2,-8(fp)
   55358:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   5535c:	e0bffb17 	ldw	r2,-20(fp)
} 
   55360:	e037883a 	mov	sp,fp
   55364:	df000017 	ldw	fp,0(sp)
   55368:	dec00104 	addi	sp,sp,4
   5536c:	f800283a 	ret

00055370 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   55370:	defffd04 	addi	sp,sp,-12
   55374:	dfc00215 	stw	ra,8(sp)
   55378:	df000115 	stw	fp,4(sp)
   5537c:	df000104 	addi	fp,sp,4
   55380:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   55384:	e13fff17 	ldw	r4,-4(fp)
   55388:	005623c0 	call	5623c <alt_busy_sleep>
}
   5538c:	e037883a 	mov	sp,fp
   55390:	dfc00117 	ldw	ra,4(sp)
   55394:	df000017 	ldw	fp,0(sp)
   55398:	dec00204 	addi	sp,sp,8
   5539c:	f800283a 	ret

000553a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   553a0:	defffe04 	addi	sp,sp,-8
   553a4:	dfc00115 	stw	ra,4(sp)
   553a8:	df000015 	stw	fp,0(sp)
   553ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   553b0:	008001b4 	movhi	r2,6
   553b4:	10b33b04 	addi	r2,r2,-13076
   553b8:	10800017 	ldw	r2,0(r2)
   553bc:	10000526 	beq	r2,zero,553d4 <alt_get_errno+0x34>
   553c0:	008001b4 	movhi	r2,6
   553c4:	10b33b04 	addi	r2,r2,-13076
   553c8:	10800017 	ldw	r2,0(r2)
   553cc:	103ee83a 	callr	r2
   553d0:	00000206 	br	553dc <alt_get_errno+0x3c>
   553d4:	008001b4 	movhi	r2,6
   553d8:	10ba1e04 	addi	r2,r2,-6024
}
   553dc:	e037883a 	mov	sp,fp
   553e0:	dfc00117 	ldw	ra,4(sp)
   553e4:	df000017 	ldw	fp,0(sp)
   553e8:	dec00204 	addi	sp,sp,8
   553ec:	f800283a 	ret

000553f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   553f0:	defff904 	addi	sp,sp,-28
   553f4:	dfc00615 	stw	ra,24(sp)
   553f8:	df000515 	stw	fp,20(sp)
   553fc:	df000504 	addi	fp,sp,20
   55400:	e13ffd15 	stw	r4,-12(fp)
   55404:	e17ffe15 	stw	r5,-8(fp)
   55408:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5540c:	e0bffd17 	ldw	r2,-12(fp)
   55410:	10000616 	blt	r2,zero,5542c <write+0x3c>
   55414:	e0bffd17 	ldw	r2,-12(fp)
   55418:	10c00324 	muli	r3,r2,12
   5541c:	008001b4 	movhi	r2,6
   55420:	10aeb504 	addi	r2,r2,-17708
   55424:	1885883a 	add	r2,r3,r2
   55428:	00000106 	br	55430 <write+0x40>
   5542c:	0005883a 	mov	r2,zero
   55430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   55434:	e0bffb17 	ldw	r2,-20(fp)
   55438:	10002126 	beq	r2,zero,554c0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   5543c:	e0bffb17 	ldw	r2,-20(fp)
   55440:	10800217 	ldw	r2,8(r2)
   55444:	108000cc 	andi	r2,r2,3
   55448:	10001826 	beq	r2,zero,554ac <write+0xbc>
   5544c:	e0bffb17 	ldw	r2,-20(fp)
   55450:	10800017 	ldw	r2,0(r2)
   55454:	10800617 	ldw	r2,24(r2)
   55458:	10001426 	beq	r2,zero,554ac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   5545c:	e0bffb17 	ldw	r2,-20(fp)
   55460:	10800017 	ldw	r2,0(r2)
   55464:	10800617 	ldw	r2,24(r2)
   55468:	e0ffff17 	ldw	r3,-4(fp)
   5546c:	e13ffb17 	ldw	r4,-20(fp)
   55470:	e17ffe17 	ldw	r5,-8(fp)
   55474:	180d883a 	mov	r6,r3
   55478:	103ee83a 	callr	r2
   5547c:	e0bffc15 	stw	r2,-16(fp)
   55480:	e0bffc17 	ldw	r2,-16(fp)
   55484:	1000070e 	bge	r2,zero,554a4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   55488:	00553a00 	call	553a0 <alt_get_errno>
   5548c:	1007883a 	mov	r3,r2
   55490:	e0bffc17 	ldw	r2,-16(fp)
   55494:	0085c83a 	sub	r2,zero,r2
   55498:	18800015 	stw	r2,0(r3)
        return -1;
   5549c:	00bfffc4 	movi	r2,-1
   554a0:	00000c06 	br	554d4 <write+0xe4>
      }
      return rval;
   554a4:	e0bffc17 	ldw	r2,-16(fp)
   554a8:	00000a06 	br	554d4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   554ac:	00553a00 	call	553a0 <alt_get_errno>
   554b0:	1007883a 	mov	r3,r2
   554b4:	00800344 	movi	r2,13
   554b8:	18800015 	stw	r2,0(r3)
   554bc:	00000406 	br	554d0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   554c0:	00553a00 	call	553a0 <alt_get_errno>
   554c4:	1007883a 	mov	r3,r2
   554c8:	00801444 	movi	r2,81
   554cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   554d0:	00bfffc4 	movi	r2,-1
}
   554d4:	e037883a 	mov	sp,fp
   554d8:	dfc00117 	ldw	ra,4(sp)
   554dc:	df000017 	ldw	fp,0(sp)
   554e0:	dec00204 	addi	sp,sp,8
   554e4:	f800283a 	ret

000554e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   554e8:	defffd04 	addi	sp,sp,-12
   554ec:	dfc00215 	stw	ra,8(sp)
   554f0:	df000115 	stw	fp,4(sp)
   554f4:	df000104 	addi	fp,sp,4
   554f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   554fc:	e13fff17 	ldw	r4,-4(fp)
   55500:	014001b4 	movhi	r5,6
   55504:	29733804 	addi	r5,r5,-13088
   55508:	00564280 	call	56428 <alt_dev_llist_insert>
}
   5550c:	e037883a 	mov	sp,fp
   55510:	dfc00117 	ldw	ra,4(sp)
   55514:	df000017 	ldw	fp,0(sp)
   55518:	dec00204 	addi	sp,sp,8
   5551c:	f800283a 	ret

00055520 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   55520:	defffd04 	addi	sp,sp,-12
   55524:	dfc00215 	stw	ra,8(sp)
   55528:	df000115 	stw	fp,4(sp)
   5552c:	df000104 	addi	fp,sp,4
   55530:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   55534:	0056b980 	call	56b98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   55538:	00800044 	movi	r2,1
   5553c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   55540:	e037883a 	mov	sp,fp
   55544:	dfc00117 	ldw	ra,4(sp)
   55548:	df000017 	ldw	fp,0(sp)
   5554c:	dec00204 	addi	sp,sp,8
   55550:	f800283a 	ret

00055554 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   55554:	defffe04 	addi	sp,sp,-8
   55558:	dfc00115 	stw	ra,4(sp)
   5555c:	df000015 	stw	fp,0(sp)
   55560:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   55564:	01000234 	movhi	r4,8
   55568:	21040004 	addi	r4,r4,4096
   5556c:	000b883a 	mov	r5,zero
   55570:	01800144 	movi	r6,5
   55574:	01c0fa04 	movi	r7,1000
   55578:	00560740 	call	56074 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   5557c:	010001b4 	movhi	r4,6
   55580:	212f1f04 	addi	r4,r4,-17284
   55584:	000b883a 	mov	r5,zero
   55588:	01800044 	movi	r6,1
   5558c:	00557180 	call	55718 <altera_avalon_jtag_uart_init>
   55590:	010001b4 	movhi	r4,6
   55594:	212f1504 	addi	r4,r4,-17324
   55598:	00554e80 	call	554e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   5559c:	0001883a 	nop
}
   555a0:	e037883a 	mov	sp,fp
   555a4:	dfc00117 	ldw	ra,4(sp)
   555a8:	df000017 	ldw	fp,0(sp)
   555ac:	dec00204 	addi	sp,sp,8
   555b0:	f800283a 	ret

000555b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   555b4:	defffa04 	addi	sp,sp,-24
   555b8:	dfc00515 	stw	ra,20(sp)
   555bc:	df000415 	stw	fp,16(sp)
   555c0:	df000404 	addi	fp,sp,16
   555c4:	e13ffd15 	stw	r4,-12(fp)
   555c8:	e17ffe15 	stw	r5,-8(fp)
   555cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   555d0:	e0bffd17 	ldw	r2,-12(fp)
   555d4:	10800017 	ldw	r2,0(r2)
   555d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   555dc:	e0bffc17 	ldw	r2,-16(fp)
   555e0:	10c00a04 	addi	r3,r2,40
   555e4:	e0bffd17 	ldw	r2,-12(fp)
   555e8:	10800217 	ldw	r2,8(r2)
   555ec:	1809883a 	mov	r4,r3
   555f0:	e17ffe17 	ldw	r5,-8(fp)
   555f4:	e1bfff17 	ldw	r6,-4(fp)
   555f8:	100f883a 	mov	r7,r2
   555fc:	0055bdc0 	call	55bdc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   55600:	e037883a 	mov	sp,fp
   55604:	dfc00117 	ldw	ra,4(sp)
   55608:	df000017 	ldw	fp,0(sp)
   5560c:	dec00204 	addi	sp,sp,8
   55610:	f800283a 	ret

00055614 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   55614:	defffa04 	addi	sp,sp,-24
   55618:	dfc00515 	stw	ra,20(sp)
   5561c:	df000415 	stw	fp,16(sp)
   55620:	df000404 	addi	fp,sp,16
   55624:	e13ffd15 	stw	r4,-12(fp)
   55628:	e17ffe15 	stw	r5,-8(fp)
   5562c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55630:	e0bffd17 	ldw	r2,-12(fp)
   55634:	10800017 	ldw	r2,0(r2)
   55638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   5563c:	e0bffc17 	ldw	r2,-16(fp)
   55640:	10c00a04 	addi	r3,r2,40
   55644:	e0bffd17 	ldw	r2,-12(fp)
   55648:	10800217 	ldw	r2,8(r2)
   5564c:	1809883a 	mov	r4,r3
   55650:	e17ffe17 	ldw	r5,-8(fp)
   55654:	e1bfff17 	ldw	r6,-4(fp)
   55658:	100f883a 	mov	r7,r2
   5565c:	0055de80 	call	55de8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   55660:	e037883a 	mov	sp,fp
   55664:	dfc00117 	ldw	ra,4(sp)
   55668:	df000017 	ldw	fp,0(sp)
   5566c:	dec00204 	addi	sp,sp,8
   55670:	f800283a 	ret

00055674 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   55674:	defffc04 	addi	sp,sp,-16
   55678:	dfc00315 	stw	ra,12(sp)
   5567c:	df000215 	stw	fp,8(sp)
   55680:	df000204 	addi	fp,sp,8
   55684:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   55688:	e0bfff17 	ldw	r2,-4(fp)
   5568c:	10800017 	ldw	r2,0(r2)
   55690:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   55694:	e0bffe17 	ldw	r2,-8(fp)
   55698:	10c00a04 	addi	r3,r2,40
   5569c:	e0bfff17 	ldw	r2,-4(fp)
   556a0:	10800217 	ldw	r2,8(r2)
   556a4:	1809883a 	mov	r4,r3
   556a8:	100b883a 	mov	r5,r2
   556ac:	0055a880 	call	55a88 <altera_avalon_jtag_uart_close>
}
   556b0:	e037883a 	mov	sp,fp
   556b4:	dfc00117 	ldw	ra,4(sp)
   556b8:	df000017 	ldw	fp,0(sp)
   556bc:	dec00204 	addi	sp,sp,8
   556c0:	f800283a 	ret

000556c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   556c4:	defffa04 	addi	sp,sp,-24
   556c8:	dfc00515 	stw	ra,20(sp)
   556cc:	df000415 	stw	fp,16(sp)
   556d0:	df000404 	addi	fp,sp,16
   556d4:	e13ffd15 	stw	r4,-12(fp)
   556d8:	e17ffe15 	stw	r5,-8(fp)
   556dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   556e0:	e0bffd17 	ldw	r2,-12(fp)
   556e4:	10800017 	ldw	r2,0(r2)
   556e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   556ec:	e0bffc17 	ldw	r2,-16(fp)
   556f0:	10800a04 	addi	r2,r2,40
   556f4:	1009883a 	mov	r4,r2
   556f8:	e17ffe17 	ldw	r5,-8(fp)
   556fc:	e1bfff17 	ldw	r6,-4(fp)
   55700:	0055af00 	call	55af0 <altera_avalon_jtag_uart_ioctl>
}
   55704:	e037883a 	mov	sp,fp
   55708:	dfc00117 	ldw	ra,4(sp)
   5570c:	df000017 	ldw	fp,0(sp)
   55710:	dec00204 	addi	sp,sp,8
   55714:	f800283a 	ret

00055718 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   55718:	defffa04 	addi	sp,sp,-24
   5571c:	dfc00515 	stw	ra,20(sp)
   55720:	df000415 	stw	fp,16(sp)
   55724:	df000404 	addi	fp,sp,16
   55728:	e13ffd15 	stw	r4,-12(fp)
   5572c:	e17ffe15 	stw	r5,-8(fp)
   55730:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55734:	e0bffd17 	ldw	r2,-12(fp)
   55738:	00c00044 	movi	r3,1
   5573c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   55740:	e0bffd17 	ldw	r2,-12(fp)
   55744:	10800017 	ldw	r2,0(r2)
   55748:	10800104 	addi	r2,r2,4
   5574c:	1007883a 	mov	r3,r2
   55750:	e0bffd17 	ldw	r2,-12(fp)
   55754:	10800817 	ldw	r2,32(r2)
   55758:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   5575c:	e0fffe17 	ldw	r3,-8(fp)
   55760:	e0bfff17 	ldw	r2,-4(fp)
   55764:	d8000015 	stw	zero,0(sp)
   55768:	1809883a 	mov	r4,r3
   5576c:	100b883a 	mov	r5,r2
   55770:	01800174 	movhi	r6,5
   55774:	3195f704 	addi	r6,r6,22492
   55778:	e1fffd17 	ldw	r7,-12(fp)
   5577c:	0054a900 	call	54a90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   55780:	e0bffd17 	ldw	r2,-12(fp)
   55784:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   55788:	e0bffd17 	ldw	r2,-12(fp)
   5578c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   55790:	008001b4 	movhi	r2,6
   55794:	10ba2704 	addi	r2,r2,-5988
   55798:	10800017 	ldw	r2,0(r2)
   5579c:	1809883a 	mov	r4,r3
   557a0:	100b883a 	mov	r5,r2
   557a4:	01800174 	movhi	r6,5
   557a8:	31967804 	addi	r6,r6,23008
   557ac:	e1fffd17 	ldw	r7,-12(fp)
   557b0:	00560fc0 	call	560fc <alt_alarm_start>
   557b4:	1000040e 	bge	r2,zero,557c8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   557b8:	e0fffd17 	ldw	r3,-12(fp)
   557bc:	00a00034 	movhi	r2,32768
   557c0:	10bfffc4 	addi	r2,r2,-1
   557c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   557c8:	e037883a 	mov	sp,fp
   557cc:	dfc00117 	ldw	ra,4(sp)
   557d0:	df000017 	ldw	fp,0(sp)
   557d4:	dec00204 	addi	sp,sp,8
   557d8:	f800283a 	ret

000557dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   557dc:	defff804 	addi	sp,sp,-32
   557e0:	df000715 	stw	fp,28(sp)
   557e4:	df000704 	addi	fp,sp,28
   557e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   557ec:	e0bfff17 	ldw	r2,-4(fp)
   557f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   557f4:	e0bffb17 	ldw	r2,-20(fp)
   557f8:	10800017 	ldw	r2,0(r2)
   557fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   55800:	e0bffc17 	ldw	r2,-16(fp)
   55804:	10800104 	addi	r2,r2,4
   55808:	10800037 	ldwio	r2,0(r2)
   5580c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   55810:	e0bffd17 	ldw	r2,-12(fp)
   55814:	1080c00c 	andi	r2,r2,768
   55818:	1000011e 	bne	r2,zero,55820 <altera_avalon_jtag_uart_irq+0x44>
      break;
   5581c:	00006c06 	br	559d0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   55820:	e0bffd17 	ldw	r2,-12(fp)
   55824:	1080400c 	andi	r2,r2,256
   55828:	10003426 	beq	r2,zero,558fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   5582c:	00800074 	movhi	r2,1
   55830:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55834:	e0bffb17 	ldw	r2,-20(fp)
   55838:	10800a17 	ldw	r2,40(r2)
   5583c:	10800044 	addi	r2,r2,1
   55840:	1081ffcc 	andi	r2,r2,2047
   55844:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   55848:	e0bffb17 	ldw	r2,-20(fp)
   5584c:	10c00b17 	ldw	r3,44(r2)
   55850:	e0bffe17 	ldw	r2,-8(fp)
   55854:	1880011e 	bne	r3,r2,5585c <altera_avalon_jtag_uart_irq+0x80>
          break;
   55858:	00001606 	br	558b4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   5585c:	e0bffc17 	ldw	r2,-16(fp)
   55860:	10800037 	ldwio	r2,0(r2)
   55864:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   55868:	e0bff917 	ldw	r2,-28(fp)
   5586c:	10a0000c 	andi	r2,r2,32768
   55870:	1000011e 	bne	r2,zero,55878 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   55874:	00000f06 	br	558b4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   55878:	e0bffb17 	ldw	r2,-20(fp)
   5587c:	10800a17 	ldw	r2,40(r2)
   55880:	e0fff917 	ldw	r3,-28(fp)
   55884:	1809883a 	mov	r4,r3
   55888:	e0fffb17 	ldw	r3,-20(fp)
   5588c:	1885883a 	add	r2,r3,r2
   55890:	10800e04 	addi	r2,r2,56
   55894:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55898:	e0bffb17 	ldw	r2,-20(fp)
   5589c:	10800a17 	ldw	r2,40(r2)
   558a0:	10800044 	addi	r2,r2,1
   558a4:	10c1ffcc 	andi	r3,r2,2047
   558a8:	e0bffb17 	ldw	r2,-20(fp)
   558ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   558b0:	003fe006 	br	55834 <__alt_data_end+0xfffee734>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   558b4:	e0bff917 	ldw	r2,-28(fp)
   558b8:	10bfffec 	andhi	r2,r2,65535
   558bc:	10000f26 	beq	r2,zero,558fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   558c0:	e0bffb17 	ldw	r2,-20(fp)
   558c4:	10c00817 	ldw	r3,32(r2)
   558c8:	00bfff84 	movi	r2,-2
   558cc:	1886703a 	and	r3,r3,r2
   558d0:	e0bffb17 	ldw	r2,-20(fp)
   558d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   558d8:	e0bffc17 	ldw	r2,-16(fp)
   558dc:	10800104 	addi	r2,r2,4
   558e0:	1007883a 	mov	r3,r2
   558e4:	e0bffb17 	ldw	r2,-20(fp)
   558e8:	10800817 	ldw	r2,32(r2)
   558ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   558f0:	e0bffc17 	ldw	r2,-16(fp)
   558f4:	10800104 	addi	r2,r2,4
   558f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   558fc:	e0bffd17 	ldw	r2,-12(fp)
   55900:	1080800c 	andi	r2,r2,512
   55904:	10003126 	beq	r2,zero,559cc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   55908:	e0bffd17 	ldw	r2,-12(fp)
   5590c:	1004d43a 	srli	r2,r2,16
   55910:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   55914:	00001406 	br	55968 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   55918:	e0bffc17 	ldw	r2,-16(fp)
   5591c:	e0fffb17 	ldw	r3,-20(fp)
   55920:	18c00d17 	ldw	r3,52(r3)
   55924:	e13ffb17 	ldw	r4,-20(fp)
   55928:	20c7883a 	add	r3,r4,r3
   5592c:	18c20e04 	addi	r3,r3,2104
   55930:	18c00003 	ldbu	r3,0(r3)
   55934:	18c03fcc 	andi	r3,r3,255
   55938:	18c0201c 	xori	r3,r3,128
   5593c:	18ffe004 	addi	r3,r3,-128
   55940:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55944:	e0bffb17 	ldw	r2,-20(fp)
   55948:	10800d17 	ldw	r2,52(r2)
   5594c:	10800044 	addi	r2,r2,1
   55950:	10c1ffcc 	andi	r3,r2,2047
   55954:	e0bffb17 	ldw	r2,-20(fp)
   55958:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   5595c:	e0bffa17 	ldw	r2,-24(fp)
   55960:	10bfffc4 	addi	r2,r2,-1
   55964:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   55968:	e0bffa17 	ldw	r2,-24(fp)
   5596c:	10000526 	beq	r2,zero,55984 <altera_avalon_jtag_uart_irq+0x1a8>
   55970:	e0bffb17 	ldw	r2,-20(fp)
   55974:	10c00d17 	ldw	r3,52(r2)
   55978:	e0bffb17 	ldw	r2,-20(fp)
   5597c:	10800c17 	ldw	r2,48(r2)
   55980:	18bfe51e 	bne	r3,r2,55918 <__alt_data_end+0xfffee818>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   55984:	e0bffa17 	ldw	r2,-24(fp)
   55988:	10001026 	beq	r2,zero,559cc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5598c:	e0bffb17 	ldw	r2,-20(fp)
   55990:	10c00817 	ldw	r3,32(r2)
   55994:	00bfff44 	movi	r2,-3
   55998:	1886703a 	and	r3,r3,r2
   5599c:	e0bffb17 	ldw	r2,-20(fp)
   559a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   559a4:	e0bffb17 	ldw	r2,-20(fp)
   559a8:	10800017 	ldw	r2,0(r2)
   559ac:	10800104 	addi	r2,r2,4
   559b0:	1007883a 	mov	r3,r2
   559b4:	e0bffb17 	ldw	r2,-20(fp)
   559b8:	10800817 	ldw	r2,32(r2)
   559bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   559c0:	e0bffc17 	ldw	r2,-16(fp)
   559c4:	10800104 	addi	r2,r2,4
   559c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   559cc:	003f8c06 	br	55800 <__alt_data_end+0xfffee700>
}
   559d0:	e037883a 	mov	sp,fp
   559d4:	df000017 	ldw	fp,0(sp)
   559d8:	dec00104 	addi	sp,sp,4
   559dc:	f800283a 	ret

000559e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   559e0:	defff804 	addi	sp,sp,-32
   559e4:	df000715 	stw	fp,28(sp)
   559e8:	df000704 	addi	fp,sp,28
   559ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   559f0:	e0bffb17 	ldw	r2,-20(fp)
   559f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   559f8:	e0bff917 	ldw	r2,-28(fp)
   559fc:	10800017 	ldw	r2,0(r2)
   55a00:	10800104 	addi	r2,r2,4
   55a04:	10800037 	ldwio	r2,0(r2)
   55a08:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   55a0c:	e0bffa17 	ldw	r2,-24(fp)
   55a10:	1081000c 	andi	r2,r2,1024
   55a14:	10000b26 	beq	r2,zero,55a44 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   55a18:	e0bff917 	ldw	r2,-28(fp)
   55a1c:	10800017 	ldw	r2,0(r2)
   55a20:	10800104 	addi	r2,r2,4
   55a24:	1007883a 	mov	r3,r2
   55a28:	e0bff917 	ldw	r2,-28(fp)
   55a2c:	10800817 	ldw	r2,32(r2)
   55a30:	10810014 	ori	r2,r2,1024
   55a34:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   55a38:	e0bff917 	ldw	r2,-28(fp)
   55a3c:	10000915 	stw	zero,36(r2)
   55a40:	00000a06 	br	55a6c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   55a44:	e0bff917 	ldw	r2,-28(fp)
   55a48:	10c00917 	ldw	r3,36(r2)
   55a4c:	00a00034 	movhi	r2,32768
   55a50:	10bfff04 	addi	r2,r2,-4
   55a54:	10c00536 	bltu	r2,r3,55a6c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   55a58:	e0bff917 	ldw	r2,-28(fp)
   55a5c:	10800917 	ldw	r2,36(r2)
   55a60:	10c00044 	addi	r3,r2,1
   55a64:	e0bff917 	ldw	r2,-28(fp)
   55a68:	10c00915 	stw	r3,36(r2)
   55a6c:	008001b4 	movhi	r2,6
   55a70:	10ba2704 	addi	r2,r2,-5988
   55a74:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   55a78:	e037883a 	mov	sp,fp
   55a7c:	df000017 	ldw	fp,0(sp)
   55a80:	dec00104 	addi	sp,sp,4
   55a84:	f800283a 	ret

00055a88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   55a88:	defffd04 	addi	sp,sp,-12
   55a8c:	df000215 	stw	fp,8(sp)
   55a90:	df000204 	addi	fp,sp,8
   55a94:	e13ffe15 	stw	r4,-8(fp)
   55a98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55a9c:	00000506 	br	55ab4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   55aa0:	e0bfff17 	ldw	r2,-4(fp)
   55aa4:	1090000c 	andi	r2,r2,16384
   55aa8:	10000226 	beq	r2,zero,55ab4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   55aac:	00bffd44 	movi	r2,-11
   55ab0:	00000b06 	br	55ae0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   55ab4:	e0bffe17 	ldw	r2,-8(fp)
   55ab8:	10c00d17 	ldw	r3,52(r2)
   55abc:	e0bffe17 	ldw	r2,-8(fp)
   55ac0:	10800c17 	ldw	r2,48(r2)
   55ac4:	18800526 	beq	r3,r2,55adc <altera_avalon_jtag_uart_close+0x54>
   55ac8:	e0bffe17 	ldw	r2,-8(fp)
   55acc:	10c00917 	ldw	r3,36(r2)
   55ad0:	e0bffe17 	ldw	r2,-8(fp)
   55ad4:	10800117 	ldw	r2,4(r2)
   55ad8:	18bff136 	bltu	r3,r2,55aa0 <__alt_data_end+0xfffee9a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   55adc:	0005883a 	mov	r2,zero
}
   55ae0:	e037883a 	mov	sp,fp
   55ae4:	df000017 	ldw	fp,0(sp)
   55ae8:	dec00104 	addi	sp,sp,4
   55aec:	f800283a 	ret

00055af0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   55af0:	defffa04 	addi	sp,sp,-24
   55af4:	df000515 	stw	fp,20(sp)
   55af8:	df000504 	addi	fp,sp,20
   55afc:	e13ffd15 	stw	r4,-12(fp)
   55b00:	e17ffe15 	stw	r5,-8(fp)
   55b04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   55b08:	00bff9c4 	movi	r2,-25
   55b0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   55b10:	e0bffe17 	ldw	r2,-8(fp)
   55b14:	10da8060 	cmpeqi	r3,r2,27137
   55b18:	1800031e 	bne	r3,zero,55b28 <altera_avalon_jtag_uart_ioctl+0x38>
   55b1c:	109a80a0 	cmpeqi	r2,r2,27138
   55b20:	1000191e 	bne	r2,zero,55b88 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   55b24:	00002806 	br	55bc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   55b28:	e0bffd17 	ldw	r2,-12(fp)
   55b2c:	10c00117 	ldw	r3,4(r2)
   55b30:	00a00034 	movhi	r2,32768
   55b34:	10bfffc4 	addi	r2,r2,-1
   55b38:	18801226 	beq	r3,r2,55b84 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   55b3c:	e0bfff17 	ldw	r2,-4(fp)
   55b40:	10800017 	ldw	r2,0(r2)
   55b44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   55b48:	e0bffc17 	ldw	r2,-16(fp)
   55b4c:	10800090 	cmplti	r2,r2,2
   55b50:	1000061e 	bne	r2,zero,55b6c <altera_avalon_jtag_uart_ioctl+0x7c>
   55b54:	e0fffc17 	ldw	r3,-16(fp)
   55b58:	00a00034 	movhi	r2,32768
   55b5c:	10bfffc4 	addi	r2,r2,-1
   55b60:	18800226 	beq	r3,r2,55b6c <altera_avalon_jtag_uart_ioctl+0x7c>
   55b64:	e0bffc17 	ldw	r2,-16(fp)
   55b68:	00000206 	br	55b74 <altera_avalon_jtag_uart_ioctl+0x84>
   55b6c:	00a00034 	movhi	r2,32768
   55b70:	10bfff84 	addi	r2,r2,-2
   55b74:	e0fffd17 	ldw	r3,-12(fp)
   55b78:	18800115 	stw	r2,4(r3)
      rc = 0;
   55b7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   55b80:	00001106 	br	55bc8 <altera_avalon_jtag_uart_ioctl+0xd8>
   55b84:	00001006 	br	55bc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   55b88:	e0bffd17 	ldw	r2,-12(fp)
   55b8c:	10c00117 	ldw	r3,4(r2)
   55b90:	00a00034 	movhi	r2,32768
   55b94:	10bfffc4 	addi	r2,r2,-1
   55b98:	18800a26 	beq	r3,r2,55bc4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   55b9c:	e0bffd17 	ldw	r2,-12(fp)
   55ba0:	10c00917 	ldw	r3,36(r2)
   55ba4:	e0bffd17 	ldw	r2,-12(fp)
   55ba8:	10800117 	ldw	r2,4(r2)
   55bac:	1885803a 	cmpltu	r2,r3,r2
   55bb0:	10c03fcc 	andi	r3,r2,255
   55bb4:	e0bfff17 	ldw	r2,-4(fp)
   55bb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   55bbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   55bc0:	00000006 	br	55bc4 <altera_avalon_jtag_uart_ioctl+0xd4>
   55bc4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   55bc8:	e0bffb17 	ldw	r2,-20(fp)
}
   55bcc:	e037883a 	mov	sp,fp
   55bd0:	df000017 	ldw	fp,0(sp)
   55bd4:	dec00104 	addi	sp,sp,4
   55bd8:	f800283a 	ret

00055bdc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   55bdc:	defff304 	addi	sp,sp,-52
   55be0:	dfc00c15 	stw	ra,48(sp)
   55be4:	df000b15 	stw	fp,44(sp)
   55be8:	df000b04 	addi	fp,sp,44
   55bec:	e13ffc15 	stw	r4,-16(fp)
   55bf0:	e17ffd15 	stw	r5,-12(fp)
   55bf4:	e1bffe15 	stw	r6,-8(fp)
   55bf8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   55bfc:	e0bffd17 	ldw	r2,-12(fp)
   55c00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   55c04:	00004906 	br	55d2c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   55c08:	e0bffc17 	ldw	r2,-16(fp)
   55c0c:	10800a17 	ldw	r2,40(r2)
   55c10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   55c14:	e0bffc17 	ldw	r2,-16(fp)
   55c18:	10800b17 	ldw	r2,44(r2)
   55c1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   55c20:	e0fff717 	ldw	r3,-36(fp)
   55c24:	e0bff817 	ldw	r2,-32(fp)
   55c28:	18800536 	bltu	r3,r2,55c40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   55c2c:	e0fff717 	ldw	r3,-36(fp)
   55c30:	e0bff817 	ldw	r2,-32(fp)
   55c34:	1885c83a 	sub	r2,r3,r2
   55c38:	e0bff615 	stw	r2,-40(fp)
   55c3c:	00000406 	br	55c50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   55c40:	00c20004 	movi	r3,2048
   55c44:	e0bff817 	ldw	r2,-32(fp)
   55c48:	1885c83a 	sub	r2,r3,r2
   55c4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   55c50:	e0bff617 	ldw	r2,-40(fp)
   55c54:	1000011e 	bne	r2,zero,55c5c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   55c58:	00001d06 	br	55cd0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   55c5c:	e0fffe17 	ldw	r3,-8(fp)
   55c60:	e0bff617 	ldw	r2,-40(fp)
   55c64:	1880022e 	bgeu	r3,r2,55c70 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   55c68:	e0bffe17 	ldw	r2,-8(fp)
   55c6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   55c70:	e0bff817 	ldw	r2,-32(fp)
   55c74:	10800e04 	addi	r2,r2,56
   55c78:	e0fffc17 	ldw	r3,-16(fp)
   55c7c:	1885883a 	add	r2,r3,r2
   55c80:	e13ff517 	ldw	r4,-44(fp)
   55c84:	100b883a 	mov	r5,r2
   55c88:	e1bff617 	ldw	r6,-40(fp)
   55c8c:	0048d300 	call	48d30 <memcpy>
      ptr   += n;
   55c90:	e0fff517 	ldw	r3,-44(fp)
   55c94:	e0bff617 	ldw	r2,-40(fp)
   55c98:	1885883a 	add	r2,r3,r2
   55c9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   55ca0:	e0fffe17 	ldw	r3,-8(fp)
   55ca4:	e0bff617 	ldw	r2,-40(fp)
   55ca8:	1885c83a 	sub	r2,r3,r2
   55cac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55cb0:	e0fff817 	ldw	r3,-32(fp)
   55cb4:	e0bff617 	ldw	r2,-40(fp)
   55cb8:	1885883a 	add	r2,r3,r2
   55cbc:	10c1ffcc 	andi	r3,r2,2047
   55cc0:	e0bffc17 	ldw	r2,-16(fp)
   55cc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   55cc8:	e0bffe17 	ldw	r2,-8(fp)
   55ccc:	00bfce16 	blt	zero,r2,55c08 <__alt_data_end+0xfffeeb08>

    /* If we read any data then return it */
    if (ptr != buffer)
   55cd0:	e0fff517 	ldw	r3,-44(fp)
   55cd4:	e0bffd17 	ldw	r2,-12(fp)
   55cd8:	18800126 	beq	r3,r2,55ce0 <altera_avalon_jtag_uart_read+0x104>
      break;
   55cdc:	00001506 	br	55d34 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   55ce0:	e0bfff17 	ldw	r2,-4(fp)
   55ce4:	1090000c 	andi	r2,r2,16384
   55ce8:	10000126 	beq	r2,zero,55cf0 <altera_avalon_jtag_uart_read+0x114>
      break;
   55cec:	00001106 	br	55d34 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   55cf0:	0001883a 	nop
   55cf4:	e0bffc17 	ldw	r2,-16(fp)
   55cf8:	10c00a17 	ldw	r3,40(r2)
   55cfc:	e0bff717 	ldw	r2,-36(fp)
   55d00:	1880051e 	bne	r3,r2,55d18 <altera_avalon_jtag_uart_read+0x13c>
   55d04:	e0bffc17 	ldw	r2,-16(fp)
   55d08:	10c00917 	ldw	r3,36(r2)
   55d0c:	e0bffc17 	ldw	r2,-16(fp)
   55d10:	10800117 	ldw	r2,4(r2)
   55d14:	18bff736 	bltu	r3,r2,55cf4 <__alt_data_end+0xfffeebf4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   55d18:	e0bffc17 	ldw	r2,-16(fp)
   55d1c:	10c00a17 	ldw	r3,40(r2)
   55d20:	e0bff717 	ldw	r2,-36(fp)
   55d24:	1880011e 	bne	r3,r2,55d2c <altera_avalon_jtag_uart_read+0x150>
      break;
   55d28:	00000206 	br	55d34 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   55d2c:	e0bffe17 	ldw	r2,-8(fp)
   55d30:	00bfb516 	blt	zero,r2,55c08 <__alt_data_end+0xfffeeb08>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   55d34:	e0fff517 	ldw	r3,-44(fp)
   55d38:	e0bffd17 	ldw	r2,-12(fp)
   55d3c:	18801826 	beq	r3,r2,55da0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55d40:	0005303a 	rdctl	r2,status
   55d44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55d48:	e0fffa17 	ldw	r3,-24(fp)
   55d4c:	00bfff84 	movi	r2,-2
   55d50:	1884703a 	and	r2,r3,r2
   55d54:	1001703a 	wrctl	status,r2
  
  return context;
   55d58:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   55d5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   55d60:	e0bffc17 	ldw	r2,-16(fp)
   55d64:	10800817 	ldw	r2,32(r2)
   55d68:	10c00054 	ori	r3,r2,1
   55d6c:	e0bffc17 	ldw	r2,-16(fp)
   55d70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   55d74:	e0bffc17 	ldw	r2,-16(fp)
   55d78:	10800017 	ldw	r2,0(r2)
   55d7c:	10800104 	addi	r2,r2,4
   55d80:	1007883a 	mov	r3,r2
   55d84:	e0bffc17 	ldw	r2,-16(fp)
   55d88:	10800817 	ldw	r2,32(r2)
   55d8c:	18800035 	stwio	r2,0(r3)
   55d90:	e0bff917 	ldw	r2,-28(fp)
   55d94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55d98:	e0bffb17 	ldw	r2,-20(fp)
   55d9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   55da0:	e0fff517 	ldw	r3,-44(fp)
   55da4:	e0bffd17 	ldw	r2,-12(fp)
   55da8:	18800426 	beq	r3,r2,55dbc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   55dac:	e0fff517 	ldw	r3,-44(fp)
   55db0:	e0bffd17 	ldw	r2,-12(fp)
   55db4:	1885c83a 	sub	r2,r3,r2
   55db8:	00000606 	br	55dd4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   55dbc:	e0bfff17 	ldw	r2,-4(fp)
   55dc0:	1090000c 	andi	r2,r2,16384
   55dc4:	10000226 	beq	r2,zero,55dd0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   55dc8:	00bffd44 	movi	r2,-11
   55dcc:	00000106 	br	55dd4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   55dd0:	00bffec4 	movi	r2,-5
}
   55dd4:	e037883a 	mov	sp,fp
   55dd8:	dfc00117 	ldw	ra,4(sp)
   55ddc:	df000017 	ldw	fp,0(sp)
   55de0:	dec00204 	addi	sp,sp,8
   55de4:	f800283a 	ret

00055de8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   55de8:	defff304 	addi	sp,sp,-52
   55dec:	dfc00c15 	stw	ra,48(sp)
   55df0:	df000b15 	stw	fp,44(sp)
   55df4:	df000b04 	addi	fp,sp,44
   55df8:	e13ffc15 	stw	r4,-16(fp)
   55dfc:	e17ffd15 	stw	r5,-12(fp)
   55e00:	e1bffe15 	stw	r6,-8(fp)
   55e04:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   55e08:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   55e0c:	e0bffd17 	ldw	r2,-12(fp)
   55e10:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   55e14:	00003806 	br	55ef8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   55e18:	e0bffc17 	ldw	r2,-16(fp)
   55e1c:	10800c17 	ldw	r2,48(r2)
   55e20:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   55e24:	e0bffc17 	ldw	r2,-16(fp)
   55e28:	10800d17 	ldw	r2,52(r2)
   55e2c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   55e30:	e0fff817 	ldw	r3,-32(fp)
   55e34:	e0bff517 	ldw	r2,-44(fp)
   55e38:	1880062e 	bgeu	r3,r2,55e54 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   55e3c:	e0fff517 	ldw	r3,-44(fp)
   55e40:	e0bff817 	ldw	r2,-32(fp)
   55e44:	1885c83a 	sub	r2,r3,r2
   55e48:	10bfffc4 	addi	r2,r2,-1
   55e4c:	e0bff615 	stw	r2,-40(fp)
   55e50:	00000b06 	br	55e80 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   55e54:	e0bff517 	ldw	r2,-44(fp)
   55e58:	10000526 	beq	r2,zero,55e70 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   55e5c:	00c20004 	movi	r3,2048
   55e60:	e0bff817 	ldw	r2,-32(fp)
   55e64:	1885c83a 	sub	r2,r3,r2
   55e68:	e0bff615 	stw	r2,-40(fp)
   55e6c:	00000406 	br	55e80 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   55e70:	00c1ffc4 	movi	r3,2047
   55e74:	e0bff817 	ldw	r2,-32(fp)
   55e78:	1885c83a 	sub	r2,r3,r2
   55e7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   55e80:	e0bff617 	ldw	r2,-40(fp)
   55e84:	1000011e 	bne	r2,zero,55e8c <altera_avalon_jtag_uart_write+0xa4>
        break;
   55e88:	00001d06 	br	55f00 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   55e8c:	e0fffe17 	ldw	r3,-8(fp)
   55e90:	e0bff617 	ldw	r2,-40(fp)
   55e94:	1880022e 	bgeu	r3,r2,55ea0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   55e98:	e0bffe17 	ldw	r2,-8(fp)
   55e9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   55ea0:	e0bff817 	ldw	r2,-32(fp)
   55ea4:	10820e04 	addi	r2,r2,2104
   55ea8:	e0fffc17 	ldw	r3,-16(fp)
   55eac:	1885883a 	add	r2,r3,r2
   55eb0:	1009883a 	mov	r4,r2
   55eb4:	e17ffd17 	ldw	r5,-12(fp)
   55eb8:	e1bff617 	ldw	r6,-40(fp)
   55ebc:	0048d300 	call	48d30 <memcpy>
      ptr   += n;
   55ec0:	e0fffd17 	ldw	r3,-12(fp)
   55ec4:	e0bff617 	ldw	r2,-40(fp)
   55ec8:	1885883a 	add	r2,r3,r2
   55ecc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   55ed0:	e0fffe17 	ldw	r3,-8(fp)
   55ed4:	e0bff617 	ldw	r2,-40(fp)
   55ed8:	1885c83a 	sub	r2,r3,r2
   55edc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   55ee0:	e0fff817 	ldw	r3,-32(fp)
   55ee4:	e0bff617 	ldw	r2,-40(fp)
   55ee8:	1885883a 	add	r2,r3,r2
   55eec:	10c1ffcc 	andi	r3,r2,2047
   55ef0:	e0bffc17 	ldw	r2,-16(fp)
   55ef4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   55ef8:	e0bffe17 	ldw	r2,-8(fp)
   55efc:	00bfc616 	blt	zero,r2,55e18 <__alt_data_end+0xfffeed18>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55f00:	0005303a 	rdctl	r2,status
   55f04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55f08:	e0fffa17 	ldw	r3,-24(fp)
   55f0c:	00bfff84 	movi	r2,-2
   55f10:	1884703a 	and	r2,r3,r2
   55f14:	1001703a 	wrctl	status,r2
  
  return context;
   55f18:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   55f1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   55f20:	e0bffc17 	ldw	r2,-16(fp)
   55f24:	10800817 	ldw	r2,32(r2)
   55f28:	10c00094 	ori	r3,r2,2
   55f2c:	e0bffc17 	ldw	r2,-16(fp)
   55f30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   55f34:	e0bffc17 	ldw	r2,-16(fp)
   55f38:	10800017 	ldw	r2,0(r2)
   55f3c:	10800104 	addi	r2,r2,4
   55f40:	1007883a 	mov	r3,r2
   55f44:	e0bffc17 	ldw	r2,-16(fp)
   55f48:	10800817 	ldw	r2,32(r2)
   55f4c:	18800035 	stwio	r2,0(r3)
   55f50:	e0bff917 	ldw	r2,-28(fp)
   55f54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55f58:	e0bffb17 	ldw	r2,-20(fp)
   55f5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   55f60:	e0bffe17 	ldw	r2,-8(fp)
   55f64:	0080120e 	bge	zero,r2,55fb0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   55f68:	e0bfff17 	ldw	r2,-4(fp)
   55f6c:	1090000c 	andi	r2,r2,16384
   55f70:	10000126 	beq	r2,zero,55f78 <altera_avalon_jtag_uart_write+0x190>
        break;
   55f74:	00001006 	br	55fb8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   55f78:	0001883a 	nop
   55f7c:	e0bffc17 	ldw	r2,-16(fp)
   55f80:	10c00d17 	ldw	r3,52(r2)
   55f84:	e0bff517 	ldw	r2,-44(fp)
   55f88:	1880051e 	bne	r3,r2,55fa0 <altera_avalon_jtag_uart_write+0x1b8>
   55f8c:	e0bffc17 	ldw	r2,-16(fp)
   55f90:	10c00917 	ldw	r3,36(r2)
   55f94:	e0bffc17 	ldw	r2,-16(fp)
   55f98:	10800117 	ldw	r2,4(r2)
   55f9c:	18bff736 	bltu	r3,r2,55f7c <__alt_data_end+0xfffeee7c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   55fa0:	e0bffc17 	ldw	r2,-16(fp)
   55fa4:	10800917 	ldw	r2,36(r2)
   55fa8:	10000126 	beq	r2,zero,55fb0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   55fac:	00000206 	br	55fb8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   55fb0:	e0bffe17 	ldw	r2,-8(fp)
   55fb4:	00bf9716 	blt	zero,r2,55e14 <__alt_data_end+0xfffeed14>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   55fb8:	e0fffd17 	ldw	r3,-12(fp)
   55fbc:	e0bff717 	ldw	r2,-36(fp)
   55fc0:	18800426 	beq	r3,r2,55fd4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   55fc4:	e0fffd17 	ldw	r3,-12(fp)
   55fc8:	e0bff717 	ldw	r2,-36(fp)
   55fcc:	1885c83a 	sub	r2,r3,r2
   55fd0:	00000606 	br	55fec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   55fd4:	e0bfff17 	ldw	r2,-4(fp)
   55fd8:	1090000c 	andi	r2,r2,16384
   55fdc:	10000226 	beq	r2,zero,55fe8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   55fe0:	00bffd44 	movi	r2,-11
   55fe4:	00000106 	br	55fec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   55fe8:	00bffec4 	movi	r2,-5
}
   55fec:	e037883a 	mov	sp,fp
   55ff0:	dfc00117 	ldw	ra,4(sp)
   55ff4:	df000017 	ldw	fp,0(sp)
   55ff8:	dec00204 	addi	sp,sp,8
   55ffc:	f800283a 	ret

00056000 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   56000:	defffa04 	addi	sp,sp,-24
   56004:	dfc00515 	stw	ra,20(sp)
   56008:	df000415 	stw	fp,16(sp)
   5600c:	df000404 	addi	fp,sp,16
   56010:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   56014:	0007883a 	mov	r3,zero
   56018:	e0bfff17 	ldw	r2,-4(fp)
   5601c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   56020:	e0bfff17 	ldw	r2,-4(fp)
   56024:	10800104 	addi	r2,r2,4
   56028:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5602c:	0005303a 	rdctl	r2,status
   56030:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56034:	e0fffd17 	ldw	r3,-12(fp)
   56038:	00bfff84 	movi	r2,-2
   5603c:	1884703a 	and	r2,r3,r2
   56040:	1001703a 	wrctl	status,r2
  
  return context;
   56044:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   56048:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   5604c:	0056a940 	call	56a94 <alt_tick>
   56050:	e0bffc17 	ldw	r2,-16(fp)
   56054:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56058:	e0bffe17 	ldw	r2,-8(fp)
   5605c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   56060:	e037883a 	mov	sp,fp
   56064:	dfc00117 	ldw	ra,4(sp)
   56068:	df000017 	ldw	fp,0(sp)
   5606c:	dec00204 	addi	sp,sp,8
   56070:	f800283a 	ret

00056074 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   56074:	defff804 	addi	sp,sp,-32
   56078:	dfc00715 	stw	ra,28(sp)
   5607c:	df000615 	stw	fp,24(sp)
   56080:	df000604 	addi	fp,sp,24
   56084:	e13ffc15 	stw	r4,-16(fp)
   56088:	e17ffd15 	stw	r5,-12(fp)
   5608c:	e1bffe15 	stw	r6,-8(fp)
   56090:	e1ffff15 	stw	r7,-4(fp)
   56094:	e0bfff17 	ldw	r2,-4(fp)
   56098:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   5609c:	008001b4 	movhi	r2,6
   560a0:	10ba2704 	addi	r2,r2,-5988
   560a4:	10800017 	ldw	r2,0(r2)
   560a8:	1000041e 	bne	r2,zero,560bc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   560ac:	008001b4 	movhi	r2,6
   560b0:	10ba2704 	addi	r2,r2,-5988
   560b4:	e0fffb17 	ldw	r3,-20(fp)
   560b8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   560bc:	e0bffc17 	ldw	r2,-16(fp)
   560c0:	10800104 	addi	r2,r2,4
   560c4:	00c001c4 	movi	r3,7
   560c8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   560cc:	d8000015 	stw	zero,0(sp)
   560d0:	e13ffd17 	ldw	r4,-12(fp)
   560d4:	e17ffe17 	ldw	r5,-8(fp)
   560d8:	01800174 	movhi	r6,5
   560dc:	31980004 	addi	r6,r6,24576
   560e0:	e1fffc17 	ldw	r7,-16(fp)
   560e4:	0054a900 	call	54a90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   560e8:	e037883a 	mov	sp,fp
   560ec:	dfc00117 	ldw	ra,4(sp)
   560f0:	df000017 	ldw	fp,0(sp)
   560f4:	dec00204 	addi	sp,sp,8
   560f8:	f800283a 	ret

000560fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   560fc:	defff504 	addi	sp,sp,-44
   56100:	df000a15 	stw	fp,40(sp)
   56104:	df000a04 	addi	fp,sp,40
   56108:	e13ffc15 	stw	r4,-16(fp)
   5610c:	e17ffd15 	stw	r5,-12(fp)
   56110:	e1bffe15 	stw	r6,-8(fp)
   56114:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   56118:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5611c:	008001b4 	movhi	r2,6
   56120:	10ba2704 	addi	r2,r2,-5988
   56124:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   56128:	10003f26 	beq	r2,zero,56228 <alt_alarm_start+0x12c>
  {
    if (alarm)
   5612c:	e0bffc17 	ldw	r2,-16(fp)
   56130:	10003b26 	beq	r2,zero,56220 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   56134:	e0bffc17 	ldw	r2,-16(fp)
   56138:	e0fffe17 	ldw	r3,-8(fp)
   5613c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   56140:	e0bffc17 	ldw	r2,-16(fp)
   56144:	e0ffff17 	ldw	r3,-4(fp)
   56148:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5614c:	0005303a 	rdctl	r2,status
   56150:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56154:	e0fff817 	ldw	r3,-32(fp)
   56158:	00bfff84 	movi	r2,-2
   5615c:	1884703a 	and	r2,r3,r2
   56160:	1001703a 	wrctl	status,r2
  
  return context;
   56164:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   56168:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5616c:	008001b4 	movhi	r2,6
   56170:	10ba2804 	addi	r2,r2,-5984
   56174:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   56178:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5617c:	e0fffd17 	ldw	r3,-12(fp)
   56180:	e0bff617 	ldw	r2,-40(fp)
   56184:	1885883a 	add	r2,r3,r2
   56188:	10c00044 	addi	r3,r2,1
   5618c:	e0bffc17 	ldw	r2,-16(fp)
   56190:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   56194:	e0bffc17 	ldw	r2,-16(fp)
   56198:	10c00217 	ldw	r3,8(r2)
   5619c:	e0bff617 	ldw	r2,-40(fp)
   561a0:	1880042e 	bgeu	r3,r2,561b4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   561a4:	e0bffc17 	ldw	r2,-16(fp)
   561a8:	00c00044 	movi	r3,1
   561ac:	10c00405 	stb	r3,16(r2)
   561b0:	00000206 	br	561bc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   561b4:	e0bffc17 	ldw	r2,-16(fp)
   561b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   561bc:	e0fffc17 	ldw	r3,-16(fp)
   561c0:	008001b4 	movhi	r2,6
   561c4:	10b33e04 	addi	r2,r2,-13064
   561c8:	e0bff915 	stw	r2,-28(fp)
   561cc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   561d0:	e0bffa17 	ldw	r2,-24(fp)
   561d4:	e0fff917 	ldw	r3,-28(fp)
   561d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   561dc:	e0bff917 	ldw	r2,-28(fp)
   561e0:	10c00017 	ldw	r3,0(r2)
   561e4:	e0bffa17 	ldw	r2,-24(fp)
   561e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   561ec:	e0bff917 	ldw	r2,-28(fp)
   561f0:	10800017 	ldw	r2,0(r2)
   561f4:	e0fffa17 	ldw	r3,-24(fp)
   561f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   561fc:	e0bff917 	ldw	r2,-28(fp)
   56200:	e0fffa17 	ldw	r3,-24(fp)
   56204:	10c00015 	stw	r3,0(r2)
   56208:	e0bff717 	ldw	r2,-36(fp)
   5620c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56210:	e0bffb17 	ldw	r2,-20(fp)
   56214:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   56218:	0005883a 	mov	r2,zero
   5621c:	00000306 	br	5622c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   56220:	00bffa84 	movi	r2,-22
   56224:	00000106 	br	5622c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   56228:	00bfde84 	movi	r2,-134
  }
}
   5622c:	e037883a 	mov	sp,fp
   56230:	df000017 	ldw	fp,0(sp)
   56234:	dec00104 	addi	sp,sp,4
   56238:	f800283a 	ret

0005623c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   5623c:	defffa04 	addi	sp,sp,-24
   56240:	dfc00515 	stw	ra,20(sp)
   56244:	df000415 	stw	fp,16(sp)
   56248:	df000404 	addi	fp,sp,16
   5624c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   56250:	008000c4 	movi	r2,3
   56254:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   56258:	e0fffd17 	ldw	r3,-12(fp)
   5625c:	008003f4 	movhi	r2,15
   56260:	10909004 	addi	r2,r2,16960
   56264:	1885383a 	mul	r2,r3,r2
   56268:	0100bef4 	movhi	r4,763
   5626c:	213c2004 	addi	r4,r4,-3968
   56270:	100b883a 	mov	r5,r2
   56274:	0046db40 	call	46db4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   56278:	01200034 	movhi	r4,32768
   5627c:	213fffc4 	addi	r4,r4,-1
   56280:	100b883a 	mov	r5,r2
   56284:	0046db40 	call	46db4 <__udivsi3>
   56288:	e13fff17 	ldw	r4,-4(fp)
   5628c:	100b883a 	mov	r5,r2
   56290:	0046db40 	call	46db4 <__udivsi3>
   56294:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   56298:	e0bffe17 	ldw	r2,-8(fp)
   5629c:	10002a26 	beq	r2,zero,56348 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   562a0:	e03ffc15 	stw	zero,-16(fp)
   562a4:	00001706 	br	56304 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   562a8:	00a00034 	movhi	r2,32768
   562ac:	10bfffc4 	addi	r2,r2,-1
   562b0:	10bfffc4 	addi	r2,r2,-1
   562b4:	103ffe1e 	bne	r2,zero,562b0 <__alt_data_end+0xfffef1b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   562b8:	e0fffd17 	ldw	r3,-12(fp)
   562bc:	008003f4 	movhi	r2,15
   562c0:	10909004 	addi	r2,r2,16960
   562c4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   562c8:	0100bef4 	movhi	r4,763
   562cc:	213c2004 	addi	r4,r4,-3968
   562d0:	100b883a 	mov	r5,r2
   562d4:	0046db40 	call	46db4 <__udivsi3>
   562d8:	01200034 	movhi	r4,32768
   562dc:	213fffc4 	addi	r4,r4,-1
   562e0:	100b883a 	mov	r5,r2
   562e4:	0046db40 	call	46db4 <__udivsi3>
   562e8:	1007883a 	mov	r3,r2
   562ec:	e0bfff17 	ldw	r2,-4(fp)
   562f0:	10c5c83a 	sub	r2,r2,r3
   562f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   562f8:	e0bffc17 	ldw	r2,-16(fp)
   562fc:	10800044 	addi	r2,r2,1
   56300:	e0bffc15 	stw	r2,-16(fp)
   56304:	e0fffc17 	ldw	r3,-16(fp)
   56308:	e0bffe17 	ldw	r2,-8(fp)
   5630c:	18bfe616 	blt	r3,r2,562a8 <__alt_data_end+0xfffef1a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   56310:	e0fffd17 	ldw	r3,-12(fp)
   56314:	008003f4 	movhi	r2,15
   56318:	10909004 	addi	r2,r2,16960
   5631c:	1885383a 	mul	r2,r3,r2
   56320:	0100bef4 	movhi	r4,763
   56324:	213c2004 	addi	r4,r4,-3968
   56328:	100b883a 	mov	r5,r2
   5632c:	0046db40 	call	46db4 <__udivsi3>
   56330:	1007883a 	mov	r3,r2
   56334:	e0bfff17 	ldw	r2,-4(fp)
   56338:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   5633c:	10bfffc4 	addi	r2,r2,-1
   56340:	103ffe1e 	bne	r2,zero,5633c <__alt_data_end+0xfffef23c>
   56344:	00000d06 	br	5637c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   56348:	e0fffd17 	ldw	r3,-12(fp)
   5634c:	008003f4 	movhi	r2,15
   56350:	10909004 	addi	r2,r2,16960
   56354:	1885383a 	mul	r2,r3,r2
   56358:	0100bef4 	movhi	r4,763
   5635c:	213c2004 	addi	r4,r4,-3968
   56360:	100b883a 	mov	r5,r2
   56364:	0046db40 	call	46db4 <__udivsi3>
   56368:	1007883a 	mov	r3,r2
   5636c:	e0bfff17 	ldw	r2,-4(fp)
   56370:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   56374:	10bfffc4 	addi	r2,r2,-1
   56378:	00bffe16 	blt	zero,r2,56374 <__alt_data_end+0xfffef274>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   5637c:	0005883a 	mov	r2,zero
}
   56380:	e037883a 	mov	sp,fp
   56384:	dfc00117 	ldw	ra,4(sp)
   56388:	df000017 	ldw	fp,0(sp)
   5638c:	dec00204 	addi	sp,sp,8
   56390:	f800283a 	ret

00056394 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   56394:	defffe04 	addi	sp,sp,-8
   56398:	df000115 	stw	fp,4(sp)
   5639c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   563a0:	e03fff15 	stw	zero,-4(fp)
   563a4:	00000506 	br	563bc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   563a8:	e0bfff17 	ldw	r2,-4(fp)
   563ac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   563b0:	e0bfff17 	ldw	r2,-4(fp)
   563b4:	10800804 	addi	r2,r2,32
   563b8:	e0bfff15 	stw	r2,-4(fp)
   563bc:	e0bfff17 	ldw	r2,-4(fp)
   563c0:	10820030 	cmpltui	r2,r2,2048
   563c4:	103ff81e 	bne	r2,zero,563a8 <__alt_data_end+0xfffef2a8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   563c8:	e037883a 	mov	sp,fp
   563cc:	df000017 	ldw	fp,0(sp)
   563d0:	dec00104 	addi	sp,sp,4
   563d4:	f800283a 	ret

000563d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   563d8:	defffe04 	addi	sp,sp,-8
   563dc:	dfc00115 	stw	ra,4(sp)
   563e0:	df000015 	stw	fp,0(sp)
   563e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   563e8:	008001b4 	movhi	r2,6
   563ec:	10b33b04 	addi	r2,r2,-13076
   563f0:	10800017 	ldw	r2,0(r2)
   563f4:	10000526 	beq	r2,zero,5640c <alt_get_errno+0x34>
   563f8:	008001b4 	movhi	r2,6
   563fc:	10b33b04 	addi	r2,r2,-13076
   56400:	10800017 	ldw	r2,0(r2)
   56404:	103ee83a 	callr	r2
   56408:	00000206 	br	56414 <alt_get_errno+0x3c>
   5640c:	008001b4 	movhi	r2,6
   56410:	10ba1e04 	addi	r2,r2,-6024
}
   56414:	e037883a 	mov	sp,fp
   56418:	dfc00117 	ldw	ra,4(sp)
   5641c:	df000017 	ldw	fp,0(sp)
   56420:	dec00204 	addi	sp,sp,8
   56424:	f800283a 	ret

00056428 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   56428:	defffa04 	addi	sp,sp,-24
   5642c:	dfc00515 	stw	ra,20(sp)
   56430:	df000415 	stw	fp,16(sp)
   56434:	df000404 	addi	fp,sp,16
   56438:	e13ffe15 	stw	r4,-8(fp)
   5643c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   56440:	e0bffe17 	ldw	r2,-8(fp)
   56444:	10000326 	beq	r2,zero,56454 <alt_dev_llist_insert+0x2c>
   56448:	e0bffe17 	ldw	r2,-8(fp)
   5644c:	10800217 	ldw	r2,8(r2)
   56450:	1000061e 	bne	r2,zero,5646c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   56454:	00563d80 	call	563d8 <alt_get_errno>
   56458:	1007883a 	mov	r3,r2
   5645c:	00800584 	movi	r2,22
   56460:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   56464:	00bffa84 	movi	r2,-22
   56468:	00001306 	br	564b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   5646c:	e0bffe17 	ldw	r2,-8(fp)
   56470:	e0ffff17 	ldw	r3,-4(fp)
   56474:	e0fffc15 	stw	r3,-16(fp)
   56478:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5647c:	e0bffd17 	ldw	r2,-12(fp)
   56480:	e0fffc17 	ldw	r3,-16(fp)
   56484:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   56488:	e0bffc17 	ldw	r2,-16(fp)
   5648c:	10c00017 	ldw	r3,0(r2)
   56490:	e0bffd17 	ldw	r2,-12(fp)
   56494:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   56498:	e0bffc17 	ldw	r2,-16(fp)
   5649c:	10800017 	ldw	r2,0(r2)
   564a0:	e0fffd17 	ldw	r3,-12(fp)
   564a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   564a8:	e0bffc17 	ldw	r2,-16(fp)
   564ac:	e0fffd17 	ldw	r3,-12(fp)
   564b0:	10c00015 	stw	r3,0(r2)

  return 0;  
   564b4:	0005883a 	mov	r2,zero
}
   564b8:	e037883a 	mov	sp,fp
   564bc:	dfc00117 	ldw	ra,4(sp)
   564c0:	df000017 	ldw	fp,0(sp)
   564c4:	dec00204 	addi	sp,sp,8
   564c8:	f800283a 	ret

000564cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   564cc:	defffd04 	addi	sp,sp,-12
   564d0:	dfc00215 	stw	ra,8(sp)
   564d4:	df000115 	stw	fp,4(sp)
   564d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   564dc:	00800174 	movhi	r2,5
   564e0:	109c7004 	addi	r2,r2,29120
   564e4:	e0bfff15 	stw	r2,-4(fp)
   564e8:	00000606 	br	56504 <_do_ctors+0x38>
        (*ctor) (); 
   564ec:	e0bfff17 	ldw	r2,-4(fp)
   564f0:	10800017 	ldw	r2,0(r2)
   564f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   564f8:	e0bfff17 	ldw	r2,-4(fp)
   564fc:	10bfff04 	addi	r2,r2,-4
   56500:	e0bfff15 	stw	r2,-4(fp)
   56504:	e0ffff17 	ldw	r3,-4(fp)
   56508:	00800174 	movhi	r2,5
   5650c:	109c7104 	addi	r2,r2,29124
   56510:	18bff62e 	bgeu	r3,r2,564ec <__alt_data_end+0xfffef3ec>
        (*ctor) (); 
}
   56514:	e037883a 	mov	sp,fp
   56518:	dfc00117 	ldw	ra,4(sp)
   5651c:	df000017 	ldw	fp,0(sp)
   56520:	dec00204 	addi	sp,sp,8
   56524:	f800283a 	ret

00056528 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   56528:	defffd04 	addi	sp,sp,-12
   5652c:	dfc00215 	stw	ra,8(sp)
   56530:	df000115 	stw	fp,4(sp)
   56534:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   56538:	00800174 	movhi	r2,5
   5653c:	109c7004 	addi	r2,r2,29120
   56540:	e0bfff15 	stw	r2,-4(fp)
   56544:	00000606 	br	56560 <_do_dtors+0x38>
        (*dtor) (); 
   56548:	e0bfff17 	ldw	r2,-4(fp)
   5654c:	10800017 	ldw	r2,0(r2)
   56550:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   56554:	e0bfff17 	ldw	r2,-4(fp)
   56558:	10bfff04 	addi	r2,r2,-4
   5655c:	e0bfff15 	stw	r2,-4(fp)
   56560:	e0ffff17 	ldw	r3,-4(fp)
   56564:	00800174 	movhi	r2,5
   56568:	109c7104 	addi	r2,r2,29124
   5656c:	18bff62e 	bgeu	r3,r2,56548 <__alt_data_end+0xfffef448>
        (*dtor) (); 
}
   56570:	e037883a 	mov	sp,fp
   56574:	dfc00117 	ldw	ra,4(sp)
   56578:	df000017 	ldw	fp,0(sp)
   5657c:	dec00204 	addi	sp,sp,8
   56580:	f800283a 	ret

00056584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   56584:	defffe04 	addi	sp,sp,-8
   56588:	dfc00115 	stw	ra,4(sp)
   5658c:	df000015 	stw	fp,0(sp)
   56590:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   56594:	0009883a 	mov	r4,zero
   56598:	01440004 	movi	r5,4096
   5659c:	0056e100 	call	56e10 <alt_icache_flush>
#endif
}
   565a0:	e037883a 	mov	sp,fp
   565a4:	dfc00117 	ldw	ra,4(sp)
   565a8:	df000017 	ldw	fp,0(sp)
   565ac:	dec00204 	addi	sp,sp,8
   565b0:	f800283a 	ret

000565b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   565b4:	defffe04 	addi	sp,sp,-8
   565b8:	df000115 	stw	fp,4(sp)
   565bc:	df000104 	addi	fp,sp,4
   565c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   565c4:	e0bfff17 	ldw	r2,-4(fp)
   565c8:	10bffe84 	addi	r2,r2,-6
   565cc:	10c00428 	cmpgeui	r3,r2,16
   565d0:	18001a1e 	bne	r3,zero,5663c <alt_exception_cause_generated_bad_addr+0x88>
   565d4:	100690ba 	slli	r3,r2,2
   565d8:	00800174 	movhi	r2,5
   565dc:	10997b04 	addi	r2,r2,26092
   565e0:	1885883a 	add	r2,r3,r2
   565e4:	10800017 	ldw	r2,0(r2)
   565e8:	1000683a 	jmp	r2
   565ec:	0005662c 	andhi	zero,zero,5528
   565f0:	0005662c 	andhi	zero,zero,5528
   565f4:	0005663c 	xorhi	zero,zero,5528
   565f8:	0005663c 	xorhi	zero,zero,5528
   565fc:	0005663c 	xorhi	zero,zero,5528
   56600:	0005662c 	andhi	zero,zero,5528
   56604:	00056634 	movhi	zero,5528
   56608:	0005663c 	xorhi	zero,zero,5528
   5660c:	0005662c 	andhi	zero,zero,5528
   56610:	0005662c 	andhi	zero,zero,5528
   56614:	0005663c 	xorhi	zero,zero,5528
   56618:	0005662c 	andhi	zero,zero,5528
   5661c:	00056634 	movhi	zero,5528
   56620:	0005663c 	xorhi	zero,zero,5528
   56624:	0005663c 	xorhi	zero,zero,5528
   56628:	0005662c 	andhi	zero,zero,5528
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   5662c:	00800044 	movi	r2,1
   56630:	00000306 	br	56640 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   56634:	0005883a 	mov	r2,zero
   56638:	00000106 	br	56640 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   5663c:	0005883a 	mov	r2,zero
  }
}
   56640:	e037883a 	mov	sp,fp
   56644:	df000017 	ldw	fp,0(sp)
   56648:	dec00104 	addi	sp,sp,4
   5664c:	f800283a 	ret

00056650 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   56650:	defff904 	addi	sp,sp,-28
   56654:	dfc00615 	stw	ra,24(sp)
   56658:	df000515 	stw	fp,20(sp)
   5665c:	df000504 	addi	fp,sp,20
   56660:	e13ffc15 	stw	r4,-16(fp)
   56664:	e17ffd15 	stw	r5,-12(fp)
   56668:	e1bffe15 	stw	r6,-8(fp)
   5666c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   56670:	e13ffd17 	ldw	r4,-12(fp)
   56674:	e17ffe17 	ldw	r5,-8(fp)
   56678:	e1bfff17 	ldw	r6,-4(fp)
   5667c:	00568a40 	call	568a4 <open>
   56680:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   56684:	e0bffb17 	ldw	r2,-20(fp)
   56688:	10001c16 	blt	r2,zero,566fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   5668c:	008001b4 	movhi	r2,6
   56690:	10aeb504 	addi	r2,r2,-17708
   56694:	e0fffb17 	ldw	r3,-20(fp)
   56698:	18c00324 	muli	r3,r3,12
   5669c:	10c5883a 	add	r2,r2,r3
   566a0:	10c00017 	ldw	r3,0(r2)
   566a4:	e0bffc17 	ldw	r2,-16(fp)
   566a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   566ac:	008001b4 	movhi	r2,6
   566b0:	10aeb504 	addi	r2,r2,-17708
   566b4:	e0fffb17 	ldw	r3,-20(fp)
   566b8:	18c00324 	muli	r3,r3,12
   566bc:	10c5883a 	add	r2,r2,r3
   566c0:	10800104 	addi	r2,r2,4
   566c4:	10c00017 	ldw	r3,0(r2)
   566c8:	e0bffc17 	ldw	r2,-16(fp)
   566cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   566d0:	008001b4 	movhi	r2,6
   566d4:	10aeb504 	addi	r2,r2,-17708
   566d8:	e0fffb17 	ldw	r3,-20(fp)
   566dc:	18c00324 	muli	r3,r3,12
   566e0:	10c5883a 	add	r2,r2,r3
   566e4:	10800204 	addi	r2,r2,8
   566e8:	10c00017 	ldw	r3,0(r2)
   566ec:	e0bffc17 	ldw	r2,-16(fp)
   566f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   566f4:	e13ffb17 	ldw	r4,-20(fp)
   566f8:	00552600 	call	55260 <alt_release_fd>
  }
} 
   566fc:	e037883a 	mov	sp,fp
   56700:	dfc00117 	ldw	ra,4(sp)
   56704:	df000017 	ldw	fp,0(sp)
   56708:	dec00204 	addi	sp,sp,8
   5670c:	f800283a 	ret

00056710 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   56710:	defffb04 	addi	sp,sp,-20
   56714:	dfc00415 	stw	ra,16(sp)
   56718:	df000315 	stw	fp,12(sp)
   5671c:	df000304 	addi	fp,sp,12
   56720:	e13ffd15 	stw	r4,-12(fp)
   56724:	e17ffe15 	stw	r5,-8(fp)
   56728:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   5672c:	010001b4 	movhi	r4,6
   56730:	212eb804 	addi	r4,r4,-17696
   56734:	e17ffd17 	ldw	r5,-12(fp)
   56738:	01800044 	movi	r6,1
   5673c:	01c07fc4 	movi	r7,511
   56740:	00566500 	call	56650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   56744:	010001b4 	movhi	r4,6
   56748:	212eb504 	addi	r4,r4,-17708
   5674c:	e17ffe17 	ldw	r5,-8(fp)
   56750:	000d883a 	mov	r6,zero
   56754:	01c07fc4 	movi	r7,511
   56758:	00566500 	call	56650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   5675c:	010001b4 	movhi	r4,6
   56760:	212ebb04 	addi	r4,r4,-17684
   56764:	e17fff17 	ldw	r5,-4(fp)
   56768:	01800044 	movi	r6,1
   5676c:	01c07fc4 	movi	r7,511
   56770:	00566500 	call	56650 <alt_open_fd>
}  
   56774:	e037883a 	mov	sp,fp
   56778:	dfc00117 	ldw	ra,4(sp)
   5677c:	df000017 	ldw	fp,0(sp)
   56780:	dec00204 	addi	sp,sp,8
   56784:	f800283a 	ret

00056788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56788:	defffe04 	addi	sp,sp,-8
   5678c:	dfc00115 	stw	ra,4(sp)
   56790:	df000015 	stw	fp,0(sp)
   56794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56798:	008001b4 	movhi	r2,6
   5679c:	10b33b04 	addi	r2,r2,-13076
   567a0:	10800017 	ldw	r2,0(r2)
   567a4:	10000526 	beq	r2,zero,567bc <alt_get_errno+0x34>
   567a8:	008001b4 	movhi	r2,6
   567ac:	10b33b04 	addi	r2,r2,-13076
   567b0:	10800017 	ldw	r2,0(r2)
   567b4:	103ee83a 	callr	r2
   567b8:	00000206 	br	567c4 <alt_get_errno+0x3c>
   567bc:	008001b4 	movhi	r2,6
   567c0:	10ba1e04 	addi	r2,r2,-6024
}
   567c4:	e037883a 	mov	sp,fp
   567c8:	dfc00117 	ldw	ra,4(sp)
   567cc:	df000017 	ldw	fp,0(sp)
   567d0:	dec00204 	addi	sp,sp,8
   567d4:	f800283a 	ret

000567d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   567d8:	defffd04 	addi	sp,sp,-12
   567dc:	df000215 	stw	fp,8(sp)
   567e0:	df000204 	addi	fp,sp,8
   567e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   567e8:	e0bfff17 	ldw	r2,-4(fp)
   567ec:	10800217 	ldw	r2,8(r2)
   567f0:	10d00034 	orhi	r3,r2,16384
   567f4:	e0bfff17 	ldw	r2,-4(fp)
   567f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   567fc:	e03ffe15 	stw	zero,-8(fp)
   56800:	00001d06 	br	56878 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   56804:	008001b4 	movhi	r2,6
   56808:	10aeb504 	addi	r2,r2,-17708
   5680c:	e0fffe17 	ldw	r3,-8(fp)
   56810:	18c00324 	muli	r3,r3,12
   56814:	10c5883a 	add	r2,r2,r3
   56818:	10c00017 	ldw	r3,0(r2)
   5681c:	e0bfff17 	ldw	r2,-4(fp)
   56820:	10800017 	ldw	r2,0(r2)
   56824:	1880111e 	bne	r3,r2,5686c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   56828:	008001b4 	movhi	r2,6
   5682c:	10aeb504 	addi	r2,r2,-17708
   56830:	e0fffe17 	ldw	r3,-8(fp)
   56834:	18c00324 	muli	r3,r3,12
   56838:	10c5883a 	add	r2,r2,r3
   5683c:	10800204 	addi	r2,r2,8
   56840:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   56844:	1000090e 	bge	r2,zero,5686c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   56848:	e0bffe17 	ldw	r2,-8(fp)
   5684c:	10c00324 	muli	r3,r2,12
   56850:	008001b4 	movhi	r2,6
   56854:	10aeb504 	addi	r2,r2,-17708
   56858:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   5685c:	e0bfff17 	ldw	r2,-4(fp)
   56860:	18800226 	beq	r3,r2,5686c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   56864:	00bffcc4 	movi	r2,-13
   56868:	00000a06 	br	56894 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   5686c:	e0bffe17 	ldw	r2,-8(fp)
   56870:	10800044 	addi	r2,r2,1
   56874:	e0bffe15 	stw	r2,-8(fp)
   56878:	008001b4 	movhi	r2,6
   5687c:	10b33a04 	addi	r2,r2,-13080
   56880:	10800017 	ldw	r2,0(r2)
   56884:	1007883a 	mov	r3,r2
   56888:	e0bffe17 	ldw	r2,-8(fp)
   5688c:	18bfdd2e 	bgeu	r3,r2,56804 <__alt_data_end+0xfffef704>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   56890:	0005883a 	mov	r2,zero
}
   56894:	e037883a 	mov	sp,fp
   56898:	df000017 	ldw	fp,0(sp)
   5689c:	dec00104 	addi	sp,sp,4
   568a0:	f800283a 	ret

000568a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   568a4:	defff604 	addi	sp,sp,-40
   568a8:	dfc00915 	stw	ra,36(sp)
   568ac:	df000815 	stw	fp,32(sp)
   568b0:	df000804 	addi	fp,sp,32
   568b4:	e13ffd15 	stw	r4,-12(fp)
   568b8:	e17ffe15 	stw	r5,-8(fp)
   568bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   568c0:	00bfffc4 	movi	r2,-1
   568c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   568c8:	00bffb44 	movi	r2,-19
   568cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   568d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   568d4:	e13ffd17 	ldw	r4,-12(fp)
   568d8:	014001b4 	movhi	r5,6
   568dc:	29733804 	addi	r5,r5,-13088
   568e0:	0056bb80 	call	56bb8 <alt_find_dev>
   568e4:	e0bff815 	stw	r2,-32(fp)
   568e8:	e0bff817 	ldw	r2,-32(fp)
   568ec:	1000051e 	bne	r2,zero,56904 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   568f0:	e13ffd17 	ldw	r4,-12(fp)
   568f4:	0056c480 	call	56c48 <alt_find_file>
   568f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   568fc:	00800044 	movi	r2,1
   56900:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   56904:	e0bff817 	ldw	r2,-32(fp)
   56908:	10002926 	beq	r2,zero,569b0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   5690c:	e13ff817 	ldw	r4,-32(fp)
   56910:	0056d5c0 	call	56d5c <alt_get_fd>
   56914:	e0bff915 	stw	r2,-28(fp)
   56918:	e0bff917 	ldw	r2,-28(fp)
   5691c:	1000030e 	bge	r2,zero,5692c <open+0x88>
    {
      status = index;
   56920:	e0bff917 	ldw	r2,-28(fp)
   56924:	e0bffa15 	stw	r2,-24(fp)
   56928:	00002306 	br	569b8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   5692c:	e0bff917 	ldw	r2,-28(fp)
   56930:	10c00324 	muli	r3,r2,12
   56934:	008001b4 	movhi	r2,6
   56938:	10aeb504 	addi	r2,r2,-17708
   5693c:	1885883a 	add	r2,r3,r2
   56940:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   56944:	e0fffe17 	ldw	r3,-8(fp)
   56948:	00900034 	movhi	r2,16384
   5694c:	10bfffc4 	addi	r2,r2,-1
   56950:	1886703a 	and	r3,r3,r2
   56954:	e0bffc17 	ldw	r2,-16(fp)
   56958:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   5695c:	e0bffb17 	ldw	r2,-20(fp)
   56960:	1000051e 	bne	r2,zero,56978 <open+0xd4>
   56964:	e13ffc17 	ldw	r4,-16(fp)
   56968:	00567d80 	call	567d8 <alt_file_locked>
   5696c:	e0bffa15 	stw	r2,-24(fp)
   56970:	e0bffa17 	ldw	r2,-24(fp)
   56974:	10001016 	blt	r2,zero,569b8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   56978:	e0bff817 	ldw	r2,-32(fp)
   5697c:	10800317 	ldw	r2,12(r2)
   56980:	10000826 	beq	r2,zero,569a4 <open+0x100>
   56984:	e0bff817 	ldw	r2,-32(fp)
   56988:	10800317 	ldw	r2,12(r2)
   5698c:	e13ffc17 	ldw	r4,-16(fp)
   56990:	e17ffd17 	ldw	r5,-12(fp)
   56994:	e1bffe17 	ldw	r6,-8(fp)
   56998:	e1ffff17 	ldw	r7,-4(fp)
   5699c:	103ee83a 	callr	r2
   569a0:	00000106 	br	569a8 <open+0x104>
   569a4:	0005883a 	mov	r2,zero
   569a8:	e0bffa15 	stw	r2,-24(fp)
   569ac:	00000206 	br	569b8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   569b0:	00bffb44 	movi	r2,-19
   569b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   569b8:	e0bffa17 	ldw	r2,-24(fp)
   569bc:	1000090e 	bge	r2,zero,569e4 <open+0x140>
  {
    alt_release_fd (index);  
   569c0:	e13ff917 	ldw	r4,-28(fp)
   569c4:	00552600 	call	55260 <alt_release_fd>
    ALT_ERRNO = -status;
   569c8:	00567880 	call	56788 <alt_get_errno>
   569cc:	1007883a 	mov	r3,r2
   569d0:	e0bffa17 	ldw	r2,-24(fp)
   569d4:	0085c83a 	sub	r2,zero,r2
   569d8:	18800015 	stw	r2,0(r3)
    return -1;
   569dc:	00bfffc4 	movi	r2,-1
   569e0:	00000106 	br	569e8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   569e4:	e0bff917 	ldw	r2,-28(fp)
}
   569e8:	e037883a 	mov	sp,fp
   569ec:	dfc00117 	ldw	ra,4(sp)
   569f0:	df000017 	ldw	fp,0(sp)
   569f4:	dec00204 	addi	sp,sp,8
   569f8:	f800283a 	ret

000569fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   569fc:	defffa04 	addi	sp,sp,-24
   56a00:	df000515 	stw	fp,20(sp)
   56a04:	df000504 	addi	fp,sp,20
   56a08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56a0c:	0005303a 	rdctl	r2,status
   56a10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56a14:	e0fffc17 	ldw	r3,-16(fp)
   56a18:	00bfff84 	movi	r2,-2
   56a1c:	1884703a 	and	r2,r3,r2
   56a20:	1001703a 	wrctl	status,r2
  
  return context;
   56a24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   56a28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   56a2c:	e0bfff17 	ldw	r2,-4(fp)
   56a30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   56a34:	e0bffd17 	ldw	r2,-12(fp)
   56a38:	10800017 	ldw	r2,0(r2)
   56a3c:	e0fffd17 	ldw	r3,-12(fp)
   56a40:	18c00117 	ldw	r3,4(r3)
   56a44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   56a48:	e0bffd17 	ldw	r2,-12(fp)
   56a4c:	10800117 	ldw	r2,4(r2)
   56a50:	e0fffd17 	ldw	r3,-12(fp)
   56a54:	18c00017 	ldw	r3,0(r3)
   56a58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   56a5c:	e0bffd17 	ldw	r2,-12(fp)
   56a60:	e0fffd17 	ldw	r3,-12(fp)
   56a64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   56a68:	e0bffd17 	ldw	r2,-12(fp)
   56a6c:	e0fffd17 	ldw	r3,-12(fp)
   56a70:	10c00015 	stw	r3,0(r2)
   56a74:	e0bffb17 	ldw	r2,-20(fp)
   56a78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56a7c:	e0bffe17 	ldw	r2,-8(fp)
   56a80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   56a84:	e037883a 	mov	sp,fp
   56a88:	df000017 	ldw	fp,0(sp)
   56a8c:	dec00104 	addi	sp,sp,4
   56a90:	f800283a 	ret

00056a94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   56a94:	defffb04 	addi	sp,sp,-20
   56a98:	dfc00415 	stw	ra,16(sp)
   56a9c:	df000315 	stw	fp,12(sp)
   56aa0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   56aa4:	d0a01117 	ldw	r2,-32700(gp)
   56aa8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   56aac:	d0a6fb17 	ldw	r2,-25620(gp)
   56ab0:	10800044 	addi	r2,r2,1
   56ab4:	d0a6fb15 	stw	r2,-25620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   56ab8:	00002e06 	br	56b74 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   56abc:	e0bffd17 	ldw	r2,-12(fp)
   56ac0:	10800017 	ldw	r2,0(r2)
   56ac4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   56ac8:	e0bffd17 	ldw	r2,-12(fp)
   56acc:	10800403 	ldbu	r2,16(r2)
   56ad0:	10803fcc 	andi	r2,r2,255
   56ad4:	10000426 	beq	r2,zero,56ae8 <alt_tick+0x54>
   56ad8:	d0a6fb17 	ldw	r2,-25620(gp)
   56adc:	1000021e 	bne	r2,zero,56ae8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   56ae0:	e0bffd17 	ldw	r2,-12(fp)
   56ae4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   56ae8:	e0bffd17 	ldw	r2,-12(fp)
   56aec:	10800217 	ldw	r2,8(r2)
   56af0:	d0e6fb17 	ldw	r3,-25620(gp)
   56af4:	18801d36 	bltu	r3,r2,56b6c <alt_tick+0xd8>
   56af8:	e0bffd17 	ldw	r2,-12(fp)
   56afc:	10800403 	ldbu	r2,16(r2)
   56b00:	10803fcc 	andi	r2,r2,255
   56b04:	1000191e 	bne	r2,zero,56b6c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   56b08:	e0bffd17 	ldw	r2,-12(fp)
   56b0c:	10800317 	ldw	r2,12(r2)
   56b10:	e0fffd17 	ldw	r3,-12(fp)
   56b14:	18c00517 	ldw	r3,20(r3)
   56b18:	1809883a 	mov	r4,r3
   56b1c:	103ee83a 	callr	r2
   56b20:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   56b24:	e0bfff17 	ldw	r2,-4(fp)
   56b28:	1000031e 	bne	r2,zero,56b38 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   56b2c:	e13ffd17 	ldw	r4,-12(fp)
   56b30:	00569fc0 	call	569fc <alt_alarm_stop>
   56b34:	00000d06 	br	56b6c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   56b38:	e0bffd17 	ldw	r2,-12(fp)
   56b3c:	10c00217 	ldw	r3,8(r2)
   56b40:	e0bfff17 	ldw	r2,-4(fp)
   56b44:	1887883a 	add	r3,r3,r2
   56b48:	e0bffd17 	ldw	r2,-12(fp)
   56b4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   56b50:	e0bffd17 	ldw	r2,-12(fp)
   56b54:	10c00217 	ldw	r3,8(r2)
   56b58:	d0a6fb17 	ldw	r2,-25620(gp)
   56b5c:	1880032e 	bgeu	r3,r2,56b6c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   56b60:	e0bffd17 	ldw	r2,-12(fp)
   56b64:	00c00044 	movi	r3,1
   56b68:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   56b6c:	e0bffe17 	ldw	r2,-8(fp)
   56b70:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   56b74:	e0fffd17 	ldw	r3,-12(fp)
   56b78:	d0a01104 	addi	r2,gp,-32700
   56b7c:	18bfcf1e 	bne	r3,r2,56abc <__alt_data_end+0xfffef9bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   56b80:	0001883a 	nop
}
   56b84:	e037883a 	mov	sp,fp
   56b88:	dfc00117 	ldw	ra,4(sp)
   56b8c:	df000017 	ldw	fp,0(sp)
   56b90:	dec00204 	addi	sp,sp,8
   56b94:	f800283a 	ret

00056b98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   56b98:	deffff04 	addi	sp,sp,-4
   56b9c:	df000015 	stw	fp,0(sp)
   56ba0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   56ba4:	000170fa 	wrctl	ienable,zero
}
   56ba8:	e037883a 	mov	sp,fp
   56bac:	df000017 	ldw	fp,0(sp)
   56bb0:	dec00104 	addi	sp,sp,4
   56bb4:	f800283a 	ret

00056bb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   56bb8:	defffa04 	addi	sp,sp,-24
   56bbc:	dfc00515 	stw	ra,20(sp)
   56bc0:	df000415 	stw	fp,16(sp)
   56bc4:	df000404 	addi	fp,sp,16
   56bc8:	e13ffe15 	stw	r4,-8(fp)
   56bcc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   56bd0:	e0bfff17 	ldw	r2,-4(fp)
   56bd4:	10800017 	ldw	r2,0(r2)
   56bd8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   56bdc:	e13ffe17 	ldw	r4,-8(fp)
   56be0:	00494340 	call	49434 <strlen>
   56be4:	10800044 	addi	r2,r2,1
   56be8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   56bec:	00000d06 	br	56c24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   56bf0:	e0bffc17 	ldw	r2,-16(fp)
   56bf4:	10c00217 	ldw	r3,8(r2)
   56bf8:	e0bffd17 	ldw	r2,-12(fp)
   56bfc:	1809883a 	mov	r4,r3
   56c00:	e17ffe17 	ldw	r5,-8(fp)
   56c04:	100d883a 	mov	r6,r2
   56c08:	0048cb40 	call	48cb4 <memcmp>
   56c0c:	1000021e 	bne	r2,zero,56c18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   56c10:	e0bffc17 	ldw	r2,-16(fp)
   56c14:	00000706 	br	56c34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   56c18:	e0bffc17 	ldw	r2,-16(fp)
   56c1c:	10800017 	ldw	r2,0(r2)
   56c20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   56c24:	e0fffc17 	ldw	r3,-16(fp)
   56c28:	e0bfff17 	ldw	r2,-4(fp)
   56c2c:	18bff01e 	bne	r3,r2,56bf0 <__alt_data_end+0xfffefaf0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   56c30:	0005883a 	mov	r2,zero
}
   56c34:	e037883a 	mov	sp,fp
   56c38:	dfc00117 	ldw	ra,4(sp)
   56c3c:	df000017 	ldw	fp,0(sp)
   56c40:	dec00204 	addi	sp,sp,8
   56c44:	f800283a 	ret

00056c48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   56c48:	defffb04 	addi	sp,sp,-20
   56c4c:	dfc00415 	stw	ra,16(sp)
   56c50:	df000315 	stw	fp,12(sp)
   56c54:	df000304 	addi	fp,sp,12
   56c58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   56c5c:	008001b4 	movhi	r2,6
   56c60:	10b33604 	addi	r2,r2,-13096
   56c64:	10800017 	ldw	r2,0(r2)
   56c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   56c6c:	00003106 	br	56d34 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   56c70:	e0bffd17 	ldw	r2,-12(fp)
   56c74:	10800217 	ldw	r2,8(r2)
   56c78:	1009883a 	mov	r4,r2
   56c7c:	00494340 	call	49434 <strlen>
   56c80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   56c84:	e0bffd17 	ldw	r2,-12(fp)
   56c88:	10c00217 	ldw	r3,8(r2)
   56c8c:	e0bffe17 	ldw	r2,-8(fp)
   56c90:	10bfffc4 	addi	r2,r2,-1
   56c94:	1885883a 	add	r2,r3,r2
   56c98:	10800003 	ldbu	r2,0(r2)
   56c9c:	10803fcc 	andi	r2,r2,255
   56ca0:	1080201c 	xori	r2,r2,128
   56ca4:	10bfe004 	addi	r2,r2,-128
   56ca8:	10800bd8 	cmpnei	r2,r2,47
   56cac:	1000031e 	bne	r2,zero,56cbc <alt_find_file+0x74>
    {
      len -= 1;
   56cb0:	e0bffe17 	ldw	r2,-8(fp)
   56cb4:	10bfffc4 	addi	r2,r2,-1
   56cb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   56cbc:	e0bffe17 	ldw	r2,-8(fp)
   56cc0:	e0ffff17 	ldw	r3,-4(fp)
   56cc4:	1885883a 	add	r2,r3,r2
   56cc8:	10800003 	ldbu	r2,0(r2)
   56ccc:	10803fcc 	andi	r2,r2,255
   56cd0:	1080201c 	xori	r2,r2,128
   56cd4:	10bfe004 	addi	r2,r2,-128
   56cd8:	10800be0 	cmpeqi	r2,r2,47
   56cdc:	1000081e 	bne	r2,zero,56d00 <alt_find_file+0xb8>
   56ce0:	e0bffe17 	ldw	r2,-8(fp)
   56ce4:	e0ffff17 	ldw	r3,-4(fp)
   56ce8:	1885883a 	add	r2,r3,r2
   56cec:	10800003 	ldbu	r2,0(r2)
   56cf0:	10803fcc 	andi	r2,r2,255
   56cf4:	1080201c 	xori	r2,r2,128
   56cf8:	10bfe004 	addi	r2,r2,-128
   56cfc:	10000a1e 	bne	r2,zero,56d28 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   56d00:	e0bffd17 	ldw	r2,-12(fp)
   56d04:	10c00217 	ldw	r3,8(r2)
   56d08:	e0bffe17 	ldw	r2,-8(fp)
   56d0c:	1809883a 	mov	r4,r3
   56d10:	e17fff17 	ldw	r5,-4(fp)
   56d14:	100d883a 	mov	r6,r2
   56d18:	0048cb40 	call	48cb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   56d1c:	1000021e 	bne	r2,zero,56d28 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   56d20:	e0bffd17 	ldw	r2,-12(fp)
   56d24:	00000806 	br	56d48 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   56d28:	e0bffd17 	ldw	r2,-12(fp)
   56d2c:	10800017 	ldw	r2,0(r2)
   56d30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   56d34:	e0fffd17 	ldw	r3,-12(fp)
   56d38:	008001b4 	movhi	r2,6
   56d3c:	10b33604 	addi	r2,r2,-13096
   56d40:	18bfcb1e 	bne	r3,r2,56c70 <__alt_data_end+0xfffefb70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   56d44:	0005883a 	mov	r2,zero
}
   56d48:	e037883a 	mov	sp,fp
   56d4c:	dfc00117 	ldw	ra,4(sp)
   56d50:	df000017 	ldw	fp,0(sp)
   56d54:	dec00204 	addi	sp,sp,8
   56d58:	f800283a 	ret

00056d5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   56d5c:	defffc04 	addi	sp,sp,-16
   56d60:	df000315 	stw	fp,12(sp)
   56d64:	df000304 	addi	fp,sp,12
   56d68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   56d6c:	00bffa04 	movi	r2,-24
   56d70:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   56d74:	e03ffd15 	stw	zero,-12(fp)
   56d78:	00001d06 	br	56df0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   56d7c:	008001b4 	movhi	r2,6
   56d80:	10aeb504 	addi	r2,r2,-17708
   56d84:	e0fffd17 	ldw	r3,-12(fp)
   56d88:	18c00324 	muli	r3,r3,12
   56d8c:	10c5883a 	add	r2,r2,r3
   56d90:	10800017 	ldw	r2,0(r2)
   56d94:	1000131e 	bne	r2,zero,56de4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   56d98:	008001b4 	movhi	r2,6
   56d9c:	10aeb504 	addi	r2,r2,-17708
   56da0:	e0fffd17 	ldw	r3,-12(fp)
   56da4:	18c00324 	muli	r3,r3,12
   56da8:	10c5883a 	add	r2,r2,r3
   56dac:	e0ffff17 	ldw	r3,-4(fp)
   56db0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   56db4:	008001b4 	movhi	r2,6
   56db8:	10b33a04 	addi	r2,r2,-13080
   56dbc:	10c00017 	ldw	r3,0(r2)
   56dc0:	e0bffd17 	ldw	r2,-12(fp)
   56dc4:	1880040e 	bge	r3,r2,56dd8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   56dc8:	008001b4 	movhi	r2,6
   56dcc:	10b33a04 	addi	r2,r2,-13080
   56dd0:	e0fffd17 	ldw	r3,-12(fp)
   56dd4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   56dd8:	e0bffd17 	ldw	r2,-12(fp)
   56ddc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   56de0:	00000606 	br	56dfc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   56de4:	e0bffd17 	ldw	r2,-12(fp)
   56de8:	10800044 	addi	r2,r2,1
   56dec:	e0bffd15 	stw	r2,-12(fp)
   56df0:	e0bffd17 	ldw	r2,-12(fp)
   56df4:	10800810 	cmplti	r2,r2,32
   56df8:	103fe01e 	bne	r2,zero,56d7c <__alt_data_end+0xfffefc7c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   56dfc:	e0bffe17 	ldw	r2,-8(fp)
}
   56e00:	e037883a 	mov	sp,fp
   56e04:	df000017 	ldw	fp,0(sp)
   56e08:	dec00104 	addi	sp,sp,4
   56e0c:	f800283a 	ret

00056e10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   56e10:	defffb04 	addi	sp,sp,-20
   56e14:	df000415 	stw	fp,16(sp)
   56e18:	df000404 	addi	fp,sp,16
   56e1c:	e13ffe15 	stw	r4,-8(fp)
   56e20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   56e24:	e0bfff17 	ldw	r2,-4(fp)
   56e28:	10840070 	cmpltui	r2,r2,4097
   56e2c:	1000021e 	bne	r2,zero,56e38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   56e30:	00840004 	movi	r2,4096
   56e34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   56e38:	e0fffe17 	ldw	r3,-8(fp)
   56e3c:	e0bfff17 	ldw	r2,-4(fp)
   56e40:	1885883a 	add	r2,r3,r2
   56e44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   56e48:	e0bffe17 	ldw	r2,-8(fp)
   56e4c:	e0bffc15 	stw	r2,-16(fp)
   56e50:	00000506 	br	56e68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   56e54:	e0bffc17 	ldw	r2,-16(fp)
   56e58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   56e5c:	e0bffc17 	ldw	r2,-16(fp)
   56e60:	10800804 	addi	r2,r2,32
   56e64:	e0bffc15 	stw	r2,-16(fp)
   56e68:	e0fffc17 	ldw	r3,-16(fp)
   56e6c:	e0bffd17 	ldw	r2,-12(fp)
   56e70:	18bff836 	bltu	r3,r2,56e54 <__alt_data_end+0xfffefd54>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   56e74:	e0bffe17 	ldw	r2,-8(fp)
   56e78:	108007cc 	andi	r2,r2,31
   56e7c:	10000226 	beq	r2,zero,56e88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   56e80:	e0bffc17 	ldw	r2,-16(fp)
   56e84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   56e88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   56e8c:	e037883a 	mov	sp,fp
   56e90:	df000017 	ldw	fp,0(sp)
   56e94:	dec00104 	addi	sp,sp,4
   56e98:	f800283a 	ret

00056e9c <atexit>:
   56e9c:	200b883a 	mov	r5,r4
   56ea0:	000d883a 	mov	r6,zero
   56ea4:	0009883a 	mov	r4,zero
   56ea8:	000f883a 	mov	r7,zero
   56eac:	0056ee81 	jmpi	56ee8 <__register_exitproc>

00056eb0 <exit>:
   56eb0:	defffe04 	addi	sp,sp,-8
   56eb4:	000b883a 	mov	r5,zero
   56eb8:	dc000015 	stw	r16,0(sp)
   56ebc:	dfc00115 	stw	ra,4(sp)
   56ec0:	2021883a 	mov	r16,r4
   56ec4:	0056ffc0 	call	56ffc <__call_exitprocs>
   56ec8:	008001b4 	movhi	r2,6
   56ecc:	10b32f04 	addi	r2,r2,-13124
   56ed0:	11000017 	ldw	r4,0(r2)
   56ed4:	20800f17 	ldw	r2,60(r4)
   56ed8:	10000126 	beq	r2,zero,56ee0 <exit+0x30>
   56edc:	103ee83a 	callr	r2
   56ee0:	8009883a 	mov	r4,r16
   56ee4:	00571900 	call	57190 <_exit>

00056ee8 <__register_exitproc>:
   56ee8:	008001b4 	movhi	r2,6
   56eec:	defffa04 	addi	sp,sp,-24
   56ef0:	10b32f04 	addi	r2,r2,-13124
   56ef4:	dc000315 	stw	r16,12(sp)
   56ef8:	14000017 	ldw	r16,0(r2)
   56efc:	dc400415 	stw	r17,16(sp)
   56f00:	dfc00515 	stw	ra,20(sp)
   56f04:	80805217 	ldw	r2,328(r16)
   56f08:	2023883a 	mov	r17,r4
   56f0c:	10003626 	beq	r2,zero,56fe8 <__register_exitproc+0x100>
   56f10:	10c00117 	ldw	r3,4(r2)
   56f14:	010007c4 	movi	r4,31
   56f18:	20c00e16 	blt	r4,r3,56f54 <__register_exitproc+0x6c>
   56f1c:	1a400044 	addi	r9,r3,1
   56f20:	8800211e 	bne	r17,zero,56fa8 <__register_exitproc+0xc0>
   56f24:	18c00084 	addi	r3,r3,2
   56f28:	18c7883a 	add	r3,r3,r3
   56f2c:	18c7883a 	add	r3,r3,r3
   56f30:	12400115 	stw	r9,4(r2)
   56f34:	10c7883a 	add	r3,r2,r3
   56f38:	19400015 	stw	r5,0(r3)
   56f3c:	0005883a 	mov	r2,zero
   56f40:	dfc00517 	ldw	ra,20(sp)
   56f44:	dc400417 	ldw	r17,16(sp)
   56f48:	dc000317 	ldw	r16,12(sp)
   56f4c:	dec00604 	addi	sp,sp,24
   56f50:	f800283a 	ret
   56f54:	00800034 	movhi	r2,0
   56f58:	10800004 	addi	r2,r2,0
   56f5c:	10002526 	beq	r2,zero,56ff4 <__register_exitproc+0x10c>
   56f60:	01006404 	movi	r4,400
   56f64:	d9400015 	stw	r5,0(sp)
   56f68:	d9800115 	stw	r6,4(sp)
   56f6c:	d9c00215 	stw	r7,8(sp)
   56f70:	00000000 	call	0 <__reset-0x40000>
   56f74:	d9400017 	ldw	r5,0(sp)
   56f78:	d9800117 	ldw	r6,4(sp)
   56f7c:	d9c00217 	ldw	r7,8(sp)
   56f80:	10001c26 	beq	r2,zero,56ff4 <__register_exitproc+0x10c>
   56f84:	80c05217 	ldw	r3,328(r16)
   56f88:	10000115 	stw	zero,4(r2)
   56f8c:	02400044 	movi	r9,1
   56f90:	10c00015 	stw	r3,0(r2)
   56f94:	80805215 	stw	r2,328(r16)
   56f98:	10006215 	stw	zero,392(r2)
   56f9c:	10006315 	stw	zero,396(r2)
   56fa0:	0007883a 	mov	r3,zero
   56fa4:	883fdf26 	beq	r17,zero,56f24 <__alt_data_end+0xfffefe24>
   56fa8:	18d1883a 	add	r8,r3,r3
   56fac:	4211883a 	add	r8,r8,r8
   56fb0:	1211883a 	add	r8,r2,r8
   56fb4:	41802215 	stw	r6,136(r8)
   56fb8:	01000044 	movi	r4,1
   56fbc:	11806217 	ldw	r6,392(r2)
   56fc0:	20c8983a 	sll	r4,r4,r3
   56fc4:	310cb03a 	or	r6,r6,r4
   56fc8:	11806215 	stw	r6,392(r2)
   56fcc:	41c04215 	stw	r7,264(r8)
   56fd0:	01800084 	movi	r6,2
   56fd4:	89bfd31e 	bne	r17,r6,56f24 <__alt_data_end+0xfffefe24>
   56fd8:	11806317 	ldw	r6,396(r2)
   56fdc:	3108b03a 	or	r4,r6,r4
   56fe0:	11006315 	stw	r4,396(r2)
   56fe4:	003fcf06 	br	56f24 <__alt_data_end+0xfffefe24>
   56fe8:	80805304 	addi	r2,r16,332
   56fec:	80805215 	stw	r2,328(r16)
   56ff0:	003fc706 	br	56f10 <__alt_data_end+0xfffefe10>
   56ff4:	00bfffc4 	movi	r2,-1
   56ff8:	003fd106 	br	56f40 <__alt_data_end+0xfffefe40>

00056ffc <__call_exitprocs>:
   56ffc:	008001b4 	movhi	r2,6
   57000:	10b32f04 	addi	r2,r2,-13124
   57004:	10800017 	ldw	r2,0(r2)
   57008:	defff404 	addi	sp,sp,-48
   5700c:	dd800815 	stw	r22,32(sp)
   57010:	d8800015 	stw	r2,0(sp)
   57014:	10805204 	addi	r2,r2,328
   57018:	dd000615 	stw	r20,24(sp)
   5701c:	dc800415 	stw	r18,16(sp)
   57020:	dfc00b15 	stw	ra,44(sp)
   57024:	df000a15 	stw	fp,40(sp)
   57028:	ddc00915 	stw	r23,36(sp)
   5702c:	dd400715 	stw	r21,28(sp)
   57030:	dcc00515 	stw	r19,20(sp)
   57034:	dc400315 	stw	r17,12(sp)
   57038:	dc000215 	stw	r16,8(sp)
   5703c:	2025883a 	mov	r18,r4
   57040:	2829883a 	mov	r20,r5
   57044:	d8800115 	stw	r2,4(sp)
   57048:	05bfffc4 	movi	r22,-1
   5704c:	d8800017 	ldw	r2,0(sp)
   57050:	14c05217 	ldw	r19,328(r2)
   57054:	98001d26 	beq	r19,zero,570cc <__call_exitprocs+0xd0>
   57058:	dd400117 	ldw	r21,4(sp)
   5705c:	98800117 	ldw	r2,4(r19)
   57060:	173fffc4 	addi	fp,r2,-1
   57064:	e0000d16 	blt	fp,zero,5709c <__call_exitprocs+0xa0>
   57068:	14000044 	addi	r16,r2,1
   5706c:	8421883a 	add	r16,r16,r16
   57070:	8421883a 	add	r16,r16,r16
   57074:	84402004 	addi	r17,r16,128
   57078:	9c63883a 	add	r17,r19,r17
   5707c:	9c21883a 	add	r16,r19,r16
   57080:	a0001e26 	beq	r20,zero,570fc <__call_exitprocs+0x100>
   57084:	80804017 	ldw	r2,256(r16)
   57088:	15001c26 	beq	r2,r20,570fc <__call_exitprocs+0x100>
   5708c:	e73fffc4 	addi	fp,fp,-1
   57090:	843fff04 	addi	r16,r16,-4
   57094:	8c7fff04 	addi	r17,r17,-4
   57098:	e5bff91e 	bne	fp,r22,57080 <__alt_data_end+0xfffeff80>
   5709c:	00800034 	movhi	r2,0
   570a0:	10800004 	addi	r2,r2,0
   570a4:	10000926 	beq	r2,zero,570cc <__call_exitprocs+0xd0>
   570a8:	98800117 	ldw	r2,4(r19)
   570ac:	1000311e 	bne	r2,zero,57174 <__call_exitprocs+0x178>
   570b0:	98800017 	ldw	r2,0(r19)
   570b4:	10003426 	beq	r2,zero,57188 <__call_exitprocs+0x18c>
   570b8:	9809883a 	mov	r4,r19
   570bc:	a8800015 	stw	r2,0(r21)
   570c0:	00000000 	call	0 <__reset-0x40000>
   570c4:	acc00017 	ldw	r19,0(r21)
   570c8:	983fe41e 	bne	r19,zero,5705c <__alt_data_end+0xfffeff5c>
   570cc:	dfc00b17 	ldw	ra,44(sp)
   570d0:	df000a17 	ldw	fp,40(sp)
   570d4:	ddc00917 	ldw	r23,36(sp)
   570d8:	dd800817 	ldw	r22,32(sp)
   570dc:	dd400717 	ldw	r21,28(sp)
   570e0:	dd000617 	ldw	r20,24(sp)
   570e4:	dcc00517 	ldw	r19,20(sp)
   570e8:	dc800417 	ldw	r18,16(sp)
   570ec:	dc400317 	ldw	r17,12(sp)
   570f0:	dc000217 	ldw	r16,8(sp)
   570f4:	dec00c04 	addi	sp,sp,48
   570f8:	f800283a 	ret
   570fc:	98800117 	ldw	r2,4(r19)
   57100:	80c00017 	ldw	r3,0(r16)
   57104:	10bfffc4 	addi	r2,r2,-1
   57108:	17001526 	beq	r2,fp,57160 <__call_exitprocs+0x164>
   5710c:	80000015 	stw	zero,0(r16)
   57110:	183fde26 	beq	r3,zero,5708c <__alt_data_end+0xfffeff8c>
   57114:	00800044 	movi	r2,1
   57118:	1708983a 	sll	r4,r2,fp
   5711c:	98806217 	ldw	r2,392(r19)
   57120:	9dc00117 	ldw	r23,4(r19)
   57124:	2084703a 	and	r2,r4,r2
   57128:	1000061e 	bne	r2,zero,57144 <__call_exitprocs+0x148>
   5712c:	183ee83a 	callr	r3
   57130:	98800117 	ldw	r2,4(r19)
   57134:	15ffc51e 	bne	r2,r23,5704c <__alt_data_end+0xfffeff4c>
   57138:	a8800017 	ldw	r2,0(r21)
   5713c:	14ffd326 	beq	r2,r19,5708c <__alt_data_end+0xfffeff8c>
   57140:	003fc206 	br	5704c <__alt_data_end+0xfffeff4c>
   57144:	98806317 	ldw	r2,396(r19)
   57148:	2084703a 	and	r2,r4,r2
   5714c:	1000061e 	bne	r2,zero,57168 <__call_exitprocs+0x16c>
   57150:	89400017 	ldw	r5,0(r17)
   57154:	9009883a 	mov	r4,r18
   57158:	183ee83a 	callr	r3
   5715c:	003ff406 	br	57130 <__alt_data_end+0xffff0030>
   57160:	9f000115 	stw	fp,4(r19)
   57164:	003fea06 	br	57110 <__alt_data_end+0xffff0010>
   57168:	89000017 	ldw	r4,0(r17)
   5716c:	183ee83a 	callr	r3
   57170:	003fef06 	br	57130 <__alt_data_end+0xffff0030>
   57174:	98800017 	ldw	r2,0(r19)
   57178:	982b883a 	mov	r21,r19
   5717c:	1027883a 	mov	r19,r2
   57180:	983fb61e 	bne	r19,zero,5705c <__alt_data_end+0xfffeff5c>
   57184:	003fd106 	br	570cc <__alt_data_end+0xfffeffcc>
   57188:	0005883a 	mov	r2,zero
   5718c:	003ffa06 	br	57178 <__alt_data_end+0xffff0078>

00057190 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   57190:	defffd04 	addi	sp,sp,-12
   57194:	df000215 	stw	fp,8(sp)
   57198:	df000204 	addi	fp,sp,8
   5719c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   571a0:	0001883a 	nop
   571a4:	e0bfff17 	ldw	r2,-4(fp)
   571a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   571ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   571b0:	10000226 	beq	r2,zero,571bc <_exit+0x2c>
    ALT_SIM_FAIL();
   571b4:	002af070 	cmpltui	zero,zero,43969
   571b8:	00000106 	br	571c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   571bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   571c0:	003fff06 	br	571c0 <__alt_data_end+0xffff00c0>
